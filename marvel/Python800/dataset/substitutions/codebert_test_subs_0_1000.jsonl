{"code": "# C - Marks\\n\\n\\ndef marks(n, k, a):\\n    results = []\\n    for i in range(n - k):\\n        if a[i] < a[i + k]:\\n            results.append(\"Yes\")\\n        else:\\n            results.append(\"No\")\\n    return results\\n\\n\\nif __name__ == \"__main__\":\\n    n, k = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    results = marks(n, k, a)\\n    for i in results:\\n        print(i)\\n", "target": "320", "substitutes": {}}
{"code": "n, m = map(int, input().split())                    \\nroute_lists = [input().split() for i in range(m)]   \\nnew_lists = []                                      \\nfor i in route_lists:                               \\n  for j in range(2):                                \\n    new_lists.append(i[j])                          \\n                                                                                      \\nfor i in range(1, n+1, 1):                          \\n  print(new_lists.count(str(i)))", "target": "180", "substitutes": {"n": ["o", "k", "x", "c", "d", "nb", "name", "num", "t", "y", "en", "h", "network", "u", "size", "f", "e", "nt", "b", "ns", "no", "w", "z", "l", "v", "ii", "r", "nc", "p", "N"], "m": ["o", "mc", "k", "x", "c", "d", "s", "num", "range", "y", "mn", "g", "dim", "h", "ms", "cm", "u", "f", "e", "b", "mi", "mm", "w", "z", "l", "v", "r", "M", "p", "N"], "route_lists": ["route_lines", "route5list", "route2lines", "route5lines", "route2lists", "route5pieces", "route_ls", "new_lines", "route_list", "route_pieces", "new_pieces", "new_list", "route2ls", "route2list", "route5lists", "new_ls"], "i": ["pi", "di", "o", "it", "ji", "uri", "k", "x", "xi", "_", "gi", "c", "ci", "d", "slice", "phi", " ii", "a", "ie", "int", "ind", "num", "list", "array", "ini", "ni", "id", "y", "ij", "index", "source", "ip", " l", "si", "u", "iu", "f", "ti", "I", "e", "b", "im", "ai", "z", "p", "qi", "v", "l", "ii", "ic", "li", "r", "ih", "io"], "new_lists": ["new_details", "new5lists", "new5cards", "route5cards", "new2details", " new2lists", "new_cards", "new5maps", "route5maps", "new_maps", "newingcards", " new_list", "different_lists", " new_balls", "new2maps", "new2list", "newinglists", "new_lines", "route_cards", " new_details", "new_balls", "route_maps", "newingmaps", "new_list", " new2balls", "new2cards", "different_classes", "different_lines", " new2list", "new2balls", " new2details", "route5lists", "different_list", "new_classes", "new2lists"], "j": ["kj", " bi", "ji", " J", "o", "k", " je", "x", " job", "c", "a", " inj", "pos", "oj", "uj", "J", " ip", "y", " dj", "ij", "bj", "job", "index", "jl", "jo", " obj", "u", "je", "adj", "b", "jj", "z", "l", "jp", "v", "ii", "li", "p", " jo"]}}
{"code": "\\n\\ndef main():\\n\\n\\n   N,A,B = map(int,input().split())\\n   print(A*N) if A*N <= B else print(B)\\n\\n\\n\\nif __name__== \"__main__\":\\n    main() \\n\\n\\n\\n\\n", "target": "751", "substitutes": {"N": ["U", "Node", "NA", "D", "S", "R", "NS", "E", "NL", "Ns", "T", "n", "J", "W", "Y", "L", "G", "Part", "Num", " n", "NN", "Q", "I", "X", "C", "Na", "Ne", "V", "P", "K", "O", "M", "F", "Z"], "A": ["U", "Ca", "NA", "D", "S", "E", "a", "CA", "T", "PA", "mA", "IA", "Array", "Y", "Az", "AM", "L", "G", "DA", "AY", "GA", "OA", "SA", "AU", "An", "EA", "AP", "I", "AA", "X", "C", "MA", "V", "P", "FA", "API", "AB", "O", "AC", "M", "AW", "F", "LA"], "B": ["U", "D", "S", "R", "Other", "E", "LB", "T", "W", "J", "BE", "Y", "L", "G", "NB", "BA", "BD", "OB", "Q", "Bs", "GB", "BL", "WB", "I", "b", "X", "Number", "C", "V", "MB", "P", "K", "AB", "O", "H", "M", "F", "Z"]}}
{"code": "n = int(input())\\ns = input()\\nrs = [0]*n\\ngs = [0]*n\\nbs = [0]*n\\nfor i in reversed(range(n)):\\n    if s[i] == 'R':\\n        rs[i] += 1\\n    elif s[i] == 'G':\\n        gs[i] += 1\\n    else:\\n        bs[i] += 1\\nfor i in reversed(range(n-1)):\\n    rs[i] += rs[i+1]\\n    gs[i] += gs[i+1]\\n    bs[i] += bs[i+1]\\nres = 0\\nfor i in range(n):\\n    for j in range(i+1,n-1):\\n        if s[i] == s[j]:\\n            continue\\n        if s[i]!='B' and s[j]!='B':\\n            res += bs[j+1]\\n            if j-i+j < n:\\n                if s[j-i+j] == 'B':\\n                    res -=1\\n        elif s[i]!='G' and s[j]!='G':\\n            res += gs[j+1]\\n            if j - i + j < n:\\n                if s[j-i+j] == 'G':\\n                    res -=1\\n        else:\\n            res += rs[j+1]\\n            if j - i + j < n:\\n                if s[j-i+j] == 'R':\\n                    res -= 1\\nprint(res)", "target": "294", "substitutes": {"n": ["mini", "ner", "log", "o", "k", "al", "x", "c", "np", "d", "nb", "ny", "num", "non", "t", "an", "ni", "y", "mn", "na", "g", "min", "en", "h", "network", "inn", "nan", "nn", "un", "nu", "u", "net", "len", "pre", "nt", "fn", "e", "max", "b", "f", "ns", "rn", "none", "sn", "no", "w", "nor", "z", "dn", "l", "v", "zn", "m", "r", "nc", "p", "ne", "N"], "s": ["services", "zes", "c", "acks", "abs", "qs", "ours", "t", "ows", "strings", "ches", "h", "ms", "blocks", "ists", "f", "ns", "ments", "words", "p", "arms", "ers", "js", "ors", "ings", "d", "ws", "ses", "a", "sys", "ss", "als", "ships", "cs", "y", "ks", "sites", "ores", "uses", "sym", "tests", "sb", "irs", "groups", "r", "hs", "ls", "fs", "S", "bes", "olds", "ats", "ds", "ids", "lines", "u", "sets", "e", "ps", "ans", "es", "ays", "l", "v", "xs", "erences", "rates", "states", "o", "ides", "ins", "ops", "outs", "g", "os", "ts", "si", "ys", "b", "resses", "ions", "aces", "ubs"], "rs": ["ls", "rates", "js", "Rs", "x", "ges", "R", "RS", "ras", "runs", "ins", "vers", "ars", "ss", "opens", "vs", "obs", "rus", "sts", "ows", "mr", "rb", "ats", "cs", "rt", "g", "ds", "rows", "ks", "ris", "rys", "rings", "ys", "ns", "rics", "ros", "ans", "ps", "es", "ays", "ims", "r", "xs", "rss", "hs", "rc", "sr"], "gs": ["ls", "GS", "pg", "ges", "gi", "ags", "gm", "ages", "vs", "ogs", "ge", "args", "qs", "banks", "go", "gments", "gz", "outs", "cs", "gd", "gres", "gin", "g", "gy", "gb", "ds", "ig", "gg", "rams", "igs", "ys", "anges", "ps", "ns", "b", "gt", "es", "ga", "gh", "GES", "ays", "ims", "gn", "sg", "groups", "gas", "Gs", "xs", "ains", "hs", "gp"], "bs": ["ls", "fs", "js", "BS", "bes", "ras", "bytes", "ws", "cb", "bits", "ses", "ab", "uss", "ss", "bc", "als", "vs", "bos", "bis", "abs", "rus", "banks", "ats", "bi", "outs", "cs", "cases", "os", "breaks", "css", "gb", "ds", "blocks", "bl", "Bs", "ys", "b", "ps", "ns", "ans", "ros", "es", "sb", "ubs", "ba", "bb"], "i": ["it", "xi", "idi", "c", "oi", "phi", "uli", "t", "bi", "isi", "ip", "multi", "eni", "iu", "f", "I", "ti", "mi", "ki", "z", "m", "io", "p", "zi", "ji", "x", "gi", "ci", "d", "a", "ori", "range", "id", "y", "ix", "iv", "fi", "hi", "ii", "li", "r", "vi", "pi", "di", "uri", "yi", "ie", "cli", "int", "ind", "ini", "iq", "index", "iii", "u", "e", "qi", "l", "v", "ei", "ik", "o", "ri", "ui", "ni", "info", "api", "g", "ir", "ij", "ia", "si", "b", "ai"], "res": ["core", "js", "rest", "success", "err", "resolution", "out", "exp", "our", "x", "response", "results", "ras", "real", "ver", "sol", "re", "rus", "mer", "rh", "press", "mr", "reg", "RES", "rez", "cache", "range", "Res", "result", "details", "key", "resh", "cs", "hard", "os", "val", "rem", "css", "score", "pres", "des", "ms", "ret", "ix", "vals", "error", "row", "reed", "nos", "resource", "max", "ps", "reset", "resp", " Res", "rev", "gr", "params", "ress", "r", "right", "prev", "req"], "j": ["note", "el", "di", "ji", "o", "js", "k", "jen", "x", "c", "gi", "er", "d", "a", "jc", "ie", "io", "oj", "J", "ind", "all", "t", "y", "on", "g", "ij", "h", "bj", "ia", "ix", "jl", "job", "jo", "si", "br", "u", "ja", "e", "je", "f", "obj", "b", "jj", "jet", "adj", "gh", "dj", "z", "qi", "json", "l", "jp", "aj", "v", "r", "li", "ii", "fr", "m", "p", "uj", "ne"]}}
{"code": "n = int(input())\\nh = list(map(int,input().split()))\\nmaxi = 0\\ncount = 0\\nfor i in range(n):\\n  maxi = max(maxi,h[i])\\n  if maxi == h[i]:\\n    count += 1\\nprint(count)", "target": "26", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "name", "num", "t", "y", "min", "network", "nn", "span", "number", "u", "size", "len", "fn", "max", "b", "ns", "sn", "w", "nor", "z", "l", "length", "m", "nc", "p", "ne", "N"], "h": ["o", "k", "x", "c", "d", "ht", "bh", "head", "s", "rh", "t", "y", "ph", "body", "g", "ah", "host", "u", "f", "e", "max", "b", "q", "sh", "w", "z", "l", "v", "hm", "m", "r", "H", "length", "p", "hs"], "maxi": ["mini", " maxini", "maxI", " maxui", " maxj", "maxui", "minI", "endj", "axid", "axj", " maxsi", "MAXui", "excepti", "maxini", "minui", "MAXi", "minsi", " maxI", "maxj", "endI", " maxid", "axi", "MAXj", "exceptini", "maxid", "MAXI", "endid", "axI", "exceptI", "endi", "axini", "minj", "maxsi", "MAXsi"], "count": ["type", "case", "err", "c", "current", "sum", "nb", "start", "int", "ind", "num", "depth", "cache", "list", "weight", "id", "test", "key", "total", "time", "force", "parent", "index", "number", "error", "size", "len", "Count", "f", "e", "max", "code", "match", "base", "limit", "child", "counter", "l", "found", "length", "skip", "now", "p"], "i": ["pi", "di", "k", "x", "xi", "j", "c", "gi", "gu", "ci", "d", "yi", "ri", "phi", "a", "io", "start", "ori", "ind", "ui", "ini", "bi", "id", "y", " j", "multi", "eni", "si", "u", "iu", "e", "I", "ti", "b", "ai", "z", "qi", "l", "ii", "li", "p"]}}
{"code": "n=int(input())\\nl=[]\\nfor i in range(n):\\n    p=int(input())\\n    l.append(p)\\nl=sorted(l)\\nmax_l=l[-1]\\nl.pop()\\nprint(max_l//2+sum(l))", "target": "259", "substitutes": {"n": ["pi", "ls", "o", "part", "log", "k", "x", "j", "c", "np", "nb", "num", "s", "t", "L", "y", "count", "h", "network", "nn", "nl", "len", "size", "f", "nt", "b", "ns", "sn", "limit", "w", "z", "v", "lc", "m", "nc", "ln", "ne", "N"], "l": ["el", "lp", "ls", "o", "loc", "log", "ol", "le", "lf", "ul", "c", "d", "left", "kl", "lo", "fl", "ell", "sl", "ll", "list", "t", "L", "g", "bl", "nl", "la", "il", "u", "len", "f", "e", "rl", "b", "pl", "dl", "z", "lc", "v", "m", "li", "r", "ln", "cl"], "i": ["pi", "o", "k", "j", "c", "d", "start", "ind", "id", "y", "pri", "h", "ix", "index", "ip", "il", "u", "pp", "f", "e", "I", "im", "q", "li", "r"], "p": ["pi", "lp", "tp", "o", "k", "x", "j", "c", "np", "d", "pos", "po", "t", "y", "api", "g", "cp", "ip", "u", "pp", "f", "e", "b", "q", "P", "z", "v", "jp", "pc", "m", "r", "pe", "bp", "fp"], "max_l": ["maxNL", "max_L", " max_L", "max_v", "maxNlc", "last_lc", "max_lc", "last_l", " max_lc", " max_v", "last_ll", "maxNv", "max_ll", "maxNl"]}}
{"code": "n,m = [int(i) for i in input().split()]\\n\\nA = [[int(i) for i in input().split()] for j in range(n)]\\nB = [int(input()) for i in range(m)]\\n\\nfor i in range(n):\\n    c = 0\\n    for j in range(m):\\n        c += A[i][j]*B[j]\\n    print(c)\\n", "target": "614", "substitutes": {"n": ["o", "k", "x", "d", "nb", "a", "an", "num", "s", "t", "y", "en", "u", "size", "net", "f", "e", "b", "ns", "C", "q", "w", "z", "l", "v", "r", "M", "nc", "p", "ne", "N"], "m": ["o", "k", "x", "d", "a", "s", "an", "t", "range", "y", "mn", "g", "h", "ym", "u", "e", "f", "b", "mm", "im", "w", "z", "v", "l", "r", "M", "p", "N"], "i": ["pi", "it", "o", "ji", "k", "x", "xi", "ci", "d", "oi", "a", "io", "ie", "int", "ind", "ini", "ui", "t", "ni", "bi", "id", "y", "on", "ix", "index", "ip", "si", "il", "u", "iu", "e", "f", "I", "ti", "b", "mi", "im", "ai", "z", "qi", "l", "v", "ii", "li", "ei", "p"], "A": ["As", "U", "AR", "D", "S", "ANC", "E", "Alpha", "a", "CA", "mA", "At", "Array", "Y", "AD", "AM", "L", "G", "Am", "Ab", "AS", "HA", "AU", "An", "AP", "Ar", "I", "AA", "X", "App", "C", "P", "API", "AF", "AC", "M", "F", "N", "LA"], "j": ["ji", "o", "js", "k", "out", "x", "xi", "ci", "d", "ie", "int", "ind", "J", "id", "y", "g", "ij", "h", "jl", "jo", "u", "iu", "ja", "f", "je", "e", "I", "b", "jj", "im", "ai", "q", "z", "l", "jp", "ii", "v", "r", "li", "p", "uj"], "B": ["U", "D", "BS", "R", "E", "LB", "BB", "T", "UB", "TB", "J", "BE", "Y", "L", "G", "NB", "BA", "VB", "OB", "BL", "GB", "Q", "Bs", "QB", "WB", "BER", "I", "b", "X", "C", "SB", "BG", "Block", "V", "MB", "P", "AB", "O", "M", "F", "N"], "c": ["cur", "o", "cn", "k", "x", "cy", "ci", "d", "col", "ac", "a", "uc", "s", "cc", "ce", "t", "cs", "y", "g", "cit", "ct", "cin", "cm", "dc", "xc", "u", "cu", "e", "f", "b", "C", "z", "cr", "l", "v", "cd", "pc", "r", "p", "count"]}}
{"code": "X=int(input())\\nans=None\\n\\nif X>=30:\\n    ans=\"Yes\"\\nelse:\\n    ans=\"No\"\\n\\nprint(ans)", "target": "371", "substitutes": {"X": ["U", "S", "ZX", "x", "Z", "XX", "XT", "T", "Y", "A", "L", "DX", " x", "XM", "Q", "C", "XL", "TX", "Cross", "V", "FF", "P", "XP", "CC", "K", "Sax", "XXX", "H", "M", "AC", "F", "N", "CL"], "ans": ["ang", "x", "aning", "results", " answers", "ras", "ins", "ars", "ants", "ean", "an", "anc", "ads", "parser", " means", "ats", "ents", "anon", "sk", "na", "aniel", "ant", "anas", "plan", "act", "ks", "ana", "An", "span", "can", "cons", "AN", "atan", "aned", "leans", "anne", "ANS", "ask", "activation", "ann", "lan", "ns", "ane", "scan", "lang", "errors", "ani", "aces", "ano", "ays", "yes", "ace", "xs", "sky", "ons"]}}
{"code": "a,b,c=list(map(int,input().split()))\\nflag=0\\nfor itr in range(1,100000):\\n    if (a*itr)%b==c: \\n        print('YES')\\n        flag=1\\n        break\\nif flag==0: print('NO')", "target": "358", "substitutes": {"a": ["area", "auto", "k", "x", "d", "ama", "ac", "ab", "aux", "af", "int", "n", "da", "an", "A", "i", "y", "alpha", "qa", "sa", "aa", "u", "e", "f", "am", "ca", "ai", "ae", "w", "asa", "m", "r", "p"], "b": ["k", "abb", "x", "d", "cb", "nb", "ab", "B", "bc", "n", "rb", "i", "y", "bs", "g", "fb", "abc", "ib", "beta", "number", "aa", "wb", "u", "f", "e", "end", "sb", "be", "ba", "l", "v", "bb", "r", "p", "count"], "c": ["k", "x", "cy", "ci", "d", "cb", "col", "ac", "uc", "n", "cc", "ce", "ch", "cs", "y", "ec", "h", "cp", "ct", "cm", "dc", "xc", "u", "e", "f", "ca", "C", "z", "cr", "l", "cd", "pc", "r", "cf", "p", "count"], "flag": ["log", "type", "part", "field", "err", "cb", "lag", "bug", "gc", "start", "const", "ie", "int", "ind", "flags", "long", "year", "fun", "warning", "info", "id", "leaf", "sort", "gui", "force", "fb", "FLAG", "offset", "ret", "bad", "bg", "py", "error", "bit", "ag", "age", "char", "star", "len", "f", "code", "status", "standard", "filter", "init", "sign", "style", "Flag", "group", "arg", "count"], "itr": ["ITnr", " itR", "pitR", " Itnr", "ITrs", "itsr", "itn", " itrs", "ITc", "itrs", "pitp", "itR", "itsp", "itsn", " Itc", "itsR", "ITr", "itnr", "itp", "pitn", " Itr", "pitr", " itnr", " Itrs", " itc", "itc", " itn", " itp"]}}
{"code": "N = int(input())\\nL = list(map(int, input().split()))\\nL.sort()\\nans = sum([L[i] for i in range(N*2) if i % 2 == 0])\\nprint(ans)\\n", "target": "215", "substitutes": {"N": ["D", "S", "R", "NS", "NL", "B", "Ns", "T", "n", "W", "J", "Y", "Ni", "G", "Len", "Num", "NT", "NM", "Size", "NN", "MN", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "L": ["LM", "S", "LU", "LO", "E", "LD", "LB", "LR", "NL", "Lo", "List", "LS", "T", "FL", "F", "Long", "LI", "G", "IL", "LP", "EL", "LE", "BL", "Language", "LT", "Li", "I", "XL", "LL", "Lu", "V", "ML", "P", "l", "DL", "O", "M", "SL", "LA"], "ans": ["ls", "Ann", "ANN", "aning", "nas", "ins", "ases", "ars", "ants", "amps", "an", "anc", " means", "ents", "anon", "CNN", "sk", "na", "anas", "ds", "ks", "nn", "An", "span", "ana", "can", "anes", "nan", "les", "AN", "atan", "leans", "aned", "cas", "ANS", "ann", "lan", "ns", "ros", "ani", "annels", "aus", "ons"], "i": ["pi", "di", "ji", "o", "k", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "ri", "oi", "phi", "a", "ori", "ind", "n", "ui", "bi", "id", "uni", "g", "ix", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "mi", "hi", "ki", "q", "ai", "w", "z", "qi", "v", "l", "ii", "li", "r", "p", "vi"]}}
{"code": "n, k = map(int, input().split())\\na = set()\\nfor i in range(k):\\n    d = int(input())\\n    a |= set(map(int, input().split()))\\nprint(len(set(range(1, n + 1)) - a))", "target": "252", "substitutes": {"n": ["o", "D", "x", "j", "c", "nb", "num", "an", "s", "t", "y", "g", "h", "u", "net", "f", "e", "b", "ns", "w", "z", "v", "l", "m", "r", "nc", "p", "N"], "k": ["ik", "o", "ke", "x", "kk", "j", "c", "ak", "y", "sk", "g", "h", "ks", "dk", "u", "f", "e", "max", "b", "q", "w", "kw", "z", "K", "v", "m", "r", "p", "km"], "a": ["ma", "area", "x", "c", "aw", "ar", "ak", "ac", "wa", "da", "an", "A", "fa", "y", "alpha", "na", "sa", "span", "aa", "u", "f", "e", "b", "am", "ad", "ca", "ga", "ai", "ae", "w", "ba", "l", "aj", "m", "p", "au"], "i": ["di", "it", "x", "j", "gi", "c", " I", "ac", "ind", "id", "g", "h", "index", "ip", "u", "iu", "f", "ti", "e", "I", "ai", "z", "qi", "ii", "li", "p"], "d": ["o", "D", "x", "c", "de", "data", "nd", "ind", "da", "id", "y", "g", "ds", "do", "dc", "u", "f", "e", "dd", "b", "ad", "w", "z", "dn", "m", "r", "p"]}}
{"code": "a = list(map(int, input().split()))\\nif a[0] % 3 == 0 or a[1] % 3 == 0 or sum(a[:2]) % 3 == 0:\\n    print(\"Possible\")\\nelse:\\n    print(\"Impossible\")\\n", "target": "635", "substitutes": {"a": ["ma", "area", "auto", "access", "ha", "sta", "input", "c", "aw", "ama", "ac", "wa", "ab", "aux", "pa", "int", "n", "da", "ata", "an", "s", "array", "A", "fa", "i", "alpha", "na", "qa", "sa", "div", "aa", "la", "va", "active", "b", "ad", "ca", "sup", "ga", "asha", "ae", "asa", "ea", "l", "aj", "p", "au"]}}
{"code": "x = input()\\ns=0\\nans=0\\nfor i in x:\\n  if i == \"S\":\\n    s+=1\\n  else:\\n    if s==0:\\n      ans +=1\\n    else:\\n      s-=1\\nprint(ans+s)", "target": "713", "substitutes": {"x": ["xp", "xi", "exp", "c", "xy", "ux", "n", "xb", " xx", "y", " X", "tx", "na", "xxx", "xa", "ax", "h", "xt", "xe", "g", "rx", "co", "ix", "index", "ex", "xc", "e", "ys", "b", "X", "xx", "xf", "xes", "w", "z", "v", "ic", "m", "xs", "p"], "s": ["states", "ls", "o", "fs", "rs", "S", "sin", "c", "ins", "ses", "ws", "a", "ss", "times", "n", "abs", "args", "an", "strings", "cs", "ats", "y", "g", "sa", "os", "h", "ds", "ts", "ips", "span", "gs", "ies", "lines", "sites", "south", "si", "sets", "e", "f", "sym", "settings", "resses", "ns", "ments", "ices", "ps", "ives", "ends", "es", "aces", "ubs", "ims", "sg", "r", "its", "ines", "small", "p", "eps"], "ans": ["aves", "ls", "S", "sin", "nas", "ins", "ars", "ss", "ants", "amps", "ens", "an", " means", "ats", "cs", "ians", "ams", "ents", "sk", "asin", "na", "os", "sa", "anas", "ds", " sins", "anes", "cons", "atan", "aned", "ANS", "ann", "lan", "ns", "scan", "ions", "aces", "ays", "annels", " scans", "xs", "aus", "ons"], "i": ["pi", "it", "ji", "o", "di", "iw", " vi", "xi", "j", "gi", "c", "sp", "ci", "d", " I", "a", "n", "ini", "ios", "t", "ni", "bi", "id", "g", "ip", "si", "iu", "f", "ti", "I", "e", "ai", "z", "p", "chi", "ii", "ic", "m", "ei", "li", "io"]}}
{"code": "N = int(input())\\n\\nres = 0\\nif N % 2 == 0:\\n    div = N // 2\\n    for i in range(1,30):\\n        res += div // 5**i\\n\\nprint(res)\\n", "target": "211", "substitutes": {"N": ["ND", "U", "NA", "D", "NOR", "S", "Max", "R", "NS", "NC", "NL", "B", "Ns", "T", "n", "J", "W", "Y", "Div", "A", "L", "G", "Num", "DIV", "NT", " n", "Size", "MN", "Q", "I", "X", "NO", "C", "NI", "Ne", "NR", "RN", "V", "P", "K", "Sum", "O", "H", "M", "F", "Z"], "res": ["Result", "err", "out", "results", "R", "raw", "sum", "data", "pos", "grid", "re", "n", "rh", "num", "range", "RES", "reg", "result", "Res", "arr", "Rev", "resh", "val", "rem", "min", "score", "blocks", "pres", "rows", "rep", "error", "row", "final", "max", "rev", "code", "resp", " Res", "gr", "Results", "r", "prev", "Div", "req", "block", "resolution"], "div": ["area", "step", "part", "dom", "input", "j", "low", "d", "sum", "dev", "mult", "dec", "ind", "n", "num", "inc", "range", "DIV", "inner", "min", "dim", "division", "span", "box", "row", "max", "rup", "fold", "sup", "power", "init", "draw", "m", "small", "Div", "form", "count"], "i": ["mini", "pi", "II", "k", "x", "xi", "j", "c", "gi", "ci", "d", " I", "sub", "a", "mult", "cli", "int", "ind", "n", "s", "ui", "range", "id", "y", "index", "ip", "si", "u", "iu", "f", "I", "ti", "e", "q", "z", "p", "chi", "v", "l", "ii", "r", "li", "m", "io"]}}
{"code": "# first line > /dev/null\\ninput()\\nitems = sorted([int(i) for i in input().split(' ')])\\nprint(items[0], items[-1], sum(items))", "target": "61", "substitutes": {}}
{"code": "a,b,c=map(int,input().split())\\ndef f(n):\\n  if(n==2000):\\n    return(c);\\n  return(a*(f(n-1))-b)\\nfor i in range (2001,2011):\\n  print(f(i))", "target": "106", "substitutes": {"a": ["area", "k", "x", "aw", "d", "ac", "ab", "int", "da", "an", "A", "fa", "y", "alpha", "na", "sa", "aa", "u", "e", "f", "ad", "ca", "ga", "ai", "ae", "w", "asa", "ba", "ea", "m", "p"], "b": ["o", "k", "abb", "x", "j", "d", "cb", "nb", "ab", "B", "bc", "rb", "A", "y", "bs", "g", "fb", "aa", "u", "lb", "e", "f", "sb", "be", "z", "l", "v", "m", "bb", "r", "p"], "c": ["o", "k", "x", "ci", "d", "ac", "s", "cc", "cs", "y", "alpha", "g", "con", "h", "cm", "number", "u", "e", "f", "code", "ca", "C", "w", "z", "l", "m", "r", "cf", "p", "count"], "n": ["o", "cn", "k", "x", "j", "cycle", "d", "node", "nb", "name", "an", "t", "y", "g", "nn", "number", "u", "len", "f", "e", "nt", "ns", "sn", "w", "z", "v", "l", "m", "r", "nc", "p", "N"], "i": ["pi", "o", "k", "x", "xi", "j", "gi", "ci", "d", "ri", "ac", "int", "ind", "t", "bi", "id", "y", "h", "ib", "index", "ip", "u", "iu", "f", "ti", "I", "e", "ai", "z", "qi", "v", "l", "ii", "li", "m", "p"]}}
{"code": "n = int(input())\\na = [int(i) for i in input().split()]\\nprint(min(a), max(a), sum(a))\\n\\n", "target": "61", "substitutes": {"n": ["o", "k", "j", "c", "ar", "nb", "name", "an", "num", "t", "ni", "na", "g", "nn", "span", "f", "b", "ns", "no", "z", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "at", "ya", "x", "c", "aw", "ar", "ac", "ab", "data", "aux", "af", "action", "args", "ata", "an", "s", "array", "A", "da", "result", "y", "alpha", "sa", "aa", "la", "u", "va", "f", "e", "b", "am", "ca", "ans", "ga", "aba", "ai", "ae", "w", "ba", "ea", "aj", "p", " A", "au"], "i": ["pi", "uri", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "ri", "phi", "oi", "io", "ie", "ind", "ini", "bi", "id", "key", "ir", "ix", "si", "u", "iu", "e", "I", "ti", "f", "b", "q", "ai", "im", "z", "ii", "li", "abi", "p"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\nB = [a - i for i, a in enumerate(A, 1)]\\nsorted_B = sorted(B)\\nb = sorted_B[N // 2]\\nans = 0\\nfor i, a in enumerate(A, 1):\\n    ans += abs(a - (b + i))\\nprint(ans)\\n", "target": "463", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "E", "nb", "Ns", "T", "n", "J", "Sn", "Y", "Ni", "L", "NT", " n", "Size", "NN", "I", "X", "C", "NI", "Ne", "V", "P", "K", "Nat", "O", "H", "M", "F", "Z"], "A": ["As", "U", "NA", "D", "S", "New", "Alpha", "CA", "All", "T", "W", "mA", "At", "Array", "Y", "L", "First", "G", "Am", "Ab", "AS", "alpha", "BA", "OA", "An", "AP", "Ar", "I", "AA", "X", "C", "Na", "V", "P", "API", "AF", "K", "AB", "Input", "AC", "And", "F", "M", "H", "LA"], "B": ["U", "EB", "D", "S", "BF", "R", "Other", "E", "BB", "T", "UB", "W", "Y", "G", "L", "BA", "OB", "Bs", "DB", "WB", "I", "AA", "X", "C", "V", "P", "BC", "AB", "O", "M", "F"], "a": ["ma", "area", "auto", "c", "aw", "ar", "wa", "ac", "ab", "af", "pa", "n", "abs", "da", "all", "an", "s", "fa", "y", "alpha", "na", "sa", "ia", "aa", "la", "u", "va", "oa", "f", "ad", "ca", "am", "base", "ga", "ai", "w", "ta", "asa", "ba", "ae", "ao", "aj", "p", "au"], "i": ["pi", "di", "o", "it", "x", "xi", "j", "axis", "c", "gi", "ci", "d", "yi", "phi", "ri", "io", "ie", "int", "ind", "ui", "ini", "ni", "bi", "id", "y", "alpha", "ij", "h", "ib", "ia", "index", "ip", "aci", "si", "u", "iu", "f", "I", "e", "hi", "im", "ai", "ani", "z", "qi", "v", "ii", "li", "ei", "p", "ice", "zi"], "sorted_B": ["sort_b", "sort_A", "sort_B", "sort_N", "sorted_b", "sorted_N", "sorted_A"], "b": ["auto", "eb", "pb", "c", "db", "cb", "nb", "ab", "BB", "n", "abs", "s", "rb", "bi", "y", "bs", "body", "gb", "ib", "big", "beta", "bin", "BI", "Bs", "lb", "f", "base", "sb", "l", "AB", "v", "bb", "bf", "p", "bp"], "ans": ["Ann", "anus", "aning", "nas", "ras", "ins", "ases", "ars", "ants", "aid", "amps", "an", "s", "anc", "actions", "ians", "sk", "na", "os", "anas", "gan", "nan", "An", "ana", "span", "can", "AN", "cas", "aned", "anne", "ase", "ANS", "ann", "ad", "ns", "lan", "scan", "ions", "ai", "ani", "ays", "mean", "ace", "aus", "ons", "au"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\\nfrom itertools import accumulate, permutations, combinations, product\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\n\\nA, B, C, K = MAP()\\n\\nprint((A-B)*(-1)**(K%2))\\n", "target": "669", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "ng", "nb", "num", "t", "i", "na", "g", "number", "u", "f", "e", "b", "ns", "no", "nor", "z", "l", "m", "r", "nc", "p", "ne", "N"], "_": ["k", "__", " time", "all", "ip", "len", "f", "of", "p"], "INF": ["InV", " INV", " INFF", "INFF", "InFF", "INN", "InN", "inN", "InF", "inFF", "INV", "inF", " INN", "inV"], "mod": ["MAG", "Max", "j", "R", "d", "REG", "dec", "int", "J", " MOD", "inc", "i", "MAX", "cm", "max", "X", " Mod", "MOD", "Mod", "DEC", "MIN", "CC", "r", "m", "p", "Z"], "A": ["U", "ACC", "D", "S", " AA", "Z", "E", "a", "CA", "T", "W", " AI", "AD", "G", "Y", "L", "AS", " a", "PI", "I", "AA", "ABC", "X", "P", "AF", "KA", "AB", "AC", "M", "AW", "F", "H", "N", "LA"], "B": ["U", "D", "S", "BF", "R", "E", "BB", "T", "W", "J", "TB", "Y", "G", "L", "BA", "BI", "Q", "Bs", "GB", "I", "b", "X", "SB", "V", "P", "BC", "AB", "O", "H", "M", "F", "N", "Z"], "C": ["U", "D", "S", "CL", "CD", "c", "E", "CA", "T", "W", "Y", "G", "UC", "CF", "X", "DC", "P", "CC", "EC", "CR", "BC", "AC", "H", "M", "CM", "N", "Z"], "K": ["U", "KR", "D", "k", "S", "R", "E", "SK", "MK", "KE", "T", "W", "J", "Y", "G", "L", "KK", "HK", "Q", "PK", "I", "X", "MOD", "VK", "V", "P", "KS", "O", "H", "M", "F", "N", "Z"]}}
{"code": "n,m = map( int,input().split() )\\na = [ list(map(int,input().split())) for _ in range(n)]\\n\\na.sort()\\n\\nc = 0\\nfor i in range(n):\\n  x = min(m,a[i][1])\\n  c += x * a[i][0]\\n  m -= x\\n  if m == 0 :\\n    break\\n\\nprint(c)", "target": "692", "substitutes": {"n": ["o", "k", "j", "d", "nb", "name", "num", "an", "s", "t", "y", "min", "count", "h", "nn", "number", "u", "size", "len", "f", "e", "b", "ns", "no", "q", "w", "z", "v", "l", "r", "nc", "p", "ne", "N"], "m": ["pi", "o", "k", "j", "fm", "d", "nm", "int", "num", "an", "t", "range", "y", "g", "min", "dim", "h", "ms", "ym", "md", "cm", "u", "e", "f", "b", "mi", "mm", "q", "w", "pm", "z", "dm", "v", "l", "r", "M", "p", "count"], "a": ["ma", "area", "o", "input", "aw", "ar", "d", "ama", "ab", "ac", "wa", "mA", "args", "ata", "an", "s", "array", "A", "t", "da", "y", "alpha", "sa", "ana", "span", "aa", "la", "u", "f", "e", "b", "am", "ad", "ca", "ans", "ai", "ae", "w", "aaa", "z", "l", "ea", "ao", "p", "audio"], "_": ["k", " __", " un", " line", " col", "ac", " time", " row", "ip", " seq", " k"], "c": ["cur", "o", "mc", "cn", "k", "cy", "ci", "d", "cycle", "col", "ac", "cc", "ce", "t", "y", "con", "h", "ct", "co", "cm", "dc", "cu", "u", "xc", "e", "f", "b", "code", "C", "z", "cr", "l", "v", "lc", "pc", "r", "cd", "cf", "nc", "p", "count"], "i": ["pi", " u", "di", " v", "o", "it", "k", "xi", "j", "ci", " ind", "d", " I", " ii", "io", "start", "ie", " ip", "ind", " iP", "ini", "ui", "t", "bi", "id", "y", " j", " il", "ix", " e", "index", "ip", "multi", "si", " id", "iu", "u", "e", "I", "ti", "f", "X", "mi", " k", "ai", "q", "z", " q", "l", "ii", "v", "p"], "x": ["o", "k", "xp", "xi", "px", "d", "xy", "int", "ww", "t", "y", "tx", "xa", "g", "min", "ax", "h", "rx", "ix", "fx", "index", "ex", "xc", "u", "f", "e", "dx", "max", "b", "X", "xx", "q", "w", "z", "v", "l", "xs", "r", "p"]}}
{"code": "# input\\nn = int(input())\\na = [0 for i in range(n)]\\nb = [int(i) for i in input().split()]\\n\\n# main\\na[0] = b[0]\\nfor i in range(1, n-1):\\n  a[i] = min(b[i-1], b[i])\\na[n-1] = b[n-2]\\n\\n# output\\nprint(sum(a))\\n", "target": "768", "substitutes": {}}
{"code": "d,n = map(int,input().split())\\ncase = 100**d\\nif n < 100:\\n    print(case*n)\\nelse:\\n    print(101*case)", "target": "781", "substitutes": {"d": ["di", "D", "dt", "x", "j", "c", "du", "nd", "bd", "ind", "da", "t", "i", "id", "sd", "dy", "g", "dim", "ds", "dc", "f", "dx", "e", "dd", "ad", "b", "xd", " D", "z", "dn", "l", "m", "p", "ld"], "n": ["o", "k", "x", "j", "c", "np", " N", "nb", "pos", "nd", "ind", "num", "i", "y", "on", "g", "min", "network", "nn", "number", "u", "len", "f", "e", "fn", "nt", "b", "end", "ns", "pn", "max", "z", "dn", "v", "l", "m", "r", "nc", "p", "ne", "N"], "case": ["mode", "type", "part", "c", "catch", "chance", "name", "pair", "section", "switch", "trial", "ce", "config", "space", "weight", "id", "test", "block", "key", "split", "cases", "min", "cp", "ct", "charge", "line", "day", "number", "ase", "size", "default", "max", "dd", "code", "match", "limit", "shift", "q", "position", "cd", "length", "p", "Case", "count"]}}
{"code": "a, b, c, d = map(int, input().split())\\nif abs(a-c) <= d: ans = 'Yes'\\nelif abs(a-b) <= d and abs(b-c) <= d: ans = 'Yes'\\nelse: ans = 'No'\\nprint(ans)", "target": "378", "substitutes": {"a": ["x", "aw", "ab", "ac", "art", "af", "int", "n", "pa", "da", "abs", "s", "an", "A", "y", "alpha", "sa", "h", "ia", "aa", "la", "u", "e", "f", "ad", "ca", "am", "ai", "ae", "w", "asa", "ba", "ada", "aj", "m", "p"], "b": ["eb", "k", "x", "db", "cb", "ab", "ac", "B", "bc", "n", "abs", "s", "rb", "bi", "i", "y", "bs", "g", "fb", "h", "abc", "aa", "wb", "u", "e", "f", "ad", "sb", "w", "z", "ba", "l", "v", "bb", "r", "m", "p"], "c": ["cur", "k", "x", "cy", "ci", "cb", "ac", "ab", "bc", "fc", "n", "cc", "s", "i", "cs", "y", "g", "con", "h", "dc", "cu", "u", "e", "f", "ad", "ca", "C", "w", "z", "l", "v", "cd", "m", "r", "cf", "p"], "d": ["di", "D", "dt", "x", "ded", "de", "pd", "du", "diff", "nd", "bd", "n", "da", "s", "t", "i", "y", "sd", "dy", "g", "fd", "h", "ds", "dh", "do", "dc", "dad", "dp", "u", "e", "dd", "f", "dx", "ad", "xd", "w", "z", "dm", "v", "l", "cd", "m", "r", "dat", "p", "ld"], "ans": ["aves", "ls", "anus", "san", "aning", "nas", "ras", "ars", "ants", "vs", "amps", "anch", "ean", "an", "anc", "ads", "s", " means", "ats", "asts", "cs", "oss", "ents", "ams", "ians", "sk", "na", "os", "anas", "plan", "ds", "ana", "span", "can", "AN", "atan", "leans", "aned", "cas", "ANS", "lan", "ann", "ns", "ane", "aces", "ays", "eps", "aus", "ons"]}}
{"code": "high, width, y, x = map(int, input().split())\\n\\ndef nCr(n, r):\\n    return ((((fact[n]*finv[n-r])%mod)*finv[r])%mod)\\n\\nmod = 10**9 + 7\\ninv = mod - 2\\nmaxn = high + width - 2\\nfact = [0] * (maxn+1)\\nfinv = [0] * (maxn+1)\\nfact[0] = fact[1] = 1\\nfinv[0] = finv[1] = 1\\n\\n# \u968e\u4e57\u3092\u6c42\u3081\u308b\\nfor i in range(2, maxn+1):\\n    fact[i] = (fact[i-1] * i) % mod\\n\\n# \u968e\u4e57\u306e\u9006\u5143\u3092\u6c42\u3081\u308b\\nfor i in range(2, maxn+1):\\n    finv[i] = pow(fact[i], inv, mod)\\n\\nroute = 0\\nfor i in range(1, high-y+1):\\n        route += (nCr(x+i-2, i-1) * nCr(width+high-x-1-i, high-i)) % mod\\n        route = route % mod\\nprint(int(route))", "target": "567", "substitutes": {"high": ["height", "home", "wide", "full", "c", "fast", "low", "large", "medium", "hub", "dark", "well", "min", "h", "custom", "peak", "highest", "lon", "graph", "hop", "max", "hi", "higher", "w", "mid", "High", "m", "p", "up", "top"], "width": ["height", "wm", "wide", "Width", "low", "d", "left", "wa", "wt", "weight", "dy", "min", "h", "cm", "span", "lon", "wn", "radius", "fill", "size", "len", "max", "w", "z", "length", "p", "west"], "y": ["height", "type", "sy", "c", "cy", "low", "d", "col", "start", "yl", "Y", "i", "dy", "h", "ym", "py", "lon", "f", "b", "hi", "yy", "w", "z", "m", "p", "vy"], "x": ["px", "c", "d", "left", "col", "pos", "time", "h", "rx", "ix", "index", "ex", "xc", "e", "f", "dx", "X", "xx", "w", "z", "cross", "m", "xs", "p", "cl"], "n": ["o", "cn", "k", "j", "c", "d", "num", "s", "an", "i", "na", "min", "h", "un", "nu", "u", "net", "f", "max", "e", "b", "ns", "sn", "no", "w", "z", "l", "v", "m", "p", "ne", "N"], "r": ["rs", "rd", "k", "j", "c", "R", "d", "ar", "a", "rh", "rb", "t", "i", "yr", "min", "rg", "ir", "h", "row", "nr", "u", "f", "rn", "e", "b", "w", "z", "cr", "l", "v", "m", "right", "ru", "fr", "p", "sr"], "mod": ["mode", "step", "od", "exp", "j", "ci", "d", "scale", "rad", "bug", "mult", "rm", "ind", "fun", "perm", "cc", "num", "inc", "reg", "year", "mag", "time", "cond", "rem", "dim", "month", "cm", "comp", "mods", "row", "model", "comb", "lam", "max", "cum", " Mod", "fit", "MOD", "mm", "Mod", "im", "com", "module", "pm", "grad", "complex", "m", "orig", "order", "form", "mix"], "inv": ["log", "part", "work", "axis", "cycle", "Inv", "mult", "pos", "fun", "inc", " chi", "var", "eff", "div", "cor", "cm", "bin", "function", " cov", "qq", "factor", "pm", "frac", "complex", "orig", "conf", "ln", "mix"], "maxn": ["modn", " maxp", " maxd", "maxl", "modc", " maxl", "lastc", "maxp", "Maxp", "modl", "Maxc", "maxN", "Maxl", "maxd", "lastn", "modd", "axc", " maxc", "axN", "MaxN", "Maxn", "lastN", "axn", "Maxd", " maxN", "axp", "maxc"], "fact": ["unit", "core", "part", "loc", "case", " factor", "work", "ctx", "effect", "feature", "event", "col", "facts", "bug", " facts", "mult", "ff", "year", "pull", "man", "config", "vent", "concept", "weight", "fam", "time", "count", "con", "Fact", " Fact", "act", "force", "change", "self", "cond", "ct", "image", "function", "cas", "shape", "place", "factor", "feat", "mass", "truth", "filter", "position", "ref", "ace", "actor", "form", "condition"], "finv": [" finc", "nq", "initf", "lenq", "nf", " finov", "fenvert", "fnl", "finf", "finV", "finq", " finq", "Finq", "fnq", "initv", "finl", "fenver", "initvo", "finb", "fenvo", "fenb", " finvo", "Finb", " finb", "finc", "nl", " finl", "finvert", " finver", "lenov", "fenq", "lenv", "Finver", "fenc", "fenV", " finf", "finver", "initvert", "fenf", " finvert", "lenver", "Finv", "nv", "fenv", "fnv", "fenov", "fnf", "Finc", "FinV", " finV", "finov", "finvo"]}}
{"code": "s=input()\\nss=\"CODEFESTIVAL2016\"\\ncount=0\\nfor i in range(16):\\n    if s[i]!=ss[i]:\\n        count+=1\\n\\nprint(count)", "target": "237", "substitutes": {"s": ["rs", "ls", "o", "services", "fs", "S", "sync", "c", "d", "ins", "n", "qs", "ops", "ows", "cs", "ches", "os", "cells", "ts", "ds", "ips", "ks", "gs", "ists", "si", "sets", "acts", "f", "e", "ys", "ps", "ments", "ns", "es", "l", "groups", "words", "its", "p"], "ss": ["struct", "rs", "ls", "fs", "ess", "feed", "SS", "ass", "ng", "ins", "ws", "pattern", "uss", "pos", "sl", "vs", "switch", "all", "sts", "cc", "config", "cs", "test", "password", "bs", "script", "css", "ds", "ts", "tz", "hess", "si", "settings", "ys", "ps", "select", "ns", "xx", "iss", "sc", "stats", "skip", "rss"], "count": ["core", "type", "case", "err", "c", "current", "catch", "sum", "name", "value", "start", "int", "ind", "n", "num", "list", "cache", "weight", "test", "id", "key", "time", "check", "css", "score", "index", "error", "number", "size", "Count", "f", "code", "match", "counter", "tag", "found", "length", "skip", "order", "rank", "call"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", " I", "a", "io", "start", "int", "ind", "n", "id", "y", "zi", "h", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "p", "l", "v", "ii", "li", "r", "ei"]}}
{"code": "n, x, y = map(int, input().split())\\n\\nans = [0 for i in range(n-1)]\\n\\nfor i in range(1, n):\\n    for j in range(i+1, n+1):\\n        t = min(abs(j-i), abs(x-i)+1+abs(y-j))\\n        ans[t-1] += 1\\n\\nfor a in ans:\\n    print(a)\\n", "target": "22", "substitutes": {"n": ["o", "k", "c", "d", "nb", "ny", "num", "ni", "min", "h", "network", "nn", "number", "u", "size", "net", "e", "f", "nt", "b", "ns", "sn", "w", "z", "l", "v", "ii", "m", "r", "nc", "p", "ne", "N"], "x": ["o", "ji", "k", "ya", "xi", "c", "d", "xy", "int", "s", "min", "g", "ax", "h", "rx", "ix", "u", "e", "f", "b", "X", "xx", "w", "z", "v", "l", "m", "p"], "y": ["ey", "o", "ji", "k", "ya", "xi", "c", "cy", "d", "xy", "yi", "ny", "s", "Y", "dy", "g", "h", "ix", "py", "u", "e", "f", "b", "yy", "w", "z", "v", "l", "ii", "m", "p", "vy"], "ans": ["ls", "ins", "ases", "data", "ants", "amps", "ens", "args", "an", "s", "list", "A", "actions", " means", "ats", "ents", "na", "os", "anas", "ids", "nan", "ana", "span", "can", "lines", "cons", "arts", "AN", "atan", "aned", "letters", "ANS", "ann", "ps", "ns", "shape", "scan", "lan", "ane", "ani", "ai", "ones", "eps", "p", "aus", "ons"], "i": ["pi", "o", "ji", "k", "xi", "c", "ci", "d", "yi", " ii", "ie", "int", "ind", "ni", "id", "g", "h", "ij", "index", "si", "u", "iu", "e", "ti", "I", "f", "b", "mi", "ai", "w", "z", "l", "v", "ii", "li", "m", "p"], "j": ["ji", "o", "k", "xi", "c", "d", "yi", "xy", " ii", "jon", "ny", "oj", "J", "ni", " dj", "g", "ij", "h", "job", "ix", "jl", "py", "jo", " l", "u", "ja", "jet", "f", "e", "adj", "b", "jj", "z", "v", "jp", "aj", "l", "ii", "m", "li", "r", "p", "uj"], "t": ["o", "type", "dt", "at", "tp", "part", "qt", "c", "d", "T", "ot", "wt", "g", "ty", "h", "ts", "offset", "tt", "tz", "tf", "ct", "u", "f", "e", "ti", "b", "q", "pt", "ta", "z", "l", "v", "m", "p", "tn"], "a": ["area", "\u00e4", " b", " sa", " pa", " fa", " ta", "aw", " it", "ar", " am", " ar", "ac", "ab", "\u00e0", " af", "pa", "all", "ata", "an", "A", "alpha", " at", " _", "analysis", "sa", "ana", "ia", " ax", "aa", " c", " da", " an", "b", "ai", "ta", "asa", "p", "aj", "ao", " A", "au"]}}
{"code": "n,m=map(int, input().split())\\nalist=[list(map(int, input().split())) for i in range(m)]\\nans=-1\\nif n==1:\\n  for i in range(9,-1,-1):\\n    x=True\\n    stri=str(i)\\n    for j in range(m):\\n      if stri[alist[j][0]-1]!=str(alist[j][1]):\\n        x=False\\n    if x:\\n      ans=i\\nelse:\\n  for i in range(10**n-1,10**(n-1)-1,-1):\\n    x=True\\n    stri=str(i)\\n    for j in range(m):\\n      if stri[alist[j][0]-1]!=str(alist[j][1]):\\n        x=False\\n    if x:\\n      ans=i\\nprint(ans)", "target": "285", "substitutes": {"n": ["o", "cn", "k", "c", "np", "d", "nb", "a", "an", "num", "s", "t", "ni", "y", "mn", "g", "en", "h", "nn", "nan", "un", "nu", "u", "net", "fn", "f", "nt", "e", "b", "ns", "pn", "sn", "no", "q", "w", "z", "dn", "l", "v", "r", "nc", "ln", "p", "ne", "N"], "m": ["o", "mc", "k", "c", "d", "num", "s", "range", "y", "mn", "g", "dim", "h", "ms", "cm", "u", "e", "f", "mu", "b", "mm", "im", "q", "w", "z", "dm", "v", "l", "hm", "r", "M", "p", "bm", "N"], "alist": ["lp", "joined", "yout", "adh", "alities", "al", "atts", "isal", "wat", "fal", "np", "atives", "best", "ctx", "aos", "dit", "ist", "acl", "amas", "edit", "html", "atten", "ants", "List", "arb", "atz", "ata", "atics", "esi", "list", "ati", "array", "ality", "wid", "gat", "ppa", "asin", "split", "wikipedia", "lists", "hist", "ists", "la", "atl", "atan", "asu", "alis", "iste", "dal", "tta", "amn", "sn", "ahead", "feat", "wx", "pai", "aida", "abl", "elist", "www", "addons", "alsh", "flat", "antis", "egal", "xs", "atal", "aml", "bart"], "i": ["ik", "pi", "di", "ji", "o", "it", "k", "xi", "gi", "c", "ci", "yi", "a", "io", "ie", "int", "ind", "s", "ui", "ini", "t", "ni", "bi", "id", "y", "info", "ip", "si", "u", "iu", "fi", "f", "ti", "I", "e", "b", "none", "im", "ai", "init", "z", "l", "v", "ii", "ic", "li", "p"], "ans": ["anus", "san", "nas", "ras", "ins", "ases", "aos", "ations", "ars", "ants", "ss", "aid", "an", "anc", "ads", "s", "ats", "cs", "oss", "ians", "ams", "anon", "asin", "na", "os", "anas", "ds", "ks", "ana", "An", "nan", "can", "AN", "atan", "aned", "leans", "cas", "ANS", "ann", "ain", "lan", "ns", "sn", "ions", "ani", "aces", "ai", "ays", "antis", "xs", "acs", "aus", "ons"], "x": ["k", "sync", "xp", "xi", "work", "px", "c", "full", "lex", "wa", "plex", "ux", "ww", "an", "s", "t", "y", "tx", "on", "xml", "python", "na", "xxx", "ax", "h", "act", "sex", "xxxx", "rx", "xt", "ix", "index", "rax", "ex", "xc", "u", "e", "f", "max", "one", "X", "xx", "xes", "wx", "no", "w", "rex", "l", "cross", "ic", "r", "xs", "p", "pe"], "stri": ["di", "sta", "sync", "su", "stru", "asi", "xi", "square", "stra", " stick", "ste", "ri", "stick", "sol", "ie", "kee", "sticks", "cli", "uli", "ck", "cro", "ly", "strike", "ni", "rik", "cho", "ski", "stress", "sa", "chu", "rint", "rip", "cin", "osi", "nu", "reci", "strip", "asu", "si", "cu", "rice", "ickle", "ki", "pick", "sn", "uti", "wx", "riz", "asa", " strip", "atri", "sty", "str", "sam", "ace", "sky", "ud", "zi", "ku"], "j": ["note", "el", "kj", "ji", "o", "js", "k", "jen", "c", "er", "d", "yi", "a", "jon", "ie", "jc", "int", "oj", "J", "s", "ui", "jit", "y", "jan", "on", "key", "g", "h", "bj", "job", "un", "jl", "br", "u", "ja", "jet", "f", "e", "adj", "b", "jj", "im", "dj", "q", "z", "qi", "v", "jp", "l", "ii", "li", "aj", "jam", "fr", "p", "uj"]}}
{"code": "mod = 10**9+7\\nH, W = map(int, input().split())\\nG = [input() for i in range(H)]\\ndp = [[0]*W for i in range(H)]\\ndp[0][0] = 1\\nfor i in range(H):\\n    for j in range(W):\\n        if G[i][j] == '.':\\n            if i - 1 >= 0:\\n                if j - 1 >= 0:\\n                    dp[i][j] = (dp[i-1][j] + dp[i][j-1])%mod\\n                else:\\n                    dp[i][j] = dp[i-1][j]\\n            elif j - 1 >= 0:\\n                dp[i][j] = dp[i][j-1]\\nprint(dp[H-1][W-1])", "target": "273", "substitutes": {"mod": ["oct", "sec", "mode", "step", "exp", "c", "d", "scale", "mult", "dec", "fun", "perm", "reg", "man", "aug", "wd", "sort", "div", "min", "dim", "dig", "ow", "cm", "PI", "bin", "comp", "grow", "mods", "row", "comb", "max", " Mod", "MOD", "Mod", "w", "add", "m", "r", "M"], "H": ["U", " h", "D", "S", "He", "R", "E", " N", "Hi", "B", "RH", "T", "J", "HH", " C", "Y", "L", "Wh", "HK", "EH", "h", "Q", "WH", "Ha", "GH", "I", "X", "C", "HI", "V", "P", "w", "K", "AH", "O", "Ch", "M", "DH", "F", "CH", "N", "Z"], "W": ["U", "D", "S", "R", "E", "ws", "B", "T", "WR", "J", "Y", "L", "Wh", "WP", "Q", "WA", "WS", "WB", "X", "SW", "C", "CW", "V", "w", "P", "We", "K", "MW", "v", "O", "M", "WD", "F", "VW", "N", "Z"], "G": ["GW", "U", "GR", "D", "GS", "GD", "S", "R", "E", "GG", "B", "J", "GM", "CG", "A", "DP", "GE", "g", "GA", "GP", "GV", "GB", "GH", "LG", "I", "Group", "C", "GF", "V", "P", "O", "M", "F", "group", "N"], "i": ["ik", "pi", "di", "ji", "o", "it", "uri", "k", "x", "xi", "c", "ci", "d", "yi", "oi", "phi", "a", "io", "ie", "ori", "int", "ind", "n", "ui", "ini", "ni", "bi", "id", "y", "info", "api", "g", "h", "ij", "ix", "ip", "iv", "si", "u", "iu", "fi", "f", "ti", "I", "e", "b", "hi", "ai", "w", "z", "chi", "qi", "l", "v", "ii", "li", "ei", "r", "m", "p", "zi"], "dp": ["wp", "df", "pi", "tp", "lp", "D", "dt", "loc", "pb", "pg", "db", "sp", "np", "d", "E", "port", "point", "phi", "pair", "data", "pos", "sl", "upp", "direction", "vp", "hp", "amp", "DP", "double", "pkg", "wd", "alpha", "api", "project", "mand", "g", "ds", "cp", "GP", "dB", "dr", "source", "dc", "beta", "ip", "comp", "density", "mp", "pp", "address", "e", "imp", "default", "dep", "DC", "ga", "dl", "P", "dm", "params", "dn", "jp", "grad", "dist", "deb", "dat", "p", "gp", "fp"], "j": ["note", "el", "it", "ji", "o", "js", "k", "x", "_", "op", "c", "d", "a", "jc", "ie", "io", "int", "oj", "n", "J", "ind", "ui", "jit", "y", "dy", "g", "h", "ij", "bj", "job", "jl", "jo", "si", "br", "u", "iu", "ja", "f", "I", "e", "jet", "b", "jj", "q", "dj", "w", "ani", "z", "qi", "l", "jp", "v", "aj", "r", "m", "ii", "fr", "li", "p", "uj"]}}
{"code": "import sys\\nimport math\\nfrom collections import defaultdict\\n\\nsys.setrecursionlimit(10**7)\\ndef input():\\n    return sys.stdin.readline()[:-1]\\n\\nmod = 10**9 + 7\\n\\ndef I(): return int(input())\\ndef II(): return map(int, input().split())\\ndef III(): return list(map(int, input().split()))\\ndef Line(N,num):\\n    if N<=0:\\n        for _ in range(num): return []\\n    elif num==1:\\n        return [I() for _ in range(N)]\\n    else:\\n        read_all = [tuple(map(int, input().split())) for _ in range(N)]\\n        return map(list,zip(*read_all))\\n\\n#################\\n\\nfrom operator import itemgetter\\nfrom bisect import bisect_left\\n\\nN,Q = II()\\na = []\\nfor _ in range(N):\\n    s,t,x = II()\\n    a.append((x, s-x-0.5, t-x-0.5))\\na.sort(key=itemgetter(0))\\nD = Line(Q,1)\\n\\nans = [-1]*(Q+1)\\nright = [0]*Q\\nfor a0 in a:\\n    l = bisect_left(D,a0[1])\\n    r = bisect_left(D,a0[2])\\n    while l<r:\\n        while ans[l]!=-1:\\n            l = right[l]\\n            if l==N:\\n                break\\n        if l>=r:\\n            break\\n        ans[l] = a0[0]\\n        right[l] = r\\n        l += 1\\n\\nfor i in range(Q):\\n    print(ans[i])", "target": "338", "substitutes": {"mod": ["unit", "mode", "step", "scale", "ver", "mult", "dec", "fun", "debug", "tab", "loop", "sort", "dig", "dim", "ctr", "cm", "comp", "mods", "seq", "spec", " Mod", "MOD", "Mod", "module", "init", "m", "comment"], "N": ["U", "D", "S", "GN", "R", "NS", "NL", "B", "Ns", "T", "n", "W", "Y", "A", "L", "G", "Len", "Num", "i", "SN", "NT", "NM", " n", "Size", "number", "No", "Q", "I", "Number", "X", "C", "Na", "NUM", "V", "One", "P", "K", "O", "M", "F", "Z"], "num": ["unit", "o", "loc", "k", "x", "um", "np", "d", "nm", "node", "nb", "sum", "int", "n", "inc", "i", "Num", "mn", "uni", "na", "dim", "iter", "nn", "index", "number", "nu", "multi", "umi", "nr", "u", "f", "max", "one", "nt", "b", "ns", "none", "sn", "NUM", "inf", "no", "m", "M", "nc", "p"], "_": ["x", " un", "ac", "__", " fil", " ip", "g", " full", " content", " seq", " abs", "f", " block", " mem", " pool", " over", " local", " arg"], "read_all": ["readableonly", "read_All", "readsonly", "readableold", " read_only", "read_old", "readsAll", "readsall", "read_only", "readableall", " read_All", " read_old"]}}
{"code": "n = int(input())\\nA=[int(i)-1 for i in input().split()]\\nres = 0\\nfor i in range(n):\\n    if A[i]==i:\\n        continue\\n    else:\\n        res+=1\\nif(res < 3):print(\"YES\")\\nelse:print(\"NO\")\\n", "target": "267", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "a", "Ns", "pos", "num", "an", "ni", "y", "count", "h", "nu", "number", "u", "len", "nt", "f", "e", "b", "ns", "no", "w", "z", "l", "m", "r", "nc", "p", "N"], "A": ["As", "U", "NA", "D", "S", "R", "Alpha", "a", "B", "CA", "Data", "T", "mA", "At", "Array", "Y", "array", "G", "L", "Am", "Ab", "An", "Ar", "I", "AA", "b", "C", "V", "P", "K", "p", "API", "O", "H", "M", "LA", "F", "N", "Z"], "i": ["area", "pi", "di", "part", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "phi", "a", "io", "ie", "start", "int", "ind", "ini", "ni", "id", "y", "alpha", "ix", "index", "ip", "multi", "si", "u", "iu", "f", "I", "e", "ti", "b", "ai", "z", "chi", "qi", "l", "v", "ii", "m", "li", "r", "p", "zi"], "res": ["core", "rs", "rest", "err", "out", "our", "results", "R", "sol", "re", "rh", "reg", "RES", "rez", "result", "Res", "arr", "rss", "resh", "id", "os", "css", "pres", "ret", "obj", "rev", "reset", "resp", " Res", "gr", "q", "cr", "ress", "r", "p", "req", "sr", "count"]}}
{"code": "mod = 1000000007\\neps = 10**-9\\n\\n\\ndef main():\\n    import sys\\n    from collections import deque\\n    input = sys.stdin.buffer.readline\\n\\n    N = int(input())\\n    adj = [[] for _ in range(N+1)]\\n    for _ in range(N-1):\\n        a, b, c = map(int, input().split())\\n        adj[a].append((b, c))\\n        adj[b].append((a, c))\\n    Q, root = map(int, input().split())\\n\\n    que = deque()\\n    que.append(root)\\n    seen = [-1] * (N+1)\\n    seen[root] = 0\\n    par = [0] * (N+1)\\n    child = [[] for _ in range(N+1)]\\n    seq = []\\n    while que:\\n        v = que.popleft()\\n        seq.append(v)\\n        for u, c in adj[v]:\\n            if seen[u] == -1:\\n                seen[u] = seen[v] + c\\n                par[u] = v\\n                child[v].append(u)\\n                que.append(u)\\n    seq.reverse()\\n\\n    for _ in range(Q):\\n        x, y = map(int, input().split())\\n        print(seen[x] + seen[y])\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "360", "substitutes": {"mod": ["pi", "mode", "sec", "ver", "debug", "num", "depth", "i", "id", "prefix", "time", "min", "cm", "comp", "len", "f", "max", "lock", "MOD", "Mod", "q", "module", "lib", "m", "order", "p", "level"], "eps": [" steps", "pi", " sig", " sec", "bits", " dig", "steps", "PM", " delta", " log", " rounds", " packages", " cores", " pad", "PS", "PI", " tries", "pp", " iterations", " lines", " bits", "ps", "ep", "P", " power", " pc", " epoch", "PC", "p"], "input": ["type", "empty", "element", "out", "feed", "search", "current", "param", "argument", "raw", "output", "pattern", "data", "session", " Input", "format", "expression", "submit", "int", "print", "n", "view", "pull", "list", "config", "enter", "i", "result", "call", "connect", "image", "url", "parent", "source", "request", "null", "sequence", "table", "error", "hidden", "process", "background", "f", "I", "exec", "reader", "help", "select", "load", "buffer", "inf", "filter", "memory", "form", "l", "accept", "text", "Input", "gen", "comment", "p", "until", "method"], "N": ["U", "Node", "NA", "D", "S", "Max", " NI", "R", "NS", "E", "NC", " K", "B", "Ns", "T", "n", "W", " O", " C", "Y", "Ni", "L", "Wh", "Len", "Num", "Part", " W", " n", "Size", "NN", " Ne", "No", " M", "Length", "Count", "I", "X", "C", "Na", "Ne", "NI", " D", "V", "P", "K", "KN", "O", "M", "F", "Z"], "adj": ["note", "log", "ji", "inv", "ap", "sync", "j", "nav", "np", "nb", "data", "app", "section", "pos", "n", "adv", "list", "cache", "inc", "config", "bi", "i", "arr", "ignore", "api", "info", "prefix", "cmp", "map", "en", "span", "next", "py", "ordered", "fake", "graph", "pre", "sect", "obj", "ann", "ad", "ns", "rev", "tree", "lock", "ai", "ani", "dict", "z", "jp", "aj", "patch", "li", "adjust", "order", "prev", "p", "block"], "_": ["k", "out", " sub", "d", " un", "ac", "lex", "__", " time", "n", " ip", "all", "s", "non", "___", " __", "g", "val", " self", " local", " post", " full", "ip", " new", " function", "f", " block", " non", "q", " long", "p", "ing"], "a": ["area", "auto", "k", "aw", "d", "ar", "ak", "ab", "ac", "af", "n", "all", "an", "A", "fa", "i", "alpha", "sa", "aa", "va", "e", "f", "ad", "ca", "am", "ai", "ae", "w", "ba", "ea", "l", "aj", "r", "p", "au"], "b": ["o", "k", "j", "db", "cy", "d", "cb", "ab", "B", "bc", "n", "s", "rb", "bi", "i", "bs", "body", "g", "h", "fb", "ib", "aa", "lb", "e", "f", "base", "sb", "ba", "l", "r", "bb", "bf", "p"], "c": ["sec", "o", "loc", "cn", "k", "cy", "ci", "d", "cb", "col", "ac", "n", "s", "cc", "ce", "t", "ch", "i", "cs", "g", "con", "h", "cp", "cm", "dc", "vc", "cu", "f", "e", "ca", "arc", "C", "q", "w", "z", "cr", "l", "lc", "cat", "r", "m", "cf", "p"], "Q": ["U", "Child", "D", "S", "MQ", "CL", "R", "Queue", "queue", "B", "T", "W", "J", "Y", "G", "A", "L", "query", "sequence", "I", "X", "C", "Que", "q", "V", "P", "K", "ID", "H", "M", "F", "Z"], "root": ["o", "loc", "k", "rew", "j", "ul", "nav", "R", "node", "back", "name", "section", "bc", "roots", "reverse", "n", "anc", "depth", "an", "i", "leaf", "id", "key", "g", "div", "parent", "query", "path", "master", "null", "row", "eq", "f", "tree", "rup", "nt", "rev", "end", "C", "seed", "q", "w", "nil", "length", "r", "Root", "m", "order", "p", "rank"], "que": ["cur", " la", "log", "ha", "sync", "ide", "db", "ques", "quire", "low", "Queue", "hide", "dq", "cle", "node", "sub", "bug", "queue", "rib", "bc", "cli", " queue", "reverse", "list", "cache", "quit", "buf", "iq", "ec", "fe", "gui", "qa", "en", "pool", "ue", "pri", "vel", "bl", "ig", "sequence", "la", "sq", "eq", "clone", "stack", "sem", "tree", "code", "hi", "Que", "lock", "qq", "q", "lc", "pe", "se", "p", "req", "qu", "cl"], "seen": ["sec", "ped", "loc", "signed", "ced", "closed", "expected", "case", "ranked", "central", "done", "given", "node", "ended", "only", "data", "section", "name", "const", "side", "dec", "reverse", "view", "scene", "inc", "known", "written", "config", "connected", "registered", "ignore", "id", "shown", " observed", "sa", "en", "specified", "sex", "served", "index", "set", "next", "sequence", "kept", "ordered", "changed", "la", "marked", "hidden", "si", "size", "used", "sect", "sha", "shape", "saw", "edge", "received", "loaded", "desc", "sent", "found", "shared", "nc", "shaped", "visible", "see"], "par": ["part", "pid", "sp", "ar", "param", "phi", "app", "pos", "pa", "per", "var", "inc", "arr", "proc", "bar", "serv", "ax", "Par", "parent", "pr", "comp", "adr", "aa", "char", "rel", "parse", "pp", "pre", "arc", "rec", "scan", "q", "params", "cat", "patch", "pc", "prev", "p", "arg"], "child": ["cur", "Child", "children", "sync", "oy", "sub", "section", "queue", "app", "anch", "view", "list", "ch", "leaf", "id", "iq", "cl", "ph", "bar", "div", "paren", "parent", "chron", "next", "py", "quad", "ip", "row", "char", "code", "scan", "new", "q", "prev", "p", "path", "block", "count"], "seq": ["vec", "struct", "sec", "sync", "sci", "slice", "ctx", "sub", "section", "queue", "cli", "pos", "reverse", "long", "view", "list", "wave", "iq", "test", "qa", "val", "closure", "iter", "pse", "parent", "job", "sequence", "quad", "la", "sq", "zip", "stack", "sem", "sect", "code", "sequ", "qq", "q", "chain", "p", "req", "pe", "cl", "children"], "v": ["U", "o", "k", "ve", "uv", "cv", "gu", "ver", "vo", "vid", "uc", "vv", "vs", "vin", "n", "s", "vp", "ov", "av", "ui", "ch", "i", "g", "val", "ue", "lv", "vc", "iv", "qv", "cu", "va", "ur", "e", "f", "us", "C", "vu", "ev", "q", "V", "w", "sv", "z", "vol", "l", "lc", "r", "m", "li", "ru", "p", "ou", "vi"], "u": ["U", "eu", "o", "k", "su", "uv", "tu", "ul", "hu", "uc", "du", "ui", "t", "i", "uni", "ue", "un", "nu", "ua", "cu", "ur", "iu", "f", "e", "us", "bu", "uu", "q", "w", "ou", "uid", "l", "lu", "ru", "p", "up", "pe"], "x": ["o", "loc", "px", "j", "d", "xy", "data", "int", "ux", "n", "num", "i", "id", "ph", "h", "xt", "rx", "ix", "index", "ex", "xc", "f", "e", "dx", "X", "xx", "code", "q", "w", "z", "l", "m", "xs", "p", "pe"], "y": ["o", "hy", "k", "ya", "j", "cy", "d", "xy", "ny", "n", "s", "Y", "zy", "t", "i", "dy", "ty", "gy", "ay", "py", "yt", "f", "e", "q", "yy", "w", "z", "l", "p", "vy"]}}
{"code": "import sys\\nimport math\\nimport itertools\\nimport collections\\nimport heapq\\nimport re\\nimport numpy as np\\n\\nrr = lambda: sys.stdin.readline().rstrip()\\nrs = lambda: sys.stdin.readline().split()\\nri = lambda: int(sys.stdin.readline())\\nrm = lambda: map(int, sys.stdin.readline().split())\\nrl = lambda: list(map(int, sys.stdin.readline().split()))\\ninf = float('inf')\\nmod = 10**9 + 7\\n\\na, b, c, d = rm()\\nprint(max(a*b, c*d))\\n\\n\\n\\n\\n\\n\\n\\n", "target": "754", "substitutes": {"rr": ["arf", "rd", "err", "R", "raw", "ac", "acer", "arr", "yr", "xml", "rt", "ack", "ir", "url", "dr", "ra", "ror", "pp", "reader", "func", "qq", "gr", "Reader", "cr", "r", "req", "rc"], "rs": ["ls", "rd", "Rs", "exp", "ras", "RS", "ro", "ss", "rh", "rb", "reg", "cs", "arr", "rg", "rx", "rep", "spec", "res", "ps", "rev", "ns", "cr", "asm", "xs", "rss", "rc", "sr"], "ri": ["di", "rd", "Rs", "ci", "rio", "ar", "ro", "ry", "lo", "rib", "ini", "rg", "rx", "co", "rid", "rip", "ra", "RI", "ris", "si", "rit", "mi", "stri", "ai", "rand", "rob", "ru", "io", "ran"], "rm": ["mini", "rd", "fm", "nm", "vm", "rh", "mr", "rb", "update", "rf", "ignore", "sort", "arm", "rt", "ir", "rx", "cp", "dr", "km", "lr", "cm", "norm", "nr", "rpm", "rn", "mi", "im", "pm", "filter", "dm", "params", "cr", "ref", "grad", "r", "m", "rob", "dist", "sr", "RM"], "rl": ["el", "lp", "ls", "ol", "LR", "fl", "ll", "rh", "rb", "ctrl", "rg", "lv", "lr", "nl", "la", "il", "lb", "los", "repl", "pl", "dl", "lc", "l", "ln", "ld", "lt", "rc", "cl", "tl"], "inf": ["std", "xi", "exp", "ci", "phi", "Inf", "int", "ind", "nz", "inc", "amp", "info", "alpha", "abc", "iter", "bin", "nu", "spec", "f", "pp", "imp", "init", "frac", "z", "ref", "appa", "cl"], "mod": ["sec", "step", "exp", "rad", "scale", "dec", "ind", "fun", "cc", "inc", "reg", "mag", "circ", "round", "crit", "deg", "cm", "mods", "spec", "MOD", "Mod", "module", "pm", "init", "grad", "complex", "m", "cl"], "a": ["x", "ac", "ab", "int", "n", "da", "s", "inc", "an", "A", "fa", "i", "y", "alpha", "min", "sa", "g", "abc", "aa", "la", "u", "e", "f", "ca", "ga", "ae", "z", "ba", "l", "ea", "r", "m", "p"], "b": ["k", "x", "db", "cb", "nb", "ab", "B", "bc", "n", "s", "rb", "i", "y", "dy", "bs", "g", "fb", "abc", "aa", "u", "e", "f", "w", "ba", "l", "v", "r", "bb", "bf", "m", "p"], "c": ["k", "x", "cy", "ci", "cb", "ac", "bc", "fc", "n", "s", "i", "cs", "y", "g", "dc", "u", "f", "e", "C", "w", "z", "l", "lc", "cd", "m", "r", "cf", "nc", "p"], "d": ["D", "dt", "rd", "x", "j", "db", "nd", "bd", "n", "da", "s", "i", "dy", "g", "fd", "ds", "dr", "dc", "u", "e", "dd", "f", "w", "z", "l", "cd", "r", "m", "p"]}}
{"code": "a,b=map(int, input().split())\\nA=str(a);B=str(b);\\nif a<=b:\\n    print(A*b)\\nelse :\\n    print(B*a)", "target": "69", "substitutes": {"a": ["ma", "area", "sta", "c", "aw", "d", "ar", "ak", "ama", "ac", "ab", "app", "art", "af", "pa", "n", "da", "an", "alpha", "sa", "la", "aa", "va", "f", "e", "ad", "ca", "am", "ai", "ae", "w", "asa", "ba", "aaa", "ea", "l", "aj", "m", "p", "au"], "b": ["part", "o", "eb", "mb", "abb", "bt", "db", "c", "d", "ob", "nb", "ab", "app", "bound", "bc", "bd", "arb", "xb", "binary", "ben", "rb", "bi", "i", "y", "bs", "bar", "boot", "fb", "ib", "aa", "wb", "br", "lb", "u", "f", "e", "buff", "ad", "base", "sb", "be", "ba", "v", "l", "bb", "bf", "emb", "p", "two"], "A": ["As", "AR", "Ca", "NA", "D", "Any", "Java", "CA", "IA", "mA", "Array", "AD", "Az", "AM", "G", "Am", "HA", "BA", "GA", "OA", "RA", "TA", "Area", "AP", "Average", "Ar", "I", "AA", "Ang", "AMI", "C", "P", "API", "AH", "AB", "AC", "AAA", "N", "LA"], "B": ["U", "EB", "D", "BS", "BF", "E", "Both", "BB", "T", "TB", "BE", "Y", "G", "NB", "BA", "PB", "Blue", "BD", "OB", "BI", "GB", "Bs", "DB", "QB", "WB", "BER", "CB", "AA", "FB", "SB", "C", "MB", "BC", "AB", "O", "M", "F"]}}
{"code": "a, b, c, d = map(int, input().split())\\n\\nif a > c:\\n    a, c = c, a\\nif b > d:\\n    b, d = d, b\\nans = b - c\\nif ans < 0:\\n    ans = 0\\n\\nprint(ans)", "target": "146", "substitutes": {"a": ["ma", "area", "x", "aw", "ak", "ama", "ac", "ab", "wa", "pa", "n", "mA", "da", "ata", "s", "an", "A", "fa", "i", "y", "alpha", "na", "sa", "ia", "aa", "u", "e", "f", "ad", "ca", "am", "ai", "ae", "w", "asa", "ba", "aaa", "ea", "m", "p", "au"], "b": ["o", "eb", "k", "x", "db", "cb", "nb", "ab", "ac", "B", "bc", "n", "s", "rb", "A", "bi", "i", "y", "bs", "bar", "g", "fb", "h", "ib", "bad", "beta", "bin", "aa", "wb", "br", "lb", "u", "f", "e", "ad", "base", "sb", "be", "w", "ba", "l", "v", "bb", "m", "r", "p"], "c": ["cn", "k", "x", "cy", "ci", "cb", "col", "ac", "fc", "n", "cc", "s", "ce", "i", "cs", "y", "g", "con", "h", "cp", "ct", "cm", "dc", "cu", "u", "xc", "f", "e", "ad", "ca", "C", "w", "z", "cr", "l", "lc", "cd", "m", "r", "cf", "p", "count"], "d": ["df", "di", "D", "dt", "daily", "x", "j", "db", "de", "pd", "bd", "dec", "n", "da", "s", "t", "i", "dy", "g", "h", "ds", "dc", "dp", "u", "e", "dx", "f", "dd", "ad", "end", "w", "z", "l", "v", "cd", "r", "m", "dat", "p"], "ans": ["offs", "ls", "anus", "ass", "aning", "anned", "nas", "ins", "ases", "ars", "ants", "amps", "ens", "anners", "an", "ops", "anc", "ats", " means", "cs", "ents", "anon", "atches", "sk", "na", "cases", "annot", "anas", "ds", "ks", "unks", "cp", "span", "trans", "anes", "can", "cons", "ana", "arts", "AN", "atan", "aned", "leans", "ANS", "ann", "lan", "ns", "ane", "scan", "errors", "ions", "ays", "annels", " scans", "ares", "eps", "aus", "ons"]}}
{"code": "def CheckPalindrome(S, L):\\n    result = True\\n    for i in range((L+1)//2):\\n        if S[i] != S[-i-1]:\\n            result = False\\n            break\\n    return result\\n\\nresult = True\\nS = input()\\nL = len(S)\\n\\nresult = CheckPalindrome(S, L)\\n\\nif result:\\n    S2 = S[:(len(S)-1) // 2]\\n    L2 = len(S2)\\n    result = CheckPalindrome(S2, L2)\\n\\nif result:\\n    S3 = S[(L+3)//2-1:]\\n    L3 = len(S3)\\n    result = CheckPalindrome(S3, L3)\\n\\nif result:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "420", "substitutes": {"S": ["U", "SE", "SH", "D", " R", "SS", "Files", "Sync", "R", "NS", "Z", " SS", "E", "SK", " I", "Sample", "Site", "Section", "Sin", "B", "Sing", "T", "System", "TS", "W", "Si", "OSS", "SI", "s", "Y", "Es", "A", "G", " s", "Part", "Single", "SL", "ST", "SA", "SSL", "Q", "Os", "Sign", "I", "Socket", "X", "State", "SU", "C", "The", "Su", "Is", "V", "Sl", "P", "K", "Session", "You", "Service", "Sol", "O", "H", "M", " F", "F", "Input", "N", "Set"], "L": ["UL", "U", "LM", "D", "Limit", "CL", "LU", "LO", "VL", "R", "Z", "E", "LD", "LB", "LR", "Line", "B", "Lo", "List", "T", "FL", "W", "F", "Long", "LI", "IL", "Len", "LP", "EL", "LE", "El", "Left", "LT", "Length", "I", "Li", "X", "C", "LL", "Lu", "V", "Sl", "P", "l", "DL", "H", "M", "LA", "SL", "N", "dL"], "result": ["type", "grade", "Result", "out", "work", "notice", "compl", "results", "current", "catch", "runner", "reason", "ge", "valid", " Result", "val", "self", "source", "f", "end", "status", "desc", "dict", "draw", "comment", "group", "first", "err", "product", "done", "after", "output", "data", "record", "enter", "root", "entry", "ret", "error", "message", "br", "final", "mark", "default", "match", " results", "here", "use", "df", "manager", "search", "feature", "event", "back", "section", "complete", "report", "diff", "instance", "pack", "date", "url", "function", "clean", "new", "member", "user", "sr", "card", "case", "success", "element", "response", "page", "value", "start", "mer", "cache", "true", "test", "ok", "the", "row", "obj", "term", "filter", "attr", "found", "now", "order"], "i": ["pi", "it", "k", "x", "xi", "j", "gi", "c", "ci", "d", "ri", "phi", "ie", "start", "int", "ind", "n", "s", "ini", "ui", "t", "id", "y", "ix", "index", "si", "il", "u", "iu", "e", "I", "f", "ti", "b", "ai", "z", "qi", "l", "v", "ii", "li", "m", "r", "p"], "S2": ["OSL", "Part1", "SCloud", "SS82", "Si82", " SCloud", "S82", "D2", "S12", "S1", "LCloud", "Si2", " SL", "Si12", "Si5", "STwo", "SS5", " S12", "SS2", "PartTwo", "L1", "S5", "OS1", "DTwo", " S1", "OS2", "LL", "LTwo", "SS12", "OSCloud", "Part2", " S5", " S82", "D1", "SL"], "L2": ["l3", "L02", " L8", "l5", "LI02", "S8", "L8", "LItwo", "Ltwo", "S1", "LI2", "ltwo", "LI5", " Ltwo", "l1", " L02", "L1", "l2", "l8", "L5", " L1", " L5", "l02"], "S3": ["Session203", "SThird", " SThird", "Sl3", "Session15", "Si93", "Sl93", "Si63", "Source63", "Si512", "Source3", " S203", "S15", "SourceThird", "s203", " S123", "Session63", "S203", "Si3", "SiThird", "s15", "S63", " S15", "Si15", " S63", "Session3", "s63", "S93", "S123", "S512", " S512", " S93", "Sl123", "Source15", "Si123", "s3", "Sl512"], "L3": ["l3", "SThree", " L15", "ILThree", "l23", "Len3", "L83", " L03", "L23", "Len83", "IL5", "L15", " L23", "S5", "IL83", "Len5", "LThree", "L03", "l15", "Len15", "LenThree", "L5", "S83", "Len23", "IL3", "Len03", "l03"]}}
{"code": "MOD = 10**9 + 7\\nS = input()\\nres = 0\\ndp0 = 1 # ''\\ndp1 = 0 # 'a'\\ndp2 = 0 # 'ab'\\ndp3 = 0 # 'abc'\\n\\nfor c in S:\\n    if c == 'A':\\n        dp1 += dp0\\n    elif c == 'B':\\n        dp2 += dp1\\n    elif c == 'C':\\n        dp3 += dp2\\n    else:\\n        dp0,dp1,dp2,dp3 = dp0*3,dp1*3+dp0,dp2*3+dp1,dp3*3+dp2\\n    dp0 %= MOD\\n    dp1 %= MOD\\n    dp2 %= MOD\\n    dp3 %= MOD\\nprint(dp3)\\n", "target": "640", "substitutes": {"MOD": ["ENT", "mode", "string", "MAG", "VALUE", "EXT", "REG", "data", "mod", "ULE", "IN", "RE", "SIZE", "SPEC", "version", " mod", "FORM", "MS", "MODE", "spec", "ORD", "Mod", "DATA", "TYPE", "VERSION", "ID", "M", "form"], "S": ["U", "SE", "SH", "D", "SS", "R", "E", "B", "T", "s", "Y", "A", "G", " s", "AS", "DS", "Q", "I", "X", "C", "V", "P", "K", "H", "M", "F", "N", "Z"], "res": ["rs", " req", "response", "results", "bits", "data", "VAL", " RES", "reg", "RES", "Res", "result", "RE", "pres", "ret", "rep", "ES", "seq", "reset", "ps", "resp", " Res", "status", "ress", "rss", "req"], "dp0": ["p0", "p00", "dpindex", "sp00", "xeindex", "spindex", "sp0", "pindex", "xe0", "xe00", "p200", "xe200", "sp200", "dp200", "dp00"]}}
{"code": "N = input()\\nS = list(map(str,input().split()))\\n\\nif \"Y\" in S:\\n    print(\"Four\")\\nelse:\\n    print(\"Three\")", "target": "229", "substitutes": {"N": ["D", "R", "NS", "E", "B", "Ns", "T", "n", "J", "W", "G", "L", "NM", " n", "NN", "MN", "NO", "C", "NI", "V", "OS", "P", "K", "NP", "O", "M", "F", "Z"], "S": ["U", "D", "SS", "R", "NS", "E", "B", "Ns", "T", "SI", "s", "Y", "A", "L", "G", "SN", "INS", "DS", "PS", "Q", "I", "X", "C", "V", "P", "K", "SP", "O", "H", "M", "F", "Z"]}}
{"code": "print (input().replace('2017/','2018/'))\\n", "target": "49", "substitutes": {}}
{"code": "import bisect\\n\\ninf = 10**18\\n\\na,b,q = map(int,input().split())\\ns = [-inf]+[int(input()) for _ in range(a)]+[inf]\\nt = [-inf]+[int(input()) for _ in range(b)]+[inf]\\nx = [int(input()) for _ in range(q)]\\n\\nfor i in x:\\n    a1 = s[bisect.bisect_right(s,i)]\\n    b1 = t[bisect.bisect_right(t,i)]\\n    a2 = s[bisect.bisect_right(s,i)-1]\\n    b2 = t[bisect.bisect_right(t,i)-1]\\n    ans = inf\\n    for j in [a1,a2]:\\n        for k in [b1,b2]:\\n            ans = min(ans,abs(i-j)+abs(j-k),abs(i-k)+abs(k-j))\\n    print(ans)", "target": "487", "substitutes": {"inf": ["it", "xi", "feed", "phi", "Inf", "abs", "install", "ion", "learn", "zip", "aff", "f", "I", "shape", "xf", "six", "z", "limited", "example", "ref", "ext", "plus", "gu", "format", "mind", "id", " infinity", "zero", "abc", "nan", " infinite", "limit", "frac", "ii", "eps", " info", "Z", "integer", "input", "inst", "diff", "int", "ind", "integ", "array", "config", "tw", "cgi", "fif", "X", "init", "expl", "l", "form", "ffe", "ins", "sil", "inter", "eight", "inc", "info", "cit", "iter", " Inf", "one", "ions", "ai", "flat", "conf", "small"], "a": ["area", "c", "ar", "ac", "ab", "af", "da", "an", "A", "y", "alpha", "sa", "ia", "aa", "u", "va", "oa", "f", "am", "ca", "ai", "w", "ae", "asa", "ba", "aj", "r", "m", "p", "au"], "b": ["o", "c", "d", "ab", "B", "n", "y", "bs", "g", "fb", "h", "u", "lb", "e", "f", "sb", "w", "z", "ba", "l", "v", "r", "m", "bb", "p"], "q": ["c", "d", "int", "n", "qs", "ch", "range", "id", "y", "time", "g", "h", "query", "Q", "sq", "u", "f", "e", "w", "z", "qi", "v", "l", "m", "p", "qu", "dq"], "s": ["ls", "o", "string", "S", "out", "su", "sin", "c", "sp", "d", "ses", "start", "ss", "n", "strings", "cs", "y", "id", "g", "sa", "os", "ts", "sf", "sq", "south", "si", "u", "e", "f", "ys", "ns", "es", "sb", "sh", "w", "sv", "z", "l", "m", "xs", "se", "sing", "p"], "_": ["U", "out", "d", "__", "all", "non", "___", "val", "ay", "un", "ip", "f", "place", "ing", "block"], "t": ["tp", "type", "at", "o", "qt", "out", "tr", "c", "d", "tc", "phi", "T", "ot", "n", "wt", "tw", "y", "test", "time", "rt", "g", "ty", "h", "xt", "ts", "tt", "tf", "u", "f", "e", "nt", "pt", "w", "ta", "z", "v", "l", "r", "m", "p"], "x": ["xi", "exp", "c", "d", "int", "ux", "n", "y", "test", "ax", "h", "xt", "ct", "ix", "index", "ex", "xc", "u", "f", "e", "X", "xx", "xes", "w", "z", "v", "l", "m", "xs", "p"], "i": ["pi", "di", "uri", "o", "it", "xi", "c", "ci", "d", "yi", "phi", "io", "ie", "cli", "int", "ind", "n", "ini", "ui", "bi", "id", "y", "g", "h", "index", "ip", "si", "u", "iu", "f", "e", "I", "ti", "mi", "ai", "w", "z", "l", "v", "ii", "ic", "li", "m", "p", "vi"], "a1": ["p8", "a81", "acb", "ab", "b3", "aa1", "a3", "aa81", "ac2", "a8", "alpha3", "ac8", "alpha1", "aa8", "p81", "ac1", "p2", "ac81", "alphab", "aa2", "bb", "alpha2", "ac3", "p1"], "b1": ["a01", "bone", "b6", "t01", "q01", "ab6", "a6", "tone", "qaj", " b6", "ab1", "baj", "t1", "b01", "aaj", "q1", "ab2", "aone", "taj", "qone"], "a2": ["da2", "fa02", "sa2", "faTwo", "daTwo", "da42", "alphaTwo", "a42", "af2", "aTwo", "fa62", "sa02", "a02", "alpha02", "a62", "afTwo", " a42", "alpha62", "alpha2", "sa62", " aTwo", "saTwo", "af42", "fa2"], "b2": ["t0", "t2", "a0", " b0", "a52", "a5", " b5", "ab5", "t52", "ab1", "b8", "b52", "ab8", "t1", "a8", " b52", "b5", "ab2", " b8", "b0"], "ans": ["anus", "san", "aning", "anned", "nas", "ins", "anks", "olds", "ars", "ants", "atten", "aid", "vs", "amps", "banks", "an", "anc", "ats", "cs", "oss", "ents", "ams", "na", "os", "plan", "anas", "ms", "ds", "gan", "ks", "nan", "ana", "span", "can", "anes", "AN", "atan", "aned", "anne", "leans", "ANS", "ann", "lan", "ns", "scan", "lang", "ions", "aces", "ays", "mean", "acs", "p", "aus", "ons"], "j": ["ik", "pi", "it", "ji", "o", "js", "ve", "c", "d", "ijk", "ie", "oj", "n", "J", "num", "ch", "y", "iq", "key", "g", "ij", "h", "ip", "jo", "u", "f", "e", "jet", "adj", "im", "w", "sh", "z", "dj", "l", "v", "jp", "m", "r", "li", "p", "km"], "k": ["ik", "o", "ke", "kk", "c", "d", "ak", "ky", "ac", "n", "ch", "y", "key", "sk", "g", "h", "ok", "ks", "ko", "u", "e", "f", "ki", "ga", "kw", "w", "z", "K", "v", "l", "m", "r", "p", "ka"]}}
{"code": "#!/usr/bin/python\\n# -*- coding: utf-8 -*-\\n\\nS = input()\\n\\nif S == \"hi\":\\n    print('Yes')\\nelif S == \"hihi\":\\n    print('Yes')\\nelif S == \"hihihi\":\\n    print('Yes')\\nelif S == \"hihihihi\":\\n    print('Yes')\\nelif S == \"hihihihihi\":\\n    print('Yes')\\nelse:\\n    print(\"No\")\\n", "target": "535", "substitutes": {}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\n\\ndef resolve():\\n    n = int(input())\\n    B = list(map(int, input().split()))\\n\\n    res = []\\n    while B:\\n        for i in reversed(range(len(B))):\\n            if B[i] == i + 1:\\n                b = B.pop(i)\\n                res.append(b)\\n                break\\n        else:\\n            print(-1)\\n            exit()\\n    print(*res[::-1], sep=\"\\n\")\\n\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "593", "substitutes": {"input": ["type", "empty", "element", "out", "feed", "c", "current", "param", "argument", "raw", "output", "data", "expression", "view", "pull", "amp", "list", "inc", "config", "enter", "result", "call", "target", "url", "image", "iter", "parent", "version", "index", "source", "request", "bin", "error", "sel", "model", "active", "eval", "help", "reader", "reset", "select", "buffer", "init", "filter", "form", "length", "Input", "exec", "temp", "method"], "f_inf": ["f64inf", " f_I", " f_inc", " f_Inf", "f64I", "f64inc", "f_Inf", "f64Inf", "f_I", "f_inc"], "mod": ["sec", "mode", " m", "step", "pi", "exp", "scale", "mult", "ind", "num", "progress", "circ", "div", "dim", "ix", "cm", "index", " Mod", "MOD", "Mod", "im", "ai", "init", "q", "m", "M", "cl"], "n": ["pi", "o", "k", "j", "c", "d", "nb", "num", "t", "ni", "g", "count", "iter", "number", "nr", "nt", "f", "e", "ns", "sn", "no", "l", "m", "r", "nc", "p", "N"], "B": ["U", " b", "EB", "D", "Blocks", "S", "BS", "BF", "BM", "R", "E", "LB", " N", "BB", "T", "UB", "J", "W", "BE", "TB", "Y", "A", "G", "L", "NB", "BA", "Body", "PB", "VB", "OB", "BI", "RB", "Q", "Bs", " M", "BL", "GB", "DB", "WB", "BR", "CB", "BER", "I", "b", "X", "SB", "C", "BG", "V", "MB", "P", "K", "BC", " result", "O", "H", "M", "F", " A", "N", "CL"], "res": ["rs", "parts", "rest", "Result", "Rs", "err", "BS", "results", "R", "RS", "LS", "re", "rh", "RES", "Res", "result", "arr", "details", "RE", "bs", "os", "blocks", "pres", "ms", "ids", "ret", "MS", "vals", "PS", "ES", "rep", "br", "reply", "obj", "rev", "b", "resp", "ps", "ros", "repl", "es", "RESULTS", "CR", "Results", "r", "p", " results", "resolution"], "i": ["pi", "o", "k", "x", "j", "c", "d", "ri", "nb", "a", "start", "ori", "int", "ind", "instance", "all", "num", "ini", "ni", "bi", "id", "key", "isin", "index", "ip", "number", "si", "u", "iu", "e", "I", "f", "ti", "b", "code", "limit", "ai", "counter", "position", "z", "qi", "l", "v", "ii", "m", "li", "r", "order", "p", "rank", "count"]}}
{"code": "hen=set(list(map(int,input().split())))\\nif len(hen)==1:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "649", "substitutes": {"hen": ["hered", "jen", "even", "men", "hon", "hern", "hene", "prim", "roman", "ene", "iron", "zen", "ken", "orn", "hens", "en", "hes", "son", "her", "phen", "hel", "aken", "kin", "enn", "ren", "ven", "rown", "den", "sen", "het", "fen", "chin", "pen", "oman", "he", "don", "han", "yer", "ton"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nb=list(map(int,input().split()))\\nc=list(map(int,input().split()))\\na.sort()\\nb.sort()\\nc.sort()\\ni,j,k=0,0,0\\nm1=[]\\nwhile k<n and i<n:\\n  if b[i]>a[k]:\\n    j+=1\\n    k+=1\\n  else:\\n    m1.append(j)\\n    i+=1\\nfor t in range(len(m1),len(b)):\\n  m1.append(j)\\ni,j,k=0,0,0\\nm2=[]\\nwhile k<n and i<n:\\n  if c[i]>b[k]:\\n    j+=m1[k]\\n    k+=1\\n  else:\\n    m2.append(j)\\n    i+=1\\nfor t in range(len(m2),len(c)):\\n  m2.append(j)\\nprint(sum(m2))", "target": "37", "substitutes": {"n": ["log", "o", "x", "d", "nb", "ny", "s", "an", "num", "ni", "min", "en", "network", "nn", "nan", "un", "nu", "norm", "u", "net", "len", "e", "f", "nt", "one", "ns", "sn", "inf", "no", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "at", "x", "aw", "ar", "d", "ak", "ab", "ac", "af", "all", "an", "s", "A", "y", "api", "alpha", "sa", "ia", "aa", "u", "f", "e", "am", "ad", "ca", "ans", "ai", "ae", "w", "ba", "l", "v", "aj", "m", "p", "au"], "b": ["o", "eb", "mb", "db", "d", "cb", "nb", "ob", "ab", "ac", "B", "bc", "bd", "s", "rb", "bas", "y", "bs", "g", "fb", "h", "aa", "wb", "u", "f", "e", "ad", "ca", "base", "sb", "q", "be", "w", "z", "ba", "l", "v", "bb", "m", "r", "p"], "c": ["o", "cn", "x", "cy", "ci", "d", "cb", "col", "ac", "cc", "s", "ce", "ch", "cs", "y", "g", "con", "h", "cin", "can", "cu", "u", "xc", "e", "f", "ca", "C", "q", "w", "z", "cr", "l", "v", "ic", "m", "r", "nc", "cf", "p"], "i": ["ik", "pi", "di", "o", "ji", "x", "xi", "gi", "ci", "d", "yi", "ri", "oi", "io", "ie", "ori", "int", "ini", "ui", "ni", "bi", "id", "y", "g", "ix", "si", "u", "iu", "f", "e", "I", "one", "mi", "ki", "ai", "z", "qi", "l", "v", "ii", "ic", "m", "li", "p", "vi", "zi"], "j": ["note", "ik", "o", "ji", "js", "jen", "x", "xi", "er", "d", "ju", "jc", "ie", "jon", "oj", "J", "s", "ui", "ch", "jit", "y", "key", "g", "bj", "job", "jl", "jo", "eni", "si", "br", "u", "ja", "e", "f", "je", "obj", "adj", "q", "dj", "w", "z", "qi", "l", "v", "ii", "jp", "m", "r", "aj", "li", "p", "uj", "zi"], "k": ["ik", "o", "ke", "x", "kat", "kk", "d", "ak", "ijk", "ky", "mk", "ek", "ck", "kick", "ch", "id", "y", "key", "sk", "kg", "g", "h", "ok", "ks", "uk", "kid", "dk", "ko", "u", "f", "e", "ki", "q", "w", "kw", "z", "K", "kind", "v", "l", "m", "p", "ka", "ku"], "m1": ["dim1", "mr1", " mone", "dim2", "m81", "am1", "mr01", " m100", "M2", "M4", " m4", "M100", " m3", "M5", "am5", " m81", " m5", "nOne", "i1", "mrOne", "M1", "dim100", "dim4", "ione", "m01", "hmpart", "hm2", "m100", "hm81", "M3", "M81", "n2", "MOne", "mr2", "Mpart", "mOne", "n01", "Mone", "mpart", "mone", "m3", "m5", "i5", "i2", "am3", "M01", "am2", "m4", "n1", "hm1", " mpart"], "t": ["it", "o", "out", "x", "off", "d", "ut", "T", "int", "ot", "s", "total", "ty", "ant", "ts", "let", "un", "st", "att", "e", "f", "nt", "w", "z", "l", "te", "r", "m", "p"], "m2": ["j2", "m6", "b1", "nall", "m256", "dim2", "am1", " m6", "n5", "b22", "M2", "M4", " m4", "c22", "am4", "m82", " m5", "Mtwo", "p5", "j96", "m8", "p4", "M1", "M82", "j8", " mall", "c1", "mtwo", "dim8", "dim256", "m96", "pall", "n4", "am6", " m82", "n2", "c2", "M6", " m8", "rm1", "dim96", "ctwo", "M22", "b2", "rm2", " m96", "m5", "btwo", "p2", "am2", "j256", "m4", " m256", "rm82", "m22", "mall"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nimport numpy as np\\n\\nMOD = 10**9 + 7\\n\\nN,M = map(int,readline().split())\\nS = list(map(int,readline().split()))\\nT = np.array(['0']+readline().split(),np.int32)\\n\\n# S\u306f\u5de6\u304b\u3089\u898b\u3066\u3044\u304f\u3002\\n# T\u306b\u3064\u3044\u3066\u3001\uff08\u6700\u5f8c\u306b\u4e00\u81f4\u3055\u305b\u305f\u6587\u5b57\u306e\u4f4d\u7f6e\u3001\u901a\u308a\u6570\uff09\u3092dp\u3067\u6301\u3064\\n\\ndp = np.zeros(M+1,dtype=np.int64)\\ndp[0] = 1\\n\\nfor i,s in enumerate(S,1):\\n    prev = dp\\n    prev_cum = prev.cumsum() % MOD\\n    equal = (s == T)\\n    dp[1:] += equal[1:] * prev_cum[:-1]\\n    dp[dp>=MOD] -= MOD\\n\\nanswer = dp.sum() % MOD\\nprint(answer)", "target": "505", "substitutes": {"read": ["access", " write", "input", "open", "x", "feed", "ready", "current", "d", "reads", "raw", "ro", "only", "lex", "data", "by", "long", "re", "hand", "check", "g", "connect", "index", "write", "readable", "stream", " Read", "run", "play", "reader", "reading", "Read", "load", "end", " reads", "each", "buffer", "new", "rec", "add", "READ", "r", "align", "call"], "readline": ["playlist", "readmode", "writelines", " readfile", "readblock", " readLine", "inputline", "feedlines", " readlist", "writeline", "feedline", "playmode", "inputlines", " readsource", "readerlines", "writesize", "readerline", "readlist", "playlines", "readersource", "feedsize", "readinglines", "readingfile", "readingline", " readsize", "readerblock", "readsource", "writeblock", "readsize", "readingLine", "readingblock", "loadblock", "playline", "readinglist", "loadline", "inputfile", "readfile", "readingmode", "writesource", "loadlines", "loadLine", "readLine", " readmode", "inputLine", " readblock"], "readlines": ["loadelines", "handline", "playlines", "playelines", "newbytes", "newline", " readbytes", "handelines", "playbytes", "loadliners", "playline", "loadline", "readelines", "newelines", "handliners", "readliners", "handlines", "loadlines", "newlines", " readliners", "readbytes", " readelines"], "MOD": [" J", "MAG", "D", " E", " L", "R", "B", "mod", "J", " O", " SN", " C", "A", "L", " Z", "Q", " CN", "C", " Mod", " B", "P", "MM", "K", " Y", " P", " F", "F", "Z"], "N": ["D", " L", "CN", "R", "E", "B", "n", "J", " C", "A", "G", "NM", " n", "MN", "Q", "I", "X", "C", "V", "P", "K", "O", "F", "Z"], "M": ["U", "D", "R", "E", "B", "J", "PM", "Y", "L", "G", "MS", "Q", "I", "C", "V", "P", "K", "MT", "O", "m", "H", "F", "CM", "IM", "Z"], "S": ["SE", "SH", "SO", "SS", "R", "B", "TS", "W", "s", "Y", "A", "SR", "G", "SN", "ST", "SA", "X", "C", "V", "OS", "P", "SM", "SP", "SL", "Z"], "T": ["type", "DT", "TN", "R", "E", "TS", "W", "Y", "t", "L", "ST", "Q", "X", "TG", "TT", "TM", "TX", "V", "P", "MT", "O", "TF", "F", "Ts", "Z"]}}
{"code": "# import sys\\n# readline = sys.stdin.readline\\n# generator = (readline().strip() for _ in range(N))\\n\\n# N, M = map(int, input().split())\\n# As = list(map(int, input().split()))\\n# queries = (input() for _ in range(N))\\n\\n\\ndef solve():\\n    N = int(input())\\n    As = list(map(int, input().split()))\\n\\n    if N > 0 and As[0] != 0:\\n        return -1\\n    if N == 0 and As[0] != 1:\\n        return -1        \\n\\n    vertices = [1] * (N+1)\\n    previous = 0\\n    for i, a in enumerate(As[:0:-1]):\\n        max_n_vert = a + previous\\n        previous = max_n_vert\\n        vertices[N-i] = max_n_vert\\n\\n    n_not_leaves_prev = 1\\n    for i, a in enumerate(As):\\n        if i == 0:\\n            continue\\n        # if n_not_leaves_prev == 0:\\n        #     return -1\\n\\n        max_n_vert = 2 * n_not_leaves_prev\\n        vertices[i] = min(vertices[i], max_n_vert)\\n        n_not_leaves_prev = vertices[i] - a\\n\\n        if max_n_vert < a:\\n            return -1\\n\\n    return sum(vertices)\\n\\n\\ndef main():\\n    print(solve())\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "625", "substitutes": {}}
{"code": "import math\\nX = int(input())\\nbeki = []\\nbeki.append(1)\\nXruto = math.sqrt(X)\\nXruto = math.floor(Xruto)\\nfor i in range(2, Xruto+1):\\n    for j in range(10):\\n        a = pow(i, j)\\n        if a <= X:\\n            beki.append(a)\\n        else:\\n            break\\nprint(max(beki))\\n", "target": "489", "substitutes": {"X": ["U", "VALUE", "S", "Max", "x", "R", "Do", "XX", "Test", "value", "B", "T", "Math", "Array", "Y", "A", "L", "G", " x", "IP", "MAX", "File", "Q", "I", "C", "XL", "TX", "V", "FF", "P", "XP", "K", "length", "MX", "XXX", "IX", "M", "H", "F", "CE", "N", "Z"], "beki": ["bibi", "abeki", "lbemi", "lbeki", "bzek", "Bzek", "abzos", "Betsu", "peki", "abibi", "bedi", " bedi", " bibi", "pzos", "lbedi", " bemi", "Bedi", "petsu", " bzos", "Bemi", "bzes", "pzes", " bzek", "Beki", "bemi", "abedi", "pedi", "lbzek", "bzos", "betsu", "pibi", " betsu", " bzes", "Bzes"], "Xruto": ["Xromo", "Xpruton", "Xrbuto", "Xcruto", "Xaronto", "Xraroco", "TXruto", "Xproshi", "Xcromo", "Xruta", "Xruton", " Xaruti", "TXroco", "FFpruton", "Xrromo", "TXraruto", "FFrute", " Xaroro", "Xsromo", "FFpruto", "Xraroko", "Xroco", "TXraroko", "Xproro", "Xraruto", "Xronto", "TXroko", "Xruti", "Xrbuton", "FFruto", "Xrbuta", "Xsruton", "Xpruta", "Xlroko", "Xcrute", "FFruta", "Xaroro", "Hrromo", "Xnruton", "Xroshi", "Xrruto", "FFpruta", "Xnrute", "Xaroco", "Xrbute", "Xaruti", "Xrrute", "Xcruton", "Xpruto", "Xroko", "Hrruto", "Xlroco", "Hrrute", "Xnruta", "Hrute", "TXraronto", "Hrruton", " Xruti", "Hruto", "Xraronto", "TXraroco", " Xroro", "Xroro", "Xaruto", "Xpruti", "Xrruton", "FFprute", " Xaroshi", "Xlruto", "Hruton", " Xaruto", "Xlronto", "Xaroko", "FFruton", "Xaroshi", "Xsrute", "TXronto", "Xsruto", "Xnruto", "Hromo", " Xroshi", "Xprute", "Xrute"], "i": ["pi", "ji", "k", "x", "xi", "c", "ci", "phi", "ie", "start", "int", "ind", "n", "bi", "id", "y", "min", "index", "u", "iu", "e", "I", "f", "b", "ai", "z", "l", "ii", "m", "li", "r", "p"], "j": ["el", "ji", "o", "k", "x", "d", " ii", "ind", "n", "J", "oj", "bi", "y", "ax", "ij", "ion", "jl", "jo", "ja", "e", "je", "f", "b", "jj", "z", "l", "jp", "aj", "v", "m", "ii", "li", "p", "uj"], "a": ["area", "access", "x", "c", "d", "ar", "ac", "ab", "app", "aux", "af", "n", "action", "da", "an", "array", "A", "fa", "y", "alpha", "na", "qa", "sa", "ack", "abc", "ana", "ia", "aa", "va", "e", "f", "b", "am", "ca", "sup", "tta", "ga", "ai", "ae", "ba", "ea", "aj", "another", "p", "au"]}}
{"code": "from collections import defaultdict\\n\\ndef readInt():\\n  return int(input())\\ndef readInts():\\n  return list(map(int, input().split()))\\ndef readChar():\\n  return input()\\ndef readChars():\\n  return input().split()\\n\\nh,w = readInts()\\ns = [list(input()) for i in range(h)]\\n\\nfor i in range(h):\\n  for j in range(w):\\n    if s[i][j]==\"#\":\\n      if i!=0:\\n        if j-1>=0:\\n          if s[i-1][j-1]==\".\":\\n            s[i-1][j-1] = 1\\n          elif s[i-1][j-1]!=\"#\":\\n            s[i-1][j-1]+=1\\n        if s[i-1][j]==\".\":\\n          s[i-1][j] = 1\\n        elif s[i-1][j]!=\"#\":\\n          s[i-1][j]+=1\\n        if j+1<=w-1:\\n          if s[i-1][j+1]==\".\":\\n            s[i-1][j+1] = 1\\n          elif s[i-1][j+1] != \"#\":\\n            s[i-1][j+1]+=1\\n      if j-1>=0:\\n        if s[i][j-1]==\".\":\\n          s[i][j-1] = 1\\n        elif s[i][j-1]!=\"#\":\\n          s[i][j-1]+=1\\n      if j+1<=w-1:\\n        if s[i][j+1]==\".\":\\n          s[i][j+1] = 1\\n        elif s[i][j+1] != \"#\":\\n          s[i][j+1]+=1\\n      if i+1<=h-1:\\n        if j-1>=0:\\n          if s[i+1][j-1]==\".\":\\n            s[i+1][j-1] = 1\\n          elif s[i+1][j-1]!=\"#\":\\n            s[i+1][j-1]+=1\\n        if s[i+1][j]==\".\":\\n          s[i+1][j] = 1\\n        elif s[i+1][j]!=\"#\":\\n          s[i+1][j]+=1\\n        if j+1<=w-1:\\n          if s[i+1][j+1]==\".\":\\n            s[i+1][j+1] = 1\\n          elif s[i+1][j+1] != \"#\":\\n            s[i+1][j+1]+=1\\n\\nfor i in s:\\n  for j in i:\\n    if j==\".\":\\n      print(\"0\",end=\"\")\\n    else:\\n      print(j,end=\"\")\\n  print()", "target": "615", "substitutes": {"h": ["o", "k", "x", "c", "d", "ht", "a", "wa", " H", "n", "W", "t", "ch", "y", "g", "en", "index", "th", "u", "f", "e", "end", "b", "hi", "q", "sh", "z", "l", "v", "hm", "m", "r", "H", "p"], "w": ["k", "x", "wl", "work", "hw", "c", "aw", "d", "ws", "a", "wa", "W", "n", "ww", "wt", "t", "tw", "wave", "y", " W", "width", "sw", "time", "g", "we", "how", "wb", "u", "f", "e", "max", "b", "q", "kw", "z", "v", "l", "m", "r", "H", "wh", "p"], "s": ["services", "c", "results", "times", "images", "abs", "args", "qs", "ows", "t", "ours", "strings", "ches", "cases", "blocks", "ms", "ists", "f", "ns", "ments", "sup", "status", "features", "z", "m", "words", "p", "js", "ors", "ings", "ssl", "x", "d", "ords", "terms", "ses", "a", "sys", "ss", "als", "ads", "cs", "details", "y", "rows", "ks", "sites", "ores", "sym", "tests", "rors", "irs", "stats", "groups", "r", "parts", "ls", "fs", "S", "sync", "ures", "n", "models", "ats", "comments", "ds", "ids", "lines", "stat", "u", "sets", "e", "settings", "objects", "ps", "ans", "ands", "es", "params", "v", "l", "xs", "erences", "rates", "ums", "states", "rs", "o", "ges", "ins", "ops", "changes", "g", "os", "ips", "gs", "frames", "si", "dates", "ys", "b", "ions", "aces", "ubs", "conf"], "i": ["mini", "it", "xi", "c", "anti", "oi", "phi", "bi", "isi", "ip", "multi", "eni", "iu", "f", "ti", "I", "mi", "ki", "z", "m", "ih", "io", "p", "ji", "k", "x", "gi", "ci", "d", "a", "ori", "id", "y", "ix", "iv", "hi", "ish", "ii", "li", "vi", "pi", "di", "uri", "yi", "ie", "ili", "cli", "int", "ind", "n", "ini", "image", "ib", "u", "e", "init", "qi", "l", "v", "ic", "ei", "ik", "o", "ui", "ni", "api", "ir", "ij", "ia", "si", "ami", "b", "my", "ai"], "j": ["it", "iw", "jen", "c", "jit", "jan", "ion", "job", "jl", "next", "f", "jj", "gh", "z", "jay", "jp", "io", "p", "ji", "js", "k", "ian", "x", "op", "gi", "er", "d", "jc", "oj", "ch", "y", "dy", "ix", "py", "jo", "br", "ja", "am", "jam", "ii", "li", "r", "uj", "note", "ie", "ind", "n", "J", "ah", "bj", "pr", "last", "e", "adj", "dj", "qi", "v", "l", "aj", "hip", "kj", "el", "o", "java", "jon", "ot", "all", "ui", "key", "on", "g", "ij", "og", "jet", "je", "obj", "b", "q", "json", "fr"]}}
{"code": "import string\\n\\nS = input()\\nans = len(S)*(len(S)-1)//2 + 1\\nfor i in string.ascii_lowercase:\\n  c = S.count(i)\\n  ans -= c*(c-1)//2\\nprint(ans)\\n", "target": "351", "substitutes": {"S": ["U", "SE", "string", "D", "SAN", "ASC", "SS", "R", "NS", "Sample", "RS", "LESS", "Sin", "B", "Sing", "T", "TS", "Si", "STD", "SI", "s", "A", "L", " s", "G", "String", "Single", "DS", "ST", "SA", "I", "Socket", "SU", "C", "SB", "Send", "V", "Sl", "P", "STR", "O", "H", "M", "Input", "F", "N"], "ans": ["offs", "ls", "cus", "x", "anus", "aning", "nas", "ins", "a", "ars", "ants", "amps", "n", "args", "an", "s", "anc", "A", " means", "ats", "cs", "ians", "anon", "asin", "cases", "na", "os", "comments", "anas", "ds", "ana", "span", "can", "anes", "cons", "AN", "aned", "ania", "leans", "ANS", "ann", "ns", "ane", "C", "ends", "errors", "ai", "ays", "annels", "yes", "aus", "ons"], "i": [" use", "pi", "II", "o", "std", "xi", "j", "x", " mi", "sp", " U", "ci", "d", " found", " I", "a", "B", "int", "n", "s", " C", "ini", "t", " aux", " used", " data", " sent", " os", " ASCII", "si", "f", "I", "e", "b", " io", " B", " II", "ai", " LAT", "p", "chi", "v", "l", "ii", "m", "li", "ei", "r", " type", "io", " unic"], "c": ["o", "cycles", "loc", "mc", "cn", "k", "case", "x", "ci", "d", "col", "a", "ac", "n", "s", "cc", "cs", "ec", "h", "ct", "dc", "cu", "xc", "size", "u", "f", "e", "b", "C", "cr", "l", "lc", "cd", "pc", "m", "r", "nc", "p", "count"]}}
{"code": "from math import floor\\na,b=input().split()\\na,b=int(a),int(b[0]+b[2]+b[3])\\nprint(a*b//100)", "target": "44", "substitutes": {"a": ["ma", "area", "ha", "at", "x", "input", "c", "aw", "ama", "ab", "ac", "app", "art", "af", "n", "da", "an", "array", "A", "i", "alpha", "api", "div", "sa", "abc", "ana", "ia", "index", "aa", "la", "u", "va", "e", "f", "ad", "ca", "am", "ga", "ai", "ae", "w", "asa", "ba", "aaa", "ea", "aj", "r", "bb", "p", " A"], "b": ["part", "eb", "mb", "abb", "x", "c", "db", "d", "ob", "nb", "cb", "ab", "bh", "app", "B", "bc", "bd", "bis", "n", "xb", "s", "rb", "bi", "i", "y", "bs", "bar", "body", "fb", "gb", "abc", "ib", "beta", "bin", "aa", "wb", "u", "lb", "e", "f", "base", "sb", "l", "v", "bb", "bf", "r", "m", "emb", "p"]}}
{"code": "a, b = map(str, input().split())\\nnum = int(a+b)\\nflag = False\\nfor i in range(1, 1001):\\n    if i*i > num:\\n        break\\n    elif i*i == num:\\n        print(\"Yes\")\\n        flag = True\\nif not flag:\\n    print(\"No\")", "target": "271", "substitutes": {"a": ["area", "sta", "x", "input", "c", "d", "ama", "ac", "ab", "int", "n", "da", "an", "A", "y", "alpha", "api", "sa", "aa", "la", "u", "va", "f", "e", "am", "ca", "ai", "asa", "aaa", "ba", "l", "ea", "r", "p"], "b": ["k", "mb", "x", "abb", "pb", "c", "d", "cb", "nb", "ab", "B", "bc", "bis", "n", "xb", "s", "rb", "y", "bs", "fb", "ib", "wb", "u", "lb", "e", "f", "sb", "be", "ba", "l", "v", "bb", "r", "p"], "num": ["unit", "nam", "x", "um", "c", "om", "sum", "pos", "int", "n", "valid", "inc", "Num", "id", "mon", "split", "uni", "zero", "mn", "con", "dim", "iter", "index", "bin", "number", "nu", "umi", "u", "len", "size", "nom", "f", "mu", "max", "uno", "mis", "NUM", "no", "inf", "p", "count"], "flag": ["use", "log", "type", "part", "field", "hide", "lag", "bug", "fail", "start", "ind", "long", "flags", "debug", "fun", "band", "weight", "id", "leaf", "wave", "sort", "split", "cost", "gui", "force", "FLAG", "offset", "agn", "ret", "bad", "py", "error", "bit", "write", "ag", "age", "star", "agg", "len", "ad", "status", "standard", "filter", "frac", "skip", "spin", "zag", "Flag", "arg", "count"], "i": ["pi", "o", "k", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "phi", "start", "int", "ind", "n", "ini", "s", "t", "ni", "id", "y", "ix", "index", "si", "u", "iu", "e", "I", "f", "ti", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "m", "p", "count"]}}
{"code": "from math import floor\\nimport numpy as np\\n\\nN = int(input())\\nK = floor((N * 2) ** 0.5)\\nif K * (K + 1) // 2 != N:\\n    print('No')\\n    exit()\\nelse:\\n    print('Yes')\\n    print(K + 1)\\n\\ngrid = np.ones((K, K), np.int64)\\ngrid[1:, 0] = np.arange(1, K)\\ngrid[:, 0] = np.cumsum(grid[:, 0])\\ngrid = np.cumsum(grid, axis=1).astype(str)\\nanswer = []\\nk = str(K)\\nanswer.append([k] + np.diag(grid).tolist())\\nanswer.append([k] + grid[:, 0].tolist())\\nfor i in range(1, K):\\n    answer.append([k] + grid[i, :i].tolist() + grid[i:, i].tolist())\\n\\nprint('\\n'.join(map(' '.join, answer)))\\n", "target": "502", "substitutes": {"N": [" NK", "U", "Node", "NA", "D", "S", " NI", "R", "NS", "E", "B", "Ns", "T", "n", "J", "Y", "A", "L", "Ni", "Wh", "Len", "Num", "NB", "NT", " n", "Size", "network", "NN", " Ne", "No", "Q", "I", "X", "NO", "C", "Na", "Ne", " D", "NG", "V", "P", "Nat", "KN", "O", "M", "F", "Z"], "K": ["U", "SE", "KI", "KR", "D", "FK", "Ku", "S", "IK", "SK", "E", "KT", "B", "T", "KE", "n", "J", "Y", "OK", "G", "L", "NK", "Power", "KK", "HK", "Size", "UK", "Q", "PK", "Count", "I", "X", "C", "DC", "V", "P", "CC", "EC", "ID", "KN", "CP", "Sk", "KB", "KC", "KS", "O", "M", "H", "F", "Key", "length", "Kent", "Z"], "grid": ["unit", "df", "uri", "grade", "input", "feed", "db", "square", "gu", "layout", "Grid", "scale", "point", "node", "sum", "data", "rule", "column", "ge", "list", "array", "range", "cart", "update", "band", "id", "site", "g", "gap", "dim", "map", "cell", "query", "index", "export", "line", "age", "density", "model", "row", "item", "house", "graph", "parse", "size", "ask", "play", "group", "clean", "edge", "filter", "module", "draw", "layer", "chain", "flat", "json", "station", "lat", "ace", "storage", "dist", "order", "show", "sky", "cube", "flow", "block", "card"], "answer": ["area", "empty", "average", "grade", "field", "exit", "element", "extra", "done", "energy", "object", "db", "response", "page", "results", " answers", "square", "search", "question", "output", "data", "complete", "expression", "une", "option", "archive", "assembly", "array", "range", "update", "result", "site", "zero", "answered", "network", "query", "number", "model", "eni", "message", "anova", "replace", "reply", "issue", "address", "size", "settings", "one", "default", "ask", "match", "blank", "support", "white", "knowledge", "Answer", "edge", "content", "memory", "example", "now", "addr", "evidence"], "k": ["o", "kn", "ke", "x", "_", "j", "work", "c", "d", "ak", "ky", "n", "mk", "ek", "ck", "kick", "id", "y", "key", "sk", "g", "unk", "h", "ok", "ks", "uk", "kid", "dk", "u", "f", "ask", "e", "b", "q", "kw", "kind", "w", "v", "r", "p", "rank", "km"], "i": ["pi", "di", "o", "x", "xi", "j", "c", "d", "yi", "phi", "ri", "a", "io", "start", "ori", "int", "ind", "n", "ui", "ini", "ni", "id", "y", "h", "ix", "index", "ip", "eni", "si", "u", "iu", "f", "I", "e", "end", "b", "hi", "ai", "w", "z", "l", "v", "ii", "li", "m", "ih", "p"]}}
{"code": "import math\\nn, m = map(int, input().split())\\np = 10**9 + 7\\n\\n\\n\\nnf = math.factorial(n) % p\\nmf = math.factorial(m) % p\\n\\nif abs(n-m) > 1:\\n  ans = 0\\n\\nelif n == m:\\n  ans = nf * mf * 2\\n  \\nelse:\\n  ans = nf * mf\\n  \\nprint(ans % p)", "target": "162", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "np", "d", " N", "nb", "name", "bn", "s", "an", "num", "ni", "i", "y", "mn", "na", "g", "min", "en", "h", "network", "nan", "nn", "un", "u", "net", "e", "f", "fn", "nt", "b", "ns", "pn", "sn", "no", "w", "v", "l", "r", "nc", "ln", "ne", "N"], "m": ["mini", "pi", "o", "mc", "x", "j", "tm", "c", "d", "num", "s", "an", "t", "i", "y", "mn", "g", "h", "ms", "ym", "md", "cm", "u", "mu", "e", "f", "b", "mi", "sm", "mm", "q", "pm", "w", "z", "dm", "v", "l", "r", "M", "bm"], "p": ["pi", "lp", "tp", "o", "par", "x", "j", "c", "after", "np", "d", "param", "port", "a", "t", "i", "y", "proc", "g", "h", "cp", "u", "pp", "e", "f", "pot", "pre", "b", "ps", "pn", "q", "pm", "P", "z", "w", "l", "v", " P", "pc", "r", "ap", "bp", "fp"], "nf": [" nn", "mc", "an8", "mfe", "mnf", "np", "mrf", "nb", "N8", "nfe", "Nf", " nb", " np", "anc", "anp", "nrf", "mnrf", "mn", " nc", " nfe", "nn", " n8", "anrf", "mnn", "Np", " nrf", "Nb", "n8", "anb", "mnc", "anfe", "nc", "anf"], "mf": [" nn", "mc", "mfe", "pfe", "msf", "nm", "Mp", "hc", "nfe", " np", "pcf", "mn", " mp", "Mn", "hcf", " nc", " mc", "mcf", "pf", "mp", "Mf", "ncf", "mm", "nsf", "psf", "pm", " msf", "hf", "hm", "pc", " mfe", "nc", "Mc", " mcf", " mn"], "ans": ["offs", "ls", "aning", "np", "nas", "ras", "ins", "ars", "ants", "amps", "ens", "an", "anc", " means", "cs", "ents", "ams", "anon", "sk", "na", "os", "anas", "plan", "ds", "anse", "nan", "nn", "ana", "can", "anes", "cons", "aff", "AN", "atan", "aned", "cas", "leans", "ANS", "ann", "lan", "ps", "ns", "sn", "ani", "ays", "params", "mean", "eps", "aus", "ons", "au"]}}
{"code": "mod=pow(10,9)+7\\nn,k=map(int,input().split())\\na=[0 for i in range(100000+1)]\\nans=0\\nfor i in range(k,0,-1):\\n    a[i]=k//i\\n    a[i]=pow(a[i],n,mod)\\n    j=2*i\\n    while j<=k:\\n        a[i]=(a[i]-a[j]+mod)%mod\\n        j += i\\n    ans=(ans+a[i]*i)%mod\\nprint(ans)", "target": "343", "substitutes": {"mod": ["oct", "sec", "mode", "step", "fre", "ve", "x", "od", "exp", "tr", "mad", "c", "d", "scale", "bug", "ac", "lex", "mult", "lo", "dec", "ind", "fun", "perm", "num", "inc", "reg", "id", "mag", "crit", "div", "dig", "dim", "min", "ms", "ok", "md", "ow", "cm", "post", "un", "comp", "dem", "mods", "row", "comb", "len", "spec", "max", "am", "base", " Mod", "cum", "MOD", "Mod", "im", "ai", "module", "lib", "complex", "m", "r", "p", "form"], "n": ["o", "cn", "x", "c", "d", " N", "nb", "s", "num", "an", "y", "mn", "g", "en", "nan", "un", "u", "f", "e", "b", "ns", "q", "w", "z", "l", "m", "r", "nc", "ln", "p", "N"], "k": ["o", "ke", "x", "kk", "c", "d", "ak", "mk", "num", "y", "sk", "ka", "h", "ok", "ks", "ko", "u", "size", "e", "f", "b", "ki", "q", "w", "kw", "z", "K", "m", "p", "km", "ku"], "a": ["ma", "area", "o", "at", "x", "input", "c", "aw", "ar", "ama", "ac", "wa", "data", "ab", "aux", "af", "pa", "all", "ata", "an", "s", "array", "A", "y", "alpha", "na", "qa", "sa", "ana", "ia", "aa", "la", "u", "va", "f", "e", "am", "b", "ca", "ad", "ga", "ai", "ae", "w", "asa", "ba", "aaa", "z", "aj", "ao", "m", "p", "au"], "i": ["ik", "pi", "it", "ji", "o", "di", "uri", "x", "xi", "c", "gi", "ci", "d", "yi", "phi", "ri", "io", "ie", "lo", "int", "ind", "s", "ui", "ini", "t", "ni", "bi", "id", "y", "api", "h", "ij", "index", "si", "u", "iu", "fi", "e", "ti", "I", "f", "b", "mi", "ai", "z", "qi", "l", "v", "ii", "li", "m", "r", "ei", "p"], "ans": ["x", " fa", "nas", "ins", "aos", "ants", "amps", "int", "pa", "ens", "iana", "an", "s", "ads", "A", "anc", " means", " spans", "cs", "ians", "anon", "sk", "ski", "na", "g", "sa", "anas", "ms", "ks", "nan", "ia", "ana", "can", "la", "aura", "AN", "cas", "aned", "anne", "atan", "ANS", "oa", "am", "ann", "ns", "ad", "ands", "lan", "ki", "chan", "es", "ions", "ai", "ani", "asa", "ays", "groups", "m", "asm", "p", "aus", "ons", "ran", "au"], "j": ["pi", "ji", "o", "x", "d", "jc", "ie", "ind", "J", "jit", "t", "ni", "y", "ij", "jl", "jo", "si", "u", "ja", "f", "e", "adj", "b", "jj", "z", "l", "jp", "ii", "aj", "m", "li", "v", "r", "p", "uj"]}}
{"code": "import sys\\nfrom itertools import product\\n\\ninput = sys.stdin.readline\\n\\n\\ndef main():\\n    N, A, B, C = map(int, input().split())\\n    L = [0] * N\\n    for i in range(N):\\n        L[i] = int(input())\\n\\n    ans = float(\"inf\")\\n    for comb in product(range(4), repeat=N):\\n        mp = -30\\n        a = b = c = 0\\n        for i, j in enumerate(comb):\\n            if j == 0:\\n                continue\\n            elif j == 1:\\n                a += L[i]\\n            elif j == 2:\\n                b += L[i]\\n            elif j == 3:\\n                c += L[i]\\n            mp += 10\\n\\n        if min(a, b, c) == 0:\\n            continue\\n\\n        mp += abs(A - a) + abs(B - b) + abs(C - c)\\n        if mp < ans:\\n            ans = mp\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "256", "substitutes": {"input": ["file", "type", "element", "out", "op", "current", "param", "argument", "raw", "output", "PUT", "data", " I", " Input", "format", "expression", "int", "view", "pull", "list", " int", "array", "config", "enter", "result", "call", "connect", "image", "version", "parent", "sample", "source", "request", "index", "main", "error", "table", "sel", "run", "process", "f", "help", "reader", "reset", "inf", "filter", "form", "l", "accept", "Input", "exec", "temp", "method"], "N": ["U", "D", "S", "R", "NS", "E", "NE", "Ns", "T", "n", "W", "J", "Y", "G", "Ni", "Len", "Num", "NT", "NM", " n", "Size", "NN", "MN", "Q", "I", "X", "Na", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["Ac", "U", "Ca", "NA", "Bu", "D", "S", "CA", "T", "Ka", "Az", "G", "Am", "Sa", "Ma", "AI", "SA", "Area", "AP", "Ar", "I", "AA", "Ang", "Na", "Fa", "P", "K", "API", "AB", "O", "AC", "M", "Input", "Name", "LA"], "B": ["Two", "Bu", "D", "BS", "BF", "R", "E", "LB", "Bi", "BB", "T", "W", "TB", "BE", "BBC", "G", "Ab", "NB", "BA", "BI", "Bs", "DB", "WB", "CB", "I", "SB", "P", "BC", "O", "M", "F"], "C": ["U", "CI", "D", "S", "R", "E", "ac", "CA", "T", "W", "G", "Cl", "Co", "JC", "I", "X", "Sc", "DC", "P", "CC", "Cs", "K", "CR", "BC", "O", "Cu", "Ch", "M", "F", "CM", "Z"], "L": ["U", "CI", "LM", "D", "S", "CL", "LU", "LO", "R", "E", "LD", "LB", "NL", "LR", "Lo", "T", "LS", "FL", "n", "J", "W", "Y", "LI", "G", "IL", "LP", "EL", "SL", "Q", "LT", "I", "Li", "X", "XL", "LL", "Lu", "V", "P", "p", "l", "DL", "O", "M", "F", "LA"], "i": ["pi", "it", "ji", "di", "uri", "k", "x", "xi", "gi", "ci", "d", "yi", "ri", " I", "io", "ie", "jc", "cli", "int", "ind", "n", "J", "num", "ini", "ui", "ni", "bi", "y", "api", "g", "ib", "ia", "index", "ix", "ip", "si", "u", "iu", "ja", "f", "I", "e", "ti", "im", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "m", "ei", "p"], "ans": ["auto", "ls", "Ann", "anus", "san", "aning", "nas", "ins", "sum", "ars", "ants", "vs", "amps", "an", "amp", "s", "man", "parser", " means", "cmp", "ents", "ams", "oss", "sk", "na", "comments", "plan", "anas", "ds", "ms", "cp", "nn", "nan", "co", "ks", "ana", "cons", "AN", "leans", "aned", "ANS", "max", "ann", "lan", "ps", "ns", "mm", "ani", "params", "mean", "eps", "aus", "ons"], "comb": ["sec", " combine", "JO", "loc", "x", "exp", "coll", "mult", "Lo", "uc", "lo", "go", " combinations", "tw", "result", "cho", "loop", "Cl", "div", "con", " mix", " Comb", "job", "acc", " z", " combined", "comp", "jo", "multi", "Comb", "seq", "lam", "obj", "sup", "cont", "join", "com", "z", "cr", " combination", "jam", "chain", "orig", "conf", "cl", "mix", " combo"], "mp": ["ma", "lp", "mc", "par", "mb", "mac", "omp", "op", "pg", "sp", "np", "fp", "Mp", "ac", "prop", "ss", "mom", "mpeg", "pa", "mod", "amp", "av", "cmp", "na", "ms", "mph", "mx", "cp", "cm", "tmp", "ip", "rep", "comp", "pp", "pre", "imp", "am", "ps", "mm", "cap", "pm", "ep", "jp", "m", "MP", "ap", "p", "up", "cop", "au"], "a": ["area", "at", "x", "aw", "d", "ar", "ak", "ama", "ab", "ac", "art", "af", "n", "da", "an", "s", "fa", "y", "sa", "ia", "aa", "u", "va", "f", "e", "am", "ca", "ad", "ai", "ae", "asa", "ba", "z", "aaa", "l", "aj", "p", "au"], "b": ["o", "eb", "k", "x", "pb", "db", "d", "cb", "nb", "ab", "bc", "n", "rb", "y", "bs", "g", "ib", "aa", "wb", "lb", "u", "e", "f", "ca", "sb", "be", "ba", "l", "v", "bb", "bf", "r", "m", "p"], "c": ["cn", "k", "x", "cy", "ci", "d", "cb", "ac", "uc", "bc", "n", "ce", "cs", "y", "g", "h", "co", "dc", "cu", "u", "f", "e", "ca", "w", "z", "l", "v", "lc", "m", "r", "cf", "nc", "p"], "j": ["ji", "o", "k", "x", "er", "d", "jc", "ie", "ac", "pos", "oj", "n", "J", "ot", "jit", "ch", "t", "y", "ij", "bj", "ia", "jl", "jo", "si", "u", "ja", "e", "f", "obj", "adj", "jj", "am", "im", "z", "v", "jp", "l", "aj", "li", "m", "jam", "p", "uj"]}}
{"code": "import math\\nwhile True:\\n    n = int(input())\\n    if n == 0:\\n        break\\n    s = [int(i) for i in input().split()]\\n    m = sum(s)/n\\n    a = [(s[i]-m)**2 for i in range(n)]\\n    v = sum(a)/n\\n    sb = math.sqrt(v)\\n    print(\"{:.5f}\".format(sb))", "target": "683", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "num", "an", "t", "ni", "y", "nw", "na", "g", "nn", "nan", "un", "null", "number", "u", "len", "net", "e", "f", "nt", "fn", "b", "ns", "pn", "sn", "no", "w", "nor", "z", "l", "r", "nc", "ln", "p", "ne", "N"], "s": ["states", "ls", "services", "parts", "S", "ings", "c", "ages", "d", "ins", "ses", "sum", "acks", " ls", "ss", " sets", " sizes", "strings", "y", "os", " cs", "sa", "ds", "ms", "gs", "lines", " signs", "south", "si", "u", "f", "e", "b", "ps", "ments", "ns", "es", "w", " ps", "l", " ss", "r", "p", "seconds"], "i": ["pi", "di", "o", "uri", "it", "k", "x", "xi", "j", "c", "gi", "gu", "ci", "d", "yi", "phi", " I", "ri", " ii", "oi", "start", "ie", "int", "ind", "ini", "ui", "ni", "bi", "id", "y", " j", "ix", "index", "ip", "eni", "si", "u", "iu", "ami", "fi", "e", "f", "I", "ti", "b", "mi", "ai", "z", "qi", "ii", "li", "abi", "p", "vi", "zi"], "m": ["ma", "o", "mc", "x", "j", "c", "fm", "d", "nm", "an", "y", "mn", "g", "h", "ms", "ym", "md", "cm", "u", "e", "f", "mu", "b", "sm", "w", "z", "dm", "l", "mean", "hm", "M", "p", "bm"], "a": ["ma", "area", "c", "aw", "d", "ama", "ac", "ab", "mA", "args", "ata", "an", "array", "A", "fa", "alpha", "na", "sa", "ana", "aa", "va", "oa", "b", "am", "ad", "ai", "ae", "w", "z", "ba", "l", "p", "au"], "v": ["k", "ve", "x", "j", "cv", "uv", "d", "vm", "van", "vv", "vt", "vp", "y", "g", "val", "h", "lv", "iv", "u", "va", "f", "e", "b", "vd", "V", "w", "sv", "z", "nv", "l", "r", "p"], "sb": [" SB", "mb", "abb", "pb", "db", "vm", "cb", "nb", " eb", "amb", "BB", "zb", "rb", "sd", "sa", "gb", "bj", "dB", "nn", "lr", "bg", "beta", "amba", "sf", "wb", "si", "lb", "b", "SB", "sm", "sn", "knowledge", "abl", "sv", "ba", "kb", "orb", "obb", "sg", "bb", "bf", "bm"]}}
{"code": "S = input()\\n\\nheads = int(S[:2])\\ntails = int(S[2:])\\n\\n\\ndef is_month(n):\\n    return n >= 1 and n <= 12\\n\\n\\nif is_month(heads) and (not is_month(tails)):\\n    print(\"MMYY\")\\nelif (not is_month(heads)) and (not is_month(tails)):\\n    print(\"NA\")\\nelif (not is_month(heads)) and is_month(tails):\\n    print(\"YYMM\")\\nelse:\\n    print(\"AMBIGUOUS\")\\n", "target": "17", "substitutes": {"S": ["U", "SE", "SO", "D", "SAN", "input", "SS", "R", "NS", "Sample", "SAM", "B", "T", "TS", "Si", "SI", "s", "Source", "A", "L", "G", "String", "SN", "SL", "INS", "ST", "SA", "Q", "SC", "I", "Socket", "X", "SU", "C", "SB", "V", "P", "Session", "SP", "H", "M", "Input", "F", "N"], "heads": ["offs", "locks", "checks", "holes", "events", "hours", "ins", "balls", "runs", "nuts", "olds", "sticks", "times", "opens", "head", "obs", "workers", "hops", "depth", "hands", "shows", "outs", "devices", "cases", "breaks", "sections", "chains", "blocks", "ts", "rows", "cells", "lines", "frames", "projects", "dates", "quarters", "boxes", "ashes", "headers", "links", "ends", "HEAD", "pages", "features", "tests", "pins", "types", "months", "bands"], "tails": ["kids", "locks", "ls", "cycles", "holes", "balls", "runs", "nuts", "olds", "rots", "sticks", "opens", "tips", "pants", "roots", "tail", "limits", "hops", "outs", "chains", "blocks", "les", "windows", "angles", "tops", "alls", "igs", "ails", "quarters", "boxes", "weights", "shirts", "headers", "links", "iffs", "tests", "tailed", "dogs", "nil", "pins", "xs", "verts", "styles"], "n": ["o", "k", "x", "j", "c", "d", "node", "nb", " N", "a", "Ns", "num", "t", "ni", "i", "y", "g", "en", "nn", "span", "nl", "number", "nu", "norm", "u", "size", "f", "e", "fn", "nt", "b", "ns", "pn", "sn", "w", "z", "dn", "l", "m", "nc", "ln", "p", "ne", "N", "conn"]}}
{"code": "n = int(input())\\nmod = 10**9+7\\nans = 1\\nfor i in range(n):\\n    ans *= i+1\\n    ans = ans%mod\\nprint(ans)", "target": "204", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "a", "an", "num", "s", "ni", "na", "g", "min", "nan", "nn", "bin", "number", "u", "f", "max", "ann", "b", "ns", "ai", "z", "l", "m", "r", "nc", "p", "N"], "mod": ["oct", "mode", " m", "step", "x", "od", " sub", "c", "rad", "scale", "sub", "ac", "mult", "cod", "dec", "int", "ind", " mods", "num", "an", "man", " dd", "id", "mn", "min", "div", "ms", "ix", "cm", "ia", "bin", "mods", "row", "comb", "max", "am", " Mod", "MOD", "Mod", "ai", "add", "sign", "complex", "m"], "ans": ["cycles", "x", "anus", "aning", " answers", "nas", "ras", "ins", "anned", "a", "ac", "ars", "ants", "ens", " sets", "an", "s", "anc", "A", "ads", "ats", " means", " spans", "cs", "ians", "ents", "asin", "sk", "na", "os", "sa", "anas", "ms", "nan", "ia", "span", "can", "bin", "anes", " sins", "cons", "AN", "atan", "ANS", "max", "ann", "lan", "ns", " chars", "am", "scan", "chan", "ions", "ai", "ani", " scans", "antis", "m", "p", "ons", "rank"], "i": ["pi", "k", "x", "xi", "j", "c", "ci", "ar", "d", " I", "ac", "a", "start", "int", "ind", "s", "ini", "ni", "bi", "id", "alpha", "h", "index", "ip", "bin", "si", "u", "e", "f", "I", "b", "q", "ai", "z", "ii", "r", "m", "p"]}}
{"code": "from collections import Counter\\nn=int(input())\\nd=Counter(list(map(int,input().split())))\\nm=int(input())\\nt=list(map(int,input().split()))\\nfor i in t:\\n if d[i]==0:print(\"NO\");exit()\\n else:d[i]-=1\\nprint(\"YES\")", "target": "210", "substitutes": {"n": ["x", "c", " fn", " N", "nb", "Ns", "num", "ni", "Num", "na", "en", " no", " ns", "nn", " l", "fn", "nt", "f", "b", "ns", "no", " ng", "l", "nc", "p", "N"], "d": ["di", "o", "dom", "D", "dt", "x", "c", "pd", "data", "diff", "nd", "ind", "td", "y", "g", "fd", "dim", "ds", "dh", "do", "md", "dc", "e", "dd", "f", "xd", "b", "ad", "dl", "w", "dict", "dm", "z", "v", "l", "cd", "did", "dat", "p", "ld"], "m": ["pi", "o", "k", "x", "j", "c", "y", "mon", "g", "ms", "md", "cm", "u", "f", "e", "mu", "b", "mi", "mm", "w", "z", "v", "l", "M", "p"], "t": ["tp", "o", "dt", "type", "x", "tr", "j", "tm", "c", "a", "diff", "T", "int", "ot", "all", "wt", "td", "y", "total", "rt", "ts", "tt", "tmp", " T", "u", "f", "e", "nt", "b", "pt", "w", "ta", "z", "v", "l", "p", "tn"], "i": ["mini", "it", "di", "o", "iw", "k", "x", "xi", "j", "gi", "c", "ci", "int", "ind", "num", "ui", "id", "y", "ij", "ib", "index", "ip", "si", "il", "u", "iu", "f", "I", "ti", "e", "b", "mi", "ai", "ta", "z", "p", "qi", "v", "l", "ii", "li", "ih", "ei"]}}
{"code": "from collections import deque\\nN, C, K = map(int, input().split())\\ntimes = []\\nfor _ in range(N):\\n    time = int(input())\\n    times.append(time)\\ntimes.sort()\\ntimes = deque(times)\\nans = 0\\nbus_time = times[0] + K\\nhuman = 0\\nwhile times:\\n    if times[0] <= bus_time:\\n        times.popleft()\\n        human += 1\\n        if human == C:\\n            ans += 1\\n            human = 0\\n            if times:\\n               bus_time = times[0] + K\\n    else:\\n        human = 0\\n        ans += 1\\n        bus_time = times[0] + K\\nif human:\\n    print(ans + 1)\\nelse:\\n    print(ans)", "target": "432", "substitutes": {"N": ["D", "S", "R", "NS", "E", "NC", "B", "Ns", "T", "n", "J", "Y", "A", "L", "G", "Num", "CNN", "NT", "Size", " n", "Q", "I", "X", "Ne", "V", "P", "O", "H", "M", "F", "Z"], "C": ["U", "CI", "D", "S", "CN", "ASC", "CD", "c", "E", "B", "T", "W", "Y", "CU", "G", "L", "A", "YC", "JC", "I", "X", "DC", "V", "P", "CC", "CR", "VC", "KC", "Cu", "O", "M", "H", "F", "CM"], "K": ["U", "KR", "D", "k", "S", "Max", "SK", "E", "B", "T", "KE", "W", "J", "Y", "A", "G", "NK", "L", "Power", "KK", "HK", "AK", "Q", "PK", "X", "V", "P", "Ke", "EC", "KS", "O", "H", "M", "Ch", "F", "CH", "Z"], "times": ["history", "offs", "forms", "events", "results", "steps", "images", "amps", "qs", "icks", "imes", "cases", "cells", "blocks", "ms", " Times", "places", "tim", "shape", "features", "cycles", "files", "data", "stars", "shows", "cs", "points", "rows", "ks", "sites", "items", " cases", "xes", "tests", "shots", "stats", "groups", "length", "lights", "hours", "Times", "runs", "ures", "s", "comments", "lines", "scripts", "ps", "ime", "works", "com", "ays", "years", "ones", "types", "months", "series", "checks", "Time", "ins", "reads", "options", "tips", "reports", "ops", "rules", "forces", "outs", "ts", "names", "frames", "once", "videos", "dates", "clock", "values", "things", "pages", "ions", "aces", "seconds"], "_": [" __", "x", "d", " ip", " day", " row", " j", " f", " loop", " count", " q"], "time": ["money", "loc", "work", "Time", "close", "hours", "cycle", "event", "name", "data", "minute", "hour", "value", "year", "weight", "id", "sleep", "cost", "timeout", "date", "live", "timer", "tz", "frequency", "number", "how", "size", "clock", "tim", "shape", "ime", "night", "delay", "serial", "length", "rank", "block", "rate", "call"], "ans": ["auto", "ls", "cus", "offs", "case", "san", "ras", "ins", "reads", "runs", " humans", "ars", "amps", "humans", "ens", "long", "an", "anc", "ops", "man", "ats", " means", "outs", "asts", "cs", "shows", "anim", "cases", "na", "os", "anas", "ana", "nan", "span", "can", "names", "AN", "cas", "aned", "ANS", "acts", "Human", "ann", "lan", "ns", "errors", "features", "faces", "ai", "aces", "ano", "ays", "cross", "groups", "eps", "rss", "han"], "bus_time": ["busfvolume", "BUS_clock", "busingtimes", "bus2rate", "bus__length", "bus_clock", "bus_volume", "bus2history", "BUS_length", "bus2time", "busfclock", "bus2value", "bus2length", "bus_value", "BUS_time", "bus_history", "BUS_history", "BUS_value", "busftime", "bus_length", "bus_date", "bus_times", "busingdate", "bus2times", "busingtime", "BUS_date", "busftimes", "bus_rate", "bus__times", "BUS_times", "BUS_volume", "BUS_rate", "bus__time", "bus__value"], "human": ["native", "home", "events", "large", "raw", "local", "valid", "race", "his", "h", "can", "char", "cas", "shape", "serial", "show", "han", "log", "central", "fat", "full", " humans", "chrom", "person", "an", "sleep", "zero", "na", "month", "ghost", "modern", "chan", "hot", "historic", "visible", "similar", "regular", "san", "real", "people", "author", "slow", "personal", "long", "array", "man", "mother", "total", "ident", "character", "huge", "oman", "complex", "user", "common", "case", "unknown", "short", "roman", "humans", "all", "true", "sensitive", "hard", "custom", "parent", "micro", "normal", "Human", "small", "path", "recent"]}}
{"code": "import sys\\nread = sys.stdin.read\\nreadlines = sys.stdin.readlines\\ndef main():\\n    s = tuple(input())\\n    r = 0\\n    s_len = len(s)\\n    for i1 in range(s_len):\\n        for i2 in range(i1 + 1, s_len + 1):\\n            if all([c in ('A', 'T', 'C', 'G') for c in s[i1:i2]]):\\n                r = max(r, i2 - i1)\\n    print(r)\\n\\nif __name__ == '__main__':\\n    main()", "target": "331", "substitutes": {"read": ["use", "type", " write", "x", "input", " readers", "feed", "open", "current", "d", "reads", "raw", "sub", "only", "data", " stream", "long", "bind", " print", " data", "g", "connect", " reader", "win", "write", "readable", "stream", " Read", "run", "send", " loop", "f", "default", "reader", "Read", "load", " reads", " reading", "w", "add", "READ", "ic", "str", " copy"], "readlines": [" readline", "readlimits", " readitems", "readitems", " readlimits", "readline", "Readline", "loaditems", "READlines", "Readfiles", "READlimits", "loadline", "READfiles", "READline", "readfiles", "loadlines", "Readlines", "Readlimits", "Readitems", " readfiles"], "s": ["rs", "parts", "o", "services", "ls", "files", "S", "input", "d", "ins", "a", "sys", "data", "ss", "n", "abs", "args", "array", "t", "strings", "i", "g", "os", "cells", "rows", "gs", "lines", "items", "si", "u", "sets", "f", "e", "b", "ns", "sb", "w", "l", "v", "groups", "m", "p"], "r": ["rs", "k", "err", "er", "R", "d", "ar", "a", "n", "rh", "array", "t", "rb", "range", "rf", "i", "result", "mr", "rt", "g", "rg", "h", "reb", "nr", "u", "br", "e", "f", "rr", "rl", "b", "res", "max", "rev", "rn", "q", "w", "v", "l", "m", "right", "fr", "ru", "p", "rc", "sr"], "s_len": [" s_lf", " changes_lvl", "s_lvl", "states_lock", "states_len", "s___len", " changes_el", "s___ln", "s_el", " changes_lf", "s_lf", " s_val", "s_lock", "s_val", "states_ln", "s___lock", " changes_len", "s___loc", "s_lin", "s_loc", " s_lin", "s_ln", "states_loc"], "i1": ["i9", "pi1", "p13", "a10", "p3", " i4", " ione", "i10", "pone", "pione", " i9", "p4", "i13", "ione", " i13", "a3", "a9", "pi2", "si10", "si9", "i4", "pi4", "p9", "a1", "i3", "a2", "si3", "a13", "p2", " i3", " i10", "si1", "p1"], "i2": ["e5", "i96", "I_", "i6", "ini5", "p_", "iniTwo", "xi3", " i22", "eTwo", "I2", "qi3", "qi6", "xi6", "I1", "i22", "i0", "iTwo", "qi2", "xi2", " i5", "ini96", "i3", " i0", " iTwo", " i_", "i5", " i6", "qi0", "p2", "e2", " i96", " i3", "e96", "p1", "xi0", "p22", "i_", "ini2", "I22"], "c": ["cur", "k", "x", "ci", "d", "col", "a", "ac", "uc", "n", "cc", "i", "g", "h", "abc", "word", "ct", "cm", "cu", "u", "e", "f", "b", "unc", "C", "rec", "w", "lc", "v", "l", "m", "nc", "cf", "p", "enc"]}}
{"code": "n = int(input())\\ns = input()\\nt = input()\\nans = s+t\\nfor i in range(n):\\n    if s[i] == t[0]:\\n        if s[i:] == t[:n-i]:\\n            ans = s[:i]+t\\n            break\\nprint(len(ans))", "target": "693", "substitutes": {"n": ["pi", "o", "k", "x", "j", "c", "np", "d", "nb", "ny", "num", "ni", "y", "nw", "h", "network", "nn", "un", "number", "u", "net", "f", "nt", "e", "b", "ns", "pn", "sn", "z", "l", "v", "zn", "m", "r", "nc", "p", "ne", "N"], "s": ["states", "ls", "services", "o", "parts", "S", "c", "fts", "d", "slice", "ws", "ses", "a", "ss", "abs", "an", "ows", "strings", "cs", "y", "ches", "g", "sa", "os", "ts", "ds", "blocks", "gs", "south", "si", "u", "sets", "e", "f", "sym", "settings", "b", "ps", "ns", "ments", "es", "sb", "w", "sv", "l", "sg", "xs", "se", "types", "p", "rams"], "t": ["tap", "it", "tp", "o", "at", "dt", "type", "k", "out", "trace", "x", "j", "tu", "c", "d", "tc", "ut", "a", "T", "int", "ot", "tail", "y", "test", "tty", "g", "ty", "h", "ts", "tt", "tf", " T", "f", "e", "ti", "b", "tim", "pt", "w", "ta", "z", "v", "l", "template", "m", "r", "p", "temp"], "ans": ["ls", "S", "x", "anus", "atts", "fts", "nas", "options", "a", "ars", "ants", "atten", "ens", "args", "an", "ats", "cs", "tan", "anon", "sk", "na", "os", "sa", "ds", "ts", "ks", "trans", "span", "can", "AN", "atan", "aned", "ANS", "ann", "lan", "ns", "scan", "es", "ai", "annels", "ays", "cross", "xs", "acs", "eps", "p", "aus", "ons"], "i": ["pi", "it", "o", "k", "x", "xi", "j", "c", "sp", "d", "phi", " I", "oi", "a", "start", "int", "ind", "ini", "id", "iq", "y", "h", "index", "ip", "seq", "si", "u", "iu", "e", "ti", "I", "f", "b", "z", "p", "l", "v", "ii", "li", "r", "m"]}}
{"code": "import sys,math,collections,itertools\\ninput = sys.stdin.readline\\n\\nN,K=list(map(int,input().split()))\\nA = list(map(int,input().split()))\\n\\nfor i in range(K):\\n    imo = [0]*(N+1)\\n    flag = 1\\n    for j in range(N):\\n        imo[max(0,j-A[j])] += 1\\n        imo[min(N,j+A[j]+1)] -= 1\\n        if j-A[j]>0 or j+A[j]+1<N:\\n            flag = 0\\n    A = list(itertools.accumulate(imo))[:-1]\\n    if flag == 1:\\n        break\\nprint(*A)\\n", "target": "377", "substitutes": {"input": ["empty", "case", "out", "plus", "feed", "current", "param", "acl", "argument", "raw", "output", "a", "data", " Input", "format", "submit", "int", "instance", "util", " output", "print", "action", "num", "pull", "array", " int", "space", "enter", "call", "INT", "analysis", "image", "iter", "parent", "request", "source", "null", "table", "multi", "IO", "exec", "help", "reader", "select", "load", "inf", "form", "l", "accept", "str", "text", "Input", "comment", "until", "utils", "temp", "arg", "method"], "N": ["ND", "U", "NA", " J", "D", "S", " L", "R", "NS", " I", "NE", "B", "Ns", "T", "n", "J", " O", "Sn", " C", "Y", "Ni", "L", "G", "Num", " W", " NL", "NT", "NM", " n", "Size", " Z", " Ne", " M", "Q", " number", "I", "X", " B", "C", "NI", "Ne", "Na", "V", "P", "KN", " P", "O", "M", "F", "Z"], "K": ["U", "KI", "KR", "D", "Ku", "k", "S", "SK", "E", "KE", "T", "W", "J", "n", "Y", "KK", "Q", "PK", "I", "X", "C", " k", "V", "P", "KA", "KN", "Sk", "KS", "KC", "O", "M", "F", "Z"], "A": ["As", "U", "Ac", "NA", "AR", "D", "S", "Java", "au", "Args", "Alpha", "a", "B", "CA", "All", "T", "PA", "af", "mA", "Action", "J", "Array", "Y", "array", "G", "Si", "AM", "Flag", "Ag", "L", "alpha", "Ma", "HA", "AS", "AI", "GA", "SA", "AU", "An", "TA", "Adam", "AP", "Average", "Q", "Ha", "Wa", "Ar", "I", "AA", "JA", "X", "App", "C", "AE", "MA", "ARA", "AST", "ai", "One", "P", "AF", "API", "O", "H", "M", "AW", "F", "AG", "AAA", "LA"], "i": ["ik", "ji", "c", "gi", "ci", "d", "ie", "ind", "ni", "id", "y", "iq", "h", "ij", "inn", "ix", "iu", "f", "I", "b", "q", "ai", "IJ", "z", "l", "jp", "ii", "li", "p"], "imo": ["iman", "auto", "o", "ima", "azo", "anti", "illo", "imoto", "np", "oran", "ola", "ilo", "amo", "olo", "ori", "iso", "aro", "imi", "odi", "agi", "imil", "orf", "gio", "oro", "ato", "do", "ismo", "amia", "imum", "osi", "abo", "ahi", "asu", "ando", "mo", "anova", "ami", "uno", "ora", "opa", "ista", "ho", "so", "im", "ano", "imate", "icho", "igi", "ii", "airo", "tto", "imus", "imated", "imei", "iro"], "flag": ["maybe", "log", "type", "sync", "std", "lag", "bug", "ie", "start", "ind", "flags", "long", "debug", "all", "info", "id", "sort", "force", "FLAG", "offset", "job", "big", "bad", "nl", "line", "age", "bit", "ag", "char", "f", "code", "like", "store", "child", "status", "no", "ai", "init", "kind", "tag", "z", "cat", "style", "wait", "skip", "Flag", "group", "arg", "count"], "j": ["area", " J", "jen", "c", "t", "jit", "bi", "jan", "h", "job", "next", "jl", "f", "I", "jj", "z", "jp", "m", "p", "ji", "js", "k", "x", "_", "d", "ijk", "a", "jc", "oj", "y", "ix", "jo", "ja", "ii", "r", "li", "uj", "note", "ie", "section", "ind", "n", "J", "bj", "index", "u", "e", "adj", "dj", "l", "v", "aj", "jing", "kj", "el", "o", "ni", " dj", "key", "g", "ij", "si", "jet", "obj", "b", "q", "fr"], "max": ["first", "Max", "std", "x", "c", "sum", "start", "pos", "maximum", "int", "range", "total", "ax", "MAX", "index", "next", "peak", "last", "len", "size", "end", "limit", "mean", "cent", "cap", "rank", "count"], "min": ["first", "sin", "low", "sum", "sub", "only", "value", "start", "diff", "pos", "mod", "all", "range", "span", "index", "next", "lower", "len", "end", "shift", "MIN", "Min", "mean", "sign", "mid", "skip"]}}
{"code": "n = int(input())\\ns = input()\\nk = int(input())\\nt = s[k - 1]\\nans = \"\"\\nfor si in s:\\n    if si == t:\\n        ans += si\\n    else:\\n        ans += \"*\"\\nprint(ans)\\n", "target": "652", "substitutes": {"n": ["o", "j", "c", "np", "nb", "ny", "ni", "i", "nw", "na", "network", "nn", "span", "nr", "net", "e", "ns", "pn", "sn", "no", "z", "l", "v", "m", "nc", "p", "ne", "N"], "s": ["states", "ls", "o", "services", "S", "sin", "c", "d", "ins", "ses", "a", "ss", "space", "strings", "i", "cs", "y", "g", "sa", "os", "ts", "ds", "ks", "ips", "gs", "lines", "sites", "sq", "south", "u", "sets", "e", "f", "sym", "b", "ps", "ns", "es", "features", "w", "sv", "l", "v", "stats", "m", "xs", "words", "p"], "k": ["o", "kn", "ke", "x", "kk", "j", "c", "d", "ak", "ky", "ck", "kick", "ch", "i", "y", "key", "sk", "g", "h", "ok", "ks", "u", "e", "f", "b", "q", "tk", "w", "kw", "z", "K", "l", "v", "m", "p"], "t": ["o", "type", "dt", "x", "j", "c", "d", "a", "T", "ot", "i", "y", "total", "g", "h", "ts", "tt", "u", "f", "e", "b", "q", "w", "ta", "z", "v", "l", "m", "p", "tn"], "ans": ["anus", "ras", "nas", "ins", "ases", "anks", "a", "ars", "ants", "amps", "ens", "args", "an", "anc", "parser", "man", " means", "ats", "ads", "rules", "cs", "ents", "ams", "asts", "na", "comments", "anas", "ds", "ks", "nan", "ana", "span", "can", "anes", "lines", "arts", "AN", "atan", "aned", " Ans", "leans", "ANS", "cas", "ann", "lan", "ns", "scan", "ands", "ani", "ays", "params", "eps", "aus", "ons"], "si": ["di", "su", "xi", "asi", "gi", "sci", "sp", "ci", "ita", "sum", "oi", "a", "sil", "ie", "Si", "sie", "ini", "ui", "esi", "agi", "sis", "SI", "i", "ni", "sd", "alpha", "ski", "sk", "sa", "isi", "eni", "ami", "spec", "ti", "so", "ani", "ta", "chi", "ea", "ii", "shi", "li", "ic", "se", "sim", "ei", "zi"]}}
{"code": "N, M, *A = map(int, open(0).read().split())\\nls = [0]*10\\nls[1] = 2\\nls[2] = 5\\nls[3] = 5\\nls[4] = 4\\nls[5] = 5\\nls[6] = 6\\nls[7] = 3\\nls[8] = 7\\nls[9] = 6\\nA.sort(reverse=True)\\ncls = {ls[a] for a in A}\\ncls = sorted(list(cls))\\ndp = [-float('inf')]*(N+10)\\ndp[0] = 0\\nfor i in range(1,N+1):\\n  dp[i] = max(dp[i-c]+1 for c in cls)\\nans = 0\\nM = N\\nfor i in range(dp[N]):\\n  for a in A:\\n    c = ls[a]\\n    if dp[M-c]+1 == dp[M]:\\n      ans += a*10**(dp[N]-1-i)\\n      M -= c\\n      break\\nprint(ans)", "target": "712", "substitutes": {"N": ["U", "Node", "D", "S", "CN", "R", "NS", "E", "NC", "NE", "B", "Ns", "T", "n", "J", "W", "Y", "L", "Ni", "G", "Len", "Num", "NT", "NM", " n", "Size", "NN", "No", "MN", "Q", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "LM", "D", "S", "R", "Z", "E", "d", "B", "T", "W", "J", "n", "Y", " C", "L", "G", "Ma", "NM", "MN", "Ms", "Q", "I", "X", "C", "V", "MB", "P", "MC", "K", "m", "O", "H", "Mi", "F", "CM", "RM"], "A": ["As", "Ac", "Ca", "NA", "D", "S", " L", "au", "E", "Alpha", "ac", "B", "CA", "All", "T", "LS", "W", "mA", "Si", "At", "Array", "Y", "Az", "G", "L", "Am", "alpha", "AS", "Cl", "GA", "SA", "An", "Ar", "I", "AA", "am", "b", "App", "C", "LL", "V", "P", "p", "API", "AF", "l", "K", "H", "AC", "F", "LA"], "ls": [" LS", "acl", "List", "qs", "ly", "ches", "cases", "nl", "ists", "ES", "lis", " lines", "ns", "LL", "lc", "less", "p", "lt", "files", "x", "ses", "ss", "vs", "sl", "cs", "ks", "ols", "ii", "li", "eps", "lp", "fs", "sels", " logs", "n", "models", "s", "list", "ds", "lv", "lines", "la", "len", "ps", "es", "l", "xs", "ln", "rs", " es", "lf", "ils", "ins", "fl", "Ns", "LS", "ll", "L", "bs", "os", "ips", "lists", "les", "gs", "ails", "los", "ys", "b", "dl", "las"], "cls": ["cla", " clS", "colS", "clls", "Clls", "Clos", "cols", " clcs", "cln", " clls", "colcs", "cli", "lla", "cles", "ClS", "colls", "cola", "clS", "Cls", "coles", " clos", "lli", "plcs", "Cles", "Cli", " cles", "pls", " cln", " cli", "pla", "colos", "Cln", "clcs", " cla", "plls", "Cla", "llos", "coln", "clos", "lls"], "a": ["ma", "area", "ha", "at", "ya", "x", "ar", "d", "ac", "ab", "app", "wa", "af", "pa", "n", "all", "ata", "s", "an", "fa", "y", "alpha", "na", "sa", "ana", "ia", "za", "aa", "ach", "u", "ja", "f", "e", "b", "am", "ca", "ad", "C", "Na", "ga", "ai", "ae", "ta", "aaa", "ba", "ea", "l", "ada", "eta", "ace", "m", "aj", "p", "audio", "ka", "au"], "dp": ["wp", "lp", "di", "tp", "pi", "dos", "dt", "pid", "df", "pb", "px", "pg", "db", "np", "d", "pd", "du", "vs", "pa", "src", "ads", "hp", "vp", "DP", "pkg", " cp", "wd", "api", "dim", "ds", "cp", "dr", "cm", "dc", "rep", "py", "density", "projects", "dep", "pp", "dd", "imp", "xd", "ad", "ps", "ns", "DC", "dl", "pm", "P", "dm", "CP", "bps", "xs", "deb", "dat", "p", "gp", "fp"], "i": ["pi", "o", "k", "x", "xi", "j", "ci", "d", "phi", "io", "ie", "int", "ind", "n", "ini", "bi", "id", "iq", "y", "h", "index", "ip", "si", "il", "u", "iu", "e", "ti", "f", "I", "b", "mi", "C", "inf", "im", "ai", "z", "l", "v", "ii", "li", "m", "p"], "c": ["o", "mc", "cn", "k", "x", "j", "cy", "d", "ci", "col", "ac", "uc", "fc", "int", "n", "center", "s", "cc", "anc", "t", "cs", "y", "h", "cp", "cm", "dc", "cu", "u", "xc", "f", "e", "max", "b", "ca", "unc", "C", "arc", "w", "z", "l", "v", "lc", "pc", "m", "r", "nc", "cf", "p", "cl", "count"], "ans": ["asses", "Ann", "aning", "nas", "ras", "ins", "ases", "ants", "amps", "an", "s", "ads", "anc", " means", "cs", "ams", "sk", "na", "os", "anas", "ds", "ms", "gan", "ks", "ana", "An", "span", "anes", "can", "AN", "leans", "aned", "ANS", "ann", "ad", "ns", "lan", "scan", "Na", "es", "ai", "ays", "mean", "eps", "p", "aus", "au"]}}
{"code": "def shuffle(word, length):\\n\tli = list(word)\\n\tad = li[0:length]\\n\tli += ad\\n\tdel li[0:length]\\n\treturn ''.join(li)\\n\\nwhile True:\\n\tstr = input()\\n\tif str == '-':\\n\t\tbreak\\n\tnum = int(input())\\n\t\\n\tfor i in range(num):\\n\t\trn = int(input())\\n\t\tstr = shuffle(str, rn)\\n\t\t\\n\tprint(str)", "target": "715", "substitutes": {"word": ["string", "part", "case", "input", "work", "speech", "doc", "search", "name", "pair", "start", "rule", "year", "list", "space", "wave", "prefix", "piece", "line", "character", "char", "item", "address", "code", "term", "w", "Word", "text", "words", "p", "letter"], "length": ["type", "string", "loc", "letter", "part", "distance", "input", "port", "point", "value", "start", "n", "tail", "long", "depth", "range", "stop", "width", "time", "body", "gap", "component", "query", "line", "number", "sequence", "len", "size", "Length", "end", "padding", "shape", "position", "l", "duration", "patch", "p", "form", "path", "level", "count"], "li": ["el", "pi", "lp", "ls", "mini", "loc", "di", "le", "j", "ul", "ci", "kl", "data", "ie", "lo", "cli", "sl", "ell", "lie", "list", "LI", "ini", "ll", "ni", "bi", "arr", "iter", "bl", "line", "py", "la", "si", "lb", "len", "ee", "Li", "b", "mi", "pl", "dl", "ai", "l", "lc", "ii", "lu", "ln", "au"], "ad": ["al", "od", "c", "ci", "d", "ar", "ac", "a", "ab", "art", "ell", "da", "ads", "list", "AD", "id", "arr", "sd", "wd", "Ad", "pad", "adr", "aa", "la", "att", "dd", "ed", "adj", "am", "b", "ai", "ani", "w", "add", "ada", "bb", "p", "ud", "au"], "str": ["cur", "ner", "string", "step", "part", "err", "tr", "exp", "er", "sp", "name", "inst", "start", "temp", "pos", "sl", "int", "ring", "n", "s", "result", "arr", "test", "inner", "div", "min", "iter", "dr", "line", "st", "char", "br", "nr", "Str", "len", "f", "spec", "obj", "code", "rev", "stri", "frac", "z", "STR", "text", "r", "fr", "p", "kr", "sr", "letter", "enc"], "num": ["lim", "loc", "err", "um", " len", "off", "np", "nm", " Num", " N", "nb", "sum", "col", "mult", "pos", "n", " numer", "Num", " nu", "mn", "uni", "na", "div", "con", " n", "nn", "span", "number", "nu", "umi", "norm", "nr", "run", "len", "nom", "fn", " number", " ni", "NUM", "no", "init", "nc"], "i": ["it", "k", "j", "gi", "c", "ci", "d", "col", "ind", "n", "ni", "id", "ir", "h", "ib", "inn", "index", "ip", "bit", "il", "f", "ti", "I", "ai", "p", "ii", "r", "io"], "rn": ["ner", "cn", "rd", "runner", "ng", "roc", "auc", "nir", "n", "anc", "rh", "ni", "rf", "circ", "nw", "rx", "dr", "nn", "rw", "unn", "nr", "ril", "anne", "rr", "rup", "hn", "feat", "RN", "cr", "nic", "r", "nc", "cf", "rc", "ne", "rin"]}}
{"code": "N,K=map(int,input().split())\\nA=N%K\\nprint(min(A,abs(A-K)))", "target": "63", "substitutes": {"N": ["U", "NA", "D", "S", "CN", "R", "NS", "E", "NC", "B", "Ns", "n", "J", "L", "Wh", "CNN", "NT", " n", "NN", "An", "Q", "X", "C", "NI", "Ne", "V", "P", "O", "H", "M", "F", "Z"], "K": ["U", "KR", "D", "k", "S", "Max", "SK", "E", "Ak", "B", "KE", "W", "J", "Y", "G", "L", "Power", "KK", "HK", "AK", "Q", "PK", "I", "X", "C", " k", "V", "P", "Ke", "KN", "Sk", "KB", "KS", "O", "H", "M", "F", "Z"], "A": ["NA", "D", "S", "Alpha", "a", "B", "CA", "All", "PA", "W", "mA", "n", "Array", "Y", "G", "L", "alpha", "Access", "Address", "SA", "EA", "Adam", "AP", "Average", "Ha", "AN", "I", "AA", "X", "C", "Na", "V", "P", "FA", "KA", "AF", "AB", "API", "AC", "M", "H", "F", "Abs", "LA"]}}
{"code": "n = int(input())\\ndiv = 0\\nfor i in str(n):\\n    num = int(i)\\n    div += num\\n\\nif div % 9 == 0:\\n    print(\"Yes\")\\nelse:\\n    print('No')", "target": "304", "substitutes": {"n": ["o", "k", "j", "c", "d", "node", "nb", "name", "a", "pos", "s", "ni", "min", "g", "index", "number", "u", "f", "fn", "e", "b", "ns", "no", "init", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "div": ["dom", "k", "input", "j", "um", "c", "d", "ng", "sum", "data", "dev", "dec", "ind", "inc", "id", "DIV", "inner", "uni", "g", "dim", "division", "span", "index", "comb", "br", "u", "size", "f", "max", "sup", "byn", "init", "draw", "p", "m", "Div", "form", "count"], "i": ["unit", "pi", "iw", "k", "x", "input", "j", "c", "gi", "sp", "ci", "d", " I", "a", "start", "pos", "ind", "ini", "id", "inner", "get", "g", "h", "index", "u", "f", "e", "I", "b", "q", "w", "init", "z", "ii", "r", "m", "li", "p"], "num": ["unit", "loc", "dom", "um", "c", "off", "d", "sum", "col", "name", "start", "dec", "ind", "inc", "id", "Num", "uni", "con", "dim", "un", "index", "number", "nu", "u", "size", "f", "max", "end", "byn", "new", "NUM", "no", "init", "orig", "m", "conf", "nc", "nam", "N"]}}
{"code": "n = int(input())\\ns = [input() for _ in range(n)]\\ndic = {\"AC\": 0, \"WA\": 0, \"TLE\": 0, \"RE\":0}\\n\\nfor v in s:\\n  dic[v] += 1\\n\\nprint(\"AC x {}\".format(dic[\"AC\"]))\\nprint(\"WA x {}\".format(dic[\"WA\"]))\\nprint(\"TLE x {}\".format(dic[\"TLE\"]))\\nprint(\"RE x {}\".format(dic[\"RE\"]))\\n", "target": "531", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "name", "Ns", "num", "t", "i", "y", "g", "network", "number", "u", "f", "e", "b", "ns", "w", "z", "l", "m", "r", "nc", "p", "ne", "N"], "s": ["states", "ls", "o", "S", "x", "c", "d", "ws", "ses", "a", "ss", "args", "cs", "y", "g", "rows", "gs", "lines", "items", "si", "e", "f", "b", "ns", "es", "w", "sv", "z", "l", "r", "xs", "p"], "_": ["__", "all", "num", "ip", "len", "f", "p"], "dic": [" dice", "bac", "diagnoc", "Dics", "Dic", "dicked", "ciac", "datic", " dics", "indx", "indict", "doc", "diagnic", "dac", " dictionary", "domic", "bic", "dics", "diagnicked", "ldictionary", "domoc", " dx", "dik", "dedx", "dedic", "ldic", "Diac", "ldIC", "cic", "biac", "diagnIC", "cics", "dice", "ldicked", "domik", " dIC", "datIC", "dedict", " dicked", "indic", "cictionary", "dictionary", "dIC", "dx", "indice", "ldics", " dict", "bict", "diac", " diac", "ldoc", "Dac", "dedice", "domIC", " doc", "dict", " dac", "datik", "datoc", "Dict", " dik", "ldiac", "bics"], "v": ["vec", "o", "k", "ve", " vi", "x", "j", "uv", "c", "d", "vid", "vv", "vt", "var", "ov", "t", "i", "g", "val", "h", "lv", "iv", "u", "f", "e", "b", " i", "q", "V", "w", "sv", "z", "l", "m", " V", "p", "ou", "vi"]}}
{"code": "N,K=map(int,input().split())\\nt=[list(map(int,input().split())) for _ in range(N)]\\nt.sort(key=lambda x:-x[1])\\nans=0\\ndp=set()\\np=[]\\nfor i in range(K):\\n  ans+=t[i][1]\\n  if t[i][0] in dp:\\n    p.append(t[i][1])\\n  dp.add(t[i][0])\\nans+=len(dp)**2\\nwer=ans\\nwhile K<N and p:\\n  if t[K][0] not in dp:\\n    wer=wer+t[K][1]-p.pop()-len(dp)**2+(len(dp)+1)**2\\n    ans=max(ans,wer)\\n    dp.add(t[K][0])\\n  K+=1\\nprint(ans)", "target": "466", "substitutes": {"N": ["U", "Node", "D", "S", "k", "Max", "Limit", "R", "NS", "NE", "B", "Ns", "T", "n", "W", "J", "Y", "A", "L", "G", "Ni", "Len", "Num", "CNN", "NT", " n", "Size", "NN", "Q", "I", "Number", "X", "C", "Na", "Ne", "V", "OS", "P", "NF", "Sk", "O", "H", "M", "F", "Z"], "K": ["U", "KI", "KR", "D", "Ku", "k", "S", "DK", "R", "SK", "E", "Ak", "B", "Ns", "T", "KE", "Ka", "W", "J", "Y", "OK", "A", "G", "L", "ANK", "Power", "KK", "HK", "ks", "UK", "AK", "No", "Q", "PK", "AN", "I", "X", "C", " k", "V", "OS", "P", "Ke", "KA", "KN", "Sk", "Key", "KS", "O", "H", "M", "F", "Right", "Z"], "t": ["it", "tp", "o", "dt", "at", "type", "qt", "k", "x", "bt", "tu", "c", "tool", "d", "to", "tc", "tower", "ut", "a", "art", "T", "int", "n", "ot", "s", "list", "y", "test", "total", "rt", "ty", "g", "h", "xt", "ts", "tt", "ct", "tf", "tmp", "table", "unt", "st", "yt", " T", "att", "u", "et", "f", "e", "ti", "b", "nt", "pt", "tn", "ta", "z", "v", "l", "template", "te", "m", "flat", "temp", "token"], "_": [" key", "out", " __", "j", " time", " row", " j", "g", "u", "q"], "ans": ["As", "offs", "tan", "eds", "k", "aning", "ras", "nas", "ins", "ars", "ants", "ss", "pos", "amps", "vs", "ens", "Ns", "pa", "an", "s", "anc", "A", "ops", "ats", " means", "cs", "outs", "ams", "anon", "sk", "AS", "na", "os", "ents", "anas", "rans", "ds", "ks", "ana", "nan", "An", "trans", "can", "cons", "AN", "aned", "ANS", "oa", "activation", "ann", "ps", "ns", "lan", "oss", "Na", "es", "ai", "annels", "ays", "eps", "aus", "ons", "au"], "dp": ["wp", "lp", "pi", "tp", "di", "dt", "ap", "par", "dos", "dom", "wm", "pb", "db", "dq", "sp", "np", "d", "pd", "pair", "pos", "pa", "vp", "yp", "hp", "DP", "s", "pkg", "dra", "wd", "api", "ds", "cp", "dB", "dr", "dc", "ip", "pr", "rep", "py", "mp", "pp", "mu", "dep", "imp", "e", "ps", "pn", "dl", "pm", "P", "dm", "w", "params", "ep", "jp", "NP", "xs", "deb", "eps", "dat", "gp", "fp"], "p": ["wp", "lp", "pi", "tp", "o", "k", "j", "op", "c", "sp", "np", "d", "pas", "pd", "a", "pa", "n", "s", "y", "api", "h", "cp", "pr", "ip", "py", "u", "e", "f", "b", "ps", "pn", "q", "w", "P", "l", "jp", "v", "pc", "m", "php", "r", "ap", "up", "bp", "cop", "fp"], "i": ["ik", "pi", "it", "o", "ji", "k", "x", "xi", "j", "c", "gi", "ci", "d", "oi", " I", "ri", "ie", "ori", "int", "ind", "n", " iP", "s", "ini", "ui", "info", "id", "y", "iq", "h", "inn", "ix", "index", "ip", "si", "il", "u", "iu", "e", "ti", "I", "f", "b", "ki", "q", "ai", "z", "qi", "l", "v", "ii", "li", "m", "ih", "io"], "wer": ["wp", "lp", "ner", "wm", "vr", "wy", "wen", "Ku", "iw", "wr", "Ws", "wl", "er", "wan", "aw", "ar", "ak", "ws", "wit", "wa", "vre", "Ka", "walker", "WR", "W", "wk", "ww", "wt", "wed", "aver", "WER", "war", "writer", "wal", "lr", "rw", "wei", "wb", "nr", "usr", "ee", "Wi", "was", "wx", "kw", "w", "nor", "r", "kr", "yer", "wu"]}}
{"code": "from math import gcd\\nfrom functools import reduce\\ndef lcm_base(x, y):\\n    return (x * y) // gcd(x, y)\\ndef lcm(*numbers):\\n    return reduce(lcm_base, numbers, 1)\\ndef evencount(n):\\n  cnt=0\\n  while n%2==0:\\n    cnt+=1\\n    n//=2\\n  return cnt\\nn,m=map(int,input().split())\\na=list(map(int,input().split()))\\nfor i in range(n):\\n  a[i]//=2\\nif all(evencount(i) == evencount(a[0]) for i in a):\\n  d=lcm(*a)\\n  print((m+d)//2//d)\\nelse:print(0)", "target": "385", "substitutes": {"x": ["input", "work", "xi", "c", "px", "ci", "xy", "pair", "data", "name", "int", "an", "t", "g", "ax", "h", "yx", "rx", "ix", "index", "ex", "xc", "u", "f", "dx", "max", "b", "X", "xx", "w", "z", "v", "l", "cross", "xs", "p"], "y": ["ey", "wy", "sy", "hy", "ya", "j", "cy", "c", "yi", "yn", "oy", "ry", "ny", "yl", "s", "Y", "ye", "yr", "dy", "ty", "ay", "ym", "ies", "py", "yt", "ys", "b", "yd", "yy", "z", " Y", "p", "vy"], "n": ["o", "cn", "k", "j", "c", "nm", " N", "nb", "all", "num", "s", "t", "mn", "na", "g", "min", "en", "nn", "line", "number", " c", "u", "N", "nt", "e", "rn", " ni", "b", "f", "ns", "pn", "sn", " count", " num", "no", "w", "z", "dn", "l", "v", "r", "nc", "ln", "p", "ne", "count"], "cnt": ["lcount", "Cnd", "CNT", " cnd", "Cnc", "lcnt", "dcnd", "lcNT", "lcrt", "cnd", "Crt", "acnt", "dcnt", "dcnc", "cnc", "acrt", "Cnt", "Count", "acnc", "lcnd", "cNT", " cnc", " count", "lcnc", "acnd", "crt", "dcNT", " cNT", "count"], "m": ["mini", "o", "wm", "mc", "k", "j", "um", "c", "om", "gm", "an", "num", "man", "mag", "g", "h", "ms", "md", "cm", "mo", "u", "e", "f", "b", "am", "mm", "pm", "z", "v", "l", "r", "M", "p", "bm", "count"], "a": ["ma", "area", "o", "at", "c", "ar", "ac", "ab", "pa", "mA", "da", "an", "s", "array", "A", "alpha", "sa", "h", "ia", "aa", "la", "u", "f", "e", "b", "am", "ca", "ad", "ai", "ae", "w", "z", "ba", "ea", "l", "aj", "v", "p", "au"], "i": ["pi", "di", "o", "iw", "k", "xi", "j", "c", "ci", "yi", "ri", "oi", "io", "ie", "int", "ind", "s", "ui", "ini", "ni", "id", "ib", "index", "ip", "si", "u", "iu", "e", "I", "ti", "f", "b", "ai", "z", "qi", "v", "l", "ii", "li", "r", "ei", "p", "zi"], "d": ["di", "o", "dom", "D", "dt", "j", "c", "db", "de", "pd", "nd", "bd", "da", "s", "t", "id", "sd", "dy", "ds", "dh", "do", "dc", "u", "e", "dd", "f", "ad", "b", "yd", "dl", "w", "z", "dm", "dn", "l", "cd", "p"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 5 + 10)\\ndef input(): return sys.stdin.readline().strip()\\n\\ndef resolve():\\n    \\n    n=int(input())\\n    L=[list(map(int,input().split())) for i in range(n)]\\n    \\n    L=sorted(L, key=lambda x: x[0])\\n    print(L[-1][0]+L[-1][1])\\n\\n\\n    \\n    \\nresolve()", "target": "266", "substitutes": {"n": ["o", "k", "x", "j", "c", " N", "nb", "num", "t", "y", "na", "en", "nn", "number", "nu", "u", "size", "len", "N", "f", "e", "b", "ns", "sn", "no", "w", "z", "l", "v", "m", "nc", "p", "ne", "count"], "L": ["PL", "LM", "D", "S", "CL", "LO", "VL", "R", "E", "LD", "LB", "LR", "Line", "NL", "B", "Lo", "List", "T", "LS", "FL", "W", "J", "Long", "RL", "list", "LI", "A", "G", "IL", "Y", "LP", "EL", "LV", "SL", "LE", "Q", " l", "BL", "LG", "LT", "I", "Li", "dL", "X", "C", "XL", "LL", "Lu", "V", "ML", "P", "K", "l", "DL", "O", "H", "M", "LA", "F", "N", "Z"], "i": ["k", "x", "xi", "j", "gi", "ci", "d", " I", " bit", " ii", "ind", " ip", "id", "y", "g", " il", "ix", "index", "ip", "bit", "u", "f", "ti", "I", "z", "l", "p"]}}
{"code": "n,m = map(int,input().split())\\nif n == 2 or m == 2:\\n  print(0)\\nelif n == 1:\\n  if m == 1:\\n    print(1)\\n  else:\\n    print(m-2)\\nelif m == 1:\\n  if n == 1:\\n    print(1)\\n  else:\\n    print(n-2)\\nelse:\\n  print((n-2)*(m-2))", "target": "238", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "d", "nm", "nb", "a", "an", "num", "s", "t", "ni", "i", "y", "mn", "na", "g", "en", "h", "network", "nn", "un", "nu", "u", "net", "f", "e", "nt", "rn", "b", "fn", "ns", "pn", "sn", "no", "w", "z", "dn", "l", "v", "gn", "r", "nc", "M", "p", "ne", "N"], "m": ["ma", "mini", "o", "mc", "k", "x", "j", "tm", "c", "fm", "gm", "d", "om", "nm", "a", "an", "s", "t", "i", "y", "mn", "machine", "g", "h", "ms", "ym", "md", "cm", "u", "em", "f", "e", "b", "am", "sm", "mm", "im", "q", "w", "z", "dm", "v", "l", "hm", "r", "M", "p", "bm", "N"]}}
{"code": "def main():\\n    a, b, m = map(int, input().split())\\n    A = list(map(int, input().split()))\\n    B = list(map(int, input().split()))\\n    ans = min(A) + min(B)\\n    for _ in range(m):\\n        x, y, c = map(int, input().split())\\n        ans = min(ans, A[x - 1] + B[y - 1] - c)\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    main()", "target": "136", "substitutes": {"a": ["ma", "aw", "ar", "ak", "ab", "ac", "int", "da", "an", "alpha", "sa", "aa", "am", "ad", "ca", "ai", "ae", "ba", "p", "au"], "b": ["o", "j", "d", "ab", "bc", "n", "rb", "i", "bs", "g", "u", "e", "f", "ad", "ba", "l", "v", "bb", "p", "bm"], "m": ["o", "wm", "mc", "k", "d", "n", "num", "an", "mr", "i", "mn", "g", "h", "ms", "md", "cm", "u", "f", "e", "mu", "am", "mi", "mm", "w", "z", "dm", "v", "l", "hm", "r", "M", "p", "bm"], "A": ["As", "U", "AR", "au", "Alpha", "CA", "BB", "IA", "At", "Array", "Y", "Az", "AM", "AD", "L", "Am", "Ab", "Ma", "HA", "AY", "AI", "BA", "SA", "AU", "An", "AP", "Ar", "AN", "AA", "X", "Ang", "C", "MA", "Na", "P", "Min", "AF", "API", "AB", "Input", "M", "AC", "N", "LA"], "B": ["EB", "D", "BS", "BF", "BM", "E", "LB", "Bi", "BB", "TB", "BE", "Y", "AD", "L", "NB", "Ab", "BA", "Blue", "VB", "BD", "RB", "OB", "BI", "AP", "BL", "GB", "Bs", "QB", "DB", "WB", "CB", "X", "FB", "C", "SB", "MB", "P", "BC", "AB", "O", "M", "F"], "ans": ["ls", "san", "aning", "anned", "ras", "nas", "ins", "ars", "ants", "vs", "amps", "ens", "an", "anc", "s", " means", "ats", "ents", "anon", "sk", "annot", "na", "os", "anas", "plan", "ms", "ds", "ana", "nan", "can", "anes", "lines", "AN", "atan", "aned", "ANS", "ann", "lan", "ns", "ane", "ends", "features", "ai", "aces", "ani", "ano", "ays", "mean", "ace", "eps", "aus", "ons", "au"], "_": [" get", " __", " times", " I", " col", " ip", " time", " no", " f", " seq", " loop", " block", " count", " arg"], "x": ["o", "wy", "k", "xi", "px", "j", "d", "xy", "col", "int", "n", "an", "i", "on", "na", "h", "ct", "ix", "ex", "u", "f", "e", "dx", "X", "xx", "w", "z", "l", "v", "r", "xs", "p"], "y": ["o", "k", "j", "cy", "ci", "d", "col", "int", "n", "year", "Y", "t", "i", "dy", "g", "min", "h", "py", "u", "f", "e", "yy", "w", "z", "l", "v", "p", "vy"], "c": ["o", "k", "cy", "d", "ac", "n", "s", "ce", "ch", "i", "cs", "g", "con", "h", "cm", "dc", "xc", "u", "size", "f", "e", "max", "ca", "C", "q", "w", "z", "v", "l", "r", "p"]}}
{"code": "import math\\n\\n\\n# def calc(n, c, d):\\n#     return n-(math.floor(n / c) +\\n#               math.floor(n / d) - math.floor(n / (c * d / math.gcd(c, d))))\\ndef calc(n, c, d):\\n    return n-(n // c +\\n              n // d - n // (c * d // math.gcd(c, d)))\\n\\n\\ndef main():\\n    a, b, c, d = map(int, input().split())\\n\\n    print(calc(b, c, d)-calc(a-1, c, d))\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "31", "substitutes": {}}
{"code": "import sys\\nfrom operator import itemgetter\\ndef main():\\n\tinputs = sys.stdin.readline\\n\tN, Q= map(int,inputs().split())\\n\tE = [None]*2*N\\n\tfor n in range(N):\\n\t\ta,b,c = map(int,inputs().split())\\n\t\tE[2*n] = (a - c, 1, c)\\n\t\tE[2*n + 1] = (b - c, -1, c)\\n\tE.sort(key=itemgetter(0))\\n\ttuple(tuple(E))\\n\tmini = 1000000001\\n\tkouho = {1000000001}\\n\tmy_add = kouho.add\\n\tmy_discard = kouho.discard\\n\tq = 0\\n\td = int(inputs())\\n\tflag = False\\n\tcont = False\\n\tfor e in E:\\n\t\twhile e[0] > d:\\n\t\t\tif cont == True:\\n\t\t\t\tprint(mini-(mini//1000000001)*1000000002)\\n\t\t\telse:\\n\t\t\t\tmini = min(kouho)\\n\t\t\t\tprint(mini-(mini//1000000001)*1000000002)\\n\t\t\tcont = True\\n\t\t\tq = q + 1\\n\t\t\tif q > Q-1:\\n\t\t\t\tflag = True\\n\t\t\t\tbreak\\n\t\t\td = int(inputs())\\n\t\tif flag == True:\\n\t\t\tbreak\\n\t\tif e[1] == 1:\\n\t\t\tmy_add(e[2])\\n\t\t\tif mini > e[2]:\\n\t\t\t\tmini = e[2]\\n\t\telif e[1] == -1:\\n\t\t\tmy_discard(e[2])\\n\t\t\tif mini == e[2]:\\n\t\t\t\tcont = False\\n\tfor t in [None]*(Q-q):\\n\t\tprint(-1)\\nmain()", "target": "338", "substitutes": {"inputs": ["pulls", "pulles", "inputlines", "outputings", "pulllines", "pullstrings", "inputches", " inputstrings", "infings", "outputlines", "inputes", "outputwords", "infstrings", "inflines", "Inputches", "Inputwords", "outputn", "outputches", " inputches", " inputwords", "inputwords", "Inputes", "outputstrings", "outputws", " inputings", "Inputlines", " inputn", "outputes", "Inputn", "Inputws", "infs", "inputings", "Inputs", "inputstrings", " inputes", "outputs", " inputlines", "inputws", " inputws", "inputn"], "N": ["U", "NA", "D", "S", "R", "NS", "NC", "B", "Ns", "T", "W", "J", "Y", "A", "L", "G", "Num", "Size", " Ne", "No", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "Q": ["U", "D", "S", "MQ", "R", "IQ", "B", "T", "W", "J", "QU", "qs", "Y", "A", "G", "L", "I", "X", "C", "V", "w", "P", "Qu", "K", "O", "Query", "H", "M", "F", "dq", "Z"], "E": ["U", "SE", "OE", "D", "EO", "element", "S", "energy", "Entry", "Do", "NE", "Element", "B", "EF", "T", "Ge", "TE", "W", "Es", "Y", "A", "L", "G", "GE", "Ev", "EU", "EA", "UE", "El", "ES", "Energy", "ME", "Edge", "ee", "I", "X", "C", "IE", "PE", "V", "ae", "P", "EC", "You", "Entity", "O", "EE", "H", "M", "F", "CE"], "n": ["o", "part", "cn", "k", "x", "_", "j", "nb", "all", "num", "s", "ni", "i", "y", "na", "g", "en", "h", "network", "nn", "nu", "u", "net", "nt", "f", "ns", "C", "sn", "z", "l", "v", "m", "nc", "p", "conn"], "a": ["o", "k", "x", "ak", "ac", "ab", "da", "s", "an", "A", "fa", "i", "y", "g", "sa", "aa", "u", "f", "ad", "ca", "ai", "ae", "w", "ba", "l", "m", "p", " A"], "b": ["o", "k", "x", "ab", "B", "bc", "s", "rb", "A", "bi", "i", "bur", "y", "bs", "g", "fb", "h", "aa", "u", "lb", "f", "ca", "sb", "ba", "l", "v", "r", "bb", "bf", "p"], "c": ["cn", "k", "x", "cy", "ci", "col", "ac", "s", "ce", "ch", "i", "cs", "y", "ec", "g", "con", "h", "cu", "u", "size", "f", "one", "C", "w", "z", "l", "lc", "r", "m", "nc", "cf", "p", "count"], "mini": ["lim", "pi", "di", "part", "mc", "element", "j", "ci", "cycle", "nm", "scale", "phi", "sum", "bug", "minute", "little", "int", "trial", "meta", "ini", "margin", "ni", "bi", "i", "ignore", "fine", "mag", "key", "uni", "min", "nice", "pretty", "magic", "charge", "big", "beta", "py", "fake", "micro", "si", "Mini", "ami", "mobile", "size", "mega", "mi", "init", "example", "qi", "chi", "ii", "fee", "m", "spin", "li", "mid", "small", "temp", "money"], "kouho": ["kougo", "Koubo", "koupmo", "kueho", "kkupo", "Koupo", "skkuflo", "skkugo", "skouflo", "kooho", "kaumo", "kouhea", "kauwo", "Kouho", "kaufo", " kauhea", " kouwo", "krugo", "koumo", "kkuho", " khouwo", "kauho", "skkuho", "skoupo", "kouflo", " koupo", "kuepo", " kouhea", "Kauho", "Kaubo", "Kaupo", "khouwo", "krupo", "kaubo", " khouhea", "koupo", " koumo", "koobo", "skouho", "koofo", "kouphea", " khoupo", "Koufo", "koupgo", "koufo", "kruflo", "kauhea", "kkugo", "skkupo", " kaumo", "kkuflo", "kaupo", "khoupo", "khoumo", " kauho", "koupflo", "kuebo", "khouho", "skougo", "kouppo", "khouhea", "koupho", "koopo", "kouwo", "kuefo", "koubo", "kruho", " khouho", "Kaufo", "koupwo"], "my_add": ["my_plus", " my_plus", "my_push", " my_adder", "my_adder", " my_push"], "my_discard": ["my_Discment", "my__recard", "my_recard", "my_Discore", "my_encand", "my_encment", "my_discand", "my_discore", "my__discand", "my_Discand", "my__discore", "my_recore", "my__recand", "my_encore", "my_discment", "my__recment", "my_encard", "my_Discards", "my_recards", "my_Discard", "my__discard", "my__recore", "my_recment", "my__discment", "my_recand", "my_discards"], "q": ["qt", "k", "x", "j", "question", "int", "qs", "quant", "i", "id", "y", "iq", "time", "quality", "qa", "force", "check", "h", "g", "query", "ix", "quad", "eq", "sq", "u", "f", "qq", "limit", "w", "z", "qi", "v", "m", "p", "req", "qu", "dq", "count"], "d": ["di", "dom", "D", "dt", "rd", "x", "done", "j", "de", "pd", "cmd", "nd", "da", "debug", "s", "i", "sd", "dy", "min", "fd", "dim", "ds", "do", "dh", "md", "day", "dc", "f", "dd", "ed", "ad", "xd", "vd", " D", "z", "dm", "dn", "l", "cd", "m", "dat", "p", "ld"], "flag": ["use", "log", "type", "part", "err", "close", "feature", "bug", "lag", "const", "int", "ind", "flags", "fun", "debug", "reg", "ignore", "test", "id", "sort", "key", "leaf", "check", "force", "cond", "nice", "live", "ret", "ct", "bad", "line", "bit", "len", "play", "f", "code", "init", "flat", "sign", "cat", "wait", "spin", "comment", "Flag", "count"], "cont": ["core", "part", "ext", "compl", "ci", "current", "feature", "left", "col", "Cont", "const", "coll", "int", "ind", "cc", "quit", "config", "ont", "ignore", "test", "circ", "keep", "inner", "contract", "cond", "con", "cor", "cell", "ct", "ctr", "cm", "contin", "CONT", "follow", "nt", "sect", "code", "match", "inf", "feat", "content", "counter", "expl", "init", "lc", "sign", "misc", "conf", "text", "nc", "count", "card"], "e": ["note", "el", "ze", "oe", "o", "eb", "element", "le", "x", "ve", "j", "you", "er", "event", "ie", "ize", "ge", "ise", "s", "ce", "enter", "i", "ec", "y", "fe", "g", "en", "h", "we", "change", "error", "me", "u", "ele", "ee", "ed", "f", "end", "code", "je", "one", "edge", "equ", "ime", "ev", "ae", "be", "z", "p", "example", "ea", "v", "l", "te", "m", "r", "ade", "se", "he", "ei", "eve", "pe", "ice", "ne", "see"], "t": ["it", "out", "tr", "ut", "mult", "T", "int", "ot", "ont", "i", "test", "g", "let", "ct", "iot", " T", "f", "nt", "opt", "w", "z", "te", "p"]}}
{"code": "import sys\\n\\ndef input(): return sys.stdin.readline().strip()\\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\\ndef ceil(x, y=1): return int(-(-x // y))\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\\ndef Yes(): print('Yes')\\ndef No(): print('No')\\ndef YES(): print('YES')\\ndef NO(): print('NO')\\nsys.setrecursionlimit(10 ** 9)\\nINF = 10 ** 19\\nMOD = 10 ** 9 + 7\\n\\nN = INT()\\nA = LIST()\\n\\nif N == 0:\\n    if A[0] == 1:\\n        print(1)\\n    else:\\n        print(-1)\\n    exit()\\n\\ncond1 = [0] * (N+1)\\ncond1[N] = A[N]\\nfor i in range(N-1, -1, -1):\\n    cond1[i] = cond1[i+1] + A[i]\\n\\nif min(cond1) <= 0:\\n    print(-1)\\n    exit()\\n\\ncond2 = [0] * (N+1)\\ncond2[0] = 1\\nfor i in range(1, N+1):\\n    cond2[i] = min(cond1[i], (cond2[i-1]-A[i-1]) * 2)\\n\\nif min(cond2) <= 0:\\n    print(-1)\\n    exit()\\n\\nif cond2[N] < A[N]:\\n    print(-1)\\n    exit()\\n\\nans = sum(cond2)\\nprint(ans)\\n", "target": "625", "substitutes": {"a": ["o", "ar", "ab", "ac", "art", "af", "n", "da", "an", "s", "t", "alpha", "g", "sa", "aa", "u", "f", "ad", "ca", "am", "es", "ai", "ae", "w", "asa", "ba", "l", "v", "m", "r", "p"], "b": ["o", "eb", "db", "cb", "ab", "ac", "B", "bc", "n", "s", "an", "t", "bi", "bs", "g", "sa", "fb", "h", "ib", "wb", "br", "lb", "u", "f", "ad", "sb", "w", "be", "ba", "l", "v", "m", "bb", "r", "bf", "p"], "c": ["o", "cn", "k", "cy", "ci", "col", "ac", "ab", "n", "s", "cc", "ce", "t", "ch", "an", "cs", "g", "con", "h", "ct", "cm", "dc", "u", "f", "ca", "C", "w", "z", "cr", "l", "v", "cd", "lc", "m", "r", "cf", "p"], "i": ["ik", "pi", "it", "ji", "o", "di", "iw", "mini", "uri", "xi", "gi", "anti", "ci", "slice", "yi", "oi", " I", "phi", "io", "ie", "ori", "int", "ind", "n", "J", "ui", "ini", "Ni", "ni", "bi", "id", "iq", "uni", "ir", "ij", "ib", "ix", "index", "ip", "multi", "si", "u", "iu", "f", "I", "ti", "mi", "ki", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "ei", "p", "zi"], "d": ["df", "di", "o", "D", "dt", "k", "db", "data", "du", "bd", "n", "da", "s", "t", "id", "dy", "g", "h", "ds", "dc", "dp", "u", "f", "dd", "dx", "ad", "w", "z", "l", "v", "cd", "m", "p"], "j": ["kj", "pi", "o", "ji", "k", "ci", "jc", "ie", "oj", "n", "ind", "J", "g", "ij", "bj", "jo", "u", "ja", "f", "adj", "jj", "z", "v", "jp", "l", "jam", "r", "li", "m", "aj", "p", "uj"], "e": ["el", "o", "oe", "eb", "E", "n", "ce", "ec", "g", "en", "h", "u", "f", "ee", "ed", "ad", "end", "ev", "q", "ae", "w", "z", "l", "v", "ea", "m", "se", "p", "ne"], "x": ["ey", "wy", "sy", "xi", "px", "cy", "xy", "int", "n", "dy", "width", "g", "ax", "h", "ix", "ex", "u", "f", "dx", "X", "xx", "hi", "w", "z", "l", "v", "m", "xs", "r", "p"], "y": ["wy", "ya", "cy", "yi", "xy", "oy", "ry", "ny", "yl", "Y", "ye", "dy", "ym", "ix", "py", "yt", "f", "ys", "xx", "yd", "yy", "w", "z", "m", "ady", "p", "vy"], "N": ["ND", "U", "Node", "NA", "D", "S", " E", " L", "CN", "GN", " NI", "R", "NS", "E", "NE", "NC", "NL", " I", "B", "Ns", "T", "n", "J", "W", " O", "num", "Y", " C", "L", "Ni", "G", "Num", "Len", "Wh", "NB", "NT", "NM", " n", "Size", "NN", " Z", "No", "MN", "Q", " M", "IO", "I", "X", "NO", "C", "Na", "Ne", "NR", "NG", " D", "V", "P", "K", " Y", "ii", " P", "O", "H", "M", "IX", "F", "Z"], "INF": ["CONFF", " INFF", "INFF", "INI", " INI", "inF", "CONF", " INFIG", "CONFIG", "inFF", "INFIG", "CONI", "inFIG", "inI"], "MOD": ["U", "MAG", "ARM", "R", " U", "XX", "mod", " C", "G", "SIZE", "MAX", " Z", "MS", "AP", " M", "IT", "MI", " Mod", "MA", "Mod", "NUM", "MIN", "P", "ALL", " P", "M", " MAX", "Z"], "A": ["AR", "As", "U", "NA", "ACC", "D", "S", "ANC", "E", "Alpha", "B", "CA", "All", "T", "PA", "W", "mA", "IA", "At", "Array", "Y", "AD", "AM", "L", "AL", "AS", "HA", "AY", "BA", "GA", "SA", "AU", "EA", "TA", "AP", "Q", "Ha", "I", "AA", "X", "C", "MA", "ICA", "V", "P", "API", "AF", "AC", "H", "M", "F", "AW", "LA"], "cond1": ["critone", "const0", "constup", "Cond3", "cond3", "condition2", " cond81", " cond0", "comp2", "conditionOne", "cond81", " condN", " cond01", " cond4", "Cond1", "condition81", " condOne", "critN", "condone", "cond01", "compOne", "Cond2", "posone", "pos1", "critup", "critOne", "Condone", "crit1", "CondOne", "comp3", "fact2", "posOne", "condition1", "cond0", "conditionone", "crit0", "comp1", "Cond4", " condone", "fact4", "const1", "condN", "condition3", "fact1", "condOne", "Cond01", " condup", "posN", "crit81", "fact01", "constOne", "condup", "cond4"], "cond2": ["consecond", "act4", "condition5", "conditionTwo", "comp4", "resp2", " condTwo", "crit2", "con2", "condition2", "cond02", " condSecond", "conditionSecond", "comp2", "condall", "resp4", "cond5", " cond4", "condition4", "posTwo", "Cond1", "respTwo", "con4", "compSecond", "const2", "constsecond", "pos2", "conditionall", "Cond2", "pos1", "actTwo", "constTwo", "Condall", " cond02", "const5", "condSecond", "condition1", "critTwo", "pos02", "condsecond", " condall", "crit4", "act2", "Cond02", "resp1", "Cond4", "conditionsecond", "constSecond", "CondTwo", "conTwo", "crit5", "condTwo", "const4", "actSecond", "cond4"], "ans": ["offs", "Ann", "ANN", "san", "ass", "ras", "nas", "ins", "ars", "ants", "aux", "an", "anc", "man", "actions", "anon", "annot", "na", "ant", "anas", "act", "ks", "ana", "An", "can", "cons", "AN", "cas", "aned", "leans", "ANS", "lan", "ann", "ns", "ane", "scan", "lang", "aus", "ons"]}}
{"code": "import re\\n\\nstr = input()\\n\\nm = re.match(\"^YAKI\",str)\\n\\nif m:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "27", "substitutes": {"str": ["rs", "string", "err", "input", "tr", "wr", "x", "doc", "er", "sp", "exp", "data", "inst", "ss", "sl", "int", "s", "t", "arr", "inner", "iter", "dr", "source", "pr", "line", "st", "br", "Str", "spec", "e", "hr", "obj", "stri", "w", "STR", "txt", "r", "fr", "text", "kr", "sr"], "m": ["o", "mc", "k", "j", "um", "c", "gm", "d", "om", "rm", "mod", "n", "an", "t", "i", "y", "mn", "g", "ms", "md", "cm", "mo", "mp", "em", "mt", "f", "e", "b", "am", "sm", "mm", "im", "pm", "dm", "l", "v", "hm", "r", "M", "p", "bm"]}}
{"code": "L=list(map(int,input().split()))\\nL=sorted(L)\\nA=[1,4,7,9]\\nif A==L:\\n\tprint(\"YES\")\\nelse:\\n\tprint(\"NO\")", "target": "307", "substitutes": {"L": ["U", "LM", "D", "S", "CL", "LU", "LO", "Z", "R", "E", "LD", "LB", "NL", "B", "List", "T", "W", "Long", "Y", "list", "G", "IL", "LI", "LP", "EL", "SL", "LE", "Q", "LT", "I", "Li", "X", "C", "XL", "LL", "Lu", "V", "P", "K", "l", "DL", "O", "H", "M", "F", "N", "LA"], "A": ["As", "U", "D", "S", "E", "Alpha", "a", "B", "CA", "All", "T", "PA", "W", "Si", "mA", "IA", "Array", "Y", "array", "G", "alpha", "An", "Ar", "I", "AA", "C", "Lu", "V", "P", "K", "AF", "O", "AC", "M", "F", "N", "LA"]}}
{"code": "a,b,c,k = map(int,input().split())\\nsum = 0\\nif k%2==0:\\n  sum = a-b\\nelse:\\n  sum = b-a\\nif abs(sum)>=10**18:\\n  print(\"Unfair\")\\nelse:\\n  print(sum)", "target": "669", "substitutes": {"a": ["auto", "average", "x", "aw", "ar", "ab", "ac", "int", "n", "abs", "da", "an", "A", "i", "y", "alpha", "sa", "aa", "u", "va", "e", "f", "ad", "ca", "am", "ai", "ae", "w", "asa", "ba", "l", "aj", "m", "bb", "p", "au"], "b": ["eb", "x", "j", "d", "cb", "ab", "B", "bc", "n", "abs", "rb", "A", "i", "y", "bs", "g", "fb", "h", "aa", "u", "e", "f", "ad", "sb", "w", "ba", "l", "v", "bb", "m", "r", "bf", "p"], "c": ["mc", "x", "cy", "ci", "d", "cb", "col", "ac", "uc", "n", "cc", "ce", "cs", "y", "h", "ct", "cm", "dc", "f", "e", "ad", "ca", "C", "z", "cr", "lc", "m", "p"], "k": ["o", "kn", "x", "kk", "j", "d", "ac", "n", "s", "cc", "ch", "i", "y", "alpha", "sk", "g", "ks", "dk", "u", "size", "f", "max", "e", "ad", "q", "w", "kw", "z", "K", "v", "m", "p", "kr", "km"], "sum": ["use", "part", "average", "fat", "um", "ass", "account", "scale", "ac", "ss", "diff", "n", "an", "num", "cal", "weight", "result", "alpha", "cost", "total", "sk", "sort", "sa", "loss", "acc", "index", "beta", "bin", "error", "gram", "gross", "si", "u", "size", "parse", "mu", "f", "max", "am", "match", "cum", "us", "mass", "sh", "add", "mean", "sign", "Sum", "fee", "miss", "comment", "sam", "p", "rank", "gam", "count"]}}
{"code": "import sys\\n\\n\\ninint = lambda: int(sys.stdin.readline())\\ninintm = lambda: map(int, sys.stdin.readline().split())\\ninintl = lambda: list(inintm())\\ninstr = lambda: sys.stdin.readline()\\ninstrm = lambda: map(str, sys.stdin.readline().split())\\ninstrl = lambda: list(instrm())\\n\\nn = inint()\\nD = inintl()\\n\\nD.sort()\\n\\nprint(D[n//2] - D[n//2-1])", "target": "415", "substitutes": {"inint": ["innt", "incint", "INstruct", "Inlist", "incval", "inclist", "inlist", "incints", "inistr", "incnt", "iniint", "Inint", "INnt", "inval", "Instruct", " inints", "INlist", "instruct", "incstruct", " inval", "inints", "incstr", "inival", "INint", "Innt", "iniints"], "inintm": ["inIntm", "inntms", "inntm", "inortb", "insintf", "insintm", "inortm", "innortn", "inIntn", "inintf", "inindf", "innortm", "inindl", "insstrm", "inIntb", "inortn", "instrb", "instrf", "inintms", "insstrms", "insstrl", "innortl", "insintms", "inindms", "innintm", "inntl", "inintn", "innintb", "instrn", "inortl", "innintn", "innortb", "instrms", "inindm", "insstrf", "inIntl", "insintl", "innintl", "inintb", "inntf"], "inintl": ["instrline", "inintv", "infstrl", "inntm", "instrv", "insintm", "inintsp", "insintline", "inintls", "inntls", "insintsm", "inintsline", "instrlc", "inintsl", "inlistls", "instrp", "inlistlc", "infintls", "inintp", "insintsp", "inintsm", "inntv", "inintlc", "infstrv", "insintsl", "infintl", "inlistv", "inntl", "infintlc", "instrls", "inlistl", "inntlc", "infintv", "insintsline", "inntp", "inntline", "insintp", "inintline", "infstrlc", "insintl", "infstrls"], "instr": ["INStr", "infStr", "inStr", "infbreak", "INstr", " inStr", "inext", "INext", "inbreak", "infstr", "infext", "INbreak", " inext", " inbreak"], "instrm": ["intrms", "incbrum", "instm", "intrnm", "inbrm", " invertms", " invertsm", "incstrm", "inbrl", "intrm", "incbrl", "invertms", "instrsm", "incstrum", " invertm", "incbrm", "instrum", " invertnm", "intrl", "incstrl", "inctrms", "invertm", "intrsm", "instrr", "instrnm", "inctrsm", "inbrr", "invertsm", "intrr", " instrms", "invertnm", "incstrr", " instrsm", "instl", "incbrr", "inbrum", "inctrm", "instrms", "instum", "inctrnm", " instrnm", "intrum"], "instrl": ["inintr", "instrL", "inintL", "incstrm", "incintm", "intrm", "incintL", "instringr", "intrl", "incstrl", "instrr", "instringL", "incstrL", "instringm", "intrr", "incstrr", "incintl", "incintr", "intrL", "instringl"], "n": ["o", "k", "x", "j", "c", "d", " N", "nb", "a", "num", "s", "t", "i", "y", "count", "g", "network", "nu", "u", "len", "e", "f", "nt", "b", "ns", "w", "z", "l", "v", "m", "r", "p", "N"], "D": ["U", "DT", "S", "R", "d", "E", "LD", "Do", "Ds", "Both", "B", "T", "DO", "W", "Dim", "Y", "JD", "DA", "L", "G", "A", "DP", "Diff", "DD", "DM", "DS", "MD", "Q", "DI", "Delta", "DB", "Python", "X", "C", "DF", "DC", "V", "P", "DL", "O", "H", "M", "F", "DE", "N", "Z"]}}
{"code": "import math\\nx = int(input())\\nprint(360 // math.gcd(360, x))", "target": "11", "substitutes": {"x": ["xp", "xi", "hex", "c", " cx", "ctx", "xy", "int", "n", " dx", "t", "id", "y", "tx", "python", "xxx", "xa", "ax", "h", "xt", "xxxx", "xe", "rx", "ix", "index", " xp", "ex", "xc", "f", "b", "X", "xx", "xf", "www", "w", "z", "v", "m", "xs", "p", "temp"]}}
{"code": "import math\\n#import numpy as np\\nimport queue\\nfrom collections import deque,defaultdict\\nimport heapq as hpq\\nfrom sys import stdin,setrecursionlimit\\n#from scipy.sparse.csgraph import dijkstra\\n#from scipy.sparse import csr_matrix\\nipt = stdin.readline\\nsetrecursionlimit(10**7)\\n\\ndef main():\\n    n = int(ipt())\\n    ans = \"\"\\n    if n == 0:\\n        print(0)\\n        exit()\\n    while n != 0:\\n        if n&1:\\n            ans += \"1\"\\n            n = -(n-1)//2\\n        else:\\n            ans += \"0\"\\n            n = -(n//2)\\n    print(ans[::-1])\\n    return\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "24", "substitutes": {}}
{"code": "from collections import Counter\\nfrom itertools import accumulate\\nN, M, *A = map(int, open(0).read().split())\\nB = [b%M for b in accumulate(A)]\\nC = Counter(B)\\nans = C[0]\\nans += sum(C[k]*(C[k]-1)//2 for k in C.keys())\\nprint(ans)", "target": "23", "substitutes": {"N": ["D", "R", "Ns", "T", "n", "Ni", "L", "Num", "NB", " n", "Size", "NN", "I", "Number", "Na", "NR", "RN", "V", "P", "K", "H", "F"], "M": ["U", "D", "S", "R", "E", "T", "W", "n", "J", "Y", "L", "G", "DM", "MN", "Ms", "Q", "I", "V", "MB", "P", "MM", "K", "m", "O", "H", "Mi", "F"], "A": ["As", "U", "Ca", "ACC", "D", "S", "Alpha", "a", "CA", "T", "mA", "This", "Y", "AM", "G", "Ab", "GA", "AP", "Ar", "I", "AA", "Ang", "AST", "P", "API", "AF", "AB", "AC", "F", "LA"], "B": ["U", "EB", "D", "S", "BS", "BM", "BF", "E", "BB", "T", "UB", "Y", "L", "G", "Ab", "NB", "BA", "OB", "GB", "Bs", "DB", "QB", "WB", "I", "MB", "P", "K", "BC", "AB", "O", "F"], "b": ["eb", "mb", "x", "c", "db", "d", "cb", "nb", "ab", "a", "mult", "bc", "n", "s", "rb", "bi", "i", "bas", "id", "verb", "bs", "g", "ib", "bl", "beta", "bin", "number", "Bs", "comb", "br", "e", "f", "sb", "l", "v", "bid", "m", "bb", "r", "p", "bp"], "C": ["U", "CI", "D", "S", "CD", "c", "R", "E", "CT", "NC", "CA", "T", "Y", "CU", "L", "G", "JC", "CF", " c", "CS", "X", "Sc", "DC", "V", "Cache", "P", "CC", "Cs", "K", "CR", "CP", "BC", "VC", "EC", "O", "Cu", "AC", "KC", "F", "H", "CM", "CE", "CL"], "ans": ["ls", "cus", "Ann", "aning", "nas", "ins", "reads", "ars", "ants", "amps", "ens", "an", "s", "ops", "anc", " means", "outs", "cs", "ents", "CNN", "na", "os", "anas", "ms", "ds", "ks", "nan", "ana", "span", "ids", "can", "anes", "AN", "aned", "leans", "ANS", "ann", "lan", "ns", "scan", "errors", "features", "ays", "mean", "eps", "ln", "aus", "ons"], "k": ["o", "element", "x", "kk", "j", "c", "d", "col", "a", "ac", " K", "int", "n", "all", "s", "i", "id", "y", "key", "keep", "sk", "g", "unk", "ok", "ks", "kid", "keys", "acc", "u", "f", "e", "q", "w", "kw", "K", "v", "m", "p", "block", "count"]}}
{"code": "from sys import stdin, setrecursionlimit\\ninput = stdin.buffer.readline\\nsetrecursionlimit(10 ** 7)\\n\\nfrom heapq import heappush, heappop\\nfrom bisect import bisect_left, bisect_right\\nfrom collections import deque, defaultdict\\nfrom itertools import combinations, permutations, combinations_with_replacement\\nfrom itertools import accumulate\\nfrom math import ceil, sqrt, pi\\n\\nMOD = 10 ** 9 + 7\\nINF = 10 ** 18\\n\\nN, M = map(int, input().split())\\n\\narr = []\\nfor i in range(M):\\n    arr.append([1, i + 2])\\narr = arr[::-1]\\n#print(arr)\\n\\nmax_arr = -1\\nplus = 0\\nfor a, b in arr[::2]:\\n    print(a + plus, b + plus)\\n    max_arr = max(max_arr, b + plus)\\n    plus += 1\\n#print(max_arr)\\n\\nplus = 0\\nfor a, b in arr[1::2]:\\n    print(max_arr + a + plus, max_arr + b + plus)\\n    plus += 1", "target": "761", "substitutes": {"input": ["out", "feed", "c", "param", " I", "output", "raw", "data", " Input", "expression", "int", "print", "pull", "ll", "list", "mmm", "config", "alpha", "get", "url", "forward", "request", "source", "bin", "model", " inputs", "help", "reader", "insert", "buffer", "inf", "dict", "ref", "accept", "conf", "Input", "exec", "temp", "rc", "call"], "MOD": ["U", "JO", "Max", "Py", "UG", "EXT", "FD", "B", "mod", "W", "J", "EW", "FE", "RE", "Module", " mod", "MAX", "ix", "Mods", "Str", "Mod", "ML", "P", "RT", "Fun", "Rad", "RM"], "INF": ["ENN", " INPF", "Inf", "INN", "ENF", "InN", "ENPF", "ENf", "InF", "INPF", " INf", "INf", "InPF", " INN"], "N": ["D", "S", "R", "E", "B", "T", "n", "Y", "A", "G", "L", "NT", "C", "NR", "V", "P", "K", "H", "F", "Z"], "M": ["U", "LM", "D", "S", "MQ", "R", "E", "FM", "B", "T", "n", "Y", "L", "G", "MU", "DM", "NM", "MS", "MODE", "MN", "Q", "I", "X", "MI", "C", "MA", "V", "P", "MM", "K", "MT", "m", "O", "H", "Mi", "F", "CM", "IM", "MF"], "arr": ["el", "part", "ext", "par", "err", "x", "our", "ar", "img", "ab", "data", "ARR", "coll", "app", "diff", "int", "Array", "list", "array", "cache", "plot", "adv", "test", "bar", "na", "map", "abc", "iter", "acc", "pr", "rep", "batch", "adr", "aa", "Ar", "br", "stack", "u", "mat", "rr", "ann", "adj", "obj", "arc", "gr", "dict", "attr", "air", "fr", "r", "str", "order", "dat", "p", "Arch", "enc"], "i": ["pi", "k", "x", "xi", "j", "gi", "c", "gu", "d", "slice", "phi", "ie", "start", "ind", "n", "bi", "id", "ib", "ix", "index", "ig", "ip", "bit", "si", "il", "u", "iu", "e", "ti", "I", "f", "b", "im", "ai", "z", "v", "l", "ii", "li", "m", "r", "p", "vi", "zi"]}}
{"code": "N = int(input())\\nc = list(input())\\n\\n\\nl1 = list()\\nfor i in range(N):\\n    if c[i] == 'R':\\n        l1.append(i)\\n        \\n\\n\\nnum = 0\\n\\ndef swap(i, j):\\n    a = c[i]\\n    c[i] = c[j]\\n    c[j] = a\\n    return\\n\\nif len(l1) >= 1:\\n    for i in range(N):\\n        if i > l1[-1]:\\n            break\\n        if c[i] == 'W':\\n             swap(i, l1.pop(-1))\\n             num += 1\\n        if len(l1) == 0:\\n            break\\nprint(num)\\n", "target": "714", "substitutes": {"N": ["D", "S", "R", "NS", "NC", "B", "Ns", "T", "n", "W", "J", "Y", "Ni", "L", "G", "Num", "CNN", "NT", " n", "Size", "Q", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "c": ["o", "loc", "cr", "mc", "k", "x", "ci", "d", "col", "ac", "n", "cc", "s", "cache", "ce", "ch", "t", "list", "cs", "ec", "ctrl", "y", "g", "h", "cp", "ct", "dc", "cu", "u", "f", "e", "b", "C", "w", "z", "chain", "l", "v", "lc", "pc", "m", "r", "sc", "nc", "ic", "p", "cl", "count", "enc"], "l1": [" l2", "L3", "l3", "lc0", "Ln", "li2", "Lone", "LOne", "p8", "li91", "l100", "p100", "lone", "l91", " l100", " lone", " l0", "li11", "lOne", "p0", "L2", "ln2", "ll1", " ln", "llOne", "li3", "dl1", "lnn", "lc1", " l8", "lcOne", "li0", "l11", "l0", " l11", "L1", "dl100", "lin", " l91", "l2", "l8", "ln1", " lOne", "L91", "L0", "lnOne", "llone", "p2", "li1", "p11", "dl2", " l3", "dl8", "lc2", "lcone", "ln", "p1", "ll2"], "i": ["mini", "pi", "di", "o", "ji", "uri", "k", "x", "xi", "gi", "ci", "d", "phi", "ie", "start", "int", "ind", "n", "s", "ui", "ini", "t", "ni", "bi", "id", "y", "h", "ij", "index", "si", "u", "iu", "e", "I", "ti", "f", "b", "ai", "z", "p", "qi", "chi", "l", "v", "ii", "li", "m", "r", "ei", "io", "zi"], "num": ["dom", "common", "success", "su", "done", "um", "off", "np", "nm", "col", "sum", "nb", "bug", "pos", "n", "ui", "inc", "ni", "id", "Num", "result", "loop", "split", "uni", "coord", "na", "div", "con", "dim", "iter", "die", "nn", "index", "number", "nu", "umi", "thread", "multi", "nom", "u", "len", "mu", "max", "b", "code", "NUM", "no", "counter", "spin", "sim", "count"], "j": ["o", "ji", "k", "x", "d", "n", "J", "y", "g", "ij", "index", "jo", "si", "u", "ja", "f", "e", "je", "b", "jj", "q", "w", "z", "v", "l", "jp", "aj", "r", "m", "li", "ii", "p"], "a": ["area", "auto", "o", "at", "sta", "aw", "ar", "ac", "ab", "aux", "an", "A", "y", "alpha", "sa", "ana", "ia", "aa", "u", "va", "f", "b", "ad", "ca", "ga", "ai", "w", "ae", "aaa", "ba", "z", "ea", "aj", "r", "p", "au"]}}
{"code": "def resolve():\\n    n = int(input())\\n    x = [input().split() for i in range(n)]\\n    count = 0\\n    for i in x:\\n        if i[1] == 'BTC':\\n            count += float(i[0]) * 380000\\n        else:\\n            count += int(i[0])\\n    print(count)\\nresolve()", "target": "270", "substitutes": {"n": ["o", "k", "j", "c", "d", "nb", "num", "t", "ni", "y", "nn", "number", "u", "size", "len", "f", "e", "b", "ns", "no", "z", "l", "m", "nc", "p", "ne", "N"], "x": ["xp", "xi", "work", "c", "d", "ctx", "xy", "int", "ww", "s", "t", "y", "tx", "sw", "xxx", "xa", "val", "xt", "xe", "rx", "ix", "index", "number", "ex", "xc", "u", "f", "e", "dx", "X", "xx", "code", "xf", "xes", "z", "v", "cross", "m", "xs", "p", "pe"], "i": ["pi", "di", "o", "xi", "j", "input", "gi", "c", "ci", "d", "a", "io", "int", "ind", "s", "ui", "ini", "t", "id", "iq", "y", "split", "index", "ip", "multi", "si", "u", "iu", "e", "ti", "I", "f", "b", "code", "hi", "ai", "z", "p", "v", "l", "ii", "li", "m", "r", "ei"], "count": ["core", "type", "k", "work", "c", "cycle", "catch", "sum", "col", "data", "start", "carry", "ind", "num", "list", "cache", "depth", "id", "y", "weight", "key", "total", "time", "check", "val", "offset", "index", "error", "number", "last", "size", "len", "f", "Count", "max", "b", "code", "base", "child", "counter", "z", "add", "l", "length", "p", "call"]}}
{"code": "a = input()\\nb = input()\\nans = '123'.replace(a,'').replace(b,'')\\nprint(ans)", "target": "752", "substitutes": {"a": ["area", "x", "c", "aw", "d", "ab", "ac", "pa", "n", "da", "an", "s", "A", "fa", "alpha", "na", "sa", "ah", "aa", "la", "va", "f", "e", "ad", "ca", "am", "ai", "ae", "asa", "ba", "aaa", "aj", "p", "au"], "b": ["eb", "k", "mb", "abb", "x", "c", "db", "d", "cb", "nb", "ab", "B", "hub", "bis", "pa", "xb", "s", "rb", "bi", "y", "abe", "bs", "bar", "fb", "abc", "bad", "bin", "aa", "wb", "e", "f", "base", "aba", "sb", "ae", "be", "ba", "bb"], "ans": ["cus", "anan", "aning", "anned", "nas", "ras", "ars", "ants", "amps", "an", "ents", "anon", "annot", "na", "anas", "plan", "ana", "An", "can", "AN", "cas", "aned", "ania", "atan", "ANS", "leans", "anne", "lan", "ann", "ane", "lang", "anna", "chan", "ani", "ano", "ays", "sam", "aus"]}}
{"code": "s1 = input()\\n\\nprint(chr(ord(s1) + 1))", "target": "501", "substitutes": {"s1": ["sone", "s2", "S1", " s2", "sesfirst", "ses1", "Sone", " sfirst", "sfirst", "aOne", "SOne", " sone", "a1", "aone", " sOne", "ses2", "sOne", "S2", "Sfirst"]}}
{"code": "s = input()\\n\\nans = 0\\nind = 0\\nwhile ind < len(s)-1:\\n    if s[ind:ind+2] in (\"01\", \"10\"):\\n        s = s[:ind]+s[ind+2:]\\n        ans += 1\\n        ind = max(0, ind-1)\\n\\n    else:\\n        ind += 1\\nprint(ans*2)\\n", "target": "40", "substitutes": {"s": ["states", "services", "parts", "ls", "o", "fs", "string", "S", "sync", "input", "c", "events", "d", "ins", "ses", "a", "data", "ss", "n", "abs", "args", "qs", "ads", "t", "strings", "i", "y", "g", "os", "ms", "ts", "ds", "ips", "sample", "gs", "south", "si", "u", "letters", "f", "e", "ys", "b", "ps", "ns", "ments", "es", "tests", "sb", "features", "w", "sv", "l", "v", "sg", "m", "r", "xs", "words", "p", "series"], "ans": ["ls", "Ann", "eds", "atts", "aning", "ins", "reads", "a", "ars", "ants", "ss", "nd", "int", "n", "args", "an", "anc", "man", " means", "cs", "ians", "ents", "sk", "na", "os", "ds", "sex", "ks", "inn", "ids", "span", "ln", "cas", "aned", "ANS", "ann", "ad", "lan", "ns", "shape", "ands", "ends", "ani", "ai", "mean", "ones", "ines", "eps", "ons"], "ind": ["Ind", "loc", "x", "j", "ded", "sp", "slice", "d", "ci", "append", "find", "old", "col", "ins", "inst", "start", "cod", "art", "pos", "nd", "int", "n", "mind", "eight", "anch", "inc", "ini", "ni", "i", "id", "eff", "sd", "inner", "sk", "cand", "keep", "min", "ign", "vert", "ne", "inn", "nn", "dr", "index", "md", "ord", "ix", "ident", "len", "pp", "nt", "pre", "ann", "end", "ad", "adj", "IND", "ani", "init", "pt", "z", "pop", "add", "sign", "ii", "length", "ld", "addr", "ill", "count"]}}
{"code": "s = input()\\ndeff = 1\\nfor i in range(len(s)):\\n  if (i % 2 == 0):\\n    if s[i] == 'L':\\n      deff = 0\\n  else:\\n    if s[i] == 'R':\\n      deff = 0\\nif deff == 1:\\n  print('Yes')\\nelse:\\n  print('No')", "target": "686", "substitutes": {"s": ["states", "services", "ls", "parts", "string", "S", "sync", "ssl", "input", "c", "events", "d", "ws", "ses", "ins", "a", "steps", "ss", "submit", "n", "abs", "args", "qs", "ads", "ows", "t", "strings", "cs", "g", "os", "comments", "blocks", "cells", "ts", "ds", "ips", "source", "gs", "lines", "si", "letters", "sets", "f", "e", "scripts", "b", "ns", "es", "tests", "sb", "l", "sg", "xs", "p", "seconds"], "deff": ["deFF", "eeff", "defed", "adeFF", "debb", "deeff", "adeff", "DEff", "delf", "DElf", "Deff", "deoff", "Delf", "Debb", "dulf", " deFF", "adefed", " deeff", "duf", "Def", "eefed", "duFF", "eeeff", "eeFF", "DeFF", " deoff", "Defed", "dubb", "Deoff", "Deeff", "duff", "dueff", "DEoff", " debb", " delf", "DEeff", "adeeff"], "i": ["pi", "di", "uri", "x", "xi", "j", "gi", "c", "ci", "d", "slice", "yi", "phi", "oi", "a", "io", "ie", "start", "ind", "n", "ui", "t", "bi", "id", "y", "val", "ix", "index", "multi", "eni", "si", "u", "iu", "e", "I", "ti", "f", "b", "mi", "ai", "z", "p", "v", "l", "ii", "lc", "li", "r", "m", "ei", "zi"]}}
{"code": "import sys\\ndef MI(): return map(int,sys.stdin.readline().rstrip().split())\\n\\na,b = MI()\\nc = b-a\\nprint(c*(c+1)//2-b)\\n", "target": "653", "substitutes": {"a": ["area", "x", "aw", "d", "ar", "ab", "ac", "pa", "n", "da", "an", "A", "i", "y", "alpha", "sa", "acc", "aa", "va", "f", "e", "am", "ca", "ad", "ae", "ba", "l", "m", "p", " A", "au"], "b": ["k", "x", "pb", "j", "d", "cb", "nb", "ab", "ac", "B", "n", "s", "num", "A", "i", "y", "bs", "g", "ib", "beta", "aa", "wb", "u", "e", "f", "ca", "sb", "w", "z", "ba", "l", "v", "bb", "m", "r", "bf", "p", "count"], "c": ["k", "x", "cy", "ci", "d", "col", "ac", "n", "cc", "i", "cs", "y", "g", "h", "abc", "dc", "cu", "u", "size", "f", "e", "code", "ca", "unc", "C", "w", "z", "l", "lc", "pc", "r", "m", "cf", "p", "count"]}}
{"code": "a, b = map(int, input().split())\\nprint('unsafe' if a <= b else 'safe')", "target": "585", "substitutes": {"a": ["area", "ha", "sta", "x", "input", "c", "d", "ab", "ac", "int", "n", "mA", "da", "pa", "an", "A", "fa", "i", "y", "alpha", "qa", "sa", "abc", "ua", "la", "aa", "va", "oa", "f", "ca", "ai", "ae", "asa", "ba", "aaa", "l", "aj", "m", "p", "count", "au"], "b": ["eb", "mb", "abb", "j", "c", "d", "ob", "nb", "cb", "ab", "B", "zb", "bd", "bis", "pa", "n", "xb", "abs", "s", "rb", "bi", "i", "y", "bs", "fb", "ib", "aa", "wb", "f", "e", "base", "sb", "z", "ba", "aaa", "v", "bb", "m", "bf", "emb", "p"]}}
{"code": "n=int(input())\\nA=list(map(int,input().split()))\\nD = dict()\\nfor i in range(n):\\n  if A[i] not in D:\\n    D[A[i]] = 1\\n  else:\\n    D[A[i]] += 1\\nans = 0\\nfor i in D:\\n  if D[i]>=i:\\n    ans += D[i]-i\\n  else:\\n    ans += D[i]\\nprint(ans)", "target": "536", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "name", "a", "num", "s", "t", "y", "count", "nan", "nn", "span", "u", "nt", "f", "e", "max", "b", "ns", "sn", "no", "init", "z", "l", "m", "r", "nc", "p", "ne", "N"], "A": ["As", "Ac", "Ca", "NA", "Anne", "S", "Alpha", "a", "Auth", "B", "CA", "Ns", "T", "All", "mA", "Action", "At", "Array", "Y", "Az", "AM", "G", "AD", "Am", "Ab", "Art", "An", "AP", "Average", "Ar", "AN", "I", "AA", "am", "Ang", "C", "Na", "Ant", "P", "If", "API", "AF", "AB", "M", "And", "F", "N"], "D": ["ND", "U", "Dou", "DT", "S", "CD", "New", "R", "d", "E", "Do", "LD", "Ds", "B", "Dom", "DO", "T", "PD", "AD", "Y", "L", "G", "AM", "DP", "DA", "Di", "Part", "JD", "Diff", "Dir", "DD", "DM", "DS", "MD", "Q", "DI", "DB", "I", "X", "Da", "C", "DF", "DC", "Dar", "V", "P", "DL", "O", "M", "F", "DE", "N", "Z"], "i": ["mini", "pi", "di", "uri", "it", "ji", "o", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "oi", "phi", "a", "io", "ie", "ori", "start", "cli", "int", "ind", "ini", "ui", "ali", "ni", "bi", "id", "info", "api", "ix", "index", "ip", "multi", "si", "iii", "u", "iu", "fi", "e", "I", "f", "ti", "b", "ki", "ai", "ani", "module", "z", "qi", "l", "v", "ii", "ic", "li", "ei", "r", "p", "vi"], "ans": ["anus", "aning", "nas", "ras", "ins", "anks", "a", "ars", "ants", "aid", "amps", "an", "s", "anc", "actions", " means", "ats", "id", "cs", "ents", "ians", "anon", "sk", "na", "os", "anas", "ds", "gan", "ids", "nan", "ana", "span", "can", "AN", "cas", "aned", "anne", "ania", "ANS", "leans", "dd", "ann", "lan", "ns", "errors", "ions", "ani", "ai", "ays", "mean", "eps", "ons"]}}
{"code": "n,m,x,y = map(int,input().split())\\nl = list(map(int,input().split()))\\nr = list(map(int,input().split()))\\n\\nfor i in range(-100,101):\\n  if x<i and i<=y and max(l)<i and min(r) >= i:\\n    print(\"No War\")\\n    exit()\\nprint(\"War\")", "target": "670", "substitutes": {"n": ["o", "k", "j", "c", "nb", "ny", "an", "t", "ni", "en", "nn", "nu", "u", "f", "e", "ns", "w", "z", "v", "p", "ne", "N"], "m": ["pi", "o", "k", "j", "c", "d", "mr", "t", "mn", "g", "h", "ms", "mo", "u", "f", "e", "mu", "b", "mm", "w", "v", "mean", "M", "p", "middle"], "x": ["o", "k", "px", "c", "d", "xy", "pos", "int", "t", "min", "g", "ax", "h", "u", "f", "max", "dx", "e", "b", "X", "xx", "q", "w", "z", "v", "p"], "y": ["pi", "o", "ya", "j", "cy", "c", "d", "yi", "xy", "int", "Y", "t", "id", "yr", "dy", "h", "ym", "py", "yt", "u", "f", "e", "b", "hi", "yy", "w", "z", "v", "ii", "p", "vy"], "l": ["el", "lp", "ls", "o", "ol", "j", "d", "kl", "fl", "sl", "ll", "s", "L", "nl", "la", "il", "u", "ur", "f", "rl", "b", "pl", "dl", "w", "z", "v", "lc", "length", "lu", "li", "ln", "p"], "r": ["rs", "o", "k", "j", "c", "er", "R", "d", "ar", "rh", "mr", "t", "rb", "range", "yr", "rt", "min", "g", "ir", "dr", "pr", "nr", "u", "ur", "f", "rr", "hr", "b", "q", "w", "v", "p", "sr"], "i": ["pi", "di", "o", "it", "k", "xi", "j", "c", "ci", "d", "yi", "phi", "a", "start", "ori", "int", "ind", "ini", "ui", "t", "ni", "bi", "id", "ix", "index", "ip", "si", "u", "iu", "e", "I", "ti", "f", "b", "z", "qi", "v", "ii", "li", "p", "zi"]}}
{"code": "import sys\\nimport math\\nimport itertools\\nimport collections\\nimport heapq\\nimport re\\nimport numpy as np\\nfrom functools import reduce\\n\\nrr = lambda: sys.stdin.readline().rstrip()\\nrs = lambda: sys.stdin.readline().split()\\nri = lambda: int(sys.stdin.readline())\\nrm = lambda: map(int, sys.stdin.readline().split())\\nrl = lambda: list(map(int, sys.stdin.readline().split()))\\ninf = float('inf')\\nmod = 10**9 + 7\\n\\ns = rr()\\nfor char in 'abcdefghijklmnopqrstuvwxyz':\\n    if char not in s:\\n        print(char)\\n        exit()\\nelse:\\n    print('None')\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "target": "767", "substitutes": {"rr": ["rd", "err", "er", "ar", "RR", "rh", "ll", "mr", "rb", "rf", "cs", "arr", "result", "rt", "ir", "rar", "rx", "dr", "lr", "pr", "rw", "ra", " RR", "nr", "pp", "rn", "func", "gr", "cr", "attr", "rand", "fr", "r", "kr", "rc", "sr"], "rs": ["rd", "runs", "RR", "ars", "ring", "rh", "mr", "rb", "arr", "rt", "rg", "rar", "rx", "dr", "lr", "ra", "ris", "res", "ps", "repl", "cr", "xs", "ru", "rss", "rc", "sr"], "ri": ["di", "uri", "ci", "rio", "ro", "ry", "ori", "ini", "ni", "i", "iri", "ir", "pri", "rx", "tri", "rid", "rip", "RI", "ris", "ari", "si", "ti", "mi", "stri", "ai", "li", "rob", "io", "rin"], "rm": ["rd", "ram", "rh", "mr", "rb", "rf", "rg", "rem", "ir", "rar", "rx", "lr", "nr", "replace", "rpm", "rn", "resp", "repl", "pm", "ref", "cr", "rob", "rc", "sr", "RM"], "rl": ["lp", "ls", "rd", "ol", "lf", "ll", "rh", "mr", "rb", "rf", "rt", "rg", "rx", "lv", "lr", "nl", "rw", "il", "lb", "rn", "repl", "pl", "dl", "lc", "fr", "ln", "lt", "sr"], "inf": ["lim", "log", "inv", "float", "std", "exp", "ins", "const", "Inf", "int", "ind", "ipl", "nz", "inc", "info", "rf", "i", "abc", "iter", "pp", "f", "rec", "init", "frac", "z", "orig", "rc"], "mod": ["unit", "mode", "exp", "rad", "scale", "ind", "fun", "cc", "reg", "ms", "ord", "acc", "cm", "ctr", "comp", "mods", "spec", "base", "MOD", "Mod", "im", "module", "pm", "add", "grad", "complex", "m", "sim"], "s": ["ls", "string", "js", "S", "ings", "su", "c", "er", "ar", " ms", "d", "ins", "a", "ars", " ls", "ss", "t", "strings", "i", "cs", "g", " cs", "os", "comments", "ms", " c", "si", "spec", "e", "sym", " chars", "ps", "ns", "b", "es", "sb", "l", "sg", "str", "xs", "m", "r", "p"], "char": ["cur", "chip", "vec", "mode", "string", " characters", " ord", "sur", "par", "err", " CHAR", "c", "ar", "cmd", " Char", "inter", "start", "Char", "rule", "chrom", "int", "ind", "var", "reg", "ch", "math", "cs", "coord", " word", "url", "word", "dr", "ctr", "ord", " url", "character", " letter", "gram", " c", "star", "CHAR", "spec", "f", " chars", "arc", "car", "gr", "\u00e7", "com", "module", " glyph", "attr", "str", "sim", "byte", "order", " character", "sr", "letter"]}}
{"code": "from collections import deque\\nN = int(input())\\nadj = [[] for _ in range(N)]\\nfor i in range(N-1):\\n    a, b = map(int, input().split())\\n    adj[a-1].append((b, i))\\n    adj[b-1].append((a, i))\\n# print(adj)\\ncolor = [0]*N\\nvisited = [False]*N\\nvisited[0] = True\\nqueue = deque([1])\\nans = [0]*(N-1)\\nwhile queue:\\n    now = queue.popleft()\\n    cnt = 1\\n    for n, e in adj[now-1]:\\n        if visited[n-1]:\\n            continue\\n        if color[now-1] == cnt:\\n            cnt += 1\\n        color[n-1] = cnt\\n        visited[n-1] = True\\n        ans[e] = cnt\\n        cnt += 1\\n        queue.append(n)\\nprint(max(color))\\nprint(*ans, sep='\\n')", "target": "157", "substitutes": {"N": ["NA", "D", "S", " NI", "R", "NS", " I", "NC", "NE", "B", "Ns", "T", "n", "J", " C", "Y", "A", "L", "Len", "Num", "NT", "NM", "Size", " n", "NN", " Ne", "Q", "Length", "I", "X", "C", " B", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "adj": ["note", "wp", "ji", "extra", "j", "np", "d", "prev", "ijk", "nb", "dat", "data", "app", "diff", "nd", "ind", "n", "fix", "adv", "list", "config", "update", "gz", "arr", "g", "breaks", "network", "bl", "acc", "index", "next", "obj", "ad", "ns", "ani", "w", "dict", "z", "intern", "jp", "aj", "adjust", "bb", "ap", "p", "temp"], "_": ["x", " p", " time", " j", " row", " x", " seq", " id", "len", "f", " block", "p", "l"], "i": [" bi", "o", " v", "ji", "k", "x", "j", "c", "d", "phi", " I", " ii", " p", "int", " ip", "ind", "n", " iP", "ini", "ni", "bi", "id", "y", " j", "iter", " e", "index", " z", "ip", "si", " id", "u", "iu", "f", "I", "e", " k", "ai", "w", "z", " q", "l", "ii", "v", "li", "m", "r", "bb", "p"], "a": ["area", "at", "x", "j", "c", "d", "ak", "ab", "ac", "af", "int", "n", "da", "an", "s", "A", "y", "alpha", "na", "sa", "aa", "u", "va", "f", "e", "am", "ca", "ad", "ga", "ai", "ae", "w", "asa", "ba", "aaa", "l", "aj", "p"], "b": ["o", "eb", "k", "x", "j", "c", "db", "d", "ob", "nb", "ab", "bh", "B", "bd", "n", "s", "rb", "y", "bs", "bar", "body", "fb", "ib", "beta", "aa", "wb", "u", "lb", "e", "f", "base", "sb", "w", "z", "ba", "l", "v", "bb", "r", "bf", "p", "bp"]}}
{"code": "S = input()\\nL = len(S)\\n\\nif(S == 'keyence'):\\n    print('YES')\\n    exit()\\n\\nfor i in range(L):\\n    count = 0\\n    for j in range(i, L):\\n        if (i == 0 and count == 0):\\n            s = S[1:]\\n        elif(i == L - 1):\\n            s = S[:i]\\n        else:\\n            s = S[:i] + S[i + count + 1:]\\n\\n        if (s == 'keyence'):\\n            print('YES')\\n            exit()\\n        else:\\n            count += 1\\n\\nprint('NO')\\n", "target": "641", "substitutes": {"S": ["U", "SE", "SH", "D", "GS", "input", "oS", "ASC", "SS", "R", "NS", "E", "SK", "Sample", "JS", "B", "Ns", "T", "TS", "Si", "SI", "Y", "IDS", "A", "G", "Part", "String", "Source", "Single", "ST", "SA", "SSL", "Q", "I", "ITS", "Socket", "X", "SU", "C", "Ps", "V", "Sl", "P", "Sort", "p", "Session", "SON", "Service", "O", "H", "M", "Input", "F", "N", "Set"], "L": ["LM", "D", "LO", "VL", "Z", "R", "LD", "E", "LB", "NL", "Lo", "B", "T", "FL", "W", "J", "F", "Y", "LI", "G", "IL", "Len", "EL", "LE", "Q", "LT", "N", "I", "Length", "X", "C", "LL", "Lu", "V", "P", "K", "l", "DL", "length", "H", "M", "LA", "SL", "dL"], "i": ["mini", "pi", "di", "uri", "k", "x", "xi", "c", "ci", "d", "left", "phi", "a", "start", "int", "ind", "n", "ui", "ini", "bi", "id", "y", "ix", "index", "ip", "si", "u", "iu", "f", "I", "e", "end", "b", "ti", "hi", "q", "ai", "z", "qi", "l", "v", "ii", "length", "li", "m", "p", "zi"], "count": ["part", "case", "first", "err", "x", "c", "current", "left", "sum", "col", "old", "name", "a", "start", "int", "ind", "n", "all", "long", "num", "list", "cache", "ch", "weight", "id", "test", "key", "y", "h", "index", "si", "len", "size", "f", "Count", "e", "max", "b", "code", "base", "limit", "counter", "z", "l", "found", "length", "li", "p", "level", "call"], "j": ["el", "k", "x", "c", "d", " I", "a", "ie", "ind", "n", "J", "id", "y", "g", "h", "ij", "ib", "ix", "f", "e", "obj", "I", "q", "z", "l", "ii", "li", "p"], "s": ["states", "services", "o", "parts", "string", "ls", "type", "sync", "su", "c", "ins", "service", "ses", "session", "ss", "single", "t", "space", "strings", "y", "g", "h", "ds", "sample", "source", "gs", "lower", "sq", "u", "sets", "spec", "e", "f", "sym", "letters", "b", "ns", "sb", "w", "l", "v", "sg", "m", "str", "p", "token"]}}
{"code": "# coding: utf-8\\nimport sys\\nstdin = sys.stdin\\n\\nsr = lambda: stdin.readline().rstrip()\\nir = lambda: int(sr())\\nlr = lambda: list(map(int, sr().split()))\\n\\nN, M = lr()\\nAB = [lr() for _ in range(M)]\\nV = [x for x in range(N+1)]\\ntotal = N * (N-1) // 2\\n\\ndef find(A, x):\\n    parent = A[x]\\n    if parent == x: return x\\n    root = find(A, parent)\\n    A[x] = root\\n    return root\\n\\ndef union(A, x, y):\\n    root, second = find(A, x), find(A, y)\\n    if root > second:\\n        second, root = root, second\\n    A[second] = root\\n\\ndef merge(A, x, y):\\n    root_A = find(A, a); root_B = find(A, b)\\n    if root_A == root_B:\\n        return 0\\n    ret = group[root_A] * group[root_B]\\n    new_group = group[root_A] + group[root_B]\\n    group[root_A] = group[root_B] = new_group\\n    union(A, a, b)\\n    return ret\\n\\nconv = 0\\nanswer = []\\ngroup = [1] * (N+1)\\nfor a, b in AB[::-1]:\\n    answer.append(total - conv)\\n    conv += merge(V, a, b)\\n\\nfor x in answer[::-1]:\\n    print(x)\\n", "target": "287", "substitutes": {}}
{"code": "k=int(input())\\na,b = map(int,input().split())\\n\\nans=\"NG\"\\nfor i in range(1001):\\n    if a<=(i*k)<=b :\\n        ans = \"OK\"\\nprint(ans)", "target": "78", "substitutes": {"k": ["ik", "o", "x", "j", "c", "d", "ak", "ac", "n", "mk", "y", "alpha", "sk", "g", "ok", "ks", "kid", "dk", "u", "e", "f", "q", "w", "kw", "K", "v", "m", "r", "p", "km"], "a": ["ma", "area", "auto", "o", "c", "aw", "ak", "ama", "ab", "ac", "af", "pa", "da", "an", "A", "fa", "y", "alpha", "sa", "aa", "la", "u", "va", "f", "am", "ad", "ca", "ga", "ai", "asa", "ba", "p", " A", "au"], "b": ["o", "mb", "x", "j", "c", "d", "nb", "ab", "B", "n", "s", "rb", "y", "bs", "fb", "h", "ok", "beta", "aa", "lb", "e", "f", "ad", "base", "sb", "w", "ba", "l", "v", "bb", "bf", "r", "p"], "ans": ["ls", "anus", "aning", "nas", "ras", "ins", "anks", "ars", "ants", "ens", "anners", "an", "ads", "anc", "ats", " means", "asts", "ents", "anon", "sk", "na", "aniel", "rans", "anas", "plan", "anse", "ids", "ana", "ks", "anes", "arts", "AN", "atan", "leans", "aned", "ANS", "ann", "lan", "anges", "ane", "ns", "ends", "es", "ani", "ays", "annels", "ares", "aus", "ons"], "i": ["pi", "ji", "x", "xi", "j", "c", "ci", "d", "phi", "pos", "int", "ind", "n", "num", "ni", "bi", "id", "y", "alpha", "index", "si", "u", "e", "I", "f", "mu", "hi", "q", "ai", "z", "l", "ii", "li", "m", "p"]}}
{"code": "#atcoder template\\ndef main():\\n    import sys\\n    imput = sys.stdin.readline\\n    #\u6587\u5b57\u5217\u5165\u529b\u306e\u6642\u306f\u4e0a\u8a18\u306ferror\u3068\u306a\u308b\u3002\\n    #\u3053\u3053\u306b\u30b3\u30fc\u30c9\\n    #input\\n    x = int(input())\\n\\n    # %%\\n    #output\\n    if x >= 30:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\n\\n    #N = 1\u306e\u3068\u304d\u306a\u3069corner case\u3092\u78ba\u8a8d\uff01\\nif __name__ == \"__main__\":\\n    main()", "target": "371", "substitutes": {}}
{"code": "import string\\nn = int(input())\\ns = input()\\n\\nl = string.ascii_uppercase\\nans = [l[(l.index(i) + n ) % len(l)] for i in s]\\nprint(''.join(ans))", "target": "39", "substitutes": {"n": ["o", "cn", "k", "x", "j", " len", "c", " N", "nb", " p", "a", "Ns", "pos", "an", "num", "t", "ni", "y", " na", "nn", "span", "nl", " c", "u", "len", "size", " ni", "e", "b", "ns", "sn", " num", " nin", "w", "z", " ng", " skip", "m", "nc", "ln", "p", "ne", "N"], "s": ["states", "ls", "o", "S", "c", "d", "ins", "ses", "a", "ss", "sl", "an", "strings", "g", "sa", "ts", "ips", "gs", "lines", "ln", "alls", "si", "u", "e", "f", "sym", "b", "ns", "sn", "es", "sb", "m", "small", "p"], "l": ["el", "lp", "ls", "o", "string", "ol", "le", "ul", "c", "d", "ins", "kl", "lo", "ell", "sl", "list", "ll", "L", "os", "bl", "nl", "lines", "la", "il", "u", "len", "isl", "lin", "f", "e", "b", "es", "dl", "z", "lc", "v", "m", "li", "r", "ln", "p", "cl"], "ans": ["parts", "ls", "ings", "ases", "ins", "ars", "ants", "args", "an", "ops", "anc", "strings", "cs", "ents", "ians", "na", "os", "breaks", "les", "vals", "can", "lines", "cons", "AN", "aned", "len", "leans", "ANS", "ann", " chars", "ns", "lan", "lang", " accents", "ions", "types", "eps", "ln", "aus", "ons"], "i": ["pi", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "a", "io", "start", "int", "ind", "uli", "ini", "t", "ni", "id", "y", "ix", "index", "ip", "si", "u", "iu", "e", "I", "f", "ai", "z", "v", "ii", "li", "p"]}}
{"code": "n = int(input())\\nif n==1:\\n  ret=\"Hello World\"\\nelif n==2:\\n  a = int(input())\\n  b = int(input())\\n  ret=a+b\\n\\n\\n\\n  \\nprint(ret)", "target": "691", "substitutes": {"n": ["o", "cn", "c", "np", "yn", "nb", "an", "s", "ni", "on", "nw", "na", "min", "en", "act", "ign", "nn", "un", "nu", "net", "len", "f", "rn", "e", "nt", "fn", "ns", "pn", "hn", "ain", "sn", "none", "no", "nat", "dn", "l", "zn", "m", "nc", "ln", "p", "nin", "ne", "N", "conn"], "ret": ["part", "exit", "ext", "success", "flag", "out", "det", "alt", "feature", "ut", "data", "rets", "RET", "Return", "print", "re", "info", "result", "python", "val", "job", "rep", "py", "bit", "detail", "replace", "reply", "ft", "obj", "reset", "res", "match", "resp", "base", "code", "secret", "repl", "feat", "status", "Ret", "layer", "ref", "cat", "str", "arg"], "a": ["o", "c", "aw", "d", "ab", "ac", "art", "af", "pa", "da", "an", "A", "fa", "y", "alpha", "sa", "abc", "ia", "aa", "u", "va", "e", "f", "ad", "ca", "am", "ga", "ai", "ae", "z", "ba", "asa", "ada", "aj", "p", "au"], "b": ["eb", "mb", "abb", "c", "db", "d", "ab", "B", "bd", "bis", "xb", "s", "rb", "bi", "i", "y", "bs", "bar", "fb", "ok", "ib", "beta", "aa", "wb", "u", "lb", "e", "f", "sb", "ba", "l", "v", "bb", "r", "bf", "p"]}}
{"code": "x = input()\\nprint(x[0:3])", "target": "775", "substitutes": {"x": ["work", "px", "input", "exp", "c", "xy", "event", "data", "n", " xx", "t", "xxxxxxxx", "i", "y", "tx", "check", "python", "ax", "abc", "xxxx", "xe", "sex", "index", "ex", "f", "b", "X", "xx", "code", "q", "w", "expl", "z", "content", "v", "accept", "text", "xs", "p", "pe"]}}
{"code": "n = int(input())\\n\\nresult = 0\\nfor i in range(n):\\n    num = i*2\\n    if num > n:\\n        break\\n    hasndivisors = 0\\n    for divisor in range(n):\\n        # print(num+1, divisor+1)\\n        if (num+1)/(divisor+1) == (num+1)//(divisor+1):\\n            hasndivisors += 1\\n    # print(num+1, 'has', hasndivisors, 'divisors')\\n    if hasndivisors == 8:\\n        result += 1\\n\\nprint(result)", "target": "288", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "an", "t", "ni", "y", "nw", "network", "nn", "nan", "bin", "number", "nu", "nit", "u", "net", "f", "fn", "nt", "e", "b", "ns", "sn", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "result": ["Result", "success", "out", "response", "page", "results", "sum", "output", "data", "answer", "list", "array", "math", "info", "test", "inner", "iter", "ret", "number", "function", "final", "res", "match", "status", "counter", "r"], "i": ["pi", "di", "it", "k", "x", "xi", "j", "gi", "c", "ci", "d", "ind", "instance", "ini", "ui", "ni", "bi", "id", "info", "inner", "uni", "isin", "index", "ip", "multi", "si", "u", "iu", "f", "ti", "I", "b", "ai", "ani", "chi", "p", "ii", "li", "m", "io"], "num": ["unit", "su", "um", "np", "nm", "nb", "sum", "ut", "mult", "du", "all", "Num", "mn", "uni", "div", "con", "dim", "index", "bin", "nu", "batch", "number", "umi", "multi", "comb", "nr", "nom", "u", "fn", "mu", "f", "b", "mi", "NUM", "init", "m", "text", "nc", "block"], "hasndivisors": ["hasndiviions", "hasndervisors", "hasndivisiions", "hasndivisiors", "hasndivisior", "hasndervisor", "hasndivior", "hasndivotors", "hasndivotions", "hasndivisori", "hasndivisions", "hasnderviors", "hasndiviors", "hasndivisiori", "hasndivotori", "hasnderviori", "hasndervisions", "hasndervior", "hasndiviori", "hasndervisori", "hasndivotor", "hasndivisor", "hasnderviions"], "divisor": ["divisors", "divistor", "divissor", " divissor", "divistors", "divistoring", "divivor", " divisoring", "divission", "divissors", " divissors", "divistion", "divivoring", "divivors", "division", " divission", " divissoring", " divisors", " division", "divisoring", "divivion", "divissoring"]}}
{"code": "N, A, B = map(int,input().split())\\nH = [int(input()) for _ in range(N)]\\n\\ndef solve(k):\\n    cnt = 0\\n    for i in range(N):\\n        if H[i] > B * k:\\n            cnt += (H[i] - B * k - 1) // (A - B) + 1\\n    return cnt <= k\\n\\n\\nleft = 0\\nright = 10 ** 9 + 1\\n\\nwhile left + 1 < right:\\n    mid = (left + right) // 2\\n    if solve(mid):\\n        right = mid\\n    else:\\n        left = mid\\n\\nprint(right)", "target": "51", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "E", "Ns", "T", "n", "W", "J", "Y", "L", "G", "Num", "NT", "Size", "No", "Q", "I", "X", "C", "Ne", "V", "P", "K", "O", "M", "F", "Z"], "A": ["U", "NA", "D", "S", "R", "Alpha", "a", "CA", "T", "W", "mA", "At", "Y", "G", "L", "alpha", "HA", "AP", "I", "AA", "ABC", "b", "X", "C", "Na", "V", "P", "K", "AF", "AB", "AC", "M", "F", "LA"], "B": ["U", "Two", "D", "S", "BF", "R", "E", "LB", "BB", "T", "W", "TB", "BE", "J", "Y", "L", "G", "Num", "NB", "BA", "Q", "Bs", "GB", "DB", "WB", "I", "b", "X", "C", "V", "MB", "P", "K", "O", "M", "F", "Bal", "Z"], "H": ["U", " h", "D", "CL", "HD", "HQ", "HC", "R", "E", "Hi", "RH", "T", "OH", "W", "HH", "rh", "Y", "G", "L", "HA", "HK", "h", "HS", "Q", "GH", "Head", "X", "C", "HM", "MH", "HI", "V", "P", "K", "Ch", "O", "M", "F", "CH", "Z"], "_": ["x", " time", " ip", "all", "num", "id", "g", " seq", " id", "len", " count"], "k": ["o", "x", "kk", "j", "c", "d", "ky", "n", "mk", "F", "num", "ck", "kick", "ch", "y", "key", "alpha", "sk", "g", "h", "ks", "dk", "Q", "u", "f", "e", "b", "X", "C", "q", "w", "P", "z", "K", "kw", "l", "v", "m", "r", "M", "p", "km"], "cnt": ["lcount", "CNT", "ccount", "lcnt", " cpt", " ccount", "lccount", "acount", "lcpt", "acnt", "acpt", "Cpt", "acNT", "Cnt", "Count", "cNT", " count", "Ccount", "cpt", " cNT", "count"], "i": ["di", "x", "j", "c", "gi", "ci", "d", "yi", "phi", " I", "ac", "ind", "n", "ui", "ini", "bi", "id", "y", " j", "h", "pri", "ix", "index", "ip", " c", "si", "u", "iu", "f", "I", "ti", "b", "mi", "ai", "z", "qi", "v", "l", "ii", "li", "m", "p"], "left": ["part", "le", " L", "partial", "plus", "c", "low", "d", "old", "lo", "start", "ell", "second", "half", "diff", "n", " Left", "all", "center", "both", "L", "inner", "cost", "min", "offset", "parent", "top", "index", "next", "lower", "Right", "Left", " l", "two", "last", "size", "end", "pl", "bottom", "level", "l", "lc", "found", "m", "li", "small", "p", "middle", "lt", "length", "cl"], "right": ["different", "part", "rest", "rew", "x", "rights", "partial", "plus", "R", "rad", "back", "start", "three", "nd", "instance", "n", "ight", "reverse", "rh", "id", "result", "inner", "correct", "rt", "ax", "h", "rx", "th", "rw", "error", "row", "rel", "max", "one", "end", "none", "third", "through", "w", "cross", "length", "r", "rand", "p", "middle", "Right", "wrong"], "mid": ["lim", "mini", "part", "partial", "low", "sub", "medium", "mouse", "start", "mult", "nd", "center", "grid", "rh", "depth", "mr", "range", "id", "small", "inner", "min", "md", "master", "main", "multi", "micro", "default", "max", "end", "hi", "mm", "shift", "broad", "lc", "rand", "patch", "m", "Mid", "r", "cd", "middle", "top"]}}
{"code": "s = input()\\n\\ni = 1\\nans = ''\\nfor x in s:\\n    if i & 1:\\n        ans += x\\n    i += 1\\nprint(ans)", "target": "20", "substitutes": {"s": ["states", "ls", "o", "ess", "S", "c", "d", "ins", "ses", "ss", "n", "ops", "cs", "os", "g", "ds", "ips", "ks", "gs", "lines", "si", "u", "f", "e", "sym", "b", "ps", "ns", "es", "ions", "l", "m", "xs", "p"], "i": ["pi", "di", "o", "k", "xi", "j", "idi", "c", "gi", "ci", "slice", "d", "phi", "oi", "a", "int", "n", "ini", "ui", "ni", "bi", "y", "split", "index", "multi", "si", "u", "iu", "e", "I", "f", "ti", "b", "ai", "z", "l", "ii", "li", "m", "ei", "p", "zi"], "ans": ["string", "case", " answers", "nas", "ins", "a", "ars", "ants", "aid", "amps", "int", "anch", "an", "anc", "man", "ints", "ats", "strings", "ians", "anon", "sk", "na", "os", "anas", "ds", "ks", "ana", "span", "can", "bin", "lines", "AN", "atan", "aned", " Ans", "ania", "ANS", "I", "ann", " chars", "lan", "scan", "ons", "ns", "ions", "ai", "ani", "params", " scans", "asm", "xs", "p"], "x": ["case", "xp", "xi", "px", "c", "xy", "a", "lex", "int", "n", "xb", "id", "y", " X", "tx", "xa", "xxx", "ax", "xt", "xxxx", "mx", "qu", "rx", "ix", "index", "ex", "xc", "f", "opt", "X", "xx", "xf", "xes", "wx", "im", "w", "z", "v", "cross", "xs", "p"]}}
{"code": "count=0\\ns=input()\\ntemp = s[0]\\nfor i in range(1,len(s)):\\n    if s[i]!=temp:\\n        count+=1\\n    temp=s[i]\\n\\nif count==0 : print(0)\\nelse : print(count)", "target": "655", "substitutes": {"count": ["core", "part", "type", "empty", "case", "c", "current", "cycle", "amount", "left", "sum", "col", "name", "start", "const", "int", "n", "num", "list", "cache", "cc", "weight", "test", "id", "total", "key", "cond", "self", "index", "tmp", "number", "size", "len", "f", "Count", "max", "default", "b", "code", "base", "limit", "child", "counter", "found", "length"], "s": ["states", "parts", "string", "services", "o", "ls", "js", "S", "input", "c", "sp", "d", "ws", "ses", "sum", "a", "sol", "ss", "n", "single", "abs", "qs", "t", "space", "strings", "y", "split", " parts", "g", "cells", "ts", "sample", "source", "gs", "lines", "st", "sf", " c", "sq", "multi", "south", "si", "size", "sets", "f", "sym", "e", "b", "ns", "es", "tests", "sb", "w", "z", "v", "l", "less", "m", "xs", "p"], "temp": ["unit", "wrap", "part", "empty", "Temp", "input", "partial", "wl", "c", "current", "tc", "sum", "output", "data", "perature", "const", "n", "valid", "num", "cache", "t", "test", "y", "total", "iter", "source", "tmp", "index", "fake", "size", "f", "max", "tem", "stable", "new", "emp", "w", "z", "v", "flat", "length", "now", "p", "level"], "i": ["pi", "di", "k", "x", "xi", "j", "gi", "c", "gu", "ci", "d", "col", "start", "pos", "int", "ind", "n", "num", "bi", "id", "y", "h", "iter", "ix", "index", "ip", "si", "u", "iu", "f", "I", "e", "end", "b", "ai", "z", "qi", "l", "v", "ii", "li", "m", "p"]}}
{"code": "import itertools\\nH, W, K = map(int,input().split())\\nS = [list(map(int,list(input()))) for _ in range(H)]\\ndef check(k):\\n    if k <= K:\\n        return(True)\\n    else:\\n        return(False)\\n        \\nnoans = 0\\ndef make_lst(i):\\n    global noans, lst, havelst\\n    temp = S[0][i]\\n    for h in range(H-1):\\n        if y[h]:\\n            lst.append(temp)\\n            temp = S[h+1][i]\\n        else:\\n            temp += S[h+1][i]\\n    lst.append(temp)\\n    if check(max(lst)):\\n        havelst = 1\\n    else:\\n        noans = 1\\n#    print(y,i,lst, \"makelst\")\\n               \\ndef nocut(i):\\n    global cutnum, lst, havelst, noans\\n    prelst = []\\n    temp = S[0][i]\\n    if i == W-1:\\n        if not check(temp):\\n            noans = 1\\n    j = 0\\n    for h in range(H-1):            \\n        if y[h]:\\n            lst[j] += temp\\n            prelst.append(temp)\\n            j += 1\\n            temp = S[h+1][i]\\n        else:\\n            temp += S[h+1][i]\\n        if i == W-1:\\n            if not check(temp):\\n                noans = 1\\n    prelst.append(temp)\\n    lst[-1] += temp\\n    if check(max(lst)):\\n#        print(y,i,lst,\"nocut\", \"cutnum = \",cutnum)\\n        return(True)\\n    else:\\n        cutnum += 1\\n        lst = prelst        \\n#        print(y,i,lst,\"cut\",\"cutnum =\",cutnum)\\n        \\n                 \\nans = float(\"inf\")    \\nfor y in itertools.product((0, 1), repeat=H-1):\\n    havelst = 0\\n    lst = []\\n    cutnum = sum(y)\\n    for x in range(W):\\n        if noans:\\n            break\\n        if havelst:\\n            nocut(x)\\n        else:\\n            make_lst(x)\\n#    print(y,cutnum)\\n    if noans:\\n        noans = 0\\n        continue\\n    else:\\n        ans = min(cutnum, ans)\\nprint(ans)\\n", "target": "329", "substitutes": {"H": ["U", "D", "HC", "R", "E", " N", "Hi", "RH", "T", "HH", "J", "Y", "A", "L", "G", "HA", "HK", "EH", "Q", "Ha", "Length", "I", "X", "C", "HI", "V", "w", "P", "O", "M", "F", "N", "Z"], "W": ["GW", "D", "RW", "WR", "Y", "G", "Wh", "NW", " w", "FW", "Q", "Wa", "WC", "WS", "X", "SW", "C", "CW", "V", "w", "We", "MW", "O", "VW", "M", "F", "N", "Z"], "K": ["U", "KR", "D", "R", "SK", "E", "B", "KE", "T", "J", "Y", "NK", "G", "KK", "HK", "Q", "PK", "I", "X", "C", "V", "P", "Sk", "KS", "KC", "M", "O", "F", "N", "Z"], "S": ["SE", "U", "SH", "D", "Windows", "BS", "SS", "R", "NS", "B", "List", "T", "TS", "Si", "SI", "s", "Array", "Y", "A", "L", "G", "States", "SL", "HS", "PS", "Os", "SC", "I", "ITS", "Socket", "X", "SU", "C", "Ps", "V", "Sl", "P", "Session", "O", "M", "F", "N", "Z"], "_": ["x", " un", "__", " time", "all", "time", " f", " seq", " id"], "k": ["ik", "o", "x", "j", "c", "d", "ak", "n", "ck", "ek", "y", "key", "sk", "g", "unk", "ok", "ks", "ko", "u", "e", "f", "q", "w", "kw", "z", "v", "m", "r", "p", "N", "ku"], "noans": [" noANS", "oans", " noano", "Noops", "oan", "noano", "Noann", " noas", "oann", "Noans", "poANS", "oants", "koANS", "noas", "koas", "noan", "poan", "NOans", "loan", " noann", "NOops", "loann", "poas", "noANS", "NOann", "koans", "koan", " noops", "noops", "Noano", "NOano", "noants", "loants", "poans", "loans", " noan", " noants", "noann"], "i": ["ik", "pi", "it", "o", "di", "uri", "x", "j", "c", "ci", "d", "ri", "io", "cli", "n", "s", "ini", "id", "y", "api", "index", "si", "u", "iu", "f", "I", "e", "b", "hi", "ai", "w", "z", "qi", "v", "l", "ii", "m", "li", "p"], "temp": ["unit", "mini", "wrap", "it", "empty", "loc", "cur", "case", "Temp", "extra", "input", "partial", "c", "current", "tc", "col", "copy", "output", "data", "wa", "variable", "fixed", "cache", "tw", "test", "ph", "key", "cel", "result", "iter", "source", "tmp", "index", "fake", "null", "model", "size", " Temp", "f", "max", "tem", "stable", "base", "clean", "buffer", "emp", "init", "w", "z", "lc", "flat", "v", "orig", "m", "template", "p", "path", "level"], "h": ["ha", "x", "oh", "c", "ht", "a", "bh", "kh", "n", "rh", "t", "ch", "y", "ph", "id", "ah", "hd", "hh", "u", "e", "f", "hr", "b", "hi", "q", "sh", "w", "uh", "z", "l", "v", "han", "hm", "m", "he", "ih", "p", "hs"], "havelst": ["HAvellbe", "HAvelbe", "HAvensta", "havelsta", "HAvellest", "haplsts", "HAvelsta", "HAvensts", "hailst", "havelST", "havelest", "hailST", "havellst", "HAvellST", "haeverbe", "HAvenst", "haplST", "HAvenST", "haplst", "havenST", "haeverST", "havelsts", "hailsts", "havensts", "havelbe", "havensta", "HAvellst", "haeverest", "hailsta", "havellbe", "HAvelST", "haplsta", "HAvelsts", "HAvelest", "havenst", "havellest", "havellST", "hallST", "hallst", "hallbe", "haeverst", "hallest", "HAvelst"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nma=max(a)\\nmi=min(a)\\nans=10**9\\n\\nfor i in range(mi,ma+1):\\n    tm=0\\n    for j in a:\\n        tm+=(j-i)**2\\n    else:\\n        ans=min(ans,tm)\\n\\nprint(ans)\\n\\n", "target": "548", "substitutes": {"n": ["o", "c", "d", "nb", "ny", "s", "ni", "na", "g", "nn", "net", " ni", "f", "ann", "b", "ns", "sn", "z", "l", "ii", "m", "r", "p", "ne", "N"], "a": ["area", "o", "at", "ha", "c", "ar", "ama", "ac", "ab", "wa", "af", "pa", "mA", "da", "all", "an", "s", "array", "A", "fa", "ata", "y", "alpha", "na", "sa", "ana", "ia", "aa", "la", "u", "va", "e", "b", "am", "ad", "ca", "mm", "ga", "ai", "w", "ae", "asa", "ba", "aaa", "ao", "aj", "m", "p", "au"], "ma": ["mini", "mc", "mma", "ima", "wa", "mia", "da", "fa", "ema", "alpha", "Ma", "min", "sa", "ms", "ia", "la", "aa", "si", "me", "mu", "max", "e", "am", "ca", "mas", "mm", "MA", "ai", "ta", "m"], "mi": ["mini", "pi", "lim", "mc", "mic", "ci", "nm", "yi", "mia", "ini", "ui", "ni", "mn", "min", "ms", "cm", "umi", "si", "me", "ami", "mu", "ti", "my", "MI", "ki", "mis", "mm", "hi", "ai", "chi", "ii", "m", "li", "Mi"], "ans": ["lim", "ls", "sin", "san", "nas", "ras", "ins", "sum", "aid", "ens", "an", "s", "ats", "asts", "cs", "ents", "ams", "sk", "na", "plan", "ms", "ds", "gan", "ks", "ana", "nan", "nn", "span", "can", "cas", "aned", "ANS", "oa", "am", "ann", "ns", "mas", "mm", "lan", "ki", "es", "features", "ani", "ai", "ta", "aces", "mean", "asm", "m", "ace", "acs", "sim", "xs", "eps", "aus", "ons", "ran", "rams"], "i": ["mini", "pi", "ji", "k", "x", "xi", "gi", "c", "ci", "d", " I", " ii", "ie", "ind", "ini", "ni", "id", "y", "g", "ij", " il", "h", "index", "si", "iu", "e", "ti", "I", "f", "b", "im", "ai", "z", "qi", "ii", "li", "m", "p"], "tm": ["lim", "mini", "mc", "fm", "om", "nm", "scale", "tc", "tom", "num", "t", "tw", "arm", "mem", "dim", "hh", "ms", "mx", "tt", "md", "umi", "si", "em", "mt", "ti", "sym", "tem", "am", "hi", "sm", "mm", "term", "TM", "im", "ai", "ta", "te", "m", "sim", "gam", "km"], "j": ["it", "ji", "k", "x", "_", "jc", "int", "oj", "J", "num", "ni", "y", "g", "h", "ij", "si", "ja", "f", "adj", "end", "b", "am", "jj", "mm", "q", "ai", "z", "jp", "aj", "jam", "m", "ii", "li", "p"]}}
{"code": "\\nnum = input().split()\\n \\na = int(num[0])\\nb = int(num[1])\\nc = int(num[2])\\n \\nif a <= b <= c :\\n  print(a,b,c);\\nelif a <= c <= b :\\n  print(a,c,b);\\nelif b <= a <= c:\\n  print(b,a,c)\\nelif b <= c <= a:\\n  print(b,c,a)\\nelif c <= a <= b:\\n  print(c,a,b)\\nelse:\\n  print(c,b,a)", "target": "117", "substitutes": {"num": ["unit", "oct", "note", "home", "dom", "out", "um", "hex", "np", "om", "nm", "img", "node", "sum", "four", "name", "col", "hum", "du", "ram", "mom", "dec", "int", "hom", "n", "info", "i", "Num", "mon", "split", "con", "dim", "date", "word", "month", "index", "digit", "day", "bin", "number", "nu", "multi", "umi", "umber", "nom", "u", "dash", "rum", "term", "mor", "m", "comment", "nam", "temp", "form", "block", "mix"], "a": ["auto", "o", "at", "x", "aw", "d", "ar", "ak", "ab", "ac", "af", "n", "da", "an", "s", "ce", "A", "fa", "t", "cc", "i", "y", "alpha", "na", "sa", "h", "aa", "ach", "u", "f", "e", "ad", "ca", "am", "ga", "ai", "ae", "w", "asa", "ba", "aaa", "be", "l", "v", "aj", "r", "ap", "p"], "b": ["o", "k", "x", "db", "cy", "d", "cb", "ab", "ac", "bh", "B", "bc", "n", "an", "s", "rb", "fa", "t", "bi", "i", "ch", "y", "bs", "g", "fb", "h", "ib", "aa", "wb", "u", "f", "e", "ad", "ca", "ga", "sb", "ae", "be", "w", "ba", "l", "v", "bb", "bf", "r", "p"], "c": ["o", "k", "x", "cy", "ci", "d", "cb", "ac", "ab", "bc", "fc", "n", "s", "an", "ce", "ch", "i", "cs", "y", "ec", "g", "con", "h", "cp", "ct", "aa", "cu", "u", "e", "f", "ad", "ca", "C", "w", "be", "z", "ae", "l", "v", "lc", "m", "r", "cf", "p"]}}
{"code": "while 1:\\n    C = input()\\n    if C == \"-\":\\n        break\\n    N = int(input())\\n    for i in range(N):\\n        H = int(input())\\n        C = C[H:] + C[:H]\\n    print(C)\\n\\n", "target": "715", "substitutes": {"C": ["CO", "U", "CI", "D", "S", "CN", "CD", "c", "HC", "R", "E", "NC", "B", "CA", "T", "W", "Y", "CU", "L", "G", "A", "LC", "CNN", "Co", "YC", "JC", "Q", "WC", "I", "X", "DC", "V", "P", "CC", "K", "CR", "Code", "CV", "VC", "O", "Cu", "M", "KC", "F", "AC", "CM", "Custom", "CE", "CL"], "N": ["U", "NA", "D", "S", "CN", "R", "NS", "E", " I", "NL", "NE", "B", "Ns", "T", "n", "W", "NH", "Y", "Ni", "L", "G", "NT", "NM", " n", "NN", " Ne", "Q", "I", "X", "Ne", "V", "P", "K", "O", "M", "F", "Z"], "i": ["it", "k", "x", "j", "gi", "c", "d", "col", " I", "start", "int", "ind", "n", "num", "id", "h", "ct", "index", "ip", "f", "I", "q", "counter", "li", "r", "ih", "p", "count"], "H": ["U", "D", "S", "He", "R", "HC", "E", "Hi", "RH", "T", "NH", "HH", "W", "J", "rh", "Y", "HB", "His", "G", "L", "Kh", "Cl", "HK", "EH", "h", "HS", "Q", "Ha", "X", "HI", "V", "P", "K", "AH", "Ch", "O", "M", "F", "CH", "Z"]}}
{"code": "N=int(input())\\n*A,=map(int,input().split())\\n\\nans=0\\ni=0\\nj=1\\nwhile i<N:\\n    if A[i]==j:\\n        j+=1\\n    else:\\n        ans+=1\\n    i+=1\\n\\nprint([-1,ans][1 in A])", "target": "749", "substitutes": {"N": ["D", "S", "R", "NS", "NE", "B", "Ns", "T", "n", "J", "L", "G", "Num", "CNN", "NT", " n", "NN", "No", "AN", "I", "X", "ns", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["As", "U", "NA", "D", "S", "Alpha", "a", "B", "CA", "T", "W", "J", "At", "Array", "Y", "array", "G", "L", "AS", "SA", "An", "AP", "Ar", "I", "AA", "X", "C", "Na", "V", "P", "API", "AF", "O", "H", "M", "AC", "F", "LA"], "ans": ["ls", "k", "x", "ass", "ins", "a", "ants", "int", "n", "J", "ens", "an", "s", "anc", "cs", "ians", "anon", "ski", "na", "os", "anas", "ds", "ks", "nn", "ia", "span", "An", "anes", "ism", "nan", "ana", "AN", "si", "aned", "anne", "atan", "ANS", "ann", "ns", "ane", "ki", "Na", "no", "ai", "ani", "p", "ons"], "i": ["pi", "di", "o", "ji", "k", "x", "xi", "c", "ci", "d", "ri", "a", "int", "n", "J", "ind", "s", "ini", "ni", "bi", "y", "index", "si", "u", "f", "I", "e", "ti", "b", "mi", "ki", "ai", "z", "qi", "l", "v", "ii", "li", "m", "p", "zi"], "j": ["ji", "o", "k", "x", "axis", "ci", "d", "jc", "a", "start", "pos", "ind", "n", "J", "num", "s", "ni", "y", "ij", "index", "jl", "next", "si", "ja", "f", "I", "adj", "b", "jj", "ann", "ai", "z", "qi", "v", "l", "ii", "jp", "li", "aj", "m", "r", "p"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nMOD = 10 ** 9 + 7\\nINF = float('INF')\\nsys.setrecursionlimit(10 ** 5)\\n\\n\\ndef main():\\n    s = input()\\n    x, y = map(int, readline().split())\\n    sx, sy = 0, 0\\n\\n    for i in range(len(s)):\\n        if s[i] == \"F\":\\n            sx += 1\\n        else:\\n            break\\n\\n    is_x = False\\n    cur = 0\\n\\n    x_list = []\\n    y_list = []\\n\\n    for i in range(sx + 1, len(s)):\\n        if s[i] == \"F\":\\n            cur += 1\\n        if s[i] == \"T\" or i == len(s) - 1:\\n            if is_x:\\n                x_list.append(cur)\\n            else:\\n                y_list.append(cur)\\n            cur = 0\\n            is_x = not is_x\\n\\n    x_possible = set()\\n    x_possible.add(0)\\n\\n    while x_list:\\n        x_possible_new = set()\\n        cx = x_list.pop()\\n        for px in x_possible:\\n            x_possible_new.add(px + cx)\\n            x_possible_new.add(px - cx)\\n        x_possible = x_possible_new\\n\\n    y_possible = set()\\n    y_possible.add(0)\\n\\n    while y_list:\\n        y_possible_new = set()\\n        cy = y_list.pop()\\n        for py in y_possible:\\n            y_possible_new.add(py + cy)\\n            y_possible_new.add(py - cy)\\n        y_possible = y_possible_new\\n\\n    nx = x - sx\\n    ny = y\\n\\n    if (nx in x_possible) and (ny in y_possible):\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\n\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "753", "substitutes": {"readline": ["readbyte", "writelines", " streamLine", " readLine", "readblock", "writeline", "readlines", " streamLINE", " streamliner", "playLine", "Readline", "READliner", "READbyte", "READLine", "playlines", "readliner", " readlines", "writeblock", "READlines", "ReadLINE", "Readbyte", " readLINE", "writeLine", "playline", "playblock", "READLINE", " streamline", "READline", " readliner", "readLINE", " readbyte", "readLine", "Readlines", " readblock"], "MOD": [" FT", " PE", " E", " R", " U", " PI", " const", " CR", " LC", " LF", " MB", " C", " INT", " EXT", " CP", "MAX", " mod", " Z", " PC", " LP", " RR", " M", " imp", " CRC", " mem", " FP", " GF", " MAX", " CF"], "INF": [" INFS", "ACEF", "INEF", "ACF", "ACFS", "INFS", " PINF", " PINDF", " PINFS", "INDF", " PINEF", " INEF", "ACDF", " INDF"], "s": ["states", "parts", "o", "fs", "ls", "services", "S", "ings", "input", "c", "d", "slice", "ws", "ses", "ins", "a", "sys", "start", "ss", "opens", "sl", "n", "abs", "qs", "ops", "sts", "t", "strings", "cs", "g", "sa", "os", "sections", "ts", "ds", "blocks", "ips", "gs", "sites", "si", "u", "sets", "e", "f", "sym", "b", "ps", "ns", "ans", "es", "tests", "sb", "features", "w", "aces", "ves", "l", "v", "sg", "sc", "m", "r", "se", "xs", "its", "p"], "x": ["c", "d", "xy", "data", "int", "n", "t", "tx", "python", "g", "ax", "h", "xt", "rx", "ix", "index", "fx", "ex", "xc", "u", "f", "e", "b", "X", "xx", "w", "z", "v", "l", "m", "xs", "p", "pe"], "y": ["ey", "ya", "j", "c", "xy", "yi", "ky", "n", "Y", "zy", "t", "yr", "dy", "gy", "h", "ay", "ym", "yt", "f", "e", "ys", "b", "yy", "w", "z", "l", "v", "m", "p", "vy"], "sx": ["Sxx", "sxy", "spy", "soxx", "vw", "Sw", "ssx", "sci", "ssxx", "sopx", "spw", "Sd", "sexx", " sxx", "sox", "sd", "spxx", "sofx", "sw", "ssfx", "ssxy", "sex", "ssci", "sspx", "sct", " sct", " sxy", "spci", "spd", "Sx", "sfx", "dsfx", "sect", "vxx", "sxx", "dsxx", "spxy", "vx", "dspx", "vd", "spx", "dsx", "ssy", " sci", "ssct", "sey"], "sy": ["ery", "sec", "fy", "sur", "sin", "sp", "sch", "SY", "sys", "ry", "zy", "syn", "ch", "yr", "sk", "ty", "ies", "sq", "si", "asy", "sym", "sh", "yy", "chi", "sty", "sky", "yer", "isy"], "i": ["pi", "di", "it", "o", "uri", "loc", "xi", "j", "c", "gi", "ci", "d", "yi", "phi", "a", "io", "ie", "start", "lo", "name", "int", "ind", "n", "ini", "ui", "t", "info", "id", "bi", "ix", "index", "ip", "eni", "si", "u", "iu", "fi", "f", "I", "ti", "e", "b", "ai", "z", "qi", "l", "v", "ii", "lc", "li", "ei", "p"], "is_x": [" is_y", "is_e", "isqxi", " is_e", "is_int", " is_X", "is_X", "isqy", " is_xe", "is_xe", "is_y", "isqx", "is_xi", " is_int", " is_xi", "isqint"], "cur": ["loc", "rest", "sur", "err", "su", "tr", "c", "sch", "cer", "sth", "ver", "sil", "start", "const", "inter", "uc", "ind", "turn", "var", "inc", "aug", "ch", "focus", "result", "circ", "keep", "ah", "cor", "iter", "ctr", "dr", "tri", "sel", "char", "si", "ur", "f", "cry", "scan", "car", "child", "cr", " Cur", "sc", "length", "r", "ser", "se", "ocr", "prev", "Cur", "oc", "rc", "sr", "count"], "x_list": [" x_l", "x_lists", "x_range", "x_List", "y_range", "y_set", "x_l", "xt_range", "y_stack", "xt_listed", "xparlists", "y_List", "xt_lists", " x_lists", "x_left", "xt_list", "xparl", "xparlist", "x_stack", "x_listed", "y_left", "x_set"], "y_list": ["ty_left", "xy_slice", "xy_LIST", "cy_data", "ery_lists", "y__list", "ery_batch", "ty_chain", "y__lists", "y_stack", "cy_queue", "ery_stack", "y_LIST", "ty_list", "y_slice", "y_data", "cy_list", "y__stack", "y_chain", "xy_list", "cy_lists", "ypqueue", "y_pool", "ery_list", "xy_queue", "ypdata", "y_batch", "yplists", "y_lists", "y__batch", "ty_pool", "y_left", "y_queue", "yplist"], "x_possible": ["x67posed", "x_waosed", "x_coved", "x_ppossibility", "x_parossibly", "x_spossible", "x_Poved", "x_aported", "x67psossible", "x67psossibility", "x67psosed", "x_poved", "x_pected", "x_Ported", "x_fpossibility", "x67present", "x_waossible", "x_possibility", "x_nossibly", "x_Possible", "x_waossibility", "x_apential", "x_ported", "x_fpential", "x_ppossible", "x_posed", "x_parossible", "x_Possibility", "x_Pential", "x_noved", "x_psosed", "x_nossible", "x_possibly", "x_apossible", "x67possible", "x_psossibility", "x_parorable", "x_present", "x_ppossibly", "x_Posed", "x_apossibility", "x_psossible", "x_Present", "x_fported", "x_porable", "x_cossibility", "x_spossibility", "x_psresent", "x_spossibly", "x_cossibly", "x67possibility", "x_parossibility", "x_ppected", "x_pential", "x_Possibly", "x_Pected", "x_Porable", "x_spected", "x67psresent", "x_nossibility", "x_waresent", "x_fpossible", "x_cossible"], "x_possible_new": ["x_possible_add", "x_possible__add", "x_possible__New", "x_possible_New", "x_possible_ew", "x_powered_ew", "x_possibility_New", "x_possible_diff", "x_possible_same", "x_powered_New", "x_possible__new", "x_possibility_add", "x_powered_new", "x_possibility_old", "x_possibility_diff", "x_powered_same", "x_possible_old", "x_possible_again", "x_possible_d", "x_possibility_d", "x_possible__again", "x_possibility_again", "x_possible__diff", "x_possibility_new"], "cx": ["pex", "Cw", " cxx", "ccw", "np", "rcxx", " cpx", "Cpx", "ccp", " cc", "ccc", "cc", "cpx", " cp", "cxs", "ncpx", "Cxs", "nw", "rcx", "rcex", " cxs", "pxx", "cp", " cex", "ccx", "cex", " cw", "Cx", "ncw", "cxx", "cw", "ncx", "nc", "ncxs", "rcy"], "px": ["wp", "pex", "pi", "xp", "xi", "c", "ci", "ctx", "xy", "cpp", "col", "pos", "pixel", "pa", "yp", "cs", "ph", "yx", "ax", "mx", "pse", "phy", "cp", "rx", "ct", "ix", "fx", "sq", "xc", "net", "pp", "dx", "pie", "xx", "zx", "wx", "pt", "pm", "cross", "pc", "kit", "xs", "p", "sky", "pe"], "y_possible": ["y_pressossibility", "y_spossible", "y_psossibility", "y_Pential", "y_pocked", "y_pausible", "y_pressressed", "y_pected", "y_opossible", "y_psredict", "y_opbable", "y_peential", "y_predict", "y_psossible", "y_apossible", "y_apausible", "y_pressredict", "y_Pressed", "y_spocked", "y_pbable", "y_possibility", "y_corter", "y_peossible", "y_lpected", "y_compential", "y_lpausible", "y_Porter", "y_oporter", "y_opossibility", "y_Predict", "y_apossibility", "y_cossible", "y_Pected", "y_peossibility", "y_cossibility", "y_pressossible", "y_lpossibility", "y_lpossible", "y_cbable", "y_compending", "y_Possible", "y_pressed", "y_porter", "y_Pocked", "y_Pausible", "y_psressed", "y_spossibility", "y_compossible", "y_apected", "y_peending", "y_compossibility", "y_Pending", "y_Pbable", "y_pending", "y_Possibility", "y_pential", "y_compocked"], "y_possible_new": ["y_possibility_add", "y_possibility_new", "y_possibility_size", "y_possible_add", "y_possible_next", "y_possible_New", "y_possible_size", "y_possibility_New", "y_possibility_next"], "cy": ["sec", "fy", "hy", "c", "Py", "ci", "cycle", "Cy", "xy", "oy", "ky", "ie", "ry", "ly", "zy", "poly", "ce", "ch", "cs", "dy", "chy", "ty", "gy", "cor", "ay", "cp", "ym", "cin", "icy", "yt", "cry", "cos", "my", "ca", "yy", "z", "cr", "kit", "cf", "sky", "vy"], "py": ["pi", "hy", "Py", "np", "xy", "oy", "ky", "bug", "by", "yo", "pa", "pal", "umpy", "yl", "ly", "zy", "yp", "poly", "lie", "yr", "api", "dy", "chy", "python", "gy", "ay", "phy", "ym", "pse", "icy", "iny", "yt", "psy", "Python", "my", "pie", "byn", "apy", "yd", "yy", "z", "li", "kit", "p", "sky", "pe", "vy", "isy"], "nx": [" nxc", " nwx", "Nx", "Nxc", " nxt", "nxc", "newx", "Ny", "ney", "cxc", "neex", "cex", " nex", "cwx", "cxt", "nex", "nxt", "nwx", "Nxt"], "ny": ["note", "NY", "loc", "fy", " dys", "Py", "yn", "nb", "ky", "zy", " spy", "ni", "yr", "dy", "nw", "na", "gy", "mx", "ne", " gy", "ym", "nn", "nan", "lyn", "iny", "nit", "net", "sym", "my", "ns", "yy", "nc", "sky", " sn", "vy", "isy"]}}
{"code": "\\nurl = \"https://atcoder.jp//contests/abc094/tasks/abc094_a\"\\n\\ndef main():\\n    t = list(map(int, input().split()))\\n    for i in range(t[1]):\\n        tmp = i + t[0]\\n        if tmp == t[2]:\\n            print('YES')\\n            exit()\\n    print('NO')\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "488", "substitutes": {"url": ["file", "ls", "http", "open", "feed", "page", "service", "output", "data", "app", "ss", "sl", "view", "api", "rc", "image", "href", "source", "route", "https", "address", "f", "method", "link", "Url", "ref", "path", "URL"], "t": ["o", "tp", "dt", "qt", "x", "bt", "j", "tm", "c", "d", "tc", "tower", "T", "int", "n", "ot", "wt", "s", "tw", "y", "test", "rt", "g", "xt", "ts", "tt", "ct", "tf", "unt", " T", "e", "f", "nt", "b", "gt", "pt", "ta", "l", "v", "template", "flat", "m", "txt", "p", "temp"], "i": ["pi", "x", "j", "c", "gi", "ci", "slice", "phi", "ie", "start", "pos", "int", "ind", "n", "opp", "info", "id", "iq", "y", "h", "ib", "index", "ip", "eni", "si", "u", "iu", "f", "ti", "I", "mi", "q", "ai", "z", "qi", "ii", "m", "li", "p", "temp"], "tmp": ["part", "Temp", "ott", "bt", "kk", "sp", "tc", "img", "nb", "oi", "ie", "diff", "vt", "int", "amp", "test", "cmp", "uni", "offset", "tt", "beta", "st", "si", "treatment", "mp", "foo", "nom", "nt", "obj", "stuff", "sup", "qq", "emp", "txt", "now", "p", "temp", "elt"]}}
{"code": "print(+(' 1\\n'in[*open(0)][1]))", "target": "571", "substitutes": {}}
{"code": "from sys import stdin\\ndef main():\\n    #\u5165\u529b\\n    readline=stdin.readline\\n    t=list(readline().strip())\\n    for i in range(len(t)):\\n        if t[i]==\"?\":\\n            t[i]=\"D\"\\n    \\n    print(\"\".join(t))\\n\\nif __name__==\"__main__\":\\n    main()", "target": "678", "substitutes": {}}
{"code": "def main():\\n    N, K = map(int, input().split())\\n    R, S, P = map(int, input().split())\\n    d = {'r': R, 's': S, 'p': P}\\n    T = input()\\n    scores = []\\n    for t in T:\\n        if t == 'r':\\n            scores.append('p')\\n        elif t == 's':\\n            scores.append('r')\\n        else:\\n            scores.append('s')\\n    for i in range(N-K):\\n        if scores[i] == scores[i+K]:\\n            scores[i+K] = 0\\n    print(sum([d[v] for v in scores if v in ['p', 'r', 's']]))\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "383", "substitutes": {"N": ["U", "D", "NS", "E", "B", "Ns", "n", "W", "J", "Y", "A", "L", "G", "NT", "Size", "NN", "Q", "I", "X", "C", "V", "KN", "O", "H", "M", "F", "Z"], "K": ["U", "KR", "D", "Ku", "k", "IK", "DK", "SK", "E", "KO", "Ak", "B", "KE", "W", "J", "Y", "A", "G", "L", "NK", "KK", "HK", "AK", "Q", "Work", "PK", "X", "C", " k", "V", "Ke", "KN", "TH", "Sk", "KB", "KS", "O", "H", "M", "KC", "F", "Z"], "R": ["U", "D", "Rs", "E", "RS", "RR", "B", "Rh", "W", "RL", "Y", "A", "L", "G", "SR", " r", "RA", "Q", "I", "X", "C", "NR", "V", "r", "O", "M", "F", "RG"], "S": ["U", "SE", "SH", "D", "SS", "NS", "RS", "SK", "SY", "B", "Ns", "Si", "F", "SI", "s", "Y", "A", "L", " s", "G", "SR", "Sa", "St", "DS", "Q", "WS", "I", "X", "C", "V", "SP", "M", "SL"], "P": ["U", "D", "Py", "E", "TP", "PO", "B", "PA", "Ph", "W", "J", "F", "Y", "A", "L", "G", "Power", "RP", "PS", "PI", "Q", "Press", "X", "C", "Ps", "PP", "V", "NP", "M", "p"], "d": ["df", "di", "o", "dom", "D", "dt", "k", "x", "c", "db", "Ds", "pd", "data", "n", "s", "g", "ds", "dh", "do", "dc", "u", "f", "e", "b", " D", "dl", "w", "dict", "z", "l", "m", "r", "dat", "p"], "T": ["D", "DT", "TN", "E", "B", "TS", "W", "Type", "Y", "L", "A", "G", "NT", "Q", "WT", "I", "X", "C", "TT", "V", "p", "O", "M", "F", "Z"], "scores": ["descore", "core", " scoring", "clore", "sporing", "scales", "ucales", "oscores", "Scoring", " scusters", " scanners", "corer", "ucors", "Score", "Scors", "scanners", "clales", " scorer", " scors", " scales", " scars", "descores", "Scores", "scars", "clanners", "SCores", "SCoring", "scors", "SCore", "score", "clors", "cloring", "scoring", "escorer", "spores", "cores", "scusters", "descorer", "scorer", "spanners", "Scorer", "cors", "ucores", "oscars", "clusters", "spales", "Scusters", "escors", "escores", "clores", "ucars", "oscors", "descors", "SCorer", "oscales", " score"], "t": ["it", "at", "dt", "k", "ott", "x", "c", "a", "int", "n", "ot", "typ", "s", "wt", "id", "test", "y", "on", "utt", "ts", "ct", "tt", "tf", "st", "u", "et", "nt", "f", "tim", "sect", "opt", "e", " ti", "ta", "l", "te", "r", "p"], "i": ["ik", "pi", "di", "o", "uri", "k", "x", "xi", "j", "c", "gi", "sp", "ci", "oi", "ri", "ie", "start", "int", "ind", "n", "ui", "ini", "ni", "bi", "id", "info", "api", "ski", "ix", "index", "ip", "eni", "si", "u", "iu", "fi", "e", "ti", "I", "f", "b", "mi", "ki", "adi", "q", "ai", "z", "qi", "l", "ii", "li", "ei", "abi", "ih", "p"], "v": ["o", "k", "ve", "x", "uv", "j", "c", "gu", "ver", "a", "vid", "dev", "vv", "vs", "vt", "n", "vp", "var", "s", "av", "id", "key", "g", "val", "h", "version", "lv", "iv", "qv", "u", "f", "e", "b", "vd", "ev", "q", "V", "w", "sv", "vol", "nv", "l", "m", "r", "p", "vi"]}}
{"code": "data = int(input())\\narray = [int(i) for i in input().split()]\\ndiv2 = 0\\ndiv4 = 0\\nfor i in array:\\n  if i%4==0:\\n    div4 += 1\\n  elif i%2==0:\\n    div2 += 1\\nif data-max(div2-1,0) <= div4*2+1:\\n  print('Yes')\\nelse:\\n  print('No')", "target": "612", "substitutes": {"data": ["area", "pi", "di", "first", "input", "x", "response", "current", "d", "a", "Data", "int", "da", "ata", "num", "list", "arr", "alpha", "api", "na", "div", "image", "parent", "index", "next", "number", "batch", "la", "u", "size", "len", "f", "base", "shift", "DATA", "ada", "li", "dat", "count"], "array": ["area", "string", "type", " Array", "window", "input", "package", "object", "pair", "section", "coll", "record", "int", "instance", "Array", "list", " arrays", "range", "A", "database", "ray", "arr", "alpha", "collection", "image", " arr", "parent", "sample", "index", "number", " index", "row", "function", "address", "shape", "each", "complex", "cube", "count"], "i": ["pi", "di", "ji", "o", "it", "k", "x", "xi", "j", "c", "ci", "d", "yi", "ri", "phi", "oi", "a", "io", "ie", "int", "ind", "n", "uli", "ui", "ini", "t", "ni", "bi", "id", "y", "key", "ix", "index", "ip", "si", "u", "iu", "f", "e", "I", "ti", "b", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "m", "p", "zi"], "div2": ["Div2", " div02", "errtwo", "err2", " div1", "err4", "DivB", "err02", "c02", "Div1", "Div4", "c1", " div12", "div12", "c2", "ctwo", "dec4", "dec2", "div02", " divB", "divtwo", " divtwo", "Div12", "div1", "c4", "decB", "divB", "c12"], "div4": ["Div2", "Div8", "dom4", "img8", "Divfour", "dom2", "dom8", "img2", "Div4", "dev4", "c8", "dev2", "doc2", "img4", " divfour", "imgfour", "c2", "divfour", "cfour", "devfour", "doc8", "docfour", "doc4", " div8", "dev8", "c4", "domfour", "div8"]}}
{"code": "Q, H ,S, D = map(int, input().split())\\nN = int(input())\\n\\ntmp = [Q*4, H*2, S]\\nm = min(tmp)\\n\\nif N == 1:\\n    print(m)\\nelse:\\n    print(min(m*2, D) * (N//2) + m*(N%2))", "target": "404", "substitutes": {"Q": ["U", "MQ", "R", "E", "IQ", "NC", "B", "T", "W", "J", "Y", "A", "L", "G", "X", "C", "q", "V", "Qu", "P", "K", "Query", "O", "M", "F", "Z"], "H": ["SH", "He", "Hi", "HP", "OH", "T", "RH", "W", "HH", "NH", "His", "Y", "L", "FH", "EH", "h", "HS", "Ha", "GH", "X", "HI", "V", "HE", "P", "K", "M", "DH", "F", "Z"], "S": ["U", "SE", "SH", "SS", "NS", "SK", "E", "Ds", "B", "T", "W", "F", "s", "Y", "A", "L", "G", "DS", "X", "C", "V", "P", "K", "M", "SL", "Z"], "D": ["ND", "U", "DT", "d", "E", "Do", "Ds", "B", "T", "W", "Y", "L", "G", "DD", "DM", "DS", "X", "C", "DC", "V", "P", "K", "DL", "M", "DH", "F", "DE", "Z"], "N": ["ND", "U", "NA", "R", "NS", "E", "NE", "NC", "NL", "B", "Ns", "T", "n", "W", "J", "Y", "Ni", "L", "Len", "Num", "NT", "NM", " n", "Size", "NN", "No", "MN", "I", "Number", "X", "NO", "C", "Ne", "NG", "V", "P", "K", "O", "M", "F", "Z"], "tmp": ["tp", "loc", "Temp", "bt", "EMP", "np", "slice", "nm", "img", "tc", "nb", "output", "copy", "dest", "cb", "mult", "vt", "mk", "TB", "array", "rb", "buf", "cmp", "cp", "cm", "zip", "mp", "nom", "Map", "mu", "obj", "buff", "shape", "stuff", "Output", "emp", "flat", "orig", "txt", "MP", "p", "temp", "Now", "km"], "m": ["mini", "U", "o", "j", "tm", "c", "fm", "gm", "d", "nm", "om", "pos", "mod", "n", "s", "num", "mr", "t", "i", "y", "g", "min", "h", "ms", "ym", "md", "cm", "message", "u", "f", "e", "mu", "b", "sm", "q", "pm", "z", "dm", "v", "l", "mean", "hm", "r", "M", "p", "temp", "bm"]}}
{"code": "n,k = [ int(x) for x in input().split() ]\\nif k==1: print( 0 )\\nelse: print( n-k )", "target": "739", "substitutes": {"n": ["o", "kn", "j", "c", "np", "d", "node", "nb", "name", "num", "i", "y", "h", "network", "nn", "index", "nl", "number", "nu", "net", "f", "nt", "e", "b", "ns", "init", "z", "v", "l", "m", "nc", "p", "N"], "k": ["ik", "o", "kn", "ke", "kk", "j", "c", "d", "ak", "kl", "mk", "ck", "ek", "num", "kick", "i", "id", "y", "key", "sk", "g", "unk", "ok", "ks", "kid", "dk", "ko", "u", "spec", "f", "max", "e", "b", "q", "kw", "w", "z", "K", "v", "l", "m", "p", "kr", "km", "ku"], "x": ["string", "xp", "xi", "exp", "d", "xy", "pair", "int", "ww", "num", "t", " xx", "i", "id", "y", "xxx", "val", "rx", "ix", "index", "fx", "number", "ex", "u", "e", "dx", "X", "xx", "xf", "wx", "expl", "z", "v", "xs", "p"]}}
{"code": "s = int(input())\\n\\ny1 = int(1e9)\\nx2 = s//y1 + (0 if s == int(1e18) else 1)\\n\\nx1 = 1\\ny2 = x2*y1-s\\n\\nans = [0, 0, x1, y1, x2, y2]\\n\\nprint(\" \".join(map(str, ans)))", "target": "638", "substitutes": {"s": ["states", "ls", "rs", "o", "sy", "S", "sin", "c", "d", "ws", "ses", "a", "steps", "ss", "als", "ind", "n", "ows", "t", "space", "suff", "i", "cs", "y", "sd", "os", "g", "h", "ts", "ms", "ds", "span", "gs", "lines", "sf", " S", "sq", "south", "si", "u", "size", "sets", "e", "f", "sym", "opt", "b", "ps", "ns", "es", "sb", "sh", "w", "z", "sid", "ims", "l", "v", "sg", "m", "xs", "eps", "p", "hs", "seconds"], "y1": ["y01", "vy1", "y0", "vy01", "yOne", "vy3", "x3", "x6", "eyone", " y01", "ya0", "Y1", "ey1", "eyOne", "x0", "ya01", "xone", "yyone", "Y2", "y6", "Y0", "x01", " y3", " y0", "ey2", "yone", "Y01", "y3", " y6", "ya6", "ya2", "yy2", "ya1", "yyOne", "yy1", "vy2", "xOne"], "x2": ["Xtwo", " yb", "yb", "X2", "xb", "X1", "y4", " xtwo", " xB", "XB", " x4", "yB", "x4", "xtwo", "ytwo", " xb", "xB", "X4"], "x1": ["xf2", "xf9", "y0", " x3", "xf0", "x3", "X2", "y9", "x9", " x0", " x9", "x0", "X1", "y4", "X3", " x4", "xf1", "y3", "x4", "X4"], "y2": ["y0", " x0", "ey1", "x0", " y4", " y5", "y4", " x4", " y0", "ey2", "ey5", "x4", "x5", "y5"], "ans": [" sa", "S", " ants", "ras", "ins", "ars", "ss", " ang", "ants", "an", " span", " means", " so", " spans", "cs", "ians", "ents", "sk", "na", "ant", "anas", " ann", "span", " sins", "can", "anes", "AN", "leans", " Ans", "aned", "ANS", "ann", "lan", "ns", "ane", " ast", "ano", " scans", " support", "ons"]}}
{"code": "n = int(input())\\n\\nt = [0 for i in range(n)]\\na = [0 for i in range(n)]\\n\\nfor i in range(n):\\n    t[i],a[i] = map(int,input().split())\\n\\nt_num = t[0]\\na_num = a[0]\\n\\nfor i in range(1,n):\\n    k = max(-(-t_num//t[i]),-(-a_num//a[i]))\\n    #\u305d\u306e\u6bd4\u306b\u7968\u3092\u5408\u308f\u305b\u308b\\n    t_num,a_num = k*t[i],k*a[i]\\n\\nprint(t_num + a_num)\\n", "target": "128", "substitutes": {"n": ["o", "x", "j", "c", "np", "d", "nb", "s", "an", "num", "y", "h", "network", "nn", "nan", "nu", "u", "net", "f", "fn", "nt", "e", "b", "ns", "sn", "no", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "t": ["o", "tp", "dt", "at", "type", "x", "tu", "j", "c", "d", "tc", "T", "int", "ot", "wt", "num", "y", "test", "g", "ty", "h", "target", "ts", "tt", "u", "f", "e", "nt", "b", "pt", "w", "ta", "z", "l", "v", "m", "p"], "i": ["pi", "it", "o", "di", "ji", "uri", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "oi", "ri", "io", "ie", "cli", "int", "ind", "s", "ui", "ini", "ni", "bi", "id", "iq", "y", "index", "ip", "si", "il", "u", "iu", "e", "I", "ti", "f", "b", "mi", "ki", "im", "ai", "z", "qi", "l", "v", "ii", "li", "ei", "m", "p"], "a": ["ma", "area", "o", "at", "x", "c", "ar", "d", "ac", "ab", "wa", "app", "art", "pa", "ata", "an", "s", "array", "A", "y", "api", "alpha", "na", "sa", "h", "aa", "u", "va", "f", "e", "am", "ad", "b", "ans", "ga", "ai", "ae", "ta", "asa", "ba", "w", "z", "aj", "ao", "ap", "p", "au"], "t_num": ["t_nu", " t_nu", "t_number", "T_block", "t_Num", "t_block", "t_NUM", "t_len", " t_Num", "T_num", " t_len", "T_number", "T_NUM"], "a_num": ["a_sum", "a_span", "a_nom", "p_num", "p_sum", "ca_range", "p_NUM", "ca_info", "ca_num", "a_info", "a_range", "p_span", "a_NUM", "ca_nom"], "k": ["it", "kn", "kk", "j", "c", "ky", " K", "id", "sk", "g", "ks", "u", "f", "e", "q", "kw", "w", "z", "K", "l", "v", "m", "r", "p", "kr", "km"]}}
{"code": "n = int(input())\\na = n//11\\nprint(2*a if n%11==0 else 2*a+1 if n%11<=6 else 2*a+2)", "target": "241", "substitutes": {"n": ["NA", "o", "x", "j", "c", "d", "nm", "nb", "nd", "s", "num", "an", "A", "t", "ni", "i", "y", "na", "g", "act", "nan", "nn", "un", "net", "f", "e", "nt", "rn", "b", "ns", "pn", "none", "sn", "no", "z", "dn", "l", "gn", "zn", "m", "r", "nc", "nin", "p", "ne", "N", "conn"], "a": ["area", "x", "input", "c", "aw", "ac", "ab", "action", "all", "da", "an", "num", "A", "i", "y", "alpha", "na", "sa", "h", "aa", "f", "b", "am", "ad", "ca", "ga", "ai", "w", "ae", "z", "ba", "aaa", "l", "ea", "aj", "m", "p", "N", "au"]}}
{"code": "def main():\\n    n = int(input())\\n    l = list(map(int, input().split()))\\n    l.sort(reverse=True)\\n    ans = 0\\n    for i in range(1, 2*n, 2):\\n        ans += l[i]\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "215", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "s", "num", "t", "ni", "g", "count", "en", "h", "nn", "nl", "u", "len", "e", "f", "b", "ns", "w", "z", "v", "m", "r", "nc", "ln", "p", "N"], "l": ["el", "lp", "ls", "o", "loc", "ol", "le", "lf", "ul", "c", "left", "kl", "fl", "sl", "ll", "list", "s", "t", "L", "g", "nl", "lis", "la", "il", "u", "len", "los", "lb", "f", "e", "b", "dl", "lc", "v", "li", "m", "ln", "p"], "ans": ["offs", "ls", "san", "aning", "nas", "ras", "ins", "a", "ars", "ants", "ens", "an", "s", "anc", "ats", "asts", "cs", "ents", "anon", "sk", "na", "os", "anas", "ds", "ks", "nan", "nn", "span", "ana", "anes", "can", "lines", "AN", "cas", "aned", "len", "leans", "ANS", "atan", "ann", "lan", "ns", "sn", "errors", "es", "ani", "mean", "aus", "ons", "au"], "i": ["pi", "ji", "k", "x", "xi", "j", "c", "gi", "ci", "yi", "a", "start", "ind", "ni", "bi", "id", "y", "on", "h", "index", "ip", "eni", "si", "u", "e", "I", "f", "end", "ti", "b", "mi", "ai", "z", "qi", "v", "ii", "m", "li", "r", "p"]}}
{"code": "###template###\\nimport sys\\ndef input(): return sys.stdin.readline().rstrip()\\ndef mi(): return map(int, input().split())\\n###template###\\n\\nN = int(input())\\nA = input()\\nB = input()\\nC = input()\\n\\nans = 0\\nfor a, b, c in zip(A, B, C):\\n  ans += len(set((a,b,c)))-1\\n\\nprint(ans)\\n\\n", "target": "648", "substitutes": {}}
{"code": "import sys\\n\\n\\ndef solve(inp):\\n    A = list(map(int, inp.readline().strip().split(' ')))\\n\\n    if A[0] <= A[2] <= A[1]:\\n        return \"Yes\"\\n    else:\\n        return \"No\"\\n\\n\\ndef main():\\n    result = solve(sys.stdin)\\n    if result:\\n        print(result)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "706", "substitutes": {"inp": ["INh", "pinP", "Inh", "inh", "pinf", "INsp", "winf", " inh", "inP", " infp", "winP", "wing", "ping", "innp", "Infp", "infp", "Insp", "Inp", "pinp", "innf", "inf", "insp", "INfp", "INp", "inng", "winp", "innP", "ing", " insp"], "A": ["As", "U", "NA", "D", "Result", "S", "UA", "angle", "Alpha", "a", "B", "CA", "All", "T", "PA", "W", "mA", "Action", "Array", "Y", "L", "G", "AM", "Sa", "alpha", "Ma", "HA", "GA", "SA", "OA", "An", "AP", "LA", "AV", "I", "AA", "App", "C", "AST", "MA", "ga", "P", "FA", "K", "API", "O", "H", "M", "AC", "F", "N", "au"], "result": ["grade", "exit", "Result", "success", "err", "work", "response", "results", "runner", "event", "output", "fail", "data", "value", "complete", "report", "diff", "valid", "root", "info", "test", "ret", "master", "null", "error", "main", "function", "message", "final", "f", "default", "obj", "res", "match", "status", "dict", "draw", "sign", "r", "comment", "p", "rate"]}}
{"code": "n, p = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nlength = len(a)\\neven = len([i for i in a if i % 2 == 0])\\nodd = len([i for i in a if i % 2 == 1])\\n\\nif length == even and p == 1:\\n    print(0)\\nelif length == even:\\n    print(2 ** n)\\nelse:\\n    print(2 ** n // 2)", "target": "515", "substitutes": {"n": ["k", "x", "j", "c", "d", "nb", "name", "ny", "num", "t", "y", "g", "en", "h", "network", "nn", "un", "number", "u", "size", "len", "fn", "f", "e", "nt", "b", "ns", "pn", "w", "z", "l", "v", "m", "nc", "ne", "N"], "p": ["pi", "integer", "tp", "o", "type", "part", "j", "c", "np", "d", "point", "pa", "ot", "per", "array", "t", "split", "ant", "h", "period", "number", "pp", "e", "f", "b", "padding", "q", "power", "w", "P", "l", "r", "ap", "pe", "count"], "a": ["ma", "area", "auto", "it", "at", "ya", "input", "x", "j", "c", "ar", "ab", "ac", "wa", "art", "int", "args", "all", "an", "s", "array", "A", "ata", "fa", "t", "y", "alpha", "sa", "aa", "u", "e", "f", "b", "am", "ad", "ga", "ai", "ae", "w", "aaa", "ba", "z", "ta", "l", "aj", "m", "au"], "length": ["type", "case", "distance", "partial", "off", "point", "angle", "sum", "ength", "section", "long", "ll", "L", "weight", "width", "h", "span", "number", "character", "how", "len", "size", "Length", "e", "code", "shape", "match", "pl", "sh", "power", "position", "l", "style", "duration", "ln", "form", "count"], "even": ["Even", "numbered", "common", "partial", "plus", "done", "off", "d", "down", "left", "only", "mult", "diff", "long", "zen", "double", "inc", "own", "zero", "floor", "div", "en", "multiple", "day", "number", "e", "one", "end", "other", "pl", "equal", "position", "sign", "now", "up", "pe", "different", "two", "wrong"], "i": ["ik", "pi", "di", "o", "it", "ji", "iw", "k", "x", "input", "j", "xi", "c", "ait", "ci", "d", "io", "ie", "int", "s", "ini", "list", "t", "ios", "y", "key", "g", "ia", "index", "ip", "ine", "si", "u", "iu", "f", "I", "mu", "e", "b", "hi", "im", "ai", "z", "chi", "v", "l", "ii", "ic", "m", "li", "ei"], "odd": ["o", "part", "partial", "off", "d", "only", "three", "art", "diff", "both", "opp", "own", "alpha", "split", "div", "ow", "day", "then", "pp", "e", "dd", "sup", "none", "other", "power"]}}
{"code": "s=input()\\nprint('Heisei' if eval(s.replace('/','')+'<=20190430') else 'TBD')", "target": "545", "substitutes": {"s": ["services", "ls", "string", "o", "S", "http", "ssl", "su", "input", "c", "search", "d", "a", "data", "session", "src", "n", "abs", "t", "space", "strings", "i", "g", "comments", "h", "ts", "source", "u", "e", "f", "b", "ns", "es", "sb", "w", "sv", "l", "v", "m", "r", "p"]}}
{"code": "n, k = map(int, input().split())\\na = list(map(int, input().split()))\\ndp = [None]*(k+1)\\nind = 0\\nwhile ind<a[0]:\\n    dp[ind] = False\\n    ind += 1\\nfor i in range(ind, k+1):\\n    for j in a:\\n        if i-j<0:\\n            dp[i] = False\\n            break\\n        if not dp[i-j]:\\n            dp[i] = True\\n            break\\n    else:\\n        dp[i] = False\\nprint('First' if dp[k] else 'Second')\\n", "target": "93", "substitutes": {"n": ["o", "c", "np", "nm", "nb", "ny", "ni", "g", "en", "network", "inn", "nn", "span", "nr", "fn", "f", "rn", "adj", "ns", "sn", "z", "v", "ii", "m", "nc", "p", "ne", "N"], "k": ["ik", "o", "kn", "ke", "x", "kk", "c", "d", "ak", "ky", "mk", "ck", "id", "y", "sk", "unk", "h", "ok", "ks", "dk", "ko", "u", "size", "f", "e", "b", "q", "w", "kw", "z", "K", "kind", "v", "length", "m", "p", "km", "N", "ku"], "a": ["area", "auto", "sta", "c", "ar", "d", "ab", "wa", "ac", "pa", "da", "args", "an", "s", "array", "A", "fa", "ata", "alpha", "na", "sa", "ana", "span", "next", "aa", "u", "va", "e", "f", "b", "am", "ad", "ca", "ans", "ga", "ai", "ae", "w", "aaa", "z", "l", "ea", "m", "p", "ka"], "dp": ["wp", "df", "lp", "tp", "type", "dt", "di", "pb", "db", "sp", "np", "d", "nb", "data", "pair", "diff", "pos", "int", "direction", "hp", "amp", "var", "DP", "array", "pkg", "wd", "alpha", "password", "api", "qa", "dim", "ds", "cp", "dr", "dc", "ip", "rep", "mp", "dep", "e", "dd", "pp", "b", "ga", "dl", "drop", "pm", "dm", "params", "deb", "dist", "dump", "dat", "p", "gp", "fp"], "ind": ["di", "Ind", "loc", "x", "c", "d", "ci", "find", "old", "ie", "start", "diff", "nd", "pos", "int", "inc", "ini", "id", "y", "inner", "div", "inn", "dr", "index", "nt", "f", "end", "b", "ad", "adj", "inf", "q", "pt", "init", "IND", "z", "qi", "l", "ii", "length", "dist", "p", "count"], "i": ["pi", "di", "ji", "o", "x", "xi", "c", "ci", "d", "oi", "phi", "io", "ie", "start", "int", "ui", "ini", "t", "ni", "id", "y", "ix", "index", "eni", "si", "u", "iu", "f", "I", "ti", "e", "b", "hi", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "m", "p"], "j": ["ji", "o", "js", "x", "c", "d", " ii", "ie", "start", "int", "oj", "J", "num", "t", "id", "iq", " dj", "y", "ij", "ib", "index", "jl", "si", "u", "ja", "f", "I", "e", "b", "jj", "im", "ai", "dj", "q", "z", "w", "v", "jp", "ii", "l", "li", "aj", "p"]}}
{"code": "A,B,C = (int(T) for T in input().split())\\nprint(min(A+B,B+C,C+A))", "target": "269", "substitutes": {"A": ["U", "Ca", "D", "S", "R", "E", "a", "CA", "BB", "W", "Y", "AD", "L", "G", "Ab", "AS", "HA", "AY", "SA", "EA", "TA", "Ar", "CAR", "I", "AA", "X", "Ang", "App", "V", "P", "K", "AF", "AH", "AB", "API", "AC", "M", "F", "N", "LA"], "B": ["U", "Bu", "D", "BF", "R", "E", "LB", "BB", "TB", "BBC", "W", "BE", "Y", "L", "G", "Ab", "NB", "Blue", "BI", "OB", "GB", "Bs", "Q", "BL", "DB", "QB", "WB", "b", "X", "FB", "V", "MB", "P", "BC", "AB", "M", "F", "Bur", "N"], "C": ["U", "CI", "Ca", "D", "S", "c", "R", "E", "CT", "GC", "W", "Y", "L", "CU", "G", "YC", "Q", "SC", "Count", "I", "X", "Sc", "DC", "V", "P", "CC", "Cs", "K", "VC", "H", "M", "TC", "F", "CM", "N", "CL"], "T": ["U", "D", "S", "TN", "R", "E", "W", "TB", "Dim", "J", "Y", "t", "L", "G", "Part", "Sent", "Col", "Opt", "Co", "WT", "Comb", "Tu", "I", "X", "Na", "TT", "V", "P", "Text", "K", "Sp", "O", "H", "M", "Tr", "F", "N", "Z"]}}
{"code": "n = int(input())\\nprcnt = (n - n // 2) / n\\nprint(prcnt)", "target": "197", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "d", "left", "node", "nb", " N", "name", "pos", "all", "s", "num", "t", "i", "y", "count", "nn", "nan", "bin", "number", "nr", "u", "len", "net", "size", "f", "fn", "e", "nt", "b", "max", "ns", "pn", "sn", "no", "nor", "z", "l", "v", "m", "r", "nc", "ln", "p", "ne", "N"], "prcnt": [" pracnt", "prncpt", "prcant", " prcrt", "prrount", "pracnt", " prpcnt", "prpcant", "prcct", " prpcant", "prncant", "prrct", "prpcount", "prcrt", "prrnt", "prlcnt", " prcant", "prcount", "prpcct", " prpcct", " pracct", "pracount", "prrrt", "prlcpt", "prlcant", " prpcpt", "prpcrt", "prcpt", " prcpt", "prncnt", " pracount", "prncct", " prcct", "pracrt", "prpcpt", " pracrt", "prlcct", " prcount", "pracct", "prpcnt"]}}
{"code": "from collections import Counter\\n\\nN = int(input())\\nD = list(map(int, input().split()))\\nM = int(input())\\nT = list(map(int, input().split()))\\n\\nc1 = Counter(D)\\nc2 = Counter(T)\\n\\nfor t in c2.keys():\\n    if c2[t] > c1[t]:\\n        print(\"NO\")\\n        exit()\\nprint(\"YES\")", "target": "210", "substitutes": {"N": ["NA", " L", "NS", "E", "NC", "Ns", "n", " C", "Y", "L", "Num", "NT", "NM", " n", "NN", "I", "X", "NO", "C", "V", "P", "K", "O", "F", "Z"], "D": ["ND", "Dou", "DT", "S", "CD", "d", "LD", "Do", "E", "Ds", "FD", "Y", "DA", "L", "Di", "DP", "DD", "DM", "DS", "MD", "DI", "Q", "X", "C", "DF", "DC", "P", "DN", "DH", "F", "DE"], "M": ["R", "E", "B", "W", "Y", "G", "L", "NM", "MD", "MS", "MN", "Q", "I", "C", "TM", "NUM", "V", "P", "MM", "MC", "K", "MT", "m", "O", "F", "MF", "Z"], "T": ["U", "S", "R", "E", "CT", "B", "TS", "W", "J", "Type", "Y", "L", "G", "MD", "TA", "PT", "Q", "LT", "X", "C", "TT", "TM", "TX", "V", "P", "K", "MT", "O", "AT", "F", "Z"], "c1": ["cv3", "c0", "CFirst", "pb", "cb", " c3", "p0", "cv1", "cvFirst", " cFirst", "C0", "C3", "cv2", "C1", "c3", " cb", "Cb", "p2", " c0", "cFirst", "p1", "C2"], "c2": ["c0", "n0", "v2", "rc1", "pTwo", "rc0", "rc2", "CTwo", "C0", "Ctwo", "Call", "v0", "C1", "pall", "n2", "ctwo", " call", "v1", " ctwo", "p2", " c0", "cTwo", "n1", "p1", "vtwo", "C2", " cTwo", "call"], "t": ["type", "tp", "dt", "o", "at", "k", "x", "j", "c", "d", "to", "col", "name", "int", "n", "ot", "wt", "num", "s", "i", "id", "test", "y", "key", "time", "rt", "ts", "tt", "u", "e", "tim", "ti", "nt", "f", "tip", " ti", "no", "pt", "w", "ta", "v", "l", "m", " type", "p", "temp"]}}
{"code": "# Python3 (3.4.3)\\nimport sys\\ninput = sys.stdin.readline\\n\\n# -------------------------------------------------------------\\n# function\\n# -------------------------------------------------------------\\n\\n\\n# -------------------------------------------------------------\\n# main\\n# -------------------------------------------------------------\\nA = int(input())\\nS = input().rstrip()\\n \\nprint(S if A>=3200 else \"red\")", "target": "90", "substitutes": {}}
{"code": "h, a = map(int, input().split())\\namari = h % a\\nshou = h // a\\nif amari == 0:\\n    print(shou)\\nelse:\\n    print(shou +1)", "target": "496", "substitutes": {"h": ["o", "home", "ha", "oh", "c", " H", "n", "rh", "s", "i", "id", "y", "ph", "alpha", "g", "ah", "hd", "hh", "div", "u", "f", "e", "end", "b", "hi", "q", "sh", "w", "z", "v", "l", "hm", "m", "H", "he", "ih", "p", "hs"], "a": ["area", "c", "d", "ac", "action", "n", "all", "an", "s", "A", "fa", "i", "y", "alpha", "bar", "g", "sa", "ah", "ia", "span", "index", "aa", "u", "va", "f", "e", "b", "ad", "ca", "am", "ga", "ai", "w", "ae", "z", "l", "aj", "m", "p", "au"], "amari": ["marian", "amaru", "mai", "emarian", " amaru", "mari", " amai", " amarian", "acaru", " amani", "emari", "Amaru", "emai", "amarian", "Amai", "emani", " amadi", "amai", "Amari", "acai", "acari", "acadi", "mani", "amadi", "amani", "Amadi"], "shou": [" shoo", "hou", "shue", "khoo", "khOU", "khouri", "SHour", "Shou", " shari", "hari", "hoo", "hour", "khoy", " shour", "shouri", "qoo", " shoul", "que", "qoy", " shue", "khoul", "shari", "khue", "shoy", "qou", " shoy", "ShOU", "shour", "shOU", "Shouri", "shoo", "SHari", "SHou", "SHoo", "khou", "Shoul", " shouri", " shOU", "shoul"]}}
{"code": "def main():\\n    n = int(input())\\n    dp = [0 for _ in range(n + 1)]\\n    for i in range(n):\\n        p = int(input())\\n        dp[p] = dp[p - 1] + 1\\n    non_move = 0\\n    for i in range(n + 1):\\n        non_move = max(non_move, dp[i])\\n    print(n - non_move)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "525", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "name", "num", "s", "t", "y", "g", "en", "network", "nn", "un", "nu", "number", "u", "size", "net", "e", "f", "max", "nt", "b", "ns", "pn", "sn", "no", "w", "P", "z", "v", "l", "m", "nc", "ne", "N"], "dp": ["wp", "lp", "pi", "tp", "loc", "dt", "df", "pb", "pg", "db", "sp", "np", "d", "port", "data", "pos", "direction", "hp", "DP", "result", "dim", "ds", "cp", "dr", "index", "dc", "ip", "address", "e", "pp", "imp", "ps", "shape", "dl", "P", "dm", "position", "params", "bb", "deb", "dist", "eps", "dat", "gp", "fp"], "_": ["o", "k", "x", "j", "ind", "num", " int", "id", "ix", "ip", "il", "u", "f", "I", " num", "q", "ai"], "i": ["pi", "o", "k", "x", "xi", "j", "c", "ci", "d", " I", "a", " ii", "start", "io", "pos", "int", "ind", "t", "id", " j", "ix", "index", "ip", "u", "iu", "f", "I", "e", "b", "ai", "z", "qi", "l", "v", "ii", "li", "m", "r"], "p": ["pi", "tp", "o", "k", "x", "j", "c", "np", "d", "port", "a", "start", "pos", "int", "num", "t", "y", "h", "ip", "u", "e", "f", "b", "pn", "q", "w", "P", "z", "position", "v", "l", "m", "r"], "non_move": [" non_size", "non\u00b7move", " non__move", "non\u0441game", "non_moving", "non_draw", " non__position", "non__move", " non_position", "nonJsize", " non_draw", "non__position", " non__size", "non_change", "nonJmove", "non_action", "non\u0441action", "nonacmotion", "non_game", " non_moving", "non\u00b7game", "non_size", "nonJmotion", "non\u00b7change", "non\u0441change", "non_walk", "nonJposition", "nonacmoving", " non_action", "nonacmove", "non__motion", "non_position", "non__size", " non_game", "non\u0441move", " non_change", "nonacdraw", " non__motion", " non_motion", " non_walk", "non\u00b7action", "non_motion"]}}
{"code": "from collections import Counter\\nN=int(input())\\nC=Counter(list(map(int, input().split())))\\n# print(C)\\nans=0\\nfor i in C:\\n  j=C[i]\\n  if j>=i:\\n    ans+=j-i\\n  else:\\n    ans+=j\\nprint(ans)", "target": "536", "substitutes": {"N": ["D", "S", "R", "NS", "NC", " I", "B", "Ns", "T", "n", " O", "Y", "L", "CNN", "NT", " n", " M", "I", "X", "V", "P", "K", "O", "M", "F", "Z"], "C": ["U", "CI", "D", "S", "CL", "c", "R", "E", "NC", "B", "T", "A", "L", "CNN", " c", "I", "X", "V", "P", "CC", "K", "O", "M", "F", "CM", "Z"]}}
{"code": "D = int(input())\\nC = list(map(int, input().split()))\\nS = [list(map(int, input().split())) for _ in range(D)]\\nT = [int(input()) for _ in range(D)]\\nv = 0\\nlast = [0] * 26\\nfor d in range(D):\\n    # ct:current type\\n    ct= T[d] - 1\\n    last[ct] = d + 1\\n    # \u4eca\u56de\u306e\u6e80\u8db3\u5ea6\\n    v += S[d][ct]\\n    # \u4e0d\u6e80\u5ea6\u3092\u5f15\u304f\\n    v -= sum([C[t] * (d + 1 - last[t]) for t in range(26)])\\n    print(v)", "target": "506", "substitutes": {"D": ["SE", "DT", "Done", "CD", "R", "Do", "E", "LD", "Ds", "FD", "DIR", "B", "Day", "DO", "W", "STD", "Y", "JD", "DA", "DP", "L", "Part", "DD", "DM", "DOS", "DS", "DI", "Q", "DB", "X", "DEF", "DF", "DC", "V", "P", "K", "DL", "O", "M", "F", "DE", "N", "Z"], "C": ["U", "CI", "CN", "c", "R", "E", "B", "W", "Y", "A", "G", "L", "Q", "SC", "CS", "X", "V", "P", "CC", "Cs", "K", "O", "M", "F", "CM", "N", "Z"], "S": ["SE", "U", "SH", "SS", "R", "E", "B", "W", "Si", "J", "SI", "s", "Y", "A", "L", "G", "ST", "Q", "SC", "X", "V", "P", "H", "M", "N", "Z"], "_": ["out", "x", " un", "ac", "__", " time", "all", "non", " j", "val", "ay", "f", "ad", " block"], "T": ["U", "DT", "TN", "R", "E", "TS", "W", "Y", "t", "L", "TA", "Q", "WT", "X", "TG", "TT", "V", "P", "TV", "O", "H", "M", "F", "N", "Z"], "v": ["o", "k", "x", "j", "uv", "c", "value", "vt", "n", "s", "t", "i", "g", "tv", "h", "u", "f", "e", "b", "q", "V", "w", "sv", "z", "l", "m", "r", "p"], "last": [" U", "start", " next", " H", " first", " max", " s", " j", " n", "h", " r", " Z", " f", "Last", " z", " w", " c", "u", " t", "max", "end", " i", " prev", " start", "prev", "p", " Last"], "d": ["x", "j", "c", "a", "dec", "ind", "n", "i", "id", "g", "ay", "f", "ad"]}}
{"code": "from collections import defaultdict\\n\\n\\ndef solve():\\n    N = int(input())\\n    D = list(map(int, input().split()))\\n    M = int(input())\\n    T = list(map(int, input().split()))\\n    cnt = defaultdict(int)\\n    for d in D:\\n        cnt[d] += 1\\n    for t in T:\\n        if cnt[t] <= 0:\\n            print('NO')\\n            return\\n        cnt[t] -= 1\\n    print('YES')\\n\\n\\nif __name__ == \"__main__\":\\n    solve()\\n", "target": "210", "substitutes": {"N": ["NA", "S", "R", "E", "B", "Ns", "n", "Y", "L", "G", "Num", "NB", "NT", " n", "NN", "Q", "I", "X", "NO", "C", "V", "P", "K", "O", "F", "Z"], "D": ["ND", "U", "DT", "S", "CD", "E", "Do", "LD", "Ds", "FD", "DO", "PD", "Y", "JD", "DA", "DP", "G", "L", "A", "DD", "DM", "DS", "MD", "Q", "DI", "I", "X", "C", "DF", "P", "DL", "DN", "O", "F"], "M": ["U", "S", "R", "E", "B", "W", "Y", "G", "L", "MD", "MS", "MN", "Q", "I", "X", "C", "TM", "V", "P", "MM", "MC", "MT", "O", "m", "H", "F", "Z"], "T": ["U", "OT", "Ti", "FT", "DT", "S", "Tom", "E", "CT", "TS", "W", "J", "Type", "TE", "AT", "Y", "L", "UT", "NT", "MD", "TA", "PT", "Q", "WT", "LT", "X", "C", "TG", "TT", "V", "Me", "P", "RT", "MT", "TH", "O", "TF", "TC", "F", "Z"], "cnt": ["ctct", "cno", "rcno", "lcgt", "Cnc", "lcnt", " cno", " cpt", "cgt", "Cno", "rcnn", "lcrt", " cgt", "dcgt", "rcount", "cnn", "Cgt", "dcct", "Cnn", "dcnt", "Cpt", "dcrt", "cnc", "ctnt", "Cnt", "cct", "Count", "lcct", "ctgt", " cnc", "rcnc", "Cct", " count", " cnn", "rcnt", " crt", "ctnc", "cpt", "rcpt", " cct", "crt", "count"], "d": ["di", "type", "dom", "dt", "o", "k", "x", "od", "j", "c", "de", "start", "du", "nd", "ind", "n", "i", "td", "id", "y", "fd", "dig", "ds", "do", "dh", "md", "dc", "nt", "dd", "ti", "e", "ad", "f", "dl", "w", "ta", "z", "p", "dm", "l", " td", "cd", "m", "dat", "ld"], "t": ["it", "type", "o", "dt", "qt", "x", "tu", "j", "c", "tm", "to", "name", "int", "n", "ot", "s", "i", "td", "y", "test", "time", "ty", "ant", "ts", "tt", "ct", "unt", "mt", "f", "ti", "nt", "e", "pt", "w", "ta", "z", "v", "l", "m", "p", "tn"]}}
{"code": "a,b,c,d=map(int,input().split())\\ne=max(a,c)\\nf=min(b,d)\\nif e<f:\\n  print(f-e)\\nelse:\\n  print(0)", "target": "146", "substitutes": {"a": ["x", "ab", "ac", "int", "n", "da", "an", "s", "A", "fa", "i", "y", "alpha", "min", "sa", "aa", "la", "u", "max", "ad", "am", "ae", "w", "z", "asa", "l", "m", "r", "p", "au"], "b": ["eb", "x", "db", "ab", "ac", "B", "bc", "bd", "n", "rb", "bi", "i", "y", "bs", "g", "fb", "ib", "aa", "wb", "u", "lb", "ad", "sb", "be", "w", "ba", "v", "l", "r", "m", "bb", "p"], "c": ["k", "x", "cy", "ci", "col", "ac", "bc", "fc", "n", "s", "i", "cs", "y", "ec", "g", "cp", "dc", "cu", "u", "max", "end", "ad", "ca", "C", "w", "z", "l", "r", "m", "cf", "p"], "d": ["D", "dt", "k", "x", "j", "db", "nd", "bd", "n", "da", "s", "t", "i", "dy", "g", "fd", "ds", "dc", "u", "dd", "dx", "ad", "w", "z", "v", "l", "cd", "r", "m", "dat", "p"], "e": ["ffe", "ze", "oe", "eu", "o", "eb", "x", "j", "E", "ie", "n", "F", "s", "ce", "t", "ef", "efe", "i", "y", "ec", "fe", "g", "h", "u", "size", "max", "ee", "ed", "es", "ev", "ae", "z", "v", "l", "eeee", "ea", "m", "r", "p", "pe"], "f": ["o", "x", "j", "ie", "fl", "fc", "n", "F", "t", "ef", "rf", "i", "eff", "y", "fe", "g", "h", "fff", "fx", "sf", "aff", "u", "inf", "fen", "q", "w", "z", "l", "v", "ea", "fee", "m", "bf", "r", "cf", "p", "form"]}}
{"code": "s = input()\\nw = int(input())\\n\\nv = [s[i:i+w] for i in range(0, len(s), w)]\\n\\nfor x in v:\\n    print(x[0], end='')\\nprint('\\n')    \\n", "target": "313", "substitutes": {"s": ["states", "ls", "o", "services", "S", "input", "c", "d", "ses", "a", "data", "ss", "vs", "n", "t", "space", "strings", "cs", "y", "g", "h", "sq", "si", "u", "f", "e", "b", "ps", "ns", "es", "sb", "sv", "z", "ves", "l", "sc", "m", "r", "xs", "p"], "w": ["wp", "iw", "k", "fw", "wl", "c", "aw", "way", "d", "ws", "wa", "W", "n", "wt", "t", "weight", "tw", "y", "wave", " W", "width", "sw", "g", "h", "we", "word", "wal", "win", "ew", "rw", "u", "max", "wx", "q", "kw", "z", "l", "m", "r", "wh", "p", "temp"], "v": ["o", "k", "cover", "j", "uv", "c", "cv", "d", "value", "vv", "vs", "vt", "vin", "n", "vp", "var", "array", "t", "av", "y", "g", "val", "h", "version", "lv", "vals", "u", "e", "f", "b", "vd", "q", "V", "sv", "z", "l", "m", "r", "p"], "i": ["pi", "di", "k", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "oi", "phi", "a", "start", "pos", "int", "ind", "n", "ini", "bi", "id", "ix", "index", "eni", "si", "u", "iu", "f", "ti", "I", "e", "mi", "hi", "ki", "ai", "z", "l", "ii", "m", "p", "zi"], "x": ["o", "k", "xi", "j", "c", " y", "d", "xy", "a", "data", "int", "n", "t", "y", "xxx", "ax", "h", "sex", "ix", "index", "ex", "u", "f", "e", "b", "X", "xx", "xes", "q", "z", "l", "m", "xs", "p"]}}
{"code": "import math\\n\\ndef make_divisors(n):\\n    divisors = []\\n    for i in range(1, int(n**0.5)+1):\\n        if n % i == 0:\\n            divisors.append(i)\\n            if i != n // i:\\n                divisors.append(n//i)\\n\\n    # divisors.sort()\\n    return divisors\\n\\n\\ns = input()\\n#a = list(map(int, input().split()))\\n\\nmode=0\\nans=0\\nanum=0\\nbanum=0\\nfor i in range(len(s)):\\n    if(mode==0 and s[i]=='A'):\\n        anum+=1\\n    elif(mode==1 and s[i]=='A'):\\n        anum=1\\n        mode=0\\n    elif(mode==0 and s[i]=='B'):\\n        mode=1\\n    elif(mode==1 and s[i]=='B'):\\n        mode=0\\n        anum=0\\n    elif(mode==0 and s[i]=='C'):\\n        mode=0\\n        anum=0\\n    elif(mode==1 and s[i]=='C'):\\n        mode=0\\n        ans += anum\\n    #print(ans)\\n\\nprint(ans)\\n", "target": "305", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "np", "d", "node", "nb", "a", "num", "an", "non", "t", "ni", "y", "g", "network", "nn", "nan", "un", "nu", "number", "u", "net", "fn", "nt", "e", "adj", "b", "ns", "f", "pn", "sn", "no", "z", "dn", "l", "v", "gn", "m", "nc", "ln", "p", "ne", "N"], "divisors": ["divistor", "divasions", "decidions", "divisor", "guidores", "divisorers", "divestions", "guisORS", "dividions", "divistors", " divisor", "decisions", "divasors", "divestorers", "divxORS", "divistions", "guidored", "guidors", " divisored", "dividorers", "divxors", "divistorers", "guisors", "divistORS", "divistored", "guidORS", "divestors", "decidors", "divisored", "dividored", "divxores", "guisores", "dividor", "divisores", "divisions", "decisors", "divestor", "divistores", " divistors", " divistions", " divistor", "dividores", "decisor", "decisorers", "dividORS", "divasored", "divasor", "decidor", "dividors", "decidorers", "divisORS", " divisions", "guisored", " divistored", "divxored"], "i": ["pi", "o", "k", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "phi", "oi", "a", "io", "start", "ori", "int", "ind", "ini", "ni", "bi", "id", "y", " j", "ix", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "m", "r", "p", "zi"]}}
{"code": "\\nimport sys\\nsys.setrecursionlimit(10**8)\\ninput = sys.stdin.readline\\nN = int(input())\\nA = [[] for _ in range(N)]\\nfor i in range(N):\\n    A[i] = [i-1 for i in map(int, input().split())]\\n\\n\\ndef pair(x,y):\\n    if x<y:\\n        return (x,y)\\n    else:\\n        return (y,x)\\n\\nto_index = dict()\\nto_pair = dict()\\nidx = 0\\nfor i in range(N):\\n    for j in range(i+1,N):\\n        to_index[(i,j)] = idx\\n        to_pair[idx] = (i,j)\\n        idx += 1\\n    \\nMAX_N = idx\\n# DAG TopoSort\\nin_count = [0]*MAX_N\\nedge = [[] for _ in range(MAX_N)]\\n\\nfor i in range(N):\\n    for j in range(N-2):\\n        vnum = to_index[pair(i,A[i][j+1])]\\n        pvnum = to_index[pair(i, A[i][j])]\\n        edge[pvnum].append(vnum)\\n\\nfor i in range(MAX_N):\\n    for v in edge[i]:\\n        in_count[v] += 1\\n\\nS = []\\nL = [] #Sort\u7d50\u679c\\nindex = [0]*MAX_N # \u9802\u70b9v\u306eL\u306b\u304a\u3051\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9index[v]\\nans = 0\\n\\nfor i in range(MAX_N):\\n    if in_count[i]==0: S.append(i)\\n\\nwhile S:\\n    ans += 1\\n    new = []\\n    for _ in range(len(S)):\\n        v = S.pop()\\n        index[v] = len(L)\\n        L.append(v)\\n        for nv in edge[v]:\\n            in_count[nv] -= 1\\n            if in_count[nv]==0:\\n                new.append(nv)\\n    S = []\\n    for n in new:\\n        S.append(n)\\n\\n\\nif len(L) != MAX_N:\\n    print(-1)\\n    exit()\\nprint(ans)", "target": "782", "substitutes": {"input": ["socket", "U", "empty", "out", "open", "feed", "c", "current", "param", "argument", "raw", "output", "PUT", "data", "a", "expression", "diff", "int", "view", "pull", "array", "config", "update", "IN", "result", "call", "get", "keep", "target", "url", "image", "sample", "parent", "index", "source", "request", "error", "parse", "help", "reader", "reading", "reset", "select", "buffer", "init", "memory", "filter", "include", "form", "accept", "length", "Input", "exec", "temp", "method"], "N": ["Node", "NA", "D", "S", " NI", "R", "NS", " I", "NC", "B", "Ns", "T", "n", "W", "J", "Y", " C", "L", "Ni", "Len", "Num", "Part", "NB", "NT", "NM", " n", "Size", " Ne", "No", "Q", "Count", "I", "X", "NO", "C", "Na", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["As", "NA", "D", "S", "E", "Alpha", "a", "B", "CA", "All", "T", "W", "At", "Array", "Y", "array", "G", "L", "AM", "AD", "AS", "SA", "AP", "Ar", "I", "AA", "X", "AST", "C", "V", "P", "API", "K", "AF", "O", "H", "M", "LA"], "_": ["k", "ind", " time", "all", " int", "id", "ix", "ip", " id", "I"], "i": ["pi", "di", "o", "it", "ji", "iw", "k", "xi", "c", "ci", "d", "yi", "ri", "phi", "a", "ie", "start", "int", "ind", "n", "uli", "ui", "ni", "bi", "id", "ix", "index", "ip", "si", "u", "iu", "e", "I", "ti", "f", "b", "ai", "z", "p", "v", "l", "ii", "li", "m", "ei", "io", "zi"], "x": ["o", "ya", "xi", "px", "c", "d", "xy", "point", "a", "data", "value", "int", "n", "id", "tx", "key", "xxx", "ax", "yx", "xt", "ay", "ix", "index", "ox", "ex", "u", "e", "f", "dx", "one", "b", "X", "xx", "q", "w", "z", "v", "l", "m", "xs", "right", "p"], "y": ["ey", "type", "o", "wy", "sy", "ya", "xi", "c", "d", "xy", "yi", "oy", "ky", "a", "ry", "ny", "yo", "int", "n", "Y", "zy", "t", "id", "dy", "ty", "yx", "ay", "ix", "index", "py", "u", "e", "f", "b", "X", "xx", "yy", "w", "z", "v", "m", "p", "vy"], "to_index": ["to_order", " to_part", "toxorder", "toxlist", "toxarray", "to_array", "to_list", "from_index", "from_list", " to_array", "toxindex", "toxpair", "from_array", "toxpart", "from_order", "to_part"], "to_pair": [" to_air", "to__part", "to__index", " to_part", " to_match", "toxair", "to__pair", "to_key", "to_air", "toxpair", "toxpart", "to_match", "to__match", " to_key", "toxkey", "to_part"], "idx": ["IdX", " idz", "indx", "idn", "namex", "Idn", " idxx", "indxc", " idy", "indindex", "iddx", "idxs", "indexx", " iddx", "Idxc", " idex", "indexxx", "idX", " idindex", "Iddx", "idexc", "Idxs", "idxx", "namej", "idxc", "indexxc", " idj", "IDxs", "Idindex", "index", "ideX", "indy", "IDx", "Idx", "idz", "idindex", "namey", " idxs", " idX", " idxc", "IDxc", " idn", "Idz", "idj", "indj", "iden", "indexdx", "inddx", "IDz", "idy", "idex", "nameex", "indxx"], "j": ["ji", "o", "js", "k", "xi", "c", "d", "a", "ie", "ind", "n", "J", "oj", " dj", "ij", "h", "ix", "job", "jl", "index", "jo", "u", "ja", "f", "e", "obj", "adj", "b", "jj", "je", "q", "w", "z", "v", "jp", "l", "ii", "li", "r", "m", "p", "uj"], "MAX_N": ["MAXADNS", "MAXJNS", "MAXJN", " MAX_K", " MAXADK", "MAXJM", " MAX_M", "MAXLOGN", "MAXLOGNS", " MAXADM", "MAXLOGK", "MAXLOGM", " MAXADNS", "MAXADM", "MAXJK", "MAXADN", "MAXADK", " MAX_NS", "MAX_M", "MAX_K", "MAX_NS", " MAXADN"]}}
{"code": "import sys\\nfrom collections import defaultdict\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nMOD = 10**9 + 7\\nP = 2 ** 127 - 1\\n\\nN = int(readline())\\nm = map(int, read().split())\\nA, B = zip(*zip(m, m))\\n\\npow2 = [1] * (N + 10)\\nfor n in range(1, N + 10):\\n    pow2[n] = pow2[n - 1] * 2 % MOD\\n\\ndef mod_P(x):\\n    if x < 0:\\n        x += P\\n    high = x >> 127\\n    low = x & P\\n    x = low + high\\n    if x >= P:\\n        x -= P\\n    return x\\n\\ndef inv_mod(a):\\n    b = P\\n    u, v = 1, 0\\n    while a:\\n        q, r = divmod(b, a)\\n        a, b = r, a\\n        u, v = v - q * u, u\\n    if b < 0:\\n        v = -v\\n    if v < 0:\\n        v += P\\n    return v\\n\\npair_key = {0:-1, -1:0}\\n\\ndef to_key(a, b):\\n    if a == 0:\\n        return -1\\n    if b == 0:\\n        return 0\\n    \\n    x = mod_P(inv_mod(a) * abs(b))\\n    if b < 0:\\n        x = P - x\\n    y = P - mod_P(inv_mod(b) * abs(a))\\n    if a < 0:\\n        y = P - y\\n    pair_key[x] = y\\n    return x\\n\\n  \\ncounter = defaultdict(int)\\norigin = 0\\nfor a, b in zip(A, B):\\n    if a == b == 0:\\n        origin += 1\\n        continue\\n    key = to_key(a, b)\\n    counter[key] += 1\\n\\nanswer = origin\\nk = 1\\nfor key, cnt in counter.items():\\n    key1 = pair_key[key]\\n    if key1 not in counter:\\n        k *= pow2[cnt]\\n    elif key < key1:\\n        x, y = cnt, counter[key1]\\n        k *= pow2[x] + pow2[y] - 1\\n    k %= MOD\\nanswer += k - 1\\nanswer %= MOD\\nprint(answer)\\n", "target": "86", "substitutes": {"read": ["wrap", "file", "sync", " write", "RW", "open", "input", "feed", "work", "search", "current", "find", "reads", "raw", "lex", "data", "by", " stream", "ind", "re", "bind", "config", "loop", "seek", " Reader", "get", "g", "connect", " reader", "source", "index", "write", "stream", " Read", "run", "play", "parse", "f", "default", "reader", "reading", "Read", "load", "end", " reads", "each", "rec", "new", "scan", "buffer", "Reader", "memory", "add", "READ", "exec", " copy", "align", "method"], "readline": [" readpage", "inLine", "writelines", " readLine", "readblock", "readnumber", "loadpage", "writeline", "checkLine", "checkline", "inlines", "checknumber", "getpage", "writeblock", "getlines", "writenumber", "getline", "loadblock", "writeLine", "loadline", "inline", "getLine", "loadnumber", "loadlines", "loadLine", "readLine", "readpage", "checklines", "inblock"], "readlines": ["loadfiles", " readitems", "Readls", "readls", "readitems", "readtimes", "readerlines", " readtimes", "readerline", "loadls", "Readline", "readeritems", "loaditems", "Readfiles", "loadtimes", "loadline", " readls", "readfiles", "loadlines", "Readlines", "readertimes", " readfiles"], "MOD": ["U", "RC", "LM", "MAG", "D", "S", "ARM", "DEBUG", "JR", "R", "XX", "PUT", "FD", "mult", "T", "mod", "MAC", "Y", "OK", "OFF", "Power", "SIZE", "RM", "MD", "MAX", "MS", "FORM", "MODE", "Q", "I", "OR", "XY", "X", "NO", "C", "Mod", "NUM", "power", "MIN", "ID", "K", "CC", "MM", "ACK", "COM", "M", "F", "Z"], "P": ["U", "PU", "D", "S", "Max", "R", "E", "TP", "PO", " p", "PUT", "HP", "T", "PA", "W", "PM", "F", "J", "Y", "G", "L", "LP", "Power", "IP", "RP", "GP", "PI", "AP", "Q", " M", "I", "X", "C", "FP", "PE", "PP", "V", "K", "CP", "JP", "NP", "O", "H", "M", "p", "Z"], "N": ["ND", "U", "D", "S", "R", "NS", "NL", "NC", "Ns", "T", "J", "F", "Y", "L", "G", "Ni", "Num", "NT", "NM", " Ne", " M", "Q", "I", "X", "C", "NUM", "Ne", "V", "K", "O", "H", "M", "p", "Z"], "m": ["o", "mc", "j", "c", "fm", "om", "d", "nm", "mult", "rm", "s", "i", "mn", "h", "ms", "ym", "md", "cm", "f", "mu", "e", "sm", "mm", "pm", "w", "dm", "l", "M", "p", "bm"], "A": ["As", "U", "Ca", "S", "Ak", "CA", "T", "At", "an", "Y", "array", "G", "L", "Am", "alpha", "Ma", "An", "Ar", "I", "AA", "X", "C", "K", "H", "M", "p", "LA"], "B": ["U", "D", "BM", "BF", "BS", "R", "E", "BB", "T", "UB", "W", "Y", "L", "G", "NB", "BA", "BI", "GB", "Bs", "DB", "WB", "X", "C", "V", "MB", "BC", "AB", "O", "M", "F", "Z"], "pow2": ["POW8", "pay1", "powe1", " pow4", "powe4", "Pow3", "pow1", "pay62", " pow1", "pcow4", "pay4", "pcow2", " pOW6", "pOW4", "paw2", "pow8", "pows1", "power1", "paw3", "paw1", "powe8", "pow62", "pOW3", " pOW4", "poy4", "powe3", "pOW6", "POW62", "POW2", "pow6", "POW1", "power4", "pOW62", "Pow2", "pow3", "pOW8", "Pow4", "pows2", "Pow1", "pOW2", "pcow8", "Pow8", " pOW1", "pcow3", "pows62", "Pow62", "poy2", "POW4", "pows6", "pows4", "POW3", " pow6", " pOW2", "pcow1", "power2", "pay2", "powe2", "power6", "paw4", "pow4", "poy1", "pOW1"], "n": ["o", "cn", "j", "c", "d", "nb", "num", "t", "ni", "i", "h", "nn", "un", "number", "nt", "e", "f", "ns", "pn", "sn", "w", "z", "l", "nc", "p", "ne"], "x": ["o", "xp", "xi", "px", "j", "c", "d", "xy", "point", "name", "value", "int", "ux", "re", "Y", "num", "t", "i", " X", "python", "xxx", "g", "xa", "ax", "h", "xt", "xe", "val", "rx", "abc", "mx", "ix", "index", "host", "ex", "xc", "e", "f", "max", "dx", "X", "xx", "code", "xf", "ed", "xes", "wx", "es", "w", "z", "rex", "l", "xs", "php", "p", "pe"], "high": ["core", "rest", "full", "open", "close", "large", "value", "diff", "maximum", "long", "inc", "num", "range", "initial", "ph", "alpha", "phase", "min", "h", "index", "highest", "peak", "default", "max", "hop", "end", "X", "hi", "higher", "mid", "High", "prev", "fast", "pe", "top"], "low": ["mode", "open", "c", "large", "old", "short", "medium", "lo", "little", "diff", "pos", "slow", "Low", "long", "range", "min", "big", "lower", "last", "f", "max", "e", "end", "hi", "power", "z", "l", "mid", "small", "flow"], "a": ["ma", "area", "o", "c", "ar", "d", "ama", "ac", "ab", "ie", "art", "pa", "da", "an", "s", "fa", "i", "alpha", "api", "na", "g", "sa", "ah", "h", "ia", "ra", "aa", "la", "ach", "va", "f", "e", "am", "ca", "ad", "ga", "ai", "ae", "w", "z", "ba", "asa", "l", "ao", "aj", "ea", "ap", "p", "ka", "au"], "b": ["o", "eb", "mb", "j", "c", "db", "d", "ob", "nb", "ab", "bh", "s", "an", "rb", "t", "bi", "i", "api", "bs", "bar", "g", "h", "ib", "aa", "wb", "f", "e", "ad", "base", "sb", "w", "be", "z", "ba", "ae", "l", "bf", "bb", "p"], "u": ["U", "pi", "o", "uv", "ul", "c", "um", "d", "uc", "s", "ui", "t", "ch", "i", "g", "h", "ue", "nu", "cu", "iu", "ur", "e", "f", "us", "uu", "w", "z", "l", "lu", "ru", "p", "up", "ou"], "v": ["U", "o", "inv", "ve", "j", "uv", "c", "d", "xy", "ver", "value", "vv", "vt", "s", "vp", "t", "ch", "i", "g", "val", "h", "vc", "iv", "va", "f", "e", "ed", "V", "w", "sv", "z", "l", "ru", "p", "qu", "vy"], "q": ["U", "o", "j", "c", "d", "qs", "s", "t", "ch", "i", "g", "h", "Q", "e", "f", "sh", "w", "z", "l", "p", "qu"], "r": ["o", "inv", "j", "c", "R", "d", "ar", "s", "rb", "t", "i", "g", "h", "pr", "ra", "f", "e", "w", "z", "l", "ru", "p", "sr"], "pair_key": ["pairptype", "pair__call", "pair__key", "pair_box", "pairablebox", "pairablecall", "pair_index", " pair_type", "pair2index", "group__call", "pair2keys", "pair_type", "group_key", "pair__box", " pair_keys", "group_call", "group_Key", "pairablekey", "group_box", " pair_index", "group__key", "group__box", "pairableKey", "pair_call", "pairpkey", "pairpindex", "group__Key", "pair_Key", "pair2key", "pair__Key", "pair_keys"], "y": ["ey", "o", "type", "sy", "ya", "j", "cy", "c", "d", "yn", "oy", "ry", "ny", "yo", "year", "Y", "ye", "t", "i", "yr", "dy", "g", "ty", "h", "ay", "ym", "py", "e", "f", "yy", "w", "z", "l", " Y", "p", "vy"], "counter": ["history", "currency", "field", "central", "cover", "trace", "reference", "er", "c", "current", "page", "response", "Counter", "wrapper", "inter", "scope", "coll", "record", "switch", "center", "instance", "race", "num", "array", "aver", "browser", "cache", "range", "cmp", "result", "rc", "entry", "time", "original", "offset", "change", "timer", "ounter", "server", "header", "cm", "master", "index", "number", "error", "ception", "function", "stack", "controller", "code", "match", "outer", "cont", "scan", "buffer", "store", "status", "book", "skip", "conf", "comment", "order", "cube", "over", "user", "count"], "origin": ["core", "o", "loc", "here", "extra", "err", "trace", "unknown", "axis", "c", "after", "current", "Origin", "scale", "feature", "start", "center", "race", "depth", "remote", "margin", "range", "ignore", "result", "inner", "prefix", "original", "offset", " Origin", "span", "source", "index", "host", "radius", "background", "country", "max", "cos", "position", "location", "color", "orig", "ace", "border", "star"], "key": ["core", "type", "o", "case", "element", "j", "cy", "connection", "page", "c", "feature", "service", "point", "col", "name", "section", "value", "ie", "ry", "rule", "int", "year", "go", "ck", "option", "remote", "i", "id", "entry", "date", "change", "ay", "parent", "query", "co", "index", "ip", "number", "box", "row", "char", "address", "ask", "e", "hop", "ee", "code", "match", "base", "ame", "link", "no", "Key", "ace", "KEY", "text", "order", "p", "count"], "answer": ["area", "integer", "grade", "average", "field", "element", "err", "object", "response", "search", "question", " answers", "account", "output", "data", "value", "ell", "pixel", "fix", "race", "archive", "array", "cache", "update", "result", "prefix", "entry", "analysis", "score", "offset", "image", "query", "word", "index", "cm", "error", "number", "row", "message", "replace", "reply", "issue", "address", "size", "aster", "knowledge", "term", "Answer", "equ", "edge", "status", "memory", "z", "air", "ace", "now", "order", "p", "activity", "rank", "evidence"], "k": ["ik", "o", "kn", "ke", "kk", "j", "c", "ak", "ky", "kh", "mk", "ck", "ek", "i", "result", "sk", "g", "h", "ok", "ks", "uk", "dk", "row", "ko", "issue", "e", "f", "ask", "code", "ki", "tk", "kw", "w", "z", "K", "p", "kr", "km", "ku"], "cnt": ["cannot", "CNT", "cno", "lcnn", "lcnt", " cno", " cned", "Cannot", "Cned", "Cno", "lcNT", "acannot", "acnt", "cnn", " cannot", "Cnn", "acNT", " cNT", "cned", "Cnt", "Count", "cNT", "pnt", " count", " cnn", "lcned", "pnn", "pount", "pNT", "acno", "count"], "key1": [" key2", "index2", "k0", "key3", "field01", "index1", " key3", "k3", "key0", "Key1", "index0", "code0", "keyOne", "index3", "codeone", "index01", "key01", "KeyOne", " key0", "Key0", "code2", "value0", "field1", "code1", "key2", "keyone", "kone", " key01", "k1", "k2", " keyOne", "field0", "valueOne", "value1", " keyone"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nMOD = 10 ** 9 + 7\\nINF = float('INF')\\nsys.setrecursionlimit(10 ** 5)\\n\\n\\ndef main():\\n    n = int(readline())\\n    a = list(map(int, readline().split()))\\n\\n    i = 0\\n    ans = 0\\n\\n    while i < n:\\n        s = a[i]\\n        j = i\\n        k = i\\n        while j < n and s <= a[j]:\\n            s = a[j]\\n            j += 1\\n        while k < n and s >= a[k]:\\n            s = a[k]\\n            k += 1\\n        i = max(j, k)\\n        ans += 1\\n\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "226", "substitutes": {"readline": [" readfile", "Readname", " readLine", "readblock", "readwrite", "loadpass", "readlines", "Readlin", " readname", "playLine", "Readline", "loadLINE", " readwrite", "playlines", "playname", "readinglines", "readingfile", "readingline", "ReadLine", " readlines", "loadfile", "readpass", "Readblock", " readlin", "loadblock", "playline", " readLINE", "loadline", "Readwrite", "playwrite", "readfile", " readpass", "readLINE", "loadlines", "loadLine", "readLine", "playLINE", "loadlin", "readname", "readlin", "readingpass", " readblock"], "MOD": [" m", " lim", "S", " L", " R", "Max", " buffer", "R", " CR", "mod", " buf", " MB", " C", "L", "Len", "SIZE", " mod", "MAX", " M", " function", "I", "C", " magic", "Mod", " F", "M", "F"], "INF": ["PINFF", " INFF", "INFF", "PINF", "inFER", "inFF", "INFER", " INFER", "inF", "PINFER"], "n": ["o", "x", "c", "np", "d", " N", "nb", "sum", "ny", "Ns", "num", "non", "t", "ni", "y", "na", "g", "min", "en", "network", "nn", "nan", "span", "un", "number", "norm", "u", "net", "len", "size", "e", " ni", "nt", "f", "ns", "pn", "sn", "no", "w", "z", "l", "sign", "v", "length", "m", "nc", "nin", "p", "ne", "N"], "a": ["ma", "area", "auto", "access", "sta", "work", "mac", "c", "aw", "current", "ama", "wa", "ab", "ac", "app", "aux", "ast", "args", "da", "an", "array", "A", "fa", "y", "alpha", "api", "na", "qa", "sa", "ia", "za", "aa", "la", "u", "va", "active", "oa", "b", "am", "ad", "ca", "ga", "ai", "ae", "aaa", "l", "ea", "aj", "ao", "m", "p", "au"], "i": ["ik", "pi", "o", "ji", "x", "xi", "asi", "anti", "c", "ci", "d", "yi", "ie", "start", "ori", "int", "an", "ini", "ati", "ui", "ni", "t", "id", "y", "ski", "eni", "si", "u", "ami", "iu", "e", "I", "f", "b", "hi", "ki", "q", "ai", "z", "qi", "v", "l", "ii", "m", "li", "p", "vi"], "ans": ["kn", "x", "asi", "san", "aning", "ci", "ins", "reads", "aos", "ars", "ants", "amps", "an", "anc", "ni", "ians", "ams", "sk", "ski", "na", "os", "anas", "ks", "ids", "nan", "ana", "anes", "ism", "lines", "AN", "aned", "ania", "ANS", "activation", "I", "ann", "lan", "ns", "ki", "ai", "ani", "ano", "K", "l", "ln", "p", "aus", "au"], "s": ["states", "parts", "o", "services", "S", "ssl", "c", "d", "sum", "start", "times", "args", "an", "t", "space", "y", "points", "g", "sa", "os", "h", "min", "flows", "span", "gs", "lines", "sites", "posts", "frames", "south", "si", "u", "size", "sets", "spec", "e", "sym", "f", "rings", "b", "resses", "ns", "ments", "ps", "tests", "w", "state", "z", "sid", "v", "l", "rooms", "groups", "m", "words", "erences", "eps", "p", "group", "seconds"], "j": ["kj", "ik", "ji", "o", "js", "x", "c", "d", "ijk", "jon", "ie", "jc", "oj", "J", "y", "os", "ij", "h", "bj", "jl", "jo", "si", "u", "ja", "f", "e", "je", "jet", "b", "jj", "q", "dj", "z", "qi", "v", "jp", "ii", "l", "m", "aj", "li", "p", "uj"], "k": ["kj", "ik", "o", "kn", "ke", "x", "kk", "c", "ak", "ijk", "ky", "mk", "ck", "kick", "y", "sk", "kg", "ka", "g", "ok", "ks", "uk", "kid", "dk", "ko", "u", "f", "e", "b", "ki", "q", "w", "kw", "z", "K", "v", "l", "m", "p", "kr", "km", "ku"]}}
{"code": "import sys\\nimport math\\nfrom collections import deque\\n\\nsys.setrecursionlimit(1000000)\\nMOD = 10 ** 9 + 7\\ninput = lambda: sys.stdin.readline().strip()\\nNI = lambda: int(input())\\nNMI = lambda: map(int, input().split())\\nNLI = lambda: list(NMI())\\nSI = lambda: input()\\n\\n\\ndef make_grid(h, w, num): return [[int(num)] * w for _ in range(h)]\\n\\n\\ndef main():\\n    H, W, K = NMI()\\n    dp = make_grid(H+1, W, 0)\\n    move = make_grid(W, W, 0)\\n\\n    dp[0][0] = 1\\n\\n    for case in range(2**(W-1)):\\n        bad_case = False\\n        prev_bit = -1\\n        for i in range(W-1):\\n            now_bit = (case >> i) & 1\\n            if now_bit == prev_bit == 1:\\n                bad_case = True\\n            prev_bit = now_bit\\n        if bad_case:\\n            continue\\n\\n        for b in range(W):\\n\\n            if b == 0:\\n                if (case >> 0) & 1:\\n                    move[0][1] += 1\\n                else:\\n                    move[0][0] += 1\\n\\n            elif b == W - 1:\\n                if (case >> b - 1) & 1:\\n                    move[b][b - 1] += 1\\n                else:\\n                    move[b][b] += 1\\n\\n            else:\\n                if (case >> b - 1) & 1:\\n                    move[b][b - 1] += 1\\n                elif (case >> b) & 1:\\n                    move[b][b + 1] += 1\\n                else:\\n                    move[b][b] += 1\\n\\n    for h in range(1, H+1):\\n        for w in range(W):\\n            for i in range(W):\\n                dp[h][w] += dp[h-1][i] * move[i][w]\\n\\n    print(dp[H][K-1]%MOD)\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "240", "substitutes": {"MOD": ["SE", "U", "SH", "mode", "LM", "MAG", "TW", "FD", "RH", "WR", "mod", "MAC", "ZI", "Len", "SIZE", "RM", "MD", " mod", "LOG", "MS", "CF", "WH", "ME", "OR", "X", "SW", "CW", "Mod", "NUM", "OW", "P", "MM", "ID", "CC", "MIN", "REM", "Mi", "M", "LOC", "Z"], "input": ["unit", "type", "empty", "string", "interface", "element", "out", "unknown", "feed", "current", "param", "point", "argument", "raw", "output", "PUT", "data", " Input", "format", "temp", "int", "view", "single", "pull", "amp", "RAW", "array", "config", "IN", "result", "INT", "inner", "qa", "image", "command", "parent", "source", "request", "index", "null", "main", "digit", "error", "model", " inputs", "parse", "help", "insert", "select", "load", "inf", "filter", "position", "init", "example", "form", "ref", "Input", "up", "block", "call"], "NI": ["ND", "CI", "NA", "II", " NP", "NV", "np", "NS", "NC", "Ns", "NH", "Ni", "ni", "NT", "network", "NN", "PI", "MN", "nu", "DI", "nr", "MI", "NO", "NG", "NP", "Mi", "nc", "NZ"], "NMI": ["DMI", "RAI", "CNAI", "FMi", "NAI", "NTNI", "LNI", "RNI", "NNI", "NTSI", "FMI", "FSI", "NNLI", "CNLI", "NMi", "NNPI", "NTMI", "DMi", "NPI", "LLI", "LMI", "NNAI", "CNMI", " NMi", "FMS", "RPI", "NMS", "LSI", "CNPI", "RSI", " NMS", "NTLI", "DMS", "RLI", "NSI", "DSI", "RMI", "NNMI", " NSI"], "NLI": ["LLI", "nLA", " NLP", " NLA", "LLP", "NLP", "nLI", "LLA", "nLP", "nMI", "NLA", "LMI"], "SI": ["SE", "CI", "SH", "II", "sit", "sci", "SK", "IZ", "Si", "Sa", "sa", "SA", "IP", "PI", "DI", "IO", "si", "LG", "SC", "ITS", "SG", "IS", "SM", "SP", "sg", "INS", "IM", "LA"], "h": ["o", "loc", "k", "x", "oh", "j", "c", "hw", "d", "ht", "wa", "n", "HH", "rh", "s", "ch", "id", "y", "ph", "g", "ah", "hh", "th", "u", "f", "max", "e", "end", "hr", "hi", "q", "sh", "P", "z", "uh", "v", "l", "hm", "m", "r", "p", "hs"], "w": ["k", "fw", "x", "wl", "c", "aw", "hw", "wan", "d", "ws", "wa", "n", "ww", "wt", "wk", "s", "wd", "y", "id", "weight", "width", "sw", "g", "we", "word", "win", "ew", "wb", "u", "f", "max", "wx", "q", "kw", "z", "v", "l", "r", "m", "wh", "p"], "num": ["unit", "loc", "k", "x", "c", "np", "d", "ng", "node", "col", "sum", "nb", "a", "pos", "n", "inc", "rh", "Num", "id", "uni", "na", "div", "dim", "index", "number", "nu", "multi", "u", "nom", "mu", "max", "f", "fn", "NUM", "init", "m", "p", "temp", "N"], "_": ["x", "week", "all", "time", "ow", "ip", "row", "f", "p", "l"], "H": ["U", "SH", "D", "S", "HC", "R", "Hi", "B", "RH", "T", "HH", "J", "Y", "G", "L", "Wh", "EH", "Q", "WH", "Ha", "I", "X", "C", "HI", "V", "P", "O", "M", "F", "CH", "N", "Z"], "W": ["GW", "U", "D", "S", "Width", "BW", "Sw", "R", "Weight", "wa", "B", "WR", "T", "EW", "F", "Y", "L", "Wh", "G", "WP", "DW", "NW", "FW", "Q", "WA", "Wa", "WC", "WS", "WH", "WB", "wb", "I", "X", "SW", "WN", "C", "CW", "Win", "DC", "V", "We", "P", "MW", "WM", "O", "WE", "VW", "M", "WD", "N", "Z"], "K": ["U", "SH", "D", "k", "S", "R", "SK", "B", "T", "n", "J", "Y", "L", "G", "Wh", "HK", "Q", "I", "X", "C", " k", "V", "P", "kw", "KS", "O", "M", "F", "N", "Z"], "dp": ["wp", "lp", "df", "tp", "di", "dt", "DT", "dos", "pb", "pg", "db", "np", "d", "TP", "port", "pd", "data", "prep", "hp", "DP", "pkg", "wd", "ph", "DD", "ds", "cp", "GP", "dr", "dB", "dc", "ip", "py", "pad", "DI", "mp", "pp", "address", "dep", "moving", "imp", "VP", "DC", "dl", "drop", "P", "dm", "ep", "pm", "jp", "NP", "grad", "bb", "deb", "dump", "dat", "p", "gp"], "move": ["Move", "ma", "MO", "use", "unit", "grade", "loc", "work", "scale", "node", "create", "transfer", "pos", "carry", "switch", "gro", "ge", "direction", "action", "go", "game", "apply", "update", "range", "man", "roll", "block", "push", "live", "change", "do", "word", "md", "mate", "gram", "model", "delete", "player", "replace", "route", "address", "parse", "play", "moving", "run", "send", "remove", "shape", "match", "place", "new", "shift", "mor", "drop", "position", "draw", "add", "adjust", "m", "ace", "make", "order", "M", "p", "up", "motion", "DE"], "case": ["type", "c", "cycle", "uc", "B", "trial", "ce", "bi", "cases", "time", "qa", "phase", "ow", "ase", "ti", "end", "shape", "position", "p", "count", "chance", "mode", "part", "loc", "x", "gi", "ci", "switch", "space", "ch", "weight", "id", "client", "comb", "SC", "code", "match", "shift", "sc", "li", "r", "ace", "when", "Case", "condition", "core", "use", "section", "lo", "app", "instance", "config", "we", " c", "xc", "u", "e", "v", "place", "ice", "choice", "U", "aw", "pair", "bug", "name", "bc", "test", "key", "force", "change", "sea", "size", "address", "ai", "chain", "pe", "wi"], "bad_case": ["badfCase", " bad_but", " bad_config", "bad_Case", "badfcase", "bad_config", " bad_Case", " bad_shape", "badfshape", "bad_shape", "badfcases", "badurecache", " bad_cache", "bad_cases", "badureCase", "bad_cache", "bad_but", "badurecase", " bad_cases", "badurebut"], "prev_bit": [" prev_mask", "prev__hit", "next_bin", "prev_bin", "prev__int", "prev64bits", "prev64mask", "prev__bit", "prev_hit", "prev_mask", "next_bit", "next_int", "prev67bit", "prev_key", "prev64bit", "prevsint", "prevshit", "prev67key", " prev_bits", "prev_bits", "prev_BIT", "prev64id", "prev_int", "prevsbin", "prev64key", "prevsbit", "next_hit", "prev64BIT", "prev__bin", "prev67BIT", "prev_id", " prev_id", " prev_key", " prev_BIT", "prev67mask"], "i": ["pi", "di", "o", "it", "iw", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "io", "ie", "int", "ind", "n", "s", "ui", "t", "bi", "id", "y", "g", "ib", "ip", "u", "iu", "f", "ti", "I", "e", "hi", "q", "ai", "z", "qi", "l", "v", "ii", "li", "m", "r", "ih", "p", "wi"], "now_bit": ["now_bits", "current_day", "nowalbit", "current_mask", "current_bit", "now__bug", " now_bug", "new_bits", " now_id", "current_bug", "nowalBIT", "now64bit", " now_BIT", "now_index", "nowalbits", "new_index", "now64bug", "now64day", "now_BIT", "now_id", "now_mask", "now64mask", "now_bug", "now__BIT", "new_bit", "nowalindex", "now__bit", "now_day", "now__id", "new_BIT"], "b": ["auto", "o", "eb", "k", "mb", "x", "j", "c", "db", "d", "cb", "nb", "ob", "ab", "a", "bh", "B", "bc", "bd", "n", "rb", "ch", "t", "bi", "bas", "y", "bs", "bar", "body", "g", "fb", "gb", "change", "ib", "big", "bin", "aa", "wb", "br", "u", "lb", "e", "f", "base", "sb", "be", "z", "ba", "v", "l", "lc", "m", "r", "bb", "bf", "p", "block"]}}
{"code": "n = int(input())\\nh = [int(i) for i in input().split()]\\n# dp\u306e\u6700\u5c0f\u5024\u3092\u5909\u66f4\u3059\u308b\u95a2\u6570\\ndef chmin(a, b):\\n    if a > b:\\n        return b\\n    else:\\n        return a\\n    \\n# \u7121\u9650\u5927\u306e\u5024\\nf_inf = float('inf')\\n# DP \u30c6\u30fc\u30d6\u30eb\u3092\u521d\u671f\u5316\u3000(\u6700\u5c0f\u5316\u554f\u984c\u306a\u306e\u3067 INF \u306b\u521d\u671f\u5316)\\ndp = [f_inf] * (10**5+10)\\n# \u521d\u671f\u6761\u4ef6\\ndp[0] = 0\\n# \u8db3\u5834 i \u304b\u3089\u8db3\u5834 i+1 \u3078\u79fb\u52d5\u3059\u308b\u3002\u30b3\u30b9\u30c8\u306f|h[i]\u2212h[i+1]|\\n# \u8db3\u5834 i \u304b\u3089\u8db3\u5834 i+2 \u3078\u3068\u79fb\u52d5\u3059\u308b \u30b3\u30b9\u30c8\u306f |h[i]\u2212h[i+2]|\\nfor i in range(n-1):\\n    dp[i + 1] = chmin(dp[i + 1], dp[i] + abs(h[i] - h[i + 1]))\\n    # n-2\u306e\u6642\u306f2\u3064\u5148\u306f\u306a\u3044\\n    if i < n-2:\\n        dp[i + 2] = chmin(dp[i + 2], dp[i] + abs(h[i] - h[i + 2]))\\nprint(dp[n-1])", "target": "5", "substitutes": {"n": ["o", "k", "c", "node", "nb", "name", "num", "t", "g", "nn", "u", "f", "fn", "e", "b", "ns", "q", "w", "v", "l", "m", "r", "ln", "p", "N"], "h": ["height", "o", "x", "c", "bh", " H", "rh", "hp", "ch", "y", "body", "hh", "header", "th", "f", "hr", "hi", "q", "sh", "w", "uh", "z", "l", "hm", "H", "ih", "p", "hs"], "i": ["pi", "ji", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "phi", "ri", "oi", "a", "ind", "ini", "ui", "t", "bi", "id", "key", "ij", "index", "si", "u", "iu", "fi", "f", "ti", "I", "e", "q", "ai", "z", "chi", "qi", "v", "ii", "li", "ei", "p"]}}
{"code": "N,M=input().split()\\nprint(\"Yes\" if N==M else \"No\")", "target": "54", "substitutes": {"N": ["D", "S", "R", "NS", "E", "B", "Ns", "T", "n", "J", "W", "Y", "A", "L", "G", "NT", "NM", " n", "NN", "No", "MN", "Q", "I", "X", "NO", "C", "NR", "V", "Me", "P", "K", "O", "F", "Name", "Z"], "M": ["U", "MO", "LM", "D", "R", "MK", "B", "OM", "T", "W", "J", "L", "DM", "NM", "MS", "MN", "Q", "ME", "MON", "C", "MA", "MH", "V", "P", "MM", "SM", "MT", "m", "O", "MP", "H", "F", "CM", "MF"]}}
{"code": "class UnionFind:\\n  def __init__(self, n):\\n    self.parent = [i for i in range(n)]\\n    self.height = [0 for i in range(n)]\\n        \\n  def get_root(self, i):\\n    if self.parent[i] == i:\\n      return i\\n    else:\\n      self.parent[i] = self.get_root(self.parent[i])\\n      return self.parent[i]\\n            \\n  def unite(self, i, j):\\n    root_i = self.get_root(i)\\n    root_j = self.get_root(j)\\n    if root_i != root_j:\\n      if self.height[root_i] < self.height[root_j]:\\n        self.parent[root_i] = root_j\\n      else:\\n        self.parent[root_j] = root_i\\n        if self.height[root_i] == self.height[root_j]:\\n          self.height[root_i] += 1\\n                \\n  def is_in_group(self, i, j):\\n    if self.get_root(i) == self.get_root(j):\\n      return True\\n    else:\\n      return False\\n    \\nN, M = map(int, input().split())\\ngraph = list()\\nans = 0\\nfor i in range(M):\\n  a, b = map(int, input().split())\\n  graph.append([a-1, b-1])\\nfor i in range(M):\\n  flag = 0\\n  uf = UnionFind(N)\\n  for j in range(M):\\n    if(i != j):\\n      uf.unite(graph[j][0], graph[j][1])\\n  for k in range(1, N):\\n    if uf.is_in_group(0, k) == False:\\n      flag = 1\\n  if(flag == 1):\\n    ans += 1\\nprint(ans)", "target": "634", "substitutes": {"self": ["auto", "home", "type", "work", "object", "c", "current", "best", "raw", "wrapper", "dev", "per", "high", "non", "cmp", "time", "h", "next", "f", "us", "ns", "base", "load", "child", "gh", "ref", "right", "p", "cl", "conn", "part", "full", "http", "x", "plus", "er", "ng", "ws", "data", "ch", "owner", "client", "map", "error", "default", "max", "r", "gen", "block", "ang", "manager", "ctx", "node", "event", "old", "app", "context", "complete", "instance", "game", "config", "world", "box", "comp", "function", "spec", "e", "func", "es", "layer", "l", "form", "user", "case", "Self", "this", "super", "pos", "view", "all", "hand", "cache", "g", "ack", "act", "os", "ok", "co", "worker", "master", "host", "me", "mp", "parse", "one", "other", "private", "q", "w", "filter", "shared", "now", "prev"], "n": ["o", "x", "c", "d", "node", "nb", "num", "s", "t", "ni", "y", "mn", "g", "en", "h", "network", "nn", "number", "u", "net", "nt", "e", "f", "ns", "none", "sn", "nor", "z", "l", "v", "m", "r", "nc", "p", "ne"], "parent": ["unit", "type", "home", "part", "central", "element", "object", "connection", "search", "page", "current", "port", "point", "node", "Parent", "large", "family", "name", "parents", "author", "instance", "depth", "list", "remote", "cache", "root", "id", "mother", "key", "pool", "fork", "image", "target", "top", "server", "index", "source", "master", "main", "table", "channel", "host", "father", "size", "help", "tree", "plant", "new", "peer", "child", "member", "module", "position", "memory", "location", "content", "origin", "right", "path", "block", "children"], "i": ["it", "xi", "c", "oi", "bi", "h", "ip", "eni", "iu", "f", "I", "ti", "mi", "z", "m", "io", "p", "ji", "x", "gi", "ci", "d", "data", "ori", "root", "id", "y", "ix", "fi", "none", "ii", "li", "pi", "di", "uri", "yi", "ie", "int", "ind", "s", "ini", "index", "u", "e", "init", "qi", "l", "v", "ic", "ei", "ik", "o", "this", "ri", "start", "ui", "ni", "info", "api", "false", "ij", "ia", "si", "ami", "ai"], "height": ["history", "demand", "grade", "children", "hang", "distance", "window", "input", "Height", "device", "scale", "hold", "data", "parents", "value", "head", "grid", "center", "depth", "root", "weight", "id", "mother", "alpha", "total", "width", "quality", "block", "gap", "div", "shadow", "version", "image", "rows", "gold", "capacity", "index", "density", "host", "grow", "size", "default", "padding", "shape", "growth", "definition", "child", "volume", "bottom", "power", "strength", "position", "memory", "huge", "style", "length", "right", "rank", "level", "count", "resolution"], "j": ["ji", "o", "js", "x", "xi", "c", "d", "yi", "ijk", "jc", "ie", "io", "ind", "J", "s", "ui", "y", "jan", "g", "ij", "h", "ion", "jl", "jo", "si", "u", "ja", "e", "f", "jj", "q", "z", "qi", "l", "jp", "ii", "v", "li", "aj", "m", "r", "p", "uj"], "root_i": ["root_eni", "parent_ie", "root_ci", "parent_i", "key_i", "parent_eni", "key_j", "parent_ui", " root_ui", "key_ii", "root_xi", "root_ie", "key_xi", " root_ci", "parent_j", " root_xi", "parent_ji", "root_ji", "root_ui", " root_ie", "root_ii"], "root_j": ["root5ji", "root_b", "root_oi", "root5jo", "Root_b", "root6j", "Root_i", "core_f", "root_jo", "root6b", " root_js", "root5oi", "root_xi", "core_ii", "core_j", "root_f", "root6jo", "root6i", "Root_j", " root_ji", " root_xi", " root_oi", "Root_jo", " root_jo", "root_ji", "root_js", "core_i", "root5j", "root_ii"], "N": ["U", "Node", "D", "S", "R", "NS", "E", "B", "Ns", "T", "J", "W", "Y", "A", "L", "G", "NT", "NM", " Ne", "MN", "Q", "AN", "I", "X", "C", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "Multi", "LM", "D", "S", "R", "E", "B", "OM", "T", "J", "W", "Y", "A", "G", "L", "RM", "NM", "MD", "Many", "MS", "MN", "Q", "I", "X", "C", "JM", "V", "P", "MM", "K", "MC", "Mo", "SM", "m", "O", "H", "F", "CM", "Z"], "graph": ["hang", "connection", "layout", "np", "node", "data", "context", "document", "ge", "view", "plot", "man", "config", "array", "root", "id", "via", "Graph", "shadow", "raph", "g", "gap", "connect", "image", "network", "forest", "span", "path", "index", "model", "dot", "parse", "flow", "tree", "adj", "end", "shape", "support", "growth", "edge", "gh", "module", "igraph", "draw", "gn", "complex", "gen", "han", "group"], "ans": ["aves", "offs", "rank", "Ann", "ANN", "ags", "nas", "ras", "ins", "ases", "anks", "ants", "ss", "aid", "acy", "amps", "anch", "flags", "an", "s", "ads", "A", "ats", "asts", "cs", "na", "os", "ids", "ana", "span", "can", "lines", "AN", "cas", "aned", "ANS", "ann", "lan", "ns", "shape", "ands", "ions", "works", "ani", "ai", "aces", "ays", "mean", "groups", "ace", "aus", "ons", "group"], "a": ["o", "x", "c", "d", "ac", "ab", "B", "int", "an", "s", "A", "y", "sa", "ia", "aa", "u", "va", "e", "f", "ad", "ai", "ae", "w", "z", "ba", "l", "v", "m", "p"], "b": ["o", "eb", "x", "pb", "c", "d", "ab", "B", "s", "bur", "y", "bs", "h", "fb", "lb", "u", "e", "f", "sb", "ba", "l", "v", "m", "r", "bf", "bb", "p"], "flag": ["log", "part", "type", "fat", " flags", "lag", "bug", "af", "mask", "int", "anch", "flags", "ind", "year", "long", "band", "weight", "id", "key", "fd", "ant", "FLAG", "offset", "plugin", "bad", "big", "age", "bit", "ag", "f", "ann", "ad", "code", "like", "lang", "status", "no", "state", "kind", "sign", "style", "cat", "ace", "Flag", "group", "arg", "count"], "uf": ["df", "fs", "eb", "fat", "su", "pb", "uv", "um", "cv", "auc", "img", "ob", "ab", "uc", "aux", "af", "ff", " af", " buf", "ub", "buf", " cp", "raf", "fed", "ph", "fam", "uff", "gb", "cp", "UF", " buff", "tf", " su", "lv", "sf", "ush", " cur", "fi", "buff", " ff", "FB", "FP", "ki", "sup", "buffer", "DF", "GF", "utf", "FF", " sup", "bf", "lu", "TF", "cf", " surf", "ud", "fp"], "k": ["ik", "kn", "x", "kk", "ark", "c", "ak", "ijk", "ky", "ck", "y", "key", "sk", "unk", "ok", "ks", "dk", "ko", "kin", "u", "f", "ki", "q", "w", "kw", "z", "K", "v", "l", "m", "p", "kr", "km", "ku"]}}
{"code": "S=list(input())\\n\\nif len(S)==2:\\n  print(\"\".join(S))\\nelse:\\n  S.reverse()\\n  print(\"\".join(S))", "target": "528", "substitutes": {"S": ["SE", "SH", "SO", "D", "input", "ASC", "BS", "SS", "ISS", "R", "NS", "E", "Sample", "RS", "Test", "B", "T", "TS", "Si", "F", "SI", "s", "Source", "A", "L", "SR", "G", "Single", "DS", "SSL", "PS", "Q", "Sign", "I", "X", "SU", "C", "SB", "V", "Sl", "P", "OS", "Session", "Sort", "SM", "Service", "O", "H", "M", "SL", "Standard", "N"]}}
{"code": "s = input().strip()\\ndp = [[0]]\\nprint(len(s)//2-s.count('p'))\\n", "target": "149", "substitutes": {"s": ["states", "parts", "ls", "string", "o", "S", "sync", "ssl", "input", "c", "d", "ws", "ses", "a", "data", "ss", "n", "t", "setup", "strings", "i", "suff", "sw", "g", "os", "h", "ts", "ds", "lines", "u", "letters", "e", "f", "b", "ps", "ns", "es", "params", "v", "l", "sg", "stats", "r", "m", "words", "less", "p"], "dp": ["tp", " pp", " d", "d", "data", "ss", " subp", " ls", "pos", "DP", " cp", " dd", "i", "ds", " e", "rep", "e", " std", "ps", " DP", "P", " params", "params", " ss", "eps", "p"]}}
{"code": "# coding: utf-8\\n\\nline = raw_input()\\nprint ''.join([((s.lower() if s.isupper() else s.upper()) if s.isalpha() else s) for s in line])", "target": "643", "substitutes": {}}
{"code": "n, a, b = map(int, input().split())\\n\\nans = 0\\nfor i in range(1, n+1):\\n    sum = 0\\n    tmp = i\\n    while tmp != 0:\\n        sum += tmp%10\\n        tmp = tmp//10\\n    if sum >= a and sum <= b:\\n        ans += i\\nprint(ans)", "target": "704", "substitutes": {"n": ["cn", "k", "x", "j", "c", "d", "nb", "num", "an", "t", "y", "g", "network", "nan", "number", "u", "size", "net", "f", "ns", "w", "nat", "z", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "c", "aw", "d", "ab", "ac", "da", "an", "A", "fa", "y", "alpha", "na", "sa", "beta", "aa", "u", "f", "e", "am", "ad", "ca", "ai", "ae", "w", "asa", "ba", "l", "aj", "p", "au"], "b": ["eb", "k", "x", "j", "c", "d", "cb", "nb", "ab", "B", "bd", "rb", "y", "bs", "h", "fb", "beta", "aa", "wb", "lb", "f", "e", "base", "w", "z", "ba", "v", "l", "m", "bf", "r", "bb", "p"], "ans": ["offs", "ls", "part", "news", "anus", "atts", "uploads", "nas", "reads", "ants", "vs", "amps", "roots", "ens", "an", "s", "ads", "changes", "ops", " means", "outs", "cs", "ents", "ams", "cases", "na", "os", "comments", "anas", "ms", "ds", "ks", "nn", "can", "lines", "cas", "aned", "leans", "ANS", "acts", "ann", "ps", "ns", "ums", "lan", "errors", "ai", "ays", "mean", "xs", "acs", "eps", "sam", "ons", "rams"], "i": ["mini", "pi", "o", "x", "xi", "j", "c", "ci", "d", "phi", "oi", "io", "start", "cli", "int", "ind", "num", "s", "ini", "t", "ui", "ni", "info", "y", "index", "span", "ip", "multi", "si", "u", "iu", "f", "I", "ti", "e", "ai", "init", "chi", "v", "l", "ii", "m", "li", "p"], "sum": ["unit", "part", "average", "fat", "su", "um", "c", "ass", "amount", "sub", "ac", "ss", "mom", "all", "num", "an", "av", "weight", "oss", "total", "mon", "alpha", "sort", "na", "min", "mem", "sa", "sk", "sat", "ay", "acc", "beta", "bin", "gram", "sav", "si", "size", "net", "max", "ann", "am", "cum", "sup", "seed", "mass", "summary", "sh", "mean", "Sum", "fee", "m", "sam", "sim", "nam", "temp", "count"], "tmp": ["mini", "part", "Temp", "ott", "px", "np", "current", "amount", "tc", "img", "output", "nb", "mult", "const", "start", "ss", "pos", "ff", "vt", "int", "mk", "amp", "cache", "rb", "buf", "result", "cmp", "test", "alpha", "total", "offset", "cp", "tt", "nn", "beta", "pad", "span", "si", "mp", "nt", "buff", "stuff", "sup", "shape", "qq", "mm", "sb", "emp", "yy", "v", "m", "sam", "now", "bb", "MP", "p", "temp", "count"]}}
{"code": "#coding:UTF-8\\n\\ndef gcd(x,y):\\n    r = x % y\\n\\n    if r==0: return y\\n    else: return gcd(y,r)\\n\\ndef lcm(x,y):\\n    return x * y / gcd(x,y)\\n\\nwhile True:\\n    try:\\n        n = map(int, raw_input().split())\\n\\n        print \"%d %d\"%(gcd(n[0],n[1]),lcm(n[0],n[1]))\\n\\n    except Exception:\\n        break;", "target": "604", "substitutes": {}}
{"code": "from collections import defaultdict\\nimport sys,heapq,bisect,math,itertools,string,queue,datetime\\nsys.setrecursionlimit(10**8)\\nINF = float('inf')\\nmod = 10**9+7\\neps = 10**-7\\ndef inpl(): return list(map(int, input().split()))\\ndef inpl_str(): return list(input().split())\\n\\nN,K = inpl()\\nprint(N-K+1)\\n", "target": "459", "substitutes": {"INF": ["InV", "inInf", "INI", "InI", "ANV", "InF", "ANF", "InInf", "INV", "ANInf", "ANI", "inI", "inF", "INInf", "inV"], "mod": ["unit", "sec", "mode", "step", "exp", "scale", "ver", "mult", "dec", "ind", "fun", "debug", "num", " MOD", "depth", "inc", "round", "crit", "cond", "dim", "cm", "comp", "mods", " Mod", "MOD", "Mod", "skip", "m"], "eps": [" pow", " steps", " mag", " fix", " pp", " sig", " ms", " sec", " dig", " log", " grade", " EPS", " POP", " powers", " comp", " exp", "PS", " imp", "pp", "ps", " digits", " dec", "ep", " power", "P", " sup", " div", " pc", " pm"], "N": ["D", "S", "R", "NS", "E", "NL", "B", "Ns", "T", "n", "W", "J", "Y", "A", "L", "G", "NT", "NN", "Q", "I", "X", "C", "V", "P", "O", "H", "M", "F", "Z"], "K": ["U", "KR", "D", "k", "S", "E", "SK", "B", "T", "n", "J", "W", "Y", "L", "G", "NK", "KK", "HK", "Q", "X", "C", " k", "V", "P", "KN", "KS", "O", "H", "M", "F", "Z"]}}
{"code": "import sys\\n\\nread = sys.stdin.read\\nreadline = sys.stdin.buffer.readline\\nsys.setrecursionlimit(10 ** 8)\\nINF = float('inf')\\nMOD = 10 ** 9 + 7\\n\\n\\ndef main():\\n    X = int(readline())\\n    A = int(readline())\\n    B = int(readline())\\n    print((X-A)%B)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "98", "substitutes": {"read": ["file", "log", "mode", "type", "rest", "rew", "full", " write", "input", "x", "open", "feed", "current", "raw", "only", "data", "lex", "long", "re", "wake", "loop", "connect", "win", "set", "bin", "write", "readable", "stream", "function", " Read", "run", "default", "reader", "func", "load", "rec", "each", "buffer", "method", "new", "include", "r", "right", "io", "call"], "readline": ["Readsize", "writewrite", "writelines", "workstream", "writefile", "writement", "readerfile", "readwrite", "readshell", "writeline", "checkshell", "readlines", "readingstream", "readingsize", " readstream", "checkline", "readstatus", "readerlines", "writesize", "Readline", "readstream", " readname", "readerline", "loadwrite", " readwrite", "runline", "checkLINE", "readerment", "readconnection", "readinglines", "readingfile", "readingline", "runstatus", " readlines", "checkstatus", "runLINE", "readsize", "readment", "readingwrite", " readconnection", "workline", "readingment", "runshell", "READshell", "workconnection", "loadline", "READstatus", "readingname", "Readwrite", "READLINE", "READline", "readfile", "workname", "readLINE", "loadlines", "readingconnection", "Readlines", "readname"], "INF": ["CONFF", " INFF", "inFs", "INFF", "CONF", "CONFE", "CONFs", "inFF", "INFE", " INFs", "INFs", "inFE", " INFE", "inF"], "MOD": ["ACC", "MAG", "EXP", "DEBUG", "ARM", "EXT", "REG", "RR", "LOD", "mod", "PM", "RE", "DM", " mod", "LOG", "MODE", "TR", "Mods", "WARN", " Mod", "Mod", "DEC", "CC", "EC", "RT", "END", " MAX", "RM"], "X": ["U", "D", "ZX", "CL", "x", "E", "XX", "T", "Y", "L", "IL", "IP", "AP", "UX", "Q", "AA", "C", "PE", "XL", "TX", "V", "FF", "P", "XP", "K", "O", "XXX", "H", "M", "IX", "F", "AW", "N", "Z"], "A": ["AR", "U", "As", "NA", "D", "a", "CA", "PA", "W", "IA", "Y", "AD", "L", "G", "AM", "Az", "AY", "AX", "BA", "SA", "TA", "I", "AA", "C", "MA", "P", "AF", "AB", "AC", "AW", "F", "AAA", "N", "LA"], "B": ["U", "EB", "D", "R", "E", "LB", "BB", "T", "UB", "W", "J", "HB", "BE", "Y", "L", "G", "BA", "PB", "BI", "BL", "Bs", "Q", "QB", "DB", "WB", "CB", "I", "AA", "b", "C", "V", "P", "BC", "AB", "O", "M", "F", "N"]}}
{"code": "#!/usr/bin/env python3\\n\\ndef main():\\n    n, y = map(int, input().split())\\n\\n    for i in range(n + 1):\\n        for j in range(n + 1):\\n            if n - i - j >= 0 and 10000 * i + 5000 * j + 1000 * (n - i - j) == y:\\n                print(i, j, n - i - j)\\n                exit()\\n    else:\\n        print(\"-1 -1 -1\")\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "465", "substitutes": {}}
{"code": "n=int(input())\\ns=list(map(str,input()))\\nif n%2==0:\\n    num=int(n/2)\\n    Sx=s[0:num]\\n    Sy=s[num:n]\\n    if Sx==Sy:\\n      print(\"Yes\")\\n    else:\\n      print(\"No\")\\nelse:\\n  print(\"No\")", "target": "532", "substitutes": {"n": ["o", "x", "j", "c", "np", "d", "nm", "nb", "ny", "Ns", "pos", "non", "t", "ni", "i", "Num", "y", "mn", "network", "nn", "un", "nu", "number", "u", "size", "net", "len", "f", "nt", "fn", "b", "ns", "pn", "none", "sn", "no", "nor", "dn", "l", "m", "r", "nc", "ln", "p", "ne", "N"], "s": ["states", "ls", "o", "string", "services", "parts", "S", "input", "c", "sp", "d", "ses", "a", "ss", "sl", "t", "strings", "i", "y", "sort", "split", "g", "sa", "blocks", "lines", "south", "u", "letters", "sets", "e", "f", "sym", "b", "ns", "tests", "sb", "w", "v", "l", "sign", "m", "str", "words", "p"], "num": ["loc", "x", "um", "c", "off", "np", "d", "nm", "ng", "node", "sum", "pos", "inc", "ni", "i", "Num", "mon", "mn", "uni", "zero", "na", "min", "con", "dim", "en", "nn", "index", "un", "number", "nu", "norm", "si", "nr", "nom", "net", "u", "size", "f", "sym", "fn", "max", "b", "end", "sn", "mm", "no", "m", "N"], "Sx": ["OsX", "Nx", "Sz", "NSX", "Px", " SX", " Sz", "Pxs", "Sys", "NSys", "Nys", "Sxs", "Ny", "Osx", "PX", "Nxs", "Osys", "NSy", "NX", "Pz", "SX", " Sxs", "Nz", "Osy", "NSx"], "Sy": ["Gy", "sy", "Ky", "Psy", "cy", "Py", "Cy", "SY", "yn", "Hi", "Ns", "Ay", "Rh", "Si", "Sn", "Y", "Sys", "syn", "Hyp", "Num", "y", " sy", "Typ", " Dy", "ym", "py", "El", "Sm", "sym", "My", "Ty", "Ps", "Lu", "Cs", "Syn", "Sk", "Sum", "Sym", "isy"]}}
{"code": "N=int(input())\\ns=[int(input()) for _ in range(N)]\\n\\ns = sorted(s)\\nSUM = sum(s)\\n\\nif SUM % 10 != 0:\\n  print(SUM)\\n  exit()\\n\\nfor i in range(N):\\n  if s[i] % 10 != 0:\\n    print(SUM - s[i])\\n    exit()\\n    \\nprint(0)", "target": "741", "substitutes": {"N": ["NA", "D", "S", "GN", "TN", "R", "NS", "NE", "NC", "B", "Ns", "T", "n", "W", "J", "Y", "num", "L", "Num", "NM", " n", "Size", "number", "Q", "I", "X", "ns", "C", "NUM", "Ne", "V", "OS", "P", "K", "KN", "O", "H", "M", "F", "Z"], "s": ["states", "ls", "o", "parts", " samples", "services", "S", "input", "c", "results", "d", "ins", "ses", "sum", "ws", "a", "steps", "ss", "Ns", "obs", "n", "args", "qs", "strings", "sort", "uns", "g", "os", "blocks", "ds", "sample", "gs", " S", "stores", "items", "si", "u", "sets", "f", "e", "sym", "b", "ns", "new", "es", "features", "sb", "w", "ims", "l", "v", "stats", "m", "xs", "p"], "_": ["out", "x", " time", " ip", "all", "g", " seq", "f", "p"], "SUM": ["sIZE", "DS256", " Sumption", "PSUM", "s256", " SUB", "PSIZE", "sum", "SSum", " S256", " SULT", "DSums", "PSumption", "RSum", "DSUM", "SIZE", "Sums", " SIZE", "SSUB", "SUB", "RSUM", "DSUB", "sUM", "RSUB", "SSUM", "DSum", " Sum", "sumption", "SSums", "SSULT", "sUB", "RSULT", "Sum", "Sumption", "SULT", "PSum", "S256", "sums"], "i": ["mini", "pi", "di", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "d", "slice", "yi", "ri", " I", " ii", "io", "ie", "int", "ind", "n", " iP", "ini", "ui", "bi", "id", "y", "uni", " j", " il", " x", "ix", "index", "ip", " index", "eni", "si", " id", "iu", "u", "fi", "I", "ti", "mi", "ai", "qi", "lc", "ii", "li", "p", "vi"]}}
{"code": "import math\\nA, B, H, M = map(int,input().split())\\nt = 60*H + M\\ntb = (6*t)%360\\nta = (360*t/(12*60))%360\\nc = math.sqrt(A**2 + B**2 - 2*A*B*math.cos(math.radians(ta-tb)))\\nprint(c)", "target": "290", "substitutes": {"A": ["As", "U", "D", "S", " AA", "R", "E", "a", "ac", "T", "W", "Y", "G", "L", "AM", "AS", "SA", "TA", " a", "AP", "Q", "Ar", "I", "AA", "X", "C", "MA", "V", "P", "AF", "AH", "AC", "F", "N", "LA"], "B": ["U", " b", "D", "S", "BM", "BF", "R", "E", "Bi", "BB", "T", "W", "Y", "L", "G", "NB", "BA", "OB", "BI", "Q", "Bs", "GB", "QB", "DB", "WB", "I", "b", "X", "C", "SB", "MB", "V", "P", "BT", "BC", "O", "F", "CM", "N", "Z"], "H": ["U", "D", "HT", "S", "R", "E", "T", "W", "HH", "J", "Y", "G", "L", "h", "Q", "X", "C", "MH", "V", "P", "K", "TH", "O", "DH", "F", "N", "Z"], "M": ["U", "D", "S", "R", "E", "T", "W", "Y", "G", "L", "MS", "Q", "I", "X", "C", "TM", "V", "MB", "P", "MM", "MC", "K", "MT", "m", "O", "F", "CM", "MF", "N", "Z"], "t": ["o", "tp", "dt", "at", "x", "tm", "d", "tick", "a", "T", "int", "n", "s", "i", "y", "time", "g", "h", "ts", "tt", " T", "u", "f", "e", "b", "pt", "w", "z", "v", "l", "m", "r", "p"], "tb": ["ptbi", "Tb", "db", " th", " tbi", "Ta", " tB", "ttB", "TB", " tl", "ptB", "ttb", "dh", "dB", "th", "tB", "tbi", "ptb", "pta", "ttl", "dl", "tth", "Tbi", "tl"], "ta": ["ma", "pi", "tm", "d", "tc", "phi", "a", "ac", "Ta", "T", "pa", "da", "fa", "alpha", "sa", "h", "tt", "pha", "TA", "beta", "ra", "si", "va", "mu", "mega", "b", "sha", "ca", "tta", "ho", "ga", "ba", "eta", "m", "p", "au"], "c": ["this", "x", "cy", "ci", "d", "tc", "cb", "ac", "uc", "bc", "int", "n", "center", "cc", " C", "ce", "cs", "cit", "h", "ct", "cm", "dc", "cu", "xc", "f", "e", "toc", "b", "ca", "arc", "C", "unc", "z", "cr", "lc", "l", "sc", "pc", "m", "nc", "p", "count"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\ndef mapint(): return map(int, input().split())\\nsys.setrecursionlimit(10**9)\\n\\nN, M = mapint()\\nmod = 10**9+7\\n\\npos = {}\\nneg = {}\\nn = 1\\npos[0] = 1\\nneg[0] = 1\\nfor i in range(1, 500000):\\n    n *= i\\n    n %= mod\\n    pos[i] = n\\n    neg[i] = pow(n, mod-2, mod)\\n\\ndef prime_factorize(n):\\n    a = []\\n    while n % 2 == 0:\\n        a.append(2)\\n        n //= 2\\n    f = 3\\n    while f * f <= n:\\n        if n % f == 0:\\n            a.append(f)\\n            n //= f\\n        else:\\n            f += 2\\n    if n != 1:\\n        a.append(n)\\n    return a\\n\\nfrom collections import Counter\\nprimes = prime_factorize(M)\\nc = Counter(primes)\\nprimes = list(set(primes))\\nleng = len(primes)\\nans = 1\\nfor i in range(leng):\\n    p = primes[i]\\n    n = c[p]\\n    ans *= pos[N+n-1]*neg[n]*neg[N-1]\\n    ans %= mod\\n\\nprint(ans)\\n", "target": "473", "substitutes": {"N": ["U", "D", "S", "CN", "R", "E", "NL", "B", "Ns", "T", "W", "J", "Y", "A", "L", "G", "Ni", "IN", "NM", "Size", "MN", "No", "Q", "I", "X", "C", "Na", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "D", "S", "R", "B", "T", "J", "W", "num", "Y", "A", "L", "G", "man", "DM", "MS", "MN", "number", "mu", "I", "X", "C", "MOD", "mm", "V", "P", "MM", "MC", "MT", "m", "O", "H", "F", "Z"], "mod": ["sec", "mode", "o", "loc", "dom", "k", "x", "j", "um", "exp", "d", "modified", "bug", "mult", "nd", "dec", "int", "ind", "da", "fun", "num", "reg", "y", "mag", "min", "dig", "dim", "ms", "version", "md", "month", "null", "mods", "row", "function", "Mods", "mu", "max", "mi", " Mod", "rec", "MOD", "none", "Mod", "no", "im", "module", "pm", "dm", "z", "m", "r", "form"], "pos": [" Pos", "pi", "o", "Pos", "loc", "part", "x", "plus", "sum", "start", "pro", "int", "s", "po", "L", "os", "min", "cond", "vert", "POS", "trans", "index", " index", "len", "nos", "size", "nt", " POS", " number", "ps", "ns", " position", "cos", "no", "pt", "position", "P", "z", " positions", "l", "v", " cos", "pose"], "neg": ["unit", "log", "Pos", "loc", "err", " negative", " Neg", "plus", "sin", "de", "NL", "sum", "bug", "dev", "diff", "dec", "int", "abs", "args", "non", "po", "Ni", "zero", "Neg", "min", "pri", "iter", "ok", "nan", "POS", "bad", "index", "bin", "error", "ag", "comp", "ko", "dot", "norm", "nov", "agg", "size", "nos", "normal", "opt", "len", "rev", "cos", "none", "clean", "Mod", "no", "position", "minus", "v", "negative", "mun", "origin", "orig", "oc", "temp", "rot", "ne"], "n": ["o", "cn", "k", "x", "j", "np", "d", "nm", " fn", "nb", "Ns", "all", "num", "an", "s", "t", "non", "ni", "y", "mn", "on", "na", "min", "g", "en", "nn", "un", "nu", "number", "u", "net", "nt", "e", "fn", "b", "ns", "pn", "sn", "no", "w", "P", "z", "dn", "l", "v", "m", "r", "nc", "ln", "ne"], "i": ["pi", "di", "it", "o", "x", "xi", "j", "ci", "d", " I", "io", "ie", "start", "int", "ind", "ini", "ui", "t", "ni", "bi", "id", "y", "iq", " j", "h", "index", "ip", "multi", "si", "u", "iu", "I", "ti", "e", "b", "mi", "im", "ai", "z", "qi", "l", "v", "ii", "m", "li", "r"], "a": ["area", "x", "aw", "d", "ar", "ac", "ab", "data", "aux", "af", "da", "all", "an", "s", "array", "A", "t", "fa", "list", "alpha", "sa", "ana", "aa", "la", "u", "va", "e", "b", "ad", "am", "ga", "ai", "ae", "aaa", "ba", "z", "l", "ea", "aj", "ao", "m", "r", "au"], "f": ["df", "fs", "o", "k", "x", "j", "um", "d", "fl", "fc", "s", "num", "ef", "t", "fa", "y", "fe", "g", "fd", "h", "sf", "u", "e", "b", "new", "inf", "q", "fen", "w", "z", "of", "l", "v", "m", "bf", "fr", "r", "F", "fp"], "primes": [" priques", "plutes", "Prices", "prunes", "prizes", "trunes", "prises", "trocks", "pises", "procks", "Priques", "pritions", "perimes", "PRizes", "plime", " prunes", "PRimes", "trutes", "incimes", "proime", " prime", " prises", "Prises", "incitions", "trimes", "prime", " prizes", "rions", " prensions", "prions", "plocks", "pices", "prounes", "pimes", "rices", "incunes", "plunes", "plitions", "PRises", "incices", "prutes", "trices", "PRensions", "plimes", "prices", "proimes", "plices", " pritions", " procks", "rimes", "piques", "prensions", " prices", "proices", "trime", " prions", "priques", "triques", "perensions", "perizes", " prutes", "Primes", "riques", "perises", "trions"], "c": ["o", "cn", "k", "x", "cy", "ci", "d", "col", "ac", "cc", "s", "ce", "ch", "cs", "y", "con", "h", "cp", "ct", "co", "cin", "cm", "dc", "cu", "u", "xc", "e", "b", "C", "z", "l", "lc", "m", "nc", "count"], "leng": ["oleng", " len", "lidth", " lenth", "olen", "long", "Long", "llenth", "Leng", "lenth", "Len", "llng", "llen", " lng", "lleng", "Lenth", "lng", "llong", "len", " lidth", "llidth", "olidth", " long", "olng"], "ans": ["offs", "ls", "x", "_", "aning", "nas", "ins", "ars", "ants", "amps", "any", "ens", "args", "vs", "an", "s", "anc", "A", " means", "cs", "anon", "sk", "na", "os", "con", "plan", "ms", "ds", "ks", "nan", "nn", "span", "can", "cons", "AN", "atan", "aned", "ANS", "ann", "ps", "ns", "lan", "ands", "res", "ions", "P", "gen", "eps", "ln", "ons", "ne"], "p": ["o", "tp", "pid", "par", "k", "x", "j", "np", "d", "pa", "per", "s", "po", "t", "y", "g", "h", "pr", "u", "e", "b", "ps", "q", "P", "z", "l", "v", "pc", "m", "r", "pe"]}}
{"code": "# -*- coding: utf-8 -*-\\n\"\"\"\\nA - Discount Fare\\nhttps://atcoder.jp/contests/abc113/tasks/abc113_a\\n\\n\"\"\"\\nimport sys\\n\\n\\ndef solve(X, Y):\\n    return X + Y//2\\n\\n\\ndef main(args):\\n    X, Y = map(int, input().split())\\n    ans = solve(X, Y)\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main(sys.argv[1:])\\n", "target": "668", "substitutes": {}}
{"code": "inputted = input().split()\\nS = inputted[0] \\nT = inputted[1]\\n\\nanswer = T + S\\n\\nprint(answer)\\n", "target": "236", "substitutes": {"inputted": ["execced", " inputened", " inputtered", "Inputashed", "inputhed", "rawhed", "Inputened", "Inputted", "inputashed", "inctered", "rawting", "infced", " inputed", "exected", "incened", "inputtered", "inputced", "Inputtered", " inputced", " inputting", "execting", "inputed", "infed", "inputened", "inputting", " inputhed", "Inputed", "execed", "Inputting", "Inputhed", " inputashed", "infting", "inced", "infted", "incted", "rawashed", "rawted"], "S": ["U", "SE", "SH", "D", "student", "ESS", "su", "SS", "R", "E", "RS", "ss", " solution", "submit", "TS", "SI", "s", "Submit", "A", " s", "DS", "SA", "TEXT", "ES", "Q", "WS", "Solution", "N", "letters", "I", "SU", "C", "seed", "Answer", "V", "P", "SP", "se", "M", "H", "F", "letter", "Z"], "T": ["U", "D", "DT", "TN", "SS", "R", "question", "E", "B", "TS", "Y", "t", "L", "A", "TA", "PT", "Q", "WT", "I", "X", "C", "Answer", "TT", "TX", "V", "P", "K", "O", "TF", "M", "H", "F", "N", "Z"], "answer": ["string", "grade", "empty", "student", "input", "response", "search", "results", "question", " answers", "output", "data", "value", "complete", "section", "option", "t", "result", "sort", "answered", "time", "entry", "score", "sex", "word", "final", "reply", "term", "sn", "Answer", "seed", "status", "finished", "q", "sent", "duration", "text", "season", "temp", "token"]}}
{"code": "n,q = map(int,input().split())\\ns = input()\\ntable = [0]*n\\ntemp = s[0]\\nfor i in range(1,n):\\n  table[i] = table[i-1]\\n  if temp=='A' and s[i]=='C':\\n    table[i]+=1\\n  temp = s[i]\\nfor _ in range(q):\\n  l,r = map(int,input().split())\\n  print(table[r-1]-table[l-1])", "target": "155", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "d", "nb", "a", "num", "t", "ni", "y", "g", "en", "h", "u", "size", "e", "f", "nt", "b", "ns", "w", "z", "v", "m", "nc", "p", "N"], "q": ["k", "qt", "x", "j", "c", "d", "qs", "t", "ch", "y", "qa", "g", "h", "query", "Q", "sq", "u", "f", "qq", "w", "z", "qi", "v", "length", "m", "patch", "p", "qu", "dq", "count"], "s": ["ls", "o", "string", "services", "S", "sync", "input", "c", "d", "slice", "service", "ses", "a", "session", "abs", "single", "array", "t", "space", "y", "g", "sa", "ts", "sample", "source", "gs", "series", "sq", "south", "si", "u", "e", "f", "b", "ps", "ns", "stable", "es", "sb", "w", "z", "v", "m", "str", "p"], "table": ["part", "o", "element", "input", "db", "c", "point", "col", "output", "a", "data", "section", "session", "Table", "list", "cache", "t", "array", "tab", "TABLE", "result", "test", "total", "range", "y", "round", "body", "database", "transform", "query", "index", "source", "sequence", "batch", "model", "row", "f", "e", "tree", "b", "stable", "shape", "base", "term", "buffer", "length", "m", "order", "p", "form", "count"], "temp": ["unit", "wrap", "pi", "case", "Temp", "err", "wl", "tr", "c", "current", "tc", "col", "name", "variable", "perature", "diff", "T", "fixed", "valid", "t", "eff", "test", "ctrl", " temperature", "y", "div", "offset", "iter", "tmp", " Temp", "f", "adj", "Temperature", "tem", "stable", "clean", "pt", "emp", "w", "frac", "z", "flat", "v", "str", "p", "elt", "condition"], "i": ["pi", " u", "o", "di", "k", "x", "j", "c", "gi", "ci", "d", "yi", "col", " I", "a", "io", "ie", "int", "ind", "all", "ini", "ui", "t", "bi", "id", "y", " j", "ix", "index", "ip", "seq", "si", " id", "iu", "u", "f", "I", "e", "b", "z", "v", "ii", "li", "m", "p"], "_": [" b", "x", "j", " __", " d", " p", "ind", "num", " data", "time", " j", " x", "ip", " num", " k", " all"], "l": ["o", "k", "ol", "x", "j", "c", "d", "a", "sl", "ll", "t", "L", "y", "h", "nl", "u", "len", "f", "e", "rl", "b", "w", "z", "v", "lc", "length", "m", "ln", "p"], "r": ["rs", "o", "k", "x", "j", "c", "R", "d", "ar", "a", "rh", "rb", "y", "yr", "g", "ir", "h", "row", "nr", "u", "e", "f", "b", "w", "z", "v", "m", "ru", "p", "sr"]}}
{"code": "a,b,c,k=map(int,input().split())\\nif abs(b-a)>10**18:\\n    print(\"Unfair\")\\nelse:\\n    if k%2==0:\\n        print(a-b)\\n    else:\\n        print(b-a)", "target": "669", "substitutes": {"a": ["area", "x", "aw", "d", "ab", "ac", "af", "n", "abs", "da", "an", "A", "fa", "t", "i", "y", "alpha", "sa", "abc", "aa", "f", "e", "ad", "ca", "am", "ai", "ae", "w", "z", "asa", "ba", "aaa", "l", "m", "r", "bb", "p"], "b": ["auto", "x", "db", "d", "ab", "ac", "B", "bc", "n", "abs", "binary", "rb", "A", "i", "y", "bs", "g", "fb", "h", "abc", "big", "beta", "aa", "br", "u", "e", "f", "ad", "base", "sb", "w", "z", "ba", "v", "l", "bb", "m", "r", "p"], "c": ["x", "cy", "ci", "d", "cb", "col", "ac", "uc", "bc", "n", "cc", "ce", "ch", "cs", "y", "cm", "dc", "u", "f", "e", "ad", "ca", "C", "z", "cr", "lc", "m", "p"], "k": ["ik", "o", "ke", "x", "kk", "j", "d", "ac", "n", "mk", "ck", "num", "kick", "cc", "ch", "y", "sk", "g", "unk", "ok", "ks", "cp", "dk", "ko", "f", "max", "ad", "q", "kw", "w", "z", "K", "v", "l", "m", "p", "kr", "km", "ku"]}}
{"code": "S=input()\\nprint(S[0]+S[1]+S[2])", "target": "775", "substitutes": {"S": ["SE", "SH", "II", "SIGN", "D", "GS", "input", "SS", "ISS", "R", "NS", "DES", "Test", "B", "T", "TS", "Si", "SI", "s", "Y", "Source", "A", "G", "L", "Success", "Part", "String", "Single", "DS", "SA", "POS", "PS", "Q", "Sign", "I", "X", "SU", "C", "DATA", "V", "P", "K", "Session", "SM", "SP", "O", "H", "M", "Input", "F", "N"]}}
{"code": "s=input()\\nn=len(s)\\ndef f(s):\\n    m=len(s)\\n    for i in range(-(-m//2)):\\n        if s[i]!=s[-1-i]:\\n            return False\\n    return True\\n\\nif f(s) and f(s[:(n-1)//2]) and f(s[((n+3)//2)-1:]):\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "420", "substitutes": {"s": ["states", "ls", "o", "fs", "services", "string", "parts", "S", "js", "ssl", "input", "x", "http", "speech", "c", "d", "ws", "ses", "ins", "a", "ss", "opens", "args", "t", "strings", "cs", "y", "g", "os", "h", "ds", "self", "sample", "request", "gs", "sq", "south", "si", "u", "sets", "e", "f", "sym", "b", "ns", "new", "es", "tests", "sb", "features", "w", "l", "v", "sg", "xs", "r", "now", "p"], "n": ["o", "k", "x", "j", "c", "d", "nm", "nb", "num", "t", "y", "mn", "h", "nn", "u", "len", "f", "e", "b", "ns", "no", "w", "z", "l", "v", "r", "nc", "p", "ne", "N"], "m": ["ma", "o", "mc", "k", "j", "c", "d", "nm", "num", "y", "g", "h", "cm", "u", "f", "e", "mu", "b", "am", "mi", "mm", "mass", "w", "dm", "z", "v", "l", "r", "M", "p"], "i": ["pi", "di", "k", "x", "j", "gi", "c", "d", "ri", "col", "phi", "a", "start", "int", "ind", "ini", "t", "bi", "id", "y", "h", "index", "ip", "eni", "si", "u", "iu", "e", "I", "f", "end", "b", "q", "ai", "z", "qi", "l", "v", "ii", "li", "r", "p"]}}
{"code": "chars = [chr(i) for i in range(ord('a'), ord('z') + 1)]\\n\\narr = []\\n\\nx = int(input())\\n\\n\\ndef get_len(n):\\n    length = 1\\n    t = 26\\n\\n    while True:\\n        if n <= t:\\n            return length\\n        t += 26 ** (length + 1)\\n        length += 1\\n\\n        if length > 1000000000000001:\\n            raise\\n\\n\\ndef get_ord(n):\\n    st = 1\\n    end = 26\\n    ind = 1\\n    while True:\\n        if st <= n <= end:\\n            return x - st\\n\\n        st = end + 1\\n        end += 26 ** (ind + 1)\\n        ind += 1\\n\\n\\nlength = get_len(x)\\norder = get_ord(x)\\n# print(length)\\n\\nfor i in range(length):\\n    s = order % 26\\n    order = order // 26\\n    arr.append(s)\\n\\n# print(arr)\\n\\nans = \"\"\\nfor ai in arr[::-1]:\\n    ans += chars[ai]\\nprint(ans)", "target": "639", "substitutes": {"chars": ["ichapes", " chrs", "chas", "chrs", "ichars", "Chas", "Chrs", " chapes", "ichrs", "ichas", "Chapes", " chas", "Chars", "chapes"], "i": ["pi", "di", "o", "k", "xi", "idi", "j", "c", "gi", "d", "ri", "oi", "phi", "a", "io", "ie", "start", "ori", "pos", "ini", "bi", "id", "ix", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "ai", "z", "qi", "ii", "li", "ei", "p", "zi"], "arr": ["par", "err", "exp", "ar", "append", "data", "Array", "array", "ch", "test", "abc", "bl", "dr", "rep", "batch", "seq", "att", "br", "stack", "mat", "arc", "gr", "ai", "orig", "str", "dat", "enc"], "x": ["o", "xp", "xi", "exp", "work", "c", "d", "xy", "event", "data", "int", "array", "id", "y", "test", "tx", "time", "xxx", "g", "na", "en", "h", "xt", "xe", "rx", "ix", "index", "number", "ex", "xc", "run", "f", "e", "one", "X", "xx", "code", "xes", "es", "q", "w", "z", "example", "v", "cross", "m", "xs", "p"], "n": ["o", "k", "j", "c", "np", "d", "node", "nb", "a", "nd", "ot", "num", "an", "ni", "y", "na", "g", "en", "nn", "len", "f", "e", "nt", "b", "ns", "sn", "no", "w", "z", "l", "v", "r", "m", "nc", "p", "ne", "N"], "length": ["lp", "log", "type", "loc", "part", "k", "full", "distance", "element", "d", "short", "ength", "start", "pos", "sl", "int", "long", "tail", "depth", "array", "id", "y", "stop", "roll", "width", "time", "div", "h", "offset", "period", "tt", "index", "th", "line", "number", "character", "sequence", "seq", "len", "size", "Length", "f", "default", "nt", "padding", "b", "shape", "e", "sh", "w", "position", "z", "l", "sign", "duration", "text", "str", "p", "form", "path", "count"], "t": ["type", "o", "at", "k", "j", "c", "d", "a", "start", "pos", "T", "int", "s", "y", "stop", "total", "test", "time", "ty", "en", "h", "ant", "offset", "ts", "tt", "u", "len", "nt", "f", "e", "ti", "w", "z", "l", "v", "duration", "r", "m", "p", "token"], "st": ["est", "step", "loc", "rest", "sta", "std", "d", "ist", "back", "inst", "pend", "const", "art", "ss", "nd", "start", "int", " est", "ast", "St", "test", "stop", "sort", "sd", "en", "ST", "offset", "tt", "ord", "index", "span", "ost", "stack", "nt", "e", "ad", "stage", "sn", "pt", "state", "z", " start", "sign", " rest", "str", "dist", "se", "r", "ld", "rank"], "end": ["est", "ent", "k", "c", "d", "back", "ended", "inst", "start", "pend", "nd", "pos", "int", "ize", "ast", "id", "y", "stop", "en", "h", "vert", "ord", "index", "set", "begin", "nt", "max", "e", "ad", "ed", "f", "edge", "ends", "ending", "w", "z", " start", "add", "END", "se", "p", "End", "enc"], "ind": ["est", "struct", "Ind", "loc", "j", "c", "d", "append", "ci", "find", "inst", "start", "pend", "nd", "int", "inc", "id", "y", "sd", "en", "vert", "inn", "ord", "index", "set", "len", "orient", "nt", "dd", "ad", "init", "z", "p", "add", "l", "ii", "patch", "se", "ld"], "order": [" ord", "type", "slice", "start", "art", "pos", "num", "id", "test", "sort", "en", "offset", "iter", "ord", "index", "sequence", "seq", "len", "address", "code", "shape", "seed", "position", "sign", "ice"]}}
{"code": "L = list(map(int, input().split()))\\nif sum(L[:2]) == sum(L[2:]):\\n    print('Balanced' , flush=True)\\nelif sum(L[:2]) > sum(L[2:]):\\n    print('Left' , flush=True)\\nelse:\\n    print('Right' , flush=True)\\n\\n", "target": "132", "substitutes": {"L": ["PL", "UL", "LM", "S", "LU", "VL", "E", "LD", "LB", "LR", "NL", "B", "List", "LS", "T", "FL", "Long", "RL", "list", "LI", "IL", "AL", "LP", "LC", "EL", "OL", "LOS", "Body", "LE", "BL", "Left", "LG", "LT", "Li", "I", "X", "C", "XL", "LL", "V", "P", "l", "DL", "O", "M", "LA", "SL", "N", "CL"]}}
{"code": "def sep():\\n    return map(int,input().strip().split(\" \"))\\ndef lis():\\n    return list(sep())\\nimport sys\\nsys.setrecursionlimit(10**6)\\n\\nn,k,c=sep()\\ns=input()\\nc1=[0]*(n+5)\\nc2=[0]*(n+5)\\nfor i in range(n):\\n    if s[i]==\"x\":\\n        c1[i]=c1[i-1]\\n    else:\\n        c1[i]=max(c1[i-1],c1[i-c-1]+1)\\nfor i in range(n-1,-1,-1):\\n    if s[i]==\"x\":\\n        c2[i]=c2[i+1]\\n    else:\\n        c2[i]=max(c2[i+1],c2[(i+c+1)%n]+1)\\nans=[]\\nif c2[1]==k-1 and s[0]==\"o\":\\n    ans.append(1)\\n\\nfor i in range(1,n-1):\\n    if s[i]==\"x\":\\n        continue\\n    if c1[i-1] + c2[i+1]==k-1:\\n        ans.append(i+1)\\n\\nif n!=1:\\n    if c1[n-2]==k-1 and s[0]==\"o\":\\n        ans.append(n)\\n\\nfor i in ans:\\n    print(i)\\n\\n\\n", "target": "647", "substitutes": {"n": ["o", "cn", "x", "j", "np", "d", "nb", "a", "ac", "name", "ny", "all", "num", "non", "t", "ni", "y", "min", "g", "en", "network", "nn", "nan", "un", "number", "nr", "u", "net", "e", "f", "nt", "max", "b", "ns", "pn", "none", "sn", "no", "q", "w", "z", "v", "l", "m", "r", "nc", "ln", "p", "ne", "N"], "k": ["ik", "o", "x", "work", "j", "d", "ak", "a", "ck", "kick", "t", "ch", "cs", "y", "key", "sk", "g", "ks", "dk", "kin", "u", "f", "e", "max", "b", "C", "q", "w", "z", "K", "v", "l", "m", "r", "p", "N"], "c": ["o", "mc", "cn", "x", "ci", "d", "col", "a", "ac", "uc", "ce", "t", "ch", "cs", "y", "g", "h", "dc", "cu", "u", "f", "e", "max", "b", "ca", "C", "q", "w", "z", "v", "l", "lc", "m", "nc", "p", "count"], "s": ["states", "ls", "o", "services", "parts", "S", "sync", "ssl", "d", "ins", "ses", "ws", "a", "ss", "als", "abs", "args", "qs", "ops", "strings", "cs", "y", "ats", "cases", "os", "g", "comments", "h", "ds", "cells", "ks", "gs", "si", "u", "sets", "e", "settings", "b", "ps", "ns", "es", "sb", "ions", "w", "aces", "ims", "l", "v", "stats", "groups", "xs", "erences", "p"], "c1": ["y01", "c0", "lc0", "lcfirst", "p3", "cu101", "locfirst", "c101", "cfirst", "lc81", "c001", "pone", "c81", "y1", " c001", "rc1", "rc0", "rc2", " c11", "cone", "acone", "c11", "p4", "lc1", "cp2", " cfirst", " c01", "C3", " c101", "cu01", "loc1", "ac2", "C1", "acfirst", " cone", "c3", "y001", "cu1", "y101", " cOne", "cp1", "Cone", " c81", "cu001", "lc3", "C81", "lc11", "cpOne", "cOne", "ac1", "p81", "rcone", "p2", " c0", "acOne", "ac81", "loc2", "cpfirst", "c01", "lc2", "lcone", "c4", "loc11", "p1", "C4", "C2", " c4"], "c2": ["cu20", "p8", "h1", "c182", " c5", " c22", "rc2", " c12", " c182", "dctwo", "c5", "cache1", "c20", "ctwo", "ac1", "k2", "ac32", "ac62", "lc4", "c9", "atwo", "C4", "C2", "c12", "k12", "c22", "p5", "k22", " c32", "dc1", " c20", "ac02", "a2", "rc182", "cache02", "rc8", "ac9", "cu2", "c4", "c62", "dc32", " c8", " cTwo", "kTwo", "lctwo", "c32", " c9", "h12", "lc1", "cu02", "k62", "C1", "lc20", "dc2", "cu1", " ctwo", " c62", " c0", " c02", "k1", "lc2", "cTwo", "rc5", "ac22", " c4", "c0", "lc0", "a0", "p182", "c02", "actwo", "c8", "cache2", "ac2", "a1", "p2", "lc02", "hTwo", "cache9", "h2"], "i": ["mini", "it", "type", "xi", "j", "anti", "oi", "t", "bi", "isi", "source", "ip", "eni", "iu", "f", "I", "ti", "mi", "ki", "z", "m", "ih", "io", "p", "zi", "x", "gi", "ci", "d", "a", "ori", "id", "y", "ix", "iv", "fi", "none", "ii", "li", "pi", "di", "uri", "yi", "ie", "cli", "int", "ind", "ini", "index", "u", "e", "chi", "qi", "l", "v", "ic", "ei", "o", "slice", "ri", "name", "ui", "ni", "info", "api", "key", "on", "si", "ami", "b", "ai"], "ans": ["ls", "san", "nas", "ras", "ins", "aos", "ases", "olds", "ars", "ants", "amps", "ens", "photos", "args", "an", "ats", "asts", "cs", "ents", "ams", "cases", "na", "os", "anas", "plan", "ds", "ks", "nan", "ids", "ana", "vals", "can", "span", "anes", "AN", "aned", "leans", "nos", "ANS", "ann", "lan", "ns", "ends", "errors", "ions", "works", "ani", "aces", "no", "ays", "annels", " scans", "eps", "ons"]}}
{"code": "a,b,c = map(int,input().split())\\n\\nprint(int(0.5*a*b*c//max(a,b,c)))", "target": "637", "substitutes": {"a": ["area", "access", "x", "aw", "d", "ama", "ab", "ac", "aux", "af", "n", "da", "an", "A", "fa", "alpha", "api", "sa", "abc", "ia", "la", "aa", "u", "va", "f", "e", "ad", "ca", "am", "ga", "ae", "asa", "aaa", "ba", "ea", "l", "aj", "bb", "p", "au"], "b": ["eb", "pb", "db", "d", "cb", "nb", "ob", "ab", "B", "bc", "bd", "n", "rb", "bi", "i", "y", "bs", "g", "fb", "ib", "aa", "wb", "lb", "e", "f", "ad", "ca", "sb", "be", "ba", "l", "v", "bb", "bf", "emb"], "c": ["k", "x", "cy", "ci", "d", "cycle", "cb", "col", "ac", "ab", "uc", "n", "s", "ce", "i", "cs", "y", "con", "h", "cp", "ct", "dc", "cu", "u", "xc", "e", "max", "f", "ca", "C", "z", "cr", "l", "lc", "sc", "pc", "m", "cf", "p", "cl"]}}
{"code": "x=int(input())\\nprint(((x//500)*1000)+((x%500//5)*5))", "target": "599", "substitutes": {"x": ["xp", "xi", "px", "plus", "c", "slice", "xy", "point", "event", "tick", "name", "data", "value", "wa", "pos", "xb", "t", "i", "id", "y", "tx", "key", "width", "time", "xxx", "xa", "val", "h", "xe", "rx", "ix", "index", "fx", "number", "ex", "xc", "e", "dx", "max", "my", "X", "xx", "xf", "wx", "w", "z", "v", "xs", "ady", "php", "p", "temp"]}}
{"code": "N,Y=map(int,input().split())\\nflag=False\\nfor i in range(0,N+1):\\n    for j in range(N-i+1):\\n        k=N-i-j\\n        if 10000*i+5000*j+1000*k==Y:\\n            print(i,j,k)\\n            flag=True\\n            break\\n    if flag:\\n        break\\nelse:\\n    print(-1,-1,-1)\\n", "target": "465", "substitutes": {"N": ["U", "D", "S", "NS", "E", "NE", "B", "Ns", "T", "n", "J", "Ni", "L", "G", "Num", "Len", "NT", "NM", " n", "Size", "NN", "No", "MN", "Q", "I", "X", "C", "Ne", "V", "P", "K", "KN", "O", "H", "M", "F", "Z"], "Y": ["U", "YN", "MY", "D", "S", "j", "Py", " y", "E", "B", "T", "yo", "n", "J", "W", "L", "G", "y", "IP", "Q", "I", "X", "C", "V", "P", "z", "K", "H", "M", "YY", "F", "Z"], "flag": ["use", "file", "log", "type", "part", "bool", "ext", "err", "std", "lag", "bug", "only", "af", "print", "flags", "long", "debug", "fun", "valid", "leaf", "test", "id", "key", "sort", "gui", "force", "fd", "FLAG", "offset", "ret", "line", "bad", "py", "error", "bit", "ag", "char", "f", "inline", "status", "standard", "style", "spin", "zag", "Flag", " Flag", "group", "arg", "count"], "i": ["ik", "pi", "k", "x", "xi", "j", "gi", "c", "ci", "d", "phi", "ie", "start", "int", "ind", "n", "J", "ini", "ui", "ni", "bi", "id", "y", "h", "ip", "eni", "si", "u", "iu", "e", "I", "f", "b", "mi", "ki", "q", "ai", "im", "z", "p", "qi", "v", "l", "ii", "li", "m", "ih", "io", "vi"]}}
{"code": "from sys import stdin\\nS = (stdin.readline().rstrip())\\nprint(S[:3])", "target": "775", "substitutes": {"S": ["SE", "SO", "D", " L", "New", "SS", " SS", "R", "Sample", " N", " I", "Section", "B", "T", "Si", "SI", "s", "Source", "A", "L", "G", "Part", "SN", "SL", "SA", "SC", "I", "Socket", "SU", "C", "SB", " D", "V", "Sl", "P", "Input", "M", "F", "Standard", "N", "Z"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\\nfrom itertools import accumulate, permutations, combinations, product\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\n\\nH, W = MAP()\\na = [LIST() for _ in range(H)]\\n\\ncnt = 0\\nmove = []\\nfor i in range(H):\\n\tfor j in range(W):\\n\t\tif i == H-1 and j == W-1:\\n\t\t\tprint(cnt)\\n\t\t\tfor x in move:\\n\t\t\t\tprint(*x)\\n\t\t\texit()\\n\t\tif i%2 == 0:\\n\t\t\tif a[i][j]%2 == 1 and j == W-1:\\n\t\t\t\ta[i][j] -= 1\\n\t\t\t\ta[i+1][j] += 1\\n\t\t\t\tcnt += 1\\n\t\t\t\tmove.append((i+1, j+1, i+2, j+1))\\n\t\t\telif a[i][j]%2 == 1:\\n\t\t\t\ta[i][j] -= 1\\n\t\t\t\ta[i][j+1] += 1\\n\t\t\t\tcnt += 1\\n\t\t\t\tmove.append((i+1, j+1, i+1, j+2))\\n\t\telse:\\n\t\t\tif a[i][W-j-1]%2 == 1 and j == W-1:\\n\t\t\t\ta[i][W-j-1] -= 1\\n\t\t\t\ta[i+1][W-j-1] += 1\\n\t\t\t\tcnt += 1\\n\t\t\t\tmove.append((i+1, W-j, i+2, W-j))\\n\t\t\telif a[i][W-j-1]%2 == 1:\\n\t\t\t\ta[i][W-j-1] -= 1\\n\t\t\t\ta[i][W-j-2] += 1\\n\t\t\t\tcnt += 1\\n\t\t\t\tmove.append((i+1, W-j, i+1, W-j-1))\\n", "target": "605", "substitutes": {"n": ["o", "k", "c", "d", "ng", "node", "nb", "nd", "num", "t", "na", "g", "h", "number", "u", "f", "e", "nt", "b", "ns", "sn", "w", "nor", "z", "l", "m", "r", "nc", "p", "ne", "N"], "_": ["log", " v", "k", "out", " un", " p", "__", " time", "all", "non", "val", "f", " block", " non", "p", "ing"], "INF": ["inInf", " INV", "INN", "ANN", "inN", "ANV", " INInf", "ANF", "ANInf", "INV", "inF", " INN", "INInf", "inV"], "mod": ["step", "inv", "exp", "c", "d", "E", "scale", "mult", "int", "num", "G", "circ", "min", "dim", "cm", " M", "function", "mu", "max", " Mod", "MOD", "Mod", "r", "m", "temp"], "H": ["U", "SH", " h", "D", "S", "He", "HC", "R", "E", " N", " I", "Hi", "B", "RH", "T", "J", "HH", "Rh", "Y", "A", "G", "L", "EH", "h", "Q", "Ha", "HY", "I", "X", "C", "HM", "HI", "V", "HE", "P", "K", "ID", "O", "Ch", "M", "DH", "F", "CH", "N", "Z"], "W": ["GW", "U", "TW", "WI", "BW", "Width", "Sw", "RW", "E", "WF", "Weight", "wa", "B", "WR", "T", "J", "EW", "Y", "L", "Wh", "G", "Web", "DW", "WP", "WW", "NW", "FW", "Q", "WA", "WH", "WC", "WS", "WB", "I", "Wi", "X", "SW", "WN", "C", "CW", "DC", "V", "w", "P", "We", "K", "MW", "WM", "M", "WE", "F", "VW", "N", "Z"], "a": ["ma", "area", "auto", "o", "at", "sta", "ha", "this", "k", "ya", "work", "c", "d", "ama", "ac", "data", "app", "wa", "ab", "aux", "\u00e0", "action", "all", "ata", "an", "s", "array", "A", "actions", "args", "da", "y", "alpha", "api", "na", "sa", "h", "ana", "ia", "index", "aa", "la", "u", "va", "active", "f", "e", "am", "b", "ad", "ca", "ga", "w", "ae", "ba", "ea", "ada", "aj", "ao", "m", "eta", "p", "au"], "cnt": ["scnc", " cn", "cn", "cannot", "lcannot", "CNT", "cno", "c\n", "Cnc", "lcnt", " cno", "scnt", "lc\n", "C\n", "Cannot", "lcNT", "Cno", "lcno", " c\n", "Cn", "acnt", " cannot", "scn", "acNT", "cnc", "lcct", "Cnt", "cct", "acnc", "acno", "cNT", " cnc", "Cct", "scNT", " cct", " cNT"], "move": ["Move", "area", "frame", "ma", "step", "loc", "grade", "c", "slice", "node", "walk", "bug", "diff", "pos", "action", "ge", "array", "range", "game", "update", "apply", "man", "id", "block", "push", "live", "change", "do", "index", "next", "error", "pad", "model", "player", "run", "replace", "size", "moving", "group", "remove", "shape", "match", "jump", "random", "new", "shift", "join", "drop", "position", " Move", "draw", "add", "patch", "adjust", "r", "m", "order", "p", "addr", "path", "motion", "call"], "i": ["ik", "pi", "di", "ji", "o", "it", "uri", "k", "xi", "c", "gi", "anti", "ci", "yi", "oi", "ri", "io", "ie", "ori", "int", "ind", "ui", "ini", "ni", "bi", "id", "y", "info", "api", "h", "ij", "ix", "index", "ia", "ip", "eni", "si", "u", "iu", "ami", "e", "I", "f", "b", "my", "mi", "hi", "ki", "im", "ai", "z", "qi", "v", "l", "ii", "jp", "li", "m", "ic", "ei", "p", "vi"], "j": ["note", "el", "it", "ji", "o", "js", "k", "c", "d", "jc", "ie", "jon", "ind", "J", "oj", "ot", "ui", "ch", "ni", "y", "jan", "g", "h", "ij", "ix", "jl", "py", "jo", "si", "u", "ja", "f", "jet", "e", "je", "b", "jj", "q", "dj", "w", "z", "qi", "v", "jp", "aj", "l", "m", "li", "ii", "r", "fr", "p", "uj", "vi", "ne"], "x": ["xp", "xi", "c", "d", "xy", "xb", "xxxxxxxx", "y", "xxx", "ax", "h", "xt", "xe", "xxxx", "sex", "rx", "ix", "index", "ex", "xc", "e", "dx", "b", "X", "xx", "xf", "xes", "wx", "w", "z", "v", "l", "p"]}}
{"code": "def main():\\n    N = int(input())\\n    P = []\\n    M = []\\n    for i in range(N):\\n        s = input()\\n        left = 0\\n        right = 0\\n        rightmax = 0\\n        for c in s:\\n            if c == \"(\":\\n                left += 1\\n            else:\\n                right += 1\\n            rightmax = max(rightmax, right - left)\\n        leftdiff = left-right\\n        if leftdiff >= 0:\\n            P.append((leftdiff, rightmax, 0, s))\\n            continue\\n            \\n        left = 0\\n        right = 0\\n        leftmax = 0\\n        for c in reversed(s):\\n            if c == \"(\":\\n                left += 1\\n            else:\\n                right += 1\\n            leftmax = max(leftmax, left - right)\\n        M.append((leftdiff, 0, leftmax, s))\\n\\n    R = []\\n    for e in sorted(P, key=lambda _e: _e[1]):\\n        R.append(e[3])\\n    for e in sorted(M, key=lambda _e: _e[2], reverse=True):\\n        R.append(e[3])\\n\\n    nleft = 0\\n    for c in \"\".join(R):\\n        if c == \"(\":\\n            nleft += 1\\n        else:\\n            nleft -= 1\\n        if nleft < 0:\\n            print(\"No\")\\n            return\\n        \\n    if nleft == 0:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\n\\n\\nmain()\\n", "target": "7", "substitutes": {"N": ["D", "S", "Max", "NS", "E", "NL", "B", "Ns", "T", "n", "Sn", "J", "Y", "Ni", "L", "G", "Len", "Num", "NT", " n", "Size", "NN", "Q", "I", "X", "C", "Na", "Ne", "V", "OS", "K", "O", "F", "Z"], "P": ["PU", "D", "S", "Py", "E", "TP", "Point", "PO", "PF", "T", "PA", "J", "PD", "PM", "A", "L", "G", "LP", "Power", "PB", "IP", "RP", "PS", "PI", "AP", "PT", "Q", "Left", "Po", "X", "Ps", "PP", "PE", "V", "Pro", "CP", "NP", "H", "p"], "M": ["U", "MO", "LM", "D", "S", "MQ", "Other", "E", "FM", "B", "OM", "T", "W", "J", "Y", "L", "G", "MU", "DM", "NM", "MD", "MN", "Ms", "Q", "I", "X", "MR", "C", "MA", "JM", "V", "MM", "MC", "Mo", "VM", "SM", "MT", "MX", "m", "O", "H", "MP", "F", "CM", "MF", "RM"], "i": ["it", "j", "gi", "ci", "d", "ac", "a", "ind", "anc", "t", "id", "g", "cor", "isin", "ct", "stat", "il", "u", "iu", "f", "ti", "I", "q", "ai", "z", "ii", "r", "nc"], "s": ["rs", "ls", "o", "sec", "string", "S", "x", "d", "ses", "start", "ss", "sl", "n", "single", "t", "space", "site", "y", "sw", "os", "h", "ds", "sample", "server", "lines", "st", "sites", "sq", "south", "si", "u", "spec", "f", "b", "ps", "ns", "es", "sb", "w", "z", "sv", "l", "v", "less", "m", "r", "se", "its", "p"], "left": ["control", "close", "best", "half", "both", "split", "front", "LE", "nl", "Left", "leave", "child", "pl", "position", "less", "p", "cl", "le", "full", "x", "plus", "d", "NL", "id", "width", "offset", "default", "label", "none", "length", "r", "top", "search", "low", "lo", "diff", "ell", "n", " Left", "long", "list", "ignore", "url", "lower", "Right", "last", "l", "two", "el", "case", "partial", "down", "value", "fl", "side", "second", "double", "L", "inner", "min", "shell", "line", "size", "one", "obj", "bottom", "found", "small", "level"], "right": ["rank", "rest", "east", "rew", "x", "rights", "plus", "partial", "close", "square", "d", "down", "ro", "back", "short", "only", "value", "three", "half", "diff", "nd", "both", "rh", "reverse", "inner", "correct", "width", "cost", "ax", "self", "th", "west", "rw", "then", "row", "radius", "max", "one", "end", "sometimes", "X", "before", "none", "inside", "third", "shift", "child", "no", "bottom", "w", "arrow", "cross", "mid", "r", "m", "Right", "wrong"], "rightmax": ["maxmin", "wallMax", "wrongmin", "leftMax", " rightconf", "wrongconf", "rightax", " rightdiv", "leftax", "rightdiff", "leftmin", "rightmin", "leftconf", "walldiv", "wrongwrap", "maxdiv", " rightwrap", "leftwrap", "wallmax", "rightMax", "maxax", "maxdiff", " rightMax", "wrongmax", " rightax", "leftdiv", "rightwrap", "maxmax", " rightmin", "wallmin", " rightdiff", "rightconf", "rightdiv"], "c": ["isc", "o", "mc", "k", "ci", "d", "tc", "col", "esc", "ac", "a", "uc", "bc", "fc", "n", "anc", "cc", "cd", "cs", "ec", "ync", "h", "abc", "exc", "ct", "cm", "dc", "ach", "cu", "xc", "u", "cation", "f", "toc", "b", "code", "arc", "unc", "C", "cot", "l", "ae", "usc", "cr", "lc", "chain", "sc", "ic", "pc", "m", "v", "oc", "nc", "p", "r", "cf", "rc", "orc", "enc"], "leftdiff": ["lowdiff", " leftDiff", " leftpart", "longdist", "lengthdist", "rightpart", "leftdist", " leftrange", "rightdiff", "lengthmax", "labeldifferent", " leftdifferent", "rightrange", "labelDiff", "lowdist", "lowDiff", "labeldiff", "rightdist", "rightDiff", "lengthdiff", "longmax", "leftpart", "longrange", "lengthpart", "leftDiff", "lowpart", "longdiff", " leftdist", "rightdifferent", "leftrange", "leftdifferent"], "leftmax": ["Leftmin", "wrongmin", "bottomax", "LeftMAX", "bottomcol", "frontdiff", "leftstd", " leftwrap", "leftax", "mincol", "wrongdiff", "minmax", "rightMAX", "rightdiff", "Leftmax", "leftmin", "Leftdiff", "bottommax", "rightmin", "mindiff", " leftmin", "wrongMAX", "leftcol", " leftstd", " leftax", "leftwrap", "frontmax", "leftMAX", "frontmin", "wrongmax", "bottomdiff", "rightwrap", " leftcol", "rightstd", "leavewrap", "leavediff", "frontstd", "minax", "leavemax"], "R": ["GR", "KR", "D", "Re", "Rs", "S", "JR", "RW", "HR", "E", "RS", "It", "Repl", "Rule", "RR", "With", "T", "Rh", "W", "DR", "Y", "A", "L", "SR", "G", "Res", "Run", "RO", " r", "RP", "RA", "Q", "BR", "Rest", "Br", "X", "MR", "NER", "RN", "V", "CR", "r", "O", "Right", "RG"], "e": ["note", "el", "est", "ze", "o", "element", "le", "k", "x", "j", "er", "eg", "d", "E", "a", "ie", "diff", "une", "n", "ge", "ce", "ef", "t", "ec", "y", "g", "en", "eed", "line", "error", "u", "ele", "ite", "f", "ee", "ed", "one", "b", "ese", "none", "es", "ae", "example", "z", "l", "ea", "v", "ace", "ei", "se", "ade", "m", "p", "r", "ne"], "nleft": ["nyLeft", "yleave", " nleave", "oleft", " nLeft", "snbottom", "yright", " nbottom", "nleave", "snleft", "numdiff", "Nleave", " ndiff", "oright", "sndiff", "NLeft", "yleft", "nmissing", "nyleft", "numbottom", "Nbottom", " nright", "ndiff", "Nleft", "newleft", "newLeft", "numleft", "Nright", "Nmissing", "nLeft", "nright", "oleave", "newbottom", "nymissing", "nbottom", " nmissing"]}}
{"code": "N,A,B=input().split()\\nN=int(N)\\nA=int(A)\\nB=int(B)\\n\\ndef findSumOfDigits(n):\\n    k = 0\\n    sum = 0\\n    while n>0:\\n        k = n%10\\n        n = n//10\\n        sum = sum + k\\n    return sum\\n\\nsum=0\\nfor i in range(N+1):\\n    tmp = findSumOfDigits(i)\\n    if A<=tmp:\\n        if tmp<=B:\\n            sum = sum + i\\nprint(sum)\\n", "target": "704", "substitutes": {"N": ["U", "Node", "NA", "D", "S", "CN", "R", "NS", "E", "NC", "NL", "Ns", "T", "num", "Y", "L", "G", "Ni", "Len", "CNN", "NT", "NM", "Size", "NW", "NN", "MN", "Q", "I", "X", "C", "Ne", "NR", "V", "P", "K", "Sum", "O", "H", "M", "F", "Z"], "A": ["As", "AR", "Ac", "NA", "U", "D", "S", "E", "a", "ac", "CA", "T", "mA", "At", "Array", "Y", "AD", "AM", "L", "G", "Num", "Ab", "HA", "AI", "Art", "SA", "AU", "AP", "Ar", "I", "AA", "b", "Ang", "X", "am", "C", "AST", "Na", "ai", "V", "P", "API", "K", "AB", "O", "AC", "AW", "And", "F", "M", "AAA", "Name", "LA"], "B": ["U", "EB", "D", "BM", "BF", "R", "E", "LB", "nb", "Both", "BB", "T", "UB", "W", "J", "BE", "Y", "L", "G", "Ab", "NB", "BA", "Blue", "BD", "OB", "BI", "Bah", "GB", "Bs", "Q", "QB", "DB", "WB", "BER", "I", "b", "X", "C", "V", "P", "K", "BC", "AB", "O", "H", "M", "F", "Z"], "n": ["o", "cn", "x", "j", "c", "d", "nm", "nb", "a", "Ns", "num", "s", "t", "ni", "y", "g", "nn", "nan", "number", "nu", "u", "f", "nt", "b", "ns", "w", "l", "v", "m", "r", "nc", "p", "ne"], "k": ["o", "kn", "ke", "x", "kk", "j", "c", "d", "ak", "a", "ck", "num", "t", "y", "key", "sk", "g", "count", "ok", "ks", "u", "f", "e", "b", "ki", "q", "w", "kw", "z", "K", "v", "m", "r", "p", "km"], "sum": ["it", "average", "out", "su", "work", "j", "c", "ac", "num", "f", "cum", "summary", "m", "comment", " total", "p", "temp", "count", "part", "um", " SUM", "scale", "ss", "weight", "result", "sk", "acc", "py", "final", "ee", "max", "am", "seed", " count", "sh", "length", "hash", "unit", "sec", "input", "ass", "s", "alpha", "total", "cost", "pack", "loss", "index", "bin", "u", "net", "nt", "mass", "v", "Sum", "rank", "start", "all", "kick", "cal", "cache", "test", "key", "min", "g", "gram", "si", "size", " summ", "mean", "sign", "skip", "conf", "se"], "i": ["mini", "pi", "it", "II", "x", "xi", "j", "gi", "c", "ci", "d", "a", "io", "start", "int", "ind", "s", "ini", "t", "ni", "bi", "alpha", "inner", "h", "si", "u", "iu", "f", "I", "ti", "end", "b", "e", "mi", "inf", "im", "ai", "init", "z", "chi", "qi", "v", "ii", "li", "r", "m", "p"], "tmp": ["part", "Temp", "input", "kk", "j", "_", "c", "sp", "nb", "output", "a", "data", "ie", "start", "pos", "T", "int", "BB", "amp", "num", "cache", "t", "result", "test", "NB", "alpha", "NN", "tt", "kB", "acc", "nu", "mp", "u", "f", "mu", "pot", "nt", "b", "I", "mm", "emp", "ai", "v", "m", "sam", "bb", "p", "temp"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\ns = input().rstrip()\\n\\nfrom collections import Counter\\n\\nc = Counter(s)\\n\\nif len(s) == 1:\\n    print(\"YES\")\\n    sys.exit()\\n\\nif len(c.keys()) == 1:\\n    print(\"NO\")\\n    sys.exit()\\n\\nvalues = list(c.values())\\nvalues.sort()\\n\\nif len(c.keys()) == 2:\\n    if values[0] == 1 and values[1] == 1:\\n        print(\"YES\")\\n    else:\\n        print(\"NO\")\\n    sys.exit()\\n\\nvalues[1] -= values[0]\\nvalues[2] -= values[0]\\n\\nif values[1] == 1 and values[2] == 1:\\n    print(\"YES\")\\nelif values[1] == 0 and values[2] == 1:\\n    print(\"YES\")\\nelif values[1] == 1 and values[2] == 0:\\n    print(\"YES\")\\nelif values[1] == 0 and values[2] == 0:\\n    print(\"YES\")\\nelse: \\n    print(\"NO\")\\nsys.exit()\\n\\n", "target": "265", "substitutes": {"input": ["string", "out", "param", "ins", "raw", "output", "data", "value", " Input", "submit", "util", " output", "option", " int", "array", "i", "password", "version", "request", "source", "header", "bin", "error", "row", " inputs", "process", "f", "utils", "help", "reader", "insert", "select", "load", "save", "q", "init", "counter", "accept", "str", "text", "Input", "comment", "p", "form", "call"], "s": ["ls", "services", "string", "o", "S", "sync", "d", "bytes", "ws", "ses", "ins", "a", "sys", "data", "n", "strings", "i", "details", "g", "sections", "source", "lines", " S", "si", " inputs", "sets", "f", "ys", "b", "ns", "es", "sb", "status", "w", "sv", "l", "v", "sg", "stats", "r", "m", "str", "xs", "p", "seconds"], "c": ["cur", "o", "mc", "k", "x", "cy", "ci", "d", "ctx", "col", "ac", "coll", "fc", "n", "cc", "cache", "t", "ch", "cs", "y", "ec", "ctrl", "g", "collection", "h", "abc", "self", "cp", "ct", "co", "cm", "dc", "cu", "u", "f", "e", "b", "C", "w", "counter", "z", "cr", "v", "l", "lc", "r", "m", "words", "cf", "p", "cl", "count"], "values": ["ports", "forms", "events", "results", "marks", "times", "images", "args", "strings", "cases", "blocks", "places", "Values", "gets", "boxes", "ns", "ims", "verts", "words", "aults", "files", "maps", "data", "als", "vs", "details", "points", "rows", "ks", "measures", "items", "iv", "ores", "tests", "stats", "groups", "ries", "codes", "runs", "plugins", "models", "ints", "keys", "vals", "lines", "stores", "sets", "settings", "objects", "es", "params", "v", "grades", "years", "ones", "types", "series", "states", "checks", "ins", "reads", "value", "limits", "rules", "changes", "levels", "ences", "flows", "lists", "fields", "names", "frames", "dates", "uments", "errors", "pages", "ions", "versions", "members", "seconds"]}}
{"code": "n=int(input())\\n\\na=[[int(i) for i in input().split()] for j in range(2)]\\n\\nsentou=[]\\nusiro=[]\\n\\nfor i in range(n):\\n    if i==0:\\n        sentou.append(a[0][0])\\n        usiro.append(a[1][-1])\\n    else:\\n        sentou.append(a[0][i]+sentou[-1])\\n        usiro.append(a[1][-i-1]+usiro[-1])\\n\\nusiro=usiro[::-1]\\nans=[]\\nfor i in range(n):\\n    ans.append(sentou[i]+usiro[i])\\nprint(max(ans))", "target": "476", "substitutes": {"n": ["o", "k", "x", "c", "np", "d", "nb", "an", "s", "num", "t", "y", "en", "h", "nan", "span", "nu", "u", "f", "e", "fn", "nt", "b", "ns", "no", "w", "z", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "auto", "o", "x", "input", "work", "c", "aw", "ar", "img", "ab", "ac", "app", "wa", "art", "\u00e0", "args", "ata", "s", "da", "array", "A", "an", "missing", "y", "alpha", "sa", "image", "ia", "index", "aa", "la", "u", "va", "f", "e", "b", "am", "ad", "ga", "ai", "ae", "w", "asa", "z", "l", "ao", "m", "p", "audio", "au"], "i": ["pi", "di", "ji", "o", "k", "x", "xi", "c", "gi", "ci", "d", "yi", "ri", "oi", "phi", "io", "ie", "start", "int", "ind", "ini", "ui", "ni", "bi", "id", "y", "ix", "index", "ip", "si", "u", "iu", "e", "I", "f", "ti", "b", "hi", "ime", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "m", "p", "vi", "zi"], "j": [" bi", "ji", " b", " J", " vi", "gi", " it", " I", "ie", " inj", " ip", " time", "\u0438", " il", "ij", " r", " z", " obj", "iu", " ni", "I", " ir", "q", "z", " q", "ii", " jo", " Xi"], "sentou": ["sentyou", " sentu", "pedyou", "sentour", "sequhou", "sequour", "sentOU", "sequu", "sendure", "SentOU", "sedoo", "givenou", "sedou", "sentoo", "sequOU", "sedu", " sentoul", "sedore", "Sentour", "Sentoo", "sentore", "sendoul", " sentore", "usOU", "sendou", "usour", "senthou", "givenoo", "sequou", " sentyou", "usou", " sentoo", "sequyou", "pedour", "sendour", " senture", "pedu", "Senture", "Senthou", "sentu", "sentoul", "givenu", " sentour", "Sentou", "usoo", "Sentoul", " sentOU", "senture", "pedou", " senthou", "givenore"], "usiro": ["cusira", "rusairo", "usim", "rusira", "uicho", "uside", "cusirin", "rusiro", "ssairo", "assiral", "cusire", "sira", " usire", "cusairo", "sismo", "ssiro", " usahi", "usahi", "uairo", "uiral", "side", " usicho", "uide", " usim", "cusahi", "uirin", "ssira", " usismo", "ssahi", " uside", " usiral", "uire", "siro", "uira", "assicho", "usicho", " usairo", "cusiro", "usismo", "sairo", "assiro", "rusismo", "usairo", "uiro", "usiral", "cusismo", " usira", " usirin", "assairo", "cusim", "sim", "usira", "usire", "usirin"], "ans": ["anus", "regular", "san", "nas", "ras", "aos", "ins", "ations", "ars", "ants", "amps", "ens", "an", "anc", "s", "ats", "outs", "cs", "ents", "anon", "na", "os", "anas", "gan", "ks", "ana", "An", "span", "can", "names", "la", "aned", "anne", "ANS", "lan", "ann", "ns", "us", "none", "ros", "ai", "ani", "ays", "cross", "acs", "aus", "ons", "au"]}}
{"code": "a, b, h = map(int, open(0).read().split())\\n\\ndef Trapezoids(a, b, h):\\n    return (a + b) * h // 2\\n\\nif __name__ == '__main__':\\n    print(Trapezoids(a, b, h))", "target": "319", "substitutes": {"a": ["ma", "area", "access", "ha", "work", "x", "c", "aw", "off", "ama", "ab", "ac", "wa", "int", "n", "mA", "pa", "da", "an", "A", "i", "alpha", "api", "na", "qa", "sa", "ia", "la", "aa", "va", "ad", "ca", "am", "ga", "ai", "w", "ae", "asa", "ba", "ea", "aj", "p", "au"], "b": ["eb", "mb", "abb", "pb", "x", "c", "db", "d", "ob", "nb", "ab", "bh", "B", "bc", "n", "rb", "bi", "i", "y", "bs", "bar", "fb", "ib", "aa", "wb", "br", "lb", "e", "f", "sb", "w", "ba", "l", "v", "bb", "m", "r", "emb", "p", "bp"], "h": ["ha", "k", "x", "oh", "j", "c", "d", "bh", "n", "rh", "t", "ch", "i", "id", "y", "ph", "g", "ah", "hh", "host", "u", "size", "e", "f", "help", "hr", "end", "hi", "q", "sh", "w", "uh", "z", "l", "v", "hm", "m", "length", "H", "r", "ih", "p", "hs"]}}
{"code": "N, K = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\ns = sum(A)\\nflag = False\\ndef make_divisors(n):\\n    divisors = []\\n    for i in range(int(n**0.5), 0, -1):\\n        if n%i == 0:\\n            divisors.append(i)\\n            if i != n//i:\\n                divisors.append(n//i)\\n    return sorted(divisors, reverse=True)\\ndivs = make_divisors(s)\\nfor x in divs:\\n    if flag:\\n        break\\n    sortedA = sorted([a%x for a in A])\\n    sumA = sum(sortedA)\\n    index_len = len(sortedA)\\n    sump = 0\\n    for i, a in enumerate(sortedA):\\n        sump += a\\n        summ = x*(index_len - (i+1)) - (sumA - sump)\\n        if sump == summ and sump <= K:\\n            print(x)\\n            flag = True\\n            break\\n\\n", "target": "764", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "E", "B", "Ns", "T", "Y", "L", "G", " Ne", "Q", "I", "X", "C", "V", "P", "O", "H", "M", "F", "Z"], "K": ["U", "KR", "D", "k", "S", "R", "E", "SK", "B", "T", "W", "J", "Y", "G", "L", "KK", "Q", "I", "X", "C", " k", "V", "P", "KS", "O", "H", "M", "F", "km", "Z"], "A": ["As", "U", "D", "S", "au", "E", "Alpha", "B", "CA", "All", "T", "W", "mA", "Array", "Y", "array", "G", "L", "an", "Am", "alpha", "Index", "An", "AP", "Ar", "I", "AA", "X", "C", "Na", "V", "P", "API", "p", "H", "M", "F", "LA"], "s": ["states", "ls", "fs", "o", "rates", "parts", "S", "c", "d", "ses", "ss", "Ns", "actions", "strings", "y", "g", "sa", "sections", "os", "gs", "south", "si", "u", "sets", "e", "f", "b", "ns", "ans", "es", "w", "l", "v", "m", "xs", "se", "small", "p", "seconds"], "flag": ["file", "log", "type", "agged", "field", "back", "lag", "bug", "only", "ground", "flags", "long", "debug", "fun", "focus", "info", "leaf", "id", "key", "force", "FLAG", "offset", "date", "die", "ret", "line", "free", "py", "bit", "ag", "char", "star", "agg", "f", "code", "fit", "store", "status", "standard", "kind", "delay", "style", "wait", "spin", "zag", "Flag", " Flag", "group", "arg", "count"], "n": ["o", "cn", "k", "j", "c", "np", "d", "nb", "num", "an", "t", "non", "ni", "y", "on", "min", "g", "en", "nan", "nn", "un", "index", "number", "nu", "u", "net", "nt", "e", "f", "b", "ns", "pn", "sn", "no", "w", "z", "l", "v", "m", "r", "nc", "p", "ne"], "divisors": ["divistor", "divistractions", "divizors", " divactores", "divendores", "divisor", "divizor", " divisos", " divistters", "divistors", " divisories", "divsores", "dividories", " dividors", " divisor", "divistions", " divistractions", "divactters", "divizores", "divactions", " divactor", "divisters", "divactor", "divendor", "divactores", "diviscories", "dividos", " divisores", "divizters", "dividor", "divendors", "divsractions", "divisores", "divsors", "divisions", "diviscor", "divactors", "divactos", "divistores", "dividores", "divisories", " divistors", " divistor", " dividories", "diviscores", "divizos", "divsor", "divistters", " divistions", "divisractions", "dividractions", "divendories", " divisractions", "diviscors", "dividors", "divizions", " divactos", " dividor", " divistores", " divactors", " divisions", "divisos", " dividores", " divisters"], "i": ["mini", "pi", "di", "o", "uri", "k", "xi", "j", "gi", "c", "ci", "d", "yi", "phi", "ri", "ie", "start", "int", "ind", "ini", "num", "ui", "ali", "ni", "bi", "id", "y", "ix", "index", "ip", "ia", "multi", "si", "u", "iu", "fi", "e", "ti", "I", "f", "b", "inf", "ai", "z", "p", "qi", "l", "v", "ii", "ic", "li", "m", "ei", "io", "zi"], "divs": ["initials", "colS", " divS", "Dives", "cols", "initialS", "divS", "divos", " divns", "DivS", "Divs", "initiales", "Divos", "coles", "initialos", " dives", " divos", "dives", "Divns", "colns", "divns"], "x": ["xp", "xi", "j", "c", "search", "d", "ctx", "xy", "name", "int", "xb", "num", "id", "y", "alpha", "xml", "na", "xa", "xxx", "ax", "h", "xe", "sex", "ay", "word", "ix", "index", "ex", "xc", "u", "foo", "e", "f", "max", "dx", "X", "xx", "unc", "xf", "w", "z", "example", "v", "xs", "p"], "sortedA": ["sortinga", "showsortingAn", "sordereda", "sorderedS", "unsortedS", "insortedH", "unsorderedAn", "sortB", "signedAs", "sortH", "sortedB", "saltAs", "showsortinga", "signeda", "sashedAn", "sashedA", "sorderedB", " sortA", "sortingH", "showsortedA", "showsorteda", "sattedA", "sortera", "sorterA", "sortingAs", "unsortedAn", " sortedB", "sorterB", "showsortedAn", "sortingAn", "sorta", "saltAn", " sorteda", "sorderedA", "insortH", "signedAn", "svertedAs", "sortingA", "sattedAn", "sorteda", "signedA", "svertedH", "unsorderedA", "sortAs", "showsortingA", "sashedS", "showsortingAs", "insortAs", "sortA", " sortB", "sorderedAn", "salta", "unsortedA", "showsortedAs", "insortedA", "sortedH", "svertedA", "insortA", "unsorderedS", "insortedAs", "saltA", "sortedAs", "sortedAn", " sorta", "sattedS", "sortedS"], "a": ["ma", "area", "\u00e4", "auto", "o", "_", "c", "ait", "aw", "d", "sub", "ac", "wa", "data", "pa", "all", "an", "array", "fa", "amp", "y", "alpha", "xa", "na", "sa", "ax", "g", "abc", "ana", "ia", "index", "aa", "ach", "va", "e", "f", "b", "am", "ca", "ga", "ai", "ae", "ta", "aaa", "ba", "z", "ea", "ada", "l", "p", "ka", "au"], "sumA": ["sumE", " suma", "parseA", "SumA", " sumE", "parseB", "meanB", "meanE", "parsea", "sumB", "suma", "meanA", "SumB", "sumArray", "meanArray", "scaleArray", "scaleB", " sumB", "Suma", " sumArray", "scaleA", "scaleE"], "index_len": [" indexingmin", "indexingpos", " index_pos", "indexerln", " index_Len", "index_pos", " index_ln", "indexingmin", "indexingln", "indexermin", "index_ln", " indexingln", "index_Len", "index_min", "indexerlen", " index_min", "indexinglen", " indexinglen", "indexingLen"], "sump": ["sesumper", "ssamp", "ssum", "Sump", "SUMP", " sumper", "sesump", "ssumm", "sum", "psum", "pUMP", "psumm", "ssumping", "sumper", "sumping", "sesumm", "Samp", " samp", "psump", "sumped", "sUMP", "ssumper", "psumped", " sUMP", "Sumped", " sumping", " sum", "pamp", "sesum", "Summ", "pumm", "ssump", "psumper", "pump", "psamp", " sumped", "psumping", "samp"], "summ": ["ssamp", "setsump", "lample", "ssugar", " sugar", "Sump", "Sample", "lump", "ssumm", "sum", "sugar", "lumm", " samp", "sample", " sum", "lum", "setsumm", "setsamp", "Summ", " sample", "setsugar", "ssump", "Sum", "samp"]}}
{"code": "n,m = list(map(int, input().split()))\\nL = [list(map(int, input().split())) for _ in range(m)]\\n\\nfrom collections import defaultdict\\nfrom collections import deque\\nd=defaultdict(list)\\nfor l in L:\\n    d[l[0]-1].append(l[1]-1)\\n    d[l[1]-1].append(l[0]-1)\\n\\n#print(d)\\n\\n# \u8fba\u3092\u5207\u65ad\u3057\u305f\u72b6\u614b\u3067\u5e45\u512a\u5148\u63a2\u7d22\u3092\u3057\u3066\u3059\u3079\u3066\u306e\u9802\u70b9\u306b\u884c\u3051\u308b\u304b\\ndef check_path(hen):\\n        \\n    visit=[False]*n\\n    q=deque([0])\\n    \\n#    print('L=',L)\\n#    print('hen=',hen)\\n    \\n    while q:\\n        node = q.popleft()\\n#        print('current->', node)\\n        visit[node]=True\\n        Nexts = d[node]\\n        for nxt in Nexts:\\n            if visit[nxt]:\\n#                print(nxt, ' is already visited.')\\n                continue\\n            \\n            if node+1 not in L[hen] or nxt+1 not in L[hen]:\\n#                print('next->', nxt)\\n                q.append(nxt)\\n    \\n#    print('visit=', visit)\\n    return all(visit)\\n    \\ncnt=0\\nfor i in range(m):\\n    if not check_path(i):\\n        cnt+=1\\n\\nprint(cnt)", "target": "634", "substitutes": {"n": ["el", "o", "ol", "c", "nm", "nb", "name", "ll", "i", "nn", "line", "nl", "len", "f", "fn", "ns", "no", "z", "v", "li", "nc", "ln", "ne", "N"], "m": ["o", "mode", "k", "j", "c", "s", "num", "range", "i", "y", "g", "h", "ms", "month", "u", "e", "f", "mu", "b", "mm", "w", "pm", "z", "dm", "v", "r", "M", "p"], "L": ["LM", "D", "S", "LO", "R", "E", "LB", "LR", "NL", "B", "List", "T", "W", "J", "list", "G", "SL", " M", "Q", "LT", "I", "Li", "dL", "C", "LL", "Lu", "V", "Sl", "P", "K", "DL", "O", "M", "F", "N", "Z"], "_": ["k", " __", "x", "__", " time", "all", "val", "len", "f", "p"], "d": ["o", "dt", "D", "dos", "x", "db", "c", "de", "pd", "a", "data", "diff", "s", "list", "t", "i", "dy", "g", "fd", "ds", "dh", "do", "u", "f", "dd", "e", "b", " D", "dl", "w", "dict", "z", "v", "r", "dat", "p", "ld"], "l": ["el", "ls", "o", "loc", "k", "ol", "x", "wl", "j", "c", "left", "kl", "fl", "sl", "ll", "list", "s", "t", "i", "g", "ml", "nl", "la", "lin", "u", "rl", "f", "e", "b", "pl", "dl", "z", "v", "lc", "lib", "li", "r", "ln", "p", "cl"]}}
{"code": "N = int(input())\\nG = [[] for _ in range(N)]\\nque_f = [0]\\nque_s = [N-1]\\ndis_f = [-1]*N\\ndis_s = [-1]*N\\nfor i in range(N-1):\\n  a, b = map(int,input().split())\\n  a -= 1\\n  b -= 1\\n  G[a].append(b)\\n  G[b].append(a)\\n\\nvisited_f = [False]*N\\ndis_f[0] = 0\\nwhile que_f:\\n  pos = que_f.pop(0)\\n  for next_pos in G[pos]:\\n    if visited_f[next_pos] == True:\\n      continue\\n    que_f.append(next_pos)\\n    visited_f[pos] = True\\n    dis_f[next_pos] = dis_f[pos] + 1\\n\\nvisited_s = [False]*N\\ndis_s[N-1] = 0\\nwhile que_s:\\n  pos = que_s.pop(0)\\n  for next_pos in G[pos]:\\n    if visited_s[next_pos] == True:\\n      continue\\n    que_s.append(next_pos)\\n    visited_s[pos] = True\\n    dis_s[next_pos] = dis_s[pos] + 1\\n    \\nf = 0\\ns = 0\\nfor i in range(N):\\n  if dis_f[i] <= dis_s[i]:\\n    f += 1\\n  else:\\n    s += 1\\n\\nif f >s:\\n  print('Fennec')\\nelse:\\n  print('Snuke')", "target": "435", "substitutes": {"N": ["ND", "Node", "NA", "D", "S", "Network", "R", "NS", "E", "NE", "NC", "B", "Ns", "T", "n", "W", "J", "Y", "Ni", "L", "A", "Len", "Num", "IN", "CNN", "NT", "NM", " n", "Size", "No", "MN", "Q", "Length", "I", "X", "C", "Na", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "G": ["U", "GW", "GR", "D", "GS", "GD", "S", "GN", "R", "E", "GG", "B", "IG", "T", "Ge", " g", "GM", "J", "W", "GC", "CG", "Y", "A", "L", "GE", "GU", "Graph", "Ga", "g", "GA", "GP", "GV", "GB", "Q", "GH", "LG", "I", "X", "Group", "C", "GI", "FG", "GF", "V", "P", "Gu", "Gs", "H", "M", "F"], "_": ["x", "d", " p", " time", "n", "all", "num", "g", " x", "I", "q", "p", " all"], "que_f": ["sem2s", "que67cf", "Que_of", "sem_fr", "que_cf", "done_e", "que_fen", "done64e", "sem2f", "que2f", "que2of", "ques_fs", "que__fs", "ques_cf", "que_c", "que__cf", "Que_fen", "done64fs", "Que_f", "que67c", "que2fr", "que64f", "sem_f", "que67fs", "que_p", "que_e", "ques_f", "que64e", "done64b", "que64fs", "done_fs", "sem2of", "que2s", "que_of", "sem_s", "Que_p", "que_fr", "que64b", "ques_c", "que__c", "que67f", "sem_of", "que_b", "que__f", "done64f", "done_f", "done_b", "sem2fr", "que_fs"], "que_s": ["queue_f", "que_sl", "closed67south", "qu_sl", "qu_b", "que5s", "queLogf", "Que_s", "closed_s", "Que_f", "closed_b", "Que5ws", "que5ws", "queLoglines", "closed67s", "Que5s", "que_lines", "que__su", "que__sl", "que67su", "que5p", "que_p", "que_su", "closed_south", "queue_lines", "closed_su", "queLogt", "que67b", "Que5p", "qu_f", "que5f", "que67south", "queLogs", "que__south", "Que_p", "qu_s", "Que_ws", "que67s", "que_t", "que_ws", "closed67su", "Que5f", "queue_s", "que_b", "queue_t", "que__f", "que_south", "que__b", "closed67b", "que__s"], "dis_f": ["dis_rf", "disPare", " dis_fold", "bad_rf", "dis2s", " dis_x", "dis_x", "dis___fp", "dis6f", "dis2f", "dis67x", "dis_e", "disParf", "dis67f", "dis2fe", "bug_fp", "dis_fs", "dis6fp", "dis2rf", "disParg", "dis_b", "dis_fl", "de_f", "dis_g", "bug_fs", "dis6fl", "Dis_g", "dis___fs", "dis_fe", "dis_fold", "bug_fl", "bad_f", "dis6fs", "dis_fen", "Dis_e", "bad_s", "dis_af", "dis___f", " dis_cf", "bad_fe", "dis67fold", "de_af", "Dis_f", "dis_cf", "dis67cf", "dis___fl", "bug_f", "disParfen", "Dis_fen", "de_e", "de_b", "dis_fp"], "dis_s": ["dis_sup", "dis2g", "disIPn", "dis2s", "disRunf", "dis2f", "de_session", "dis_d", "disRund", "dis_n", "de_d", "de_sq", " dis_sup", "dis__s", "dis2n", "dis__ns", "de_f", "dis_g", "disIPsession", " dis_l", "dis_l", "disAllf", "dis__g", "dis_sq", "disAllg", "de_g", "dis_ns", "dis__f", "dis_c", "de_ns", "de_n", "disAlls", "de_c", "disAllns", "disIPs", "de_s", "disRunsq", "dis_session", "disRuns", "disIPc"], "i": ["pi", "it", "di", "uri", "k", "x", "j", "xi", "c", "gi", "ci", "d", "phi", " I", "io", "ie", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "iq", "y", " j", "g", "index", "ip", "si", "u", "iu", "fi", "I", "ti", "e", "mi", "ai", "z", "p", "qi", "v", "ii", "li", "ei"], "a": ["ma", "area", "x", "c", "d", "ak", "ac", "ab", "af", "n", "da", "an", "A", "fa", "y", "g", "sa", "ia", "aa", "u", "va", "e", "ad", "ca", "ga", "ai", "ae", "w", "aaa", "ba", "l", "r", "p", "au"], "b": ["o", "eb", "k", "mb", "abb", "x", "j", "c", "d", "nb", "ab", "B", "bd", "n", "rb", "A", "bi", "y", "bs", "g", "bel", "h", "aa", "wb", "u", "lb", "e", "sb", "w", "be", "z", "ba", "l", "v", "r", "bb", "p"], "visited_f": ["visited_bf", "visitedLogbf", "visitedLogf", "visitedLogc", "visit_f", "visalled_s", "visit_s", "visit_e", "visited__g", "visitedLoge", "visited_g", "visit_g", "visalled_f", "visalled_fold", "visalled_g", "visited_e", "visit_bf", "visited__f", "visited_fold", "visited_c", "visit_c", "visited__s", "visited__e"], "pos": ["unit", "it", "type", "loc", "part", "o", "pid", "k", "Pos", "x", "j", "axis", "c", "doc", "sp", "exp", "d", "ng", "page", "col", "ac", "start", "prop", "ss", "int", "ind", "n", "abs", "all", "inc", "po", "bot", "id", "site", "key", "sort", "os", "val", "min", "act", "POS", "index", "next", "line", "win", "comp", "seq", "size", "len", "nos", "e", "cos", "neg", "no", "pt", "position", "z", "ref", "l", "lat", "skip", "slot", "p", "block", "pose"], "next_pos": ["next_loc", "Next_pose", "next_line", "next_n", "next67loc", " next_slice", "next24pos", "next_pid", " next_position", "next_exp", "nextxpos", "next67pos", "next24line", "nextPloc", "nextThepos", " next_pose", "next64position", "Next_pos", "nextxpose", "next64prop", "next24loc", "next_gen", " next_point", "next_pointer", " next_exp", "next_slot", " next_loc", "nextTheexp", " next_slot", "next67pid", "next24pid", "next_os", "nextTheslice", "next64pos", "Next_position", " next_os", "next_lat", " next_len", "next_slice", "nextTheposition", "Next_loc", "next64slot", " next_pid", "nextPpoint", "next_pose", "next_len", " next_n", "next_point", "nextxloc", "nextPpos", "next_position", " next_gen", "nextPpointer", " next_line", "next_prop", " next_lat", " next_prop", " next_pointer", "next67line", "nextxposition"], "visited_s": ["visited_n", "visitted_s", "visit_f", "visited_l", "visit_n", "visited_ws", "visit_s", "visitted_f", "visited__n", "visit_e", "visitted_n", "visit_ws", "visit_h", "visited_h", "visited_e", "visit_ss", "visited__l", "visited_ss", "visited__f", "visitted_l", "visited__s"], "f": ["df", "fs", "o", "full", "x", "j", "c", "fm", "d", "n", "F", "t", "fa", "rf", "y", "fe", "fd", "fb", "h", "tf", "sf", "function", "u", "fi", "e", "fn", "inf", "fen", "w", "z", "of", "l", "v", "m", "p", "fp"], "s": ["ls", "fs", "o", "S", "ssl", "su", "j", "c", "d", "ws", "ss", "n", "t", "cs", "y", "sd", "os", "g", "sa", "h", "sf", "sq", "si", "u", "size", "e", "sym", "ps", "ns", "sb", "q", "sh", "w", "z", "l", "v", "m", "r", "p", "seconds"]}}
{"code": "n = int(input())\\nary = list(map(int, input().split()))\\n#print(n,ary)\\n\\nary_2 = [ary[0]]\\nfor i in range(1, n):\\n    ary_2.append(ary[i] + ary_2[i-1])\\nary_2 = [0] + ary_2\\n#print(ary_2)\\n\\nfrom collections import Counter\\nc = Counter(ary_2)\\nv = (c.values())\\n#print(v)\\n\\nfrom math import factorial\\ndef combinations_count(n, r):\\n    return factorial(n) // (factorial(n - r) * factorial(r))\\n\\nans = 0\\nfor j in v:\\n    if j >1:\\n        ans += combinations_count(j,2)\\n\\nprint(ans)", "target": "283", "substitutes": {"n": ["o", "j", "c", "node", "nb", "name", "num", "s", "i", "na", "g", "network", "nn", "number", "nr", "f", "e", "fn", "adj", "ns", "z", "v", "l", "m", "p", "ne", "N", "conn"], "ary": [" bi", "o", " m", " b", "j", "c", "ar", " y", " p", " ar", " ls", "y", " j", " r", " f", " z", " c", " seq", "nr", " ni", " o", " dy", " i", " k", "z", " Y", " rest", "r"]}}
{"code": "S,W=map(int,input().split(\" \"))\\nif S>W:\\n  print(\"safe\")\\nelse:\\n  print(\"unsafe\")", "target": "585", "substitutes": {"S": ["U", "SE", "SH", "D", "ISS", "SS", "R", "NS", "B", "T", "s", "Y", "A", "L", " s", "G", "SN", "DS", "SA", "MS", "Q", "WS", "I", "X", "C", "SF", "V", "P", "SD", "K", "SP", "O", "H", "M", "F", "N"], "W": ["GW", "U", "TW", "SH", "WI", "D", "R", "E", "WF", "B", "WR", "T", "EW", "F", "G", "L", "Wh", "DW", "WP", "FW", "Q", "WA", "Wa", "WB", "SW", "X", "WN", "C", "V", "w", "We", "P", "MW", "WM", "H", "WE", "M", "VW", "N", "Z"]}}
{"code": "N = int(input())\\nfrom collections import defaultdict\\narr = defaultdict(int)\\nfor i in range(2,N+1):\\n    temp = i\\n    f = True\\n    for j in range(2, int(-(-i**0.5//1))+1):\\n        if temp%j==0:\\n            cnt=0\\n            while temp%j==0:\\n                cnt+=1\\n                temp //= j\\n            f = False\\n            arr[j] += cnt\\n    if temp!=1:\\n        f = False\\n        arr[temp] += 1\\n    if f:\\n        arr[i] += 1\\nans = 1\\nfor i in arr.values():\\n    ans *= i+1\\n    ans %= 10**9 + 7\\nprint(ans)", "target": "658", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "NE", "B", "Ns", "T", "n", "J", "W", "Ni", "L", "G", "A", "Num", "NT", " n", "Size", "I", "X", "C", "NI", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "arr": ["di", "par", "err", "prev", "ar", "img", "a", "data", "app", "format", "coll", "int", "print", "n", " np", "all", "Array", "var", "array", "list", "cache", "adv", "ch", "abc", "ind", "py", "rep", "series", "adr", "aa", "Ar", "br", "stack", "att", "train", "obj", "adj", "arc", "gr", "dict", "frac", "aaa", "attr", "cat", "air", "str", " array", "r", "fr", "dat", "p", "aj", "enc"], "i": ["pi", "di", "ji", "it", "iw", "k", "x", "xi", "c", "ci", "d", "phi", "a", "ie", "start", "int", "ind", "n", "ini", "t", "ni", "id", "y", "iq", "ij", "h", "ia", "index", "ip", "si", "u", "iu", "fi", "I", "ti", "e", "b", "im", "ai", "z", "p", "qi", "chi", "v", "l", "ii", "li", "m", "io"], "temp": ["unit", "mini", "pi", "it", "empty", "case", "Temp", "input", "partial", "tr", "c", "current", "ci", "tc", "col", "ac", "perature", "const", "n", " temporary", "num", "inc", "cache", "t", "eff", "test", "y", "api", "fd", "cond", "offset", "iter", "atom", "ctr", "acc", "index", "tmp", "null", "fake", "si", "size", "pre", " Temp", "fi", "adj", "tem", "e", "unc", "clean", "pt", "emp", "w", "init", "frac", "z", "condition", "v", "aj", "ii", "m", "now", "cf", "p", "porary"], "f": ["df", "fs", "part", "o", "x", "c", "d", "a", "format", "fl", "af", "fc", "n", "F", "s", "fac", "fa", "t", "info", "rf", "y", "fe", "g", "fd", "h", "fb", "tf", "sf", "u", "fi", "e", "b", "xf", "fen", "w", "z", "v", "l", "m", "bf", "cf", "p", "form", "fp"], "j": ["note", "pi", "ji", "o", "js", "iw", "k", "x", "_", "c", "d", "a", "ie", "ind", "n", "J", "num", "t", "ch", "y", "g", "ij", "index", "jl", "si", "br", "u", "ja", "pre", "I", "obj", "e", "b", "jj", "max", "q", "w", "z", "v", "jp", "l", "aj", "li", "ii", "m", "r", "p"], "cnt": [" cn", "cn", "connt", "CNT", "acnn", "Cnc", "cant", "connc", " cant", "Cn", "cnn", "acnt", "Cnn", "acNT", "conNT", "cnc", "Cnt", "Count", "cNT", " cnc", " count", " cnn", "acn", "Cant", "acant", "conount", " cNT", "count"], "ans": [" ants", "x", "anus", "ass", "aning", "nas", "ras", "ins", "aos", "a", "ars", "ants", "Ns", "amps", "ens", "n", "args", "an", "anc", "ads", "A", "ats", " means", "cs", " spans", "ians", "ents", "anon", "na", "os", "anas", "ds", "ids", "nan", "fan", "trans", "span", "ana", "nn", "cons", " pairs", "AN", "aned", "anne", "ANS", "ann", "lan", "ns", "chan", "es", "ai", "ani", "ays", " scans", "p", "aus", "ons", " ads"]}}
{"code": "#!/usr/bin python3\\n# -*- coding: utf-8 -*-\\n\\ndef stds(n):\\n    if n == 1:\\n        return set(['a'])\\n    else:\\n        std = stds(n-1)\\n        ret = set([])\\n        for stdi in std:\\n            for x in range(ord('a'),max(map(ord,list(stdi))) + 2):\\n                ret.add(stdi + chr(x))\\n        return ret\\n\\ndef main():\\n    N = int(input())\\n    ret = list(stds(N))\\n    ret.sort()\\n    print('\\n'.join(ret))\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "427", "substitutes": {}}
{"code": "N, S = open(0).read().split()\\nS = list(map(int, list(S)))\\nN = int(N)\\n\\ncnt = 0\\nfor i in range(0, 10):\\n        for j in range(0, 10):\\n            for k in range(0, 10):\\n                try:\\n                    n = S.index(i)\\n                    m = S[n+1:].index(j)\\n                    o = S[n+m+2:].index(k)\\n                    cnt += 1\\n                except ValueError:\\n                    pass\\nprint(cnt)", "target": "756", "substitutes": {"N": ["D", "R", "NS", "E", "B", "Ns", "T", "J", "W", "s", "Y", "Ni", "L", "G", "A", "Len", "Index", "SIZE", "NT", "NM", "Size", "MN", "Q", "I", "X", "ns", "C", "V", "OS", "P", "K", "O", "H", "M", "F", "Z"], "S": ["SE", "U", "SH", "SO", "D", "SS", "R", "NS", "SK", "Sample", "Site", "Split", "B", "Sing", "Ns", "T", "List", "TS", "OSS", "Si", "F", "SI", "s", "Y", "Source", "A", "L", "G", "SR", "Part", "IDS", "SN", "Single", "INS", "DS", "ST", "Size", "WS", "I", "Socket", "X", "SU", "C", "V", "Sl", "P", "Sort", "K", "SON", "Session", "Service", "O", "M", "SL", "Set"], "cnt": ["Cnd", "kount", "Cnc", "nnt", "nnd", "nount", "tocount", "cnd", "tocnt", "Crt", "fount", "knt", "kct", "Cpt", "krt", "cnc", "Cnt", "Count", "cct", "tocpt", "fnt", " cnc", "Cct", " count", " crt", "fnc", "fct", "npt", "cpt", "tocnd", " cct", "crt", "count"], "i": ["pi", "x", "c", "d", "a", "io", "int", "ind", "ini", "ni", "id", "y", "h", "inn", "si", "u", "iu", "f", "I", "e", "b", "ai", "z", "l", "v", "ii", "li", "r", "p"], "j": ["kj", "ik", "ji", "d", "ju", "ijk", " ii", "a", "jon", "J", "jit", "y", " dj", "g", "h", "ij", "jl", "iv", "si", "u", "ja", "f", "je", "e", "b", "jj", "q", "z", "v", "l", "ii", "aj", "jp", "li", "r", "p", " jo"], "k": ["ik", "kn", "ke", "x", "kk", "c", "ijk", "kl", "wk", "ck", "y", "kg", "sk", "unk", "ok", "ks", "uk", "ko", "kin", "u", "f", "ki", "q", "w", "kw", "z", "K", "v", "p", "kr", "km", "ku"], "n": ["core", "cn", "x", "c", "d", "nb", "a", "s", "num", "t", "y", "g", "en", "h", "network", "inn", "nn", "index", "un", "nu", "u", "net", "e", "f", "nt", "b", "ns", "no", "z", "v", "l", "r", "nc", "p", "ne", "conn"], "m": ["x", "c", "fm", "om", "d", "nm", "a", "y", "mn", "g", "h", "ms", "km", "cm", "month", "mo", "u", "f", "e", "mu", "b", "mi", "mm", "im", "w", "pm", "z", "v", "l", "r", "M", "p", "bm"], "o": ["oe", "ji", "x", "c", "om", "oi", "ie", "an", "po", "id", "y", "key", "g", "h", "ko", "u", "oa", "e", "f", "ki", "oji", "w", "l", "jp", "ii", "v", "O", "p"]}}
{"code": "n=int(input())\\na,b=map(int,input().split())\\nh=list(map(int,input().split()))\\nk=[0]*n\\nfor i in range(n):\\n  k[i]=b-(a-(0.006*h[i]))\\n  if k[i]<0:\\n    k[i]=-1*k[i]\\nprint(k.index(min(k))+1)", "target": "700", "substitutes": {"n": ["o", "x", "j", "c", "d", "nb", "s", "num", "t", "y", "g", "nan", "nn", "u", "f", "e", "ns", "no", "q", "w", "nor", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "a": ["ma", "area", "o", "x", "j", "c", "aw", "d", "ak", "ab", "ac", "da", "an", "s", "A", "fa", "y", "alpha", "min", "sa", "aa", "u", "f", "e", "ad", "am", "ae", "w", "ba", "l", "m", "p"], "b": ["o", "x", "j", "c", "d", "nb", "ab", "B", "bc", "s", "y", "bs", "g", "ok", "beta", "aa", "u", "e", "f", "end", "ad", "sb", "ba", "l", "v", "m", "r", "bb", "p"], "h": ["o", "x", "j", "c", "d", "ht", "s", "rh", "t", "y", "ph", "g", "ah", "u", "f", "e", "max", "q", "w", "z", "l", "v", "hm", "m", "r", "H", "ih", "p", "hs"], "k": ["ik", "o", "kn", "ke", "x", "kk", "j", "work", "c", "d", "ak", "ijk", "ky", "kl", "mk", "ck", "kick", "ch", "id", "y", "key", "sk", "check", "g", "unk", "ok", "ks", "kid", "index", "ko", "kin", "u", "f", "e", "ki", "q", "w", "kind", "z", "K", "kw", "v", "l", "m", "r", "make", "p", "km", "ku"], "i": ["ik", "pi", "di", "uri", "ji", "o", "it", "x", "xi", "j", "gi", "c", "ci", "d", "ri", " I", "oi", " ii", "ie", "start", "ind", "ui", "ini", "t", "ni", "bi", "id", "y", "info", "uni", "ij", "ib", "ix", "index", "ip", "multi", "si", "u", "iu", "fi", "e", "I", "f", "ti", "ki", "q", "ai", "init", "z", "p", "qi", "l", "attr", "ii", "li", "abi", "io"]}}
{"code": "n=int(input())\\nl=list(map(int,input().split()))\\nc=l[0]\\nans=0\\nfor i in range(1,n):\\n    if l[i]==c:\\n        ans+=1\\n        c=10001\\n    else:c=l[i]\\nprint(ans)", "target": "493", "substitutes": {"n": ["o", "cn", "k", "x", "j", "d", "nb", "s", "an", "num", "t", "y", "count", "h", "nan", "nl", "number", "u", "len", "f", "e", "nt", "b", "ns", "C", "z", "v", "m", "r", "nc", "ln", "p", "N"], "l": ["el", "lp", "ls", "o", "k", "ol", "lf", "ul", "j", "left", "acl", "kl", "lo", "fl", "sl", "ll", "list", "s", "t", "L", "lv", "lr", "nl", "la", "lin", "u", "len", "lb", "f", "rl", "e", "b", "dl", "lc", "v", "m", "li", "r", "ln", "p"], "c": ["o", "loc", "cn", "k", "x", "cy", "ci", "d", "col", "a", "ac", "an", "cc", "ce", "s", "ch", "cs", "y", "g", "con", "h", "cin", "xc", "u", "f", "e", "b", "unc", "C", "cr", "lc", "pc", "r", "m", "nc", "p", "cl", "count"], "ans": ["cus", "cycles", "cn", "aning", "nas", "ins", "ac", "ars", "ants", "ens", "an", "anc", "s", "cc", "cats", "cs", "ians", "ents", "sk", "na", "os", "comments", "anas", "ds", "ks", "ana", "nan", "cp", "span", "can", "anes", "lines", "cons", "AN", "cas", "aned", "ANS", "ann", "lan", "ns", "scan", "chan", "es", "ends", "ani", "aces", "annels", "ays", "acs", "eps", "aus"], "i": ["pi", "di", "k", "x", "xi", "j", "gi", "ci", "d", "yi", "ri", "a", "io", "start", "int", "ind", "ini", "ui", "bi", "id", "y", "h", "index", "si", "u", "iu", "e", "I", "f", "ti", "b", "ai", "z", "qi", "v", "ii", "li", "m", "p", "count"]}}
{"code": "X = int(input())\\n\\nans = 0\\nfor i in range(1,40):\\n    for j in range(2,10):\\n        if X >= i**j and i**j > ans:\\n            ans = i**j\\n\\nprint(ans)", "target": "489", "substitutes": {"X": ["U", "CL", "x", "Width", "Time", "E", "XX", "Point", "T", "J", "Y", "L", "G", "AX", " x", "Ex", "Q", "XY", "C", "PE", "XL", "TX", "Cross", "V", "P", "XP", "K", "Code", "XXX", "IX", "H", "xs", "F", "CE", "N", "Z"], "ans": ["offs", "ls", "x", "anus", "results", "nas", "ins", "XX", "a", "ars", "ss", "ants", "vs", "amps", "ens", "flags", "an", "s", "A", " means", "ats", "outs", "ians", "ents", "ams", "sk", "na", "os", "comments", "anas", "plan", "ks", "nn", "ana", "span", "can", "anes", "lines", "cons", "AN", "atan", "aned", "leans", "ANS", "ann", "lan", "ns", "shape", "xx", "ane", "features", "works", "ani", "aces", "ai", "ays", "xs", "eps", "ons"], "i": ["pi", "it", "ji", "k", "x", "xi", "c", "ci", "d", "phi", "ri", "a", "io", "ie", "int", "ind", "n", "ini", "ui", "t", "ni", "bi", "id", "y", "si", "u", "iu", "f", "I", "b", "im", "ai", "z", "chi", "l", "v", "ii", "li", "m", "p"], "j": ["kj", "ji", " J", "o", "js", "k", "x", "xi", "c", "d", "a", "jc", "ie", "jon", "oj", "n", "J", "t", "ch", "y", "g", "ij", "bj", "job", "jl", "py", "jo", "si", "ja", "e", "je", "I", "f", "adj", "jj", "b", "q", "ai", "dj", "z", "v", "jp", "aj", "jam", "l", "m", "p", "uj", " Xi"]}}
{"code": "N,T=map(int,input().split())\\nct=[]\\nd=[]\\nfor i in range(N):\\n    ct.append(list(map(int,input().split())))\\nfor i in range(N):\\n    if ct[i][1]<=T:\\n        d.append(ct[i])\\nif len(d)==0:\\n    print('TLE')\\nelse:\\n    e=d[0]\\n    for i in range(len(d)):\\n        if e[0]>=d[i][0]:\\n            e=d[i]\\n    print(e[0])", "target": "28", "substitutes": {"N": ["NA", "D", "S", "Max", "R", "NS", "E", "B", "Ns", "n", "W", "Y", "L", "G", "Len", "Num", "NT", " n", "Size", "Q", "Length", "I", "Number", "X", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "T": ["D", "DT", "S", "TN", "R", "E", "B", "TS", "W", "Y", "t", "L", "G", "A", "NT", "TA", "Q", "I", "X", "C", "TT", "V", "P", "K", "TH", "O", "H", "M", "F", "Z"], "ct": ["oct", "sec", "loc", "dt", "x", "std", "c", "CT", "col", "ac", "const", "unct", "n", "cc", "Ct", "t", "config", "cart", "ch", "cs", "ant", "act", "ds", "xt", "tt", "dc", "ect", "ft", "f", "nt", "sect", "ict", "cont", "feat", "pt", "dict", "p", "cr", "cat", "cd", "sc", "cent", "text", "cf", "dat", "ld", "cl", "count", "enc"], "d": ["di", "o", "dom", "D", "dt", "dos", "x", "j", "c", "ded", "db", "pd", "a", "data", "nd", "bd", "n", "da", "s", "t", "sd", "g", "fd", "ds", "dh", "do", "dc", "u", "f", "dd", "b", "ad", "dl", "dict", "z", "l", "v", "cd", "m", "did", "dat", "p", "ld"], "i": ["pi", "di", "o", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "yi", "ri", "a", "ie", "ori", "int", "ind", "n", "ui", "ini", "t", "ni", "bi", "id", "y", "uni", "h", "index", "ip", "eni", "si", "u", "iu", "fi", "ti", "I", "f", "b", "end", "mi", "ki", "ai", "p", "qi", "l", "v", "ii", "li", "ei", "m", "io"], "e": ["el", "ey", "ze", "o", "oe", "element", "le", "x", "j", "c", "er", "E", "ie", "n", "ge", "esi", "ce", "t", "eff", "y", "ec", "fe", "u", "ele", "f", "ee", "ed", "b", "je", "none", "edge", "es", "ae", "be", "z", "l", "v", "ea", "m", "ei", "se", "ace", "p", "elt"]}}
{"code": "antena = [int(input()) for _ in range(5)]\\n\\nk = int(input())\\n\\nmax_dist = max(antena)\\nmin_dist = min(antena)\\n\\nl = max_dist - min_dist\\n\\nif l <= k:\\n    print(\"Yay!\")\\nelse:\\n    print(\":(\")\\n\\n", "target": "208", "substitutes": {"antena": ["Antena", "octenos", "antenna", "gentina", "rtenos", "artenda", "entena", "antana", "gentene", "Antenda", "antenda", "octina", "artina", "antene", "antsenna", "entenna", "antenos", "Antina", "gentena", "octenda", "artenna", "artena", "entana", "octenna", "octana", "antsene", "rtena", "antsina", "gentenna", "rtana", "rtenna", "Antene", "antina", "entenos", "Antenna", "octena", "antsena"], "_": ["__", "n", "all", "t", "g", "val", "len", "f", "q", "p"], "k": ["ik", "o", "kn", "x", "j", "c", "d", "kl", "n", "i", "y", "sk", "g", "h", "ok", "ks", "ko", "u", "f", "e", "max", "b", "ki", "q", "kw", "w", "z", "K", "v", "length", "m", "r", "p", "km", "ku"], "max_dist": ["maxedlength", "max_distance", "max_wd", "max_length", "min_distance", "maxeddist", "max__dist", "maxedwidth", "max\u00b7width", "max_width", "maxedwd", "maxeddistance", "max__distance", " max_width", "max\u00b7dist", " max_length", " max_distance", "max\u00b7distance", "min_wd", "min_width", "max__width", "max__length", "max\u00b7wd"], "min_dist": ["max_distance", "miningdist", "miningdef", "min_distance", "max_width", "max_score", "miningdistance", "min___width", "min___distance", "max_def", "min_width", "miningscore", "min_def", "min_score", "min___dist"], "l": ["el", "lp", "ls", "o", "ol", "le", "wl", "lf", "kl", "lo", "sl", "n", "ll", "L", "lik", "i", "lr", "nl", "vl", "la", "lb", "len", "f", "rl", "b", "dl", "lc", "v", "li", "m", "ln", "p", "ld", "dL"]}}
{"code": "def main():\\n    n, a, b = map(int, input().split())\\n    print(0 if (n == 1 and a != b) or a > b else (b - a) * (n - 1) + a - b + 1)\\n    \\nif __name__ == '__main__':\\n    main()\\n", "target": "395", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "ac", "ab", "B", "num", "an", "s", "A", "i", "y", "na", "g", "sa", "h", "nn", "nan", "nu", "number", "aa", "u", "e", "f", "ns", "w", "z", "l", "v", "m", "bb", "r", "p", "ne", "N"], "a": ["area", "x", "j", "c", "aw", "d", "ab", "ac", "B", "int", "da", "an", "num", "A", "fa", "i", "y", "alpha", "na", "sa", "h", "span", "aa", "u", "f", "e", "ad", "ca", "am", "Na", "ga", "ai", "ae", "w", "z", "ba", "l", "aj", "bb", "m", "p"], "b": ["auto", "k", "x", "j", "c", "d", "cb", "nb", "ab", "B", "s", "binary", "num", "rb", "A", "an", "i", "y", "bs", "g", "h", "beta", "number", "aa", "u", "lb", "e", "f", "sb", "w", "z", "ba", "v", "l", "bb", "m", "bf", "r", "p"]}}
{"code": "N,M = map(int,input().split())\\nab = [list(map(int,input().split())) for i in range(M)]\\n\\n\\nab.sort(key=lambda x: x[1])\\nans = 1\\npre = ab[0][1]\\nfor ele in ab[1:]:\\n    if pre > ele[0]:\\n        continue\\n    pre = ele[1]\\n    ans += 1\\nprint(ans)\\n\\n\\n\\n\\n", "target": "219", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "E", "NC", "NL", "B", "Ns", "T", "n", "J", "Y", "A", "L", "G", " n", "NN", "I", "C", "V", "P", "K", "O", "F", "Z"], "M": ["U", "MO", "LM", "D", "S", "R", "E", "B", "T", "n", "J", "Y", "L", "G", "DM", "NM", "MD", "MS", "MN", "Q", "X", "C", "MH", "V", "MB", "P", "MM", "K", "m", "O", "H", "F", "CM", "MF", "Z"], "ab": ["el", "eb", "case", "al", "abb", "pb", "db", "ak", "ob", "cb", "ac", "app", "bc", "af", "abs", "ub", "ast", "list", "array", "av", "tab", "arr", "Ab", "abe", "bs", "lab", "fb", "abc", "fab", "ib", "bl", "obj", "b", "ad", "base", "sb", "abl", "ae", "AB", "bb", "abi", "ap"], "i": ["j", "gi", " I", " ii", "ie", " ip", "ind", "\u00ed", "ni", "id", "y", "\u0438", "iq", " il", "ix", "index", "ip", "il", "u", "iu", "e", "I", "im", "z", "ii", "li", "p"], "ans": ["nas", "ras", "ins", "ases", "olds", "ars", "ants", "amps", "an", "s", "anc", "ads", " means", " spans", "cs", "ians", "anon", "sk", "atches", "na", "annot", "anas", "ms", "ds", "ids", "nan", "ana", "span", "can", "cons", "AN", "aned", "ANS", "ann", "ps", "ns", "faces", "ani", "aces", "ays", "mean", "ones", "ares", "eps", "ons", "aps"], "pre": ["el", "area", "par", "j", "pred", "pret", "inter", "start", "ny", " prefix", "pos", "pa", "int", "year", "fix", "per", "list", "po", "syn", "Pre", "arr", "block", "key", "prefix", "annot", "min", "pse", "ana", "post", "next", "py", "pad", "span", "seq", "len", "before", "base", "pt", " pref", "PRE", "pc", "li", "skip", "prev", "p", "pe", "ne", " prep"], "ele": ["el", "eb", "bat", "element", "le", "al", "Ele", "wl", "db", "nel", "sol", "ny", "ell", "af", "pal", "nes", "all", "arel", "ole", "valid", "ef", "ave", "arr", "block", "fe", "abc", "iter", "ne", "line", "inel", "next", "lem", "sel", "aa", "la", "ler", "seq", "il", "len", "ee", "pp", "e", "eline", "base", "yy", "ez", "skip", "li", "ace", "eps", " el", "elt", "elle", "letter"]}}
{"code": "s = input()\\nLS = len(s)\\nrs = s[::-1]\\nlc = []\\nrc = []\\nlx = 0\\nrx = 0\\nfor i in range(LS):\\n    if s[i] != 'x':\\n        lc.append(s[i])\\n    if rs[i] != 'x':\\n        rc.append(rs[i])\\ncnt = 0\\nif lc==rc or len(lc)+len(rc)==1:\\n    i = 0\\n    j = LS-1\\n    while j>i:\\n        if s[i]!=s[j]:\\n            if s[i]=='x':\\n                cnt+=1\\n                i +=1\\n            elif s[j]=='x':\\n                cnt+=1\\n                j -=1\\n        else:\\n            i +=1\\n            j -=1\\n    print(cnt)\\nelse:\\n    print(-1)", "target": "766", "substitutes": {"s": ["ls", "o", "parts", "services", "js", "states", "S", "ssl", "x", "input", "speech", "c", "d", "ins", "ses", "a", "ss", "opens", "als", "src", "n", "ens", "t", "strings", "cs", "y", "ches", "ats", "bs", "g", "sa", "os", "h", "ms", "ds", "ts", "sample", "ks", "source", "gs", "sq", "south", "si", "sets", "spec", "f", "e", "ys", "b", "ps", "ns", "ments", "ans", "es", "tests", "sb", "ions", "w", "aces", "l", "v", "sg", "less", "m", "r", "xs", "irs", "its", "p"], "LS": ["lp", "ls", "LM", "GS", "lf", "BS", "SS", "NS", "RS", "LD", "LR", "Ns", "TS", "J", "LCS", "LI", "L", "Len", "LC", "LP", "Lv", "SIZE", "LOS", "LV", "LE", "ix", "PN", "MS", "lines", "LG", "len", "LT", "Length", "I", "CS", "X", "ns", "LL", "RT", "length", "ln", "SL", "FS", "LA"], "rs": ["RC", "ls", "parts", "rates", "Rs", "x", "c", "RS", "runs", "ws", "a", "ars", "ss", "vs", "src", "rh", "mr", "rb", "ats", "cs", "arr", "bs", "ds", "rows", "ks", "lr", "gs", "ris", "rys", "ores", "rl", "rings", "ys", "res", "ps", "b", "ns", "p", "sc", "r", "xs", "rss", "hs", "sr"], "lc": ["ls", "lp", "loc", "uci", "wl", "lf", "c", "ci", "acl", "kl", " ls", "bc", "etc", "fc", "ll", "LCS", "LC", "cs", "lv", "lr", "lis", "la", "si", "xc", "lb", "los", "len", "LT", "rl", "arc", "icc", "sb", "dl", "cr", "l", "sc", "pc", "r", "li", "nc", "ln", "ld", "lt", "cl"], "rc": ["cur", "RC", "isc", "loc", "rest", "c", "ci", "ras", "auc", "tc", "ac", "uc", "bc", "fc", "src", "cc", "ll", "anc", "rb", "config", "inc", "cs", "ec", "rt", "abc", "irc", "rect", "dc", "rw", "ra", "la", "xc", "spec", "rr", "rev", "arc", "rec", "rac", "misc", "sc", "pc", "r", "l", "right", "nc", "oc", "asc"], "lx": [" lw", " ly", "ly", "bw", "lencode", "lenw", "lcode", "bcode", "lw", "lenx", "bx", "leny", " lcode", "by"], "rx": ["sync", " RP", "xi", "ci", "R", " RT", " Rx", "RR", " xx", "Index", "ix", "lr", " err", "index", " ro", " ret", " seq", "rl", " ff", "I", " RX", "X", " ir", "LL", " li", "z", " Xi", " rows", " res"], "i": ["pi", "di", "uri", "ji", "k", "x", "xi", "c", "gi", "ci", "slice", "d", "yi", "oi", "ri", "phi", "a", "ie", "start", "ori", "cli", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", "info", "ix", "index", "eni", "si", "u", "iu", "fi", "e", "I", "ti", "f", "b", "mi", "ai", "init", "z", "p", "qi", "l", "ii", "v", "li", "ei", "r", "m", "io", "vi", "zi"], "cnt": ["lcount", "cannot", "CNT", "uccount", "acct", "ccount", "Cnc", "lcnt", " cpt", " ccount", " cret", "lccount", "Cannot", "lcNT", "Cret", "cret", "pcannot", "acnt", "ucint", " cannot", "acpt", "Cpt", " cint", "ucnt", "pcNT", "cnc", "Cnt", "cct", "acnc", "Count", "cNT", "pcnt", " cnc", "Cct", " count", "Ccount", "cint", "ucNT", "cpt", "Cint", " cct", "pcret", " cNT", "count"], "j": ["pi", "o", "ji", "js", "k", "x", "xi", "c", "ci", "d", "jc", "a", "ie", "ind", "n", "J", "ui", "t", "ni", "y", "ij", "h", "bj", "jl", "si", "u", "iu", "ja", "f", "je", "e", "b", "pt", "q", "dj", "z", "qi", "l", "jp", "ii", "aj", "r", "li", "m", "v", "p", "uj"]}}
{"code": "n = int(input())\\nmaximum = n * (n - 1) // 2\\nprint(maximum)", "target": "574", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "node", "nb", "output", "num", "initial", "s", "t", "config", "i", "y", "na", "g", "network", "nn", "number", "u", "net", "len", "size", "fn", "max", "f", "e", "b", "ns", "none", "init", "nor", "z", "l", "length", "m", "nc", "p", "ne", "N"], "maximum": ["average", "provided", "full", "required", "large", "current", "node", "output", "Maximum", "expression", "latest", "initial", "width", "multiple", "network", "custom", "capacity", "index", "frequency", "highest", "number", "largest", "sequence", "minimum", "final", "actual", "termination", "approximately", "noon", "position", "optional", "length", "specified", "N"]}}
{"code": "from collections import Counter\\nN = int(input())\\nA = list(map(int, input().split()))\\n \\nc = Counter(A)\\nkey = c.keys()\\ncomb = 0\\nfor i in key:\\n    comb += (c[i]) * (c[i]-1) // 2\\n \\nfor i in A:\\n    ans = comb - (c[i]-1)\\n    print(ans)\\n  \\n", "target": "247", "substitutes": {"N": [" L", "NC", "ac", " K", "B", "Ns", "n", " O", " C", "Num", " X", " self", " n", "IC", " M", "I", " number", "C", "Na", " k", "P", "K", " P", "O", "Key", "AC", "M", "F"], "A": ["As", "NA", "D", "S", "au", "Z", "ac", "a", "B", "CA", "All", "T", "n", "This", "At", "Array", "Y", "array", "G", "AM", "Am", "alpha", "AP", "Ar", "Count", "I", "AA", "b", "am", "ad", "X", "C", "ca", "code", "Na", "ai", "ae", "P", "K", "API", "Code", "Input", "M", "AC", "p", "H", "LA"], "c": ["o", "loc", "mc", "cn", "k", "x", "ci", "d", "col", "ac", "a", "uc", "n", "cc", " C", "array", "cart", "s", "config", "cs", "y", "cache", "ec", "g", "con", "h", "keys", "ct", "cu", "u", "e", "f", "b", "code", "C", "q", "w", "l", "cat", "v", "m", "r", "cf", "p", "count"], "key": ["core", "o", "case", "k", "x", "input", "mac", "ak", "ac", "uc", "int", "n", "ck", "num", "cc", "array", "id", "y", "na", "ack", "ax", "abc", "ay", "keys", "co", "acc", "index", "row", "aa", "e", "code", "ai", "w", "cat", "ic", "Key", "ace", "air", "oc", "order", "count"], "comb": ["cur", "core", "case", "bo", "x", "mac", "sum", "ac", "wa", "ab", "mult", "uc", "coll", "lo", "bc", "go", "num", "loop", "fe", "na", "min", "con", "count", "abc", "do", "acc", "union", "batch", "Comb", "seq", "cu", "lam", "leave", "max", "one", "am", "code", "ca", "shift", "com", "cr", "conf", "don", "cl", "mix", " combo", "call"], "i": ["pi", "di", "it", "part", "k", "x", "j", "gi", "sp", "ci", "d", "a", "int", "ind", "n", "ui", "ini", "ni", "bi", "id", "iq", "y", "info", "g", "h", "ij", "ix", "index", "ip", "multi", "si", "u", "iu", "fi", "f", "ti", "I", "e", "b", "inf", "ai", "z", "qi", "v", "l", "ii", "li", "ei", "abi", "ih", "p"], "ans": ["cus", "anus", "san", "aning", "anan", "nas", "ras", "ins", "ac", "anch", "an", "anc", "bay", " means", "cs", "anon", "CNN", "na", "plan", "ds", "ks", "ana", "nan", "can", "AN", "cas", "aned", "anne", "atan", "ANS", "kin", "ann", "lan", "ane", "ros", "ani", "aces", "ai", "ano", "cross", "ace", "aus", "any"]}}
{"code": "A, B, C = map(int, input().split())\\nif A == B == C:\\n    print('No')\\nelif A == B or B == C or A == C:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "409", "substitutes": {"A": ["As", "U", "Ac", "NA", "Ca", "AR", "D", "S", "E", "a", "CA", "T", "PA", "W", "mA", "IA", "Array", "Y", "G", "L", "Am", "AL", "Ma", "BA", "GA", "SA", "AU", "An", "EA", "Area", "AP", "Ar", "Al", "I", "AA", "MA", "V", "P", "AF", "AH", "AB", "O", "AC", "M", "H", "F", "AW", "AAA", "N", "LA"], "B": ["U", "Base", "Bu", "EB", "D", "S", "BF", "R", "E", "CA", "BB", "T", "UB", "W", "BE", "BBC", "Y", "L", "G", "BA", "Blue", "OB", "BI", "File", "GB", "Bs", "Q", "DB", "QB", "WB", "BER", "I", "b", "X", "Number", "V", "P", "BC", "AB", "O", "H", "M", "F", "Bal", "N"], "C": ["U", "D", "S", "c", "R", "E", "CA", "T", "W", "Y", "CU", "L", "G", "CNN", "Cl", "Con", "YC", "CF", "Q", "SC", "I", "X", "DC", "V", "P", "CC", "Cs", "CR", "BC", "K", "O", "Cu", "AC", "M", "H", "F", "CM", "CE", "N", "CL"]}}
{"code": "N,A,B = map(int,input().split())\\nl = list(input())\\nnum = 0\\ncount = 0\\nfor i in range(N):\\n  if l[i] == 'a' and A + B > num:\\n    print('Yes')\\n    num += 1\\n  elif l[i] == 'b' and (A + B > num):\\n    count += 1\\n    if count <= B:\\n      print('Yes')\\n      num += 1\\n    else:\\n      print('No')\\n  else:\\n    print('No')", "target": "724", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "E", "NE", "T", "n", "W", "J", "Y", "L", "G", "Num", "Size", "No", "Q", "I", "X", "NO", "C", "Ne", "NUM", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["AR", "Ac", "U", "NA", "Ca", "D", "S", "a", "CA", "IA", "Y", "AD", "G", "AM", "L", "Am", "Num", "Ab", "AI", "SA", "AU", "An", "TA", "AP", "Ar", "AN", "I", "AA", "b", "X", "C", "P", "API", "AH", "K", "AB", "AF", "AC", "AW", "And", "F", "M", "LA"], "B": ["U", "D", "S", "BS", "BF", "R", "E", "bound", "BB", "T", "Bi", "W", "BE", "Y", "L", "G", "Num", "NB", "Ab", "BA", "PB", "BI", "number", "AP", "Q", "Bs", "GB", "DB", "WB", "I", "b", "X", "C", "SB", "NUM", "V", "P", "K", "BC", "AB", "O", "M", "F", "Z"], "l": ["el", "lp", "ls", "o", "ol", " L", "al", "ul", "c", "d", "left", "kl", "a", "sl", "n", "s", "list", "LI", "t", "L", "ll", "split", "g", "lv", "nl", "la", "il", "u", "lb", "f", "e", "rl", "b", "dl", "v", "lc", "m", "li", "lu", "r", "ln", "p", "lt", "ld"], "num": ["unit", "note", "common", "success", "x", "um", "c", "ul", "om", "sum", "col", "name", "nb", "a", "mult", "fail", "int", "n", "inc", "Num", "id", "result", "sort", "split", "uni", "div", "con", "dim", "en", "offset", "index", "span", "un", "null", "number", "nu", "union", "multi", "umi", "norm", "umber", "u", "len", "nom", "f", "mu", "one", "size", "b", "max", "NUM", "no", "init", "text"], "count": ["note", "type", "part", "case", "um", "c", "left", "sum", "col", "nb", "start", "int", "ind", "n", "long", "list", "weight", "id", "y", "total", "split", "check", "offset", "index", "number", "u", "size", "len", "Count", "nt", "f", "b", "code", "match", "base", "limit", "child", "add", "length", "p", "call"], "i": ["pi", "di", "uri", "x", "xi", "j", "gi", "c", "gu", "ci", "d", "yi", "a", "ie", "start", "ind", "n", "ui", "bi", "id", "y", "val", "h", "ix", "index", "ip", "si", "u", "iu", "f", "I", "ti", "e", "b", "ai", "z", "qi", "v", "ii", "li", "r", "m", "p"]}}
{"code": "d,t,s=map(int,input().split())\\nif(d<=t*s): print(\"Yes\")\\nelse: print(\"No\")", "target": "786", "substitutes": {"d": ["D", "dt", "x", "j", "c", "ded", "data", "start", "n", "i", "td", "y", "dy", "g", "fd", "dim", "ds", "dh", "dc", "u", "e", "f", "dx", "end", "b", "z", "dn", "l", "v", "m", "dat", "p"], "t": ["tp", "o", "dt", "k", "x", "j", "tu", "c", "a", "T", "n", "i", "y", "test", "g", "h", "ts", "u", "size", "f", "e", "b", "w", "ta", "z", "v", "l", "m", "r", "p", "tn"], "s": ["o", "S", "c", "ses", "a", "n", "i", "y", "sd", "g", "ds", "ts", "sq", "south", "si", "u", "size", "sets", "e", "f", "b", "ps", "ns", "sb", "w", "v", "l", "sg", "m", "r", "xs", "p"]}}
{"code": "N = int(input())\\n\\ndef make_divisors(n):\\n    divisors = []\\n    for i in range(1, int(n**0.5)+1):\\n        if n % i == 0:\\n            divisors.append(i)\\n            if i != n // i:\\n                divisors.append(n//i)\\n    return divisors\\n\\nans = 0\\ndivisors = make_divisors(N)[1:]\\nans += len(make_divisors(N-1))-1\\n\\nfor divisor in divisors:\\n        divided_N = N\\n        while 1:\\n            if divided_N%divisor!=0:\\n                break\\n            else:\\n                divided_N //=divisor\\n        if divided_N % divisor == 1:\\n            ans += 1\\nprint(ans)", "target": "462", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "NC", "B", "Ns", "T", "Y", "Ni", "L", "A", "Len", "Num", "SN", "NB", "CNN", "NT", "Size", "NN", "number", "Q", "Count", "I", "X", "NO", "C", "NI", "Ne", "Na", "NG", "NR", "NUM", "V", "P", "K", "O", "H", "M", "F", "Z"], "n": ["o", "cn", "k", "x", "j", "c", "np", "d", "nb", "a", "name", "Ns", "num", "s", "non", "ni", "y", "on", "na", "en", "network", "nan", "nn", "un", "nu", "number", "u", "net", "fn", "f", "nt", "e", "b", "ns", "pn", "none", "sn", "no", "z", "l", "v", "m", "nc", "p", "ne"], "divisors": ["Divisors", "divistors", "divisons", "diviseores", "divideions", "decisions", "divizores", "decistories", " divisores", "diviscions", "divisiories", "decistions", "decisors", "decisor", "diviscores", "divistories", "decisons", " divisions", "diviseors", "divizors", "divistor", "divideor", "divistours", "dividories", "Diviscions", "decistor", "diviscories", "Diviscor", "divideors", "dividons", "divinors", " divistions", "divisories", "divistons", "diviscors", "dividors", " divisons", " divistours", "divisiors", "Divisor", "Divisories", "diviseions", "decistores", "Divisions", "decisories", "Diviscories", "divisores", "divisiions", "divisior", "diviseories", " divistors", "divizours", "divizons", " divistores", " divisours", "divisours", "divinories", "dividours", "Diviscors", "divisiores", "dividions", "decisores", "divistions", " divistons", "divinor", "dividor", "divisions", "diviscor", "divistores", "dividores", " divistor", "divideores", "divinions", "decistors", "decistons"], "i": ["mini", "pi", "di", "o", "uri", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "phi", "oi", "a", "start", "ie", "ori", "int", "ind", "ini", "ni", "bi", "id", "y", "ix", "index", "eni", "si", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "chi", "qi", "v", "l", "ii", "li", "ei", "m", "p"], "ans": ["offs", "ls", "aning", "nas", "ins", "aos", "ars", "ants", "ss", "ances", "aid", "amps", "ens", "an", "anc", "s", "ads", " means", "oss", "ians", "ents", "anon", "CNN", "ams", "na", "os", "anas", "ds", "ids", "nn", "ana", "span", "nan", "can", "anes", "cons", "lines", "AN", "cas", "aned", "leans", "ania", "ANS", "atan", "anne", "activation", "ann", "lan", "ns", "ands", "ends", "es", "ions", "ani", "ano", "ays", "annels", "aus", "ons"], "divisor": ["deciscor", "divistor", "divissector", "divisiors", "Divisor", "divissor", "dividector", " dividoring", " divissor", " divissector", "Divisors", "deciscored", "divistors", "divistoring", " dividector", "deciscors", "divissors", " divisoring", " divissors", " dividors", "diviors", "Divistor", "diviored", "Divistored", "divistored", "Divistors", "Divisoring", "divisored", " divisector", "deciscoring", "dividor", "divioring", "diviscored", "divisior", "diviscor", "decisors", " divissoring", "decisor", "Divisored", "divior", "decisoring", "dividoring", "divisector", "Divistoring", "diviscoring", "diviscors", "dividors", "divistector", "decisored", "divisioring", "divisoring", "divisiored", " dividor", "divissoring", "divissored"], "divided_N": ["dividedADL", "divanced_N", "dividedAD0", "divided_M", "divoded_0", "dividing__F", "divided_L", "divosed_L", "divided_F", "divided__M", "dividing__N", "divided_C", "dividing_n", "dividing_F", "divosed_Ns", "dividedIdNM", "divanced_R", "divoded_L", "dividedADNM", "divanced__N", "divided_0", "dividing_N", "divided_R", "divided__R", "divided_n", "divosed_N", "divanced_C", "dividing__n", "divoded_N", "dividedIdN", "divanced_M", "dividedADN", "divided__n", "dividing_M", "divided__N", "dividing__M", "divided_Ns", "divided_NM", "divided__C", "divanced__M", "divosed_C", "divided__F", "divanced__C", "divanced__R", "dividedId0", "divoded_NM", "dividedIdL"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\n\\n\"\"\"\\n2X = ak * (2p+1)\\n\u57fa\u672c\u7684\u306b\u306f\u6700\u5c0f\u516c\u500d\u6570/2\u3092\u57fa\u672c\u3068\u3057\uff0c\u3053\u308c\u306e\u5947\u6570\u500d\u304b\uff0e\\n\\nX  = (ak//2) * (2p+1)\\n\u3068\u66f8\u3051\u308b\uff0e\u7b2c\u4e8c\u9805\u304c\u5947\u6570\u306a\u306e\u3067\uff0c\u5404ak\u304c2\u3067\u5272\u308a\u5207\u308c\u308c\u3046\u56de\u6570\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\\na=[2,4]\u3060\u3068\u7121\u7406\\n\"\"\"\\ndef main():\\n    from math import gcd\\n    N,M=MI()\\n    A=LI()\\n    \\n    def count(X):\\n        cnt=0\\n        while X%2==0:\\n            cnt+=1\\n            X=X//2\\n        return cnt\\n    \\n    C=count(A[0])\\n    for i in range(1,N):\\n        if count(A[i])!=C:\\n            print(0)\\n            exit()\\n            \\n    lca=1\\n    for i in range(N):\\n        g=gcd(lca,A[i])\\n        lca=(lca*A[i])//g\\n        \\n    lca2=lca//2\\n    ans=M//lca2 - M//lca\\n    \\n    print(ans)\\n    \\n            \\n    \\n\\nmain()\\n", "target": "385", "substitutes": {"input": ["file", "empty", "interface", "out", "unknown", "current", "param", "argument", "raw", "output", "a", "data", " Input", "format", "expression", "submit", "int", "util", "n", " output", "view", "pull", "num", "single", "array", " int", "IN", "result", "call", "keep", "image", "version", "parent", "source", "index", "request", "null", "error", "line", "IO", " inputs", "default", "help", "reader", "select", "inf", "init", "form", "json", "accept", "text", "m", "Input", "comment", "exec", "temp", "path", "method"], "N": ["D", "S", "GN", "R", "NS", "E", "NC", "B", "Ns", "T", "n", "W", "Y", "L", "G", "Ni", "Num", "CNN", "NT", "NM", " n", "Size", "MN", "Q", "Count", "I", "Na", "Ne", "NI", "NUM", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "B", "T", "W", "J", "GM", "Y", "L", "G", "GE", "NM", "MS", "MN", "Q", "ME", "I", "MI", "MA", "V", "MB", "P", "MT", "m", "O", "H", "F", "CM", "Z"], "A": ["AR", "As", "Ca", "NA", "D", "S", "Args", "ar", "Alpha", "a", "B", "CA", "aux", "Act", "All", "T", "W", "Math", "At", "Array", "Y", "array", "G", "L", "AM", "Num", "alpha", "AS", "HA", "Ab", "Ma", "GA", "An", "Adam", "AP", "Average", "Q", "Ha", "Ar", "AN", "Count", "I", "AA", "am", "ca", "MA", "V", "P", "AF", "API", "Code", "Parts", "K", "AC", "F", "LA"], "X": ["U", "D", "S", "ZX", "CL", "x", "R", "XX", "NC", "B", "T", "W", "J", "Y", "L", "G", "Size", " x", "Q", "Count", "I", "XL", "V", "P", "XP", "K", "CC", "ID", "O", "XXX", "IX", "H", "F", "xs", "Z"], "cnt": ["cst", "ncnt", "rcst", "lcount", "CNT", "acct", "ncct", "lcst", "ccount", "fNT", "lcnt", " cpt", " ccount", "cant", "ncpt", "acount", "acst", " cant", "rcount", "acnt", "fount", "Cpt", "lcct", "Cnt", "cct", "Count", "fant", "cNT", "rcct", "fnt", "Cct", " count", "Ccount", "rcnt", "Cant", "cpt", " cct", "nccount", " cNT", "count"], "C": ["U", "CI", "D", "S", "c", "R", "E", "NC", "B", "CA", "T", "W", "n", "Y", "L", "G", "CNN", "count", "Size", "CCC", " c", "Count", "I", "V", "P", "CC", "K", "Cs", "O", "F", "CM", "Z"], "i": ["pi", "di", "o", "ji", "uri", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "a", "io", "ie", "lo", "cli", "int", "ind", "n", "num", "ini", "ui", "s", "ni", "bi", "info", "y", "id", "ij", "ix", "index", "si", "u", "iu", "e", "ti", "I", "f", "b", "ai", "p", "qi", "l", "lc", "ii", "v", "li", "m", "ei", "zi"], "lca": ["lccca", "lpa", "lcpa", "lna", "dlpa", "lda", " lha", "klCa", "llna", "Lcca", "dlca", "lfpa", "Lha", "dlCA", "llCa", "Lba", "lha", "Lpa", " lCa", "elha", "Lna", " lba", "lfcca", "klpa", "lCA", "lcca", "LCA", "dlcca", "elca", " lCA", "elda", "klcca", "lCa", " lna", " lda", "LCa", " lpa", " lcca", "lfCA", "Lca", "lcCA", "llba", "lfca", "llCA", "klca", "Lda", "lba", "llca", "elCa"], "g": ["mc", "GS", "j", "gi", "c", "gu", "gm", "d", "n", "go", "ge", "mg", "s", "G", "gam", "get", "h", "gs", "gg", "gram", "u", "f", "ann", "b", "ga", "l", "gn", "sg", "cat", "m", "msg", "gen", "groups", "p", "group", "gp", "arg"], "lca2": ["lba4", "lcaB", "lpa1", "lba1", "lbaB", "lcha1", "lpaB", "lba2", " lpaB", "lcha2", "lha1", "lpa2", " lpa1", "lha2", " lpa2", "lcha4", " lcaB", " lca1", "lca1", "lcca4", "lcca1", "lha4", "lca4", "lcca2", "lhaB"], "ans": ["ls", "ang", "GS", "Ann", "ANN", "x", "a", "args", "an", "anc", "s", "man", " means", "G", "sk", "na", "ms", "nan", "An", "ana", "span", "can", "gs", "cons", "gram", "AN", "cas", "ANS", "lan", "ann", "ns", "scan", "lang", "chan", "ani", "ai", "mean", "gn", "groups", "m", "Gs", "gen"]}}
{"code": "n,k=map(int,input().split())\\ns=input()\\ns+=\"6\"\\nc=0\\nl=[]\\nzcnt=0\\nfor i in range(n):\\n  if s[i]!=s[i+1]:\\n    if s[i]==\"0\":zcnt+=1\\n    l.append((s[i],i+1-c))\\n    c=i+1\\nL=len(l)\\nsl=[0]*(L+1)\\nfor i in range(L):\\n    sl[i+1]=sl[i]+l[i][1]\\nif k>=zcnt:print(n);exit()\\nans=0\\nif s[0]==\"0\":\\n    for i in range(zcnt-k+1):\\n        ans=max(ans,sl[min(L,2*k+i*2)]-sl[max(0,i*2-1)])\\n    print(ans)\\nelse:\\n    for i in range(zcnt-k+1):\\n        ans=max(ans,sl[min(L,2*k+i*2+1)]-sl[i*2])\\n    print(ans)", "target": "340", "substitutes": {"n": ["o", "cn", "x", "j", "d", "nb", "num", "t", "y", "g", "en", "u", "size", "len", "net", "f", "e", "nt", "b", "ns", "C", "sn", "no", "w", "z", "v", "m", "r", "nc", "ln", "p", "N"], "k": ["o", "ke", "x", "kk", "j", "d", "kl", "ck", "t", "ch", "y", "sk", "g", "h", "ok", "ks", "km", "dk", "ko", "u", "e", "f", "max", "b", "ki", "q", "w", "kw", "z", "K", "v", "m", "r", "p", "ku"], "s": ["states", "ls", "o", "string", "services", "js", "S", "ssl", "d", "ins", "ses", "a", "ss", "als", "abs", "qs", "ops", "t", "strings", "cs", "y", " parts", "g", " cs", "os", "cells", "ks", "gs", "items", "si", "u", "sets", "e", "f", "b", "ns", "ments", "es", "w", "z", "v", "sg", " ss", "m", "r", "xs", "p"], "c": ["o", "loc", "cn", "x", "j", "cy", "ci", "d", "col", "ac", "cc", "t", "cs", "y", "g", "h", "ct", "cm", "u", "len", "e", "f", "b", "C", "z", "cr", "lc", "v", "pc", "m", "r", "nc", "p", "cl", "count"], "l": ["el", "lp", "ls", "o", "loc", "ol", "al", "wl", "lf", "ul", "d", "kl", "fl", "ll", "list", "t", "g", "nl", "la", "il", "u", "len", "f", "rl", "e", "b", "dl", "z", "v", "lc", "li", "m", "r", "ln", "p", "cl"], "zcnt": ["czcno", "zgnt", " zacNT", "zscst", "zlcNT", "czcNT", "zfno", "zcno", "zdcNT", "zgno", "czlcNT", "qcno", "zlcret", " zacst", "zacno", "zlcno", " zcret", "zlcct", "zacst", " zdcno", "zcNT", "zdcnt", "zscNT", "zgcent", "Zdcno", "zfcret", "Zcnt", " zacnt", "zacount", "zfcnt", "zfcno", " zdcount", "zdcret", "zlcst", "zcount", "zmnt", "zlcount", "qmnt", "zfnt", "czcount", "zccent", "zfct", "zacNT", "zfrt", "zdcount", "zscnt", "Zdcnt", "zgount", "zmct", "Zdcount", "Zcount", "czcnt", "Zdccent", "Zccent", "qcct", "czlcno", " zcNT", " zcno", "zmno", "zdccent", "zfcount", " zdcnt", " zcount", " zacno", "czlcnt", "zcrt", "qmct", "zdcno", " zdcret", "qcnt", "zlccent", "qmrt", "zlcnt", "zlcrt", "zcret", "zscno", " zcst", "qcrt", "Zcno", "zcct", "zacnt", "zmrt", "czlcount", "qmno", "zcst"], "i": ["mini", "pi", "di", "o", "uri", "ji", "x", "xi", "j", "gi", "ci", "d", "yi", "phi", "ri", "oi", "a", "ie", "cli", "int", "ind", "ui", "ini", "t", "ni", "bi", "id", "y", "info", "h", "ix", "index", "ip", "multi", "eni", "si", "u", "iu", "e", "I", "ti", "f", "b", "mi", "ki", "ai", "z", "p", "qi", "v", "ii", "li", "m", "r", "ei", "io", "zi"], "L": ["U", "LM", "D", "S", "lf", "ul", "Z", "R", " N", "NL", "LR", "B", "Lo", "T", "FL", "W", "F", "ll", "Y", "G", "Len", "LC", "LP", "EL", "LE", "LT", "f", "I", "Li", "X", "C", "LL", "Lu", "V", "P", "z", "K", "lc", "v", "length", "li", "m", "DL", "M", "ln", "SL", "H", "O", "cl", "N", "dL"], "sl": ["el", "ls", "hl", "loc", "ssl", "su", "wl", "ul", "al", "acl", "sil", "spl", "kl", "sol", "fl", "pos", "sle", "gl", "ll", "sd", "split", "sk", "sw", "sa", "SL", "en", "bl", "lv", "nl", "lines", "sel", "la", "sf", "sal", "si", "il", "u", "len", "isl", "e", "f", "sn", "pl", "dl", "sh", "Sl", "sv", "z", "lc", "v", "se", "p", "cl"], "ans": ["rs", "offs", "ls", "angs", "anus", "san", "ils", "nas", "ras", "ins", "acl", "olds", "ars", "ss", "ants", "any", "amps", "ens", "all", "an", "anc", "rules", "ads", "ats", "asts", "outs", "oss", "ents", "ams", "anon", "sk", "cs", "na", "os", "en", "anas", "ds", "ms", "ips", "ana", "ks", "can", "anes", "la", "cas", "aned", "ANS", "lan", "ann", "ps", "ns", "lang", "es", "errors", "ions", "ani", "aces", "ays", "params", "groups", "eps", "ln", "p", "aus", "ons", "au"]}}
{"code": "H,W = map(int,input().split())\\nA=[]\\nfor i in range(H):\\n    A.append(list(input()))\\n\\nfor i in range(H):\\n    if A[i] == ['.'] * W:\\n        A[i] = ['-1'] * W\\nfor j in range(W):\\n    count = 0\\n    for i in range(H):\\n        if A[i][j] == '#':\\n            break\\n        count += 1\\n    if count == H:\\n        for i in range(H):\\n            A[i][j] = '-1'\\nfor a in A:\\n    if a == ['-1'] * W:\\n        continue\\n    ans = [ai for ai in a if not ai == '-1']\\n    print(''.join(ans))\\n\\n\\n", "target": "413", "substitutes": {"H": ["U", "SH", " h", "D", "S", "HC", "R", "E", "B", "RH", "OH", "T", "HH", "NH", "J", "Rh", "Y", "L", "G", "FH", "HK", "EH", "h", "Q", "Ha", "WH", "GH", "Length", "Count", "I", "X", "C", "MH", "HI", "V", "w", "P", "K", "AH", "O", "Ch", "M", "F", "CH", "N", "Z"], "W": ["GW", "U", "TW", "D", "S", "BW", "R", "E", "B", "WR", "T", "J", "F", "EW", "Y", "L", "Wh", "G", "Web", "DW", "h", "NW", "FW", "Q", "WA", "WC", "Wa", "WS", "I", "X", "SW", "C", "CW", "V", "w", "We", "P", "K", "MW", "O", "M", "WE", "VW", "AW", "N", "Z"], "A": ["As", "AR", "U", "NA", "S", "Args", "Z", "Ast", "E", "Alpha", "B", "CA", "All", "T", "mA", "This", "At", "Array", "Y", "AD", "AM", "G", "L", "Am", "Part", "AS", "alpha", "Ma", "HA", "Ab", "AI", "GA", "An", "Adam", "AP", "Average", "Ar", "Wa", "Ha", "AN", "Each", "I", "AA", "Ang", "X", "App", "C", "AST", "MA", "V", "P", "API", "AF", "Parts", "AB", "K", "M", "AC", "F", "N", "LA"], "i": ["pi", "di", "o", "ji", "it", "uri", "k", "x", "xi", "c", "gi", "ci", "d", "yi", "io", "ie", "start", "int", "ind", "n", "s", "ui", "ini", "ni", "bi", "id", "y", "info", "api", "h", "ix", "index", "ip", "si", "u", "iu", "e", "I", "ti", "f", "b", "hi", "w", "z", "p", "qi", "v", "l", "ii", "li", "m", "ei", "zi"], "j": ["note", "ji", "o", "k", "x", "_", "xi", "gi", "d", "jc", "ie", "n", "J", "jit", "ch", "y", "g", "ij", "bj", "jl", "jo", "iu", "ja", "f", "je", "I", "adj", "e", "jj", "b", "q", "z", "qi", "l", "jp", "ii", "v", "li", "r", "p", "uj"], "count": ["part", "type", "case", "c", "current", "d", "point", "sum", "col", "start", "int", "ind", "n", "J", "F", "num", "depth", "cc", "ch", "L", "weight", "id", "y", "time", "div", "val", "offset", "parent", "index", "error", "number", "age", "size", "N", "f", "Count", "b", "code", "base", "C", "child", "w", "counter", "z", "CC", "found", "length", "p", "group", "level", "call"], "a": ["ma", "area", "o", "at", "c", "ar", "ac", "wa", "art", "af", "n", "an", "fa", "y", "alpha", "na", "qa", "sa", "h", "ana", "ia", "aa", "la", "ach", "va", "e", "f", "am", "b", "ca", "sha", "ad", "ga", "ae", "w", "z", "ba", "aj", "p", "au"], "ans": ["Ann", "anus", "aning", "anned", "ras", "nas", "ases", "ars", "ants", "aid", "amps", "an", "anc", "ents", "AS", "anon", "anas", "plan", "gan", "ana", "An", "can", "AN", " an", "cas", "aned", "atan", "ANS", "lan", "ann", "ANT", "anna", "ano", "ays", "aus"], "ai": ["at", "ash", "ait", "ci", "ar", "ac", "af", "an", "agi", "fa", "bi", "na", "AI", "sa", "ah", "qa", "ay", "ana", "ia", "aci", "aa", "aut", "ach", "ais", "am", "ad", "ca", "ann", "aic", "ain", "adi", "ga", "ae", "ani", "aii", "ba", "aj", "ao", "abi", "ei", "au"]}}
{"code": "X = int(input())\\nA = int(input())\\nB = int(input())\\n\\n# \u3067\u304d\u308b\u3060\u3051\u8cb7\u3048\u308b\u500b\u6570\\nn = (X - A) // B\\n\\nprint(X - A - B * n)\\n", "target": "98", "substitutes": {"X": ["U", "S", "x", "R", "E", "XX", "T", "W", "Y", "L", "G", "ANY", "Q", "XY", "C", "XL", "V", "FF", "P", "XP", "K", "O", "XXX", "H", "M", "F", "N", "Z"], "A": ["AR", "D", "S", "Alpha", "a", "CA", "Array", "AD", "AM", "AL", "AY", "AX", "SA", "AN", "AA", "C", "V", "P", "AF", "AB", "AC", "AW", "M", "AAA", "N", "LA"], "B": ["BW", "BS", "BF", "R", "E", "BB", "BE", "J", "AD", "L", "NB", "BA", "OB", "BI", "Bs", "QB", "WB", "CB", "b", "C", "V", "P", "BC", "AB", "O", "M", "Beta"]}}
{"code": "import math\\n\\nr = float(raw_input())\\ns = r * r * math.pi\\nl = 2.0 * r * math.pi\\n\\nprint \"%f %f\" % (s, l)", "target": "758", "substitutes": {"r": ["rs", "pi", "o", "rd", "k", " R", "x", "c", "er", "R", "ar", "d", "rad", "pair", "n", "rh", "array", "rb", "range", "math", "mr", "t", "i", "rt", "g", "rg", "ir", "h", "lr", "pr", "radius", "function", "ur", "u", "parse", "nr", "e", "rl", "f", "b", "q", "w", "cr", "v", "str", "m", "fr", "p", "rc", "sr", "rate"], "s": ["rs", "ls", "o", "string", "S", "x", "c", "d", "ar", "scale", "a", "ss", "n", "t", "i", "cs", "y", "sd", "min", "os", "ds", "si", "u", "spec", "e", "f", "ys", "b", "ps", "es", "sb", "q", "w", "z", "v", "m", "small", "p", "sr", "rate"], "l": ["lp", "ls", "o", "ol", " L", "lf", "c", "kl", "fl", "ell", "sl", "n", "ll", "ly", "t", "L", "i", "g", "line", "nl", "lr", "la", "lb", "len", "u", "rl", "e", "f", "b", "pl", "dl", "q", "v", "lc", "length", "ln", "p", "cl"]}}
{"code": "h,w=map(int,input().split())\\nn=int(input())\\na=[0]+list(map(int,input().split()))\\nans=[[0]*w for i in range(h)]\\nx=0\\ny=0\\nfor i in range(1,n+1):\\n    for _ in range(a[i]):\\n        \\n        if y==w:\\n            x+=1\\n            y=0\\n            \\n        if x%2==0:\\n            ans[x][y]=i\\n            y+=1\\n        else:\\n            ans[x][w-1-y]=i\\n            y+=1\\nfor u in ans:\\n    print(*u)", "target": "380", "substitutes": {"h": ["o", "k", "c", "d", "rh", "s", "num", "t", "g", "f", "e", "max", "end", "b", "hi", "q", "z", "v", "l", "hm", "m", "r", "H", "ih", "p", "count"], "w": ["o", "k", "work", "wl", "c", "wan", "d", "ws", "wa", "W", "ww", "wt", "s", "t", "wd", "width", "sw", "g", "we", "win", "f", "max", "e", "b", "wx", "q", "z", "v", "l", "m", "r", "wh", "p"], "n": ["o", "k", "j", "c", "d", "an", "s", "num", "t", "g", "en", "f", "e", "b", "ns", "q", "z", "v", "l", "m", "r", "nc", "p", "N"], "a": ["area", "sta", "c", "aw", "ar", "ac", "wa", "args", "an", "s", "array", "A", "alpha", "sa", "ana", "ia", "aa", "va", "f", "b", "am", "ad", "ai", "aaa", "ba", "z", "m", "p"], "ans": ["ras", "ins", "ases", "ars", "ants", "vs", "amps", "int", "ens", "args", "all", "an", "s", "ads", "A", "fa", "ats", "cs", "ians", "anon", "ents", "oss", "na", "sa", "anas", "ks", "ana", "span", "can", "lines", "cons", "la", "AN", "atan", "aned", "ANS", "nt", "ann", "ns", "ane", "chan", "es", "ions", "ai", "ani", "ays", "v", "asm", "xs", "acs", "p", "aus", "ons", "au"], "i": ["pi", "di", "o", "iw", "k", "xi", "j", "c", "ci", "d", "phi", "io", "start", "int", "ind", "ui", "ini", "id", "ix", "index", "ip", "si", "iu", "f", "I", "ti", "e", "b", "q", "ai", "z", "v", "l", "ii", "li", "ei", "m", "r", "p"], "x": ["o", "wy", "k", "ya", "xi", "px", "c", "cy", "d", "yi", "xy", "wa", "int", "ww", "Y", "t", "on", "width", "dy", "ax", "ay", "rx", "ix", "index", "ex", "xc", "f", "e", "dx", "max", "b", "X", "xx", "z", "l", "v", "cross", "m", "xs", "p"], "y": ["ey", "o", "fy", "sy", "hy", "wy", "iy", "ya", "j", "c", "cy", "d", "yi", "yn", "oy", "ry", "ny", "ot", "yl", "s", "Y", "zy", "t", "ye", "dy", "yan", "gy", "ay", "py", "yt", "f", "e", "ys", "b", "yd", "ish", "yy", "z", "v", "l", "m", "ady", "p", "vy", "isy"], "_": ["k", "j", " p", "__", "g", " j", "f", "I", "l", "p"], "u": ["U", "yu", "o", "k", "you", "ul", "uv", "c", "gu", "ci", "d", "yi", "ut", "ui", "iq", "nw", "g", "ue", "chu", "un", "ua", " c", "ur", "iu", "cu", "e", "b", "us", "uu", "im", "q", "p", "uid", "v", "l", "m", "io", "up", "ou"]}}
{"code": "from collections import deque\\nimport math\\n\\nn,m,p = map(int, input().split())\\ndist  = []\\nedge1 = [[] for _ in range(n)]\\nedge2 = [[] for _ in range(n)]  # rev_edge\\nfor _ in range(m):\\n    u,v,c = map(int, input().split())\\n    u -= 1\\n    v -= 1\\n    dist.append((u,v,(c-p)*-1))\\n    edge1[u].append(v)\\n    edge2[v].append(u)   \\n\\ndef dfs(edges, s):\\n    stack = deque([s])\\n    used  = {s}\\n    while stack:\\n        x = stack.pop()\\n        for y in edges[x]:\\n            if y not in used:\\n                used.add(y)\\n                stack.append(y)\\n    return used\\n\\n\\ndef bfs(edges, s):\\n    queue = deque([s])\\n    used  = {s}\\n    while queue:\\n        x = queue.popleft()\\n        for y in edges[x]:\\n            if y in used:\\n                continue\\n            used.add(y)\\n            queue.append(y)\\n    return used\\n    \\n\\ndef bellman(dist):  #\u8ca0\u8fba\u304c\u3042\u308b\u30b1\u30fc\u30b9\u3067\u306e\u3001\u30b9\u30bf\u30fc\u30c8\u304b\u3089\u30b4\u30fc\u30eb\u3078\u306e\u6700\u77ed\u8def\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u3002\\n    cost = [float(\"inf\")] * n\\n    cost[0] = 0\\n    for _ in range(n): #\u9802\u70b9\u306e\u500b\u6570\u306e\u5206\u3060\u3051\u56de\u308b\\n        updated = False\\n        for u,v,c in dist: #\u8fba\u306e\u500b\u6570\u306e\u5206\u3060\u3051\u56de\u308b\\n            if cost[u] + c < cost[v]:\\n                cost[v] = cost[u] + c\\n                updated = True                \\n    #\u53ce\u675f\u3057\u306a\u3044\u5834\u5408\u306f\u8ca0\u9589\u8def\u304c\u3042\u308b\u305f\u3081\u7121\u9650\u306b\u5c0f\u3055\u304f\u3067\u304d\u308b\u3002\\n    if updated==True:\\n        return -1\\n    else:\\n        return max(0, cost[n-1]*-1)     \\n    \\nuse = bfs(edge1, 0) & bfs(edge2, n-1)\\ndist2 = [(a,b,c) for a,b,c in dist if a in use and b in use]\\nprint(bellman(dist2))", "target": "88", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", " fn", " N", "nb", "node", "num", "t", "i", "y", "g", "count", "h", "nn", "span", " network", "number", " c", " l", "u", "net", "fn", "f", "e", "b", "ns", "q", "w", "z", "l", "v", "r", " pi", "N"], "m": ["o", "mc", "k", "c", "param", "d", "i", "g", "dim", "h", " M", "u", "f", "e", "mu", "b", "mm", "im", "q", "pm", "w", "P", "v", "l", "r", "M"], "p": ["pi", "tp", "o", "c", "np", "d", "param", "port", "point", "data", "t", "i", "points", "g", "h", "pad", "u", "pp", "e", "ps", "q", "P", "pm", " P", "r", "pc"], "dist": ["distance", "Dist", "j", "np", "pair", "data", "diff", "pos", "ind", "list", "array", " distance", " pairs", " f", "master", "mu", "mat", "e", "adj", "shape", "pt", "q", "pm", " P", "r", " distances", " pi"], "edge1": ["ge3", "Edge3", " edge0", "Edge0", "Edge2", "edge0", "ge0", " edge3", "Edge1", "ge1", "edge3", "ge2"], "_": [" v", "out", "x", " sub", "ac", "__", "all", "s", "non", "g", " local", " x", "ip", "f", " block", " non", " over", "ing", " the"], "edge2": [" vertex0", " vertex2", "nodetwo", "edge0", "ge0", "getwo", "node0", " vertextwo", "node2", "edgetwo", "ge2"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\n\\ndef main():\\n    mod=10**9+7\\n    K=I()\\n    print(\"ACL\"*K)\\n\\nmain()\\n", "target": "533", "substitutes": {"input": ["file", "empty", "interface", "element", "current", "intel", "argument", "raw", "output", "PUT", "data", "a", " Input", "format", "value", "expression", "submit", "int", "instance", "util", " output", "pull", "binary", "list", "array", "single", "config", "IN", "i", "call", "inner", "magic", "image", "parent", "source", "request", "index", "null", "error", "main", "line", " inputs", "active", "default", "reader", "enum", "select", "inf", "init", "example", "form", "accept", "m", "text", "Input", "exec", "temp", "method"], "mod": ["sec", "mode", "mac", "j", "d", "ak", "mult", "dec", "ind", "inc", "reg", "id", "min", "pack", "dim", "ident", "cm", "mods", "u", " Mod", "MOD", "Mod", "im", "module", "CC", "m", "r", "p"], "K": ["U", "KI", "D", "k", "S", "IK", "E", "SK", "B", "KE", "W", "J", "Y", "A", "L", "G", "HK", "AK", "Q", "I", "X", "C", "MOD", "Mod", " k", "DEC", "V", "P", "KB", "KS", "O", "M", "F", "N", "Z"]}}
{"code": "def main():\\n    A, B = map(int, input().split())\\n    if (A*B)%2 == 0:\\n        print('No')\\n    else:\\n        print('Yes')    \\nmain()", "target": "356", "substitutes": {"A": ["U", "Ca", "NA", "D", "S", "Alpha", "a", "T", "W", "mA", "Y", "AM", "L", "G", "Am", "SA", "EA", "Q", "I", "AA", "X", "Ang", "C", "MA", "Na", "P", "AB", "O", "AC", "M", "H", "F", "N", "LA"], "B": ["U", "D", "S", "BS", "BF", "R", "E", "Bi", "BB", "T", "UB", "W", "J", "Y", "L", "G", "NB", "BA", "OB", "Q", "DB", "WB", "BER", "b", "X", "C", "SB", "V", "P", "K", "AB", "O", "H", "M", "F", "N"]}}
{"code": "N = int(input())\\n\\nprint(N*(N-1)//2-N//2)\\nif N%2 == 1:\\n    for i in range(1, N):\\n        for j in range(i+1, N+1):\\n            if i == N-j:\\n                continue\\n            print(i, j)\\nelse:\\n    for i in range(2, N):\\n        print(1, i)\\n        print(N, i)\\n    for i in range(2, N):\\n        for j in range(i+1, N):\\n            if i+j == N+1:\\n                continue\\n            print(i, j)", "target": "277", "substitutes": {"N": ["U", "Node", "NA", "II", "D", "S", "Max", "GN", "R", "NS", "E", "NE", "NL", "NC", "B", "Ns", "T", "n", "J", "NH", "W", "Not", "Y", "Ni", "L", "G", "Len", "Num", "NB", "CNN", "NT", "NM", " n", "Size", "NN", "MN", "No", "Q", "Length", "Count", "I", "Number", "X", "C", "NI", "Ne", "Na", "V", "P", "K", "Nat", "O", "H", "M", "F", "Z"], "i": ["ik", "pi", "di", "o", "ji", "uri", "k", "x", "xi", "gi", "ci", "d", "yi", "ri", "oi", "io", "ie", "start", "ori", "int", "ind", "n", "J", "ui", "ini", "ni", "bi", "id", "y", "info", "ir", "ij", "ia", "ix", "ip", "eni", "si", "u", "iu", "e", "ti", "I", "b", "im", "ai", "z", "p", "chi", "qi", "v", "l", "ii", "li", "m", "ei", "vi", "zi"], "j": ["note", "el", "ji", "o", "js", "part", "k", "x", "ijk", "jc", "ie", "oj", "ind", "J", "n", "y", "ax", "ij", "h", "ion", "bj", "jl", "jo", "si", "u", "ja", "e", "je", "I", "b", "jj", "f", "one", "obj", "adj", "q", "dj", "z", "v", "jp", "aj", "jam", "l", "m", "li", "ii", "p", "uj"]}}
{"code": "N = int(input())\\nS = []\\nT = []\\nfor i in range(N):\\n    s,t = input().split()\\n    S.append(s)\\n    T.append(int(t))\\n\\nX = str(input())\\nind = int(S.index(X))\\nprint(sum(T[ind+1:]))", "target": "538", "substitutes": {"N": ["NA", "D", "R", "NS", "NL", "B", "Ns", "n", "NH", "W", "J", "Y", "L", "Len", "Num", "NB", "NT", "NM", " n", "Size", "No", "I", "NO", "C", "Ne", "V", "OS", "P", "K", "O", "M", "F", "Z"], "S": ["U", "SE", "SH", "D", "SS", "Files", "NS", "SK", "Sample", "RS", "Ds", "B", "Ns", "LS", "TS", "Si", "F", "SI", "IDS", "A", "L", "G", "Single", "INS", "PS", "Sign", "I", "Socket", "SU", "C", "IS", "Su", "Send", "V", "Sl", "P", "Sort", "O", "H", "M", "SL", "Z"], "T": ["U", "TW", "Ti", "D", "DT", "Temp", "TN", "TO", "R", "E", "Test", "KT", "XT", "B", "TS", "TB", "Type", "Y", "G", "L", "Taylor", "NT", "ST", "GT", "TA", "PT", "Q", "WT", "Tu", "LT", "I", "C", "TT", "TX", "V", "P", "TH", "O", "TF", "M", "F", "Z"], "i": ["it", "k", "x", "j", "c", "sp", "d", " I", " ii", "start", "pos", "id", "y", "h", " il", "index", "ip", "nt", "ti", "I", "z", "ii", "p"], "s": ["ls", "o", "x", "su", "sin", "c", "d", "ses", "ss", "sl", "side", "n", "space", "y", "sd", "sort", "g", "ds", "ts", "sample", "sf", "sq", "si", "f", "b", "ps", "sv", "v", "l", "sc", "xs", "se", "p"], "t": ["tp", "part", "dt", "type", "qt", "x", "j", "c", "d", "n", "ot", "wt", "tw", "y", "test", "g", "ty", "ts", "tt", "tz", "u", "e", "f", "b", "pt", "ta", "z", "v", "l", "m", "p"], "X": ["CI", "XXXX", "TW", "x", "SS", "E", "XX", "Test", "Data", "Path", "Y", "L", "DX", "Index", "sex", "IP", "ix", "Ex", "Q", "ex", "WS", "Sex", "XY", "C", "XL", "TX", "Cross", "V", "P", "Text", "K", "XP", "Sax", "OX", "EX", "XXX", "IX", "M", "F", "Z"], "ind": ["Ind", "loc", "k", "x", "j", "ded", "sp", "d", "old", "start", "pos", "eight", "int", "n", "nd", "num", "inc", "id", "y", "circ", "keep", "Index", "cand", "vert", "inn", "ix", "index", "set", "len", "nt", "ann", "end", "adj", "IND", "pt", "z", "add", "l", "sign", "ii", "p", "ne", "count"]}}
{"code": "import math\\nfrom math import gcd,pi,sqrt\\nINF = float(\"inf\")\\nMOD = 10**9 + 7\\n\\nimport sys\\nsys.setrecursionlimit(10**6)\\nimport itertools\\nimport bisect\\nfrom collections import Counter,deque\\ndef i_input(): return int(input())\\ndef i_map(): return map(int, input().split())\\ndef i_list(): return list(i_map())\\ndef i_row(N): return [i_input() for _ in range(N)]\\ndef i_row_list(N): return [i_list() for _ in range(N)]\\ndef s_input(): return input()\\ndef s_map(): return input().split()\\ndef s_list(): return list(s_map())\\ndef s_row(N): return [s_input for _ in range(N)]\\ndef s_row_str(N): return [s_list() for _ in range(N)]\\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\\n\\n\\ndef main():\\n    x,y = i_map()\\n    if (x+y)%3 != 0:\\n        print(0)\\n        exit()\\n\\n    n = (-x+2*y)//3\\n    m = (2*x-y)//3\\n\\n    if n < 0 or m < 0:\\n        print(0)\\n        exit()\\n\\n    def fur(n,r):\\n        p,q = 1, 1\\n        for i in range(r):\\n            p = p*(n-i)%MOD\\n            q = q*(i+1)%MOD\\n        return (p * pow(q,MOD-2,MOD)) % MOD\\n\\n    print(fur(n+m,n))\\n\\n\\n\\nif __name__==\"__main__\":\\n    main()\\n", "target": "759", "substitutes": {"INF": ["inInf", "inFs", "inf", "ADf", "ADF", "ADFs", " INf", " INFs", "INFs", "ADInf", "INf", "inF", " INInf", "INInf"], "MOD": ["MAG", "RAM", "B", "W", "ZI", "RE", "ROM", "UR", "DI", "Mods", "I", "NO", "LL", "CC", "VERSION", "VM", "COM", "O", "R", "REG", "RF", "PAR", "UN", "RR", "RH", "LOD", "SIZE", "FUN", "MD", "SPEC", " mod", "LOG", "RA", "MODE", "NUM", "DEC", "MM", "ID", "H", "M", "Ry", "Z", "TW", "D", "ARM", "OD", "LR", "FD", "PUT", "T", "LIB", "SUP", "Q", "Length", "OR", "X", "C", "Mod", "IR", "IM", "U", "SE", "COR", "XX", "MER", "mod", "PM", "Y", "L", "FE", "DIV", "FORM", "PI", "MET", " Mod", "MIN", "P", "REM", "F", "RM"], "N": ["U", "Node", "D", "S", "GN", "R", "NS", "E", "NC", "Local", "B", "Ns", "T", "W", "Y", "A", "L", "Ni", "IN", "G", "Num", "SN", "CNN", "NM", "Size", "NN", "MN", "No", "Q", "IO", "AN", "I", "Number", "X", "NO", "C", "Na", "Ne", "NI", "NG", "NER", "V", "P", "K", "O", "H", "M", "F", "Name", "Z"], "_": ["U", "o", "D", "out", "al", "d", "ac", "a", "lex", "__", "all", "non", "A", "G", "___", "g", "Se", "Def", "word", "f", "code", "O", "Page", "ing"], "x": ["o", "k", "ya", "xi", "px", "j", "c", "d", "xy", "int", "s", "num", "an", "Y", "t", "on", "ax", "h", "yx", "rx", "ix", "ox", "py", "ex", "xc", "u", "f", "e", "b", "X", "xx", "w", "z", "v", "l"], "y": ["ey", "o", "sy", "k", "ya", "j", "c", "cy", "d", "yi", "oy", "ky", "ry", "ny", "s", "Y", "ye", "t", "dy", "py", "u", "f", "e", "b", "yd", "yy", "w", "z", "l", "v", "vy"], "n": ["o", "cn", "k", "j", "c", "d", "ng", "yn", "nb", "name", "ny", "an", "num", "s", "t", "na", "h", "nn", "un", "u", "f", "e", "nt", "b", "ns", "sn", "no", "w", "P", "z", "v", "l", "nc", "nin", "ne"], "m": ["ma", "pi", "o", "wm", "mc", "k", "j", "c", "fm", "gm", "d", "nm", "a", "mod", "an", "mr", "man", "mn", "g", "h", "ms", "ym", "md", "cm", "u", "f", "e", "b", "my", "mi", "mm", "im", "w", "pm", "z", "dm", "v", "l", "hm", "M", "bm"], "r": ["rs", "o", "j", "c", "er", "R", "ar", "d", "ri", "re", "rh", "mr", "range", "t", "rb", "yr", "ir", "h", "rx", "dr", "ur", "u", "nr", "e", "f", "b", "rec", "w", "v", "l", "ru", "rc", "sr"], "p": ["lp", "pi", "o", "tp", "j", "c", "d", "a", "pos", "pa", "per", "s", "t", "g", "h", "pr", "py", "u", "pp", "f", "e", "b", "ps", "w", "P", "z", "v", "l", " P", "pc"], "q": ["k", "qt", "j", "c", "d", "mod", "qs", "quant", "t", "ch", "qa", "h", "query", "ix", "Q", "sq", "eq", "u", "f", "e", "max", "qq", "w", "P", "z", "qi", "v", "qu", "dq"], "i": ["mini", "pi", "o", "k", "xi", "j", "c", "gi", "ci", "ar", "d", "phi", " I", "ri", "a", "int", "ind", "ini", "ui", "t", "bi", "id", "ip", "ine", "si", "u", "iu", "f", "I", "e", "b", "mi", "ai", "z", "qi", "l", "v", "ii", "li"]}}
{"code": "while True:\\n    H, W = map(int, raw_input().split())\\n    if (H+W) == 0:\\n        break\\n    cb1 = '#'\\n    cb2 = '.'\\n    for w in range(W-1):\\n        if (w % 2) == 0:\\n            cb1 += '.'\\n            cb2 += '#'\\n        else:\\n            cb1 += '#'\\n            cb2 += '.'\\n\\n    for h in range(H/2):\\n        print cb1\\n        print cb2\\n    if (H % 2) != 0:\\n        print cb1\\n    print \"\"", "target": "451", "substitutes": {"H": ["U", "SH", "D", "HC", "R", "He", "E", "Z", "Hi", "B", "RH", "T", "HH", "NH", "Y", "L", "Wh", "G", "EH", "Q", "WH", "Ha", "Length", "X", "C", "MH", "HI", "V", "P", "K", "TH", "Ch", "M", "DH", "F", "CH", "N", "CL"], "W": ["U", "GW", "SH", "D", "S", "BW", "R", "WF", "B", "WR", "T", "EW", "F", "Y", "L", "Wh", "G", "DW", "WP", "FW", "Q", "WA", "WH", "WC", "Wa", "WS", "WB", "X", "SW", "C", "DC", "V", "We", "P", "K", "WM", "O", "VW", "WD", "M", "WE", "N", "Z"], "cb1": ["cf2", "cbOne", "db3", "cfOne", "cb3", "obbone", "cv0", "cor1", "bb5", "fb2", "fb3", "cue1", "bc2", "cb0", "cf0", "cv1", "bc4", "bcOne", "cb101", "bb2", "cue2", "cf4", "cb5", "cfone", "obb2", "cv2", "cf1", "db2", "cueone", "bc6", "cor2", "cb4", "db6", "db4", "bc1", "bb1", "fb1", "cbone", "db1", "bb3", "cue101", "corone", "obb1", "cf101", "obb101", "fbOne", "cf3", "db5", "bc3", "cb6", "cf6", "cvone", "cor0", "cf5"], "cb2": ["cf2", "cfTwo", "bb4", "fbTwo", "cbTwo", "cbtwo", "core72", "obb72", "fbtwo", "cb56", "obb96", "bb5", "fb2", "cv4", "cv1", "dbTwo", "callback96", "bodytwo", "callback72", "bb2", "callback2", "cf4", "cb22", "cb96", "obb2", "cb5", "nob56", "cv2", "cf1", "db2", "cb4", "core2", "bb1", "nob1", "nobTwo", "db1", "fb22", "cf56", "db56", "core96", "cb72", "body2", "db22", "body22", "dbtwo", "cv5", "nob2", "cf5", "bodyTwo"], "w": ["iw", "k", "fw", "work", "x", "wl", "hw", "aw", "c", "d", "ws", "wa", "ww", "n", "wt", "wk", "L", "i", "wd", "y", "width", "sw", "g", "we", "ew", "wn", "wb", "b", "X", "wx", "sh", "v", "l", "m", "r", "wh", "p"], "h": ["hl", "wy", "x", "work", "hw", "c", "ht", "y", "hd", "hh", "ow", "ew", "how", "f", "hr", "hi", "wx", "q", "sh", "z", "v", "l", "hm", "he", "ih", "hs"]}}
{"code": "S=input()\\nli=[S.count(\"a\"),S.count(\"b\"),S.count(\"c\")]\\nprint(\"YES\" if max(li)-min(li)<=1 else \"NO\")\\n", "target": "265", "substitutes": {"S": ["SE", "SH", "SO", "D", "GS", "input", "BS", "SS", "R", "NS", "RS", "Sample", "JS", "B", "T", "TS", "OSS", "SI", "s", "Source", "A", "L", "G", "String", "SN", "Single", "SL", "INS", "SER", "DS", "PS", "Q", "WS", "SC", "I", "Socket", "CS", "SU", "C", "SB", "Su", "V", "OS", "P", "Sort", "SON", "Session", "O", "H", "M", "Input", "F", "N", "Set"], "li": ["lim", "mini", "lp", "ls", "di", "loc", "le", "j", "ul", "c", "ci", "kl", "ie", "lo", " Li", " mini", "sl", "n", "Si", "lie", "s", "LI", "L", "ni", "i", "min", "bl", " LI", "multi", "la", "si", "len", "Li", "I", "Lu", "chi", "l", "lc", "ii", "lu", "Mi", "ln", "lt"]}}
{"code": "import sys, os, math, bisect, itertools, collections, heapq, queue\\n# from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\\nfrom decimal import Decimal\\nfrom collections import defaultdict, deque\\n\\nsys.setrecursionlimit(10000000)\\n\\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\\nfl = lambda: list(map(float, sys.stdin.buffer.readline().split()))\\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\\n\\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\\nsl = lambda: list(map(str, sys.stdin.buffer.readline().decode().split()))\\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\\n\\nlcm = lambda x, y: (x * y) // math.gcd(x, y)\\n\\nMOD = 10 ** 9 + 7\\nMAX = float('inf')\\n\\n\\ndef main():\\n    if os.getenv(\"LOCAL\"):\\n        sys.stdin = open(\"input.txt\", \"r\")\\n\\n    N, M = il()\\n    A = [iss() for _ in range(N)]\\n    B = [iss() for _ in range(M)]\\n\\n    for i in range(N - M + 1):\\n        for j in range(N - M + 1):\\n            t = i\\n            for b in B:\\n                if A[t][j:j + M] == b:\\n                    t += 1\\n                else:\\n                    break\\n            else:\\n                print('Yes')\\n                exit()\\n    else:\\n        print('No')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "483", "substitutes": {}}
{"code": "L = int(input())\\nans = (L/3) ** 3\\nprint(ans)", "target": "159", "substitutes": {"L": ["LM", "D", "S", "CL", "LO", "Z", "LB", "LR", "NL", "left", "B", "T", "LS", "LI", "G", "IL", "LP", "EL", "SL", "LG", "Li", "I", "X", "C", "LL", "Lu", "V", "ML", "P", "LIN", "l", "DL", "length", "O", "H", "M", "F", "N", "LA"], "ans": ["lp", "ls", "NA", "aning", "ins", "lex", "ants", "long", "flags", "an", "anc", "man", " means", "LP", "tan", "anon", "sk", "na", "LAN", "plan", "ds", "nl", "can", "vals", "cons", "lines", "la", "AN", "atan", "aned", "leans", "lin", "ANS", "lan", "ann", "ns", "lang", "chan", "ani", "mean", "ln", "LA"]}}
{"code": "n,m = map(int, input().split())\\n\\ns=[]\\nfor i in range(m):\\n    s.append(list(map(int, input().split())))\\nif n==1:\\n    kaisuu_start=0\\n    kaisuu_stop=10\\nelif n==2:\\n    kaisuu_start=10\\n    kaisuu_stop=100\\nelif n==3:\\n    kaisuu_start=100\\n    kaisuu_stop=1000\\n    \\nfor suuzi in range(kaisuu_start,kaisuu_stop):\\n    hantei=True\\n    suuzi=str(suuzi)\\n    for gyou in range(m):\\n        if suuzi[s[gyou][0]-1]!=str(s[gyou][1]):\\n            hantei=False\\n            continue\\n    if hantei:\\n        print(suuzi)\\n        exit()\\n\\nprint(-1)", "target": "285", "substitutes": {"n": ["o", "cn", "k", "j", "c", "np", "nb", "a", "num", "t", "ni", "anon", "nw", "g", "en", "network", "nn", "un", "u", "size", "net", "f", "nt", "rn", "fn", "ns", "pn", "sn", "no", "nat", "z", "dn", "l", "v", "zn", "nc", "ln", "p", "nin", "ne", "N"], "m": ["o", "k", "x", "tm", "c", "d", "start", "num", "t", "range", "y", "mn", "time", "machine", "g", "dim", "h", "ms", "month", "cm", "mu", "f", "e", "b", "mi", "mm", "im", "w", "z", "dm", "v", "l", "r", "M", "p"], "s": ["states", "services", "ls", "o", "parts", "S", "ssl", "c", "d", "ins", "ses", "a", "ss", "opens", "sl", "t", "strings", "y", "g", "sa", "h", "ts", "ips", "sites", "south", "si", "u", "sets", "spec", "e", "f", "b", "ps", "ns", "ans", "es", "tests", "sb", "w", "params", "l", "v", "xs", "conf", "words", "r", "p", "seconds"], "i": ["ik", "o", "k", "j", "gi", "c", "ci", " I", " ii", "ie", "ind", "id", "y", "ip", "ine", "si", "iu", "f", "ti", "I", "im", "ai", "z", "ii", "ic", "li", "p"], "kaisuu_start": ["kaisuu_part", "kaisuu_id", "kaisuu_end", "kaiscu_part", "kaisu_stop", "kaisuuustart", "kaiscu_end", "kaiscu_id", "kaisu_start", "kaisuu_Start", "kaisu_end", "kaisu_Start", "kaisuuustop", "kaisuuublock", "kaisuu_block", "kaiscu_block", "kaiscu_stop", "kaisuuuend", "kaiscu_start"], "kaisuu_stop": ["kaisuu00delete", "kaisuu_length", "kaisuu_end", "kaisuu5end", "kaisuu00stop", "kaiscu_delete", "kaisuu5offset", "kaisu_stop", "kaisuu_offset", "kaiscu_port", "kaiscu_end", "kaisuu5stop", "kaisu_start", "kaisuu5start", "kaisuu00end", "kaisuu_delete", "kaisu_end", "kaisuu00start", "kaisuu_port", "kaisu_offset", "kaiscu_length", "kaiscu_stop", "kaiscu_start"], "suuzi": ["suzui", "suuzsi", "ruuxii", "suzyi", "suuyui", "suzii", "auujsi", "yuuzii", "suujdi", "suzyii", "suuxii", "suuxui", "suzdi", " suussio", "ruuxui", "suuzzli", "suussu", "suuyiu", "suuxu", " suussiu", "suussdi", "suussui", "suuzio", "suuzzsi", "suuyii", "suuxsi", "suuzdi", "suuxiu", "yuuzui", "suzyui", "yuujii", "suzi", "suuzui", "suuji", "suuzli", "yuujdi", "suujiu", "suuyi", "suuzii", "yuujui", " suuzio", "suuyu", "suuxli", "suuxio", "ruuzui", "suuzzi", "suuzziu", "auuzi", "suussii", " suuzu", "suujli", "ruuzi", "yuuji", "suujii", "ruuzii", " suussu", "ruuxsi", "yuuzi", "yuuzdi", "auuji", "suuziu", "suussio", "suujsi", "ruuzsi", "suuzu", "auuzli", "ruuxi", "suujui", "auuziu", "suzysi", "auuzsi", " suussi", "auujiu", "auujli", "suussi", "suuyio", "suussiu", "suusssi", " suuziu", "suuxi"], "hantei": ["hantinexi", " hanteai", "henteji", "hancyzi", "henteui", " hoeui", "hancyai", "hoeji", "hentei", " hantexi", " hanteui", "hanceui", "hancei", "hoeu", " hoeu", "hancyi", "henteu", " hanteji", "haiti", " hantinezi", " hantea", "hancea", " hoeji", "haita", "hantineui", " hancea", "hanceai", "hantaxi", "hantai", "hantineai", "hantea", " hoei", "hantineu", "hoeui", " hanceai", " hantinei", "hancyxi", " hantineai", " hantezi", " hanceui", "hantinezi", "hoei", " hanteu", "haitui", "hantexi", "hantineji", "hanteai", "haitai", "hanteu", "hantinei", "hantezi", "hantaai", " hancei", "hantazi", " hantinexi", "hanteui", "hantinea", "hanteji"], "gyou": ["ghoul", "gyoo", "giau", "gaeou", "gyoul", "you", "uyoul", "ygui", "ygou", "ghoo", "gyau", "phou", "youk", "kyu", "gioo", "ghou", "ygoo", "ghouk", "kyou", "ygu", "gaeouk", "pyui", "phoul", "gaeoul", "yoo", "phoo", "gyouk", "pyu", "giou", "phau", "pyou", "gaeoo", "kyui", "uyou", "pyoo", "uyau", "gyu", "gioul", "gyui", "uyoo", "kyoo", "youl"]}}
{"code": "def sep(Nf, Mf):\\n    mm = [[] for _ in range(9)]\\n    for m in range(len(Nf)):\\n        for i in range(9):\\n            if Nf[m] == i+1:\\n                mm[i].append(Mf[m])\\n    return mm\\n\\n\\ndef ssort(L, N, M):\\n    for i in range(len(N)-1):\\n        x = N[i+1:].index(min(N[i+1:])) + i + 1\\n        if N[i] > N[x]:\\n            L[i], L[x] = L[x], L[i]\\n            N[i], N[x] = N[x], N[i]\\n            M[i], M[x] = M[x], M[i]\\n\\n\\ndef bsort(L, N, M):\\n    for i in range(len(N)-1):\\n        for j in range(len(N)-1-i):\\n            if N[j] > N[j+1]:\\n                L[j], L[j+1] = L[j+1], L[j]\\n                N[j], N[j+1] = N[j+1], N[j]\\n                M[j], M[j+1] = M[j+1], M[j]\\n\\n\\nn = int(input())\\nL = list(input().split())\\nN = [int(i[1]) for i in L]\\nM = [i[0] for i in L]\\nmarks = ['S', 'H', 'C' ,'D']\\nLb, Nb, Mb = L[:], N[:], M[:]\\nbsort(Lb, Nb, Mb)\\nprint(' '.join(Lb))\\nif sep(N, M) == sep(Nb, Mb):\\n    print('Stable')\\nelse:\\n    print('Not stable')\\n\\nLs, Ns, Ms = L[:], N[:], M[:]\\nssort(Ls, Ns, Ms)\\nprint(' '.join(Ls))\\nif sep(N, M) == sep(Ns, Ms):\\n    print('Stable')\\nelse:\\n    print('Not stable')\\n", "target": "30", "substitutes": {"Nf": ["MNm", "MNd", "MNl", "Ld", "Km", "Nd", " Nc", "Nm", "Md", "Kf", "Nc", " Nm", "Lc", "Kd", "Nl", "Kl", " Nd", "Ml", "Mm", "MNf", "Lm", "Mc", "Lf", "Ll"], "Mf": ["Db", "Dfs", "Dd", "Memberb", "ManF", "Mp", "Nfs", "Mfs", "Nd", " Md", "Md", " MF", "Mand", "Memberd", "Df", "Np", "Memberf", "Manf", "Memberfs", " Mp", "NF", "Manp", "MF"], "mm": ["ma", "mini", "lim", "df", "mc", "mma", "mb", "tm", "nm", "ss", "int", "all", "mmm", "list", "man", "ph", "mon", "mn", "mem", "ms", "mx", "md", "ml", "cm", "nn", "multi", "mp", "em", "mu", "dd", "mi", "im", "mass", "pm", "MB", "MM", "MC", "params", "dm", "li", "Mi", "MP", "p", "km"], "_": ["k", "ac", " p", " time", "all", "num", "id", "g", "ms", "ix", "ip", "I", "am", "q", "im", "ai", "p"], "m": ["ma", "o", "wm", "mc", "c", "gm", "d", "a", "ind", "mr", "y", "mon", "mn", "g", "h", "ms", "ym", "md", "month", "cm", "me", "u", "mu", "e", "f", "b", "am", "mi", "my", "im", "pm", "module", "dm", "v", "l", "hm", "li", "p", "km"], "i": ["mini", "it", "iw", "xi", "c", "phi", "uli", "t", "bi", "ip", "multi", "eni", "iu", "f", "ti", "I", "mi", "ki", "z", "ih", "io", "p", "zi", "ji", "gi", "ci", "d", "a", "ori", "id", "y", "ix", "ig", "fi", "hi", "im", "ii", "li", "vi", "pi", "di", "uri", "yi", "ie", "int", "ind", "ini", "iq", "index", "u", "e", "qi", "l", "v", "ic", "ei", "o", "ri", "ui", "ni", "info", "ij", "ia", "si", "il", "mu", "b", "my", "ai"], "L": ["PL", "U", "UL", "LM", "D", "S", "CL", "LU", "R", "Pl", "E", "LB", "NL", "LR", "Line", "Local", "B", "Lo", "List", "T", "LS", "FL", "W", "J", "Long", "Y", "LI", "G", "IL", "LP", "EL", "Cl", "OL", "SL", "LE", "El", "BL", "Q", "LT", "I", "Li", "dL", "X", "C", "XL", "LL", "Lu", "V", "ML", "P", "LIN", "K", "l", "DL", "O", "H", "F", "LA"], "N": ["NA", "Man", "E", "NS", "B", "Mon", "W", "Ni", "NM", "AN", "I", "Mo", "K", "O", "North", "Config", "Node", "Net", "R", "NL", "NC", "NE", "Path", "Sn", "G", "IN", "Num", "SN", "Size", "Ne", "Code", "H", "Name", "Z", "ND", "D", "S", "CN", "New", "Data", "T", "All", "J", "A", "Wh", "Len", "NN", "Q", "Model", "Form", "X", "C", "Na", "V", "KN", "U", "Network", "Local", "Line", "Memory", "Y", "Part", "CNN", "NT", "No", "Number", "NG", "Lu", "One", "Me", "P", "OS", "F"], "M": ["U", "MO", "LM", "D", "S", "Mor", "R", "Man", "E", "B", "OM", "Mon", "T", "W", "J", "Y", "G", "AM", "Mass", "DM", "RM", "NM", "MD", "MS", "MN", "Q", "ME", "AN", "I", "X", "MI", "C", "MA", "V", "Me", "P", "MB", "EM", "Mo", "MM", "K", "SM", "MX", "O", "H", "MP", "F", "CM", "IM", "MF", "Z"], "x": ["pi", "xp", "xi", "px", "ci", "d", "io", "int", "ux", "ui", "id", "y", "tx", "key", "xa", "xxx", "ax", "h", "xt", "rx", "ix", "index", "fx", "ex", "xc", "u", "f", "dx", "e", "b", "X", "xx", "my", "code", "xf", "es", "wx", "im", "q", "w", "z", "v", "l", "ic", "xs", "p"], "j": ["el", "ji", "o", "js", "k", "c", "er", "d", "jc", "ie", "ind", "oj", "J", "s", "ui", "ch", "id", "y", "key", "dy", "g", "ij", "h", "bj", "ix", "job", "jl", "jo", "last", "br", "u", "em", "ja", "f", "je", "e", "jet", "b", "jj", "adj", "obj", "q", "im", "gh", "z", "pt", "v", "jp", "l", "ii", "li", "aj", "fr", "p", "uj", "ld"], "n": ["o", "c", "d", "NL", "nb", "num", "t", "y", "g", "en", "h", "nu", "f", "I", "b", "ns", "z", "l", "li", "ln", "p", "ne"], "marks": [" b", " sm", " E", " R", " Sh", " d", " p", "Mark", " ls", " marked", " Mark", " s", " marker", " cs", " st", " r", " Z", " e", " Se", " c", "mark", " t", " k", " P", " V", " mark", " cm", " sed"], "Lb": ["Ln", "Ndb", "Lup", "Bldb", "Msb", "Nsb", "LB", "Mp", "Blsb", "Mcb", "Lsb", "Blb", "NB", "Mdb", "Lub", "Mn", "Blcb", "Nn", "Lp", "Bs", "Bcb", "Np", "Ncb", "Lcb", "MB", "Ldb", "LuB", "Bb", "Bn", "Lus"], "Nb": ["nbb", "Mnb", "nb", "Ld", "ncb", "nd", "Vm", "Vb", "Nbase", "Vl", "Mcb", "Mbb", "Nd", "Nm", "Lens", "Vnb", "Md", "Lenb", "Pnb", "Lenbase", "Pb", "Lbb", "Nbb", "Nl", "Ncb", "Mbase", "Nnb", " Nbase", "Lenf", "Ml", "Mm", "Pl", "Pm", "Lcb"], "Mb": ["Db", "Dd", "Bl", " Mgb", " Mab", " Mlb", "Mwb", "Bab", "Nd", "Blb", " Md", "Dgb", "Nlb", "Mlb", "Nab", "Md", "Df", "Ngb", "Nwb", "Nl", "Dwb", "Dl", "Mgb", " Ml", " Mwb", "Ml", "Bb", "Mab"], "Ls": ["Lgs", "ls", "Fll", "Lls", " Lh", "Nh", "Nls", "Logp", "RLb", "Lh", "lh", "Logs", "Lns", " Lp", "Logns", "Logls", " Lgs", "Lp", "lgs", "Ngs", "lb", "Np", "RLs", "Nl", "Nns", "RLl", " Lns", "Flb", "Fls", " Lls", "Ll"], "Ns": ["ls", "Ws", "Net", "Vs", "NS", "NL", "Ds", "LS", "vs", "Cos", "Sn", "Es", "s", "Ni", "Wh", "Len", "NB", "Ul", "NM", "Names", "MS", "MN", "Os", "Bs", "WS", "Kin", "Els", "ns", "Ps", "Na", "Ne", "RN", "Lu", "Is", "Cs", "Syn", "Sk", "Mi"], "Ms": ["As", "LM", "Rs", "Maps", "Mos", "Em", "Mor", "Vs", "Mer", "Fs", "Man", "Us", "Ds", "Es", "Ni", "Words", "Len", "Ma", "ms", "MS", "Os", "Magn", "Els", "Ps", "Ne", "Lu", "MB", "Me", "Cs", "Mac", "Min", "Mr", "Mi", "Mid", "Men", "Mc", "Ts"]}}
{"code": "class union:\\n  def __init__(self, box):\\n    self.r = []\\n    for i in range(box):\\n      self.r.append(-1)\\n    \\n  def root(self, x):\\n    if self.r[x] < 0:\\n      return x\\n    self.r[x] = self.root(self.r[x])\\n    return self.r[x]\\n\\n  def add(self, a):\\n    a[0] -= 1\\n    a[1] -= 1\\n    a[0] = self.root(a[0])\\n    a[1] = self.root(a[1])\\n    if a[0] == a[1]:\\n      return False\\n    if self.r[a[0]] > self.r[a[1]]:\\n      a[0], a[1] = a[1], a[0]\\n    self.r[a[0]] += self.r[a[1]]\\n    self.r[a[1]] = a[0]\\n    return True\\n  \\n  def size(self, x):\\n    return -self.r[x]\\n\\nn, m = map(int, input().split())\\nuf = union(n)\\nans = 0\\nfor i in range(m):\\n  uf.add(list(map(int, input().split())))\\n\\nfor i in range(n):\\n  ans = max(ans, uf.size(i))\\nprint(ans)\\n", "target": "602", "substitutes": {"self": ["home", "work", "object", "c", "results", "raw", "wrapper", "dev", "per", "h", "tmp", "f", "end", "us", "load", "gh", "ref", "words", "p", "cl", "part", "k", "full", "_", "plus", "er", "ng", "ws", "only", "data", "sys", "ch", "client", "py", "error", "pp", "default", "max", "no", "gen", "wh", "block", "use", "manager", "ctx", "node", "event", "old", "app", "context", "game", "config", "world", "comp", "spec", "e", "func", "new", "wx", "es", "layer", "l", "patch", "form", "user", "case", "Self", "this", "bug", "pos", "view", "all", "cache", "on", "g", "ack", "force", "ok", "change", "parent", "co", "worker", "master", "host", "me", "mp", "parse", "other", "private", "peer", "q", "w", "shared", "bb", "now", "utils"], "box": ["loc", "mc", "input", "exp", "c", "ng", "boxing", "num", "array", "root", "weight", "id", "loop", "keep", "Box", "div", "cube", "dim", "h", "image", "rect", "co", "ox", "ip", "number", "BOX", "row", "comb", "zip", "boxes", "max", "shape", "q", "im", "w", "z", "draw", "order", "p", "form"], "r": ["rs", "o", "k", "tr", "c", "er", "R", "ar", "d", "ro", "re", "circle", "rh", "array", "range", "t", "rb", "root", "result", "mr", "rc", "rt", "g", "rg", "ir", "h", "rar", "pr", "ra", "row", "nr", "run", "ur", "br", "u", "e", "rl", "rr", "f", "b", "res", "rn", "l", "v", "right", "order", "ru", "p", "rank", "sr"], "i": ["pi", "di", "o", "it", "k", "xi", "j", "c", "ci", "d", "yi", "io", "ie", "int", "ind", "s", "ui", "ini", "ni", "bi", "id", "iq", "y", " j", "ib", "ix", "index", "ip", "si", "il", "u", "iu", "f", "ti", "I", "e", "b", "hi", "ai", "p", "qi", "v", "l", "ii", "li", "ei", "ih"], "x": ["k", "full", "xp", "xi", "px", "c", "j", "d", "ng", "xy", "ctx", "value", "int", "xb", "all", "ux", "true", "id", "y", "tx", "false", "xxx", "g", "xa", "yx", "ax", "h", "xt", "rx", "ix", "index", "ox", "fx", "null", "host", "ex", "xc", "u", "f", "e", "dx", "one", "X", "xx", "default", "none", "xf", "xes", "wx", "q", "w", "z", "v", "l", "cross", "xs", "p", "any"], "a": ["ma", "area", "auto", "o", "at", "ha", "k", "j", "c", "d", "ar", "ac", "ab", "data", "app", "pa", "action", "da", "an", "s", "array", "A", "y", "alpha", "api", "na", "qa", "sa", "aa", "la", "u", "va", "e", "f", "b", "am", "ad", "ca", "code", "ga", "ae", "aaa", "ba", "l", "ea", "aj", "v", "another", "p", "any", "au"], "n": ["o", "k", "j", "c", "d", "nb", "num", "an", "s", "t", "root", "y", "mn", "en", "h", "number", "u", "len", "net", "size", "e", "f", "b", "ns", "w", "z", "l", "v", "nc", "p", "N", "conn"], "m": ["o", "wm", "mc", "k", "j", "c", "d", "num", "s", "man", "y", "mn", "g", "ms", "ym", "cm", "u", "size", "f", "e", "b", "sm", "mm", "z", "dm", "l", "v", "hm", "M", "p", "bm"], "uf": ["df", "lf", "ul", "um", "cv", "au", "auc", "port", "img", "cb", "sofar", "col", "uc", "du", "aux", "af", "upp", "ff", "ub", "num", "buf", "fed", "raf", "fam", "fo", "uff", "gb", "cp", "ffff", "UF", "tf", "lv", "aff", "lb", "pub", "f", "buff", "sup", "soc", "buffer", "q", "lu", "cf", "now", "utils", "aus", "ums", "uffy", "fp"], "ans": ["offs", "rs", "ls", "cus", "nas", "ins", "anks", "ars", "ants", "amps", "ens", "an", "s", "anc", "man", "ops", " means", "ats", "asts", "cs", "ams", "anon", "sk", "na", "os", "anas", "ms", "ds", "ks", "les", "ana", "span", "can", "anes", "cons", "AN", "atan", "aned", "leans", "ANS", "ann", "lan", "ns", "ands", "es", "ions", "aces", "ays", "xs", "aus", "ons"]}}
{"code": "import fractions\\nn=int(input())\\na=list(map(int, input().split()))\\nans=a[0]\\nfor i in range(1,n):\\n    ans = ans * a[i] // fractions.gcd(ans, a[i])\\ntmp=0\\nfor j in range(n):\\n  tmp+=(ans-1)%a[j]\\nprint(tmp)", "target": "519", "substitutes": {"n": ["o", "cn", "k", "x", "c", "d", " N", "nb", " p", "s", "num", "t", "ni", "y", "nn", "nan", "span", "number", " c", "u", "net", "len", "f", "nt", " ni", "e", "b", "ns", "sn", "no", "w", "z", "l", "m", "r", "nc", "ln", "p", "N"], "a": ["ma", "area", "sta", "input", "x", "c", "aw", "ab", "ac", "aux", "mA", "args", "da", "an", "s", "array", "A", "fa", "y", "alpha", "sa", "ana", "span", "aa", "aura", "la", "va", "f", "e", "b", "am", "ad", "ca", "ga", "ai", "ae", "asa", "ba", "aaa", "ea", "aj", "ao", "m", "p", "au"], "ans": ["ls", "x", "nas", "ins", "ants", "ss", "amps", "int", "ens", "args", "an", "s", "anc", "A", "ops", "cs", "ians", "anon", "ents", "sk", "na", "os", "anas", "ds", "ks", "ana", "nan", "nn", "span", "can", "lines", "AN", "atan", "aned", "leans", "ania", "ANS", "oa", "anne", "ann", "lan", "ns", "shape", "sn", "no", "ani", "ai", "ano", "mean", "xs", "eps", "ln", "p", "aus", "ons"], "i": ["pi", "o", "k", "x", "xi", "c", "ci", "d", "io", "ie", "start", "int", "ind", "ini", "ui", "ni", "id", "y", "h", "ij", "ia", "index", "ip", "si", "u", "iu", "f", "I", "e", "b", "im", "ai", "z", "l", "v", "ii", "li", "m", "ih", "p"], "tmp": ["tp", "part", "extra", "Temp", "abb", "kk", "su", "ott", "sp", "np", "tc", "nb", "output", "data", "old", "vt", "int", "amp", "array", "t", "rb", "buf", "result", "ignore", "test", "alpha", "offset", "cp", "nn", "span", "beta", "pad", "fake", "mp", "buff", "obj", "adj", "stuff", "sup", "new", "sb", "emp", "aaa", "sam", "txt", "p", "temp", "bp"], "j": ["kj", "ji", "o", "js", "k", "x", "jc", "ie", "oj", "J", "ind", "ni", "y", "ij", "h", "bj", "job", "span", "jl", "ix", "jo", "ja", "e", "je", "obj", "adj", "jj", "f", "sup", "b", "q", "dj", "ani", "z", "v", "jp", "aj", "jam", "l", "ii", "m", "p", "uj", "ne"]}}
{"code": "n = int(input())\\na_l = [ int(input()) for _ in range(n)]\\n\\nl = []\\nr = []\\nl_max = 0\\nr_max = 0\\nfor i in range(n):\\n    l_max = max(l_max, a_l[i])\\n    r_max = max(r_max, a_l[-i-1])\\n    l.append(l_max)\\n    r.append(r_max)\\nfor i in range(n):\\n    if i == 0:\\n        t_l = 0\\n    else:\\n        t_l = l[i-1]\\n    if i == n-1:\\n        t_r = 0\\n    else:\\n        t_r = r[-i-2]\\n    print(max([t_l,t_r]))", "target": "484", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "a", "s", "num", "t", "ni", "y", "g", "min", "en", "h", "number", "u", "len", "f", "e", "nt", "max", "b", "ns", "pn", "no", "w", "z", "v", "m", "nc", "p", "ne", "N"], "a_l": ["atamsl", " a_L", "at_nl", "a_dl", " a_list", "at_ll", "aamsl", "atamsdl", "atamsnl", "a_nl", "at_l", "aamsdl", "a_ll", "a_b", "a_L", "aamsll", "a_ls", "a_list", " a_b", "aamsnl", " a_p", " a_r", "at_dl", "a_p", "atamsll", " a_ls", "a_r"], "_": ["x", " time", " f", " seq", " id", "len", "f", "p"], "l": ["el", "lp", "ls", "ol", "le", "x", "wl", "ul", "c", "left", "kl", "a", "lo", "fl", "ell", "sl", "ll", "t", "L", "g", "nl", "la", "il", "u", "f", "rl", "b", "pl", "dl", "lc", "v", "li", "m", "ln", "p"], "r": ["rs", "k", "x", "j", "c", "er", "R", "ar", "d", "re", "rh", "range", "rb", "t", "rf", "arr", "rt", "g", "rg", "ir", "h", "dr", "pr", "ur", "u", "nr", "rl", "e", "rr", "f", "b", "nor", "cr", "v", "m", "right", "ru", "fr", "p", "sr"], "l_max": [" l_scale", " l_1", "l_Max", "l_list", "l_id", " l2Max", "ln_comb", "ln_max", " l_diff", "l2scale", "l2Max", "l2id", "l_default", " l_Max", " l_id", "lallx", "l5rank", "ln_end", " l2scale", "l_1", "l_rank", " l_rank", "ln_default", "l_end", "lalllist", "l5Max", "l_x", "l_comb", " l_list", " l2id", "l51", " l2max", "l_scale", " l_x", "l2max", "l_diff", "lalldiff", "lallmax", "l5max"], "r_max": ["r_1", "rg5con", "r5con", " r_min", "r_MAX", "rg5cat", "rg_cat", "rg5max", "l_default", "rg_con", "l_MAX", "rg_max", "l_min", "r5cat", "l_co", " r_last", "r_last", "r_default", "l_1", "r_con", "r_co", "r5max", "r_cat", "r_min"], "i": ["mini", "pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", " I", "phi", "a", "oi", "ie", "int", "ind", "ini", "ui", "t", "ni", "bi", "y", "h", "ix", "index", "ip", "multi", "eni", "si", "u", "iu", "e", "ti", "I", "f", "b", "hi", "ai", "z", "p", "qi", "v", "ii", "lc", "li", "m", "ic", "io"], "t_l": ["t2ll", "t_ll", "t2el", "t__el", "p_b", "t_L", "t_n", "t__r", " t_ll", "tamll", "p_n", "t__ll", " t2ll", "a_ll", "t2r", "a_L", "p_p", "taml", "tamel", "t_p", "t_el", " t_el", " t2el", "p_l", " t2r", "t__l", "a_li", "tamr", " t2l", "t2l", "t_li", "t_b"], "t_r": ["t1p", "t5r", "t_rel", " t_p", "t67r", "f_r", "t67ar", "flat_ar", "t5l", "t5s", " t_ur", "t_cr", " t1ur", "f_l", "t67sr", "t_ar", "flat_r", "t67rel", "t1r", "f_cr", "t_p", "flat_rel", " t1b", "f_s", "t1ur", " t1p", "flat_sr", "t_s", "t_sr", " t1r", "t5cr", "t_b", "t1b", "t_ur", " t_b"]}}
{"code": "A,B = map(int,input().split())\\nprint(0 if A<B else 10)", "target": "414", "substitutes": {"A": ["U", "NA", "D", "S", "Java", "E", "Alpha", "a", "CA", "T", "W", "Y", "L", "Ma", "HA", "SA", "Ar", "I", "AA", "X", "Ang", "C", "MA", "V", "P", "K", "AB", "O", "H", "M", "AC", "F", "N", "LA"], "B": ["Two", " b", "D", "BF", "E", "LB", "BB", "T", "UB", "TB", "BE", "L", "G", "NB", "BA", "OB", "BI", "Bs", "QB", "WB", "I", "b", "X", "FB", "C", "V", "P", "K", "BC", "AB", "O", "H", "M", "F", "Beta", "N", "Z"]}}
{"code": "a, b, n = [int(x) for x in input().split()]\\ndef f(x):\\n  return a*x//b - a *(x//b)\\nprint(f(min(b - 1, n)))\\n", "target": "407", "substitutes": {"a": ["ma", "area", "c", "aw", "d", "ac", "ab", "mA", "da", "an", "A", "fa", "i", "y", "alpha", "xa", "na", "sa", "beta", "aa", "va", "e", "f", "ca", "ga", "ae", "w", "aaa", "ba", "z", "ea", "m", "p", " A"], "b": ["o", "k", "mb", "abb", "j", "c", "db", "d", "ob", "nb", "ab", "B", "num", "s", "rb", "A", "i", "y", "split", "bs", "body", "g", "boot", "fb", "h", "abc", "beta", "bin", "number", "wb", "lb", "f", "e", "base", "sb", "be", "w", "l", "v", "bb", "m", "r", "p", "count"], "n": ["o", "k", "j", "c", "d", "nb", "name", "B", "num", "t", "ni", "i", "y", "g", "nn", "number", "e", "f", "nt", "fn", "ns", "sn", "w", "z", "v", "l", "m", "bb", "r", "nc", "p", "ne", "N"], "x": ["k", "xp", "xi", "input", "j", "c", "d", "xy", "data", "ac", "int", "xb", "an", "num", "t", " xx", "xxxxxxxx", "i", "y", " X", "xxx", "xa", "val", "ax", "h", "xxxx", "xe", "rx", "ix", "index", "fx", "ex", "xc", "u", "e", "dx", "f", "X", "xx", "func", "xf", "wx", "w", "z", "v", "cross", "m", "xs", "php", "p"]}}
{"code": "c=[0]*5\\nfor i in range(3):\\n  a,b=map(int,input().split())\\n  c[a]+=1\\n  c[b]+=1\\nif 3 in c:\\n  print(\"NO\")\\nelse:\\n  print(\"YES\")", "target": "662", "substitutes": {"c": ["o", "k", "x", "cy", "ci", "d", "ac", "uc", "bc", "n", "s", "cc", "inc", "t", "cs", "ec", "ctrl", "y", "g", "con", "h", "abc", "ct", "cm", "dc", "vc", "cu", "u", "xc", "e", "f", "ca", "arc", "C", "unc", "z", "cr", "l", "v", "lc", "pc", "m", "r", "cd", "cf", "p", "count", "enc"], "i": ["k", "x", "j", "gi", "d", "col", " I", " ii", "ind", "n", "num", "id", "y", " il", "h", "ix", "index", "u", "f", "e", "I", "q", "z", "l", "p"], "a": ["x", "j", "aw", "d", "ar", "ab", "ac", "art", "int", "n", "da", "an", "s", "A", "y", "na", "g", "sa", "aa", "u", "e", "f", "ad", "ca", "ai", "ae", "w", "l", "aj", "p", "au"], "b": ["o", "k", "mb", "x", "j", "d", "ob", "ab", "B", "bd", "n", "s", "num", "bi", "y", "bs", "g", "h", "aa", "u", "lb", "e", "f", "sb", "w", "l", "v", "r", "bb", "emb", "p", "count"]}}
{"code": "A,B,X = map(int, input().split())\\nprint(\"YES\" if X-A<=B and A<=X else \"NO\")\\n", "target": "488", "substitutes": {"A": ["AR", "U", "D", "S", "E", "Alpha", "a", "CA", "T", "W", "IA", "Array", "Y", "AD", "L", "G", "AM", "Am", "Ab", "alpha", "AY", "SA", "An", "RA", "I", "AA", "C", "MA", "V", "P", "K", "AB", "AC", "M", "AW", "F", "N", "LA"], "B": ["U", "Bu", "D", "BF", "R", "E", "BB", "T", "UB", "W", "Y", "Az", "L", "G", "Ab", "Blue", "OB", "Q", "Bs", "DB", "WB", "I", "b", "Number", "C", "V", "P", "BC", "AB", "O", "M", "Bar", "F", "N", "Z"], "X": ["U", "D", "ZX", "Ax", "x", "CL", "R", "E", "XX", "T", "W", "Y", "L", "G", "DX", "AX", " x", "Ex", "Q", "C", "XL", "TX", "V", "P", "XP", "K", "MX", "XXX", "H", "M", "IX", "F", "AC", "N", "Z"]}}
{"code": "N, *SP = open(0).read().split()\\nsp = sorted((s, -int(p), i) for i, (s, p) in enumerate(zip(*[iter(SP)] * 2), 1))\\n[print(i) for _, _, i in sp]\\n", "target": "185", "substitutes": {"N": ["pi", "S", "np", "R", "NS", "nb", "B", "Ns", "pos", "n", "SN", " n", "PN", " S", "I", "ns", "C", "sn", "V", "init", "P", "NP", "O", "M"], "SP": ["SH", "S", "SPA", "SS", " Sp", "SK", "TP", "PF", "W", "Y", "DP", "SR", "LP", "SL", "IP", "RP", "GP", "PS", "PI", "AP", "Q", "SC", "pp", "X", "SW", "FP", "SF", "PP", "P", "K", "JP", "SM", "NP", "Sp", "BP", "MP", "M", "F", "SCP"], "sp": ["tp", " Sp", "spl", "esp", "data", "sl", "yp", "space", "split", "sk", "isp", "source", "span", "ip", "pr", "si", "mp", "pp", "spec", "bsp", "ps", "sm", "sh", "osp", "sv", "P", "jp", "Sp", "NP", "ap", "bp", "spe"], "s": ["ls", "tp", "o", "S", "k", "x", "c", "ss", "pos", "sl", "n", "t", "space", "os", "sa", "ip", "sf", "si", "u", "f", "e", "ps", "ns", "sn", "sb", "sh", "w", "sv", "v", "l", "r", "se"], "p": ["lp", "pi", "tp", "o", "pid", "x", "j", "op", "c", "np", "int", "pa", "n", "t", "y", "cp", "pr", "ip", "py", "dp", "pp", "e", "pre", "f", "ps", "pt", "P", "v", "l", "jp", "pc", "ap", "bp", "fp"], "i": ["pi", "it", "uri", "di", "k", "x", "xi", "j", "gi", "c", "ci", "d", "phi", "ri", "io", "int", "ind", "n", "ini", "t", "ni", "bi", "id", "iq", "key", "ij", "ib", "ix", "index", "ip", "si", "u", "iu", "pp", "f", "I", "ti", "e", "b", "mi", "ai", "P", "z", "qi", "v", "l", "ii", "m", "li"], "_": ["ik", "o", "k", "xi", "j", "x", " __", "op", "name", "ie", "__", "iso", "pos", "int", "ind", "J", "___", "id", "Index", "ix", "ow", "ip", "index", "iv", "Id", "pp", "e", "I", "obj", "q", "Sl", "P", "w", "v", "Obj"]}}
{"code": "from operator import mul\\nfrom functools import reduce\\nfrom collections import Counter \\nfrom itertools import accumulate\\n\\ndef comb(n, r):\\n    r = min(r, n - r)\\n    numer = reduce(mul, range(n, n - r, -1), 1)\\n    denom = reduce(mul, range(1, r + 1), 1)\\n    return numer // denom\\n\\nn,a,b = map(int, input().split())\\nv = list(map(int, input().split()))\\nc = Counter(v)\\nkeys = sorted(c.keys(), reverse=True)\\nacc = [0] + list(accumulate([c[k] for k in keys]))\\ncosts = [0] + list(accumulate([c[k]*k for k in keys]))\\n\\nd = []\\nfor lim in range(a,b+1):\\n    for i,k in enumerate(keys):\\n        if acc[i+1] >= lim:\\n            d.append((costs[i] + (lim - acc[i]) * k, lim, comb(c[k], lim - acc[i])))\\n            break\\ne = sorted([[x[0] / x[1],x[2]] for x in d], reverse=True)\\ncnt = 0\\nmx = e[0][0]\\ni =0\\nwhile i < len(e) and mx <= e[i][0]:\\n    cnt += e[i][1]\\n    i += 1\\n\\nprint('{:.8f}'.format(mx))\\nprint(cnt)\\n", "target": "345", "substitutes": {"n": ["o", "R", " N", "nb", "pos", "all", "num", "s", "t", "ni", "y", "min", "en", "h", " na", "nn", "un", "span", "nu", "number", "nr", "u", "net", "nt", "rn", "f", "max", "ns", " ni", "sn", "no", "w", "nor", "z", "cr", "l", " ng", "m", "nc", "ln", "p", "nin", "ne", "N"], "r": ["rs", "o", "err", "R", "ar", "ro", "re", "rh", "s", "range", "rb", "rf", "rt", "rg", "ir", "h", "row", "nr", "u", "br", "run", "rn", "f", "rr", "res", "rec", "q", "w", "nor", "z", "cr", "l", "m", "right", "ru", "order", "p", "sr"], "numer": ["Nummer", "ncum", " nummer", "Numer", "ncumber", " numin", "Numin", "num", "ncumer", "rnummer", "Num", " numeric", "nummer", "rnumer", "Numeric", "rnumber", "number", "rnumeric", " number", "numeric", "Number", " num", "numin", "ncumin"], "denom": ["nanum", "nanOM", "Denom", "denorm", " Denorm", "denum", "denOM", "denoms", " Denom", " denomin", "Denoms", " Denomin", "nanom", "DenOM", " denum", " denorm", "Denorm", " denOM", "nanomin", " Denoms", "Denomin", "denomin", "Denum", " denoms"], "a": ["o", "ak", "ac", "ab", "art", "da", "an", "s", "A", "y", "alpha", "api", "na", "sa", "ra", "aa", "u", "va", "f", "ad", "am", "ca", "ai", "w", "ae", "asa", "l", "aj", "p"], "b": ["o", "mb", "j", "nb", "ab", "B", "bis", "s", "rb", "t", "bot", "y", "bs", "fb", "h", "number", "wb", "lb", "f", "base", "sb", "w", "z", "ba", "l", "m", "p", "bp"], "v": ["o", "ve", "j", "cv", "uv", "vid", "vv", "vs", "s", "g", "val", "h", "lv", "vals", "iv", "u", "f", "values", "vd", "es", "V", "w", "sv", "counter", "l", "m", "p", "vi"], "c": ["o", "cn", "cy", "ci", "col", "ac", "uc", "s", "cc", "cs", "y", "ec", "g", "con", "h", "co", "ct", "cm", "dc", "cu", "u", "f", "code", "C", "q", "com", "w", "cr", "l", "lc", "cat", "m", "cf", "nc", "p", "cl", "count"], "keys": ["ports", "states", "jobs", "codes", "checks", "files", "ke", "maps", "events", "ins", "ky", "ac", "kl", "diff", "vs", "models", "args", "qs", "s", "rules", "cats", "strings", "cs", "y", "key", "breaks", "sections", "chains", "cells", "blocks", "rows", "ks", "ids", "lists", "vals", "orders", "names", "lines", "items", "planes", "frames", "ores", "f", "objects", "ns", "values", "links", "xes", "es", "q", "bys", "Keys", "classes", "groups", "versions", "xs", "types", "kes", "words", "cent", "ums", "rank", "members"], "acc": ["access", "sec", "ACC", "case", "mac", "exp", "occ", " accum", "account", "ak", "sum", "ac", "app", "uc", "cc", "inc", "cache", "fac", "config", "gain", "cats", "reg", "eff", "cmp", "circ", "alpha", "key", "Acc", "arr", "na", "map", "ax", "pack", "abc", "charge", "index", "dc", "erc", "comb", "seq", "cas", "agg", "att", "adj", "ad", "shape", "rec", "scan", "inf", "ga", "frac", "attr", "sc", "ace", "oc", "order", "asc", "enc"], "k": ["ik", "o", "loc", "mc", "ke", "work", "j", "kk", "ak", "ky", "ac", "kl", "ck", "s", "kick", "ek", "anc", "ch", "id", "y", "key", "cost", "sk", "kg", "g", "unk", "ack", "h", "ok", "self", "ks", "kid", "co", "uk", "ko", "kin", "u", "kil", "spec", "f", "max", "ki", "q", "w", "kw", "z", "K", "l", "m", "p", "kr", "km"], "costs": [" costings", "Costes", "colings", "cols", "costments", " costsps", " costes", " costss", "Costns", "costes", "costings", "Costps", " costns", "costations", "colments", "Costations", " costses", "costns", "Costs", "colations", "Costments", " costations", " costments", "costps", "Costings", " costps", " costsns"], "d": ["df", "di", "dom", "D", "dt", "dos", "j", "ded", "du", "nd", "da", "s", "t", "dy", "g", "dim", "h", "ds", "do", "dc", "u", "f", "dd", "dx", "ad", "dl", "q", "dict", "z", "l", "cd", "m", "dat", "p"], "lim": ["mini", "log", "loc", "case", "su", "exp", "marg", "um", "slice", "scale", "col", "wa", "lo", "uc", "int", "mod", "limits", "gl", "num", "range", "margin", "circ", "key", "alpha", "min", "mem", "dim", "url", "cell", "iter", "co", "beta", "comb", "zip", "seq", "lam", "spec", "mu", "max", "Lim", "mi", "mm", "limit", "im", "com", "w", "limited", "z", "lc", "l", "m", "li", "ru", "rum", "cl"], "i": ["pi", "di", "ji", "uri", "it", "o", "xi", "j", "gi", "ci", "yi", "ri", "oi", "ie", "ori", "cli", "int", "ind", "ui", "ini", "ni", "bi", "id", "y", "key", "ix", "index", "ip", "multi", "eni", "si", "u", "iu", "fi", "I", "ti", "mi", "hi", "ki", "im", "ai", "z", "p", "qi", "l", "ii", "lc", "li", "m", "ei", "io", "zi"], "e": ["el", "ze", "oe", "o", "eu", "element", "ve", "le", "er", "E", "de", "data", "ie", "s", "ce", "t", "ec", "y", "fe", "g", "en", "ue", "change", "u", "ele", "ee", "f", "end", "je", "one", "ed", "edge", "es", "ae", "be", "z", "p", "l", "ea", "m", "ace", "eve", "ei", "pe", "ne"], "x": ["o", "xp", "work", "j", "xy", "ac", "data", "int", "xb", "s", "t", "id", "y", "key", "on", "xxx", "g", "ax", "h", "sex", "index", "ex", "xc", "u", "f", "max", "code", "X", "xx", "xes", "wx", "q", "w", "z", "l", "ic", "cross", "m", "xs", "order", "p"], "cnt": ["mcat", "nrt", "uncrt", "uncnt", "mrt", "cno", "cmn", "ccount", "lcnn", " cnd", "lcnt", "nnt", " cno", " ccount", "nnd", " cmn", "lccount", "ncat", "Cno", "lcno", "kcat", "knd", " ccat", "cnd", "unccat", "cnn", "knt", "Cnn", "krt", "ccat", "mmn", "Cnt", " cnn", "Ccount", " crt", "mnt", "uncmn", "crt"], "mx": ["ma", "wm", "mc", "mb", "xp", "xi", "mos", "px", "mic", "mac", "fm", "cycle", "np", "vm", "xy", "yz", "nz", "mr", "y", "mag", "mn", "xml", "ax", "ms", "axy", "rx", "cp", "md", "ml", "cm", "py", "nr", "mu", "hop", "mega", "mi", "ns", "xx", "hn", "mm", "mis", "wx", "dj", "pm", "delay", "dm", "module", "avier", "cross", "MX", "m", "xs", "Mi", "dist", "bp", "km"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 7)\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nN = int(input())\\n\\n\\n# n\u306e\u7d04\u6570\u5217\u6319\\ndef divisor(n):\\n    ass = []\\n    for i in range(1, int(n**0.5)+1):\\n        if n % i == 0:\\n            ass.append(i)\\n            if i**2 == n:\\n                continue\\n            ass.append(n//i)\\n    return ass  # sort\u3055\u308c\u3066\u3044\u306a\u3044\\n\\n\\ndiv_n = divisor(N)\\ndiv_n1 = divisor(N - 1)\\n\\nans = []\\nfor d in div_n:\\n    if d == 1:\\n        continue\\n    n = N\\n    while n % d == 0:\\n        n //= d\\n\\n    if n % d == 1 or n == 1:\\n        ans.append(d)\\n\\nfor d in div_n1:\\n    if d == 1:\\n        continue\\n    if N % d == 0:\\n        nd = N // d\\n        if nd % d == 1 or nd % d == 0:\\n            ans.append(d)\\n    else:\\n        ans.append(d)\\n\\n\\nans = list(set(ans))\\n# print(ans)\\nprint(len(ans))\\n", "target": "462", "substitutes": {"read": ["use", "control", "input", "work", "open", "current", "reads", "raw", "data", "start", "allow", "update", "seek", "sleep", "get", "time", "connect", "write", "readable", "fill", "run", "send", "parse", "size", "default", "play", "end", "reading", "Read", "load", "insert", "scan", "each", "buffer", "new", "select", "content", "add", "READ", "length", "text", "exec", "count"], "readline": [" readpage", "writelines", "inputline", "writeline", "returnlines", "inputlines", "writepage", "readword", "writestring", "readinglines", "readingline", "returnpage", "returnword", "readingLine", "inputstring", "readstring", "writeword", "writeLine", " readword", "returnline", "readingstring", "readLine", "readpage", "inputLine"], "readlines": ["READbytes", "READspace", " readspace", "readablelines", "readingspace", "readinglines", "readingline", " readbytes", "READlines", "readableelines", "readableline", "readablebytes", "readelines", "READline", "readspace", "readbytes", "readingbytes", "readingelines", " readelines"], "N": ["S", "R", "E", "Skip", "NL", "B", "Ns", "T", "n", "A", "L", "NT", " n", "number", "IO", "I", "Number", "X", "NO", "C", "NR", "RN", "V", "P", "K", "M", "F", "Z"]}}
{"code": "N , M = (int(a) for a in input().split())\\nA = list(map(int,input().split()))\\nBC = [[int(a) for a in input().split()] for l in range(M)]\\nA =sorted(A)\\nBC = sorted(BC , key = lambda x: - x[1])\\ns = 0\\n\\nfor i in range(N*M) :\\n    if A[i] < BC[s][1] :\\n        A[i] = BC[s][1]\\n    else : break\\n    BC[s][0] -= 1\\n    if BC [-1][0] == 0 or i == N-1 :\\n        break\\n    if BC[s][0] == 0 :\\n        s += 1\\n\\nprint(sum(A))\\n\\n\\n\\n", "target": "711", "substitutes": {"N": ["U", "D", "S", "R", "NS", "E", "NE", "B", "Ns", "T", "n", "W", "J", "Y", "L", "G", "Num", "NT", "NM", " n", "Size", "MN", "Q", "AN", "I", "X", "C", "Na", "Ne", "V", "P", "K", "O", "H", "F", "Z"], "M": ["LM", "D", "S", "R", "E", "B", "T", "W", "J", "n", "Y", "L", "G", "MU", "DM", "NM", "MD", "MN", "Q", "I", "X", "C", "V", "P", "K", "MX", "m", "O", "H", "F", "CM", "Z"], "a": ["ma", "area", "auto", "k", "x", "c", "ar", "ab", "ac", "wa", "app", "aux", "af", "int", "action", "n", "mA", "an", "fa", "alpha", "na", "qa", "sa", "aa", "la", "ach", "va", "active", "f", "b", "am", "ca", "ga", "ai", "w", "ae", "ta", "ba", "ea", "ao", "m", "p", "arg"], "A": ["As", "Ac", "Ca", "NA", "ACC", "D", "S", "New", "Alpha", "B", "CA", "T", "W", "mA", "At", "Array", "Y", "Az", "AM", "ACA", "an", "Am", "L", "AD", "G", "AS", "alpha", "HA", "AI", "GA", "SA", "AU", "EA", "An", "TA", "AP", "Average", "AN", "Each", "I", "AA", "X", "App", "C", "The", "MA", "AST", "ai", "P", "API", "AF", "KA", "AB", "K", "AC", "AW", "LA"], "BC": ["RC", "SH", "ACC", "BS", "BF", "HC", "LB", "NC", "Com", "bc", "B", "BB", "GC", "BBC", "BE", "cc", "LC", "Cl", "UC", "BA", "HK", "BD", "IC", "JC", "Q", "BL", "WC", "GB", "WS", "SC", "ABC", "X", "C", "Sc", "FC", "LL", "CBC", "DC", "FF", "CC", "EC", "MC", "Code", "K", "PC", "KC", "CP", "AC", "CV", "TC", "VC", "AW", "Contract", "OC", "CL"], "l": ["el", " la", "k", "al", " L", "j", "c", "ci", "d", "ac", "lo", "n", "go", "all", "an", "L", "id", " il", "il", "u", "b", " ir", "ai", " lam", "li", " all", " al"], "s": ["states", "ls", "o", "parts", "js", "string", "sec", "S", "sync", "j", "c", "d", "ws", "ses", "sum", "sys", "ss", "n", "abs", "args", "ops", "t", "strings", "y", "sd", "g", "sa", "blocks", "ds", "ips", "span", "multi", "si", "u", "size", "sets", "spec", "f", "e", "sym", "b", "ps", "ns", "sup", "ans", "sn", "es", "sb", "q", "w", "z", "params", "v", "sg", "groups", "m", "r", "its", "conf", "p", "seconds"], "i": ["pi", "di", "it", "o", "k", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", " I", "phi", "ac", "io", "ie", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", " j", "index", "ip", " c", "si", "il", "u", "iu", "e", "ti", "I", "f", "b", "mi", "ai", "z", "p", "qi", "chi", "v", "ii", "li", "r", "m", "zi"]}}
{"code": "n = int(input())\\n\\nal = []\\nbl = []\\nfor i in range(n):\\n    a,b = [int(i) for i in input().split()]\\n    al.append(a)\\n    bl.append(b)\\n    \\nal = sorted(al)\\nbl = sorted(bl)\\n\\nmedian_a = al[n//2]if n % 2 else (al[n // 2] + al[n//2 - 1]) / 2 \\nmedian_b = bl[n//2]if n % 2 else (bl[n // 2] + bl[n//2 - 1]) / 2 \\n\\nif n % 2:\\n    print(int((median_b - median_a + 1)))\\nelse:\\n    print(int((median_b - median_a) * 2 + 1))", "target": "203", "substitutes": {"n": ["el", "o", "cn", "k", "x", "j", "c", "d", "ng", "yn", "all", "num", "non", "an", "t", "s", "ni", "y", "on", "na", "count", "g", "en", "network", "nn", "nan", "un", "nl", "can", "number", "u", "len", "net", "size", "f", "e", "nt", "adj", "fn", "ns", "pn", "none", "rn", "sn", "no", "w", "z", "dn", "l", "v", "m", "r", "nc", "ln", "p", "ne", "N", "conn"], "al": ["el", "mal", "o", "ol", "x", "isal", "ul", "au", "ass", "alt", "aw", "ar", "real", "gal", "ab", "local", "als", "ell", "af", "sl", "pal", "all", "ll", "alph", "an", "ali", "adv", "AL", "alpha", "g", "val", "sa", "wal", "aa", "Al", "alls", "la", "bal", "il", "u", "f", "e", "dal", "ad", "am", "pl", "aler", "ae", "w", "l", "v", "hal", "p", "letter"], "bl": ["el", "lp", "loc", "eb", "Bl", "wl", "pb", "d", "ob", "ab", "kl", "amb", "fl", "sl", "ble", "gl", "ll", "list", "syn", "block", "bs", "lab", "bel", "obl", "ib", "ml", "nl", "BL", "la", "il", "rel", "lb", "br", "blast", "f", "label", "pl", "dl", "sb", "abl", "z", "ba", "l", "las", "m", "ill", "lu", "p", "cl"], "i": ["pi", "di", "o", "ji", "uri", "x", "xi", "j", "c", "ci", "d", "yi", "ri", "io", "ie", "int", "ind", "ini", "ui", "ni", "bi", "id", "y", "ij", "ix", "index", "ip", "si", "u", "iu", "e", "I", "f", "ti", "ai", "chi", "qi", "l", "ii", "li", "ei", "m", "r", "p"], "a": ["ma", "area", "at", "x", "c", "aw", "ar", "d", "ac", "ab", "art", "af", "da", "an", "A", "fa", "sa", "aa", "la", "va", "f", "ad", "ca", "ai", "ae", "asa", "ba", "ea", "l", "aj", "p", "au"], "b": ["eb", "mb", "x", "pb", "c", "db", "d", "cb", "ob", "nb", "ab", "B", "xb", "s", "ben", "rb", "bur", "bs", "body", "bel", "fb", "lb", "e", "f", "base", "other", "sb", "ba", "l", "v", "r", "bb", "bf", "p"], "median_a": ["median2b", "medIAN_c", "median_bb", "medIAN_alpha", "median08b", "medianninga", "medianningbb", "median5an", "medrian_a", "median08aux", "median___sa", "median2alpha", "median_sa", "medrian_b", "medrian_bb", "median___a", "median_c", "median2a", "medIAN2a", "medianningb", "median5b", "medianningan", "medIAN2c", "median_aux", "medrian_sa", "median08a", "median5a", "median___b", "median_alpha", "median___aux", "medIAN_b", "medIAN2b", "median5bb", "medrian_an", "medIAN2alpha", "median2c", "median08sa", "medrian_aux", "median_an", "medIAN_a"], "median_b": ["median2b", "median_bb", "medrian_2", "median1f", "median__a", "mediana_c", "median_2", "medrian_a", "median1a", "median__bb", "medrian_b", "mediana_b", "median1c", "mediana_f", "median__b", "median_be", "medrian_bb", "median_c", "median2a", "medrian_be", "median1b", "medrian_ab", "median__ab", "median_f", "median2ab", "median_ab", "median2bb", "mediana_a"]}}
{"code": "# class UnionFind():\\n#     def __init__(self, n):\\n#         self.n = n\\n#         self.parents = [-1] * n\\n\\n#     def find(self, x):\\n#         if self.parents[x] < 0:\\n#             return x\\n#         else:\\n#             self.parents[x] = self.find(self.parents[x])\\n#             return self.parents[x]\\n\\n#     def union(self, x, y):\\n#         x = self.find(x)\\n#         y = self.find(y)\\n\\n#         if x == y:\\n#             return\\n\\n#         if self.parents[x] > self.parents[y]:\\n#             x, y = y, x\\n\\n#         self.parents[x] += self.parents[y]\\n#         self.parents[y] = x\\n\\n#     def size(self, x):\\n#         return -self.parents[self.find(x)]\\n\\n#     def same(self, x, y):\\n#         return self.find(x) == self.find(y)\\n\\n#     def members(self, x):\\n#         root = self.find(x)\\n#         return [i for i in range(self.n) if self.find(i) == root]\\n\\n#     def roots(self):\\n#         return [i for i, x in enumerate(self.parents) if x < 0]\\n\\n#     def group_count(self):\\n#         return len(self.roots())\\n\\n#     def all_group_members(self):\\n#         return {r: self.members(r) for r in self.roots()}\\n\\n#     def __str__(self):\\n#         return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\\n\\nclass UnionFind():\\n  par = []\\n  sizes = []\\n\\n  def __init__(self, N):\\n    self.par = [i for i in range(N)]\\n    self.sizes = [1 for _ in range(N)]\\n\\n  def root(self, x: int)-> int:\\n    if (self.par[x] == x):\\n      return x\\n    self.par[x] = self.root(self.par[x])\\n    return self.par[x]\\n\\n  def unite(self, x: int, y: int):\\n    rootX = self.root(x)\\n    rootY = self.root(y)\\n    if rootX == rootY:\\n      return\\n    self.par[rootX] = rootY\\n    self.sizes[rootY] += self.sizes[rootX]\\n\\n  def maxSize(self)-> int:\\n    return max(self.sizes)\\n\\ndef friends(N, As):\\n  uf = UnionFind(N)\\n  setAs = list(set(As))\\n  for val in setAs:\\n    uf.unite(val[0]-1, val[1]-1)\\n  # ans = 0\\n  ans = uf.maxSize()\\n  # for i in range(N):\\n  #   temp = uf.size(i)\\n  #   if ans < temp:\\n  #     ans = temp\\n  return ans\\n\\nif __name__ == \"__main__\":\\n  nm = list(map(int, input().split()))\\n  As =[tuple(map(int, input().split())) for _ in range(nm[1])]\\n  print(friends(nm[0], As))", "target": "602", "substitutes": {}}
{"code": "# coding: utf-8\\n# Your code here!\\nwhile(1):\\n    H,W=map(int,input().split(\" \"))\\n    if H==0 and W==0:\\n        break\\n    else:\\n        for i in range(H):\\n            for j in range(W):\\n                print(\"#\",end=\"\")\\n            print(\"\")\\n        print(\"\")\\n\\n\\n", "target": "296", "substitutes": {}}
{"code": "N = int(input())\\nW = list(map(int, input().split()))\\n\\nminw = sum(W)\\n\\nfor t in range(N):\\n    s1 = sum(W[:t])\\n    s2 = sum(W[t:])\\n    diff = abs(s1 - s2)\\n    minw = min(minw, diff)\\n\\nprint(minw)\\n", "target": "8", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "NC", "NE", "B", "Ns", "T", "n", "NH", "J", "Y", "L", "SN", "NB", "NT", "NM", "Size", "Q", "I", "X", "NO", "C", "Ne", "V", "OS", "P", "K", "O", "H", "M", "F", "Z"], "W": ["U", "GW", "TW", "D", "S", "BW", "Sw", "R", "E", "WF", "B", "T", "EW", "Y", "RAW", "A", "G", "L", "Wh", "Web", "Q", "WA", "WC", "WT", "WS", "WB", "X", "C", "V", "w", "P", "We", "K", "MW", "WAR", "WM", "Word", "O", "H", "M", "VW", "F", "WE", "Z"], "minw": ["minwa", "missw", "maxwa", "maxy", "misswe", " minwe", "smallwt", "smally", "Minwa", "sumw", "MINwig", "minwig", "maxW", "MINwe", "Minwt", "Minw", "sumW", "maxwt", "miniwa", "minW", "miniwt", "misswig", "miny", "miniw", "MINw", " minwt", "maxw", " miny", "sumwa", "smallwa", "sumy", " minwa", " minwig", "minwe", " minW", "smallw", "minwt"], "t": ["it", "type", "o", "dt", "tp", "qt", "tr", "j", "tu", "c", "d", "to", "tc", "col", "T", "int", "ot", "n", "s", "num", "i", "y", "test", "time", "rt", "ty", "g", "target", "xt", "ts", "tt", "ct", "tz", "tf", "tmp", "st", "tim", "f", "ti", "e", "nt", " ti", "pt", "q", "tn", "ta", "z", "v", "l", "te", "m", "r", "p", "temp"], "s1": ["d1", "pb", "p3", "db", "s81", " sb", "ss2", "d3", "d0", "p0", " s0", "ss81", "S1", "ss11", "S81", "s11", "p81", " s3", "ss1", "p2", "s0", "sb", "p11", "S11", "S2", "p1", "s3"], "s2": ["nsTwo", " s02", "c200", "s02", "pTwo", "p0", " s0", "s200", " stwo", " s200", "ns02", "stwo", "c2", "ns2", "ctwo", "ns0", "p02", "p2", "s0", "sTwo", " sTwo"], "diff": ["part", "distance", "d", "sum", "fail", "data", "dev", " Diff", "n", "adv", "progress", "range", "missing", "ignore", "alpha", "Diff", "split", "div", "min", "change", " differences", "error", "changed", "f", "adj", "none", "shift", " difference", "w", "frac", "ref", "l", "iff", "conf", "dist", "different", "mix"]}}
{"code": "N = int(input())\\ntannis = [1]\\n\\ni = 1\\nwhile 6**i <= N:\\n    tannis.append(6**i)\\n    i += 1\\n\\ni = 1\\nwhile 9**i <= N:\\n    tannis.append(9**i)\\n    i += 1\\n\\ndp = [float('inf') for _ in range(N+1)]\\ndp[0] = 0\\n\\nfor i in range(1, N+1):\\n    for t in tannis:\\n        if i-t >= 0:\\n            dp[i] = min(dp[i], dp[i-t]+1)\\n\\n#print(dp)\\nprint(dp[N])\\n", "target": "460", "substitutes": {"N": ["Node", "NA", "D", "S", "Network", "R", "NS", "E", "NC", "B", "Ns", "T", "n", "NH", "J", "Y", "Ni", "L", "Len", "Num", "NB", "NT", "NM", " n", "Size", "NN", "I", "Number", "X", "C", "Ne", "NG", "V", "P", "K", "O", "H", "M", "F", "Z"], "tannis": ["Tanners", "tnews", "tanners", "dummies", " tanners", "nannis", " tanni", "tours", "dnan", "danni", "nanni", " tours", "Tans", "Tnan", "Tannis", "tann", "ptanni", "tans", " tummies", "dannis", "tani", "dann", "dans", " tnan", "Tanni", "ptours", "tnan", "nnews", "Tani", "Tummies", "ptnews", " tnews", "tummies", " tani", "Tann", "nours", " tann", "dani", "tanni", " tans", "ptannis", "danners"], "i": ["mini", "it", "xi", "j", "c", "anti", "phi", "oi", "bi", "ip", "multi", "eni", "iu", "f", "ti", "I", "mi", "adi", "z", "m", "abi", "io", "p", "zi", "k", "x", "gi", "ci", "d", "a", "id", "y", "fi", "hi", "ii", "li", "pi", "di", "uri", "yi", "ie", "cli", "T", "int", "ind", "n", "ini", " j", "index", "iii", "u", "e", "nt", "inf", "chi", "qi", "l", "v", "ei", "o", "slice", "ri", " I", "ui", "ni", "info", "api", "si", "b", "ai"], "dp": ["df", "lp", "tp", "di", "dt", "pi", "pid", "par", "distance", "pb", "db", "dq", "sp", "np", "d", "port", "pd", " p", "data", "pair", "direction", "hp", "vp", "amp", "DP", "pkg", "ds", "dh", "cp", "dr", "dc", "ip", "density", " UDP", "dep", "pp", "address", "default", "imp", "ps", " DP", "proxy", "dl", " tcp", "dm", "params", "dn", "duration", "deb", "dist", "dat", "p", " df", "gp", "fp"], "_": ["x", " un", "int", " time", "n", "num", "g", "len", "f", "I"], "t": ["unit", "it", "o", "type", "dt", "k", "x", "j", "tu", "c", "d", "to", "tc", "a", "mult", "temp", "T", "int", "n", "wt", "s", "id", "y", "g", "h", "ts", "ct", "tz", "tf", "tt", "u", "ti", "f", "nt", "e", "b", "tree", "inf", "w", "ta", "z", "l", "v", "m", "p", "tn"]}}
{"code": "n = int(input())\\na = [int(i) for i in input().split()]\\n\\nc = 0\\n\\nfor i in range(1,n):\\n\tif a[i] == a[i-1]:\\n\t\ta[i] = 10001\\n\t\tc += 1\\n\\nprint(c)", "target": "493", "substitutes": {"n": ["o", "k", "x", "j", "np", "d", "nb", "an", "num", "t", "ni", "y", "na", "count", "nan", "span", "nu", "u", "len", "net", "f", "fn", "nt", "b", "ns", "sn", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "a": ["ma", "area", "o", "x", "input", "aw", "d", "ac", "data", "int", "args", "all", "an", "s", "array", "A", "missing", "y", "alpha", "na", "sa", "abc", "aa", "la", "u", "va", "active", "f", "e", "b", "am", "ad", "ca", "ans", "ga", "ai", "ae", "asa", "ba", "aaa", "l", "ea", "aj", "v", "m", "p", "count", "au"], "i": ["pi", "di", "ji", "o", "uri", "k", "x", "xi", "j", "gi", "ci", "d", "slice", "phi", "oi", "ri", "io", "ie", "start", "int", "ind", "s", "ui", "t", "ni", "bi", "id", "y", "key", "ix", "index", "line", "si", "u", "iu", "e", "f", "I", "ti", "b", "ai", "z", "chi", "qi", "l", "v", "ii", "m", "r", "li", "ei", "p", "zi"], "c": ["cur", "o", "mc", "cn", "k", "x", "cy", "ci", "d", "cycle", "col", "ac", "fc", "cc", "cache", "t", "ce", "cs", "y", "alpha", "g", "cp", "ct", "cu", "xc", "e", "f", "b", "code", "ca", "unc", "C", "arc", "cr", "l", "lc", "ic", "pc", "r", "cd", "cat", "nc", "p", "rc", "count"]}}
{"code": "S=input()\\nl=[]\\nn=[]\\nl.extend(S)\\na=set(l)\\nif len(a)==2:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "103", "substitutes": {"S": ["SE", "U", "SH", "D", "Sub", "SS", "R", "NS", "ss", "B", "Ns", "T", "Si", "F", "SI", "s", "A", "L", " s", "G", "Sa", "St", "SN", "sa", "SA", "si", "SC", "SU", "C", "SB", "V", "Sl", "P", "O", "H", "M", "SL", "N"], "l": ["ls", "o", "k", "ol", " L", "x", "j", "c", "d", "kl", "sl", "s", "ll", "list", "t", "L", "i", "y", "g", "nl", "la", "u", "f", "e", "b", "Lu", "dl", "z", "v", "lc", "m", "r", "li", "ln", "p"], "n": ["o", "k", "j", "c", "d", "NL", "nb", "Ns", "s", "t", "i", "y", "g", "f", "e", "b", "ns", "sn", "z", "v", "m", "r", "li", "ln", "p", "ne", "N"], "a": ["area", "o", "c", "ar", "ac", "wa", "ab", "data", "args", "ata", "an", "s", "array", "A", "fa", "i", "y", "alpha", "sa", "ana", "aa", "la", "va", "f", "e", "b", "ans", "w", "ae", "asa", "z", "aaa", "ea", "v", "m", "p"]}}
{"code": "import sys\\nS = input()\\nT = input()\\n\\nif not ( 1 <= len(S) <= 2*10**5 ): sys.exit()\\nif not ( len(S) == len(T) ): sys.exit()\\nif not ( S.islower() and T.islower() ): sys.exit()\\n\\ncount = 0\\nfor I in range(len(S)):\\n    if S[I] != T[I]:\\n        count += 1 \\nprint(count)", "target": "123", "substitutes": {"S": ["U", "SE", "SH", "D", "GS", "SAN", "ESS", "ASC", "SS", "R", "Sample", "E", "SK", "RS", "NS", "US", "B", "Ns", "TS", "OSS", "Si", "SI", "s", "Y", "Es", "A", "L", "G", "SR", "Source", "Sa", "SN", "AS", "INS", "SL", "ST", "SA", "DS", "SSL", "PS", "SC", "ITS", "CS", "Socket", "X", "SU", "C", "IS", "Su", "V", "Sl", "P", "Service", "O", "H", "M", "F", "FS", "N"], "T": ["U", "OT", "Ti", "TW", "D", "DT", "TN", "TO", "R", "E", "Total", "TP", "CT", "Test", "PO", "XT", "B", "TS", "TB", "AT", "TE", "Y", "t", "G", "L", "ET", "Taylor", "UT", "NT", "ST", "GT", "TA", "TR", "PT", "WT", "LT", "IT", "X", "AST", "TG", "TM", "TT", "TX", "V", "P", "RT", "TH", "O", "TF", "M", "TC", "N"], "count": ["log", "type", "c", "low", "current", "catch", "sum", "old", "name", "start", "int", "ind", "n", "race", "num", "list", "depth", "cache", "info", "i", "id", "loop", "test", "key", "total", "weight", "time", "check", "result", "force", "index", "number", "table", "error", "thread", "len", "size", "Count", "code", "base", "counter", "found", "length", "now", "order", "level", "call"], "I": ["FI", "U", "CI", "II", "KI", "D", "x", "xi", "j", "gi", "B", "ind", "URI", "J", "F", "SI", "Gi", "LI", "A", "L", "ZI", "IL", "i", "id", "Xi", "AI", "IP", "ip", "PI", "RI", "BI", "TI", "VI", "DI", "IO", "si", "Id", "Li", "X", "GI", "NI", "UI", " i", "HI", "IJ", "ai", "P", "ID", "O", "li", "p", "N", "Z"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\n\\ndef maximum_profit(profits):\\n    max_v = profits[1] - profits[0]\\n    min_v = profits[0]\\n\\n    for j in range(1, len(profits)):\\n        max_v = max(max_v, profits[j]-min_v)\\n        min_v = min(min_v, profits[j])\\n\\n    print(max_v)\\n\\n\\ndef to_int(v):\\n    return int(v)\\n\\n\\nif __name__ == '__main__':\\n    l = to_int(input())\\n    profits = [to_int(input()) for i in range(l)]\\n\\n    maximum_profit(profits)", "target": "689", "substitutes": {}}
{"code": "n=int(input())\\n\\nt = list(map(int,input().split()))\\n\\ncount = 0\\n\\nfor i in t:\\n    if i%2==1:\\n        count += 1\\nif count%2==1:\\n    print('NO')\\nelse:\\n    print('YES')\\n", "target": "645", "substitutes": {"n": ["o", "j", "c", "nb", "name", "ot", "s", "num", "ni", "g", "number", "nr", "net", " ni", "f", "nt", "e", "b", "ns", "init", "z", "l", "r", "p", "N"], "t": ["type", "o", "tp", "j", "c", "tc", "a", "diff", "T", "int", "wt", "s", "list", "tab", "y", "test", "total", "rt", "g", "ts", "tf", "tmp", " T", "u", "f", "e", "nt", "b", "ti", "tree", "q", "w", "ta", "z", "l", "v", "m", "p", "temp"], "count": ["note", "type", "c", "sum", "col", "start", "int", "ind", "all", "num", "list", "id", "weight", "test", "y", "total", "key", "index", "number", "size", "len", "f", "Count", "nt", "e", "b", "code", "limit", "counter", "z", "l", "found", "length", "p", "call"], "i": ["pi", "it", "type", "o", "k", "x", "j", "c", "gi", "ci", "d", "a", "start", "int", "ind", "s", "ni", "id", "y", "ib", "index", "ip", "iot", "si", "iu", "f", "ti", "I", "e", "b", " ti", "ai", "qi", "v", "l", "ii", "li", "ei", "m", "p"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 6)\\n\\nD,G=map(int,input().split())\\npc=[list(map(int,input().split())) for _ in range(D)]\\n\\ndef solve(bit):\\n  if bit >= (1<<D):\\n    return 1000\\n  p_sum=0\\n  num=0\\n  \\n  for i in range(D):\\n    if bit & (1<<i):\\n      p_sum += pc[i][1] + pc[i][0] * 100*(i+1)\\n      num += pc[i][0]\\n  if p_sum >= G:\\n    return min(num,solve(bit+1))\\n  else:\\n    for i in reversed(range(D)):\\n      if bit & 1<<i:\\n        continue\\n      for j in range(pc[i][0]):\\n        if p_sum >= G:\\n          break\\n        p_sum += 100*(i+1)\\n        num += 1\\n      else:\\n        return solve(bit+1)\\n    return min(num,solve(bit+1))\\n\\nprint(solve(0))", "target": "125", "substitutes": {"D": ["U", "DT", "S", "R", "d", "E", "LD", "Do", "Ds", "DIR", "B", "T", "DO", "J", "Y", "DA", "L", "DP", "Di", "DD", "DM", "DS", "MD", "Q", "DI", "DB", "I", "X", "C", "DF", "DC", "V", "P", "K", "DL", "O", "H", "M", "DH", "F", "DE", "N", "Z"], "G": ["U", "GW", "GR", "GD", "GS", "GN", "R", "E", "GG", "B", "IG", "GC", "GO", "W", "J", "GM", "Gi", "CG", "Y", "GE", "L", "GU", "Ga", "g", "GA", "GP", "GV", "GEN", "GB", "Q", "GH", "LG", "X", "Group", "C", "GI", "BG", "FG", "GF", "V", "P", "H", "M", "F", "N", "RG"], "pc": ["lp", "RC", "cus", "loc", "mc", "sync", "mac", "pb", "c", "ci", "point", "cb", "NC", "tc", "ac", "sys", "uc", "bc", "fc", "amps", "amp", "inc", "cache", "cc", "anc", "config", "cca", "cs", "ec", "proc", "project", "con", "gb", "ct", "cin", "dc", "can", "bin", "py", "xc", "cu", "pre", "toc", "func", "code", "arc", "pin", "icc", "FC", "DC", "pt", "lc", "sc", "PC", "cent", "nc", "oc", "p", "rc", "enc"], "_": ["k", "out", "x", " __", " time", " ip", "all", "id", "g", " seq", "f", "I"], "bit": ["unit", "oct", "hit", "type", "part", "it", "flag", "input", "op", "sin", "question", "feature", "bits", "bug", "section", "format", "int", "fix", "long", "option", "band", "bot", "id", "loop", "fact", "round", "BIT", "plugin", "component", "ion", "word", "version", "ct", "atom", "digit", "bin", "number", "quad", "error", "nit", "f", "Bit", "b", "pin", "feat", "no", "position", "tag", "layer", "butt", "cat", "comment", "slot", "byte", "block"], "p_sum": ["pplim", " p_fee", "p5num", "ps8min", "pacnum", "ps8sum", "ppsum", "p_count", "ps_lim", "p5average", " p_miss", "ps_sign", "p5cum", "ppmin", "pacaverage", " p_count", "p8sign", "ps8lim", "p_cum", "ps_min", " p_average", " p_min", "pacmin", "paccum", "p_fee", "paclim", "pacsign", "p_average", "pxmiss", "p_sign", "ppsign", "p_num", " p_cum", "pxnum", "p5sum", "p_miss", "p8lim", "pacsum", "p_lim", "p8min", "ps8sign", "pxsum", "ps_sum", "p_min", " p_num", "p8sum"], "num": ["unit", "loc", "dom", " NUM", "done", "um", "gi", "np", "om", "nm", "d", " Num", "node", "sum", "nb", "name", "du", "mom", "pos", "int", "hom", "n", "valid", "inc", "known", "gnu", "info", "Num", "id", " nu", "result", "split", "uni", "coord", "prefix", "count", "con", "dim", "na", "mn", "offset", "die", "nn", "index", "bin", "number", "nu", "umi", "multi", "norm", "u", "nom", "size", "len", "fn", "f", "b", "NUM", "no", "p", "text", "miss", "gen", "nc", "nam", "N"], "i": ["pi", "di", "it", "uri", "o", "k", "x", "xi", "axis", "c", "gi", "ci", "d", "yi", "phi", " I", "a", "io", "ie", "start", "int", "ind", "n", "all", "ini", "ui", "t", "bi", "id", "info", "y", "key", "loop", "site", "g", "h", "ix", "index", "ip", "multi", "eni", "iv", "si", "u", "iu", "f", "I", "e", "ti", "b", "my", "ai", "init", "z", "p", "qi", "l", "v", "ii", "lc", "li", "m"], "j": ["di", "ji", "k", "gi", "gu", "ci", "ie", "bc", "ind", "J", "bi", "ij", "isin", "ib", "ip", "jo", "iu", "f", "ti", "I", "b", "code", "q", "ai", "z", "ii", "li", "abi"]}}
{"code": "k,t=map(int,input().split())\\na=list(map(int,input().split()))\\nsm=sum(a)\\nn=1\\nfor i in a:\\n    if i>sm//2:\\n        n=i-(sm-i)\\n        break\\nprint(n-1)\\n", "target": "549", "substitutes": {"k": ["ik", "it", "o", "_", "x", "j", "c", "ky", "y", "key", "sk", "g", "ok", "ks", "e", "f", "ki", "q", "tk", "w", "kw", "z", "K", "v", "p", "kr", "km"], "t": ["o", "tp", "dt", "type", "tu", "tm", "c", "tc", "T", "s", "y", "ty", "h", "ts", "tt", "u", "f", "e", "ti", "q", "w", "z", "v", "te", "m", "r", "p", "temp"], "a": ["ma", "area", "sta", "x", " fa", "c", "d", "ama", "ab", "aux", "af", "mA", "action", "ata", "an", "s", "array", "A", "fa", "y", "alpha", "api", "na", "sa", "span", "aa", "va", "oa", "f", "e", "b", "am", "ad", "ca", "ans", "ga", "ai", "ae", "ta", "aaa", "z", "w", "ea", "ada", "eta", "m", "p", " A", "au"], "sm": ["mini", "sy", "j", "tm", "sp", "nm", " si", "sum", "ny", "s", "ni", "y", "sd", "dy", "sk", "mn", "sa", "ym", "md", "cm", "Sm", "sf", "sq", "si", "size", "em", "sym", "mi", "thin", "mm", "sn", "sb", "sh", "sv", "chi", "SM", "ii", "m", "sam", "sim", "km"], "n": ["o", "cn", "x", "j", "c", "d", "nb", "ny", "num", "s", "y", "mn", "na", "g", "count", "number", "nu", "u", "nt", "f", "e", "fn", "b", "ns", "w", "z", "l", "v", "m", "r", "spin", "nc", "p", "ne", "N"], "i": ["ik", "pi", "it", "o", "iw", "x", "xi", "j", "c", "d", "yi", "phi", " I", "int", "ind", "num", "ini", "ni", "bi", "id", "iq", "y", "alpha", "g", "h", "index", "ip", "si", "iu", "f", "ti", "I", "end", "b", "e", "mi", "im", "ai", "w", "z", "p", "v", "l", "ii", "m", "r", "li", "ih"]}}
{"code": "N, K = map(int, input().split())\\nif K == 0:\\n  r = N*N\\n  print(r)\\n  exit()\\nr = 0\\nfor b in range(K+1, N+1):\\n  r0 = r\\n  r += (N//b)*(b-K)\\n  r1 = r\\n  r += max(0, N+1-(N//b*b+K))\\n  #for a in range(N//b*b+K, N+1):\\n    #if a%b >= K:\\n  #  r += 1\\n  #print(b, r-r0, r1-r0, r-r1)\\nprint(r)\\n", "target": "671", "substitutes": {"N": ["U", "Node", "NA", "D", "k", "S", "Max", "R", "NS", "E", "NE", "NC", "B", "Ns", "T", "n", "W", "J", "Y", "A", "L", "G", "Num", "NB", "NT", "NM", " n", "Size", "MN", "No", "Q", "X", "C", "Ne", "Block", "RN", "V", "P", "KN", "O", "H", "M", "F", "Z"], "K": ["U", "KI", "KR", "D", "k", "IK", "S", "R", "SK", "E", "Ak", "B", "T", "KE", "n", "J", "W", "Y", "NK", "L", "G", "KK", "Q", "PK", "Band", "I", "X", "C", "Ne", " k", "V", "P", "Ke", "KN", "Sk", "KB", "KS", "O", "H", "M", "F", "CH", "Z"], "r": ["cur", "ner", "rs", "o", "k", "Rs", "err", " R", "rd", "c", "er", "R", "d", "ar", "n", "Rh", "rh", "mr", "rb", "range", "t", "result", "arr", "rt", "rg", "ir", "h", "dr", "lr", "pr", "error", "row", "radius", "ur", "nr", "u", "run", "br", "e", "f", "rr", "hr", "res", "rl", "max", "q", "w", "nor", "cr", "l", "fr", "m", "ru", "right", "p", "rc", "sr"], "b": ["o", "eb", "k", "mb", "x", "j", "c", "db", "d", "ob", "nb", "ab", "a", "B", "bc", "BB", "bd", "bound", "n", "F", "num", "rb", "bi", "i", "y", "NB", "bs", "body", "boot", "h", "bin", "batch", "wb", "br", "lb", "u", "f", "e", "base", "C", " B", "sb", "w", "z", "l", "v", "bb", "bf", "m", "nc", "M", "p", "bp", "block"], "r0": ["srr", " r50", "r50", " rr", "R0", "R1", "sr0", "sr1", "sr50", "R50", "rr", "Rr"], "r1": ["ar0", "irOne", "ir0", "ar1", " rOne", "rOne", "ir2", " r2", "arOne", "r2", "ir1", "ar2"]}}
{"code": "from collections import defaultdict,deque\\nimport math\\ndef main():\\n    n,h=map(int, input().split())\\n    ab = [list(map(int, input().split())) for i in range(n)]\\n    tmp = max([int(i[0]) for i in ab])\\n    bs = [int(i[1]) for i in ab]+[0]\\n    bs.sort(reverse = True)\\n    i = 0\\n    res = 0\\n    for i in bs:\\n        if i>=tmp:\\n            res+=1\\n            h-=i\\n            if(h<=0):\\n                break\\n        else:\\n            res += math.ceil(h/tmp)\\n            break\\n\\n    print(res)\\n\\n\\n\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "205", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "num", "s", "t", "y", "count", "u", "net", "f", "fn", "e", "nt", "b", "ns", "q", "w", "z", "v", "l", "m", "r", "nc", "p", "N"], "h": ["pi", "ha", "oh", "c", "d", "phi", "bh", "temp", "hp", "rh", "t", "ch", "y", "ph", "body", "g", "hh", "ib", "header", "u", "f", "e", "hr", "b", "hi", "q", "sh", "w", "z", "v", "l", "hm", "m", "r", "H", "ih", "p", "hs", "cl"], "ab": [" b", "eb", "abb", "c", "ob", "cb", "nb", "ac", "a", "app", "bc", "af", "abs", "ub", "array", "rb", " ib", "tab", "bi", "arr", "abe", "Ab", "lab", "hab", "fb", "abc", "ib", "fab", " arr", "bl", "aa", "br", "lb", "f", "b", "base", "ai", "abl", "AB", "bb", "abi", "aps"], "i": ["pi", "di", "it", "o", "iw", "k", "x", "xi", "j", "input", "c", "gi", "gu", "ci", "phi", "oi", "a", "ie", "ori", "start", "int", "ind", "ui", "ini", "t", "ni", "bi", "id", "y", "info", "api", "ij", "ib", "index", "ip", "si", "u", "iu", "f", "ti", "I", "e", "b", "hi", "inf", "ai", "z", "p", "qi", "chi", "l", "v", "ii", "li", "r", "abi", "ih", "io", "temp", "zi"], "tmp": ["pi", "tp", "abb", "bt", "j", "kk", "np", "cb", "nb", "ob", "bh", "a", "rm", "ff", "vt", "rb", "t", "buf", "bi", "tab", "stop", "api", "fb", "hh", "abc", "ib", "cp", "tt", "ffff", "next", "treatment", "mp", "pp", "pre", "nt", "obj", "buff", "b", "sup", "sb", "bps", "obb", "bb", "bf", "prev", "p", "temp", "bp", "count"], "bs": ["ls", " b", "cycles", "js", "abb", "BS", "ins", "bits", "nb", "bh", "bc", "vs", "obs", "bis", "abs", "qs", "s", "ops", "ints", "bi", "bas", "outs", "cs", "asts", "cases", "os", "breaks", "fb", "abc", "blocks", "ms", "ib", "bl", "vals", "lines", "b", "ps", "ns", "base", "ans", "bps", "ubs", "ba", "bb", "its", "bles", "aps"], "res": ["rs", "rest", "err", "resolution", "x", "our", "results", "ras", "rap", "ins", "runs", "real", "int", "re", "rh", "ours", "rez", "reg", "result", "Res", "id", "arr", "resh", "details", "os", "breaks", "rem", "blocks", "pres", "rows", "ms", "ret", "rx", "rep", "rys", "rup", "obj", "hr", "ps", "rev", "resp", "rec", "gr", "es", "q", "powers", "r", "prev", "p", "req", "rc"]}}
{"code": "n, k, c = map(int, input().split())\\ns = input()\\n\\nl = [0 for i in range(k+1)]\\nr = [0 for i in range(k+1)]\\n\\ncnt = 0\\nkaime = 1\\nfor i in range(n):\\n    if kaime > k: break\\n    if cnt > 0:\\n        cnt -= 1\\n    else:\\n        if s[i] == 'o':\\n            l[kaime] = i\\n            kaime += 1\\n            cnt = c\\n\\ncnt = 0\\nkaime = k\\nfor j in range(n):\\n    i = n-1 - j\\n    if kaime < 1: break\\n    if cnt > 0:\\n        cnt -= 1\\n    else:\\n        if s[i] == 'o':\\n            r[kaime] = i\\n            kaime -= 1\\n            cnt = c\\n\\nfor i in range(1, k+1):\\n    if l[i] == r[i]:\\n        print(l[i]+1)", "target": "647", "substitutes": {"n": ["o", "cn", "x", "np", "d", "nb", "num", "t", "y", "h", "nn", "u", "size", "net", "f", "e", "nt", "b", "ns", "sn", "w", "z", "v", "m", "nc", "p", "ne", "N"], "k": ["o", "kn", "ke", "x", "kk", "d", "mk", "kick", "y", "sk", "g", "h", "ok", "ks", "dk", "ko", "u", "size", "f", "e", "b", "q", "w", "kw", "z", "K", "v", "m", "p", "km", "N", "ku"], "c": ["mc", "x", "ci", "d", "cycle", "col", "ac", "bc", "cc", "ce", "t", "ch", "cs", "y", "g", "con", "h", "xc", "u", "size", "cu", "f", "e", "max", "toc", "b", "unc", "C", "rec", "q", "w", "z", "cr", "v", "lc", "sc", "pc", "m", "nc", "p", "count", "enc"], "s": ["rs", "ls", "o", "states", "S", "ings", "ssl", "x", "ses", "a", "ss", "als", "sl", "ops", "t", "strings", "cs", "y", "g", "os", "h", "gs", "si", "u", "sets", "f", "e", "sym", "b", "ps", "ns", "ans", "es", "sb", "w", "z", "v", "sc", "m", "p"], "l": ["el", "lp", "ls", "o", "ol", "al", "x", "le", "d", "kl", "a", "lo", "sl", "ll", "t", "L", "y", "g", "h", "nl", "lr", "la", "il", "u", "e", "f", "rl", "b", "dl", "w", "z", "v", "lc", "m", "lu", "li", "ln", "p"], "i": ["pi", "it", "ji", "o", "di", "uri", "x", "xi", "gi", "ci", "d", "yi", "oi", "phi", "ri", "a", "ie", "cli", "int", "ui", "ini", "t", "ni", "bi", "id", "iq", "y", "ij", "ix", "index", "ip", "source", "eni", "si", "iii", "u", "iu", "fi", "e", "ti", "I", "f", "b", "im", "ai", "z", "chi", "qi", "p", "v", "ii", "ic", "li", "ei", "m", "io", "zi"], "r": ["rs", "o", "err", "er", "R", "d", "ar", "ro", "re", "rh", "t", "rb", "y", "g", "rg", "ir", "h", "rar", "lr", "pr", "rw", "ur", "u", "br", "nr", "e", "f", "rl", "b", "w", "z", "v", "m", "fr", "ru", "p", "rc", "sr"], "cnt": ["ancnc", "ncnt", "Cnd", "lcne", "cannot", "ncnc", "lcannot", "CNT", "cno", "uccount", "dcnn", "xcnt", "xcnn", "xcannot", "ucnc", "ncct", " cne", "ccount", " cnd", "Cnc", "lcnt", " cno", " ccount", "ncount", "dcnd", "cpty", "dcpty", "lcNT", "lcrt", "Cno", "ancrt", "cne", "dcno", "ancne", "cnd", "cnn", " cannot", "dcct", "dcnt", "ucnt", "cnc", "lcct", "Cnt", "cct", "ucct", "Count", "cNT", "xcpty", "fnt", " cnc", " cpty", "Cct", " count", " cnn", "Ccount", "lcnc", " crt", "fnc", "fannot", "fct", " cct", "crt", "dcannot", "ancnt", " cNT", "count"], "kaime": ["maimes", "kaize", "vaime", "yaime", "kaimes", "gaize", "yaile", "yaise", "ekaile", "gaile", "vaimer", "maure", "haise", "kaIME", "saize", "laime", "yaitime", "qaise", " kaide", "maide", "saime", "laimes", "qaimen", "caile", " kaure", "gaime", "haile", "laize", "vaency", "chaimes", "caime", "saIME", "zaimer", "kaipe", "maime", "akaimes", "qaime", "kaitime", "yaize", "laile", "laitime", "chaise", "kiime", "ekaise", "caide", "yaimes", "kiiment", "kaency", "maIME", "kaile", "akaIME", "saile", "zaency", "akaize", "kiency", "ekaipe", " kaile", "yaimen", "haipe", "kaide", "kaise", "akaile", "kaimer", "vaiment", "akaitime", "kaimen", "ekaime", "haime", "kiimer", "gaIME", "laise", "zaime", "qaize", "maile", "yaIME", "maitime", "akaimen", "akaime", "chaitime", "chaime", "caure", "zaiment", "kaiment", "akaise", "kaure", "akaipe"], "j": ["o", "ji", "x", "d", "a", "ie", "int", "J", "range", "ch", "y", "g", "h", "u", "iu", "ja", "e", "I", "f", "max", "b", "end", "im", "q", "z", "v", "jp", "length", "m", "p"]}}
{"code": "n,m = map(int,input().split())\\nif(n%2==1):\\n    for i in range(1,m+1):\\n        print(' '.join(map(str,[i,n+1-i])))\\n    exit()\\n\\nm1,m2 = (m+1)//2 ,m//2\\nsum1 = 1 + n//2\\nsum2 = (n//2+1) + (n-1)\\nfor i in range(m1):\\n    print(' '.join(map(str,[1+i,n//2 -i])))\\nfor i in range(m2):\\n    print(' '.join(map(str,[n//2+1+i,n-1-i])))", "target": "761", "substitutes": {"n": ["pi", "o", "cn", "k", "x", "j", "c", "d", "nm", "nb", "name", "a", "s", "an", "num", "t", "ni", "y", "mn", "on", "g", "en", "h", "network", "nn", "un", "number", "nu", "u", "net", "size", "e", "f", "nt", "b", "ns", "pn", "sn", "no", "q", "w", "z", "dn", "l", "v", "ii", "r", "nc", "ln", "p", "M", "ne", "N"], "m": ["o", "mc", "k", "x", "j", "c", "d", "nm", "s", "an", "man", "y", "mn", "g", "dim", "h", "ms", "ym", "md", "cm", "mo", "u", "em", "e", "f", "mu", "b", "am", "mi", "sm", "mm", "im", "w", "pm", "z", "dm", "l", "v", "ii", "r", "M", "p", "N"], "i": ["mini", "pi", "di", "o", "ji", "x", "xi", "j", "c", "ci", "d", "yi", "ri", "phi", "a", "ie", "int", "ind", "ini", "ui", "t", "ni", "bi", "id", "y", "ir", "ix", "index", "line", "ip", "eni", "si", "u", "iu", "fi", "e", "I", "ti", "f", "b", "mi", "im", "ai", "z", "p", "qi", "l", "v", "ii", "li", "ei", "r", "io", "vi", "zi"], "m1": ["m6", "f1", "f01", " mone", " m6", "fone", "v2", "pone", "nfirst", "dm2", "f6", "p01", "m01", "vfirst", " m01", "n2", "dm01", "v1", "n01", "dm1", "mone", "p6", "dmfirst", "v01", "n1", "p1", "mfirst"], "m2": ["m6", " m6", "n0", "M2", "i6", " m12", "M4", "n12", " m4", "p0", "ntwo", "ptwo", " m0", "mtwo", "p12", "i4", "n2", "M6", "p2", "i2", "m0", "m4", "m12", " mtwo"], "sum1": ["sum3", "mean1", "Sum2", "mean3", "Sum1", " sum3", "mean2", "Sum3"], "sum2": ["mean0", "mean1", "sum0", "Sum2", "sum4", "Sum1", " sum0", "mean4", "mean2", "Sum0", "Sum4", " sum4"]}}
{"code": "X = int(input())\\nans = X//500 * 1000\\nX %= 500\\nans += X//5 * 5\\nprint(ans)\\n", "target": "599", "substitutes": {"X": ["CI", "D", "S", "Width", "x", "px", "XX", "Y", "A", "L", " x", "HTTP", "MAX", "IP", "PI", "ES", "Pixel", "Q", "AN", "ANS", "Length", "I", "C", "PE", "XL", "TX", "V", "ML", "P", "XP", "K", "ID", "CP", "CC", "FF", "PC", "MX", "XXX", "xs", "M", "H", "F", "IX", "CE", "N", "Z"], "ans": ["ls", "x", " answers", "ras", "ants", "Ns", "amps", "ens", "an", "anc", "A", "man", " means", " spans", "ents", "anon", "sk", "na", "plan", "anas", "nan", "An", "ana", "can", "anes", " sins", "cons", " signs", "AN", "aned", "leans", "ANS", "activation", "ann", "lan", "ns", "scan", "chan", "works", "ani", "aces", "ays", " scans", "cross", "mean", "xs", "eps", "ln", "ons", " ads"]}}
{"code": "k = int(input())\\nstr = \"ACL\" * k\\nprint(str)", "target": "533", "substitutes": {"k": ["ik", "o", "ke", "x", "kk", "_", "j", "c", "ak", "n", "mk", "ck", "ek", "id", "key", "sk", "check", "ok", "ks", "uk", "kid", "u", "ask", "e", "q", "tk", "kw", "K", "v", "r", "p", "kr"], "str": ["ner", "string", "err", "input", "tr", "exp", "j", "c", "wr", "ar", "kl", "temp", "int", "n", "i", "arr", "key", "ok", "st", "strip", "char", "br", "Str", "spec", "f", "obj", "hr", "code", "stri", "kind", "z", "lc", "STR", "r", "text", "exec", "kr", "cl", "star"]}}
{"code": "import functools\\n\\nn = int(input())\\nV = sorted(map(int, input().split()))\\nans = functools.reduce(lambda x, y: (x + y) / 2, V)\\nprint(ans)", "target": "747", "substitutes": {"n": ["S", " vi", " ants", " fn", " VS", " N", "s", " Var", " SN", " span", " s", " var", " spans", " _", " ND", " AN", " variants", " vs", " Vi", "AN", " Ans", "ANS", " number", " Nav", "v", " Vs", " SV", "N"], "V": ["U", "D", "S", "VO", "Vs", "R", "NV", "T", "Vector", "J", "W", "Y", "A", "L", "VD", "G", "Vi", "VB", "UV", "GV", "VI", "Q", "Values", "I", "X", "VA", "C", "P", "VM", "K", "CV", "v", "VT", "M", "VW", "F", "N", "VS"], "ans": ["Ann", "ANN", "anus", "san", "aning", "nas", "ins", "ants", "ens", "an", "anc", " means", "ians", "anon", "ents", "na", "anas", "gan", "ks", "nan", "ana", "anes", "can", "AN", "atan", "aned", " Ans", "leans", "ANS", "ann", "lan", "ns", "scan", "ani", "aus", "ons"]}}
{"code": "N = int(input())\\ns = input()\\nt = input()\\n\\nans = N*2\\nfor n in range(N):\\n    if s[n:] == t[:N-n]:\\n        ans -= len(s[n:])\\n        break\\n        \\nprint(ans)", "target": "693", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "NE", "B", "Ns", "T", "Sn", "Y", "Ni", "L", "G", "Len", "Num", "NT", "Size", "NN", "Q", "Length", "I", "Number", "X", "ns", "C", "Na", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "s": ["states", "ls", "o", "parts", "services", "S", "c", "sp", "d", "ins", "ses", "a", "ss", "T", "abs", "qs", "ats", "strings", "cs", "i", "g", "os", "ds", "ts", "ks", "tes", "gs", "south", "si", "u", "sets", "letters", "e", "f", "b", "ps", "ns", "es", "tests", "sb", "sers", "w", "l", "v", "xs", "types", "p"], "t": ["tp", "o", "at", "out", "x", "j", "tu", "c", "d", "a", "T", "i", "y", "test", "g", "ts", "tt", "tf", " T", "u", "f", "e", "b", "w", "ta", "z", "tn", "v", "l", "m", "p", "temp"], "ans": ["offs", "ls", "S", "anus", "aning", "nas", "ras", "a", "ars", "ants", "atten", "Ns", "ens", "args", "an", "anc", "A", "ats", "cs", "ents", "anon", "sk", "annot", "na", "os", "anas", "ds", "nan", "An", "nn", "ana", "can", "anes", "span", "AN", "atan", "aned", "anne", "nos", "ANS", "leans", "ann", "lan", "ns", "scan", "Na", "errors", "ani", "ano", "annels", "mean", "eps", "aus", "ons"], "n": ["o", "cn", "k", "x", "j", "c", "nb", "node", "a", "ind", "all", "an", "num", "ni", "i", "y", "na", "min", "network", "nn", "span", "un", "nl", "nu", "u", "len", "net", "nt", "f", "e", "adj", "b", "ns", "pn", "none", "sn", "no", "w", "nat", "z", "l", "v", "m", "nc", "p", "ne", "conn"]}}
{"code": "from math import ceil\\ndef f(x,hp):\\n  hp=[hh-(b*x) for hh in hp]\\n  c=0\\n  for p in hp:\\n    if p<=0:continue\\n    c+=ceil(p/(a-b))\\n  return c<=x\\n\\nn,a,b=map(int,input().split())\\nh=[int(input()) for i in range(n)]\\nng=0\\nok=10**9\\nwhile ok-ng>1:\\n  mid=(ok+ng)//2\\n  if f(mid,h):\\n    ok=mid\\n  else:\\n    ng=mid\\nprint(ok)\\n\\n\\n\\n\\n", "target": "51", "substitutes": {"x": ["xp", "xi", "px", "input", "d", "xy", "int", "num", "t", "y", "ph", "python", "xxx", "g", "ax", "rx", "ix", "index", "ex", "xc", "u", "pp", "f", "e", "max", "X", "xx", "xf", "q", "w", "z", "v", "cross", "l", "m", "xs", "php"], "hp": ["wp", "lp", "pi", "tp", "phys", "xp", "px", "np", "ctx", "ht", "hap", "HP", "pa", "bp", "hat", "ph", "phy", "mph", "cp", "pha", " xp", "ip", "py", "dp", "pp", "hop", "rpm", "padding", "ps", "pm", "jp", "hm", "pc", "php", "cpp", "gp", "fp"], "hh": ["hl", "ha", "xp", "kk", "oh", "hw", "ht", "bh", "kh", "ff", "ww", "HH", "cc", "ph", "mph", "pha", "hhh", "hhhh", "xc", "pp", "hr", "hn", "hi", "qq", "mm", "gh", "uh", "hm", "bb", "php", "H", "ih", "hs", "bp"], "c": ["o", "mc", "k", "ci", "d", "cycle", "ac", "bc", "fc", "cc", "ce", "cs", "ec", "y", "g", "cor", "abc", "ct", "cm", "dc", "cu", "xc", "u", "f", "e", "ca", "C", "cr", "lc", "l", "cd", "pc", "m", "sc", "cf", "nc", "count"], "p": ["lp", "pi", "tp", "o", "page", "np", "d", "phi", "pa", "amp", "yp", "t", " cp", "y", "ph", "g", "cp", "ip", "py", " xp", "u", "pp", "f", "e", "ps", "pn", "pl", "q", "pm", "P", "w", "l", " pc", "pc", "m", "ap", "bp", "gp", "fp"], "n": ["pi", "o", "k", "j", "np", "d", " N", "nb", "num", "s", "t", "y", "g", "u", "f", "nt", "ns", " num", "no", "w", "z", "l", "m", "r", "nc", "N"], "a": ["o", "ha", "aw", "ac", "ab", "wa", "pa", "da", "an", "s", "A", "y", "alpha", "na", "sa", "aa", "u", "f", "am", "ca", "ad", "ai", "w", "ae", "asa", "ba", "m", "r", "au"], "b": ["o", "eb", "k", "pb", "j", "d", "nb", "ab", "B", "bc", "s", "rb", "bi", "y", "bs", "g", "fb", "gb", "wb", "lb", "f", "e", "sb", "w", "z", "ba", "l", "v", "m", "bb", "bf", "bp"], "h": ["ha", "oh", "hw", "phi", "bh", "hub", "rh", "y", "ph", "g", "ah", "hd", "how", "host", "f", "help", "hi", "q", "sh", "uh", "gh", "z", "w", "l", "v", "hm", "m", "H", "ih", "hs"], "i": ["it", "j", "gi", "d", "bc", "int", "ind", " iP", "id", "ib", "ix", "ig", "ip", "bit", "il", "u", "I", "ai", "ii", "abi", "nc"], "ng": ["loc", "ang", "k", "ong", "exp", "hing", "d", "img", "bh", "pos", "nd", "ind", "ww", "long", "num", "inc", "nz", "rh", "id", "ping", "mn", "gin", "na", "min", "g", "gy", "md", "nn", "ig", "index", "big", "gg", "thing", "aa", "nr", "nt", "max", "hr", "ns", "hi", "hn", "NG", "gh", "ai", "w", "nor", "rand", "gen", "sam", "nc", "ih", "ing"], "ok": ["log", "o", "loc", "pid", "k", "good", "err", "od", "Ok", "j", "org", "kk", "d", "ak", "ready", "bug", "pos", "nd", "ind", "valid", "num", "OK", "ck", "poly", "ch", "inc", "id", "y", "ping", "quick", "check", "ms", "abc", "md", "index", "big", "next", "ko", "nt", "no", "q", "ai", "w", "length", "yes", " big", "nc", "oc"], "mid": ["home", "loc", "mc", "pid", "k", "d", "phi", "medium", "start", "mult", "aid", "nd", "head", "ind", "valid", "num", "inc", "mr", "depth", "high", "id", "ping", "ph", "min", "dim", "hd", "ms", "phy", "md", "tri", "micro", "max", "end", "mi", "hi", "qq", "mm", "q", "sh", "init", "broad", "bid", "rand", "orig", "m", "r", "Mid", "middle"]}}
{"code": "dice = map(int, raw_input().split())\\ninst = raw_input()\\n \\ndef rolling(inst, dice):\\n    if inst == 'E':\\n        dice[5], dice[2], dice[0], dice[3] = dice[2], dice[0], dice[3], dice[5]\\n    elif inst == 'W':\\n        dice[5], dice[3], dice[0], dice[2] = dice[3], dice[0], dice[2], dice[5]\\n    elif inst == 'N':\\n        dice[5], dice[4], dice[0], dice[1] = dice[4], dice[0], dice[1], dice[5]\\n    elif inst == 'S':\\n        dice[5], dice[1], dice[0], dice[4] = dice[1], dice[0], dice[4], dice[5]\\n \\nfor i in range(len(inst)):\\n    rolling(inst[i], dice)\\nprint dice[0]", "target": "401", "substitutes": {"dice": ["idicing", "ldine", "dace", "endice", "iduce", "ldICE", "bdine", "bdice", "pice", " dace", "doicer", "yderve", "adice", "sdice", "cdice", "vive", "dayice", "dick", "picing", "derve", "ndicing", "bise", "drrice", "dayise", "plice", "plarge", "ldiced", "gice", "rdace", "ardice", "dcase", "indince", "ardiced", "pices", "dicer", " dcase", "dsise", "deice", "bices", " dense", "odise", "ficing", "licing", "ondice", "dICE", "pdic", "vice", "daerve", "endicer", "indrice", "pdice", "fice", "mdices", "sdine", "idices", "daisk", "wdice", "mandise", "daice", " dius", "bicing", "dsive", "piced", " drice", "indiced", "ondiced", "bice", " dise", "dsisk", "indisk", " dick", "Dick", " dicing", "dine", "idise", "dsodge", " deed", "drise", "gace", "dsicer", "indicer", "dica", "ndICE", "mandicing", "drica", "pdeed", "ydine", "odicing", " diced", "ondrice", "fic", "deicing", "dsius", "dsrice", " disk", "doices", "darge", "mandrice", "dce", "mdcase", "pcase", "dseed", "dsense", "dsices", "doiced", "ardicing", "bicer", "ondICE", "adane", "mandiced", "mandine", "dsuce", "mdicing", "wdiced", "ardise", "indice", "decice", "mandice", " dICE", "dsicing", "pdince", "ydrice", "cderve", "wdense", "biced", "pduce", "pdiced", "dive", "odice", "driced", "ferve", "dince", "DICE", " darge", " dce", " dine", "edine", "Dice", "idice", "ldive", "ndices", "idodge", "domine", "rdiced", "indine", "edice", "deed", " dive", "indeed", "doice", " dince", "decerve", "dricer", "doane", "ldise", "indive", "berve", " dedge", "sdiced", "dane", " dane", "dayiced", "bdicing", "lerve", "doicing", "drerve", "dic", " dodge", "decine", "drice", "dsic", "viced", "idrice", " dices", "ldisk", "lice", "diced", "pdace", "ndrice", "dsince", "domise", "pince", "ndince", "lise", "domiced", "ydiced", "dise", "visk", "rdice", "rdince", "ldices", "endiced", "dsice", "deerve", "cdic", "dsiced", "adise", "plise", " derve", "ndiced", " dicer", "dedice", "dicing", "dsane", "gicer", "indce", "indise", "daicing", " duce", "bine", "mdice", "ondices", "dediced", "edices", "ldice", "idic", "duce", "domerve", "dense", "dedicer", "ldicing", "ydic", "dodge", "ondicing", "domicing", "ldrice", "nduce", "pce", "deciced", "deisk", "dsica", "wdica", "adince", "cdicing", "plerve", "mandicer", "bdiced", "dayeed", "dserve", "oderve", "induce", "ediced", "ndice", "domedge", "dices", "sderve", "giced", "wdicer", "disk", "dedace", "pdicer", "pdius", "drine", "idiced", "endine", "dedge", "dsarge", "manderve", "Diced", "ldick", "ydice", " dic", "dsedge", "dius", "domice", "wdicing"], "inst": ["est", "struct", "step", "loc", "rest", "ext", "dom", "ent", "exp", "anti", "upt", "pred", "ci", "sp", "img", "ist", "spl", "sub", "dest", "data", "app", "const", "inter", "cod", "ptr", "nd", "src", "ind", "instance", "util", "int", "start", "inc", "aug", "ch", "test", "impl", "div", "install", "pack", "xt", "image", "Inst", "iter", "ord", "ident", "irst", "st", "installed", "INST", "usr", "pp", "obj", "end", "sup", "eng", "gest", "oper", "inf", "feat", "pl", "expl", "jp", "text", "fr", "ace", "sim", "dist", "txt", "rc", "elt", "enc"], "i": ["pi", "di", "ji", "it", "k", "x", "xi", "j", "c", "gi", "d", "yi", "ri", "col", "start", "int", "ind", "n", "ini", "ui", "bi", "id", "h", "ij", "ix", "index", "ip", "si", "u", "iu", "fi", "I", "ti", "end", "mi", "ki", "ai", "qi", "l", "ii", "li", "p"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nb0=[]\\nb1=[]\\nfor i in range(n):\\n  if i%2==0:\\n    b0.append(a[i])\\n  else:\\n    b1.append(a[i])\\nif n%2!=0:\\n  b0=list(reversed(b0))\\n  b=b0+b1\\n  print(' '.join(map(str, b)))\\nelse:\\n  b1=list(reversed(b1))\\n  b=b1+b0\\n  print(' '.join(map(str, b)))\\n", "target": "601", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "s", "num", "an", "t", "ni", "y", "g", "count", "nan", "nn", "number", "u", "len", "size", "e", "f", "nt", "ns", "pn", "sn", "no", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "o", "sta", "input", "x", "c", "aw", "ar", "d", "ab", "ac", "data", "args", "all", "an", "s", "array", "A", "y", "alpha", "sa", "aa", "u", "f", "e", "am", "ad", "ans", "ga", "ai", "ae", "w", "aaa", "ba", "z", "l", "m", "r", "p", "au"], "b0": ["f1", "b00", "a0", "b50", "b48", "ab00", "bb0", "ban1", "b6", "B2", "ab0", "B1", "bb6", "ban48", "a6", "bb2", "a00", " b6", "f0", "b3", "ab1", "a3", "B50", "bb1", "a1", "a48", "f2", "ab2", "a2", "b2", "ban2", "bb3", "bb50", "B0", " b50", "f3", "bb00", "bb48", "ban0", " b2"], "b1": ["b100", "bh9", "bone", "aall", "bh6", "bh11", "a0", "bf6", "bh1", "bb0", "bi11", "b6", "cb1", "fb3", "bi9", " b11", "bi6", "fb0", " bone", "bball", "bb2", " b6", "b3", "cb11", "bi1", "bb11", "bf100", " b100", "bbone", "cb100", "bf1", "cb9", "fbone", "bb1", "fb1", "a1", " ball", "b2", "a2", "bb3", "b11", "ball", "b9", "a11", " b2", " b3", "cb6"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "io", "ie", "start", "ind", "ui", "t", "ni", "bi", "id", "y", "h", "index", "ip", "si", "u", "iu", "f", "e", "I", "ti", "mi", "ai", "z", "qi", "l", "v", "ii", "li", "m", "r", "ih", "p", "zi", "count"], "b": ["o", "part", "k", "x", "abb", "pb", "c", "db", "d", "nb", "ab", "bh", "B", "bc", "s", "binary", "rb", "y", "split", "bs", "g", "h", "gb", "ib", "u", "lb", "e", "f", "base", "sb", "w", "z", "l", "v", "r", "bb", "m", "bf", "p"]}}
{"code": "W,H,x,y=map(int,input().split())\\nprint(W*H/2,int(2*x==W and 2*y==H))\\n", "target": "607", "substitutes": {"W": ["U", "GW", "TW", "SH", "Write", "S", "Width", "Weight", "B", "T", "WR", "HH", "Y", "A", "L", "G", "Wh", "NW", "ow", " w", "FW", "Q", "WC", "WH", "Week", "X", "SW", "C", "V", "w", "P", "We", "K", "MW", "Word", "O", "VW", "M", "F", "WD", "N", "Z"], "H": ["U", "SH", "D", "Width", "HC", "Hi", "B", "OH", "T", "RH", "NH", "HH", "Y", "L", "G", "HO", "FH", "EH", "h", "Q", "WH", "Ha", "X", "C", "MH", "HI", "V", "w", "HE", "P", "K", "AH", "TH", "M", "DH", "F", "N", "Z"], "x": ["height", "wy", "px", "c", "d", "xy", "col", "wa", "int", "n", "Y", "L", "i", "width", "time", "xxx", "min", "ax", "h", "dim", "index", "ex", "u", "f", "dx", "b", "X", "xx", "w", "z", "v", "l", "cross", "m", "wh", "p"], "y": ["height", "ey", "wy", "sy", "hy", "j", "cy", "c", "d", "xy", "oy", "phi", "col", "ny", "n", "year", "Y", "ye", "i", "dy", "min", "gy", "h", "f", "b", "hi", "yy", "w", "z", "v", "m", "ady", "p", "vy"]}}
{"code": "n=int(input())\\n\\ndef output(x):\\n\tprint(x,flush=True)\\n\tnxt=input()\\n\tif nxt==\"Vacant\":\\n\t\texit()\\n\treturn nxt==\"Male\"\\n\\nLgen=output(0)\\nRgen=output(n-1)\\n\\nl=0\\nr=n-1\\nwhile True:\\n\tm=(l+r)//2\\n\tgen=output(m)\\n\tif gen==Lgen:\\n\t\tif (m-l)%2:\\n\t\t\tr=m\\n\t\t\tRgen=gen\\n\t\telse:\\n\t\t\tl=m\\n\t\t\tLgen=gen\\n\telse:\\n\t\tif (m-l)%2:\\n\t\t\tl=m\\n\t\t\tLgen=gen\\n\t\telse:\\n\t\t\tr=m\\n\t\t\tRgen=gen", "target": "344", "substitutes": {"n": ["o", "k", "j", "c", "np", "d", "nm", "node", "nb", "name", "num", "s", "t", "i", "y", "g", "h", "nn", "nl", "number", "u", "len", "net", "size", "f", "fn", "e", "b", "ns", "sn", "w", "z", "v", "nc", "p", "N"], "x": ["k", "input", "c", "d", "output", "data", "t", "config", "y", "test", "xml", "python", "xxx", "h", "rx", "ex", "f", "e", "X", "xx", "code", "q", "w", "content", "z", "example", "v", "text", "xs", "p", "temp"], "nxt": [" ntxt", " nXT", "yntxt", " next", "ntxt", "NXT", "ynext", "Ntxt", "Next", "ynxt", "next", "nXT", "netxt", "Nxt", "neext", "ynXT", "neXT"], "Lgen": ["Lugener", " Lgn", " lval", "Lugn", "Rfeed", "LTgener", "Lugen", "Lvalid", " lGen", " Lval", "LTgen", " Lgener", "Lpass", "LTGen", "lgen", "Lval", " LGen", "LTfeed", "RGen", " Lpass", " lgener", " Lvalid", "lvalid", "lpass", "lgener", " Lexp", " lvalid", "Lexp", "Lupass", "Rgener", "lGen", "Lufeed", " lexp", "lval", "LuGen", "lgn", "Lgn", "Lfeed", " lgen", "LGen", "lexp", "Lgener"], "Rgen": ["RGEN", "Rcall", "rgen", " RGen", "Mgen", " Rfeed", "Rfeed", "Bgener", "MGen", "RRgen", "GGEN", "rcall", "Mfeed", "GGen", "Bgen", "BGen", "RRGen", "RGen", "rGen", "rfeed", "Rgener", "RRgener", "rgener", " Rcall", "Ggener", "BGEN", "RRGEN", "Mcall", "Ggen", "rGEN"], "l": ["el", "lp", "ls", "o", "k", "j", "c", "d", "kl", "fl", "ell", "sl", "ll", "t", "L", "i", "y", "g", "h", "lr", "nl", "la", "ur", "u", "len", "lin", "f", "rl", "e", "b", "pl", "dl", "q", "w", "z", "v", "lc", "li", "ln", "p"], "r": ["rs", "o", "k", "rd", "err", "j", "c", "er", "R", "d", "ar", "re", "mr", "rb", "t", "i", "yr", "g", "rg", "h", "dr", "lr", "pr", "ur", "u", "nr", "rl", "f", "rr", "e", "b", "q", "w", "z", "v", "fr", "ru", "p", "sr"], "m": ["o", "k", "j", "um", "c", "tm", "fm", "gm", "d", "a", "s", "t", "man", "i", "y", "machine", "g", "h", "ym", "cm", "multi", "u", "f", "e", "mu", "b", "mi", "sm", "mm", "im", "w", "z", "dm", "v", "hm", "M", "sim", "p", "bm"], "gen": [" generator", "feed", "ge", "go", "valid", "num", "gap", "en", "source", "hen", "gener", "kin", "alg", "load", "scan", "build", "draw", "orig", "enc", "file", "gi", "gu", "ng", "wa", "format", "id", "y", "get", "na", "lif", "norm", "max", "plant", "arg", "method", "lim", "unit", "call", "node", "copy", "man", "update", "kg", "gin", "loss", "bin", "la", "model", "run", "len", "fn", "new", "ga", "init", "kill", "lic", "gn", "nc", "gain", "gp", "slice", "generation", "pos", "zen", "inc", "cess", "winner", "g", "mem", "ign", "produ", "iter", "sample", "gold", "un", "win", "GEN", "Gen", "NG", "save", "lib", "path"]}}
{"code": "s = input()\\nw = int(input())\\na = ''\\nif len(s)%w == 0:\\n  b = len(s)//w\\nelse:\\n  b = len(s)//w+1\\n\\nfor i in range(b):\\n  a += s[i*w]\\nprint(a)", "target": "313", "substitutes": {"s": ["states", "ls", "o", "string", "services", "parts", "S", "ssl", "input", "c", "d", "ws", "ses", "data", "n", "args", "t", "strings", "y", "g", "sa", "your", "gs", "lines", "sf", "sq", "si", "u", "letters", "f", "e", "es", "sb", "sv", "z", "l", "v", "sg", "less", "m", "xs", "r", "words", "p", "aws", "seconds"], "w": ["wp", "iw", "wig", "k", "fw", "x", "wl", "c", "aw", "wan", "way", "d", "ws", "wa", "wed", "W", "n", "ww", "wt", "t", "wid", "weight", "wave", "y", " W", "nw", "width", "sw", "wd", "g", "h", "we", "word", "wal", "ow", "win", "ew", "wn", "wb", "u", "f", "max", "q", "kw", "z", "l", "v", "m", "wh", "p", "wi"], "a": ["area", "sta", "x", "c", "aw", "d", "wa", "ac", "data", "ab", "af", "n", "da", "an", "array", "A", "fa", "y", "alpha", "na", "sa", "aa", "u", "va", "f", "ad", "ca", "am", "tta", "ga", "aaa", "ba", "ea", "aj", "m", "p", " A", "au"], "b": ["o", "eb", "mb", "abb", "c", "d", "ob", "nb", "ab", "B", "bound", "bd", "bis", "n", "xb", "rb", "y", "bs", "g", "h", "fb", "ib", "aa", "wb", "lb", "u", "f", "e", "max", "ad", "sb", "l", "v", "m", "r", "bb", "bf", "p", "count"], "i": ["pi", "k", "x", "j", "c", "gi", "ci", "d", "phi", "ie", "start", "pos", "ind", "n", "bi", "id", "y", "h", "ix", "index", "ip", "si", "u", "e", "I", "f", "end", "ad", "ai", "z", "l", "v", "ii", "r", "m", "li", "p"]}}
{"code": "import math\\nn = int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\ne = int(input())\\n\\nl = min([a,b,c,d,e])\\nprint(5 + math.ceil(n/l) - 1)\\n", "target": "784", "substitutes": {"n": ["o", "k", "x", " N", "nb", " p", "num", "ll", "s", "t", "L", "i", "y", "g", "nan", "nn", "nl", "u", "len", "f", "fn", "nt", "ns", "no", "w", "z", "v", "m", "r", "ln", "p", "ne", "N"], "a": ["area", "auto", "at", "x", "ak", "ac", "ab", "art", "af", "da", "s", "an", "A", "y", "alpha", "sa", "aa", "la", "u", "f", "ad", "ca", "am", "ga", "ae", "asa", "ba", "bb", "p"], "b": ["o", "eb", "k", "x", "db", "cb", "ab", "bc", "B", "bd", "s", "rb", "i", "y", "bs", "g", "fb", "h", "aa", "u", "lb", "f", "ad", "sb", "ae", "be", "ba", "v", "bb", "bf", "r", "p"], "c": ["o", "k", "x", "cb", "ac", "uc", "s", "ce", "i", "cs", "y", "ec", "g", "h", "dc", "u", "f", "ad", "ca", "C", "ae", "w", "z", "v", "cd", "lc", "r", "cf", "p"], "d": ["o", "D", "dt", "k", "x", "j", "nd", "da", "s", "t", "i", "y", "dy", "h", "ds", "md", "u", "f", "dd", "ad", "w", "z", "dn", "v", "cd", "m", "r", "p"], "e": ["el", "ey", "o", "oe", "eb", "x", "j", "E", "de", "ce", "ef", "i", "y", "ec", "g", "h", "u", "ee", "f", "ed", "ae", "w", "z", "v", "ea", "r", "p"], "l": ["el", "lp", "ls", "o", "ol", "al", "kl", "fl", "ell", "sl", "ll", "s", "L", "g", "ml", "nl", "la", "il", "len", "f", "rl", "pl", "dl", "lc", "v", "m", "li", "ln", "p", "lt"]}}
{"code": "d,g = map(int,input().split())\\npc = []\\nfor i in range(d):\\n    p,c = map(int,input().split())\\n    pc.append((p,c))\\nminimum = 2000\\nfor i in range(2**d):\\n    count = 0\\n    remain = g\\n    for j in range(d):\\n        if i >> j & 1:\\n            count += pc[j][0]\\n            remain -= (j+1)*100*pc[j][0]\\n            remain -= pc[j][1]\\n    highest = d*100\\n    while remain > 0 and highest >= 100:\\n        if not i >> (highest//100-1) & 1:\\n            if highest * pc[highest//100-1][0] >= remain:\\n                count += -(-remain//highest)\\n                remain -= -(-remain//highest)*highest\\n            else:\\n                count += pc[highest//100-1][0]\\n                remain -= pc[highest//100-1][0]*highest\\n        highest -= 100\\n    if remain <= 0:\\n        minimum = min(minimum,count)\\nprint(minimum)", "target": "125", "substitutes": {"d": ["D", "dt", "daily", "x", "db", "pd", "diff", "n", "s", "t", "gd", "sd", "dy", "dim", "h", "ds", "dh", "do", "dc", "dp", "e", "dd", "f", "dx", "b", "ad", "dl", "dj", "w", "z", "dm", "l", "v", "cd", "m", "dat", "ld"], "g": ["k", "pg", "gi", "gu", "gm", "gc", "n", "ge", "s", "G", "gd", "rg", "h", "gb", "gs", "bg", "u", "e", "f", "b", "ga", "q", "w", "z", "v", "l", "sg", "m", "r", "gen", "gp"], "pc": ["lp", "ls", "loc", "mc", "central", "sync", "x", "pb", "plus", "px", "mac", "cv", "ci", "tc", "point", "col", "acl", "ac", "uc", "bc", "fc", "pa", "cc", "amp", "cache", "anc", "inc", "cca", "cs", "points", "ec", "api", "python", "con", "val", "gb", "co", "cm", "dc", "py", "vc", "xc", "pp", "pre", "toc", "func", "ps", "code", "pn", "arc", "ca", "icc", "pm", "cr", "lc", "sc", "PC", "pe", "m", "nc", "oc", "ic", "bp", "rc", "cl", "enc"], "i": ["mini", "pi", "di", "o", "it", "ji", "xi", "gi", "ci", "ie", "cli", "ind", "n", "ini", "ui", "ati", "ni", "bi", "iq", "ia", "ip", "si", "u", "iu", "f", "I", "ti", "b", "ai", "chi", "qi", "l", "v", "ii", "li", "m", "abi"], "p": ["pi", "tp", "o", "k", "pg", "np", "point", "a", "pa", "n", "s", "t", "y", "h", "pr", "py", "ip", "u", "pp", "f", "e", "b", "ps", "q", "P", "v", "l", "m", "r", "pe"], "c": ["cn", "k", "x", "ci", "fc", "n", "s", "cs", "y", "con", "h", "u", "size", "e", "f", "max", "b", "ca", "C", "q", "w", "z", "v", "l", "lc", "m", "r"], "minimum": ["common", "distance", "partial", "between", "required", "current", "large", "low", "left", "mult", "expression", "diff", "username", "maximum", "latest", "Minimum", "initial", "missing", "platform", "width", "them", "min", "multiple", "url", "cm", "master", "which", "lower", "largest", "material", "number", "message", "spec", "default", "termination", "within", "approximately", "none", "member", "noon", "mor", "summary", "pm", "position", "simple", "optional", "duration", "length", "m", "nil", "small", "sufficient"], "count": ["est", "core", "case", "common", "first", "low", "current", "catch", "find", "sum", "col", "name", "hold", "only", "coll", "start", "carry", "ind", "n", "cc", "depth", "cache", "list", "allow", "num", "weight", "id", "total", "check", "cond", "more", "multiple", "size", "process", "len", "f", "Count", "default", "max", "code", "base", "child", "found", "length", "cd", "group", "call"], "remain": ["RemAIN", "remained", " remains", "REMaining", "remainer", "resains", "restaining", "premaining", "premain", "resaining", "romained", "romainer", "remAIN", "expain", "expaintain", "Remain", "REMAIN", "expaining", "pastain", "premAIN", "resained", "promains", "replaining", "replrain", "restaintain", "remaining", "pastained", "restrain", "Remainer", "Remrain", "remrain", " remAIN", "romains", " remainer", "promained", "REMrain", "remains", "pastaining", "pastrain", "Remains", " remaining", "promaining", "romaining", " remained", "REMained", "REMain", "resain", "replain", "Remaining", "promain", "REMains", "Remained", "premainer", "promainer", "replaintain", "exprain", "romain", "REMainer", "remaintain", "restain", "premained"], "j": ["ji", "o", "js", "k", "x", "gi", "jc", "a", "ie", "ind", "n", "J", "all", "s", "t", "y", "jan", "h", "ij", "bj", "jl", "ip", "jo", "u", "iu", "ja", "f", "I", "e", "end", "b", "jj", "adj", "obj", "jet", "q", "z", "v", "jp", "l", "length", "m", "r", "aj", "uj"], "highest": ["average", "large", "best", "Maximum", "maximum", "high", "initial", "null", "worst", "wide", "central", "first", "x", "winning", "single", "ast", "growing", " largest", "prefix", "width", "peak", "final", "hop", "default", "max", "popular", "none", "upper", "Higher", "increasing", "historic", "top", "highly", "recent", "instance", "effective", "great", "tops", "last", "rising", "west", "est", "common", "ul", " lowest", " greatest", " maximum", " Highest", "existing", "latest", "winner", "anything", "filename", "master", "largest", "actual", "Hig", "each", "higher", "hest", "most", "pe", "asc", "username"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\ndef mapint(): return map(int, input().split())\\nsys.setrecursionlimit(10**9)\\n\\nN = int(input())\\ns = set()\\nfor _ in range(N):\\n    s.add(int(input()))\\n\\nlis = list(s)\\nlis.sort()\\nprint(len(lis))", "target": "347", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "E", "NL", "Ns", "T", "n", "Sn", "Y", "Ni", "L", "SN", "NB", "NT", "NM", " n", "Size", "MN", "Q", "I", "X", "ns", "NO", "C", "Na", "NUM", "RN", "V", "P", "K", "O", "M", "F", "Z"], "s": ["states", "ls", "o", "services", "S", "sit", "sync", "su", "sci", "d", "yi", "ins", "ses", "ss", " ls", "sl", "bis", "n", "qs", "sie", "lins", "t", "list", "strings", "i", "sis", "cs", "g", "os", "ids", "ips", "nis", "lines", "items", "sites", "si", "u", "los", "sets", "e", "f", "objects", "ps", "ns", "sed", "features", "sb", "w", "ves", "l", "less", "groups", "xs", "sing", "p"], "_": [" __", "x", " times", " col", " g", " time", " ip", " j", " seq", " loop", " lines", " block"], "lis": ["lp", "ls", "dos", "lems", "ils", "yi", "ses", "lys", " ls", "ships", "ens", "models", "hops", "qs", "lie", "LI", "lins", "uli", "sis", "tis", "ds", "ips", "lists", "les", "isi", "nis", "jl", "lite", "lies", "si", "isl", "los", "lees", "Li", "alis", "ns", "dl", "phis", "l", "lc", "ii", "antis", "li", "xs", "lt", "atis"]}}
{"code": "from collections import defaultdict\\ndef build_tree(N, edges):\\n    root_list = [i for i in range(N)]\\n    for p, q in edges:\\n        p -= 1\\n        q -= 1\\n        root_p = get_root(root_list, p)\\n        root_q = get_root(root_list, q)\\n        root_now = min(root_p, root_q, p)\\n        root_list[p] = root_now\\n        root_list[q] = root_now\\n        root_list[root_p] = root_now\\n        root_list[root_q] = root_now\\n    return root_list\\n\\ndef get_root(root_list, city):\\n    if root_list[city] == city:\\n        return city\\n    else: \\n        root_list[city] = get_root(root_list, root_list[city])\\n        return root_list[city]\\n\\nif __name__ == '__main__':\\n    N, K, L = map(int, input().split())\\n    roads = [None]*K\\n    rails = [None]*L\\n    for k in range(K):\\n        roads[k] = list(map(int, input().split()))\\n    for l in range(L):\\n        rails[l] = list(map(int, input().split()))\\n    \\n    \\n    '''N = 2*10**5\\n    L = int(N/2)\\n    K = int(N/2)\\n    roads = [None]*K\\n    rails = [None]*L\\n    for i in range(L):\\n        roads[i] = [2*i, 2*i+1]\\n    for i in range(K):\\n        rails[i] = [2*i, 2*i+1]'''\\n    \\n    road_roots = build_tree(N, roads)\\n    rail_roots = build_tree(N, rails)\\n    \\n    railroads = defaultdict(int)\\n    RR = []\\n    for n in range(N):\\n        rr = (get_root(road_roots, n), get_root(rail_roots, n))\\n        RR.append(rr)\\n        railroads[rr] += 1\\n    answer = [railroads[key] for key in RR]\\n    print(' '.join(map(str, answer)))", "target": "21", "substitutes": {"N": ["U", "NA", "II", "D", "S", "Network", "GN", "R", "NS", "E", "NE", "NC", "NL", "B", "Ns", "T", "NH", "W", "Y", "Ni", "G", "A", "Num", "NB", "CNN", "NT", "NM", "Size", "NW", "NN", "MN", "No", "Q", "I", "X", "NO", "C", "NI", "Ne", "NG", "NR", "V", "NER", "P", "RN", "KN", "O", "M", "F", "Z"], "edges": ["dedged", "edGES", "dedGES", "edsges", "edsge", "edsged", "pedges", "edgments", "EdGES", "Edged", "pedge", "pedGES", "edsGES", "Edges", "Edge", "eedges", "edged", "pedgments", "edge", "dedge", "eedgments", "eedge", "dedges", "eedGES", "Edgments"], "root_list": ["page64def", "root_system", "root__block", "rowOsource", "owner_group", "root_detail", "core_listed", "block_list", "root_record", "page_system", "rootaclist", "root_type", "root_body", "root_pair", "root_master", "node_set", "row_manager", "root\u00b7l", "rootacbase", "root64master", "rootqlist", "rootedpair", "rootingpool", "tree_list", "rootfullists", "row_status", "ownerpyrecord", "root_base", "page_def", "root_set", "root__table", "rootedlist", "root__base", "rootqsource", "page64system", "owner_list", "core_loop", "row_list", "rootsOpair", "root_group", "root__list", " root_layer", "block_table", "root__listed", " root_listed", " root_long", "rootpylist", "root_name", "root\u00b7list", "ownerpyl", "node_list", "root__config", "root64system", "rootacstack", " root_base", "node_name", "rootpyrecord", "rootsOtree", "page_list", "root_path", "row_source", "root_manager", "root_long", "rootOmanager", "root_l", " root_chain", "tree_pool", "ownerpylist", "rootfullayer", "rowOlist", "rootfullist", "root64type", "rootfulchain", "rootingdetail", "owner_dict", "rootOconfig", "root_def", "rootOstatus", "tree_call", "roots_tree", "roots_config", "owner_record", "root64def", "root_block", " root_stack", "root_pool", "tree_l", "root64call", "block__list", "rootpyl", "root64list", "page64type", "rootedconfig", "block_block", "rootedtree", "tree_detail", "rootOlist", "rootsOlist", "rootOpair", "roots_pair", "rootOsource", "rootpygroup", "rootingl", "tree_master", " root_body", "root_call", "node_system", "rootsOconfig", "root_loop", "root_table", "rootdname", "page64list", "rootOtree", "block__config", "rowOmanager", "root__stack", "tree_listed", " root_lists", "rootqstatus", "root_lists", " root_l", "rootinglist", "root\u00b7lists", "root_chain", "root_listed", "owner_l", "root\u00b7body", "block__block", "rootqmanager", "core_pair", "rowOstatus", "root_source", "root_stack", "roots_list", "root_dict", "root_tree", "block_config", "ownerpygroup", "page_type", "rootdlist", "rootaclisted", "root_status", "root_layer", "rootdset", "owner_table", "block__table", "owner_path", "core_list", "root_config", "rootdsystem", "root64listed"], "i": ["pi", "di", "o", "x", "xi", "j", "c", "gi", "ci", "d", "ri", "phi", "a", "io", "int", "ind", "id", "y", "iter", "index", "ip", "si", "il", "u", "iu", "f", "I", "ti", "ai", "w", "z", "qi", "v", "ii", "li", "m", "r"], "p": ["area", "lp", "pi", "tp", "o", "pid", "j", "c", "np", "d", "point", "a", "pos", "pa", "vp", "po", "t", "root", "y", "api", "qa", "h", "cp", "ip", "py", "u", "pp", "pre", "f", "pot", "e", "b", "pn", "pl", "pm", "P", "ep", "pu", "jp", "v", "pc", "r", "m", "ap", "up", "pe"], "q": ["o", "qt", "x", "j", "pg", "c", "question", "queue", "qs", "quant", "depth", "quest", "t", "ch", "y", "iq", "g", "qa", "h", "query", "ip", "Q", "sq", "eq", "u", "f", "e", "end", "b", "qq", "sh", "w", "P", "z", "qi", "v", "r", "qu", "dq"], "root_p": ["root9d", "root_po", "root_n", "outer_d", " root_n", "root_b", " root_per", "outer_pa", "root67p", " root_P", "root9pa", "root_P", " root_pi", "root67po", "root_per", "root67pi", "root_d", "root67n", "root9p", "root_pi", "outer_p", "outer_b", " root_po", "root_pa", "root9b"], "root_q": [" root_qu", "root_qu", "root25qa", "home___q", "root___qu", "root_k", "root__k", "root25qu", " root_qa", "home_q", "home___qu", "home_qu", "root___qa", "root___q", "home_post", "root___post", "home___post", "root25q", "home_qa", "root__qu", "root__p", "root_qa", "root25post", "root__q", "home___qa", "root_post", " root_k"], "root_now": ["rootJnow", "root\u00b7down", "root___now", " root_new", " root_once", "root67down", "root_first", "root_new", "rootJthen", "root_search", "root_name", "root67new", "root_down", "rootJNOW", " root_current", "rootacfirst", "root_once", "root67NOW", "rootJname", "rootacdown", "root67now", " root_NOW", "root\u00b7now", "root_then", "root\u00b7first", "root_current", " root_info", "root___once", " root_down", " root_then", "rootacnow", " root_search", "root___search", " root_name", "root_info", "root_NOW", " root_first"], "city": ["unit", "core", "area", "currency", "loc", "street", "cn", "package", "c", "connection", "large", "City", "point", "node", "name", "local", "section", "environment", "remote", "root", "site", "python", "script", "image", "forest", "network", "parent", "division", "custom", "cell", "region", "ip", "box", "number", "host", "zip", "south", "house", "address", "country", "ville", "code", " cities", "six", "state", "content", "town", "community", "location", "zone", "station", "company", "small"], "K": ["U", "KR", "D", "S", "DK", "R", "E", "SK", "Ak", "T", "KE", "Ph", "W", "J", "Y", "OK", "G", "NK", "KK", "HK", "UK", "AK", "Uk", "Q", "PK", "I", "X", "C", "VK", "V", "P", "KA", "KN", "Sk", "Key", "KS", "O", "H", "M", "KC", "F", "Z"], "L": ["PL", "U", "UL", "LM", "D", "LU", "LO", "R", "E", "LB", "NL", "LR", "B", "Lo", "List", "FL", "W", "Y", "LI", "IL", "LP", "EL", "LV", "LE", "El", "Q", "BL", "LT", "Li", "I", "dL", "X", "C", "LL", "Lu", "V", "ML", "P", "LIN", "DL", "O", "H", "M", "LA", "SL", "CL"], "roads": ["history", "core", "uri", "grade", "rest", "case", "distance", "square", "way", "results", "road", "feature", "node", "trip", "times", "LINE", "mile", "ravel", "grid", "direction", "race", "progress", "array", "ride", "root", "track", "cost", "driver", "guide", "historic", "transform", "rows", "division", "travel", "WAY", "line", "lines", "zip", "house", "route", "move", "address", "rice", "river", "shape", "edge", "ways", "position", "location", "lace", "cross", "length", "chrome", "ru", "cube"], "rails": [" raiders", "rail", "draistics", "raips", "railings", "grailles", "traistics", "draills", "araices", " railles", "straills", "trails", " raices", "drail", "draices", "trailings", "grail", "straistics", "graiders", " raips", "raices", "strail", "draips", "railles", "trailles", "raistics", "traices", "traips", " rail", "trail", "traills", "raiders", "arail", "arails", "grails", "drailings", "strails", "traiders", "raills", "arailings", "drails"], "k": ["ik", "o", "kn", "ke", "x", "kk", "j", "c", "ak", "ijk", "ky", "kl", "ck", "id", "y", "kg", "sk", "ir", "ok", "ks", "ip", "dk", "kin", "u", "f", "ki", "w", "kw", "z", "r", "m", "km"], "l": ["el", "lp", "ls", "o", "ol", "j", "c", "kl", "fl", "sl", "ll", "list", "ml", "un", "nl", "line", "lin", "u", "il", "len", "lb", "f", "b", "dl", "z", "lc", "v", "li", "m", "lu", "ln"], "road_roots": ["roadacthumbnails", " road_boxes", "root_thumbnails", " road_root", "road_parents", "road_tree", "root_roots", "roadacparents", "root_parents", "roadacsites", "road_root", "road_sites", " road_tree", "road_thumbnails", "roadacroots", "road_boxes", "root_sites"], "rail_roots": ["rail_root", "round_errors", "rail_lines", "rail\u00b7packages", "rail__modules", "rail\u00b7roots", "round\u00b7roots", "road_forest", "railblines", "rail_packages", "rail__roots", "round_modules", "road_lines", "road_root", "rail_forest", "rail__packages", "round\u00b7packages", "rail_modules", "round_roots", "rail_errors", "round_packages", "rail\u00b7modules", "round\u00b7errors", "railbroot", "round\u00b7modules", "rail__errors", "railbforest", "railbroots", "rail\u00b7errors"], "railroads": ["railways", "roadroads", "rainresults", "railroad", "roadroots", "fallroots", "falltracks", "groundroad", "railtracks", "fallroad", "fallways", "fallresults", "groundways", "roadroad", "groundforms", "rainforms", "fallroads", "roadforms", "roughways", "groundgrade", "railresults", "groundroads", "rainroads", "railgrade", "roughroads", "railroots", "roughtracks", "roughroad", "groundroots", "roadgrade", "groundtracks", "roadresults", "railforms", "raingrade", "groundresults"], "RR": ["RC", "GR", "KR", "RW", "JR", "HR", "R", "RS", "RD", "RG", "LR", "ARR", "WR", "DR", "rh", "SR", "VR", "track", "RE", "RP", "RB", "UR", "TR", "Q", "BR", "MR", "Rand", "Answer", "NR", "LL", "IR", "TX", "RN", "RT", "CR", "Round", "URN", "Road", "RM"], "n": ["o", "cn", "x", "c", "ng", "nm", "yn", "node", "nb", "name", "num", "ni", "y", "inner", "nw", "na", "min", "g", "en", "network", "nn", "un", "number", "nu", "nr", "net", "nt", "rn", "f", "b", "ns", "pn", "sn", "no", "nor", "z", "r", "nc", "nin", "ne"], "rr": ["rs", "ner", "vr", "err", "wr", "report", "rm", "risk", "rh", "mr", "range", "ride", "arr", "yr", "rt", "rg", "ir", "cor", "rar", "rx", "dr", "lr", "pr", "ror", "adr", "nr", "br", "route", "issue", "rl", "rn", "rack", "hr", "der", "gr", "IR", "wire", "cr", "air", "r", "bb", "rss", "kr", "rc", "sr"], "answer": ["area", "string", "grade", "average", "err", "feed", "response", "results", " answers", "question", "road", "output", "record", "fix", "reverse", "option", "Array", "array", "SR", "root", "result", "round", "entry", "radio", "score", "ACE", "adr", "nr", "replace", "reply", "issue", "address", " Answer", "rack", "route", "ridge", "random", "Answer", "edge", "air", "altern", "order", "addr"], "key": ["core", "ner", "err", "x", "our", "node", "ri", "name", "ry", "int", "ind", "num", "range", "root", "id", "y", "yr", "result", "round", "entry", "nw", "ip", "number", "row", "char", "br", "nr", "rn", "code", "rec", "gr", "no", "wire", "cr", "rand", "air", "Key", "str", "right", "r", "order", "rank"]}}
{"code": "class dice_2:\\n    def __init__(self,label):\\n        self.spots = label\\n\\n    def result(self,top,front):\\n        if self.spots.index(top)+1 == 1:\\n            self.order=[2,3,5,4,2]\\n        elif self.spots.index(top)+1 == 2:\\n            self.order=[6,3,1,4,6]\\n        elif self.spots.index(top)+1 == 3:\\n            self.order=[2,6,5,1,2]\\n        elif self.spots.index(top)+1 == 4:\\n            self.order=[2,1,5,6,2]\\n        elif self.spots.index(top)+1 == 5:\\n            self.order=[1,3,6,4,1]\\n        elif self.spots.index(top)+1 == 6:\\n            self.order=[2,4,5,3,2]\\n\\n        for i in range(4):\\n            if self.order[i] == self.spots.index(front)+1:\\n                self.right = self.order[i+1]\\n\\n    def output(self):\\n        print(self.spots[self.right-1])\\n\\nlabel = list(map(int,input().split()))\\ndice = dice_2(label)\\nfor i in range(int(input())):\\n    top,front = map(int,(input().split()))\\n    dice.result(top,front)\\n    dice.output()", "target": "667", "substitutes": {"self": ["type", "work", "object", "c", "current", "best", "uc", "per", "high", "args", "non", "cmp", "h", "job", "tmp", "f", "load", "base", "ref", "style", "p", "group", "cl", "part", "k", "full", "http", "_", "x", "plus", "er", "d", "ws", "a", "data", "sys", "client", "map", "error", "default", "max", "r", "public", "block", "field", "node", "event", "old", "app", "context", "diff", "n", "ck", "s", "config", "word", "comp", "model", "spec", "e", "func", "es", "layer", "l", "form", "user", "case", "Self", "this", "name", "pos", "view", "all", "cache", "g", "os", "parent", "co", "worker", "master", "host", "row", "me", "other", "private", "www", "q", "w", "now", "utils"], "label": ["unit", "el", "file", "log", "type", "loc", "field", "out", "input", "hide", "left", "col", "output", "name", "data", "all", "yl", "list", "plot", "weight", "id", "block", "key", "cost", "lab", "bel", "Label", "cell", "bl", "line", "span", "null", "abel", "model", "title", "default", "b", "X", "load", "shape", "position", "layer", "l", "color", "cross", "text", "comment", "p", "group", "call"], "spots": ["spops", "spaceots", "sparts", "tot", "spot", "pots", "spOTS", "pott", "Spikes", "plods", "Spott", "spugs", "plugs", "Sparts", "scots", " spugs", "splrots", " spods", "spott", "spows", "Spot", "scowers", " spows", "sprots", "splots", "plott", "sots", "Spowers", "sott", "pops", "plops", "plot", "tarts", "studows", "studowers", "Spotes", "Spows", "splits", "slOTS", "studugs", "slots", "spotes", "splugs", "Spots", "splowers", "scits", "spowers", "spaceowers", "tugs", " spOTS", "scotes", " sparts", "plrots", " spott", "slods", "studots", " sprots", "plots", "Spugs", "SpOTS", " spotes", "prots", "splotes", "sarts", "Spods", "spaceugs", " spops", " spikes", " spits", "spods", " spot", "plotes", " spowers", "spikes", "spaceott", "tots", "sikes", "slot", "spits", "splot"], "top": ["file", "type", "part", "home", "case", "central", "this", "first", "loc", "x", "op", "page", "best", "off", "current", "above", "left", "html", "point", "name", "data", "start", "format", "pos", "temp", "all", "high", "space", "hyp", "true", "bot", "site", "index", "next", "master", "phone", "lower", "py", "host", "tops", "title", "last", "there", "foo", "aster", "pre", "hop", "hi", "TOP", "tip", "upper", "Top", "pl", "bottom", "pt", "position", "lat", "hot", "p", "up", "path"], "front": ["area", "mini", "part", "field", "case", "central", "fat", "first", "product", "after", "off", "below", "above", "left", "back", "start", " behind", "head", "ff", "center", "fac", "cart", "space", "bot", "root", "fort", "fin", "Front", "qa", "forward", "fore", "farm", "next", "pad", "lower", "br", "stack", "len", " Front", "f", "fi", "before", "fen", "bottom", "behind", "frac", "panel", "fr", "now", "starter", "flower", "form", "face"], "order": ["use", "log", "type", "average", "grade", "part", "element", "priority", "axis", "er", "page", "ordering", "scale", "name", "app", "record", "rule", "degree", "side", "Order", "reverse", "direction", "list", "cache", "depth", "margin", "update", "enter", "root", "result", "id", "sort", "key", "xml", "score", "orders", "ord", "index", "ordered", "error", "model", "radius", "graph", "address", "role", "default", "end", "group", "shape", "random", "seed", "filter", "position", "module", "attr", "style", "comment", "rank", "user", "call"], "i": ["mini", "pi", "di", "uri", "o", "at", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "col", "ie", "int", "ind", "n", "num", "ui", "ini", "ni", "bi", "info", "id", "inner", "uni", "h", "isin", "ix", "index", "ip", "eni", "si", "u", "iu", "f", "I", "ti", "e", "ai", "qi", "l", "v", "ii", "li", "p", "zi"], "right": ["rights", "plus", "close", "best", "left", "ro", "only", "three", "head", "reverse", "center", "hand", "rh", "re", "root", "id", "correct", "inner", "rt", "ax", "rx", "index", "rw", " Right", "error", "radius", "one", "outer", "inside", "third", "child", "bottom", "cross", "r", "middle", "path", "Right", "wrong"], "dice": [" dce", " dine", "Dice", "pice", "indine", "pine", "dine", "lide", " dive", "sdice", "indize", "sdiced", "pize", "sdce", "Dicer", " diced", "pices", "dicer", "live", "dce", " dices", "Dce", "diced", " dize", "lice", "indices", " dide", "dices", "dize", "indice", "pide", "licer", "sdicer", "dide", "Diced", "dive", "pive", "picer", " dicer"]}}
{"code": "import sys\\n\\nn, *xyh = map(int, sys.stdin.read().split())\\nxyh = list(zip(*[iter(xyh)] * 3))\\n\\ndef contradict(cx, cy, ch, x, y, h):\\n    return max(ch - abs(x - cx) - abs(y - cy), 0) != h\\n\\ndef main():\\n    for x, y, h in xyh:\\n        if h: x0, y0, h0 = x, y, h; break\\n\\n    for cx in range(101):\\n        for cy in range(101):\\n            ch = h0 + abs(cx - x0) + abs(cy - y0)\\n            for x, y, h in xyh:\\n                if contradict(cx, cy, ch, x, y, h): break\\n            else:\\n                print(cx, cy, ch)\\n                return\\n\\nif __name__ ==  '__main__':\\n    main()", "target": "114", "substitutes": {"n": ["out", "c", " object", "d", " fn", "g", "nl", " network", "u", "net", "b", "ns", "z", "l", "v", "m", "gen", "r", "nc", "p", "ne", "N"], "xyh": ["xfp", "zxh", "oxyh", "xyhs", "xxxxH", "oxyx", "xyH", "oxyhs", "ptyh", "oxyph", "myh", "xxxxh", "dych", "oxyq", "xyq", "oxyH", "pyc", "xyx", "pyhs", "ptyH", "ptyp", "xfH", "dyq", "pyH", "xych", "oxybody", "dyph", "oxyc", "myx", "routec", "oxyp", "routeh", "xyp", "dyh", "myph", "ptych", "mych", "xfch", "zxbody", "xyph", "xfh", "dybody", "oxych", "zxq", "pyh", "xybody", "routeH", "xyc", "xxxxhs", "xxxxc", "routehs", "dyx", "zxph"], "cx": ["ucxs", "chwx", "hy", " cxx", "hX", "xcxx", "scX", "acxx", "Cy", "ucx", "dcx", "scc", "hc", "acy", " cwx", "Cxx", "cc", "acxs", "dcy", "cxs", "cyx", "Cxs", "chy", " cxs", "dcxs", "xcy", "xcX", "acc", "acX", "ucX", "CX", "xcc", "xcx", "Cx", "acx", "hx", "cyy", "cwx", "cxx", "xcxs", "cX", "Cc", "dcxx", "scx", "chx", "ucxx", "cyxx", "cyxs", "chxs", "scy", "Cwx"], "cy": ["wy", "sy", "hy", "cyl", "ya", "px", "c", "ci", "cycle", "xy", "oy", "yi", "col", "ky", "ry", "ny", "yo", "yl", "zy", "ce", "yp", "ye", "cs", "yr", "dy", "chy", "ty", "gy", "yx", "yan", "cp", "ym", "cin", "icy", "cm", "py", "vc", "char", "yt", "cry", "b", "cos", "yd", "uy", "yy", "z", "cr", "lc", "sky", "vy"], "ch": ["cur", "el", "k", "cht", "c", "sch", "ci", "cher", "ctx", "che", "ht", "cb", "col", "ky", "bh", "ry", "cha", "i", "cs", "ph", "cho", "chy", "div", "gy", "cor", "cp", "chu", "ct", "cm", "vc", "ich", "zh", "char", "ach", "b", "ca", "chan", "q", "sh", "w", "z", "chi", "cr", "v", "cd", "Ch", "conf", "p", "CH", "cl"], "x": ["el", "xi", "px", "c", "ci", "d", "ctx", "xy", "a", "pos", "int", "ux", "i", "id", "tx", "xxx", "val", "yx", "ax", "ay", "xt", "rx", "ct", "ix", "index", "fx", "ex", "xc", "u", "f", "max", "dx", "e", "b", "X", "xx", "wx", "w", "z", "l", "v", "ic", "m", "xs", "p"], "y": ["ey", "o", "wy", "sy", "ya", "j", "c", "xy", "oy", "yi", "yn", "ky", "a", "ry", "ny", "Y", "zy", "t", "ye", "i", "yr", "dy", "ty", "yx", "ay", "ym", "py", "ies", "yt", "f", "ys", "b", "yd", "yy", "w", "z", "v", " Y", "m", "p", "vy"], "h": ["hl", "o", "ha", "hy", "k", "oh", "c", "hw", "ctx", "ht", "html", "bh", "kh", " H", "rh", "hp", "t", "eh", "i", "ph", "g", "ah", "hd", "hh", "hist", "pr", "host", "zh", "ach", "u", "f", "e", "b", "code", "hi", "q", "sh", "w", "uh", "z", "v", "l", "hm", "m", "r", "H", "he", "ih", "p", "hs", "over"], "x0": ["c0", "f1", "h1", "y1", "x1", "x2", "f0", "c1", "c2", "y2", "f2", "h2"], "y0": ["cy1", "cy2", "h1", "cy0", "xk", "y1", "x1", "x00", "yk", "Y1", "x2", "Y2", "hk", "Y0", "y2", "cy00", "Y00", "y00", "cyk"], "h0": ["c50", "c0", "h00", "ch00", "h1", " h6", "H0", "h50", "ch6", "h6", "H1", "H50", "ch0", "c1", " h00", "c00", "c6", "ch1", " h50", " h1"]}}
{"code": "a,b = map(int,input().split())\\nc=\"\u5165\u529b\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059\u3002\"\\nd=\"\u9db4\u304c\"\\ne=\"\u5339\u3067\u3001\u4e80\u304c\"\\nf=\"\u5339\u3067\u3059\u3002\"\\n \\nk=b//2-a\\nt=2*a-b//2\\nif k<0 or t<0 or b%2!=0:\\n    print('No')\\nelse:\\n    print('Yes')", "target": "190", "substitutes": {"a": ["area", "\u00e4", "o", "al", "x", "aw", "ak", "ac", "ab", "af", "pa", "n", "da", "an", "A", "fa", "i", "y", "alpha", "sa", "h", "aa", "u", "va", "oa", "ad", "ca", "am", "ai", "ae", "w", "z", "ba", "m", "p", "au"], "b": ["o", "x", "j", "nb", "ab", "B", "int", "n", "s", "A", "bi", "i", "y", "body", "g", "h", "fb", "abc", "ib", "beta", "wb", "br", "u", "ad", "base", "w", "z", "l", "v", "m", "r", "bb", "p"], "c": ["o", "x", "j", "cy", "ac", "n", "cc", "ce", "i", "cs", "y", "g", "ct", "dc", "u", "code", "ca", "C", "q", "w", "z", "v", "l", "m", "r", "cf", "p"], "d": ["o", "D", "dt", "x", "j", "data", "n", "da", "i", "y", "dy", "g", "h", "ds", "do", "u", "ad", "q", "w", "z", "l", "v", "m", "p"], "e": ["o", "x", "j", "E", "n", "s", "i", "y", "ec", "fe", "g", "h", "u", "end", "q", "ae", "w", "z", "v", "l", "m", "r", "p"], "f": ["file", "o", "x", "j", "fl", "n", "F", "s", "i", "y", "g", "h", "u", "q", "w", "z", "v", "l", "m", "r", "p"], "k": ["o", "x", "kk", "j", "ak", "ky", "n", "mk", "ck", "ek", "s", "ch", "i", "y", "sk", "g", "h", "ok", "ks", "dk", "u", "ad", "q", "w", "z", "K", "v", "m", "r", "bb", "p"], "t": ["it", "o", "tp", "at", "dt", "x", "bt", "j", "T", "int", "n", "ot", "s", "i", "y", "g", "ant", "h", "tt", "ct", "u", "nt", "pt", "w", "ta", "z", "l", "v", "m", "bb", "p"]}}
{"code": "\\narr = map(int, raw_input().split())\\n\\nprint(\"%d %d\" % (arr[0] * arr[1], arr[0] * 2 + arr[1] * 2))", "target": "303", "substitutes": {"arr": ["vec", "el", "part", "ext", "par", "err", "x", "prev", "ar", "img", "angle", "data", "app", "art", "diff", "coll", "int", "ind", "n", "all", "var", "list", "array", "adv", "Array", "av", "amp", "iq", "ray", "map", "val", "dim", "iter", "dr", "pr", "py", "rep", "adr", "aa", "br", "att", "len", "pre", "obj", "rr", "b", "adj", "arc", "dict", "frac", "cat", "patch", "attr", "str", "r", "fr", "air", "dat", "order", "arg", "enc"]}}
{"code": "S = input()\\nN = len(S)\\n\\n# 0101...\u306b\u3059\u308b\u5834\u5408\\ncnt1 = 0\\nfor i in range(len(S)):\\n    if S[i] != str(i % 2):\\n        cnt1 += 1\\n\\n# 1010...\u306b\u3059\u308b\u5834\u5408\\ncnt2 = 0\\nfor i in range(len(S)):\\n    if S[i] != str((i + 1) % 2):\\n        cnt2 += 1\\n\\nprint(min(cnt1, cnt2))\\n", "target": "495", "substitutes": {"S": ["U", "D", "GS", "SS", "R", "NS", "Test", "B", "T", "W", "SI", "s", "Y", "Source", "A", "G", "L", "Q", "I", "Socket", "X", "C", "DATA", "V", "Sort", "P", "K", "Session", "ID", "O", "H", "M", "Input", "F", "Z"], "N": ["D", "R", "NS", "E", "B", "Ns", "T", "n", "J", "W", "Y", "A", "L", "G", "NT", "NN", "Q", "I", "X", "C", "V", "P", "K", "O", "M", "F", "Z"]}}
{"code": "H,W,N,*a = map(int, open(0).read().split())\\nans = [[0] * W for _ in range(H)]\\ncount = 0\\nusing = 0\\nfor i in range(H*W):\\n    dm = divmod(i,W)\\n    h = dm[0]\\n    if h % 2 == 0:\\n        w = dm[1]\\n    else:\\n        w = (dm[1]+1) * (-1)\\n    ans[h][w] = using + 1\\n    count += 1\\n    if count == a[using]:\\n        using += 1\\n        count = 0\\nfor x in ans:\\n    print(*x)", "target": "380", "substitutes": {"H": ["U", "D", "S", "R", "E", "B", "RH", "T", "HH", "n", "Y", "A", "L", "G", "Wh", "EH", "Q", "Ha", "I", "X", "C", "HI", "V", "P", "K", "O", "M", "DH", "F", "Z"], "W": ["GW", "U", "D", "Width", "BW", "R", "E", "wa", "B", "WR", "T", "Y", "A", "L", "Wh", "G", "DW", "WP", "NW", "FW", "Q", "WA", "WC", "WS", "WB", "I", "X", "SW", "WN", "C", "V", "We", "P", "K", "MW", "O", "WE", "M", "F", "VW"], "N": ["U", "NA", "D", "S", "R", "NS", "E", "B", "Ns", "T", "n", "NH", "Y", "Ni", "L", "G", "NT", " n", "NN", "I", "X", "C", "V", "P", "O", "M", "F", "Z"], "a": ["area", "at", "c", "aw", "d", "ac", "wa", "n", "all", "an", "s", "array", "A", "y", "alpha", "sa", "ana", "span", "aa", "u", "f", "e", "b", "am", "ad", "ann", "ai", "ae", "z", "m", "p", "au"], "ans": ["ls", "aning", "ins", "reads", "ases", "ants", "amps", "ens", "n", "an", "s", "ads", "A", "fa", " means", "ats", "ents", "na", "sa", "anas", "ds", "ids", "nan", "nn", "span", "An", "can", "ana", "lines", "AN", "cas", "aned", "ANS", "ann", "ns", "chan", "es", "works", "ai", "ani", "ays", " scans", "xs", "eps", "p", "aus", "ons"], "_": ["n", "all", "id", "ow", "ip", "len", "f", "I", "m", "p"], "count": ["use", "c", "aw", "current", "sum", "nb", "ac", "ind", "n", "num", "depth", "array", "cc", "weight", "id", "y", "total", "g", "more", "ct", "index", "th", "how", "number", "age", "aa", "u", "f", "Count", "nt", "max", "b", "code", "ann", "base", "e", "child", "q", "counter", "z", " counting", "l", "found", "length", "p"], "using": ["use", "binding", "ling", "iw", "writing", "loading", "c", "aw", "current", "ng", "existing", "wa", "usage", "num", "including", "missing", "ping", "wing", "having", "weight", "id", "sw", "nn", "running", "number", "always", "heading", "wb", "u", "leading", "active", "used", "uses", "f", "Using", "reading", "b", "us", "padding", "wx", "no", "ending", "q", "working", "v", "now", "p", "ing", "user"], "i": ["pi", "k", "xi", "j", "c", "ci", "d", "phi", " I", "int", "ind", "n", "num", "bi", "id", "y", "g", "index", "ip", "si", "u", "iu", "f", "I", "b", "mi", "hi", "ai", "z", "chi", "v", "ii", "m", "r", "p"], "dm": ["mini", "wm", "di", "dom", "dt", "um", "fm", "om", "d", "gm", "wa", "mult", "num", "bi", "wd", "y", "dy", "width", "mn", "DM", "div", "dim", "do", "ym", "md", "dr", "cm", "dc", "nu", "dem", "zip", "dp", "mu", "e", "imp", "mi", "sm", "mm", "dl", "ai", "pm", "dn", "hm", "m", "dist", "bm"], "h": ["o", "k", "c", "d", "ht", "ws", "bh", "wa", "n", "t", "ch", "id", "y", "ph", "g", "div", "ah", "hh", "u", "f", "e", "hr", "end", "b", "hi", "ho", "q", "sh", "z", "l", "v", "hm", "m", "r", "ih", "p", "hs"], "w": ["o", "k", "fw", "c", "wan", "aw", "d", "ws", "wa", "n", "ww", "wt", "wd", "y", "weight", "width", "sw", "g", "we", "win", "ew", "wb", "u", "f", "e", "b", "q", "z", "v", "l", "m", "r", "p", "wu"], "x": ["xp", "work", "xi", "c", "ng", "xy", "int", "n", "xb", "an", "num", "id", "y", "sw", "na", "xxx", "xa", "ax", "ay", "index", "age", "xc", "u", "f", "e", "b", "X", "xx", "xes", "wx", "ai", "z", "xs", "ady", "nc", "p", "au"]}}
{"code": "c=input()\\nif(c.isupper()==True):\\n  print('A')\\nelse:\\n  print('a')", "target": "251", "substitutes": {"c": ["o", "mc", "case", "k", "input", "ci", "d", "ac", "a", "uc", "bc", "n", "cc", "s", "t", "i", "cs", "ec", "ctrl", "con", "h", "abc", "word", "dc", "cu", "u", "f", "e", "b", "ca", "C", "w", "l", "lc", "sc", "v", "m", "r", "text", "p"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\na.sort(reverse=True)\\n# \u4e0a\u4f4d 2/3\u3092\u53d6\u5f97\\naa=a[:2*n]\\n# \u4e0a\u4f4d\u304b\u30891,2..1,2 \u3068\u5272\u308a\u632f\u308b\u5834\u5408\u306e2\u4f4d\u306e\u96c6\u5408\u3092\u53d6\u5f97\\naaa=aa[1::2]\\n\\nprint(sum(aaa))", "target": "438", "substitutes": {"n": [" b", "o", "k", "j", "c", "ar", "node", "nb", "name", "an", "num", "i", "na", "g", "nn", "f", "adj", "b", "ns", "w", "z", "l", "v", "m", "p", "N"], "a": ["area", "o", "c", "aw", "ar", "ab", "ac", "ata", "an", "array", "A", "i", "alpha", "div", "sa", "abc", "ana", "aa", "u", "va", "f", "b", "am", "ad", "ans", "ga", "ai", "ae", "aaa", "ba", "v", "l", "ao", "aj", "m", "p", "au"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\nINF = 10 ** 9\\nMOD = 10 ** 9 + 7\\nfrom collections import deque\\n\\ndef main(): \\n    n = int(input())\\n    a = [int(input()) for _ in range(n)]\\n    a.sort()\\n\\n    q = deque()\\n    q.append(a[0])\\n    l = 1\\n    r = n-1\\n    left = True\\n    high = True\\n    ans = 0\\n    while r - l > 0:\\n        if high:\\n            if left:\\n                ans += abs(a[r] - q[0])\\n                q.appendleft(a[r])\\n                r -= 1\\n                left = False\\n            else:\\n                ans += abs(a[r] - q[-1])\\n                q.append(a[r])\\n                r -= 1\\n                left = True\\n                high = False\\n        else:\\n            if left:\\n                ans += abs(a[l] - q[0])\\n                q.appendleft(a[l])\\n                l += 1\\n                left = False\\n            else:\\n                ans += abs(a[l] - q[-1])\\n                q.append(a[l])\\n                l += 1\\n                left = True\\n                high = True\\n    \\n    ans += max(abs(a[l] - q[0]), abs(a[l] - q[-1]))\\n    print(ans)\\n\\nif __name__=='__main__':\\n    main()\\n", "target": "310", "substitutes": {"input": ["type", "empty", "element", "open", "plus", "feed", "current", "param", "raw", "output", "data", " Input", "format", "expression", "submit", "int", "util", "print", " output", "pull", "ll", "array", "range", "enter", "i", "sleep", "keep", " data", "python", "h", "image", "version", "sample", "parent", " f", "index", "request", "source", "main", "table", "error", " inputs", "active", "help", "reader", "reset", "select", "seed", " python", "inf", "lib", "accept", "length", "m", "conf", "Input", "temp", "count", "call"], "INF": ["Inf", "INI", " INI", "InI", "InF", "InFE", " InI", "INFE", " INf", " Inf", "INf", " InF", " InFE", " INFE"], "MOD": ["CPU", "SH", "MAG", "EXP", " LR", " EXP", "DEBUG", "REG", " CL", "MHz", "mod", " INT", " MEM", "magic", " CP", " mod", " CPU", "LOG", " Memory", " PHP", " magic", " ARM", " Python", "MIN", " mem", "EC", " RAM", "CL"], "n": ["o", "k", "x", "j", "c", "np", "d", "nb", "num", "t", "i", "y", "na", "network", "nn", "number", "nr", "u", "len", "size", "net", "f", "e", "nt", "fn", "b", "max", "ns", "no", "w", "z", "v", "m", "nc", "p", "ne", "N"], "a": ["ma", "area", "access", "auto", "ha", "sta", "x", "work", "c", "aw", "ar", "img", "ama", "ac", "wa", "app", "ab", "data", "aux", "ie", "args", "da", "an", "s", "array", "A", "t", "missing", "i", "y", "alpha", "front", "na", "sa", "something", "index", "za", "aa", "la", "u", "va", "active", "f", "e", "b", "am", "ad", "ca", "es", "ga", "ai", "ae", "aaa", "z", "v", "ea", "ao", "aj", "m", "p", " A", "au"], "_": [" __", " time", "all", " seq", "len", " block", " long", " mem", "p", " file"], "q": ["o", "qt", "k", "ve", "x", "c", "d", "question", "back", "ac", "bug", "queue", "int", "view", "qs", "s", "list", "que", "t", "ch", "cl", "i", "id", "y", "iq", "quit", "ph", "quick", "requ", "check", "qa", "force", "g", "h", "ue", "ack", "query", "co", "charge", "Q", "sq", "eq", "row", "u", "f", "e", "max", "b", "load", "qq", "sh", "w", "z", "qi", "form", "v", "complex", "m", "p", "qu", "dq", "count"], "l": ["el", "lp", "ls", "o", "k", "ol", "le", "x", "al", "j", "ul", "c", "d", "kl", "fl", "ell", "sl", "all", "ll", "s", "ly", "t", "L", "list", "i", "cel", "g", "h", "nl", "la", "il", "u", "len", "lb", "lin", "f", "rl", "e", "b", "pl", "dl", "w", "z", "v", "lc", "li", "m", "lu", "ln", "p"], "r": ["rs", "o", "k", "rd", "err", " R", "x", "j", "c", "er", "R", "d", "ar", "ro", "re", "s", "rh", "rb", "rf", "i", "yr", "rt", "ir", "h", "rar", "dr", "pr", "ra", "row", "nr", "u", "rel", "len", "ur", "f", "e", "rr", "br", "b", "rev", "rl", "hr", "w", "z", "cr", "v", "right", "m", "ru", "fr", "p", "rc", "sr"], "left": ["empty", "control", "draft", "fail", "stop", "front", "correct", "day", "null", "st", "Left", "end", "loaded", "lc", "right", "lt", "cl", "log", "loc", "full", "plus", "below", "only", "special", "center", "zero", "forward", "default", "max", "none", "limit", "no", "li", "top", "lost", "wrong", "low", "old", "lo", "long", "well", "cost", "push", "led", "lower", "last", "len", "layer", "value", "start", "fl", "little", "pos", "all", "ll", "L", "inner", "key", "min", "shell", "line", "rel", "size", "rl", "one", "bottom", "found", "small", "path", "level"], "high": ["history", "loc", "case", "control", "success", "full", "first", "close", "low", "large", "primary", "old", "sub", "only", "value", "lo", "long", "list", "loop", "stop", "well", "round", "correct", "phase", "ward", "forward", "self", "parent", "top", "null", "peak", "highest", "lower", "last", "fill", "rel", "default", "max", "end", "reset", "hi", "broad", "pop", "higher", "release", "High", "right", "fast", "path", "level"], "ans": ["rs", "ls", "offs", "san", "aning", "ras", "nas", "ins", "acl", "reads", "runs", "aos", "ars", "ants", "amps", "ens", "an", "ops", "ads", "s", "anc", "ats", " means", "oss", "ams", "anon", "sk", "na", "os", "breaks", "anas", "ds", "ks", "les", "nan", "span", "ana", "can", "anes", "cons", "la", "arts", "alls", "cas", "atan", "leans", "len", "aned", "ANS", "AN", "lan", "ann", "ns", "ad", "anges", "es", "ions", "ani", "aces", "ai", "ays", "params", "annels", "acs", "eps", "ln", "aus", "ons", "aps"]}}
{"code": "x, a, b = map(int, input().split())\\ndis1 = abs(x-a)\\ndis2 = abs(x-b)\\nprint('A' if dis1<dis2 else 'B')", "target": "408", "substitutes": {"x": ["work", "px", "c", "d", "xy", "data", "int", "i", "y", "tx", "width", "check", "xxx", "min", "ax", "h", "xe", "image", "rx", "ick", "ix", "index", "ex", "xc", "f", "dx", "e", "one", "X", "xx", "code", "max", "wx", "w", "z", "v", "cross", "m", "xs", "p"], "a": ["ma", "area", "c", "aw", "d", "ar", "ab", "ac", "art", "pa", "mA", "da", "ata", "an", "A", "fa", "i", "y", "alpha", "sa", "abc", "aa", "la", "va", "f", "e", "ad", "ca", "ga", "ai", "ae", "asa", "ba", "p", "au"], "b": ["o", "k", "abb", "c", "db", "d", "cb", "ab", "B", "bc", "n", "s", "A", "i", "y", "bs", "bar", "g", "fb", "abc", "lb", "e", "f", "sb", "ba", "l", "v", "bb", "m", "bf", "r", "p"], "dis1": ["disA", "diff2", "diffA", "Dis81", "dis81", "distb", "DisA", "DIS2", "dist2", "dis3", "disb", "Dis3", "Disb", "DIS81", "Dis2", "DIS3", "diffb", "diff1", "distA", "dist1", " dis3", "DIS1", " dis81", "Dis1"], "dis2": ["chi2", "DisTwo", "detTwo", "nob", "chi52", "detb", "noTwo", "disb", "chib", "Disb", " dis52", "det2", "Dis2", " disb", "no2", "disTwo", "chi1", "no1", "det1", "Dis52", "dis52", "Dis1"]}}
{"code": "A,B,N=map(int,input().split())\\nf=lambda x:(A*x)//B-A*(x//B)\\nprint(f(B-1 if B-1<=N else N))", "target": "407", "substitutes": {"A": ["AR", "U", "NA", "D", "S", "au", "E", "Alpha", "a", "CA", "T", "W", "mA", "Y", "L", "G", "AM", "Am", "alpha", "SA", "AU", "EA", "AP", "I", "AA", "X", "C", "MA", "Na", "V", "P", "API", "K", "AB", "H", "M", "AW", "F", "LA"], "B": ["U", "D", "S", "BF", "R", "E", "LB", "BB", "T", "W", "J", "BE", "n", "Y", "L", "G", "NB", "OB", "number", "Q", "Bs", "GB", "Band", "WB", "BER", "I", "b", "X", "FB", "C", "NUM", "V", "P", "K", "AB", "O", "H", "M", "F", "Z"], "N": ["Node", "D", "S", "R", "NS", "E", "NL", "Ns", "T", "n", "W", "J", "Y", "L", "G", "Len", "Num", "Part", " n", "Q", "I", "b", "X", "Number", "C", "V", "P", "K", "O", "M", "F", "Z"], "f": ["df", "fs", "x", "c", "fm", "d", "af", "fc", "ff", "fun", "F", "fa", "rf", "fe", "g", "fb", "h", "tf", "fx", "sf", "function", "e", "fn", "exec", "b", "func", "fold", "fit", "v", "l", "m", "bf", " F", "r", "cf", "p", "conf", "fp"]}}
{"code": "n=int(input())\\na=int(input())\\nx=n**2\\nprint(x-a)", "target": "379", "substitutes": {"n": ["o", "k", "j", "c", "d", "nb", "ny", "s", "num", "t", "A", "ni", "i", "y", "alpha", "g", "network", "nn", "nan", "number", "u", "f", "fn", "e", "nt", "b", "ns", "z", "v", "l", "m", "nc", "p", "ne", "N"], "a": ["ma", "area", "c", "d", "ac", "ab", "pa", "da", "an", "A", "y", "alpha", "na", "xa", "sa", "ax", "ia", "span", "aa", "va", "e", "b", "am", "ad", "ca", "ans", "ai", "ae", "asa", "ba", "aaa", "z", "p", "au"], "x": ["input", "xi", "c", "ng", "d", "xy", "data", "int", "an", "num", "A", "i", "y", "alpha", "na", "g", "xa", "ax", "h", "ix", "index", "number", "aa", "ex", "u", "f", "e", "b", "X", "xx", "shape", "w", "z", "m", "xs", "p"]}}
{"code": "import math\\nx = int(input())\\nans = math.ceil((-1 + math.sqrt(8 * x + 1)) / 2)\\nprint(ans)", "target": "350", "substitutes": {"x": ["ls", "xp", "xi", "px", "c", " sex", " cx", " y", "d", "a", "ss", "int", "n", " xx", "i", "y", " X", "alpha", "python", "xxx", "ax", "h", "xt", "ix", "index", "fx", " xp", " c", "ex", "xc", "f", "max", "b", "X", "xx", "xf", "es", "w", "z", "l", " XX", "m", "xs", "p"], "ans": ["anus", "nas", "ins", "ars", "ants", "amps", "ens", "an", "anc", " means", "ats", "ents", "anon", "ians", "na", "anas", "anse", "ks", "nan", "can", "anes", "AN", "atan", "aned", "leans", "cas", "ANS", "ann", "lan", "ns", "ane", "ani", "aces", "ays", "mean", "xs", "aus", "ons"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nMOD = 10 ** 9 + 7\\nINF = float('INF')\\nsys.setrecursionlimit(10 ** 5)\\n\\n\\nclass UnionFind:\\n    from typing import List, Set\\n\\n    def __init__(self, n):\\n        self.n = n\\n        self.parent = [-1] * n\\n\\n    def merge(self, x, y) -> int:\\n        x = self.leader(x)\\n        y = self.leader(y)\\n\\n        if x == y:\\n            return 0\\n\\n        if self.parent[x] > self.parent[y]:\\n            x, y = y, x\\n\\n        self.parent[x] += self.parent[y]\\n        self.parent[y] = x\\n\\n        return self.parent[x]\\n\\n    def same(self, x, y) -> bool:\\n        return self.leader(x) == self.leader(y)\\n\\n    def leader(self, x) -> int:\\n        if self.parent[x] < 0:\\n            return x\\n        else:\\n            self.parent[x] = self.leader(self.parent[x])\\n            return self.parent[x]\\n\\n    def size(self, x) -> int:\\n        return -self.parent[self.leader(x)]\\n\\n    def groups(self) -> List[Set[int]]:\\n        groups = dict()\\n\\n        for i in range(self.n):\\n            p = self.leader(i)\\n            if not groups.get(p):\\n                groups[p] = set()\\n            groups[p].add(i)\\n\\n        return list(groups.values())\\n\\n\\ndef main():\\n    N, M = map(int, input().split())\\n\\n    uf = UnionFind(N)\\n\\n    for _ in range(M):\\n        A, B = map(lambda x: int(x) - 1, input().split())\\n        uf.merge(A, B)\\n\\n    print(len(uf.groups()) - 1)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "354", "substitutes": {"readline": [" readfile", " readlog", " readLine", "READlog", "Readfile", "Readline", "READLine", "Readstring", "loadfile", "ReadLine", "ReadLINE", "readlog", "readstring", "Readlog", " readLINE", "loadstring", "loadline", " readstring", "READLINE", "READline", "readfile", "readLINE", "loadLine", "readLine"], "MOD": [" MIN", " FT", " DUP", " E", " EXP", " LOG", " fix", " R", " CR", " LF", " MB", " C", " log", " BASE", " error", " INT", " EXT", "SIZE", "MAX", " mod", " FD", " SF", " RR", " CRC", " magic", " mem", " INFO", " RAM", " MAX"], "INF": ["inF", "INEF", "InEF", "InF", "InFE", "INFE", " INFE", " INEF", "inFE", "inEF"], "self": ["auto", "home", "type", "work", "object", "c", "results", "raw", "dev", "go", "args", "per", "missing", "cmp", "time", "h", "next", "f", "load", "child", "gh", "yes", "right", "cl", "part", "k", "full", "first", "plus", "er", "d", "ws", "sys", "data", "ss", "remote", "root", "cs", "owner", "client", "error", "default", "max", "none", "no", "cross", "r", "block", "ctx", "point", "node", "event", "app", "context", "complete", "instance", "s", "game", "comp", "spec", "e", "func", "ps", "new", "es", "l", "form", "user", "o", "case", "Self", "this", "lf", "name", "pos", "view", "all", "cache", "on", "false", "g", "os", "ack", "ok", "co", "worker", "master", "host", "me", "parse", "one", "my", "other", "private", "q", "w", "shared", "skip", "now", "prev"], "n": ["o", "k", "j", "c", "np", "d", "node", "nb", "name", "a", "all", "num", "s", "t", "min", "g", "network", "inn", "nn", "nan", "span", "nu", "number", "nit", "nr", "u", "net", "size", "nt", "f", "e", "max", "b", "ns", "no", "w", "z", "l", "v", "m", "nc", "ne"], "parent": ["type", "home", "market", "current", "port", "left", "Parent", "family", "valid", "option", "gap", "source", "school", "shape", "child", "position", "memory", "right", "comment", "part", "central", "connection", "dest", "data", "remote", "root", "owner", "client", "fork", "offset", "post", "tree", "seed", "block", "top", "unit", "leader", "guard", "search", "point", "node", "parents", "author", "head", "instance", "list", "parser", "game", "mother", "pool", "server", "index", "channel", "function", "member", "slave", "origin", "page", "pair", "value", "all", "cache", "test", "target", "master", "host", "parse", "active", "peer", "chain", "path", "children"], "x": ["work", "xi", "j", "c", "t", "python", "xxx", "val", "h", "rx", "ick", "fx", "null", "f", "dx", "xf", "z", "m", "ext", "k", "full", "xp", "px", "d", "a", "lex", "ye", "id", " X", "xml", "fe", "na", "yx", "sex", "ay", "ix", "ox", "py", "default", "max", "code", "xes", "no", "content", "cross", "php", "cy", "xy", "event", "int", "xxxxxxxx", "xe", "xxxx", "index", "ex", "xc", "u", "e", "X", "xx", "wx", "v", "l", "ic", "xs", "o", "ya", "exp", "name", "ux", "Y", "tx", "key", "on", "xa", "g", "ax", "xt", "change", "one", "b", "my", "w", "rex", "pe"], "y": ["ey", "o", "type", "wy", "sy", "hy", "ya", "xi", "j", "c", "cy", "d", "yi", "oy", "yn", "xy", "ky", "ry", "ny", "yo", "s", "Y", "ye", "t", "ch", "zy", "yr", "key", "dy", "ty", "yan", "yx", "h", "ay", "ym", "ix", "ies", "py", "yt", "u", "e", "f", "ys", "b", "X", "xx", "ish", "yy", "w", "z", "v", "m", "ady", "vy"], "groups": ["services", "holes", "results", "strings", "users", "split", "allows", "blocks", "cells", "boxes", "powers", "words", "group", "bands", "agents", "jobs", "cycles", "files", "maps", "terms", "balls", "girls", "rows", "items", "packages", "roups", "tests", "rooms", "parts", "codes", "runs", "plugins", "parents", "roots", "models", "s", "breaks", "keys", "ids", "vals", "lines", "stores", "games", "sets", "objects", "ps", "players", "types", "ums", "states", "checks", "ages", "many", "ools", "reports", "rules", "changes", "forces", "outs", "g", "chains", "leaders", "orders", "lists", "ips", "gs", "resources", "fields", "names", "dates", " Groups", "values", "pages", "versions", "members", "children"], "i": ["pi", "o", "k", "xi", "j", "c", "d", "phi", "a", "io", "ie", "int", "ind", "ini", "bi", "id", "g", "h", "ix", "index", "ip", "u", "iu", "f", "I", "e", "b", "ish", "w", "P", "z", "qi", "v", "l", "m", "li"], "p": ["pi", "o", "part", "type", "pid", "tp", "k", "j", "c", "d", "point", "pat", "a", "pa", "int", "per", "s", "vp", "po", "t", "id", "api", "g", "cp", "pr", "ip", "py", "dp", "u", "pre", "e", "f", "b", "q", "P", "ep", "l", "v", "jp", "pc", "m", "pe", "ap", "bp"], "N": ["U", "D", "S", "CN", "R", "NS", "E", "Ns", "T", "W", "J", "Y", "L", "G", "CNN", "NM", "NN", "Q", "I", "X", "C", "NI", "Ne", "NUM", "RN", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "FM", "OM", "T", "W", "J", "Y", "G", "L", "RM", "MS", "MN", "Q", "I", "X", "MI", "C", "NUM", "V", "MB", "P", "K", "MX", "m", "O", "H", "F", "Z"], "uf": ["df", "lf", "um", "ul", "cv", "Buff", "ctx", "auc", "UFF", "uc", "du", "aux", "ff", " buf", "ef", "buf", "fed", "raf", "ph", "former", "uff", "gb", "iter", "fff", "ffff", "tf", "UF", "ush", "fi", "buff", "f", "utils", "obj", "Buffer", "FB", "buffer", "GF", "utf", "FF", "NF", "ref", "bf", "TF", "cf", "F", "isf", "uffy", "fp"], "_": ["k", " __", "__", "g", " j", "f", "of", "l"], "A": ["AR", "U", "Ca", "As", "NA", "D", "New", "E", "Alpha", "a", "CA", "T", "IA", "This", "At", "Y", "G", "L", "AM", "BA", "GA", "AU", "An", "AP", "Ar", "I", "AA", "X", "C", "P", "API", "O", "AC", "Input", "F", "LA"], "B": ["U", " b", "EB", "D", "BS", "R", "IB", "E", "Ub", "T", "UB", "HB", "Y", "L", "G", "Ab", "BA", "VB", "OB", "AP", "BL", "GB", "QB", "DB", "WB", "BER", "b", "X", "FB", "C", "MB", "P", "AB", "O", "F"]}}
{"code": "N = int(input())\\n\\nans = 10**18\\n\\nfor i in range(1, int(N**0.5)+1):\\n    if N % i == 0:\\n        b = N//i\\n        ans = min(ans, max( len(str(i)),  len(str(b))))\\nprint(ans)", "target": "184", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "NC", "NL", "B", "Ns", "T", "n", "Y", "Ni", "L", "A", "G", "Len", "Num", "CNN", "NT", " n", "Size", "NN", "No", "Q", "I", "X", "NO", "C", "Na", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "ans": ["ls", "x", "anus", "ass", "aning", "anan", "anned", "nas", "ins", "ases", "a", "ars", "ants", "ss", "ens", "an", "s", "ads", "A", "ops", " means", "ats", "oss", "ents", "anon", "na", "os", "anas", "ks", "nn", "ana", "span", "nan", "can", "cons", "aff", "AN", "atan", "aned", "len", "anne", "ANS", "activation", "ann", "ad", "ns", "lan", "ane", "sn", "scan", "ani", "ano", "bb", "gen", "eps", "ln", "p", "aus", "ons"], "i": ["pi", "it", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "ar", "phi", " I", "ri", "a", "io", "lo", "start", "int", "ind", "n", "num", "ini", "ni", "bi", "id", "y", "g", "h", "ib", "index", "ip", "bin", "si", "u", "iu", "e", "f", "I", "ai", "z", "chi", "l", "v", "ii", "ic", "r", "m", "li", "p"], "b": ["o", "k", "x", "j", "c", "d", "ob", "nb", "a", "ab", "bh", "B", "n", "s", "num", "rb", "bi", "y", "bs", "body", "h", "fb", "ib", "bin", "number", "Bs", "wb", "lb", "f", "e", "base", "sb", "w", "l", "v", "r", "bb", "p", "count"]}}
{"code": "class Dice:\\n  \\n  def __init__(self, input_dice):\\n    self.flow = [input_dice[3], input_dice[1], input_dice[0], input_dice[5], input_dice[2], input_dice[4]]\\n    self.dice = [i for i in range(6)]\\n  \\n  def setNumber(self, n0, n1, n2, n3, n4, n5):\\n    self.dice[0] = n0\\n    self.dice[1] = n1\\n    self.dice[2] = n2\\n    self.dice[3] = n3\\n    self.dice[4] = n4\\n    self.dice[5] = n5\\n    return self.dice\\n    \\n  def roll(self, dir):\\n    if dir == 'S':\\n      self.setNumber(self.flow[0], self.flow[2], self.flow[5], self.flow[1], self.flow[4], self.flow[3])\\n      self.flow = self.dice\\n      return self.dice\\n    if dir == 'N':\\n      self.setNumber(self.flow[0], self.flow[3], self.flow[1], self.flow[5], self.flow[4], self.flow[2])\\n      self.flow = self.dice\\n      return self.dice\\n    if dir == 'W':\\n      self.setNumber(self.flow[2], self.flow[1], self.flow[4], self.flow[0], self.flow[3], self.flow[5])\\n      self.flow = self.dice\\n      return self.dice\\n    if dir == 'E':\\n      self.setNumber(self.flow[3], self.flow[1], self.flow[0], self.flow[4], self.flow[2], self.flow[5])\\n      self.flow = self.dice\\n      return self.dice\\n\\ndice = list(map(int, input().split()))\\nd = Dice(dice)\\ndir = list(input())\\nfor i in range(len(dir)):\\n  d.roll(dir[i])\\nprint(d.dice[2])\\n", "target": "401", "substitutes": {"self": ["type", "work", "object", "c", "results", "raw", "wrapper", "by", "per", "high", "proc", "time", "body", "craft", "h", "next", "tmp", "school", "f", "end", "load", "base", "shape", "ref", "style", "m", "right", "p", "cl", "part", "k", "full", "http", "x", "plus", "er", "ng", "ws", "a", "data", "sys", "ss", "result", "get", "client", "error", "process", "no", "r", "gen", "public", "top", "method", "ls", "field", "manager", "ctx", "point", "node", "event", "app", "context", "complete", "instance", "n", "s", "man", "config", "pack", "plugin", "comp", "model", "function", "u", "graph", "spec", "e", "func", "ps", "resp", "state", "of", "layer", "l", "form", "user", "o", "case", "Self", "this", "lf", "name", "pos", "view", "all", "hand", "cache", "hard", "on", "false", "g", "os", "parent", "co", "worker", "master", "the", "host", "me", "parse", "b", "my", "other", "private", "www", "q", "w", "shared", "bb", "now", "utils", "path"], "input_dice": ["input_Dace", "input_lesh", "input_dickle", "input_uace", "input_nise", "input_mandickle", "input_Dce", "input_disICE", "input_line", "input_lickle", "input_cape", "input_drice", "input_datice", "input_diced", "input_madince", "input_bice", "input_uice", "input_bICE", "input_uince", "input_dICE", "input_sdice", "input_pice", "input_datine", "input_madiced", "input_licing", "input_nape", "input_Dicing", "input_dape", "input_dine", "input_pICE", "input_Dince", "input_cise", "input_disice", "input_gICE", "input_ciamond", "input_sdace", "input_uiced", "input_disesh", "input_drine", "input_dace", "input_dince", "input_dce", "input_besh", "input_Dice", "input_datices", "input_mandace", "input_cice", "input_lise", "input_dodge", "input_lices", "input_sdickle", "input_madice", "input_niamond", "input_drike", "input_liamond", "input_dicing", "input_pce", "input_lodge", "input_DICE", "input_lice", "input_madace", "input_lce", "input_mandice", "input_Diced", "input_bce", "input_like", "input_disace", "input_pace", "input_mandodge", "input_nice", "input_drices", "input_bace", "input_lape", "input_sdodge", "input_datike", "input_gce", "input_dike", "input_dise", "input_dices", "input_gice", "input_desh", "input_diamond", "input_lICE", "input_lace", "input_gicing"], "flow": ["control", "work", "energy", "feed", "object", "cycle", "port", "hold", "Flow", "grid", "ge", "progress", "cart", "machine", "wall", "sequence", "zip", "issue", "shape", "load", "base", "position", "draw", "group", "file", "log", "design", "full", "layout", "output", "plane", "weight", "wave", "version", "network", "forward", "age", "process", "plant", "fly", "volume", "length", "block", "call", "unit", "use", "frame", "demand", "note", "core", "wheel", "sync", "ide", "input", "low", "point", "node", "transfer", "lane", "press", "gravity", "update", "board", "pool", "cell", "image", "charge", "model", "run", "graph", "route", "form", "case", "element", "page", "down", "view", "pull", "loop", "force", "parent", "line", "row", "one", "lock", "scroll", "module", "engine", "order", "level", "flight"], "dice": ["dace", "dumb", "ldICE", "dedine", " dace", "gicing", "sdice", "bise", "derve", "sdive", " diameter", "gice", "dge", "ardice", "nica", "bices", "dedickle", "dicer", "indiameter", "dederve", "gices", " dense", "nense", "niamond", "dICE", "sice", " dinea", "dlice", "nace", "fice", "drICE", " dase", "wdice", "nase", "bicing", "doICE", "domice", "indiced", "tce", "bice", " dise", "sICE", "tnum", "t\n", "datase", "sdace", " dicing", "dine", "wdinea", "Diameter", "tices", "ardumb", "dica", "godicer", "dinea", "Dise", "indicing", "domumb", "datense", " diced", "godice", "diameter", "dickle", "dnum", "dce", "mandine", "indice", "mandice", " dICE", "biced", "dive", "dince", "Dices", "tence", "DICE", "nive", "dricing", " dine", "dloe", "Dice", "Dicing", "nince", "Dince", "godise", "nICE", "sdicing", "datice", "Dge", "fiameter", " dive", "domense", "doice", "ldise", "tice", "ardense", "dence", "drice", "indICE", " dices", "diced", "datce", " diamond", "dise", " dickle", "drge", "datiamond", "sicing", " dge", "doe", "sdica", "dliamond", "fices", "doince", " derve", "fICE", "dedice", " dicer", "dicing", "mandickle", "wdise", " dnum", "Dence", "D\n", "siameter", "niameter", "biameter", "ldice", "dense", "ldicing", "Diamond", "sdise", " dica", "datices", "dlICE", "numb", "nice", "Dce", "doiameter", "sdICE", "indices", "ardince", "dices", "wdicer", "gICE", " doe", "dase", "diamond", "godinea", "Dnum", "Doe", "giameter", "manderve", "datence", "domince"], "i": ["pi", "di", "o", "ji", "k", "x", "xi", "j", "c", "gi", "ci", "yi", "ri", "phi", "a", "io", "ie", "int", "ind", "n", "ui", "ini", "ni", "bi", "id", "y", "g", " j", "h", "ij", "index", "ip", "si", "u", "iu", "f", "I", "ti", "b", "mi", "hi", "ai", "z", "qi", "l", "ii", "li", "r", "ei", "p", "zi"], "n0": ["N8", "p0", "N0", "nt1", "N1", " n8", "nt0", "N2", "n8", "p2", "nt2", "p1", "nt8"], "n1": ["N01", "c1", "N1", "c2", "c3", "ninone", " none", "n01", " n01", "nin2", "none", "N2", "nin3", "N3", "nin1", "c01"], "n2": ["n02", "N4", "ne2", "N02", "ne02", "p5", " n02", "p4", "N1", "ne5", "p02", "N2", "p2", "ne4", "p1"], "n3": ["ne1", "n15", "N03", "N4", "n03", " n03", "ns1", "ns15", "N1", " n15", "ns03", "ne03", "N15", "N3", "ne4", "ns3", "ne3"], "n4": [" n14", "no4", "N4", "nt5", "nt44", "nt4", "n44", "N14", "no3", "n14", " n44", "no14", "N5", "N2", "no2", "N3", "nt2", "N44"], "n5": ["nn6", "n75", "N4", "p5", "p4", " n6", "nn5", "n6", "N5", " n75", "nn7", "N2", "p6", "p2", "nin7", "N6", "nin5", "nin75", " n7", "n7", "nn75", "nin6"], "dir": ["unit", "ort", "log", "di", "loc", "uri", "dis", "area", "mode", "type", "draft", "det", "alt", "cycle", "rad", "dest", "DIR", "coll", "diff", " directory", "dec", "pos", "ind", "reverse", "direction", "depth", "range", "dra", "wd", "Dir", "id", "sort", "round", "dy", "uni", " direction", "div", "keep", "dim", "ir", "md", "dr", "dc", "handle", "lim", "quad", "DI", "radius", "zip", "rel", "orient", "dep", "spec", "direct", "group", "rev", "der", "directory", "rec", "desc", "dl", "dict", "draw", "lib", "style", "ii", "dist", "order", "req", "path"], "d": ["di", "o", "dom", "D", "x", "od", "j", "c", "ded", "done", "pd", "a", "cmd", "data", "nd", "bd", "mod", "n", "s", "t", "gd", "sd", "dy", "g", "ds", "die", "do", "md", "dr", "u", "f", "e", "dd", "b", "ad", "dl", "dict", "z", "l", "v", "cd", "grad", "r", "m", "dat", "p", "ld"]}}
{"code": "import collections\\nINF = 10**18\\nh,w = map(int,input().split())\\nli = [list(input()) for i in range(h)]\\nkoho = []\\nd = [[-1]*w for i in range(h)]\\nq = collections.deque([])\\nfor i in range(h):\\n    for j in range(w):\\n        if li[i][j] == \"#\":\\n            d[i][j] = 0\\n            q.append([i,j])\\ndx = [1,0,-1,0]\\ndy = [0,1,0,-1]\\nwhile q:\\n    p = q.popleft()\\n    y = p[0]\\n    x = p[1]\\n    for i in range(4):\\n        nx = x + dx[i]\\n        ny = y + dy[i]\\n        if 0<=nx<w and 0<=ny<h:\\n            if d[ny][nx] == -1:\\n                q.append([ny,nx])\\n                d[ny][nx] = d[y][x] + 1\\nans = -1\\nfor i in range(h):\\n    for j in range(w):\\n        ans = max(ans,d[i][j])\\nprint(ans)", "target": "657", "substitutes": {"INF": ["InV", " inN", "INI", "INN", "InN", " inV", "InI", "inN", "InF", " inF", "INV", " inI", "inI", "inF", "inV"], "h": ["o", "k", "oh", "hw", "c", "ht", "bh", "wa", " H", "n", "W", "s", "rh", "t", "ch", "time", "g", "ah", "en", "hh", "u", "f", "e", "max", "hr", "b", "hi", "gh", "sh", "z", "v", "l", "hm", "r", "m", "H", "he", "wh", "hs"], "w": ["wp", "k", "wl", "c", "hw", "ws", "wa", "W", "n", "ww", "wt", "s", "t", "wd", " W", "nw", "width", "sw", "g", "we", "win", "ew", "rw", "wb", "u", "f", "max", "e", "b", "wx", "kw", "z", "wo", "v", "l", "m", "r", "wh"], "li": ["pi", "di", "lp", "o", "le", "db", "c", "ci", "ie", "lo", "cli", "n", "ini", "LI", "list", "L", "bi", "sd", "bl", "line", "py", "la", "si", "ee", "Li", "dd", "b", "ad", "Lu", "dl", "ai", "qi", "l", "lc", "ii", "v", "lu", "ln"], "i": ["pi", "di", "ji", "it", "o", "iw", "k", "xi", "c", "ci", "yi", "ri", "a", "io", "ie", "int", "n", "s", "ui", "ini", "ni", "bi", "id", "g", "ij", "ia", "ix", "ip", "si", "u", "iu", "e", "ti", "I", "f", "b", "hi", "ki", "ai", "z", "chi", "qi", "l", "v", "ii", "m", "r", "ih", "ei", "vi"], "koho": ["bip", "bbd", "bappa", "skbd", "skip", "skern", "bern", "skappa"], "d": ["di", "o", "D", "dt", "k", "od", "c", "db", "ded", "pd", "data", "du", "nd", "n", "da", "s", "t", " dd", "id", "sd", "g", "ds", "dh", "do", "md", "dc", "dad", "u", "f", "dd", "e", "b", "ad", "dl", "dict", "z", "dn", "v", "l", "cd", "m", "did", "dat", "ld"], "q": ["o", "qt", "k", "c", "a", "queue", "view", "qs", "quant", "list", "que", "t", "ch", "cl", "quit", "iq", "id", "check", "g", "qa", "ue", "self", "query", "Q", "sq", "eq", "u", "f", "e", "qq", "sh", "z", "qi", "v", "l", "pe", "m", "r", "req", "qu", "dq"], "j": ["kj", "it", "ji", "o", "js", "k", "c", "ijk", "jc", "jon", "ie", "ind", "n", "J", "oj", "t", "jit", "on", "g", "ij", "ib", "job", "index", "jl", "ix", "u", "iu", "ja", "f", "je", "e", "b", "jj", "z", "v", "jp", "l", "ii", "r", "m", "aj", "uj"], "dx": ["dt", "xp", "px", "eddy", "ie", "dev", "diff", "ww", "da", "zy", "wd", "wh", "ax", "ds", "md", "ix", "fx", "dc", "py", "dp", "xd", "dd", "wx", "dl", "dj", "z", "dn", "cd", "xs", "dist", "dat", "dq"], "dy": ["dt", "wy", "fy", "ded", "yi", "eddy", "xy", "ie", "du", "da", "zy", "vy", "ds", "phy", "dh", "md", "py", "dd", "xd", "b", "zx", "yd", "dl", "yy", "dj", "z", "dies", "dn", "l", "did", "dq"], "p": ["lp", "pi", "tp", "part", "o", "op", "c", "sp", "np", "a", "pa", "n", "per", "s", "po", "t", "api", "cp", "post", "pr", "py", "u", "pre", "f", "e", "pp", "b", "ps", "P", "z", "l", "v", "patch", "pc", "m", "r", "ap", "pe"], "y": ["ey", "o", "sy", "k", "ya", "c", "cy", "xy", "yi", "oy", "ky", "ry", "n", "s", "Y", "ye", "t", "zy", "ty", "ay", "py", "yt", "u", "f", "e", "b", "yy", "z", "v", "l", "sky", "vy"], "x": ["wy", "k", "ya", "xi", "px", "c", "xy", "n", "tx", "key", "ax", "yx", "sex", "ix", "index", "ox", "fx", "ex", "xc", "u", "f", "e", "X", "xx", "z", "v", "l", "xs"], "nx": ["Nw", "Nx", "ynci", "jy", " ndx", "ndx", "jw", "Nj", "Nex", "jx", "ynw", " nj", " nz", "nz", "nw", "nj", "yny", "Nci", "Ny", "ney", "mnx", "mnw", "nez", "yndx", "Ndx", " nw", "jex", " nex", "new", " nci", "nex", "mny", "Nz", "mnj", "ynx", "nci"], "ny": ["NY", "wy", "sy", "cy", "sp", "ng", "oy", "nb", "ky", "kee", "n", "ot", "zy", "vy", "ni", "sk", "nw", "na", "gy", "nn", "nan", "ix", "py", "nu", "si", "nit", "net", "nt", "ns", "xx", "pn", "sn", "yy", "z", "dn", "nv", "nc", "sky", "ne", "zi", "yah"], "ans": ["ls", "cus", " ants", "anus", "san", "aning", "nas", "ras", "ins", "a", "ars", "ants", "ens", "an", "anc", "s", "ops", " means", "cs", "ents", "ians", "sk", "na", "os", "anas", "ds", "gan", "ks", "nan", "An", "les", "ana", "can", "anes", "cons", "span", "AN", "atan", "aned", " Ans", "ania", "ANS", "anne", "ann", "ps", "ns", "lan", "ad", "ane", "scan", "es", "ani", "ai", "aus", "ons", "au"]}}
{"code": "n, m, x = map(int, input().split())\\na = [[] for _ in range(n)]\\nfor i in range(n):\\n    a[i] = list(map(int, input().split()))\\nans = 10000000000000\\nfor i in range(2 ** n):\\n    money = 0\\n    understand = [0] * m\\n    for j in range(n):\\n        if i >> j & 1:\\n            money += a[j][0]\\n            for k in range(1, m + 1):\\n                understand[k - 1] += a[j][k]\\n    if min(understand) >= x:\\n        ans = min(money, ans)\\nprint(ans if ans < 10000000000000 else -1)\\n", "target": "112", "substitutes": {"n": ["pi", "o", "c", "d", "nm", "nb", "num", "s", "t", "y", "mn", "min", "nan", "nn", "number", "u", "net", "f", "e", "b", "ns", "sn", "no", "w", "z", "l", "v", "nc", "ln", "p", "M", "ne", "N"], "m": ["o", "mc", "c", "d", "num", "y", "mn", "g", "h", "ms", "ym", "cm", "u", "e", "f", "mu", "b", "mi", "mm", "q", "w", "pm", "z", "v", "l", "r", "M", "p"], "x": ["xp", "xi", "px", "c", "d", "an", "xxxxxxxx", "y", "xxx", "xa", "ax", "h", "mx", "xxxx", "rx", "ix", "index", "number", "ex", "xc", "e", "f", "max", "dx", "b", "X", "xx", "wx", "w", "z", "v", "l", "xs", "p"], "a": ["ma", "o", "anta", "work", "c", "aw", "ar", "ama", "ab", "ac", "data", "app", "wa", "aux", "all", "da", "an", "array", "A", "y", "alpha", "na", "sa", "ana", "ia", "aa", "la", "aff", "u", "va", "f", "b", "am", "ad", "ca", "ga", "ai", "ae", "w", "aaa", "z", "ao", "p", "au"], "_": ["o", "c", "ac", "ind", "all", "num", "id", "h", "ip", "f", "I", "q", "p", "l"], "i": ["ik", "pi", "di", "o", "ji", "xi", "c", "ci", "d", "yi", "ie", "int", "ind", "ui", "ini", "ni", "id", "y", "ij", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "b", "mi", "im", "ai", "z", "qi", "v", "l", "ii", "li", "p"], "ans": ["auto", "san", "nas", "ins", "aos", "ations", "ants", "aid", "ances", "amps", "any", "anch", "an", "s", "anc", "ops", "ads", " means", "ats", "cs", "ams", "anon", "sk", "na", "os", "xxx", "ant", "anas", "ms", "ks", "ana", "nan", "ia", "span", "can", "anes", "cons", "AN", "aned", "ania", "ANS", "ann", "lan", "ns", "anges", "ki", "mas", "no", "works", "ai", "ani", "aces", "ays", "annels", "antis", "ones", "yes", "xs", "p", "han", "ons"], "money": ["ma", "mini", "auto", "rank", "o", "demand", "ban", "mc", "movie", "c", "blue", "music", "cow", "amount", "paid", "amo", "why", "go", "an", "mmm", "margin", "ch", "math", "cho", "fine", "picture", "cost", "sk", "time", "price", "magic", "ia", "ow", "yahoo", "world", "how", "Money", "cash", "dollar", "mo", "fortune", "stuff", "interest", "power", "chi", "fee", "company", "conf", "p", "sky"], "understand": [" understood", "forestanding", "undstanding", "Understand", "undersstanding", " underlook", "forestand", "Underground", "Understood", "underground", "understood", "undersstood", "overstanding", "forelook", "overstood", " underground", "undstand", "undersground", "Understanding", "undersstand", "understanding", "forestood", "underlook", "overlook", " understanding", "undlook", "overstand", "undstood"], "j": ["kj", "ik", "ji", "o", "js", "kk", "c", "d", "jc", "jon", "ie", "ind", "J", "all", "y", "h", "ij", "jl", "jo", "u", "ja", "f", "e", "je", "b", "jj", "im", "q", "w", "z", "v", "jp", "l", "aj", "r", "ii", "p", "uj"], "k": ["ik", "o", "kn", "kk", "c", "d", "kl", "mk", "s", "id", "y", "kg", "sk", "ka", "g", "h", "ks", "kin", "u", "e", "f", "b", "ki", "q", "w", "z", "K", "v", "r", "p", "kr", "km", "ku"]}}
{"code": "from math import sqrt\\nx1, y1, x2, y2 = map(float, input().split())\\nr = sqrt((x2 - x1)**2 + (y2 - y1)**2)\\nprint(r)", "target": "196", "substitutes": {"x1": ["xf2", " xOne", "y0", "v2", "vOne", "X2", " x0", "X12", "x0", "X1", "y12", "X0", "x12", "v1", "xfOne", "xf1", " x12", "xOne"], "y1": ["y0", "yOne", "x3", "Y3", "Y1", "ey1", "eyOne", "x0", "ey0", "Y2", "Y0", " y3", " y0", "ey2", "y3", "YOne", "xOne"], "x2": ["yTwo", " xTwo", "ax5", "ax2", "x6", "pTwo", "ax82", " x5", " x82", "y6", "x82", "xTwo", "p6", "p2", "x5", "y82", "y5", "p1", "ax1", " x6"], "y2": ["y0", "x3", "Y3", "Y1", "x22", "x0", "Y2", "z22", "z1", "y22", "Y0", "z2", " y3", " y0", "Y22", "y3"], "r": ["k", "err", "x", "c", "er", "R", "d", "ar", "rad", "n", "rh", "var", "mr", "rb", "t", "range", "arr", "rt", "g", "rg", "lr", "nr", "br", "e", "f", "rr", "rl", "b", "res", "q", "cr", "l", "v", "m", "p", "kr", "rc", "sr"]}}
{"code": "N = int(input())\\n\\nl = []\\nfor i in range(N+1):\\n    if i % 5 == 0 or i % 3 == 0:\\n        l.append(0)\\n    else:\\n        l.append(i)\\n\\nprint(sum(l))", "target": "167", "substitutes": {"N": ["D", "S", "R", "NS", "NL", "NC", "B", "Ns", "T", "n", "W", "J", "Y", "Ni", "L", "G", "NT", " n", "NN", "Q", "Length", "I", "X", "NO", "C", "NI", "Ne", "Na", "V", "P", "K", "O", "H", "M", "F", "Z"], "l": ["el", "lp", "ls", "o", "log", "k", "ol", " L", "le", "ul", "j", "c", "d", "left", "kl", "lag", "lo", "fl", "sl", "n", "ll", "list", "t", "L", "split", "g", "bl", "nl", "line", "la", "u", "lb", "e", "f", "Li", "b", "like", "pl", "dl", "z", "v", "lc", "m", "li", "r", "ln", "p"], "i": ["pi", "di", "o", "ji", "k", "x", "xi", "j", "c", "gi", "ci", "d", "phi", "ri", "oi", "a", "start", "int", "ind", "n", "ini", "ni", "bi", "id", "ix", "index", "si", "u", "iu", "e", "I", "f", "ti", "b", "ai", "z", "chi", "v", "ii", "li", "ei", "p"]}}
{"code": "#import numpy as np\\nimport sys, math\\nfrom itertools import permutations, combinations\\nfrom collections import defaultdict, Counter, deque\\nfrom math import factorial#, gcd\\nfrom bisect import bisect_left, bisect_right #bisect_left(list, value)\\nsys.setrecursionlimit(10**7)\\nenu = enumerate\\nMOD = 10**9+7\\ndef input(): return sys.stdin.readline()[:-1]\\npl = lambda x: print(*x, sep='\\n')\\n\\nS = input()\\nK = int(input())\\n\\nfor i, s in enu(S):\\n    if s != '1':\\n        print(s)\\n        exit()\\n    if i == K-1:\\n        print(s)\\n        exit()\\n", "target": "119", "substitutes": {}}
{"code": "s = str(input())\\nt = str(input())\\nN = len(s)\\nS = [0] * N\\nT = [0] * N\\n\\nfor i in range(N):\\n  S[i] = s[i]\\n  T[i] = t[i]\\n  \\nfor i in range(N):\\n  for j in range(N):\\n    if j == 0:\\n      x = S[j]\\n      S[j] = S[j + 1]\\n    elif 1 <= j < N - 1:\\n      S[j] = S[j + 1]\\n    else:\\n      S[j] = x\\n  #print(S)    \\n  if S == T:\\n    print(\"Yes\")\\n    quit()\\n    \\nprint(\"No\")    \\n      \\n      \\n", "target": "721", "substitutes": {"s": ["states", "ls", "o", "services", "js", "sync", "c", "sp", "d", "ses", "a", "ss", "sl", "n", "space", "strings", "cs", "y", "bs", "g", "sa", "ts", "ds", "sq", "south", "si", "u", "sets", "letters", "f", "e", "b", "ns", "sh", "w", "z", "l", "v", "m", "xs", "se", "small", "p"], "t": ["tp", "o", "at", "out", "tm", "c", "R", "d", "n", "y", "test", "g", "target", "ts", "tt", "tf", "u", "f", "e", "b", "pt", "w", "ta", "P", "z", "v", "l", "m", "r", "M", "p"], "N": ["Node", "NA", "D", "R", "NS", "E", "NL", "NE", "NC", "B", "Ns", "n", "J", "W", "Sn", "Y", "Ni", "L", "G", "Len", "Num", "CNN", "NT", "NM", "Size", " n", "NN", "No", "Q", "I", "X", "C", "NI", "Ne", "V", "P", "K", "KN", "O", "H", "M", "F", "Z"], "S": ["U", "SE", "SH", "SO", "D", "SS", "R", "NS", "E", "RS", "US", "Sin", "ss", "B", "Sing", "Ns", "TS", "n", "Si", "J", "SI", "Y", "W", "A", "L", "G", "St", "Sa", "SL", "PS", "Q", "Set", "I", "Socket", "X", "SU", "C", "Sc", "Su", "V", "Sl", "P", "Space", "H", "M", "F", "Z"], "T": ["U", "D", "Tab", "Temp", "Time", "TN", "Total", "E", "Test", "B", "TS", "W", "J", "Type", "Y", "L", "G", "NT", "PT", "Q", "WT", "I", "X", "C", "TT", "V", "P", "Text", "O", "TF", "M", "H", "F", "Z"], "i": ["ik", "pi", "it", "o", "ji", "mini", "di", "k", "xi", "c", "gi", "ci", "ie", "int", "ind", "n", "ui", "ini", "ni", "bi", "id", "y", "info", "on", "ir", "ij", "si", "u", "iu", "e", "ti", "I", "end", "f", "ki", "im", "ai", "z", "p", "qi", "v", "l", "ii", "li", "m", "io"], "j": ["kj", "ji", "o", "js", "step", "k", "jen", "xi", "c", " ii", "a", "jc", "pos", "ind", "oj", "J", "n", "num", "jit", "ni", "id", "y", "key", "g", "ij", "h", "ix", "index", "jl", "job", "jo", "u", "ja", "f", "je", "I", "e", "b", "jj", "jet", "obj", "q", "ai", "z", "l", "jp", "aj", "v", "li", "m", "ii", "p", "uj"], "x": ["k", "xp", "xi", "c", "xy", "XX", "a", "int", "n", "xxxxxxxx", "y", "alpha", "xxx", "na", "xa", "ax", "h", "xxxx", "ix", "index", "ex", "xc", "f", "e", "dx", "max", "X", "xx", "q", "w", "z", "v", "l", "m", "xs", "r", "p"]}}
{"code": "X, K, D = map(int, input().split())\\n\\nX = abs(X)\\nreach_or_before = X // D\\n\\n\\nif K <= reach_or_before:\\n    print(X - D * K)\\nelse:\\n    #remaining jump\\n    remain = K - reach_or_before\\n    before_dist = X - D * reach_or_before #(>0)\\n    after_dist = D * (reach_or_before + 1) - X\\n    if remain % 2 == 0:\\n        print(before_dist)\\n    else:\\n        print(after_dist)\\n", "target": "66", "substitutes": {"X": ["U", "ZX", "CL", "x", "R", "E", "XX", "Test", "Weight", "Data", "T", "RH", "W", "Shape", "Y", "Cross", "A", "L", "G", "GE", "DX", "EL", "Q", "Model", "Length", "I", "XY", "C", "PE", "XL", "DC", "TX", "V", "DATA", "P", "XP", "Code", "CR", "CP", "ID", "EX", "XXX", "H", "IX", "M", "F", "CE", "N", "Z"], "K": ["U", "KR", "k", "IK", "Max", "CD", "DK", "SK", "Ak", "Ka", "KE", "W", "J", "Y", "NK", "G", "L", "Power", "KK", "unk", "AK", "Mask", "Q", "PK", "I", "C", "DC", "VK", " k", "V", "P", "Ke", "Sk", "KS", "O", "H", "M", "KC", "CH", "N", "Z"], "D": ["U", " d", "CD", "R", "d", "E", "Do", "Ds", "B", "T", "DO", "W", "Y", "DP", "G", "DX", "L", "DA", "A", "DD", "DM", "DS", "MD", "Q", "DI", "DB", "I", "dL", "C", "DF", "DC", "V", "P", "DL", "O", "H", "M", "DH", "F", "N", "Z"], "reach_or_before": ["reach_nor_right", "reach_or_Before", "reach_or_right", "reach_nor_after", "reach_nor_before", "reach_nor_Before", "reach_or_after"]}}
{"code": "s = input()\\nsum = 700\\nfor i in range(3):\\n    if s[i] == \"o\":\\n        sum += 100\\nprint(sum)\\n", "target": "231", "substitutes": {"s": ["states", "services", "parts", "ls", "S", "c", "events", "d", "ins", "ws", "steps", "abs", "args", "ops", "ows", "outs", "ches", "g", "comments", "ts", "blocks", "ds", "ks", "rows", "gs", "lines", "sets", "acts", "sym", "b", "ns", "ans", "es", "tests", "sb", "stats", "groups", "conf", "xs", "words", "p"], "sum": ["cup", "part", "average", "empty", "fat", "out", "um", "ass", "amount", "scale", "output", "data", "value", "ss", "diff", "all", "num", "cal", "weight", "result", "total", "alpha", "cost", "val", "score", "loss", "bin", "error", "gram", "percent", "size", "ask", "max", "match", "mass", "sh", "add", "mean", "Sum", "fee", "conf", "skip", "comment", "hash", "temp", "rank", "user", "count"], "i": ["pi", "o", "k", "x", "xi", "j", "c", "ci", "d", "yi", "phi", "col", "a", "start", "lo", "int", "ind", "n", "num", "bi", "id", "key", "val", "ix", "index", "si", "u", "iu", "e", "I", "b", "z", "p", "chi", "v", "l", "ii", "li", "ei", "io", "zi"]}}
{"code": "s=list(input())\\nans=0\\nfor i in range(len(s)//2):\\n    if s[i]==s[len(s)-1-i]:\\n        continue\\n    ans+=1\\nprint(ans)", "target": "387", "substitutes": {"s": ["states", "services", "o", "ls", "parts", "S", "ssl", "input", "c", "d", "ws", "ses", "ins", "a", "opens", "ss", "n", "abs", "args", "qs", "ows", "strings", "cs", "g", "os", "cells", "ds", "rows", "ips", "blocks", "gs", "lines", "south", "si", "u", "ores", "sets", "e", "f", "scripts", "b", "ns", "es", "sb", "w", "l", "v", "sg", "ains", "m", "xs", "r", "p"], "ans": ["aves", "ls", "nas", "ins", "ases", "ars", "ants", "ances", "amps", "ens", "an", "ads", "anc", "changes", "actions", " means", "ats", "asts", "ents", "anon", "ams", "sk", "na", "comments", "plan", "anas", "ds", "ks", "ids", "ana", "can", "anes", "lines", "arts", "AN", "cas", "aned", "leans", "ANS", "ann", "lan", "ns", "ions", "ani", "aces", "ays", "annels", "ace", "ons", " ads"], "i": ["pi", "di", "k", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "ri", "phi", "a", "ie", "start", "int", "ind", "n", "ini", "id", "y", "h", "ix", "index", "eni", "si", "u", "iu", "e", "I", "f", "end", "b", "ai", "z", "p", "qi", "v", "l", "ii", "li", "m", "r", "ei", "zi"]}}
{"code": "n = int(input())\\nH = list(map(int,input().split()))\\ndp = [0 for _ in range(n+1)]\\ndp[1] = abs(H[1] - H[0])\\nfor i in range(2,n):\\n    b1 = dp[i-1] + abs(H[i] - H[i-1])\\n    b2 = dp[i-2] + abs(H[i] - H[i-2])\\n    dp[i] = min(b1,b2)\\nprint(dp[-2])", "target": "5", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", " N", "nb", "node", "Ns", "num", "s", "t", "ni", "y", "count", "g", "h", "network", "nn", "nu", "u", "len", "net", "f", "fn", "e", "b", "ns", "C", "sn", "w", "z", "dn", "l", "v", "m", "r", "nc", "p", "ne", "N"], "H": ["Host", "U", "SH", " h", "D", "HT", "S", "HD", "HC", "R", "Z", "E", "Hi", "HP", "B", "RH", "T", "OH", "W", "HH", "NH", "J", "rh", "Y", "HB", "A", "L", "G", "PH", "FH", "HK", "EH", "h", "HTTP", "HS", "Q", "WH", "Ha", "GH", "I", "X", "C", "HM", "HI", "V", "P", "HE", "K", "API", "MC", "TH", "hm", "Ch", "M", "DH", "F", "CH", "N", "CL"], "dp": ["wp", "df", "pi", "tp", "lp", "dt", "D", "di", "dos", "pb", "db", "sp", "np", "d", "pd", "pair", "data", "dev", "bh", "pos", "prep", "direction", "vp", "hp", "DP", "pkg", "wd", "api", "fd", "dim", "ds", "dh", "cp", "dB", "dr", "dc", "ip", "density", "pipe", "dep", "e", "default", "imp", "pre", "address", "ps", "mm", "DC", "dl", "drop", "P", "dm", "position", "params", "pm", "grad", "bb", "dist", "deb", "dump", "dat", "p", "gp", "fp"], "_": [" v", "k", "x", " __", " I", "int", " time", "num", "id", "y", "g", "val", "h", " x", "len", "f", "I", "p"], "i": ["mini", "pi", "di", "o", "k", "x", "j", "c", "xi", "ci", "d", "gi", "phi", " I", "io", "ie", "start", "int", "ind", "s", "ini", "ui", "t", "bi", "id", "y", "info", "key", " j", "h", "ix", "index", "ip", "source", "multi", "si", "u", "iu", "f", "I", "ti", "mu", "b", "my", "mi", "e", "ai", "z", "qi", "l", "v", "ii", "li", "m", "ih", "p"], "b1": ["rb3", "b81", "bOne", "B81", "rb8", "B2", "B1", "bb2", "b3", "rbOne", "b8", "B3", "bb1", "bbOne", " b81", "bb3", " b8", " bOne", " b3", "bb8", "bb81", "rb1"], "b2": ["b182", "baTwo", "ba2", "fbTwo", "b02", "eb2", " b182", "fb2", " bTwo", "bTwo", "b72", "ba72", "ob02", "fb1", "eb02", "eb182", "ob182", " b72", "obTwo", " b02", "ob2", "fb72", "ebTwo", "ba1"]}}
{"code": "sa = input()\\ns = list(sa)\\na = [chr(ord('a') + i) for i in range(26)]\\nif sa == \"zyxwvutsrqponmlkjihgfedcba\":\\n    print(-1)\\nelif len(s) != 26:\\n    for i in range(len(a)):\\n        if a[i] not in s:\\n            s.append(a[i])\\n            print(\"\".join(s))\\n            exit()\\nelse:\\n    used = [s[25]]\\n    for i in range(25, 0, -1):\\n        if a.index(s[i-1]) > a.index(s[i]):\\n            used.append(s[i-1])\\n        else:\\n            for j in range(a.index(s[i-1])+1, 26):\\n                if a[j] in used:\\n                    s[i-1] = a[j]\\n                    print(\"\".join(s[:i]))\\n                    exit()\\n\\n\\n\\n\\n", "target": "81", "substitutes": {"sa": ["sta", "asi", " ta", "ama", "wa", "sl", "pa", "da", "fa", " Sa", "Sa", "sd", "api", "na", "xa", " cs", "apa", "SA", "sea", "za", "la", "aa", " SA", "si", "va", " ga", "oa", "sha", "ora", "ca", "ga", "sb", "ai", "ae", "ta", "asa", "ea", "sg", "sc", "sam"], "s": ["services", "c", "times", "abs", "args", "strings", "ches", "h", "blocks", "f", "us", "ns", "sup", "words", "p", "aus", "js", "ings", "d", "ws", "ses", "ss", "sl", "an", "cs", "y", "rows", "ks", "items", "uses", "tests", "sb", "sg", "groups", "r", "aps", "parts", "ls", "S", "sync", "n", "comments", "ds", "lines", "stores", "south", "u", "sets", "e", "settings", "ps", "ans", "es", "l", "v", "xs", "states", "o", "string", "signed", "ins", "rules", "g", "os", "gs", "si", "b", "w", "shared", "se", "small", "aws"], "a": ["ma", "area", "auto", "parts", "o", "sta", "x", "c", "aw", "ar", "d", "ama", "ab", "wa", "ac", "data", "n", "ast", "args", "ata", "an", "array", "A", "all", "missing", "da", "Sa", "y", "alpha", "api", "na", "os", "ks", "ia", "za", "aa", "la", "u", "va", "f", "e", "b", "am", "ca", "ad", "ans", "es", "ga", "ai", "ae", "w", "asa", "aaa", "z", "ea", "ada", "ao", "v", "xs", "another", "p", "aus", "au"], "i": ["mini", "pi", "di", "ji", "o", "uri", "iw", "x", "xi", "c", "gi", "ci", "d", "yi", "oi", "io", "ie", "start", "ori", "temp", "int", "ind", "n", "ui", "ini", "ni", "bi", "id", "y", "info", "api", "ij", "ib", "isi", "index", "ip", "ix", "eni", "si", "u", "iu", "fi", "e", "ti", "I", "f", "b", "ga", "ai", "z", "qi", "v", "l", "ii", "li", "ei", "r", "ih", "p", "vi"], "used": ["use", "usable", "signed", "confirmed", "expected", "safe", "necessary", "sp", "required", "ended", "filled", "util", "usage", "activated", "missing", "users", "using", "umed", "Used", "set", "allowed", "free", "changed", "checked", "owned", "active", "uses", "ed", "us", "opened", " unused", "needed", "oved", "available", "loaded", "placed", "started", "seen", "found", "shared", "supported", "user"], "j": ["kj", "ji", "o", "js", "k", "xi", "jc", "ie", "ind", "n", "J", "num", "id", "y", "ah", "ij", "h", "ix", "jl", "ip", "jo", "si", "u", "iu", "ja", "e", "je", "f", "b", "jj", "q", "ai", "z", "qi", "v", "jp", "aj", "jam", "li", "l", "ii", "p", "uj"]}}
{"code": "N, W = map(int, input().split())\\n\\nw, v = map(int, input().split())\\n\\nvalues = [[] for _ in range(4)]\\n\\nvalues[0].append(v)\\n\\nfor _ in range(N-1):\\n    x, y = map(int, input().split())\\n    values[x-w].append(y)\\n\\nn = [0]*4\\nfor i in range(4):\\n    n[i] = len(values[i])\\n    values[i].sort(reverse=1)\\n\\nans = 0\\nans0 = 0\\nans1 = 0\\nans2 = 0\\nfor n0 in range(n[0]+1):\\n    if n0 > 0:\\n        ans0 += values[0][n0-1]\\n    if n0 * w > W:\\n        break\\n    for n1 in range(n[1]+1):\\n        if n1 > 0:\\n            ans1 += values[1][n1-1]\\n        else:\\n            ans1 = 0\\n        if n0 * w + n1 * (w+1) > W:\\n            break\\n        for n2 in range(n[2]+1):\\n            ww = n0 * w + n1 * (w+1) + n2 * (w+2)\\n            if n2 > 0:\\n                ans2 += values[2][n2-1]\\n            else:\\n                ans2 = 0\\n            if ww > W:\\n                break\\n            n3 = (W - ww) // (w+3)\\n            ans = max(ans, ans0+ans1+ans2+sum(values[3][:n3]))\\n\\nprint(ans)", "target": "512", "substitutes": {"N": ["U", "D", "S", "R", "B", "Ns", "T", "J", "Y", "Ni", "L", "Wh", "Num", "NW", "NN", "MN", "Q", "I", "X", "C", "V", "P", "K", "O", "H", "M", "F", "Z"], "W": ["U", "GW", "WI", "D", "BW", "Ws", "R", "E", "WF", "wa", "B", "T", "WR", "EW", "Y", "L", "G", "Wh", "DW", "WP", "WW", "we", "NW", "Q", "WA", "WC", "Wa", "WS", "WH", "I", "X", "SW", "WN", "C", "CW", "V", "P", "We", "K", "MW", "O", "H", "M", "WE", "F", "VW", "WD", "Z"], "w": ["wp", "GW", "iw", "k", "fw", "wl", "work", "c", "aw", "wan", "way", "d", "week", "ws", "a", "wa", "wt", "s", "t", "weight", "wave", "width", "sw", "g", "h", "we", "word", "wal", "wall", "win", "ew", "wn", "wb", "u", "f", "e", "b", "wx", "q", "kw", "z", "We", "l", "m", "wh", "p"], "v": ["o", "k", "j", "uv", "c", "d", "value", "vv", "vs", "s", "t", "g", "h", "we", "u", "f", "e", "b", "q", "V", "sv", "z", "l", "m", "r", "p"], "values": ["ports", "states", "codes", "checks", "forms", "maps", "events", "results", "runs", "reads", "marks", "plays", "data", "value", "times", "images", "vs", "roots", "models", "args", "s", "rules", "ops", "changes", "strings", "details", "cases", "breaks", "comments", "val", "we", "blocks", "ms", "rows", "measures", "flows", "cells", "vals", "lists", "index", "names", "lines", "items", "places", "frames", "Values", "days", "settings", "weights", "objects", "ps", "ns", "ends", "errors", "tests", "es", "pages", "ims", "ves", "years", "stats", "versions", "groups", "types", "ones", "grades", "verts", "rates", "series", "vi"], "_": ["k", "out", "j", " un", " line", "__", " time", "all", "non", "g", "val", " self", " j", "ow", "ip", "row", "f", " num", "q", "p"], "x": ["o", "k", "xi", "j", "c", "d", "xy", "a", "wa", "int", "s", "num", "t", "na", "ax", "h", "ix", "win", "ex", "u", "f", "dx", "b", "X", "xx", "z", "l", "xs", "p"], "y": ["o", "k", "ya", "j", "c", "cy", "d", "yi", "wa", "ny", "yo", "s", "Y", "ye", "t", "dy", "h", "u", "e", "f", "b", "q", "yy", "z", "l", "r", "p", "vy"], "n": ["o", "k", "out", "j", "c", "np", "d", "nb", "sum", "name", "Ns", "num", "an", "s", "t", "ni", "on", "na", "en", "nn", "index", "un", "nu", "number", "net", "size", "nt", "f", "e", "b", "ns", "sn", "z", "l", "m", "r", "nc", "nin", "p", "ne"], "i": ["pi", " u", "o", "k", "xi", "j", "c", "d", "yi", "ri", " I", "io", "int", "ind", " ip", "num", "non", "ini", "ui", "ni", "bi", "id", "iq", " j", "ix", "index", "ip", "multi", " seq", "si", " id", "u", "iu", "e", "I", "f", "b", " nan", " num", " k", "z", "p", "qi", "l", "ii", "m", "li", "r", "vi"], "ans": ["offs", "ls", "cus", "anus", "nas", "ras", "ins", "a", "ations", "ars", "ants", "vs", "amps", "ens", "photos", "an", "s", "man", " means", "ats", "outs", "cs", "oss", "ians", "ents", "ams", "sk", "na", "anas", "plan", "ds", "gan", "ks", "nan", "ana", "span", "can", "cons", "AN", "cas", "leans", "aned", "ANS", "ann", "lan", "ns", "ends", "errors", "ions", "ai", "ani", "ays", "mean", "xs", "types", "aus", "ons"], "ans0": ["aus000", "n000", "ans3", "ANS1", "n5", "ann0", "ann3", "ans00", "ANS0", "an00", "aus1", "annee", "anee", "lan0", "ans000", "n00", "an1", "aus00", "ann1", "aus0", "an5", "an3", "an000", "lan5", "ans5", "an0", "ANS3", "ANSee", "ansee", "lan1", "lan00"], "ans1": ["chan2", "an2", "ANS1", "ANS2", "ann0", "annOne", "ANS0", "ann11", "annone", "aned0", "an11", "chanone", "ansOne", "ans11", "chan0", "anone", "aned1", "chan1", "an1", "ann1", "anne1", "aned2", "anOne", "anedone", "ansone", "anneOne", "an0", "ANS11", "anne0", "ann2", "anne2"], "ans2": ["an2", "ANS1", "ANS2", "nas2", "ann0", "anas2", "ansTwo", "atan0", "anas1", "ann02", "anntwo", "anas4", "nastwo", "annTwo", "an4", "ANS4", "atan1", "anasTwo", "atan02", "ann4", "an1", "ann1", "nas1", "an02", "ANS02", "ans4", "an0", "ann2", "ans02", "nas4", "anstwo", "atan2", "anTwo", "antwo"], "n0": [" n192", "un192", " n02", "onose", "an050", "yn02", "on0", "onzero", "n192", "on200", "en192", "en06", "rn0", "nin89", "nin06", " n200", "en89", "yn200", "an120", "on180", "num00", "an180", "n4", "an3", "un0", "rn250", " n250", "n050", "on06", "en0", "n180", "un2", "en2", " nzero", "on120", "n02", "an00", "on89", "num120", "an4", "n120", "yn250", "rn1", "nzero", "num180", "w0", "enose", "w3", "yn0", "en250", "n250", "num0", "w050", " n4", "yn1", "un250", "n06", "rn02", "n89", "w4", "n00", "nin0", "nose", "on00", "n200", "ynzero", "an0", "ninose", " n050"], "n1": ["an2", "yn01", "ne1", "pn1", "rnOne", "N4", "n100", "N8", "ne2", " n4", "x1", "NOne", "rn0", "an11", "p0", "N0", "nOne", "yn1", "yn8", "nt1", "c11", "pn01", "x2", "rn1", "pn8", "n11", "c1", "nt01", "xone", "N1", "an1", "an100", "pnOne", "c2", "n4", " none", "n01", "rn8", "ne11", "none", "N2", "n8", "p2", "x4", "ynOne", "c100", "ne100", "p1", "nt8", "yn0", "ntOne"], "n2": ["an2", "nn6", "nn0", "snTwo", "yn62", "anSecond", "nn2", "sn2", " ntwo", "N4", "ne2", "nTwo", " n4", "p0", "ntwo", "sn212", "un6", "N0", "ann212", "annTwo", "sn62", "yn212", "ann62", "p4", "Ntwo", " n6", "neSecond", "ynTwo", "N1", "an72", "n62", "n4", "un2", "nSecond", "ne6", "n6", "ne72", "yn2", "N2", "p2", "an6", "N6", "unSecond", "nntwo", "n212", "ann2", "p1", "un72", "n72"], "ww": ["wp", "wy", "iw", "rew", "fw", "wr", "wl", "wat", "hw", "aw", "week", "ws", "wa", "ss", "wed", "tw", "wd", "nw", "WW", "sw", "width", "we", "wal", "ow", "who", "ew", "nn", "rw", "wn", "wb", "wow", "dd", "wx", "www", "wo", "eks", "wait", "now", "wh", "awa"], "n3": ["num03", "N03", "n03", " n03", "NThree", "nn3", "nThree", " n39", "num3", "N2", "N3", " nThree", "N39", "nn39", "n39", "num2", "nnThree"]}}
{"code": "from __future__ import division, print_function\\nfrom sys import stdin\\nfrom math import radians, sin, cos, sqrt\\na, b, degree = (float(s) for s in stdin.readline().split())\\nh = b * sin(radians(degree))\\ns = a * h / 2.0\\nL = sqrt(a**2 + b**2 - 2.0*a*b*cos(radians(degree))) + a + b\\nprint('{:.4f}\\n{:.4f}\\n{:.4f}'.format(s, L, h))", "target": "221", "substitutes": {"a": ["ma", "area", "x", "c", "aw", "ar", "d", "ama", "ac", "ab", "pa", "n", "da", "an", "A", "fa", "i", "y", "alpha", "na", "g", "sa", "abc", "ia", "aa", "u", "va", "e", "f", "ad", "ca", "ga", "ai", "ae", "w", "aaa", "ba", "z", "l", "aj", "m", "p", " A", "au"], "b": ["o", "eb", "k", "x", "abb", "j", "c", "d", "bh", "ab", "B", "bc", "bd", "pa", "n", "rb", "A", "t", "bi", "i", "y", "dy", "bs", "g", "fb", "gb", "ib", "lb", "u", "e", "f", "base", "sb", "be", "w", "z", "ba", "l", "v", "bb", "m", "r", "bf", "p"], "degree": ["unit", "mode", "grade", "D", "loc", "le", " deg", "done", "energy", " omega", "aw", "connection", "d", "page", "de", "relation", "device", "angle", "output", "data", "scope", "B", "expression", "bound", "dec", "document", "W", "circle", "direction", "side", "dir", " degrees", "dy", "width", "gender", "body", "div", "g", "version", "deg", "division", "beta", "nom", "e", "tree", "shape", "directory", "edge", "module", "location", "v", "ii", "length", "duration", "m", "dist", "order", "bearing"], "s": ["ls", "o", "fs", "S", "su", "x", "sin", "c", "sp", "d", "ws", "ses", "kl", "ss", "times", "sl", "n", "abs", "Si", "t", "A", "i", "cs", "y", "sd", "g", "sa", "os", "ds", "source", "gs", "sf", " S", "sq", "south", "si", "u", "spec", "f", "sym", "e", "ps", "ns", "es", "sb", "sh", "w", "sv", "z", "l", "sign", "m", "str", "se", "ln", "p", "hs"], "h": ["hl", "SH", "ha", "k", "x", "j", "c", "d", "phi", "B", " H", "sl", "n", "HH", "W", "rh", "ll", "t", "A", "y", "ph", "g", "ah", "hh", "u", "len", "e", "f", "hi", "ho", "q", "sh", "w", "z", "l", "v", "length", "m", "hm", "H", "p", "hs"], "L": ["U", "SH", "ls", "D", "S", "c", "R", "E", "LB", "B", "LS", "T", "W", "Si", "n", "A", "G", "SL", " l", "Li", "I", "C", "LL", "Lu", "V", "w", "P", "sh", "l", "length", "H", "M", "ln", "F", "cl", "N", "Z"]}}
{"code": "s = str(input())\\np = str(input())\\nif p[0] not in s:\\n\tprint(\"No\")\\nelif p in s:\\n\tprint(\"Yes\")\\nelse:\\n\tfor i in range(len(s)):\\n\t\ts = s[1:] + s[:1]\\n\t\tif p in s:\\n\t\t\tprint(\"Yes\")\\n\t\t\tbreak\\n\telse:\\n\t\tprint(\"No\")\\n", "target": "661", "substitutes": {"s": ["services", "c", "events", "args", "qs", "ows", "t", "strings", "ches", "h", "cells", "f", "ns", "less", "m", "its", "words", "ings", "ssl", "d", "ws", "ses", "a", "ss", "sl", "cs", "y", "ters", "rows", "items", "sym", "sb", "sg", "r", "ls", "parts", "fs", "S", "input", "sp", "n", "ds", "lines", "posts", "ces", "south", "u", "sets", "e", "ps", "es", "params", "l", "v", "xs", "states", "o", "string", "ins", "start", "sts", "os", "g", "sa", "ts", "sample", "ips", "gs", "si", "b", "ions", "w"], "p": ["wp", "lp", "tp", "o", "part", "x", "j", "op", "c", "sp", "np", "param", "a", "pos", "pa", "n", "vp", "t", "bp", "y", "python", "g", "ips", "cp", "post", "pr", "ip", "u", "pp", "e", "f", "pre", "b", "ps", "pn", "q", "w", "P", "z", "pm", "l", "v", "jp", "pc", "m", "r", "ap", "pe", "fp"], "i": ["it", "k", "x", "j", "gi", "c", "sp", "a", "ie", "ind", "n", "num", "id", "h", "isin", "index", "ip", "bit", "si", "u", "iu", "f", "I", "q", "ai", "z", "li"]}}
{"code": "import sys\\nfrom copy import deepcopy\\n\\ndef main():\\n    INF = 10**18\\n    input = sys.stdin.readline\\n    N, M, L = [int(x) for x in input().split()]\\n    d = [set() for _ in range(N+1)]\\n    ds = [[INF] * (N+1) for _ in range(N+1)]\\n    bs = [[INF] * (N+1) for _ in range(N+1)]\\n    for _ in range(M):\\n        A, B, C = [int(x) for x in input().split()]\\n        A, B = sorted([A, B])\\n        d[A].add(B)\\n        if L >= C:\\n            ds[A][B] = C\\n\\n    nes = set()\\n    for k in range(1, N+1):\\n        for i in range(1, N+1):\\n            for j in range(i+1, N+1):\\n                ds[i][j] = min(ds[i][j], ds[min(i, k)][max(i, k)] + ds[min(k, j)][max(k, j)])\\n                if ds[i][j] <= L:\\n                    bs[i][j] = 1\\n\\n    for k in range(1, N+1):\\n        for i in range(1, N+1):\\n            for j in range(i+1, N+1):\\n                bs[i][j] = min(bs[i][j], bs[min(i, k)][max(i, k)] + bs[min(k, j)][max(k, j)])\\n\\n    Q, = [int(x) for x in input().split()]\\n    for _ in range(Q):\\n        s, t = sorted(int(x) for x in input().split())\\n        print(bs[s][t]-1 if bs[s][t] < INF else -1)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "467", "substitutes": {"INF": ["INFD", " INFE", "CONI", "inFIN", "CONFIN", "Inf", "INI", "CONFE", "PINN", "CONN", "InI", "PINf", "InFIN", "ANF", " INFD", "ANI", " INInf", " INFIN", " INI", "PINF", "InN", "inFD", "PINI", "InF", "INFE", "CONf", "UNFIN", "INf", "UNInf", "inF", " INN", "INFIN", "inInf", "ANFE", "CONF", "INN", "UNF", "INInf", "ANf", " INf", "UNFD"], "input": ["U", "file", "string", "empty", "S", "first", "out", "response", "current", "param", "raw", "output", "PUT", "data", "a", " Input", "session", "back", "value", "complete", "pixel", " IN", "int", "view", " output", "single", "pull", "progress", "array", "config", "list", "IN", "IL", "initial", "INT", "radio", "connect", "image", "version", "sample", "command", "parent", "filename", "request", "source", "null", "error", "bit", " S", "stream", " inputs", "background", "active", "process", "reset", "select", "buffer", "inf", "q", "accessible", "memory", "form", "stem", "Input", "text", "path", "condition"], "N": ["U", "Node", "NA", "II", "D", "S", "CN", "Network", " NI", "R", "NS", "E", " I", "NE", "Ns", "T", "n", "J", "W", "Y", "Ni", "Wh", "Len", "Num", "Part", "Power", "CNN", "NT", "NM", " n", "Size", "NN", " Ne", "No", "Length", "Count", "I", "X", "Group", "Na", "Ne", "NG", "V", "P", "K", "Nat", "O", "H", "F", "Class", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "T", "n", "J", "W", "Y", "G", "Num", "NM", "MN", "I", "X", "V", "P", "Mo", "K", "m", "O", "H", "F", "CM", "Z"], "L": ["U", "LM", "D", "S", "R", "E", "NL", "T", "W", "J", "n", "Y", "LI", "G", "EL", "OL", "LA", "len", "I", "Li", "X", "LL", "V", "P", "K", "l", "DL", "length", "O", "H", "ln", "F", "dL"], "x": ["ext", "full", "xp", "xi", "px", "c", "hex", "work", "ci", "xy", "lex", "int", "n", "plex", "ux", "num", "ck", "vent", "id", "y", "xml", "on", "check", "na", "xxx", "ax", "h", "xt", "xxxx", "sex", "rx", "word", "co", "ix", "index", "fx", "bit", "ex", "xc", "u", "e", "f", "max", "opt", "b", "X", "xx", "code", "insert", "xes", "wx", "q", "im", "w", "z", "draw", "v", "l", "cross", "ic", "text", "xs", "m", "p"], "d": ["df", "o", "D", "dos", "dt", "c", "db", "ded", "pd", "Ds", "a", "bd", "n", "dy", "g", "DS", "dh", "dc", "f", "e", "dd", "ad", "b", "dal", "dl", "z", "l", "v", "cd", "m", "p", "ld"], "_": ["out", " __", "ac", "lex", "__", "sys", "all", "ck", "non", "___", "g", "val", "ay", "ix", "ox", "ip", "un", " function", "f", "code", "p", "ing", "block"], "ds": ["rs", "ls", "services", "df", "D", "dt", "dos", "js", "S", "sync", "db", "ils", "nas", "ins", "ws", "pd", "Ds", "a", "dds", "ss", "vs", "uds", "da", "sts", "ads", "icks", "docs", "qs", " dd", "cs", "sd", "dy", "ths", "DS", "css", "des", "dh", "ks", "lists", "dc", "gs", "ists", "cdn", "dd", "ys", "CS", "dal", "ns", "b", "scripts", "ans", "ps", "tests", "es", "dl", "ays", "las", "cks", "cd", "xs", "eps", "dat"], "bs": ["ls", "fs", "codes", "js", "eb", "forms", "BS", "db", "bes", "fts", "web", "ins", "cb", "ob", "ses", "ab", "plugins", "bits", "ss", "bc", "als", "vs", "obs", "bis", "bos", "pos", "abs", "banks", "qs", "bi", "outs", "cs", "bas", "cases", "os", "views", "bing", "fb", "css", "blocks", "abc", "des", "lists", "ks", "bl", "ts", "gs", "vals", "Bs", "lbs", "boxes", "b", "ps", "ns", "ros", "res", "iss", "ions", "ubs", "cks", "las", "bb", "utils"], "A": ["Ac", "U", "Ca", "As", "D", "S", "Alpha", "a", "Auth", "Ak", "CA", "Si", "This", "At", "mA", "G", "AM", "Am", "Ma", "AU", "An", "AP", "aa", "Ar", "I", "AA", "b", "X", "App", "The", "Na", "Av", "One", "ai", "P", "K", "API", "AB", "AC", "H", "F", "LA"], "B": ["U", "EB", " b", "D", "Be", "BF", "Gb", "R", "Other", "E", "LB", "Ub", "Bi", "BB", "T", "UB", "W", "BBC", "BE", "J", "G", "Ab", "NB", "BA", "BD", "OB", "BI", "Bah", "GB", "Bs", "QB", "DB", "WB", "CB", "I", "b", "X", "FB", "Block", "V", "MB", "P", "K", "BC", "AB", "O", "F", "Beta", "Bur"], "C": ["U", "D", "S", "CN", "c", "R", "Z", "E", "CA", "T", "W", "CU", "G", "CCC", "Con", "JC", "CF", "I", "CS", "X", "CW", "DC", "V", "P", "CC", "Cs", "K", "CR", "BC", "VC", "Ch", "Cu", "AC", "KC", "F", "CM", "CE", "CL"], "nes": [" u", " J", "S", " E", " iss", " NI", " ind", " indices", " si", " I", " ii", " CI", " K", " p", " ne", " kb", " dd", " cs", " Ne", " e", " S", " DI", " db", " ni", "I", " bits"], "k": ["ik", "o", "ke", "kk", "c", "ak", "ky", "ie", "n", "ck", "kick", "ch", "king", "id", "y", "key", "sk", "g", "unk", "h", "ok", "ks", "uk", "kid", "ko", "kin", "u", "e", "f", "b", "ki", "q", "sh", "w", "kw", "z", "K", "v", "l", "m", "r", "p", "km", "ku"], "i": ["ik", "pi", "it", "II", "uri", "ji", "o", "di", "mini", "xi", "idi", "c", "gi", "ci", "yi", "ijk", "oi", "ri", "a", "ie", "ori", "cli", "int", "n", "J", "ini", "ui", "ni", "bi", "id", "y", "info", "api", "ir", "ib", "inn", "ia", "ix", "ip", "eni", "iv", "si", "u", "iu", "e", "I", "f", "one", "b", "ki", "ai", "ani", "P", "z", "p", "qi", "l", "v", "ii", "ic", "li", "m", "io", "zi"], "j": ["note", "kj", "el", "di", "ji", "o", "js", "ik", "ke", "xi", "op", "c", "er", "ak", "ijk", "jc", "ie", "ind", "n", "J", "oj", "jit", "ch", "id", "y", "key", "jan", "g", "h", "ij", "bj", "ix", "job", "jl", "jo", "br", "u", "ja", "f", "I", "obj", "adj", "b", "jj", "e", "je", "jet", "rev", "q", "dj", "ani", "sh", "z", "gh", "qi", "v", "jp", "l", "ii", "aj", "fr", "m", "r", "jam", "p", "uj", "li"], "Q": ["U", "D", "S", "MQ", "Max", "R", "E", "IQ", "T", "W", "J", "QU", "qs", "Y", "G", "I", "X", "q", "V", "Qu", "P", "K", " q", "Query", "O", "H", "F", "Z"], "s": ["ls", "o", "tp", "js", "S", "c", "ses", "ss", "n", "abs", "cs", "y", "id", "site", "g", "os", "h", "ts", "gs", "si", "u", "sets", "e", "f", "b", "us", "ns", "ps", "es", "tests", "q", "sh", "w", "l", "v", "its", "p"], "t": ["o", "tp", "at", "dt", "c", "T", "int", "n", "ot", "wt", "y", "g", "ant", "h", "ts", "tt", "ct", " T", "u", "e", "f", "ti", "b", "q", "pt", "w", "ta", "z", "v", "l", "te", "m", "r", "p"]}}
{"code": "n = int(input())\\nh = list(map(int, input().split()))\\nh[0] -= 1\\nfor i in range(1,n):\\n  if h[i] > h[i-1]:\\n    h[i] -= 1\\n  elif h[i] < h[i-1]:\\n    print(\"No\")\\n    break\\nelse:\\n  print(\"Yes\")", "target": "230", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "num", "s", "t", "y", "g", "number", "u", "len", "f", "e", "nt", "b", "ns", "no", "q", "w", "nor", "z", "l", "v", "m", "r", "nc", "p", "N"], "h": ["o", "k", "x", "oh", "j", "c", "d", "ht", "a", "all", "s", "num", "rh", "t", "ch", "y", "ph", "g", "ah", "index", "how", "host", "u", "f", "e", "help", "b", "hi", "ho", "q", "sh", "w", "gh", "z", "v", "l", "hm", "m", "r", "H", "hash", "he", "p", "hs", "count"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "gi", "c", "ci", "d", "phi", "col", "oi", "a", "io", "ie", "start", "ri", "int", "ind", "ini", "ui", "t", "bi", "id", "y", "ix", "index", "multi", "si", "u", "iu", "e", "I", "f", "ti", "b", "mi", "ai", "z", "qi", "l", "v", "ii", "li", "m", "ih", "p"]}}
{"code": "N=int(input())\\nS,T=input().split()\\nans=S[0]+T[0]\\nfor i in range(1,N):\\n    ans=ans+S[i]+T[i]\\nprint(ans)", "target": "673", "substitutes": {"N": ["NA", "D", "R", "NS", "NL", "NE", "B", "Ns", "n", "J", "Y", "Ni", "L", "Num", "NB", "CNN", "NT", "NM", " n", "NN", "MN", "No", "I", "X", "ns", "C", "NI", "Ne", "V", "P", "K", "NP", "O", "H", "M", "F", "Z"], "S": ["U", "SE", "SH", "D", "GS", "SS", "R", "NS", "SK", "Sin", "B", "Sing", "Ns", "TS", "Si", "SI", "s", "Y", "A", "G", "L", "IN", "Single", "SL", "DS", "ST", "PS", "SC", "ANS", "I", "X", "SU", "C", "V", "Sl", "P", "OS", "K", "SP", "M", "F", "Set"], "T": ["U", "OT", "Ti", "D", "TN", "R", "E", "CT", "Test", "XT", "B", "TS", "W", "TB", "TE", "Y", "t", "L", "G", "A", "ET", "UT", "NT", "ST", "GT", "TA", "PT", "Q", "WT", "LT", "X", "C", "TG", "TT", "TX", "V", "P", "TH", "O", "H", "M", "TF", "F", "Ts", "Z"], "ans": ["offs", "ANN", "anus", "aning", "anned", "nas", "ras", "ins", "reads", "anks", "a", "ars", "ants", "amps", "ens", "args", "an", "s", "anc", " means", "ats", "asts", "ents", "anon", "na", "os", "anas", "nan", "An", "ana", "can", "anes", "AN", "cas", "aned", "leans", "atan", "ANS", "ania", "ann", "lan", "ns", "scan", "ends", "es", "ani", "mean", "aus", "ons"], "i": ["mini", "pi", "di", "k", "x", "xi", "j", "gi", "c", "ci", "d", "ri", " I", "col", "start", "int", "ind", "n", "ini", "ui", "bi", "id", "y", "h", "pri", "ix", "index", "ip", "multi", "eni", "si", "il", "u", "iu", "ite", "e", "I", "ti", "my", "mi", "q", "ai", "z", "qi", "v", "ii", "li", "p", "vi"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\nINF = float(\"inf\")\\n\\n\\ndef main():\\n    M, K = map(int, input().split())\\n\\n    # \u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\\n    if M == 0:\\n        if K == 0:\\n            print(\"0 0\")\\n        else:\\n            print(\"-1\")\\n        return\\n    elif M == 1:\\n        if K == 0:\\n            print(\"0 0 1 1\")\\n        else:\\n            print(\"-1\")\\n        return\\n\\n    # \u4e00\u822c\\n    if K >= (1 << M):\\n        print(\"-1\")\\n        return\\n\\n    # \u5b9f\u73fe\u53ef\u80fd\u30b1\u30fc\u30b9\\n    ans = []\\n    for i in range(1 << M):\\n        if i == K:\\n            continue\\n        ans.append(i)\\n    ans = ans[::-1] + [K] + ans + [K]\\n    print(\" \".join(map(str, ans)))\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "97", "substitutes": {}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10 ** 7)\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\n\\ndef resolve():\\n    N = int(input())\\n\\n    for h in range(1, 3501):\\n        for n in range(1, 3501):\\n            if 4 * h * n - N * n - N * h > 0:\\n                w = (N * h * n) / (4 * h * n - N * n - N * h)\\n                if w.is_integer() and w > 0 and 4 * h * n * w == N * n * w + N * h * w + N * h * n:\\n                    print(h, n, int(w))\\n                    exit()\\n\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "29", "substitutes": {"f_inf": [" f2inc", "f_f", "f2inc", "f2info", " f_inc", "f2f", "f2inf", "f_info", " f_f", " f2info", " f2f", " f2inf", "f_inc", " f_info"], "mod": ["sec", "mode", "step", "tr", "exp", "scale", "ver", "mult", "dec", "fun", "debug", "num", "depth", "inc", "circ", "min", "dig", "dim", "cond", "ctr", "cm", "mods", "max", " Mod", "MOD", "Mod", "init", "sim"], "N": ["U", "Node", "D", "S", "R", "E", "B", " H", "Ns", "T", "W", "J", "Y", "A", "L", "G", "Wh", "Ni", "Num", "NM", "number", "No", "Q", "I", "X", "C", "Na", "Ne", "Four", "V", "P", "K", "p", "O", "H", "M", "F", "Z"], "h": ["hl", "o", "ha", "k", "x", "oh", "hw", " inh", "c", "d", "ht", "bh", "wa", "W", "hp", "rh", " hp", "num", "t", "s", "ch", "i", "y", "ph", "g", "wh", "hd", "hh", "en", "header", "th", "host", " hr", "u", "f", "e", "hr", "b", "hn", "hi", "ho", "uh", "sh", "q", "z", "v", "l", "hm", "m", "r", "H", "he", "ih", "p", "hs", "him"], "n": ["o", "k", "x", "c", "d", "yn", "nb", "name", "wa", "W", "s", "num", "an", "t", "i", "y", "on", "g", "en", "nn", "un", "nu", "u", "f", "fn", "e", "b", "ns", "pn", "sn", "no", "sh", "v", "l", "m", "r", "H", "nc", "ln", "p", "ne"], "w": ["wp", "o", "iw", "fw", "x", "work", "wl", "c", "hw", "aw", "d", "ws", "a", "wa", "W", "ww", "wt", "s", "t", "weight", "tw", "y", " W", "nw", "width", "sw", "g", "we", "wal", "ow", "win", "ew", "rw", "how", "wb", "u", "f", "max", "b", "wx", "sh", "kw", "z", "wo", "v", "l", "r", "m", "H", "wh", "p", "temp", "wu"]}}
{"code": "x, y = map(int, input().split())\\nif x == - y:\\n  print(1)\\nelif x * y < 0:\\n  print(abs(abs(x) - abs(y)) + 1)\\nelif x < y:\\n  print(y - x)\\nelif x * y:\\n  print(abs(abs(x) - abs(y)) + 2)\\nelse:\\n  print(abs(abs(x) - abs(y)) + 1)\\n\\n", "target": "15", "substitutes": {"x": ["ey", "o", "ya", "xi", "px", "j", "c", "cy", "work", "d", "xy", "a", "data", "lex", "int", "n", "s", "t", "i", "id", "tx", "on", "dy", "xml", "g", "ax", "h", "xt", "ay", "image", "rx", "yx", "ix", "index", "fx", "py", "ex", "u", "e", "f", "one", "dx", "b", "X", "xx", "base", "wx", "no", "q", "yy", "w", "z", "l", "v", "cross", "m", "xs", "p", "pe"], "y": ["ery", "ey", "o", "type", "wy", "sy", "iy", "ya", "j", "cy", "c", "d", "yi", "xy", "oy", "ky", "a", "ry", "ny", "yo", "int", "n", "year", "Y", "ye", "zy", "t", "i", "yr", "dy", "ty", "gy", "yx", "yan", "h", "ay", "ym", "py", "yt", "u", "f", "b", "q", "yy", "w", "z", "v", "yes", "ady", "p", "sky", "vy"]}}
{"code": "n=int(input())\\nt=1\\nwhile n>t:\\n    n-=t\\n    t+=1\\nrem=t-n\\nlas=t\\nfor i in range(1,las+1):\\n    if i!=rem:\\n        print(i)", "target": "389", "substitutes": {"n": ["o", "at", "k", "j", "c", "np", "d", "nb", "nd", "T", "ot", "s", "num", "ni", "y", "g", "en", "nn", "nr", "u", "net", "nt", "f", "fn", "b", "e", "ns", "pn", "sn", "no", "w", "nat", "z", "l", "zn", "m", "r", "nc", "p", "tn", "ne", "N"], "t": ["it", "o", "tp", "at", "dt", "k", "out", "x", "j", "tm", "c", "d", "tick", "a", "start", "T", "int", "ot", "all", "s", "y", "stop", "test", "total", "time", "g", "h", "ts", "tt", "st", "u", "f", "e", "nt", "b", "ti", "end", "pt", "q", "w", "ta", "z", "l", "v", "m", "r", "p", "temp"], "rem": ["prom", "loc", "rest", "err", "x", "tr", "exp", "c", "param", "hide", "rm", "Rem", "num", "mr", "remote", "id", "arm", "rx", "cm", "span", "I", "res", "remove", "rom", "rec", "pt", "pop", "lc", "r", "REM", "m", "right", "p", "temp", "cl", "recent"], "las": ["rs", "ls", "it", "o", "k", "err", "mos", "ul", "exp", "Las", "lo", "iso", "num", "poly", "remote", "id", "tx", "y", "resh", "os", "h", "ts", "rx", "la", "radius", "lon", "last", "spec", "blast", "lan", "res", "ps", "lot", "hi", "arc", "pt", "ta", "lc", "cross", "sc", "l", "p", "cl"], "i": ["pi", "it", "o", "uri", "x", "xi", "j", "c", "reference", "ci", "d", "slice", "ri", "tower", " ii", "a", "ori", "int", "ind", "s", "ini", "info", "id", "y", "h", "tile", "ix", "index", "ip", "radius", "si", "e", "ti", "I", "end", "b", "hi", "ai", "init", "z", "p", "chi", "ii", "li", "m"]}}
{"code": "N = int(input())\\nG2,G4 = [],[]\\ncnt2 = 0\\ncnt3 = 0\\nfor _ in range(N):\\n    S = input()\\n    MIN = 0\\n    cnt = 0\\n    for s in list(S):\\n        if s == '(':\\n            cnt += 1\\n        else:\\n            cnt -= 1\\n        MIN = min(MIN,cnt)\\n    if MIN == 0 and cnt >= 0:\\n        cnt2 += cnt\\n    if MIN < 0 and cnt >= 0:\\n        G2.append([MIN,cnt])\\n    if MIN == cnt and cnt < 0:\\n        cnt3 += cnt\\n    if MIN < cnt and cnt < 0:\\n        G4.append([MIN,cnt])\\n\\n\\nG2.sort(reverse=True)\\nfor L in G2:\\n    if cnt2 + L[0] < 0:\\n        print('No')\\n        exit()\\n    else:\\n        cnt2 += L[1]\\nfor L in G4:\\n    if cnt2 + L[0] < 0:\\n        print('No')\\n        exit()\\n    else:\\n        cnt2 += L[1]\\n\\ncnt2 += cnt3\\n\\nif cnt2 == 0:\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "7", "substitutes": {"N": ["D", "GN", "R", "NS", "NL", "B", "Ns", "T", "n", "W", "J", "Y", "G", "IN", "Len", "SN", "SIZE", "NM", "Size", "NN", "MN", "Q", "I", "X", "NO", "C", "Ne", "V", "P", "K", "O", "M", "F", "Z"], "G2": ["G5", " G1", "L3", " G5", "G1", "L02", " G02", " GTwo", "F2", " G8", "G8", "g2", "L2", "FG4", " G3", "GTwo", "F1", "L4", "FG2", "G3", "g8", "Group4", "Group2", "FG1", "gTwo", "F4", "G02", "FGTwo", "C1", "Group3", "Group02", "g4", "F8", "C5", "g5", "g1", "C4", "C2"], "G4": ["G04", "G5", " G1", "GR4", " G5", "Group5", "G1", "LG4", "LG04", " G22", "LG24", " G04", "LG2", "GR04", "G22", "L2", " G3", "L4", "G0", "GP3", "G3", "Group4", "GP0", "Group04", "Group22", "GR5", "G24", "g0", "g4", " G24", "GR22", "g1", "g3", "GP1", "L24", " G0", "L04", "GP4"], "cnt2": ["cct20", "ucnt20", "crt4", "cwd6", "contsecond", "Cnt4", "cnt002", "cnc4", "cno2", "arcnt6", " cpt2", "cct4", "cpt3", "ucpt2", "cn02", "ucct1", "cont3", "arcrt02", "cnt4", " cnt8", "cint2", "cnt20", "cnc0", " cct3", "crtcount", "cct3", "cpt4", "Cnt2", " cnt0", "Cntcount", "ecnt02", "cct2", "crt3", "cnt182", "ecnc12", "cnt8", "cnccount", "cno6", "cpt002", "cpt0", "ucpt1", "count2", "cnt02", "cint02", "ucnt3", " cpt02", "countcount", "cnc2", "cpt8", "cpt02", "crt12", "cpt2", "cnt12", "ecnc02", "arcnt4", "ecnc2", "cNT3", "arcnt02", " cint2", "ecnc4", "cint6", "cont0", "ucct20", " cnt4", " cint4", "cnt1", " cnt6", " cct2", "cct1", "cwd02", "crt20", "cNT20", "ucct2", "ucnt2", "crt6", "cpt6", "Cnc2", " cint182", "ucnt002", "cpt1", " cnt02", "cwd182", "cont2", "count0", "ucpt4", "cont6", "cntcount", "crt2", " cpt6", "arcrt2", "arcrt4", "ucnt4", "cnc12", "cwd4", "cont002", "ucnt1", "cntsecond", "cNT1", "Cnc0", " cpt8", "cont1", "cno02", "ecnt4", "cint8", "cNT2", "cno4", "Cnccount", "cont4", " cntsecond", "ecnt2", "crt0", "cptsecond", "cn2", "cct02", "cn8", "cint4", " cint6", "crt02", " cctsecond", " cnt182", "cn6", "ecnt12", "cnt0", "cct002", " cct0", "crt1", "cct12", "cwd2", "arcrt6", "count4", "Cnc4", "ucct3", "cnc02", "arcnt2", "cont182", "ucpt002", "cint182", "cctsecond", "cct0", "Cnt0", "cnt6"], "cnt3": [" count2", "cnd1", " count1", " count3", " cnt5", " count6", "cNT6", "cmtThird", "count1", "count2", "cpt1", "cptThird", "lcnt4", "cntThird", " cnd2", "lcnt1", "cct6", "cnd3", "cct4", " cnd3", "cnt5", " cnd5", "cpt3", "lcctThird", " cnd1", "cct2", "cpt5", "cpt2", "count3", "cmt4", "lcntThird", "cNT3", "cnt4", "cmt3", "cctThird", "cnd5", "cNT1", "lcct3", "lcct1", " cnt1", "lcct4", "cnt1", "cct3", "cpt4", "cmt1", "lcnt3", "cNT5", "cnd2", "count6", " cnt6", "cNT2", "cct1", "cnt6"], "_": [" __", "x", "j", " I", " p", " time", " j", "g", " f", " z", "f", "I", "p", "l"], "S": ["U", "SE", "SH", "SO", "D", "SS", "R", "NS", "B", "T", "Si", "F", "SI", "A", "G", "Part", "SN", "SC", "I", "X", "SU", "C", "V", "Sl", "P", "SM", "SEC", "O", "H", "M", "SL"], "MIN": ["MAG", "PART", "EMP", "DIR", "PR", "GROUP", "NM", "SA", "BER", "I", "NO", "ALL", "VERSION", "JUST", "DAY", "FILE", "NOT", "SL", "SAN", "SPA", "TN", "R", "PO", "UN", "NULL", "IN", "IL", "SIZE", "MN", "STAT", "DATA", "ID", "SEC", "M", "ON", "PL", "D", "IGN", "NAME", "GN", "PIN", "EL", "TEXT", "minimum", "MON", "X", "IR", "Min", "IM", "SIGN", "VALUE", "FIELD", "ISS", "EST", "FM", "FREE", "MER", "Minimum", "PM", "DIV", "min", "MEN", "MAX", "FIR", "Mini", "COLOR", "Minor", "NPR", "ONE", "P", "REM", "ISC"], "cnt": ["rcrt", "gnt", "ecNT", "ecct", "ncnd", "dcrt", "secnt", "Count", "gnc", "gNT", "mcnn", "pcont", "cpt", "arcrt", "scrt", "count", "ncnt", "scnd", "lctx", "CNT", "acnn", "dcnn", "arcnc", " cpt", "ecpt", "scnt", "rcnd", "lcpt", "lcNT", "lcrt", "gtx", "pcnd", "cnd", "dcct", "acpt", "ecnn", "Cpt", "acrt", "ecnc", "rcnc", " count", "lcnc", "rcont", "ppt", "scnn", "pNT", "ctx", "lcnn", "lcnt", "nctx", "ncrt", "mcnt", "arcnt", "cnn", "ecnt", "acNT", "secont", "grt", "cnc", "cct", "lcnd", "cNT", "pcnt", "cont", "pnt", " cnn", "pcrt", " crt", "arcnd", "rcpt", " cct", "dcNT", "ncnc", "acct", "mcrt", "Cnc", "rcnn", "ecount", "acnt", "Crt", "mcnd", "dcnt", "Cnn", "dcnc", "Cnt", "prt", " cnc", "Cct", "ncnn", "rcnt", "secrt", "secnd", "crt", " cNT"], "s": ["sec", "states", "string", " sub", " iss", "c", "SS", " sec", "ws", "ses", "sub", "a", "ss", "n", "abs", "ops", "strings", "i", "min", "null", "si", "f", "e", "ns", "SU", "C", "sb", "p", "ims", "params", "mins", "groups", "m", "words", "eps"], "L": ["LM", "D", "CL", "LO", "R", "Z", "E", "NL", "Line", "B", "Lo", "All", "T", "List", "FL", "W", "J", "F", "Long", "Fl", "Y", "G", "IL", "Len", "LC", "LP", "EL", " l", "Q", "LT", "I", "X", "C", "XL", "LL", "Lu", "V", "P", "K", "l", "DL", "O", "H", "M", "SL", "LA"]}}
{"code": "from sys import stdin\\ndef main():\\n    #\u5165\u529b\\n    readline=stdin.readline\\n    N=int(readline())\\n    F=[]\\n    for i in range(N):\\n        f=list(map(int,readline().split()))\\n        F.append(f)\\n    P=[]\\n    for i in range(N):\\n        p=list(map(int,readline().split()))\\n        P.append(p)\\n    \\n    max_res=-float(\"inf\")\\n    for i in range(1<<10):\\n        if i==0:\\n            continue\\n        else:\\n            output=[]\\n            for j in range(10):\\n                if(i>>j)&1:\\n                    output.append(j)\\n\\n            oc=[0]*10  #open or close\\n            for j in output:\\n                oc[j]=1\\n            \\n            res=0\\n            for j in range(N):\\n                c=0\\n                for k in range(10):\\n                    if oc[k]==1 and F[j][k]==1:\\n                        c+=1\\n                res+=P[j][c]\\n            max_res=max(res,max_res)\\n\\n    print(max_res)\\n    \\nif __name__==\"__main__\":\\n    main()", "target": "629", "substitutes": {}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\ndef main():\\n    N, M = map(int, input().split())\\n    c = list(map(int, input().split()))\\n\\n    dp = [i+100 for i in range(N+1)]\\n    dp[0] = 0\\n\\n    for i in range(1, N+1):\\n        for t in c:\\n            if i - t >= 0:\\n                dp[i] = min(dp[i], dp[i-t] + 1)\\n    # print(dp)\\n    print(dp[N])\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "286", "substitutes": {"input": ["type", "empty", "string", "case", "element", "plus", "feed", "param", "raw", "output", "sum", "data", " Input", "expression", "submit", "util", "int", "print", " output", "pull", "list", "array", " int", "config", "space", "IN", "enter", "call", "result", "entry", "python", "url", "command", "parent", "source", "request", "main", "null", "multi", "hidden", " inputs", "f", "help", "exec", "reader", "enum", "select", "inf", "conf", "text", "Input", "p", "temp", "form", "arg", "method"], "N": ["U", "Multi", "D", "S", "Max", "R", "NS", "E", "NC", "B", "Ns", "T", "n", "W", "J", "Y", "Ni", "L", "G", "Part", "Num", "CNN", "NT", " n", "Size", "Q", "I", "X", "C", "Na", "Ne", "V", "P", "K", "O", "F", "Z"], "M": ["U", "D", "S", "R", "E", "B", "T", "Y", "L", "DM", "cm", "MN", "Q", "mu", "I", "C", "mm", "V", "P", "MM", "MC", "K", "m", "O", "H", "F", "CM", "Z"], "c": ["mc", "k", "x", "ci", "d", "cycle", "T", "n", " C", "config", "cs", "con", "cm", "dc", "cu", "u", "xc", "f", "e", "I", "toc", "b", "code", "C", "P", "z", "lc", "l", "cd", "pc", "m", "r", "nc", "p", "rc", "count"], "dp": ["wp", "df", "lp", "tp", "loc", "dt", "di", "distance", "pb", "db", "np", "d", "port", "point", "phi", "nb", "pair", "data", "mult", "pos", "int", "n", "direction", "DP", "config", "pkg", "alpha", "dim", "ds", "cp", "dr", "cm", "dc", "ip", "comp", "address", "pp", "imp", "DC", "dl", "pm", "P", "dm", "params", "duration", "deb", "dist", "eps", "dat", "p", "gp", "fp"], "i": ["pi", "it", "o", "di", "k", "x", "xi", "j", "anti", "ci", "d", "phi", "oi", "a", "start", "cli", "T", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "b", "mi", "inf", "im", "ai", "z", "chi", "qi", "v", "l", "ii", "li", "ei", "p"], "t": ["it", "o", "tp", "type", "out", "x", "j", "tu", "d", "a", "T", "int", "n", "ot", "s", "id", "y", "g", "h", "ts", "ct", "tri", "tf", "u", "f", "e", "ti", "nt", "b", "one", "q", "pt", "w", "ta", "z", "l", "v", "m", "p", "tn"]}}
{"code": "l=list(map(int,input().split()))\\nl.sort()\\nprint(abs(l[1]-l[0])+abs(l[2]-l[1]))", "target": "793", "substitutes": {"l": ["el", "lp", "ls", "o", "loc", "k", "ol", " L", "x", "j", "ul", "c", "left", "kl", "lo", "fl", "sl", "int", "n", "long", "ll", "list", "s", "t", "L", "i", "split", "g", "bl", "nl", "la", "il", "lb", "len", "u", "f", "rl", "e", "b", "like", "pl", "dl", "z", "lc", "v", "m", "li", "r", "ln", "p", "cl"]}}
{"code": "import math\\nwhile(True):\\n    a,op,b=input().split()\\n    a = int(a)\\n    b = int(b)\\n    if (op == '+'):print(a + b)\\n    elif (op == '-'):print(a - b)\\n    elif (op == '*'):print(a * b)\\n    elif (op == '/'):print(int(a / b))\\n    elif (op == '?'):break", "target": "475", "substitutes": {"a": ["ma", "area", "auto", "o", "sta", "x", "c", "aw", "d", "ak", "ama", "aaaa", "ac", "ab", "wa", "art", "aux", "af", "aka", "n", "mA", "da", "an", "A", "fa", "i", "y", "alpha", "api", "na", "qa", "sa", "ana", "ia", "aa", "la", "va", "f", "e", "am", "ad", "ca", "ga", "ai", "w", "ae", "aaa", "asa", "ba", "ea", "aj", "now", "p", "au"], "op": ["oct", "o", "type", "loc", "ap", "ang", "bo", "open", "c", "omp", "sp", "om", "img", "ob", "cmd", "app", "cod", "pos", "upp", "ot", "option", "ops", "opp", "i", "id", "api", "operation", "vert", "ok", "OP", "iter", "dr", "rip", "cp", "ip", "py", "error", "bit", "aa", "ko", "br", "mp", "oop", "opus", "pp", "f", "opt", "hop", "Op", "oper", "pop", "orb", "cat", "jp", "gen", "lit", "oc", "prev", "p", "bp", "cop", "arg"], "b": ["o", "eb", "al", "x", "pb", "j", "c", "db", "d", "ob", "nb", "cb", "ab", "bh", "ac", "B", "bc", "bd", "n", "xb", "s", "binary", "rb", "bi", "bas", "i", "y", "bs", "g", "fb", "gb", "ib", "beta", "aa", "wb", "lb", "u", "e", "f", "sb", "w", "be", "ba", "v", "l", "r", "bf", "bb", "p"]}}
{"code": "S = input()\\nprint(S.replace(\"2017\",\"2018\"))", "target": "49", "substitutes": {"S": ["U", "SH", "D", "New", "SS", "R", "NS", "Sample", "B", "T", "W", "SI", "s", "A", "G", "L", "SR", "DS", "SA", "I", "X", "SU", "C", "SB", "DATA", "Send", "V", "Output", "P", "Session", "SP", "Service", "O", "H", "M", "F", "N", "Submit"]}}
{"code": "s = input().rstrip()\\n\\nif s[0] != 'A':\\n    print('WA')\\n    exit(0)\\n\\nf = False\\nfor i in range(1, len(s)):\\n    if s[i] == 'C':\\n        if i < 2 or i >= len(s) - 1:\\n            print('WA')\\n            exit(0)\\n        if f:\\n            print('WA')\\n            exit(0)\\n        f = True\\n    elif not str.islower(s[i]):\\n        print('WA')\\n        exit(0)\\n\\nif f:\\n    print('AC')\\nelse:\\n    print(\"WA\")\\n", "target": "695", "substitutes": {"s": ["string", "rs", "parts", "fs", "ls", "services", "js", "o", "S", "states", "ings", "su", "input", "c", "d", "bytes", "ses", "a", "data", "ss", "submit", "n", "abs", "args", "sts", "qs", "t", "strings", "cs", "os", "g", "ds", "ts", "blocks", "ks", "gs", "lines", "days", "si", "u", "sets", "e", "ys", "b", "ps", "ns", "es", "tests", "sb", "w", "l", "v", "sg", "m", "xs", "r", "str", "words", "p"], "f": ["df", "o", "fs", "k", "this", "err", "x", "j", "feed", "c", "d", "only", "ac", "a", "fc", "n", "F", "fac", "t", "fa", "rf", "y", "fe", "g", "fd", "h", "tf", "fx", "sf", "u", "e", "b", "end", "xf", "fit", "inf", "fen", "w", "of", "l", "v", "found", "m", "r", "cf", "p", "form"], "i": ["pi", "di", "o", "ji", "k", "x", "xi", "j", "c", "gi", "gu", "ci", "d", "slice", "yi", "phi", "ri", "a", "start", "int", "ind", "n", "ui", "ini", "t", "ni", "bi", "id", "y", "h", "ij", "index", "ip", "multi", "eni", "si", "u", "iu", "I", "e", "ti", "b", "ai", "z", "qi", "l", "v", "ii", "li", "r", "ei", "ih", "p", "zi"]}}
{"code": "inp=list(map(int,input().split()))\\nn=inp[0]\\nk=inp[1]\\nq=inp[2]\\narr=[k-q]*n\\nfor i in range(q):\\n        x=int(input())\\n        arr[x-1]+=1\\nif q<k:\\n    for i in range(n):\\n        print ('Yes')\\nelse:\\n    z=[]\\n    for i in range(len(arr)):\\n        if arr[i]>0:\\n            print ('Yes')\\n        else:\\n            print ('No')", "target": "336", "substitutes": {"inp": ["linp", "inv", "INP", "ninp", "inq", "INps", "outps", "inP", "Inv", "kinv", "INv", " inv", "Inq", "Inps", "insP", "ninv", "insv", "Inp", "linv", "inps", "outp", "kinps", "outP", "INp", "insp", "ninq", "ninps", "outq", " inps", "outv", "linps", "kinq", "kinp", "insps", " inq", "linq"], "n": ["o", "j", "c", "np", "d", "nb", "a", "num", "an", "t", "y", "g", "h", "nn", "nl", "nu", "u", "net", "nt", "f", "e", "b", "ns", "sn", "no", "w", "v", "l", "m", "r", "nc", "p", "ne", "N"], "k": ["kn", "ke", "kk", "j", "c", "d", "ak", "num", "s", "y", "sk", "g", "h", "ok", "query", "ks", "u", "f", "b", "w", "kw", "K", "qi", "v", "l", "m", "r", "p", "km", "N"], "q": ["o", "qt", "j", "c", "d", "qs", "quant", "num", "t", "ch", "y", "quality", "qa", "g", "h", "query", "ix", "Q", "sq", "eq", "u", "f", "e", "b", "qq", "w", "qi", "v", "l", "length", "m", "r", "p", "qu", "dq", "count"], "arr": ["el", "par", "err", "xi", "j", "ar", "img", "ab", "dat", "data", "app", "a", "int", "ind", "Array", "list", "array", "y", "iq", "ray", "abc", "bl", "dr", "ix", "rep", "batch", "aa", "br", "f", "obj", "adj", "b", "ai", "frac", "v", "str", "r", "fr", "order", "prev", "p", "align", "enc"], "i": ["pi", "it", "o", "xi", "j", "c", "d", "a", "io", "start", "int", "ind", "s", "num", "list", "range", "t", "ini", "id", "y", "g", "ix", "index", "ip", "si", "u", "iu", "f", "I", "ti", "e", "b", "ai", "v", "l", "ii", "li", "ei", "m", "p"], "x": ["o", "xi", "j", "c", "d", "xy", "int", "num", "t", "id", "y", "na", "min", "ax", "h", "ix", "index", "fx", "xc", "u", "e", "dx", "f", "X", "xx", "w", "v", "l", "m", "xs", "p"], "z": ["ze", "j", "c", "d", "a", "data", "ind", "iz", "nz", "t", "az", "y", "g", "zh", "zip", "u", "f", "e", "w", "v", "l", "ii", "m", "p", "zi", "Z"]}}
{"code": "n , m = map(int,input().split())\\nkagi = []\\nfor i in range(m):\\n    a , b = map(int,input().split())\\n    c = list(map(lambda x:int(x)-1,input().split()))\\n    k = 0\\n    for j in c:\\n        k += 2**j\\n    kagi.append((a,k))\\ndp = [[float(\"inf\") for i in range(2**n)] for j in range(m+1)]\\ndp[0][0] = 0\\nfor i in range(m):\\n    for j in range(2**n):\\n        dp[i+1][j] = min(dp[i][j],dp[i+1][j])\\n        dp[i+1][j | kagi[i][1]] = min(dp[i+1][j | kagi[i][1]],dp[i][j] + kagi[i][0])\\n\\nif dp[-1][-1] != float(\"inf\"):\\n    print(dp[-1][-1])\\nelse:\\n    print(-1)", "target": "772", "substitutes": {"n": ["o", "x", "d", "nb", "s", "num", "t", "y", "g", "nn", "u", "size", "f", "e", "ns", "w", "z", "l", "v", "r", "nc", "ln", "p", "N"], "m": ["o", "x", "d", "s", "num", "t", "y", "machine", "g", "h", "ms", "cm", "u", "f", "e", "mu", "mm", "w", "module", "z", "l", "v", "r", "M", "p", "bm"], "kagi": ["skaci", "mkai", "kickani", "ckagi", "kickagi", "ikagi", "ikugi", "okogi", "jagi", "kaga", "jaci", "kigi", "ckai", " kaci", "kickogi", "kami", "cami", "ckugi", "mkagi", "ckaci", "skai", "cugi", "jigi", "ckigi", "cagi", "ikami", "jai", " kami", " kugi", "skagi", " kogi", "kogi", "jugi", "ckaga", "kugi", "mkugi", "ikani", "kaci", "kai", " kigi", "kani", "cani", "skugi", "jaga", "kickai", "okagi", "okai", "mkaci", "okani", " kaga", " kani", " kai"], "i": ["ik", "pi", "di", "ji", "o", "it", "uri", "x", "xi", "gi", "anti", "ci", "d", "yi", "ri", "oi", "io", "ie", "ori", "int", "ind", "s", "ui", "ini", "t", "ni", "info", "id", "\u0438", "y", "api", "bi", "inner", "g", "ix", "source", "ip", "multi", "eni", "iv", "si", "u", "iu", "f", "ti", "I", "e", "mi", "ki", "q", "ai", "init", "z", "qi", "l", "v", "ii", "li", "ei", "ih", "p"], "a": ["area", "o", "x", "d", "ar", "ak", "ac", "ab", "da", "an", "A", "y", "alpha", "sa", "aa", "u", "f", "e", "ad", "ca", "am", "ai", "ae", "w", "ba", "l", "r", "p"], "b": ["o", "d", "ab", "ac", "B", "bc", "s", "y", "bs", "g", "u", "e", "f", "sb", "w", "z", "ba", "l", "v", "r", "bb", "p", "bm"], "c": ["mc", "x", "cy", "ci", "d", "cb", "col", "ac", "fc", "cc", "ch", "cs", "y", "abc", "cm", "dc", "cu", "u", "f", "e", "ad", "ca", "unc", "C", "code", "q", "z", "l", "lc", "v", "cd", "nc", "p", "count"], "k": ["o", "kn", "ke", "x", "kk", "d", "t", "ch", "y", "sk", "g", "ok", "kid", "ks", "u", "f", "e", "q", "w", "kw", "z", "K", "v", "l", "r", "p"], "j": ["el", "ji", "o", "x", "xi", "_", "d", "jc", "ie", "int", "J", "all", "ind", "num", "uj", "t", "ch", "y", "g", "h", "ion", "job", "cm", "jl", "jo", "u", "iu", "ja", "f", "e", "jj", "q", "im", "w", "z", "l", "jp", "v", "jam", "r", "aj", "li", "ii", "p", "N"], "dp": ["wp", "df", "lp", "tp", "pi", "dt", "di", "dos", "loc", "pb", "pg", "db", "sp", "np", "d", "port", "pair", "data", "pos", "sl", "src", "vs", "direction", "vp", "hp", "DP", "pkg", "wd", "project", "password", "push", "dim", "ds", "dh", "cp", "dB", "dr", "do", "dc", "ip", "projects", "mp", "pp", "e", "address", "dep", "imp", "dd", "ga", "dl", "sh", "desc", "dm", "params", "deb", "dist", "eps", "dat", "p", "gp", "fp"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\ncnt=0\\nif 1 not in a:\\n    print(-1)\\n    exit()\\nelse:\\n    num=1\\n    for i in range(n):\\n        if a[i]==num:\\n            num+=1\\n        else:\\n            cnt+=1\\nif cnt==n:\\n    print(-1)\\nelse:\\n    print(cnt)", "target": "749", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "s", "an", "t", "y", "count", "nan", "number", "nr", "u", "len", "f", "e", "nt", "b", "ns", "w", "z", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["ma", "area", "sta", "x", "input", "c", "aw", "ar", "ab", "ac", "wa", "aux", "int", "args", "an", "s", "array", "A", "fa", "list", "y", "alpha", "na", "sa", "aa", "la", "va", "oa", "f", "b", "am", "ad", "ca", "ans", "ga", "ai", "ae", "aaa", "ba", "l", "ea", "aj", "m", "p", " A", "count", "au"], "cnt": ["lcount", "ncnt", "Cnd", "ncct", "cwd", " cnd", "Cnc", "lcnt", " cpt", "ncount", "ncpt", "rcnn", "cnd", "cnn", "ncwd", "ncnd", "Cnn", "Cpt", "cnc", "lcct", "rcct", "Count", "cct", "Cnt", "Cwd", " cnc", "Cct", "ncnn", " count", " cnn", "lcnc", "rcnt", "cpt", "rcpt", " cwd", " cct", "count"], "num": ["o", "loc", "x", "um", "c", "np", "d", "nm", "current", "node", "sum", "nb", "name", "mom", "pos", "int", "valid", "inc", "an", "id", "Num", "anon", "uni", "na", "min", "con", "parent", "index", "number", "nu", "u", "len", "net", "nom", "f", "max", "fn", "b", "NUM", "no", "p", "m", "nam", "count"], "i": ["pi", "k", "x", "j", "gi", "c", "ci", "d", "ri", " I", " ii", "ie", "start", "pos", "int", "ind", "ni", "id", "y", "h", "ix", "index", "ip", "bit", "si", "u", "f", "ti", "I", "end", "e", "b", "ai", "z", "ii", "li", "m", "p"]}}
{"code": "n = int(input())\\nc = input()\\n\\ncntR = c.count('R')\\n\\nprint(c[:cntR].count('W'))", "target": "714", "substitutes": {"n": ["ner", "o", "j", "R", " N", "nb", "Ns", "L", "network", "nn", "nr", "f", "ns", "C", "sn", "RN", "w", "l", "v", "r", "m", "nc", "ln", "p", "ne", "N"], "c": ["k", "x", "input", "ci", "d", "cycle", "current", "a", "fc", "circle", "s", "cc", "t", "i", "cs", "ctrl", "g", "div", "h", "abc", "cell", "cm", "dc", "xc", "u", "f", "e", "b", "code", "C", "w", "z", "l", "v", "lc", "r", "m", "cf", "p", "count"], "cntR": ["cndR", "cndr", " cntP", "cntW", "cctW", "cnoW", "crtW", " cntr", "cndP", " cctRh", " cctR", " cnor", "cctR", "cnoRh", "crtR", "cctRh", " cnoP", "crtr", " cnoW", "cctr", " cntW", " cntRh", "cntP", "crtP", "cnor", "cntRh", "cntr", "cnoR", " cctr", "crtRh", "cndW", " cctW", " cnoR", "cnoP"]}}
{"code": "from collections import defaultdict\\nn,m=map(int,input().split())\\nA=list(map(int,input().split()))\\nhon2=[1]\\nhon5=[2,3,5]\\nhon4=[4]\\nhon3=[7]\\nhon6=[6,9]\\nhon7=[8]\\nusenum=[]\\nusematch=defaultdict(int)\\nfor a in A:\\n    if a in hon2:\\n        usenum.append(2)\\n        usematch[2]=max(a, usematch[2])\\n    if a in hon5:\\n        usenum.append(5)\\n        usematch[5]=max(a, usematch[5])\\n    if a in hon4:\\n        usenum.append(4)\\n        usematch[4]=max(a, usematch[4])\\n    if a in hon3:\\n        usenum.append(3)\\n        usematch[3]=max(a, usematch[3])\\n    if a in hon6:\\n        usenum.append(6)\\n        usematch[6]=max(a, usematch[6])\\n    if a in hon7:\\n        usenum.append(7)\\n        usematch[7]=max(a, usematch[7])\\nusenum=list(set(usenum))\\nusenum.sort()\\ndp=[-1]*(n+11)\\ndp[0]=0\\nfor i in range(n+1):\\n    if dp[i]==-1:\\n        continue\\n    for num in usenum:\\n        dp[i+num]=max(10*dp[i]+usematch[num], dp[i+num])\\nprint(dp[n])", "target": "712", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", " nm", "np", "d", "nm", " fn", " Num", " N", "nb", " p", "name", " np", "t", "Num", "y", "mn", "na", "g", "h", "nn", " e", "nu", " index", " l", " c", "aa", "nr", "u", "net", "e", " number", "f", "nt", "b", "ns", "none", "sn", " count", "no", "w", "z", " ng", "l", "v", "r", "nc", "p", "ne", "N"], "m": ["ma", "o", "mode", "mc", "c", "d", "mod", "mA", "man", "mn", "g", "h", "month", "cm", "number", " M", "mu", "e", "f", "b", "am", "mm", "mass", "w", "l", "r", "M", "p"], "A": ["As", "ma", "D", "S", "c", "ar", "ama", "B", "T", "W", "mA", "args", "all", "an", "Y", "array", "L", "G", "Array", "alpha", "ana", "I", "AA", "b", "am", "C", "ga", "P", "O", "H", "M", "p", "N", "au"], "hon2": ["syn2", "han5", "hon8", "syn8", "mot2", "syn5", "han1", "hon1", "Hon4", "mot5", "syn1", "Hon5", "mot1", "mot8", "han8", "aron5", "han2", "aron4", "aron2", "HonTwo", "mot4", "honTwo", "Hon2", "motTwo", "aronTwo"], "hon5": ["ron8", "mem4", "han5", "hon8", "ron4", "Hon4", "mot5", "han6", "Hon5", "mem5", "mot6", "ron5", "ron6", "Hon6", "ot5", "mot8", "han8", "mem6", "mem8", "ot8", "mot4", "han4", "Hon8", "ot4", "ot6"], "hon4": ["ron8", "don3", "don6", "hon8", "ron4", "het6", "on8", "chron4", "mit3", "mit8", "het8", "don4", "ron6", "het4", "chron6", "don8", "chron8", "mit6", "on6", "mit4", "chron3", "on4"], "hon3": ["success5", "success3", "honThree", "hon8", "chron9", "HonX", "Hon3", "Hon5", "hon9", "anonThree", "Hon6", "chron5", "rotX", "rotThree", "honX", "chron6", "anonX", "success9", "rot3", "anon3", "success6", "HonThree", "Hon9", "Hon8", "anon8", "chron3", "rot8"], "hon6": ["ron8", "han5", "amon11", "hon8", "ron11", "het6", "hon11", "amon8", "han6", "Hon5", "amon6", "het11", "het8", "ron6", "chron7", "Hon6", "chron5", "chron6", "han8", "chron8", "Hon7", "Hon8", "han7"], "hon7": ["ron8", "hen9", "hon8", "hn07", "hn7", "ron70", "ron74", "hon74", "hn70", "hon07", "hon9", "Hon74", "hn74", "hn9", "hon17", "hn17", "hen7", "hen17", "hon70", "Hon07", "Hon17", "Hon7", "ron7", "Hon9", "Hon8", "hn8", "Hon70", "hen07"], "usenum": ["usabet", " usenge", "rusense", "rusum", "usedalogue", "useumer", "asconfig", "usinteger", "ustcore", "ustabet", "usearray", "ualogue", "uscore", "USnum", "usesum", "usum", "passnum", "uslayer", "passenge", "usedelection", "useimage", "usenge", "rasconfig", "usedarray", "bsumer", "usmember", " usenc", "bslayer", "rusenum", "ulayer", "bsenum", "rasenum", " usinteger", "useenum", "usnum", "asinteger", "usumer", "usedconfig", "uselayer", "passum", "usalogue", "uconfig", "USarray", "usedmember", "rasinteger", "usedum", "useen", " usnum", "usconfig", "Usenum", "usealogue", "USenc", "useummer", " usmember", "useum", "bsen", "Uslayer", " usimage", "usesumer", "ausum", "octum", "asenum", "useenc", "useenge", "raselection", "busenum", "usmatch", "octenum", "uinteger", "usimage", "usesense", "usense", "octmatch", "ausconfig", " uscore", "usesmatch", "Usen", " usconfig", "uum", " usum", "uselection", "uenum", "usenc", "octense", "usemember", "usen", "uummer", "usesenum", "busumer", "usesconfig", "usarray", "ausumer", "usedlayer", "asabet", " usabet", "ustinteger", "USenum", "uabet", "ucore", "Usumer", "uelection", "usummer", " usummer", "busum", "ustenum", "usedinteger", " usarray", "passenum", "rusmatch", "uimage", "usedenum", "busconfig", "ausenum"], "usematch": [" usecase", "usingpattern", " usefilter", "alsotemplate", "viewinfo", "USEmatch", "usepattern", "usagetest", "thematch", "mecase", " useMatch", "USEMatch", "USEcase", "alsocase", "mepattern", "avematch", "ridetest", "alsoinfo", "sitetest", "ridecase", " usecover", "usermatch", "usingmat", "sharemat", "usecondition", "usemat", "usertemplate", "casetest", "useMatch", "sharecase", "usingapply", "USEinfo", "havematch", "casecase", "usingtest", "casematch", "alsomatch", "usinginfo", "dotest", "mematch", "usefilter", "thecover", " usepattern", "USEtest", "domatch", "avetest", "uselayer", "useapply", "useinfo", "usingtemplate", "savetest", "avelayer", " usetemplate", "doinfo", "alsofilter", "sitematch", "aseguard", "useguard", "usingmatch", "savepattern", " useinfo", "havetest", "alsomat", " usecondition", "usetest", "usecover", "usecase", " useapply", "alsotest", "playtest", "metest", "usagecondition", "dotemplate", "shareapply", " usetest", "aveinfo", "USEmat", "shareMatch", "sharepattern", "ridecover", "playtemplate", "ridepattern", "siteinfo", "aseinfo", "thetest", "saveinfo", "usetemplate", "userinfo", "viewpattern", "sharematch", "savematch", "usermat", "playmatch", " usemat", "playinfo", "viewmatch", "ridematch", "USEpattern", "usingcase", "caseinfo", "sitelayer", "havecondition", "rideinfo", "haveinfo", "viewtest", "usingfilter", "usingguard", "asematch", "userpattern", "sharetest", " useguard", "asetemplate", "usageinfo", "usagematch", "alsopattern", "theinfo", " uselayer"], "a": ["ma", "area", "\u00e4", "auto", "o", "at", "anta", "x", "c", "aw", "ar", "img", "ama", "wa", "ac", "data", "ab", "app", "aid", "af", "aux", "pa", "ast", "an", "s", "y", "alpha", "na", "g", "sa", "ah", "ana", "ia", "index", "aa", "la", "ach", "u", "va", "ja", "active", "e", "f", "ad", "am", "b", "ca", "ga", "ai", "ae", "ta", "w", "ba", "aaa", "ea", "ada", "ao", "aj", "r", "ap", "p", "au"], "dp": ["wp", "df", "lp", "tp", "pi", "dt", "di", "pid", "eb", "dos", "pb", "pg", "db", "np", "d", "data", "diff", "pos", "vp", "yp", "hp", "DP", "amp", "pkg", "wd", "ph", "push", "gap", "dim", "ds", "cp", "dr", "dc", "beta", "ip", "py", "mp", "dep", "pp", "dd", "imp", "xd", "address", "ps", "dl", "P", "dm", "ep", "cd", "dist", "deb", "dump", "dat", "p", "gp", "fp"], "i": ["pi", "di", "o", "ji", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "col", "ie", "int", "ind", "ini", "ui", "ni", "bi", "id", "y", "info", "uni", "h", "ix", "index", "ip", "eni", "si", "u", "iu", "fi", "e", "I", "ti", "f", "b", "mi", "ki", "ai", "init", "z", "p", "qi", "v", "l", "ii", "li", "ih", "io"], "num": ["unit", "oct", "nam", "type", "dom", "common", "out", "unknown", "x", "um", "c", "off", "np", "d", "om", "col", "sum", "int", "hom", "all", "Num", "id", "result", "mon", "y", "uni", "con", "en", "parent", "nn", "month", "un", "index", "ip", "bin", "number", "day", "nu", "tri", "multi", "umi", "nom", "net", "u", "f", "mat", "one", "end", "b", "new", "NUM", "no", "w", "lit", "p", "form", "block"]}}
{"code": "X,A,B=map(int,input().split())\\n \\nif A>=B:\\n  print('delicious')\\nelse:\\n  if X>=B-A:\\n    print('safe')\\n  else:\\n    print('dangerous')", "target": "393", "substitutes": {"X": ["U", "D", "S", "ZX", "x", "R", "E", "XX", "T", "W", "J", "Y", "L", "G", " x", "Check", "Q", "I", "C", "XL", "TX", "V", "P", "XP", "K", "H", "M", "F", "N", "Z"], "A": ["As", "U", "Bu", "D", "S", "E", "Alpha", "a", "CA", "BB", "T", "PA", "mA", "IA", "Array", "Y", "AD", "AM", "G", "L", "Am", "Ab", "AI", "AX", "AU", "An", "AP", "Ar", "I", "AA", "C", "MA", "V", "P", "AF", "AB", "O", "AC", "AW", "M", "F", "N", "LA"], "B": ["Bu", "EB", "Ba", "D", "BF", "R", "E", "LB", "Ub", "BB", "T", "UB", "W", "BE", "Y", "L", "G", "NB", "BA", "BD", "OB", "GB", "Bs", "Q", "QB", "DB", "WB", "I", "b", "FB", "C", "V", "MB", "P", "K", "AB", "O", "M", "F", "N"]}}
{"code": "x, a, b = map(int,input().split())\\nprint(\"AB\"[(x*2 > a+b)^(a>b)])", "target": "408", "substitutes": {"x": ["j", "c", "d", "data", "int", "n", "an", "A", "i", "y", "key", "alpha", "g", "ax", "h", "ix", "index", "ex", "u", "f", "e", "max", "X", "xx", "code", "w", "z", "v", "r", "m", "p"], "a": ["ma", "area", "j", "c", "aw", "d", "ab", "ac", "pa", "n", "da", "an", "A", "fa", "i", "y", "alpha", "xa", "g", "sa", "abc", "index", "aa", "u", "f", "e", "ad", "ca", "am", "ga", "ai", "ae", "w", "z", "ba", "m", "bb", "p"], "b": ["eb", "k", "j", "c", "d", "cb", "nb", "ab", "B", "bc", "n", "s", "A", "i", "y", "dy", "bs", "bar", "abc", "ib", "beta", "aa", "lb", "u", "e", "f", "sb", "w", "z", "ba", "v", "bb", "r", "p"]}}
{"code": "#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n#\\n# Created: Jul, 13, 2020 04:40:02 by Nobody\\n# $Author$\\n# $Date$\\n# $URL$\\n__giturl__ = \"$URL$\"\\n\\n\\nfrom sys import stdin\\ninput = stdin.readline\\n\\n\\ndef main():\\n  N = int(input())\\n  AB = [tuple(map(int, input().split())) for _ in range(N)]\\n\\n  AB = sorted(AB, key=lambda x: x[1])\\n  time = 0\\n  for a, b in AB:\\n    time += a\\n    if time > b:\\n      print('No')\\n      return\\n  print('Yes')\\n\\n\\nif(__name__ == '__main__'):\\n  main()\\n", "target": "55", "substitutes": {}}
{"code": "def task(probs):\\n    n = len(probs)\\n    dp = [0] * (n + 1)\\n    dp[0] = 1\\n\\n    for i, p in enumerate(probs, start=1):\\n        state = 0\\n        for j in range(i + 1):\\n          #print(state, p, 1-p, dp[j])\\n          curr = dp[j]\\n          dp[j] = (curr * (1 - p)) + state\\n          state =  curr * p\\n\\n    return sum(dp[(n + 1) // 2:])\\n\\n\\nn = input()  # n\\nprobs = [float(x) for x in input().split()]\\nprint(task(probs))", "target": "437", "substitutes": {"probs": ["probes", " propos", "preb", "defbes", "Procs", "rebs", "prebes", "promps", " procs", "recs", "prob", " probes", "prombs", " props", "Probes", "props", "Propos", "repos", "propos", "Probs", "prombes", " prob", "promb", "defcs", "defps", "preps", "reps", "Props", "procs", "prebs", "defbs"], "n": ["o", "k", "x", "c", "np", "d", "nb", "num", "t", "y", "network", "nn", "nu", "u", "len", "size", "net", "f", "nt", "e", "b", "ns", "sn", "w", "z", "l", "v", "m", "nc", "ne", "N"], "dp": ["wp", "pi", "di", "tp", "dt", "pb", "c", "np", "d", "param", "port", "nb", "data", "pos", "DP", "pkg", "abc", "cp", "dr", "dc", "ip", "rep", "comp", "pp", "e", "ps", "resp", "P", "dm", "ep", "params", "pm", "grad", "duration", "bb", "length", "eps", "gp"], "i": ["mini", "pi", "di", "pid", "x", "xi", "c", "gi", "ci", "phi", "start", "int", "ind", "ui", "ini", "bi", "uni", "pri", "ix", "index", "ip", "eni", "si", "u", "iu", "e", "I", "f", "b", "mi", "z", "chi", "v", "ii", "li", "ei", "m", "udi"], "p": ["pi", "tp", "x", "c", "np", "d", "prop", "pro", "t", "y", "cp", "ip", "u", "pp", "e", "f", "pre", "b", "ps", "q", "P", "z", "ep", "v", "m", "r"], "state": ["unit", "states", "pi", "type", "pid", "np", "param", "port", "ss", "pos", "direction", "s", "config", "weight", "g", "e", "State", "q", "position", "init", "P", "length", "r", "m", "bb"], "j": ["pi", "ji", "o", "d", "oj", "ind", "J", "y", "g", "h", "ij", "ip", "pp", "e", "I", "obj", "ps", "im", "q", "pt", "ep", "P", "ai", "pm", "v", "jp", "li", "r", "m"]}}
{"code": "class UnionFind:\\n    def __init__(self, n):\\n        #\u89aa\u30ce\u30fc\u30c9\u306e\u756a\u53f7\u3092\u683c\u7d0d\\n        self.par = [i for i in range(n+1)]\\n        self.rank = [0] * (n+1)\\n        self.size = [1] * (n+1)\\n    def find(self, x):\\n        #\u6839\u306a\u3089\u305d\u306e\u756a\u53f7\u3092\u8fd4\u3059\\n        if self.par[x] == x:\\n            return x\\n        else:\\n            self.par[x] = self.find(self.par[x])\\n            return self.par[x]\\n    def same_check(self, x, y):\\n        #\u540c\u3058\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\\n        return self.find(x) == self.find(y)\\n    def union(self, x, y):\\n        #\u7d71\u5408\u3059\u308b\\n        x = self.find(x)\\n        y = self.find(y)\\n        if self.rank[x] < self.rank[y]:\\n            self.par[x] = y\\n            self.size[y] += self.size[x]\\n            self.size[x] = 0\\n        elif self.rank[x] > self.rank[y]:\\n            self.par[y] = x\\n            self.size[x] += self.size[y]\\n            self.size[y] = 0\\n        else:\\n            self.rank[x] += 1\\n            self.par[y] = x\\n            self.size[x] += self.size[y]\\n            self.size[y] = 0\\n    def getsize(self, x):\\n        p = self.find(x)\\n        return self.size[p]\\nn, m = map(int, input().split())\\np = list(map(int, input().split()))\\nG = UnionFind(n)\\nfor i in range(m):\\n    x,y = map(int, input().split())\\n    G.union(x,y)\\nans = 0\\nfor i in range(1,n+1):\\n    if G.same_check(p[i-1], i):\\n        ans += 1\\nprint(ans)", "target": "367", "substitutes": {"self": ["Self", "this", "k", "_", "x", "object", "c", "node", "name", "app", "parent", "host", "e", "f", "obj", "func", "ns", "q", "w", "m", "r", "p", "block"], "n": ["j", "c", "np", "ng", "nm", " fn", "node", " N", "nb", "name", "num", "inner", "network", "nn", "number", "nr", "fn", "nt", "e", "ns", "sn", "w", "m", "r", "nc", "p", "ne", "N"]}}
{"code": "N = int(input())\\nH = list(map(int, input().split()))\\nmax_h = H[0]\\nflag = 0\\n\\nfor i in range(1, N):\\n    max_h = max(max_h, H[i])\\n    if max_h - H[i] > 1:\\n        flag += 1\\n\\nif flag:\\n    print('No')\\nelse:\\n    print('Yes')\\n", "target": "230", "substitutes": {"N": ["NA", "D", "S", "GN", "R", "NS", "NC", "NL", "NE", "B", "Ns", "T", "n", "J", "W", "Y", "Ni", "L", "SN", "NB", "NT", "NM", " n", "Size", "NN", "MN", "Q", "I", "X", "C", "NI", "Ne", "V", "P", "K", "O", "M", "F", "Z"], "H": ["U", "D", "HT", "S", "CL", "HD", "HC", "R", "E", "B", "RH", "T", "OH", "W", "HH", "J", "HB", "rh", "Y", "L", "G", "HA", "HK", "EH", "h", "IP", "HTTP", "HS", "Q", "GH", "I", "X", "C", "HM", "HEAD", "MH", "HI", "V", "P", "K", "O", "M", "F", "Z"], "max_h": [" max_n", " max_y", "min_h", "max_oh", "maxDh", " max_f", "max_f", "maxDc", "max_c", "max_H", "max9h", "max_height", " max_c", "max9height", "min_H", "min_sh", "maxDheight", "max_y", " max_height", " max_H", "max9oh", "min_c", "max9c", "max_sh", "max_n", "maxDoh", " max_oh"], "flag": ["type", "part", "field", "err", "alt", "lag", "bug", "short", "const", "af", "int", "ind", "flags", "long", "debug", "fun", "binary", "info", "bot", "id", "weight", "leaf", "sort", "force", "FLAG", "offset", "die", "ret", "bad", "line", "error", "bit", "ag", "age", "char", "agg", "len", "f", "code", "status", "kind", "init", "tag", "filter", "cat", "style", "Flag", "group", "arg", "count"], "i": ["pi", "di", "ji", "k", "x", "xi", "j", "c", "gi", "ci", "d", "a", "io", "start", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", "h", "ix", "index", "si", "u", "iu", "e", "f", "I", "ti", "b", "my", "mi", "ai", "z", "qi", "l", "v", "ii", "li", "p"]}}
{"code": "n=int(input())\\ns=input()\\nres=s[0]\\nans=1\\nfor i in range(1,n):\\n  if s[i]==res:\\n    continue\\n  else:\\n    res=s[i]\\n    ans+=1\\nprint(ans)", "target": "717", "substitutes": {"n": ["o", "k", "x", "c", "d", "nb", "Ns", "an", "num", "range", "ni", "y", "min", "nan", "nit", "len", "net", "f", "e", "nt", "b", "ns", "sn", "w", "nor", "z", "l", "m", "r", "nc", "p", "ne", "N"], "s": ["states", "ls", "fs", "o", "services", "rates", "parts", "S", "c", "results", "d", "ins", "ses", "ws", "a", "ss", "abs", "args", "qs", "t", "strings", "cs", "y", "g", "os", "ds", "cells", "ks", "gs", "lines", "si", "sets", "e", "f", "ps", "ns", "b", "es", "w", "l", "v", "m", "xs", "r", "p"], "res": ["rs", "resolution", "err", "x", "results", "ras", "ins", "sum", "ars", "pos", "re", "num", "range", "RES", "Res", "result", "cs", "arr", "id", "resh", "rss", "na", "os", "min", "rons", "pres", "ms", "ids", "ks", "next", "ris", "rys", "nr", "nos", "max", "reset", "ns", "resp", " Res", "rev", "ps", "us", "es", "q", "cr", "r", "nc", "p", "ons", "ran"], "ans": ["rs", "nas", "ras", "ins", "a", "ars", "ants", "amps", "ens", "args", "an", "ats", "cs", "ents", "rss", "sk", "na", "os", "urs", "ms", "ds", "pres", "ids", "nan", "ks", "span", "can", "cons", "aned", "ores", "ANS", "activation", "lan", "ann", "ns", "ands", "works", "annels", "ays", "p", "ons", "resolution"], "i": ["mini", "pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "d", "ri", "a", "start", "ori", "ind", "num", "ini", "bi", "id", "y", "h", "ix", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "end", "b", "ai", "z", "p", "qi", "v", "l", "ii", "li", "r", "m", "io"]}}
{"code": "N,D=map(int, input().split())\\nA = 0\\nfor i in range(N):\\n    X,Y=map(int, input().split())\\n    if (D*D) >= (X*X)+(Y*Y):\\n        A +=1 \\nprint(A)", "target": "131", "substitutes": {"N": ["U", "S", "Max", "R", "NS", "E", "NC", "B", "Ns", "T", "n", "W", "J", "L", "G", "Len", "Part", "Num", "Size", "Q", "Length", "I", "NO", "C", "NUM", "V", "P", "K", "O", "H", "M", "F", "Z"], "D": ["ND", "U", "DT", "CD", "R", "d", "Do", "E", "LD", "Ds", "FD", "B", "Day", "DO", "Data", "T", "JD", "DA", "DP", "G", "L", "DX", "DD", "DM", "DS", "MD", "Q", "DI", "DB", "I", "C", "DF", "DC", "P", "K", "DN", "O", "M", "DH", "F", "DE", "Z"], "A": ["As", "U", "NA", "S", "E", "Total", "Alpha", "a", "B", "CA", "Data", "All", "PA", "mA", "Action", "Array", "G", "AM", "Am", "Num", "Access", "HA", "Acc", "AY", "BA", "GA", "EA", "TA", "Area", "Adam", "Q", "Average", "Ha", "Count", "I", "AA", "C", "Answer", "V", "P", "API", "AH", "K", "AB", "O", "H", "M", "And", "F", "AC", "LA"], "i": ["k", "j", "gi", "c", "d", "col", " I", "start", "int", "ind", "id", "y", "h", "index", "ip", "u", "iu", "ti", "I", "ai", "z", "ii", "li", "p"], "X": ["U", "S", "x", "R", "E", "XX", "Line", "B", "Data", "T", "Day", "W", "J", "L", "G", "DX", "DD", "Size", "Q", "Length", "I", "C", "PE", "XL", "LL", "TX", "V", "P", "XP", "K", "ID", "O", "H", "M", "YY", "F", "Z"], "Y": ["U", "NY", "MY", "S", "Py", "R", "E", "XX", "B", "Day", "T", "Data", "W", "J", "Long", "L", "G", "y", "Col", "DD", "AY", "Co", "Q", "Python", "I", "XY", "C", "V", "P", "K", "O", "YA", "H", "M", "YY", "F", "Z"]}}
{"code": "import sys\\n\\nN = int(sys.stdin.readline())\\nA = list(map(int, sys.stdin.readline().split()))\\n\\nans = 0\\nfor i in range(N):\\n    if i % 2 == 0 and A[i] % 2 == 1:\\n        ans += 1\\n\\nprint(ans)", "target": "126", "substitutes": {"N": ["NA", "D", "S", "NS", "E", "NE", "B", "Ns", "T", "n", "Sn", "Y", "Ni", "G", "L", "Num", "SN", "NT", "Size", " n", "NN", "AN", "I", "X", "C", "NI", "Ne", "Na", "V", "P", "K", "KN", "O", "M", "F", "Z"], "A": ["As", "U", "NA", "D", "S", "Args", "Alpha", "a", "B", "CA", "All", "At", "Array", "Y", "AM", "G", "L", "AS", "AI", "An", "AP", "Ar", "AN", "ANS", "I", "AA", "C", "Na", "V", "P", "API", "AF", "O", "AC", "LA"], "ans": ["NA", "Ann", "anus", "aning", "nas", "ras", "ases", "reads", "a", "ars", "ants", "amps", "ens", "an", "s", "actions", " means", "ats", "cs", "ents", "anon", "sk", "na", "os", "anas", "ds", "ks", "nan", "An", "span", "ana", "can", "anes", "lines", "cons", "AN", "atan", "leans", " Ans", "aned", "ANS", "ann", "lan", "ns", "ane", "Na", "errors", "features", "ani", "mean", "aus", "ons"], "i": ["pi", "o", "k", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "ri", " I", "oi", "a", "ie", "start", "ori", "int", "ind", "n", "ini", "t", "ni", "bi", "id", "y", "ir", "h", "ix", "index", "ip", "eni", "si", "u", "iu", "e", "I", "f", "end", "b", "ti", "ai", "z", "p", "qi", "l", "v", "ii", "li", "r", "m", "ei", "io", "vi"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport math\\n\\n#\u5165\u529b\\n#S = str(input())\\na, b = map(int, input().split())\\n#N = int(input())\\n\\nif a <= b :\\n  print (a)\\nelse :\\n  print (a-1)\\n", "target": "35", "substitutes": {}}
{"code": "n = int(input())\\nd = list(map(int,input().split()))\\nm = int(input())\\nt = list(map(int,input().split()))\\nimport collections\\ncd = collections.Counter(t)\\nct = collections.Counter(d)\\n\\nans = 1\\nfor i in range(m):\\n    if ct[t[i]] < cd[t[i]]:\\n        ans = 0\\nif ans == 0:\\n    print(\"NO\")\\nelse:\\n    print(\"YES\")", "target": "210", "substitutes": {"n": ["o", "cn", "k", "c", "nb", "name", "ny", "ot", "ni", "na", "nn", "nl", "nt", "f", "e", "ns", "pn", "sn", "no", "l", "nc", "p", "ne", "N", "conn"], "d": ["o", "D", "dt", "x", "j", "c", "db", "pd", "nd", "bd", "s", "y", "sd", "dy", "g", "ds", "dh", "md", "dc", "f", "dd", "e", "b", "dl", "z", "dn", "l", "dat", "p", "ld"], "m": ["o", "mc", "k", "x", "tm", "c", "mad", "s", "y", "mn", "g", "dim", "md", "cm", "u", "f", "e", "b", "mi", "sm", "mm", "dm", "z", "l", "v", "r", "M", "mut", "p"], "t": ["tp", "o", "dt", "at", "type", "k", "out", "x", "j", "tm", "c", "T", "int", "ot", "wt", "s", "td", "y", "test", "rt", "g", "target", "tt", "table", "u", "f", "e", "nt", "b", "pt", "w", "ta", "z", "v", "l", "p"], "cd": ["D", "dt", "mc", "CD", "c", "db", "ci", "ecd", "de", "cb", "col", " cr", "pd", "nd", " cc", "ck", "cc", "ce", " dd", "cs", "td", "fd", "cond", "ds", "cp", "md", "dc", " c", "cdn", "xc", "nt", "dd", " dc", "xd", "C", "DC", " CD", "cr", "cat", "cf", "ld", "cl", "count"], "ct": ["dt", "nec", "CD", "c", "ci", "ctx", "CT", "col", "const", "nd", "int", "cc", "ont", "cs", "cond", "ant", "act", "cp", "cm", "dc", "ect", "st", " c", "xc", "et", "sect", "dd", "nt", "cr", "lc", "cat", "cf", "nc", "ld", "cl", "count"], "ans": ["ls", "cus", "aning", "nas", "ins", "ations", "ars", "ants", "amps", "anch", "ens", "an", "s", "anc", "ni", "ats", "cs", "ents", "anon", "sk", "annot", "na", "os", "ant", "anas", "ds", "ms", "nan", "An", "nn", "can", "AN", "aned", "leans", "ANS", "dd", "ann", "anges", "ns", "iann", "scan", "lan", "ions", "ani", "ai", "aces", "ays", "annels", "ace", "acs", "eps", "any"], "i": ["pi", "it", "o", "k", "x", "j", "gi", "c", "ri", "a", "inter", "start", "int", "ind", "num", "ui", "ini", "s", "bi", "id", "y", "h", "index", "ip", "si", "il", "u", "iu", "f", "ti", "I", "end", "b", "e", "q", "ai", "z", "qi", "v", "l", "ii", "li", "p"]}}
{"code": "import sys\\nimport os\\n\\nMOD = 10 ** 9 + 7\\n\\n\\ndef main():\\n    if os.getenv(\"LOCAL\"):\\n        sys.stdin = open(\"input.txt\", \"r\")\\n\\n    N = int(sys.stdin.buffer.readline().rstrip())\\n    print('Hello World') if N == 1 else print(sum(int(sys.stdin.buffer.readline().rstrip()) for _ in range(2)))\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "691", "substitutes": {"MOD": [" L", " R", " offset", "R", " U", " CL", "B", "mod", " C", "L", " X", "SIZE", "NT", " mod", " Z", " M", " mode", "I", " CN", "X", " Mod", " magic", "Mod", " major", "P", "K", " P", " base"], "sys": ["tp", "sync", "sit", "mac", "input", "hw", "c", "np", "local", "system", "System", "util", "ll", "s", "Sys", "game", "cs", "linux", "site", "proc", "python", "script", "os", "sa", "machine", "tty", "magic", "shell", "pse", "self", "gui", " lib", "windows", "server", "py", "host", " system", "net", "process", "spec", "f", "ys", "us", "func", "so", "kernel", "six", "sb", "module", "lib", "pc", "security", "sim", "exec"], "stdin": ["builtIN", "randbin", "stin", "STDIN", "randIn", "STDin", "builtin", "randin", " stdins", "stdins", "stdIn", " stdout", " stdIN", "builtout", "STDins", "stins", "dustins", "stdbin", "dustin", "streamin", "streamins", "stIn", "dustout", "streambin", "dustIN", "STDout", "stddin", "STDdin", "stbin", "stdout", "streamIn", "builtdin", " stddin", "randins", "stdIN"], "N": ["ND", "NA", "D", "S", "R", "E", "NL", "NC", "NE", "B", "Ns", "T", "n", "J", "Ni", "L", "A", "G", "SN", "NT", "NM", "Q", "I", "X", "NO", "C", "NI", "V", "P", "K", "O", "H", "M", "F", "Z"], "_": [" __", "x", " p", "__", " time", " ip", "n", "time", "g", "len", "of", "p", "l"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().rstrip()\\ndef main():\\n    n, x, t = map(int,input().split())\\n    print(-t*(-n//x))\\n\\nif __name__=='__main__':\\n    main()", "target": "105", "substitutes": {"n": ["o", "k", "j", "c", "np", "d", " N", "name", "a", "num", "i", "y", "en", "h", "nan", "nn", "un", "number", "u", "f", "e", "nt", "b", "ns", "pn", "no", "w", "z", "v", "l", "m", "nc", "ln", "p", "ne", "N"], "x": ["k", "xp", "xi", "j", "c", "d", "T", "int", "s", "i", "y", "tx", "xxx", "ax", "xt", "rx", "ct", "ix", "index", "number", "ex", "u", "f", "e", "b", "X", "xx", "xes", "w", "z", "v", "l", "m", "xs", "p"], "t": ["o", "type", "tp", "dt", "at", "k", "j", "c", "d", "a", "T", "int", "s", "i", "y", "g", "ts", "number", " T", "u", "f", "e", "b", "tn", "ta", "z", "v", "l", "te", "m", "r", "p", "temp", "N"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nn, m = [int(x) for x in input().split()]\\ng = [[] for _ in range(n)]\\n\\nfor _ in range(m):\\n    l, r, d = [int(x) for x in input().split()]\\n    g[l - 1].append((r - 1, d))\\n    g[r - 1].append((l - 1, -d))\\n\\nd = [None] * n\\nvisited = [0] * n\\n\\nfor i in range(n):\\n    if visited[i] != 0:\\n        continue\\n    stack = [i]\\n    d[i] = 1\\n    while stack:\\n        u = stack.pop()\\n        visited[u] = 1\\n        for v, d_ in g[u] :\\n            if d[v] is None:\\n                d[v] = d[u] + d_\\n                stack.append(v)\\n            else:\\n                if d[v] != d[u] + d_ :\\n                    print(\"No\")\\n                    sys.exit()\\nprint(\"Yes\")\\n", "target": "672", "substitutes": {"input": [" argument", "file", "string", "empty", "control", "first", "out", " inside", "between", "current", "param", "argument", "raw", "output", "data", " Input", "expression", "int", "view", " output", "initial", "array", " int", "config", "space", " source", " data", "entry", "connect", "image", "command", "url", "parent", "version", "line", " inf", "source", "request", "null", "stream", "but", " inputs", "active", "background", "f", "reader", "select", "buffer", "inf", "Input", "until", "temp", "form", "block"], "n": ["o", "k", "j", "c", "nb", "s", "an", "num", "t", "y", "h", "nl", "nu", "nr", "len", "net", "e", "nt", "f", "max", "b", "ns", "sn", "q", "w", "nor", "z", "nc", "ln", "p", "ne", "N"], "m": ["mini", "o", "j", "c", "s", "num", "range", "y", "mn", "h", "ms", "md", "cm", "e", "f", "mu", "b", "am", "mi", "sm", "mm", "w", "dm", "z", "M", "p"], "x": ["k", "full", "xp", "xi", "work", "c", "lex", "int", "ux", "s", "num", "t", "y", "check", "ax", "h", "xt", "xxxx", "sex", "rx", "ct", "ix", "index", "rax", "number", "ex", "xc", "e", "f", "X", "xx", "xf", "xes", "inf", "wx", "q", "w", "z", "xs", "p"], "g": ["history", "vg", "j", "c", "gi", "gu", "gm", "gru", "gc", "go", "ge", "gl", "s", "cfg", "t", "G", "gz", "game", "reg", "gd", "get", "gui", "h", "ig", "gs", "gg", "bg", "ged", "graph", "f", "e", "b", "ga", "q", "gh", "w", "dict", "z", "gn", "groups", "gen", "p", "group", "gp"], "_": ["o", "k", "j", " y", " line", " p", "lex", "all", " time", "id", "y", "time", "val", " j", "self", "ix", "f", "X", " num", "q", "z", "p"], "l": ["o", "k", "ol", "ul", "j", "c", "kl", "a", "ll", "s", "L", "y", "h", "nl", "e", "f", "rl", "b", "dl", "w", "z", "lc", "length", "li", "ln", "p"], "r": ["rs", "o", "k", "rd", "j", "c", "er", "R", "ar", "a", "s", "rh", "y", "h", "dr", "pr", "lr", "ur", "br", "e", "f", "rl", "b", "q", "w", "z", "cr", "right", "ru", "p"], "d": ["di", "o", "D", "dt", "dos", "rd", "k", "j", "c", "ded", "db", "pd", "a", "data", "nd", "bd", "da", "s", "t", "wd", "gd", "sd", "y", "dy", "id", "h", "ds", "dh", "do", "dc", "dad", "e", "dd", "f", "xd", "b", "dl", "w", "dict", "z", "dm", "dn", "cd", "did", "dat", "p", "ld"], "visited": ["visorted", " visitedited", "navit", "Visiting", "VISipped", "expited", "Visit", " visitedanded", "visanded", "visipped", "VISitted", "VISorted", "visiting", "navitted", "vertiting", "Visanded", "vertited", "expit", "Visipped", "VISited", "navorted", "expanded", "vertitted", "VISiting", "Visorted", "VISit", "visit", "visitted", " visitedit", "Visited", "vertipped", "navited", "Visitted"], "i": ["pi", "it", "o", "k", "xi", "j", "c", "ci", " I", "a", "ie", "start", "cli", "int", "ind", "s", "ini", "t", "id", "y", "ix", "index", "ip", "si", "iu", "f", "I", "e", "b", "q", "w", "z", "p", "qi", "ii", "li"], "stack": ["history", "step", "window", "trace", "c", "cycle", "slice", "current", "left", "back", "hold", "acks", "data", "steps", "queue", "scope", "complete", "start", "head", "int", "ind", "tail", "sl", "s", "list", "depth", "inc", "cache", "loop", "roll", "pack", "forward", "iter", "self", "parent", "set", "st", "sequence", "Stack", "stream", "seq", "graph", "process", "f", "load", "stage", "buffer", "shift", "module", "counter", "w", "layer", "chain", "style", "sc", "ace", "str", "p", "cl", "count"], "u": ["U", "o", "k", "ul", "uv", "c", "j", "a", "s", "ui", "t", "id", "y", "ue", "uk", "un", "nu", "cu", "iu", "ur", "e", "f", "b", "us", "bu", "uu", "q", "w", "uit", "uid", "lu", "ru", "p", "up", "ou"], "v": ["o", "k", "ve", "j", "uv", "c", "ul", "a", "vid", "vs", "vin", "s", "var", "vp", "t", "ov", "ui", "y", "h", "lv", "vc", "va", "f", "e", "b", "vd", "vu", "ev", "V", "w", "sv", "nv", "p", "vi"], "d_": ["f ", "D_", "b_", "ds_", "b ", "u_", "f_", "i_"]}}
{"code": "import math\\na,b,x = map(int, input().split())\\n\\nif a*a*b == x:\\n    print(0)\\n    exit()\\n\\ntan = (a*a*a)/(2*(a*a*b-x))\\ntan_thre = a/b\\n\\nif tan > tan_thre:\\n    ans = math.degrees(math.atan(tan))\\n    print(90-ans)\\nelse:\\n    tan = 2*x/(a*b*b)\\n    ans = math.degrees(math.atan(tan))\\n    print(90-ans)", "target": "619", "substitutes": {"a": ["ma", "area", "k", "_", "c", "aw", "d", "ar", "ama", "ab", "ac", "int", "n", "da", "an", "s", "A", "fa", "i", "y", "alpha", "na", "sa", "ax", "ia", "la", "aa", "u", "va", "e", "f", "am", "ad", "ca", "ai", "ae", "w", "asa", "ba", "z", "l", "v", "aj", "m", "p", "au"], "b": ["o", "k", "al", "pb", "j", "c", "db", "d", "cb", "ab", "ac", "B", "bc", "bd", "n", "an", "rb", "fa", "t", "bi", "i", "y", "bs", "g", "fb", "h", "ib", "aa", "wb", "u", "lb", "e", "f", "ad", "base", "sb", "w", "ae", "z", "ba", "v", "l", "bb", "m", "r", "bf", "p"], "x": ["xi", "j", "c", "d", "ab", "ac", "int", "n", "an", "t", "A", "i", "y", "na", "g", "ax", "h", "rx", "index", "number", "ex", "xc", "u", "f", "e", "X", "xx", "ca", "q", "w", "z", "v", "l", "m", "xs", "r", "bb", "p"], "tan": ["ban", "fat", "kat", "sin", "san", "wan", "sum", "alan", "tun", "atten", "ny", "pa", "n", "stan", "an", "t", "fa", "dan", "alpha", "anon", "sk", "ski", "na", "sat", "sa", "tin", "plan", "asin", "ana", "nan", "span", "beta", "lon", "atan", "kin", "cas", "len", "ann", "lan", "tta", "Na", "no", "ani", "tn", "ta", "Tan", "ba", "lat", "mean", "fee", "don", "ln", "han", "ran", "au"], "tan_thre": ["tan_phrew", "tan_thresh", "tan_THru", "tan_shre", "tan_phRE", "tan_phru", "tan_shRE", "tan_shree", "tan_thru", "tan_thRE", "tan_shrew", "tan_thren", "tan_phren", "tan_THrew", "tan_THre", "tan_three", "tan_phre", "tan_THren", "tan_shren", "tan_shresh", "tan_threw", "tan_shru", "tan_phree", "tan_phresh"], "ans": ["ls", "cus", "san", "wan", "nas", "ras", "ins", "aos", "ants", "pos", "ean", "an", "anc", "fa", " means", "ats", "cs", "ians", "anon", "sk", "na", "os", "anas", "ds", "ana", "nan", "nn", "span", "can", "atan", "kin", "aned", "ANS", "lan", "ann", "ns", "tta", "ane", "chan", "ani", "ai", "han", "ln", "aus", "ons", "ran", "au"]}}
{"code": "from collections import deque\\nN, M = map(int, input().split())\\n\\nh = [[]*N for _ in range(N)]\\nAB = []\\n\\nfor _ in range(M):\\n    a, b = list(map(int, input().split()))\\n    a -= 1\\n    b -= 1\\n    h[a].append(b)\\n    h[b].append(a)\\n    AB.append([a, b])\\n\\nans = 0\\n\\nfor i in range(M):\\n    a, b = AB[i]\\n    h[a].remove(b)\\n    h[b].remove(a)\\n    \\n    fl = [False]*N\\n\\n    q = deque([0])\\n    while q:\\n        t = q.popleft()\\n        if fl[t]:\\n            continue\\n        fl[t] = True\\n        for tt in h[t]:\\n            q.append(tt)\\n    \\n    if not all(fl):\\n        ans += 1\\n\\n    h[a].append(b)\\n    h[b].append(a)\\n\\nprint(ans)", "target": "634", "substitutes": {"N": ["NA", " NP", "D", "S", " E", " L", " R", " NI", "R", "NS", "E", "NC", "NE", " K", "B", "Ns", "T", "n", "W", " O", "J", " C", "Y", "A", "L", "G", "Ni", "Num", " W", " n", "NN", "MN", "Q", "AN", "I", "X", "C", " B", "Na", "Ne", " D", " G", "V", "P", "Mo", "K", " P", "O", "m", "H", "F", "Z"], "M": ["U", "MO", "Multi", "LM", "D", "S", "MQ", "R", "E", "B", "T", "n", "W", "Y", "A", "L", "MU", "DM", "RM", "MD", "Many", "MS", "MODE", "MN", "Q", "ME", "MON", "I", "X", "MI", "C", "MA", "V", "P", "Mo", "K", "MC", "MX", "m", "O", "H", "F", "CM", "MF", "Z"], "h": ["hl", "o", "home", "ha", "k", "work", "oh", "x", "c", "d", "ht", "bh", "ab", " H", "n", "HH", "both", "rh", "s", "eh", "y", "ph", "FH", "body", "g", "ah", "hd", "hh", "th", "ach", "u", "f", "e", "help", "hi", "uh", "sh", "w", "z", "AH", "l", "v", "han", "hm", "m", "H", "he", "ih", "p", "hs"], "_": ["o", "k", "out", "x", " un", " line", "__", "n", " time", "all", "s", "non", " self", " n", "ip", " seq", "f", " block", "l", "m", "p", "ing"], "AB": ["SH", "Tab", "abb", "BM", "BF", "IB", "nb", "ab", "B", "BB", "UB", "W", "HB", "AD", "array", "A", "AM", "Ab", "NB", "HA", "hab", "BA", "ah", "abc", "ib", "AK", "BI", "OB", "BL", "Q", "DB", "AV", "ABC", "AA", "AE", "am", "SB", "AST", "MB", "AF", "AH", "BP", "bb", "AC", "H", "AT"], "a": ["ma", "area", "o", "x", "c", "aw", "ar", "d", "ak", "ab", "ac", "af", "n", "da", "an", "s", "A", "fa", "y", "alpha", "api", "sa", "ah", "ia", "aa", "u", "va", "e", "f", "ad", "ca", "am", "ga", "ai", "ae", "w", "asa", "ba", "aaa", "aj", "ao", "m", "p", "au"], "b": ["o", "eb", "k", "mb", "x", "j", "c", "db", "d", "ob", "nb", "back", "ab", "bh", "B", "bd", "n", "both", "s", "an", "A", "rb", "bi", "y", "bs", "bar", "g", "ib", "aa", "u", "lb", "e", "f", "base", "sb", "w", "be", "z", "ba", "l", "v", "m", "bb", "r", "p"], "ans": ["ls", "ras", "nas", "ins", "ases", "ars", "ants", "ss", "aid", "n", "ens", "args", "an", "anc", "forces", " means", "ats", "cs", "ents", "anon", "ams", "sk", "na", "os", "anas", "ds", "ks", "nan", "ana", "can", "la", "AN", "aned", "leans", "ANS", "ann", "ad", "ns", "lan", "ushes", "ai", "ae", "ani", "ays", "eps", "aus", "ons", "au"], "i": ["pi", "it", "o", "x", "xi", "j", "c", "d", " I", " am", "ie", "int", "ind", "n", " ip", "num", "ini", "bi", "id", "y", "iq", "api", " j", "ix", " e", "ia", "ip", "si", " id", "u", "iu", "f", "I", " o", "e", " nan", " num", "ai", "l", "ii", "m", "li", "p"], "fl": ["el", "bool", "ls", "o", "flush", "control", "fw", "lf", "ul", "c", "j", "col", "kl", "ff", "sl", "FL", "fc", "n", "all", "pull", "ll", "Fl", "fa", "fe", "force", "cond", "url", "vel", "bl", "nl", "flo", "il", "ft", "flu", "fi", "fn", "f", "fly", "pl", " FL", "z", "l", "v", "flat", "fr", "ln", "p", "flow", "cl", "fp"], "q": ["o", "k", "qt", "x", "c", "dq", "d", "question", "ac", "queue", "n", "qs", "s", "list", "que", "ch", "y", "check", "g", "qa", "self", "query", "Q", "sq", "u", "e", "f", "qq", "w", "z", "qi", "v", "l", "m", "r", "p", "qu", "cl"], "t": ["tp", "type", "dt", "o", "at", "k", "qt", "x", "bt", "j", "c", "d", "T", "n", "wt", "s", "y", "test", "rt", "g", "ts", "tz", "tf", "the", "u", "e", "f", "pt", "w", "ta", "z", "v", "l", "te", "m", "p", "temp"], "tt": ["tp", "dt", "qt", "ott", "x", "kk", "abb", "tm", "tu", "tr", "tc", "ss", "tw", "y", "sk", "time", "rt", "ty", "tg", "tv", "ts", "tz", "tf", "ted", "st", "att", "ee", "tim", "ti", "nt", " tv", "mm", "TT", "pt", "tk", "yy", "ta", "te", "text", "bb", "li", "tn", "tl", "kt"]}}
{"code": "import sys\\nfrom functools import lru_cache\\n\\n\\nsys.setrecursionlimit(500000)\\n\\n\\n@lru_cache(maxsize=None)\\ndef rec(n):\\n    if n == 0:\\n        return 0\\n    res = n\\n    i = 1\\n    while i <= n:\\n        res = min(res, rec(n - i) + 1)\\n        i *= 6\\n    i = 9\\n    while i <= n:\\n        res = min(res, rec(n - i) + 1)\\n        i *= 9\\n    return res\\n\\n\\nN = int(input())\\nprint(rec(N))\\n\\n\\n", "target": "460", "substitutes": {"n": ["j", "c", "nb", "num", "non", "Ni", "t", "eni", "f", "rn", "ns", "z", "m", "p", "ne", "k", "x", "R", "d", "a", "an", "Num", "y", "na", "network", "nan", "max", "none", "sn", "no", "ii", "r", "M", "nin", "node", "int", "s", "nn", "u", "len", "net", "fn", "nt", "e", "pn", "rec", "v", "l", "nc", "ln", "o", "Ns", "all", "ni", "min", "un", "number", "nit", "b", "w"], "res": ["rs", "rest", "err", "response", "results", "runs", "ri", "re", "rez", "RES", "reg", "remote", "Res", "result", "details", "cs", "resh", "na", "min", "os", "blocks", "cells", "rows", "pres", "ret", "ms", "ids", "next", "rep", "vals", "ris", "rys", "row", "nr", "net", "nos", "reset", "rev", "resp", " Res", "rec", "gr", "values", "ps", "features", "init", "content", "ress", "Results", "r", "prev", "p", "req", " results", "resolution"], "i": ["mini", "pi", "di", "o", "x", "xi", "j", "c", "ci", "d", "ri", "a", "ori", "start", "int", "ind", "num", "ui", "ini", "ni", "bi", "id", "y", "info", "ix", "index", "multi", "eni", "si", "u", "iu", "f", "I", "ti", "e", " ni", "mi", "q", "ai", "init", "z", "chi", "qi", "l", "v", "ii", "li", "r", "m", "p", "vi", "ne", "zi"], "N": ["NA", "D", "S", " NI", "R", "NS", "NC", "NL", "Ns", "W", "Y", "Ni", "L", "Num", "NT", "NN", " Ne", "MN", "Q", "I", "X", "C", "NI", "Ne", "Na", "NR", "NG", "RN", "V", "P", "K", "O", "M", "F", "Z"]}}
{"code": "A = list(map(int, input().split()))\\n\\nkey = 0\\nfor i,a in enumerate(A):\\n    if a == 0:\\n        key = i+1\\n        break\\nprint(key)\\n", "target": "727", "substitutes": {"A": ["AR", "As", "U", "NA", "D", "S", "Alpha", "B", "CA", "All", "T", "W", "mA", "Array", "array", "L", "AM", "G", "alpha", "Access", "HA", "AI", "SA", "TA", "Ar", "I", "AA", "X", "C", "P", "API", "K", "AB", "ACK", "O", "AC", "M", "H", "F", "N", "LA"], "key": ["type", "step", "case", "field", "k", "phrase", "x", "j", "ak", "point", "name", "ac", "value", "start", "int", "switch", "action", "list", "id", "y", "alpha", "check", "val", "ax", "change", "index", "ip", "error", "row", "char", "ask", "max", "code", "base", "q", "Key", "ace", "KEY", "length", "order", "temp", "ice", "count"], "i": ["area", "pi", "di", "o", "step", "k", "x", "xi", "j", "c", "ci", "slice", "io", "value", "start", "int", "ind", "n", "bi", "id", "y", "api", "alpha", "index", "ip", "si", "u", "iu", "e", "I", "f", "ai", "v", "l", "m", "li", "p"], "a": ["ma", "area", "ha", "x", "j", "c", "ac", "data", "ab", "wa", "af", "pa", "action", "mA", "n", "ata", "s", "an", "fa", "alpha", "na", "qa", "sa", "ana", "index", "aa", "ava", "va", "oa", "e", "f", "am", "b", "ca", "sha", "ai", "ae", "ea", "p"]}}
{"code": "#encoding:utf-8\\n\\nab = raw_input().split()\\n\\na = int(ab[0])\\nb = int(ab[1])\\n\\nd = a / b\\nr = a % b\\nf = round(float(a) / float(b), 5)\\n\\nprint d, r, f", "target": "301", "substitutes": {}}
{"code": "n = int(input())\\nA = list(map(int,input().split()))\\nf = 1 \\nc = 0\\n\\nwhile f == 1:\\n    f = 0\\n    for j in range(n-1,0,-1):\\n        if A[j] < A[j-1]:\\n            inc = A[j]\\n            A[j] = A[j-1] \\n            A[j-1] = inc\\n            f = 1\\n            c += 1\\nprint(\" \".join(map(str,A)))\\nprint(c)", "target": "561", "substitutes": {"n": ["o", "k", "x", "np", "d", "nb", "a", "Ns", "num", "s", "an", "t", "i", "y", "g", "h", "network", "u", "net", "nt", "e", "b", "ns", "C", "sn", "q", "w", "z", "l", "m", "r", "nc", "p", "N"], "A": ["As", "U", "NA", "D", "S", "Up", "Alpha", "a", "ac", "B", "CA", "All", "T", "PA", "W", "IA", "At", "Array", "Y", "array", "L", "G", "First", "Am", "AM", "alpha", "AI", "SA", "AU", "An", "LA", "AP", "Average", "Ar", "Q", "I", "AA", "b", "X", "Ang", "App", "C", "The", "MA", "V", "P", "K", "p", "AF", "API", "O", "H", "M", "Input", "F", "AC", "AAA", "N", "au"], "f": ["fs", "o", "k", "x", "d", "col", "a", "ac", "fc", "F", "s", "fac", "t", "fa", "rf", "i", "info", "y", "fe", "g", "fd", "fb", "h", "ct", "index", "sf", "u", "e", "b", "inf", "w", "frac", "z", "l", "v", "m", "fr", "r", "cf", "bf", "p", "conf", "count", "fp"], "c": ["cur", "o", "k", "err", "x", "ci", "d", "cb", "col", "a", "ac", "uc", "bc", "fc", "center", "cc", "ce", "t", "i", "cs", "y", "con", "h", "ct", "cm", "dc", "u", "e", "b", "code", "C", "counter", "cr", "l", "v", "lc", "conf", "cf", "nc", "p", "rc", "count"], "j": ["note", "kj", "el", "ji", " J", "o", "js", "part", "k", "x", "d", "a", "jc", "ie", "ind", "J", "num", "ch", "i", "y", "g", "h", "ij", "bj", "next", "jl", "jo", " l", "br", "u", "ja", "e", "obj", "end", "b", "jj", "jet", "adj", " i", "q", "dj", "z", "v", "jp", "aj", "l", "fr", "li", "m", "ii", "p", "uj", "ld"], "inc": ["incre", "err", "out", "exp", "feed", "Inc", "ac", "dec", "int", "ind", "fc", "num", "cc", "anc", "amp", "circ", "INC", "alpha", "ax", "acc", "index", "dc", "adj", "sup", "rec", "inf", "frac", "z", "ref", "lc", "fr", "nc", "ln", "p", "up", "rc", "enc"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\ndef main():\\n    N, A, B = map(int, input().split())\\n    print(['Yes', 'No'] [N + A < B])\\n\\nif __name__ == '__main__':\\n    main()", "target": "618", "substitutes": {}}
{"code": "n ,m= list(map(int,input().split()))\\nkagi = [[]for _ in range(m)] \\n#a\u5186\u3000b\u7a2e\u985e\u958b\u3051\u3089\u308c\u308b\\nfor i in range(m):\\n    a,b =  list(map(int,input().split()))\\n    X =  list(map(int,input().split()))\\n    bit = 0\\n    for x in X:\\n        bit |= 2**(x-1)\\n    kagi[i] = [a,bit]\\n\\nok = 2**n-1#\u5168\u90e8\u7a7a\u3044\u305f\u3089\u3053\u308c\\nkagi.sort(key=lambda x: x[1])\\nzenkai = 2**n\\ndp = [float('inf')]*int(zenkai+1)\\ndp[0] = 0\\nfor i in range(2**n):\\n    if dp[i] == float('inf'):\\n        continue\\n    for j in range(m):\\n        s = i|kagi[j][1]\\n        # print(s)\\n        dp[s] = min(dp[s],dp[i] + kagi[j][0])\\n# print(dp)\\nif dp[zenkai-1] == float('inf'):\\n    print(-1)\\nelse:\\n    print(dp[zenkai-1])", "target": "772", "substitutes": {"n": ["o", "k", "c", "np", "nm", "node", "nb", "name", "ni", "i", "na", "network", "nn", "nu", "net", "fn", "f", "ns", "pn", "l", "v", "nc", "ln", "p", "ne", "N"], "m": ["o", "k", "j", "c", "d", "name", "s", "num", "range", "i", "y", "g", "dim", "h", "multiple", "month", "index", "number", "bm", "u", "f", "e", "mu", "b", "mm", "w", "position", "z", "module", "v", "l", "hm", "r", "M", "p", "km"], "kagi": ["nagi", "nai", "knana", "kai", "knagi", "nana", "knatsu", "skana", "skagi", "natsu", "skatsu", "knai", "skai", "kana", "katsu"], "_": ["x", " __", " un", " p", " col", " time", " ip", " j", " f", " id", " block", " q"]}}
{"code": "a,b=map(int,input().split())\\nif a<=0 and b>=0:\\n  print('Zero')\\nelif a>0:\\n  print('Positive')\\nelif a<0 and b>0:\\n  if abs(a)%2==0:\\n    print('Positive')\\n  else:\\n    print('Negative')\\nelse:\\n  if (b-a)%2==0:\\n    print('Negative')\\n  else:\\n    print('Positive')", "target": "725", "substitutes": {"a": ["ma", "area", "sta", "x", "c", "d", "ar", "ama", "ab", "ac", "af", "int", "n", "pa", "da", "mA", "an", "s", "all", "A", "fa", "abs", "i", "y", "alpha", "na", "sa", "ana", "ia", "la", "aa", "u", "va", "oa", "f", "e", "ad", "am", "ca", "ga", "ai", "ae", "w", "asa", "ba", "aaa", "ea", "aj", "r", "p", "au"], "b": ["mb", "x", "pb", "j", "abb", "c", "db", "d", "cb", "nb", "ab", "B", "bc", "n", "abs", "rb", "bi", "i", "bot", "y", "bs", "bar", "body", "g", "fb", "ib", "bad", "beta", "br", "e", "f", "end", "ad", "base", "sb", "ae", "be", "z", "ba", "l", "v", "bb", "bf", "m", "emb", "p", "bp"]}}
{"code": "def main():\\n    A, B, C = map(int, input().split())\\n    if B + C <= A:\\n        print(0)\\n    else:\\n        print((B+C)-A)\\nif __name__ == \"__main__\":\\n    main()", "target": "140", "substitutes": {"A": ["U", "NA", "D", "S", "E", "Alpha", "a", "CA", "T", "PA", "W", "mA", "IA", "Y", "AD", "L", "AM", "G", "AY", "SA", "AP", "AA", "b", "X", "MA", "Na", "V", "P", "CC", "API", "AB", "AC", "M", "AW", "F", "H", "N", "LA"], "B": ["U", "D", "BF", "R", "E", "LB", "BB", "T", "UB", "TB", "BE", "W", "Y", "L", "G", "BA", "BI", "OB", "Q", "Bs", "DB", "WB", "I", "b", "X", "V", "P", "BC", "AB", "O", "H", "M", "F", "N"], "C": ["U", "Ca", "D", "S", "CN", "c", "E", "CT", "CA", "T", "W", "Y", "CU", "L", "G", "UC", "Con", "YC", "JC", "CF", "Q", "SC", "X", "DC", "V", "P", "CC", "K", "Cs", "EC", "BC", "CR", "VC", "H", "AC", "M", "F", "CM", "N"]}}
{"code": "a,b = [int(i) for i in input().split()]\\n\\nprint((1900*b + 100*(a-b)) * 2**b)", "target": "308", "substitutes": {"a": ["area", "auto", "sta", "x", "c", "aw", "d", "ac", "ab", "pa", "n", "year", "da", "an", "A", "y", "alpha", "api", "sa", "aa", "la", "u", "va", "f", "e", "ad", "ca", "base", "am", "ga", "w", "asa", "l", "aj", "p", " A"], "b": ["eb", "k", "x", "pb", "c", "db", "d", "cb", "nb", "ab", "B", "pa", "n", "binary", "A", "t", "y", "bs", "boot", "fb", "abc", "beta", "bin", "aa", "wb", "u", "lb", "e", "f", "base", " B", "sb", "w", "z", "l", "v", "m", "bb", "bf", "r", "p"], "i": ["pi", "di", "ji", "k", "x", "xi", "j", "idi", "c", "gi", "d", "ri", "phi", "oi", " I", "int", "ind", "n", "ini", "bi", "id", "key", "index", "bit", "si", "iii", "u", "iu", "e", "I", "ti", "f", "q", "z", "qi", "v", "l", "ii", "li", "p"]}}
{"code": "s = str(input())\\nif s[0] == 'A' and s[2:len(s)-1].count('C') == 1:\\n    j = s.index('C')\\n    w = s[1:j] + s[j+1:]\\n    if w.lower() == w:\\n        print('AC')\\n    else:\\n        print('WA')\\nelse:\\n    print('WA')", "target": "695", "substitutes": {"s": ["states", "ls", "o", "string", "rs", "parts", "js", "S", "services", "ssl", "su", "input", "speech", "c", "d", "ins", "ses", "a", "ss", "n", "sts", "t", "space", "strings", "i", "y", "os", "g", "comments", "h", "ts", "ds", "gs", "lines", "south", "si", "u", "sets", "letters", "f", "e", "b", "ns", "ans", "new", "es", "tests", "sb", "sv", "v", "l", "sg", "m", "xs", "r", "se", "p"], "j": ["o", "ji", "part", "js", "k", "x", "c", "d", "jc", "ie", "pos", "eight", "ind", "n", "J", "oj", "num", "t", "i", "y", "iq", "jan", "ij", "index", "next", "jl", "si", "ja", "f", "e", "jet", "je", "b", "jj", "adj", "obj", "dj", "z", "l", "v", "jp", "ii", "m", "r", "li", "aj", "p", "uj"], "w": ["iw", "wig", "case", "k", "fw", "work", "wl", "wr", "c", "wan", "aw", "d", "ws", "name", "wa", "W", "n", "ww", "wt", "t", "y", " W", "nw", "width", "sw", "g", "we", "word", "wal", "ow", "ew", "rw", "wn", "wb", "u", "f", "e", "b", "wx", "q", "kw", "z", "wo", "v", "r", "words", "wh", "p", "wu"]}}
{"code": "K=int(input())\\nodd, even = (K+1)//2,K//2\\nprint(odd*even)", "target": "402", "substitutes": {"K": ["KR", "D", "Even", "k", "IK", "Max", "DK", "Z", "SK", "Dec", "Flow", "B", "T", "J", "OK", "Y", "NK", "G", "L", "Power", "KK", "HK", "IP", "UK", "AK", "Mask", "Q", "Work", "PK", "X", "C", " k", "P", "ID", "KN", "Sk", "KS", "O", "H", "M", "F", "Kent", "N", "CL"], "odd": ["auto", "o", "part", "step", "Even", "k", "element", "od", "off", "d", "down", "old", "a", "diff", "nd", "dec", "eight", "ind", "mod", "year", "both", "opp", "an", "inc", "kick", "rod", "inner", "unk", "ok", "division", "ow", "day", "dd", "third", "oko", "no", "night", "power", "boy", "length", " Odd"], "even": ["Even", "numbered", "plus", "off", "down", "left", "only", "art", "diff", "both", "all", "per", "double", "initial", "own", "eff", "zero", "on", "floor", "vert", "ord", "un", "day", "number", "material", "hen", "ven", "dd", "one", "den", "danger", "each", "other", "length", "don", "order", "up", "pe", "different", "two", "wrong"]}}
{"code": "n=int(input()) \\nc=list(map(int, input().split())) \\nans = 0\\n \\nif n == 1:\\n    print('Yes')\\n    exit()\\nif n == 2:\\n    if c[0] > c[1] + 1:\\n        print('No')\\n        exit()\\nif n >= 3:\\n    for i in range(n-1):\\n        if c[i] > c[i+1] +1:\\n            print('No')\\n            exit()\\n        if c[i] == c[i+1] +1:\\n            ans = max(ans,c[i])\\n            if c[i+1] + 1 < ans:\\n                print('No')\\n                exit()\\n\\n\\nprint('Yes')", "target": "230", "substitutes": {"n": ["ner", "o", "cn", "k", "x", "j", "np", "d", "ng", "yn", "nb", "name", "all", "s", "an", "non", "t", "num", "ni", "y", "nw", "en", "h", "network", "nn", "un", "nu", "u", "net", "f", "nt", "rn", "fn", "b", "e", "ns", "pn", "C", "none", "sn", "hn", "no", "w", "nor", "nat", "z", "l", "zn", "m", "nc", "ln", "p", "ne", "N", "conn"], "c": ["o", "cus", "mc", "case", "k", "x", "ci", "d", "col", "ac", "a", "s", "cc", "ce", "t", "ch", "cache", "cs", "ec", "y", "g", "con", "h", "cp", "ct", "co", "cin", "cm", "dc", "cu", "u", "xc", "e", "f", "b", "code", "ca", "arc", "C", "w", "z", "cr", "l", "lc", "ic", "cat", "sc", "v", "m", "nc", "cf", "p", "cl", "count"], "ans": ["offs", "san", "aning", "nas", "ras", "ins", "a", "ations", "ars", "ants", "amps", "int", "anch", "an", "s", "anc", " means", "ats", "cs", "ians", "anon", "sk", "na", "anas", "ks", "ana", "nan", "An", "nn", "span", "can", "cons", "AN", "atan", "aned", "leans", "ania", "ANS", "ann", "lan", "ns", "ons", "none", "no", "ions", "ani", "ai", "ano", "aus", "any"], "i": ["mini", "pi", "di", "uri", "it", "o", "part", "ji", "x", "xi", "j", "gi", "ci", "d", "slice", "yi", "ri", "io", "start", "ie", "int", "ind", "ini", "ui", "t", "ni", "info", "id", "y", "inner", "ix", "source", "ip", "index", "eni", "si", "u", "iu", "fi", "e", "I", "f", "ti", "b", "mi", "q", "ai", "init", "z", "p", "qi", "l", "lc", "ii", "li", "m"]}}
{"code": "def solve():\\n    S = input()\\n    if S[0] != 'A':\\n        return 'WA'\\n    cnt = 0\\n    for i in range(2, len(S)-1):\\n        if S[i] == 'C':\\n            cnt += 1\\n            C = i\\n    if cnt != 1:\\n        return 'WA'\\n    T = S[:C] + S[C+1:]\\n    Tset = set(list(T[1:]))\\n    sletter = set(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\\n    if sletter.union(Tset) != sletter:\\n        return 'WA'\\n    return 'AC'\\n\\n\\ndef main():\\n    ans = solve()\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "695", "substitutes": {"S": ["U", "SE", "SH", "D", "GS", "SS", "R", "NS", "Z", "Sample", "SAM", "B", "TS", "W", "Si", "SI", "s", "Y", "A", "G", "L", "Part", "Sa", "SN", "AS", "Single", "SL", "ST", "SA", "PS", "Q", "Sign", "I", "CS", "X", "SU", "Sc", "V", "OS", "P", "Sl", "Parts", "SM", "SP", "O", "H", "M", "F", "N", "Set"], "cnt": ["scnc", "Cnd", "CNT", "cno", "ecnd", "cwd", "ccwd", " cnd", "Cnc", " cno", "ecNT", "scnt", "Cno", "cnd", "cnn", "Cnn", "ecnt", "ccno", "cnc", "ecnc", "Cnt", "cNT", "Cwd", " cnc", " cnn", "ccnt", "scNT", "scnn", "ccnd", " cwd", " cNT"], "i": ["pi", "it", "k", "x", "xi", "j", "c", "ci", "d", "a", "start", "int", "ind", "n", "s", "ni", "id", "y", "h", "index", "si", "u", "iu", "e", "I", "f", "b", "ai", "z", "l", "v", "ii", "li", "ei", "m", "p"], "C": ["U", "CI", "D", "CL", "c", "R", "E", " N", "B", "CA", "W", "Y", "A", "L", "G", "CU", "count", "Size", "JC", " c", "Q", "Count", "I", "X", "DC", "V", "P", "K", "Cs", "EC", "O", "H", "M", "F", "CM", "N", "Z"], "T": ["U", "D", "R", "E", "CT", "TC", "KT", "B", "TS", "W", "Y", "t", "L", "A", "G", "ET", "NT", "GT", "TA", "Q", "LT", "X", "TG", "TT", "V", "P", "O", "TF", "M", "H", "F", "Ts", "N", "Z"], "Tset": ["Aset", "Tpart", "Rcheck", "Scheck", "Svert", "tbase", "Tvert", "Abase", "Tbase", "Tcheck", "Rbase", "tspace", "tpart", "tcheck", "Rvert", "Tspace", "tvert", "Spart", "tset", "Sbase", "Apart", "Sspace", "Rset", "Sset", "Aspace"], "sletter": ["tsletter", "Sword", "ansletters", " sprint", "sikey", "tsprint", "SLetter", "sivector", "tsletters", "Sletters", "ansLetter", "sprint", "siletters", "Sletter", "siletter", "alsword", " skey", "alsletter", "sLetter", "sword", " sletters", "skey", "sletters", "alsLetter", "Sprint", "Svector", "ansletter", "Skey", "tskey", "answord", "svector", " svector", "alsletters"], "ans": ["NA", "ls", "Ann", "ass", "nas", "ins", "a", "atten", "ants", "amps", "an", "anc", "s", "ents", "anon", "annot", "na", "ds", "ana", "An", "span", "trans", "can", "names", "cons", "AN", "aned", "ANS", "activation", "lan", "ann", "ns", "scan", "ays", "ace", "acs", "ons", "ran"]}}
{"code": "from math import pi\\nn=int(input())\\nprint(2*n*pi)", "target": "552", "substitutes": {"n": ["pi", "o", "k", "x", "xi", "j", "c", "np", "ci", "d", " fn", " N", "nb", "a", " p", "num", "i", "y", "mn", "network", "nn", "number", " c", "f", "b", "ns", "pn", "sn", "init", "z", "l", "v", "pc", "r", " pi", "m", "nc", "ln", "p", "N"]}}
{"code": "k, n = map(int, input().split())\\n\\na = list(map(int, input().split()))\\n\\nans = []\\n\\ndiss = []\\nsuma = 0\\n\\nfor i in range(len(a)-1):\\n    dis = a[i+1] - a[i]\\n    diss.append(dis)\\n\\n\\ndiss.append(k-a[-1]+a[0])\\ndiss.pop(diss.index(max(diss)))\\nprint(sum(diss))\\n", "target": "33", "substitutes": {"k": ["ik", "o", "kn", "ke", "work", "kk", "j", "x", "c", "d", "ak", "ky", "s", "y", "key", "sk", "g", "ok", "self", "ks", "dk", "ko", "u", "f", "e", "b", "q", "tk", "kw", "w", "z", "K", "v", "m", "r", "p", "km"], "n": ["o", "j", "c", "np", "d", "nb", "num", "t", "y", "na", "en", "nan", "nn", "f", "nt", "e", "b", "ns", "pn", "w", "z", "v", "l", "m", "nc", "p", "ne", "N"], "a": ["ma", "area", "o", "sta", "x", "c", "ar", "d", "ac", "ab", "int", "pa", "da", "ata", "an", "s", "array", "A", "y", "alpha", "analysis", "sa", "ana", "index", "za", "aa", "u", "va", "oa", "e", "f", "b", "am", "ad", "ca", "ga", "ai", "ae", "w", "asa", "ba", "z", "ea", "l", "aj", "m", "p", "au"], "ans": ["di", "Ann", "de", "nes", "ck", "an", "anc", "ni", "sd", "na", "plan", "ds", "des", "nan", "nn", "un", "dd", "ann", "ns", "scan", "no", "ani", "cross", "sc", "conf", "sky", "ne"], "diss": ["ddisse", "ditzerland", "Duss", "Dux", "dais", "andiscovery", " discovery", "discover", "sdisp", "Discover", "sdiss", "adass", "adisp", "ddiss", "daiss", "duss", " discover", "Disp", "Ditzerland", "dux", " dISS", "Doss", "doneitzerland", "fisse", " disse", "doneiss", "doss", "andass", "liss", "doneisse", "disse", "DISS", "lux", "lisse", "andiss", "odisp", " dass", " disc", "doneISS", "fass", "sduss", "lass", "sdux", "adiss", "disp", " disp", " duss", "discovery", " dux", "Diss", "daiscovery", "odass", "odisc", "fux", "ddISS", "disc", "andis", "odiss", "daass", "dditzerland", "sdass", "adisc", "dass", " doss", "Disse", "fiss", "sdISS", "dISS", "Dass"], "suma": ["Splay", "Suma", "boma", " sumin", "soma", "bumin", "buma", "Soma", "Sumin", "bplay", " splay", " soma", "sumin", "splay"], "i": ["mini", "pi", "di", "ji", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "ie", "start", "ind", "ini", "ui", "ni", "bi", "id", "y", "info", "uni", "h", "index", "ip", "eni", "si", "u", "iu", "e", "I", "f", "end", "ti", "b", "mi", "hi", "mu", "ai", "z", "qi", "l", "ii", "li", "m", "p"], "dis": ["el", "DIS", "di", "common", "par", "det", "Dis", "de", "dev", "du", "une", "bd", "re", "ben", "ui", "non", "syn", "sd", "dy", "os", "cor", "des", "rx", "un", " Dis", "nit", "rel", "spec", "ee", "mis", "disc", "no", "nor", "lib", "dist", "ne"]}}
{"code": "n, a, b = map(int, input().split())\\ntime = n * a\\nif time < b:\\n    print(time)\\nelse:\\n    print(b)", "target": "751", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "s", "an", "num", "i", "y", "g", "count", "nan", "number", "u", "net", "f", "e", "ns", "z", "l", "v", "m", "r", "p", "N"], "a": ["area", "access", "sta", "c", "aw", "ar", "wa", "ac", "ab", "da", "an", "A", "i", "y", "alpha", "sa", "ana", "ia", "span", "aa", "la", "va", "ad", "am", "ca", "sha", "ga", "ai", "ae", "asa", "ba", "aaa", "ea", "aj", "p", "au"], "b": ["eb", "k", "abb", "x", "c", "d", "ob", "nb", "cb", "ab", "B", "bound", "bis", "xb", "binary", "s", "rb", "bi", "i", "y", "split", "bs", "boot", "fb", "beta", "number", "batch", "wb", "lb", "e", "f", "base", "limit", "sb", "w", "v", "length", "m", "bb", "bf", "r", "p", "count"], "time": ["type", "x", "Time", "c", "cycle", "name", "data", "value", "start", "times", "depth", "t", "space", "weight", "id", "sleep", "cost", "timeout", "gap", "date", "change", "etime", "rate", "timer", "frequency", "error", "number", "size", "clock", "tim", "ime", "q", "power", "delay", "position", "z", "duration", "length", "m", "p", "money", "count"]}}
{"code": "from bisect import bisect_left, bisect_right\\nfrom decimal import Decimal\\nfrom scipy.special import comb\\nn, a, b = map(int, input().split())\\nv = list(map(lambda x:-int(x), input().split()))\\nv.sort()\\nli = [[None]*2 for _ in range(n+1)]\\nfor k in range(a, b+1):\\n    li[k][0] = -sum(v[:k])\\n    li[k][1] = comb(bisect_right(v, v[k-1])-bisect_left(v, v[k-1]), k-bisect_left(v, v[k-1]), exact=True)\\nans = [Decimal(0), 0]\\nfor i in range(n+1):\\n    if li[i][0] is None:\\n        continue\\n    tmp = Decimal(li[i][0]) / Decimal(i)\\n    if ans[0]==tmp:\\n        ans[1] += li[i][1]\\n    elif ans[0]<tmp:\\n        ans[0] = tmp\\n        ans[1] = li[i][1]\\nprint(ans[0])\\nprint(ans[1])", "target": "345", "substitutes": {"n": ["ner", "o", "cn", "x", "j", "c", "d", "ar", " N", "nb", "s", "num", "t", "y", "g", "count", "h", "nan", " l", "u", "net", "f", "e", "ns", "q", "w", "z", "l", "r", "m", "p", "N"], "a": ["area", "x", "c", "ar", "ak", "ab", "ac", "af", "pa", "mA", "da", "s", "an", "A", "alpha", "sa", "aa", "la", "u", "va", "f", "am", "ad", "ai", "ae", "asa", "ba", "l", "aj", "p", " A"], "b": ["o", "x", "j", "c", "d", "cb", "ob", "ab", "B", "bc", "bis", "s", "rb", "bi", "y", "bs", "h", "number", "aa", "lb", "e", "f", "sb", "w", "z", "ba", "l", "r", "m", "bb", "bf", "p", "bp"], "v": ["o", "ve", "cover", "x", "uv", "j", "c", "d", "ver", "value", "vv", "vs", "vin", "s", "vp", "array", "t", "video", "ov", "y", "g", "val", "h", "version", "lv", "vc", "u", "va", "f", "e", "vd", "vu", "ev", "V", "w", "sv", "z", "vol", "nv", "l", "ii", "m", "r", "p", "vi", "conv"], "li": ["lim", "el", "pi", "ls", "di", "lp", "mini", "loc", "ji", "le", "xi", "ul", "lf", "sci", "ci", "kl", "ie", "lo", "ili", "cli", "sl", "pa", "lie", "list", "LI", "ini", "ly", "ni", "bi", "ali", "lli", "bl", "lv", "py", "la", "si", "lin", "lia", "len", "lam", "pre", "ee", "Li", "like", "pl", "dl", "ani", "ai", "chi", "qi", "l", "lc", "ii", "lib", "lu", "ln", "vi"], "_": ["x", "c", "all", "an", "non", "num", "f", "p", "l", "m", "r"], "k": ["ik", "o", "kn", "ke", "x", "kk", "j", "work", "c", "d", "ak", "ky", "kl", "mk", "ck", "kick", "id", "y", "key", "alpha", "sk", "g", "unk", "ack", "h", "ok", "kid", "uk", "ks", "km", "dk", "ko", "kin", "u", "e", "f", "ki", "q", "kw", "w", "z", "K", "l", "m", "r", "p", "kr", "ka", "ku"], "ans": ["offs", "nas", "aos", "amps", "asts", "cases", "can", "cas", "AN", "aned", "ANS", "ns", "aus", "han", "au", "x", "ras", "ss", "ens", "photos", "an", "ads", "cs", "ents", "sk", "na", "anas", "ks", "nan", "anes", " cases", "atan", "oa", "ann", "lan", "ani", "eps", "ls", "san", "ations", "ars", "s", "anc", "man", "ats", "anon", "breaks", "ds", "ana", "nn", "fan", "span", "cons", "la", "leans", "anne", "ps", "ands", "es", "works", "ays", "params", "ones", "xs", "ln", "ons", "ins", "ants", "ops", "rules", " means", "outs", "ams", "os", "gan", "co", "ania", "ions", "ai", "aces", "mean", " ads"], "i": ["ik", "pi", "di", "ji", "o", "uri", "it", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "oi", "ie", "ori", "cli", "int", "ind", "s", "ini", "ui", "t", "ni", "bi", "info", "y", "api", "ib", "ix", "index", "ip", "iv", "si", "u", "iu", "e", "I", "ti", "f", "ki", "ai", "module", "z", "p", "qi", "l", "ii", "m", "ih", "io"], "tmp": ["tp", "kk", "bt", "sp", "np", "trap", "tc", "nb", "dest", "app", "const", "start", "diff", "pa", "vt", "crop", "meta", "amp", "cro", "opp", "t", "tab", "ppa", "test", "cmp", "alpha", "api", "front", "td", "rt", "cp", "tt", "top", "tf", "span", "py", "beta", "pad", "fake", "st", "source", "acc", "zip", "co", "mp", "pre", "buff", "nt", "obj", "max", "shape", "sup", "stuff", "emp", "attr", "ppo", "xs", "now", "txt", "p", "temp", "cop", "elt"]}}
{"code": "import sys\\nfrom collections import deque\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nn = int(readline())\\nlst1 = list(map(int,readline().split()))\\nans = []\\nif abs(max(lst1)) > abs(min(lst1)):\\n    a = lst1.index(max(lst1)) + 1\\n    for i in range(n):\\n        ans.append([a,i+1])\\n    for i in range(n-1):\\n        ans.append([i+1,i+2])\\nelse:\\n    a = lst1.index(min(lst1)) + 1\\n    for i in range(n):\\n        ans.append([a,i+1])\\n    for i in range(n-1,0,-1):\\n        ans.append([i+1,i])\\nprint(len(ans))\\nfor i,j in ans:\\n    print(i,j)\\n", "target": "412", "substitutes": {"read": ["sync", " write", "input", "open", "work", "feed", "x", "current", "reads", "raw", "data", " stream", "hand", "array", "check", "g", "connect", "rx", "clear", " reader", "index", "write", "stream", " Read", "fill", "run", "play", "default", "reader", "reading", "Read", "load", "end", "select", " reads", "rec", "buffer", "new", " reading", "content", "rough", "add", "READ", "length", "text", "r", "right", "ous", "count"], "readline": ["readingpage", "selectwrite", "writewrite", "loadlist", "selectlines", "writelines", "rawrange", "readblock", "readwrite", " readLine", "readnumber", " readlist", "writeline", "Readnumber", "rawlines", "writerange", "writepage", "playLine", "Readline", "readlist", "playlines", "readinglines", "readingline", "writeblock", "playpage", "rawline", " readnumber", "readingLine", "Readlist", "selectline", "playline", "rawwrite", "writeLine", "playblock", "loadline", "loadnumber", "loadlines", "selectrange", "readLine", "readpage", "Readlines", "readrange", " readblock"], "readlines": ["scanpoints", "worklining", "readlocks", "readingpoints", " readlining", "Readline", "readlists", "readinglines", "Readlining", "readnl", "Readlists", "workline", "readinglists", "worknl", "Readpoints", "scanlocks", "readinglocks", "worklines", "scanlists", " readnl", "readlining", "readpoints", "Readnl", "Readlines", "scanlines", "Readlocks"], "n": ["el", "o", "k", "x", "c", "d", " N", "nb", "s", "num", "t", "y", "min", "en", "network", " ns", "nan", "un", "nl", "number", " l", "u", "len", "net", "size", "nt", " ni", "e", "f", "b", "max", "ns", "sn", "no", "w", "nor", "z", "l", "v", "m", "r", "nc", "ln", "p", "ne", "N"], "lst1": ["lSt2", "llstp", "lST8", "LST1", "lstream1", "lbln", "lstfirst", "lSTp", "lintfirst", "lbla", "lbl10", "lnt0", "lst2", "lnt2", "lest1", "llbl10", " lstone", "llsta", "lest0", "lbl0", "lset1", "lst8", "lsts8", "lset2", "llesta", "lst3", "llst10", "lsts2", "lestfirst", "lsetp", "lST01", " lostfirst", " lst0", "llest1", "llbln", "LST2", "lint1", "lost2", "llst2", "lnta", "lbl3", "lST1", "llblp", "lnt1", "lost1", "lstream10", " lest1", "lostone", "lSTn", "lest3", "lSt01", "lesta", "Lst2", " lost2", "Lstp", "lintone", " lest01", "lint2", "LSTp", "lstream3", "lst10", "lST2", "llest0", "llst8", "lSt0", " lest0", "Lst1", "lstn", "llest2", "lsts1", "lstp", "lSt1", "lbl8", " lst01", "lestone", "llst3", "lST0", " lst2", "llbl1", "lstream2", "llstn", "lbl2", "llbl0", "lblp", "lst0", "lbl1", "llst0", "lest2", " lost1", "lestn", " lostone", "llbl2", "lest01", "lstsp", "lostfirst", "lsta", "llst1", "llbl8", "lst01", " lest2", " lstfirst", "lstone", "llbl3", "lest10"], "ans": ["offs", "atts", "regular", "san", "ras", "nas", "ins", "aos", "reads", "olds", "ations", "ars", "ants", "atten", "amps", "ens", "photos", "an", "list", "ads", "man", "rules", "ats", "actions", "asts", " means", "ents", "anon", "ams", "sk", "annot", "na", "os", "plan", "anas", "ds", "ks", "nan", "nn", "ana", "span", "can", "anes", "lines", "names", "AN", "atan", "leans", "aned", "cas", "ANS", "ann", "lan", "ns", "scan", "ands", "es", "errors", "ions", "works", "ai", "ani", "aces", "xs", "eps", "ln", "aus", "ons"], "a": ["ma", "area", "auto", "o", "at", "ya", "x", "c", "ar", "ab", "ie", "ac", "wa", "af", "pa", "da", "s", "A", "y", "alpha", "api", "na", "sa", "ana", "ia", "aa", "la", "u", "va", "f", "e", "ad", "am", "ca", "b", "ga", "ai", "ae", "asa", "aaa", "ba", "ea", "l", "aj", "p", "au"], "i": ["ik", "pi", "it", "di", "o", "uri", "k", "x", "xi", "anti", "c", "ci", "d", "yi", "phi", "oi", "ri", "ie", "start", "ori", "int", "ind", "s", "ui", "ini", "ali", "ni", "bi", "id", "y", "info", "api", "ia", "index", "ix", "ip", "isi", "eni", "si", "u", "iu", "ami", "e", "I", "ti", "f", "b", "ki", "inf", "ai", "z", "p", "qi", "l", "v", "ii", "li", "m", "ei", "io", "isu", "zi"], "j": ["ji", "o", "js", "k", "ng", "d", "ind", "J", "ni", "bi", "y", "key", "h", "ij", "jl", "jo", "si", "br", "ja", "obj", "adj", "b", "ann", "q", "ai", "z", "v", "jp", "aj", "ii", "r", "str", "li", "l", "m", "p", "ne"]}}
{"code": "a, b, c, d = open(0).read().split()\\nprint(1 if a != c else 0)\\n", "target": "571", "substitutes": {"a": ["area", "x", "ama", "ac", "ab", "cha", "aux", "pa", "n", "da", "s", "A", "fa", "i", "y", "alpha", "g", "sa", "ax", "abc", "aa", "va", "e", "f", "ca", "ga", "ai", "ae", "w", "z", "aaa", "l", "ea", "r", "p"], "b": ["o", "eb", "x", "db", "ab", "B", "n", "y", "bs", "g", "fb", "h", "wb", "f", "e", "ad", "sb", "w", "z", "v", "l", "bb", "m", "r", "emb", "p"], "c": ["o", "k", "x", "cy", "ci", "cb", "col", "ac", "n", "cc", "i", "cs", "y", "ec", "g", "h", "abc", "dc", "u", "f", "e", "end", "ad", "ca", "C", "z", "cr", "l", "v", "cd", "lc", "m", "r", "cf", "p"], "d": ["o", "x", "data", "dec", "n", "t", "i", "y", "g", "h", "ds", "dc", "u", "e", "f", "ad", "w", "z", "v", "l", "cd", "m", "r", "p"]}}
{"code": "x = 1\\ny = 1\\nwhile x < 10:\\n    while y < 10:\\n        print('{}x{}={}'.format(x, y, x*y))\\n        y += 1\\n    x += 1\\n    y = 1", "target": "789", "substitutes": {"x": ["height", "ey", "loc", "k", "ya", "xi", "px", "work", "c", "j", "cy", "d", "xy", "left", "pos", "pixel", "int", "n", "ye", "Y", "t", " xx", "i", "key", "dy", "width", "time", "ax", "h", "xt", "image", "ay", "rx", "ct", "yx", "ix", "index", "win", "ex", "size", "e", "dx", "b", "X", "xx", "wx", "no", "w", "z", "l", "v", "cross", "m", "right", "ady", "p"], "y": ["height", "ey", "type", "sy", "iy", "ya", "xi", "j", "px", "cy", "cycle", "yi", "yn", "oy", "xy", "tick", "angle", "col", "ry", "ny", "yo", "n", "yl", "Y", "zy", "ye", "i", "yr", "dy", "width", "ty", "yan", "yx", "ay", " cy", "ym", "ix", "py", "yt", "asy", "size", "ys", "b", "X", "xx", "yd", "yy", "w", "z", "m", "sky", "vy", "isy"]}}
{"code": "from sys import exit\\nimport math\\nimport collections\\nii = lambda : int(input())\\nmi = lambda : map(int,input().split())\\nli = lambda : list(map(int,input().split()))\\n\\ns = input()\\n\\ncnt = 0\\nfor i in range(len(s)//2):\\n    if s[i] != s[-1-i]:\\n        cnt += 1\\nprint(cnt)", "target": "387", "substitutes": {"ii": [" bi", " sa", " ki", " vi", " fa", " sig", "ci", " di", " ms", " si", " ls", " ll", " cc", " inv", "si", "iii", " id", " seq", " ni", " iii", " ti", " ie", "ai", " pi", " cm", " iv", " info"], "mi": ["lim", "mini", "pi", "di", "mc", "xi", "ima", "mic", "ci", "yi", "phi", "cli", "ini", "ui", "bi", "ms", "ml", "multi", "si", "cu", "mu", "ti", "hi", "mm", "ai", "m", "wi"], "li": ["lp", "ls", "le", "xi", "ci", "ses", "lo", " ls", "cli", "ll", "list", "L", "sa", "lines", "la", "si", "mm", "ai", "lc", "l", "lu", "ln", "cl"], "s": ["ls", "o", "services", "files", "S", "ings", "xi", "c", "d", "ins", "ses", "a", "ss", "sl", "n", "abs", "qs", "t", "strings", "cs", "y", "g", "os", "ds", "ms", "rows", "ips", "cells", "gs", "items", "si", "u", "f", "e", "b", "ps", "ns", "ments", "es", "sb", "w", "l", "v", "m", "xs", "its", "p", "series"], "cnt": ["ctct", "CNT", "cno", "ctNT", "lcant", "lcnt", " cno", "Cont", "cant", "acount", "Cno", "lcNT", " cant", "acnt", " cont", "acNT", "ctnt", "acno", "Cnt", "Count", "cct", "lcct", "cNT", "cont", "Cct", "ctont", " count", "Cant", " cct", " cNT", "count"], "i": ["pi", "k", "x", "xi", "j", "c", "gi", "d", "yi", "ri", "col", "phi", "a", "ie", "start", "int", "ind", "n", "ini", "t", "ni", "bi", "id", "y", "h", "ix", "index", "eni", "si", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "qi", "l", "v", "m", "r", "p"]}}
{"code": "import sys\\nimport math\\n\\n#https://atcoder.jp/contests/agc008/submissions/15248942\\nsys.setrecursionlimit(10 ** 8)\\nini = lambda: int(sys.stdin.readline())\\ninm = lambda: map(int, sys.stdin.readline().split())\\ninl = lambda: list(inm())\\nins = lambda: sys.stdin.readline().rstrip()\\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\\n\\nA,B = inm()\\n\\nif A <= 8 and B <= 8:\\n    print(\"Yay!\")\\nelse:\\n    print(\":(\")", "target": "322", "substitutes": {}}
{"code": "n = int(input())\\na = [int(i) for i in input().split()]\\nprint(sum(ai % 2 == 1 for ai in a[::2]))", "target": "126", "substitutes": {"n": ["_", "j", "c", "d", "nb", "ac", "all", "an", "num", "ni", "na", "g", "ana", "nn", "span", " ni", "ann", "adj", "ain", "b", "ad", "z", "m", "li", "r", "p", "N"], "a": ["area", "c", "ar", "ak", "ac", "ab", "af", "int", "mA", "args", "an", "s", "array", "A", "fa", "alpha", "na", "sa", "aa", " an", "oa", "b", "am", "ca", "ans", "ga", "ta", "z", "ba", "aj", "p", " A", "au"], "i": ["pi", "di", "ji", "k", "x", "xi", "j", "input", "c", "gi", "d", "phi", "oi", "ri", " I", "int", "ini", "ni", "bi", "id", "key", "index", "si", "iii", "u", "iu", "e", "I", "ti", "f", "b", "chi", "qi", "ii", "m", "li", "ei", "p"], "ai": ["hai", "asi", "gi", "ait", "ci", "ita", "ac", "af", "int", "an", "ini", "fa", "agi", "A", "bi", "alpha", "na", "AI", "sa", "abc", "ay", "nan", "ia", "ig", "aa", "aut", "si", "ais", "pai", "ae", "ta", "aaa", "chi", "ani", "aii", "qi", "aj", "ii", "li", "dat", "ei", "au"]}}
{"code": "try: n,a,b=[int(input()) for _ in range(3)];print(a+b)\\nexcept: print('Hello World')", "target": "691", "substitutes": {"n": ["o", "k", "x", "j", "c", " N", "nb", "name", "an", "num", "y", "na", "g", "nn", "number", "nr", "u", "f", "e", "ns", "sn", "z", "v", "l", "m", "p", "ne", "N"], "a": ["x", "input", "c", "d", "ac", "ab", "int", "da", "an", "s", "num", "A", "fa", "i", "y", "alpha", "sa", "offset", "aa", "va", "oa", "f", "e", "address", "am", "ad", "ga", "asa", "aaa", "ba", "aj", "m", "p"], "b": ["eb", "k", "mb", "abb", "x", "c", "d", "nb", "ab", "B", "bc", "bd", "bis", "rb", "i", "y", "bs", "bar", "fb", "beta", "number", "aa", "wb", "lb", "e", "f", "sb", "be", "ba", "l", "v", "bb", "p", "count"], "_": ["out", " __", "x", "__", " time", " ip", "g", "val", "ip", " id", "len", "f"]}}
{"code": "import sys\\nfrom io import StringIO\\nimport unittest\\n\\n\\ndef resolve():\\n    n = int(input())\\n    b = list(map(int, input().split()))\\n\\n    a = [0 for _ in range(n)]\\n\\n    for i in range(n - 1, -1, -1):\\n        if i == n - 1:\\n            a[i] = b[i - 1]\\n        elif i == 0:\\n            a[i] = b[0]\\n        else:\\n            a[i] = min(b[i], b[i - 1])\\n    print(sum(a))\\n\\nclass TestClass(unittest.TestCase):\\n    def assertIO(self, input, output):\\n        stdout, stdin = sys.stdout, sys.stdin\\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\\n        resolve()\\n        sys.stdout.seek(0)\\n        out = sys.stdout.read()[:-1]\\n        sys.stdout, sys.stdin = stdout, stdin\\n        self.assertEqual(out, output)\\n\\n    def test_\u5165\u529b\u4f8b_1(self):\\n        input = \"\"\"3\\n2 5\"\"\"\\n        output = \"\"\"9\"\"\"\\n        self.assertIO(input, output)\\n\\n    def test_\u5165\u529b\u4f8b_2(self):\\n        input = \"\"\"2\\n3\"\"\"\\n        output = \"\"\"6\"\"\"\\n        self.assertIO(input, output)\\n\\n    def test_\u5165\u529b\u4f8b_3(self):\\n        input = \"\"\"6\\n0 153 10 10 23\"\"\"\\n        output = \"\"\"53\"\"\"\\n        self.assertIO(input, output)\\n\\n\\nif __name__ == \"__main__\":\\n    # unittest.main()\\n    resolve()\\n", "target": "768", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "name", "num", "s", "non", "t", "y", "g", "network", "nn", "nan", "un", "nu", "u", "net", "e", "nt", "f", "max", "ns", "sn", "no", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "b": ["auto", "o", "x", "c", "db", "d", "cb", "nb", "ab", "bh", "B", "bis", "s", "binary", "rb", "A", "bi", "y", "split", "bs", "body", "g", "beta", "bin", "batch", "wb", "u", "lb", "e", "f", "base", "sb", "ba", "l", "v", "r", "bb", "p"], "a": ["area", "o", "x", "c", "aw", "ak", "ama", "ac", "ab", "pa", "da", "s", "an", "array", "A", "fa", "y", "alpha", "na", "sa", "abc", "ana", "aa", "u", "va", "f", "e", "ad", "ca", "am", "ans", "ga", "ai", "ae", "aaa", "ba", "l", "ea", "p", "au"], "_": ["x", "int", " time", "num", " int", "len", "I", " num", " long", "length", "p"], "i": ["pi", "it", "o", "di", "ji", "k", "x", "xi", "j", "axis", "c", "gi", "ci", "d", "yi", "oi", " I", "ri", " ii", "ie", "io", "start", "cli", "int", "ind", "ui", "ini", "t", "ni", "bi", "id", "y", " j", "ix", "index", "ip", "multi", "eni", "si", "u", "iu", "f", "ti", "I", "e", "ai", "z", "p", "chi", "qi", "v", "l", "ii", "li"], "self": ["part", "ang", "type", "case", "home", "Self", "this", "x", "work", "full", "object", "c", "connection", "er", "plus", "page", "ctx", "acl", "node", "session", "app", "context", "instance", "view", "per", "s", "all", "cache", "result", "proc", "on", "python", "client", "g", "ack", "parent", "console", "co", "server", "worker", "py", "tmp", "error", "host", "spec", "e", "http", "load", "resp", "other", "child", "q", "book", "w", "module", "layer", "l", "misc", "style", "shared", "r", "comment", "p", "user", "method"], "input": ["empty", "type", "c", "current", "raw", "submit", "option", "binary", "progress", "qa", "source", "null", "f", "child", "memory", "example", "comment", "temp", "file", "plus", "connection", "param", "data", "format", "expression", "document", "enter", "result", "xml", "client", "forward", "version", "again", "error", "select", "code", "include", "Input", "condition", "call", "unit", "method", "argument", "PUT", "context", "int", "instance", "array", "config", "image", "command", "request", "index", "bin", "batch", "model", "hidden", "background", "resource", "reader", "reset", "inf", "Output", "init", "layer", "until", "form", "audio", "string", "element", "this", "unknown", "response", "name", "value", "view", "pull", "operation", "analysis", "parent", "parse", "active", "address", "insert", "buffer", "q", "filter", "module", "accept", "text", "exec"], "output": ["type", "control", "reference", "current", "reason", "binary", "display", "en", "source", "null", "summary", "memory", "position", "temp", "file", "log", "connection", "data", "format", "expression", "document", "remote", "result", "width", "version", "error", "message", "code", "no", "content", "when", "unit", "protected", "config", "update", "put", "sort", "image", "export", "run", "resource", "Output", "external", "v", "application", "information", "o", "response", "page", "generation", "name", "value", "double", "operation", "target", "change", "console", "parent", "write", "production", "address", "outer", "cut", "other", "w", "module", "text"], "stdout": ["standardout", "defaultin", " stdouts", "gradout", "liveout", "adio", "STDin", "stdint", "randout", " stdio", "randin", " stdint", "consoleint", "adout", "consolein", "stdoutput", "stdio", "STDio", " STDout", "randio", "standardOut", "standardin", "adOut", "standardouts", "standardint", " STDOUT", "sthouts", " stdOut", "stdOUT", "gradouts", "defaultio", "standardoutput", " stdoutput", "stdOut", "liveio", "standardio", "STDout", "livein", "consoleoutput", "randoutput", "sthin", "liveoutput", "defaultout", "STDouts", "STDoutput", "consoleout", "gradin", "gradoutput", "sthoutput", "STDOut", " STDOut", " STDin", "stdouts", "adin", " stdOUT", "standardOUT", "defaultoutput", "sthout"], "stdin": ["standardout", "stin", "STDIN", "streamout", "STDin", "stdins", " stdins", " stdIN", "stout", "stdinput", "STDins", "putins", "stins", "standardin", "dustins", "putdin", "dustin", "streamin", "streamins", "putin", "STDinput", "putout", "dustout", "standardIN", "STDout", "stddin", "dustIN", "streamIN", " stdinput", "standardinput", "standardins", " stddin", "stdIN"], "sys": ["phys", "hw", "sci", "linux", "proc", "python", "tty", "rx", "windows", "source", "tmp", "us", "status", "io", "wp", "ystem", "std", "service", "ses", "system", "System", "Sys", "cs", "script", "client", " os", "py", " system", "process", "usr", "security", "sim", "library", "sec", "sync", "cy", "ctx", " System", "Lib", "util", "instance", "s", "math", "secure", "site", "ib", "server", "function", "run", "net", "spec", "nt", " python", "so", "wx", "kernel", "proxy", "types", "user", "np", " proc", "super", "umpy", "cess", "api", "gui", "os", "console", "win", "parse", "ys", "module", "lib", "pc", "utils"], "out": ["log", "o", "string", "err", "response", "raw", "cmd", "data", "name", "copy", "value", "int", "result", "image", "again", "word", "line", "source", "bin", "error", "write", "Out", "new", "no", "w", "OUT", "str", "io", "temp"]}}
{"code": "import bisect, collections, copy, heapq, itertools, math, string\\nimport sys\\ndef I(): return int(sys.stdin.readline().rstrip())\\ndef MI(): return map(int, sys.stdin.readline().rstrip().split())\\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\\ndef S(): return sys.stdin.readline().rstrip()\\ndef LS(): return list(sys.stdin.readline().rstrip().split())\\n\\ndef main():\\n    N, A, B = MI()\\n    print((N // (A + B)) * A + min(N % (A + B), A))\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "716", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "E", "Ns", "T", "n", "W", "J", "Y", "G", "L", "Num", "NT", "NN", "Q", "I", "X", "C", "Na", "NG", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["U", "Ca", "NA", "II", "D", "S", "E", "Alpha", "a", "CA", "T", "PA", "W", "IA", "mA", "Y", "Az", "G", "AM", "L", "DA", "Num", "Ma", "AI", "BA", "AY", "SA", "An", "EA", "TA", "Area", "AP", "Q", "Ha", "I", "AA", "X", "C", "MA", "Na", "V", "P", "FA", "KA", "API", "AF", "O", "H", "M", "AC", "F", "LA"], "B": ["U", "D", "S", "BS", "BF", "R", "E", "LB", "W", "BE", "TB", "Y", "L", "G", "Ab", "NB", "BA", "PB", "BI", "OB", "AP", "Q", "GB", "Bs", "WB", "I", "b", "X", "C", "SB", "MB", "P", "AB", "O", "M", "F"]}}
{"code": "def resolve():\\n\ta,b=map(int,input().split())\\n\tans=a if a<=b else a-1\\n\tprint(ans)\\n\t\t\\nresolve()", "target": "35", "substitutes": {"a": ["ma", "area", "sta", "x", "c", "aw", "d", "ar", "ama", "ab", "ac", "art", "af", "pa", "n", "da", "an", "A", "fa", "i", "alpha", "na", "sa", "ax", "index", "aa", "la", "va", "oa", "f", "e", "am", "ad", "ca", "ga", "ai", "ae", "asa", "ba", "aaa", "ea", "l", "aj", "m", "p", "count", "au"], "b": ["mb", "x", "abb", "c", "d", "nb", "ab", "B", "bd", "n", "s", "bi", "i", "y", "bs", "fb", "beta", "number", "aa", "wb", "u", "f", "e", "ad", "base", " B", "sb", "ba", "v", "bb", "m", "r", "p", "bp"], "ans": ["anus", "aning", "ras", "nas", "ins", "ars", "ants", "amps", "an", "anc", "s", "ats", "anon", "sk", "annot", "na", "anas", "ana", "An", "can", "anes", "AN", "atan", "aned", "anne", "leans", "ANS", "acts", "ann", "lan", "ane", "scan", "ani", "ano", "ays", "annels", "aus"]}}
{"code": "#!/usr/bin/env python\\n# coding: utf-8\\n\\n# In[5]:\\n\\n\\ns = input()\\n\\n\\n# In[6]:\\n\\n\\nans = []\\nfor i,w in enumerate(s):\\n    if w == \"B\" and len(ans) != 0:\\n        ans.pop(-1)\\n    elif w == \"0\" or w == \"1\":\\n        ans.append(w)\\nprint(\"\".join(ans))\\n\\n\\n# In[ ]:\\n\\n\\n\\n\\n", "target": "503", "substitutes": {}}
{"code": "from functools import reduce\\nfrom fractions import gcd\\ndef lcm(x,y):\\n  return x*y//gcd(x,y)\\ndef lcmm(l):\\n  return reduce(lcm,l)\\nn=int(input())\\nt=[int(input()) for _  in range(n)]\\nprint(lcmm(t))\\n", "target": "186", "substitutes": {"x": ["k", "input", "xi", "px", "c", "d", "xy", "data", " xx", "i", " X", "xxx", "g", "yx", "h", "ax", "rx", "ix", "index", "ex", "xc", "u", "e", "f", "max", "dx", "b", "X", "xx", "xf", "q", "w", "z", "v", "cross", "m", "xs", "p"], "y": ["ey", "sy", "hy", "ya", "j", "cy", "c", "d", "yi", "oy", "yn", "ry", "ny", "yl", "s", "Y", "ye", "zy", "i", "yr", "dy", "ty", "g", "ay", "ym", "py", "yt", "f", "ys", "b", "yd", "yy", "z", " Y", "m", "p", "sky", "vy"], "l": ["el", "lp", "ls", "o", "ol", "le", "j", "c", "d", "kl", "fl", "sl", "ll", "L", "g", "lin", "u", "f", "b", "dl", "z", "v", "lc", "m", "li", "lu", "ln", "p"], "n": ["o", "k", "j", "c", "np", "d", "nm", "nb", "num", "s", "ni", "i", "nw", "nn", "nl", "number", "nu", "u", "len", "f", "nt", "b", "ns", "sn", "no", "w", "z", "v", "m", "nc", "ln", "p", "ne", "N"], "t": ["o", "type", "dt", "k", "tr", "j", "c", "d", "T", "ot", "i", "total", "g", "ts", "tt", "tf", "unt", " T", "u", "f", "e", "tree", "b", "nt", "pt", "w", "ta", "z", "v", "m", "r", "p"], "_": [" __", " times", " time", " ip", "g", "ip", " seq", "len", "f", "p"]}}
{"code": "N = int(input())\\nseat = []\\nfor i in range(N):\\n    seat.append(input().split())\\n\\ncon = 0\\nfor j in range(N):\\n    con += int(seat[j][1]) - int(seat[j][0]) + 1\\n\\nprint(con)", "target": "720", "substitutes": {"N": ["Node", "NA", "D", "S", "CN", "TN", "GN", "R", "NS", "NC", "B", "Ns", "T", "n", "J", "Y", "Ni", "L", "G", "A", "Len", "Num", "CNN", "NT", " n", "Size", "NN", "Count", "I", "Number", "X", "ns", "C", "V", "P", "K", "KN", "O", "H", "M", "F", "Z"], "seat": ["string", "letter", "case", "sit", "element", "ssl", "su", "input", "object", "square", "layout", "slice", "port", "service", "event", "eden", "session", "section", "ss", "sl", "staff", "plane", "space", "cess", "cel", "test", "site", "project", "split", "sex", "pse", "cell", "inse", "ticket", "sea", "index", "line", "conference", "character", "row", "route", "fruit", "address", "select", "shape", "ane", "sen", "seed", "sed", "slave", "meet", "office", "cross", "company", "ace", "se", "suit", "group", "fare", "see"], "i": ["ik", "iw", "xi", "gi", "ie", "ind", "ni", "id", "\u0438", "y", "ir", "ij", "ib", "inn", "ix", "ia", "ip", "il", "iu", "I", "im", "ai", "z", "qi", "ii", "li", "io"], "con": ["core", "sec", "common", "cn", "c", "CON", "col", "ac", "uc", "const", "fc", "n", "zen", "bn", "an", "num", "cc", "login", "rc", "na", "en", "connect", "co", "fan", "ct", "Con", "un", "can", "nan", "cons", "nn", "win", "row", "atan", "len", "fn", "ann", "pan", "pin", "pen", "Conn", "cross", "cat", "conf", "don", "ln", "ran", "rate", "conn"], "j": ["kj", "el", "o", "ji", "k", "x", "c", "d", "a", "jon", "pos", "ind", "n", "J", "num", "y", "key", "jan", "g", "h", "ij", "bj", "job", "un", "index", "jl", "jo", "u", "f", "je", "obj", "e", "b", "jj", "jet", "q", "dj", "w", "z", "v", "jp", "jam", "l", "r", "p"]}}
{"code": "a,b=map(int,input().split())\\nx=[]\\nfor i in range(b-a+1,b+a):\\n  x.append(str(i))\\nprint(' '.join(x))", "target": "688", "substitutes": {"a": ["area", "part", "sta", "j", "c", "d", "ac", "ab", "start", "int", "n", "da", "an", "A", "y", "alpha", "api", "qa", "sa", "offset", "index", "aa", "la", "u", "va", "e", "f", "ad", "ca", "base", "ga", "ai", "ae", "z", "l", "m", "p", "count"], "b": ["k", "mb", "abb", "pb", "c", "d", "nb", "ab", "B", "n", "rb", "y", "split", "bs", "body", "fb", "h", "next", "beta", "bin", "aa", "wb", "lb", "u", "f", "e", "max", "end", "base", "limit", "sb", "l", "v", "bb", "bf", "m", "r", "p", "count"], "x": ["xi", "c", "d", "xy", "event", "data", "lex", "some", "n", "s", "list", "array", "t", "xxxxxxxx", "y", "test", "tx", "xxx", "ax", "yx", "xxxx", "rx", "index", "ex", "u", "f", "e", "X", "xx", "xes", "w", "content", "z", "rex", "v", "l", "cross", "r", "xs", "php", "p"], "i": ["pi", "ji", "k", "xi", "j", "c", "gi", "d", "phi", "col", "ri", "ie", "start", "int", "ind", "n", "bi", "id", "y", "key", "index", "bit", "si", "u", "iu", "f", "e", "I", "end", "z", "chi", "v", "l", "ii", "li", "p"]}}
{"code": "N,A,B = map(int, input().split())\\n\\n\\nX = [0]*10100\\nfor i in range(len(X)):\\n  S = str(i)\\n  a = 0\\n  for c in S:\\n    a += int(c)\\n\\n  X[i] = a\\n\\n# print( X )\\n\\nans = 0\\nfor i,x in enumerate(X[:N+1]):\\n  if A<=x and x<=B:\\n    ans += i\\n    # print(i, ans)\\n\\nprint(ans)\\n", "target": "704", "substitutes": {"N": ["U", "D", "R", "NS", "E", "NC", "Ns", "T", "n", "W", "Y", " C", "L", "G", " n", "Q", "I", "C", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["AR", "U", "NA", "D", "R", "E", "CA", "T", "W", "mA", "Y", "AM", "AN", "AA", "C", "V", "P", "AB", "AC", "AW", "M", "AAA", "LA"], "B": [" b", "D", "BF", "R", "E", "BB", "T", "W", "BE", "Y", "L", "G", "NB", "BA", "Q", "Bs", "WB", "b", "C", "V", "P", "BC", "AB", "O", "M", "F", "Beta"], "X": ["U", "D", "ZX", "x", "R", "E", "XX", "Test", "Data", "T", "W", "J", "Array", "Y", "G", "L", "DX", "UX", "Q", "Model", "I", "C", "XL", "TX", "Cross", "V", "ML", "P", "XP", "K", "ID", "EX", "XXX", "H", "M", "IX", "F", "Z"], "i": ["pi", "o", "k", "x", "xi", "j", "gi", "ci", "d", "phi", "col", "ac", "start", "int", "ind", "n", "s", "ini", "id", "y", "h", "index", "ip", "eni", "si", "u", "iu", "f", "e", "I", "b", "q", "ai", "z", "chi", "qi", "lc", "l", "ii", "v", "r", "m", "li", "p", "rc"], "S": ["U", "D", "SS", "R", "NS", "E", "ss", "Ns", "T", "TS", "Si", "s", "Y", "L", "G", " s", "Sa", "SC", "Set", "I", "CS", "C", "Na", "V", "Sl", "P", "K", "Cs", "O", "H", "M", "F", "Z"], "a": ["area", "o", "x", "d", "ac", "ab", "af", "pa", "n", "da", "ata", "s", "an", "fa", "y", "alpha", "na", "g", "sa", "qa", "ana", "ia", "aa", "u", "va", "f", "b", "am", "ca", "C", "ga", "ai", "ae", "asa", "z", "ba", "l", "ea", "p"], "c": ["sec", "cn", "k", "cy", "ci", "d", "cycle", "col", "ac", "bc", "CA", "n", "cc", "anc", "s", "cs", "y", "alpha", "abc", "dc", "aa", "u", "f", "e", "b", "ca", "arc", "unc", "C", "aic", "ai", "z", "CC", "lc", "sc", "ace", "m", "r", "nc", "cf", "p", "count"]}}
{"code": "n = int(input())\\nt = list(map(int, input().split()))\\nm = int(input())\\nt_sum = sum(t)\\n\\nfor i in range(m):\\n    p, x = map(int, input().split())\\n    ans = t_sum - t[p-1] + x\\n    print(ans)", "target": "730", "substitutes": {"n": ["pi", "o", "k", "j", "c", "np", "nm", "nb", "ny", "ot", "ni", "na", "nn", "nr", "net", "nt", "f", "ns", "pn", "sn", "l", "v", "nc", "ne", "N"], "t": ["tp", "o", "dt", "type", "at", "k", "tu", "c", "d", "a", "T", "int", "s", "y", "test", "g", "target", "h", "ts", "tt", "tz", "tf", "tools", "u", "f", "e", "b", "pt", "w", "ta", "z", "v", "l", "temp", "token"], "m": ["o", "mc", "k", "j", "c", "d", "s", "num", "y", "mn", "g", "h", "ms", "cm", "u", "e", "f", "mu", "b", "mm", "w", "z", "dm", "v", "l", "r", "M"], "t_sum": ["t_weight", "t_mean", "p_weight", "t2sum", "t_scale", "p_sum", "T_sum", "T_scale", "p_mean", "t2mean", "T_mean", "t2scale"], "i": ["pi", "o", "k", "xi", "j", "c", "pos", "ind", "id", "y", "h", "ix", "index", "ip", "u", "iu", "pp", "e", "ti", "I", "f", "im", "ai", "v", "ii", "li"], "p": ["lp", "pi", "o", "tp", "k", "j", "c", "sp", "np", "d", "point", "a", "pa", "s", "y", "g", "h", "ip", "u", "pp", "f", "e", "b", "q", "w", "P", "z", "v", "l", "jp", "pc", "pe"], "x": ["o", "k", "xp", "xi", "j", "c", "d", "xy", "a", "pos", "int", "y", "ax", "h", "rx", "ix", "index", "xc", "u", "e", "dx", "max", "X", "xx", "wx", "q", "w", "z", "v", "xs"], "ans": ["ls", "anus", "anan", "san", "aning", "ras", "nas", "ins", "ars", "ants", "an", "anc", "man", "ats", "cs", "anon", "asin", "sk", "na", "ant", "plan", "anas", "ds", "anz", "nan", "An", "ana", "can", "AN", "atan", "aned", "ANS", "lan", "ann", "ons", "scan", "es", "ai", "aus", "any", "ran"]}}
{"code": "dict={\"A\":\"T\",\"T\":\"A\",\"G\":\"C\",\"C\":\"G\"}\\nprint(dict[input()])\\n", "target": "562", "substitutes": {"dict": ["file", "di", "input", "object", "db", "d", "sum", "name", "data", "const", "document", "head", "fix", "double", "list", "cache", "array", "dir", "config", "key", "sort", "python", "body", "entry", "map", "date", "set", "table", "dot", "model", "parse", "ict", "tree", "clean", "module", "init", "json", "sign", "patch", "rand", "conf", "hash", "dat", "block", "condition"]}}
{"code": "import os\\nimport sys\\nfrom io import BytesIO, IOBase\\n \\nBUFSIZE = 8192\\n \\n \\nclass FastIO(IOBase):\\n    newlines = 0\\n \\n    def __init__(self, file):\\n        self._fd = file.fileno()\\n        self.buffer = BytesIO()\\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\\n        self.write = self.buffer.write if self.writable else None\\n \\n    def read(self):\\n        while True:\\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n            if not b:\\n                break\\n            ptr = self.buffer.tell()\\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\\n        self.newlines = 0\\n        return self.buffer.read()\\n \\n    def readline(self):\\n        while self.newlines == 0:\\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n            self.newlines = b.count(b\"\\n\") + (not b)\\n            ptr = self.buffer.tell()\\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\\n        self.newlines -= 1\\n        return self.buffer.readline()\\n \\n    def flush(self):\\n        if self.writable:\\n            os.write(self._fd, self.buffer.getvalue())\\n            self.buffer.truncate(0), self.buffer.seek(0)\\n \\n \\nclass IOWrapper(IOBase):\\n    def __init__(self, file):\\n        self.buffer = FastIO(file)\\n        self.flush = self.buffer.flush\\n        self.writable = self.buffer.writable\\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\\n \\n \\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\\n##########################################################\\nimport threading\\nsys.setrecursionlimit(10**5)\\nthreading.stack_size(10**8)\\ndef dfs(x):\\n    global l,adj,v\\n    if v[x]==1:\\n        return(l[x])\\n    v[x]=1\\n    c=0\\n    for i in adj[x]:\\n        c=max(c,dfs(i)+1)\\n    l[x]=c\\n    return c\\ndef main():\\n    global l,adj,v\\n    n,m=map(int,input().split())\\n    l=[0]*(n+1)\\n    v=[0]*(n+1)\\n    adj=[]\\n    for i in range(n+1):\\n        adj.append([])\\n    for i in range(m):\\n        x,y=map(int,input().split())\\n        adj[x].append(y)\\n    ans=0\\n    for i in range(1,n+1):\\n        if not v[i]:\\n            ans=max(ans,dfs(i))\\n    print(ans)\\nt=threading.Thread(target=main)\\nt.start()\\nt.join()\\n        \\n        \\n", "target": "663", "substitutes": {"BUFSIZE": ["BUFSizes", "BUGESize", " BUFsizes", "BUfsize", "BUFsize", "BUFSIZ", "BUFsizes", " BUFsize", "BUfsIZE", " BUFsIZE", "BUPSIZE", "BUFsIZE", "BUFSEED", " BUFSizes", "BUBSize", "BUBSIZE", "BUGESIZE", " BUGESIZ", "BUBSIZ", " BUFSize", "BUBSizes", "BUGESIZ", " BUGESize", " BUGESIZE", " BUFSEED", "BUFSize", "BUPSIZ", " BUFsIZ", " BUFSIZ", "BUPSizes", "BUfsIZ", "BUBSEED", "BUFsIZ", "BUfsEED", " BUGESEED", "BUGESEED", "BUPSize"], "newlines": ["NEWlines", "freshelines", "validbreaks", " newcycles", "oldelines", " newblocks", "NEWbytes", "knownbreaks", "freshcycles", "newsflows", " Newline", "newblocks", "Newcycles", "newslines", "newcycles", "newliners", "newcodes", " Newelines", " newlinks", "knownlines", "knownliners", "NEWelines", "newbytes", "validbytes", "newline", "Newelines", " newline", "oldblocks", "existingcodes", "newsls", "newflows", "oldline", "Newlinks", "NEWflows", "newbreaks", " Newblocks", "validlines", "validliners", "Newcodes", "Newbytes", "newelines", " Newlines", "Newls", " newliners", "freshlinks", "existingbytes", "Newlines", "newlinks", "NEWcodes", " newbreaks", "Newflows", "freshlines", " newbytes", "knownbytes", "existinglines", "NEWls", "newls", "oldlines", " newelines", "existingelines"], "self": ["auto", "type", "home", "work", "object", "c", "results", "raw", "wrapper", "per", "args", "non", "cmp", "proc", "driver", "time", "h", "exc", "source", "tmp", "f", "load", "ref", "right", "p", "cl", "part", "k", "http", "full", "x", "_", "plus", "er", "connection", "ng", "ws", "data", "result", "get", "client", "static", "py", "error", "thread", "process", "default", "no", "r", "gen", "public", "block", "top", "method", "ctx", "node", "event", "app", "context", "instance", "n", "ck", "s", "config", "writer", "plugin", "trans", "comp", "function", "spec", "resource", "e", "func", "ps", "resp", "support", "wx", "es", "kernel", "l", "form", "user", "Self", "this", "lf", "response", "page", "np", "session", "pos", "view", "all", "hand", "cache", "loop", "on", "os", "g", "ack", "act", "ok", "force", "parent", "console", "worker", "master", "host", "me", "parse", "lock", "other", "private", "q", "w", "module", "filter", "attr", "shared", "skip", "now", "utils"], "file": ["socket", "use", "log", "o", "fs", "auto", "files", "type", "this", "full", "http", "work", "object", "feed", "folder", "name", "data", "elf", "format", "binary", "cache", "dir", "root", "time", "phase", "os", "pool", "filename", "image", "live", "parent", "ode", "line", "source", "File", "model", "stream", "function", "zip", "il", "play", "active", "f", "resource", "e", "ile", "base", "lock", "l", "lib", "FILE", "io", "path", "fp"], "_fd": ["lexfile", "lexfc", "_filename", "_cond", "_fp", "jFD", "_dc", "_fc", " _FD", "lexFD", "laneFD", "homedc", "_f", "homedat", "lanecond", "homefc", "_fs", "lexcond", "lexdc", "_dl", "jfp", "jf", "lexf", "homefd", "lexfs", "homedl", "homeFD", "lexfp", "lexfd", " _cond", " _dc", "_FD", "_file", "lanefd", "jfd", " _fs", "_dat", " _file", "homefile", "homefs", " _fc", "lanefc"], "buffer": ["filename", "manager", "window", "reference", "layout", "slice", "service", "output", "queue", "context", "transfer", "document", "button", "binary", "cache", "parser", "buf", "database", "uffer", "surface", "seek", "timeout", "block", "bar", "writer", "url", "shell", "command", "builder", "console", "pause", "timer", "server", "header", "repeat", "audio", "line", "table", "batch", "source", "message", "token", "background", "buff", "processor", "reader", "editor", "Buffer", "base", "seed", "loader", "volume", "memory", "position", "trigger", "layer", "engine", "template", "profile", "length", "comment", "program", "player", "texture"], "writable": ["writeutable", "writeability", "portsable", "portsible", "destructed", "creatable", "writeitable", "creater", "pantsorable", "writeabled", "casible", "destructable", "writorable", "Writutable", "responsabled", "responsible", "writingible", "creatabled", " writutable", "writingability", "Writable", "writatable", "writeible", "destructabled", "writeatable", " writed", " writitable", "writer", "writingabled", "Writible", "writible", " writible", "portsability", "portsabled", "writitable", "writingable", "casability", " writer", "pantsable", "writabled", "writeorable", " writabled", "writutable", "writed", "responsable", "destructer", "pantsible", "pantsabled", "writeable", "casatable", "writingorable", "writingatable", "Writitable", "casable", "created", "writability", "responsability"], "write": ["socket", "use", "log", "sync", "writing", "open", "feed", "close", "layout", "append", "cycle", "scale", "create", "output", "copy", "lex", "see", "data", "transfer", "print", "println", "binary", "written", "update", "put", "width", "push", "force", "writer", "writ", "connect", "network", "change", "source", "export", "set", "line", "delete", "pipe", "run", "send", "size", "replace", "exec", "inline", "end", "insert", "load", "tell", "scroll", "save", "store", "w", "memory", "kill", "draw", "add", "dump", "download", "flow", "count", "call"], "b": ["eb", "mb", "abb", "pb", "c", "db", "d", "bytes", "ob", "nb", "cb", "ab", "a", "data", "bh", "B", "bc", "zb", "bd", "n", "xb", "s", "binary", "rb", "buf", "bi", "i", "split", "bs", "bar", "body", "g", "h", "gb", "fb", "ib", "bl", "bg", "batch", "wb", "br", "lb", "e", "f", "buff", "obj", "base", "sb", "w", "be", "ba", "l", "v", "r", "bb", "m", "bf", "text", "p"], "ptr": ["cur", "struct", "loc", "ext", "err", "tr", "lf", "sp", "slice", "ctx", "context", "temp", "pos", "tips", "src", "depth", "Ptr", "buf", "cel", "cmp", "pointer", "fd", "offset", "iter", "rect", "ctr", "dr", "tmp", "pad", "req", "char", "br", "len", "size", "address", "f", "obj", "spec", "tip", "shift", "pt", "trigger", "ref", "attr", "length", "str", "p", "addr", "fp"], "flush": ["use", "empty", "usher", "sync", "float", "open", "feed", "close", "layout", "append", "output", "fail", "queue", "transfer", "print", "println", "tail", "pull", "apply", "update", "flash", "stop", "put", "zero", "push", "force", "writer", "clear", "set", "stream", "delete", "ush", "fill", "send", "reset", "load", "clean", "dirty", "save", "volume", "destroy", "filter", "kill", "commit", "text", "dump", "download", "flow"], "read": ["socket", "log", "sync", "work", "open", "feed", "close", "reads", "find", "copy", "raw", "data", "print", "switch", "update", "ping", "loop", "seek", "sleep", "split", "get", "roll", "boot", "connect", "iter", "clear", "set", "readable", "stream", "replace", "parse", "send", "run", "play", "size", "reader", "reading", "Read", "load", "select", "end", "insert", "tell", "build", "add", "READ", "wait", "skip", "length", "text", "download", "block", "count"], "readline": [" readfile", "writewrite", "writefile", "writelines", " readLine", "playlin", "readwrite", "writelin", "writeline", "newfile", "readlines", "writepart", "sendfile", "readonly", "playlines", "writestring", "writeonly", " readonly", "readingline", " readpart", "getfile", " readle", "newline", "sendLine", "getline", "getle", "readstring", "readingpart", "loadstring", "writeLine", "playline", "sendline", "loadline", "playstring", " readstring", "getLine", "readle", "readfile", "sendwrite", "readingonly", "writele", "readpart", "readingstring", "loadlines", "readLine", "loadlin", "readlin", "newLine", "newwrite"], "sys": ["socket", "library", "auto", "fs", "tp", "sync", "http", "out", "std", "hw", "np", "session", "system", "System", "util", "s", "Sys", "ios", "pkg", "cs", "linux", "site", "proc", "python", "tty", "os", "machine", "script", "shell", "parent", " lib", "windows", "server", "win", " os", "py", "bin", " system", "parse", "net", "process", "usr", "utils", "ys", "us", " python", "so", "es", "kernel", "module", "lib", "types", "io", "user"], "stdin": [" stdIn", "rdout", "stin", "rdIN", "STDIN", "streamout", "STDin", "STDIn", "stdins", " stdins", "stdIn", " stdIN", "stout", "stins", "streamin", "streamins", "rdIn", "rdin", "STDout", "streamIN", "stIN", "stdIN"], "stdout": ["stdoutput", "stin", "stout", "STDoutput", "stOut", " stdoutput", "stdOut", "STDOut", "STDin", "stoutput", "STDout", " stdOut"]}}
{"code": "x_1, x_2, x_3, x_4, x_5 = map(int, input().split())\\nls = [x_1, x_2, x_3, x_4, x_5]\\nnum = ls.index(0)\\nprint(num + 1)\\n", "target": "727", "substitutes": {"x_1": [" x_20", "x_01", "x_0", "X_0", "X_2", "x_20", "X_01", "X_1"], "x_2": ["xx2", "x_02", "xing2002", "xx25", "x_2002", "xing3", "xing2", " x_25", "x_25", "xx1", " x_2002", "xing22", " x_02", "xx02", "x_22", " x_22"], "x_3": ["X_3", "X_7", "X_2", "X_1", "x_7"], "x_4": ["xM4", "xx2", "xx3", "xx16", "xx25", "xMfour", "patchx4", "patch_4", "patch_16", " x_25", "x_16", "xx5", "x_25", "patchx3", "xx4", "patch_four", "patchx16", "x_four", "xxfour", "xM16", "patch_3", "xM3", "patchxfour"], "x_5": ["xF3", "xF5", " x_five", "xF4", "xF2", "x_five"], "ls": ["lp", "fs", "wl", "lf", "sels", "uss", "LS", "qs", "ll", "LCS", "cs", "bs", "lists", "les", "lv", "lr", "gs", "ols", "lines", "lis", "la", "los", "Els", "len", "rl", "ps", "ns", "iffs", "las", "l", "lc", "ii", "lib", "li", "xs", "less", "ln", "lt", "tl"], "num": ["unit", "col", "nb", "sum", "name", "pos", "hom", "n", "inc", "Num", "id", "test", "loop", "split", "uni", "coord", "div", "dim", "offset", "iter", "index", "span", "bin", "number", "nu", "multi", "len", "fn", "label", "byn", "term", "NUM", "lib", "temp", "count"]}}
{"code": "n=int(input())\\nfor x in range(n+1):\\n    if x*108//100==n:\\n        print(x)\\n        break\\nelse:\\n    print(\":(\")", "target": "194", "substitutes": {"n": ["o", "k", "j", "c", "d", "node", "nb", "name", "num", "t", "i", "y", "g", "h", "network", "nn", "index", "number", "u", "len", "fn", "f", "max", "adj", "b", "e", "ns", "z", "l", "v", "length", "m", "r", "nc", "p", "ne", "N"], "x": ["k", "xp", "xi", "j", "c", "d", "xy", "event", "pos", "int", "fix", "num", "t", "i", "y", "check", "xxx", "ax", "h", "change", "xxxx", "rx", "ix", "index", "fx", "number", "row", "ex", "xc", "u", "f", "dx", "e", "X", "xx", "code", "w", "z", "v", "m", "xs", "p"]}}
{"code": "S = str(input())\\ncnt = 0\\ncha = []\\nfor s in S:\\n  if s not in cha:\\n    cha.append(s)\\n  elif s == cha[0]:\\n    cnt += 1\\n  \\nif len(cha)==2 and cnt==1:\\n  print('Yes')\\nelse:\\n  print('No')", "target": "103", "substitutes": {"S": ["U", "SE", "SH", "SS", "R", "B", "T", "TS", "Si", "SI", "Y", "A", "L", "G", "Sa", "SN", "DS", "HS", "SC", "CS", "SU", "C", "SB", "SF", "Sc", "V", "Sl", "P", "K", "O", "H", "M", "F", "N", "Z"], "cnt": ["cst", " cst", "pint", "aclen", "acct", "pcnc", "ccount", "ccct", "pcct", " ccount", " cret", "pcount", "ccret", "acst", "pcst", "Cret", "cret", "acnt", "pclen", "cccount", " clen", "clen", " cint", "cnc", "Cnt", "cct", "pcnt", " cnc", "Cct", "pnt", " count", "cint", "Ccount", "ccnt", "pount", "pnc", " cct", "pcint", "count"], "cha": ["cur", "auto", "CHA", "Ca", "loc", "ha", "case", "pict", "ya", "acha", "iche", "cy", "c", "che", "cb", "sub", "a", "hea", "pa", "cro", "ched", "fa", "ch", "cats", "cca", "cs", "rot", "ches", "na", "ah", "sa", "abc", "ok", "chu", "co", "ct", " captcha", "sea", "next", "py", "cin", "rys", "cash", " cur", "qua", "issa", "chal", "code", "ca", "C", "chan", "child", "chat", "asa", "chi", "cat", "sc", "Ch", "txt", "xs", "prev", "capt", "CH", "cop"], "s": ["ls", "string", "o", "sync", "ssl", "input", "speech", "c", "sin", "sch", "d", "ws", "ses", "sum", "nb", "a", "sys", "sub", "ss", "sl", "n", "abs", "single", "ats", "strings", "i", "cs", "y", "ches", "g", "os", "score", "sample", "gs", "stat", "sq", "sf", "si", "size", "sets", "spec", "f", "sym", "e", "b", "ps", "ns", "sn", "es", "sb", "sid", "sg", "stats", "sc", "conf", "words", "r", "xs", "p", "hs"]}}
{"code": "n = int(input())\\npos=[]\\nfor i in range(n):\\n  x,y,h = map(int, input().split())\\n  pos.append([x,y,h])\\n\\npos = sorted(pos, key=lambda x: x[2])\\ntx,ty,th = pos[-1]\\ndef solve():\\n  for cx in range(101):\\n    for cy in range(101):\\n      H = th+abs(tx-cx)+abs(ty-cy)\\n      for x,y,h in pos:\\n        if h != max(H-abs(x-cx)-abs(y-cy), 0):\\n          break\\n      else:\\n        return(cx,cy,H)\\n\\ncx,cy,H=solve()\\nprint(cx,cy,H)", "target": "114", "substitutes": {"n": ["o", "k", "j", "c", "d", "nb", "num", "s", "non", "t", "ni", "count", "network", "nn", "nan", "nu", "number", "nit", "len", "f", "nt", "fn", "b", "ns", "no", "z", "l", "m", "r", "nc", "p", "ne", "N"], "pos": ["unit", "part", "Pos", "loc", "o", "case", "plus", "axis", "j", "response", "exp", "slice", "point", "phi", "data", "ss", "diff", "args", "s", "list", "po", "cache", "sort", "push", "body", "os", "cond", "val", "keys", "POS", "index", "post", "line", "next", "lines", "comp", "stack", "len", "size", "nos", "default", "e", "obj", "neg", "ps", "pt", "position", "z", "params", " positions", "l", "str", "order", "p", "block", "pose"], "i": ["xi", "j", "col", " I", " ii", "ind", " ip", "id", " j", " il", "ix", "index", " e", "ip", "u", "iu", "ti", "I", "q", "z", "ii", " ic", "li", "ih", "p"], "x": ["k", "xp", "xi", "px", "c", "guy", "d", "ctx", "xy", "col", "name", "ac", "lex", "int", "ux", " xx", "t", "ch", "key", "on", "width", "xxx", "xa", "ax", "xt", "xxxx", "xe", "rx", "ct", "yx", "ix", "index", "fx", "ox", "ex", "xc", "u", "e", "f", "max", "dx", "b", "X", "xx", "xd", "xf", "one", "zx", "wx", "w", "z", "rex", "l", "v", "ic", "m", "xs", "p", "pe"], "y": ["ey", "o", "fy", "sy", "ya", "j", "c", "d", "xy", "oy", "yn", "phi", "ky", "ry", "ny", "yl", "Y", "ye", "t", "zy", "yr", "dy", "ym", "py", "yt", "asy", "f", "ys", "b", "hi", "yd", "yy", "w", "z", "p", "sky", "vy"], "h": ["height", "hl", "o", "ha", "hy", "oh", "j", "c", "ht", "phi", "bh", "kh", "HH", "rh", "hp", "t", "ch", "ph", "FH", "ah", "hh", "xc", "e", "f", "b", "hi", "ho", "gh", "sh", "q", "yy", "z", "v", "l", "han", "hm", "m", "ih", "p", "hs"], "tx": ["loc", "tr", "px", "ctx", "data", "ux", "id", "ax", "xt", "rx", "tt", "ct", "fx", "trans", "sq", "ex", "nt", "dx", "Tx", "max", "cos", "xx", "ca", "zx", "wx", "TX", "pt", "ta", "cd", "xs", "cf", "wh", "kt"], "ty": ["fy", "sy", "hy", "ya", "px", "xy", "oy", "phi", "ky", "ry", "ny", "yr", "dy", "ph", "gy", "ties", "yan", "rx", "icy", "py", "sq", "yt", "thy", "thin", "pt", "yy", "sh", "TY", "z", "ta", "lat", "sty", "txt", "idy", "sky", "vy"], "th": ["height", "loc", "sy", "k", "first", "tr", "prev", "eth", "ht", "col", "bh", "kh", "s", "rh", "ch", "td", "ph", "ths", "ith", "ct", "tri", "oth", "thy", "thin", "hi", "pt", "sh", "gh", "TH", "han", "Th", "se", "ih", "sth", "hs"], "cx": ["ucz", "ucxs", " cxx", "lctx", "xcxx", "acz", "px", "lcxx", "xctx", "acxx", "ctx", "lcX", "Cy", "cwd", "pX", "ucx", "dcx", "Cxx", "lcxs", "dcy", "cxs", "lcx", "dctx", "actx", "dcxs", "uctx", "pxx", "Cz", "xcX", "py", "acX", "cz", "ucX", "ucy", "CX", " ctx", "xcx", " cX", "ucwd", "lcy", "acx", "Cx", "Cwd", "cxx", "cX", "dcxx", "dcX", "ucxx", " cwd", "Ctx"], "cy": ["pty", "cus", "wy", "sy", "hy", "Ky", "cyl", "ya", "px", "c", "cer", "cycle", "ci", "Cy", "yi", "oy", "col", "ky", "ry", "yo", "yl", "ly", "yp", "Y", "zy", "ch", "rh", "yr", "ph", "dy", "chy", " sy", "gy", "yx", "ym", "ct", "icy", "cin", "rx", "py", "yt", "thy", "cu", "cry", "ca", "cum", "C", "yd", "wx", "uy", "yy", "w", "z", "cr", "lc", "sty", "sky", "vy"], "H": ["U", "SH", "NH", "HT", "hy", "HC", "R", "Hi", "HP", "B", "RH", "T", "W", "HH", "J", "HB", "rh", "Y", "His", "A", "G", "L", "PH", "Kh", "FH", "HK", "EH", "HS", "Q", "WH", "Ha", "GH", "Hy", "HY", "I", "X", "C", "HM", "MH", "HI", "V", "uh", "P", "K", "AH", "TH", "O", "Ch", "M", "DH", "F", "CH", "N"]}}
{"code": "import numpy as np\\nn,m,k = map(int,input().split())\\na = np.array([int(i) for i in input().split()], dtype='int64')\\nb = np.array([int(i) for i in input().split()], dtype='int64')\\n\\n# \u8aad\u307e\u306a\u3044\u3068\u3044\u3046\u9078\u629e\u80a2\u3092\u5148\u982d\u306b\u5165\u308c\u3066\u304a\u304f\\na_c = np.zeros(n+1,dtype='int64')\\na_c[1:] = np.cumsum(a)\\n\\nb_c = np.zeros(m+1,dtype='int64')\\nb_c[1:] = np.cumsum(b)\\n\\na_c = a_c[a_c <= k]\\nb_c = b_c[b_c <= k]\\n\\nans_l = np.searchsorted(b_c, k - a_c, side='right') - 1\\nans_l += np.arange(len(a_c))\\nprint(ans_l.max())", "target": "244", "substitutes": {"n": ["x", "_", "j", "c", "d", "t", "y", "na", "g", "nn", "u", "net", "f", "ns", "z", "l", "r", "io", "ne", "N"], "m": ["ma", "pi", "o", "mc", "c", "d", "y", "machine", "g", "ms", "km", "cm", " M", "e", "f", "mu", "am", "mi", "mm", "im", "module", "v", "r", "M", "p", "bm"], "k": ["ik", "o", "kk", "j", "c", "num", "y", "sk", "g", "h", "ok", "ks", "u", "f", "max", "e", "q", "w", "kw", "z", "K", "v", "l", "r", "p"], "a": ["c", "aw", "ar", "ab", "ac", "da", "an", "s", "array", "A", "y", "alpha", "na", "sa", "aa", "f", "am", "ad", "ca", "ai", "ae", "ba", "aj", "p", " A", "au"], "i": ["pi", "it", "uri", "o", "ji", "x", "xi", "j", "idi", "c", "ci", "d", "yi", "phi", "oi", "io", "start", "int", "ind", "ui", "t", "bi", "id", "key", "ix", "index", "ip", "si", "u", "iu", "f", "I", "e", "ti", "ai", "z", "qi", "v", "l", "ii", "li", "p", "zi"], "b": ["mb", "abb", "c", "ob", "cb", "nb", "ab", "B", "bc", "binary", "rb", "y", "bs", "fb", "abc", "ib", "beta", "aa", "f", "ad", "sb", "be", "ba", "l", "bb", "emb", "p", "bm"]}}
{"code": "s = str(input())\\nt = str(input())\\nrevise = 0\\nlen_str = len(s)\\nfor i in range(len_str):\\n    if s[i] != t[i]:\\n        revise += 1\\nprint(int(revise))", "target": "123", "substitutes": {"s": ["states", "ls", "fs", "o", "services", "parts", "rs", "S", "input", "c", "ins", "ses", "ws", "a", "ss", "n", "ens", "space", "strings", "cs", "g", "ds", "ts", "cells", "ks", "ips", "source", "gs", "lines", "si", "sets", "letters", "e", "f", "ys", "b", "ns", "ans", "es", "sb", "l", "irs", "str", "types", "xs", "p", "seconds"], "t": ["o", "tp", "dt", "qt", "x", "tm", "c", "d", "tc", "a", "T", "n", "wt", "y", "test", "tis", "g", "target", "ts", "tt", "tf", "u", "f", "e", "b", "pt", "ta", "z", "l", "v", "m", "r", "p", "tn"], "revise": ["prevote", " revide", "previce", "promride", "relice", "revision", "revride", "promise", "recise", "revote", "recose", " revose", "revide", " revride", "promose", " revice", "promice", "recision", "previse", " revote", "relise", "relision", " revision", "relride", "promide", "revice", "previde", "promision", "recice", "relote", "relide", "revose"], "len_str": [" len_br", "len1str", "len2br", "len2Str", " len2str", "len_Str", "len_arr", "len_br", " len_arr", "len1Str", " len2Str", "len2str", "len1br", " len2br", " len_Str"], "i": ["mini", "pi", "di", "uri", "ji", "k", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "phi", " I", "col", "ri", "io", "start", "pos", "ind", "n", "ini", "ni", "bi", "id", "val", "h", "index", "ip", "eni", "si", "u", "iu", "fi", "f", "ti", "I", "e", "mi", "q", "ai", "z", "qi", "v", "ii", "li", "ih", "p"]}}
{"code": "import numpy as np\\n\\nn, k = map(int, input().split())\\na = np.array(list(map(int, input().split())))\\n\\nL = len(f'{10**12:b}')\\nres = 0\\nfor i in range(-1, L):\\n    if i != -1 and not (k >> i) & 1:\\n        continue\\n    val = 0\\n    for j in range(L):\\n        d = np.count_nonzero((a >> j) & 1)\\n        if i < j:\\n            if (k >> j) & 1:\\n                val += (n-d) * 2**j\\n            else:\\n                val += d * 2**j\\n        elif i == j:\\n            val += d * 2**j\\n        else:\\n            val += max(d, n-d) * 2**j\\n    res = max(res, val)\\nprint(res)\\n", "target": "262", "substitutes": {"n": ["o", "_", "x", "c", " N", "nb", " output", "s", "num", "t", "y", "na", "g", "min", " self", "h", "en", "un", " network", " net", " c", "ln", "u", "len", "net", "f", "nt", "e", "max", "b", "ns", "w", "z", "l", "v", "r", "m", " api", "p", "ne", "N"], "k": ["ik", "o", "ke", "x", "kk", "c", "ak", " K", "ck", "num", "y", "alpha", "key", "sk", "g", "unk", "h", "ok", "ks", "ko", "u", "e", "f", "ad", "b", "ki", "q", "kw", "w", "z", "K", "v", "l", "m", "r", "p", "ka"], "a": ["ma", "area", "ak", "ab", "ac", "data", "wa", "pa", "args", "all", "an", "da", "array", "A", "alpha", "api", "sa", "ana", "aa", "va", "ja", "f", "ad", "b", "am", "ans", "ga", "ai", "aaa", "ba", "z", "aj", "m", "p"], "L": ["LM", "D", "CL", "lf", "LU", "LO", "R", "E", "NL", "Lo", "B", "T", "J", "F", "LI", "IL", "Len", "AL", "EL", "LV", "LE", "Q", " l", "len", "Length", "LT", "I", "Li", "dL", "X", "C", "LL", "Lu", "V", "z", "K", "l", "DL", "length", "M", "LA", "SL", "N", "Z"], "res": ["vec", "rs", "rates", "js", "err", "results", "R", "ras", "real", "runs", "sol", "data", "als", "vs", "re", "rus", "valid", "s", "cal", "reg", "RES", "range", "mr", "Res", "result", "arr", "details", "els", "os", "breaks", "rem", "min", "ms", "pres", "des", "ret", "Val", "vals", "rep", "lines", "rel", "final", "eval", "max", "rev", "ps", "resp", " Res", "values", "gr", "es", "errors", "ref", "grades", "Results", "r", "p", "req", " results", "resolution"], "i": ["pi", "di", "ji", "o", "x", "xi", "c", "ci", "yi", "ri", "oi", "ie", "ori", "int", "ind", "ini", "t", "ni", "bi", "y", "ij", "si", "u", "iu", "f", "ti", "e", "I", "b", "ki", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "m", "p", "zi"], "val": ["el", "part", "loc", "grade", "ol", "err", "al", "ver", "col", "fail", "sol", "value", "data", "VAL", "int", "ind", "aval", "pal", "trial", "valid", "var", "cal", "reg", "arr", "fe", "cond", "live", "Val", "ret", "bl", "vals", "error", " ret", "sel", "rel", "len", "pre", "eval", "max", "default", "resp", "base", "vol", "ref", "v", "l", "grad", "li", "r", "p", "req", "arg"], "j": ["kj", "el", "note", "ji", "o", "js", "x", "c", "fail", "ie", "oj", "J", "ind", "t", "y", " dj", "key", "dy", "g", "ax", "ij", "h", "ok", "bj", "job", "un", "jl", "jo", " l", "u", "ja", "f", "e", "obj", "adj", "b", "jj", "jet", "q", "z", "v", "jp", "aj", "jam", "l", "r", "m", "ii", "p", "uj"], "d": ["di", "o", "dom", "D", "dt", "x", "done", "c", "pd", "du", "bd", "ind", "da", "t", "id", "y", "sd", "dy", "fd", "dim", "ds", "do", "dc", "u", "e", "dd", "dx", "f", "ad", "b", "q", "dj", "w", "z", "dn", "v", "l", "cd", "m", "r", "dat", "p", "ld"]}}
{"code": "n = int(input())\\ns = input()\\nans = 0\\ni = 0\\nwhile i < n:\\n    ans += 1\\n    while i + 1 < n and s[i] == s[i + 1]:\\n        i += 1\\n    i += 1\\nprint(ans)\\n", "target": "717", "substitutes": {"n": ["o", "k", "x", "c", "np", "d", "nb", "Ns", "an", "num", "t", "ni", "na", "h", "network", "nan", "nn", "span", "len", "net", "f", "e", "nt", "b", "ns", "pn", "none", "no", "w", "nor", "z", "l", "m", "nc", "ln", "p", "ne", "N"], "s": ["states", "ls", "services", "o", "parts", "S", "x", "c", "sp", "d", "ses", "a", "args", "an", "t", "cs", "y", "sk", "g", "os", "blocks", "gs", "lines", "south", "si", "u", "sets", "f", "e", "b", "ps", "ns", "es", "tests", "sb", "features", "w", "l", "v", "m", "xs", "p"], "ans": ["ls", "x", "anus", "annis", "aning", "ci", "nas", "ins", "reads", "a", "ars", "ants", "int", "an", "anc", "ats", "ni", "cs", "ians", "ents", "na", "os", "anas", "ds", "ids", "nn", "nan", "ana", "AN", "atan", "aned", "anne", "ania", "ANS", "ann", "lan", "ns", "ki", "scan", "es", "errors", "no", "ions", "ai", "ano", "mean", "ines", "p", "aus"], "i": ["mini", "pi", "di", "o", "it", "at", "k", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "ri", "oi", "phi", "a", "io", "ie", "start", "ori", "int", "ini", "ui", "t", "ni", "bi", "id", "y", "h", "ix", "index", "ip", "multi", "eni", "si", "u", "iu", "f", "I", "ti", "e", "b", "mi", "hi", "ki", "ai", "ani", "z", "chi", "qi", "l", "ii", "li", "m", "p", "zi"]}}
{"code": "import math\\nfrom numba import jit\\nn,k=map(int,input().split())\\nh=list(map(int,input().split()))\\n@jit\\ndef a(N,K,H):\\n    s=[0]*n\\n    for i in range(1,N):\\n        total=math.inf\\n        for j in range(1,K+1):\\n            if i-j<0:\\n                break\\n            total=min(total,abs(H[i]-H[i-j])+s[i-j])\\n        s[i]=(total)\\n    print(s[-1])\\na(n,k,h)", "target": "769", "substitutes": {"n": ["o", "x", "c", "np", "d", "nb", "num", "an", "t", "y", "na", "g", "nn", "nan", "nu", "net", "fn", "f", "max", "e", "b", "ns", "none", "no", "w", "z", "v", "l", "m", "nc", "ln", "p", "ne"], "k": ["ik", "o", "kn", "ke", "x", "c", "d", "ak", "mk", "y", "sk", "g", "ks", "dk", "u", "f", "b", "ki", "q", "w", "z", "v", "l", "m", "p"], "h": ["x", "oh", "c", "d", "bh", "rh", "id", "y", "ph", "ah", "hh", "th", "f", "e", "b", "hi", "uh", "sh", "q", "w", "z", "l", "v", "hm", "m", "he", "ih", "p", "hs"], "N": ["U", "D", "S", "R", "NS", "NC", "B", "Ns", "T", "J", "A", "L", "G", "Ni", "Num", "NT", "NN", "Q", "I", "X", "C", "Ne", "V", "P", "KN", "O", "M", "F", "Z"], "K": ["KI", "KR", "D", "Ku", "S", "IK", "SK", "Ak", "T", "J", "W", "Y", "L", "G", "NK", "KK", "HK", "Q", "PK", "I", "X", "C", "V", "P", "KN", "Sk", "KS", "O", "M", "F", "CH", "Z"], "H": ["U", "S", "oh", "R", "E", "B", "RH", "T", "HH", "F", "J", "rh", "Y", "W", "L", "G", "ph", "HK", "HS", "Q", "I", "X", "C", "HI", "V", "sh", "P", "z", "M", "p", "hs", "Z"], "s": ["states", "parts", "o", "services", "rs", "ls", "js", "S", "c", "d", "ins", "ses", "sum", "ws", "a", "steps", "ss", "abs", "t", "space", "strings", "g", "sa", "os", "ks", "gs", "lines", "items", "si", "u", "sets", "f", "e", "b", "ps", "ns", "ans", "es", "sb", "sh", "w", "sv", "v", "l", "stats", "xs", "se", "p", "hs"], "i": ["ik", "pi", "it", "ji", "o", "x", "xi", "c", "ci", "d", "yi", "phi", "oi", "a", "ie", "int", "ind", "J", "ui", "ini", "t", "ni", "bi", "id", "iq", "y", "index", "ip", "multi", "si", "u", "iu", "f", "ti", "I", "e", "b", "hi", "im", "ai", "z", "chi", "l", "v", "ii", "li", "m", "p"], "total": ["note", "pi", "di", "part", "this", "full", "fat", "partial", "c", "otal", "current", "d", "Total", "scale", "sum", "value", "complete", " final", "all", "quant", "valid", "t", "non", "result", "zero", "alpha", "min", "translation", "trans", "null", "error", "stat", "percent", "basic", "last", "si", "final", "normal", "u", "mu", "max", "mega", "nt", "f", " TOTAL", "ho", "no", " Total", " whole", "ta", "sh", "json", "less", "length", "m", "p"], "j": ["kj", "ji", "o", "js", "x", "c", "off", "d", "yi", "ijk", "jc", "ind", "J", "jit", "t", "ch", "y", "key", "g", "ij", "job", "index", "jl", "jo", "si", "u", "ja", "f", "I", "e", "adj", "b", "jj", "im", "q", "w", "z", "l", "jp", "v", "hm", "m", "ii", "li", "aj", "p", "uj"]}}
{"code": "a,b = input().split()\\nx = int(a+b)\\n\\nif int(x**(1/2)) == x**(1/2):\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "271", "substitutes": {"a": ["input", "c", "d", "ab", "ac", "pa", "n", "da", "an", "A", "fa", "i", "y", "alpha", "na", "sa", "aa", "la", "u", "oa", "f", "e", "ca", "ga", "ae", "w", "asa", "z", "l", "aj", "p", " A"], "b": ["k", "abb", "c", "d", "cb", "nb", "ab", "B", "bc", "n", "s", "rb", "A", "i", "y", "bs", "g", "fb", "ib", "beta", "aa", "wb", "e", "f", "sb", "be", "ba", "l", "v", "bb", "r", "p", "bp"], "x": ["xp", "c", "d", "data", "pos", "int", "n", "t", "i", "y", "alpha", "check", "xa", "g", "xxx", "ax", "abc", "change", "ix", "index", "ex", "xc", "u", "e", "f", "max", "X", "xx", "code", "no", "w", "z", "l", "v", "cross", "m", "xs", "p"]}}
{"code": "n, m = map(int, input().split())\\n\\na = []\\nb = list((0 for i in range(m)))\\n\\nfor i in range(n):\\n    a.append(list(map(int, input().split())))\\n    \\nfor a_ in a:\\n    k = a_[0]\\n    for k_ in range(k):\\n        b[(a_[k_ + 1]) - 1] += 1\\n        \\nans = 0\\nfor b_ in b:\\n    if b_ == n:\\n        ans += 1\\nprint(ans)", "target": "556", "substitutes": {"n": ["o", "x", "j", "c", "d", "node", "nb", "s", "an", "num", "t", "y", "nan", "nn", "u", "f", "e", "nt", "max", "ns", "q", "w", "z", "l", "v", "r", "M", "nc", "p", "ne", "N"], "m": ["o", "mc", "x", "j", "c", "d", "num", "y", "mn", "g", "h", "ms", "u", "f", "e", "mu", "am", "mm", "w", "z", "dm", "v", "l", "r", "M", "p", "km", "N"], "a": ["ma", "area", "o", "c", "aw", "ar", "ak", "ama", "ab", "ac", "af", "args", "an", "array", "A", "fa", "alpha", "na", "sa", "ana", "za", "aa", "va", "oa", "f", "am", "ad", "ca", "ga", "ai", "ae", "ba", "l", "p", "ka", "au"], "b": ["o", "abb", "x", "c", "d", "nb", "ab", "bh", "app", "ac", "B", "binary", "an", "array", "rb", "fa", "bi", "y", "bs", "g", "sa", "aa", "u", "e", "f", "ad", "base", "aba", "sb", "ga", "w", "aaa", "ba", "z", "l", "v", "bb", "r", "p"], "i": ["pi", "it", "x", "xi", "j", "ci", "int", "ind", "ni", "bi", "id", " j", "index", "ip", "si", "u", "iu", "ti", "I", "im", "ai", "qi", "ii", "li", "r", "p"], "a_": ["a0", "A_", " a0", "sa_", "aa_", "u_", "sa0", "aa0"], "k": ["o", "kn", "ke", "x", "kk", "j", "c", "d", "ak", "mk", "kick", "ch", "id", "y", "key", "sk", "unk", "ks", "kid", "kin", "u", "f", "q", "kw", "w", "z", "K", "v", "p"], "k_": ["p64", "p_", " k64", "m_", "an64", "k64", "an1", " k1", "k1", "n_", "an_", "p1"], "ans": ["ls", "anus", "anan", "aning", "nas", "ins", "reads", "ations", "ants", "aid", "an", "s", "anc", "anon", "sk", "na", "os", "anas", "ds", "gan", "ks", "nn", "nan", "span", "ana", "can", "cons", "la", "AN", "cas", "aned", "anne", "atan", "ANS", "ann", "ad", "ns", "lan", "chan", "ions", "ai", "aces", "ani", "annels", "ays", "aus", "ons"], "b_": ["bb_"]}}
{"code": "import numpy as np\\nn,m=map(int,input().split())\\ns=np.zeros(n+1)\\nfor i in range(m):\\n    a,b=map(int,input().split())\\n    s[a]+=1\\n    s[b]+=1\\nprint(\"NO\" if sum(s%2)else\"YES\")", "target": "486", "substitutes": {"n": [" v", "o", "k", " d", "j", "c", "np", "d", " fn", " N", "nb", " p", "num", " log", "t", "g", " self", "h", "network", " ns", "nan", "nn", " index", " c", " l", "net", " ni", " number", "f", " nodes", "e", "ns", " num", "z", "l", "r", "nc", "p", "N"], "m": ["mini", "o", "mc", "k", "j", "c", "mad", "om", "d", "nm", "rm", "num", "t", "range", "y", "mn", "h", "cm", "size", "f", "e", "sm", "mm", "z", "dm", "v", "l", "hm", "r", "M", "p", "bm"], "s": ["states", "services", "o", "ls", "S", "sync", "x", "c", "d", "ws", "ins", "sum", "ses", "ss", "abs", "args", "t", "strings", "cs", "y", "g", "os", "h", "ms", "ts", "blocks", "ds", "gs", "lines", "south", "si", "u", "sets", "f", "e", "sym", "ps", "ns", "ans", "es", "sb", "w", "z", "v", "l", "stats", "groups", "xs", "its", "r", "p", "seconds"], "i": ["k", "j", "gi", "c", "ci", "d", " I", "start", "num", "id", "y", "g", "h", "ib", "index", "ip", "il", "u", "iu", "f", "e", "I", "q", "ai", "z", "l", "p"], "a": ["area", "o", "x", "c", "aw", "d", "ar", "ac", "ab", "art", "da", "an", "A", "y", "sa", "offset", "ia", "aa", "u", "va", "f", "e", "ga", "ai", "ae", "w", "asa", "ba", "aj", "p", "au"], "b": ["o", "eb", "k", "mb", "x", "pb", "j", "c", "db", "d", "nb", "ab", "B", "bd", "xb", "rb", "y", "bs", "g", "h", "fb", "u", "lb", "e", "f", "sb", "w", "ba", "l", "v", "r", "bf", "p"]}}
{"code": "#list\u306e\u8981\u7d20\u3092\u30ad\u30fc\u3001\u305d\u306e\u51fa\u73fe\u6570\u3092\u5024\u3068\u3057\u3066\u6301\u3064\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u3092\u8fd4\u3059\\ndef count(list):\\n    dict = {}\\n    for i in range(len(list)):\\n        dict[list[i]] = dict.get(list[i], 0) + 1\\n    return dict\\n\\nn = int(input())\\ns = []\\nfor _ in range(n):\\n    s.append(input())\\n\\ndic = count(s)\\nlst = sorted(dic.items(), key=lambda x: x[1], reverse=True)\\nvalue_max = lst[0][1]\\noutput = []\\n\\nfor name in lst:\\n    if name[1] == value_max:\\n        output.append(name[0])\\n    else:\\n        break\\n\\noutput.sort()\\nprint(*output,sep=\"\\n\")", "target": "750", "substitutes": {}}
{"code": "A =list(map(int, input().split()))\\nif A[0]+A[1]>=A[2]:\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "618", "substitutes": {"A": ["As", "Ca", "NA", "D", "S", "Any", "UA", "au", "E", "Alpha", "a", "B", "CA", "All", "T", "PA", "mA", "Action", "IA", "Array", "At", "L", "AM", "G", "Am", "alpha", "Access", "HA", "GA", "SA", "ACE", "An", "ANY", "TA", "AP", "Ar", "Ha", "I", "AA", "C", "MA", "Na", "P", "FA", "API", "O", "AC", "N", "LA"]}}
{"code": "N = int(input())\\ndp = [float('inf')]*(N+1)\\ndp[0] = 0\\nfor i in range(N+1):\\n    if i+1 <= N:\\n        dp[i+1] = min(dp[i+1],dp[i]+1)\\n    for j in range(1,N+1):\\n        if i + 6**j > N:\\n            break\\n        dp[i+6**j] = min(dp[i+6**j],dp[i]+1)\\n    for k in range(1,N+1):\\n        if i + 9**k > N:\\n            break\\n        dp[i+9**k] = min(dp[i+9**k],dp[i]+1)\\nprint(dp[N])", "target": "460", "substitutes": {"N": ["Node", "NA", "D", "S", "Max", "CN", "GN", "R", "NS", "NC", "NE", "B", "Ns", "T", "n", "J", "W", "Y", "Ni", "L", "Wh", "G", "Part", "Len", "SN", "Num", "NB", "Power", "CNN", "NT", "NM", " n", "Size", "NN", "MN", "No", "Q", "Length", "Count", "I", "X", "NO", "C", "Na", "Ne", "V", "P", "K", "Nat", "NP", "O", "H", "M", "F", "Z"], "dp": ["tp", "dt", "par", "work", "db", "port", "pd", "queue", "var", "vp", "gap", "dh", "dc", "ip", "zip", "dep", "sup", "drop", "ep", "dn", "NP", "p", "dq", "wp", "loc", "pid", "pg", "d", "data", "sl", "hp", "DP", "result", "points", "cp", "dr", "pp", "default", "dm", "deb", "dat", "fp", "lp", "df", "di", "dos", "pb", "uv", "point", "diff", "direction", "config", "pkg", "push", "ds", "dB", "channel", "comp", "adr", "imp", "resp", "params", "bp", "gp", "np", "pair", "pos", "umpy", "yp", "wd", "api", "dim", "pad", "pipe", "send", "address", "dl", "P", "bb", "dist"], "i": ["ik", "pi", "di", "o", "uri", "it", "ji", "x", "xi", "gi", "anti", "c", "ci", "slice", "yi", "phi", "oi", "ri", "a", "io", "ie", "start", "ori", "cli", "int", "ind", "n", "uli", "ui", "ini", "ni", "bi", "id", "y", "info", "api", "inner", "key", "ix", "source", "ip", "index", "multi", "eni", "si", "u", "iu", "ami", "e", "ti", "I", "f", "b", "my", "mi", "ki", "ai", "init", "z", "p", "chi", "qi", "v", "l", "ii", "li", "m", "ei", "zi"], "j": ["kj", "ji", "o", "js", "x", "c", "d", "ijk", "kl", "ie", "ind", "n", "J", "s", "t", "ch", "y", "key", "g", "ax", "ij", "h", "bj", "jl", "u", "ja", "f", "e", "b", "jj", "q", "w", "z", "v", "jp", "aj", "jam", "m", "l", "p", "uj"], "k": ["ik", "o", "kn", "ke", "x", "kk", "c", "d", "ak", "kl", "kh", "n", "ck", "kick", "t", "ch", "y", "key", "kg", "sk", "g", "h", "ok", "kid", "uk", "ks", "dk", "ko", "u", "kil", "e", "f", "b", "ki", "q", "w", "kw", "z", "K", "v", "l", "p", "km", "ku"]}}
{"code": "x = input()\\na, b, c = tuple(x.split())\\na = int(a)\\nb = int(b)\\nc = int(c)\\n\\nif a < b and b < c:\\n\tprint(\"Yes\")\\nelse:\\n\tprint(\"No\")", "target": "554", "substitutes": {"x": ["k", "work", "input", "plus", "exp", "event", "pattern", "data", "name", "expression", "n", "t", "y", "tx", "test", "xml", "key", "alpha", "g", "h", "sex", "ex", "e", "f", "X", "xx", "code", "wx", "q", "content", "w", "z", "v", "l", "accept", "m", "xs", "r", "text", "p"], "a": ["ma", "area", "ha", "aw", "d", "ak", "ab", "ac", "art", "af", "pa", "n", "da", "an", "s", "A", "fa", "y", "alpha", "sa", "ah", "aa", "u", "va", "e", "f", "ad", "am", "ca", "ai", "ae", "asa", "ba", "aaa", "l", "ea", "aj", "p", "audio", " A", "au"], "b": ["o", "eb", "k", "abb", "pb", "db", "d", "cb", "ob", "ab", "ac", "B", "bc", "bd", "n", "abs", "xb", "ub", "binary", "rb", "bi", "bas", "i", "y", "bs", "bar", "fb", "h", "abc", "ib", "aa", "wb", "lb", "u", "e", "f", "ad", "ca", "base", "sb", "be", "ae", "ba", "v", "l", "bb", "bf", "r", "p"], "c": ["o", "k", "cy", "ci", "d", "cycle", "cb", "ac", "uc", "bc", "n", "s", "cc", "ce", "ch", "cs", "ec", "con", "cp", "ct", "cin", "cm", "dc", "cu", "u", "xc", "f", "e", "ca", "unc", "C", "w", "z", "cr", "l", "lc", "cd", "pc", "cf", "nc", "p"]}}
{"code": "# D - Recording\\n\\nN, C = map(int, input().split())\\nmax_time = 10**5\\ngantt = [[0] * (max_time + 1) for _ in range(C+1)]\\nstc = []\\n\\nfor _ in range(N):\\n    stc.append(list(map(int, input().split())))\\n    \\nstc = sorted(stc, key = lambda x: x[0])\\nstc = sorted(stc, key = lambda x: x[2])    \\n\\nfor idx in range(N):\\n    s, t, c = stc[idx][0], stc[idx][1], stc[idx][2]\\n    try:\\n        if stc[idx-1][2] == c and stc[idx-1][1] == s:\\n            gantt[c][s+1] += 1\\n        else:\\n            gantt[c][s] += 1\\n    except IndexError:\\n        gantt[c][s] += 1\\n    if t+1 <= max_time:\\n        gantt[c][t+1] -= 1\\n\\nfor c in range(C+1):\\n    for idx in range(1, max_time+1):\\n        gantt[c][idx] += gantt[c][idx-1]\\n    \\nimport numpy as np\\nprint(np.max(np.sum(gantt, axis = 0)))", "target": "632", "substitutes": {}}
{"code": "s = list(input())\\nt = list(input())\\nfor i in range(len(s)) :\\n    s = s[1:] + s[:1]\\n    if s == t :\\n        print(\"Yes\")\\n        break\\nelse :\\n    print(\"No\")\\n", "target": "721", "substitutes": {"s": ["states", "services", "ls", "parts", "o", "string", "rs", "S", "ssl", "input", "x", "c", "d", "ws", "ses", "a", "start", "ss", "sl", "n", "args", "qs", "strings", "cs", "y", "g", "os", "ds", "ts", "gs", "ies", "lines", "sites", "south", "si", "u", "sets", "letters", "e", "f", "b", "ps", "ns", "new", "es", "tests", "sb", "w", "sv", "l", "v", "m", "xs", "types", "r", "p"], "t": ["tp", "o", "k", "you", "x", "j", "c", "d", "tc", "T", "n", "ot", "tw", "y", "test", "g", "h", "ts", "tz", "u", "f", "e", "b", "w", "ta", "z", "tn", "l", "v", "m", "r", "p", "temp"], "i": ["x", "j", "c", "gi", "start", "int", "ind", "n", "num", "id", "val", "h", "index", "ip", "si", "u", "iu", "f", "I", "ti", "ai", "p", "l", "ii", "li", "io"]}}
{"code": "n,a,b=map(int,input().split())\\n\\nmod=10**9+7\\n\\nans=pow(2,n,mod)-1\\n\\nna=1\\nnb=1\\n\\nansa=1\\nansb=1\\n\\nfor i in range(1,a+1):\\n  na*=i\\n  na%=mod\\n  \\nfor i in range(n,n-a,-1):\\n  ansa*=i\\n  ansa%=mod\\n  \\nansa*=pow(na,mod-2,mod)\\n\\nfor i in range(1,b+1):\\n  nb*=i\\n  nb%=mod\\n  \\nfor i in range(n,n-b,-1):\\n  ansb*=i\\n  ansb%=mod\\n  \\nansb*=pow(nb,mod-2,mod)\\n\\nans-=ansa\\nans-=ansb\\n\\nans%=mod\\n\\n\\nprint(ans)\\n", "target": "580", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "np", "d", "num", "s", "an", "non", "ni", "y", "mn", "on", "en", "network", "nan", "nn", "un", "nu", "u", "net", "e", "f", "fn", "nt", "one", "ns", "sn", "no", "w", "z", "dn", "l", "v", "m", "r", "nc", "p", "ne", "N"], "a": ["ma", "area", "x", "c", "ar", "d", "ak", "ab", "ac", "wa", "da", "all", "an", "fa", "A", "alpha", "sa", "ana", "ia", "aa", "la", "va", "oa", "f", "ad", "ca", "am", "ga", "ai", "ae", "w", "aaa", "ba", "ea", "aj", "m", "p", "au"], "b": ["part", "eb", "mb", "x", "pb", "j", "c", "db", "d", "ob", "cb", "ab", "B", "bc", "bd", "bis", "s", "rb", "y", "bs", "bar", "body", "g", "fb", "bin", "wb", "lb", "u", "f", "e", "ad", "base", "sb", "be", "ba", "l", "v", "m", "bf", "r", "bb", "p", "bp"], "mod": ["j", "mad", "c", "ac", "edit", "option", "num", "valid", "reg", "mag", "mn", "ms", "ow", "null", "mods", "multi", "cum", "pm", "grad", "orig", "m", "comment", "p", "temp", "ld", "mode", "part", "log", "k", "x", "um", "d", "rad", "scale", "du", " MOD", "id", "dig", "md", "post", "comb", "opt", "max", "no", "im", "add", "length", "sim", "M", "sec", "step", "mac", "cy", "modified", "mult", "diff", "int", "ind", "fun", "perm", "man", "update", "sort", "crit", "pack", "rem", "index", "comp", "function", "len", "spec", "Mod", "ga", "amd", "complex", "form", "rot", "rank", "oct", "dom", "od", "exp", "ver", "bug", "pos", "dec", "depth", "loop", "round", "check", "min", "transform", "dim", "custom", "parent", "cm", "un", "dem", "row", " Mod", "MOD", "module", "lib", "dist", "order", "small", "mix"], "ans": ["ls", " cats", "x", "anus", "san", "aning", "ass", "anned", "nas", "ras", "ins", "aos", "ations", "uss", "ars", "ants", "ss", "amps", "anners", "an", "s", "ads", "A", "man", " means", "ats", " spans", "cs", "ians", "anon", "sk", "annot", "anas", "gan", "nan", "nn", "An", "span", "can", "anes", "ana", "cons", "AN", "atan", "aned", "len", "anne", "ANS", "\u03b1", "ania", "ann", "lan", "ns", "ad", "mas", "ands", "iann", "chan", "ions", "ai", "ani", "ano", "ays", " scans", "antis", "aus", "ons", "au"], "na": ["ma", "NA", " ma", "cn", "nas", "wa", "ac", "ota", "ny", "pa", "enna", "da", "ata", "an", "num", "nz", "ni", "arn", "alpha", "qa", "sa", "ana", "nan", "nn", "nu", "aa", "la", "enn", "anne", "nt", "one", "ann", "ns", " nan", "ane", "sn", "Na", "anna", "ca", "no", "ai", "nat", "asa", "ba", "ea", "sam", "aea", "ne"], "nb": ["note", "brain", "eb", "cn", "mb", "abb", "np", "cb", "ob", "ab", "ny", "nd", "bn", "nz", "an", "num", "rb", "ni", "bi", "y", "NB", "api", "mn", "lab", "nan", "nn", "span", "bin", "nu", "wb", "nit", "nr", "anne", "nt", "ann", "ad", "ns", "base", "sn", "anna", "sb", "no", "ai", "ani", "aida", "kb", "obb", "bb", "nc", "ne", "bm", "omnia"], "ansa": ["ansas", "nesa", "adsan", "anA", "nanA", "annan", "ansA", "annn", "onsa", "anesapi", "onsb", "arsb", "adsa", "nesb", "ausa", "arsas", "nanb", "ansn", "ausn", "onsaa", "arsa", "annaa", "anaa", "onsas", "ansaa", "anas", "anesa", "ansan", "nesas", "ana", "adsas", "ausb", "nana", "anesb", "ansapi", "arsn", "anesA", "arsapi", "anb", "anna", "annb", "annapi", "arsA", "ausas", "nesan", "annA", "nanas", "adsb", "annas"], "ansb": ["ANl", "ansu", "ANB", "onsc", "ansbs", "arsu", "nasa", "annn", "onsa", "onsn", "annedl", "anbd", "antsb", "nasc", "onsb", "arsb", "annedbs", "anp", "ansn", "antsp", "atsn", "antsu", "arsa", "atsl", "annbs", "atsa", "anesa", "annl", "ANb", "anesB", "ana", "anesbd", "ansp", "nasb", "antsa", "anesb", "annedB", "ansB", "anu", "ansc", "annB", "ANbs", "anb", "anna", "arsp", "annb", "anB", "ansl", "annedb", "nasl", "annc", "annbd", "onsl", "ansbd", "atsb"], "i": ["mini", "pi", "it", "o", "di", "iw", "k", "x", "xi", "j", "idi", "gi", "c", "ci", "d", "oi", "ri", "io", "ie", "int", "s", "ini", "ui", "ati", "ni", "id", "y", "iq", "g", "h", "ia", "index", "ip", "ine", "si", "il", "u", "iu", "f", "ti", "I", "e", "mu", "ga", "im", "ai", "qi", "l", "v", "ii", "ic", "li", "m", "p"]}}
{"code": "N=int(input())\\n\\nA=list(map(int,input().split()))\\n\\nmod=10**9+7\\nsummy=[]\\na=0\\nfor i in range(N):\\n    a += A[i]\\n    a %= mod\\n    summy.append(a)\\n\\nans=0\\nfor i in range(N-1):\\n    ans += summy[N-2-i]*A[N-1-i]\\n    ans %= mod\\nprint(ans)", "target": "198", "substitutes": {"N": ["U", "NA", "II", "D", "S", "Network", "GN", "NS", "E", "NC", "B", "Bi", "Ns", "T", "n", "Sn", "J", "Y", "Ni", "L", "IN", "Num", "Len", "Part", "NB", "CNN", " n", "Size", "NN", "No", "AN", "I", "X", "ns", "C", "NI", "Ne", "Na", "NG", "DC", "V", "Unit", "P", "K", "KN", "M", "F", "Z"], "A": ["As", "U", "NA", "D", "S", "Alpha", "B", "CA", "All", "T", "W", "an", "Y", "Array", "AM", "L", "G", "Am", "array", "AD", "AS", "alpha", "AI", "SA", "AU", "An", "AP", "LA", "Average", "Ar", "AN", "I", "AA", "am", "X", "C", "AST", "V", "ai", "P", "K", "API", "H", "M", "AC", "Input", "au"], "mod": ["ma", "oct", "sec", "mode", "step", "grade", "mac", "od", "rad", "scale", "bug", "ac", "mult", "int", "fix", "fun", "perm", "da", "num", "reg", "man", "update", "mag", "sort", "zero", "check", "div", "min", "dim", "ms", "month", "post", "comp", "mods", "row", "function", "comb", "max", "am", "cum", " Mod", "none", "MOD", "Mod", "im", "module", "add", "sign", "complex", "m", "r", "sim", "form", "rank"], "summy": ["ssummy", "statesandy", "ansummy", "statesummy", "sandy", "ansump", "dummies", "Sump", " sumper", "sickle", "ssumm", "sumper", "ssilly", "statesilly", "sesandy", " summies", "ansummies", "silly", "sesilly", "ssumper", "ssickle", "ansandy", "dandy", "Summy", "Sumper", "Sandy", " summ", "Summ", "ssummies", "sesickle", "ssandy", "summies", "sump", "Summies", "dummy", "summ", "dump", "statesickle", "sesummy"], "a": ["ma", "area", "at", "sta", "x", "ar", "ac", "wa", "ab", "af", "pa", "n", "mA", "da", "ata", "an", "s", "fa", "alpha", "na", "sa", "ana", "ia", "aa", "la", "va", "am", "ad", "ca", "tta", "ga", "ai", "ae", "asha", "aaa", "ba", "ea", "ao", "p", "au"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "axis", "c", "gu", "ci", "d", "yi", "io", "ie", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "alpha", "g", "h", "index", "ip", "multi", "si", "u", "iu", "e", "I", "f", "ti", "b", "ai", "z", "qi", "l", "v", "ii", "li", "m", "r", "ei", "p"], "ans": ["ls", "Ann", "anus", "aning", "nas", "ras", "ins", "ars", "ants", "aid", "any", "amps", "n", "anch", "an", "s", "anc", "ads", " means", "man", "anon", "na", "sa", "anas", "ds", "ks", "ana", "An", "ia", "nan", "can", "cons", "AN", "aned", "leans", "anne", "ANS", "ann", "lan", "ns", "ca", "Na", "ai", "ani", "aces", "ano", "ays", "ace", "p", "aus", "ons"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\n\\nB = A.copy()\\n\\nK = 0\\n\\nfor i in range (0, N):\\n\tif A[i] < 0:\\n\t\tB[i] = -1*B[i]\\n\t\tK+=1\\n\\nTashita = sum(B)\\n\\nif K%2 != 0:\\n\tTashita-=2*min(B)\\n\\nprint(Tashita)", "target": "579", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "E", "NC", "NL", "NE", "Ns", "T", "n", "J", "Y", "L", "Len", "SN", "NB", "CNN", "NT", " n", "Size", "NN", "Q", "I", "X", "NO", "C", "V", "P", "NP", "O", "H", "M", "F", "Z"], "A": ["As", "U", "NA", "II", "D", "S", "Alpha", "a", "CA", "All", "T", "mA", "IA", "At", "Array", "AD", "Az", "AM", "L", "Y", "Am", "array", "Ab", "AS", "HA", "AP", "Average", "Ar", "I", "AA", "Ang", "AMI", "C", "F", "P", "API", "AF", "AB", "Input", "AC", "And", "AW", "M", "LA"], "B": ["U", "D", "Tab", "S", "R", "E", "LB", "BB", "T", "W", "Y", "L", "G", "NB", "PB", "OB", "File", "GB", "Bs", "Band", "Q", "BL", "DB", "WB", "I", "b", "X", "C", "SB", "V", "P", "AF", "BC", "AB", "O", "H", "M", "F", "Z"], "K": ["U", "KI", "KR", "D", "k", "S", "SK", "T", "KE", "W", "J", "Y", "OK", "G", "L", "NK", "Power", "KK", "Q", "PK", "I", "X", "C", " k", "V", "P", "Ke", "KA", "Sk", "Key", "KS", "KC", "H", "M", "O", "F", "AC", "Z"], "i": ["pi", "di", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "oi", "col", "a", "ie", "ori", "ind", "n", "ui", "ini", "ni", "bi", "id", "y", "h", "ix", "index", "ip", "multi", "eni", "si", "u", "iu", "fi", "e", "ti", "I", "f", "b", "ai", "z", "p", "qi", "l", "ii", "li", "io"], "Tashita": ["Tanitan", " Tashifa", "Tanit", "Kasheditic", " Tashara", "Tashingitan", "Toshitas", "Kasheditan", "Tashito", "Tashedita", "Tagita", "Tanitic", "Kashedit", "Tagito", "Tashitas", "Kashit", "Takito", "Takara", "Tashitan", "Tashit", " Takara", "Takit", "Tashifa", "Tashedit", "Tagara", "Trapita", "Kashita", "Tashingitic", "Trapara", "Tashitic", "Kashitic", "Tasheditic", "Toshiti", "Trapito", " Takito", "Toshit", "Tashiti", " Tashito", "Thoshita", "Thoshiti", "Tasheditas", "Takifa", " Takita", "Tagifa", "Takita", "Takiti", "Thashit", "Tanita", "Tashingit", "Kashedita", "Kashitan", "Takitas", "Tasheditan", "Thashitas", " Takifa", "Trapifa", "Thoshit", "Thashita", "Tashediti", "Tashingita", "Toshita", "Tashara", "Thoshitas", "Thashiti"]}}
{"code": "n, m, l = map(int, input().split())\\nA = [list(map(int, input().split())) for _ in range(n)]\\nB = [list(map(int, input().split())) for _ in range(m)]\\n\\nfor i in range(n):\\n    t = [str(sum([A[i][k] * B[k][j] for k in range(m)])) for j in range(l)]\\n    print(\" \".join(t))", "target": "684", "substitutes": {"n": ["el", "o", "x", "c", "d", "nb", "an", "s", "num", "y", "en", "h", "nn", "nl", "u", "len", "f", "nt", "b", "sn", "no", "q", "w", "z", "v", "ii", "r", "ln", "p", "ne", "N"], "m": ["o", "x", "c", "d", "a", "s", "range", "y", "g", "min", "en", "h", "ms", "cm", "model", "u", "f", "e", "mu", "b", "sm", "im", "w", "z", "v", "mean", "r", "li", "M", "ln", "p"], "l": ["el", "ls", "o", "ol", "al", "c", "d", "kl", "fl", "sl", "ll", "s", "L", "y", "g", "h", "nl", "u", "len", "f", "e", "b", "z", "v", "lc", "li", "ln", "p"], "A": ["AR", "As", "U", "D", "S", "E", "a", "CA", "T", "Y", "L", "G", "Am", "AS", "Ab", "Ar", "I", "AA", "X", "C", "MA", "V", "Ant", "P", "K", "AF", "API", "O", "H", "M", "AC", "F", "AAA", "N", "LA"], "_": ["out", "x", "name", "J", "all", "val", "ip", "len", "f", "q", "of", "p", "block"], "B": ["U", "D", "BS", "BM", "R", "E", "LB", "Ub", "BB", "T", "UB", "J", "BU", "Y", "L", "G", "PB", "OB", "GB", "BL", "Bs", "Q", "QB", "WB", "BER", "I", "b", "FB", "C", "SB", "BG", "Block", "MB", "V", "P", "AB", "O", "M", "F", "N"], "i": ["ik", "pi", "o", "ji", "x", "xi", "c", "ci", "d", "ijk", " ii", "int", "ind", "J", "bi", "id", "y", "ij", "ix", "jl", "jo", "si", "u", "iu", "f", "I", "b", "ki", "q", "ai", "z", "v", "ii", "li", "p"], "t": ["tp", "o", "dt", "at", "qt", "x", "tr", "tu", "tm", "c", "tool", "d", "tc", "ut", "T", "ot", "s", "tab", "y", "total", "rt", "g", "ts", "tt", "tz", "tf", "tools", "table", "unt", " T", "u", "e", "f", "tree", "b", "pt", "ta", "v", "r", "txt", "p"], "k": ["kj", "ik", "o", "kn", "ke", "x", "kk", "c", "d", "ind", "J", "ck", "kick", "y", "key", "sk", "h", "ok", "ks", "kid", "u", "f", "b", "ki", "q", "w", "kw", "z", "K", "v", "p", "km"], "j": ["kj", "ik", "it", "ji", "o", "js", " J", "x", "d", "ijk", "jc", "ie", "ind", "J", "id", "y", "key", "ij", "job", "jl", "jo", "ja", "f", "obj", "adj", "jj", "dj", "q", "z", "qi", "v", "jp", "ii", "li", "p", "uj"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport fractions\\nn = int(input())\\na = list(map(int, input().split()))\\n\\n\\nvalue = a[0]\\nfor i in range(1, n):\\n    value = fractions.gcd(value, a[i])\\nprint(value)\\n\\n", "target": "534", "substitutes": {}}
{"code": "N, M = map(int, input().split())\\nscores = [[] for _ in range(8)]\\n\\nfor i in range(N):\\n  x, y, z = map(int, input().split())\\n  scores[0].append(x+y+z)\\n  scores[1].append(x+y-z)\\n  scores[2].append(x-y+z)\\n  scores[3].append(-x+y+z)\\n  scores[4].append(x-y-z)\\n  scores[5].append(-x+y-z)\\n  scores[6].append(-x-y+z)\\n  scores[7].append(-x-y-z)\\n\\nmax_num = -1\\nfor i in range(8):\\n  tmp = scores[i]\\n  tmp.sort(reverse=True)\\n  sum_num = sum(tmp[:M])\\n  if max_num < sum_num:\\n    max_num = sum_num\\n\\nprint(max_num)", "target": "390", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "E", "B", "Ns", "T", "n", "W", "J", "Y", "A", "L", "G", "Num", "CNN", "NM", "NN", "MN", "Q", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "D", "S", "R", "E", "B", "T", "J", "Y", "A", "G", "L", "NM", "NN", "MS", "MN", "Q", "I", "X", "C", "V", "P", "MM", "K", "m", "O", "H", "Mi", "F", "Z"], "scores": ["descore", "escans", "ancore", "codes", "cales", "descodes", "scales", "ancores", "lcores", "corer", "ucors", "ancorer", "Scors", "Score", "SCors", " scorer", " scors", " scales", "scans", "Scores", "descores", "SCores", "clorer", "scors", "Scans", "scodes", "Scodes", "score", "clors", "ucore", "Scros", "cores", "lcorer", "escales", "descorer", "scorer", "ancors", "lcodes", "ucorer", "SCros", "Scorer", "ucores", "escors", "clodes", "escores", " scans", " scros", "descors", "clores", "scros", "SCorer", "lcales", "Scales", " score"], "_": ["ind", "n", "all", "num", " int", "g", "u", "f", "I", "p"], "i": ["pi", "it", "k", "j", "c", "gi", "ci", "d", " I", "a", "io", "int", "ind", "n", "num", "info", "id", "key", "h", "index", "ip", "multi", "si", "u", "iu", "e", "ti", "I", "f", "b", "mu", "ai", "p", "l", "v", "ii", "li", "ei", "r", "m"], "x": ["o", "k", "ya", "xi", "px", "plus", "c", "cy", "ci", "d", "xy", "a", "data", "int", "n", "num", "Y", "id", "key", "na", "gy", "ax", "yx", "h", "rx", "ix", "index", "ex", "xc", "u", "e", "dx", "max", "f", "b", "X", "xx", "my", "wx", "q", "w", "l", "cross", "ic", "m", "xs", "p", "zi"], "y": ["ey", "o", "wy", "sy", "hy", "iy", "ya", "j", "cy", "c", "ci", "d", "yi", "oy", "xy", "ky", "ie", "ry", "ny", "yo", "n", "Y", "ye", "zy", "yr", "dy", "ty", "gy", "ay", "ym", "py", "yt", "u", "e", "ys", "b", "yy", "l", "m", "sky", "vy"], "z": ["ze", "o", "j", "cy", "c", "d", "yi", "xy", "ry", "n", "zen", "yz", "iz", "zy", "Y", "t", "s", "gz", "nz", "dy", "h", "tz", "py", "cz", "za", "zh", "zip", "u", "f", "e", "b", "zx", "q", "w", "zone", "l", "v", "m", "zz", "zo", "zi", "Z"], "max_num": ["min_num", "min_n", "max_number", "Max_um", " max_sum", "sum_sum", "max_n", "max_sum", "max67mom", "min_sum", "max_mom", "sum_term", "max_um", "max67um", "sum_um", "max_nom", "max_term", " max_n", "max67num", "Max_nom", "max67nom", "Max_num", "Max_mom", "min_number"], "tmp": ["tp", "Temp", "bt", "j", "sp", "np", "slice", "nm", "current", "tc", "page", "sum", "output", "nb", "data", "copy", "app", "diff", "pos", "src", "vt", "cache", "rb", "buf", "result", "cmp", "test", "proc", "sample", "cp", "ctr", "source", "st", "treatment", "mp", "pp", "mu", "nt", "obj", "pot", "buff", "stuff", "resp", "sup", "new", "v", "jp", "duration", "storage", "dist", "txt", "now", "p", "temp"], "sum_num": ["sum_done", "sum__n", "max_done", "sum67n", "sum67max", "max_max", "sum2num", "sum__done", "sum_max", "max_nu", "sum_nu", "sum__num", "max_nom", "sum2n", "sum2nu", "sum_sum", "sum_n", "sum67nu", "sum67num", "sum2max", "sum__nom", "max_n", "max_sum", "sum_nom"]}}
{"code": "N = int(input())\\npos = [0,0]\\ntime = 0\\nfor _ in range(N):\\n    t,x,y = [int(i) for i in input().split()]\\n    d = abs(pos[0] - x) + abs(pos[1] - y)\\n    if d > t - time:\\n        print(\"No\")\\n        break\\n    elif (t - time - d)%2 != 0:\\n        print(\"No\")\\n        break\\n    pos = [x,y]\\n    time = t\\nelse:\\n    print(\"Yes\")", "target": "726", "substitutes": {"N": ["D", "S", "R", "NS", "B", "Ns", "T", "n", "W", "Y", "A", "L", "G", "Len", "Num", "NT", " n", "NN", "number", "No", "Q", "Length", "I", "X", "C", "NI", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "pos": ["unit", "part", "Pos", "loc", "o", "pid", "x", "trace", "axis", "response", "off", "d", "port", "point", "start", "temp", "int", "n", "po", "t", "i", "y", "on", "os", "val", "date", "offset", "POS", "index", "stat", "Position", "len", "size", "clock", "f", "neg", " position", "no", "pt", "w", "position", "P", "z", "state", " positions", "l", "length", "p", "up", "block", "pose"], "time": ["mode", "type", "step", "dt", "x", "Time", "c", "d", "tick", "event", "name", "data", "value", "start", "times", "n", "depth", "t", "i", "y", "sleep", " Time", "timeout", "cost", "dy", "ty", "h", "date", "live", "timer", "century", "frequency", "speed", "size", "clock", "tim", "e", " t", "am", "ime", "im", "delay", "position", "z", "w", "v", "duration", "length", "m", "now", "p", "money", "block", "rate"], "_": [" b", "k", " __", "x", " line", " p", "g", " j", " f", "f", " k", " q", "p"]}}
{"code": "from collections import Counter\\n\\ndef solve():\\n    N = int(input())\\n    D = list(map(int, input().split()))\\n\\n    mod = 998244353\\n\\n    if D[0] != 0:\\n        print(0)\\n        return\\n\\n    cnt = Counter(D)\\n\\n    if cnt[0] > 1:\\n        print(0)\\n        return\\n\\n    res = 1\\n\\n    for i in range(1, max(D)+1):\\n        if cnt[i-1] == 1:\\n            continue\\n        res *= cnt[i-1]**cnt[i] %mod\\n        res %= mod\\n    \\n    print(res)\\n\\nsolve()", "target": "480", "substitutes": {"N": ["U", "S", "Max", "R", "B", "T", "n", "J", "W", "num", "Y", "A", "L", "G", "Num", "NT", "number", "Count", "I", "X", "C", "V", "P", "K", "O", "M", "F", "Z"], "D": ["ND", "DT", "S", "Done", " d", "CD", "R", "d", "E", "Do", "LD", "Ds", "B", "T", "DO", "W", "DR", "Y", "JD", "DA", "L", "G", "DP", "DD", "DM", "DS", "MD", "Q", "DI", "DB", "I", "ORD", "X", "C", "DF", "V", "P", "DL", "O", "M", "F", "Z"], "mod": ["core", "mode", "step", "err", "x", "j", "exp", "c", "R", "d", "ver", "sum", "ac", "mult", "dec", "ind", "fun", "debug", "n", "num", " MOD", "s", "reg", "cache", "Y", "id", "result", "circ", "crit", "div", "min", "dim", "cor", "rem", "cond", "cm", "index", "PI", "comp", "row", "function", "max", "func", "X", "cum", " Mod", "MOD", "Mod", "q", "module", "init", "ID", "add", "rand", "grad", "complex", "m", "cd", "sign", "M", "rank"], "cnt": ["lcount", "connt", "lcwd", "conpt", "cwd", "lcnt", "Cnc", " cpt", "ecpt", "conounter", "scnt", "conrt", "ecwd", "lcpt", " counter", "scpt", "ecount", "rcount", "cnn", "ecct", "Cnn", "ecnn", "Cpt", "ecnt", "cnc", "lcct", "Cnt", "cct", "Count", "scounter", " cnc", "Cct", "rcnc", " count", " cnn", "lcnc", "rcnt", " crt", "counter", "cpt", "rcpt", " cwd", " cct", "crt", "scrt", "count"], "res": ["vec", "rs", "js", "rest", "Result", "Rs", "err", "exp", "response", "results", "ras", "sum", "sol", "re", "s", "progress", "mr", "reg", "RES", "range", "Res", "result", "details", "cs", "arr", "RE", "rc", "os", "css", "ret", "vals", "ES", "nos", "obj", "rev", "reset", "resp", " Res", "gr", "es", " results", "rex", "params", "cr", "ress", "rand", "Results", "r", "conf", "req", "ons", "resolution"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "gi", "c", "ci", "d", " I", "a", "start", "int", "ind", "n", "num", "ini", "ui", "t", "ni", "bi", "id", "y", "h", "ix", "index", "ip", "multi", "si", "u", "iu", "e", "I", "f", "ti", "b", "mi", "ai", "z", "qi", "l", "v", "ii", "li", "m", "p"]}}
{"code": "import copy\\ndef BubbleSort(C, N):\\n    for i in range(N):\\n        for j in reversed(range(i+1, N)):\\n            if C[j][1:2] <  C[j-1][1:2]:\\n                C[j], C[j-1] = C[j-1], C[j]\\n\\n    print(*C)\\n    stableCheck(C, N)\\n\\ndef SelectionSort(C, N):\\n    for i in range(N):\\n        minj = i\\n        for j in range(i, N):\\n            if C[j][1:2] <  C[minj][1:2]:\\n                minj = j\\n        C[i], C[minj] = C[minj], C[i]\\n    print(*C)\\n    stableCheck(C, N)\\n\\ndef stableCheck(C, N):\\n    global lst\\n    flag = 1\\n    for i in range(N):\\n        for j in range(i+1, N):\\n            if lst[i][1:2] == lst[j][1:2]:\\n                fir = lst[i]\\n                sec = lst[j]\\n                for k in range(N):\\n                    if C[k] == fir:\\n                        recf = k\\n\\n                    if C[k] == sec:\\n                        recs = k\\n                \\n                if recf > recs:\\n                    print(\"Not stable\")\\n                    flag = 0\\n                    break\\n        \\n        if flag ==0:\\n            break\\n\\n    if flag :\\n        print(\"Stable\")\\n\\nN = int(input())\\nlst = list(map(str, input().split()))\\nlst1 = copy.deepcopy(lst)\\nlst2 = copy.deepcopy(lst)\\n\\nBubbleSort(lst1, N)\\nSelectionSort(lst2, N)\\n", "target": "30", "substitutes": {"C": ["U", "CI", "Configuration", "D", "S", "Control", "CN", "KC", "c", "R", "E", "CT", "NC", "Cons", "B", "CA", "T", "GC", "W", "Y", "CU", "L", "G", "EC", "A", "You", "CNN", "CM", "UC", "Call", "Chain", "Co", "YC", "JC", "Q", " c", "Core", "SC", "Central", "Count", "I", "X", "Sc", "CV", "DC", "V", "Cache", "P", "CC", "MC", "CR", "K", "Cs", "Code", "VC", "CP", "Ch", "O", "H", "M", "Cu", "F", "Context", "AC", "Custom", "CE", "Config", "CL"], "N": ["U", "Node", "NA", "D", "S", "CN", "Network", "Net", "GN", "NV", "R", "NS", "NC", "NE", "NL", "B", "Ns", "T", "n", "W", "NH", "J", "Main", "Y", "Ni", "L", "G", "Len", "Num", "NB", "CNN", "NT", "NM", "Size", " n", "network", "NN", "MN", "No", "Q", "Core", "I", "X", "NO", "NI", "Ne", "Na", "NG", "RN", "V", "P", "Copy", "K", "Nat", "KN", "NP", "O", "H", "M", "F", "Name", "Z"], "i": ["ik", "pi", "di", "ji", "o", "uri", "mini", "x", "xi", "gi", "c", "ci", "d", "yi", "ri", "phi", "a", "ie", "ori", "int", "ind", "n", "J", "ui", "ini", "ni", "bi", "id", "y", "zi", "ir", "ia", "index", "ip", "eni", "si", "u", "iu", "e", "I", "f", "b", "mi", "ki", "im", "ai", "z", "p", "qi", "l", "v", "ii", "ic", "li", "m", "jp", "io", "vi"], "j": ["it", "c", "jit", "bi", "jan", "h", "ion", "job", "jl", "next", "f", "end", "jj", "z", "jp", "m", "p", "ji", "part", "js", "x", "d", "jc", "a", "oj", "range", "ch", "y", "ix", "py", "jo", "br", "ja", "max", "jam", "ii", "li", "r", "uj", "ie", "int", "ind", "n", "J", "s", "bj", "index", "u", "e", "adj", "new", "dj", "qi", "l", "v", "aj", "o", "ui", "key", "g", "ij", "si", "jet", "je", "obj", "b", "q"], "minj": ["mini", "maxi", "donje", "smallje", "smalluj", "donj", "prin", "mainv", "smallJ", "manje", "smallja", " mini", "maxuj", "priv", " minuj", "minf", "maxj", "smallji", "minji", "minz", "midv", "priz", "Minji", "mainj", "pril", "prii", "donja", "minl", "donJ", "midl", "minuj", "winuj", "maxz", "prij", " minji", "maxn", "manJ", "mainl", "minja", "minJ", " minja", "manja", "winji", "winja", "Minuj", "midf", "Mini", "maxji", "minje", "smallj", "manj", "Minn", "Minz", "minv", "mainf", "winj", "Minj", "midj", "prif", "minn"], "flag": ["file", "log", "type", "part", "sy", "sync", " flags", "ar", "feature", "lag", "bug", "start", "int", "flags", "long", "all", "option", "year", "id", "key", "force", "FLAG", "date", "ok", "command", "ret", "big", "line", "py", "age", "bit", "ag", "error", "char", "star", "disabled", "f", "sun", "code", "match", "store", "status", "standard", "no", "kind", "tag", "sign", "style", "skip", " border", "cat", "Flag", "group", "level", "arg", "count"], "fir": [" firs", "fIR", "Frir", "firs", "rfIR", " fIR", " firt", "pirs", "rfirt", "virt", "prir", " frir", "Fir", "Filler", "pir", "piller", "firt", "rfirs", "vir", "frir", "filler", "rfir", "virs", "vIR", "Firs", " filler"], "sec": ["loc", "sy", "ced", "sync", "c", "sci", "esc", "ac", "const", "bc", "inc", "reg", "secure", "cs", "ec", "key", "offset", "ct", "seq", "f", "secret", "ns", "rec", "inf", "desc", "frac", "z", "SEC", "sc", "conf", "security", "se", "isec", "Sec", "km", "seconds", "enc"], "k": ["ik", "o", "kn", "ke", "x", "kk", "c", "d", "n", "ck", "s", "ch", "id", "y", "cs", "key", "kg", "sk", "g", "h", "ok", "ks", "kid", "co", "ko", "u", "spec", "f", "e", "end", "b", "ki", "rec", "q", "w", "kw", "z", "K", "l", "v", "sc", "m", "r", "p", "ku"], "recf": ["reflow", " recif", "recfe", "Recf", "revf", "RecF", " recflow", "recif", "preF", "refe", "revflow", "recflow", "refs", "revfe", " recF", "revfs", "recfs", " recfe", " recfs", "preif", "Recfs", "Recif", "prefs", "ref", "recF", "pref"], "recs": ["prens", "breks", "brebs", "renks", "Rens", " reps", "conks", "Refs", "rebs", "confs", "brecs", "rencs", "brefs", "Recs", "rens", "concs", "refs", "renfs", "reks", "Reps", "preps", "renbs", "precs", "reps", "prefs", "conbs", " rens", " refs"], "lst": ["lste", "rst", "ylst", "ylstr", " lsc", "llST", "elsc", "lcr", "Lstable", "llst", " lbl", "ilst", "elbl", "llcr", "ilbl", "ilstable", "llbl", "Lbl", "LST", "lbl", "Lste", "Lst", "lST", "rcr", "ylste", "rST", "ylbl", " lste", "elstr", " lcr", "lstable", "llstable", " lST", "lsc", "lstr", "llstr", "ilstr", "llsc", "Lstr", "elST", "rbl", " lstr", "elst"], "lst1": ["lST1", "lbl2", "lstrn", "lbl1", "lSTn", " lstr3", " lstrone", "lblone", "lstr1", "lSTone", "lbln", "lST3", "lst3", "lstrone", "lST2", " lstrn", " lstr2", "lstr3", "lstn", " lst3", " lstn", " lstr1", "lstr2", "lstone", "lbl3", " lstone"], "lst2": ["lSt2", "lbl2", "elblTwo", "lSTTwo", "lbl1", "lSTtwo", " lSTTwo", "lctTwo", " lST02", "lscTwo", "lst02", "elstTwo", "lstr1", "lct1", " lSTtwo", "elst2", "elbl2", "elst1", " lST2", "lblTwo", "lST2", "lsttwo", "lsctwo", "lstrTwo", "lSt02", "lstTwo", "lStTwo", " lstTwo", "lct2", " lsttwo", "lSttwo", "lST02", "elbl1", " lst02", "lstr2", "lsc2", "lsc02"]}}
{"code": "N, X, T = [int(i) for i in input().split()]\\n \\nq, r = divmod(N, X)\\n \\noutput = 0\\nif r > 0:\\n    output = (q+1) * T\\nelse :\\n    output = q * T\\n    \\nprint(output)", "target": "105", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "E", "B", "Ns", "n", "W", "Y", "A", "L", "G", "NT", "NM", "NN", "Q", "I", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "X": ["U", "D", "S", "x", "R", "E", "XX", "B", "W", "J", "Y", "L", "G", " x", "Q", "I", "C", "XL", "TX", "V", "P", "XP", "K", "O", "XXX", "IX", "M", "H", "F", "XM", "Z"], "T": ["U", "TW", "FT", "D", "S", "TN", "R", "E", "B", "TS", "TB", "W", "TE", "Y", "t", "L", "UT", "NT", "TA", "TR", "Q", "WT", "IT", "C", "TT", "TX", "V", "P", "K", "TH", "O", "H", "M", "F", "Z"], "i": ["pi", "di", "uri", "x", "xi", "j", "idi", "gi", "c", "ci", "d", "ri", "phi", " I", "a", " ii", "int", "ind", " iP", "ini", "t", "bi", "id", " il", "ix", "ip", "bit", " c", "si", "iii", "u", "iu", "e", "ti", "I", "f", "mi", "z", "v", "ii", "li", "p"], "q": ["o", "k", "qt", "x", "input", "c", "R", "d", "int", "n", "qs", "quant", "t", "id", "y", "iq", "g", "qa", "h", "query", "quad", "Q", "eq", "sq", "u", "f", "max", "C", "qq", "w", "P", "z", "v", "length", "m", "p", "req", "qu", "dq", "count"], "r": ["rs", "o", "err", " R", "j", "c", "er", "R", "ar", "d", "n", "re", "rb", "t", "result", "g", "rg", "ir", "h", "lr", "error", "ur", "nr", "e", "rr", "res", "b", "cr", "v", "m", "right", "ru", "p", "rc", "sr"], "output": ["unit", "core", "o", "control", "out", "input", "reference", "response", "value", "complete", "expression", "print", "double", "config", "update", "weight", "result", "display", "wave", "alpha", "sort", "width", "round", "prefix", "cost", "image", "offset", "network", "beta", "number", "write", "error", "dot", "production", "function", "final", "foo", "default", "resource", "outer", "Output", "summary", "filter", "text", "information"]}}
{"code": "N = int(input())\\n\\nprint(N * 2 if N % 2 == 1 else N)", "target": "762", "substitutes": {"N": ["Node", "NA", "TW", "D", "S", "GN", "R", "NS", "E", "NL", "B", "Ns", "T", "n", "J", "W", "Y", "L", "G", "Num", "NB", "Index", "NT", " n", "NN", "Q", "I", "X", "C", "Ne", "V", "P", "K", "Sum", "O", "H", "M", "F", "Z"]}}
{"code": "import itertools\\nN, C = map(int, input().split())\\nX = []\\nV = []\\nfor n in range(N):\\n    x, v = map(int,input().split())\\n    X.append(x)\\n    V.append(v)\\nXr = X[::-1]\\nVr = V[::-1]\\nXl = [0] + X\\nVl = [0] + V\\nXr = [0] + [C-x for x in Xr] # \u9006\u306b\u56de\u308b\u306e\u3067C\u304b\u3089\u5f15\u304f\\nVr = [0] + Vr\\n\\nVl = list(itertools.accumulate(Vl)) # x\u306f\u7d2f\u7a4d\u3057\u305f\u5024\u306a\u306e\u3067\u3001v\u3082\u7d2f\u7a4d\u548c\u306b\u7d71\u4e00\\nVr = list(itertools.accumulate(Vr))\\n\\ndef update_mx(ls):\\n    mx = 0\\n    for i in range(len(ls)):\\n        mx = max(mx, ls[i])\\n        ls[i] = mx\\n    return ls\\n\\ndef create(V,X,k):\\n    ls = []\\n    for n in range(N+1):\\n        ls.append(V[n]-k*X[n]) # \u5f80\u5fa9\u3059\u308b\u5834\u5408\u306fk=2\\n    return update_mx(ls)\\n\\nL = create(Vl,Xl,1) # \u6700\u826f\u306e\u5024[\u5de6\u7aef\u3068\u3057\u3066\u8a31\u5bb9\u3055\u308c\u308b\u4f4d\u7f6e]\uff08\u7247\u9053\uff09\\nLt = create(Vl,Xl,2) # \u6700\u826f\u306e\u5024[\u5de6\u7aef\u3068\u3057\u3066\u8a31\u5bb9\u3055\u308c\u308b\u4f4d\u7f6e]\uff08\u5f80\u5fa9\uff09\\nR = create(Vr,Xr,1)\\nRt = create(Vr,Xr,2)\\n\\nans = 0\\nfor n in range(N+1):\\n    #print (n,N-n)\\n    ans = max(ans, Lt[n] + R[N-n])\\n    ans = max(ans, Rt[n] + L[N-n])\\nprint (ans)\\n    \\n", "target": "127", "substitutes": {"N": ["U", "D", "S", "Max", "R", "NS", "E", "B", "Ns", "T", "Y", "A", "L", "G", "CNN", "NT", "Size", "No", "Q", "I", "Ne", "RN", "P", "K", "KN", "O", "H", "M", "F", "Z"], "C": ["U", "CI", "D", "S", "CN", "c", "R", "E", "NC", "B", "T", "W", "Y", "CU", "L", "G", "Size", "YC", " c", "Q", "I", "P", "CC", "K", "CR", "Cs", "O", "Cu", "M", "F", "CM", "Z"], "X": ["U", "D", "S", "ZX", "CL", "Time", "R", "Do", "E", "XX", "XT", "B", "RH", "T", "W", "Y", "A", "L", "DX", "G", "EL", "Single", "IP", "UX", "Ex", "Q", "WS", "I", "CE", "XY", "PE", "XL", "TX", "Cross", "ML", "P", "XP", "K", "CR", "EX", "XXX", "H", "IX", "M", "F", "Right", "Z"], "V": ["U", "UL", "II", "D", "S", "VL", "NV", "R", "E", "B", "T", "W", "J", "IV", "Y", "VD", "G", "L", "Vi", "VB", "UV", "GV", "VI", "Q", "AV", "I", "VER", "VA", "VP", "P", "VM", "CV", "TV", "K", "VC", "VT", "M", "H", "F", "VE", "VS"], "n": ["j", "c", "np", "nb", "a", "nd", "int", "ind", "num", "t", "i", "na", "nn", "nu", " c", "u", "nt", "f", " ng", "r", "nc"], "x": ["ext", "k", "xp", "xi", "_", "c", "cy", "ci", "d", "int", "Y", "i", "y", "test", "tx", "g", "ax", "h", "xt", "yx", "sex", "rx", "ct", "abc", "ix", "fx", "index", "st", "ex", "xc", "u", "e", "f", "dx", "xd", "max", "xx", "xf", "xes", "q", "w", "z", "l", "ic", "cross", "r", "xs", "cent", "p", "pe", "cl"], "v": ["U", "o", "ve", "j", "uv", "c", "d", "vv", "vs", "s", "i", "y", "g", "val", "tv", "lv", "u", "f", "e", "b", "vd", "ev", "w", "sv", "z", "vol", "nv", "l", "r", "m", "p", "vi"], "Xr": ["Yp", "Ql", "Xc", "xp", " Xp", "Yr", " xR", "Vb", "Qr", " Xb", "YR", "Xp", " xp", "xc", "Yc", "Qc", " xr", " xc", "QR", "Yl", "xR", "Yb", " XR", " Xc", "Vp", "XR", "Xb", "xr"], "Vr": ["Vv", "Yp", "Yr", "Xrc", " Vrc", " Vv", "Xp", " Vp", "Vp", "Vrc", "Yv", "Xv", "Yrc"], "Xl": ["Yr", "Yl", "XL", " XL", "Zr", " Xh", "Xh", "Yh", "YL", "Zh", "Zl", "ZL"], "Vl": ["Vc", "LL", "vr", "vl", "vc", "RL", "Lr", "VL", "Lc", "Rc", "vL", "Rr", "Rl", "Ll"]}}
{"code": "import sys\\nH,W = map(int,input().split())\\nif H < 0 or H > 100 or W < 0 or H > 100:\\n    sys.exit()\\npixeles = []\\nfor I in range(H):\\n    pixeles.append(str(input()))\\n\\nprint(\"#\"*(W+2))\\nfor L in pixeles:\\n    print(\"#\",end='')\\n    print(L,end='')\\n    print(\"#\")\\nprint(\"#\"*(W+2))\\n", "target": "133", "substitutes": {"H": ["U", "SH", " h", "HT", "S", "HD", "HR", "He", "R", "HC", "E", "Hi", "HP", "B", "RH", "OH", "T", "HH", "HB", "NH", "Y", "G", "Wh", "HA", "EH", "h", "HS", "Q", "Ha", "WH", "HY", "X", "C", "MH", "HI", "V", "P", "K", "AH", "O", "M", "DH", "F", "N", "Z"], "W": ["U", "GW", "SH", "WI", "TW", "D", "S", "RW", "E", "WF", "B", "WR", "T", "EW", "Y", "G", "Wh", "WP", "DW", "WW", "h", "NW", "FW", "Q", "WH", "WC", "WS", "WB", "Length", "X", "SW", "C", "Win", "V", "w", "P", "We", "K", "MW", "O", "M", "WD", "F", "WE", "VW", "N", "Z"], "pixeles": ["PixelEs", "ciles", "ixeles", " pixele", " pixelES", "pixelies", "cillines", "imagees", " pixelEs", "localEs", " pixelxes", "cilies", "imageES", "imagexes", "pixelES", "cilES", "localES", "ixellines", "pixele", "ixelies", "Pixeles", "pixelEs", "localed", " pixeled", "pixellines", "pixelxes", "locales", "ixelxes", "Pixeled", "imagee", "PixelES", "pixeled", " pixelies", "ixele", " pixellines", "ixelES"], "I": ["II", "D", "k", " N", "T", "J", "SI", "Y", "A", "G", "IL", "i", "IP", "PI", "Q", "X", "C", "IJ", "K", "ID", "p", "l", "O", "li", "M", "F", "N", "Z"], "L": ["U", "LM", "D", "S", "R", "E", "NL", "Line", "B", "T", "Y", "LI", "A", "G", "LP", "SL", "LE", " l", "Q", "LT", "X", "C", "Lu", "V", "P", "K", "l", "DL", "O", "M", "LA", "F", "N", "Z"]}}
{"code": "t = int(input())\\nprint(48 - t)", "target": "676", "substitutes": {"t": ["o", "tp", "dt", "qt", "x", "c", "d", "tick", "T", "int", "n", "s", "i", "y", "test", "time", "tty", "g", "h", "ts", "tz", "tf", "title", " T", "f", "tree", "e", "b", "w", "ta", "l", "template", "v", "m", "p", "task", "token"]}}
{"code": "# coding: utf-8\\nimport sys\\nfrom heapq import heapify, heappop, heappush\\n\\nsr = lambda: sys.stdin.readline().rstrip()\\nir = lambda: int(sr())\\nlr = lambda: list(map(int, sr().split()))\\n\\n# x * x\u3092\u3069\u3046\u8a55\u4fa1\u3059\u308b\u304b\u3001heap\u306b\u300c\u304a\u3044\u3057\u3055\u300d\u306e\u9ad8\u3044\u9806\u306b\u5165\u308c\u3066\u3044\u304f\\nN, K = lr()\\nTD = [lr() for _ in range(N)]\\nheap = []\\nkind = 0\\nhappy = 0\\nused = set()\\nTD.sort(key=lambda x: x[1], reverse=True)\\nfor t, d in TD[:K]:\\n    if t not in used:\\n        used.add(t)\\n        kind += 1\\n    else:\\n        heappush(heap, d)\\n    happy += d\\n\\ncand = [happy+kind**2]\\nfor t, d in TD[K:]:\\n    if not heap:\\n        break\\n    if t in used:\\n        continue\\n    h = heappop(heap)\\n    happy += (d-h)\\n    kind += 1\\n    used.add(t)\\n    cand.append(happy+kind**2)\\n\\nanswer = max(cand)\\nprint(answer)\\n", "target": "466", "substitutes": {}}
{"code": "import heapq\\nX,Y,Z,K = map(int,input().split())\\n\\nlimit = [X,Y,Z]\\n\\nnums = []\\nheapq.heapify(nums)\\nnum = 0\\nabc = [[] for i in range(3)]\\n\\nfor i in range(3):\\n  abc[i] = sorted(list(map(int,input().split())),reverse = True)\\n  num += abc[i][0] * -1\\n  \\nheapq.heappush(nums,[num,0,0,0])\\nyet = []\\n\\nfor i in range(K):\\n  M = heapq.heappop(nums)\\n  for j in range(3):\\n    ID = M[1:]\\n    ID[j] += 1\\n    if ID[j] < limit[j]:\\n      a = ID[0]\\n      b = ID[1]\\n      c = ID[2]\\n      m = (abc[0][a] + abc[1][b] + abc[2][c]) * - 1\\n      if ID not in yet:\\n        heapq.heappush(nums,[m,a,b,c])\\n        yet.append(ID)\\n  print(M[0] * -1)\\n  \\n", "target": "403", "substitutes": {"X": ["U", "D", "S", "ZX", "CL", "x", "Time", "XX", "NC", "W", "J", "A", "G", "L", "KK", " x", "Co", "Q", "Work", "I", "XY", "C", "XL", "TX", "V", "P", "XP", "H", "IX", "F", "CH", "N"], "Y": ["NY", "MY", "D", "S", "E", "SK", "SY", "XX", "B", "T", "W", "J", "A", "G", "L", "y", "YR", "YC", "Q", "I", "XY", "My", "C", "TX", "V", "P", "YA", "H", "YY", "F", "N"], "Z": ["SH", "D", "ZX", "CL", "SK", "ZA", "Zip", "B", "T", "FL", "W", "J", "Az", "A", "L", "ZI", "ZE", "IP", "ZZ", "Q", "C", "Zone", "V", "FF", "P", "z", "EC", "H", "YY", "F", "N"], "K": ["U", "D", "k", "S", "SK", "E", "B", "T", "W", "J", "L", "G", "NB", "KK", "HK", "Q", "PK", "C", "DC", "V", "P", "KS", "KC", "H", "O", "F", "CH", "N"], "limit": ["lim", "unit", "loc", "Limit", "page", "phi", "pos", "limits", "n", "list", "inc", "range", "L", "id", "LP", "stop", "SIZE", "iter", "MAX", "index", "number", "Q", "zip", "size", "len", "N", "max", "end", "shape", "V", "position", "limited", "length", "skip", "order", "F", "block", "count"], "nums": ["nonuma", "Nums", "coms", " numa", "lenummies", " noms", " nubs", "lenumbers", "nonumeric", "cums", "lenubs", "nubs", "Num", " numeric", "Nubs", "Numbers", "Nummies", "nummies", "cumbers", "Noms", "numa", "noms", "pnuma", "pnums", "numeric", "cum", "pnumeric", "nonumbers", "pnumbers", "nonums", " nummies", "lenums", "numbers", "cubs", " numbers"], "num": ["loc", "common", "su", "um", "np", "om", "nb", "sum", "mult", "int", "n", "valid", "inc", "Num", "id", "circ", "result", "split", "uni", "mn", "con", "dim", "offset", "ident", "un", "index", "number", "nu", "umi", "multi", "norm", "u", "len", "lam", "N", "nt", "f", "nom", "fn", "max", "mu", "NUM", "im", "conf", "miss", "gen", "count"], "abc": ["area", "acl", "ac", "uc", "af", "abs", "rb", " ab", "bi", "ec", "exc", "dc", "aa", "arc", "icc", "CC", "lc", "oc", "p", "enc", "au", "loc", "abb", "x", "um", "org", "Rec", "ab", "BBC", "id", "lab", "fb", "erc", "seq", "lam", "occ", "auc", "cb", "coll", "n", "anc", "array", "A", "ACA", "ignore", "circ", "alpha", "url", "ib", " ABC", "ABC", "rec", "ic", "AC", "ums", "RC", "case", "mc", "amin", "bc", "aux", "fc", "inc", "arr", "ai", "AB", "lib", "conf", "bb", "rc", "asc"], "i": ["pi", "di", "o", "ji", "k", "x", "xi", "gi", "ci", "yi", "io", "ie", "cli", "int", "ind", "n", "ini", "ui", "t", "ni", "bi", "id", "y", "ij", "ix", "index", "ip", "multi", "si", "iii", "u", "iu", "f", "ti", "I", "e", "q", "ai", "z", "qi", "l", "v", "ii", "li", "ei", "abi", "p"], "yet": ["thanks", "auto", "compatible", "common", "Tab", "closed", "sync", "su", "pg", "connection", "compl", "np", "wrong", "ready", "currently", "current", "close", "existing", "despite", "depending", "below", "Except", "why", "meta", "list", "array", "progress", "though", "well", "stop", "client", "Yet", "again", "ib", "ident", "job", "cm", "tmp", "yeah", "null", "who", " though", "but", "still", "problem", "mp", "imp", "qq", "ai", "ae", " Yet", "jp", "found", "length", "Currently", "specific", "now", "p", "there", "see", "fp"], "M": ["U", "MO", "LM", "D", "R", "B", "T", "GM", "J", "A", "G", "L", "AM", "MU", "DM", "NM", "MD", "MS", "MN", "Q", "ME", "MR", "C", "MA", "TM", "JM", "MH", "V", "MB", "P", "MM", "MC", "VM", "MT", "MX", "O", "H", "Mi", "F", "MP", "CM", "MF", "N"], "j": ["kj", "ji", "o", "js", "k", "x", "d", "jc", "ind", "n", "J", "uj", "ch", "id", "y", "key", "g", "ij", "jl", "ip", "u", "ja", "f", "I", "e", "adj", "jj", "q", "z", "l", "jp", "v", "ii", "li", "r", "aj", "p"], "ID": ["Result", "Sub", "NS", "B", "AD", "String", "INT", "JSON", "NM", "MS", "BI", "IO", "Count", "I", "CC", "R", "GMT", "UN", "GM", "MAC", "G", "IL", "IN", "id", "Num", "MD", "NUM", "HI", "ML", "Code", "API", "H", "ND", "LM", "D", "UID", "IDs", "IG", "aid", "URI", "J", "A", "KK", "Msg", "Member", "Q", "PK", "Id", "Length", "IT", "C", "member", "TM", "MH", "IR", "V", "END", "AC", "URL", "CI", "RC", "ASC", "IDS", "IDE", "Index", "IP", "number", "AV", "Number", "MI", "P", "MIN", "CV", "Mi", "F", "N", "CL"], "a": ["ma", "area", "o", "k", "x", "d", "ak", "ama", "ab", "ac", "app", "pa", "n", "da", "an", "A", "y", "api", "sa", "ah", "ia", "aa", "la", "u", "va", "oa", "f", "e", "am", "ad", "ca", "ga", "ai", "ae", "aaa", "ba", "aj", "p"], "b": ["o", "eb", "k", "mb", "x", "db", "d", "cb", "ab", "amb", "B", "bc", "n", "s", "A", "rb", "bi", "y", "bs", "h", "fb", "ib", "aa", "u", "lb", "e", "f", "ca", "ae", "be", "ba", "l", "v", "r", "bb", "bf", "p"], "c": ["k", "x", "cy", "ci", "d", "ac", "bc", "n", "cc", "ch", "cs", "y", "g", "con", "h", "ct", "cm", "dc", "u", "f", "e", "ca", "C", "q", "w", "z", "l", "v", "lc", "r", "cf", "p"], "m": ["o", "mc", "x", "um", "fm", "gm", "d", "n", "mr", "man", "id", "y", "g", "h", "ym", "md", "cm", "u", "f", "e", "mu", "am", "mi", "im", "pm", "dm", "l", "v", "r", "p", "bm"]}}
{"code": "x, y = (int(a) for a in input().split())\\nfoot = 0\\ny_tmp = y\\ny_tmp2 = y\\n\\nfor i in range(x):\\n    y_tmp -= 2 * i + 4 * (x - i)\\n    y_tmp2 -= 4 * i + 2 * (x - i)\\n    if y_tmp == 0 or y_tmp2 == 0:\\n        print('Yes')\\n        exit()\\n    else:\\n        y_tmp = y\\n        y_tmp2 = y\\n\\nprint('No')", "target": "190", "substitutes": {"x": ["k", "ya", "input", "px", "c", "d", "xy", "wa", "pixel", "int", "n", "s", "t", "width", "time", "xxx", "h", "rx", "ix", "index", "ex", "xc", "u", "e", "max", "one", "f", "b", "X", "xx", "xf", "no", "q", "w", "z", "v", "l", "m", "xs", "p"], "y": ["ey", "yu", "o", "sy", "ya", "out", "j", "cy", "c", "d", "yi", "oy", "ky", "ry", "yo", "n", "s", "Y", "t", "dy", "ty", "h", "ay", "ym", "py", "yt", "u", "e", "f", "b", "uy", "yy", "no", "q", "z", "w", "v", "l", "hot", "m", "p", "sky", "vy"], "a": ["area", "o", "ya", "c", "ar", "d", "ab", "wa", "ac", "int", "n", "an", "s", "A", "t", "alpha", "na", "sa", "ia", "ix", "aa", "va", "f", "b", "am", "ad", "code", "ai", "w", "ae", "z", "ba", "l", "m", "p"], "foot": ["pi", "o", "xi", "j", "c", "col", "lo", "pos", "go", "s", "h", "index", "f", "e", "I", "qq", "im", "w", "m"], "y_tmp": [" y_txt", "y_cmp", "y__temp", "yPproc", "yJtxt", "y_temp", "x_mp", "yJspace", " y_beta", "y_vt", "y_beta", "yJproc", "yJtmp", "y_txt", "y_mp", "yPtxt", "y_const", " y_temp", " y_cmp", "y__tmp", "y_space", "x_tmp", "yPspace", " y_space", "yPtmp", " y_proc", "y_proc", "y__mp", "x_const", " y_vt", "y__const", " y_mp", "x_temp"], "y_tmp2": ["y_temp10", "y_zip1", "y_txt2", "y_temp_", "y_tmp10", "y_cmp1", "y_beta_", "y_source1", "y_mp_", "y_zip2", "y_cmp4", "y_mp2", "y_mp4", "y_beta1", "y_mp1", "y_fake2", "y_tmp4", "y_tmp_", "y_beta2", "y_cmp2", "y_fake1", "y_temp2", "y_txt10", "y_temp1", "y_tmp1", "y_txt_", "y_temp4", "y_zip_", "y_zip4", "y_source2", "y_txt1", "y_beta10"], "i": ["pi", "it", "xi", "j", "c", "ci", "d", "yi", "phi", "ie", "int", "ind", "n", "ini", "t", "id", "h", "ix", "ia", "index", "ip", "si", "u", "iu", "f", "I", "e", "ti", "b", "mi", "hi", "im", "ai", "w", "z", "p", "v", "l", "ii", "m", "ei", "li"]}}
{"code": "n=int(input())\\nif n>2 and n%2!=0:\\n    n-=1\\ncnt=1\\nans=n\\nfor i in range(1,n+1)[::-2]:\\n    j=i\\n    tmp=0\\n    while j>0 and j%2==0:\\n        tmp+=1\\n        j=j//2\\n    if tmp > cnt:\\n        cnt=tmp\\n        ans=i\\nprint(ans)", "target": "733", "substitutes": {"n": ["o", "cn", "k", "x", "c", "np", "d", "nm", "nb", "ny", "int", "ot", "s", "num", "an", "t", "ni", "y", "nw", "na", "g", "en", "network", "nn", "nu", "nit", "nr", "u", "net", "fn", "f", "nt", "e", "b", "ns", "pn", "sn", "no", "z", "l", "v", "zn", "m", "r", "nc", "p", "ne", "N", "conn"], "cnt": ["lcount", "ncnt", "cannot", "CNT", "ncct", "ccount", "pcct", "pcnn", "Cnc", "lcnt", "ucannot", " ccount", "Cannot", "crt", "lcNT", "cnn", "Crt", " cannot", "ucnt", "cnc", "Cnt", "Count", "cct", "pcnt", "cNT", " cnc", "ncnn", " count", " cnn", "lcnc", "pccount", "ucrt", " crt", "ucNT", " cct", "nccount", " cNT", "count"], "ans": ["offs", "ls", "part", "parts", "case", "ANN", "Ann", "news", " ants", "x", "nas", "aos", "reads", "jon", "ants", "art", "ss", "amps", "ens", "args", "an", "s", "anc", "cs", "cmp", "sk", "CNN", "na", "annot", "ds", "nan", "nn", "ana", "lines", "AN", "cas", "anne", "ANS", "ann", "lan", "ns", "sn", "ani", "ai", "bps", "ano", "xs", "acs", "eps", "ln", "aus", "ons"], "i": ["mini", "pi", "it", "x", "xi", "c", "ci", "d", "a", "io", "ie", "int", "ind", "ini", "t", "ni", "id", "y", "ij", "h", "index", "ip", "si", "u", "iu", "pre", "f", "I", "ti", "e", "b", "ai", "init", "z", "l", "v", "ii", "li", "r", "m", "p", "count"], "j": ["ji", "o", "js", "k", "x", "c", "d", "a", "jon", " ii", " p", "start", "pos", "oj", "J", "uj", "ot", "ind", "num", "t", "y", " dj", "g", "ij", "bj", "job", "jl", "index", "jo", "ja", "f", "jet", "nt", "obj", "b", "jj", "adj", "ann", "pt", "dj", "z", "v", "l", "jp", "aj", "m", "r", "p", "temp"], "tmp": ["area", "mini", "part", "ott", "kk", "np", "nm", "img", "nb", "a", "ie", "start", "mult", "int", "ot", "array", "t", "rb", "ignore", "cmp", "test", "y", "xt", "offset", "cp", "nn", "ctr", "span", "beta", "next", "batch", "si", "mp", "nom", "size", "pre", "nt", "obj", "adj", "am", "jj", "b", "sup", "mm", "qq", "pt", "ai", "z", "v", "jp", "aj", "now", "p", "temp", "count"]}}
{"code": "N=int(input())\\nans=0\\nfor _ in range(N):\\n    a,b=map(int,input().split())\\n    ans+=abs(a-b)+1\\nprint(ans)", "target": "720", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "NC", "B", "Ns", "T", "n", "Y", "A", "Ni", "L", "Len", "Num", "CNN", " n", "NN", "MN", "No", "AN", "I", "Number", "X", "ns", "NO", "C", "NI", "Na", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "ans": ["aves", "offs", "NA", "nas", "ins", "ants", "Ns", "amps", "anch", "ens", "n", "an", "s", "anc", "A", "man", " means", "ats", "asts", "ents", "ches", "anon", "sk", "na", "os", "anas", "ds", "ks", "nan", "ids", "ana", "span", "can", "anes", "cons", "AN", "atan", "aned", "leans", "anne", "ANS", "cas", "acts", "ann", "lan", "ns", "scan", "ends", "works", "ani", "ano", "mean", "ace", "ons"], "_": [" __", "j", " times", " I", " g", " time", "num", "g", " j", "I"], "a": ["ma", "auto", "x", "c", "aw", "ab", "ac", "B", "af", "n", "mA", "da", "abs", "an", "A", "i", "y", "sa", "ia", "aa", "la", "u", "va", "f", "am", "ad", "ca", "ga", "ai", "ae", "asa", "ba", "l", "aj", "p", "au"], "b": ["eb", "c", "d", "ob", "nb", "ab", "B", "n", "abs", "s", "rb", "bi", "i", "y", "bs", "fb", "aa", "Bs", "wb", "lb", "f", "e", "base", " B", "sb", "ba", "l", "v", "m", "bf", "bb", "r", "p", "bp"]}}
{"code": "import math\\nN=int(input())\\na=[int(i) for i in input().split()]\\nb=[int(i) for i in input().split()]\\nc=[abs(b[i]-a[i]) for i in range(N)]\\nprint(sum(c))\\nprint(math.sqrt(sum([c[i]**2 for i in range(N)])))\\nprint((sum([c[i]**3 for i in range(N)]))**(1/3))\\nprint(max(c))\\n\\n", "target": "325", "substitutes": {"N": ["U", "NA", "D", "S", " NI", "R", "NS", "E", "NC", " CI", "B", "Ns", "T", "n", "J", "Y", " C", "A", "L", "G", "Num", "Len", "NT", "Size", " n", " Ne", " M", "I", "X", "C", "Na", "Ne", "NG", "V", "P", "K", "O", "M", "F", "Z"], "a": ["x", "ar", "d", "ac", "ab", "n", "da", "an", "s", "A", "y", "alpha", "sa", "aa", "u", "va", "f", "e", "am", "ad", "ca", "ai", "ae", "w", "z", "ba", "l", "aj", "p", "au"], "i": ["pi", "it", "type", "o", "di", "uri", "ji", "k", "x", "xi", "j", "gi", "ci", "d", "yi", "phi", "oi", "io", "ie", "start", "int", "n", "s", "ini", "ui", "t", "ni", "bi", "id", "y", "api", "on", "ix", "index", "ip", "eni", "si", "u", "iu", "e", "f", "I", "ti", "mi", "ki", "inf", "ish", "ai", "z", "qi", "l", "v", "ii", "ic", "li", "m", "ei", "p", "vi", "zi"], "b": ["o", "x", "j", "d", "cb", "nb", "ab", "ac", "B", "bc", "n", "abs", "s", "A", "y", "bs", "g", "fb", "abc", "gb", "u", "lb", "e", "f", "ad", "base", "ba", "l", "v", "bb", "r", "m", "bf", "p"], "c": ["cur", "o", "mc", "k", "x", "cv", "cy", "ci", "d", "cb", "ac", "n", "s", "cc", "ce", "cache", "ch", "t", "cs", "y", "ec", "g", "h", "ct", "cm", "dc", "cu", "u", "xc", "e", "f", "code", "ca", "C", "w", "z", "l", "v", "lc", "cd", "m", "r", "ic", "cf", "p", "count"]}}
{"code": "n = int(input())\\nt = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nmod = 10 ** 9 + 7\\nrenew = [0] * n\\nb = 0\\nfor i, h in enumerate(t):\\n\tif b < h:\\n\t\tif h > a[i]:\\n\t\t\tprint(0)\\n\t\t\texit()\\n\t\trenew[i] = 1\\n\t\tb = h\\nb = 0\\nfor i, h in enumerate(a[::-1]):\\n\tif b < h:\\n\t\tif h > t[n - i - 1]:\\n\t\t\tprint(0)\\n\t\t\texit()\\n\t\trenew[n - i - 1] = 1\\n\t\tb = h\\nans = 1\\nfor f, th, ah in zip(renew, t, a):\\n\tif not f:\\n\t\tans *= min(th, ah)\\n\t\tans %= mod\\nprint(ans)", "target": "321", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "yn", "nb", "ny", "ot", "num", "s", "ni", "y", "nw", "na", "g", "en", "nn", "un", "nu", "nr", "u", "net", "fn", "nt", "e", "ns", "sn", "no", "q", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "t": ["tp", "o", "dt", "at", "k", "x", "j", "tm", "c", "d", "T", "ot", "s", "y", "test", "python", "g", "tt", "table", "u", "e", "nt", "q", "w", "ta", "z", "l", "v", "aj", "m", "r", "p", "temp"], "a": ["ma", "area", "at", "anta", "c", "aw", "ar", "ak", "ac", "ab", "wa", "art", "ast", "da", "ata", "an", "s", "array", "A", "api", "alpha", "sa", "ia", "aa", "va", "e", "am", "ad", "ca", "ga", "ai", "ae", "ta", "asa", "ba", "ao", "aj", "ap", "p", "au"], "mod": ["oct", "mode", "step", "grade", "od", "exp", "scale", "bug", "mult", "fun", "perm", "num", "reg", "man", "arm", "time", "div", "min", "ax", "md", "month", "post", "cm", "mods", "row", "max", "am", " Mod", "MOD", "Mod", "im", "module", "pm", "add", "sign", "complex", "patch", "adjust", "grad", "orig", "sim", "form", "mix"], "renew": ["renree", "Renow", "renews", "henree", "henaw", "renee", "renow", " renee", "renonge", "ornonge", "Renree", "newow", "Renonge", "Renew", "genree", "newaw", "newew", "Renrew", "enee", "ornew", " renree", "genew", "enow", "Renee", " renaw", "newews", "enaw", "Renews", "henow", "Renaw", "enew", "renaw", "ornaw", "ornree", "genews", "henews", "renrew", "henew", " renonge", " renow", "genrew", "henrew"], "b": ["o", "part", "k", "mb", "x", "abb", "j", "c", "db", "d", "nb", "ab", "ac", "bh", "B", "s", "rb", "bi", "y", "bs", "body", "g", "gb", "ib", "bad", "u", "lb", "e", "ad", "base", "ai", "w", "z", "l", "v", "r", "bf", "m", "bb", "p"], "i": ["mini", "pi", "di", "o", "x", "xi", "j", "c", "ci", "d", "yi", "oi", "ie", "start", "int", "ind", "ui", "ini", "ni", "bi", "id", "y", "ij", "index", "ip", "eni", "si", "u", "iu", "fi", "e", "I", "ti", "one", "ish", "ai", "z", "qi", "l", "v", "ii", "li", "m", "p", "vi", "zi"], "h": ["o", "ha", "hy", "k", "err", "x", "oh", "j", "c", "hw", "hon", "d", "ht", "bh", "kh", "num", "s", "rh", "ch", "hp", "eh", "id", "y", "ph", "his", "g", "en", "hh", "her", "hist", "pr", "host", "ach", "u", "hs", "e", "hr", "end", "hi", "gh", "q", "w", "sh", "z", "v", "l", "hm", "m", "r", "H", "he", "ih", "p", "han", "over"], "ans": ["asses", "ang", "angs", "ian", "anus", "aning", "nas", "ras", "ins", "ases", "reads", "olds", "ars", "ants", "aid", "amps", "an", "s", "anc", "ads", "ats", " means", "ians", "anon", "ams", "sk", "na", "os", "anas", "gan", "anz", "ks", "ana", "ia", "span", "can", "cons", "AN", "aned", "atan", "anne", "ANS", "leans", "ann", "ad", "lan", "ca", "ai", "aces", "ani", "ays", "mean", "han", "ares", "aus", "ons", "au"], "f": ["fs", "o", "al", "x", "c", "d", "af", "ff", "fc", "fa", "ef", "rf", "fe", "fd", "fb", "fer", "fab", "tf", "u", "e", "inf", "fen", "w", "z", "of", "p", "v", "l", "m", "bf", "cf", "F", "form"], "th": ["rah", "k", "ash", "eth", "ak", "ht", "kh", "reth", "af", "ath", "rh", "ch", "yth", "tw", "td", "ph", "ths", "than", "ith", "sa", "uth", "oth", "tha", "thin", "through", "gh", "ai", "w", "asha", "sh", "ta", "aj", "Th", "ih", "sth"], "ah": ["ahs", "oh", "aph", "lah", "ak", "ac", "ab", "af", "an", "rh", "av", "az", "eh", "iq", "sa", "orth", "ay", "nah", "ahi", "aa", "ach", "ad", "am", "yah", "were", "bah", "aim", "uh", "ai", "ae", "asha", "aaa", "sh", "AH", "aah", "aj", "ih", "au"]}}
{"code": "import sys\\nread = sys.stdin.read\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\n\\ndef main():\\n    N = int(readline())\\n\\n    K = 0\\n    for i in range(1,450):\\n        if i * (i-1) // 2 == N:\\n            K = i\\n            break\\n\\n    if K == 0:\\n        print(\"No\")\\n        exit()\\n    \\n    S = [[] for _ in range(K)]\\n\\n    i = 1\\n    k = 0\\n    cnt = 0\\n    while i <= N:\\n        S[k].append(i)\\n        i += 1\\n        cnt += 1\\n        if cnt == K - (k+1):\\n            k += 1\\n            cnt = 0\\n\\n    j = 1\\n    k = 1\\n    cnt = 0\\n    col = 0\\n    while j <= N:\\n        S[k].append(j)\\n        j += 1\\n        k += 1\\n        cnt += 1\\n        if cnt == K - (col+1):\\n            col += 1\\n            k = col + 1\\n            cnt = 0\\n\\n    print(\"Yes\")\\n    print(K)\\n\\n    for s in S:\\n        print(K - 1, *s)\\n\\n    \\nif __name__ == \"__main__\":\\n    main()\\n", "target": "502", "substitutes": {"read": [" write", "RW", " sync", " readers", "feed", "open", "input", "work", "current", "x", "reads", "ro", "raw", "lex", "data", " stream", "long", "re", " READ", "hand", "bind", "get", " data", "g", "connect", " send", " reader", "write", "readable", "stream", "host", " Read", "run", "play", "reader", "reading", "Read", "load", "end", " reads", "each", "new", "rec", " reading", " Write", "add", "READ", "str", "r", " copy", " connect"], "readline": ["readingled", "readled", "loadlist", "writelines", "readblock", "writeline", " readled", " Readled", "writelist", "readlist", "readinglines", "readingline", "writeblock", " Readlines", " Readblock", "readingLine", "scanline", "readingblock", " Readline", "loadblock", "readinglist", "writeLine", "loadline", "scanLine", "scanblock", "loadlines", "loadLine", "readLine", "scanlines", " readblock"], "readlines": ["writelines", "addlines", "writeline", "readlocks", " readlocks", "addliners", "Readline", "writenames", "readlists", "addlocks", "readinglines", "readingline", "Readlists", "workliners", "workline", "readinglists", "worklocks", "Readnames", "readnames", "worklines", "readingnames", "writelists", "readliners", "addline", "Readlines", " readliners"], "N": ["NA", "D", "NV", "R", "NS", "NE", "NC", "B", "Ns", "T", "n", "J", "W", "Y", "A", "L", "G", "Ni", "Len", "Num", "NB", "CNN", "NT", "Size", "NN", "No", "Q", "I", "X", "NO", "C", "Na", "Ne", "NG", "V", "P", "O", "H", "M", "F", "Z"], "K": ["U", "KI", "KR", "D", "Ku", "Max", "R", "SK", "E", "Point", "KO", "MK", "Ak", "T", "KE", "W", "J", "Y", "OK", "G", "NK", "L", "KK", "HK", "Check", "UK", "AK", "Q", "PK", "IO", "I", "X", "C", "ki", "Ne", "DC", "KN", "V", "P", "Ke", "ID", "EC", "CC", "CP", "Sk", "Key", "KS", "KC", "H", "M", "O", "F", "Kent", "Z"], "i": ["ik", "pi", "di", "o", "x", "xi", "c", "gi", "ci", "d", "yi", "phi", " I", "a", "io", "ie", "start", "ori", "oi", "int", "ind", "n", "ui", "ini", "ni", "bi", "id", "y", "zi", "ix", "index", "ip", "ri", "si", "u", "iu", "e", "I", "ti", "f", "ki", "im", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "m", "p"], "S": ["U", "SE", "SH", "D", "VS", "SS", "Sync", "R", "NS", "E", "Fs", "B", "Ns", "T", "System", "TS", "W", "OSS", "SI", "Es", "Y", "A", "L", "G", "DS", "ST", "SA", "Services", "PS", "Q", "WS", "Set", "SC", "I", "Socket", "X", "SU", "C", "Series", "V", "OS", "P", "Session", "Service", "O", "H", "M", "F", "Z"], "_": [" __", "x", " un", " p", "__", " int", " x", "f", "l", "p"], "k": ["ik", "o", "kn", "ke", "x", "work", "c", "d", "ak", "n", "wk", "ck", "mk", "kick", "ek", "ch", "id", "y", "ph", "kg", "sk", "g", "unk", "ok", "self", "ks", "uk", "kid", "dk", "ko", "row", "u", "pp", "f", "e", "ki", "q", "tk", "kw", "kind", "z", "w", "v", "l", "m", "p", "ku"], "cnt": ["cannot", "uncnt", "rcrt", "ecnd", "cnot", "bcnt", "encgt", "pcent", "ecct", "secnt", "ecannot", "Count", "pcont", "cpt", "ccnd", "arcnot", "count", "ncnt", "Cnot", "ecgt", "cno", "ccount", "arcpt", "cant", "Cannot", "dcnot", "encnt", "bcont", "cnd", "dcct", "Cpt", "rcct", "uncent", "ocnt", "cent", "ocnd", "Cnd", "uncrt", "rcannot", "dcont", "ccct", "ncrt", " cant", "mcnt", "arcnt", "mcgt", "encant", "dcount", "ncont", "bcnd", " cannot", "ecnt", "encct", "secont", "arcct", "cnc", "cct", "pcnt", "cont", "encnd", "pcrt", " crt", " cct", "ocont", "ncnc", "dcpt", "encont", "ncct", "mcno", "ncent", "Cnc", "ecrt", "ecno", "encno", "bcrt", "dcnd", "cgt", "mcnd", "ocrt", "dcnt", " cont", "ncannot", "Cnt", " cnc", "Cct", "uncont", "rcnt", "ccnt", "secrt", "secnd", "dcant", "crt"], "j": ["ik", "el", "ji", "o", "js", "ol", "x", "c", "d", "jc", "io", "ie", "oj", "n", "J", "ot", "ch", "y", "g", "job", "ix", "jl", "jo", "row", "u", "ja", "e", "jet", "f", "b", "jj", "q", "z", "qi", "l", "jp", "ii", "v", "li", "aj", "p"], "col": ["cur", "el", "o", "loc", "kn", "ol", "x", "c", "cy", "ci", "coll", "fl", "int", "ind", "year", "column", "n", "ll", "cal", "ch", "id", "y", "Col", "key", "cell", "ok", "co", "ct", "index", "th", "row", "char", "il", "f", "q", "pt", "z", "cr", "l", "COL", "p", "cl", "count"], "s": ["states", "services", "o", "parts", "su", "c", "d", "ins", "ses", "ws", "a", "n", "t", "y", "sk", "g", " self", "sections", "rows", "ks", "self", "set", "si", "u", "spec", "f", "e", "b", "w", "z", "l", "v", "str", "m", "r", "p"]}}
{"code": "S=input()\\ncnt=0\\nfor i in range(len(S)):\\n    if i%2==int(S[i]):\\n        cnt+=1\\nprint(min(cnt,len(S)-cnt))\\n", "target": "495", "substitutes": {"S": ["SE", "U", "SO", "D", "SS", "R", "NS", "B", "T", "TS", "W", "SI", "s", "Array", "Source", "A", "L", "G", "SR", "Part", "String", "SN", "Single", "INS", "SL", "ST", "Save", "Q", "SC", "CSS", "Sign", "I", "CS", "Socket", "X", "SU", "C", "Send", "V", "Sort", "P", "OS", "Service", "O", "H", "M", "Input", "F", "N"], "cnt": ["Cent", " cent", "CNT", "cno", "acct", "arcont", "ctNT", "cwd", "lcnt", " cno", "Cont", "Cno", "lcNT", "lcrt", "arcNT", "arcnt", "acnt", "Crt", "pcent", " cont", " cint", "acNT", " cNT", "pcNT", "ctnt", "Cnt", "cct", "cNT", "Cwd", "ctwd", "pcnt", "cont", "Cct", "ctont", "cint", "lcont", "arcrt", "cent", "Cint", " cwd", " cct", "crt", "pcint", "acno"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "ci", "ri", "a", "io", "start", "ind", "n", "s", "ini", "ui", "ni", "bi", "id", "uni", "ix", "index", "eni", "si", "u", "iu", "fi", "e", "I", "f", "ti", "b", "jj", "ai", "z", "p", "qi", "v", "l", "ii", "li", "r", "abi", "ei", "zi"]}}
{"code": "import sys\\nimport collections\\n\\ninput = sys.stdin.readline\\n\\ndef main():\\n    N = int(input())\\n    Slist = []\\n    for _ in range(N):\\n        Slist.append(str(input()[:-1]))\\n    SlistCounter = list(collections.Counter(Slist).items())\\n    SlistCounter.sort(key=lambda x: x[0])\\n    SlistCounter.sort(key=lambda x: x[1], reverse=True)\\n    maxcnt = SlistCounter[0][1]\\n    for s, cnt in SlistCounter:\\n        if cnt != maxcnt:\\n            break\\n        print(s)\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "750", "substitutes": {"input": ["type", "string", "empty", "element", "out", "feed", "c", "search", "current", "argument", "raw", "output", "data", " Input", "expression", "submit", "int", "instance", "util", "print", "pull", "list", "array", "space", "config", "enter", "i", "sleep", "keep", "entry", "python", "image", "self", "sample", "request", "source", "error", "hidden", "f", "help", "reader", "insert", "select", "reset", "inf", "filter", "accept", "text", "str", "Input", "until", "comment", "exec", "method"], "N": ["NA", "D", "S", "R", "NS", "NC", "NL", "NE", "B", "Ns", "T", "n", "W", "J", "Y", "Ni", "L", "G", "Len", "NB", "NT", " n", "No", "X", "NO", "C", "NI", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "Slist": ["ASlist", "SList", "SubList", "PList", "DSLIST", "Eslist", "Ptable", "DSList", "sLIST", "Esset", "Nlist", "Subtable", "DSlist", "Sourcetable", "SourceLIST", "ASList", "sList", "Sourcelist", "NList", "Ntable", "SourceList", "slist", "DStable", "EsList", "Plist", "EsLIST", "ASset", "ASLIST", "stable", "sset", "PLIST", "Stable", "SubLIST", "SLIST", "Sset", "NLIST", "Sublist"], "_": [" __", " un", " p", " time", " f", "f", " k", " q", "p"], "SlistCounter": ["SLISTNumber", "TListCounter", "SListManager", "NListCounter", "SListFile", "SlistConsumer", "SmainCounter", "TListCount", "SsetList", " SbaseCounter", "NlistCache", "TlistCount", "TlistOrder", "SlistMonitor", "SlistManager", "NlistNumber", "TSlistList", "SListNumber", "SlistFile", "TSlistMonitor", "SintCache", " SlistFile", "LSlistCounter", "SstreamCount", "SstringCounter", "SLISTCounter", " SbaseFile", "SLISTList", "TListConsumer", "SmoduleCache", "LSkeepComputer", "SstreamConsumer", "LSkeepCounter", "SlistNumber", "TlistConsumer", "SstreamOrder", "TListOrder", "SListComputer", "SListCache", "SmainNumber", "SListList", "NListCache", " SbaseNumber", "NlistCounter", "SstreamCounter", "NListManager", "SsetNumber", "SmoduleNumber", "SbatchFile", "SsetMonitor", "SListOrder", "SbatchCounter", "TlistCounter", "SkeepList", "SlistComputer", "TSlistCounter", "SmainList", "SListMonitor", "SstringOrder", "TSlistNumber", "TSsetList", "SbaseCounter", "SbaseFile", "SListConsumer", " SlistNumber", "LSlistList", "SintCounter", "SlistList", "SintManager", "SsetCounter", "SstringConsumer", "SmainComputer", "SbatchNumber", "SmoduleManager", "TSsetMonitor", "SkeepNumber", "SstringCount", "SlistCache", "LSlistNumber", "SLISTMonitor", "TSsetNumber", "SlistCount", "SkeepCounter", "LSlistComputer", "NListNumber", "SbaseNumber", "LSkeepNumber", "SListCount", "TSsetCounter", "LSkeepList", "SmoduleCounter", "NlistManager", "SListCounter", "SkeepComputer", "SintNumber", "SlistOrder"], "maxcnt": ["maxCount", "maxrcount", " maxCount", " maxcount", "maxlcpt", "maxlcnc", "maxrcNT", "maxacnc", "maxcpt", " maxacNT", " maxcpt", "maxcn", " maxcn", "maxacount", "maxacNT", "maxrcn", " maxcnc", "maxcount", "maxacpt", " maxacnc", "maxCn", "maxcNT", " maxCnt", " maxcNT", " maxacnt", "maxacnt", "maxscnc", "maxacn", " maxCNT", "maxrcnt", "maxlcnt", "maxscNT", "maxscnt", "maxCnt", " maxCn", " maxacpt", "maxlcNT", "maxCNT", "maxcnc", "maxscpt"], "s": ["states", "ls", "string", "S", "sync", "c", "d", "ins", "ses", "ws", "a", "sys", "start", "ss", "src", "instance", "n", "abs", "ops", "t", "i", "python", "g", "sections", "gs", "lines", "sites", "items", "sets", "spec", "e", "f", "b", "func", "ns", "new", "es", "tests", "features", "sb", "w", "l", "stats", "groups", "r", "words", "p"], "cnt": [" cnot", "lcount", "Cnot", "CNT", "lcnt", "Cnc", " cpt", "lcpt", "lcNT", "cnot", "Cpt", "cnc", "Cnt", "Count", "cNT", " cnc", " count", "lcnot", "lcnc", "cpt", " cNT", "count"]}}
{"code": "def examA():\\n    N = I(); A = LI()\\n    sumnale = sum(A)/N\\n    cur = 10**9; curL = 0\\n    for i in range(N):\\n        if cur>abs(A[i]-sumnale):\\n            cur = abs(A[i]-sumnale)\\n            curL = i\\n    ans = curL\\n    print(ans)\\n    return\\n\\n\\nimport sys,copy,bisect,itertools,heapq,math\\nfrom heapq import heappop,heappush,heapify\\nfrom collections import Counter,defaultdict,deque\\ndef I(): return int(sys.stdin.readline())\\ndef LI(): return list(map(int,sys.stdin.readline().split()))\\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\\ndef LS(): return sys.stdin.readline().split()\\ndef SI(): return sys.stdin.readline().strip()\\nmod = 10**9 + 7\\ninf = float('inf')\\n\\nif __name__ == '__main__':\\n    examA()\\n", "target": "89", "substitutes": {"N": ["U", "D", "S", "R", "NS", "E", "NE", "B", "Ns", "T", "n", "J", "W", "Sn", "NH", "Y", "L", "G", "Ni", "Len", "Num", "Size", "NN", "MN", "Q", "I", "X", "C", "Na", "Ne", "RN", "Lu", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["AR", "Ac", "As", "NA", "ACC", "U", "S", "ASC", "Alpha", "a", "ac", "B", "CA", "All", "T", "PA", "mA", "Math", "At", "Array", "Y", "array", "G", "L", "AM", "alpha", "AS", "HA", "AI", "An", "Adam", "AP", "Average", "Ar", "Ha", "Wa", "I", "AA", "X", "JA", "App", "C", "DATA", "ai", "P", "API", "AF", "AC", "AW", "M", "Input", "LA"], "sumnale": [" surnave", " surnal", "summALE", "surnALE", "snutall", "somale", " snutale", "snutales", "sombale", "surnal", "sumnaled", "samacale", "summales", "sombALE", "somaals", " surnale", "sinumnale", "somball", "somaALE", "sumal", "somaled", "sinumnales", "surnale", " sumnave", "somaales", "sinumnaled", "summale", " snutall", "sumave", "somaaled", "sumnales", "sinamacales", "snutALE", " snutALE", "sombales", " sumnALE", "sumALE", "snutale", "somales", "samacals", " sumnal", "somaale", " sumnall", " surnALE", "summall", "somaave", "somaal", "samacaled", "sumnall", "sumnave", " snutales", "sumale", "samacales", "sinamacale", "sinamacals", "surnave", "sumnals", "sinamacaled", "somals", " sumnales", "sumnal", "sinumnals", "sumnALE"], "cur": ["loc", "sur", "c", "cer", "sch", "current", "ar", "ver", "col", "RR", "inter", "Cr", "const", "uc", "dec", "src", "inc", "ch", "result", "arr", "ah", "cor", "fer", "iter", "ctr", "acc", "lr", "UR", "Ar", "Sur", "char", "ur", "cont", "car", "ai", "cr", " Cur", "ocr", "attr", "cat", "ser", "r", "oc", "prev", "Cur", "sc", "rc", "asc", "sr"], "curL": [" CurL", " CurI", "interN", "prevL", "CurLI", " CurN", " curN", " curLA", "interI", "CurL", "curLA", "carLI", "carN", "carI", " CurV", "prevI", "interL", " curI", " curV", "interLA", "carL", "CurV", " curLI", "curN", "CurI", "prevN", "curV", "CurN", "curI", "curLI", "prevLA"], "i": ["pi", "di", "it", "x", "xi", "j", "c", "gi", "ci", "yi", "phi", "ri", "a", "io", "ie", "int", "ind", "n", "ui", "ini", "bi", "id", "y", "ij", "index", "multi", "eni", "si", "u", "iu", "fi", "e", "I", "ti", "f", "b", "mu", "ai", "z", "p", "qi", "chi", "l", "v", "ii", "lc", "li", "ei", "vi"], "ans": ["ls", "NA", "ANN", " fa", "ases", "acl", "ars", "ants", "Ns", "amps", "an", "anc", "ops", "arn", "cs", "oss", "AS", "CNN", "annot", "na", "sk", "plan", "ds", " ann", "ana", "An", "span", "vals", "can", "AN", "ase", "ANS", "ann", "CS", "lan", "ane", "ns", "sn", "scan", "ai", "ano", "params", "lc", "ace", "aus", "au"], "mod": ["exp", "rad", "scale", "ver", "dec", "year", "fun", "inc", "reg", "aug", "mag", " micro", "magic", "ctr", "acc", "PI", "mods", " imp", "spec", "mu", "unc", " Mod", "MOD", "Mod", "module", "init", "sign"], "inf": ["pi", "std", "d", "phi", "Inf", "int", "n", "inc", "info", " infinity", "alpha", "xxx", "abc", "fff", "PI", " Inf", "pp", "f", "I", "init", "frac", "z", "l", "p", " INF"]}}
{"code": "N = int(input())\\n\\na = list(map(int,input().split()))\\n\\na.sort()\\n\\n\\nx = []\\ni = len(a)-1\\n#print(a)\\n\\nwhile i > 0:\\n    if a[i] == a[i-1]:\\n        x.append(a[i])\\n        i-=1\\n\\n    i-=1\\n    \\n    if len(x) == 2:\\n        print(x[0]*x[1])\\n        exit()\\n\\n\\n\\nprint(0)\\n\\n\\n", "target": "53", "substitutes": {"N": ["U", "D", "S", "R", "B", "Ns", "T", "n", "J", "Y", "A", "L", "G", "Num", " n", "No", "Q", "I", "X", "C", "V", "P", "K", "O", "H", "M", "F", "Z"], "a": ["area", "input", "j", "c", "d", "ac", "data", "ab", "n", "all", "args", "an", "s", "array", "A", "t", "Array", "y", "alpha", "sa", "index", "aa", "u", "f", "e", "b", "am", "ca", "ans", "ga", "ai", "w", "z", "v", "l", "m", "p", "form"], "x": ["input", "axis", "c", "d", "xy", "data", "n", "s", "list", "array", "t", "y", "xxx", "ax", "ix", "index", "f", "e", "X", "xx", "q", "w", "z", "xs", "p"], "i": ["pi", "o", "k", "xi", "j", "c", "ci", "phi", "pos", "n", "bi", "index", "si", "e", "I", "f", "mu", "q", "ai", "z", "v", "l", "ii", "li", "m", "r", "p"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\n\\n\\ndef get_primes(n):\\n    sieve = [1] * n\\n    for i in range(3, int(n ** 0.5) + 1, 2):\\n        if sieve[i]:\\n            sieve[i * i:: 2 * i] = [0] * ((n - i * i - 1) // (2 * i) + 1)\\n    return [2] + [i for i in range(3, n, 2) if sieve[i]]\\n\\n\\ndef main():\\n    N = int(input())\\n    primes = get_primes(55555)\\n    ans = []\\n    for p in primes:\\n        if len(ans) == N:\\n            break\\n\\n        if p % 5 == 1:\\n            ans.append(p)\\n\\n    print(*ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "173", "substitutes": {"input": ["socket", "out", "feed", "raw", "output", "a", "data", " Input", "int", "print", " output", " np", "pull", "s", "array", " int", "config", "loop", "sleep", "proc", " data", "python", "script", "connect", "forward", "parent", " f", "request", "error", " inputs", "active", "read", "pp", "eval", "exec", "process", "reset", "select", " python", "child", "init", "P", "accept", "str", "text", "Input", "call"], "n": ["pi", "o", "k", "x", "j", "c", "np", "d", "nb", "all", "num", "an", "non", "t", "s", "ni", "mn", "min", "network", "nn", "u", "net", "f", "e", "max", "nt", "b", "ns", "q", "w", "z", "l", "v", "m", "r", "ne"], "sieve": ["sesieving", "wsiever", "specieve", "unsieve", "nsiever", " siever", "sive", "sieved", " sieving", "Sieve", "sesieve", "sieving", "nsieve", "specieving", "wsift", "sesiever", " sipe", "sesive", "wsieved", "siever", "psift", " sive", "Sieved", "wsieve", "specive", "nsipe", "sipe", "sift", "unsieving", "unsiever", "Sift", "psiever", "nsieving", "psieved", "unsive", "speciever", "unsipe", "psieve", "Siever"], "i": ["pi", "di", "it", "o", "ji", "iw", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "phi", "a", "io", "ie", "int", "ind", "s", "ini", "ui", "t", "ni", "bi", "id", "y", "h", "isin", "ix", "index", "ip", "stat", "multi", "eni", "si", "iii", "u", "iu", "fi", "e", "ti", "I", "f", "b", "ai", "z", "chi", "v", "l", "ii", "ic", "li", "m", "r", "ei", "zi"], "N": ["D", "S", "NS", "B", "Ns", "J", "num", "Y", "A", "L", "G", "ni", "Len", "NT", "network", "NN", "number", "Q", "I", "X", "ns", "C", "V", "P", "K", "O", "M", "F"], "primes": ["Prtimes", "prims", "prises", "pises", "prtimes", " prtimes", "pritions", "perimes", " prises", "Prises", "Prps", "pims", "pimes", " prims", "peritions", "rps", "rtimes", "prps", " pritions", "rimes", "pitions", "Primes", "perises", "rises", "perims", " prps"], "ans": ["parts", "part", "nas", "ras", "ins", "aos", "a", "ars", "ants", "atten", "amps", "args", "photos", "an", "s", "list", "anc", "ats", "ents", "anon", "ams", "na", "os", "anas", "plan", "ds", "ips", "ana", "nan", "can", "main", "lines", "anes", "AN", "aned", "ANS", "ann", "ps", "ns", "lan", "scan", "ions", "ani", "P", "ano", "annels", "params", "xs", "aus", "ons"], "p": ["wp", "pi", "lp", "o", "pid", "k", "x", "op", "c", "page", "np", "d", "pat", "a", "pos", "int", "pa", "s", "num", "parser", "t", "array", "ping", "proc", "on", "python", "g", "cp", "pr", "ip", "rep", "py", "comp", "pp", "f", "opt", "e", "pre", "b", "pn", "pin", "q", "P", "params", "v", "l", " P", "pc", "str", "m", "r", "pins", "pe", "fp"]}}
{"code": "def resolve():\\n    n, m = map(int, input().split())\\n    a = [list(map(int, input().split())) for i in range(m)]\\n    a = [[x, y, -z] for x, y, z in a]\\n    print(BF(a, n, 1)[-1])\\n\\n\\ndef BF(p, n, s):\\n    inf = float(\"inf\")\\n    d = [inf for i in range(n)]\\n    d[s-1] = 0\\n    for i in range(n+1):\\n        for e in p:\\n            if e[0] != inf and d[e[1]-1] > d[e[0]-1]+e[2]:\\n                d[e[1]-1] = d[e[0]-1] + e[2]\\n        if i == n-1:\\n            t = d[-1]\\n        if i == n and t != d[-1]:\\n            return [0, 'inf']\\n    return list(map(lambda x: -x, d))\\n\\n\\nif __name__ == \"__main__\":\\n    resolve()", "target": "258", "substitutes": {"n": ["o", "k", "j", "c", "nb", "num", "an", "ni", "mn", "na", "g", "en", "h", "nn", "nan", "un", "nu", "u", "net", "f", "nt", "b", "ns", "pn", "sn", "no", "w", "v", "l", "r", "nc", "nin", "ne", "N"], "m": ["o", "mc", "k", "j", "c", "num", "mn", "g", "h", " M", "u", "f", "b", "mm", "w", "dm", "v", "l", "r", "M", "N"], "a": ["ma", "area", "c", "aw", "ar", "ac", "ab", "wa", "af", "mA", "da", "all", "an", "array", "A", "fa", "alpha", "na", "qa", "sa", "abc", "aa", "va", "f", "b", "ad", "ca", "am", "ans", "ga", "ai", "ae", "w", "aaa", "ba", "ea", "l", "au"], "i": ["pi", "di", "it", "o", "xi", "j", "c", "ci", "phi", "io", "ie", "int", "ind", "ini", "ni", "id", "ip", "si", "u", "iu", "I", "ti", "f", "b", " ti", "ai", "chi", "qi", "l", "v", "ii", "li", "r", "ih", "zi"], "x": ["o", "k", "xp", "xi", "px", "c", "xy", "point", "event", "pos", "pixel", "int", " xx", "xxxxxxxx", " X", "on", "xxx", "g", "ax", "h", "xt", "ay", "xe", "xxxx", "ix", "ex", "xc", "u", "ft", "f", "b", "X", "xx", "xes", "wx", "q", "w", "l", "v", "xs", " tx"], "y": ["o", "k", "j", "c", "yn", "ny", "int", "Y", "zy", "ye", "dy", "g", "h", "u", "f", "b", "yd", "yy", "w", "l", "v", "vy"], "z": ["ze", "o", "k", "j", "c", "xy", "az", "g", "h", "cz", "zh", "zip", "u", "f", "q", "w", "v", "l", "ii", "zo", "zi", "Z"], "p": ["pi", "o", "tp", "j", "c", "np", "point", "python", "g", "h", "cp", "ip", "u", "pp", "f", "pre", "b", "q", "w", "P", "pm", "v", "l", "jp", "pc", "r", "pe", "fp"], "s": ["ls", "o", "k", "S", "j", "c", "ins", "cs", "g", "os", "h", "ds", "ips", "si", "u", "size", "f", "b", "ps", "ns", "es", "q", "w", "l", "v", "r"], "inf": ["pi", "integer", "input", "xi", "std", "exp", "c", "phi", "Inf", "int", "ind", "zen", "nz", "inc", "ini", "depth", "info", "id", "alpha", " infinity", "iter", "nan", "index", "error", "aff", " Inf", "pp", "f", "sup", "limit", "q", "init", "frac", "w", "ref", "conf", "spin"], "d": ["di", "o", "D", "dt", "dos", "k", "j", "c", "ded", "pd", "data", "nd", "da", "td", "sd", "g", "h", "ds", "do", "dh", "md", "dc", "u", "f", "dd", "b", "ad", "dl", "q", "w", "dict", "dn", "l", "v", "r", "dat", "ld"], "e": ["el", "ey", "ze", "o", "eu", "k", "element", "ve", "j", "energy", "c", "er", "E", "ie", "diff", "ise", "ge", "ce", "ef", "eff", "ec", "fe", "g", "en", "h", "line", "u", "ee", "ed", "end", "f", "b", "one", "q", "ae", "w", "ea", "v", "l", "r", "ei", "een", "eve", "pe", "ne"], "t": ["o", "type", "at", "dt", "tp", "k", "j", "c", "T", "int", "ot", "g", "h", "ts", "tt", "u", "f", "ti", "b", "nt", "q", "w", "ta", "v", "l", "r"]}}
{"code": "import math\\nimport fractions\\nimport collections\\nimport itertools\\nimport pprint\\nN,M=map(int,input().split())\\n\\n#rotate\u3059\u308c\u3070\u4ed6\u306e\u90e8\u5c4b\u3067\u540c\u3058\u7d44\u307f\u5408\u308f\u305b\u304c\u51fa\u3066\u3057\u307e\u3046<=>\u4ed6\u306e\u90e8\u5c4b\u306e2\u6570\u306e\u6570\u5b57\u306e\u5dee\u304c\u540c\u3058\u306b\u306a\u3063\u3066\u3057\u307e\u3046\\n#\u524d\u534a\u5206\u3092\u5076\u6570\u5dee\u3001\u5f8c\u308d\u534a\u5206\u3092\u5947\u6570\u5dee\u3068\u8a00\u3063\u305f\u611f\u3058\u3067\u4e0a\u304b\u3089\u8a70\u3081\u308c\u3070\u826f\u3044\\n#\u90e8\u5c4b\u6570\u3092M\u3068\u3057\u3066\u30011,2,...,M\u306e\u5dee\u3092\u8003\u3048\u308b\\nl=[]\\nmaemin=1\\nusiromax=N\\nfor i in range(M,0,-1):\\n    if i%2==0:\\n        l.append([maemin,maemin+i])\\n        maemin=maemin+1\\n    else:\\n        l.append([usiromax-i,usiromax])\\n        usiromax=usiromax-1\\n#print(l)\\n\\nfor i in range(M):\\n    print(*l[i],sep=\" \")\\n\\n\\n\\n", "target": "761", "substitutes": {"N": ["D", "S", "R", "E", "B", "Ns", "T", "n", "J", "Y", "Ni", "L", "G", "A", " n", "Q", "I", "X", "C", "NI", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "D", "S", "R", "E", "B", "T", "W", "J", "L", "MN", "Q", "I", "X", "MI", "C", "V", "P", "K", "m", "O", "H", "F", "CM", "MF", "Z"]}}
{"code": "N = int(input())\\nA = list(map(int,input().split()))\\n\\nB = [0] * N\\nM = 0\\nans = []\\nfor i in range(N,0,-1):\\n    S, idx = 0, i-1\\n    while idx <= N-1:\\n        S += B[idx]\\n        idx += i\\n\\n    if S % 2 != A[i-1]:\\n        B[i-1] = 1\\n        M += 1\\n        ans.append(i)\\n        \\n\\nprint(M)\\nfor a in ans:\\n    print(a, end=\" \")\\nprint(\"\")", "target": "568", "substitutes": {"N": ["U", "NA", "D", "R", "NS", "E", "NL", "NE", "Ns", "T", "n", "J", "Y", "L", "Ni", "Len", "Num", "NT", "NM", " n", "Size", "NN", "No", "Q", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "F", "Z"], "A": ["As", "U", "NA", "D", "E", "CA", "T", "IA", "At", "Array", "Y", "AM", "L", "G", "Am", "AS", "HA", "BA", "SA", "AU", "AP", "AN", "I", "AA", "b", "C", "V", "P", "API", "F", "LA"], "B": ["U", "D", "BM", "R", "E", "T", "W", "BE", "UB", "Y", "L", "G", "NB", "Ab", "BA", "OB", "Bs", "WB", "I", "AA", "b", "X", "C", "SB", "V", "MB", "P", "AB", "O", "F"], "M": ["U", "MO", " m", "D", "R", "E", "FM", "T", "n", "Y", "L", "G", "Part", "DM", "NM", "MAL", "Ms", "MN", "Q", "AN", "ANS", "I", "X", "MI", "C", "MA", "V", "P", "K", "m", "O", "H", "Mi", "F", "Z"], "ans": ["NA", "ANN", "x", "aning", "anned", "ins", "aos", "ases", "ations", "ars", "ants", "pos", "amps", "int", "Ns", "n", "ens", "an", "s", "ads", "L", " means", "ats", "ents", "AS", "na", "aks", "anas", "ms", "ks", "nan", "An", "ana", "ids", "Ms", "AN", "atan", "aned", "ase", "ANS", "I", "ann", "ad", "ns", "ions", "ai", "ani", "annels", " scans", "ao", "m", "aus", "ons"], "i": ["mini", "pi", "it", "o", "di", "uri", "k", "x", "xi", "j", "idi", "c", "gi", "anti", "ci", "d", "ri", "io", "start", "ori", "int", "ind", "n", "s", "ui", "ini", "ni", "bi", "id", "y", "info", "ix", "index", "ip", "eni", "si", "u", "iu", "e", "I", "ti", "end", "b", "f", "mi", "my", "im", "ai", "z", "qi", "v", "l", "ii", "m", "li", "p"], "S": ["U", "SE", "D", "SS", "R", "NS", "E", "Ns", "T", "n", "Si", "SI", "s", "Y", "L", "G", " s", "Sa", "Size", "SA", "Q", "I", "X", "SU", "C", "Su", "V", "Sl", "P", "K", "O", "H", "F", "Z"], "idx": ["Idxx", "IdX", " idw", " idz", "indx", "inX", "Idw", "indxc", " idxx", "inx", "idxs", "Idxc", "Idxi", "idX", "idw", "Idxs", "idxx", "idxc", "indw", "IDx", "Idx", "idz", "IDX", "inxc", " idxs", " idX", " idxc", "idxi", "inxs", "Idz", " idxi", "IDz", "indX", "IDxi", "indxx"], "a": ["ma", "area", "\u00e4", "parts", "aw", "ar", "ak", " am", "ab", "af", "int", " af", "n", "\u00e0", "all", "args", "s", "an", "array", "av", "actions", "alpha", "ams", "na", "aa", "AN", "atan", "ad", "b", "am", "ai", "\u00e1", "ae", "p", "params", "ao", "m"]}}
{"code": "*l, = map(int, open(0).read().split())\\nif l[1] % l[0] == 0:\\n\tprint(l[0] + l[1])\\nelse:\\n\tprint(l[1] - l[0])", "target": "137", "substitutes": {"l": ["el", "lp", "ls", "o", "loc", "ol", " L", "al", "le", "ul", "x", "c", "d", "left", "kl", "lo", "fl", "ell", "sl", "n", "long", "yl", "s", "list", "ll", "t", "L", "ly", "i", "split", "g", "shell", "bl", "lv", "lr", "nl", "lis", "la", "il", "u", "lin", "los", "f", "e", "rl", "b", "pl", "dl", "v", "lc", "m", "li", "r", "ln", "p", "lt", "cl"]}}
{"code": "n = int(input())\\n\\ndef f(lst):\\n  res = 0\\n  ex = 0\\n  for a in lst:\\n    ex += a\\n    res += ex//2\\n    ex %= 2\\n  return res\\n\\nA = []\\nans = 0\\nfor _ in range(n):\\n  a = int(input())\\n  if a%2:\\n    ans += a//2\\n    a = 1\\n  else:\\n    if a>2:\\n      ans += a//2-1\\n      a = 2\\n\\n  if a!= 0:\\n    A.append(a)\\n  elif A:\\n    ans += max(f(A), f(A[::-1]))\\n    A = []\\n  else:\\n    continue\\nelse:\\n  ans += max(f(A), f(A[::-1]))\\nprint(ans)\\n\\n", "target": "455", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "num", "an", "t", "i", "y", "g", "nn", "nan", "u", "e", "nt", "f", "fn", "b", "ns", "no", "w", "z", "l", "m", "r", "nc", "p", "ne", "N"], "lst": ["rsc", "rst", "klist", "klbl", "dlrest", "klst", " lsc", "llst", "Lsc", "Lsts", "list", "llbl", "LST", "lbl", "lST", "dlbl", "rST", "Lst", "klrest", "dlst", " lsts", "llist", "rsts", "dlist", " lST", "lsc", "llrest", "lsts", "lrest"], "res": ["rs", "Result", "err", "resolution", "exp", "results", "ras", "runs", "rap", "ars", "re", "args", "rez", "RES", "ries", "result", "Res", "arr", "ents", "resh", "os", "hes", "act", "pres", "rows", "ret", "vals", "ES", "row", "arts", "ces", "seq", "nos", "ores", "max", "obj", "ps", "resp", "ros", " Res", "gr", "es", " results", "ress", "Results", "ares", "r", "eps", "ons", "ran"], "ex": ["rs", "step", "at", "case", "ext", "x", "exp", "c", "ras", "rap", "esc", "ac", "lex", "data", "ab", "aux", "pos", "int", "ens", "re", "an", "array", "rez", "fa", "test", "cases", "na", "con", "ax", "act", "abc", "exc", "rx", "express", "ra", "Ex", "ception", "expr", "cas", "seq", "gex", "e", "max", "Exc", "ns", "es", "feat", "w", "z", "rex", "cr", "EX", "r", "exec", "ons"], "a": ["ma", "area", "at", "x", "exp", "c", "aw", "ar", "d", "ab", "ac", " ar", "wa", "af", "int", "pa", "all", "ata", "an", "da", "s", "fa", "array", "i", "result", "y", "alpha", "na", "sa", "act", "abc", "ana", "ia", "ra", "aa", "la", "ach", "va", "oa", "e", "f", "ad", "am", "b", "ca", "ga", "ai", "ae", "w", "asa", "ba", "aaa", "ea", "l", "aj", "ada", "r", "ace", "ap", "p", "au"], "A": ["NA", "Ax", "E", "B", "W", "Action", "Am", "SA", "An", "AN", "ANS", "I", "AST", "If", "Parts", "FA", "au", "As", "Any", "R", " Ax", "Alpha", "This", "Array", "an", "G", "AM", "Address", "Adam", "Ar", "AA", "AF", "API", "H", "M", "AR", "D", "S", "New", "Ast", "Auth", "CA", "All", "T", "Only", "Az", "AU", "X", "Australia", "C", "Na", "AC", "LA", "U", "Ca", "At", "Y", "L", "Part", "AS", "Ab", "GA", "AP", "Ha", "Sam", "Fa", "P", "F", "N"], "ans": ["ls", "anus", "ras", "nas", "ins", "aos", "ases", "ations", "ars", "ants", "aux", "aid", "amps", "ens", "an", "anc", "ads", "s", "ats", "cs", "ents", "ams", "AS", "sk", "na", "sa", "anas", "act", "ks", "nan", "An", "ana", "can", "cas", "AN", "aned", "ANS", "activation", "ann", "ns", "lan", "es", "ani", "aces", "ae", "ai", "ays", "ace", "acs", "eps", "aus", "ons", "au"], "_": [" get", "k", " __", "j", "x", " un", " time", "g", " j", " r", " f", "un", " function", "f"]}}
{"code": "a, b = input().split(\" \")\\na = int(a)\\nb = int(b)\\nif a-2*b < 0:\\n  print(0)\\nelse:\\n  print(a-2*b)\\n", "target": "520", "substitutes": {"a": ["ma", "area", "anta", "x", "c", "aw", "d", "ama", "ac", "ab", "data", "art", "aux", "pa", "n", "mA", "da", "an", "A", "fa", "i", "y", "alpha", "api", "na", "sa", "ia", "aa", "la", "u", "va", "f", "e", "am", "ca", "ad", "ga", "ai", "ae", "asa", "aaa", "ba", "ea", "l", "aj", "p", " A", "au"], "b": ["part", "eb", "k", "mb", "abb", "pb", "x", "j", "c", "db", "d", "ob", "nb", "cb", "ab", "B", "bc", "bd", "bis", "n", "rb", "bi", "i", "y", "bs", "fb", "abc", "bin", "aa", "wb", "lb", "f", "e", "buff", "ad", "base", "sb", "ba", "l", "v", "bb", "bf", "emb", "p"]}}
{"code": "Row = int(input())\\nflag = True\\nList = []\\nfor i in range (Row):\\n  List.append(input())\\ns_l = set(List)\\nif len(List) != len(s_l):\\n  print(\"No\")\\nelse:\\n  for i in range(Row-1):\\n    n = len(List[i])-1\\n    if List[i][n] != List[i+1][0]:\\n      flag = False\\n  if flag:\\n    print(\"Yes\")\\n  else:\\n    print(\"No\")", "target": "218", "substitutes": {"Row": ["Range", "Node", "Tab", "Start", "Header", "Sync", "Line", "Section", "Lo", "Data", "Offset", "Type", "Array", "Mode", "Rank", "Value", "Ptr", "Loc", "First", "Flag", "Num", "Col", "Index", "Cell", "Se", "Month", "Wr", "Next", "Area", "No", "Format", "Pixel", "row", "Position", "Length", "Li", "Number", "Group", "Sc", "Block", "Sl", "Round", "Page", "Column", "Right"], "flag": ["log", "part", "type", "field", "sync", "bug", "lag", "pattern", "start", "af", "mask", "ind", "flags", "fun", "long", "list", "weight", "leaf", "id", "sort", "key", "force", "count", "FLAG", "offset", "nl", "bit", "ag", "char", "foo", "reply", "disabled", "fi", "f", "inline", "match", "member", "store", "status", "filter", "sign", "style", "Flag", "group", "arg", "star"], "List": ["Multi", "Node", "Result", "Object", "Entry", "Sync", "Queue", "Pool", "Sel", "Do", "Sample", "Line", "Section", "Status", " list", "Lo", "Data", "LIST", "Table", "Order", "Tree", "Vector", "Type", "Array", "list", "Value", "Long", "L", "St", "History", "Len", "String", "Num", "Source", "Stream", "Diff", "Index", "Body", "Coll", "Content", "Item", "Member", "Int", "Stack", "File", "Library", "Left", "Ex", "Language", "Count", "Group", "Buffer", "Default", "Live", "Block", "Output", "Sl", "Filter", "Copy", "Collection", "l", "Layout", "Layer", "Input", "Flag", "Name", "Set"], "i": ["pi", "di", "o", "k", "x", "j", "c", "ci", "yi", "a", "start", "int", "ind", "s", "ini", "ui", "t", "ni", "id", "y", "ix", "index", "ip", "eni", "si", "u", "iu", "e", "f", "I", "ti", "b", "ai", "z", "qi", "l", "v", "ii", "li", "r", "m", "ih", "p"], "s_l": ["s_p", "S_ol", "s_e", "s2p", "s_s", "s_dl", "s2l", " s_ls", "s_ls", "s2s", " s_s", " s_p", "s_ol", "s2ls", "S_e", "S_l", "S_dl"], "n": ["o", "cn", "k", "x", "j", "c", "nb", "pos", "ind", "num", "s", "t", "ni", "y", "nn", "index", "number", "nu", "u", "len", "f", "nt", "e", "b", "ns", "sn", "z", "l", "v", "ii", "m", "r", "nc", "p", "N"]}}
{"code": "\\nm = map(int, raw_input().split())\\na = [map(int, raw_input().split()) for i in xrange(m[0])]\\nb = [int(raw_input()) for i in xrange(m[1])]\\nfor i in xrange(m[0]):\\n    print sum(a[i][j] * b[j] for j in xrange(m[1]))", "target": "614", "substitutes": {"m": ["o", "wm", "mc", "k", "x", "tm", "c", "fm", "gm", "d", "nm", "rm", "n", "an", "s", "t", "range", "y", "machine", "g", "h", "ms", "ym", "cm", "model", "me", "u", "f", "e", "mu", "mi", "sm", "mm", "im", "module", "pm", "dm", "z", "w", "l", "v", "hm", "r", "M", "p", "bm"], "a": ["ma", "area", "o", "k", "x", "c", "aw", "d", "ab", "ac", "n", "mA", "da", "an", "s", "array", "A", "y", "alpha", "sa", "ia", "aa", "la", "u", "f", "e", "am", "ca", "ga", "ai", "w", "ba", "l", "r", "p", "au"], "i": ["ik", "pi", "it", "o", "di", "ji", "k", "x", "xi", "c", "sp", "ci", "yi", "oi", "ri", "ie", "start", "int", "ind", "n", "ni", "bi", "id", "iq", "ij", "index", "ip", "si", "u", "iu", "f", "I", "ti", "mi", "ai", "ani", "z", "p", "qi", "l", "v", "ii", "li", "io"], "b": ["o", "k", "x", "c", "db", "d", "cb", "nb", "ab", "B", "bd", "n", "y", "bs", "g", "ib", "bin", "wb", "u", "lb", "f", "e", "ad", "base", "sb", "ba", "l", "v", "bb", "p"], "j": ["kj", "ik", "ji", "o", "k", "x", "xi", "c", "d", "oi", "ie", "ind", "n", "J", "jit", "id", "y", "key", "ij", "jl", "jo", "si", "u", "ja", "f", "je", "obj", "jj", "q", "dj", "ai", "z", "l", "jp", "v", "ii", "li", "p", "uj", "block"]}}
{"code": "N = int(input())\\narray = [input() for i in range(N)]\\ncount_AC = 0\\ncount_TLE = 0\\ncount_RE = 0\\ncount_WA = 0\\nfor i in array:\\n    if i == \"AC\":\\n        count_AC += 1\\n    elif i == \"TLE\":\\n        count_TLE += 1\\n    elif i == \"RE\":\\n        count_RE += 1\\n    elif i == \"WA\":\\n        count_WA += 1\\nprint(\"AC x \"+str(count_AC))\\nprint(\"WA x \"+str(count_WA))\\nprint(\"TLE x \"+str(count_TLE))\\nprint(\"RE x \"+str(count_RE))", "target": "531", "substitutes": {"N": ["NA", "II", "D", "S", "R", "NS", "B", "Ns", "T", "n", "W", "J", "Y", "A", "L", "Ni", "Len", "NT", "number", "No", "Length", "Count", "I", "Number", "X", "NO", "C", "NI", "Ne", "RN", "V", "OS", "P", "K", "O", "M", "F", "Z"], "array": ["area", "string", "input", "object", "response", "ar", "pair", "data", "section", "format", "record", "answer", "int", "instance", "all", "Array", "list", "range", "A", "archive", "var", "result", "arr", "ray", "wave", "analysis", "collection", "image", "sample", "index", "number", "sequence", "batch", "row", "function", "vector", "shape", "series", "audio", "count"], "i": ["ik", "pi", "di", "it", "iw", "x", "xi", "j", "idi", "c", "gi", "ci", "d", "oi", "ri", "phi", "a", "io", "ie", "int", "ind", "n", "s", "ini", "ui", "t", "ni", "bi", "id", "iq", "y", "iri", "ip", "multi", "si", "iii", "u", "iu", "f", "I", "ti", "e", "b", "ai", "z", "p", "qi", "chi", "v", "ii", "ic", "li", "r", "ih", "ei", "zi"], "count_AC": ["countLocalAC", "count_AF", "countOfACK", "countLocalACK", "count_ACA", "count_ac", "count___AF", "countCorrectRE", "countOfAC", " count_ACA", "count___ac", "count___AC", "count_ACK", "count_ACE", " count_ACK", "countCorrectAC", "count___ACC", "countCorrectACE", "countOfACE", " count_ACC", "countLocalRE", "countCorrectACA", "count_ACC", " count_ac", " count_AF", " count_ACE", "countOfRE", "countLocalACE"], "count_TLE": ["count_Tale", "countPolyUTle", "count_TEle", "count_LPE", "countPolyTLE", "count_Tle", "countPolyTale", "count_TEPE", "count_TLES", "count_WLE", "count_FLE", "count_TEale", "count_Wle", "count_WLES", "count_FPE", "count_Fle", "count_UTREE", "count_LORE", "count_TREE", "count_FLES", "count_FREE", "count_UTLE", "count_LLE", "countPolyUTLE", "countPolyTle", "count_WPE", "count_TEREE", "count_TORE", "count_UTle", "count_TWle", "count_UTale", "countPolyUTale", "count_Fale", "count_TPE", "count_FORE", "count_TELE", "count_TWORE", "count_TWPE", "count_TELES", "countPolyTREE", "count_TWLE", "countPolyUTREE", "count_Lle"], "count_RE": ["countIdEE", "count_WR", "countPFE", "countPRE", "count_EE", "lengthLogWR", "count_W", "countLogRE", "countAllWR", "countAllFE", "countLogRA", "lengthLogRA", "countLogSE", " count_EE", "count_FE", "length_SE", "countIdRE", "count_RA", "countIdRA", "countPWR", " count_W", "countPWA", "count_SE", "countAllWA", "countLocalEE", "length_RE", "lengthLogRE", "lengthLogSE", "countIdW", "length_WR", "countLocalW", " count_WR", "countLogWR", "countLocalRE", "countAllRE", "length_RA", " count_FE", " count_RA", "countLocalRA"], "count_WA": ["countPerWT", "countPerTA", "countAllRA", "countPerWS", "countPerWE", " count_WT", "countAllWS", " countJWS", "count_W", "countPerW", "countJWE", "countPerWA", " count_AA", "count_WT", "countPolyWA", "count_RA", " count_W", " countJWT", "countPolyRE", "countAllWA", " count_WS", "countPolyAA", " count_TA", "countJWA", "countPolyRA", "countAllWT", "countJWS", " countJWE", "countAllAA", "count_WE", "countAllRE", "count_WS", " count_WE", " countJWA", "countAllWE", "count_TA", "countJWT", "count_AA", " count_RA"]}}
{"code": "n = int(input())\\ndata = list(map(int, input().split()))\\n\\ndef gcd(a, b):\\n    while b:\\n        a, b = b, a % b\\n        # print(\"a b\", a, b)\\n    return a\\n\\nleft_ = [0] * (n + 1)\\nright_ = [0] * (n + 1)\\nans = []\\n\\nfor i in range(n):\\n    left_[i] = gcd( left_[i-1], data[i] )\\n\\nfor i in range(n-1, 0, -1):\\n    right_[i] = gcd( right_[i+1], data[i] )\\n\\nfor i in range(n):\\n    ans += [ gcd( left_[i-1], right_[i+1] ) ]\\n\\nprint( max(ans) )\\n", "target": "94", "substitutes": {"n": ["o", "j", "c", "nb", "name", "num", "s", "i", "network", "nn", "bin", "number", "len", "N", "f", "e", "ns", "no", "init", "l", "m", "r", "nc", "p", "count"], "data": ["window", "input", "x", "output", "Data", "num", "list", "array", "result", "arr", "alpha", "split", "div", "blocks", "index", "next", "bin", "number", "batch", "function", "size", "shift", "DATA", "dat", "p", "block", "count"], "a": ["k", "x", "j", "c", "aw", "d", "ak", "ac", "ab", "B", "af", "pa", "da", "an", "array", "A", "fa", "i", "y", "alpha", "sa", "beta", "aa", "u", "e", "f", "ad", "ca", "ga", "ai", "w", "ae", "aaa", "ba", "aj", "bb", "m", "p", " A"], "b": ["eb", "mb", "x", "pb", "abb", "c", "db", "bt", "d", "cb", "nb", "ab", "B", "bc", "Bi", "BB", "xb", "binary", "s", "an", "rb", "A", "bi", "i", "y", "bs", "bar", "fb", "abc", "h", "ib", "aa", "Bs", "wb", "f", "e", "ad", "base", " B", "sb", "w", "be", "aaa", "ba", "v", "bb", "r", "bf", "emb", "p"]}}
{"code": "n = int(input())\\nl = [0 for _ in range(n)]\\nalready = set()\\nnext = 1\\nc = 0\\nfor i in range(n):\\n  a = int(input())\\n  l[i] = a\\nwhile c <= n:\\n  next = l[next-1]\\n  c += 1\\n  if next == 2:\\n    print(c)\\n    break\\n  elif next in already:\\n    print(-1)\\n    break\\n  already.add(next)", "target": "573", "substitutes": {"n": ["o", "k", "x", "j", "np", "d", "nb", "num", "t", "ni", "y", "count", "network", "nn", "nl", "number", "nr", "u", "net", "size", "len", "nt", "f", "rn", "e", "b", "ns", "no", "w", "z", "m", "r", "nc", "p", "ne", "N"], "l": ["el", "ls", "o", "loc", "k", "ol", "j", "left", "kl", "ell", "all", "ll", "list", "s", "t", "L", "g", "nl", "la", "u", "e", "f", "b", "dl", "z", "v", "lc", "m", "li", "r", "ln", "p"], "_": ["k", "out", "x", " __", " p", " time", "ind", " ip", "num", " x", "ip", " id", " loop", "p"], "already": ["alazy", "ALazy", "lew", "isalnow", "elnow", "inew", "alistant", "alew", "malready", "elhere", "isalhere", "inhere", "lnow", "alnow", "malistant", "ALready", "malazy", "isalready", "allhere", "allnow", "allazy", "inready", "isalew", "lready", "allistant", "elew", "ALnow", "lhere", "alhere", "allready", "innow", "elready", "AListant", "allew", "malnow"], "next": ["cur", "sec", "future", "case", "this", "first", "open", "j", "close", "page", "current", "np", "name", "start", "second", "int", "latest", "non", "cs", "result", "pointer", "ec", "front", "nw", "more", "abc", "forward", "Next", "sequence", "aa", "last", "seq", "nr", "f", "nt", "e", "adj", "b", "max", "obj", "one", "C", "code", "new", " Next", "default", "z", "length", "skip", "now", "nc", "prev", "p", "category", "path", "count"], "c": ["cur", "loc", "case", "k", "first", "x", "j", "cy", "ci", "d", "current", "cycle", "col", "ac", "start", "uc", "s", "ch", "cs", "y", "ec", "g", "h", "last", "u", "e", "f", "b", "C", "new", "z", "lc", "r", "m", "nc", "prev", "p", "rc", "count"], "i": ["pi", "k", "x", "j", "ci", " y", "d", " I", "ac", " ii", "ori", "start", "int", " ip", "ind", "ni", "id", "y", " j", " il", "ix", " e", " z", "ip", "index", "si", " id", "u", "e", "I", " o", "f", "b", " k", "ai", "z", "v", "ii", " ic", "li", "m", "p"], "a": ["area", "auto", "ar", "d", "ac", "ab", "start", "all", "an", "s", "A", "y", "alpha", "na", "sa", "ana", "aa", "oa", "f", "e", "b", "ad", "ca", "am", "ai", "aaa", "ba", "aj", "r", "p"]}}
{"code": "s = input()\\nK = int(input())\\n\\nans = ''\\nfor i, c in enumerate(s):\\n    dif = ord('z') - ord(c) + 1\\n    dif %= 26\\n    if i == len(s) - 1:\\n        K %= 26\\n        if ord(c) + K > ord('z'):\\n            K -= 26\\n        ans += chr(ord(c) + K)\\n    elif dif <= K:\\n        ans += 'a'\\n        K -= dif\\n    else:\\n        ans += c\\nprint(ans)\\n", "target": "171", "substitutes": {"s": ["ls", "services", "parts", "S", "input", "sin", "sci", "d", "ses", "a", "n", "an", "space", "strings", "cs", "g", "os", "sections", "cells", "ks", "lines", "sq", "south", "si", "letters", "sets", "e", "f", "spec", "b", "ns", "es", "sed", "sb", "l", "sc", "r", "xs", "se", "p", "series"], "K": ["U", " NK", "KI", "KR", "D", "Ku", "k", "S", "IK", "DK", "R", "SK", "E", "Ak", "B", "T", "KE", "Ka", "W", "J", "Y", "A", "G", "L", "NK", "ANK", "KK", "ks", "AK", "Q", "PK", "AN", "I", "X", "C", " k", "NG", "V", "P", "Ke", "KA", "Sk", "KS", "KC", "H", "M", "O", "F", "CH", "AC", "N", "Z"], "ans": ["ANN", "anus", "san", "aning", "nas", "ras", "ins", "aos", "a", "ars", "ants", "aid", "amps", "ens", "args", "an", "anc", "ads", "A", "ats", "outs", "cs", "ians", "anon", "ents", "CNN", "sk", "na", "anas", "ds", "ks", "nan", "An", "ana", "can", "anes", "cons", "arts", "artifacts", "AN", "atan", "aned", "cas", "leans", "ANS", "anne", "ann", "lan", "scan", "ands", "chan", "es", "ani", "ai", "aces", "annels", "params", "ays", "aus"], "i": ["pi", "di", "o", "xi", "j", "axis", "gi", "ci", "yi", "ri", "phi", "a", "int", "ui", "ini", "ni", "bi", "y", "index", "ip", "multi", "si", "u", "iu", "fi", "e", "I", "f", "b", "ki", "im", "ai", "z", "p", "qi", "chi", "l", "ii", "li", "ei", "zi"], "c": ["o", "cn", "k", "x", "ci", "d", "csv", "cb", "col", "ac", "a", "cod", "n", "cc", "ce", "anc", "cs", "y", "ec", "g", "con", "h", "cp", "ct", "cm", "dc", "cz", "u", "e", "f", "b", "ca", "arc", "C", "w", "z", "lc", "v", "cd", "l", "r", "m", "nc", "cf", "p", "enc"], "dif": ["DIf", "cdIF", "dIf", "adIf", "dip", "xdIF", "adiff", "cdiff", "diff", "adif", "xdip", "Dain", "Diff", " dain", "xdif", "dtif", "xdIf", "Dif", "ndiff", "dain", "ndIf", " dIF", "dIF", " dIf", " diff", "cdif", "xdtif", "xdiff", "adip", "adIF", " dip", "adtif", " dtif", "ndain", "ndif"]}}
{"code": "import sys\\n\\n\\nstdin = sys.stdin\\ndef ns(): return stdin.readline().rstrip()\\ndef ni(): return int(stdin.readline().rstrip())\\ndef nm(): return map(int, stdin.readline().split())\\ndef nl(): return list(map(int, stdin.readline().split()))\\n\\n\\ndef main():\\n    a, b = nm()\\n    c = max(a, b)\\n    d = max(c - 1, min(a, b))\\n    print(c + d)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "233", "substitutes": {"stdin": ["ctins", "standardout", " stdIn", "stino", "stin", "adIn", "astout", "constout", "STDIN", " STDdin", "liveout", "liveIn", "STDin", "ctdin", "adins", "builtin", "stdins", " stdins", "stdIn", "adout", " stdout", " stdIN", "builtout", " STDins", "stout", "gestin", "STDins", " STDout", "stdino", "stins", "standardin", "adinn", "builtins", "stdinn", "liveins", "constdin", "gestino", "stddin", "STDout", " stdinn", "livein", "stdout", "constin", "astins", "gestout", "standardino", "standardins", "constins", "astino", " STDin", "ctin", " stdino", "adin", "builtinn", "gestins", "stIN", "astin", "ctout", "stdIN"], "a": ["auto", "x", "aw", "ar", "ac", "ab", "int", "n", "da", "an", "s", "A", "i", "alpha", "min", "sa", "aa", "la", "u", "e", "f", "max", "ad", "ca", "am", "ai", "ae", "w", "asa", "ba", "ea", "aj", "r", "p", "au"], "b": ["o", "part", "eb", "k", "j", "db", "nb", "ab", "B", "bc", "n", "s", "rb", "bi", "i", "y", "bs", "fb", "ib", "aa", "wb", "lb", "u", "e", "f", "ad", "sb", "w", "z", "ba", "l", "v", "r", "bb", "p"], "c": ["cur", "o", "cn", "k", "x", "cy", "ci", "ac", "uc", "n", "s", "cc", "ce", "i", "cs", "y", "ec", "g", "con", "h", "abc", "ct", "dc", "cu", "u", "size", "e", "max", "f", "ad", "ca", "unc", "C", "w", "z", "cr", "l", "lc", "cd", "m", "r", "cf", "nc", "p"], "d": ["di", "D", "dt", "k", "j", "pd", "nd", "n", "da", "s", "i", "dy", "min", "div", "fd", "ds", "dc", "dad", "e", "f", "dd", "max", "dx", "ad", "vd", " D", "z", "dn", "l", "cd", "r", "m", "p"]}}
{"code": "N,M = map(int, input().split())\\nSs = list(map(int, input().split()))\\nTs = list(map(int, input().split()))\\nmod = 10**9 + 7\\n\\nx = 2160\\ndp = [[0]*x for i in range(x)]\\nsum2d = [[0]*x for i in range(x)]\\nfor i in range(N):\\n    for j in range(M):\\n        if Ss[i] == Ts[j]:\\n            dp[i+1][j+1] = sum2d[i][j] + 1\\n        sum2d[i+1][j+1] = (dp[i+1][j+1]+sum2d[i][j+1]+sum2d[i+1][j]-sum2d[i][j])%mod\\nprint((sum2d[N][M]+1)%mod)\\n", "target": "505", "substitutes": {"N": ["U", "D", "S", "CN", "R", "NS", "E", "NE", "B", "Ns", "T", "n", "J", "W", "Y", "A", "L", "G", "NT", "NM", "NN", "MN", "No", "Q", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "B", "T", "n", "J", "W", "Y", "L", "G", "MU", "NM", "MN", "Q", "MON", "I", "X", "C", "V", "P", "MM", "K", "m", "O", "H", "F", "CM", "IM", "Z"], "Ss": ["SSs", "Rs", " Sd", " Sls", "Pd", "SS", "Rn", " Sp", " SS", "RS", "Sd", "Sn", " Sn", "SSd", "PS", "Pp", "SSn", "Ps", "Rls", "SSls", "SSp", "Sp", "Sls", "SSS"], "Ts": ["GS", "S", "Rs", "Maps", "Ws", "Us", "Vs", "Times", "Fs", "ws", "Ds", "Sin", "ss", "Ns", "T", "TS", "s", "St", "ats", "States", "Points", "os", "DS", "ts", "Numbers", "uts", "Station", "tes", "Uk", "PS", "Ms", "Types", "Os", "Settings", "WS", "Tu", "Js", "Tx", "ps", "Ps", "Tokens", "TT", "Cs", "hs"], "mod": ["sec", "mode", "step", "log", "od", "exp", "c", "d", "scale", "mult", "dec", "perm", "fun", "debug", "reg", "aug", "time", "check", "div", "min", "dim", "cond", "dig", "rem", "md", "ctr", "cm", "rep", "comp", "dem", "mods", "multi", "zip", "comb", "Mods", "row", "dd", "max", "cum", " Mod", "MOD", "Mod", "im", "com", "module", "add", "complex", "grad", "m", "sim", "form", "mix"], "x": ["step", "k", "xp", "xi", "px", "c", "_", "d", "a", "int", "n", "Y", " xx", "t", "y", " X", "xxx", "con", "ax", "h", "xt", "rx", "ix", "cm", "index", "bit", "ex", "u", "f", "e", "max", "X", "xx", "xes", "q", "w", "pm", "z", "P", "v", "l", "m", "xs", "p"], "dp": ["wp", "pi", "lp", "tp", "df", "dt", " gp", "pb", "px", "pg", "db", "sp", "d", "pd", "prep", " np", " dop", "hp", "vp", "DP", "pkg", " cp", "os", "ds", "dh", "cp", "dB", "dr", "dc", "py", "ip", "mp", "pp", "dd", "imp", "ps", "DC", " DP", "dl", "pm", "P", "dm", " tcp", "ep", "dist", "deb", "eps", "xs", "p", "gp", "fp"], "i": ["ik", "pi", "it", "o", "uri", "di", "ji", "k", "xi", "_", "c", "gi", "ci", "d", "oi", "a", "ie", "ori", "cli", "int", "ind", "n", "s", "ini", "ui", "ni", "bi", "id", "y", "info", "api", "image", "ix", "isi", "ip", "ia", "si", "il", "u", "iu", "ami", "e", "I", "f", "ti", "b", "sup", "ki", "ai", "init", "z", "p", "qi", "l", "v", "ii", "li", "m", "ei", "io"], "sum2d": ["sum1f", "sum02nd", "sum2ds", "sum1e", "sum4e", "sum4f", "mean02f", " sum4d", "sum2D", " sum02ds", "sum62nd", " sum4D", "Sum1D", "sum1nd", "Sum1f", " sum2f", "sum2nd", "Sum1d", "sum02x", "sum3x", "sum3ds", "sum3d", "sum62d", "sum62ds", " sum4f", " sum2nd", "sum02ds", "sum02e", "sum4d", "Sum2f", "Sum1ds", "Sum2d", "sum02d", " sum02d", "sum2f", "Sum2ds", "sum1D", "sum3D", " sum02x", "mean02d", " sum02D", "sum2e", " sum2D", "sum1d", "mean2f", "mean2d", "mean2e", "sum2x", "mean2D", "mean02e", " sum02nd", "sum4D", "sum1x", " sum2ds", " sum4ds", "sum3f", "mean02D", "Sum2D", "sum1ds", " sum2x", "sum4ds", "sum02f", "sum62D", "sum02D"], "j": ["kj", "note", "di", "ji", "o", "js", "k", "xi", "c", "gi", "d", "jc", "io", "ie", "a", "ind", "oj", "J", "n", "ui", "jit", "ch", "y", "key", "jan", "g", "ah", "ij", "ion", "bj", "ix", "index", "jl", "job", "jo", "br", "u", "iu", "ja", "f", "je", "e", "jet", "b", "jj", "adj", "obj", "im", "gh", "z", "qi", "l", "jp", "v", "ii", "li", "m", "fr", "aj", "p", "uj", " Xi", "zi"]}}
{"code": "import bisect\\nn = int(input())\\nA = tuple(map(int,input().split()))\\nq = int(input())\\nQ = tuple(map(int, input().split()))\\ndp = [0]*(2**n)\\n\\nfor i in range(n):\\n    for j in range(1<<i):\\n        dp[j+(1<<i)] = dp[j] + A[i]\\ndp.sort()\\n\\nfor n in Q:\\n    i = bisect.bisect(dp, n)\\n    print(\"yes\" if i>0 and n==dp[i-1] else \"no\")", "target": "279", "substitutes": {"n": ["NA", "o", "k", "x", "c", "d", "ng", " N", "nb", "a", "nd", "num", "an", "s", "t", "ni", "y", "nw", "na", "g", "en", "nn", "nan", "un", "nl", "nu", "u", "net", "f", " number", "e", "nt", "b", "ns", "pn", "sn", "Na", "ai", "w", "z", "l", "v", "ii", "r", "m", "nc", "p", "N"], "A": ["As", "U", "NA", "D", "S", "au", "Alpha", "a", "B", "CA", "T", "PA", "At", "Array", "Y", "array", "AM", "DP", "AD", "Am", "G", "AS", "alpha", "AI", "BA", "An", "AP", "Ar", "I", "AA", "am", "X", "C", "V", "ai", "P", "API", "p", "N", "LA"], "q": ["k", "x", "c", "d", "a", "qs", "depth", "t", "y", "alpha", "qa", "g", "h", "sq", "u", "f", "b", "qq", "aq", "w", "P", "z", "l", "m", "p", "qu", "count"], "Q": ["U", "D", "S", "MQ", "R", "E", "IQ", "B", "T", "W", "J", "Array", "Y", "G", "L", "I", "X", "C", "qq", "V", "P", "K", "NP", "Query", "Ch", "H", "M", "F", "dq", "N", "Z"], "dp": ["df", "lp", "tp", "pi", "dt", "D", "di", "pid", "pb", "pg", "db", "dq", "np", "d", "pd", "pair", "data", "a", "pos", "da", "array", "DP", "pkg", "alpha", "qa", "dim", "ds", "cp", "dr", "cm", "dc", "ip", "rep", "pp", "address", "pre", "imp", "dd", "dep", "ps", "DC", "dl", "pm", "P", "dm", "ep", "params", "CP", "dn", "NP", "grad", "deb", "dist", "eps", "dat", "p", "gp", "fp"], "i": ["pi", "di", "ji", "o", "uri", "k", "x", "xi", "c", "gi", "ci", "d", "phi", "oi", "ri", "a", "ie", "int", "ind", "ini", "ui", "ni", "bi", "id", "y", "index", "eni", "si", "u", "iu", "fi", "e", "I", "f", "ti", "b", "jj", "hi", "ki", "ai", "z", "qi", "v", "l", "ii", "li", "m", "p", "zi"], "j": ["ji", "o", "k", "x", "c", "d", "a", "jc", "ie", "ind", "J", "num", "ui", "y", "key", "ij", "h", "index", "jl", "jo", "si", "u", "ja", "f", "I", "e", "b", "jj", "z", "v", "jp", "l", "ii", "li", "r", "p", "uj"]}}
{"code": "N = int(input())\\nS = list(map(int, input()))\\nans = 0\\nfirst = [0] * 10\\na = 0\\nfor i in range(N):\\n  if first[S[i]] == 0:\\n    first[S[i]] = 1\\n    a += 1\\n    second = [0] * 10\\n    b = 0\\n    for j in range(i+1, N):\\n      if second[S[j]] == 0:\\n        second[S[j]] = 1\\n        b += 1\\n        third = [0] * 10\\n        c = 0\\n        for k in range(j+1, N):\\n          if third[S[k]] == 0:\\n            third[S[k]] = 1\\n            ans += 1\\n            c += 1\\n            if c == 10:\\n              break\\n        if b == 10:\\n          break\\n    if a == 10:\\n      break\\nprint(ans)", "target": "756", "substitutes": {"N": ["NA", "D", "Max", "R", "NS", "E", "NL", "NC", "B", "Ns", "T", "n", "J", "W", "Y", "A", "L", "G", "Num", "NB", "NT", " n", "Size", "No", "Q", "I", "X", "C", "Na", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "S": ["U", "SE", "SH", "II", "Spec", "D", "SS", "Us", "Sync", "R", "NS", "SK", "E", "Sample", "US", "Ds", "Site", "Cass", "Sin", "Second", "B", "Sing", "Ns", "T", "System", "Data", "J", "Si", "SI", "s", "Es", "Y", "A", "L", "G", "Source", "Part", "String", "First", "Sa", "St", "Single", "Se", "DS", "ST", "Os", "WS", "Sign", "I", "Socket", "X", "SU", "C", "Sc", "Ps", "Su", "Is", "V", "Sl", "P", "OS", "K", "Cs", "Session", "You", "Service", "Sum", "Sh", "H", "M", "F", "Z"], "ans": ["x", "anus", "aning", "nas", "ras", "ins", "ars", "ants", "bc", "ss", "da", "an", "s", "anc", "A", "cs", "alpha", "ams", "sk", "CNN", "na", "os", "sa", "anon", "anas", "plan", "ds", "gan", "ks", "ana", "nan", "An", "can", "lines", "AN", "atan", "aned", "leans", "ANS", "dd", "ann", "lan", "ns", "ca", "scan", "ad", "Na", "ons", "ands", "ani", "ai", "ae", "aus", "any"], "first": ["auto", "part", "case", "full", "plus", "prev", "current", "primary", "back", "only", "name", "start", "head", "single", "all", "initial", "array", "First", "space", "share", "root", "alpha", "split", " First", "front", "na", "min", "blocks", "self", "parent", "next", "th", "st", "then", "host", "last", "final", "default", "one", "before", "support", "sign", "now", "small", "top"], "a": ["area", "x", "d", "ar", "ac", "ab", "af", "n", "da", "an", "s", "A", "fa", "y", "alpha", "sa", "ax", "aa", "u", "f", "e", "ad", "ca", "am", "ai", "w", "ae", "aaa", "ba", "z", "l", "aj", "r", "ap", "p"], "i": ["ik", "pi", "di", "ji", "x", "xi", "ci", "yi", "ri", "io", "ie", "start", "ori", "ind", "n", "s", "ui", "ini", "bi", "id", "y", "ix", "jl", "ip", "eni", "si", "u", "iu", "f", "I", "mi", "im", "ai", "z", "qi", "v", "l", "ii", "li", "m", "ih", "p", "vi"], "second": ["unit", "sec", "future", "letter", "central", "later", "element", "common", "moon", "account", "left", "section", "Second", "fourth", "ss", "nd", "eight", "system", "double", "secondary", "billion", "split", "zero", "front", "vert", "again", "version", "division", "next", "conference", "lower", "last", "south", "size", "fifth", "be", "ond", " seconds", "now", "another", "small", "middle", "two", "seconds"], "b": ["o", "x", "d", "ab", "ac", "B", "bc", "n", "s", "bi", "y", "bs", "g", "h", "aa", "u", "f", "e", "ad", "ca", "ae", "w", "z", "ba", "l", "v", "r", "bb", "p"], "j": ["kj", "ik", "ji", "o", "js", "x", "d", "jc", "ie", "n", "J", "s", "ch", "y", "key", "jan", "h", "ij", "jl", "jo", "u", "ja", "f", "je", "e", "end", "jj", "q", "w", "z", "v", "jp", "l", "ii", "m", "li", "p"], "third": ["step", "rest", "central", "rd", "ced", "element", "later", "square", "primary", "cle", "back", "minute", "three", "fourth", "half", "system", "thirds", "nd", "teenth", "instance", "ck", "td", "entry", "div", "ack", "division", "Third", "th", "next", "then", "odd", "last", "fifth", "default", "sup", "ga", " thirds", "ultimate", "right", "now", "middle"], "c": ["sec", "cn", "x", "cy", "ci", "d", "col", "ac", "fc", "n", "an", "s", "ce", "cc", "cs", "y", "ec", "h", "dc", "xc", "u", "f", "e", "ca", "unc", "C", "arc", "ae", "w", "z", "l", "v", "lc", "pc", "r", "cf", "nc", "p"], "k": ["ik", "o", "kn", "ke", "x", "kk", "d", "ak", "kh", "n", "ck", "s", "kick", "ch", "id", "y", "key", "sk", "h", "ok", "ks", "uk", "kid", "th", "u", "f", "e", "ki", "q", "w", "z", "K", "v", "p", "ka", "ku"]}}
{"code": "a,b=map(int,input().split())\\nans=0\\nif a>=13:\\n  ans=b\\nelif 6<=a and a<=12:\\n  ans=b//2\\nprint(ans)", "target": "799", "substitutes": {"a": ["ma", "area", "ha", "acha", "c", "aw", "ar", "ama", "ab", "ac", "wa", "cha", "af", "pa", "int", "da", "an", "A", "fa", "alpha", "na", "sa", "abc", "ana", "aa", "la", "u", "va", "f", "e", "ad", "ca", "am", "ga", "asha", "ai", "ae", "asa", "ta", "ba", "ea", "ada", "p", "aea", "ka", "au"], "b": ["eb", "mb", "x", "abb", "c", "d", "ob", "nb", "cb", "ab", "B", "bc", "bd", "n", "xb", "ben", "rb", "bot", "i", "bi", "y", "bs", "bar", "fb", "abc", "h", "big", "beta", "aa", "wb", "br", "u", "f", "e", "ad", "base", "sb", "be", "ba", "v", "l", "bb", "bf", "r", "p", "bp"], "ans": ["ls", "aning", "anned", "nas", "ras", "ins", "reads", "ars", "ants", "amps", "ens", "ean", "an", "anc", "s", "man", "ads", " means", "ats", "cs", "ents", "anon", "ches", "sk", "na", "comments", "anas", "ds", "ks", "ana", "can", "anes", "cons", "arts", "AN", "atan", "aned", "anne", "leans", "ANS", "ann", "ad", "ns", "ane", "ons", "lan", "ands", "ends", "es", "chan", "no", "scan", "ani", "aces", "ays", "eps", "aus", "any"]}}
{"code": "s = input()\\n\\nstack = [s[0]]\\nans = 0\\nfor i in range(1, len(s)):\\n    if len(stack) == 0:\\n        stack.append(s[i])\\n        continue\\n    if s[i] == \"0\":\\n        if stack[-1] == \"1\":\\n            del stack[-1]\\n            ans += 2\\n        else:\\n            stack.append(\"0\")\\n    else:\\n        if stack[-1] == \"0\":\\n            del stack[-1]\\n            ans += 2\\n        else:\\n            stack.append(\"1\")\\n\\nprint(ans)", "target": "40", "substitutes": {"s": ["states", "parts", "ls", "services", "string", "S", "ssl", "input", "c", "d", "slice", "ins", "ses", "ws", "a", "acks", "sl", "n", "args", "an", "t", "strings", "cs", "os", "g", "ds", "ts", "gs", "st", "sf", "sq", "si", "u", "sets", "e", "f", "b", "ps", "ns", "stuff", "es", "sb", "w", "l", "v", "less", "m", "xs", "p"], "stack": ["history", "case", "x", "trace", "input", "c", "sp", "slice", "left", "tc", "back", "acks", "data", "start", "scope", "context", "fl", "diff", "sl", "int", "n", "view", "all", "switch", "list", "array", "cache", "config", "space", "depth", "test", "loop", "check", "script", "ack", "pack", "self", "index", "set", "st", "Stack", "stream", "thread", "play", "f", "tree", "end", "shape", "load", "support", "white", "sn", "stage", "scroll", "pop", "w", "counter", "level", "layer", "chain", "v", "l", "lc", "style", "ace", "xs", "flat", "p", "flow", "cl"], "ans": ["states", "ls", "san", "aning", "nas", "ins", "acks", "ars", "ants", "atten", "vs", "stan", "ens", "args", "ean", "an", "list", "anc", "ops", "array", "outs", "cs", "arr", "anon", "sk", "anas", "plan", "ds", "anse", "ana", "nan", "nn", "span", "fan", "can", "anes", "lines", "lists", "AN", "cas", "aned", "ase", "ANS", "ania", "ann", "lan", "ns", "ane", "scan", "ai", "aces", "ays", "mean", "flat", "han", "xs", "acs", "aus", "ons"], "i": ["mini", "pi", "di", "uri", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "a", "io", "ie", "start", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", "uni", "ix", "index", "si", "u", "iu", "e", "f", "I", "ti", "b", "mi", "ai", "z", "l", "v", "ii", "li", "m", "p"]}}
{"code": "import sys,math,collections,itertools\\ninput = sys.stdin.readline\\n\\nN=int(input())\\np=list(map(int,input().split()))\\npa = []\\ncnt = 0\\nfor i in range(N):\\n    if i+1 == p[i]:\\n        cnt +=1\\n    elif i+1 != p[i] and cnt>0:\\n        pa.append(cnt)\\n        cnt =0\\nif cnt >0:\\n    pa.append(cnt)\\ncnt = 0\\nfor cn in pa:\\n    cnt += cn//2+cn%2\\nprint(cnt)\\n", "target": "77", "substitutes": {"input": ["string", " inspect", "type", "element", "out", "feed", "search", "current", "param", "argument", "raw", "output", "data", " Input", "format", "expression", "submit", "int", "print", "util", " output", "view", "pull", "array", " int", "space", "enter", "result", "call", "INT", "entry", "radio", "url", "iter", "parent", " incoming", "request", "source", "error", "hidden", " inputs", "process", "help", "reader", "insert", "select", "load", "inf", "save", "accept", "wait", "text", "conf", "Input", "comment", "until", "exec", "temp", "form", "path", "method"], "N": ["D", "S", "CN", "R", "NS", "NC", "B", "Ns", "T", "n", "W", "J", "Y", "Ni", "L", "G", "A", "Num", "SN", "CNN", "NT", "NM", " n", "NN", "Q", "I", "Number", "X", "C", "NI", "Ne", "V", "P", "K", "O", "M", "F", "Z"], "p": ["lp", "pi", "o", "tp", "j", "c", "sp", "np", "a", "pos", "n", "s", "list", "array", "t", "po", "bp", "y", "api", "python", "h", "pr", "u", "pp", "e", "pre", "b", "ps", "q", "w", "P", "pm", "v", "jp", "l", "pc", "m", "pe", "fp"], "pa": ["Pa", "lp", "pi", "pb", "iao", " ta", "a", "wa", "ota", "PA", "n", "iana", "list", "po", "fa", "bp", "ppa", "api", "python", "apa", "qa", "sa", "na", "pse", "ana", "pr", "la", "aa", "ja", "oa", " Pa", " ja", "pan", "ps", "ca", "tta", "opa", "pai", "pm", "P", "ta", "ba", "ea", "jp", " PA", "pc", "ampa", "ap", "pe", "appa", "LA"], "cnt": ["nct", "lcount", "rcrt", " cno", "ecNT", "acont", "ecct", "dcrt", "kNT", "cpt", "count", "csnt", "scnd", "nrt", "cno", "CNT", "nont", "conno", "csct", "pcnc", " cnd", " cpt", "scnt", "csrt", "lcpt", "lcNT", "lcrt", "scpt", "cnd", "dcct", "knt", "scct", "Cpt", "rcct", " count", "lcnc", "connt", "rcno", "lcnn", "lcnt", "nnt", "econt", "dcount", "cnn", "kct", "ecnt", "acNT", "lcct", "cnc", "cct", "lcnd", "pcnt", "cNT", "cont", " cnn", "pcrt", " crt", " cct", "conont", "acct", "pcct", "Cnc", "Cont", "csont", "conct", "Cno", "lcno", "acnt", "Crt", "kont", "nnn", "dcnt", " cont", "Cnt", " cnc", "Cct", "rcnt", "crt", " cNT"], "i": ["pi", "di", "o", "ji", "k", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "phi", "oi", "a", "io", "ie", "start", "ori", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", "index", "multi", "eni", "si", "u", "iu", "e", "ti", "I", "f", "b", "mi", "im", "ai", "z", "qi", "v", "l", "ii", "li", "zi"], "cn": ["core", "CN", "c", "ci", "ac", "fc", "n", "bn", "num", "cc", "ni", "cs", "mn", "na", "con", "cp", "ct", "nan", "nn", "cm", "span", "dc", " c", "xc", "net", "fn", "rn", "pan", "ns", "pn", "ca", "sn", "dn", "cr", "lc", "gn", "pc", "nc", "bp", "conn"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\nfrom collections import deque\\n\\nif __name__ == '__main__':\\n    n = int(input())\\n    L = deque()\\n\\n    for _ in range(n):\\n        command = input().split(\" \")\\n        if command[0] == \"insert\":\\n            L.appendleft(command[1])\\n        elif command[0] == \"delete\":\\n            try:\\n                L.remove(command[1])\\n            except:\\n                pass\\n        elif command[0] == \"deleteFirst\":\\n            L.popleft()\\n        elif command[0] == \"deleteLast\":\\n            L.pop()\\n\\n    print(\" \".join(L))\\n\\n", "target": "232", "substitutes": {}}
{"code": "# input\\nN = int(input())\\nK = int(input())\\n\\n# defnition\\nN_bin = str(N)\\ndigit_len_N = len(N_bin)\\nDP = [[[0]*(K+2) for _ in range(2)] for _ in range(digit_len_N+1)]\\n# DP[i][j][k]\u306f\u3001\u4e0a\u4f4di\u6841\u76ee\u307e\u3067\u3067\u3001(j==0 ?N\u3068\u540c\u3058\u306b\u306a\u308b\u53ef\u80fd\u6027\u3042\u308a:\u5fc5\u305aN\u3088\u308a\u5c0f\u3055\u304f\u306a\u308b)\u306e\u6642\u306b\u30010\u4ee5\u5916\u306e\u6570\u304ck\u3053\u51fa\u73fe\u3059\u308b\u3001\u6570\u5b57\u306e\u6570\\n\\n\\n# initialize\\nDP[0][0][0] = 1\\n\\n# solve with \u3051\u305fDP\\nfor digit in range(digit_len_N):\\n    max_digit = int(N_bin[digit])\\n    for smaller in range(2):  # smaller=0?N\u3068\u540c\u3058\u306b\u306a\u308b\u53ef\u80fd\u6027\u3042\u308a:N\u3088\u308a\u5c0f\u3055\u3044\u306e\u78ba\u5b9a\\n        for k in range(K+1):\\n            cand_digits = max_digit+1 if smaller == 0 else 10  # \u5c0f\u3055\u3044\u78ba\u5b9a\u306a\u30890~9\u306e\u5168\u90e8\u304c\u5019\u88dc\\n            for next in range(cand_digits):\\n                if next == max_digit and smaller == 0:  # N\u3068\u540c\u3058\u306b\u306a\u308b\u53ef\u80fd\u6027\u3092\u6b8b\u3057\u3064\u3064\\n                    if next == 0:  # 0\u306e\u3068\u304d\u306f,k\u306e\u5024\u304c\u5897\u3048\u306a\u3044\u306e\u3067\u7279\u5225\u6271\u3044\\n                        DP[digit+1][0][k] += DP[digit][0][k]\\n                    else:\\n                        DP[digit+1][0][k+1] += DP[digit][0][k]\\n                else:  # \u3053\u3053\u3067\u3001N\u3088\u308a\u5fc5\u305a\u5c0f\u3055\u3044\u9053\u306b\u884c\u304f\\n                    if next == 0:  # 0\u306e\u3068\u304d\u306f,k\u306e\u5024\u304c\u5897\u3048\u306a\u3044\u306e\u3067\u7279\u5225\u6271\u3044\\n                        DP[digit+1][1][k] += DP[digit][smaller][k]\\n                    else:\\n                        DP[digit+1][1][k+1] += DP[digit][smaller][k]\\nprint(DP[-1][0][K]+DP[-1][1][K])\\n", "target": "470", "substitutes": {}}
{"code": "import sys\\n\\n\\nfor line in sys.stdin:\\n    nums = list(map(int, line.split()))\\n    res = \"Yes\" if nums[0] < nums[1] < nums[2] else \"No\"\\n    print(res)\\n\\n", "target": "554", "substitutes": {"line": ["unit", "file", "frame", "string", "log", "out", "input", "response", "page", "Line", "output", "name", "data", "raw", "LINE", "int", "all", "list", "result", "linux", "key", "entry", "val", "cell", "console", "word", "nl", "header", "source", "lines", "number", "row", "function", "message", "lin", "run", "parse", " lines", "reader", "func", "code", "status", " code", "l", "block"], "nums": ["Nums", "coms", " noms", "nanumbers", " nanges", " numes", "cums", "num", "enums", "Num", "enoms", " numeric", "nanges", "nanums", "nues", "Numeric", "Nues", "Numbers", "enumbers", "cumbers", "Noms", "cues", "noms", "nananges", "nanumes", "numes", "numeric", "cum", "Numes", " num", "Nanges", "enumeric", " nues", "numbers", " numbers"], "res": ["rs", "rest", "Result", "err", "resolution", "work", "our", "response", "results", "sys", "re", "rus", "mer", "press", "rez", "RES", "reg", "result", "Res", "arr", "val", "pres", "ret", "vals", "box", "row", "reply", "reset", "rev", "resp", " Res", "gr", "status", "Results", "r", "msg", "req", "sr"]}}
{"code": "N = int(input())\\nX_list = list(map(int, input().split()))\\nX_list_min = sorted(X_list)\\n\\nans = 10**8+1\\n\\nfor i in range(X_list_min[0], X_list_min[-1]+1):\\n    ans_temp = 0\\n    for j in range(N):\\n        ans_temp += (X_list_min[j] - i)**2\\n    ans = min(ans, ans_temp)\\nprint(ans)", "target": "46", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "NC", "NE", "B", "Ns", "T", "n", "J", "Y", "Ni", "L", "Num", "NT", "NN", "MN", "Q", "I", "X", "C", "NI", "Ne", "V", "P", "K", "O", "M", "F", "Z"], "X_list": ["XParlist", "X_array", "X_lists", "Data_array", "X_l", "XX_list", "XX2list", "DataSubarray", "X2List", "XSubl", "XSubarray", "DataSublists", "Data_list", "XX_List", "X_record", "XPararray", "Data_l", "X2record", "XX2List", "XParlists", "DataSublist", "X_List", "XSublist", "XParl", "XX2record", "XX_record", "X2list", "XSublists", "DataSubl", "Data_lists"], "X_list_min": ["X_listenmax", "X_l_min", "X_list_max", "X_test_sort", "X_test_diff", "X_list_mins", "X_test__sort", "X_list__sort", "X_l_version", "X_test__all", "X_listenmins", "X_test_min", "X_l_mins", "X_list__all", "X_list_all", "X_list_size", "X_list__min", "X_list__max", "X_list_sort", "X_list__diff", "X_test__diff", "X_list__size", "X_test_all", "X_test__min", "X_listenversion", "X_l_max", "X_list__version", "X_l_size", "X_listenmin", "X_list_diff", "X_list_version", "X_l_diff"], "ans": ["asses", "anus", "san", "aning", "anned", "nas", "ins", "ars", "ants", "amps", "ens", "an", "anc", "s", " means", "ats", " spans", "asts", "ents", "ams", "sk", "na", "os", "anas", "ds", "anse", "ks", "nan", "An", "ana", "span", "can", "anes", "AN", "atan", "aned", "leans", "anne", "ANS", "activation", "ann", "lan", "ns", "ane", "es", "ani", "ai", "mean", "aus", "ons"], "i": ["ik", "it", "ji", "k", "x", "xi", "axis", "gi", "c", "d", "a", "ie", "start", "ind", "n", "ini", "ni", "id", "y", "ij", "ib", "ia", "ix", "index", "ip", "u", "f", "I", "e", "ti", "b", "im", "ai", "z", "p", "l", "v", "ii", "li", "m", "io"], "ans_temp": ["ans_tem", "ans2temp", "ans___temp", "ans_extra", " means_unit", "na_only", " means_temp", "ans1temp", "ans1min", "ans___tem", "na2tmp", "ans_tmp", "na_tmp", "aned2max", " means_extra", "ans___tmp", "ans_unit", "ans___only", "na2only", "ans2max", "ans1tmp", "na2tem", "aned_max", "na_tem", "ans_only", "ans2tem", " means_tmp", "ans2tmp", "aned_min", "na2temp", "aned_temp", "ans2min", "ans1extra", "ans2only", "ans_max", "aned2min", "na_temp", "ans1max", "ans_min", "aned2temp", "ans1unit"], "j": ["kj", "ji", " J", "o", "k", "xi", "jc", "ie", "pos", "oj", "n", "J", "ind", "jit", "ch", "y", " _", "ij", "bj", "job", "ix", "jl", "ip", "jo", "si", "u", "e", "je", "I", "adj", "end", "jj", "b", "im", "dj", "q", "z", "l", "jp", "v", "ii", "li", "m", "p", "uj"]}}
{"code": "import bisect\\nimport copy\\nimport heapq\\nimport math\\nimport sys\\nfrom collections import *\\nfrom itertools import accumulate, combinations, permutations, product\\n# from math import gcd\\ndef input():\\n    return sys.stdin.readline()[:-1]\\ndef ruiseki(lst):\\n    return [0]+list(accumulate(lst))\\nmod=pow(10,9)+7\\nal=[chr(ord('a') + i) for i in range(26)]\\ndirection=[[1,0],[0,1],[-1,0],[0,-1]]\\n\\nn,m,p=map(int,input().split())\\nabc=[list(map(int,input().split())) for i in range(m)]\\n\\n#True : \u8ca0\u306e\u7d4c\u8def\u304c\u5b58\u5728\u3059\u308b\\ndef find_negative_loop1(n,w,es):\\n    #\u8ca0\u306e\u7d4c\u8def\u306e\u691c\u51fa\\n    #n:\u9802\u70b9\u6570, w:\u8fba\u306e\u6570, es[i]: [\u8fba\u306e\u59cb\u70b9,\u8fba\u306e\u7d42\u70b9,\u8fba\u306e\u30b3\u30b9\u30c8]\\n    d = [float(\"inf\")] * n\\n    d[0] = 0\\n    infdic=defaultdict(int)\\n    #\u3053\u306e\u59cb\u70b9\u306f\u3069\u3053\u3067\u3082\u3088\u3044\\n    for i in range(n):\\n        for j in range(w):\\n            e = es[j]\\n            if d[e[1]] > d[e[0]] + e[2]:\\n                d[e[1]] = d[e[0]] + e[2]\\n                if i == n-1:\\n                    infdic[e[0]]=1\\n    return infdic\\n\\ndef find_negative_loop2(n,w,es,infd):\\n    #\u8ca0\u306e\u7d4c\u8def\u306e\u691c\u51fa\\n    #n:\u9802\u70b9\u6570, w:\u8fba\u306e\u6570, es[i]: [\u8fba\u306e\u59cb\u70b9,\u8fba\u306e\u7d42\u70b9,\u8fba\u306e\u30b3\u30b9\u30c8]\\n    d = [float(\"inf\")] * n\\n    d[0] = 0\\n    for i in infd.keys():\\n        d[i]=-float('inf')\\n    #\u3053\u306e\u59cb\u70b9\u306f\u3069\u3053\u3067\u3082\u3088\u3044\\n    for i in range(n):\\n        for j in range(w):\\n            e = es[j]\\n            if d[e[1]] > d[e[0]] + e[2]:\\n                d[e[1]] = d[e[0]] + e[2]\\n                # if i == n-1:\\n                #     return True\\n    return d\\n\\n\\n#############################\\nw = m\\nes = [[] for i in range(w)] #es[i]: [\u8fba\u306e\u59cb\u70b9,\u8fba\u306e\u7d42\u70b9,\u8fba\u306e\u30b3\u30b9\u30c8]\\nfor i in range(w):\\n    x,y,z = abc[i]\\n    es[i] = [x-1,y-1,p-z]\\n# w = w*2\\n# print(es)\\n\\ntmp=find_negative_loop1(n,w,es)\\n# print(tmp)\\ntmp2=find_negative_loop2(n,w,es,tmp)\\n# print(tmp2)\\nif tmp2[-1]==-float('inf'):\\n    print(-1)\\nelse:\\n    print(-min(tmp2[-1],0))", "target": "88", "substitutes": {}}
{"code": "import sys\\nimport math\\ninput=sys.stdin.buffer.readline\\nh,w=map(int,input().split())\\nans=math.ceil(h*w/2)\\nprint(1 if min(h,w)==1 else ans)", "target": "12", "substitutes": {"input": ["unit", "string", "type", "out", "param", "raw", "output", "a", "data", "wa", " Input", "format", "expression", "submit", "int", "print", "util", "view", "pull", "option", " int", "array", "keep", "source", "header", "f", "fn", "help", "reader", "select", "eval", "ref", "str", "Input", "until", "exec", "temp", "flow", "method"], "h": ["height", "o", "ha", "k", "x", "hw", "c", "d", "ht", "bh", "wa", " H", "head", "n", "rh", "hp", "ch", "i", "ph", "g", "hd", "hh", "th", "how", "u", "e", "f", "max", "hr", "b", "hi", "q", "sh", "gh", "l", "v", "hm", "m", "r", "H", "wh", "p", "hs"], "w": ["iw", "k", "fw", "x", "wl", "week", "hw", "wan", "aw", "c", "d", "ws", "wa", "W", "n", "ww", "wt", "s", "weight", "wd", "y", "tw", " W", "wave", "width", "sw", "g", "we", "wall", "win", "ew", "rw", "wn", "wb", "f", "max", "b", "q", "sh", "kw", "v", "l", "m", "words", "wh", "p"], "ans": ["san", "wan", "aning", "nas", "ins", "ars", "amps", "ens", "an", "ops", " means", "ats", "cs", "ians", "ents", "sk", "na", "wh", "ms", "aus", "ks", "nan", "nn", "span", "can", "AN", "atan", "aned", " Ans", "ania", "ANS", "hs", "ann", "lan", "ns", "ions", "ani", "ays", "mean", "ln", "han", "ons"]}}
{"code": "import math\\n\\nr=float(input())\\n\\nprint(math.pi*r**2, 2*math.pi*r)\\n\\n", "target": "758", "substitutes": {"r": ["rs", "pi", "rd", "err", " R", "x", "c", "R", "ar", "d", "rad", "a", " p", "n", "rh", "var", "rb", "t", "range", "rf", "i", "alpha", "rt", "ir", "lr", "pr", " c", "radius", "function", "nr", "u", "ur", "rl", "f", "e", "b", "func", "q", "cr", "l", "v", "m", "fr", "p", "rc", "sr"]}}
{"code": "import sys\\ninput = lambda : sys.stdin.readline().rstrip()\\nsys.setrecursionlimit(max(1000, 10**9))\\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\\n\\n\\ns = input()\\nprev = \"\"\\nans = 0\\nn = len(s)\\ni = 0\\nwhile i<n:\\n    if s[i]==prev:\\n        if i+1<n:\\n            ans += 1\\n            prev = s[i]+s[i+1]\\n        i += 2\\n    else:\\n        prev = s[i]\\n        i += 1\\n        ans += 1\\n#     print(prev)\\nprint(ans)", "target": "179", "substitutes": {"input": ["socket", " inspect", " insert", "out", "work", " inside", "feed", " enter", "close", "raw", "output", " Input", "echo", "submit", "int", "print", " ins", " output", "pull", " int", " sleep", "config", " print", "enter", "sleep", "get", "python", "radio", "magic", "forward", "source", "main", " inputs", "read", "f", "insert", "reader", "clean", "inf", "init", "wait", "Input", "until", "exec", "call"], "write": ["log", "Write", "flush", "sync", "writing", "out", "open", "feed", "append", "create", "output", "copy", "data", "edit", "lex", "format", "print", "written", "apply", "update", "put", "push", "writer", "writ", "line", "export", "pipe", "send", "read", "play", "parse", "inline", "insert", "end", "load", "lock", "save", "external", "w", "add", "wait", "dump", "call"], "s": ["states", "ls", "o", "services", "js", "S", "c", "results", "d", "ins", "ses", "ws", "a", "sys", "ss", "opens", "obs", "abs", "qs", "t", "strings", "shows", "y", "g", "os", "comments", "blocks", "ds", "rows", "ks", "gs", "lines", "si", "u", "sets", "f", "e", "scripts", "b", "ps", "ns", "new", "es", "tests", "w", "sv", "v", "l", "sg", "m", "r", "xs", "erences", "p", "words", "its"], "prev": ["history", "loc", "par", "first", "op", "nav", "pred", "current", "append", "rap", "old", "vs", "reverse", "var", "rh", "root", "result", "cmp", "sleep", "keep", "div", "pres", "self", "parent", "rip", "span", "next", "ip", "post", "sav", "avi", "last", "seq", "iv", "final", "rel", "pre", "adj", "res", "rev", "before", "sup", " Prev", "rec", "resp", "new", "Prev", "vious", "ep", "params", "v", "attr", "skip", "orig", "p", "block"], "ans": ["offs", "nas", "ins", "a", "ars", "ants", "amps", "int", "ens", "args", "an", "ops", " means", " spans", "ats", "cs", "ians", "ams", "ents", "sk", "na", "os", "breaks", "anas", "ms", "ids", "nan", "ana", "span", "ks", "anes", "can", "arts", "aned", "len", " Ans", "ANS", "ann", "lan", "ns", "ai", "ani", "ano", "params", " scans", "ons"], "n": ["o", "k", "x", "j", "c", "d", " N", "nb", "a", "num", "t", "ni", "mn", "network", "nan", "nn", "span", "nl", "nr", "u", "len", "e", "f", "nt", "b", "ns", "pn", "w", "z", "l", "v", "m", "r", "nc", "ln", "p", "ne", "N"], "i": ["mini", "pi", "di", "o", "uri", "at", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "ri", "oi", "phi", "a", "io", "ie", "ori", "cli", "int", "ind", "ui", "ini", "t", "ni", "bi", "id", "info", "api", "inner", "ix", "index", "next", "ip", "eni", "si", "u", "iu", "ami", "fi", "e", "I", "f", "ti", "b", "mi", "ai", "z", "qi", "l", "v", "ii", "li", "m", "ei", "r", "p", "vi", "zi"]}}
{"code": "r = int(input())\\ng = int(input())\\nif r >= g:\\n  print(g- (r-g))\\nelse:\\n  print(g+ (g-r))", "target": "524", "substitutes": {"r": ["rs", "o", "k", "rd", "x", "j", "c", "er", "R", "ar", "d", "ng", "a", "n", "re", "rh", "s", "rb", "G", "t", "i", "rt", "rg", "h", "pr", "lr", "u", "e", "f", "rl", "hr", "b", "gr", "q", "w", "z", "cr", "l", "v", "m", "fr", "ru", "p", "sr"], "g": ["gre", "err", "x", "pg", "c", "gu", "gm", "d", "eg", "ng", "R", "gc", "n", "go", "mg", "ge", "s", "G", "gz", "i", "rg", "gy", "h", "ig", "gs", "gg", "big", "u", "e", "f", "b", "gt", "ga", "q", "gh", "w", "l", "v", "sg", "gn", "m", "erg", "p"]}}
{"code": "import math\\na,b,c=map(float,input().split())\\nS=b*math.sin(math.radians(c))*a*1/2\\nx=math.sqrt(a**2 + b**2 -2*a*b*math.cos(math.radians(c)))\\nL=a+b+x\\nh=b*math.sin(math.radians(c))\\nprint(format(S, '.8f'))\\nprint(format(L, '.8f'))\\nprint(format(h, '.8f'))\\n", "target": "221", "substitutes": {"a": ["ma", "area", "auto", "aw", "d", "ac", "ab", " p", "af", "n", "da", "an", "s", "A", "i", "y", "alpha", " alpha", "sa", "aa", "u", "f", "e", "AA", "am", "ca", "ad", "ai", "ae", "w", "z", "ba", "l", "aj", "m", "p", " A", "au"], "b": ["k", "j", "db", "d", "ab", "B", "bd", "n", "s", "rb", "t", "i", "y", "api", "bs", "g", "aa", "wb", "u", "e", "f", "ad", "base", "sb", "w", "z", "ba", "l", "v", "m", "bb", "r", "bf", "p"], "c": ["k", "cy", "ci", "d", "col", "ac", "n", "s", "cc", "ce", "t", "ch", "i", "cs", "y", "ec", "g", "ct", "cin", "cm", "dc", "cu", "u", "e", "f", "C", "w", "z", "cr", "l", "lc", "cd", "v", "m", "p"], "S": ["SE", "U", "SH", "SO", "SS", "R", "NS", "B", "T", "Si", "F", "SI", "s", "Y", "A", "SR", "G", "Sa", "SN", "AS", "Se", "SA", "Q", "SC", "f", "X", "C", "Sc", "V", "Sl", "P", "H", "M", "SL", "N"], "x": ["o", "xi", "j", "d", " y", "xy", "n", "s", "i", "y", "ph", "alpha", "xxx", "g", "ax", "rx", "cm", "ex", "xc", "u", "e", "f", "hr", "dx", "X", "xx", "q", "sh", "w", "z", "v", "l", "cross", "m", "r", "H", "p"], "L": ["el", "LM", "CL", "Z", "LD", "HL", "E", "NL", "B", "Lo", "W", "HH", "F", "s", "Y", "LI", "A", "G", "ll", "Len", "LP", "Fl", "LE", "nl", "Led", "Q", "LG", "dL", "X", "C", "LL", "pl", "V", "Sl", "l", "DL", "H", "M", "ln", "SL", "cl", "N", "LA"], "h": ["hl", "o", "ha", "k", "oh", "j", "d", "bh", "HH", "rh", "hp", "ch", "i", "y", "ph", "g", "ah", "hh", "u", "f", "e", "hi", "gh", "sh", "w", "q", "z", "l", "v", "hm", "m", "H", "p", "hs"]}}
{"code": "n,m = map(int,input().split())\\n\\nans = 0\\n\\nans += m * 1900\\nans += (n-m) * 100\\n\\nprint(ans * 2 ** m)\\n", "target": "308", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "np", "d", "nb", "an", "s", "num", "ni", "i", "mn", "g", "min", "en", "h", "nn", "net", "f", "b", "ns", "z", "l", "v", "M", "p", "N"], "m": ["o", "mc", "k", "x", "j", "c", "fm", "d", "nm", "mod", "num", "s", "an", "man", "i", "y", "mon", "mn", "machine", "dim", "h", "ms", "ym", "month", "cm", "u", "size", "e", "f", "mu", "b", "am", "mi", "mm", "w", "pm", "z", "dm", "v", "l", "r", "M", "p", "N"], "ans": ["offs", "ls", "cycles", " cats", " starts", "missions", " adds", " answers", "nas", "ins", "ases", "reads", "ants", " comments", "amps", "ens", " sets", "an", "anc", "s", "ads", " works", " means", "ats", " spans", "cs", "outs", "ents", "ians", "sk", "na", "os", "anas", "ds", "ks", "nan", "ana", "can", "anes", "cons", "lines", "AN", " pays", "aned", "cas", "leans", "ANS", "ann", "ps", "ns", "lan", "ends", "es", "ani", "aces", "ays", " scans", "mean", "ares", "aus", "ons", " ads"]}}
{"code": "import sys\\nsys.setrecursionlimit(2147483647)\\nINF=float(\"inf\")\\nMOD=10**9+7\\ninput=lambda :sys.stdin.readline().rstrip()\\nfrom collections import defaultdict\\ndef resolve():\\n    n,m=map(int,input().split())\\n    A=list(map(int,input().split()))\\n    S=[0]*(n+1)\\n    for i in range(n):\\n        S[i+1]=(S[i]+A[i])%m\\n\\n    ans=0\\n    C=defaultdict(int)\\n    for s in S:\\n        ans+=C[s]\\n        C[s]+=1\\n    print(ans)\\nresolve()", "target": "23", "substitutes": {"INF": ["inInf", "INI", "INN", " INI", "InN", "InI", "inN", "InF", " INInf", "InInf", "inF", " INN", "INInf", "inI"], "MOD": ["log", "MAG", "Max", " R", " LOG", "ARM", "REG", "mod", "PM", "RE", "SIZE", "mem", " CP", " mod", "MAX", "LOG", "PI", "AP", " Mod", "Mod", "MB", "MIN", "CC", "RT", " MAX", "RM"], "input": ["file", "empty", "string", "element", "out", "feed", "current", "argument", "raw", "output", "PUT", "data", " Input", "format", "submit", "int", " output", "single", "pull", "initial", "progress", "array", "RAW", " int", "list", "IN", "enter", "IL", "result", "INT", "call", "inner", "magic", "image", "sample", "source", "request", "main", "error", "null", " inputs", "parse", "reader", "reset", "select", "load", "clean", "shift", "child", "init", "filter", "json", "accept", "Input", "exec", "method"], "n": ["o", "k", "x", "j", "c", "d", "nm", " N", "nb", "name", "a", "Ns", "num", "y", "mn", "nn", "u", "size", "f", "e", "b", "ns", "no", "q", "w", "z", "l", "r", "M", "nc", "p", "ne", "N"], "m": ["o", "mc", "k", "j", "c", "fm", "d", "nm", "a", "mod", "an", "mn", "g", "dim", "ms", "mx", "span", "cm", "Ms", " M", "u", "size", "e", "mu", "f", "b", "am", "mi", "sm", "mm", "im", "w", "pm", "z", "v", "l", "mean", "r", "M", "p"], "A": ["As", "U", "NA", "D", "ANC", "Alpha", "a", "Auth", "B", "CA", "All", "Si", "IA", "At", "an", "Y", "Array", "L", "AM", "AD", "Am", "AS", "HA", "An", "AP", "Average", "AN", "I", "AA", "AST", "V", "P", "API", "AC", "M", "F", "N", "LA"], "S": ["As", "U", "SE", "D", "SS", "R", "NS", "E", "RS", "B", "Ns", "T", "Si", "SI", "Y", "L", "G", "St", "Sa", "SN", "AS", "DS", "ANS", "Sign", "I", "CS", "X", "Series", "V", "Sl", "P", "Cs", "O", "H", "M", "F", "N", "Set"], "i": ["mini", "pi", "di", "o", "uri", "ji", "k", "out", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "oi", "ri", "a", "io", "start", "ori", "int", "ind", "ui", "ini", "bi", "id", "y", "h", "inn", "ix", "ip", "multi", "eni", "si", "il", "u", "iu", "fi", "e", "I", "f", "end", "ti", "mi", "ai", "w", "z", "qi", "l", "lc", "ii", "li", "ei", "p"], "ans": ["anus", "aning", "ins", "a", "vers", "ars", "ants", "ss", "amps", "int", "an", "anc", "ads", " means", "cs", "oss", "CNN", "cases", "na", "os", "sk", "ds", "ms", "ks", "ids", "An", "span", "ana", "can", "lines", "cons", "AN", "cas", "aned", "ANS", "I", "ann", "CS", "ns", "scan", "Na", "ions", "ays", "mean", "eps", "aus", "ons"], "C": ["U", "CI", "cus", "D", "CN", "CD", "c", "R", "E", "CT", "NC", "Cons", "B", "CA", "T", "G", "L", "cs", "CNN", "CCC", " c", "AN", "I", "CS", "X", "Sc", "P", "CC", "Cs", "K", "O", "Cu", "AC", "M", "F", "CM", "N", "CL"], "s": ["ls", "o", "string", "js", "sync", "k", "su", "x", "c", "d", "ws", "ses", "ins", "a", "name", "start", "ss", "pos", "ind", "ops", "an", "ats", "id", "y", "uns", "os", "g", "h", "ds", "self", "sites", "si", "u", "spec", "f", "sym", "settings", "e", "us", "b", "sup", "w", "sid", "l", "v", "stats", "xs", "p"]}}
{"code": "import sys\\nimport math\\nfrom collections import deque\\n\\nsys.setrecursionlimit(1000000)\\nMOD = 10 ** 9 + 7\\ninput = lambda: sys.stdin.readline().strip()\\nNI = lambda: int(input())\\nNMI = lambda: map(int, input().split())\\nNLI = lambda: list(NMI())\\nSI = lambda: input()\\n\\n\\ndef make_grid(h, w, num): return [[int(num)] * w for _ in range(h)]\\n\\n\\ndef main():\\n    N, M = NMI()\\n    A = NLI()\\n\\n    match_dict = {i+1: m for i, m in enumerate([2,5,5,4,5,6,3,7,6])}\\n    usable_list = [[a, match_dict[a]] for a in A]\\n    usable_list.sort(key=lambda x: (x[1], -x[0]))\\n\\n    # dp[i] \u306fi\u672c\u4f7f\u3063\u305f\u6642\u306e\u6700\u5927\u6570\\n    dp = [-1]*(N+10)\\n    dp[0] = 0\\n\\n    for i in range(N+1):\\n        for num, m in usable_list:\\n            dp[i+m] = max(dp[i+m], dp[i]*10+num)\\n    print(dp[N])\\n\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "712", "substitutes": {"MOD": ["pi", "SH", "S", " L", " omega", "mod", "PM", "da", " C", "Sa", "LP", "SIZE", "mem", " mod", "MAX", "cm", "PI", "lam", "mm", "Mod", "NUM", "MB", "memory", "MM", "Mi", "Input", " Xi", "RM"], "input": ["unit", "integer", "empty", "interface", "element", "unknown", "current", "param", "img", "argument", "raw", "output", "PUT", "data", "point", " Input", "format", "expression", "temp", "util", "view", " output", "single", "pull", "amp", "RAW", "array", "config", "IN", "IL", "result", "INT", "alpha", "inner", "keep", "image", "parent", "request", "source", "index", "null", "error", "digit", "model", "IO", " inputs", "parse", "active", "default", "help", "select", "load", "inf", "shift", "init", "example", "form", "Input", "up", "visible", "call"], "NI": ["CI", "NA", "II", "NV", "Ns", "ini", "Ni", "ni", "ZI", "ANI", "AI", "NM", "NN", "PI", "MN", "RI", "DI", "eni", "IO", "ami", " ni", "MI", "NO", "Ne", "Na", "NG", "HI", "NP"], "NMI": [" NCI", "MGI", " NCP", "nCI", "nMR", "NNI", " NGI", "NCP", " NPI", "nLI", "NPI", "nMI", "LLI", "NMR", "NCI", "LMI", "MMI", " NNI", "MLI", "LPI", "MMR", "MCI", "nPI", "nGI", "MPI", "nNI", " NMR", "LCP", "MNI", "nCP", "NGI"], "NLI": [" NCI", "RCI", "MLT", "nCI", "nLA", " NLA", "NLi", "nLI", " NLi", "NLT", "RLT", "NCI", "MLI", "MCI", "MLi", "NLA", " NLT", "MLA", "RLI", "RLi", "nLi"], "SI": ["FI", "SE", "CI", "SH", "II", "SS", " si", "Si", "ZI", "Sa", "AI", "sa", "PI", "RI", "TI", "DI", "IO", "si", "SC", "SU", "SB", "GI", "MI", "SG", "SM", "ii", "IM", "LA"], "h": ["o", "k", "x", "c", "d", "ht", "n", "W", "rh", "t", "id", "y", "u", "f", "max", "hr", "hi", "q", "uh", "z", "v", "l", "hm", "r", "H", "wh", "p", "hs"], "w": ["k", "x", "wl", "c", "aw", "hw", "d", "ws", "wa", "W", "n", "wt", "s", "t", "weight", "wd", "y", " W", "nw", "width", "win", "u", "f", "max", "b", "q", "kw", "z", "v", "l", "wh", "p", "wu"], "num": ["loc", "k", "x", "c", "d", "nm", "ng", "sum", "wa", "n", "rh", "id", "Num", "nw", "na", "dim", "index", "number", "nu", "u", "f", "max", "mu", "fn", "b", "NUM", "wx", "no", "r", "wh", "p", "temp"], "_": ["x", "__", " time", "all", "un", "l"], "N": ["U", "NA", "D", "S", "R", "B", "Ns", "T", "n", "W", "Y", "L", "G", " n", "Q", "I", "X", "C", "V", "P", "K", "H", "F", "Z"], "M": ["U", "D", "S", "R", "B", "T", "W", "J", "G", "mu", "I", "X", "MI", "C", "MA", "mm", "V", "P", "MM", "MW", "O", "H", "Mi", "F", "MF"], "A": ["AR", "As", "U", "NA", "ma", "D", "S", "Z", "E", "Alpha", "B", "CA", "W", "Array", "Y", "AM", "L", "AS", "Ma", "GA", "SA", "TA", "AP", "I", "AA", "X", "C", "MA", "V", "P", "API", "K", "H", "AW", "F", "LA"], "match_dict": ["match_map", "matchfdict", " matchingmap", "Match_dict", "match__map", "match__dict", " matchingdict", "match_details", "matchfmap", "matchfdir", "match_list", "matchingdict", " matchinglist", "matchflist", " match_list", " match_map", "matchinglist", "Match_details", "Match_map", "match__details", "matchingmap", "matchingdir", " matchingdir", "match__list", "Match_list", " match_dir", "match_dir"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "ci", "d", "phi", "ie", "int", "ind", "n", "ini", "bi", "id", "y", "ia", "index", "ip", "u", "iu", "f", "e", "I", "mu", "b", "mi", "im", "ai", "z", "v", "l", "ii", "li", "p"], "m": ["ma", "o", "k", "x", "mac", "um", "c", "om", "d", "mom", "n", "an", "man", "y", "mag", "mn", "g", "cm", "mo", "u", "mp", "f", "mu", "e", "mat", "am", "b", "mm", "im", "z", "dm", "v", "l", "r", "p"], "usable_list": ["usableenblock", "using_list", " usableenList", "usable_block", "usable_array", " usableenarray", "using_map", "usable_List", " usable_List", "usableenlist", " usable_array", "usableenList", "usableenarray", "usable_type", "using_List", " usableenblock", "using_type", " usable_block", "usable_map", " usableenlist"], "a": ["ma", "\u00e4", "o", "ha", " ma", "x", "mac", "ima", "c", "ar", "d", "ac", " am", "n", "mA", "da", "ata", "an", "s", "fa", "man", "Am", "y", "alpha", "api", "na", "sa", "Ad", "ia", "aa", "ach", "u", "mat", "b", "am", "ca", "ga", "ai", "ae", "ea", "p", "au"]}}
{"code": "numbers = [int(x) for x in input().split()]\\nnumbers.sort(reverse=True)\\n\\nprint(10 * numbers[0] + numbers[1] + numbers[2])", "target": "627", "substitutes": {"numbers": ["Nums", "nlines", "codes", "enounters", "eumbers", "encounters", "inums", "nodes", "Nlines", "cashes", " nums", "inures", " nures", "Nashes", " nounters", "Nounters", "cums", "numums", " nhens", "enums", "nums", " nples", "enclines", "nures", "numounters", "eounters", "eples", "Numbers", "cowers", "enumbers", "cumbers", "encums", "Nodes", "nowers", "counters", "Nhens", " nodes", "Nples", "ehens", " nashes", "nundreds", "numowers", "cundreds", "nples", " nlines", "enowers", "inumbers", " nundreds", "encumbers", "numumbers", "inundreds", "nhens", "cures", "nashes", "nounters"], "x": ["string", " v", "xp", "xi", "d", " y", "xy", "name", "int", "n", "ww", "num", " int", "t", " xx", "xxxxxxxx", "i", "id", "y", "key", "xxx", "xa", "val", "rx", "index", " z", " ax", "number", "ex", "e", "dx", "X", "xx", "wx", " i", "z", "v", "l", "xs", "p", " tx"]}}
{"code": "s = list(input())\\ncount = 0\\nmaxcount = 0\\nfor i in range(3):\\n    if s[i] == 'R':\\n        count += 1\\n        maxcount = count\\n    else:\\n        count = 0\\n\\nprint(maxcount)", "target": "482", "substitutes": {"s": ["states", "ls", "services", "parts", "fs", "S", "ings", "c", "d", "ws", "ses", "n", "abs", "args", "qs", "ows", "cs", "ches", "sw", "g", "comments", "cells", "blocks", "rows", "gs", "si", "f", "sym", "e", "b", "ps", "ns", "ans", "es", "sb", "l", "v", "ains", "words", "p", "ing", "rams"], "count": ["type", "part", "c", "current", "amount", "find", "sum", "col", "name", "only", "start", "n", "all", "num", "depth", "cache", "list", "allow", "weight", "id", "test", "total", "key", "time", "force", "cond", "more", "self", "parent", "index", "number", "size", "Count", "max", "f", "code", "match", "base", "member", "child", "counter", "length", "now", "order", "p", "group", "call"], "maxcount": [" maxount", "maxCount", "maxc", "maxount", " maxCount", "MaxCount", "maxlength", " maxref", "Maxount", "lastc", "axlength", "lastCount", "Maxc", "maxref", "axCount", "Maxlength", "lastlength", "restlength", "restCount", " maxc", "restcount", " maxlength", "restref", "axref", "Maxcount", "lastcount", "axcount"], "i": ["pi", "k", "x", "xi", "j", "c", "gi", "ci", "d", "col", "a", "ac", "start", "int", "ind", "n", "bi", "id", "y", "val", "h", "ix", "index", "ip", "si", "u", "iu", "e", "I", "f", "b", "ai", "z", "v", "l", "ii", "li", "r", "m", "ih", "p"]}}
{"code": "N, C = map(int, input().split())\\nXV = [list(map(int, input().split())) for _ in range(N)]\\n\\nR = [[0 for _ in range(4)] for _ in range(N)]\\nL = [[0 for _ in range(4)] for _ in range(N)]\\n\\nfor i in range(N):\\n  R[i][3] = 0\\n  L[i][3] = 0\\n\\nfor i in range(N):\\n  R[i][0] = XV[i][0]\\n  R[i][1] = XV[i][1]\\n  L[i][0] = C - XV[i][0]\\n  L[i][1] = XV[i][1]\\nL.sort()\\n\\nfor i in range(N):\\n  R[i][2] = R[i - 1][2] + R[i][1]\\n  L[i][2] = L[i - 1][2] + L[i][1]\\nfor i in range(N):\\n  R[i][2] -= R[i][0]\\n  L[i][2] -= L[i][0] \\n  R[i][3] = max(R[i - 1][3], R[i][2])\\n  L[i][3] = max(L[i - 1][3], L[i][2])\\n#print(\"R:\", R)\\n#print(\"L:\", L)\\n\\nanswer = []\\nfor i in range(N):\\n  if i != N - 1:\\n    answer.append(R[i][2] + max(L[N - 2 - i][3] - R[i][0], 0))\\n  else:\\n    answer.append(R[i][2])\\n\\nL, R = R, L\\nfor i in range(N):\\n  if i != N - 1:\\n    answer.append(R[i][2] + max(L[N - 2 - i][3] - R[i][0], 0))\\n  else:\\n    answer.append(R[i][2])\\n\\nanswer = max(answer)\\nprint(answer if answer > 0 else 0)", "target": "127", "substitutes": {"N": ["U", "NA", "D", "NOR", "S", "CN", "Network", "c", "NS", "E", "NC", "NE", "B", "Ns", "T", "n", "W", "J", "Y", "A", "G", "Ni", "Len", "Num", "Part", "CNN", "NT", " n", "Size", "No", "Q", "I", "X", "Four", "Ne", "NR", "RN", "V", "P", "K", "O", "H", "M", "F", "Z"], "C": ["U", "CI", "D", "S", "CL", "CN", "c", "E", "NC", "B", "T", "n", "W", "Y", "CU", "G", "A", "CNN", "Size", "Q", "SC", "I", "X", "DC", "V", "P", "K", "CR", "O", "Cu", "H", "M", "F", "CM", "Z"], "XV": [" XG", "RV", "xF", "XF", "XD", "YV", "XXD", "Rv", " XP", "ZV", "xG", "RL", "XXV", "xv", "Zv", "QV", "Xv", "xD", " XVL", " XD", " Xv", "RP", "xV", "XXVL", "XXG", "Yv", "xVL", "Qv", "XVL", "xP", "ZL", "QP", "XL", "ZP", "XP", " XF", "XG", "XXv", "YL", "XXF", "QF", "XXP", "YP"], "_": ["up", "o", "ap", "k", "out", "x", "d", "ac", "__", "app", "long", "J", "all", "s", "non", "t", "id", "g", "val", "self", "day", "un", "ip", "f", "b", "code", "q", "l", "place", "ing", "block"], "R": ["Range", "U", "RC", "AR", "GR", "KR", "D", "S", "Rs", "JR", "HR", "RW", "E", "RD", "RS", "LR", "Line", "RR", "B", "RH", "T", "WR", "Rh", "W", "J", "DR", "RL", "Y", "A", "G", "SR", "Run", "RO", "RE", "RP", "RA", "Role", "UR", "RB", "TR", "Q", "BR", "ER", "I", "OR", "X", "MR", "NR", "RN", "Reader", "V", "P", "K", "CR", "RT", "r", "Root", "H", "M", "F", "Right", "Rad", "RG"], "L": ["PL", "UL", "U", "LM", "D", "S", "LU", "VL", "Pl", "E", "Z", "LB", "LR", "NL", "Line", "Letter", "Lo", "B", "List", "All", "T", "W", "J", "F", "Long", "RL", "Y", "LI", "G", "IL", "Len", "LP", "EL", "OL", "Log", "El", "BL", "Language", "LT", "Li", "I", "dL", "X", "XL", "LL", "Lu", "V", "Sl", "ML", "P", "l", "DL", "O", "H", "M", "LA", "SL", "Layer", "CL"], "i": ["mini", "it", "out", "xi", "idi", "j", "c", "anti", "oi", "phi", "uli", "bi", "\u0438", "isi", "source", "ip", "multi", "eni", "iu", "f", "ti", "I", "mi", "ki", "m", "p", "io", "ius", "x", "gi", "ci", "d", "a", "ori", "id", "y", "ix", "fi", "im", "ii", "li", "r", "pi", "di", "uri", "yi", "ie", "ili", "cli", "int", "ind", "n", "s", "ini", "ali", "iq", "site", "iri", "u", "e", "init", "qi", "l", "v", "ic", "ei", "ik", "o", "ri", "ui", "ni", "info", "api", "key", "si", "ami", "b", "my", "ai"]}}
{"code": "N=int(input())\\nX=map(int, input().split())\\nX = list(X)\\n\\n\\navg = sum(X) / N\\navgi = int(avg + 0.5)\\n\\nans = 0\\nfor i in X:\\n#    print((i-avgi)*(i-avgi))\\n    ans += (i-avgi)**2\\n\\nprint(ans)\\n", "target": "46", "substitutes": {"N": ["Node", "NA", "D", "S", "R", "E", "B", "Ns", "T", "n", "W", "J", "Y", "A", "L", "Ni", "Num", "NM", " n", "MN", "No", "Ren", "Q", "AN", "I", "C", "Na", "Ne", "NI", "V", "P", "K", "O", "M", "F", "Z"], "X": ["U", "D", "S", "x", "R", "Sample", "E", "XX", "Original", "Test", "XT", "List", "T", "Data", "W", "J", "Array", "Y", "Value", "A", "L", "G", "Index", "DD", "Check", "Q", "Feature", "Model", "I", "XY", "C", "PE", "XL", "TX", "Output", "V", "Cross", "P", "XP", "K", "FF", "Code", "MX", "O", "XXX", "H", "M", "F", "Z"], "avg": [" avm", "avm", "svgs", "svgar", "verg", "AVgar", " avG", "vergs", "verm", "averG", "svgi", "avgar", "avG", " avgs", "AVgs", "AVgi", "AVg", "averg", "svg", "avergi", "avergar", "averm", "avgs", "verG", "avergs"], "avgi": ["avgs", "svgi", "vergy", "svg", "ovgy", "avgy", "svgs", "vergs", "ovg", "svgy", "verg", "ovgi", "vergi", "ovgs"], "ans": ["NA", "ANN", "Ann", "an", "man", " means", " dd", "na", " ann", "ana", "An", "span", "nan", "NN", "umi", "AN", " Ans", "ANS", "ann", "ad", "ns", "scan", "no", "ani", "ai", "Sk", "nc", "au"], "i": [" bi", "_", "j", "gi", "c", "gu", " I", " ii", "ind", " iP", "id", "iq", " il", "ib", "ip", "iu", "e", "ti", "I", "ai", "chi", "p", "ii", " ic", "li", "ih", "ei"]}}
{"code": "'''\\nAccepted    \u3000:No\\ndifficult   \u3000: \\n\u30da\u30ca\u30eb\u30c6\u30a3\u3000  \u3000:5\u5206\\n\u5b9f\u969b\u306e\u56de\u7b54\u6642\u9593  :\u5206\\nWA\u306e\u56de\u6570\u3000     :\u56de\\n\u5408\u8a08\u6642\u9593\u3000\u3000  \u3000:\u5206\\n'''\\n\\ndef myAnswer(N:int,Q:int,S:str,L:list,R:list) -> None:\\n   pre = S[0]\\n   accum = [0]\\n   for s in S[1:]:\\n      if(pre == \"A\" and s ==\"C\"):\\n         accum.append(accum[-1] + 1)\\n      else:\\n         accum.append(accum[-1])\\n      pre = s\\n   for l,r in zip(L,R):\\n      print(accum[r-1] - accum[l-1])\\n\\n\\ndef modelAnswer():\\n   return\\ndef main():\\n   N,Q = map(int,input().split())\\n   S =input()\\n   L = []\\n   R = []\\n   for _ in range(Q):\\n      l,r = map(int,input().split())\\n      L.append(l)\\n      R.append(r)\\n   myAnswer(N,Q,S,L,R)\\n\\n\\nif __name__ == '__main__':\\n   main()", "target": "155", "substitutes": {"pre": ["pi", "step", "js", "par", "j", "after", "sp", "current", "sys", "inter", "start", "temp", "pos", "prep", "pa", "ind", "re", "Pref", "cache", "Pre", "prefix", "script", "min", "sa", "pres", "pse", " post", "post", "pr", "py", "span", "set", "si", "ps", "before", "code", "none", "stage", "seed", "P", "sign", "PRE", "se", "prev", "p", "cook", "pe"], "accum": [" accrum", "acuc", "recums", "incnum", "Accf", "acom", "incums", "Accums", "Accumer", "incuc", "accrum", "Accnum", "accnum", " accnum", " accam", "incum", " accuc", "facumer", "Accam", "accuc", "recrum", "facrum", "incrum", "scum", "facam", "accom", "accam", "acf", "incut", "recnum", "scuc", "scam", " accut", "accums", "accf", " accumer", "acum", "acrum", "incam", "recam", "facum", "Accrum", "recum", "accumer", " accums", " accf", "scut", "incom", " accom", "accut", "acums", "acnum", "Accum"], "s": ["sec", "type", "su", "c", "after", "sp", "ws", "ses", "ins", "sub", "a", "start", "ss", "sl", "prep", "n", "t", "i", "sa", "set", "sf", "sq", "si", "f", "sym", "e", "b", "ps", "ns", "sup", "stage", "sb", "w", "init", "z", "v", "sc", "sg", "comment", "se", "prev", "p", "sr"], "l": ["el", "lp", "ls", "o", "ol", "x", "wl", "j", "ul", "c", "le", "ar", "kl", "sl", "n", "ll", "list", "i", "h", "lr", "nl", "la", "il", "u", "lin", "lb", "rl", "f", "Li", "b", "Lu", "dl", "q", "w", "pl", "z", "v", "lc", "length", "li", "lu", "m", "ln", "p"], "r": ["rs", "o", "rd", "k", "err", "x", "j", "c", "er", "ar", "ri", "ro", "a", "n", "re", "rh", "range", "rb", "rf", "i", "rg", "ir", "h", "lr", "pr", "rw", "row", "nr", "u", "br", "ur", "rel", "rl", "e", "f", "rr", "b", "rev", "pl", "q", "nor", "z", "cr", "v", "fr", "right", "ru", "p", "rc", "sr"], "N": ["U", "NA", "D", "Net", "NS", "E", "NE", "B", "Ns", "T", "n", "W", "J", "Y", "A", "Ni", "G", "Num", "CNN", "NT", " n", "No", "I", "X", "C", "Na", "Ne", "NG", "V", "P", "K", "Nat", "O", "H", "M", "F", "Z"], "Q": ["U", "D", "MQ", "CL", "Py", "E", "Queue", "IQ", "QUI", "Flow", "B", "T", "W", "J", "QU", "Y", "A", "G", "Cl", "X", "C", "q", "V", "Qu", "P", "K", "ID", " q", "Query", "O", "H", "M", "Ch", "F", "IX", "Question", "Z"], "S": ["SE", "U", "SH", "D", "SS", "NS", "E", "RS", "Z", "SK", "Test", "B", "Sing", "T", "W", "Si", "F", "Es", "Y", "Array", "A", "G", "Pre", "String", "Sa", "Part", "St", "DS", "ST", "SSL", "PS", "WS", "SC", "Sign", "I", "X", "SU", "C", "Ps", "Series", "V", "Sl", "P", "K", "Parts", "SP", "Service", "O", "H", "M", "SL", "Set"], "L": ["U", "UL", "LM", "D", "CL", "LU", "VL", "Pl", "E", "LB", "LR", "NL", "Le", "B", "Lo", "List", "LS", "T", "F", "Long", "RL", "LI", "A", "G", "IL", "EL", "LE", "El", "Left", "Li", "X", "C", "XL", "LL", "Lu", "V", "ML", "Sl", "P", "DL", "O", "M", "LA", "SL", "dL"], "R": ["U", "GR", "KR", "D", "Re", "Rs", "RW", "JR", "HR", "RS", "E", "RR", "B", "RH", "T", "WR", "W", "J", "Rh", "DR", "RL", "Y", "A", "G", "SR", "Run", "Res", "RO", "RE", "RP", "RA", "UR", "ER", "Rest", "X", "C", "RN", "V", "P", "H", "M", "F", "Right", "Z"], "_": ["out", "x", "__", " time", "en", "un", "line", "ip", "f", "of", "m", "p"]}}
{"code": "W, H, n = map(int, input().split())\\nl = [[True]*W]*H\\nfor i in range(n):\\n    x, y, a = map(int, input().split())\\n    if a == 1:\\n        for h in range(H):\\n            for w in range(x):\\n                l[h][w] = False\\n    elif a == 2:\\n        for h in range(H):\\n            for w in range(x, W):\\n                l[h][w] = False\\n    elif a == 3:\\n        for h in range(y):\\n            l[h] = [False]*W\\n    else:\\n        for h in range(y, H):\\n            l[h] = [False]*W\\n\\nans = 0\\nfor i in range(H):\\n    for j in range(W):\\n        if l[i][j]:\\n            ans += 1\\nprint(ans)", "target": "274", "substitutes": {"W": ["GW", "U", "TW", "Width", "Ws", "RW", "E", "wa", "B", "T", "EW", "J", "Y", "A", "L", "Wh", "G", "Web", "DW", "WP", "wh", "NW", "Wo", "FW", "Work", "Q", "WC", "Wa", "WS", "u", "I", "Wi", "X", "SW", "C", "CW", "Win", "wx", "V", "P", "We", "K", "z", "MW", "v", "Word", "O", "M", "VW", "F", "N", "Z"], "H": ["U", "SH", "D", "S", "R", "E", "B", "RH", "T", "HH", "J", "Y", "A", "G", "L", "FH", "HK", "EH", "Q", "Ha", "I", "X", "C", "HI", "V", "P", "z", "K", "O", "M", "wh", "F", "N", "Z"], "n": ["o", "k", "c", "d", "nb", "Ns", "an", "s", "num", "t", "Num", "g", "en", "nn", "u", "f", "e", "b", "ns", "z", "v", "m", "r", "nc", "p", "N"], "l": ["el", "lp", "ls", "o", "k", "ol", " L", "al", "c", "d", "left", "acl", "kl", "lo", "ell", "ll", "list", "s", "t", "L", "g", "shell", "lv", "ml", "nl", "la", "il", "u", "lb", "f", "Li", "e", "rl", "b", "like", "pl", "dl", "z", "v", "lc", "li", "m", "lu", "r", "ln", "p"], "i": ["pi", "it", "o", "ji", "iw", "k", "xi", "c", "gi", "ci", "d", "phi", "ie", "int", "t", "g", "ir", "ib", "ia", "ip", "u", "iu", "f", "I", "e", "b", "hi", "ish", "ai", "z", "v", "ii", "r", "m", "li", "p"], "x": ["o", "k", "xi", "c", "d", "wa", "int", "s", "Y", "t", "L", "A", "g", "ix", "index", "ex", "u", "f", "e", "b", "X", "xx", "z", "v", "m", "xs", "r", "p"], "y": ["ey", "o", "wy", "sy", "k", "ya", "c", "cy", "d", "yi", "s", "Y", "ye", "t", "dy", "g", "u", "f", "e", "b", "X", "hi", "q", "yy", "sh", "z", "v", "m", "p"], "a": ["ma", "area", "auto", "o", "at", "c", "aw", "ar", "ab", "ac", "wa", "pa", "ast", "all", "da", "an", "A", "fa", "alpha", "qa", "sa", "ana", "ia", "aa", "la", "u", "va", "f", "e", "b", "ad", "am", "ca", "ai", "ae", "asa", "aaa", "ba", "ta", "ea", "aj", "p", "ka", "au"], "h": ["hl", "o", "home", "ha", "hy", "k", "oh", "ul", "c", "d", "ht", "hum", "all", "hp", "s", "t", "ch", "ph", "sw", "g", "ah", "en", "ach", "u", "f", "e", "hr", "b", "hi", "ho", "q", "sh", "z", "v", "hm", "m", "r", "he", "wh", "p", "hs"], "w": ["o", "k", "fw", "work", "c", "aw", "ws", "wa", "all", "wk", "s", "ye", "ww", "t", "wt", "wd", "sw", "g", "we", "word", "win", "ew", "wn", "wb", "u", "f", "b", "wx", "z", "v", "m", "wh", "p"], "ans": ["ls", "asses", "anus", "aning", "nas", "ants", "amps", "args", "an", "s", "anc", "A", " means", "ats", "asts", "cs", "anon", "sk", "na", "os", "sa", "anas", "ds", "ks", "nan", "ia", "ana", "span", "can", "la", "AN", "aned", "leans", "anne", "ANS", "ann", "lan", "ns", "ane", "ca", "es", "ions", "ays", "eps", "aus", "ons", "au"], "j": ["ji", "o", "k", "xi", "c", "d", "ie", "ind", "J", "ch", "g", "ah", "ij", "ib", "ow", "ew", "u", "ja", "f", "e", "b", "q", "z", "v", "jp", "aj", "r", "m", "p"]}}
{"code": "import collections\\nN = int(input())\\na = list(map(int, input().split()))\\nl = [0]* N\\n\\nfor i in range(N-1):\\n    #print(i, a[i]-1)\\n    l[a[i]-1] += 1\\n#print(l)\\nfor j in range(N):\\n    print(l[j])\\n", "target": "38", "substitutes": {"N": ["ND", "NA", "D", "S", " L", "R", "NS", "E", "B", "Ns", "T", "n", "J", " C", "Y", "A", "L", "Ni", "G", "Len", "NB", " n", "Size", " Ne", "Q", "Length", "I", "X", "C", "Na", "Ne", "NR", "V", "P", "K", "O", "H", "M", "F", "Z"], "a": ["area", "o", "x", "j", "c", "ar", "ab", "data", "args", "da", "an", "all", "s", "A", "t", "y", "alpha", "sa", "offset", "span", "aa", "la", "f", "b", "ans", "m", "li", "p"], "l": ["lp", "ls", "o", "ol", " L", "c", "lag", "n", "ll", "list", "L", "g", "nl", "la", "f", "Li", "rl", "e", "b", "z", "lc", "v", "li", "m", "r", "ln", "p"], "i": ["o", "xi", "j", "gi", "c", "d", "ri", "ie", "ind", "ni", "id", "y", "h", "ij", "ip", "si", "iu", "e", "ti", "I", "f", "ai", "z", "qi", "v", "ii", "li", "p"]}}
{"code": "N, K=list(map(int, input().split(\" \")))\\n\\nP=list(map(int, input().split(\" \")))\\n\\nsum=0\\nfor i in range(K):\\n  sum=sum+sorted(P)[i]\\n\\nprint(sum)", "target": "124", "substitutes": {"N": ["Node", "NA", "D", "Net", "R", "NS", "E", "B", "Ns", "T", "n", "J", "Y", "L", "G", "NT", " n", "NN", "MN", "I", "C", "V", "O", "H", "M", "F", "Z"], "K": ["U", "KR", "D", "Ku", "k", "IK", "S", "SK", "Ak", "KT", "KE", "T", "Ka", "J", "Y", "NK", "Power", "KK", "Q", "Work", "PK", "I", "X", "C", "V", "KN", "TH", "Sk", "KB", "KS", "KC", "H", "M", "F", "Z"], "P": ["U", "D", "S", "R", "E", "TP", "PO", "PF", "B", "T", "PA", "W", "J", "F", "Y", "A", "L", "G", "IP", "POS", "PS", "Port", "PT", "Q", "I", "X", "C", "Ps", "V", "CP", "NP", "H", "M", "p"], "sum": ["average", "k", "out", "um", "c", "scale", "output", "data", "value", "start", "diff", "n", "all", "num", "cal", "missing", "weight", "result", "total", "alpha", "cost", "key", "sort", "min", "score", "loss", "index", "error", "gram", "si", "u", "size", "parse", "max", "us", "match", "cum", "mass", "spread", "summary", "sh", "add", "mean", "sign", "Sum", "sim", "p", "rank", "count"], "i": ["pi", "ji", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "phi", "col", "pos", "ind", "n", "ni", "bi", "id", "y", "key", "h", "ix", "index", "ip", "si", "u", "iu", "e", "I", "ti", "f", "b", "mu", "mi", "q", "ai", "z", "qi", "l", "v", "ii", "li", "r", "ih", "p"]}}
{"code": "h, w = [int(i) for i in input().split()]\\nmod = 10 ** 9 + 7\\ndp = [[0] * (w + 1) for _ in range(h + 1)]\\ndp[0][0] = 1\\nfor i in range(h):\\n    a = input()\\n    for j, k in enumerate(a):\\n        if i == 0 and j == 0:\\n            continue\\n        if k != \"#\":\\n            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % mod\\nprint(dp[h-1][w-1])\\n", "target": "273", "substitutes": {"h": ["o", "x", "c", "d", "wa", "n", "rh", "t", "ch", "id", "y", "ph", "g", "ah", "hh", "th", "u", "f", "e", "hr", "max", "b", "hi", "q", "sh", "z", "v", "l", "hm", "m", "r", "H", "ih", "p", "hs"], "w": ["fw", "x", "c", "d", "ws", "wa", "W", "n", "ww", "wt", "t", "weight", "wd", "y", "width", "sw", "g", "we", "wall", "ew", "wb", "u", "f", "max", "end", "b", "q", "kw", "z", "v", "l", "m", "wh", "p"], "i": ["ik", "pi", "di", "ji", "it", "o", "x", "xi", "c", "gi", "ci", "d", "phi", "oi", "io", "ie", "start", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", "ix", "index", "ip", "si", "u", "iu", "e", "I", "f", "ti", "b", "hi", "ai", "z", "chi", "qi", "v", "l", "ii", "li", "m", "ih", "p"], "mod": ["oct", "mode", "step", "x", "exp", "d", "scale", "mult", "dec", "perm", "id", "mag", "div", "min", "ow", "cm", "comp", "mods", "row", "comb", "mu", "e", "max", " Mod", "MOD", "Mod", "shift", "q", "sh", "module", "z", "complex", "m", "r", "form", "mix"], "dp": ["wp", "pi", "lp", "tp", "di", "dt", "dos", "pb", " d", "c", "db", "np", "d", "port", "pd", " p", "data", "pair", "pos", "pa", "direction", " delta", "hp", "vp", "DP", "pkg", " dd", " cp", "ph", "g", "dim", "ds", "dh", "cp", "dB", "dr", "dc", "ip", "pad", "comp", "pp", "address", "e", "xd", "b", "ps", " DP", "ga", "dl", " tcp", "P", "dm", "ep", "params", "dn", "deb", "dist", "p", " df", "gp", "fp"], "_": ["out", "x", "id", "ow", "ix", "ip", "f", "I", "q", "m", "p"], "a": ["area", "input", "aw", "d", "ac", "wa", "ab", "af", "pa", "n", "da", "an", "s", "array", "A", "fa", "y", "alpha", "sa", "abc", "ia", "aa", "la", "u", "va", "f", "b", "ad", "am", "ca", "ga", "ai", "ae", "aaa", "ba", "ea", "aj", "m", "p", "au"], "j": ["kj", "ji", "o", "x", "xi", "c", "d", "jc", "ie", "n", "J", "t", "ch", "y", "g", "ij", "u", "ja", "f", "e", "b", "jj", "q", "z", "v", "jp", "aj", "ii", "li", "l", "r", "m", "p"], "k": ["ik", "o", "ke", "x", "kk", "work", "c", "d", "ak", "ky", "mk", "n", "ck", "s", "y", "key", "sk", "g", "unk", "ks", "dk", "u", "e", "f", "b", "ki", "q", "tk", "kw", "z", "K", "v", "m", "r", "p", "kr", "ku"]}}
{"code": "op=[\"+\",\"-\"]\\na,b,c,d=map(str,input())\\n\\nfor o1 in op:\\n  for o2 in op:\\n    for o3 in op:\\n      form= a+o1+b+o2+c+o3+d\\n      if eval(form)==7:\\n        print(form+\"=7\")\\n        exit()", "target": "504", "substitutes": {"op": ["up", "ort", "ograph", "o", "it", "omp", "sp", "om", "ore", "ob", "app", " ops", "art", "upp", " ip", "ot", " operation", "ops", "var", "amp", " OP", "operation", "os", "ant", "og", "vert", "OP", "ode", "operator", "rip", "set", "ip", "oid", "oop", "mp", "ocl", "opus", "pp", "opt", "hop", "rop", "Op", "oper", " Op", "pop", "osp", "ep", "opy", "oc", "ap", "p", " operator", "orp"], "a": ["area", "auto", "o", "x", "ac", "ab", "n", "da", "an", "s", "A", "y", "g", "sa", "ah", "aa", "u", "va", "e", "f", "ad", "ca", "am", "ga", "ae", "asa", "ba", "l", "m", "p"], "b": ["eb", "k", "x", "bt", "pb", "db", "cb", "nb", "ab", "B", "bc", "n", "s", "i", "y", "bs", "g", "h", "abc", "fb", "aa", "wb", "f", "e", "sb", "ba", "v", "bb", "r", "bf", "p"], "c": ["o", "k", "x", "ci", "cb", "col", "ac", "n", "s", "i", "y", "g", "h", "abc", "dc", "u", "f", "e", "ca", "C", "w", "z", "l", "lc", "cd", "r", "cf", "p"], "d": ["o", "D", "dt", "x", "j", "de", "bd", "n", "da", "s", "t", "i", "y", "dy", "g", "h", "ds", "dc", "dp", "u", "e", "f", "dd", "ad", "q", "w", "z", "v", "cd", "m", "r", "p"], "o1": ["off0", "n0", "off1", "o0", "no0", " o0", "O1", "no3", "n2", "off3", "O2", "no2", "O0", "no1", "n1", "off2"], "o2": ["e4", "v5", "e5", "a0", "v2", "o0", "e6", "oa6", "a6", "oa2", " o0", "v4", "a3", "oa5", "os0", "o5", "a2", "o4", "os3", "e2", " o6", "oa4", "o6", "os2", "os6", "v6"], "o3": ["o8", "go3", "a0", "po8", "oa83", "a5", " o83", "o0", "go2", " o0", "po2", "go8", "po3", "o83", "a3", "oa5", "oa3", "o5", "oa0", "a83", "po6", " o5", "go6", " o6", "o6", " o8"], "form": ["oct", "type", "forms", "dom", "o", "case", "empty", "input", "j", "feed", "formed", "hex", "old", "cmd", "short", "data", "format", "answer", "action", "n", "option", "valid", "fact", "test", "check", "div", "transform", "command", "parent", "word", "FORM", "u", "Form", "f", "code", "term", "q", "filter", "w", "draw", "sign", "text", "m", "str", "p", "temp"]}}
{"code": "def is_stable(oline, line):\\n    for i in range(N):\\n        for j in range(i+1, N):\\n            for a in range(N):\\n                for b in range(a+1, N):\\n                    if (oline[i][1] == oline[j][1]) & (oline[i] == line[b]) & (oline[j] == line[a]):\\n                        return False\\n    return True\\n\\nN = int(input())\\nline = input().split()\\noline = line.copy()\\n#BubbleSort\\nfor i in range(N):\\n    for j in range(N-1, i, -1):\\n        if int(line[j][1]) < int(line[j-1][1]):\\n            tmp = line[j]\\n            line[j] = line[j-1]\\n            line[j-1] = tmp\\nprint(' '.join(line))\\nprint(('Not stable', 'Stable')[is_stable(oline, line)])\\n\\n#SelectionSort\\nline = oline.copy()\\nfor i in range(N):\\n    minj = i\\n    for j in range(i+1, N):\\n        if int(line[minj][1]) > int(line[j][1]):\\n            minj = j\\n    tmp = line[i]\\n    line[i] = line[minj]\\n    line[minj] = tmp\\nprint(' '.join(line))\\n\\nprint(('Not stable', 'Stable')[is_stable(oline, line)])", "target": "30", "substitutes": {"oline": ["choice", "el", "online", "mol", "o", "loc", "file", "interface", "ol", "le", "bo", "cycle", "slice", "bro", "point", "ilo", "Line", "data", "ie", "inter", "LINE", "cli", "int", "anch", "iron", "rule", "lane", "ole", "poly", "range", "que", "po", "liner", "cl", "lead", "body", "plugin", "iter", "quote", "union", "sequence", "adr", "model", "ine", "flo", "lin", "anne", "oa", "inline", "one", "eline", "pin", "base", "module", "panel", "office", "vol", "zone", "lined", "article", "li", "oxy", "ace", "inet", "style", "pe", "ice", "ne", "letter"], "line": ["note", "file", "log", "string", "frame", "online", "o", "grade", "part", "le", "ol", "object", "c", "page", "cycle", "point", "Line", "cle", "name", "section", "lo", "inter", "data", "LINE", "rule", "int", "anch", "lane", "plane", "ole", "list", "range", "liner", "band", "block", "entry", "body", "cell", "iter", "ne", "do", "co", "word", "source", "lines", "error", "model", "row", "ine", "zip", "lin", "len", "e", "inline", "eline", "end", "code", "base", "edge", "link", "chain", "l", "lc", "zone", "li", "group", "cl", "letter"], "i": ["pi", "di", "o", "it", "ji", "k", "x", "xi", "c", "ci", "d", "yi", "ri", "ie", "ori", "int", "ind", "n", "s", "ini", "ui", "bi", "id", "y", "ia", "si", "u", "iu", "f", "I", "e", "mi", "ai", "z", "p", "qi", "v", "l", "ii", "li", "m", "r", "io", "zi"], "j": ["ji", "o", "ang", "k", "x", "c", "d", "ind", "n", "J", "y", "g", "h", "ij", "bj", "ib", "ip", "jo", " l", "u", "ja", "e", "f", " o", "jet", "ad", "jj", " k", "q", "ai", "w", "z", "p", "l", "v", "aj", "jp", "r", "m", "li"], "a": ["area", "o", "c", "ar", "d", "ak", "ac", "ab", "af", "n", "an", "s", "A", "y", "alpha", "api", "na", "sa", "ana", "ia", "aa", "u", "va", "e", "f", "am", "ad", "ca", "ga", "ai", "w", "ba", "l", "aj", "ap", "p"], "b": ["o", "k", "al", "x", "c", "d", "nb", "ab", "ac", "B", "n", "an", "bi", "y", "g", "h", "ib", "aa", "br", "u", "f", "e", "am", "sb", "ai", "w", "z", "ba", "v", "l", "bb", "r", "ap", "p"], "N": ["Node", "NA", "D", "S", "CN", "R", "NS", "E", "NE", "NC", " I", "Line", "B", "Ns", "T", "LINE", "n", "J", " O", "Y", " C", "Ni", "L", "A", "Num", "NM", " n", "network", " Ne", "Q", "I", " number", "X", "C", "Na", "Ne", "RN", "V", "P", "K", "O", "H", "M", "F", "Z"]}}
{"code": "H, W, K = map(int, input().split())\\nrsum = [[0] * (W + 1)]\\nfor _ in range(H):\\n    rsum.append([0])\\n    tot = 0\\n    for c, v in enumerate(map(int, input())):\\n        tot += v\\n        rsum[-1].append(tot + rsum[-2][c + 1])\\nans = 10 ** 10\\nfor i in range(1 << H):\\n    hcuts = [0]\\n    for j in range(H - 1):\\n        if i & (1 << j):\\n            hcuts.append(j + 1)\\n    hcuts.append(H)\\n    vcuts = [0]\\n    ok = True\\n    for c in range(1, W + 1):\\n        for b in range(2):\\n            max_w = 0\\n            for h in range(1, len(hcuts)):\\n                max_w = max(\\n                    max_w,\\n                    rsum[hcuts[h]][c]\\n                    - rsum[hcuts[h - 1]][c]\\n                    - rsum[hcuts[h]][vcuts[-1]]\\n                    + rsum[hcuts[h - 1]][vcuts[-1]],\\n                )\\n            if max_w > K:\\n                if b:\\n                    ok = False\\n                    break\\n                vcuts.append(c - 1)\\n        if not ok:\\n            break\\n    if not ok:\\n        continue\\n    vcuts.append(W)\\n    ans = min(ans, len(hcuts) - 2 + len(vcuts) - 2)\\nprint(ans)\\n", "target": "329", "substitutes": {"H": ["U", "SH", "D", "S", "HC", "R", "E", "B", "RH", "T", "J", "HH", "NH", "Y", "A", "L", "G", "HK", "EH", "Q", "Ha", "I", "X", "C", "HI", "V", "w", "P", "O", "Ch", "M", "F", "CH", "N", "Z"], "W": ["U", "GW", "TW", "D", "S", "Width", "R", "E", "WF", "B", "T", "J", "n", "Y", "A", "L", "G", "Wh", "Web", "WP", "Size", "NW", " w", "Q", "WC", "WS", "Wi", "X", "SW", "C", "CW", "DC", "V", "w", "P", "We", "MW", "M", "VW", "F", "WD", "N"], "K": ["U", "D", "k", "S", "R", "E", "B", "T", "J", "Y", "A", "L", "G", "KK", "HK", "Q", "AN", "X", "C", "V", "P", "O", "KS", "M", "F", "N", "Z"], "rsum": ["rssum", "rsam", "rsums", "hsums", "hsut", "srpace", "Rsign", "ssum", "csul", "rsub", "arsum", "rsul", " rssum", "srum", "RSam", "ssut", "psub", "arsumm", "psum", "rsign", "sssum", "Rsut", "hsub", "cssum", "psumm", "Rssum", "srub", "RSub", "RSign", "rsm", "csum", "rsut", "psam", "RSum", " rsam", "arsub", "Rsub", "Rsums", " rsm", "rspace", "hsum", "hsul", "Rsumm", "srsum", "Rsum", "csub", "RSul", " rsumm", "Rspace", "RSpace", "RSums", "rsumm", "RSsum", "Rsam", " rsign", "arsm", "Rsm", "ssub", " rsub", "pssum", "hssum", "arssum"], "_": ["k", "x", "ac", "g", "ow", "ip", "f", "code", "C", " k", "q", "w", "l", "oc", "p", "block"], "tot": ["tyoby", "dtot", "tyori", "ttcot", " toby", "ttOT", "Tot", "tori", " tor", "etor", " tori", "etOT", "toto", "etot", "dtiot", " toti", "Tor", "tyot", "tyiot", "tcot", "ttoti", "TOT", " tiot", "tOT", " tOT", "toti", "Toto", " tcot", "etoto", "toby", "tiot", "ttot", "tor", " toto", "Toti", "dtori", "Tcot", "dtoby"], "c": ["cur", "o", "k", "x", "cy", "ci", "d", "cb", "col", "ac", "a", "uc", "bc", "n", "cc", "s", "ce", "t", "ch", "cs", "y", "ec", "g", "co", "ct", "cm", "dc", "vc", "cu", "xc", "u", "e", "f", "end", "C", "q", "w", "z", "cr", "lc", "sc", "cd", "pc", "l", "m", "cf", "oc", "p", "r", "rc", "count"], "v": ["k", "ve", "x", "cv", "d", "ver", "vv", "vs", "n", "s", "ov", "av", "t", "y", "tv", "g", "lv", "iv", "u", "e", "f", "vd", "q", "V", "w", "sv", "z", "nv", "l", "m", "r", "p", "vi"], "ans": ["offs", "ls", "cus", "anus", "aning", "ras", "nas", "ins", "reads", "ars", "ants", "vs", "amps", "ens", "an", "s", "ops", "anc", " means", "ats", "cs", "oss", "ents", "ams", "anon", "sk", "na", "os", "anas", "ms", "ds", "ks", "ana", "An", "nan", "can", "AN", "leans", "aned", "ANS", "ann", "lan", "ps", "ns", "ions", "ani", "ai", "ays", "acs", "aus", "ons", "au"], "i": ["pi", "di", "ji", "o", "x", "xi", "ci", "yi", "a", "ie", "int", "ind", "n", "ni", "bi", "id", "ij", "ip", "si", "u", "iu", "f", "I", "hi", "ai", "z", "l", "ii", "li", "m", "ih", "p", "zi"], "hcuts": ["rhruns", "hrsettings", "htools", " hballs", "vsets", " hores", "hcutting", "hruns", "csettings", "hrcuts", "ccases", "vbreaks", "ccut", " hsets", "hltools", "cballs", "hpieces", "jcut", "vapes", "hbreaks", "vruns", "hrcases", "vclips", "hcut", "jclips", "hlruns", "Hlimits", "hlcuts", "Hoffs", " hclips", "rballs", "Hbreaks", "vores", "ccuts", " hbreaks", "hoffs", "vlimits", "vpieces", "rcut", "hapes", " hcases", " hlimits", "Hruns", "hores", "Hcut", " hapes", "shcut", "hrcut", " hruns", "jsets", "shores", "hsets", "climits", " hoffs", "rhcuts", "shcuts", "hballs", " htools", " hcutting", "Hcuts", "Hapes", " hpieces", "vcut", "hlimits", "shpieces", " hcut", "rhtools", "hcases", "voffs", "jcuts", "rcuts", "hlcutting", "rhcutting", "Hpieces", "hclips", "vballs", " hsettings", "hsettings"], "j": ["ji", "o", "js", "k", "x", "d", "jc", "ie", "n", "J", "ch", "ni", "bi", "y", "g", "ah", " n", "ij", "jl", " l", "si", "u", "ja", "f", "I", "adj", "jj", "q", "sh", "w", "z", "qi", "jp", "l", "ii", "r", "li", "m", "aj", "ih", "p", "uj", "vi"], "vcuts": ["vpieces", "kcuts", "vclips", "hcut", "houts", "vcut", "vcutting", "juts", "hlimits", " vcut", " vjobs", "cclips", "vsets", "vouts", "fpieces", "hcutting", " vcutting", " vlimits", "wcut", "fcuts", "vlimits", "hsets", "hjobs", "vuts", "wlimits", "jlimits", "csets", " vouts", "fcut", "vbreaks", " vclips", "ccut", "jcuts", "wcuts", "ccuts", " vpieces", "kcutting", "fbreaks", "hpieces", " vsets", " vuts", "cpieces", "huts", "jcut", "vjobs", "couts", "hclips", "kjobs", "kcut", "hbreaks", " vbreaks"], "ok": ["ik", "auto", "log", "o", "loc", "sync", "k", "good", "err", "od", "kk", "Ok", "op", "ready", "ak", "oy", "cb", "ob", "bug", "a", "app", "bc", "ck", "all", "OK", "info", "ync", "id", "root", "key", "arm", "kg", "check", "unk", "ack", "ah", "og", "ms", "oks", "md", "ick", "bad", "error", "ko", "aut", "ask", "nt", "ad", "lock", "lang", "oko", "w", "kw", "now", "oc", "req", "arg", "enc"], "b": ["o", "k", "x", "d", "cb", "nb", "a", "bh", "ab", "bc", "B", "bis", "n", "bi", "y", "bs", "bar", "g", "batch", "wb", "lb", "u", "f", "e", "q", "w", "z", "ba", "l", "bid", "bb", "m", "p", "bp"], "max_w": ["maxJwa", "maxNW", " max_max", " max_wh", " max_W", "max_ws", "last_wh", "max_max", "max_W", "maxNw", "maxJw", " max_wa", "last_ws", "maxNws", "maxJwh", "last_W", "maxJW", "max_wh", "maxPw", "maxPmax", "last_w", "max_wa", " max_ws", "maxPW", "maxPws", "maxNmax"], "h": ["home", "k", "x", "oh", "d", "ht", "a", "bh", "head", "n", "rh", "s", "t", "ch", "id", "y", "ph", "g", "ah", "hh", "th", "host", "u", "f", "e", "hr", "hi", "q", "sh", "w", "uh", "z", "l", "hm", "r", "m", "he", "ih", "p", "hs"]}}
{"code": "h,n=map(int,input().split())\\nab=[list(map(int,input().split())) for _ in range(n)]\\nmx=max(a for a,b in ab)\\ndp=[10**10]*(h+1+mx)\\ndp[0]=0\\nfor i in range(1,h+1+mx):\\n  dp[i]=min(dp[i-a]+b for a,b in ab)\\nprint(min(dp[h:]))", "target": "41", "substitutes": {"h": ["hl", "o", "ha", "k", "x", "oh", "j", "c", "d", "ht", "bh", "rh", "num", "hp", "t", "y", "ph", "g", "ah", "hd", "hh", "header", "th", "u", "f", "e", "max", "end", "hr", "hi", "q", "sh", "w", "gh", "z", "v", "l", "hm", "m", "r", "H", "ih", "p", "hs"], "n": ["o", "k", "x", "j", "c", "d", "nm", "nb", "num", "y", "count", "nn", "u", "f", "e", "ns", "sn", "q", "w", "z", "l", "v", "m", "r", "nc", "nin", "p", "ne", "N"], "ab": ["eb", "mb", "al", "abb", "ar", "ak", "acl", "ob", "nb", "cb", " am", "ac", "app", "abet", "af", "abs", "ast", "array", "rb", "av", " ib", "tab", "aban", "Ab", "bs", "lab", "hab", "ax", "abc", "ib", "fab", " arr", "atom", "aa", "am", "ad", "aba", "ai", "ae", "ba", "AB", "ada", "aj", "bb", "abi", "ap", "aps", "bm", "au"], "_": ["k", "x", "ac", " p", " time", "an", "num", "id", "g", " j", "ip", " seq"], "mx": ["lim", "wm", "mc", "mb", "xp", "x", "mos", "mic", "fm", "np", "large", "mod", "nz", "an", "num", "az", "weight", "y", "mag", "mn", "xml", "na", "min", "ax", "dim", "abc", "rx", "pha", "ml", "cm", "aa", "norm", "mu", "hop", "max", "mi", "ns", "mm", "im", "ai", "pm", "dm", "MX", "m", "bp", "bm"], "a": ["ma", "area", "ha", "al", "x", "c", "ar", "d", "ama", "sub", "ac", "wa", "af", "pa", "abs", "da", "all", "an", "A", "y", "alpha", "na", "sa", "ax", "ana", "ia", "aa", "la", "u", "va", "f", "e", "am", "ad", "ca", "ga", "ai", "ae", "w", "z", "ba", "ea", "ada", "aj", "m", "r", "p", "ka", "au"], "b": ["part", "eb", "k", "mb", "x", "db", "c", "d", "ob", "cb", "sub", "ac", "amb", "B", "s", "rb", "t", "bas", "y", "bar", "g", "boot", "ib", "bl", "big", "bin", "lb", "u", "f", "e", "buff", "ad", "sb", "w", "z", "ba", "l", "v", "r", "m", "emb", "p"], "dp": ["wp", "df", "lp", "tp", "di", "dt", "dos", "pb", "px", "db", "sp", "np", "d", "pair", "data", "diff", "pos", "pa", "DP", "pkg", "wd", "gap", "ds", "cp", "dB", "dr", "cm", "dc", "ip", "projects", "dep", "pp", "xd", "imp", "hr", "ga", "dl", "pm", "P", "dm", "ep", "params", "dn", "patch", "bb", "deb", "dist", "eps", "dat", "p", "gp", "fp"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "d", " I", " ii", "int", "ind", "ui", "ini", "t", "bi", "id", "y", " j", "g", "ij", "ix", "index", "ip", "si", "u", "iu", "f", "I", "e", "hi", "ai", "z", "v", "l", "ii", "m", "li", "p"]}}
{"code": "n = int(input())\\n\\ns = []\\nfor i in range(n):\\n  s.append(input())\\n  \\nno = False\\n\\ns_1 = s[1::]\\n\\nfor i, c in enumerate(s):\\n  if s.count(c) > 1:\\n    no = True\\n    \\n  if i < len(s)-1:\\n    c_1 = s_1[i]\\n    if c[-1] != c_1[0]:\\n      no = True\\n      \\nif no == True:\\n  print('No')\\nelse:\\n  print('Yes')", "target": "218", "substitutes": {"n": ["o", "k", "x", "j", "np", "d", "nb", "name", "Ns", "num", "t", "count", "g", "network", "nn", "number", "nit", "net", "f", "nt", "e", "b", "ns", "z", "l", "m", "r", "nc", "p", "ne", "N"], "s": ["states", "ls", "o", "services", "parts", "S", "results", "d", "ses", "a", "ss", "sl", "t", "strings", "cs", "y", "sort", "g", "os", "sa", "cells", "rows", "ks", "gs", "south", "si", "u", "sets", "f", "e", "b", "ps", "ns", "es", "sb", "w", "sv", "l", "v", "groups", "r", "xs", "se", "p"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "gi", "ci", "d", "yi", "ri", "a", "start", "ind", "ini", "ui", "t", "ni", "bi", "id", "y", "index", "ip", "si", "u", "iu", "e", "I", "ti", "f", "b", "ai", "z", "p", "chi", "v", "lc", "ii", "l", "li", "m", "io"], "no": ["maybe", "auto", "orno", "part", "o", "type", "ado", "this", "bo", "connection", "sp", "name", "only", "a", "lo", "pos", "go", "non", "po", "ni", "cho", "na", "cond", "do", "co", "bad", "No", "error", "number", "ko", "problem", "mo", "run", "nos", "default", "nt", "one", "NO", "none", "so", "ano", "skip", "yes", "io", "block"], "s_1": [" c_c", "s_one", "s_0", " c_n", "cs_2", " c_one", "cs_0", "s_2", "s_c", "s_n", "cs_n", "cs_1"], "c": ["o", "cn", "k", "x", "ci", "d", "col", "ac", "a", "cc", "ce", "t", "ch", "cs", "y", "h", "ct", "cm", "dc", "cu", "u", "e", "f", "b", "C", "z", "cr", "v", "lc", "l", "ic", "m", "r", "cf", "nc", "p", "count"], "c_1": ["c__1", "c_5", "p_one", "c_i", "cs_2", "c__one", "cs_0", "p_1", "c_2", "p_5", "c_0", "cs_i", "c__2", "c_one", "c__5", "cs_1", "p_2"]}}
{"code": "s=input()\\nt=input()\\nans=int(len(s))\\nfor i in range(len(s)-len(t)+1):\\n    now=int(0)\\n    for j in range(len(t)):\\n        if s[i+j]!=t[j]:\\n            now+=1\\n    ans=min(now,ans)\\nprint(ans)", "target": "526", "substitutes": {"s": ["services", "o", "ls", "S", "su", "c", "d", "ins", "ses", "a", "ss", "n", "cs", "y", "g", "os", "h", "ts", "ds", "ks", "gs", "ies", "sf", "sq", "south", "si", "u", "sets", "e", "f", "ys", "b", "ps", "ns", "es", "sb", "sh", "sv", "l", "less", "m", "xs", "se", "p"], "t": ["o", "tp", "dt", "type", "at", "qt", "x", "tu", "c", "tool", "d", "to", "a", "T", "n", "ot", "y", "test", "python", "rt", "g", "h", "target", "ts", "tt", "tf", "tools", "table", "u", "f", "e", "b", "pt", "w", "ta", "z", "v", "l", "template", "m", "p", "temp"], "ans": ["offs", "ls", "x", "nas", "ars", "ants", "ss", "any", "amps", "ens", "args", "an", "anc", "ops", " means", "ats", "asts", "cs", "ians", "ams", "ents", "sk", "annot", "na", "os", "anon", "anas", "plan", "ds", "ms", "anz", "ks", "nan", "nn", "span", "ana", "can", "AN", "cas", "aned", "leans", "anne", "ANS", "oa", "max", "ann", "lan", "ns", "ani", "ano", "annels", "ays", "xs", "eps", "ons"], "i": ["pi", "o", "k", "x", "xi", "c", "ci", "d", "ri", "a", "io", "ie", "start", "ind", "ui", "ini", "bi", "id", "y", "h", "index", "ip", "si", "u", "iu", "f", "I", "e", "b", "mi", "hi", "ki", "ai", "z", "ii", "li", "ih", "p"], "now": ["auto", "this", "first", "after", "current", "old", "start", "app", "ager", "amp", "info", "id", "today", "time", "force", "we", "ms", "ok", "self", "parent", "ow", "next", "then", "age", "always", "last", "size", "since", "NOW", "anne", "max", "before", "mm", "new", "so", "where", "aj", "order", "Now", "count"], "j": ["kj", "ji", "o", "k", "x", "d", " ii", "ind", "n", "J", "uj", "ch", "y", "key", "h", "ij", "ix", "index", "jl", "jo", " l", "si", "u", "ja", "f", "je", "obj", "e", "end", "b", "jj", "q", "z", "qi", "v", "jp", "aj", "l", "li", "m", "ii", "p", " jo"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\nsys.setrecursionlimit(10 ** 9)\\n\\ndef main():\\n    X = int(input())\\n    if X >= 30:\\n        print('Yes')\\n    else:\\n        print('No')\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "371", "substitutes": {"input": ["type", "exit", "element", "out", "x", "search", "raw", "output", "data", "sys", " Input", "int", "util", "action", " output", "view", "pull", "ll", "print", "config", "enter", "i", "IN", "call", "login", "python", " x", "self", "parent", "request", "index", "header", " inputs", "active", "eval", "reader", "select", "filter", "lib", "accept", "str", "Input", "exec", "method"], "X": ["U", "D", "VALUE", "ZX", "CL", "x", "R", "XX", "B", "T", "W", "J", "Y", "Integer", "A", "L", "G", "IP", "Check", "Q", "WS", "I", "C", "XL", "TX", "V", "FF", "P", "XP", "K", "MX", "XXX", "H", "M", "IX", "F", "N", "Z"]}}
{"code": "n,a,b=map(int,input().split())\\nmi=a*(n-1)+b\\nma=b*(n-1)+a\\nprint(max(0,ma-mi+1))", "target": "395", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "an", "num", "s", "A", "i", "y", "mn", "na", "min", "g", "network", "nn", "bin", "u", "e", "f", "max", "ns", "q", "w", "z", "l", "v", "m", "r", "nc", "nin", "p", "ne", "N"], "a": ["area", "x", "j", "c", "d", "ac", "ab", "af", "da", "all", "an", "A", "fa", "i", "y", "alpha", "g", "sa", "ana", "ia", "aa", "u", "va", "f", "e", "am", "ad", "ca", "ga", "ai", "ae", "w", "aaa", "ba", "z", "m", "p", "au"], "b": ["o", "eb", "k", "mb", "abb", "x", "j", "c", "d", "cb", "nb", "ab", "B", "bc", "s", "rb", "bi", "i", "y", "bs", "g", "fb", "h", "ib", "bin", "aa", "u", "e", "f", "end", "ad", "sb", "be", "z", "ba", "v", "m", "bb", "bf", "r", "p"], "mi": ["mini", "pi", "di", "mc", "xi", "mic", "ima", "ci", "nm", "ina", "mia", "imi", "ini", "ni", "bi", "i", "mn", " Mi", "ms", "ia", "umi", "si", "ami", "mu", "MI", "ki", "mis", "mm", "ai", "ani", "chi", "qi", "m", "li", "Mi", "vi"], "ma": ["mini", " sa", "mc", "mma", " ca", "ima", " fa", "mia", "da", "mmm", "ini", "fa", " mm", "ema", "alpha", "Ma", " alpha", "na", "sa", "ia", " ka", "ra", "aa", " wa", " da", "mo", "si", "ami", " Ma", " ra", "mu", "ee", "mas", "MA", "mm", "ga", "ai", "ea", "m", " pi", "Mi"]}}
{"code": "s = list(input())\\nans = 0\\nfor i in range(1, len(s)):\\n    if s[i] != s[i-1]:\\n        ans += 1\\nprint(ans)", "target": "655", "substitutes": {"s": ["states", "ls", "services", "parts", "o", "S", "ings", "ssl", "input", "c", "d", "ses", "a", "opens", "ss", "n", "args", "qs", "ows", "strings", "cs", "ats", "y", "g", "os", "cells", "blocks", "ds", "ips", "gs", "lines", "south", "si", "u", "letters", "sets", "f", "sym", "e", "ys", "b", "ps", "ns", "es", "sb", "w", "l", "v", "ains", "xs", "words", "p"], "ans": ["offs", "ls", "asses", "x", "anus", "nas", "ins", "reads", "a", "ars", "ants", "aid", "amps", "ens", "args", "an", " means", "ats", "asts", "cs", "ents", "ams", "sk", "na", "os", "comments", "anas", "ks", "ana", "ids", "span", "anes", "can", "lines", "AN", "aned", "leans", "ANS", "acts", "ann", "lan", "ns", "ani", "aces", "ays", "mean", "aus", "ons"], "i": ["mini", "pi", "di", "part", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "a", "io", "start", "int", "ind", "n", "bi", "id", "y", "ix", "index", "eni", "si", "u", "iu", "e", "I", "ti", "b", "mi", "ai", "z", "qi", "l", "v", "ii", "li", "p", "zi"]}}
{"code": "#ABC-120-A\\nA, B, C = map(int, input().split())\\nans = 0\\nwhile B >= A:\\n    B -= A\\n    ans += 1\\n    if ans == C:\\n        break\\n        \\nprint(ans)", "target": "64", "substitutes": {}}
{"code": "N, X = map(int,input().split())\\nm = [int(input()) for _ in range(N)]\\nX -= sum(m)\\na = min(m)\\nprint(N + X//a)\\n", "target": "10", "substitutes": {"N": ["Node", "D", "S", "x", "R", "NS", "E", "B", "Ns", "T", "n", "W", "J", "Y", "A", "L", "G", "Num", "CNN", "NM", " n", "Size", "NN", "No", "Q", "Length", "I", "C", "Na", "Ne", "NUM", "V", "P", "K", "O", "H", "M", "F", "Z"], "X": ["U", "D", "x", "R", "NS", "E", "XX", "B", "T", "n", "J", "W", "Y", "A", "L", "G", "DX", "Num", "xxx", " x", "An", "Ex", "Q", "I", "xx", "C", "Na", "Ne", "TX", "V", "P", "XP", "K", "O", "XXX", "H", "M", "F", "Z"], "m": ["o", "mc", "x", "j", "tm", "c", "om", "d", "data", "mod", "n", "meta", "s", "A", "i", "y", "them", "min", "dim", "h", "ms", "mx", "md", "cm", " M", "u", "e", "f", "mu", "b", "mm", "im", "z", "dm", "l", "v", "mean", "r", "M", "p", "bm"], "_": ["x", " __", " line", " col", " time", " ip", "g", " j", " seq", "len"], "a": ["ma", "area", "Alpha", "ab", "ac", "wa", "aux", "af", "n", "mA", "da", "an", "A", "fa", "alpha", "na", "xa", "sa", "ia", "span", "aa", "la", "va", "AA", "b", "ca", "ans", "Na", "ai", "ae", "aaa", "ba", "ea", "aj", " A", "au"]}}
{"code": "N, K = map(int, input().split())\\nA = list(map(int, input().split()))\\nF = list(map(int, input().split()))\\n\\nA.sort()\\nF.sort(reverse=True)\\n\\ndef check(mid):\\n    cnt = 0\\n    for i in range(N):\\n        tmp = mid // F[i]\\n        cnt += max(A[i] - tmp, 0)\\n    return cnt <= K\\n\\ncheck(2)\\n\\nl, r = -1, 10**30\\nwhile r-l > 1:\\n    mid = (l+r)//2\\n    if check(mid):\\n        r = mid\\n    else:\\n        l = mid\\n\\nprint(r)\\n", "target": "633", "substitutes": {"N": ["ND", "NA", "D", "S", "R", "NS", "E", "NL", "NE", "B", "Ns", "T", "n", "W", "Y", "L", "NB", "NT", "NM", " n", "No", "Q", "I", "X", "NO", "C", "Ne", "NR", "V", "P", "KN", "H", "M", "Z"], "K": ["U", "D", "k", "S", "Max", "R", "E", "NC", "B", "T", "W", "J", "Y", "G", "L", "NB", "KK", "Q", "PK", "X", "C", "V", "P", "MC", "KB", "KS", "O", "H", "M", "Z"], "A": ["AR", "As", "NA", "D", "S", "R", "ANC", "Alpha", "a", "B", "CA", "All", "PA", "At", "Array", "AD", "Az", "AM", "L", "Am", "AS", "Ab", "BA", "GA", "AU", "TA", "Adam", "AP", "Average", "Ar", "AN", "AA", "X", "AMI", "AST", "MA", "P", "API", "AF", "AB", "AC", "AW", "LA"], "F": ["U", "IF", "D", "Fin", "R", "Fs", "E", "Family", "WF", "FD", "FM", "PF", "B", "EF", "T", "W", "J", "Y", "Fl", "L", "G", "OF", "FH", "File", "Far", "Q", "f", "I", "X", "FB", "C", "DF", "V", "FF", "P", "AF", "Fun", "O", "M", "H", "ELF", "Z"], "mid": ["mini", "c", "sub", "medium", "rm", "grid", "trial", "rb", "cmp", "ms", "mi", "lc", "orig", "m", "right", "middle", "cl", "mode", "part", "loc", "pid", "R", "rad", "ro", "range", "id", "cand", "md", "dr", "max", "hi", "shift", "bid", "lim", "rest", "rd", "low", "mult", "lo", "diff", "int", "ind", "ra", "nr", "nt", "cd", "patch", "Mid", "req", "dom", "partial", "start", "nd", "pos", "mr", "late", "min", "dim", "line", "master", "pad", "main", "rel", "address", "rand", "dist", "order"], "cnt": ["nct", "ctct", "ctount", "lcwd", "uccount", "cwd", "ccount", " cnd", "lcnt", "nnt", " ccount", "rcnd", "ctrt", "cnd", "Crt", "ucnt", "ctnt", "ucnd", "rcct", "cct", "ucct", "Cnt", "Count", "cnc", "lcct", " cnc", "Cct", "nwd", " count", "lcnc", "rccount", "rcnt", " crt", "nnc", " cwd", " cct", "crt", "count"], "i": ["pi", "di", "uri", "x", "xi", "j", "gi", "c", "gu", "ci", "d", "yi", "phi", " I", "ri", "ie", "start", "ori", "pos", "int", "ind", "n", "num", "ui", "ini", "id", "uni", "h", "index", "ip", "multi", "si", "u", "iu", "f", "ti", "I", "e", "b", "im", "ai", "z", "qi", "v", "ii", "li", "m", "p"], "tmp": ["mini", "part", "kk", "j", "done", "nm", "img", "phi", "data", "start", "ptr", "pos", "amp", "t", "rb", "cmp", "alpha", "proc", "offset", "cp", "tt", "beta", "pad", "nu", "mp", "nom", "mu", "nt", "stuff", "sup", "cont", "qq", "mm", "emp", "v", "jp", "attr", "m", "sam", "dist", "now", "small", "p", "temp", "orig", "elt"], "l": ["el", "lp", "ls", "k", "le", "j", "ul", "c", "R", "d", "left", "a", "lo", "sl", "n", "ll", "s", "t", "L", "range", "g", "h", "lr", "nl", "la", "u", "len", "lb", "f", "e", "rl", "b", "dl", "w", "z", "v", "lc", "m", "li", "ln", "p"], "r": ["cur", "rs", "vr", "k", "rd", "x", "j", "ul", "c", "er", "R", "d", "ar", "a", "n", "s", "rh", "mr", "t", "rb", "rf", "yr", "rt", "g", "rg", "ir", "h", "rx", "dr", "lr", "pr", "nr", "u", "ur", "f", "e", "rr", "rl", "b", "rn", "q", "w", "z", "cr", "v", "lc", "m", "right", "fr", "ru", "p", "kr", "sr"]}}
{"code": "def resolve():\\n    n, k = map(int, input().split())\\n    ans = k * ((k-1) ** (n-1))\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    resolve()", "target": "582", "substitutes": {"n": ["o", "kn", "cn", "x", "j", "c", "d", "nb", "num", "an", "i", "y", "en", "network", "nn", "nan", "un", "nl", "u", "f", "nt", "b", "ns", "pn", "q", "w", "z", "l", "m", "nc", "ln", "p", "N"], "k": ["ik", "o", "kn", "ke", "x", "kk", "j", "c", "d", "ak", "num", "kick", "i", "y", "key", "sk", "unk", "h", "ok", "ks", "kid", "inn", "km", "ko", "kin", "u", "size", "f", "e", "b", "ki", "q", "w", "z", "K", "l", "m", "p", "ka", "N"], "ans": ["ANN", "anus", "san", "aning", "anan", "nas", "ins", "anks", "ants", "an", "anc", " means", "ats", "anon", "sk", "na", "anas", "plan", "ks", "ana", "An", "nan", "can", "anes", "cons", "AN", "atan", "aned", "kin", "anne", "ANS", "leans", "ann", "lan", "ns", "ane", "scan", "sn", "ani", "aus"]}}
{"code": "s = input()\\nsf = s[:int((len(s)-1)/2)]\\nsl = s[int((len(s)+3)/2)-1:]\\nif s == s[::-1] and sf == sf[::-1] and sl == sl[::-1]:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "420", "substitutes": {"s": ["states", "services", "ls", "fs", "o", "string", "rs", "S", "sync", "ssl", "input", "su", "speech", "c", "search", "events", "d", "service", "ses", "ws", "a", "sol", "session", "ss", "als", "n", "single", "qs", "t", "space", "strings", "i", "cs", "y", "g", "os", "sa", "cells", "ts", "shell", "sample", "source", "gs", "request", "lines", "sq", "south", "si", "u", "sets", "f", "e", "ys", "b", "ps", "ns", "new", "es", "sb", "w", "sv", "l", "v", "sg", "less", "m", "xs", "now", "p"], "sf": ["lp", "ls", "fs", "df", "ze", "iw", "ssl", "fw", "lf", "fts", "sp", "fm", "ws", "ss", "elf", "ff", "vp", "suff", "rf", "sd", "fe", "sw", "tf", "fx", "fg", "sq", "aff", "si", "fi", "f", "tif", "xf", "SF", "sb", "sh", "sv", "bf", "cf", "hs", "isf", "gp", "fp"], "sl": ["el", "ls", "iw", "ess", "sit", "phil", "ssl", "wl", "sp", "sch", "sil", "kl", "fl", "sle", "sie", "ll", " Sl", "cel", "sd", "sk", "sa", "SL", "bl", "nl", "sel", "la", "si", "il", "isl", "f", "sm", "sn", "so", "sb", "dl", "sh", "Sl", "sv", "l", "lc", "v", "p"]}}
{"code": "s = input()\\neven, odd = [], []\\nfor i in range(len(s)):\\n    if i%2:\\n        odd.append(s[i])\\n    else:\\n        even.append(s[i])\\ne = list(set(odd))\\no = list(set(even))\\nif('L' in o or 'R' in e):\\n    print('No')\\nelse:\\n    print('Yes')", "target": "686", "substitutes": {"s": ["ls", "parts", "string", "services", "S", "input", "plus", "c", "events", "d", "ws", "ses", "ins", "a", "ss", "n", "t", "strings", "y", "sk", "g", "sections", "ds", "gs", "lines", "sq", "south", "u", "sets", "letters", "f", "b", "objects", "ns", "es", "tests", "sb", "l", "sg", "m", "r", "now", "se", "p"], "even": ["Even", "part", "oe", "element", "x", "plus", "d", "down", "left", "a", "data", "only", "diff", "pos", "n", "both", "inc", "own", "entry", "en", "vert", "change", "day", "next", "main", "dd", "one", "end", "edge", "other", "power", "w", "ae", "cross", "company", "right", "order", "p", "up", "form", "two", "wrong"], "odd": ["bow", "extra", "k", "od", "plus", "off", "d", "down", "old", "a", "data", "only", "diff", "eight", "both", "opp", "ean", "own", "id", "inner", "div", "ant", "ok", "ow", "ordered", "idd", "dd", "one", "none", "edge", "other", "no", "power", "add", "l", "cross", "length", "right", "up", "form"], "i": ["mini", "pi", "di", "uri", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "ri", "col", "oi", "a", "phi", "ie", "start", "io", "int", "ind", "n", "num", "ini", "ui", "t", "ni", "bi", "id", "y", "ix", "index", "si", "u", "iu", "f", "I", "ti", "b", "mi", "hi", "ai", "z", "qi", "l", "v", "ii", "li", "p", "vi"], "e": ["el", "oe", "element", "le", "x", "c", "d", "E", "ie", "une", "n", "ot", "ote", "y", "fe", "g", "change", "ow", "error", "u", "ee", "f", "end", "b", "edge", "es", "ae", "w", "z", "l", "v", "ea", "r", "p", "pe", "ne"], "o": ["oe", "ve", "k", "out", "c", "d", "E", "oo", "oi", "a", "ie", "une", "n", "ot", "ole", "po", "own", "y", "os", "g", "ow", "u", "f", "one", "ee", "b", "ed", "none", "no", "z", "of", "wo", "v", "O", "m", "p", "ou"]}}
{"code": "N = int(input())\\ncount = [0,1]\\nif N == 1:\\n  print(1)\\n  exit()\\nfor i in range(2,N+1):\\n  digit = len(str(i))\\n  head = int(str(i)[0])\\n  tail = int(str(i)[-1])\\n  plus = 0\\n  if digit == 1:\\n    plus=1\\n  elif digit == 2:\\n    if head == tail:\\n      plus = 3\\n    elif head>tail and tail>0:\\n      plus = 2\\n  elif tail>0:\\n    for j in range(digit-2):\\n      plus += 10**j*2\\n    if head == tail:\\n      mid = str(i)[1:-1]\\n      while len(mid)>1 and mid[0]=='0':\\n        mid = mid[1:]\\n      mid = int(mid)\\n      plus += 2*mid+1\\n      plus += 2\\n    elif head > tail:\\n      plus += 10**(digit-2)*2\\n  count.append(count[-1]+plus)\\nprint(count[N])\\n      \\n", "target": "168", "substitutes": {"N": ["U", "D", "S", "R", "NS", "NC", "B", "Ns", "T", "n", "J", "W", "Y", "Ni", "L", "G", "Len", "Num", "NB", "NT", "Size", "NN", "No", "Q", "Count", "I", "Number", "X", "NO", "C", "NI", "NUM", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "count": ["core", "log", "part", "work", "c", "current", "sum", "bug", "data", "start", "n", "long", "num", "list", "depth", "cache", "progress", "info", "weight", "id", "key", "split", "check", "time", "body", "parent", "big", "index", "number", "last", "size", "process", "Count", "f", "nt", "max", "code", "match", "base", "C", "new", "child", "status", "q", "counter", "patch", "length", "found", "now", "order", "p", "call"], "i": ["pi", "it", "uri", "k", "x", "xi", "idi", "c", "gi", "ci", "d", "input", "yi", "slice", "phi", " I", "io", "ie", "start", "ori", "cli", "int", "ind", "n", "num", "ini", "ui", "t", "s", "id", "h", "isi", "ip", "si", "iii", "u", "iu", "f", "I", "e", "b", "q", "z", "chi", "qi", "l", "ii", "ic", "li", "m", "p"], "digit": ["unit", "mini", "oct", "part", "flag", "figure", "duty", "d", "feature", "event", "point", "three", "du", "format", "start", "int", "ind", "trial", "quant", "num", "inc", "depth", "id", "prime", "alpha", "div", "dig", "date", "version", "vert", "magic", "month", "index", "header", "bin", "character", "bit", "number", "dot", "strip", "heading", "quad", "odd", "dec", "nt", "mega", "before", "dimension", "shift", "factor", "standard", "init", "position", "frac", "draw", "minus", "letter"], "head": ["first", "ide", "sum", "raw", "short", "back", "name", "start", "int", "fix", "ind", "anch", "pull", "heads", "depth", "inc", "range", "ck", "id", "key", "front", "cost", "check", "inner", "ack", "body", "h", "self", "header", "set", "index", "then", "line", "post", "run", "Head", "nt", "max", "one", "end", "before", "load", "term", "shift", "HEAD", "link", "init", "position", "tag", "ress", "origin", "patch", "length", "right", "style", "form"], "tail": ["mini", "it", "out", "left", "trial", "stop", "tie", "body", "live", "next", "null", "end", "tip", "delay", "fat", "ail", "foot", "only", "range", "tails", "weight", "id", "zero", "prefix", "offset", "forward", "match", "limit", "length", "unit", "int", "ind", "n", "long", "index", "span", "last", "len", "nt", "tag", "minus", "nil", "sum", "start", "all", "pull", "test", "lead", "min", "target", "line", "strip", "size", "before", "term", "other", "sign", "letter"], "plus": ["large", "ups", "raw", "positive", "ge", "ce", "self", "zip", "leading", "pl", "draw", "yes", "right", "up", "part", "extra", "full", "x", "scale", "only", "Plus", "weight", "zero", "more", "max", "just", "none", "limit", "shift", "add", "length", "gen", "step", "diff", "alpha", "push", "pack", "charge", "comp", "fill", " Plus", "minus", "exp", "square", "sum", "name", "pos", "pull", "amp", "inc", "cess", "quick", "custom", "line", "size", "one", "w", "sign", "gone", "skip"], "j": ["ji", "o", "js", "part", "k", "x", " d", "c", "d", " ii", "a", "start", "pos", "ind", "n", "J", "ch", "id", " dj", "g", "min", "h", "bj", "span", "jl", "day", " l", "f", "max", "jj", "hi", "mm", "q", "dj", "z", "l", "jp", "aj", "m", "fr", "r", "li", "p", "uj"], "mid": ["lim", "mini", "part", "dom", "loc", "pid", "mad", "doc", "low", "scale", "sum", "sub", "bug", "data", "mouse", "start", "raw", "mult", "diff", "pos", "int", "ind", "grid", "mind", "go", "mer", "num", "meta", "mr", "range", "mod", "ge", "id", "key", "min", "div", "dim", "date", "ms", "live", "md", "line", "master", "index", "day", "mate", "main", "multi", "dem", "cm", "me", "size", "parse", "max", "end", "mi", "hi", "match", "mm", "limit", "tag", "rand", "patch", "m", "Mid", "order", "middle"]}}
{"code": "r = int(input())\\n\\nprint(r*r)", "target": "787", "substitutes": {"r": ["rs", "err", "x", "c", "R", "d", "ar", "a", "pair", "n", "re", "rh", "s", "array", "rb", "range", "t", "rf", "i", "arr", "rt", "ir", "h", "lr", "pr", "rw", "number", "row", "radius", "nr", "br", "u", "ur", "f", "e", "rr", "b", "rec", "q", "w", "cr", "l", "v", "attr", "length", "m", "right", "order", "str", "p", "ru", "rank", "sr", "rate"]}}
{"code": "def resolve():\\n    n = int(input())\\n    a = sorted(map(int, input().split()))\\n\\n    cost = float(\"INF\")\\n    mn = 0\\n    mx = a[-1]\\n    for aa in a[:-1]:\\n        tmp = abs(mx - aa * 2)\\n        if tmp < cost:\\n            cost = tmp\\n            mn = aa\\n    print(mx, mn)\\n\\n\\nif __name__ == \"__main__\":\\n    resolve()\\n", "target": "207", "substitutes": {"n": ["o", "j", "c", "np", "d", "nb", "name", "ny", "an", "num", "ni", "g", "network", "nn", "span", "nr", "net", "fn", "nt", "f", "b", "ns", "pn", "sn", "m", "nc", "p", "N"], "a": ["ma", "area", "access", "sta", "c", "aw", "ita", "ac", "ab", "wa", "aux", "af", "ata", "an", "s", "array", "A", "alpha", "apa", "na", "sa", "qa", "ana", "la", "va", "b", "am", "ad", "ca", "ans", "ga", "ai", "ae", "asa", "ba", "aaa", "ea", "ada", "eta", "p", "au"], "cost": ["df", "grade", "cover", "err", " costs", "op", "c", "doc", "sum", "ac", "dev", "value", "risk", " Cost", "cc", "nz", "Cost", "weight", "eff", "min", "price", "score", "loss", "tax", "co", "acc", "dc", "error", "size", "pp", "f", "max", "func", "shape", "mean", "fee", "length", "ace", "right", "skip", "money"], "mn": ["ma", "wm", "mc", "np", "nm", "rm", "mmm", "ini", "nz", "margin", "ni", "weight", "na", "min", "cp", "co", "nn", "ml", "cm", "dc", "inn", "MN", "norm", "nom", "mp", "pp", "nt", "fn", "ann", "rn", "mi", "ns", "hn", "mm", "ai", "pm", "aaa", "MC", "mean", "skip", "m", "nc", "km"], "mx": ["area", "wm", "mc", "cn", "x", "px", "mic", "np", "nm", "wa", "nz", "num", "mr", " xx", "y", "mag", "xml", "xa", "na", "abc", "ms", "xxxx", "cp", "rx", "nn", "cm", "main", "nr", "mp", "pp", "hop", "AA", "X", "ns", "xx", "hn", "mi", "mm", "pm", "aaa", "dn", "ea", "MX", "m", "bp", "km", "NZ"], "aa": ["ma", "area", "\u00e4", "unit", "mc", "doc", "aw", "oo", "ar", "account", "aaaa", "phi", "ac", "af", "fc", "pa", "all", "da", "av", "A", "ni", "alpha", "xa", "qa", "sa", "na", "apa", "abc", "ay", "co", "nn", "acc", "age", "la", "va", "pp", "ee", "AA", "ad", "mm", "Na", "ai", "ae", "\u00e1", "aaa", "ba", "ea", "ii", "bb", "ace", "au"], "tmp": ["area", "tp", "cover", "ott", "sp", "np", "vm", "amount", "tc", "nm", "nb", "start", "rm", "second", "TB", "nz", "cache", "space", "margin", "t", "cmp", "test", "fb", "offset", "cp", "tt", "nn", "span", "beta", "st", "pad", "treatment", "mp", "nom", "nt", "obj", "adj", "stuff", "mm", "emp", "yy", "aaa", "v", "attr", "fee", "m", "bb", "now", "temp", "bp", "count"]}}
{"code": "a,b=map(int,input().split())\\nList = []\\nA = 0\\nfor i in range(1,1000):\\n  A +=i\\n  List.append(A)\\nK = b - a -1\\neast = List[K]\\nres = east - b\\nprint(res)", "target": "653", "substitutes": {"a": ["k", "x", "c", "d", "ab", "ac", "B", "af", "n", "da", "s", "y", "alpha", "sa", "aa", "va", "f", "e", "ad", "ca", "ae", "z", "asa", "ba", "l", "m", "r", "p"], "b": ["k", "x", "abb", "c", "d", "nb", "ab", "B", "bc", "BB", "bd", "n", "s", "rb", "range", "bas", "y", "bs", "body", "fb", "abc", "ib", "beta", "bin", "aa", "wb", "south", "u", "north", "f", "e", "base", " B", "sb", "z", "ba", "l", "v", "bb", "bf", "r", "p"], "List": ["Range", "Multi", "Base", "Light", "Result", "Full", "Letter", "Response", "Return", "Data", "LIST", "All", "Order", "Tree", "Status", "Long", "Array", "list", "L", "St", "East", "Part", "Res", "Num", "String", "Index", "Xi", "Single", "Coll", "Life", "Int", "Out", "Ex", "Ar", "Iter", "Left", "Loop", "Set", "Library", "Map", "Li", "Rest", "Group", "X", "Zone", "Block", "V", "API", "l", "Results", "Obj", "Layer", " list"], "A": ["As", "U", "area", "D", "S", "au", "R", "Alpha", "B", "CA", "Data", "T", "Offset", "BB", "mA", "At", "Array", "Y", "array", "L", "G", "Az", "Am", "alpha", "Ma", "Access", "Area", "Adam", "Average", "Ar", "Ha", "I", "AA", "Ra", "X", "Ang", "C", "Na", "V", "P", "API", "AF", "AB", "AC", "M", "F", "N", "LA"], "i": ["pi", "o", "k", "x", "xi", "j", "c", "ci", "d", " I", "io", "start", "int", "ind", "n", "info", "id", "y", "bi", "h", "ix", "index", "ip", "si", "u", "iu", "e", "I", "f", "q", "ai", "z", "l", "v", "r", "m", "li", "p"], "K": ["U", "KR", "D", "Ku", "k", "R", "E", "SK", "Ak", "B", "T", "J", "Y", "G", "L", "KK", "AK", "Q", "I", "X", "C", " k", "V", "P", "KA", "Sk", "KS", "O", "H", "M", "F", "N", "Z"], "east": ["area", "el", "central", "Result", " E", "distance", " west", "x", "results", "RS", "point", " Depths", "data", "s", "Array", "list", "rez", "RES", "range", "East", "Res", "arr", "y", "alpha", " cs", " ARC", " rs", " Results", "Eastern", "West", "ES", "lower", " Regions", "land", "south", "north", "e", " East", " Ez", "upper", "state", "Results", " rest", "dist", "middle", "west", " news"], "res": ["Range", "rs", "rest", "Result", "Rs", "resolution", "err", "our", "response", "results", "R", "ras", "RS", "local", "grid", "re", "rh", "Array", "rez", "RES", "Success", "range", "East", "Res", "result", "details", "arr", "RE", "os", "ack", "rem", "cells", "region", "ES", "resp", " Res", "Results"]}}
{"code": "a,b,c,d,e,f = map(int, input().split())\\ns_max = f*e//(e+100)\\nw_max = f//100\\n\\ns=[]\\nw=[]\\n\\nmax = 0\\nans = [100*a,0]\\nfor i in range(s_max//c+1):\\n    for j in range(s_max//d+1):\\n        if c*i + d*j <= s_max:\\n            s.append(c*i + d*j)\\n\\nfor i in range(w_max//a+1):\\n    for j in range(w_max//b+1):\\n        if 0<a*i + b*j <= w_max:\\n            w.append(a*i + b*j)\\n\\nfor i in range(len(s)):\\n    for j in range(len(w)):\\n        if s[i]/(w[j]*100+s[i])<=e/(e+100) and s[i]/(w[j]*100+s[i])>=max and w[j]*100+s[i]<=f:\\n            max = s[i]/(w[j]*100+s[i])\\n            ans = [w[j]*100+s[i],s[i]]\\n\\nprint(ans[0],ans[1])\\n", "target": "6", "substitutes": {"a": ["o", "k", "x", "aw", "ar", "ak", "ac", "ab", "wa", "ie", "af", "n", "da", "an", "A", "fa", "y", "alpha", "api", "g", "sa", "h", "aa", "u", "va", "oa", "am", "ca", "ad", "ai", "ae", "z", "ba", "l", "v", "aj", "r", "m", "p", "au"], "b": ["o", "eb", "k", "x", "db", "ab", "n", "rb", "y", "dy", "bs", "g", "h", "fb", "aa", "wb", "u", "lb", "sb", "be", "z", "ba", "l", "v", "m", "r", "bf", "p"], "c": ["o", "cn", "k", "x", "ci", "col", "ac", "n", "cc", "ce", "ch", "cs", "y", "ec", "g", "h", "ct", "dc", "cu", "u", "ca", "C", "z", "cr", "l", "v", "cd", "m", "r", "cf", "p"], "d": ["o", "D", "dt", "k", "x", "db", "nd", "n", "da", "t", "y", "dy", "g", "h", "ds", "dc", "u", "dd", "dx", "ad", "z", "dn", "l", "v", "cd", "m", "r", "p"], "e": ["el", "ey", "ze", "oe", "o", "eu", "east", "k", "x", "energy", "E", "ie", "n", "ce", "y", "ec", "g", "en", "h", "u", "size", "ee", "ed", "es", "ae", "z", "l", "v", "m", "r", "se", "p"], "f": ["file", "o", "fs", "k", "x", "fm", "n", "F", "t", "fa", "rf", "y", "fe", "g", "h", "fb", "sf", "function", "u", "inf", "fen", "q", "frac", "z", "of", "l", "v", "flat", "m", "r", "fr", "p", "form"], "s_max": ["w_q", "w_conf", "sxrest", "s67max", " s_cat", "s67min", "s_orig", "sxq", "s_range", "s_conf", "s_q", "s_cat", "s_min", "sxmin", "s__ax", " s_ax", "w_orig", "s__cache", "s_rest", "s__max", "w_min", "w_rest", "s67rest", "s_bug", " s_cache", "sxmax", "s__cat", "w_range", "w_bug", "s67q", "s_ax", "s_cache"], "w_max": ["s_div", "w_end", "wPrand", "w_div", "h_rand", "w_fix", "wPtotal", " w_default", "b_Max", " w_min", " w_end", "w_con", "w_Max", "s_min", "h_total", "b_cache", "s_fix", "h_max", "wPlast", "w_default", "w_min", "h_last", "b_con", "b_max", "w_last", "wPmax", "w_cache", "w_total", "w_rand"], "s": ["states", "ls", "o", "parts", "js", "services", "S", "x", "ws", "ses", "wa", "ss", "ances", "sl", "n", "an", "t", "strings", "cs", "y", "sw", "g", "sa", "os", "h", "ds", "ms", "ks", "gs", "ies", "lines", "si", "u", "sets", "ys", "ns", "us", "es", "q", "sh", "sv", "z", "l", "v", "r", "m", "words", "se", "its", "p", "aws"], "w": ["wp", "o", "iw", "k", "fw", "x", "wl", "work", "hw", "wan", "aw", "way", "web", "ws", "wa", "W", "n", "ww", "wt", "t", "weight", "y", "tw", " W", "nw", "sw", "g", "h", "we", "wal", "ow", "wall", "ew", "win", "wb", "u", "weights", "wx", "q", "sh", "z", "wo", "v", "l", "m", "words", "wh", "p", "aws", "wu"], "max": ["auto", "step", "case", "k", "Max", "std", "x", "exp", "aw", "current", "scale", "sum", "n", "all", "ce", "id", "y", "total", "sw", "min", "ax", "act", "we", "MAX", "parent", "co", "self", "win", "span", "can", "st", "row", "last", "u", "size", "ase", "default", "end", "ad", "sup", "none", "res", "no", "q", "z", "v", "orig", "conf", "se", "cf", "wh", "words", "count"], "ans": ["ls", "S", "x", "san", "aning", "nas", "ras", "ins", "ws", "ations", "wa", "ars", "ants", "ss", "amps", "ens", "n", "an", "anc", "A", "man", " means", "oss", "ents", "anon", "sk", "na", "os", "wh", "anas", "ms", "ks", "An", "span", "trans", "can", "anes", "cons", "lines", "ana", "nan", "AN", "cas", "leans", "aned", "ANS", "ann", "ps", "ns", "lan", "es", "works", "ai", "cross", "eps", "ln", "aus", "ons"], "i": ["ik", "pi", "di", "o", "ji", "it", "k", "x", "xi", "gi", "ci", "yi", "ri", "ie", "ori", "int", "n", "ui", "ini", "ni", "bi", "id", "y", "info", "api", "g", "ir", "h", "ia", "ix", "ip", "si", "u", "iu", "fi", "I", "ti", "mi", "ki", "im", "ai", "z", "p", "qi", "l", "v", "ii", "li", "m", "io", "vi"], "j": ["el", "pi", "ji", "o", "js", "k", "x", "er", "jc", "ie", "io", "n", "J", "oj", "t", "y", "key", "dy", "g", "ah", "h", "ij", "job", "jl", "un", "ix", "jo", "si", "u", "ja", "je", "jj", "q", "sh", "im", "z", "v", "jp", "aj", "l", "r", "m", "ii", "li", "p", "uj"]}}
{"code": "h, w, k = map(int, input().split())\\nS = [list(input()) for i in range(h)]\\n\\nans = [[0 for i in range(w)] for j in range(h)]\\ncnt = 1\\nno_sb = ['.' for i in range(w)]\\nno_sb_row = []\\n\\nfor i in range(h):\\n    flag = True\\n    if S[i] == no_sb:\\n        no_sb_row.append(i)\\n    else:\\n        for j in range(w):\\n            if S[i][j] == '#' and flag:\\n                flag = False\\n            elif S[i][j] == '#':\\n                cnt += 1\\n            ans[i][j] = cnt\\n        cnt += 1\\n\\nfor row in no_sb_row:\\n    for i in range(row+1, h):\\n        if i not in no_sb_row:\\n            ans[row] = ans[i]\\n            break\\n    else:\\n        for j in range(row-1, -1, -1):\\n            if j not in no_sb_row:\\n                ans[row] = ans[j]\\n                break\\n\\nfor a in ans:\\n    print(*a)\\n", "target": "165", "substitutes": {"h": ["o", "x", "oh", "c", "d", "ht", "col", "wa", "bh", "n", "s", "rh", "t", "y", "g", "ah", "hh", "th", "u", "f", "e", "b", "hi", "q", "sh", "z", "v", "l", "hm", "m", "r", "H", "ih", "p", "hs"], "w": ["fw", "x", "c", "d", "ws", "wa", "n", "ww", "W", "wt", "s", "wd", "y", "width", "sw", "g", "we", "wal", "wall", "win", "ew", "u", "f", "e", "b", "q", "sh", "z", "wo", "v", "l", "r", "m", "wh", "p"], "k": ["o", "kn", "work", "kk", "x", "c", "col", "n", "ch", "y", "sk", "g", "ks", "th", "u", "e", "f", "b", "q", "kw", "z", "K", "v", "l", "m", "r", "p", "km"], "S": ["U", "SE", "SH", "GS", "ASC", "BS", "SS", "R", "NS", "SK", "RS", "APS", "Ns", "T", "TS", "W", "Si", "OSS", "SI", "s", "Es", "IDS", "L", "G", " s", "SN", "AS", "SA", "HS", "PS", "ES", "AN", "SC", "ANS", "I", "CS", "X", "SU", "C", "SF", "Sc", "IS", "V", "OS", "P", "H", "M", "INS", "N", "VS"], "i": ["ik", "pi", "di", "ji", "o", "it", "iw", "uri", "x", "xi", "gi", "c", "ci", "d", "yi", "oi", "ri", "ie", "start", "int", "ind", "n", "s", "ui", "ini", "ni", "bi", "id", "y", "info", "api", "ij", "ix", "index", "ip", "eni", "iv", "si", "u", "iu", "fi", "e", "ti", "f", "I", "b", "ish", "ai", "z", "p", "qi", "l", "v", "ii", "li", "ei", "ih", "io", "vi", "zi"], "ans": ["ls", "x", "atts", "SS", "san", "aning", "nas", "ras", "ins", "aos", "ases", "vers", "olds", "ars", "ants", "opens", "ations", "amps", "ens", "args", "an", "s", "list", "A", "ads", "ats", "man", "outs", "cs", "anc", "AS", "anon", "CNN", "ams", "na", "sk", "sa", "cases", "anas", "plan", "rows", "ks", "nan", "An", "nn", "ana", "can", "span", "names", "AN", "cas", "aned", "leans", "atan", "ANS", "ann", "lan", "ns", "ane", "scan", "ions", "ani", "ai", "aces", "ano", "ays", "versions", "gen", "eps", "aus", "ons"], "j": ["kj", "ji", "o", "js", "x", "xi", "c", "d", "jc", "ie", "int", "oj", "n", "J", "ind", "ch", "y", "key", "g", "ij", "job", "ix", "jl", "jo", "u", "ja", "f", "je", "e", "b", "jj", "q", "z", "v", "jp", "aj", "l", "r", "jam", "li", "ii", "p", "uj"], "cnt": ["nrt", "cno", "CNT", " cOUNT", "nno", "cOUNT", "nnt", " cno", "nount", "Cno", "pct", "ccrt", "pNT", "Crt", "dcnt", "ccNT", "dcrt", "ccno", "Cnt", "Count", "cct", "cNT", "COUNT", "Cct", "pnt", " count", "dcOUNT", "ccnt", " crt", "pount", " cct", "crt", "dcNT", " cNT", "count"], "no_sb": ["no_pb", "no_SB", "no_abb", " no_wb", " no_bb", " no_sa", " no_abb", "no_bb", "no___sa", "no___sb", "no___wb", "no_sa", " no_pb", " no_SB", "no___pb", "no_wb"], "no_sb_row": ["no_sb_index", "no_bb_rows", "no_sb2row", "no_bb_index", "no_nb_col", "no_bb_col", "no_sb_key", "no_sb2rows", "no_bb_range", "no_sb2index", "no_nb_right", "no_nb_rows", "no_nb_range", "no_sb_range", "no_sb2key", "no_nb_row", "no_sb_rows", "no_sb_col", "no_sb_right", "no_bb_row", "no_bb_key"], "flag": ["file", "log", "part", "type", "field", "sy", " flags", "ar", "lag", "ac", "bug", "start", "af", "mask", "int", "ind", "flags", "fun", "debug", "action", "info", "id", "key", "g", "FLAG", "offset", "ret", "ig", "line", "error", "bit", "ag", "f", "default", "ad", "code", "lang", "like", "status", "kind", "filter", "tag", "sid", "style", "skip", "Flag", "group", "arg", "count"], "row": ["cur", "o", "ha", "rew", "x", "oh", "feed", "c", "page", "oy", "col", "ro", "section", "ry", "uc", "head", "int", "go", "all", "num", "range", "id", "y", "key", "sw", "entry", "cell", "rows", "nn", "ow", "index", "th", "ip", "win", "month", "server", "ko", "run", "u", "f", "e", "max", "group", "jj", "hi", "uu", "q", "ai", "z", "v", "sc", "r", "p", "rc", "user"], "a": ["ma", "area", "at", "aw", "ar", "ac", "wa", "cha", "af", "pa", "n", "an", "fa", "A", "y", "alpha", "na", "sa", "ax", "ana", "ia", "la", "aa", "va", "ja", "b", "am", "ga", "ai", "ae", "z", "ba", "asa", "aaa", "aj", "p", "ka", "au"]}}
{"code": "import math\\nn=int(input())\\ndef koch(d,p1,p2):\\n\tif d==0:\\n\t\treturn\\n\ts=[0,0]\\n\tt=[0,0]\\n\tu=[0,0]\\n\ts[0]=2/3*p1[0]+1/3*p2[0]\\n\ts[1]=2/3*p1[1]+1/3*p2[1]\\n\tt[0]=1/3*p1[0]+2/3*p2[0]\\n\tt[1]=1/3*p1[1]+2/3*p2[1]\\n\tu[0]=s[0]+(t[0]-s[0])*math.cos(math.pi/3)-(t[1]-s[1])*math.sin(math.pi/3)\\n\tu[1]=s[1]+(t[0]-s[0])*math.sin(math.pi/3)+(t[1]-s[1])*math.cos(math.pi/3)\\n\tkoch(d-1,p1,s)\\n\tprint(*s)\\n\tkoch(d-1,s,u)\\n\tprint(*u)\\n\tkoch(d-1,u,t)\\n\tprint(*t)\\n\tkoch(d-1,t,p2)\\nprint(0,0)\\nkoch(n,[0,0],[100,0])\\nprint(100,0)\\n", "target": "280", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "ng", " fn", " N", "nb", " p", "a", " np", "num", "i", "y", "g", " self", "nn", " c", "net", "fn", "f", "e", "nt", "b", "ns", "q", "init", "w", "z", "l", "v", "r", "m", "p", "ne", "N"], "d": ["di", "o", "dom", "D", "dt", "dos", "k", "x", "od", "j", "c", "ded", "mad", "de", "pd", "data", "du", "nd", "bd", "ind", "da", "i", "td", "id", "sd", "y", "dy", "g", "fd", "dim", "ds", "do", "dh", "md", "dr", "dc", "dp", "days", "e", "f", "dd", "xd", "b", "ad", "end", "q", "w", "dict", "z", "draw", "l", "cd", "m", "dat", "p", "ld"], "p1": ["pi1", "c0", "t0", "t2", "d1", "p3", "P2", "n0", " p0", "p100", "pone", "pione", "P3", "P1", "p0", "cone", "P4", "tone", "p5", "p4", "t4", "c1", "d2", "t1", "pi2", "t100", "n4", "n2", "c2", " p100", "P5", " p5", " pone", "pi31", "none", "p31", "c31", "c100", " p31", " p3", " p4", "t3", "n1", "d4", "d5"], "p2": ["pi1", "c0", "t0", "t2", "P8", "p8", "lp1", "P2", "n0", " p0", "h1", " p8", "t8", "P7", "lp4", "pone", "pione", "lpurl", "P1", "p0", "purl", "P4", "p4", "p7", "t4", "ptwo", "Ptwo", "h8", "c1", "ttwo", " ptwo", "t1", "pi2", "lp2", "pi0", "n2", "n4", "c2", "h7", " pone", "none", " purl", "P0", " p7", "Purl", " p4", "c4", "n1", "t7", "h2"], "s": ["services", "su", "c", "results", "abs", "qs", "strings", "h", "sf", "f", "us", "ments", "ns", "sv", "z", "less", "m", "words", "its", "p", "k", "ings", "x", " returns", "ws", "ses", "a", "ss", "sl", "cs", "y", "sh", " outputs", "Results", "r", " results", "ls", "fs", "S", "ures", "i", "site", "ds", " values", "ies", "lines", "south", "sets", "e", "ps", "ans", "so", "es", "l", "v", "states", "o", "ins", "sum", "ances", "outs", "os", "sa", "g", "ts", "gs", "si", "ys", "b", "ions", "q", "w", "se"], "t": ["it", "o", "type", "at", "dt", "tp", "k", "this", "out", "x", "tr", "tu", "j", "c", "to", "tc", "ut", "T", "int", "ot", "wt", "i", "y", "test", "total", "g", "ty", "ts", "tt", "tz", "tf", "ct", "unt", "st", "att", "f", "e", "nt", "b", "ti", "pt", "q", "w", "ta", "z", "v", "l", "template", "te", "m", "r", "p", "top"], "u": ["U", "states", "o", "string", "k", "you", "x", "su", "tu", "ul", "c", "uv", "sum", "ut", "ui", "strings", "i", "users", "y", "g", "ue", "un", "nu", "cu", "ur", "iu", "f", "e", "b", "us", "uu", "q", "w", "z", "pu", "v", "l", "uid", "m", "r", "ru", "p", "up", "ou", "user"]}}
{"code": "#m = int(input())\\nn, m = map(int, input().split())\\n#al = list(map(int, input().split()))\\n#al=[list(input()) for i in range(n)]\\nswitch = []\\nkl = []\\nfor i in range(m):\\n    temp = list(map(int, input().split()))\\n    kl.append(temp[0])\\n    switch.append(temp[1:])\\npl = list(map(int, input().split()))\\n# print(switch)\\n\\npattern = [[0 for _ in range(n)] for _1 in range(2**n)]\\nfor i in range(2**n):\\n    for j in range(n):\\n        if ((i >> j) & 1):  # \u4e8c\u9032\u6570i\u306e\u4e0b\u304b\u3089\u6570\u3048\u3066j\u6841\u76ee\u304c1\u304b\u5426\u304b\\n            pattern[i][j] = 1\\n\\nans = 0\\nfor ptnum, spt in enumerate(pattern):\\n    islit = True\\n    for lightnum in range(m):\\n        count = 0\\n        for s in switch[lightnum]:\\n            if spt[s-1] == 1:\\n                count += 1\\n        if count % 2 != pl[lightnum]:\\n            islit = False\\n            break\\n    if islit:\\n        ans += 1\\nprint(ans)\\n", "target": "546", "substitutes": {}}
{"code": "input();a=list(map(int,input().split()));print(['No','Yes'][max(a)<(sum(a)-max(a))])", "target": "70", "substitutes": {"a": ["area", "auto", "k", "x", "input", "c", "d", "img", "ama", "ac", "wa", "data", "value", "aux", "int", "n", "da", "all", "an", "s", "array", "A", "args", "i", "result", "y", "alpha", "zero", "na", "div", "sa", "h", "za", "aa", "la", "u", "f", "max", "e", "b", "am", "ca", "sup", "code", "ga", "w", "ea", "aj", "m", "p", "count"]}}
{"code": "import sys\\n\\ndef bubbleSort(x_list, y):\\n  a = 0\\n  flag = 1\\n  while flag:\\n    flag = 0\\n    for i in range(1, y):\\n      j = y - i\\n      if x_list[j] < x_list[j - 1]:\\n        x_list[j], x_list[j - 1] = x_list[j - 1], x_list[j]\\n        flag = 1\\n        a += 1\\n  return a\\n\\ny = sys.stdin.readline()\\ny = int(y)\\n\\nx = sys.stdin.readline()\\nx_list = x.split(\" \")\\n\\nfor i in range(y):\\n  x_list[i] = int(x_list[i])\\n\\na = bubbleSort(x_list, y)\\n\\nfor k in range(0, y):\\n  print x_list[k],\\nprint\\nprint a", "target": "561", "substitutes": {"x_list": ["x0min", "xxl", "rxxl", "rx_l", "x__name", " xxtest", " x_l", " x_range", "x_record", "x_range", "x_lists", "X_range", "xxlist", "xenmin", "xe_line", "php_list", "x__out", "x_List", " x0list", "xxchain", "exxlist", "x_LIST", "xOline", "xe_lists", " xxl", "xxList", "phpOstring", "x_chain", "xePlist", "phpOstr", " xxlist", "xenlists", "exxstring", "xxrecord", "exxlisted", "x_l", "xxtest", "rxxlisted", "xOstring", "X_l", " x0min", "xPLIST", "xePline", " x_test", "phpOlist", "x2table", "X_record", " x_List", "x_name", "ex_list", "xPlists", "ex_chain", "x_out", "x_min", " x_lists", "xePlists", "y_name", " x_out", "xxstring", "php_line", " x_string", "X_list", "X_string", "ex_string", "x2list", "xe_list", "xPlist", "x0lists", "exxchain", "x2chain", "x2listed", "x_str", "x_string", "xPline", "rx_listed", " x_table", "X_List", " x0lists", " x_min", "x0LIST", "x_listed", "phpOline", "xxlisted", "x2test", "xePLIST", "xOstr", "x0line", "php_str", "x_table", " xxstring", "x2out", "y_out", "rx_list", "x_line", "y_list", "x_test", "ex_listed", "xOlist", "xe_LIST", "xxrange", "php_string", "x0list", "x2string", "x__list", "xenlist", "rxxlist"], "y": ["ey", "yu", "type", "sy", "o", "ya", "cy", "c", "d", "yi", "oy", "xy", "ky", "sys", "ry", "ny", "yo", "n", "year", "Y", "ye", "t", "zy", "yr", "dy", "gy", "h", "ay", "ym", "py", " py", "yt", "u", "f", "e", "ys", "b", "yd", "yy", "w", "z", "l", " Y", "m", "p", "sky", "vy", "isy"], "a": ["ma", "area", "at", "sta", "al", "c", "aw", "ar", "d", "ama", "ac", "ab", "data", "art", "wa", "af", "n", "mA", "da", "ata", "an", "s", "array", "A", "t", "alpha", "xa", "na", "sa", "ka", "ana", "ia", "aa", "va", "f", "e", "b", "am", "ca", "ad", "ga", "ai", "ae", "w", "aaa", "ba", "z", "ea", "l", "aj", "ada", "r", "ace", "ady", "p", " A", "au"], "flag": ["type", "short", "at", "al", "err", " flags", "ar", "lag", "bug", "ac", "wa", "art", "ab", "af", "int", "ind", "flags", "long", "an", "A", "agi", "id", "leaf", "alpha", "force", "sa", "ant", "FLAG", "offset", "ana", "ret", "ig", "span", "age", "ag", "bit", "aa", "error", "say", "char", "f", "ad", "code", "status", "ai", "cat", "aj", "Flag", " Flag", "group", "asc", "arg", "count"], "i": ["pi", "it", "o", "ji", "xi", "c", "ci", "yi", "ri", "ie", "start", "int", "ind", "n", "ini", "ni", "bi", "id", "key", "ia", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "p", "v", "l", "ii", "m", "li", "io"], "j": ["note", "ji", "o", "js", "part", "c", "d", "jc", "ie", "ind", "n", "J", "oj", "ch", "jan", "dy", "key", "min", "g", "ij", "bj", "job", "index", "py", "next", "jl", "jo", "br", "u", "ja", "f", "e", "jet", "b", "jj", "z", "qi", "l", "v", "jp", "ii", "m", "r", "li", "fr", "aj", "p", "uj"], "x": ["ya", "xi", "c", "d", "xy", "data", "int", "n", "array", "t", "xxx", "g", "ax", "yx", "xt", "rx", "ix", "index", "py", "ex", "e", "dx", "b", "X", "xx", "w", "content", "z", "v", "l", "m", "xs", "p"], "k": ["ik", "o", "kn", "ke", "kk", "ark", "c", "kat", "d", "ijk", "ky", "ac", "n", "ck", "id", "key", "sk", "unk", "ok", "kid", "ks", "km", "ko", "u", "ki", "q", "kw", "K", "v", "m", "p", "kr", "ka"]}}
{"code": "n=int(input())\\ns=[0]*n\\nfor i in range(n):\\n  s[i]=int(input())\\ns.sort()\\nans=sum(s)\\ntemp=0\\nif ans%10==0:\\n  for i in range(n):\\n    if s[i]%10==0:\\n      temp=temp+1\\n    else:\\n      print(ans-s[i])\\n      break\\n  if temp==n:\\n    print(0)\\nelse:\\n  print(ans)", "target": "741", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "Ns", "an", "num", "t", "ni", "y", "na", "g", "nan", "nn", "u", "len", "f", "nt", "max", "e", "b", "ns", "pn", "sn", "no", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "s": ["states", "ls", "o", "services", "S", "ings", "x", "c", "sp", "results", "d", "ins", "ses", "sum", "ws", "a", "ss", "args", "an", "strings", "cs", "y", "ats", "sort", "g", "os", "h", "blocks", "ts", "ks", "ips", "span", "gs", "south", "si", "u", "letters", "sets", "f", "e", "sym", "b", "ps", "ns", "us", "es", "features", "w", "l", "v", "groups", "r", "xs", "p", "aus"], "i": ["pi", "di", "o", "it", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "oi", "a", "ie", "int", "ind", "ini", "num", "ui", "ni", "bi", "y", "inner", "ix", "index", "ip", "eni", "si", "u", "iu", "e", "I", "ti", "f", "b", "mi", "ai", "z", "p", "qi", "l", "v", "ii", "li", "m", "r", "io", "vi"], "ans": ["offs", "ls", "atts", "san", "nas", "ins", "a", "ations", "ars", "ants", "ss", "Ns", "ens", "args", "an", "ops", "ats", "outs", "cs", "oss", "ians", "ents", "sk", "na", "os", "ant", "anas", "plan", "nan", "ana", "span", "can", "names", "cons", "lines", "AN", "si", "aned", "leans", "ANS", "activation", "ann", "ps", "ns", "sn", "es", "ani", "aces", "ano", "params", "xs", "eps", "ln", "ons"], "temp": ["unit", "wrap", "pi", "empty", "Temp", "partial", "current", "tc", "sum", "col", "perature", "num", "t", "test", "y", "keep", "timeout", "cond", "nice", "offset", "iter", "tt", "span", "tmp", "index", "fake", "number", "thread", "si", "size", "pre", "max", "tem", "stable", "clean", "white", "new", "no", "pt", "emp", "w", "init", "p", "v", "flat", "length", "now", "there", "level", "count"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport sys\\nsys.setrecursionlimit(10**9)\\nINF=10**18\\nMOD=10**9+7\\ninput=lambda: sys.stdin.readline().rstrip()\\nYesNo=lambda b: bool([print('Yes')] if b else print('No'))\\nYESNO=lambda b: bool([print('YES')] if b else print('NO'))\\nint1=lambda x:int(x)-1\\n\\ndef main():\\n    N,C=map(int,input().split())\\n    l=[]\\n    for i in range(N):\\n        l.append(list(map(int,input().split())))\\n    l.sort(key=lambda t:(t[2],t[1]))\\n    a=[0]*(10**5+1)\\n    ss,tt,cc=-1,-1,-1\\n    for s,t,c in l:\\n        if s==tt and c==cc:\\n            a[tt]+=1\\n            a[t]-=1\\n        else:\\n            a[s-1]+=1\\n            a[t]-=1\\n        ss,tt,cc=s,t,c\\n    ans=0\\n    tmp=0\\n    for x in a:\\n        tmp+=x\\n        ans=max(ans,tmp)\\n    print(ans)\\n            \\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "632", "substitutes": {}}
{"code": "a = int(input())\\nprint('ABC') if a < 1000 else print('ABD')", "target": "636", "substitutes": {"a": ["ma", "area", "access", "x", "c", "aw", "ama", "aaaa", "wa", "data", "cha", "aux", "af", "pa", "n", "ata", "s", "A", "fa", "i", "alpha", "na", "qa", "sa", "la", "aa", "va", "f", "b", "ca", "sup", "ga", "ai", "asa", "ba", "aaa", "l", "ea", "aj", "p", "ka", "au"]}}
{"code": "import math\\n\\nN, A, B = map(int, input().split())\\nV = list(map(int, input().split()))\\n\\n# print(N, A, B, V)\\n\\nV.sort(reverse=True)\\n\\nmax_list = V[:A]\\nmax_sum = sum(max_list)\\nprint(max_sum / A)\\n\\nreplace = max_list[-1]\\n\\nnum_replace = 0\\nfor v in V:\\n    if v == replace:\\n        num_replace += 1\\n\\nif num_replace == 1:\\n    print(1)\\n    exit()\\n\\nnum_replace_in_list = 0\\nfor v in max_list:\\n    if v == replace:\\n        num_replace_in_list += 1\\n\\nif replace * A != max_sum:\\n    ans = math.factorial(num_replace) // (math.factorial(num_replace - num_replace_in_list) * math.factorial(num_replace_in_list))\\n    print(ans)\\n    exit()\\n\\n\\nans = 0\\nfor i in range(A, B + 1):\\n    if i > num_replace:\\n        break\\n    ans += math.factorial(num_replace) // (math.factorial(num_replace - i) * math.factorial(i))\\n\\nprint(ans)\\n", "target": "345", "substitutes": {"N": ["U", "D", "S", "R", "E", "NC", "Ns", "T", "n", "J", "Y", "L", "CNN", " n", "Q", "I", "X", "C", "Na", "P", "K", "O", "H", "M", "F", "Z"], "A": ["As", "U", "D", "S", "Alpha", "a", "T", "W", "mA", "AD", "AM", "AS", "alpha", "AY", "AP", "I", "AA", "X", "C", "P", "AB", "AC", "M", "AW", "AAA"], "B": [" b", "BS", "BF", "R", "BB", "T", "UB", "TB", "BE", "Y", "L", "OB", "BI", "Q", "Bs", "BL", "WB", "I", "b", "C", "P", "BC", "AB", "O", "M", "F", "Beta"], "V": ["U", "D", "S", "NV", "R", "E", " I", "T", "W", "J", "Array", "Y", "VD", "L", "G", "UV", "I", "X", "C", "P", "K", "v", "O", "M", "H", "F", "Z"]}}
{"code": "A, B = input().split()\\nB = B.replace('.', '')\\n\\nA, B = list(map(int, [A, B]))\\n\\nans_b = A*B\\n\\nprint(int(ans_b//100))\\n", "target": "44", "substitutes": {"A": ["As", "U", "Ca", "Ac", "AR", "NA", "D", "S", "au", "E", "Alpha", "a", "CA", "T", "PA", "W", "mA", "IA", "Y", "Az", "L", "G", "Am", "Ma", "HA", "GA", "AU", "EA", "An", " a", "Area", "AP", "Ar", "Ha", "I", "AA", "Ang", "X", "C", "MA", "Na", "P", "API", "AF", "AB", "Input", "H", "AC", "F", "M", "N", "LA"], "B": ["U", "Two", "EB", " b", "D", "S", "BF", "R", "Other", "E", "IB", "LB", "Bi", "BB", "T", "UB", "TB", "BE", "W", "BBC", "J", "Y", "L", "G", "Part", "NB", "Ab", "BA", "PB", "VB", "OB", "BI", "GB", "Bs", "Band", "DB", "QB", "WB", "CB", "I", "b", "X", "FB", "C", "SB", "V", "MB", "P", "BC", "AB", "O", "H", "M", "F", "Beta", "Bur", "N", "Z"], "ans_b": ["ans_bb", "ansnbb", " ans_l", "ANS_b", "ansnnumber", "ans_number", " ans_number", "ans__bb", "ans_l", "ans_B", " ansnbb", " ans_bb", "ans__b", "ans__l", "ANS_bb", "ansnb", "ansnl", " ansnl", " ansnb", " ansnnumber", "ANS_B", "ans__number"]}}
{"code": "def main():\\n    import sys\\n\\n    def input(): return sys.stdin.readline().rstrip()\\n    \\n    n, m = map(int, input().split())\\n    from heapq import heappop, heappush, heapreplace\\n    a = list(map(int, input().split()))\\n    from collections import Counter as cc\\n    a = cc(a)\\n    q = []\\n    for key in a:\\n        heappush(q, (key, a[key]))\\n    for i in range(m):\\n        b, c = map(int, input().split())\\n        now = b\\n        while q:\\n            num, cnt = q[0]\\n            if c <= num: break\\n            \\n            if now >= cnt:\\n                now -= cnt\\n                heappop(q)\\n            else:\\n                heapreplace(q, (num, cnt-now))\\n                now = 0\\n                break\\n        if now != b:\\n            heappush(q, (c, b-now))\\n    ans = 0\\n    for num, cnt in q:\\n        ans += num*cnt\\n    print(ans)\\n\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "711", "substitutes": {"n": ["o", "k", "x", "d", "nb", "name", "ac", "all", "an", "y", "g", "en", "h", "number", "u", "f", "fn", "ns", "sn", "w", "l", "r", "nc", "p", "N"], "m": ["o", "mc", "k", "fm", "d", "s", "y", "mn", "g", "dim", "h", "ms", "cm", "u", "e", "f", "mu", "mi", "mm", "w", "z", "dm", "v", "l", "hm", "r", "M", "p", "bm"], "a": ["ma", "area", "access", "o", "ha", "aw", "d", "ar", "ama", "ac", "ab", "app", "ation", "action", "args", "da", "s", "an", "array", "A", "fa", "ata", "y", "alpha", "na", "qa", "sa", "ana", "ia", "aa", "u", "va", "oa", "f", "e", "am", "ca", "ga", "ai", "ae", "w", "aaa", "ba", "asa", "ao", "aj", "ace", "p", " A"], "q": ["o", "k", "qt", "x", "quire", "d", "question", "back", "ac", "bug", "queue", "int", "ck", "qs", "quant", "quest", "cache", "ch", "que", "cl", "id", "y", "iq", "ce", "quick", "requ", "qa", "force", "g", "h", "ack", "act", "query", "charge", "request", "Q", "sq", "u", "f", "nt", "e", "qq", "sh", "w", "z", "qi", "form", "v", "patch", "l", "nc", "p", "req", "qu", "dq", "count"], "key": ["step", "loc", "type", "case", "pid", "k", "x", "j", "ver", "col", "name", "ac", "value", "section", "ie", "result", "id", "y", "entry", "min", "val", "change", "ay", "keys", "query", "index", "next", "ip", "number", "row", "char", "seq", "item", "f", "code", "match", "link", "w", "fee", "Key", "ace", "r", "KEY", "order", "p", "any", "ice", "count"], "i": ["k", "j", "gi", "gu", "ci", "nb", "ie", "ind", "ni", "id", "y", "iq", "on", "ib", "ix", "index", "ip", "item", "iu", "f", "I", "ai", "z", "qi", "ii", "p"], "b": ["k", "mb", "x", "d", "nb", "ab", "bug", "bc", "B", "bound", "s", "rb", "y", "bs", "g", "h", "fb", "ib", "next", "number", "wb", "u", "lb", "f", "e", "base", "new", "sb", "w", "be", "v", "l", "r", "bb", "bf", "p"], "c": ["cn", "k", "x", "cy", "ci", "d", "col", "ac", "uc", "bc", "cc", "s", "ch", "cs", "y", "con", "ct", "dc", "cu", "u", "xc", "f", "e", "C", "new", "w", "z", "cr", "l", "lc", "r", "nc", "cf", "p", "cl"], "now": ["cur", "auto", "ready", "current", "cycle", "const", "cmp", "nw", "qa", "self", "ow", "day", "next", "then", "always", "umber", "ko", "f", "mm", "gh", "oc", "count", "first", "x", "done", "off", "ci", "ng", "wa", "today", "cp", "post", "oa", "max", "code", "no", "sc", "length", "wait", "cf", "wh", "Now", "search", "low", "cb", "old", "cca", "nn", "ord", "nr", "u", "NOW", "nt", "new", "where", "nc", "this", "mb", "aw", "currently", "bc", "ok", "co", "cm", "size", "obj", "w", "cr", "found", "bb", "bf", "small"], "num": ["unit", "o", "loc", "x", "um", "aw", "ci", "d", "np", "current", "om", "nm", "nb", "node", "col", "uc", "bc", "ny", "bn", "inc", "an", "Num", "mn", "uni", "zero", "g", "con", "co", "nn", "un", "number", "nu", "umi", "u", "net", "f", "nt", "one", "max", "am", "unc", "none", "sn", "new", "no", "w", "r", "nc", "p", "count"], "cnt": ["Cnd", "uncrt", "uncnt", "CNT", "ucnn", "acnn", "encNT", "cwd", "lcnn", " cnd", "lcnt", "ecNT", "dnn", "lcNT", "uncNT", "ecount", "encnt", "cnd", "pct", "dnt", "pNT", "Crt", "cnn", "dNT", "acnt", "uncount", "encrt", "Cnn", "ecnn", "ecnt", "lcct", "acNT", "ucnt", "cnc", "ucnd", "Cnt", "Count", "ucwd", "catnd", "cNT", "catnt", "cct", "catwd", " cnc", "acnc", "pnt", " count", " cnn", "encnd", "lcnc", " crt", "catnn", "dnc", "pnc", " cwd", " cct", "crt", " cNT", "count"], "ans": ["offs", "ls", "su", "anus", "san", "aning", "nas", "ins", "aos", "ants", "amps", "ens", "args", "an", "anc", "s", "ops", "ats", "oss", "ents", "anon", "annot", "na", "anas", "ks", "ids", "ips", "nan", "span", "can", "ana", "cons", "names", "lines", "AN", "aned", "leans", "ANS", "ann", "lan", "ps", "ns", "ons", "scan", "ums", "errors", "works", "ani", "aces", "aus", "any"]}}
{"code": "N, A, B = map(int, input().split())\\nh = []\\nfor _ in range(N):\\n    h.append(int(input()))\\n\\nsum_h = sum(h)\\nsum_dam = B * N + (A - B)\\nng = (sum_h - 1) // sum_dam + 1 - 1\\nok = (max(h) - 1) // B + 1\\nans = (ng + ok + 1) // 2\\nwhile ok - ng > 1:\\n    cnt = ans\\n    flag = 0\\n    for h_i in h:\\n        rem = h_i - B * ans\\n        if rem > 0:\\n            cnt -= (rem - 1) // (A - B) + 1\\n            if cnt < 0:\\n                flag = 1\\n                break\\n    if flag == 0:\\n        ok = ans\\n    else:\\n        ng = ans\\n    ans = (ng + ok + 1) // 2\\n\\nprint(ans)\\n", "target": "51", "substitutes": {"N": ["U", "D", "S", "R", "NS", "E", "Ns", "T", "n", "W", "J", "Y", "L", "G", "Len", " n", "Size", "Q", "I", "X", "C", "Ne", "NG", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["U", "Ca", "NA", "D", "S", "E", "a", "Ak", "CA", "W", "mA", "Y", "G", "AM", "L", "Am", "alpha", "Ma", "Ab", "SA", "An", "AP", "I", "AA", "X", "C", "Na", "V", "P", "AH", "AB", "AC", "H", "M", "F", "LA"], "B": ["U", "D", "S", "BF", "R", "E", "BB", "T", "W", "n", "J", "Y", "L", "G", "NB", "Ab", "BA", "BI", "AP", "Q", "Bs", "GB", "WB", "I", "b", "X", "C", "SB", "V", "MB", "P", "K", "BC", "AB", "O", "H", "M", "F", "Z"], "h": ["log", "home", "o", "ha", "adh", "k", "x", "oh", "um", "c", "holes", "d", "ht", "a", "bh", " H", "head", "n", "rh", "s", "hp", "eh", "i", "id", "ph", "g", "ah", "en", "hd", "hh", "th", "host", "f", "hr", "b", "hi", "ho", "uh", "sh", "q", "gh", "w", "v", "l", "han", "hm", "m", "r", "H", "he", "ih", "p", "hs"], "_": ["k", " __", " un", " col", "__", " ip", " j", "f", " o"], "sum_h": ["sumablesh", " sum_bh", "sum_sh", "sum_H", " sum_sh", "sum_dh", " sum_H", "sumableh", " sum_dh", "sumabledh", "sumableH", "sum_bh"], "sum_dam": [" sum_am", "sum2ai", " sum_di", " sum_ai", "sum_am", " sum_man", "sum_um", " sum_um", "sum_man", "sum2dam", "sum_ai", "sum_di", "sum2man", "sum2am"], "ng": ["ding", "ling", "ang", "ong", "exp", "org", "hing", "aning", "pg", "aw", "img", "ih", "learning", "rog", "ss", "nd", "ring", "anch", "n", "ind", "nz", "inc", "reg", "king", "i", "ping", "anim", "mn", "sk", "gin", "na", "g", "ah", "gy", "ising", "gan", "nn", "ig", "big", "index", "win", "bg", "gram", "gg", "can", "wn", "max", "ning", "ann", "res", "eng", "lang", "scan", "NG", "yang", "working", "gn", "sc", "jing", "gen", "sam", "nc", "got", "ing", "young", "ne"], "ok": ["log", "o", "ang", "it", "loc", "k", "good", "err", "ong", "od", "Ok", "org", "c", "ready", "ci", "op", "ak", "ore", "oy", "bug", "dev", "nd", "ind", "n", " scan", "all", "an", "valid", "anch", "anc", "id", "y", "arm", "sk", "check", "na", "os", "ah", "sync", " n", "ms", "oks", "nn", "ick", "big", "next", "error", "ko", "iv", "nt", "ask", "ann", "ad", "scan", "like", "clean", "no", "ai", "length", "bb", "yes", " big", "oc", "arg"], "ans": ["ANN", "nas", " ang", "amps", "ms", " ann", "An", "can", "AN", "cas", "aned", "ANS", "ns", "scan", "yes", "han", "Ann", "x", "a", "ss", "ens", "an", "nz", "cs", "sk", "na", "ks", "nan", "max", "lan", "ann", "sn", "chan", "ani", "gen", "eps", "ls", "ang", "ations", "ars", "n", "anc", "s", "man", "ats", " ads", "anon", "ds", "ana", "nn", "span", "cons", "lines", "ands", "lang", "es", "ays", " scans", "sam", "ons", "aning", "ins", "anners", "ops", "anny", " means", "outs", "ams", "os", "ad", "errors", "ai"], "cnt": ["cst", "scnc", "lcount", " cst", "Cnd", "CNT", "cno", "ccount", " cnd", "lcnt", " cno", " ccount", "scnt", "lccount", "Cno", "lcno", "pcst", "cnd", "Cst", "scct", " cint", "pcNT", "cnc", "lcct", "Cnt", "cct", "Count", "lcnd", "cNT", "pcnt", " cnc", " count", "cint", "lcnc", "sccount", "Cint", " cct", "pcint", " cNT", "count"], "flag": ["log", "type", "part", "sync", "err", " flags", "feature", "lag", "start", "int", "ind", "flags", "long", "nz", "an", "fd", "ant", "offset", "co", "bad", "win", "span", "py", "error", "bit", "fg", "bg", "big", "len", "f", "ann", "neg", "scan", "lang", "feat", "status", "no", "kind", "cat", "sign", "style", "conf", "nc", "Flag", "group", "arg", "count"], "h_i": ["i_di", "h_a", " h_I", "h_ii", "h_ji", "h_I", "i_ji", "h_d", " h_d", " h_a", "i_ii", "h_di", "i_i"], "rem": ["prom", "loc", "rest", "rub", "err", "x", "exp", "col", "rm", "ind", "re", "Rem", "nz", "anc", "num", "reg", "man", "remote", "syn", "an", "mn", "keep", "arm", "rc", "min", "mem", "ix", "span", "dem", "br", "nr", "pre", "mark", "max", "ann", "res", "rom", "ain", "resp", "rev", "rec", "pop", "ref", "orig", "r", "m", "REM", "prev", "rank"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\n\\na = sorted(a)\\n\\nl = 0\\nr = n\\n\\nwhile l < r:\\n    mid = (l+r)//2\\n\\n    size = sum(a[:mid+1])\\n    ptr = mid+1\\n    ans = True\\n\\n    while ptr < n:\\n        if 2*size >= a[ptr]:\\n            size += a[ptr]\\n            ptr += 1\\n        else:\\n            ans = False\\n            break\\n\\n    if ans:\\n        r = mid\\n    else:\\n        l = mid+1\\n\\nprint(n-l)", "target": "249", "substitutes": {"n": ["o", "k", "ol", "x", "j", "ul", "c", "d", "nb", "s", "num", "t", "i", "y", "count", "h", "nn", "nl", "nu", "nr", "len", "nt", "f", "e", "rn", "b", "ns", "sn", "w", "z", "v", "m", "nc", "ln", "p", "ne", "N"], "a": ["area", "o", "sta", "x", "c", "aw", "ar", "d", "ab", "ac", "wa", "data", "aux", "args", "ata", "an", "s", "array", "A", "list", "da", "i", "y", "alpha", "sa", "aa", "la", "u", "va", "f", "e", "b", "am", "ad", "ga", "ai", "ae", "w", "aaa", "asa", "z", "ba", "v", "ao", "m", "ap", "p", "au"], "l": ["el", "lp", "ls", "o", "loc", "k", "ol", " L", "le", "j", "ul", "c", "d", "left", "pos", "sl", "ll", "t", "L", "i", "h", "lr", "nl", "la", "lin", "u", "len", "f", "rl", "e", "b", "pl", "dl", "q", "w", "z", "v", "lc", "length", "m", "li", "ln", "p"], "r": ["rs", "o", "k", "rd", " R", "x", "c", "R", "d", "ar", "s", "rh", "t", "range", "rb", "i", "rt", "rg", "h", "pr", "row", "nr", "u", "ur", "f", "e", "rr", "rl", "b", "rn", "nt", "q", "w", "z", "v", "m", "fr", "right", "p", "sr"], "mid": ["lim", "part", "loc", "pid", "rd", "le", "x", "mad", "low", "d", "nm", "ng", "start", "pend", "diff", "pos", "nd", "int", "ind", "mer", "depth", "range", "late", "id", "cand", "min", "dim", "offset", "ms", "md", "rid", "pad", "la", "nr", "len", "nt", "max", "end", "ad", "mi", "hi", "mm", "shift", "rand", "length", "m", "li", "Mid", "lc", "ld", "middle", "count"], "size": ["loc", "sized", "x", "j", "c", "scale", "sum", "name", "pos", "ize", "s", "i", "small", "sd", "SIZE", "g", "en", "Size", "h", "offset", "capacity", "nl", "nr", "len", "address", "nt", "e", "f", "code", "ns", "shape", "shift", "q", "sh", "w", "z", "length", "izes", "m", "ln", "p", "cl", "count"], "ptr": ["cur", "struct", "loc", "x", "tr", "lf", "j", "c", "slice", "inst", "start", "pend", "plug", "pos", "ff", "src", "ind", "int", "inter", "depth", "Ptr", "i", " addr", "id", "pointer", "fe", "entry", "rt", "dim", "offset", "dr", "ctr", "lr", "nl", "index", "pad", "req", "adr", "ident", "nr", "br", "len", "address", "nt", "f", "e", "rl", " pointer", "shift", "pt", "sh", "z", "length", "fr", "p", "addr", "rc"], "ans": ["ls", "part", "aning", "anned", "acl", "ins", "ars", "ants", "ens", "args", "an", "ops", "s", "anc", " means", "ats", "cs", "oss", "ents", "sk", "na", "rans", "anas", "ms", "ds", "ana", "An", "span", "can", "la", "arts", "AN", "cas", "leans", "len", "aned", "ANS", "ann", "lan", "ns", "scan", "ends", "no", "ai", "aces", "ani", "ays", "ace", "acs", "eps", "ons", "ran"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nx=[0]*10**5\\nfor i in a:\\n  x[i]+=1\\nans=0\\nfor i in range(10**5-2):\\n  ans=max(ans,x[i]+x[i+1]+x[i+2])\\nprint(ans)", "target": "42", "substitutes": {"n": ["pi", "o", "k", "j", "c", "d", "nb", "s", "num", "ni", "na", "g", "nn", " ni", "b", "ns", "no", "ani", "z", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "c", "ab", "ac", "ants", "int", "ata", "an", "s", "array", "A", "y", "alpha", "xa", "na", "sa", "ana", "ia", "span", "aa", "nt", "b", "ad", "ca", "am", "ga", "ai", "aaa", "ba", "z", "aj", "p", "count", "au"], "x": ["px", "plus", "c", "d", "event", "data", "lex", "pos", "int", "an", "s", "array", "y", "tx", "python", "na", "ax", "h", "sex", "rx", "ix", "index", "ex", "u", "f", "e", "max", "one", "b", "X", "xx", "code", "xes", "q", "w", "z", "l", "cross", "v", "m", "xs", "php", "p", "any"], "i": ["pi", "it", "di", "o", "ji", "uri", "k", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "phi", "oi", "io", "ie", "start", "ori", "int", "ind", "s", "ui", "ini", "t", "ni", "info", "id", "y", "alpha", "api", "ix", "index", "ip", "eni", "si", "u", "iu", "f", "ti", "e", "I", "b", "ki", "ai", "z", "qi", "v", "l", "ii", "m", "li", "p"], "ans": ["ls", "anus", "nas", "ins", "ars", "ants", "any", "int", "an", "s", "anc", "A", "ats", "cs", "ians", "ents", "sk", "na", "os", "anas", "plan", "ks", "nan", "nn", "ia", "span", "can", "ana", "AN", "atan", "aned", "ANS", "ann", "ad", "ns", "lan", "ca", "scan", "no", "ions", "ani", "ai", "features", "ays", "xs", "eps", "p", "aus", "ons"]}}
{"code": "a,b = map(int, input().split())\\nif 1 <= b < a:\\n  print(a-1)\\nelif a <= b:\\n  print(a)", "target": "35", "substitutes": {"a": ["area", "auto", "o", "x", "c", "off", "d", "ac", "ab", "B", "af", "int", "n", "mA", "da", "pa", "an", "s", "A", "i", "y", "alpha", "na", "qa", "sa", "beta", "aa", "la", "u", "e", "f", "ad", "ca", "ga", "ai", "w", "ae", "aaa", "ba", "l", "ea", "aj", "m", "r", "bb", "p", "au"], "b": ["auto", "o", "k", "x", "pb", "c", "db", "d", "cb", "nb", "ab", "B", "n", "s", "rb", "A", "i", "y", "bs", "g", "fb", "ib", "beta", "aa", "wb", "u", "lb", "f", "e", "base", "sb", "be", "w", "ba", "v", "bb", "r", "p"]}}
{"code": "n = int(input())\\n\\narr = [0] * (n+1)\\n\\nfor i in range(1,n+1):\\n    x = []\\n    while i % 2 == 0:\\n        x.append(2)\\n        i = i // 2\\n    f = 3\\n    while f * f <= i:\\n        if i % f == 0:\\n            x.append(f)\\n            i = i // f\\n        else:\\n            f += 2\\n    if i != 1:\\n        x.append(i)\\n\\n    for k in range(len(x)):\\n        arr[x[k]] += 1\\n\\nans = 1\\nfor i in range(len(arr)):\\n    ans *= (arr[i] + 1)\\nprint(ans % (10**9 + 7))\\n", "target": "658", "substitutes": {"n": ["o", "j", "c", "d", "nb", "s", "num", "t", "y", "g", "h", "u", "len", "net", "nt", "e", "b", "ns", "pn", "w", "z", "l", "m", "r", "nc", "p", "ne", "N"], "arr": ["err", "xi", "ar", "img", "a", "data", "ab", "app", "dat", "int", "all", "Array", "list", "array", "ch", "test", "y", "ray", "g", "h", "abc", "bl", "dr", "ix", "rep", "py", "batch", "aa", "br", "stack", "u", "e", "ann", "res", "b", "xx", "scan", "gr", "q", "w", "z", "v", "l", "air", "orig", "r", "str", "fr", "order", "prev", "p", "cat", "align", "enc"], "i": ["pi", "it", "o", "ji", "xi", "j", "c", "gi", "ci", "d", "yi", "phi", "a", "ie", "start", "int", "ind", "s", "ui", "ini", "range", "t", "ni", "bi", "id", "y", "g", "h", "index", "ip", "eni", "si", "u", "iu", "fi", "e", "I", "ti", "b", "mi", "ki", "q", "ai", "w", "z", "p", "v", "l", "ii", "li", " pi", "m", "r", "io"], "x": ["o", "ext", "sync", "xi", "c", "search", "xy", "a", "data", "s", "list", "array", "t", "y", "tx", "xml", "test", "python", "xa", "g", "xxx", "ax", "h", "abc", "xe", "rx", "ix", "index", "ex", "xc", "u", "e", "xd", "b", "X", "xx", "xes", "wx", "w", "z", "rex", "v", "l", "cross", "m", "xs", "r", "p"], "f": ["pi", "fs", "o", "j", "feed", "c", "d", "a", "fc", "ff", "s", "ef", "t", "fa", "rf", "y", "fe", "g", "fd", "h", "sf", "u", "fi", "e", "b", "inf", "fen", "q", "w", "frac", "z", "p", "of", "form", "l", "v", "ii", "m", "bf", " F", "fr", "cf", "F", "r", "two", "fp"], "k": ["ik", "o", "kn", "_", "j", "kk", "c", "d", "ijk", "ky", "a", "ind", "ck", "s", "id", "key", "sk", "g", " j", "ok", "ks", "kid", "u", "e", "I", "ki", "q", "kw", "w", "z", "K", "l", "v", "r", "p", "kr", "km", "ku"], "ans": ["offs", "ls", "cus", "ras", "ins", "a", "ants", "aid", "amps", "ens", "an", "s", "anc", " means", "ats", "cs", "anon", "na", "os", "plan", "ms", "ds", "ks", "nan", "ids", "span", "ana", "can", "cons", "cas", "aned", "len", "ANS", "acts", "ann", "ps", "ns", "lan", "ai", "ays", "p", "aus", "ons"]}}
{"code": "def main():\\n    n, m, c = map(int, input().split())\\n    blis = list(map(int, input().split()))\\n    alis = []\\n    for i in range(n):\\n        ilis = list(map(int, input().split()))\\n        alis.append(ilis)\\n    ans = 0\\n    for i in range(n):\\n        tmp = c\\n        for k in range(m):\\n            #print(alis, alis[i], alis[i][k], blis, blis[k])\\n            tmp += alis[i][k] * blis[k]\\n        if tmp > 0:\\n            ans += 1\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "213", "substitutes": {"n": ["o", "cn", "x", "j", "np", "d", "nb", "num", "s", "t", "y", "g", "nn", "un", "nu", "u", "f", "e", "nt", "rn", "b", "ns", "sn", "no", "w", "z", "v", "l", "r", "nc", "p", "ne", "N"], "m": ["o", "mc", "x", "j", "tm", "d", "s", "num", "t", "y", "mn", "g", "h", "cm", "u", "e", "f", "b", "q", "w", "z", "v", "l", "hm", "r", "M", "p", "bm"], "c": ["mc", "x", "ci", "d", "cycle", "ar", "col", "ac", "a", "bc", "cc", "t", "ch", "config", "cs", "y", "g", "con", "h", "co", "cm", "dc", "xc", "u", "f", "e", "b", "C", "w", "z", "lc", "v", "cd", "cat", "l", "nc", "p", "count"], "blis": ["rlins", "rlai", "plai", "silins", "blai", "blIS", "silIS", "blins", "plis", "silis", "rlIS", "rlis", "plins", "plIS", "silai"], "alis": ["alli", "asses", "alities", "al", "isal", "asi", "alien", "anti", "ala", "als", "bis", "pal", "itis", "illas", "esi", "ali", "ales", "illes", "alos", "asin", "lasses", "anas", "nis", "antes", "lis", "lia", "si", "lees", "chal", "ois", "mas", "alist", "ubis", "phis", "las", "antis", "alia", "acs", "alian", "alle", "atis"], "i": ["pi", "it", "o", "x", "j", "ci", "ar", "a", "int", "ind", "t", "ni", "bi", "id", "on", "ip", "il", "u", "iu", "f", "I", "e", "ti", "b", "ai", "chi", "l", "v", "ii", "li", "p"], "ilis": ["illos", "glci", "illiss", "illas", "liss", "ilins", "ilci", "illins", "ilas", "elis", "elas", "illci", "lis", "ilos", "glins", "los", " ilins", "glis", "elos", "iliss", "illis", " iliss", "eliss", "las", "gliss", " ilci"], "ans": ["ls", "cus", "ci", "an", "anc", "man", "annot", "na", "ana", "nan", "co", "nn", "can", "cons", "AN", "cas", "ania", "lus", "lan", "ann", "sn", "ani", "ai", "ano", "li", "acs", "aus", "any"], "tmp": ["mini", "ls", "pid", "su", "np", "ci", "nb", "bc", "amp", "bi", "ignore", "cmp", "proc", "lli", "cp", "co", "nn", "la", "mp", "ann", "qq", "mm", "sn", "pl", "ani", "aaa", "cat", "li"], "k": ["it", "ke", "x", "ky", "ac", "ind", "an", "ch", "id", "get", "g", "ks", "co", "un", "u", "e", "f", "b", "q", "w", "K", "l", "v", "p"]}}
{"code": "a, b = map(int, input().split())\\nnum = []\\nfor i in range(4):    \\n    if a * b * i % 2 != 0:\\n        num.append(\"Yes\")\\nif \"Yes\" in num:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "356", "substitutes": {"a": ["area", "x", "c", "d", "ab", "ac", "int", "n", "pa", "da", "an", "A", "fa", "y", "alpha", "na", "sa", "aa", "u", "f", "e", "am", "ca", "ad", "w", "ae", "asa", "ba", "l", "m", "p", " A", "au"], "b": ["x", "abb", "j", "c", "d", "nb", "ab", "B", "bc", "n", "s", "rb", "A", "bi", "y", "bs", "g", "fb", "h", "ib", "beta", "aa", "wb", "u", "e", "f", "sb", "ba", "v", "bb", "r", "p"], "num": ["unit", "empty", "common", "um", "hex", "np", "om", "nm", "node", "sum", "nb", "data", "int", "n", "all", "valid", "non", "alph", "initial", "bn", "missing", "Num", "mon", "split", "uni", "check", "na", "div", "con", "dim", "en", "nn", "index", "digit", "bin", "number", "nu", "multi", "umber", "norm", "nom", "fn", "none", "byn", "NUM", "status", "no", "nor", "add", "text", "nam", "temp", "block"], "i": ["pi", "ji", "o", "k", "x", "xi", "j", "c", "ci", "d", "phi", "col", "start", "int", "ind", "n", "ini", "bi", "id", "y", "h", "index", "si", "u", "f", "e", "I", "end", "ai", "z", "l", "v", "ii", "li", "r", "m", "p"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\ndef main():\\n\\n    A, B, C, K = map(int, input().split())\\n\\n    ans = 0\\n\\n    if K <= A:\\n        ans = K\\n\\n    else:\\n        if K <= A + B:\\n            ans = A\\n\\n        else:\\n            ans = A + (-1 * (K - A - B))\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "174", "substitutes": {}}
{"code": "n, k = map(int, input().split())\\nx0 = list(map(int, input().split()))\\n\\nx1 = [i for i in x0 if i >= 0]\\nx2 = list(reversed([i for i in x0 if i < 0]))\\ncount0 = len(x1)\\ncount1 = len(x2)\\nans = float('inf')\\n\\nif count1 == 0:\\n    print(x1[k-1])\\nelif count0 == 0:\\n    print(-x2[k-1])\\nelse:\\n    if 0 in x1:\\n        x1.remove(0)\\n        k -= 1\\n        count0 -= 1\\n    for i in range(min(count0, k)):\\n        if count1 >= k-i-1:\\n            ans = min(ans, x1[i]*2-x2[k-i-2])\\n    for i in range(min(count1, k)):\\n        if count0 >= k-i-1:\\n            ans = min(ans, -x2[i]*2+x1[k-i-2])\\n    print(ans)\\n", "target": "651", "substitutes": {"n": ["o", "j", "c", "d", "nb", "ni", "y", "g", "min", "nn", "f", "e", "b", "ns", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "k": ["ik", "o", "kn", "ke", "x", "work", "j", "c", "d", "ak", "ky", "mk", "ck", "s", "kick", "t", "ch", "id", "y", "ph", "key", "sk", "ka", "g", "unk", "h", "ok", "ks", "uk", "dk", "ko", "u", "size", "f", "e", "b", "ki", "q", "w", "kw", "z", "K", "v", "l", "m", "p", "cl", "km", "count", "ku"], "x0": ["xx2", "pi", "y0", "xi", "xx0", "y1", " x00", "X2", "xx00", "p0", "x00", "xx1", " xi", "X1", "Xi", "X0", "y2", "p00", "p2", "p1"], "x1": ["xx2", "wx2", "xx3", " x11", "ax2", "y1", "X81", "wxone", "X2", "ax0", "x3", "x9", "p0", "X9", "x11", "xn", "xx1", "x81", " x9", "ex11", "ex1", "X1", "xone", " xn", "ex0", " xone", "X3", "X0", "y2", "wx1", "xxone", "pn", "Xone", "p2", "y3", "ex2", "ax9", "wxn", " x81", "Xn", "X11", "y81", "p1", "ax1", " x3"], "i": ["mini", "it", "xi", "j", "c", "oi", "t", "bi", "ip", "multi", "eni", "iu", "f", "I", "ti", "mi", "ki", "z", "m", "abi", "io", "p", "zi", "ji", "x", "gi", "ci", "d", "a", "id", "y", "ix", "ig", "fi", "hi", "im", "ii", "li", "vi", "pi", "di", "yi", "ie", "int", "ind", "s", "ini", "ib", "index", "u", "e", "inf", "chi", "qi", "v", "l", "ic", "ei", "o", "start", "ui", "ni", "si", "mu", "b", "ai", "w"], "x2": ["xf2", "y0", "p8", "Xtwo", " x3", "xf0", "y1", "X2", "x3", "p0", "fxtwo", "X1", "y4", " x8", "X3", " xtwo", "X0", "y2", "X62", "fx3", "fx1", "X8", " x4", "xf1", " x62", "xf62", "p2", "fx2", "x4", "x62", "xtwo", "p1", "x8", "X4"], "count0": [" count2", "Count6", "call8", " count3", " count6", "len2", "count8", "count2", "call0", "Count50", "Count3", "call3", "Count8", "length3", "Countz", "length1", "len50", "count3", "len1", "Count1", "call2", "Count2", "length0", "length6", "count50", "len0", " count50", " countz", "lenz", "countz", " count8", "count6", "Count0", "length2"], "count1": [" count2", "Count01", " count3", "call1", "len2", "count01", "count2", "Count3", "length3", "len3", "length1", "count3", "len1", "Count1", "call2", "Count2", "length0", "size0", " count01", "size1", "len0", "size2", "Count0", "length2", "call01"], "ans": ["auto", "ls", "offs", "cus", "anus", "atts", "san", "aning", "nas", "ras", "ins", "sum", "a", "olds", "ars", "ants", "any", "amps", "vs", "ens", "args", "an", "anc", "s", "ats", "cs", "oss", "ents", "ams", "anon", "sk", "annot", "na", "os", "anas", "plan", "ds", "anse", "ks", "nan", "ana", "span", "can", "anes", "la", "AN", "atan", "aned", "leans", "cas", "ANS", "ann", "lan", "ns", "ca", "errors", "no", "ions", "ani", "ai", "aces", "ays", "mean", "eps", "aus", "ons"]}}
{"code": "k=int(input())\\nnum=0\\nfor i in range(k+1):\\n    num=(num*10+7)%k\\n    if num==0:\\n        print(i+1)\\n        break\\nif num:\\n    print(\"-1\")", "target": "737", "substitutes": {"k": ["ik", "o", "kn", "ke", "x", "kk", "j", "c", "d", "n", "mk", "ck", "kick", "t", "ch", "key", "sk", "unk", "h", "ok", "kid", "ks", "kin", "u", "f", "max", "e", "end", "b", "q", "kw", "w", "K", "v", "m", "p", "block"], "num": ["unit", "cur", "note", "home", "loc", "x", "um", "c", "np", "nm", "node", "sum", "nb", "given", "pos", "int", "n", "valid", "inc", "non", "gnu", "Num", "id", "result", "mon", "split", "uni", "mn", "check", "div", "con", "inner", "un", "index", "bin", "number", "nu", "umi", "norm", "begin", "u", "nom", "f", "fn", "max", "end", "code", "none", "NUM", "no", "init", "text", "nc", "nam", "temp", "block"], "i": ["pi", "o", "x", "xi", "j", "gi", "c", "ci", "d", "phi", "col", "a", "start", "pos", "int", "ind", "n", "s", "ini", "ui", "ni", "id", "index", "u", "iu", "e", "I", "hi", "ki", "ai", "z", "chi", "qi", "l", "li", "m", "p"]}}
{"code": "W, H, x, y, r = map(int, raw_input().split())\\nprint \"Yes\" if 0 <= x - r < x + r <= W and 0 <= y - r < y + r <= H else \"No\"", "target": "563", "substitutes": {"W": ["U", "D", "Width", "Sw", "R", "E", "B", "T", "Y", "A", "L", "G", "Wh", "WP", " w", "FW", "Q", "WS", "I", "X", "C", "V", "w", "P", "We", "K", "MW", "Word", "O", "VW", "M", "F", "WE", "N"], "H": ["U", "SH", " h", "HD", "R", "E", "Hi", "B", "RH", "T", "HH", "NH", "Y", "L", "G", "FH", "HA", "EH", "h", "Q", "X", "C", "MH", "HI", "V", "w", "P", "K", "M", "DH", "F", "N", "Z"], "x": ["U", "k", "xi", "px", "c", "R", "d", "xy", "wa", "T", "int", "n", "ww", "Y", "t", "L", "i", "id", "tx", "width", "xxx", "ax", "h", "rx", "ix", "index", "ex", "u", "f", "dx", "b", "X", "xx", "w", "z", "v", "cross", "m", "right", "p"], "y": ["height", "ey", "o", "sy", "ya", "j", "cy", "c", "d", "xy", "yi", "oy", "yo", "n", "Y", "ye", "t", "i", "yr", "dy", "ty", "h", "py", "yt", "e", "b", "X", "yy", "w", "z", "v", "l", "m", "p", "vy"], "r": ["rs", "o", "rd", "k", "err", "c", "er", "R", "d", "ar", "ri", "n", "re", "rh", "mr", "rb", "t", "rf", "i", "id", "yr", "g", "ir", "h", "dr", "lr", "pr", "ra", "radius", "nr", "ur", "u", "e", "f", "hr", "rr", "b", "q", "w", "z", "cr", "l", "v", "m", "right", "fr", "p", "kr", "rc", "sr"]}}
{"code": "f = lambda x: x if p[x]<0 else f(p[x])\\nN,M = map(int,input().split())\\np = [-1]*N\\nfor _ in range(M):\\n  A,B = map(lambda x:f(int(x)-1),input().split())\\n  if A==B: continue\\n  elif A<B: A,B=B,A\\n  p[A] += p[B]\\n  p[B] = A\\nprint(sum(i<0 for i in p)-1)", "target": "354", "substitutes": {"f": ["df", "fs", "o", "full", "x", "feed", "c", "d", "a", "af", "fc", "ff", "n", "fun", "F", "t", "fa", "rf", "fe", "g", "h", "fb", "fx", "sf", "function", "fn", "e", "b", "func", "fit", "inf", "filter", "w", "ref", "v", "l", "m", "bf", " F", "cf", "fp"], "N": ["U", "D", "S", "R", "NS", "E", "Ns", "T", "n", "W", "J", "Y", "L", "G", " n", "NN", "Q", "I", "X", "C", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "D", "S", "R", "E", "T", "W", "J", "n", "Y", "G", "L", "Num", "DM", "RM", "NM", "MD", "MS", "MN", "Q", "I", "X", "C", "V", "P", "K", "m", "O", "H", "F", "MF", "Z"], "p": ["lp", "pi", "tp", "o", "part", "at", "x", "j", "op", "c", "sp", "np", "param", "d", "E", "point", "prev", "data", "a", "pos", "T", "pa", "int", "n", "s", "hp", "array", "t", "po", "y", "alpha", "split", "python", "g", "h", "cp", "pr", "ip", "py", "u", "pp", "e", "pre", "I", "b", "ps", "base", "C", "q", "w", "P", "pm", "v", "jp", "l", "pc", "m", "r", " P", "patch", "ap", "bp", "fp"], "_": ["k", "j", "d", " I", "n", "num", "g", " k"], "A": ["Ac", "U", "As", "NA", "D", "S", "E", "a", "CA", "All", "T", "PA", "W", "IA", "This", "BB", "Y", "AD", "G", "L", "AM", "Am", "Ab", "HA", "BA", "Ad", "SA", "AU", "An", "TA", "AP", "Q", "Ar", "I", "AA", "And", "X", "b", "C", "MA", "V", "If", "P", "FA", "AF", "AH", "K", "AB", "API", "O", "AC", "H", "F", "AW", "LA"], "B": ["U", "EB", "D", "S", "BM", "R", "Other", "E", "LB", "ab", "a", "Both", "BB", "T", "W", "BE", "J", "TB", "Y", "L", "G", "Part", "Ab", "NB", "BA", "PB", "BD", "OB", "AP", "BL", "Bs", "Q", "GB", "QB", "WB", "CB", "I", "b", "X", "FB", "C", "SB", "V", "MB", "P", "BC", "AB", "O", "F"], "i": ["pi", "di", "o", "it", "pid", "k", "x", "xi", "j", "c", "ci", "d", "phi", " I", "a", "mult", "pos", "int", "ind", "n", "all", "num", "ini", "bi", "id", "y", "alpha", "ix", "index", "ip", "PI", "u", "e", "I", "max", "b", "inf", "ai", "chi", "v", "ii", "li"]}}
{"code": "n = int(input())\\nf = []\\np = []\\nfor _ in range(n):\\n  f.append(list(map(int, input().split())))\\nfor _ in range(n):\\n  p.append(list(map(int, input().split())))\\n\\ndef solve(out_list):\\n  ans = 0\\n  for fi, pi in zip(f, p):\\n    c = 0\\n    for o in out_list:\\n      if fi[o] == 1:\\n        c += 1\\n    ans += pi[c]\\n  return ans\\n\\nans = -float(\"inf\")\\nfor i in range(2 ** 10):\\n  out_list = []\\n  ## \u3069\u306e\u6841\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306b2\u9032\u6570\u306e\u5404\u6841\u3092\u30eb\u30fc\u30d7\\n  for j in range(10):\\n    ## i >> j\u3067\u78ba\u8a8d\u3057\u305f\u3044\u6841\u3092\u4e00\u756a\u53f3\u307e\u3067\u305a\u3089\u3057\u30661\u3068\u8ad6\u7406\u7a4d\u3092\u3068\u3063\u3066\u300c\u9078\u629e\u300d\u3057\u3066\u3044\u308b\u8981\u7d20\u3092\u78ba\u8a8d\\n    if (i >> j) & 1:\\n      out_list.append(j)\\n  if len(out_list) != 0:\\n    ans = max(ans, solve(out_list))\\nprint(ans)\\n", "target": "629", "substitutes": {"n": ["k", "x", "j", "np", "d", "nb", "num", "s", "t", "y", "g", "count", "en", "h", "nan", "nn", "number", "nu", "u", "size", "len", "net", "e", "b", "ns", "sn", "no", "w", "z", "l", "v", "m", "r", "nc", "N"], "f": ["file", "fs", "x", "input", "lf", "j", "fm", "d", "fl", "af", "ff", "t", "fa", "rf", "fe", "fb", "h", "tf", "u", "e", "b", "fold", "inf", "fen", "q", "w", "l", "v", "m", "fr", "bf", "F", "fp"], "p": ["wp", "lp", "tp", "x", "sp", "np", "a", "pa", "per", "po", "t", "y", "h", "cp", "pr", "py", "u", "pp", "e", "b", "ps", "q", "P", "v", "l", "pc", "m", "ap", "pe", "fp"], "_": ["out", "j", "x", "d", " un", " line", "ac", "__", " time", "g", " j", "ip", " seq", "q", "of", "l", " q", "O", "ing"], "out_list": ["out_l", "outfilelist", " out_all", " out_e", "out_pool", "call_pool", "out_all", "outfilee", "outlistlist", " out_array", "call_queue", "outlistList", " out_l", "call_List", "out_queue", "outlistarray", "outingqueue", "outinglist", "outingList", "outlistl", "outingpool", " out_List", "call_list", "out_List", "out_array", "outfileall", "out_e"], "ans": ["ac", "args", "can", "AN", "cas", "aned", "ANS", "ns", "aus", "au", "x", "ci", "a", "ss", "ens", "an", "cs", "sk", "na", " cs", "anas", "ks", "nan", "ann", "lan", "ani", "cat", "eps", "ls", "S", "ass", "s", "anc", "A", "man", "ats", "ana", "cons", "lines", "ed", "ps", "C", "es", "ays", "acs", "ln", "ons", "case", "ins", "ants", " means", "ians", "os", "g", "ions", "ai", "aces", "ano"], "fi": ["FI", "ffe", "di", "fy", "xi", "sci", "ci", "phi", "ifa", "afi", "ifi", "fc", "ini", "fa", "ni", "bi", "fine", "fo", "fe", "lli", "isi", "sf", "Fi", "eni", "si", "flu", "fen", "ani", "chi", "qi", "ii", "ei", "zi"], "pi": ["lp", "di", "phil", "xi", "anti", "ci", "yi", "phi", "oi", "pd", "pa", "po", "ati", "bi", "y", "api", "python", "Pi", "py", "PI", "si", "pp", "pan", "pie", "ps", "mi", "ki", "ani", "pm", "chi", "pu", "v", "ii", "pc", "li", "bp"], "c": ["cn", "k", "x", "cy", "ci", "d", "cycle", "ac", "a", "s", "cc", "t", "cs", "y", "ec", "os", "co", "cin", "dc", "xc", "u", "cu", "e", "b", "ca", "unc", "C", "z", "l", "lc", "v", "pc", "m", "oc", "nc", "count"], "o": ["it", "k", "x", "ci", "d", "oi", "a", "lo", "pos", "ot", "go", "s", "t", "y", "os", "co", "oid", "ko", "u", "oa", "I", "e", "b", "z", "of", "l", "v", "ii", "pc", "O", "ic", "m", "oc", "io", "ou"], "i": ["it", "x", "xi", "j", "ci", " I", "a", "int", "ind", "co", "ip", "u", "I", "ti", "ai", "l", "ii", "ic", "li", "ei", "pc"]}}
{"code": "import sys\\nimport heapq, math\\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\\nfrom itertools import accumulate, dropwhile, takewhile, groupby\\nfrom functools import lru_cache\\nfrom copy import deepcopy\\nx = int(input())\\n\\ncnt = x // 11\\n\\nif x % 11 == 0:\\n    print(cnt * 2)\\nelif cnt * 11 + 6 >= x:\\n    print(cnt * 2 + 1)\\nelse:\\n    print(cnt * 2 + 2)", "target": "241", "substitutes": {"x": ["xp", "xi", "work", "c", "ctx", "xy", "event", "int", "n", "ww", "s", "num", "t", "xxxxxxxx", "i", "y", "test", "tx", "check", "xa", "python", "xxx", "ax", "xt", "xxxx", "rx", "ix", "index", "fx", "number", "ex", "xc", "u", "size", "f", "e", "dx", "X", "xx", "xes", "wx", "w", "z", "v", "m", "xs", "p"], "cnt": ["ncnt", "ncnc", "CNT", "cno", "acnn", "acct", "ncct", "cwd", "kount", " cnd", " cno", "ecrt", " cpt", "ecno", "rcnd", "kno", "acount", "ecount", "cnd", "cnn", "acnt", "knt", "acpt", "ncnd", "Cnn", "Cpt", "ecnt", "krt", "acNT", "ucnt", "cnc", "rcct", "cct", "Cnt", "ucct", "cNT", "Cwd", "ucwd", "Count", " cnc", "rcnc", "Cct", " count", " cnn", "rcnt", " crt", "ucNT", "cpt", " cwd", " cct", "crt", " cNT", "count"]}}
{"code": "import math\\nn = int(input())\\nlis = [0] * n\\nfor i in range(2,n+1):\\n    now = i\\n    for j in range(2,math.ceil(math.sqrt(i))+1):\\n        while now % j == 0:\\n            now //= j\\n            lis[j-1] += 1\\n    if now != 1:\\n        lis[now-1] += 1\\n\\ndef num(l):\\n    return len(list(filter(lambda x: x >= l-1, lis)))\\n\\nprint(num(75) + num(25) * (num(3) -1) + num(15) * (num(5) - 1) + num(5) * (num(5) - 1) * (num(3) - 2) // 2)", "target": "145", "substitutes": {"n": ["pi", " m", " b", "it", "o", "k", "x", " len", " NI", "c", "d", " fn", " N", "nb", " p", "num", "t", "ni", " s", "y", "g", "h", "network", "nn", " Ni", " Ne", " f", " ns", " c", "u", "net", " ni", " number", "f", "nt", "e", "b", "ns", " num", "w", "z", "v", "li", "m", "r", "nc", "p", "N"], "lis": ["lp", "ls", "dis", "locks", "sit", "aris", "lems", "xi", "holes", "ils", "yi", "oi", "lys", "leys", " ls", "mails", "vs", "bis", "models", "itis", "lie", "ly", "LI", "lins", "ni", "sis", "lik", "olis", "os", "lists", "isi", "nis", "jl", "lines", "lies", "lite", "la", "eni", "si", "videos", "isl", "los", "lam", "Li", "alis", "ois", "objects", "ns", "mi", "mas", "idis", "dl", "phis", "oris", "las", "lc", "ii", "li", "xs", "pins", "lit", "series", "lt", "atis", "zi"], "i": ["pi", "di", "ji", "x", "xi", "c", "ci", "d", "yi", "phi", "a", "ie", "int", "ind", "ini", "t", "ni", "bi", "y", "index", "ip", "si", "u", "iu", "f", "I", "e", "ti", "b", "mi", "im", "ai", "z", "chi", "v", "ii", "li", "m", "p"], "now": ["auto", "loc", "this", "first", "after", "ready", "current", "off", "low", "currently", "old", "a", "ww", "info", "result", "today", "id", "on", "sw", "time", "qa", "we", "ok", "self", "ow", "next", "day", "then", "how", "jo", "always", "once", "last", "size", "NOW", "since", "e", "max", "f", "obj", "jj", "before", "new", "so", "no", "sh", "w", "z", "where", "hack", "aj", "length", "wait", "when", "order", "wh", "Now"], "j": ["it", "ji", "o", "k", "x", "xi", "_", "c", "d", "ie", "start", "J", "all", "ind", "num", "s", "t", "ch", "y", "g", "ij", "h", "job", "next", "last", "u", "e", "f", "I", "adj", "b", "jj", "max", "im", "q", "w", "z", "of", "jp", "v", "m", "li", "r", "p", "uj"], "l": ["el", "lp", "ls", "o", "loc", "k", "ol", "al", "x", "ul", "d", "kl", "sl", "ll", "s", "list", "L", "y", "nl", "la", "lin", "u", "len", "f", "rl", "dl", "q", "w", "z", "lc", "li", "m", "lu", "ln", "p"]}}
{"code": "def main():\\n    a = int(input())\\n    b = int(input())\\n    if a > b:\\n        print(\"GREATER\")\\n    elif a == b:\\n        print(\"EQUAL\")\\n    else:\\n        print(\"LESS\")\\n\\n\\nif __name__ == '__main__':\\n    main()\\n\\n", "target": "557", "substitutes": {"a": ["ma", "ha", "x", "c", "d", "ar", "ama", "ab", "ac", "af", "pa", "n", "mA", "da", "an", "A", "fa", "i", "y", "alpha", "na", "g", "sa", "qa", "aa", "va", "f", "e", "ad", "ca", "am", "ga", "ai", "ae", "aaa", "ba", "ea", "p"], "b": ["eb", "mb", "abb", "pb", "c", "db", "d", "cb", "ob", "nb", "ab", "B", "bc", "bd", "n", "xb", "s", "rb", "bi", "bs", "fb", "ib", "aa", "wb", "lb", "f", "e", "sb", "ae", "be", "ba", "l", "v", "bb", "bf", "bp"]}}
{"code": "# CODE FESTIVAL 2016 \u4e88\u9078 C: A \u2013 CF\\ns = input()\\nprint('Yes' if 'C' in s and 'F' in s[s.index('C') + 1:] else 'No')", "target": "48", "substitutes": {}}
{"code": "a = int(input())\\nb = int(input())\\n\\nprint(2*b-a)", "target": "524", "substitutes": {"a": ["area", "x", "c", "d", "ab", "ac", "pa", "n", "da", "A", "fa", "i", "alpha", "na", "qa", "sa", "aa", "va", "e", "f", "ad", "ca", "ga", "ae", "asa", "z", "aaa", "ba", "l", "ea", "aj", "bb", "p"], "b": ["mb", "abb", "c", "d", "cb", "nb", "ob", "ab", "B", "bc", "n", "xb", "s", "rb", "A", "bs", "fb", "abc", "beta", "aa", "wb", "f", "e", "ad", "sb", "ba", "l", "bb", "bf", "r", "p", "bp"]}}
{"code": "def main():\\n    A = list(map(int, input().split()))\\n\\n    A.sort(reverse=True)\\n\\n    print(abs(A[1] - A[0]) + abs(A[2] - A[1]))\\n\\nif __name__ == '__main__':\\n    main()", "target": "793", "substitutes": {"A": ["As", "U", "NA", "Bu", "D", "S", "Any", "New", "Args", "Sample", "E", "Alpha", "a", "B", "CA", "All", "T", "Data", "W", "mA", "Action", "At", "Array", "Y", "Act", "AM", "G", "L", "Part", "Num", "First", "Address", "Ma", "GA", "SA", "Adam", "Int", "Average", "Ha", "Each", "Count", "I", "AA", "X", "Ang", "The", "C", "Answer", "P", "FA", "API", "Parts", "This", "O", "H", "M", "Bar", "F", "Abs", "N", "LA"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**7)\\n\\n\\ndef dfs(start, dist, distance_list, explored):\\n    for node, cost in tree[start]:\\n        if explored[node] is False:\\n            explored[node] = True\\n            distance_list[node] = dist + cost\\n            dfs(node, distance_list[node], distance_list, explored)\\n    return distance_list\\n\\n\\nn = int(input())\\ntree = [[] for _ in range(n)]\\ndistance = [float('inf') for _ in range(n)]\\n\\nfor _ in range(n-1):\\n    a,b,c = map(int, input().split())\\n    a -= 1\\n    b -= 1\\n    tree[a].append((b, c))\\n    tree[b].append((a, c))\\n\\nq, k = map(int, input().split())\\nk -= 1\\nquery = []\\ndistance[k] = 0\\n\\nfor _ in range(q):\\n    x, y = map(int, input().split())\\n    query.append((x-1, y-1))\\n\\nXX = [False for _ in range(n)]\\nXX[k] = True\\n\\nX = dfs(k, 0, distance, explored=XX)\\n\\nfor i, j in query:\\n    print(X[i] + X[j])", "target": "360", "substitutes": {"start": ["rank", "part", "step", "Start", "work", "open", "search", "find", "name", "ind", "starting", "depth", "range", "info", "id", "root", "stop", "get", "source", "set", "index", "error", "st", "begin", "parse", "e", "end", "load", "seed", "edge", "init", "add", "sign", "p", "path", "star"], "dist": ["df", "grade", "Dist", "np", "d", "de", "feature", "data", "dev", "diff", "depth", "range", "dir", "cart", "info", "weight", "wd", "test", "sd", "dy", "check", "dim", "score", "dx", "rec", "shift", "Distance", "desc", "draw", "grad", "form", "rank"], "distance_list": ["distance2type", "distance2List", " distance_List", "distance2l", "distance_table", " distance_type", "distanceFileList", "Distance_List", "distance2test", " distance_chain", " distance_source", "distance2chain", "term_List", "Distance_table", "term_list", " distance_table", "term2List", "term2l", "Distance_list", "distance_lists", "distance2result", "distance2source", "distance_source", " distance_data", "term_l", "distance2list", " distance_test", "distance2lists", "distanceFilelist", "distanceFiledata", "distance_data", "distance_chain", "distance_List", "term2lists", "distance_type", "Distance_result", "distance2table", "distance_test", "term_lists", "distance_result", "term2list", "distance_l"], "explored": ["Exploured", "comboured", "expored", "infore", "implored", "Exploring", "exporing", "explorer", "infoured", "incoured", "encored", "combore", "exporer", "incoring", "collore", "encore", "exploured", "inforing", "encoring", "exploring", "colloring", "comboring", "expoured", "collored", "combored", "Explored", "imploring", "colloured", "collorer", "explore", "implore", "encoured", "expore", "incore", "imploured", "incored", "infored", "Explorer", "Explore"], "node": ["core", "Node", "file", "part", "loc", "element", "package", "od", "object", "event", "name", "local", "complete", "anch", "num", "remote", "root", "leaf", "id", "site", "key", "nw", "card", "live", "image", "component", "network", "word", "ode", "nn", "parent", "source", "index", "line", "host", "row", "route", "resource", "e", "one", "load", "edge", "new", "child", "link", "content", "layer", "path", "block", "call"], "cost": ["CO", "core", "df", "grade", " costs", "work", "doc", "d", "point", "find", "sum", "data", "value", "dev", "risk", "ff", "go", "fun", "cc", "Cost", "weight", "score", "parent", "co", "word", "function", "max", "label", "clean", "child", "power", "position", "draw", "style", "length", "right", "cf", "rank", "call"], "n": ["o", " order", "d", " N", "nb", " p", "num", "s", "t", "g", "count", "h", "network", "nn", "nl", "number", "nu", "u", "f", "nt", "e", "ns", "sn", "no", "w", "z", "l", "v", "m", "r", "nc", "p", "N"], "tree": ["note", "string", "step", "response", "tower", "study", "data", "rule", "int", "Tree", "list", "depth", "cache", "t", "array", "root", "range", "leaf", "test", "ree", "sort", "split", "key", "site", "body", "dim", "forest", "parent", "index", "source", "table", "sequence", "model", "zip", "graph", "parse", "len", "e", "code", "match", "seed", "edge", "store", "position", "layer", "json", "flat", "length", "order", "path"], "_": [" v", "out", " sub", " un", "d", " p", "ac", "lex", "__", " time", "all", "non", "t", "___", "s", "g", "val", " self", "ay", "ip", " function", "f", "ning", " block", "code", " non", " dev", " the", " mem", "p", " pool", " over", "ing", "block"], "distance": ["uri", "grade", "metadata", "ide", "relation", "d", " Distance", "feature", "point", "data", "diff", "degree", "ge", "direction", "depth", "range", "weight", "time", "score", "division", "path", "sequence", "density", "radius", "dx", "match", "term", "edge", "shift", "Distance", "power", "position", "duration", "length", " distances", "rank", "km"], "a": ["ma", "o", "d", "ar", "ac", "ab", "af", "pa", "da", "an", "s", "A", "fa", "alpha", "sa", "aa", "u", "va", "oa", "e", "f", "ad", "ca", "am", "ai", "ae", "w", "aaa", "ba", "ea", "l", "aj", "r", "p", "au"], "b": ["o", "eb", "abb", "d", "cb", "nb", "ob", "ac", "ab", "B", "bd", "s", "rb", "alpha", "bs", "body", "h", "aa", "u", "e", "f", "ad", "ca", "base", "sb", "ae", "w", "be", "ba", "v", "l", "r", "bb", "bf", "p", "bp"], "c": ["o", "cy", "ci", "d", "cb", "ac", "ab", "s", "ce", "ch", "cs", "g", "con", "cu", "u", "f", "e", "ca", "C", "z", "cr", "l", "v", "lc", "cat", "r", "cd", "cf", "p"], "q": ["o", "d", "question", "qs", "t", "id", "check", "time", "qa", "g", "h", "Q", "sq", "u", "f", "qq", "w", "z", "qi", "v", "l", "m", "p", "qu", "dq", "count"], "k": ["kj", "ik", "core", "o", "kn", "ke", "work", "kk", "d", "ck", "ek", "kick", "key", "sk", "check", "g", "h", "ok", "ks", "dk", "ko", "kin", "u", "e", "f", "ki", "w", "kw", "z", "K", "v", "l", "m", "r", "p", "kr"], "query": ["core", "wheel", "sync", "xi", "search", "square", "question", "feature", "bug", "view", "user", "depth", "array", "range", "cache", "remote", "database", "iq", "test", "sort", "xml", "check", "score", "image", "network", "index", "line", "quad", "dot", "sq", "function", "model", "row", "parse", "size", "code", "match", "qq", "clean", "edge", "term", "random", "scan", "module", "cross", "complex", "Query", "rank", "dq", "km"], "x": ["o", "px", "d", "xy", "int", "s", "id", "on", "h", "ix", "ex", "xc", "u", "e", "f", "dx", "xx", "w", "z", "l", "v", "m", "xs", "p"], "y": ["ey", "sy", "ya", "cy", "d", "yi", "xy", "ny", "yo", "s", "Y", "ye", "t", "dy", "gy", "py", "e", "f", "yy", "z", "v", "l", "m", "p", "vy"], "XX": ["Node", "XXXX", "ZX", "search", "RS", "xy", "Test", "Weight", "DX", "xml", "prefix", "DD", "xxx", "xxxx", "IP", "NN", "Check", "Matrix", "ZZ", "UX", "Feature", "XY", "xx", "TT", "XL", "Distance", "TX", "Cross", "P", "XP", "CC", "cross", "MX", "Query", "XXX", "IX", "NP", "YY", "OX", "nexus"], "X": ["Node", "CI", "XXXX", " N", "Link", "Test", " cross", "W", "J", "Array", "Y", "DX", "xxx", "Rex", "Check", " MX", "ix", "Fix", "UX", "Q", "XY", "xx", "C", "XL", "Distance", "Cross", "TX", "IS", "ML", "P", "CC", "XP", "K", "Code", "V", "MX", " NX", "XXX", "IX", "EX", "Query", "F", "XM", "N", "Z"], "i": ["pi", "ji", "o", "xi", "ci", "yi", "ri", "oi", "ori", "int", "ind", "ui", "ini", "bi", "key", "ix", "si", "u", "iu", "e", "I", "f", "ai", "z", "qi", "v", "l", "ii", "li", "m", "p"], "j": ["kj", "ji", "o", "d", "ijk", "J", "key", "g", "ij", "h", "jl", "py", "jo", "u", "ja", "f", "e", "obj", "jet", "jj", "z", "v", "l", "jp", "aj", "m", "r", "p", "uj"]}}
{"code": "N,K = map(int,input().split())\\nR,S,P = map(int,input().split())\\nT = input()\\n\\n#i\u56de\u76ee\u3001j\u306e\u624b\u3092\u51fa\u3057\u305f\u6642\u306e\u70b9\u6570\u306e\u6700\u5927\u5024\\ndp = [[0]*3 for _ in range(N)]\\n\\nfor i in range(N):\\n  if i>=1:\\n    dp[i][0] += max(dp[i-1][0],dp[i-1][1],dp[i-1][2])\\n    dp[i][1] += max(dp[i-1][0],dp[i-1][1],dp[i-1][2])\\n    dp[i][2] += max(dp[i-1][0],dp[i-1][1],dp[i-1][2])\\n    \\n  if T[i] == \"s\":\\n    dp[i][0] += R\\n  if T[i] == \"p\":\\n    dp[i][1] += S\\n  if T[i] == \"r\":\\n    dp[i][2] += P\\n    \\n  if i-K >= 0:\\n    dp[i][0] += max(dp[i-K][1],dp[i-K][2]) - max(dp[i-K][0],dp[i-K][1],dp[i-K][2])\\n    dp[i][1] += max(dp[i-K][2],dp[i-K][0]) - max(dp[i-K][0],dp[i-K][1],dp[i-K][2])\\n    dp[i][2] += max(dp[i-K][0],dp[i-K][1]) - max(dp[i-K][0],dp[i-K][1],dp[i-K][2])\\n  \\nprint(max(dp[-1][0],dp[-1][1],dp[-1][2]))", "target": "383", "substitutes": {"N": ["CN", "NS", "E", "Ns", "n", "W", "Y", "L", "G", "NT", " n", "NN", "Q", "X", "C", "NR", "RN", "V", "NP", "O", "M", "F", "Z"], "K": ["U", "KR", "Ku", "k", "SK", "E", "KT", "W", "J", "Y", "NK", "KK", "AK", "Q", "PK", "I", "X", " k", "KA", "KN", "Sk", "KS", "O", "H", "M", "Z"], "R": ["AR", "U", "KR", "E", "RF", "RR", "B", "RH", "W", "Y", "A", "SR", "IP", "RP", "Q", "X", "C", "NR", "RN", "V", "r", "O", "M"], "S": ["SE", "U", "SH", "GS", "SS", "NS", "SK", "W", "Si", "SI", "s", "Y", "A", "SR", "SN", "ST", "Q", "SC", "Sl", "SP", "M", "SL", "Z"], "P": ["E", "TP", "B", "PA", "W", "F", "Y", "A", "G", "WP", "RP", "PS", "PT", "Q", "X", "C", "Ps", "PP", "V", "NP", "O", "H", "M", "p"], "T": ["Tom", "Time", "TN", "TC", "TS", "W", "TB", "Type", "Y", "t", "TA", "PT", "Q", "WT", "X", "C", "TG", "TT", "V", "O", "TF", "M", "H", "Z"]}}
{"code": "#!/usr/bin/env python3\\n#M-SOLUTIONS \u30d7\u30ed\u30b3\u30f3\u30aa\u30fc\u30d7\u30f3 D\\n\\nimport sys\\nimport math\\nfrom bisect import bisect_right as br\\nfrom bisect import bisect_left as bl\\nsys.setrecursionlimit(1000000000)\\nfrom heapq import heappush, heappop,heappushpop\\nfrom collections import defaultdict\\nfrom itertools import accumulate\\nfrom collections import Counter\\nfrom collections import deque\\nfrom operator import itemgetter\\nfrom itertools import permutations\\nmod = 10**9 + 7\\ninf = float('inf')\\ndef I(): return int(sys.stdin.readline())\\ndef LI(): return list(map(int,sys.stdin.readline().split()))\\n\\nn = I()\\ncnt = [0]*n\\ngraph = [[] for _ in range(n)]\\nfor _ in range(n-1):\\n    a,b = LI()\\n    cnt[a-1] += 1\\n    cnt[b-1] += 1\\n    graph[a-1].append(b-1)\\n    graph[b-1].append(a-1)\\nc = LI()\\nm = sum(c) - max(c)\\nprint(m)\\nd = [0]*n\\nfor i in range(n):\\n    if cnt[i] == 1:\\n        d[i] = max(c)\\n        break\\nc.sort(reverse = True)\\nc = c[1:]\\nque = deque(c)\\ndef dfs(x,p):\\n    for v in graph[x]:\\n        if v != p:\\n            if d[v] == 0:\\n                d[v] = que.popleft()\\n                dfs(v,x)\\ndfs(i,-1)\\nprint(*d)\\n", "target": "364", "substitutes": {}}
{"code": "n = int(input())\\n\\ncount = 0\\nfor _ in range(n):\\n    a, b = input().split()\\n    if a == b:\\n        count += 1\\n    else:\\n        count = 0\\n    if count == 3:\\n        print(\"Yes\")\\n        quit()\\n\\nprint(\"No\")\\n", "target": "709", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "num", "s", "t", "i", "y", "g", "h", "span", "number", "u", "size", "len", "e", "f", "nt", "ns", "z", "l", "length", "m", "r", "nc", "p", "ne", "N"], "count": ["type", "part", "c", "left", "sum", "name", "start", "coll", "ind", "num", "depth", "list", "cache", "cc", "i", "id", "test", "y", "key", "split", "total", "check", "cond", "index", "number", "size", "len", "f", "Count", "e", "nt", "code", "base", "counter", "z", "l", "found", "length", "p", "call"], "_": [" __", "x", " d", "j", " line", " p", " g", " time", " j", "len", " loop", "f"], "a": ["area", "o", "x", "c", "aw", "d", "ab", "ac", "pa", "an", "s", "A", "i", "y", "alpha", "na", "sa", "aa", "u", "va", "oa", "f", "e", "ad", "ca", "ga", "w", "aaa", "ba", "l", "p"], "b": ["eb", "k", "abb", "c", "d", "cb", "ob", "nb", "ab", "B", "bd", "xb", "abs", "s", "rb", "i", "y", "bs", "g", "fb", "aa", "wb", "lb", "u", "e", "f", "bu", "sb", "w", "ba", "l", "v", "bb", "r", "p"]}}
{"code": "def a174(x):\\n\\n    return \"Yes\" if x >= 30 else \"No\"\\n\\ndef main():\\n    x = int(input())\\n    print(a174(x))\\n\\nif __name__ == '__main__':\\n    main()", "target": "371", "substitutes": {"x": ["xp", "input", "xi", "work", "c", "page", "xy", "event", "data", "int", "n", "view", "t", "xxxxxxxx", "id", "test", "y", "tx", "xml", "width", "check", "xxx", "xa", "val", "ax", "xt", "sex", "change", "rx", "ct", "h", "ix", "index", "fx", "number", "ex", "xc", "e", "max", "dx", "f", "code", "X", "xx", "xf", "xes", "content", "w", "z", "v", "m", "xs", "php", "p", "call"]}}
{"code": "n = int(input())\\npair = [1, 1]\\n\\nfor i in range(n - 1):\\n    pair[i % 2] = sum(pair)\\n\\nprint(pair[n % 2])\\n\\n", "target": "152", "substitutes": {"n": ["o", "part", "cn", "k", "x", "j", "c", "d", "nb", "num", "s", "an", "t", "y", "h", "network", "nn", "number", "nr", "u", "size", "N", "f", "nt", "e", "b", "ns", "sn", "no", "q", "w", "z", "l", "v", "m", "r", "nc", "ln", "p", "ne", "count"], "pair": ["part", "grade", "step", "type", "element", "package", "x", "balance", "reference", "cycle", "point", "output", "name", "section", "value", "transfer", " Pair", "double", "list", "array", " pairing", "result", "test", "key", "split", "sort", "phase", "component", "change", "sample", "parent", "channel", "number", "batch", "address", "pre", "code", "match", "pin", "power", "P", "position", "layer", "air", "patch", "length", "order", "p", "group"], "i": ["pi", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "slice", "a", "ie", "pos", "int", "ind", "ini", "ni", "id", "y", "h", "ix", "index", "si", "u", "iu", "e", "I", "f", "end", "b", "z", "qi", "v", "l", "ii", "li", "p"]}}
{"code": "import sys\\nsys.setrecursionlimit(1000000)\\ndef dfs(u):\\n    if(dp[u]!=-1):\\n        return dp[u]\\n    for i in d[u]:\\n        if(dp[i]!=-1):\\n            dp[u]=max(dp[u],dp[i]+1)\\n        else:\\n            dp[u]=max(dp[u],dfs(i)+1)\\n    return max(dp[u],0)\\nfrom collections import defaultdict as dd\\nn,m=map(int,input().split())\\nd=dd(list)\\nfor i in range(m):\\n    u,v=map(int,input().split())\\n    d[u].append(v)\\ndp=dd(lambda: -1)\\nmx=0\\nfor i in range(1,n+1):\\n    if(dp[i]==-1):\\n        dp[i]=dfs(i)\\n    mx=max(mx,dp[i])\\nprint(mx)", "target": "663", "substitutes": {"u": ["U", "auto", "o", "eu", "k", "x", "input", "ul", "su", "c", "tu", "a", "hu", "s", "ui", "t", "id", "y", "h", "ue", "un", "nu", "cu", "iu", "ur", "mu", "f", "e", "us", "b", "uu", "q", "w", "uid", "l", "r", "lu", "ru", "p", "up", "ou"], "i": ["pi", "it", "di", "o", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "yi", "oi", "ri", "a", "ie", "ori", "cli", "int", "ind", "ini", "ui", "ni", "info", "id", "bi", "y", "api", "udi", "ix", "index", "ip", "eni", "si", "iu", "fi", "f", "I", "e", "ti", "mi", "ki", "ai", "z", "p", "qi", "l", "ii", "li", "ei", "ih", "io"], "dp": ["wp", "df", "lp", "tp", "dom", "dt", "dos", "pid", "loc", "di", "pb", "uv", "pg", "db", "dq", "sp", "np", "pd", " p", "data", "da", "vp", "hp", "DP", "pkg", "wd", "project", "password", "dim", "ds", "do", "cp", "dh", "dr", "cm", "dc", "ip", "py", "adr", "projects", "mp", "pp", "mu", "dd", "imp", "dep", "sup", "disc", "mm", "dl", "sh", "pm", "dict", "dm", "dn", "params", "jp", "deb", "dat", "p", "bp", "gp", "fp"], "n": ["o", "k", "x", "j", "c", " fn", " N", "nb", "name", " p", "a", "num", "s", "t", "y", "min", "g", "h", "network", "nu", "net", "f", "e", "b", "ns", "no", "q", "w", "z", "l", "r", "nc", "ln", "p", "N"], "m": ["o", "mc", "k", "x", "j", "c", "nm", "s", "num", "mr", "t", "y", "mn", "h", "ms", "e", "f", "mu", "b", "mi", "sm", "mm", "z", "dm", "l", "r", "M", "p"], "d": ["df", "di", "o", "dt", "D", "x", "db", "c", "pd", " p", "data", "nd", "bd", "da", "s", "list", "t", " dd", "g", "fd", "ds", "dh", "do", "dc", "f", "dd", "xd", "e", "b", "vd", "dl", "dict", "dm", "z", "dn", "l", "cd", "dat", "p"], "v": ["o", "k", "ve", "x", "j", "uv", "c", "value", "vs", "vt", "s", "y", "g", "val", "tv", "h", "iv", "va", "f", "e", "b", "q", "V", "w", "sv", "z", "vol", "l", "r", "p"], "mx": ["wm", "loc", "mc", "xp", "x", "mac", "mic", "mos", "fm", "np", "large", "vm", "rm", "mod", "nz", "mr", "az", "weight", "y", "mn", "xml", "na", "min", "ax", "dim", "ms", "rx", "md", "ml", "cm", "py", "fx", "main", "null", "nr", "mp", "mu", "max", "my", "ns", "mm", "dl", "pm", "delay", "dm", "module", "mean", "lc", "complex", "MX", "bp", "dq", "km"]}}
{"code": "N = int(input())\\n\\na = list(map(int, input().split()))\\n\\nodd_count = 0\\nfour_count = 0\\n\\nans = 'Yes'\\n\\nfor i in a:\\n    if i % 2 == 1:\\n        odd_count += 1\\n    if i % 4 == 0:\\n        four_count += 1\\n\\nif len(a) % 2 == 0:\\n    if odd_count > four_count:\\n        ans = 'No'\\nelse:\\n    if odd_count <= four_count or len(a) == odd_count + four_count and odd_count -1 <= four_count:\\n        pass\\n    else:\\n        ans = 'No'\\n\\nprint(ans)\\n", "target": "612", "substitutes": {"N": ["II", "S", "c", "R", "nb", "name", "B", "n", "nz", "A", "L", "G", "Num", "alpha", "na", " n", "number", "nt", "I", "Count", "C", "Na", "no", "P", "O", "M", "F"], "a": ["area", "o", "at", "sta", "input", "c", "ar", "ac", "wa", "ab", "art", "int", "n", "args", "all", "s", "an", "array", "A", "fa", "da", "y", "alpha", "na", "sa", "en", "ana", "span", "aa", "la", "u", "e", "f", "b", "am", "ca", "ai", "w", "ta", "asa", "aaa", "ae", "ba", "l", "ada", "p", "audio", "count", "au"], "odd_count": ["oddp2", "odd_length", " oddpcount", " odd_code", " odd_sum", "odd33cache", "odd_num", "odd00cond", "odd_code", " odd_id", " odd_width", "last00count", "last00length", "no_path", "odd67sum", "no_match", "odd2count", " oddp2", "three_sum", "odd2cache", "last00type", " odd_2", "last00cond", "odd_width", "odd67path", "odd99match", "odd99num", "oddaccode", "three67match", "odd99sum", "oddpcode", "odd_match", "oddacid", " odd_length", "oddpcount", "last_count", "odd67length", "last_cond", "odd_path", "odd67num", "three_match", "odd_sum", "odd_type", "odd67cond", "odd00count", "oddacsum", "last_length", " odd_cache", "odd_2", "odd00type", "three67sum", "odd_id", "oddaccount", "odd99count", " odd_type", "odd33width", "odd_cache", "oddplength", "odd2type", "odd2width", " oddpcode", "odd67type", "no_sum", "three67num", "odd33count", "odd67match", "three_count", "odd33type", "odd_cond", "odd00length", "odd67count", "last_type", " oddplength", "three67count", "three_num", "no_count"], "four_count": ["fourf32", "four_Count", "four_cache", "fourth_offset", " four__cache", "four_c", "seven_len", "four67count", " four__count", "four_32", "four__length", " four_length", "four67length", "four_length", "four_sum", "four67size", "four_col", "fourth_count", "sevenflen", "seven_sum", "fourflen", "four_size", "sevenfsum", " four_limit", "four__cache", "sevenf32", "four67group", " four__length", "seven_32", " four_group", "four67col", "fourth_Count", "four_offset", " four_size", "four_code", "four_limit", "four_group", "four_call", "fourth_code", "four_len", "sevenfcount", "seven_count", "four__count", "four67limit", " four_cache", "fourfcount", "fourfsum"], "ans": ["ls", "anus", "san", "aning", "nas", "ras", "aos", "ases", "ars", "ants", "aid", "ens", "flags", "an", "s", "ads", "anc", "ats", "ents", "ams", "ians", "sk", "na", "os", "anas", "ds", "ids", "ks", "ana", "span", "vals", "can", "anes", "AN", "cas", "aned", "leans", "atan", "ANS", "ann", "anges", "lan", "ain", "lang", "aces", "ano", "ays", "annels", "han", "yes", "eps", "aus", "ons"], "i": ["ik", "pi", "it", "o", "iw", "k", "x", "xi", "j", "c", "ait", "ci", "d", "ipp", "ins", "int", "ind", "n", "s", "t", "ni", "bi", "id", "y", "on", "index", "ip", "multi", "ach", "si", "il", "u", "iu", "f", "I", "e", "b", "ti", "ai", "ae", "z", "v", "l", "ii", "ic", "m", "ei", "li", "ih", "p", "count"]}}
{"code": "n = int(input())\\nroom_list = [[[0 for i in range(10)] for j in range(3)] for k in range(4)]\\nfor i in range(n):\\n    b, f, r, v = map(int, input().split())\\n    room_list[b - 1][f - 1][r - 1] += v\\n\\noutput =[]\\nfor i in range(4):\\n    for j in range(3):\\n        output = list(map(str, room_list[i][j]))\\n        print(\" \" + \" \".join(output))\\n    if i < 3:\\n        print(\"#\" * 20)", "target": "703", "substitutes": {"n": ["o", "x", "c", "d", "nb", "s", "num", "t", "ni", "y", "g", "h", "nn", "number", "u", "nt", "e", "ns", "no", "q", "w", "z", "l", "m", "nc", "p", "ne", "N"], "room_list": ["roomlistbase", "rowliststack", "room_block", "room__list", "room_part", "room_l", "room_stack", "row_name", "rooms_block", "room_name", "rowlistlist", "rooms_diff", "rowlistbase", "roomliststack", " room_base", "rooms_part", "rooms_list", " room_call", " room_l", "room_diff", "roomlistname", "row_stack", "room_call", "room__base", "roomlistlist", "row_base", "row_list", "room__name", "rowlistname", "room_base", "room__stack"], "i": ["pi", "it", "o", "di", "ji", "x", "xi", "c", "ci", "d", "a", "io", "ie", "int", "ind", "num", "ui", "ni", "bi", "id", "y", "on", "g", "h", "index", "ip", "multi", "si", "u", "iu", "I", "ti", "e", "ai", "z", "qi", "l", "ii", "li", "m", "p"], "j": ["kj", "ji", "o", "js", "x", "d", "ri", "ie", "ind", "J", "y", "g", "h", "ij", "bj", "job", "jl", "u", "ja", "je", "e", "jj", "rev", "im", "q", "dj", "z", "jp", "jam", "l", "m", "str", "fr", "ii", "p", "uj"], "k": ["kj", "ik", "it", "ji", "ke", "kk", "c", "d", "a", "ie", "get", "g", "ij", "ks", "km", "u", "ja", "e", "ki", "q", "ai", "z", "p", "ka"], "b": ["o", "x", "c", "d", "nb", "a", "ab", "bh", "B", "s", "t", "rb", "y", "body", "g", "h", "gb", "fb", "wb", "u", "lb", "e", "sb", "q", "w", "z", "l", "m", "p"], "f": ["o", "fs", "field", "x", "c", "d", "a", "fl", "F", "s", "t", "range", "rf", "y", "g", "fd", "h", "sf", "u", "e", "q", "w", "z", "l", "m", "p"], "r": ["o", "x", "c", "R", "d", "a", "s", "t", "rb", "range", "y", "g", "h", "pr", "u", "e", "q", "w", "z", "l", "m", "p", "sr"], "v": ["o", "x", "uv", "c", "d", "a", "value", "vv", "s", "t", "y", "g", "val", "h", "version", "u", "e", "q", "V", "w", "sv", "z", "l", "m", "p"], "output": ["unit", "string", "type", "o", "exit", "control", "out", "input", "respond", "response", "page", "left", "four", "generation", "data", "section", "format", "expression", "document", "all", "list", "environment", "config", "result", "display", "put", "key", "wave", "prefix", "width", "operation", "version", "image", "network", "console", "header", "number", "write", "sequence", "dot", "model", "production", "message", "blast", "Output", "summary", "content", "dict", "example", "external", "text", "block", "letter", "generated"]}}
{"code": "N, K = map(int, input().split())\\nA = [-1] * (N+1)\\nfor i in range(K):\\n  d_list = int(input())\\n  B = input().split()\\n  B = [int(x) for x in B]\\n  for i in range(1, N+1):\\n    if i in B:\\n      A[i] = 1\\ncount = 0\\nfor i in range(1, N+1):\\n  if A[i] == -1:\\n    count += 1\\nprint(count)", "target": "252", "substitutes": {"N": ["ND", "Node", "NA", "D", "S", "k", "Net", "R", "NS", "E", "NC", "Ns", "T", "n", "W", "Y", "L", "G", "Wh", "Len", "Num", "Ni", "Part", "NB", " n", "Size", "NN", " Ne", "No", "Q", "Band", "Count", "I", "X", "C", "Na", "Ne", "V", "P", "Nat", "O", "H", "M", "F", "Z"], "K": ["U", "KR", "D", "k", "S", "Max", "R", "SK", "E", "T", "W", "J", "Y", "OK", "G", "NK", "KK", "Mask", "Q", "Work", "PK", "X", "C", "V", "P", "KN", "Sk", "Key", "KS", "O", "H", "M", "F", "Z"], "A": ["As", "U", "NA", "D", "S", "Alpha", "a", "CA", "All", "At", "Array", "Y", "AD", "G", "AM", "L", "Ab", "HA", "AP", "Average", "Ar", "Count", "I", "AA", "X", "C", "AST", "V", "P", "AF", "API", "AB", "AC", "M", "Input", "F", "LA"], "i": ["pi", "it", "o", "ji", "di", "iw", "k", "xi", "j", "c", "gi", "ci", "d", "a", "io", "ie", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", "key", "index", "ip", "si", "u", "iu", "fi", "e", "I", "ti", "f", "b", "ai", "z", "qi", "l", "v", "ii", "li", "ei", "p"], "d_list": ["id_index", "id_l", "id_id", "id_list", "d_id", "d_l", "d_index"], "B": ["U", "Two", " b", "D", "S", "BS", "BF", "R", "E", "BB", "T", "UB", "W", "J", "Y", "G", "L", "NB", "BA", "BD", "BI", "Q", "Bs", "DB", "WB", "I", "b", "X", "C", "V", "P", "BC", "AB", "O", "H", "M", "F", "Z"], "x": ["k", "xp", "xi", "j", "c", "d", "xy", "a", "data", "int", "xb", "num", "t", "id", "y", " X", "xxx", "xa", "ax", "h", "xe", "ix", "index", "number", "ex", "xc", "u", "f", "e", "max", "dx", "b", "X", "xx", "xf", "wx", "q", "w", "z", "v", "xs", "p"], "count": ["part", "type", "k", "err", "c", "d", "sum", "nb", "a", "data", "start", "diff", "int", "ind", "n", "num", "depth", "list", "array", "info", "weight", "id", "y", "key", "split", "test", "val", "index", "number", "Count", "nt", "f", "code", "base", "child", "counter", "z", "add", "l", "found", "length", "order", "p", "rank"]}}
{"code": "n,m=map(int,input().split())\\na=[0]+list(map(int,input().split()))\\na[0]%=2\\nfor i in range(n):\\n\ta[i+1]+=a[i]\\n\ta[i+1]%=m\\na.sort()\\nans=0\\ncnt=1\\nfor i in range(n):\\n\tif a[i]==a[i+1]:\\n\t\tcnt+=1\\n\telse:\\n\t\tans+=cnt*(cnt-1)//2\\n\t\tcnt=1\\nans+=cnt*(cnt-1)//2\\nprint(ans)", "target": "23", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "name", "s", "an", "num", "t", "y", "g", "h", "nn", "nan", "u", "size", "net", "e", "f", "nt", "b", "ns", "sn", "q", "z", "l", "v", "nc", "p", "ne", "N"], "m": ["ma", "mini", "area", "o", "mc", "j", "c", "d", "all", "num", "s", "t", "man", "y", "g", "dim", "ms", "span", "u", "mu", "e", "f", "mat", "b", "am", "mi", "mm", "mass", "w", "z", "dm", "v", "l", "r", "M", "p"], "a": ["ma", "area", "o", "x", "input", "c", "ar", "d", "ama", "ac", "data", "pa", "mA", "all", "ata", "an", "s", "array", "A", "fa", "y", "alpha", "sa", "ana", "ia", "aa", "la", "u", "va", "f", "e", "b", "am", "ca", "ad", "ora", "ga", "ai", "ae", "z", "ba", "aaa", "ea", "ada", "aj", "ao", "eta", "l", "p", "au"], "i": ["mini", "pi", "di", "o", "uri", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "io", "ie", "start", "int", "ind", "ini", "ui", "ni", "info", "id", "y", "bi", "h", "ix", "index", "multi", "eni", "si", "u", "iu", "e", "I", "ti", "f", "b", "mu", "mi", "im", "ai", "z", "qi", "l", "v", "ii", "li", "p"], "ans": ["auto", "ls", "anus", " averages", "nas", "ins", "ases", "ations", "ars", "ants", "ss", "aid", "amps", "ens", "an", "s", "ads", "anc", " means", "ats", " spans", "cs", "outs", "ents", "anon", "ams", "sk", "atches", "na", "anas", "ds", "ks", "nn", "span", "ana", "can", "ism", "AN", "cas", "leans", "aned", "anne", "ANS", "ann", "lan", "ns", "ands", "es", "ions", "ani", "aces", "ays", "mean", "eps", "aus", "ons", " ads"], "cnt": ["lcount", "Cnd", "rcNT", "cno", "CNT", "acnn", "ecnd", "acct", "lcnn", " cnd", "lcnt", " cno", "ecrt", " cpt", "ecpt", "ecno", "lcpt", "lcNT", "rcnn", "lcrt", "lcno", "acount", "ecount", "cnd", "pct", "cnn", "acnt", "Crt", "acpt", "ecct", "Cnn", "ecnn", "Cpt", "ecnt", "acNT", "cnc", "lcct", "ecnc", "cct", "Cnt", "Count", "cNT", "prt", " cnc", "rcnc", "Cct", " count", " cnn", "pnt", "lcnc", "rcnt", " crt", "pount", "cpt", " cct", "crt", " cNT", "count"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nN,M,K=list(map(int,input().split()))\\nfor iN in range(N+1):\\n    for iM in range(M+1):\\n        tmp = (N-iN)*(iM)+(iN)*(M-iM)\\n        if tmp == K:\\n            print('Yes')\\n            exit()\\nprint('No')\\n", "target": "92", "substitutes": {"input": ["type", "string", "element", "out", "param", "argument", "raw", "output", "PUT", "data", " Input", "format", "expression", "echo", "submit", "int", "instance", " IN", " output", "view", "option", "num", "list", "array", "config", "enter", "IN", "keep", "radio", "sample", "source", "request", "IO", " inputs", "fn", "help", "reader", "select", "accept", "conf", "Input", "comment", "exec", "temp", "form", "method"], "N": ["U", "NA", "D", "S", "R", "NS", "NL", "NC", "NE", "Ns", "T", "n", "J", "W", "Y", "Ni", "L", "G", "Num", "SN", "CNN", "NT", "NM", " n", "Size", "NW", "NN", "No", "I", "X", "NO", "C", "NI", "Ne", "NUM", "Na", "RN", "V", "OS", "P", "Mo", "KN", "O", "H", "F", "Z"], "M": ["U", "MO", "LM", "D", "S", "R", "E", "FM", "B", "OM", "T", "W", "PM", "J", "Y", "A", "L", "AM", "G", "MU", "Mass", "DM", "NM", "MN", "Q", "ME", "MON", "I", "X", "C", "MA", "MAN", "JM", "MH", "V", "P", "MM", "Mo", "MIN", "MX", "m", "O", "H", "F", "IM", "Z"], "K": ["U", "KI", "KR", "k", "S", "SK", "E", "KY", "MK", "KT", "KE", "T", "W", "J", "Y", "OK", "NK", "KK", "Q", "PK", "X", "C", "V", "P", "MC", "KA", "KN", "Sk", "KS", "O", "H", "KC", "F", "Z"], "iN": ["iniN", " iI", "multiM", "xiNi", "multiU", " iNi", "multiN", "iuI", "ciX", " iP", "iNi", "multiX", "ciM", "xiI", "iP", "iniU", "iI", "xiX", "iniP", " iU", "iX", "xiU", "ciN", "ciU", "xiN", "iuM", "iU", "xiP", "xiM", "iuN", "iniM", "iuNi"], "iM": ["iR", "piN", "intP", "inP", "piU", "intU", " iP", "inN", "IN", "inU", "piR", "intN", "iP", " iU", "xiU", "xiN", " iR", "iU", "IR", "xiP", "xiM", "inM", "piM", "IU", "IM", "intM"], "tmp": ["tp", "part", "Temp", "ott", "su", "kk", "sp", "np", "nm", "tc", "nb", "copy", "ot", "TB", "opp", "t", "cmp", "alpha", "cp", "fake", "treatment", "mp", "nom", "nt", "obj", "adj", "stuff", "sup", "term", "mm", "wx", "emp", "yy", "v", "bb", "txt", "now", "MP", "p", "temp", "fp"]}}
{"code": "n,m = map(int, input().split())\\na = [input() for _ in range(n)]\\nb = [input() for _ in range(m)]\\n\\nflag = False  \\nfor i in range(n-m+1):\\n    #flag = True\\n    for k in range(n-m+1):\\n        flag=True#\u3053\u3053\\n        for j in range(i,i+m):\\n            #if i==k==3:\\n            #    print(a[j][k:k+m],b[j-i],a[j][k:k+m]==b[j-i],flag)\\n            if a[j][k:k+m]!=b[j-i]:\\n                flag = False\\n                break\\n        if flag:\\n            break\\n    if flag:\\n        break\\n#print(i,k,flag)        \\nprint(\"Yes\" if flag else \"No\")\\n", "target": "483", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "d", "nb", "name", "num", "an", "s", "y", "g", "h", "network", "nn", "un", "nu", "norm", "u", "net", "f", "e", "ns", "no", "w", "z", "l", "v", "zn", "ln", "p", "ne", "N"], "m": ["o", "k", "x", "j", "c", "d", "num", "s", "range", "t", "y", "mn", "machine", "g", "h", "ms", "ym", "cm", "u", "f", "e", "mu", "mi", "mm", "w", "z", "v", "l", "r", "M", "p"], "a": ["area", "o", "x", "c", "ar", "ab", "ac", "af", "an", "s", "array", "A", "y", "alpha", "sa", "aa", "f", "e", "ad", "ca", "ae", "w", "ba", "l", "p", " A"], "_": ["out", "x", "d", "__", "all", "s", "non", "___", "val", "f", "of", "place", "ing"], "b": ["o", "c", "d", "ab", "ac", "B", "bc", "bd", "bi", "y", "g", "fb", "bin", "u", "e", "f", "ad", "sb", "z", "ba", "l", "v", "bb", "p"], "flag": ["log", "sy", "bo", "x", "bug", "start", "af", "mask", "int", "ind", "an", "id", "sa", "bl", "bg", "bit", "f", "ad", "status", "q", "w", "z", "p", "Flag", "rc", "count"], "i": ["x", "j", " I", "ind", " py", "I", " o", "p"]}}
{"code": "N=int(input())\\nS=input()\\nans=0\\nfor i in range(1000):\\n    one=str(i//100)\\n    two=str((i%100)//10)\\n    three=str(i%10)\\n    f1,f2,f3=False,False,False\\n    ptr=0\\n    for j in range(ptr,N-2):\\n        if S[j]==one:\\n            f1=True\\n            ptr=j+1\\n            break\\n    if f1:\\n        for j in range(ptr,N-1):\\n            if S[j]==two:\\n                f2=True\\n                ptr=j+1\\n                break\\n        if f2:\\n            for j in range(ptr,N):\\n                if S[j]==three:\\n                    f3=True\\n                    ans+=1\\n                    break\\nprint(ans)", "target": "756", "substitutes": {"N": ["Node", "Pos", "D", "Max", "Net", "R", "NL", "nb", "B", "Bi", "Ns", "T", "n", "J", "Sn", "Not", "Ni", "L", "Wh", "Len", "Num", "Part", "Power", "CNN", "NT", " n", "Size", "NN", "No", "Length", "I", "C", "NI", "Ne", "Na", "Four", "V", "In", "P", "One", "K", "Nat", "NP", "O", "M", "F", "End"], "S": ["SE", "Spec", "SH", "SO", "GS", "oS", "SS", "Sync", "R", "NS", "SK", "RS", "Sample", "TS", "Sing", "T", "System", "n", "J", "Si", "SI", "s", "Sn", "Source", "A", "G", "L", "SR", "Sa", "SN", "St", "ST", "self", "PS", "si", "SC", "Sign", "I", "Socket", "CS", "SU", "C", "Sc", "Ps", "Es", "Series", "V", "Sl", "P", "OS", "Cs", "SP", "Service", "Spe", "H", "M", "se", "F", "FS", "Set"], "ans": ["offs", "parts", "x", "anus", "san", "anned", "nas", "ak", "ins", "reads", "a", "ars", "ants", "anders", "amps", "n", "flags", "args", "an", "s", "ads", "A", "cs", "points", "ents", "ams", "oss", "sk", "cases", "na", "os", "breaks", "blocks", "ips", "ana", "ks", "span", "can", "lines", "AN", "aned", "anne", "ANS", "I", "ann", "ps", "ns", "ushes", "ions", "ai", "aces", "P", "types", "sim", "eps", "p", "aus", "ons", "pointers"], "i": ["ik", "pi", "it", "ji", "o", "uri", "mini", "k", "x", "input", "c", "ci", "yi", "oi", "a", "io", "ie", "int", "ind", "n", "J", "ini", "ui", "id", "y", "ij", "ib", "ix", "index", "jl", "ip", "eni", "si", "u", "iu", "e", "je", "I", "f", "b", "mi", "IJ", "ai", "z", "qi", "v", "jp", "ii", "li", "m", "p"], "one": ["first", "you", "plus", "off", "down", "many", "back", "only", "eight", "n", "single", "five", "s", "y", "zero", "we", "self", "once", "u", "end", "none", "so", "other", "child", "no", "One", "nine", "power", "be", "less", "cross", "ones", "se", "he", "hello", "up", "few"], "two": ["note", "Two", "o", "done", "plus", "sci", "low", "to", "many", "left", "four", "lo", "diff", "eight", "second", "both", "five", "double", "zero", "floor", "multiple", "beta", "number", "multi", "follow", "e", "none", "other", "six", "nine", "equal", "minus", "ii", "li", "another", "seven", "letter"], "three": ["step", "plus", "ago", "square", "d", "down", "four", "fourth", "thirds", "eight", "five", "Three", "zero", "fif", "division", "sharp", "quad", "odd", "once", "dollar", "fifth", "critical", "none", "third", "power", "nine", "straight", "minus", "right", "seven"], "f1": ["cf2", "p3", "fone", "F2", "pone", "cone", "F1", "cfone", "c1", "Fone", "cf1", "c2", "c3", "p2", "cf3", "F3", "p1", " fone"], "f2": ["df0", "fsecond", "sf0", " f62", "sf1", "F2", "if62", "df2", "of1", " ftwo", "ffsecond", "of52", "ff0", "dfsecond", "F1", "f0", "if52", "ftwo", "Ftwo", "of2", "fftwo", "sf2", " fsecond", " f0", "sftwo", " f52", "F0", "ff2", "f52", "f62", "if2", "if1", "of62", "dftwo"], "f3": ["form4", "form1", "formthree", "sf1", "of1", " f15", "Fthree", "f15", "sf3", "f4", "F1", "of15", "sf15", "F4", "sfthree", "fthree", " f4", "of3", "ofthree", "F3", "form3", " fthree"], "ptr": ["cur", " src", "tp", "loc", " pt", "kn", "x", "tr", " pointers", " offset", "ctx", "point", "pair", "inst", "pend", "start", "pos", "tips", "src", "ind", "ff", "pull", "Ptr", "buf", " tr", " addr", "cmp", "pointer", " pad", "push", "ij", "xt", "offset", " trunk", "ctr", "dr", "index", "pr", "pad", "req", "char", "br", "Po", "f", "address", "obj", " pointer", "prot", "tip", "pl", "pt", "IJ", "sh", "ep", "eger", "ref", "jp", "length", "fr", "p", "addr", "pointers", "fp"], "j": ["note", "ji", "o", "js", "part", "k", "jen", "x", "c", "d", "ijk", "ie", "int", "ind", "n", "J", "jit", "ch", "syn", "t", "y", "h", "ij", "bj", "job", "jl", "jo", "br", "u", "ja", "f", "je", "jet", "end", "b", "jj", "e", "obj", "code", "adj", "pt", "q", "z", "v", "jp", "aj", "l", "str", "r", "li", "jing", "jam", "p", "uj"]}}
{"code": "s=input();print(\"YNeos\"[s!=s[::-1]::2])", "target": "289", "substitutes": {"s": ["ls", "services", "string", "fs", "o", "S", "ssl", "input", "c", "d", "ins", "ses", "a", "data", "session", "start", "submit", "n", "args", "t", "suff", "strings", "i", "y", "g", "h", "ts", "ds", "source", "gs", "lines", "south", "u", "letters", "f", "e", "sym", "b", "ps", "ns", "new", "sb", "l", "less", "v", "r", "m", "p"]}}
{"code": "A, B, C, D = map(int, input().split())\\nans = min(B, D) - max(A, C)\\nif ans < 0:\\n    ans = 0\\nprint(ans)", "target": "146", "substitutes": {"A": ["As", "U", "AR", "S", "a", "CA", "T", "W", "mA", "IA", "Y", "AD", "G", "AM", "L", "Az", "AS", "AY", "AI", "An", "Ar", "AN", "I", "AA", "X", "V", "P", "K", "AF", "API", "AB", "AC", "M", "H", "N", "LA"], "B": ["U", "Big", "R", "E", "LB", "Bi", "BB", "T", "UB", "W", "BE", "Y", "AD", "L", "G", "NB", "BA", "BD", "OB", "BI", "GB", "Bs", "DB", "QB", "WB", "I", "b", "X", "DC", "V", "MB", "P", "BC", "AB", "O", "M", "F", "N"], "C": ["U", "S", "CL", "CD", "c", "R", "E", "CT", "Cons", "T", "W", "Y", "G", "L", "Col", "Con", "Q", "I", "CS", "X", "DC", "V", "P", "CC", "Cs", "K", "BC", "CP", "Ch", "Cu", "AC", "M", "H", "F", "CM", "CE", "N", "Z"], "D": ["ND", "U", "Dou", "CD", "DK", "R", "d", "E", "Do", "Ds", "FD", "T", "Y", "L", "DA", "G", "DX", "Di", "Dir", "DD", "DS", "MD", "Def", "BD", "Q", "DB", "X", "Desc", "DF", "DC", "YD", "V", "P", "K", "DH", "F", "DE", "N"], "ans": ["offs", "ls", "san", "nas", "ins", "ases", "ars", "ants", "amps", "args", "an", "anc", "man", " means", "ats", "outs", "asts", "ents", "anon", "sk", "na", "os", "anas", "ds", "gan", "ks", "nan", "ana", "span", "can", "anes", "cons", "AN", "cas", "aned", "leans", "ania", "ANS", "atan", "activation", "ann", "lan", "anges", "ns", "ani", "aces", "ano", "ays", "annels", "ones", "aus", "ons"]}}
{"code": "import sys\\nimport copy\\nimport math\\nimport bisect\\nimport pprint\\nimport bisect\\nfrom functools import reduce\\nfrom copy import deepcopy\\nfrom collections import deque\\n\\nif __name__ == '__main__':\\n    a = [int(i) for i in input().split()]\\n\\n    if  a[0] + a[1]>a[2]+a[3]:\\n       print(\"Left\")\\n    elif a[0] + a[1]==a[2]+a[3]:\\n        print(\"Balanced\")\\n    else:\\n        print(\"Right\")\\n", "target": "132", "substitutes": {"a": ["ma", "area", "auto", "access", "o", "ha", "sta", "at", "k", "x", "work", "c", "aw", "d", "ama", "ac", "ab", "data", "aux", "pa", "int", "n", "action", "args", "da", "an", "ast", "s", "A", "t", "all", "array", "y", "alpha", "na", "sa", "aa", "la", "u", "va", "active", "oa", "f", "e", "b", "am", "ad", "ca", "ga", "ae", "aaa", "asa", "ba", "l", "ea", "aj", "v", "m", "r", "p", "au"], "i": ["pi", "ji", "o", "k", "x", "xi", "j", "idi", "c", "gi", "ci", "d", "oi", "phi", "io", "ie", "int", "ind", "n", "ini", "bi", "id", "key", "ir", "ij", "si", "iii", "u", "iu", "e", "I", "f", "ti", "q", "ai", "z", "chi", "qi", "v", "l", "ii", "li", "p"]}}
{"code": "N,M = map(int,input().split())\\nX = list(map(int,input().split()))\\nX.sort()\\nY = [X[i] - X[i-1] for i in range(1, M)]\\nY.sort(reverse=True)\\nY = Y[N-1:]\\nprint(sum(Y))", "target": "9", "substitutes": {"N": ["U", "D", "S", "R", "NS", "E", "B", "T", "n", "W", "J", "A", "L", "G", "Num", "NM", " n", "NN", "MN", "Q", "I", "C", "Ne", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "B", "T", "n", "J", "A", "L", "G", "NM", "MS", "MN", "Q", "MON", "I", "C", "V", "P", "MM", "K", "MC", "m", "O", "H", "F", "CM", "Z"], "X": ["U", "Node", "Mine", "D", "S", "ZX", "x", "Sync", "R", "E", "XX", "B", "Data", "T", "List", "J", "Long", "Array", "Value", "A", "L", "G", "PH", "JSON", "Single", "YY", "Content", "IP", "Int", "Ex", "Q", "Left", "I", "XY", "C", "XL", "TX", "Cross", "V", "P", "XP", "K", "MX", "XXX", "H", "IX", "F", "XM", "Z"], "Y": ["U", "NY", "Mine", "MY", "D", "S", "x", "Py", " y", "Sample", "E", "Cy", "XX", "Data", "T", "W", "J", "Long", "Array", "A", "G", "L", "y", "Col", "JSON", "Index", "AY", "Size", "Content", "IP", "YC", "Q", "Year", "I", "XY", "C", "IE", "V", "TY", "P", "Copy", "K", "Ye", "Service", "Sum", "YA", "O", "YL", "YY", "YP", "Z"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "gi", "c", "ci", "ri", "oi", "a", "start", "ori", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", "ij", "ix", "index", "ip", "eni", "si", "u", "iu", "f", "ti", "I", "mi", "hi", "ki", "ai", "z", "qi", "v", "l", "ii", "li", "m", "p"]}}
{"code": "N, K = map(int, input().split())\\nA = list(map(int, input().split()))\\n\\nidx = A.index(1)\\n\\nans = N\\nfor k in range(K + 1):\\n    L = idx - (K - k - 1)\\n    R = (N - 1 - idx) - k\\n    cntL = 0\\n    cntR = 0\\n    while L > 0:\\n        cntL += 1\\n        L -= K - 1\\n    while R > 0:\\n        cntR += 1\\n        R -= K - 1\\n    ans = min(ans, cntL + cntR + 1)\\n\\nprint(ans)\\n", "target": "718", "substitutes": {"N": ["ND", "U", "D", "S", "NS", "E", "NC", "NL", "B", "Ns", "T", "n", "J", "Y", "G", " n", "Size", "NN", "Q", "AN", "I", "X", "C", "V", "P", "O", "H", "M", "F", "Z"], "K": ["U", "KI", "KR", "D", "Ku", "S", "IK", "SK", "E", "B", "KE", "T", "n", "J", "Y", "NK", "G", "KK", "HK", "UK", "AK", "Q", "PK", "I", "X", "C", "V", "P", "KA", "KN", "Sk", "KS", "KC", "H", "M", "O", "F", "Z"], "A": ["As", "U", "NA", "D", "S", "Alpha", "a", "B", "CA", "T", "mA", "At", "Array", "Y", "an", "G", "array", "AD", "alpha", "AS", "SA", "An", "AP", "Ar", "AN", "AA", "X", "App", "C", "V", "P", "API", "AF", "AC", "M", "LA"], "idx": ["startxes", "IdX", "indx", " idy", "startx", "indindex", "idxs", "idX", " idindex", "startxs", "Idxs", "idxes", "midxs", " idj", "midx", "IDxs", "Idindex", "Idxes", "startX", "indy", "IDx", "Idx", "IDX", "Idy", "idindex", " idxs", " idX", "midX", "IDj", "idj", "indX", "idy", "midj", " idxes"], "ans": ["NA", "ls", "Ann", "S", "ANN", "x", "anus", "aning", "ras", "nas", "ins", "a", "ars", "ants", "Ns", "amps", "n", "ens", "an", "anc", "s", " means", " spans", "ats", "cs", "AS", "anon", "CNN", "cases", "na", "anas", "plan", "ds", "ks", "ids", "An", "nan", "NN", "can", "ana", "cons", "AN", "atan", "aned", "ANS", "activation", "ann", "lan", "X", "ns", "es", "features", "ani", "xs", "eps", "aus", "ons"], "k": ["it", "o", "ke", "kk", "j", "c", "d", "kl", "n", "mk", "s", "ch", "i", "id", "sk", "g", "unk", "ok", "ks", "ko", "u", "f", "max", "e", "b", "q", "kw", "z", "l", "v", "r", "m", "p", "km"], "L": ["PL", "UL", "U", "LM", "D", "S", "CL", "LU", "LO", "SK", "E", "LB", "LR", "NL", "Lo", "B", "Ns", "T", "n", "W", "F", "Long", "RL", "Fl", "LI", "G", "IL", "TL", "EL", "OL", "Q", "Li", "X", "XL", "LL", "Lu", "ML", "P", "l", "DL", "O", "H", "LA", "SL", "dL"], "R": ["U", "RC", "GR", "KR", "D", "S", "Rs", "JR", "HR", "RW", "RS", "E", "RR", "B", "RH", "Rh", "DR", "RL", "Y", "SR", "G", "RO", "RP", "RA", "UR", "Q", "ER", "Ra", "X", "MR", "C", "NR", "RN", "V", "P", "RT", "r", "H", "M", "F", "RG"], "cntL": ["cNTl", "countR", "acntR", "countN", "countl", " cntB", "cnRL", " crtL", " crtNL", "cptN", "cNTL", "cntl", "acountN", " cNTl", " crtB", " cNTN", "cNTR", "cntRL", "cptR", " cntN", "cptL", "cctRL", "acntB", " cntl", " crtRL", "cctB", "cctNL", " cntRL", "countL", "acntN", "cntB", "acntL", " cntNL", "crtRL", "crtNL", "acountB", " cNTL", "cNTN", "cNTB", "acountL", "cntNL", "cntN", "countB", "crtN", "acountR", "cnB", "cnNL", "crtl", "cptB", "crtB", "crtL", " cNTB", "cctL", "cnL"], "cntR": ["countR", "countN", "CntB", " cintL", "cctN", " cntr", "countr", " crtL", " cntD", "cctR", " crtr", "CntL", " cintN", "cintL", "crtD", "cintR", "cintD", " crtR", " cntN", "crtR", "cctB", "countL", "CntN", "CntR", "cntB", "countD", "crtr", " cintR", "cctr", "CountL", "cntD", "CountN", " cintD", "CountB", "cintN", "cntr", "cntN", "countB", "crtN", "CountR", " crtN", "crtB", "crtL", "cctL"]}}
{"code": "from collections import deque\\nimport sys\\ndef input():\\n    return sys.stdin.readline().rstrip()\\ndef main():\\n    n = int(input())\\n    G = [[] for _ in range(n)]\\n    for _ in range(n - 1):\\n        a, b, c = list(map(int, input().split()))\\n        a -= 1\\n        b -= 1\\n        G[a].append([b, c])\\n        G[b].append([a, c])\\n    q, k = list(map(int, input().split()))\\n    k -= 1\\n    stack = deque([k, ])\\n    ans = [-1] * n\\n    ans[k] = 0\\n    while stack:\\n        x = stack.popleft()\\n        for (dx, l) in G[x]:\\n            if ans[dx] == -1:\\n                ans[dx] = ans[x] + l\\n                stack.appendleft(dx)\\n    for _ in range(q):\\n        x, y = list(map(lambda x: int(x) - 1, input().split()))\\n        print(ans[x] + ans[y])\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "360", "substitutes": {"n": ["log", "o", "j", "d", "nb", "num", "an", "s", "t", "ni", "i", "g", "en", "h", "network", "nn", "nan", "u", "net", "e", "f", "nt", "ns", "sn", "no", "w", "z", "v", "gn", "m", "r", "p", "ne", "N"], "G": ["U", "GR", "D", "GS", "GN", "R", "Go", "GG", "B", "IG", "GC", " g", "W", "J", "grid", "Ge", "CG", "Y", "AG", "A", "L", "GROUP", "GE", "GU", "Graph", "g", "GA", "PG", "GP", "GT", "GV", "Q", "GB", "GH", "LG", "X", "Group", "C", "GI", "Gate", "FG", "NG", "GF", "V", "P", "K", "Gs", "H", "M", "F", "group", "N"], "_": [" v", "out", " sub", " un", " __", "__", " time", " ip", "all", "non", "___", " j", " f", " url", "ip", " function", " seq", " abs", "f", " block", " non", " count", " mem", " over", "p", "ing"], "a": ["aw", "d", "ar", "ak", "ac", "ab", "af", "da", "an", "s", "A", "fa", "i", "g", "sa", "aa", "u", "va", "f", "e", "ad", "ca", "am", "ga", "ai", "w", "ae", "ba", "aj", "r", "p", "au"], "b": ["mb", "j", "db", "d", "cb", "nb", "ab", "ac", "B", "bc", "s", "rb", "fa", "i", "bs", "g", "h", "ib", "aa", "wb", "lb", "u", "f", "e", "ad", "ca", "sb", "be", "w", "z", "ba", "ae", "v", "r", "bb", "bf", "p"], "c": ["cn", "cy", "d", "cb", "col", "ac", "s", "ce", "ch", "i", "cs", "g", "con", "dc", "cu", "u", "f", "e", "ca", "C", "w", "z", "cr", "lc", "r", "cf", "p", "cl"], "q": ["qt", "j", "d", "int", "ck", "qs", "depth", "ch", "id", "iq", "g", "qa", "h", "query", "ks", "Q", "sq", "u", "f", "max", "e", "qq", "w", "z", "qi", "v", "r", "m", "p", "qu", "dq", "count"], "k": ["o", "ke", "kk", "j", "d", "ak", "ck", "an", "kick", "i", "id", "key", "sk", "g", "unk", "ok", "ks", "kid", "uk", "dk", "u", "e", "f", "max", "ki", "w", "kw", "z", "K", "v", "r", "m", "p"], "stack": ["history", "out", "slice", "d", "left", "tc", "back", "acks", "data", "queue", "scope", "context", "fl", "sl", "ind", "all", "s", "list", "array", "space", "L", "cache", "inc", "i", "loop", "arr", "check", "push", "ack", "pack", "self", "top", "index", "pad", "st", "set", "Stack", "line", "sequence", "parse", "shape", "stage", "store", "pop", "w", "z", "layer", "chain", "v", "ic", "sc", "r", "ace", "fr", "str", "p", "cl", "count"], "ans": ["atts", "anned", "nas", "anks", "acl", "aos", "amps", " spans", "An", "can", "AN", "cas", "aned", "ANS", "ns", "powers", "p", "ras", "als", "ens", "an", "ads", "cs", "ents", "sk", "annot", "na", "anas", "ikes", "ks", "nan", "atan", "lan", "ann", "ani", "groups", "eps", "ls", "san", "umbers", "ations", "ars", "s", "anc", "A", "ats", "anon", "plan", "ds", "ana", "nn", "span", "cons", "ps", "ane", "ands", "es", "ays", " scans", "xs", "ons", "aning", "ins", "ases", "ants", "ops", "rules", "anny", " means", "outs", "ams", "g", "ips", "ions", "ai", "aces"], "x": ["xp", "work", "xi", "hex", "search", "px", "d", "ctx", "xy", "gal", "lex", "int", "ux", "ww", "xb", "ax", "i", "tx", "ph", "key", "xxx", "g", "qa", "yx", "h", "xt", "act", "xa", "rx", "xe", "xxxx", "ix", "fx", "index", "ex", "xc", "u", "f", "e", "X", "xx", "xf", "zx", "wx", "w", "z", "rex", "cross", "v", "xs", "p", "pe"], "dx": ["loc", "dt", "xp", "xi", "px", "su", "dq", "np", "d", "ci", "xy", "ie", "du", "pixel", "ww", "da", "ck", "xb", "depth", "i", "dy", "coord", "xa", "qa", "xxx", "yx", "dim", "ds", "xe", "dh", "dr", "ix", "fx", "dc", "nu", "sq", "ex", "dp", "xc", "foo", "u", "xd", "xx", "wx", "dj", "z", "dn", "cross", "xs", "p", "ld", "zi", "ku"], "l": ["el", "lp", "ls", "o", "j", "lf", "d", "kl", "fl", "sl", "ll", "ly", "L", "i", "g", "h", "jl", "la", "u", "len", "lb", "f", "e", "rl", "pl", "dl", "w", "z", "v", "lc", "m", "li", "lu", "ln", "p"], "y": ["ey", "sy", "ya", "j", "cy", "d", "yi", "ny", "yl", "Y", "t", "i", "yr", "key", "dy", "g", "ay", "py", "yt", "u", "e", "f", "xx", "yy", "z", "v", "m", "p", "vy"]}}
{"code": "N, K = map(int, input().split())\\nA = list(map(int, input().split()))\\nAsum = sum(A)\\n\\ndiv = set()\\nfor i in range(1, int(Asum ** 0.5 + 0.5) + 1):\\n    if Asum % i == 0:\\n        div.add(i)\\n        div.add(Asum//i)\\n\\nans = 1\\nfor d in div:\\n    now = 10 ** 18\\n    R = [a % d for a in A]\\n    R.sort()\\n    Rsum = sum(d - r for r in R)\\n    Lsum = 0\\n    for r in R:\\n        Lsum += r\\n        Rsum -= d - r\\n        now = min(now, max(Lsum, Rsum))\\n\\n    if now <= K:\\n        ans = max(ans, d)\\n\\nprint(ans)\\n", "target": "764", "substitutes": {"N": ["U", "NA", "D", "S", "B", "Ns", "T", "n", "G", "L", "NB", " n", "NN", " Ne", "Q", "C", "NI", "DC", " D", "V", "P", "O", "H", "M", "F", "Z"], "K": ["U", "KR", "D", "k", "Max", "SK", "E", "T", "W", "J", "n", "Y", "G", "KK", "NN", "Q", "PK", "I", "max", "X", "C", " k", "V", "P", "KS", "O", "H", "M", "F", "km", "Z"], "A": ["As", "U", "NA", "D", "S", "E", "Alpha", "B", "CA", "T", "W", "mA", "Array", "Y", "Az", "AM", "L", "AD", "Am", "array", "G", "Part", "Ab", "Ad", "AP", "Ar", "I", "AA", "Ang", "X", "App", "C", "Na", "V", "P", "API", "AB", "Sum", "AC", "M", "H", "F", "LA"], "Asum": ["asom", " Asumm", "AssUM", "ASnum", "Isam", " AsUM", "Atumber", "Amim", "ASUM", "Assum", " Asumber", "Isum", "Asul", "Asnum", "Amumm", " Asom", "Psul", "Assnum", "asum", "Psum", "Amum", "asam", "ASom", "ASum", "Ism", "IsUM", "Atum", "Atumm", "Assom", "Asm", "Atim", "Asom", "Asumm", "ASm", "asnum", "ASul", " Asim", "PsUM", "ASam", "AsUM", "Asumber", "asUM", " Asul", "Asam", "asm", "Asim", "Psom", "Amumber"], "div": ["df", "di", "part", "dom", "D", "c", "rad", "sum", "data", "dev", "mult", "coll", "app", "diff", "n", "num", "adv", "array", "man", "cache", "an", "Array", "arr", "DIV", "alpha", "inner", "min", "dim", "division", "span", "ra", "DI", "br", "u", "e", "max", "rup", "ad", "C", "init", "w", "z", "p", "P", "add", "m", "order", "Div"], "i": ["pi", "di", "o", "x", "xi", "j", "idi", "gi", "c", "yi", "phi", "ie", "start", "ori", "int", "ind", "n", "ini", "ni", "id", "y", "ix", "index", "eni", "si", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "qi", "l", "v", "ii", "li", "m", "ei", "p", "zi"], "ans": ["rs", "ls", "offs", "results", "nas", "ras", "ins", "runs", "olds", "ars", "ants", "amps", "an", "ads", "anc", "forces", "s", "nz", "asts", "cs", "ams", "sk", "na", "os", "anas", "ds", "rows", "ks", "ids", "nan", "ana", "AN", "aned", "leans", "ANS", "dd", "ann", "ad", "lan", "ns", "ands", "ends", "errors", "es", "ani", "ays", "years", "mean", "eps", "ons", "rank"], "d": ["df", "o", "D", "dt", "rd", "k", "x", "c", "Ds", "art", "diff", "nd", "n", "da", "s", "t", " dd", "id", "y", "sd", "gd", "dy", "DD", "dim", "ds", "do", "day", "dc", "days", "u", "f", "dd", "e", "dx", "b", "ad", "ed", "max", "new", " D", "w", "z", "dm", "dn", "l", "v", "str", "m", "order", "p"], "now": ["cur", "df", "auto", " Now", "this", "kk", "after", "aw", "low", "current", "old", "wa", "start", "diff", "nd", "ww", "range", "wd", "today", "gd", "time", "force", " NOW", "we", "ok", "self", "ks", "do", "md", "ow", "day", "next", "then", "row", "last", "size", "NOW", "since", "dd", "max", "mm", "new", "gh", "w", "draw", "rand", "wait", "order", "wh", "Now", "count"], "R": ["U", "rs", "D", "rd", "Rs", "S", "RW", "Ru", "RS", "RD", "RG", "E", "Z", "RR", "B", "RH", "T", "Rh", "W", "Array", "Y", "L", "G", "RO", "RP", "RA", "RB", "ra", "I", "X", "Ra", "C", "V", "w", "P", "RT", "CR", "H", "M", "F", "RM"], "a": ["ma", "area", "o", "k", "x", "c", "ar", "wa", "ac", "art", "pa", "n", "an", "s", "t", "id", "alpha", "sa", "ana", "aa", "u", "f", "e", "b", "ad", "ca", "ai", "ae", "z", "l", "ao", "m", "p", "au"], "Rsum": [" Lstat", " Rsa", "Lmean", "Rsa", "Rmean", "rsa", "RSum", "Lsa", "FSum", " RSum", "rsum", " Rstat", " Rmean", "LSum", "Rstat", " Lmean", "Lstat", "Fsum", "rmean", "Fmean"], "r": ["rs", "rank", "o", "k", "rd", "x", "tr", "j", "c", "er", "ar", "ver", "art", "n", "re", "s", "mr", "t", "rb", "array", "min", "ir", "h", "ret", "pr", "rw", "ra", "br", "u", "ur", "ear", "rel", "f", "e", "nr", "run", "b", "q", "w", "z", "ref", "l", "v", "cr", "m", "fr", "ru", "order", "p", "kr", "rc"], "Lsum": ["RLum", "Lmiss", "RLsum", "Lmean", "Fmiss", "Rum", "Ruse", "lSum", "RSum", " Lmiss", " Luse", "FSum", "Lum", "RLSum", "Dmiss", "Luse", "luse", "DSum", "lum", "LSum", "Dmean", " LSum", "lsum", "Dsum", " Lmean", "Fsum", "Fmean"]}}
{"code": "a, b = (int(i) for i in input().split())  \\n\\nif a == b: \\n    print(-1)\\nelif a < 0 or b < 0: \\n    print (-1)\\nelse:\\n    for i in range(1, int(10 ** 10 / a)):\\n        if a * i % b != 0:\\n            print(a * i)\\n            exit()\\n        else:\\n            continue\\n    print(-1)\\n", "target": "396", "substitutes": {"a": ["ma", "area", "auto", "sta", "anta", "x", "c", "aw", "d", "ama", "ac", "ab", "wa", "af", "pa", "n", "int", "da", "mA", "an", "A", "fa", "y", "alpha", "na", "qa", "sa", "ia", "la", "aa", "u", "va", "f", "e", "am", "ca", "ad", "ga", "ai", "ae", "asa", "ba", "aaa", "ea", "aj", "p", " A", "count", "au"], "b": ["eb", "k", "mb", "abb", "x", "j", "c", "db", "d", "nb", "ab", "ac", "B", "bd", "int", "n", "xb", "abs", "s", "num", "rb", "A", "bi", "y", "bs", "bar", "fb", "ib", "aa", "wb", "lb", "u", "f", "e", "base", "sb", "be", "w", "z", "ba", "l", "v", "bb", "bf", "r", "p", "bp"], "i": ["pi", "di", "part", "o", "ji", "k", "x", "xi", "j", "c", "gu", "ci", "d", "yi", "phi", "ri", " I", "ie", "int", "ind", "n", "s", "ini", "bi", "id", "y", " j", "index", "ip", "si", "u", "iu", "e", "f", "I", "ti", "ai", "z", "qi", "l", "v", "ii", "li", "m", "bb", "p"]}}
{"code": "import sys\\nread = sys.stdin.read\\nreadlines = sys.stdin.readlines\\ndef main():\\n    w, h, x, y = map(int, input().split())\\n    if x == w / 2 and y == h / 2:\\n        print(w * h / 2, 1)\\n    else:\\n        print(w * h / 2, 0)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "607", "substitutes": {"read": ["file", " write", "input", "open", "feed", "d", "reads", "raw", "sub", "only", "data", "sys", "lex", " stream", "long", "re", " print", "i", "wake", "inner", " data", "g", "writ", " reader", "win", "line", "bin", "write", "stream", " Read", "run", "play", "reader", "Read", "load", "select", " reads", " reading", "READ", "str", "r", "io", "method"], "readlines": [" readline", "wdata", " readLine", "inputline", "inputlines", "Readwords", "readline", "Readline", "readinglines", "readingline", "wline", "ReadLine", "wlines", " readwords", "readingLine", "readdata", "inputdata", "readLine", "Readlines", "readingwords", "readwords", " readdata"], "w": ["o", "k", "window", "fw", "work", "c", "aw", "hw", "d", "ws", "a", "wa", "W", "n", "wt", "s", "t", "i", "wd", "width", "sw", "g", "we", "win", "ew", "rw", "u", "f", "e", "max", "b", "q", "sh", "z", "v", "l", "m", "r", "wh", "p"], "h": ["o", "ha", "k", "j", "c", "d", "a", "wa", "n", "W", "s", "t", "i", "ph", "index", "u", "f", "e", "max", "hr", "b", "hi", "q", "sh", "z", "v", "l", "m", "r", "H", "p", "hs"], "x": ["o", "k", "ya", "c", "d", "xy", "a", "wa", "n", "W", "ww", "s", "t", "i", "on", "g", "ax", "rx", "index", "u", "f", "e", "max", "b", "X", "xx", "z", "v", "l", "m", "xs", "p"], "y": ["o", "sy", "k", "j", "c", "d", "col", "a", "n", "s", "Y", "ye", "t", "i", "id", "dy", "ay", "py", "f", "e", "b", "hi", "q", "yy", "z", "v", "l", "m", "p", "vy"]}}
{"code": "def main():\\n    N = int(input())\\n    p = []\\n    for i in range(N):\\n        p.append(int(input()))\\n    p.sort()\\n    last = p[-1]\\n    print(sum(p)-last+(last//2))\\nmain()", "target": "259", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "NC", "NE", "B", "Ns", "T", "n", "J", "Y", "Ni", "L", "G", "Num", "NT", "Size", "NN", "No", "Q", "I", "X", "C", "NI", "Ne", "NG", "V", "OS", "P", "K", "O", "M", "F", "Z"], "p": ["lp", "pi", "tp", "o", "part", "k", "first", "x", "j", "c", "sp", "np", "d", "prev", "point", "data", "a", "pos", "n", "s", "list", "po", "t", "bp", "cache", "y", "cp", "post", "py", "ip", "u", "pre", "e", "f", "pp", "b", "ps", "w", "P", "params", "l", "v", "jp", "r", "m", "ap", "pe"], "i": ["k", "x", "j", "gi", "c", "d", " I", "start", "ind", "num", "id", "y", "pri", " il", "h", "index", "ip", "il", "u", "iu", "pp", "f", "I", "q", "z", "l", "li", "ne"], "last": ["est", "k", "first", "full", "sync", "best", "current", "cycle", "left", "old", "value", "latest", "n", "depth", "First", "id", "key", "total", "count", "Size", "self", "period", "parent", "next", "Last", "always", "final", "size", "max", "one", "code", "base", "worst", "child", "no", "private", "P", "style", "length", "dist", "now", "prev", " Last", "recent"]}}
{"code": "# A - Restricted\\n# https://atcoder.jp/contests/abc063/tasks/abc063_a\\n\\nA, B = map(int, input().split())\\n\\nresult = A + B\\nif result >= 10:\\n    print('error')\\nelse:\\n    print(result)\\n", "target": "202", "substitutes": {}}
{"code": "L = int(input())\\n\\na = float(L/3)\\nb = float(L/3)\\nc = float(L / 3)\\n\\nprint(a * b * c)", "target": "159", "substitutes": {"L": ["UL", "LM", "D", "CL", "LU", "LO", "VL", "R", "E", "LB", "LR", "NL", "B", "Lo", "List", "T", "FL", "W", "Long", "LI", "G", "IL", "AL", "LP", "EL", "OL", "LOS", "SL", "LV", " l", "BL", "LT", "Li", "dL", "C", "XL", "LL", "Lu", "V", "ML", "l", "DL", "O", "H", "M", "F", "N", "LA"], "a": ["ma", "area", "x", "ar", "ak", "ac", "ab", "aux", "af", "n", "da", "an", "s", "A", "fa", "y", "alpha", "g", "sa", "ia", "aa", "la", "f", "e", "ad", "am", "ca", "ai", "ae", "ba", "ea", "ada", "aj", "bb", "p", "au"], "b": ["eb", "k", "x", "db", "d", "cb", "ob", "ab", "B", "bc", "n", "ub", "bi", "i", "y", "bs", "g", "fb", "ib", "aa", "wb", "u", "lb", "e", "f", "ad", "bu", "sb", "ae", "ba", "l", "v", "bb", "r", "p"], "c": ["k", "x", "cy", "ci", "d", "cb", "col", "ac", "uc", "bc", "B", "n", "s", "cc", "ce", "i", "cs", "y", "ec", "g", "con", "u", "e", "f", "ca", "arc", "C", "w", "z", "l", "v", "cd", "r", "m", "cf", "p"]}}
{"code": "import bisect, collections, copy, heapq, itertools, math, string, sys\\ninput = lambda: sys.stdin.readline().rstrip() \\nsys.setrecursionlimit(10**7)\\nINF = float('inf')\\ndef I(): return int(input())\\ndef F(): return float(input())\\ndef SS(): return input()\\ndef LI(): return [int(x) for x in input().split()]\\ndef LI_(): return [int(x)-1 for x in input().split()]\\ndef LF(): return [float(x) for x in input().split()]\\ndef LSS(): return input().split()\\n\\ndef resolve():\\n    N, M = LI()\\n    ab = [LI_() for _ in range(M)]\\n    ab.sort(key=lambda x: x[1])\\n\\n    # \u533a\u9593\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\\n    ans = 0\\n    # print(ab)\\n    right = -1\\n    for a, b in ab:\\n        if right <= a:\\n            right = b\\n            ans += 1\\n\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "219", "substitutes": {"input": ["empty", "type", "out", "object", "reference", "current", "raw", "local", "answer", "binary", "initial", "progress", "INT", "python", "source", "null", "memory", "example", "temp", "file", "param", "output", "data", "format", "expression", "pixel", "single", "space", "IN", "result", "version", "forward", "error", "default", "include", "wait", "Input", "block", "condition", "unit", "integer", "interface", "point", "argument", "PUT", " Input", "context", "complete", "int", "instance", "list", "array", "config", "i", "image", "request", "index", "ception", "stream", "model", "reader", "inf", "layer", "form", "string", "case", "element", "unknown", "response", "name", "session", "value", "inner", " inputs", "inside", "buffer", "text", "path"], "INF": [" INFIN", "inf", "inF", "INELF", " INELF", "ILf", "ILFIN", " INf", "INf", "ILELF", "inELF", "inFIN", "INFIN", "ILF"], "x": ["xe", "ext", "xp", "xi", "c", "work", "j", "exp", "d", "ctx", "xy", "px", "event", "data", "lex", "int", "n", "plex", "ux", "xb", "num", "ll", "ww", "t", "xxxxxxxx", "i", "id", "y", "xml", "xa", "xxx", "val", "ax", "xt", "xxxx", "sex", "rx", "word", "abc", "ix", "index", "fx", "bit", "ex", "xc", "u", "f", "e", "max", "xd", "b", "X", "xx", "code", "xf", "xes", "wx", "pl", "w", "expl", "z", "rex", "v", "cross", "l", "cent", "m", "php", "xs", "p"], "N": ["U", "D", "S", "R", "NS", "E", "B", "T", "n", "J", "Y", "A", "L", "G", "NM", " n", "MN", "Q", "I", "X", "C", "V", "P", "K", "O", "F", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "B", "T", "W", "n", "J", "Y", "L", "G", "DM", "RM", "NM", "MS", "MN", "Q", "X", "C", "V", "MB", "P", "MT", "MX", "m", "O", "Mi", "F", "CM", "MF", "Z"], "ab": ["Tab", "eb", "mb", "abb", "pb", "ob", "nb", "ac", "app", "rib", "B", "af", "BB", "abs", "ub", "av", "tab", "Ab", "bs", "lab", "hab", "fb", "abc", "fab", "ib", "bl", "atom", "lam", "ABC", "b", "am", "SB", "abl", "AB", "bb", "abi", "ap", "aps"], "_": ["k", "__", "non", "val", "len", "f", "X", "l", "p"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nk, (a, b) = int(input()), tuple(map(int, input().split()))\\nprint('OK' if a <= (b // k) * k else 'NG')", "target": "78", "substitutes": {"input": [" u", "type", "case", "element", "feed", "param", "raw", "output", "data", "argument", " Input", "format", "expression", "submit", "int", "print", "n", " output", "view", "pull", " int", "config", "i", "result", "key", " data", "entry", "keep", " n", "connect", "url", "parent", "request", "source", "error", "but", " inputs", "f", "eval", "reader", "select", "load", " i", "q", "form", "accept", "str", "Input", "comment", "exec", "temp", "arg", "call"], "k": [" sk", "kn", "ke", "work", "j", "c", "x", "kk", "d", "ak", "ac", "int", "n", "ck", "s", "mk", "kick", "i", "y", "key", "sk", "g", " n", "ok", "ks", "uk", "dk", "ko", "u", "ask", "max", "f", "e", "q", "tk", "w", "kw", "z", "K", "p", "v", "m", "km"], "a": ["area", "auto", "o", "x", "j", "c", "aw", "d", "ab", "ac", "wa", "pa", "n", "da", "an", "s", "A", "fa", "i", "y", "alpha", "na", "sa", "aa", "la", "u", "va", "f", "e", "am", "ad", "ca", "ga", "ae", "ba", "aj", "m", "p", "ka"], "b": ["mb", "abb", "j", "c", "d", "ob", "nb", "ab", "B", "n", "s", "rb", "bi", "i", "y", "bs", "bar", "fb", "beta", "wb", "u", "lb", "f", "e", "base", "sb", "w", "l", "v", "m", "bf", "bb", "emb", "p"]}}
{"code": "import sys\\ninput=sys.stdin.readline\\nn=int(input())\\nfrom collections import deque\\nG=[[] for i in range(n)]\\nfor i in range(n-1):\\n    a,b=map(int,input().split())\\n    G[a-1].append(b-1)\\n    G[b-1].append(a-1)\\ncheck=[False]*n\\ncheck[0]=True\\ncheck[n-1]=True\\nf_q=deque([0])\\ns_q=deque([n-1])\\nf_c=1\\ns_c=1\\nwhile not (len(f_q)==0 and len(s_q)==0):\\n    f_n=len(f_q)\\n    for i in range(f_n):\\n        now=f_q.popleft()\\n        for j in G[now]:\\n            if not check[j]:\\n                check[j]=True\\n                f_c+=1\\n                f_q.append(j)\\n    s_n=len(s_q)\\n    for i in range(s_n):\\n        now=s_q.popleft()\\n        for j in G[now]:\\n            if not check[j]:\\n                check[j]=True\\n                s_c+=1\\n                s_q.append(j)\\nif f_c>s_c:\\n    print('Fennec')\\nelse:\\n    print('Snuke')\\n\\n\\n", "target": "435", "substitutes": {"input": ["file", "type", "element", "out", "feed", "param", "down", "raw", "output", "data", " Input", "format", "expression", " H", "echo", "submit", "int", "print", "action", " output", "util", "pull", "view", "array", "config", "enter", "call", "url", "image", "version", "sample", "parent", "source", "request", "error", " inputs", "f", "fn", "exec", "reader", "help", "select", "load", "save", "q", "filter", "accept", "str", "text", "Input", "comment", "until", "utils", "form", "path", "method"], "n": ["o", "k", "x", " size", "c", "d", " N", "nb", " p", "s", "num", "an", "t", "y", "g", "h", " f", " ns", "nl", " l", " c", "u", "size", "f", "nt", "e", "max", "ns", "sn", " count", "no", "q", "w", "nor", "z", " ng", "l", "v", "m", "r", "nc", "p", " NB", "ne", "N"], "G": ["GW", "U", "GR", "D", "GS", "GD", "S", "GN", "R", "E", "GG", "B", "IG", "T", "GC", "Ge", "W", "J", "GM", "GO", "CG", "Y", "A", "L", "GE", "GU", "Google", "Global", "Graph", "g", "GA", "General", "GP", "GV", "Q", "GB", "GH", "LG", "I", "Group", "Gr", "X", "C", "SG", "GI", "Gate", "FG", "GF", "V", "P", "K", "MG", "Gu", "H", "M", "F", "group", "N"], "i": ["pi", "it", "o", "ji", "k", "x", "xi", "c", "gi", "ci", "d", "io", "ie", "int", "ind", "ui", "ni", "id", "iq", "ip", "si", "il", "u", "iu", "e", "I", "ti", "f", "ai", "l", "v", "ii", "li", "ei", "p"], "a": ["k", "x", "c", "aw", "d", "ab", "ac", "da", "an", "s", "A", "y", "alpha", "g", "sa", "aa", "u", "va", "e", "f", "ad", "ca", "ga", "ai", "ae", "w", "z", "ba", "l", "v", "m", "r", "p"], "b": ["o", "eb", "k", "mb", "x", "c", "d", "nb", "ab", "B", "s", "rb", "y", "bs", "g", "h", "fb", "aa", "br", "u", "e", "f", "sb", "w", "z", "ba", "l", "v", "r", "m", "bb", "bf", "p", "two"], "check": ["type", "checks", "guard", "control", "sync", "x", "work", "open", "op", "c", "d", "find", "see", "bug", "complete", "start", "fix", "view", "ck", "pull", "num", "config", "update", "info", "cl", "ignore", "test", "y", "key", "id", "correct", "get", "force", "static", "change", "do", "ok", "Check", "set", "error", "checked", "process", "read", "e", "code", "match", "base", "load", "clean", "lock", "scan", "status", "q", "w", "no", "where", "condition", "style", "wait", "comment", "p", "block", "count", "call"], "f_q": ["of_q", " f_w", " f_p", "s_qu", " f_query", "b_que", "f_qu", "f_f", "b_qs", "of_qs", " f_que", "f_que", "f_p", "f_qs", "b_f", "f_check", "of_check", " f_dq", "f_dq", "f_sq", "f_w", "b_q", "f_query", "of_sq"], "s_q": ["w_q", "w_query", "sdbqu", "s_sq", "s001c", "s_question", "s_qu", "sdbq", "p_core", "servicesdbq", "s_sh", "p_sh", "s__p", "sdbque", "s_p", "servicesdbque", "f_p", "f_qs", "p_q", "s__q", " s_p", "s001sh", "servicesdbquery", "s_query", " s_dq", "services_query", "sdbquery", "s_dq", "s_core", "services_que", "s001core", "s_qs", "w_sh", "servicesdbqu", "f_question", " s_qs", "s_que", "s__dq", "services_qu", "w_sq", "p_c", "services_q", "s__qs", "s001q"], "f_c": ["flexdc", "flexc", " f_dc", "fpyn", "flexn", "f_rc", "flexcache", " f_cache", " f_nc", "f_dc", "fpyq", "f_nc", "fpyc", "fpyrc", " f_rc", "f_cache"], "s_c": ["s_p", "f_f", "salesco", "sJq", "s5p", "s_f", "s5c", "salesn", "s5q", "sJc", "s_co", " s_p", "sJco", "f_sec", "s_sec", "s5n", "sJn", "salesc", "salesq"], "f_n": ["fqnone", "fqsize", "f___n", "facc", "facconn", " f_p", "fold_none", "fold64size", "fold64none", "facp", "f64none", "fold_size", "f___none", "f_p", "f___q", "fold_n", "f_size", "facn", "f64n", "fold_q", "f64size", "fqn", "f_none", "fold64n", "f_conn", "fqq", " f_conn", "f___size", "f64q", "fold64q"], "now": ["cur", "type", "this", "after", "current", "low", "currently", "node", "old", "name", "ck", "range", "id", "key", "force", "ah", "we", "ok", "self", "parent", "ord", "job", "day", "next", "ow", "Now", "jo", "row", "always", "last", "size", "since", "max", "obj", "jj", "before", "code", "load", "so", "new", "where", "aj", "length", "wait", "found", "cf", "order", "group", "here"], "j": ["kj", "note", "o", "ji", "js", "k", "jen", "x", "op", "c", "d", "name", "jc", "ie", "jon", "oj", "J", "ind", "ch", "y", "test", "key", "g", "cell", "ok", "bj", "job", "jl", "next", "jo", "item", "br", "ja", "e", "f", "obj", "je", "jj", "adj", "jet", "gr", "new", "q", "dj", "w", "z", "json", "v", "jp", "aj", "l", "r", "li", "str", "p", "uj"], "s_n": ["services67n", "services67c", "s67n", "p_n", "s67c", "s67q", "services67q", "services_c", "p_o", "p_q", "s_y", "p_c", "s_o", "services67y", "services_n", "services_q", "s67y", "services_y"]}}
{"code": "A,B,C,D=input()\\nif A==B==C or B==C==D:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")\\n", "target": "600", "substitutes": {"A": ["Ac", "As", "Ca", "NA", "S", "ANC", "a", "CA", "T", "mA", "IA", "AD", "Az", "G", "Ab", "Ma", "GA", "Art", "AU", "An", "EA", "Area", "AP", "Ar", "AA", "P", "K", "AF", "AH", "AB", "O", "AC", "AW", "F", "N", "LA"], "B": ["U", "Bu", "EB", " b", "R", "E", "BB", "T", "UB", "W", "BBC", "BE", "Y", "G", "L", "But", "Ab", "NB", "BA", "Blue", "OB", "BI", "Bah", "GB", "Bs", "DB", "QB", "WB", "BER", "CB", "I", "b", "MB", "P", "K", "BC", "AB", "O", "H", "M", "F", "Bur", "N"], "C": ["Ac", "U", "S", "c", "R", "E", "Cy", "CA", "T", "Cos", "W", "Y", "CU", "L", "G", "Cur", "Cl", "Co", "Con", "Q", "CB", "I", "DC", "FC", "P", "CC", "Cs", "CR", "BC", "VC", "O", "Cu", "AC", "M", "H", "F", "CM", "CE", "N"], "D": ["U", "Dou", "S", "CD", "R", "d", "E", "Do", "Ds", "T", "W", "Y", "DP", "L", "G", "Di", "DD", "DM", "Q", "DB", "I", "X", "DC", "P", "K", "H", "M", "DH", "F", "DE", "N", "Z"]}}
{"code": "import sys\\nimport itertools\\n# import numpy as np\\nimport time\\nimport math\\nfrom heapq import heappop, heappush\\nfrom collections import defaultdict\\nfrom collections import Counter\\nfrom collections import deque\\nfrom itertools import permutations\\nsys.setrecursionlimit(10 ** 7)\\n \\nINF = 10 ** 18\\nMOD = 10 ** 9 + 7\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\n# map(int, input().split())\\nMOD = 998244353\\nN, K = map(int, input().split())\\nS = [0] * K\\nfor i in range(K):\\n    l, r = map(int, input().split())\\n    S[i] = (l, r)\\n\\ndp = [0] * (N + 2)\\nacc = [0] * (N + 2)\\ndp[1] = 1\\nacc[1] = 1\\nfor i in range(1, N + 1):\\n    for j in range(K):\\n        li = i - S[j][1]\\n        ri = i - S[j][0]\\n        if ri < 0:\\n            continue\\n        li = max(li, 0)\\n        dp[i] += (acc[ri] - acc[li - 1]) % MOD\\n    acc[i] = (acc[i - 1] + dp[i]) % MOD\\nprint(dp[N] % MOD)\\n", "target": "158", "substitutes": {}}
{"code": "import bisect,collections,copy,itertools,math,string\\nimport sys\\ndef I(): return int(sys.stdin.readline().rstrip())\\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\\ndef S(): return sys.stdin.readline().rstrip()\\ndef LS(): return list(sys.stdin.readline().rstrip().split())\\ndef main():\\n\\n\\n    def prime_factor(n):\\n        lst = []\\n        while n%2 == 0:\\n            n //= 2\\n            lst.append(2)\\n        f = 3\\n        while f**2 <= n:\\n            if n%f == 0:\\n                n //= f\\n                lst.append(f)\\n            else:\\n                f += 2\\n        if n != 1:\\n            lst.append(n)\\n        return lst\\n\\n\\n    a, b = LI()\\n    g = math.gcd(a, b)\\n\\n    prm = prime_factor(g)\\n\\n    ans = len(set(prm)) + 1\\n\\n    print(ans)\\n\\nmain()\\n", "target": "590", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nm", "nb", "s", "num", "an", "t", "ni", "i", "y", "nn", "nu", "u", "e", "nt", "fn", "ns", "pn", "no", "w", "z", "l", "v", "m", "r", "nc", "ln", "p", "ne", "N"], "lst": ["rst", "plst", "plST", "llST", "llst", "List", "elset", " lbl", "ilst", "list", "ilset", "plist", "llbl", "llsts", "lset", "LST", "Lbl", "lST", "lbl", "Lst", "rST", "plstr", "rstr", "elsts", "elstr", " lsts", "ilST", " lST", "lstr", "llstr", "lsts", "ilstr", "Lset", "Lstr", "elST", "rbl", " lstr", "elst", " list"], "f": ["df", "o", "k", "x", "j", "c", "d", "fl", "af", "all", "s", "t", "i", "y", "fe", "fd", "h", "u", "len", "e", "new", "inf", "w", "z", "p", "of", "l", "v", "m", "r", "bf", "F", "count"], "a": ["at", "sta", "x", "c", "ar", "d", "ac", "ab", "af", "da", "an", "s", "A", "fa", "i", "alpha", "na", "sa", "abc", "aa", "la", "u", "ad", "ca", "am", "ga", "ai", "ae", "ba", "l", "ao", "m", "p", " A"], "b": ["o", "eb", "mb", "abb", "j", "c", "d", "ob", "ab", "B", "xb", "s", "rb", "bi", "i", "y", "bs", "bel", "fb", "bl", "beta", "wb", "lb", "e", "sb", "ba", "v", "l", "r", "m", "emb", "p", "bp"], "g": ["x", "j", "pg", "c", "gi", "gm", "d", "ge", "go", "mg", "s", "G", "i", "h", "gb", "ig", "gs", "gg", "u", "graph", "e", "ga", "gh", "l", "gn", "sg", "gas", "m", "gen", "r", "p", "group", "gam"], "prm": ["prr", "prmm", "frmm", "prrm", " prM", " prr", "Prm", "perm", "Prms", "Prn", " prms", "frM", "perms", "pern", "perr", "prms", "Prmm", " prn", "prM", "prn", " prrm", "Prrm", "Prr", "frm", "frrm", " prmm", "PrM"], "ans": ["ls", "ang", "ANN", "Ann", "anus", "san", "aning", "nas", "ras", "ins", "vers", "ars", "amps", "ens", "an", "anon", "na", "anas", "plan", "ms", "gan", "ds", "ks", "nan", "An", "ana", "anes", "can", "cons", "AN", "cas", "aned", "anne", "ANS", "lan", "ann", "ns", "ane", "ani", "mean", "aus"]}}
{"code": "t_p, t_a, a_p, a_a = map(int, input().split())\\n\\nwhile True:\\n  a_p -= t_a\\n  if a_p <= 0 :\\n    print('Yes')\\n    exit()\\n  \\n  t_p -= a_a\\n  if t_p <= 0 :\\n    print('No')\\n    exit()\\n", "target": "620", "substitutes": {"t_p": ["t_n", "t__P", "T_P", "t_P", "t__n", "t_c", "t__a", "t5p", " t_jp", "t__p", "t5c", "a_P", "t5a", "T_a", "t5P", "t_b", "t_jp", "T_n", "T_p", "a_c", " t_b"], "t_a": [" t_A", "a_l", " t_c", "t_c", "a_b", "t__b", "t__a", "t_l", "t__l", "t__p", "t_b", "t_A"], "a_p": [" a_m", "t_n", "a_n", "t_P", " a_c", "a_m", "a_i", "a_P", " a_i", " a_P", "a_c"], "a_a": ["a__am", "a_A", "a__b", "a_am", "a_b", "t_am", "a__p", "a__a", "t_b", "t_A"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\nB = [0]*60\\nmod = 10 ** 9 + 7\\n\\nfor x in A:\\n  for i in range(60):\\n    B[i] += (x >> i) & 1\\n\\nans = 0\\np = 1\\n\\nfor i in range(60):\\n  if i >= 1:\\n    p *= 2\\n    p %= mod\\n  ans += (N-B[i])*B[i]*p\\n  ans %= mod\\n\\nprint(ans)", "target": "353", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "E", "Ns", "T", "n", "W", "Y", "Ni", "L", "G", "Num", "NB", "NT", " n", "NN", "Q", "I", "X", "C", "NI", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["AR", "As", "U", "NA", "D", "S", "E", "a", "CA", "Array", "Y", "AD", "AM", "L", "G", "Am", "BA", "An", "AP", "Ar", "AN", "I", "AA", "X", "C", "Na", "P", "API", "AF", "AC", "M", "F", "LA"], "B": ["U", "D", "S", "BM", "BF", "R", "E", "LB", "BB", "T", "W", "J", "BE", "Y", "L", "G", "PB", "BI", "OB", "AP", "Q", "Bs", "GB", "DB", "WB", "I", "b", "X", "C", "V", "MB", "P", "K", "O", "H", "M", "F", "Z"], "mod": ["oct", " m", "log", "S", "mac", "od", "c", "mad", "R", "d", "ci", "rad", "scale", "ac", "bug", "mult", " perm", "n", " mods", "perm", " MOD", "AD", "man", " C", "reg", "y", "min", "div", "ms", "cm", "post", " a", "PI", "pad", "AP", "null", "Q", " M", "mods", "Mods", "AN", "pre", "I", "max", "cum", " Mod", "MOD", "Mod", "amd", "module", "add", "sign", "m", "r", "M", "sim", "Z"], "x": ["xi", "axis", "c", "xy", "a", "int", "n", "xb", "num", "id", "y", "alpha", "xxx", "na", "ax", "xt", "h", "ix", "index", "number", "ex", "xc", "u", "f", "b", "X", "xx", "xes", "wx", "q", "w", "P", "z", "v", "m", "xs"], "i": ["pi", "di", "o", "uri", "at", "k", "xi", "j", "axis", "c", "gi", "ci", "d", "yi", "ri", "phi", "a", "io", "ie", "cli", "int", "ind", "n", "s", "ini", "ui", "bi", "id", "y", "g", "h", "ix", "index", "ip", "multi", "si", "u", "iu", "e", "I", "f", "ti", "b", "q", "ai", "z", "l", "v", "ii", "pc", "li", "m", "ei", "vi"], "ans": ["lp", "ls", "part", "parts", "c", "aning", "d", "ins", "a", "ac", "ars", "ants", "amps", "pa", "n", "ens", "an", "ads", "s", "anc", " means", "ops", "cs", "ents", "ians", "na", "os", "ant", "plan", "ms", "ks", "ana", "span", "can", "mods", "AN", "aned", "ANS", "activation", "ann", "ps", "ns", "ad", "lan", "b", "ai", "ani", "P", "ays", "powers", "pc", "eps", "aus", "ons"], "p": ["lp", "pi", "o", "tp", "j", "op", "c", "sp", "d", "a", "pos", "pa", "n", "per", "an", "s", "t", "y", "g", "h", "cp", "ip", "comp", "u", "pp", "f", "e", "b", "ps", "pn", "q", "P", "z", "l", "v", " P", "m", "r", "pc", "ap", "bp"]}}
{"code": "w = input().lower()\\nt = ''\\nwhile(True):\\n    row = input()\\n    if row == 'END_OF_TEXT':\\n        break\\n    t += row.lower() + '\\n'\\n\\nprint(t.split().count(w))", "target": "142", "substitutes": {"w": ["wp", "iw", "fw", "window", "wl", "wr", "week", "work", "aw", "x", "way", "c", "ws", "raw", "name", "wa", "W", "wt", "tw", " W", "nw", "width", "sw", "writer", "we", "word", "wal", "wall", "win", "ew", "ow", "rw", "how", "wb", "new", "wx", "kw", "r", "words", "wh"], "t": ["o", "type", "dt", "k", "x", "tr", "j", "c", "d", "art", "T", "n", " tw", "wt", "i", "tw", "y", "test", "total", "tty", "g", "rt", "ts", "tt", "tf", "st", "table", "title", " T", "u", "f", "e", "b", "pt", "ta", "l", "v", "template", "text", "m", "r", "str", "p", "temp"], "row": ["o", "wheel", "k", "rew", "element", "x", "tr", "feed", "page", "node", "raw", "col", "ro", "head", "ows", "tab", "result", "test", "rot", "key", "board", "entry", "sw", "h", "cell", "ok", "rows", "word", "ow", "line", "post", "box", "table", "run", "f", "e", "q", "Row", "text", "r", "comment", "right", "form", "rc", "block"]}}
{"code": "N, K = map(int, input().split())\\nAns = [0] * (N+1)\\nfor _ in range(K):\\n    _ = input()\\n    A = list(map(int, input().split()))\\n    for a in A:\\n        Ans[a] = 1\\nprint(Ans.count(0)-1)\\n", "target": "252", "substitutes": {"N": ["U", "NA", "D", "S", "k", "R", "NS", "B", "Ns", "T", "n", "W", "J", "Y", "L", "G", " n", "Size", "NN", " Ne", "Q", "I", "X", "C", "V", "P", "Sk", "O", "H", "M", "F", "Z"], "K": ["U", "KR", "D", "Ku", "k", "S", "Max", "R", "SK", "E", "Ak", "B", "T", "Ka", "n", "J", "Y", "NK", "G", "KK", "Q", "PK", "X", "C", "V", "P", "KN", "Sk", "KS", "H", "M", "F", "Z"], "Ans": ["ANc", "ANs", "Onses", "SynS", "ANd", "ANp", "Synns", "AnS", "Arp", "Ars", "AnnS", "Anp", "Anns", "OnS", "Arc", " Anp", "Arns", " Anc", " Anns", "Annns", "Anc", "Synses", "Ard", "Syns", " And", "Anses", "Ons", "Onns", "And", "Annses", "ANns"], "_": ["NA", "Ax", " __", "x", "j", "R", "ar", " I", "Some", "__", "Ak", "All", "J", "all", "an", "Az", "Array", "Num", " j", "na", "An", "I", "ad", "App", "ai", "p", "O", "AC", "H"], "A": ["As", "AR", "NA", "D", "S", "Args", "Alpha", "B", "CA", "T", "W", "mA", "At", "Array", "Y", "G", "L", "Am", "alpha", "AS", "Access", "sa", "SA", "An", "Ar", "AN", "I", "AA", "X", "App", "C", "ans", "Na", "P", "O", "AC", "LA"], "a": ["area", "\u00e4", "access", " pa", "k", "x", "j", "c", "ac", "ab", "app", "af", "pa", "n", " af", "action", "ata", "an", "fa", "i", "alpha", "na", " j", "sa", "qa", " n", "aa", "va", "b", "am", "ca", "pai", "ga", " i", "ai", "ae", "ea", "aj", "p", " all", "au"]}}
{"code": "n = int(input())\\nab = [list(map(int, input().split())) for _ in range(n)]\\nab.sort()\\n\\nprint((ab[0][0]-1) + (ab[-1][1]-0) + (ab[-1][0]-ab[0][0]+1))", "target": "266", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "name", "a", "num", "s", "t", "i", "y", "nn", "nl", "number", "nu", "len", "N", "f", "b", "ns", "nor", "z", "l", "m", "r", "nc", "p", "count"], "ab": ["el", "eb", "k", "mb", "abb", "pb", "x", "um", "db", "account", "ob", "sub", "ac", "a", "app", "bc", "af", "abs", "ub", "ast", "list", "array", "av", "tab", "arr", "Ab", "api", "bs", "lab", "hab", "fb", "abc", "fab", "ib", "atom", "bl", "lb", "lam", "b", "am", "base", "sb", "com", "abl", "AB", "bb", "abi", "ap", "p"], "_": ["k", "x", " __", "__", "f", "p"]}}
{"code": "a,b,c,d = map(int,input().split())\\nx1 = a*c\\nx2 = a*d\\nx3 = b*c\\nx4 = b*d\\nx = [x1,x2,x3,x4]\\nprint(max(x))\\n", "target": "774", "substitutes": {"a": ["area", "auto", "aw", "ab", "ac", "af", "int", "n", "da", "an", "s", "A", "fa", "i", "y", "alpha", "g", "sa", "aa", "u", "e", "f", "am", "ca", "ad", "ga", "ai", "ae", "w", "asa", "l", "aj", "m", "r", "p", "audio", "au"], "b": ["o", "k", "ab", "ac", "B", "n", "s", "A", "i", "y", "bs", "g", "h", "fb", "aa", "u", "e", "f", "ad", "ca", "sb", "w", "z", "ba", "l", "v", "r", "bb", "m", "p"], "c": ["mc", "k", "cy", "ci", "col", "ac", "n", "cc", "ce", "t", "ch", "i", "cs", "y", "ec", "g", "con", "h", "ct", "cm", "dc", "xc", "u", "f", "e", "max", "ad", "ca", "C", "q", "w", "z", "v", "l", "cd", "m", "r", "p"], "d": ["di", "o", "D", "k", "j", "db", "pd", "du", "bd", "n", "da", "s", "t", "i", "y", "dy", "g", "dim", "h", "ds", "do", "dc", "u", "f", "dx", "e", "dd", "ad", "q", "w", "z", "dn", "v", "l", "cd", "m", "r", "dat", "p"], "x1": ["y1", "X81", "X2", "x81", "X1", "xy2", "X3", "xy3", "y2", "xy1", "x01", "X01", "y3", "ax81", " x01", " x81", "ax01", "ax1"], "x2": ["xx2", " x02", "ex02", "xx0", "X2", " x0", "xx4", "ex4", "x0", "x02", "w4", "X3", "X02", "xx02", "w2", "w0", "ex2", "w02", "ex3", "X4"], "x3": ["ex5", "ex03", "X5", "X2", "X03", " x5", "rx3", "X3", "rx03", "rx2", "rx5", "ex2", "x5", " x03", "x03", "ex3"], "x4": ["indexfour", "index5", "index2", "crossfour", "cross2", "X5", "X2", "cross4", "xfour", " xfour", " x5", "X1", "Xfour", "index4", "x5", "cross1", "X4"], "x": ["xp", "px", "xy", "int", "ww", "n", "array", " xx", "t", "xxxxxxxx", "i", "id", "y", "check", "val", "ax", "h", "xt", "yx", "ct", "ix", "index", "number", "ex", "xc", "f", "dx", "dd", "xd", "e", "X", "xx", "max", "xf", "xes", "w", "z", "v", "cross", "m", "xs", "p"]}}
{"code": "N, L = map(int, input().split())\\nS = sorted([input() for i in range(N)])\\nprint(*S, sep=\"\")\\n", "target": "732", "substitutes": {"N": ["U", "D", "CL", "R", "NS", "E", "NL", "B", "Ns", "T", "n", "W", "J", "Y", "A", "G", "Len", " n", "Q", "Length", "I", "X", "NO", "C", "Ne", "V", "OS", "P", "K", "O", "H", "M", "F", "Z"], "L": ["CL", "LU", "Z", "E", "left", "LR", "NL", "B", "Lo", "List", "F", "LI", "IL", "LE", "LT", "Li", "dL", "C", "Lu", "V", "P", "l", "O", "M", "ln", "SL", "LA"], "S": ["U", "SE", "D", "SS", "R", "NS", "Sample", "E", "Split", "B", "T", "Si", "s", "Array", "A", "G", "Part", "SL", "Q", "Sign", "I", "C", "V", "Sl", "P", "Sort", "K", "Input", "M", "H", "F", "Z"], "i": ["o", "k", "x", "j", "c", "gi", "d", " I", "pos", "ind", "id", "val", " il", "ix", "index", "ip", "il", "u", "iu", "len", "e", "f", "I", "q", "z", "l", "li", "p"]}}
{"code": "n, k = map(int, input().split())\\ns = input()\\nu = []\\nd = []\\nif s[0]=='0':\\n    d.append(0)\\ncnt = 1\\nfor i in range(n-1):\\n    if s[i+1]=='1' and s[i]=='0':\\n        u.append(cnt)\\n        cnt = 1\\n    elif s[i+1]=='0' and s[i]=='1':\\n        d.append(cnt)\\n        cnt = 1\\n    else:\\n        cnt += 1\\nif s[-1]=='0':\\n    u.append(cnt)\\n    d.append(0)\\nelse:\\n    d.append(cnt)\\nif len(u)<=k:\\n    print(n)\\n    exit()\\ntmp = sum(d[:k+1]) + sum(u[:k])\\nans = tmp\\nfor i in range(len(u)-k):\\n    tmp += u[i+k]+d[i+k+1]-u[i]-d[i]\\n    ans = max(ans, tmp)\\nprint(ans)", "target": "340", "substitutes": {"n": ["o", "x", "j", "c", "np", "nb", "a", "num", "t", "y", "g", "en", "h", "nan", "nn", "number", "net", "f", "e", "nt", "max", "b", "ns", "sn", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "k": ["ik", "o", "kn", "ke", "x", "j", "c", "ak", "ky", "mk", "ck", "num", "kick", "t", "ch", "id", "y", "sk", "kg", "g", "h", "ok", "ks", "th", "dk", "ko", "size", "e", "f", "max", "b", "ki", "q", "gh", "w", "kw", "z", "K", "kind", "l", "v", "m", "p", "km", "ku"], "s": ["states", "ls", "o", "parts", "js", "S", "ings", "c", "sp", "ins", "ses", "a", "ss", "als", "args", "qs", "ads", "ows", "t", "ops", "strings", "cs", "y", "g", "sa", "os", "ds", "ks", "gs", "si", "sets", "e", "f", "ys", "b", "ps", "us", "ns", "ments", "ands", "es", "sb", "w", "l", "v", "sg", "m", "xs", "its", "words", "p"], "u": ["U", "o", "yu", "uri", "x", "su", "ul", "tu", "c", "uv", "input", "ut", "a", "du", "ui", "t", "y", "g", "chu", "un", "nu", "cu", "ur", "iu", "f", "e", "mu", "b", "us", "uu", "q", "w", "z", "v", "l", "uid", "m", "lu", "ru", "p", "up", "ou"], "d": ["di", "o", "D", "dos", "dt", "x", "j", "c", "db", "pd", "a", "data", "nd", "da", "ui", "t", "id", "y", "sd", "g", "h", "ds", "dh", "do", "dc", "dad", "f", "dd", "e", "dx", "b", "ad", "dl", "q", "w", "z", "l", "v", "cd", "m", "dat", "p"], "cnt": ["dcpt", "ucpt", "CNT", "acnn", "dcnn", "ucnn", "encont", "acct", "scrt", "account", "scont", "ccount", "lcnn", "lcnt", " ccount", " cpt", "ecpt", "dcrt", "lccount", "scnt", "dccount", "lcNT", "encnt", "ccrt", "cnn", "acnt", "dcct", "cccount", "encrt", "ecct", "dcnt", "ecnn", " cont", "ecnt", "encount", "acNT", "scount", "ucnt", "ccNT", "lcct", "cnc", "Cnt", "cct", "ucct", "acnc", "cNT", "acrt", " cnc", "cont", "Cct", " count", " cnn", "Ccount", "lcnc", "ccnt", " crt", "cpt", " cct", "crt", "dcNT", " cNT", "count"], "i": ["mini", "pi", "di", "o", "it", "ji", "x", "xi", "j", "c", "gi", "ci", "slice", "yi", "phi", "oi", "a", "io", "ie", "start", "name", "int", "ind", "ini", "ui", "ni", "bi", "id", "y", "ix", "index", "ip", "eni", "si", "iu", "ami", "fi", "f", "ti", "I", "e", "b", "end", "mi", "my", "q", "ai", "z", "qi", "v", "l", "ii", "li", "ei", "p"], "tmp": ["mini", "tp", "part", "kk", "j", "c", "sp", "np", "tc", "sum", "nb", "data", "mult", "start", "diff", "pos", "etc", "vt", "opp", "amp", "t", "space", "ppa", "cmp", "alpha", "offset", "cp", "tt", "span", "pad", "fake", "beta", "zip", "mo", "mp", "len", "pre", "max", "dd", "pp", "stuff", "sup", "mm", "emp", "z", "flat", "sam", "now", "txt", "p", "temp", "count"], "ans": ["ls", "part", "x", "ags", "nas", "ras", "ins", "aos", "a", "ants", "any", "amps", "vs", "ens", "an", "ads", " means", "ats", " spans", "cs", "outs", "ents", "ams", "asts", "sk", "na", "anas", "ds", "ms", "ks", "nan", "ana", "span", "can", "anes", "AN", "aned", "leans", "ANS", "ann", "lan", "ps", "ns", "es", "ai", "ani", "aces", "xs", "p", "aus", "ons"]}}
{"code": "a,b,k=map(int,input().split())\\na2=max(0,a-k)\\nb=max(0,b-(k-(a-a2)))\\n\\nprint(a2,b)\\n", "target": "442", "substitutes": {"a": ["area", "auto", "x", "c", "aw", "ab", "ac", "pa", "n", "da", "an", "A", "fa", "i", "y", "alpha", "qa", "sa", "la", "aa", "u", "va", "oa", "e", "f", "ad", "ca", "am", "ga", "ai", "ae", "w", "asa", "ba", "l", "aj", "m", "p", "au"], "b": ["eb", "mb", "x", "abb", "j", "c", "db", "d", "ob", "ab", "B", "bc", "BB", "bd", "arb", "n", "ub", "bis", "rb", "bi", "i", "y", "bs", "body", "g", "fb", "gb", "url", "ib", "beta", "aa", "wb", "u", "lb", "e", "f", "sb", "z", "ba", "l", "v", "obb", "bb", "m", "bf", "emb", "p"], "k": ["o", "ke", "x", "kk", "j", "c", "d", "ak", "ac", "n", "i", "y", "sk", "g", "unk", "ok", "ks", "dk", "ko", "u", "f", "e", "ad", "ki", "q", "w", "kw", "z", "K", "v", "m", "r", "p"], "a2": ["A1", "A4", " a02", " a1", "ga1", "ga2", "A02", "A2", "a02", "ga02", "a4", "a1", "b2", "ga4", " a4", "b4"]}}
{"code": "A = list(map(int,input().split()))\\nA=set(A)\\n\\nans='No'\\nif len(A) == 2:\\n    ans='Yes'\\n    \\nprint(ans)", "target": "409", "substitutes": {"A": ["As", "AR", "U", "NA", "D", "S", "Args", "Alpha", "a", "B", "CA", "All", "T", "mA", "args", "Array", "Y", "an", "L", "G", "AM", "AS", "alpha", "ams", "SA", "An", "Ar", "Yes", "AN", "ANS", "I", "AA", "X", "Ang", "C", "P", "K", "API", "AF", "H", "M", "AC", "F", "N", "LA"], "ans": ["NA", "anus", "san", "aning", "ass", "ar", "nas", "ras", "ars", "ants", "flags", "ens", "anners", "ean", "an", "ads", "parser", "actions", "ats", " means", "cs", "ams", "alpha", "sk", "na", "comments", "anas", "plan", "ds", "ks", "nan", "ana", "anes", "can", "AN", "atan", "aned", "leans", "ANS", "ann", "ad", "lan", "ns", "ons", "ani", "aces", "ano", "ays", "annels", "params", "mean", "asa", "yes", "aus", "any", "LA"]}}
{"code": "a = list(input())\\nif a[1] == \"B\":\\n  print(\"ARC\")\\nelse:\\n  print(\"ABC\")", "target": "510", "substitutes": {"a": ["ma", "area", "access", "part", "sta", "c", "d", "ama", "cha", "aux", "af", "pa", "n", "action", "args", "ast", "an", "s", "array", "A", "i", "y", "alpha", "na", "sa", "source", "aa", "la", "va", "f", "e", "b", "ca", "ga", "asa", "l", "m", "p"]}}
{"code": "T,X = map(int,input().split());print(T/X)", "target": "317", "substitutes": {"T": ["U", "D", "S", "R", "E", "Test", "B", "TS", "Y", "A", "t", "L", "G", "INT", "NT", "TA", "Q", "Length", "Tx", "C", "TT", "TX", "V", "P", "K", "TH", "O", "XXX", "M", "F", "N", "Z"], "X": ["U", "D", "ZX", "x", "FX", "XX", "B", "W", "Y", "DX", "L", "UX", "Ex", "Q", "Tx", "C", "XL", "TX", "V", "FF", "P", "XP", "K", "EX", "MX", "XXX", "H", "IX", "M", "F", "PC", "N", "Z"]}}
{"code": "import math\\nN = int(input())\\np = []\\n\\nfor i in range(N):\\n    p.append(int(input()))\\n\\ntotal_price = max(p) / 2 + sum(p) - max(p)\\n\\nprint(math.floor(total_price))", "target": "259", "substitutes": {"N": [" NP", "D", "S", "R", "NS", " I", "B", "Ns", "T", "n", "J", "num", "Y", "Ni", "L", "G", "Num", "SN", "Size", " n", "number", "Q", "I", "Number", "X", "C", "Ne", "V", "P", "K", " P", "O", "H", "M", "F", "Z"], "p": ["lp", "pi", "o", "part", "tp", "x", "j", "c", "np", "d", "point", "data", "a", "pos", "n", "array", "t", "bp", "y", "g", "price", "h", "pr", "ip", "u", "pre", "f", "e", "b", "ps", "q", "power", "w", "P", "params", "l", "v", "m", "r", "ap", "up", "pe"], "i": ["it", "k", "j", "gi", "c", "d", " I", "ind", "n", "num", "id", "g", "val", "h", " il", "index", "ip", "il", "u", "iu", "pp", "f", "ti", "I", "q", "z", "li", "ne"], "total_price": [" total_cost", "total_currency", "total\u00b7price", "totalenprice", "total_point", " total_point", "totalencurrency", "totalencost", " total_currency", "total\u00b7point", "total_cost", "total\u00b7currency"]}}
{"code": "icase=0\\nif icase==0:\\n    n=int(input())\\n    if n==1:\\n        print(\"Hello World\")\\n    else:\\n        a=int(input())\\n        b=int(input())\\n        print(a+b)\\n", "target": "691", "substitutes": {"icase": ["iccase", "acase", "iccased", " icASE", "icASE", " icases", "iccape", "iacase", "acape", "iccASE", "iacode", "acased", "iccases", "icape", "acode", "icode", "acases", "iccode", " icased", "acASE", "icases", "iacape", "iacases", "icased"], "n": ["o", "k", "j", "c", "np", "nb", "name", "ot", "an", "num", "t", "ni", "y", "na", "g", "nn", "nan", "nl", "nu", "nr", "u", "f", "e", "nt", "fn", "rn", "ns", "pn", "sn", "no", "nor", "z", "l", "v", "m", "nc", "p", "ne", "N"], "a": ["ma", "o", "c", "aw", "d", "ama", "ab", "ac", "af", "aka", "da", "an", "A", "fa", "y", "alpha", "sa", "abc", "ia", "aa", "u", "va", "e", "f", "am", "ad", "ca", "ga", "ai", "ae", "asa", "ba", "z", "aaa", "ea", "aj", "now", "p", "au"], "b": ["eb", "mb", "abb", "pb", "c", "d", "cb", "nb", "ob", "ab", "B", "xb", "bi", "i", "y", "bs", "body", "g", "fb", "ib", "beta", "wb", "lb", "u", "e", "f", "sb", "z", "ba", "l", "v", "bb", "bf", "p"]}}
{"code": "from collections import defaultdict\\nn, k = map(int, input().split())\\na = [0] + [int(i) for i in input().split()]\\nd = defaultdict(int)\\nnext = 1\\nfor t in range(k):\\n  if d[next]!=0:\\n    period = t - d[next]\\n    res = (k - t)%period\\n    for _ in range(res):\\n      next = a[next]\\n    break\\n  elif d[next]==0:\\n    d[next] = t\\n    next = a[next]\\nprint(next)", "target": "169", "substitutes": {"n": ["c", "er", " fn", " N", "nb", " p", " np", " s", "na", " self", " na", " r", " c", "b", "ns", " nan", "l", "r", "p", "N"], "k": ["ik", "o", "ke", "work", "x", "j", "c", "cycle", "ak", "point", " K", "start", "year", "ck", "num", "ch", "y", "sk", "unk", "ok", "ks", "dk", "ko", "u", "f", "max", "e", "end", "b", "q", "tk", "kw", "w", "z", "K", "v", "m", "r", "p", "km"], "a": ["ma", "area", "at", "sta", "c", "ac", "wa", "ab", "data", "pa", "da", "ata", "an", "A", "y", "alpha", "na", "sa", "aa", "u", "f", "e", "ad", "am", "b", "ga", "w", "ta", "ada", "aj", "another", "prev", "p", "au"], "i": ["pi", "di", "o", "x", "xi", "j", "idi", "c", "gi", "ci", "ri", "oi", " I", "io", "ie", "ori", "int", "ind", "ini", "bi", "id", "ir", "ix", "index", "ip", "si", "item", "u", "iu", "iii", "fi", "e", "I", "ti", "f", "ai", "z", "qi", "ii", "li", "p"], "d": ["df", "di", "o", "D", "dt", "daily", "x", "od", "j", "c", "ded", "db", "pd", "data", "du", "nd", "ind", "da", "y", "sd", "dy", "g", "ds", "dh", "do", "md", "dc", "dad", "u", "e", "dd", "f", "end", "ad", "b", "dl", "q", "dict", "z", "dm", "l", "v", "cd", "m", "dist", "r", "dat", "p", "ld"], "next": ["frame", "sec", "future", "step", "grade", "later", "success", "first", "good", "this", "done", "open", "c", "close", "page", "current", "primary", "cycle", "response", "same", "start", "inter", "complete", "past", "latest", "int", "second", "ise", "valid", "range", "result", " current", "total", "front", "key", "more", "forward", "self", "parent", "Next", "tri", "tra", "main", "sequence", "error", "lower", "last", "seq", "nr", "iterator", "reply", "going", "nt", "max", "one", "end", "toc", "code", "rev", "new", "edge", "vious", " Next", "flat", "now", "prev", "p", "recent"], "t": ["it", "tp", "o", "dt", "type", "x", "j", "c", "point", "tc", " p", "start", "T", "int", " time", "all", "s", "y", "test", "total", "time", "target", "ts", "tt", "tz", "u", "f", "nt", "e", "tim", "new", "q", "pt", "w", "ta", "z", "l", "v", "m", "r", "p"], "period": ["unit", "iod", "type", "dt", "window", "cycle", "point", "col", "data", "mult", "int", "year", "trial", "range", "y", "timeout", "time", "div", "gap", "val", "repeat", "month", "span", "day", "frequency", "row", "f", "term", "method", "q", "ref", "duration", "r", "p", "series", "resolution"], "res": ["rest", "resolution", "err", "response", "results", "cycle", "complete", "grid", "trial", "progress", "reg", "RES", "range", "Res", "result", "arr", "resh", "min", "val", "pres", "ms", "tri", "req", "final", "pre", "rup", "max", "reset", "rev", "resp", "gr", "cr", "r", "prev", "series", "rate"], "_": ["x", " times", "col", " time", "num", "time", "g", "val", "ay", "f", "r", "p"]}}
{"code": "n, m = map(int, input().split())\\ns = [list(map(int, input().split()))[1:] for _ in range(m)]\\np = list(map(int, input().split()))\\nans = 0\\n\\nfor i in range(2**n):\\n    status = ['+']*n\\n    for j in range(n):\\n        if ((i>>j)&1):\\n            status[j] = '-'\\n    num = 0\\n    for m, k in enumerate(s):\\n        count = 0\\n        for l in k:\\n            if status[l-1] == '+':\\n                count += 1\\n        if count%2 != p[m]:\\n            break\\n        else:\\n            num += 1\\n    if num == m+1:\\n        ans += 1\\nprint(ans)\\n", "target": "546", "substitutes": {"n": ["o", "x", "c", "np", "d", "nm", "nb", "ny", "an", "t", "ni", "y", "mn", "g", "en", "h", "nn", "u", "size", "len", "net", "f", "e", "b", "ns", "sn", "q", "w", "z", "v", "r", "nc", "M", "ne", "N"], "m": ["o", "mc", "x", "um", "c", "om", "d", "nm", "nb", "a", "an", "y", "mon", "mn", "g", "dim", "h", "ms", "ym", "cm", "number", "u", "size", "f", "e", "mu", "b", "mi", "sm", "mm", "im", "w", "z", "dm", "v", "r", "M", "middle", "bm"], "s": ["states", "ls", "S", "c", "ins", "ses", "a", "ss", "strings", "cs", "y", "g", "os", "sections", "ms", "ks", "ids", "south", "si", "u", "e", "sym", "ps", "ns", "es", "v", "stats", "groups", "xs", "se"], "_": ["x", "ac", " time", "ind", "all", "id", "Num", "g", "u", "len", "f"], "p": ["lp", "pi", "tp", "o", "c", "sp", "np", "param", "a", "pa", "vp", "po", "t", "y", "h", "cp", "pr", "py", "u", "pre", "e", "f", "b", "ps", "q", "P", "v", "jp", "pc", "bp"], "ans": ["ls", "pid", "news", "x", "ins", "a", "ss", "an", "list", "anc", "cs", "anon", "sk", "na", "os", "g", "analysis", "plan", "ms", "sex", "ids", "ana", "nan", "nn", "span", "can", "ism", "cons", "main", "stat", "aned", "len", "size", "ANS", "activation", "ann", "am", "ps", "ns", "lan", "scan", "sn", "lang", "es", "no", "ai", "params", "mean", "stats", "ln", "aus"], "i": ["pi", "o", "ji", "x", "xi", "c", "ci", "a", "ie", "int", "ini", "ni", "bi", "id", "ij", "index", "ip", "si", "u", "iu", "f", "I", "e", "b", "mi", "im", "ai", "z", "ii", "li"], "status": ["note", "unit", "states", "step", "success", "sync", "c", "sp", "current", "ss", "Status", "switch", "progress", "syn", "info", "result", "id", "cs", "sort", "g", "h", "score", "sex", "span", "index", "number", "speed", "stat", "seq", "si", "size", "uses", "e", "code", "scan", "sn", "summary", "state", "sign", "stats", "wait", "sc", "comment", "skip", "str", "sr"], "j": ["kj", "ji", "o", "x", "c", "d", "jc", "jon", "ie", "pos", "oj", "ind", "J", "id", "y", "g", "h", "ij", "ok", "job", "jl", "jo", "u", "ja", "f", "e", "obj", "jj", "q", "dj", "w", "z", "jp", "jam", "v", "li", "ii", "uj"], "num": ["unit", "o", "part", "nam", "x", "ul", "um", " len", "c", "np", "nm", "sum", "nb", "col", "name", "pos", "int", "an", "Num", "id", " nu", "mon", "mn", "uni", "na", "con", "en", "dim", "nn", "un", "index", "number", "nu", "umi", "nom", "len", "size", "u", "f", " number", "ann", "b", "lang", "NUM", "no", "ln"], "k": ["ner", "it", "o", "kn", "ke", "x", "kk", "c", "ak", "kl", "ck", "an", "cs", "y", "key", "sk", "g", "ok", "ks", "u", "f", "e", "b", "code", "q", "w", "z", "K", "v", "r", "kr", "kt"], "count": ["part", "x", "um", "c", "col", "sum", "name", "ind", "long", "list", "id", "weight", "y", "cond", "con", "number", "stat", "u", "len", "size", "f", "max", "nt", "ann", "b", "code", "Count", "e", "child", "counter", "z", "cat", "conf", "order", "rank", "call"], "l": ["el", "lp", "ls", "o", "x", "c", "d", "kl", "fl", "sl", "ind", "ll", "list", "L", "y", "g", "h", "line", "nl", "un", "il", "u", "len", "lin", "size", "f", "e", "b", "w", "z", "v", "lc", "li", "r", "ln"]}}
{"code": "#!/usr/bin/env python3\\ndef main():\\n    import time\\n\\n    N = int(input())\\n    A = [int(x) for x in input().split()]\\n\\n    num_lst = [0] * (N + 1)\\n    for a in A:\\n        num_lst[a] += 1\\n\\n    ans = 0\\n    for num in num_lst:\\n        # ans += comb(num, 2, exact=True)\\n        ans += num * (num - 1) // 2\\n\\n    start = time.time()\\n    for a in A:\\n        print(ans - (num_lst[a] - 1))\\n    end = time.time() - start\\n    # print(f'{end:6f}', 's')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "247", "substitutes": {}}
{"code": "k = int(input())\\na, b = map(int, input().split())\\n\\nfor i in range(b-a+1):\\n    if (a+i) % k == 0:\\n        print('OK')\\n        break\\n    elif a+i == b:\\n        print('NG')", "target": "78", "substitutes": {"k": ["ik", "o", "ke", "x", "kk", "j", "work", "c", "d", "ak", "ky", "n", "ck", "ek", "kick", "key", "sk", "kg", "g", "unk", "ack", "ok", "ks", "uk", "ko", "u", "f", "e", "end", "kernel", "q", "kw", "K", "l", "v", "m", "r", "p", "km", "ku"], "a": ["ma", "area", "o", "sta", "x", "j", "c", "aw", "ama", "ab", "ac", "art", "aka", "pa", "n", "mA", "da", "an", "A", "y", "alpha", "api", "qa", "sa", "ia", "aa", "la", "u", "va", "oa", "e", "f", "am", "ad", "ca", "ga", "ai", "ae", "aaa", "ba", "l", "ea", "aj", "m", "p", " A", "count"], "b": ["eb", "mb", "x", "pb", "j", "c", "d", "nb", "ab", "B", "bound", "n", "s", "rb", "y", "bs", "body", "g", "fb", "ib", "beta", "wb", "lb", "u", "e", "f", "end", "base", "sb", "w", "be", "z", "ba", "l", "v", "length", "bb", "r", "m", "bf", "p"], "i": ["pi", "x", "xi", "j", "c", "gi", "ci", "d", "ri", "oi", "start", "int", "ind", "n", "ini", "ui", "bi", "id", "y", "h", "ib", "index", "si", "u", "iu", "e", "I", "f", "ti", "ai", "z", "qi", "l", "v", "ii", "li", "m", "p"]}}
{"code": "A = int(input())\\nB = int(input())\\nC = int(input())\\nD = int(input())\\nE = int(input())\\nnum = min((A-1)%10,(B-1)%10,(C-1)%10,(D-1)%10,(E-1)%10)\\nprint((-(-A//10)*10)+(-(-B//10)*10)+(-(-C//10)*10)+(-(-D//10)*10)+(-(-E//10)*10)+num-9)", "target": "193", "substitutes": {"A": ["As", "AR", "Ca", "NA", "Alpha", "a", "CA", "IA", "Array", "AD", "Y", "AM", "DA", "Am", "AL", "AS", "Ab", "HA", "BA", "SA", "EA", "AP", "Ar", "AN", "AA", "App", "AST", "Na", "P", "CC", "AF", "AH", "AB", "AC", "F", "N", "LA"], "B": ["U", "Bu", "EB", "BF", "R", "LB", "BB", "T", "TB", "BE", "W", "Y", "L", "G", "CU", "BA", "BD", "BI", "GB", "Bs", "Q", "DB", "CB", "b", "X", "P", "BC", "AB", "O", "M", "F", "N"], "C": ["U", "S", "CD", "c", "R", "CA", "W", "Y", "G", "L", "Con", "CF", "Q", "CS", "X", "DC", "V", "P", "CC", "Cs", "CR", "BC", "CP", "EC", "O", "Ch", "AC", "M", "F", "CM", "CE", "N", "Z"], "D": ["U", "S", "CD", "R", "d", "Do", "LD", "Ds", "T", "DO", "Y", "AD", "G", "L", "DA", "DX", "JD", "DD", "DM", "DS", "Q", "DI", "DB", "X", "DF", "DC", "V", "P", "O", "M", "DH", "F", "DE", "N", "Z"], "E": ["U", "OE", "EB", "S", "R", "Do", "Ed", "EF", "Es", "Y", "G", "L", "EL", "EU", "EA", "El", "ES", "Q", "EEE", "Edge", "e", "X", "IE", "PE", "EEEE", "V", "P", "EC", "O", "EE", "M", "F", "N"], "num": ["loc", "common", "al", "x", "ul", "um", "om", "np", "d", "nb", "sum", "mult", "n", "inc", "cal", "non", "Num", "coord", "na", "div", "con", "dim", "en", "bin", "number", "nu", "multi", "len", "N", "max", "end", "NUM", "no", "nine", "temp", "ne", "count"]}}
{"code": "n,m = map(int,input().split())\\nh = list(map(int,input().split()))\\n\\ng = [[] for _ in range(n)]\\nfor _ in range(m):\\n  a,b = map(int,input().split())\\n  g[a-1].append(b-1)\\n  g[b-1].append(a-1)\\n\\ncnt = n\\nfor i in range(n):\\n  for j in g[i]:\\n    if h[i] <= h[j]:\\n      cnt -= 1\\n      break\\nprint(cnt)", "target": "291", "substitutes": {"n": ["o", "k", "x", "c", "d", "nb", "s", "num", "t", "y", "min", "u", "size", "f", "e", "nt", "max", "ns", "C", "sn", "no", "q", "w", "z", "l", "v", "r", "nc", "p", "ne", "N"], "m": ["o", "mc", "k", "x", "c", "d", "s", "num", "range", "y", "mn", "md", "cm", "u", "f", "e", "mu", "mi", "mm", "z", "l", "v", "hm", "r", "M", "p"], "h": ["o", "k", "x", "c", "d", "ht", "s", "rh", "hp", "t", "ch", "y", "ph", "ah", "u", "e", "f", "hi", "q", "sh", "gh", "w", "z", "l", "v", "hm", "r", "H", "p", "hs"], "g": ["vg", "k", "pg", "c", "gi", "gu", "gm", "d", "gc", "go", "mg", "s", "t", "G", "gz", "y", "gy", "rg", "gb", "og", "ig", "gs", "gg", "ag", "u", "graph", "agg", "f", "e", "ga", "q", "gh", "w", "z", "v", "l", "gn", "sg", "erg", "p", "group", "gp"], "_": [" v", "k", "out", "x", " un", " col", "__", " time", " all", " data", " x", " seq", " id", "f", " block", " non", " out", " num", " k", " q", "ing"], "a": ["x", "c", "d", "ac", "ab", "int", "da", "an", "s", "A", "y", "sa", "ia", "aa", "u", "f", "e", "ad", "ca", "ga", "ai", "ae", "w", "z", "ba", "l", "p"], "b": ["o", "k", "mb", "x", "c", "d", "nb", "ab", "bh", "B", "s", "y", "bs", "fb", "aa", "u", "lb", "e", "f", "sb", "w", "z", "ba", "l", "v", "r", "p"], "cnt": ["connt", "CNT", "acct", "lcnn", " cnd", "fNT", "Cnc", "lcnt", " cret", "dcnd", "conct", "acount", "lcNT", "fnd", "conret", "acret", "cret", "cnd", "acnt", "cnn", "dcct", "dcnt", "Cnn", "cnc", "Cnt", "cct", "cNT", "fnt", " cnc", " count", " cnn", "lcnc", "fct", "conount", " cct", "dcNT", " cNT", "count"], "i": ["pi", "o", " v", "ji", "k", "x", "c", "gi", "gu", "ci", "d", " I", "int", "ind", "J", "ini", "id", "y", "ij", "index", " z", "ip", "si", " id", "u", "iu", "f", "I", "e", " k", "ai", "z", "p", "l", "v", "ii", "li"], "j": ["ji", " J", "o", "k", "x", "c", "d", "pos", "int", "ind", "J", "oj", "id", "y", " dj", "ij", "index", "jl", "jo", " l", "si", "u", "ja", "e", "f", "obj", "jj", " k", "z", "l", "jp", "ii", "aj", "li", "v", "p"]}}
{"code": "import sys\\nimport decimal # 10\u9032\u6cd5\u306b\u5909\u63db\uff0c\u6b63\u78ba\u306a\u8a08\u7b97\\n\\ndef input():\\n    return sys.stdin.readline().strip()\\n\\ndef main():\\n    s, t = input().split()\\n    a, b = map(int, input().split())\\n    u = input()\\n    if s == u:\\n        print(a-1,b)\\n        return\\n    print(a,b-1)\\n\\n    \\nmain()", "target": "517", "substitutes": {}}
{"code": "N = int(input())\\n\\nL = list(range(N+1))\\nprint(sum(L))", "target": "56", "substitutes": {"N": ["Node", "D", "S", "R", "NS", "E", "NL", "NC", "B", "Ns", "T", "n", "W", "J", "Y", "A", "Len", "Num", "Part", "CNN", "Index", "NT", "NN", "Q", "Length", "I", "Number", "X", "C", "V", "One", "P", "K", "O", "M", "F", "Z"], "L": ["LM", "D", "S", "R", "E", "LB", "NL", "LR", "B", "List", "T", "W", "LI", "G", "LP", "SL", "Q", "LT", "I", "Li", "C", "XL", "LL", "V", "P", "K", "l", "DL", "O", "H", "M", "F", "Z"]}}
{"code": "n,x,t=map(int, input().split())\\ntako = n//x\\namari = n%x\\nans = tako*t\\nif amari != 0:\\n    ans += t\\nprint(ans)", "target": "105", "substitutes": {"n": ["o", "cn", "k", "c", "np", "d", " N", "node", "nb", "a", "num", "an", "i", "y", "na", "network", "nn", "span", "number", "u", "size", "net", "nt", "f", "e", "max", "b", "ns", "w", "z", "v", "l", "m", "r", "nc", "p", "ne", "N"], "x": ["o", "k", "xi", "px", "work", "c", "np", "d", "xy", "times", "ux", "ww", "y", "tx", "na", "xxx", "xa", "ax", "h", "xt", "sex", "rx", "yx", "xe", "ix", "index", "custom", "ex", "xc", "e", "f", "max", "X", "xx", "xf", "xes", "wx", "w", "nex", "z", "rex", "v", "cross", "xs", "p"], "t": ["tap", "o", "tp", "at", "dt", "ent", "qt", "out", "tu", "tm", "c", "d", "ut", "a", "tun", "art", "tom", "T", "int", "ot", "s", "i", "td", "y", "test", "total", "tty", "ty", "g", "ant", "h", "ts", "let", "tt", "tf", "un", "tmp", "st", " T", "f", "e", "ti", "tim", "nt", "opt", "new", "w", "ta", "v", "l", "m", "p"], "tako": ["foko", "taho", " tato", " tak", "taako", "pak", " tpo", "faho", "taoko", "pako", "Tpo", "Toko", "tak", "toto", "Tak", "Tato", "tato", "pato", "fako", "taoto", "Taho", "toko", "Toto", "Tako", "taaho", "ppo", "foto", "tpo"], "amari": ["amaru", "mai", " amar", "amsara", "armaron", "emaron", "Amar", "mari", "armara", "emara", " amai", "amaron", "amsaron", "amara", "amar", "mar", "armaru", " amani", "amsaru", "emari", "Amani", "Amai", "amai", "Amari", "mani", "armari", "emaru", "amani", "amsari"], "ans": ["Ann", "nas", "a", "ars", "ants", "atten", "amps", "ens", "an", "anny", "A", " means", "ats", "cs", "oss", "sk", "annot", "na", "os", "ant", "anas", "plan", "ds", "ts", "nan", "An", "nn", "trans", "anes", "can", "span", "ana", "AN", "atan", "aned", "ania", "anne", "ANS", "ann", "lan", "ns", "sn", "Na", "chan", "ai", "ani", "ano", "annels", "params", " scans", "antis", "types", "aus"]}}
{"code": "def calc(num, A, B) -> bool:\\n\tans = 0\\n\\n\twhile True:\\n\t\tif num // 10 == 0:\\n\t\t\tans += num\\n\t\t\tbreak\\n\t\tans += num % 10\\n\t\tnum //= 10\\n\\n\tif A <= ans and ans <= B:\\n\t\treturn True\\n\telse:\\n\t\treturn False\\n\\n\\n\\ndef main():\\n\tN, A, B = map(int, input().split())\\n\tans = 0\\n\\n\tfor num in range(1, N + 1):\\n\t\tresult = calc(num, A, B)\\n\t\tif result:\\n\t\t\tans += num\\n\\n\tprint(ans)\\n\\n  \\nif __name__ == \"__main__\":\\n  \tmain()", "target": "704", "substitutes": {"num": ["su", "c", "ten", "nb", "mon", "mn", "nu", "multi", "nom", "f", "ns", "cum", "m", "p", "count", "x", "done", "um", "om", "d", "a", "an", "Num", "zero", "na", "nan", "umi", "max", "am", "NUM", "no", "unit", "nm", "mult", "int", "n", "bn", "anc", "i", "anon", "alpha", "con", "ana", "nn", "span", "bin", "batch", "u", "len", "nt", "sam", "nc", "nam", "np", "sum", "name", "bc", "all", "div", "dim", "un", "number", "mu", "one", "b"], "A": ["As", "U", "Ac", "NA", "Ca", "D", "S", "Alpha", "a", "Ak", "CA", "Data", "n", "mA", "At", "Array", "Y", "AM", "L", "Am", "Num", "Ab", "Ma", "alpha", "HA", "AI", "SA", "AU", "An", "AP", "Ar", "Yes", "AN", "I", "AA", "Ang", "X", "C", "Na", "NUM", "P", "AB", "AC", "M", "And", "F", "LA"], "B": ["U", "Base", "EB", "D", "Tab", "BF", "E", "LB", "Ub", "Bi", "BB", "T", "UB", "TB", "BE", "W", "Y", "L", "Num", "Ab", "NB", "BA", "PB", "MAX", "BD", "BI", "OB", "number", "GB", "Bs", "Band", "BR", "DB", "WB", "CB", "I", "b", "X", "Number", "C", "NUM", "Block", "MB", "P", "K", "BC", "AB", "M", "Bar", "F", "Bal"], "ans": ["offs", "ANN", "results", "nas", "aos", "amps", "args", "uns", "An", "can", "AN", "cas", "aned", "ANS", "ns", "scan", "features", "aus", "Ann", "x", "ras", "a", "ss", "ens", "an", "cs", "ents", "sk", "na", "anas", "ks", "nan", "ann", "lan", "ani", "gen", "ls", "S", "ars", "n", "anc", "s", "ats", "anon", "plan", "ds", "ana", "nn", "cons", "leans", "acts", "ands", "Na", "es", "ays", "params", "ons", "aning", "ins", "ants", "ops", " means", "oss", "ians", "ams", "os", "names", "ain", "ions", "aces"], "N": ["U", "NA", "D", "S", "NS", "NC", "Ns", "T", "n", "L", "G", "Ni", "Len", "Num", "NB", "NT", "NM", "Size", "NN", "Q", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "M", "F"], "result": ["unit", "ner", "grade", "success", "Result", "err", "su", "results", "ver", "data", "answer", "n", "valid", "array", "math", "arr", "correct", "con", "date", "acc", "number", "mate", "error", "function", "final", "mark", "default", "res", "b", "match", "func", "new", "other", "sign", "r", "order", "block", "count", "card"]}}
{"code": "H, N = map(int, input().split())\\nA = map(int, input().split())\\na_sum = sum(A)\\n\\nif H - a_sum <= 0:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "314", "substitutes": {"H": ["U", "SH", " h", "D", "HC", "E", "HP", "B", "OH", "T", "W", "HH", "HB", "Y", "L", "G", "EH", "h", "HS", "Q", "Ha", "X", "C", "HI", "V", "P", "K", "AH", "O", "M", "DH", "F", "Z"], "N": ["NA", "D", "NS", "E", "NE", "B", "Ns", "n", "W", "Y", "Ni", "Num", "NT", "NM", "NN", "No", "X", "NO", "C", "Ne", "NR", "V", "P", "K", "O", "M", "F", "Z"], "A": ["As", "U", "NA", "D", "S", "Alpha", "a", "B", "CA", "W", "At", "Y", "AD", "AM", "G", "L", "Am", "AS", "alpha", "BA", "SA", "An", "AP", "AN", "AA", "C", "V", "P", "API", "AF", "AH", "AB", "O", "M", "AC", "F", "LA"], "a_sum": ["a_num", " a_mean", "A_sum", " a_alpha", "a_count", " a_max", "a_max", "A_count", "a_alpha", "a_mean", "A_num"]}}
{"code": "s = input()\\nans = ''\\nfor si in s:\\n  if si=='0': ans+='0'\\n  elif si=='1': ans+='1'\\n  else: ans=ans[:-1]\\nprint(ans)", "target": "503", "substitutes": {"s": ["rs", "ls", "o", "states", "S", "c", "ins", "ws", "a", "ss", "opens", "n", "abs", "ads", "i", "cs", "outs", "ches", "g", "os", "comments", "ts", "ms", "rows", "ds", "ips", "gs", "lines", "sets", "f", "e", "scripts", "b", "ns", "es", "l", "sg", "groups", "m", "xs", "se", "words", "p", "hs"], "ans": ["aves", "ls", "x", "nas", "ins", "aos", "anks", "a", "ars", "ants", "aid", "amps", "ens", "ast", "args", "an", "parser", "man", "ads", "ats", " means", "anc", "asts", "ents", "ams", "sk", "na", "os", "sa", "comments", "anas", "ds", "ms", "ks", "ana", "nan", "span", "anes", "can", "lines", "cons", "arts", "AN", "cas", "aned", "leans", "ania", "ANS", "atan", "books", "ann", "lan", "ns", "ands", "scan", "es", "works", "aces", "ays", "params", "xs", "acs", "eps", "aus", "ons", "agents"], "si": ["ma", "di", " sa", "sta", "sit", " vi", "asi", "sci", "gi", "sp", "ci", "ses", "a", "ifi", " sid", "Si", "SI", "ini", "sie", "esi", "agi", "sis", "ni", "i", "bi", "ali", "sd", "ati", "ski", "sa", "isi", " SI", "edi", "fi", "ti", "ki", " i", "ai", "ta", " sd", "sid", "chi", "ii", " ss", "li", "shi", " Xi", "zi"]}}
{"code": "n = int(input())\\nS = list(map(int, input().split()))\\nq = int(input())\\nT = list(map(int, input().split()))\\n\\nSset = set(S)\\nTset = set(T)\\n\\nprint(len(Sset & Tset))\\n", "target": "316", "substitutes": {"n": ["o", "k", "j", "c", " N", "nb", "name", "ny", "ni", "i", "na", "nn", "nl", "nu", "nr", "f", "nt", "e", "b", "ns", "z", "v", "l", "m", "nc", "p", "ne", "N"], "S": ["U", "SE", "SH", "D", "SS", "Z", "NS", "R", "SK", "Ns", "TS", "Si", "SI", "s", "Y", "Es", "A", "L", "G", "SR", "SN", "AS", "ST", "Q", "X", "SU", "C", "V", "P", "SP", "H", "M", "F", "N", "Set"], "q": ["type", "o", "k", "x", "c", " Q", "E", "W", "Y", "i", "y", "iq", "g", "ts", "Q", "sq", "u", "f", "e", "b", "sh", "w", "V", "z", "v", "r", "H", "p", "Z"], "T": ["U", "D", "R", "E", "B", "TS", "W", "J", "Type", "Y", "t", "L", "G", "A", "TA", "PT", "Q", "LT", "I", "X", "C", "TG", "TT", "TX", "V", "P", "O", "TF", "M", "F", "N", "Z"], "Sset": [" Sname", " Sparse", "Scheck", "Sz", "Lparse", "SUSet", " Sz", "Tname", "SUz", "Tcheck", "Tz", " SSet", "Sparse", "Sname", " Scheck", "LSet", "SSet", "TSet", "Lname", "SUset", "Tparse", "Lset", "SUcheck"], "Tset": ["TGcase", "TGsection", "Ccase", "TESet", "TEsection", "FTcase", "FTSet", "CSet", " Tcase", "Tsection", "TGSet", "FTSET", "CSET", "FTset", "TGset", "TEcase", " Tsection", "TEset", "TSet", "Cset", " TSet", "TSET", " TSET", "Tcase"]}}
{"code": "def main():\\n    n = int(input())\\n    a_lst = list(map(int, input().split()))\\n    b_lst = list(map(int, input().split()))\\n    c_lst = list(map(int, input().split()))\\n    ans = 0\\n\\n    for a in a_lst:\\n        ans += b_lst[a - 1]\\n\\n    for i in range(n - 1):\\n        if a_lst[i] + 1 == a_lst[i + 1]:\\n            ans += c_lst[a_lst[i] - 1]\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "731", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "d", "nb", "ac", "s", "t", "ni", "y", "g", "count", "h", "nn", "span", "u", "len", "e", "f", "b", "ns", "q", "w", "z", "l", "v", "m", "nc", "p", "N"], "a_lst": ["a_slST", "a_llst", "a_Lrest", "a_lbl", "a_lsts", "a_llset", "a_Lst", "a_flst", "a_elstr", "a_lrest", "a_lST", "a_llST", "a_flsts", "a_lstr", "a_slbl", "a_flnd", "a_llnd", "a_slset", "a_Lbl", "a_elst", "a_flstr", "a_llbl", "a_elST", "a_llrest", "a_elbl", "a_Lstr", "a_lnd", "a_slst", "a_llstr", "a_llsts", "a_lset"], "b_lst": ["b_dsts", "b__dsts", "b__lbl", "b__dst", "b__dbl", "b_LST", "b__lst", "b_Lst", "b_dST", "b_llbl", "b_dst", "b_lsts", "b__lsts", "b__dST", "b_dest", "b_llST", "b_lest", "b_Lsts", "b_llest", "b_llsts", "b_lbl", "b_dbl", "b_llst", "b_lST", "b__lST", "b_Lbl"], "c_lst": ["c_fbl", "c_lsts", "c_llnt", "c_rsts", "c_vbl", "c_llast", "c_lbl", "c_fnt", "c_rst", "c_labl", "c_llbl", "c_llest", "c_lest", "c_lant", "c_fast", "c_vsts", "c_vest", "c_laast", "c_fst", "c_lnt", "c_llst", "c_vst", "c_rest", "c_rbl", "c_last", "c_llsts"], "ans": ["ls", "cus", "san", "aning", "anned", "ras", "nas", "ins", "ars", "ants", "aid", "amps", "an", "s", "anc", "ats", "asts", "cs", "ents", "anon", "sk", "annot", "na", "anas", "plan", "gan", "anse", "ana", "nan", "can", "anes", "AN", "cas", "aned", "leans", "atan", "ANS", "activation", "lan", "ann", "ns", "ane", "ends", "errors", "features", "ani", "aces", "ays", "annels", "ace", "acs", "eps", "aus", "ons"], "a": ["area", "o", "_", "x", "c", "ar", "ac", "wa", "af", "da", "an", "s", "A", "fa", "y", "alpha", "na", "sa", "aa", "ach", "u", "va", "f", "b", "ad", "ai", "z", "ba", "aaa", "l", "ea", "p", "au"], "i": ["pi", "di", "uri", "x", "xi", "j", "gi", "c", "ci", "d", "slice", "yi", "ri", "col", "phi", "ac", "io", "int", "ind", "ini", "ui", "bi", "id", "y", "h", "ix", "index", "ip", " c", "eni", "si", "u", "iu", "f", "e", "I", "ti", "b", "mi", "q", "ai", "z", "p", "qi", "l", "ii", "li"]}}
{"code": "from collections import defaultdict\\nfrom fractions import Fraction\\nN = int(input())\\nA = [0 for  _ in range(N)]\\nB = [0 for  _ in range(N)]\\nfor i in range(N):\\n    A[i], B[i] = [int(i) for i in input().split()]\\nA.sort()\\nB.sort()\\n\\nif N%2 == 1:\\n    target = ((N+1)//2)-1\\n    print(B[target]-A[target]+1)\\nelse:\\n    target1 = ((N)//2)-1\\n    target2 = (N)//2\\n    num1 = (A[target1]+A[target2])/2\\n    num2 = (B[target1]+B[target2])/2\\n    print(int(((num2-num1)/0.5)+1))", "target": "203", "substitutes": {"N": ["ND", "NA", "TW", "D", "S", "R", "NS", "E", " I", "NC", "NE", "Ns", "T", "n", "J", "num", "Y", "L", "G", "IN", "Len", "Num", "NB", "CNN", "NT", "NM", " n", "Size", "NN", "MN", "Q", "I", "X", "C", "Na", "Ne", "NUM", "NG", "V", "P", "OUT", "K", "Target", "KN", "O", "H", "M", "F", "Z"], "A": ["AR", "U", "Ac", "NA", "As", "Ca", "S", "Alpha", "a", "CA", "PA", "IA", "At", "Array", "Y", "AD", "AM", "L", "Am", "AL", "Ab", "Ma", "HA", "AS", "AI", "BA", "GA", "Ad", "SA", "OA", "AU", "EA", "Area", "AP", "Average", "Ar", "AA", "AE", "X", "App", "AST", "C", "MA", "P", "AF", "AH", "API", "AB", "AC", "AW", "And", "F", "Input", "AAA", "FA", "LA"], "_": ["out", "x", "d", "__", "long", "s", "val", "ip", "f", "code", "q", "length", "place", "p", "block", "count"], "B": ["Base", "D", "Tab", "BS", "BF", "BY", "BM", "R", "Other", "IB", "E", "LB", "Both", "Bi", "BB", "T", "UB", "TB", "BE", "Y", "L", "G", "Ab", "NB", "BA", "PB", "VB", "BD", "BI", "RB", "OB", "AP", "BL", "Bs", "GB", "BR", "DB", "QB", "WB", "BER", "CB", "Q", "b", "X", "SB", "C", "MB", "V", "P", "BC", "AB", "O", "M", "F"], "i": ["mini", "pi", "di", "uri", "ji", "k", "x", "xi", "j", "c", "gi", "ci", "d", "oi", " I", "ri", "ori", "pos", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "key", "h", "ix", "index", "ip", "eni", "si", "u", "iu", "e", "I", "ti", "b", "mi", "ai", "z", "p", "qi", "chi", "l", "ii", "li", "abi", "io", "zi"], "target": ["unit", "type", "grade", "step", "object", "current", "large", "effect", "dest", "arget", "value", "session", "src", "n", "direction", "remote", "root", "result", "site", "pointer", "id", "front", "width", "transform", "gap", "component", "offset", "version", "act", "parent", "source", "next", "null", "host", "rel", "net", "hop", "blank", "match", "select", "limit", "goal", "content", "position", "Target", "flat", "cross", "length", "category", "download"], "target1": ["sourcex", "date1", " targetOne", "target3", "source2", "goal1", "goal2", "destA", "date2", "sourceone", "targetone", "goalA", "source1", "targetOne", "numx", "targetA", "sourceOne", "goal3", "dest1", "dest3", "dest2", "type2", "source3", "numOne", "type1", "typeone", "dateOne", "dateone", "targetx", "typeOne", "sourceA", " targetx"], "target2": ["type10", "test2", "type5", "arget3", "arget5", "test0", "num5", "arget0", "parent3", "target3", "testii", "target62", "argetii", "arget2", " target0", "num10", "num72", " target72", " target3", "target5", "arget62", " target10", "arget10", "target0", " targetii", "target72", "test62", " target5", "parent5", "parent10", "targetii", "type2", " target62", "parent2", "target10", "type72"], "num1": ["net01", "numone", "param1", "paramp", " numa", "unitone", "paramone", "net1", "sumone", "unitOne", "unit1", "suma", "parama", "nam1", "nump", "nam01", " numone", "netOne", "numa", "namone", " nump", "namOne", "unit01", "netone", "numOne", "sum1", "num01", "sump"], "num2": ["binTwo", " numtwo", "bin2", "text2", "numTwo", "numB", "NUMtwo", "texttwo", "text1", " num4", "numtwo", "textB", "num4", "bintwo", "textTwo", "NUM4", "NUM2", "bin1", "text4", "NUMB", "targetTwo", " numB", "targettwo"]}}
{"code": "n,k,q=list(map(int,input().split()))\\na=[0 for _ in range(n)]\\nfor i in range(q):\\n  x=int(input())\\n  a[x-1] += 1\\nw=q-k+1\\nfor i in range(n):\\n  if a[i] >= w:\\n    print('Yes')\\n  else:\\n    print('No')\\n", "target": "336", "substitutes": {"n": ["o", "j", "c", "d", "name", "num", "s", "t", "y", "na", "g", "h", "nu", "u", "size", "f", "e", "b", "ns", "no", "z", "v", "l", "m", "r", "p", "ne", "N"], "k": ["o", "ke", "j", "c", "d", "ek", "y", "sk", "g", "h", "ks", "u", "f", "e", "max", "b", "z", "K", "v", "l", "m", "r", "p", "km"], "q": ["o", "j", "c", "d", "question", "qs", "quant", "num", "t", "id", "y", "quality", "g", "h", "query", "Q", "sq", "eq", "u", "f", "e", "max", "qq", "z", "qi", "v", "l", "m", "p", "qu", "dq", "count"], "a": ["area", "o", "c", "aw", "ac", "data", "wa", "mA", "an", "s", "array", "A", "y", "alpha", "sa", "ia", "aa", "u", "va", "f", "e", "b", "am", "ad", "ans", "ai", "ae", "z", "asa", "v", "aj", "m", "p", "au"], "_": ["j", " p", "ind", "num", " int", "id", "ix", "ip", "u", "f", "I", "p"], "i": ["pi", "di", "o", "ji", "xi", "j", "c", "ci", "d", "io", "start", "int", "ind", "t", "ni", "bi", "y", " j", "ix", "index", "ip", "si", "u", "iu", "e", "I", "f", "ti", "b", "ai", "z", "qi", "v", "l", "ii", "li", "ei", "m", "p", "zi"], "x": ["o", "xi", "j", "c", "ci", "d", "wa", "int", "t", "y", "ax", "h", "ix", "index", "xc", "u", "f", "e", "dx", "b", "X", "xx", "z", "v", "l", "p"], "w": ["wp", "o", "iw", "c", "aw", "d", "ws", "wa", "ac", "W", "ww", "t", "y", " W", "nw", "sw", "g", "h", "wal", "ew", "u", "e", "max", "b", "wx", "z", "v", "l", "r", "m", "p", "wu"]}}
{"code": "from bisect import bisect_left as bl, bisect_right as br, insort\\nimport sys\\nimport heapq\\n# from math import *\\nfrom collections import defaultdict as dd, deque\\ndef data(): return sys.stdin.readline()\\ndef mdata(): return map(float, data().split())\\nout = sys.stdout.write\\n# sys.setrecursionlimit(100000)\\nINF = int(1e9)\\nmod = int(1e9) + 7\\n\\nn = int(data())\\nP = list(mdata())\\ndp = [0.0] * (n // 2 + 2)\\ndp[1] = float(1)\\nfor i in range(n):\\n    p=P[i]\\n    for j in range(len(dp) - 1, 0, -1):\\n        dp[j] = dp[j - 1] * (1 - p) + dp[j] * (p)\\nprint(sum(dp))\\n", "target": "437", "substitutes": {}}
{"code": "import math\\n\\nwhile True:\\n    n = int(input())\\n    if n == 0:\\n        break\\n    sn = [int(s) for s in input().split()]\\n    m = sum(sn) / n\\n    a2 = 0.0\\n    for s in sn:\\n        a2 += pow(s-m, 2)\\n    print(math.sqrt(a2/n))", "target": "683", "substitutes": {"n": ["o", "cn", "k", "al", "x", "j", "c", "d", "nm", "nb", "all", "num", "t", "ni", "i", "y", "mn", "na", "g", "nn", "un", "null", "u", "len", "net", "e", "f", "nt", "fn", "b", "ns", "pn", "z", "dn", "l", "v", "r", "nc", "ln", "p", "M", "ne", "N"], "sn": ["ls", "loc", "kn", "ess", "cn", "sit", "su", "std", "voc", "nb", "ss", "ny", "sl", "src", "Sn", " SN", "ll", "SN", "sd", "sk", "sw", "na", "sa", "inn", "nn", "source", "wn", "si", "seq", "size", "chn", "fn", "ann", "ns", "sm", "sb", "sh", "sv", " sw", "sc", "bb", "nc", "ln", "sr"], "s": ["ls", "o", "S", "sit", "su", "c", "sp", "d", "ins", "ses", "sum", "a", "start", "ss", "als", "pos", "sl", "abs", "ens", "an", "num", "space", "ats", "i", "cs", "y", "mn", "sk", "sw", "bs", "os", "sa", "g", "h", "ds", "ms", "gs", "stat", "sq", "sav", "si", "u", "spec", "f", "e", "sym", "ys", "b", "ns", "ans", "sm", "es", "sb", "w", "sv", "sid", "l", "sg", "stats", "r", "p"], "m": ["o", "j", "c", "d", "nm", "sum", "a", "i", "y", "mn", "g", "h", "ms", "md", "cm", "size", "e", "f", "b", "ns", "sm", "w", "z", "l", "v", "r", "M", "p", "bm", "N"], "a2": ["A1", "A6", "a52", " a256", " a02", "aa6", "A5", " a1", "a5", "ga1", "ga2", "a6", "A2", "aa256", "p5", "aa5", "a02", "ea52", "aa1", " a6", "ga02", " a52", "ga5", "a1", "p02", "aa52", "ea256", " a5", "p2", "a256", "aa2", "ea2", "p1"]}}
{"code": "N, M = map(int, input().split())\\nQ = [tuple(map(int, input().split())) for _ in range(M)]\\n\\n# \u53f3\u5074\u304c\u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3001\u5236\u7d04a<b\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3088\u3044\\nQ = sorted(Q, key=lambda x: x[1])\\n# \u5883\u754c\u3001\u53f3\u5074\u306e\u533a\u9593\u306e\u59cb\u307e\u308a\\nborder = -1\\nans = 0\\n\\nfor a, b in Q:\\n    # \u65e2\u5b58\u306e\u5883\u754c\u3067\u5206\u3051\u3089\u308c\u306a\u3044\u3068\u304d\u306f\u53f3\u306b\u305a\u3089\u3059\\n    if border <= a:\\n        ans += 1\\n        border = b\\n\\nprint(ans)", "target": "219", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "E", "B", "T", "n", "J", "W", "Y", "L", "CNN", " n", "NN", "MN", "I", "X", "C", "NI", "V", "P", "K", "O", "F", "Z"], "M": ["U", "LM", "D", "S", "MQ", "R", "E", "B", "T", "W", "n", "Y", "L", "G", "NM", "MD", "MN", "MON", "I", "X", "C", "V", "P", "MM", "K", "m", "O", "H", "F", "CM", "Z"], "Q": ["U", "D", "S", "MQ", "R", "E", "B", "T", "J", "Y", "A", "L", "I", "X", "C", "q", "V", "P", "K", " q", "O", "H", "F", "Z"], "_": [" __", "x", " un", "__", " time", "id", " j", " row", "q", "m"]}}
{"code": "X,Y,Z,K = map(int,input().split())\\nA=list(map(int,input().split()))\\nB=list(map(int,input().split()))\\nC=list(map(int,input().split()))\\nA.sort(reverse=True)\\nB.sort(reverse=True)\\nC.sort(reverse=True)\\n\\nfrom collections import defaultdict\\ndone = defaultdict(lambda:False)\\nimport heapq\\nq = [(-A[0]-B[0]-C[0],0,0,0)]\\nheapq.heapify(q)\\n\\nfor _ in range(K):\\n    ma,i,j,k = heapq.heappop(q)\\n    if not done[(i+1,j,k)] and i<X-1:\\n        done[(i+1,j,k)]=True\\n        heapq.heappush(q,(-A[i+1]-B[j]-C[k] , i+1,j,k))\\n    \\n    if not done[(i,j+1,k)] and j<Y-1:\\n        done[(i,j+1,k)]=True\\n        heapq.heappush(q,(-A[i]-B[j+1]-C[k] , i,j+1,k))\\n    \\n    if not done[(i,j,k+1)] and k<Z-1:\\n        done[(i,j,k+1)]=True\\n        heapq.heappush(q,(-A[i]-B[j]-C[k+1] , i,j,k+1))\\n    print(-ma)", "target": "403", "substitutes": {"X": ["U", "D", "S", "ZX", "Width", "x", "R", "XX", "T", "W", "J", "L", "ZZ", "Q", "I", "XY", "XL", "V", "P", "XP", "O", "H", "M", "IX", "F", "N"], "Y": ["U", "NY", "SH", "D", "S", "Time", "R", " y", "E", "Cy", "Zip", "T", "W", "J", "Az", "L", "G", "y", "AY", "IP", "YC", "Q", "I", "XY", "V", "TY", "P", "O", "H", "M", "YY", "F", "CH", "N"], "Z": ["SH", "D", "S", "ZX", "Time", "SK", "XX", "ZA", "Zip", "T", "W", "SI", "Az", "L", "ZE", "Zero", "Size", "IP", " z", "ZZ", "Q", "AZ", "Zone", "V", "OS", "z", "CC", "EC", "ID", "AF", "TH", "O", "H", "M", "YY", "F", "CH", "N", "CL"], "K": ["U", "KI", "KR", "D", "S", "R", "E", "SK", "KT", "T", "KE", "W", "J", "G", "L", "KK", "HK", "Q", "PK", "I", "V", "P", "EC", "KB", "O", "KS", "H", "M", "KC", "F", "CH", "N"], "A": ["As", "U", "Ac", "NA", "Ca", "AR", "S", "Application", "Java", "Alpha", "a", "Auth", "CA", "Data", "T", "W", "mA", "Action", "Array", "Az", "AM", "L", "G", "AL", "AD", "HA", "AY", "BA", "GA", "Front", "AU", "An", "Area", "AP", "Q", "Ar", "I", "AA", "The", "AST", "MA", "Na", "App", "P", "API", "AF", "AH", "AB", "O", "AC", "H", "And", "F", "N", "LA"], "B": ["U", "Two", "Base", "EB", "D", "S", "BS", "Be", "BF", "R", "Other", "E", "Pl", "LB", "Ub", "Both", "Bi", "BB", "T", "W", "BE", "BBC", "L", "G", "NB", "Ab", "BA", "PB", "BI", "RB", "OB", "GB", "Bs", "Q", "QB", "DB", "WB", "CB", "I", "b", "UD", "V", "Bal", "P", "MB", "BC", "O", "H", "M", "F", "Beta", "N"], "C": ["U", "CI", "D", "CL", "CD", "c", "E", "CT", "CA", "T", "CU", "L", "G", "CNN", "JC", "YC", "CF", "Q", "SC", "CS", "Sc", "Cloud", "DC", "V", "Cache", "P", "CC", "Cs", "CP", "BC", "CR", "Ch", "Cu", "H", "F", "CM", "CE", "N"], "done": ["released", " do", "db", "de", "given", " handled", "progress", "own", "enabled", "des", "next", "ordered", "locked", "needed", " Done", "loaded", " complete", "handled", "announced", "later", "confirmed", "Done", "due", "d", "edited", "only", "data", "dest", "graded", "worked", "result", "do", "used", "default", " promise", "code", "none", "no", "started", " code", "tested", "generated", "lost", "expected", "redo", "ie", "complete", "models", "fun", "connected", "shown", "led", " completed", " seen", "kept", "initialized", "dirty", " dup", " later", "finished", "init", "built", " dirty", "did", "made", " combo", "success", " continued", "paid", "side", " failed", "failed", "multiple", " processed", "successful", "checked", "foo", " finished", "one", "odo", " result", "found", "now", "got", "defined"], "q": ["it", " h", "qt", "sync", "input", "c", " Q", " query", "d", "question", " p", "bug", "queue", "complete", " cache", " queue", "view", "ck", "qs", "quant", "cache", "quest", "config", "ch", "que", "quit", "id", "iq", "get", "quick", "requ", "check", "qa", "g", "client", "h", "query", "request", " z", "comp", "Q", "sq", " queries", "u", "f", "qq", "like", "z", "qi", "form", " sq", "v", "m", "p", "req", "qu", "dq"], "_": ["out", " __", " un", "__", "non"], "ma": ["ha", "mma", "ya", "ima", "mad", "wa", "pa", "da", "meta", "fa", "ema", "alpha", "Ma", "na", "qa", "sa", "ia", "za", "la", "si", "ja", "mu", "f", "sha", "ca", "mas", "ki", "MA", "mm", "ga", "no", "ta", "m", "ka", "LA"], "i": ["ik", "pi", "it", "ji", "o", "uri", "di", "x", "xi", "c", "ci", "yi", "oi", "ri", "a", "io", "ie", "ori", "int", "ini", "ui", "ni", "info", "id", "y", "bi", "api", "ix", "index", "ia", "ip", "isi", "eni", "si", "u", "iu", "fi", "e", "I", "ti", "b", "mi", "hi", "ki", "ai", "z", "chi", "qi", "l", "ii", "ic", "m", "li", "ei", "p", "zi"], "j": ["el", "ik", "it", "ji", "o", "js", "ke", "x", "oh", "c", "er", "d", "ak", "ijk", "a", "jon", "ie", "jc", "ny", "oj", "n", "J", "ui", "ch", "y", "key", "ah", "ax", "h", "ij", "ix", "jl", "py", "jo", "zip", "br", "u", "em", "ja", "jet", "je", "f", "adj", "b", "jj", "e", "obj", "ki", "sh", "z", "qi", "json", "v", "jp", "ii", "l", "m", "aj", "li", "fr", "p", "uj"], "k": ["ik", "o", "kn", "ke", "x", "kk", "c", "d", "ak", "ijk", "ky", "a", "kh", "n", "mk", "ek", "s", "kick", "ck", "ch", "id", "y", "ph", "key", "sk", "g", "h", "ok", "ks", "kid", "uk", "km", "dk", "ko", "kin", "u", "e", "f", "b", "ki", "gh", "kw", "kind", "z", "w", "v", "l", "m", "r", "p", "kr", "ka", "kt", "ku"]}}
{"code": "import heapq\\n\\nn = int(input())\\na = list(map(int, input().split()))\\ndp = [0] * (pow(10, 6) + 5)\\nheapq.heapify(a)\\nheapq.heappush(a, 1000003)\\nans = -1\\ny = 0\\nfor _ in range(n + 1):\\n    x = heapq.heappop(a)\\n    if x == y and dp[x] == 2:\\n        dp[x] = 1\\n        ans -= 1\\n        continue\\n    elif dp[x] == 0:\\n        ans += 1\\n        dp[x] = 2\\n        i = 2\\n        while i * x <= 1000000:\\n            dp[i * x] = 1\\n            i += 1\\n    y = x\\nprint(ans)", "target": "268", "substitutes": {"n": ["o", "k", "j", "c", "d", " N", "nb", " p", "num", "s", "t", "g", "h", "network", " na", "nan", "nn", "span", "number", "u", "N", "f", "nt", "e", "b", "ns", "w", "z", "l", "r", "m", "nc", "p", "count", "conn"], "a": ["area", "access", "input", "c", "aw", "d", "ac", "ab", "pa", "args", "da", "s", "an", "array", "A", "alpha", "api", "sa", "aa", "u", "e", "b", "ad", "ca", "am", "ga", "ae", "aaa", "ba", "ea", "ada", "m", "p", "au"], "dp": ["wp", "df", "di", "pi", "tp", "dt", "pid", "dos", "lp", "pb", "px", "pg", "db", "dq", "np", "d", "port", "phi", "pd", "pair", "data", "diff", "pos", "upp", "pa", "int", "umpy", "amp", "hp", "DP", "pkg", "wd", "alpha", "api", "fd", "dim", "ds", "do", "cp", "dh", "dr", "dc", "ip", "tmp", "rep", "density", "pp", "address", "xd", "ga", "dl", "ai", "pm", "drop", "dm", "ep", "params", "patch", "deb", "xs", "dat", "p", "gp", "fp"], "ans": ["ls", "amp", "ci", "nas", "ins", "ants", "ss", "aid", "amps", "an", "s", "ads", "man", "anc", "ats", " means", "cs", "ians", "anon", "gd", "sk", "na", "os", "rans", "anas", "plan", "ds", "ay", "ana", "nan", "can", "ies", "AN", "cas", "aned", "anne", "ANS", "lan", "ann", "ns", "ys", "ps", "xx", "ki", "es", "works", "ani", "ai", "ays", "annels", "params", "mean", "yes", "xs", "eps", "p", "any"], "y": ["ey", "o", "wy", "iy", "ya", "cy", "c", "d", "yi", "oy", "yn", "xy", "ky", "ry", "year", "s", "Y", "ye", "t", "yr", "dy", "g", "ay", "ym", "ies", "py", "yt", "u", "e", "f", "ys", "b", "my", "yd", "uy", "yy", "w", "z", "v", "m", "p", "vy"], "_": ["k", " __", "j", "__", " time", "time", "g", " j", "un", "ip", "f", "I"], "x": ["work", "xi", "j", "c", "t", "python", "xxx", "h", "rx", "fx", "f", "dx", "z", "p", "full", "xp", "px", "plus", "d", "wa", "lex", "an", "id", "yx", "ix", "code", "hi", "xes", "cross", "php", "xy", "event", "int", "ww", "s", "xe", "xxxx", "index", "ex", "xc", "u", "e", "X", "xx", "wx", "v", "l", "pe", "xs", "ya", "name", "pos", "xb", "Y", "tx", "on", "sw", "xa", "ax", "xt", "b", "my", "w", "any"], "i": ["pi", "di", "o", "k", "xi", "j", "c", "gi", "ci", "d", "yi", "phi", "ri", "ini", "ui", "ni", "bi", "ix", "index", "si", "u", "iu", "fi", "f", "I", "ti", "e", "b", "hi", "ai", "z", "qi", "l", "v", "ii", "li", "ei", "m", "p", "zi"]}}
{"code": "import sys, re, os\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, acos, atan, asin, log, log10, gcd\\nfrom itertools import permutations, combinations, product, accumulate, combinations_with_replacement\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\n#from fractions import gcd\\ndef debug(*args):\\n    if debugmode:\\n        print(*args)\\ndef input(): return sys.stdin.readline().strip()\\ndef STR(): return input()\\ndef INT(): return int(input())\\ndef FLOAT(): return float(input())\\ndef MAP(): return map(int, input().split())\\ndef S_MAP(): return map(str, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef S_LIST(): return list(map(str, input().split()))\\ndef lcm(a, b): return a * b // gcd(a, b)\\nsys.setrecursionlimit(10 ** 9)\\ninf = sys.maxsize\\nmod = 998244353\\ndx = [0, 1, 0, -1, 1, -1, -1, 1]\\ndy = [1, 0, -1, 0, 1, -1, 1, -1]\\ndebugmode = True\\n\\nn2 = [1 for _ in range(3010)]\\nfor i in range(1, 3010):\\n    n2[i] = n2[i - 1] * 2 % mod\\n\\nn, s = MAP()\\na = LIST()\\ndp = [[0 for _ in range(s + 1)] for _ in range(n)]\\nif s >= a[0]:\\n    dp[0][a[0]] = 1\\nfor i in range(1, n):\\n    for j in range(1, min(s + 1, a[i])):\\n        dp[i][j] = dp[i - 1][j] * 2\\n        dp[i][j] %= mod\\n    if a[i] <= s:\\n        dp[i][a[i]] = dp[i - 1][a[i]] * 2 + n2[i]\\n        dp[i][a[i]] %= mod\\n    for j in range(a[i] + 1, s + 1):\\n        dp[i][j] = dp[i - 1][j] * 2 + dp[i - 1][j - a[i]]\\n        dp[i][j] %= mod\\nprint(dp[n - 1][s])\\n", "target": "681", "substitutes": {}}
{"code": "#!/usr/bin/env pypy3\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\nimport queue\\n\\ndef main():\\n    mod=10**9+7\\n    N=I()\\n    adj=[[] for _ in range(N)]\\n    for i in range(N-1):\\n        a,b=MI()\\n        a-=1\\n        b-=1\\n        adj[a].append(b)\\n        adj[b].append(a)\\n    bit=[-1]*N#\u672a\u78ba\u8a8d,F,S    \\n    bit[0]=0\\n    bit[-1]=1\\n    pL=[0]*N\\n    dS=0\\n    \\n    q=queue.Queue()\\n    q.put((0,0,0))#v.pare,depth\\n    \\n    #\u6df1\u3055\u3092\u8abf\u3079\u308b\\n    while not q.empty():\\n        v,p,d=q.get()\\n        pL[v]=p\\n        if v==N-1:\\n            dS=d\\n            break\\n        for i in range(len(adj[v])):\\n            nv=adj[v][i]\\n            if nv!=p:\\n                q.put((nv,v,d+1))\\n    \\n    #\u4e3b\u8981\u306a\u3068\u3053\u308d\u3092\u5857\u308b            \\n    v=N-1            \\n    for _ in range((dS-1)//2):\\n        v=pL[v]\\n        bit[v]=1\\n        \\n    q2=queue.Queue()\\n    q2.put((0,0))#v.pare\\n    while not q2.empty():\\n        v,p=q2.get()\\n        if bit[v]==-1:\\n            bit[v]=bit[p]\\n\\n        for i in range(len(adj[v])):\\n            nv=adj[v][i]\\n            if nv!=p:\\n                q2.put((nv,v))\\n        \\n        \\n                    \\n    s=sum(bit)#sunuke\u304c\u5857\u308c\u308b\\n    if s>=N-s:\\n        print(\"Snuke\")\\n    else:\\n        print(\"Fennec\")\\n     \\n        \\n    \\n    \\n\\nmain()\\n", "target": "435", "substitutes": {}}
{"code": "# coding: utf-8\\nimport sys\\n\\nsr = lambda: sys.stdin.readline().rstrip()\\nir = lambda: int(sr())\\nlr = lambda: list(map(int, sr().split()))\\n\\nS = sr()\\nK = ir()\\ncand = set()\\nlength = len(S)\\nfor i in range(length):\\n    for j in range(1, 6):\\n        cand.add(S[i:i+j])\\n\\nanswer = sorted(list(cand))[K-1]\\nprint(answer)\\n", "target": "246", "substitutes": {}}
{"code": "h, w = map(int, input().split())\\ns = []\\nfor _ in range(h):\\n    s.append(list(input()))\\nfor i in range(h):\\n    for j in range(w):\\n        a = 0\\n        if s[i][j] == '.':\\n            for k in range(i - 1, i + 2):\\n                for l in range(j - 1, j + 2):\\n                    if (0 <= k and k <= h - 1) and (0 <= l and l <= w - 1) and s[k][l] == '#':\\n                        a += 1\\n            s[i][j] = str(a)\\nfor m in range(h):\\n    print(''.join(s[m]))", "target": "615", "substitutes": {"h": ["o", "ha", "x", "oh", "c", "d", "ht", "n", "rh", "t", "id", "y", "ph", "g", "ah", "hd", "th", "host", "u", "f", "e", "hr", "b", "hi", "q", "sh", "z", "v", "hm", "r", "H", "he", "ih", "p", "hs"], "w": ["x", "wl", "c", "d", "ws", "wa", "W", "n", "ww", "wt", "t", "wd", "y", "width", "sw", "g", "we", "wal", "win", "ew", "wb", "u", "e", "f", "b", "wx", "q", "sh", "z", "v", "r", "p"], "s": ["services", "parts", "o", "fs", "ls", "js", "S", "ings", "ssl", "x", "c", "events", "results", "d", "ins", "ses", "ws", "ss", "images", "sl", "n", "abs", "qs", "ows", "strings", "g", "os", "blocks", "gs", "sites", "items", "south", "si", "u", "sets", "e", "f", "b", "ps", "ns", "ans", "es", "ions", "sb", "v", "groups", "r", "xs", "words", "p", "seconds"], "_": ["ik", "o", "x", "work", "ac", "ck", "id", "g", " x", "ow", "ip", "f", "am", "b", "q", "v", "p"], "i": ["ik", "pi", "o", "ji", "x", "xi", "c", "ci", "d", "yi", "phi", "ie", "int", "ind", "n", "ini", "ui", "id", "y", "ir", "ip", "si", "u", "iu", "e", "I", "f", "b", "hi", "im", "ai", "z", "v", "ii", "li", "p", "vi"], "j": ["el", "o", "ji", "x", "d", "kl", "jc", "jon", "ie", "n", "J", "t", "y", "g", "jl", "jo", "u", "ja", "f", "e", "je", "b", "jj", "q", "z", "v", "jp", "ii", "li", "r", "aj", "p"], "a": ["ma", "area", "c", "aw", "ac", "wa", "af", "pa", "n", "da", "an", "A", "fa", "y", "alpha", "sa", "offset", "ana", "ia", "aa", "u", "va", "f", "am", "b", "ca", "ga", "ai", "ae", "z", "ba", "aaa", "ea", "aj", "p", "au"], "k": ["ik", "o", "kn", "ke", "x", "kk", "c", "d", "ak", "kl", "n", "ck", "t", "ch", "id", "y", "ph", "sk", "g", "ok", "ks", "dk", "ko", "u", "f", "e", "b", "q", "kw", "z", "K", "v", "r", "p", "km", "ku"], "l": ["el", "lp", "ls", "ji", "o", "ol", "x", "wl", "lf", "c", "d", "kl", "ell", "sl", "n", "ll", "t", "L", "y", "g", "lv", "jl", "nl", "la", "il", "u", "lb", "f", "e", "b", "z", "v", "lc", "li", "lu", "ln", "p"], "m": ["pi", "o", "c", "gm", "vm", "n", "y", "machine", "g", "ym", "km", "cm", "ip", "u", "e", "f", "mu", "am", "b", "mi", "sm", "mm", "im", "pm", "z", "dm", "v", "li", "r", "M", "p", "bm"]}}
{"code": "s=set(input())\\nfor i in range(97,97+26):\\n    c=chr(i)\\n    if not c in s:\\n        print(c)\\n        exit()\\nprint('None')\\n", "target": "767", "substitutes": {"s": ["ls", "o", "fs", "S", "x", "fts", "d", "ses", "a", "ss", "n", "abs", "ops", "ows", "cs", "ches", "os", "ds", "ks", "ode", "gs", "si", "u", "f", "e", "b", "ps", "ns", "es", "l", "v", "xs", "se", "p"], "i": ["pi", "k", "x", "xi", "j", "ci", "d", "phi", "a", "int", "ind", "n", "ui", "ch", "bi", "id", "count", "val", "index", "si", "u", "e", "I", "ti", "f", "b", "ai", "z", "l", "ii", "li", "r", "m", "p", "zi"], "c": ["cur", "o", "loc", "mc", "x", "ci", "d", "col", "esc", "ac", "uc", "bc", "fc", "n", "cc", "ce", "anc", "ch", "cs", "ec", "con", "abc", "cp", "ct", "dc", "channel", "char", "xc", "u", "f", "e", "toc", "b", "code", "unc", "C", "rec", "icc", "arc", "cr", "lc", "l", "v", "ic", "r", "m", "pc", "p", "enc"]}}
{"code": "lst = [0] * 5\\nfor _ in range(3):\\n    a, b = map(int, input().split())\\n    lst[a] += 1\\n    lst[b] += 1\\n\\nif lst.count(2) == 2:\\n    print ('YES')\\nelse:\\n    print ('NO')\\n\\n", "target": "662", "substitutes": {"lst": ["plst", "plST", " lset", "llST", "olbl", "llst", " ilst", "elset", " lbl", "elbl", "Lsts", "rlstr", "llbl", "llsts", "lset", "LST", "rlsts", "lbl", "lST", "Lst", "olsts", "Lbl", "rlST", "rlst", " lsts", "plbl", "plsts", " ilset", " lST", " ilbl", "lstr", "lsts", "olST", "Lstr", "elST", " lstr", "olst", "elst", " ilST"], "_": ["el", " __", "x", "j", " p", "__", " g", " time", "n", "num", " j", " z", "f", " k", "l"], "a": ["area", "k", "x", "c", "d", "ar", "ab", "ac", "art", "af", "int", "n", "da", "an", "A", "i", "y", "na", "sa", "offset", "aa", "la", "u", "va", "e", "f", "ad", "ca", "ai", "ae", "w", "l", "aj", "p"], "b": ["o", "eb", "k", "mb", "x", "j", "c", "d", "ob", "ab", "B", "n", "s", "A", "bi", "i", "y", "bs", "h", "url", "aa", "lb", "u", "e", "f", "sb", "w", "ba", "l", "v", "r", "bb", "emb", "p", "count"]}}
{"code": "from typing import List\\n\\n\\ndef answer(n: int, k: int, xs: List[int]) -> int:\\n    moving_distance = 0\\n    reference_value = k / 2\\n    for x in xs:\\n        if x <= reference_value:\\n            moving_distance += x * 2\\n        else:\\n            moving_distance += (k - x) * 2\\n\\n    return moving_distance\\n\\n\\ndef main():\\n    n = int(input())\\n    k = int(input())\\n    xs = list(map(int, input().split()))\\n    print(answer(n, k, xs))\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "446", "substitutes": {"moving_distance": ["moving\u00b7distance", "moving_quality", "reading_quality", "reading_distance", "moving\u00b7length", "moving\u00b7max", "moving_range", "moving_dist", "moving_length", "moving_progress", " moving_length", " moving_dist", " moving_max", "moving_max", "moving67progress", "moving67length", "moving\u00b7quality", "reading_dist", "moving67distance", "moving\u00b7dist", "reading_direction", "moving_direction", "reading_range", "reading_progress", "moving67dist", "reading_length"], "reference_value": [" reference_index", "reference2val", "referenceingindex", "referenceingfunction", "reference_val", "reference_index", "reference2value", "reference2function", " reference_function", "referenceingvalue", "reference_function", " reference_val"], "x": [" v", "xp", "_", "xi", "j", "c", "px", "d", " y", "xy", "event", "int", "all", "t", " xx", "i", "y", " X", "tx", "key", "xxx", "g", "h", "yx", "xxxx", "rx", "ct", " f", "ix", " z", "index", " xp", " c", "ex", "xc", "f", "e", "X", "xx", "xes", "q", "w", "z", "l", "v", "cross", "m", "p"], "n": ["o", "kn", "cn", "j", "c", "d", "nb", "pos", "ind", "an", "num", "i", "y", "nw", "na", "en", "nn", "nan", "nu", "number", "nr", "u", "net", "fn", "nt", "b", "ns", "pn", "sn", "no", "z", "l", "v", "m", "nc", "p", "ne", "N", "conn"], "k": ["ik", "o", "kn", "ke", "work", "j", "kk", "c", "d", "ak", "ijk", "mk", "ck", "ek", "kick", "num", "i", "id", "y", "key", "sk", "ka", "unk", "h", "ok", "ks", "kid", "dk", "ko", "u", "f", "max", "b", "ki", "q", "kw", "z", "K", "kb", "v", "m", "ih", "p", "km", "ku"], "xs": ["kids", "ls", "codes", "xp", "xi", "px", "ctx", "xy", "ins", "reads", "opens", "vs", "args", "qs", "s", "icks", "ints", "cs", "ches", "xa", "xxx", "xt", "ds", "cells", "rx", "ips", "ks", "ids", "fx", "vals", " xp", "lines", "items", "ex", "amples", "ics", "xc", "issues", "X", "xx", "ns", "ps", "iffs", "xes", "wx", "tests", "features", "aces", "w", "z", "ims", "apps", "eps", "p", "hs", "pps"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\nINF = float(\"inf\")\\n\\n\\ndef solve(N: int, M: int, S: str):\\n\\n    S = S[::-1]\\n    data = [0]*(N+1)\\n    past = 0\\n    for i in range(N+1):\\n        if S[i] == \"1\":\\n            data[i] = past\\n        else:\\n            past = i\\n    ans = []\\n    curr = 0\\n    while True:\\n        ne = curr+M\\n        if ne >= N:\\n            ans.append(N-curr)\\n            break\\n        if S[ne] == \"1\":\\n            ne = data[ne]\\n            if ne <= curr:\\n                print(-1)\\n                return\\n        ans.append(ne - curr)\\n        curr = ne\\n    print(*reversed(ans), sep=\" \")\\n    return\\n\\n\\ndef main():\\n\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    M = int(next(tokens))  # type: int\\n    S = next(tokens)  # type: str\\n    solve(N, M, S)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "677", "substitutes": {}}
{"code": "import math\\n\\nA,B,H,M = map(int,input().split())\\nx = H*60+M\\ny = x/2\\nz = 6*M\\na = abs(y-z)\\nif a > 180:\\n    a = 360 - a\\nc_2 = A**2 + B**2 - 2*A*B*(math.cos(math.radians(a)))\\nprint(math.sqrt(c_2))\\n", "target": "290", "substitutes": {"A": ["As", "U", "D", "S", " AA", "E", "Alpha", "T", "PA", "W", "Y", " C", "L", "G", "AM", "alpha", "SA", "TA", "AP", "LA", "Q", "I", "AA", "X", "C", "MA", "V", "P", "AH", "AC", "F", "N", "Z"], "B": ["U", " b", "D", "S", "R", "E", "T", "W", "J", "Y", "L", "G", "BA", "Q", "GB", "Bs", "WB", "I", "AA", "b", "X", "C", "SB", "V", "MB", "P", "BC", "AB", "O", "F", "N", "Z"], "H": ["U", "D", "S", "E", "HP", "RH", "T", "W", "HH", "J", "Y", "G", "L", "h", "Q", "I", "X", "C", "MH", "HI", "V", "P", "K", "TH", "m", "O", "F", "N", "Z"], "M": ["U", "D", "S", "R", "E", "OM", "T", "W", "J", "Y", "G", "L", "MD", "MS", "Q", "I", "b", "X", "MI", "C", "MH", "V", "MB", "P", "MM", "K", "Me", "m", "O", "F", "N", "Z"], "x": ["height", "k", "px", "c", "d", "int", "n", "Y", "t", "i", "width", "ax", "h", "ix", "u", "e", "f", "b", "X", "xx", "hi", "w", "v", "l", "m", "xs", "p"], "y": ["ey", " h", "k", "ya", "j", "c", "cy", "d", "xy", "ny", " ya", "n", "Y", "ye", "i", "dy", "h", "ay", " cy", "ym", " py", "f", "e", "b", "my", "xx", " dy", "hi", "mm", "yy", "w", "l", " Y", "v", "m", "p", "vy"], "z": [" m", " b", " h", "j", "c", "d", "phi", "n", "Y", "zy", "i", "h", " Z", " c", "zh", "size", "f", "b", "hi", "C", "mm", "q", "w", "v", "l", "m", "p", "zi", "Z"], "a": ["ma", "area", " b", " sa", "ha", " pa", " fa", " ta", "c", "aw", "d", "angle", "ac", "wa", "ab", "any", "pa", " ya", "mA", "da", "n", "an", "i", "alpha", "xa", "sa", "ax", "h", "ana", "aa", "la", " da", " area", "va", "e", "f", "AA", "b", "am", "ca", "ad", "ho", "ga", "ai", "ae", "ta", "asa", "ba", "aaa", "w", "ada", "aj", "ea", "m", "l", "p", "aea", "au"], "c_2": [" c_72", "c_two", "c_1", "C_1", "cLogtwo", "c02", "C_2", "cLog2", "c0two", "C_two", " c_two", "c04", "c_72", "c01", "C_4", "cLog72", "c_4"]}}
{"code": "x=int(input())\\nif x>=1200:\\n  print(\"ARC\")\\nelse:\\n  print(\"ABC\")", "target": "376", "substitutes": {"x": ["work", "xi", "exp", "c", "j", "event", "int", "fix", "ww", "t", "xxxxxxxx", "tx", "y", "check", "xxx", "g", "val", "ax", "h", "xe", "rx", "ex", "xc", "u", "f", "max", "b", "code", "X", "xx", "wx", "z", "v", "m", "xs", "r", "p", "cl"]}}
{"code": "A, B = map(int, input().split())\\nif (A - B) % 2 == 1:\\n  print(\"IMPOSSIBLE\")\\nelse:\\n  print((A+B)//2)\\n", "target": "83", "substitutes": {"A": ["U", "NA", "D", "S", "E", "Alpha", "a", "CA", "T", "PA", "W", "mA", "Y", "L", "AM", "G", "SA", "EA", "RA", "AP", "I", "AA", "X", "C", "MA", "P", "API", "AB", "O", "AC", "M", "H", "F", "N", "LA"], "B": ["Base", "EB", "D", "BS", "BF", "IB", "E", "LB", "Bi", "BB", "T", "UB", "TB", "BE", "Y", "L", "NB", "Ab", "BA", "PB", "BD", "OB", "BI", "GB", "Bs", "Q", "DB", "QB", "WB", "BER", "I", "b", "X", "FB", "C", "SB", "MB", "V", "P", "K", "AB", "O", "H", "M", "F", "N"]}}
{"code": "r = input()\\nsuq = int(r) * int(r)\\nprint(suq)", "target": "787", "substitutes": {"r": ["cur", "rs", "o", "err", " R", "x", "c", "er", "R", "d", "ar", "a", "pair", "n", "var", "s", "range", "t", "i", "result", "g", "rg", "h", "lr", "pr", "row", "nr", "u", "e", "f", "rr", "b", "random", "q", "w", "z", "v", "l", "m", "fr", "order", "right", "p", "req", "ru", "rank", "sr"], "suq": [" suqa", " suiq", " suqs", " susp", "Suiq", " susqs", "ruiq", "suqs", "suqa", " suqual", "ruq", "suqual", "surp", "Suqa", "Suq", "surqual", " susqual", "surqs", "suiq", "sup", "surq", " susq", " sup", "ruqa"]}}
{"code": "A,B=map(int,input().split())\\nN = list(map(int,input().split()))\\n\\nc=0\\n\\nfor i in range(A):\\n  if N[i] >= B:\\n    c+=1\\n  else:\\n    pass\\n  i+=1\\nprint(c)\\n", "target": "494", "substitutes": {"A": ["AR", "U", "NA", "D", "S", "R", "E", "Alpha", "a", "T", "W", "Array", "Y", "L", "G", "EA", "AP", "Average", "I", "AA", "X", "C", "Na", "V", "P", "K", "API", "AF", "AH", "AB", "O", "AC", "M", "H", "F", "Input", "LA"], "B": ["U", "Bu", "D", "BF", "R", "E", "LB", "BB", "T", "W", "Y", "L", "G", "NB", "BA", "BD", "Q", "Bs", "GB", "DB", "WB", "BER", "I", "AA", "b", "X", "C", "V", "P", "BC", "AB", "O", "M", "F", "Z"], "N": ["U", "Node", "NA", "D", "S", "R", "NS", "E", "NL", "Ns", "T", "n", "J", "Y", "L", "G", "NT", " n", "NN", "No", "Q", "AN", "I", "X", "C", "RN", "V", "P", "K", "Nat", "O", "M", "F", "Z"], "c": ["cur", "o", "cn", "k", "x", "cy", "ci", "d", "cycle", "col", "ac", "uc", "n", "cc", "cache", "t", "cs", "y", "alpha", "g", "h", "abc", "cp", "ct", "dc", "error", "cu", "u", "xc", "f", "e", "toc", "b", "code", "unc", "C", "z", "cr", "v", "l", "lc", "pc", "m", "r", "cd", "p", "count", "call"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "gi", "ci", "d", "yi", "ri", "oi", "a", "io", "ie", "start", "int", "ind", "n", "num", "ui", "bi", "id", "y", "h", "ix", "index", "eni", "si", "u", "iu", "e", "I", "f", "ti", "b", "ki", "ai", "init", "z", "l", "v", "ii", "ic", "li", "r", "p", "vi", "count"]}}
{"code": "a = input()\\nN = int(a)\\nA = list(map(int,input().split()))\\nA.sort()\\n\\nx = A[N-1]\\n\\nfor i in range(1,(N-2)//2+1):\\n    x = x + 2*A[N-1-i]\\nif (N-2) % 2 == 1:\\n    x = x + A[N-2-(N-2)//2]\\n\\nprint(x)\\n", "target": "328", "substitutes": {"a": ["area", "at", "c", "aw", "ar", "ac", "wa", "ab", "n", "mA", "ata", "an", "s", "array", "fa", "y", "alpha", "na", "sa", "ana", "span", "aa", "va", "f", "b", "am", "ans", "ai", "ae", "asa", "aaa", "ea", "aj", "p", "au"], "N": ["NY", "Node", "NA", "D", "S", "Network", "GN", "R", "NS", "E", "NE", "B", "Ns", "T", "n", "W", "Sn", "Not", "Y", "L", "Ni", "G", "Len", "Num", "Part", "Wh", "Power", "SN", "CNN", "IN", "NT", " n", "Size", "No", "MN", "Band", "Form", "Length", "Count", "I", "Version", "Number", "X", "Group", "C", "Na", "Ne", "NI", "NG", "V", "P", "K", "Nat", "O", "IX", "M", "F", "Name", "Class", "Z"], "A": ["As", "U", "NA", "D", "S", "New", "E", "Alpha", "B", "CA", "All", "T", "W", "At", "Array", "Y", "array", "L", "AM", "G", "Am", "GA", "AU", "An", "Adam", "AP", "Q", "Ar", "Average", "I", "AA", "b", "X", "App", "C", "V", "P", "K", "AF", "API", "O", "H", "M", "F", "AAA", "LA"], "x": ["xp", "xi", "px", "plus", "c", "work", "search", "d", "xy", "data", "pos", "fix", "n", "ww", "xb", "s", "array", "xxxxxxxx", "y", "tx", "on", "xxx", "g", "xa", "ax", "xt", "xe", "xxxx", "rx", "ix", "index", "fx", "ex", "u", "f", "e", "dx", "one", "X", "xx", "code", "xf", "xes", "wx", "w", "z", "rex", "v", "l", "cross", "m", "xs", "r", "p"], "i": ["pi", "it", "o", "k", "xi", "j", "gi", "c", "d", "phi", "ri", "ie", "int", "ind", "n", "bi", "id", "y", "on", "ir", "h", "ib", "index", "ip", "si", "u", "iu", "e", "I", "f", "ti", "b", "ai", "z", "v", "l", "ii", "li", "r", "m", "p"]}}
{"code": "def judge(n,a):\\n    table = {}\\n    for i in range(n):\\n        if a[i] in table.keys():\\n            print('NO')\\n            return\\n        else:\\n            table[a[i]] = 1\\n    print('YES')\\n    return\\n    \\nn = int(input())\\na = list(map(int,input().split()))\\n\\njudge(n,a)", "target": "135", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "d", "node", "nb", "num", "s", "t", "y", "na", "g", "nn", "nan", "index", "number", "nu", "u", "f", "e", "nt", "fn", "b", "ns", "sn", "no", "z", "v", "l", "m", "nc", "p", "ne", "N"], "a": ["ma", "area", "access", "o", "at", "c", "aw", "ar", "ita", "ac", "ab", "app", "aux", "af", "action", "da", "ata", "an", "args", "array", "A", "fa", "y", "alpha", "qa", "sa", "span", "aa", "va", "am", "b", "ca", "tta", "ga", "ai", "ae", "asha", "asa", "ba", "aaa", "ea", "aj", "ao", "p", "au"], "table": ["area", "file", "use", "part", "o", "this", "db", "c", "data", "section", "value", "app", "ac", "ab", "Table", "an", "list", "array", "cache", "t", "tab", "root", "TABLE", "database", "key", "test", "total", "python", "body", "sa", "query", "index", "tmp", "master", "the", "batch", "aa", "row", "e", "f", "tree", "b", "stable", "ca", "buffer", "store", "aaa", "flat", "order", "p", "count"], "i": ["pi", "di", "ji", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", " I", "col", "name", "io", "ie", "int", "ind", "ui", "t", "bi", "id", "y", "key", "ir", "h", "ib", "ix", "index", "ip", "si", "il", "u", "iu", "fi", "f", "e", "I", "ti", "b", "q", "ai", "l", "ii", "li", "r", "abi", "ih", "p"]}}
{"code": "while True:\\n    a,b=map(int,input().split())\\n    if a==0 and b==0:break\\n    for i in range (a):\\n        print('#'*b)\\n    print()\\n", "target": "296", "substitutes": {"a": ["ma", "area", "ha", "x", "c", "d", "ama", "ab", "wa", "ac", "af", "pa", "n", "da", "an", "A", "fa", "y", "alpha", "sa", "abc", "index", "aa", "la", "u", "va", "oa", "active", "am", "ad", "ca", "ga", "ai", "ae", "ba", "ea", "aj", "count", "au"], "b": ["eb", "mb", "x", "abb", "j", "c", "db", "d", "cb", "nb", "ob", "ab", "B", "bound", "bd", "bis", "n", "xb", "s", "rb", "A", "y", "bs", "body", "fb", "abc", "ib", "bad", "aa", "wb", "lb", "f", "e", "base", "sb", "be", "ba", "l", "v", "bb", "bf", "emb", "p"], "i": ["it", "k", "you", "x", "j", "c", "ait", " I", "ab", "ie", "int", "ind", "n", "instance", "num", "id", "g", "ip", "u", "iu", "e", "I", "q", "ai", "abi", "p"]}}
{"code": "import sys\\nlines = [s.rstrip(\"\\n\") for s in sys.stdin.readlines()]\\nn, = [int(num) for num in lines.pop(0).split(\" \")]\\ndef iter_value_and_unit():\\n    for line in lines:\\n        value, unit = line.split(\" \")\\n        value = float(value)\\n        if unit == \"BTC\":\\n            yield 380000.0 * value\\n        else:\\n            yield value\\n\\nprint(sum(iter_value_and_unit()))\\n", "target": "270", "substitutes": {"lines": [" elements", "file", "ls", "codes", "zes", "files", " samples", "ins", "runs", "Line", "data", "plugins", "steps", "pos", "sl", " strings", "args", "lins", "strings", "users", " entries", "elines", "comments", "blocks", "ds", "rows", "ids", "les", "cells", "nl", "vals", "names", "items", "ln", "ine", "lin", "los", "f", "objects", "ns", "values", "pages", "l", "lined", "groups", "xs", "ines", "odes", " numbers"], "s": ["ports", "ls", "string", "o", "fs", "S", "sync", "sit", "su", "c", "d", "ins", "ses", "ws", "ss", "pos", "sl", "submit", "single", "strings", "i", "g", "os", "source", "si", "spec", "f", "e", "b", "ps", "ns", "sb", "w", "l", "m", "r", "se", "sim", "p"], "n": ["o", "c", "d", " N", "nb", "name", "Ns", "t", "ni", "i", "en", " ns", "nl", "names", " c", " l", "lin", "fn", "e", "f", "ns", "l", "m", "r", "ines", "ln", "ne", "N"], "num": ["file", "np", "nm", "node", "nb", "col", "name", "sum", "mult", "int", "Num", "id", "eno", "mon", "nw", "mem", "en", "filename", "offset", "word", "ident", "nn", "index", "bin", "number", "nu", "multi", "nom", "u", "fn", " number", "one", "end", "sn", "NUM", "no", "text", "m", "nam", "path", "N"], "line": ["file", " val", "string", "log", "out", "ino", "page", "nm", " lin", "Line", "name", "lo", "LINE", "site", "entry", "val", "cell", " inline", "source", " Line", "header", " string", "write", " l", "row", "ine", "nl", "item", "lin", " number", "inline", "status", "lc", "l", "lined", "ln", "definition", "block"], "value": ["auto", "money", "type", "VALUE", "element", "current", "d", "scale", "sum", "output", "name", "data", "section", "format", "start", "paid", "all", "Value", "double", "update", "weight", "result", "test", "total", "key", "time", "min", "val", "version", "index", "null", "number", "age", "write", "function", "message", "size", "default", "max", "end", "values", "volume", "property", "status", "w", "example", "v", "fee", "temp", "flow", "rate"], "unit": ["note", "type", "string", "loc", "attribute", "scale", "name", "section", "format", "description", "direction", "option", "domain", "weight", "site", "units", "split", "uni", "key", "component", "version", "parent", "un", "source", "number", "title", "si", "u", "nom", "label", "term", "Unit", "module", "position", "style", "letter"]}}
{"code": "N, K, Q = map(int, input().split(' '))\\nval = [ K for i in range(N) ]\\nfor i in range(Q):\\n    A = int(input())\\n    val[A - 1] += 1\\nfor i in val:\\n    if i - Q > 0:\\n        print('Yes')\\n    else:\\n        print('No')", "target": "336", "substitutes": {"N": ["U", "D", "S", "R", "NS", "E", "B", "Ns", "T", "n", "W", "J", "Y", "L", "G", "Len", " n", " Ne", "No", "I", "X", "C", "Ne", "V", "P", "H", "M", "F", "Z"], "K": ["U", "KR", "D", "Ku", "k", "IK", "Max", "S", "SK", "E", "Ak", "B", "T", "J", "Y", "NK", "G", "L", "KK", "No", "PK", "I", "X", "C", "V", "P", "Sk", "KS", "O", "H", "M", "F", "Z"], "Q": ["U", "D", "S", "MQ", "Limit", "R", "E", "B", "T", "W", "QU", "J", "Y", "G", "L", "PI", "I", "X", "C", "q", "V", "Qu", "P", "O", "Query", "H", "M", "F", "Z"], "val": ["el", "ol", "al", "x", "j", "ac", "data", "value", "pos", "VAL", "int", "ind", "sl", "aval", "all", "valid", "num", "list", "cal", "L", "update", "test", "alpha", "split", "na", "abc", "vert", "Val", "bl", "vals", "sel", "u", "len", "play", "eval", "f", "b", "base", "pt", "V", "z", "vol", "v", "l", "p", "elt", "arg", "count"], "i": ["pi", "it", "di", "o", "iw", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "phi", " I", "a", "Bi", "int", "n", "s", "Ni", "ni", "id", "iq", "y", "alpha", "g", " j", "Pi", "ip", "si", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "chi", "qi", "l", "ii", "li", "ei", " pi", "p"], "A": ["U", "NA", "D", "S", "E", "Alpha", "a", "B", "CA", "T", "mA", "J", "Y", "G", "L", "alpha", "I", "AA", "Ang", "X", "C", "Na", "V", "P", "p", "API", "O", "H", "M", "F", "LA"]}}
{"code": "import itertools\\n\\nn, m = map(int, input().split())\\nedges = [[] for _ in range(n)]\\nfor _ in range(m):\\n    a, b = map(lambda x: int(x) - 1, input().split())\\n    edges[a].append(b)\\n    edges[b].append(a)\\n\\ncount = 0\\nfor perm in itertools.permutations(range(1, n)):\\n    if not perm[0] in edges[0]:\\n        continue\\n    can_visit_all = True\\n    for i in range(n - 2):\\n        if not perm[i + 1] in edges[perm[i]]:\\n            can_visit_all = False\\n            break\\n    if can_visit_all:\\n        count += 1\\nprint(count)\\n", "target": "143", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "d", "nm", " N", "nb", "num", "s", "t", "y", "mn", "en", "u", "net", "e", "f", "fn", "nt", "ns", "q", "w", "z", "l", "v", "r", "nc", "M", "p", "ne", "N"], "m": ["o", "mc", "k", "x", "j", "tm", "c", "d", "nm", "num", "s", "range", "y", "mn", "g", "dim", "h", "ym", "md", "cm", "u", "e", "f", "mu", "sm", "mm", "w", "z", "dm", "v", "l", "hm", "r", "M", "p"], "edges": ["dedged", "edGES", "gedgments", "adwards", "edswards", "hedged", "adgments", "edsodes", "edices", "edgs", "adges", "endedgments", "aedices", "nedgs", "edhips", "edsges", "nedwards", "adodes", "edsge", "endgs", " edwards", "aedgs", "edsged", "endedges", "pedges", "endices", "edgments", "endedGES", "indgs", "adices", "hedodes", "hedges", "endges", "indges", "aedges", "aedpoints", " edices", "adgers", "indhips", "indwards", "dedodes", "endedgers", "edpoints", "nedges", "edged", "nedhips", " edgs", "pedpoints", "gedGES", " edhips", "edgers", "gedges", "edge", "adGES", "endpoints", "edodes", "dedge", "dedges", "hedge", "edsices", "pedgs", "gedgers", " edodes", "edwards", "pedices"], "_": ["x", " sub", " un", " time", " all", " j", " function", "f", " o", " block", " non", " q", "ing"], "a": ["o", "x", "c", "aw", "d", "ar", "ab", "ac", "pa", "all", "an", "s", "array", "A", "y", "alpha", "sa", "aa", "u", "e", "f", "one", "ca", "ga", "ai", "ae", "w", "ba", "l", "r", "p"], "b": ["o", "x", "abb", "j", "c", "d", "nb", "ab", "B", "bd", "xb", "s", "rb", "y", "bs", "g", "h", "fb", "aa", "wb", "u", "f", "e", "other", "sb", "w", "be", "aaa", "ba", "l", "v", "r", "p"], "count": ["log", "type", "part", "case", "c", "current", "sum", "old", "bug", "name", "coll", "diff", "int", "ind", "all", "num", "depth", "list", "cache", "weight", "id", "test", "key", "total", "time", "check", "more", "index", "number", "thread", "last", "size", "process", "Count", "nt", "max", "code", "match", "base", "limit", "child", "counter", "add", "found", "length", "p", "call"], "perm": ["lim", "mode", "part", "erm", "ima", "diff", "c", "page", "gm", "slice", " p", "mult", "bc", "rm", "ptr", "int", "mod", "pos", "per", "anc", "all", "amp", "fac", "inc", "mer", "id", "put", "proc", "alpha", "project", " perl", "g", "change", "degree", "sample", "atom", "acc", "cm", "tmp", "erc", "rep", "py", "gram", "index", "mp", "sem", "f", " permission", "mu", "imp", "adj", "spec", "im", "emp", "module", "filter", "pm", "imm", "v", "attr", "pc", "nc", "p", "req", "group", "user", "fp"], "can_visit_all": ["can_visate_all", "can_visit_full", "can_visitor_only", "can_visitor_all", "can_visate_All", "can_visit_All", "can_visit_only", "can_visitor_full", "can_visitor_All", "can_visate_full"], "i": ["mini", "pi", "it", "o", "k", "x", "j", "c", "xi", "ci", "d", "yi", "phi", " I", "ri", "ind", " iP", "ui", "ini", "bi", "id", "iq", "y", " j", "index", "ip", "si", " id", "u", "iu", "f", "I", "e", "ai", "w", "z", "qi", "v", "l", "ii", "li", "p"]}}
{"code": "import sys\\nsys.setrecursionlimit(10000000)\\nMOD = 10 ** 9 + 7\\nINF = 10 ** 15\\n\\ndef main():\\n    S = input()\\n    pair = []\\n    stack = [('%',-1)]\\n    for j,s in enumerate(S):\\n        if s == '/':\\n            if stack[-1][0] == '\\\\':\\n                i = stack[-1][1]\\n                stack.pop()\\n                pair.append((i,j))\\n        elif s == '_':\\n            continue\\n        else:\\n            stack.append((s,j))\\n    \\n    pond = []\\n    tot = 0\\n    k = len(pair) - 1\\n    while  k >= 0:\\n        fin = pair[k][0] - 1\\n        area = 0\\n        while k >= 0 and fin < pair[k][0]:\\n            area += pair[k][1] - pair[k][0]\\n            k -= 1\\n        pond.append(area)\\n        tot += area\\n    pond.append(len(pond))\\n\\n    print(tot)\\n    print(*pond[::-1])\\nif __name__ == '__main__':\\n    main()\\n", "target": "394", "substitutes": {"MOD": [" MIN", " STR", " FT", "MAG", " DEBUG", " EXP", " LOG", " PI", "REG", " MODULE", " SP", "mod", " INT", " EXT", "SIZE", " mod", " Z", "PI", " SF", " FS", " PHP", " Mod", "MIN", "CC", "SEC", " LIB", " MAX"], "INF": [" INFF", "INFF", "InFF", "INI", " INI", "InI", "InF", "inFF", "inF", "inI"], "S": ["U", "SE", "SH", "SS", "R", "RS", "B", "T", "W", "Si", "Source", "G", "L", "SN", "SL", "INS", "ST", "DS", "SER", "Q", "Stack", "WS", "SC", "I", "X", "SU", "C", "V", "P", "H", "M", "Input", "F", "N"], "pair": ["type", "grade", "package", "reference", "both", "race", "option", "share", "split", "phase", "your", "component", " pairs", "source", "detail", "are", "position", "p", "flower", "group", "part", "x", "output", "data", "record", "pixel", "single", "party", "result", "version", "match", "yet", "phrase", "sync", "point", "tower", "section", "context", "transfer", "int", "list", "array", " pairing", "sort", "piece", "request", "channel", "function", "chi", "layer", "patch", "choice", "case", "common", "element", "square", "page", "course", "slice", "side", " Pair", "key", "project", "iter", "change", "parent", "sample", "pad", "number", "address", "pre", "one", "before", "P", "chain", "air", "now", "order", "pe", "program"], "stack": ["use", "step", "string", "this", "trace", "input", "c", "sp", "cycle", "slice", "left", "section", "start", "scope", "context", "sl", "src", "switch", "int", "view", "list", "array", "cache", "config", "inc", "track", "site", "loop", "sort", "test", "pack", "ST", "iter", "self", "sample", "index", "set", "source", "sequence", "st", "Stack", "lower", "function", "spec", "f", "tree", "match", "load", "stage", "lock", "store", "w", "module", "counter", "level", "layer", "chain", "v", "l", "sc", "p", "cl", "call"], "j": ["o", "ji", "part", "x", "c", "d", "jc", "name", "section", "pos", "int", "ind", "n", "J", "syn", "ch", "y", "key", "g", "ij", "job", "index", "jl", "jo", "si", "ja", "f", "e", "obj", "b", "jj", "jump", "q", "z", "l", "jp", "aj", "v", "li", "r", "str", "m", "ii", "p"], "s": ["states", "ls", "string", "o", "js", "ssl", "c", "sp", "d", "ws", "ses", "sub", "a", "session", "ss", "sl", "n", "args", "qs", "space", "cs", "site", "os", "sa", "h", "ts", "ds", "gs", "lines", "sf", " signs", "sq", "si", "u", "sets", "spec", "e", "f", "settings", "b", "ps", "ns", "ments", "ends", "es", "sb", "w", "sv", "z", "v", "l", "sc", "sg", "m", "se", "words", "p", "hs"], "i": ["pi", "ji", "c", "ci", "d", "a", "start", "int", "ind", "n", "ini", "bi", "id", "key", "index", "ip", "eni", "si", "u", "iu", "f", "I", "b", "q", "ai", "z", "qi", "l", "v", "ii", "li", "p"], "pond": [" ponding", "sponds", "tonding", " pon", "tong", "pon", " pont", "pore", "poner", "pont", "pone", "fong", "sponer", "bond", "pong", "spong", "tone", "bon", "Pond", " ponds", "uponding", "Pon", "tond", "ponding", "fOND", "lpOND", "upond", "fore", "upong", "font", " poner", "Pong", "perond", "lpond", "lponds", "Ponds", "spon", "fon", " pone", "peroner", "peron", "spond", "bont", "pOND", "upone", " pong", "fonds", "lpong", "bore", " pore", "peronds", "ponds", " pOND", "fond"], "tot": ["ctott", "tota", "lota", "Tott", "pott", "ntota", "ntott", "ctiat", "ntot", "ttannot", "toot", "tott", "nota", "ttoot", "Tow", "ttOT", "Tot", "lott", " toot", "Tannot", "tow", "ctota", "tannot", " tannot", "pota", "ntow", "TOT", "Toot", "piat", "pot", "lot", "tOT", " tOT", "ctot", "tiat", "nott", "ttot", "now", "Tota", "liat"], "k": ["ik", "o", "kn", "ke", "x", "kk", "_", "c", "kat", "d", "ak", "ijk", "ky", "a", "n", "mk", "ck", "ek", "kick", "ork", "id", "y", "key", "sk", "g", "unk", "ok", "ks", "kid", "uk", "km", "ko", "kin", "u", "e", "b", "ki", "q", "tk", "w", "kw", "z", "K", "v", "m", "r", "p", "ka", "kt", "ku"], "fin": ["mini", "ner", "fat", "err", "done", "FIN", "au", " finish", "Fin", "oi", "ie", "ori", "n", "ini", "depth", "fa", "inc", "ni", "rf", "info", "ien", "div", "fd", "en", "cor", "nan", "span", "eni", "si", "br", "final", "len", "kin", "fi", "lin", "lan", "feat", "ani", "init", "frac", "zi", "rin"], "area": ["mini", "part", "ha", "sector", "paper", "c", "page", "ar", "scale", " Area", "a", "section", "aka", "pa", "n", "array", "fa", "az", "space", "id", "api", "total", "alpha", "qa", "sa", "ir", " areas", "ana", "sea", "span", "region", "Area", "ra", "are", "number", "rea", "aa", "radius", "la", "si", "south", "size", "ania", "oa", "zip", "ca", "base", "ai", "zone", "length", "r", "p", "ka", "count", "au"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nc=0\\nfor i in a:\\n    while i%2==0:\\n      i,c=i/2,c+1\\nprint(c)", "target": "121", "substitutes": {"n": ["pi", "o", "k", "j", "nb", "num", "s", "t", "ni", "na", "g", "net", " ni", "nt", "f", "b", "ns", "init", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "ac", "data", "ab", "action", "args", "ata", "an", "da", "array", "A", "fa", "all", "y", "alpha", "na", "sa", "ana", "index", "aa", "va", "active", "f", "b", "am", "ca", "ai", "ae", "ta", "aaa", "ba", "ea", "p"], "c": ["o", "cn", "k", "x", "j", "cy", "ci", "d", "cycle", "col", "ac", "int", "cc", "t", "y", "h", "abc", "ct", "cin", "index", "dc", "cu", "u", "xc", "f", "e", "b", "code", "C", "w", "z", "l", "lc", "v", "pc", "m", "r", "p", "count"], "i": ["pi", "o", "k", "x", "xi", "j", "gi", "ci", "d", "phi", "ie", "bc", "int", "ind", "ini", "t", "id", "index", "si", "u", "iu", "e", "I", "f", "b", "C", "ai", "z", "p", "qi", "chi", "v", "l", "ii", "ic", "li", "m", "count"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\nimport numpy as np\\nfrom numba import njit\\n\\n\\ndef read():\\n    D = int(input().strip())\\n    C = np.fromstring(input().strip(), dtype=np.int32, sep=\" \")\\n    S = np.empty((D, 26), dtype=np.int32)\\n    for i in range(D):\\n        s = np.fromstring(input().strip(), dtype=np.int32, sep=\" \")\\n        S[i, :] = s[:]\\n    T = np.array([int(input().strip()) for i in range(D)], dtype=np.int32)\\n    return D, C, S, T\\n\\n\\n@njit\\ndef satisfaction(d, C, S, T, last):\\n    v = 0\\n    v += S[d, T[d]-1]\\n    last[T[d]-1] = d+1\\n    for i in range(26):\\n        v -= C[i] * ((d+1) - last[i])\\n    return v\\n\\n\\n@njit\\ndef solve(D, C, S, T):\\n    last = np.zeros(26, dtype=np.int32)\\n    cumsat = 0\\n    for i in range(D):\\n        sat = satisfaction(i, C, S, T, last)\\n        cumsat += sat\\n        print(cumsat)\\n\\n\\nif __name__ == '__main__':\\n    inputs = read()\\n    outputs = solve(*inputs)\\n    if outputs is not None:\\n        print(\"%s\" % str(outputs))\\n", "target": "506", "substitutes": {"input": ["unit", "it", "empty", "string", "hit", "element", "out", "op", "feed", "search", "current", "append", "argument", " I", "output", "data", " Input", "format", "upload", "expression", "submit", "util", "int", "print", " output", "pull", "list", "array", " int", "config", "enter", "python", "image", "version", "request", "next", "source", "null", "error", "index", "IO", "parse", "read", "run", "I", "exec", "reader", "help", "enum", "load", "select", "form", "accept", "text", "Input", "comment", "p", "count"], "D": ["ND", "U", "DT", "Done", "CD", "R", "Do", "E", "Ds", "FD", "B", "Day", "Data", "DO", "PD", "Y", "JD", "DA", "G", "L", "A", "Di", "Dr", "DD", "DM", "DS", "Size", "MD", "De", "DI", "Q", "Delta", "DB", "Length", "Count", "I", "Depth", "X", "DF", "DC", "V", "P", "K", "ID", "Code", "cd", "O", "H", "M", "F", "DE", "N", "Z"], "C": ["U", "CI", "Ca", "CN", "CD", "c", "R", "E", "Cons", "B", "CA", "Cos", "W", "Y", "A", "G", "L", "St", "CNN", "Size", "Co", "Con", " c", "Core", "SC", "I", "CS", "X", "Sc", "DC", "V", "P", "CC", "Cs", "K", "Code", "O", "Cu", "Ch", "M", "F", "CM", "CE", "N"], "S": ["SE", "U", "GS", "Rs", "SS", "R", "NS", "E", "RS", "Ds", "Sin", "ss", "B", "Ns", "Data", "Cos", "TS", "Si", "System", "SI", "Es", "Y", "A", "L", "St", "G", "Sa", "Single", "Se", "Size", "DS", "Os", "WS", "I", "So", "Socket", "X", "CS", "SU", "Sc", "Su", "V", "Sl", "P", "OS", "Cs", "K", "Space", "O", "Sh", "M", "F", "Ts", "N", "Set"], "i": ["pi", "di", "o", "it", "k", "x", "xi", "j", "idi", "c", "gi", "ci", "yi", "phi", "a", "io", "ie", "start", "int", "ind", "n", "ui", "ini", "t", "ni", "id", "y", "iq", "on", "g", "ix", "index", "ip", "si", "il", "u", "iu", "f", "I", "e", "ti", "b", "hi", "im", "ai", "z", "chi", "qi", "l", "ii", "li", "ei", "m", "r", "ih", "p"], "s": ["ls", "string", "sync", "su", "c", "ws", "ses", "sum", "ins", "a", "ss", "t", "strings", "y", "g", "sa", "ds", "sample", "st", "sites", "sq", "si", "u", "sets", "f", "b", "ps", "ns", "sv", "z", "l", "sc", "se", "p", "seconds"], "T": ["U", "Ti", "FT", "DT", "Token", "Temp", "Dist", "Time", "TN", "R", "Other", "E", "Total", "Point", "CT", "Test", "Times", "KT", "B", "All", "TS", "W", "Not", "Type", "This", "Y", "t", "L", "G", "UT", "NT", "Lt", "GT", "Last", "TA", "Int", "PT", "Port", "WT", "Delta", "Tu", "Length", "Rest", "I", "LT", "X", "Tw", "TG", "TT", "Unit", "TX", "V", "P", "Target", "O", "Th", "M", "F", "Ts", "Right", "N", "Z"], "d": ["isd", "di", "o", "dom", "dt", "k", "x", "done", "j", "c", "ded", "Do", "pd", "a", "du", "nd", "bd", "n", "ind", "da", "t", "dir", "id", "td", "sd", "dy", "ds", "do", "dh", "dr", "md", "dc", "u", "e", "dd", "f", "dx", "b", "ad", "xd", "dl", "w", "z", "dn", "l", "cd", "m", "did", "dat", "p", "ld"], "last": ["est", "it", "later", "sync", "first", "full", "j", "c", "current", "cycle", "best", "left", "old", "sum", "short", "variable", "latest", "Previous", "second", "all", "cache", "First", "id", "total", "cost", "static", "Last", "next", "st", "final", "size", "since", "eval", "max", "end", "worst", "Final", "V", "flat", "style", "l", "right", "prev", "p", "temp", " Last", "recent"], "v": ["pi", "k", "ve", "x", "j", "uv", "c", "cv", "ver", "value", "vv", "vs", "vt", "n", "vp", "ov", "t", "av", "y", "g", "val", "tv", "h", "lv", "iv", "qv", "u", "f", "e", "b", "rev", "values", "vd", "ev", "q", "V", "sv", "z", "vol", "nv", "l", "m", "r", " V", "p", "vi", "conv"], "cumsat": ["Cupsut", "cubsat", "cupsar", "cumsata", "callsat", "cumsut", "cubsar", "cumata", "Cumsat", "Cumsut", "Cupsar", "Cumsot", "Cupsit", "cumsAT", "cumar", "callsut", "cumAT", "callsata", "cumsar", "cupsata", "cubsot", "cupsat", "cupsot", "Cumsit", "cumit", "culsAT", "cupsut", "CupsAT", "cupsAT", "CumsAT", "Cupsot", "Cupsat", "cumut", "cumot", "Cumsata", "Cumsar", "culsat", "callsar", "Cupsata", "cumat", "cupsit", "culsit", "cubsata", "cumsit", "cumsot", "culsar"], "sat": ["Sat", "unit", "at", "bat", "sy", "sit", "ash", "kat", "sum", "ut", "sol", "sett", "hat", "y", "na", "sa", "score", "set", "rat", "stat", "dot", "sav", "sal", "say", "sq", "si", "mat", "stable", "cot", "pit", "nat", "ta", "lat", "cat", "sc", "sg"], "inputs": [" inputstates", "Inputtests", "inputstates", "Inputstates", "outputimages", "outputstates", "inputlines", "inputches", "Inputimages", " inputtests", " inputimages", "outputlines", "Inputches", "outputches", " inputches", "inputimages", "Inputlines", "inputtests", "Inputs", "outputtests", " inputlines"], "outputs": ["inputts", "inputstates", "Outputss", "drawts", " outputes", "outputplugins", "outputstates", "draws", "output_", "Output_", "inputplugins", "inputd", "drawd", "Outputd", "Outputstates", "inputes", "loges", "lengths", "outputd", "logs", "lengthss", "length_", "Outputs", "logd", "outputes", "outputts", " outputplugins", "drawstates", " outputd", "logplugins", "lengthd", "Outputts", "inputss", "outputss", "input_"]}}
{"code": "a,b = map(int,input().split())\\n\\nc = b-a\\nif c % (a-1) == 0:\\n  n = c // (a-1) + 1\\nelse:\\n  n = c // (a-1) + 2\\n  \\nprint(n)", "target": "335", "substitutes": {"a": ["ma", "area", "auto", "access", "o", "part", "x", "aw", "d", "ac", "ab", "pa", "da", "an", "s", "A", "fa", "i", "y", "alpha", "api", "na", "qa", "sa", "za", "aa", "la", "va", "e", "f", "ad", "ca", "am", "ga", "ai", "w", "ae", "asa", "ba", "z", "aaa", "l", "ea", "aj", "v", "m", "p", "au"], "b": ["abb", "x", "d", "cb", "ab", "B", "bc", "s", "rb", "bi", "i", "y", "bs", "g", "fb", "ib", "beta", "aa", "wb", "u", "e", "f", "end", "sb", "ba", "l", "v", "bb", "m", "r", "p"], "c": ["o", "cn", "k", "x", "cy", "ci", "d", "cb", "ac", "fc", "s", "cc", "ce", "t", "i", "cs", "y", "ec", "g", "con", "h", "abc", "ct", "dc", "cu", "u", "size", "xc", "f", "e", "code", "ca", "C", "w", "z", "l", "lc", "v", "pc", "m", "r", "nc", "p"], "n": ["log", "o", "cn", "k", "x", "ng", "d", "node", "nb", "num", "t", "i", "y", "na", "count", "con", "min", "g", "network", "co", "nan", "span", "nu", "number", "nr", "f", "max", "e", "fn", "code", "ns", "C", "sn", "new", "no", "w", "init", "l", "v", "nc", "p", "ne", "N", "enc"]}}
{"code": "import math\\na,b,h,m= map(int, input().split())\\n\\nhr = 30*h+0.5*m\\nmr = 6*m\\nans = a**2+b**2-2*a*b*math.cos(math.radians(hr-mr))\\nprint(math.sqrt(ans))\\n\\n", "target": "290", "substitutes": {"a": ["ma", "x", "c", "d", "ar", " am", "ac", "ab", "n", "da", "an", "s", "A", "i", "y", "alpha", "g", "sa", "ax", "ah", " ax", "aa", "f", " ra", "AA", "ad", "am", "ca", "e", "ai", "ae", "w", "ba", "l", "aj", "r", "p", "au"], "b": ["o", "k", "x", "j", "c", "d", "ab", "bh", "B", "bd", "n", "s", "bi", "i", "y", "bs", "g", "fb", "ib", "beta", "lb", "u", "f", "e", "sb", "w", "be", "z", "ba", "l", "v", "r", "bb", "bf", "M", "p"], "h": ["o", "k", "x", "c", "d", "hour", "n", "t", "i", "y", "time", "g", "hh", "u", "e", "f", "hi", "q", "w", "z", "v", "l", "hm", "r", "H", "M", "p"], "m": ["o", "mc", "k", "x", "j", "c", "mad", "sp", "d", "tom", "mod", "n", "an", "s", "t", "ch", "i", "y", "mn", "g", "min", "ms", "ym", "cm", "mo", "me", "u", "em", "e", "f", "am", "mi", "sm", "mm", "gr", "im", "mass", "w", "q", "z", "v", "l", "hm", "r", "M", "p", "bm"], "hr": ["rs", "ha", "HR", "hours", "ar", "rad", "bh", "hour", "n", "rh", "man", "yr", "arm", "mn", "time", "resh", "min", "div", "ir", "hh", "ms", "rx", "dr", "br", "u", "ur", "e", "rr", "shift", "hm", "r", "fr", "sr", "au"], "mr": ["rs", "mc", "rd", "err", "c", "mad", "er", "shr", "rm", "igr", "yr", "arm", "mn", "ms", "md", "ml", "iller", "dc", "dr", "lr", "br", "nr", "mt", "rr", "mi", "MR", "mm", "gr", "ai", "pm", "Mr", "pc", "r", "aj", "hm", "kr", "au"], "ans": ["rs", "asses", "ang", "nas", "rad", "ases", "ins", "ras", "ars", "ants", "mia", "amps", "ens", "an", "s", "anc", " means", "cs", "ians", "ams", "mn", "asin", "os", "anas", "ms", "ds", "gan", "ana", "span", "AN", "atan", "ANS", "ann", "ain", "lan", "cos", "mas", "chan", "ani", "ays", "mean", "ains", "ares", "sam", "aus"]}}
{"code": "from collections import defaultdict, Counter\\nfrom itertools import product, groupby, count, permutations, combinations\\nfrom math import pi, sqrt\\nfrom collections import deque\\nfrom bisect import bisect, bisect_left, bisect_right\\nfrom string import ascii_lowercase\\nfrom functools import lru_cache\\nimport sys\\nsys.setrecursionlimit(10000)\\nINF = float(\"inf\")\\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\\n\\n\\ndef inside(y, x, H, W):\\n    return 0 <= y < H and 0 <= x < W\\n\\n\\ndef ceil(a, b):\\n    return (a + b - 1) // b\\n\\n\\n# a\u3068b\u306e\u6700\u5927\u516c\u7d04\u6570\\ndef gcd(a, b):\\n    if b == 0:\\n        return a\\n    return gcd(b, a % b)\\n\\n\\n# a\u3068b\u306e\u6700\u5c0f\u516c\u500d\u6570\\ndef lcm(a, b):\\n    g = gcd(a, b)\\n    return a / g * b\\n\\n\\ndef solve(y, x, field, used):\\n\\n    num_white, num_black = 0, 0\\n    que = deque()\\n    que.append((y, x))\\n    used[y][x] = True\\n\\n    while len(que) != 0:\\n        now = que.pop()\\n\\n        if field[now[0]][now[1]] == '.':\\n            num_white += 1\\n        else:\\n            num_black += 1\\n\\n        for i in range(4):\\n            ny = now[0] + dy4[i]\\n            nx = now[1] + dx4[i]\\n\\n            if inside(ny, nx, len(field), len(field[0])):\\n                if field[ny][nx] != field[now[0]][now[1]]:\\n                    if not used[ny][nx]:\\n                        que.append((ny, nx))\\n                        used[ny][nx] = True\\n\\n    return num_white * num_black\\n\\n\\ndef main():\\n    H, W = map(int, input().split())\\n    field = []\\n    for _ in range(H):\\n        field.append(input())\\n\\n    used = [[False] * W for _ in range(H)]\\n\\n    ans = 0\\n    for y in range(H):\\n        for x in range(W):\\n            if not used[y][x]:\\n                ans += solve(y, x, field, used)\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "431", "substitutes": {"INF": ["inInf", "NI", " INV", "INI", " INI", "NF", "NV", "INV", "NInf", "inI", "inF", " INInf", "INInf", "inV"], "YES": ["S", "SS", "XX", "US", "NULL", "Y", "OK", "A", "SIZE", "Yeah", "null", "NOW", "IS", "XXX", "N"], "Yes": ["Ok", "n", "This", "A", "Zero", "Yeah", "yeah", "nos", "XXX", "N"], "yes": ["unknown", "plus", "n", "non", "nan", "day", "yeah", "null", "none", "inf", "negative", "N"], "NO": ["NE", "US", "OK", "INT", "false", "NT", "DD", "number", "error", "ERROR", "nos", "none", "NR", "O", "XXX", "N"], "No": ["Very", "XX", "Only", "A", "Zero", "Too", "Yeah", "nos", "none", "XXX", "O", "N"], "no": ["maybe", "o", "unknown", "nothing", "n", "num", "po", "zero", "false", "na", "null", "number", "nos", " number", "one", "none", "N", "wrong"], "dy4": ["d8", "dy2", " dy32", "d32", "dy32", " dy2", "dx32", "dx2", "d4", "d2"], "dx4": ["d0", "dx0", "dy2", "x4", "x5", "dy5", "dy0", "x2", "dx5", "dx2", "x0", "d4", "d2", "d5"], "dy8": ["d8", " dy12", "dx6", "dy6", "dx12", "d6", "d12", "d4", " dy6", "dy12"], "dx8": ["dy16", "du6", "dx6", "dy6", "dx16", "du16", "dt1", "dy1", "dx1", "dt6", "du8", "dt8", "du1", "dt16"], "y": ["ey", "o", "wy", "ya", "c", "cy", "d", "yi", "ky", "n", "s", "Y", "i", "dy", "g", "h", "yt", "u", "f", "e", "xx", "q", "yy", "w", "z", "v", "l", "m", "p", "vy"], "x": ["k", "xi", "c", "d", "xy", "n", "s", "Y", "t", "i", "g", "ax", "h", "rx", "ix", "ex", "u", "e", "f", "dx", "X", "xx", "q", "w", "z", "v", "l", "m", "p"], "H": ["U", " h", "D", "R", "E", "B", "T", "HH", "Y", "A", "G", "L", "Kh", "ph", "FH", "HK", "EH", "h", "hh", "Q", "Head", "I", "X", "C", "HI", "V", "w", "P", "p", "O", "Th", "M", "wh", "F", "N", "Z"], "W": ["U", "GW", "TW", "D", "S", "R", "E", "B", "T", "Y", "A", "L", "G", "h", " w", "Q", "WC", "WS", "I", "X", "SW", "C", "V", "w", "P", "We", "O", "M", "VW", "F", "N", "Z"], "a": ["c", "d", "ama", "ac", "ab", "n", "an", "s", "A", "fa", "i", "alpha", "sa", "h", "abc", "ia", "aa", "u", "e", "f", "am", "ad", "ca", "ga", "w", "ae", "aaa", "ba", "m", "r", "another", "p"], "b": ["o", "eb", "mb", "pb", "j", "c", "d", "nb", "ab", "bh", "B", "bd", "rb", "A", "i", "bs", "bar", "g", "fb", "h", "abc", "beta", "aa", "wb", "lb", "e", "f", "bu", "base", "sb", "w", "ba", "v", "bb", "bf", "r", "p"]}}
{"code": "import bisect\\nN, K = map(int, input().split())\\nH = list(map(int, input().split()))\\nH.sort()\\n\\nprint(N-bisect.bisect_left(H, K))", "target": "494", "substitutes": {"N": ["U", "NA", "D", "S", "Max", "GN", "R", "E", "NE", "B", "Ns", "T", "n", "J", "NH", "Y", "A", "L", "G", "Ni", "Num", "Power", "CNN", " n", "Size", "NN", "Q", "I", "Number", "X", "C", "Na", "NI", "V", "P", "Sum", "NP", "O", "M", "F", "Z"], "K": ["U", "KR", "D", "k", "R", "SK", "E", "B", "KE", "T", "W", "J", "Y", "L", "KK", "HK", "Q", "PK", "X", "C", " k", "V", "P", "Sk", "KS", "O", "M", "F", "Z"], "H": ["U", "Han", "D", "HQ", "HD", "ITH", "HC", "E", "HL", "HP", "B", "RH", "OH", "T", "W", "HH", "HB", "Array", "Y", "rh", "L", "G", "HA", "HK", "EH", "h", "HS", "Q", "Ha", "GH", "X", "C", "Block", "MH", "HI", "V", "uh", "P", "HE", "AH", "O", "M", "F", "CH", "Z"]}}
{"code": "N,M=map(int, input().split())\\nprint(\"Yes\" if N==M else \"No\")", "target": "54", "substitutes": {"N": ["Node", "D", "S", "R", "NS", "E", "B", "T", "n", "W", "Y", "A", "L", "G", "Num", "CNN", "NT", " n", "NN", "No", "MN", "I", "Number", "X", "NO", "C", "Ne", "V", "P", "Mo", "K", "O", "F", "Name", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "B", "OM", "T", "W", "J", "PM", "n", "Y", "L", "DM", "NM", "MD", "MS", "MN", "Q", "MON", "X", "C", "V", "P", "MM", "SM", "MT", "MX", "m", "O", "H", "F", "CM", "Z"]}}
{"code": "n=int(input())\\ns=list(input())\\nq=int(input())\\n\\ndef ctoi(c):\\n  return ord(c)-97\\nclass Bit:\\n  def __init__(self, n):\\n    self.size = n\\n    self.tree = [[0]*(n+1) for _ in range(26)]\\n  def query(self,a,i):\\n    r = 0\\n    while i > 0:\\n      r += self.tree[a][i]\\n      i -= i & -i\\n    return r\\n  def update(self,i,a,x):\\n    while i<=n:\\n      self.tree[a][i]+=x\\n      i+=i&(-i)\\nbi=Bit(n)\\nfor i in range(n):\\n  bi.update(i+1,ctoi(s[i]),1)\\n  \\nfor _ in range(q):\\n  a,b,c=input().split()\\n  a,b=int(a),int(b)\\n  if a==1 and s[b-1]!=c:\\n    bi.update(b,ctoi(s[b-1]),-1)\\n    bi.update(b,ctoi(c),1)\\n    s[b-1]=c\\n  elif a==2:\\n    c=int(c)\\n    right=[bi.query(i,c) for i in range(26)]\\n    left=[bi.query(i,b-1) for i in range(26)]\\n    ans=0\\n    for r,l in zip(right,left):\\n      if r-l>0:\\n        ans+=1\\n    print(ans)", "target": "779", "substitutes": {"n": ["o", "k", "j", "d", "nb", "all", "num", "an", "t", "ni", "y", "g", "h", "network", "nan", "u", "f", "e", "nt", "max", "ns", "init", "w", "z", "v", "m", "nc", "p", "ne", "N"], "s": ["states", "parts", "o", "ls", "services", "forms", "S", "d", "ins", "ses", "ws", "opens", "ss", "times", "abs", "qs", "ows", "changes", "strings", "cs", "y", "g", "os", "comments", "h", "ds", "ms", "ks", "ids", "gs", "lines", "sites", "south", "si", "u", "sets", "e", "f", "uses", "ps", "ns", "objects", "es", "tests", "ions", "w", "z", "v", "m", "xs", "its", "types", "p"], "q": ["o", "k", "j", "d", "qs", "depth", "t", "ch", "id", "y", "g", "h", "query", "Q", "sq", "u", "f", "e", "qq", "w", "z", "qi", "v", "ic", "m", "p", "qu", "dq", "count"], "c": ["cur", "o", "ced", "cn", "k", "cy", "ci", "d", "col", "ac", "coll", "cc", "ce", "ch", "cs", "y", "ec", "g", "con", "h", "cp", "co", "ct", "dc", "cu", "u", "e", "f", "code", "ca", "C", "w", "z", "cr", "v", "cd", "ic", "m", "lc", "cf", "nc", "p", "cl", "count"], "self": ["home", "work", "j", "object", "h", "f", "us", "ns", "base", "ref", "m", "p", "temp", "cl", "conn", "part", "k", "full", "err", "plus", "er", "d", "ng", "ws", "data", "year", "ch", "client", "error", "max", "ang", "ctx", "node", "app", "context", "instance", "comp", "u", "e", "func", "resp", "wx", "v", "form", "user", "case", "Self", "this", "bug", "pos", "all", "cache", "g", "os", "ok", "parent", "co", "worker", "master", "host", "me", "other", "w"], "size": ["core", "empty", "sized", "scale", "sum", "name", "data", "ize", "depth", "root", "weight", "body", "SIZE", "Size", "offset", "big", "number", "len", "max", "code", "shape", "random", "member", "z", "length", "order", "small", "path", "count"], "tree": ["db", "response", "slice", "node", "study", "data", "circle", "Tree", "tail", "binary", "list", "cache", "t", "root", "leaf", "ree", "key", "split", "python", "body", "script", "forest", "image", "parent", "index", "set", "py", "table", "model", "stack", "graph", "token", "mat", "parse", "pie", "match", "code", "lock", "store", "module", "dict", "path", "block"], "_": ["k", "j", " __", "__", " time", "all", "non", " int", "g", " j", "ix", " function", " seq", "p", "block"], "a": ["ma", "area", "o", "ya", "j", "aw", "d", "ar", "ak", "ama", "ac", "ab", "int", "pa", "da", "an", "A", "fa", "y", "alpha", "api", "na", "qa", "sa", "ana", "ia", "aa", "la", "u", "va", "oa", "f", "e", "am", "ca", "ad", "ga", "ai", "ae", "w", "aaa", "ba", "ta", "asa", "ea", "aj", "p", "au"], "i": ["pi", "di", "o", "uri", "at", "it", "k", "xi", "j", "gi", "ci", "d", "yi", "ri", "phi", "oi", "io", "ie", "ori", "start", "cli", "int", "ind", "ui", "ini", "t", "ni", "id", "y", "iq", "api", "info", "g", "ib", "ix", "index", "ip", "multi", "si", "u", "iu", "f", "e", "ti", "I", "mi", "ai", "w", "z", "qi", "v", "ii", "m", "li", "ei", "p", "vi", "zi"], "r": ["rs", "pi", "o", "ner", "k", "err", "al", "j", "er", "R", "d", "ar", "ro", "re", "rh", "range", "t", "rb", "result", "y", "rt", "g", "ir", "h", "lr", "ra", "nr", "u", "ur", "br", "f", "e", "rn", "rl", "rr", "w", "z", "cr", "v", "lc", "m", "fr", "ru", "p", "rc", "sr"], "x": ["pi", "o", "xi", "ci", "ar", "d", "ri", "int", "ww", "array", "t", "id", "y", "tx", "alpha", "xa", "na", "g", "ax", "h", "rx", "ct", "ix", "index", "ex", "xc", "u", "f", "e", "max", "dx", "X", "xx", "ai", "w", "z", "v", "ic", "xs", "p"], "bi": ["mini", "pi", "di", "ji", "uci", "bo", "xi", "gi", "db", "ci", "yi", "phi", "nb", "wiki", "bh", "ie", "bc", "Bi", "cli", "bis", "bn", "ini", "ali", "ni", "bs", "gui", "sa", "gb", "ib", "git", "isi", "py", "BI", "nu", "bit", "wei", "aci", "ibi", "si", "cu", "fi", "ti", "mi", "hi", "ki", "obi", "sb", "ai", "ani", "ba", "qi", "chi", "lib", "bb", "li", "abi", "vi", "bm", "zi"], "b": ["o", "part", "eb", "k", "mb", "j", "cy", "db", "d", "cb", "ob", "ab", "bh", "B", "bc", "bd", "t", "rb", "bas", "y", "bs", "bar", "body", "g", "h", "fb", "gb", "ib", "big", "bad", "aa", "wb", "u", "lb", "f", "e", "base", "sb", "w", "be", "z", "ba", "v", "m", "bb", "bf", "p"], "right": ["rest", "k", "rew", "rights", "plus", "R", "d", "back", "rh", "array", "range", "correct", "g", "ack", "ax", "rw", "ra", "then", "one", "end", "no", "w", "cross", "p", "Right", "wrong"], "left": ["el", "o", "loc", "le", "full", "plus", "j", "close", "ul", "low", "lo", "fl", "pos", "both", "own", "L", "inner", "law", "bl", "lower", "Left", "leave", "e", "end", "none", "other", "child", "lic", "cross", "p", "lt", "cl", "wrong"], "ans": ["ls", "aning", "nas", "ras", "ins", "ases", "ars", "ants", "aid", "vs", "amps", "ens", "an", "ads", "anc", "forces", "ats", "asts", "cs", "ents", "ams", "sk", "na", "os", "anas", "ds", "gan", "ks", "les", "ana", "can", "anes", "AN", "leans", "aned", "ANS", "ann", "lan", "ns", "ands", "ends", "es", "ions", "ai", "ani", "aces", "ays", "ace", "eps", "aus", "ons"], "l": ["el", "lp", "ls", "o", "loc", "ol", "j", "d", "kl", "sl", "long", "ll", "L", "h", "nl", "la", "u", "rl", "e", "f", "dl", "lc", "v", "li", "lu", "m", "ln", "p"]}}
{"code": "x = 'KIHBR'\\nT = []\\nfor i in range(1<<6):\\n    t = ''\\n    for j in range(6):\\n        if i&(1<<j) and j != 1 and j != 2:\\n            t += 'A'\\n        if j != 5:\\n            t += x[j]\\n    T.append(t)\\nS = input()\\nif S in T:\\n    print('YES')\\nelse:\\n    print('NO')\\n", "target": "796", "substitutes": {"x": ["case", "xi", "input", "c", "d", "int", "n", "s", "Y", "array", "list", "y", " X", "test", "python", "script", "h", "sex", "tt", "index", "ex", "xc", "u", "e", "f", "X", "xx", "code", "xes", "wx", "q", "w", "z", "v", "cross", "text", "xs", "p"], "T": ["U", "D", "DT", "R", "E", "XT", "B", "LET", "TS", "Y", "L", "G", "A", "UT", "NT", "TA", "PT", "Q", "WT", "LT", "I", " TT", "X", "C", "TG", "TT", "TX", "V", "P", "O", "VT", "H", "M", "TF", "F", "N", "Z"], "i": ["ik", "pi", "di", "ji", "o", "k", "xi", "ci", "yi", "oi", "a", "ie", "ind", "n", "s", "ni", "bi", "y", "ij", "si", "iu", "e", "I", "ti", "f", "b", "jj", "ai", "z", "p", "v", "jp", "ii", "l", "li", "m", "ei", "zi"], "t": ["o", "type", "dt", "at", "qt", "c", "d", "ut", "a", "int", "n", "ot", "s", "y", "g", "h", "ts", "tt", "tf", "u", "e", "f", "b", "w", "ta", "z", "v", "l", "m", "r", "p", "token"], "j": ["kj", "ji", "o", "js", "k", "c", "ci", "d", " ii", "jc", "a", "ie", " inj", "ind", "oj", "J", "n", "s", "uj", "y", "dy", "g", "ij", "h", "bj", "index", "jl", "pr", "jo", " l", "si", "br", "ja", "e", "je", "obj", "adj", "b", "jj", "jet", "f", "z", "v", "jp", "l", "aj", "m", "ii", "p"], "S": ["U", "SH", "D", "SS", "R", "E", "SK", "RS", "B", "TS", "W", "J", "Si", "SI", "s", "Y", "A", "G", "L", "String", "ST", "Q", "I", "X", "SU", "C", "SF", "Sc", "V", "P", "Sk", "O", "H", "M", "F", "N", "Z"]}}
{"code": "import math\\n\\n\\ndef main():\\n    h = int(input())\\n\\n    counter = 0\\n    multiple = 1\\n\\n    while True:\\n        if h == 1:\\n            counter += multiple\\n            break\\n        else:\\n            h = math.floor(h/2)\\n            counter += multiple\\n            multiple *= 2\\n\\n    print(counter)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "153", "substitutes": {"h": ["history", "o", "ha", "k", "x", "c", "hours", "d", "bh", "head", "n", "HH", "rh", "num", "t", "ch", "id", "y", "ph", "body", "g", "hh", "abc", "change", "dh", "self", "header", "f", "e", "hr", "b", "hi", "q", "sh", "gh", "w", "l", "v", "hm", "m", "r", "H", "hash", "ih", "p", "hs", "cl", "count"], "counter": ["cur", "cover", "x", "um", "c", "page", "current", "Counter", "wrapper", "sum", "value", "coll", "const", "expression", "carry", "instance", "n", "handler", "num", "cache", "math", "result", "id", "loop", "inner", "ctrl", "keep", "ignore", "total", "url", "hh", "iter", "change", "abc", "header", "index", "master", "lr", "number", "batch", "multi", "clock", "e", "f", "shift", "lc", "cube", "count"], "multiple": ["unit", "type", "common", "case", "repe", "extra", "done", "regular", "large", "current", "many", "variable", "value", "mult", "queue", "single", "all", "handler", "num", "double", "multipl", "fine", "total", "split", "phase", "force", "unique", "individual", "component", "more", "repeat", "channel", "number", "batch", "multi", " multiplier", "every", " Multiple", "Multiple", "no", "l", "length", "m", "li", "flat", "group", "two", "count"]}}
{"code": "N=int(input())\\nX=list(map(int, input().split()))\\nimport numpy as np\\np=np.floor(np.mean(X))\\nans=min(np.sum([(x-p)**2 for x in X]), np.sum([(x-(p+1))**2 for x in X]))\\n\\nprint(int(ans))", "target": "46", "substitutes": {"N": ["Node", "NA", "D", "NS", "E", "nb", "NC", "B", "Ns", "T", "n", "L", "Num", "NT", " n", "network", "NN", "PN", "C", "NI", "Ne", "V", "P", "K", "NP", "O", "M", "F"], "X": ["U", "D", "S", "ZX", "CL", "R", "E", "XX", "Point", "XT", "Data", "T", "W", "J", "Array", "Y", "A", "G", "L", "PH", "GE", "String", "EL", "AX", "IP", "UX", "Ex", "Q", "Sex", "C", "PE", "XL", "TX", "V", "P", "XP", "K", "MX", "EX", "XXX", "H", "M", "xs", "F", "PC", "Z"], "p": ["lp", "pi", "tp", "o", "k", "xp", "j", "c", "sp", "np", " y", " PI", " point", "a", "pos", "pa", " ip", "n", "s", "t", " span", "bp", " cp", "i", "y", "python", " period", " n", " pe", " po", " e", " xp", "py", "u", "pp", "f", "e", "b", "ps", "pn", "q", "w", "P", " pressure", "z", "v", "jp", "l", "pc", " P", " pi", "m", "pe", "fp"], "ans": ["ls", "ANN", "Ann", "anus", "san", "aning", "anned", "nas", "ins", "ants", "an", "anc", " means", "anon", "sk", "annot", "na", "anas", "ana", "An", "nan", "anes", "can", "cons", "AN", "atan", "aned", "cas", "anne", "ANS", "lan", "ann", "ane", "errors", "ani", "aus", "ons"], "x": ["k", "xi", "plus", "px", "c", "np", "ci", "point", "a", "data", "lex", "pos", "int", "n", "plex", "an", "Y", "t", "hyp", "i", "y", "ph", "min", "ax", "yx", "xt", "sex", "ay", "rx", "ct", "ix", "index", "fx", "ex", "u", "f", "e", "one", "xx", "inf", "w", "P", "z", "draw", "l", "cross", "xs", "now"]}}
{"code": "S_list = list(input())\\n\\nans = 0\\n\\nfor i in range(len(S_list) // 2):\\n    if S_list[i] != S_list[-i - 1]:\\n        ans += 1\\n\\nprint(ans)\\n", "target": "387", "substitutes": {"S_list": ["S_batch", "S_i", " S_List", "S_word", "L_base", "S1batch", "S2batch", "S_LIST", "Si_i", "SIPi", "LLogbase", "S_l", "Si_list", "S_List", "S1l", "L_LIST", "SiIPlist", "SiIPLIST", "L_pre", "SIPlist", " S_l", " S_batch", "SIPLIST", "S2list", "SLoglist", "S__word", "SLogLIST", "SESSlist", "Si_listed", "SLogbase", "SESSlisted", "L_list", "LLoglist", "S_pre", "S__list", " S_word", "S2l", "SiIPi", "S__List", "SIPlisted", "LLogpre", "S2List", "Si_LIST", "SLogpre", "S_listed", "S_base", "SESSLIST", "SESSi", "LLogLIST", "S1List", "SiIPlisted", "S1list", "S__l"], "ans": ["ls", "asses", "anus", "aning", "nas", "ins", "reads", "ars", "ants", "amps", "an", "s", "anc", "man", " means", "ats", "asts", "cs", "ents", "ams", "anon", "sk", "na", "os", "comments", "anas", "ds", "ks", "ana", "anes", "can", "lines", "AN", "atan", "aned", "leans", "ANS", "ann", "lan", "ns", "ani", "aces", "annels", "params", "ays", "mean", "aus", "ons"], "i": ["mini", "pi", "di", "k", "x", "xi", "j", "c", "ci", "d", "yi", "phi", "a", "start", "ind", "n", "s", "ini", "t", "ni", "bi", "id", "y", "h", "ix", "index", "eni", "si", "u", "iu", "f", "I", "e", "ti", "b", "mi", "hi", "ai", "z", "qi", "l", "v", "ii", "li", "m", "p"]}}
{"code": "from sys import stdin\\n\\nclass DList:\\n    class Cell:\\n        def __init__(self, k):\\n            self.key  = k\\n            self.prev = None\\n            self.next = None\\n\\n    def __init__(self):\\n        self.head = DList.Cell(None)\\n        self.last = DList.Cell(None)\\n        self.head.next = self.last\\n        self.last.prev = self.head\\n\\n    def insert(self, x):\\n        c = DList.Cell(x)\\n        c.prev = self.head\\n        c.next = self.head.next\\n        c.next.prev = c\\n        self.head.next = c\\n\\n    def delete(self, x):\\n        c = self.__find(x)\\n        if c != None:\\n            self.__delete(c)\\n\\n    def __delete(self, c):\\n        c.prev.next = c.next\\n        c.next.prev = c.prev\\n\\n    def __find(self, x):\\n        c = self.head.next\\n        while c != None and c.key != x:\\n            c = c.next\\n        return c\\n\\n    def deleteFirst(self):\\n        self.__delete(self.head.next)\\n    def deleteLast(self):\\n        self.__delete(self.last.prev)\\n\\n    def __iter__(self):\\n        self.it = self.head.next\\n        return self\\n    def __next__(self):\\n        if self.it == self.last:\\n            raise StopIteration\\n        k = self.it.key\\n        self.it = self.it.next\\n        return k\\n\\ndlist = DList()\\n\\nn = int(stdin.readline())\\nfor i in range(n):\\n    cmd = stdin.readline()\\n    if   cmd.startswith('insert'):\\n        dlist.insert(cmd[7:-1])\\n    elif cmd.startswith('deleteFirst'):\\n        dlist.deleteFirst()\\n    elif cmd.startswith('deleteLast'):\\n        dlist.deleteLast()\\n    elif cmd.startswith('delete'):\\n        dlist.delete(cmd[7:-1])\\n\\nprint(' '.join(dlist))\\n\\n", "target": "232", "substitutes": {"self": ["home", "type", "work", "object", "results", "current", "wrapper", "raw", "dev", "uc", "go", "args", "cc", "ec", "proc", "python", "time", "h", "tmp", "f", "us", "load", "gh", "m", "right", "make", "p", "cl", "part", "full", "first", "_", "plus", "err", "http", "er", "connection", "ng", "ws", "a", "data", "sys", "ss", "remote", "ch", "result", "cs", "sk", "client", "error", "default", "none", "no", "sh", "r", "block", "call", "method", "ctx", "point", "node", "event", "app", "context", "instance", "ck", "s", "cell", "plugin", "request", "function", "spec", "e", "func", "resp", "new", "es", "l", "patch", "form", "user", "o", "case", "Self", "this", "page", "name", "bug", "pos", "view", "all", "cache", "on", "g", "ok", "parent", "co", "master", "the", "host", "row", "me", "mp", "parse", "one", "b", "other", "private", "q", "w", "P", "module", "skip", "now", "utils", "cook"], "k": ["ik", "o", "ke", "this", "kk", "j", "work", "_", "object", "d", "ak", "name", " K", "mk", "ck", "ek", "kick", "ch", "y", "sk", "g", "ok", "ks", "kid", "uk", "dk", "f", "e", "b", "q", "tk", "kw", "z", "K", "v", "Key", "m", "isk", "p", "km", "ku"], "key": ["type", "pid", "search", "ak", "point", "ver", "col", "sum", "name", "data", "value", "start", "int", "ind", "ck", "list", "cache", "ch", "root", "id", "result", "entry", "pri", "cell", "ok", "iter", "query", "keys", "parent", "index", "ip", "row", "seq", "pub", "max", "res", "code", "label", "base", "lock", "link", "child", "chain", "ref", "mid", "Key", "str", "length", "order", "count"], "prev": ["history", "cur", "current", "best", "sub", "dev", "reverse", "tail", "var", "cmp", "tmp", "end", "sup", "desc", "ref", "orig", "right", "enc", "loc", "inv", "vr", "first", "extra", "op", "nav", "data", "id", "post", "iv", "br", "pub", "default", "max", "gt", "Prev", "future", "rest", "back", "old", "inst", "diff", "original", "pres", "server", "header", "adj", "func", "rev", "neg", "rec", "new", "patch", "this", "exp", "pred", "ver", "inter", "start", "pull", "cache", "info", "winner", "div", "iter", "parent", "master", "rel", "mp", "pre", "obj", "res", "peer", "vious", "skip"], "next": ["cur", "close", "current", "primary", "left", "sub", "reverse", "front", "nl", "sequence", "end", "sup", "child", "desc", "ultimate", "seen", "ne", "ext", "first", "good", "extra", "open", "done", "append", "result", "version", "Next", "post", "default", "max", "code", "shift", "length", "call", "sec", "ner", "future", "step", "frame", "back", "pointer", "server", "reply", "net", "nt", "adj", "rev", "new", "state", "success", "this", "pred", "page", "name", "start", "inter", "nd", "latest", "second", "inner", "target", "parent", "big", "line", "main", "size", "vious", "now", "path"], "head": ["dead", "first", "this", "cycle", "cle", "back", "name", "start", "system", "tail", "center", "ck", "hand", "pull", "list", "heads", "view", "root", "id", "loop", "block", "front", "check", "body", "client", "ack", "h", "target", "cell", "iter", "header", "index", "th", "master", "hook", "host", "post", "thread", "heading", "ip", "run", "Head", "max", "end", "before", "load", "clean", "new", "shift", "HEAD", "child", "link", "bottom", "init", "tag", "style", "commit", "patch", "right", "form", "group", "top", "call"], "last": ["est", "later", "sync", "first", "full", "this", "good", "close", "best", "cycle", "current", "left", "cle", "back", "old", "start", "latest", "second", "tail", "all", "hand", "test", "cost", "front", "total", "body", "target", "iter", "parent", "server", "Last", "th", "final", "size", "default", "max", "end", "base", "worst", "child", "bottom", "length", "right", "top"], "x": ["loc", "xp", "xi", "j", "ci", "d", "ctx", "xy", "name", "uc", "s", "t", "ch", "id", "y", "tx", "xa", "g", "xxx", "ax", "h", "cell", "rx", "co", "ct", "ix", "index", "ex", "xc", "u", "e", "f", "dx", "b", "X", "xx", "code", "xf", "q", "w", "z", "v", "l", "ic", "cross", "r", "xs", "m", "p", "any", "cl"], "c": ["cur", "o", "mc", "case", "cy", "ci", "d", "col", "ac", "coll", "uc", "bc", "fc", "cc", "s", "ce", "t", "ch", "cs", "y", "ec", "ic", "g", "con", "h", "cell", "cp", "co", "ct", "cm", "dc", "vc", "can", "cu", "xc", "u", "e", "f", "end", "b", "code", "ca", "unc", "C", "arc", "w", "z", "cr", "l", "v", "sc", "lc", "pc", "r", "cat", "cf", "m", "p", "oc", "nc", "rc", "cl", "call"], "it": ["unit", "ik", "est", "hit", "you", "j", "op", "ait", "ci", "ul", "It", "edit", "start", "int", "ind", "jit", "quit", "t", "entry", "iter", "git", "th", "ip", "mit", "bin", "bit", "which", "item", "br", "ite", "iti", "exec", "end", "IT", "init", "pit", "ic", "li", "its", "lit", "p", "itter"], "dlist": ["xblock", "ctable", "xcheck", " dtree", "drlist", "sdList", "xlist", " dload", "mdList", " dbatch", "darray", "mdload", "nmap", "dhlist", "nload", "clist", "dList", "ddlist", "dbatch", "pdload", "dhmap", "narray", "ddlisted", "dtable", "nblock", "dtree", "vdlisted", " dmap", "ntree", "vdtable", "lList", " dcheck", "clisted", "xload", "ltest", "dhbatch", " dlisted", "ddbatch", "sdbatch", "vdlist", "pdbatch", " dtable", "dtest", "dlisted", "xList", "nbatch", "llist", "pdlisted", "nlist", "sdtest", "dmap", "dload", "sdlist", " dList", "ddload", "mdcheck", "dblock", "xarray", "lbatch", " dtest", "drload", "dcheck", "dhtree", "pdlist", "drblock", "drarray", "mdlist"], "n": ["o", "j", "d", "node", "nb", "ot", "num", "s", "t", "g", "count", "network", "nl", "number", "nu", "fn", "f", "nt", "b", "ns", "sn", "no", "nor", "z", "l", "m", "r", "nc", "p", "ne", "N"], "i": ["j", "gi", "ci", " I", "col", "name", "ind", "num", "id", "y", "g", " il", "h", "ip", "bit", "il", "u", "e", "I", "code", "l", "li", "r", "p"], "cmd": ["history", "out", "Cmd", "cc", "handle", "char", "child", "dict", "grad", "cl", "conn", "log", "mode", "op", "data", "ch", "id", "ctrl", "cp", "md", "code", "cat", "method", "call", "cookie", "mac", "input", "ctx", "comm", "cb", "cod", "cli", "fun", "ck", "config", "pkg", "buf", "domain", "url", "command", "bin", "batch", "stat", "help", "func", "clean", "init", "cd", "addr", "req", "dom", "np", "name", "bug", "cfg", "quit", "wd", "g", "force", "magic", "shell", "act", "filename", "host", "pipe", "send", "module", "filter", "json", "msg", "text", "utils", "path"]}}
{"code": "n,a,b=map(int,input().split())\\n\\nans=0\\nfor i in range(1,n+1):\\n  count=0\\n  for j in str(i):\\n    count+=int(j)\\n  if a<=count<=b:\\n    ans+=i\\nprint(ans)\\n", "target": "704", "substitutes": {"n": ["o", "cn", "k", "x", "c", "d", "nb", "an", "num", "y", "g", "h", "nan", "number", "u", "size", "e", "f", "ns", "z", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "o", "c", "d", "ak", "ac", "ab", "da", "an", "A", "y", "alpha", "na", "g", "sa", "offset", "span", "aa", "u", "f", "ad", "am", "ca", "ai", "ba", "aj", "m", "p", "au"], "b": ["eb", "k", "x", "c", "d", "cb", "nb", "ab", "B", "bound", "bd", "bis", "s", "y", "bs", "g", "fb", "number", "lb", "f", "e", "base", "sb", "w", "z", "ba", "l", "v", "length", "m", "bf", "r", "p"], "ans": ["offs", "ls", "nas", "ras", "ins", "reads", "sum", "ants", "ss", "amps", "args", "an", "s", "list", "man", "anc", " means", "ats", "asts", "cs", "oss", "ents", "anon", "sk", "atches", "na", "os", "ks", "nan", "nn", "span", "ana", "can", "ism", "lines", "anes", "lists", "AN", "cas", "leans", "aned", "len", "ANS", "acts", "ann", "lan", "ns", "errors", "ions", "no", "ani", "annels", "mean", "eps", "aus", "ons"], "i": ["pi", "it", "o", "k", "x", "xi", "c", "ci", "d", "start", "int", "ind", "ni", "id", "y", "index", "ip", "si", "u", "iu", "e", "I", "f", "im", "ai", "init", "z", "qi", "v", "l", "ii", "li", "m", "p"], "count": ["part", "k", "x", "c", "d", "sum", "ac", "start", "ind", "num", "list", "ch", "weight", "id", "y", "h", "index", "span", "number", "size", "len", "Count", "f", "max", "ann", "e", "code", "base", "q", "w", "z", "l", "length", "m", "order", "p"], "j": ["ji", "o", "k", "x", "c", "d", "pos", "ind", "J", "oj", "num", "bi", "y", "h", "ja", "f", "e", "obj", "jj", "q", "ai", "z", "v", "jp", "aj", "jam", "m", "l", "r", "p"]}}
{"code": "a,b = list(map(int,input().split()))\\nprint(a%b)", "target": "739", "substitutes": {"a": ["area", "access", "input", "c", "ama", "ab", "ie", "aux", "int", "n", "pa", "da", "an", "num", "A", "i", "alpha", "div", "sa", "abc", "ia", "index", "la", "aa", "va", "active", "ad", "ca", "sup", "code", "ga", "ba", "ea", "aj", "p", "count", "au"], "b": ["eb", "k", "mb", "abb", "x", "c", "d", "ob", "nb", "ab", "B", "zb", "n", "xb", "rb", "i", "y", "bs", "bar", "val", "fb", "abc", "ok", "ib", "bad", "beta", "aa", "wb", "u", "e", "f", "sb", "aaa", "ba", "v", "bb", "p"]}}
{"code": "n = int(input())\\nans = 111\\nwhile ans < n:\\n    ans += 111\\nprint(ans)", "target": "352", "substitutes": {"n": ["o", "k", "x", "c", "d", "nb", "Ns", "an", "num", "s", "na", "min", "ok", "nan", "nn", "span", "bin", "number", "names", "len", "nt", "max", "b", "ns", "sn", "z", "m", "r", "nc", "nin", "p", "ons", "ne", "N"], "ans": ["ls", "x", "aning", "nas", "ins", "reads", "ars", "ants", "ens", "an", "anc", " means", "ats", "cs", "ents", "ians", "anon", "sk", "na", "anas", "plan", "ds", "ks", "nan", "ids", "nn", "ana", "can", "anes", "cons", "AN", "atan", "leans", "aned", "ANS", "ann", "lan", "ns", "ands", "sn", "ani", "ano", "ays", "mean", "ares", "xs", "aus", "ons"]}}
{"code": "n = int(input())\\nla = [int(w) for w in input().split()]\\n\\ncnt = [0]*9\\nfor a in la:\\n    if a > 3200:\\n        a = 3200\\n    cnt[a // 400] += 1\\n\\nmi = len([_ for _ in cnt[:8] if _ > 0])\\nma = mi+cnt[8]\\n\\nif mi == 0:\\n    mi = 1\\n\\nprint(mi, ma)\\n", "target": "306", "substitutes": {"n": ["NA", "o", "c", "nb", "an", "num", "ni", "nw", "na", "g", " na", "ana", "nn", "net", "ann", "b", "ns", "no", "z", "l", "m", "r", "nc", "p", "ne", "N"], "la": ["area", "ls", "loc", " sa", "au", "ci", "phi", "wa", "lo", "lla", "pa", "da", "fa", "La", "alpha", "na", "sa", "ana", "ia", "sea", "aa", " wa", "va", "lam", "ca", "mas", "ga", "ta", "ba", "las", "lc", "l", "li", "lu", "ka", "LA"], "w": ["it", "k", "window", "work", "x", "wl", "c", "wan", "aw", "d", "ws", "wa", "int", "W", "ww", "all", "wt", "num", "weight", "wave", "y", "id", " W", "width", "sw", "g", "word", "ow", "win", "ew", "wb", "u", "f", "b", "q", "m", "r", "words", "wh", "p", "wi", "wu"], "cnt": ["Cnd", "dcpt", "cno", "pcnc", "ccount", " cnd", "lcnt", "icnt", " ccount", "enccount", "ecrt", "cant", " cpt", "ecno", "dcnd", "lcrt", "lcno", " cant", "encnt", "icnd", "cnd", "ccrt", "Crt", "cccount", "pcno", "encrt", "dcnt", "Cpt", "encct", "ecnt", "cnc", "ecnc", "Cnt", "cct", "pcnt", "Cct", "iccount", "Ccount", "lcnc", "pcrt", "ccnt", " crt", "icrt", "Cant", "cpt", "ccnd", "dcant", " cct", "crt"], "a": ["area", "auto", "ya", "x", "c", "aw", "ac", "wa", "af", "pa", "mA", "da", "s", "an", "A", "fa", "i", "alpha", "na", "qa", "sa", "ana", "age", "aa", "va", "f", "am", "b", "ca", "ad", "ga", "ai", "ae", "z", "ba", "aaa", "l", "m", "p", "au"], "mi": ["mini", "pi", "di", "mc", "xi", "mic", "gi", "ci", "phi", "pa", "imi", "meta", "num", "ini", "ui", "ni", "bi", "i", " Mi", "ms", "ia", "umi", "multi", "si", "me", "ami", "mu", "ti", "am", "my", "MI", "ki", "mis", "mm", "hi", "ai", "pm", "ii", "mid", "m", "li", "Mi", "zi"], "_": ["log", "o", "k", "x", "j", "ac", " p", "__", "long", "all", "non", "list", "A", "i", "id", "y", "iq", " j", "h", "ay", "ix", "ox", "ip", "u", "max", "I", "ad", "q", "v", "l", "oc", "p"], "ma": ["mc", "mma", "ima", "wa", "mia", "lla", "pa", "da", "meta", "fa", "ni", "i", "ema", "Ma", "qa", "sa", "ms", "ia", "si", "me", "mu", "sha", "am", "ca", "mas", "MA", "mm", "ga", "ai", "ta", "ea", "ada", "m"]}}
{"code": "import math\\nn, a, b = map(int, input().split())\\nh_list = [int(input()) for _ in range(n)]\\n\\nlb = 0\\nub = 10**9 # \u3053\u308c\u3060\u3051\u5531\u3048\u308c\u3070\u78ba\u5b9f\u306b\u5168\u6ec5\u3059\u308b\\n\\ndef is_ok(m):\\n    # m\u56de\u306e\u653b\u6483\u3067\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u5168\u6ec5\u3059\u308b\u304b\\n    tmp_ans = 0\\n    for h in h_list:\\n        tmp_h = max(h-m*b, 0) # \u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6b8b\u308a\u4f53\u529b\\n        tmp_ans += math.ceil(tmp_h/(a-b)) # \u7206\u767a\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u56de\u6570\\n    if tmp_ans <= m:\\n        return True\\n    else:\\n        return False\\n\\n\\nng = lb\\nok = ub + 1\\nwhile ok - ng > 1:\\n    m = (ok + ng) // 2\\n    if is_ok(m):\\n        ok = m\\n    else:\\n        ng = m\\n\\nprint(ok)\\n", "target": "51", "substitutes": {"n": ["o", " h", "k", "x", "j", "c", "d", " fn", " N", "nb", " p", "name", "ac", "int", "bn", "num", "an", "t", "i", "y", "na", "count", "g", "h", "abc", "nn", "nan", "number", " c", " l", "aa", "br", "u", "nt", "f", "fn", "ns", "no", " i", "w", "z", "l", "m", "p", "N"], "a": ["area", "at", "x", "c", "aw", "ar", "ac", "ab", "action", "an", "A", "y", "alpha", "na", "sa", "aa", "va", "f", "am", "ad", "ca", "ai", "asa", "aj", "p"], "b": ["x", "c", "d", "nb", "ab", "B", "s", "binary", "num", "i", "y", "bs", "h", "beta", "number", "u", "f", "base", "sb", "w", "l", "v", "r", "p"], "h_list": [" H_list", " H_LIST", " H_code", "h_code", "h_int", " H_int", "h_LIST"], "_": [" __", " line", " col", "__", " time", " ip", " row", " f", " seq", " block", " name"], "lb": ["lp", "eb", "pb", "lf", "acl", "nb", "ab", "kl", "pa", "ll", "rb", "fb", "bl", "lr", "nl", "la", "wb", "lbs", "rl", "sb", "dl", "abl", "lc", "l", "li", "bp"], "ub": ["su", "ul", "um", "ob", "ut", "ab", "sub", "du", "uc", "hub", "UB", "rb", "ch", "ug", "uff", "ib", "cp", "ur", "u", "uf", "pl", "im", "ubs", "rob", "lu", "up", "rc", "ud"]}}
{"code": "H = int(input())\\nW = int(input())\\nN = int(input())\\nprint((N // max(H, W)) if N % max(H, W) == 0 else (N // max(H, W) + 1))", "target": "592", "substitutes": {"H": ["U", "D", "S", "Max", "He", "R", "HC", "E", "Hi", "B", "OH", "T", "RH", "NH", "HH", "Y", "L", "Wh", "G", "FH", "HK", "EH", "h", "FW", "Q", "Ha", "GH", "Length", "X", "C", "HM", "MH", "HI", "V", "P", "K", "AH", "TH", "O", "Sh", "M", "F", "CH", "Z"], "W": ["U", "GW", "SH", "D", "Width", "BW", "R", "E", "WF", "Weight", "B", "WR", "T", "J", "EW", "Y", "L", "G", "Wh", "Web", "WP", "DW", "NW", "FW", "Q", "WC", "Wa", "WS", "WB", "X", "SW", "WN", "C", "CW", "Win", "V", "w", "P", "We", "K", "Word", "O", "M", "VW", "F", "WE", "WD", "Z"], "N": ["ND", "U", "Node", "NA", "D", "S", "NV", "R", "NS", "E", "NL", "NE", "B", "Ns", "T", "n", "J", "NH", "Y", "Ni", "L", "G", "Wh", "Num", "SN", "NB", "NT", "NM", "Size", "NW", "NN", "MN", "Q", "X", "NO", "C", "NI", "Ne", "Na", "NG", "V", "P", "K", "Sum", "O", "M", "F", "Z"]}}
{"code": "import sys\\n\\ndef main(lines):\\n  N = int(lines[0])\\n  print(N // 2*(N - N // 2))\\n\\nif __name__ == '__main__':\\n    lines = []\\n    for l in sys.stdin:\\n        lines.append(l.rstrip('\\r\\n'))\\n    main(lines)", "target": "402", "substitutes": {"lines": ["lights", "ls", "log", "files", "d", "ins", "runs", "Line", "kl", "LINE", "models", "args", "s", "rules", "lins", "liners", "L", "strings", "shows", "points", "elines", "body", " Lines", "breaks", "blocks", "cells", "rows", "flows", "les", "ds", "lists", "line", "nl", "ks", "names", "items", "frames", "alls", "lin", "los", "f", "inline", "objects", "code", "ns", "values", "links", "tests", "pages", "works", "groups", "ines", "ln"], "N": ["D", "S", "R", "NS", "E", "NL", "Line", "B", "Ns", "T", "n", "J", "W", "Y", "Ni", "L", "G", "Len", "Num", "NT", "NM", " n", "PN", "Q", "Python", "X", "C", "Ne", "NG", "V", "P", "K", "O", "H", "M", "F", "Z"], "l": ["ls", " v", " L", "upt", " pl", "c", "d", "ut", " p", "kl", "fl", "sl", "n", "yl", "all", "ll", "list", "s", "t", "L", "linux", "get", " perl", "python", "g", " local", " lib", " ESL", "nl", "py", "lin", "f", "e", "b", "lang", " python", "pl", " Python", "dl", "p", "lib", "v", "lc", "r", "li", "m", "ln", "Python", " linux"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nMOD = 10 ** 9 + 7\\n\\nsumm = 0\\nans = 0\\nfor i in range(1, n):\\n    summ += a[-i]\\n    ans += a[-(i + 1)] * summ\\n    ans %= MOD\\n\\nprint(ans % MOD)\\n", "target": "198", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "np", "d", " N", "nb", "Ns", "num", "s", "t", "ni", "y", "g", "network", "nn", "nan", "nu", "u", "len", "f", "b", "ns", "sn", "w", "z", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["ma", "sta", "x", "input", "c", "aw", "ar", "ac", "ab", "aux", "mA", "args", "ata", "s", "an", "array", "A", "y", "alpha", "analysis", "sa", "abc", "ia", "aa", "u", "e", "f", "b", "am", "ad", "ga", "ai", "ae", "ba", "ao", "aj", "m", "p", "au"], "MOD": ["U", "RC", "mode", "LM", "MAG", "ARM", "SS", "OD", "R", "XX", "SAM", "FD", "UN", "mult", "mod", "MAC", "Y", "AM", "Len", "Num", "DD", "SIZE", "RM", "Size", "MD", "SPEC", " mod", "MAX", "md", "ROM", "MS", "FORM", "MODE", "AN", "Mods", "I", "X", "SU", " Mod", "C", "NO", "Mod", "NUM", "MIN", "MM", "CC", "SIM", "ACK", "m", "IM", "REM", "M", "CM", "N", "Z"], "summ": ["Scum", "asummies", "suman", "susc", "asumm", "Suman", "sum", "xsuman", " sman", "insumm", "insum", "xsman", "pcum", " summies", "asusc", "insusc", "scum", "asum", "xsumm", "Susc", " sum", "insummies", "pman", " suman", " scum", "Summ", "xsum", "pumm", "summies", "Sum", "Summies", "pummies", "Sman", "sman"], "ans": ["ls", " es", " samples", "Ann", "ANN", "news", "san", " answers", "nas", "aos", "ins", "sum", "ars", "ss", " ls", "ants", "amps", "ens", "an", "s", "anc", "A", "man", " means", " s", "cs", "oss", "anon", "sk", "na", " cs", "anas", "ms", "nan", "An", "ana", " sins", "can", "cons", "AN", "aned", "\u03b1", " Ans", "ANS", "leans", "ann", " chars", "ns", "lan", "scan", "chan", "ions", "ai", "ani", "ano", "ays", " scans", "yes", "sam", "eps", "ln", "aus", "rams", " news"], "i": ["pi", "di", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "start", "pos", "ind", "ini", "ui", "ni", "bi", "id", "y", "h", "ix", "index", "eni", "si", "u", "iu", "e", "I", "ti", "f", "b", "mi", "adi", "ai", "z", "p", "qi", "v", "ii", "li", "m", "io", "vi", "zi"]}}
{"code": "S = input()\\nN = len(S)\\n\\nans1 = 0\\nans2 = 0\\n\\nfor i in range(N):\\n  if i%2 == 0:\\n    if S[i] != \"0\":\\n      ans1 += 1\\n    else:\\n      ans2 += 1\\n  else:\\n    if S[i] != \"1\":\\n      ans1 += 1\\n    else:\\n      ans2 += 1\\n\\nprint(min(ans1, ans2))", "target": "495", "substitutes": {"S": ["SE", "U", "SH", "SO", "D", "GS", "SS", "R", "NS", "Sample", "RS", "SK", "SAM", "B", "T", "TS", "W", "SI", "s", "Y", "Array", "A", "L", "G", "SN", "Single", "SL", "INS", "ST", "DS", "PS", "Q", "Set", "Sign", "I", "CS", "X", "SU", "C", "V", "OS", "P", "K", "SM", "O", "H", "M", "F", "VS"], "N": ["NA", "D", "R", "NS", "NE", "B", "Ns", "T", "n", "J", "Y", "Ni", "L", "G", "Len", "NT", "NM", "MN", "Q", "I", "X", "C", "Ne", "V", "OS", "P", "K", "O", "H", "M", "F", "Z"], "ans1": ["ars3", "an2", "ainon", "atan3", "ans3", "ann01", "annon", "ann3", "ars1", "annone", "anpart", "ans01", "ars2", "ain2", "atan1", "ain1", "anon", "anone", "aned3", "aned1", "an1", "ann1", "aned2", "ain3", "an3", "atanone", "ansone", "annpart", "arspart", "aned01", "anson", "ann2", "an01", "atan2", "anspart"], "ans2": [" ans12", "an2", "an12", "ANS2", "ANS1", "ans72", "austwo", " ans02", "ars1", "ansTwo", "ANS12", "ars72", "aus1", "anntwo", "ans12", "annTwo", "an4", "atan1", "atan4", "atanTwo", "an72", "ann4", "an1", "ann1", "an02", "ars4", "antwo", "ANS02", "ans4", "aus4", "ann2", "ans02", "anstwo", "ann72", "aus2", "atan2", "anTwo", "ars2"], "i": ["pi", "di", "o", "uri", "k", "x", "xi", "j", "gi", "c", "ci", "d", "phi", "a", "io", "start", "ori", "ie", "int", "ind", "n", "s", "num", "ui", "t", "ini", "ni", "bi", "id", "y", "ix", "index", "eni", "si", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "p", "qi", "l", "v", "ii", "li", "m", "ei"]}}
{"code": "n, k, q = map(int,input().split())\\na = [0 for i in range(n)]\\nfor i in range(q):\\n    x = int(input())\\n    a[x-1] += 1\\nfor i in range(n):\\n    print(\"Yes\" if a[i] - (q - k) > 0 else \"No\")", "target": "336", "substitutes": {"n": ["o", "j", "c", "d", "name", "num", "s", "t", "y", "na", "g", "h", "nu", "u", "net", "f", "e", "b", "ns", "no", "w", "z", "v", "l", "m", "nc", "p", "ne", "N"], "k": ["o", "ke", "kk", "j", "c", "d", "mk", "ek", "y", "sk", "g", "h", "ks", "u", "f", "e", "b", "ki", "w", "z", "K", "v", "m", "p", "km"], "q": ["o", "j", "c", "d", "qs", "quant", "num", "t", "range", "id", "y", "quality", "g", "qa", "h", "query", "Q", "sq", "eq", "u", "f", "e", "qq", "w", "z", "qi", "v", "l", "m", "p", "qu", "dq", "count"], "a": ["ma", "area", "o", "input", "c", "ac", "data", "ab", "da", "an", "array", "A", "y", "alpha", "na", "qa", "sa", "ana", "ia", "aa", "la", "u", "va", "oa", "f", "b", "am", "ad", "ca", "ans", "ga", "ai", "ae", "z", "ba", "l", "aj", "m", "p", "au"], "i": ["pi", "di", "o", "it", "xi", "j", "c", "ci", "d", "yi", "io", "int", "ind", "ini", "ni", "bi", "id", "y", "iq", "ix", "index", "ip", "si", "u", "iu", "e", "I", "ti", "f", "b", "ai", "z", "qi", "l", "v", "ii", "li", "p"], "x": ["o", "xp", "xi", "j", "c", "d", "wa", "int", "t", "y", "na", "ax", "h", "ix", "index", "ex", "u", "e", "f", "b", "X", "xx", "w", "z", "v", "l", "xs", "p"]}}
{"code": "n = int(input())\\nans = 0\\nfor i in range(10**5):\\n    if i**2<=n:\\n        ans = i**2\\n    else:\\n        break\\nprint(ans)", "target": "330", "substitutes": {"n": ["o", "k", "x", "c", "np", "d", "nb", "Ns", "an", "s", "num", "ni", "y", "g", "network", "nan", "number", "nit", "u", "len", "f", "e", "nt", "b", "ns", "nor", "z", "l", "m", "r", "nc", "p", "ne", "N"], "ans": ["offs", "ls", "anus", "nas", "ins", "ars", "ants", "ss", "amps", "ens", "an", "anc", " means", "ats", "ni", "ents", "anon", "sk", "annot", "na", "anas", "ks", "nan", "nn", "inn", "ana", "anes", "can", "lines", "AN", "atan", "aned", "leans", "ANS", "ann", "lan", "ns", "scan", "works", "ani", "annels", "mean", "eps", "ines", "aus", "ons"], "i": ["mini", "pi", "k", "x", "xi", "j", "c", "ci", "d", "phi", "a", "io", "start", "int", "ind", "s", "ini", "ui", "t", "ni", "bi", "index", "si", "u", "e", "I", "ti", "f", "b", "ai", "z", "chi", "v", "l", "ii", "li", "m", "p", "zi"]}}
{"code": "n,u,v=map(int,input().split())\\nu-=1;v-=1\\nedge=[[]*n for _ in range(n)]\\nfor _ in range(n-1):\\n  a,b=map(int,input().split())\\n  a-=1;b-=1\\n  edge[a].append(b)\\n  edge[b].append(a)\\n  \\n  \\n# from u \u9003\u3052\u308b\\n# u\u306fv\u304b\u3089\u307f\u305f\u8ddd\u96e2\u304c\u5927\u304d\u3044\u65b9\u306b\u9032\u3080\u306e\u304b\u306a\\n# from v \u8ffd\u3046\\n# v\u59cb\u70b9\u3067BFS\u3057\u3066\u5404\u9802\u70b9\u3078\u306e\u8ddd\u96e2\u3092\u6301\u3064\\ndist=[-1]*n\\n\\nfrom collections import deque\\nq=deque()\\nq.append(v)\\ndist[v]=0\\nwhile q:\\n  p=q.popleft()\\n  d=dist[p]\\n  for i in edge[p]:\\n    if dist[i]==-1:\\n      dist[i]=d+1\\n      q.append(i)\\n\\n# print(dist)\\n\\nfar=[-1]*n\\nq=deque()\\nq.append(u)\\nfar[u]=0\\nwhile q:\\n  p=q.popleft()\\n  d=far[p]\\n  for i in edge[p]:\\n    if far[i]==-1:\\n      if dist[i]>d+1:\\n        far[i]=d+1\\n        q.append(i)\\n\\n# print(far)\\n  \\n\\nfar_mx=max(far)\\nif far_mx==-1:\\n  print(0)\\n  exit()\\n  \\nind=[i for i,v in enumerate(far) if v!=-1]\\n\\nto=max(dist[i] for i in ind)\\nans=(to-1)\\nprint(ans)\\n", "target": "309", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "num", "s", "t", "i", "y", "g", "en", "h", "network", "nu", "size", "net", "f", "e", "max", "ns", "sn", "q", "w", "z", "l", "m", "r", "p", "ne", "N"], "u": ["U", "o", "k", "x", "uv", "tu", "c", "j", "d", "ut", "int", "t", "i", "y", "g", "h", "nu", "e", "f", "us", "q", "w", "z", "l", "m", "r", "p", "up"], "v": ["o", "k", "x", "j", "uv", "c", "d", "s", "t", "i", "y", "g", "h", "va", "e", "f", "q", "V", "w", "sv", "z", "nv", "l", "ii", "m", "r", "p", "vy"], "edge": ["grade", " Edge", "ide", "page", "cycle", "slice", "point", "node", "event", "ie", "diff", "une", "degree", "side", "anch", "ge", "range", "update", "id", "g", "h", "image", "network", "change", "line", "index", "span", "source", "age", "Edge", "graph", "issue", "move", "ite", "e", "end", "adj", "route", "shape", "link", "q", "office", "cross", "hip", "ace", "p", "pe", "ice", "face"], "_": ["x", " sub", " un", " col", "__", " time", "s", "non", " function", " seq", "f", " block", " non", " the", "p", "l", " q"], "a": ["o", "k", "x", "j", "c", "d", "ac", "ab", "pa", "da", "an", "s", "A", "fa", "i", "y", "alpha", "g", "sa", "ia", "aa", "va", "e", "f", "ad", "ca", "ga", "ai", "ae", "w", "ba", "l", "r", "p", "au"], "b": ["o", "k", "x", "j", "c", "db", "d", "nb", "ab", "B", "s", "rb", "i", "y", "bs", "g", "h", "next", "aa", "wb", "f", "e", "sb", "w", "be", "z", "ba", "l", "r", "m", "bb", "p"]}}
{"code": "n,m=map(int,input().split())\\nstudent=[]\\nfor _ in range(n):\\n    a,b=map(int,input().split())\\n    student.append([a,b])\\n\\ncheckpoint =[]\\nfor _ in range(m):\\n    c,d = map(int,input().split())\\n    checkpoint.append([c,d])\\n\\nfor i in range(n):\\n    s = student[i]\\n    dist = float('inf')\\n\\n    num=0\\n    for j in range(m):\\n        c=checkpoint[j]\\n        tmp = abs(s[0]-c[0]) + abs(s[1]-c[1])\\n\\n        if tmp < dist:\\n            dist = tmp\\n            num=j+1\\n\\n    print(num)\\n        \\n", "target": "3", "substitutes": {"n": ["o", "k", "x", "np", "nb", "ac", "int", "an", "t", "y", "g", "en", "network", "nan", "nn", "u", "size", "f", "e", "nt", "ns", "no", "q", "w", "z", "l", "v", "r", "nc", "M", "p", "ne", "N"], "m": ["o", "mc", "k", "x", "nm", "int", "an", "y", "mn", "g", "h", "ms", "md", "cm", "u", "f", "e", "mu", "sm", "mm", "im", "w", "z", "dm", "v", "l", "hm", "r", "M", "p"], "student": ["unit", "ner", "string", "grade", "step", "distance", "package", "input", "su", "course", "device", "pair", "session", "data", "dev", "report", "instance", "license", "trial", "list", "array", "result", "test", "block", "track", "split", "time", "check", "testing", "graduate", "stud", "sample", "server", "index", "source", "error", "number", "train", "school", "address", "reader", "shape", "scan", "seed", "slave", "Student", "temp", "rank", "user"], "_": ["o", "k", "out", "x", "__", "all", "non", "time", "g", "ay", "un", "ip", "f", "am", "code", "q", "p"], "a": ["area", "o", "x", "ar", "ak", "ab", "ac", "af", "int", "da", "an", "A", "y", "api", "sa", "ia", "aa", "u", "va", "f", "e", "ad", "ca", "am", "ga", "ai", "ae", "asa", "ba", "ap", "p", "au"], "b": ["eb", "x", "db", "ab", "B", "bc", "bd", "rb", "bot", "bi", "y", "bs", "fb", "aa", "lb", "e", "f", "sb", "be", "ba", "l", "bf", "r", "bb", "p"], "checkpoint": ["blockPoint", "blockpointer", " checkpo", "workpointer", "checkline", "keypoints", "workpo", "workpoint", "keyPoint", "checkpoints", "blockpoints", " checkpt", "Checkline", "lookPoint", "blockpoint", "workPoint", "keypoint", "checkpo", "workline", "Checkpoint", "keypointer", "lookpt", "Checkpointer", " checkPoint", "workpt", " checkpointer", "checkpt", "checkpointer", "lookpoint", " checkline", "Checkpo", "workpoints", "checkPoint"], "c": ["sec", "o", "case", "cn", "k", "x", "cy", "ci", "col", "ac", "jc", "uc", "cc", "ce", "t", "ch", "cs", "y", "ec", "g", "ct", "cm", "dc", "cu", "u", "xc", "f", "e", "ca", "C", "q", "w", "z", "l", "v", "cd", "lc", "cross", "cf", "nc", "p"], "d": ["df", "D", "dt", "k", "x", "db", "du", "bd", "da", "t", "y", "dy", "fd", "ds", "dc", "u", "e", "f", "dd", "dx", "w", "z", "v", "l", "r", "dat", "p"], "i": ["ji", "o", "k", "x", "xi", "ci", " ii", "start", "int", "ind", "J", "t", "ni", "id", "iq", "y", " dj", "ij", "ix", "index", "ip", "si", "u", "f", "I", "e", "jj", " k", "ai", "z", "l", "v", "ii", "li", "p"], "s": ["o", "S", "sync", "x", "su", "sin", "sp", "ses", "start", "ss", "pos", "sl", "t", "cs", "y", "sd", "source", "sf", "sq", "si", "u", "f", "e", "ns", "sn", "sb", "z", "v", "l", "sc", "xs", "r", "se", "p"], "dist": ["df", "grade", "dt", "distance", "Dist", "err", "det", "pred", " Dist", "np", "sum", "data", "dev", "diff", "pos", "src", "ind", "progress", "dir", "weight", "cmp", "test", "sd", "dy", "cost", "rt", "div", " distance", "dim", "cp", "ord", "comp", "norm", "f", "dx", "nt", "match", "sup", "rec", "Distance", "grad", "p", "rank"], "num": ["unit", "nam", "grade", "loc", "su", "um", "np", " Num", "node", "nb", "sum", "diff", "pos", "mom", "dir", "info", "Num", "id", "test", "result", " nu", "uni", "check", "coord", "div", "dim", "ord", "index", "span", "number", "nu", "norm", "nr", "nom", "f", "max", "obj", "code", "new", "NUM", "no", "init", "orig", "gen", "sim", "p", "temp", "rank", "count"], "j": ["ji", " J", " v", "o", "k", "x", " p", "jc", "ie", "pos", "ind", "J", "t", "y", " dj", "g", "ij", " x", "job", "index", " l", "u", "f", "e", "max", "adj", "jj", "jump", "q", "z", "v", "jp", "l", "ii", "r", "aj", "p"], "tmp": ["cur", "tp", "part", "distance", "extra", "done", "sp", "np", "current", "tc", "img", "nb", "dest", "data", "ie", "start", "const", "diff", "etc", "pos", "vt", "src", "cache", "t", "td", "cmp", "test", "alpha", "ignore", "div", "cp", "tt", "tf", "acc", "beta", "pad", "nu", "zip", "norm", "treatment", "mp", "nom", "mu", "nt", "obj", "adj", "f", "jj", "sup", "frac", "txt", "now", "p", "temp", "count"]}}
{"code": "a = input()\\ncount = 700\\nfor b in a:\\n  if b == \"o\":\\n    count += 100\\n\\n\\nprint(count)", "target": "231", "substitutes": {"a": ["ma", "area", "o", "c", "ar", "ama", "ab", "ac", "name", "B", "af", "pa", "n", "an", "A", "fa", "i", "y", "alpha", "na", "sa", "abc", "aa", "va", "f", "ad", "ca", "base", "am", "ga", "ai", "ae", "z", "ba"], "count": ["part", "type", "case", "c", "amount", "sum", "col", "name", "data", "start", "ind", "n", "all", "num", "list", "cache", "depth", "allow", "weight", "i", "test", "id", "key", "total", "check", "val", "index", "number", "batch", "age", "len", "size", "Count", "f", "every", "code", "base", "status", "counter", "tag", "cat", "found", "length", "p", "group", "call"], "b": ["o", "eb", "x", "c", "d", "account", "cb", "nb", "ab", "ac", "B", "n", "s", "bi", "i", "y", "bs", "g", "abc", "ib", "bl", "number", "ach", "f", "e", "am", "ad", "base", "ga", "sb", "w", "v", "r", "bb", "p", "enc"]}}
{"code": "dice = [1,2,3,4,5,6]\\nnumber = list(map(int,input().split()))\\ndirection = str(input())\\n\\nrotate_n =[2,6,3,4,1,5]\\nrotate_s =[5,1,3,4,6,2]\\nrotate_e =[4,2,1,6,5,3]\\nrotate_w =[3,2,6,1,5,4]\\n\\nfor i in direction:\\n    result = []\\n    if i == \"N\":\\n        for j in range(6):\\n            dice[j] = rotate_n[j]\\n    elif i == \"S\":\\n        for j in range(6):\\n            dice[j] = rotate_s[j]\\n    elif i == \"E\":\\n        for j in range(6):\\n            dice[j] = rotate_e[j]\\n    else:\\n        for j in range(6):\\n            dice[j] = rotate_w[j]\\n    for k in dice:\\n        result.append(number[k-1])\\n    number = result\\n\\nprint(number[0])", "target": "401", "substitutes": {"dice": ["jce", " dce", " dine", "juce", "nince", "jiameter", "bice", " dise", "aduce", "fdiced", " duce", "dine", " dive", "gince", "jive", "bison", "jice", " dince", "adice", "duce", "sdice", "dci", "derve", "nive", "jerve", "gci", "fdise", "jize", " diameter", " dci", "gice", "jices", " dicer", "sdiameter", " diced", "jine", "bices", "nice", "diameter", " derve", "dicer", "jince", "sdize", "liced", "dce", " dison", " dices", "dedci", " dize", "adiameter", "diced", "lice", "dediamond", "dison", "jison", "dices", " diamond", "dedince", "dize", "nerve", "fdice", "lise", "dise", "diamond", "fdices", "adine", "lices", "sdicer", "giamond", "dive", "jicer", "dince", "bce", "dedice"], "number": ["note", "unit", "string", "type", "numbered", "grade", "element", "object", "reference", "figure", "page", "reason", "point", "angle", "name", "data", "value", "document", "degree", "answer", "n", "num", "double", "range", "total", "zero", "date", "version", "change", "network", "division", "span", "digit", "error", "dot", "umber", "function", "message", "size", "address", "Number", "no", "power", "position", "duration", "length", "order", "letter"], "direction": ["unit", "note", "mode", "type", "uri", "rection", "distance", "axis", "d", "slice", "angle", "name", "pair", "section", "degree", "reverse", "plane", "array", "dir", "sort", "version", "division", "index", "sequence", "dot", "orient", "route", "vector", "direct", "shape", "directory", "dimension", "irection", "duration", "air", "path", "method"], "rotate_n": ["rotating_n", "rotate_b", "rotate__e", "rotating__e", "rotize_b", "rotating__n", "rotate__h", "rotate_h", "rotate_N", "rotating__b", "rotating_h", "rotating__h", "rotating_b", "rotate__b", "rotize_n", "rotate__n", "rotize_N", "rotating_e"], "rotate_s": ["rotation_r", "rotate_r", "rotateLogs", "rotation_s", "rotate_i", "rotate_sl", "rotateLogi", "rotate_l", "rotate__s", "rotation_n", "rotation_l", "rotateLogsl", "rotize_s", "rotize_i", "rotize_n", "rotate__l", "rotateLogn", "rotize_sl", "rotate__n", "rotate__r"], "rotate_e": ["rotation_b", "rotate_y", "rotation_s", "rotate_b", "rotate_p", "rotate67e", "rotate67s", "rotate67p", "rotate67b", "rotate_es", "rotize_w", "rotize_e", "rotation_e", "rotation_p", "rotize_es", "rotize_y"], "rotate_w": ["rotrate_ws", "rotate67e", "rotate__e", "rotation_nw", "rotate_ws", "rotation_we", "rotrate_x", "rotate__w", "rotate_nw", "rotate__we", "rotate_x", "rotate67we", "rotation_w", "rotate67w", "rotate67nw", "rotate__nw", "rotation_e", "rotate_we", "rotate__x", "rotrate_e", "rotrate_w", "rotate__ws"], "i": ["ik", "pi", "di", "ji", "o", "uri", "xi", "c", "gi", "ci", "yi", "ri", "phi", "oi", "a", "ie", "ori", "cli", "int", "ind", "n", "ui", "ini", "t", "ni", "bi", "id", "iri", "ij", "ip", "eni", "si", "iu", "f", "ti", "I", "e", "b", "ai", "z", "chi", "qi", "l", "v", "ii", "ic", "li", "attr", "abi", "p", "zi"], "result": ["ner", "Result", "success", "product", "object", "void", "response", "search", "results", "output", "pair", "data", "report", "diff", "answer", "valid", "double", "list", "array", "range", "test", "sort", "inner", "date", "ret", "source", "master", "null", "table", "follow", "replace", "final", "e", "res", "match", "term", "new", "status", "dict", "json", "r", "comment", "order", "group"], "j": ["note", "el", "kj", "it", "ji", "o", "js", "jen", "x", "_", "oh", "c", "er", "d", "ie", "oj", "n", "J", "ind", "t", "jit", "y", "key", "g", "h", "ok", "job", "un", "jl", "jo", "br", "u", "ja", "f", "e", "jet", "obj", "b", "je", "jj", "adj", "q", "dj", "z", "json", "l", "jp", "aj", "v", "r", "str", "m", "fr", "p", "uj"], "k": ["o", "x", "kk", "c", "d", "nb", "ind", "n", "ck", "s", "num", "id", "y", "key", "g", "ok", "self", "ks", "index", "row", "u", "f", "e", "b", "q", "w", "K", "v", "m", "r", "p", "km"]}}
{"code": "import sys\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nin_n = lambda: int(readline())\\nin_nn = lambda: map(int, readline().split())\\nin_s = lambda: readline().rstrip().decode('utf-8')\\nin_nl = lambda: list(map(int, readline().split()))\\nin_nl2 = lambda H: [in_nl() for _ in range(H)]\\nin_map = lambda: [s == ord('.') for s in readline() if s != ord('\\n')]\\nin_map2 = lambda H: [in_map() for _ in range(H)]\\nin_all = lambda: map(int, read().split())\\n\\n\\ndef main():\\n\\n    N, K = in_nn()\\n\\n    X = []\\n    Y = []\\n    for i in range(N):\\n        x, y = in_nn()\\n        X.append(x)\\n        Y.append(y)\\n\\n    sort_x = sorted(set(X))\\n    sort_y = sorted(set(Y))\\n\\n    nx = len(sort_x)\\n    ny = len(sort_y)\\n\\n    total_sum = [[0 for _ in range(nx + 1)] for _ in range(ny + 1)]\\n\\n    for i in range(N):\\n        x, y = X[i], Y[i]\\n        ix = sort_x.index(x)\\n        iy = sort_y.index(y)\\n        total_sum[iy + 1][ix + 1] += 1\\n\\n    for y in range(ny + 1):\\n        for x in range(nx):\\n            total_sum[y][x + 1] += total_sum[y][x]\\n\\n    for x in range(nx + 1):\\n        for y in range(ny):\\n            total_sum[y + 1][x] += total_sum[y][x]\\n\\n    def calc_area(u, d, l, r):\\n        return total_sum[d][r] - total_sum[u][r] - total_sum[d][l] + total_sum[u][l]\\n\\n    ans = 10**19\\n    for y1 in range(ny + 1):\\n        for y2 in range(y1 + 2, ny + 1):\\n            for x1 in range(nx + 1):\\n                for x2 in range(x1 + 2, nx + 1):\\n                    if calc_area(y1, y2, x1, x2) >= K:\\n                        area = (sort_x[x2 - 1] - sort_x[x1]) * (sort_y[y2 - 1] - sort_y[y1])\\n                        ans = min(ans, area)\\n\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "540", "substitutes": {"read": ["file", "rest", " get", " seek", " write", "input", "open", "feed", "work", "reads", "walk", "ro", "raw", "lex", "find", "data", "start", " stream", "per", " find", "bind", "array", "config", "loop", "get", " data", "check", "g", "en", "connect", " send", "rx", " reader", "set", "write", "readable", "stream", " Read", "fill", "run", "play", " loop", "parse", "default", "reader", "reading", "Read", "load", "end", " reads", "each", "new", "scan", "link", "add", "include", "READ", "str", "text", " copy", "align"], "readline": ["getblock", "writepoint", "READblock", " readfile", "writefile", "writelines", "READlink", "readblock", " readLine", "inLine", "writelin", "unlines", "writeline", " readlink", "rawlines", "inlines", "loadLINE", "Readline", "readobject", "playlines", "writestring", "scanpoint", "unline", "rawfile", "rawle", "loadfile", " readle", "rawline", "writeblock", "getlines", " readlin", "unle", "loadpoint", "ReadLine", "scanline", "inobject", "rawlin", "readstring", "getline", "unlin", "readpoint", "loadblock", "loadstring", "playline", " readLINE", "loadlink", "writeLine", "loadline", "playstring", "inline", "readlink", "READLINE", "getLine", "READline", "readle", "readfile", "readLINE", "rawLine", "scanblock", "loadlines", "playfile", "readLine", "Readlines", "readlin", "Readobject", "scanlines", " readblock", " readobject"], "readlines": [" readfile", "writefile", "writelines", "readerfile", "createliners", "writeline", "rawlines", "ridestrings", "readerlines", "createblocks", "readerline", "readerfiles", "rideliners", "createlines", "rawblocks", "rideblocks", "rawstrings", "readblocks", "writefiles", "rawliners", "createstrings", "readfile", "readliners", "ridelines", "readfiles", "readstrings", " readfiles"], "in_n": ["in_net", "in_nm", " in_nm", " in_net"], "in_nn": ["in67nl", "in_NN", " in_NN", "in_nav", "in__syn", "in__nn", "in67nav", "isin_dn", "in_syn", "in__nl", "isin_NN", " in_nav", "in_nw", "in67nw", "isin_nd", "in_dn", "isin_nn", "in67nn", "in_nd", "in__NN", " in_syn", " in_nw"], "in_s": ["in64se", "in64s", "nin_se", "in67s", "nin_ns", "nin64ns", "nin64s", "in67se", "nin64sn", "in67ns", "in64ns", "in_ns", "in_se", "in_sn", "in67sn", "in64sn", "nin_sn", "nin64se", "nin_s"], "in_nl": ["in67all", "in67nl", " in_ln", "in_ln", "in__nn", "in__nl", "in67ln", "in__ln", "in_nb", "in67nn", "in__all", " in_nb"], "in_nl2": ["in_nn2", "in_nl3", "in_nn1", "in_nl1", "in_dl3", "in_ln2", "in_ln1", "in_dl1", "in_nn3", "in_dl2", "in_ln3"], "_": ["o", "out", "al", "j", "ac", "lex", "a", "__", "all", "an", "non", "___", "val", "ay", "un", "ip", "f", "I", "code", "q", "m", "place", "p", "ing", "block"], "in_map": [" in_none", "in_block", " in_maps", "in___address", " in_block", "in_address", "in___line", "in___maps", "in_line", "in_maps", " in_address", " in_line", "in___map", "in_none"], "s": ["ls", "o", "string", "S", "k", "ssl", "c", "search", "ws", "ses", "ins", "a", "ss", "sl", "n", "abs", "ops", "t", "space", "strings", "site", "sw", "g", "sa", "h", "ds", "gs", "lines", "si", "sets", "f", "sym", "e", "b", "ps", "ns", "sb", "w", "sid", "v", "sg", "m", "str", "words", "p"], "in_map2": ["in__mapAll", "in_blockAll", "in__list1", "in__list4", "in_mAll", "in_block2", "in__list2", "in_m1", "in__map2", "in_m2", "in_mapAll", "in__map1", "in_map1", "in_listAll", "in_list2", "in__listAll", "in__map4", "in_list4", "in_block4", "in_block1", "in_m4", "in_list1", "in_map4"], "in_all": ["inalms", "inalall", "inaln", "inalbatch", "in_ms", " in_batch", " in_ms", "in_batch"], "N": ["U", "NY", "NA", "D", "S", "R", "NS", "E", "NE", "NC", "B", "Ns", "T", "n", "W", "J", "Ni", "L", "G", "Num", "SN", "CNN", "NT", " n", "NN", "Q", "I", "C", "Na", "Ne", "V", "P", "KN", "O", "H", "M", "F", "Z"], "K": ["U", "KI", "KR", "D", "k", "S", "j", "R", "E", "B", "T", "W", "J", "A", "G", "NK", "Q", "I", "C", "V", "P", "p", "O", "M", "F", "Z"], "X": ["U", "D", "S", "ZX", "CL", "R", "E", "XX", "T", "W", "A", "L", "DX", "PH", "EL", "IP", "Content", "UX", "Ex", "Q", "Left", "WH", "WS", "I", "XY", "PE", "XL", "TX", "V", "ML", "P", "XP", "ID", "OX", "MX", "EX", "XXX", "H", "IX", "M", "F", "XM", "Right", "Z"], "Y": ["NY", "U", "YN", "SE", "MY", "D", "S", "ya", "BY", "Py", "Cy", "NS", "SY", "E", "B", "T", "W", "IA", "J", "A", "G", "AM", "RY", "AY", "IES", "EY", "IP", "YS", "YC", "ies", "ES", "AP", "Q", "I", "XY", "My", "MI", "IE", "NI", "IS", "V", "TY", "P", "OS", "YA", "H", "M", "YY", "Python", "CH", "vy", "YP", "Z"], "i": ["ik", "pi", "di", "o", "xi", "j", "c", "gi", "ci", "yi", "ri", " I", "oi", "io", "ie", "int", "ind", "n", "ui", "ini", "ni", "bi", "\u0438", "id", " j", "ij", "index", "ip", "si", "iu", "f", "I", "ti", "e", "b", "mi", "ki", "ai", "z", "qi", "v", "ii", "li", "m", "ei", "p", "ice", "zi"], "x": ["ey", "case", "k", "xp", "xi", "px", "c", "ya", "j", "ci", "cy", "xy", "yn", "oy", "lex", "any", "int", "n", "ux", "xb", "yl", "ye", "id", "tx", "test", "on", "ph", "key", "xxx", "xa", "ax", "h", "yx", "sex", "ay", "rx", "ct", "en", "index", "ox", "fx", "ex", "xc", "e", "dx", "f", "xx", "code", "wx", "q", "w", "z", "v", "ic", "pe", "xs", "p", "ice", "zi"], "y": ["ey", "o", "wy", "sy", "k", "ya", "xi", "j", "cy", "c", "yi", "yn", "oy", "xy", "ky", "ry", "yo", "n", "year", "yl", "zy", "ye", "yr", "dy", "ty", "yan", "gy", "h", "yx", "ay", "ym", "py", "ies", "iny", "yt", "f", "e", "ys", "b", "yd", "ish", "q", "yy", "w", "z", "ady", "p", "sky", "vy", "isy"], "sort_x": ["sortMemy", "sortOfx", "lowerAllz", "sortOfy", "sort_event", "sort_X", "sortOfwx", " sort_wx", "lower_xy", "sortAllx", "sortableevent", "lower_z", " sort_event", "lowerAllxy", "sortAlld", "sortAllxy", "lowerAlld", "sortabley", "sortMemx", "sortMemX", "sort_d", "lowerAllx", "sortAllz", " sort_X", "sort_z", "sortablex", "sort_wx", "sort_w", "sort_xy", "lower_d", "sortMemw", "sortOfevent", "sortablewx", " sort_w", "lower_x"], "sort_y": ["sort_h", "sortIdy", "sort_Y", " sort_h", " sort_Y", "altPary", "sort_py", "sortListn", "sortListyn", "alt_yn", "sortIddy", "sortListdy", "sortPh", "sortListy", "altParn", "altParyn", "sortPardy", "sortIdn", "altPardy", "alt_n", "sort_yn", "sortPary", "alt_dy", "sortableh", "sortParyn", "sortParn", "sortabley", "sort_dy", "sortablepy", "sortPx", "sort_n", " sort_py", "sortPpy", "sortablex", "alt_y", "sortPy", "sortIdyn"], "nx": ["unx", "uny", "Nx", " nX", "Nh", "nbh", "nxs", "unz", "nX", "nz", " nz", "nxx", "nby", " nxx", "nbxx", "unxs", "Ny", "Nxs", "ney", "nez", " nh", "nexx", "nh", "NX", "Nxx", "neX", "nex", "nbx", " nxs", "Nz"], "ny": ["NY", "ey", "sy", "oni", "j", "cy", "ng", "xy", "oy", "nb", "ky", "ry", "yo", "n", "zy", "poly", "vy", "ni", "dy", "mn", "nw", "na", "ski", "gy", "yx", "nn", "nis", "nie", "py", "ned", "nu", "lon", "yt", "si", "nit", "net", "my", "ns", "xx", "byn", "sn", "yy", "z", "ii", "nil", "ady", "sky", "ne", "yah"], "total_sum": ["totalxweight", "total33weight", "complete_mon", "totalxum", "flat54dev", "total64sum", "total67sum", "total67percent", "total\u00b7weight", "total64um", "total_mean", "total33pal", "zeroXmatch", "otal_sum", "zero_summary", "total5su", " total\n", "total\u00b7mass", "total33percent", "totalXmatch", "complete_dash", "flat_mean", "totalJdash", "totalxmiss", "flat54sum", "sum_sum", "otal_mean", "total_sign", "total5sum", "total33sum", "total___sum", "totalPmean", "flat_dev", "total\u00b7match", "zero_dim", "total_Sum", "total67weight", "total_pal", "zero_sum", "partial_mass", "otal\u00b7weight", "partial\u00b7mass", "total67match", "sum_count", "partial_dash", "total_mass", "total_percent", "total\u00b7sign", "partial\u00b7dash", "total\u00b7mon", "total\u00b7sum", "zeroXdim", "total33match", "total64weight", "flat_sum", "total64average", "totalJsum", "total\u00b7dash", "totalXsum", "total\u00b7average", "Total\n", "otal_mass", "complete_miss", "total33dim", "otal\u00b7miss", "stable67weight", "total___miss", "sum_su", "otal_weight", "stable_sum", "total64miss", "total64match", "flat54weight", "totalPdev", "totalxpercent", "stable_percent", "total5count", "stable67sum", "complete_sum", "total67pal", "totalxmass", "sum\n", "otal_match", "total_weight", "total_su", "zeroXsummary", "otal_um", "complete___mon", "total64sign", "totalXsummary", "totalJmon", "total54dev", "partial\u00b7sum", "otal_max", "zeroXsum", "total_mon", "complete___miss", "flat_weight", "otal\u00b7um", "total54mean", "stable_weight", "total___dash", "total54sum", "total33summary", "flat54mean", "total_dev", "stable_pal", "total_match", "total_um", "totalJmass", "totalXdim", "total_miss", "complete___sum", "otal\u00b7match", "otal\u00b7mass", "totalxpal", "total_average", "total\u00b7miss", "totalJmiss", "otal\u00b7average", "totalxsum", "totalJsign", "zero_match", "stable67percent", "total54weight", "total67average", "totalPsum", "partial_sign", "otal_average", "total64mass", "total_max", "total64dash", "total___mon", "total_count", "partial_sum", "total\n", "total_dim", "otal_Sum", "stable67pal", "partial\u00b7sign", "complete___dash", "total_summary", "totalPweight", "otal_miss", "total\u00b7um", "otal\u00b7sum", "total_dash"], "ix": ["ik", "ius", "xi", "j", "ci", " ii", "lex", "ie", "pixel", "ind", "fix", "nz", "zy", " xx", "id", "dy", "ski", "ax", "ick", "ox", "ies", "ip", "ex", "dx", "max", "xx", "qq", "wx", "ish", "q", "yy", "init", "z", "ii", "sky", "ice", "zi", "isy"], "iy": ["ey", "ji", "iw", "hy", "xi", "cy", "ci", "yi", "oy", "oi", "xy", "ky", "ry", "yo", "iz", "zy", "ye", "ni", "yr", "dy", "ay", "ym", "py", "iny", "si", "mi", "yd", "ish", "uy", "ai", "yy", "ity", "qi", "ii", "idy", "ih", "ei", "sky", "vy", "isy"], "u": ["U", "o", "k", "su", "c", "a", "uc", "n", "ui", "t", "g", "h", "ue", "un", "nu", "ur", "cu", "iu", "e", "f", "b", "us", "w", "z", "v", "uid", "m", "ru", "p", "up", "ud"], "d": ["di", "o", "D", "dt", "k", "c", "a", "n", "da", "t", "dy", "g", "h", "ds", "do", "dh", "dc", "ur", "e", "dx", "f", "dd", "b", "w", "z", "dn", "v", "m", "p", "ud"], "l": ["el", "o", "k", "al", "j", "c", "ar", "sl", "n", "ll", "t", "L", "g", "h", "nl", "ur", "lb", "e", "rl", "f", "b", "w", "z", "v", "lc", "m", "li", "p"], "r": ["o", "k", "rd", "j", "ul", "c", "R", "ar", "a", "n", "t", "range", "yr", "g", "ir", "h", "ra", "ur", "nr", "e", "f", "b", "q", "w", "z", "v", "m", "ru", "p", "sr"]}}
{"code": "T, X = map(int, input().split())\\nr = T/X\\nprint(r)\\n", "target": "317", "substitutes": {"T": ["U", "D", "S", "x", "R", "E", "Test", "B", "TS", "Y", "t", "L", "A", "G", "NT", "Q", "WT", "Tx", "C", "TT", "TX", "V", "P", "K", "O", "H", "M", "F", "N", "Z"], "X": ["U", "D", "S", "ZX", "x", "R", "E", "XX", "B", "W", "J", "Y", "L", "DX", "G", "Q", "I", "Tx", "C", "XL", "TX", "V", "P", "K", "ID", "EX", "MX", "XXX", "H", "M", "F", "N", "Z"], "r": ["rs", "k", "Rs", "err", " R", "x", "c", "er", "R", "ar", "d", "n", "var", "rh", "mr", "rb", "t", "range", "i", "result", "arr", "rt", "rg", "rx", "lr", "error", "radius", "nr", "u", "f", "e", "rr", "rec", "q", "z", "l", "v", "m", "p", "rc", "sr", "rate"]}}
{"code": "from collections import Counter\\n\\nN = int(input())\\nS = [input() for _ in range(N)]\\n\\ncounter = Counter(S)\\n\\nfor k in [\"AC\", \"WA\", \"TLE\", \"RE\"]:\\n    print(k, \"x\", counter[k])", "target": "531", "substitutes": {"N": ["NA", "D", " Nano", "R", "NS", " K", "B", "Ns", "T", "n", "W", " C", "Y", "A", "L", "Num", "NT", " n", "Size", " Z", "No", "Count", "I", "X", "C", "Na", "NUM", "Ne", "V", "P", "K", "O", "M", "F", "Z"], "S": ["SE", "SO", "D", "SS", "ISS", "R", "NS", "SAM", "B", "Ns", "T", "W", "Si", "SI", "s", "A", "L", "G", "SR", "SN", "Sign", "I", "X", "SU", "C", "V", "OS", "P", "O", "H", "M", "F"], "_": ["x", "__", " time", "t", "len", "p", "l"], "counter": ["ner", "step", "x", "c", "reference", "page", "current", "square", "ver", "Counter", "pattern", "inter", "const", "instance", "handler", "num", "cache", "space", "parser", "result", "inner", "entry", "writer", "parent", "server", "index", "request", "master", "number", "parse", "clock", "f", "default", "match", "outer", "store", "status", "lc", "sign", "cross", "conf", "cube", "count"], "k": ["ik", "o", " sk", "kn", " ki", "element", "ke", "x", "kk", "j", " d", "c", " p", "name", " K", " kn", "n", "ck", "kick", "t", "i", "id", "y", " ke", "key", "sk", "unk", "ok", " r", "kid", "ks", " f", " ka", " e", "kin", "u", "e", " o", "f", "ask", "q", "tk", "kw", "z", "K", "p", " q", "v", "r", "kr", " work"]}}
{"code": "l, r, d = map(int, input().split())\\nans = r//d - l//d\\nif l%d == 0 and r%d == 0:\\n    ans += 1\\nprint(ans)", "target": "156", "substitutes": {"l": ["el", "ls", "o", "k", "ol", " L", "x", "al", "j", "c", "old", "ell", "sl", "n", "ll", "s", "range", "L", "t", "i", "y", "g", "h", "nl", "il", "u", "len", "rl", "f", "e", "b", "dl", "w", "z", "lc", "v", "m", "lit", "ln", "p"], "r": ["rs", "o", "k", "rd", "x", "j", "c", "er", "R", "ar", "rad", "a", "n", "s", "rh", "t", "rb", "range", "i", "g", "ir", "h", "nr", "u", "e", "f", "rl", "end", "b", "ad", "q", "w", "z", "v", "m", "right", "p", "sr"], "d": ["D", "dt", "rd", "x", "j", "c", "ded", "start", "du", "diff", "nd", "ind", "n", "direction", "da", "s", "t", "dir", "i", "id", "y", "sd", "dy", "g", "fd", "dim", "h", "ds", "do", "md", "day", "dc", "u", "f", "e", "dd", "end", "ad", "b", "dx", "xd", "w", "z", "dn", "v", "cd", "m", "p", "ld"], "ans": ["aves", "rs", "ls", "offs", "nas", "ins", "reads", "ars", "ants", "amps", "args", "an", "s", "anc", " means", "ats", "asts", "cs", "ams", "sk", "cases", "na", "os", "anas", "ds", "ks", "ana", "span", "can", "anes", "lines", "cons", "AN", "cas", "aned", "leans", "ania", "ANS", "anne", "dd", "ann", "lan", "ns", "ands", "ushes", "aces", "ays", "mean", "aus", "ons"]}}
{"code": "\\n\\nimport sys\\nfrom collections import deque, defaultdict\\nimport copy\\nimport bisect\\n#sys.setrecursionlimit(10 ** 9)\\nimport math\\nimport heapq\\nfrom itertools import combinations, permutations\\n\\nimport sys\\ndef input():\\n\treturn sys.stdin.readline().strip()\\n\\n\\nN, M = list(map(int, input().split()))\\n\\ngraph = [[] for _ in range(3*N)]\\n\\nfor i in range(M):\\n\tu, v = list(map(int, input().split()))\\n\tu -= 1\\n\tv -= 1\\n\tgraph[u%(3*N)].append((v + N)%(3*N))\\n\tgraph[(u + N) % (3 * N)].append((v+2*N)%(3*N))\\n\tgraph[(u + 2*N) % (3 * N)].append(v % (3 * N))\\nS, T = list(map(int, input().split()))\\nS -= 1\\nT -= 1\\n\\ndist = [1000000000000000000 for _ in range(3*N)]\\nque = deque([])\\nque.append(S)\\ndist[S] = 0\\nwhile len(que) > 0:\\n\tnode = que.popleft()\\n\tfor edge in graph[node]:\\n\t\tif dist[edge] > dist[node] + 1:\\n\t\t\tdist[edge] = dist[node] + 1\\n\t\t\tque.append(edge)\\n\\nif dist[T] < 100000000000000:\\n\tprint(dist[T]//3)\\nelse:\\n\tprint(-1)", "target": "795", "substitutes": {}}
{"code": "N, A, B = map(int, input().split())\\nS = str(input())\\n\\nAB = A + B\\n\\ncount_all = 0\\ncount_abroad = 0\\nfor i in range(N):\\n    if S[i] == \"a\" and count_all < AB:\\n        count_all += 1\\n        print(\"Yes\")\\n\\n    elif S[i] == \"b\" and count_abroad < B and count_all <AB:\\n        count_all += 1\\n        count_abroad += 1\\n        print(\"Yes\")\\n\\n    else:\\n        print(\"No\")", "target": "724", "substitutes": {"N": ["U", "NA", "D", "R", "NS", "E", "NE", "BB", "T", "n", "J", "Y", "L", "G", "Num", "SN", "NB", "NM", "Size", "Q", "AN", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["AR", "U", "NA", "D", "a", "CA", "BB", "Y", "AD", "AM", "G", "Ab", "AI", "SA", "An", "EA", "AP", "Ar", "AN", "I", "AA", "X", "C", "P", "K", "AH", "AC", "AW", "M", "AAA", "LA"], "B": ["D", "BM", "BF", "R", "IB", "E", "BB", "T", "W", "BE", "Y", "L", "G", "NB", "Ab", "BA", "OB", "BI", "Q", "Bs", "DB", "WB", "I", "b", "X", "C", "SB", "V", "P", "K", "BC", "O", "M", "F", "Z"], "S": ["SE", "U", "SH", "GS", "oS", "BS", "SS", "R", "NS", "SK", "RS", "APS", "Ns", "T", "TS", "Si", "SI", "s", "Y", "IDS", "G", "L", "SR", " s", "SN", "AS", "States", "SL", "INS", "SA", "Services", "SC", "Sign", "I", "CS", "SU", "SB", "C", "V", "Sl", "P", "SM", "H", "M", "F", "Set"], "AB": ["AR", "ACC", "APP", "EB", "Tab", "LAB", "BM", "IB", "AAF", "ab", "BB", "UB", "AD", "AM", "AL", "Ab", "NB", "BA", "PB", "OP", "AK", "TA", "OB", "BI", "AP", "GB", "QB", "DB", "AV", "ABC", "AA", "FB", "AST", "SB", "FF", "AF", "AH", "BC", "BP", "CP", "AC"], "count_all": [" count_total", "countingalls", "countingonly", "count_alls", "base__alls", "count67alls", "base__part", "base__All", "Count_alls", " count_alt", "count_part", "countingtotal", "count__all", "count__All", "base_part", "Count_ALL", "Count_all", " count_alls", "count__part", "countingall", "count67all", "count_All", "base_All", "short_alls", "short_total", "shortjboth", "countingALL", "countingalt", "base__all", "countjalls", "count_total", "shortjall", "count67All", "count_ALL", "countjboth", "countjall", " count_only", "shortjalls", "base_alls", "count_both", "base_all", " count_ALL", "shortjtotal", "short_both", "count67part", "countjtotal", "count_only", "countingboth", "count_alt", "short_all", "count__alls"], "count_abroad": ["count_absund", "count_absro", "count_abide", "count_overroad", "count_amide", "count_aball", "count_abrah", "count_abside", "count_overund", "count_obund", "count_abund", "count_overro", "count_obrave", "count_amro", "count_absall", "count_obide", "count_ebund", "count_overready", "count_ebrave", "count_amroad", "count_ebrah", "count_abready", "count_absrah", "count_obroad", "count_oball", "count_ebro", "count_absready", "count_abrave", "count_ebroad", "count_eball", "count_obro", "count_absroad", "count_obrah", "count_amund", "count_ebready", "count_abro", "count_absrave"], "i": ["ik", "pi", "di", "ji", "uri", "k", "xi", "j", "c", "gi", "ci", "d", "yi", " I", "ie", "start", "ind", "n", "s", "ini", "ui", "bi", "id", "y", "uni", "h", "ib", "ix", "index", "ip", "eni", "si", "u", "iu", "fi", "e", "ti", "I", "f", "mi", "q", "ai", "z", "p", "qi", "l", "v", "ii", "li", "ih", "io"]}}
{"code": "import sys\\ninput = lambda : sys.stdin.readline().rstrip()\\nsys.setrecursionlimit(max(1000, 10**9))\\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\\n\\n\\nh,w,d = list(map(int, input().split()))\\na = [None]*h\\nn = h*w\\ndd = [None]*(n)\\nfor i in range(h):\\n    a[i] = list(map(int, input().split()))\\n    for j,num in enumerate(a[i]):\\n        dd[num-1] = (i,j)\\nvals = [[] for _ in range(d)]\\nfor i in range(d):\\n    l = []\\n    prev = i\\n    s = 0\\n    for j in range(i, n, d):\\n        v = abs(dd[j][0]-dd[prev][0]) + abs(dd[j][1]-dd[prev][1])\\n        s += v\\n        l.append(s)\\n        prev = j\\n    vals[i] = l\\nq = int(input())\\nans = [None]*q\\nfor i in range(q):\\n    ll,rr = map(lambda x: int(x)-1, input().split())\\n    ans[i] = vals[rr%d][rr//d] - vals[ll%d][ll//d]\\nwrite(\"\\n\".join(map(str, ans)))", "target": "254", "substitutes": {"input": ["element", " command", "out", "feed", "current", "param", "argument", "raw", "output", "cmd", "session", " Input", "format", "expression", "upload", "submit", "int", "util", " ins", " output", "print", "view", "pull", " int", "array", "config", "enter", " rc", " data", "image", "command", "parent", "version", "sample", "query", "request", "source", "index", "bin", "error", "table", "model", "hidden", " inputs", "run", "read", "help", "reader", "insert", "select", "load", "qq", "buffer", "inf", "filter", "form", "template", "accept", "wait", "text", "php", "Input", "comment", "exec", "temp", "call"], "write": ["log", "exit", "Write", "flush", "sync", "writing", "open", "after", "append", "create", "output", "copy", "edit", "print", "println", "written", "apply", "update", "put", "push", "check", "writer", "writ", "connect", "network", "line", "set", "export", "next", "handle", "fill", "run", "send", "read", "process", "pipe", "end", "insert", "load", "lock", "store", "save", "add", "wait", "dump", "exec", "call"], "h": ["o", "k", "x", "c", "ht", "rh", "hp", "t", "ch", "id", "y", "ph", "time", "g", "th", "u", "f", "e", "max", "hr", "b", "end", "gh", "sh", "z", "uh", "hm", "r", "m", "H", "he", "p", "hs"], "w": ["k", "x", "c", "ws", "wa", "W", "ww", "t", "weight", "wd", "y", "width", "sw", "g", "we", "rw", "u", "f", "max", "e", "b", "ad", "z", "m", "r", "wh", "p"], "d": ["di", "o", "dom", "D", "dt", "k", "x", "od", "c", "ded", "done", "de", "nd", "da", "t", "id", "y", "sd", "dy", "g", "dim", "ds", "dh", "do", "dB", "md", "dc", "u", "e", "f", "ed", "b", "dx", "ad", "dl", "z", "dn", "cd", "m", "r", "did", "p", "ld", "defined"], "a": ["ma", "x", "aw", "ac", "wa", "da", "an", "array", "A", "alpha", "sa", "ana", "ia", "aa", "la", "va", "b", "am", "ad", "ga", "ai", "ae", "aaa", "ba", "ada", "aj", "ao", "ea", "p", "au"], "n": ["o", "k", "x", "c", "nb", "all", "t", "y", "na", "g", "en", "nan", "u", "f", "e", "nt", "b", "ns", "no", "z", "m", "r", "nc", "p", "N"], "dd": ["df", "di", "dt", "x", "od", "db", "ded", "de", "old", "pd", "data", "dev", "dds", "du", "nd", "bd", "da", "ck", "mmm", "td", "wd", "sd", "gd", "id", "DD", "xxx", "hd", "ds", "xxxx", "do", "edd", "md", "nn", "dc", "idd", "odd", "dp", "anda", "pp", "xd", "ad", "xx", "mm", "vd", "dl", "yy", "sh", "dm", "add", "cd", "und", "bb", "dist", "now", "dat", "ld", "ud"], "i": ["ik", "pi", "di", "o", "ji", "it", "k", "x", "xi", "idi", "c", "gi", "ci", "yi", "ri", "ie", "start", "int", "ind", "ui", "ini", "t", "list", "ni", "id", "y", "iq", "on", "g", "ix", "index", "ip", "si", "u", "iu", "f", "I", "e", "ti", "b", "ai", "z", "p", "qi", "ii", "li", "r", "m", "ih", "io"], "j": ["ik", "el", "ji", "o", "js", "k", "x", "c", "jc", "ie", "start", "J", "y", "g", "ion", "ij", "bj", "jl", "ip", "next", "jo", "u", "ja", "f", "e", "obj", "b", "jj", "new", "dj", "z", "jp", "aj", "r", "li", "ii", "m", "fr", "p"], "num": ["ul", "um", "ng", "nm", "nb", "sum", "name", "dec", "ind", "inc", "anc", "ni", "id", "Num", "mn", "uni", "na", "min", "con", "dim", "en", "iter", "index", "number", "nu", "umi", "norm", "nr", "u", "len", "f", "max", "end", "b", "no", "m", "gen", "nam", "ne"], "vals": ["el", "rs", "ls", "fs", "ol", "results", "runs", "ins", "olds", "data", "rots", "als", "vv", "vs", "pos", "flags", "models", "all", "abs", "rules", "ints", "levels", "points", "arr", "els", "bs", "na", "val", "breaks", "ds", "lists", "Val", "lv", "les", "gs", "ols", "lines", "la", "items", "alls", "eval", "res", "ps", "ns", "values", "es", "ves", "li", "xs", "eps", "series", "vi", "ples"], "_": ["k", "x", "all", "g", "val", "ip", "f", "I", "m", "p"], "l": ["el", "lp", "ls", "o", "ol", "le", "wl", "c", "kl", "fl", "list", "t", "L", "g", "lv", "lr", "nl", "il", "u", "los", "lb", "f", "rl", "b", "dl", "z", "lc", "r", "li", "lu", "ln", "p", "ld"], "prev": ["history", "vec", "o", "par", "k", "first", "x", "nav", "c", "current", "best", "old", "dev", "var", "syn", "ch", "root", "id", "cmp", "y", "div", "original", "pres", "iter", "post", "next", "ip", "last", "iv", "rel", "u", "pre", "pp", "e", "f", "adj", "rev", "before", "sup", "rec", "Prev", "vious", "no", "jp", "orig", "skip", "r", "p"], "s": ["ls", "fs", "o", "js", "S", "c", "ws", "vs", "sl", "qs", "strings", "y", "sd", "g", "ds", "lines", "sf", "sq", "si", "u", "f", "e", "b", "ps", "ns", "ments", "es", "sb", "sv", "z", "sg", "m", "xs", "r", "p"], "v": ["o", "k", "ve", "x", "uv", "c", "value", "vv", "vs", "vp", "y", "g", "val", "tv", "lv", "u", "f", "e", "b", "rev", "V", "sv", "z", "vol", "nv", "m", "r", "p", "vi"], "q": ["o", "k", "qt", "x", "c", "ck", "qs", "quant", "depth", "ues", "ch", "t", "cl", "range", "id", "iq", "ql", "y", "requ", "g", "qa", "query", "ix", "Q", "sq", "eq", "u", "pp", "f", "max", "ad", "b", "qq", "z", "qi", "r", "m", "p", "qu", "dq", "count"], "ans": ["rs", "ls", "Ann", "ras", "nas", "ations", "ars", "ants", "als", "vs", "ens", "qs", "an", "ads", " means", "cs", "oss", "ents", "anon", "ams", "sk", "os", "ds", "ms", "ks", "nn", "An", "les", "can", "alls", "AN", "aned", "ANS", "lan", "ys", "ann", "ns", "ions", "ani", "ays", "xs", "p", "ons"], "ll": ["el", "ls", "hl", "k", "ol", "err", "x", "wl", "col", "kl", "sol", "fl", "ell", "all", "bn", "oll", "vel", "bl", "dr", "nn", "lr", "nl", "ml", "lv", "alls", "rl", "rn", "llo", "xx", "LL", "dl", "z", "p", "fr", "r", "ill", "ln", "ld", "cl"], "rr": ["rs", "hl", "vr", "rd", "err", "wr", "er", "ar", "RR", "rm", "vv", "ell", "ck", "rh", "mr", "rb", "rer", "rf", "arr", "yr", "rt", "rg", "ir", "rar", "rx", "dr", "nn", "pr", "nr", "br", "pp", "rl", "rn", "der", "gr", "r", "ru", "rc", "sr"]}}
{"code": "N,x=map(int,input().split())\\nA=list(map(int,input().split()))\\nA.sort()\\n\\nK=0\\nfor i in range(N-1):\\n    if x>=A[i]:\\n        x-=A[i]\\n        K+=1\\n\\nif x==A[-1]:\\n    K+=1\\n\\nprint(K)\\n", "target": "100", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "E", "NE", "NC", "B", "Ns", "T", "n", "Sn", "NH", "J", "Y", "L", "G", "Wh", " n", "Size", "No", "Q", "I", "X", "C", "Ne", "V", "P", "O", "H", "M", "F", "Z"], "x": ["k", "xp", "xi", "px", "j", "c", "d", "xy", "XX", "a", "int", "n", "Y", "t", "y", " X", "tx", "alpha", "xxx", "xa", "na", "ax", "xt", "xe", "h", "rx", "ix", "index", "fx", "ex", "xc", "u", "e", "f", "Tx", "dx", "I", "X", "xx", "C", "xf", "xes", "wx", "w", "P", "z", "v", "ic", "xs", "p", "Z"], "A": ["As", "U", "NA", "D", "S", "Any", "New", "au", "Args", "E", "Alpha", "a", "B", "CA", "All", "T", "PA", "W", "mA", "At", "Array", "Y", "G", "L", "Am", "Ab", "Next", "An", "AP", "Average", "Ar", "Wa", "Ha", "I", "AA", "X", "App", "C", "MA", "P", "API", "Input", "M", "AC", "F", "LA"], "K": ["U", "KR", "D", "Ku", "k", "S", "Max", "SK", "E", "KO", "Break", "Ak", "Flow", "B", "Function", "T", "Ka", "J", "Y", "G", "L", "Power", "Zero", "KK", "HK", "Index", "Kick", "Check", "AK", "Mask", "Q", "Work", "PK", "Delta", "Count", "I", "X", "C", " k", "V", "P", "ID", "Context", "Sk", "Key", "KS", "O", "H", "M", "KB", "F", "Z"], "i": ["pi", "di", "o", "k", "xi", "j", "c", "gi", "ci", "yi", "ri", "a", "ie", "start", "int", "ind", "n", "ui", "bi", "id", "y", "h", "ix", "index", "si", "u", "iu", "e", "I", "ti", "f", "b", "ai", "z", "p", "qi", "v", "l", "ii", "li", "ei", "m", "io"]}}
{"code": "def solve(n, m, c):\\n    dp = [0] + [float(\"inf\")] * n\\n    for i in range(1, n + 1):\\n        added_val = float(\"inf\")\\n        for coin in c:\\n            added_val = min(added_val, dp[i - coin]) if 0 <= i - coin else added_val\\n        dp[i] = min(dp[i], added_val + 1)\\n    print(dp[n])\\n\\nif __name__ == \"__main__\":\\n    n, m = map(int, input().split())\\n    c = list(map(int, input().split()))\\n    solve(n, m, c)\\n", "target": "286", "substitutes": {"n": ["o", "cn", "k", "x", "j", "np", "d", "nm", "nb", "num", "s", "t", "ni", "y", "min", "g", "en", "h", "network", "nan", "nn", "un", "nu", "number", "nr", "u", "net", "f", "e", "nt", "fn", "b", "ns", "pn", "C", "sn", "no", "w", "z", "dn", "l", "v", "r", "nc", "ln", "p", "ne", "N"], "m": ["o", "mc", "k", "x", "d", "s", "num", "t", "y", "mon", "mn", "machine", "g", "min", "h", "ms", "ym", "md", "month", "cm", "u", "e", "f", "b", "mm", "z", "dm", "v", "l", "mean", "r", "M", "p", "km"], "c": ["o", "mc", "cn", "k", "cy", "ci", "d", "cycle", "col", "ac", "uc", "fc", "cc", "s", "ce", "cs", "con", "cp", "ct", "cin", "cm", "dc", "cu", "xc", "u", "f", "e", "b", "unc", "C", "z", "cr", "v", "l", "lc", "pc", "cd", "nc", "cf", "p", "count"], "dp": ["wp", "lp", "df", "tp", "pi", "dt", "di", "dos", "pb", "pg", "dq", "db", "sp", "np", "d", "phi", "nb", "pd", "pair", " ip", "hp", " hp", "DP", "pkg", " cp", "cmp", "api", "password", "dim", "ds", "do", "cp", "dr", "cm", "dc", "ip", "rep", "projects", "pp", "dep", "dd", "address", "ps", "DC", "dl", "pm", " tcp", "dm", "ep", "P", "params", "grad", "bb", "deb", "dump", "dat", "p", "gp", "fp"], "i": ["pi", "o", "k", "x", "xi", "j", "gi", "ci", "d", "oi", " I", "a", "io", "ind", "ini", "ui", "t", "ni", "bi", "id", "y", "pri", "index", "ip", "eni", "si", "u", "iu", "fi", "f", "ti", "e", "I", "b", "mi", "qq", "ai", "z", "chi", "qi", "v", "ii", "ei", "li", "p"], "added_val": [" added_value", "added2val", " added2var", "ratedFval", "added_var", "added2var", "ended_val", " added2Val", "added2eval", "addedfpos", "addedxeval", "rated_pos", "addedvalval", " added_eval", "added_vel", "addedfweight", "addedFvel", "ended_Val", "addedfval", " added_var", "added2Val", " added_vals", "addedFpos", "addedxval", "addedFval", "ratedFweight", "rated_val", "added_value", "rated_vel", "addedFvar", " added2val", "addedfvel", "addedFweight", "addedvalvalue", "added_ind", "ended_value", "addedvalvel", "addedxvar", "added_pos", "addedxind", " added_vel", "ratedFvel", "added_Val", "added_vals", "addedFvalue", "ended_ind", " added2eval", "rated_weight", "added_weight", " added_Val", "addedxvalue", "addedvalvar", "ratedFpos", "addedxVal", "added_eval"], "coin": ["mini", "core", " v", "mc", "confirmed", "x", "ci", "d", "cycle", " p", "Coin", "int", "bitcoin", "ind", "vin", "year", "num", "margin", "config", " coins", "circ", "mon", "cost", "g", "con", "abc", "network", "co", "nan", "cin", "win", "cm", "ip", "bin", "inn", "len", "clock", "coins", "e", "rn", "fi", "qq", "inf", "fen", "fund", "init", "qi", "chain", "v", "fee", "spin", "oc", "cf", "p", "nc", "money"]}}
{"code": "N, L = map(int, input().split())\\ns = [str(input()) for i in range(N)]\\ns.sort()\\nS=\"\"\\nfor i in range(N):\\n    S+=s[i]\\nprint(S)", "target": "732", "substitutes": {"N": ["U", "NA", "D", "R", "NS", "E", "NL", "B", "Ns", "T", "n", "W", "J", "Y", "A", "G", "Len", "Num", "NT", " n", "Size", "No", "Q", "Length", "I", "X", "C", "Ne", "V", "OS", "P", "K", "O", "H", "M", "F", "Z"], "L": ["U", "CL", "LU", "left", "NL", "B", "Lo", "T", "W", "J", "LI", "SL", "Length", "Li", "I", "dL", "X", "C", "Lu", "V", "P", "K", "l", "O", "M", "ln", "F", "Z"], "s": ["states", "services", "string", "ls", "parts", "o", "input", "c", "d", "ins", "ses", "a", "n", "args", "qs", "strings", "String", "g", "os", "blocks", "cells", "sample", "ips", "ids", "lines", "sites", "items", "si", "u", "letters", "sets", "f", "e", "I", "sym", "ps", "ns", "values", "es", "features", "w", "P", "params", "l", "words", "p", "ples"], "i": ["pi", "o", "k", "x", "xi", "j", "d", "slice", "ri", "oi", "a", "io", "start", "pos", "int", "ind", "n", "J", "ui", "ni", "id", "key", "val", "h", "index", "ip", "jo", "si", "iu", "e", "I", "ti", "f", "b", "ai", "IJ", "z", "qi", "l", "v", "ii", "li", "m", "ih", "p", "block", "zi"], "S": ["U", "SE", "D", "GS", "BS", "SS", "R", "Sample", "E", "NS", "JS", "B", "Ns", "T", "Si", "A", "G", "SR", "DS", "Q", "Str", "I", "X", "SU", "C", "SB", "Output", "V", "Sl", "P", "Sort", "K", "O", "Input", "M", "H", "F", "Z"]}}
{"code": "H, W = map(int, input().split())\\nC = [list(map(int, input().split())) for _ in range(10)]\\n\\nA = []\\nfor _ in range(H):\\n    A += list(map(int, input().split()))\\n\\nfor i in range(10):\\n    for j in range(10):\\n        for k in range(10):\\n            C[j][k] = min(C[j][k], C[j][i]+C[i][k])\\n\\nfrom collections import Counter\\nCo = Counter(A)\\nans = 0\\nfor a, c in Co.most_common():\\n    if a==-1 or a==1:\\n        continue\\n    ans += C[a][1]*c\\nprint(ans)", "target": "284", "substitutes": {"H": ["U", "SH", " h", "D", "S", "HC", "R", "E", "B", "T", "NH", "HH", "J", "Y", "L", "G", "EH", "h", "Q", "WH", "I", "X", "HI", "V", "P", "K", "M", "DH", "F", "CH", "N", "Z"], "W": ["U", "TW", "D", "R", "E", "Weight", "B", "T", "J", "Y", "G", "Wh", "NW", " w", "Q", "I", "CW", "V", "w", "We", "P", "K", "v", "M", "F", "N", "Z"], "C": ["CO", "U", "CI", "D", "S", "Control", "R", "E", "NC", "B", "T", "Y", "L", "G", "CU", "Col", "Cl", "UC", "Con", "Count", "I", "X", "Sc", "V", "Cache", "P", "CC", "K", "Cs", "EC", "Code", "VC", "O", "Ch", "M", "Cu", "F", "CM", "N", "CL"], "_": ["x", " un", " p", " length", " time", "n", "g", " n", " x", "un", " w", "f", " num", " code"], "A": ["As", "Ac", "U", "NA", "ACC", "Ca", "D", "S", "Alpha", "ac", "B", "CA", "T", "mA", "Array", "G", "L", "Am", "alpha", "AU", "An", "AP", "Average", "Ar", "AA", "And", "Na", "ai", "V", "P", "API", "AF", "K", "M", "AC", "F", "N", "LA"], "i": ["ik", "pi", "it", "ji", "o", "x", "xi", "d", "int", "ind", "n", "y", "g", "h", "ij", "index", "si", "u", "iu", "f", "I", "e", "b", "ki", "q", "ai", "w", "z", "v", "l", "ii", "li", "m", "p"], "j": ["ik", "it", "o", "ji", "x", "d", "jc", "ie", "n", "J", "ch", "id", "y", "key", "g", "h", "ij", "index", "jl", "jo", "u", "ja", "e", "f", "b", "jj", "q", "ai", "w", "z", "v", "l", "jp", "ii", "m", "aj", "p", "uj"], "k": ["ik", "it", "o", "ke", "x", "kk", "d", "ak", "ky", "n", "ek", "id", "y", "key", "sk", "g", "unk", "h", "ok", "ks", "uk", "ko", "u", "f", "e", "b", "ki", "q", "w", "z", "K", "v", "m", "p"], "Co": ["CO", " co", "CI", "Do", " CO", "Lin", "NC", "Cons", "Hi", "Lo", "Cos", " Con", "aco", "Cod", "Loc", "Col", "Cl", "Circ", "Coll", "co", "Con", "Cal", "Comb", " Do", "Tx", "Li", "FC", "Cross", "CC", " Cross", "Cs", "Collection", " Sco", "Mo", "Ho", "Conn", "O", "Cu", "AC", "Vo", "Mc", "Ko"], "ans": ["aves", "cycles", "ass", "aning", "nas", "ras", "ins", "ases", "ars", "ants", "aid", "amps", "an", "anc", "s", "actions", "ads", "anny", "cs", "ents", "AS", "annot", "anas", "gan", "ks", "co", "An", "can", "anes", "AN", "aned", "ania", "leans", "ANS", "ann", "lan", "ns", "ca", "ane", "ands", "ai", "aces", "ae", "ays", "annels", "acs", "aus"], "a": ["ma", "area", "anta", "x", "acha", "aw", "ar", "ama", "ac", "wa", "ab", "aux", "af", "pa", "n", "da", "all", "an", "fa", "y", "alpha", "qa", "sa", "ah", "anza", "ana", "ia", "aa", "la", "ach", "u", "va", "am", "ad", "ca", "b", "sha", "ai", "ae", "asha", "asa", "ba", "aaa", "ea", "aj", "p", "au"], "c": ["cur", "mc", "ci", "ar", "cb", "col", "ac", "uc", "bc", "fc", "n", "cc", "anc", "cache", "cs", "y", "h", "co", "ct", "dc", "cu", "f", "e", "toc", "ca", "arc", "w", "lc", "l", "ic", "pc", "v", "oc", "nc", "p", "cf", "rc", "enc"]}}
{"code": "from operator import mul\\nfrom functools import reduce\\n\\ndef nCr(n, r):\\n    r = min(r, n-r)\\n    if r == 0:\\n        return 1\\n    over = reduce(mul, range(n, n-r, -1), 1)\\n    under = reduce(mul, range(1, r+1), 1)\\n    return over // under\\n\\nA = input()\\nstrs = set(list(A))\\n\\nans = len(A) * (len(A)-1) // 2\\nfor s in strs:\\n    num = A.count(s)\\n\\n    if num >= 2:\\n        ans -= nCr(num, 2)\\n\\nprint(ans+1)", "target": "351", "substitutes": {"n": ["k", "x", "c", "R", "d", "nb", "a", "an", "t", "min", "en", "h", "nn", "un", "nu", "nr", "u", "net", "nt", "rn", "f", "max", "b", "ns", "w", "l", "v", "m", "nc", "ln", "p", "ne", "sr", "N"], "r": ["rs", "rd", "k", "err", "x", " R", "c", "R", "d", "ar", "re", "rh", "mr", "range", "rb", "rf", "i", "rc", "rt", "min", "rg", "ir", "h", "dr", "pr", "row", "nr", "u", "ur", "br", "e", "rn", "rr", "f", "b", "hr", "q", "w", "nor", "cr", "l", "v", "m", "right", "ru", "fr", "p", "sr"], "over": ["ever", " Over", "cover", "our", "after", "between", "above", "ore", "ver", "pair", "Over", "OVER", "super", " cover", "Under", "re", "ride", "hard", "fore", " OVER", "hover", "error", "ror", "number", "overs", "replace", "uper", "upper", "arrow", "layer", "air", "order", "group", "user", "reach"], "under": ["df", "ever", "rew", "our", "after", "between", "below", "above", "ore", "pair", "OVER", "Over", "Under", "subject", "range", "domain", "result", "hard", "aus", "fore", "un", "union", "lower", "are", "ror", "function", "replace", "normal", "ann", "group", "before", "new", "ahead", "behind", "arrow", "layer", "air", "und", "dist", "now", "unders", " Under"], "A": ["AR", "As", "U", "NA", "D", "S", "au", "R", "E", "Alpha", "a", "B", "CA", "All", "T", "W", "mA", "Array", "Y", "array", "L", "alpha", "AS", "sa", "SA", "ADS", "AU", "An", "TA", " a", "AP", "Ar", "AN", "I", "AA", "X", "The", "C", "AST", "MA", "V", "P", "API", "AF", "Parts", "O", "H", "M", "AC", "F", "Input", "N", "LA"], "strs": ["stringls", " strS", "strd", "STRes", "charS", "strings", "STRd", " stres", "charls", "strions", "strls", " strls", "strS", "STRs", "Strs", "Strd", "stringS", "Strions", " strd", "STRions", "chars", " strions", "Stres", "stres"], "ans": ["offs", "ls", "nas", "ras", "ins", "a", "vers", "ars", "pos", "amps", "args", "photos", "an", "anc", "ops", "ni", "ats", "anon", "annot", "na", "os", "con", "urs", "anas", "ds", "ids", "nan", "nn", "span", "An", "ana", "can", "cons", "AN", "atan", "aned", "len", "ANS", "ann", "lan", "ns", "ums", "sn", "no", "ai", "ani", "mean", "aus", "ons", "rank", "au"], "s": ["ls", "string", "o", "parts", "S", "su", "c", "d", "ses", "sub", "a", "ss", "pos", "an", "strings", "i", "os", "sa", "g", "sections", "rows", "span", " S", "si", "u", "sets", "spec", "f", "b", "us", "ns", "sb", "l", "sg", "p"], "num": ["part", "ul", "um", "np", "nb", "sum", "a", "mult", "bc", "pos", "int", "an", "anc", "non", "ni", "Num", "mn", "uni", "na", "con", "dim", "en", "unk", "nn", "span", "un", "index", "number", "nu", "cons", "umi", "norm", "nr", "len", "net", "max", "ann", "us", "ns", "none", "sn", "NUM", "no", "ai", "nat", "sam", "nc", "rank"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nMOD = 10 ** 9 + 7\\nINF = float('INF')\\nsys.setrecursionlimit(10 ** 5)\\n\\n\\ndef main():\\n    S = input()\\n\\n    if len(S) == 3:\\n        print(S[::-1])\\n    else:\\n        print(S)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "528", "substitutes": {"readline": [" readfile", "readername", "Readname", " readLine", "inputline", "Readfile", " readlevel", " readname", "readerline", "Readline", "readerlevel", "readlevel", "ReadLine", "inputname", "loadname", "loadlevel", "loadline", "inputfile", "readerLine", "readfile", "loadLine", "readLine", "readname", "inputLine"], "MOD": [" STR", " FT", " EXP", " fix", " R", " const", "mod", " mods", " log", " module", " C", " error", " X", " INT", " EXT", "SIZE", " mod", "MAX", " Z", " fs", " FD", " M", " Mod", " magic", " D", " P", " MAX"], "INF": [" INFF", "INFF", "inFD", "inFF", "ANF", "INFD", "ANFF", " INFD", "ANFD", "inF"], "S": ["U", "SE", "SH", "SO", "D", "PART", "input", "SS", "R", "E", "SK", "SY", "SAM", "RS", "B", "T", "Si", "SI", "s", "Source", "A", "L", "G", "SR", "SN", "SL", "DS", "ST", "SA", "SER", "Q", "SC", "Socket", "SU", "C", "IS", "V", "Sl", "P", "SM", "SEC", "SP", "O", "M", "F", "N"]}}
{"code": "a=int(input());print(\"A\"+chr(66+(a>1199)*16-(a>2799)*11)+\"C\")", "target": "738", "substitutes": {"a": ["ma", "area", "x", "c", "aw", "aaaa", "data", "aux", "af", "n", "da", "ata", "an", "valid", "A", "fa", "cca", "i", "result", "y", "alpha", "na", "qa", "sa", "div", "abc", "ana", "ia", "za", "aa", "la", "va", "f", "e", "b", "code", "ca", "sup", "sha", "ga", "asa", "ada", "aj", "m", "p", "au"]}}
{"code": "S = input()\\nw_position_list = []\\nfor i, s in enumerate(S):\\n    if s == 'W':\\n        w_position_list.append(i)\\nn_w = len(w_position_list)\\nres = sum(w_position_list) - (n_w *(n_w-1)/2)\\nprint(int(res))", "target": "587", "substitutes": {"S": ["SE", "U", "SH", "SS", "R", "Sample", "B", "T", "W", "Si", "SI", "A", "L", "G", "SN", "SL", "Q", "SC", "I", "SU", "SB", "C", "SF", "V", "Sl", "P", "SM", "SP", "H", "M", "Input", "F", "N"], "w_position_list": ["w_position_cl", "w_pos_list", "w_weightinglist", "w_weight_stack", "w_position_set", "w_positionslist", "w_pos_type", "w_positionsstack", "w_weightinglisted", "w_motion_set", "w_weight_listed", "w_motion_List", "w_motion_l", "w_position_type", "w_position_listed", "w_pos_l", "w_positioningstack", "w_pos_cl", "w_positionslisted", "w_position_List", "w_weightingstack", "w_position_l", "w_positioninglist", "w_positioninglisted", "w_position_stack", "w_weight_list", "w_motion_list"], "i": ["pi", "o", "k", "x", "xi", "j", "ci", "d", "a", "data", "ie", "start", "pos", "int", "ind", "n", "id", "y", "uni", "index", "si", "u", "iu", "f", "I", "e", "ti", "w", "z", "chi", "v", "l", "ii", "li", "m", "p", "zi"], "s": ["ls", "string", "o", "su", "c", "sp", "d", "ses", "name", "a", "ss", "sl", "abs", "sie", "ops", "space", "t", "strings", "y", "sw", "sf", "sq", "si", "sets", "sym", "settings", "ps", "ns", "sm", "es", "sb", "w", "sv", "v", "l", "sg", "m", "conf", "words", "abi", "p"], "n_w": ["N_y", "num_d", "n_l", "num_wa", "n__y", "k_w", "n2y", "n2d", "num_w", "N_wa", "num_y", "n__wa", "n_h", "n_y", "k_l", "n_d", "n2w", "N_w", "n__w", "n2wa", "n_wa", "n_x", "k_x", "k_h"], "res": ["rs", "js", "err", "resolution", "response", "results", "ras", "sol", "re", "rh", "press", "progress", "reg", "RES", "rez", "range", "Res", "arr", "result", "resh", "RE", "os", "rem", "css", "pres", "win", "rel", "reed", "spec", "resource", "rev", "reset", "resp", " Res", "feat", "mass", "ress", "cr", "r", "rss", "req", "rate"]}}
{"code": "n = int(input())\\ns = input()\\ncnt = 0\\nfor i in range(1,n):\\n    l = []\\n    for j in s[:i]:\\n        if j in s[i:]:\\n            l.append(j)\\n    l = set(l)\\n    cnt = max(cnt,len(l))\\n\\nprint(cnt)", "target": "575", "substitutes": {"n": ["o", "k", "x", "c", "np", "d", "nb", "num", "t", "y", "nn", "nl", "len", "size", "net", "f", "e", "nt", "b", "ns", "w", "z", "v", "m", "r", "nc", "p", "ne", "N"], "s": ["states", "ls", "o", "services", "js", "S", "x", "c", "d", "ins", "ses", "a", "ss", "args", "qs", "t", "strings", "cs", "g", "sections", "ds", "ips", "gs", "lines", "si", "sets", "f", "e", "b", "ps", "ns", "ans", "es", "sb", "w", "z", "v", "m", "xs", "r", "p"], "cnt": ["cno", "acct", "account", "ccount", "Cnc", "currt", " cpt", " ccount", " cno", "curpt", "acount", "Cno", "dcno", "dcount", "acnt", "Crt", "acpt", "curnt", "dcnt", "Cpt", "dcnc", "cnc", "Cnt", "cct", "Count", " cnc", "Cct", " count", "Ccount", " crt", "cpt", " cct", "crt", "curount", "count"], "i": ["ik", "pi", "ji", "o", "k", "x", "xi", "gi", "c", "ci", "d", "yi", "ri", "ie", "start", "int", "ind", "ini", "id", "y", "ij", "ix", "index", "jo", "eni", "si", "u", "iu", "e", "I", "f", "b", "q", "ai", "IJ", "z", "qi", "v", "ii", "li", "p", "zi"], "l": ["el", "lp", "ls", "o", "k", "ol", "al", "x", "le", "ul", "c", "d", "left", "kl", "lo", "ell", "sl", "list", "ll", "t", "L", "y", "g", "lv", "nl", "lis", "la", "u", "len", "f", "e", "rl", "b", "pl", "dl", "z", "v", "lc", "m", "li", "r", "ln", "p"], "j": ["ji", " J", "js", "o", "k", "jen", "x", "d", "name", "jc", "pos", "oj", "ind", "J", "jit", "y", " dj", "key", "ij", "bj", "job", "jl", "ja", "f", "je", "obj", "e", " Dj", "jj", "adj", "b", "q", "z", "v", "aj", "jp", "str", "jing", "jam", "m", "r", "p", "uj"]}}
{"code": "n = int(input())\\nhina_arare = map(str, input().split())\\nif 'Y' in hina_arare:\\n    print('Four')\\nelse:\\n    print('Three')", "target": "229", "substitutes": {"n": ["ner", "o", "k", "j", "c", "nb", "name", "all", "num", "ni", "i", "na", "g", "inn", "nan", "nn", "f", "ns", "m", "nc", "p", "ne", "N"], "hina_arare": ["hina_arrares", "hina_arrake", "hina_car", "hina_cares", "hina_arar", "hina_harake", "hina_harares", "hina_carar", "hina_cake", "hina_arrar", "hina_arrore", "hina_arore", "hina_arrare", "hina_carare", "hina_arake", "hina_carake", "hina_care", "hina_harare", "hina_harore", "hina_arares", "hina_harar", "hina_carore"]}}
{"code": "dict = {'ABC':'ARC', 'ARC':'ABC'}\\n\\nprint(dict[input()])", "target": "510", "substitutes": {"dict": ["file", "di", "df", "input", "db", "d", "data", "const", "document", "int", "fix", "print", "head", "list", "array", "cache", "dir", "config", "pillar", "arr", "key", "body", "div", "map", "header", "index", "set", "table", "dot", "ict", "tree", "obj", "code", "clean", "inf", "module", "sign", "rand", "style", "str", "conf", "hash", "dat", "path", "level"]}}
{"code": "n = int(input())\\n\\nfor i in range(n):\\n    s = input()\\n    dic = {chr(c): 0 for c in range(ord('a'), ord('z') + 1)}\\n    for c in s:\\n        dic[c] += 1\\n    # \u6700\u521d\u306e1\u5468\\n    if i == 0:\\n        ans = {chr(c): 0 for c in range(ord('a'), ord('z') + 1)}\\n        for k, v in dic.items():\\n            ans[k] = v\\n    # \u4ee5\u5916\\n    else:\\n        for k, v in dic.items():\\n            ans[k] = min(ans[k], v)\\n\\nfor k,v in ans.items():\\n    if v != 0:\\n        print(k*v,end=\"\")\\n\\nprint()\\n", "target": "220", "substitutes": {"n": ["o", "k", "x", "j", "np", "d", "nb", "a", "Ns", "num", "t", "y", "na", "g", "h", "network", "number", "u", "f", "e", "b", "ns", "C", "w", "z", "l", "m", "r", "nc", "p", "ne", "N"], "i": ["j", "ci", "col", "ac", "uc", "bc", "ind", "anc", "inc", "id", "iq", "h", "ct", "u", "e", "I", "f", "b", "arc", "ai", "lc", "l", "ic", "pc", "r", "nc", "p", "rc"], "s": ["states", "ls", "o", "S", "sync", "d", "ses", "ss", "t", "cs", "g", "blocks", "ds", "rows", "gs", "lines", "sq", "south", "si", "sets", "f", "e", "sym", "b", "ns", "es", "sb", "w", "z", "v", "l", "sc", "m", "r", "p"], "dic": ["bac", "Dic", "ndican", "dac", "dican", "bic", "ndiac", "Diac", "biac", " dIC", "dIC", "ndIC", " dican", "ndic", " dict", "diac", "bict", " diac", "Dac", "dict", " dac", "Dict", "bican", "bIC"], "c": ["o", "k", "x", "cy", "ci", "d", "cycle", "col", "ac", "a", "bc", "fc", "cc", "t", "ch", "cs", "ec", "y", "h", "ct", "cin", "cm", "dc", "vc", "cu", "u", "xc", "e", "f", "b", "code", "ca", "arc", "C", "unc", "q", "w", "v", "z", "cr", "l", "lc", "ic", "pc", "m", "r", "cd", "cf", "oc", "p", "sc", "enc"]}}
{"code": "a = [1]\\nb = [1]\\nfor _ in range(50):\\n    a.append(2 * a[-1] + 3)\\n    b.append(2 * b[-1] + 1)\\n\\ndef num_of_patties(n, x):\\n    if n == 0:\\n        return 1\\n\\n    if x == 1:\\n        return 0\\n    elif x <= a[n-1] + 1:\\n        return num_of_patties(n-1, x-1)\\n    elif x == a[n-1] + 2:\\n        return b[n-1] + 1\\n    elif x <= 2 * a[n-1] + 2:\\n        return b[n-1] + 1 + num_of_patties(n-1, x-a[n-1]-2)\\n    else:\\n        return b[n]\\n\\n\\nprint(num_of_patties(*[int(i) for i in input().split()]))\\n", "target": "485", "substitutes": {"a": ["area", "auto", "k", "input", "c", "aw", "d", "ama", "ac", "ab", "wa", "af", "all", "da", "s", "an", "array", "A", "fa", "y", "alpha", "api", "na", "sa", "ack", "h", "aa", "u", "va", "oa", "e", "f", "ad", "ca", "am", "ans", "ai", "w", "ae", "z", "ba", "aaa", "l", "ea", "v", "r", "m", "p", "au"], "b": ["auto", "o", "k", "mb", "abb", "pb", "c", "db", "d", "nb", "ab", "ac", "B", "bis", "an", "s", "binary", "A", "rb", "bi", "y", "bs", "body", "g", "fb", "h", "ib", "u", "f", "e", "obj", "ad", "base", "sb", "ae", "w", "z", "ba", "l", "v", "r", "m", "p", "bp"], "_": ["k", "out", " __", "__", "t", "g", " j", "f", "of", "l", "r", "p"], "n": ["o", "part", "k", "j", "c", "d", "ng", "yn", "left", "nb", "node", "name", "num", "an", "non", "t", "s", "y", "on", "na", "g", "en", "network", "nn", "index", "un", "number", "nu", "nr", "u", "net", "nt", "f", "e", "ns", "none", "sn", "no", "w", "z", "l", "v", "m", "nc", "p", "ne", "N"], "x": ["o", "xp", "xi", "j", "plus", "c", "px", "d", "ng", "xy", "int", "num", "s", "an", "t", "y", "tx", "alpha", "on", "na", "xxx", "xa", "ax", "h", "xxxx", "rx", "ix", "index", "number", "ex", "xc", "u", "e", "f", "one", "dx", "X", "xx", "max", "xes", "wx", "w", "z", "v", "l", "m", "xs", "p", "any"], "i": ["pi", "uri", "k", "xi", "j", "c", "gi", "d", "phi", "oi", "ri", " ii", "io", "ie", " I", "int", "ind", "ini", "t", "id", "h", "ip", "si", "iii", "u", "iu", "e", "I", "f", "ai", "z", "v", "l", "ii", "\u00ef", "m", "r", "p"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nN = int(input())\\nA = list(map(int, input().split()))\\n\\nINF = float('inf')\\nabs_min = INF\\nneg_cnt = 0\\nres = 0\\n\\nfor i in range(N):\\n    if A[i] < 0:\\n        neg_cnt += 1\\n    abs_min = min(abs_min, abs(A[i]))\\n    res += abs(A[i])\\n\\nif neg_cnt % 2:\\n    res -= 2 * abs_min\\n\\nprint(res)\\n", "target": "579", "substitutes": {}}
{"code": "#https://atcoder.jp/contests/ddcc2020-qual/tasks/ddcc2020_qual_a\\nXY=input().split()\\nX=int(XY[0])\\nY=int(XY[1])\\naward=0\\nif X==1 and Y==1:\\n    award+=400000\\nfor num in [X,Y]:\\n    if num==3:\\n        award+=100000\\n    if num==2:\\n        award+=200000\\n    if num==1:\\n        award+=300000\\nprint(award)", "target": "449", "substitutes": {}}
{"code": "import math\\ndef P(n, r):\\n    return math.factorial(n)//math.factorial(n-r)\\ndef C(n, r):\\n    return P(n, r)//math.factorial(r)\\n\\nN = int(input())\\nmoji =[]\\nfor i in range(N):\\n    a = sorted(input())\\n    moji.append(''.join(a))\\n\\n\\ndic = {}\\nfor i in moji:\\n    if i in dic:\\n        dic[i] += 1\\n    else:\\n        dic[i] = 1\\n\\nans = 0\\nfor value in dic.values():\\n    if value >=2:\\n        ans+=C(value, 2)\\n\\nprint(ans)", "target": "84", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "np", "d", "nb", "num", "an", "s", "t", "non", "y", "na", "g", "network", "nn", "nu", "number", "u", "net", "e", "f", "nt", "rn", "b", "ns", "pn", "none", "sn", "no", "w", "l", "v", "m", "nc", "ln", "p", "ne"], "r": ["rs", "o", "rd", "k", "err", "x", "c", "er", "R", "ar", "d", "pair", "re", "rh", "mr", "rb", "t", "range", "rf", "result", "rg", "ir", "h", "lr", "ur", "nr", "br", "e", "rn", "f", "b", "q", "w", "nor", "cr", "v", "l", "m", "right", "ru", "p", "sr"], "N": ["NA", "D", "S", "R", "NS", "NC", "NE", "B", "Ns", "T", "Y", "A", "L", "Ni", "G", "Size", "NN", "No", "Q", "I", "X", "NO", "C", "NI", "Ne", "NR", "no", "V", "P", "K", "O", "M", "F", "Z"], "moji": ["boani", "mji", "bojo", "poja", "doji", "amoji", "pooji", "amoja", "moani", "amozy", "mozy", " mozy", "doani", "mja", "poji", " mojo", "amooji", " mooji", "pojo", "dojo", "mzy", "mooji", "mojo", "doja", "booji", " moani", " moja", "dooji", "moja", "boji"], "i": ["pi", "di", "ji", "o", "iw", "k", "x", "xi", "j", "c", "ci", "d", "yi", "oi", "phi", "ri", "ie", "ori", "ind", "ini", "ui", "ati", "t", "ni", "bi", "id", "y", " j", "ij", "index", "eni", "si", "u", "iu", "fi", "f", "I", "ti", "ai", "z", "chi", "qi", "p", "l", "v", "ii", "ic", "li", "ei", "m", "io", "zi"], "a": ["area", "input", "x", "c", "d", "ar", "ama", "ac", "wa", "ab", "da", "ata", "an", "array", "A", "fa", "alpha", "na", "sa", "ana", "ia", "aa", "va", "b", "sha", "ca", "ad", "ga", "ai", "ae", "aaa", "ba", "p", "au"], "dic": ["Dics", "ldac", "Dic", "ldik", "indik", "datic", "domic", "liac", " dics", "dac", "daticer", "indiac", "dics", "tic", "tics", "tiac", "dik", "lik", "ldic", "Diac", "domique", "dicer", "domik", " dique", "indic", "dique", "ldics", "diac", "licer", " diac", "Dik", "Dac", "Dique", " dac", "datik", "lic", "indics", "datiac", "domics", "tac", " dik", "ldiac", " dicer"], "ans": ["aves", "rs", "ls", "offs", "case", "anus", "aning", "nas", "ins", "ases", "ars", "ants", "amps", "ens", "an", "s", "anc", "ats", "cs", "ents", "anon", "na", "os", "anas", "ds", "ids", "ana", "ks", "span", "anes", "antes", "lines", "can", "la", "AN", "atan", "aned", "ania", "leans", "ANS", "ann", "lan", "ns", "es", "ai", "ani", "ays", "eps", "aus", "ons"], "value": ["unit", "area", "string", "type", "VALUE", "element", "attribute", "reference", "d", "feature", "pair", "data", "variable", "name", "vid", "media", "section", "second", "description", "option", "num", "double", "Value", "range", "result", "id", "key", "cost", "entry", "val", "\u00ee", "ue", "image", "version", "multiple", "index", "number", "age", "sequence", "function", "item", "dollar", "size", "vector", "default", "values", "child", "position", "v", "fee", "m", "money"]}}
{"code": "a,b,c=map(int,input().split())\\n\\nif a==b and b==c:\\n  print(1)\\nelif (a==b and b!=c) or (b==c and c!=a) or (c==a and a!=b):\\n  print(2)\\nelse:\\n  print(3)", "target": "32", "substitutes": {"a": ["area", "o", "x", "aw", "d", "ar", "ak", "ama", "ac", "ab", "app", "art", "pa", "n", "da", "an", "s", "A", "fa", "t", "i", "y", "alpha", "g", "sa", "ah", "abc", "ia", "aa", "u", "va", "e", "f", "ad", "ca", "am", "ai", "ae", "w", "asa", "ba", "aaa", "z", "ea", "l", "bb", "p", " A", "au"], "b": ["auto", "o", "eb", "k", "abb", "x", "j", "db", "d", "cb", "ab", "ac", "B", "bc", "n", "s", "rb", "t", "bi", "i", "y", "bs", "g", "fb", "h", "ib", "aa", "wb", "u", "e", "f", "ad", "ca", "sb", "be", "w", "z", "ba", "ae", "v", "l", "bb", "m", "r", "p"], "c": ["o", "k", "x", "cy", "ci", "d", "col", "ac", "ab", "bc", "fc", "n", "ot", "s", "cc", "ce", "t", "ch", "i", "cs", "y", "ec", "g", "con", "h", "ct", "co", "ach", "cu", "u", "f", "e", "ad", "ca", "C", "w", "z", "cr", "l", "lc", "v", "sc", "r", "bb", "m", "cf", "nc", "p"]}}
{"code": "def process(H, W) : \\n  str = '#' * (W + 2)\\n  print(str)\\n  for i in range(H) : \\n    s = '#'\\n    s += input()\\n    s += '#'\\n    print(s)\\n  print(str)\\n\\n\\nH, W = tuple(map(int, input().split()))\\nprocess(H, W)\\n", "target": "133", "substitutes": {"H": ["U", "Han", "SH", "D", " h", "S", "He", "R", "E", "Hi", "B", "RH", "T", "OH", "NH", "HH", "HB", "rh", "Y", "A", "L", "G", "FH", "HA", "HK", "EH", "h", "HTTP", "HS", "Q", "Length", "X", "C", "HM", "MH", "HI", "V", "w", "P", "K", "AH", "Ch", "O", "M", "DH", "F", "CH", "N", "Z"], "W": ["GW", "U", "TW", "SH", "WI", "S", "BW", "Width", "E", "WF", "B", "WR", "T", "EW", "Y", "L", "Wh", "G", "DW", "WP", "Web", "NW", " w", "FW", "Q", "WA", "WH", "WC", "WS", "Wa", "WB", "SW", "X", "C", "Tw", "V", "w", "We", "P", "MW", "WM", "O", "WE", "M", "F", "VW", "AW", "N"], "str": ["rs", "string", "err", "wr", "tr", "exp", "er", "sp", "d", "ar", "ss", "sl", "strings", "cs", "arr", "inner", "div", "g", "ts", "iter", "dr", "st", "strip", "char", "br", "Str", "f", "e", "hr", "ns", "stri", "w", "cr", "STR", "sg", "r", "fr", "text", "sr", "star", "enc"], "i": ["iw", "k", "x", "j", "gi", "c", "sp", "d", " I", "col", "ind", "n", "id", "h", "ib", "index", "ip", "iu", "f", "I", "ai", "w", "z", "ii", "r", "ih", "p"], "s": ["ls", "string", "o", "parts", "signed", "S", "input", "su", "c", "d", "ses", "a", "ss", "sl", "n", "t", "space", "strings", "uns", "g", "sa", "en", "h", "ds", "ts", "si", "u", "Str", "e", "f", "b", "us", "ns", "ps", "es", "sb", "w", "ims", "l", "sg", "m", "r", "p", "sr"]}}
{"code": "a,b,c = map(int, input().split())\\nprint('Yes' if a/c <= b else 'No')", "target": "786", "substitutes": {"a": ["area", "x", "d", "ac", "ab", "aux", "int", "n", "pa", "da", "an", "s", "A", "i", "y", "alpha", "api", "qa", "sa", "aa", "u", "f", "e", "ad", "ca", "ai", "ae", "w", "asa", "ba", "l", "ada", "aj", "bb", "p", "au"], "b": ["eb", "k", "abb", "cy", "d", "ab", "ac", "B", "bis", "n", "s", "rb", "bi", "i", "y", "bs", "g", "fb", "h", "beta", "aa", "wb", "u", "e", "f", "ca", "base", "sb", "be", "ba", "v", "l", "bb", "m", "r", "p"], "c": ["cur", "o", "k", "x", "cy", "ci", "d", "col", "ac", "n", "cc", "ce", "i", "cs", "y", "ec", "alpha", "con", "h", "ct", "cu", "u", "e", "f", "ca", "C", "w", "z", "l", "lc", "m", "cf", "p", "count"]}}
{"code": "N = str(input())\\n\\nif N[-1] == '3':\\n    print('bon')\\nelif (N[-1] == '0' or N[-1] == '1' or N[-1] == '6' or N[-1] == '8'):\\n    print('pon')\\nelse:\\n    print('hon')\\n", "target": "595", "substitutes": {"N": ["ND", "Node", "NA", "D", "S", "CN", "GN", "R", "NS", "E", "NL", "NC", "B", "Ns", "T", "n", "J", "W", "Long", "NH", "Y", "Ni", "L", "G", "Part", "Num", "SN", "NB", "CNN", "NT", "NM", "Body", "NN", "No", "Q", "Sign", "I", "Number", "X", "NPR", "NO", "C", "Na", "Ne", "NI", "NG", "RN", "V", "P", "K", "NP", "DN", "O", "H", "M", "F", "Name", "Z"]}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10**7)\\ndef I(): return int(sys.stdin.readline().rstrip())\\ndef MI(): return map(int,sys.stdin.readline().rstrip().split())\\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #\u7a7a\u767d\u3042\u308a\\ndef LI2(): return list(map(int,sys.stdin.readline().rstrip()))  #\u7a7a\u767d\u306a\u3057\\ndef S(): return sys.stdin.readline().rstrip()\\ndef LS(): return list(sys.stdin.readline().rstrip().split())  #\u7a7a\u767d\u3042\u308a\\ndef LS2(): return list(sys.stdin.readline().rstrip())  #\u7a7a\u767d\u306a\u3057\\n\\n\\nS = LS2()\\nN = len(S)\\n\\nprint(sum(S[i] != S[i+1] for i in range(N-1)))\\n", "target": "655", "substitutes": {}}
{"code": "MOD = 10 ** 9 + 7\\nINF = 10 ** 10\\nimport sys\\nsys.setrecursionlimit(100000000)\\ndy = (-1,0,1,0)\\ndx = (0,1,0,-1)\\nfrom collections import deque\\n\\ndef main():\\n    n = int(input())\\n    idx = [-1] * n\\n    for i in range(n):\\n        p = int(input())\\n        p -= 1\\n        idx[p] = i\\n    \\n    ans = 1\\n    tmp = 1\\n    for i in range(1,n):\\n        if idx[i - 1] < idx[i]:\\n            tmp += 1\\n        else:\\n            ans = max(ans,tmp)\\n            tmp = 1\\n    ans = max(ans,tmp)\\n    print(n - ans)\\n\\nif __name__ =='__main__':\\n    main()  \\n", "target": "525", "substitutes": {"MOD": ["SE", "Z", "EXT", "FD", "DIR", "OM", "LIB", " C", "G", "IN", "FE", "RE", "SPEC", "IP", "MODE", "TR", "STEM", "AME", "MI", "DC", "FF", "MIN", "CC", "O", "IX", "M", "RM"], "INF": [" INFF", "Inf", "InFF", "inf", "INI", "INFF", " INI", "InI", "InF", "inFF", "INf", "inF", " INf", "inI"], "dy": ["df", "di", "dt", "sync", "np", " di", "eddy", "ie", "du", "da", " dd", "fd", "ds", "die", "md", "ix", "dc", "py", "idd", "DI", "dp", "dd", "ad", "dl", "dm", "dn", "dist", "dq"], "dx": ["dt", "sync", "xp", "px", "doc", "d", "eddy", "dev", "ie", "du", "diff", "da", "progress", "dim", "ds", "die", "ix", "dc", "pad", "zip", "dp", "xd", "dd", "wx", "dl", "dm", "dist", "xs", "dq"], "n": ["pi", "o", "k", "x", "j", "c", "np", "d", "nb", "ny", "pos", "num", "an", "t", "ni", "y", "min", "en", "h", "nn", "nan", "un", "nu", "number", "nr", "u", "net", "size", "len", "nt", "e", "f", "max", "b", "ns", "pn", "sn", "no", "q", "w", "z", "v", "l", "m", "nc", "ne", "N"], "idx": ["ipz", "inv", "IDy", "iex", " idz", "indx", " idy", "ipxes", "inx", "idxs", "iexs", " idex", "ipxs", "inz", "adv", "Idxs", "idxes", "indxs", "iexes", "Idxes", "IDxs", "index", "iez", "IDx", "indy", "Idx", "adx", "ipx", "idv", "idz", "IDex", "adxs", "adz", " idxs", " idv", "inxs", "Idz", "idy", "idex", " idxes"], "i": ["pi", "di", "o", "it", "part", "pid", "k", "x", "xi", "j", "c", "ci", "phi", "a", "io", "ie", "start", "int", "ind", "num", "ini", "t", "ni", "id", "y", "api", "index", "ip", "multi", "si", "u", "iu", "f", "I", "ti", "e", "b", "ai", "P", "z", "v", "l", "ii", "li"], "p": ["pi", "tp", "part", "o", "pid", "k", "x", "j", "c", "np", "d", "a", "start", "pos", "t", "y", "h", "ip", "u", "pp", "e", "f", "b", "pn", "q", "pt", "P", "z", "v", "l", "pc", "m", "r", "bp", "fp"], "ans": ["offs", "parts", "kids", " samples", " ants", "atts", "x", "nas", "ras", "aos", "ins", "a", "ars", "ants", "pos", "amps", "args", "an", "ads", "ops", "s", " means", " spans", "ats", "cs", "ents", "ams", "outs", "na", "os", "anas", "ms", "ks", " pairs", "ips", "ids", "span", "aned", "ANS", "max", "ann", "ps", "ns", "lan", "no", "ai", "aces", "ani", "bps", "ays", "ano", "params", " scans", "xs", "eps", "aus", "ons", "aps", "pps", " ads", "au"], "tmp": ["wp", "mini", "pi", "area", "part", "tp", "pty", "pid", "x", "kk", "j", "c", "sp", "np", "nb", "a", "start", "pos", "etc", "pa", "int", "vt", "s", "amp", "po", "t", "array", "ppa", "test", "ignore", "api", "cp", "nn", "span", "py", "pad", "st", "next", "appy", "mp", "size", "pp", "nt", "max", "obj", "pre", "every", "stuff", "mm", "no", "pt", "ai", "bps", "m", "li", "txt", "ppo", "now", "temp", "bp", "fp"]}}
{"code": "N,K = map(int, input().split())\\nH = [int(input()) for i in range(N)]\\nH.sort()\\n\\nhold = 0\\nans = 10 ** 9 + 1\\nfor i in range(K-1,N):\\n    hold = H[i] - H[i-(K-1)]\\n    ans = min(ans, hold)\\nprint(ans)", "target": "710", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "NE", "NC", "B", "Ns", "T", "n", "W", "J", "Y", "Ni", "L", "Num", "NB", "NT", " n", "Size", "NN", "Q", "I", "X", "C", "Ne", "V", "P", "O", "M", "F", "Z"], "K": ["U", "KI", "KR", "D", "Ku", "k", "S", "SK", "E", "KE", "T", "n", "J", "W", "Y", "NK", "L", "G", "KK", "HK", "Q", "PK", "I", "X", "C", "V", "P", "KN", "Sk", "KS", "O", "M", "F", "Z"], "H": ["U", "SH", "D", "S", "CL", "HD", "HC", "R", "E", "HL", "Hi", "B", "RH", "T", "W", "HH", "J", "Long", "Array", "Y", "A", "G", "L", "HA", "HK", "EH", "h", "HS", "Q", "Ha", "GH", "I", "X", "House", "C", "MH", "HI", "V", "P", "AH", "O", "M", "F", "Z"], "i": ["mini", "pi", "di", "o", "k", "x", "xi", "j", "gi", "c", "ci", "oi", "io", "ori", "int", "ind", "n", "ui", "ini", "ni", "bi", "id", "h", "ij", "index", "ip", "eni", "si", "u", "iu", "f", "ti", "I", "b", "mi", "q", "ai", "z", "qi", "v", "l", "ii", "li", "m", "ih", "p", "zi"], "hold": ["demand", "ha", "hang", "balance", "ul", "off", "olds", "wa", "fail", "ind", "n", "hand", "high", "pull", "list", "Hold", "range", "weight", "held", "holding", "round", "keep", "na", "h", "gold", "age", "aa", "sav", "la", "lay", "sha", "shape", "hi", "lock", "child", "uh", "q", "holder", "mean", "length", "han", "form", "flow", "cl", "count"], "ans": ["offs", "ls", "NA", "cycles", "Ann", "anus", "anan", "nas", "ins", "reads", "old", "olds", "a", "acks", "ants", "aid", "ens", "an", "s", "anc", "A", "hands", " means", "man", "outs", "fa", "ians", "ents", "sk", "na", "ds", "aus", "ana", "nan", "span", "can", "lines", "say", "AN", "cas", "aned", "len", "ANS", "leans", "ann", "ns", "lan", "ane", "Na", "ai", "ays", "mean", "ares", "eps", "han", "any"]}}
{"code": "a,b,c=map(int,raw_input().split())\\nif a<=c<=b:\\n  print \"Yes\"\\nelse:\\n  print \"No\"", "target": "706", "substitutes": {"a": ["x", "d", "ac", "ab", "int", "n", "pa", "da", "an", "A", "fa", "i", "y", "alpha", "sa", "aa", "u", "va", "e", "f", "ad", "ca", "ae", "w", "asa", "aaa", "ba", "l", "aj", "m", "r", "p", "au"], "b": ["o", "eb", "mb", "abb", "db", "d", "cb", "ob", "ab", "B", "bc", "bound", "n", "xb", "rb", "i", "y", "bs", "g", "fb", "abc", "wb", "u", "f", "e", "ca", "base", "sb", "be", "ba", "l", "v", "bb", "m", "r"], "c": ["o", "k", "x", "cy", "ci", "d", "cb", "col", "ac", "bc", "int", "n", "ce", "ch", "i", "cs", "y", "alpha", "g", "h", "cp", "ct", "cm", "u", "f", "e", "ca", "C", "w", "z", "cr", "l", "v", "m", "r", "cf", "p"]}}
{"code": "# C Many Requirements\\n\\nfrom itertools import combinations_with_replacement as com\\n\\nN, M, Q = map(int, input().split())\\n\\nC = []\\nfor q in range(Q):\\n  C.append(tuple(map(int, input().split())))\\n\\nAs = com([i for i in range(1, M+1)], N)\\n\\nans = 0\\nfor A in As:\\n  point = 0\\n  for Ci in C:\\n    if A[Ci[1]-1] - A[Ci[0]-1] == Ci[2]:\\n      point += Ci[3]\\n  ans = max(ans, point)\\n\\nprint(ans)", "target": "0", "substitutes": {}}
{"code": "s = input()\\n\\nflag=[0,0]\\n\\nif 1<=int(s[0:2])<=12:\\n    flag[0]=1\\nif 1<=int(s[2:4])<=12:\\n    flag[1]=1\\n\\nif flag==[0,0]:\\n    print(\"NA\")\\nif flag==[1,0]:\\n    print(\"MMYY\")\\nif flag==[0,1]:\\n    print(\"YYMM\")\\nif flag==[1,1]:\\n    print(\"AMBIGUOUS\")\\n", "target": "17", "substitutes": {"s": ["states", "services", "ls", "o", "string", "S", "sync", "input", "sin", "c", "speech", "d", "a", "submit", "sl", "n", "flags", "args", "t", "space", "strings", "i", "cs", "y", "sa", "comments", "ts", "ds", "sample", "gs", "lines", "south", "si", "u", "spec", "f", "e", "b", "ns", "status", "w", "v", "sign", "sg", "l", "m", "r", "now", "p"], "flag": ["use", "log", "part", "type", "letter", "field", "sync", "alt", "feature", "event", "sum", "nb", "lag", "bug", "only", "start", "const", "back", "name", "af", "side", "int", "flags", "long", "option", "weight", "wave", "id", "key", "lead", "date", "offset", "version", "ord", "line", "nl", "bin", "error", "bit", "age", "character", "char", "star", "len", "f", "code", "pin", "stage", "store", "status", "standard", "state", "sid", "sign", "style", "cat", "skip", "comment", "bf", "Flag", "group", "arg", "count"]}}
{"code": "data = list(map(int,input().split()))\\nn = data[0]\\nk = data[1]\\ndel data\\nif k > 1:\\n    if n >= k:\\n        print(n-k)\\n    elif n < k:\\n        print(\"1\")\\nelse:\\n    print(0)", "target": "739", "substitutes": {"data": ["o", "window", "input", "x", "_", "j", "response", "events", "results", "d", "output", "a", "value", "start", "Data", "pos", "int", "ind", "da", "ata", "all", "list", "array", "i", "result", "alpha", "split", "key", "na", "div", "change", "rows", "sample", "index", "next", "number", "batch", "model", "size", "len", "ed", "end", "code", "DATA", "no", "v", "length", "m", "dat", "p", "temp", "block", "count"], "n": ["o", "cn", "x", "j", "c", "d", " N", "node", "Ns", "num", "an", "t", "ni", "i", "y", "na", "h", "network", "nn", "nan", "un", "number", "nu", "nr", "u", "size", "net", "nt", "e", "f", "b", "ns", "pn", "sn", "no", "z", "l", "m", "nc", "p", "ne", "N"], "k": ["ik", "o", "kn", "ke", "x", "kk", "j", "c", "d", "ak", "ijk", "mk", "ck", "kick", "i", "id", "y", "key", "sk", "unk", "h", "ok", "ks", "ko", "u", "size", "f", "max", "b", "q", "w", "kw", "z", "K", "v", "l", "m", "p", "N", "ku"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\n#############\\n# Libraries #\\n#############\\n\\nimport sys\\ninput = sys.stdin.readline\\n\\nimport math\\n#from math import gcd\\nimport bisect\\nimport heapq\\nfrom collections import defaultdict\\nfrom collections import deque\\nfrom collections import Counter\\nfrom functools import lru_cache\\n\\n#############\\n# Constants #\\n#############\\n\\nMOD = 10**9+7\\nINF = float('inf')\\nAZ = \"abcdefghijklmnopqrstuvwxyz\"\\n\\n#############\\n# Functions #\\n#############\\n\\n######INPUT######\\ndef I(): return int(input().strip())\\ndef S(): return input().strip()\\ndef IL(): return list(map(int,input().split()))\\ndef SL(): return list(map(str,input().split()))\\ndef ILs(n): return list(int(input()) for _ in range(n))\\ndef SLs(n): return list(input().strip() for _ in range(n))\\ndef ILL(n): return [list(map(int, input().split())) for _ in range(n)]\\ndef SLL(n): return [list(map(str, input().split())) for _ in range(n)]\\n\\n\\n#####Shorten#####\\ndef DD(arg): return defaultdict(arg)\\n\\n#####Inverse#####\\ndef inv(n): return pow(n, MOD-2, MOD)\\n\\n######Combination######\\nkaijo_memo = []\\ndef kaijo(n):\\n  if(len(kaijo_memo) > n): return kaijo_memo[n]\\n  if(len(kaijo_memo) == 0): kaijo_memo.append(1)\\n  while(len(kaijo_memo) <= n): kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)\\n  return kaijo_memo[n]\\n\\ngyaku_kaijo_memo = []\\ndef gyaku_kaijo(n):\\n  if(len(gyaku_kaijo_memo) > n): return gyaku_kaijo_memo[n]\\n  if(len(gyaku_kaijo_memo) == 0): gyaku_kaijo_memo.append(1)\\n  while(len(gyaku_kaijo_memo) <= n): gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)\\n  return gyaku_kaijo_memo[n]\\n\\ndef nCr(n,r):\\n  if n == r: return 1\\n  if n < r or r < 0: return 0\\n  ret = 1\\n  ret = ret * kaijo(n) % MOD\\n  ret = ret * gyaku_kaijo(r) % MOD\\n  ret = ret * gyaku_kaijo(n-r) % MOD\\n  return ret\\n\\n######Factorization######\\ndef factorization(n):\\n  arr = []\\n  temp = n\\n  for i in range(2, int(-(-n**0.5//1))+1):\\n    if temp%i==0:\\n      cnt=0\\n      while temp%i==0: \\n        cnt+=1 \\n        temp //= i\\n      arr.append([i, cnt])\\n  if temp!=1: arr.append([temp, 1])\\n  if arr==[]: arr.append([n, 1])\\n  return arr\\n\\n#####MakeDivisors######\\ndef make_divisors(n):\\n  divisors = []\\n  for i in range(1, int(n**0.5)+1):\\n    if n % i == 0:\\n      divisors.append(i)\\n      if i != n // i: \\n        divisors.append(n//i)\\n  return divisors\\n\\n#####MakePrimes######\\ndef make_primes(N):\\n  max = int(math.sqrt(N))\\n  seachList = [i for i in range(2,N+1)]\\n  primeNum = []\\n  while seachList[0] <= max:\\n    primeNum.append(seachList[0])\\n    tmp = seachList[0]\\n    seachList = [i for i in seachList if i % tmp != 0]\\n  primeNum.extend(seachList)\\n  return primeNum\\n\\n#####GCD#####\\ndef gcd(a, b):\\n    while b: a, b = b, a % b\\n    return a\\n\\n#####LCM#####\\ndef lcm(a, b):\\n    return a * b // gcd (a, b)\\n\\n#####BitCount#####\\ndef count_bit(n):\\n  count = 0\\n  while n:\\n    n &= n-1\\n    count += 1\\n  return count\\n\\n#####ChangeBase#####\\ndef base_10_to_n(X, n):\\n  if X//n: return base_10_to_n(X//n, n)+[X%n]\\n  return [X%n]\\n\\ndef base_n_to_10(X, n):\\n  return sum(int(str(X)[-i-1])*n**i for i in range(len(str(X))))\\n\\ndef base_10_to_n_without_0(X, n):\\n  X -= 1\\n  if X//n: return base_10_to_n_without_0(X//n, n)+[X%n]\\n  return [X%n]\\n\\n#####IntLog#####\\ndef int_log(n, a):\\n  count = 0\\n  while n>=a:\\n    n //= a\\n    count += 1\\n  return count\\n\\n#############\\n# Main Code #\\n#############\\n\\nN,M = IL()\\nA = IL()\\n\\ndic = {1:2,2:5,3:5,4:4,5:5,6:6,7:3,8:7,9:6}\\nusable = DD(int)\\nfor a in A:\\n  usable[dic[a]] = max(usable[dic[a]],a)\\n  \\ndp = [-INF for i in range(N+1)]\\ndp[0] = 0\\n\\nfor i in range(N):\\n  for k in usable:\\n    if i+k<=N:\\n      dp[i+k] = max(dp[i+k],dp[i]*10+usable[k])\\nprint(dp[-1])", "target": "712", "substitutes": {}}
{"code": "from sys import stdin, setrecursionlimit\\ninput = stdin.readline\\nsetrecursionlimit(10**8)\\n\\nclass Unionfind():\\n    def __init__(self,n):\\n        self.n = n\\n        self.parent = [-1]*n\\n    \\n    def find(self,x):\\n        if self.parent[x] < 0:\\n            return x\\n        else:\\n            self.parent[x] = self.find(self.parent[x])\\n            return self.parent[x]\\n    \\n    def union(self, x, y):\\n        x = self.find(x)\\n        y = self.find(y)\\n        \\n        if x == y:\\n            return 0\\n        if self.parent[x] < self.parent[y]:\\n            x,y = y,x\\n        \\n        total_unite_island = self.parent[x] * self.parent[y]\\n        self.parent[x] += self.parent[y]\\n        self.parent[y] = x\\n        return total_unite_island\\n\\nN,M = map(int, input().split())\\nA = [0]*M; B = [0]*M\\nfor i in range(M):\\n    A[i], B[i] = map(lambda x: int(x) - 1, input().split())\\n\\nuf = Unionfind(N)\\ninconvenience = N * (N-1) // 2\\ninconvenience_list = [0]*M\\ninconvenience_list[M-1] = inconvenience\\nfor i in range(M-1,0,-1):\\n    inconvenience -= uf.union(A[i],B[i])\\n    inconvenience_list[i-1] = inconvenience\\nfor i in range(M):\\n    print(inconvenience_list[i])", "target": "287", "substitutes": {"input": ["type", " str", "out", "feed", "c", "op", " it", "current", "param", " I", "output", "raw", "cmd", "back", " Input", "format", "echo", "submit", "util", "int", "pull", "amp", "list", " int", "config", "proc", " rc", "version", " f", "request", "source", "bin", "error", "sel", "stream", "but", "hidden", " inputs", "background", "help", "reader", "reset", "load", "buffer", "inf", "child", "save", "json", "accept", "gen", "Input", "comment", "exec", "temp", "form", "rc"], "self": ["work", "object", "c", "events", "results", "wrapper", "raw", "dev", "per", "t", "cmp", "time", "h", "next", "tmp", "f", "ns", "base", "ref", "right", "p", "cl", "part", "k", "full", "first", "plus", "er", "d", "ng", "ws", "only", "data", "a", "cs", "client", "error", "max", "no", "r", "gen", "search", "ctx", "node", "event", "old", "app", "context", "instance", "s", "game", "config", "comp", "function", "u", "spec", "e", "func", "es", "l", "form", "user", "case", "Self", "this", "pos", "view", "all", "hand", "cache", "false", "g", "os", "min", "ok", "co", "worker", "master", "host", "me", "mp", "parse", "other", "q", "w", "now", "utils"], "n": ["o", "k", "j", "c", "np", "d", "nb", "node", "name", "Ns", "all", "num", "s", "t", "g", "h", "network", "nn", "nan", "span", "number", "nu", "u", "net", "f", "max", "e", "nt", "b", "ns", "sn", "no", "w", "z", "l", "v", "m", "r", "nc", "p", "ne"], "parent": ["unit", "type", "part", "element", "search", "page", "current", "large", "port", "point", "node", "Parent", "connection", "pair", "data", "value", "parents", "name", "author", "family", "instance", "valid", "list", "depth", "remote", "parser", "root", "result", "test", "mother", "sort", "key", "id", "client", "static", "gap", "pool", "target", "offset", "image", "query", "fork", "server", "source", "index", "master", "main", "null", "host", "model", "school", "default", "tree", "shape", "plant", "new", "member", "child", "content", "position", "memory", "layer", "chain", "right", "comment", "p", "path", "level", "children"], "x": ["work", "xi", "j", "c", "t", "ph", "xxx", "h", "rx", "fx", "null", "f", "dx", "z", "m", "p", "ext", "k", "full", "xp", "px", "d", "a", "wa", "lex", "ye", "id", "yx", "sex", "something", "ix", "py", "max", "xes", "content", "cross", "xy", "int", "ww", " xx", "xe", "xxxx", "mx", "index", "ex", "xc", "u", "e", "X", "xx", "wx", "v", "l", "xs", "ya", "name", "ux", "xb", "Y", "tx", "key", "on", "xa", "ax", "xt", "host", "one", "b", "my", "w", "rex", "pe"], "y": ["ey", "o", "wy", "sy", "hy", "ya", "j", "cy", "c", "d", "yi", "xy", "oy", "ky", "a", "ry", "ny", "yo", "int", "year", "s", "Y", "ye", "t", "zy", "ch", "key", "dy", "yx", "h", "ay", "ym", "ix", "py", "yt", "u", "e", "b", "X", "xx", "ish", "yy", "w", "z", "v", "l", "m", "p", "vy"], "total_unite_island": ["total_unite_sulf", "total_unite_Isla", "total_unite_isulf", "total_unite_slander", "total_unite_Island", "total_unite_Islands", "total_unite_slands", "total_unite_isla", "total_unite_Islander", "total_unite_islands", "total_unite_islander", "total_unite_sland", "total_unite_sla", "total_unite_Isulf"], "N": ["U", "NA", "D", "S", " NI", "R", "E", " I", "Ns", "T", "J", "Y", "L", "G", "Ni", "Num", "NT", "NM", "Size", "NN", " Ne", "MN", "number", "Q", "I", "X", "NO", "C", "V", "Me", "P", "K", "O", "m", "H", "F", "Z"], "M": ["U", "Multi", "MO", "LM", "D", "S", "R", "E", "T", "W", "J", "Y", "L", "G", "IN", "MU", "DM", "RM", "NM", "MD", "MS", "MN", "Q", "ME", "I", "X", "C", "MA", "JM", "V", "P", "MM", "K", "MC", "MT", "MX", "m", "O", "H", "F", "CM", "MF", "Z"], "A": ["As", "U", "AR", "NA", "D", "S", "ANC", "Alpha", "a", "CA", "T", "mA", "This", "At", "Y", "Az", "L", "AM", "AD", "Ab", "Ma", "GA", "AU", "An", "EA", "Area", "AP", "Ar", "AV", "I", "AA", "X", "AMI", "App", "C", "P", "API", "AH", "AB", "H", "AW", "F", "AC", "LA"], "B": ["U", " b", "D", "BF", "R", "E", "Ub", "Both", "BB", "T", "UB", "W", "BE", "Y", "L", "G", "NB", "BA", "PB", "Blue", "VB", "OB", "GB", "Bs", "BL", "DB", "QB", "WB", "BER", "I", "b", "X", "C", "SB", "Block", "V", "P", "BC", "AB", "O", "H", "F"], "i": ["pi", "di", "it", "o", "uri", "ji", "II", "k", "xi", "j", "gi", "c", "ci", "d", "yi", "ri", "oi", "ie", "cli", "int", "ind", "ini", "ui", "Ni", "ni", "bi", "id", "info", "key", "api", "ij", "ix", "index", "ip", "multi", "eni", "si", "iii", "u", "iu", "fi", "f", "I", "ti", "e", "b", "mi", "MI", "ki", "mm", "NI", "im", "ai", "z", "p", "qi", "ID", "l", "v", "ii", "li", "m", "ei", "Mi", "io", "vi"], "uf": ["UL", "U", "su", "ul", "um", "ume", "Buff", "auc", "UFF", "cb", "du", "uc", "Flow", "aux", "ff", "UB", "ub", "ui", "buf", "SUP", "uff", "gb", "ue", "fff", "tf", "UF", "uno", "buff", "f", "ull", "SU", "ki", "DF", "uper", "GF", "utf", "FF", "NF", "lu", "TF", "cf", "isf", "uffy"], "inconvenience": ["inconvenance", "inconvenction", "incoperience", "inconstvernence", "inconfenence", "inconversioniance", "inconsherence", "inconzengence", "inconfenIENCE", "inconzenction", "inconverience", "inconvernence", "inconstvenience", "inconherence", "inconzenance", "incovenience", "inconstvengence", "inconperIENCE", "inConveniance", "inconsherception", "inconfenience", "inconeniance", "inConzeniences", "inconstvenction", "inconveriences", "inConvenance", "inconverngence", "incoperence", "incoperiences", "inconvernience", "inconzenence", "inconenence", "inconzenience", "inconvenIENCE", "inconsherience", "inconstvenence", "inconzeniance", "inconperence", "inConzenance", "inconversionence", "inconveniences", "inConzenience", "incoveniences", "inconsvenence", "inconenIENCE", "inconeniences", "inconsveniance", "inconperience", "inconfengence", "inConvenience", "inConveniences", "inconenience", "inConzeniance", "inconversionception", "inconversionience", "inconfenction", "inconvenence", "inconveriance", "inconherception", "inconperiences", "inconzeniences", "incoperIENCE", "inconstvernction", "incovenence", "inconenception", "inconenance", "inconveniance", "inconvernction", "inconsheriance", "inconstverngence", "inconfeniences", "inconverance", "inconvenception", "inconvengence", "inconherience", "incovenIENCE", "inconstvernience", "inconsvenience", "inconsvenception", "inconheriance"], "inconvenience_list": ["inconvenction__List", "inconvenance_List", "inconvenction_List", "inconvenance_base", "inconvenience__l", "inconvenience_List", "inconvenction_list", "inconvenence_List", "inconvenience__list", "inconvenence_LIST", "inconvenction__list", "inconvenience_l", "inconvenance_list", "inconvenience_LIST", "inconvenience_base", "inconvenence_l", "inconvenience__LIST", "inconvenence_list", "inconvenction__l", "inconvenience__List", "inconvenction_l"]}}
{"code": "def divisors(n):\\n    divisors = []\\n    for i in range(1, int(n**0.5)+1):\\n        if n%i == 0:\\n            divisors.append(i)\\n            if i != n//i:\\n                divisors.append(n//i)\\n    return sorted(divisors)\\n\\nN = int(input())\\n\\nans = len(divisors(N-1)) -1\\n\\nfor k in divisors(N)[1:]:\\n    N_ = N\\n    while N_ % k == 0:\\n        N_ = N_//k\\n    if N_ % k == 1:\\n        ans += 1\\n\\nprint(ans)\\n\\n", "target": "462", "substitutes": {"n": ["o", "cn", "x", "j", "c", "np", "d", "node", "nb", "a", "Ns", "num", "an", "t", "ni", "y", "mn", "na", "g", "nn", "nan", "nu", "number", "u", "net", "nt", "fn", "e", "f", "b", "ns", "pn", "sn", "no", "w", "z", "l", "v", "m", "nc", "ln", "p", "ne"], "divisors": ["dividings", "DIVisors", "divistors", "diviions", " divisor", " divisners", "decisions", "divisners", "divissories", "collisor", "divistored", " divisores", "dividners", "decistions", "DIVisor", "decisors", "divitions", "divisiORS", "collidions", "decisor", "collisors", "decistored", "divistories", "decidor", "divitings", " divisions", "decisored", " dividions", "expisores", "collidor", "divitors", "divistor", "divisor", "divideor", "divitor", "dividories", " dividors", "diviores", "diviors", " dividners", "decidORS", "DIVisions", "divideors", "collidings", "divisories", "expisors", "divior", "dividors", "DIVidores", "collidors", " dividor", "expistores", "divisiings", "DIVisores", "divisiors", "divisings", "expistories", "divistoring", "divissors", "diviored", "divistORS", "decistores", "divisored", "dividored", "DIVidions", "divisores", "divisiions", "divideners", "divisior", "DIVidors", "dividORS", "expisoring", "expistors", "diviners", "divisoring", "divissoring", "decidores", " dividores", "expistoring", "divisiores", "dividions", "decisores", "divistions", "collisions", "expisories", "decidors", "dividor", "divisions", "divistores", "dividores", "divideores", "dividoring", "divissores", "decistors", "collisings", "divisORS", "decisORS", "DIVidor"], "i": ["pi", "o", "x", "xi", "j", "c", "ci", "d", "yi", "oi", "phi", "a", "start", "int", "ind", "ini", "ni", "bi", "id", "y", "ix", "index", "eni", "si", "u", "iu", "e", "ti", "I", "end", "f", "b", "ai", "z", "chi", "qi", "v", "l", "ii", "li", "m", "p"], "N": ["NA", "D", "S", "GN", "R", "NS", "NC", "NE", "B", "Ns", "T", "Y", "Ni", "L", "G", "Len", "Num", "SN", "Part", "CNN", "NT", "NM", "Size", "NN", "MN", "AN", "I", "X", "C", "Na", "Ne", "NG", "V", "P", "K", "NP", "O", "M", "F", "Z"], "ans": ["offs", "NA", "ANN", "S", "anus", "ana", "aning", "nas", "ras", "ins", "anders", "ants", "ars", "Ns", "an", "s", "anc", "ni", " means", "cs", "oss", "anon", "CNN", "sk", "na", "anas", "ds", "NN", "nan", "nn", "span", "An", "ks", "can", "lines", "anes", "cons", "AN", "leans", "len", "anne", "ANS", "aned", "activation", "ann", "lan", "ns", "sn", "Na", "no", "ani", "ano", "annels", "aus", "ons"], "k": ["ik", "o", "ke", "_", "x", "c", "j", "d", "E", "a", "mult", "mk", "ck", "s", "kick", "ch", "id", "y", "key", "sk", "g", "unk", "ok", "ks", "uk", "un", "ko", "u", "f", "max", "e", "q", "w", "kw", "z", "K", "v", "l", "m", "p", "ku"], "N_": [" n_", " n__", "N___", "n0", "L_", "M0", "n___", "L__", "M___", " N___", "K_", "L___", "N0", "C_", "N__", " N__", "M_", "K___", "n_", "M__", "C__", " N0"]}}
{"code": "S = str(input())\\nx = S.count(\"0\")\\ny = S.count(\"1\")\\nprint(2*min(x, y))\\n", "target": "40", "substitutes": {"S": ["SE", "U", "SH", "SIGN", "SO", "D", "GS", "input", "SS", "ISS", "R", "NS", "RS", "Sample", "SY", "DES", "session", "B", "T", "TS", "URI", "Si", "SI", "s", "Y", "Source", "RAW", "L", "G", "String", "SN", "Single", "INS", "TEXT", "Q", "SC", "CSS", "ITS", "Socket", "X", "SU", "C", "SB", "DATA", "V", "P", "SON", "SP", "SEC", "H", "M", "F", "FS", "N"], "x": ["area", "height", "px", "c", "d", "xy", "left", "name", "data", "pos", "n", "num", "i", "width", "time", "min", "val", "h", "rx", "index", "ex", "size", "f", "e", "dx", "max", "b", "X", "xx", "w", "z", "lat", "l", "length", "m", "xs", "p"], "y": ["height", "ey", "sy", "ya", "j", "cy", "yi", "oy", "xy", "ny", "year", "n", "yl", " ya", "s", "Y", "zy", "t", "ye", "i", "dy", " cy", "py", " py", "lon", "yt", "ys", "b", " dy", "yy", " ay", "z", " Y", "m", "vy", "isy"]}}
{"code": "def resolve():\\n    a,b = map(int,input().split())\\n    if a%2 != b%2:\\n        print('IMPOSSIBLE')\\n    else:\\n        print((a+b)//2)\\nresolve()", "target": "83", "substitutes": {"a": ["ma", "area", "auto", "x", "c", "aw", "d", "ama", "ab", "ac", "aux", "af", "int", "n", "mA", "da", "abs", "an", "A", "fa", "i", "y", "alpha", "sa", "aa", "u", "va", "f", "e", "am", "ad", "ca", "ga", "ai", "ae", "asa", "ba", "aj", "m", "bb", "p", "au"], "b": ["eb", "mb", "abb", "pb", "j", "c", "db", "d", "cb", "nb", "ab", "B", "bc", "bd", "n", "rb", "bi", "i", "bot", "y", "bs", "fb", "gb", "ib", "beta", "aa", "wb", "lb", "f", "e", "ad", "base", " B", "sb", "ba", "l", "v", "bb", "bf", "emb", "p"]}}
{"code": "s = input()\\nt = input()\\nn = len(s)\\nfor i in range(0,n):\\n    if s[i:] + s[:i] == t:\\n        print(\"Yes\")\\n        quit()\\nprint(\"No\")", "target": "721", "substitutes": {"s": ["states", "ls", "o", "services", "parts", "S", "ssl", "input", "c", "d", "ins", "ses", "a", "ss", "args", "strings", "cs", "y", "ats", "os", "g", "ds", "ts", "source", "gs", "ies", "lines", "south", "si", "u", "sets", "letters", "e", "f", "b", "ps", "ns", "ans", "new", "es", "sb", "w", "params", "l", "v", "m", "xs", "its", "words", "p"], "t": ["o", "tp", "dt", "at", "type", "k", "x", "j", "c", "d", "a", "T", "ot", "y", "test", "g", "h", "target", "ts", "tt", "u", "f", "e", "b", "pt", "w", "ta", "z", "v", "l", "m", "r", "p", "temp"], "n": ["pi", "o", "k", "x", "j", "c", "np", "d", "nb", "ny", "pos", "num", "y", "g", "u", "len", "size", "net", "f", "nt", "e", "b", "ns", "w", "z", "l", "v", "m", "r", "nc", "p", "N"], "i": ["pi", "o", "k", "x", "xi", "j", "c", "ci", "d", "a", "ie", "start", "pos", "int", "ind", "num", "ni", "bi", "id", "y", "h", "ix", "index", "si", "u", "f", "ti", "e", "I", "end", "b", "hi", "q", "ai", "z", "l", "v", "ii", "li", "m", "p"]}}
{"code": "from math import ceil\\nn, *CSF = map(int, open(0).read().split())\\nA = []\\nfor i in range(0, 3*(n-1), 3):\\n    t = 0\\n    for c, s, f in zip(CSF[i::3], CSF[i+1::3], CSF[i+2::3]):\\n        if t <= s:\\n            t = s + c\\n        else:\\n            t = ceil((t-s) / f) * f + s + c\\n    A.append(t)\\nA.append(0)\\nprint(*A, sep='\\n')", "target": "529", "substitutes": {"n": ["pi", "o", "k", "j", "ng", "d", "nb", "all", "num", "na", "g", "count", "en", "h", "nan", "nl", "number", "nu", "u", "e", "nt", "b", "ns", "none", "q", "w", "z", "l", "r", "m", "nc", "p", "ne", "N"], "CSF": ["RCF", "DKFE", "COf", "csX", "CSf", "csPF", "PSf", "COFF", "RCf", "csELF", "PSB", "CSELF", "COX", "csF", "RCB", "CPF", "PSELF", " CSPF", "CSFB", "CSB", "DKF", "COF", "RCV", "CSFE", "CSFF", "csFF", " CSf", "csFB", "CSV", " CSX", " CSELF", " CSFF", "DKFB", "CSPF", "CPf", "CPV", "PSPF", "PSFE", "csf", "CPB", "DKf", "csFE", "PSFB", "PSV", "PSF", "CSX"], "A": ["As", "NA", "S", "New", "au", "Args", "Z", "Ast", "E", "Alpha", "a", "B", "CA", "Data", "T", "All", "W", "This", "At", "Array", "Y", "array", "G", "L", "Ab", "GA", "SA", "AU", " a", "Adam", "AP", "Average", "Ar", "I", "AA", "The", "C", "AST", "Empty", "App", "V", "P", "API", "p", "K", "AF", "AB", "AC", "M", "F", "N", "LA"], "i": ["mini", "pi", "di", "o", "k", "x", "xi", "j", "gi", "ci", "d", "yi", "phi", "col", "ie", "start", "int", "ind", "ui", "bi", "id", "y", "info", "h", "ix", "index", "ip", "si", "u", "iu", "e", "I", "ti", "b", "mi", "q", "ai", "w", "z", "qi", "v", "l", "ii", "r", "li", "m", "p"], "t": ["o", "tp", "dt", "at", "k", "qt", "x", "j", "d", "a", "T", "int", "ot", "y", "test", "rt", "g", "ty", "ant", "ts", "tt", "ct", "tf", "st", "u", "e", "nt", "b", "ti", "pt", "w", "ta", "z", "v", "l", "m", "r", "p"], "c": ["o", "k", "x", "ci", "d", "col", "ac", "a", "fc", "cs", "y", "g", "h", "ct", "dc", "u", "e", "b", "ca", "C", "q", "w", "z", "cr", "v", "lc", "l", "r", "m", "conf", "nc", "cf", "p"], "s": ["sec", "ls", "o", "tp", "fs", "S", "su", "x", "sp", "d", "a", "start", "ss", "sl", "space", "cs", "y", "g", "h", "ts", "ds", "tf", "st", "sf", "si", "u", "sets", "e", "b", "ps", "ns", "es", "w", "sv", "z", "v", "l", "sg", "m", "r", "se", "p"], "f": ["o", "fs", "k", "x", "j", "d", "a", "fc", "F", "rf", "y", "fe", "g", "h", "ct", "tf", "sf", "u", "e", "b", "inf", "q", "w", "frac", "z", "v", "l", "r", "m", "cf", "p"]}}
{"code": "n=int(input())\\n\\nans=divmod(n,2)\\nA=ans[0]+ans[1]\\n\\nprint(A)", "target": "748", "substitutes": {"n": ["NA", "o", "k", "x", "c", "np", "d", "node", "nb", "a", "Ns", "pos", "an", "num", "s", "non", "i", "y", "na", "nan", "nn", "number", "len", "f", "max", "b", "ns", "nor", "l", "m", "r", "nc", "p", "N"], "ans": ["NA", "x", "anned", "nas", "ins", "a", "ants", "Ns", "amps", "args", "an", "s", "anc", "ats", "cs", "alpha", "anon", "na", "en", "nn", "An", "nan", "span", "can", "AN", "atan", "aned", "anne", "ANS", "ann", "ns", "ane", "scan", "Na", "ani", "mean", "p", "ons", "N"], "A": ["As", "NA", "D", "Ann", "S", "New", "Ast", "Alpha", "a", "Ak", "B", "CA", "T", "Array", "Y", "an", "G", "AD", "Am", "Ab", "AS", "AU", "An", "AP", "Ar", "AN", "Sam", "I", "AA", "Ang", "C", "P", "K", "API", "H", "M", "AC", "N", "LA"]}}
{"code": "from collections import Counter\\n\\nclass UnionFind:\\n    #n\u500b\u306e\u8981\u7d20\u3092\u521d\u671f\u5316\\n    def __init__(self, n):\\n        self.n = n\\n        self.par = [i for i in range(n)]\\n        self.rank = [0] * n\\n    \\n    #\u6728\u306e\u6839\u3092\u6c42\u3081\u308b\\n    def find(self, x):\\n        if self.par[x] == x:\\n            return x\\n        else:\\n            self.par[x] = self.find(self.par[x])\\n            return self.par[x]\\n    \\n    #x\u3068y\u306e\u5c5e\u3059\u308b\u96c6\u5408\u3092\u4f75\u5408\\n    def unite(self, x, y):\\n        x = self.find(x)\\n        y = self.find(y)\\n        if x == y:\\n            return\\n        if self.rank[x] < self.rank[y]:\\n            self.par[x] = y\\n        else:\\n            self.par[y] = x\\n            if self.rank[x] == self.rank[y]:\\n                self.rank[x] += 1\\n    \\n    #x\u3068y\u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u5224\u5b9a\\n    def same(self, x, y):\\n        return self.find(x) == self.find(y)\\n\\n    #\u8981\u7d20x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3059\u308b\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\\n    def members(self, x):\\n        root = self.find(x)\\n        return [i for i in range(self.n) if self.find(i) == root]\\n\\n\\nN, K, L = map(int, input().split())\\nroads = [list(map(int, input().split())) for i in range(K)]\\ntrains = [list(map(int, input().split())) for i in range(L)]\\n\\nuf_road = UnionFind(N)\\nuf_train = UnionFind(N)\\n\\nfor road in roads:\\n    x, y = road\\n    uf_road.unite(x-1, y-1)\\n\\nfor train in trains:\\n    x, y = train\\n    uf_train.unite(x-1, y-1)\\n\\npairs = []\\nfor i in range(N):\\n    pairs.append((uf_road.find(i), uf_train.find(i)))\\n\\ncnt = Counter(pairs)\\n\\nans = [cnt[pair] for pair in pairs]\\nprint(*ans)", "target": "21", "substitutes": {}}
{"code": "x = input()\\nif x == 'a' or x =='e' or x == 'i' or x =='o' or x =='u':\\n    print('vowel')\\nelse:\\n    print('consonant')", "target": "120", "substitutes": {"x": ["k", "xp", "xi", "px", "c", "ci", "xy", "lex", "int", "ux", "ww", "xb", "fix", "s", " xx", "t", "i", "y", "tx", "xxx", "xa", "gy", "ax", "xt", "exc", "xe", "rx", "ct", "h", "rax", "fx", "ix", " xp", "st", "bit", "ex", "xc", "u", "f", "e", "dx", "b", "X", "xx", "xes", "wx", "w", "z", "rex", "v", "l", "m", "xs", "p", "pe", " tx"]}}
{"code": "R=int(input())\\nG=int(input())\\na=abs(R-G)\\nif G>R:\\n    print(max(R,G)+a)\\nelse:\\n    print(min(R,G)-a)", "target": "524", "substitutes": {"R": ["U", "GR", "D", "S", "Rs", "Re", "RW", "JR", "HR", "RS", "E", "RF", "RR", "B", "RH", "T", "WR", "Rh", "W", "Y", "A", "L", "SR", "Run", "RO", "g", "RM", " r", "RP", "RA", "Q", "ER", "X", "Gr", "C", "NR", "V", "P", "CR", "RT", "Rap", "r", "H", "M", "F", "N", "RG"], "G": ["GW", "U", "GR", "D", "GS", "S", "RW", "E", "UG", "REG", "GG", "B", "IG", "RH", "Ge", "GC", "W", "J", "Y", "A", "L", "GE", "GU", "Ga", "g", "GA", "General", "GT", "GP", "RA", "GV", "GB", "Q", "GH", "LG", "I", "X", "Gr", "Group", "C", "NG", "GF", "V", "P", "Gu", "Gs", "H", "M", "EG", "F", "N", "RG"], "a": ["ma", "area", "access", "at", "ha", "c", "aw", "ab", "ac", "wa", "af", "pa", "mA", "da", "ata", "an", "valid", "A", "aug", "alpha", "na", "g", "sa", "offset", "ia", "span", "aa", "la", "u", "va", "f", "e", "am", "ad", "ca", "ga", "ai", "ae", "ba", "l", "ea", "aj", "adjust", "p", "au"]}}
{"code": "# n, m, l = map(int, input().split())\\n\\n# list_n = list(map(int, input().split()))\\n\\n# n = input()\\n# list = [input() for i in range(N)\\n\\n# list = [[i for i in range(N)] for _ in range(M)]\\n\\nimport sys\\ninput = sys.stdin.readline\\n\\nN, M, X = map(int, input().split())\\nlist_A = list(map(int, input().split()))\\nl = 0\\nr = 0\\n\\nfor A in list_A:\\n    if A < X:\\n        l += 1\\n    else:\\n        r += 1\\n\\nprint(min(l, r))\\n", "target": "660", "substitutes": {}}
{"code": "import sys\\nimport itertools\\nsys.setrecursionlimit(1000000000)\\nfrom heapq import heapify,heappop,heappush,heappushpop\\nimport math\\nimport collections\\nimport copy\\n\\nn = int(input())\\ndp = [0]*(1000001)\\ndp[0] = 1\\ndp[1] = 1\\nfor i in range(2,n+1):\\n    dp[i] = dp[i-1] + dp[i-2]\\nprint(dp[n])\\n", "target": "152", "substitutes": {"n": ["pi", " m", "o", "k", "out", "x", " d", "j", " len", "c", "d", " N", "nb", " p", "num", "ini", "t", "ni", "y", " nu", "count", "g", "h", "network", " ns", "number", " index", " c", "u", " ni", "nt", "f", "fn", "b", "e", "ns", "sn", " count", " num", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "dp": ["wp", "lp", "pi", "tp", "type", "dt", "di", "df", "grade", "dos", "pid", "pb", "pg", "db", "sp", "np", "d", "port", "point", "pair", "data", " p", "pos", "direction", "amp", "hp", "DP", "config", "pkg", "gap", "dim", "ds", "cp", "dr", "dc", "ip", "source", "number", "projects", "address", "pp", "shape", " DP", "dl", "drop", "P", "dm", "params", "patch", "length", "deb", "dump", "dist", "dat", "p", "gp", "fp"], "i": ["pi", "o", "k", "x", "j", "gi", "c", "ci", "d", "phi", "nb", " ii", "a", "ie", "start", "int", "ind", "ini", "ui", "t", "id", "y", "h", "inn", "ix", "index", "ip", "si", "u", "iu", "e", "I", "f", "end", "b", "mi", "ai", "z", "qi", "l", "v", "ii", "li", "m", "p"]}}
{"code": "N,A,B = map(int,input().split())\\na = N//(A+B)\\nb = N%(A+B)\\nif b>A:\\n    print(a*A+A)\\nelse:\\n    print(a*A+b)", "target": "716", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "E", "Ns", "T", "n", "W", "Y", "L", "G", "NM", " n", "NN", "Q", "I", "X", "C", "Ne", "V", "P", "K", "API", "NP", "O", "H", "M", "F", "Z"], "A": ["Ac", "U", "As", "NA", "Ca", "AR", "D", "S", "Z", "E", "Alpha", "CA", "BB", "T", "PA", "W", "mA", "n", "At", "Array", "Y", "Az", "G", "AM", "L", "Am", "Ab", "alpha", "HA", "Ma", "Address", "AI", "An", "EA", "TA", "Area", "AP", "Q", "Ar", "I", "AA", "X", "C", "Na", "P", "K", "AH", "API", "AB", "O", "AC", "M", "H", "F", "LA"], "B": ["U", "D", "BF", "R", "E", "LB", "BB", "T", "W", "Y", "L", "G", "Ab", "BA", "OB", "Q", "Bs", "WB", "I", "AA", "X", "C", "SB", "V", "P", "AB", "O", "H", "M", "F"], "a": ["area", "auto", "x", "c", "d", "ac", "ab", "af", "n", "mA", "da", "an", "fa", "i", "y", "alpha", "sa", "aa", "f", "AA", "am", "ad", "ca", "ga", "ai", "ae", "w", "asa", "ba", "aj", "bb", "p"], "b": ["x", "c", "d", "nb", "ab", "ac", "BB", "bd", "n", "rb", "bi", "i", "y", "NB", "bs", "g", "fb", "h", "ib", "beta", "bin", "aa", "wb", "u", "lb", "e", "f", "AA", "ad", "base", "sb", "be", "ba", "AB", "v", "bb", "r", "p"]}}
{"code": "#/usr/bin/env python\\nfrom functools import *\\nfrom math import *\\n\\nn = int(input())\\na = list(map(int, input().split()))\\n\\ngcds = []\\nlgcd = []\\nrgcd = [0 for _ in range(n)]\\nl = r = 0 \\nfor i in range(n):\\n    if i == 0:\\n        l = 0 \\n    else:\\n        l = gcd(l, a[i-1])\\n    lgcd.append(l)\\n\\nfor i in range(n):\\n    if i == 0:\\n        r = 0 \\n        rgcd[n-1] = r \\n    else:\\n        r = gcd(r, a[n-i])\\n        rgcd[n-i-1] = r \\n\\nfor i in range(n):\\n    g = gcd(lgcd[i], rgcd[i])\\n    gcds.append(g)\\n\\nprint(max(gcds))\\n", "target": "94", "substitutes": {}}
{"code": "s = input()\\nl = len(s)\\n\\ndef check(a):\\n  n = len(a)\\n  if n % 2 == 0:\\n    for i in range(n//2):\\n      if a[i] != a[n-i-1]:\\n        return False\\n    return True\\n  else:\\n    for i in range((n-1)//2):\\n      if a[i] != a[n-i-1]:\\n        return False\\n    return True\\n\\nres = \"No\"\\nif check(s):\\n  #print(s)\\n  if check(s[:(l-1)//2]):\\n    if check(s[(l+3)//2 - 1:]):\\n      res = \"Yes\"\\n\\nprint(res)", "target": "420", "substitutes": {"s": ["states", "parts", "o", "ls", "S", "ssl", "input", "c", "results", "d", "ses", "ss", "opens", "args", "an", "space", "t", "strings", "y", "g", "sa", "sections", "h", "self", "lines", "south", "si", "u", "e", "f", "b", "ns", "es", "tests", "sb", "w", "v", "less", "m", "r", "p"], "l": ["el", "lp", "ls", "o", "ol", "le", "lf", "j", "c", "ul", "left", "kl", "fl", "ell", "ll", "L", "nl", "len", "f", "b", "dl", "lc", "v", "li", "m", "ln", "p"], "a": ["area", "access", "auto", "x", "input", "c", "ar", "ab", "ac", "app", "aux", "args", "ata", "an", "array", "A", "all", "missing", "y", "alpha", "na", "sa", "ana", "aa", "la", "u", "va", "f", "b", "am", "ca", "ad", "ga", "ai", "w", "ae", "z", "ba", "v", "aj", "m", "acs", "another", "p"], "n": ["o", "k", "x", "j", "c", "d", "nb", "all", "num", "an", "t", "non", "ni", "y", "na", "g", "en", "h", "network", "nn", "nu", "u", "len", "net", "size", "e", "f", "nt", "fn", "b", "rn", "ns", "pn", "sn", "no", "w", "z", "v", "m", "r", "nc", "ln", "p", "nin", "ne", "N"], "i": ["pi", "o", "k", "x", "xi", "j", "c", "ci", "d", "oi", "ie", "start", "int", "ind", "ini", "ui", "t", "ni", "id", "iq", "y", "isi", "index", "ip", "multi", "si", "u", "iu", "e", "I", "f", "one", "b", "ti", "ai", "w", "z", "p", "qi", "chi", "v", "ii", "li", "ei", "io"], "res": ["rs", "err", "results", " cr", "re", " resp", "RES", " sol", "Res", "result", "id", "os", "ack", " cs", " desc", " rs", "ms", "pres", " r", "rep", " exp", "ps", "resp", " Res", " succ", "r", " results", "cl"]}}
{"code": "x = input()\\nx=x.split()\\nx.sort()\\n\\n\\nif x == ['5','5','7']:\\n    print('YES')\\nelse:\\n    print('NO')", "target": "45", "substitutes": {"x": ["xp", "xi", "input", "work", "c", "px", "xy", "data", "n", "s", "t", "i", "y", "tx", "test", "key", "python", "xxx", "xa", "val", "ax", "h", "xe", "xt", "rx", "word", "ix", "index", "ex", "u", "f", "e", "b", "X", "xx", "code", "xf", "xes", "wx", "q", "w", "content", "z", "l", "cross", "v", "r", "xs", "m", "text", "p", "temp", "pe"]}}
{"code": "S = input()\\n\\nprint(S.replace('2017', '2018'))\\n", "target": "49", "substitutes": {"S": ["U", "SH", "D", "New", "SS", "R", "NS", "Sample", "B", "T", "W", "SI", "s", "Source", "A", "G", "L", "SR", "Part", "DS", "SA", "I", "SU", "C", "SB", "DATA", "Send", "V", "Output", "P", "Session", "SP", "Service", "O", "H", "M", "F", "N", "Submit"]}}
{"code": "number=list(map(int,input().split()))\\nN,M,K=number[0],number[1],number[2]\\nA=list(map(int,input().split()))\\nB=list(map(int,input().split()))\\na=[0]\\nb=[0]\\nfor i in range(1,len(A)+1):\\n    tmp=a[i-1]+A[i-1]\\n    a.append(tmp)\\n    \\nfor i in range(1,len(B)+1):\\n    tmp=b[i-1]+B[i-1]\\n    b.append(tmp)\\n\\nans=0\\nj=M\\nfor i in range(N+1):\\n    if a[i]>K:\\n        break\\n    while b[j]>K-a[i]:\\n        j-=1\\n    ans=max(ans,i+j)\\n\\nprint(ans)\\n", "target": "244", "substitutes": {"number": ["note", "o", "numbered", "part", "string", "work", "x", "object", "reference", "E", "node", "nb", "sum", "name", "data", "value", "mult", "BB", "T", "int", "n", "num", "an", "total", "zero", "count", "date", "version", "change", "network", "word", "month", "span", "digit", "source", "phone", "error", "umber", "message", "AN", "BER", "address", "one", "Number", "C", "no", "power", "position", "P", "length", "m", "O", "group", "block"], "N": ["U", "D", "S", "R", "NS", "E", "T", "n", "J", "W", "Y", "L", "G", "Num", "NM", "Size", "MN", "No", "Q", "I", "Number", "X", "NO", "C", "Ne", "V", "P", "O", "H", "F", "Z"], "M": ["U", "D", "S", "R", "E", "T", "W", "J", "n", "Y", "L", "G", "MN", "Q", "I", "X", "C", "V", "P", "m", "O", "H", "F", "Z"], "K": ["U", "NA", "KR", "D", "k", "S", "R", "SK", "E", "Ak", "T", "KE", "W", "J", "n", "Y", "G", "L", "KK", "Q", "I", "X", "C", "V", "P", "Sk", "KS", "O", "H", "F", "km", "Z"], "A": ["As", "U", "Ca", "NA", "S", "Alpha", "CA", "IA", "This", "mA", "an", "Y", "AD", "AM", "Am", "alpha", "Ab", "HA", "Ma", "GA", "Ad", "An", "AP", "Ar", "Ha", "AN", "AV", "I", "AA", "am", "X", "C", "Na", "P", "API", "AF", "H", "LA", "F", "AC", "Input", "au"], "B": ["U", "EB", "D", "BS", "BF", "BM", "Be", "R", "E", "LB", "BB", "T", "UB", "TB", "BBC", "BE", "Y", "L", "G", "NB", "BA", "PB", "VB", "BI", "OB", "GB", "Bs", "DB", "WB", "CB", "I", "FB", "SB", "C", "Block", "MB", "V", "P", "BT", "BC", "AB", "O", "H", "F"], "a": ["ma", "area", "o", "sta", "x", "c", "aw", "ar", "ak", "ama", "ac", "ab", "art", "af", "n", "da", "an", "fa", "y", "api", "alpha", "na", "sa", "ana", "ia", "aa", "la", "u", "va", "oa", "f", "am", "ad", "ca", "ga", "ai", "ae", "w", "asa", "aaa", "ba", "z", "ao", "aj", "m", "ap", "p", "au"], "b": ["o", "eb", "k", "mb", "abb", "bt", "pb", "db", "c", "d", "ob", "cb", "nb", "ab", "bh", "bc", "bd", "n", "rb", "bi", "y", "bs", "g", "fb", "ib", "wb", "lb", "u", "f", "base", "sb", "be", "z", "ba", "l", "v", "m", "bf", "bb", "p"], "i": ["mini", "pi", "di", "o", "uri", "ji", "k", "x", "xi", "gi", "c", "ci", "slice", "oi", "phi", "ie", "ori", "cli", "int", "ind", "n", "ui", "ini", "ni", "bi", "id", "y", "info", "api", "qa", "ix", "source", "ip", "multi", "eni", "si", "u", "iu", "f", "I", "ti", "e", "my", "mi", "ki", "ai", "z", "p", "qi", "v", "l", "ii", "li", "m", "io"], "tmp": ["tp", "part", "loc", "abb", "kk", "bt", "sp", "np", "tc", "cb", "nb", "img", "output", "data", "mult", "ff", "mk", "xb", "TB", "amp", "t", "rb", "buf", "space", "result", "test", "config", "alpha", "proc", "cmp", "front", "fb", "cp", "md", "next", "pad", "fake", "beta", "bag", "wb", "mp", "max", "obj", "pot", "stuff", "sup", "sb", "bb", "txt", "sam", "p", "temp", "bp"], "ans": ["offs", "ls", "Ann", "anus", "san", "anned", "nas", "ins", "aos", "ants", "amps", "ens", "photos", "an", "s", "anc", "man", " means", "asts", "cs", "anon", "sk", "na", "os", "anas", "plan", "ms", "ds", "gan", "ks", " ann", "An", "nn", "span", "ana", "can", "cons", "nan", "anes", "la", "AN", "cas", "aned", "leans", "atan", "ANS", "anne", "ann", "lan", "ns", "ane", "ki", "Na", "no", "ani", "ai", "ano", "mean", " scans", "eps", "ln", "aus", "ons"], "j": ["kj", "o", " J", "ji", "part", "js", "k", "x", "xi", "c", "ci", "d", "ie", "ori", "ind", "n", "J", "uj", "s", "ni", "y", "key", "g", "ij", "jl", "jo", "si", "u", "ja", "f", "e", "obj", "I", "jj", "adj", "ai", "ani", "z", "l", "jp", "aj", "v", "m", "li", "r", "ii", "p", "vi"]}}
{"code": "def DFS(N,X):\\n    if N==0:return 0 if X<=0 else 1\\n    elif X<=1+B[N-1]:\\n        return DFS(N-1,X-1)\\n    else:\\n        return P[N-1]+1+DFS(N-1,X-2-B[N-1])\\n\\n\\nn,x=map(int,input().split())\\nB,P=[1],[1]\\n\\nfor i in range(n):\\n    P.append(P[i]*2+1)\\n    B.append(B[i]*2+3)\\n\\nprint(DFS(n,x))", "target": "485", "substitutes": {"N": ["ND", "U", "Node", "NA", "D", "S", "CN", "Network", "GN", "R", "NS", "E", "NE", "Ns", "T", "J", "Sn", "Y", "A", "L", "G", "Wh", "Part", "Num", "IN", "Len", "SN", "Ni", "NT", "Size", "No", "MN", "Q", "Model", "Count", "I", "Number", "State", "Group", "C", "Ne", "V", "OS", "K", "O", "M", "ON", "F", "Name", "Class", "Z"], "X": ["U", "Node", "D", "S", "Max", "CL", "E", "XX", "T", "W", "J", "Y", "A", "L", "DX", "IP", "Ex", "Q", "WH", "I", "XY", "C", "PE", "XL", "TX", "V", "ML", "XP", "K", "ID", "FF", "EX", "O", "XXX", "H", "IX", "M", "F", "Z"], "n": ["o", "cn", "k", "j", "c", "d", "ng", "nb", "node", "name", "pos", "num", "y", "count", "network", "nn", "index", "nu", "number", "u", "size", "nt", "f", "e", "b", "ns", "C", "sn", "no", "z", "l", "v", "m", "nc", "p", "ne"], "x": ["xp", "xi", "j", "c", "ci", "d", "XX", "pos", "int", "t", "y", "xml", "xxx", "ax", "xt", "xxxx", "sex", "rx", "xe", "ix", "index", "ex", "xc", "f", "e", "dx", "b", "xx", "xf", "xes", "z", "v", "l", "m", "xs", "r", "p"], "B": ["U", "Base", " b", "D", "S", "BS", "BF", "R", "Pl", "E", "LB", "BB", "T", "UB", "W", "TB", "Y", "L", "G", "NB", "BA", "PB", "BI", "OB", "GB", "Bs", "Q", "BL", "DB", "WB", "CB", "I", "b", "SB", "C", "BG", "MB", "V", "K", "BC", "AB", "O", "H", "M", "F", "Beta"], "P": ["PL", "U", "PU", "D", "S", "Py", "R", "Pl", "E", "TP", "Point", "PO", " p", "PF", "T", "PA", "PD", "Y", "A", "L", "G", "Part", "LP", "PB", "IP", "RP", "PN", "PS", "AP", "Q", "PK", "I", "C", "Ps", "PP", "PE", "V", "CP", "BP", "p", "K", "NP", "O", "M", "F"], "i": ["mini", "pi", "di", "uri", "k", "j", "gi", "c", "ci", "d", "yi", "ri", "io", "ie", "start", "pos", "int", "ind", "ini", "ui", "bi", "id", "info", "y", "uni", "h", "ix", "index", "ip", "bit", "multi", "eni", "si", "u", "iu", "fi", "f", "I", "e", "end", "ti", "b", "mi", "my", "ai", "z", "chi", "l", "ii", "p"]}}
{"code": "n,k,q = map(int,input().split())\\na = [int(input()) for i in range(q)]\\nb = [0 for i in range(n)]\\n\\nfor i in range(q):\\n    num_ans_person = a[i]-1\\n    b[num_ans_person] += 1\\n\\nfor i in range(n):\\n    if k-q+b[i]>0:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")", "target": "336", "substitutes": {"n": ["o", "x", "j", "c", "np", "d", "name", "num", "an", "s", "t", "y", "na", "nan", "u", "f", "e", "nt", "ns", "sn", "w", "z", "qi", "v", "l", "m", "p", "ne", "N"], "k": ["o", "ke", "x", "j", "c", "d", "ak", "ch", "id", "y", "sk", "g", "h", "ok", "ks", "u", "f", "e", "end", "w", "kw", "z", "K", "v", "m", "r", "p", "km"], "q": ["o", "x", "j", "c", "d", "question", "int", "qs", "quant", "num", "id", "y", "quality", "g", "qa", "h", "query", "Q", "sq", "eq", "u", "e", "f", "qq", "w", "z", "qi", "v", "l", "m", "p", "qu", "dq", "count"], "a": ["area", "o", "x", "c", "ar", "ac", "ab", "da", "s", "array", "A", "y", "alpha", "na", "sa", "ia", "aa", "u", "va", "f", "am", "ca", "ad", "ai", "ae", "ba", "l", "ea", "aj", "m", "p", " A", "au"], "i": ["pi", "it", "o", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "oi", "io", "ie", "int", "ind", "ui", "ni", "bi", "id", "y", "g", "ix", "index", "ip", "eni", "si", "u", "iu", "e", "ti", "I", "f", "mi", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "ei", "m", "r", "p"], "b": ["o", "eb", "x", "j", "c", "db", "d", "ob", "nb", "cb", "ab", "B", "bd", "bis", "s", "rb", "bi", "y", "bs", "g", "fb", "aa", "wb", "lb", "u", "f", "e", "sb", "w", "ba", "l", "v", "bb", "bf", "r", "p"], "num_ans_person": ["num_an_woman", "num_ans_member", "num_ans_span", "num_ans_woman", "num_an_member", "num_an_people", "num_an_span", "num_ans_people", "num_an_person"]}}
{"code": "N = int(input())\\n\\nfor i in range(1,N+1):\\n    if i*(i+1) >= 2*N:\\n        n = i\\n        break\\n\\nfor j in range(1,n+1):\\n    if j == ((i*(i+1)//2)-N):\\n        continue\\n    print(j)", "target": "389", "substitutes": {"N": ["NA", "D", "S", "GN", "R", "NS", "E", "NE", "B", "Ns", "T", "J", "W", "Y", "Ni", "L", "G", "Len", "Num", "NT", "NM", "Size", "NN", "PN", "No", "MN", "Q", "Length", "I", "X", "ns", "C", "NI", "Ne", "RN", "V", "P", "K", "O", "H", "M", "F", "Z"], "i": ["ik", "pi", "di", "ji", "k", "x", "xi", "gi", "c", "ci", "d", "yi", "phi", "a", "io", "ie", "ori", "int", "ind", "ini", "ui", "ni", "bi", "id", "y", "index", "ip", "si", "u", "iu", "f", "I", "ti", "e", "b", "mi", "hi", "im", "ai", "z", "chi", "qi", "v", "l", "ii", "li", "m", "p"], "n": ["o", "k", "x", "c", "d", "nb", "Ns", "num", "t", "L", "ni", "y", "network", "nn", "nu", "net", "e", "f", "nt", "b", "ns", "pn", "C", "Ne", "no", "w", "z", "l", "m", "nc", "p", "ne"], "j": ["kj", "ji", "o", "k", "x", "d", "jc", "jon", "ie", "oj", "J", "jit", "ni", "bi", "y", "key", "ij", "bj", "job", "jl", "next", "jo", "ja", "e", "I", "obj", "adj", "b", "jj", "f", "jump", "dj", "z", "json", "v", "jp", "jam", "aj", "li", "ii", "l", "p", "uj"]}}
{"code": "print \"\\n\".join(map(str, sorted([int(raw_input()) for i in range(10)], reverse=True)[:3]))", "target": "550", "substitutes": {"i": ["o", "k", "x", "xi", "j", "gi", "c", "d", "io", "ie", "pos", "ind", "n", "id", "y", "h", "index", "ip", "u", "iu", "f", "ti", "I", "e", "im", "ai", "v", "l", "p"]}}
{"code": "rule=input().split()\\nK=int(rule[0])\\nX=int(rule[1])\\nif 500*K>=X:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "299", "substitutes": {"rule": ["unit", "file", "ner", "part", "grade", "case", "element", "page", "argument", "event", "Rule", "rol", "cle", "section", "start", "trial", "user", "ULE", "rules", "range", "ride", "test", "key", "split", "check", "url", "date", "word", "header", "line", "number", "row", "model", "item", "token", "route", "role", "rl", "match", "filter", "state", "ule", "style", "comment", "se", "pe", "group", "block", "letter", "call"], "K": ["U", "D", "k", "IK", "R", "E", "SK", "B", "T", "J", "Y", "G", "L", "KK", "HK", "Q", "PK", "I", "C", "VK", "V", "P", "CP", "KS", "O", "H", "M", "F", "N", "Z"], "X": ["U", "D", "S", "CL", "x", "R", "E", "XX", "W", "J", "Y", "OK", "L", "G", "Check", "Q", "Work", "I", "C", "XL", "TX", "V", "P", "XP", "ID", "MX", "O", "XXX", "H", "M", "F", "N", "Z"]}}
{"code": "n, m = map(int, input().split())\\nans = 1\\n\\nif abs(n - m) > 1:\\n    print(0)\\n    exit()\\n\\nfor i in range(1, n + 1):\\n    ans = ans*i%(10**9 + 7)\\n\\nfor i in range(1, m + 1):\\n    ans = ans*i%(10**9 + 7)\\n\\nif (n + m)%2 == 0:\\n    ans = ans*2%(10**9 + 7)\\n\\nprint(ans)", "target": "162", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "d", "nb", "ny", "s", "num", "t", "y", "mn", "g", "en", "h", "network", "nn", "un", "nu", "u", "net", "f", "e", "nt", "b", "ns", "pn", "no", "w", "z", "l", "v", "nc", "ln", "p", "ne", "N"], "m": ["wm", "mc", "k", "x", "j", "tm", "c", "fm", "gm", "d", "nm", "num", "an", "s", "mr", "man", "y", "mn", "g", "h", "ym", "cm", "bm", "u", "f", "e", "b", "mi", "sm", "mm", "q", "w", "z", "dm", "l", "v", "hm", "r", "M", "p", "km"], "ans": ["offs", "ls", "cus", "atts", "ras", "nas", "ins", "reads", "a", "ars", "ss", "ants", "amps", "ens", "an", "ads", "s", " means", "ats", "cs", "oss", "ians", "ents", "anon", "sk", "ams", "na", "os", "anas", "plan", "ds", "ks", "nn", "ana", "ips", "nan", "can", "span", "cons", "ids", "AN", "cas", "aned", "atan", "leans", "ANS", "ann", "lan", "ns", "ani", "aces", "ays", "mean", "ares", "eps", "aus", "ons"], "i": ["pi", "di", "o", "it", "x", "xi", "j", "c", "ci", "d", "a", "io", "start", "int", "ind", "s", "ini", "ui", "t", "ni", "bi", "id", "y", "index", "ip", "si", "u", "iu", "e", "I", "f", "b", "mi", "im", "ai", "q", "z", "l", "v", "ii", "li", "p"]}}
{"code": "r=0\\na,b=map(int,input().split())\\nL=list(map(int,input().split()))\\nfor i in range(a):\\n  if L[i]>=b:\\n    r+=1\\nprint(r)", "target": "494", "substitutes": {"r": ["rs", "o", "k", "err", "x", "c", "er", "R", "d", "ar", "ro", "n", "re", "s", "var", "rh", "t", "range", "mr", "rb", "result", "rc", "rt", "g", "rg", "h", "lr", "error", "radius", "nr", "u", "e", "f", "rl", "rr", "rev", "res", "w", "l", "v", "m", "right", "ru", "p", "rank", "sr"], "a": ["area", "sta", "input", "x", "c", "ar", "ab", "ac", "wa", "n", "da", "an", "A", "y", "alpha", "g", "sa", "div", "h", "index", "la", "aa", "u", "va", "f", "ad", "ca", "w", "aaa", "z", "v", "ea", "aj", "p", " A", "au"], "b": ["o", "k", "mb", "x", "j", "c", "d", "nb", "ab", "B", "n", "s", "rb", "A", "y", "bs", "fb", "h", "beta", "wb", "u", "lb", "e", "f", "base", " B", "limit", "be", "z", "l", "v", "bf", "bb", "p"], "L": ["U", "LM", "D", "S", "R", "E", "LB", "NL", "LR", "B", "List", "T", "W", "list", "A", "G", "IL", "LE", " l", "Q", "LT", "I", "X", " B", "C", "XL", "LL", "V", "P", "l", "DL", "O", "H", "M", "LA", "F", "N", "Z"], "i": ["pi", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "io", "start", "int", "ind", "n", "bi", "id", "y", "h", "index", "ip", "si", "u", "iu", "pp", "e", "f", "I", "end", "ai", "z", "l", "v", "ii", "li", "ih", "p", "vi"]}}
{"code": "n,ans = int(input()),0\\nif not n%2:\\n    for i in range(1,30):\\n        ans+=n//(5**i*2)\\nprint(ans)", "target": "211", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "d", "nb", "a", "Ns", "an", "s", "num", "ni", "y", "mn", "nw", "na", "en", "nan", "nn", "span", "unn", "u", "anne", "nt", "rn", "e", "f", "b", "ns", "pn", "none", "sn", "no", "init", "nat", "w", "l", "gn", "v", "m", "r", "nc", "ln", "p", "ne", "N"], "ans": ["offs", "x", "aning", "nas", "ras", "ins", "a", "ars", "ants", "amps", "ens", "an", "anc", "ops", "ats", "cs", "ents", "ians", "anon", "na", "os", "anas", "ds", "ks", "ana", "nan", "span", "can", "anes", "cons", "AN", "atan", "aned", "leans", "cas", "ANS", "ann", "lan", "ns", "ane", "ands", "ends", "es", "cross", "ines", "aus", "ons"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "ri", "a", "ie", "start", "int", "ind", "num", "ini", "ni", "bi", "id", "si", "u", "iu", "e", "I", "f", "mi", "q", "ai", "z", "p", "chi", "v", "l", "ii", "li", "m", "ei"]}}
{"code": "n=int(input())\\ncnt=0\\nif n %2==0:\\n  print(n//2 -1)\\nelse:print(n//2)", "target": "522", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "d", "nm", "node", "nb", "pos", "num", "s", "non", "t", "i", "mn", "na", "count", "g", "nn", "nan", "un", "number", "nr", "u", "len", "net", "f", "fn", "nt", "e", "b", "ns", "pn", "none", "sn", "no", "z", "dn", "l", "v", "length", "m", "r", "nc", "ln", "p", "ne", "N", "conn"], "cnt": ["ncwd", "ncnt", "ncNT", " count", "ncount", "Count", " cwd", "CNT", "cwd", "Cnt", "cNT", "Cwd", " cNT", "count"]}}
{"code": "s = input()\\nans = {\"Sunny\" : \"Cloudy\", \"Cloudy\" : \"Rainy\", \"Rainy\" : \"Sunny\"}\\nprint(ans[s])", "target": "183", "substitutes": {"s": ["services", "parts", "string", "ls", "js", "S", "k", "sync", "x", "c", "d", "local", "n", "abs", "args", "t", "i", "cs", "g", "h", "your", "ts", "self", "span", "gs", "south", "spec", "e", "f", "sym", "b", "ns", "new", "es", "sb", "w", "v", "m", "r", "p"], "ans": ["ls", "news", "ass", "san", "nas", "aos", "ars", "ants", "amps", "photos", "anners", "an", "anc", " means", "ats", "ents", "anon", "ams", "sk", "na", "anas", "idents", "aus", "ana", "An", "can", "anes", "AN", "atan", "leans", "aned", "ANS", "ann", "ns", "ane", "scan", "ani", "ays", "xs", "sky", "ons"]}}
{"code": "def main(): \\n    n = int(input())\\n    A = list(map(int,input().split()))\\n\\n    ans = n\\n    A.sort()\\n    table = [True]*(A[-1]+1)\\n    for k,a in enumerate(A):\\n        if table[a]:\\n            if k+1<n and A[k+1]==a:\\n                ans-=1\\n            for i in range(a,A[-1]+1,a):\\n                table[i] = False\\n        else:\\n            ans-=1\\n    \\n    print(ans)\\nmain()", "target": "268", "substitutes": {"n": ["NA", "o", "x", "c", "aw", "np", "d", "nb", "ac", "Ns", "num", "an", "t", "na", "g", "count", "en", "min", "nn", "nan", "span", "number", "nr", "u", "len", "nt", "f", "e", "max", "b", "ad", "ns", "sn", "no", "w", "z", "l", "m", "r", "nc", "ln", "p", "ne", "N"], "A": ["As", "U", "NA", "D", "S", "au", "Args", "E", "Alpha", "B", "CA", "All", "T", "mA", "At", "an", "Y", "Array", "G", "L", "AM", "array", "AS", "alpha", "GA", "An", "TA", "AP", "Average", "Ar", "Ha", "AN", "I", "AA", "am", "Ang", "X", "C", "MA", "Na", "AST", "V", "P", "K", "AF", "API", "Parts", "O", "H", "M", "AC", "F", "N", "LA"], "ans": ["NA", "x", "results", "nas", "ins", "ases", "aos", "olds", "atten", "ants", "aid", "amps", "inas", "args", "an", "list", "s", "array", "Array", "ats", "asts", "cs", "actions", "ents", "anon", "ams", "sk", "annot", "na", "os", "sa", "anas", "ds", "gan", "ks", "ana", "nan", "An", "nn", "span", "can", "arts", "AN", "atan", "aned", "leans", "ANS", "ann", "am", "ns", "lan", "scan", "ands", "Na", "errors", "features", "ai", "aces", "ano", "ays", "annels", "params", "ains", "ace", "xs", "eps", "aus", "ons"], "table": ["part", "interface", "this", "trace", "port", "feature", "scale", "nb", "ac", "section", "app", "Table", "int", "print", "instance", "all", "Array", "list", "array", "cache", "range", "t", "config", "TABLE", "test", "result", "map", "transform", "query", "index", "span", "union", "can", "error", "batch", "row", "number", "address", "e", "AA", "b", "stable", "code", "scan", "store", "flat", "conf", "m", "ace", "block", "count"], "k": ["ik", "o", "kn", "x", "kk", "j", "c", "d", "ak", "ijk", "ac", "ck", "ek", "an", "anc", "id", "key", "sk", "g", "unk", "ok", "kid", "ks", "uk", "ko", "kin", "u", "f", "e", "ask", "ad", "b", "ki", "q", "ai", "w", "K", "v", "m", "r", "p", "ku"], "a": ["ma", "x", "j", "c", "ar", "d", "ak", "ac", "art", "af", "an", "s", "fa", "y", "alpha", "sk", "na", "sa", "ax", "ana", "nan", "ia", "aa", "la", "u", "oa", "e", "f", "b", "ad", "am", "ca", "code", "ai", "ae", "w", "aaa", "ba", "l", "m", "p", "ka", "au"], "i": ["ik", "pi", "it", "o", "ang", "x", "j", "c", "ci", "ar", "d", " I", "ac", "aid", "int", "ind", "an", "bi", "id", "alpha", "key", "acc", "index", "ia", "ip", "aa", "u", "e", "I", "f", "ad", "am", "ki", "ai", "z", "p", "qi", "ii", "li", "ace", "m", "abi", "r"]}}
{"code": "ipp = input()\\nn = [int(x) for x in ipp]\\nharshad = 0\\n\\nfor i in range(0, len(n)):\\n    harshad += n[i]\\n\\nif int(ipp) % harshad == 0:\\n    print(\"Yes\")\\nelif int(ipp) % harshad != 0:\\n    print(\"No\")", "target": "161", "substitutes": {"ipp": ["wp", "ogg", "input", "feed", "omp", "np", "ng", "oi", "rog", "inst", "app", "lip", "upp", "ind", "ipl", "opp", "nz", "yp", "own", "inc", "config", "IPP", "ippers", "sk", "ipes", "irc", "ips", "inn", "nn", "rip", "appy", "ripp", "ip", "items", "zip", "iv", "pp", "hop", "imp", "qq", "ipper", "inf", "ep", "p", "ipping", "iff", "skip", "ippy", "php", "nc", "oc", "rss", "ipped", "appa", "pps"], "n": ["o", "cn", "j", "c", "np", "d", "node", "nb", "a", "s", "num", "t", "y", "g", "h", "network", "ips", "nn", "ip", "names", "nu", "u", "e", "f", "fn", "nt", "b", "ns", "sn", "q", "w", "z", "l", "v", "m", "nc", "p", "ne", "N"], "x": ["xp", "xi", "input", "px", "c", "d", " cx", "xy", " y", "xb", "t", " xx", "xxxxxxxx", "id", "y", " X", "xxx", "xa", "xxxx", "xe", "rx", "ix", "index", "fx", " xp", " ax", "ip", " c", "ex", "xc", "u", "f", "e", "xd", "X", "xx", "xf", "xes", "wx", "q", "w", "z", "xs", "p"], "harshad": [" honestade", "hadrid", "harmard", " hashard", "harshai", "harmady", "hoorad", "Harshpad", "hoodace", "harshady", "harshard", "Harshadic", "huffpad", "harshace", "Harshad", "hhashace", "hoorady", "hoorace", " honestid", "hreshad", "hwarmady", "harshpad", "hharshady", "Hreshad", "hashace", "hharshpad", "Hreshadic", "hwarmad", "hoodad", "harshag", "hwarmai", "hoodadic", "hreshpad", "hoodady", " harshade", "hreshag", "hhashad", "haphid", " honestrad", "harshid", "honestid", " honestad", "huffag", "harmad", "hreshadic", "hoodpad", "hharshace", " harshard", "huffad", " hashady", "hhashpad", "harmai", "harshadic", "hashad", "Hreshpad", "hhashady", "hadrad", "honestade", "harshade", "haphade", " harshrad", " harshid", "honestrad", "harshrad", " harshady", "honestad", "hharshad", " hashai", " hashad", "hashai", "hadrrad", "haphad", "hoorpad", "huffadic", "hadrade", "haphrad", "hashpad", "hwarmard", "hoodag", "Harshag", "hashard", " harshai", "Hreshag", "hashady"], "i": ["pi", "k", "xi", "j", "gi", "c", "ci", "d", "yi", "ri", " I", "a", "io", "ind", "ini", "bi", "id", "y", "ix", "index", "ip", "si", "iii", "u", "iu", "il", "e", "ti", "I", "f", "mi", "ai", "z", "p", "v", "ii", "r", "ih", "ei"]}}
{"code": "A = int(input())\\nB = int(input())\\nC = int(input())\\nX = int(input())\\n\\npat_list = []\\nfor a in range(A + 1):\\n  for b in range(B + 1):\\n    for c in range(C + 1):\\n      price = 500 * a + 100 * b + 50 * c\\n      pat_list.append(price)\\nprint(pat_list.count(X))", "target": "439", "substitutes": {"A": ["AR", "U", "Ac", "NA", "As", "Ca", "D", "S", "E", "Alpha", "CA", "PA", "mA", "At", "Y", "AD", "Am", "Num", "Ma", "BA", "GA", "SA", "AU", "EA", "Area", "AP", "Ar", "AA", "App", "Na", "P", "API", "AH", "AF", "AB", "AC", "H", "LA"], "B": ["U", "D", "BS", "BF", "R", "E", "LB", "Bi", "BB", "T", "UB", "TB", "BBC", "Y", "L", "G", "NB", "BA", "Blue", "BD", "BI", "Q", "Bs", "GB", "DB", "WB", "CB", "FB", "P", "BC", "AB", "O", "F", "N"], "C": ["U", "CI", "D", "S", "R", "E", "CT", "T", "Y", "G", "L", "CU", "Cl", "Con", "JC", "Q", "CS", "Sc", "DC", "V", "P", "CC", "K", "Cs", "EC", "CV", "CP", "VC", "O", "F", "N", "CL"], "X": ["U", "D", "S", "x", "R", "Price", "E", "xy", "XX", "T", "W", "J", "Array", "Y", "plot", "G", "L", "Q", "ICE", "I", "XL", "TX", "V", "P", "XP", "K", "ID", "patch", "XXX", "H", "M", "IX", "F", "N", "Z"], "pat_list": ["match_stack", "pattern2list", "pat20space", "matchsstack", "pattern2List", "pat6table", "patpval", " pat_List", "pat2table", "pat2LIST", "patstable", "pat2List", "matchsval", "pattern_list", "pattern_space", "patplist", "pat20list", "pattern2table", "pat2space", "pat_space", "pat_stack", "match_list", " pat_test", "matchslist", "pat_val", "patsval", "pat_LIST", "patslist", "pat8list", "pat6list", "pat8List", "pat_List", "pat_test", "patpstack", "pat_table", "pat20table", "patsstack", "matchstable", "pattern_List", "pattern2space", "pat6val", "match_table", "pat8test", "pat20List", "pat2test", "pat2list", "pattern_table", " pat_LIST", "pat6stack", "pat8LIST", "patptable", "match_val"], "a": ["ma", "area", "x", "ar", "ak", "ac", "ab", "af", "n", "da", "an", "amp", "y", "alpha", "sa", "ax", "age", "aa", "va", "f", "am", "ca", "ad", "ai", "ae", "aaa", "ba", "l", "ap", "p", "ka", "au"], "b": ["k", "mb", "x", "db", "d", "cb", "nb", "ac", "ab", "app", "bc", "n", "rb", "bi", "i", "y", "bs", "fb", "gb", "abc", "ib", "bin", "wb", "br", "u", "lb", "f", "e", "ad", "base", "sb", " bc", "ba", "l", "v", "bb", "bf", "r", "p"], "c": ["k", "x", "cy", "ci", "d", "cb", "col", "ac", "bc", "fc", "n", "cc", "i", "cs", "y", "cp", "ct", "cin", "cm", "dc", "vc", "xc", "u", "cu", "f", "e", "ca", "unc", "z", "cr", "l", "lc", "cd", "pc", "cf", "oc", "p"], "price": ["use", "currency", "type", "spot", "product", "buy", "market", "Price", "point", "service", "data", "value", "start", "offer", "pos", "pal", "option", "depth", "weight", "cost", "count", "val", "beta", "spec", "match", "interest", "base", "fit", "position", "fee", "style", "str", "patch", "order", "p", "money", "rate", "priced"]}}
{"code": "A = list(map(int, input().split()))\\n\\nif sum(A) >= 10:\\n  print('error')\\nelse:\\n  print(sum(A))", "target": "202", "substitutes": {"A": ["AR", "As", "NA", "D", "S", "R", "Sample", "E", "Total", "Alpha", "a", "B", "CA", "T", "PA", "W", "mA", "Action", "Array", "Y", "array", "L", "AM", "Num", "AS", "HA", "GA", "SA", "TA", "Ha", "I", "AA", "X", "C", "AST", "Na", "Answer", "DATA", "V", "P", "API", "K", "Sum", "O", "AC", "M", "Input", "F", "N", "LA"]}}
{"code": "from math import sin, cos, radians\\n\\nN = int(input())\\n\\np1 = (0, 0)\\np2 = (100, 0)\\nth = radians(60)\\n\\ndef koch(n, a, b):\\n    global th\\n\\n    if n == 0:\\n        return\\n    \\n    s = ((2 * a[0] + 1 * b[0]) / 3, (2 * a[1] + 1 * b[1]) / 3)\\n    t = ((1 * a[0] + 2 * b[0]) / 3, (1 * a[1] + 2 * b[1]) / 3)\\n    u = ((t[0] - s[0]) * cos(th) - (t[1] - s[1]) * sin(th) + s[0],\\n         (t[0] - s[0]) * sin(th) + (t[1] - s[1]) * cos(th) + s[1])\\n\\n    koch(n - 1, a, s)\\n    print(*s)\\n    koch(n - 1, s, u)\\n    print(*u)\\n    koch(n - 1, u, t)\\n    print(*t)\\n    koch(n - 1, t, b)\\n\\nprint(*p1)\\nkoch(N, p1, p2)\\nprint(*p2)\\n", "target": "280", "substitutes": {"N": ["D", "S", "R", "B", "Ns", "T", "W", "J", "num", "Y", "A", "L", "G", "Len", "Num", "NT", "Size", " Ne", "Q", "I", "X", "C", "V", "P", "K", "p", "O", "H", "M", "F", "Z"], "p1": ["t2", "P2", " p0", "p3", "pone", "P3", "P1", "cp01", "Pone", "P01", "p0", "tone", "p01", "eone", "cp2", "pOne", "t1", "e3", " pOne", "cp1", "POne", " pone", "cp0", " p01", "tOne", "P0", "e1", "e2", " p3"], "p2": ["tp02", "pb", "n02", "P2", "k72", "cb", "P1", "ntwo", "P4", " p72", "p4", "tp2", "ptwo", "tptwo", "c1", " ptwo", " p02", "p72", "Pb", "n2", "n4", "c2", "p02", "k1", "k2", "k4", "P72", " p4", "tp4", "c4", " pb"], "th": ["sec", "it", "tp", "rah", "k", "first", "this", "std", "tr", "j", "eth", "kh", "ast", "an", "rh", "ch", "i", "td", "tw", "ph", "test", "ths", "ith", "h", "ts", "self", "tt", "ct", "oth", "the", " Th", "thy", "tha", "ft", "ur", "nt", "f", "thin", "third", "gh", "sh", "w", "ta", "p", "TH", "Th", "se", "right", "wh", "sth", "han", "path"], "n": ["o", "k", "x", "j", "c", "d", "nb", "all", "an", "num", "non", "ni", "i", "y", "on", "na", "g", "en", "network", "nan", "nn", "un", "unn", "nu", "number", "net", "f", "e", "ns", "none", "no", "w", "nor", "z", "l", "v", "m", "r", "nc", "ln", "p", "ne"], "a": ["area", "at", "k", "x", "c", "ar", "d", "ak", "ac", "ab", "art", "da", "an", "A", "y", "api", "alpha", "na", "sa", "ah", "aa", "f", "e", "ad", "ca", "am", "ans", "ns", "ai", "ae", "w", "ba", "l", "aj", "m", "p", "au"], "b": ["o", "eb", "k", "abb", "x", "j", "c", "db", "d", "nb", "ab", "B", "bc", "an", "rb", "bas", "i", "y", "bs", "g", "fb", "h", "bin", "aa", "wb", "f", "e", "base", "sb", "q", "be", "w", "ba", "l", "v", "bb", "r", "p"], "s": ["states", "ls", "o", "S", "ings", "k", " symbols", "x", "su", "sin", "c", "sp", "results", "d", "ins", "ses", "ws", "ations", "ss", "abs", "ops", "an", "ats", "i", "cs", "y", "os", "sa", "g", "ts", "ds", "rows", "ks", " values", "gs", "lines", " signs", "sq", "south", "si", "sets", "f", " lines", "e", "ps", "ns", "us", "ans", "es", "ions", "sb", "sh", "w", "sv", "z", "l", "v", "less", "m", "its", " tokens", "se", "p", " results"], "t": ["it", "tp", "o", "dt", "at", "type", "k", "out", "x", "tu", "j", "c", "d", "ht", "ut", "T", "int", "ot", "vt", "wt", "i", "y", "test", "time", "rt", "g", "ty", "h", "ts", "tt", "ct", "tf", "f", "e", "nt", "pt", "w", "ta", "z", "v", "l", "m", "r", "p", "top"], "u": ["unit", "U", "o", "k", "su", "x", "uv", "tu", "c", "ul", "d", "ut", "ui", "i", "y", "g", "un", "nu", "cu", "iu", "ur", "e", "f", "us", "uu", "q", "w", "z", "l", "v", "uid", "m", "lu", "p", "up", "ou"]}}
{"code": "N = int(input())\\nfor i in range(N):\\n    p = input()\\n    li = sorted([int(i) for i in p.split(\" \")])\\n    if li[-1]**2 == li[-2]**2 + li[-3]**2:\\n        print(\"YES\")\\n    else:\\n        print(\"NO\")", "target": "199", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "NC", "B", "Ns", "T", "n", "J", "Y", "Ni", "L", "G", "A", "Num", " n", "Size", "No", "Q", "Length", "I", "X", "NO", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "i": ["pi", "di", "part", "it", "ji", "k", "x", "xi", "j", "c", "ci", "d", "yi", "phi", "ri", "a", "start", "pos", "int", "ind", "n", "ini", "ui", "id", "ix", "index", "ip", "si", "u", "iu", "f", "ti", "I", "e", "b", "q", "ai", "z", "chi", "qi", "l", "ii", "m", "r", "ei", "zi"], "p": ["lp", "pi", "tp", "o", "part", "j", "c", "sp", "np", "d", "page", "slice", "point", "pos", "pa", "n", "s", "vp", "po", "body", "g", "h", "cp", "u", "e", "f", "b", "ps", "q", "P", "l", "v", "jp", "pc", "m", "r", "pe", "bp", "fp"], "li": ["pi", "lp", "ls", "loc", "di", "ol", "le", "j", "ul", "ci", "kl", "lo", "ili", "ell", "sl", "pa", "cli", "n", "uli", "lie", "list", "ini", "LI", "ali", "ni", "bi", "ly", "iter", "lli", "bl", "lv", "py", "la", "ler", "si", "len", "Li", "b", "mi", "pl", "dl", "ai", "chi", "l", "lc", "ii", "lu", "ln", "lt", "zi"]}}
{"code": "n, x = map(int, input().split())\\nl = list(map(int, input().split()))\\nxlist = [0]\\nnum = 0\\nfor i in l:\\n    num += i\\n    xlist.append(num)\\ncnt = 0\\nfor j in xlist:\\n    if j <= x:\\n        cnt += 1\\nprint(cnt)", "target": "444", "substitutes": {"n": ["o", "k", "ol", "c", "nb", "t", "ni", "g", "nn", "un", "nu", "f", "e", " ni", "b", "ns", "z", "v", "ii", "m", "p", "ne", "N"], "x": ["o", "k", "xi", "c", "d", "list", "t", "y", "width", "xxx", "g", "h", "ix", "index", "number", "ex", "u", "size", "e", "f", "b", "X", "xx", "q", "w", "z", "v", "m", "r", "xs", "p"], "l": ["el", "lp", "ls", "o", "ol", "c", "d", "left", "kl", "lo", "ll", "list", "L", "ml", "line", "nl", "la", "il", "len", "f", "e", "b", "pl", "dl", "z", "lc", "v", "ii", "li", "m", "ln", "p"], "xlist": ["xcode", "testList", "testcode", "xlen", "Xcode", "testlist", " xList", "wxlist", "ixList", " xlen", "ixarray", "Xset", " xarray", "xset", "ixlist", "blen", "wxlen", " xl", "XList", "Xl", "bList", "ixcode", "wxList", "xl", "xList", "Xlist", "testset", "Xarray", "ixl", "xarray", "blist", "ixset"], "num": ["unit", "note", "loc", "um", "c", "ul", "np", "node", "col", "sum", "name", "mult", "pos", "int", "ind", "inc", "cal", "id", "Num", "uni", "coord", "na", "con", "dim", "iter", "index", "span", "un", "number", "nu", "multi", "seq", "u", "len", "nom", "f", "label", "no", "z", "m", "temp", "count"], "i": ["pi", "it", "o", "xi", "c", "ci", "a", "io", "start", "int", "ind", "ini", "list", "t", "id", "y", "index", "ip", "si", "il", "u", "f", "I", "e", "b", "im", "ai", "z", "v", "ii", "li", "m", "p"], "cnt": ["lcount", "Cnd", "CNT", "cno", " cnd", "Cnc", "lcnt", " cno", "acount", "Cno", "cnd", "acnt", "curnd", "curnt", "acNT", " cNT", "cnc", "lcct", "Cnt", "Count", "cct", "cNT", " cnc", "Cct", " count", "lcnc", " cct", "curct", "curount", "acno", "count"], "j": ["ji", "o", "k", "c", " ii", "oj", "ind", "J", "id", "y", " dj", "iq", "g", "ij", "h", "ix", "jl", "jo", " c", "u", "ja", "f", "obj", "adj", "b", "jj", "code", "z", "jp", "aj", "ii", "r", "m", "li", "p", "uj"]}}
{"code": "n = int(input())\\ns = list(input())\\nf = lambda x:1 if x=='R' else -1\\ny = list(map(f, s))\\nif sum(y)>0:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")\\n", "target": "160", "substitutes": {"n": ["o", "k", "j", "c", " N", "nb", "name", "ny", "t", "ni", "na", "g", "nn", "nr", "ns", "sn", "z", "v", "l", "m", "r", "nc", "p", "ne", "N"], "s": ["states", "o", "sy", "S", "x", "c", "d", "ins", "sum", "a", "args", "t", "i", "sd", "g", "sa", "h", "south", "si", "u", "e", "ys", "b", "ps", "ns", "ans", "z", "l", "v", "sg", "p"], "f": ["o", "fs", "x", "c", "fm", "d", "format", "diff", "fun", "F", "t", "info", "i", "rf", "g", "h", "fb", "tf", "function", "u", "fn", "e", "b", "func", "fold", "inf", "filter", "v", "l", "m", "r", "cf", "p"], "y": ["ey", " ye", "yu", "o", "fy", "sy", "ya", "x", "cy", "c", "xy", "yi", "yo", "Y", "ye", "t", "i", "dy", " sy", "h", " x", "ay", " cy", "ym", "ies", " py", "py", "e", "ys", "my", " dy", "yy", "z", "v", "p", "sky", "vy"]}}
{"code": "h,w = list(map(int,input().strip().split()))\\n\\nresult =\"\"\\nfor i in range(w+2):\\n  result += \"#\"\\nprint(result)\\n\\nfor j in range(h):\\n  result = \"#\"\\n  s = input()\\n  result += s\\n  result += \"#\"\\n  print(result)\\nresult =\"\"\\nfor i in range(w+2):\\n  result += \"#\"\\nprint(result)\\n\\n\\n", "target": "133", "substitutes": {"h": ["o", "k", "x", "c", "d", "n", "rh", "t", "id", "y", "g", "ah", "u", "f", "e", "max", "end", "b", "hi", "q", "sh", "z", "l", "v", "hm", "m", "r", "H", "ih", "p"], "w": ["o", "k", "window", "x", "wl", "c", "d", "ws", "wa", "W", "n", "ww", "wt", "t", "y", "width", "sw", "g", "we", "wall", "win", "u", "f", "max", "e", "end", "b", "wx", "q", "z", "v", "l", "m", "r", "wh", "p"], "result": ["grade", "Result", "su", "work", "results", "runner", "answer", "description", "warning", " Result", "source", "sf", "f", "secret", "status", "memory", "comment", "err", "output", "data", "space", "root", "ret", "error", "message", "final", "usr", "default", "match", "goal", "sb", "Results", "r", " results", "method", "step", "search", "feature", "section", "report", "diff", "instance", "array", "math", "surface", "score", "url", "division", "header", "request", "function", "spec", "new", "sr", "string", "case", "success", "response", "page", "sch", "name", "session", "value", "true", "test", "div", "sa", "master", "res", "knowledge", "term", "filter", "json", "found", "now"], "i": ["pi", "it", "o", "iw", "x", "xi", "ci", "ie", "int", "ind", "id", "ij", "ix", "ip", "si", "u", "iu", "f", "I", "ti", "im", "ai", "z", "qi", "v", "l", "ii", "li", "p"], "j": ["o", " b", "js", "iw", "k", "_", " d", "c", "d", "a", "n", "id", " n", "we", "ib", "th", "ip", "jo", "row", "b", " k", "im", "z", "ih"], "s": ["rs", "string", "S", "su", "c", "response", "search", "results", "current", "d", "ws", "ses", "sum", "output", "a", "ss", "second", "n", "array", "space", "t", "cs", "g", "os", "ds", "source", "sf", "si", "e", "f", "b", "res", "ps", "new", "sb", "status", "l", "r", "p", "sr"]}}
{"code": "from math import hypot\\n\\na, b, c, d = map(float, input().split())\\ne = hypot((a-c), (b-d))\\nprint(e)", "target": "196", "substitutes": {"a": ["ma", "area", "acha", "x", "ama", "ac", "ab", "aux", "af", "da", "s", "an", "A", "fa", "i", "alpha", "api", "sa", "h", "abc", "ana", "aa", "u", "va", "f", "ad", "ca", "am", "ae", "w", "aaa", "ba", "asa", "ea", "ada", "aj", "l", "m", "p", " A", "au"], "b": ["o", "k", "x", "j", "db", "ab", "B", "bc", "bd", "n", "rb", "i", "y", "bs", "g", "h", "aa", "wb", "lb", "f", "ad", "base", "sb", "be", "ba", "l", "v", "bb", "r", "p"], "c": ["k", "x", "cy", "ci", "col", "ac", "uc", "bc", "n", "cc", "i", "ec", "y", "h", "ct", "dc", "cu", "u", "f", "end", "ad", "ca", "C", "w", "z", "l", "cd", "m", "cf", "p"], "d": ["o", "D", "dt", "k", "x", "j", "db", "bd", "dec", "n", "da", "t", "dir", "i", "dy", "g", "h", "ds", "dc", "dad", "u", "f", "dd", "end", "ad", "w", "z", "v", "l", "cd", "m", "r", "dat", "p"], "e": ["el", "oe", "o", "eb", "element", "x", "er", "E", "data", "ie", "n", "s", "t", "ef", "i", "y", "ec", "g", "en", "u", "f", "ee", "end", "eng", "ev", "ae", "ep", "z", "v", "l", "ea", "m", "ei", "p"]}}
{"code": "a,b = map(int,input().split())\\na -= 1\\nb -= 1\\nans = b//a\\nif b%a != 0:\\n    ans += 1\\nprint(ans)\\n", "target": "335", "substitutes": {"a": ["ma", "area", "part", "x", "c", "aw", "d", "ac", "ab", "B", "n", "da", "all", "an", "A", "fa", "i", "y", "alpha", "count", "sa", "abc", "ana", "span", "aa", "la", "u", "va", "f", "ad", "ca", "am", "ga", "ai", "ae", "w", "asa", "ba", "aaa", "p", " A", "au"], "b": ["k", "mb", "x", "abb", "c", "d", "cb", "nb", "ab", "ac", "B", "bc", "pa", "n", "s", "rb", "fa", "A", "bi", "i", "y", "api", "bs", "bar", "sa", "fb", "h", "aa", "wb", "e", "f", "ad", "ca", "base", " B", "sb", "ba", "l", "v", "bb", "bf", "r", "m", "p"], "ans": ["aves", "ls", "anus", "nas", "ins", "reads", "ations", "ars", "ants", "amps", "an", "ads", "ops", "man", "actions", " means", "ats", "cs", "ents", "ams", "na", "os", "breaks", "anas", "blocks", "ds", "ks", "ana", "span", "lines", "la", "arts", "AN", "atan", "leans", "aned", "ania", "ANS", "acts", "anne", "ann", "lan", "ns", "ands", "ends", "ai", "aces", "ano", "ays", "aus", "ons"]}}
{"code": "l = ((1,3,5,7,8,10,12),(4,6,9,11),(0,2))\\nx,y = map(int, input().split())\\np = 0\\nfor i in l:\\n\tif x in i and y in i:\\n\t\tp = 1\\n\t\tbreak\\nans = 'Yes' if p == 1 else 'No'\\nprint(ans)", "target": "206", "substitutes": {"l": ["el", "lp", "ls", "o", "ol", "al", "le", "c", "ci", "d", "kl", "sl", "n", "ll", "t", "L", "g", "line", "lin", "u", "len", "il", "f", "rl", "e", "b", "z", "lc", "v", "ii", "m", "li", "ln"], "x": ["o", "k", "xi", "j", "c", "d", "xy", "data", "a", "pos", "int", "n", "num", "t", "g", "ax", "h", "xt", "index", "ex", "u", "e", "f", "b", "X", "xx", "no", "q", "w", "z", "v", "m"], "y": ["ey", "o", "yu", "k", "iy", "ya", "j", "c", "cy", "d", "yi", "oy", "col", "ny", "pos", "yo", "n", "yl", "s", "Y", "yp", "t", "ye", "yr", "dy", "g", "gy", "ym", "py", "yt", "e", "f", "ys", "b", "yd", "uy", "q", "yy", "w", "z", "v", "m", "vy"], "p": ["pi", "lp", "o", "tp", "k", "j", "op", "c", "sp", "d", "a", "pos", "pa", "n", "s", "t", "g", "h", "u", "e", "f", "b", "q", "w", "P", "z", "ep", "v", "pc", "m", "r", "bp"], "i": ["ik", "pi", "it", "o", "iw", "iy", "ya", "xi", "j", "c", "ci", "d", "yi", " I", "a", "io", "ie", "int", "n", "ni", "id", "ia", "ig", "ip", "si", "il", "u", "iu", "e", "I", "ti", "f", "b", "ish", "im", "ai", "q", "z", "v", "ii", "ic", "li", "ei"], "ans": ["parts", "ls", "ings", "anus", "results", "ags", "ras", "ars", "ants", "amps", "args", "an", "s", "ads", " means", "ats", "cs", "ians", "ams", "ents", "sk", "na", "os", "anas", "ks", "can", "AN", "atan", "aned", "leans", "ANS", "ann", "ps", "ns", "aces", "eps", "aus", "ons"]}}
{"code": "n = int(input())\\nH = list(map(int, input().split()))\\nmax = 0\\nans = 0\\nfor i in range(n):\\n    if H[i] >= max:\\n        max = H[i]\\n        ans += 1\\nprint(ans)", "target": "26", "substitutes": {"n": ["o", "k", "x", "c", "d", "nb", "Ns", "num", "an", "s", "y", "min", "g", "h", "nan", "nn", "number", "len", "size", "N", "f", "nt", "b", "ns", "C", "no", "w", "z", "l", "m", "r", "p", "count"], "H": ["U", "SH", "S", "Max", "CL", "HQ", "HC", "R", "RH", "T", "OH", "W", "HH", "rh", "Y", "A", "L", "G", "HA", "HK", "h", "MAX", "HS", "Q", "Ha", "GH", "I", "X", "C", "MH", "HI", "V", "P", "K", "O", "M", "F", "CH", "N", "Z"], "max": ["height", "auto", "k", "Max", "x", "c", "best", "d", "node", "sum", "head", "int", "an", "num", "range", "az", "id", "total", "min", "ax", "h", "MAX", "parent", "can", " Max", "last", "ase", "size", "parse", "default", "N", "end", "shape", "limit", "no", "w", "huge", "r", "right", "p", "rank", "count"], "ans": ["ls", "cycles", "x", "std", "nas", "ins", "reads", "a", "ants", "pos", "int", "ens", "an", "s", "anc", "man", "ops", "ats", "cs", "anon", "sk", "na", "min", "ax", "anas", "act", "ds", "ks", "ana", "nan", "ids", "span", "can", "cons", "AN", "atan", "aned", "len", "ANS", "ann", "lan", "ns", "ai", "ani", "mean", "ln", "han", "ons"], "i": ["pi", "di", "k", "x", "xi", "j", "c", "gi", "ci", "d", " I", "a", "io", "start", "int", "ind", "ini", "ui", "t", "bi", "id", "y", "h", "ix", "index", "ip", "eni", "si", "u", "f", "I", "e", "ti", "b", "mi", "q", "ai", "z", "qi", "l", "ii", "li", "r", "ih", "p", "vi"]}}
{"code": "#UnionFind\\nimport sys\\nsys.setrecursionlimit(10**9)\\nclass UnionFind:\\n  def __init__(self, n):\\n    self.n = [-1]*n\\n    self.r = [0]*n\\n    self.siz = n\\n\\n  def find_root(self, x):\\n    if self.n[x] < 0:\\n      return x\\n    else:\\n      self.n[x] = self.find_root(self.n[x])\\n      return self.n[x]\\n\\n  def unite(self, x, y):\\n    x = self.find_root(x)\\n    y = self.find_root(y)\\n    if x == y:\\n      return\\n    elif self.r[x] > self.r[y]:\\n      self.n[x] += self.n[y]\\n      self.n[y] = x\\n    else:\\n      self.n[y] += self.n[x]\\n      self.n[x] = y\\n      if self.r[x] == self.r[y]:\\n        self.r[y] += 1\\n    self.siz -= 1\\n\\n  def root_same(self, x, y):\\n    return self.find_root(x) == self.find_root(y)\\n\\n  def count(self, x):\\n    return -self.n[self.find_root(x)]\\n\\n  def size(self):\\n    return self.siz\\n\\nn,m=map(int,input().split())\\nu=UnionFind(n)\\nfor _ in range(m):\\n  a,b=map(int,input().split())\\n  a-=1\\n  b-=1\\n  u.unite(a,b)\\nans=0\\nfor i in range(n):\\n  ans=max(ans,u.count(i))\\nprint(ans)\\n", "target": "602", "substitutes": {}}
{"code": "n, t = [int(i) for i in input().split()]\\ndishes = []\\nfor _ in range(n):\\n    a, b = map(int, input().split())\\n    dishes.append((a, b))\\n\\ndishes = sorted(dishes, key=lambda x: x[0])\\n\\ndp = [[0] * t for _ in range(n+1)]\\n\\nans = 0\\n\\nfor i in range(n):\\n    for j in range(t):\\n        if j < dishes[i][0] :\\n            dp[i+1][j] = dp[i][j]\\n        else:\\n            if dp[i][j] > dp[i][j-dishes[i][0]]+dishes[i][1]:\\n                dp[i+1][j] = dp[i][j]\\n            else:\\n                dp[i+1][j] = dp[i][j-dishes[i][0]]+dishes[i][1]\\n    ans_i = dp[i][t-1] + max( dishes[i:], key=lambda x: x[1])[1]\\n    ans = max(ans, ans_i)\\n\\nprint(ans)", "target": "200", "substitutes": {"n": ["o", "k", "x", "c", "d", "nb", "num", "s", "y", "g", "en", "h", "network", "number", "nu", "u", "size", "net", "f", "e", "max", "ns", "q", "w", "z", "v", "l", "m", "r", "nc", "p", "ne", "N"], "t": ["it", "o", "tp", "dt", "at", "k", "x", "c", "d", "to", "T", "int", "ot", "num", "s", "y", "time", "g", "h", "ts", "tf", "u", "e", "f", "nt", "q", "pt", "w", "ta", "z", "v", "l", "m", "r", "p", "top"], "i": ["ik", "pi", "di", "part", "o", "it", "uri", "this", "x", "xi", "c", "gi", "anti", "ci", "d", "yi", "oi", " I", "io", "ie", "ori", "cli", "int", "ind", "s", "ini", "ui", "ni", "info", "id", "y", "api", "bi", "ij", "ix", "index", "ip", "multi", "eni", "si", "u", "iu", "ami", "e", "ti", "I", "f", "mi", "ki", "ai", "z", "qi", "l", "v", "ii", "ic", "li", "ei", "m", "p"], "dishes": ["bishes", "Dishes", "Dishers", "fances", "zishing", "hishes", "pills", "wills", "Dilles", "adished", " dishing", "dishers", "odishes", "dedishing", "ddishers", "mdishing", "odilles", "bributes", "Datches", "sances", "adatches", "zished", "pises", "tishers", "Dills", "bays", " dishers", "ddishes", " dances", "lished", "dedishers", "dances", "mdities", "distishers", "fishing", "tributes", "sished", " dches", " dilles", " dills", "lches", "wishers", " dished", "zities", "patches", "adishers", "dishing", "lishing", "bishing", "adishes", "adills", "ddishing", "bishers", "sishes", "lishes", "tishes", "Dishing", "distches", "dills", "zishes", "datches", "pishers", "dedises", "lities", "wishes", "fished", "mdishes", "pishes", "adishing", "distishing", "hilles", "odishing", "adilles", "lishers", "sishing", "hished", "batches", "dished", "distishes", "fishes", "wishing", "odished", "dilles", "pishing", " datches", "days", "mdished", "lills", "dches", "lilles", "hishing", "Days", "dities", "dedishes", "tishing", "dributes", " days", "dises", "ddises", " dributes"], "_": ["k", "out", "x", " time", "s", " int", "val", " x", "ay", "ip", "len", "f", "q", "l", "p", "ing"], "a": ["o", "at", "k", "x", "c", "d", "ar", "ac", "ab", "da", "an", "s", "A", "fa", "y", "sa", "ia", "aa", "la", "u", "va", "e", "f", "ad", "ai", "ae", "w", "asa", "ba", "l", "aj", "p"], "b": ["eb", "k", "mb", "x", "abb", "c", "d", "nb", "ab", "B", "bc", "bd", "xb", "s", "rb", "y", "bs", "g", "h", "fb", "aa", "wb", "e", "f", "sb", "be", "w", "ba", "l", "v", "r", "bf", "bb", "p"], "dp": ["wp", "lp", "pi", "di", "tp", "dos", "dt", "df", "pb", "px", "pg", "db", "sp", "np", "d", "iper", "port", "pd", "data", "vs", "pa", "src", "direction", "ads", "hp", "vp", "DP", "yp", "pkg", "wd", "api", "dim", "ds", "dh", "cp", "do", "dr", "cm", "dc", "py", "ip", "ists", "adr", "rep", "projects", "pp", "address", "dd", "imp", "ga", "dl", "pm", "dm", "params", "dn", "xs", "deb", "dist", "dat", "p", "gp", "fp"], "ans": ["ls", "anus", "san", "nas", "ins", "ars", "ants", "amps", "ens", "an", "s", "anc", "ads", " means", "ats", "cs", "tan", "ams", "ents", "sk", "ians", "na", "os", "anas", "ds", "ks", "ana", "nan", "nn", "span", "trans", "can", "anes", "atan", "AN", "aned", "ANS", "ann", "ps", "ns", "lan", "es", "ions", "ani", "ai", "ays", "mean", "cross", "xs", "p", "aus", "ons"], "j": ["ji", " J", " v", "o", "k", "js", "x", "c", "d", " si", " ii", " p", "jc", "ie", " ip", "oj", "J", "ind", "jit", "ch", "id", "y", " dj", "key", "g", "ij", "h", " r", "bj", " z", "jo", " l", " c", "si", "u", "ja", "e", "I", "obj", "adj", "jj", "f", " ti", " k", "ai", "z", "l", "jp", "aj", "v", "m", "ii", "li", "p", "uj"], "ans_i": ["an_o", "ars_j", "ars_ini", "ans_x", "ans_j", "ans_c", "ars_i", "an_c", "an_j", "an_i", "ans_ini", "ars_x", "ans_o"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nfrom collections import defaultdict\\nfrom itertools import accumulate\\n\\nn, k = map(int, readline().split())\\na = list(map(lambda x: int(x) - 1, readline().split()))\\ncumsum = [0] + list(map(lambda x: int(x) % k, list(accumulate(a))))\\ndict = defaultdict(int)\\nans = 0\\nfor i, v in enumerate(cumsum):\\n    ans += dict[v]\\n    dict[v] += 1\\n    if i >= k - 1:\\n        dict[cumsum[i - k + 1]] -= 1\\nprint(ans)\\n", "target": "596", "substitutes": {"read": ["use", "sync", " write", "input", "open", "x", "feed", "current", "reads", "raw", "data", "lex", "start", "re", "array", "seek", "proc", "writ", " send", "iter", "connect", "rx", " reader", "set", "character", "write", "readable", "stream", " Read", "fill", "run", "play", "default", "reader", "reading", "Read", "load", "end", "select", " reads", "each", "buffer", "insert", "new", "content", "add", "READ", "r", "method"], "readline": [" readfile", " readlog", "writelines", "throughline", " readLine", "writeback", "scancell", "rawlink", "writeline", "throughlink", "loadback", "scanlog", "readcell", "readlist", "scanfile", "writestring", "readingfile", "readinglines", "readingline", "throughfile", "rawfile", "loadcell", " readin", "loadlog", "loadfile", "readin", "rawline", "readingLine", "scanline", "readingin", "throughlist", "readlog", "readstring", "readinglist", "loadstring", "loadline", " readstring", "readinglink", "readlink", "rawlist", "readingback", "readfile", "loadin", "readingstring", "readback", "loadlines", "loadLine", " readcell", "readLine"], "readlines": ["writefile", "writelines", "readerfile", "rawfiles", "writeline", "rawlines", " readrows", "readerlines", "readerline", "readerfiles", "readinglinks", "readinglines", "readingline", "loadrows", "rawfile", "rawline", "readingrows", "loadline", " readlinks", "writefiles", "loadlinks", "readfile", "readrows", "readfiles", "loadlines", "readlinks"], "n": ["x", "_", "c", "er", "d", "nd", "All", "all", "s", "f", "e", "b", "l", "r", "p", "N"], "k": ["ik", "o", "kn", "ke", "work", "kk", "j", "x", "c", "d", " K", "mk", "ck", "num", "kick", "s", "y", "sk", "g", "unk", "ack", "h", "ok", "ks", "dk", "ko", "kin", "u", "e", "max", "f", "end", "b", "q", "kw", "w", "kind", "K", "z", "l", "m", "r", "p", "km", "ku"], "a": ["ma", "area", "sta", "x", "c", "aw", "wa", "ab", "ac", "da", "an", "s", "array", "A", "fa", "y", "alpha", "na", "sa", "ana", "aa", "la", "va", "e", "b", "ad", "ca", "am", "ga", "ae", "aaa", "ba", "l", "ea", "m", "p", "au"], "cumsum": ["scumom", "ucumsums", "Cumsums", "Catsum", "ucumums", "cumsumed", "catsumed", "cpsums", "capsum", "capssum", "catsume", "capsom", "cumsav", "callsums", "Catsums", "cumav", "ucumum", "capsums", "scumsums", "cacksum", "ucumsav", "cumume", "Catsumed", "cpsum", "cumssum", "scumsom", "Cumsumed", "cumums", "cacksume", "callsom", "cumum", "ucumssum", "cumsume", "scumum", "cumsums", "scumums", "catsum", "cacksumed", "cacksums", "Cumsum", "callssum", "ucumav", "capsav", "ucumsum", "cumom", "cumsom", "cpsav", "cpssum", "callsum", "Catsume", "cumumed", "scumsum", "scumssum", "catsums", "Cumsume"], "dict": ["df", "di", "det", "db", "ass", "c", "doc", "d", "sum", "pd", "data", "const", "document", "int", "ind", "head", "list", "cache", "array", "config", "inc", "dir", "result", "arr", "na", "map", "body", "div", "abc", "ds", "do", "acc", "index", "set", "dc", "table", "aa", "dot", "default", "ict", "dd", "obj", "ad", "code", "xx", "clean", "init", "module", "state", "cat", "conf", "dat"], "ans": ["ang", "angs", "anus", "aning", "nas", "ins", "ars", "ants", "vs", "amps", "args", "an", "s", "anc", "ads", " means", "ats", "cs", "ents", "ians", "anon", "sk", "na", "os", "anas", "ks", "ids", "nan", "ana", "can", "AN", "atan", "aned", "leans", "ANS", "ann", "ns", "ands", "es", "no", "ai", "ani", "ays", "mean", "ons", "au"], "i": ["pi", "di", "o", "x", "xi", "j", "c", "gi", "anti", "ci", "oi", "ri", "ie", "int", "ind", "ui", "ini", "ni", "bi", "y", "index", "ip", "eni", "si", "u", "iu", "I", "ti", "ki", "ai", "z", "qi", "l", "ii", "li", "p", "vi", "zi"], "v": ["o", "x", "vari", "j", "c", "uv", "d", "ver", "sum", "vid", "value", "vv", "vs", "pos", "vt", "s", "var", "vp", "t", "y", "g", "val", "h", "qv", "u", "f", "e", "b", "q", "V", "w", "sv", "z", "l", "ii", "r", "m", "p", "vi"]}}
{"code": "N, T = map(int, input().split())\\nA = list(map(int, input().split()))\\n\\npre = 10 ** 18\\ndiff_max = 0\\ndiff_cnt = 0\\n\\nfor a in A:\\n    if a < pre:\\n        pre = a\\n        continue\\n\\n    if a - pre > diff_max:\\n        diff_max = a - pre\\n        diff_cnt = 1\\n    elif a - pre == diff_max:\\n        diff_cnt += 1\\n\\n# \u9ad8\u6a4b\u541b\u306fdiffmax*(T//2)\u306e\u5229\u76ca\\n# \u53d6\u5f15\u3067\u304d\u308b\u306e\u304cdiffcnt\u7b87\u6240\u3001\u3053\u308c\u3092\u3064\u3076\u3059\\nprint(diff_cnt)", "target": "14", "substitutes": {"N": ["NA", "D", "R", "NS", "E", "B", "Ns", "n", "W", "J", "Y", "L", "NT", " n", "NN", "Q", "I", "X", "C", "V", "P", "K", "O", "M", "F", "Z"], "T": ["U", "D", "S", "TN", "R", "E", "B", "W", "Y", "t", "L", "TA", "Q", "I", "C", "TT", "V", "P", "p", "K", "O", "H", "M", "TF", "F", "Z"], "A": ["U", "NA", "D", "S", "Z", "R", "E", "Alpha", "B", "CA", "W", "F", "Array", "Y", "G", "L", "alpha", "Ma", "TA", "AP", "I", "AA", "X", "C", "Na", "V", "P", "ta", "API", "AF", "K", "O", "H", "M", "p", "LA"], "pre": ["mini", "pi", "NA", "type", "part", "area", "common", "par", "full", "j", "after", "pred", "inter", "int", "pa", "n", "re", "trial", "prep", " Pre", "cache", "per", "Pre", "i", "prefix", "min", "cond", "pri", "pres", "ne", "parent", "offset", "post", "span", "next", "pr", "comp", "py", "rel", "len", "tree", "ad", "before", "base", "ca", "stage", "Inter", "no", "ref", "PRE", "pc", "r", "patch", "li", "prev", "p", "temp", "block"], "diff_max": ["diff2min", " diff_min", "diff64from", "Diff_min", "diff64total", " diff_total", "diff_min", " diff2from", "diff_last", "difflenmax", " diff_c", "diff2from", " diff_from", "diff_c", " diff2Max", " diff2max", "diff64max", "diff_from", "difflenMax", "diff2max", "diff2Max", "diff64min", "difflenfrom", "diff_total", " diff_Max", "diff_Max", " diff2min", " diff_last", "Diff_c", "difflenmin", "Diff_max"], "diff_cnt": ["diff_acnc", "diff_cNT", "diff_lcNT", "diff_fnn", "diff_rcount", "diff_cgt", "diff_lcount", "diff_rcnn", "diff_fnt", "diff_lcgt", "diff_cnn", "diff_rcnc", "diff_cnc", "diff_rcNT", "diff_acnt", "diff_fgt", "diff_lcnc", "diff_lcnt", "diff_count", "diff_acgt", "diff_rcgt", "diff_acNT", "diff_acount", "diff_rcnt", "diff_fnc"], "a": ["ma", "area", "o", "at", "x", "ash", "c", "prev", "ar", "current", "aaaa", "ama", "ac", "ab", "cha", "art", "wa", "af", "pa", "n", "ast", "action", "ata", "an", "fa", "t", "i", "y", "alpha", "na", "qa", "sa", "ana", "ia", "aa", "la", "ach", "va", "e", "f", "am", "b", "ca", "ad", "Na", "ga", "ai", "ae", "ta", "asa", "ba", "w", "aaa", "eta", "aj", "ace", "ap", "p", "au"]}}
{"code": "import sys\\nX = int(input())\\nwhile True:\\n    OK = True\\n    for i in range(2, X):\\n        if X % i == 0:\\n            X += 1\\n            OK = False\\n            break\\n    if OK:\\n        print(X)\\n        break", "target": "609", "substitutes": {"X": ["U", "CI", "XXXX", "Mine", "D", "VALUE", "Control", "ZX", "x", "FX", "Width", "CL", "R", "XX", "T", "W", "Y", "Value", "G", "L", "DX", "JSON", "Index", "Xi", " x", "HTTP", "MAX", "Content", "Q", "IO", "I", "XY", "C", "XL", "TX", "Cross", "FF", "P", "XP", "K", "V", "ID", "Code", "POST", "MX", "XXX", "IX", "M", "H", "F", "XM", "N", "Z"], "OK": ["FK", "Result", "Self", "Ok", "New", " ok", "OD", "OOK", "Do", "KO", "NL", "NC", "Normal", "ECK", "OCK", "L", "Success", "AND", "ANK", "IL", "Correct", "Index", "HK", "OL", "MD", "ok", "MAL", "Wr", "Check", "Error", " Ok", "Valid", "Op", "NO", "Block", "NG", "LL", "ML", "ALL", "CC", "Code", "K", "Found", "ID", "ACK", "O", "KC", "AC", "Right", "OC", "Clean"], "i": ["IF", "pi", "o", "it", "D", "k", "x", "xi", "j", "c", "gi", "R", "d", "ci", "phi", " I", "a", "value", "int", "ind", "n", "J", "ini", "LI", "id", "h", "ix", "index", "ip", "number", "si", "u", "iu", "f", "e", "I", "ti", "b", "z", "p", "v", "l", "ei"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nn, k = map(int, readline().split())\\nif k > (n - 1) * (n - 2) // 2:\\n    print(-1)\\n    exit()\\nm = n * (n - 1) // 2 - k\\nprint(m)\\nfor i in range(1, n + 1):\\n    for j in range(i + 1, n + 1):\\n        print(i, j)\\n        m -= 1\\n        if m == 0:\\n            exit()\\n", "target": "621", "substitutes": {"read": ["control", " write", "x", "input", " readers", "open", "current", "reads", "raw", "lex", "data", "by", " stream", "re", "per", "hand", "seek", " data", "writ", " send", "connect", " reader", "set", "write", "readable", "stream", " Read", "fill", "run", "play", "parse", "f", "reader", "reading", "Read", "load", "func", "select", " reads", "rec", "end", "each", "new", "add", "READ", "r", "php", " copy", "method"], "readline": [" readfile", "readingall", "writelines", "writefile", "rawrange", "readingrange", "readblock", " readlist", "writeline", "rawlines", " readrange", " readall", "readall", "writelist", "readingstr", "readlist", "readinglines", "readingline", "rawall", "loadfile", "rawline", "writeblock", "writestr", "loadblock", "readinglist", "loadline", "readfile", "readstr", "loadlines", " readstr", "readrange", " readblock"], "readlines": ["writelines", "readersets", "feedlines", "readsets", "Readstrings", " readsets", "feeditems", "readitems", "writeline", "scanstring", "feedline", "readerlines", "readerline", "Readline", "writeitems", "writestring", "feedstring", "readerstrings", "scanline", " readstrings", "readstring", "scanitems", "Readsets", "scanlines", "Readlines", "readstrings"], "n": ["o", "x", "c", "d", "nb", "a", "num", "s", "t", "ni", "y", "mn", "network", "nn", "u", "net", "size", "e", "nt", "f", "b", "ns", "pn", "sn", "w", "z", "v", "l", "nc", "ln", "p", "ne", "N"], "k": ["ik", "o", "kn", "ke", "x", "c", "d", "ak", "mk", "ck", "num", "y", "sk", "unk", "h", "ok", "ks", "ko", "u", "f", "e", "b", "q", "w", "kw", "z", "K", "v", "l", "p", "km", "N"], "m": ["mini", "o", "mc", "x", "c", "fm", "gm", "d", "om", "num", "y", "mn", "g", "h", "ym", "md", "cm", "bm", "u", "f", "e", "mu", "b", "mi", "sm", "mm", "q", "im", "w", "pm", "z", "dm", "v", "l", "r", "M", "p", "km", "N"], "i": ["ik", "pi", "ji", "x", "xi", "c", "ci", "d", "yi", "ri", "phi", "a", "ie", "start", "int", "ind", "ui", "ni", "bi", "id", "y", "index", "si", "u", "iu", "f", "I", "e", "b", "mi", "im", "ai", "z", "v", "l", "ii", "li", "p"], "j": ["ji", "o", "js", "x", "c", "d", "ind", "J", "y", "h", "ij", "jl", "jo", "si", "ja", "f", "obj", "end", "b", "jj", "q", "im", "dj", "z", "v", "l", "jp", "ii", "li", "aj", "p", "uj"]}}
{"code": "W,H,x,y,r = map(int, raw_input().split(\" \"))\\nresult = \"\"\\nif x-r < 0 or y-r < 0:\\n\tresult = \"No\"\\nelif x+r > W or y+r > H:\\n\tresult = \"No\"\\nelse:\\n\tresult = \"Yes\"\\nprint result", "target": "563", "substitutes": {"W": ["GW", "U", "TW", "D", "Width", "Ws", "R", "E", "B", "WR", "T", "Y", "A", "L", "Wh", "G", " w", "Q", "WC", "X", "SW", "C", "V", "w", "P", "We", "K", "MW", "O", "M", "YY", "F", "N", "Z"], "H": ["U", " h", "D", "R", "E", "Hi", "B", "RH", "T", "HH", "rh", "Y", "A", "L", "G", "EH", "h", "Q", "I", "X", "C", "HI", "V", "w", "P", "K", "O", "M", "F", "N", "Z"], "x": ["U", "o", "xi", "px", "c", "R", "d", "xy", "a", "wa", "T", "int", "n", "Y", "i", "tx", "on", "xxx", "g", "ax", "h", "rx", " w", "ex", "u", "f", "e", "b", "X", "xx", "no", "w", "z", "v", "l", "m", "xs", "p"], "y": ["ey", "o", "wy", "iy", "ya", "j", "c", "R", "d", "yi", "oy", "yn", "a", "ry", " yr", "n", "s", "Y", "ye", "t", "zy", "i", "yr", "dy", "h", "ay", "e", "f", "b", "xx", "uy", "yy", "w", "z", "v", "l", "m", "p", "vy"], "r": ["rs", "o", "k", "rd", "err", "wr", "c", "er", "R", "d", "ar", "n", "rh", "mr", "t", "rb", "rf", "i", "yr", "g", "ir", "h", "rx", "dr", "pr", "lr", "nr", "e", "f", "rr", "hr", "b", "w", "z", "cr", "l", "v", "attr", "m", "fr", "ru", "p", "rc", "sr"], "result": ["cup", "type", "string", "case", "Result", "success", "out", "su", "err", "response", "compl", "results", "search", "reason", "catch", "feature", "runner", "rap", "output", "data", "dest", "ver", "format", "report", "diff", "current", "answer", "section", "ge", "valid", "rh", "warning", "math", "root", "test", "winner", "div", "parent", "ret", "word", "error", "page", "function", "message", "final", "replace", "reply", "default", "res", "match", "new", "goal", "status", "filter", "draw", "json", "make", "comment", "rc", "sr", "method"]}}
{"code": "n = int(input())\\nt = list(map(int,input().split()))\\nm = int(input())\\na,b = 0,0\\nfor _ in range(m):\\n  a,b = map(int,input().split())\\n  print(sum(t) - t[a-1] + b)", "target": "730", "substitutes": {"n": ["pi", "o", "k", "j", "c", "nm", "nb", "ny", "ot", "ni", "i", "na", "nn", "nr", "net", "nt", "f", "ns", "sn", "z", "l", "v", "nc", "p", "ne", "N"], "t": ["tp", "o", "dt", "at", "x", "j", "tm", "c", "d", "T", "int", "s", "i", "y", "test", "rt", "g", "ts", "tt", "tf", "table", "u", "f", "e", "q", "pt", "w", "ta", "z", "l", "v", "r", "text", "p", "temp", "token"], "m": ["ma", "o", "mc", "k", "j", "tm", "c", "d", "s", "num", "i", "y", "mn", "g", "more", "h", "md", "cm", "u", "f", "e", "sm", "mm", "w", "dm", "l", "v", "hm", "r", "M", "p", "bm"], "a": ["ma", "area", "x", "c", "aw", "ar", "ac", "ab", "int", "pa", "da", "an", "s", "A", "fa", "i", "y", "alpha", "na", "qa", "sa", "aa", "la", "u", "va", "f", "am", "ad", "ca", "ga", "ai", "ae", "w", "z", "ba", "p"], "b": ["o", "k", "mb", "x", "pb", "j", "c", "d", "nb", "ab", "B", "bd", "s", "rb", "i", "y", "bs", "g", "ib", "beta", "aa", "wb", "u", "lb", "e", "f", "sb", "w", "z", "ba", "l", "v", "r", "bb", "p", "bp"], "_": [" __", "j", " times", " I", " g", " time", " j", "I", "obj", " count"]}}
{"code": "c = input()\\ns = list('abcdefghijklmnopqrstuvwxyz')\\n\\nfor i in range(25):\\n    if c == s[i]:\\n        print(s[i+1])\\n        exit()", "target": "501", "substitutes": {"c": ["mc", "k", "cy", "ci", "d", "ctx", "ac", "uc", "fc", "n", "cc", "ce", "cs", "ec", "ct", "cin", "dc", "vc", "cu", "xc", "cation", "e", "f", "b", "unc", "C", "icc", "cr", "l", "v", "sc", "pc", "m", "ic", "nc", "cf", "p"], "s": ["states", "parts", "ls", "string", "services", "S", "input", "results", "d", "ins", "ses", "a", "steps", "ss", "n", "args", "qs", "t", "strings", "cs", "g", "os", "ds", "rows", "gs", "lines", "si", "u", "sets", "e", "f", "ys", "b", "ps", "ns", "ans", "es", "tests", "w", "sv", "l", "v", "sc", "groups", "r", "words", "p"], "i": ["mini", "pi", "di", "uri", "k", "x", "xi", "j", "gi", "ci", "d", "ri", "phi", "a", "start", "int", "ind", "n", "ui", "t", "bi", "id", "y", "h", "ix", "index", "eni", "si", "u", "iu", "fi", "e", "I", "ti", "end", "b", "my", "mi", "f", "ai", "z", "qi", "v", "l", "ii", "li", "m", "p", "zi"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\n#\u5165\u529b\u3068\u9055\u3063\u3066\uff10\u30aa\u30ea\u30b8\u30f3\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\\nn = int(input())\\nli = [[0] * n for _ in range(n)] #\u96a3\u63a5\u884c\u5217\u3001\uff10\u30aa\u30ea\u30b8\u30f3 li[i][j]:i\u304b\u3089j\u3078\u306e\u6709\u5411\u30b0\u30e9\u30d5\u304c\u3042\u308b\\nfor i in range(n):\\n    x, y, *v = [int(x)-1 for x in input().split()]\\n    for j in v:\\n        li[i][j] = 1 #\u6709\u5411\u30b0\u30e9\u30d5\u304c\u3042\u308b\u3068\u3053\u308d\u306f\uff11\u3001\u306a\u3044\u3068\u3053\u308d\u306f\uff10\u3068\u306a\u308b\\n\\nfrom collections import deque\\nQ = deque([0]) #\u521d\u671f\u6761\u4ef6\\nfinish = [0] #\u8a2a\u554f\u6e08\u307f\u306e\u9802\u70b9\u3092\u3057\u307e\u3046\\nlen_ = [-1]*n #\u9802\u70b9j\u306e\u9802\u70b9\uff10\u304b\u3089\u306e\u8ddd\u96e2\u3001\u3067\u304d\u306a\u304b\u3063\u305f\u3089\u30fc\uff11\u3068\u8fd4\u3059\\nlen_[0] = 0 #\u521d\u671f\u6761\u4ef6\\nwhile Q: #Q\u304c\u304b\u3089\u3067\u306a\u3044\u9650\u308a\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3059\\n    i = Q.popleft()\\n    for j in range(n):\\n        if li[i][j] == 1: #i\u304b\u3089j\u3078\u306e\u9053\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\\n            if not j in finish: #\u307e\u3060j\u304c\u63a2\u7d22\u6e08\u307f\u3058\u3083\u306a\u304b\u3063\u305f\u3089\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u884c\u3046\\n                finish.append(j)\\n                Q.append(j)\\n                len_[j] = len_[i] + 1\\n        else:\\n            continue\\nfor i in range(n):\\n    print(str(i+1) + ' ' + str(len_[i]))\\n", "target": "646", "substitutes": {"input": ["file", "type", "string", "out", "raw", "output", "data", " Input", "format", "int", "IN", "i", "key", "entry", "source", "request", "bin", "readable", "stream", " inputs", "read", "reader", "buffer", "inf", "wait", "Input", "io", "method"]}}
{"code": "a,p = map(int,input().split())\\nx = (3*a+p)//2\\nif x == 0:\\n    print(0)\\nelse:\\n    print(x)", "target": "428", "substitutes": {"a": ["ma", "area", "auto", "sta", "anta", "c", "d", "ac", "pa", "n", "mA", "an", "A", "i", "y", "alpha", "api", "na", "sa", "ia", "aa", "la", "f", "b", "am", "ca", "ai", "w", "ae", "asa", "aj", "au"], "p": ["pi", "tp", "j", "c", "np", "d", "pos", "pa", "n", "per", "t", "i", "y", "alpha", "g", "ip", "dp", "pp", "f", "e", "b", "q", "P", "z", "v", "l", "jp", "pc", "m", "ap", "bp"], "x": ["xp", "xi", "px", "work", "c", "d", "xy", "int", "n", "ww", "xb", "t", "i", "y", "alpha", "width", "check", "xxx", "g", "xa", "ax", "xt", "val", "rx", "index", "fx", "ex", "xc", "f", "e", "dx", "max", "b", "X", "xx", "xf", "wx", "z", "v", "l", "cross", "patch", "m", "xs"]}}
{"code": "def result(x):\\n return x + x ** 2 + x ** 3;\\n\\nn = int(input())\\nprint(result(n))", "target": "544", "substitutes": {"x": ["k", "xp", "xi", "input", "px", "c", "plus", "d", "xy", "event", "data", "int", "t", "xxxxxxxx", "i", "y", "test", "tx", " X", "alpha", "python", "xxx", "xa", "h", "xxxx", "rx", "ix", "index", "number", "ex", "xc", "u", "e", "dx", "X", "xx", "code", "xf", "xes", "wx", "z", "v", "cross", "xs", "p", "any"], "n": ["o", "k", "input", "j", "c", "d", "nb", "a", "data", "num", "t", "i", "result", "y", "g", "nn", "number", "u", "f", "e", "fn", "b", "code", "ns", "sn", "no", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"]}}
{"code": "n,m,k=[int(i) for i in input().split()]\\ndef main():\\n    for i in range(n+1):\\n        for j in range(m+1):\\n            if i*(m-j)+j*(n-i)==k:\\n                print(\"Yes\")\\n                return\\n    print(\"No\")\\nmain()", "target": "92", "substitutes": {"n": ["o", "cn", "x", "c", "d", "a", "ny", "num", "s", "y", "g", "en", "h", "nn", "un", "nu", "u", "net", "e", "f", "b", "ns", "byn", "sn", "no", "q", "w", "z", "v", "l", "ii", "r", "p", "N"], "m": ["o", "x", "c", "fm", "d", "a", "s", "num", "an", "man", "y", "mn", "g", "h", "ym", "u", "f", "e", "mu", "b", "sm", "w", "z", "v", "l", "ii", "hm", "r", "M", "p", "N"], "k": ["kj", "o", "kn", "x", "kk", "c", "d", "ak", "y", "key", "sk", "g", "ks", "dk", "u", "f", "e", "b", "q", "w", "kw", "z", "K", "v", "l", "r", "p", "km"], "i": ["pi", "di", "ji", "o", "x", "xi", "idi", "c", "ci", "d", "yi", "ri", "a", "ie", "int", "ind", "uli", "ini", "ui", "t", "ni", "bi", "id", "y", "g", "ij", "h", "ix", "index", "ia", "ip", "si", "iii", "u", "iu", "fi", "e", "I", "ti", "f", "b", "q", "ai", "w", "z", "qi", "v", "l", "ii", "li", "r", "p"], "j": ["ji", "o", "x", "c", "d", " ii", "a", "jon", "J", "t", "y", "g", "h", "jl", " l", "u", "ja", "e", "f", "b", "jj", "q", "w", "z", "l", "v", "ii", "jp", "r", "li", "p"]}}
{"code": "import math\\nth = math.pi/3\\n\\ndef koch(p2, n, points):\\n\tp1 = points[-1]\\n\tx, y = p2[0]-p1[0], p2[1]-p1[1]\\n\ts = [p1[0]+x/3, p1[1]+y/3]\\n\tt = [p1[0]+x*2/3, p1[1]+y*2/3]\\n\ts0t = [t[0]-s[0], t[1]-s[1]]\\n\ts0u = [math.cos(th)*s0t[0] - math.sin(th)*s0t[1],\\n\t       math.sin(th)*s0t[0] + math.cos(th)*s0t[1]]\\n\tu = [s[0]+s0u[0], s[1]+s0u[1]]\\n\t\\n\tif n == 0:\\n\t\tpoints.append(p2)\\n\telse:\\n\t\tkoch(s, n-1, points)\\n\t\tkoch(u, n-1, points)\\n\t\tkoch(t, n-1, points)\\n\t\tkoch(p2, n-1, points)\\n\\n\\nif __name__ == '__main__':\\n\tn = int(input())\\n\tp1 = [0.0, 0.0]\\n\tp2 = [100.0, 0.0]\\n\tpoints = [p1]\\n\tkoch(p2, n, points)\\n\t[print(*p) for p in points]", "target": "280", "substitutes": {"th": ["it", "rah", " h", "first", " ph", "tr", " sh", "eth", "ht", "kh", "Math", "ath", " ch", "rh", " hp", "ch", "math", "roth", " ts", "td", "test", "ph", "tw", "ths", "g", "ith", "rt", "h", "tt", "ct", "uth", "tf", "oth", "the", " ath", " Th", "thy", "tha", "ft", " thr", "nt", "thin", " rh", "gt", "inf", "gh", "sh", "pt", " TH", "lat", "TH", "Th", "se", "sth", "path", "arth"], "p2": ["t2", "pe002", "PTwo", "p3", "P2", " p0", "n0", "t02", "pesecond", "P3", "P1", "P02", "ip1", "nTwo", "pTwo", "p0", "ysecond", "P4", "ip3", "p5", "ipTwo", " pTwo", "p4", "t4", "t5", "c1", "point4", " p02", "t1", "y4", "pe2", "n2", "P5", "y2", "y002", "c2", "point1", " p5", "ip2", "pc0", "p02", "psecond", " psecond", "p002", "P0", "pe4", "pc2", "pcTwo", " p3", " p4", "t3", "n1", "pc1", " p002", "point0", "cTwo", "point2"], "n": ["pi", "o", "k", "j", "c", "np", "d", "ng", "nb", "name", "pos", "num", "non", "i", "mn", "on", "na", "en", "network", "nan", "index", "span", "un", "number", "len", "net", "size", "nt", "f", "fn", "b", "ns", "pn", "none", "sn", "no", "w", "nor", "z", "l", "v", "m", "r", "nc", "nin", "ne", "N"], "points": ["ports", "pots", "holes", "c", "results", "pd", "steps", "times", "images", "args", "cases", "python", "cells", "places", "arts", "notes", "features", "z", "draw", "pins", "words", "files", "k", "d", "data", "rows", "items", "planes", "tests", "pt", "eps", "parts", "codes", " Points", "point", "docs", "Points", "breaks", "ids", "lines", "posts", "downs", "nt", "pot", "objects", "ps", "faces", "params", "nc", "months", "series", "cuts", "ins", "options", "pos", "tips", "devices", "elines", "chains", "ts", "angles", "frames", "dates", "obj", "pages", "w", "P"], "p1": ["n3", "r1", "f1", "jpOne", "tp01", "P2", " p0", "fone", "p3", "app127", "n0", "pone", "P3", "P1", "Pone", "jp1", "P01", "p0", "cone", "P4", "p127", "p01", "p4", "f0", "tp2", "app1", "c1", "r2", "app3", "tp1", "pOne", "app2", "jp4", "n2", "c2", "c3", " pOne", "jp2", "f2", "P127", "POne", " pone", "tpone", "none", " p01", "P0", " p127", "r3", "r01", " p3", " p4", "n1"], "x": ["height", "o", "k", "xi", "c", "d", "point", "a", "pos", "pixel", "int", "Y", "i", "id", "dy", "width", "time", "g", "min", "h", "ix", "index", "ex", "size", "f", "dx", "b", "X", "w", "z", "v", "l", "length", "m", "r"], "y": ["ey", "o", "type", "sy", "k", "ya", "j", "c", "cy", "d", "yi", "oy", "a", "ry", "ny", "Y", "ye", "i", "dy", "ty", "h", "ay", "py", "f", "b", "q", "yy", "w", "z", "v", "l", "m", "vy"], "s": ["states", "ls", "o", "tp", "js", "S", "k", "su", "c", "sp", "d", "ins", "ses", "a", "ss", "sl", "qs", "i", "cs", "site", "bs", "g", "os", "sa", "h", "ts", "ds", "gs", "sq", "south", "si", "sets", "f", "e", "us", "ps", "ns", "b", "ans", "es", "q", "sh", "w", "sv", "z", "l", "v", "m", "r", "se", "xs", "its"], "t": ["it", "tp", "o", "at", "k", "tu", "c", "d", "a", "T", "ot", "wt", "i", "time", "g", "ty", "h", "ts", "tt", "tz", "tf", "st", "f", "e", "ti", "b", "pt", "sh", "w", "ta", "z", "l", "v", "m", "r"], "s0t": ["p1t", "s0ts", "s180o", "p1o", "s00h", "p0i", "es0tu", "p1bit", "es0u", "s000u", "es00s", "p0o", "s1r", "s1ts", "s1s", "es00t", "s000bit", "p1r", "s10ts", "s4h", "p0t", "s0o", "s180h", "s02tu", "s0i", "s0bit", " s_t", "s1i", "s0s", "p1u", "s1o", "s4y", "es0s", "s02u", "s02t", "p0bit", "p1h", "p0r", "s00t", "s180u", "p0u", "s1bit", "s180t", "seet", "es0t", "s10i", "s10u", "es00tu", "s_u", "p1ts", "s00bit", "p0h", "s_y", "p1i", "s10t", "s0h", "s0y", "s0r", "seei", "s1h", "s1u", "s4t", "p0ts", "s_h", "seets", "s00s", "s1tu", "s0tu", "s00tu", "s000t", "s02s", "s4u", "es00u", "s000r", " s_y", "s1t", "seeu", "s00o", "s_t", "s00r", " s_u", " s0y", "s00u", " s_h", " s0h"], "s0u": ["s200t", "ss1s", " s0uv", "s30u", "s4s", "s4U", "s180u", "s3u", "ss0U", "s0uv", "s0tu", "us0tu", "s6uv", "us180tu", "s3s", "s4u", "ss1u", "s200uv", "s200o", " s0o", "s30tu", "s0o", " s6uv", "ss0u", "s3t", "us180cu", "s1s", "s02tu", "s6t", "s200u", "s6o", "ss0t", " s6u", "s180tu", "s1U", "us0cu", "s1t", "s0U", "s0cu", "s02cu", "us0u", "s30cu", "s0s", " s6t", "s1o", "s6u", "s180cu", "s3U", "ss1U", "s02u", "s1u", "s1uv", "ss1t", "s4t", "ss0s", "us180u", " s6o"], "u": ["unit", "U", "o", "k", "su", "tu", "uv", "ul", "c", "ut", "ui", "i", "units", "g", "os", "h", "un", "nu", "cu", "iu", "ur", "f", "us", "b", "q", "w", "z", "pu", "v", "l", "uid", "m", "up", "ou"], "p": ["pi", "it", "o", "tp", "at", "k", "j", "c", "np", "d", "param", "point", "data", "pos", "int", "ot", "num", "i", "g", "h", "ip", "pp", "f", "b", "ps", "q", "pt", "P", "z", "v", "l", "pc", "m", "r", "pe"]}}
{"code": "from collections import deque\\n\\nN, M = map(int, input().split())\\nS = input()[::-1] +'1'*M\\n\\nif M >= N:\\n  print(N)\\n  exit()\\n  \\nq = deque([])\\n\\ni = 0\\nj = 0\\nwhile i < N:\\n  f = 0\\n  for k in range(i+M,j,-1):\\n    if S[k] == '0':\\n      f = 1\\n      break\\n  j = i + M\\n  q.appendleft(k-i)\\n  i = k\\n  if f == 0:\\n    print(-1)\\n    exit()\\n\\nprint(' '.join(map(str, q)))", "target": "677", "substitutes": {"N": ["U", "D", " NI", "R", "NS", " I", "NC", "NE", "NL", "B", "Ns", "T", "n", "J", "W", "Y", "Ni", "L", "G", "Num", "SN", "NT", "NM", " n", "NN", " Ne", "MN", "Q", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "LM", "D", "R", "E", "FM", "B", "T", "n", "J", "W", "Y", "L", "G", "DM", "RM", "NM", "MD", "MS", "MN", "Q", "I", "X", "MI", "C", "MA", "V", "MB", "P", "MM", "K", "SM", "m", "O", "Mi", "H", "F", "CM", "MF", "Z"], "S": ["U", "SE", "D", "SS", "R", "NS", "SK", "B", "Ns", "T", "TS", "J", "Si", "SI", "s", "A", "L", "G", "SN", "SA", "PS", "Q", "I", "C", "V", "Sl", "P", "OS", "K", "SP", "O", "F"], "q": ["qt", "x", "c", " Q", "question", "queue", " queue", "n", "qs", "s", "quest", "que", "ch", "t", "quit", "iq", "y", "check", "qa", "g", "h", "ue", "query", "Q", "sq", "eq", "u", "e", "b", "qq", "w", "z", "qi", "v", " sq", "m", "p", "req", "qu", "dq"], "i": ["ik", "pi", "di", "o", "x", "gi", "ci", "phi", "io", "ie", "start", "int", "ind", "n", "s", "ui", "ini", "bi", "id", "y", "index", "si", "u", "iu", "fi", "I", "e", "b", "mi", "ki", "inf", "ai", "z", "qi", "l", "v", "ii", "m", "li", "p"], "j": ["kj", "pi", "ji", "o", "x", "c", "ci", "d", "ie", "start", "pos", "ind", "n", "J", "y", "h", "ij", "jo", "si", "u", "fi", "I", "e", "end", "b", "jj", "je", "obj", "ki", "z", "K", "l", "v", "ii", "jp", "m", "li", "p", "uj"], "f": ["df", "o", "fs", "x", "c", "fm", "d", "fc", "ff", "ind", "n", "F", "s", "t", "fa", "rf", "y", "fe", "g", "fd", "h", "sf", "u", "fi", "e", "b", "inf", "fen", "z", "v", "l", "m", "r", "p", "form", "fp"], "k": ["ik", "o", "kn", "ke", "x", "kk", "c", "d", "ijk", "a", "n", "ck", "s", "kick", "id", "y", "sk", "g", "h", "ok", "ks", "kid", "ko", "u", "e", "b", "jj", "ki", "kw", "w", "z", "K", "v", "l", "m", "r", "p", "km"]}}
{"code": "n,m=map(int,input().split())\\ns=input()[::-1]\\n\\nif \"1\"*m in s:\\n  print(-1)\\n  exit(0)\\n\\nans=[]\\ncur=0\\nwhile cur<len(s):\\n  for j in range(m,0,-1):\\n    if cur+j>=len(s):\\n      continue\\n    if s[cur+j]==\"0\":\\n      cur=cur+j\\n      ans.append(j)\\n      break\\n  if cur==len(s)-1:\\n    break\\n\\nans=ans[::-1]\\nprint(*ans)", "target": "677", "substitutes": {"n": ["o", "k", "c", "nm", "nb", "name", "ny", "num", "an", "i", "min", "en", "nn", "span", "nl", "f", "ns", "sn", "z", "l", "v", "nc", "ln", "p", "ne", "N"], "m": ["o", "mc", "k", "c", "fm", "d", "nm", "int", "num", "mr", "i", "y", "mn", "g", "dim", "h", "ms", "md", "cm", "u", "f", "e", "mu", "b", "mi", "sm", "mm", "im", "w", "z", "dm", "v", "l", "mean", "r", "M", "p", "count"], "s": ["states", "ls", "o", "services", "parts", "S", "sync", "c", "d", "ins", "ses", "ws", "a", "opens", "ss", "sl", "obs", "an", "t", "strings", "i", "sd", "ches", "sk", "g", "os", "comments", "sections", "ds", "rows", "ks", "gs", "lines", "south", "si", "sets", "f", "e", "sym", "b", "ns", "ments", "sm", "sn", "new", "es", "sb", "ions", "w", "sv", "ims", "l", "v", "sg", "xs", "words", "se", "now", "p"], "ans": ["aves", "ls", "parts", "eds", "nas", "ins", "aos", "anks", "a", "ations", "ars", "ants", "amps", "ens", "args", "an", "ops", "anc", "ads", "ats", "outs", "cs", "asts", "ians", "ams", "ents", "anon", "na", "os", "breaks", "ant", "anas", "ds", "ana", "ks", "anes", "lines", "arts", "AN", "atan", "aned", "cas", "ANS", "ann", "ns", "ane", "es", "ions", "ai", "ani", "aces", "ays", "params", "acs", "aus", "ons", " ads", "au"], "cur": ["core", "loc", "rest", "sur", "case", "um", "our", "c", "sch", "current", "ci", "prev", "ar", "ver", "col", "start", "inter", "coll", "const", "uc", "dec", "head", "ind", "anch", "cache", "av", "ch", "aug", "result", "yr", "keep", "div", "con", "ah", "cor", "iter", "ok", "ct", "ctr", "dr", "cm", "next", "co", "month", "row", "char", "last", "ur", "spec", "pub", "max", "cry", "end", "rev", "cont", "scan", "car", "gr", "cr", "lc", "cat", "sc", "length", "fr", "ser", "r", "order", "oc", "Cur", "rc", "count"], "j": ["kj", "note", "ji", "o", "js", "k", "x", "c", "a", "jc", "start", "ind", "J", "oj", "jit", "ni", "i", "y", " dj", "jan", " _", "ij", "job", "jl", "next", "jo", " l", "ja", "e", "f", "obj", "adj", "jj", "jump", " i", "q", "dj", "ani", "z", "l", "jp", "jam", "aj", "jing", "v", "fr", "r", "p", "uj", "length", "li", "arg"]}}
{"code": "x = int(input())\\nn = x//100\\nif x%100 <= 5*n:\\n    print(1)\\nelse:\\n    print(0)", "target": "513", "substitutes": {"x": ["xp", "xi", "input", "c", "px", "xy", "data", "int", "ww", "num", "s", "t", " xx", "i", "y", "tx", "width", "xxx", "h", "xt", "rx", "ct", "ix", "index", "number", "ex", "xc", "u", "f", "max", "dx", "e", "X", "xx", "ns", "xf", "xes", "wx", "w", "z", "v", "l", "m", "xs", "p"], "n": ["o", "k", "j", "c", "d", " y", " N", "nb", " p", "num", "i", "y", "g", "nn", "index", " c", "u", "size", "f", "e", "b", "ns", "sn", " num", " i", "w", "z", "l", "v", "m", "r", "nc", "ln", "p", "N"]}}
{"code": "# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\\n# import sys\\n# sys.setrecursionlimit(10 ** 6)\\n# import bisect\\n# from collections import deque\\n# from decorator import stop_watch\\n# \\n# \\n# @stop_watch\\ndef solve(N, As):\\n    S = sum(As)\\n    Xs = [0] * N\\n    Xs[0] = S - (sum(As[1::2]) * 2)\\n    for i in range(1, N):\\n        Xs[i] = 2 * As[i - 1] - Xs[i - 1]\\n    print(' '.join([str(i) for i in Xs]))\\n\\n\\nif __name__ == '__main__':\\n    # S = input()\\n    N = int(input())\\n    # N, M = map(int, input().split())\\n    As = [int(i) for i in input().split()]\\n    # Bs = [int(i) for i in input().split()]\\n    solve(N, As)\\n", "target": "406", "substitutes": {}}
{"code": "# coding: utf-8\\n\\nN, A, B, C = int(input()), input(), input(), input()\\ncnt = 0\\nfor i in range(N):\\n    if A[i] == B[i] and A[i] == C[i]:\\n       pass\\n    elif (A[i] == B[i] and A[i] != C[i]) or (A[i] == C[i] and A[i] != B[i]) or (B[i] == C[i] and A[i] != B[i]):\\n        cnt += 1\\n    else:\\n        cnt += 2\\nprint(cnt)", "target": "648", "substitutes": {}}
{"code": "N = int(input())\\nAB = [list(map(int, input().split())) for _ in range(N-1)]\\n\\nchild = [[] for _ in range(N+1)]\\npar = [0]*(N+1)\\n\\nfor ab in AB:\\n    a,b = ab[0], ab[1]\\n    child[a].append(b)\\n    par[b] = a\\n\\nk = 0\\nfor i in range(1,N+1):\\n    l = len(child[i])\\n    if par[i] > 0:\\n        l += 1\\n    k = max(k, l)\\n\\nprint(k)#Max\u306e\u6570\\n\\ncol = [0] * (N+1)\\ncol[1] = 1\\nfor i in range(1, N):\\n    cnt = 0\\n    for c in child[i]:\\n        cnt += 1\\n        col[c] = (col[i] + cnt) % k #k\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u9806\u756a\u306b\u5272\u308a\u5f53\u3066\u3066\u3044\u304f\\n\\nfor ab in AB:\\n    b = ab[1]\\n    print(col[b] + 1)", "target": "157", "substitutes": {"N": ["Node", "NA", "D", "S", "Network", "R", "NS", "E", "NE", "B", "Ns", "T", "n", "J", "NH", "W", "Y", "A", "L", "G", "Ni", "Len", "Num", "NB", "NT", "NM", " n", "Size", "NN", "number", "No", "MN", "Length", "I", "Number", "X", "C", "Na", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "AB": ["AR", "Tab", "abb", "IB", "app", "B", "BB", "PA", "UB", "abs", "AG", "AD", "Array", "A", "AM", "GROUP", "tab", "FE", "Ab", "NB", "lab", "BA", "RAY", "SA", "TA", "AP", "GB", "DB", "AV", "ABC", "AA", "App", "AST", "SB", "ALL", "CC", "AF", "bb", "AC"], "_": ["out", "x", " un", " line", "ac", "__", " time", "all", "ing", "g", " row", "val", " self", " new", " seq", "f", " block", " dev", " local", " file"], "child": ["Child", "part", "children", "pid", "feed", "search", "col", "sub", "section", "app", "ell", "array", "ch", "root", "leaf", "id", "cel", "ray", "inner", "key", "bar", "gap", "cell", "parent", "kid", "span", "bin", "row", "char", "pre", "group", "before", "arc", "scan", "like", "new", "q", "add", "patch", "comment", "p", "path", "block", "count"], "par": ["pi", "Child", "part", "pid", "pol", "sp", "ar", "phi", "pair", "app", "pa", "prep", "per", "var", "list", "array", "arr", "bar", "gap", "Par", "parent", "dr", "span", "pr", "ip", "comp", "aa", "rel", "parse", "mp", "pre", "pp", "arc", "car", "P", "params", "cat", "patch", "pc", "r", "prev", "p", "arg"], "ab": ["eb", "Tab", "abb", "pb", "account", "acl", "ob", "nb", "ac", " eb", "bc", "af", "pa", "ub", "abs", "an", "rb", "abe", "Ab", "lab", "api", "hab", "abc", "fab", "ib", "span", "aa", "br", "obj", "am", "aba", "ai", "abl", "ae", "ba", "bb", "abi", "ap", "p"], "a": ["ma", "area", "auto", "o", "c", "ar", "ak", "ac", "art", "af", "pa", "n", "da", "an", "A", "y", "alpha", "api", "sa", "ax", "parent", "aa", "u", "e", "f", "ad", "am", "ca", "ai", "ae", "w", "aaa", "ba", "r", "ap", "p", "au"], "b": ["o", "mb", "abb", "j", "c", "d", "ob", "nb", "B", "bd", "n", "abs", "ub", "xb", "s", "y", "bs", "g", "bel", "fb", "abc", "ib", "aa", "wb", "lb", "u", "f", "e", "base", "sb", "be", "ba", "v", "bb", "r", "p"], "k": ["ik", "loc", "kn", "ke", "x", "kk", "j", "c", "d", "ak", "ky", "kl", "n", "mk", "ck", "s", "kick", "id", "y", "key", "sk", "g", "ok", "ks", "kid", "dk", "ko", "kin", "pp", "e", "f", "q", "kw", "w", "z", "K", "kb", "v", "length", "r", "p", "plug", "km", "ku"], "i": ["pi", "di", "ji", "x", "xi", "j", "c", "gi", "ci", "ri", " I", "phi", " ii", "oi", "ie", "ind", "n", " iP", "ini", "ui", "t", "ni", "bi", "id", "y", "iq", " j", "ir", " il", "ib", "inn", "ix", "ig", "index", "ip", "eni", "si", "il", "u", "iu", "e", "I", "ti", "f", "ai", "z", "p", "qi", "v", "ii", "li", "io"], "l": ["el", "lp", "ls", "o", "loc", "le", " L", "j", "c", "d", "kl", "sl", "n", "ll", "s", "L", "g", "nl", "la", "u", "len", "lb", "f", "e", "pl", "dl", "w", "z", "v", "lc", "length", "m", "r", "li", "ln", "p"]}}
{"code": "import numpy as np\\nn, m = map(int, input().split())\\nA = [list(input()) for _ in range(n)]\\nB = [list(input()) for _ in range(m)]\\n\\nA, B = np.array(A), np.array(B)\\n\\nfor i in range(n-m+1):\\n    for j in range(n-m+1):\\n        tmp = A[i:i+m, j:j+m]\\n        # \u666e\u901a\u306btmp == B\u3067\u6bd4\u8f03\u3059\u308b\u3068\u8981\u7d20\u3054\u3068\u306e\u4e00\u81f4\u4e0d\u4e00\u81f4\u304c\u8fd4\u308b\u306e\u3067,\\n        # \u5168\u4f53\u306e\u4e00\u81f4\u3092\u5224\u5b9a\u3059\u308ball()\u3092\u5229\u7528\u3059\u308b\\n        if (tmp == B).all():\\n            print(\"Yes\")\\n            exit()\\nelse:\\n    print(\"No\")", "target": "483", "substitutes": {"n": ["o", " v", "k", "x", "c", "d", " fn", " N", "nb", " p", "num", "s", "an", "t", "Num", "y", "mn", " self", "h", "network", " na", " f", " ns", "nan", "nn", " network", "un", "nu", " index", " l", " c", "u", "net", "f", "b", "ns", "sn", "q", "w", "z", "l", "v", "r", "ln", "p", "ne", "N"], "m": ["pi", "o", "k", "x", "tm", "c", "fm", "d", "nm", "nb", "num", "s", "t", "y", "mn", "g", "h", "ms", "ym", "span", "cm", "multi", "u", "size", "f", "e", "mu", "one", "b", "sm", "mm", "q", "im", "w", "z", "dm", "v", "l", "r", "M", "p", "bm", "N"], "A": ["As", "U", "Ac", "D", "S", "Up", "E", "a", "Both", "CA", "T", "W", "J", "At", "Array", "Y", "AM", "L", "G", "Am", "Ab", "GA", "AU", "AP", "Average", "Ar", "I", "AA", "And", "X", "App", "AST", "C", "V", "P", "API", "AH", "AF", "O", "Input", "M", "H", "F", "AC", "N", "LA"], "_": ["x", "__", "pos", "long", "all", "s", "non", "___", "val", "ay", "ip", "len", "f", "am", "q", "of", "p", "place", "ing", "block"], "B": ["Two", " b", "EB", "D", "BS", "BF", "BM", "Other", "E", "LB", "Both", "BB", "T", "UB", "TB", "J", "W", "BE", "Y", "G", "L", "NB", "BA", "PB", "VB", "OB", "BI", "BL", "GB", "Bs", "BR", "QB", "DB", "WB", "BER", "CB", "b", "C", "SB", "MB", "V", "P", "BT", "BC", "AB", "M", "F", "N"], "i": ["pi", "o", "ji", "k", "x", "c", "ci", "d", "phi", "a", "ie", "start", "int", "ind", "ini", "ni", "bi", "h", "ij", "index", "ip", "si", "u", "f", "I", "mu", "b", "mi", "hi", "im", "ai", "z", "l", "v", "ii", "li", "r", "ih", "p"], "j": ["kj", "el", "it", "ji", "o", "k", "x", "c", "d", "a", "pos", "ind", "J", "y", "g", "ij", "h", "jl", "si", "u", "ja", "f", "I", "e", "end", "b", "jj", "q", "im", "z", "qi", "v", "l", "ii", "jp", "r", "aj", "li", "p", "uj"], "tmp": ["Temp", "RGB", "np", "img", "nb", "BB", "TB", "amp", "Array", "rb", "NB", "alpha", "NN", "nn", "foo", "C", "mm", "Output", "FF", "MM", "bb", "XXX", "MP", "Param", "Input", "temp"]}}
{"code": "t=sorted(map(int,open(0).read().split()))\\nprint(['YES','NO'][max([t.count(i)for i in range(1,5)])>2])", "target": "662", "substitutes": {"t": ["o", "tp", "dt", "type", "x", "j", "c", "d", "a", "data", "T", "int", "n", "s", "y", "test", "total", "h", "ts", "tf", "tmp", "set", "table", "u", "f", "e", "tree", "b", "pt", "q", "ta", "l", "v", "template", "m", "types", "p", "temp"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "d", "phi", "oi", "ri", "a", "io", "ori", "int", "ind", "n", "bi", "id", "h", "ix", "index", "ip", "si", "u", "iu", "e", "I", "ti", "f", "b", "hi", "ai", "z", "qi", "v", "l", "ii", "li", "p"]}}
{"code": "n=int(input())\\nh=[int(x) for x in input().split()]\\na=1\\nfor i in range(n-1):\\n  if h[i]>h[i+1]:\\n    h[i+1]+=1\\n    if h[i]>h[i+1]:\\n      print(\"No\")\\n      a=0\\n      break\\nif a==1:\\n  print(\"Yes\")", "target": "230", "substitutes": {"n": ["o", "k", "j", "c", "np", "d", "nb", "num", "s", "t", "y", "en", "nn", "nt", "f", "fn", "e", "b", "ns", "no", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "h": ["o", "k", "oh", "j", "c", "d", "ht", "head", "s", "rh", "t", "y", "ph", "body", "g", "ah", "index", "how", "host", "u", "f", "e", "end", "b", "hi", "ho", "q", "sh", "w", "z", "l", "v", "hm", "m", "r", "H", "he", "ih", "p", "hs", "hash", "count"], "x": ["xp", "xi", "exp", "c", "d", "int", "t", " xx", "id", "y", "tx", "xa", "xxx", "xe", "rx", "ix", "index", "fx", "number", "ex", "xc", "u", "e", "f", "dx", "X", "xx", "xf", "wx", "w", "z", "l", "cross", "m", "xs", "p"], "a": ["ma", "area", "c", "aw", "ac", "wa", "action", "mA", "da", "ata", "an", "A", "fa", "alpha", "qa", "sa", "ana", "ia", "span", "aa", "la", "ava", "va", "f", "am", "b", "ca", "ad", "ga", "ai", "ae", "asa", "aaa", "ba", "ea", "ada", "aj", "p", "au"], "i": ["pi", "di", "o", "uri", "k", "xi", "j", "c", "gi", "ci", "d", "phi", "ie", "start", "ind", "s", "ini", "ui", "t", "id", "y", "api", "ix", "index", "ip", "multi", "si", "u", "iu", "e", "ti", "I", "f", "b", "mi", "hi", "ai", "z", "v", "l", "ii", "li", "ih", "p"]}}
{"code": "s = input()\\nfor i in s:\\n    if(i.isupper()):\\n        print(i.lower(),end=\"\")\\n    else:\\n        print(i.upper(),end=\"\")\\nprint()", "target": "643", "substitutes": {"s": ["ls", "parts", "services", "S", "ins", "ses", "ws", "ss", "ens", "ows", "cs", "ches", "os", "g", "comments", "ts", "ds", "rows", "ips", "ks", "cells", "gs", "lines", "si", "e", "sym", "ps", "ns", "ans", "es", "tests", "sb", "l", "groups", "m", "xs", "se", "p", "ples"], "i": ["pi", "di", "uri", "it", "o", "ji", "you", "x", "xi", "j", "input", "gi", "c", "gu", "d", "oi", " I", "ri", "io", "ie", "cli", "int", "ind", "instance", "ui", "ini", "t", "bi", "id", "inner", "ski", "iri", "ib", "ip", "si", "item", "u", "iu", "ite", "f", "ti", "e", "I", "fi", "b", "stri", "p", "qi", "v", "l", "ii", "ic", "li", "lc", "ei"]}}
{"code": "import sys\\ncounts = [0] * 26\\n\\ns = sys.stdin.read()\\n\t\\nfor c in s:\\n\to = ord(c)\\n\tif o >= 65 and o <= 90:\\n\t\tcounts[o - 65] += 1\\n\telif o >= 97 and o <= 122:\\n\t\tcounts[o - 97] += 1\\n\t\\nfor i in range(len(counts)):\\n\tprint(chr(i + 97) + ' : ' + str(counts[i]))\\n\\n", "target": "770", "substitutes": {"counts": [" countps", "Countc", "Countls", "countps", "countes", " countes", " countgs", "ccs", " countssum", "inds", "ctls", "lengthgs", "summents", "ctds", "Countps", "Countgs", "Countes", "lengthps", "indls", "countings", "countds", "indings", "lengthes", " countings", "lengths", "sumings", "countments", "countc", "countgs", "Counts", " countls", "cts", "indds", " countsum", "ccds", " countsings", "sumc", "ountgs", "Countings", "countsum", "ountsum", "ounts", "ccings", " countss", "indc", "countls", "Countments", " countments", " countsgs", "ccls", "ountings", "ctings", "sums", " countc"], "s": ["rs", "ls", "fs", "string", "S", "d", "ss", "n", "cs", "y", "proc", "os", " cs", " self", "ms", "rows", "lines", "si", "e", "f", "b", "ps", "ns", "es", "sb", "w", "l", "pc", "r", "words", "p"], "c": ["cn", "k", "x", "ci", "d", "csv", "current", "col", "ac", "bc", "fc", "n", "cc", "cs", "g", "h", "abc", "ct", "co", "dc", "u", "e", "f", "toc", "b", "code", "unc", "C", "rec", "w", "ref", "lc", "l", "cr", "pc", "m", "r", "oc", "nc", "p", "rc", "count"], "o": ["auto", "oe", "k", "bo", "ol", "x", "od", "op", "off", "oo", "d", "to", "oi", "ro", "oin", "ob", "lo", "iso", "n", "ot", "go", "po", "t", "y", "fo", "os", "offset", "do", "co", "ode", "ow", " os", "oid", "mo", "u", "oa", "f", "e", "b", "so", "no", "q", "p", "l", "v", "O", "m", "r", "oc", "io"], "i": ["pi", "k", "x", "xi", "j", "ci", "d", "oi", " I", "phi", "a", "ri", "ie", "lo", "ind", "n", "ini", "ui", "id", "y", "key", "co", "isi", "index", "ip", "eni", "si", "u", "iu", "e", "I", "ti", "f", "b", "mi", "ai", "z", "p", "qi", "l", "ii", "li", "ace", "O", "oc", "io"]}}
{"code": "from collections import Counter\\ncnt = Counter()\\nfor i in range(3):\\n  cnt.update([int(item) for item in input().split()])\\na = list(cnt.values())\\na.sort()\\nif a[0] == 1 and a[1] == 1 and a[2] == 2 and a[3] == 2:\\n  print(\"YES\")\\nelse:\\n  print(\"NO\")", "target": "662", "substitutes": {"cnt": ["crrt", "scnd", "CNT", "crnt", "cwd", " cnd", "lcnt", "cant", "crant", "scnt", "lcNT", " cant", "cnd", "Crt", "scct", "crNT", "ucnt", "lcct", "Cnt", "cct", "lcnd", "ucwd", "cNT", "Cwd", "ucrt", " crt", "scNT", "Cant", "ucNT", " cwd", " cct", "crt", " cNT"], "i": ["el", "it", "x", "j", "gi", " I", "col", "io", "ie", "ind", "n", " ip", "instance", "num", "id", "y", "index", "ip", "u", "e", "I", "ti", "im", "ai", "l", "li", "p"], "item": ["unit", "el", "step", "element", "x", "page", "container", "name", "data", "value", "instance", "num", "id", "result", "key", "bar", "entry", "val", "url", "Item", "index", "ip", "ix", "bit", "items", "row", "ex", "foo", "hop", "obj", "member", "other", "q", "counter", "cat", "li", "p", "temp", "arg"], "a": ["area", "auto", "o", "part", "ha", "c", "aw", "ama", "ac", "ab", "aux", "pa", "n", "action", "args", "ata", "an", "s", "da", "A", "fa", "list", "all", "array", "y", "alpha", "na", "qa", "sa", "ack", "ana", "aa", "la", "u", "va", "oa", "f", "e", "b", "am", "ca", "ad", "ga", "ae", "ba", "add", "l", "ea", "aj", "ao", "m", "p", "any", "au"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nt = 1\\ncand1 = 0\\ntmp = 0\\nfor ai in a:\\n    if (tmp + ai) * t <= 0:\\n        cand1 += abs(tmp + ai - t)\\n        tmp = t\\n    else:\\n        tmp += ai\\n    t *= -1\\nt = -1\\ncand2 = 0\\ntmp = 0\\nfor ai in a:\\n    if (tmp + ai) * t <= 0:\\n        cand2 += abs(tmp + ai - t)\\n        tmp = t\\n    else:\\n        tmp += ai\\n    t *= -1\\n\\nprint(min(cand1, cand2))", "target": "178", "substitutes": {"n": ["o", "x", "j", "c", "np", "nb", "ot", "an", "s", "ni", "i", "na", "g", "nn", "span", " c", "net", "nt", "b", "ns", "z", "l", "m", "r", "p", "N"], "a": ["area", "o", "at", " ta", "c", "ar", "ama", "ab", "ac", "af", "args", "ata", "an", "A", "fa", "i", "y", "alpha", "sa", "abc", "ia", "span", "aa", "u", "oa", "b", "am", "ad", "ca", "ae", "ta", "aaa", "asa", "w", "ba", "z", "aj", "m", "p", " A", "au"], "t": ["it", "o", "tp", "at", "dt", "type", "qt", "out", "x", "trace", "tu", "tm", "c", "j", "tr", "d", "tc", "tower", "ut", "T", "int", "ot", "wt", "s", "tab", "i", "y", "test", "total", "time", "rt", "g", "ty", "h", "ts", "tt", "tz", "tf", "ct", "yt", "att", "u", "e", "f", "ti", "b", "nt", "tim", "inf", "pt", "q", "w", "ta", "z", "tn", "v", "l", "template", "te", "m", "r", "p", "temp"], "cand1": ["charu", " cand31", "cand3", " cand3", "cand9", "car1", "cast1", " candb", "make31", "candu", "CandOne", "makeOne", "cand31", " candOne", "char1", "cat9", "candb", "Cand1", "carb", " candu", "cat1", "castOne", "cat2", "caru", "char3", "Cand9", "Cand2", "cast31", "car3", " cand9", "catOne", "make1", "candOne", "charb"], "tmp": ["area", "tp", "ott", "j", "tm", "c", "phi", "nb", "num", "rb", "tab", "cmp", "proc", "front", "self", "next", "fake", "f", "sup", "cum", "m", "p", "temp", "part", "Temp", "x", "abb", "kk", "tc", "data", "vt", "fb", "cp", "emp", "app", "tom", "T", "int", "perm", "meta", "A", "config", "buf", "i", "tt", "beta", "treatment", "nt", "pot", "ta", "v", "aj", "sam", "this", "page", "np", "amount", "img", "start", "TB", "amp", "cache", "test", "api", "tf", "cm", "pad", "mp", "foo", "obj", "b", "aaa", "attr", "txt", "now", "order"], "ai": ["at", "al", "c", "ar", "ak", "ac", "af", "agi", "qa", "aci", "aa", "say", "ca", "aq", "adi", "asa", "ba", "ap", "p", "gam", "au", "asi", "ci", "aud", "pa", "iana", "an", "ape", "az", "arm", "abc", "ay", "acc", "ahi", "aut", "ais", "am", "ani", "aii", "li", "dat", "vi", "ait", "app", "art", "int", "ini", "fa", "i", "iq", "alpha", "ah", "aur", "inf", "ta", "chi", "qi", "ic", "aj", "sam", "ma", "hai", "bug", "all", "api", "AI", "sa", "ir", "ia", "si", "address", "ad", "pai", "q", "ae", "order"], "cand2": ["car2", "dev1", "car4", "candtwo", " cand12", " candTwo", "cand4", "cartwo", "cand12", "car1", " candb", "candTwo", "devtwo", "car12", "cortwo", "cp2", " candtwo", "cor4", "dev2", "candb", "Cand1", " cand4", "carb", "cor12", "cor2", "Candb", "cp1", "CandTwo", "Cand2", "cptwo", "carTwo"]}}
{"code": "# \u89e3\u8aac\u3092\u898b\u3066\u89e3\u304d\u76f4\u3057\\nN, K = [int(x) for x in input().split()]\\n\\nranges = [tuple(int(x) for x in input().split()) for _ in range(K)]\\nranges.sort()\\np = 998244353\\n\\ndpsum = [0] * (N + 1)\\ndpsum[1] = 1\\n\\nfor i in range(2, N + 1):\\n    dp = 0\\n    for l, r in ranges:\\n        rj = i - l\\n        lj = max(1, i - r)  # 1\u4ee5\u4e0a\\n        if rj <= 0: continue\\n        dp += dpsum[rj] - dpsum[lj - 1]\\n        dp %= p\\n    dpsum[i] = dpsum[i - 1] + dp\\n    dpsum[i] %= p\\n\\nprint(dp)", "target": "158", "substitutes": {}}
{"code": "import math\\n\\nwhile True:\\n    n = int(input())\\n    if(n == 0):\\n        exit()\\n    else:\\n        s = [int(x) for x in input().split()]\\n        m = sum(s)/len(s)\\n\\n        for i in range(n):\\n            s [i] = (s[i] - m)**2\\n\\n        print(\"%.5f\" % (math.sqrt(sum(s)/len(s))))", "target": "683", "substitutes": {"n": ["o", "k", "j", "c", "np", "d", "nb", "num", "an", "t", "y", "count", "en", "nu", "number", "u", "len", "e", "f", "nt", "b", "ns", "none", "sn", "no", "w", "nor", "z", "l", "v", "nc", "ln", "p", "don", "ne", "N"], "s": ["states", "services", "o", "ls", "parts", "S", "input", "c", "d", "ses", "sum", "a", "ss", "t", "strings", "y", "g", "os", "ds", "ms", "sample", "gs", "south", "si", "u", "size", "e", "f", "sym", "b", "ps", "ns", "es", "sh", "w", "sv", "l", "v", "r", "xs", "p", "aws", "seconds"], "x": ["xi", "c", "xy", "t", " xx", "xxxxxxxx", "id", "y", "python", "xxx", "ax", "xt", "xxxx", "xe", "rx", "ix", "index", "fx", "ex", "xc", "u", "e", "f", "dx", "X", "xx", "xf", "xes", "wx", "w", "z", "v", "xs", "php", "p"], "m": ["o", "mc", "k", "j", "c", "fm", "gm", "d", "nm", "t", "y", "mn", "g", "h", "ms", "ym", "md", "cm", "u", "f", "e", "b", "sm", "mm", "w", "z", "dm", "l", "v", "hm", "r", "M", "p", "bm"], "i": ["pi", "di", "o", "ji", "uri", "k", "xi", "j", "gi", "c", "ci", "d", "oi", "ri", "io", "start", "ind", "ini", "ui", "ni", "bi", "id", "y", "h", "ix", "index", "bit", "eni", "si", "u", "iu", "fi", "e", "ti", "I", "f", "mi", "q", "ai", "z", "qi", "l", "lc", "ii", "li", "ei", "p"]}}
{"code": "Q,H,S,D = map(int, input().split())\\nN = int(input())\\n\\nonelit = min((4*Q),(2*H),(S))\\n\\npattern1 = N * onelit\\npattern2 = ((N//2)*D) + ((N%2) * onelit)\\n\\nprint(min(pattern1, pattern2))", "target": "404", "substitutes": {"Q": ["U", "SH", "MQ", "CL", "R", "E", "IQ", "B", "T", "W", "J", "Y", "A", "L", "G", "QL", "X", "C", "q", "V", "P", "K", "Query", "O", "M", "IX", "F", "Z"], "H": ["U", "R", "E", "B", "RH", "T", "W", "HH", "J", "Y", "A", "L", "G", "EH", "h", "X", "C", "HM", "V", "P", "K", "O", "M", "DH", "F", "Z"], "S": ["U", "SE", "SH", "SS", "R", "NS", "E", "B", "T", "W", "s", "Y", "A", "L", "G", "SL", "DS", "X", "SU", "C", "V", "P", "K", "SP", "O", "M", "F", "Z"], "D": ["U", "DT", "d", "E", "Do", "Ds", "B", "T", "W", "Y", "AD", "DA", "L", "DX", "G", "DD", "MD", "DB", "X", "C", "DF", "DC", "V", "P", "K", "DL", "O", "M", "DH", "F", "DE", "Z"], "N": ["NY", "NA", "R", "NS", "E", "NE", "NC", "NL", "B", "Ns", "T", "n", "J", "W", "Sn", "Y", "A", "L", "G", "Wh", "Num", "NT", "Size", "NN", "No", "I", "X", "NO", "C", "Na", "Ne", "NG", "V", "P", "K", "O", "M", "F", "Z"], "onelit": ["ellmit", "ealit", "soliter", "elllit", "alonpit", "palitting", "alonmit", "unalmit", "onelion", "ellit", "iolits", "palit", "onellit", "onelmit", "solitting", "kelitting", "owlit", "owllit", "owlitting", "onelits", "solion", "pallit", "palits", "ellpit", "unalit", "kelion", "kelit", "alonlit", "keliter", "onelpit", "unallit", "ealion", "owlits", "onelitting", "iollit", "unalpit", "iolitting", "solit", "ealiter", "iolit", "alonit", "ealitting", "oneliter"], "pattern1": ["Patternone", "patch1", "match1", "patch2", "pattern3", "number1", "patternone", "patchFirst", "match3", "match2", "patchone", "number3", "Pattern2", " pattern3", " patternFirst", "patternFirst", " patternone", "PatternFirst", "Pattern1", "number2"], "pattern2": ["patchTwo", "letterB", "patternTwo", "patch1", "patch2", "letter1", "patternB", "Pattern4", " patternB", "patch4", "pattern4", "PatternTwo", "Pattern2", "letter2", " pattern4", "Pattern1", "letter4", "PatternB", " patternTwo"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\nsys.setrecursionlimit(10 ** 7)\\n\\n\\ndef main():\\n    N, H = map(int, input().split())\\n    A = []\\n    B = []\\n    for i in range(N):\\n        a, b = map(int, input().split())\\n        A.append(a)\\n        B.append(b)\\n\\n    A.sort()\\n    B.sort(reverse=True)\\n\\n    throw = []\\n    for i in range(N):\\n        if B[i] > A[-1]:\\n            throw.append(B[i])\\n    # print(throw)\\n    throw = throw[::-1]\\n\\n    ans = 0\\n\\n    while H > 0:\\n        if throw:\\n            H -= throw.pop()\\n            ans += 1\\n        else:\\n            need_try = (H + A[-1] - 1) // A[-1]\\n            ans += need_try\\n            break\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "205", "substitutes": {"input": ["empty", "string", "element", "out", "plus", "feed", "current", "raw", "output", "copy", "data", "sum", " Input", "format", "expression", "submit", "int", "util", "instance", " output", "print", "single", "pull", "list", "array", "enter", "call", "python", "magic", "connect", "iter", "parent", "image", "command", "request", "source", "main", "error", "stream", " inputs", "run", "read", "reader", "insert", "select", "buffer", "inf", "form", "Input", "until", "comment", "exec", "method"], "N": ["U", "D", "S", "R", "NS", "E", "NE", "NC", "Ns", "T", "n", "W", "J", "NH", "Y", "L", "G", "Ni", "Num", "Size", "No", "Q", "I", "X", "C", "Na", "Ne", "NI", "V", "P", "K", "KN", "O", "M", "F", "Z"], "H": ["U", "D", "S", "R", "E", "BB", "T", "W", "J", "NH", "Array", "G", "L", "h", "I", "IT", "X", "C", "HI", "V", "P", "K", "O", "M", "Input", "F", "Z"], "A": ["As", "AR", "U", "NA", "D", "S", "E", "Alpha", "CA", "IA", "At", "Array", "Y", "L", "G", "AM", "Am", "Ab", "AS", "HA", "BA", "SA", "AU", "An", "AP", "Average", "Ar", "Ha", "AV", "I", "AA", "X", "C", "AST", "Na", "V", "P", "FA", "AF", "AH", "API", "O", "AC", "M", "And", "F", "LA"], "B": ["U", "Base", "EB", "Blocks", "D", "Tab", "BF", "R", "Other", "E", "Break", "Except", "Both", "Bi", "BB", "TB", "BE", "W", "Array", "Y", "L", "G", "But", "Ab", "NB", "Fail", "BA", "Blue", "VB", "Throw", "BD", "BI", "OB", "GB", "Bs", "BL", "QB", "DB", "WB", "BER", "CB", "Crash", "I", "X", "Attack", "FB", "C", "V", "MB", "P", "AF", "BC", "AB", "O", "AW", "F"], "i": ["pi", "di", "o", "uri", "ji", "x", "_", "j", "xi", "c", "gi", "gu", "ci", "d", "ri", "ie", "ori", "int", "ind", "n", "ui", "ini", "ni", "bi", "id", "y", "uni", "h", "ij", "isin", "index", "ip", "si", "iii", "u", "iu", "fi", "f", "I", "e", "end", "ti", "q", "ai", "z", "p", "qi", "l", "v", "ii", "li", "r", "abi", "io"], "a": ["c", "aw", "d", "ak", "ab", "ac", "n", "da", "all", "an", "alpha", "sa", "h", "aa", "u", "f", "e", "ad", "ca", "am", "ai", "ae", "w", "ba", "l", "ea", "r", "p"], "b": ["o", "eb", "j", "c", "d", "ob", "cb", "ab", "bh", "BB", "n", "both", "rb", "bur", "y", "bs", "h", "fb", "ib", "beta", "wb", "f", "e", "base", "other", "sb", "be", "ba", "l", "v", "bb", "p"], "throw": ["use", " Throw", "rew", "ash", "trace", "feed", "aw", "catch", "Break", "fail", "report", "allow", "array", "flash", "ignore", "sleep", "ray", "force", "ack", "execute", "Throw", "error", "Stack", "send", "Crash", " throws", "shift", "burn", "fire", "Exception", "call"]}}
{"code": "a, b = map(int, input().split())\\nif 6 <= a <= 12:\\n    b = b/2\\nelif a<6:\\n    b = 0\\nprint(int(b))\\n", "target": "799", "substitutes": {"a": ["area", "auto", "c", "aw", "d", "ac", "ab", "int", "n", "pa", "da", "an", "s", "A", "fa", "i", "y", "alpha", "api", "na", "sa", "aa", "u", "va", "oa", "f", "e", "ad", "ca", "am", "ai", "ae", "w", "asa", "ba", "l", "aj", "m", "p", "au"], "b": ["eb", "k", "mb", "x", "abb", "c", "db", "d", "cb", "nb", "ob", "ab", "B", "n", "abs", "s", "binary", "rb", "A", "bot", "i", "y", "bs", "body", "g", "fb", "h", "beta", "bin", "aa", "wb", "lb", "e", "f", "obj", "end", "base", "sb", "w", "be", "l", "v", "bb", "bf", "emb", "p"]}}
{"code": "N = int(input())\\nA = list(map(lambda x: int(x), input().split()))\\n\\na = 0\\nfor i in range(N):\\n    if i%2 == 0:\\n        a+=A[i]\\n    else:\\n        a-=A[i]\\n\\nanswer = [a]\\nfor i in range(N-1):\\n    answer.append((A[i]-answer[-1]//2)*2)\\n\\nprint(\" \".join(str(i) for i in answer))", "target": "406", "substitutes": {"N": ["U", "D", "S", "R", "NS", "E", "NE", "B", "Ns", "T", "n", "W", "J", "Y", "L", "Ni", "G", "Len", "Num", "NT", " n", "Size", "NN", "Q", "I", "X", "C", "Na", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["As", "U", "NA", "D", "S", "Args", "E", "Alpha", "B", "CA", "T", "mA", "At", "Array", "Y", "array", "L", "G", "AM", "Am", "alpha", "Ab", "GA", "An", "Adam", "LA", "AP", "Average", "Ar", "I", "AA", "X", "App", "C", "Answer", "V", "P", "p", "API", "K", "O", "Input", "M", "H", "F", "AC", "Z"], "a": ["area", "auto", "pi", "o", "at", "x", "j", "c", "ar", "ac", "ab", "data", "wa", "pa", "n", "da", "ata", "an", "array", "fa", "y", "alpha", "api", "na", "sa", "ana", "ia", "aa", "u", "va", "oa", "f", "e", "b", "am", "ad", "ca", "ga", "ai", "ae", "w", "z", "ba", "ea", "aj", "ace", "p"], "i": ["pi", "it", "o", "di", "uri", "k", "x", "xi", "j", "_", "c", "ait", "ci", "d", "yi", "ie", "ori", "int", "ind", "n", "num", "ui", "ini", "bi", "id", "y", "api", "alpha", "iq", "ix", "index", "ip", "si", "u", "iu", "e", "I", "ti", "f", "b", "ai", "z", "p", "qi", "l", "v", "ii", "li", "ei", "m", "abi", "ace", "io"], "answer": ["area", "o", "average", "grade", "x", "response", "search", "page", " answers", "question", "account", "output", "data", "section", "ell", "n", "archive", "assembly", "array", "update", "cache", "result", "sort", "alpha", "answered", "entry", "analysis", "sa", "offset", "word", "next", "number", "age", "aa", "say", "message", "reply", "size", "address", "f", "e", "code", "random", "Answer", "ae", "z", "order", "p", "audio", "au"]}}
{"code": "n,m = list(map(int, input().split()))\\nh = list(map(int, input().split()))\\nnice = list(1 for i in range(n))\\ndef chk_nice(x,y): \\n    global nice\\n    if nice[x] != 0:\\n        nice[x] = (h[x] > h[y])\\nfor i in range(m):\\n    a,b = list(map(int, input().split()))\\n    chk_nice(a-1, b-1)\\n    chk_nice(b-1, a-1)\\nprint(sum(nice))\\n\\n", "target": "291", "substitutes": {"n": ["o", "k", "j", "c", "np", "d", "nb", "ny", "s", "num", "t", "en", "u", "size", "net", "e", "f", "ns", "no", "q", "w", "z", "l", "v", "p", "N"], "m": ["o", "mc", "k", "j", "c", "d", "mn", "g", "dim", "ms", "md", "u", "e", "f", "mu", "am", "sm", "mm", "w", "z", "v", "l", "hm", "r", "M", "p", "bm"], "h": ["o", "loc", "k", "oh", "j", "c", "d", "ht", "rh", "s", "t", "ch", "ph", "g", "host", "u", "f", "e", "help", "hi", "q", "sh", "w", "z", "l", "v", "hot", "hm", "H", "he", "p", "hs"], "nice": ["unit", "core", "case", "good", "out", "done", "_", "extra", "c", "close", "np", "cycle", "xy", "tick", "bug", "name", "ie", "complete", "some", "min", "int", "ico", "ise", "nick", "remote", "site", "info", "ignore", "cmp", "prime", "key", "fine", "quick", "keep", "check", "result", "gui", "pri", "live", "die", "custom", "sample", "query", "index", "py", "happy", "Nice", "foo", "move", "size", "f", "max", "ite", "hi", "clean", "random", "new", "init", "example", "wife", "p", "temp"], "i": ["pi", "di", "k", "xi", "c", "gi", "ci", "d", "yi", "int", "ind", "ni", "id", "iq", "ip", "u", "iu", "f", "ti", "I", "ai", "chi", "qi", "l", "ii", "li", "r", "p", "zi"], "x": ["k", "xp", "xi", "px", "ya", "c", "d", "xy", "XX", "name", "int", "t", "id", "key", "ax", "xt", "ix", "index", "ex", "xc", "u", "e", "f", "dx", "one", "X", "xx", "wx", "no", "q", "w", "z", "v", "l", "xs", "p"], "y": ["ey", "o", "k", "ya", "j", "c", "cy", "d", "xy", "oy", "yi", "ny", "Y", "ye", "t", "ch", "dy", "ay", "py", "yt", "u", "e", "q", "yy", "w", "z", "v", "p", "vy"], "a": ["ma", "o", "k", "c", "d", "ac", "ab", "af", "int", "da", "an", "s", "A", "fa", "alpha", "sa", "ia", "aa", "u", "va", "e", "f", "ad", "ca", "am", "ai", "ae", "w", "z", "ba", "aaa", "l", "p", "au"], "b": ["o", "k", "j", "c", "d", "nb", "ab", "bh", "B", "bd", "s", "an", "A", "rb", "bi", "bs", "body", "fb", "ib", "aa", "wb", "lb", "u", "e", "f", "sb", "w", "z", "ba", "l", "v", "r", "p"]}}
{"code": "n,k = map(int, raw_input().split())\\nscore,d,cd = 0,None,0\\ns = raw_input()\\nfor i,l in enumerate(s):\\n\tif d != l:\\n\t\tcd +=1\\n\t\td = l\\n\tif i and s[i-1] == s[i]:  score += 1\\n\\n\\nif cd > 2:\\n\tt = min(k,((cd - 2)+1)/2)\\n\tk -= t\\n\tscore += 2 * t \\n\tcd -= 2 * t\\nif cd == 2 and k:\\n\tscore +=1\\n\tcd -= 1\\nprint score\\n", "target": "164", "substitutes": {"n": ["pi", "o", "cn", "j", "c", " N", "nb", "ot", "ni", "g", "nn", " c", "f", "b", "ns", "sn", "z", "v", "m", "r", "nc", "p", "ne", "N"], "k": ["o", "ke", "x", "kk", "j", "c", "ky", "ck", "kick", "ch", "y", "key", "sk", "g", "h", "ok", "self", "ks", "uk", "dk", "ko", "u", "e", "max", "f", "b", "q", "tk", "w", "kw", "z", "K", "v", "m", "r", "p", "km", "kt"], "score": ["est", "core", "ner", "ze", "o", "grade", "dt", "distance", "err", "orer", "done", "c", "er", "de", "ore", "ie", "Score", "une", "T", "ize", "ise", "go", "iz", "depth", "weight", "result", "test", "sd", "y", "cost", "key", "winner", "time", "price", "en", "cor", "scoring", "rate", "line", "ate", "error", "player", "size", "e", "f", "code", "match", "store", "z", "tag", "cr", "v", "sc", "r", "fee", "length", "order", "rank", "level", "count"], "d": ["o", "D", "dt", "std", "od", "x", "c", "j", "data", "diff", "nd", "bd", "ind", " dd", "td", "id", "sd", "y", "dy", "g", "fd", "h", "ds", "dc", "u", "e", "f", "xd", "b", "ad", "dl", "w", "z", " sd", "m", "dist", "p", "ld"], "cd": ["core", "dt", "D", "std", "od", "CD", "c", "ecd", "ci", "done", "de", "cb", "pd", "cod", "diff", "nd", "bd", "une", "ind", "ck", "cc", "depth", "ce", "td", "id", "sd", "rod", "cand", "div", "fd", "hd", "ct", "md", "ord", "cm", "dc", "day", "box", "cz", "odd", "cdn", "nt", "xd", "dd", "max", "ad", "code", "ca", "clean", "q", "z", "cr", "lc", "sc", "dist", "rowd", "cf", "ld", "cl", "count"], "s": ["ls", "o", "services", "S", "ssl", "x", "c", "a", "ss", "sl", "strings", "cs", "y", "sk", "g", "os", "h", "ds", "ks", "lines", "south", "si", "u", "sets", "spec", "f", "e", "b", "ps", "ns", "es", "sb", "w", "z", "v", "r", "m", "se", "its", "p"], "i": ["pi", "it", "o", "ian", "x", "xi", "j", "c", "gi", "ci", "oi", "a", "ie", "start", "int", "ind", "ui", "ini", "ni", "id", "y", "index", "si", "u", "iu", "f", "e", "I", "ti", "b", "ai", "z", "chi", "v", "ii", "ic", "li", "ei", "m", "r", "p"], "l": ["el", "ls", "o", "log", "ol", "le", "x", "j", "ul", "c", "left", "kl", "lo", "fl", "ell", "sl", "ll", "L", "g", "nl", "il", "u", "len", "e", "f", "b", "like", "dl", "z", "lc", "v", "m", "li", "ln", "p", "dL"], "t": ["o", "type", "dt", "at", "out", "x", "j", "tu", "c", "ut", "T", "int", "ot", "fort", "y", "test", "time", "rt", "g", "ty", "h", "ts", "tt", "tz", "tf", "st", "u", "et", "f", "e", "nt", "b", "q", "pt", "w", "ta", "z", "lat", "v", "m", "r", "p"]}}
{"code": "s = input()\\ndirset = set()\\nfor i in s:\\n  dirset.add(i)\\nif \"N\" in dirset and \"S\" in dirset:\\n  if (\"E\" in dirset and \"W\" in dirset) or (not \"E\" in dirset and not \"W\" in dirset):\\n    print(\"Yes\")\\n  else:\\n    print(\"No\")\\nelif \"E\" in dirset and \"W\" in dirset:\\n  if not \"N\" in dirset and not \"S\" in dirset:\\n    print(\"Yes\")\\n  else:\\n    print(\"No\")\\nelse:\\n  print(\"No\")", "target": "108", "substitutes": {"s": ["states", "ls", "services", "fs", "S", "c", "d", "ins", "ses", "ss", "n", "ows", "cs", "ches", "os", "ds", "cells", "ips", "gs", "ists", "lines", "si", "sets", "f", "e", "ps", "ns", "ments", "es", "ions", "l", "irs", "m", "xs", "p"], "dirset": ["dirnull", "diropen", "directorycut", "pathsets", " dirtest", "directoryblock", "dirstart", " dirsetting", "dirsync", "urlspace", "buildSet", "dirsetting", "draftset", " dirsets", "runet", "directionman", "logcomplete", "Dirset", "buildset", "dirSET", "runseen", "directoryopen", "directionset", "irstart", "ircut", "directiontest", "Dirsets", "directorycomplete", " dirSet", "dirSet", "pathsche", "urlset", "directoryset", "directionSet", "Dircut", "levelSet", "directorysche", "irsetting", "fileset", " dirspace", "dirtest", "urlcomplete", "pathset", "reqSet", "urlblock", "irsets", "runset", "dirspace", "dirblock", "buildcut", "urlsync", "Dirscale", " dirvert", "irnull", "pathsync", "logset", "logsetting", "logspace", "directorylist", "pathseen", "draftsets", "dirman", "filetest", "buildopen", "directorystart", "irman", "logblock", "logvert", "draftSet", "filespace", "logsync", " diropen", "dirscale", "dirsche", "pathet", "filelist", "irSET", "reqSET", "Dirnull", "directionstart", "directoryscale", "irset", "draftint", "reqman", "DirSet", "irscale", " dircut", "buildsets", "directionnull", "buildet", "irSet", "directoryspace", "directorySet", "urlsetting", "Dirstart", " dirint", "dirlist", "directionSET", "dirseen", "runSet", "buildint", "fileSet", "levelsync", "pathSet", "diret", "reqset", "dirvert", " dirstart", "dirint", "directorysync", " dirlist", "levelsche", "dircomplete", "pathsetting", "dircut", "dirsets", "filestart", "levelset", "directionsetting", "directionsets", "urlvert", "buildseen"], "i": ["pi", "it", "uri", "iw", "x", "input", "j", "gi", "c", "d", " I", "a", "io", "ie", "int", "ind", "instance", "ini", "id", "ir", "ib", "index", "source", "ip", "si", "u", "iu", "f", "I", "b", "ai", "z", "p", "of", "v", "l", "ii", "r", "li", "ei"]}}
{"code": "k = int(input())\\n\\nqueue = [1,2,3,4,5,6,7,8,9]\\ncnt = 0\\nwhile cnt + len(queue) < k:\\n  cnt += 1\\n  n = queue.pop(0)\\n  if n%10 != 0:\\n    queue.append(n*10+n%10-1)\\n  queue.append(n*10+n%10)\\n  if n%10 != 9:\\n    queue.append(n*10+n%10+1)\\nprint(queue[k-cnt-1])", "target": "339", "substitutes": {"k": ["ik", "o", "kn", "sync", "x", "kk", "j", "c", "d", "ak", "mk", "ek", "ck", "kick", "t", "i", "y", "key", "sk", "unk", "ok", "ks", "kid", "uk", "dk", "ko", "u", "f", "b", "ki", "q", "tk", "kw", "z", "K", "l", "v", "m", "r", "p", "km", "kt", "ku"], "queue": ["core", "file", "log", "future", "table", "manager", "line", "page", "current", "Queue", "event", "output", "complete", "view", "list", "cache", "que", "config", "update", "progress", "game", "result", "loop", "entry", "qa", "collection", "pool", "ue", "plugin", "command", "console", "pause", "job", "next", "index", "channel", "sequence", "batch", "master", "server", "menu", "header", "message", "seq", "delete", "stack", "foo", "model", "enum", "stage", "lock", "buffer", "status", "q", "delay", "position", "chain", "p", "group", "main"], "cnt": ["CNT", "ucount", "cwd", "Counter", "Cnc", " cpt", "ecNT", "scnt", "acount", " counter", "acnt", "scct", "acpt", "Cpt", "ecnt", "acNT", "scount", "ucnt", "cnc", "ecnc", "Cnt", "Count", "cct", "ucct", "cNT", "Cwd", " cnc", "ecounter", " count", "acwd", "ucrt", " crt", "counter", "cpt", " cwd", " cct", "crt", "scrt", " cNT", "count"], "n": ["o", "cn", "x", "j", "c", " len", "d", "ng", " N", "nb", " p", "name", "a", "all", "num", "an", "s", "t", "ni", "i", "y", " nu", "nw", "na", "g", "count", "nn", "nan", "un", "number", "nu", "rn", " c", "u", "len", "net", "size", "fn", "f", "nt", "e", "b", "ns", "pn", "none", "one", "sn", "no", "nor", "z", "dn", "l", "v", "zn", "r", "m", "nc", "ln", "p", "ne", "N", "conn"]}}
{"code": "ans=0\\nfor _ in range(int(input())):\\n  ans+=eval(\"-\"+input().replace(\" \",\"+\"))+1\\nprint(ans)", "target": "720", "substitutes": {"ans": ["ls", "ass", "aning", "anned", "nas", "ras", "ins", "ars", "ants", "ens", "ean", "an", "s", "anc", "man", "ats", "cs", "ents", "anon", "ams", "sk", "na", "anas", "plan", "ds", "ks", "ana", "nan", "span", "can", "anes", "cons", "AN", "atan", "leans", "aned", "anne", "ANS", "lan", "ann", "ns", "ane", "ends", "ani", "aces", "ays", "mean", "aus", "ons"], "_": ["out", " __", " I", " you", "f", "I", "of", "p"]}}
{"code": "def solver(S,T):\\n    counter = 0\\n    for i in range(len(S)):\\n        Si = S[i]\\n        Ti = T[i]\\n        if Si != Ti:\\n            counter += 1\\n    return counter\\n\\nS = input()\\nT = input()\\nprint(solver(S,T))", "target": "123", "substitutes": {"S": ["SE", "U", "Spec", "D", "GS", " L", " R", "SS", "R", "NS", "Sample", " SS", "SK", " N", " I", "Ins", "Sin", "Sing", "TS", "W", "OSS", "SI", "s", "Es", "Source", "A", "L", "G", "SR", "Sa", " s", " C", "Single", "DS", "PS", " SI", "Os", "Sign", "I", "CS", "Socket", "X", "SU", "C", " B", "Su", "V", "Sort", "P", "Sl", "K", "Cs", "Session", "Sol", "H", "M", "Input", "F", "N", "Set"], "T": ["U", "TW", "D", "Tab", "DT", "Temp", "E", "CT", "Test", "B", "TS", "TB", "Type", "Y", "Te", "t", "L", "G", "UT", "Taylor", "NT", "ST", "GT", "Tar", "PT", "Q", "WT", "LT", "X", "Tem", "TG", "TT", "TM", "Tang", "TX", "V", "P", "Target", "MT", "O", "VT", "M", "TC", "F", "Pat", "N"], "counter": ["ner", "step", "type", "exit", "ter", "this", "trace", "x", "c", "er", "current", "Counter", "sum", "a", "value", "inter", "mom", "int", "instance", "n", "race", "num", "info", "loop", "pointer", "key", "keep", "inner", "entry", "time", "result", "total", "iter", "parent", "timer", "ctr", "index", "master", "number", "clock", "match", "outer", "lc", "r", "cube", "count"], "i": ["pi", "di", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "col", "a", "start", "ind", "n", "ini", "ui", "ni", "bi", "id", "g", "h", "ix", "index", "ip", "eni", "si", "u", "iu", "ti", "I", "b", "mi", "hi", "ai", "z", "p", "qi", "l", "ii", "li", "abi", "io", "vi", "zi"], "Si": ["Ca", "Ku", "Ru", " si", "Sin", "Ta", "Bi", "SI", "Ni", "ni", "Sa", "Isa", "Xi", "sa", "Pi", "Vi", "isi", "Fi", "si", "Mini", "Po", "Li", "I", "ti", "Va", "Na", "Su", "Fa", "Lu", "Sl", "chi", "Cu", " Xi", "zi"], "Ti": ["Sat", "pi", "Bu", "Ku", "xi", "Ta", "Bi", "Gi", "Ni", "ni", "Sa", "Pri", "Xi", "Lt", "Pi", "Vi", "isi", "TA", "TI", "Fi", "si", "Mini", "Tu", "Po", "Li", "ti", "I", "Ty", "Ton", "Tai", " ti", "ta", "Tan", "qi"]}}
{"code": "a = list(map(int, input().split()))\\nb = a[0]\\nc = 0\\nwhile b > 0:\\n  b = b // a[1]\\n  c += 1\\nprint(c)\\n", "target": "719", "substitutes": {"a": ["ma", "area", "auto", "o", "input", "aw", "d", "ac", "ab", "cha", "af", "int", "n", "da", "s", "an", "array", "A", "fa", "i", "y", "alpha", "sa", "abc", "span", "index", "aa", "u", "f", "e", "ad", "ca", "am", "ga", "w", "ae", "aaa", "ba", "add", "l", "r", "p", "count"], "b": ["o", "eb", "k", "x", "abb", "pb", "d", "ob", "nb", "cb", "ab", "ac", "B", "bc", "bd", "n", "A", "rb", "t", "bi", "i", "y", "bs", "g", "fb", "ib", "bad", "beta", "wb", "lb", "u", "e", "f", "ad", "ca", " B", "sb", " bc", "ba", "l", "v", "m", "bb", "r", "p"], "c": ["k", "x", "cy", "ci", "d", "cycle", "cb", "col", "ac", "ab", "int", "n", "cc", "t", "i", "cs", "y", "g", "h", "abc", "ct", "bad", "dc", "cu", "u", "f", "e", "code", "ad", "arc", "C", "w", "z", "cr", "l", "v", "lc", "pc", "m", "r", "bb", "cf", "cat", "p", "count"]}}
{"code": "S = input()\\n\\nif S[0] ==\"R\" and S[1] == \"R\" and S[2] == \"R\":\\n  print(3)\\n  \\nelif (S[0] ==\"R\" and S[1] == \"R\") or (S[1] == \"R\" and S[2] == \"R\"):\\n  print(2)\\n  \\nelif S[0] ==\"R\" or S[1] == \"R\" or S[2] == \"R\":\\n  print(1)\\n  \\nelse:\\n  print(0)", "target": "482", "substitutes": {"S": ["U", "Spec", "SH", "SO", "D", "GS", "SS", "Args", "R", "NS", "RS", "E", "JS", "Ins", "B", "Ns", "T", "Data", "TS", "W", "J", "Si", "SI", "s", "Y", "A", "G", "L", "SR", "Part", "Source", "SN", " s", "AS", "Single", "DS", "PS", "Q", "Os", "OSS", "WS", "SC", "Sign", "I", "Socket", "CS", "X", "SU", "C", "Es", "IS", "Su", "V", "Sl", "P", "OS", "K", "Session", "Service", "O", "H", "M", "Input", "F", "N", "Set"]}}
{"code": "mod=1000000007\\nn=int(input())\\na=input()\\n\\nd=[0]\\nfor i in range(1,n):\\n    if a[i-1]==a[i]:\\n        d[-1]+=1\\n    else:\\n        d.append(0)\\nans=[3,6][d[0]]\\nfor i in range(1,len(d)):\\n    if d[i-1]==d[i]==1:\\n        t=3\\n    elif d[i-1]==1 and d[i]==0:\\n        t=1\\n    else:\\n        t=2\\n    ans=(ans*t)%mod\\nprint(ans)", "target": "479", "substitutes": {"mod": ["oct", "pi", "mode", "step", "it", "sec", "x", "tr", "tu", "exp", "od", "c", "scale", "mult", "lo", "T", "int", "perm", "num", "depth", "tab", "id", "total", "time", "g", "div", "dim", "tt", "tri", "cm", "mods", "row", "max", "MOD", "Mod", "q", "w", "m", "r", "temp", "rot"], "n": ["o", "k", "x", "j", "c", " N", "nb", "pos", "an", "num", "s", "ni", "y", "h", "nn", "u", "f", " ni", "e", "nt", "b", "ns", "z", "l", "m", "r", "nc", "p", "N"], "a": ["ma", "area", "auto", "o", "x", "c", "ar", "ac", "ab", "art", "mA", "da", "an", "s", "array", "A", "fa", "y", "alpha", "sa", "ia", "aa", "u", "va", "e", "f", "b", "am", "ad", "ca", "ga", "ai", "ae", "w", "ba", "ea", "aj", "m", "ap", "p", "au"], "d": ["di", "o", "D", "dt", "k", "x", "od", "j", "c", "ded", "db", "pd", "data", "du", "da", "s", "an", "y", "sd", "dy", "g", "dim", "ds", "do", "dh", "dc", "dad", "u", "f", "e", "dd", "ad", "b", "dl", "q", "w", "dict", "z", "v", "l", "cd", "m", "dat", "p", "ld"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "ci", "yi", "start", "int", "ind", "s", "ui", "ini", "ni", "bi", "id", "y", "ix", "index", "ip", "si", "u", "iu", "e", "I", "ti", "f", "b", "end", "mi", "ai", "z", "p", "v", "l", "ii", "li", "m", "io"], "ans": ["offs", "parts", "ls", "eds", "x", "nas", "ins", "ars", "ants", "ens", "an", "s", "ads", "ats", " spans", " means", "cs", "asts", "ents", "sk", "na", "os", "ts", "ds", "ks", "trans", "span", "can", "arts", "AN", "cas", "aned", "ANS", "dd", "ann", "ad", "ps", "lan", "ns", "es", "ions", "ai", "ta", "ays", " scans", "cross", "types", "p", "aus", "ons"], "t": ["tp", "type", "at", "dt", "o", "x", "tu", "c", "T", "ot", "s", "y", "test", "time", "rt", "g", "ty", "h", "ts", "tt", "tz", "tf", "span", "u", "f", "ti", "e", "b", "w", "ta", "z", "l", "v", "te", "m", "r", "p", "tn"]}}
{"code": "N = int(input())\\nA = [0] + list(map(int, input().split())) + [0]\\npre = 0\\nyen = sum(abs(i - j) for i, j in zip(A, A[1:]))\\nans = [yen] * N\\nfor i in range(N):\\n    ans[i] += -abs(A[i] - A[i+1]) - abs(A[i+1] - A[i+2]) + abs(A[i] - A[i+2])\\nprint(*ans, sep='\\n')\\n", "target": "527", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "E", "NC", "NE", "B", "Ns", "T", "n", "J", "Sn", "Y", "L", "Ni", "G", "Len", "Num", "NB", "NT", "Size", "NN", "Q", "I", "X", "C", "Na", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["Anne", "NA", "E", "Point", "B", "W", "Pi", "An", "I", "K", "Parts", "au", "As", "Any", "Alpha", "a", "Array", "G", "Ma", "Address", "TA", "Adam", "AA", "App", "API", "Input", "M", "And", "H", "Z", "D", "S", "Args", "Auth", "CA", "All", "T", "Act", "Data", "J", "Az", "alpha", "X", "Ang", "The", "C", "Info", "Na", "V", "Sum", "LA", "U", "Ca", "Java", "At", "Y", "First", "L", "Part", "AS", "Ab", "AP", "Average", "Wa", "Ha", "Sam", "Product", "MA", "ai", "P", "Rap"], "pre": ["pi", "NA", "ji", "II", "ci", "ori", "pos", "ind", "Pref", "syn", "ni", "Pre", "arr", "CNN", "na", "nn", "post", "span", "len", "adj", "Na", "init", "PRE", "skip", "li", "prev", "p", "ne"], "yen": [" yenn", "yeen", "ysten", "Yen", "yener", "Ysten", "Yend", " ypen", "oypen", "Ylen", " ysten", " yend", "oyen", "ylen", "Ypen", "Yener", "oylen", " ylen", "ypen", "Yenn", "yeend", "yenn", "yeener", "yeenn", "oysten", "yend", " yener"], "i": ["mini", "it", "xi", "c", "anti", "oi", "phi", "uli", "bi", "source", "ip", "multi", "eni", "iu", "f", "I", "ti", "mi", "z", "m", "io", "p", "ji", "k", "x", "gi", "ci", "d", "a", "ori", "id", "y", "ix", "hi", "ii", "li", "vi", "pi", "di", "uri", "yi", "ie", "ind", "n", "J", "ini", "site", "index", "u", "e", "init", "chi", "qi", "v", "l", "ei", "o", "slice", " I", "start", "ui", "ni", "info", "api", "ij", "si", "ami", "b", "my", "q", "ai"], "j": ["ji", "o", "k", "x", "xi", "d", "a", "pos", "oj", "n", "J", "ni", "bi", "y", "g", "ij", "jl", "si", "u", "ja", "e", "obj", "adj", "b", "ani", "dj", "z", "chi", "qi", "v", "l", "jp", "aj", "ii", "m", "p", "uj"], "ans": ["NA", "asses", "Ann", "S", "san", "ras", "nas", "ins", "ases", "a", "ars", "ants", "atten", "Ns", "amps", "ens", "an", "s", "ats", "ents", "anon", "sk", "annot", "na", "en", "anas", "plan", "nan", "An", "ana", "nn", "can", "anes", "AN", "atan", "aned", "cas", "ANS", "ann", "lan", "ns", "Na", "ai", "ani", "aces", "ays", "params", "ln", "p", "ons"]}}
{"code": "#\u305d\u306e10\\n\\nO = str(input())\\nE = str(input())\\nP = []\\nfor i in range(len(O)):\\n    P.append(O[i])\\n    if i < len(E):\\n        P.append(E[i])\\nprint(''.join(P))", "target": "102", "substitutes": {}}
{"code": "def answer(s: str) -> str:\\n    return ''.join(s[0].upper() for s in s.split())\\n\\n\\ndef main():\\n    s = input()\\n    print(answer(s))\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "222", "substitutes": {"s": ["states", "services", "parts", "ls", "string", "o", "js", "S", "sync", "input", "su", "x", "fts", "search", "c", "d", "terms", "ws", "ses", "a", "ss", "sl", "answer", "n", "args", "t", "sports", "strings", "i", "space", "g", "comments", "sections", "ds", "blocks", "ts", "source", "gs", "lines", "sf", " S", "sq", "south", "si", "sets", "spec", "f", "sym", "e", "b", "ns", "new", "tests", "es", "sb", "w", "sv", "params", "v", "less", "sg", "m", "xs", "str", "sing", "words", "p"]}}
{"code": "def str2bitstr(chs):\\n    val = int(chs)\\n    tmp = bin(val)[2:]\\n    tmp2 = '0' * (60 - len(tmp))\\n    return tmp2 + tmp\\n\\n\\nn = int(input())\\na = list(map(str2bitstr, input().split()))\\n\\ncnts = [0] * 60\\n\\nfor item in a:\\n    for i, ch in enumerate(item):\\n        if ch == '1':\\n            cnts[i] += 1\\n\\nret = 0\\nnow = 1\\n\\nfor i in range(1, 61):\\n    kumi = cnts[-i] * (n - cnts[-i]) % (10 ** 9 + 7)\\n    ret += kumi * now % (10 ** 9 + 7)\\n    now *= 2 % (10 ** 9 + 7)\\n    ret = ret % (10 ** 9 + 7)\\n\\nprint(ret % (10 ** 9 + 7))\\n", "target": "353", "substitutes": {"chs": ["schsid", "achsb", "echsi", "CHsi", "chsid", "achsi", "schsi", "CHsb", "chsi", "echsid", "ichsb", "schsb", "CHs", "achsid", "achs", "echsb", "chsb", "ichsi", "echs", "schs", "ichs"], "val": ["part", "loc", "ol", "x", "data", "value", "VAL", "int", "ind", "sl", "abs", "valid", "num", "var", "test", "cond", "Val", "index", "vals", "bin", "sel", "seq", "len", "pre", "eval", "f", "rev", "ref", "v", "p", "temp", "rot", "arg", "count"], "tmp": ["part", "Temp", "ott", "bt", "j", "sp", "xy", "nb", "copy", "dest", "data", "const", "vv", "etc", "ff", "vt", "amp", "rb", "space", "buf", "td", "test", "cmp", "mem", "fb", "sample", "tt", "cp", "py", "table", "zip", "mp", "foo", "pre", "buff", "obj", "toc", "stuff", "resp", "mm", "sb", "emp", "yy", "v", "flat", "attr", "jp", "bb", "txt", "sam", "p", "temp", "elt"], "tmp2": ["tmp4", "txt2", "temp2", "test2", "temp0", "testn", " tmpn", "txt1", "tempb", "test4", "tempn", "tmpb", "tmp0", " tmp0", "tmpn", " tmp4", "temp1", " tmpb", "test1", "tmp1", "txtb", "temp4", "txt0", " tmp1"], "n": ["o", "k", "x", "j", "c", "d", "nb", "num", "s", "t", "y", "g", "en", "h", "nn", "number", "nr", "u", "f", "nt", "e", "b", "ns", "sn", "no", "w", "z", "v", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "access", "input", "c", "ama", "data", "ac", "af", "mA", "args", "ata", "s", "an", "array", "A", "da", "Array", "list", "alpha", "na", "sa", "aa", "items", "la", "va", "f", "b", "ad", "tta", "ans", "ai", "ae", "aaa", "ea", "aj", "ao", "m", "p", "au"], "cnts": ["cNTd", "cwdf", " cwdf", "cptl", " ccountl", "CNTs", "countf", "cNTps", "cndl", "cctf", "cNTs", "cntls", "CNTd", "cctl", " cntb", "cnoti", "cwdb", " cwdb", "countb", "cntb", "countps", "CNTf", "ccounti", " cndps", "cNTi", "cnti", "ccountf", "cwdl", "cndf", "ccountl", "Cnts", "cwds", " ccountf", "cnots", "Cntd", "cNTls", " cntls", "cnds", " cwds", " cndls", "cptd", " ccounts", "cnotl", "cctb", "cntf", " cntl", " cntf", " cnds", "cntps", "counts", "cndd", "Cntl", "cNTl", " ccounti", "countl", "cndp", "cpts", "cndps", " cndp", "CNTl", "cntl", " cntps", "cntp", "ccts", "Cntf", "cnotf", "cndls", "cptf", "cNTp", "ccounts", " cnti", "countp", "countls", "cntd", "cNTf", " cntp", " cwdl"], "item": ["el", "area", "it", "loc", "case", "_", "input", "j", "gi", " it", "gu", "ipp", "data", "ie", "section", "app", "instance", "num", "array", "bi", "id", "iq", "result", "bar", "entry", "mem", "iter", "ib", "atom", "Item", "ow", "ip", "channel", "bit", "items", "char", "u", "hop", "code", "rec", "q", "chi", "v", "cat", "article", "li", "order"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "oi", "phi", "io", "ie", "int", "ind", "s", "ui", "ini", "t", "bi", "id", "y", "ix", "index", "ip", "eni", "si", "u", "iu", "fi", "f", "I", "ti", "e", "b", "ai", "z", "chi", "v", "l", "ii", "li", "m", "ei", "p"], "ch": ["cur", "k", "cht", "j", "c", "sch", "cher", "ci", "che", "tch", "col", "bh", "cha", "ot", "bi", "y", "cho", "sk", "div", "h", "cor", "cp", "channel", "ich", " chunk", "char", "ach", " cur", "chan", "q", "sh", "chi", "ic", "conf", "Ch", " Ch", "p", "CH", "qu", "cl"], "ret": ["cur", "part", "success", "det", "alt", "after", "current", "sum", "back", "rets", "RET", "bug", "int", "re", "fun", "trial", "num", "info", "result", "id", "fin", "get", "rt", "offset", "iter", "next", "py", "detail", "att", "replace", "len", "reply", "nt", "default", "fortune", "res", "final", "match", "code", "fit", "gt", "opt", "inf", "feat", "status", "Ret", "ref", "flat", "r", "bf", "over", "p", "rc", "count", "conn"], "now": ["cur", "auto", "future", "j", "after", "current", "cb", "nb", "old", "sum", "start", "num", "info", "result", "today", "time", "rt", "self", "ord", "ow", "post", "next", "last", "nr", "reply", "NOW", "size", "nt", "max", "since", "resp", "new", "shift", "wait", "nc", "prev", "order", "rc", "Now", "count"], "kumi": ["gumi", "khuri", "gum", " kuri", "khumi", " kum", "Kumi", "Kai", "kmi", "ksuri", "Kmi", "gai", "kui", "Kum", "kum", " kui", "ksmi", "kai", "khmi", "ksumi", "gmi", "kuri", " kmi", "khui", "ksui", " kai"]}}
{"code": "H,W,N = map(int,input().split())\\nNli=[]\\nfor k in range(N):\\n    a,b=map(int,input().split())\\n    for n in range(-1,2):\\n        for m in range(-1,2):\\n            if 0<=a-2-m<H-2 and 0<=b-2-n<W-2:\\n                Nli.append((b-n)*(H)+(a-m))\\nimport collections\\ns = collections.Counter(Nli)\\nv = list(s.values())\\nprint((H-2)*(W-2)-len(set(Nli)))\\nfor k in range(1,10):\\n    print(v.count(k))", "target": "776", "substitutes": {"H": ["U", "SH", "D", "S", "HD", "HC", "R", "E", "B", "RH", "T", "HH", "NH", "J", "Y", "A", "L", "G", "Wh", "HK", "EH", "h", "Q", "Ha", "WH", "X", "C", "MH", "HI", "V", "w", "P", "K", "M", "F", "CH", "Z"], "W": ["U", "GW", "SH", "D", "Width", "Sw", "E", "Weight", "wa", "B", "T", "WR", "Y", "A", "L", "Wh", "G", "Web", "DW", "WP", "h", "NW", " w", "Q", "WC", "Wa", "Wi", "X", "SW", "WN", "C", "CW", "Win", "V", "w", "P", "K", "MW", "M", "VW", "F", "WD", "Z"], "N": ["U", "D", "S", "R", "NS", "E", "NE", "B", "Ns", "T", "J", "Y", "A", "L", "G", "Len", "Num", "NM", "Size", "NN", "Q", "I", "X", "C", "Na", "Ne", "V", "w", "P", "K", "O", "M", "F", "Z"], "Nli": ["Wlu", "XLi", " Nri", " Nlo", "Xni", "Lni", "NLi", "Nlist", "Xlu", "Mli", "Outili", "Llu", "Lli", "nlu", "Nri", " NLi", "NLI", "nLI", "Nni", "Ori", " Nni", "nli", "MLI", "Nili", "OLi", "nili", "LLi", "Nlu", "nlo", "Oli", "Outlo", "Outlu", "nlist", "Mlo", " NLI", "Wili", "Wli", "Wlo", "Nlo", "Xli", "Outli", "nri", " Nlist", "Olist", " Nlu", "nLi"], "k": ["kj", "ik", "o", "kn", "ke", "x", "kk", "work", "j", "c", "d", "ak", "ijk", "ac", "kl", "ck", "i", "id", "y", "key", "sk", "unk", "h", "ok", "ks", "uk", "ko", "u", "f", "ki", "q", "w", "kw", "K", "r", "p", "km", "ku"], "a": ["ma", "x", "c", "aw", "ak", "ac", "ab", "wa", "da", "an", "A", "y", "alpha", "sa", "h", "aa", "u", "va", "f", "AA", "ad", "am", "ga", "ai", "ae", "w", "z", "ba", "M", "p", " A"], "b": ["o", "x", "j", "c", "d", "nb", "ab", "bh", "B", "bc", "num", "A", "rb", "i", "y", "bs", "h", "fb", "aa", "wb", "u", "e", "f", " B", "sb", "w", "z", "ba", "l", "r", "M", "p"], "n": ["o", "x", "j", "c", "d", "nb", "an", "num", "t", "ni", "i", "y", "mn", "na", "g", "h", "nn", "un", "u", "f", "e", "ns", "no", "w", "z", "l", "r", "nc", "M", "p"], "m": ["ma", "o", "x", "j", "c", "mad", "om", "d", "nm", "num", "an", "man", "i", "y", "mn", "g", "h", "ym", "cm", "u", "f", "e", "am", "mm", "q", "pm", "w", "z", "l", "r", "M", "p", "bm"], "s": ["ls", "o", "js", "S", "sync", "j", "c", "d", "ses", "copy", "ss", "vs", "t", "strings", "i", "cs", "g", "os", "h", "ds", "cells", "stores", "si", "u", "f", "e", "objects", "ps", "ns", "values", "es", "tests", "ions", "sv", "l", "stats", "r", "p", "ing"], "v": ["o", "j", "c", "d", "vm", "value", "vs", "vt", "list", "vp", "t", "i", "y", "g", "val", "h", "lv", "vals", "u", "f", "e", "values", "V", "w", "sv", "vol", "nv", "l", "r", "p", "vi", "count"]}}
{"code": "from collections import deque\\nN = int(input())\\n\\nans = 0\\nls = ['3','5','7']\\nfor x in ls:\\n    st = deque([])\\n    flag = False\\n    st.append((x, flag))\\n    while st:\\n        cur, f = st.pop()\\n        if f:\\n            ans += 1\\n        else:\\n            if '3' in set(list(cur)) and '5' in set(list(cur)) and '7' in set(list(cur)):\\n                # print(cur)\\n                f = True\\n                ans += 1\\n        for y in ls:\\n            if int(cur + y) <= N:\\n                st.append((cur+y, f))\\nprint(ans)", "target": "212", "substitutes": {"N": [" cats", " fl", "S", " L", " strand", " flags", " fn", " obs", " bit", "Ns", " nat", "n", "s", " SN", " s", " n", " na", " ns", " fs", " SA", " c", " number", " state", " features", " sn"], "ans": ["aves", "asi", "san", "aning", "ras", "ins", "ars", "ants", "flags", "ens", "an", "s", "man", " means", "ats", "ents", "anon", "sk", "annot", "sa", "anas", "ds", "ks", "An", "can", "AN", "aned", "leans", "ANS", "lan", "ann", "ns", "aces", "ays", "acs", "aus", "ons"], "ls": ["lp", " fl", "lf", "sels", " obs", " LS", " line", "ses", "kl", " sett", " ll", "LS", "sl", " strings", "sts", "ll", " lb", "s", "St", " s", " ts", "cs", " rc", " cs", "ts", "ds", "lists", " ns", "lv", "les", " fs", "ols", " l", " c", "la", "len", " lines", " ff", "ps", "ns", " bl", "l", "lc", "las", " ss", "xs", "ln", "ld", "lt"], "x": ["xp", "j", "exp", "c", "xy", "event", "int", "n", "num", " xx", "y", " X", "xxx", "con", "xt", "rx", "ix", "index", "fx", " c", "ex", "xc", "ft", "X", "xx", "code", "xf", "wx", " i", "q", "w", "z", "v", "lc", "l", "cross", "str", "xs", "p"], "st": ["est", "ust", "rest", "sta", "std", "c", "sp", "d", "ste", "ist", "inst", "start", "const", "ss", "fl", "sl", "int", "ast", "sts", "s", "list", "t", "St", " St", "stop", "fe", "sw", "sa", "en", "ST", "ts", "bl", "set", "ost", "stack", "ft", "nt", "end", "stage", "stri", "store", "sb", "pt", "sh", "p", "cr", "l", "sc", "str", "fr", "se", "r", "sth", "cl"], "flag": ["log", "type", "sync", "ar", "bug", "lag", "start", "fl", "int", "flags", "fun", "debug", "long", "weight", "id", "leaf", "force", "con", "fd", "FLAG", "offset", "ret", "nl", "bit", "ag", "fg", "len", "like", "store", "child", "status", "ish", "feat", "sign", "style", "cat", "Flag", "group", "count"], "cur": ["loc", "rest", "sur", "c", "cer", "current", "ver", "col", "pair", "inter", "uc", "const", "coll", "start", "sl", "dec", "ind", "src", "per", "var", "ch", "result", "ph", "con", "iter", "ctr", "dr", "pr", "sel", "char", "ur", "u", "code", "cont", "car", "child", "desc", "cr", "cat", "sc", "str", "ser", "r", "cf", "prev", "Cur", "rc"], "f": ["fs", "j", "lf", "c", "d", "fl", "af", "fc", "ff", "F", "fac", "fa", "t", "rf", "i", "fe", "fd", "fb", "h", "sf", "fg", "u", "fi", "e", "b", "fen", "v", "l", "flat", "found", "fr", "bf", "cf", "p", "fp"]}}
{"code": "a = int(input()[-1])\\nprint(a in [0,1,6,8] and \"pon\" or a == 3 and \"bon\" or \"hon\")", "target": "595", "substitutes": {"a": ["ma", "area", "ha", "acha", "input", "c", "aw", "ama", "data", "wa", "author", "ac", "cha", "aux", "af", "answer", "pa", "action", "n", "all", "an", "A", "fa", "i", "alpha", "na", "sa", "ana", "ia", "span", "aa", "la", "va", "f", "b", "sha", "ca", "am", "pai", "ga", "ai", "w", "ae", "asa", "aj", "p", "form", "audio", "ka"]}}
{"code": "n = int(input())\\napple = []\\nfor _ in range(n):\\n    a, b = map(int, input().split())\\n    apple.append([b, a])\\napple = sorted(apple)\\ncount = 0\\ns = 0\\nfor i in apple:\\n    if count + i[1] <= i[0]:\\n        s += 1\\n        count += i[1]\\n    else:\\n        s = 0\\n        break\\nprint(\"Yes\" if s==n else \"No\")", "target": "55", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "num", "t", "y", "g", "network", "nn", "number", "nr", "size", "f", "e", "nt", "ns", "sn", "no", "nor", "z", "l", "m", "r", "nc", "p", "ne", "N"], "apple": ["library", "auto", "file", "wheel", "element", "x", "work", "vine", "bug", "iOS", "pattern", "app", "une", "int", "pal", "google", "trial", "all", "list", "cache", "array", "share", "allow", "arr", "api", " apples", "python", "na", "os", "install", "ack", "pack", "false", "image", "css", " Apple", "win", "un", "ip", "bin", "number", "index", "yahoo", "u", "parse", "address", "ee", "nt", "fruit", "pie", "scan", "lock", "android", "child", "book", "broken", "ani", "example", "patch", "apps", "air", "Apple", "li", "p", "au"], "_": [" __", " un", " line", " col", " p", " time", "num", " f", "f", " k"], "a": ["auto", "k", "x", "c", "d", "ab", "ac", "app", "int", "pa", "da", "an", "A", "y", "sa", "offset", "aa", "u", "va", "oa", "e", "f", "ad", "ca", "ai", "ae", "ba", "r", "p"], "b": ["eb", "k", "abb", "x", "j", "c", "d", "ob", "nb", "ab", "B", "bd", "pa", "xb", "num", "rb", "A", "y", "bs", "number", "aa", "f", "e", "sb", "w", "ba", "v", "r", "bf", "bb", "p"], "count": ["case", "c", "sum", "nb", "start", "int", "ind", "cc", "num", "depth", "ch", "cache", "id", "y", "weight", "g", "min", " counts", "span", "index", "number", "si", "size", "f", "Count", "nt", "e", "code", "base", "child", "no", "q", "z", "l", "length", "conf", "p"], "s": ["states", "ls", "o", "sec", "S", "sync", "c", "d", "sum", "ss", "start", "ind", "seconds", "abs", "t", "cs", "y", "os", "g", " counts", "h", "span", "number", "sf", "lines", "south", "si", "u", "size", "f", "e", "sym", "Count", "ps", "ns", "sn", "l", "less", "sg", "conf", "p"], "i": ["pi", "o", "k", "x", "xi", "j", "gi", "c", "ci", "d", "yi", " I", "start", "int", "ind", " iP", "ini", "t", "id", "iq", "y", " j", " x", "index", "ip", " index", " c", "si", " id", "u", "iu", "e", "ti", "I", "f", "ai", "w", " iT", "z", "qi", "v", "l", "ii", "ic", "li", "m", "p"]}}
{"code": "A, B, C = input().split(' ')\\nif int(C) <= (int(A) + int(B)):\\n    print('Yes')\\nelse:\\n    print('No')", "target": "618", "substitutes": {"A": ["Ac", "U", "AR", "D", "S", "R", "E", "a", "T", "W", "IA", "Y", "G", "L", "alpha", "Art", "SA", "AU", "An", "EA", "Ar", "I", "AA", "X", "V", "P", "K", "AF", "AB", "AC", "M", "F", "N", "LA"], "B": ["U", "D", "BF", "R", "E", "LB", "BB", "T", "W", "BE", "J", "Y", "L", "G", "Ab", "BA", "Blue", "OB", "Q", "Bs", "DB", "WB", "I", "b", "X", "SB", "Block", "V", "P", "BC", "AB", "M", "F", "N"], "C": ["U", "Ca", "D", "S", "c", "R", "E", "CT", "CA", "T", "W", "Y", "CU", "L", "G", "Q", "I", "X", "DC", "V", "P", "CC", "Cs", "K", "CR", "VC", "Ch", "O", "AC", "M", "H", "F", "CM", "N"]}}
{"code": "n , m = map(int , input().split())\\na =[]\\nb=[]\\nfor i in range(n):\\n\ta.append(list(map(int , input().split())))\\nfor i in range(m):\\n\tb.append(list(map(int, input().split())))\\nfor i in range(n):\\n\tnow =10**9+90000\\n\tidx=0\\n\tfor j in range(m):\\n\t\td=abs(a[i][0]-b[j][0])+abs(a[i][1]-b[j][1])\\n\t\tif(d<now):\\n\t\t\tnow=d\\n\t\t\tidx=j+1\\n\tprint(idx)", "target": "3", "substitutes": {"n": ["o", "k", "x", "c", "nb", "ny", "an", "num", "s", "t", "y", "mn", "en", "nan", "nn", "u", "size", "net", "f", "e", "ns", "sn", "no", "w", "z", "l", "v", "nc", "p", "ne", "N"], "m": ["o", "mc", "k", "x", "c", "s", "an", "range", "y", "mn", "time", "g", "h", "md", "cm", "u", "e", "f", "one", "mu", "sm", "mm", "q", "w", "z", "v", "l", "r", "M", "p"], "a": ["ma", "area", "x", "c", "aw", "ar", "ama", "ab", "ac", "da", "an", "s", "array", "A", "y", "alpha", "sa", "ana", "ia", "aa", "la", "u", "e", "f", "am", "ad", "ai", "ae", "w", "ba", "l", "ea", "aj", "p", "au"], "b": ["o", "eb", "k", "mb", "x", "pb", "c", "ob", "nb", "ab", "bh", "B", "bd", "bis", "abs", "an", "s", "rb", "y", "bs", "g", "ib", "aa", "u", "lb", "e", "f", "base", "sb", "w", "z", "ba", "l", "v", "r", "bb", "p"], "i": ["ik", "pi", "di", "o", "k", "x", "xi", "c", "ci", "yi", "ri", "oi", "ie", "ori", "int", "ind", "ui", "ini", "ni", "bi", "id", "y", "ij", "ix", "ip", "si", "u", "iu", "e", "ti", "I", "mi", "ki", "im", "ai", "z", "p", "qi", "v", "l", "ii", "li", "io"], "now": ["lim", "auto", "df", "here", " Now", "later", "this", "first", "done", "pg", "after", "off", "current", "old", "start", "today", "time", "g", "force", " NOW", "we", "self", "ord", "ow", "md", "next", "tmp", "then", "always", "last", "size", "NOW", "since", "f", "dd", "max", "before", "seed", "new", "mm", "gh", "where", "aj", "wait", "bb", "length", "order", "Now"], "idx": [" idb", " idz", "indx", "indz", "indxc", " idy", "idxs", "Idxc", "idexs", "indxs", "idxc", "indxb", "idey", "indy", "Idx", "idz", "Idb", "indb", "idxb", "Idy", " idxs", "idb", "Idxb", " idxc", "Idz", "idez", "idy", "idex", " idxb"], "j": ["kj", "ji", "o", "k", "x", "week", "c", " ii", "jc", "start", "ind", "J", "y", " dj", "jan", "g", "ij", "h", "bj", "ix", "jl", "job", "index", "jo", "si", "u", "ja", "e", "je", "f", "dx", "jj", "end", "q", "dj", "im", "w", "z", "l", "jp", "jam", "ii", "v", "li", "aj", "p", "uj"], "d": ["D", "daily", "dt", "k", "x", "c", "start", "du", "bd", "ind", "da", "s", "t", "gd", "sd", "dy", "g", "h", "date", "ds", "do", "day", "dc", "u", "f", "e", "dx", "dd", "ad", "w", "z", "dm", "l", "v", "cd", "r", "dat", "p"]}}
{"code": "str_n = input()\\ndigits = [int(c) for c in str_n]\\n\\nif sum(digits[1:]) == 9 * (len(digits) - 1):\\n    print(sum(digits))\\nelse:\\n    print(digits[0] + 9 * (len(digits) - 1) - 1)\\n", "target": "2", "substitutes": {"str_n": ["int_num", "str_b", "str1b", "int2c", " str2n", "str_p", "str2c", "str1n", " str2b", "str1p", " str_b", "int_n", "int_c", " str2p", "int2num", "str2p", "str_num", "str2num", "str2b", "int_N", " str_p", "str_c", "int2n", " str2N", "str1N", "str2n", "int2N", "str2N", " str_N", "str_N"], "digits": [" digests", "signitions", "digitit", "signals", "digitests", "dimits", "digitits", "posits", " digit", "generions", "logions", "dimit", "positals", "digions", "digals", "decits", "integats", " digals", "decists", "signests", "generbits", "Digits", "Digensions", " digites", "signitals", "dimats", "integit", "decbits", " digitals", "digats", "digitions", "decions", "signbits", "digit", "signit", "digites", "generits", "decests", "digensions", "signits", "generites", " digions", "decit", "Digit", "logists", "digbits", "signists", "digists", "logits", "decites", "signions", " digitions", "digitals", "logbits", "integensions", " digbits", "dimensions", "digests", "posbits", "Digats", "integits", "positions"], "c": ["it", "k", "x", "input", "ci", "d", "col", "a", "ac", "uc", "n", "all", "s", "cc", " C", "t", "ch", "i", "id", "g", "h", "abc", "self", "word", "ct", "u", "e", "f", "b", "code", "C", " i", "w", "z", "l", "lc", "r", "m", "comment", "nc", "p", "count"]}}
{"code": "input()\\nprint \" \".join(raw_input().split()[::-1])", "target": "248", "substitutes": {}}
{"code": "# https://atcoder.jp/contests/abc150/tasks/abc150_d\\n# \u534a\u516c\u500d\u6570X\u3068\u306f\u3001X=a_k (p_k + 0.5) for any k \u3092\u6e80\u305f\u3059\u6570\u5b57\u3067\u3042\u308b(p_k\u306f\u8ca0\u306f\u306a\u3044\u6574\u6570)\\n# 2\u3092\u639b\u3051\u308c\u3070\u30012X=a_k P_k where P_k=2p_k+1 \u3068\u306a\u308b\u30022X\u306f\u6570\u5217A\u306e\u516c\u500d\u6570\u3068\u89e3\u91c8\u3067\u304d\u308b\u3002\\n# \u3088\u3063\u3066\u3053\u306e\u554f\u984c\u306f\u3001a_k (k=1...N)\u306e\u516c\u500d\u65702X \u306f 0<=X<=M\u3092\u6e80\u305f\u3059\u7bc4\u56f2\u306b\u3044\u304f\u3064\u5b58\u5728\u3059\u308b\u304b\uff1f\u3068\u3044\u3046\u98a8\u306b\u8aad\u307f\u66ff\u3048\u3089\u308c\u308b\u3002\\n# \u6570\u5217A\u306e\u6700\u5c0f\u516c\u500d\u6570\u30922lcm\u3068\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u7b54\u3048\u306e\u5019\u88dc\u306flcm\u306e\u500d\u6570\u3067\u3042\u308b\u3068\u3053\u308d\u307e\u3067\u7d5e\u308a\u8fbc\u3081\u305f\u3002\\n# \u3053\u308c\u3067\u7b54\u3048\u306e\u5019\u88dc\u3092\u6700\u5c0f\u516c\u500d\u6570\u306e\u534a\u5206\u3001lcm\u306e\u500d\u6570\u3067\u3042\u308b\u3068\u3053\u308d\u307e\u3067\u7d5e\u308a\u8fbc\u3081\u305f\u3002\\n\\n# \u3068\u3053\u308d\u3067P_k\u306f\u5fc5\u305a\u5947\u6570\u3067\u306a\u3051\u308c\u3070\u884c\u3051\u306a\u3044\u306e\u3060\u304b\u3089,X\u3068a_k\u306f\u540c\u3058\u56de\u65702\u3067\u5272\u308a\u5207\u308c\u306a\u3051\u308c\u3070\u884c\u3051\u306a\u3044\u3002\\n# \u3053\u308c\u3092\u6e80\u305f\u3059X\u306f,lcm\u304cP_k\u3068\u540c\u3058\u56de\u65702\u3067\u5272\u308a\u5207\u308c\u308b \u304b\u3064 lcm\u306e\u5947\u6570\u500d\u306e\u6570\u3067\u3042\u308b\u3002\\n\\nimport sys\\nsys.setrecursionlimit(1 << 25)\\nread = sys.stdin.readline\\nra = range\\nenu = enumerate\\n\\n\\ndef read_ints():\\n    return list(map(int, read().split()))\\n\\n\\nMOD = 10**9 + 7\\nINF = 2**31  # 2147483648 > 10**9\\n# default import\\nfrom fractions import gcd\\n\\n\\ndef lcm(a, b):\\n    # \u6700\u5c0f\u516c\u500d\u6570 #\u5358\u4f4d\u5143\u306f1\\n    g = gcd(a, b)\\n    return a // g * b\\n\\n\\nN, M = read_ints()\\nA = read_ints()\\nX = 1\\nfor a in A:\\n    X = lcm(X, a)\\nX = X // 2\\n\\n# \u3059\u3079\u3066\u306ea//2 \u306fX(lcm\u3068\u540c\u3058\u56de\u65702\u3067\u5272\u308a\u5207\u308c\u306a\u3044\u3051\u308c\u3070\u884c\u3051\u306a\u3044)\\nlcm = X\\nn_div = 0\\nwhile lcm & 1 == 0:\\n    lcm //= 2\\n    n_div += 1\\n\\nfor a in A:\\n    if n_div != 0 and (a // 2) % (pow(2, n_div)):\\n        print(0)  # \u5272\u308a\u5207\u308c\u306a\u304b\u3063\u305f\u6642\u70b9\u3067\u305d\u306e\u3088\u3046\u306a\u534a\u516c\u500d\u6570\u306f\u5b58\u5728\u3057\u306a\u3044\\n        exit()\\n\\n\\nprint((M // X + 1) // 2)  # \u5947\u6570\u500d\u306elcm\u306e\u500b\u6570 \u3064\u307e\u308a\u3059\u3079\u3066-\u5076\u6570\u306e\u5206\\n", "target": "385", "substitutes": {}}
{"code": "# -*- coding: utf-8 -*-\\n\\nimport sys\\nfrom math import ceil\\n\\nfor line in sys.stdin.readlines():\\n    List = map(int, line.strip().split())\\n    \\n    n = List[0]\\n    yen = 100000\\n    for i in xrange(n):\\n        yen *= 1.05\\n        yen = int(ceil(yen/1000)) * 1000\\n    print yen", "target": "569", "substitutes": {}}
{"code": "# https://atcoder.jp/contests/agc012/tasks/agc012_a\\n\\nn = int(input())\\nnums = [int(i) for i in input().split()]\\nnums.sort()\\nnums = nums[n:]\\n\\nans = 0\\nfor i in range(0, len(nums), 2):\\n    ans += nums[i]\\nprint(ans)", "target": "438", "substitutes": {}}
{"code": "N_ko = int(input())\\nK = int(input())\\nx_s = list(map(int, input().split()))\\n\\nans_list = [min(abs(i - 0), abs(K - i)) for i in x_s]\\nans = 2 * sum(ans_list)\\n\\nprint(ans)", "target": "446", "substitutes": {"N_ko": ["N2lo", "N2xi", "N_i", "N_xi", "Ns_ko", "NFlo", "N2ko", "N2i", "Ns_lo", "N_lo", "NFi", "Ns_xi", "NFko", "Ns_i", "NFxi"], "K": ["U", "KI", "KR", "D", "Ku", "k", "S", "SK", "Ka", "T", "W", "J", "Y", "G", "L", "sk", "KK", "HK", "ks", "Q", "I", "X", "C", "V", "P", "KA", "Sk", "KS", "H", "M", "F", "N", "Z"], "x_s": ["x_si", " x_si", " x_z", "X_s", "X_n", "x_n", "xKs", "XKi", " x_i", "XKn", "XKS", "xKS", "X_S", "x_i", "XKs", "xKi", "x_S", "X_i", "xKn", "x_z"], "ans_list": ["ansxlisted", "ans_listed", "ans_set", "ants_listed", "ants_list", "ans2LIST", "ans_test", "ans2list", "ansxlist", "ans_l", "ANS_set", "ANS_l", "ants_LIST", "ans2listed", "ANS_list", "ans_LIST", "ants_test", "ansxLIST", "ans2test", "ansxtest"], "i": ["ik", "pi", "di", "o", "ji", "x", "xi", "j", "c", "gi", "d", "phi", "oi", " I", "io", "pos", "int", "ind", "n", "s", "ini", "t", "bi", "id", "y", "alpha", "Xi", "ij", "ix", "index", "ip", "si", "u", "iu", "f", "I", "ti", "e", "b", "ai", "z", "chi", "l", "v", "ii", "m", "li", "p", "zi"], "ans": ["ls", "anus", "san", "nas", "ins", "ases", "ars", "ants", "ens", "an", " means", "ats", "asts", "cs", "ians", "sk", "na", "anas", "ds", "ks", "ids", "nan", "span", "ana", "anes", "can", "cons", "AN", "cas", "leans", "atan", "ANS", "activation", "ann", "lan", "ns", "es", "features", "ani", "cross", "aus", "ons"]}}
{"code": "n,m,x,y=map(int,input().split())\\nX = list(map(int,input().split()))\\nY = list(map(int,input().split()))\\nif max(X) < min(Y) and max(X)+1 > x and max(X)+1 <= y:\\n  print(\"No War\")\\nelse:\\n  print(\"War\")", "target": "670", "substitutes": {"n": ["o", "k", "j", "c", "nm", "name", "ny", "i", "mn", "g", "nn", "u", "f", "e", "b", "ns", "w", "z", "l", "v", "r", "nc", "p", "N"], "m": ["o", "k", "c", "d", "mr", "t", "i", "time", "g", "h", "ms", "mx", "md", "month", "cm", "mo", "e", "f", "b", "mi", "mm", "w", "v", "l", "r", "M", "p"], "x": ["j", "c", "px", "d", "xy", "int", "t", "i", "width", "time", "min", "g", "ax", "h", "mx", "index", "ex", "u", "f", "max", "e", "dx", "b", "xx", "w", "z", "v", "l", "r", "p"], "y": ["ey", "o", "sy", "iy", "ya", "j", "cy", "c", "d", "yi", "oy", "ny", "zy", "t", "i", "dy", "min", "h", "ay", "ym", "py", "ies", "u", "f", "e", "max", "b", "yd", "yy", "w", "z", "v", "l", "p", "vy"], "X": ["U", "NY", "S", "ZX", "Max", "Width", "Time", "Do", "E", "Location", "XX", "T", "W", "J", "L", "DX", "AX", "Size", "IP", "Ex", "Q", "Work", "WH", "I", "XY", "PE", "XL", "TX", "Cross", "V", "ML", "P", "XP", "K", "MX", "O", "H", "M", "IX", "F", "XM", "N", "Z"], "Y": ["NY", "U", "MY", "S", "cy", "Py", "Cy", "E", "XX", "xy", "ny", "T", "W", "J", "Az", "L", "Size", "IP", "Q", "IO", "I", "XY", "My", "IE", "V", "P", "z", "K", "YA", "O", "M", "YY", "N", "Z"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\ns=[0]*n\\ndiff=[0]*(n)\\nSum=0\\nfor i in range(n):\\n  Sum+=a[i]\\n  s[i]=Sum\\n#print(s)\\nSUM=sum(a)\\nfor i in range(n):\\n  diff[i]=abs(s[i]-(SUM-s[i]))\\n  \\n#print(diff)\\nprint(min(diff))", "target": "728", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "sum", "Ns", "num", "t", "y", "g", "count", "h", "network", "nan", "nn", "nu", "u", "size", "net", "f", "e", "nt", "b", "ns", "w", "z", "l", "v", "m", "r", "nc", "ln", "p", "ne", "N"], "a": ["area", "parts", "o", "x", "c", "d", "sum", "args", "all", "an", "array", "A", "t", "y", "alpha", "na", "g", "sa", "aa", "si", "u", "f", "b", "am", "ans", "w", "z", "l", "m", "p", "au"], "s": ["states", "parts", "ls", "S", "x", "plus", "c", "d", "sum", "args", "an", "Array", "A", "actions", "changes", "g", "sa", "blocks", "u", "size", "sets", "b", "ps", "ns", "sup", "ans", "es", "status", "q", "w", "v", "l", "stats", "groups", "m", "p"], "diff": ["S", "err", " d", "ss", " Diff", "Inf", " delta", "Array", "alpha", "Diff", " differences", " S", "Delta", " Delta", " D", "Shift", "frac", " sd", " beta"], "Sum": ["Base", "Max", "Dist", "Avg", "Total", "sum", "Weight", "Alpha", "Summary", "Score", "Data", "Ns", "Inf", "Offset", "Array", "Value", "Sa", "Num", "Len", "Diff", "Index", "Mass", "Size", "Val", "Gam", "Error", "Average", "Delta", " sum", "Length", "Count", "Sign", "Default", "Sc", "Info", "Na", "Su", "Output", "Min", "Conf", "Beta"], "i": ["pi", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "col", "ind", "ini", "ui", "t", "bi", "id", "y", "h", "index", "ip", "si", "u", "iu", "f", "e", "I", "ti", "b", "q", "ai", "z", "qi", "v", "l", "ii", "li", "r", "m", "p"]}}
{"code": "sec_ = int(input())\\nprint(\"{}:{}:{}\".format(sec_//3600, (sec_//60)%60, sec_%60))", "target": "276", "substitutes": {"sec_": [" sec2", "year2", "Sec_", "sic_", "code_", "sent_", "security_", "section_", "sic2", "section2", " secObj", "year_", "security2", "codeObj", "sec2", "sentObj", "secObj"]}}
{"code": "# \u8caa\u6b32\u306e\u6539\u826f\u7248\\nd = int(input())\\ndd = d * (d + 1) // 2\\n*C, = map(int, input().split())\\nS = [list(map(int, input().split())) for i in range(d)]\\n\\nmax_score = -10**10\\nbest_T = None\\nfor next_day in range(26):\\n    # T\u306e\u69cb\u7bc9\\n    T = []\\n    L = [-1 for j in range(26)]\\n    for i in range(d):\\n        # \u5404\u65e5\u306e\u30b9\u30b3\u30a2\u5897\u52a0\u3092\u6700\u5927\u306b\u3059\u308bj\u3092\u9078\u3076\\n        max_daily_score = -10**10\\n        best_j = 0\\n        for j in range(26):\\n            memo = L[j]\\n            L[j] = i\\n            # next_day\u65e5\u5f8c\u307e\u3067j\u304c\u306a\u304b\u3063\u305f\u3068\u304d\u306edaily_score\u3092\u8a08\u7b97\\n            daily_score = S[i][j]\\n            for jj in range(26):\\n                daily_score -= C[jj] * (i + next_day - L[jj])\\n            if daily_score > max_daily_score:\\n                max_daily_score = daily_score\\n                best_j = j\\n            L[j] = memo\\n        L[best_j] = i\\n        T.append(best_j)\\n    # \u30b9\u30b3\u30a2\u306e\u8a08\u7b97\\n    L = [-1 for j in range(26)]\\n    X = [0 for j in range(26)]\\n    score = 0\\n    for i in range(d):\\n        score += S[i][T[i]]\\n        X[T[i]] += (d - i) * (i - L[T[i]])\\n        L[T[i]] = i\\n    for j in range(26):\\n        score -= C[j] * (dd - X[j])\\n    if score > max_score:\\n        max_score = score\\n        best_T = T\\nfor t in best_T:\\n    print(t + 1)\\n", "target": "272", "substitutes": {}}
{"code": "n = int(input())\\nbs = list(map(int, input().split()))\\nsb = [0] * n\\nfor i in bs:\\n    sb[i - 1] += 1\\nfor i in sb:\\n    print(i)", "target": "38", "substitutes": {"n": ["cn", "k", "j", "c", "d", "nm", "nb", "ny", "num", "s", "t", "ni", "count", "network", "nn", "nan", "nl", "number", "nr", "net", "nt", "fn", "f", "adj", "b", "e", "ns", "sn", "z", "l", "m", "nc", "p", "ne", "N"], "bs": ["ls", " b", "fs", "pb", "BS", "bes", "ins", "bits", "cb", "ab", "ss", "bc", "vs", "obs", "abs", "sts", "qs", "bi", "cs", "lets", "os", "blocks", "ib", "ks", "bl", "lines", "seq", "lb", "b", "ps", "ns", "SB", "bats", " bc", "bps", "ba", "bb", "its", "abi", "zos"], "sb": ["core", "lp", "ls", "eb", "pb", "db", "cb", "nb", "ob", "ab", "bh", "ss", "bc", "zb", "bitcoin", "switch", "bn", "s", "binary", "rb", "bi", "sd", "stab", "split", "fb", "gb", "ib", "bl", "beta", "bin", "sf", "si", "lb", "b", "ns", "SB", "sn", "ai", "bps", "ba", "obb", "bb", "bf", "abi", "bp", "bm"], "i": ["pi", "it", "di", "uri", "k", "x", "xi", "j", "idi", "gi", "c", "ci", "d", "phi", "oi", "nb", "a", "io", "ie", "int", "ind", "ini", "ui", "t", "ni", "bi", "id", "y", "info", "g", "ib", "index", "ip", "batch", "multi", "si", "u", "iu", "fi", "e", "I", "f", "b", "code", "ai", "init", "z", "chi", "qi", "l", "v", "ii", "li", "ei", "m", "p", "count"]}}
{"code": "print('NYoe s'['7'in [*input()]::2])", "target": "327", "substitutes": {}}
{"code": "n, k = [int(x) for x in input().split()]\\np_list = sorted([int(x) for x in input().split()])\\nprint(sum(p_list[:k]))", "target": "124", "substitutes": {"n": ["o", "j", "c", "np", " N", "nb", "name", "t", "i", "y", "network", "nn", "f", "e", "b", "ns", "z", "v", "l", "m", "r", "nc", "ln", "p", "ne", "N"], "k": ["ik", "o", "kn", "ke", "kk", "j", "c", "d", "mk", "ck", "kick", "i", "y", "sk", "g", "unk", "h", "ok", "ks", "dk", "ko", "u", "size", "f", "e", "q", "tk", "w", "kw", "z", "K", "v", "m", "p", "kr", "km", "ku"], "x": ["xp", "input", "j", "exp", "c", "xi", "px", "plus", "d", "ctx", "xy", "lex", "pos", "int", "ux", "ww", "num", "t", "i", "id", "y", "on", "na", "xa", "ax", "h", "xt", "sex", "rx", "word", "ix", "index", "number", "ex", "f", "e", "X", "xx", "code", "xf", "xes", "pl", "q", "w", "expl", "z", "draw", "cross", "xs", "p"], "p_list": ["ploglist", "pxl", "p_set", " p_dict", " p_set", "p_List", " p2List", "p2set", "p_stack", "p2l", "pwlist", " p2list", "pxList", "p_dict", "p2list", " p_l", " p2set", "pxlist", "plogstack", "pwdict", "plogdict", " p_stack", "p_l", "pxset", " p_List", "pwstack", "p2List", " p2l"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nS = input()\\nS = S + 'R'  # \u4e0b\u306e\u30eb\u30fc\u30d7\u3067\u6700\u5f8c\u306e\u4e00\u56de\u306e\u52a0\u7b97\u3092\u884c\u3046\\n\\nA = [0] * len(S)\\n\\n# \u5341\u5206\u5927\u304d\u306a(\u6700\u5927\u306e\u9023\u7d9a\u3059\u308bR\u304bL\u306e\u9577\u3055\u7a0b\u5ea6<10**5)\u5076\u6570\u56de\u5f8c\u306b\u306f\u3001RL\u3068\u9023\u7d9a\u3059\u308b\u7b87\u6240\u4ee5\u5916\u306f\u5168\u30660\u306b\u306a\u308b\\n\\nconf = 0\\neven, odd = 0, 0\\nfor i in range(len(S)-1):\\n    if i % 2:\\n        odd += 1\\n    else:\\n        even += 1\\n\\n    if S[i+1] != S[i] and S[i] == 'R':\\n        conf = i\\n        if conf % 2:\\n            A[conf] += odd\\n            A[conf+1] += even\\n        else:\\n            A[conf] += even\\n            A[conf+1] += odd\\n        even, odd = 0, 0\\n\\n    if S[i+1] != S[i] and S[i] == 'L':\\n        if conf % 2:\\n            A[conf] += odd\\n            A[conf+1] += even\\n        else:\\n            A[conf] += even\\n            A[conf+1] += odd\\n        even, odd = 0, 0\\n\\n\\nA = [str(i) for i in A[:-1]]\\nres = \" \".join(A)\\nprint(res)\\n", "target": "722", "substitutes": {}}
{"code": "# coding: utf-8\\n\\nM1, D1 = (int(x) for x in input().split())\\nM2, D2 = (int(x) for x in input().split())\\n\\nif M1 == M2: print(0)\\nelse: print(1)\\n", "target": "571", "substitutes": {}}
{"code": "N, A,B,*V = map(int,open(0).read().split())\\nV = sorted(V)[::-1]\\nans1 = sum(V[:A])/A\\nprint(ans1)\\nf = [1] *51\\nfor i in range(1,51):\\n  f[i] = f[i - 1] * i\\ndef comb(n,r):\\n  return f[n]//f[r]//f[n-r]\\nans2 = comb(V.count(V[A-1]),V[:A].count(V[A-1]))\\nif V[0] == V[A-1]:\\n  for i in range(A+1,B+1):\\n    ans2 += comb(V.count(V[A-1]),i)\\nprint(ans2)", "target": "345", "substitutes": {"N": ["U", "NA", "D", "S", "R", "E", "NC", "T", "W", "Y", "L", "G", "NN", "Q", "I", "X", "C", "P", "K", "O", "M", "F", "Z"], "A": ["NA", "E", "W", "An", "AN", "Count", "I", "Group", "AST", "K", "O", "As", "Start", "R", "Alpha", "a", "Order", "This", "Array", "G", "AM", "Num", "Ma", "Ar", "AA", "App", "API", "AF", "Code", "H", "M", "Input", "AR", "D", "S", "Auth", "CA", "All", "T", "Az", "alpha", "BA", "AU", "Last", "Q", "Yes", "X", "The", "C", "Na", "In", "AC", "LA", "U", "Ca", "Ak", "At", "Y", "First", "L", "Part", "Ab", "AI", "Area", "No", "AP", "Ha", "Fa", "P", "AB", "F"], "B": ["U", " b", "D", "BF", "R", "E", "BB", "T", "W", "Y", "L", "G", "Ab", "NB", "BA", "BI", "Q", "Bs", "GB", "WB", "I", "b", "X", "C", "MB", "P", "K", "BC", "O", "H", "M", "F", "Z"], "V": ["U", " v", "D", "S", "ve", "Var", "Limit", "VO", "VL", "Vs", "R", "NV", "E", "Original", "Local", "Rule", "Server", "PF", "T", "Order", "W", "J", "IV", "Vector", "Y", "Value", "L", "G", "VD", "Vi", "VB", "UV", "Val", "GV", "Volume", "Port", "VI", "Q", "Band", "Model", "AV", "ID", "I", "Version", "Va", "X", "Group", "VER", "C", "VA", "FF", "P", "K", "VM", "CV", "v", "API", "VC", "TV", "O", "VT", "H", "M", "F", "Vol", "VE", "VS"], "ans1": ["AN0", "chan2", "an2", "ann0", "annOne", "annone", "chanone", "AN1", "ansOne", "anone", "chan1", "an1", "ann1", "anOne", "ans0", "ansone", "an0", "ANOne", "ann2", "AN2"], "f": ["file", "df", "o", "fs", "k", "x", "j", "c", "d", "feature", "a", "fc", "F", "array", "t", "info", "y", "fe", "g", "h", "fb", "self", "sf", "u", "e", "I", "b", "fen", "q", "w", "z", "v", "l", "m", "fr", " F", "p", "form", "fp"], "i": ["pi", "it", "o", "k", "x", "xi", "j", "c", "ci", "d", "a", "io", "ie", "int", "ind", "F", "ini", "ui", "ni", "bi", "id", "y", "index", "ip", "si", "u", "iu", "I", "ti", "e", "b", "ai", "w", "P", "z", "qi", "v", "l", "ii", "li", "m", "p", "vi"], "n": ["o", "k", "x", "j", "c", "d", "a", "all", "num", "s", "an", "t", "y", "g", "min", "en", "un", "nu", "nr", "u", "e", "max", "nt", "b", "ns", "w", "z", "l", "v", "m", "nc", "p", "ne"], "r": ["rs", "o", "rd", "k", "err", "x", "j", "c", "er", "R", "d", "ar", "rh", "rb", "range", "t", "yr", "rt", "g", "h", "row", "ur", "nr", "u", "e", "rr", "rn", "b", "w", "z", "v", "l", "m", "right", "ru", "fr", "p", "sr"], "ans2": ["an2", "ans3", "ANS1", "ANS2", "ann3", "casb", "ansTwo", "cas1", "ks2", "annTwo", "an4", "ANS4", "ks1", "cas4", "ann4", "an1", "ann1", "an3", "ks4", "anb", "annb", "ans4", "ksTwo", "cas2", "ANS3", "ansb", "ann2", "anTwo"]}}
{"code": "N = int(input())\\n\\nMX = 10**4\\nans = {}\\nfor x in range(1, 100):\\n    for y in range(1, 100):\\n        for z in range(1, 100):\\n            tmp = x**2+y**2+z**2+x*y+x*z+y*z\\n            if tmp > MX:\\n                break\\n            if not(tmp in ans):\\n                ans[tmp] = 1\\n            else:\\n                ans[tmp] += 1\\n\\nfor i in range(1, N+1):\\n    if i in ans:\\n        print(ans[i])\\n    else:\\n        print(0)\\n", "target": "170", "substitutes": {"N": ["NA", "D", "S", "CN", "R", "NS", "B", "Ns", "T", "n", "Y", "Ni", "L", "G", "NB", "NT", "NM", "NN", "MN", "I", "X", "C", "V", "P", "K", "O", "H", "M", "F", "Z"], "MX": ["MO", "NA", "LM", "MQ", "NS", "XX", "FM", "NH", "PM", "DM", "RM", "NM", "mx", "MAX", "ROM", "MN", "WT", "X", "MI", "MR", "MA", "NI", "NUM", "TM", "MH", "TX", "ONE", "MIN", "MM", "MC", "MT", "NP", "REM", "M", "CM", "XM", "NZ"], "ans": ["aves", "parts", "ls", "atts", "anus", "san", "nas", "ras", "ins", "ases", "aos", "a", "olds", "ars", "ants", "ances", "vs", "amps", "ens", "args", "an", "s", "ads", "A", "ats", "ents", "ams", "anon", "na", "os", "anas", "idents", "ks", "nan", "ana", "span", "vals", "can", "anes", "lines", "cons", "names", "AN", "atan", "aned", "ores", "ANS", "ann", "lan", "ns", "shape", "scan", "anges", "ane", "ands", "features", "ions", "ai", "aces", "ani", "ano", "ays", "params", "ones", "groups", "xs", "acs", "aus", "ons", "agents"], "x": ["ey", "o", "k", "xp", "xi", "px", "j", "c", "d", "xy", "a", "int", "n", "s", "Y", "t", "on", "dy", "time", "xxx", "ax", "h", "xt", "yx", "rx", "ix", "index", "ex", "xc", "u", "f", "dx", "max", "b", "X", "xx", "q", "w", "v", "l", "m", "p"], "y": ["ey", "wy", "sy", "iy", "ya", "j", "cy", "c", "d", "xy", "yn", "oy", "yi", "a", "ry", "ny", "year", "n", "yl", "Y", "zy", "ye", "t", "dy", "ty", "h", "ay", "ym", "py", "yt", "f", "ys", "b", "xx", "yd", "q", "yy", "w", "v", "l", "m", "p", "vy"], "z": ["ze", "k", "j", "cy", "c", "d", "xy", "a", "n", "zen", "yz", "iz", "zy", "Y", "t", "az", "gz", "time", "g", "h", "tz", "cz", "zh", "zip", "u", "f", "e", "b", "zx", "q", "w", "zone", "v", "l", "m", "zz", "p", "zo", "vy", "zi", "Z"], "tmp": ["pi", "tp", "part", "loc", "Temp", "extra", "kk", "j", "uv", "tm", "sp", "np", "nm", "tc", "nb", "mult", "rm", "const", "int", "vt", "xb", "perm", "amp", "t", "rb", "cmp", "test", "rt", "xxx", "fb", "xt", "mx", "cp", "sample", "ym", "tt", "span", "py", "fake", "pad", "number", "zip", "mp", "nom", "foo", "pre", "nt", "f", "pot", "stuff", "sup", "yy", "emp", "v", "duration", "ii", "m", "txt", "now", "p", "temp", "bp", "elt", "km", "count"], "i": ["pi", "ji", "uri", "xi", "j", "gi", "c", "gu", "ci", "sp", "yi", "phi", "oi", "a", "io", "ie", "int", "ind", "n", "ini", "t", "ni", "id", "iq", "h", "ix", "index", "ip", "si", "u", "iu", "f", "I", "ti", "e", "nt", "b", "inf", "ai", "chi", "p", "qi", "v", "ii", "li", "m", "r", "ei", "zi"]}}
{"code": "l1 = input().split()\\na = int(l1[0])\\nb = int(l1[1])\\nx = int(l1[2])\\nif x == a:\\n    print(\"YES\")\\nfor i in range(1,b+1):\\n    if x == a+i:\\n        print(\"YES\")\\n        exit()\\nif x < a or (x > (a+b)):\\n    print(\"NO\")", "target": "488", "substitutes": {"l1": [" l2", "Lone", "LOne", "sl2", "laone", "ls55", "il2", "lOne", " l0", " lone", "L2", "lsone", "ls0", " l9", "l55", "l0", "sl1", "il55", "rl1", "la9", "L1", "la2", "lsOne", "l9", "la1", "l2", "ilone", "rlOne", "slone", "rl2", "L0", "L9", "rl0", "il1", "sl0", "ls1", "lone", " l55", "ls2"], "a": ["ma", "area", "at", "c", "ak", "ama", "ab", "ac", "aux", "pa", "n", "da", "an", "A", "fa", "y", "alpha", "xa", "sa", "ia", "aa", "la", "u", "va", "oa", "f", "e", "am", "ca", "ad", "ga", "ai", "ae", "asa", "ba", "aaa", "l", "ada", "ea", "aj", "p", "au"], "b": ["o", "eb", "k", "abb", "j", "pb", "c", "db", "d", "cb", "nb", "ab", "B", "n", "A", "rb", "bi", "bas", "y", "dy", "bs", "body", "fb", "aa", "lb", "f", "e", "ad", "ca", "base", "sb", "z", "ba", "l", "v", "bb", "bf", "p"], "x": ["o", "k", "xp", "xi", "c", "d", "xy", "ac", "wa", "int", "n", "ww", "an", "t", "id", "y", "tx", "xa", "g", "na", "ax", "h", "xt", "rx", "ix", "fx", "index", "ex", "xc", "u", "e", "f", "dx", "X", "xx", "q", "w", "z", "ba", "l", "v", "m", "xs", "p"], "i": ["pi", "di", "iy", "xi", "j", "c", "ci", "d", "phi", "ri", "ie", "int", "ind", "n", "bi", "id", "y", "ir", "h", "ib", "ix", "index", "ip", "u", "iu", "e", "I", "f", "ad", "ai", "z", "l", "ii", "li", "r", "p"]}}
{"code": "N = int(input())\\nif N == 1:\\n    print(0)\\n    exit()\\nA = [int(i) for i in input().split()]\\nA = [A[i] - i - 1 for i in range(N)]\\nA.sort()\\nif N == 2:\\n    print(abs(A[0] - A[1]))\\n    exit()\\n\\nsum_A = [0, 0]\\nfor i in range(N):\\n    sum_A[0] += abs(A[i] - A[N // 2])\\nsum_2 = 0\\nfor i in range(N):\\n    sum_A[1] += abs(A[i] - A[N // 2 + 1])\\nprint(min(sum_A))\\n", "target": "463", "substitutes": {"N": ["U", "Node", "NA", "II", "D", "S", "R", "NS", "E", "NC", "NE", "NL", "B", "Bi", "Ns", "T", "n", "Sn", "Not", "Y", "L", "Ni", "Len", "Part", "SN", "Num", "NB", "NT", " n", "Size", "No", "Q", "I", "Number", "X", "State", "C", "Na", "Ne", "NI", "RN", "NUM", "V", "We", "P", "K", "Nat", "Sum", "O", "M", "F", "Z"], "A": ["As", "U", "NA", "S", "Any", "New", "Args", "E", "Alpha", "a", "Auth", "Ak", "B", "CA", "All", "T", "Data", "W", "Act", "Action", "At", "Array", "Y", "array", "AM", "G", "L", "Am", "Part", "First", "Num", "AS", "Address", "Ma", "Ab", "GA", "SA", "An", "Adam", "AP", "Average", "Ar", "Q", "Ha", "Wa", "Product", "I", "AA", "And", "X", "The", "C", "App", "Info", "V", "One", "P", "API", "This", "Parts", "Order", "Sum", "H", "M", "Input", "F", "Az", "LA"], "i": ["pi", "di", "o", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "phi", "oi", "a", "io", "ie", "start", "ori", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", "\u0438", " j", "ij", "ix", "index", "ip", "si", "u", "iu", "f", "e", "I", "ti", "b", "ki", "ai", "z", "chi", "qi", "l", "v", "ii", "ic", "m", "li", "ei", "r", "p", "vi", "zi"], "sum_A": ["sum2A", "sum_Array", " sum_1", " sum_B", " sum_P", " sum_Array", "sumYP", "sum_P", "sumYB", "sum_1", "sum2C", "sum_B", " sum_100", " sum_C", "sumYAuth", "sum2a", "sum_As", "sum_C", "sum_a", " sum_Auth", "sum_Auth", " sum_As", "sum_100", "sumYA", " sum_a", "sum2As"], "sum_2": ["sum_1", "sum_B", " sum_1", " sum_B"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\n\\n\\ndef main():\\n    A, B, C = map(int, input().split())\\n    K = int(input())\\n\\n    ans = A + B + C + max(A, B, C) * (2 ** K - 1)\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "674", "substitutes": {"input": ["type", "string", "empty", "element", "out", "current", "param", "argument", "raw", "output", "data", " Input", "format", "expression", "submit", "int", "print", "n", " output", "view", "pull", "num", "array", " int", "config", "enter", "i", "id", "call", "keep", "python", "version", "parent", "sample", "line", "source", "request", "bin", "main", "header", "index", "null", " inputs", "help", "reader", "select", "inf", "join", "filter", "json", "l", "str", "text", "Input", "exec", "temp", "method"], "A": ["AR", "U", "Ca", "D", "S", "E", "a", "T", "PA", "W", "IA", "mA", "Y", "AD", "L", "G", "AM", "AS", "AY", "SA", "AU", "An", "EA", "Area", "AP", "I", "AA", "X", "P", "AF", "AH", "AB", "O", "AC", "Input", "H", "F", "N", "LA"], "B": ["U", "D", "BF", "R", "E", "LB", "BB", "T", "W", "BE", "TB", "Y", "L", "G", "BA", "PB", "BI", "OB", "GB", "Bs", "DB", "WB", "I", "b", "X", "FB", "SB", "MB", "P", "BT", "BC", "AB", "H", "M", "F", "N"], "C": ["U", "D", "S", "CD", "c", "R", "E", "CA", "T", "W", "CU", "L", "G", "Con", "YC", "CF", "Q", "SC", "CS", "X", "CW", "DC", "P", "CC", "Cs", "BC", "O", "KC", "AC", "M", "F", "CM", "CE", "N"], "K": ["U", "Han", "KI", "KR", "D", "k", "S", "DK", "E", "SK", "Ak", "CA", "Ka", "W", "J", "Y", "G", "NK", "L", "KK", "Q", "X", "V", "P", "CC", "KA", "KN", "Sk", "KS", "O", "KC", "M", "H", "F", "N", "Z"], "ans": ["NA", "ls", "Ann", "ANN", "CAN", "anus", "san", "aning", "anned", "SK", "nas", "ants", "an", "man", " means", "anon", "CNN", "annot", "na", "sk", "anas", "anz", "NN", "nn", "An", "ks", "ana", "can", "anes", "AN", "atan", "aned", " Ans", "ANS", "CS", "ann", "lan", "ns", "ane", "scan", "ano", "Sk", "aus"]}}
{"code": "N = int(input())\\nans = 0\\nfor i in range(1,N+1):\\n    for j in range(i,N+1,i):\\n        ans += j\\nprint(ans)", "target": "177", "substitutes": {"N": ["Node", "NA", "D", "S", "Net", "R", "NS", "NC", "B", "Ns", "T", "n", "J", "Y", "Ni", "L", "A", "G", "Len", "Num", "NT", " n", "Size", "NN", "number", "MN", "Q", "AN", "I", "X", "ns", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "ans": ["x", "nas", "ras", "ins", "reads", "anks", "a", "ars", "ants", "amps", "ens", "n", "an", "s", "ops", "A", " means", "ats", "asts", "cs", "ents", "ams", "sk", "na", "os", "plan", "ds", "ks", "span", "can", "anes", "lines", "AN", "aned", "leans", "ANS", "acts", "ann", "lan", "ps", "ns", "ane", "ands", "errors", "es", "no", "ions", "ani", "mean", "xs", "ons"], "i": ["pi", "o", "ji", "k", "x", "xi", "gi", "c", "ci", "d", "phi", "ri", "a", "start", "int", "ind", "n", "ni", "bi", "id", "y", "h", "ij", "index", "ip", "si", "u", "e", "I", "f", "end", "b", "ai", "z", "p", "v", "l", "ii", "li", "m", "r", "io"], "j": ["it", "ji", "o", "k", "x", "_", "c", "d", "a", "ie", "ind", "oj", "J", "n", "ch", "y", "g", "ij", "h", "cp", "jl", "jo", " l", "ja", "e", "I", "f", "end", "obj", "jj", "q", "ai", "dj", "z", "v", "jp", "li", "r", "m", "p"]}}
{"code": "import random\\ns = input()\\nnum = random.randint(0,len(s)-3)\\nprint(s[num:num+3])", "target": "775", "substitutes": {"s": ["states", "parts", "o", "string", " samples", "services", "S", "out", "x", "input", "ssl", "c", "d", "ins", "ses", "ws", "sum", "a", "data", "ss", "n", "args", "t", "space", "strings", "i", "y", "sort", "g", "os", "sample", "source", "lines", " S", "sq", "south", "letters", "spec", "e", "f", "b", "ns", "sb", "w", "sv", "v", "l", "groups", "r", "str", "m", "p", "ing"], "num": ["oct", "loc", "dom", "ul", "um", "off", "np", "ng", "nm", "node", "nb", "sum", "name", "dest", "four", "du", "mom", "pos", "eight", "hom", "n", "Num", "id", "split", "uni", "zero", "mn", "dim", "ord", "index", "bin", "number", "nu", "multi", "umi", "comb", "nov", "begin", "norm", "nom", "len", "lam", "f", "max", "fn", "end", "none", "NUM", "no", "init", "nam", "temp"]}}
{"code": "import sys\\nfrom collections import defaultdict\\nsys.setrecursionlimit(200000)\\ninput = sys.stdin.readline\\n\\nA, B, C, D, = map(int, input().split())\\n\\nif abs(B - A) <= D and abs(C - B) <= D:\\n    print(\"Yes\")\\nelif abs(C - A) <= D:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "378", "substitutes": {"input": ["type", "string", "out", "feed", "c", "current", "param", "argument", "raw", "output", "a", "data", "value", "format", "expression", "diff", "int", "print", "option", "amp", "list", "pull", "enter", "i", "result", "alpha", "keep", "radio", "image", "iter", "parent", "source", "index", "request", "error", "eval", "help", "select", "include", "accept", "length", "conf", "Input", "comment", "exec", "temp", "call"], "A": ["AR", "U", "Ac", "S", "E", "a", "CA", "T", "W", "Y", "L", "G", "AM", "AD", "AS", "Ab", "BA", "An", " a", "AP", "Q", "Ar", "I", "AA", "MA", "Na", "V", "P", "K", "AF", "AH", "AB", "O", "AC", "H", "M", "F", "N", "LA"], "B": ["U", "EB", "R", "E", "LB", "BB", "T", "W", "BE", "Y", "L", "CU", "G", "BA", "BD", "BI", "Q", "Bs", "GB", "DB", "WB", "I", "b", "X", "DC", "V", "P", "BT", "K", "BC", "AB", "O", "H", "M", "F", "N", "CL"], "C": ["U", "CI", "S", "CD", "c", "R", "E", "CT", "CA", "T", "W", "Y", "CU", "L", "G", "Col", "Con", "Q", "Count", "X", "DC", "V", "P", "CC", "Cs", "CR", "BC", "K", "VC", "Cu", "H", "M", "F", "N", "CL"], "D": ["ND", "U", "DT", "S", "CD", "R", "d", "E", "Do", "Ds", "T", "DO", "W", "Y", "JD", "L", "DA", "DX", "AD", "DP", "DD", "DM", "DS", "MD", "BD", "Q", "DI", "DB", "I", "DF", "DC", "P", "DL", "DN", "O", "M", "DH", "F", "DE", "N", "Z"]}}
{"code": "from scipy.sparse.csgraph import connected_components\\nfrom scipy.sparse import csr_matrix\\nfrom sys import stdin\\n\\n\\ndef makeConnected(n, connections):\\n    l = list(zip(*connections))\\n    d = [1] * len(connections)\\n    a = csr_matrix((d, (l[0], l[1])), (n, n))\\n    return connected_components(a, return_labels=0)\\n\\n\\ndef main():\\n    input = lambda: stdin.readline()[:-1]\\n    N, M = map(int, input().split())\\n    AB = [tuple(map(int, input().split())) for _ in [0] * M]\\n\\n    ab = [[a - 1, b - 1] for a, b in AB]\\n    ans = makeConnected(N, ab) - 1\\n    print(ans)\\n\\n\\nmain()\\n", "target": "354", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "np", "nb", "Ns", "num", "t", "i", "y", "g", "network", "nl", "number", "nu", "u", "len", "f", "e", "nt", "ns", "w", "z", "v", "m", "r", "nc", "ln", "p", "ne"], "connections": ["connectedions", "connings", "Connections", "connectivity", "contivity", "connectations", "connectedion", "connection", "Connectings", "connivity", "connectionivity", "connectionions", "connion", "connectedors", "connectionings", "connions", "connectings", "connectionion", "connectionations", "connectedations", "connectionors", "contion", "connectors", "Connection", "Connectations", "connors", "contors", "contions", "Connectors"], "l": ["el", "lp", "ls", "o", "k", "ol", "x", "c", "kl", "sl", "s", "ll", "list", "t", "L", "i", "nl", "u", "len", "f", "rl", "e", "dl", "z", "v", "lc", "m", "r", "li", "ln", "p"], "d": ["D", "dt", "x", "j", "c", "ded", "pd", "data", "bd", "da", "s", "t", "i", "sd", "dy", "split", "g", "dim", "ds", "dh", "dc", "f", "dd", "e", "ad", " D", "dl", "z", "dn", "m", "dat", "p"], "a": ["ma", "area", "access", "part", "at", "sta", "x", "c", "ar", "ac", "aux", "af", "int", "pa", "da", "s", "an", "array", "A", "t", "fa", "i", "y", "alpha", "analysis", "na", "sa", "ka", "abc", "ia", "aa", "la", "u", "f", "ad", "ca", "am", "tta", "ga", "ai", "ae", "w", "z", "ba", "asa", "ea", "ao", "m", "r", "p", " A", "au"], "input": ["socket", "file", "empty", "interface", "out", "unknown", "feed", "c", "current", "param", "argument", "raw", "output", "PUT", "data", "sum", " Input", "expression", "echo", "submit", "int", "print", "view", "single", "pull", "amp", "array", "config", "IN", "i", "enter", "keep", "analysis", "image", "parent", "source", "request", "line", "null", "table", "error", "next", "model", "but", "stream", "main", " inputs", "default", "exec", "help", "reader", "insert", "select", "filter", "accept", "Input", "comment", "p", "temp", "form", "condition", "call"], "N": ["Node", "NA", "D", "S", "NS", "E", "NC", "B", "Ns", "T", "W", "Y", "AD", "A", "L", "G", "Ni", "Num", "SN", "NB", "NM", "NN", "MN", "Q", "AN", "I", "X", "C", "Na", "NG", "V", "P", "K", "O", "AC", "F", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "B", "T", "W", "PM", "Y", "A", "L", "G", "AM", "Ma", "MD", "MS", "MN", "Ms", "Q", "X", "C", "MA", "V", "P", "MC", "m", "O", "H", "F", "MF", "Z"], "AB": ["AR", "NA", "LAB", "abb", "IB", "nb", "B", "BB", "UB", "abs", "AG", "AD", "array", "A", "AM", "Ab", "NB", "lab", "AI", "BA", "abc", "SA", "ib", "OB", "AN", "QB", "AV", "ABC", "AA", "am", "SB", "AST", "MM", "AF", "AH", "AC", "AT"], "_": ["j", "all", "A", " j", "ip", " seq", " dev", "p"], "ab": ["Tab", "mb", "abb", "IB", "acl", "ob", "ac", "app", "B", "af", "BB", "abs", "an", "A", "tab", "Ab", "lab", "bs", "hab", "abc", "fab", "ib", "AP", "aa", "ABC", "AA", "ai", "ae", "abl", "AF", "bb", "AC", "abi", "ap", "aps"], "b": ["k", "x", "j", "c", "nb", "B", "s", "non", "bi", "i", "id", "y", "bs", "bar", "g", "h", "aa", "u", "f", "e", " B", "w", "z", "ba", "v", "m", "r", "p"], "ans": ["ls", "Ann", "anus", "san", "aning", "ins", "af", "banks", "an", "s", "anc", "A", "cs", "anon", "annot", "na", "con", "plan", "nan", "An", "ia", "span", "can", "ana", "la", "AN", "atan", "aned", "ANS", "ann", "lan", "ca", "ns", "scan", "ons", "ions", "ai", "ani", "ace", "aus", "any", "abilities"]}}
{"code": "n = int(input())\\nx = list(map(int, input().split()))\\nmed1, med2 = sorted(x)[n // 2 - 1 : n // 2 + 1]\\nans = [med2 if i <= med1 else med1 for i in x]\\nprint('\\n'.join(map(str, ans)))\\n", "target": "16", "substitutes": {"n": ["o", "k", "j", "c", "d", " N", "nb", "a", "s", "num", "t", "y", "count", "nn", "nl", "number", "nu", "net", "f", "e", "adj", "b", "ns", "sn", "no", "w", "nor", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "x": ["xp", "xi", "plus", "exp", "c", "events", "slice", "xy", "data", "pos", "int", "s", "list", "array", "t", "y", "xml", "sw", "xxx", "xa", "na", "ax", "h", "xt", "sex", "yx", "rx", "index", "ex", "e", "max", "X", "xx", "shape", "xes", "q", "w", "z", "v", "cross", "m", "xs", "p"], "med1": ["ax1", "mer1", "merd", "ped1", "mad0", "med6", "mer2", "med9", "v2", "mer9", "id6", "ax2", "ped2", "vone", " med0", "id2", "merone", " medd", "id1", "mad1", "id9", "mer6", "madd", "mer0", "ax6", "v1", "medd", "meri", "mad2", "ax9", "pedone", "medi", "med0", "pedi", "medone", "vi"], "med2": ["ax1", "mer1", "mean1", "ped1", "med6", "mer2", "mean52", "mad6", "mean2", "mertwo", "ped2", "ax2", "ax0", "meantwo", "ped52", "medtwo", "pedtwo", "mad1", "mer6", "mer0", "ax6", "mer52", "med52", "mad2", "med0", "mad0"], "ans": ["ings", "san", "aning", "ras", "ases", "ars", "ants", "args", "an", " means", "cs", "ians", "na", "anas", "ms", "idents", "ks", "ana", "An", "span", "nan", "can", "names", "AN", "cas", "leans", "aned", "ANS", "lan", "ann", "ns", "scan", "chan", "ions", "xs", "eps", "ons"], "i": ["pi", "di", "ji", "o", "xi", "j", "ci", "ri", "phi", "a", "io", "int", "ind", "ni", "bi", "id", "ij", "index", "ip", "si", "iu", "ti", "I", "b", "ai", "z", "qi", "v", "ii", "li", "ei", "p", "zi"]}}
{"code": "import sys\\nimport heapq, math\\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\\nfrom itertools import accumulate, dropwhile, takewhile, groupby\\nfrom functools import lru_cache\\nfrom copy import deepcopy\\n\\nM = int(input())\\n\\nprint(24 - M + 24)", "target": "676", "substitutes": {"M": ["U", " m", "LM", "D", "S", "MQ", "R", " N", "FM", "B", "T", "W", "PM", "J", "Y", "A", "G", "L", "MU", "MS", "I", "X", "C", "JM", "V", "MB", "P", "MM", "MC", "MT", "m", "O", "Mi", "H", "F", "CM", "N", "Z"]}}
{"code": "n = int(input())\\nA = list(map(int, input().split()))\\n\\nM = max(A)\\nm = min(A)\\nfor i, a in enumerate(A):\\n    if a == M:\\n        max_id = i\\n    if a == m:\\n        min_id = i\\n\\nans = []\\nif m >= 0:\\n    for i in range(n-1):\\n        ans.append((i+1, i+2))\\nelif M <= 0:\\n    for i in reversed(range(1, n)):\\n        ans.append((i+1, i))\\nelse:\\n    if abs(M) >= abs(m):\\n        for i, a in enumerate(A):\\n            if a < 0:\\n                ans.append((max_id+1, i+1))\\n        for i in range(n-1):\\n            ans.append((i+1, i+2))\\n    else:\\n        for i, a in enumerate(A):\\n            if a > 0:\\n                ans.append((min_id+1, i+1))\\n        for i in reversed(range(1, n)):\\n            ans.append((i+1, i))\\nprint(len(ans))\\nfor i in range(len(ans)):\\n    print(*ans[i])\\n", "target": "412", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nm", "nb", "num", "s", "an", "t", "non", "y", "mn", "min", "en", "nn", "span", "un", "u", "net", "nt", "max", "b", "ns", "w", "z", "l", "v", "r", "nc", "p", "ne", "N"], "A": ["As", "area", "Ca", "D", "S", "Any", "Args", "E", "Alpha", "Auth", "B", "CA", "All", "W", "At", "an", "Y", "Array", "L", "AM", "array", "Am", "Az", "AS", "Ab", "GA", "An", "EA", "Adam", "AP", "Average", "Ar", "AN", "I", "AA", "Ang", "X", "App", "C", "MA", "Na", "AST", "V", "P", "API", "AF", "Parts", "H", "p", "N", "LA"], "M": ["ma", "U", "LM", "D", "S", "R", "d", "E", "B", "Y", "G", "L", "AM", "Am", "Ma", "DM", "MD", "Ms", "Q", "e", "I", "f", "b", "X", "am", "C", "MA", "V", "P", "MM", "p", "K", "Mo", "O", "H", "Mi", "F", "N", "Z"], "m": ["ma", "o", "mc", "x", "j", "c", "fm", "d", "an", "s", "y", "mn", "min", "g", "h", "ym", "cm", "u", "em", "f", "e", "mu", "max", "b", "am", "sm", "mm", "mass", "dm", "l", "v", "r", "p", "bm", "N"], "i": ["mini", "it", "iw", "xi", "j", "anti", "c", "oi", "phi", "bi", "isi", "ip", "aci", "eni", "iu", "f", "ti", "I", "mi", "adi", "z", "ih", "p", "io", "zi", "ji", "k", "x", "gi", "ci", "ori", "range", "id", "y", "ix", "fi", "im", "ii", "li", "vi", "pi", "di", "uri", "yi", "ie", "int", "ind", "ini", "iq", "index", "u", "e", "chi", "qi", "v", "l", "ic", "ei", "ik", "o", "ri", "name", "ui", "ni", "info", "ir", "ia", "line", "si", "ami", "b", "ai"], "a": ["ma", "area", "auto", "o", "ha", " ma", "x", "mac", "c", "aw", "ar", "d", "ama", "ac", "wa", "ab", "art", "af", "pa", "mA", "an", "s", "y", "alpha", "apa", "na", "sa", "ana", "ia", "aa", "la", "u", "va", "oa", "e", "am", "ad", "b", "ca", "Na", "ga", "ai", "ae", "w", "aaa", "ta", "ea", "ada", "ao", "ap", "p", "au"], "max_id": ["min_aid", "max_start", "min_Id", "maxofId", "min_start", "min_ids", "max_ids", "max_Id", "max_type", "min_type", "maxofid", "max_aid", "maxoftype"], "min_id": ["minipmax", "minuserid", "min_order", "minusermax", "min_group", "min_time", "max_time", "max_max", "minableid", "miniporder", "minableids", "min_ids", "minabletime", "max_ids", "max_group", "min_max", "minipid", "minuserorder", "minablegroup", "max_order"], "ans": ["offs", "ls", "x", "ils", "anned", "ras", "nas", "ins", "aos", "ations", "ars", "ants", "amps", "ens", "args", "an", "ops", "s", "rules", "ads", " means", "ats", " spans", "outs", "asts", "ents", "ams", "actions", "sk", "cs", "anon", "os", "na", "anas", "plan", "ds", "ks", "ids", "ana", "span", "can", "lines", "cons", "names", "la", "posts", "AN", "atan", "aned", "cas", "ANS", "ann", "lan", "ns", "scan", "ands", "ends", "es", "ions", "ani", "aces", "ai", "annels", "ays", "params", "types", "eps", "aus", "ons"]}}
{"code": "from fractions import gcd #\u6700\u5927\u516c\u7d04\u6570\\nA, B, C, D = map(int, input().split())\\n# (0~B\u306e\u3046\u3061, C,D,C*D\u306e\u500d\u6570\u3067\u306f\u306a\u3044\u3082\u306e\u306e\u6570)\u3000- (0~-A\u306e\u3046\u3061, C,D,C*D\u306e\u500d\u6570\u3067\u306f\u306a\u3044\u3082\u306e\u306e\u6570)\\nlcm = C * D // gcd(C, D) #C,D\u306e\u6700\u5c0f\u516c\u500d\u6570\\nx = (A - 1) - (A - 1) // C - (A - 1) // D + (A - 1) // lcm\\ny = B - B // C - B // D + B // lcm\\n# (0~B\u306e\u6570) - {(0~B\u306e\u3046\u3061C\u3067\u5272\u308a\u5207\u308c\u308b\u6570) + (0~B\u306e\u3046\u3061D\u3067\u5272\u308a\u5207\u308c\u308b\u6570) - (0~B\u306e\u3046\u3061C,D\u306e\u6700\u5c0f\u516c\u500d\u6570\u3067\u5272\u308a\u5207\u308c\u308b\u6570)}\\nprint(y - x)", "target": "31", "substitutes": {}}
{"code": "s = input()\\nl = len(s)\\n\\ndp = [[0, 0] for _ in range(l+1)]\\ndp[1][0] = 1\\n\\nfor i in range(2, l+1):\\n    if s[i-1] != s[i-2]:\\n        dp[i][0] = dp[i-1][0] + 1\\n\\n    dp[i][0] = max(dp[i][0], dp[i-1][1] + 1)\\n    dp[i][1] = dp[i-2][0] + 1\\n    # print(dp)\\n\\nprint(max(dp[-1]))\\n", "target": "179", "substitutes": {"s": ["states", "ls", "services", "o", "tp", "S", "ssl", "input", "c", "search", "sp", "d", "service", "ses", "ins", "a", "ss", "sl", "n", "sts", "t", "strings", "cs", "sd", "g", "os", "h", "cells", "ds", "source", "gs", "lines", "sq", "south", "si", "u", "e", "f", "ys", "b", "ps", "ns", "ans", "es", "sb", "w", "sv", "params", "v", "sg", "less", "m", "r", "p"], "l": ["ls", "o", "k", "ol", "j", "lf", "c", "ul", "kl", "sl", "n", "ll", "t", "L", "h", "nl", "u", "len", "f", "e", "b", "limit", "dl", "q", "z", "v", "lc", "length", "m", "li", "ln", "p"], "dp": ["wp", "lp", "pi", "tp", "di", "dt", "loc", "df", "grade", "ssl", "pb", "pg", "db", "c", "sp", "np", "d", "port", "point", "service", "pd", "pair", "data", "a", "start", "diff", "pos", "sl", "src", "list", "vp", "DP", "hp", "pkg", "amp", "wd", "sd", "api", "fd", "dim", "ds", "dh", "cp", "dr", "source", "dc", "ip", "cm", "sf", "host", "mp", "send", "pp", "e", "address", "default", "imp", "b", "ps", "dl", "sh", "drop", "ep", "dm", "params", "v", "bb", "dist", "deb", "dat", "p", "gp"], "_": ["x", " p", " time", " ip", " int", "id", " j", " x", " f", " e", " seq", " id", "f", " o", " nan"], "i": ["mini", "it", "xi", "j", "c", "anti", "oi", "phi", "t", "bi", "ip", "multi", "iu", "f", "I", "ti", "mi", "ki", "z", "m", "io", "p", "ji", "k", "x", "gi", "ci", "d", "a", "id", "y", " il", "ix", "iv", "ii", "li", "pi", "di", "uri", "yi", "ie", "cli", "int", "ind", "n", "ini", " j", "index", "u", "e", "init", "qi", "v", "ic", "ei", "ik", "o", " I", "start", "ui", "ni", "info", "api", "key", "g", "si", "ami", "b", "ai"]}}
{"code": "#<B>\\nimport bisect\\nn, k = map(int,input().split())\\nh = list(map(int,input().split()))\\nh.sort()\\nans = n\\nfor i in h:\\n    if i < k:\\n        ans -= 1\\n\\nprint(ans)\\n        \\n", "target": "494", "substitutes": {}}
{"code": "n, r = [int(_) for _ in input().split()]\\nprint(r if n >= 10 else r + 100 * (10 - n))\\n", "target": "250", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", " N", "nb", "name", "num", "t", "i", "on", "en", "un", "number", "nr", "u", "len", "net", "f", "nt", "e", "fn", "rn", "ns", "b", "pn", "sn", "no", "w", "nor", "z", "dn", "v", "l", "m", "ln", "p", "ne", "N"], "r": ["rs", "rd", "k", "err", "x", "j", "c", "er", "R", "d", "ar", "rad", "ro", "rh", "rb", "t", "range", "rf", "i", "result", "arr", "yr", "rt", "rg", "ir", "h", "dr", "pr", "ra", "rat", "radius", "nr", "run", "br", "ur", "e", "f", "hr", "rn", "b", "q", "z", "cr", "l", "m", "fr", "ru", "p", "rc", "sr", "rate"], "_": ["k", "err", "out", " __", " d", "d", " read", "name", "data", "__", " p", " g", "all", "num", "result", "id", "prefix", "time", "pri", "self", "word", " f", "line", "digit", "row", "run", "len", "u", "f", "res", "random", "RN", "p", "right", "arg", "N"]}}
{"code": "nim = int(input())\\nif nim%2 == 0 :\\n  print(nim)\\nelse :\\n  print(2*nim)", "target": "762", "substitutes": {"nim": ["lim", "nime", "Nims", " nsim", "Nig", "Nlim", "Ncm", " nlim", "nsime", " ncm", "num", " nig", " nima", "nims", "Nim", "Num", "nima", "unnum", "lima", "unim", "unig", "Nime", "nsims", "Nsim", "unnim", "unnims", "lims", "unlim", "lum", " nime", " num", "unnsim", "nlim", "Nima", "nig", "nsim", "nscm", "ncm", "unims", " nims"]}}
{"code": "n=int(input())\\nA=list(map(int,input().split()))+[0]\\nc=0\\nfor i in range(n):\\n  j=i+1\\n  a=A[i]\\n  if a==j:\\n    c+=1\\n    A[i]=A[i+1]\\n    A[i+1]=j\\nprint(c)", "target": "77", "substitutes": {"n": ["o", "k", "x", "np", "d", "nb", "num", "s", "t", "y", "count", "g", "h", "number", "u", "f", "nt", "e", "b", "ns", "C", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "A": ["As", "U", "NA", "ACC", "D", "S", "E", "Alpha", "B", "CA", "Data", "T", "All", "W", "mA", "J", "At", "Array", "Y", "G", "L", "AM", "Am", "alpha", "Ma", "g", "GA", "AU", "Adam", "LA", "AP", "Average", "Ar", "Each", "I", "AA", "b", "Ang", "X", "App", "C", "And", "MA", "V", "P", "K", "p", "API", "AF", "O", "H", "M", "Input", "F", "AC", "N", "Z"], "c": ["cur", "o", "cn", "k", "x", "cy", "ci", "d", "cycle", "col", "ac", "jc", "bc", "cc", "ce", "t", "cs", "y", "g", "h", "abc", "ct", "cin", "cu", "u", "xc", "e", "f", "b", "ca", "C", "z", "cr", "l", "v", "cd", "lc", "r", "m", "nc", "p", "count"], "i": ["pi", "di", "o", "ji", "uri", "k", "x", "xi", "gi", "ci", "d", "phi", "io", "name", "start", "ori", "int", "ind", "ui", "ini", "ni", "info", "id", "y", "bi", "api", "h", "ix", "index", "si", "u", "iu", "e", "I", "f", "b", "my", "ai", "z", "qi", "l", "v", "ii", "li", "m", "r", "p"], "j": ["ji", "o", "k", "out", "x", "ci", "d", "jc", "start", "J", "t", "ch", "y", "false", "g", "ij", "ok", "index", "jo", "u", "ja", "e", "f", "b", "jj", "z", "v", "l", "aj", "jp", "m", "li", "p", "uj"], "a": ["o", "k", "x", "ac", "wa", "af", "pa", "da", "an", "y", "alpha", "sa", "ia", "aa", "u", "va", "ja", "f", "b", "ad", "ca", "am", "ai", "ae", "asa", "ba", "z", "l", "aj", "p"]}}
{"code": "a, b = input().split()\\n\\nx = a * int(b)\\ny = b * int(a)\\n\\nprint(min(x, y))\\n", "target": "69", "substitutes": {"a": ["area", "c", "aw", "d", "ac", "ab", "af", "int", "n", "pa", "da", "an", "A", "fa", "i", "alpha", "g", "sa", "aa", "u", "va", "e", "f", "ad", "ca", "ga", "w", "asa", "z", "aaa", "l", "aj", "m", "p", "au"], "b": ["o", "k", "abb", "j", "c", "d", "nb", "ab", "B", "n", "xb", "binary", "rb", "A", "bi", "i", "bs", "g", "fb", "aa", "wb", "u", "lb", "f", "e", "bu", "ad", "base", "sb", "be", "w", "z", "ba", "v", "l", "bb", "m", "r", "p"], "x": ["area", "height", "c", "d", "xy", "col", "data", "pos", "pixel", "int", "n", "i", "width", "time", "g", "min", "ax", "h", "val", "index", "ex", "f", "e", "dx", "X", "w", "z", "l", "v", "m", "xs", "p"], "y": ["height", "ey", "wy", "sy", "ya", "cy", "c", "d", "yi", "oy", "xy", "ry", "ny", "yl", "Y", "zy", "t", "i", "dy", "gy", "ay", "ym", "py", "yt", "ys", " dy", "yy", "z", "ady", "vy"]}}
{"code": "n = int(input())\\nb = list(map(int,input().split()))\\na = [0]*n\\nans = 0\\n\\na[0] = b[0]\\na[n-1] = b[n-2]\\nfor i in range(1,n-1):\\n  a[i]=min(b[i-1],b[i])\\nfor j in range(n):\\n  ans += a[j]\\n\\nprint(ans)", "target": "768", "substitutes": {"n": ["o", "cn", "k", "x", "c", "d", "yn", "nb", "num", "s", "non", "t", "an", "ni", "y", "na", "count", "en", "h", "network", "nn", "nan", "u", "len", "net", "size", "f", "e", "nt", "rn", "ns", "sn", "no", "w", "nat", "z", "l", "v", "gn", "m", "r", "nc", "p", "ne", "N"], "b": ["o", "k", "abb", "x", "c", "db", "d", "nb", "ab", "B", "bd", "s", "an", "array", "rb", "A", "y", "api", "bs", "g", "h", "beta", "bin", "aa", "wb", "u", "e", "f", "ad", "base", "sb", "w", "ba", "l", "v", "bb", "r", "m", "p"], "a": ["area", "auto", "o", "at", "x", "c", "aw", "d", "ar", "ac", "ab", "af", "pa", "an", "s", "array", "A", "y", "alpha", "na", "sa", "ana", "ia", "aa", "u", "f", "e", "am", "ca", "ad", "ga", "ai", "ae", "w", "aaa", "ba", "asa", "l", "aj", "m", "p", " A", "au"], "ans": ["NA", "x", "anus", "anan", "aning", "anned", "nas", "ins", "ases", "ations", "ars", "ants", "af", "anch", "args", "an", "s", "anc", "A", "ats", "cs", "anon", "sk", "annot", "na", "anas", "ds", "ks", "nan", "nn", "span", "ana", "can", "ia", "la", "AN", "cas", "aned", "ase", "anne", "ANS", "leans", "ann", "ad", "ns", "lan", "scan", "anna", "chan", "errors", "ai", "asa", "ano", "aus", "au"], "i": ["mini", "pi", "it", "o", "di", "k", "x", "xi", "c", "ci", "d", "io", "start", "ind", "ini", "ui", "ni", "bi", "id", "y", "h", "ix", "ip", "multi", "si", "u", "iu", "f", "I", "e", "mi", "ai", "z", "qi", "l", "v", "ii", "li", "p"], "j": ["kj", " bi", "ji", " J", "k", " je", "x", " ii", "jc", "ie", " inj", "oj", "J", "ind", "ni", "y", "ij", "bj", "ib", "ix", "jl", " jo", "jo", "si", "ja", "e", "je", "obj", "adj", "jj", "q", "dj", "z", "l", "jp", "ii", "jam", "v", "li", "p", "uj", "ne"]}}
{"code": "N, K  = map(int, input().split())\\nfor i in range(N):\\n  ans = K * (K-1)**(N-1)\\n\\nprint(ans)\\n", "target": "582", "substitutes": {"N": ["NA", "D", "k", "S", "CN", "Network", "R", "NS", "NE", "B", "Ns", "n", "J", "Y", "A", "L", "G", "Len", "NB", "CNN", "Size", "NN", "No", "Q", "AN", "I", "X", "C", "Na", "Ne", "NG", "V", "P", "KN", "Sk", "O", "H", "M", "F", "Z"], "K": ["KR", "D", "Ku", "k", "S", "DK", "R", "SK", "Ak", "KE", "Ka", "n", "J", "Y", "OK", "L", "NK", "G", "Power", "KK", "HK", "Q", "PK", "I", "X", "C", "V", "P", "Ke", "KA", "KN", "Sk", "KB", "KS", "O", "H", "M", "F", "Kent", "Z"], "i": ["ik", "o", "j", "gi", "c", "a", "io", "ind", "ch", "id", "y", "key", "h", "inn", "ix", "index", "ip", "u", "iu", "e", "I", "f", "q", "ai", "z", "li", "r", "p"], "ans": ["ANN", "Ann", "anan", "aning", "anned", "nas", "ins", "ars", "ants", "an", "anc", "anon", "sk", "na", "gan", "ks", "fan", "An", "ana", "nan", "can", "anes", "AN", "atan", "aned", "anne", "cas", "ANS", "leans", "kin", "ann", "lan", "ns", "ane", "scan", "anna", "ani", "ace", "aus", "ran"]}}
{"code": "N,M,L = map(int,input().split())\\nINF = 10**13\\nD = [[INF]*N for _ in range(N)]\\nfor i in range(N):\\n    D[i][i] = 0\\n\\nfor _ in range(M):\\n    A,B,C = map(int,input().split())\\n    D[A-1][B-1] = C\\n    D[B-1][A-1] = C\\n\\nfor k in range(N):\\n    for i in range(N-1):\\n        for j in range(i+1,N):\\n            D[i][j] = min(D[i][j],D[i][k]+D[j][k])\\n            D[j][i] = D[i][j]\\n\\nF = [[INF]*N for _ in range(N)]\\nfor i in range(N):\\n    for j in range(N):\\n        if i==j:\\n            F[i][j] = 0\\n        elif D[i][j] <= L:\\n            F[i][j] = 1\\n\\nfor k in range(N):\\n    for i in range(N-1):\\n        for j in range(i+1,N):\\n            F[i][j] = min(F[i][j],F[i][k]+F[j][k])\\n            F[j][i] = F[i][j]\\n\\nfor i in range(N):\\n    for j in range(N):\\n        if F[i][j] == INF:\\n            F[i][j] = -1\\n        elif i != j:\\n            F[i][j] -= 1\\n\\nQ = int(input())\\nfor i in range(Q):\\n    s,t = map(int,input().split())\\n    print(F[s-1][t-1])\\n\\n", "target": "467", "substitutes": {"N": ["U", "Node", "NA", "S", "CN", "R", "NS", "E", "NC", "NE", "NL", "Ns", "T", "All", "Order", "n", "W", "J", "Not", "Y", "G", "IN", "Len", "Num", "Ni", "CNN", "NT", "NM", " n", "Size", "No", "AN", "Length", "Count", "I", "X", "Ne", "NG", "V", "P", "In", "K", "O", "H", "Name", "Z"], "M": ["U", "Multi", "LM", "S", "R", "E", "Mon", "T", "W", "J", "Y", "G", "NM", "MD", "MS", "MN", "ME", "I", "X", "V", "P", "Mo", "MC", "K", "m", "O", "H", "Mi", "MF", "Z"], "L": ["U", "LM", "S", "LU", "R", "Z", "E", "NL", "T", "W", "J", "Y", "LI", "G", "IL", "Len", "SL", "LT", "I", "Li", "dL", "X", "Lu", "V", "P", "K", "l", "O", "ln", "LA"], "INF": ["InV", "KinFB", "INB", "inV", "ENF", "INEF", "ACFs", "ILF", "KinF", " INV", "Inf", "INFB", "ILV", "GENFs", "inN", "GENFB", "ACf", " INB", "inB", " INEF", "INV", "GENf", "inFs", "ACFB", "InN", "GENF", "InF", " INFs", "INFs", "INf", "inF", " INN", "ILEF", "KinFs", "inf", "INN", "ILf", "ACF", "ENf", "InEF", "ENB", " INf", "ENFs", "Kinf"], "D": ["U", "Dou", "DT", "S", "Dist", " d", "CD", "Del", "R", "d", "E", "Do", "LD", "Dat", "Ds", "Daniel", "Dom", "Data", "DO", "T", "Order", "W", "J", "PD", "All", "Y", "AD", "G", "Di", "Dir", "Diff", "DD", "DM", "MD", "Def", "De", "DI", " DI", "DB", "I", " Do", "Python", "And", "X", "DF", "DC", "YD", "V", "We", "P", "K", "Design", "DL", "DN", "O", "H", "DH", "DE", "Z"], "_": ["o", "out", "x", "c", "lex", "local", "n", "J", "non", "g", "h", "ix", "un", "ip", "f", "b", "code", "q", "l", "v", "m", "p", "block"], "i": ["it", "xi", "c", "anti", "phi", "oi", "Ni", "bi", "\u0438", "ion", "ip", "eni", "iu", "f", "I", "ti", "ki", "z", "m", "p", "io", "ji", "x", "gi", "ci", "d", "a", "ori", "id", "y", "ix", "ID", "ii", "li", "vi", "pi", "di", "uri", "yi", "ie", "cli", "int", "n", "J", "ini", "iq", "u", "e", "Li", "chi", "qi", "l", "v", "ic", "ei", "ik", "U", "o", "ri", "ui", "ni", "info", "api", "ir", "ij", "ia", "si", "b", "ai", "P"], "A": ["Ac", "U", "AR", "Ca", "As", "S", "E", "Alpha", "a", "CA", "T", "W", "J", "At", "Y", "Az", "G", "AM", "Am", "Ab", "Ma", "BA", "An", "AP", "Ar", "I", "AA", "b", "X", "Na", "P", "K", "API", "AB", "O", "AC", "LA"], "B": ["U", " b", "BF", "R", "E", "a", "BB", "T", "W", "BE", "BBC", "J", "Y", "G", "Ab", "NB", "BA", "BI", "GB", "Bs", "WB", "CB", "I", "AA", "b", "X", "V", "P", "BC", "AB", "O", "H"], "C": ["U", "S", "CN", "CD", "c", "R", "Z", "E", "CA", "T", "GC", "W", "Y", "G", "CU", "Con", "CF", "I", "CS", "X", "DC", "V", "P", "CC", "Cs", "K", "CR", "VC", "O", "AC", "H", "CM", "CL"], "k": ["kj", "ik", "it", "kn", "ke", "x", "kk", "c", "d", "ak", "ijk", "ky", "name", "n", "ck", "an", "kick", "ch", "id", "iq", "y", "key", "sk", "g", "ack", "unk", "ok", "ks", "uk", "kid", "un", "ko", "kin", "u", "f", "e", "b", "ki", "q", "w", "kind", "z", "K", "v", "l", "m", "p", "km", "ku"], "j": ["it", "xi", "c", "by", "jit", "bi", "h", "ion", "job", "jl", "f", "I", "jj", "gh", "z", "jp", "m", "io", "p", "ne", "ji", "js", "x", "ark", "gi", "er", "ci", "d", "a", "jc", "ori", "oj", "ch", "id", "y", "ix", "jo", "br", "ja", "jam", "ii", "li", "r", "uj", "note", "di", "ie", "int", "ind", "n", "J", "ah", "bj", "u", "e", "adj", "dj", "qi", "v", "l", "aj", "ik", "o", "ui", "ni", "key", "api", "false", "g", "ij", "ok", "ia", "un", "si", "jet", "je", "obj", "b", "q", "fr"], "F": ["U", "Base", "FR", "S", "Result", "Full", "New", "R", "Do", "E", "Fs", "WF", "Family", "Force", "FD", "Feed", "PF", "Function", "Flow", "T", "All", "EF", "W", "J", "This", "Y", "Fl", "G", "FE", "FH", "Figure", "Fixed", "Frame", "Front", "Check", "For", "File", "Far", "Fi", "function", "CF", "Form", "f", "I", "X", "FB", "DF", "FC", "FG", "GF", "V", "FF", "P", "Filter", "K", "We", "API", "If", "Fun", "O", "Fire", "H", "Config", "FO", "Z"], "Q": ["U", "S", "MQ", "R", "Queue", "E", "IQ", "T", "W", "J", "Y", "G", "Num", "I", "X", "q", "V", "Qu", "P", "K", "ID", " q", "Query", "O", "H", "Z"], "s": ["states", "ls", "o", "js", "S", "sync", "sin", "c", "d", "ses", "ss", "n", "qs", "cs", "y", "site", "bs", "g", "os", "ts", "ds", "ks", "gs", "si", "u", "sets", "f", "e", "ps", "ns", "tests", "q", "w", "z", "v", "l", "r", "types", "se", "p"], "t": ["tp", "o", "dt", "at", "x", "c", "d", "T", "n", "ot", "y", "ty", "ant", "ts", "tt", "tz", "tf", " T", "u", "f", "e", "b", "q", "pt", "w", "ta", "z", "v", "l", "m", "p", "tn"]}}
{"code": "N = int(input())\\nS = input().strip()\\nr = 0\\ntmp = 0\\nfor s in S:\\n    if s == \"I\":\\n        tmp += 1\\n        r = max(r, tmp)\\n    else:\\n        tmp -= 1\\nprint(r)\\n", "target": "697", "substitutes": {"N": ["Node", " R", "R", "nb", "B", "Ns", "T", "n", "W", "num", "Y", "A", "L", "G", "Num", "NB", "NT", " n", "No", "I", "C", "Na", "NR", "RN", "P", "O", "M", "F"], "S": ["SE", "SO", "SS", "R", "NS", "RS", "B", "Ns", "T", "TS", "W", "Si", "SI", "Squ", "A", "G", "L", "St", "SN", "Sm", "SC", "I", "SU", "C", "SB", "SF", "Sc", "V", "Sl", "P", "SM", "H", "M", "F"], "r": ["rs", "o", "k", "err", "x", " R", "j", "c", "R", "d", "ar", "output", "rm", "n", "var", "array", "t", "range", "mr", "root", "i", "result", "rf", "track", "rb", "rt", "rar", "lr", "number", "nr", "u", "e", "f", "max", "rr", "b", "q", "w", "z", "v", "l", "m", "right", "order", "ru", "p", "temp", "rc", "sr"], "tmp": ["Temp", "err", "x", "j", "extra", "c", "kk", "sp", "R", "np", "page", "current", "nb", "output", "a", "rm", "T", "vt", "int", "n", "amp", "t", "rb", "rf", "i", "ignore", "test", "alpha", "rt", "xxx", "offset", "cp", "tt", "beta", "pad", "st", "mp", "pp", "f", "max", "nt", "e", "pre", "stuff", "resp", "sup", "shift", "NR", "yy", "emp", "v", "m", "now", "order", "txt", "p", "temp"], "s": ["sec", "ls", "string", "x", "su", "c", "fts", "ws", "ses", "ins", "a", "start", "sl", "args", "ops", "space", "t", "i", "sw", "os", "ts", "ms", "self", "gs", "lines", "sf", "sq", "si", "sets", "f", "sym", "ps", "ns", "ans", "es", "sb", "ims", "sg", " ss", "xs", "words", "p", "sr"]}}
{"code": "#create date: 2020-07-03 22:02\\n\\nimport sys\\nstdin = sys.stdin\\nfrom itertools import groupby, accumulate\\n\\ndef ns(): return stdin.readline().rstrip()\\ndef ni(): return int(ns())\\ndef na(): return list(map(int, stdin.readline().split()))\\n\\ndef main():\\n    n, k = na()\\n    s = ns()\\n    a = list()\\n    if s[0] == \"0\":\\n        a.append(0)\\n    gr = groupby(s)\\n    for key, group in gr:\\n        a.append(len(list(group)))\\n    if s[-1] == \"0\":\\n        a.append(0)\\n    acum = list(accumulate(a))\\n    m = len(acum)\\n    l = 2*k + 1\\n    if m == 1:\\n        print(acum[0])\\n        quit()\\n    if l > m:\\n        print(acum[-1])\\n        quit()\\n    ans = acum[l-1]\\n    for i in range(0, m-l+1, 2):\\n        ans = max(ans, acum[i+l-1] - acum[i-1])\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "340", "substitutes": {}}
{"code": "ns = int(input()) #\\nns = list(map(int, input().split()))\\n\\n\\nprint(*ns[::-1]) \\n", "target": "248", "substitutes": {"ns": ["ls", "NS", "ng", "ins", "name", "data", "ss", "als", "Ns", "n", "args", "s", "ats", "id", "tx", "xml", "prefix", "na", "ms", "ids", "ix", "names", " namespace", "q", "its", "nc", "odes"]}}
{"code": "from copy import  deepcopy\\ndef bubble_sort(lst):\\n    size=len(lst)\\n    for i in xrange(size):\\n        for j in reversed(range(i+1,size)):\\n            if lst[j].num<lst[j-1].num:\\n                tmp=lst[j]\\n                lst[j]=lst[j-1]\\n                lst[j-1]=tmp\\ndef selection_sort(lst):\\n    size=len(lst)\\n    for i in xrange(size):\\n        mn=i\\n        for j in xrange(i+1,size):\\n            if lst[mn].num>lst[j].num:\\n                mn=j\\n        tmp=lst[i]\\n        lst[i]=lst[mn]\\n        lst[mn]=tmp\\nclass pock:\\n    def __init__(self,val):\\n        self.val=val\\n        self.num=int(val[1:])\\n    def __gt__(self,other):\\n        return self.num>other.num\\n\\n\\nnum=raw_input().strip()\\ninp=raw_input().strip().split()\\narr=[]\\nfor ii in inp:\\n    arr.append(pock(ii))\\nbubb=deepcopy(arr)\\nbubble_sort(bubb)\\ninsec=deepcopy(arr)\\nselection_sort(insec)\\nprint \" \".join(pp.val for pp in bubb)\\nprint \"Stable\"\\n\\nprint \" \".join(pp.val for pp in insec)\\nok=1\\nln=len(arr)\\nfor i  in xrange(ln):\\n    if(bubb[i].val!=insec[i].val):\\n        ok=0\\n        break\\nif ok==1:\\n    print \"Stable\"\\nelse:\\n    print \"Not stable\"\\n\\n", "target": "30", "substitutes": {"lst": ["ylstr", "lbset", "dlnt", " lsc", "llST", "elsc", "lbstore", "List", "ylsts", "ilst", "llbl", "llsts", "slist", "Lnt", "plbl", "llist", "llset", "lsc", "ilsts", "bstr", "elst", " list", "flsc", "lbst", "dlrest", "plst", "slst", "elft", "lbl", "Lst", "dlsc", " lft", "llft", "dlst", "lcstr", "ilST", "blst", " lST", "llstr", "lsts", "ilstr", "Lstr", " lstr", "plrest", "plsts", "ylst", "blsts", "lcst", " lset", "Lsc", "lbbl", " lbl", "plset", "elbl", "list", " lsp", "ilbl", "ilset", "plist", "slnt", "LST", "lST", "ylsp", "dlset", "lcset", "flsts", "lstr", "bset", "slST", "dlstr", "flbl", "plsc", "llsc", "flrest", "llstore", "lcbl", " lstore", "bnt", " lnt", "llst", "flsp", "elstore", "elset", "ylstore", "blST", "lset", " lrest", "plstr", "ylbl", "flset", "elstr", "lstore", "lsp", " lsts", "flst", "blstr", "lnt", "bst", "lrest", "elST", "lft"], "size": ["unit", "use", "sec", "mode", "empty", "loc", "mini", "sized", "core", "san", "ci", "large", "scale", "cycle", "ng", "slice", "sum", "name", "ny", "second", "ize", "year", "n", "iz", "ui", "range", "weight", "width", "time", "SIZE", "en", "Size", "who", "cm", "speed", "grow", "model", "zip", "si", "len", "address", "e", "code", "shape", "sn", "shift", "six", "sh", "external", "z", "sc", "fee", "now", "se", "small", "form", "zi"], "i": ["ik", "pi", "di", "ji", "uri", "o", "iw", "k", "x", "xi", "c", "gi", "ci", "d", "yi", "ri", "phi", "a", "ie", "ori", "int", "ind", "n", "ini", "ui", "t", "ni", "bi", "id", "y", "ir", "ij", "inn", "ix", "index", "ip", "eni", "si", "u", "iu", "f", "ti", "I", "e", "b", "mi", "hi", "ki", "im", "ai", "z", "p", "qi", "l", "v", "jp", "li", "m", "ei", "ih", "io"], "j": ["it", "ji", "o", "js", "k", "x", "_", "c", "ci", "d", "jc", "a", "ie", "section", "start", "int", "ind", "oj", "J", "n", "all", "t", "ni", "id", "y", "g", "min", "ij", "job", "jl", "ip", "next", "jo", "last", "si", "br", "u", "ja", "jet", "f", "obj", "e", "b", "jj", "je", "adj", "q", "dj", "im", "z", "json", "v", "jp", "l", "jam", "m", "li", "aj", "fr", "p", "uj", "r"], "tmp": ["mini", "tp", "loc", "mb", "su", "kk", "pb", "sp", "np", "vm", "nm", "img", "nb", "data", "pos", "vt", "meta", "mmm", "amp", "rb", "buf", "tab", "cmp", "test", "uni", "xxx", "fb", "cp", "nn", "job", "next", "pad", "fake", "mp", "nom", "pre", "buff", "obj", "adj", "jj", "sup", "stuff", "qq", "mm", "new", "sb", "no", "ani", "pm", "z", "MM", "v", "jp", "m", "txt", "now", "prev", "p", "temp", "fp"], "mn": ["mini", "wm", "di", "mc", "mb", "gi", "ng", "nm", "vm", "nb", "jc", "temp", "n", "ini", "nz", "man", "ni", "bi", "uni", "min", "dim", "ij", "mx", "nn", "dr", "cm", "master", "md", "main", "index", "nr", "nom", "mp", "fn", "rn", "mu", "b", "jj", "mi", "ns", "hn", "mm", "dj", "pm", "init", "dm", "ai", "jp", "m", "li", "r", "nc", "uj", "km"], "self": ["part", "Self", "this", "k", "work", "x", "err", "object", "full", "er", "plus", "response", "c", "ctx", "current", "node", "output", "value", "app", "pos", "instance", "all", "user", "s", "cache", "result", "cmp", "key", "g", "static", "h", "parent", "worker", "py", "master", "first", "host", "item", "me", "default", "e", "one", "obj", "func", "my", "resp", "base", "new", "peer", "proxy", "q", "ref", "v", "r", "now", "p", "cl", "call"], "val": ["type", "al", "doc", "local", "dev", "valid", "var", "reg", "split", "live", "sel", "item", "base", "pl", "ref", "grad", "p", "loc", "x", "alt", "data", "sl", "Value", "root", "ret", "py", "seq", "bal", "default", "label", "arg", "call", "unit", "old", "VAL", "int", "ind", "long", "serv", "bl", "index", "vals", "bin", "comp", "stat", "len", "new", "init", "v", "rot", "el", "ver", "sum", "name", "value", "prop", "fl", "pos", "all", "cal", "test", "key", "cond", "Val", "win", "play", "eval", "obj", "values", "lib", "msg", "lit", "slot"], "num": ["type", "home", "nb", "valid", "mon", "fam", "uni", "nu", "multi", "nom", "ns", "cum", "uu", " image", "ne", "count", " pic", " text", "um", "off", "om", " fn", "du", " comb", "id", "Num", " data", "coord", "na", "umi", "norm", "lam", "max", "am", "label", "code", "NUM", "no", " code", " pref", "bid", "gen", "arg", " info", "unit", "nm", "node", " inj", " ip", "n", " param", "con", "index", "bin", " inc", "nr", " id", "len", "net", "fn", "lang", "member", " bin", "init", "nc", "nam", "form", "rank", " iv", "dom", "np", " ind", "sum", "name", "value", "pos", "mod", " output", "all", "mem", "dim", " input", "number", " init", " index", " seq", " orig", " ic", "lit"], "other": ["related", "it", "part", "extra", "_", "plus", "Other", "real", "existing", "same", "value", "coll", "some", "second", "user", "key", "OTHER", "original", "image", "iter", " others", "parent", "union", "item", "resource", "one", "outer", "new", "child", "member", "also", "lib", "shared", "another", "any", "different", "two"], "inp": ["INps", "invp", "inlp", " inlp", "insc", "INc", "ranlp", "conps", " invp", "inc", "insvp", "ranps", "ranp", "ranc", "conc", " inc", "inps", "convp", "INp", "insp", " inps", "insps", "conp", "INlp"], "arr": ["cur", "el", "part", "ext", "err", "au", "ar", "img", "data", "inst", "app", "coll", "arb", "ind", "list", "array", "plot", "cache", "aug", "arp", "ch", "yr", "ray", "div", "abc", "act", "iter", "bl", "batch", "adr", "aa", "zip", "br", "stack", "att", "train", "obj", "adj", "ann", "rr", "arch", "res", "gr", "frac", "aaa", "attr", "air", "str", "fr", "r", "dat", "p", "enc"], "ii": ["di", "uri", "iw", "gi", "ci", "img", "ih", "ori", "ind", "n", "all", "ini", "ni", "id", "iq", "get", "iri", "image", "inn", "ix", "index", "eni", "si", "iii", "iu", "ti", "code", "mi", "inf", "ai", "ani", "z", "draw", "qi", "li", "now", "got", "abi", "vi"], "bubb": [" bugg", "Bub", "bbub", "bdubb", "lobb", "boba", "Boba", "Bobb", " bubby", " bobb", "lub", "bdoba", "Bubby", "lubb", "bbubby", "bubby", "bugg", "bbubb", "lugg", "bobb", "bdubby", "Bugg", "bub", "loba", "Bubb", " bub", "bbobb", "lubby", "bdub"], "insec": [" inesc", "consc", "Insec", "kinc", "pinstruct", "Inc", "inst", "insc", "pinsect", "const", "ninsector", " instruct", "innesc", "nincl", "incl", "insector", "inc", "pincl", " inst", "kincl", "innsc", "Insect", "pinsec", "kinsect", "onsec", "ninsec", "onsector", "innsec", " inc", "consec", "instruct", "inesc", "vinstruct", "vinsect", "ninstruct", "vincl", "vinsec", "innst", "Incl", "conesc", " incl", " insect", " insc", "kinsec", "onstruct", "oncl", " insector", "insect"], "pp": ["ppe", "par", "pb", "pg", "px", "op", "sp", "kk", "ipp", "gp", "inst", "app", "vv", "upp", "ff", "ck", "opp", "cc", "vp", "po", "amp", "pkg", "ppa", "cs", "ph", "proc", "cmp", "push", "pack", "cp", "co", "pr", "ip", "py", "comp", "mp", "pot", "ps", "pn", "supp", "PP", "pl", "pt", "q", "pm", "ep", "pe", "str", "pc", "bb", "ppo", "p", "plug", "cpp", "pps"], "ok": ["auto", "log", "o", "sync", "good", "err", "k", "oh", "op", "Ok", "od", "ready", "ak", "left", "ob", "fail", "bug", "ori", "ind", "ot", "all", "valid", "ck", "OK", "yk", "info", "id", "check", "os", "ack", "ax", "ms", "md", "job", "error", "ko", "ask", "fit", "lock", "no", "z", "yes", "oc", "show", "req", "level", "count"], "ln": ["lp", "ls", "hl", "kn", "wl", "lf", "nb", "kl", "fl", "vin", "n", "zen", "bn", "ll", "Len", "fd", "oln", "nn", "lv", "lr", "nl", "vl", "win", "lines", "unn", "lon", "zip", "lin", "lb", "len", "fn", "rl", "rn", "lan", "hn", "sn", "dl", "l", "lc", "lvl", "conn"]}}
{"code": "N, M = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nb_list = []\\nc_list = []\\nfor _ in range(M):\\n    b, c, = list(map(int, input().split()))\\n    b_list.append(b)\\n    c_list.append(c)\\n\\ndata = dict()\\nfor a in A:\\n    if a in data:\\n        data[a] += 1\\n    else:\\n        data[a] = 1\\n\\nfor i in range(M):\\n    if c_list[i] in data:\\n        data[c_list[i]] += b_list[i]\\n    else:\\n        data[c_list[i]] = b_list[i]\\n\\nkey = list(data.keys())\\nkey.sort(reverse=True)\\nnum = 0\\nind = 0\\nans = 0\\nwhile True:\\n    if num + data[key[ind]] <= N:\\n        ans += data[key[ind]]*key[ind]\\n        num += data[key[ind]]\\n    else:\\n        ans += (N - num)*key[ind]\\n        break\\n    ind += 1\\nprint(ans)\\n", "target": "711", "substitutes": {"N": ["U", "Node", "D", "S", "R", "NS", "E", "NC", "B", "Ns", "T", "n", "W", "Y", "L", "G", "Ni", "Len", "Num", "NT", "NM", " n", "MN", "Q", "I", "X", "C", "NI", "Ne", "NUM", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "Multi", "LM", "D", "S", "R", "E", "B", "T", "W", "J", "n", "Y", "L", "G", "MU", "RM", "NM", "MD", "MS", "MN", "Q", "I", "X", "C", "JM", "V", "P", "Mo", "K", "m", "O", "H", "Mi", "F", "CM", "MF", "Z"], "A": ["As", "U", "NA", "D", "S", "E", "Alpha", "B", "CA", "Data", "T", "mA", "Array", "Y", "array", "L", "G", "Am", "alpha", "Ma", "LA", "Ar", "I", "AA", "C", "Na", "V", "P", "K", "O", "H", "AC", "F", "Z"], "b_list": ["B_batch", "c_l", "c_data", "b_l", "B_l", " b_l", "b2l", "b2chain", "B_chain", "c_lists", " b_chain", "b_stack", "B_list", "b_lists", "b_data", "b2list", "b2batch", "b_batch", "b2stack", " b_stack", "b_key", "b_chain", "c_key"], "c_list": ["c_info", "c_i", "c_map", "cpylist", " c2stack", "cpypart", " c_stack", "b_info", " c_l", "c_l", " c_type", "b_table", "c_part", "c2i", "c2part", "cpyl", "c_load", " c2part", "c_table", " c_cl", "c2stack", " c2i", "b_l", "b_load", "b_part", " c_st", "cpyload", "c2list", " c_i", "c_st", " c_map", "c_cl", "c_type", " c_part", "c_stack", " c2list"], "_": ["k", "x", "j", " __", "d", " time", "g", " j", "f", "I", "am", "ad", "code", " k", "m", "p"], "b": ["o", "eb", "x", "abb", "db", "d", "cb", "nb", "ab", "B", "bc", "BB", "n", "xb", "rb", "y", "bs", "g", "fb", "abc", "aa", "wb", "u", "e", "f", "sb", "be", "ba", "l", "v", "r", "bb", "p"], "c": ["k", "x", "cy", "ci", "d", "ac", "uc", "bc", "n", "cc", "s", "ce", "cs", "y", "g", "h", "cm", "cu", "u", "f", "e", "ca", "C", "q", "w", "z", "cr", "v", "l", "m", "r", "cf", "p"], "data": ["grade", "results", "current", "valid", "body", "next", "aa", "multi", "f", "base", "dict", "memory", "p", "temp", "group", "count", "mode", "part", "x", "d", "scale", "output", "format", "record", "ata", "an", "result", "na", "map", "default", "code", "DATA", "cat", "dat", "call", "input", "Data", "int", "n", "s", "list", "array", "config", "actions", "update", "alpha", "keys", "index", "batch", "model", "la", "function", "u", "rec", "new", "state", "l", "series", "rate", "o", "case", "this", "response", "options", "value", "pos", "da", "cache", "info", "database", "api", "div", "change", "parent", "number", "dates", "mu", "one", "ad", "w", "order"], "a": ["ma", "area", "auto", "ha", "x", "ar", "ac", "ab", "app", "art", "af", "n", "da", "an", "array", "fa", "id", "y", "alpha", "api", "na", "sa", "parent", "ana", "index", "aa", "la", "va", "e", "f", "ad", "ca", "code", "am", "ga", "ai", "ae", "ta", "z", "p", "ba", "aaa", "ea", "aj", "m"], "i": ["pi", "di", "uri", "k", "x", "xi", "j", "gi", "ci", "d", "yi", "oi", " I", "ri", "ac", "io", "ie", "ori", "int", "n", "ini", "ui", "t", "ni", "bi", "id", "y", "info", "api", " j", "h", "ix", "ip", "multi", "si", "iii", "u", "iu", "f", "I", "e", "ti", "ai", "p", "qi", "l", "ii", "li", "m", "abi"], "key": ["note", "core", "type", "part", "o", "case", "field", "k", "x", "j", "search", "close", "page", "point", "col", "name", "pair", "ie", "ac", "value", "record", "switch", "list", "cache", "array", "root", "info", "id", "ray", "y", "entry", "check", "map", "date", "change", "parent", "co", "keys", "index", "number", "error", "row", "char", "item", "play", "ee", "code", "match", "base", "pick", "lock", "child", "link", "no", "q", "sign", "Key", "ace", "order", "dat", "p", "temp", "group", "block", "call"], "num": ["o", "loc", "dom", "su", "tu", "um", "ul", "np", "om", "node", "sum", "nb", "name", "col", "mult", "du", "pos", "n", "hom", "anc", "an", "man", "cal", "Num", "id", "anon", "mn", "uni", "mon", "na", "con", "dim", "en", "inn", "nn", "un", "span", "index", "nu", "number", "umi", "multi", "u", "len", "mu", "one", "ann", "am", "cum", "NUM", "ani", "init", "m", "gen", "form", "count"], "ind": ["wind", "j", "fail", "ff", "inn", "end", "pl", "z", "draw", "ld", "ne", "count", "Ind", "loc", "k", "err", "x", "ci", "d", "mind", "dir", "id", "keep", "cand", "vert", "md", "dr", "acc", "pp", "ann", "seed", "pt", "add", "andi", "ii", "dat", "ill", "di", "ang", "sp", "find", "col", "old", "inst", "app", "int", "n", "bind", "ord", "index", "span", "len", "nt", "adj", "IND", "init", "kind", "ins", "ina", "start", "pos", "nd", "pull", "inc", "div", "ign", "iter", "write", "obj", "ad", "fr", "dist"], "ans": ["rs", "ls", "offs", "aning", "ras", "nas", "ins", "amps", "ens", "n", "args", "an", "anc", "s", "man", " means", "ats", "cs", "anon", "ams", "cases", "na", "os", "anas", "plan", "ms", "ds", "ids", "nan", "ks", "span", "ana", "nn", "can", "AN", "cas", "aned", "len", "ANS", "ann", "lan", "ns", "ands", "lang", "errors", "es", "ions", "ani", "ai", "mean", "ln", "rates", "aus", "ons"]}}
{"code": "n, m = map(int, input().split())\\n\\nif n == 2 or m == 2:\\n    ans = 0\\nelif n == 1 and m == 1:\\n    ans = 1\\nelif n == 1 or m == 1:\\n    ans = max(n, m) - 2\\nelse:\\n    ans = (n - 2)*(m - 2)\\n\\nprint(ans)", "target": "238", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "d", "nb", "ny", "an", "num", "s", "ni", "i", "y", "anon", "mn", "na", "g", "min", "en", "network", "nn", "un", "nu", "u", "net", "f", "e", "nt", "rn", "b", "max", "ns", "pn", "sn", "no", "nor", "z", "dn", "l", "v", "r", "nc", "p", "ne", "N"], "m": ["mini", "o", "mc", "k", "x", "j", "tm", "c", "fm", "gm", "d", "nm", "om", "int", "an", "s", "mr", "num", "i", "y", "mn", "machine", "min", "g", "h", "ms", "ym", "md", "cm", "mo", "u", "e", "f", "mu", "b", "mi", "sm", "mm", "im", "q", "w", "pm", "dm", "z", "l", "v", "hm", "r", "M", "p", "bm"], "ans": ["offs", "cus", "anus", "san", "aning", "ras", "nas", "ins", "a", "ars", "ants", "amps", "ens", "ean", "an", "anc", "ats", " means", "ents", "ams", "anon", "sk", "na", "os", "anas", "ds", "anse", "ks", "ana", "nan", "span", "can", "AN", "atan", "aned", "leans", "cas", "ANS", "anne", "ann", "lan", "anges", "ane", "ns", "sn", "ai", "ani", "ays", "annels", "mean", "eps", "aus", "ons"]}}
{"code": "import queue\\n\\ndef main():\\n    n = int(input())\\n    A = list(map(int,input().split()))\\n    A = sorted(A,reverse=True)\\n    q = queue.PriorityQueue()\\n    q.put([-1*A[0],-1*A[0]])\\n    ans = 0\\n    for a in A[1:]:\\n        _min, _max = map(lambda x:-1*x,q.get())\\n        ans += _min\\n        q.put([-1*a,-1*_min])\\n        q.put([-1*a,-1*_max])\\n    print(ans)\\n    return \\n\\nif __name__ == \"__main__\":\\n    main()", "target": "328", "substitutes": {"n": ["NA", "o", "k", "j", "c", "np", "d", "ar", "nb", "num", "t", "i", "g", "en", "nn", "f", "nt", "e", "b", "ns", "w", "l", "m", "nc", "p", "ne", "N"], "A": ["As", "U", "Ac", "NA", "D", "S", "au", "Alpha", "Auth", "Ak", "B", "CA", "All", "T", "Ay", "W", "mA", "At", "Array", "Y", "array", "G", "AM", "L", "Am", "an", "Az", "alpha", "AS", "Ma", "An", "Area", "AP", "Q", "Ar", "Wa", "I", "AA", "X", "C", "AST", "Na", "F", "V", "ai", "P", "API", "K", "This", "H", "M", "Input", "p", "AC", "N", "LA"], "q": ["o", "qt", "k", "sync", "x", "c", "np", "d", "queue", "ck", "qs", "list", "cache", "que", "t", "quit", "ch", "cl", "iq", "get", "quick", "check", "client", "qa", "g", "ack", "h", "ue", "query", "can", "quad", "Q", "sq", "qv", "u", "f", "max", "e", "qq", "aq", "sh", "w", "P", "z", "qi", "l", "v", "p", "req", "qu", "dq"], "ans": ["asses", "x", "san", "nas", "ras", "ases", "ars", "ants", "any", "amps", "asks", "an", "anc", "s", "ads", "ats", " means", "ops", "sk", "na", "os", "anas", "ks", "ana", "nan", "span", "can", "anes", "AN", "atan", "aned", "leans", "ANS", "ann", "lan", "ns", "ends", "errors", "es", "chan", "ai", "aces", "ani", "ays", "annels", "eps", "aus", "ons"], "a": ["area", "\u00e4", "x", "c", "aw", "ar", " Ax", " am", "ac", " p", "ab", "art", "af", " af", "da", "an", "fa", "y", "alpha", "xa", "qa", "sa", "ax", " x", "ana", " ax", "aa", "la", " da", " an", "va", "oa", "f", "ad", "am", "ca", "b", " i", "ai", "ae", "asa", "ba", "aaa", "z", "aj", "p", "au"], "_min": ["maxmin", "_pos", "longn", " _sum", "_sum", "maxsum", "psum", "_diff", "ppos", "pmax", "pmin", "longmin", " _pos", "longmax", "_n", "pdiff", "maxmax", "longdiff", "maxpos"], "_max": ["_right", "_Max", "longend", "_end", "longax", " _right", "_ax", "longmin", "longmax", " _Max"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\n\\nkills = 0\\nb_k = 0\\n\\nfor i in range(n):\\n    b_k = b[i]\\n    for j in range(2):\\n        if b_k - a[i+j] >= 0:\\n            kills += a[i+j]\\n            b_k -= a[i+j]\\n            a[i+j] = 0\\n        else:\\n            kills += b_k\\n            a[i+j] -= b_k\\n            b_k = 0\\n\\nprint(kills)", "target": "530", "substitutes": {"n": ["o", "k", "x", "c", "np", "d", "nb", "s", "num", "t", "ni", "y", "count", "h", "network", "nn", "nan", "span", "nu", "u", "nt", "f", "ns", "sn", "no", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "o", "k", "x", "input", " fa", "c", "aw", "d", "ab", "ac", "da", "an", "s", "array", "A", "y", "alpha", "na", "g", "sa", "aa", "u", "va", "f", "e", "am", "ad", "ca", "ga", "ai", "w", "z", "ba", "aaa", "l", "aj", "m", "p", "au"], "b": ["o", "k", "c", "d", "nb", "ab", "B", "s", "A", "y", "alpha", "bs", "g", "fb", "beta", "aa", "u", "f", "e", "ad", "base", "sb", "w", "ba", "l", "v", "bb", "m", "r", "p"], "kills": [" kill", " killing", "skilling", "skILL", "kips", "lcill", "ksips", "filled", "skill", "skills", "fILL", "killed", "lcills", "lcILL", " kips", "filling", "skips", "killing", "ksill", "kils", "ksills", " kils", " kILL", "fill", "kILL", "skilled", "ksilling", "kill", "fills", " killed", "skils", "lcils"], "b_k": ["b_ko", " b_c", " b_mk", " b_kn", " b_ko", " b_K", " b_j", "b_t", "b_sk", " b_0", " b_ks", "b2k", " b_t", "b_j", "b_n", "b_ks", "b2ks", "b_ke", "b_0", "b_c", "b_50", "b2ke", "b_mk", " b_sk", " b_n", " b_ke", "b_kn", "b_K", " b_50"], "i": ["mini", "pi", "di", "ji", "o", "k", "x", "xi", "c", "gi", "ci", "d", "yi", "oi", "io", "ie", "start", "ind", "ini", "ui", "t", "ni", "info", "id", "y", "api", "h", "ib", "ix", "index", "ip", "jo", "multi", "eni", "si", "u", "iu", "fi", "f", "I", "e", "ti", "mi", "hi", "im", "ai", "z", "qi", "l", "v", "ii", "li", "m", "ih", "p", "vi"], "j": ["kj", "ji", " J", "js", "o", "part", "k", "x", "c", "d", " ii", "jc", "ind", "oj", "J", "uj", "t", "ch", "y", " dj", "g", "ij", "bj", " z", "jl", "jo", " c", " l", "u", "ja", "f", "I", "je", "end", "jj", "jet", "e", "q", "ai", "dj", "z", "v", "jp", "l", "m", "p", " jo"]}}
{"code": "#!/usr/bin/env python3\\nimport sys, math, itertools, collections, bisect\\ninput = lambda: sys.stdin.buffer.readline().rstrip().decode('utf-8')\\ninf = float('inf') ;mod = 10**9+7\\nmans = inf ;ans = 0 ;count = 0 ;pro = 1\\n\\ns=input()\\nif \"AC\" in s:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "384", "substitutes": {}}
{"code": "import math\\n\\ndef cmb(n, r, mod):\\n    if ( r<0 or r>n ):\\n        return 0\\n    r = min(r, n-r)\\n    return g1[n] * g2[r] * g2[n-r] % mod\\n\\nmod = 10**9+7 #\u51fa\u529b\u306e\u5236\u9650\\nN = 10**5+5\\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\\n\\nfor i in range( 2, N + 1 ):\\n    g1.append( ( g1[-1] * i ) % mod )\\n    inverse.append( ( -inverse[mod % i] * (mod//i) ) % mod )\\n    g2.append( (g2[-1] * inverse[-1]) % mod )\\n\\nN,K = list(map(int,input().split()))\\nA = sorted(tuple(map(int,input().split())))\\nB = tuple(A[i+1]-A[i]  for i in range(len(A)-1))\\nlim = math.ceil(len(B)/2)\\n\\nL = 10**9+7\\nans = 0\\nmulti = cmb(N,K,mod)\\nfor j in range(lim):\\n    front = j + 1\\n    back = N - front\\n    tmp_b = 0\\n    tmp_f = 0\\n    if front >= K:\\n        tmp_f = cmb(front,K,mod)\\n    if back >= K:\\n        tmp_b = cmb(back,K,mod)\\n    if j == (len(B)-1)/2:\\n        ans += (multi - tmp_b - tmp_f)*(B[j]) % L\\n    else:\\n        ans += (multi - tmp_b - tmp_f)*(B[j]+B[len(B)-1-j]) % L\\nprint(ans%L)", "target": "36", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "R", "d", "ar", "node", "nb", "num", "t", "i", "y", "g", "min", "h", "number", "nu", "nr", "u", "net", "nt", "rn", "e", "f", "b", "ns", "sn", "w", "z", "l", "v", "m", "nc", "p", "ne", "sr", "N"], "r": ["rs", "rd", "k", "err", "x", "j", "c", "er", "R", "d", "ar", "rad", "a", "rm", "re", "rh", "s", "mr", "rb", "t", "rf", "i", "yr", "rt", "g", "ir", "h", "rar", "dr", "pr", "lr", "radius", "nr", "u", "e", "f", "rn", "rr", "b", "rl", "w", "nor", "z", "cr", "l", "v", "m", "right", "ru", "order", "p", "rc", "sr"], "mod": ["sec", "mode", "step", "od", "exp", "j", "tr", "d", "rad", "temp", "rule", "fun", "debug", "num", "var", "reg", "aug", "rod", "mag", "div", "dig", "magic", "rep", "comp", "mods", "row", "spec", "max", " Mod", "rec", "MOD", "Mod", "im", "module", "pm", "sign", "grad", "complex", "m", "orig", "order", "req", "form", "rc", "user", "method"]}}
{"code": "import numpy as np\\nfrom numba import jit\\nN,K=map(int,input().split())\\nA=list(map(int,input().split()))\\n\\n@jit\\ndef imos(A):\\n    B=np.zeros_like(A)\\n    for i,x in enumerate(A):\\n        a=max(0,i-x)\\n        b=min(i+x,N-1)\\n        B[a]+=1\\n        if b+1<=N-1:\\n            B[b+1]-=1\\n    B=np.cumsum(B)\\n    return B\\n\\nfor i in range(K):\\n    if i>=50:\\n        break\\n    A=imos(A)\\nprint(*A)", "target": "377", "substitutes": {"N": ["U", "Node", "NA", "II", "D", " NP", "S", "k", " L", "R", "NS", " I", " H", "Ns", "T", "n", "W", "J", " C", "Ni", "L", "Num", " X", "NB", " n", "Size", "No", " M", "Q", "I", "X", "C", "NI", "Ne", " D", "V", "P", " P", "O", "H", "M", "F", "Z"], "K": ["U", "D", "k", "S", "SK", "E", "Ak", "T", "KE", "W", "J", "n", "Y", "G", "L", "HK", "Q", "PK", "X", "C", "V", "P", "KN", "Sk", "KS", "O", "H", "M", "F", "Z"], "A": ["As", "U", "AR", "NA", "D", "S", "New", "Java", "E", "Alpha", "CA", "All", "T", "W", "mA", "This", "At", "Array", "Y", "array", "G", "L", "IA", "AM", "AS", "Ab", "HA", "AY", "GA", "SA", "Adam", "AP", "Average", "Q", "I", "AA", "X", "The", "C", "AST", "App", "MA", "V", "P", "API", "AF", "AB", "AH", "Input", "M", "H", "F", "AC", "LA"], "B": ["U", "Base", "Bu", "EB", "D", " BA", "BS", "BF", "BM", "R", "E", "LB", "Bi", "BB", "T", "UB", "W", "Y", "L", "G", "NB", "BA", "BI", "OB", "GB", "Bs", "BL", "Band", "QB", "DB", "WB", "I", "X", "SB", "C", "BG", "Block", "MB", "V", "P", "BC", "AB", "O", "H", "M", "F", "Z"], "i": ["pi", "di", "o", "ji", "k", "xi", "j", "axis", "c", "ci", "d", "yi", "phi", "ri", "io", "ie", "ori", "cli", "int", "ind", "n", "s", "ini", "ni", "bi", "id", "y", "on", "h", "ij", "ix", "index", "ip", "aci", "si", "u", "iu", "f", "I", "e", "ti", "ki", "ai", "z", "chi", "qi", "v", "l", "ii", "li", "m", "abi", "p", "zi"], "x": ["k", "xi", "j", "axis", "c", "ci", "d", "xy", "int", "n", "s", "t", "y", " X", "width", "xxx", "min", "g", "ax", "h", "rx", "ix", "index", "ex", "xc", "u", "e", "dx", "f", "max", "X", "xx", "hi", "q", "im", "w", "z", "v", "l", "m", "xs", "p"], "a": ["area", "c", "ac", "ab", "af", "n", "an", "s", "y", "alpha", "api", "sa", "aa", "u", "va", "oa", "f", "e", "ad", "ca", "am", "ai", "ae", "w", "asa", "ba", "aj", "ap", "p"], "b": ["o", "eb", "k", "mb", "j", "c", "db", "d", "ob", "nb", "cb", "ab", "bc", "bd", "n", "xb", "rb", "bi", "bot", "y", "bs", "body", "g", "fb", "ib", "aa", "wb", "br", "lb", "u", "f", "e", "ad", "base", "sb", "be", "ba", "l", "v", "bb", "bf", "p", "bp"]}}
{"code": "S = input()\\n\\nb_count = 0\\nans = 0\\n\\nfor pos in range(len(S)):\\n    if S[pos] == 'B':\\n        b_count += 1\\n    else:\\n        ans += b_count\\n\\nprint(ans)", "target": "587", "substitutes": {"S": ["SE", "U", "SH", "SO", "D", "ASC", "BS", "SS", "R", "NS", "B", "T", "Si", "SI", "s", "A", "G", "L", "SR", "SN", "INS", "POS", "SC", "I", "X", "SU", "C", "SB", "SF", "Su", "V", "Sl", "P", "SM", "SP", "O", "H", "M", "Input", "F", "N"], "b_count": ["bacsum", "b2count", "b_size", "b64count", "ballnumber", "ballcount", "baccount", "b_code", "ballcond", "b2sum", "B_cond", " b_size", "b64number", "b2code", " b_sum", "baccode", "b_cond", "b_number", "bacCount", "ballCount", "B_Count", "B_number", "b64cond", "b2size", "b64Count", " b_Count", " b_code", "b_sum", "bacsize", "B_count", "b2Count", "b_Count"], "ans": ["ls", "case", "std", "anus", "anan", "aning", "anned", "nas", "ins", "reads", "aos", "a", "ars", "ants", "aid", "int", "n", "ens", "an", "s", "anc", " means", "asts", "cs", "ents", "anon", "na", "os", "anas", "ds", "ks", "nn", "ana", "span", "can", "anes", "lines", "AN", "atan", "leans", "ania", "aned", "ANS", "anne", "ann", "lan", "ns", "ane", "chan", "errors", "ano", "ays", "annels", "mean", "bb", "gen", "aus"], "pos": ["o", "Pos", "ang", "loc", "x", "j", "c", "ass", "d", "a", "start", "pro", "int", "ind", "n", "num", "po", "i", "os", "val", "cond", "offset", "POS", "index", "seq", "len", "nos", "spec", "size", "cos", "neg", "end", "no", "pt", "position", "z", "ref", "conf", "p", "block", "pose"]}}
{"code": "import math\\nN, M = map(int, input().split())\\n\\nans = 1\\nif(N < M//N):\\n  i = N\\n  while(ans == 1 and i <= math.sqrt(M)):\\n    if(M % i == 0):\\n      ans = M//i\\n    i += 1\\nif(N >= M//N or ans == 1):\\n  i = M//N\\n  while(ans == 1 and i >= 1):\\n    if(M % i == 0):\\n      ans = i\\n    i -= 1\\n  \\nprint(ans)", "target": "163", "substitutes": {"N": ["ND", "U", "Node", "NA", "D", "S", "Max", "CN", "Net", "R", "NS", "E", "NC", "NE", "B", "Mon", "Ns", "T", "Inf", "n", "J", "NH", "Bi", "W", "Y", "A", "L", "G", "Ni", "Wh", "Num", "Zero", "NT", "NM", " n", "NN", "MN", "No", "Q", "AN", "I", "X", "C", "Na", "Ne", "V", "P", "Mo", "K", "We", "Nat", "One", "O", "H", "F", "Z"], "M": ["U", "MO", "LM", "D", "S", "R", "E", "FM", "B", "OM", "T", "n", "GM", "W", "Y", "A", "L", "G", "AM", "DM", "NM", "MD", "MS", "MN", "Q", "ME", "MON", "I", "X", "C", "MA", "JM", "V", "MB", "P", "MM", "Mo", "MC", "K", "MT", "SM", "m", "O", "H", "F", "CM", "IM", "MF", "Z"], "ans": ["nas", "aos", "amps", "ms", "can", "AN", "aned", "ANS", "ns", "ci", "a", "ss", "ens", "an", "cs", "ents", "annot", "na", "anas", "ks", "nan", "atan", "activation", "ann", "lan", "no", "ani", "eps", "aps", "ls", "S", "runs", "ations", "ars", "int", "n", "s", "anc", "ints", "man", "A", "ats", "anon", "ds", "ids", "ana", "nn", "span", "lines", "la", "leans", "anne", "acts", "Na", "es", "works", "init", "xs", "ons", "anus", "ils", "aning", "ins", "ases", "ants", "ops", " means", "ni", "oss", "ians", "ams", "os", "gan", "ips", "ia", "errors", "ions", "ai", "aces", "ano"], "i": ["ma", "mini", "pi", "di", "it", "o", "x", "xi", "j", "gi", "anti", "c", "ci", "d", "E", "yi", "oi", "phi", "a", "io", "inter", "ori", "start", "int", "n", "an", "ui", "ini", "ni", "bi", "id", "y", "uni", "dim", "ix", "index", "ip", "multi", "eni", "si", "u", "iu", "oci", "fi", "f", "I", "ti", "e", "max", "ami", "mi", "hi", "ki", "im", "ai", "ani", "chi", "qi", "v", "l", "ii", "m", "li", "p", "vi", "zi"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\nMOD = 10 ** 9 + 7\\ndigit = 60\\no=[0]*digit\\nz=[0]*digit\\n\\nfor i in a:\\n  for j in range(digit):\\n    if (i >> j) & 1:\\n      o[j] += 1\\n    else:\\n      z[j] += 1\\nans = 0    \\nfor j in range(digit):\\n  ans += (o[j]*z[j]*pow(2,j,MOD))\\nprint(ans % MOD)", "target": "353", "substitutes": {"n": ["k", "c", "d", "nb", "num", "s", "ni", "Num", "g", "nn", "span", "bin", "number", "e", "b", "Na", "no", "ani", "init", "l", "m", "r", "p", "ne", "N"], "a": ["area", "part", "c", "ar", "ac", "af", "int", "action", "da", "an", "s", "array", "A", "fa", "alpha", "sa", "abc", "ana", "ia", "span", "index", "aa", "e", "f", "b", "am", "ani", "ai", "aaa", "aj", "p", "arg", "au"], "MOD": ["mode", "SIGN", "D", "MAG", "ARM", "OD", "R", "XX", "REG", "mult", "B", "LOD", "mod", "J", "MAC", "ZI", "Num", "alpha", "SIZE", "RM", "MD", "magic", "version", " mod", "MAX", "LOG", "ord", " modular", "ROM", "MODE", "number", "mods", "Mods", "OR", "I", "X", "C", " Mod", "Mod", "factor", "NUM", "DEC", "P", "CC", "ID", "RT", "complex", "length", "REM", "M", "F", "LOC", "N", "Z"], "digit": ["unit", "oct", "integer", "mini", "part", "step", "central", "float", "figure", "feature", "pattern", "section", "format", "roman", "dec", "int", "mod", "year", "second", "option", "num", "inc", "valid", "major", "id", "prime", "alpha", "uni", "zero", "xxx", "div", "dig", "ant", "date", "version", "xxxx", "iter", "vert", "magic", "ord", "month", "index", "character", "number", "bit", "dot", "char", "si", "f", "mega", "dimension", "factor", "standard", "init", "rand", "p", "letter"], "o": ["zo", "k", "bo", "x", "ino", "op", "c", "off", "d", "oi", "io", "iso", "pos", "an", "po", "t", "y", "os", "h", "offset", "number", "u", "oa", "e", "I", "f", "b", "so", "no", "q", "ano", "l", "v", "O", "m", "p"], "z": ["ze", "ji", "k", "x", "c", "d", "yi", "zen", "yz", "iz", "s", "t", "az", "gz", "y", "g", "h", "zu", "cz", "za", "zh", "zip", "u", "ja", "f", "e", "b", "code", "so", "q", "w", "zone", "l", "v", "m", "p", "cl", "zi", "Z"], "i": ["mini", "pi", "it", "ji", "k", "x", "xi", "c", "ci", "d", "ie", "int", "ni", "bi", "id", "g", "ij", "ip", "si", "u", "iu", "e", "ti", "I", "f", "b", "ani", "qi", "v", "l", "ii", "jp", "li", "m", "p"], "j": ["kj", "ji", "js", "k", "x", "_", "c", "d", "jc", "pos", "int", "ind", "J", "oj", "all", "num", "mod", "y", "jan", "g", "ij", "h", "ion", "jl", "jo", "si", "u", "ja", "f", "je", "obj", "e", "b", "jj", "jet", "adj", "l", "jp", "aj", "v", "m", "li", "ii", "r", "p", "uj"], "ans": ["ls", "ags", "ras", "nas", "ins", "ars", "ants", "amps", "ens", "an", "s", "anc", "cs", "ents", "anon", "ians", "sk", "na", "os", "ant", "anas", "ds", "anz", "ks", "ana", "ia", "les", "cons", "AN", "atan", "aned", "ania", "ANS", "ann", "lan", "ns", "ions", "ani", "aces", "ai", "ano", "acs", "eps", "ln", "p", "ons"]}}
{"code": "from itertools import *\\nN,M,Q = map(int,input().split())\\nabcd = [list(map(int,input().split())) for q in range(Q)]\\nprint(max(sum(d for a,b,c,d in abcd if i[b-1]-i[a-1]==c) for i in combinations_with_replacement(range(M),N)))", "target": "0", "substitutes": {"N": ["U", "D", "S", "R", "NS", "E", "NL", "B", "Ns", "T", "n", "W", "Y", "A", "L", "Num", "NM", "IP", "NN", "MN", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "B", "T", "W", "J", "n", "Y", "L", "G", "NM", "MD", "MN", "ME", "MON", "I", "X", "C", "V", "P", "K", "m", "O", "H", "F", "Z"], "Q": ["U", "D", "S", "MQ", "R", "Py", "E", "IQ", "B", "T", "W", "QU", "J", "Y", "A", "L", "G", "QL", "I", "X", "C", "V", "P", "K", "Query", "O", "H", "F", "Z"], "abcd": ["abcc", "abld", "ablcd", "ABCD", " abcr", "habxd", "ABcd", "habcr", "absdd", "abcdd", "absc", "abldd", "abc", "abcr", "ABxd", "absd", "abCD", "abscd", "abxd", " abCD", "ablc", "habCD", "abd", "abccd", " abxd", "ABcr", "abdd", "habcd"], "q": ["k", "gu", "int", "qs", "quant", "ch", "id", "iq", "qa", "query", "ix", "quad", "sq", "u", "f", "qq", "aq", "z", "qi", "v", "p", "qu", "dq"], "d": ["df", "D", "k", "x", "j", "db", "pd", "data", "du", "ind", "n", "da", "t", "id", "dy", "min", "ds", "do", "dB", "dc", "u", "e", "f", "dd", "ad", "dict", "z", "l", "cd", "m", "dat", "p"], "a": ["x", "ac", "ab", "n", "da", "s", "an", "A", "y", "alpha", "sa", "ax", "ia", "aa", "u", "f", "ad", "ca", "am", "ga", "ai", "ae", "w", "ba", "ada", "m", "p"], "b": ["o", "k", "x", "j", "db", "nb", "ab", "bh", "B", "bd", "n", "s", "y", "bs", "g", "h", "ib", "aa", "u", "lb", "e", "f", "ad", "ca", "sb", "w", "ba", "v", "l", "m", "r", "bb", "p"], "c": ["k", "x", "j", "cy", "ci", "col", "ac", "n", "s", "cc", "cs", "y", "g", "h", "dc", "u", "f", "e", "ca", "C", "w", "z", "l", "lc", "cd", "m", "r", "cf", "p"], "i": ["pi", "it", "o", "di", "x", "xi", "j", "gi", "ci", "phi", " I", "bc", "int", "ind", "n", "s", "ui", "bi", "id", "g", "index", "dc", "si", "u", "iu", "e", "ti", "I", "f", "ai", "z", "chi", "qi", "v", "l", "ii", "m", "ei", "li", "r", "p"]}}
{"code": "a, b = map(int, input().split())\\nans = 0\\nans += a\\nif a > b:\\n    ans -= 1\\nprint(ans)", "target": "35", "substitutes": {"a": ["ma", "auto", "access", "ha", "sta", "x", "c", "off", "d", "ac", "ab", "aux", "pa", "n", "an", "A", "fa", "i", "y", "alpha", "na", "sa", "ana", "ia", "span", "index", "aa", "la", "u", "va", "f", "ad", "ca", "am", "ga", "ai", "w", "ae", "asa", "ba", "ea", "l", "aj", "m", "p", " A", "count", "au"], "b": ["eb", "mb", "abb", "c", "d", "ob", "nb", "cb", "ab", "B", "bis", "n", "ub", "rb", "y", "bs", "bar", "val", "fb", "ib", "beta", "aa", "wb", "lb", "f", "e", "sb", "be", "ba", "v", "bb", "bf", "emb", "p"], "ans": ["offs", "ass", " answers", "nas", "ins", "reads", "anks", "ars", "ants", "ss", "times", "vs", "amps", "ens", "an", "anc", "s", "man", "ads", " means", "ats", "ops", "cs", "asts", "ents", "sk", "na", "plan", "ds", "ks", "nan", "ana", "ids", "can", "anes", "cons", "AN", "atan", "aned", "leans", "ANS", "ann", "lan", "ns", "scan", "ands", "es", "errors", "features", "works", "ani", "aces", "ays", "params", " scans", "groups", "aus", "ons", " ads"]}}
{"code": "from typing import List, Any\\n\\n\\ndef read_int() -> int:\\n    return int(input().strip())\\n\\n\\ndef read_ints() -> List[int]:\\n    return list(map(int, input().strip().split(' ')))\\n\\n\\nclass SegmentTree:\\n    \\n    def __init__(self, array):\\n        self.n = len(array)\\n        self.array = [0 for _ in array]+array\\n        for i in range(self.n-1, 0, -1):\\n            self.array[i] = self.array[i<<1]|self.array[i<<1|1]\\n\\n    def set(self, i, v):\\n        p = self.n+i\\n        self.array[p] = v\\n        while p > 1:\\n            p >>= 1\\n            self.array[p] = self.array[p<<1]|self.array[p<<1|1]\\n\\n    def count(self, l, r):\\n        l += self.n\\n        r += self.n\\n        answer = 0\\n        while l < r:\\n            if l&1:\\n                answer |= self.array[l]\\n                l += 1\\n            if r&1:\\n                r -= 1\\n                answer |= self.array[r]\\n            l >>= 1\\n            r >>= 1\\n        return answer\\n\\n\\ndef bit_count(a):\\n    answer = 0\\n    while a:\\n        answer += a&1\\n        a >>= 1\\n    return answer\\n\\n\\ndef solve():\\n    ALPHABETS = 'abcdefghijklmnopqrstuvwxyz'\\n    N = read_int()\\n    S = input()\\n    Q = read_int()\\n    segment_tree = SegmentTree([1<<(ALPHABETS.index(c)) for c in S])\\n    for _ in range(Q):\\n        cmd = input().strip().split(' ')\\n        if cmd[0] == '1':\\n            n = 1<<(ALPHABETS.index(cmd[2]))\\n            segment_tree.set(int(cmd[1])-1, n)\\n        else:\\n            l, r = int(cmd[1])-1, int(cmd[2])\\n            print(bit_count(segment_tree.count(l, r)))\\n\\n\\nif __name__ == '__main__':\\n    solve()\\n", "target": "779", "substitutes": {"self": ["home", "work", "object", "results", "current", "wrapper", "raw", "dev", "per", "time", "h", "your", "f", "end", "ns", "base", "load", "z", "ref", "style", "temp", "cl", "part", "k", "full", "x", "plus", "er", "d", "ng", "ws", "data", "ch", "result", "y", "get", "client", "error", "default", "max", "no", "gen", "node", "event", "old", "app", "context", "instance", "s", "config", "server", "trans", "comp", "u", "spec", "e", "func", "resp", "new", "es", "layer", "form", "user", "case", "Self", "this", "lf", "pos", "view", "all", "hand", "cache", "false", "g", "ack", "os", "parent", "co", "line", "worker", "master", "host", "me", "parse", "other", "private", "q", "w", "shared", "now"], "array": ["area", "auto", "average", "package", "object", "account", "binary", "cart", "collection", "h", "component", "sequence", "multi", "f", "I", "shape", "book", "position", "memory", "angular", "group", "x", "data", "format", "expression", "Array", "archive", "environment", "range", "allow", "result", "zero", "abc", "version", "error", "default", "code", "length", "hash", "align", "frame", "integer", "input", "section", "coll", "app", "int", "instance", "list", "A", "ray", "image", "index", "batch", "ception", "function", "enum", "complex", "form", "audio", "string", "element", "this", "square", "np", "pair", "value", "all", "database", "arr", "api", "analysis", "sample", "parent", "camera", "line", "set", "row", "address", "private", "q", "w", "module", "arrow", "air", "order"], "n": ["ner", "o", "part", "k", "x", "j", "np", "d", "node", "nb", "name", "all", "s", "num", "non", "t", "an", "ni", "y", "nw", "na", "g", "en", "h", "network", "nan", "nn", "un", "number", "nu", "u", "size", "net", "f", "e", "nt", "max", "b", "ns", "none", "sn", "no", "q", "w", "init", "z", "dn", "m", "nc", "ne"], "_": ["x", " __", "__", "all", "ing", "num", "non", "g", " j", " x", " f", "index", " e", "len", " q"], "i": ["pi", "di", "uri", "it", "o", "k", "x", "j", "xi", "ci", "d", "yi", "ri", " I", "io", "ie", "int", "ind", "s", "ini", "ui", "t", "bi", "id", "y", "api", "h", "ix", "index", "ip", "multi", "si", "u", "iu", "f", "e", "I", "ti", "b", "q", "ai", "w", "z", "ii", "length", "li", "m", "vi"], "v": ["pi", "o", "k", "ve", "x", "j", "uv", "d", "value", "vv", "vs", "vp", "s", "t", "y", "g", "val", "h", "u", "va", "f", "e", "b", "V", "w", "z", "m", "vi"], "p": ["wp", "pi", "lp", "tp", "o", "at", "part", "k", "x", "j", "op", "sp", "np", "d", "point", "pos", "pa", "per", "s", "po", "t", "y", "api", "g", "h", "cp", "pr", "ip", "dp", "u", "pp", "f", "e", "pre", "b", "q", "pt", "w", "P", "z", "pc", "m", "ap", "bp"], "l": ["el", "lp", "ls", "o", "k", "ol", "le", "x", "al", "ul", "j", "d", "ar", "left", "kl", "fl", "ell", "sl", "ll", "s", "ly", "t", "L", "g", "url", "nl", "la", "lin", "u", "ur", "il", "len", "f", "e", "rl", "b", "pl", "q", "dl", "w", "z", "lc", "length", "li", "m", "ln"], "r": ["rs", "o", "rd", "err", "x", "j", "er", "R", "ar", "d", "ri", "ro", "pair", "re", "rh", "s", "rb", "t", "range", "y", "yr", "rt", "g", "ir", "h", "rar", "dr", "lr", "pr", "rw", "adr", "row", "ur", "u", "nr", "br", "rl", "e", "rr", "f", "b", "rn", "q", "w", "nor", "z", "cr", "fr", "m", "ru", "right", "kr", "rc", "sr"], "answer": ["area", "empty", "grade", "average", "even", " answers", "account", "ac", "option", "rb", "en", "next", "null", "aa", "f", "rn", "Answer", "z", "au", "err", "x", "attribute", "question", "data", "ab", "record", "an", "range", "result", "entry", "offset", "error", "message", "oa", "ee", "sn", "ahead", "length", "ace", "integer", "ell", "int", "enna", "alpha", "answered", "word", "adr", "nr", "u", "reply", "iterator", "e", "ed", "equ", "ea", "aj", "addr", "activity", "audio", "sr", "string", "o", "element", "response", "amount", "value", "double", "round", "sa", "number", "size", "address", "rl", "rr", "q", "ae", "air", "order", "rc"], "a": ["area", "access", "o", "ha", "x", "ar", "d", "ac", "ab", "wa", "pa", "ata", "an", "s", "A", "y", "alpha", "na", "xa", "sa", "qa", "aa", "u", "va", "e", "f", "am", "b", "ad", "ca", "tta", "ga", "q", "ai", "ae", "w", "aaa", "z", "ba", "ta", "ea", "aj", "ace", "another"], "ALPHABETS": ["ALPhLABets", "ALPhLABET", "ALHOBET", "ALHABET", "ALPhABET", "ALPHUBets", "ALHOBets", "ALPHAMOTS", "ALPHLABETS", "ALPHIBOT", "ALPHAMOT", "ALPHAMETS", "ALPHOBets", "ALPHIBOTS", "ALPHUBETS", "ALPHABets", "ALHABETS", "ALHOBETS", "ALPHOBETS", "ALPHIBET", "ALPHABET", "ALPhABETS", "ALPHLABOT", "ALPHLABets", "ALPHABOTS", "ALHABOTS", "ALPHAMets", "ALHOBOTS", "ALPHIBETS", "ALPHOBELS", "ALPhLABETS", "ALPhABOT", "ALPHABOT", "ALPHUBET", "ALHOBELS", "ALPHAMET", "ALPhABets", "ALPHABELS", "ALPHOBOTS", "ALPHUBELS", "ALPHIBets", "ALPHIBELS", "ALPHLABET", "ALHABets", "ALPhLABOT", "ALPHOBET", "ALHABELS"], "N": [" E", " L", " R", "R", "NS", "NC", " I", "B", "Ns", " SN", " C", "A", "L", "SN", " NC", " Ne", " M", "I", "b", " CN", "ns", " B", "C", " D", "P", "nc"], "S": ["U", "SE", "D", "SS", "R", "NS", "RS", "B", "Ns", "T", "TS", "Si", "J", "SI", "s", "Y", "A", "L", "G", "SN", "PS", "I", "X", "C", "IS", "V", "P", "ID", "K", "O", "H", "M", "F", "Z"], "Q": ["U", "D", "MQ", "R", "E", "NE", "IQ", "NC", "T", "W", "QU", "J", "Y", "A", "L", "G", "I", "X", "C", "q", "V", "P", "K", "Query", "H", "M", "F", "Z"], "segment_tree": ["sesectionaltable", "sement_Tree", "segmentalree", "sement_tree", "segmentfindex", "segment_list", "segmentingtree", "segmentinglist", "segmentingree", "segment_ree", "sement_ree", "sement_list", "sement_root", "segmentgTree", "segmentingtable", "sesection_ree", "sesection_tree", "sement_index", "segment_Tree", "segmentfroot", "sesection_table", "segment_table", "segmentaltable", "segmentingTree", "segmentallist", "segmentgroot", "sesection_list", "segment2Tree", "segment2list", "segment2tree", "sesectionalree", "segment2ree", "segmentftree", "segmentgtree", "segment_index", "segment_root", "sesectionallist", "segmentaltree", "segmentgindex", "sesectionaltree", "segmentfTree"], "c": ["cur", "o", "k", "x", "cy", "ci", "d", "col", "ac", "coll", "fc", "s", "cc", "ce", "ch", "cs", "y", "ct", "cin", "cm", "dc", "xc", "u", "cu", "e", "f", "b", "code", "arc", "C", "z", "lc", "cd", "pc", "sc", "nc", "cf", "rc"], "cmd": ["oct", "dom", "cookie", "input", "mac", "Cmd", "cycle", "ctx", "comm", "cb", "node", "col", "data", "name", "cod", "head", "chrom", "cfg", "ck", "cc", "range", "config", "buf", "ch", "domain", "id", "cmp", "call", "cl", "pkg", "kg", "cand", "crit", "conn", "command", "shell", "cp", "atom", "md", "ctr", "win", "handle", "day", "bin", "bit", "stat", "char", "seq", "pipe", "nt", "code", "clean", "qq", "child", "wx", "dict", "draw", "cat", "cd", "msg", "text", "cf", "req", "path", "block", "method"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\nfrom itertools import chain\\n# from itertools import combinations as comb\\n# form bisect import bisect_left, bisect_right, insort_left, insort_right\\n# from collections import Counter\\n# import numpy as np\\n\\n\\ndef solve(A: int, B: str):\\n    B = int(B.replace('.', ''))\\n    ans = A * B\\n    return ans // 100\\n\\ndef main():\\n    tokens = chain(*(line.split() for line in sys.stdin))\\n    A = int(next(tokens))  # type: int\\n    B = next(tokens)  # type: str\\n    answer = solve(A, B)\\n    print(answer)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "44", "substitutes": {}}
{"code": "s=input()\\nl=['AKIHABARA','KIHABARA','AKIHBARA','AKIHABRA','AKIHABAR',\\n   'KIHBARA','AKIHBRA','AKIHABR','KIHABRA',\\n   'AKIHBAR','KIHABAR',\\n   'KIHBRA','AKIHBR','KIHABR','KIHBAR','KIHBR']\\n\\nif s in l:\\n    print(\"YES\")\\nelse:\\n    print(\"NO\")", "target": "796", "substitutes": {"s": ["rs", "ls", "S", "c", "d", "ins", "ses", "a", "ss", "sl", "n", "qs", "t", "i", "cs", "y", "os", "g", "h", "ds", "ts", "ks", "gs", "lines", "sets", "e", "f", "b", "ps", "ns", "ments", "es", "sb", "m", "its", "p"], "l": ["el", "lp", "ls", "o", "k", " L", "wl", "j", "c", "d", " ls", "n", "ll", "list", "t", "L", "i", "g", "h", "lists", "lis", "la", "il", "isl", "lin", "e", "f", "rl", "b", "dl", "lc", "v", "li", "m", "r", "ln", "p"]}}
{"code": "n,a,b = map(int, input().split())\\n\\nif b-a==0:\\n    print('Borys')\\n    exit()\\n\\nif (b-a)%2==1:print('Borys')\\nelse:print('Alice')\\n\\n", "target": "507", "substitutes": {"n": ["o", "k", "j", "c", "nb", "ac", "B", "ot", "an", "i", "y", "na", "g", "number", " c", "f", "e", "ns", "w", "z", "l", "v", "m", "r", "p", "ne", "N"], "a": ["k", "x", "c", "d", "ac", "ab", "da", "an", "s", "A", "i", "y", "alpha", "na", "g", "sa", "index", "aa", "u", "active", "f", "e", "ad", "ca", "am", "ga", "ai", "ae", "w", "z", "ba", "m", "p"], "b": ["eb", "k", "x", "j", "c", "d", "cb", "nb", "ab", "B", "bc", "s", "num", "A", "bi", "i", "y", "bs", "g", "fb", "h", "ib", "next", "aa", "u", "e", "f", "sb", "w", "z", "ba", "v", "l", "bb", "m", "r", "p"]}}
{"code": "print(eval(input().replace(' ','*')))", "target": "111", "substitutes": {}}
{"code": "n = int(input())\\nif n == 0:\\n    print(0)\\n    exit()\\nd = []\\nwhile n != 0:\\n    p = n % 2\\n    d.append(p)\\n    n = (n - p) * (-1) // 2\\nfor u in reversed(d):\\n    print(u, end='')\\nprint()\\n", "target": "24", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "nb", "pos", "ot", "s", "num", "t", "ni", "i", "y", "mn", "na", "g", "nn", "un", "nl", "nu", "number", "nit", "f", "nt", "fn", "e", "b", "max", "ns", "pn", "sn", "no", "nat", "z", "l", "v", "m", "r", "nc", "ne", "N"], "d": ["o", "D", "dt", "x", "done", "j", "c", "db", "ded", "pd", "data", "nd", "bd", "t", "i", "y", "g", "fd", "ds", "do", "dc", "f", "e", "dd", "b", "ad", "dl", "w", "dict", "z", "dm", "l", "v", "cd", "m", "r", "did", "dat"], "p": ["pi", "o", "tp", "k", "x", "j", "c", "np", "point", "start", "pos", "po", "t", "i", "y", "g", "h", "pp", "f", "e", "b", "ps", "pn", "q", "w", "P", "z", "position", "v", "l", "pc", "m", "r", "bp", "N"], "u": ["U", "o", "k", "input", "uv", "ul", "c", " U", "ut", "a", "data", "pos", "num", "ui", "i", "uni", "g", "h", "un", "nu", "iu", "f", "e", "b", "uu", " i", "q", "w", "z", "v", "l", "uid", "m", "text", "r", "up", "ou", "user"]}}
{"code": "while True:\\n    x = input()\\n    if x == \"0\":\\n        break\\n    num = [int(i) for i in x]\\n    print(sum(num))", "target": "491", "substitutes": {"x": ["step", "xp", "input", "xi", "c", "slice", "ctx", "data", "int", "n", "ww", " xx", "t", "xxxxxxxx", "y", "tx", "test", "xxx", "g", "xa", "ax", "val", "xt", "xe", "exc", "rx", "xxxx", "h", "ix", "index", "ex", "xc", "u", "e", "dx", "f", "X", "xx", "code", "xes", "wx", "z", "v", "xs", "p"], "num": ["unit", "loc", " NUM", "done", "um", "node", "sum", "name", "data", "int", "n", "Num", "id", "result", "mon", "on", "split", "coord", "con", "en", "mem", "dim", "iter", "word", "un", "index", "bin", "number", "norm", "u", "run", "nom", "fn", " number", "term", "NUM", "no", "status", "init", "text", "gen", "nam", "temp", "form", "block"], "i": ["pi", "k", "xi", "j", "c", "gi", "ci", "phi", "col", " ii", "a", "io", "start", "pos", "int", "ind", "n", "ini", "bi", "id", "y", "key", "ix", "index", "ip", "bit", "si", "u", "iu", "e", "I", "f", "ti", "b", "end", "ai", "z", "ii", "li", "p", "zi"]}}
{"code": "L, R = map(int, input().split())\\n  \\nif R - L >= 2018:\\n  print(0)\\n  exit()\\n  \\nlst = []\\nfor i in range(L,R+1):\\n  lst.append(i%2019)\\n  \\nlst.sort()\\n\\nif lst[0] == 0:\\n  print(0)\\n  exit()\\n  \\nrlt = 2020\\nfor i in range(len(lst)):\\n  for j in range(i+1,len(lst)):\\n    rlt = min(rlt, (lst[i]*lst[j])%2019)\\n    \\nprint(rlt)", "target": "650", "substitutes": {"L": ["U", "D", "S", "LU", "LO", "E", "LB", "LR", "NL", "B", "T", "FL", "W", "J", "RL", "LI", "G", "IL", "Len", "EL", "LV", "SL", "LE", "Left", "LT", "I", "X", "C", "LL", "Lu", "V", "P", "l", "H", "M", "LA", "F", "N", "dL"], "R": ["U", "D", "S", "Rs", "RW", "HR", "E", "LR", "RF", "RR", "B", "RH", "T", "W", "J", "Rh", "DR", "RL", "Y", "SR", "RO", "YR", " r", "RA", "Ren", "Q", "I", "X", "C", "NR", "RN", "V", "P", "RT", "r", "O", "H", "M", "F", "Right", "N"], "lst": ["plst", "plST", " lsc", "lcbl", "lcst", "llST", " lset", "dST", "Lft", "dsc", "lcST", "llst", "elsta", " lbl", "plset", "Lsta", "elbl", "llbl", "lset", " lrest", "LST", "Lbl", "lST", "lbl", "Lst", "plstr", "Lrest", " lft", "lcset", "dset", "lsta", "llft", "elstr", "dst", "plbl", "llset", " lST", "lsc", "lstr", "llstr", " lsta", "llrest", "lcrest", "lrest", "Lstr", "elST", "plsc", " lstr", "lft", "elst"], "i": ["pi", "o", "ji", "k", "x", "xi", "c", "gi", "ci", "d", "ri", "phi", "a", "ie", "start", "ori", "int", "ind", "n", "ini", "ui", "ni", "id", "y", "h", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "p", "v", "l", "ii", "li", "r", "m", "io"], "rlt": ["Rlt", "rtgt", "Rgt", "yrelt", "rtl", "rtalt", " rlr", "felt", "fmt", "flt", "rtlt", "rgt", "srlr", "rft", "yrtl", "frlt", "rttl", " rft", "srtl", "rlr", "nft", "srelt", " rgt", "ralt", "frmt", " relt", "sralt", "yrft", "nelt", " ralt", " rtl", "yrlt", "nlt", "fgt", "rmt", " rmt", "srgt", "relt", "Relt", "Rlr", "frelt", "frgt", "srlt", "ntl"], "j": ["kj", "ji", "js", "k", "x", "jc", "a", "oj", "ind", "J", "n", "y", "jan", "g", "ij", "h", "bj", "job", "index", "jl", "jo", "u", "ja", "f", "je", "obj", "adj", "b", "jj", "e", "q", "dj", "z", "v", "jp", "aj", "jam", "l", "ii", "li", "p", "uj"]}}
{"code": "while True:\\n\tm,f,r=map(int,raw_input().split())\\n\tif m==f==r==-1: break\\n\tif m+f<30 or m==-1 or f==-1: print 'F'\\n\telif m+f>=80: print 'A'\\n\telif 65<=m+f: print 'B'\\n\telif 50<=m+f: print 'C'\\n\telif r>=50: print 'C'\\n\telse: print 'D'", "target": "410", "substitutes": {"m": ["o", "mc", "k", "x", "j", "um", "c", "fm", "om", "d", "a", "rm", "int", "n", "s", "num", "mr", "t", "i", "y", "g", "h", "ms", "ym", "md", "cm", "un", "me", "u", "em", "e", "b", "am", "mi", "mm", "q", "w", "dm", "v", "l", "hm", "fr", "M", "p"], "f": ["df", "o", "fs", "k", "x", "j", "c", "fm", "d", "a", "fl", "fc", "ff", "n", "F", "s", "t", "fa", "rf", "i", "y", "fe", "g", "fd", "ir", "h", "fer", "sf", "u", "e", "end", "b", "inf", "q", "w", "z", "l", "v", "fr", "cf", "p", "fp"], "r": ["rs", "o", "k", "err", "x", "j", "c", "er", "R", "d", "ar", "n", "re", "F", "rb", "i", "rc", "g", "ir", "h", "nr", "u", "e", "rr", "b", "q", "w", "z", "cr", "l", "v", "fr", "p", "kr", "sr"]}}
{"code": "N = int(input())\\nAs = list(map(int, input().split()))\\n\\n#\u8ca0\u306e\u6570\u30ab\u30a6\u30f3\u30c8\u3068\u7d76\u5bfe\u5024\u30ea\u30b9\u30c8\u4f5c\u6210\\nabs_As = []\\nnegative_count = 0\\n\\nfor A in As:\\n    if(A <= 0):\\n        abs_As.append(abs(A))\\n        negative_count += 1\\n    \\n    else:\\n        abs_As.append(A)\\n\\n#print(As)\\n#print(abs_As)\\n#print(negative_count)\\n\\nif(negative_count % 2 == 0):\\n    print(sum(abs_As))\\n\\nelse:\\n    print(sum(abs_As) - 2 * min(abs_As))", "target": "579", "substitutes": {"N": ["Node", "NA", "D", "S", "R", "E", "B", "Ns", "T", "n", "J", "A", "L", "G", " n", "NN", "Q", "I", "X", "C", "V", "P", "K", "NP", "O", "M", "F", "Z"], "As": ["S", "R", " I", "a", "B", "Ns", " AS", "n", "J", "F", "Array", "Y", "A", "Ni", "Num", "AS", " S", "Ar", "Count", "I", " B", "P", "p", " A"]}}
{"code": "n,m,p = map(int, input().split())\\nG = []\\nfor i in range(m):\\n    a,b,c = map(int, input().split())\\n    G.append([a,b,c-p])\\n\\ndef bellmanFord(G, start_vertex):\\n    distance = [-float('inf') for i in range(n+1)]\\n    distance[start_vertex] = 0\\n    for i in range(2*n):\\n        for node,neighbor,cost in G:\\n            if distance[neighbor] < distance[node] + cost:\\n                if i < n:\\n                    distance[neighbor] = distance[node] + cost\\n                else:\\n                    distance[neighbor] = float('inf')\\n        if i == n-1:\\n            prev_ans = distance[n]\\n    if prev_ans != distance[n]:\\n        return -1\\n    else:\\n        return distance[n]\\n\\ndistance = bellmanFord(G, 1)\\nif distance == -1:\\n    ans = -1\\nelse:\\n    ans = max(0, distance)\\nprint(ans)\\n", "target": "88", "substitutes": {"n": ["o", "cn", "k", "x", "j", "np", "d", "nb", "an", "num", "s", "t", "ni", "y", "na", "g", "en", "h", "nn", "nan", "un", "nu", "number", "nr", "u", "size", "e", "f", "nt", "ns", "pn", "none", "no", "w", "z", "l", "v", "r", "nc", "ne", "N"], "m": ["o", "mc", "k", "x", "j", "np", "d", "nm", "t", "y", "mn", "g", "h", "ms", "cm", "u", "f", "e", "mu", "mi", "mm", "q", "w", "pm", "z", "dm", "v", "l", "r", "M"], "p": ["pi", "tp", "o", "k", "j", "np", "d", "start", "s", "t", "bp", "y", "g", "h", "cp", "u", "e", "f", "q", "w", "P", "z", "l", "v", "pc", "r", "pe"], "G": ["U", "Node", "GR", "D", "GS", "S", "Game", "GN", "R", "E", "Grid", "GG", "IG", "B", "T", "Ge", "GC", "GM", "J", "W", "CG", "Y", "A", "L", "GE", "GU", "Graph", "g", "GA", "GP", "GT", "GV", "Q", "GH", "LG", "graph", "I", "Group", "X", "C", "Gate", "Distance", "GF", "V", "P", "K", "H", "M", "F", "N"], "i": ["pi", "di", "o", "x", "xi", "j", "ci", "d", " I", " ii", "ie", "start", "ori", "int", "ind", "ni", "bi", "id", "y", "index", "ip", "eni", "si", "u", "iu", "e", "ti", "I", "f", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "ei", "r", "zi"], "a": ["k", "x", "d", "ar", "ac", "ab", "int", "da", "an", "s", "A", "y", "g", "sa", "aa", "u", "f", "e", "am", "ai", "ae", "w", "asa", "ba", "l"], "b": ["eb", "k", "x", "d", "ab", "B", "bc", "s", "y", "bs", "g", "fb", "h", "aa", "lb", "e", "f", "sb", "be", "ba", "v", "l", "r", "bb"], "c": ["k", "x", "j", "cy", "ci", "d", "ac", "s", "ch", "cs", "y", "g", "h", "cu", "u", "e", "f", "ca", "C", "q", "w", "z", "l", "v", "sc", "lc", "r"], "start_vertex": ["start_horgon", "start_progon", "start_prox", "start_vertge", "start_vegon", "start_vex", "start_verttex", "start_subge", "start_vergon", "start_verge", "start_subgon", "start_hornum", "start_veindex", "start_protex", "start_hortex", "start_subnum", "start_subtex", "start_vertx", "start_vernum", "start_vertgon", "start_horge", "start_vetex", "start_verindex", "start_verx", "start_vertnum", "start_vertindex", "start_proindex"], "distance": ["grade", "energy", "sofar", "degree", "ge", "go", "progress", "missing", "equality", "guide", "gap", "move", "dd", "shape", "edge", "ance", "pm", "position", "draw", "style", "km", "mode", "d", " Distance", "scale", "data", "center", "range", "weight", "result", "coord", "age", "shift", "length", "ace", "evidence", "core", "demand", "uri", "ide", "point", "feature", "argument", "diff", "une", "direction", "man", "score", "command", "division", "span", "density", "model", "cd", " distances", "definition", "rank", "o", "metadata", "case", "element", "value", "ances", "depth", "GE", "div", "transform", "cm", "radius", "size", "address", "dimension", "Distance", "power", "duration", "dist", "path"], "node": ["core", "Node", "rank", "uri", "loc", "o", "k", "x", "object", "reference", "d", "feature", "name", "local", "ring", "degree", "anch", "circle", "range", "root", "y", "ward", "network", "parent", "nn", "index", "source", "number", "row", "cdn", "graph", "e", "f", " nodes", "outer", "shape", "none", "random", "seed", "edge", "no", "layer", "path", "ne", "N"], "neighbor": ["seighbor", "keborbour", "neirbour", "nechener", "neighner", "seighway", "keborbors", "neborbors", "neborigh", "keighigh", "keborigh", "neigenrer", "neivbors", "eivbors", "neighbour", " neigenrer", "neigenway", "neirbor", "neilner", "negbors", "neirner", "sealthbour", "neivbor", "eivbor", " neighrer", "eighbor", "nealthbor", "seighbour", "nealthway", "neilbors", "neborbor", "seighbors", "keborbor", "neighrer", "neivner", "neilbor", "necheway", " neigenbor", "negbor", "necheigh", "neighigh", "keighbors", "eighner", "eivner", "neigenbor", " neighner", "neivbour", "sealthbors", "keighbor", "necherer", "neighway", "neborbour", " neigenbour", "neigenbors", "nechebors", "neigenner", " neigenner", "nechebor", "nechebour", "negbour", "neighbors", "negigh", "neirrer", "eighbors", "neilbour", "sealthbor", "sealthway", "keighbour", "eighbour", " neighbour", "nealthbour", "neigenbour", "eivbour", "nealthbors"], "cost": ["rank", "step", "loc", "grade", "k", " costs", "effect", "scale", "point", "feature", "sum", "value", "coll", "start", "risk", "go", "cc", "Cost", "weight", "eff", "id", "price", "score", "network", "parent", "co", "charge", "word", "source", "age", "contact", "ice", "max", "end", "shape", "clean", "edge", "inf", "position", "sc", "length", "ace", "dist", "duration", "right", "path"], "prev_ans": ["prev_anc", "prev_ann", " prev_as", " prev_anc", " prev_ann", "prev_ns", "prev_an", "prev_as", " prev_an", " prev_ns"], "ans": ["offs", "ls", "meaning", "anus", "aning", "nas", "ras", "ins", "anks", "ants", "ances", "pos", "an", "anc", "s", "depth", "ours", " means", "cs", "ams", "sk", "na", "os", "ds", "anse", "ks", "ana", "nan", "nn", "les", "span", "can", "cons", "cas", "aned", "len", "ANS", "acts", "ann", "lan", "ns", "ons", "anges", "ands", "es", "android", "ance", "ani", "aces", "ays", "mean", "dist", "any"]}}
{"code": "n, k = map(int, input().split())\\na = input()\\nl = []\\nif a[0] == '0':\\n    l.append(0)\\nsum = []\\ni = 0\\nwhile i < len(a):\\n    j = i\\n    while j < len(a) and a[j] == a[i]:\\n        j += 1\\n    l.append(j-i)\\n    i = j\\nif a[-1] == '0':\\n    l.append(0)\\nnum = [0]*(len(l)+1)\\nfor i in range(0, len(l)):\\n    num[i+1] = num[i]+l[i]\\nans = -1\\nfor i in range(0, len(num), 2):\\n    j = i + k*2+1\\n    if j >= len(num):\\n        j = len(num)-1\\n    ans = max(ans, num[j] - num[i])\\nprint(ans)\\n", "target": "340", "substitutes": {"n": ["o", "c", "d", "nb", "ny", "an", "s", "t", "ni", "g", "en", "u", "f", "e", "b", "ns", "z", "v", "m", "li", "ln", "p", "N"], "k": ["o", "ke", "x", "kk", "c", "d", "ch", "y", "sk", "g", "h", "ks", "ko", "u", "size", "f", "e", "b", "q", "w", "kw", "z", "K", "v", "m", "r", "p", "km"], "a": ["ma", "area", "o", "x", "input", "c", "ar", "d", "ama", "ac", "ab", "an", "s", "array", "A", "fa", "y", "alpha", "api", "na", "sa", "ana", "ia", "aa", "la", "u", "va", "oa", "f", "e", "b", "am", "ad", "ca", "ga", "ai", "ae", "w", "aaa", "z", "ba", "ea", "aj", "v", "m", "p", "au"], "l": ["el", "lp", "ls", "o", "le", "ol", "al", "x", "ul", "c", "d", "kl", "fl", "sl", "all", "s", "list", "ll", "t", "L", "split", "g", "h", "nl", "la", "il", "u", "len", "lin", "f", "e", "b", "dl", "z", "v", "lc", "li", "m", "lu", "r", "ln", "p"], "sum": ["ol", "al", "ul", "ac", "fl", "all", "s", "list", "cal", "ali", "sort", "alpha", "g", "bl", "index", "la", "il", "len", "lam", "rl", "Li", "ann", "am", "li", "m", "lu", "ln", "ne", "count"], "i": ["pi", "di", "ji", "o", "x", "xi", "c", "ci", "d", "yi", "oi", "phi", "io", "ie", "start", "ori", "int", "ind", "ini", "ui", "t", "s", "ni", "bi", "id", "y", "api", "ix", "index", "ip", "eni", "si", "u", "iu", "f", "I", "e", "ti", "b", "hi", "ki", "q", "ai", "z", "qi", "v", "ii", "jp", "li", "m", "p", "zi"], "j": ["note", "ji", "o", "js", "jen", "x", "xi", "c", "ci", "d", "ju", "jc", "ie", "start", "jon", "int", "oj", "ind", "J", "uj", "ui", "jit", "ni", "y", "uni", "count", "ij", "bj", "jl", "index", "jo", "si", "u", "ja", "f", "e", "je", "max", "b", "jj", "q", "dj", "ai", "z", "qi", "jp", "ii", "v", "li", "m", "aj", "length", "r", "p", "zi"], "num": ["lim", "unit", "o", "loc", "dom", "nam", "x", "ul", "um", "c", "np", "om", "nb", "mult", "du", "pos", "int", "hom", "bn", "valid", "an", "range", "gnu", "Num", "id", "mon", "mn", "uni", "na", "g", "con", "dim", "en", "h", "div", "un", "index", "union", "bin", "number", "nu", "umi", "multi", "norm", "cu", "u", "len", "lam", "normal", "f", "max", "one", "uno", "b", "nom", "new", "NUM", "no", "init", "mun", "m", "gen", "ln", "p", "temp", "form"], "ans": ["ls", "ang", "anus", "san", "aning", "nas", "ras", "ins", "ants", "any", "ens", "an", "s", "anc", " means", "ni", " spans", "cs", "ams", "anon", "sk", "na", "os", "plan", "anas", "ms", "gan", "ks", "ana", "nan", "ia", "nn", "span", "can", "ids", "la", "AN", "atan", "aned", "len", "leans", "ANS", "kin", "ann", "lan", "ns", "us", "lang", "es", "ions", "ai", "ani", "ln", "p", "aus", "ons"]}}
{"code": "from math import *\\n\\ndef cin(): # To take limited number of inputs\\n    return map(int,input().split())\\n\\ndef cins(): # To take space sepreated strings\\n    return input.split()\\n\\ndef cino(test=False): # To take individual int input (test = False)\\n    if not test:\\n        return int(input())\\n    else: # To take string input (test = True)\\n        return input()\\n\\ndef cina(): # array input\\n  return list(map(int,input().split()))\\n\\ndef ssplit(): # multiple string input\\n    return list(input().split())\\n\\ndef printlist(l): # To print space seperated array\\n    for i in l:\\n        print(i,end=\" \")\\n\\ndef main():\\n    a,b = cin()\\n    l = []\\n    for i in range(a):\\n        c = list(input())\\n        l.append(c)\\n    # print(l[1][0])\\n    for i in range(2*a):\\n        for j in range(b):\\n            print(l[i//2][j],end=\"\")\\n        print(\"\")\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "261", "substitutes": {}}
{"code": "n,a,b=map(int,input().split())\\nif a%2==b%2:\\n  c=(b-a)//2\\n  if (c+1)*2<=b-a:\\n    c+=1\\n  print(c)\\nelse:\\n  t=min(b-1+a,n-a+n-b+1)\\n  c=t//2\\n  if (c+1)*2<=t:\\n    c+=1\\n  print(c)", "target": "594", "substitutes": {"n": ["o", "cn", "k", "x", "j", "d", "nb", "ac", "an", "num", "A", "i", "y", "g", "en", "h", "u", "net", "e", "f", "ns", "C", "w", "z", "l", "v", "r", "m", "p", "N"], "a": ["area", "o", "k", "x", "d", "ac", "ab", "da", "an", "s", "A", "i", "y", "alpha", "g", "sa", "aa", "u", "e", "f", "ad", "ca", "am", "ga", "ai", "ae", "w", "z", "ba", "aaa", "ea", "l", "v", "r", "m", "p", "au"], "b": ["o", "k", "x", "j", "db", "d", "nb", "ab", "B", "bc", "s", "an", "rb", "bi", "i", "y", "bs", "body", "g", "fb", "h", "ib", "number", "aa", "wb", "br", "u", "e", "f", "base", "sb", "w", "z", "ba", "v", "l", "m", "r", "bb", "bf", "p"], "c": ["core", "o", "mc", "cn", "k", "case", "x", "cy", "ci", "d", "tc", "col", "ac", "uc", "fc", "s", "cc", "ce", "config", "ch", "cache", "cs", "y", "ec", "g", "con", "cit", "h", "cp", "ct", "cm", "dc", "cu", "u", "f", "e", "code", "ca", "unc", "C", "w", "z", "cr", "l", "v", "lc", "pc", "m", "r", "ic", "nc", "sc", "p", "cat", "cf", "rc", "cl", "count", "call"], "t": ["o", "tp", "at", "dt", "type", "x", "tu", "tm", "d", "tc", "T", "ot", "s", "i", "y", "rt", "g", "ty", "h", "ts", "tt", "ct", "tf", "u", "f", "e", "nt", "tn", "ta", "w", "l", "v", "te", "r", "m", "p", "temp"]}}
{"code": "import sys\\n\\nn = sys.stdin.readline().rstrip()\\n\\ndef main():\\n    ans = 'Yes' if n == n[::-1] else 'No'\\n    print(ans)\\n\\nif __name__ ==  '__main__':\\n    main()", "target": "289", "substitutes": {"n": ["o", "cn", "x", "c", "np", "d", " fn", "yn", " N", "node", "nb", " p", "name", " ne", "Ns", "s", "an", "t", "i", "y", "python", "na", "g", " na", "nan", "nn", " l", "f", "fn", "e", "ann", "b", "nt", "ns", " nan", "sn", "l", "gn", "m", "nc", "ln", "p", "N"], "ans": ["cn", "ANN", "anus", "san", "aning", "anan", "nas", "ras", "ars", "ean", "an", "anc", "arn", "anon", "annot", "na", "anas", "ign", "gan", "ana", "An", "nan", "nn", "can", "AN", "atan", "aned", " Ans", "leans", "ANS", "ania", "anne", "lan", "ann", "ain", "ns", "ane", "sn", "anna", "ai", "aus"]}}
{"code": "while True:\\n    A = 0\\n    a = list(input())\\n    if a == [\"0\"]:\\n        break\\n    for x in a:\\n        A += int(x)\\n    print(A)\\n\\n", "target": "491", "substitutes": {"A": ["As", "U", "Ca", "NA", "D", "S", "Max", "UA", "au", "Alpha", "B", "CA", "T", "Ay", "mA", "Action", "At", "Array", "Y", "array", "G", "L", "This", "Am", "alpha", "Ma", "Access", "Area", "Average", "aa", "Wa", "I", "AA", "Amount", "X", "C", "Na", "Fa", "P", "K", "H", "M", "Input", "F", "N", "LA"], "a": ["ma", "ha", "sta", " fa", "c", "d", "ar", "ac", "cha", "af", "pa", "action", "mA", "n", "ata", "Array", "an", "fa", "i", "y", "alpha", "na", "xa", "sa", "index", "za", "aa", "la", " da", "va", "f", "e", "b", "am", "ca", "tta", "ga", "ai", "ae", "aaa", "ba", "z", "l", "ea", "another", "p", "form"], "x": ["codes", "work", "j", "input", "c", "xi", "int", "n", "array", "i", "y", " X", "alpha", "sw", "check", "xa", "xxx", "h", "abc", "change", "xxxx", "index", "number", "ex", "xc", "u", "active", "f", "e", "X", "code", "xx", "wx", "no", "com", "w", "expl", "z", "m", "xs", "p", "qu", "cl"]}}
{"code": "n,m = [int(x) for x in input().split()]\\n\\n\\nif n < m:\\n    ans = n\\n    m -= n*2\\n    if m > 0:\\n        ans += m // 4\\nelse:\\n    ans = m // 2\\n\\nprint(ans)\\n", "target": "422", "substitutes": {"n": ["o", "cn", "k", "j", "c", "d", "nm", " N", "nb", "start", "an", "num", "t", "ni", "i", "y", "mn", "g", "en", "network", "nn", "nan", "un", "span", "number", "net", "f", "nt", "rn", "max", "b", "ns", "pn", "e", "z", "l", "v", "nc", "ln", "p", "M", "ne", "N"], "m": ["o", "mc", "k", "j", "c", "fm", "om", "d", "nm", "a", "an", "num", "s", "mr", "man", "i", "y", "mn", "h", "ms", "mx", "ym", "md", "cm", "span", "multi", "e", "f", "mu", "b", "am", "mi", "sm", "mm", "w", "pm", "z", "dm", "v", "l", "r", "M", "p", "bm", "N"], "x": ["k", "xp", "xi", "px", "d", "xy", "int", "xb", "t", " xx", "i", "id", "y", "python", "xa", "xxx", "val", "ax", "rx", "ix", "index", "fx", "ex", "xc", "u", "e", "dx", "X", "xx", "xf", "wx", "expl", "z", "v", "cross", "xs", "p"], "ans": ["offs", "ls", "anus", "nas", "ins", "ars", "ants", "amps", "ens", "args", "an", "anc", " means", "ats", "ents", "ams", "anon", "sk", "na", "os", "anas", "ds", "ms", "ana", "nan", "nn", "span", "anes", "can", "atan", "cas", "aned", "AN", "ania", "ANS", "anne", "ann", "lan", "ns", "scan", "ani", "annels", "params", "ays", "mean", "aus", "ons"]}}
{"code": "# coding=utf-8\\nfrom __future__ import division\\nfrom  math import sqrt\\n\\n\\ndef main():\\n    n = input()\\n    while n:\\n        scores = map(int, raw_input().split())\\n        m = sum(scores) / n\\n        print sqrt(sum([(x - m) ** 2 for x in scores]) / n)\\n        n = input()\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "683", "substitutes": {}}
{"code": "import math\\n\\n\\nresult = []\\nn = int(input())\\n\\nwhile n != 0:\\n    d = list(map(int, input().split()))\\n    mean = sum(d) / n\\n    var = [(i - mean) ** 2 for i in d]\\n    var = math.sqrt(sum(var) / n)\\n    result.append(var)\\n    \\n    n = int(input())\\n\\nfor i in result:\\n    print(i)\\n", "target": "683", "substitutes": {"result": ["core", "df", "ner", " variable", "average", "grade", "Result", "this", "err", "product", "vari", "gi", "response", "search", "results", "page", "feature", "event", "output", "data", "variable", "section", "coll", "report", "diff", "semble", " output", "list", "array", " Result", "math", "true", " error", "test", "root", "rc", "date", "ret", "source", "error", "function", "final", "member", "new", "memory", "include", "found", "r", " array", "group"], "n": ["o", "k", "x", "j", "c", " N", "nb", "a", "ny", "nd", "ind", "all", "an", "ini", "s", "num", "t", "ni", "y", "mn", "na", "g", "en", "network", "inn", "nan", "nn", "un", "nu", "number", "nit", "nr", "u", "net", "f", "rn", "nt", "e", "b", "fn", "ns", "pn", " ni", "sn", "no", "init", "nor", "z", "dn", "v", "l", "m", "r", "nc", "ln", "p", "ne", "N"], "d": ["df", "dom", "D", "dt", "std", "c", "ded", "de", "sum", "data", "nd", "bd", "ind", "s", "sd", "dy", "g", "dim", "ds", "md", "dc", "u", "e", "dd", "f", "xd", "ad", "b", "vd", "dl", "w", "dict", "dm", "z", "dn", "v", "l", "cd", "m", "did", "r", "dat", "p"], "mean": ["average", "err", "std", "mad", "scale", "sum", "data", "dev", "diff", "nd", "ind", "an", "man", "ni", "weight", "mand", "na", "min", "nan", "nn", "md", "sav", "norm", "mu", "ann", "am", "mi", "mass", "dn", "v", "m", "ln", "rank", "ne"], "var": ["df", "type", "par", "Var", "err", "std", "x", "vari", "c", "mad", "ar", "scale", "rad", "feature", "sum", "a", "variable", "data", "dev", "const", "report", "diff", "ind", "array", "av", "arr", "y", "alpha", "bar", "div", "g", "dr", "error", "sav", "spec", "vd", "attr", "v", "cat", "r", "grad", "prev", "p", "rank", "sr", "star"], "i": ["pi", "di", "it", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "yi", "ri", "a", "int", "ind", "ini", "ni", "bi", "id", "y", "iq", "inner", "g", " j", "index", "ip", "number", "eni", "si", "u", "iu", "f", "I", "ti", "e", "b", "ai", "chi", "qi", "v", "l", "ii", "li", "m", "ei", "p", "count"]}}
{"code": "k = int(input())\\nans = [k//50] * 50\\nfor i in range(50):\\n    ans[i] += i + 1\\nfor i in range(50 - (k % 50)):\\n    ans[i] -= 1\\nprint(50)\\nprint(\" \".join(map(str, ans)))", "target": "382", "substitutes": {"k": ["ik", "o", "kn", "x", "kk", "j", "c", "d", "ak", "n", "mk", "ck", "an", "kick", "id", "y", "sk", "unk", "ok", "ks", "kid", "uk", "dk", "ko", "u", "f", "max", "b", "ki", "q", "kw", "w", "K", "v", "m", "r", "p", "km"], "ans": ["aning", "anned", "ins", "reads", "a", "ars", "ants", "ss", "vs", "amps", "ens", "args", "an", "s", "parser", "ops", "anc", " means", "cs", "ents", "anon", "ians", "sk", "na", "os", "anas", "ks", "ana", "ids", "span", "can", "anes", "lines", "arts", "AN", "atan", "aned", "anne", "leans", "ANS", "max", "ann", "lan", "ns", "shape", "scan", "es", "ions", "ani", " scans", "xs", "eps", "ons", "rank"], "i": ["pi", "it", "o", "di", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "oi", "a", "io", "ie", "start", "int", "ind", "n", "ini", "ui", "t", "bi", "id", "y", "ix", "index", "ip", "eni", "si", "u", "iu", "f", "I", "ti", "e", "b", "end", "ai", "z", "v", "l", "ii", "li", "m", "r", "p"]}}
{"code": "n,m=map(int,input().split())\\na=list(map(int,input().split()))\\ndp=[0]*(n+9)\\nd=[0,2,5,5,4,5,6,3,7,6]\\nfor i in range(n+1):\\n  for j in a:\\n    if dp[i]or i<1:dp[i+d[j]]=max(dp[i+d[j]],dp[i]*10+j)\\nprint(dp[n])", "target": "712", "substitutes": {"n": ["o", "cn", "k", "x", "c", "nm", "nb", "name", "s", "num", "t", "ni", "y", "mn", "g", "h", "network", "nn", "un", "nu", "number", "nr", "u", "net", "f", "e", "fn", "b", "ns", "pn", "sn", "w", "z", "l", "v", "r", "nc", "p", "ne", "N"], "m": ["o", "c", "num", "man", "y", "mn", "g", "dim", "month", "cm", "u", "mu", "e", "f", "am", "b", "mi", "mm", "mass", "w", "z", "dm", "v", "l", "r", "M", "p"], "a": ["ma", "area", "c", "ac", "pa", "mA", "da", "all", "an", "A", "fa", "alpha", "na", "sa", "abc", "ana", "ia", "span", "next", "aa", "la", "va", "f", "b", "am", "ad", "ga", "ai", "w", "aaa", "ea", "aj", "p", "au"], "dp": ["wp", "df", "pi", "tp", "lp", "dt", "grade", "par", "loc", "di", "dos", "pb", "pg", "db", "sp", "np", "port", "point", "data", "pair", "diff", "pos", "direction", "da", "hp", "DP", "pkg", "wd", "alpha", "project", "password", "g", "gap", "dim", "ds", "cp", "dr", "dc", "ip", "mp", "pp", "e", "address", "imp", "dep", "b", "dl", "P", "dm", "params", "grad", "dist", "deb", "dat", "p", "rank", "gp", "fp"], "d": ["D", "dt", "x", "c", "db", "pd", "data", "nd", "bd", "s", "t", "wd", "y", "sd", "dy", "g", "fd", "ds", "do", "dh", "dc", "u", "f", "e", "dx", "dd", "b", "ad", "dl", "w", "z", "l", "v", "did", "dat", "p", "ld"], "i": ["pi", "di", "ji", "o", "k", "x", "xi", "c", "gi", "ci", "yi", "ri", "io", "int", "ind", "ui", "ini", "ni", "info", "id", "y", "api", "ix", "index", "eni", "si", "u", "iu", "e", "ti", "I", "f", "b", "jj", "mi", "q", "ai", "z", "v", "jp", "ii", "l", "li", "r", "p"], "j": [" bi", "ji", "k", "x", "gi", "c", " ii", "ie", " inj", "ind", " ip", "J", "num", "t", "ni", "id", "y", " dj", "dy", "min", "ij", "h", "ib", "jo", "si", "u", " ni", "je", "f", "e", "b", "code", "jj", "adj", "im", "dj", "ai", "q", "z", "p", "qi", "l", "jp", "ii", "v", "li", "aj", "ei"]}}
{"code": "from collections import defaultdict\\n\\nN, K = map(int, input().split())\\n\\nd = {i: [] for i in range(1, N+1)}\\nfor _ in range(K):\\n    candy = int(input())\\n    for i in map(int, input().split()):\\n        d[i].append(candy)\\n\\nprint(list(d.values()).count([]))\\n", "target": "252", "substitutes": {"N": ["Node", "D", "S", "k", "Max", " NI", "R", " I", "B", "Ns", "T", "n", "J", " C", "Ni", "L", "A", "Num", "CNN", " n", "Size", " Ne", "No", "I", "X", "C", "Ne", "V", "P", "KN", "O", "H", "M", "F", "Z"], "K": ["U", "KR", "D", "k", "S", "R", "E", "SK", "B", "T", "KE", "W", "J", "Y", "L", "G", "KK", "HK", "Q", "PK", "I", "X", "C", "V", "P", "KN", "KS", "O", "H", "M", "F", "Z"], "d": ["df", "o", "dom", "D", "dos", "dt", "k", "x", "j", "c", "db", "ded", "pd", "a", "data", "nd", "n", "da", "s", "t", "g", "ds", "do", "dh", "dc", "u", "f", "e", "b", "ad", "dl", "dict", "z", "l", "v", "m", "did", "dat", "p", "ld"], "i": ["ik", "pi", "di", "uri", "o", "k", "x", "xi", "j", "c", "gi", "ci", "yi", "phi", " I", "ri", "a", "io", "ie", "int", "ind", "n", "bi", "id", "key", " j", "ix", "index", "ip", "si", "u", "iu", "fi", "f", "I", "ti", "ai", "z", "qi", "v", "l", "ii", "r", "li", "p"], "_": [" b", " v", "j", " __", "x", " y", "ac", " time", " ip", " j", " x", "ix", "ip", " seq", "I", " o"], "candy": ["Cuddy", "acaddy", "Cherry", "cfherry", " cuddy", "caddy", "acummy", "Canda", "cfummy", "acanda", "cfandy", "cfuddy", " caddy", "acandy", "Cummy", " cherry", "Caddy", "cuddy", "Candy", "canda", " canda", " cummy", "cherry", "cummy"]}}
{"code": "from collections import deque\\n\\nK = int(input())\\nqueue = deque([1,2,3,4,5,6,7,8,9])\\n\\nfor i in range(K):\\n    ans = queue.popleft()\\n    x = ans % 10\\n    if x != 0:\\n        queue.append(ans*10 + x - 1)\\n    queue.append(ans*10 + x)\\n    if x != 9:\\n        queue.append(ans*10 + x + 1)\\n\\nprint(ans)\\n\\n#\u89e3\u8aac+\u30b3\u30fc\u30c9\u30ab\u30f3\u30cb\u30f3\u30b0AC", "target": "339", "substitutes": {"K": ["U", "KI", "KR", "D", "Ku", "k", "S", "Max", "IK", "SK", "B", "Y", "OK", "A", "KK", "Size", "Mask", "Q", "Work", "PK", "X", "C", "P", "KA", "Sk", "KS", "KC", "O", "M", "F", "N", "Z"], "queue": ["core", "file", "log", "future", "manager", "sync", "page", "Queue", "port", "event", "context", "view", "handler", "plane", "list", "cache", "que", "config", "array", "range", "loop", "brush", "python", "force", "ack", "qa", "pool", "ue", "forward", "parent", "console", "pause", "server", "index", "channel", "sequence", "batch", "plain", "Q", "menu", "delete", "rage", "pipe", "stack", "process", "play", "code", "match", "Que", "stage", "buffer", "store", "q", "enable", "layer", "paste", "p", "pe", "group"], "i": ["o", "at", "j", "c", "ci", "d", "ins", "a", "io", "ind", "n", "s", "id", "y", " il", "inn", "ix", "index", "il", "u", "e", "I", "ai", "z", "ace", "p"], "ans": ["nas", "args", "ches", "en", "can", "AN", "cas", "aned", "kin", "ANS", "ns", "han", "au", "plus", "wan", "ras", "a", "alias", "an", "cs", "ents", "sk", "na", "ks", "nan", "activation", "lan", "ann", "none", "chan", "ani", "annels", "cross", "eps", "ls", "sync", "ars", "app", "atten", "asks", "anc", "s", "array", "man", "ats", "anon", "plan", "ds", "ana", "span", "cons", "batch", "anne", "lang", "es", "works", "ays", "xs", "ons", "rank", "cus", "ins", "ants", "ians", "ams", "os", "ant", "ania", "ai", "aces", "any"], "x": ["sync", "k", "xp", "xi", "px", "c", "a", "lex", "int", "n", "an", "s", "t", "id", "y", "tx", "na", "xa", "xxx", "ax", "h", "xt", "ay", "sex", "rx", "ix", "index", "fx", "ex", "xc", "u", "f", "e", "max", "dx", "X", "xx", "xf", "xes", "inf", "wx", "q", "w", "z", "v", "cross", "pe", "xs", "ady", "p", "any"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\\nfrom itertools import accumulate, permutations, combinations, product\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\n\\nN = INT()\\nab = [LIST() for _ in range(N-1)]\\nc = LIST()\\nc.sort(reverse=True)\\ntree = [[] for _ in range(N)]\\nfor a, b in ab:\\n\ttree[a-1].append(b-1)\\n\ttree[b-1].append(a-1)\\n\\n# start=None\\n# for i in range(N):\\n# \tif len(tree[i]) == 1:\\n# \t\tstart = i\\n# \t\tbreak\\n\\nans = [0]*N\\nq = deque()\\nq.append(0)\\nans[0] = c[0]\\ncnt = 1\\nwhile q:\\n\tn = q.popleft()\\n\tfor node in tree[n]:\\n\t\tif ans[node]:\\n\t\t\tcontinue\\n\t\tans[node] = c[cnt]\\n\t\tcnt += 1\\n\t\tq.append(node)\\nprint(sum(c)-max(c))\\nprint(*ans)\\n", "target": "364", "substitutes": {"n": ["o", "k", "x", "j", "d", "num", "s", "t", "i", "na", "g", "number", "nu", "u", "size", "f", "e", "ns", "sn", "w", "z", "l", "m", "r", "nin", "p", "ne"], "_": ["out", "x", "d", "ac", "lex", "__", " time", "all", "s", "non", "t", "___", "g", " local", "ip", " seq", "f", "ning", " block", "code", " non", " dev", "p", " over", "ing"], "INF": ["InV", "IMN", "INN", "INTN", "InN", "INTV", "IMF", "InF", "InFIN", "IMV", "IMFIN", "INTFIN", "INV", "INTF", "INFIN"], "mod": ["sec", "step", "Max", "exp", "j", "d", "scale", "dec", "int", "ind", "num", "inc", "Num", "circ", "min", "cm", "len", "mu", "max", " Mod", "MOD", "Mod", "inf", "MIN", "CC", "m", "r"], "N": ["NA", "D", "S", " L", " NI", "R", "NS", "E", "nb", "B", "Ns", "T", "J", "W", " SN", " C", "A", "L", "G", "Ni", "Y", "Num", "NB", "CNN", " NC", "NT", " ND", "Size", "NN", "MN", "Q", "BN", " M", "I", " CN", "X", "C", " B", "Ne", "V", "P", "K", " P", "O", "H", "M", "F", " NB", "Z"], "ab": ["abb", "pb", "acl", "ob", "nb", "cb", "ac", "app", "rib", "bc", "af", "abs", "ub", "array", "av", "bank", "tab", "abe", "Ab", "bs", "lab", "fb", "abc", "ib", "fab", "atom", "acc", "obj", "arc", "base", "ai", "AB", "bb", "abi", "ap", "aps"], "c": ["loc", "cn", "ci", "d", "ac", "uc", "bc", "cc", "list", "cache", "ch", "cs", "y", "con", "abc", "ct", "cm", "dc", "xc", "e", "f", "ca", "C", "w", "z", "cr", "l", "lc", "cd", "v", "m", "cf", "nc", "p", "cl"], "tree": ["note", "x", "j", "page", "slice", "node", "data", "document", "tail", "Tree", "list", "cache", "t", "update", "root", "leaf", "test", "ree", "arr", "split", "key", "body", "div", "forest", " trees", "parent", "index", "monkey", "table", "model", "zip", "stack", "code", "stage", "child", "store", "module", "flat", "order", "p"], "a": ["ma", "area", "o", "ha", "k", "x", "j", "d", "ama", "ac", "af", "da", "an", "s", "A", "i", "y", "alpha", "na", "ah", "sa", "aa", "u", "va", "f", "e", "ad", "ca", "am", "ai", "ae", "w", "aaa", "ba", "z", "l", "ea", "aj", "m", "p", "au"], "b": ["o", "eb", "k", "x", "abb", "j", "db", "d", "ob", "nb", "cb", "bh", "B", "xb", "ub", "s", "rb", "bot", "i", "y", "bs", "bar", "body", "g", "fb", "ib", "beta", "wb", "u", "e", "f", "base", "sb", "be", "z", "ba", "v", "l", "m", "r", "p", "bp"]}}
{"code": "S = input()\\n\\nans = 0\\nfor c in S:\\n    if c == '+':\\n        ans += 1\\n    else:\\n        ans -= 1\\n\\nprint(ans)", "target": "166", "substitutes": {"S": ["SE", "U", "SH", "SO", "D", "SS", "R", "NS", "E", "ss", "B", "T", "Si", "SI", "s", "A", "L", " s", "G", "Sa", "SN", "DS", "PS", "Q", "SC", "CS", "C", "V", "Sl", "P", "K", "O", "M", "F", "N", "Z"], "ans": ["aves", "offs", "ls", "x", "anus", "nas", "ins", "reads", "ases", "anks", "ars", "ants", "aid", "amps", "args", "an", "s", "anc", "ads", "ats", "cats", "cs", "ents", "ams", "anon", "sk", "na", "ds", "ks", "ana", "span", "can", "anes", "cons", "AN", "atan", "aned", "leans", "ANS", "ann", "lan", "ns", "scan", "ands", "es", "ions", "ani", "aces", "ays", "cross", "xs", "eps", "aus", "ons"], "c": ["mc", "k", "x", "_", "ci", "d", "ac", "a", "uc", "bc", "n", "cc", " C", "anc", "i", "cs", "g", "abc", "ct", "cin", "dc", "u", "f", "e", "b", "arc", "C", "unc", "w", "z", "lc", "l", "m", "r", "nc", "p", "cl"]}}
{"code": "x = int(input())\\nfor i in range(500):\\n    for j in range(-500, 500):\\n        if i**5 - j**5 == x:\\n            print(i,j)\\n            break\\n    else:\\n        continue\\n    break", "target": "597", "substitutes": {"x": ["k", "xp", "xi", "px", "c", "point", "int", "n", "t", "y", "check", "xxx", "ax", "h", "xe", "rx", "ix", "index", "ex", "xc", "e", "f", "dx", "max", "X", "xx", "wx", "q", "z", "v", "cross", "l", "m", "xs", "r", "p"], "i": ["pi", "ji", "k", "xi", "c", "ci", "phi", "ri", "a", "ie", "start", "int", "ind", "ini", "id", "y", "key", "ij", "ix", "index", "ip", "si", "u", "iu", "pp", "e", "I", "f", "b", "hi", "ai", "z", "p", "chi", "l", "v", "ii", "li", "m", "ih", "io", "zi"], "j": ["kj", "ji", " J", "js", " b", "o", "k", "xi", "d", "xy", "a", "jon", "uj", "oj", "J", "n", "ind", "y", " dj", "key", "dy", "ij", "job", "index", "jl", "ix", "py", " l", "ja", "e", "je", "obj", "adj", "b", "jj", "f", "q", "dj", "z", "v", "jp", "ii", "l", "aj", "m", "p", " jo"]}}
{"code": "x, y, z = map(int, input().split())\\n\\ncreateNum = 0\\ncreateTime = 0\\n\\nloopCnt = x//y\\ncreateNum = y*loopCnt\\ncreateTime = z*loopCnt\\n\\nremain = x%y\\nif remain != 0:\\n  createTime += z\\n\\nprint(createTime)", "target": "105", "substitutes": {"x": ["k", "input", "px", "xi", "c", "j", "cycle", "d", "xy", "a", "int", "n", "num", "t", "i", "time", "xxx", "ax", "h", "yx", "rx", "ix", "index", "ex", "xc", "u", "f", "dx", "b", "X", "xx", "w", "l", "v", "m", "xs", "p"], "y": ["ey", "o", "sy", "iy", "ya", "j", "cy", "c", "d", "yi", "oy", "xy", "col", "ky", "ry", "ny", "n", "year", "num", "Y", "zy", "t", "i", "yr", "dy", "ty", "g", "ay", "ym", "py", "ies", "yt", "e", "f", "b", "xx", "yd", "yy", "w", "l", "v", "m", "p", "vy", "count"], "z": ["ze", "k", "j", "c", "d", "xy", "n", "zen", "yz", "iz", "zy", "num", "t", "Y", "gz", "s", "i", "zero", "time", "count", "h", "tz", "cz", "zh", "zip", "u", "size", "f", "max", "e", "b", "xx", "w", "zone", "l", "v", "ii", "ez", "m", "zz", "p", "zo", "zi", "Z"], "createNum": ["makeSim", " createSim", " createNumber", "makeNum", " createIndex", "loopSim", "CreateNumber", "CreateTime", "loopIndex", "makeNumber", "makeClass", "makeIndex", "loopNum", "CreateNum", "createClass", "loopTime", "createNumber", "createSim", " createClass", "CreateClass", "makeTime", "createIndex"], "createTime": ["openTimes", "wakeTim", "createTimes", "CreateSize", "updateLength", "updateTim", "createTim", "changeNum", "eventTim", " createLength", "CreateType", "updateTime", "changeTime", "CreateTimes", " createType", "CreateTime", " createTimes", "createCount", "eventTime", " createSize", "createType", "eventTimes", " createCount", "wakeTime", "createSize", "eventType", "openCount", "openTime", "changeTim", "updateNum", "CreateTim", "openSize", "CreateCount", "createLength", "wakeSize", "changeLength", " createTim"], "loopCnt": ["loopCnc", " loopcOUNT", "loopCount", "loopPct", " loopCct", "loopAcount", "loopcnt", "loopcNT", "loopCct", "loopGct", "loopCOUNT", "loopGNT", "loopPNT", "loopcn", "loopcount", " loopcNT", " loopCount", " loopCn", "loopCNT", "loopGnt", "loopCn", "loopGnc", "loopScNT", " loopCOUNT", "loopAcnt", "loopcOUNT", "loopScn", "loopScnt", " loopcnt", "loopAcNT", "loopAcOUNT", "loopScount", "loopPnc", " loopcount", "loopPnt", " loopCnc", " loopCNT"], "remain": ["remained", " remains", "REMaining", "resaining", "Remain", "Remen", "resained", "resen", "remaining", "remen", " remen", "remains", "Remains", " remaining", "REMained", " remained", "REMain", "resain", "Remaining", "REMains", "Remained"]}}
{"code": "from collections import defaultdict\\nimport itertools\\nd = defaultdict(int)\\nx='MARCH'\\nfor i in range(5):\\n  d[x[i]]=i+1\\nx=[0]*5\\ndef sub(a,b):\\n  return abs(a[0]-b[0])+abs(a[1]-b[1])\\n\\nH,W,D=map(int,input().split())\\nA=[list(map(int,input().split())) for i in range(H)]\\nN=H*W\\nP=[0]*(N)\\nfor h in range(H):\\n  for w in range(W):\\n    P[A[h][w]-1]=(h,w)\\nX=[]\\nfor d in range(D):\\n  _=[0]+[sub(P[i%N],P[i-D]) for i in range(d+D,N+D,D)]\\n  cumsum = list(itertools.accumulate(_))\\n  X.append(cumsum)\\n\\nQ=int(input())\\nfor q in range(Q):\\n  l,r=map(int,input().split())\\n  l,r=l-1,r-1\\n  g=l%D\\n  if l>r:\\n    r+=N\\n    ans=X[g][-1]-X[g][l//D]\\n    ans+=X[g][r//D]-X[g][0]\\n  else:\\n    ans=X[g][r//D]-X[g][l//D]\\n  \\n  print(ans)", "target": "254", "substitutes": {"d": ["iod", "dt", " do", " L", "j", "c", "db", " od", "dh", "day", "dc", "f", "dd", "dx", " digits", "dict", "z", "dn", "m", "p", "k", " U", "Ds", "data", "dir", " s", " dd", "id", "y", " double", "dy", " data", "do", "dm", "dat", "df", " u", "di", " E", "diff", "ind", "n", " np", "s", " module", "ds", " parse", "u", "e", "yd", "v", "cd", "o", " ind", " I", " p", "nd", "da", " C", "div", " self", "dim", " Do", "ad", " pi"], "x": ["k", "xp", "xi", "j", "c", "XX", "name", "data", "int", "fix", "n", "s", "array", "t", "id", "tx", "y", "test", "python", "xxx", "xa", "na", "ax", "xe", "sex", "rx", "ix", "index", "ex", "xc", "u", "e", "f", "code", "xx", "xf", "xes", "wx", "z", "v", "m", "xs", "p"], "i": ["pi", "it", "di", "o", "k", "xi", "j", "c", "gi", "ci", "yi", "phi", "io", "start", "int", "ind", "n", "ui", "ini", "ni", "bi", "id", "y", "iq", "index", "ip", "si", "il", "u", "iu", "f", "ti", "I", "e", "hi", "ai", "z", "qi", "v", "ii", "li", "m", "ei", "p", "vi"], "a": ["auto", "o", "c", "ama", "ac", "ab", "n", "abs", "da", "an", "s", "y", "api", "na", "sa", "aa", "la", "u", "e", "f", "am", "ca", "ad", "ga", "ai", "ae", "ba", "ea", "aj", "p", "au"], "b": ["eb", "k", "j", "c", "db", "nb", "ab", "B", "bd", "n", "abs", "s", "rb", "y", "bs", "body", "ib", "aa", "wb", "br", "u", "e", "f", "base", "sb", "be", "ba", "v", "bb", "bf", "p"], "H": ["U", "SH", "Han", "S", "HC", "R", "E", "Hi", "B", "RH", "T", "J", "HH", "NH", "Y", "L", "G", "Wh", "Work", "WH", "Ha", "Head", "I", "C", "HI", "V", "K", "O", "M", "F", "Z"], "W": ["U", "GW", "TW", "SH", "S", "Ws", "R", "E", "B", "T", "Y", "L", "G", "Wh", "WA", "WS", "I", "SW", "C", "CW", "DC", "V", "We", "K", "O", "M", "F", "Z"], "D": ["U", "S", "CD", "OD", "R", "E", "Do", "Ds", "FD", "B", "Day", "T", "J", "Y", "AD", "L", "G", "Di", "DW", "DD", "DS", "De", "DB", "I", "C", "DC", "V", "K", "O", "M", "DH", "F", "DE", "Z"], "A": ["As", "U", "NA", "S", "E", "Alpha", "B", "All", "T", "F", "At", "Y", "AD", "AM", "G", "L", "Am", "alpha", "Ma", "AP", "Wa", "I", "AA", "C", "Na", "V", "K", "API", "O", "M", "p", "Z"], "N": ["U", "Node", "S", "R", "E", "NL", "B", "Ns", "T", "n", "J", "Y", "L", "G", "Wh", "NM", " n", "An", "No", "I", "C", "Na", "Ne", "V", "Me", "K", "O", "M", "F", "Z"], "P": ["U", "S", "Py", "R", "E", "TP", "Point", "PO", " p", "PF", "B", "T", "PA", "Ph", "J", "F", "Y", "L", "G", "WP", "Pay", "RP", "AP", "I", "C", "Ps", "PP", "V", "K", "O", "M", "p"], "h": ["o", "ha", "hy", "k", "oh", "c", "ht", "bh", "wa", "n", "s", "rh", "id", "y", "ah", "wh", "hh", "ach", "u", "hs", "f", "e", "hr", "hn", "hi", "uh", "gh", "z", "v", "hm", "m", "ih", "p", "han"], "w": ["k", "c", "hw", "wan", "aw", "ws", "wa", "n", "ww", "s", "wd", "y", "sw", "we", "ew", "u", "e", "f", "wx", "z", "v", "m", "wh", "p"], "X": ["Location", "E", "Point", "List", "Rex", "HTTP", "Work", "FF", "XP", "K", "CC", "O", "Sync", "R", "Array", "Value", "G", "Check", "Event", "EX", "M", "XM", "Z", "S", "ZX", "Control", "Do", "Times", "Data", "T", "J", "DX", "Member", "File", "Ex", "WS", "Form", "C", "V", "XXX", "IX", "U", "Time", "XX", "Pull", "Once", "Y", "L", "PH", "Single", "Co", "IP", "UX", "Tx", "XY", "PE", "XL", "Pop", "TX", "Cross", "Sax", "F", "CE", "CL"], "_": ["Man", "Pool", "XX", "Like", "List", "J", "n", "long", "list", "po", "L", "G", "Post", "___", "Res", "Power", "key", "val", "OP", "Work", "obj", "Ox", "V", "K", "OX", "p", "flight"], "cumsum": ["cumumer", "acumums", "scumume", "capsume", "capsum", "calsume", "acumpace", "cupsum", "cupsums", "acumsumer", "scumsume", "scumuum", "cumsumer", "acumsums", "cupsumer", "cumspace", "acumum", "cumume", "cumpace", "cubespace", "scumumber", "cumums", "cumumber", "cumum", "cumsuum", "acumumer", "cumsume", "scumum", "cumsums", "cumuum", "cubesums", "acumsum", "cumsumber", "calsuum", "scumsuum", "cubesum", "calsum", "acumspace", "capsumber", "capsuum", "cupspace", "calsumber", "scumsumber", "scumsum", "cubesumer"], "Q": ["U", "S", "MQ", "R", "E", "IQ", "B", "T", "QU", "J", "Y", "G", "L", "Num", "I", "C", "V", "Qu", "K", "Query", "O", "M", "F", "Z"], "q": ["k", "qt", "j", "c", "int", "quant", "num", "id", "y", "qa", "eq", "sq", "u", "f", "qq", "z", "v", "m", "p", "qu"], "l": ["el", "ls", "o", "k", "ol", "le", "al", "j", "ul", "c", "R", "ar", "kl", "sl", "n", "s", "ll", "L", "nl", "lr", "ur", "u", "il", "f", "e", "rl", "Li", "dl", "z", "v", "lc", "m", "li", "lu", "ln", "p"], "r": ["rs", "o", "k", "err", " R", "j", "c", "er", "R", "ar", "n", "s", "range", "L", "y", "rg", "pr", "lr", "ur", "u", "nr", "e", "f", "rr", "rl", "hr", "z", "cr", "v", "m", "right", "ru", "fr", "p", "sr"], "g": ["o", "k", "j", "c", "gi", "er", "R", "ng", "gm", "n", "go", "all", "gl", "s", "an", "ge", "t", "G", "y", "gd", "rg", "gb", "dr", "ig", "gs", "gg", "u", "e", "rl", "f", "gr", "ga", "gh", "z", "v", "sg", "m", "gen", "p", "group", "arg"], "ans": ["Ann", "anus", "san", "aning", "nas", "ras", "ins", "anks", "aos", "ars", "ants", "an", "anc", "anny", "s", "ats", " means", "outs", "cs", "anon", "sk", "na", "os", "urs", "anas", "gan", "ks", "nan", "An", "ana", "can", "cons", "AN", "kin", "aned", "leans", "ANS", "ann", "lan", "ns", "ands", "Na", "ions", "rors", "ays", " scans", "aus", "ons"]}}
{"code": "while True:\\n    n, x = map(int, input().split())\\n    if n == x == 0:\\n        break\\n    max_a = min(x - 3, n)\\n    min_a = max(x // 3 + 1, 3)\\n    cnt = 0\\n    for i in range(min_a, max_a + 1):\\n        max_b = min(i - 1, x - i - 1)\\n        min_b = (x - i) // 2 + 1\\n        cnt += (max_b - min_b + 1)\\n    print(cnt)", "target": "398", "substitutes": {"n": ["o", "k", "c", "d", "nb", "a", "all", "num", "t", "y", "min", "g", "network", "nn", "number", "nu", "u", "nt", "max", "e", "f", "b", "ns", "sn", "no", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "x": ["step", "xi", "px", "j", "c", "plus", "d", "ng", "xy", "a", "wa", "int", "s", "t", "id", "y", "on", "width", "python", "xxx", "min", "na", "ax", "h", "yx", "sex", "rx", "ix", "index", "number", "ex", "xc", "u", "size", "e", "max", "f", "dx", "b", "X", "xx", "xes", "wx", "q", "w", "z", "v", "ic", "m", "xs", "nc", "p"], "max_a": ["max1b", " max_n", "max__b", "max__a", " max_w", "max__aa", "max1n", "max_w", "max_aa", "min_i", "max__i", "max_i", "max1a", "min_aa", "max1w", "max_n"], "min_a": ["min_ba", "min11b", "max_ba", "min_af", "min11a", "max_aa", "max_af", "max_A", "min_aa", "min_A", "min11aa", "min11af"], "cnt": ["cst", "ncnt", "ncint", "nct", " cst", "Cnd", "dcpt", "CNT", "ccount", " cnd", "lcnt", "nnt", "nnd", "pcount", "lccount", "ncount", "lcpt", "lcNT", "dccount", "pcst", "ncst", "cnd", "dcnt", "Cpt", " cint", "Cnt", "cct", "pcnt", "cNT", "nNT", "Cct", " count", "cint", "Ccount", "cpt", " cct", "pcint", "dcNT", " cNT", "count"], "i": ["pi", "di", "o", "k", "xi", "j", "c", "ci", "d", "yi", "a", "int", "ind", "ini", "t", "ch", "ni", "bi", "id", "y", "h", "ix", "index", "ip", "si", "u", "iu", "f", "I", "e", "ti", "b", "ai", "z", "qi", "l", "v", "ii", "li", "m", "p"], "max_b": ["min_y", "max_bc", "maxLoga", "maxLogb", "min_bc", "max_y", "maxLogbc"], "min_b": ["min67b", "max_sb", "min_j", "max_j", "min_sb", "min67a", "min_bb", "min67j", "max_bb"]}}
{"code": "\\ndef resolve():\\n    # \u9054\u6210\u30b9\u30b3\u30a2\u3092\u6c7a\u3081\u308b\\n    # \u4fee\u884c\u56de\u6570\u304cK\u4ee5\u4e0b\u3092\u9054\u6210\u3067\u304d\u308b\u30b9\u30b3\u30a2\u3092\u4e8c\u5206\u63a2\u7d22\\n    def check(X):\\n        cnt = 0\\n        for i in range(N):\\n            a = X // F[i]\\n            if a < A[i]:  # \u4fee\u884c\u3092\u3057\u3066\u30b9\u30b3\u30a2\u3092\u6700\u5c0f\u5316\u3059\u308b\\n                cnt += A[i] - a\\n        return cnt <= K\\n\\n    N, K = map(int, input().split())\\n    A = sorted(map(int, input().split()))\\n    F = sorted(map(int, input().split()), reverse=True)\\n\\n    ok = 10 ** 12 # \u6700\u5927\u30b9\u30b3\u30a2 a: 10**6 * x:10**6\\n    ng = -1\\n    while ok - ng > 1:\\n        X = (ok + ng) // 2\\n        if check(X):\\n            ok = X\\n        else:\\n            ng = X\\n\\n    print(ok)\\n\\n\\nif __name__ == \"__main__\":\\n    resolve()\\n", "target": "633", "substitutes": {}}
{"code": "n=int(input())\\ns=input().split(' ')\\n\\nprint(' '.join(s))\\n\\nfor i in range(1,n):\\n\tv=int(s[i])\\n\tj=i-1\\n\twhile j>=0 and int(s[j])>v:\\n\t\ts[j+1]=s[j]\\n\t\tj-=1\\n\ts[j+1]=str(v)\\n\tprint(' '.join(s))\\n", "target": "217", "substitutes": {"n": ["o", "k", "x", "c", "d", "nb", "num", "t", "ni", "y", "nn", "u", "size", "net", "f", "e", "nt", "b", "ns", "sn", "w", "z", "l", "m", "r", "nc", "p", "ne", "N"], "s": ["states", "parts", "o", "ls", "forms", "services", "js", "S", "string", "input", "c", "search", "results", "d", "ws", "ses", "ins", "a", "ss", "times", "abs", "args", "qs", "t", "strings", "y", "g", "os", "comments", "ds", "blocks", "ms", "ks", "ts", "gs", "lines", "si", "u", "sets", "letters", "e", "f", "b", "ps", "ns", "sup", "ans", "tests", "es", "features", "w", "sv", "ves", "l", "groups", "m", "r", "its", "xs", "small", "p", "se", "aws", "seconds"], "i": ["pi", "di", "ji", "k", "x", "xi", "c", "ci", "d", "yi", "ri", "a", "io", "ie", "start", "int", "ind", "ini", "ui", "ni", "bi", "id", "y", "index", "eni", "si", "u", "iu", "e", "I", "f", "b", "jj", "ai", "z", "qi", "l", "ii", "li", "m", "p", "vi"], "v": ["o", "ve", "k", "x", "uv", "c", "d", "ver", "value", "vv", "vs", "vt", "J", "y", "g", "val", "tv", "iv", "si", "qv", "u", "f", "e", "b", "vd", "q", "V", "w", "sv", "z", "nv", "l", "ii", "m", "p", "vi"], "j": ["kj", "it", "ji", "o", "js", "k", "x", "c", "d", "ju", "jc", "ie", "oj", "J", "ind", "num", "ov", "t", "jit", "y", "key", "g", "min", "ij", "bj", "ix", "jl", "index", "next", "jo", "si", "u", "ja", "f", "e", "obj", "adj", "b", "jj", "je", "shift", "q", "dj", "z", "json", "jp", "l", "aj", "m", "r", "ii", "li", "p", "uj", "vi"]}}
{"code": "\\n\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\n\\ndef main():\\n    mod=10**9+7\\n    N=I()\\n    S=input()\\n    bk=S.count(\"#\")\\n    ans=N-bk\\n    w=0\\n    for i in range(N):#i\u756a\u76ee\u307e\u3067\u767d\uff0ci+1\u4ee5\u964d\u9ed2\\n        if S[i]==\"#\":\\n            bk-=1\\n        else:\\n            w+=1\\n        temp=(i+1-w)+(N-i-1-bk)\\n        ans=min(ans,temp)\\n    print(ans)\\n        \\n\\nmain()\\n", "target": "187", "substitutes": {"mod": ["step", "j", "c", "d", "mult", "ind", "fun", "J", "num", "reg", "man", "aug", "Sa", "Num", "min", "dim", "cm", "bin", "mods", " Mod", "MOD", "Mod", "module", "init", "m", "r", "sim", "M"], "N": ["NA", "D", "R", "NS", "B", "Ns", "n", "W", "J", "Sn", "Y", "Ni", "L", "G", "IN", "Len", "A", "NM", "Size", "NN", "MS", "Q", "I", "X", "C", "Na", "Mod", "Ne", "V", "P", "K", "O", "M", "F", "Z"], "S": ["U", "SE", "SH", "SIGN", "SS", "NS", "SK", "SAM", "B", "Ns", "T", "TS", "Sn", "SI", "s", "Y", "A", "G", "L", "Sa", "String", "SN", "SIZE", "MS", "Q", "Sign", "I", "X", "SU", "C", "V", "OS", "P", "K", "SIM", "SM", "Sk", "O", "M", "F", "Z"], "bk": ["bbks", "rk", " bdk", "bbkw", "fk", "Bk", " bkw", " bks", "Bkk", "fkk", "bbdk", "fkn", "Bks", "rdk", "bbk", "abks", "fks", "bkw", "rks", "Bkn", "bkn", "abk", "bdk", "rkw", "bkk", "abkk", "bks", "abkn"], "ans": ["NA", "ins", "a", "SI", "an", "nz", "s", "A", "ni", "Sa", "Num", "Len", "na", "Size", "NN", "An", "span", "AN", "len", "max", "C", "Na", "Mod", "Ne", "ai", "Sk", "m"], "w": ["iw", "le", "x", "wl", "c", "ws", "wa", "W", "wk", "wt", "s", " W", "h", "we", "ow", "win", "wn", "u", "f", "q", "kw", "z", "v", "l", "r", "m", "wh", "p"], "i": ["o", "j", "c", "d", "a", "ie", "start", "int", "ind", "id", "h", "ip", "si", "il", "u", "iu", "f", "ti", "I", "e", "q", "ai", "z", "p", "l", "ii", "li", "io"]}}
{"code": "n, m, k = list(map(int, input().split()))\\n\\n# \u4e8c\u9805\u4fc2\u6570\u3092 10^9+7 \u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u6c42\u3081\u308b\\n# https://qiita.com/drken/items/3b4fdf0a78e7a138cd9a#5-%E4%BA%8C%E9%A0%85%E4%BF%82%E6%95%B0-ncr\\n# https://qiita.com/Yaruki00/items/fd1fc269ff7fe40d09a6\\n# https://www.hamayanhamayan.com/entry/2018/06/06/210256\\n\\nmod = 10**9 + 7\\n\\n# x ** a \u3092mod\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u3001O(log(a))\u6642\u9593\u3067\u6c42\u3081\u308b\u3002\\ndef power(x, a):\\n\tif a == 0:\\n\t\treturn 1\\n\telif a == 1:\\n\t\treturn x\\n\telif a % 2 == 0:\\n\t\treturn power(x, a//2) **2 % mod\\n\telse:\\n\t\treturn power(x, a//2) **2 * x % mod\\n\\n# x\u306e\u9006\u5143\u3092\u6c42\u3081\u308b\u3002\u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\u3088\u308a\u3001 x \u306e\u9006\u5143\u306f x ^ (mod - 2) \u306b\u7b49\u3057\u3044\u3002\u8a08\u7b97\u6642\u9593\u306fO(log(mod))\u7a0b\u5ea6\u3002\\n# https://qiita.com/Yaruki00/items/fd1fc269ff7fe40d09a6\\ndef modinv(x):\\n\treturn power(x, mod-2)\\n\\n# \u4e8c\u9805\u4fc2\u6570\u306e\u5de6\u5074\u306e\u6570\u5b57\u306e\u6700\u5927\u5024\u3092 max_len\u3000\u3068\u3059\u308b\u3002n\u3068\u304b\u3060\u3068\u4ed6\u306e\u5909\u6570\u3068\u88ab\u308a\u305d\u3046\u306a\u306e\u3067\u3002\\n# factori_table = [1, 1, 2, 6, 24, 120, ...] \u8981\u306f factori_table[n] = n!\\n# \u8a08\u7b97\u6642\u9593\u306fO(max_len * log(mod))\\n\\nmax_len = n * m #\u9069\u5b9c\u5909\u66f4\u3059\u308b\\n\\nfactori_table = [1] * (max_len + 1)\\nfactori_inv_table = [1] * (max_len + 1)\\nfor i in range(1, max_len + 1):\\n\tfactori_table[i] = factori_table[i-1] * (i) % mod\\n\\n# \tfactori_inv_table[i] = modinv(factori_table[i])\\n#\t\u2191\u304c\u9045\u3044\u306e\u3067\u3001\u4f7f\u3046\u3068\u3053\u308d\u3060\u3051\u9006\u5143\u3092\u8a08\u7b97\u3059\u308b\u2193\\nfor i in [k-2, n*m-k]:\\n\tfactori_inv_table[i] = modinv(factori_table[i])\\n\\ndef binomial_coefficients(n, k):\\n\t# n! / (k! * (n-k)! )\\n\treturn factori_table[n] * factori_inv_table[k] * factori_inv_table[n-k]\\n\\nans_1 = 0\\nfor i in range(n):\\n\tans_1 += i * m**2 * (n-i) % mod\\nfor i in range(m):\\n\tans_1 += i * n**2 * (m-i) % mod\\n\\nprint(binomial_coefficients(n*m-2, k-2) * ans_1 % mod)\\n", "target": "341", "substitutes": {"n": ["o", "x", "c", "nm", "nb", "name", "num", "s", "t", "i", "mn", "g", "nn", "number", "nr", "fn", "f", "e", "ns", "w", "z", "l", "v", "r", "p", "N"], "m": ["o", "x", "c", "d", "mod", "mr", "y", "mn", "h", "ms", "ym", "md", "month", "mo", "mu", "e", "f", "b", "mi", "mm", "im", "pm", "w", "v", "r", "M", "p"], "k": ["o", "kn", "x", "j", "c", "name", "mask", "i", "id", "y", "key", "sk", "h", "ks", "u", "f", "max", "e", "q", "w", "kw", "z", "K", "v", "p"]}}
{"code": "N,K=map(int,input().split())\\nmod=1000000007\\npath=[[] for i in range(N)]\\nfor i in range(N-1):\\n  a,b=map(int,input().split())\\n  a=a-1\\n  b=b-1\\n  path[a].append(b)\\n  path[b].append(a)\\n#print(path)\\n  \\nabc=[False for i in range(N)] #0\u306a\u3089\u307e\u3060\u5857\u3063\u3066\u306a\u3044\\n \\nabc[0]=True\\ncnt=0\\nans=K%mod\\nnx=[]\\nfor i in range(len(path[0])):\\n  child=path[0][i]\\n  if abc[child]:\\n    continue\\n  ans=ans*(K-1-cnt)\\n  ans=ans%mod\\n  cnt=cnt+1\\n  abc[child]=True\\n  nx.append(child)\\nwhile len(nx)>0:\\n  a=nx.pop()\\n  cnt=0\\n  for i in range(len(path[a])):\\n    child=path[a][i]\\n    if abc[child]:\\n      continue\\n    ans=ans*(K-2-cnt)\\n    ans=ans%mod\\n    cnt=cnt+1\\n    abc[child]=True\\n    nx.append(child)\\n      \\nprint(ans%mod)", "target": "734", "substitutes": {"N": ["U", "D", "S", "k", "R", "NS", "E", "NE", "B", "Ns", "T", "n", "W", "J", "Y", "A", "L", "G", "Len", "Num", " n", "Size", "No", "Q", "Length", "I", "X", "C", "Ne", "Mod", "V", "P", "O", "H", "M", "F", "Z"], "K": ["D", "k", "S", "R", "E", "B", "T", "W", "J", "Y", "A", "G", "L", "NB", "Q", "I", "X", "C", "V", "P", "O", "H", "M", "F", "Z"], "mod": ["mode", "step", "D", "S", "R", "dec", "Path", "J", "num", " C", "alpha", "min", "acc", "cm", " M", "Q", "max", "X", " Mod", "C", "MOD", "Mod", "w", "m", "r", "M"], "path": ["log", "step", "part", "case", "PATH", "object", "node", "walk", "pattern", "data", "pair", "pos", "Path", "ath", "an", "list", "array", "id", "pointer", "ph", "round", "transform", "ith", "h", "image", "parent", "index", "th", "batch", "row", "graph", "code", "shape", "arc", "enc", "random", "match", "member", "child", "link", "filter", "position", "sign", "cross", "length", "p", "level", "condition", "method"], "i": ["pi", "it", "k", "x", "xi", "j", "c", "d", " I", "pos", "int", "ind", "n", "id", "iq", " j", "h", "index", "ip", "si", "u", "iu", "e", "I", "ti", "ai", "z", "l", "v", "ii", "li", "r", "p"], "a": ["ma", "area", "o", "k", "x", "c", "d", "ak", "ab", "ac", "af", "int", "n", "da", "an", "s", "A", "fa", "y", "alpha", "sa", "aa", "u", "f", "e", "one", "ad", "ca", "am", "ga", "ai", "ae", "w", "aaa", "ba", "l", "aj", "p", " A", "au"], "b": ["o", "eb", "k", "mb", "x", "abb", "j", "c", "d", "nb", "ab", "B", "bd", "n", "xb", "s", "A", "rb", "y", "bs", "g", "fb", "ib", "beta", "aa", "wb", "lb", "u", "f", "e", "base", "sb", "w", "z", "ba", "l", "v", "r", "bb", "bf", "p"]}}
{"code": "n=int(input())\\na=list(map(lambda x:int(x),input().split()))\\ncnt=0\\ncnt2=0\\nfor i in a:\\n    if i%4==0:\\n        cnt+=1\\n    if i%4!=0 and i%2==0:\\n        cnt2+=1\\nif (2*cnt+cnt2>=n and cnt2>0) or (cnt2==0 and 2*cnt+1>=n):\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "612", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "s", "num", "t", "ni", "y", "g", "nn", "nan", "u", "net", "f", "e", "nt", "max", "b", "ns", "sn", "no", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "input", "c", "ac", "ab", "af", "action", "args", "da", "an", "list", "array", "A", "fa", "y", "alpha", "na", "sa", "ana", "ia", "index", "aa", "va", "f", "b", "am", "ca", "tta", "ans", "ga", "ai", "ae", "ta", "aaa", "ba", "ea", "aj", "p", " A"], "cnt": ["lcount", "ncnt", "cno", "ncct", "ccct", "ccount", "lcnn", "lcnt", "Cnc", " cno", " cpt", " ccount", "Cont", "pcount", "colrt", "ncount", "ncrt", "Cno", "lcrt", "colont", "colnt", "pno", "ccrt", "cnn", "Crt", "ccont", "Cnn", "Cpt", "lcct", "cnc", "Cnt", "cct", "colct", " cnc", "cont", "Cct", "pnt", " count", " cnn", "Ccount", "lcnc", "ccnt", " crt", "ppt", "cpt", " cct", "crt", "count"], "cnt2": ["CctTwo", "Cct4", "crt4", "Cct2", "CNTTwo", "cant0", "Cnt4", "cant182", "cnc4", "cno2", " cct4", "cct4", " cant1", "cnt4", "cint2", " cnt1", "cant4", " cct3", "cct3", "Cnt2", "cNT5", "Cnt8", " cnt0", "cintTwo", "cct2", "cnt3", "cnt182", "cnt8", "cct182", "count2", "cnt5", "cNTTwo", "cnc2", "cnc8", "CNT2", " cnt4", "cnt1", " cct2", "cct1", " cant2", "Cnc2", "crtTwo", "CNT5", "cantTwo", "crt2", "cnc3", "crt182", "cNT8", "cctTwo", "count5", "CNT4", "CntTwo", " cant182", "Cnc8", "cant2", " cnt3", "cNT2", "cint8", "cno4", "cant1", "cNT4", "crt0", "countTwo", "cint4", " cant0", "crt5", " cnt182", "Cnt5", "cno3", "cnt0", "crt1", "count4", "Cnc4", "cntTwo", "cct0"], "i": ["ik", "pi", "it", "o", " v", "iw", "x", "xi", "j", "c", "gi", "ci", "d", "ie", "int", "s", "ini", "t", "ni", "id", "y", "g", "ib", "index", "ip", "si", "u", "iu", "f", "ti", "I", "e", "b", "ai", "z", "p", "v", "l", "ii", "ic", "li", "ei", "m", "abi", "r"]}}
{"code": "from collections import deque\\n\\ns = list(input())\\nQ = int(input())\\nr = False\\n\\nq = deque(s)\\nfor _ in range(Q):\\n    query = list(map(str, input().split()))\\n    if query[0] == '1':\\n        r = not r\\n    else:\\n        f,c = query[1],query[2]\\n        if f == '1':\\n            if not r:\\n                q.appendleft(c)\\n            else:\\n                q.append(c)\\n        else:\\n            if not r:\\n                q.append(c)\\n            else:\\n                q.appendleft(c)\\n\\nans = list(q)\\nif r: ans = ans[::-1]\\nprint(''.join(ans))\\n", "target": "292", "substitutes": {"s": ["rs", "ls", "parts", "services", "states", "S", "search", "d", "ses", "a", "ss", "n", "qs", "cs", "y", "sort", "h", "ks", "sq", " queries", "u", "e", "b", "ps", "ns", "es", "sb", "w", "l", "v", "m", "p"], "Q": ["U", "D", "S", "MQ", "R", "E", "IQ", "B", "T", "W", "J", "Y", "A", "G", "L", "I", "X", "C", "V", "Qu", "P", "K", "O", "Query", "H", "M", "F", "N", "Z"], "r": ["rs", "ner", "o", "k", "err", "er", "R", "ar", "d", "ro", "a", "ry", "art", "n", "re", "mr", "t", "range", "rf", "i", "result", "root", "rt", "g", "rg", "ir", "h", "force", "rar", "pr", "error", "ra", "nr", "br", "ur", "run", "u", "e", "rr", "rn", "b", "ary", "w", "nor", "cr", "l", "v", "m", "right", "ru", "p", "rc", "sr"], "q": ["qt", "k", "x", "d", "question", "a", "ac", "queue", "view", "qs", "list", "quest", "que", "t", "ch", "cl", "i", "quit", "y", "ql", "cs", "quick", "an", "qa", "h", "ue", "request", "quad", "sq", "eq", "u", "e", "qq", "sh", "w", "z", "qi", "v", "l", "p", "qu", "dq"], "_": [" __", " un", " col", "__", " time", " j", " row", " block", " non", " k", "p"], "query": ["bool", "string", "o", "sync", "search", "question", "answer", "n", "view", "qs", "cache", "range", "ch", "i", "result", "iq", "sort", "check", "qa", "con", "g", "index", "request", "error", "row", "sq", "run", "parse", "u", "scan", "clean", "qq", "sh", "filter", "cat", "sc", "Query", "str", "m", "comment", "p", "cf", "qu", "rank", "dq", "call"], "f": ["o", "type", "k", "err", "x", "d", "col", "a", "fl", "fc", "n", "F", "t", "i", "fe", "con", "h", "sf", "u", "e", "b", "w", "z", "v", "l", "m", "fr", "cf", "p"], "c": ["o", "cn", "k", "x", "ci", "d", "col", "a", "ac", "n", "ce", "ch", "i", "cs", "ec", "g", "con", "h", "ct", "char", "cu", "u", "xc", "e", "b", "C", "w", "z", "v", "l", "ic", "m", "cf", "p", "call"], "ans": ["parts", "ls", "anus", "aning", "results", "ras", "nas", "ins", "a", "ars", "ants", "anders", "aid", "ens", "args", "qs", "an", "list", "anc", "ops", "cs", "ents", "anon", "sk", "na", "os", "plan", "ds", "ids", "ks", "ana", "span", "anes", "can", "names", "aned", "ANS", "ann", "lan", "ns", "ands", "es", "ions", "ays", "params", "annels", "types", "p", "aus", "ons"]}}
{"code": "n=int(input())\\na=0\\nb=0\\nc=0\\nd=0\\nfor i in range(n):\\n  S=input()\\n  for i in range(len(S)-1):\\n    if S[i]==\"A\" and S[i+1]==\"B\":\\n      c=c+1\\n  if S[0]==\"B\":\\n    b=b+1\\n  if S[-1]==\"A\":\\n    a=a+1\\n  if S[0]==\"B\" and S[-1]==\"A\":\\n    d=d+1\\nif a==b and b==d and a!=0:\\n  print(c+min(a,b)-1)\\nelse:\\n  print(c+min(a,b))", "target": "456", "substitutes": {"n": ["o", "k", "x", "j", "nb", "Ns", "s", "num", "t", "y", "count", "h", "network", "nn", "number", "f", "nt", "e", "ns", "C", "w", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "at", "x", "j", "aw", "ar", "ama", "ac", "ab", "da", "an", "s", "A", "y", "alpha", "sa", "ah", "h", "ia", "aa", "u", "va", "f", "e", "am", "ca", "ad", "ga", "ai", "ae", "w", "aaa", "ba", "z", "l", "aj", "m", "p", " A"], "b": ["o", "eb", "k", "x", "j", "db", "cb", "ab", "B", "bc", "s", "A", "t", "bi", "y", "dy", "bs", "g", "h", "fb", "aa", "u", "e", "f", "ad", "base", "sb", "w", "be", "z", "ba", "l", "v", "bb", "r", "m", "p"], "c": ["o", "mc", "cn", "k", "x", "cy", "ci", "col", "ac", "fc", "s", "cc", "an", "ce", "y", "g", "con", "h", "dc", "u", "f", "e", "ad", "ca", "C", "w", "z", "l", "v", "cd", "m", "r", "cf", "p", "count"], "d": ["df", "o", "dom", "D", "k", "x", "j", "db", "de", "du", "nd", "da", "s", "t", "y", "sd", "dy", "g", "h", "ds", "do", "dc", "u", "e", "f", "dd", "dx", "ad", "w", "z", "v", "l", "cd", "m", "r", "dat", "p"], "i": ["mini", "pi", "di", "o", "k", "x", "xi", "j", "ci", "oi", "io", "ie", "start", "int", "ind", "s", "ini", "ui", "ni", "bi", "id", "y", "ix", "index", "si", "u", "iu", "f", "e", "I", "end", "ti", "mi", "ai", "z", "v", "l", "ii", "li", "ei", "r", "m", "p"], "S": ["SE", "U", "SH", "D", "GS", "input", "BS", "SS", "R", "NS", "E", "RS", "SK", "Sample", "B", "Ns", "T", "Data", "TS", "W", "Si", "SI", "s", "Y", "Source", "A", "L", "G", " s", "Sa", "Part", "SN", "SR", "St", "g", "SL", "ST", "PS", "Q", "SC", "Sign", "I", "CS", "X", "SU", "C", "Sc", "Es", "Su", "V", "Sl", "P", "OS", "Session", "O", "H", "M", "Input", "F", "N", "Set"]}}
{"code": "H = int(input())\\ncount = 0\\nwhile H > 1:\\n  H = H // 2\\n  count += 1\\nprint(2**(count+1)-1)", "target": "153", "substitutes": {"H": ["U", "height", "SH", "D", "HT", "HR", "HC", "R", "Hi", "HP", "B", "OH", "T", "RH", "W", "HH", "HB", "NH", "J", "Y", "L", "G", "HA", "EH", "h", "HS", "Q", "Length", "Count", "I", "X", "C", "MH", "HI", "V", "P", "K", "length", "M", "F", "CH", "N"], "count": ["SH", "type", "case", "c", "current", "sum", "col", "head", "n", "all", "depth", "cache", "L", "G", "i", "id", "loop", "weight", "keep", "div", "more", "cond", "h", "parent", "index", "batch", "last", "size", "f", "Count", "max", "N", "code", "base", "C", "child", "V", "l", "found", "length", "p", "temp", "level"]}}
{"code": "def solve():\\n    n, k = map(int, input().split())\\n    if n % k == 0:\\n        print(0)\\n    else:\\n        print(1)\\n\\n\\nif __name__ == '__main__':\\n    solve()\\n", "target": "626", "substitutes": {"n": ["o", "cn", "x", "j", "c", "d", " N", "node", "nb", "name", "num", "i", "y", "na", "g", "nn", "nu", "number", "nr", "u", "f", "fn", "nt", "e", "b", "ns", "z", "v", "l", "m", "r", "nc", "ln", "p", "ne", "N"], "k": ["ik", "o", "kn", "x", "kk", "j", "work", "c", "d", " K", "ck", "kick", "i", "key", "sk", "unk", "ack", "ok", "ks", "kid", "dk", "ko", "f", "e", "ask", "b", "q", "tk", "kw", "w", "z", "K", "v", "m", "r", "p", "km", "N", "ku"]}}
{"code": "import sys\\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #\u7a7a\u767d\u3042\u308a\\n\\nN,C = LI()\\nD = [[0]*(C+1)] + [[0]+LI() for _ in range(C)]\\nc = [[0]*(N+1)] + [[0]+LI() for _ in range(N)]\\n\\nfrom collections import defaultdict\\n\\nd0,d1,d2 = defaultdict(int),defaultdict(int),defaultdict(int)\\n# dk = ((i+j)%3==k \u305f\u308b (i,j) \u306b\u5bfe\u3057\u3066\u5404\u8272\u304c\u4f55\u500b\u305a\u3064\u3042\u308b\u304b)\\nfor i in range(1,N+1):\\n    for j in range(1,N+1):\\n        if (i + j) % 3 == 0:\\n            d0[c[i][j]] += 1\\n        elif (i + j) % 3 == 1:\\n            d1[c[i][j]] += 1\\n        elif (i + j) % 3 == 2:\\n            d2[c[i][j]] += 1\\n\\nans = 10**18\\n# \u5909\u5316\u5f8c\u306e\u8272\u3067\u5168\u63a2\u7d22\\nfor i in range(1,C+1):\\n    for j in range(1,C+1):\\n        for k in range(1,C+1):\\n            if i == j or j == k or k == i:\\n                continue\\n            else:\\n                a = 0\\n                for color in d0.keys():\\n                    a += D[color][i]*d0[color]\\n                for color in d1.keys():\\n                    a += D[color][j]*d1[color]\\n                for color in d2.keys():\\n                    a += D[color][k]*d2[color]\\n                ans = min(ans,a)\\n\\nprint(ans)", "target": "516", "substitutes": {}}
{"code": "a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\n\\ne = [a, b]\\nf = [c, d]\\ng = []\\n\\nfor i in e:\\n    for j in f:\\n        g.append(i + j)\\nprint(min(g))", "target": "553", "substitutes": {"a": ["x", "ar", "ak", "ac", "ab", "art", "af", "n", "da", "s", "an", "A", "fa", "y", "alpha", "sa", "aa", "u", "va", "ad", "ca", "am", "ai", "ae", "asa", "ba", "ea", "l", "aj", "m", "p", "au"], "b": ["o", "eb", "k", "x", "db", "ab", "bc", "B", "bd", "n", "s", "bi", "y", "bs", "fb", "h", "aa", "u", "ad", "ae", "be", "ba", "l", "v", "bb", "r", "p"], "c": ["o", "k", "x", "ci", "ac", "n", "s", "y", "ec", "h", "dc", "u", "ad", "ca", "C", "q", "w", "z", "v", "l", "cd", "r", "cf", "p"], "d": ["o", "D", "k", "x", "nd", "bd", "n", "da", "s", "y", "dy", "min", "h", "ds", "u", "dd", "dx", "ad", "w", "z", "v", "l", "cd", "r", "m", "p"], "e": ["o", "element", "x", "E", "ie", "n", "ge", "s", "t", "y", "ec", "fe", "h", "u", "ee", "end", "edge", "ae", "w", "z", "l", "v", "ea", "m", "r", "p", "pe"], "f": ["df", "o", "fs", "k", "x", "fl", "fc", "n", "F", "t", "fa", "ef", "y", "fe", "h", "u", "sect", "end", "xf", "q", "w", "z", "v", "l", "m", "cf", "p"], "g": ["vg", "x", "gi", "gu", "gm", "gc", "n", "go", "ge", "cfg", "grid", "gl", "s", "G", "gz", "gam", "y", "h", "ig", "gs", "gg", "u", "graph", "ga", "q", "gh", "w", "z", "l", "v", "sg", "gas", "m", "groups", "gen", "erg", "p", "group", "gp"], "i": ["pi", "ji", "k", "x", "xi", "gi", "ci", "ie", "start", "int", "ind", "n", "id", "y", "ib", "index", "ip", "si", "u", "iu", "I", "mi", "q", "ai", "z", "v", "l", "ii", "r", "ei", "m", "li", "p"], "j": ["ji", "ang", "dt", "k", "err", "x", "oy", "ie", "bc", " inj", "ind", "n", "oj", "J", "num", "t", "ch", "y", " dj", "on", "dy", "ir", "h", "ib", "bj", "je", "end", "code", "q", "ai", "z", "v", "l", "ii", "r", "m", "now", "p"]}}
{"code": "N, K = map(int, input().split())\\ns = 0\\nab = [[0, 0] for i in range(N)]\\nfor i in range(N):\\n    ab[i][0], ab[i][1] = map(int, input().split())\\nab = sorted(ab)\\n\\n#print(ab)\\nfor i in range(N):\\n    s += ab[i][1]\\n    if s >= K:\\n        print(ab[i][0])\\n        break", "target": "608", "substitutes": {"N": ["U", "NA", "D", "S", "k", "R", "NS", "E", "B", "Ns", "T", "n", "W", "J", "Y", "A", "L", "G", "Len", "Num", " n", "Size", "Q", "I", "X", "C", "Na", "Ne", "V", "P", "O", "H", "M", "F", "Z"], "K": ["U", "D", "k", "S", "R", "E", "B", "Ns", "T", "J", "Y", "A", "G", "L", "Q", "I", "X", "C", " k", "V", "P", "O", "H", "M", "F", "Z"], "s": ["o", "S", "abb", "c", "ar", "ws", "ss", "B", "Ns", "Si", "abs", "ops", "an", "A", "Sa", "g", "sa", "span", " S", "si", "f", "e", "b", "sb", "w", "sc"], "ab": ["eb", "Tab", "k", "al", "x", "abb", "pb", "c", "account", "ob", "sub", "a", "ac", "app", "B", "af", "BB", "n", "abs", "ub", "ast", " AB", "array", "A", "av", "tab", "Ab", "bs", "lab", "hab", "sa", "ah", "abc", "fab", "ib", "ag", "f", "b", "ad", "am", "sb", "ai", "abl", "ae", "z", "AB", "l", "bb", "abi", "ap", "p"], "i": ["pi", "it", "o", "di", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", " I", "a", "io", "int", "ind", "n", "ui", "t", "ni", "bi", "id", "y", "h", "ix", "index", "ip", "si", "u", "iu", "f", "I", "ti", "b", "ai", "z", "qi", "v", "l", "ii", "m", "li", "p", "zi"]}}
{"code": "import re\\n\\n\\ndef main(s: str):\\n    if re.match(r'.*AC.*', s):\\n        print('Yes')\\n    else:\\n        print('No')\\n\\n\\nif __name__ == \"__main__\":\\n    s = input()\\n\\n    main(s)\\n", "target": "384", "substitutes": {"s": ["rs", "string", "o", "S", "sync", "ssl", "input", "su", "speech", "c", "d", "ses", "a", "session", "name", "ss", "sl", "side", "src", "n", "sie", "t", "strings", "i", "site", "g", "sa", "sample", "source", "sf", "south", "si", "spec", "f", "e", "sym", "b", "ns", "sb", "status", "w", "sv", "l", "v", "sg", "m", "r", "str", "p"]}}
{"code": "n = input()\\na = int(n)\\nprint(a**2)", "target": "787", "substitutes": {"n": ["area", "o", "k", "x", "c", "d", "node", "nb", "name", "data", "num", "an", "s", "A", "i", "y", "alpha", "na", "g", "count", "number", "aa", "u", "f", "fn", "e", "adj", "b", "ns", "z", "l", "v", "m", "r", "nc", "p", "N"], "a": ["area", "k", "x", "j", "c", "aw", "d", "ac", "ab", "data", "da", "an", "s", "num", "A", "i", "y", "alpha", "div", "sa", "aa", "u", "N", "f", "b", "ai", "asha", "z", "ba", "l", "aj", "r", "m", "p", "count"]}}
{"code": "import sys\\ns = list(input())\\nif list(set(s)) == [\"x\"]:\\n    print(0)\\n    sys.exit()\\nt = [i for i in s if i != \"x\"]\\nn = len(t)\\nif \"\".join(t) != \"\".join(t[::-1]):\\n    print(-1)\\nelse:\\n    dic = {}\\n    cnt = 0\\n    if n % 2 == 0:\\n        for j in range(len(s)):\\n            if s[j] != \"x\":\\n                cnt += 1\\n                if cnt == n//2:\\n                    a = s[:j+1]\\n                    a = a[::-1]\\n                if cnt == n//2 + 1:\\n                    b = s[j:]\\n                    break\\n        c = 0\\n        fa = []\\n        fb = []\\n        for k in range(len(a)):\\n            if a[k] == \"x\":\\n                c += 1\\n            else:\\n                fa.append(c)\\n                c = 0\\n        fa.append(c)\\n        c = 0\\n        for p in range(len(b)):\\n            if b[p] == \"x\":\\n                c += 1\\n            else:\\n                fb.append(c)\\n                c = 0\\n        fb.append(c)\\n        ans = 0\\n        for q in range(len(fa)):\\n            ans += max(fa[q],fb[q]) - min(fa[q],fb[q])\\n        print(ans)\\n    else:\\n        for j in range(len(s)):\\n            if s[j] != \"x\":\\n                cnt += 1\\n                if cnt == int(n/2) + 1:\\n                    a = s[:j+1]\\n                    a = a[::-1]\\n                    b = s[j:]\\n                    break\\n        c = 0\\n        fa = []\\n        fb = []\\n        for k in range(len(a)):\\n            if a[k] == \"x\":\\n                c += 1\\n            else:\\n                fa.append(c)\\n                c = 0\\n        fa.append(c)\\n        c = 0\\n        for p in range(len(b)):\\n            if b[p] == \"x\":\\n                c += 1\\n            else:\\n                fb.append(c)\\n                c = 0\\n        fb.append(c)\\n        ans = 0\\n        for q in range(len(fa)):\\n            ans += max(fa[q],fb[q]) - min(fa[q],fb[q])\\n        print(ans)", "target": "766", "substitutes": {"s": ["services", "sin", "events", "times", "bis", "abs", "qs", "ows", "strings", "cases", "en", "h", "ms", "source", "st", "f", "ns", "sv", "z", "m", "words", "ssl", "x", "d", "ses", "sys", "ss", "als", "opens", "vs", "cs", "y", "ks", "sites", "tests", "r", "ls", "fs", "parts", "S", "bes", "ats", "ds", "stat", "posts", "sq", "south", "u", "sets", "e", "objects", "ps", "es", "l", "v", "xs", "erences", "series", "states", "o", "string", "ins", "bs", "g", "sa", "os", "shell", "ts", "gs", "si", "ys", "w", "ves", "apps"], "t": ["o", "dt", "x", "d", "T", "ot", "list", "y", "test", "h", "ts", "tt", "tf", "tmp", "table", "st", "u", "e", "f", "pt", "w", "ta", "z", "v", "l", "te", "m", "r", "temp"], "i": ["pi", "it", "o", "iw", "input", "xi", "x", "gi", "ci", "d", "yi", " I", "io", "ie", "int", "ind", "bi", "id", "y", "h", "ip", "multi", "si", "u", "f", "I", "ti", "e", "im", "ai", "z", "qi", "l", "v", "ii", "r", "li", "ei", "m"], "n": ["o", "cn", "x", "np", "d", "nb", "ot", "all", "num", "non", "syn", "ni", "y", "g", "min", "en", "h", "nn", "nan", "un", "nl", "nu", "u", "len", "net", "nt", "fn", "f", "e", "ns", "pn", "sn", "no", "w", "nor", "z", "l", "v", "m", "nc", "ln", "ne", "N"], "dic": ["diac", "Dics", "sdict", "siac", "Dic", "dict", "sdiac", "sics", "sict", "Diac", "Dict", "sdic", "dics", "sic", "sdics"], "cnt": [" cns", "ncnt", "ncnc", "connt", "cannot", "CNT", "cno", "ncno", "conno", "ecnd", "xcnt", "xcnn", "pcnc", "lcnn", " cnd", "lcnt", " cno", "pcount", "conrt", "Cno", "lcno", "ecount", "pcnd", "cnd", "Crt", "cnn", " cannot", "xcct", "dcnt", "Cnn", "lcns", "ecnt", "dcrt", "dcnc", "conNT", "cnc", "pannot", "Cnt", "ecnc", "cct", "lcct", "cNT", "prt", "pcnt", " cnc", "Cct", "pnt", " count", " cnn", "ncnn", "lcnc", " crt", "xcns", "pnc", "cns", " cct", "crt", "dcannot", " cNT", "count"], "j": ["note", "el", "ji", "o", "js", "jen", "x", "_", "d", "left", "ie", "jc", "J", "ch", "y", "key", "jan", "body", "g", "min", "h", "bj", "job", "ix", "jl", "jo", "br", "u", "ja", "f", "jet", "e", "je", "jj", "dj", "w", "z", "v", "jp", "l", "aj", "r", "m", "fr", "uj"], "a": ["ma", "area", "auto", "o", "sta", "x", "aw", "ar", "d", "ama", "ac", "ab", "wa", "af", "da", "ata", "an", "A", "y", "alpha", "api", "g", "sa", "h", "ana", "ia", "za", "aa", "ach", "u", "va", "oa", "f", "e", "am", "ca", "ad", "ga", "aba", "ai", "ae", "z", "ba", "aaa", "asa", "l", "ea", "aj", "v", "r", "another", "ap", "au"], "b": ["o", "eb", "bo", "x", "pb", "abb", "db", "d", "ob", "nb", "ab", "bh", "app", "bc", "B", "rb", "bot", "y", "abe", "bs", "body", "g", "h", "aa", "wb", "lb", "u", "e", "f", "base", "sb", "be", "w", "z", "ba", "l", "v", "r", "bf", "m", "bb", "ap"], "c": ["out", "ar", "ac", "uc", "cc", "ce", "ec", "h", "cin", "dc", "can", "f", "ca", "arc", "z", "lc", "m", "oc", "cl", "count", "enc", "loc", "cn", "err", "x", "ci", "d", "tc", "ch", "cs", "y", "abc", "cp", "vc", "code", "cat", "sc", "r", "cf", "sec", "cy", "col", "coll", "anc", "config", "cats", "con", "ct", "xc", "u", "e", "toc", "cont", "C", "l", "v", "ic", "o", "cus", "mc", "case", "bc", "cache", "g", "cit", "co", "cm", "cu", "unc", "w", "chain", "cr", "pc", "rc"], "fa": ["ma", "ffe", "fat", "fw", "afa", "fal", "x", "ifa", "afi", "wa", "hea", "ac", "ifi", "af", "fc", "lla", "pa", "asia", "da", "bi", "ppa", "alpha", "fe", "xa", "na", "fd", "sa", "fab", "ana", "fff", "ia", "za", "aa", "rea", "la", "si", "xc", "lia", "va", "ja", "fi", "f", "oa", "bal", "ca", "FB", "xf", "Na", "fen", "ga", "Fa", "ae", "ta", "aaa", "ba", "qi", "ea", "bf", "cf", "facebook", "FA"], "fb": ["ffe", "fs", "fy", "eb", "fat", "fw", "afa", "pb", "fal", "feed", "usb", "abb", "fm", "eddy", "cb", "afi", "ab", "hea", "af", "fc", "ff", "bis", "xb", "cache", "rb", "buf", "rf", "raf", "ppa", "fed", "front", "fe", "bs", "lab", "fd", "abc", "fab", "ffff", "tf", "fx", "fg", "wb", "xc", "lb", "fu", "fi", "f", "buff", "bu", "FB", "uf", "xf", "icc", "fen", "sb", "Fa", "FF", "frac", "ba", "obb", "fr", "bf", "deb", "abi", "bb", "facebook"], "k": ["ik", "o", "type", "ke", "x", "_", "ak", "ijk", "ac", "ck", "ek", "ch", "id", "y", "ph", "key", "sk", "kg", "g", "h", "ok", "ks", "cp", "uk", "kin", "u", "pp", "f", "ki", "w", "ep", "kw", "K", "z", "kind", "v", "l", "r", "m", "cl", "km"], "p": ["wp", "lp", "pi", "tp", "o", "x", "op", "sp", "np", "point", "po", "ch", "bp", "y", "ph", "g", "h", "cp", "pr", "ip", "u", "pp", "f", "e", "ps", "pn", "pt", "pm", "ep", "P", "z", "v", "l", "pc", "m", "r", "ap", "up", "pe"], "ans": ["offs", "ls", "san", "ras", "nas", "ins", "aos", "ars", "ants", "ss", "any", "amps", "vs", "ens", "an", "anc", "ops", "ads", "ats", " means", "outs", "cs", "ents", "ams", "anon", "sk", "cases", "na", "os", "anas", "ds", "ks", "ana", "co", "An", "ids", "span", "can", "anes", "cons", "la", "cas", "aned", "ANS", "ann", "lan", "ns", "ps", "ands", "es", "errors", "aces", "ays", "xs", "eps", "aus", "ons", "aps", "au"], "q": ["core", "qt", "x", "dq", "d", "question", "point", "ac", "name", "int", "view", "ck", "qs", "depth", "ch", "que", "id", "y", "ph", "key", "iq", "qa", "g", "ack", "h", "cp", "query", "ct", "ix", "ip", "req", "Q", "sq", "eq", "ur", "u", "pp", "f", "e", "qq", "aq", "ev", "sh", "w", "gh", "z", "qi", "form", "v", "r", "m", "qu", "cl", "count"]}}
{"code": "n,d=[int(x) for x in input().split()]\\nx=[]\\nfor i in range(n):\\n  X=[int(x) for x in input().split()]\\n  x.append(X)\\nans=0\\nfor i in range(n-1):\\n  for j in range(i+1,n):\\n    dis=0\\n    for k in range(d):\\n      dis+=(x[i][k]-x[j][k])**2\\n    for l in range(181):\\n      if dis==l**2:\\n        ans+=1\\n        break\\nprint(ans)", "target": "182", "substitutes": {"n": ["o", "c", "nb", "name", "an", "num", "s", "t", "ni", "y", "g", "h", "nn", "nl", "u", "len", "e", "f", "nt", "b", "ns", "q", "w", "z", "dn", "v", "m", "r", "nc", "p", "ne", "N"], "d": ["o", "D", "dt", "c", "data", "nd", "t", "sd", "dy", "g", "h", "ds", "do", "dc", "u", "f", "e", "dd", "b", "ad", "dl", "w", "z", "dn", "v", "m", "p", "ld"], "x": ["o", "xp", "input", "xi", "c", "_", "plus", "xy", "pair", "data", "a", "int", "num", "s", "array", "t", "id", "y", "test", "tx", "xml", "on", "ax", "h", "xt", "sex", "xxxx", "rx", "image", "ix", "index", "model", "ex", "xc", "u", "e", "f", "max", "b", "xx", "xf", "xes", "wx", "q", "w", "z", "v", "cross", "m", "xs", "p"], "i": ["pi", "di", "o", "it", "ji", "xi", "c", "ci", "phi", "io", "ie", "int", "ind", "ui", "ini", "bi", "id", "y", "on", "h", "ix", "index", "ip", "si", "u", "iu", "f", "I", "ti", "e", "b", "q", "ai", "z", "p", "v", "ii", "li", "m", "r", "ei"], "X": ["U", "D", "XX", "data", "Data", "T", "W", "J", "Array", "Y", "A", "L", "G", "Xi", "ix", "Int", "Ex", "Q", "I", "xx", "C", "XL", "TX", "V", "ML", "P", "XP", "K", "p", "XXX", "F", "N", "Z"], "ans": ["asses", "ras", "nas", "ins", "a", "aid", "ens", "an", "s", "anc", "outs", "cs", "ams", "sk", "atches", "na", "os", "anas", "ds", "ks", "les", "nn", "span", "can", "lines", "lies", "alls", "AN", "cas", "aned", "ANS", "lus", "ann", "ad", "ns", "ons", "lan", "sn", "scan", "es", "no", "ions", "ani", "ays", "params", "cross", "xs", "eps", "aus", "any"], "j": ["el", "ji", "o", "xi", "c", "ijk", " ii", "ie", "ind", "J", "y", "jan", "dy", "key", "ij", "h", "jl", "u", "e", "je", "f", "obj", "b", "jj", "q", "ai", "z", "jp", "v", "ii", "r", "li", "m", "p"], "dis": ["unit", "el", "DIS", "di", "pi", "ls", "loc", "ol", "det", "Dis", "de", "sol", "lo", "fc", "re", "da", "ly", "non", "syn", "ni", "ignore", "sd", "dy", "os", "cor", "des", "nl", " Dis", "la", "lin", "rel", "len", "ee", "lan", "mis", "sn", "es", "no", "dl", "chi", "lc", "li", "dist", "se", "lu", "ne"], "k": ["ik", "it", "o", "kn", "ked", "kk", "c", "ky", "ac", "kl", "a", "ind", "ck", "an", "s", "kick", "ch", "id", "y", "key", "sk", "g", "unk", "h", "ks", "u", "e", "f", "b", "q", "w", "kw", "z", "K", "v", "m", "r", "p", "ka"], "l": ["el", "lp", "ls", "o", "loc", "le", "al", "xi", "c", "kl", "lo", "yl", "ll", "s", "t", "L", "y", "g", "nl", "lin", "il", "len", "u", "lb", "f", "e", "b", "dl", "z", "lc", "v", "li", "m", "lu", "ln", "p", "cl"]}}
{"code": "m, d = map(int, input().split(' '))\\n\\ncnt = 0\\nif d < 22:\\n  print(0)\\nelse:\\n  for i in range(22,d + 1):\\n    d10 = i // 10\\n    d1 = i % 10\\n    if d10 >= 2 and d1 >= 2 and d10*d1 <= m:\\n      cnt += 1\\n      \\n  print(cnt)", "target": "295", "substitutes": {"m": ["pi", "o", "D", "j", "c", "mad", "fm", "a", "n", "num", "s", "y", "dim", "h", "ym", "md", "cm", "e", "f", "mu", "b", "mi", "mm", "pm", "dm", "z", "l", "v", "r", "M", "p", "bm"], "d": ["di", "D", "dt", "dos", "x", "j", "c", "data", "diff", "nd", "ind", "n", "s", "t", "td", "sd", "dy", "fd", "dim", "ds", "do", "dh", "md", "day", "dc", "f", "e", "dd", "dx", "b", "ad", "dl", "z", "dm", "dn", "l", "cd", "dat", "p", "ld"], "cnt": ["Cnd", "CNT", "crnt", " cnd", "Cnc", "lcnt", "crct", "lcNT", "cnd", "cnn", "dcct", "Cnn", "dcnt", "dcnc", "cnc", "pnd", "Cnt", "Count", "cct", "crount", "cNT", "lcct", " cnc", "Cct", "pnt", " count", " cnn", "lcnc", "pount", "pnc", "crnn", " cct", "dcNT", "count"], "i": ["pi", "di", "dt", "D", "k", "x", "xi", "j", "c", "gi", "ci", "phi", "start", "int", "ind", "n", "num", "s", "t", "bi", "id", "y", "h", "index", "u", "iu", "e", "I", "f", "ti", "b", "dm", "z", "v", "l", "ii", "mid", "li", "r", "p"], "d10": ["D0", "f1", " d20", " d0", "c110", " d30", " d110", "d30", "d0", "D10", "f110", "dt10", "d20", "f0", "c1", "d2", "t20", "dt30", "c2", "f10", " d2", "f2", "c10", "d110", "D110", "dt20", "t10", "t30", "D1"], "d1": ["D0", " d0", "p10", "d01", "D2", "d0", "D10", "p0", " d11", " d01", "c1", "d2", "d11", "v10", " d2", "v1", "c10", "D11", "p2", "p11", "v01", "c01", "D1", "p1"]}}
{"code": "import itertools\\n\\nn,m,x = map(int, input().split())\\nresult_list = [[0 for i in range(m+1)] for i in range(2**n)]\\nbook_list=[]\\nzero_one = [0,1]\\ncombi_list = list(itertools.product(zero_one, repeat=n))\\nfor i in range(n):\\n    can = list(map(int, input().split()))\\n    book_list.append(can)\\n#2^n\u901a\u308a\u306e\u7d44\u307f\u5408\u308f\u305b\\nfor i in range(2**n):\\n    #n\u500b\u5168\u90e8\u8db3\u3059\\n    for j in range(n):\\n        #\u4fa1\u683c\u3068\u30b9\u30ad\u30eb\u3092\u5168\u90e8\u8db3\u3059\\n        for k in range(m+1):\\n            result_list[i][k] +=  book_list[j][k] * combi_list[i][j]\\nAns_list = []\\nfor i in range(len(result_list)):\\n    kari_list = result_list[i][1:]\\n    if min(kari_list) >= x:\\n        Ans_list.append(result_list[i][0])\\nif Ans_list == []:\\n    print(-1)\\nelse:\\n    Ans = min(Ans_list)\\n    print(Ans)", "target": "112", "substitutes": {"n": ["o", "k", "j", "c", "d", " N", "nb", "num", "s", "t", "y", "mn", "nan", "number", " c", " l", "u", "net", "size", "e", " number", "nt", "f", "b", "ns", "sn", "q", "w", "z", " ng", "l", "v", "r", "nc", "p", "ne", "N"], "m": ["o", "mc", "k", "j", "c", "d", "nb", "num", "s", "t", "y", "mn", "g", "h", "mx", "cm", "u", "e", "f", "mu", "b", "mm", "w", "z", "dm", "dn", "v", "l", "r", "M", "p", "N"], "x": ["o", "xp", "xi", "c", "d", "xy", "y", "xxx", "ax", "mx", "ix", "index", "number", "xc", "u", "e", "f", "X", "xes", "wx", "q", "w", "z", "v", "xs", "p"], "result_list": ["result2set", "return_list", "return_type", "resultptype", "return_set", "resultpset", "result_array", "return2array", "result_type", "return2type", "resultplist", "result_set", "return2list", "resultparray", "result2type", "return_array", "result2array", "result2list", "return2set"], "i": ["pi", "it", "di", "o", "k", "xi", "c", "gi", "ci", " ii", "ie", "int", "ind", "ni", "id", " j", "isin", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "im", "ai", "qi", "l", "ii", "li", "ei", "r", "p"], "book_list": ["book_l", "bookplechain", " book_chain", "book2l", "book2list", "bookenlist", "arrayenpart", "bookenpart", "book2source", "array_list", "bookplelist", "book_chain", "bookplel", " book_data", "array_source", "array_l", "arrayensource", "bookensource", "book_part", "array_part", "bookenl", "bookpledata", "book_source", "book_data", "book2part", "arrayenlist", " book_l", "arrayenl"], "zero_one": ["zero_two", "one_nine", "zero_ones", "zero_nine", "one_two", "zero_eight", "one_one", "zero_plus", "one_eight", "one_plus", "one_ones"], "combi_list": ["combis_list", "combisadlist", "combiadlist", "combi_cl", "combiadcode", "combisadl", "combi_code", "combis_l", "combiadcl", "combisadcl", "combiadl", "combis_cl", "combis_code", "combisadcode", "combi_l"], "can": [" Can", "ban", "CAN", "ac", "could", "anc", "an", "cal", "man", "annot", "Can", "gin", "con", "paren", "co", "cin", "character", "kin", "cas", "cu", "kan", "pan", "ann", "ca", "may", "ans", "scan", "must", "will", "book", "any", "there"]}}
{"code": "A,B = (int(x) for x in input().split())\\n\\nresult = [A+B,A-B,A*B]\\n\\nprint(max(result))", "target": "175", "substitutes": {"A": ["As", "U", "Ca", "NA", "Bu", "D", "S", "Total", "Alpha", "a", "Auto", "CA", "T", "mA", "At", "Array", "Y", "Az", "L", "G", "Ab", "alpha", "HA", "GA", "SA", " a", "Area", "Adam", "Average", "Ar", "Wa", "Ha", "I", "AA", "b", "X", "C", "MA", "Na", "P", "API", "AB", "AW", "And", "F", "Abs", "N", "LA"], "B": ["U", " b", "D", "BF", "R", "E", "LB", "BB", "T", "TB", "BE", "W", "Y", "L", "G", "NB", "Ab", "BA", "Beta", "BI", "OB", "Bah", "number", "GB", "Bs", "Q", "Band", "WB", "I", "b", "X", "Number", "C", "SB", "Block", "V", "MB", "P", "K", "BC", "AB", "O", "M", "F", "Bal", "N", "Z"], "x": ["xp", "xi", "xy", "a", "int", "ww", "xb", "xxxxxxxx", "i", "y", "xxx", "xa", "val", "h", "xt", "xe", "xxxx", "rx", "abc", "ix", "index", "number", "ex", "xc", "e", "dx", "X", "xx", "xf", "wx", "z", "rex", "v", "xs", "p"], "result": ["average", "D", "grade", "Result", "distance", "search", "response", "results", "R", "append", "feature", "output", "data", "diff", "answer", "Array", "list", "array", "range", " Result", "test", "alpha", "bar", "score", "date", "master", "number", "br", "final", "AA", "ULT", "end", "match", "buffer", "filter", "length", "r", "order", "F", "card"]}}
{"code": "N = int(input())\\nCarry = []\\nfor i in range(5):\\n    Carry.append(int(input()))\\nmin_num = min(Carry)\\nif N < min_num:\\n    print(5)\\nelif min_num == 1:\\n    print((N//min_num)+4)\\nelif N % min_num == 0:\\n    print((N//min_num))\\nelse:\\n    print((N//min_num)+5)", "target": "784", "substitutes": {"N": ["ND", "NY", "Node", "NA", "D", "S", "GN", "NS", "NE", "NC", "NL", "Ns", "T", "n", "NH", "Y", "Ni", "L", "Num", "NB", "CNN", "NT", "NM", " n", "Size", "NN", "MN", "No", "Q", "IO", "I", "Number", "X", "NO", "C", "Na", "Ne", "NI", "NR", "NUM", "NG", "V", "NF", "P", "K", "NP", "O", "H", "M", "F"], "Carry": [" Cary", "core", "Bcarry", "Contcarry", "Ccarry", " corrow", "Cary", " carry", "Barry", "Gcarry", " cary", "cycle", "Contarry", "ccarry", "corrow", "Bull", "carry", "Cycle", "Gored", "Accarry", "Contotton", " core", "Cotton", "Acarry", "Garry", "cored", " Corrow", "Gull", "Acotton", "cary", "Core", "Cull", "cotton", "Bored", " Core", "cull", "Acycle", "Cored", "Contycle", "Corrow"], "i": ["it", "k", "x", "j", "c", "gi", " it", "d", " I", "ind", "n", "num", "id", "y", "g", " il", "index", "ip", "il", "u", "f", "I", "q", "z", "l", "li", "p", "ne"], "min_num": ["min_n", "max_number", "minaldigit", "minydone", "min_no", "max_no", "minalnum", "minynum", "max_n", "max_sum", "max_bin", "MIN_mon", "minalmon", "MINaldigit", " min_n", "min_sum", "min_digit", "minymon", "MIN_num", "min_bin", "max_mon", "min_done", "max_nom", "MINalmon", "MINalnum", "minaldone", " min_number", "MIN_digit", "min_min", "minydigit", "max_min", "min_orig", "MIN_done", " min_mon", "min_mon", "min_nom", "MINaldone", "min_number", "max_num", " min_orig"]}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10**7)\\n\\n\\ndef dfs(s, to, color):\\n    for next_v, step in to[s]:\\n        if color[next_v] == -1:\\n            if step % 2 == 0:\\n                color[next_v] = color[s]\\n            else:\\n                color[next_v] = color[s] ^ 1\\n            dfs(next_v, to, color)\\n\\n\\ndef solve():\\n    N = int(input())\\n    to = [[] for _ in range(N)]\\n    for _ in range(N - 1):\\n        u, v, w = map(int, input().split())\\n        u, v = u - 1, v - 1\\n        to[u].append([v, w])\\n        to[v].append([u, w])\\n\\n    color = [-1] * N #-1: \u672a\u63a2\u7d22\u30010: \u767d\u30011: \u9ed2\\n    color[0] = 0\\n    dfs(0, to, color)\\n    print(*color, sep='\\n')\\n\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "300", "substitutes": {"s": ["states", "ls", "o", "js", "S", "k", "su", "x", "j", "c", "d", "service", "ses", "a", "sys", "start", "ss", "n", "t", "space", "i", "cs", "y", "g", "h", "sample", "source", "south", "si", "spec", "f", "e", "sym", "b", "ns", "sb", "q", "sv", "state", "l", "r", "m", "xs", "se", "p", "hs"], "to": ["pi", "auto", "o", "type", "onto", "at", "this", "eto", "x", "xi", "out", "TO", "su", "page", "after", "current", "c", "left", "point", "output", "copy", "value", "io", "by", "pixel", "go", "po", "t", " so", "vi", "i", "y", "stop", "client", "target", "do", "To", "source", "trans", "next", "flo", "size", " too", "move", "f", "toc", "b", "ho", "white", "new", "so", "no", "state", "ta", "position", "l", "into", "p", "temp", "token", "top"], "color": ["type", "o", "k", "err", "our", "c", "blue", "cy", "cycle", " colors", "scale", "theme", "col", "pair", "sum", "value", "gray", "pixel", "pal", "action", "center", "go", "option", "colour", "result", "id", "olor", "Color", "alpha", "shadow", "key", "width", "g", "y", "cor", "ion", "url", "black", " Color", "parent", "index", "pr", "source", "channel", "line", "number", "span", "function", "gradient", "fill", "COLOR", "background", "orange", "size", "token", "white", "red", "stroke", "power", "state", "style", "r", "comment", "border", "p", "colored", "path", "call"], "next_v": [" next_f", "Next_c", "next_n", " next_V", "nextParv", "next_va", "nextxf", "next_c", "Next_V", "viousParver", "viousParva", "nextxn", "vious_V", "nextxv", "vious_v", "viousParv", "vious_ver", "Next_f", " next_u", "next_V", "next_u", "nextParV", " next_n", "vious_va", "Next_v", "nextParva", "viousParV", "next_ve", "nextParver", " next_ve", "next_f", "next_ver"], "step": ["input", "x", "page", "cycle", "scale", "name", "data", "steps", " Step", "start", "pixel", "trial", "num", "loop", "pointer", "key", "stop", "phase", "transform", "dim", "image", "version", "sample", "index", "STEP", "channel", "number", "row", "Step", "gradient", "size", "max", "stage", "no", "stroke", "counter", "position", "grad", "path"], "N": ["ND", "Node", "NA", "D", "S", "GN", "R", "NS", "NE", "NC", "Ns", "T", "n", "W", "J", "num", "Y", "A", "L", "Ni", "Len", "Num", "SN", "NB", "NT", " n", "Size", "network", "NN", "number", "nu", "No", "Q", "MN", "size", "Length", "I", "X", "C", "NI", "Ne", "Na", "V", "P", "K", "O", "H", "M", "F", "Z"], "_": ["x", " un", "__", " time", "all", " all", "non", " self", " local", " n", " l", " seq", "f", " block", " non", " over", "ing", " the"], "u": ["U", "o", "yu", "eu", "k", "x", "su", "ul", "uv", "c", "tu", "ut", "uc", "int", "n", "ui", "t", "i", "id", "y", "g", "h", "ue", "un", "nu", "cu", "iu", "ur", "f", "mu", "b", "us", "uu", "q", "z", "pu", "l", "uid", "lu", "ru", "p", "up", "ou", "user"], "v": ["U", "o", "k", "ve", "x", "uv", "j", "c", "d", "ver", "value", "vv", "vs", "vin", "n", "user", "vp", "ui", "t", "ov", "video", "i", "y", "h", "version", "vert", "lv", "iv", "va", "e", "f", "b", "us", "vu", "q", "V", "sv", "z", "vol", "nv", "l", "m", "r", "p", "ou", "vi", "vy"], "w": ["o", "k", "x", "wl", "c", "wan", "aw", "d", "ws", "wa", "W", "n", "ww", "wt", "i", "wd", "y", "wave", " W", "width", "sw", "h", "we", "wal", "ow", "win", "ew", "f", "e", "b", "wx", "q", "z", "l", "r", "wh", "p", "wu"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\ncap = [[0, 0] for _ in range(N+1)]\\ncap[-1] = [A[-1], A[-1]]\\nfor i in range(N-1,-1,-1):\\n    cap[i][0] = (cap[i+1][0] + 2 - 1)//2\\n    cap[i][1] = cap[i+1][1] + A[i]\\nans = 1\\nnodes = 1\\nfailed = nodes < cap[0][0]\\nfor i in range(N):\\n    nodes = min((nodes - A[i])*2, cap[i+1][1])\\n    if nodes < cap[i+1][0]:\\n        failed = True\\n        break\\n    ans += nodes\\nprint(-1 if failed else ans)\\n", "target": "625", "substitutes": {"N": ["U", "Node", "D", "S", "R", "NS", "E", "NC", "NE", "B", "Ns", "T", "n", "NH", "W", "J", "Y", "L", "Ni", "G", "Len", "Num", "CNN", "NT", "Size", "NN", "MN", "No", "I", "X", "C", "Na", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["As", "U", "AR", "NA", "D", "S", "E", "Alpha", "a", "B", "CA", "T", "W", "F", "At", "Y", "L", "G", "AS", "alpha", "EA", "An", "AP", "Q", "Ar", "I", "AA", "X", "C", "Na", "V", "P", "K", "AF", "API", "AC", "M", "H", "Cap", "LA"], "cap": ["case", "capt", "x", "mac", "op", "c", "square", "sp", "rap", "scale", "acl", "feature", "a", "data", "ac", "app", "ab", "caps", "pos", "switch", "n", "center", "list", "array", "cache", "ape", "space", "ch", "clip", "cl", "ce", "config", " cp", "map", "gap", "change", "cp", "capacity", "span", "CAP", "ip", "pad", " Cap", "AP", "stack", "max", "group", "code", "shape", "ca", "cum", " caps", "com", "cop", "v", "pe", "ace", "Cap", "ap", "p", "up", "cube", "aps", "block", "card"], "_": ["o", "x", "ie", "int", "all", "num", " x", "ix", "ip", "u", "len", "f", "I", "p"], "i": ["mini", "it", "xi", "j", "c", "phi", "num", "bi", "isi", "source", "ip", "multi", "eni", "iu", "f", "I", "ti", "inline", "ki", "z", "lc", "m", "io", "p", "ji", "x", "gi", "ci", "d", "a", "ori", "range", "id", "y", "ix", "ii", "li", "pi", "di", "uri", "yi", "ie", "cli", "int", "ind", "n", "ini", "site", "image", "index", "u", "e", "init", "qi", "l", "v", "ei", "o", "start", "ui", "ni", "info", "api", "inner", "g", "si", "b", "ai"], "ans": ["ls", "eds", "anus", "san", "aning", "anned", "ins", "ations", "fail", "ars", "ss", "ants", "an", "anc", "ops", "man", "cs", "ents", "anon", "ams", "na", "ant", "plan", "anas", "ms", "ks", "nan", "An", "ana", "nn", "can", "lines", "cons", "AN", "cas", "aned", "ania", "ase", "ANS", "disabled", "ann", "lan", "ns", "ane", "ros", "opened", "errors", "ani", "ano", "yes", "ace", "ln", "ons"], "nodes": ["Node", "Nenos", "Noded", " nons", "lenode", " Noms", "ynoms", "Nores", "gnoded", "lenodes", "nops", "nanode", "node", " noms", "ynumbers", "nenos", "nanops", "lumbers", "Nons", "noded", "loded", "enoms", "nores", " nops", "Numbers", " nores", "Nops", "nanores", "nods", "nanodes", "enumbers", "lodes", "Noms", " node", " Node", "Nodes", " Nons", "noms", "ynode", "nons", "enodes", "Nods", " Nodes", "lenenos", " Noded", "gnumbers", "gnods", " nenos", " noded", "gnodes", "enode", "numbers", "ynodes", "lods"], "failed": [" Failed", " succeed", "unit", "ado", "won", "success", "expected", "su", "done", "j", " errors", "successfully", "ded", "best", "de", "left", "ro", "fail", "lo", " accepted", " succeeded", "killed", "ailed", " error", "false", "Fail", "led", " fails", "plan", " fail", "successful", "line", "allowed", "error", "packed", "la", "rored", "problem", "aned", "disabled", "uno", " failure", "used", "none", " skipped", "worst", "errors", "no", "Failure", "broken", "started", "balanced", "ano", " done", " failures", "nil", "li"]}}
{"code": "n = int(input())\\nplus = []\\nminus = []\\nfor i in range(n):\\n    s = input()\\n    mini = 0\\n    ruikei = 0\\n    for j in range(len(s)):\\n        if s[j] == '(':\\n            ruikei += 1\\n        else:\\n            ruikei -= 1\\n            mini = min(mini, ruikei)\\n    if ruikei > 0:\\n        plus.append([mini, ruikei])\\n    else:\\n        mini = 0\\n        ruikei = 0\\n        for j in range(len(s))[::-1]:\\n            if s[j] == ')':\\n                ruikei += 1\\n            else:\\n                ruikei -= 1\\n                mini = min(mini, ruikei)\\n        minus.append([mini, ruikei])\\n\\nplus.sort(reverse=True, key=lambda x: x[0])\\nminus.sort(reverse=True, key=lambda x: x[0])\\n\\nans = 'Yes'\\ntop_plus = 0\\nfor i in range(len(plus)):\\n    mini, ruikei = plus[i]\\n    if top_plus + mini < 0:\\n        ans = 'No'\\n        break\\n    else:\\n        top_plus += ruikei\\n\\ntop_minus = 0\\nfor i in range(len(minus)):\\n    mini, ruikei = minus[i]\\n    if top_minus + mini < 0:\\n        ans = 'No'\\n        break\\n    else:\\n        top_minus += ruikei\\n\\nif top_plus != top_minus:\\n    ans = 'No'\\n\\nprint(ans)", "target": "7", "substitutes": {"n": ["o", "k", "x", "c", "np", "d", "nb", "a", "ny", "num", "t", "y", "na", "g", "h", "network", "nn", "span", "nl", "number", "size", "nt", "f", "e", "b", "ns", "sn", "no", "w", "z", "l", "m", "r", "p", "ne", "N"], "plus": ["core", "step", "home", "case", "full", "first", "x", "extra", "search", "current", "large", "down", "ins", "left", "name", "Plus", "positive", "diff", "pos", "ge", "inc", "party", "space", "po", "id", "alpha", "front", "quick", "python", "api", "min", "more", "g", "qa", "prefix", "version", "custom", "self", "big", "zip", "parse", "default", "one", "base", "none", "support", "include", "less", "sign", "cross", "yes", "right", "p", "up", "form"], "minus": ["extra", "partial", "off", "below", "redo", "down", "de", "left", "Plus", "times", "diff", "pos", "side", "second", "google", "meta", "non", "po", "zero", "python", "min", "without", "multiple", "version", "des", "self", "pse", "sample", "main", "null", "delete", "zip", "downs", "nos", "one", "mega", "neg", "remove", "none", "danger", "other", "no", "less", "negative", "gone", "ones", "right", "don", "small", "two", "seconds", "pose"], "i": ["pi", "di", "ji", "it", "o", "uri", "k", "x", "xi", "c", "gi", "ci", "yi", "phi", "io", "ie", "int", "ind", "ini", "ui", "ni", "info", "id", "y", "key", "g", "h", "ia", "index", "ip", "eni", "si", "il", "u", "iu", "f", "I", "ti", "e", "im", "ai", "z", "v", "l", "ii", "li", "ei", "m", "p", "zi"], "s": ["states", "ls", "o", "services", "parts", "S", "x", "su", "c", "d", "ins", "ses", "a", "ss", "qs", "space", "y", "g", "sa", "os", "h", "ds", "blocks", "ks", "ips", "sample", "gs", "sq", "south", "si", "u", "sets", "spec", "f", "e", "b", "ps", "ns", "es", "sb", "w", "z", "l", "less", "v", "sign", "r", "xs", "m", "sing", "small", "p", "series"], "mini": ["area", "xi", "large", "cycle", "phi", "margin", "agi", "bi", "mag", "next", "fake", "zip", "mobile", "mi", "z", "example", "m", "part", "ci", "scale", "zero", "version", "fi", "max", "meg", "thin", "ani", "ii", "li", "lim", "pi", "di", "minute", "ie", "int", "meta", "ini", "alpha", "plugin", "charge", "span", "beta", "mega", "init", "chi", "qi", "mins", "money", "mc", "sum", "value", "start", "little", "second", "ni", "inner", "min", "nice", "dim", "magic", "big", "radius", "micro", "si", "me", "Mini", "size", "ai", "module", "spin", "small"], "ruikei": ["ruiceabi", "ruikabi", "ruixp", "ruicalb", "ruicheeni", "ruikeit", "rainiquei", "ruakeii", "nuikepi", "uranceli", "ruixi", "cuanceit", "ruiceli", "ruikerl", "rnichee", "ruakepi", "ruasey", "urikepi", "uuikeuri", "rueikuabi", "ruancel", "gruikeio", "urikeli", "ruikepi", "ruikeuri", "ruiserini", "rusikerii", "ruichl", "gruikeri", "rusichii", "uuikei", "ruikera", "ruakehi", "rainikeui", "ruacheii", "urikeii", "urikei", "ruiskii", "uricheeni", "ruikerian", "ruikeian", "rusicyy", "cuikeeni", "ruikib", "rueikui", "rumikey", "rueikei", "ruiski", "gruikeii", "ruicall", "ruiqueoi", "rnichesi", "uuisineio", "ruichee", "ruikiu", "rumikeis", "rusikerb", "ruiqi", "ruichehi", "ruiserio", "ruicesi", "ruikegi", "uuikeruri", "ruikl", "rusicyxi", "ruikea", "rnikee", "ruanceii", "urikeini", "nuixpi", "ruanceeni", "ruichi", "nuixhi", "ruiskian", "ruiquehi", "ruiqoi", "ruicheoi", "rainikehi", "rukei", "ruisery", "rualthi", "ruicheini", "rainiqueoi", "ruikerhi", "rainiquehi", "ruisineio", "ruachei", "ruaseis", "ruikesii", "ruikpi", "gruikerio", "rusichie", "cuanceeni", "cuikei", "uriseli", "ruiserii", "ruikesi", "ruikerio", "ruiqhi", "rumikeiu", "ruakeeni", "uuikerpi", "ruikesy", "ruikersi", "ruiciana", "rualtheni", "ruiserpi", "ruiciane", "rukeii", "rusikeri", "ruichie", "ruikuiu", "uricheini", "rukeio", "uuikeri", "gruikeian", "rnichei", "ruichy", "cuikeit", "ruiserli", "rualthl", "ruiskgi", "ruikuabi", "ruikerii", "ruanceit", "rusichi", "ruikesxi", "rukeian", "rumikei", "ruikeie", "ruicyxi", "ruaseiu", "ruisinegi", "ruikerabi", "ruikil", "cuikel", "ruikerpi", "uuikerabi", "ruicyii", "nuikehi", "nuikei", "rueikeiu", "ruakeli", "ruichii", "ruiquei", "urisey", "gruikerii", "nuixp", "rualthit", "ruiseri", "ruiseii", "uuikegi", "ruakeini", "ruikep", "ruikeini", "ruisinei", "ruikeruri", "ruikiii", "ruakey", "ruikehi", "ruisei", "ruiciani", "ruiky", "rueikuiu", "rumichis", "rumichiu", "uuisinei", "uuisinegi", "ruiseli", "nuikep", "ruikupi", "ruicyy", "ruikeiu", "ruiqueui", "ruikit", "uuikeii", "uuisineii", "ruichiu", "ruikexi", "ruiceii", "urikesi", "rnikesi", "rainikeoi", "ruiskio", "ruiki", "urikey", "urikeeni", "uranceii", "ruikee", "rnikei", "rusikeii", "ruisineii", "ruisergi", "ruiseiu", "urichepi", "ruikeui", "uriseii", "rainiqueui", "ruicei", "ruikeeni", "urancesi", "ruixhi", "ruacheie", "ruikerb", "rusikerl", "ruisereni", "ruikeli", "rueikeabi", "ruiqui", "ruiceiu", "rusikey", "urisei", "rusicyi", "rusikeb", "ruichei", "ruakep", "uuikeabi", "rusikexi", "ruicalii", "ruiseabi", "rusikei", "ruikis", "ruikuri", "ruikeri", "cuancei", "rukey", "ruikel", "ruakei", "ruicali", "ruiciansi", "ruikeabi", "rusichl", "gruikei", "ruikii", "rueikuli", "ruichis", "ruikeni", "ruikere", "rukexi", "ruichesi", "uuikeio", "ruikeii", "ruikey", "ruanceli", "ruachel", "rainikei", "ruikeio", "ruikeb", "cuancel", "ruasei", "ruikesli", "ruancesi", "uuikepi", "ruikuli", "nuixi", "ruikuuri", "urichei", "rnikea", "rnichea", "rueikeli", "ruichepi", "ruikui", "ruikerp", "ruancei", "gruikerian", "ruikeoi", "rumichy", "ruikeis", "ruicyi", "urancei", "ruicheui", "rusicyii", "rusikel", "ruisey", "ruichea", "rumichi", "rusikeie", "ruikie", "ruikessi", "ruixpi"], "j": ["ji", "o", "js", "k", "x", "_", "c", "d", "name", "ie", "int", "J", "jit", "y", "key", "g", "h", "index", "jl", "si", "u", "ja", "f", "je", "e", "b", "jj", "q", "im", "z", "v", "jp", "jam", "l", "m", "r", "ii", "aj", "li", "p"], "ans": ["Ann", "anus", "san", "aning", "nas", "aos", "ases", "ations", "ars", "ants", "ean", "an", "anc", "ads", " means", "ats", "ents", "anon", "ams", "sk", "na", "os", "acers", "anas", "ana", "An", "nan", "span", "can", "anes", "AN", "atan", "aned", "leans", "cas", "ANS", "ann", "lan", "ain", "ns", "lang", "errors", "ani", "aces", "ano", "ays", "annels", "yes", "aus", "ons"], "top_plus": ["toprettypos", "bottom_plus", "best_none", "best_minus", "bottom_minus", "bottom_include", "Top_plus", "best_plus", "best_pass", "top_self", "top_pos", "top_none", "Top_one", "Top_down", "Top_self", "Top_minus", "top_down", "bottom_pos", "toprettyminus", "top_include", "top_one", "toprettyplus", "toprettyinclude", "top_pass", "Top_none"], "top_minus": ["Top_mini", "top_negative", "bottom_plus", " top_down", "top_front", "Top_neg", "Top_negative", "bottom_minus", "Top_plus", "top_mini", "Top_down", "bottom_zero", " top_meta", "top_meta", "Top_minus", "top_down", "bottom_front", "top_zero", "top_neg"]}}
{"code": "import math\\n\\nclass Point:\\n    def __init__(self, x = 0.0, y = 0.0):\\n        self.x = x\\n        self.y = y\\n\\n    def __str__(self):\\n        return f\"{self.x:.8f} {self.y:.8f}\"\\n\\n\\ndef koch(d, l, r):\\n    if d == 0:\\n        return\\n\\n    s = Point()\\n    t = Point()\\n    u = Point()\\n    s.x = (2*l.x + 1*r.x) / (1 + 2)\\n    s.y = (2*l.y + 1*r.y) / (1 + 2)\\n    t.x = (1*l.x + 2*r.x) / (2 + 1)\\n    t.y = (1*l.y + 2*r.y) / (2 + 1)\\n    u.x = (t.x - s.x) * math.cos(math.radians(60)) - (t.y - s.y) * math.sin(math.radians(60)) + s.x\\n    u.y = (t.x - s.x) * math.sin(math.radians(60)) + (t.y - s.y) * math.cos(math.radians(60)) + s.y\\n\\n    koch(d - 1, l, s)\\n    print(s)\\n    koch(d - 1, s, u)\\n    print(u)\\n    koch(d - 1, u, t)\\n    print(t)\\n    koch(d - 1, t, r)\\n\\nn = int(input())\\nl, r = Point(), Point(100.0, 0.0)\\nprint(l)\\nkoch(n, l, r)\\nprint(r)\\n", "target": "280", "substitutes": {"self": ["home", "Self", "this", "k", "work", "_", "plus", "object", "er", "np", "ctx", "ws", "node", "event", "wrapper", "data", "sys", "pos", "instance", "args", "hand", "cache", "time", "python", "g", "os", "h", "static", "parent", "worker", "py", "master", "host", "me", "e", "func", "ps", "ns", "base", "resp", "q", "w", "m", "now", "p", "user"], "x": ["ey", "type", "xi", "c", "ph", "time", "xxx", "h", "rx", "fx", "f", "dx", "shape", "base", "z", "lat", "m", "right", "io", "p", "ext", "east", "full", "px", "data", "ye", "id", "dy", "width", "get", "na", "gy", "yx", "ix", "ox", "py", "max", "cross", "length", "ady", "height", "cy", "xy", "point", "yi", "int", "yl", "man", "i", "image", "xe", "index", "ex", "xc", "e", "X", "xx", "wx", "v", "xs", "o", "ya", "name", "value", "ux", "Y", "tx", "key", "on", "min", "g", "ax", "xt", "xd", "one", "b", "w", "pe"], "y": ["ery", "ey", "type", "sy", "c", "ry", "h", "ym", "f", "z", "lat", "m", "p", "sky", "up", "yu", "err", "oy", "a", "yo", "year", "ye", "zy", "ch", "id", "dy", "yan", "gy", "ay", "ix", "py", "ish", " Y", "hot", "ady", "height", "wy", "hy", "iy", "cy", "yi", "xy", "ky", "ny", "long", "yl", "i", "yr", "index", "ies", "lon", "yt", "e", "X", "yd", "yy", "yang", "ya", "Y", "ty", "asy", "ys", "b", "my", "w", "any", "yer", "vy"], "d": ["df", "di", "o", "dom", "D", "dt", "dos", "k", "j", "c", "de", "data", "nd", "da", "i", "id", "sd", "dy", "g", "fd", "dim", "ds", "do", "md", "dc", "dp", "days", "e", "f", "dx", "dd", "b", "ad", "dl", "q", "w", "dict", "z", "p", "v", "m", "did", "dat", "ld"], "l": ["el", "ls", "o", "loc", "k", "ol", "le", "al", "ul", "c", "left", "kl", "ell", "sl", "ll", "ly", "L", "i", "g", "en", "h", "ml", "line", "lr", "nl", "lin", "il", "f", "e", "rl", "b", "pl", "dl", "w", "z", "v", "lc", "li", "m", "lu", "ln", "p"], "r": ["rs", "o", "k", "rd", "err", "j", "c", "er", "R", "ar", "ro", "ry", "re", "rh", "mr", "rb", "range", "rf", "i", "yr", "rt", "g", "rg", "ir", "h", "rar", "dr", "lr", "pr", "ur", "nr", "usr", "e", "f", "rl", "rr", "b", "hr", "gr", "q", "w", "nor", "z", "cr", "v", "m", "right", "ru", "fr", "p", "rc", "sr"], "s": [" samples", "sy", "su", "sin", "c", "results", "ar", "ows", "h", "st", "ur", "f", "us", "ns", "sv", "z", "less", "m", "right", "its", "p", "js", "k", "ings", " returns", "ws", "a", "sys", "ss", "sl", "an", "space", "cs", "rows", "sym", "ish", "sh", "hs", " results", "ls", "fs", "S", "sp", "i", "ds", "lines", "sq", "south", "sets", "e", "ps", "ans", "so", "es", "v", "xs", "ing", "rs", "o", "ances", "g", "os", "sa", "ts", " S", "si", " inputs", "ys", "b", "q", "w", "se"], "t": ["it", "o", "type", "at", "dt", "k", "qt", "out", "j", "tu", "c", "tool", "to", "ht", "ut", "a", "T", "int", "ot", "all", "i", "test", "rt", "g", "ty", "ant", "h", "ts", "tt", "ct", "tf", "set", "the", "st", "yt", "ur", "f", "e", "nt", "b", "pt", "q", "w", "ta", "z", "lat", "v", "te", "m", "p", "tn"], "u": ["U", "o", "it", "k", "su", "tu", "ul", "c", "ut", "a", "ui", "i", "g", "os", "h", "un", "nu", "ur", "cu", "iu", "f", "e", "mu", "b", "us", "so", "uu", "q", "w", "z", "v", "m", "lu", "p", "up", "ou"], "n": ["o", "k", "j", "c", " N", "a", "num", "i", "na", "nn", "len", "f", "e", "b", "ns", "sn", "no", "z", "v", "m", "nc", "p", "ne", "N"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**6)\\n\\ns = input()\\n\\nans = [0]*len(s)\\n\\ni = 0\\nlen_left = 1\\nlen_right = 0\\nintersec_left = 0\\nnow_left = True\\n\\nwhile i < len(s)-1:\\n    if s[i] == s[i+1] and now_left:\\n        len_left += 1\\n    elif s[i] != s[i+1] and now_left:\\n        len_right += 1\\n        intersec_left = i\\n        now_left = False\\n    elif s[i] == s[i+1]:\\n        len_right += 1\\n    else:\\n        if len_left%2 == 0:\\n            ans[intersec_left] += len_left//2\\n            ans[intersec_left+1] += len_left//2\\n        else:\\n            ans[intersec_left] += len_left//2+1\\n            ans[intersec_left+1] += len_left//2\\n        if len_right%2 == 0:\\n            ans[intersec_left] += len_right//2\\n            ans[intersec_left+1] += len_right//2\\n        else:\\n            ans[intersec_left] += len_right//2\\n            ans[intersec_left+1] += len_right//2+1\\n        len_left = 1\\n        len_right = 0\\n        intersec_left = i+1\\n        now_left = True\\n    i += 1\\nelse:\\n    if len_left%2 == 0:\\n        ans[intersec_left] += len_left//2\\n        ans[intersec_left+1] += len_left//2\\n    else:\\n        ans[intersec_left] += len_left//2+1\\n        ans[intersec_left+1] += len_left//2\\n    if len_right%2 == 0:\\n        ans[intersec_left] += len_right//2\\n        ans[intersec_left+1] += len_right//2\\n    else:\\n        ans[intersec_left] += len_right//2\\n        ans[intersec_left+1] += len_right//2+1\\n    \\nprint(*ans)", "target": "722", "substitutes": {"s": ["states", "services", "o", "parts", "ls", "S", "sync", "ssl", "input", "su", "ings", "sin", "c", "d", "slice", "ins", "ses", "a", "sys", "ss", "als", "times", "n", "args", "qs", "an", "space", "t", "strings", "cs", "y", "ats", "g", "os", "ds", "sample", "ks", "server", "source", "gs", "sites", "sq", "south", "si", "u", "sets", "e", "f", "settings", "ys", "b", "ns", "es", "sb", "ions", "aces", "w", "l", "less", "sg", "v", "m", "r", "xs", "its", "p", "aws"], "ans": ["atts", "events", "nas", "aos", "amps", "args", "en", "can", "arts", "cas", "aned", "ANS", "ns", "ares", "aus", "std", "ras", "a", "ss", "vs", "ens", "an", "ads", "ents", "na", "anas", "ks", "nan", "antes", "ann", "chan", "ani", "annels", "cross", "groups", "eps", "aps", "ls", "asses", "eds", "ass", "ars", "anc", "A", "man", "ats", "anon", "ds", "ana", "span", "cons", "lines", "anne", "ps", "ands", "es", "ays", "params", "acs", "rss", "ons", "yrs", "cus", "angs", "anus", "ins", "orks", "reads", "vers", "ants", "ops", "outs", "oss", "ams", "os", "ant", "names", "cos", "ions", "ai", "aces", "ano"], "i": ["pi", "it", "di", "uri", "o", "x", "xi", "j", "c", "gi", "anti", "ci", "d", "slice", "yi", "a", "io", "ie", "start", "ori", "name", "cli", "int", "ind", "n", "ui", "ini", "t", "ni", "bi", "id", "y", "info", "key", "inner", "ski", "ix", "index", "source", "multi", "eni", "si", "u", "iu", "e", "f", "I", "ti", "b", "my", "max", "im", "ai", "z", "qi", "l", "v", "ii", "lc", "m", "li", "p"], "len_left": ["len96control", "style1282", "len_center", "en_full", "len1left", "len96left", "length53wrong", "len2all", "en_control", "len2cost", "lin_right", "lenxright", "len53right", "len128left", "len96right", "len_less", "len96low", "len___Left", "len_low", "en_low", "len_inner", "ln_full", " len_cost", "len36right", "len2low", "len_full", "en_inner", "en_Left", "ln_left", "lenxinner", "len___lower", "lenJleft", "length53left", "ln_bottom", "lenJright", "len36two", " len_width", "lenaclow", "len_lower", "len00right", "len22", "lenxleft", "length53right", " len_all", "len36lower", "len53width", "lin_left", "len24plus", "len53left", "len___left", "len2right", "len53wrong", "len1full", "style128center", "style_center", "en_right", "len___less", "lin_low", "lenJlow", "len_all", "length_wrong", "len_bottom", "lenacbottom", "len00left", "len2left", "len00wrong", "style_2", " len_low", "len36width", "length_right", "lenacleft", "len1bottom", "len_control", "lenxfull", "len00width", "lin_plus", "lenaccontrol", "len24two", "style_right", "style128left", "len53full", "length53width", "en_6", "len___right", "len_plus", "ln_right", "style128right", "len_65", "lenacfull", "len2center", "en_less", "en_left", "en_65", " len_lower", "len24left", "len___width", "len_wrong", "len1282", "len1right", "len24low", "len128center", "en_two", "len128right", "len_cost", "length_left", "len_2", "length_width", "len_width", "style_left", "len_6", "len_Left", "len36left", "lenJcost", "lenacright", "len24right", "len36low", "len_two", "len536"], "len_right": ["lin2plus", "len8right", "ren_different", "len_center", "len54round", "len_value", "lenNplus", "len___center", "len_03", "layer33bottom", "len53correct", "len54plus", "Len_rights", "name8bottom", "lenNround", "len203", "lin_right", "len33rest", "lenxright", "len5right", "len53right", "len32reverse", "size53rh", "len9center", "ren_reverse", "size_correct", "len_37", "len_Right", "ren_right", "len_wall", "ln_cross", "len54reverse", "len25right", "Len_left", "len36right", "name_bottom", "lin_center", "lenJcorrect", "len33right", "lenJ37", "lenxwall", "size53center", "len36reverse", "layer33rest", "ln_left", "len24cross", "len9west", "len_reverse", "len5bottom", "lenJleft", "len54rest", "len27center", "Len_03", "len53rh", "ren36rest", "len27west", "layer33right", "lenNright", "len36different", "layer_bottom", "layer_right", "lenJright", "len_error", "size53correct", "len_rw", "late_right", "lenxleft", "len25rest", "ln_rights", "len_rad", "len___staff", "len24rights", "len33rad", "lateJright", "len___left", "Len_right", "len36rest", "len2right", "ren36right", "len___correct", "len54different", "late_37", "Len_staff", "len54right", "len2error", "size_center", "len25different", "ln_value", "lin_error", "len25wall", "late_left", "len2rights", "ln_different", "len_bottom", "len2left", "len36bottom", "ren36different", "len54error", "layer_rad", "lenacvalue", " len_plus", "len_west", "len_staff", "len___Right", "len_round", "len64right", "len53center", "lateJ37", "lenacleft", "len5rw", "late_correct", "len27right", " len_rw", "lin_plus", "lin2round", "layer_rest", "len64plus", "len32right", "layer33rad", "len_cross", "len___rh", "len___right", "len_rights", "len_plus", "ln_right", "len32different", "len9rights", "Len_Right", "len_correct", "lin_rights", "ln_wall", "len5left", "len25left", "name_right", "name_rest", "len33bottom", " len_bottom", "len24left", "lenNerror", "size_right", "lenxdifferent", "len2plus", "size53right", "len25rad", "len_rh", "lin2right", "size_rh", "ren_rest", "len25bottom", "name8right", "ren36reverse", "lin_west", "len_different", "len9right", "len27rights", "name8rest", "len2round", "lin_round", "len64left", "lin2error", "lenacrw", " len_Right", "lateJcorrect", "lenacright", "len8rest", "len2Right", "len64Right", "len32rest", "lateJleft", "len24right", "len8bottom", "len_rest", "ln_rw"], "intersec_left": ["intersecpylen", "interry_side", "interrclaneload", "intersecacload", "interceptlexleft", "intersec_len", "intersecacshell", "interrc_shell", "interseclexlen", "interior_left", "intersecjcenter", "intersecjleave", "interrclaneleft", "interseq_low", "intersec_small", "intersec_global", "interseclanepl", "interec_center", "interrclanelast", "intersecendiff", "interrecy_center", "interseclaneside", "interseqpylow", "intersecpylocal", "intersecpyfull", "interseqpyleft", "interflowjlock", "interrecy_bottom", "intersec_full", "interrclaneshell", "interchron_staff", "intersecingstaff", "interflow_lock", "interputjlow", "interrylaneleft", "interseclaneload", "intersec_last", "interrecy\u00b7bottom", "interrylanefound", "intersecpleave", "interseclexlast", "intersec_found", "interchron_left", "intersecpycenter", "interror_local", "intersec\u00b7bottom", "interrance_leave", "intersec_member", "intersec_Left", "interputjpl", "intersecpybottom", "intercept_staff", "intersect_left", "interseclanelast", "intersecenleft", "interseqpylen", "intersec\u00b7left", "interrorlanehalf", "interrc_left", "interceptlexcenter", "intersec_side", "interranceistleft", "intersecpleft", "intersecure_left", "intersecjle", "intersecinghalf", "interflowjleave", "intersec2left", "intersecpysearch", "interiorlanejoined", "intersecjleft", "intersecpylast", "interiorlanesmall", "intersec_half", "interec_left", "interreal_low", "interrecy\u00b7center", "intersec_center", "interrylaneinner", "intersec_one", "interseclanelocal", "interreal_bottom", "interseqpystaff", "intersecjpl", "interseclanehalf", "interiorlaneleft", "interror_member", "interranceistleave", "interry_found", "interror_coll", "intersec_load", "interranceiststaff", "interrorlanelocal", "interror_found", "intersec\u00b7center", "interseclexcenter", "intersecpystaff", "interseclanejoined", "intersec_plus", "interrealpysearch", "intersecjlock", "interror_last", "interseq_left", "intersecpylow", "interranceistjoined", "interseclexcl", "intersecure_plus", "intersecpylock", "intercept_last", "intersecingLeft", "intersecpyhalf", "interior_joined", "intersecure_global", "interrealpybottom", "intersecingleft", "intersecingcenter", "interrecy_left", "intersect_l", "interrealpyleft", "intersecacleft", "intersect_joined", "interseclaneinner", "interry_left", "intercept_center", "intersec_low", "intersecjlow", "interflowjleft", "interrecy\u00b7cl", "interrc_last", "intersecpjoined", "intersec2right", "interrance_staff", "interrance_left", "intersec_le", "intersec_joined", "interput_pl", "interseclexstaff", "interseciststaff", "interec_lock", "interputjleft", "interrorlaneleft", "intersecure_l", "intersecistleave", "intersect_right", "interchron_full", "intersecpstaff", "interchron_leave", "interseclexleft", "interflow_le", "interflow_left", "interrealpylow", "intersector_right", "interror_half", "intersecenleave", "intercept_left", "interflow_leave", "interrylaneside", "interflowjle", "interchron_diff", "intersec_staff", "intersec_diff", "interrance_joined", "interrc_load", "intersec_lock", "intersec_search", "intersecenright", "interseclexbottom", "interrorlanelast", "intersec_right", "interseclanefound", "interry_inner", "interchron_bottom", "intersec_l", "interput_low", "interseclaneleft", "intersec_bottom", "interrecy_cl", "interior_small", "interseclaneshell", "interceptlexstaff", "interseclanesmall", "interseclanecenter", "interputjcenter", "interseclanelow", "interchron_half", "intersec2one", "interseclexlow", "intersec_cl", "intersec_shell", "intersec\u00b7cl", "interput_center", "interseq_staff", "interror_left", "intersec_pl", "intersecaclast", "interseq_len", "interrecy\u00b7left", "interchron_cl", "intersector_left", "intersec_coll", "intersec_inner", "intersecistleft", "interec_full", "intersecistjoined", "intersector_one", "interreal_left", "interput_left", "intersecpyleft", "intersec_local", "interreal_search", "intersec_leave", "interchron_Left", "interceptlexlast", "interchron_right", "intersecinglast"], "now_left": ["nowAright", "nowPartwo", "now_el", "now_wrong", "before_last", " now_right", " now_leave", "now_two", "nowAlast", "nowallwrong", "nowacLeft", "found_bottom", "now_last", "foundallbottom", "nowParleft", "info_left", "now_Left", "now_leave", "nowParright", "foundallcontrol", "info_staff", "beforeAright", "nowacleft", "nowallbottom", "beforeAlast", "nowacleave", "nowParlast", "now_bottom", "now_staff", "nowambottom", "nowAleft", "nowlycontrol", "found_wrong", "nowlyleft", "beforeAleft", "nowParagain", "foundallwrong", "nowAtwo", "before_left", "before_right", "beforeAtwo", "now_control", "now_again", "nowallleft", "info_leave", "found_control", "nowParleaf", "found_left", "nowacright", "info_el", " now_leaf", "nowlywrong", "now_right", "nowingleave", "nowingstaff", "nowamleft", "nowallcontrol", "now_leaf", "nowamwrong", "nowingleft", "nowlybottom", "before_two", " now_Left", "nowamcontrol", "nowingel", "foundallleft", " now_again"]}}
{"code": "n,m = map(int,input().split())\\n# 1\u30b1\u30fc\u30b9\u3067\u304b\u304b\u308b\u6642\u9593\u3092\u6c42\u3081\u308b\\ntotal = m*1900 + (n-m)*100\\n# \u5168\u3066\u306e\u30b1\u30fc\u30b9\u3067\u6b63\u89e3\u3059\u308b\u78ba\u7387\u306e\u5206\u6bcd\\nprob_all = 2**m\\nprint(total * prob_all)", "target": "308", "substitutes": {"n": ["o", "k", "x", "c", "nm", "node", "nb", "name", "num", "i", "mn", "na", "network", "nn", "number", "fn", "f", "e", "ns", "z", "l", "v", "r", "nc", "p", "ne", "N"], "m": ["o", "k", "j", "c", "d", "t", "i", "y", "h", "ms", "ym", "md", "month", "e", "f", "mu", "sym", "b", "mi", "mm", "pm", "w", "z", "v", "r", "M", "p"]}}
{"code": "n = int(input())\\nA = [int(input()) for _ in range(n)]\\n\\nB = []\\nimport bisect\\nfor i, a in enumerate(A):\\n    if len(B) == 0:\\n        B.append(-a)\\n    else:\\n        j = bisect.bisect_right(B, -a)\\n        #print(j)\\n        if j == len(B):\\n            B.append(-a)\\n        elif j == 0:\\n            B[0] = -a\\n        else:\\n            B[j] = -a\\n    #print(B)\\n#print(B)\\nprint(len(B))\\n", "target": "245", "substitutes": {"n": ["o", "k", "x", "c", "np", "d", "nb", "data", "ny", "num", "an", "t", "y", "g", "network", "nan", "span", "number", "size", "f", "b", "ns", "z", "l", "m", "r", "nc", "p", "ne", "N"], "A": ["As", "Ca", "NA", "II", "D", "S", "E", "Alpha", "CA", "All", "T", "At", "Y", "L", "G", "Ab", "BA", "SA", "An", "AP", "Ar", "I", "AA", "b", "The", "C", "App", "AST", "P", "AF", "API", "AB", "Input", "M", "AC", "F", "N", "LA"], "_": ["x", " time", "all", "num", "non", "val", " seq", "len", "f"], "B": ["U", "EB", "D", "S", "Builder", "BS", "BF", "R", "E", "LB", "BB", "T", "UB", "W", "J", "TB", "Y", "L", "G", "NB", "Ab", "BA", "Body", "PB", "OB", "BI", "RB", "Q", "Bs", "BL", "GB", "DB", "WB", "I", "b", "X", "C", "SB", "V", "MB", "P", "K", "AB", "O", "H", "M", "F", "N"], "i": ["pi", "o", "x", "xi", "c", "ci", "ri", "io", "ini", "ni", "bi", "info", "ia", "index", "ip", "si", "iu", "e", "I", "ti", "ai", "v", "l", "ii", "li", "ei", "p"], "a": ["area", "x", "c", "ar", "d", "ak", "ac", "ab", "wa", "art", "af", "pa", "da", "an", "fa", "y", "alpha", "na", "sa", "ax", "ana", "aa", "u", "va", "e", "f", "ad", "b", "am", "ai", "ae", "w", "z", "ba", "ea", "aj", "p", "arg", "au"], "j": ["it", "ji", " J", "o", "k", "data", "ind", "J", "L", "na", "g", "ij", "index", "jl", "br", "ja", "f", "obj", "adj", "jj", "Ja", "IJ", "l", "jp", "aj", "m", "p"]}}
{"code": "x = int(input())\\na = int(input())\\nb = int(input())\\n\\nmoney = x - a\\nrimining_money = money % b\\n\\nprint(rimining_money)", "target": "98", "substitutes": {"x": ["xi", "px", "c", "cy", "d", "xy", "n", "an", "A", "xxxxxxxx", "i", "y", "alpha", "xxx", "g", "xa", "ax", "h", "xe", "xxxx", "rx", "number", "xc", "e", "f", "X", "xx", "base", "ca", "wx", "z", "ba", "v", "cross", "m", "xs", "p"], "a": ["ma", "area", "xi", "c", "aw", "d", "ac", "aux", "af", "n", "da", "an", "array", "A", "fa", "i", "y", "alpha", "na", "xa", "sa", "g", "ax", "abc", "ia", "index", "aa", "aff", "va", "am", "ad", "ca", "ga", "ae", "aaa", "ba", "ea", "p", "au"], "b": ["o", "c", "cy", "d", "cb", "ab", "B", "bc", "n", "xb", "business", "s", "A", "i", "y", "dy", "g", "fb", "ib", "u", "e", "f", "ad", "ca", "base", "sb", "w", "z", "ba", "v", "bb", "m", "bf", "r", "p"], "money": ["mini", "o", "currency", "ban", "mc", "cy", "buy", "amount", "angle", "paid", "value", "go", "an", "margin", "weight", "y", "fine", "very", "total", "alpha", "machine", "pay", "big", "number", "error", "Money", "dollar", "mega", "base", "euro", "qq", "volume", "iban", "q", "w", "fee", "company", "m", "border", "p", "mix"], "rimining_money": ["rimningingamount", "rimining_price", "riminating_price", "rimining_comment", "riminingingcurrency", "rimining_currency", "rimningingcurrency", "rimning_currency", "riminating_money", "rimining_amount", "riminingingmoney", "rimning_amount", "riminating_amount", "rimningingcomment", "rimning_money", "riminingingamount", "rimningingmoney", "riminingingcomment", "rimning_comment"]}}
{"code": "def resolve():\\n    '''\\n    code here\\n    '''\\n\\n    N, M = [int(item) for item in input().split()]\\n    A = [input() for _ in range(N)]\\n    B = [input() for _ in range(M)]\\n\\n    is_found = False\\n    for i in range(N-M+1):\\n        temp_line = A[i:i+M]\\n        for j in range(N-M+1):\\n            temp_grid = [line[j:j+M] for line in temp_line]\\n            # print(temp_grid)\\n            if B == temp_grid:\\n                is_found = True\\n                break\\n        if is_found:\\n            break\\n\\n    print('Yes') if is_found else print('No')\\n\\nif __name__ == \"__main__\":\\n    resolve()\\n", "target": "483", "substitutes": {"N": ["ND", "U", "Multi", "NA", "D", "S", "GN", "R", "NS", "NC", "NE", "Ns", "T", "n", "J", "W", "Y", "L", "Wh", "Len", "Num", "Part", "NB", "NT", "NM", "Size", "NN", "MN", "No", "Q", "I", "X", "C", "Na", "Ne", "V", "OS", "P", "K", "KN", "O", "H", "F", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "FM", "T", "W", "J", "n", "Y", "L", "G", "DM", "RM", "NM", "MD", "Many", "MS", "MN", "Q", "MON", "I", "X", "C", "JM", "HM", "V", "MB", "P", "MM", "K", "EM", "VM", "SM", "MT", "m", "O", "H", "Mi", "F", "CM", "IM", "MF", "Z"], "item": ["unit", "it", "step", "loc", "o", "element", "k", "x", " it", "om", "name", "data", "int", "n", "num", "id", "entry", "g", "iter", "atom", "Item", "index", "ip", "items", "u", "adj", "X", "mm", "other", "q", "im", "article", "r", "m", "order", "p", "temp"], "A": ["AR", "U", "As", "NA", "D", "S", "R", "E", "a", "T", "J", "At", "Y", "AD", "AM", "G", "L", "AS", "SA", "AP", "Ar", "I", "AA", "X", "C", "MA", "V", "P", "AF", "K", "O", "AC", "AW", "F", "LA"], "_": ["out", "x", "long", "non", "val", "en", "word", "un", "len", "f", "place", "flow", "block"], "B": [" b", "D", "BS", "BF", "BM", "E", "Bi", "BB", "W", "J", "Y", "G", "L", "NB", "BA", "BI", "GB", "Bs", "WB", "CB", "I", "b", "C", "P", "BC", "AB", "O"], "is_found": [" is_matched", "is_matched", "is_Found", " is_find", "is_find", " is_Found"], "i": ["pi", "o", "ji", "k", "x", "xi", "c", "gi", "ci", "d", "yi", "oi", " I", "ri", "io", "ie", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", "index", "ip", "si", "u", "iu", "e", "mu", "I", "f", "b", "ti", "mi", "ki", "im", "ai", "z", "l", "v", "ii", "li", "m", "p"], "temp_line": ["temp_node", "temp7grid", " temp_block", "temp_block", "temp7node", "temp7block", " temp_node", " temp_file", "temp_file", "temp7line"], "j": ["it", "ji", "o", "k", "x", "c", "d", "oi", "col", "int", "n", "J", "y", "g", "h", "ij", "un", "index", "si", "u", "f", "I", "e", "end", "b", "jj", "q", "im", "z", "v", "jp", "l", "ii", "m", "r", "li", "p", "block"], "temp_grid": ["temp\u00b7grid", "temp_row", "temp_map", "tem_grid", "tem_row", "temp\u00b7row", "temp\u00b7map", "tem_map", "tem_line", "temp\u00b7line"], "line": ["unit", "area", "use", "o", "case", "x", "cycle", "d", "point", "Line", "col", "LINE", "int", "grid", "n", "ge", "range", "band", "cell", "source", " Line", "lines", "number", "model", "row", "ine", "lin", "len", "f", "inline", "end", "code", "car", "edge", "l", "lined", "m", "li", "p", "block"]}}
{"code": "O = input()\\nE = input()\\nans = \"\"\\nfor i in range(len(E)):\\n  ans+=O[i]\\n  ans+=E[i]\\n  \\nif len(O)>len(E):\\n  ans+=O[len(O)-1]\\n\\nprint(ans)", "target": "102", "substitutes": {"O": ["U", "OE", "o", "SO", "OO", "D", "EO", "LO", "OD", "OTO", "Do", "PO", "B", "OH", "Lo", "T", "DO", "GO", "Y", "A", "L", "OF", "Ob", "OA", "OB", "ES", "Os", "IO", "I", "X", "OME", "C", "OU", "V", "OS", "P", "ONE", "OX", "M", "ON", "F", "FO", "N"], "E": ["U", "OE", "D", "EO", "S", "R", "Other", "Ed", "EF", "T", "W", "Ec", "Es", "Y", "A", "L", "G", "EH", "EU", "EA", "El", "ES", "ME", "e", "I", "AE", "X", "C", "OU", "IE", "PE", "V", "ONE", "P", "EC", "EE", "M", "F", "pe", "N"], "ans": ["x", "aning", "anned", "ras", "nas", "ins", "ases", "a", "ars", "ants", "any", "amps", "ens", "args", "all", "an", "anc", "s", "ean", " means", "ats", "ents", "anon", "sk", "na", "os", "en", "plan", "anas", "aus", "ks", "nan", "An", "ana", "nn", "can", "anes", "lines", "AN", "atan", "aned", " Ans", "leans", "ANS", "cas", "anne", "ann", "lan", "ns", "ane", "ands", "es", "ani", "aces", "ano", "ays", "annels", "cross", "eps", "han", "ons"], "i": ["pi", "di", "o", "type", "k", "x", "xi", "j", "gi", "c", "ci", "d", "ri", "a", "io", "start", "pos", "int", "ind", "n", "num", "ini", "ui", "ni", "bi", "id", "val", "ix", "index", "eni", "si", "u", "e", "I", "ti", "f", "b", "mi", "ki", "ai", "qi", "l", "v", "ii", "li", "m", "p"]}}
{"code": "S, W = map(int,input().split())\\nans = \"safe\"\\nif(S<=W):\\n  ans = \"unsafe\"\\nprint(ans)", "target": "585", "substitutes": {"S": ["U", "D", "SS", "R", "NS", "SK", "SY", "B", "T", "s", "Y", "A", "L", "G", "SN", "DS", "SA", "MS", "Q", "I", "X", "SU", "C", "V", "OS", "P", "K", "SP", "O", "H", "M", "F", "N"], "W": ["GW", "U", "TW", "SH", "BW", "R", "Weight", "B", "WR", "T", "EW", "Y", "G", "L", "Wh", "WP", "NW", "FW", "Q", "WA", "WC", "WS", "WB", "X", "SW", "C", "CW", "V", "w", "We", "P", "MW", "H", "VW", "M", "F", "WE", "AW", "N", "Z"], "ans": ["asses", "anus", "san", "aning", "anned", "ras", "nas", "ins", "ases", "aos", "ars", "ants", "ens", "ean", "an", "anc", "man", "ats", "asts", "ents", "tan", "na", "comments", "anas", "plan", "anse", "ana", "nan", "anes", "can", "AN", "atan", "aned", "leans", "ANS", "ann", "lan", "ns", "ane", "ani", "aces", "ays", "ares", "eps", "aus", "ons"]}}
{"code": "import collections\\nimport heapq\\nimport copy\\nn,m,p = map(int,raw_input().split(' '))\\n\\nadj = collections.defaultdict(list)\\ndef f(e,p):\\n\tu,v,w = e\\n\treturn (u,v,p-w)\\n\\nedges = [f(map(int, raw_input().split()), p) for _ in range(m) ]\\n\\nfa = collections.defaultdict(list)\\nba = collections.defaultdict(list)\\nfor u,v,_ in edges:\\n\tfa[u].append(v)\\n\tba[v].append(u)\\ndef dfs(u,adj,vis):\\n\tstack = collections.deque([u])\\n\twhile(stack):\\n\t\tuu = stack.pop()\\n\t\tvis.add(uu)\\n\\n\t\tfor v in adj[uu]:\\n\t\t\tif v not in vis:\\n\t\t\t\tvis.add(v)\\n\t\t\t\tstack.append(v)\\nva = set([1])\\ndfs(1, fa, va)\\n\\nvb = set([n])\\ndfs(n, ba, vb)\\n\\nh = {u: (+float('inf') if u > 1 else 0) for u in range(1, n + 1)}\\n\\nfor _ in range(n-1):\\n\tfor u,v,w in edges: h[v] = min(h[v], h[u] + w)\\n\\nfnc = False\\nfor u,v,w in edges: \\n\tif v in va and v in vb and h[v] > h[u] + w:\\n\t\tfnc = True\\n\t\tbreak\\nprint max(0,-h[n]) if (not(fnc) and h[n] != +float('inf')) else -1", "target": "88", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", " N", "nb", "a", "num", "s", "an", "t", "i", "y", "mn", "g", "min", "en", "nn", "un", "nu", "size", "len", "net", "f", "nt", "b", "ns", "sn", "no", "z", "l", "r", "nc", "ln", "ne", "N"], "m": ["pi", "o", "mc", "k", "x", "j", "tm", "c", "fm", "om", "d", "nm", "i", "y", "mn", "g", "ms", "md", "em", "mu", "b", "mm", "im", "pm", "z", "dm", "l", "r", "M", "bm"], "p": ["pi", "tp", "o", "pid", "k", "x", "j", "c", "sp", "d", "a", "pos", "pa", "per", "t", "i", "y", "cp", "py", "pp", "f", "b", "ps", "pn", "q", "P", "z", "pm", "pu", "l", "jp", "pc", "r", "pe", "fp"], "adj": ["note", "area", "di", "ji", "inv", "extra", "j", "aja", "nav", "np", "nb", "dat", "dev", "app", "ab", "ind", "adv", "ali", "ni", "bi", "arr", "api", "na", "ax", "en", "ana", "bl", "span", "fake", "aff", "avi", "si", "zip", "anda", "obj", "ann", "ad", "ns", "adi", "ai", "ani", "ae", "jp", "aj", "ii", "order", "ap", "vi"], "e": ["el", "ze", "o", "eu", "k", "element", "ke", "x", "j", "c", "d", "E", "a", "ie", "s", "t", "i", "y", "ec", "fe", "g", "en", "ee", "f", "ed", "b", "end", "edge", "es", "ae", "z", "l", "ea", "r", "se", "pe", "ne"], "u": ["U", "o", "eu", "k", "x", "su", "ul", "tu", "c", "uv", "gu", "d", "a", "hu", "uc", "user", "s", "ui", "t", "i", "y", "uni", "g", "ue", "chu", "un", "itu", "nu", "umi", "cu", "iu", "ur", "fu", "f", "mu", "b", "us", "bu", "Lu", "q", "una", "pu", "l", "uid", "li", "lu", "ru", "up", "ou", "ud", "ku"], "v": ["U", "o", "k", "ve", "x", "j", "uv", "c", "ul", "cv", "d", "um", "ver", "a", "value", "vv", "vs", "vin", "s", "vp", "ov", "t", "av", "var", "ui", "i", "y", "g", "tv", "val", "ue", "vert", "conv", "en", "lv", "erv", "vc", "iv", "nov", "ur", "qv", "f", "b", "vu", "ev", "q", "V", "sv", "z", "nv", "l", "ii", "li", "r", "ou", "vi", "ud"], "w": ["o", "iw", "k", "fw", "x", "wl", "work", "c", "wan", "way", "d", "ws", "a", "wa", "wed", "W", "ww", "wt", "s", "t", "weight", "tw", "y", "wave", " W", "wd", "width", "sw", "g", "we", "word", "ew", "rw", "wn", "wb", "max", "b", "q", "P", "z", "l", "r", "wh"], "edges": ["edGES", "inedges", "ledge", "ledGES", "edgs", "ledged", "ledges", " edgets", " edgments", "nedge", "nedgets", "endedges", "nedGES", "inedge", "pedged", "inedgs", "pedges", "edgments", " edge", "EdGES", "endedge", "Edged", "Edgs", "inedgments", "pedge", "Edges", "ledgets", "Edge", "nedges", "edged", "pedgments", "edge", "ledgments", "endedgs", "Edgments", "Edgets", "endedgments", "edgets"], "_": ["k", "out", "x", "fw", "j", "ac", "__", " time", "W", "all", "non", "on", "time", "g", "en", " x", "un", "ip", " seq", "flow", "max", "end", "new", "other", "q", "z", "up", "rank"], "fa": ["ma", "ha", "afa", "afi", "a", "wa", "ac", "fl", "af", "pa", "da", "bi", "ppa", "alpha", "na", "qa", "sa", "xa", "fb", "ana", "ia", "aa", "la", "aff", "ava", "ja", "fi", "f", "b", "ca", "ga", "ai", "ta", "aaa", "ea", "au"], "ba": ["Ba", "ha", "ab", "a", "wa", "ac", "bc", "lla", "pa", "da", "bi", "bs", "na", "xa", "sa", "BA", "qa", "abc", "ana", "aa", "la", "ava", "ja", "b", "ca", "aba", "ga", "ai", "ae", "ta", "asa", "aaa", "ea", "au"], "vis": ["di", "Vis", "ha", "exp", "nav", "close", "layout", "voc", "wa", "vid", "diff", "vs", "pos", "switch", "view", "virt", "list", "cache", "vim", "config", "vi", "ali", "press", "loop", "circ", "keep", "na", "qa", "map", "views", "gui", "vert", "iter", "image", "ravis", "acc", "ip", "fake", "host", "stat", "zip", "graph", "ava", "ps", "store", "sign", "ii", "skip", "visible", "miss", "prev", "temp", "flow", "block", "see"], "stack": ["history", "use", "loc", "case", "sync", "c", "cycle", "slice", "layout", "left", "back", "coll", "context", "uc", "fl", "queue", "scope", "sl", "ind", "view", "switch", "reverse", "list", "cache", "space", "config", "array", "ali", "leaf", "loop", "roll", "circ", "push", "qa", "ack", "pack", "live", "iter", "bl", "acc", "index", "box", "st", "batch", "fake", "Stack", "la", "function", "tree", "lock", "stage", "white", "q", "counter", "layer", "chain", "l", "holder", "lc", "sc", "flat", "flow", "cl"], "uu": ["U", "eu", "uri", "su", "kk", "uv", "ul", "cv", "gu", "hu", "uc", "vv", "du", "ui", "uni", "ug", "ue", "nu", "ua", "cu", "uum", "iu", "bu", "uf", "uz", "vu", "uy", "uh", "una", "uid", "lu", "ru", "ou", "ud", "ku"], "va": ["ma", "ha", "ya", "afa", "a", "wa", "af", "lla", "pa", "da", "av", "cca", "na", "qa", "sa", "BA", "xa", "ana", "ia", "ra", "ua", "aa", "la", "ava", "ja", "oa", "Va", "ca", "VA", "ga", "aba", "ai", "ta", "asa", "aaa", "ea", "ka", "au"], "vb": ["wp", "vinb", "ha", "hbb", " vbar", "vinbar", "Vh", "wbar", "cb", " vbb", "vinp", "vbb", "vh", " vc", "Vb", "hp", "vp", "Vbb", "ch", "vbar", "hb", "vinc", " vp", "vbs", "vc", "wb", "Vbs", "Va", "ca", "cbs", " vbs", "wc", "Vp", " vh"], "h": ["hl", "o", "home", "ha", "k", "http", "x", "oh", "j", "c", "hw", "d", "ht", "a", "bh", "kh", " H", "HH", "rh", "s", "t", "ch", "y", "ph", "body", "g", "ah", "wh", "hh", "dh", "th", "how", "host", "zh", "hhh", "f", "help", "b", "hi", "ho", "q", "sh", "uh", "z", "gh", "l", "han", "hm", "r", "H", "hash", "ih", "hs", "he"], "fnc": ["Fsync", "bfnec", "bsync", "bnt", "bunc", "bnc", "Fnt", "Fnc", "Fcn", "FNC", "fNC", " fcn", "bfunc", "fnec", " fnt", " fNC", " fsync", " fnec", "Func", "bNC", " func", "bnec", "vnt", "bfNC", "fsync", "func", "fnt", "bfnc", "vnc", "vcn", "fcn", "vNC"]}}
{"code": "N = int(input())\\nH = list(map(int,input().split()))\\n\\nfor i in range(1,N):\\n    if H[-i] < H[-i-1]:\\n        H[-i-1]-= 1\\n        if H[-i] < H[-i-1]:\\n            print('No')\\n            exit()\\n            \\n    \\nprint('Yes')", "target": "230", "substitutes": {"N": ["D", "S", "NS", "E", "NC", "B", "Ns", "T", "n", "J", "Y", "A", "L", "SN", "NT", "NM", "Size", "NN", "No", "Q", "I", "X", "C", "Ne", "V", "P", "K", "O", "M", "F", "Z"], "H": ["U", "SH", "D", "HT", "S", "CL", "HD", "HC", "R", "E", "HL", "HP", "B", "RH", "T", "OH", "W", "J", "HH", "Long", "BB", "Y", "G", "L", "HA", "HK", "EH", "h", "HTTP", "Q", "GH", "I", "X", "C", "MH", "HI", "V", "P", "K", "O", "Ch", "M", "Input", "F", "CH", "Z"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "gu", "ci", "d", "phi", " I", "oi", "io", "ie", "int", "ind", "n", "ui", "ini", "t", "bi", "id", "y", "api", "h", "ix", "index", "si", "u", "iu", "fi", "f", "e", "I", "end", "b", "ti", "mi", "ai", "w", "z", "qi", "l", "v", "ii", "ic", "li", "p", "zi"]}}
{"code": "n=int(input())\\ns=input()\\ncnt=0\\nfor m in range(1000):\\n  m=str(m).zfill(3)\\n  j=0\\n  for i in m:\\n    if i not in s[j:]:break\\n    j+=s[j:].index(i)+1\\n  else:cnt+=1\\nprint(cnt)", "target": "756", "substitutes": {"n": ["o", "c", "d", "nm", "nb", "num", "t", "mn", "na", "nn", "nr", "net", "f", "ns", "sn", "no", "z", "l", "r", "nc", "p", "ne", "N"], "s": ["states", "ls", "services", "o", "parts", "js", "S", "c", "d", "ses", "a", "ss", "sl", "qs", "t", "strings", "y", "g", "comments", "ms", "ds", "rows", "blocks", "keys", "gs", "lines", "items", "south", "si", "u", "sets", "e", "f", "sym", "b", "ns", "ans", "sm", "es", "tests", "sb", "l", "sg", "xs", "p"], "cnt": ["Cnd", "CNT", "cno", "acct", "mcno", "ccount", " cnd", "lcnt", "nnt", " cno", " cpt", " ccount", "nnd", "lccount", "Cno", "lcno", "mcnt", "mccount", "cnd", "acnt", "mcnd", "Cpt", "acNT", " cNT", "Cnt", "cct", "lcnd", "cNT", "nNT", "Cct", "npt", "cpt", " cct", "acno"], "m": ["o", "x", "tm", "c", "fm", "gm", "d", "nm", "a", "ind", "num", "range", "t", "y", "mn", "time", "g", "h", "ms", "ym", "md", "cm", "source", "message", "u", "e", "mu", "f", "b", "mi", "sm", "mm", "im", "mass", "z", "dm", "v", "l", "mean", "hm", "li", "r", "M", "p", "bm"], "j": ["kj", "note", "sec", "ji", "o", "js", "k", "x", "c", "gi", "jc", "ie", "pos", "ind", "J", "oj", "t", "ch", "ni", "y", "iq", "key", "g", "ij", "bj", "job", "index", "jl", "py", "ix", "jo", "ja", "f", "e", "obj", "adj", "je", "jj", "dj", "z", "qi", "l", "jp", "aj", "ii", "li", "fr", "p", "uj", "conn"], "i": ["ik", "pi", "di", "ji", "it", "o", "iw", "k", "x", "xi", "c", "ci", "d", "a", "ie", "int", "ind", "ini", "ni", "bi", "id", "y", "ij", "index", "ip", "multi", "si", "u", "iu", "e", "ti", "I", "f", "b", "mi", "ai", "z", "qi", "l", "v", "ii", "li", "r", "p"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nclass UnionFind:\\n    def __init__(self, n):\\n        self.data = [0] * N\\n        for i in range(N):\\n            self.data[i] = i\\n            \\n    def get_root(self, x):\\n        r = self.data[x]\\n        if r == x:\\n            return r\\n        p = self.get_root(r)\\n        self.data[x] = p\\n        \\n        return p\\n    \\n    def unite(self, x, y):\\n        rx = self.get_root(x)\\n        ry = self.get_root(y)\\n        \\n        if rx != ry:\\n            self.data[rx] = ry\\n\\n    def same(self, x, y):\\n        return self.get_root(x) == self.get_root(y)\\n\\nN, K, L = map(int, input().split())\\nLA = [[int(v) - 1 for v in input().split()] for _ in range(K)]\\nLB = [[int(v) - 1 for v in input().split()] for _ in range(L)]\\n\\nu1 = UnionFind(N)\\nfor x, y in LA:\\n    u1.unite(x, y)\\n    \\nu2 = UnionFind(N)\\nfor x, y in LB:\\n    u2.unite(x, y)\\n\\nresult = {}\\nfor i in range(N):\\n    a = u1.get_root(i)\\n    b = u2.get_root(i)\\n    \\n    if result.get((a, b)) == None:\\n        result[(a, b)] = 0\\n    result[(a, b)] += 1\\n    \\nfor i in range(N):\\n    a = u1.get_root(i)\\n    b = u2.get_root(i)\\n    \\n    print(result[(a, b)], end = \"\")\\n    if i != N - 1:\\n        print(\" \", end = \"\")\\n    else:\\n        print()\\n", "target": "21", "substitutes": {"input": ["empty", "out", "current", "raw", " IN", "option", " int", "front", "python", "source", "null", "sel", "IO", " io", " IO", "str", "comment", "io", "temp", "file", "param", "output", "format", "expression", "IN", "error", "select", "Input", "block", "condition", "method", "unit", "argument", "back", " Input", "context", "head", "int", "util", "array", "config", "url", "image", "command", "request", "channel", "bin", "stream", "model", "background", "reader", "reset", "rec", "state", "layer", "ic", "form", "case", "element", "pattern", "session", "value", " output", "pull", "parent", "line", " inputs", "buffer", "json", "text", "path"], "self": ["home", "work", "object", "c", "results", "wrapper", "h", "f", "end", "us", "load", "child", "m", "temp", "cl", "part", "k", "full", "http", "err", "plus", "er", "ng", "ws", "remote", "get", "client", "error", "default", "gen", "block", "manager", "ctx", "node", "event", "app", "context", "instance", "s", "u", "spec", "e", "func", "resp", "es", "layer", "form", "user", "o", "Self", "this", "lf", "pos", "view", "all", "hand", "cache", "os", "g", "ack", "parent", "co", "worker", "master", "host", "me", "parse", "one", "other", "q", "w", "utils"], "n": ["k", "j", "d", "nb", "Ns", "num", "t", "ni", "nu", "u", "nt", "ns", "init", "l", "ii", "m", "nc", "ne"], "data": ["average", "window", "open", "search", "results", "scale", "value", "start", "format", "Data", "list", "array", "cache", "config", "root", "key", "split", "body", "div", "change", "parent", "sample", "index", "next", "batch", "model", "size", "default", "values", "store", "DATA", "module", "memory", "filter", "draw", "dat", "series", "group", "call"], "i": ["pi", "di", "o", "uri", "it", "k", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "phi", "oi", "ie", "start", "ori", "int", "ind", "s", "ini", "ui", "t", "ni", "bi", "id", "info", "ix", "index", "ip", "multi", "si", "u", "iu", "f", "I", "ti", "e", "im", "ai", "z", "chi", "qi", "l", "ii", "ic", "li", "ei", "m", "io", "vi", "zi"], "x": ["o", "k", "xp", "xi", "j", "px", "c", "work", "ci", "d", "ctx", "xy", "lex", "name", "pixel", "int", "re", "ux", "s", "t", "ch", "id", "tx", "key", "on", "xml", "xxx", "yx", "h", "xt", "ax", "sex", "ix", "index", "pr", "fx", "ex", "xc", "u", "e", "f", "dx", "one", "X", "xx", "xes", "wx", "w", "z", "rex", "l", "ic", "cross", "xs", "right", "yes", "cl"], "r": ["rs", "rank", "rd", "k", "err", " R", "j", "c", "er", "R", "ar", "d", "ri", "ro", "re", "rh", "mr", "rb", "root", "rf", "rt", "rg", "ir", "h", "lr", "pr", "rw", "ur", "nr", "run", "e", "rl", "rr", "rn", "f", "res", "q", "w", "cr", "m", "right", "ru", "kr", "rc", "sr"], "p": ["lp", "pi", "o", "pb", "c", "R", "ar", "np", "d", "vp", "s", "t", "root", "rf", "h", "cp", "pr", "py", "u", "pp", "e", "f", "ps", "q", "w", "P", "z", "l", "jp", "pc", "m", "pe", "ap", "bp", "fp"], "y": ["ey", "o", "wy", "sy", "hy", "k", "ya", "j", "c", "cy", "d", "yi", "oy", "yn", "ky", "sys", "ny", "yo", "yl", "s", "Y", "ye", "zy", "yr", "key", "dy", "ay", "ym", "py", "yt", "u", "e", "f", "ys", "yd", "ish", "yy", "w", "z", "l", "vy"], "rx": ["rs", "vr", "sync", "xi", "px", "rio", "ri", "lex", "inx", "ux", "rh", "rb", "xxxxxxxx", "root", "rf", "tx", "ray", "dy", "yr", "rss", "rt", "yx", "lr", "fx", "rys", "ex", "nr", "rl", "rr", "xx", "wx", "riz", "rex", "cr", "cross", "xs", "right", "req", "rc", "sr", "rin"], "ry": ["rs", "wy", "xi", "cy", "ri", "ro", "io", "rying", "ie", "lex", "rh", "s", "root", "yr", "ray", "dy", "rc", "RY", "rt", "ty", "yx", "ix", "py", "rw", "ra", "rys", "row", "nr", "rr", "cry", "xx", "wx", "z", "cr", "cross", "Ry", "ries", "vy", "sr"], "N": ["ND", "U", "Node", "D", "S", "CN", "R", "NS", "E", "NC", "B", "Ns", "T", "J", "W", "Y", "Ni", "G", "A", "Num", "CNN", "NT", "NM", "Size", "NN", "MN", "Q", "IO", "I", "X", "NO", "C", "Na", "Ne", "DC", "NR", "NG", "V", "P", "O", "H", "M", "IX", "F", "Z"], "K": ["KR", "D", "Ku", "k", "S", "R", "Ak", "B", "Ka", "W", "J", "Y", "A", "G", "KK", "HK", "Q", "PK", "I", "X", "C", "V", "P", "KA", "KN", "Sk", "KS", "KC", "M", "Z"], "L": ["PL", "LM", "D", "LU", "LO", "R", "Z", "E", "NL", "LR", "B", "Lo", "FL", "Y", "LI", "EL", "OL", "LV", "LE", "BL", "I", "Li", "X", "XL", "LL", "Lu", "V", "P", "l", "DL", "O", "SL"], "LA": ["PL", "NA", "CLA", "LM", "LU", "LO", "LR", "NL", "PO", "LS", "PA", "IA", "LI", "A", "LP", "La", "EL", "LAN", "GA", "ILA", "SA", "AU", "LE", "la", "BL", "LG", "LT", "Li", "XL", "Lu", "ML", "API", "KA", "DL", "NP", "SL"], "v": ["o", "k", "ve", "uv", "cv", "c", "j", "d", "ver", "value", "vid", "vs", "int", "vin", "s", "vp", "ov", "t", "g", "val", "h", "vert", "change", "lv", "volt", "vc", "iv", "qv", "u", "va", "e", "f", "vu", "ev", "q", "V", "w", "sv", "z", "vision", "nv", "l", "m", "vi", "conv"], "_": ["out", "lex", "all", "s", "non", "___", "val", "un", "ning", "place", "block"], "LB": ["PL", "LM", "LAB", "CL", "LU", "LO", "BF", "LD", "LR", "NL", "Ub", "LOD", "RL", "LIB", "LI", "LP", "LC", "TL", "LV", "LAN", "BL", "Lab", "QB", "LG", "lb", "LT", "XL", "LL", "DL", "ELL"], "u1": ["uFirst", "nu1", "U2", " u01", " u3", "u3", "hu2", "hu01", "un1", "cu41", " uOne", "cuone", "U3", "xFirst", "x1", "UOne", "U1", "cone", "un41", "ut2", "x2", "hu3", "hu1", "u41", "UFirst", "c1", "U01", "utOne", "u01", "nu41", "ut1", "c2", "cu1", "uOne", "cOne", "nu2", "unone", " uone", "nuone", "utFirst", "Uone", "cu2", "xOne", "un2", "uone"], "u2": ["uTwo", " uII", "o2", "v62", "cu32", "U2", "v2", "v32", " u62", "cuTwo", "buTwo", "ob", "UTwo", "Ub", "ou8", "ou1", "buII", "uttwo", "ub", "bu2", "ut2", " u4", "ut8", " utwo", "u62", "utwo", "ut1", "u8", "cu1", "uII", "oTwo", "v1", "o4", " u8", "u32", " uTwo", "cub", " u32", "cu4", "bub", " ub", "outwo", "UII", "cu2", "cu62", "ou2", "u4"], "result": ["cup", "use", "df", "average", "Result", "success", "err", "package", "response", "compl", "results", "search", "effect", "current", "feature", "catch", "sum", "output", "complete", "value", "report", "diff", "mask", "answer", "valid", "list", "array", "cache", "math", "root", "figure", "score", "runner", "rate", "ret", "error", "number", "table", "row", "function", "message", "final", "replace", "parse", "default", "res", "match", "support", "buffer", "new", "status", "filter", "dict", "counter", "include", "Results", "comment", "order", "group", "count"], "a": ["ma", "area", "auto", "o", "sta", "k", "ya", "c", "aw", "d", "ama", "ac", "ab", "af", "action", "da", "an", "A", "fa", "api", "alpha", "na", "sa", "ah", "ia", "aa", "la", "u", "va", "e", "f", "ad", "am", "ca", "ga", "ai", "ae", "aaa", "ba", "l", "ka", "au"], "b": ["o", "eb", "mb", "abb", "j", "c", "db", "d", "cb", "nb", "ob", "ab", "bh", "B", "ub", "s", "rb", "bi", "api", "bs", "h", "fb", "ib", "bl", "aa", "wb", "lb", "u", "e", "f", "base", "sb", "be", "aaa", "ba", "l", "lib", "bb", "bf"]}}
{"code": "# input\\nn = list(input())\\n\\nop = \"\"\\nfor i in n:\\n    if i == \"1\":\\n        op += \"9\"\\n    else:\\n        op += \"1\"\\n\\nprint(op)", "target": "370", "substitutes": {}}
{"code": "n, k = map(int, input().split())\\ns = input()\\n\\ns = s[ :k -1] + chr(ord(s[k - 1]) - ord(\"A\") + ord(\"a\")) + s[k:]\\nprint(s)", "target": "223", "substitutes": {"n": ["o", "j", "c", "np", " N", "nb", "name", "an", "ni", "na", "network", "nn", "f", "e", "b", "ns", "z", "l", "v", "m", "nc", "ln", "p", "ne", "N"], "k": ["ik", "o", "kn", "ke", "x", "kk", "j", "c", "d", "ak", "mk", "ck", "kick", "ek", "t", "i", "y", "key", "sk", "g", "unk", "ok", "ks", "kid", "kt", "dk", "u", "f", "e", "max", "b", "ki", "q", "w", "kw", "z", "K", "v", "l", "m", "r", "p", "km", "N"], "s": ["states", "ls", "string", "o", "services", "parts", "js", "S", "ssl", "input", "sync", "c", "search", "sp", "d", "ws", "ses", "a", "data", "ss", "args", "t", "space", "strings", "i", "y", "g", "sa", "os", "ts", "sample", "gs", "south", "si", "u", "sets", "spec", "f", "e", "b", "ps", "new", "es", "tests", "sb", "w", "z", "l", "v", "sg", "m", "r", "xs", "se", "p", "aws"]}}
{"code": "from collections import deque\\n\\n\\ndef discard(c: str, da: deque, db: deque, dc: deque) -> str:\\n    if eval(f'len(d{c})'):\\n        c = eval(f'd{c}.popleft()')\\n    else:\\n        return c.upper()\\n\\n    return discard(c, da, db, dc)\\n\\n\\ndef answer(sa: str, sb: str, sc: str) -> str:\\n    deque_a = deque(list(sa))\\n    deque_b = deque(list(sb))\\n    deque_c = deque(list(sc))\\n    return discard(deque_a.popleft(), deque_a, deque_b, deque_c)\\n\\n\\ndef main():\\n    sa, sb, sc = [input() for _ in range(3)]\\n    print(answer(sa, sb, sc))\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "34", "substitutes": {"c": ["cur", "case", "cn", "cy", "ci", "d", "cycle", "cb", "col", "esc", "a", "name", "ac", "coll", "uc", "cod", "fc", "n", "s", "cc", "ce", "ch", "cs", "ec", "g", "con", "h", "abc", "ct", "cin", "dc", "vc", "channel", "char", "cu", "xc", "f", "e", "b", "code", "ca", "C", "w", "content", "cr", "l", "lc", "pc", "r", "cd", "cf", "nc", "p", "rc", "count", "enc"], "deque_a": ["deque__ae", "dequeue_b", "deque__b", "dequeue_ae", "dequeurec", "dequeureb", "dequeurea", "devel_c", "devel_ama", "deque2a", "deque_ae", "deque2b", "deque2c", "devel_b", "deque_ama", "dequeue_a", "deque2ae", "deque__c", "dequeue_c", "deque__a", "dequeureama", "devel_a"], "deque_b": ["dequeue_b", "deque__b", "deque_bb", "deque__B", "deque__ba", "devel_bb", "devel_c", "dequeue_ba", "dequeue_B", "devel_b", "dequeue_a", "deque_B", "deque_ba", "deque__a", "devel_a"], "deque_c": ["dequeue_b", "deque__dc", "dequeue_sc", "devel_dc", "deque_sc", "devel_c", "deque__cb", "deque_ca", "devel_cb", "dequeue_ca", "deque__c", "deque_dc", "deque_cb", "dequeue_c", "deque__a", "devel_a"], "sa": ["sta", "sy", "su", "asi", " si", "ama", "a", "wa", "sl", "pa", "da", "sie", "s", "Sa", "cs", "sd", "na", "SA", "ds", "sea", "ra", "za", "sf", "osa", "sq", "la", "si", "aa", "va", "oa", "sha", "ca", "sn", "so", "ga", "sh", "ai", "ta", "asa", "sv", "ba", "sg", "sam", "se", "au"], "sb": ["ls", "sta", "eb", "sur", "sit", "ssl", "pb", "db", "sci", "sp", "cb", "ses", "sub", "a", "ss", "bc", "zb", "sl", "src", "sie", "s", "rb", "sd", "stab", "bs", "fb", "gb", "sf", "sq", "si", "lb", "b", "sha", "soc", "SB", "sn", "ga", "sh", "sv", "ba", "sg", "bb", "sam", "se", "bf", "sth"], "sc": ["cur", "sec", "su", "cv", "sci", "sch", "sp", "cer", "esc", "ac", "sub", "uc", "bc", "sl", "src", "osc", "da", "cc", "ch", "config", "cs", "ec", "sd", "sk", "sw", "script", "ct", "sea", "dc", "sq", "si", "SC", "sem", "asc", "ca", "soc", "Sc", "ga", "desc", "sh", "ta", "cr", "lc", "cd", "pc", "se", "nc", "rc", "cl"], "_": ["x", "__", "n", "non", "g", "len", "l", "p", "ing"]}}
{"code": "A,B = map(int, input().split())\\n\\nfa = 0\\nif A%2 == 0 and A%4 == 0:\\n    fa = 0\\nelif A%2 == 0 and A%4 != 0:\\n    fa = 1\\nelif A%2 != 0 and (A-1)%4 == 0:\\n    fa = ((A-1) ^ 0)\\nelif A%2 != 0 and (A-1)%4 != 0:\\n    fa = (A-1) ^ 1\\n\\nfb = 0\\nif (B+1)%2 == 0 and (B+1)%4 == 0:\\n    fb = 0\\nelif (B+1)%2 == 0 and (B+1)%4 != 0:\\n    fb = 1\\nelif (B+1)%2 != 0 and B%4 == 0:\\n    fb = (B ^ 0)\\nelif (B+1)%2 != 0 and B%4 != 0:\\n    fb = (B ^ 1)\\n\\nprint(fa ^ fb)", "target": "481", "substitutes": {"A": ["Ac", "NA", "E", "W", "Action", "Am", "SA", "An", "I", "AST", "K", "AH", "FA", "As", "R", "Alpha", "a", "PA", "mA", "Array", "G", "AM", "Num", "Ma", "HA", "Ad", "Ar", "Al", "AA", "App", "API", "AF", "H", "M", "And", "AR", "D", "S", "Auth", "CA", "All", "T", "IA", "Az", "AL", "Access", "AY", "AU", "File", "X", "Australia", "C", "V", "AC", "LA", "U", "Ca", "Java", "At", "Y", "L", "AS", "Ab", "EA", "Area", "AP", "Average", "Ha", "b", "MA", "P", "AB", "F", "N"], "B": ["U", "Base", "Two", " b", "EB", "D", "Tab", "Big", "BF", "Buff", "R", "Other", "E", "LB", "Both", "Bi", "BB", "T", "UB", "W", "TB", "BE", "BBC", "Y", "J", "L", "G", "Part", "Ab", "NB", "USB", "VB", "OB", "BI", "Bah", "File", "GB", "Bs", "Band", "QB", "DB", "WB", "Bytes", "BER", "Bot", "I", "b", "X", "Default", "FB", "C", "SB", "Buffer", "Block", "Number", "V", "MB", "P", "Reb", "BC", "AB", "O", "M", "Bar", "F", "N", "Business"], "fa": ["ma", "ffe", "fy", "ha", "fat", "fw", "afa", "fal", "hide", "afi", "a", "wa", "hea", "family", "data", "ifi", "af", "fc", "pa", "da", "meta", "ni", "fo", "fe", "xa", "na", "sa", "fd", "ana", "fff", "ia", "font", "fg", "aa", "la", "bal", "cas", "foo", "va", "fi", "f", " ff", "fn", "ca", "FB", "mas", "feat", "Fa", "ta", "aaa", "ba", "nat", "ea", "fee", "bf", "FA"], "fb": ["ffe", "eb", "fat", "fw", "afa", "fal", "pb", "feed", "db", "fm", "hide", "eddy", "cb", "nb", "afi", "ab", "rib", "af", "fc", "ff", "xb", "rb", "buf", "rf", "raf", "fe", "hab", "fd", "abc", "fab", "bj", "ffff", "font", "bg", "fg", "wb", "lb", "fi", "f", " ff", "buff", "fn", "b", "FB", "fen", "sb", "Fa", " fab", "frac", "fee", "obb", "bb", "bf", "cf", "facebook"]}}
{"code": "import bisect, collections, copy, heapq, itertools, math, string, sys\\ninput = lambda: sys.stdin.readline().rstrip() \\nsys.setrecursionlimit(10**7)\\nINF = float('inf')\\ndef I(): return int(input())\\ndef F(): return float(input())\\ndef SS(): return input()\\ndef LI(): return [int(x) for x in input().split()]\\ndef LI_(): return [int(x)-1 for x in input().split()]\\ndef LF(): return [float(x) for x in input().split()]\\ndef LSS(): return input().split()\\n\\ndef resolve():\\n    N, M, C = LI()\\n    B = LI()\\n    A = [LI() for _ in range(N)]\\n\\n    ans = len([i for i in A if sum([i[j] * B[j] for j in range(M)]) + C > 0])\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "213", "substitutes": {"input": ["empty", "type", "out", "object", "feed", "current", "raw", "submit", "answer", "binary", "INT", "picture", "python", "source", "null", "memory", "example", "temp", "file", "output", "data", "format", "expression", "pixel", "single", "IN", "result", "connect", "forward", "error", "default", "upper", "include", "wait", "Input", "block", "condition", "unit", "integer", "frame", "interface", "point", "argument", "PUT", " Input", "context", "complete", "int", "instance", "array", "config", "image", "index", "request", "stream", "model", "reader", "inf", "layer", "form", "string", "element", "unknown", "response", "session", "value", "pull", "inner", "parent", "line", " inputs", "active", "insert", "inside", "buffer", "text", "path"], "INF": ["Inf", " inN", "INN", " inf", " inInf", "InN", "InF", " INInf", " inF", " INf", "InInf", "INf", " INN", "INInf"], "x": ["ext", "k", "xp", "xi", "c", "work", "px", "page", "xy", "point", "event", "data", "lex", "int", "ux", "n", "plex", "xb", "num", "t", "oint", "id", "y", "ph", "xml", "python", "xxx", "xa", "val", "ax", "h", "xt", "sex", "xxxx", "rx", "word", "ix", "index", "fx", "bit", "ex", "xc", "u", "f", "max", "X", "xx", "code", "xf", "xes", "wx", "w", "expl", "z", "v", "cross", "l", "cent", "m", "xs", "text", "p"], "N": ["U", "NA", "D", "S", "R", "NS", "E", "NE", "Ns", "T", "n", "J", "Y", "L", "G", "NT", "NM", " n", "NN", "Q", "I", "X", "Na", "Ne", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "MO", "D", "S", "R", "E", "T", "W", "J", "n", "Y", "L", "G", "DM", "NM", "Ms", "MN", "Q", "I", "X", "JM", "V", "MB", "P", "Mo", "K", "m", "O", "H", "F", "CM"], "C": ["U", "D", "S", "CN", "c", "R", "E", "CA", "T", "W", "J", "Y", "L", "G", "CU", "JC", "CF", "Q", "I", "CS", "X", "DC", "V", "P", "Cs", "K", "O", "AC", "F", "CM", "CE", "Z"], "B": ["U", " b", "D", "S", "BF", "R", "IB", "E", "BB", "T", "W", "J", "Y", "L", "G", "NB", "BA", "BI", "Q", "Bs", "BL", "QB", "I", "b", "SB", "V", "P", "K", "BC", "AB", "O", "H", "F"], "A": ["AR", "As", "NA", "D", "S", "Ax", "au", "ar", "Alpha", "a", "All", "T", "J", "mA", "Array", "an", "array", "L", "AS", "alpha", "Ma", "An", "Ar", "AN", "I", "AA", "am", "X", "ga", "ai", "P", "AF", "AB", "O", "LA"], "_": ["k", "__", "J", "all", "len", "X", "q", "l"], "ans": ["ls", "NA", "ANN", "Ann", "anus", "san", "aning", "nas", "aos", "an", "anc", "anon", "sk", "CNN", "na", "anas", "gan", "nan", "An", "can", "anes", "AN", "atan", "cas", "aned", "leans", "ANS", "ann", "lan", "ns", "chan", "ions", "ani", "aus", "ons"], "i": ["pi", "di", "ji", "it", "o", "xi", "c", "ci", "phi", "a", "io", "int", "n", "ni", "bi", "id", "y", "ij", "ip", "si", "il", "u", "iu", "f", "I", "mu", "e", "b", "ai", "chi", "qi", "v", "l", "ii", "li", "m", "r", "p"], "j": ["kj", "it", "ji", "o", "js", "k", "c", "d", "xy", "a", "int", "ind", "n", "J", "jit", "y", "key", "ct", "jl", "jo", "u", "ja", "e", "f", "obj", "b", "q", "z", "l", "jp", "v", "aj", "m", "li", "r", "p"]}}
{"code": "#from statistics import median\\n#import collections\\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\\nfrom fractions import gcd\\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\\n#from collections import deque\\nfrom collections import deque,defaultdict,Counter\\nimport decimal\\nimport re\\n#import bisect\\n#\\n#    d = m - k[i] - k[j]\\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\\n#\\n#\\n#\\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\\n#\\n#\\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\\n# \u56db\u6368\u4e94\u5165g\\nimport sys\\nsys.setrecursionlimit(10000000)\\n#mod = 10**9 + 7\\n#mod = 9982443453\\nmod = 998244353\\ndef readInts():\\n  return list(map(int,input().split()))\\ndef I():\\n  return int(input())\\ns = input()\\nsc = 0\\nans = 0\\nfor i in range(len(s)):\\n    if s[i] == 'S':\\n        sc += 1\\n    else:\\n        if sc:\\n            sc -= 1\\n            ans += 1\\nprint(len(s) - ans*2)\\n", "target": "713", "substitutes": {}}
{"code": "a=[int(input()) for i in range(6)]\\nif abs(a[4]-a[0])<=a[5]:\\n    print(\"Yay!\")\\nelse:\\n    print(\":(\")", "target": "208", "substitutes": {"a": ["ma", "area", "sta", "input", "x", "c", "aw", "ama", "ac", "ab", "cha", "aux", "int", "pa", "n", "action", "args", "da", "an", "s", "all", "A", "fa", "array", "y", "alpha", "na", "sa", "la", "aa", "u", "va", "f", "e", "b", "ad", "ca", "sup", "ga", "ae", "asa", "ea", "l", "aj", "p", "au"], "i": ["o", "x", "xi", "j", "c", "gi", "d", "ie", "pos", "ind", "n", "num", "id", "y", " j", "ix", "index", "ip", "u", "pp", "f", "e", "I", "ai", "z", "l", "li", "io"]}}
{"code": "k = int(input())\\nans = 1\\nseven = 7\\nfor i in range(k):\\n    if seven % k == 0:\\n        print(ans)\\n        exit()\\n    seven = (seven * 10 + 7) % k\\n    ans += 1\\nprint(-1)", "target": "737", "substitutes": {"k": ["o", "ke", "x", "kk", "j", "work", "c", "d", "ak", "ky", "n", "mk", "ek", "num", "kick", "ck", "key", "sk", "g", "unk", "ack", "ok", "ks", "kid", "km", "dk", "ko", "kin", "u", "f", "max", "ask", "q", "kw", "w", "K", "l", "v", "m", "r", "p", "ka", "ku"], "ans": ["aves", "offs", "ls", "cus", "ass", "ins", "ss", "ens", "an", "s", "ops", " means", "oss", "ents", "sk", "na", "os", "aks", "anas", "ms", "rows", "ks", "ana", "nan", "can", "anes", "cons", "lines", " sins", "la", "kin", "atan", "aned", "leans", "ANS", "ann", "lan", "ns", "ane", "scan", "ends", "es", "errors", "ani", "aces", "ae", " scans", "han", "eps", "ln", "aus"], "seven": ["Seven", "even", "um", "down", "four", "three", "opens", "eight", " seventh", "five", "num", "av", "aug", "ales", "true", "mother", "zero", "hens", " hundred", "rows", "umber", "micro", "begin", "me", "one", "rown", "none", "each", "kay", "six", "utf", "nine", " mother", "r", "m", " Seven", "two"], "i": ["you", "x", "j", "gi", "c", "ins", "a", " ii", "ind", "n", "num", "id", "y", " j", "h", "inn", "index", "ip", "row", "f", "e", "I", "ai", "z", "p", "r", "io"]}}
{"code": "\\ndef main():\\n    num, wariai_a, wariai_b = map(int, input().split())\\n    data = [list(map(int, input().split())) for i in range(num)]\\n\\n    inf = 100 * num + 1\\n    dp = [[[inf for i in range(400)] for j in range(400)] for k in range(num + 1)]\\n    dp[0][0][0] = 0\\n    for i in range(1, num + 1):\\n        a, b, c = data[i - 1]\\n        for j in range(400):\\n            for k in range(400):\\n                dp[i][j][k] = min(dp[i - 1][j][k], dp[i][j][k])\\n                if j + a < 400 and k + b < 400:\\n                    dp[i][j + a][k + b] = min(dp[i][j + a][k + b], dp[i - 1][j][k] + c)\\n\\n    ans = inf\\n    for j in range(1, 400):\\n        for k in range(1, 400):\\n            if j * wariai_b == k * wariai_a:\\n                ans = min(ans, dp[num][j][k])\\n\\n    if ans == inf:\\n        print(-1)\\n    else:\\n        print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "578", "substitutes": {"num": ["lim", "unit", "loc", "dom", "x", "ul", "um", "om", "param", "np", "nm", "img", "four", "sum", "col", "nb", "mult", "uc", "pos", "n", "inc", "cal", "Num", "mon", "mn", "uni", "con", "dim", "iter", "tri", "month", "index", "un", "bin", "nu", "number", "umi", "multi", "nom", "len", "u", "f", "fn", "mu", "max", "NUM", "no", "im", "init", "m", "p", "form", "count"], "wariai_a": ["wariaii_b", "wariaii_w", "wariai___c", "wariait_ai", "wariai___ai", "wariai___a", "wariai_f", "wariai_A", "wariai_ai", "wariai_c", "wariait_f", "wariaii_a", "wariait_c", "wariait_a", "wariaii_A", "wariai_w", "wariai___f"], "wariai_b": ["wariai5br", "wariai0br", "wariaio__i", "wariai1a", "wariai_i", "wariai5home", "wariai5b", "wariai__b", "wariaio_i", "wariai1br", "wariaio_b", "wariapi_br", "wariai_home", "wariaio__b", "wariai__a", "wariai0b", "wariaio_br", "wariaio__br", "wariai0a", "wariai0home", "wariai__i", "wariaio__a", "wariai5a", "wariaio_a", "wariai1i", "wariapi_b", "wariapi_home", "wariai__br", "wariapi_a", "wariai_br", "wariai1b"], "data": ["df", "dt", "input", "db", "results", "d", "img", "Data", "pos", "int", "n", "all", "ata", "da", "list", "array", "s", "config", "result", "arr", "alpha", "api", "na", "ds", "change", "next", "ip", "bin", "batch", "aa", "e", "f", "ad", "DATA", "params", "r", "dist", "dat", "p", "up"], "i": ["ik", "pi", "it", "o", "ji", "di", "x", "xi", "gi", "ci", "d", "yi", "oi", "phi", "ie", "ori", "int", "ind", "n", "ui", "ini", "t", "s", "ni", "bi", "id", "y", "info", "api", "ir", "ij", "ia", "ix", "ip", "si", "u", "iu", "ami", "f", "I", "e", "mi", "ki", "im", "ai", "z", "p", "qi", "v", "l", "ii", "ic", "li", "ei", "m", "io"], "inf": ["pi", "df", "confirmed", "std", "input", "exp", "sin", "sp", "ci", "d", "ab", "inter", "diff", "af", "Inf", "ff", "ind", "int", "n", "abs", "nz", "inc", "ini", "ef", "agi", "info", "fin", "id", "fact", "alpha", "fe", "lab", "min", "con", "abc", "iter", "inn", "nan", "acc", "index", "nu", "aff", "ine", " Inf", "pp", "f", "qq", "rec", "fen", "pl", "q", "init", "frac", "z", "ii", "conf", "ill"], "dp": ["wp", "pi", "lp", "tp", "df", "dt", "dos", "par", "pid", "loc", "di", "pb", "pg", "db", "sp", "np", "d", "csv", "port", "pd", " p", " subp", "vs", "src", " np", "direction", " delta", "vp", "hp", "DP", "pkg", " dd", " cp", "wd", "gap", "ds", "dh", "cp", "do", "dr", "dc", "ip", "channel", "comp", "adr", "projects", "pipe", "mp", "pp", "address", "imp", "ps", "sup", " dup", " DP", "proxy", "dl", " tcp", "drop", "dm", " params", "ep", " positions", "grad", "deb", "dat", "p", " df", "gp", "fp"], "j": ["ik", "di", "ji", "o", "js", "x", "kk", "xi", "ci", "d", "ak", "ijk", "jc", "ie", "jon", "int", "ind", "n", "J", "oj", "ui", "ch", "y", "key", "jan", "g", "h", "ij", " n", "bj", "ix", "job", "jl", "jo", "u", "iu", "ja", "f", "e", "jj", "am", "q", "ai", "dj", "z", "qi", "l", "jp", "aj", "v", "m", "r", "jam", "ii", "li", "p", "uj"], "k": ["ik", "o", "kn", "ke", "x", "kk", "d", "ak", "ijk", "ky", "ac", "kh", "n", "wk", "ck", "an", "ek", "kick", "ch", "id", "y", "key", "kg", "sk", "ka", "g", "h", "ok", "ks", "uk", "kid", "cp", "dk", "ko", "kin", "u", "f", "e", "ad", "ki", "q", "w", "kw", "z", "K", "v", "l", "m", "r", "oc", "p", "kr", "km", "ku"], "a": ["area", "o", "at", "x", "d", "ar", "ak", "ac", "ab", "af", "n", "an", "A", "y", "alpha", "sa", "aa", "u", "va", "oa", "f", "e", "ad", "ca", "am", "q", "ai", "ae", "w", "z", "ba", "l", "aj", "p", "au"], "b": ["o", "eb", "x", "d", "cb", "ab", "B", "bc", "n", "rb", "ch", "y", "bs", "g", "fb", "h", "aa", "wb", "lb", "u", "f", "e", "ad", "sb", "q", "w", "z", "ba", "l", "v", "r", "bf", "bb", "m", "p"], "c": ["cy", "d", "cb", "ac", "uc", "bc", "n", "s", "cc", "ce", "ch", "cs", "y", "g", "con", "h", "dc", "cu", "u", "xc", "f", "e", "ca", "C", "q", "w", "z", "l", "v", "lc", "m", "cf", "p"], "ans": ["ls", "cus", "anus", "san", "ras", "nas", "ins", "ars", "ants", "ss", "vs", "amps", "an", "anc", "s", " means", "ats", "cs", "ents", "anon", "ams", "sk", "na", "os", "anas", "ds", "ks", "ana", "nan", "span", "can", "cons", "AN", "atan", "aned", "ANS", "activation", "ann", "ps", "ns", "lan", "mas", "anges", "lang", "ani", "ai", "aces", "ays", "mean", " scans", "eps", "aus", "ons", "au"]}}
{"code": "import numpy as np\\n\\nA, B, H, M = map(int, input().split())\\n\\n\\nangle_h = 1./ 12.*(H + M/60.) * 2*np.pi\\n\\nangle_m = M/60. * 2 * np.pi\\n\\nhour = (A*np.sin(angle_h), A*np.cos(angle_h))\\nminute = (B*np.sin(angle_m), B*np.cos(angle_m))\\n\\ndist = np.sqrt((hour[0] - minute[0])**2 + (hour[1] - minute[1])**2)\\n\\nprint(dist)\\n", "target": "290", "substitutes": {"A": ["As", "U", "AR", "D", "S", " AA", "a", "CA", "T", "W", "IA", "Y", "AD", "G", "L", "AM", "Am", "alpha", "AS", "Ma", "AI", "SA", "AU", " a", "AP", "Ar", "I", "AA", "X", "Ang", "C", "MA", "V", "P", "AF", "AH", "O", "AC", "F", "N", "LA"], "B": ["U", "D", "S", "BM", "BF", "R", "IB", "E", "LB", "BB", "T", "UB", "W", "BE", "Y", "L", "G", "NB", "BA", "BD", "GB", "Bs", "Q", "WB", "I", "b", "X", "C", "V", "P", "BC", "AB", "O", "F", "N", "CL"], "H": ["U", "D", "S", "R", "E", "RH", "T", "W", "HH", "NH", "Y", "G", "L", "EH", "h", "Q", "X", "C", "HM", "MH", "HI", "V", "P", "K", "AH", "O", "DH", "F", "CH", "N"], "M": ["U", "MO", "LM", "D", "S", "R", "E", "FM", "T", "W", "J", "PM", "Y", "L", "G", "MD", "MS", "MN", "Q", "I", "X", "C", "MH", "V", "MB", "P", "MM", "MC", "m", "O", "F", "CM", "N", "Z"], "angle_h": ["angle_han", "angled_han", "angled55h", "angle67x", "angle8x", "angled_m", "angle55oh", "angled_oh", "angle67ah", "direction67ah", "angle8b", "direction_ah", "direction_x", "angle_oh", "angle_c", "angle_x", "angle_l", "angle_H", "angle___ah", "angle_b", "angle___h", "angle55m", "angled_h", " angle_H", "direction67h", "angled55m", "angle___b", "direction_h", "angled55oh", "angle67b", "angle_ah", "direction67x", "direction_b", "angle55h", " angle_c", "angle55han", "angled55han", "angle67h", "angle8h", " angle_l", "direction67b", "angle___x", "angle8ah"], "angle_m": ["number_g", "number13bm", "angle13g", "number_bm", "angle2mm", "angle13m", "angle_c", "number13u", "number_m", "number_u", "angle64u", "angle_v", "angle2m", "number13m", "angle64g", "angle_b", "angle55m", "number13g", "angle13bm", " angle_v", "angle_mm", "angle2h", "angle2c", " angle_c", " angle_b", "angle64bm", "angle64m", "angle_u", "angle55bm", "angle_bm", "angle55u", " angle_mm", "angle13u", "angle_g", "angle55g"], "hour": ["element", "Hour", "hours", "angle", " ratio", "inter", "author", "second", " time", "year", " angle", "direction", "array", "alpha", "inner", "time", "bar", "min", "body", "ir", "h", "date", "image", "ay", "month", "day", "age", "error", "odd", "row", "message", "e", "max", "hr", "end", "noon", "edge", "volume", "night", "position", "air", "article", "actor", "p", "han", "over"], "minute": ["unit", "mini", "part", "element", "distance", "first", "sin", "between", "course", "cycle", "event", "sum", "start", "diff", "quarter", "second", "int", "year", "direction", "double", "y", "time", "min", "dim", "morning", "image", "period", "md", "day", "cm", "month", "present", "move", "max", "mi", "mm", "noon", "volume", "night", "pm", "zone", "mid", "han", "m", "spin", "middle", "km"], "dist": ["dis", "part", "grade", "par", "distance", "Dist", "det", "exp", "relation", "data", "trip", "dev", "diff", "transfer", "progress", "depth", "range", "dir", "weight", "sd", "dy", "driver", "force", " distance", "gap", "dim", "div", "loss", "error", "comp", "radius", "address", "match", "shape", "Distance", "desc", "draw", "style", "grad", "km"]}}
{"code": "n = int(input())\\na = sorted(list(map(int, input().split())))\\n\\nans = a[0]\\nans_l = []\\nans_e = a[-1]\\n\\nif ans_e >= 0:\\n    for i in range(1,n-1):\\n        if a[i] < 0:\\n            ans_l += [(ans_e, a[i])]\\n            ans_e -= a[i]\\n        else:\\n            ans_l += [(ans, a[i])]\\n            ans -= a[i]\\n\\n    ans_l += [(ans_e,ans)]\\n    ans = ans_e - ans\\n\\nelse:\\n    ans = ans_e\\n    for i in range(0,n-1):\\n        ans_l += [(ans, a[i])]\\n        ans -= a[i]\\n\\nprint(ans)\\n\\nfor x, y in ans_l:\\n    print(x,y)\\n", "target": "18", "substitutes": {"n": ["o", "k", "j", "c", "d", "nb", "s", "num", "an", "t", "ni", "na", "en", "network", "nan", "nn", "span", "nu", "u", "len", "f", "e", "b", "ns", "sn", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "a": ["ma", "area", "auto", "o", "k", "c", "aw", "ar", "wa", "ac", "app", "ab", "aux", "pa", "all", "da", "s", "an", "array", "A", "fa", "ce", "result", "alpha", "qa", "sa", "ana", "ia", "index", "za", "aa", "la", "u", "va", "oa", "e", "f", "b", "am", "ad", "ca", "ga", "ai", "ae", "w", "asa", "aaa", "z", "ba", "ea", "ada", "ao", "p", "au"], "ans": ["auto", "native", "offs", "nas", "anks", "amps", "args", "en", "An", "can", "AN", "aned", "cas", "ANS", "anges", "ns", "scan", "ames", "aus", "han", "ens", "an", "ads", "ents", "sk", "na", "anas", "ks", "nan", "ates", "atan", "ann", "lan", "mas", "no", "ani", "annels", "eps", "aps", "ls", "ations", "olds", "ars", "s", "anc", "A", "actions", "ats", "man", "anon", "plan", "ana", "span", "cons", "leans", "anne", "acts", "ands", "lang", "es", "faces", "ays", "ons", "ins", "ases", "ants", "all", " means", "outs", "ians", "ams", "os", "gan", "names", "ania", "ions", "ai", "aces", "ano", "mean", "any"], "ans_l": ["ans_r", "ans_ell", "ans__r", "ans_lc", "ansLoge", "an_p", "ons_le", "ann_i", "ans_p", "an_ell", "ans_le", "an_e", "ons_e", "an_l", "an_el", "ann_lo", "an_lc", "ans__e", "ann_e", "ansLoglo", "ann_l", "ans__el", "ons_l", "ans_el", "ans__l", "ans_i", "ans_lo", "ons_r", "ans_L", "an_r", "ansLogi", "an_L", "ansLogl"], "ans_e": ["ans6es", "ans00t", "ans6ei", "ams_i", "ans00i", "ans_ne", "ans_eu", "ons_i", "ams6ei", "ons_m", "ons_es", "ans9i", "ams6es", "ams_ed", "an_e", "ans_t", "ans_ce", "an_ne", "ans9e", "ons_e", "ans6e", "ons_eu", "ans00es", "ans_ie", "ams_es", "atan_eu", "an_t", "ans9oe", "atan_oe", "ans_oe", "ams_ei", "ams_ce", "ans_ei", "ans_i", "ans_ed", "ams_e", "ans6ed", "ams6e", "an_es", "ons_oe", "ans_m", "ans00e", "ans_es", "ans9es", "an_ie", "atan_es", "an_i", "ams6ed", "atan_e"], "i": ["pi", "di", "o", "uri", "it", "xi", "j", "c", "gi", "ci", "ar", "yi", "ri", "io", "ie", "ori", "cli", "int", "s", "ini", "ui", "ati", "ni", "bi", "info", "id", "ix", "source", "ip", "multi", "iv", "si", "u", "iu", "e", "ti", "I", "f", "b", "code", "mi", "ai", "init", "z", "p", "qi", "l", "v", "ii", "li", "m", "ei"], "x": ["k", "xp", "xi", "px", "c", "d", "xy", "gal", "int", "ux", "xb", "tx", "on", "na", "xxx", "ax", "h", "yx", "xe", "rx", "ix", "fx", "ex", "xc", "u", "e", "dx", "one", "b", "X", "xx", "hi", "wx", "q", "w", "z", "v", "m", "xs", "p"], "y": ["ey", "wy", "k", "ya", "j", "c", "cy", "xy", "yn", "yi", "oy", "ky", "ny", "yo", "yl", "s", "Y", "an", "t", "ch", "dy", "g", "yan", "py", "yt", "e", "ys", "b", "xx", "yy", "w", "z", "v", "l", "m", "p", "sky", "vy"]}}
{"code": "import queue\\n\\nn=int(input())\\n\\nq=queue.Queue()\\n\\nq.put(3)\\nq.put(5)\\nq.put(7)\\n\\nc=0\\nnum=q.get()\\nwhile num<=n:\\n    if \"3\" in str(num) and \"5\" in str(num) and \"7\" in str(num):\\n        c+=1\\n    q.put(num*10+3)\\n    q.put(num*10+5)\\n    q.put(num*10+7)\\n    num=q.get()\\n\\nprint(c)\\n", "target": "212", "substitutes": {"n": ["o", "cn", "k", "sync", "x", "d", " N", "nb", "s", "t", "i", "y", "g", "count", "en", "number", "nu", "nr", "u", "len", "f", "nt", "e", "b", "ns", "w", "z", "l", "m", "r", "nc", "p", "N", "conn"], "q": ["core", "o", "qt", "k", "sync", "x", "pg", "d", "question", "queue", "view", "ck", "qs", "s", "cache", "que", "t", "quit", "config", "i", "ch", "iq", "y", "quick", "check", "client", "qa", "g", "ue", "self", "query", "cp", "request", "Q", "sq", "u", "f", "e", "one", "qq", "sh", "w", "z", "form", "l", "v", "m", "p", "req", "qu", "dq"], "c": ["cur", "o", "loc", "cn", "k", "x", "cy", "ci", "d", "tc", "col", "ac", "cc", "t", "i", "id", "cs", "y", "g", "con", "h", "ct", "cin", "cm", "dc", "number", "cu", "u", "xc", "f", "e", "b", "code", "unc", "C", "w", "init", "cr", "l", "lc", "m", "r", "nc", "p", "count"], "num": ["cur", "home", "su", "uc", "valid", "non", "mon", "uni", "nu", "multi", "umber", "gener", "nom", "f", "uu", "lc", "m", "temp", "loc", "um", "off", "om", "ci", "tc", "mom", "Num", "result", "id", "coord", "month", "umi", "comb", "max", "NUM", "no", "gen", "block", "unit", "input", "node", "col", "anc", "update", "con", "nn", "ord", "index", "ident", "bin", "u", "fn", "new", "init", "nc", "nam", "form", "oct", "dom", "common", "ul", "sum", "name", "bc", "hom", "inc", "info", "winner", "div", "min", "parent", "un", "number", "row", "begin", "cu", "mu", "one", "b", "unc", "text"]}}
{"code": "s = int(input())\\nif s == 10**18:\\n    print(0, 0, 10**9, 0, 0, 10**9)\\n    exit()\\nt = 10**9\\na, b = s // t + 1, t - s % t\\nprint(0, 0, 1, t, a, b)\\n", "target": "638", "substitutes": {"s": ["sec", "ls", "fs", "o", "S", "su", "c", "d", "ins", "ses", "ws", "steps", "times", "ss", "n", "abs", "ats", "i", "cs", "y", "os", "sa", "sections", "comments", "g", "ds", "ts", "gs", "south", "si", "u", "size", "sets", "e", "f", "ys", "ps", "ns", "inf", "es", "tests", "sb", "sv", "z", "ta", "v", "r", "xs", "se", "m", "its", "p", "seconds"], "t": ["tap", "o", "tp", "dt", "at", "type", "x", "c", "d", "tc", "T", "int", "n", "ot", "wt", "i", "y", "test", "total", "time", "ty", "g", "h", "ts", "tt", "tf", "tmp", " T", "u", "e", "f", "w", "ta", "z", "l", "v", "te", "m", "text", "r", "p", "temp"], "a": ["area", "at", "k", "c", "d", "ar", "ab", "ac", "int", "n", "pa", "da", "an", "A", "space", "i", "y", "alpha", "sa", "abc", "index", "aa", "u", "f", "e", "ca", "ai", "ae", "ta", "z", "ba", "l", "bb", "p", " A"], "b": ["o", "eb", "k", "bt", "pb", "c", "d", "cb", "nb", "ab", "B", "bd", "n", "i", "y", "bs", "fb", "ib", "aa", "u", "lb", "e", "f", "sb", "be", "ba", "l", "v", "bb", "r", "m", "p"]}}
{"code": "# coding:UTF-8\\nimport sys\\nfrom math import factorial\\n\\nMOD = 10 ** 9 + 7\\nINF = float('inf')\\n\\nN = int(input())    # \u6570\u5b57\\nA = list(map(int, input().split()))     # \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u9023\u7d9a\u6570\u5b57\\n\\nmny = 1000\\nm = A[0]\\nfor i in range(1, N):\\n    if A[i] < m:\\n        m = A[i]\\n    if A[i] > m:\\n        if i == N-1:\\n            num = mny // m\\n            mny += num * (A[i] - m)\\n        elif A[i+1] <= A[i]:\\n            num = mny // m\\n            mny += num * (A[i] - m)\\n            m = A[i+1]\\n\\nprint(\"{}\".format(mny))\\n", "target": "67", "substitutes": {}}
{"code": "from sys import stdin\\n\\ns = stdin.readline().rstrip()\\n\\nprint(\"%s%d%s\" % (s[:1], len(s)-2, s[-1]))\\n", "target": "565", "substitutes": {"s": ["parts", "string", " b", "ls", "S", "input", "plus", "c", "fts", "d", "bytes", " logs", "ses", "ws", " p", "data", "a", "ss", " comments", " ls", "second", "n", "args", "t", "suff", "strings", "i", "ds", "self", " f", " su", " fs", " gets", " a", "lines", "source", " S", " c", "f", "e", "sym", "b", "new", "es", "sb", "sv", "v", "l", " headers", "stats", "words", "p", " sts", "seconds", " header"]}}
{"code": "from itertools import *\\nn=int(input())\\na=list(map(int,input().split()))\\na.sort()\\nans=0\\nfor i,j,k in combinations(a,3):\\n    if i<j<k and i+j>k:\\n      ans+=1\\nprint(ans)", "target": "742", "substitutes": {"n": ["o", "x", "c", "np", "d", "nb", "ac", "num", "s", "t", "y", "g", " na", "nn", "f", "fn", "b", "ns", "sn", "w", "z", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["ma", "area", "input", "x", "c", "aw", "d", "ab", "ac", "af", "mA", "da", "args", "s", "an", "array", "A", "fa", "alpha", "sa", "ana", "aa", "la", "u", "va", "b", "am", "ad", "ca", "ga", "ai", "ae", "w", "asa", "ba", "ao", "aj", "m", "p", "au"], "ans": ["ls", "anus", "nas", "ins", "ars", "ants", "an", "anc", "s", " means", "ats", "cs", "oss", "ents", "anon", "sk", "na", "os", "anas", "ds", "ks", "nan", "nn", "ana", "span", "can", "anes", "cons", "AN", "atan", "leans", "aned", "anne", "ANS", "ann", "lan", "ns", "ane", "sn", "errors", "features", "ani", "ays", "mean", "eps", "aus", "ons"], "i": ["ik", "pi", "it", "o", "ji", "x", "xi", "c", "ci", "d", "ri", "oi", "ie", "int", "ind", "ini", "ni", "bi", "y", "ij", "h", "index", "si", "u", "iu", "f", "I", "b", "ki", "ai", "ani", "z", "qi", "v", "l", "ii", "m", "li", "p"], "j": ["kj", "ik", "ji", "o", "x", "c", "d", "ijk", "ie", "oj", "J", "y", "key", "ij", "h", "index", "jo", "si", "u", "ja", "e", "f", "b", "jj", "q", "dj", "z", "v", "jp", "ii", "l", "m", "p", "uj"], "k": ["kj", "ik", "o", "kn", "x", "kk", "c", "d", "ak", "ijk", "ck", "s", "id", "y", "key", "sk", "h", "ok", "ks", "dk", "u", "e", "f", "b", "ki", "q", "tk", "w", "kw", "z", "K", "v", "m", "r", "p", "kr", "km", "ku"]}}
{"code": "N,L=map(int,input().split())\\na=[int(i) for i in input().split()]\\nj=-1\\nfor i in range(N-1):\\n    if a[i]+a[i+1]>=L:\\n        j=i\\n        break\\nif j==-1:\\n    print(\"Impossible\")\\nelse:\\n    print(\"Possible\")\\n    for i in range(j):\\n        print(i+1)\\n    for i in range(j+1,N-1)[::-1]:\\n        print(i+1)\\n    print(j+1)\\n", "target": "154", "substitutes": {"N": ["ND", "Node", "NA", "D", "S", "R", "NS", "E", "B", "Ns", "T", "n", "J", "Sn", "NH", "Y", "A", "Ni", "Wh", "Len", "Num", "NT", " n", "Size", " Ne", "No", "Q", "Length", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "L": ["UL", "U", "D", "S", "LU", "VL", "R", "E", "LB", "NL", "B", "T", "n", "J", "F", "W", "LI", "A", "G", "IL", "Len", "LV", "LE", "BL", "Q", "LT", "I", "dL", "C", "LL", "Lu", "V", "P", "l", "length", "O", "M", "ln", "SL", "LA"], "a": ["area", "o", "c", "ab", "ac", "n", "args", "da", "an", "s", "array", "A", "y", "alpha", "sa", "ana", "ia", "aa", "la", "u", "va", "ja", "f", "b", "am", "ad", "ca", "ans", "ga", "ai", "ae", "w", "z", "asa", "ba", "l", "aj", "ao", "m", "p", " A", "au"], "i": ["ik", "pi", "di", "ji", "o", "mini", "iw", "it", "k", "uri", "x", "xi", "c", "ci", "d", "yi", "ri", "phi", "io", "ie", "start", "ori", "int", "ind", "n", "ini", "ui", "jit", "ni", "bi", "id", "y", "ij", "ix", "index", "ip", "eni", "si", "u", "iu", "ami", "e", "I", "f", "ti", "b", "im", "ai", "z", "chi", "qi", "l", "v", "ii", "m", "ei", "li", "ih", "p", "zi"], "j": ["ji", "o", "k", "x", "c", "d", "jc", "ie", "jon", "oj", "n", "J", "jit", "range", "y", "jan", "ij", "bj", "job", "index", "jl", "jo", "si", "u", "ja", "f", "e", "je", "jet", "b", "jj", "I", "obj", "dj", "z", "json", "l", "jp", "v", "ii", "aj", "li", "m", "length", "r", "p", "uj"]}}
{"code": "def solve(string):\\n    s = string.replace(\"?\", \"d\").lower()\\n    n = len(s)\\n    dp = [[0] * (n + 1) for _ in range(4)]\\n    dp[0][0] = 1\\n    mod = 10**9 + 7\\n    for i, _s in enumerate(s):\\n        dp[0][i + 1] = dp[0][i] % mod\\n        dp[1][i + 1] = dp[1][i] % mod\\n        dp[2][i + 1] = dp[2][i] % mod\\n        dp[3][i + 1] = dp[3][i] % mod\\n        if _s == \"a\":\\n            dp[1][i + 1] += dp[0][i]\\n        if _s == \"b\":\\n            dp[2][i + 1] += dp[1][i]\\n        if _s == \"c\":\\n            dp[3][i + 1] += dp[2][i]\\n        if _s == \"d\":\\n            dp[0][i + 1] *= 3\\n            dp[1][i + 1] *= 3\\n            dp[1][i + 1] += dp[0][i]\\n            dp[2][i + 1] *= 3\\n            dp[2][i + 1] += dp[1][i]\\n            dp[3][i + 1] *= 3\\n            dp[3][i + 1] += dp[2][i]\\n    return str(int(dp[3][-1] % (10**9 + 7)))\\n\\n\\nif __name__ == '__main__':\\n    print(solve(input()))\\n", "target": "640", "substitutes": {"string": ["native", "phrase", "meaning", "input", "su", "object", "c", "slice", "service", "pair", "data", "value", "complete", "name", "expression", "section", "ring", "single", "list", "array", "space", "strings", "String", "password", "original", "word", "source", "st", "number", "stream", "message", "address", "term", "str", "text", "m", "comment", "p"], "s": ["states", "services", "o", "ls", "S", "sync", "ssl", "su", "speech", "c", "search", "d", "service", "ses", "ws", "a", "src", "single", "array", "space", "strings", "g", "sections", "h", "ds", "lines", "sf", "sq", "si", "u", "address", "e", "f", "spec", "b", "ps", "sb", "w", "sv", "params", "sound", "v", "sg", "m", "r", "str", "now", "words", "p"], "n": ["o", "k", "x", "j", "c", "np", "d", "nb", "name", "num", "t", "ni", "y", "mn", "h", "network", "span", "nu", "u", "len", "net", "f", "e", "b", "ns", "sn", "z", "l", "m", "nc", "p", "N", "conn"], "dp": ["tp", "grade", "dt", "db", "c", "port", "phi", "pd", "vp", "ph", "python", "gap", "dh", "dc", "ip", "dep", "dd", "shape", "sup", "drop", "ep", "dn", "grad", "p", "wp", "loc", "http", "x", "px", "pg", "d", "data", "sl", "hp", "DP", "dir", "do", "cp", "dr", "py", "pp", "dm", "deb", "eps", "dat", "fp", "lp", "di", "df", "wm", "dos", "manager", "input", "pb", "sp", "point", "direction", "list", "pkg", "mand", "password", "ds", "plugin", "dB", "beta", "channel", "adr", "e", "imp", "ps", "params", "v", "req", "bp", "gp", "page", "np", "device", "prop", "pos", "upp", "yp", "wd", "project", "api", "div", "dim", "rep", "pad", "pipe", "address", "pre", "b", "dl", "bb", "dist"], "_": ["k", "out", "x", "j", " __", " p", "__", " g", "g", " j", "val", "ip", "f", "I", "q", "p"], "mod": [" m", "j", "c", "mad", "sub", "num", "mn", "ms", "dc", "null", "mods", "sup", "pm", "grad", "m", "temp", "mode", "log", "x", "tr", "scale", "lex", "system", " r", "post", "max", "add", "r", "pi", "sec", "step", "D", "S", "mac", "modified", "mult", "int", "debug", "circ", " j", "pack", "comp", "len", "ed", "mega", "Mod", "sed", "com", "complex", "req", "form", "oct", "od", "ver", " p", "check", "min", "div", "cm", "row", " Mod", "lock", "MOD", "q", "module", "lib", "sign", "mix"], "i": ["mini", "pi", "di", "o", "uri", "it", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "phi", "ri", "oi", "a", "io", "ie", "name", "cli", "int", "ind", "ini", "ui", "t", "ni", "bi", "info", "id", "y", "api", "site", "key", "\u0438", "ix", "index", "source", "ip", "multi", "iv", "si", "u", "iu", "fi", "e", "ti", "I", "mu", "b", "my", "status", "ai", "im", "p", "qi", "v", "l", "ii", "ic", "li", "m", "ei", "zi"], "_s": ["ofy", "Defs", "Defsg", "_si", " theside", "_y", "ofs", " thes", "libi", "ofside", "_i", "Defp", "_site", "_t", "ofsite", "libp", "ofssl", "libs", "_ssl", " _si", "_p", "libsu", "oft", " _ss", "_ss", " _i", "_side", " thessl", " thet", "_sg", " _p", "Deft", "_su", " _su"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\n# import math\\n# import re                                    # re.compile(pattern) => ptn obj; p.search(s), p.match(s), p.finditer(s) => match obj; p.sub(after, s)\\n# from collections import deque                # deque class. deque(L): dq.append(x), dq.appendleft(x), dq.pop(), dq.popleft(), dq.rotate()\\n# from collections import defaultdict          # subclass of dict. defaultdict(facroty)\\n# from collections import Counter              # subclass of dict. Counter(iter): c.elements(), c.most_common(n), c.subtract(iter)\\n# from heapq import heapify, heappush, heappop # built-in list. heapify(L) changes list in-place to min-heap in O(n), heappush(heapL, x) and heappop(heapL) in O(lgn).\\n# from heapq import nlargest, nsmallest        # nlargest(n, iter[, key]) returns k-largest-list in O(n+klgn).\\n# from itertools import product                # product(iter, repeat=n)\\n# from itertools import accumulate             # accumulate(iter[, f])\\n# from functools import reduce                 # reduce(f, iter[, init])\\n# from bisect import bisect_left, bisect_right # bisect_left(a, x, lo=0, hi=len(a)) returns i such that all(val<x for val in a[lo:i]) and all(val>-=x for val in a[i:hi]).\\n# from fractions import gcd                    # for Python3.4.3\\n\\n\\ndef main():\\n    mod = 10000007                  # 10^9+7\\n    inf = float('inf')\\n    input = sys.stdin.readline      # \u6539\u884c\u6587\u5b57\u304c\u6b8b\u308b\u3053\u3068\u306b\u6ce8\u610f\\n    sys.setrecursionlimit(10**6)    # 1000 -> 1000000\\n    def ii():  return int(input())\\n    def mi():  return map(int, input().rstrip().split())\\n    def lmi(): return list(map(int, input().rstrip().split()))\\n    def li():  return list(input().rstrip())\\n    \\n    \\n    n = ii()\\n    s = input().rstrip()\\n    print(s) if n >= 3200 else print(\"red\")\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "90", "substitutes": {}}
{"code": "# https://atcoder.jp/contests/abc078/tasks/arc085_a\\n\\nimport sys\\n# sys.setrecursionlimit(100000)\\n\\n\\ndef input():\\n    return sys.stdin.readline().strip()\\n\\n\\ndef input_int():\\n    return int(input())\\n\\n\\ndef input_int_list():\\n    return [int(i) for i in input().split()]\\n\\n\\ndef main():\\n    n, m = input_int_list()\\n    ans = (1900 * m + 100 * (n - m)) * 2**m\\n    print(ans)\\n\\n    return\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "308", "substitutes": {}}
{"code": "import sys\\nimport math\\nimport bisect\\nfrom collections import defaultdict,deque\\n\\n# input = sys.stdin.readline\\ndef inar():\\n    return [int(el) for el in input().split()]\\n# def find(a,b,c):\\n#     gc=math.gcd(a,b)\\n#     return math.gcd(gc,c)\\ndef main():\\n    n=int(input())\\n    string=input()\\n    r=[]\\n    g=[]\\n    b=[]\\n    for i in range(n):\\n        if string[i]==\"R\":\\n            r.append(i)\\n        elif string[i]==\"G\":\\n            g.append(i)\\n        else:\\n            b.append(i)\\n    ans=0\\n    r.sort()\\n    g.sort()\\n    b.sort()\\n    # print(r)\\n    # print(g)\\n    # print(b)\\n    # print(len(b))\\n    # ans1=0\\n    # fir=[]\\n    # for i in range(len(r)):\\n    #     for j in range(len(g)):\\n    #         for k in range(len(b)):\\n    #             ls=[r[i],g[j],b[k]]\\n    #             ls.sort()\\n    #             if ls[1]-ls[0]!=ls[2]-ls[1]:\\n    #                 ans1+=1\\n    #         fir.append(ans1)\\n    # # print(ans1)\\n\\n    # print(\"-------------------check---------------\")\\n    # are=[]\\n    for i in range(len(r)):\\n        for j in range(len(g)):\\n            ans+=len(b)\\n            chota=min(g[j],r[i])\\n            bada=max(g[j],r[i])\\n            diff=bada-chota\\n\\n            left=bisect.bisect_left(b,bada+diff)\\n            right=bisect.bisect_left(b,chota-diff)\\n\\n            lol=(bada+chota)\\n            if lol%2==0:\\n                beech=lol//2\\n                ind=bisect.bisect_left(b,beech)\\n                if ind<len(b) and b[ind]==beech:\\n                    ans-=1\\n            if (left<len(b) and b[left]==bada+diff):\\n                ans-=1\\n            if (right<len(b) and b[right]==chota-diff):\\n                ans-=1\\n\\n            # are.append(ans)\\n    print(ans)\\n    # for i in range(len(are)):\\n    #     print(are[i],fir[i])\\n\\n\\nif __name__ == '__main__':\\n    main()\\n\\n\\n\\n", "target": "294", "substitutes": {}}
{"code": "N = int(input())\\nX = list(map(int, input().split()))\\nY = sorted(X)\\nfor i in X:\\n    print(Y[N//2] if i <= Y[N//2-1] else Y[N//2-1])\\n\\n", "target": "16", "substitutes": {"N": ["U", "NA", "II", "D", "S", "R", "NS", "E", "B", "Ns", "T", "n", "J", "W", "A", "L", "G", "Part", "Num", "SN", "NB", "NT", "NM", " n", "Size", "Q", "I", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "X": ["U", "D", "S", "ZX", "CL", "x", "E", "XX", "Test", "XT", "B", "List", "T", "W", "J", "Array", "L", "DX", "IP", "UX", "Q", "I", "XY", "C", "PE", "XL", "TX", "V", "ML", "P", "XP", "K", "ID", "MX", "XXX", "IX", "M", "H", "F", "XM", "Z"], "Y": ["NY", "U", "Base", "MY", "D", "S", "x", "Py", "Do", "E", "Cy", "Sample", "XX", "B", "List", "T", "J", "Array", "Value", "A", "G", "L", "y", "Col", "JSON", "Size", "Co", "YC", "Q", "IO", "Year", "I", "Python", "XY", "My", "C", "IE", "V", "P", "Copy", "K", "ID", "Parts", "Code", "Pie", "O", "YA", "M", "YY", "F", "YP", "Z"], "i": ["pi", "di", "ji", "o", "it", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "ri", "phi", "a", "io", "start", "ori", "ind", "n", "bi", "id", "val", "isin", "ib", "ix", "index", "ip", "si", "u", "iu", "I", "ti", "b", "hi", "ai", "z", "l", "ii", "li", "ei", "p", "zi"]}}
{"code": "n = int(input())\\ns = input()\\nnums = [0]\\nx = 0\\nfor i in range(n):\\n    if s[i] == \"I\":\\n        x += 1\\n    else:\\n        x -= 1\\n    nums.append(x)\\nprint(max(nums))", "target": "697", "substitutes": {"n": ["o", "k", "j", "c", "np", "d", "nb", "Ns", "num", "t", "y", "count", "min", "h", "nn", "nl", "number", "u", "size", "f", "max", "b", "ns", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "s": ["states", "ls", "o", "parts", "rs", "S", "su", "c", "ws", "ins", "ses", "a", "ss", "strings", "y", "g", "os", "ts", "ds", "gs", "lines", "si", "sets", "spec", "f", "e", "us", "ps", "ns", "b", "ans", "es", "sb", "sg", "xs", "words", "p"], "nums": [" nuss", "Nums", "nanum", "coms", "cumers", "gnum", "nults", "anumbers", "cums", "anoms", "num", "Num", "nanums", "Numbers", "Nults", "Numers", "nanults", "cumbers", "Noms", "noms", "gnums", "anums", "nanuss", "anum", "gnumers", "cum", " nults", "Nuss", " num", "gnumbers", "nuss", "numbers", "numers"], "x": ["k", "xp", "xi", "j", "c", "d", "xy", "name", "int", "fix", "num", "t", "y", "test", "key", "xxx", "na", "ax", "h", "xt", "xe", "sex", "rx", "ix", "index", "fx", "number", "ex", "xc", "u", "f", "max", "dx", "e", "X", "xx", "xes", "w", "z", "v", "l", "cross", "m", "xs", "p"], "i": ["pi", "k", "xi", "j", "c", "gi", "ci", "d", "yi", "phi", " I", "a", "ie", "start", "ind", "id", "y", "h", "ix", "index", "si", "u", "e", "I", "ti", "f", "b", "q", "ai", "z", "v", "l", "ii", "li", "r", "m", "p"]}}
{"code": "n = int(input())\\na = list(filter(lambda x : x & 1 or x % 3 == 0 or x % 5 == 0, map(int, input().split())))\\nprint('APPROVED' if len(a) == n else 'DENIED')", "target": "381", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "an", "num", "t", "ni", "i", "y", "na", "g", "nn", "nan", "nl", "number", "aa", "nr", "u", "len", "fn", "f", "e", "adj", "b", "nt", "ns", "sn", "no", "nor", "z", "l", "v", "m", "nc", "p", "ne", "N"], "a": ["area", "access", "x", "c", "aw", "ac", "ab", "aux", "args", "da", "an", "s", "array", "A", "fa", "y", "alpha", "na", "sa", "ana", "span", "aa", "u", "f", "e", "b", "ca", "ans", "ga", "ai", "w", "z", "ba", "l", "ea", "m", "p", "au"]}}
{"code": "\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\nmod=10**9+7\\n\\ndef main():\\n    n,a,b=MI()\\n    print(min(n*a,b))\\n\\n\\nmain()", "target": "751", "substitutes": {"mod": ["sec", "log", "pi", "loc", "j", "scale", "section", "mult", "dec", "ind", "fun", " MOD", "sort", "round", "div", "dim", "cm", " Mod", "MOD", "Mod", "module", " div", "l", "m", "r", "small", "mix"], "n": ["o", "k", "x", "j", "c", "d", " N", "nb", "an", "num", "s", "t", "i", "y", "g", "min", "number", "u", "f", "e", "ns", "ai", "w", "z", "l", "m", "r", "p", "ne", "N"], "a": ["ma", "o", "k", "x", "j", "c", "d", "ac", "ab", "da", "s", "an", "A", "fa", "i", "y", "alpha", "na", "min", "sa", "aa", "u", "va", "f", "e", "am", "ca", "ga", "ai", "w", "ae", "z", "ba", "ea", "aj", "m", "p"], "b": ["o", "k", "j", "c", "d", "nb", "ab", "B", "s", "A", "rb", "bi", "i", "y", "bs", "fb", "h", "aa", "wb", "lb", "e", "f", " B", "sb", "w", "z", "ba", "l", "v", "m", "bb", "p"]}}
{"code": "A, P = map(int, input().split())\\n\\nimport math\\nprint(math.floor((3*A + P)/2))", "target": "428", "substitutes": {"A": ["U", "Ca", "NA", "D", "S", "Alpha", "a", "B", "CA", "T", "PA", "W", "Y", "AM", "Am", "alpha", "GA", "TA", "AP", "Average", "Ar", "AA", "X", "C", "MA", "API", "AF", "AB", "H", "M", "F", "N", "LA"], "P": ["PU", "U", "D", "S", "Py", "R", "E", "TP", "PO", "B", "T", "PA", "W", "J", "Y", "L", "G", "IP", "Port", "PT", "Q", "X", "C", "PP", "PE", "V", "K", "p", "BP", "CP", "NP", "H", "M", "F", "N"]}}
{"code": "def main():\\n    from sys import stdin\\n    input = stdin.readline\\n\\n    n, m, k = map(int, input().split())\\n    f = [[] for i in range(n)]\\n    BL = [[] for i in range(n)]\\n    ans = [0] * n\\n    for _ in range(m):\\n        a, b = map(int, input().split())\\n        f[a-1].append(b-1)\\n        f[b-1].append(a-1)\\n    for _ in range(k):\\n        c, d = map(int, input().split())\\n        BL[c-1].append(d-1)\\n        BL[d-1].append(c-1)\\n    D = {}\\n    parent = [-1] * n\\n    visited = [False] * n\\n    for root in range(n):\\n        if visited[root]:\\n            continue\\n        D[root]  = set([root])\\n        stack = [root]\\n        while stack:\\n            x = stack.pop()\\n            visited[x] = True\\n            parent[x] = root\\n            for t in f[x]:\\n                if visited[t]:\\n                    continue\\n                D[root].add(t)\\n                stack.append(t)\\n    for i in range(n):\\n        grp = D[parent[i]]\\n        tans = len(grp) - len(f[i]) - 1\\n        for block in BL[i]:\\n            if block in grp:\\n                tans -= 1\\n        ans[i] = tans\\n    print(*ans)\\nmain()\\n", "target": "368", "substitutes": {"input": ["file", "string", "out", "feed", "op", "current", "param", "down", "raw", "output", "sum", "data", "session", " Input", "format", "expression", "submit", "int", "util", "view", "print", "single", "option", "pull", "list", "array", "range", "config", "enter", "call", "INT", "image", "iter", "version", "command", "request", "source", "next", "null", "error", "stream", "but", " inputs", "fn", "help", "reader", "enum", "select", "load", "filter", "form", "l", "accept", "text", "str", "Input", "comment", "until", "exec", "method"], "n": ["o", "j", "nm", " N", "nb", "node", "num", "s", "an", "y", "api", "mn", "g", "en", "network", "un", " l", "u", "net", " ni", "e", "max", "nt", "ns", "sn", "no", "w", "q", "z", "l", "v", "r", "nc", "ln", "p", "M", "ne", "N"], "m": ["o", "mc", "j", "s", "an", "num", "y", "mn", "g", "h", "ms", "cm", "u", "e", "mi", "w", "z", "dm", "v", "l", "r", "M", "p", "km", "N"], "k": ["o", "ke", "kk", "j", "ak", "s", "y", "sk", "g", "h", "ks", "u", "e", "ki", "q", "w", "z", "K", "l", "v", "r", "p", "km"], "f": ["file", "df", "fs", "o", "frame", "lf", "family", "data", "fl", "af", "F", "s", "fa", "info", "rf", "fo", "fe", "g", "fd", "h", "self", "tf", "fx", "fg", "sf", "aff", "u", "fi", "e", "fen", "q", "w", "FF", "z", "ref", "l", "v", "bf", " F", "fr", "cf", "p", "r", "form", "fp"], "i": ["pi", "it", "di", "o", "xi", "j", "gi", "ci", "yi", "io", "ie", "int", "s", "ui", "ini", "ni", "bi", "\u0438", "id", "iq", "y", "ion", "isin", "index", "ip", "si", "il", "u", "iu", "iii", "ite", "e", "ti", "I", "ai", "p", "qi", "l", "v", "ii", "li", "r", "abi", "ei"], "BL": ["PL", "UL", "SH", "Bl", "BS", "NL", "B", "fl", "BB", "GL", "FL", "W", "RL", "ll", "LI", "L", "IL", "TL", "NB", "SL", "bl", "nl", "Q", "BR", "AN", "DB", "FB", "SB", "SF", "DF", "Block", "LL", "V", "ML", "P", "FF", " bl", "BC", "DL", "F", "N", "CL"], "ans": ["lp", "ls", "ANN", "Ann", "aning", "anned", "ins", "atten", "ants", "Chan", "all", "an", "ops", "s", "A", "anc", " means", "anon", "AS", "annot", "na", "plan", "ds", "blocks", "ids", "NN", "nan", "An", "nn", "span", "can", "main", "names", "AN", "cas", "aned", "ANS", "ann", "lan", "ns", "scan", "lang", "chan", "ai", "ani", "annels", " scans", "groups", "Scan"], "_": ["j", " p", " time", "all", "time", "g", " j", " self", "un", "ip", "il", "len", "I", "q", "p", "l", "ic"], "a": ["o", "ac", "ab", "af", "int", "da", "an", "s", "A", "fa", "y", "alpha", "sa", "aa", "u", "va", "e", "ad", "ca", "am", "ai", "w", "ae", "z", "ba", "l", "r", "p"], "b": ["o", "eb", "j", "ob", "ab", "B", "s", "an", "fa", "y", "bs", "fb", "h", "aa", "u", "lb", "e", "sb", "w", "z", "ba", "l", "v", "r", "p"], "c": ["o", "j", "cy", "ci", "col", "ac", "uc", "s", "cc", "ce", "ch", "cs", "y", "ec", "g", "dc", "cu", "u", "e", "ad", "ca", "C", "w", "z", "l", "v", "lc", "sc", "r", "cf", "p"], "d": ["di", "o", "dt", "data", "nd", "bd", "dec", "da", "s", "y", "dy", "g", "h", "ds", "dr", "dc", "u", "e", "dd", "ad", "q", "w", "z", "l", "v", "cd", "r", "dat", "p", "ld"], "D": ["DT", "S", "CD", "R", "Do", "E", "Ds", "DIR", "B", "T", "DO", "W", "PD", "Y", "DP", "G", "Di", "L", "A", "DD", "DM", "DS", "MD", "DI", "Q", "DB", "I", "X", "C", "DF", "DC", "V", "P", "DL", "DN", "O", "M", "DH", "F", "DE", "N", "Z"], "parent": ["file", "df", "type", "o", "pid", "fat", "node", "Parent", "col", "name", "data", "parents", "section", "context", "pos", "int", "an", "depth", "cache", "config", "leaf", "id", "result", "g", "image", "self", "line", "span", "ip", "source", "function", "e", "tree", "shape", "child", "w", "layer", "chain", "l", "ref", "r", "comment", "p", "path", "children"], "visited": ["missited", "vised", "versalled", "heralled", "missed", "VISed", "Visritten", "Visiting", "VISritten", "visalled", "Vised", "Visit", "viewited", "versitted", "viewiting", "viewed", "visITED", " Visritten", "VISitted", "visiting", "serviting", "missit", "viewit", "served", " Visit", "versited", " Visitted", "Visalled", "VISited", "visitized", "servited", "VISITED", "missITED", "heritized", "VISit", "visit", "visitted", "versitized", "VisITED", "Visited", "heritted", "servit", "herited", "Visitized", "visritten", " Visited", "Visitted"], "root": ["core", "df", "o", "type", "rew", "gi", "current", "node", "back", "name", "bc", "head", "instance", "roots", "reverse", "an", "depth", "id", "site", "ree", "y", "leaf", "test", "time", "key", "g", "transform", "h", "component", "url", "self", "top", "null", "error", "row", "gener", "u", "oot", "tree", "e", "default", "nt", "term", "child", "no", "w", "p", "chain", "v", "result", "length", "r", "Root", "right", "ei", "form", "path", "children"], "stack": ["history", "file", "mount", "first", "trace", "work", "ul", "exp", "cycle", "slice", "left", "back", "queue", "context", "scope", "complete", "start", "document", "fl", "switch", "view", "list", "depth", "cache", "config", "progress", "leaf", "loop", "pack", "live", "ST", "iter", "self", "change", "set", "sequence", "st", "Stack", "parse", "process", "leave", "play", "tree", "end", "load", "stage", "pop", "w", "layer", "chain", "v", "wait", "fr", "p", "up", "pe", "cl", "children"], "x": ["o", "step", "xp", "xi", "ctx", "xy", "node", "s", "y", "tx", "key", "test", "sw", "xxx", "g", "xa", "h", "xt", "xe", "rx", "ct", "ix", "index", "ex", "xc", "u", "e", "dx", "X", "xx", "xes", "wx", "w", "z", "l", "v", "cross", "r", "xs", "p", "pe"], "t": ["it", "type", "o", "tp", "j", "tm", "node", "name", "T", "int", "ot", "s", "id", "y", "test", "tx", "tw", "time", "python", "g", "ty", "h", "xt", "ts", "tt", "tz", "tf", "table", "iot", "u", "nt", "e", "tree", "ti", "q", "w", "z", "l", "v", "te", "r", "p"], "grp": ["ferpy", "roup", "GrP", " grpr", "ferp", "curlp", "roupy", " grpy", "curP", " grP", "Grpc", "ferP", "gorP", "grpy", " grlp", "gorp", "grpn", "gorg", "curg", "curpr", " grpc", "ferpn", "grpr", "grg", " grpn", "grP", "gorpr", "Grp", "Grlp", "grpc", "rouP", " grg", "grlp", "curpc", "curp", "roupn"], "tans": ["Taned", "saned", "tean", "Tanners", "utants", "utan", "tanners", " taning", " tanners", "san", "notan", "teanners", "teaning", "Tations", "Taning", "taning", "tan", "sans", "ttan", "sations", "Tans", "utans", " tan", "tations", "taos", "notaned", "ttaos", "teans", "utaos", "Tants", "notations", "Tan", "tants", "taned", "notans", "ttants", "ttans", "Taos"], "block": ["unit", "type", "inv", "out", "name", "section", "bc", "switch", "anch", "blocking", "num", "blocks", "bl", "un", "line", "ip", "bin", "number", "error", "row", "run", "blank", "outer", "label", "lock", "Block", "join", "chain", "length", "comment", "group"]}}
{"code": "N = int(input())\\nab = [list(map(int, input().split())) for _ in range(N)]\\ncd = [list(map(int, input().split())) for _ in range(N)]\\nab.sort(reverse=True)\\ncd.sort()\\np = 0\\nfor c in cd:\\n    ac = [-1, -1]\\n    for a in ab:\\n        if c[0] > a[0] and c[1] > a[1] and ac[1] < a[1]:\\n            ac = a\\n    if ac != [-1, -1]:\\n        p += 1\\n        ab.remove(ac)\\n\\nprint(p)\\n", "target": "591", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "NC", "B", "Ns", "T", "n", "num", "Y", "A", "L", "Num", "CNN", "NT", "NM", " n", "Size", "NN", "number", "Q", "I", "Number", "X", "C", "Ne", "V", "P", "K", "KN", "O", "M", "F", "Z"], "ab": ["eb", "abb", "db", "account", "ak", "acl", "ob", "cb", "nb", "app", "bc", "af", "ub", "abs", " AB", "array", "av", "tab", "Ab", "abe", "bs", "lab", "hab", " cab", " tab", "fb", "abc", "fab", "ib", "bl", "acc", "ag", "ach", "am", "ad", "ca", "b", "car", "sb", "ai", "abl", "com", "ba", "cr", "AB", "bb", "ace", "abi", "ap"], "_": ["out", "x", " un", " line", " time", "s", "non", "___", "val", " local", "un", " content", "f", " block", "ing", " the", " file"], "cd": ["core", "od", "CD", "ecd", "ci", "d", "cb", "cod", "uc", "nd", "af", "ast", "ck", "cc", "anc", "ce", "ch", "az", "cs", "id", "cand", "ah", "abc", "cp", "ct", "md", "ord", "cm", "dc", "xc", "xd", "dd", "ad", "ca", "vd", "DC", "add", "cr", "conf", "ace", "cf", "cl"], "p": ["lp", "pi", "tp", "o", "part", "at", "k", "x", "j", "op", "sp", "np", "d", "ar", "point", "pat", "pos", "pa", "n", "per", "s", "t", "i", "y", "h", "cp", "u", "pp", "f", "e", "pre", "b", "ps", "code", "P", "ep", "z", "l", "v", "pc", "m", "ap", "bp", "count", "fp"], "c": ["o", "at", "k", "x", "d", "uc", "bc", "n", "cc", "anc", "an", "i", "ic", "ec", "g", "h", "dc", "ach", "xc", "u", "cu", "f", "e", "b", "ad", "ca", "unc", "C", "arc", "ae", "w", "z", "lc", "l", "v", "pc", "ace", "m", "cat", "cf", "nc", "r", "oc"], "ac": ["Ac", "at", "k", "x", "mac", "aw", "ar", "ak", "acl", "uc", "af", "an", "anc", "inc", "cc", "ec", "iac", "alpha", "sa", "ant", "ack", "abc", "ct", "acc", "dc", "jac", "aci", "aa", "ach", "cu", "ad", "am", "ca", "arc", "C", "unc", "sac", "ai", "ae", "asa", "ic", "pc", "ace", "AC", "acs", "ap", "oc", "enc"], "a": ["ma", "o", "at", "x", "ar", "d", "n", "an", "s", "A", "i", "y", "alpha", "na", "sa", "ah", "abc", "aa", "aff", "ach", "u", "f", "e", "ad", "am", "ca", "b", "ai", "ae", "w", "z", "ba", "asa", "aaa", "ace", "m", "ap", "au"]}}
{"code": "def main():  \\n  import sys\\n  input = sys.stdin.readline\\n  n,p = [int(i) for i in input().split()]\\n  s = input()\\n  ans = 0\\n  \\n  import math\\n  def nCr(n, r):\\n    if n < r:\\n      return 0\\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\\n\\n  if p == 2 or p == 5:\\n      for i in range(n):\\n          if int(s[i]) % p == 0:\\n              ans += i + 1\\n      print(ans)\\n      exit()\\n\\n  else:\\n    chk = [0]*p\\n    chk[0] = 1\\n    m = 0\\n    for i in range(n)[::-1]:\\n      m = (int(s[i])*pow(10,n-1-i,p)+m)%p\\n      chk[m] += 1\\n    for i in chk:\\n      ans += nCr(i,2)\\n    print(ans)\\nif __name__ == '__main__':\\n    main()\\n", "target": "448", "substitutes": {"input": ["file", "type", "empty", "string", "out", "current", "param", "argument", "raw", "output", "data", " Input", "format", "int", " output", "pull", "list", "array", "config", "enter", "call", "connect", "version", "forward", "parent", "source", "request", "header", "line", "error", "table", "stream", " inputs", "run", "process", "fn", "f", "exec", "reader", "select", "reset", "help", "inf", "include", "accept", "Input", "comment", "temp", "form", "path", "method"], "n": ["pi", "o", "k", "x", "j", "c", "np", "d", " fn", "yn", " N", "nb", "a", "num", "an", "t", "y", "g", "en", "h", "network", "nn", "un", " c", "nr", "u", "net", " ni", "f", "e", "nt", "b", "ns", "pn", "rn", "sn", "no", "w", "z", " ng", "l", "v", "nc", "ne", "N"], "p": ["pi", "tp", "o", "part", "k", "x", "j", "op", "c", "sp", "np", "d", "port", "a", "pro", "pa", "per", "t", "bp", "y", "g", "h", "cp", "pr", "py", "ip", "u", "pp", "e", "f", "pre", "b", "ps", "pn", "like", "q", "w", "P", "z", "pm", "v", "l", "pc", "ap", "up", "pe", "fp"], "i": ["pi", "di", "uri", "it", "o", "iw", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ri", "phi", "a", "io", "ie", "start", "pos", "cli", "int", "ind", "ini", "num", "t", "ui", "ni", "info", "bi", "y", "id", "on", "ix", "index", "ip", "eni", "si", "u", "iu", "e", "f", "I", "ti", "b", "ai", "z", "qi", "l", "v", "ii", "li", "ei", "abi"], "s": ["ls", "o", "parts", "services", "S", "c", "sp", "d", "ins", "ses", "sl", "an", "t", "strings", "cs", "y", "g", "sa", "os", "south", "si", "u", "spec", "e", "f", "b", "ps", "ns", "sb", "w", "l", "v"], "ans": ["ls", "san", "aning", "nas", "ras", "ins", "ars", "ss", "ants", "amps", "args", "an", "anc", "ads", "ats", "cs", "ents", "ams", "sk", "na", "os", "anas", "plan", "ds", "ms", "ks", "nan", "nn", "ips", "ana", "can", "anes", "span", "AN", "cas", "aned", "anne", "ANS", "ann", "lan", "ns", "ons", "scan", "mas", "features", "ions", "ai", "ani", "ays", "params", "mean", "han", "eps", "aus", "any"], "r": ["rs", "o", "k", "x", "j", "c", "R", "ar", "d", "ri", "re", "rh", "rb", "t", "range", "rf", "rt", "ir", "pr", "nr", "u", "e", "f", "rn", "b", "w", "cr", "l", "v", "right", "ru", "sr"], "chk": ["charq", "Chks", "charks", "chf", "charm", "chnk", "cheks", "chek", "chm", "chep", "chnks", "Chm", "chq", "chks", " chc", "chnp", " chp", " chf", "Chf", "Chq", "chnc", "chec", " chks", "chem", "chc", "chark", "chef", " chq", "chp", "Chc", " chm", "Chk"], "m": ["ma", "pi", "o", "mc", "k", "x", "j", "tm", "c", "fm", "gm", "d", "om", "a", "mod", "an", "mr", "y", "mon", "mn", "machine", "g", "h", "ms", "ym", "month", "cm", "model", "u", "mp", "f", "e", "mu", "b", "am", "mi", "sm", "mm", "pm", "w", "z", "dm", "v", "l", "M", "bm"]}}
{"code": "def solve():\\n  N, K, C = map(int, input().split())\\n  workable = [i for i, s in enumerate(input()) if s==\"o\"]\\n  if len(workable) == K:\\n    return workable\\n    \\n  latest = set()\\n  prev = workable[-1]+C+1\\n  for x in reversed(workable):\\n    if prev - x > C:\\n      latest.add(x)\\n      prev = x\\n  if len(latest) > K:\\n    return []\\n  must = []\\n  prev = -C-1\\n  for x in workable:\\n    if x - prev > C:\\n      if x in latest:\\n        must.append(x)\\n      prev = x\\n  return must\\n\\nfor i in solve():\\n  print(i+1)\\n", "target": "647", "substitutes": {"N": ["NA", "D", "S", "R", "NS", "E", "NC", "B", "Ns", "T", "n", "J", "W", "Y", "Ni", "L", "NT", "NN", "Q", "I", "X", "V", "P", "O", "M", "F", "Z"], "K": ["U", "KR", "D", "k", "S", "R", "E", "SK", "NC", "B", "T", "KE", "W", "J", "Y", "L", "G", "KK", "HK", "Q", "PK", "I", "X", "V", "P", "CC", "CP", "KN", "Sk", "KS", "O", "H", "M", "KC", "F", "CH", "Z"], "C": ["U", "CI", "D", "k", "S", "CN", "CD", "c", "R", "E", "NC", "B", "CA", "T", "W", "n", "Y", "A", "L", "G", "CNN", "UC", "CCC", "YC", "JC", "CF", "WC", "I", "CS", "X", "CW", "DC", "FC", "V", "P", "CC", "CP", "CR", "EC", "VC", "O", "KC", "H", "M", "Cu", "F", "CM", "CE", "CL"], "workable": ["workative", "Workable", "checkee", "worksable", " workee", " workible", "workerative", "workerible", "workingables", "checkability", "Worktable", "checkable", "worktable", " workorable", " Workability", " workability", "playables", "workables", "Workables", "workible", " Worktable", "worksible", "workstable", " Workable", "Workorable", " workative", "Workible", "workorable", "playible", "workee", "checkative", "worksability", "worksables", "Workee", " worktable", "playable", "workingable", "workerable", "workingtable", "workeree", "workingible", " workables", "workerorable", " Workables", "workerability", "playtable", "workability"], "i": ["history", "pi", "it", "o", "di", "uri", "k", "xi", "j", "c", "gi", "ci", "d", "current", "yi", "ri", "phi", "a", "io", "ie", "int", "ind", "n", "bi", "id", "y", "h", "ix", "index", "ip", "si", "u", "iu", "f", "I", "e", "b", "hi", "im", "ai", "z", "chi", "qi", "v", "l", "ii", "ic", "li", "ei", "r", "p", "zi"], "s": ["ls", "o", "S", "su", "xi", "sin", "c", "sp", "d", "ws", "ses", "a", "ss", "n", "sie", "y", "sw", "os", "sa", "g", "ms", "gs", "sf", "sq", "si", "e", "sym", "us", "ps", "ns", "ans", "es", "w", "sv", "z", "v", "sg", "sc", "m", "xs", "p"], "latest": ["history", "compatible", "future", "case", "common", "later", "first", "required", "best", "current", "existing", "only", "local", "same", " final", "instance", " first", "valid", "better", "initial", "list", "missing", "unique", "static", "original", "multiple", "custom", "classic", " static", "next", "master", "py", "union", "largest", "always", "liest", "last", "famous", "final", "Latest", "inline", " classic", "every", "stable", "toc", "new", "other", "essential", "standard", " Latest", "chain", "optional", "shared", "li", "historic", "recent"], "prev": ["history", "cur", "o", "loc", "first", "xp", "work", "op", "c", "np", "current", "cycle", "old", "inter", "past", "Previous", "reverse", "re", "var", "cache", "root", "cmp", "ec", "ax", "original", "h", "pres", "rem", "self", "rx", "ix", "next", "post", "last", "xc", "nr", "rel", "pre", "opt", "max", "res", "rev", "before", "X", "xx", "rec", " Prev", "code", "Prev", "vious", "wx", "upper", "init", "ep", "v", "cross", "jp", "orig", "r", "xs", "skip", "nc", "p", "oc"], "x": ["history", "o", "k", "sync", "first", "work", "xi", "xp", "c", "exp", "best", "ctx", "xy", "old", "a", "past", "int", "n", "all", "an", "initial", "t", "id", "y", "tx", "python", "xxx", "time", "ax", "h", "original", "change", "self", "word", "xt", "sex", "ix", "index", "rx", "xe", "ex", "xc", "u", "f", "e", "one", "max", "opt", "X", "code", "xx", "xf", "rev", "xes", "new", "wx", "w", "z", "example", "v", "l", "cross", "orig", "r", "xs", "p"], "must": ["sec", "ul", "should", "required", "aw", "best", "currently", "ac", "only", "a", "uc", "could", "util", " Must", "all", "list", "missing", "please", "leaf", "anything", "annot", "co", "can", "which", "null", "ost", "always", "Must", "last", "func", "may", "each", "new", "will", "wx", "was", "also", "chain", "optional", "ic", "wait", "acs", "oc", "any", "asc"]}}
{"code": "def cul(x,X):\\n    dic={0:1}\\n    for i in range(len(x)):\\n        tmp={}\\n        for j in dic:\\n            tmp[j+x[i]]=1\\n            tmp[j-x[i]]=1\\n        dic=tmp\\n    if X in dic: return True\\n    else: return False\\n\\nS=input()\\ns=list(S.split(\"T\"))\\nX,Y=map(int,input().split())\\nx,y=[len(i) for i in s[::2]],[len(i) for i in s[1::2]]\\nif S[0]==\"F\": X=abs(X-x.pop(0))\\nY=abs(Y)\\n\\ndx=sorted(x,reverse=True)\\ndy=sorted(y,reverse=True)\\n\\nprint(\"Yes\" if cul(dx,X) and cul(dy,Y) else \"No\")", "target": "753", "substitutes": {"x": ["xp", "input", "xi", "c", "d", "xy", "XX", "event", "pair", "data", "int", "n", "t", "id", "xml", "xxx", "ax", "h", "rx", "ix", "index", "ex", "xc", "u", "size", "f", "e", "b", "xx", "shape", "wx", "q", "w", "P", "z", "v", "cross", "l", "pe", "m", "xs", "p"], "X": ["U", "D", "Width", "R", "Do", "XX", "B", "All", "T", "Data", "W", "J", "A", "L", "G", "DX", "PH", "IP", "Val", "ix", "FW", "Q", "WH", "WS", "Length", "I", "Tx", "XY", "xx", "C", "XL", "DC", "TX", "V", "FF", "P", "z", "XP", "CC", "XXX", "H", "M", "YY", "F", "xs", "N", "Z"], "dic": [" dice", "odic", " Dic", "Dic", "xdic", " dics", "doc", "Dicity", " Dice", "xdicity", "bic", "dicity", "dics", "boc", "odIC", "odics", "dicc", "fic", "biac", "dice", " dIC", "xdIC", "indic", "xdict", " dicc", "fiac", "DIC", " Dicc", " Dics", "indice", "dIC", "odict", " dict", "diac", "foc", " diac", "bict", " doc", "dict", "fics", "indics", "indicc", "Dict", " dicity", "bIC", "bics"], "i": ["pi", "di", "ji", "o", "it", "part", "k", "xi", "c", "gi", "ci", "d", "yi", "phi", "a", "ie", "int", "ind", "n", "ini", "ui", "t", "bi", "id", "iq", "on", "ij", "ix", "index", "ip", "si", "il", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "p", "qi", "v", "l", "ii", "li", "m", "io", "zi"], "tmp": ["pi", "tp", "Temp", "sp", "np", "slice", "append", "tc", "phi", "nb", "copy", "dest", "data", "output", "xy", "const", "current", "vt", "cache", "t", "config", "array", "buf", "clip", "test", "result", "tab", "cmp", "ignore", "xxx", "fb", "cp", "tt", "py", "pad", "fake", "mp", "foo", "pre", "pp", " ff", "pot", "obj", "b", "stuff", "sup", "shape", "default", "wx", "sb", "emp", "params", "v", "flat", "storage", "txt", "xs", "XXX", "bb", "p", "temp", "now"], "j": ["it", "ji", "js", "k", "_", "xi", "c", "d", "jc", "ie", "int", "ind", "n", "J", "g", "ax", "ij", "h", "ix", "index", "si", "f", "I", "adj", "b", "q", "im", "z", "v", "jp", "ii", "aj", "li", "l", "m", "p"], "S": ["SE", "U", "SH", "SO", "D", "SS", "R", "NS", "Split", "B", "T", "W", "Si", "F", "SI", "A", "L", "G", "String", "SN", "Q", "WS", "Set", "I", "CS", "SU", "C", "V", "Sl", "P", "O", "H", "M", "SL", "N", "Z"], "s": ["states", "parts", "ls", "js", "sync", "c", "d", "ins", "ses", "a", "ss", "n", "Si", "t", "strings", "split", "g", "os", "h", "ds", "ks", "si", "u", "sets", "spec", "f", "e", "ys", "b", "ps", "ns", "es", "w", "z", "ims", "l", "v", "xs", "its", "p"], "Y": ["NY", "U", "ey", "MY", "D", "Py", "Cy", "E", "XX", "SY", "B", "ny", "Data", "T", "W", "J", "Long", "zy", "A", "L", "G", "Val", "py", "Q", "YE", "I", "Joy", "XY", "My", "Ty", "TX", "yy", "V", "P", "z", "ID", "TY", "YA", "M", "YY", "F", "vy", "N", "Z"], "y": ["ey", "sy", "ya", "cy", "d", "xy", "yi", "ry", "ny", "n", "zy", "t", "ye", "ay", "py", "yt", "f", "b", "yy", "w", "z", "v", "l", "opy", "p", "sky", "vy", "isy"], "dx": ["D", "distance", "xp", "px", "np", "d", "xy", "eddy", "XX", "Ds", "data", "diff", "pixel", "DX", "ax", "ds", "phy", "dh", "md", "ix", "fx", "Delta", "foo", "xd", "xx", "zx", "wx", "z", "cd", "xs", "dist", "p", "dq"], "dy": ["ey", "D", "sy", "fy", "distance", "iy", "xi", "ded", "d", "xy", "eddy", "phi", "ny", "zy", "xxx", "ds", "phy", " Dy", "py", "dd", "b", "XY", "xx", "yd", "ish", "yy", "z", "ii", "ady", "idy", "p", "vy"]}}
{"code": "print \"\".join(str([[\"%dx%d=%d\"%(x,y,x*y) for y in range(1,10)] for x in range(1,10)]).replace(\"'\",\"\").replace(\"[\",\"\").replace(\"]\",\"\").replace(\",\",\"\\n\").replace(\" \",\"\"))", "target": "789", "substitutes": {"x": ["height", "ey", "xp", "xi", "px", "ya", "c", "j", "d", "xy", "point", "a", "pixel", "int", "n", "xb", "yl", "i", "on", "width", "time", "xxx", "yx", "h", "ax", "image", "xt", "rx", "ix", "index", "day", "ex", "xc", "f", "dx", "b", "X", "xx", "zx", "wx", "w", "z", "lat", "l", "patch", "m", "xs", "p"], "y": ["height", "ey", "sy", "ya", "j", "cy", "d", "xy", "yi", "oy", "col", "ny", "yo", "n", "year", "yl", "Y", "zy", "t", "ye", "i", "id", "yr", "dy", "yx", "ay", "ym", "py", "lon", "yt", "ys", "b", "xx", " dy", "yd", "yy", "w", "z", "m", "p", "vy"]}}
{"code": "#import numpy as np\\n#import math\\n#from decimal import *\\n#from numba import njit\\n\\n#@njit\\ndef main():\\n    X = int(input())\\n    a = 100\\n    count = 0\\n    while a < X:\\n        a += a//100\\n        count += 1\\n    print(count)   \\n\\nmain()\\n", "target": "359", "substitutes": {}}
{"code": "a = list(map(int,input().split()))\\nif(a[0] < a[1] and a[1] < a[2]): print(\"Yes\")\\nelse: print(\"No\")", "target": "554", "substitutes": {"a": ["ma", "area", "access", "empty", "sta", "input", "x", "c", "aw", "d", "wa", "ac", "data", "aux", "pa", "int", "n", "action", "da", "ata", "an", "s", "array", "A", "list", "num", "fa", "i", "valid", "y", "alpha", "na", "qa", "sa", "ia", "span", "za", "aa", "la", "va", "active", "oa", "f", "e", "b", "ca", "ga", "ae", "ba", "l", "ea", "aj", "m", "p", "au"]}}
{"code": "#!/usr/bin/env python3\\nfrom fractions import gcd\\nn=int(input())\\ndef lcm(m,n):\\n    return (m*n)//gcd(m,n)\\nprint(lcm(2,n))", "target": "762", "substitutes": {}}
{"code": "a=int(input())\\nb=int(input())\\nh=int(input())\\nA=int(1/2*(a+b)*h)\\nprint(A)\\n", "target": "319", "substitutes": {"a": ["ha", "x", "c", "d", "ama", "ab", "ac", "af", "pa", "n", "da", "an", "fa", "y", "alpha", "api", "sa", "ah", "abc", "aa", "va", "f", "e", "am", "ca", "ad", "ga", "ae", "w", "ba", "l", "aj", "m", "r", "bb", "p", "au"], "b": ["o", "k", "x", "j", "c", "d", "bh", "ab", "B", "n", "s", "i", "y", "bs", "g", "fb", "abc", "ib", "beta", "aa", "lb", "f", "e", "ad", "sb", "w", "z", "ba", "l", "v", "m", "bb", "emb", "p"], "h": ["o", "ha", "k", "x", "c", "d", "bh", "n", "s", "i", "id", "y", "ph", "alpha", "g", "ah", "hh", "u", "f", "e", "end", "hi", "q", "sh", "w", "z", "v", "l", "hm", "m", "r", "H", "bb", "p", "hs"], "A": ["As", "U", "D", "S", "Max", "New", "Alpha", "B", "T", "W", "Math", "This", "Array", "Y", "Action", "G", "Am", "Num", "alpha", "HA", "Average", "Ha", "Count", "I", "AA", "Ang", "The", "C", "Na", "P", "AF", "API", "AH", "AB", "Input", "H", "F", "N"]}}
{"code": "from collections import Counter\\n\\n\\nN = int(input())\\nc = input()\\ncntr = Counter(c)\\n\\nans = 0\\nfor c, r in zip(c, \"R\" * cntr[\"R\"]):\\n    if c != r:\\n        ans += 1\\nprint(ans)\\n", "target": "714", "substitutes": {"N": [" RN", "S", " E", " L", "NS", "NC", " I", " p", "Ns", "n", " O", " C", " s", " X", " NC", " n", " na", " Ne", " ns", " S", " M", "C", "Na", " D", " P", "nc", " A", " res"], "c": ["cur", "o", "cus", "mc", "cn", "k", "x", "ci", "d", "current", "col", "a", "ac", "uc", "n", "s", "anc", "ce", "ch", "i", "cs", "ec", " rc", "g", "con", "collection", "h", "self", "ct", "dc", "cu", "u", "xc", "e", "f", "b", "unc", "C", "rec", "w", "z", "cr", "l", "lc", "v", "pc", "m", "sc", "nc", "cf", "p", "oc", "rc", "count"], "cntr": [" cntrs", "cndr", "cintrs", " cftn", "cndp", "cftp", "cNTn", " cntR", " cndp", "cntrs", "cctR", "cctn", "cintp", "cntl", "cntp", " cndrs", "cNTr", "cNTR", "cintl", "cctrs", "cftn", " cftr", " cftp", "cndl", " cntl", "cintr", " cftR", "cntn", "cctr", "cntR", "cndrs", "cNTp", " cntn", " cndl", " cndr", "cctl", "cftR", "cftr", " cntp", "cctp"], "ans": ["aves", "offs", "ls", "rs", "anus", "aning", "ras", "nas", "ins", "reads", "ars", "ants", "ss", "amps", "an", "anc", " means", "ats", "cs", "ents", "sk", "na", "os", "anas", "ds", "ks", "ana", "nan", "span", "can", "anes", "AN", "aned", "leans", "ANS", "ann", "lan", "ns", "ani", "ays", "annels", "mean", "eps", "aus", "ons"], "r": ["rs", "o", "k", "x", "j", "R", "d", "ar", "a", "n", "s", "rb", "t", "range", "i", "h", "nr", "u", "e", "rr", "b", "C", "w", "z", "cr", "v", "m", "right", "p", "rc", "sr"]}}
{"code": "S = list(input())\\n\\nans = 0\\nB = S[0] == \"B\"\\n\\nfor i in range(1, len(S)):\\n    if (S[i] == \"B\") != B:\\n        ans += 1\\n        B = S[i] == \"B\"\\nprint(ans)\\n", "target": "655", "substitutes": {"S": ["SE", "U", "SH", "SO", "D", "GS", "Start", "SS", "Args", "Files", "R", "Sample", "Test", "T", "Rules", "Si", "SI", "s", "Array", "Y", "A", "L", "G", "SR", "Part", "String", "IDS", "Source", "Single", "Services", "Save", "ES", "Q", "Bytes", "SC", "I", "Socket", "X", "SU", "C", "SB", "DATA", "Send", "V", "Sl", "P", "Sort", "K", "Session", "Parts", "SM", "Service", "Results", "O", "H", "M", "Input", "F", "N", "Set"], "ans": ["aves", "asses", "anus", "ass", "nas", "ins", "ases", "a", "olds", "ars", "ants", "Ns", "amps", "an", "s", "anc", "A", "ads", " means", "ats", "asts", "cs", "ents", "AS", "sk", "bs", "na", "os", "comments", "anas", "ds", "ks", "ana", "span", "can", "anes", "lines", "cons", "AN", "cas", "aned", "leans", "ase", "ANS", "ann", "ns", "ends", "ays", "mean", "eps", "aus", "ons"], "B": ["U", "D", "E", "LB", "PUT", "BB", "T", "W", "BE", "TB", "J", "Y", "A", "L", "G", "Part", "NB", "PB", "BD", "GB", "Bs", "Q", "DB", "I", "b", "X", "Number", "C", "SB", "MB", "V", "P", "K", "AB", "O", "H", "M", "F", "Beta", "N", "Z"], "i": ["mini", "pi", "di", "uri", "part", "k", "x", "xi", "j", "c", "gi", "ci", "d", "slice", "yi", "ri", "col", "io", "start", "int", "ind", "n", "ini", "ui", "bi", "id", "info", "h", "ix", "index", "ip", "multi", "eni", "si", "fi", "f", "I", "ti", "end", "b", "mi", "ai", "init", "z", "qi", "l", "ii", "li", "p", "zi"]}}
{"code": "import math,itertools,fractions,heapq,collections,bisect,sys,queue,copy\\n\\nsys.setrecursionlimit(10**7)\\ninf=10**20\\nmod=10**9+7\\ndd=[(-1,0),(0,1),(1,0),(0,-1)]\\nddn=[(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\\n\\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\\n# def LF(): return [float(x) for x in sys.stdin.readline().split()]\\ndef I(): return int(sys.stdin.readline())\\ndef F(): return float(sys.stdin.readline())\\ndef LS(): return sys.stdin.readline().split()\\ndef S(): return input()\\n\\ndef main():\\n  n,m=LI()\\n  if m%n==0:\\n    return m//n\\n\\n  ans=0\\n  for i in range(1,m//n+1):\\n    if m%i==0:\\n      ans=i\\n  \\n  return ans\\n\\n# main()\\nprint(main())\\n", "target": "163", "substitutes": {"inf": ["pi", "sec", "log", "xp", "std", "exp", "bug", "inter", "Inf", "ind", "debug", "info", "proc", "cond", "mem", "magic", "ctr", "ix", "bin", "bit", "spec", "opt", "pl", "init", "frac", "orig", "conf", "rc"], "mod": ["mode", "step", "od", "exp", "tr", "scale", "ver", "ind", "fun", "debug", "num", "depth", "dig", "dim", "fd", "ctr", "cm", "comp", "mods", "spec", " Mod", "MOD", "Mod", "im", "module", "add", "lib", "sim"], "dd": [" DD", "df", "od", "ded", " cd", "pd", "dev", "dds", "nd", "da", "td", "sd", "dy", "DD", "fd", "ds", "xxxx", "do", "md", "nn", "dc", "idd", "mm", "dl", "dm", " sd", "cd", "ld"], "ddn": ["nnns", "cdnc", " ddnc", "nnn", "ddnc", " ddns", "cdn", "ddns", "cdns", "nnnc"], "x": [" co", "xp", "xi", "c", "d", " cx", "XX", "name", "data", " p", "int", "n", " dx", "t", " xx", "xxxxxxxx", "i", "y", " X", "xxx", "h", "xt", "xe", "rx", " f", "ix", "index", " z", "py", " c", "ex", "xc", "f", "e", " ff", "X", "xx", "code", " python", "wx", "w", "z", " code", "v", "l", "p"]}}
{"code": "sx, sy, tx, ty = map(int,input().split())\\n\\nxd = tx - sx\\nyd = ty - sy\\n\\nroute1 = []\\nroute1.append('R'*xd)\\nroute1.append('U'*yd)\\n\\nroute2 = []\\nroute2.append('L'*xd)\\nroute2.append('D'*yd)\\n\\nroute3 = ['D']\\nroute3.append('R' * (xd + 1))\\nroute3.append('U' * (yd + 1))\\nroute3.append('L')\\n\\nroute4 = ['U']\\nroute4.append('L'*(xd+1))\\nroute4.append('D'*(yd+1))\\nroute4.append('R')\\n\\nans = ''.join(route1) + ''.join(route2) + ''.join(route3) + ''.join(route4)\\nprint(ans)\\n\\n\\n", "target": "763", "substitutes": {"sx": ["soX", "soxx", "ssx", "ssxx", "sz", " sz", "sxs", " spx", "ssz", " sxx", "sox", "sppx", "spxs", "sX", "dx", " sxs", "sxx", "ssX", "spx", "dpx", "soz", "dxs", " sX"], "sy": ["ey", "fy", "j", "cy", "sp", "ky", "sol", "ny", "ly", "zy", "syn", "y", "sd", "dy", "ph", "sa", "gy", " cy", "py", "sq", "yt", "si", "south", "sym", "ys", "sh", "yy", "sty", "idy", "sky"], "tx": ["x", "tr", "ctx", "xy", "dest", "ss", "ux", "ww", "dy", "xa", "ax", "xxx", "ds", "rx", "ix", "fx", "trans", "ox", "sq", "ex", "yt", "dx", "Tx", "ca", "zx", "wx", "TX", "pt", "sh", "ta", "cd", "xs", "txt"], "ty": ["pty", "type", "fy", "ya", "x", "cy", "oy", "ky", "sys", "ry", "y", "tan", "dy", "tty", "gy", "ties", "ts", "rx", "tt", "ct", "th", "sq", "yt", "si", "south", "sym", "ys", "tem", "pt", "yy", "sh", "ta", "lat", "sty", "ady", "idy", "sth", "sky"], "xd": ["pex", "ced", "rd", "x", "od", "ecd", "ded", " cd", "d", "eddy", "pd", "cod", "du", "nd", "iced", "xb", "odi", "dra", "rod", "wd", "gd", "dy", "xa", "xxx", "fd", "hd", "dig", "xe", "ds", "dr", "fx", "dc", "idd", "yt", "xc", "dx", "dd", "xf", "zx", "vd", "wx", "mond", "cd", "xs", "did", "ld", "ud"], "yd": ["ey", "isd", "adh", "od", "ecd", "ded", " cd", " ind", "hyd", "d", "xy", "oy", "eddy", "cod", "ny", "nd", "bd", "ind", "yz", "odi", "yp", "dra", " dd", "rod", " od", "sd", "dy", "fd", "hd", "dig", "ds", "edd", "axy", "ym", "idd", "sq", "yt", "yden", "esty", " std", "dd", "ys", "dx", "zx", "vd", "yy", "aida", "z", " sd", "mond", "cd", "did", "ady", "idy", "ld", "ud"], "route1": ["shape0", "Routeone", "Route4", "Route2", "shape1", "layout1", "range2", " routeOne", "range1", "layoutone", "route99", "outer0", "Route99", "outer99", "outer1", " route0", "Route3", "layout2", "route0", "outer2", "layer99", "routeOne", "Route1", "RouteOne", "layer1", "routeone", "rangeOne", "layer2", "layer0", " routeone", "shape4", "layout3", "shape2", "Route0"], "route2": ["loop2", "Route4", "view4", "route5", "Route2", "view5", "oute4", "loop4", "view3", "oute2", " route0", "Route3", " route5", "route10", "loop6", "route0", "oute10", " route10", "view6", "Route1", "oute3", "oute0", "oute1", "loop5", " route6", "Route10", "Route0", "view2", "route6", "view1"], "route3": ["replacethird", "routethree", "outerthird", "replace3", "Routethree", "layoutThird", " route21", "replaceThird", "outer23", "Route2", "oute21", "layout1", " Route1", "layout21", "waythree", "way2", "version03", "route21", "outer1", "route03", "routeThird", " route23", " Route03", "wayThird", "Route3", "way3", "layout2", "replace03", "outer03", " Route3", " route03", "outerThird", "outer2", " Routethree", "outeThird", "layoutthree", "oute3", "route23", "oute1", "versionThird", "version3", "layout3", " routethree", "outerthree", " routeThird", "versionthird", "routethird", "RouteThird", "Route23", "outer3"], "route4": ["RouteFour", "layerFour", "phase7", "Route4", "routeour", "route7", "mode2", " routeFour", "Route64", "layer4", "Route2", "Route94", " route64", "ride4", "phase40", "mode04", "route04", "route94", "oute4", "route40", "stage94", "stage4", " routefour", "location94", "Routefour", "stage84", "oute2", "location4", "locationfour", "Routeour", "Route3", "routefour", "route84", " route40", "phaseFour", " routeour", "stagefour", "routeFour", "mode4", "outefour", "oute64", "oute3", "layer04", "Route04", "layer2", "phase4", "rideFour", "Route84", "modeFour", "route64", "ride7", "outeour", " route7", "ride40", "location84"], "ans": ["angs", "Ann", "san", "aning", "anned", "ras", "nas", "ins", "ars", "an", "anc", "man", "ats", "anon", "sk", "rans", "en", "anas", "ds", "gan", "anse", "ks", "ana", "An", "can", "AN", "atan", "aned", "aster", "leans", "ANS", "lan", "ann", "ns", "ai", "ays", "ares", "aus", "ons", "ran"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\n\\n\\nb=[0]*(n-1)\\n\\nfor i in range(n-1):\\n    if a[i]>=a[i+1]:\\n        b[i]=1\\n    \\nfrom itertools import groupby\\n\\ngr = groupby(b)\\n\\nans=0\\nfor k,v in gr:\\n    if k==1:\\n        ans =max(ans,len(list(v)))\\n\\nprint(ans)", "target": "623", "substitutes": {"n": ["o", "x", "j", "c", "d", "nb", "num", "s", "an", "t", "ni", "y", "h", "network", "nn", "number", "nu", "nr", "u", "len", "net", "nt", "f", "e", "ns", "w", "z", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["ma", "area", "auto", "c", "aw", "ar", "d", "ak", "ab", "ac", "an", "s", "array", "A", "fa", "y", "alpha", "na", "sa", "ana", "aa", "aff", "u", "va", "oa", "f", "am", "ad", "ca", "ga", "ai", "ae", "w", "ba", "p", "au"], "b": ["o", "x", "abb", "c", "d", "nb", "ab", "B", "bd", "xb", "s", "an", "binary", "A", "rb", "bi", "y", "bs", "g", "h", "beta", "number", "aa", "wb", "u", "lb", "f", "e", "base", "sb", "l", "m", "r", "bb", "p", "bp"], "i": ["pi", "di", "uri", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "oi", "io", "ie", "start", "ori", "int", "ind", "ui", "ini", "ni", "bi", "id", "y", "info", "g", "h", "ix", "index", "ip", "eni", "si", "u", "iu", "f", "e", "I", "ti", "ad", "mi", "q", "ai", "z", "qi", "l", "ii", "li", "p"], "gr": ["GR", "vr", " sk", "err", "tr", "ver", " col", " mult", "vs", " gen", "ge", " RV", " coverage", "ov", "range", " var", " ge", "arr", "g", "div", " arr", "pr", "gg", " wa", "br", "u", " cov", "nr", "graph", "arch", "rr", "res", "Gr", "gor", " av", "gt", " gn", " acc", "cr", "r", " support", "str", " ver", "fr", "order", "kr", " iv", "group", " Gr"], "ans": ["offs", "ls", "anus", "aning", "anned", "nas", "ins", "ants", "vs", "ens", "banks", "an", "s", "anc", " means", "ents", "anon", "sk", "annot", "na", "os", "anas", "ds", "gan", "ks", "nan", "ana", "ids", "span", "anes", "can", "atan", "AN", "aned", "leans", "cas", "ANS", "ann", "ad", "lan", "ns", "es", "ani", "ays", "mean", "groups", "eps", "aus", "ons"], "k": ["ik", "o", "kn", "x", "kk", "j", "c", "d", "ak", "ijk", " K", "ck", "ek", "an", "y", "sk", "ok", "ks", "kid", "dk", "u", "ad", "ki", "q", "kw", "kind", "z", "K", "w", "m", "p", "ka"], "v": ["o", "ve", "j", "cv", "c", "uv", "d", "ver", "value", "vv", "vs", "vt", "var", "vp", "array", "t", "g", "h", "iv", "u", "f", "e", "group", "values", "vd", "q", "V", "sv", "z", "vol", "nv", "l", "m", "r", "p", "vi"]}}
{"code": "li = list(map(int,input().split()))\\n\\nli.remove(max(li))\\n\\nprint(sum(li))", "target": "298", "substitutes": {"li": ["mini", "lp", "ls", "di", "pi", "loc", "el", "le", "ol", "ul", "ci", "slice", "left", "kl", "ie", "lo", "ili", "cli", " mini", " Li", "pal", "lie", "list", "LI", "ini", "ly", "ni", "bi", "i", "lab", "iter", "lli", "bl", "lv", "py", "lis", "la", "si", "lb", "len", "lam", "Li", "Lu", "pl", "dl", "chi", "l", "lc", "ii", "lu", "ln", "lt", "elt"]}}
{"code": "n = int(input())\\ns = str(input())\\n\\nnew_s = s[0]\\n\\nfor i in range(1,len(s)):\\n    if s[i] == s[i-1]:\\n        continue\\n    else:\\n        new_s += s[i]\\n\\nprint(len(new_s))\\n", "target": "717", "substitutes": {"n": ["j", "c", "nb", "name", "pos", "num", "t", "ni", "na", "network", "nl", "number", "nr", "net", "len", "fn", "f", "ns", "sn", "init", "z", "l", "m", "nc", "ne", "N", "conn"], "s": ["states", "ls", "string", "o", "services", "parts", "js", "S", "input", "c", "events", "d", "slice", "ins", "ses", "ws", "a", "data", "ss", "obs", "abs", "args", "qs", "space", "t", "strings", "y", "g", "os", "ds", "blocks", "ips", "gs", "lines", "sites", "items", "south", "si", "u", "sets", "f", "e", "sym", "settings", "b", "ps", "ans", "new", "es", "tests", "status", "sb", "w", "sv", "params", "l", "sg", "m", "xs", "p"], "new_s": ["new67state", "new_state", "new_strings", "new___strings", "new_names", "new__states", "new___s", "new__s", "newNews", "new__state", " new_string", " new_state", "newNewp", "new_p", " new__strings", "new___names", " new_strings", " new_ss", "new_states", "new_string", " new_p", " new_states", "new__ss", "new__strings", "new67ss", "new67states", " new__string", "new_ss", " new__names", "newNewstrings", " new__s", "new__names", "new___string", " new_services", "new_services", " new_names", "new__string", "newNewservices", "new67s"], "i": ["mini", "pi", "it", "di", "k", "x", "xi", "j", "gi", "c", "gu", "ci", "d", "phi", "start", "int", "ind", "num", "ini", "ui", "t", "bi", "id", "y", "on", "pri", "ix", "index", "multi", "si", "u", "iu", "f", "I", "e", "end", "b", "ai", "z", "qi", "l", "v", "ii", "li", "r", "p", "count"]}}
{"code": "n, k = map(int, input().split())\\na = list(map(int, input().split()))\\n\\na = [i-1 for i in a]\\n\\nd = [1]*n\\np = 0\\nb = []\\nwhile d[p]:\\n    b.append(p)\\n    d[p] = 0\\n    p = a[p]\\navant = b.index(p)\\nloop_count = len(b) - avant\\nc = b[avant:]\\n\\nif k <= avant:\\n    print(b[k]+1)\\nelse:\\n    k -= avant\\n    k %= loop_count\\n    print(c[k]+1)\\n", "target": "169", "substitutes": {"n": ["pi", "o", "x", "j", "np", "nb", "an", "num", "s", "t", "ni", "y", "na", "g", "min", "network", "nn", "span", "net", "nt", "f", "max", "ad", "ns", "pn", "q", "z", "v", "l", "m", "r", "nc", "ne", "N"], "k": ["ik", "o", "kn", "ke", "x", "kk", "j", "work", "kat", "ak", "ijk", "ac", "mk", "ck", "ek", "kick", "t", "ch", "id", "y", "loop", "key", "sk", "g", "unk", "ack", "h", "ok", "ks", "dk", "u", "f", "e", "ad", "code", "ki", "q", "w", "kw", "z", "K", "v", "l", "m", "r", "ka", "ku"], "a": ["area", "x", "ar", "ac", "ab", "data", "s", "an", "array", "A", "t", "y", "alpha", "g", "sa", "span", "aa", "u", "va", "f", "e", "am", "ad", "ca", "ga", "ai", "ae", "w", "aaa", "ba", "z", "v", "l", "m", "r"], "i": ["pi", "it", "x", "xi", "j", "axis", "ci", "pos", "int", "ind", " iP", "ini", "t", "ni", "bi", "id", "y", "h", "index", "ip", "si", "il", "iu", "f", "ti", "I", "inf", "ai", "v", "l", "ii", "li", "m"], "d": ["di", "o", "D", "x", "j", "db", "pd", "data", "nd", "da", "s", "an", "t", " dd", "y", "dy", "g", "h", "ds", " f", "dc", "aa", " da", "u", "e", "f", "dd", "ad", "w", "z", "v", "l", "m"], "p": ["pi", "o", "tp", "part", "x", "j", "np", "point", "data", "pos", "pa", "int", "s", "t", "y", "alpha", "g", "h", "pr", "ip", "u", "f", "e", "q", "w", "P", "z", "v", "l", "pc", "m", "r", "ap"], "b": ["library", "o", "part", "x", "pb", "db", "nb", "data", "ab", "B", "s", "binary", "array", "t", "rb", "y", "loop", "bs", "body", "g", "h", "abc", "fb", "beta", "aa", "u", "e", "f", "ad", "base", "sb", "w", "z", "ba", "l", "v", "m", "r", "bb", "bp"], "avant": ["afants", "ahant", "Avanted", "afanting", "vanted", "savanting", " avanted", "afancy", "ahanted", "Avants", "Avant", " avancy", "savant", "variancy", " avault", "variant", "avent", "avancy", "avanted", "vants", "vent", "accant", "accants", " avent", "accent", "Avent", "ahanting", "varianting", "ahants", " avanting", "afant", " avants", "afault", "savants", "avants", "vanting", "avanting", "savanted", "vant", "varianted", "avault", "afanted", "accault", "afent"], "loop_count": ["loop_sum", "loop2last", " loop_last", "loop_list", "loop2list", "loop2sum", "loop__sum", "loop__count", " loop_size", "loop_last", "loop2size", "loop_size", "loop__last", "loop2count", " loop_list", " loop_sum"], "c": ["o", "cn", "x", "ci", "ac", "fc", "anc", "s", "cc", "ce", "cs", "y", "ec", "g", "h", "dc", "u", "f", "e", "C", "z", "v", "l", "lc", "cd", "m", "r", "count"]}}
{"code": "x, y = map(int, input().split())\\nX, Y = 0, 0\\nl = [4, 6, 9, 11]\\nif x == 2:\\n  X = 3\\nelif x in l:\\n  X = 2\\nelse:\\n  X = 1\\nif y == 2:\\n  Y = 3\\nelif y in l:\\n  Y = 2\\nelse:\\n  Y = 1\\nif X == Y:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "206", "substitutes": {"x": ["k", "px", "c", "d", "xy", "a", "int", "n", "yl", "t", "i", "id", "on", "ax", "h", "xt", "ay", "rx", "ix", "ox", "index", "ex", "u", "size", "e", "f", "dx", "b", "xx", "ad", "im", "w", "z", "v", "m", "xs", "p"], "y": ["ey", "o", "sy", "hy", "iy", "ya", "j", "cy", "yi", "oy", "yn", "ky", "ry", "ny", "yo", "n", "year", "yl", "ye", "t", "zy", "i", "yr", "dy", "ay", "ym", "py", "yt", "b", "yd", "yy", "z", "m", "ady", "YY", "p", "vy"], "X": ["U", "D", "Width", "Time", "cy", "E", "XX", "Line", "B", "T", "W", "A", "L", "ax", "ay", "El", "Q", "I", "XY", "xx", "C", "XL", "TX", "V", "P", "z", "K", "XXX", "H", "M", "YY", "F", "N", "Z"], "Y": ["U", "YN", "NY", "MY", "D", "cy", "E", "Cy", "Do", "B", "T", "W", "J", "Type", "Long", "Value", "G", "A", "i", "dy", "Size", "No", "Q", "Year", "YE", "HY", "I", "XY", "My", "C", "Ty", "V", "TY", "yy", "z", "YA", "H", "M", "YY", "F", "vy", "N", "Z"], "l": ["el", "lp", "ls", "le", " L", "wl", "j", "c", "ci", "d", "kl", "fl", "ell", "sl", "n", "ll", "ly", "L", "i", "cel", "h", "lv", "line", "nl", "El", "vl", "la", "il", "u", "len", "lin", "f", "b", "q", "w", "z", "v", "lc", "m", "r", "li", "ln", "p"]}}
{"code": "N = int(input()) \\nS = input()\\n\\nif N%2 == 1:\\n    print(\"No\")\\nelse:\\n    print(\"Yes\") if S[:len(S)//2] == S[len(S)//2:] else print(\"No\")", "target": "532", "substitutes": {"N": ["ND", "NA", "D", "NS", "E", "NL", "NC", "NE", "B", "Ns", "T", "n", "J", "Y", "A", "L", "G", "Len", "NB", "NT", "NM", " n", "I", "Number", "X", "NO", "C", "NG", "V", "P", "K", "O", "M", "F", "Z"], "S": ["U", "SE", "II", "SO", "D", "SS", "R", "NS", "E", "Sample", "SK", "Test", "B", "Ns", "T", "TS", "W", "Si", "SI", "s", "Y", "Source", "A", "L", "G", "Part", "String", "SN", "AS", "SL", "PS", "Q", "Sign", "I", "Socket", "X", "SU", "C", "DATA", "V", "Sl", "P", "OS", "K", "SP", "O", "H", "M", "F", "VS"]}}
{"code": "# \u521d\u671f\u5165\u529b\\nimport sys\\n#input = sys.stdin.readline  #\u6587\u5b57\u5217\u3067\u306f\u4f7f\u308f\u306a\u3044\\ntstr =input().strip()\\nfrom datetime import datetime as dt\\n\\n#tstr = '2012-12-29 13:49:37'\\ntdatetime = dt.strptime(tstr, '%Y/%m/%d')\\nstandard =\"2019/4/30\"\\ndt_standard =dt.strptime(standard, '%Y/%m/%d')\\nif tdatetime <= dt_standard:\\n    print(\"Heisei\")\\nelse:\\n    print(\"TBD\")", "target": "545", "substitutes": {}}
{"code": "n = int(input())\\nw = list(map(int, input().split()))\\n\\nWl = [0]\\nfor i in range(n):\\n    Wl.append(Wl[i]+w[i])\\n\\na = 100000\\n\\nfor i in range(n+1):\\n    a = min(abs(-Wl[i] - Wl[i] + Wl[n]), a)\\n\\nprint(a)\\n\\n", "target": "8", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "num", "s", "an", "t", "y", "na", "count", "g", "en", "h", "nn", "u", "net", "f", "nt", "e", "b", "ns", "pn", "no", "q", "z", "v", "l", "m", "r", "nc", "p", "ne", "N"], "w": ["o", "k", "x", "wl", "c", "wan", "d", "wa", "W", "s", "t", "weight", "wave", "y", " W", "width", "g", "h", "we", "u", "f", "e", "b", "q", "z", "l", "v", "m", "r", "p"], "Wl": ["wp", " Wf", "Ql", " wf", "Ln", "wl", "Ws", " wn", "wll", "wL", "Newll", "VL", "Vs", "ws", " Wd", "Lll", "Ld", " WL", " wd", "Vl", "Qd", "Wn", "wd", " Ws", " Wsl", " wL", "wf", "QL", "Newl", "Wd", "Newp", " Wll", "Wsl", " wp", "Lp", "wn", " wll", " wsl", "Wp", " wl", "Wll", "WL", "LL", "Newsl", " Wn", "Wf", "Qp", "Vn", " Wp", "Ll"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "ci", "d", "ri", "io", "ie", "start", "int", "ind", "ui", "ini", "ni", "id", "y", " j", "h", "index", "ip", "eni", "si", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "qi", "l", "v", "ii", "li", "m", "r", "p"], "a": ["area", "c", "aw", "d", "ac", "wa", "ab", "af", "mA", "da", "all", "an", "s", "A", "fa", "y", "alpha", "na", "qa", "sa", "abc", "ana", "ia", "aa", "la", "va", "f", "am", "ad", "b", "tta", "ca", "ga", "ai", "ae", "aaa", "ba", "ea", "l", "aj", "p", "au"]}}
{"code": "from bisect import bisect_left\\nfrom itertools import accumulate\\n\\nN,M = map(int,input().split())\\nA = sorted([int(i) for i in input().split()])\\n\\n# \u5224\u5b9a\\ndef is_under_M(x:int):\\n    cnt = 0\\n    for i in range(N):\\n        # \u5e78\u798f\u5ea6x\u4ee5\u4e0a\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\\n        pos = bisect_left(A, x - A[i])\\n        cnt += N - pos\\n    return cnt < M\\n\\n# \u4e8c\u5206\u63a2\u7d22\\nng, ok = 0, 2*(10**5)+1\\nwhile ok - ng > 1:\\n    mid = (ok + ng) // 2\\n    if is_under_M(mid):\\n        ok = mid\\n    else:\\n        ng = mid\\n# ng, ok = X-1, X\\n\\n# A\u306e\u7d2f\u7a4d\u548c\\nAacum = tuple(accumulate([0] + A))\\n\\nans = 0\\nfor i in range(N):\\n    # \u5e78\u798f\u5ea6ok\u4ee5\u4e0a\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\\n    pos = bisect_left(A, ok - A[i])\\n    cnt = N - pos\\n\\n    ans += cnt * A[i] + (Aacum[N] - Aacum[pos])\\n    M -= cnt\\n\\nans += M * ng\\n\\nprint(ans)", "target": "445", "substitutes": {"N": ["U", "NA", "II", "D", "S", "R", "NS", "E", "B", "T", "n", "L", "Ni", " n", "NN", "I", "X", "C", "RN", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "D", "S", "R", "E", "B", "T", "W", "J", "Y", "L", "G", "MN", "MON", "I", "X", "C", "MA", "V", "P", "MM", "K", "m", "O", "F", "CM", "Z"], "A": ["NA", "D", "S", "R", " I", "a", "B", "CA", "T", "W", "Array", "Y", "L", "alpha", "Index", "TA", "I", "AA", "b", "X", "C", "Na", "V", "P", "O", "F", "Z"], "i": ["pi", "di", "o", "uri", "k", "out", "x", "xi", "j", "idi", "c", "gi", "gu", "ci", "phi", "oi", "ri", "a", "io", "start", "int", "ind", "n", "ini", "ui", "bi", "id", "index", "ip", "si", "u", "iu", "e", "I", "f", "ti", "ai", "chi", "qi", "ii", "li", "p"]}}
{"code": "def actual(AtCoder, s, Contest):\\n    return f'A{s[0].upper()}C'\\n\\nAtCoder, s, Contest = input().split()\\nprint(actual(AtCoder, s, Contest))", "target": "324", "substitutes": {"AtCoder": ["Atcoster", "AtCoster", "AtCoding", "AtMcenter", "TheAcode", "AtLCode", "Atcoded", " AtcODE", "AtAcoster", "AtEcoder", "Atcoder", "AtAcode", "AtMcoder", " AtCenter", "AtEcoded", "TheAcoster", " Atcoding", "TheCoster", "AtDecoder", "AtEcoding", "TheAcoding", " AtDecenter", "Atcode", " AtCoded", "AtLCenter", "AtCode", "AtAcoding", "AtAcoder", "AtCODE", " Atcoded", "TheCoder", " AtCoding", " AtCODE", "AtDecode", "AtEcODE", "AtMcode", " AtDecoder", "AtLCoder", "AtCenter", " AtDecode", "TheAcoder", " Atcoder", "AtMcoding", "TheCode", "AtDecoster", "AtcODE", "AtAcoded", "AtCoded", "AtAcODE", " AtCode", "AtDecenter", "AtDecoding", "AtLCoding", " AtDecoding", "Atcoding", "TheCoding"], "s": ["services", "string", "js", "S", "sync", "input", "su", "c", "d", "ses", "sys", "ss", "abs", "args", "qs", "t", "strings", "os", "g", "ds", "set", "gs", "lines", "sf", "south", "si", "sets", "spec", "f", "e", "sym", "ns", "es", "sb", "sv", "v", "str", "m", "xs", "p", "series", "aws"], "Contest": ["Congested", "contEST", " Contester", "ContEST", "Condest", "Congester", "Condester", " contest", "contest", "contests", " ContEST", " Contested", "Condested", " contEST", " contested", "Condests", "Contests", "CongEST", " contester", "contested", "contester", "Contester", "Congest", "Contested", " Contests"]}}
{"code": "# https://atcoder.jp/contests/tenka1-2017/tasks/tenka1_2017_c\\ndef main():\\n    N = int(input())\\n\\n    for h in range(1, 3500 + 1):\\n        for n in range(1, 3500 + 1):\\n            if (4 * h * n - N * n - N * h != 0) and (N * h * n) % (4 * h * n - N * n - N * h) == 0:\\n                w = (N * h * n) // (4 * h * n - N * n - N * h)\\n                if w > 0:\\n                    print(h, n, w)\\n                    return\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "29", "substitutes": {}}
{"code": "N, L = map(int, input().split())\\ntext_list = [input() for _ in range(N)]\\n\\nsorted_list = sorted(text_list)\\n\\nprint(''.join(sorted_list))", "target": "732", "substitutes": {"N": ["U", "D", "S", "R", "NS", "E", "NL", "B", "Ns", "T", "n", "J", "W", "Y", "A", "G", "Len", " n", "Size", "No", "Length", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "L": ["U", "D", "S", "left", "NL", "B", "Lo", "T", "J", "LI", "LT", "Length", "I", "dL", "X", "C", "Lu", "V", "P", "K", "l", "O", "H", "M", "ln", "F", "Z"], "text_list": [" textingmap", "word_list", "textalnumber", "textedlist", "wordsleft", "textsnumber", "word_type", "textinglist", "textedqueue", "word_number", "textallist", "wordstype", "text6queue", "word_left", "textstype", "text6name", "textalleft", "text_name", " text_map", "textedname", " textingname", "text_queue", "textingname", "text6map", " text_queue", "textedmap", "text_number", " textingqueue", "wordsnumber", "text_left", "textingmap", " textinglist", "text_type", "text6list", "text_map", "wordslist", " text_name", "textslist", "textsleft", "textaltype", "textingqueue"], "_": [" time", " ip", "all", "g", "val", " seq", "len", "f", "q", "l", "p"], "sorted_list": ["sorted_cl", "sorted_List", "sort_cl", "sorted__cl", "sorted2string", "sort_string", "sort_LIST", "sort_list", "sorted2list", "sorted_LIST", "sorted2List", "sorted2cl", "sort_List", "sorted2LIST", "sorted__list", "sorted_string", "sorted__List"]}}
{"code": "import math\\n\\nn,h = map(int,input().split())\\ns = []\\nmax_a = 0\\nfor i in range(n):\\n    a,b = map(int,input().split())\\n    max_a = max(a,max_a)\\n    s.append((b,a))\\n\\nif max_a >= h:\\n    print(1)\\n    exit()\\n\\ns.sort(reverse=True)\\nans = 10**9\\ni = 0\\nwhile h > 0 and i < n:\\n    h -= s[i][0]\\n    c = max(0,math.ceil(h/max_a))\\n    ans = min(i+c+1,ans)\\n    i += 1\\n\\nprint(ans)", "target": "205", "substitutes": {"n": ["o", "k", "x", "j", "d", " fn", " N", "nb", " p", "num", "t", "y", "na", "g", "count", " self", "network", " f", " ns", " w", " l", "u", "fn", " number", "f", "max", "ns", "e", "sn", "q", "w", "z", "l", "v", "r", "m", "ln", "p", "ne", "N"], "h": ["o", "ha", "k", "x", "oh", "j", "d", "ht", "bh", "rh", "num", "high", "t", "ch", "hp", "eh", "y", "ph", "g", "ah", "hh", "u", "size", "e", "f", "max", "hi", "q", "sh", "w", "gh", "z", "uh", "v", "l", "hm", "m", "r", "H", "he", "ih", "p", "hs", "cl", "count"], "s": ["states", "services", "ls", "fs", "o", "parts", "S", "d", "ins", "ses", "ss", "args", "t", "strings", "cs", "y", "g", "os", "sections", "sa", "blocks", "ips", "south", "si", "u", "sets", "e", "f", "ps", "ns", "es", "sb", "sh", "w", "sv", "l", "v", "groups", "r", "small", "p"], "max_a": ["Max_A", "max2alpha", "max__a", " max_d", "max__area", "max_d", "maxingaction", "total_A", "max_i", "rank_alpha", "maxOfa", "Max_a", "max_b", "max__b", "rank_i", "rank_action", "Max_b", "max2area", "maxOfalpha", "max_c", "max_area", "Max2a", "max2b", "max_A", "max__d", " max_area", "rankingalpha", "total_area", "max__c", "rankingi", "max_action", " max_c", "rankinga", "rankingaction", "max__alpha", "total_a", " max_alpha", "maxOfaction", "maxingalpha", "Max2A", "maxOfi", "Max2b", "max2A", "max_alpha", "total_alpha", "max2a", "maxingi", "maxinga", " max_b", "rank_a"], "i": ["mini", "pi", "di", "o", "uri", "k", "x", "xi", "j", "gi", "ci", "d", "yi", "ri", "oi", "io", "start", "int", "ind", "num", "ini", "ui", "t", "ni", "bi", "id", "y", "ix", "index", "ip", "eni", "si", "u", "iu", "f", "e", "I", "ti", "mi", "hi", "ki", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "r", "m", "ih", "p", "vi"], "a": ["area", "k", "x", "aw", "d", "ab", "ac", "int", "da", "an", "A", "fa", "y", "alpha", "sa", "aa", "u", "va", "e", "f", "am", "ca", "ai", "ae", "w", "aaa", "ba", "l", "ea", "aj", "p", "au"], "b": ["k", "x", "j", "d", "nb", "ab", "B", "bd", "rb", "y", "bs", "g", "fb", "aa", "u", "lb", "f", "e", "sb", "w", "be", "ba", "l", "v", "r", "bf", "bb", "p"], "ans": ["offs", "ls", "cus", "asses", "x", "anus", "aning", "san", "ci", "nas", "ins", "ss", "amps", "ens", "an", "anc", "A", "asts", "cs", "outs", "ians", "oss", "sk", "na", "os", "g", "anas", "plan", "aus", "ks", "ana", "nan", "span", "can", "cons", "atan", "AN", "aned", "len", "cas", "ANS", "acts", "leans", "ann", "lan", "ns", "ca", "es", "ai", "sh", "ani", "mean", "ln", "p", "han", "ons", "au"], "c": ["cn", "k", "x", "cy", "ci", "d", "ac", "uc", "cc", "ce", "ch", "cs", "y", "ec", "con", "ct", "dc", "cu", "u", "xc", "f", "e", "ca", "unc", "C", "z", "cr", "l", "lc", "m", "r", "nc", "p", "count"]}}
{"code": "N = int(input())\\n\\nans = 0\\ntmp = -10\\nfor i in range(N):\\n    a = int(input())\\n    if tmp == i-1 and a > 0:\\n        ans += 1\\n        a -= 1\\n    ans += a//2\\n    if a%2 == 1:\\n        tmp = i\\nprint(ans)", "target": "455", "substitutes": {"N": ["NA", "S", "NS", "NC", "NE", "B", "Ns", "T", "n", "Y", "A", "L", "Len", "Num", "na", "NT", " n", "Size", "NN", "number", "No", "AN", "I", "X", "ns", "NO", "C", "Na", "Ne", "P", "K", "Nat", "NP", "O", "M", "F"], "ans": ["aves", "offs", "ls", " cats", "x", "anus", "nas", "ras", "ins", "aos", "reads", "ars", "ants", "amps", "ens", "args", "anners", "an", "s", "ads", "A", "ops", "ats", " means", "ents", "ams", "sk", "na", "os", "anas", "ms", "ds", "ks", "trans", "arts", "AN", "cas", "aned", "ANS", "ann", "ad", "ns", "es", "works", "ai", "aces", "ani", "asa", "ays", "bps", "xs", "eps", "aus", "ons", " ads"], "tmp": ["area", "tp", "part", "at", "Temp", "ott", "abb", "j", "np", "nb", "amo", "mult", "ff", "T", "int", "pa", "mA", "amp", "t", "buf", "ppa", "alpha", "cp", "tt", "span", "appy", "aa", "mp", "nom", "pp", "nt", " ff", "obj", "ann", "ad", "b", "stuff", "emp", "ai", "aaa", "ano", "aj", "m", "XXX", "now", "bb", "ap", "p", "temp", "ampa"], "i": ["mini", "pi", "it", "di", "II", "x", "xi", "j", "c", "ci", "ar", "d", "oi", " I", "ab", "io", "ie", "start", "lo", "int", "ind", "n", "ini", "t", "A", "bi", "alpha", "h", "ia", "ip", "multi", "si", "u", "iu", "f", "I", "ti", "e", "b", "ad", "hi", "ai", "z", "l", "ii", "li", "m", "p"], "a": ["area", "anta", "x", "c", "ar", "d", "ac", "ab", "af", "pa", "n", "mA", "all", "an", "A", "fa", "y", "alpha", "api", "na", "sa", "ana", "ia", "aa", "u", "va", "oa", "f", "AA", "b", "am", "ca", "ad", "ai", "ae", "w", "asa", "ba", "aaa", "ta", "ea", "aj", "eta", "p", "au"]}}
{"code": "def main():\\n    H, W, M = [int(s) for s in input().split()]\\n    cols = [0] * W\\n    rows = [0] * H\\n    bombs = set()\\n    for _ in range(M):\\n        x, y = [int(s)-1 for s in input().split()]\\n        bombs.add((x, y))\\n        cols[y] += 1\\n        rows[x] += 1\\n\\n    sc = sorted([(c, i) for i, c in enumerate(cols)], reverse=True)\\n    sr = sorted([(c, i) for i, c in enumerate(rows)], reverse=True)\\n    best = 0\\n    for v1, c in sc:\\n        for v2, r in sr:\\n            if v1 + v2 <= best:\\n                break\\n            score = v1 + v2\\n            if (r, c) in bombs:\\n                score -= 1\\n            best = max(best, score)\\n    print(best)\\n\\nmain()", "target": "694", "substitutes": {"H": ["U", "SH", "D", "S", "HC", "R", "E", "B", "OH", "T", "HH", "Y", " C", "A", "G", "L", "h", "Q", "I", "X", "C", "HI", "V", "P", "K", "O", "Ch", "F", "N", "Z"], "W": ["U", "TW", "D", "S", "R", "E", "B", "T", "WR", "Y", " C", "G", "L", "Wh", " w", "Q", "WC", "WS", "X", "SW", "C", "CW", "V", "w", "P", "K", "VW", "F", "N", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "B", "T", "J", "Y", "L", "G", "DM", "RM", "MN", "Q", "X", "MI", "C", "V", "P", "K", "MC", "m", "O", "Mi", "F", "CM", "N", "Z"], "s": ["sec", "ls", "string", "o", "S", "k", "input", "su", "sin", "sp", "d", "ws", "ses", "ins", "a", "ss", "pos", "sl", "n", "single", "t", "cs", "sk", "sw", "g", "os", "en", "h", "sf", "sq", "si", "u", "size", "f", "sym", "b", "ns", "ans", "sn", "es", "sb", "w", "sv", "z", "v", "l", "m", "se", "p"], "cols": ["colows", "colss", "Colls", "colfs", "columns", "minss", "collss", " colfs", "Cols", "Colss", "COLfs", "colrows", "minses", "colls", "colles", "Coles", "colses", "collses", "coles", " colows", "Colfs", "columnls", "Colows", "columnows", " coles", "COLes", " colls", "Colrows", "Colses", "mins", "mines", "COLs", "COLrows", "columnes", " colrows"], "rows": ["height", "rs", "files", "holes", "events", "results", "ords", "runs", "reads", "ws", "tracks", "times", "ss", "roots", "models", "airs", "rules", "ows", "ours", "reports", "users", "views", "breaks", "cells", "blocks", "flows", "orders", "ids", "ks", "rw", "lines", "row", "planes", "frames", "posts", "rics", "ros", "values", "headers", "errors", "tests", "features", "w", "OWS", "rooms", "groups", "words", "rss", "relations"], "bombs": ["chabbage", "nbomes", "nbombie", "bomes", "abombs", "bbabbage", "Bombs", "bombie", "obbombs", "Babbage", "bbumbs", "bombies", "Bombies", "bbambers", "bbomb", "Bomb", "obbambers", "obbomb", "abombies", "abomes", "Bambers", "chombs", "abombie", "Bomes", "babbage", "bomb", "bouts", "nbombies", "nbombs", "Bouts", "Bombie", "bumbs", "chumbs", "bbombs", "chomb", "obbouts", "bambers", "Bumbs", "bbouts"], "_": [" b", "k", "d", " time", "n", "g", "h", "f", "l"], "x": ["k", "ya", "j", "d", "xy", "col", "a", "int", "n", "num", "Y", "t", "ch", "yx", "h", "rx", "ix", "index", "ex", "u", "f", "e", "max", "one", "b", "X", "xx", "wx", "q", "w", "z", "v", "l", "m", "xs", "p"], "y": ["ey", "o", "sy", "ya", "j", "cy", "d", "yi", "oy", "xy", "col", "ny", "yo", "int", "n", "Y", "ye", "t", "ch", "zy", "yr", "dy", "h", "ym", "py", "yt", "u", "e", "f", "b", "q", "yy", "w", "z", "v", "l", "m", "p", "vy"], "sc": ["core", "rs", "ls", "sec", "mc", "sync", "cv", "sci", "sp", "ci", "sch", "esc", "ss", "bc", "uc", "scope", "src", "osc", "cc", "cs", "sd", "sw", "ct", "scl", "st", "sq", "si", "SC", "ores", "asc", "ca", "soc", "Sc", "sn", "usc", "cr", "lc", "pc", "cd", "nc", "rc", "cl"], "c": ["mc", "cn", "k", "cy", "ci", "d", "col", "a", "uc", "int", "n", "cc", "ce", "t", "ch", "cs", "con", "h", "cp", "co", "ct", "cm", "can", "cu", "u", "f", "e", "b", "arc", "C", "q", "w", "z", "cr", "l", "v", "cat", "m", "lc", "cf", "chain", "p", "cl"], "i": ["pi", "di", "o", "ji", "xi", "j", "gi", "ci", "yi", "ri", "io", "cli", "int", "ind", "ini", "ui", "t", "bi", "id", "ix", "index", "ip", "eni", "si", "u", "iu", "f", "I", "ti", "e", "b", "ai", "qi", "l", "v", "ii", "ic", "li", "lc", "ei", "ice", "zi"], "sr": ["cur", "rs", "vr", "sur", "ssl", "su", "tr", "cv", "sch", "sol", "src", "rh", "rb", "SR", "rf", "yr", "sw", "rt", "rg", "rx", "dr", "ctr", "lr", "pr", "scl", "sf", "radius", "sq", "si", "nr", "usr", "rl", "rr", "etr", "sb", "sv", "cr", "ser", "ru", "rss", "kr", "rc"], "best": ["est", "average", "leader", "case", "success", "good", "results", "value", "diff", "latest", "ast", "all", "Best", "better", "ave", "result", "test", "winner", "cost", "correct", "effective", "nice", "live", "hess", "master", "highest", "mate", "largest", "player", "last", "star", "final", "aster", "default", "max", "end", "poor", "worst", "new", "peer", "bottom", "higher", "style", " Best", "right", "most", "hest", "order", "p", " winner", "rank", "top", "rate"], "v1": ["b1", "c0", "f1", "bone", "p3", " v0", "V1", "p0", "vone", "V9", " v3", " v81", "c1", "V81", " vone", "v0", "v3", "f81", "v9", "c2", " v9", "c3", "v81", "f2", "b2", "f3", "p2", "Vone", "b9", "p1", "V2", "V3"], "v2": ["c0", "f1", "v5", " v0", "V8", "V1", "f6", " v3", "c8", "c1", " v6", "v0", "v3", "c2", "v8", "c3", "c6", " v8", "f2", " v5", "f3", "V5", "V0", "f5", "v6", "V2", "V3"], "r": ["cur", "rs", "rank", "k", "j", "er", "R", "ar", "n", "rh", "mr", "rb", "yr", "g", "rg", "ir", "h", "dr", "lr", "pr", "ra", "ur", "nr", "br", "rr", "hr", "b", "rec", "q", "w", "cr", "v", "l", "fr", "str", "ru", "m", "p", "kr", "right", "rc"], "score": ["est", "core", "grade", "case", "success", "good", "err", "orer", "runner", "scale", "value", "Score", "risk", "pro", " scorer", "une", "ranking", "cache", "weight", "result", "test", "sd", "cost", "winner", "div", "nice", "pri", "live", "scoring", "error", "speed", "stat", " scores", " Score", "confidence", "code", "match", "fit", "status", "stats", "style", "order", "rank", "rate"]}}
{"code": "'''\\nCreated on 2020/08/20\\n\\n@author: harurun\\n'''\\ndef main():\\n  import re\\n  import sys\\n  pin=sys.stdin.readline\\n  pout=sys.stdout.write\\n  perr=sys.stderr.write\\n\\n  S=pin()[:-1]\\n  if re.fullmatch(r\"(hi)+\",S)==None:\\n    print(\"No\")\\n    return \\n  print(\"Yes\")\\n  return \\n\\nmain()", "target": "535", "substitutes": {"pin": ["unit", "pex", "pid", "ino", " Pin", "ins", "port", "pair", "tun", "PIN", "inter", "report", "pos", "pa", "n", "re", " pins", "IN", "ping", "fin", "pointer", " PIN", "Pin", "connect", "plugin", "fan", "line", "py", "bin", "pad", "write", "din", "pipe", "lin", "lock", "scan", "proxy", "module", "pen", "P", "pc", "pins", "spin", "p"], "pout": [" ppin", " Pouts", " ppout", " ppouts", " Pout", " POut", " pOut", "pouts", "pOut", " Pin", " ppOut", " pouts"], "perr": ["tern", "serr", "terv", "parr", "serp", "parp", "perp", "perv", "parv", "pern", "serv", "sern", "parn", "terr", "terp"], "S": ["U", "D", " L", "SS", "R", " N", " I", "PIN", "B", "T", "W", "Si", "s", "A", "L", " s", "G", "SR", "SN", "Pin", "SA", "Q", "WS", "I", "C", "SB", "V", "P", "SP", "O", "H", "M", "F", "N", "Z"]}}
{"code": "n, m = list(map(int, input().split()))\\nxy = [list(map(int, input().split())) for i in range(m)]\\n\\nans = [1] * (n)\\nans[0] = 1\\nball = [0] * (n)\\nball[0] = 1\\nfor i in range(m):\\n    x, y = xy[i]\\n    ans[y-1] += 1\\n    ans[x-1] -= 1\\n    if ball[x-1]:\\n      ball[y-1] = 1\\n    if ans[x-1] == 0:\\n      ball[x-1] = 0\\n      \\nprint(sum(ball))", "target": "311", "substitutes": {"n": ["o", "k", "j", "c", "np", "d", "nb", "a", "ny", "an", "s", "num", "t", "g", "en", "h", "u", "e", "f", "one", "b", "ns", "no", "w", "z", "l", "v", "nc", "ln", "p", "ne", "N"], "m": ["o", "mc", "k", "j", "c", "d", "a", "s", "num", "mn", "g", "dim", "h", "cm", "e", "f", "mu", "b", "mi", "mm", "im", "w", "z", "v", "l", "hm", "r", "M", "p"], "xy": ["part", "wy", "px", "np", "slice", "angle", "bug", "data", "ie", "inter", "pos", "poly", "dy", "coord", "xxx", "phase", "dim", "gb", "nn", "index", "line", "py", "quad", "lines", "la", "multi", "zip", "XY", "yy", "z", "flat", "li", "ne"], "i": ["pi", "di", "o", "k", "xi", "j", "axis", "gi", "c", "ci", "d", "yi", "a", "start", "pos", "int", "ind", "ni", "bi", "id", "g", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "b", "mi", "ai", "z", "p", "qi", "v", "l", "ii", "li", "r", "io"], "ans": ["ls", "part", "ang", "plus", "ass", "anned", "ins", "balls", "sum", "a", "ations", "ars", "ss", "ants", "any", "amps", "pos", "ens", "anch", "an", "s", "ops", "man", " means", "ats", "outs", "cs", "ents", "na", "os", "ana", "nn", "les", "span", "can", "fan", "lines", "cons", "AN", "aned", "ANS", "lan", "ann", "ns", "ane", "cos", "chan", "es", "no", "mass", "ani", "works", "aces", "ays", "mean", "cross", "ones", "groups", "sky", "ons"], "ball": ["el", "area", " balls", "part", "bat", "cover", "out", "wl", "axis", "square", "slice", "balls", "sum", "angle", "coll", "ell", "pal", "ind", "all", "plane", "ll", "binary", "array", "range", "an", "league", "cel", "phase", "min", "multiple", "plan", "cell", "ay", "bl", "co", "line", "index", "beta", "bol", "number", "batch", "span", "bag", "fill", "rock", "move", "Ball", "blast", "gon", "b", "match", "base", "shape", "bell", "mass", "z", "lace", "zone", "l", "group", "ill", "align", "letter"], "x": ["el", "o", "case", "k", "full", "ya", "xi", "j", "plus", "c", "px", "axis", "d", "point", "gal", "a", "pos", "int", "an", "s", "t", "id", "key", "on", "time", "na", "min", "yx", "h", "image", "sex", "rx", "ix", "index", "ex", "xc", "u", "e", "f", "one", "b", "X", "xx", "es", "no", "w", "z", "lat", "v", "l", "cross", "p", "any", "ice"], "y": ["ey", "o", "wy", "sy", "ya", "j", "cy", "c", "d", "oy", "yi", "a", "ny", "yo", "year", "yl", "s", "Y", "ye", "t", "ch", "yr", "dy", "gy", "ay", "ym", "ix", "py", "yt", "e", "b", "no", "yy", "z", "v", "l", "ady", "p", "vy"]}}
{"code": "S=input()\\nweek= ['SUN','MON','TUE','WED','THU','FRI','SAT']\\nans=7-week.index(S)\\nprint(ans)", "target": "471", "substitutes": {"S": ["U", "SE", "SH", "D", "SS", "R", "NS", "SK", "B", "T", "TS", "W", "Si", "SI", "s", "A", "L", "G", "SN", "AS", "SA", "POS", "SC", "I", "SU", "C", "SG", "V", "P", "SD", "K", "M", "F", "N"], "week": ["unit", "part", "window", "work", "aw", "wan", " weekday", "event", "hour", "ss", "Day", "rule", "year", "wk", "W", "num", " day", "game", "weekly", " Week", "time", "Month", "date", "sex", "month", "day", "row", "school", "Week", "end", "group", " weeks", "wife", "DAY", "season", "flow", "letter"], "ans": ["ls", "ANN", "anus", "sin", "san", "annis", "aning", "nas", "ins", "ars", "ss", "ants", "ens", "an", "s", "man", "cs", "na", "en", "anas", "ds", "aus", "ks", "nan", "ana", "span", "can", "anes", "AN", "atan", "leans", "aned", "ANS", "ann", "lan", "ns", "scan", "es", "ai", "sam", "han"]}}
{"code": "N, M, K = map(int, input().split())\\nfriend = {}\\nfor i in range(M):\\n    A, B = map(lambda x: x-1, map(int, input().split()))\\n    if A not in friend:\\n        friend[A] = []\\n    if B not in friend:\\n        friend[B] = []\\n    friend[A].append(B)\\n    friend[B].append(A)\\n\\nblock = {}\\nfor i in range(K):\\n    C, D = map(lambda x: x-1, map(int, input().split()))\\n    if C not in block:\\n        block[C] = []\\n    if D not in block:\\n        block[D] = []\\n    block[C].append(D)\\n    block[D].append(C)\\n\\nfirst = {}\\nfor i in range(N):\\n    if i not in first:\\n        first[i] = i\\n        if i in friend:\\n            queue = []\\n            queue.extend(friend[i])\\n            counter = 0\\n            while counter < len(queue):\\n                item = queue[counter]\\n                first[item] = i\\n                if item in friend:\\n                    for n in friend[item]:\\n                        if n not in first:\\n                            queue.append(n)\\n                counter += 1\\n\\nsize = {}\\nfor key in first:\\n    if first[key] not in size:\\n        size[first[key]] = 1\\n    else:\\n        size[first[key]] += 1\\n\\nfor i in range(N):\\n    if i not in friend:\\n        print(0)\\n        continue\\n    no_friend = 0\\n    if i in block:\\n        for b in block[i]:\\n            if first[b] == first[i]:\\n                no_friend += 1\\n    print(size[first[i]] - len(friend[i]) - no_friend - 1)", "target": "368", "substitutes": {"N": ["U", "NA", "S", "R", "NS", "E", "NE", "Ns", "T", "W", "J", "Y", "L", "G", "Ni", "NB", "NM", "Size", "NN", "Q", "I", "X", "Ne", "V", "P", "O", "H", "F", "Z"], "M": ["U", "Multi", "LM", "S", "R", "E", "T", "W", "J", "Y", "L", "G", "Num", "MU", "MD", "MS", "MN", "Q", "I", "X", "V", "MB", "P", "MC", "MX", "m", "O", "H", "Mi", "F", "MF", "Z"], "K": ["U", "k", "S", "Max", "R", "SK", "E", "NE", "KE", "T", "W", "J", "Y", "G", "NK", "L", "KK", "Q", "Work", "PK", "X", "V", "P", "KN", "KS", "O", "H", "KC", "F", "Z"], "friend": ["home", "fw", "work", "feed", "close", "large", "four", "ff", "riend", " friendship", "time", "self", "wall", "rage", "follow", "child", "FF", "right", "show", "group", "girl", "review", "friends", "hub", "favorite", " friends", "party", "fax", "weight", "prefix", "client", "woman", "ward", "Friend", "rock", "pport", "join", "hack", "rowd", "brother", "hello", "core", "wheel", "friendly", "field", "week", "court", "search", "gallery", "back", "head", "long", "list", "man", "config", "voice", "server", "index", "request", "world", "box", "support", "clean", "member", "new", "proxy", "community", "hip", "facebook", "user", "case", "news", "page", "bug", "pair", "short", "fuel", "raud", "view", "pull", "bot", "gender", "parent", "gold", "worker", "play", "address", "club", "Friends", "forum", "filter", "boy", "girlfriend", "flow"], "i": ["note", "pi", "di", "o", "it", "part", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "oi", "ri", "a", "ie", "ori", "int", "ind", "ui", "ini", "t", "ni", "bi", "id", "y", "on", "g", "h", "ib", "inn", "index", "ip", "ine", "si", "u", "iu", "f", "I", "ti", "e", "ish", "im", "ai", "w", "z", "chi", "qi", "p", "l", "v", "ii", "li", "ei", "m", "inet", "io"], "A": ["As", "U", "Ac", "Ca", "S", "E", "Alpha", "a", "CA", "T", "W", "IA", "This", "At", "Y", "AD", "L", "AM", "G", "Am", "Ab", "AI", "Ad", "An", "AP", "Q", "Ar", "I", "AA", "X", "P", "API", "You", "AB", "O", "AC", "H", "F", "Name", "LA"], "B": ["U", "EB", "Bl", "Be", "BF", "BS", "R", "E", "LB", "Both", "Bi", "BB", "T", "UB", "W", "BE", "J", "Y", "L", "G", "Ab", "NB", "Business", "BA", "Blue", "OB", "BI", "AP", "Q", "Bs", "GB", "QB", "DB", "WB", "BER", "I", "X", "Block", "V", "P", "BT", "BC", "AB", "O", "H", "F", "Beta", "Z"], "block": ["type", "control", "work", "object", "close", "blocks", "social", "wall", "follow", "end", "base", "child", "right", "comment", "show", "group", "cl", "part", "ban", "review", "full", "off", "layout", "friends", "rol", "range", "id", "client", "network", "rock", "Block", "join", "hack", "cross", "brother", "condition", "unit", "core", "frame", "friendly", "field", "sync", "court", "back", "head", "list", "config", "board", "contract", "plugin", "image", "bl", "channel", "box", "support", "clean", "link", "community", "facebook", "user", "case", "page", "name", "ring", "view", "all", "cache", "browser", "round", "check", "ack", "rect", "parent", "line", "main", "number", "row", "clock", "address", "lock", "other", "filter", "chain", "flow"], "C": ["U", "Ca", "CI", "S", "CN", "CD", "c", "R", "d", "E", "Do", "CT", "NC", "Cr", "CA", "T", "GC", "W", "Y", "L", "G", "Col", "CNN", "Can", "Common", "Cl", "Co", "Con", "CF", " c", "SC", "I", "X", "CW", "DC", "V", "P", "CC", "Cs", "EC", "CR", "VC", "Ch", "Cu", "O", "AC", "F", "H", "CM", "Custom", "CE", "CL"], "D": ["U", "Dou", "DT", "S", "CD", "DK", "R", "d", "Do", "E", "Ds", "Daniel", "Both", "Data", "DO", "T", "W", "Y", "AD", "DA", "Di", "L", "G", "DP", "Dir", "DD", "DM", "DS", "MD", "De", "DI", "Q", "DB", "I", "X", "DF", "Cloud", "DC", "V", "P", "API", "DL", "DN", "O", "H", "DH", "F", "DE"], "first": ["home", "empty", "close", "primary", "current", "best", "large", "grid", "staff", "initial", "share", "front", "split", "blocks", "self", "social", "next", "conference", "then", "st", "f", "third", "right", "p", "show", "part", "full", "plus", "prev", "only", "single", "space", "root", "client", "brother", "top", "unit", "use", "friendly", "back", "head", "instance", "long", "list", "alpha", "sort", "last", "support", "new", "facebook", "user", "string", "case", "this", "name", "short", "start", "second", "latest", "all", "starting", "First", "project", "parent", "master", "one", "before", "like", "now", "small"], "queue": ["core", "file", "log", "manager", "feed", "page", "current", "Queue", "view", "user", "list", "cache", "que", "config", "update", "prefix", "client", "force", "count", "qa", "pool", "ue", "plugin", "change", "job", "server", "next", "worker", "channel", "sequence", "master", "index", "model", "menu", "main", "message", "seq", "foo", "buffer", "child", "status", "q", "chain", "order", "p", "group"], "counter": ["cur", "ner", "type", "step", "currency", "exit", "case", "c", "page", "current", "large", "ver", "Counter", "sum", "name", "inter", "coll", "switch", "race", "num", "info", "weight", "result", "stop", "inner", "time", "entry", "loop", "keep", "ctrl", "url", "offset", "iter", "change", "parent", "ctr", "consumer", "index", "next", "master", "number", "batch", "nr", "clock", "match", "outer", "shift", "store", "status", "skip", "ignore", "now", "nc", "cube", "count", "card"], "item": ["note", "it", "o", "type", "element", "k", "x", "j", "object", "c", "np", "container", "d", "event", "name", "data", "value", "app", "ie", "int", "ind", "all", "num", "non", "bi", "id", "anything", "inner", "entry", "bar", "annot", "g", "image", "iter", "self", "parent", "nn", "Item", "ib", "next", "ip", "index", "items", "enn", "u", "hop", "e", "obj", "interest", "other", "q", "ai", "layer", "v", "li", "order", "p"], "n": ["o", "k", "x", "j", "c", "np", "d", "yn", "node", "nb", "name", "a", "num", "non", "ni", "bi", "y", "on", "mn", "g", "en", "network", "un", "next", "number", "nr", "net", "nt", "e", "f", "rn", "ns", "ai", "z", "l", "v", "ic", "li", "m", "r", "nc", "p", "ne"], "size": ["unit", "mini", "core", "empty", "friendly", "loc", "case", "sized", "sync", "extra", "news", "feed", "close", "page", "large", "scale", "sum", "name", "start", "ize", "cache", "range", "config", "share", "weight", "id", "sort", "zero", "time", "gender", "SIZE", "body", "width", "Size", "self", "parent", "capacity", "index", "next", "box", "number", "speed", "last", "len", "address", "flow", "max", "since", "code", "shape", "member", "new", "join", "content", "position", "z", "fee", "length", "small", "form", "group", "count"], "key": ["o", "part", "type", "k", "x", "j", "c", "connection", "page", "oy", "ver", "service", "name", "ie", "section", "ry", "int", "switch", "year", "user", "ek", "ye", "list", "id", "y", "time", "date", "change", "self", "parent", "index", "ip", "row", "char", "u", "e", "f", "code", "my", "base", "link", "q", "no", "w", "Key", "igh", "KEY", "isk", "p", "ice", "count"], "no_friend": ["noplacefuel", "noJfriends", "no_friends", "no_fuel", " no_friends", "noplacefriend", "noPboy", "noofgirlfriend", "no_club", "noplacefriends", "no_boy", "no_girl", "noJgirl", " no_girl", "noJclub", " no_club", " no_girlfriend", " no_fuel", "noPfriend", "no_girlfriend", "nooffriend", "noJfriend", "noPfriends", " no_boy", "noplacegirlfriend", "nooffriends", "nooffuel"], "b": ["it", "k", "j", "c", "d", "account", "nb", "ab", "a", "bh", "bc", "bis", "num", "binary", "rb", "bi", "bot", "iq", "bs", "bar", "body", "g", "h", "gb", "ib", "bl", "ip", "beta", "bin", "wb", "br", "lb", "f", "e", "base", "sb", "w", "ba", "bid", "v", "l", "bb", "m", "p", "bp"]}}
{"code": "N = int(input())\\nans = 0\\nA = list(map(int, input().split()))\\nfor a in A[::2]:\\n    if a%2 != 0:\\n        ans += 1\\n        \\nprint(ans)", "target": "126", "substitutes": {"N": ["NA", "D", "S", "NS", "B", "Ns", "T", "n", "L", "G", "Num", "CNN", " n", "NN", "No", "AN", "I", "X", "C", "Na", "Ne", "V", "P", "K", "O", "M", "F", "Z"], "ans": ["ls", "NA", "x", "aning", "anned", "nas", "ins", "ars", "ants", "amps", "int", "n", "args", "an", "s", "anc", "actions", " means", "ats", "asts", "cs", "ads", "alpha", "anon", "sk", "na", "os", "ds", "gan", "ks", "nan", "An", "span", "can", "anes", "lines", "AN", "atan", "aned", "leans", "ANS", "acts", "activation", "ann", "lan", "ns", "ani", "ano", "ays", "mean", "aus", "ons"], "A": ["As", "NA", "D", "S", "Z", "Alpha", "B", "CA", "All", "T", "At", "Array", "Y", "L", "G", "Am", "Part", "An", "AN", "I", "AA", "am", "X", "C", "Na", "V", "P", "K", "O", "M", "F", "LA"], "a": ["ma", "x", "j", "c", "ar", "ac", "ab", "art", "af", "int", "n", "an", "s", "fa", "i", "alpha", "na", "sa", " n", "ana", "span", "aa", "va", "f", "b", "ga", " i", "ai", "ae", "l", "ace", "p", "count", "au"]}}
{"code": "a = [int(input()) for _ in range(5)]\\nz,ans = 123,0\\nfor i in a:\\n    if i%10!=0:z = min(z,i%10)\\n    ans += 10*((i+10-1)//10)\\nprint(ans+z-10 if (z!=123) or (z==0) else ans)", "target": "193", "substitutes": {"a": ["area", "sta", "c", "ar", "ama", "ac", "af", "n", "an", "s", "array", "A", "fa", "alpha", "qa", "sa", "ia", "za", "aa", "va", "oa", "f", "b", "ad", "ca", "am", "ga", "ai", "ta", "asa", "aaa", "ba", "ea", "aj", "p", "au"], "_": ["x", " p", "__", " time", "n", "t", "len", "f", "q"], "z": ["ze", "x", "j", "c", "d", "yi", "data", "int", "ind", "n", "zen", "yz", "iz", "s", "zy", "nz", "az", "gz", "y", "alpha", "zero", "xxx", "oz", "zer", "tz", "cz", "za", "zh", "zip", "u", "f", "b", "inf", "q", "w", "zone", "l", "ez", "zn", "p", "zo", "zi", "Z"], "ans": ["ls", "x", "std", "ags", "ras", "ins", "ars", "ants", "ss", "n", "ens", "args", "an", "anc", "s", "nz", "az", "gz", "ats", "cs", "ents", "anon", "sk", "na", "os", "anas", "ds", "ms", "anz", "ks", "nan", "ana", "span", "cons", "ates", "AN", "cas", "aned", "ANS", "ann", "ad", "ns", "ends", "es", "errors", "q", "ai", "ani", "aces", "eps", "p", "aus", "ons", "au"], "i": ["pi", "ji", "x", "xi", "j", "c", "gi", "ci", "d", "phi", " I", "oi", "ie", "start", "int", "ind", "n", "s", "ini", "ni", "bi", "y", "alpha", "g", "index", "ip", "si", "u", "f", "I", "e", "end", "b", "ti", "q", "ai", "p", "l", "ii", "m", "r", "li", "zi", "Z"]}}
{"code": "str = input()\\n\\nN = int(str.split()[0])\\nK = int(str.split()[1])\\nif (K == 1):\\n\ts = 0\\nelse :\\n\ts = N - K\\n\\nprint(\"{}\".format(s))\\n", "target": "739", "substitutes": {"str": ["oct", "string", "part", "err", "input", "tr", "exp", "out", "er", "sp", "d", "data", "coll", "sl", "int", "dec", "strings", "arr", "div", "iter", "dr", "pr", "line", "st", "strip", "char", "br", "Str", "f", "e", "obj", "b", "stri", "STR", "r", "text", "fr", "txt", "sr", "enc"], "N": ["NA", "S", "R", "NS", "E", "NC", "NL", "NE", "B", "Ns", "T", "n", "Y", "Ni", "L", "G", "Num", "SN", "NT", " n", "Size", "NN", "Q", "X", "ns", "C", "NI", "Ne", "V", "P", "KN", "M", "F", "Z"], "K": ["U", "SE", "KR", "D", "Ku", "k", "IK", "S", "Max", "SK", "E", "B", "Ka", "KE", "n", "J", "W", "Y", "NK", "G", "L", "KK", "AK", "Q", "PK", "X", "C", " k", "V", "P", "Ke", "KN", "Sk", "KS", "O", "H", "M", "KC", "F", "Z"], "s": ["sec", "ls", "string", "o", "parts", "services", "S", "k", "sync", "c", "search", "d", "ins", "ses", "sum", "ss", "Ns", "n", "args", "ops", "space", "strings", "i", "sort", "split", "g", "min", "ds", "sample", "ks", "span", "gs", "sites", "sq", "south", "si", "u", "size", "e", "sym", "f", "spec", "b", "ns", "sb", "less", "sg", "sc", "sign", "se", "p", "seconds"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\n\\ndef sell(money,stock,price):\\n  money += price*stock\\n  stock = 0\\n  return money, stock\\n\\ndef buy(money,price):\\n  stock,money = divmod(money,price)\\n  return money,stock\\n\\nmoney = 1000\\nstock = 0\\nfor i in range(N):\\n  money, stock = sell(money,stock,A[i])\\n  if i<N-1 and A[i]<A[i+1]:\\n    money, stock = buy(money,A[i])\\nprint(money)", "target": "67", "substitutes": {"N": ["U", "D", "S", "R", "NS", "E", "NE", "B", "Ns", "T", "n", "Sn", "Y", "L", "G", "Ni", "Num", "NT", "NM", "Size", "NN", "number", "No", "Q", "size", "I", "X", "C", "NI", "Ne", "RN", "V", "P", "K", "KN", "O", "H", "M", "F", "Z"], "A": ["As", "U", "AR", "NA", "D", "S", "R", "E", "Alpha", "a", "B", "CA", "T", "PA", "W", "mA", "At", "Array", "Y", "AM", "L", "Am", "alpha", "Ma", "AI", "GA", "SA", "AU", "An", "TA", "AP", "Q", "Ar", "Ha", "Average", "I", "AA", "C", "MA", "V", "P", "API", "K", "H", "M", "AC", "F", "LA"], "money": ["mini", "auto", "market", "cycle", "family", "margin", "share", "fine", "picture", "inventory", "time", "machine", "coin", "ow", "Money", "rice", "example", "style", "m", "comment", "expensive", "file", "blue", "data", "root", "weight", "zero", "quote", "how", "error", "gross", "volume", "company", "article", "height", "demand", "very", "cost", "loss", "payment", "model", "material", "resource", "ime", "euro", "currency", "financial", "buy", "cow", "amount", "paid", "sum", "value", "depth", "div", "magic", "custom", "change", "line", "yahoo", "number", "cash", "dollar", "size", "fortune", "mu", "lot", "power", "module", "fee", "deep", "flow"], "stock": ["market", "cycle", "shop", "hold", "family", "grid", "action", "cart", "share", "margin", "fin", "fine", "time", "unique", "capacity", "stack", "rice", "draw", "ity", "style", "str", "street", "product", "year", "strike", "root", "weight", "zero", "script", "version", "ox", "error", "final", "max", "stocks", "volume", "ship", "sh", "Stock", "company", "article", "security", "length", "trade", "unit", "height", "demand", "head", "n", "shock", "put", "alpha", "cost", "bin", "sq", "house", "resource", "confidence", "critical", "standard", "ic", "rank", "rate", "currency", "financial", "ash", "buy", "square", "tick", "sum", "depth", "cache", "false", "div", "magic", "change", "custom", "credit", "number", "cash", "size", "clock", " equity", "growth", "strength", "power", "module", "fee", "order", "flow"], "price": ["unit", "currency", "grade", "type", "priority", "buy", "sp", "Price", "market", "scale", "amount", "value", "transfer", "margin", "weight", "fine", "cost", "time", "change", "pr", "frequency", "number", "size", "f", "rice", "volume", " prices", "power", "position", "fee", "length", "style", "duration", "order", "p", "trade", "rate", "priced"], "i": ["mini", "pi", "it", "uri", "o", "di", "ji", "k", "x", "xi", "j", "c", "gi", "gu", "ci", "d", "slice", "yi", "ri", "a", "io", "ie", "start", "int", "ind", "n", "ui", "ini", "margin", "info", "id", "y", "bi", "key", "pri", "h", "ix", "index", "ip", "multi", "si", "u", "iu", "fi", "f", "ti", "I", "e", "b", "im", "ai", "strength", "init", "z", "qi", "l", "v", "ii", "lc", "li", "m", "p", "block", "count"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**7)\\ndef input(): return sys.stdin.readline().rstrip()\\n\\n\\ndef main():\\n    H, W, M = map(int, input().split())\\n    bombs = []\\n    hs = [0] * H\\n    ws = [0] * W\\n    for _ in range(M):\\n        h, w = map(int, input().split())\\n        bombs.append(tuple([h-1, w-1]))\\n        hs[h-1] += 1\\n        ws[w-1] += 1\\n    maxh = max(hs)\\n    maxw = max(ws)\\n    ans = maxh + maxw\\n\\n    maxhindex = [i for i, x in enumerate(hs) if x == maxh]\\n    maxwindex = [i for i, x in enumerate(ws) if x == maxw]\\n\\n    bombs = set(bombs)\\n    for i in maxhindex:\\n        for j in maxwindex:\\n            if (i, j) not in bombs:\\n                print(ans)\\n                exit()\\n    print(ans-1)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "694", "substitutes": {"H": ["U", "SH", "D", "S", "Max", "HC", "R", "Hi", "B", "T", "J", "HH", "Y", "G", "Wh", "L", "HK", "Q", "I", "X", "C", "HI", "V", "P", "K", "O", "F", "N", "Z"], "W": ["U", "WI", "S", "Ws", "Sw", "R", "B", "T", "WR", "J", "F", "Y", "L", "Wh", "G", "WP", "Q", "WA", "WC", "WS", "X", "SW", "Win", "V", "P", "K", "VW", "WD", "WE", "N", "Z"], "M": ["U", "LM", "D", "S", "R", "E", "B", "T", "Y", "L", "G", "DM", "MS", "MN", "Q", "X", "MI", "C", "MH", "V", "P", "MM", "K", "MW", "MC", "MT", "m", "O", "Mi", "F", "N", "Z"], "bombs": ["biodes", "biounds", "embrones", "abones", "abodes", " bops", "boounds", "besses", "bbusters", "abombs", "bubombs", "bubops", "ambounds", "boodes", "lambers", "bloss", "Bombs", "boombs", "Bomas", "lombs", "lrones", "Bbusters", "blones", " bones", "ambodes", "bones", "biouls", "bubesses", "Balions", "boss", "fomas", "embombs", "brones", "ambouls", " boss", " bumbs", "embalions", "bops", "Brones", "Boks", " bomas", " besses", "bomas", "boouls", "lalions", " bodes", "Bambers", "foks", "blombs", "bodes", "ambombs", "fbusters", "Bops", "bumbs", "bubumbs", "boks", " bbusters", "bounds", "embambers", " boks", "biombs", "fombs", "balions", "blodes", "aboss", "bambers", "Bumbs", "bouls", "Besses"], "hs": ["rs", "ls", "asses", "ha", "adh", "maps", "oh", "holes", "hw", "hus", "ht", "reads", "ih", "hea", "wa", "bh", "opens", "ens", "HH", "hops", "His", "rh", "hp", "s", "heads", "ph", "wcs", "his", "uph", "hh", "hes", "mph", "ks", "HS", "hers", "hess", "gs", "ys", "ps", "hi", "ho", "Ps", "each", "gh", "sh", "han", "hm", "igh", "xs", "he", "wh", "ums", "yah"], "ws": ["wp", "wm", "wy", "fw", "wr", "Ws", "wl", "hw", "aw", "wa", "ss", "vs", "wed", "ww", "wk", "wt", "rh", "s", "hops", "tw", "wd", "wcs", "sw", "aks", "we", "ms", "ks", "wal", "windows", "rw", "wn", "wb", "WS", "wic", "ys", "weights", "ns", "wx", "es", "kw", " WS", "ims", "wi", "xs", "words", "wh", "aws", "wu"], "_": [" b", "d", "ac", " time", "n", "time", "ip", " l", "f", "p", "m"], "h": ["o", "ha", "k", "oh", "c", "d", "ht", "ih", "a", "wa", "bh", "kh", "n", "rh", "s", "y", "ph", "hd", "th", "u", "f", "max", "b", "hi", "q", "sh", "uh", "z", "gh", "l", "v", "hm", "m", "r", "he", "wh", "p"], "w": ["k", "fw", "c", "hw", "aw", "d", "a", "wa", "n", "ww", "wt", "s", "wd", "y", "width", "sw", "we", "ow", "win", "wn", "wb", "u", "f", "max", "b", "wx", "q", "z", "v", "l", "m", "wh", "p"], "maxh": ["MAXH", "axw", "oxw", "oxh", "maxhh", "MaxH", "MAXh", "oxx", "Maxh", " maxH", "axha", "MAXhh", "maxH", "Maxhh", " maxha", "Maxx", "axH", "oxH", " maxhh", "Maxw", "axh", " maxx", "maxha", "MAXw", "maxx", "Maxha"], "maxw": [" maxwa", "minwa", "axw", "maxwa", "endwa", "axsw", "axwa", " maxW", " maxsw", " maxb", " maxww", "defaultw", "defaultwa", "defaultW", "maxW", "parenth", "endw", "minW", "parentw", "parentW", "minw", "maxsw", "maxww", "axb", "endW", "axW", "axh", "parentsw", "defaultb", "maxb", "endww", "minww"], "ans": ["ls", "ANN", "anus", "san", "nas", "ins", "ars", "ants", "amps", "ens", "an", "anc", " means", "ats", "oss", "ians", "anon", "annot", "na", "anas", "ds", "ids", "nan", "An", "ks", "ana", "can", "anes", "cons", "AN", "atan", "aned", "leans", "anne", "ANS", "ann", "lan", "ns", "es", "ai", "ani", "ays", "xs", "aus", "ons"], "maxhindex": ["maxHIndex", "maxwIndex", "Maxcslice", "maxrhslice", "MaxcIndex", "maxHindex", "maxwslice", "maxhslice", "maxHunit", "maxcIndex", " maxHunit", " maxHindex", "maxwunit", " maxHIndex", "maxrhIndex", "Maxcindex", " maxhIndex", " maxhunit", "maxcslice", "maxcindex", "Maxhindex", "Maxhslice", "maxhIndex", "maxrhindex", "MaxhIndex", "maxhunit", "maxcunit"], "i": ["pi", "o", "ji", "iw", "k", "xi", "c", "ci", "d", "a", "io", "ie", "int", "ind", "n", "s", "ui", "list", "ini", "bi", "id", "y", "key", "ix", "index", "ia", "ip", "multi", "si", "u", "iu", "f", "I", "e", "mu", "b", "mi", "hi", "im", "ai", "z", "v", "l", "ii", "m", "li", "ei", "p"], "x": ["xp", "xi", "plus", "c", "hex", "px", "ci", "d", "ctx", "exp", "a", "wa", "lex", "int", "n", "ux", "num", "s", "t", " xx", "id", "y", "tx", "xxx", "na", "xa", "ax", "xt", "sex", "rx", "ct", "ix", "index", "ip", "ex", "xc", "u", "e", "f", "max", "dx", "X", "xx", "xf", "z", "v", "cross", "xs", "p", "any"], "maxwindex": ["maxWINDEx", "maxwindlex", "maxburnec", " maxwex", "maxburnex", "MaxWINDec", "MaxWINDen", "Maxwindex", "MaxWINDex", "maxcondEx", " maxwlex", "maxwaldex", " maxwindexp", "maxWINDec", "maxWindex", "maxwindexp", " maxwEx", "maxcondlex", " maxwindlex", "Maxwindec", "maxwaldec", "maxwlex", "maxWindexp", "maxWINDex", "MaxwindEx", " maxwexp", "maxwaldEx", "maxwEx", "maxburnen", "maxwinden", "maxburnEx", "Maxwinden", "maxwalden", "maxcondex", " maxwindEx", "maxwindec", "MaxWINDEx", "maxwex", "maxWindlex", "maxwindEx", "maxWINDen", "maxWindEx", "maxcondexp", "maxwexp"], "j": ["ji", "o", "k", "xi", "c", "d", "yi", " you", "a", "ie", "oj", "n", "J", "ni", "y", "g", " us", "ij", "ion", " n", "ia", "job", " z", "ip", "jo", "si", "b", "jj", "q", "ai", "z", "v", "jp", "ii", "l", "m", "li", "r", "ih", "p"]}}
{"code": "N = int(input())\\nL = []\\nfor i in range(N):\\n  L.append(input())\\n\\nprint(\"AC x \"+str(L.count('AC'))+\\n\"\\nWA x \"+str(L.count('WA'))+\\n\"\\nTLE x \"+str(L.count('TLE'))+\\n\"\\nRE x \"+str(L.count('RE')))", "target": "531", "substitutes": {"N": ["D", "S", "R", "NS", "E", "NL", "B", "Ns", "T", "n", "W", "J", "Y", "A", "G", "Len", "NB", "NT", " n", "Size", "No", "Q", "I", "Number", "X", "NO", "C", "Na", "Ne", "V", "OS", "P", "K", "O", "M", "F", "Z"], "L": ["PL", "LM", "D", "Bl", "CL", "LU", "VL", "R", "Pl", "E", "HL", "LB", "NL", "LR", "B", "Lo", "List", "T", "LS", "FL", "W", "Long", "RL", "LI", "G", "IL", "AL", "LP", "TL", "EL", "OL", "SL", "LE", "El", "BL", "Li", "I", "dL", "X", "C", "XL", "LL", "Lu", "V", "ML", "P", "l", "DL", "O", "M", "F", "LA"], "i": ["j", "gi", "c", "d", " I", "col", "ie", "ind", "id", "y", " il", "h", "ib", "index", "ip", "si", "il", "u", "iu", "e", "ti", "I", "f", "q", "ai", "z", "l", "li", "p"]}}
{"code": "def roundone(a, b):\\n\\n    abc = \"123\"\\n\\n    return abc.replace(a, \"\").replace(b, \"\")\\n\\ndef main():\\n    a = str(input())\\n    b = str(input())\\n    print(roundone(a, b))\\n\\nif __name__ == '__main__':\\n    main()", "target": "752", "substitutes": {"a": ["area", "x", "c", "aw", "ak", "ama", "name", "ac", "ab", "art", "aux", "da", "an", "A", "fa", "alpha", "na", "sa", "ah", "aa", "la", "va", "f", "e", "ad", "ca", "am", "ga", "ai", "ae", "asa", "aaa", "ba", "p", "au"], "b": ["eb", "mb", "abb", "pb", "db", "c", "d", "cb", "nb", "ob", "ab", "name", "B", "bc", "bd", "n", "ub", "xb", "s", "rb", "bi", "bas", "i", "y", "bs", "bar", "fb", "url", "h", "ib", "beta", "aa", "wb", "lb", "f", "e", "base", "sb", "ba", "v", "bb", "bf", "p"], "abc": ["abb", "c", "aaaa", "cb", "ob", "ac", "ab", "uc", "bc", "aux", "af", "fc", "abs", "rb", "az", " ab", " ec", "alpha", " rc", "xxx", "ah", "fb", "ib", "acc", "dc", "aa", " c", " ABC", "foo", "ABC", " alphabet", "aaa", "ba", " ecc", "lc", "bb"]}}
{"code": "a = int(input())\\nb = int(input())\\nc = int(input())\\nx = int(input())\\n\\nanswer = 0\\nfor coin1 in range(a+1):\\n    for coin2 in range(b+1):\\n        for coin3 in range(c+1):\\n            if x == 500 * coin1 + 100 * coin2 + 50 * coin3:\\n                answer += 1\\n\\nprint(answer)", "target": "439", "substitutes": {"a": ["area", "ab", "ac", "art", "af", "n", "da", "an", "s", "A", "y", "alpha", "na", "sa", "aa", "u", "va", "f", "e", "am", "ca", "ad", "ga", "ai", "ae", "aaa", "ba", "asa", "z", "ea", "aj", "m", "p", "audio", "au"], "b": ["o", "j", "d", "cb", "ab", "B", "bc", "bd", "n", "rb", "i", "y", "bs", "g", "fb", "wb", "u", "lb", "f", "e", "ad", "ca", "sb", "ae", "ba", "l", "v", "bb", "r", "p"], "c": ["o", "k", "j", "cy", "ci", "d", "ac", "n", "s", "i", "cs", "y", "g", "con", "h", "cp", "cu", "u", "e", "f", "code", "ca", "C", "q", "w", "z", "l", "v", "r", "p", "count"], "x": ["k", "xp", "xi", "cy", "ci", "d", "ac", "n", "num", "t", "i", "y", "tx", "alpha", "g", "ax", "h", "abc", "ix", "index", "number", "ex", "xc", "u", "e", "f", "dx", "X", "xx", "q", "w", "z", "v", "l", "r", "m", "p", "rc"], "answer": ["ze", "grade", "average", "field", "distance", "energy", "response", "question", " answers", "amount", "output", "value", "ell", "fix", "option", "array", "cache", "update", "result", "alpha", "sort", "answered", "score", "image", "word", "next", "number", "age", "cash", "reply", "size", "address", "ee", "f", "issue", "vote", "code", "match", "evidence", "knowledge", "Answer", "z", "fee", "order", "p", "audio", "count"], "coin1": ["mon01", "Coin3", " coin01", "mon3", "Coin2", "Coin01", "coins2", "coins3", "coins1", "Coin1", "mon2", "coin01", "mon1"], "coin2": ["bitcoin2", "Coin02", " coin5", "Coin8", "bitcoin8", "Coin5", "bitcoinTwo", "coinTwo", "coin02", "coin8", "coinB", "Coin2", "CoinB", "coins2", "coins5", "CoinTwo", "oin2", "coins1", " coin02", "oin8", "oinB", "oinTwo", "Coin1", "coins02", "coin5", "bitcoinB"], "coin3": ["bitcoin5", "Coin8", "mon5", "coin9", "Coin3", "oin9", "mon3", "coin8", "Coin2", " coin8", "bitcoin9", "oin03", "bitcoin3", "oin2", "oin3", "coin03", "oin5", "oin8", "mon03", "Coin1", "coin5", "oin1", "bitcoin03", "mon9"]}}
{"code": "from collections import Counter\\ndef solve():\\n    N = int(input())\\n    A = list(map(int, input().split()))\\n    cnter = Counter(A)\\n    cnter_list = list(cnter.items())\\n    cnter_list.sort(key=lambda x:x[0], reverse=True)\\n\\n    double_cnt = 0\\n    ans = 1\\n    for elem in cnter_list:\\n        if elem[1] >= 4:\\n            if double_cnt == 0:\\n                ans = elem[0] * elem[0]\\n                break\\n\\n        if elem[1] >= 2:\\n            double_cnt += 1\\n            ans *= elem[0]\\n        if double_cnt >= 2:\\n            break\\n    else:\\n        print(0)\\n        return\\n    \\n    print(ans)\\n\\nif __name__ == '__main__':\\n    solve()", "target": "53", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "E", "B", "Ns", "T", "n", "Y", "L", "G", "Ni", "Num", "NT", "I", "X", "C", "V", "P", "K", "O", "H", "M", "F"], "A": ["As", "AR", "U", "NA", "D", "S", "E", "Alpha", "a", "B", "CA", "T", "At", "Array", "Y", "G", "AM", "L", "Am", "AS", "alpha", "AP", "Ar", "AN", "AV", "I", "AA", "X", "C", "V", "P", "K", "AF", "API", "H", "M", "Input", "AC", "LA"], "cnter": ["bninter", "bnter", "hnters", "cryte", "CNtr", "bnters", "hnter", "bnte", "arentr", "arenters", "arenter", "CNuter", "CNters", "hnte", "cattr", "cnuter", "cryters", "cninter", "cnters", "cnte", "catters", "cryter", "hninter", "arenuter", "catter", "CNter", "cntr", "cryinter", "catuter"], "cnter_list": ["cnters_List", "cnner__type", "cnter_type", "cnner__list", "cnater_list", "cnter__list", "cnner_list", "cnter__List", "cnater_List", "cnner__cl", "cnter__type", "cnter_List", "cnter_like", "cnter_cl", "cnter__cl", "cnater_like", "cnner_type", "cnters_type", "cnater_l", "cnner_cl", "cnner__List", "cnner_List", "cnter_l", "cnters_list"], "double_cnt": ["double_connn", "double_pcnt", "double_Count", "double_acent", "double_acount", "double_lcNT", "double_lcent", "double_CNT", "double_lcount", "double_conNT", "double_acct", "double_cct", "double_cNT", "double_acnn", "double_pcent", "double_conount", "double_Cnt", "double_pcNT", "double_pcount", "double_count", "double_acNT", "double_Cct", "double_lcct", "double_lcnt", "double_connt", "double_cnn", "double_cent", "double_lcnn", "double_acnt"], "ans": ["auto", "ls", "parts", "case", "x", "aning", "nas", "ras", "ins", "ases", "a", "ations", "ars", "ants", "amps", "an", "s", "ads", "actions", " means", "anc", "ats", "cs", "ops", "ents", "ams", "anon", "sk", "annot", "na", "os", "cases", "ians", "anas", "CNN", "ks", "nn", "nan", "span", "ana", "can", "cons", "man", " cases", "AN", "cas", "leans", "aned", "ANS", "ann", "ns", "lan", "ands", "errors", "features", "ani", "aces", "ays", "mean", "grades", "yes", "eps", "helps", "aus", "ons"], "elem": [" elements", "peler", "selement", "eze", "element", " elee", "selements", "seze", "eelem", "eleg", " elev", " eelement", "gelem", "selev", "belem", "teze", "eelements", "elev", "telements", "belements", "gelements", "peelement", " element", "eelement", "belee", "peleg", "teelement", "elements", "pelee", "eler", "aelement", "aelements", "seler", "elee", "pelement", "eeelement", "pelem", "gelement", "pelements", " eleg", "seelement", "telem", "geler", "selem", "pelev", " eze", "aelem", "beleg", " eler", "aeelement"]}}
{"code": "n = int(input())\\nh = list(map(int, input().split()))\\n\\ndp = [float('inf')] * n\\n\\ndp[0] = 0\\nfor i in range(1, n):\\n  if i == 1:\\n    dp[i] = dp[0] + abs(h[i]-h[i-1])\\n  else:\\n    dp[i] = min(dp[i-1]+abs(h[i]-h[i-1]),dp[i-2]+abs(h[i]-h[i-2])) \\n  \\nprint(dp[n-1])", "target": "5", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "np", "d", "nb", "num", "s", "t", "ni", "y", "mn", "g", "en", "network", "nn", "nl", "nu", "number", "u", "len", "net", "size", "f", "e", "max", "nt", "b", "ns", "hn", "pn", "sn", "w", "z", "dn", "l", "v", "m", "r", "nc", "ln", "p", "ne", "N"], "h": ["history", "o", "home", "k", "http", "x", "work", "j", "ul", "c", "oh", "d", "ht", "html", "a", "bh", "s", "rh", "hp", "t", "id", "y", "ph", "g", "ah", "hd", "hh", "th", "u", "f", "e", "hr", "b", "hi", "q", "sh", "w", "uh", "z", "l", "v", "hm", "m", "r", "H", "he", "wh", "p", "hs", "cl", "count"], "dp": ["wp", "df", "lp", "tp", "pi", "dt", "dos", "di", "pid", "pb", "pg", "db", "dq", "np", "d", "port", "pd", "pair", "data", "diff", "pos", "direction", "hp", "vp", "DP", "pkg", "wd", "api", "dim", "ds", "dh", "cp", "dB", "dr", "do", "dc", "ip", "number", "density", "zip", "pipe", "address", "e", "pp", "default", "sup", " DP", "dl", "sh", "drop", "P", "dm", "pm", "params", "dn", "grad", "dist", "deb", "eps", "dat", "p", "bp", "gp", "fp"], "i": ["mini", "pi", "di", "o", "ji", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "phi", "oi", "ri", "a", "start", "int", "ind", "ui", "ini", "t", "ni", "bi", "id", "y", "api", "uni", "min", "ix", "index", "isi", "multi", "eni", "si", "u", "iu", "e", "ti", "I", "f", "b", "mi", "hi", "ai", "z", "p", "qi", "v", "l", "ii", "li", "m", "ei", "ih", "io", "zi"]}}
{"code": "def solve():\\n    N = int(input())\\n    A = [int(i) for i in input().split()]\\n    ans = 0\\n    for i in range(N):\\n        if i + 1 == A[A[i] - 1]:\\n            ans += 1\\n    print(ans // 2)\\n\\nif __name__ == \"__main__\":\\n    solve()\\n", "target": "397", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "NE", "NC", "B", "Ns", "T", "n", "Y", "Ni", "L", "Len", "Num", "NB", "NT", "Size", "NN", "No", "AN", "I", "X", "NO", "C", "NI", "Ne", "Na", "NUM", "RN", "V", "OS", "P", "K", "O", "M", "F", "Z"], "A": ["As", "U", "NA", "D", "S", "au", "Alpha", "a", "B", "CA", "All", "T", "mA", "At", "Array", "Y", "AM", "L", "G", "AS", "SA", "An", "AP", "Average", "Ar", "I", "AA", "X", "C", "Na", "V", "P", "API", "AF", "K", "KA", "O", "Input", "M", "AC", "LA"], "i": ["pi", "di", "o", "ji", "k", "x", "xi", "j", "axis", "c", "gi", "ci", "d", "yi", "ri", "phi", "a", "io", "ie", "start", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "ij", "ix", "index", "ip", "si", "u", "iu", "e", "ti", "I", "b", "ai", "z", "chi", "qi", "v", "l", "ii", "li", "ei", "p", "vi", "zi"], "ans": ["offs", "NA", "Ann", "S", "nas", "ins", "a", "ars", "ants", "ss", "Ns", "amps", "n", "args", "an", "s", " means", "ats", "cs", "ents", "anon", "na", "os", "anas", "ds", "nan", "An", "span", "anes", "can", "AN", "atan", "leans", " Ans", "aned", "ANS", "ann", "lan", "ns", "ane", "Na", "ai", "ani", "ays", "ln", "aus", "ons"]}}
{"code": "if input().startswith('YAKI'):\\n    print('Yes')\\nelse:\\n    print('No')", "target": "27", "substitutes": {}}
{"code": "a,b=map(int,input().split())\\nn=list(map(int,input().split()))[:a]\\nn.sort()\\nsum=0\\n\\nfor i in range(b):\\n    sum+=n[i]\\n\\nprint(sum)", "target": "124", "substitutes": {"a": ["area", "auto", "access", "x", "c", "aw", "d", "ac", "ab", "action", "da", "an", "A", "alpha", "api", "na", "sa", "aa", "u", "f", "ad", "ca", "am", "ai", "w", "ae", "asa", "aaa", "ba", "aj", "m", "p", "au"], "b": ["k", "mb", "x", "abb", "c", "d", "nb", "ab", "B", "bound", "bis", "num", "rb", "y", "split", "bs", "g", "h", "fb", "number", "wb", "lb", "e", "f", "base", "limit", "w", "l", "v", "length", "m", "bb", "r", "bf", "p", "bp", "count"], "n": ["o", "cn", "k", "x", "j", "c", "d", "node", "nb", "s", "an", "num", "t", "y", "na", "g", "en", "network", "nn", "nan", "span", "nu", "u", "e", "f", "adj", "ns", "z", "v", "l", "m", "r", "ln", "p", "ne", "N"], "sum": ["part", "average", "out", "um", "c", "ass", "scale", "amount", "data", "value", "diff", "all", "an", "num", "cal", "weight", "result", "alpha", "total", "cost", "sort", "sa", "score", "loss", "index", "beta", "bin", "error", "number", "gram", "si", "net", "size", "max", "cum", "mass", "spread", "w", "summary", "mean", "Sum", "fee", "length", "p", "count"], "i": ["k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "ie", "start", "pos", "ind", "ni", "bi", "id", "y", "h", "ix", "index", "ip", "si", "u", "iu", "e", "ti", "I", "f", "end", "mi", "q", "ai", "z", "qi", "v", "ii", "li", "m", "p"]}}
{"code": "import sys\\ndef input():\\n    return sys.stdin.readline()[:-1]\\n\\n\\ndef main():\\n    N, K = map(int,input().split())\\n    mod = 10 ** 9 + 7\\n    ans = 0\\n    for i in range(K, N + 1 + 1):\\n        mi = int((i - 1) * i / 2)  #ma\u3001mi\u306f i * (10 **100)\u3092\u7121\u8996\u3057\u305f\u4e0a\u9650\u4e0b\u9650\\n        ma = i * N - mi\\n        ans += ma - mi + 1\\n    print(ans % mod)\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "425", "substitutes": {"N": ["U", "D", "k", "S", "R", "NS", "E", "B", "Ns", "T", "n", "W", "J", "Y", "L", "G", "Num", " n", "Size", "Q", "I", "X", "C", "Ne", "V", "P", "O", "H", "M", "F", "Z"], "K": ["U", "KI", "KR", "D", "k", "IK", "S", "SK", "B", "KE", "n", "J", "W", "Y", "OK", "G", "NK", "HK", "PI", "Q", "PK", "I", "X", "C", "V", "P", "KN", "Sk", "KS", "O", "H", "M", "F", "Z"], "mod": ["pi", "xi", "j", "c", "ci", " PI", "d", "int", "ind", "J", "s", "Pi", "ix", "cm", "PI", " Mod", "MOD", "Mod", "im", "ai", "module", "ii", "m", "r", "Z"], "ans": ["pi", " m", " bi", " b", " ma", "ci", " PI", " di", " ind", " si", " p", " CI", " mini", " iP", "s", " s", " j", " il", "Pi", " Pi", " a", "PI", " init", " c", " mode", " li", "ai", " pin", " pm"], "i": ["mini", "pi", "k", "x", "xi", "j", "gi", "c", "gu", "ci", "d", "phi", " I", "start", "pos", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "h", "ix", "index", "ip", "PI", "umi", "si", "u", "iu", "ami", "e", "ti", "I", "f", "mu", "ki", "im", "ai", "module", "z", "chi", "p", "ii", "li", "m", "io"], "mi": ["ma", "mini", "di", "KI", "mc", "xi", "mic", "gi", "ci", "nm", "ini", "ui", "ni", "bi", "Pi", "PI", "umi", "si", "ami", "fi", "ti", "MI", "ki", "mm", "ai", "pm", "li", "Mi", "vi"]}}
{"code": "import sys\\n\\nN = int(input())\\nA = list(map(int, input().split()))\\n\\nif(0 in A):\\n    print(0)\\n    sys.exit(0)\\n\\nprod = 1\\nfor a in A:\\n    prod *= a\\n    if prod > 1000000000000000000:\\n        print(-1)\\n        sys.exit(0)\\n\\nprint(prod)", "target": "75", "substitutes": {"N": ["NA", " b", "D", "ar", "nb", " I", "ac", "Alpha", "B", "n", " C", "L", "Num", "alpha", "na", " ND", " n", " Z", "I", "ad", " B", "C", "Na", " D", "P", " P", "Z"], "A": ["As", "Ac", "Bu", "NA", "D", "S", "au", "Alpha", "B", "CA", "T", "W", "mA", "At", "Array", "Y", "array", "G", "L", "Am", "alpha", "SA", "An", "Ar", "I", "AA", "b", "C", "Na", "V", "P", "API", "H", "M", "LA", "F", "Z"], "prod": ["prods", " Prod", "pb", " prods", " proc", "pd", " Prob", "prop", "Proxd", "Procd", "Prods", "Prody", "prcd", "perd", "prob", "procd", " prof", "proc", "Prosd", "perb", "prsd", "perc", " Prody", "prxd", " prody", " Procd", "pf", "perp", " prosd", " prob", "Prod", " prop", " procd", "prof", "prody", " Prods", "prosd", "percd", "proxd", "pc", "prd", " proxd", "perf", " Prop"], "a": ["ma", "x", "c", "ar", "d", "ac", "ab", "art", "aux", "int", "n", "da", "all", "an", "s", "array", "i", "y", "alpha", "na", "sa", " n", "nan", "aa", "f", "nt", "am", "ad", "b", "ga", "ai", "l", "p", "au"]}}
{"code": "N=int(input())\\ns=input()\\nt=input()\\ncommon=0\\n\\nfor start in range(N):\\n    point=0\\n    check=False\\n    for i in range(start,N):\\n        if s[i] != t[point]:\\n            check=True\\n            break\\n        point+=1\\n    if not check:\\n        common=N-start\\n        break\\n\\nprint(len(s)+len(t)-common)", "target": "693", "substitutes": {"N": ["D", "S", "R", "NS", "E", "NC", "Point", "NE", "B", "Ns", "T", "n", "W", "num", "Y", "Ni", "L", "Num", "Len", "NT", "NM", " n", "Size", "NN", "number", "Q", "Length", "I", "X", "C", "NI", "Ne", "NUM", "V", "P", "K", "NP", "length", "O", "H", "M", "F", "Z"], "s": ["states", "ls", "o", "parts", "services", "S", "sync", "c", "ins", "ses", "a", "ss", "n", "abs", "ops", "strings", "cs", "y", "ches", "bs", "g", "os", "ds", "ts", "ips", "ks", "gs", "sq", "arts", "si", "u", "sets", "spec", "f", "e", "b", "ps", "ns", "ans", "es", "tests", "features", "w", "l", "xs", "se", "p"], "t": ["tp", "o", "type", "x", "j", "c", "d", "tower", "data", "T", "n", "y", "test", "python", "rt", "g", "h", "target", "ts", "tt", "tf", "table", "u", "f", "e", "b", "tip", "q", "pt", "w", "ta", "z", "v", "l", "template", "m", "r", "p", "temp"], "common": ["core", "part", "central", "k", "sync", "general", "confirmed", "expected", "c", "low", "ci", "tc", "family", "local", "same", "complete", "diff", "generic", "n", "valid", "num", "known", "update", "test", "stop", "total", "inner", "Common", "unique", "component", "custom", "parent", "cm", "set", "union", "sequence", "norm", "normal", "nt", "every", "base", "scan", "standard", "chain", "cross", "found", "dist", "specific", "border", "fast", "form", "recent", "count"], "start": ["cur", "rest", "Start", "k", "first", "x", "show", "j", "c", "off", "d", "a", "art", "pos", "int", "ind", "starting", "id", "test", "stop", "offset", "index", "set", "st", "next", "span", "begin", "e", "f", "end", "new", "init", "z", "v", "l", "skip", "length", "se", "p"], "point": ["part", "type", "step", "case", "k", "x", "j", "off", "cycle", "Point", "col", "section", "art", "pos", "int", "points", "pointer", "key", "stop", "offset", "change", "parent", "period", "cp", "line", "day", "index", "set", "ip", "error", "number", "mark", "pp", "end", "base", "edge", "pt", "P", "chain", "patch", "length", "p", "block", "condition"], "check": ["unit", "type", "control", "sync", "work", "x", "close", "find", "walk", "back", "fail", "diff", "fix", "print", "ind", "update", "info", "id", "test", "loop", "key", "stop", "ignore", "ack", "ok", "self", "change", "Check", "set", "error", "checked", "match", "base", "scan", "chain", "cross", "style", "skip", "block", "count", "call"], "i": ["pi", "o", "part", "rest", "k", "x", "j", "c", "sp", "ci", "d", "slice", "col", "a", "inter", "art", "pos", "ind", "n", "id", "inner", "offset", "ix", "span", "index", "ip", "batch", "f", "e", "I", "b", "pt", "init", "z", "patch", "length", "p"]}}
{"code": "#2019/10/03\\nX, t = map(int, open(0).read().split())\\nprint(X - t if X > t else 0)", "target": "792", "substitutes": {}}
{"code": "N, M = map(int, input().split())\\n\\nCakes = [tuple(map(int, input().split())) for _ in range(N)]\\nans = 0\\nfor i in range(1 << 3):\\n    Cake = [0] * N\\n    for j in range(3):\\n        if (i >> j) & 1 == 1:\\n            for c in range(N):\\n                Cake[c] += Cakes[c][j]\\n        else:\\n            for c in range(N):\\n                Cake[c] -= Cakes[c][j]\\n    Cake.sort(reverse=True)\\n    ans = max(ans, sum(Cake[:M]))\\n\\n\\nprint(ans)\\n", "target": "390", "substitutes": {"N": ["U", "D", "S", "R", "NS", "E", "NE", "NC", "B", "Ns", "T", "n", "J", "W", " C", "Y", "A", "L", "G", "Ni", "Num", "CNN", "NT", " n", "Size", "NN", "Q", "I", "X", "C", "Na", "Ne", "V", "P", "K", "O", "H", "F", "Z"], "M": ["U", "D", "S", "R", "E", "B", "T", "n", "J", "W", "Y", "A", "L", "G", "MD", "MS", "MN", "Q", "I", "X", "MI", "C", "JM", "MH", "V", "P", "MM", "K", "MC", "MT", "m", "O", "H", "F", "CM", "Z"], "Cakes": ["Cheaking", " Cak", "Caks", "Cheake", " cake", "Cases", "Cheakes", "Encaking", "cakes", "Encake", "Acake", "cases", "Encak", "Cak", "Caking", "caking", "cake", "caks", " cases", " casks", " Casks", "Encakes", "Acaking", " Cases", " Caking", "Acakes", "Cheaks", "Acaks", "casks", "Casks", "cak", " cakes"], "_": ["k", "x", " __", "ac", " p", "all", "cc", "g", " x", "co", "cm", "u", "f", "C", " count", " k", "q", "m", "oc"], "ans": ["offs", "ls", "cycles", "Ann", "anus", "san", "aning", "ci", "nas", "a", "atten", "ants", "amps", "ens", "nes", "an", "s", "anc", "A", " means", "cs", "ents", "anon", "sk", "atches", "na", "anas", "plan", "gan", "ks", "ana", "nan", "An", "span", "can", "anes", "AN", "atan", "leans", "aned", "ANS", "ann", "lan", "ns", "shape", "C", "scan", "Na", "chan", "es", "ai", "ani", "ays", "mean", "aus", "ons", "abilities"], "i": ["pi", "ji", "k", "x", "xi", "ci", "d", "jc", "a", "ie", "int", "ind", "n", "ini", "ni", "bi", "id", "iq", "h", "ij", "ip", "si", "xc", "u", "iu", "f", "I", "e", "b", "q", "ai", "z", "chi", "l", "v", "ii", "li", "m", "p"], "Cake": ["core", " Cak", "caker", "Pak", " cake", "Pakes", "Nakes", "Make", "Fale", "cade", "Canakes", "Pore", "Coak", "Mak", "Makes", "Fakes", "cakes", " Cade", "Coakes", "Canaker", "cale", "Cak", "Maker", "cake", " Caker", "Cade", "Core", "Canake", " Core", "Coake", "Canak", "Caker", "Fade", " cakes", "Cale", "Coaker", "Fake", "Nade", "Pake", "Nale", "Nake", " cade", "cak", " cak"], "j": ["kj", "ji", "o", "k", "x", "d", "jc", "a", "ind", "n", "J", "uj", "ch", "y", "iq", "key", "g", "ij", " n", "cm", "JC", "index", "jl", "jo", "u", "ja", "e", "f", "I", "b", "code", "jj", "q", "ai", "z", "l", "jp", "v", "ii", "m", "li", "aj", "p"], "c": ["o", "cn", "k", "x", "cy", "ci", "d", "col", "ac", "jc", "a", "uc", "n", "anc", "cc", "ce", "ch", "cs", "ec", "y", "g", "h", "cp", "ct", "co", "cin", "cm", "un", "dc", "xc", "u", "cu", "f", "e", "b", "code", "ca", "unc", "C", "w", "z", "chain", "lc", "l", "cd", "v", "m", "cat", "cf", "nc", "p"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\nS = [0]*(N+1)\\nfor n in range(N):\\n    S[n+1] = S[n] + A[n]\\nB = {}\\nfor s in range(len(S)):\\n    B[S[s]] = 0\\nfor s in range(len(S)):\\n    B[S[s]] += 1\\nres = 0\\nfor v in B.values():\\n    if v > 1:\\n        res += v * (v - 1) // 2\\nprint(res)", "target": "283", "substitutes": {"N": ["U", "D", "R", "NS", "E", "Ns", "T", "J", "Sn", "Y", "L", "G", "Len", "Size", "No", "Q", "Length", "Count", "X", "ns", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "A": ["As", "U", "AR", "NA", "D", "R", "E", "Alpha", "a", "CA", "T", "W", "J", "IA", "At", "Y", "AD", "L", "G", "AM", "AL", "AS", "HA", "An", "AP", "LA", "Ar", "AA", "b", "C", "V", "P", "API", "H", "M", "AC", "F", "Z"], "S": ["U", "SE", "SH", "D", "SS", "R", "NS", "E", "Sing", "Ns", "T", "Si", "W", "SI", "Y", "Es", "L", "G", "Sa", "SN", "AS", "Single", "ST", "SA", "Q", "I", "X", "SU", "C", "V", "Sl", "P", "OS", "K", "SP", "O", "H", "M", "F", "Z"], "n": ["o", "k", "x", "j", "c", "d", "node", "nb", "a", "Ns", "num", "t", "i", "y", "na", "en", "network", "nn", "un", "nu", "u", "net", "nt", "f", "e", "b", "ns", "sn", "no", "w", "z", "l", "m", "nc", "p", "ne"], "B": ["U", "Bu", " b", "D", "BS", "BF", "R", "Other", "E", "LB", "Bi", "BB", "T", "UB", "J", "Y", "L", "G", "NB", "BA", "PB", "BI", "OB", "Q", "Bs", "BL", "GB", "DB", "WB", "I", "b", "SB", "C", "V", "MB", "P", "AB", "O", "H", "M", "F"], "s": ["fs", "k", "x", "su", "c", "sp", "ins", "ses", "ws", "a", "start", "ss", "ind", "num", "t", "space", "i", "y", "sk", "g", "min", "self", "ks", "sites", "sq", "si", "u", "size", "f", "sym", "e", "b", "us", "ns", "sn", "sb", "q", "w", "sv", "z", "l", "sign", "xs", "se", "sing", "small", "p"], "res": ["vec", "rs", "rest", "Result", "Rs", "err", "out", "resolution", "x", "our", "response", "R", "results", "ver", "sol", "pos", "re", "var", "rh", "rez", "RES", "range", "result", "Res", "arr", "rss", "resh", "RE", "g", "val", "os", "pres", "ret", "vals", "reset", "rev", "resp", " Res", "q", "z", "r", "prev", "p", "req"], "v": ["o", "k", "x", "j", "uv", "c", "d", "a", "value", "vv", "vs", "int", "var", "t", "i", "y", "div", "val", "g", "h", "change", "lv", "u", "size", "f", "e", "b", "rev", "volume", "q", "V", "w", "sv", "z", "vol", "nv", "l", "m", "r", "p", "vi", "conv"]}}
{"code": "l = [ int(x) for x in input().split() ]\\nl = set(l)\\nprint(len(list(l)))\\n", "target": "32", "substitutes": {"l": ["el", "lp", "ls", "o", "loc", "k", "ol", " L", "ul", "c", "d", "kl", "fl", "sl", "n", "s", "list", "ll", "t", "L", "i", "y", "split", "g", "lists", "nl", "u", "len", "lb", "f", "e", "b", "pl", "dl", "z", "v", "lc", "m", "r", "li", "ln", "p", "cl"], "x": ["string", "k", "xp", "xi", " y", "xy", "name", "int", "n", "xb", "t", " xx", "i", "id", "y", "key", "xa", "xxx", "val", "h", "rx", "ix", "index", " z", "ex", "xc", "u", "e", "dx", "f", "X", "xx", "xf", "wx", " i", "w", "z", "v", "xs", "p"]}}
{"code": "a,b,c=map(int,input().split())\\nd=a*b\\nif d>=c:\\n    print(c)\\nelse:\\n    print(d)", "target": "751", "substitutes": {"a": ["sta", "x", "ac", "ab", "af", "int", "n", "da", "s", "an", "A", "fa", "i", "y", "alpha", "g", "sa", "aa", "u", "va", "e", "f", "ad", "am", "ca", "ai", "w", "ae", "asa", "ba", "l", "r", "p"], "b": ["o", "k", "x", "cy", "db", "cb", "ab", "ac", "B", "bc", "bd", "n", "s", "i", "y", "bs", "g", "beta", "aa", "u", "f", "e", "ad", "sb", "z", "ba", "l", "v", "m", "r", "bb", "bf", "p"], "c": ["cn", "k", "x", "cy", "ci", "cb", "col", "ac", "uc", "n", "s", "cc", "ce", "i", "cs", "y", "g", "con", "h", "abc", "ct", "dc", "xc", "u", "cu", "f", "e", "ad", "ca", "unc", "C", "w", "z", "cr", "l", "cat", "cd", "m", "r", "cf", "p", "count"], "d": ["di", "D", "dt", "x", "std", "j", "db", "bd", "n", "da", "s", "t", "i", "y", "sd", "dy", "g", "fd", "ds", "do", "dh", "ct", "dc", "dad", "dp", "u", "f", "e", "dd", "dx", "ad", "xd", "z", "l", "cd", "m", "r", "dat", "p", "ld"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees#, log2\\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left, insort, insort_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10**9 + 7\\n#from decimal import *\\n\\nB = INT()\\nS = input()\\nK = INT()\\n\\nans = \"\"\\nfor x in S:\\n\tif x != S[K-1]:\\n\t\tans += \"*\"\\n\telse:\\n\t\tans += S[K-1]\\nprint(ans)", "target": "652", "substitutes": {}}
{"code": "n = int(input())\\ns = input()\\n\\nans_list = []\\nfor i in range(n):\\n    ans = 0\\n    x = list(set(s[:i]))\\n    y = list(set(s[i:]))\\n    for j in range(len(x)):\\n        if x[j] in y:\\n            ans += 1\\n    ans_list.append(ans)\\n\\na = max(ans_list)\\nprint(a)", "target": "575", "substitutes": {"n": ["o", "k", "c", "np", "d", "nb", "ny", "num", "t", "ni", "na", "g", "nan", "span", "u", "f", "e", "b", "ns", "w", "nor", "z", "l", "m", "r", "nc", "p", "ne", "N"], "s": ["states", "ls", "services", "o", "S", "c", "search", "d", "ins", "ses", "an", "t", "g", "sa", "os", "h", "ks", "lines", "south", "si", "u", "sets", "f", "e", "b", "ns", "es", "w", "z", "l", "v", "m", "xs", "p"], "ans_list": ["ANS_List", "ans_detail", "ans_List", "ans_listed", "ANS2List", "ann_list", "ans2LIST", "ans2list", "ansylist", "ans_l", "ANS_LIST", "ann_l", "ansyList", "ans_stack", "ans2listed", "ANS_list", "ansyLIST", "ANS2LIST", "ans__list", "ans_LIST", "ansylisted", "ANS_listed", "ann_stack", "ans__l", "ans__detail", "ANS2list", "ans2List", "ans__stack", "ann_detail"], "i": ["pi", "o", "ji", "k", "xi", "c", "gi", "ci", "d", "phi", " I", " ii", "ie", "start", "ind", "ini", "t", "ni", "id", "h", "ij", "ix", "index", "ip", "jo", "u", "iu", "f", "I", "e", "b", "q", "ai", "w", "z", "l", "v", "ii", "li", "m", "p"], "ans": ["atts", "ass", "aning", "nas", "ins", "ars", "ants", "args", "ean", "an", "anc", "ats", "cs", "ians", "alpha", "ents", "na", "os", "anas", "ds", "ks", "ana", "nan", "can", "atan", "AN", "aned", "cas", "leans", "ANS", "acts", "ann", "ad", "ns", "lan", "errors", "ai", "ani", "aces", "ano", "ays", "annels", "antis", "cross", "xs", "eps", "aus", "ons", "au"], "x": ["o", "xp", "xi", "px", "c", "d", "xy", "any", "int", "an", "t", "tx", "python", "na", "en", "h", "ax", "xt", "rx", "ix", "index", "fx", "ex", "xc", "u", "f", "e", "b", "X", "xx", "xes", "es", "w", "z", "v", "l", "cross", "m", "xs", "p", "pe"], "y": ["o", "type", "ya", "c", "cy", "d", "xy", "oy", "yi", "ny", "Y", "zy", "t", "ye", "dy", "yx", "xt", "ay", "ies", "py", "e", "f", "ys", "b", "xx", "ish", "q", "yy", "z", "v", "l", "m", "p", "vy"], "j": ["kj", "o", " v", " b", " J", "ji", "k", "xi", "d", " ii", "ie", " other", "ny", "ind", "J", "ni", "dy", "g", "ij", " z", "jl", " l", "si", "ja", "f", "je", "e", "b", "jj", " k", "z", "l", "jp", "ii", "v", "li", "p", " jo"], "a": ["at", "aw", "ar", "ak", "wa", "ac", "ab", "af", "pa", "da", "ata", "an", "A", "fa", "alpha", "sa", "ana", "ia", "aa", "la", "aff", "va", "oa", "ad", "ann", "ca", "am", "ga", "ai", "ae", "asa", "aaa", "ba", "ea", "aj", "p", "au"]}}
{"code": "from collections import deque\\n\\nn, q = [int(_) for _ in input().split()]\\nprocesses = deque([tuple(input().split()) for i in range(n)])\\n\\ntime = 0\\nwhile processes:\\n    process = processes.popleft()\\n\\n    if int(process[1]) <= q:\\n        time += int(process[1])\\n        print(process[0], time)\\n\\n    else:\\n        time += q\\n        processes.append((process[0], int(process[1]) - q))\\n\\n", "target": "745", "substitutes": {"n": ["o", "k", "x", "j", "c", " order", " query", "d", " N", " p", " queue", " cycle", " workers", " worker", " output", " iter", "num", " log", "t", "y", "count", " self", "network", " pipeline", " network", "number", " index", " c", "u", "size", " loop", "e", " number", "f", "b", "ns", " sequence", " python", " count", " num", "w", "z", "l", "v", "m", "p", " copy", " work", "ne", "N"], "q": ["o", "k", "qt", "x", "c", "queue", "qs", "quant", "depth", "num", "t", "id", "iq", "y", "timeout", "quick", "quality", "qa", "check", "g", "query", "Q", "sq", "eq", "u", "f", "max", "e", "qq", "random", "limit", "delay", "w", "z", "v", "complex", "length", "wait", "l", "m", "order", "p", "qu", "dq", "count"], "_": ["o", "pid", "k", "out", "ctx", "name", "id", "proc", "key", "prefix", "val", "en", "pri", "self", "word", "ix", "index", "ip", "thread", "item", "run", "f", "obj", "like", "P", "p", "token"], "processes": ["Processals", "processingals", "processinge", "scriptions", "processions", "Processe", "indexes", "Processures", "indexals", "cesse", "cesss", "Processions", "processals", "scriptures", "indexs", "processe", "cessions", " processals", " processions", "processings", "scripte", "processinges", " processures", " processs", "cesses", "scriptes", "processingions", " processe", "Processes", "Processs", "indexions", "processs", "processures"], "i": ["k", "x", " __", "j", " it", " ind", " I", " ii", "ind", " ip", " iP", "id", " X", " j", " il", " r", "ix", " z", "ip", " index", " id", "I", " ir", "p"], "time": ["rank", "type", "work", "x", "Time", "event", "name", "wa", "value", "times", "depth", "progress", "t", "info", "weight", "id", "y", "sleep", "cost", "timeout", "check", "count", "ue", "timer", "query", "frequency", "how", "speed", "play", "size", "clock", "tim", "e", "am", "ime", "delay", "w", "z", "duration", "length", "m", "now", "order", "temp", "money", "rate", "call"], "process": ["use", "step", "sync", "package", "work", "product", "object", "page", "point", "node", "event", "session", "app", "document", "Process", "progress", "cess", "display", "loop", "project", "proc", "check", "script", "phase", "python", "component", "change", "do", "parent", "cp", "job", "post", "worker", "path", "handle", "number", "write", "thread", "processing", "run", "parse", "pp", "ask", "play", "processor", "select", "load", "term", "position", "draw", "skip", "comment", "p", "task", "program", "condition", "call"]}}
{"code": "import itertools\\nfrom collections import deque,defaultdict,Counter\\nfrom itertools import accumulate\\nimport bisect\\nfrom heapq import heappop,heappush,heapify\\nimport math\\nfrom copy import deepcopy\\nimport queue\\nimport numpy as np\\n# sympy as syp(\u7d20\u56e0\u6570\u5206\u89e3\u3068\u304b)\\nMod = 1000000007\\nfact = [1, 1]\\nfactinv = [1, 1]\\ninv = [0, 1] \\nfor i in range(2, 10**5 + 1):\\n    fact.append((fact[-1] * i) % Mod)\\n    inv.append((-inv[Mod % i] * (Mod // i)) % Mod)\\n    factinv.append((factinv[-1] * inv[-1]) % Mod)\\n    \\ndef cmb(n, r, p):\\n    if (r < 0) or (n < r):\\n        return 0\\n    r = min(r, n - r)\\n    return fact[n] * factinv[r] * factinv[n - r] % p\\n    \\ndef sieve_of_eratosthenes(n):\\n    if not isinstance(n,int):\\n        raise TypeError(\"n is not int\")\\n    if n<2:\\n        raise ValueError(\"n is not effective\")\\n    prime = [1]*(n+1)\\n    for i in range(2,int(math.sqrt(n))+1):\\n        if prime[i] == 1:\\n            for j in range(2*i,n+1):\\n                if j%i == 0:\\n                    prime[j] = 0\\n    res = []\\n    for i in range(2,n+1):\\n        if prime[i] == 1:\\n            res.append(i)\\n    return res\\n\\n \\nclass UnionFind:\\n    def __init__(self,n):\\n        self.parent = [i for i in range(n+1)]\\n        self.rank = [0 for i in range(n+1)]\\n    \\n    def findroot(self,x):\\n        if x == self.parent[x]:\\n            return x\\n        else:\\n            y = self.parent[x]\\n            y = self.findroot(self.parent[x])\\n            return y\\n    \\n    def union(self,x,y):\\n        px = self.findroot(x)\\n        py = self.findroot(y)\\n        if px < py:\\n            self.parent[y] = px\\n        else:\\n            self.parent[px] = py\\n \\n    def same_group_or_no(self,x,y):\\n        return self.findroot(x) == self.findroot(y)\\n\\ndef main():  #startline-------------------------------------------\\n    n, k = map(int, input().split())\\n    a=list(map(int, input().split()))\\n    a.sort()\\n    ans = 0\\n    for i in range(n - k + 1):\\n        t = cmb(n - i - 1, k - 1, Mod)\\n        ans += (a[n - i - 1] * t % Mod - (a[i] * t % Mod)) % Mod\\n        \\n    print(ans%Mod)\\nif __name__ == \"__main__\":\\n    main() #endline===============================================", "target": "36", "substitutes": {}}
{"code": "from collections import deque\\nfrom heapq import heapify,heappop,heappush,heappushpop\\nfrom copy import copy,deepcopy\\nfrom itertools import permutations,combinations\\nfrom collections import defaultdict,Counter\\nfrom pprint import pprint\\n\\ndef myinput():\\n    return map(int,input().split())\\n\\ndef mycol(data,col):\\n    return [ row[col] for row in data ]\\n\\ndef mysort(data,col):\\n    data.sort(key=lambda x:x[col],reverse=False)\\n    return data\\n\\ndef mymax(data):\\n    M = -1*float(\"inf\")\\n    for i in range(len(data)):\\n        m = max(data[i])\\n        M = max(M,m)\\n    return M\\n\\ndef mymin(data):\\n    m = float(\"inf\")\\n    for i in range(len(data)):\\n        M = min(data[i])\\n        m = min(m,M)\\n    return m\\n\\nclass UnionFind():\\n    # parents\u306f\u300c\u8981\u7d20\u304c\u6839\u306e\u5834\u5408\u306b\"\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u6570*(-1)\"\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\u300d\\n    def __init__(self, n):\\n        self.n = n\\n        self.parents = [-1] * n\\n    # \u8981\u7d20x\u304c\u5c5e\u3059\u308bgroup\u306e\u6839\u3092\u8fd4\u3059\\n    def find(self, x):\\n        if self.parents[x] < 0:\\n            return x\\n        else:\\n            self.parents[x] = self.find(self.parents[x])\\n            return self.parents[x]\\n    # \u8981\u7d20x\u304c\u5c5e\u3059\u308bgroup\u3068\u8981\u7d20y\u304c\u5c5e\u3059\u308bgroup\u3092\u4f75\u5408\u3059\u308b\\n    def union(self, x, y):\\n        x = self.find(x)\\n        y = self.find(y)\\n\\n        if x == y:\\n            return\\n\\n        if self.parents[x] > self.parents[y]:\\n            x, y = y, x\\n\\n        self.parents[x] += self.parents[y]\\n        self.parents[y] = x\\n    # \u8981\u7d20x\u304c\u5c5e\u3059\u308bgroup\u306e\u30b5\u30a4\u30ba\uff08\u8981\u7d20\u6570\uff09\u3092\u8fd4\u3059\\n    def size(self, x):\\n        return -self.parents[self.find(x)]\\n    # \u8981\u7d20x,y\u304c\u540c\u3058group\u306b\u5c5e\u3059\u308b\u304b\u3092True\u304bFalse\u3067\u8fd4\u3059\\n    def same(self, x, y):\\n        return self.find(x) == self.find(y)\\n    # \u8981\u7d20x\u304c\u5c5e\u3059\u308bgroup\u306b\u5c5e\u3059\u308b\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\\n    def members(self, x):\\n        root = self.find(x)\\n        return [i for i in range(self.n) if self.find(i) == root]\\n    # \u5168\u3066\u306e\u6839\u306e\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\\n    def roots(self):\\n        return [i for i, x in enumerate(self.parents) if x < 0]\\n    # group\u306e\u6570\u3092\u8fd4\u3059\\n    def group_count(self):\\n        return len(self.roots())\\n    # {\u30eb\u30fc\u30c8\u8981\u7d20: [\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u306e\u30ea\u30b9\u30c8], ...}\u306e\u8f9e\u66f8\u3092\u8fd4\u3059\\n    def all_group_members(self):\\n        return {r: self.members(r) for r in self.roots()}\\n    # \u30eb\u30fc\u30c8\u8981\u7d20: [\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u306e\u30ea\u30b9\u30c8]\u3092\u6587\u5b57\u5217\u3067\u8fd4\u3059\\n    def __str__(self):\\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\\n\\nn,k,l = myinput()\\npq = [ list(myinput()) for _ in range(k) ]\\nrs = [ list(myinput()) for _ in range(l) ]\\n\\nuf1 = UnionFind(n)\\nfor i in range(k):\\n    p = pq[i][0]\\n    q = pq[i][1]\\n    uf1.union(p-1,q-1)\\n\\nuf2 = UnionFind(n)\\nfor i in range(l):\\n    r = rs[i][0]\\n    s = rs[i][1]\\n    uf2.union(r-1,s-1)\\n\\nd = defaultdict(lambda: 0)\\n# print(d)\\nfor i in range(n):\\n    d[(uf1.find(i),uf2.find(i))] += 1\\n# print(d)\\nfor i in range(n):\\n    ans = d[(uf1.find(i),uf2.find(i))]\\n    print(ans)", "target": "21", "substitutes": {"data": ["area", "c", "results", "current", "media", "valid", "missing", "split", "collection", "self", "source", "next", "multi", "f", "dd", "base", "dict", "memory", "draw", "style", "p", "group", "file", "files", "first", "x", "done", "off", "d", "a", "wa", "record", "ata", "result", "id", "zero", "map", "rows", " Data", "error", "items", "message", "select", "code", "DATA", "no", "content", "li", "r", "dat", "frame", "field", "input", "mult", "Data", "int", "n", "list", "array", "A", "config", "video", "image", "keys", "index", "lines", "batch", "model", "la", "function", "u", "reader", "X", "new", "where", "l", "series", "form", "ma", "o", "case", "this", "float", "window", "response", "view", "da", "all", "ui", "cache", "info", "database", "key", "api", "div", "change", "parent", "sample", "table", "one", "ad", "values", "module", "P"], "col": ["core", "file", "loc", "field", "cn", "k", "x", "c", "rol", "section", "coll", "ac", "fl", "fc", "int", "ind", "column", "num", "ch", "fact", "Col", "key", "min", "val", "collection", "con", "act", "cell", "cor", "ct", "co", "index", "cm", "win", "th", "il", "f", "fn", "select", "code", "ref", "lc", "cat", "text", "COL", "fil", "p", "form", "cl"], "row": ["rank", "field", "x", "feed", "object", "xy", "ro", "raw", "value", "coll", "record", "column", "xxxxxxxx", "result", "arr", "id", "key", "rc", "entry", "val", "cell", " x", "rows", " r", "month", "index", "ox", "line", "post", "rw", "obj", "rown", "X", "xx", "wx", "Row", "sc", "form", "group"], "M": ["U", "LM", "D", "S", "Max", "R", "Man", "Class", "FM", "B", "Data", "T", "W", "J", "n", "Math", "Array", "Y", "A", "L", "G", "Ma", "DM", "min", "MS", "Ms", "MN", "model", "Q", "ME", "Model", "f", "I", "Map", "X", "MI", "C", "MA", "mm", "V", "Me", "P", "MM", "MC", "Mo", "Min", "K", "ML", "O", "H", "Mi", "F", "MF", "N"], "i": ["pi", "di", "o", "uri", "x", "xi", "j", "gi", "c", "ci", "d", "yi", "ri", "ie", "ori", "cli", "int", "ind", "n", "uli", "ui", "ini", "bi", "id", "info", "ij", "isi", "index", "ip", "multi", "eni", "si", "iii", "u", "iu", "mu", "ti", "I", "f", "e", "ki", "ai", "p", "qi", "l", "v", "ii", "li", "ei", "io"], "m": ["ma", "U", "o", "mc", "x", "tm", "c", "um", "fm", "gm", "d", "om", "a", "mult", "mod", "n", "mA", "F", "an", "s", "man", "L", "t", "y", "mn", "machine", "min", "g", "dim", "h", "ms", "md", "cm", "Ms", "model", "multi", "mo", "u", "mt", "f", "max", "mu", "e", "b", "am", "mi", "sm", "mm", "member", "im", "mass", "module", "P", "MM", "dm", "pm", "l", "v", "r", "p", "MF", "N"]}}
{"code": "a,b,c=input().split()\\na=int(a)\\nb=int(b)\\nc=int(c)\\ni=0\\nwhile i<10:\\n  i=i+1\\n  c=a*c-b\\n  print(c)", "target": "106", "substitutes": {"a": ["area", "x", "aw", "d", "ama", "ab", "ac", "af", "da", "an", "s", "A", "fa", "y", "api", "alpha", "sa", "ia", "aa", "u", "va", "f", "e", "ad", "ca", "am", "ai", "ae", "asa", "ba", "aaa", "ea", "l", "r", "bb", "p", " A"], "b": ["o", "eb", "k", "abb", "x", "pb", "db", "d", "ob", "cb", "ab", "B", "bc", "bd", "rb", "A", "bi", "y", "bs", "g", "fb", "abc", "ib", "beta", "aa", "wb", "lb", "e", "f", "ad", "ca", "sb", "be", "z", "ba", "l", "v", "m", "r", "bb", "bf", "p"], "c": ["cur", "k", "x", "cy", "ci", "d", "cycle", "col", "ac", "uc", "bc", "const", "int", "n", "cc", "s", "ce", "cs", "y", "alpha", "g", "con", "h", "abc", "cp", "ct", "cin", "cm", "dc", "can", "cu", "u", "xc", "f", "e", "code", "ca", "arc", "C", "z", "cr", "l", "lc", "v", "pc", "cd", "cf", "nc", "p", "count"], "i": ["mini", "pi", "di", "o", "k", "x", "xi", "j", "gi", "ci", "d", "phi", "start", "n", "ui", "ini", "t", "bi", "id", "y", "alpha", "api", "h", "index", "si", "u", "f", "e", "I", "ti", "ai", "init", "z", "qi", "l", "v", "ii", "lc", "m", "li", "p", "temp", "count"]}}
{"code": "import math\\ndef combinations_count(n, r):\\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\\n\\nN,M,K = list(map(int,input().split(\" \")))\\n\\nans = 0\\nfor i in range(0,N):\\n    for j in range(0,M):\\n        mul = 2\\n        if i == 0 or j == 0:\\n            mul = 1\\n\\n        ans += mul * (N -i) * (M -j) * (i+j)\\n\\nans *= combinations_count(N*M-2,K-2)\\nans %= 10**9 + 7\\nprint(ans)", "target": "341", "substitutes": {"n": ["o", "cn", "k", "x", "c", "d", "nb", "Ns", "num", "an", "t", "y", "network", "nn", "nu", "u", "f", "e", "nt", "b", "ns", "sn", "w", "l", "v", "m", "ln", "p", "ne"], "r": ["rs", "o", "k", "Rs", "rd", " R", "x", "c", "R", "d", "ar", "rm", "re", "s", "rh", "range", "t", "rb", "h", "radius", "nr", "u", "f", "e", "rn", "b", "q", "w", "v", "l", "m", "right", "ru", "p", "kr", "sr"], "N": ["U", "NA", "D", "S", "CN", "R", "NS", "NL", "NE", "Ns", "T", "J", "W", "Y", "Ni", "L", "A", "Wh", "Num", "G", "CNN", "NT", "NM", "NN", " Ne", "MN", "Q", "I", "X", "C", "NI", "Ne", "Na", "NG", "NR", "V", "P", "O", "H", "Mi", "F", "Z"], "M": ["U", "LM", "D", "k", "S", "R", "E", "MK", "B", "T", "J", "W", "Y", "L", "G", "Ma", "RM", "NM", "MN", "Q", "I", "X", "MI", "C", "MR", "JM", "V", "P", "MM", "Mo", "m", "Mi", "H", "F", "CM", "Z"], "K": ["U", "KR", "D", "k", "S", "R", "E", "B", "T", "W", "J", "Y", "L", "G", "KK", "HK", "MN", "Q", "PK", "I", "X", "C", "V", "P", "KS", "O", "H", "Mi", "F", "m", "km", "Z"], "ans": ["offs", "ls", "asses", "atts", "nas", "ras", "ins", "ations", "ars", "ants", "ss", "amps", "ens", "an", "s", "rules", "man", " means", "ats", "outs", "cs", " spans", "ents", "oss", "sk", "cases", "na", "os", "anas", "plan", "ms", "ds", "ks", "ids", "ana", "span", "can", "anes", "cons", "lines", "ates", "AN", "cas", "aned", "atan", "ANS", "activation", "ann", "lan", "ns", "scan", "es", "errors", "ions", "features", "ani", "ai", "aces", "ays", "mean", " scans", "eps", "rates", "aus", "ons"], "i": ["mini", "pi", "o", "ji", "k", "x", "xi", "c", "ci", "d", "phi", "a", "ie", "ind", "J", "ni", "bi", "y", "ij", "ix", "si", "u", "iu", "e", "I", "ti", "f", "b", "mu", "mi", "im", "ani", "ai", "w", "z", "chi", "p", "l", "v", "ii", "li", "m", "ih", "io"], "j": ["kj", "ji", " J", "o", "k", "x", "c", "d", "a", "jc", " ii", "J", "y", " dj", "g", "ij", "h", "cm", "jl", "jo", "si", "u", "ja", "f", "I", "e", "b", "jj", "im", "ani", "q", "w", "z", "v", "jp", "aj", "l", "m", "ii", "li", "p", "uj", "km"], "mul": ["mol", "mUL", "modUL", "moduli", "emul", "MUL", "simuli", "emulus", "Mul", "simulus", "Muli", "simol", "amul", "modul", "muli", "cmul", "Mulus", "amuli", "modulus", "cmulus", "emuli", "simul", "emUL", "amol", "amUL", "Mol", "cmUL", "cmuli", "mulus", "amulus"]}}
{"code": "s = input()\\n\\ns = s.replace('BC', 'V')\\n\\nans = 0\\ncnt = 0\\nflag = False\\n\\nfor i in range(len(s)):\\n    if s[i] == 'A':\\n        flag = True\\n        cnt += 1\\n    elif flag and s[i] == 'V':\\n        ans += cnt\\n    else:\\n        flag = False\\n        cnt = 0\\n\\nprint(ans)\\n", "target": "305", "substitutes": {"s": ["states", "ls", "services", "o", "string", "parts", "S", "ings", "out", "input", "ssl", "c", "d", "ws", "ses", "ins", "a", "sys", "ss", "bis", "n", "flags", "args", "qs", "an", "ads", "t", "abs", "strings", "cs", "g", "os", "sa", "ts", "ds", "ips", "source", "gs", "south", "si", "u", "sets", "f", "e", "sym", "ys", "b", "ps", "ns", "new", "es", "sb", "status", "state", "w", "v", "sg", "m", "xs", "r", "conf", "p", "aws"], "ans": ["aves", "ls", "std", "anus", "ags", "ar", "nas", "ras", "a", "ars", "ants", "aid", "af", "amps", "any", "flags", "args", "ean", "an", "anc", "ats", "cs", "ents", "anon", "annot", "na", "os", "analysis", "anas", "nan", "ana", "span", "can", "anes", "AN", "cas", "aned", "ANS", "ann", "lan", "ns", "ane", "support", "ani", "ai", "ays", "acs", "ln", "aus", "ons"], "cnt": ["lcount", "uncrt", "uncnt", "cno", "pcnc", "lcant", "lcnt", " cno", " cpt", "ecpt", "cant", "ecno", "acount", "lcpt", "uncant", "lcno", " cant", "lcNT", "ecount", "acint", "Crt", "acnt", "uncount", "ecnt", " cint", "acNT", "pcNT", "acrt", "cnc", "Cnt", "Count", "acnc", "cNT", "pcnt", " cnc", " count", "cint", "Cant", "acant", "cpt", "crt", "pcint", " cNT", "count"], "flag": ["oct", "log", "type", "part", "sync", "std", "ar", "lag", "bug", "start", "int", "anch", "flags", "fun", "long", "year", "an", "ind", "leaf", "id", "sort", "force", "fd", "ant", "offset", "agn", "ret", "span", "age", "ag", "bit", "sav", "say", "char", "star", "len", "f", "ann", "ad", "scan", "lang", "factor", "status", "ai", "kind", "z", "add", "v", "sign", "style", "wait", "ace", "sg", "Flag", "group", "arg", "count"], "i": ["pi", "di", "iw", "k", "x", "xi", "j", "gi", "c", "gu", "ci", "d", "yi", "ac", "a", "io", "start", "ie", "int", "ind", "n", "ini", "ui", "bi", "id", "y", "on", "g", "h", "index", "ip", "eni", "si", "u", "iu", "e", "I", "ti", "mi", "ai", "z", "qi", "l", "ii", "li", "m", "ei", "ih", "p", "count"]}}
{"code": "x,y = map(int,input().split())\\ntmp = x\\ncnt = 0\\n\\nwhile tmp <= y:\\n  tmp *= 2\\n  cnt += 1\\n\\nprint(cnt)", "target": "631", "substitutes": {"x": ["input", "px", "xi", "c", "d", "xy", "data", "pos", "int", "n", "t", "i", "id", "time", "xxx", "h", "xxxx", "rx", "ix", "index", "xc", "size", "f", "max", "dx", "b", "X", "xx", "wx", "no", "w", "z", "v", "l", "xs", "p", "temp"], "y": ["ey", "sy", "ya", "j", "cy", "c", "d", "xy", "yi", "ky", "ry", "start", "ny", "int", "n", "s", "Y", "t", "i", "dy", "ty", "ym", "py", "yt", "f", "b", "xx", "yy", "w", "z", "v", "l", "m", "ady", "p", "temp", "vy"], "tmp": ["part", "Temp", "kk", "px", "c", "sp", "current", "tc", "nb", "output", "dest", "data", "const", "diff", "pos", "int", "crop", "amp", "mmm", "t", "rb", "cmp", " temp", "xxx", "xt", "offset", "cp", "tt", "ctr", "py", "beta", "xc", "mp", "nt", "max", "obj", "stuff", "jj", "mm", "yy", "txt", "now", "p", "temp", "bp"], "cnt": ["lcount", "Cent", "CNT", "xcnt", "Cnc", "lcnt", "xcent", "acount", "lcNT", "xcount", "xcNT", "acnt", "acNT", "acent", "lcct", "cnc", "Cnt", "cct", "Count", "cNT", " cnc", "Cct", " count", "lcnc", "cent", " cct", " cNT", "count"]}}
{"code": "k = int(input())\\ns = input()\\nmod = 10**9 + 7\\n\\nn = 2*10**6 + 1\\nfactorial = [1]\\ninverse = [1]\\npow25 = [1]\\npow26 = [1]\\nfor i in range(1, n+1):\\n    factorial.append(factorial[-1] * i % mod)\\n    inverse.append(pow(factorial[-1], mod - 2, mod))\\n    pow25.append((pow25[-1]*25)%mod)\\n    pow26.append((pow26[-1]*26)%mod)\\n\\ndef comb(n, r, mod):\\n    if n < r or r < 0: return 0\\n    elif r == 0: return 1\\n    return factorial[n] * inverse[r] * inverse[n - r] % mod\\n\\nn = len(s)\\nlength = k + n\\nans = 0\\nfor i in range(n, length+1):\\n    temp = 1\\n    temp *= comb(i-1, n-1, mod)\\n    temp %= mod\\n    temp *= pow25[i-n]\\n    temp %= mod\\n    temp *= pow26[length-i]\\n    temp %= mod\\n    ans += temp\\n    ans %= mod\\nprint(ans)", "target": "539", "substitutes": {"k": ["ik", "o", "x", "j", "c", "d", "ak", "num", "t", "y", "sk", "g", "unk", "h", "ok", "ks", "u", "f", "max", "b", "q", "z", "K", "l", "m", "p", "km", "N"], "s": ["states", "parts", "o", "services", "ls", "S", "sync", "j", "sin", "c", "d", "ws", "ses", "a", "ss", "space", "strings", "sk", "g", "os", "h", "ks", "sq", "south", "si", "u", "spec", "e", "f", "sym", "b", "ps", "ns", "sb", "w", "l", "powers", "sc", "m", "p"], "mod": ["cur", "j", "c", "ac", "rm", "option", "num", "non", "reg", "mag", "ms", "ow", "null", "mods", "multi", "zip", "dd", "cum", "pm", "z", "m", "right", "p", "mode", "part", "loc", "log", "x", "tr", "R", "d", "rad", "ro", "lex", "du", "range", "id", "dig", "ix", "post", "comb", "opt", "max", "none", "im", "add", "block", "core", "sec", "step", "mac", "search", "modified", "section", "mult", "diff", "int", "ind", "fun", "perm", "rem", "cor", "mx", "bin", "comp", "model", "function", "spec", "Mod", "complex", "form", "rank", "oct", "rs", "dom", "common", "case", "od", "exp", "ver", "sum", "bug", "dec", "re", "inc", "rod", "loop", "test", "round", "check", "div", "min", "cond", "dim", "custom", "parent", "cm", "un", "rep", "row", "size", "pre", " Mod", "MOD", "power", "module", "sign", "rand", "lib", "mix"], "n": ["ner", "o", "cn", "x", "j", "c", "R", "d", "ng", " N", "nb", "node", "a", "re", "num", "an", "t", "ni", "y", "mn", "g", "min", "en", "h", "network", "inn", "nn", "nan", "un", "nu", "nr", "u", "net", "len", "nt", "f", "e", "rn", "b", "ns", "pn", "sn", "no", "q", "w", "z", "dn", "l", "v", "gn", "m", "nc", "ln", "p", "ne", "N"], "factorial": ["ributorset", "Factodd", "actories", " factor", "factorset", " factored", "ctor", "factored", "ributor", "factories", "formorial", "ributories", "actodd", "formories", "actored", "Factored", " factories", "ctorial", "Factories", "factory", "formory", "Factorset", "ributorial", "formor", "ctories", "Factor", "ctored", " factorset", " factory", "Factorial", "actorial", " factodd", "actory", "factor", "factodd", "actor"], "inverse": ["insversion", "inverted", " inversion", "incject", "innverse", "incverse", "innversion", "converted", "vinverse", "incvert", " inverted", "conversion", "vinvert", "insject", "converse", "inject", "incversion", "inversion", "instrument", "Invert", "insvert", "invert", " inject", "construment", "insverted", "vinject", "insstrument", "insverse", " instrument", "Inversion", "Inverse", " invert", "innvert", "vinversion"], "pow25": ["pow5", "pows15", " pow55", " pow24", "powe15", "powing52", " powe25", "pow52", " powing52", "powe125", "pows5", "pew23", " powing25", "pows50", "pows24", "power25", "pow55", "powed55", "pow23", " pow15", "pow24", "pows23", "power50", "powe24", "powing26", " pows25", "pot5", "pew25", "pew125", "pows125", "powe23", " power25", "powe25", "pot25", "pows55", "powed52", " pow50", " powe5", "powed26", " power24", "powing55", " pows23", " power50", " powe55", " pow5", " pow23", "power24", "powe50", "powe26", "powing25", "pew15", " pows15", "powe52", " powing55", "powe5", "pow15", "pow50", "power23", " powe23", " pow52", "powed25", " pows125", "pot55", "pot23", " pow125", "powe55", " powing26", "pows25", "pow125", " power23"], "pow26": ["pOW26", "prew25", "Pow53", " pow216", "pow33", "powing24", "poy6", "pows66", "powed53", "pew216", "pOW66", " pew26", "Pow33", "pOW24", "powing26", "poy25", "POW24", "poy53", "pew25", "Pow25", "prew66", "powe25", "POW53", "poy33", "pOW6", "Pow66", "pOW53", "pew66", "pox216", "POW25", "pow6", "prew26", "powed26", "Pow24", "pox26", "powe6", "pow66", " pow66", "Pow26", "powe66", "pOW33", "Pow6", "powing53", "powe26", "pew26", "POW26", "poy26", "poy24", "powed25", " pew216", "pow216", "pOW25", "pows26", "pox66", "pox25", "POW6", "pow53", "powing33", "pows25", "POW66", "powed6", "pow24", "POW33", " pew66", "pows216", " pew25", "prew6"], "i": ["mini", "pi", "di", "o", "x", "xi", "j", "c", "ci", "d", "io", "ie", "int", "ind", "ini", "t", "ni", "y", "g", "h", "iter", "index", "ip", "multi", "si", "u", "iu", "e", "I", "ti", "f", "b", "mi", "q", "ai", "z", "qi", "l", "v", "ii", "ic", "li", "m", "p"], "r": ["rs", "rank", "o", "rd", "x", "j", "c", "er", "R", "d", "ar", "ri", "ro", "a", "re", "rh", "range", "rb", "root", "yr", "rt", "g", "rg", "ir", "rar", "rw", "ra", "row", "nr", "u", "ur", "f", "e", "rr", "rn", "b", "q", "w", "nor", "l", "m", "right", "ru", "p", "sr"], "length": ["pi", "o", "distance", "full", "j", "slice", "col", "ength", "section", "ind", "long", "tail", "range", "L", "ch", "id", "ph", "width", "h", "span", "th", "number", "sequence", "row", "len", "size", "Length", "f", "shape", "limit", "sh", "position", "z", "K", "l", "duration", "se", "p", "form", "path", "level", "count"], "ans": ["offs", "amps", "non", "ms", "An", "tmp", "can", "AN", "aned", "cas", "ANS", "ns", "p", "x", "std", "_", "ras", "a", "an", "ents", "sk", "na", "nan", "ann", "chan", "no", "ani", "ace", "ls", "san", "old", "ations", "ars", "list", "man", "ats", "plan", "ana", "nn", "span", "cons", "tem", "clean", "es", "ones", "ons", "ums", "anus", "ins", "sum", "ants", "ni", "outs", "ant", "res", "ad", "unc", "ai", "aces", "ano", "any"], "temp": ["type", "tp", "at", "c", "current", "ac", " temporary", "num", "option", " temperature", "h", "tmp", "fake", "f", "cum", "memory", "z", "template", "m", "p", "count", "Temp", "x", "um", "tc", "output", "a", "sol", "an", "y", "keep", "offset", "thread", "comb", "ee", "max", "opt", "white", "pt", "emp", "content", "wh", "condition", "input", "col", "copy", "context", "eff", "index", "span", "model", "ex", "len", "em", "toc", "tem", "clean", "form", "porary", "partial", "sum", "perature", "inc", "cache", "test", "tx", "min", "ant", "iter", "atom", "cm", "cu", "size", "pre", "term", "w", "now", "warm"]}}
{"code": "N = int(input())\\nstations = [list(map(int, input().split())) for _ in range(N-1)]\\n\\nimport numpy as np\\nfor i in range(N-1):\\n    elapsed_time = 0\\n    for k in range(i, N-1):\\n        c, s, f = stations[k]\\n        # \u51fa\u767a\u524d\u3067\u306e\u6642\u9593\u3092\u6c42\u3081\u308b\\n        if elapsed_time <= s:\\n            wait_time = s - elapsed_time\\n        else:\\n            x = elapsed_time - s\\n            next_train = f * np.ceil(x/f)\\n            wait_time = next_train - x\\n        elapsed_time += wait_time + c\\n    print(int(elapsed_time))\\nprint(0)\\n", "target": "529", "substitutes": {"N": ["Node", "NA", "D", "S", "Network", "R", "NS", "NC", "B", "Ns", "T", "n", "Y", "Ni", "L", "ni", "Len", "Num", "Part", "CNN", "NT", " n", "Size", "network", "NN", "number", "No", "MN", "Length", "Count", "I", "X", "ns", "NO", "C", "NI", "Ne", "V", "P", "K", "NP", "O", "M", "F", "Z"], "stations": ["putations", "stATIONS", "instation", "constations", "Stations", "constalls", "instops", "Station", "putATIONS", "utalls", "STation", "Stalls", "instations", "constation", "utation", "STATIONS", "STations", "STalls", "stops", "utATIONS", "stalls", "station", "putalls", "installs", "utations", "constops", "putation", "Stops"], "_": [" key", "x", " __", "ac", " time", "all", " all", "id", "time", "g", "ip", " seq", "u", " id"], "i": ["pi", "it", "o", "x", "j", "ci", "d", "phi", " I", "a", "io", "start", "ind", "n", "t", "id", "iq", "y", " j", "index", "ip", "u", "iu", "e", "ti", "I", "b", "mu", "im", "ai", "q", "z", "p", "chi", "v", "l", "ii", "m"], "elapsed_time": ["elapsed4times", "elapsed_duration", "elapsed_times", "elapse_Time", "elapsed4time", "elapse_times", "elapsed4Time", "elapsed_Time", "elapse_duration", "elapsed4duration", "elapse_time"], "k": ["kj", "ik", "it", " u", "o", "kn", "x", "j", " d", "kk", "d", "SK", "ky", "kl", " K", "ind", "n", "ck", "sk", "g", " j", "unk", "ks", "ko", "u", "I", "ki", "q", "tk", "kw", "K", "v", "m", "p", "kr", "km"], "c": ["o", "x", "ci", "cycle", "fc", "n", " C", "t", "cs", "y", "g", "dc", "cu", "u", "e", "b", "C", "q", "w", "z", "v", "lc", "l", "r", "p", "count"], "s": ["ls", "fs", "o", "S", "sp", "ss", "sl", "n", "t", "y", "g", "os", "h", "si", "u", "ps", "ns", "w", "sv", "z", "v", "l", "m", "r", "se", "p"], "f": ["fs", "o", "x", "d", "fc", "F", "t", "info", "y", "fd", "h", "frequency", "function", "u", "e", "fn", "q", "w", "z", "v", "l", "m", "cf", "p", "fp"]}}
{"code": "while True:\\n    (H, W) = [int(i) for i in input().split()]\\n    if H == W == 0:\\n        break\\n\\n    for a in range(H):\\n        for b in range(W):\\n            print('#', end='') if (a + b) % 2 == 0 else print('.', end='')\\n        print()\\n    print()", "target": "451", "substitutes": {"H": ["U", "SH", "D", "HC", "R", "E", "B", "RH", "T", "HH", "Y", "A", "G", "L", "HA", "HK", "EH", "h", "HS", "Q", "I", "X", "C", "HI", "V", "P", "K", "O", "M", "F", "N", "Z"], "W": ["U", "GW", "TW", "SH", "D", "BW", "R", "E", "B", "WR", "T", "EW", "Y", "L", "G", "Wh", "NW", " w", "Q", "WA", "WC", "WS", "WB", "I", "X", "SW", "CW", "C", "V", "w", "We", "P", "MW", "O", "WE", "M", "F", "VW", "AW", "N", "Z"], "i": ["pi", "k", "x", "xi", "j", "c", "gi", "d", "ri", "phi", " I", "pos", "int", "ind", "n", "ini", "bi", "id", "key", " j", "ix", "index", "ip", " c", "si", "u", "iu", "e", "I", "ti", "f", "ai", "z", "v", "ii", "r", "li", "p"], "a": ["ma", "area", "ha", "x", "c", "ait", "d", "ab", "ac", "wa", "pa", "n", "da", "an", "num", "A", "y", "alpha", "sa", "ia", "aa", "u", "va", "f", "e", "am", "ad", "ca", "ga", "ai", "ae", "w", "ba", "l", "m", "p", " A"], "b": ["k", "x", "j", "c", "d", "nb", "ac", "ab", "B", "bc", "n", "num", "bi", "y", "bs", "g", "h", "abc", "ib", " f", "beta", "br", "u", "f", "e", "ad", "base", "sb", "q", "w", "ba", "v", "l", "bb", "r", "p", "bp", "block"]}}
{"code": "from collections import defaultdict\\nn,m = map(int,input().split())\\na = list(map(int,input().split()))\\n\"\"\"\\na\u306e\u9023\u7d9a\u5217\u304cM\u306e\u500d\u6570\u3067\u3042\u308c\u3070\u3044\u3044\\ndp[j] := j\u306e\u500d\u6570\u306b\u306a\u308b\u7dcf\u6570.\\n\"\"\"\\ndp = defaultdict(lambda: 0)\\ndp[0] = 1\\ntmp = 0\\nans = 0\\nfor i in range(n):\\n\ttmp += a[i]\\n\tans += dp[tmp%m]\\n\tdp[tmp%m] += 1\\nprint(ans)", "target": "23", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nm", " N", "nb", "pos", "num", "t", "ni", "y", "mn", "g", "count", "nan", "nn", "number", " c", "nr", "size", "e", "nt", "b", "ns", "w", "z", " ng", "l", "v", "r", "nc", "M", "p", "ne", "N"], "m": ["mini", "o", "x", "j", "um", "c", "fm", "np", "d", "nm", "param", "om", "rm", "mod", "meta", "mmm", "num", "man", " mm", "y", "mon", "dim", "ms", "cm", " M", "mp", "nom", "u", "mt", "mu", "f", "e", "am", "b", "mi", "sm", "mm", "im", "pm", "imm", "dm", "w", "module", "v", "l", "M", "p"], "a": ["ma", "area", "auto", "at", "anta", "input", "c", "ama", "ac", "ab", "pa", "args", "da", "an", "amp", "array", "A", "alpha", "api", "sa", "aa", "oa", "b", "am", "ad", "ai", "asa", "ba", "aaa", "ap", "p", "au"], "dp": ["wp", "lp", "df", "tp", "di", "dt", "pi", "pb", "px", "db", "np", "d", "img", "nb", "pd", "data", "pos", "pa", "amp", "hp", "DP", "config", "pkg", "api", "alpha", "ds", "cp", "dc", "aa", "mp", "pp", "ps", "dl", "ai", "bps", "dm", "params", "bb", "deb", "dump", "dat", "p", "gp", "fp"], "tmp": ["wp", "area", "part", "tp", "ott", "x", "kk", "c", "np", "vm", "nm", "img", "nb", "start", "app", "pos", "int", "mk", "amp", "an", "mmm", "t", " mm", " dd", "cmp", "api", "alpha", "uff", "xt", "cp", "NN", "nn", "md", "cm", "next", "pad", "st", "mp", "nom", "pp", "nt", " ff", "obj", "every", "pot", "stuff", "sup", "uf", "mm", "emp", "aaa", "bb", "now", "txt", "ppo", "p", "temp"], "ans": ["wp", "offs", "ls", "aos", "ants", "pos", "amps", "photos", "an", "s", "ads", " means", " dd", "cs", "ents", "sk", "na", "ms", "ds", "cp", "nan", "nn", "ana", "ies", "span", "cas", "aned", "mp", "ANS", "nt", "dd", "obj", "ann", "stuff", "ns", "ps", "ai", "ani", "bps", "ays", "eps", "p", "aus", "rams"], "i": ["pi", "ji", "k", "x", "j", "c", "ci", "d", "img", "start", "pos", "int", "ind", "ini", "ui", "ni", "bi", "id", "y", "h", "ip", "si", "u", "pp", "f", "ti", "I", "b", "im", "ai", "z", "v", "ii", "li", "r", "p"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**5)\\nn = int(input())\\nab = [list(map(int,input().split()))for _ in range(n-1)]\\n\\ngraph = [[] for _ in range(n+1)]\\nans = [0]*(n-1)\\nfor i in range(n-1):\\n    graph[ab[i][0]].append((ab[i][1],i))\\n    graph[ab[i][1]].append((ab[i][0],i))\\n\\nvisit = [False]*(n+1)\\ndef dfs(p,c):\\n    color = 1\\n    visit[p] = True\\n    for n,i in graph[p]:\\n        if visit[n] == False:\\n            if color == c:\\n                color += 1\\n            ans[i] = color\\n            dfs(n,color)\\n            color += 1\\n\\ndfs(1,0)\\nprint(max(ans))\\nfor t in ans:\\n    print(t)\\n", "target": "157", "substitutes": {"n": ["o", "cn", "k", "x", "j", "d", "nb", "name", "a", "ny", "num", "non", "s", "an", "y", "mn", "on", "g", "en", "network", "nn", "nan", "un", "nl", "number", "u", "len", "net", "size", "nt", "f", "e", "fn", "b", "ns", "pn", "sn", "no", "w", "z", "l", "v", "m", "nc", "ne", "N"], "ab": ["area", "eb", "mb", "http", "abb", "pb", "account", "ob", "alog", "nb", "ac", "a", "app", "bh", "af", "abs", "ub", "banks", "an", "list", "array", "av", "ast", "tab", "rb", "Ab", "api", "bs", "lab", "hab", "ah", "fb", "abc", "fab", "ib", "atom", "lb", "ann", "b", "am", "base", "sb", "ai", "abl", "ae", "AB", "obb", "bb", "sam", "storage", "abi", "ap", "aps"], "_": ["out", "x", " un", " line", "__", " time", "all", "ing", "non", " j", " self", " seq", "f", " block", " non", " local", " the"], "graph": ["ograph", "log", "vg", "trace", "feed", "pg", "layout", "node", "app", "context", "document", "chart", "view", "gl", "array", "plot", "config", "root", "Graph", "ph", "shadow", "python", "raph", "g", "gap", "en", "gui", "connect", "image", "network", "parent", "social", "model", "dot", "stack", "tree", "ghost", "group", "ann", "shape", "edge", "draw", "json", "gn", "complex", "groups", "gen", "order", "han", "path"], "ans": ["ang", "at", "Ann", "x", "anus", "aning", "anned", "ins", "atin", "ases", "a", "ations", "ants", "ens", "all", "photos", "an", "s", "anc", " means", "ats", " spans", "cs", "gd", "oss", "anon", "annot", "na", "os", "plan", "ds", "ids", "nan", "nn", "trans", "span", "can", "ana", "An", "names", "AN", "aned", "ase", "ANS", "fn", "nt", "ann", "ps", "ns", "scan", "lang", "lan", "chan", "ane", "ai", "ani", "ano", " scans", "cross", "groups", "types", "gen", "xs", "eps", "ons"], "i": ["pi", "it", "type", "uri", "di", "o", "x", "xi", "j", "ci", "d", "yi", "ri", "a", "io", "int", "ind", "ui", "ini", "ni", "info", "id", "y", " j", "iter", "ix", "index", "ip", "multi", "si", "iii", "u", "iu", "e", "ti", "I", "f", "b", "ai", "z", "chi", "qi", "l", "v", "ii", "li", "m"], "visit": ["visitation", "visualit", "posits", "VISitor", "VISitation", "accessid", "piritor", "Visition", "Visit", "visualits", "posit", "VISition", "positor", "VISid", "accessit", "accessitor", "pirits", "visits", "positation", " visid", "posort", "VISits", "Visort", "VISort", "visitor", " visits", "poslit", "visuallit", "accessits", "visition", "VISit", "visid", "pirlit", "position", "Visitation", "visort", " visitor", "visualitor", "pirit", "vislit"], "p": ["pi", "o", "type", "tp", "pid", "k", "x", "j", "np", "d", "param", "point", "a", "pos", "s", "y", "g", "h", "pr", "u", "e", "f", "b", "pn", "q", "P", "v", "l", "pc", "m", "r", "bp", "fp"], "c": ["o", "cn", "k", "cy", "ci", "d", "cycle", "col", "ac", "center", "s", "ch", "cs", "y", "g", "h", "cor", "cp", "xc", "u", "f", "e", "b", "C", "q", "w", "z", "v", "l", "lc", "m", "r", "nc"], "color": ["type", "cycle", "raw", "option", "num", "colour", "h", "source", "can", "char", "f", "stroke", "draw", "style", "comment", "k", "err", "x", "blue", "scale", "pixel", "chrom", "pal", "center", "ch", "root", "id", "y", "olor", "cp", "norm", "default", "white", "r", "core", "cy", "feature", "col", "shadow", "Color", "alpha", "cost", "rc", "cor", "url", "index", "function", "fill", "background", "orange", "C", "l", "v", "o", "sum", "value", "prop", "gray", "key", "g", "parent", "line", "bg", "font", "number", "gradient", "COLOR", "size", "w", "border", "path"], "t": ["it", "type", "o", "ott", "out", "tr", "j", "x", "trace", "d", "port", "tc", "node", "a", "art", "format", "T", "int", "ot", "trial", "s", "ont", "tw", "id", "y", "total", "g", "h", "ts", "tt", "trans", "span", "the", "f", "nt", "ti", "scroll", "w", "ta", "l", "v", "r", "text"]}}
{"code": "while True:\\n    s = input().split(\" \")\\n    a = int(s[0])\\n    op = s[1]\\n    b = int(s[2])\\n    if op == \"?\":\\n        break\\n    elif op == \"+\":\\n        print(a + b)\\n    elif op == \"-\":\\n        print(a - b)\\n    elif op == \"*\":\\n        print(a * b)\\n    else:\\n        print(a // b)", "target": "475", "substitutes": {"s": ["sec", "parts", "o", "string", "js", "ls", "S", "sync", "input", "c", "d", "ws", "ses", "ss", "submit", "bis", "second", "n", "abs", "qs", "t", "strings", "i", "split", "g", "os", "comments", "h", "ds", "ms", "ks", "lines", "sf", "u", "spec", "e", "f", "ps", "ns", "tests", "es", "sb", "l", "v", "sg", "stats", "r", "m", "xs", "its", "p", "seconds"], "a": ["ma", "area", "auto", "o", "sta", "ya", "x", "c", "aw", "d", "ama", "wa", "ac", "ab", "af", "pa", "n", "da", "valid", "an", "A", "fa", "i", "y", "apa", "na", "sa", "ana", "ia", "aa", "la", "u", "va", "f", "e", "am", "ca", "ad", "ga", "ai", "ae", "asa", "ba", "ea", "p", "au"], "op": ["oped", "oct", "it", "type", "o", "step", "omp", "sp", "prev", "ipop", "node", "ac", "ab", "app", "prop", "cod", "af", "ops", "num", "an", "yp", "root", "id", "proc", "key", "operation", "vert", "ok", "OP", "iter", "operator", "rip", "post", "ip", "error", "comp", "iop", "oop", "mp", "rop", "pp", "opt", "hop", "f", "opus", "ad", "Op", "ype", "opa", "oper", "pop", "Hop", "cat", "opy", "jp", "skip", "oc", "ap", "p", "cop", "orp"], "b": ["o", "eb", "k", "x", "pb", "c", "db", "d", "cb", "nb", "ab", "ac", "B", "n", "xb", "rb", "bi", "i", "y", "bs", "g", "h", "fb", "gb", "ib", "aa", "wb", "u", "lb", "e", "f", "sb", "be", "w", "ba", "l", "v", "r", "bf", "m", "bb", "p"]}}
{"code": "#import sys\\n#import numpy as np\\nimport math\\n#from fractions import Fraction\\nimport itertools\\nfrom collections import deque\\nfrom collections import Counter\\n#import heapq\\n#from fractions  import gcd\\n#input=sys.stdin.readline\\nimport bisect\\nn,k=map(int,input().split())\\na=list(map(int,input().split()))\\na.sort()\\nz=-1\\np=-1\\nmod=10**9+7\\nans=1\\nfor i in range(n):\\n    if a[i]==0:\\n        z=i\\n    elif a[i]>0:\\n        p=i\\n        break\\na_abs=sorted(a,key=abs,reverse=True)\\nif (p==-1 and k%2==1) or n==k:\\n    for i in range(k):\\n        ans*=a[n-1-i]\\n        ans%=mod\\n    print(ans%mod)\\n    exit()\\nelse:\\n    lp=-1\\n    lm=-1\\n    f=0\\n    for i in range(k):\\n        if a_abs[i]>=0:\\n            lp=i\\n        else:\\n            lm=i\\n            f+=1\\n    if f%2==0:\\n        for i in range(k):\\n          ans*=a_abs[i]\\n          ans%=mod\\n        print(ans)\\n    else:\\n        fp=-1\\n        fm=-1\\n        check_p=False\\n        check_m=False\\n        for i in range(k,n):\\n            if not check_p and a_abs[i]>=0:\\n                fp=i\\n                check_p=True\\n            elif not check_m and a_abs[i]<0:\\n                fm=i\\n                check_m=True\\n            if check_m and check_p:\\n                break\\n        if lp!=-1:\\n            if fp==-1:\\n              for i in range(k):\\n                if i==lp:\\n                  continue\\n                ans*=a_abs[i]\\n                ans%=mod\\n              ans*=a_abs[fm]\\n              ans%=mod\\n            elif fm==-1:\\n              for i in range(k):\\n                if i==lm:\\n                  continue\\n                ans*=a_abs[i]\\n                ans%=mod\\n              ans*=a_abs[fp]\\n              ans%=mod\\n\\n            else:\\n                if a_abs[fm]*a_abs[lm]>=a_abs[fp]*a_abs[lp]:\\n                  for i in range(k):\\n                    if i==lp:\\n                      continue\\n                    ans*=a_abs[i]\\n                    ans%=mod\\n                  ans*=a_abs[fm]\\n                  ans%=mod\\n                else:\\n                  for i in range(k):\\n                    if i==lm:\\n                      continue\\n               \t    ans*=a_abs[i]\\n                    ans%=mod\\n                  ans*=a_abs[fp]\\n                  ans%=mod\\n        else:\\n          for i in range(k):\\n            if i==lm:\\n              continue\\n            ans*=a_abs[i]\\n            ans%=mod\\n          ans*=a_abs[fp]\\n          ans%=mod\\n        print(ans%mod)", "target": "606", "substitutes": {}}
{"code": "while True :\\n\tH, W = map(int, input().split())\\n\tif(H == 0 & W == 0) :\\n\t\tbreak\\n\telse :\\n\t\tfor i in range(H) :\\n\t\t\tfor j in range(W) :\\n\t\t\t\tif((i + j) % 2 == 0) :\\n\t\t\t\t\tprint(\"#\", end = \"\")\\n\t\t\t\telse :\\n\t\t\t\t\tprint(\".\", end = \"\")\\n\t\t\tprint()\\n\t\tprint()\\n", "target": "451", "substitutes": {"H": ["U", "D", "HD", "HC", "R", "E", "Hi", "B", "RH", "T", "J", "HH", "NH", "Y", "L", "G", "HA", "HK", "EH", "h", "Q", "WH", "GH", "Length", "HY", "I", "X", "C", "HI", "V", "P", "K", "TH", "M", "DH", "F", "CH", "N", "CL"], "W": ["U", "GW", "SH", "TW", "D", "S", "BW", "R", "E", "WF", "B", "WR", "T", "J", "F", "Y", "G", "Wh", "L", "DW", "WP", "Q", "WA", "WH", "WS", "WB", "I", "X", "SW", "C", "V", "w", "We", "P", "K", "MW", "WM", "O", "WE", "VW", "M", "N", "Z"], "i": ["pi", "o", "ji", "k", "x", "xi", "c", "ci", "yi", "phi", "a", "ie", "start", "int", "ind", "ni", "id", "y", "h", "index", "si", "u", "iu", "f", "I", "hi", "ai", "z", "chi", "l", "ii", "li", "m", "p"], "j": ["kj", "ji", " J", "o", "k", "x", "xi", "d", "a", " ii", "ie", "jon", "pos", "oj", "n", "J", "ch", "y", "ij", "h", "jo", " l", "ja", "je", "I", "b", "jj", "dj", "w", "z", "v", "jp", "aj", "l", "m", "ii", "p", "uj"]}}
{"code": "import statistics\\n\\nwhile True:\\n    n = int(input())\\n\\n    if n == 0:\\n        break\\n\\n    s = map(int, input().split())\\n\\n    print('{:.5f}'.format(statistics.pstdev(s)))", "target": "683", "substitutes": {"n": ["o", "k", "j", "c", "nb", "num", "an", "t", "ni", "i", "y", "na", "g", "en", "nn", "nan", "nl", "e", "f", "fn", "nt", "b", "ns", "pn", "sn", "z", "l", "v", "m", "nc", "ln", "p", "ne", "N", "conn"], "s": [" steps", "states", "ls", "parts", "S", "ings", "sync", " symbols", "c", " sig", "events", "d", " logs", "ses", "a", "steps", "ss", " ls", " comments", "second", "args", "ing", "ops", "split", " columns", "sections", "ds", "blocks", " items", " ns", "span", "lines", "sites", " signs", "items", "south", "size", " lines", "ps", "ns", " tests", "new", "tests", "sb", " blocks", "stats", "groups", " args", " rows", "seconds"]}}
{"code": "#!/usr/bin/env python\\nfrom bisect import *\\n\\nn, m = map(int, input().split())\\np = [0 for _ in range(m)]\\ny = [0 for _ in range(m)]\\nfor i in range(m):\\n    p[i], y[i] = map(int, input().split())\\n\\nd = [[] for _ in range(n)]\\nfor i in range(m):\\n    d[p[i]-1].append(y[i])\\n\\nfor i in range(len(d)):\\n    d[i] = sorted(d[i])\\n\\nls = rs = ''\\ndef complement(nstr):\\n    while len(nstr) != 6:\\n        nstr = '0' + nstr\\n    return nstr\\n\\nfor i in range(m):\\n    ls = complement(str(p[i]))\\n    r = bisect_right(d[p[i]-1], y[i])\\n    rs = complement(str(r))\\n    ans = ls+rs\\n    print(ans)\\n", "target": "225", "substitutes": {}}
{"code": "a, b = map(int, input().split())\\nc, d = a, b\\nl = []\\nm = []\\nn = []\\nt = 0\\nwhile b > 0:\\n    l.append(b%2)\\n    b //= 2\\nk = len(l)\\nfor i in range(k):\\n    m.append(a%2)\\n    a //= 2\\nif d%2 == 1:\\n    l = [0]*(k)\\nif c%2 == 0:\\n    m = [0]*(k)\\nfor i in range(k):\\n    n.append((l[i]+m[i])%2)\\nc = (c+1)//2*2\\nd = (d+1)//2*2\\nif (d-c)%4 == 2 or (d-c)%4 == 3:\\n    n[0] = (n[0]+1)%2\\nfor i in range(k):\\n    t += n[i]*(2**i)\\nprint(t)", "target": "481", "substitutes": {"a": ["area", "at", "x", "ar", "ac", "ab", "da", "an", "s", "A", "fa", "y", "alpha", "sa", "ia", "aa", "u", "f", "e", "ad", "ca", "am", "ai", "ae", "w", "aaa", "ba", "ea", "p", "au"], "b": ["o", "eb", "x", "j", "db", "cb", "nb", "sub", "ab", "B", "bd", "s", "A", "rb", "y", "bs", "body", "g", "h", "ib", "beta", "aa", "u", "e", "f", "end", "ad", "base", "sb", "w", "z", "ba", "v", "cat", "r", "bb", "se", "bf", "p"], "c": ["o", "cn", "x", "ci", "col", "ac", "cc", "s", "ce", "cs", "y", "g", "con", "h", "cp", "cm", "dc", "cu", "u", "f", "e", "ad", "ca", "C", "q", "w", "z", "cr", "v", "cd", "lc", "r", "p"], "d": ["o", "D", "dt", "x", "j", "db", "du", "da", "s", "y", "sd", "dy", "g", "h", "ds", "dc", "u", "f", "e", "dd", "ad", "q", "w", "z", "v", "cd", "r", "p", "ld"], "l": ["el", "lp", "ls", "o", "ol", "x", "j", "ul", "kl", "sl", "s", "ll", "list", "L", "y", "g", "h", "nl", "u", "f", "e", "pl", "dl", "w", "z", "v", "lc", "r", "li", "ln", "p"], "m": ["ma", "o", "mc", "x", "j", "an", "s", "y", "g", "h", "ms", "md", "ml", "cm", "mo", "u", "f", "e", "am", "sm", "mm", "im", "w", "pm", "z", "v", "r", "M", "p", "bm"], "n": ["o", "cn", "x", "j", "np", "nm", "nb", "an", "s", "y", "g", "en", "nn", "un", "nl", "u", "net", "f", "e", "ns", "sn", "no", "w", "z", "dn", "v", "r", "nc", "ln", "p", "ne", "N"], "t": ["o", "tp", "dt", "at", "x", "tr", "j", "tu", "tc", "T", "int", "ot", "wt", "s", "tw", "y", "test", "time", "g", "ty", "h", "ts", "tt", "tf", "u", "f", "e", "tim", "nt", "ta", "z", "v", "r", "p"], "k": ["o", "kn", "ke", "x", "kk", "j", "kl", "s", "num", "ch", "y", "sk", "g", "h", "ok", "ks", "u", "size", "f", "e", "max", "q", "w", "kw", "z", "K", "kb", "v", "length", "r", "p", "km", "ku"], "i": ["pi", "di", "o", "x", "xi", "j", "gi", "ci", "yi", "ri", "io", "ie", "int", "ind", "s", "ui", "ini", "ni", "bi", "id", "y", "g", "h", "ix", "index", "eni", "si", "u", "iu", "e", "I", "f", "ti", "ai", "z", "p", "qi", "v", "ii", "lc", "li", "r", "ei"]}}
{"code": "n=int(input())\\nh=[int(i) for i in input().split()]\\nans=0\\nhh=[]\\nfor i in h:\\n    hh.append(i)\\n    if i==max(hh):\\n        ans+=1\\nprint(ans)", "target": "26", "substitutes": {"n": ["pi", "o", "k", "c", "d", "nb", "num", "ni", "na", "g", "en", "nn", "nr", " ni", "fn", "b", "ns", "sn", "no", "init", "w", "l", "m", "r", "ln", "p", "N"], "h": ["o", "adh", " ah", "oh", "c", "ht", "hea", "bh", " H", "HH", "rh", "s", "hp", "ph", "his", "body", "ah", " uh", "dh", "header", "ssh", "host", "hhh", "f", "hr", "hi", "uh", "gh", "sh", "w", "z", "q", "l", "v", "han", "hm", "igh", "H", "he", "ih", "p", "hs"], "i": ["pi", "di", "uri", "o", "ji", "iw", "it", "k", "x", "xi", "j", "input", "c", "ci", "d", "yi", "phi", "oi", "ri", "a", "io", " ii", "start", "int", "ind", "uli", "ini", "ui", "ni", "bi", "id", "y", "index", "ip", "si", "iii", "u", "iu", "fi", "f", "I", "e", "ti", "b", "hi", "ai", "z", "chi", "qi", "l", "v", "ii", "m", "li", "ei", "p", "zi"], "ans": ["offs", "cycles", "aning", "ras", "nas", "ins", "reads", "facts", "ars", "ens", "an", "man", " means", "shows", "cs", "ams", "anon", "sk", "na", "os", "anas", "ds", "ks", "nn", "span", "can", "anes", "cons", "AN", "cas", "aned", "leans", "atan", "ANS", "hs", "ann", "ps", "lan", "ns", "sn", "chan", "ends", "ani", "ai", "ays", "powers", "mean", "han", "ares", "xs", "eps", "ln", "rss", "aus", "ons"], "hh": ["history", "hl", "adh", " ah", "hed", "oh", "hw", "hours", "hon", "HHHH", "hz", "ht", "hea", "bh", "kh", "ww", "HH", "hp", "rh", "mmm", "ph", "ah", " oh", "mph", "dh", "nn", "lr", "hess", " HH", "zh", "hhh", "hhhh", "pp", "hn", "hi", "qq", "ho", "gh", "sh", "uh", "han", "hm", "igh", "ogh", "ih", "hs", "cl"]}}
{"code": "def gcd(a, b):\\n    while(b > 0):\\n        a, b = b, a % b\\n    return a\\nimport sys\\nfor line in sys.stdin:\\n    a, b = map(int, line.split())\\n    g = gcd(a, b)\\n    print(g, a * b // g)", "target": "604", "substitutes": {"a": ["ma", "area", "auto", "x", "c", "aw", "d", "ama", "ab", "ac", "wa", "af", "int", "n", "pa", "da", "an", "s", "A", "fa", "i", "y", "alpha", "api", "na", "sa", "abc", "ia", "aa", "la", "u", "va", "f", "e", "am", "ad", "ca", "code", "ga", "ai", "ae", "w", "ba", "ea", "l", "aj", "p", " A", "au"], "b": ["eb", "mb", "x", "pb", "abb", "j", "c", "db", "d", "ob", "nb", "ab", "B", "bd", "n", "s", "ben", "rb", "A", "bi", "i", "y", "split", "bs", "bar", "fb", "h", "gb", "ib", "beta", "aa", "wb", "lb", "u", "e", "f", "base", "sb", "be", "w", "ba", "v", "l", "bb", "bf", "r", "m", "emb", "p"], "line": ["file", "log", "string", "out", "x", "lf", "page", "Line", "name", "data", "LINE", "int", "list", "range", "entry", "val", "url", "cell", "word", "source", "nl", "lines", "row", "function", "message", "lin", "run", "f", " lines", "obj", "inline", "func", "code", "e", "buffer", "status", "lc", "l", "r", "comment", "byte", "block"], "g": ["c", "gi", "gu", "gm", "d", "eg", "gp", "n", "ge", "cfg", "go", "s", "G", "gz", "i", "gd", "y", "gy", "h", "gb", "ig", "gs", "gg", "bg", "ged", "u", "e", "f", "gly", "gt", "ga", "gh", "w", "yg", "l", "gn", "sg", "m", "r", "msg", "gen", "p", "gam"]}}
{"code": "x,y,a,b,c=map(int,input().split())\\np=sorted(list(map(lambda x:int(x)*-1,input().split())))\\nq=sorted(list(map(lambda x:int(x)*-1,input().split())))\\nr=sorted(list(map(lambda x:int(x)*-1,input().split())))\\nimport heapq\\nv=p[:x]+q[:y]+r\\nheapq.heapify(v)\\nans=0\\nfor i in range(x+y):\\n  ans+=heapq.heappop(v)\\nprint(-ans)", "target": "104", "substitutes": {"x": ["work", "xi", "hex", "ac", "t", "time", "python", "xxx", "h", "self", "rx", "fx", "day", "f", "dx", "xf", "z", "m", "ext", "k", "xp", "px", "plus", "d", "lex", "id", "xml", "width", "yx", "sex", "ix", "xes", "cross", "php", "xy", "event", "int", "n", "ww", "ck", "index", "ex", "xc", "u", "e", "X", "xx", "wx", "l", "ic", "pe", "xs", "two", "name", "ux", "tx", "xa", "g", "ax", "xt", "number", "xd", "one", "my", "w", "any"], "y": ["ey", "o", "type", "wy", "ya", "j", "cy", "d", "xy", "yi", "ry", "ny", "n", "s", "Y", "ye", "t", "yr", "dy", "g", "h", "py", "yt", "u", "f", "e", "ys", "yy", "w", "z", "l", "m", "vy"], "a": ["j", "d", "ac", "ab", "int", "n", "da", "A", "alpha", "g", "ax", "abc", "aa", "e", "f", "ad", "w", "ae", "z", "m"], "b": ["o", "j", "cy", "d", "ab", "B", "bc", "n", "bs", "g", "h", "beta", "e", "f", "w", "z", "ba", "l", "bb"], "c": ["o", "k", "cy", "ci", "d", "col", "ac", "n", "s", "ch", "cs", "g", "h", "ct", "u", "f", "e", "end", "C", "w", "z", "l", "m"], "p": ["lp", "o", "j", "op", "np", "d", "pa", "n", "per", "an", "t", "g", "h", "pr", "py", "u", "pp", "f", "e", "pre", "ps", "P", "z", "l", "m", "ap", "pe"], "q": ["qt", "k", "j", "d", "n", "qs", "t", "requ", "qa", "g", "h", "query", "py", "Q", "sq", "u", "f", "e", "qq", "w", "z", "qi", "l", "m", "qu", "dq"], "r": ["rs", "err", "j", "er", "R", "ar", "d", "ro", "n", "re", "rh", "rb", "range", "rf", "g", "rg", "ir", "lr", "pr", "rw", "nr", "br", "e", "rl", "rr", "w", "nor", "z", "cr", "l", "m", "fr", "ru", "kr", "rc", "sr"], "v": ["o", "k", "uv", "j", "d", "vv", "vs", "vt", "n", "view", "vp", "var", "array", "s", "g", "h", "version", "qv", "u", "f", "e", "values", "vd", "V", "w", "sv", "z", "l", "m"], "ans": ["ls", "asses", "ass", "nas", "ras", "ins", "anks", "ars", "ss", "ants", "aid", "amps", "an", "ops", "anc", "ads", "ats", " means", "asts", "outs", "ents", "anon", "na", "os", "anas", "ks", "ana", "anes", "can", "cons", "arts", "AN", "aned", "leans", "ANS", "ann", "lan", "ns", "es", "ai", "aces", "ays", "annels", "eps", "aus", "ons"], "i": ["o", "k", "xi", "j", "gi", "ie", "int", "ind", "n", "id", "ix", "index", "ip", "il", "u", "iu", "e", "I", "f", "ai", "z", "ii", "li", "io"]}}
{"code": "def main():\\n    n = int(input())\\n    p_lst = list(map(int, input().split()))\\n    count = 0\\n\\n    tmp = 0\\n    for i in range(n):\\n        p = p_lst[i]\\n\\n        if p == (i + 1):\\n            if tmp == 1:\\n                tmp = 0\\n            else:\\n                count += 1\\n                tmp += 1\\n        else:\\n            tmp = 0\\n\\n    print(count)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "77", "substitutes": {"n": ["pi", "o", "k", "x", "j", "c", "np", "d", "nb", "num", "s", "t", "y", "nn", "number", "nr", "u", "size", "len", "nt", "e", "f", "b", "ns", "sn", "no", "z", "l", "v", "m", "nc", "ne", "N"], "p_lst": ["p_flst", "p_llft", "p_llsp", "p_llST", "p_flsp", "p_elst", "p_flstr", "p_elsp", "p_elST", "p_flft", "p_lstr", "p_elbl", "p_flST", "p_elft", "p_lsp", "p_flbl", "p_llbl", "p_elstr", "p_lft", "p_llst", "p_lbl", "p_llstr", "p_lST"], "count": ["type", "part", "x", "c", "current", "sum", "col", "nb", "start", "diff", "int", "num", "cache", "t", "info", "test", "y", "total", "cmp", "time", "cond", "number", "last", "size", "Count", "nt", "max", "code", "stuff", "child", "counter", "v", "patch", "length", "m", "now", "temp", "call"], "tmp": ["part", "tp", "x", "j", "c", "sp", "np", "amount", "tc", "nb", "output", "a", "start", "ptr", "diff", "pos", "T", "int", "po", "t", "cache", "test", "cmp", "total", "timeout", "time", "xt", "offset", "cp", "pad", "st", "number", "treatment", "mp", "size", "len", "nt", "f", "obj", "b", "no", "pt", "emp", "P", "v", "duration", "length", "m", "now", "temp", "bp"], "i": ["pi", "o", "part", "k", "x", "xi", "j", "c", "gi", "ci", "d", "a", "start", "pos", "int", "ind", "t", "id", "y", "index", "ip", "eni", "si", "u", "iu", "pp", "e", "I", "f", "end", "ti", "b", "ai", "z", "qi", "v", "l", "ii", "m", "li", "temp"], "p": ["pi", "lp", "tp", "o", "part", "k", "x", "j", "op", "c", "sp", "np", "a", "pa", "num", "t", "y", "g", "cp", "u", "e", "f", "b", "w", "P", "l", "v", "m", "r", "temp", "bp"]}}
{"code": "L, R, d = list(map(int, input().split(\" \")))\\n\\ndiff=R//d - (L-1)//d\\n\\nprint(diff)", "target": "156", "substitutes": {"L": ["U", "D", "S", "E", "Z", "LR", "NL", "B", "T", "J", "Y", "LI", "G", "IL", "LP", "EL", "SL", " l", "Q", "Length", "X", "C", "XL", "LL", "V", "P", "l", "DL", "r", "O", "M", "F", "N", "dL"], "R": ["U", "D", "S", "Rs", "RW", "E", "RD", "RG", "RR", "B", "RH", "T", "W", "DR", "RL", "Y", "A", "G", "SR", " r", "RP", "RA", "Q", "I", "X", "C", "V", "P", "K", "r", "O", "H", "M", "F", "N", "Z"], "d": ["o", "D", "dt", "rd", "x", "j", "c", "Ds", "data", "nd", "n", "t", "i", "sd", "dy", "Diff", "g", "h", "ds", "do", "dB", "dc", "Delta", "dp", "u", "f", "e", "dd", "b", "ad", " D", "dl", "q", "w", "P", "z", "l", "v", "cd", "r", "m", "p", "ld", "dL"], "diff": ["part", "D", "distance", "data", "value", "pos", "progress", "range", "changes", "update", "info", "config", "result", "test", "Diff", "split", "change", "error", "comp", "changed", "Delta", "message", "f", "shift", " difference", "add", "ref", "iff", "l", "length", "r", "dist", "comment", "different", "mix"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\nfrom itertools import chain\\nimport numpy as np\\n\\n# from itertools import combinations as comb\\n# form bisect import bisect_left, bisect_right, insort_left, insort_right\\n# from collections import Counter\\n\\n\\ndef solve(N: int, A: \"List[int]\", B: \"List[int]\"):\\n    A = np.sort(A)\\n    B = np.sort(B)\\n    if N % 2 == 1:\\n        l = A[N // 2]\\n        r = B[N // 2]\\n        return r - l + 1\\n    else:\\n        l2 = A[N // 2 - 1] + A[N // 2]\\n        r2 = B[N // 2 - 1] + B[N // 2]\\n        return r2 - l2 + 1\\n\\n\\ndef main():\\n    tokens = chain(*(line.split() for line in sys.stdin))\\n    # N, A, B = map(int, line.split())\\n    N = int(next(tokens))  # type: int\\n    AB = np.array(list(map(int, tokens)), dtype=np.int32)\\n    A = AB[0::2]\\n    B = AB[1::2]\\n    answer = solve(N, A, B)\\n    print(answer)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "203", "substitutes": {}}
{"code": "###template###\\nimport sys\\ndef input(): return sys.stdin.readline().rstrip()\\ndef mi(): return map(int, input().split())\\n###template###\\n\\nN,A, B = mi()\\n\\nif (B-A-1)%2 == 0: print('Borys')\\nelse: print('Alice')\\n", "target": "507", "substitutes": {}}
{"code": "H = int(input())\\ncount = 0\\nwhile H != 1:\\n    H //= 2\\n    count += 1\\nans = 0\\nfor i in range(count +1):\\n    ans += 2 ** i\\nprint(ans)\\n", "target": "153", "substitutes": {"H": ["U", " h", "D", "S", "HR", "HC", "R", "E", "Hi", "HP", "B", "OH", "T", "RH", "W", "HH", "rh", "Y", "A", "G", "L", "EH", "h", "HS", "Q", "GH", "Count", "I", "X", "hi", "C", "HI", "V", "P", "K", "AH", "O", "Ch", "M", "F", "CH", "N"], "count": ["history", "type", "case", "x", "c", "sum", "old", "head", "ind", "n", "year", "rh", "depth", "cache", "num", "id", "loop", "hard", "keep", "cond", "more", "h", "ah", "parent", "index", "number", "batch", "size", "f", "Count", "default", "e", "end", "code", "max", "base", "child", "l", "found", "length", "p"], "ans": ["aves", "rs", "ls", "cycles", "case", "Ann", "S", "x", "ras", "reads", "a", "olds", "vers", "int", "n", "ens", "HH", "an", "s", "ops", "A", " means", "ches", "ams", "sk", "na", "os", "h", "blocks", "gan", "ana", "span", "can", "lines", "AN", "aned", "len", "ANS", "N", "I", "acts", "ann", "ns", "lan", "has", "books", "Na", "errors", "P", "ays", "mean", "groups", "hs"], "i": ["pi", "it", "k", "x", "xi", "j", "c", "ci", "d", " I", "a", "cli", "int", "ind", "n", "s", "ui", "ini", "t", "bi", "y", "g", "iter", "index", "ip", "si", "u", "e", "I", "f", "end", "ti", "ai", "w", "z", "chi", "v", "l", "ii", "li", "m", "p"]}}
{"code": "A, B, C = map(int, input().split())\\n\\nprint(C-(A-B)) if C-(A-B) > 0 else print(0)\\n", "target": "140", "substitutes": {"A": ["As", "U", "Ca", "NA", "Ac", "D", "S", "Java", "E", "Alpha", "a", "CA", "All", "T", "PA", "W", "mA", "IA", "At", "Y", "Az", "G", "L", "Ma", "AI", "AY", "GA", "SA", "AU", "EA", "An", "TA", "Alt", "Adam", "AP", "Average", "Ha", "I", "AA", "X", "Na", "V", "P", "API", "AH", "AC", "M", "H", "F", "N", "LA"], "B": ["U", "D", "S", "BS", "BF", "R", "IB", "E", "LB", "BB", "T", "W", "BE", "Y", "L", "G", "OB", "BI", "Q", "Bs", "DB", "WB", "I", "b", "X", "SB", "V", "P", "K", "BC", "AB", "O", "M", "F", "N", "Z"], "C": ["U", "CI", "Ca", "D", "S", "ASC", "c", "Z", "R", "E", "NC", "CA", "T", "W", "Y", "G", "L", "CU", "UC", "CCC", "JC", "Q", "SC", "X", "CW", "DC", "V", "P", "CC", "Cs", "K", "BC", "CV", "EC", "VC", "O", "AC", "M", "H", "F", "CM", "N", "CL"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\n#input\\nN, A, B = map(int, input().split())\\n\\n#output\\nM = min(A, B)\\nm = 0\\nif A+B > N:\\n    m = A+B-N\\nelse:\\n    m = 0\\n\\nprint(M, m, sep = \" \")", "target": "362", "substitutes": {"input": ["file", "type", "string", "out", "raw", "output", "data", " Input", "format", "int", "IN", "i", "key", "entry", "source", "request", "bin", "readable", "stream", " inputs", "read", "reader", "buffer", "inf", "wait", "Input", "io", "method"]}}
{"code": "n = int(input())\\n\\na = []\\nb = []\\nfor i in range(n):\\n    s = input()\\n    x = 0\\n    y = 0\\n    for c in s:\\n        if c == '(':\\n            y += 1\\n        else:\\n            if y >= 1:\\n                y -= 1\\n            else:\\n                x += 1\\n    if x < y: a.append([x, abs(x-y)])\\n    else: b.append([y, abs(x-y)])\\n\\ndef calc(a):\\n    ret = 0\\n    for x, y in sorted(a):\\n        if ret < x: return -1\\n        ret += y\\n    return ret\\n   \\nres1 = calc(a)\\nres2 = calc(b)\\nprint(\"Yes\" if res1 >= 0 and res1 == res2 else \"No\")", "target": "7", "substitutes": {"n": ["o", "k", "j", "d", "nb", "ny", "num", "t", "g", "h", "network", "nan", "nit", "len", "net", "f", "nt", "e", "ns", "no", "w", "nor", "z", "l", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "access", "o", "input", "aw", "ar", "d", "ama", "ac", "ab", "art", "af", "da", "an", "array", "A", "g", "sa", "ana", "ia", "aa", "u", "va", "f", "e", "am", "ad", "ca", "ans", "ga", "ai", "w", "ae", "aaa", "z", "ba", "l", "ea", "aj", "m", "r", "p", "au"], "b": ["o", "eb", "mb", "pb", "db", "d", "ob", "nb", "ab", "B", "bd", "bis", "xb", "rb", "bs", "g", "fb", "h", "ib", "wb", "lb", "e", "f", "end", "base", "sb", "w", "be", "orb", "l", "v", "r", "m", "bb", "bf", "p"], "i": ["k", "j", "d", "yi", "col", "ind", "t", "id", "h", "ct", "ix", "index", "ip", "u", "f", "e", "I", "code", "unc", "q", "w", "z", "r", "nc", "p"], "s": ["states", "ls", "S", "sin", "d", "ins", "ses", "ws", "start", "ss", "opens", "ops", "ows", "t", "cs", "ches", "g", "sa", "rows", "gs", "lines", "sq", "si", "u", "sets", "f", "e", "sym", "ns", "ans", "es", "sb", "w", "z", "v", "l", "sc", "r", "xs", "se", "p"], "x": ["ey", "wy", "k", "ya", "xi", "px", "xp", "cy", "d", "xy", "lex", "pos", "int", "t", "id", "dy", "width", "on", "na", "g", "ax", "h", "yx", "ay", "sex", "rx", "xt", "ix", "index", "ex", "xc", "u", "e", "f", "dx", "one", "X", "xx", "max", "wx", "no", "yy", "w", "z", "v", "l", "r", "m", "xs", "p"], "y": ["ey", "type", "o", "wy", "sy", "ya", "j", "cy", "d", "yi", "yn", "oy", "xy", "ky", "ry", "ny", "yo", "year", "re", "Y", "ye", "t", "zy", "yr", "dy", "ty", "h", "ay", "ym", "py", "yt", "u", "f", "e", "ys", "xx", "yd", "yy", "w", "z", "v", "m", "p", "vy"], "c": ["k", "d", "col", "ac", "bc", "t", "cs", "ec", "g", "h", "abc", "ct", "cin", "dc", "ach", "xc", "u", "e", "f", "code", "unc", "C", "arc", "lc", "l", "ic", "pc", "sc", "v", "m", "oc", "nc", "p", "r"], "ret": ["exit", "success", "out", "_", "det", "max", "alt", "xy", "rets", "ry", "RET", "int", "year", "re", "fun", "all", "num", "t", "reg", "result", "fin", "id", "test", "get", "rt", "ty", "val", "en", "job", "rep", "py", "bit", "eval", "reply", "len", "pre", "f", "mat", "nt", "res", "opt", "match", "resp", "reset", "rec", "fit", "rev", "code", "no", "Ret", "default", "z", "ref", "cat", "r", "arg"], "res1": ["resultOne", "ret2", " res0", "Res0", " res4", "resOne", "Res2", "Res3", " results1", " resOne", " res3", "retOne", "result1", "result2", "results2", "res3", "ret1", "results0", "res0", "Res1", " results4", " resultsOne", "results1", "result4", "res4", "ResOne", "results3", " results2"], "res2": ["exp1", "recTwo", "rec2", " res4", " resTwo", "exp4", "Res2", "exptwo", "results4", "Res3", " res3", "exp2", "ResTwo", "results2", "resTwo", "resultstwo", "res3", " restwo", "restwo", "Res1", "rec3", "results1", "res4", "rec1"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\na,b,c,k = list(map(int,input().split()))\\nif k<a:\\n    print(k)\\n\\nelif k<=a+b:\\n    print(a)\\nelse:\\n    print(a-1*(k-a-b))\\n", "target": "174", "substitutes": {"input": ["type", "out", "feed", "param", "argument", "raw", "output", "data", " Input", "format", "expression", "submit", "int", "n", " output", "view", "option", "array", " int", "config", "enter", "i", "key", "keep", "entry", "source", "request", "bin", "error", " inputs", "run", "f", "exec", "help", "reader", "reset", "select", "l", "accept", "str", "conf", "Input", "until", "p", "form", "method"], "a": ["area", "auto", " pa", "x", " fa", "aw", "d", "ak", "ac", "ab", " action", "af", "n", "da", "an", "s", "A", "i", "y", "alpha", "ka", "na", "sa", "qa", "offset", " na", "ks", "index", "aa", " an", "u", "va", "e", "f", "ad", "ca", "am", "ga", "ai", "ae", "w", "aaa", "ba", "z", "p", " A", "count", "au"], "b": ["x", "pb", "j", "d", "nb", "ab", "B", "n", "rb", "A", "bi", "i", "y", "bs", "bar", "g", "h", "fb", "ib", "aa", "wb", "u", "e", "f", "ad", "base", "sb", "w", "z", "ba", "v", "l", "bb", "r", "p"], "c": ["x", "ci", "d", "ak", "cb", "cmd", "ac", "uc", "n", "ck", "cc", "ce", "ch", "y", "abc", "dc", "u", "e", "f", "ad", "code", "ca", "C", "w", "z", "cr", "m", "p"], "k": ["ik", "o", "ke", "x", "kk", "j", "kat", "d", "ak", "ky", "ac", "n", "ck", "ek", "num", "kick", "i", "y", "key", "alpha", "sk", "g", "unk", "ok", "ks", "uk", "dk", "ko", "u", "f", "e", "ask", "ad", "ki", "q", "kw", "K", "v", "m", "bb", "p", "ka"]}}
{"code": "l = list(input().split())\\nprint(\"{}{}{}\".format(l[0][0],l[1][0],l[2][0]))\\n", "target": "324", "substitutes": {"l": ["el", "lp", "ls", "o", "k", "ol", "wl", "j", "ul", "c", "left", "kl", "lo", "ell", "sl", "n", "s", "list", "ll", "t", "L", "i", "split", "url", "shell", "line", "nl", "lines", "la", "il", "u", "e", "rl", "f", "b", "pl", "dl", "z", "lc", "v", "li", "m", "r", "ln", "p"]}}
{"code": "n = int(input())\\n\\nprice = {1}\\nfor i in range(1, 100):\\n    tmp = 6**i\\n    if tmp > 10**5:\\n        break\\n    price.add(tmp)\\n\\nfor i in range(1, 100):\\n    tmp = 9**i\\n    if tmp > 10**5:\\n        break\\n    price.add(tmp)\\n\\nprice = list(price)\\nprice.sort(reverse=True)\\n\\nINF = 1 << 60\\n\\ndp = [INF] * 2 * 10**5\\ndp[0] = 0\\ndp[1] = 1\\n\\nfor i in range(n + 1):\\n    for p in price:\\n        dp[i + p] = min(dp[i] + 1, dp[i + p])\\n\\nprint(dp[n])", "target": "460", "substitutes": {"n": ["o", "cn", "k", "x", "j", "c", "np", "nm", "nb", "ny", "num", "t", "y", "nw", "g", "h", "network", "nn", "number", "nu", "u", "net", "f", "nt", "fn", "e", "b", "ns", "pn", "sn", "no", "w", "init", "z", "v", "l", "m", "r", "nc", "ne", "N"], "price": ["frame", "df", "currency", "grade", "product", "exp", "buy", "market", "Price", "sp", "cycle", "er", "tc", "point", "shop", "options", "output", "data", "start", "value", "transfer", "pos", "offer", "option", "per", "range", "fine", "cost", "time", "div", "count", "date", "version", "change", "period", "cp", "line", "quote", "pr", "next", "address", "e", "flow", "pie", "code", "base", "fit", "seed", "limit", "seller", " prices", "q", "position", "vol", "v", "fee", "duration", "company", "str", "order", "req", "pe", "money", "trade", "rate", "priced"], "i": ["mini", "pi", "di", "it", "o", "k", "x", "xi", "j", "c", "gi", "sp", "ci", "d", "yi", "phi", "oi", "ri", "a", "lo", "int", "ind", "s", "ini", "ui", "t", "id", "y", "h", "index", "ip", "wei", "si", "u", "iu", "f", "ti", "I", "e", "b", "mu", "mi", "inf", "ai", "z", "chi", "qi", "v", "l", "ii", "li", "m", "r", "abi", "zi"], "tmp": ["wp", "pi", "tp", "loc", "dt", "kk", "c", "sp", "np", "amount", "tc", "phi", "nb", "output", "cb", "start", "const", "mult", "pos", "int", "vt", "var", "t", "margin", "rb", "pkg", "cmp", "total", "timeout", "api", "fb", "offset", "cp", "tt", "ffff", "beta", "next", "source", "treatment", "mp", "nom", "pre", "nt", "opt", "pot", "stuff", "emp", "yy", "attr", "duration", "txt", "small", "temp", "bp", "money", "elt", "fp"], "INF": ["InV", "INFD", "ANFD", " INV", "inN", "UNFE", "ANF", " INFD", "INV", "InFD", "InN", "inFD", "InF", "INFE", "inFE", "inF", " INN", "UNV", "INN", "ANFE", "ANV", "UNF", "UNFD", "inV"], "dp": [" disp", "wp", "pi", "lp", "df", "tp", "dt", "pid", "grade", "dos", "pb", "px", "pg", "db", "sp", "d", "port", "point", "data", " ratio", "pair", "queue", "pos", "vp", "hp", "po", "DP", "pkg", " cp", "cmp", "dim", "ds", "dh", "cp", "dr", "rep", "pr", "dc", "ip", "pp", "address", "dep", " dep", " prod", " DP", "dl", " tcp", "P", "dm", "pm", "params", "duration", "grad", "deb", " df", "gp", "fp"], "p": ["pi", "it", "o", "tp", "lp", "x", "j", "c", "d", "point", "phi", "a", "int", "pa", "all", "per", "num", "t", "y", "h", "change", "pr", "ip", "u", "pp", "f", "e", "b", "code", "q", "pm", "P", "w", "z", "pu", "l", "v", "pc", "m", "bp"]}}
{"code": "s = [len(x) for x in input().split('T')]\\nx, y = map(int, input().split())\\n\\nX = set([s[0]])\\nY = set([0])\\n\\nfor dx in s[2::2]:\\n    tX = set()\\n    for Xi in X:\\n        tX.add(Xi-dx)\\n        tX.add(Xi+dx)\\n    X = tX\\n\\nfor dy in s[1::2]:\\n    tY = set()\\n    for Yi in Y:\\n        tY.add(Yi-dy)\\n        tY.add(Yi+dy)\\n    Y = tY\\n\\nif x in X and y in Y:\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "753", "substitutes": {"s": ["states", "ls", "parts", "services", "forms", "S", "sync", "ings", "c", "d", "ws", "ins", "ses", "a", "ss", "times", "n", "qs", "t", "strings", "i", "g", "os", "comments", "ds", "ts", "ids", "keys", "ks", "gs", "lines", "si", "sets", "e", "sym", "f", "ys", "b", "ps", "ns", "ans", "es", "w", "z", "v", "l", "m", "xs", "its", "words", "p"], "x": ["xp", "xi", "px", "c", "d", "xy", "event", "pair", "int", "ux", "n", "ye", "t", " xx", "i", "id", "tx", "test", "time", "xa", "ax", "h", "xt", "sex", "xe", "rx", "yx", "ay", "ix", "index", "ox", "fx", "rax", "ex", "xc", "u", "size", "e", "f", "xd", "b", "xx", "xf", "zx", "xes", "w", "z", "v", "cross", "m", "xs", "p"], "y": ["ey", "type", "o", "iy", "xi", "j", "cy", "c", "d", "yi", "yn", "oy", "a", "ie", "ry", "n", "year", "yl", "zy", "t", "ye", "i", "gy", "ay", "ym", "ies", "iny", "yt", "size", "e", "f", "b", "yd", "uy", "yy", "w", "z", "l", "m", "p", "vy"], "X": ["U", "D", "S", "ZX", "Width", "FX", "Ax", "Time", "Do", "E", "XX", "XT", "Zip", "Data", "T", "Day", "ux", "W", "Path", "A", "L", "DX", "String", "DD", "Single", "Size", "File", "Ex", "Q", "Work", "UX", "Left", "WS", "Sex", "Length", "I", "Tx", "XY", "C", "XL", "DC", "TX", "Cross", "V", "ML", "P", "XP", "K", "Sax", "MX", "XXX", "H", "M", "F", "XM", "CE", "N", "Z"], "Y": ["NY", "U", "Gy", "D", "Ky", "S", "Py", "E", "Cy", "Do", "Ly", "Ray", "B", "Data", "T", "W", "J", "Type", "Long", "A", "G", "L", "Poly", "Size", "IP", "YC", "Q", "Year", "Hy", "I", "XY", "My", "C", "IE", "Zone", "V", "TY", "P", "Ye", "YA", "Ry", "M", "YY", "Python", "N", "Z"], "dx": ["di", "yu", "fy", "dt", "distance", "xp", "Dist", "xi", "px", "ci", "d", "yi", "xy", "du", "ux", "ye", "DX", "tx", "nw", "xa", "yx", "ax", "xe", "ds", "dfx", "rx", "ix", "fx", "dc", "py", "sq", "ex", "xc", "xd", "xx", "hi", "zx", "wx", "dj", "dm", "z", "dn", "cross", "dist", "ei", "dq", "zi"], "tX": ["fX", "dtXi", "tx", " tXi", "tXi", "TXL", "tXL", "fx", "dtX", "tmY", "TI", "fXi", "Tx", "dtx", "TX", "TXi", "TY", "fY", "tmX", "tmI", "dtY", "fXL", "tI", " tI", " tx", " tXL"], "Xi": ["pi", "Ca", "Ti", "Ky", "cyl", "xi", "Ru", "Je", "Py", "ci", "Cy", "yi", "phi", "Hi", "Ka", "Ge", "Yu", "Si", "Gi", "Ni", "DX", "i", "yx", "Pi", "Co", "PI", "Yo", "DI", "Delta", "Fi", "Tx", "Li", "XY", "Wi", "Chris", "Ne", "Ey", "z", "chi", "ii", "Cu", "Ry", "Mi", "ei", "zi"], "dy": ["ey", "di", "yu", "Gy", "wy", "fy", "D", "hy", "iy", "sy", "dt", "xi", "ci", "d", "xy", "oy", "eddy", "ky", "ry", "du", "ny", "yz", "zy", "ye", "vy", "ni", "yr", "gy", "ds", "phy", "ym", "fx", "py", "yt", "hi", "zx", "yd", "uy", "yy", "dj", "dn", "ii", "idy", "ei", "ji", "yer", "dq", "zi", "yah"], "tY": ["pY", "lE", "lI", "taYC", "pPy", "lX", "tRy", "yN", "TE", "tYC", "TPy", "TYC", "tE", "tzX", "templatePy", "yIE", " tN", "tN", "yPy", " tIE", "lY", "yY", "tzRy", "TI", "templateX", "pN", " tPy", "TX", "pIE", "tIE", "TY", "taX", "templateY", "tPy", " tE", "TRy", "taY", "tzY", "taRy", "tzYC", "tI", " tI"], "Yi": ["Pu", "WI", "yu", "II", "Jd", " Yu", " Ysi", "yi", "Iini", "Nini", " Ydi", "Ji", "Ni", " Yd", "Ysi", "Nd", "Yy", "Wd", "yI", "Pi", " YI", "Iy", "PI", "Ii", "YI", "JI", "Id", "Wi", "Jy", "Wy", "Isi", "ydi", "Yd", "Ydi", "Nsi", "Yini", "Pdi", "Yu", " Yini"]}}
{"code": "s=input()\\n \\nif s in [\"RRR\"]:\\n  print(3)\\nelif s in [\"RRS\",\"SRR\"]:\\n  print(2)\\nelif s in [\"RSS\",\"SRS\",\"SSR\",\"RSR\"]:\\n  print(1)\\nelse:\\n  print(0)", "target": "482", "substitutes": {"s": ["states", "ls", "o", "string", "S", "ssl", "su", "c", "d", "ins", "ses", "a", "sys", "ss", "als", "n", "abs", "args", "sts", "ops", "t", "ats", "login", "i", "y", "rss", "g", "os", "comments", "ts", "ds", "source", "gs", "bin", "lines", "sf", "stat", "sets", "spec", "f", "e", "sym", "ps", "sb", "w", "sv", "params", "ic", "sg", "conf", "r", "ser", "stats", "groups", "p"]}}
{"code": "N = int(input())\\nS = input()\\ntotal = S.count(\"R\") * S.count(\"G\") * S.count(\"B\")\\nsub = 0\\nfor i in range(N):\\n    for j in range(i + 1, N):\\n        if S[i] == S[j]:\\n            continue\\n        h = j + j - i\\n        if h > N - 1 or S[j] == S[h] or S[h] == S[i]:\\n            continue\\n        sub += 1\\nprint(total - sub)", "target": "294", "substitutes": {"N": ["ND", "NA", "D", "R", "NS", "NL", "NE", "B", "Ns", "T", "n", "J", "Y", "Ni", "G", "L", "Len", "Num", "NT", "Size", " n", "Q", "I", "X", "C", "Ne", "V", "P", "K", "O", "H", "M", "F", "Z"], "S": ["SE", "U", "SH", "SO", "D", "GS", "Sub", "SS", "R", "NS", "E", "RS", "US", "JS", "ss", "B", "Sing", "Ns", "T", "TS", "W", "J", "Si", "F", "s", "OSS", "Y", "A", "G", "L", "SI", "Sa", "String", "SN", "AS", "Single", "INS", "POS", "Services", "PS", "Q", "Os", "I", "Socket", "X", "State", "SU", "C", "IS", "V", "OS", "P", "Sl", "K", "Service", "O", "H", "M", "SL", "FS", "Set"], "total": ["mini", "pi", "part", "full", "fat", "partial", "c", "current", "Total", "scale", "sum", "complete", "n", "all", "t", "body", "parent", "big", "set", "py", "null", "dot", "basic", "final", "net", "size", "nt", "f", "sup", " Total", "pl", "summary", "ai", "sh", "chi", "length", "li", "count"], "sub": ["mini", "sec", "log", "part", "loc", "Sub", "exp", "c", "prev", "hide", "sum", "short", "ab", "section", "a", "diff", "bh", "bc", "uc", "ub", "s", "ch", "suff", "id", "split", "ah", "ib", "job", "beta", "error", "sq", "seq", "size", "len", "f", "b", "SU", "hi", "child", "summary", "ai", "sh", "sc", "length", "sim", "small", "sing", "count", " Sub"], "i": ["pi", "o", "ji", "k", "x", "c", "ci", "d", "a", "ie", "start", "ind", "n", "J", "s", "ini", "ui", "ni", "id", "y", "ij", "index", "si", "u", "iu", "e", "I", "f", "ti", "b", "end", "hi", "im", "ai", "z", "v", "l", "ii", "li", "m", "r", "ih", "p"], "j": ["ji", "o", "k", "x", "c", "d", "a", "start", "oj", "n", "J", "ind", "s", "y", "g", "min", "ij", "job", "index", "jl", "jo", "si", "u", "size", "ja", "e", "je", "obj", "I", "f", "jj", "b", "end", "q", "w", "z", "v", "jp", "aj", "ii", "li", "l", "r", "m", "p", "uj"], "h": ["o", "k", "x", "oh", "c", "d", "a", "bh", "n", "rh", "s", "ch", "id", "y", "ph", "g", "ah", "hd", "hh", "ij", "u", "f", "e", "end", "b", "hi", "ho", "q", "sh", "gh", "w", "z", "v", "l", "ii", "r", "m", "H", "p", "hs", "count"]}}
{"code": "\\nN, K = map(int, input().split())\\n\\nMOD = 10 ** 9 + 7\\ncount = [0] * (N + 1)\\nfor i in range(1, N + 1):\\n    count[i] += count[i - 1] + i\\n    count[i] %= MOD\\n\\nans = 1\\nfor k in range(K, N + 1):\\n    ans += count[-1] - count[-k - 1] - count[k - 1] + 1\\n    ans %= MOD\\nprint(ans)\\n", "target": "425", "substitutes": {"N": ["U", "NA", "D", "S", "R", "NS", "E", "NC", "NE", "B", "Ns", "T", "n", "W", "J", "Y", "Ni", "L", "G", "Len", "Num", "NT", " n", "Size", "Q", "Count", "I", "X", "C", "Ne", "V", "P", "KN", "O", "H", "M", "F", "Z"], "K": ["U", "KI", "KR", "D", "IK", "S", "SK", "E", "B", "KE", "T", "J", "Y", "NK", "L", "G", "KK", "Q", "I", "X", "C", "V", "P", "KN", "Sk", "KB", "KS", "O", "H", "M", "F", "Z"], "MOD": ["RC", "MAG", "ARM", "CD", "OD", "R", "COR", "XX", "REG", "FD", "LR", "UN", "mult", "MER", "LOD", "mod", "MAC", "AD", "DIV", "CNN", "DD", "SIZE", "RM", "SPEC", "ED", " mod", "MED", "LOG", "MAX", "ROM", "MODE", "AN", "Mods", "Length", "Count", "ORD", "X", " Mod", "C", "Mod", "NUM", "DEC", "MIN", "CC", "ALL", "CR", "SIM", "JUST", "ADD", "M", "CM", "LOC", "Z"], "count": ["core", "log", "part", "depth", "case", "c", "low", "d", "current", "sum", "col", "a", "ac", "only", "start", "data", "name", "ind", "n", "all", "s", "cc", "cache", "array", "list", "ch", "info", "id", "weight", "range", "time", " counts", "cond", "h", "self", "index", "cm", "number", "error", "age", "agg", "size", "len", "process", "Count", "e", "max", "f", "b", "code", "group", "base", "C", "support", "match", "child", "q", "content", "state", "z", "l", "mean", "length", "conf", "order", "p", "rank", "call"], "i": ["ik", "pi", "di", "o", "x", "xi", "j", "gi", "c", "ci", "d", "oi", "a", "ie", "start", "ori", "int", "ind", "n", "ini", "ui", "ni", "bi", "id", "y", "g", "ij", "ix", "index", "ip", "multi", "si", "u", "iu", "e", "I", "f", "b", "mi", "im", "ai", "z", "p", "qi", "v", "l", "ii", "li", "m", "r", "io"], "ans": ["ls", "part", "x", "std", "aning", "ags", "ras", "ins", "sum", "a", "ars", "ants", "ss", "any", "n", "an", "ads", "s", "anc", "man", " means", "A", "cs", "sk", "CNN", "na", "os", "ms", "ds", "gan", "ks", "ana", "unks", "span", "can", "cons", "AN", "atan", "aned", "\u03b1", "len", "ANS", "ann", "lan", "ns", "am", "ad", "support", "includes", "ani", "ai", "ace", "sam", "ons", "arms"], "k": ["ik", "o", "kn", "ke", "x", "kk", "_", "j", "c", "kl", "n", "mk", "ck", "s", "y", "sk", "unk", "h", "ok", "ks", "km", "ko", "u", "f", "e", "b", "ki", "q", "kw", "z", "l", "v", "m", "p", "ka"]}}
{"code": "h, w = map(int, input().split())\\n\\n\\ntable = {}\\nfor i in range(h):\\n    a = input()\\n    for c in a:\\n        if c not in table:\\n            table[c] = 1\\n        else:\\n            table[c] += 1\\n\\nmod0 = []\\nmod1 = []\\nmod2 = []\\nmod3 = []\\nfor key, value in table.items():\\n    if value % 4 == 0:\\n        mod0.append(key)\\n    elif value % 4 == 1:\\n        mod1.append(key)\\n    elif value % 4 == 2:\\n        mod2.append(key)\\n    else:\\n        mod3.append(key)\\n\\n\\nif w % 2 == 0 and h % 2 == 0:\\n    if len(mod1) > 0 or len(mod2) > 0 or len(mod3) > 0:\\n        print(\"No\")\\n    else:\\n        print(\"Yes\")\\n\\nelif w % 2 == 0 or h % 2 == 0:\\n    if h % 2 == 0:\\n        w, h = h, w\\n\\n    if w // 2 < len(mod2):\\n        print(\"No\")\\n    elif len(mod1) > 0 or len(mod3) > 0:\\n        print(\"No\")\\n    else:\\n        print(\"Yes\")\\nelse:\\n    if len(mod1) == 1 and len(mod2) <= (h + w - 1) // 2:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\n", "target": "188", "substitutes": {"h": ["o", "ha", "k", "x", "oh", "hw", "hours", "d", "ht", "bh", "wa", "n", "W", "rh", "s", "t", "y", "ph", "sw", "g", "ah", "wh", "hh", "th", "how", "host", "u", "f", "e", "hr", "b", "hi", "q", "uh", "sh", "z", "l", "v", "hm", "m", "r", "H", "he", "ih", "p", "hs", "count"], "w": ["o", "iw", "k", "fw", "x", "wl", "wan", "hw", "aw", "d", "ws", "wa", "W", "n", "ww", "wt", "t", "weight", "wd", "y", "nw", "width", "sw", "g", "we", "ow", "win", "ew", "rw", "wb", "f", "max", "b", "wx", "q", "sh", "z", "v", "l", "m", "wh", "p"], "table": ["file", "part", "this", "package", "input", "db", "page", "container", "phi", "col", "data", "section", "Table", "view", "able", "list", "array", "cache", "tab", "database", "TABLE", "test", "body", "transform", "sa", "query", "source", "tmp", "index", "batch", "model", "row", "aa", "f", "e", "tree", "obj", "b", "stable", "code", "buffer", "module", "v", "bb", "txt", "m", "order", "p", "temp", "count"], "i": ["k", "x", "j", "d", "ctx", "col", "ac", "bc", "ind", "n", "id", "y", "ct", "co", "index", "cu", "xc", "e", "I", "f", "q", "z", "chain", "lc", "li", "r", "nc", "p"], "a": ["area", "ha", "aw", "ab", "ac", "section", "af", "n", "all", "an", "array", "A", "fa", "y", "alpha", "sa", "index", "aa", "va", "f", "e", "b", "ad", "ca", "am", "code", "ga", "ae", "aaa", "ba", "ea", "aj", "m", "p", "au"], "c": ["case", "cn", "k", "x", "cy", "ci", "d", "cycle", "current", "col", "ac", "int", "n", "cc", "s", "t", "y", "g", "abc", "ct", "index", "dc", "cu", "xc", "u", "f", "e", "b", "code", "C", "q", "ae", "z", "chain", "lc", "l", "v", "cat", "m", "cr", "r", "nc", "cf", "p", "category", "cl", "count"], "mod0": ["Mod3", "Mod2", "Mod1", "Mod0", "module1", "module3", "module2", "module0"], "mod1": ["Mod2", "modn", "common4", " mod4", "m1", "comp4", "form4", "form1", " modb", "comp2", "mac1", "comp0", "common1", "formn", "step1", "m2", "Mod1", "stepb", " modn", "mod4", "modb", "ModOne", "common2", "step2", "compn", " modOne", "comp3", "mac3", "stepOne", "Modb", "comp1", "form2", "m3", "mac2", "mac4", "common3", "m0", "modOne", "form3"], "mod2": ["Mod2", " mod4", "comp4", "comp5", "form1", "comp2", "mode2", "comp0", "MOD1", "modTwo", "Mod3", "mode3", "Mod1", "Mod0", "mod4", "mod5", "form0", "Mod4", "module2", "MODTwo", "comp3", "module5", "mode4", "comp1", "MOD4", "module4", "form2", "MOD2", "module1", "mode1", "module3", "ModTwo", " mod5", "form3", " modTwo"], "mod3": ["Mod2", " mod4", "comp2", "Mod3", "Mod1", "Mod0", "model3", "module0", "Mod5", "mod4", "mod5", "Mod4", "model1", "module2", "comp3", "module5", "model2", "comp1", "moduleThree", "module4", "MOD3", "MOD5", "MOD2", "module1", "module3", " mod5", "modThree", " modThree", "MODThree"], "key": ["core", "step", "type", "field", "case", "k", "element", "phrase", "x", "mac", "j", "xy", "point", "col", "name", "pair", "ry", "ie", "section", "rule", "int", "switch", "year", "go", "info", "root", "y", "entry", "life", "val", "keys", "index", "ip", "row", "char", "item", "f", "code", "match", "my", "pick", "seed", "member", "link", "volume", "child", "q", "v", "Key", "m", "r", "KEY", "p"], "value": ["core", "type", "string", "field", "case", "element", "x", "attribute", "object", "reference", "current", "pair", "data", "section", "name", "variable", "record", "media", "option", "Value", "range", "wave", "entry", "val", "version", "change", "parent", "index", "null", "number", "function", "message", "item", "iv", "size", "default", "resource", "one", "values", "term", "child", "volume", "no", "position", "content", "v", "length", "money"]}}
{"code": "import bisect\\ns = input()\\nt = input()\\nn = len(s)\\nm = len(t)\\nindices = [[] for _ in range(26)]\\nfor i in range(n):\\n    indices[ord(s[i]) - ord('a')].append(i)\\nfor i in range(n):\\n    indices[ord(s[i]) - ord('a')].append(i + n)\\n\\nans = 0\\np = 0\\nfor i in range(m):\\n    c = ord(t[i]) - ord('a')\\n    if len(indices[c]) == 0:\\n        print(-1)\\n        exit()\\n    p = indices[c][bisect.bisect_left(indices[c], p)] + 1\\n    if p >= n:\\n        p -= n\\n        ans += n\\nans += p\\nprint(ans)", "target": "138", "substitutes": {"s": [" es", "o", "services", "S", "ings", "x", " starts", "j", "sin", "sp", "d", "a", "start", " splits", " ops", " ls", "ss", " sets", " spans", "strings", "y", " source", " slices", "g", " cs", " self", "h", "sa", " x", "ts", "self", "os", " pairs", "source", " index", "si", "u", "sets", "f", "e", "b", "ments", "ns", "es", "w", "z", " scans", " positions", "l", " codes", "r", "v", " ads"], "t": ["o", "tp", "at", "type", "dt", "out", "x", "j", "d", "a", "T", "ot", "y", "test", "g", "h", "ts", "tools", "table", "u", "f", "e", "b", "new", "pt", "w", "ta", "z", "l", "v", "r", "temp", "token"], "n": ["core", "o", "cn", "k", "err", "x", "j", "d", "np", "yn", "nb", "a", "pos", "ind", "all", "an", "num", "non", "ni", "y", "mn", "na", "g", "en", "nan", "nn", "un", "gener", "u", "len", "size", "f", "e", "rn", "b", "ns", "code", "neg", "sn", "no", "w", "nor", "z", "dn", "l", "v", "nc", "don", "ne", "N"], "m": ["mini", "o", "mode", "mc", "k", "x", "j", "d", "an", "y", "mn", "g", "en", "cm", "len", "f", "e", "b", "mi", "mm", "im", "pm", "w", "z", "l", "v", "r", "M", "km"], "indices": ["indicates", "ordians", "innices", "nicates", "endences", "endice", "posicates", "ordicates", "nodes", "indexicates", "indodes", "indians", "inodes", "idxs", " indinters", "indences", "intices", "nitions", "idaces", "predxs", " indice", " indences", "endices", "intians", "vertians", "vertice", "indxs", "indexones", "verticates", "innaces", "nices", "indexices", "idents", " inditions", "initions", "Indents", "inditions", "Indice", "inticates", "predaces", " indones", "posents", "intitions", "Indences", "indexice", "indents", "inicates", "innxs", "indinters", "inices", "intice", "indice", "vertitions", "indexents", "posice", "predents", "endones", "vertinters", "Indices", "vertences", "ordices", "intodes", "posices", "Indinters", "idices", "Inditions", "ordice", "indones", "innents", "Indicates", "predices", "indaces", "indexences", "vertices"], "_": ["x", "all", "num", "id", "g", "en", " x", "len", "f", "l"], "i": ["mini", "pi", "di", "o", "uri", "it", "k", "x", "xi", "j", "ci", "yi", "ri", "oi", "a", "io", "ie", "ori", "int", "ind", "ui", "ini", "ni", "bi", "id", "y", "ix", "index", "ip", "eni", "si", "u", "iu", "e", "ti", "I", "f", "b", "end", "ai", "z", "qi", "l", "v", "ii", "ic", "li", "ei"], "ans": ["ls", "anus", "aning", "np", "ins", "anks", "ases", "a", "ations", "ars", "ants", "pos", "amps", "args", "an", "ops", "A", "anc", "ats", " means", "cs", "oss", "ents", "anon", "na", "os", "aks", "plan", "ikes", "ips", "ks", "nan", "ana", "span", "can", "anes", "AN", "aned", "pp", "ANS", "activation", "ann", "ps", "ns", "ices", "ends", "ions", "aces", "P", "ano", "ays", "ones", "eps", "aus", "ons"], "p": ["wp", "lp", "pi", "tp", "o", "at", "x", "j", "op", "sp", "np", "d", "point", "a", "pos", "pa", "an", "po", "bp", "ping", "y", "api", "cp", "pr", "ip", "dp", "u", "pre", "e", "pp", "b", "ps", "pn", "q", "w", "P", "ep", "v", "jp", "l", "pc", "r", "ap", "pe", "fp"], "c": ["cur", "o", "x", "cy", "ci", "d", "ac", "a", "uc", "center", "ce", "ch", "cache", "cs", "y", "ec", "con", "ct", "dc", "cu", "u", "xc", "f", "e", "b", "code", "ca", "arc", "C", "cr", "l", "lc", "sc", "pc", "v", "cl"]}}
{"code": "n,l = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nsumax=0\\nfor i in range(n-1):\\n    if sumax < a[i]+a[i+1]:\\n        sumax=a[i]+a[i+1]\\n        ind=i\\n\\nif sumax < l:\\n    print(\"Impossible\")\\n    exit()\\n\\nprint(\"Possible\")\\n\\nfor i in range(1,n):\\n    if i>ind:\\n        break\\n    print(i)\\n\\nfor i in reversed(range(n)):\\n    if i==ind:\\n        break\\n    print(i)", "target": "154", "substitutes": {"n": ["o", "k", "x", "j", "c", "np", "d", "nb", "name", "num", "t", "ni", "y", "h", "nn", "nl", "nu", "u", "len", "net", "e", "nt", "f", "fn", "b", "ns", "sn", "w", "z", "v", "m", "nc", "ln", "p", "ne", "N"], "l": ["el", "ls", "o", "k", "ol", "j", "c", "d", "kl", "fl", "ll", "L", "g", "h", "nl", "u", "len", "f", "e", "b", "z", "v", "lc", "length", "m", "li", "ln", "p"], "a": ["ma", "area", "auto", "at", "x", "input", "c", "aw", "d", "ab", "ac", "int", "args", "an", "s", "list", "A", "array", "y", "alpha", "na", "sa", "index", "aa", "la", "u", "va", "f", "e", "b", "am", "ad", "ca", "ga", "ai", "ae", "w", "aaa", "ea", "aj", "ao", "m", "p"], "sumax": ["SumAX", " sumfrac", "sumfrac", " sumAX", "Sumac", "memAX", "sumak", "umax", "sumac", " summaj", " sumx", "meanAX", "Sumx", "calax", "umfrac", " sumac", "sumx", "memax", " sumak", "calak", "memx", " sumaj", "memaj", "Sumax", " summax", "sumAX", "calx", " summAX", " summx", "meanx", "umac", "umx", "sumaj", "umak", "calac", "umAX", "meanfrac", "meanax"], "i": ["mini", "pi", "di", "uri", "o", "it", "ji", "x", "xi", "j", "gi", "c", "anti", "ci", "yi", "ri", "phi", "ie", "start", "ori", "int", "ini", "ui", "ni", "bi", "id", "y", "info", "api", "ix", "index", "ip", "multi", "eni", "si", "iii", "u", "iu", "e", "ti", "I", "f", "b", "im", "ai", "z", "p", "qi", "v", "ii", "li", "m", "io", "zi"], "ind": ["Ind", "loc", "o", "x", "j", "append", "ci", "d", "find", "old", "start", "nd", "int", "ini", "inc", "id", "inner", "inn", "ident", "nn", "index", "pp", "nt", "e", "end", "adj", "ad", "ann", "inf", "IND", "ani", "init", "z", "p", "qi", "add", "ii", "ln", "ld", "ill", "count"]}}
{"code": "# coding:utf-8\\nn = int(input())\\ns = [int(input()) for _ in range(n)]\\ns.sort()\\nans = sum(s)\\n\\nif ans % 10 != 0:\\n    print(ans)\\n    exit()\\nelse:\\n    for i in range(n):\\n        if s[i] % 10 != 0:\\n            ans -= s[i]\\n            if ans % 10 != 0:\\n                print(ans)\\n                exit()\\nprint(0)\\n", "target": "741", "substitutes": {}}
{"code": "#\u30b0\u30e9\u30d5\u306e\u9023\u7d50\u6210\u5206\u3092\u8abf\u3079\u308b\\ndef Graph(ab):\\n    G=[[] for i in range(n)]\\n    for a,b in ab:\\n        G[a-1].append(b)\\n        G[b-1].append(a)\\n    return G\\n\\n#BFS\\nfrom collections import deque\\ndef bfs(G, v, p):\\n    point = [0] * n\\n    q=deque()\\n    q.append((v, p))\\n    point[0] = c.pop(0)\\n\\n    score = 0\\n    while q:\\n        #q\u306e\u5148\u982d\u3092\u53d6\u308a\u51fa\u3059\\n        V, P = q.popleft()\\n        for next_v in G[V - 1]:\\n            if next_v == P:continue\\n            q.append((next_v, V))\\n            temp = c.pop(0)\\n            score += temp\\n            point[next_v - 1] = temp\\n\\n    return point, score\\n\\nn = int(input())\\nab = [list(map(int,input().split())) for i in range(n - 1)]\\nc = list(map(int,input().split()))\\nc = sorted(c, reverse=True)\\nG = Graph(ab)\\n\\npoint, score = bfs(G, 1, -1)\\nprint(score)\\nprint(*point)", "target": "364", "substitutes": {}}
{"code": "n, a = map(int, [input() for i in range(2)])\\n\\nprint(n ** 2 - a)", "target": "379", "substitutes": {"n": ["o", "k", "x", "c", "d", " N", "nb", "ab", "num", "an", "A", "y", "count", "min", "h", "nan", "number", "net", "len", "f", "fn", "nt", "e", "b", "ns", "z", "v", "l", "m", "nc", "p", "ne", "N"], "a": ["area", "c", "aw", "ac", "wa", "ab", "aux", "da", "ata", "an", "A", "fa", "y", "alpha", "qa", "sa", "aa", "la", "va", "f", "b", "ad", "ca", "tta", "ga", "ai", "ae", "asa", "ba", "aaa", "ea", "aj", "p", "au"], "i": ["o", "x", "xi", "j", "c", "gi", "d", "pos", "ind", "id", "val", "h", "ix", "index", "ip", "bit", "u", "e", "ti", "f", "I", "q", "ai", "z", "l", "li", "p"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\n\\n\\ndef read_values():\\n    return map(int, input().split())\\n\\n\\ndef read_list():\\n    return list(read_values())\\n\\n\\ndef func(N, mod):\\n    F = [1]\\n    for i in range(1, N + 1):\\n        F.append(F[-1] * i % mod)\\n    return F\\n\\n\\nINV = {}\\n\\n\\ndef inv(a, mod):\\n    if a in INV:\\n        return INV[a]\\n    r = pow(a, mod - 2, mod)\\n    INV[a] = r\\n    return r\\n\\n\\ndef C(F, a, b, mod):\\n    return F[a] * inv(F[b], mod) * inv(F[a - b], mod) % mod\\n\\n\\ndef main():\\n    import bisect\\n\\n    N, W = read_values()\\n    I = [tuple(read_values()) for _ in range(N)]\\n\\n    init_w = I[0][0]\\n    D = {i: [] for i in range(4)}\\n    S = {i: [0] for i in range(4)}\\n    for w, v in I:\\n        bisect.insort(D[w - init_w], -v)\\n\\n    for i, d in D.items():\\n        for v in d:\\n            S[i].append(v + S[i][-1])\\n\\n    res = 0\\n    for t0 in range(len(D[0]) + 1):\\n        for t1 in range(len(D[1]) + 1):\\n            for t2 in range(len(D[2]) + 1):\\n                for t3 in range(len(D[3]) + 1):\\n                    if (t0 + t1 + t2 + t3) * init_w + t1 + 2 * t2 + 3 * t3 > W:\\n                        continue\\n\\n                    res = min(res, S[0][t0] + S[1][t1] + S[2][t2] + S[3][t3])\\n    print(-res)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n\\n", "target": "512", "substitutes": {"input": ["socket", "file", "string", "out", "feed", "param", "raw", "output", "PUT", "data", " Input", "int", "util", " output", "pull", "array", " int", "IN", "enter", "call", "proc", "version", "command", "parent", "line", "source", "request", "stream", "IO", "function", "read", "reader", "select", "str", "m", "Input", "exec", "method"], "N": ["U", "R", "NS", "B", "Ns", "T", "n", "J", "Y", "A", "L", "G", "Num", "NM", " n", " Ne", "No", "Q", "X", "NO", "C", "Ne", "V", "P", "K", "O", "H", "M", "Z"], "mod": ["j", "c", "sub", "ac", "num", "reg", "mn", "dc", "mods", "Mods", "f", "cum", "base", "pm", "orig", "m", "p", "temp", "mode", "x", "tr", "um", "off", "R", "param", "an", " MOD", "dig", "version", "md", "post", "comb", "max", "am", "im", "length", "M", "sec", "step", "modified", "mult", "n", "fun", "perm", "man", "rem", "Module", "bin", "comp", "model", "function", "C", "Mod", "com", "complex", "aj", "req", "form", "o", "dom", "od", "ver", "bug", "dec", "re", "da", "inc", "loop", "min", "div", "dim", "cm", "row", " Mod", "MOD", "module", "lib", "RM"], "F": ["U", "IF", "R", "Fs", "E", "Family", "FD", "PF", "B", "EF", "T", "J", "Y", "A", "L", "G", "OF", "FE", "FH", "File", "CF", "Q", "Far", "Form", "f", "X", "C", "GF", "V", "FF", "P", "FA", "K", "AF", "Fun", "O", "M", "H", "FO", "MF", "Fixed"], "i": ["pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "ci", "yi", "phi", "ri", "oi", "io", "ie", "ori", "int", "ind", "n", "uli", "s", "ui", "ini", "ni", "bi", "id", "iq", "api", "qa", "h", "ix", "index", "ip", "eni", "si", "u", "iu", "f", "ti", "e", "ai", "z", "p", "qi", "l", "ii", "length", "m", "li", "ic", "ei", "vi"], "INV": ["InV", "inv", "ENF", "IRV", "Inv", "IRv", "INv", " INF", "InVD", "ENv", "InN", "InF", "IRF", "ENVD", "inF", " INN", "inVD", "INN", "IRN", "INF", "INVD", "ENV", " INv", "inV"], "a": ["ma", "o", "k", "x", "j", "c", "ar", "ab", "ac", "aux", "af", "n", "da", "all", "an", "s", "A", "fa", "y", "alpha", "na", "sa", "h", "abc", "ia", "aa", "la", "u", "va", "oa", "f", "e", "ad", "ca", "am", "ga", "ai", "ae", "aaa", "ba", "l", "ea", "aj", "m", "p", " A"], "r": ["rs", "k", "rd", "x", " R", "c", "er", "R", "ar", "ro", "RR", "n", "re", "mr", "rb", "t", "range", "rf", "rt", "g", "h", "lr", "pr", "ra", "nr", "u", "ur", "f", "e", "rr", "cr", "l", "m", "fr", "ru", "p", "rc", "sr"], "b": ["o", "k", "x", "j", "c", "ab", "ac", "B", "n", "s", "an", "A", "bi", "y", "bs", "g", "h", "fb", "aa", "u", "e", "f", "base", "z", "ba", "l", "m", "p"], "W": ["U", "GW", "TW", "R", "XX", "wa", "B", "T", "WR", "Y", "A", "G", "L", "Wh", "DW", "we", "NW", "MAX", "Q", "WA", "WS", "X", "C", "V", "We", "P", "MW", "H", "WE", "M", "VW", "Z"], "I": ["U", "CI", "IF", "II", "R", "E", "B", "T", "J", "SI", "Y", "A", "L", "G", "IL", "IP", "PI", "VI", "Q", "DI", "IO", "IT", "X", "C", "NI", "IS", "V", "P", "API", "K", "O", "H", "M", "IM"], "_": ["k", "x", "n", "all", "val", "len", "f", "l", "p"], "init_w": ["init_ws", "initJh", " init_wa", "init_fw", "Init_W", "init_W", "init1v", " init_ws", "Init_v", "init_h", "Init_w", "init1W", "init1w", " init_W", "init_v", " init_fw", "initJw", "initJwa", "init_wa", " init_h", "initJW"], "D": ["U", "Dou", "DT", "CD", "DK", "R", "Do", "E", "LD", "DES", "Ds", "Daniel", "B", "Data", "T", "DO", "PD", "Y", "JD", "A", "L", "Di", "VD", "DA", "Part", "DD", "DM", "DS", "MD", "Date", "DI", "DB", "X", "C", "DF", "DC", "V", "P", "DOM", "DL", "O", "M", "DH", "DE"], "S": ["SE", "U", "SH", "SO", "oS", "BS", "SS", "R", "NS", "RS", "E", "US", "Ds", "JS", "Sin", "B", "Ns", "T", "LS", "TS", "Si", "SI", "s", "Y", "Es", "A", "L", "G", "IDS", "String", "AS", "INS", "DS", "HS", "Services", "ES", "Q", "IPS", "Set", "CSS", "CS", "Socket", "X", "SU", "C", "Ps", "IS", "Su", "Is", "V", "P", "K", "Service", "Results", "O", "KS", "H", "M", "SL", "FS", "Z"], "w": ["o", "iw", "fw", "x", "wl", "c", "aw", "hw", "ws", "wa", "ww", "n", "s", "wd", "y", "nw", "width", "sw", "g", "h", "we", "wal", "ow", "win", "ew", "wb", "u", "wx", "q", "kw", "l", "p", "wi", "wu"], "v": ["U", "o", "k", "ve", "x", "j", "uv", "c", "dev", "value", "vv", "vid", "vs", "n", "s", "vp", "ov", "t", "var", "av", "y", "g", "val", "h", "lv", "iv", "u", "f", "e", "vd", "vu", "ev", "q", "V", "sv", "z", "l", "ii", "m", "p", "vi"], "d": ["di", "k", "x", "j", "c", "Do", "de", "E", "pd", "data", "nd", "n", "s", "t", "Di", "L", "id", "sd", "dy", "DM", "g", "dim", "h", "ds", "do", "day", "dc", "u", "f", "e", "dd", "vd", "dict", "z", "l", "cd", "m", "dat", "p"], "res": ["rs", "js", "Rs", "err", "resolution", "results", "ras", "RS", "runs", "sol", "re", "args", " RES", "rh", "changes", "RES", "reg", "outs", "Res", "cs", "details", "result", "resh", "arr", "os", "min", "css", "ms", "des", "pres", "ids", "ret", "vals", "rep", "ES", "final", "nos", "max", "ps", "ns", "resp", "reset", "rev", "ons", " Res", "gr", "errors", "es", "ress", "Results", "req", " results"], "t0": ["f1", "T1", "tt0", "p8", "t8", "t25", "T0", "p0", "T8", "f0", "f25", "T2", "tt1", "f2", " t8", "p2", " t25", "T25", "p1"], "t1": ["p1", "test2", "f1", "T4", "T1", "p3", "t8", "f8", "test4", "type4", "T0", "p0", "T3", "ta1", "type3", "tone", "f0", "t4", "T8", "pt1", "ta4", "T2", "ta2", "f2", "pt3", "test1", " t8", "Tone", "pt4", "f3", "p2", "type2", "taone", "type1", "testone", "pt2"], "t2": ["d1", "f1", "T5", " t6", "T4", "T1", "t8", "T6", "ta8", "t6", " t4", "d0", "T0", "ta1", " tTwo", "f4", "T8", "t4", "t5", "d2", "T42", "TTwo", "T2", "d6", "ta2", "f2", "tTwo", " t8", "taTwo", "t42", " t42", "d42", "f5", "d4", " t5"], "t3": ["p1", "d1", "T1", "pt53", "p3", "v2", "t3000", "T6", "ta53", "t6", "nt5", "d3", "dthree", "T53", "tthree", "T3", "ta1", "nt1", "ntthree", "t5", " t13", "pt1", "nt3", "t13", " t3000", "v6", "v3", "pt6", "T2", "ta3", "to3000", "v1", "pt3", "to13", "p6", "T3000", "p2", "t53", "ta6", "to3", "to2", "T13", " tthree", "d5", " t5"]}}
{"code": "import numpy as np\\n\\na, b, h, m = map(int, input().split())\\nrad_a = 2 * np.pi / 720 * (60 * h + m)\\nrad_b = 2 * np.pi / 60 * m\\n\\nans = np.sqrt(a ** 2 + b ** 2 - 2 * a * b * np.cos(rad_a - rad_b))\\nprint(\"{:.20f}\".format(ans))", "target": "290", "substitutes": {"a": ["ma", "area", "pi", " sa", "ha", "x", "c", "aw", "d", "ac", "ab", "n", "da", "an", "s", "A", "i", "y", "alpha", "sa", "ax", "ia", "aa", "la", "u", "va", "oa", "f", " ra", "am", "ca", "ai", "w", "ae", "ba", "aj", "p", "au"], "b": ["o", "k", "x", "j", "c", "db", "d", "nb", "bh", "ab", "B", "n", "rb", "bi", "i", "y", "bs", "g", "fb", "gb", "aa", "wb", "u", "lb", "f", "e", "ad", "sb", "w", "ba", "v", "l", "bb", "r", "bf", "p"], "h": ["pi", "ha", "k", "x", "c", "d", "ht", "n", "s", "t", "i", "y", "ph", "g", "hh", "u", "f", "e", "hr", "hi", "gh", "w", "z", "v", "l", "hm", "r", "H", "p"], "m": ["lim", "pi", "o", "mc", "x", "j", "tm", "c", "gm", "d", "nm", "mod", "n", "s", "i", "y", "mag", "mn", "g", "min", "ms", "md", "km", "cm", "mo", "u", "e", "f", "mu", "mi", "sm", "mm", "w", "z", "v", "l", "r", "M", "p", "bm"], "rad_a": ["rad2ac", "rad2a", "rad_sa", "rad_ac", "rad00a", "rad_ba", "Rad_b", "rad64ac", "rad64n", "Rad_aw", "rad00b", "rad64sa", "rad2sa", "rad64a", " rad_ac", "rad00aw", "rad_n", "rad00ba", " rad_sa", "rad2n", "rad_aw", "Rad_ba", "Rad_a", " rad_n"], "rad_b": ["Rad_n", "rad_bb", "rad0b", "dev_b", "rad___b", "rad___rb", "dev_br", "Rad_b", "rad___sb", "dev2bb", "dev2b", "Rad0n", "rad_rb", "rad0sb", "dev_bb", "Rad_rb", "rad2bb", "dev2eb", "rad0n", "rad_sb", "rad2br", "rad2b", "rad___n", "rad0rb", "rad_br", "rad_n", "dev_eb", "Rad0b", "rad2eb", "Rad0sb", "Rad0rb", "Rad_sb", "dev2br", "rad_eb"], "ans": ["ang", " ants", "anus", "missions", "san", "anned", "nas", "ations", " ang", "ars", "ants", "amps", " angles", "an", "s", "anny", " means", " spans", "ians", "ams", "ents", "na", "anas", "gan", "nan", "ana", "span", " sins", "anes", "can", "AN", "atan", "aned", " Ans", "ania", "ANS", "ann", " mean", "ns", " nan", "lan", "ani", "ano", "annels", "ays", " scans", "mean", "aus", "abilities"]}}
{"code": "import bisect\\n\\nN = int(input())\\nA = [int(input()) for _ in range(N)]\\n\\nA.reverse()\\n\\ndp = [A[0]]\\n\\nfor a in A[1:]:\\n    idx = bisect.bisect_right(dp, a)\\n    if idx == len(dp):\\n        dp.append(a)\\n    else:\\n        dp[idx] = a\\n\\nprint(len(dp))", "target": "245", "substitutes": {"N": ["NA", "D", "S", " NI", "R", " I", "B", "Ns", " NA", "T", "n", " C", "Y", "L", "NM", " n", "Size", "NW", "NN", " Ne", "No", "I", "Number", "X", " B", "C", "Na", "Ne", " D", "V", "P", "K", " P", "O", "M", "F", "Z"], "A": ["As", "U", "NA", "D", "S", "ASC", "au", "Args", "E", "B", "CA", "T", "n", "mA", "At", "Array", "Y", "AD", "AM", "L", "G", "Am", "Ab", "GA", "AU", "EA", "An", "AP", "Ar", "I", "AA", "ad", "App", "C", "AST", "V", "P", "API", "AF", "AB", "NP", "AC", "M", "AW", "p", "LA"], "_": [" __", "x", " line", " col", " time", " ip", " row", " j", " f", " seq", "f", " block", " k", "p"], "dp": ["wp", "df", "lp", "di", "dt", "dos", "ssl", "pb", "db", "np", "d", "pair", "data", "pos", "pa", "da", "array", "DP", "config", "pkg", "i", "result", "wd", "alpha", "api", "password", "dim", "abc", "ds", "cp", "dr", "source", "dc", "ip", "rep", "beta", "comp", "adr", "pp", "address", "dd", "ad", "dl", "pm", "P", "dm", "ep", "params", "bb", "deb", "dist", "eps", "dat", "p", "dump", "gp", "fp"], "a": ["at", "ha", "x", "aw", "d", "argument", "ac", "ab", "value", "data", "art", "app", "af", "pa", "\u00e0", "n", "ast", "da", "all", "an", "array", "av", "i", "alpha", "api", "na", "sa", "ax", "ay", "ana", "index", "aa", "aff", "ach", "va", "active", "address", "e", "am", "ad", "b", "ga", "ai", "ae", "aaa", "ba", "add", "l", "ea", "ace", "another", "p", "au"], "idx": ["pidx", "IdX", " idz", "pidy", "catx", " idy", "Idxc", "idX", "caty", "Idc", "idxc", "midx", "pidc", "idc", " idc", "Idx", "idz", "catxc", "Idy", "pidX", " idX", " idxc", "midX", "catX", "midz", "Idz", "midy", "idy"]}}
{"code": "import sys\\n\\ns = []\\nfor line in sys.stdin:\\n    s.extend(list(line.lower()))  \\n\\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\\n\\nfor i in alphabet:\\n    print(i + \" : \" + str(s.count(i)))", "target": "770", "substitutes": {"s": ["states", "services", "o", "ls", "parts", "js", "S", "ssl", "c", "ins", "ses", "a", "sys", "ss", " comments", "n", "abs", "args", "t", "strings", "g", "comments", "h", "ds", "gs", "lines", "names", "si", "u", "sets", "letters", "e", "f", "sym", "scripts", "b", "ps", "ments", "ns", "ans", "es", "status", "sb", "w", "l", "v", "groups", "m", "xs", "p"], "line": ["file", "frame", "string", "log", "case", "out", "input", "ino", "page", "Line", "name", "lo", "section", "LINE", "user", "id", "site", "key", "entry", "cell", "word", "source", " Line", "header", "lines", "sel", "row", "ine", "lin", "len", "e", " lines", "inline", "code", "status", "include", "l", "lined", "comment", "block", "letter"], "alphabet": ["aliabet", "alphalog", "alfabetic", "aliabetic", "alialog", "alfabet", "alphphabet", "aliphabet", "accalog", "accabetic", "alphaphabet", "alfphabet", "variabet", "varialog", "variphabet", "alphabetic", "accphabet", "alphaabet", "variabetic", "accabet", "alphaabetic"], "i": ["pi", "di", "uri", "iy", "x", "xi", "j", "c", "gi", "slice", "yi", "oi", " I", "ri", "a", "name", "ie", "inter", "io", "int", "ind", " ip", "ui", "bi", "id", "iq", "key", "ir", "ix", "index", "isi", "eni", "si", "iii", "iu", "fi", "e", "I", "ti", "f", "ai", "z", "qi", "l", "ii", "li", "ih", "p", "zi"]}}
{"code": "def LI(): return list(map(int, input().split()))\\ndef I(): return map(int, input().split())\\nmod = 10**9 + 7\\n\\ndef main():\\n  a, v = I()\\n  b, w = I()\\n  t = int(input())\\n  if v <= w:\\n    print('NO')\\n  else:\\n    if abs(a-b) <= (v-w)*t :\\n      print('YES')\\n    else:\\n      print('NO')\\n\\nif __name__ == '__main__':\\n  main()", "target": "349", "substitutes": {"mod": ["pi", " m", "it", "type", " u", "xp", "exp", " d", "d", "scale", " p", "vt", "s", "mag", "round", "g", "version", "e", "max", " Mod", "Mod", "q", "ta", "l", "m", "r", "temp"], "a": ["ma", "o", "x", "c", "aw", "ar", "d", "ac", "ab", "wa", "af", "n", "da", "an", "A", "fa", "i", "y", "sa", "aa", "u", "va", "f", "am", "ai", "ae", "ba", "l", "p", " A", "au"], "v": ["o", "k", "x", "j", "c", "d", "ver", "wa", "value", "vv", "vs", "int", "vt", "n", "i", "y", "g", "val", "tv", "h", "lv", "iv", "u", "va", "f", "e", "vd", "q", "V", "sv", "z", "l", "m", "p", "vi"], "b": ["o", "k", "x", "c", "d", "ab", "B", "n", "bi", "i", "y", "bs", "g", "h", "fb", "aa", "wb", "u", "f", "e", "ga", "sb", "z", "ba", "l", "r", "m", "bb", "bf", "p"], "w": ["iw", "k", "x", "c", "aw", "d", "ws", "wa", "W", "n", "ww", "wt", "s", "tw", "wd", "y", "i", " W", "nw", "sw", "g", "h", "we", "ow", "ew", "rw", "wb", "u", "f", "e", "wx", "q", "sh", "z", "l", "m", "wh", "p", "wu"], "t": ["o", "dt", "at", "k", "x", "j", "c", "d", "T", "n", "i", "y", "test", "g", "h", "ts", "offset", "tt", "ct", "u", "mt", "f", "e", "q", "ta", "z", "l", "m", "p"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nb = [0] * (n + 2)\\nb[1] = abs(a[0])\\nfor i in range(2, n + 1):\\n    b[i] = b[i - 1] + abs(a[i - 2] - a[i - 1])\\nb[n + 1] = abs(0 - a[n - 1]) + b[n]\\na = [0] + a + [0]\\nfor i in range(n):\\n    print(b[n + 1] + abs(a[i] - a[i + 2]) - abs(b[i] - b[i + 2]))", "target": "527", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "name", "all", "s", "an", "num", "t", "ini", "ni", "y", "g", "count", "en", "h", "min", "network", "nn", "nan", "un", "nu", "u", "len", "net", "f", "e", "nt", "fn", "ns", "sn", "no", "w", "z", "l", "v", "ii", "m", "r", "li", "nc", "p", "ne", "N"], "a": ["ma", "area", "o", "x", "c", "aw", "d", "ar", "ab", "ac", "app", "abs", "da", "an", "s", "array", "A", "fa", "y", "alpha", "api", "sa", "ah", "span", "aa", "la", "u", "va", "f", "e", "am", "ad", "ca", "ga", "ai", "ae", "w", "aaa", "ba", "z", "l", "v", "aj", "ea", "m", "p", "au"], "b": ["o", "part", "eb", "k", "mb", "x", "pb", "j", "c", "db", "d", "ob", "nb", "ab", "B", "bd", "abs", "s", "an", "binary", "t", "A", "rb", "bi", "y", "bs", "body", "g", "fb", "gb", "h", "ib", "bin", "aa", "wb", "u", "lb", "e", "f", "ad", "base", "sb", "be", "z", "ba", "l", "v", "m", "r", "bb", "bf", "p", "bp"], "i": ["mini", "pi", "di", "o", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "oi", "nb", "ri", "phi", "ie", "int", "ind", "s", "ini", "ui", "t", "ni", "bi", "id", "y", "api", "index", "eni", "si", "u", "iu", "ami", "e", "ti", "I", "f", "end", "mi", "hi", "ki", "ai", "z", "p", "qi", "l", "v", "ii", "li", "m", "io", "vi"]}}
{"code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\\nfrom collections import deque\\n\\nsys.setrecursionlimit(10**7)\\ninf = 10**20\\nmod = 10**9 + 7\\n\\nDR = [1, -1, 0, 0]\\nDC = [0, 0, 1, -1]\\n\\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\\ndef LS(): return sys.stdin.readline().split()\\ndef I(): return int(sys.stdin.readline())\\ndef F(): return float(sys.stdin.readline())\\ndef S(): return input()\\n     \\ndef main():\\n    s = S()\\n    ans = inf\\n    for i in range(len(s)-2):\\n        ans = min(ans, abs(int(s[i:i+3]) - 753))\\n    print(ans)\\n\\n\\nmain()\\n\\n", "target": "122", "substitutes": {"inf": ["lim", "pi", "log", "std", "exp", "sin", "sp", "ar", "ins", "phi", "Inf", "int", "ind", "long", "abs", "ipl", "nz", "ini", "inc", "amp", "info", "ignore", "id", "circ", "impl", "abc", "iter", "ine", "lin", " Inf", "pp", "f", "I", "imp", "rec", "pl", "init", "frac", "expl", "conf", "lit", "F", "Z"], "mod": ["pi", " m", " lim", " mag", " ind", " sec", " ms", "ind", " MOD", " dd", "sd", " Pi", "ix", "cm", "dc", " exp", " imp", " Mod", "MOD", "Mod", " spec", "im", "ai", " dec", " sd", "m", "sim", " cm"], "DR": [" DD", " SS", " MS", " cc", " design", " pars", " sin", " rc", " ND", " desc", " us", " cs", " CC", " Z", "dc", " SF", " cont", " SA", " std", " dc", " spec", " gn", " GS", " sd", " LL", " DL", " cos", " CS"], "DC": ["II", "CD", "GN", "ci", "CT", "da", "cs", "DD", "UC", "DM", "fd", "ds", "CCC", "ix", "cm", "dc", " dc", "C", "disc", "DF", "DEC", "ai", "FF", "CC", "lc", "DL", "nc"], "x": ["ext", "xp", "xi", "work", "px", "c", "ya", "mos", "input", "ci", "ctx", "xy", "XX", "data", "lex", "inx", "sys", "int", "ux", "n", "plex", "ww", "num", "t", "config", "y", "tx", "ph", "xml", "time", "python", "xxx", "xa", "ax", "h", "xt", "xxxx", "sex", "rx", "mx", "yx", "ix", "index", "fx", "word", "ct", "ex", "xc", "u", "f", "max", "dx", "X", "xx", "zx", "xes", "wx", "www", "w", "z", "rex", "v", "xs", "php", "p"], "s": ["states", "ls", "phys", "services", "S", "c", "d", "ins", "ses", "ws", "a", "opens", "ss", "n", "abs", "an", "strings", "cs", "g", "sa", "os", "ds", "ms", "gs", "lines", "sq", "south", "si", "sets", "f", "e", "b", "ps", "ns", "sb", "sv", "params", "l", "sg", "stats", "m", "xs", "words", "p"], "ans": ["ls", "san", "aning", "nas", "ras", "ins", "ars", "ants", "amps", "ens", "an", "anc", "ads", "ats", " means", "cs", "ents", "anon", "asin", "na", "os", "anas", "ms", "ds", "gan", "ids", "nan", "An", "ana", "ks", "anes", "span", "lines", "AN", "atan", "aned", "leans", "ANS", "ann", "lan", "ns", "scan", "ions", "ai", "aces", "ays", "mean", "xs", "aus", "ons"], "i": ["mini", "pi", "it", "uri", "o", "k", "xi", "j", "c", "gi", "ci", "slice", "yi", "phi", " I", "a", "ie", "lo", "int", "ind", "n", "ini", "t", "bi", "id", "iq", "y", "api", "isi", "index", "ip", "eni", "si", "il", "u", "iu", "ami", "f", "I", "b", "hi", "im", "ai", "qi", "l", "v", "ii", "li", "ei", "m", "p", "zi"]}}
{"code": "alpha = list(\"abcdefghij\")\\n\\n\\ndef dfs(v, depth):\\n    if depth == N:\\n        print(v)\\n        return\\n    if depth <= N:\\n        for next_ in alpha[: len(set(list(v))) + 1]:\\n            dfs(v + next_, depth + 1)\\n\\n\\nif __name__ == \"__main__\":\\n    N = int(input())\\n\\n    dfs(\"a\", depth=1)\\n", "target": "427", "substitutes": {"alpha": ["ma", "extra", "acl", " Alpha", "Alpha", "ac", "a", "data", "alias", "da", "alph", "amp", "array", "A", "i", "qa", "sa", "abc", "pha", "beta", "audio", " a", "aci", "aa", "la", "stack", "\u03b1", "va", "ho", "ga", "ta", "params", "ace", " beta", "Beta", "asc", "star"], "v": ["o", "k", "ve", "x", "j", "uv", "c", "d", "a", "data", "value", "vv", "vs", "n", "view", "vp", "list", "var", "t", "array", "i", "y", "g", "val", "h", "iv", "u", "va", "e", "f", "b", "values", "vd", "q", "V", "w", "sv", "filter", "params", "l", "m", "r", "p", "vi"], "depth": ["height", "mode", "step", "type", "D", "case", "grade", "distance", "trace", "scale", "feature", "node", " Depth", "name", "dev", "context", "head", "degree", "n", "debug", "var", "cache", "progress", "root", "weight", "id", "i", "DEP", "cost", "time", "push", "count", "dim", "version", "repeat", "path", "stack", "len", "size", "dep", "process", "tree", "shape", "stage", "seed", "dimension", "strength", "q", "P", "position", "layer", "length", "dist", "right", "order", "p", "deep", "rank", "level", "Depth"], "next_": ["prev_", " nextval", " Next_", "nextval", "Next_", " Nextval", "Nextval"], "N": ["U", "NA", "D", "S", "R", "NS", "E", "Z", "NE", "NC", "B", "T", "n", "W", "J", "Y", "A", "L", "G", "NB", "NT", "NN", "No", "Q", "I", "X", "NO", "C", "Na", "Ne", "V", "P", "K", "NP", "O", "H", "M", "F", "Depth"]}}
{"code": "\\nimport numpy as np\\na= input()\\nK = [1,1,1,2,1,2,1,5,2,2,1,5,1,2,1,14,1,5,1,5,2,2,1,15,2,2,5,4,1,4,1,51]\\n\\nprint(K[int(a)-1])\\n", "target": "701", "substitutes": {"a": ["area", " b", " pa", "x", "j", "c", "ac", " p", "ab", "aux", "n", "mA", "da", "Array", "an", "s", "A", "fa", "i", "y", "alpha", " data", "na", " A", "sa", " n", " na", "ks", "aa", " c", " da", "va", "f", " ra", "AA", "e", "ad", "b", "ca", "ga", "ai", "w", "ea", "p", " args", "ka"], "K": ["FK", "D", "k", "S", "E", "SK", "B", "T", "W", "J", "Y", "A", "G", "L", "KK", "HK", "Q", "PK", "I", "X", "C", "VK", "V", "P", "KA", "Sk", "KB", "KS", "KC", "H", "M", "O", "F", "N", "Z"]}}
{"code": "n = int(input())\\nedges = [[] for _ in range(n)]\\nab = [list(map(int, input().split())) for _ in range(n)]\\ncd = [list(map(int, input().split())) for _ in range(n)]\\nfor i in range(n):\\n    a, b = ab[i]\\n    for j in range(n):\\n        c, d = cd[j]\\n        if a < c and b < d:\\n            edges[i].append(j)\\nmatched = [-1] * n\\ndef dfs(v):\\n    for u in edges[v]:\\n        if visited[u]:\\n            continue\\n        visited[u] = True\\n        if matched[u] == -1 or dfs(matched[u]):\\n            matched[u] = v\\n            return True\\n    return False\\n\\nans = 0\\nfor s in range(n):\\n    visited = [False] * n\\n    if dfs(s):\\n        ans += 1\\nprint(ans)", "target": "591", "substitutes": {"n": ["o", "part", "k", "x", "np", "node", "nb", "num", "an", "t", "non", "ni", "y", "en", "network", "nn", "nan", "span", "nl", "un", "nu", "number", "net", "len", "e", "f", "nt", "ns", "sn", "no", "w", "z", "l", "m", "r", "nc", "ln", "p", "ne", "N"], "edges": ["edsles", "endids", "ledices", "endles", "nedgments", "endgments", "edices", "ledged", "ledges", "nedge", " edgments", "indles", "edsges", "ledids", "edsged", "ledles", "edgments", " edge", "Edged", "nedged", " edles", "endges", "indges", " edices", "Edges", "Edge", "edged", "nedges", "edids", "edge", " edged", "ledgments", "edles", "Edgments", "edsices", "indgments", "indids"], "_": ["k", "out", "x", " un", "__", " time", "all", "non", "___", "val", " x", "Id", "f", " block", "p", "block"], "ab": ["area", "eb", "mb", "abb", "ak", "ob", "ac", "app", "af", "abs", "ub", "av", "tab", "Ab", "bs", "lab", "hab", "abc", "fab", "ib", "bag", "ach", "ad", "ca", "am", "ai", "ae", "abl", "ba", "AB", "ada", "obb", "bb", "ap", "aps"], "cd": ["df", "od", "CD", "ecd", "db", "ded", "de", "cb", "pd", "cmd", "nd", "af", "bd", "ck", "da", "cc", "ch", "cs", "sd", "hd", "ds", "cp", "md", "cm", "dc", "cdn", "xd", "dd", "one", "ad", "ca", "vd", "cr", "cf", "ld"], "i": ["pi", "di", "o", "ji", "k", "x", "xi", "ci", "yi", "oi", "ri", "ie", "ind", "ui", "ini", "bi", "y", "g", "index", "ip", "si", "iu", "e", "f", "I", "q", "ai", "z", "l", "ii", "li", "m", "p"], "a": ["ma", "o", "x", "aw", "ak", "ac", "af", "pa", "da", "an", "A", "fa", "alpha", "na", "sa", "h", "aa", "va", "e", "f", "ad", "ca", "am", "ga", "ai", "ae", "w", "ba", "aj", "p", "au"], "b": ["o", "eb", "k", "x", "db", "cb", "nb", "bc", "B", "bd", "rb", "y", "dy", "g", "h", "aa", "lb", "e", "f", "ad", "sb", "z", "ba", "l", "r", "p"], "j": ["o", "ji", "k", "x", "ie", "ind", "J", "ch", "y", "key", "g", "h", "jo", "ja", "e", "f", "je", "end", "jj", "adj", "q", "z", "jp", "l", "ii", "m", "r", "p"], "c": ["o", "k", "x", "cy", "ci", "col", "ac", "cc", "ce", "cs", "y", "ec", "g", "ct", "dc", "cu", "xc", "f", "e", "ca", "unc", "C", "q", "w", "z", "l", "lc", "r", "nc", "cf", "p"], "d": ["df", "o", "D", "dt", "k", "x", "ded", "de", "pd", "du", "bd", "da", "dy", "g", "fd", "h", "ds", "dh", "dc", "f", "dd", "e", "xd", "ad", "vd", "w", "z", "dn", "l", "r", "m", "p"], "matched": ["linked", "classified", "joined", "won", "provided", "case", "confirmed", "expected", "atched", "verified", "x", "signed", "results", "protected", "controlled", "options", " matches", "filled", "played", "covered", " unmatched", "rules", "written", "connected", "failed", "ches", "cases", "fitted", "listed", "les", "successful", "served", "ordered", "packed", "changed", "checked", "cas", "aned", "trained", "authorized", "used", "selected", "mat", "ed", "aligned", "locked", "match", "identified", "balanced", "placed", "stats", "found", "m", "specified", "named", "affected"], "v": ["o", "k", "ve", "x", "uv", "ver", "value", "vv", "vs", "t", "y", "g", "val", "h", "lv", "nu", "iv", "f", "e", "vd", "vu", "q", "V", "w", "sv", "z", "nv", "l", "m", "r", "p", "vi"], "u": ["U", "o", "it", "eu", "yu", "k", "su", "x", "uv", "ul", "tu", "ut", "uc", "une", "int", "num", "ui", "t", "id", "iq", "y", "uni", "g", "h", "chu", "un", "nu", "cu", "iu", "ur", "f", "e", "us", "uu", "q", "w", "l", "uid", "m", "r", "lu", "ru", "p", "up", "ou"], "visited": ["interpretiting", "missited", "circiting", "interpretitted", "vertitable", "accessored", "versiting", "invitable", "circited", "invits", "missiting", "missitable", "versitted", "Visored", "visitable", "Visits", "missitted", "VISitted", "accessitable", "visiting", "Visitable", "accessited", "visits", "vertiting", "versited", "vertited", "VISited", "interpretored", "invited", "circitted", "vertitted", "visored", "accessits", "VISiting", "interpretited", "visitted", "Visited", "VISored", "versored", "circitable", "invored"], "ans": ["ls", "eds", "anned", "nas", "ras", "ins", "ases", "ations", " matches", "ants", "ars", "aid", "vs", "amps", "photos", "an", " means", "ats", "outs", "cs", "ches", "ents", "cases", "na", "os", "anas", "ds", "ms", "ids", "ana", "An", "span", "ks", "anes", "cons", " cases", "AN", "cas", "aned", "leans", "ANS", "ann", "lan", "ns", "scan", "ands", "es", "errors", "ions", "aces", "ays", " scans", "xs", "types", "aus", "ons"], "s": ["states", "ls", "services", "o", "S", "sync", "su", "x", "search", "ins", "ses", "session", "ss", "an", "t", "y", "site", "os", "g", "un", "set", "lines", "stat", " S", "sites", "sq", "si", "spec", "f", "e", "ns", "sn", "w", "sv", "l", "stats", "sc", "se", "sim", "p"]}}
{"code": "a, b, c, d = map(int, input().split())\\nans = max(abs(a - b), abs(b - c))\\nans = min(ans, abs(a - c))\\n\\nif ans > d:\\n  print(\"No\")\\nelse:\\n  print(\"Yes\")", "target": "378", "substitutes": {"a": ["area", "x", "aw", "ama", "ac", "ab", "art", "af", "int", "n", "abs", "da", "an", "A", "fa", "y", "alpha", "sa", "h", "ia", "aa", "la", "e", "f", "ad", "am", "ai", "ae", "w", "asa", "ba", "l", "aj", "m", "p", "au"], "b": ["eb", "x", "pb", "db", "cb", "ab", "ac", "B", "bc", "n", "abs", "rb", "fa", "bi", "i", "y", "bs", "g", "fb", "h", "ib", "aa", "wb", "lb", "e", "f", "ad", "sb", "w", "ba", "l", "v", "bb", "r", "bf", "p"], "c": ["k", "x", "cy", "ci", "cb", "col", "ac", "ab", "uc", "bc", "fc", "n", "ce", "i", "cs", "ec", "g", "con", "ct", "dc", "xc", "u", "cu", "e", "f", "ca", "C", "w", "z", "l", "v", "cd", "m", "cf", "p"], "d": ["di", "D", "dt", "dos", "x", "ded", "pd", "nd", "bd", "n", "da", "dan", "i", "sd", "dy", "g", "fd", "h", "ds", "do", "dc", "dad", "e", "dx", "f", "dd", "ad", "xd", "none", "z", "l", "cd", "m", "dat", "p"], "ans": ["std", "san", "aning", "ins", "ations", "ars", "ants", "ss", "pos", "vs", "ens", "an", "s", "ops", "anc", " means", "ats", "cs", "ians", "ents", "na", "os", "anas", "ds", "ks", "nan", "ids", "span", "ana", "can", "anes", "lines", "cons", "AN", "atan", "leans", "len", "aned", "ANS", "dd", "ann", "ad", "ns", "anges", "errors", "es", "no", "ions", "ani", "ays", "mean", "xs", "aus", "ons"]}}
{"code": "import collections\\n\\nA = input()\\nB = input()\\n\\nA_c = collections.Counter(A)\\nB_c = collections.Counter(B)\\nA_c = A_c.values()\\nB_c = B_c.values()\\n\\nA_c = list(A_c)\\nB_c = list(B_c)\\nA_c.sort()\\nB_c.sort()\\nif A_c == B_c:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")\\n", "target": "490", "substitutes": {"A": ["AR", "U", "Ac", "As", "NA", "D", "S", " AA", " Ax", "Alpha", "a", "Auth", "CA", "W", "mA", "Array", " C", "G", "L", "AS", "GA", "AU", "EA", " a", "AP", "Ar", "AA", "C", "AST", "P", "AF", "API", "AB", "H", "M", "AC", "F", "AAA", "N", "LA"], "B": ["U", "EB", "D", "BS", "BF", "E", "LB", "BB", "UB", "TB", "BE", "BBC", "Y", "L", "Ab", "NB", "BA", "PB", "VB", "OB", "BI", "GB", "Bs", "DB", "QB", "WB", "BER", "CB", "b", "SB", "MB", "V", "BT", "BC"], "A_c": ["B_cont", "B_lc", " A_cu", "A_nc", "A_d", "A5fc", "A_n", "B_nc", " A_lc", "B_e", " A_l", "A5lc", " A_e", "A5n", "A_l", "A67c", "A67nc", "B_l", "ALogc", "A_cu", "A_lc", "ALogf", "A_C", "A5nc", " A_n", "B_d", "B_C", "A_fc", "A5cont", "A5c", " A_dc", "B_fc", "A67cont", "AJe", "A_dc", "ALogcu", "A_f", "A_e", "AJc", "AJdc", "AJl", "ALoglc", " A_f", " A_C", "A_cont", "B_n", "A67lc"], "B_c": ["B_lc", "B_dc", "BParc", "B_f", "b_lc", "JAllf", "NB_rec", "B_oc", "J_f", "NB_c", "NBParrec", "BAlllc", "B_cs", "B_w", " B_w", "BAllce", "BA_cs", "BParl", "J_ce", "B_ac", "BAllc", "BPf", "b_f", "B_ce", "JAllc", "NBParf", "b_ac", "b_l", " B_l", "B_l", " B_f", "JAllce", "b_c", "B_config", "BAllconfig", "BPw", "BPdc", "B_C", "b_oc", "NBParc", "B_rec", "JAlll", " B_C", "NBParl", "b_config", "BA_c", "BAllf", "J_c", "BA_co", "J_l", "BA_lc", "B_co", "NB_l", "NB_f", " B_dc", "BParf", "BAlll", "BPc", "BParrec"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\nimport sys\\nimport os\\n\\n\\nn = int(input())\\nS = list(map(int, input().split()))\\n\\nq = int(input())\\nT = list(map(int, input().split()))\\n\\ncount = 0\\nfor query in T:\\n    if query in S:\\n        count += 1\\nprint(count)", "target": "316", "substitutes": {}}
{"code": "from Queue import Queue\\n\\nn, q = [ int( val ) for val in raw_input( ).split( \" \" ) ]\\nnames = Queue( )\\ntimes = Queue( )\\nfor i in range( n ):\\n\tname, time = raw_input( ).split( \" \" )\\n\tnames.put( name )\\n\ttimes.put( int( time ) )\\n \\nqsum = 0\\noutput = []\\nwhile not times.empty( ):\\n\tname = names.get( )\\n\ttime = times.get( )\\n\tif time <= q:\\n\t\tqsum += time\\n\t\toutput.append( \"{:s} {:d}\".format( name, qsum ) )\\n\telse:\\n\t\ttimes.put( time - q )\\n\t\tnames.put( name )\\n\t\tqsum += q\\n\\nprint( \"\\n\".join( output ) )", "target": "745", "substitutes": {"n": ["it", "o", "k", "x", "j", "c", "d", " N", "nb", "num", "s", "t", "y", "g", "count", "number", "u", "e", "f", "b", "ns", "sn", "w", "z", "l", "m", "r", "nc", "p", "ne", "N"], "q": ["qt", "k", "x", "c", "d", "question", "queue", "qs", "quant", "depth", "num", "s", "id", "iq", "y", "timeout", "quick", "quality", "qa", "check", "g", "h", "ue", "query", "ix", "Q", "sq", "eq", "u", "f", "max", "qq", "sh", "w", "delay", "z", "v", "l", "wait", "m", "r", "length", "p", "qu", "dq", "count"], "val": ["el", "part", "loc", "pid", "al", "x", "pol", "wl", "alt", "xy", "rol", "col", "sol", "value", "vid", "fl", "pos", "VAL", "int", "pal", "ind", "sl", "valid", "ll", "id", "key", "min", "live", "Val", "line", "vals", "vl", "sel", "la", "il", "rel", "len", "play", "run", "eval", "f", "v", "li", "slot", "p"], "names": ["states", "forms", "checks", "files", "cycles", "maps", "terms", "people", "ws", "parents", "als", "models", "s", "changes", "mates", "users", "outs", "na", "views", "blocks", "Names", "keys", "sites", "places", "items", "frames", "days", "letters", "boxes", "objects", "ns", "ons", "ans", "values", "tests", "works", "ames", "ays", "tags", "years", "rooms", "ones", "groups", "types", "words", "stats", "months", "named", "members"], "times": ["checks", "forms", "itions", "Time", "events", "Times", "results", "hours", "ins", "runs", "fits", "data", "steps", "tips", "ues", "qs", "s", "changes", "imes", "cs", "timeout", "cases", "views", "comments", "ts", "blocks", "rows", "ks", " Times", "sites", "lines", "places", "once", "days", "dates", "scripts", "ps", "values", "xes", "tests", "errors", "ions", "works", "aces", "ays", "stats", "ones", "types", "xs", "children"], "i": ["j", "c", "ie", "ind", "ni", "id", "y", "iq", "h", "ib", "ix", "index", "ip", "item", "u", "iu", "e", "ti", "I", "f", "im", "ai", "z", "qi", "v", "li", "ice"], "name": ["file", "type", "o", "part", "case", "string", "common", "NAME", "x", "package", "work", "search", "question", "data", "value", "start", "a", "alias", "year", "trial", "long", "num", "info", "id", "wave", "key", "prefix", "nice", "date", "image", "url", "self", "word", "parent", "job", "day", "path", "model", "size", "resource", "f", "one", "am", "label", "base", "ame", "term", "new", "child", "no", "wife", "m", "comment", "order", "place", "Name", "call"], "time": ["type", "k", "x", "Time", "c", "d", "event", "data", "value", "queue", "start", "hour", "wa", "year", "s", "num", "depth", "range", "t", "info", "id", "weight", "sleep", "cost", "timeout", "h", "date", "image", "change", "self", "rate", "etime", "live", "tz", "frequency", "how", "size", "clock", "tim", "e", "one", "f", "am", "ime", "volume", "delay", "z", "v", "length", "m", "r", "now", "p", "money", "count", "call"], "qsum": ["dqSum", "dqum", "Qscale", "qSum", " qtotal", "eqsum", "qsim", "sqscale", "sqsum", "qum", " qsu", "Qsum", "qasum", "QSum", " qmean", " qmem", "qamean", "dqtotal", "eqscale", "qmean", "eqsu", "dqsum", "eqsim", "qtotal", "qsu", "eqmean", "dqsu", "qamem", "qscale", "qmem", " qSum", "sqsu", " qsim", "eqmem", " qum", "qasim", "dqscale", " qscale", "eqtotal", "squm", "Qum"], "output": ["unit", "jobs", "future", "exit", "control", "out", "input", "response", "results", "web", "left", "four", "data", "steps", "queue", "complete", "format", "fl", "all", "double", "progress", "written", "video", "config", "environment", "outs", "result", "display", "put", "stop", "sort", "operation", "contract", "live", "console", "job", "next", "write", "production", "hidden", "foo", "settings", "code", "cut", "oper", "Output", "summary", "dict", "example", "office", "layer", "flat", "groups", "text", "tube", "letter"]}}
{"code": "from sys import stdin\\nn = int(stdin.readline())\\nM = [None]\\nM += [list(map(int, stdin.readline().split()[2:])) for i in range(n)]\\nsndf = [None]\\nsndf += [[False, i] for i in range(1, n + 1)]\\ntt = 0\\ndef dfs(u):\\n    global tt\\n    sndf[u][0] = True\\n    tt += 1\\n    sndf[u].append(tt)\\n    for v in M[u]:\\n        if not sndf[v][0]:\\n            dfs(v)\\n    tt += 1\\n    sndf[u].append(tt)\\nfor i in range(1, n + 1):\\n    if not sndf[i][0]:\\n        dfs(i)\\nfor x in sndf[1:]:\\n    print(*x[1:])", "target": "788", "substitutes": {"n": ["o", "k", " NS", "j", " len", " NI", "c", "d", "nm", " fn", " Num", " N", "nb", "Ns", "num", " SN", "s", "t", "ni", "Num", "y", "count", " ND", "h", "ne", "network", "nn", " f", " Line", "number", "nu", "nt", " number", " lines", "f", "b", "ns", "e", " name", "no", "w", "z", "l", "m", "r", "nc", "p", " NB", " Nu", "N"], "M": ["U", "D", "S", "R", "E", "B", "T", "W", "J", "Y", "A", "G", "L", "DM", "MD", "MS", "Ms", "MN", "Q", "I", "X", "MI", "C", "TM", "V", "ML", "P", "MM", "MC", "MT", "m", "O", "H", "F", "CM", "MF", "N", "Z"], "i": ["mini", "pi", "di", "o", "uri", "k", "xi", "j", "c", "gi", "ci", "yi", "phi", "ie", "int", "ind", "ui", "ini", "t", "ni", "bi", "id", "y", "info", "ir", "ix", "ip", "si", "iu", "f", "ti", "I", "e", "b", "mi", "im", "ai", "p", "qi", "l", "ii", "ic", "li", "m", "ei", "io", "vi"], "sndf": ["ssmdfp", "szedfr", "sngf", "scdc", "insundfo", "svde", "Sndfo", "sindrf", "sstdf", "snde", "sgdF", "sndF", " sddc", "ssde", "sNDfr", "insundc", "osndv", "svdfs", "nsndc", "sstdfr", "svdf", "sundfs", "scdF", "sindF", "ssdv", "sntrf", "sndfr", " sndc", "esNDxf", "svdF", "sgdc", "sinde", "sstdxf", "sngfs", "insundfs", "sntfs", "sgdf", "sntf", "sndfo", "sndc", "sntfo", "siddv", "esNDv", "Sndrf", "sndfp", "nsndf", "sddf", "sNDxf", "osndF", "sgdfo", "Sendrf", "osindfs", "sendf", "esNDf", "sundfo", "sddc", "sndfs", "sgdfs", "ssmdv", "nsnde", "esndfr", "sddv", "smdfs", "sindfo", "siddfs", "sindfs", "siddF", "ssmdfs", "sundc", "sNDf", "esNDfr", "ssndf", "Snde", "sngv", "sngfp", "sendF", "smdc", "sundf", "ssdf", "smdf", "ssmdf", "svdc", "sindv", "ssndfs", "insndfo", "osindF", "osndf", "SendF", "SndF", " sddv", "sunds", "nssde", "sendrf", "scde", "smdfp", "esndv", "siddf", "sndrf", "sindc", "insndfs", "insundf", "Sendfo", "sindf", "insndc", "sstdv", "szedf", "sNDe", "Sgdc", "ssdc", "sntF", "scdf", "sindfp", "Sndc", "osndfs", "sNDv", "sndv", "sntc", "nssdc", "nssdf", " sndv", "szedv", "ssndv", "insndf", "sNDc", "ssndfp", "esndxf", " sdds", "snds", "sNDF", "sgde", "esndf", "nsndv", "Sendf", "szedxf", "sendfo", "Sndf", "SgdF", "svdv", " snds", "nssdv", "Sgde", "sundv", "smds", "smdv", " sddf", "sndxf", "osindv", "osindf", "Sgdf", "sdds"], "tt": ["tp", "dt", "ott", "tm", "ht", "dev", "ff", "t", "ph", "time", "tty", "tmp", "dd", "mm", "p", "temp", "k", "ci", "tc", "ss", "vt", "print", "td", "id", "md", "post", "pp", "default", "ee", "no", "pt", "zz", "ou", "pi", "qt", "tu", "T", "int", "tax", "ct", "nn", "yt", "att", "mt", "nt", "yy", "od", "nd", "ot", "test", "tv", "ty", "ts", "tz", "tf", "font", "unt", "ft", "ad", "tta", "TT", "tti", "bb", "txt", "text", "kt"], "u": ["U", "o", "eu", "k", "su", "tu", "ul", "c", "uv", "d", "ut", "hu", "ui", "t", "y", "h", "ue", "un", "nu", "cu", "ur", "iu", "f", "e", "mu", "us", "b", "uu", "q", "w", "uid", "l", "m", "lu", "ru", "p", "up", "ou"], "v": ["o", "k", "ve", "uv", "j", "c", "d", "vm", "ver", "a", "vid", "vs", "int", "vt", "var", "s", "t", "id", "y", "g", "ip", "f", "e", "b", "q", "V", "w", "sv", "z", "vol", "l", "m", "li", "r", "p", "vi"], "x": ["k", "xp", "xi", "j", "c", "d", "data", "int", "ux", "t", "id", "y", "xml", "xxx", "ax", "h", "xt", "xxxx", "xe", "ix", "index", "ex", "xc", "f", "e", "X", "xx", "xf", "xes", "w", "z", "l", "m", "xs", "p"]}}
{"code": "n,a,b= list(map(int, input().split()))\\nif a>b:\\n    print(\"0\")\\n    exit(0)\\nif n==1:\\n    if a!=b:\\n        print(\"0\")\\n    else:\\n        print(\"1\")\\n    exit(0)\\nn-=2;b-=a;a=0\\nprint(b*n+1)", "target": "395", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "ac", "ny", "an", "num", "A", "t", "i", "y", "na", "g", "h", "nn", "un", "aa", "u", "net", "f", "e", "nt", "ns", "z", "l", "v", "m", "r", "nc", "p", "ne", "N"], "a": ["area", "o", "at", "x", "c", "aw", "d", "ak", "ab", "ac", "int", "an", "A", "fa", "i", "y", "alpha", "na", "sa", "aa", "u", "va", "f", "e", "am", "ad", "ca", "ga", "ai", "ae", "w", "z", "ba", "asa", "l", "aj", "p", "au"], "b": ["area", "o", "eb", "k", "x", "abb", "j", "c", "db", "d", "ob", "nb", "ab", "B", "s", "bi", "i", "y", "api", "bs", "g", "fb", "h", "abc", "ib", "beta", "number", "aa", "wb", "u", "lb", "e", "f", "base", "sb", "w", "z", "ba", "l", "v", "bb", "r", "p"]}}
{"code": "N=int(input()) \\nL = sorted([int(i) for i in input().split()], key=lambda x: x)\\n\\nfoodCount = 0\\nfor i in range(0,len(L), 2):\\n   foodCount += min(L[i], L[i+1])\\n\\nprint(foodCount)\\n", "target": "215", "substitutes": {"N": ["Node", "NA", "D", "S", "B", "Ns", "T", "n", "W", "Y", "Ni", "G", "Part", "Num", "NT", " n", "NN", "number", "I", "Number", "C", "NI", "V", "P", "K", "O", "M", "F"], "L": ["U", "UL", "LM", "D", "S", "CL", "LU", "VL", "Z", "R", "E", "LD", "LB", "LR", "NL", "B", "Lo", "T", "LS", "W", "Long", "Y", "LI", "G", "IL", "LP", "EL", "OL", "LOS", "SL", "LV", "BL", "Q", "LG", "LT", "I", "X", "C", "XL", "LL", "Lu", "V", "P", "K", "l", "DL", "O", "M", "F", "LA"], "i": ["mini", "pi", "di", "o", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "d", "yi", "phi", "ri", "a", "io", "int", "ind", "n", "ini", "ui", "bi", "id", "y", "info", "key", "ix", "index", "ip", "multi", "eni", "si", "u", "iu", "e", "I", "f", "ti", "b", "my", "mi", "ai", "z", "qi", "v", "l", "ii", "li", "ei", "p", "vi", "zi"], "foodCount": ["feedSum", "foodWeight", "foodLength", "Foodcount", "lengthSum", "feedLength", " foodWeight", " foodLength", "lengthCount", "feedcount", " foodcount", "lengthWeight", "feedWeight", "feedCount", "FoodWeight", "foodSum", " foodSum", "FoodCount", "lengthcount", "FoodLength", "foodcount"]}}
{"code": "def baseConv(n,ro,ri=10):\\n    n = int(str(n),base=ri)\\n    s = \"\"\\n    nums = \"0123456789abcdefghijklmnopqrstuvwxyz\"\\n    while n:\\n        s += nums[n%ro]\\n        n //= ro\\n    return s[::-1]\\n  \\nn,k = map(int,input().split())\\nprint(len(baseConv(n,k)))", "target": "719", "substitutes": {"n": ["o", "cn", "x", "j", "c", "np", "d", "ng", "node", "nb", " N", "name", "a", "num", "t", "ni", "i", "y", "nw", "mn", "na", "g", "en", "network", "inn", "nn", "nan", "un", "number", "nu", "nr", "u", "len", "net", "f", "nt", "fn", "rn", "b", "ns", "pn", "sn", "no", "w", "nor", "z", "dn", " ng", "l", "gn", "v", "r", "m", "nc", "p", "ne", "N"], "ro": ["core", "ron", "rd", "tro", "R", "rio", "roc", "ar", "ore", "redo", "sub", "ry", "lo", "pro", "ring", "aro", "re", "cro", "range", "rf", "i", "cho", "RO", "rc", "rg", "co", "rid", "ra", "ko", "row", "micro", "nr", "role", "rn", "rl", "rom", "ros", "Ro", "no", "nor", "rand", "r", "rob", "O", "ru", "io", "gro", "rot", "rin"], "ri": ["pi", "di", "uri", "rs", "rd", "xi", "ci", "rio", "ry", "ini", "rb", "ride", "ni", "i", "ski", "rt", "iri", "rx", "rid", "RI", "ris", "si", "nr", "ti", "mi", "pin", "ki", "stri", "ai", "li", "rob", "io", "rc", "rin"], "s": ["rs", "ls", "o", "S", "sync", "ings", "su", "fts", "c", "results", "ws", "ses", "sum", "sys", "ss", "abs", "ops", "uns", "os", "g", "comments", "sa", "blocks", "rows", "gs", "lines", " S", "items", "sq", "si", "size", "sets", "e", "sym", "us", "ps", "ns", "b", "ans", "sn", "es", "tests", "sb", "w", "l", "sg", " ss", "r", "conf", "words", "p", "ing"], "nums": ["Nums", "numubs", "coms", " noms", " nubs", " numes", "cums", "numums", "num", "nubs", "Num", "Nubs", "Numbers", "cumbers", "Noms", "noms", "numes", "cum", "Numes", "numumes", " num", "numumbers", "numbers", " numbers"], "k": ["kj", "ik", "o", "kn", "ke", "x", "kk", "j", "c", "d", "ijk", "mk", "ck", "num", "kick", "t", "i", "y", "sk", "ks", "ko", "kin", "u", "ki", "q", "kw", "z", "K", "v", "l", "m", "r", "p", "ku"]}}
{"code": "n = int(input())\\nl = list(map(int,input().split()))\\nans = 0\\nnow = l[0]\\ncount = 0\\nfor i in range(1,n):\\n    if now >= l[i]:\\n        now = l[i]\\n        count += 1\\n        ans = max(ans,count)\\n    else:\\n        count = 0\\n        now = l[i]\\nprint(max(ans,count))", "target": "623", "substitutes": {"n": ["o", "k", "x", "j", "c", "d", "nb", "s", "num", "t", "y", "nn", "span", "nl", "number", "size", "len", "f", "nt", "max", "b", "ns", "sn", "no", "nor", "z", "m", "r", "nc", "p", "N"], "l": ["el", "lp", "ls", "o", "loc", "k", "ol", "lf", "j", "c", "d", "left", "kl", "fl", "sl", "ll", "list", "s", "t", "L", "nl", "la", "lin", "u", "los", "len", "f", "e", "b", "dl", "lc", "v", "li", "m", "r", "ln", "p"], "ans": ["auto", "ls", "cycles", "nas", "ins", "a", "ars", "ants", "any", "amps", "int", "ens", "args", "vs", "an", "list", "s", "ops", "actions", " means", " spans", "ats", "cs", "ians", "anon", "atches", "annot", "na", "os", "anas", "ds", "orders", "ids", "nan", "nn", "rows", "lists", "can", "lines", " cases", "aned", "len", "leans", "ANS", "ann", "lan", "ns", " years", "no", "ani", "ano", "ays", "mean", " scans", "eps", "ln", "ons"], "now": ["auto", "after", "aw", "ready", "current", "low", "c", "node", "old", "a", "inst", "start", "app", "ager", "id", "today", "force", "ok", "self", "parent", "nn", "ow", "next", "age", "always", "once", "last", "size", "NOW", "oa", "default", "max", "since", "ann", "new", "no", "mean", "skip", "wait", "length", "order", "wh", "Now"], "count": ["core", "part", "type", "case", "first", "process", "c", "current", "catch", "sum", "nb", "name", "start", "app", "ind", "num", "list", "cache", "allow", "depth", "cc", "id", "weight", "ignore", "keep", "force", "cond", "parent", "span", "next", "handle", "number", "age", "always", "size", "len", "Count", "max", "f", "ann", "default", "code", "nt", "base", "new", "child", "found", "length", "skip", "order", "p", "call"], "i": ["pi", "di", "part", "uri", "k", "x", "xi", "j", "c", "gi", "ci", "a", "io", "ie", "start", "int", "ind", "num", "ini", "ui", "ni", "bi", "id", "y", "inner", "h", "ix", "index", "multi", "si", "u", "iu", "f", "I", "e", "end", "ai", "z", "qi", "v", "ii", "li", "p"]}}
