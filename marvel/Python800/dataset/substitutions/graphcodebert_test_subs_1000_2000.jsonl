{"code": "import sys\\nsys.setrecursionlimit(10**8)\\ndef ii(): return int(sys.stdin.readline())\\ndef mi(): return map(int, sys.stdin.readline().split())\\ndef li(): return list(map(int, sys.stdin.readline().split()))\\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\\ndef dp2(ini, i, j): return [[ini]*i for _ in range(j)]\\ndef dp3(ini, i, j, k): return [[[ini]*i for _ in range(j)] for _ in range(k)]\\n#import bisect #bisect.bisect_left(B, a)\\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\\n#from itertools import accumulate #list(accumulate(A))\\n\\nN, M = mi()\\nC = li()\\n\\n'''\\n# \u4e8c\u6b21\u5143DP\\ndp = dp2(float('inf'), N+1, M+1)\\ndp[0][0] = 0\\nfor i in range(1, M+1):\\n    for j in range(N+1):\\n        #if j == 0:\\n            #dp[i][j] = 0\\n        dp[i][j] = min(dp[i-1][j], dp[i][j])\\n        c = C[i-1]\\n        if j+c <= N:\\n            dp[i][j+c] = min(dp[i][j]+1, dp[i-1][j+c])\\n#print(dp)\\nprint(dp[M][N])\\n'''\\n\\n# 1\u6b21\u5143DP\\ndp = [float('inf') for i in range(N+1)]\\ndp[0] = 0\\n\\nfor i in range(M):\\n    for j in range(N+1):\\n        c = C[i]\\n        if j+c <= N:\\n            dp[j+c] = min(dp[j]+1, dp[j+c])\\n\\nprint(dp[N])\\n", "target": "286", "substitutes": {"N": ["Num", "K", "C", "Sn", "R", "Ni", "CNN", "NB", "NI", "M", "NR", "MN", "Na", "NP", "NA", "ND", "NT", "D", "NS", "NM", "L", "TN", "P", "GN", "J", "n", "V", "I", "Ns", "NC", "NO", "NN", "NH"], "_": ["pt", "m", "l", "all", "ing", "t", " on", " success", "__", "place", " __", "mod", "val", " time", "ml", " new", "L", "mt", "P", " the", "int", " all", "I", "___", "on", "x", " an"], "ini": ["ine", "ri", "mind", "zi", "cli", "pin", "ni", "py", "ti", "ci", "ji", "ani", "eric", "gi", "hi", "ki", "phi", "ami", "inis", "eni", "ind", "id", "di", "ik", "bi", "vi", "pi", "cfg", "fi", "ai", "ina", "ii", "xi", "iri", "si", "ic", "reci", "li", "umi", "ui", "mi", "iki", "ski", "init"], "i": ["f", "io", "zi", "\u00ed", "m", "y", "ix", "ti", "ip", "ci", "ji", "gi", "v", "ij", "hi", "phi", "ami", "ie", "id", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "x", "ui", "mi", "iu", "im"], "j": ["z", "str", "out", "obj", "jl", "pr", "ja", "xy", "l", "y", "jp", "ji", "err", "v", "json", "ij", "job", "q", "g", "jac", "er", "next", "p", "bi", "br", "gov", "kj", "jas", "it", "jj", "jump", "tr", "aj", "J", "n", "o", "bs", "uj", "dj", "us", "js", "jc"], "k": ["z", "dk", "K", "m", "kr", "kind", "kh", "uk", "ka", "ck", "kl", "ikk", "kk", "kan", "ke", "mk", "ki", "ak", "kn", "ijk", "wk", "ik", "p", "km", "kj", "ek", "kw", "tk", "sk", "ko", "ku", "ks"]}}
{"code": "n,a,b = map(int,input().split())\\n\\nminans = a*(n-1)+b\\nmaxans = a+b*(n-1)\\n\\nif a>b or (n==1 and a!=b):\\n    print(0)\\nelse:\\n    print(maxans-minans+1)", "target": "395", "substitutes": {"n": ["z", "f", "nn", "min", "names", "m", "l", "nt", "t", "number", "name", "s", "N", "i", "len", "ns", "mn", "en", "r", "v", "na", "c", "long", "sn", "an", "h", "g", "q", "cn", "nu", "nb", "num", "d", "size", "p", "j", "ne", "e", "np", "nc", "o", "w", "no", "x"], "a": ["ba", "add", "ack", "apa", "m", "ae", "att", "ta", "l", "t", "sta", "au", "ga", "i", "A", "ca", "r", "la", "at", "na", "c", "ea", "an", "ity", "area", "d", "p", "alpha", "ao", "app", "act", "oa", "sa", "ai", "aq", "aa", "aj", "al", "ac", "abs", "ma", "o", "u", "ia", "ab", "eas", "aaa", "x", "ar", "ach", "am", "aff"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "big", "by", "s", "i", "cb", "fb", "r", "db", "v", "c", "h", "g", "nb", "d", "p", "bt", "bi", "br", "j", "e", "sb", "gb", "beta", "ub", "bs", "u", "w", "B", "ab", "bb", "body", "base"], "minans": [" minins", "minan", "minsens", "minsanas", "minsans", " minens", " minan", " minents", "minimumins", "minens", "minimumans", "minos", "modanas", "minents", "MINans", "minins", "MINan", "modens", "MINins", "MINos", "minsents", " minanas", "modans", "minanas", "modents", "minimumos", "minimuman", " minos"], "maxans": ["maxants", "axans", "totalans", "totalants", "Maxids", "maximumants", " maxanners", "Maxens", "maxids", "totalanners", "totalns", "maximumens", "maxens", " maxens", "axanners", "axns", "maxanners", " maxids", "Maxans", "maximumids", "maxns", "Maxants", " maxns", "maximumans", "axants", " maxants"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\nanswer = 0\\n\\nwhile(True):\\n\tfor i in range(n):\\n\t\tif a[i] % 2 == 0:\\n\t\t\ta[i] = a[i] / 2\\n\t\telse:\\n\t\t\tprint(answer)\\n\t\t\texit()\\n\tanswer += 1", "target": "659", "substitutes": {"n": ["nn", "nw", "nia", "m", "ni", "nt", "t", "number", "nr", "N", "ns", "mn", "r", "v", "na", "c", "ln", "sn", "q", "an", "g", "cn", "nu", "nb", "rn", "num", "d", "p", "dn", "j", "ne", "gn", "np", "nc", "o", "no", "nl", "x"], "a": ["z", "f", "ba", "arr", "array", "qa", "m", "ap", "am", "ta", "ae", "another", "l", "all", "t", "sta", "ga", "au", "s", "xa", "A", "ca", "input", "at", "now", "history", "na", "c", "wa", "ea", "index", "b", "area", "ce", "p", "va", "alpha", "ao", "window", "oa", "form", "e", "sa", "ai", "ata", "aa", "ac", "ma", "w", "ia", "ab", "eas", "an", "data", "new"], "answer": ["expression", "ve", "know", "message", "onse", "line", "uno", "vote", "score", "order", "number", "wer", "result", "say", "reply", "answered", "value", "interpret", "vantage", "status", "quote", "query", "anova", "index", "term", "q", "ate", "position", "eni", "ze", "option", "version", "ask", "window", "zero", "ai", "address", "aq", "energy", "average", "Answer", "swers", "sequence", "response", "question", "an"], "i": ["io", "ini", "ei", "ri", "zi", "m", "cli", "uri", "y", "ix", "ti", "ip", "key", "ci", "k", "ji", "gi", "v", "ij", "ori", "oi", "index", "ki", "q", "phi", "yi", "sim", "ind", "id", "di", "ik", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "ic", "uni", "li", "I", "u", "ici", "x", "ui", "mi", "iu", "im", "init"]}}
{"code": "Score = int(input())\\n\\nNumero = 0\\n\\nfor i in range (1, 10000000):\\n\tif i*(i+1)/2 >= Score:\\n\t\tNumero = i\\n\t\tbreak\\n\\nK = Numero\\n\\nP = []\\n\\nfor i in range (0, K):\\n\tif Score >= (K-i):\\n\t\tP.append(K-i)\\n\t\tScore = Score - (K-i)\\n\\nP = reversed(P)\\n\\nprint(*P, sep = \"\\n\")", "target": "389", "substitutes": {"Score": ["Number", "Name", "Time", "Num", "SI", "sc", "Success", "Gold", "Si", "Total", "Pos", "Limit", "Last", "score", "Ni", "Sum", "Next", "Set", "Index", "Sol", "Core", "Style", "N", "Ser", "Speed", "Weight", "Type", "Length", "Order", "Exp", "Er", "Status", "Size", "Count", "Rank", "S", "Scale", "E", "Te", "Best", "New", "Match", "Sc", "Ping", "Key", "Rate", "Error", "Sad", "Value", "Sk", "Result", " score", "Zero", "Summary", "Note", "I", "Copy", "SC", "PI", "Test", "Proof", "Pri", "Balance", "Rat", "Base"], "Numero": ["numrica", "numero", "Nator", "Nero", "NUMera", "numro", " Numrica", " Numro", "umrica", "Numico", "Numrica", "numico", "Numator", "ummeric", "NUMero", " Numico", " Numeria", "nummeric", "Nummeric", "numer", " Numer", "numera", "Ner", "Numera", " Numator", "Nico", "umico", "Numro", " Nummeric", "NUMeria", " Numera", "NUMro", "numator", "umero", "Numeria", "numeria", "Numer"], "i": ["z", "f", "Num", "io", "ei", "ini", "zi", "\u00ed", "m", "Si", "iq", "a", "l", "y", "Ni", "t", "ix", "ti", "Index", "s", "N", "ci", "k", "ji", "ip", "key", "Ti", "v", "gi", "ij", "c", "index", "ki", "q", "phi", "b", "ity", "Pi", "yi", "id", "di", "ik", "Xi", " Xi", "num", "p", "bi", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "o", "li", "I", "ia", "Mi", "u", "ic", "x", "mi", "im"], "K": ["Y", "He", "FK", "PK", "H", "C", "X", "F", "KK", "R", "Last", "SK", "G", "Rem", "W", "N", "M", "A", "k", "BC", "KR", "KB", "KI", "Mask", "KS", "U", "S", "E", "O", "KING", "Sc", "UK", "L", "Q", " k", "MS", "T", "J", "Z", "KEY", "V", "I", "B", "KC", "Set"], "P": ["Y", "PF", "GP", "PK", "IP", "H", "C", "PD", "X", "ARP", "R", "Print", "G", "PS", "W", "Pod", "N", "M", "PA", "A", "PO", "PU", "NP", "PE", "S", "Path", "These", "O", "PR", "Part", "D", "All", "Array", "PIN", "p", "L", "TP", "SP", "PP", "Q", "FP", "T", "DP", "J", "AP", "Pad", "V", "I", "B", "LP", "PI", "Ps", "CP", "PUT", "vP", "PT", "BP"]}}
{"code": "n, p = map(int, input().split())\\n\\ns = input()\\n\\nruisekiwa = [0 for _ in range(0, n + 1)]\\nif 10 % p == 0:\\n    ans = 0\\n    for i in range(0, n):\\n        if (ord(s[i]) - ord('0')) % p == 0:\\n            ans += i + 1\\n    print(ans)\\n    exit()\\n\\nten = 1\\nfor _i in range(0, n):\\n    i = n - _i - 1\\n    ruisekiwa[n - i] = ((ord(s[i]) - ord('0')) * ten + ruisekiwa[n - i - 1]) % p\\n    ten *= 10\\n    ten %= p\\n\\nans = 0\\ncnt = [0 for _ in range(0, p)]\\nfor i in range(0, n+1):\\n    ans += cnt[ruisekiwa[i]]\\n    cnt[ruisekiwa[i]] += 1\\n\\nprint(ans)\\n", "target": "448", "substitutes": {"n": ["z", "nn", "out", "names", "m", "l", "y", "nt", "t", "name", "N", "fn", "ns", "mn", "en", "r", "un", "at", "v", "na", "c", "ren", "ln", "sn", "an", "b", "h", "g", "wn", "cn", "nu", "nb", "num", "d", "size", "dn", "j", "ne", "inn", "net", "gn", "np", "nan", "nc", "o", "w", "no", "x", "on", "pn", "ll", "new"], "p": ["op", "ps", "pe", "f", "pt", "m", "ap", "l", "t", "bp", " P", "pb", "pp", "r", "tp", "jp", "k", "v", "perm", "pa", "c", "pm", "q", "b", "post", "g", "h", "pre", "d", "change", "power", "j", "pi", "cp", "pl", "pun", "P", "e", "np", "pc", "o", "w", "part", "u", "pid", "wp", "x", "pn", "pro", "new", "pg"], "s": ["ps", "sts", "str", "sv", "ws", "ls", "fs", "a", "spec", "rs", "gs", "ms", "ins", "ns", "r", "sp", "sl", "c", "ys", "b", "S", "ss", "ds", "sb", "sa", "its", "bs", "sq", "ats", "st", "ts", "qs", "js"], "ruisekiwa": ["ruisekowa", "ruisekewt", "ruisekeawa", "ruisekiw", "ruisekuwt", "ruiserkiwt", "ruisekeha", "ruisationkiwt", "ruisingckiha", "ruisingckiwa", "ruiseckiha", "ruiseskiws", "ruisekiWa", "ruiseckiwa", "ruisingkiha", "ruisekuw", "ruisedkiWa", "ruisationskiha", "ruiseckiws", "ruisekawt", "ruisekiawa", "ruisationskiwt", "ruisekuha", "ruisekiwt", "ruisingkiwa", "ruisationkiha", "ruisedskiw", "ruisekiha", "ruiseskija", "ruiseskiw", "ruiserkaja", "ruisekewa", "ruisingckija", "ruiseskiawa", "ruisedkiwa", "ruisekaja", "ruisedskija", "ruiseskuha", "ruisationkiwa", "ruisationskiawa", "ruiseskuwt", "ruiserkiha", "ruiseskiWa", "ruisingkiws", "ruisekija", "ruiseckija", "ruiserkiwa", "ruisedkija", "ruiserkaha", "ruisekuws", "ruiseskiha", "ruiseskuwa", "ruisationkiawa", "ruisekeja", "ruisekuja", "ruisationskiwa", "ruisekaha", "ruiserkawt", "ruisekawa", "ruisekow", "ruiseskuw", "ruiseskiwa", "ruiserkija", "ruisedskiWa", "ruiseskiwt", "ruisedskiwa", "ruisekaWa", "ruiserkawa", "ruisingkija", "ruisekuwa", "ruisekuawa", "ruisingckiws", "ruisedkiw", "ruisekaw", "ruisekoWa", "ruisekoja", "ruisekiws"], "_": ["pt", "all", "py", "t", "un", "__", "place", "g", "ct", "val", "ml", "ox", "P", "lex", "___", "list", "non", "on"], "ans": ["ees", "ens", "wan", "cas", "ls", " scans", "annot", "mas", "aned", "AN", "oss", "anc", "pan", "cons", "amps", " fans", "iann", "ins", "anas", "ms", "aus", "ons", "ns", "ann", " orphans", " Ans", "aps", "aos", "arts", "ents", "ians", "ums", "angs", "rans", "anners", "ands", "eds", "posts", "said", " pan", "yes", " means", "vs", "ANS", "can", "uns", "nas", "offs", "ints", "anes", "nan", "ams", "ads", " spans", "ras", "ces", "ats", "ros", "vals", "ana", "an", "ants", "scan", "lan"], "i": ["ini", "ei", "ish", "ri", "zi", "\u00ed", "m", "cli", "a", "l", "y", "ite", "ix", "ti", "info", "ed", "ip", "ci", "\u0438", "ji", "gi", "v", "gu", "ij", "c", "hi", "index", "oi", "ki", "phi", "b", "g", "ami", "yi", "ind", "id", "di", "ik", "iat", "ih", "bi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "iri", "me", "x", "ui", "mi", "iu", "im"], "ten": ["rent", "ens", "men", "pak", "mon", "ta", "nine", "five", "floor", "two", "t", "common", "second", "tin", "au", "teen", "den", " Ten", "mn", "en", "div", "sten", "token", "final", "lett", "ren", "factor", "true", "scale", "pent", "von", "sen", "tan", "mont", "six", "mint", "te", "mult", "next", "wu", "fort", "zero", "fen", "padding", "wt", "const", "integer", "ven", "tun", "Ten", "ts", "prime", "pn", "onen"], "_i": ["_mi", "_ci", " _oi", "Ioi", " _n", "_iu", "_oi", "_n", "In", "Imi", "Iiu", " _iu", "Ici", "Ii"], "cnt": [" ctr", "nmd", "pnd", "Ctr", " cnd", "pcount", "Cnd", "Cpt", "Ccount", "pct", "CNT", " cpt", "Cmd", "cNT", "Cct", "nNT", "ccount", "Cnt", "cmd", "npt", "cctr", "ctr", "cccount", " cNT", "ccct", "nnt", "ccnt", "cnd", "cct", " cct", "pnt", " cmd", " ccount", "cpt"]}}
{"code": "h, w = map(int, input().split())\\ntizu = [list(input()) for _ in range(h)]\\npos = 1\\nfor row in tizu:\\n    pos -= 1\\n    for i, index in enumerate(row):\\n        if i == pos:\\n            if index == \"#\":\\n                pos += 1\\n        else:\\n            if index == \"#\":\\n                print(\"Impossible\")\\n                exit()\\nprint(\"Possible\")", "target": "243", "substitutes": {"h": ["f", "he", "H", "m", "l", "ha", "y", "hei", "t", "r", "k", "ch", "v", "hs", "hi", "zh", "b", "hd", "d", "ih", "p", "host", "height", "ht", "oh", "hw", "hl", "n", "hr", "hh", "sh", "x", "head", "his"], "w": ["z", "nw", "max", "ws", "m", "wh", "l", "t", "W", "r", "sw", "v", "wa", "length", "c", "wl", "d", "p", "col", "window", "rw", "wt", "wid", "ew", "n", "x", "wi", "width"], "tizu": [" tisu", "miza", "misu", "miu", "Tizu", "tudi", "vtizu", "vtiu", "Tudi", "rtiu", " tomnia", "mizu", "tisu", " tudi", "rtomnia", "Tiu", "vtisu", " tiu", "rtizu", "vtiza", "tomnia", "tiza", "tiu", " tiza", "Tomnia", "rtudi"], "_": [" int", "all", "name", "un", " each", "val", " get", " l", " the", "int", " all"], "pos": ["op", "ps", "min", "offset", "out", "tmp", "pr", "pt", "top", "off", "Pos", "cond", "rot", "to", "os", "con", "len", "point", "res", "pose", "limit", "start", "mod", "position", "yes", "val", "ind", "num", "cos", "next", "p", "exp", "col", "pi", "pl", "j", "trans", "client", "po", "conf", "loc", "pid", "rel", "x", "head", "body", "pro", "POS"], "row": ["rown", "line", "range", "node", "name", "board", "ow", "month", "ix", "raw", "key", "rc", "sw", "Row", "res", "value", "r", "item", "post", "ex", "th", "id", "rows", "col", "frame", "ro", "word", "record", "ry", "ox", "tr", "loc", "cell", "instance", "ob", "rec", "week", "nce", "roll", "entry", "ows"], "i": ["f", "ini", "ri", "zi", "a", "l", "y", "ti", "ci", "ati", "ij", "ori", "ki", "yi", " ii", "di", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "iri", "n", "li", "I", "x", "ui", "mi"], "index": ["ion", "line", "gate", "ene", "ice", " sidx", "node", "action", "name", "number", "ix", "Index", "point", "key", "ax", "tex", "value", "missing", "condition", "alse", "ex", "position", "val", "ind", "id", "di", "num", "path", "axis", "alias", "none", "ai", "column", "int", "address", "then", "si", "loc", "instance", "n", "connection", "x", "link", "cation", "oin"]}}
{"code": "s = input()\\nmodify = '2018'+ s[4:]\\n\\nprint(modify)\\n", "target": "49", "substitutes": {"s": ["z", "f", "sts", "str", "sv", "m", "y", "t", "gs", "i", "ns", "r", "input", "v", "sp", "c", "h", "q", "b", "start", "g", "S", "p", "ss", "j", "e", "sb", "ashes", "n", "bs", "sq", "w", "print", "ats", "ts", "qs"], "modify": ["manified", "mutification", "manit", " modifi", "cleanify", "minare", "modified", "minification", "cleanification", "cleanified", "purifi", "mutify", "minified", "manify", "purify", " modified", "modifi", "purified", "mutare", "purit", " modit", "minify", "modification", "mutified", "manifi", "modit", "modare", "cleanare"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\n\\n\\ndef main():\\n    k = int(input())\\n    if k % 2 == 0: print((k // 2) ** 2)\\n    if k % 2 != 0: print(((k - 1) // 2) * (k + 1) // 2)\\n    \\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "402", "substitutes": {"k": ["dk", "z", "kil", "K", "m", "kind", "kr", "kh", "uk", "ka", "l", "ck", "kl", "ikk", "i", "kick", "kk", "ok", "ke", "kan", "kid", "key", "mk", "ki", "q", "g", "ak", "unk", "ijk", "ik", "d", "kie", "kok", "km", "j", "kb", "kj", "ek", "aka", "kw", "tk", "tek", "learn", "n", "ac", "w", "sk", "ko", "ku", "ks", "ack"]}}
{"code": "N, M, P = map(int, input().split())\\n\\nv = [[] for _ in range(N)]\\nabc = []\\nfor _ in range(M) :\\n    a, b, c = map(int, input().split())\\n    v[b-1].append((a-1, -(c-P)))\\n    \\nvisited = [False] * N\\nvisited[N-1] = True\\nqueue = [N-1]\\nwhile queue :\\n    cur = queue.pop()\\n    for nex, cost in v[cur] :\\n        if not visited[nex] :\\n            queue.append(nex)\\n            visited[nex] = True\\n        abc.append((nex, cur, cost))\\n        \\ndist = [float('inf')] * N\\ndist[0] = 0\\n\\ndef bellmanford() :\\n    for i in range(N) :\\n        for a, b, c in abc :\\n            if dist[a] + c < dist[b] :\\n                dist[b] = dist[a] + c\\n                if i == N-1 :\\n                    return True\\n    return False\\n    \\nif bellmanford() :\\n    print(-1)\\nelse :\\n    print(max(0, -dist[N-1]))\\n", "target": "88", "substitutes": {"N": ["Y", "Num", "K", "NE", "H", "C", "AN", "F", "R", "Ni", "CNN", "G", "NB", "NI", "NG", "NV", "NR", "A", "MN", "CN", "Len", "NL", "NP", "NA", "S", "E", "ND", "O", "Ne", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "M": ["K", "m", "C", "MP", "H", "F", "R", "G", "MT", "MR", "LM", "CM", "Mon", "MI", "MN", "A", "MC", "MM", "S", "E", "O", "D", "NM", "My", "MS", "MAN", "T", "J", "V", "RM", "I", "B"], "P": ["K", "PK", "H", "C", "F", "R", "PM", "G", "A", "PO", "PC", "NP", "U", "S", "E", "D", "p", "L", "TP", "PP", "Q", "T", "DP", "XP", "J", "V", "I", "B", "CP", "PT"], "v": ["vec", "f", "values", "vo", "sv", "conv", "vv", "m", "qv", "t", "s", "k", "vp", "vin", "h", "q", "g", "csv", "tv", "vs", "nv", "d", "p", "va", "vi", "j", "vt", "n", "uv", "V", "vr", "w", "u", "x", "vals", "vc", "cv"], "_": ["let", " un", "pt", " int", "ing", "__", "place", "val", " time", " the", " pre", "___", "x"], "abc": ["vec", "rb", "arr", "org", "oc", "mc", "qv", "bl", "cons", "bc", "au", "pb", "fab", "cb", "ABC", "rc", "etc", "lb", "co", "exc", "arc", "roc", "irc", "lc", "lib", "auc", "aux", "lab", "alpha", "buf", "xc", "dc", "np", "fc", "conf", "ac", "abs", "ob", "nc", "ic", "court", "uv", "cache", "ab", "obs", "bs"], "a": ["ba", "apa", "ap", "m", "ae", "att", "ta", "ka", "ha", "sta", "au", "ga", "xa", "A", "ca", "at", "la", "pa", "ea", "an", "era", "g", "ak", "ami", "area", "va", "p", "alpha", "ao", "j", "app", "oa", "aka", "e", "isa", "sa", "ai", "ana", "ata", "aq", "aa", "aj", "ac", "ma", "ia", "ab", "arg", "aaa", "ar", "ach", "am"], "b": ["f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "bp", "back", "bg", "cb", "r", "fb", "A", "bh", "lb", "h", "g", "nb", "d", "p", "bi", "abb", "j", "e", "sb", "gb", "n", "ob", "o", "bs", "u", "B", "ab", "x", "bb"], "c": ["z", "f", "mc", "m", "C", "cr", "cs", "l", "t", "bc", "cf", "con", "rc", "cin", "ci", "k", "cb", "ca", "r", "co", "h", "lc", "g", "cc", "ct", "unc", "ce", "d", "cos", "p", "can", "col", "cp", "ec", "com", "xc", "e", "cmp", "cd", "dc", "fc", "n", "ac", "tc", "cu", "u", "ic", "w", "x", "cm"], "visited": ["vited", "visached", "physited", "viewitted", "versits", "comited", "Visited", "viewits", "physitted", "visits", "VISit", "Visached", "expitted", "Visitted", "comitted", "VISiter", "comiting", "comits", "visitted", "vits", "VISited", "physiting", "expited", "expached", "visiting", "physits", "vitted", "viewited", "expiter", "VISitted", "VISached", "vit", "visiter", "visit", "VISits", "viewit", "Visiter", "versit", "versited", "VISiting", "versitted"], "queue": ["ued", "wait", "ques", "line", "qa", "blog", "qv", "bl", "order", "que", "seq", "cycle", "channel", "stack", "ue", "buffer", "vre", "age", "status", "quote", "forced", "journal", "vp", "empty", "index", "dq", "rue", "q", "store", "gc", "menu", "tube", "test", "force", "next", "buf", "required", "late", "Q", "Queue", "current", "enabled", "league", "priority", "cache", "batch", "sequence", "iter", "quit", "list", "update", "Que", "count", "qu"], "cur": ["cas", "sc", "cat", "cr", "sr", "Cur", "you", "ret", "cs", "cycle", "row", "con", "ptr", "rc", "r", "ver", "ch", "now", "co", "ren", "lc", "gc", "ct", "sen", "catch", "ce", "cont", "char", "ctr", "col", "cp", "cre", "ry", "const", "current", "dc", "tr", "ur", "pri", "nc", "loc", "cu", "sur", " Cur", "cor", "currently", "ser", "car", "pg"], "nex": ["vet", "nw", "rex", "ws", "ele", "nic", "yx", "yn", "kt", "nit", "nt", "sex", "ix", "nr", "atever", "nec", "xx", "mn", "vre", "tex", "ctor", "res", "eric", "nette", "na", "ij", "mes", "sn", "rue", "ther", "nexus", "wn", "ex", "kn", "sen", "wy", "ny", "nox", "cn", "fx", "von", "ross", "tz", "nat", "cki", "ds", "ne", "pex", "gex", "nz", "nel", "lex", "nc", "ez", "x", "some", "nes", "tx"], "cost": ["add", "ws", "sum", "gross", "rice", "loss", "CO", "oss", " costs", "charge", "eff", "acc", "jack", "amount", "cons", "tt", "cf", "case", "Cost", "key", "value", "co", "length", "cc", "cos", "func", "end", "const", "dc", "nz", "weight", "nc", "left", "coin", "count", "fee", "st", "pg"], "dist": ["Distance", "stats", "max", "diff", "pt", "sum", "des", "pred", "desc", "range", "label", "df", "dest", "score", "dev", "nt", "t", "driver", "wd", "dict", "dd", "fn", "shape", "density", "dt", "ptr", "adj", "dim", "err", "len", "history", "dx", "length", "sd", "index", "dq", "dis", "distance", "depth", "ist", "ind", "lib", "d", "size", "mem", "dl", "dn", "da", "tip", "sort", "exp", "dep", "progress", "pdf", "cd", "np", "weight", "rank", "loc", "delay", "dj", "help", "dr", "norm", "req", "Dist", "hist", "count", "hp", "shift"], "i": ["ini", "ei", "ri", "zi", "ni", "l", "ti", "ci", "k", "ji", "ati", "gi", "hi", "oi", "phi", "yi", " ii", "di", "Xi", "p", "bi", "j", "pi", "fi", "ai", "it", "ii", "xi", "si", "n", "ic", "o", "I", "li", "x", "iti"]}}
{"code": "x , y , z , k = map(int,input().split())\\na = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\nc = list(map(int,input().split()))\\nab = []\\nfor i in a:\\n    for j in b:\\n        ab.append(i+j)\\nab.sort(reverse=True)\\nab = ab[:k]\\nabc = []\\nfor i in ab:\\n    for j in c:\\n        abc.append(i+j)\\nabc.sort(reverse=True)\\nfor i in range(k):\\n    print(abc[i])", "target": "403", "substitutes": {"x": ["f", "m", "X", "xy", "l", "t", "ix", "s", "xx", "r", "v", "dx", "h", "q", "g", "ie", "d", "p", "e", "xi", "n", "o", "w", "u"], "y": ["Y", "yz", "ey", "yl", "yn", "m", "xy", "py", "t", "iy", "yy", "r", "ch", "yt", "v", "ij", "h", "g", "ies", "p", "e", "n", "o"], "z": ["f", "yz", "oz", "zi", "m", "zip", "xy", "l", "t", "iz", "uz", "hz", "ch", "v", "az", "cz", "h", "q", "zh", "ze", "d", "tz", "p", "zone", "e", "nz", "Z", "w"], "k": ["dk", "K", "m", "kind", "kr", "kh", "ka", "ck", "kl", "key", "kk", "ke", "kid", "v", "mk", "ki", "q", "kn", "ijk", "wk", "ik", "num", "size", "kok", "p", "km", "kb", "kj", "ek", "kw", "n", "o", "sk", "ko", "ku", "ks"], "a": ["ba", "abe", "apa", "ap", "ae", "l", "au", "af", "xa", "A", "ca", "at", "la", "ea", "an", "area", "p", "va", "alpha", "ao", "oa", "e", "sa", "ai", "aq", "aa", "aj", "al", "ac", "abs", "n", "ah", "aaa", "ar", "am", "aff"], "b": ["rb", "ba", "ib", "bl", "be", "l", "t", "bc", "pb", "cb", "fb", "r", "v", "h", "g", "d", "p", "bt", "bi", "abb", "bf", "e", "n", "ob", "bs", "u", "B", "bb", "eb"], "c": ["f", "sc", "C", "cr", "l", "t", "bc", "cf", "ci", "cb", "r", "ca", "ch", "v", "h", "cv", "lc", "g", "cc", "ct", "d", "p", "col", "ec", "xc", "e", "cd", "dc", "n", "ac", "tc", "u", "vc", "cm"], "ab": ["rb", "ba", "ib", "ag", "arr", "abe", "abis", "apa", "ap", "am", "ae", "bl", "att", "Ab", "be", "bc", "af", "au", "pb", "ax", "fab", "aus", "ABC", "ca", "fb", "lb", "acs", "aps", "at", "ij", "az", "stab", "abi", "rab", "lam", "emb", "ah", "lab", "ada", "abb", "alph", "com", "app", "av", "ai", "abin", "aq", "aa", "abs", "ob", "ub", "ac", "AB", "aut", "tab", "bs", "abl", "bag", "eas", "um", "obs", "bb", "ar", "apps", "an", "ast", "eb", "hab"], "i": ["f", "ini", "ri", "zi", "cli", "uri", "m", " bi", " vi", "ir", "l", "t", "ix", "iy", "ti", "ip", "ci", "ji", "ati", "gi", "v", "adi", "ij", "hi", "oi", "index", "ki", "q", "phi", "yi", "ind", "id", " ii", "di", "ik", "Xi", " Xi", "p", "bi", "pi", "fi", "qi", "e", "isi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", " Ki", "li", "u", " di", "I", "iti", "mi", "iu", "ui"], "j": ["f", "str", "obj", "let", "pr", "m", "iaz", "ja", "l", "t", " dj", "jp", "ji", "ch", "err", "r", "gi", "v", "json", "Ja", "ij", "h", "q", "je", "g", "d", "p", "oj", "jo", "kj", "jas", "e", "it", "jj", " ja", "aj", "J", "n", "ju", "o", "uj", "dj", "w", "bj", "js", "jc"], "abc": ["rb", "erb", "apa", "abet", "bl", "acon", "anc", "ext", "bc", "au", "pb", "af", "fab", "ABC", "cb", "asc", "aus", "etc", "err", "acs", "fb", "icc", "exc", "arc", "ops", "roc", "gc", "lc", "stab", "toc", "lam", "wb", "unc", "lib", "abi", "auc", "aux", "emb", "lab", "frac", "abb", "alph", "ec", "xc", "abin", "dc", "gb", "aq", "fc", "conf", "ac", "ob", "abs", "arb", "AB", "ub", "abl", "obs", "aaa", "eb", "hab"]}}
{"code": "s=input()\\nn=len(s)\\nmod=10**9+7\\ndp=[[0]*13 for _ in range(n+1)]\\ndp[0][0]=1\\nmul=1\\n\\nfor i in range(n):\\n    x=s[-(i+1)]  # \u5f8c\u308d\u304b\u3089\u898b\u3066\u3044\u304f\\n    if x=='?':\\n        for k in range(10):\\n            for j in range(13):\\n                dp[i+1][(mul*k+j)%13]+=dp[i][j]\\n                dp[i+1][(mul*k+j)%13]%=mod\\n    else:\\n        k=int(x)\\n        for j in range(13):\\n            dp[i+1][(mul*k+j)%13]+=dp[i][j]\\n            dp[i+1][(mul*k+j)%13]%=mod\\n    mul=mul*10%13\\n# print(dp)\\nprint(dp[n][5])\\n", "target": "798", "substitutes": {"s": ["f", "ps", "sts", "str", "ws", "m", "a", "l", "rs", "t", "y", "gs", "ins", "ns", "r", "v", "sp", "c", "h", "q", "b", "g", "S", "string", "d", "p", "ss", "ds", "self", "e", "sb", "bs", "w", "ats", "ts", "qs", "js"], "n": ["nn", "m", "l", "y", "nt", "t", "N", "len", "ns", "mn", "k", "r", "nm", "na", "c", "sn", "q", "b", "h", "g", "nd", "nu", "nb", "num", "d", "p", "dn", "j", "ne", "nor", "np", "nan", "nc", "o", "no", "nl"], "mod": ["sub", "add", "min", "sum", "inv", "div", "mk", "scale", "mp", " Mod", "mult", "fun", "exp", "da", "pi", "Mod", "ai", "mix", " pow", "MOD", "dec", "prime", "cm", "base"], "dp": ["dk", "ps", "ld", "deb", "adr", "df", "wd", "dos", "pb", "pp", "dd", "jp", "tp", "dt", "db", "dx", "vp", "dq", "fp", "di", "pd", "d", "du", "p", "dl", "dep", "da", "ds", "lp", "cp", "td", "tap", "dial", "cd", "dc", "np", "DP", "dh", "delay", "dr"], "_": ["ay", "all", "name", "ix", " m", " j", "__", " __", " p", "val", " e", " c", " k", "I"], "mul": ["emul", "emuls", "pmuls", "rmuls", "muli", "mult", "pmult", "emuli", "rmuli", "rmul", "pmuli", "muls", "rmult", "pmul", "emult"], "i": ["z", "f", "ini", "zi", "m", "l", "y", "t", "ix", "ti", "ip", "ci", "k", "ji", "v", " j", "ij", "c", "h", "q", "yi", "ind", "id", "di", "p", "j", "fi", "qi", "it", "ii", "xi", "si", "ic", "I", "li", "ui", "mi", "iu", "im"], "x": ["z", "f", "xes", "xp", "X", "ux", "y", "ix", "xs", "xx", "v", "xt", "dx", "c", "mx", "ex", "fx", "p", "rx", "xc", "e", "xe", "xi", "w", "u", "px", "tx"]}}
{"code": "X,K,D = map(int,input().split())\\nX = abs(X)\\nX_div_D = X//D\\n\\nans_min = X % D\\n\\nif K <= X_div_D:\\n  print(X - K * D)\\nelse:\\n  if (K % 2) ^ (X_div_D % 2) == 0:\\n    print(ans_min)\\n  else:\\n    print(abs(ans_min - D))", "target": "66", "substitutes": {"X": ["Y", "Time", "UX", "Data", "H", "C", "XL", "Long", "F", "MX", "R", "W", "Check", "N", "M", "A", "Length", "OX", "U", "Int", "XXX", "S", "DX", "E", "EX", "Array", "Cross", "Key", "L", "Right", "Win", "P", "Q", "Value", "ZX", "XM", "T", "XP", "J", "XX", "Z", "V", "I", "Form", "Ex", "x", "IX", "TX"], "K": ["HK", "Y", "KA", "FK", "PK", "H", "C", "KK", "R", "SK", "G", "Ak", "Han", "Ka", "N", "M", "A", "k", "KB", "KR", "IK", "KI", "Mask", "KS", "S", "E", "VK", "KING", "UK", "L", "DK", "Kin", "P", "Q", "KE", "T", "J", "Z", "V", "B", "Kind", "KC", "Power", "MK", "AK"], "D": ["DN", "Y", "DL", "DB", "PD", "C", "F", "R", "Do", "DF", "W", "DD", "FD", "N", "M", "A", "Ds", "Length", "DA", "S", "DIR", "DX", "E", "O", "DT", "Dir", "DS", "Daniel", "d", "DH", "L", "DOM", "GO", "P", "DR", "Q", "DM", "DP", "T", "Z", "V", "I", "B", "DOS", "DE", "DC", "DO", "DI"], "X_div_D": ["X_mod_D", "X_mod__DM", "X_div_M", "X_scale_D", "X_Div_B", "X_div_S", "X_div_G", "X_scale_S", "X_div__A", "X_div__DS", "X_mod_G", "X_div__DM", "X_scale_A", "X_div_B", "X_div__G", "X_div__S", "X_mod__G", "X_div_R", "X_Div_M", "X_div_A", "X_Div_R", "X_div_DS", "X_div__D", "X_scale_DS", "X_mod__D", "X_mod_DM", "X_div_DM", "X_Div_D"], "ans_min": ["rans_min", "ans_small", "anslymin", "ansitymem", "ransitymin", "cus_minimum", "anslymem", "ANS_MIN", "ransitysmall", "rans_small", "ansolyminimum", "ANS_min", "cus_main", "ans_max", "ansolysmall", "ransityinitial", "ansitysmall", "cusolyminimum", "anslysmall", "ansitymin", "ans_mem", "ANS_max", "ans_minimum", "cusolymain", "rans_initial", "cus_min", "ansityinitial", "ans_main", "ransitymem", "cusolysmall", "ans_initial", "anslyinitial", "cusolymin", "ANS_temp", "ansolymin", "rans_mem", "cus_small", "ansolymain", "ans_MIN", "ans_temp"]}}
{"code": "A,B,X=list(map(int, input().split()))\\nif A<=X<=A+B:\\n  print('YES')\\nelse:\\n  print('NO')", "target": "488", "substitutes": {"A": ["Y", "AY", "AR", "K", "AA", "H", "C", "RA", "AN", "Al", "AC", "ANG", "R", "IA", "G", "AV", "N", "M", "BA", "CA", "LA", "AL", "ACE", "U", "S", "E", "O", "As", "D", "HA", "AT", "AU", "AGE", "AF", "L", "GA", "An", "P", "Q", "AM", "AS", "T", "AE", "SA", "AB", "AP", "V", "Z", "Alpha", "I", "AH"], "B": ["Y", "BB", "VB", "DB", "C", "EB", "F", "RB", "G", "SB", "NB", "BO", "WB", "N", "BA", "M", "BC", "BI", "Bar", "b", "GB", "E", "MB", "D", "L", "TB", "BG", "FB", "T", "J", "AB", "Z", "V", "BT", "I", "BW", "USB", "CB", "Bern", "Bs"], "X": ["Y", "UX", "K", "H", "C", "XL", "F", "G", "W", "XY", "N", "M", "OX", "U", "S", "DX", "E", "D", "Xi", "L", "P", "Q", "T", "XP", "J", "Z", "XX", "V", "I", "IX", "x", "TX", "XT"]}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10 ** 6)\\nint1 = lambda x: int(x) - 1\\np2D = lambda x: print(*x, sep=\"\\n\")\\ndef MI(): return map(int, sys.stdin.readline().split())\\ndef LI(): return list(map(int, sys.stdin.readline().split()))\\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\\n\\ndef main():\\n    n, k = MI()\\n    xy = []\\n    xx = []\\n    yy = []\\n    for _ in range(n):\\n        x, y = MI()\\n        xy.append([x, y])\\n        xx.append(x)\\n        yy.append(y)\\n    xx.sort()\\n    yy.sort()\\n    #print(xx)\\n    #print(yy)\\n    xtoi = {x: i for i, x in enumerate(xx)}\\n    ytoj = {y: j for j, y in enumerate(yy)}\\n    cs2d = [[0] * (n + 1) for _ in range(n + 1)]\\n    for x, y in xy:\\n        i, j = xtoi[x], ytoj[y]\\n        cs2d[i + 1][j + 1] = 1\\n    #p2D(cs2d)\\n    for i in range(1, n + 1):\\n        for j in range(1, n + 1):\\n            cs2d[i][j] += cs2d[i][j - 1]\\n    for j in range(1, n + 1):\\n        for i in range(1, n + 1):\\n            cs2d[i][j] += cs2d[i-1][j]\\n    #p2D(cs2d)\\n    ans = 10 ** 20\\n    for ri in range(n):\\n        r = xx[ri]\\n        for li in range(ri):\\n            l = xx[li]\\n            for ti in range(n):\\n                t = yy[ti]\\n                for bi in range(ti):\\n                    b = yy[bi]\\n                    cnt = cs2d[ri+1][ti+1]-cs2d[ri+1][bi]-cs2d[li][ti+1]+cs2d[li][bi]\\n                    if cnt >= k:\\n                        s = (r - l) * (t - b)\\n                        if s < ans: ans = s\\n    print(ans)\\n\\nmain()\\n", "target": "540", "substitutes": {"int1": ["INT2", "int4", "float3", "p3", "p1", "float2", "int3", "INT4", "p2", "INT1", "INT3", "int2", "float1", "p4", "float4"], "p2D": ["p1d", "p1N", "p2N", "p2P", "p1P", "p1D", "p3D", "p2d", "p3P", " p3D", " p2P", " p3d", "p3N", " p2d", " p2N", " p3N", " p3P", "p3d"], "rows_number": ["ows_maximum", "rows_total", "rowsitynum", "ows_result", "rows_result", "rows_num", "ows_total", "rowsitynumber", "ows_number", "rows_no", "ows_num", "rowsitymaximum", "rows_maximum", "rows_nr", "ows_nr", "rowsityresult", "ows_no"], "_": ["____", " j", "__", " __", " each", "val", " the", " long", "___"], "n": ["z", "f", "nn", "m", "l", "nt", "t", "number", "nr", "N", "i", "len", "ns", "r", "mn", "v", "na", "c", "sn", "g", "nu", "nb", "ny", "num", "p", "j", "ne", "np", "nan", "nc", "no", "nl"], "k": ["f", "K", "m", "kind", "ka", "kl", "ok", "key", "kk", "i", "v", "c", "mk", "ki", "q", "g", "kn", "ind", "ik", "p", "km", "j", "kw", "keys", "w", "ko", "ks", "yk"], "xy": ["yz", "yx", "xd", "ux", "zy", "eeee", "xs", "XY", "xxxxxxxx", "dx", "wx", "fo", "mx", "wy", "fy", "xxx", "opy", "xc", "oxy", "ox", "xe", "xxxx", "xi", "XX", "px", "zz", "xf", "zx", "tx"], "xx": ["yz", "nn", "yx", "xes", "xd", "ux", "zy", "ww", "ix", "xs", "XY", "zzy", "xxxxxxxx", "xon", "dx", "wx", "ys", "mx", "foo", "fx", "wy", "fy", "xxx", "xc", "oxy", "ox", "xxxx", "iox", "nz", "xi", "XX", "vy", "px", "zz", "xf", "zx", "inx"], "yy": ["aily", "nn", "ey", "yl", "yn", "yx", "uffy", "zy", "yu", "py", "addy", "XY", "isy", "oy", "zzy", "xxxxxxxx", "sy", "ty", "ys", "gy", "mx", "zx", "wy", "ny", "fy", "aaaa", "xxx", "illy", "xxxx", "dy", "uy", "txt", "bis", "cy", "vy", "zz", "aaa", "iny", "arty", "YY", "yk"], "x": ["z", "f", "yx", "xes", "xp", "X", "hex", "ux", "l", "t", "ix", "xs", "s", "xa", "i", "ax", "xxxxxxxx", "v", "nex", "xt", "dx", "wx", "c", "mx", "foo", "ex", "fx", "d", "p", "exp", "rx", "xxx", "act", "com", "xc", "e", "ox", "xe", "xxxx", "int", "xi", "lex", "px", "w", "xf", "on", "xd", "tx", "inx"], "y": ["Y", "z", "ym", "ey", "yl", "yo", "yn", "ay", "m", "zy", "yu", "py", "t", "iy", "sy", "i", "ty", "yt", "v", "c", "gy", "b", "ies", "yi", "wy", "ny", "fy", "ady", "j", "ry", "ya", "uy", "ye", "cy", "vy", "o", "yd", "ly"]}}
{"code": "n=int(input())\\nl=list(map(int,input().split()))\\nans=[0]*n\\nfor i in range(len(l)):\\n    ans[l[i]-1]=i+1\\nprint(*ans)", "target": "736", "substitutes": {"n": ["z", "f", "nn", "names", "m", "nt", "t", "name", "N", "len", "ns", "mn", "r", "k", "v", "na", "c", "ln", "sn", "q", "b", "an", "nu", "nb", "num", "d", "ne", "net", "np", "nan", "nc", "no", "nl", "x"], "l": ["fl", "ol", "lines", "ld", "ls", "el", "le", "m", "lv", "t", "lis", "s", "len", "il", "la", "v", "sl", "c", "lt", "lu", "ln", "lc", "g", "lo", "ml", "d", "dl", "p", "L", "lp", "pl", "lr", "al", "loc", "li", "shell", "nl", "list", "rl", "lists", "ll", "ly"], "ans": ["ens", "ls", "AN", "oss", "ean", "pan", "rs", "gs", "amps", "s", "ins", "anas", "ars", "aus", "outs", "ns", "ms", "ann", "os", "aps", "acs", "aos", "arts", "beans", "ents", "ians", "ums", "angs", "rans", "eds", " means", "ANS", "lets", "offs", "anes", "ams", "uls", "mos", "ras", "ats", "us", "ros", "anks", "ana", "an", "ks", "ants", "lan"], "i": ["io", "ini", "ri", "zi", "m", "ni", "ix", "ti", "ip", "ci", "\u0438", "ji", "gi", "v", "hi", "oi", "index", "ki", "sim", "ind", "id", "di", "num", "bi", "multi", "pi", "fi", "qi", "ai", "it", "ii", "xi", "si", "ic", "o", "li", "u", "I", "set", "x", "ui", "mi", "iu", "im"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\n\\ndef main():\\n    mod=10**9+7\\n    ans=-1\\n    \\n    A,B=MI()\\n    for i in range(10000):\\n        a=int(i*0.08)\\n        b=int(i*0.1)\\n        \\n        if a==A and b==B:\\n            ans=i\\n            break\\n        \\n    print(ans)\\n\\n\\nmain()\\n", "target": "418", "substitutes": {"input": ["interface", "str", "active", "out", "val", "reader", "load", "eval", "util", " Input", "sample", "format", "unsigned", "raw", "fn", "output", "cin", "request", "filter", "enter", "open", "query", "history", "q", "insert", "csv", "ref", "Input", "source", "select", "paste", "password", "cmd", "config", "hidden", "read", "view", "next", "image", "command", "context", "form", "get", "inc", "it", "int", "align", "inner", "focus", "feed", "sequence", "print", "exec", "list", "update", "data", "PUT", "text", "shift"], "mod": ["sub", "add", "min", "asm", "times", "m", "ran", "name", "modules", "pos", "ins", "ms", "lo", "id", "mult", "fun", "man", "da", "bin", "Mod", "mode", "MOD", "var", "ac", "dec", "cm", "mods", "base"], "ans": ["ens", "lines", "ls", "names", "mas", "vers", "cs", "cons", "amps", "xs", "ars", "os", "nos", "aus", "ins", "ons", "anas", "ann", "ms", " Ans", "aps", "ns", "aos", "errors", "arts", "ents", "ians", "ums", "angs", "rans", "marks", " means", "ids", "terms", "ANS", "vs", "uns", "ai", "offs", "anes", "nan", "ads", "ats", "ros", "an", "ks", "ants", "ows"], "A": ["Y", "AR", "K", "AI", "AA", "H", "C", "RA", "X", "Al", "AC", "AN", "IA", "G", "ACC", "M", "BA", "CA", "LA", "EA", " AA", "Bar", "S", "As", "AU", "HA", "AT", "Ag", "AF", "L", "GA", "An", "At", "ATA", "AE", "T", "AB", "AP", "Z", "I", "Ax", "SA"], "B": ["Y", "BE", "BB", "VB", "DB", "C", "EB", "F", "RB", "R", "G", "BO", "N", "M", "BA", "IB", "BC", "WB", "BI", "S", "E", "D", "L", "TB", "LB", "T", "J", "AB", "Z", "V", "BT", "I", "BL", "BM", "Bern"], "i": ["f", "io", "ini", "ri", "zi", "m", "t", "ix", "ti", "info", "s", "ip", "ci", "v", "gi", "ij", "hi", "index", "oi", "ki", "phi", "yi", "di", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "I", "li", "u", "ia", "x", "ui", "mi", "iu"], "a": ["ba", "apa", "am", "ae", "sta", "au", "ga", "xa", "ca", "la", "at", "pa", "c", "ea", "va", "alpha", "ao", "oa", "isa", "ai", "sa", "aq", "aa", "ac", "ab", "eas", "aaa", "ar", "ach", "an", "aff"], "b": ["z", "f", "rb", "ba", "ib", "another", "be", "l", "y", "bc", "bp", "cb", "fb", "db", "v", "c", "g", "nb", "d", "bi", "j", "e", "sb", "beta", "gb", "bis", "n", "bs", "ab", "x", "bb", "bar", "eb"]}}
{"code": "import itertools\\nimport math\\n\\nN=int(input())\\nzahyou=[list(map(int,input().split()))for i in range(N)]\\njyunban=list(itertools.permutations(range(N)))\\ndist=list()\\nfor i in range(len(jyunban)):\\n    tmp=0\\n    for j in range(N-1):\\n        tmp+=math.sqrt((zahyou[jyunban[i][j]][0]-zahyou[jyunban[i][j+1]][0])**2+(zahyou[jyunban[i][j]][1]-zahyou[jyunban[i][j+1]][1])**2)\\n    dist.append(tmp)\\nprint(sum(dist)/math.factorial(N))", "target": "611", "substitutes": {"N": ["Y", "Num", "K", "NE", "H", "C", "AN", "R", "Ni", "CNN", "NB", "NI", "NG", "M", "NV", "NR", "CN", "A", "SIZE", "Len", "NL", "NP", "NA", "ANY", "S", "O", "ND", "NJ", "NT", "D", "SN", "NS", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "KEY", "I", "NUM", "Ns", "NC", "NO", "NN", "NH"], "zahyou": ["zahhello", " zahsuser", "zahanper", "jayyou", "ozahper", "jaybe", "zaphyou", "zohyou", "ozaahfully", " zahwe", "zaahbe", "zaahfully", "zihuser", "jaycreate", "jahhello", "zayusers", "ozahyou", "jahbe", "jahwe", "ozaahyou", "zahsuser", "zaahyou", "ozachyou", " zahuser", "zahanhero", "zahuser", "zihusers", "zahswe", "jaywe", "jahusers", "ozahfully", "zayyou", "zahsyou", "zahcreate", "zamyou", "zyahletters", "ozachper", "ozaahYou", "zahletters", "zaphhello", "zyahYou", "jayhello", "zahwe", " zahsyou", "zaharusers", "zihyou", "zaphcreate", "zaharuser", "zaywe", "zayhero", "ozahbe", "zaharwe", "jahcreate", "zohYou", "zihwe", "zachyou", "ozachbe", "zahYou", "zamusers", "zohwe", "zahanyou", "zayper", " zahusers", "zaahhello", "zaharyou", "ozahhero", "ozahYou", "ozaahletters", "zohhello", "zambe", "ozahletters", "zahusers", "zachbe", "zahhero", "zahbe", "zayhello", "zyahfully", "zaycreate", "jahyou", "zaahusers", " zahsusers", "zaahletters", "zohletters", "zahfully", "zahper", "zaybe", " zahswe", "zahsusers", "zaphwe", "ozachhero", "zyahyou", "zachper", "zaahYou", "zohcreate", "zamhello", "jayusers", "zohfully", "zachhero", "zahanbe"], "i": ["z", "io", "ini", "ei", "ri", "ion", "zi", "\u00ed", "m", "ir", "y", "this", "ix", "ti", "info", "ip", "ci", "\u0438", "k", "ji", "gi", "v", "ij", "index", "ki", "phi", "ami", "yi", "ie", "ind", "id", "eu", "di", "ik", "iat", "p", "bi", "pi", "ai", "it", "jj", "ii", "xi", "n", "si", "o", "iri", "li", "ic", "ia", "I", "x", "iti", "mi", "iu", "im", "ui"], "jyunban": ["joyunbase", "jyunitban", "jyunnpass", "jywinpin", "jeymuncheck", "jyoncheck", "jykmunthan", "jeyuncheck", "jyincheck", "jydenpass", "jyouncan", "jykmuncan", "jyungate", "jyunpan", "jyungray", "jyinbase", "joyonban", "jymungate", "jyunapass", "joyonpan", "jyounthan", "jymunban", "jyongray", "jykunban", "jyunapay", "jyuneban", "joymunban", "jyuncan", "jykunthan", "jeymunban", "jymuncheck", "jyunthan", "jhotunban", "jyonpin", "jyguncan", "jyingate", "joyunpin", "jygunthan", "joyuncheck", "jywingray", "jyunnpay", "jyunaban", "joyungray", "joyonpin", "joyongate", "jeymungo", "jhotunnbank", "jyguncheck", "jyunitgate", "jymunpan", "jyunbase", "jymungo", "jhotunpass", "jhotunnpass", "jyunabank", "jyinpan", "jyonban", "jyunego", "jydenban", "jyunpin", "jyenban", "jyuncheck", "jyunecheck", "jyunpay", "jyenpin", "jydenbank", "jygunpan", "jyungo", "jyongate", "jyengray", "joyunpan", "joyuncan", "joymuncan", "jymunthan", "jykungate", "jywinban", "jymuncan", "jykmungate", "jyunitbase", "jywinpan", "jyoungate", "jeymuncan", "jyunecan", "joymuncheck", "joyungate", "jhotunbank", "jyunbank", "jygunban", "joyoncheck", "jyunitcheck", "joyonbase", "joymunpan", "jhotunnban", "jyounban", "jyunpass", "jykuncan", "jykmunban", "jygungo", "jhotunpay", "jeyungo", "jeyuncan", "jygungate", "jyincan", "jyunnbank", "joyunban", "jhotunnpay", "jeyunban", "jyinban", "jyonbase", "jydenpay", "jyunnban", "jyenpan", "joyongray", "jyonpan"], "dist": ["stats", "det", "diff", "sum", "des", "pred", "desc", "df", "nt", "driver", "ists", "push", "dd", "shape", "err", "adj", "dx", "dis", "distance", "depth", "ist", "test", "ind", "d", "mem", "dl", "sort", "radius", "dir", "pdf", "mat", "np", "relative", "n", "rank", "delay", "sq", "rel", "list", "dr", "req", "norm", "trip", "rt", "Dist", " Dist", "md"], "tmp": ["emp", "fake", "obj", "sum", "tm", "MP", "html", "prop", "xy", "src", "pkg", "t", "tt", "nt", "attr", "etc", "copy", "resp", "msg", "timeout", "perm", "sp", "mk", "mut", "kept", "mp", "temp", "nb", "test", "uff", "tn", "ctx", "comp", "bt", "pretty", "cp", "addr", "cmp", "tf", "np", "vt", "txt", "amp", "tc", "yet", "upe", "mm", "buff", "qq", "prefix", "ppo"], "j": ["z", "str", "obj", "jl", "pr", "pt", "ja", "jit", "y", "this", "ix", "ti", "fr", "key", "jp", "err", "ji", "kid", "v", "sp", "json", "ij", "index", "job", "q", "b", "g", "jac", "ind", "di", "next", "bi", "br", "oj", "kj", "jas", "it", "jj", "jump", "aj", "J", "ii", "n", "si", "uj", "dj", "li", "ia", "im", "bj", "js", "jc"]}}
{"code": "n = int(input())\\nimport math\\nfor i in range (50000):\\n  x = i*1.08\\n  if math.floor(x) == n:\\n    print(i)\\n    exit()\\nprint(\":(\")", "target": "194", "substitutes": {"n": ["f", "nw", "m", "l", "y", "nt", "t", "name", "N", "len", "ns", "mn", "k", "v", "na", "c", "ln", "sn", "q", "h", "b", "g", "num", "d", "p", "j", "network", "ne", "gn", "np", "nan", "nc", "o", "w", "nl"], "i": ["io", "ini", "zi", "\u00ed", "m", "l", "y", "t", "ix", "ti", "ci", "ip", "gi", "v", "ij", "c", "index", "q", "phi", "yi", "id", "j", "pi", "qi", "e", "ai", "int", "ii", "xi", "si", "ic", "o", "I", "li", "mi", "iu", "im"], "x": ["z", "f", "rex", "xp", "X", "ux", "xy", "l", "y", "ix", "xx", "ax", "xxxxxxxx", "v", "xml", "dx", "wx", "c", "index", "q", "ex", "fx", "work", "p", "rx", "xxx", "xc", "e", "ox", "xe", "xxxx", "int", "xi", "o", "ic", "px", "lat", "xf", "tx"]}}
{"code": "N=int(input())\\nfor i in reversed(range(1,N+1)):\\n  if (i**.5).is_integer():\\n    print(i)\\n    exit()", "target": "330", "substitutes": {"N": ["Num", "K", "NE", "H", "C", "AN", "R", "W", "NB", "NI", "NG", "EN", "M", "NV", "NR", "CN", "MN", "NP", "NA", "S", "ND", "O", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "T", "J", "n", "Z", "V", "I", "Ns", "NC", "NO", "NN", "Wh", "NH"], "i": ["io", "ini", "zi", "\u00ed", "m", "t", "ix", "ti", "s", "ip", "ci", "k", "v", "gi", "ij", "hi", "oi", "index", "ki", "q", "phi", "ori", "yi", "di", "ik", "p", "bi", "multi", "j", "pi", "qi", " I", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "iri", "I", "li", "u", "x", "mi", "iu", "im"]}}
{"code": "r = float(input())\\n\\npi = 3.141592653589793\\nprint(pi*r**2, 2*pi*r)\\n", "target": "758", "substitutes": {"r": ["f", "rb", "pr", "m", "sr", "R", "rh", "l", "rs", "t", "i", "rc", "v", "c", "h", "q", "b", "rf", "g", "pair", "re", "d", "p", "rx", "j", "e", "rd", "n", "mr", "w", "u", "dr", "x", "rar", "rt"], "pi": ["mu", "pr", "pie", "pu", "l", "py", "spe", "pp", "i", "ci", "density", "phys", "ani", "chi", "v", "sp", "ho", "pa", "hi", "phil", "pm", "ki", "phi", "Pi", "asi", "di", "api", "d", "power", "p", "alpha", "pretty", "po", "np", "xi", "n", "ma", "li", "\u03c0", "pid", "PI", "mi", "auto"]}}
{"code": "n = int(input())\\n\\nnums = list(map(int, input().split()))\\n\\nans = 0\\nfor idx in range(1, n):\\n    if nums[idx] - nums[idx-1] < 0:\\n        ans += abs(nums[idx] - nums[idx-1])\\n        nums[idx] = nums[idx-1]\\n\\nprint(ans)", "target": "680", "substitutes": {"n": ["z", "nn", "nia", "m", "l", "nt", "t", "N", "i", "ns", "mn", "k", "en", "v", "na", "c", "ln", "sn", "q", "b", "nd", "an", "cn", "nb", "num", "d", "size", "p", "ne", "net", "gn", "np", "nan", "nc", "no", "nl", "x"], "nums": ["anumbers", " nubes", "anubes", "Num", "onews", "gnucks", "dnails", " numb", "anews", "onums", "names", "gnaves", "nameodes", "nameews", "cums", "noms", " numers", " nails", "dnums", "anoms", "nims", "cogs", "numers", "anumb", "pnumb", " nogs", "nodes", "nubes", " names", " news", "nucks", "news", "Nogs", " naves", "cews", " nodes", "onails", "pnaves", "dnews", " nucks", "naves", "num", "pnumers", "Names", "gnums", "numbers", "cumbers", "pnums", "onubes", "cames", " nims", "Nums", "Numbers", " noms", " numbers", "dnubes", "nails", "numb", "anumers", "Noms", "anums", "anims", "pnucks", "cum", "nameubes", "gnumb", "anodes", "nogs", "pnims", " num", "News", "nameums"], "ans": ["ens", "wan", "cas", "anon", "aned", "AN", "oss", "ran", "ean", "amps", "anned", "ins", "anas", "ars", "aus", "ns", "outs", "ms", "ann", "aos", "arts", "ians", "ums", "rans", "eds", "said", " means", "ANS", "uns", "nas", "anes", "nan", "ams", "ads", "ras", "ats", "anks", "ana", "an", "ks", "ants", "lan"], "idx": ["midxs", "kinix", "idz", "sidx", "iddx", "bidix", "idxs", "indxs", "inix", "sidix", "indg", "indix", "ady", " idy", "indx", "kinxf", "handlexb", " idg", "idix", "kidxs", "iny", "latxb", " idxx", "adx", "ridxd", "idxf", "idg", "handlex", "index", " iddx", "kidxf", " idxb", "adix", "statxf", "ridxf", "statxd", "ridxs", "handlez", "latz", "inx", "idxx", " idxf", "statxs", "sidxf", "addx", "midx", "bidx", "bidct", " idxs", " idct", "ideex", "idly", "riddx", "kidxd", "midg", " idix", "midix", "ridct", "idy", " idex", " idly", "biddx", "ridix", "ridx", "latly", "kidx", "kinx", "latx", "idxd", "idxb", "ideg", "handlely", "idct", "idexs", "sidxx", "statx", " idz", "kinxx", "idex"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\ndef mapint(): return map(int, input().split())\\nsys.setrecursionlimit(10**9)\\n\\nA, B = input().split()\\nB = int(''.join(B.split('.')))\\n\\nprint(int(A)*B//100)", "target": "44", "substitutes": {"A": ["App", "AR", "AA", "C", "RA", "AC", "AN", "a", "IA", "AV", "BA", "ABC", "CA", "AL", "TA", "LA", "UA", "EA", "NA", "As", "AU", "HA", "Array", "AT", "AF", "L", "GA", "An", "mA", "AD", "AH", "AE", "AB", "AP", "Alpha", "ACT", "SA"], "B": ["Y", "BE", "BB", "BS", "Bytes", "VB", "DB", "C", "EB", "Two", "RB", "F", "G", "SB", "NB", "BO", "Other", "N", "M", "BA", "WB", "BC", "IB", "BI", "Bar", "b", "S", "E", "O", "D", "L", "TB", "LB", "P", "BG", "T", "J", "AB", "V", "I", "BW", "BL", "USB", "BM", "Bern", "CB", "BF", "BR", "Bs"]}}
{"code": "def val(num):\\n    print(num, flush=True)\\n    sex = input()\\n    if sex == \"Vacant\":\\n        exit(0)\\n    return 1 if sex == \"Male\" else 0\\n\\n\\nn = int(input())\\n\\nl_sex = val(0)\\nr_sex = val(n - 1)\\n\\nleft = 0\\nright = n - 1\\n\\nwhile left < right:\\n    mid = (left + right) // 2\\n    sex = val(mid)\\n    if (mid - left) % 2 == 0 and sex != l_sex:\\n        right = mid\\n        r_sex = sex\\n    elif (mid - left) % 2 == 1 and sex == l_sex:\\n        right = mid\\n        r_sex = sex\\n    else:\\n        left = mid\\n        l_sex = sex", "target": "344", "substitutes": {"num": ["Num", "nom", "max", "ph", "sum", "m", "mon", "one", "tim", "number", "nam", "dim", "nm", "mn", "cal", "na", "mod", "th", "sim", "mult", "p", "man", "alph", "bum", "sel", "cong", "mat", "int", "float", "rem", "dec", "mom", "NUM", "gen", "um", "hum", "new"], "sex": ["sed", "names", "seven", "name", "sw", "value", "status", "complex", "dem", "ped", "ge", "sen", "sim", "com", "ison", "emale", "x", "wife", "death", "him", "el", "husband", "ice", "xy", "se", "alf", "json", "email", "index", "tem", "ex", "string", "test", "ml", "species", "man", "hyp", "cre", "gem", "rose", "person", "me", "kiss", "Sex", "gender", "sv", "mor", "ion", "sexual", "sql", "su", "eight", "mail", "xxxxxxxx", "job", "ame", "ie", "male", "mem", "female", "none", "sel", "xxxx", "ime", "don", "sh", "isl", "she", "what", "hex", "sis", "zip", "spe", "case", "son", "xml", "nex", "sn", "sense", "lo", "cho", "sem", "orm", "ne", "mix", "so", "individual", "search", "lex", "tax", "mate", "woman", "ser"], "n": ["z", "nn", "names", "m", "a", "l", "nt", "t", "number", "nr", "s", "N", "i", "ns", "mn", "r", "en", "nm", "v", "na", "c", "long", "ng", "ln", "sn", "h", "g", "cn", "nu", "nb", "d", "p", "j", "ne", "net", "gn", "np", "nc", "o", "nl", "x", "ll"], "l_sex": ["lostonsexual", "r_se", "lostonsense", "l_sexual", "m_lex", "r_male", "l_wife", "l_male", "m_gender", "m_sex", "l_se", "l_gender", "lostonsex", " l_sense", "l_sense", "r_wife", "m_name", " l_se", " l_sexual", "l2se", "r_gender", "l_name", "l2gender", "l_lex", "lostonse", "l2sex"], "r_sex": ["roesex", "r_tem", "roestatus", "roecomplex", "rl_sex", "r_wife", "rl_status", "rloecomplex", "roese", "rloestatus", "rloese", "l_wife", "r_se", "r_complex", "l_ex", "rl_se", "r_status", "r_ex", "l_se", "l_tem", "rl_complex", "rloesex"], "left": ["min", "side", "out", "level", "el", "top", "le", "m", "wrong", "l", "all", "old", "full", "to", "back", "i", "len", "r", "Left", "lock", "length", "ul", "lt", "long", "joined", "start", "hi", "loop", "lo", "ind", "id", "ml", "cont", "d", "path", "p", "join", "L", "j", "low", "pl", "local", "end", "self", "bottom", "last", "current", "half", "inner", "main", "short", "small", "loc", "first", "li", "set", "nl", "list", "x", "lower", "ll"], "right": ["rest", "max", "out", "top", "off", "m", "third", "wrong", "range", "through", "l", "all", "t", "full", "to", "row", "back", "wall", "middle", "ax", "final", "r", "k", "res", "upper", "root", "before", "over", "length", "ren", "start", "rights", "th", "d", "rew", "p", "inner", "rx", "Right", "end", "ro", "new", "self", "local", "rw", "last", "cross", "half", "short", "tr", "wo", "up", "rd", "then", "first", "w", "rem", "reverse", "correct", "x", "after"], "mid": ["rand", "sub", "min", "med", "per", "max", "led", "mill", "le", "tm", "m", "mit", "my", "cut", "middle", "ms", "dim", "i", "len", "mn", "high", "nm", "lim", "upper", "hi", "lt", "dem", "start", "mmm", "nd", "term", "mut", "lay", "mod", "val", "mp", "ind", "id", "test", "medium", "Mid", "man", "multi", "low", "pl", "pi", "mt", "trans", "late", "mode", "mir", "int", "half", "wid", "rid", "mer", "tri", "mr", "bid", "mitt", "pid", "rel", "mini", "mm", "lat", "mi", "mad", "data", "md", "tx"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nprint('DENIED' if sum(ai % 3 != 0 and ai % 5 != 0 for ai in a if ai % 2 == 0) else 'APPROVED')", "target": "381", "substitutes": {"n": ["z", "nn", "m", "l", "nt", "t", "nr", "N", "ns", "nm", "k", "mn", "v", "na", "c", "sn", "q", "b", "cn", "nb", "num", "d", "p", "j", "nc", "o", "w", "x", "count"], "a": ["done", "ba", "array", "m", "am", "ta", "ae", "t", "name", "au", "xa", "i", "A", "r", "ca", "at", "na", "c", "wa", "ea", "b", "area", "p", "ao", "j", "oa", "e", "sa", "aa", "o", "ma", "ia", "set", "ab", "aaa", "x", "an"], "ai": ["pai", "io", "ei", "AI", "apa", "ay", "zi", "aii", "ap", "am", "ta", "ae", "ni", "ais", "ha", "aim", "name", " fa", "ti", "au", "ga", "xa", "i", "aus", "ua", "ca", "ira", "ci", "aki", "gi", "aos", "pa", "na", "index", "ea", " ii", "di", "ari", "bi", "ao", "oa", "aka", "qi", "sa", "aq", "aa", "aj", "li", "ia", "hai", "x", "um", "ali", "an"]}}
{"code": "s = list(input())\\nt = list(input())\\n\\nfor i in range(len(s)-len(t), -1, -1):\\n    flag = True\\n    for j in range(len(t)):\\n        if not(s[i+j] == t[j] or s[i+j] == '?'):\\n            flag = False \\n    if flag :\\n        for j in range(len(t)):\\n            s[i+j] = t[j]\\n        for k in range(len(s)):\\n            if s[k] == '?':\\n                s[k] = 'a'\\n        print(''.join(s))\\n        exit()\\nprint('UNRESTORABLE')\\n", "target": "312", "substitutes": {"s": ["z", "f", "sts", "str", "ps", "sv", "ws", "ls", "m", "a", "spec", "cs", "rs", "l", "gs", "se", "y", "os", "ins", "ms", "ns", "r", "sw", "v", "sp", "strings", "sl", "c", "h", "q", "b", "g", "S", "d", "p", "ss", "ds", "e", "sa", "sb", "its", "ses", "n", "si", "bs", "w", "sq", "set", "ats", "als", "st", "x", "ts", "qs", "js"], "t": ["z", "qt", "tu", "f", "pt", "tm", "m", "ta", "a", "l", "y", "tt", "nt", "tw", "to", "r", "dt", "at", "sp", "c", "gt", "ot", "q", "b", "g", "ct", "tree", "tg", "test", "temp", "d", "te", "p", "bt", "ht", "mt", "trans", "form", "it", "wt", "tk", "mat", "T", "vt", "tr", "txt", "tc", "n", "o", "tes", "that", "ts", "rt", "st"], "i": ["ini", "ri", "zi", "m", "ir", "l", "y", "ix", "ti", "ip", "ci", "gi", "v", "ij", "hi", "index", "b", "phi", "ami", "ie", "ind", "id", "di", "ik", "iat", "pi", "ai", "it", "ims", "ii", "iri", "si", "xi", "ic", "o", "li", "I", "ia", "x", "ui", "mi", "iu", "im"], "flag": ["bug", "f", "fl", "wait", "ld", "level", "member", "ground", "load", "flags", "sync", "failed", "field", "endif", "cond", "stay", "lv", "hold", "age", "limit", "status", "fail", "lock", "condition", "mask", "lag", "state", "group", "g", "gc", "bit", "force", "cmd", " Flag", "func", "cloud", "do", "leaf", "kill", "nil", "FLAG", "bool", "fire", "log", "shell", "print", "save", "Flag", "ment", "arg", "nl", "set", "again", "count"], "j": ["z", "obj", "jl", "pt", "pr", "a", "ja", "l", "y", "ix", "fr", "key", "jp", "ji", "v", "json", "ij", "index", "q", "b", "je", "g", "jac", "ie", "ind", "ijk", "di", "ik", "br", "oj", "pi", "kj", "vol", "it", "jj", "jump", "aj", "J", "n", "ju", "o", "uj", "dj", "li", "x", "im", "bj", "js", "jc"], "k": ["z", "kg", "K", "kr", "kt", "uk", "kh", "ka", "ck", "kl", "ok", "key", "kk", "kan", "ke", "kid", "v", "kar", "mk", "ki", "q", "ak", "unk", "kn", "ijk", "wk", "ik", "km", "kj", "ek", "kw", "tk", "sk", "ko", "ark", "ku", "ks"]}}
{"code": "import sys\\nread = sys.stdin.read\\nreadlines = sys.stdin.readlines\\ndef main():\\n    n = int(input())\\n    pre_t = 0\\n    pre_x = 0\\n    pre_y = 0\\n    for _ in range(n):\\n        t, x, y = map(int, input().split())\\n        d_dis = abs(x - pre_x) + abs(y - pre_y)\\n        d_t = abs(t - pre_t)\\n        if d_dis > d_t:\\n            print('No')\\n            sys.exit()\\n        elif (d_t - d_dis) % 2 == 1:\\n            print('No')\\n            sys.exit()\\n        else:\\n            pre_t = t\\n            pre_x = x\\n            pre_y = y\\n    print('Yes')\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "726", "substitutes": {"read": ["f", "sub", "READ", " READ", "str", "stream", "reader", "load", "std", "find", " pars", " dat", "readable", "rot", "reads", "r", "buffer", "input", "write", "length", "replace", "gets", " write", "insert", "default", "d", " find", "Read", "send", "get", "run", " send", "rid", "each", "txt", "rd", " reads", "feed", "iter", "list", " Read", "data", "text"], "readlines": ["Readrows", " Readpoints", " Readlines", "runln", "println", "Readpoints", "Readline", "checkln", "readpoints", " readline", "printlines", "checkfiles", " readrows", " Readline", "checkcodes", "checklines", "runfiles", " Readrows", "readrows", "readcodes", "runlines", "printfiles", "runcodes", "readline", "printcodes", "readln", "readfiles", " readpoints", "Readlines"], "n": ["nn", "nia", "m", "l", "nt", "number", "nr", "N", "i", "len", "ns", "r", "mn", "k", "v", "na", "c", "sn", "q", "b", "nu", "nb", "num", "d", "p", "j", "ne", "np", "nan", "nc", "no", "nl", "norm"], "pre_t": ["preJm", "pre___v", "prefix_n", "pre___t", "prefix_v", "pre_a", "pre_o", "pre_p", " pre1a", "pre1t", " pre_m", "prefix_o", "pre1v", "prefix_t", "pre_n", "pre_dt", "pre1o", " pre1m", "pre1n", "pre1m", "pre_T", " pre_n", "preJa", "preJn", "pre_m", " pre1t", "pre___o", "Pre_p", "pre1a", "Pre_T", "preJt", " pre_a", " pre1n", "pre___n", "pre_v", "Pre_t", "Pre_dt"], "pre_x": ["prime_wx", "pre2wx", "pre2y", "prev_ix", "pre2ix", "prev_x", "pre_xc", "pre32ex", "prev_ex", "prev0ix", "Pre_ex", "prime_ix", "pre_ex", "prev0xc", "Pre_x", "prime_x", "pre0xc", "prime_y", "pre0ex", "pre2x", "Pre_ix", "prev0ex", "pre32t", "pre_ix", "pre0x", "pre32ix", "prev_xc", "prev0x", "pre0ix", "pre_wx", "pre32x", "Pre_t"], "pre_y": ["pre_i", "post_i", "pre80ies", "pre_yy", "pre80y", "pre11x", "Pre_ies", "pre_d", "pre7y", "Pre_ny", "post_d", "post_x", "pre7yy", "preJd", "pre11ies", "Pre_iy", "pre11iy", "pre_ny", "pre80x", "preJx", "Pre_x", "Pre_y", "preJi", "pre80iy", "preJy", "pre7ny", "pre_iy", "pre_ies", "pre7x", "Pre_yy", "post_y", "pre11y"], "_": [" a", "k", " j", " __", " each", " p", " c", "j", " the", " k", "___"], "t": ["type", "f", "z", "pt", "m", "ta", "a", "l", "tt", "all", "name", "i", "r", "dt", "k", "ty", "at", "v", "c", "ot", "b", "q", "g", "ct", "tree", "tg", "test", "typ", "d", "te", "p", "j", "td", "e", "it", "wt", "T", "time", "tc", "o", "ts"], "x": ["z", "xes", "yx", "xp", "X", "ux", "xy", "l", "ix", "xs", "xa", "i", "xx", "ax", "v", "xml", "xt", "dx", "wx", "mx", "ex", "fx", "rx", "act", "xc", "e", "ox", "xe", "xi", "px", "w", "lat", "xf", "im", "tx", "inx"], "y": ["Y", "z", "sys", "yz", "ym", "ey", "yl", "yo", "yn", "ay", "m", "a", "xy", "py", "iy", "sy", "i", "yy", "ty", "yt", "v", "c", "gy", "ys", "b", "ies", "yi", "wy", "ny", "yd", "fy", "p", "j", "story", "uy", "ye", "axy", "yr", "cy", "o", "vy", "hy", "sky", "ly"], "d_dis": ["d_des", "d0des", " d_re", " d_des", "d2dist", "d_dist", "d_diff", " d0des", "d_not", "d_el", " d_el", " d_dist", "d0el", "d2diff", " d_diff", " d0dis", " d_not", "d0dis", "d2dis", "d_re", " d0el", " d_Dis", " d0Dis", "d0Dis", "d_Dis"], "d_t": [" d_y", "d_pt", "diddevT", "d0y", "d_int", " d_pt", " d_g", "d64int", "d_l", "ddevtest", "did_test", "dPint", "diddevt", "diddevtt", "d_type", "dPpt", " d_int", "d64t", "did_tt", "d_y", " d_type", "d0t", "diddevtest", " d_l", "d0type", "dPg", "d_g", "ddevtt", "d64g", "d0l", "d_test", "ddevT", "did_T", "dPt", "d64pt", "did_t", "ddevt", "d_tt", "d_T"]}}
{"code": "# https://atcoder.jp/contests/abc152/submissions/9693323\\n\\nimport sys\\nread = sys.stdin.read\\n\\nN, *A = map(int, read().split())\\nmod = 10 ** 9 + 7\\n\\n\\ndef min_factor(n):\\n    sieve = list(range(n + 1))\\n    sieve[2::2] = [2] * (n // 2)\\n    for i in range(3, int(n ** 0.5) + 2, 2):\\n        if sieve[i] == i:\\n            sieve[i * i::2 * i] = [i] * ((n - i * i) // (2 * i) + 1)\\n    return sieve\\n\\n\\ndef prime_factorize(n):\\n    a = {}\\n    while n != 1:\\n        b = table[n]\\n        if b in a:\\n            a[b] += 1\\n        else:\\n            a[b] = 1\\n        n //= b\\n    return a\\n\\n\\ntable = min_factor(10**6)\\n\\ndic = {}\\nfor i in A:\\n    for key, value in prime_factorize(i).items():\\n        if key in dic:\\n            dic[key] = max(dic[key], value)\\n        else:\\n            dic[key] = value\\n\\nlcm = 1\\nfor i, j in dic.items():\\n    lcm *= pow(i, j, mod)\\n    lcm %= mod\\n\\nanswer = sum(lcm * pow(i, mod - 2, mod) for i in A) % mod\\nprint(answer)\\n", "target": "477", "substitutes": {}}
{"code": "from heapq import heapify,heappush,heappop\\nN, M = map(int, input().split())\\n\\nI = [[] for _ in range(N)]\\nfor i in range(M):\\n  A, B = map(int, input().split())\\n  A -= 1\\n  B -= 1\\n  I[A].append(B)\\n  I[B].append(A)\\n\\ntask = [] \\nused = [0 for _ in range(N)]\\nmin_len = [0 for _ in range(N)]\\nlength = [10**20 for _ in range(N)]\\nprev_points = [0 for _ in range(N)]\\nheappush(task, (0, 0, -1))\\nprint(\"Yes\")\\n\\nwhile task:\\n  while task:\\n    l, p, prev = heappop(task)    \\n    if used[p] == 0:\\n      break\\n  #print(task)\\n  used[p] = 1\\n  min_len[p] = l\\n  prev_points[p] = prev +1 #\u756a\u53f7\u30921\u305a\u3089\u3059\\n  \\n  for j in I[p]:\\n    if used[j] == 1: continue\\n    #print(p,j)\\n    if length[j] > l+1:\\n      length[j] = l+1\\n      heappush(task, (l+1, j, p))\\n    \\nfor i in range(1, N):\\n  print(prev_points[i])", "target": "616", "substitutes": {"N": ["Y", "K", "H", "C", "X", "AN", "F", "R", "G", "Ni", "NB", "NI", "NG", "NR", "CN", "MN", "NL", "NA", "S", "E", "ND", "NT", "SN", "NS", "L", "NM", "TN", "P", "Q", "T", "MAN", "GN", "n", "V", "Ns", "NC", "NO", "NN", "NH"], "M": ["K", "m", "C", "MP", "MX", "F", "R", "PM", "MT", "MR", "CM", "Mon", "MI", "MN", "MC", "MM", "S", "D", "L", "NM", "JM", "TM", "P", "MA", "Q", "MS", "MAN", "T", "DM", "J", "V", "Man"], "I": ["Y", "IP", "C", "X", "F", "R", "G", "MI", "U", "Int", "IS", "S", "E", "IJ", "D", "GI", "IO", "L", "Is", "IT", "P", "TI", "Q", "INT", "IM", "You", "T", "LI", "J", "V", "We", "PI", "IX", "IE", "IF", "II", "DI"], "_": ["let", "pt", "____", "Local", "py", "all", "ix", "__", "place", "val", "get", "___", "x", "on", "an"], "i": ["z", "m", "a", "y", " m", "key", "k", "gi", " j", "ij", "c", "b", "ind", "id", " ii", "j", "e", "it", "n", "li", " b", "x", "im"], "A": ["App", "AY", "AR", "K", "AA", "Ar", "H", "C", "AN", "AC", "a", "Al", "IA", "G", "AV", "BA", "CA", "LA", "AL", "Bar", "U", "Av", "As", "AU", "HA", "AT", "Array", "Ag", "AF", "L", "GA", "An", "At", "P", "AH", "T", "SA", "AS", "AB", "AP", "One", "Ax", "AE"], "B": ["Y", "BE", "Blue", "BB", "BS", "VB", "DB", "C", "EB", "Two", "Ber", "Buffer", "G", "BO", "WB", "BA", "BC", "IB", "BI", "Bar", "b", "GB", "S", "E", "O", "D", "Big", "L", "TB", "P", "T", "J", "AB", "Bill", "BT", "V", "BL", "BER", "Bern", "Reb", "BY", "BF", "BR", "Bs"], "task": ["thread", "type", "target", "finished", "out", "level", "problem", "unknown", "chain", "t", "name", "present", "timer", "result", "key", "final", "request", "Task", "byte", "msg", "status", "forced", "before", "missing", "tag", "empty", "state", "index", "job", "slave", "user", "position", "yes", "bit", "test", "work", "ask", "process", "next", "nothing", "command", "commit", "variable", "trial", "word", "total", "worker", "required", "piece", "last", "form", "int", "block", "event", "T", "time", "jump", "associated", "table", "void", "KEY", "set", "list", "question", "link", "item", "new", "needed"], "used": ["finished", "installed", "active", "done", "occupied", "found", " unused", "allowed", "failed", "bus", "uses", "ready", "free", "seen", "given", "forced", "empty", "initialized", "using", "use", "defined", "necessary", "loaded", "required", "total", "valid", "USE", "locked", "running", "available", "released", "checked", "us", "ended", "Used", "usage", "selected", "needed"], "min_len": ["max_str", "min_length", "min_str", "max_pos", "max_len", "min_pos", "max_length"], "length": ["ength", "offset", "text", "number", "shape", "len", "buffer", "pieces", "limit", "Length", "history", "expected", "index", "long", "position", "duration", "temp", "size", "path", "volume", "next", "total", "time", "sequence", "stop", "prime", "data", "count", "width"], "prev_points": ["prev_len", "pre_point", "prev_point", "pre_len", "prev_bits", "pre_bits", "pre_points"], "l": ["f", "ls", "le", "line", "m", "t", "len", "r", "v", "lock", "c", "lt", "h", "lc", "g", "lo", "L", "j", "lp", "loaded", "e", "locked", "li", "left", "list", "ll"], "p": ["ps", "f", "pr", "m", "a", "y", "t", "pos", "s", "pp", "r", "tp", "k", "jp", "v", "pa", "c", "h", "q", "b", "g", "er", "d", "j", "cp", "pl", "lp", "e", "P", "pc", "n", "o", "u", "pid", "pn"], "prev": ["op", "vious", "tmp", "pred", "par", "inv", "rep", "ip", "len", "jp", "adj", "before", "sp", "mp", "pre", "rev", "next", "Prev", "br", "buf", "cmp", "jump", "txt", "pri", "rem", "iter", "rec", "rel"]}}
{"code": "def main():\\n    line = input()\\n    A, B, X = [int(n) for n in line.split()]\\n    if A > X:\\n        print('NO')\\n    elif B + A < X:\\n        print('NO')\\n    else:\\n        print('YES')\\n\\nmain()\\n", "target": "488", "substitutes": {"line": ["ner", "pe", "ine", "lines", "out", "le", "Line", "node", "l", "se", "lin", "online", "pos", "row", "ines", "nm", "input", "eno", "ole", "inline", "ln", "lo", "page", "string", "eline", "L", "liner", "frame", "ne", "e", "file", "block", "part", "no", "iter", "lf", "nl", "list", "LINE", "entry", "text"], "A": ["Y", "AR", "K", "AA", "H", "C", "AC", "AN", "a", "F", "R", "G", "W", "ACC", "N", "BA", "What", "CA", "LA", "AL", "Some", "S", "E", "As", "D", "HA", "Array", "AT", "AF", "L", "GA", "An", "P", "AD", "AM", "This", "AH", "SA", "AS", "The", "AB", "AP", "Z", "V", "I", "Alpha", "Ax", "AE"], "B": ["Y", "BE", "BB", "BS", "VB", "DB", "C", "EB", "RB", "G", "W", "SB", "BO", "WB", "N", "BA", "IB", "BC", "M", "BI", "UB", "b", "D", "TB", "BG", "P", "J", "AB", "Z", "V", "I", "USB", "BL", "Bern", "CB", "BY", "Bs"], "X": ["Y", "UX", "K", "H", "C", "XL", "AC", "F", "R", "G", "N", "M", "BC", "OX", "S", "DX", "E", "D", "Xi", "L", "P", "Q", "T", "XP", "J", "Z", "XX", "V", "AB", "I", "IX", "x", "TX", "XT"], "n": ["z", "f", "nn", "m", "a", "l", "y", "t", "all", "name", "nr", "N", "i", "len", "r", "k", "nm", "un", "v", "na", "c", "ln", "q", "b", "nd", "g", "nu", "nb", "ind", "d", "p", "ne", " ng", "e", "it", "nor", " N", "o", "no", "nl", "x", "on", "an"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\n\\nx = [0]*n\\nfor i in range(n):\\n    x[0] += (-1)**(i) * a[i]\\n    \\nfor i in range(1,n):\\n    x[i] = 2*a[i-1] - x[i-1]\\n    \\nfor i in range(n):\\n    print(x[i],end=\"\")\\n    print(\" \",end=\"\")", "target": "406", "substitutes": {"n": ["z", "f", "nn", "nia", "m", "ni", "l", "y", "nt", "t", "N", "len", "ns", "mn", "r", "v", "na", "c", "ln", "sn", "q", "b", "an", "nd", "g", "nu", "nb", "num", "d", "size", "p", "j", "pi", "ne", "e", "net", "np", "nc", "o", "w", "no", "nl"], "a": ["ba", "apa", "array", "am", "ae", "y", "ga", "au", "xa", "A", "ca", "at", "la", "na", "c", "ea", "b", "area", "va", "alpha", "oa", "e", "ai", "sa", "ata", "aa", "ac", "o", "ma", "ia", "ab", "aaa", "ana", "an"], "x": ["z", "f", "rex", "ld", "xes", "xp", "m", "X", "hex", "ux", "xy", "l", "y", "ext", "t", "ix", "xs", "xa", "xx", "xb", "xxxxxxxx", "news", "check", "xml", "v", "xt", "dx", "wx", "co", "c", "mx", "ex", "ct", "fx", "test", "config", "read", "p", "exp", "rx", "xc", "e", "ox", "xe", "cox", "xxxx", "mix", "cross", "xi", "lex", "px", "w", "xf", "xd", "tx"], "i": ["io", "ei", "ini", "ri", "zi", "m", "cli", "l", "y", "ix", "iy", "ti", "ip", "ci", "ji", "gi", "v", "ij", "index", "ki", "phi", "yi", "ind", "id", "di", "ik", "bi", "multi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "ui", "mi", "iu", "im", "iti"]}}
{"code": "import math\\nr = float(input())\\ns = r * r * math.pi\\nl = 2 * r * math.pi\\nprint('%.5f %.5f' % (s, l))", "target": "758", "substitutes": {"r": ["z", "f", "rb", "rr", "m", "sr", "a", "R", "rs", "y", "t", "i", "rc", "k", "res", "v", "c", "h", "q", "b", "g", "rad", "re", "d", "p", "rx", "radius", "j", "self", "e", "lr", "rd", "n", "mr", "rt", "u", "w", "o", "x", "rl"], "s": ["z", "f", "ps", "sv", "ls", "m", "sr", "a", "rs", "t", "se", "gs", "su", "i", "ns", "sw", "sp", "sd", "sl", "c", "h", "b", "g", "S", "d", "p", "ss", "ds", "sb", "sa", "n", "si", "ts", "st"], "l": ["z", "f", "ls", "m", "t", "i", "len", "lb", "v", "sl", "c", "ln", "h", "b", "lc", "g", "tl", "ml", "d", "dl", "p", "L", "lp", "hl", "lr", "n", "o", "li", "dL", "nl", "x", "rl", "ll", "ly"]}}
{"code": "r,cr,c = map(int,input().split())\\n\\nmatrix_a = [list(map(int,input().split())) for i in range(r)]\\nmatrix_b = [list(map(int,input().split())) for i in range(cr)]\\nmatrix_c = [ [0 for a in range(c)] for b in range(r)]\\n\\nfor j in range(r):\\n    for k in range(c):\\n        for l in range(cr):\\n            matrix_c[j][k] += matrix_a[j][l]*matrix_b[l][k]\\n\\nfor x in matrix_c:\\n    print(\" \".join(list(map(str,x))))", "target": "684", "substitutes": {"r": ["rb", "ri", "rr", "m", "sr", "ir", "ran", "R", "rs", "t", "nr", "rc", "v", "h", "q", "g", "re", "d", "p", "rx", "br", "ro", "e", "ra", "tr", "rd", "n", "mr", "w", "rar", "ar", "rt", "ru"], "cr": ["rb", "pr", "mc", "kr", "sr", "rh", "cs", "rs", "CR", "nr", "fr", "rc", "ci", "cb", "ch", "ca", "arc", "lc", "ct", "cur", "ctr", "rx", "br", "cp", "ro", "ry", "Cr", "cd", "lr", "tr", "ra", "rd", "cy", "mr", "cm", "ru"], "c": ["f", "rb", "mc", "m", "C", "cs", "t", "ci", "rc", "cin", "v", "co", "h", "lc", "g", "cc", "ct", "d", "p", "cur", "col", "cp", "e", "cd", "fc", "n", "tc", "ac", "cu", "u", "cm"], "matrix_a": ["matrixrixapp", "matrixrixa", "matrices_b", "matrixMa", "matrixMb", "matrixMapp", "matrixrixb", "matrices_a", "matrix_ba", "matrix_A", "matrix2a", "matrixMl", "matrix_l", "matrix2b", "matrixrixl", "matrices_app", "matrix2A", "matrices_l", "matrix_app", "matrix2ba"], "i": ["ini", "ri", "m", "ir", "y", "ci", "il", "ji", "v", "ij", "ki", "ie", "ind", "ik", "p", "pi", "ai", "it", "int", "ii", "o", "ic", "li", "ia", "iu", "im"], "matrix_b": ["matrix_t", "matribution_e", "matribution_a", "matribution64b", "matrix64a", "matrix64b", "matribution_b", "matribution64t", "matrix2c", "matrix2a", "matrix64t", "matribution64a", "matrix5B", "matrix5a", "matribution64e", "matrix2b", "matrix5c", "matrix64e", "matrix5b", "matrix_e", "matrix2B", "matrix_B", "matribution_t"], "matrix_c": ["matrix2fc", "matric2c", "matrix_r", "matrix2cs", "matrices_c", "matrix2e", "matrix_fc", "matric_a", "matric_e", "matrixede", "matrix_cs", "matrices2cs", "matrixedc", "matric2a", "matrixedn", "matrix___c", "matric2e", "matrices_r", "matrixedr", "matric_fc", "matrix2c", "matrix2a", "matrices_e", "matrices_cs", "matrix___e", "matrices2e", "matric2fc", "matrix___a", "matrices2c", "matrices_n", "matrix_e", "matrix_n", "matrix___fc", "matric_c"], "a": ["ba", "ap", "am", "ta", "af", "ga", "au", "ca", "A", "la", "pa", "ea", "ak", "ao", "oa", "ai", "sa", "aq", "aa", "aj", "al", "ac", "o", "ma", "ia", "ab", "ar", "an"], "b": ["rb", "ba", "ib", "bl", "be", "bd", "y", "bc", "xb", "cb", "lb", "v", "h", "p", "bi", "br", "bf", "e", "ob", "o", "li", "ab", "bb", "eb"], "j": ["z", "f", "obj", "pr", "m", "ja", "y", "t", "fr", "jp", "ji", "v", "ij", "h", "q", "g", "ind", "ijk", "d", "p", "kj", "e", "it", "jj", "aj", "J", "n", "o", "li", "uj", "dj", "on", "bj", "js", "jc"], "k": ["z", "kg", "K", "m", "kt", "kh", "ka", "ck", "kl", "ok", "kk", "ke", "kid", "v", "ki", "q", "h", "kn", "ak", "ijk", "wk", "ik", "p", "kj", "ek", "kw", "tk", "o", "w", "u", "sk", "ko", "ku", "ks"], "l": ["z", "f", "ol", "ld", "ls", "yl", "jl", "el", "le", "m", "t", "lin", "kl", "s", "len", "lb", "la", "v", "sl", "lu", "lt", "ln", "h", "q", "lc", "g", "lo", "cl", "p", "L", "lp", "pl", "n", "o", "li", "left", "u", "nl", "ll"], "x": ["z", "f", "xes", "el", "xp", "X", "ux", "xy", "y", "t", "ix", "xs", "xa", "step", "xx", "xb", "v", "nex", "dx", "wx", "q", "mx", "zx", "ex", "fx", "ctx", "p", "rx", "xc", "e", "xe", "xi", "w", "u", "px", "xf", "xd", "tx"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\n\\nN, M = map(int, readline().split())\\nS = list(map(int, readline().split()))\\nT = list(map(int, readline().split()))\\n\\nP = 10 ** 9 + 7\\n\\ndp = [[0] * (M + 1) for i in range(N + 1)]\\n\\nfor x in range(1, N + 1):\\n    for y in range(1, M + 1):\\n        dp[x][y] = dp[x][y - 1] + dp[x - 1][y] - dp[x - 1][y - 1]\\n        if S[x - 1] == T[y - 1]:\\n            dp[x][y] += dp[x - 1][y - 1] + 1\\n\\n        dp[x][y] = dp[x][y] % P\\n\\nans = dp[N][M] + 1\\nprint(ans % P)\\n", "target": "505", "substitutes": {"readline": ["getLine", "readerle", "readerline", "readliner", "findlin", "readerlin", "readentry", " readlin", " readlines", "Readline", "Readeline", "Readle", "readLine", "playlines", "playlin", "getline", "readlin", "findlines", "ReadLine", " readspace", "playLINE", "readerLINE", "readerliner", "Readliner", " readLINE", "readspace", "findline", "readeline", "getentry", " readle", " readentry", "playline", "readerentry", "readle", "findspace", "readLINE", " readLine", "readlines", " readeline", "readerspace", "readerLine", "readerlines", " readliner", "getlines", "Readlines", "geteline"], "N": ["Y", "K", "H", "C", "X", "AN", "R", "Ni", "G", "NI", "NR", "CN", "MN", "A", "NP", "NA", "ND", "O", "NT", "D", "SN", "NS", "L", "NM", "TN", "Q", "NPR", "GN", "J", "n", "Z", "V", "I", "Ns", "NC", "NN", "NH"], "M": ["Y", "K", "m", "H", "MP", "C", "MX", "R", "Multi", "PM", "G", "MT", "LM", "CM", "MI", "MN", "MC", "U", "MM", "O", "D", "NM", "L", "JM", "TM", "AM", "MS", "MAN", "DM", "J", "V", "I", "B", "Mi"], "S": ["Y", "SER", "K", "SI", "Sl", "Si", "C", "H", "SS", "X", "Sn", "R", "SL", "SAN", "G", "W", "SB", "SM", "s", "A", "ST", "IS", "SR", "E", "D", "SN", "NS", "SU", "L", "SP", "TS", "SA", "SE", "Z", "V", "I", "CS"], "T": ["Y", "TR", "H", "C", "F", "R", "t", "WT", "G", "W", "TA", "There", "TH", "E", "Te", "NT", "D", "L", "TP", "TN", "TM", "TS", "Q", "TC", "J", "V", "BT", "B", "VT", "TF", "TT", "GT"], "P": ["Y", "K", "IP", "H", "C", "X", "AN", "F", "R", "G", "PS", "PA", "A", "JP", "NP", "Pay", "E", "O", "New", "D", "p", "L", "TP", "PP", "Q", "FP", "DP", "J", "AP", "Pad", "V", "I", "B", "LP", "HP", "Ps", "CP"], "dp": ["dk", "ps", "pai", "deb", "adr", "decl", "bsp", "df", "pkg", "dos", "wd", "drop", "dict", "gp", "pb", "dd", "pp", "dro", "jp", "tp", "dt", "resp", "db", "pa", "vp", "dq", "sn", "pm", "fp", "imp", "deep", "password", "di", "dm", "pd", "d", "du", "dl", "p", "dep", "lp", "ds", "cp", "tap", "rpm", "dial", "dc", "np", "DP", "dh", "bps", "delay", "ctl", "grad", "dj", "wp", "dr", "edu", "hp", "dat"], "i": ["io", "ini", "ri", "m", "ir", "l", "ix", "ti", "ip", "ci", "r", "k", "ie", "ind", " ii", "p", "e", "it", "xi", "ic", "o", "I", "li", "on", "mi", "im"], "x": ["z", "yx", "el", "m", "xp", "X", "xy", "l", "ext", "name", "ix", "xs", "day", "by", "xa", "xx", "ax", "key", "k", "ip", "at", "step", "v", "xml", "xt", "dx", "wx", "item", "c", "index", "h", "fixed", "mx", "ex", "ct", "bit", "fx", "id", "any", "d", "path", "p", "exp", "rx", "j", "axis", "xxx", "xc", "e", "ox", "xxxx", "time", "xi", "n", "o", "w", "left", "px", "lat", "on", "xf", "content", "xd", "tx", "inx"], "y": ["Y", "z", "aily", "io", "ym", "ey", "yl", "icy", "yn", "ay", "my", "xy", "zy", "py", "day", "iy", "to", "note", "by", "sy", "ip", "xx", "yy", "oy", "key", "ty", "yt", "ch", "v", "k", "sym", "gy", "ys", "h", "ies", "yes", "yi", "wy", "ny", "hey", "any", "fy", "p", "height", "j", "hot", "ry", "ya", "poly", "dy", "uy", "ye", "yr", "n", "cy", "vy", "o", "lat", "sat", "kit", "year", "yd", "sky", "ly"], "ans": ["ps", "ths", "Ps", "names", "AN", "pan", "cons", "nt", "amps", "s", "ms", "ins", "aus", "ns", "mn", "ann", "aps", "arts", "ians", "sn", "ays", "posts", "yes", "ales", "eps", "ANS", "ots", "can", "ids", "vs", "ds", "helps", "gn", "anes", "ates", "ats", "pid", "us", "Ant", "an", "ks", "ants", "lan"]}}
{"code": "N = int(input())\\nA, B = map(int, input().split())\\nfirst = 0\\nsecond = 0\\nthird = 0\\nfor P in input().split():\\n    P = int(P)\\n    if P <= A:\\n        first += 1\\n    elif P <= B:\\n        second += 1\\n    else:\\n        third += 1\\nprint(min(first, second, third))\\n", "target": "372", "substitutes": {"N": ["Num", "C", "X", "F", "R", "Ni", "G", "M", "NR", "NP", "NA", "Size", "S", "E", "O", "D", "NS", "L", "Q", "T", "J", "n", "Z", "V", "I", "Ns", "NN"], "A": ["AR", "AA", "Ar", "H", "C", "AC", "Al", "IA", "AV", "ACC", "What", "CA", "LA", "JA", "NA", "S", "As", "AU", "D", "HA", "AT", "Ah", "AF", "GA", "An", "At", "AM", "This", "AH", "First", "AB", "AP", "Area", "One", "SA"], "B": ["Y", "BB", "BS", "VB", "DB", "H", "C", "EB", "RB", "R", "G", "M", "BA", "WB", "BC", "Bar", "GB", "S", "E", "D", "L", "TB", "BG", "FB", "T", "J", "AB", "V", "BW", "BL", "BER", "Bern", "BR", "Bs", "BP"], "first": ["min", "normal", "ultimate", "top", "one", "only", "basic", "fourth", "common", "full", "month", "back", "front", "single", "latest", "upper", "before", "open", "major", "start", "master", "user", "next", "initial", "seconds", "frame", "fifth", "minute", "last", "int", "First", "each", "short", "quick", "art", "left", "success", "head", "primary", "lower", "st"], "second": ["secondary", "future", "https", "father", "foreign", "severe", "another", "account", "fourth", "two", "section", "se", "service", "below", "sec", "Second", "front", "follow", "screen", "billion", "double", "user", "minimum", "next", "sort", "seconds", "send", "bottom", "fifth", "security", "last", "server", "sequent", "small", "left", " seconds", "south", "even", "success", "again", "lower", "entry", "session"], "third": ["recent", "ter", "enth", "ard", "fourth", "forth", "back", "sec", "eenth", "quarter", "teenth", "odd", "thirds", "TH", "share", "th", "IRD", "mother", "ary", "inter", "der", "td", "threat", "fifth", "minute", "last", "Fourth", "three", "right", "relative", "half", "short", "rd", "Third", "also", " fourth", "entry", " Third", "frog"], "P": ["Y", "K", "PK", "IP", "H", "C", "X", "F", "R", "G", "M", "PA", "Port", "PO", "PU", "JP", "PC", "S", "E", "O", "Input", "PR", "Part", "D", "p", "In", "L", "TP", "PP", "Q", "Pa", "Pro", "First", "T", "J", "AP", "V", "I", "PI", "Pain", "CP", "PUT", "vP", "PT"]}}
{"code": "# http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_11_B\\n# Depth First Search\\n# Result:\\nimport sys\\n\\nclass Graph(object):\\n    def __init__(self, size):\\n        super(Graph, self).__init__()\\n        self.__size = size\\n        self.__vertices = [None] * size\\n\\n    def add_vertex(self, vertex):\\n        self.__vertices[vertex.id_ - 1] = vertex\\n\\n    def get_vertex(self, vid):\\n        return self.__vertices[vid - 1]\\n\\n    def depth_first_search(self):\\n        d = [0] * self.__size\\n        f = [0] * self.__size\\n        timer = 1\\n        for j in range(1, self.__size + 1):\\n            vtx = self.get_vertex(j)\\n            if not vtx.visited:\\n                stack = [vtx]\\n                d[vtx.id_ - 1] = timer\\n                vtx.visited = True\\n                timer = self.__depth_first_search(stack, timer, d, f) + 1\\n\\n        for vtx in self.__vertices:\\n            print '%d %d %d' % (vtx.id_, d[vtx.id_ - 1], f[vtx.id_ - 1])\\n\\n    def __depth_first_search(self, stack, timer, d, f):\\n        while len(stack) > 0:\\n            top = stack[-1]\\n            avid = top.get_next_adjacnt()\\n            if avid == -1:\\n                timer += 1\\n                f[top.id_ - 1] = timer\\n                stack.pop()\\n            else:\\n                av = self.get_vertex(avid)\\n                if not av.visited:\\n                    timer += 1\\n                    stack.append(av)\\n                    d[av.id_ - 1] = timer\\n                    av.visited = True\\n        return timer\\n\\n    def __str__(self):\\n        str_ = ''\\n        for e in self.__vertices:\\n            str_ += '%s\\n' % e\\n        return str_\\n\\nclass Vertex(object):\\n    def __init__(self, id_):\\n        super(Vertex, self).__init__()\\n        self.id_ = id_\\n        self.adjacents = []\\n        self.next_idx = 0\\n        self.visited = False\\n\\n    def add_adjacent(self, avid):\\n        self.adjacents.append(avid)\\n\\n    def get_next_adjacnt(self):\\n        if len(self.adjacents) == 0: return -1\\n        if self.next_idx < len(self.adjacents):\\n            val = self.adjacents[self.next_idx]\\n            self.next_idx += 1\\n            return val\\n        else:\\n            return -1\\n\\n    def __str__(self):\\n        str_ = '%d ' % self.id_\\n        if len(self.adjacents) == 0:\\n            str_ += '0'\\n        else:\\n            str_ += '%d' % len(self.adjacents)\\n            for e in self.adjacents:\\n                str_ += ' %d' % e\\n        return str_\\n\\n\\n\\ns = int(sys.stdin.readline().strip())\\ngraph = Graph(s)\\nfor _ in range(0, s):\\n    vals = [int(x) for x in sys.stdin.readline().strip().split(' ')]\\n    v = Vertex(vals[0])\\n    graph.add_vertex(v)\\n    if vals[1] == 0: continue\\n    for i in range(0, vals[1]):\\n        v.add_adjacent(vals[2 + i])\\n\\ngraph.depth_first_search()", "target": "788", "substitutes": {}}
{"code": "import sys\\nimport math\\n\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\n\\nclass SegTree:\\n    \"\"\"\\n    init(init_val, ide_ele): \u914d\u5217init_val\u3067\u521d\u671f\u5316 O(N)\\n    update(k, x): k\u756a\u76ee\u306e\u5024\u3092x\u306b\u66f4\u65b0 O(N)\\n    query(l, r): \u533a\u9593[l, r)\u3092segfunc\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059 O(logN)\\n    \"\"\"\\n\\n    def __init__(self, init_val, segfunc, ide_ele):\\n        \"\"\"\\n        init_val: \u914d\u5217\u306e\u521d\u671f\u5024\\n        segfunc: \u533a\u9593\u306b\u3057\u305f\u3044\u64cd\u4f5c\\n        ide_ele: \u5358\u4f4d\u5143\\n        n: \u8981\u7d20\u6570\\n        num: n\u4ee5\u4e0a\u306e\u6700\u5c0f\u306e2\u306e\u3079\u304d\u4e57\\n        tree: \u30bb\u30b0\u30e1\u30f3\u30c8\u6728(1-index)\\n        \"\"\"\\n        n = len(init_val)\\n        self.segfunc = segfunc\\n        self.ide_ele = ide_ele\\n        self.num = 1 << (n - 1).bit_length()\\n        self.tree = [ide_ele] * 2 * self.num\\n        # \u914d\u5217\u306e\u5024\u3092\u8449\u306b\u30bb\u30c3\u30c8\\n        for i in range(n):\\n            self.tree[self.num + i] = init_val[i]\\n        # \u69cb\u7bc9\u3057\u3066\u3044\u304f\\n        for i in range(self.num - 1, 0, -1):\\n            self.tree[i] = self.segfunc(self.tree[2 * i], self.tree[2 * i + 1])\\n\\n    def update(self, k, x):\\n        \"\"\"\\n        k\u756a\u76ee\u306e\u5024\u3092x\u306b\u66f4\u65b0\\n        k: index(0-index)\\n        x: update value\\n        \"\"\"\\n        k += self.num\\n        self.tree[k] = x\\n        while k > 1:\\n            self.tree[k >> 1] = self.segfunc(self.tree[k], self.tree[k ^ 1])\\n            k >>= 1\\n\\n    def query(self, left, right):\\n        \"\"\"\\n        [left, right)\u306esegfunc\u3057\u305f\u3082\u306e\u3092\u5f97\u308b\\n        left: index(0-index)\\n        right: index(0-index)\\n        \"\"\"\\n        res = self.ide_ele\\n        left += self.num\\n        right += self.num\\n        while left < right:\\n            if left & 1:\\n                res = self.segfunc(res, self.tree[left])\\n                left += 1\\n            if right & 1:\\n                res = self.segfunc(res, self.tree[right - 1])\\n            left >>= 1\\n            right >>= 1\\n        return res\\n\\n\\ndef segfunc(x, y):\\n    \"\"\"\\n    \u533a\u9593(x,y)\u306b\u5bfe\u3057\u3066\u884c\u3044\u305f\u3044\u64cd\u4f5c\u306e\u5165\u529b\\n    \u6700\u5c0f\u5024\uff1amin(x,y)\\n    \u6700\u5927\u5024\uff1amax(x,y)\\n    \u548c\uff1ax + y\\n    \u7a4d\uff1ax * y\\n    \u6700\u5927\u516c\u7d04\u6570\uff1amath.gcd(x, y)\\n    \"\"\"\\n    return math.gcd(x, y)\\n\\n\\ndef resolve():\\n    n = int(input())\\n    A = list(map(int, input().split()))\\n    res = 0\\n\\n    ide_ele = 0\\n    seg = SegTree(A, segfunc, ide_ele)\\n\\n    for i in range(n):\\n        tmp = A[i]\\n        seg.update(i, 0)\\n        g = seg.query(0, n)\\n        res = max(res, g)\\n        seg.update(i, tmp)\\n    print(res)\\n\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "94", "substitutes": {"input": ["std", " Input", "src", "name", "pos", "rc", "output", " output", "mask", "start", "scale", "val", "Input", "source", "cmd", "end", "bin", "mode", "inf", "error", "feed", "iter", "rec", "gen", "prefix", "data", "proc"], "f_inf": ["f2int", " df_err", "f2diff", " df_int", " df_diff", "f_err", "f_diff", "f2inf", " df_inf", "f_int", "f2err"], "mod": ["add", "min", "m", "spec", "floor", "debug", "pos", "dim", "module", "ver", "circ", "scale", "bit", "temp", "orig", "mult", "fun", "round", "exp", "Mod", "mode", "fac", "MOD", "dec", "mag", "grow", "cm", "base"], "self": ["disk", "sub", "spec", "dev", "parent", "full", "close", "Self", "expr", "attr", "wrapper", "sw", "public", "co", "empty", "h", "wn", "deep", "round", "network", "client", "cmp", "first", "also", "new", "always", "ws", "obj", "params", "unknown", "this", "private", "shape", "final", "output", "history", "ren", "replace", "cl", "comp", "object", "quick", "print", "me", "req", "view", "ls", "ae", "by", "raw", "resp", "write", "console", "user", "re", "context", "next", "app", "agg", "form", "results", "subject", "right", "w", "earth", "body", "details", "partial", "diff", "per", "tmp", "eff", "my", "all", "you", "s", "attribute", "res", "github", "responsible", "pair", "remote", "change", "local", "each", "error", "lex", "review", "instance", "rel"], "init_val": ["Init_val", "init00value", " init_serv", "init_serv", "init00vals", "init2val", "init00loc", " init_vals", "init00serv", "init2vals", " init2vals", "init00val", "init2serv", "Init_vals", "Init_value", "init_loc", " init2serv", " init2val", "init_vals", "Init_loc", "init_value"], "segfunc": ["segfn", "segobj", "segmentfn", "psegproc", "seigfunc", "segproc", "segmentfunction", "begfun", "segefunction", " segobj", "segmentfunc", "segmentfun", "psegmfunc", "psegfunction", "segmfun", "psegmfun", " seggobj", "begmentfun", "segerfn", "segfun", "seggfunc", "segmfunction", "psegfun", "begmentfunc", "sepfunc", "seggfn", "psegfunc", "seigobj", "seggproc", " seggfun", "segerfunction", "segmfn", "segefunc", "begmentfn", "begfunc", "segmobj", " seggfn", " seggfunc", "psegmfunction", " segfun", "begfunction", "segerfunc", "segefn", "seigfn", "segmfunc", "seigfun", " segfn", "sepproc", "sepfunction", "segefun", "segerfun", "segfunction", "psegmproc", "seggobj", "seggfun", "segmproc", "seggfunction", "begmentfunction", "sepfun", "begfn"], "ide_ele": ["ide2node", "end___node", "id_el", "id_Ele", "end___ele", "ide_lem", "end_ele", "ide_e", "ide___ele", "ideablee", "ide__le", "ide___lem", "ide_val", "ideableele", "ide_le", "init_ele", "end_el", "ide__val", "ideableel", "end_lem", "end___el", "ide__el", "ide__ele", "ide___el", "end___lem", "ide2el", "ide_el", "ide___node", "end_node", "ide_Ele", "ide_node", "ideableval", "id_ele", "id_le", "init_el", "init_e", "ide2ele", "ide2lem", "id_val"], "n": ["z", "nn", "names", "m", "ni", "l", "nih", "nt", "t", "all", "name", "nr", "N", "i", "len", "ns", "mn", "nm", "r", "en", "un", "v", "na", "c", "sn", "g", "cn", "nu", "nb", "d", "p", "network", "ne", "net", "np", "nan", "nc", "o"], "num": ["Num", "nom", "sum", "m", "mon", "node", "number", "pos", "nam", "con", "dim", "den", "len", "nm", "mn", "div", "un", "perm", "cal", "na", "index", "mask", "th", "nu", "nb", "temp", "id", "orig", "mult", "alph", "zero", "total", "np", "cum", "rem", "no", "NUM", "um"], "tree": ["map", "str", "out", "level", "sum", "le", "node", "parent", "t", "stack", "Tree", "buffer", "value", "root", "index", "ree", "split", "val", "temp", "tail", "bin", "binary", "cache", "table", "model", "list", "forest", "data"]}}
{"code": "n = input()\\nif n==n[::-1]:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "289", "substitutes": {"n": ["z", "f", "nn", "m", "a", "l", "y", "t", "nt", "name", "s", "N", "i", "ns", "k", "v", "na", "c", "sn", "q", "b", "h", "g", "yes", "nu", "cn", "nb", "num", "d", "p", "j", "ne", "nan", "nc", "o", "u", "no", "x", "on"]}}
{"code": "n, m, x = map(int, input().split())\\na = list(map(int, input().split()))\\n\\ndef answer(n: int, m: int, x: int, a:list) -> int:\\n    left = 0\\n    right = 0\\n    for i in a:\\n        if i < x:\\n            left += 1\\n        else:\\n            right += 1\\n    return min(left, right)\\n\\nprint(answer(n, m, x, a))", "target": "660", "substitutes": {"n": ["nn", "l", "y", "nt", "t", "note", "s", "N", "fn", "ns", "r", "nm", "en", "mn", "v", "na", "c", "h", "sn", "q", "ot", "g", "wn", "cn", "nu", "nb", "rn", "num", "d", "p", "dn", "j", "ne", "net", "gn", "np", "nan", "nc", "o", "on", "an"], "m": ["mu", "gm", "ym", "mc", "tm", "am", "l", "y", "t", "sm", "s", "ms", "M", "mn", "r", "k", "im", "v", "em", "arm", "c", "mk", "mut", "h", "b", "mx", "dm", "rm", "p", "mun", "man", "j", "mt", "om", "mos", "mr", "mm", "mi", "fm", "cm", "md"], "x": ["z", "f", "xp", "X", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "ax", "xx", "r", "v", "xml", "xt", "dx", "wx", "c", "h", "q", "b", "g", "mx", "ex", "fx", "p", "rx", "xc", "e", "ox", "xe", "int", "xi", "o", "ic", "u", "w", "px", "xf", "tx"], "a": ["ba", "fa", "ap", "am", "qa", "ae", "ta", "l", "y", "t", "all", "ga", "s", "au", "xa", "ed", "A", "ca", "at", "la", "history", "aos", "pa", "na", "c", "wa", "ea", "b", "g", "aux", "area", "d", "p", "va", "ao", "oa", "ai", "sa", "ata", "aa", "ac", "o", "ma", "w", "ab", "aaa", "list", "an"], "left": ["min", "out", "level", "el", "top", "off", "le", "down", "wrong", "both", "l", "old", "control", "back", "front", "Left", "r", "open", "ft", "lock", "lt", "start", "lo", "ind", "internal", "leaf", "L", "Right", "low", "lp", "pl", "bottom", "last", "net", "inner", "half", "search", "main", "up", "art", "first", "shell", "ell", "nl", "lower", "ll", "st"], "right": ["rest", "max", "out", "top", "recent", "down", "wrong", "field", "red", "all", "full", "close", "row", "back", "result", "wall", "ax", "raw", "r", "root", "over", "rights", "rit", "random", "remote", "rew", "next", "radius", "just", "Right", "end", "ro", "bottom", "self", "new", "outer", "last", "block", "short", "inner", "mr", "best", "rem", "reverse", "correct", "ight", "success", "forward", "rel", "after"], "i": ["ei", "ini", "ri", "zi", "\u00ed", " bi", " vi", "ni", "aci", "ti", "ci", "ji", "gi", "ij", "hi", "oi", "ki", " ki", "phi", "ami", "yi", " ii", "di", " Xi", "Xi", "bi", "j", "pi", "qi", "ai", "ii", "xi", "si", "li", "I", "iti", "iu", "wi", "eri"]}}
{"code": "# ABC068A - ABCxxx\\ndef main():\\n    N = input().rstrip()\\n    print(\"ABC\", N, sep=\"\")\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "429", "substitutes": {}}
{"code": "S = input()\\nl = [S[0]]\\na = 0\\nn = len(S)\\nf = S[0]\\nfor i in range(1, n):\\n    if f != \"L\" or S[i] != \"R\":\\n        l[a] += S[i]\\n    else:\\n        l.append(S[i])\\n        a += 1\\n    f = S[i]\\n\\n#print(l)\\nfor x in l:\\n    r = x.count(\"R\")\\n    t = len(x)\\n    a, b = divmod(t, 2)\\n    for i in range(r - 1):\\n        print(\"0\", end=\" \")\\n    if r % 2 == 0:\\n        print(a, end=\" \")\\n        print(a + b, end=\" \")\\n    else:\\n        print(a + b, end=\" \")\\n        print(a, end=\" \")\\n    for i in range(t - r - 1):\\n        print(\"0\", end=\" \")\\n", "target": "722", "substitutes": {"S": ["Y", "Sample", "BS", "Bytes", "SI", "H", "C", "Si", "SS", "X", "F", "R", "SL", "SAN", "G", "PS", "SB", "LS", "JS", "W", "SM", "s", "N", "M", "SOURCE", "A", "RS", "CSS", "Windows", "E", "O", "SR", "Input", "DS", "Source", "D", "US", "NS", "SU", "SO", "L", "SP", "FS", "P", "TS", "Q", "T", "SA", "SF", "SE", "Z", "VS", "V", "Statistics", "I", "B", "CS", "GS", "Results", "JSON", "SQL"], "l": ["z", "ls", "el", "le", "m", "bl", "y", "t", "kl", "s", "r", "lb", "la", "v", "sl", "c", "ln", "h", "b", "lc", "g", "tl", "ml", "d", "p", "dl", "L", "j", "lr", "al", "o", "li", "nl", "ll"], "a": ["z", "ba", "m", "am", "ta", "ae", "ka", "y", "t", "af", "s", "ga", "xa", "au", "A", "ca", "r", "la", "at", "v", "pa", "wa", "c", "ea", "b", "area", "d", "p", "da", "ao", "j", "oa", "e", "sa", "ai", "aa", "aj", "ac", "o", "ma", "w", "ab", "aaa", "x", "an"], "n": ["nn", "m", "ni", "nt", "t", "nr", "s", "N", "len", "ns", "r", "k", "fn", "nm", "v", "c", "ln", "sn", "h", "an", "g", "nu", "nb", "d", "p", "j", "np", "nc", "w", "no", "nl", "ll"], "f": ["type", "fl", "fa", "m", "fast", "F", "fg", "df", "y", "t", "cf", "af", "fr", "r", "fb", "k", "v", "alf", "ft", "c", "h", "rf", "fp", "g", "b", "ef", "d", "p", "fi", "bf", "e", " F", "uf", "sf", "tf", "fc", "o", "w", "lf", "ff", "xf", "x", "fm", "fd"], "i": ["io", "ini", "ri", "zi", "m", "uri", "this", "ix", "ti", "info", "ip", "key", "\u0438", "k", "ji", "ci", "gi", " j", "v", "ij", "c", "ori", "index", "ki", "q", "b", "h", "slice", "ind", "id", "di", "num", "p", "bi", "j", "pi", "it", "int", "ii", "iri", "si", "ic", "xi", "I", "li", "iter", "me", "x", "ui", "mi", "iu", "im", "init"]}}
{"code": "import sys\\n\\ndef solve():\\n    input = sys.stdin.readline\\n    N = int(input())\\n    A = [int(a) for a in input().split()]\\n    B = [(A[i], i) for i in range(N)]\\n    B.sort(reverse = True)\\n\\n    DP = [[-1 for j in range(N + 1)] for _ in range(N)] #i\u756a\u76ee\u306e\u5e7c\u5150\u307e\u3067\u898b\u305f\u6642\u3001\u5de6\u304b\u3089i\u756a\u76ee\u307e\u3067\u57cb\u307e\u3063\u3066\u3044\u308b\u6642\u306e\u6700\u5927\u5024\\n    DP[0][0] = B[0][0] * abs(B[0][1] - (N - 1))\\n    DP[0][1] = B[0][0] * B[0][1]\\n\\n    for i in range(1, N):\\n        for j in range(i + 1):\\n            #\u53f3\u306b\u8a70\u3081\u308b\u6642\u306fj\u306e\u5024\u306f\u5909\u308f\u3089\u306a\u3044\\n            #\u5de6\u306b\u8a70\u3081\u308b\u3068\u304d\u306fj += 1\\n            DP[i][j] = max(DP[i][j], DP[i-1][j] + B[i][0] * abs(B[i][1] - (N - 1 - i + j)))\\n            DP[i][j+1] = max(DP[i][j+1], DP[i-1][j] + B[i][0] * abs(B[i][1] - j))\\n    print(max(DP[N-1]))\\n\\n    return 0\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "91", "substitutes": {"input": ["f", "interface", "str", "sleep", "out", "stream", "connect", "reader", "sum", "eval", "cat", " Input", "shift", "sample", "raw", "output", "cin", "ch", "filter", "json", "empty", "index", "q", "csv", "enum", "ref", "Input", "source", "select", "cmd", "context", "config", "read", "next", "command", "join", "act", "get", "it", "int", "each", "inner", "txt", "focus", "quick", "n", "table", "feed", "print", "exec", "set", "data", "view", "text", "init"], "N": ["Num", "K", "H", "C", "AN", "F", "R", "Ni", "CNN", "NB", "NI", "M", "NR", "Na", "NP", "NA", "S", "ND", "Ne", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "Ns", "NUM", "NC", "NO", "NN", "NH"], "A": ["Y", "AR", "AA", "H", "C", "X", "AC", "R", "M", "BA", "AL", "LA", "U", "JA", "S", "As", "AU", "HA", "Array", "AT", "AF", "L", "An", "mA", "P", "AS", "T", "AB", "AP", "V", "Answer", "I", "Alpha", "SA", "OA"], "a": ["f", "pai", "ba", "asia", "ae", "af", "au", "ga", "xa", "ax", "ca", "ach", "la", "at", "na", "ea", "b", "aid", "area", "aaaa", "va", "p", "alpha", "ao", "\u00e4", "ya", "ai", "sa", "ata", "aq", "aa", "aed", "ac", "sha", "ma", "aaa", "x", "ana", "an", "ova", "aff"], "B": ["Y", "BE", "BB", "BS", "AA", "DB", "C", "X", "EB", "Two", "RB", "R", "G", "W", "SB", "NB", "BO", "M", "BA", "WB", "BC", "BI", "b", "S", "E", "O", "D", "L", "TB", "P", "T", "J", "AB", "Z", "V", "I", "Bern", "BF", "BR", "Bs"], "i": ["z", "io", "ini", "ri", "zi", "l", "y", "ti", "ip", "ci", "k", "ji", "v", "gi", "ij", "c", "index", "ki", "phi", "ind", "id", "di", "ik", "p", "bi", "pi", "fi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "iri", "I", "li", "u", "ia", "x", "ui", "mi", "iu", "im"], "DP": ["DL", "DB", "WD", "DF", "DJ", "PO", "dx", "NP", "DEP", "DA", "ST", "DX", "EP", "Dist", "BP", "DW", "TP", "SP", "PP", "DC", "DR", "FP", "DM", "dp", "DE", "CP", "Delta", "POS", "DI"], "j": ["z", " dot", " jump", " dj", "ji", "ij", " __", " v", " p", " e", " h", " ii", " J", " c", " z", "jj", " ja", " job", "J", " q", "___", " y", " g"], "_": [" name", " un", "name", "ix", " m", " self", " __", " p", " t", " time", " l", " x", " all", " b", "___", " index"]}}
{"code": "all = [x for x in range(1,53)]\\n\\nN = int(input())\\ni = 1\\n\\nwhile i <= N:\\n\tM, num = input().split()\\n\tnum = int(num)\\n\tif M == 'S':\\n\t\tall.remove(num)\\n\telif M == 'H':\\n\t\tall.remove(num+13)\\n\telif M == 'C':\\n\t\tall.remove(num+26)\\n\telif M == 'D':\\n\t\tall.remove(num+39)\\n\t\\n\ti += 1\\n\\nsN = 52 - N\\n\\nfor j in range(sN):\\n\tif all[j] // 13 == 0 or (all[j] // 13 == 1 and all[j] % 13 == 0):\\n\t\tprint(\"S {}\".format(all[j]))\\n\telif all[j] // 13 == 1 or (all[j] // 13 == 2 and all[j] % 13 == 0):\\n\t\tprint(\"H {}\".format(all[j]-13))\\n\telif all[j] // 13 == 2 or (all[j] // 13 == 3 and all[j] % 13 == 0):\\n\t\tprint(\"C {}\".format(all[j]-26))\\n\telse:\\n\t\tprint(\"D {}\".format(all[j]-39))", "target": "628", "substitutes": {"all": ["good", "found", "only", "other", "full", "compl", "v", "empty", "val", "default", "call", "average", "ell", "first", "li", "list", "also", "ll", "new", "obj", "m", "both", "att", "this", "t", "result", "broad", "lt", "long", "test", "cl", "same", "last", " ALL", "current", "quick", "n", "gl", "left", "alled", "comm", "fl", "alls", "active", "bl", "l", "pos", "raw", "ssl", "at", "latest", "All", "app", "pl", "total", "valid", "right", "al", "details", "arr", "out", "ALL", "html", "a", "old", "url", "cal", "used", "any", "config", "null", "act", "local", "it", "each", "void", "log"], "x": ["f", "m", "xp", "X", "a", "xy", "l", "y", "t", "ix", "xs", "xx", "k", "xml", "xt", "dx", "wx", "ex", "ct", "d", "p", " X", "rx", "xxx", "xc", " xx", "ox", "ai", "xxxx", "np", "xi", "n", "w", "I", "xf", "on", "xd", "tx", "inx"], "N": ["Y", "Num", "K", "IP", "C", "NF", "F", "Sn", "R", "Ni", "G", "NB", "NI", "NG", "NR", "CN", "A", "Len", "NL", "NP", "NA", "Size", "S", "E", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NUM", "NC", "NO"], "i": ["ini", "out", "zi", "m", "a", "l", "y", "t", "ti", "ip", "ci", "k", "im", "gi", "status", "v", "ij", "c", "index", "phi", "g", "sim", "id", "di", "p", "bi", "pi", "ai", "it", "ii", "xi", "n", "si", "o", "I", "li", "u", "mi", "iu", "multi"], "M": ["Mat", "MO", "K", "m", "C", "MP", "FM", "H", "F", "R", "PM", "MT", "SM", "Other", "LM", "CM", "Mon", "MI", "MN", "MC", "MAT", "Met", "mut", "MM", "S", "MH", "D", "Mr", "L", "JM", "P", "My", "MON", "MA", "MS", "T", "DM", "MAN", "J", "V", "RM", "B", "MIT", "Mer", "MD", "Method", "Man"], "num": ["Num", "nom", "obj", "member", "sum", "m", "mon", "one", "tim", "ret", "nt", "name", "number", "dev", "note", "nam", "result", "final", "dim", "nm", "mn", "en", "msg", "cal", "na", "index", "nu", "val", "nb", "test", "mem", "orig", "p", "col", "alph", "local", "new", "zero", "net", "mat", "int", "np", "block", "mark", "n", "rem", "no", "mom", "NUM", "um", "unit", "text", "dat"], "sN": ["atsM", "nN", "sNR", "atsNS", "lsM", "Sn", "SL", "lsN", "tsLen", "lsNS", "nNR", "nNS", "atsNR", "sn", "tsN", " sLen", "SN", " sn", "sNS", "atsN", "sLen", " sL", "tsL", "nM", "sM", "tsn", "lsNR", "SLen", "sL"], "j": ["z", "str", "obj", "jl", "pr", "pt", "att", "ja", "jit", "l", "y", "ret", "name", "ix", "jack", "note", "fr", "key", "jp", "dt", "ji", "gr", "at", "div", "v", "json", "ij", "item", "job", "q", "b", "je", "g", "jet", "jac", "th", "ind", "er", "ijk", "next", "exp", "br", "oj", "kj", "it", "jj", "current", "jump", "bo", "tr", "right", "aj", "J", "n", "uj", "dj", "dr", "bj", "js", "jc"]}}
{"code": "N = int(input())\\nA = [int(input()) for _ in range(N)]\\n\\nif A[0] > 0:\\n    print(-1)\\n    exit()\\n\\nans = 0\\nprev = 0\\n\\nfor a in reversed(A):\\n    if prev > 0:\\n        if a == (prev - 1):\\n            prev = a\\n            continue\\n        elif a < prev:\\n            print(-1)\\n            exit()\\n    ans += a\\n    prev = a\\n\\nprint(ans)\\n", "target": "785", "substitutes": {"N": ["Num", "K", "C", "X", "F", "Sn", "Ni", "CNN", "NB", "NI", "M", "NR", "Na", "NP", "NA", "S", "ND", "NT", "D", "NS", "L", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "Ns", "NN", "NH"], "A": ["AI", "AA", "Ar", "C", "AC", "IA", "G", "AV", "Abs", "BA", "CA", "LA", "TA", "U", "JA", "DA", "NA", "As", "D", "HA", "Array", "AT", "AU", "AF", "WA", "GA", "An", "At", "P", "MA", "Q", "AM", "This", "AS", "AE", "The", "AP", "AB", "V", "Alpha", "B", "AST", "SA"], "_": [" un", "ix", " m", " j", "__", " __", " p", "val", " time", " c", " l", " all", " pre", " g"], "ans": ["ens", "rors", "ls", "names", "vers", "ones", "rs", "cons", "amps", "iann", "ins", "anas", "ms", "aus", "ns", "ons", "outs", "ann", " Ans", "aos", "arts", "beans", "ents", "es", "ians", "ums", "angs", "rans", "ands", "posts", "ANS", "ots", "uns", "nas", "offs", "ams", "n", "ads", "ats", "orders", "ros", "anks", "an", "ks", "ants", "olds"], "prev": ["map", "sup", "vious", "tmp", "pr", "top", "ap", "par", "other", "rep", "parent", "old", "gs", "bp", "pb", "pp", "i", "final", "adj", "jp", "upper", "v", "history", "before", "root", "snap", "sp", "era", "position", "ref", "mp", "above", "rev", "pre", "orig", "next", "p", "Prev", "alpha", "j", "alph", "window", "zero", "buf", "av", "last", "cmp", "past", "current", "jump", "then", "var", "pri", "loc", "first", "pres", "rem", "save", "Previous", "rel", "reverse", "req", "ana", "new"], "a": ["z", "f", "apa", "fa", "ap", "ae", "another", "l", "ha", "t", "action", "sta", "au", "ga", "s", "xa", "i", "ca", "at", "la", "v", "pa", "na", "aw", "c", "ea", "an", "b", "area", "p", "va", "alpha", "ica", "ao", "j", "act", "oa", "e", "isa", "sa", "ai", "past", "ata", "aa", "al", "ac", "art", "o", "ma", "u", "w", "ia", "sha", "ab", "eas", "aaa", "ace", "x", "ar", "ana", "am", "aff"]}}
{"code": "n,d = [int(z) for z in input().split()]\\np=[]\\nfor g in range(n):\\n      p.append([int(z) for z in input().split()])\\nc=0\\n\\ndef dist(a,b):\\n      s=0\\n      for i in range(d):\\n            s+= (a[i]-b[i])**2\\n      return s**0.5\\n\\nfor j in range(n):\\n      for k in range(j+1,n):\\n            z = dist(p[j],p[k])\\n            #print(z)\\n            if (type(z)==float)or(type(z)==int):\\n                       if (z%1==0):\\n                             c+=1\\nprint(c)\\n", "target": "182", "substitutes": {"n": ["nn", "nia", "m", "l", "y", "nt", "t", "N", "ns", "mn", "r", "v", "na", "ng", "sn", "ln", "an", "q", "h", "nu", "nb", "num", "nv", "dn", "ne", "e", "gn", "np", "nan", "nc", "o", "w", "no", "x"], "d": ["done", "m", "l", "t", "dict", "dd", "r", "dt", " D", "db", "sd", "nd", "D", "di", "pd", "dn", "da", "do", "ds", "e", "dc", "dh", "rd", "ad", "dr", "dat"], "z": ["f", "za", "yz", "oz", "zi", "iaz", "zip", "zy", "y", "t", "iz", "uz", "hz", "v", "az", "cz", "h", "q", "zh", "gz", "ze", "id", "tz", "zer", "size", "zen", "zone", "e", "zes", "nz", "ez", "Z", "u", "zz", "zo", "x"], "p": ["ps", "f", "pe", "pt", "pr", "ap", "m", "par", "l", "pkg", "t", "bp", "pb", "pp", "jp", "r", "tp", "pa", "vp", "pm", "pers", "q", "h", "mp", "pd", "pi", "cp", "lp", "ping", "P", "np", "pc", "dp", "wp", "pn"], "g": ["f", "kg", "gm", "ag", "m", "y", "gs", "ga", "gp", "ang", "gi", "v", "gu", "h", "q", "gc", "ge", "ik", "go", "e", "gn", "gh", "eg", "o", "ic", "w", "ia", "og"], "c": ["f", "sc", "m", "C", "l", "cs", "t", "con", "rc", "ca", "r", "v", "co", "cz", "h", "cv", "lc", "gc", "cc", "ct", "xc", "e", "cd", "dc", "ac", "o", "cm", "count"], "a": ["ba", "apt", "apa", "ap", "am", "ae", "att", "sta", "ed", "au", "A", "r", "at", "la", "ea", "va", "app", "act", "oa", "e", "sa", "aa", "aj", "al", "ac", "ma", "ia", "ab", "aaa", "ar", "ach", "an"], "b": ["rb", "ba", "ib", "another", "be", "other", "y", "l", "bc", "ed", "by", "cb", "fb", "bh", "db", "v", "bi", "e", "bu", "sb", "gb", "bis", "ob", "bs", "B", "ab", "bb", "eb"], "s": ["f", "stats", "sts", "ps", "ws", "sv", "ls", "m", "cs", "rs", "t", "l", "gs", "xs", "ms", "os", "ns", "r", "v", "sd", "es", "h", "eds", "S", "changes", "ss", "ds", "abs", "o", "w", "sq", "u", "ats", "us", "sat", "ts", "ar", "qs", "js"], "i": ["io", "ini", "\u00ed", "ir", "y", "ix", "iy", "ti", "info", "ip", "\u0438", "ji", "gi", "ij", "ind", "id", " ii", "di", "bi", "pi", "ai", "it", "ii", "xi", "si", "o", "ic", "li", "I", "ia", "x", "ui", "mi", "iu", "im"], "j": ["f", "obj", "jl", "m", "ja", "l", "y", "t", "key", "jp", "ji", "r", "v", "ij", "job", "q", "h", "je", "ijk", "ik", "bi", "br", "jo", "kj", "jj", "jump", "aj", "J", "o", "uj", "dj", "x", "bj", "js", "jc"], "k": ["kg", "K", "m", "kr", "kt", "kh", "ka", "ck", "kl", "key", "kk", "kan", "ke", "kid", "v", "kar", "mk", "ki", "q", "kn", "ak", "ijk", "ik", "km", "kj", "ek", "kw", "tk", "ic", "u", "w", "sk", "ko", "ku", "ks"]}}
{"code": "from collections import defaultdict\\ndd = defaultdict(int)\\nn,p=map(int, input().split())\\nS = list(input().rstrip())\\ntmp = 0\\nr=1\\nsu=0\\ndd[0]=1\\nif p==2 or p==5:\\n    c=n\\n    for s in S[::-1]:\\n        if int(s)%p==0:\\n            su+=c\\n        c-=1\\n    print(su)\\nelse:\\n    for s in S[::-1]:\\n        tmp+=int(s)*r\\n        tmp%=p\\n        dd[tmp]+=1\\n        r*=10\\n        r%=p\\n    for i in dd.values():\\n        su += (i*(i-1))//2\\n    print(su)\\n", "target": "448", "substitutes": {"dd": ["md", "add", "sed", "ld", "pard", "und", "ded", "dds", "PD", "cond", "ud", "df", "ord", "bd", "tt", "DD", "dict", " DD", "pp", "db", "idd", "sd", "odd", "nd", "CD", "edd", "isd", "ird", "supp", "di", "pd", "vd", "hd", "d", "der", "da", "ds", "td", "udd", " sed", "ond", "cd", "od", "ears", "rd", "ad", "mm", "ff", "bb", "xd", " ded", "fd"], "n": ["z", "nn", "m", "C", "l", "nt", "t", "name", "number", "nr", "N", "ns", "k", "v", "na", "sn", "b", "cn", "nu", "nb", "num", "d", "dn", "j", "pi", "np", "nan", "nc", "x", "count"], "p": ["op", "ps", "pe", "f", "pt", "pr", "m", "ap", "l", "y", "t", "bp", "pb", "pp", "ip", "tp", "jp", "perm", "sp", "pa", "q", "b", "h", "g", "mp", "pre", "d", "pd", "power", "pat", "j", "pi", "cp", "lp", "pl", "P", "e", "np", "pc", "dp", "o", "u", "part", "w", "pid", "wp", "x", "pn", "pg"], "S": ["BS", "Bytes", "SI", "Sl", "Si", "C", "X", "SS", "WS", "R", "SL", "G", "JS", "SB", "PS", "LS", "Sand", "N", "M", "A", "Sing", "U", "Save", "Socket", "Windows", "O", "DS", "NS", "SU", "L", "ss", "Su", "P", "TS", "SH", "T", "SF", "AS", "V", "I", "B", "CS", "GS", "Unix", "Ps", "Sel"], "tmp": ["tu", "rb", "emp", "out", "obj", "tm", "m", "xy", "nt", "t", "tt", "pos", "nr", "attr", "rc", "tp", "err", "jp", "v", "perm", "sp", "co", "snap", "tar", "mk", "mut", "b", "tem", "mp", "temp", "nb", "tn", "test", "ind", "pre", "num", "ctx", "inter", "alpha", "j", "pi", "cp", "td", "seed", "cmp", "np", "vt", "tc", "loc", "mm", "rt"], "r": ["z", "f", "rb", "rate", "rr", "m", "cr", "sr", "R", "l", "rs", "t", "nr", "rc", "err", "k", "v", "q", "b", "g", "pair", "er", "re", "rm", "d", "br", "j", "e", "rd", "o", "mr", "u", "w", "dr", "rat", "x", "ar", "rt"], "su": ["uid", "tu", "sing", "cas", "out", "sum", "sc", "des", "sudo", "util", "pu", "sr", "se", "sex", "sie", "une", "aus", "ci", "un", "sd", "sl", "gu", "prof", "lu", "sn", "rue", "seat", "nu", "sen", "sim", "eu", "num", "du", "SU", "cos", "wu", "Su", "sb", "sa", "bu", "so", "uc", "si", "tc", "cu", "u", "sur", "uu", "uni", "cum", "ju", "us", "sil", "ui", "ru", "stri"], "c": ["z", "f", "mc", "m", "C", "cat", "cr", "a", "cs", "l", "t", "cf", "con", "ci", "ca", "k", "co", "b", "lc", "gc", "g", "cn", "cc", "ct", "ce", "d", "cp", "xc", "e", "cd", "dc", "uc", "tc", "ac", "cu", "u", "nc", "cm"], "s": ["ps", "ths", "sts", "f", "ws", "sv", "ls", "m", "fs", "a", "cs", "rs", "t", "l", "gs", "xs", "ins", "ars", "os", "ons", "sw", "ns", "ms", "strings", "sp", "v", "hs", "es", "ys", "sn", "ass", "b", "eds", "ies", "h", "string", "ches", "ains", "ss", "j", "ds", "uns", "sa", "sb", "ses", "ears", "si", "bs", "iss", "bes", "ats", "tes", "ates", "x", "ts", "ks", "js"], "i": ["f", "ini", "ri", "zi", "m", "a", "t", "ix", "ti", "ip", "ci", "gi", "v", "gu", "oi", "index", "h", "b", "phi", "ind", "id", "di", "bi", "multi", "j", "pi", "ai", "it", "int", "ims", "ii", "xi", "si", "ic", "o", "li", "I", "u", "x", "ui", "mi", "iu", "im", "inst"]}}
{"code": "count=int(raw_input())\\n\\nfor i in range(0,count):\\n    a,b,c=map(int,raw_input().split())\\n    if pow(a,2)+pow(b,2)==pow(c,2):\\n        print 'YES'\\n    elif pow(a,2)+pow(c,2)==pow(b,2):\\n        print 'YES'\\n    elif pow(b,2)+pow(c,2)==pow(a,2):\\n        print 'YES'\\n    else:\\n        print 'NO'", "target": "199", "substitutes": {"count": ["ount", "max", "sum", "find", "counter", "amount", "nt", "cycle", "number", "len", "ch", "limit", "length", "index", "start", "Count", "gc", "ct", "nb", "code", "ind", "force", "num", "cont", "size", "ctr", "total", "consider", "mount", "current", "cache", "batch", "n", "conf", "list", "base"], "i": ["ir", "ite", "ix", "iy", "ti", "ci", "r", "k", "il", "gi", " j", "ij", "ind", "id", " ii", "p", "j", "e", " I", "it", "ii", "n", "I", "iter", "im"], "a": ["f", "ba", "el", "ap", "ae", "be", "l", "t", "ga", "au", "A", "r", "ca", "la", "at", "v", "ea", "an", "g", "area", "d", "va", "p", "alpha", "ao", "app", "oa", "e", "sa", "ai", "aa", "aj", "al", "ac", "o", "ma", " A", "u", "ia", "w", "ab", "aaa", "ar", "am"], "b": ["z", "f", "rb", "ba", "ib", "be", "l", "y", "t", "bc", "by", "back", "cb", "fb", "r", "v", "db", "h", "g", "wb", "nb", "d", "p", "bi", "br", "j", "e", "sb", "gb", "bis", "ac", "ob", "o", "bs", "bot", "ab", "bb", "bar", "base", "eb"], "c": ["z", "f", "sc", "mc", "C", "cr", "cs", "l", "t", "bc", "cf", "rc", "cin", "ca", "cb", "ch", "r", "v", "co", "cv", "h", "lc", "g", "ct", "cc", "ce", "d", "cos", "cur", "can", "p", "cp", "ec", "e", "dc", "fc", "ac", "tc", "n", "cu", "u", "o", "cm"]}}
{"code": "l = []\\nwhile True:\\n  a,op,b = input().split()\\n  if op == '?':\\n    break\\n  A = int(a)\\n  B = int(b)\\n  if op == '+':\\n    l.append(A+B)\\n  elif op == '-':\\n    l.append(A-B)\\n  elif op == '*':\\n    l.append(A*B)\\n  elif op == '/':\\n    l.append(A//B)\\nfor i in l:\\n  print(i)", "target": "475", "substitutes": {"l": ["f", "fl", "lit", "ol", "ls", "el", "m", "bl", "lv", "t", "lis", "kl", "compl", "r", "vl", "la", "lb", "v", "sl", "c", "lt", "ln", "like", "lc", "g", "tl", "acl", "cl", "ml", "d", "p", "dl", "L", "lp", "pl", "hl", "lr", "al", "n", "o", "log", "li", "left", "dL", "nl", "list", "rl", "lists", "ll"], "a": ["f", "obj", "ap", "ae", "ta", "t", "sta", "au", "ca", "at", "la", "c", "ea", "an", "g", "er", "area", "alpha", "j", "act", "oa", "ai", "sa", "ata", "aa", "al", "art", "ac", "ma", "ia", "ab", "aaa", "ar", "ach", "am", "aff"], "op": ["type", "lit", "hop", "str", "ort", "top", "ap", "operator", "ter", "Op", "OP", "name", "pos", "pop", "rot", "iop", "ip", "ok", "ang", "jp", "ver", "opt", "sp", "rop", "sym", " cop", "alg", "ot", "ops", "mod", "bit", "mp", "ind", "re", "oper", "cmd", "pre", "oop", "comp", "typ", "p", "exp", "ost", "ox", "ype", "cmp", "it", "block", "up", "opp", "vr", "loc", "o", "ob", "cop", "ac", "mom", "set", "lat", "arg", "req", "gen"], "b": ["f", "erb", "rb", "ib", "obj", "be", "y", "t", "bc", "cb", "fb", "r", "v", "db", "c", "g", "bit", "nb", "d", "bi", "br", "j", "sb", "reb", "beta", "bis", "batch", "n", "ob", "bs", "ab", "bb", "base", "eb"], "A": ["App", "AR", "AI", "AA", "USA", "C", "RA", "API", "AC", "AN", "Al", "IA", "G", "AV", "ACC", "Abs", "M", "BA", "CA", "LA", "AL", "UA", "EA", "As", "D", "AU", "HA", "AT", "AGE", "Array", "AF", "L", "EMA", "GA", "An", "At", "mA", "P", "AH", "AS", "T", "AE", "Ma", "AB", "AP", "V", "One", "I", "Alpha", "AST", "Ax", "SA"], "B": ["Y", "BE", "BB", "BS", "Bytes", "VB", "DB", "H", "C", "EB", "F", "RB", "Two", "Bu", "OB", "Ber", "Buffer", "G", "SB", "NB", "BO", "N", "WB", "BA", "IB", "BI", "Bar", "GB", "Builder", "E", "O", "New", "D", "MB", "L", "TB", "LB", "FB", "T", "J", "AB", "Z", "V", "BT", "I", "BW", "BL", "BY", "BR", "Bs"], "i": ["ei", "ini", "ri", "zi", "\u00ed", "m", " bi", " vi", "iii", "t", "ti", " li", "gi", "v", "ij", "oi", "index", "ki", "yi", " Ai", " ii", "di", " Xi", "Xi", "d", "p", "bi", " ti", "j", "pi", "ai", "ii", "xi", "si", "n", "ic", "I", "li", " di", "iter", "u", "x", "mi"]}}
{"code": "n,m = map(int, input().split())\\n\\ndef make_divisors(n):\\n  divisors = []\\n  for i in range(1, int(n**0.5)+1):\\n    if n%i == 0:\\n      divisors.append(i)\\n      if i != n//i:\\n        divisors.append(n//i)\\n  divisors.sort(reverse=True)\\n  return divisors\\n\\nnumbers = make_divisors(m)\\nfor i in range(len(numbers)):\\n  if numbers[i] <= m/n:\\n    print(numbers[i])\\n    break", "target": "163", "substitutes": {"n": ["z", "f", "nn", "l", "y", "nt", "t", "name", "s", "N", "len", "ns", "r", "k", "mn", "nm", "fn", "un", "v", "en", "na", "c", "ln", "h", "sn", "b", "an", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "j", "ne", "ai", "net", "int", "gn", "np", "nan", "nc", "o", "w", "u", "non", "x"], "m": ["z", "gm", "mc", "tm", "l", "t", "ms", "M", "mn", "r", "k", "nm", "v", "c", "bm", "h", "b", "g", "dm", "num", "d", "p", "man", "j", "mt", "e", "mr", "o", "mm", "mi", "cm"], "divisors": [" divensORS", " divusORS", "divorures", " divorures", " divisor", " divissistors", " divorores", " divesores", "divesor", "divesctors", "divizORS", " divisures", " divensions", "divissctors", "divorisors", " divisions", "divensions", "divusORS", " divisistors", "divisORS", "divesores", "divoror", "divensistors", "divorisions", "divissistors", "divizures", " divissions", "divizions", " divisORS", " divissores", "divorores", "divisistors", "divorisistors", " divisctors", " divisores", " divensors", "divissors", " divisners", "divistORS", "divesners", "divusor", " divensores", "divusners", "divesORS", "divusures", "divensores", "divistores", "divensor", "divissores", " divoror", "divizores", " divusors", "divisctors", "divissor", "divisions", " divusners", "divizors", " divorors", " divesor", "divesors", "divistions", "divensners", "divistors", " divusores", "divusores", "divisor", "divensctors", "divorors", "divisners", " divesctors", "divizor", " divissors", "divisores", " divesors", "divorisores", "divissions", "divusors", "divensORS", "divensors", "divisures"], "i": ["f", "ini", "ei", "ri", "zi", "iq", "cli", "uri", "a", "ni", "l", "y", "t", "ix", "iy", "ti", "s", "\u0438", "ci", "ip", "k", "ji", "gi", "v", "gu", "ij", "ori", "oi", "index", "ki", "q", "b", "phi", "g", "hi", "ami", "yi", "sim", "di", "ik", "d", "p", "bi", "vi", "j", "pi", "multi", "qi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "iri", "x", "iti", "mi", "iu", "im", "ui"], "numbers": ["enights", "snumbers", "snometers", "numeric", " nists", " nums", "rnumbers", "neumbers", "nuumbers", "nometers", "nums", "lums", "nsograms", " numbered", "nists", " Nors", "rnometers", "neumbered", " Nights", " nomes", "nsometers", " Numbers", "nights", "nuums", "nsumeric", "rnograms", "lumbers", "nsumbers", "nulements", " Nomes", "nomes", "numbered", "snums", "enomes", " nograms", " nometers", " nights", "neums", "neists", "enors", "nlements", "snlements", " nors", "enumbers", "nograms", "nors", "nelements", " numeric", "nuometers", "neometers", "lumbered", "lists", "rnumeric"]}}
{"code": "x1, y1, x2, y2 = map(int, input().split())\\ndx, dy = x2 - x1, y2 - y1\\ndef rot(x, y):\\n    return -y, x\\ndx, dy = rot(dx, dy)\\nx3, y3 = x2 + dx, y2 + dy\\ndx, dy = rot(dx, dy)\\nx4, y4 = x3 + dx, y3 + dy\\nprint(x3, y3, x4, y4)\\n", "target": "62", "substitutes": {"x1": ["ox1", "px1", "ax123", " x123", "ox4", "ox2", "px123", "px3", "ax1", "ax3", "x123"], "y1": [" yone", "ey001", "ey3", "py1", "ey2", "Y001", "ey1", "Y2", "y01", "x001", "y001", "ey01", "eyone", "Y1", "pyone", " y01", "py01", "py3", "yone"], "x2": ["xi4", "xy3", "xpl", "rx3", "xy2", " xpl", "rx1", "rx4", "rxpl", "xy4", "rx2", "xy1", "xipl", "xi2", "xi1"], "y2": ["vy102", "ry62", "y25", "my2", " y25", "sys2", "y62", "py1", "vy62", "y5", "key2", "z102", "ylet", "vylet", "sys102", " y5", "sys25", "sys1", "py2", "my4", "ry2", "ry102", "py4", " y102", "keylet", "z1", "key62", "vy2", "my5", "z2", "py5", "key102", "y102", "rylet", "my1", "z25"], "dx": ["md", "feat", "ld", "cod", "deb", "xp", "eddy", "die", "ud", "xy", "ord", "ww", "ix", "xs", "wd", "ck", "dos", "dim", "dist", "xx", "dd", "ax", "dt", "ke", "compl", "wx", "dq", "ex", "mod", "fx", "wr", "ind", "oe", "work", "ctx", "cmd", "d", "du", "cos", "dl", "ady", "da", "ds", "com", " xx", "ox", "addr", "cd", "dh", "lex", "ctl", "rd", "px", "dj", "dr", "req", "js", "xd", "tx", "dat", "fd"], "dy": ["des", "ded", "ties", "eddy", "die", "xy", "zy", "elt", "py", "ni", "addy", "iy", "eor", "dll", "rot", "dev", "den", "dist", "fn", "yy", "ns", "dt", "sy", "ty", "err", "dim", "len", "mil", "why", "ji", "phy", "dq", "gy", "dem", "dis", "wy", "ind", "fy", "dl", "der", "dn", "dir", "j", "ds", "height", "low", "ne", "ady", "lon", "mix", "uy", "beta", "inner", "fr", "txt", "bis", "delay", "bs", "dj", "rel", "dies", "south", "dot", "md", "tx", "irms"], "x": ["z", "yx", "xp", "m", "X", "xy", "l", "t", "ix", "xs", "ax", "xx", "r", "v", "xt", "wx", "zx", "ex", "width", "fx", "d", "p", "rx", "xc", "ox", "time", "xi", "px", "w", "left", "xf", "xd", "tx"], "y": ["Y", "z", "yz", "ym", "ey", "yl", "yn", "ay", "my", "xy", "zy", "py", "yer", "iy", "oy", "sy", "yy", "ery", "yt", "gy", "ys", "b", "ies", "yi", "ny", "col", "ry", "ky", "uy", "ye", "cy", "vy", "iny", "yd"], "x3": ["ax9", "x93", "ox93", "ox1", "x9", "ox03", "ex1", "ix3", "x11", " x11", "ax13", "x13", "ix9", "ox13", "x15", " x15", "ox9", "x53", " x53", "ix13", " x03", "ix1", "ax3", "x03", "mx11", "ex3", "mx53", "ox3", "ex11", "ix93", "ex53", "ox15", "mx3", "ix03", "ax93", "ix15", "mx1"], "y3": ["yThree", "vyary", "y33", "ay3", "ny43", " y7", "vy33", "y7", "vy3", "xCommand", "yary", " y33", " yThree", "vyThree", "yInfo", "ny3", "yCommand", "ny7", "vy43", "vyInfo", "ayary", " yCommand", "xThree", "y43", "ay33", " y43", "nyInfo", " yary", "ay7", "vy7", "x33", " yInfo", "vyCommand"], "x4": ["px04", "dx4", "ex4", "x44", "px4", "xro", "dx44", " x44", "rx44", " x8", "rx4", "rx04", "rxro", "x04", "x8", "dx04", " xro", "ex04", "px8", "dxro", " x04", "ex8"], "y4": ["y49", "Y04", "Y4", "y44", "y04", " y04", "yy49", "gyFour", "ny4", " y49", "yy4", "gy49", "yFour", "yy44", "y84", "yy84", "gy4", " yFour", "yyFour", "gy04", "ny44", "Y44", "Y84", "yy04", "ny84", "ny04"]}}
{"code": "S = input()\\n\\ns = S[0]\\nfor i in range(1, len(S)):\\n    if s[-1] != S[i]:\\n        s += S[i]\\n\\nif len(S) == 1:\\n    print(0)\\n    exit(0)\\nelif len(S) == 2:\\n    print(1)\\n    exit(0)\\n\\nprint(len(s)-1)\\n", "target": "655", "substitutes": {"S": ["Sample", "BS", "Bytes", "String", "SI", "H", "C", "Si", "SS", "X", "F", "GES", "WS", "R", "SL", "G", "JS", "SB", "SM", "PS", "N", "M", "Abs", "A", "SEC", "RS", "CSS", "U", "IS", "E", "New", "DS", "D", "US", "NS", "SU", "SO", "L", "SP", "P", "TS", "ES", "Q", "SH", "T", "SF", "SA", "SE", "Z", "VS", "V", "I", "B", "CS", "GS", "Results", "Pres", "HS", "Set"], "s": ["ps", "stats", "sts", "str", "ws", "sv", "ls", "m", "SS", "a", "Rs", "cs", "rs", "t", "l", "gs", "xs", "JS", "ms", "ins", "ns", "A", "r", "ends", "strings", "sp", "es", "bytes", "ogs", "b", "g", "ies", "p", "ss", "ds", "TS", "sb", "its", "n", "abs", "items", "sq", "w", "ats", "us", "ts", "qs", "js"], "i": ["f", "ini", "zi", "m", "l", "y", "ti", "key", "ci", "ji", "im", "gi", "v", "ij", "ori", "index", "q", "b", "yi", "ind", "id", "di", "num", "bi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "n", "ic", "batch", "I", "li", "iter", "x", "mi", "multi"]}}
{"code": "def main():\\n    c = list(map(int, input().split()))\\n\\n    c_set = set(c)\\n    print(len(c_set))\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "32", "substitutes": {"c": ["f", "sc", "m", "C", "cr", "cs", "l", "t", "bc", "cf", "con", "i", "rc", "ca", "r", "ch", "v", "co", "city", "b", "lc", "g", "ct", "ce", "config", "cos", "cur", "p", "d", "cont", "cp", "com", "xc", "dc", "ac", "nc", "n", "cu", "u", "x", "cm"], "c_set": ["c_num", "c_case", "cdjset", " c_lower", " c_case", "cdjlower", "c_list", " c_num", " c__num", "cdjlist", "c_en", " c_list", "cdjSET", "c__set", " c_en", "c__case", "c__num", "c_lower", " c_SET", "c_SET", " c__case", " c__en", "c__en", " c__set"]}}
{"code": "N=int(input())\\na=[int(i) for i in input().split()]\\nb=[int(i) for i in input().split()]\\n\\ncan = sum(b)-sum(a)\\nactA,actB = 0,0\\nfor i in range(N):\\n    diff = b[i]-a[i]\\n    if diff==0:continue\\n    if diff>0:\\n        actA+=(diff+1)//2\\n        actB+=diff%2\\n    else:\\n        actB+=(-diff)\\nleftA = can-actA\\nleftB = can-actB\\nprint(\"Yes\" if leftA>=0 and leftA*2==leftB else \"No\")\\n", "target": "778", "substitutes": {"N": ["Num", "K", "C", "F", "Sn", "R", "Ni", "CNN", "NB", "NI", "M", "NR", "A", "CN", "Len", "NA", "S", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "T", "GN", "J", "n", "V", "I", "B", "Ns", "NC", "NN", "NH"], "a": ["ba", "apa", "ap", "ae", "att", "t", "au", "s", "A", "ca", "r", "at", "la", "input", "pa", "c", "ea", "an", "era", "g", "p", "ao", "app", "act", "oa", "sa", "ai", "aa", "al", "n", "ac", "o", "ma", "w", "u", "ia", "ab", "eas", "ar", "am"], "i": ["ei", "ini", "ri", "zi", "\u00ed", "uri", "m", "cli", "l", "y", "t", "ix", "iy", "ti", "ip", "ci", "ji", "il", "ati", "v", "gi", "adi", "ij", "c", "index", "oi", "ki", "phi", "yi", "sim", "ind", "id", "di", "ik", "d", "p", "bi", "vi", "j", "pi", "fi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "n", "I", "li", "u", "uli", "x", "ui", "mi", "iu", "im"], "b": ["f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "cb", "fb", "bh", "v", "db", "c", "g", "bas", "wb", "nb", "d", "p", "bi", "br", "sb", "gb", "bis", "n", "ob", "bs", "u", "B", "ab", "bb", "eb"], "can": ["cas", "out", "win", "sum", "annot", "gate", "m", "pan", "fan", "to", "con", "ca", "r", "cover", "un", "co", "ul", "na", "c", "cal", "ain", "g", "unc", "Can", "go", "cap", "CAN", "p", "man", "func", "null", "act", "ai", "cache", "n", "able", "ac", "no", "um", " Can", "an", "scan", "ban"], "actA": ["ActB", "actionA", "ActAn", "actS", "ctA", "acA", "actZ", "ctAn", "actAA", "acS", "actG", " actAT", "actAT", "actAx", "acCA", "actionCA", "actionS", " actS", " actG", "actorAT", "activeAA", "activeB", "actionAx", "actCA", "actionZ", "ctAA", "ActA", " actZ", "ActAA", "actionAT", "activeA", "acZ", "ctB", " actCA", " actAx", "actionG", "actorG", "activeAn", "actorA", "actAn", "actorAx"], "actB": ["authT", "ActB", " actDB", "actL", "authB", "actionA", "actionT", "actZ", " ActBF", "authL", " actBB", "ActBs", "actY", "actT", "actBF", " ActL", "impactT", " actBC", "actionBB", "actBB", " actT", "actionB", "ACTA", "authDB", "impactB", "actionDB", "actionZ", "actDB", " actBs", " actZ", "ActA", "impactBB", "authBF", "actBC", " ActB", "impactA", "ACTY", "ACTB", "authBC", "authZ", "actBs", "ActY", " actBF", " ActBC", " actL", "ACTBs", " actY"], "diff": ["sup", "sub", "add", "different", "deb", "desc", "cond", "df", "draw", "dev", "delete", "result", "info", "dd", "dist", "dim", "err", "div", "history", "Diff", "detail", "exc", "dx", "missing", "extra", " difference", "dirty", "iff", "distance", "dis", "double", "position", "duration", "slice", "remote", "test", "default", "d", "change", "comp", "dl", "changed", "dep", "deg", "minute", "cmp", "mix", "equal", "relative", "time", "error", "dust", "conf", "loc", "delay", "erence", "part", "update", "patch", "Delta", "shift"], "leftA": ["LeftCA", "halfAn", "LeftB", "ctCA", "halfS", " leftAL", "ltAA", "halfAL", "ctA", " leftAI", "lengthAA", "leftAA", "leftCA", "LeftA", "halfA", "ltCA", "ctAI", " leftAA", "LeftS", "leftS", "leftAn", "leftAI", "LeftAA", " leftS", "ctAA", "lengthB", " leftAn", "lengthCA", "leftAL", "ltAI", " leftCA", "ltA", "lengthA", "LeftAn", "LeftAL"], "leftB": ["actTwo", " leftJ", " leftb", " leftY", "halfA", "leftJ", "actb", "rightB", "leftb", "rightTwo", "leftTwo", "rightJ", "halfB", "rightY", "halfJ", "leftY", "rightb", " leftTwo", "halfY", "rightA"]}}
{"code": "N,K,C= map(int, input().split())\\nS=input()\\nA=[]\\nfor i in range(N):\\n  if S[i]=='o':\\n    A.append(i)\\nM=[]\\nd=0\\ncnt=0\\nfor i in A:\\n  if d<=i:\\n    M.append(i)\\n    d=i+C+1\\n    cnt+=1\\n  if cnt==K+1:\\n    print()\\n    exit()\\n    \\nU=[]\\nd=N-1\\ncnt=0\\nfor i in A[::-1]:\\n  if i<=d:\\n    U.append(i)\\n    d=i-C-1\\n    cnt+=1\\n  if cnt==K+1:\\n    print()\\n    exit()\\nD=set(M)&set(U)\\nD=sorted(D)\\nfor i in D:\\n  print(i+1)", "target": "647", "substitutes": {"N": ["Y", "H", "X", "F", "R", "Ni", "CNN", "NB", "NI", "NR", "NA", "E", "ND", "O", "Ne", "NT", "SN", "NS", "L", "TN", "P", "Q", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NN"], "K": ["Y", "HK", "KA", "KN", "KY", "FK", "PK", "H", "X", "F", "KK", "R", "SK", "G", "W", "Han", "k", "KR", "MC", "KI", "Mask", "KS", "Ko", "KING", "UK", "P", "Q", "KE", "T", "J", "Z", "V", "I", "KC", "Kind", "Power", "MK", "Sch"], "C": ["CF", "H", "Ch", "F", "R", "G", "W", "CR", "Cs", "CM", "CN", "CI", "c", "CV", "E", "O", "CL", "CT", "L", "TN", "CC", "P", "T", "Co", "J", "CCC", "V", "I", "B", "CS", "CB", "JC", "CP"], "S": ["Y", "BS", "SI", "Sl", "Si", "X", "SS", "F", "R", "SB", "s", "E", "O", "DS", "US", "NS", "SN", "SU", "Is", "L", "P", "Q", "SH", "T", "AS", "SE", "Z", "V", "I", "B", "CS", "SC", "SA", "Set", "Sel"], "A": ["AR", "AA", "ALL", "H", "AC", "AN", "a", "Al", "R", "G", "AV", "CA", "LA", "AL", "Av", "NA", "O", "As", "All", "AT", "Array", "AF", "L", "GA", "An", "At", "P", "MA", "AD", "AM", "This", "You", "AS", "T", "AE", "AP", "AB", "I", "B", "Alpha", "ACT", "SA"], "i": ["ini", "ei", "ri", "ci", "ji", "v", "adi", "hi", "di", "Xi", "ai", "bis", "xi", "iri", "li", "ia", "iter", "x", "iti", "iu", "f", "zi", "m", "cli", "ir", "t", "aci", "ti", "info", "ati", "index", "ki", "phi", "ind", "bi", "qi", "n", "o", "im", "uri", " bi", "iii", "l", "ix", "k", "ij", "c", "oi", "b", "ie", "ik", "p", "j", "fi", "ii", "ic", " di", "ski", "a", "iy", "ip", "gi", "ori", "ami", "yi", "id", " ii", " ti", "pi", "it", "int", "si", "I", "u", "mi", "eri"], "M": ["Mat", "MO", "AR", "m", "MP", "H", "X", "F", "R", "G", "MT", "LM", "CM", "Mon", "MC", "Met", "MM", "Ms", "E", "O", "MB", "L", "TM", "P", "MA", "IM", "AM", "Map", "MS", "DM", "T", "ME", "RM", "V", "I", "B", "MD", "Man"], "d": ["z", "f", "ld", "m", "a", "ord", "l", "y", "t", "debug", "did", "dd", "step", "r", "dt", "div", "db", "v", "dx", "sd", "c", "h", "b", "g", "ind", "id", "di", "pd", "de", "do", "p", "da", "dl", "j", "ds", "end", "e", "dy", "dc", "dh", "n", "delay", "o", "u", "w", "set", "dra", "dr", "x", "dat", "fd"], "cnt": ["cst", "cunt", "cvc", "connt", "Cpt", " cvc", "Cct", "Cnt", "arcnt", "lcnt", "tcpt", "catt", "ancnt", "arcatt", "acnt", "CNT", "acct", " cannot", "cNT", "cuct", "lcNT", "confnc", "cachest", "tcnt", "cinnc", "lcnc", " cqt", "capt", "cachent", "lcpt", "cucount", "cct", "cpt", "cuqt", "conatt", "acpt", "cnc", "cred", "tcNT", "cinvc", "tcnc", "cqt", "cacheqt", "cinnt", "cust", "arcred", "cudj", " cNT", " cnc", "lcdj", " cdj", " cct", "cinannot", "confannot", "conred", "confnt", "lcct", "cuapt", "Cnc", "acNT", " cpt", "ccount", " capt", "cacheapt", "ancred", "cdj", " cst", "cannot", "confvc", "lccount", "ancatt", " ccount"], "U": ["UX", "UT", "UP", "UL", "R", "UC", "Mu", "OU", "Us", "UU", "LU", "PU", "CU", "UR", "O", "US", "UK", "SU", "EU", "UF", "Un", "GU", "UM", "UI", "P", "UN", "Q", "T", "V", "I", "UD", "u", "FU", "Tu", "UE", "MU", "Lu", "UID"], "D": ["DN", "Y", "DL", "DB", "H", "X", "WD", "F", "R", "Do", "G", "W", "DD", "Ds", "DA", "E", "O", "DS", "Dir", "DH", "L", "DOM", "P", "Q", "T", "DM", "J", "V", "I", "B", "DE", "DO", "DI"]}}
{"code": "import math\\nr = float(input())\\ns = '{:.6f}'.format(r * r * math.pi)\\nl = '{:.6f}'.format(2 * r * math.pi)\\nprint(s,l)\\n", "target": "758", "substitutes": {"r": ["z", "f", "rb", "rr", "m", "cr", "sr", "a", "R", "rs", "y", "t", "nr", "i", "rc", "rl", "res", "k", "v", "c", "h", "q", "b", "term", "g", "ref", "rad", "re", "d", "p", "rx", "radius", "ro", "e", "lr", "rd", "n", "mr", "u", "w", "x", "ar", "rt"], "s": ["f", "ps", "str", "sv", "ls", "simple", "cs", "se", "rs", "gs", "su", "ins", "i", "ns", "sw", "strings", "sp", "sl", "gets", "S", "ss", "ds", "sb", "so", "si", "bs", "sq", "ats", "set", "sh", "ts", "qs", "sol", "js", "st"], "l": ["f", "fl", "ls", "yl", "el", "le", "jl", "lin", "lis", "kl", "i", "len", "il", "lb", "la", "sl", "lu", "lt", "ln", "lc", "lo", "ml", "dl", "L", "lp", "pl", "hl", "lr", "li", "dL", "nl", "list", "rl", "ll", "ly"]}}
{"code": "n=int(input())\\nl=[]\\nfor i in range(n):\\n    a,b=map(int,input().split())\\n    l.append((a+b,a,b))\\nl.sort(reverse=True)\\nk=0\\nx=0\\ny=0\\nwhile k<n:\\n    if k%2==0:\\n        x+=l[k][1]\\n    else:\\n        y+=l[k][2]\\n    k+=1\\nprint(x-y)", "target": "794", "substitutes": {"n": ["nn", "nia", "m", "nt", "t", "number", "nr", "N", "len", "ns", "mn", "r", "na", "c", "ng", "sn", "q", "nd", "ln", "h", "g", "an", "nu", "nb", "num", "d", "size", "p", "j", "ne", "total", "gn", "np", "nan", "nc", "w", "no", "nl"], "l": ["fl", "ol", "lines", "ld", "ls", "el", "line", "m", "lv", "t", "lis", "kl", "r", "sol", "lb", "v", "la", "sl", "lt", "long", "ln", "like", "lc", "lo", "lam", "ml", "dl", "p", "L", "j", "lp", "pl", "hl", "lr", "List", "al", "log", "li", "left", "nl", "list", "rl", "lists", "ll"], "i": ["f", "iq", "ite", "ix", "r", " j", "ij", "c", "q", "ind", "id", " ii", "p", "j", "it", "I", "iter", "im"], "a": ["ba", "apa", "el", "am", "ae", "sta", "ga", "au", "ax", "ca", "A", "la", "at", "pa", "ea", "va", "da", "alpha", "oa", "aka", "sa", "aa", "aj", "al", "art", "ac", "ma", " A", "ia", "ab", "aaa", "ar", "an"], "b": ["z", "f", "rb", "ba", "ib", "bl", "another", "be", "t", "bc", "bg", "cb", "fb", "r", "db", "v", "c", "bas", "g", "nb", "d", "bi", "br", "j", "bin", "sb", "bo", "bis", "ob", "ub", "bs", "B", "ab", "bb", "base", "eb"], "k": ["f", "max", "K", "m", "kind", "kr", "uk", "kh", "ka", "t", "ck", "kl", "ikk", "key", "kk", "ok", "ke", "kid", "kan", "kick", "mk", "index", "q", "g", "ak", "unk", "kn", "id", "wk", "ijk", "ik", "num", "go", "p", "km", "j", "kj", "ek", "kw", "tk", "keys", "ac", "w", "sk", "ko", "ku", "ks", "yk"], "x": ["z", "yx", "xp", "X", "xy", "t", "ix", "xs", "xa", "xx", "ax", "r", "at", "v", "xml", "xt", "dx", "wx", "c", "g", "ex", "fx", "d", "p", "rx", "xc", "e", "ox", "xe", "int", "xi", "o", "w", "px", "xd", "tx"], "y": ["Y", "z", "ym", "ey", "yo", "yl", "yn", "ay", "m", "my", "xy", "py", "t", "yer", "iy", "s", "oy", "yy", "r", "ery", "ch", "yt", "v", "c", "gy", "ot", "phi", "ies", "yi", "ny", "d", "fy", "p", "j", "ya", "ye", "axy", "yr", "o", "vy", "u", "cy", "sky", "ly"]}}
{"code": "# coding: utf-8\\n\\nN = int(input())\\n\\ncount = 0\\nfor i in range(1, N+1, 2):\\n    i_yakusu = 0\\n    for j in range(1, i+1):\\n        if i % j == 0:\\n            i_yakusu += 1\\n    if i_yakusu == 8:\\n        count += 1\\n\\nprint(count)", "target": "288", "substitutes": {}}
{"code": "n,m,l=map(int,input().split())\\na=[list(map(int,input().split())) for i in range(n)]\\nb=[list(map(int,input().split())) for j in range(m)]\\nc=[[0]*l for r in range(n)]\\nfor i in range(n):\\n    for j in range(l):\\n        for r in range(m):\\n            c[i][j]+=a[i][r]*b[r][j]\\n    print(' '.join(map(str,c[i])))\\n", "target": "684", "substitutes": {"n": ["y", "t", "nt", "s", "N", "ns", "mn", "en", "un", "v", "na", "h", "sn", "an", "g", "nu", "nb", "num", "d", "p", "pi", "ne", "e", "net", "nan", "nc", "o", "u", "x", "on", "ll"], "m": ["z", "gm", "mc", "le", "y", "t", "s", "ms", "M", "mn", "k", "v", "mut", "h", "g", "ml", "d", "p", "mt", "e", "al", "o", "mr", "u", "ma", "mm", "x", "mi", "cm"], "l": ["f", "ls", "le", "y", "t", "kl", "s", "len", "v", "length", "sl", "ln", "h", "lc", "g", "ml", "d", "p", "dl", "L", "lp", "pi", "mt", "al", "o", "li", "u", "nl", "list", "ll", "ly"], "a": ["ba", "apa", "array", "ap", "ae", "att", "another", "ga", "au", "s", "A", "at", "la", "ea", "era", "area", "ans", "alpha", "ao", "app", "act", "e", "ahead", "sa", "ai", "aq", "aa", "ac", "abs", "ma", "ab", "eas", "aaa", "ar", "ach", "an"], "i": ["io", "ini", "ri", "zi", "ir", "y", "t", "ti", "s", "ip", "ci", "key", "k", "gi", "v", "ij", "h", "id", "di", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "o", "ic", "li", "iri", "I", "u", "x", "iti", "mi", "ar", "im", "iu"], "b": ["z", "f", "rb", "ba", "ib", "ubb", "mb", "blue", "be", "y", "t", "bc", "cb", "fb", "db", "v", "h", "g", "wb", "nb", "emb", "d", "bi", "zb", "bf", "sb", "gb", "bo", "bis", "ob", "ub", "bs", "u", "o", "B", "ab", "bb", "eb"], "j": ["z", "f", "jl", "ir", "bl", "ja", "y", "t", "fr", "jp", "ji", "k", "v", "ij", "h", "ot", "q", "g", "d", "p", "br", "oj", "kj", "e", "it", "jj", "aj", "J", "o", "uj", "li", "u", "dj", "x", "bj", "jc"], "c": ["f", "sc", "C", "cr", "cs", "cf", "con", "ci", "ca", "ch", "co", "cm", "lc", "gc", "cn", "ct", "cc", "ce", "d", "cos", "cur", "p", "cp", "com", "xc", "e", "cd", "const", "dc", "conf", "fc", "ac", "tc", "cu", "u", "cv"], "r": ["z", "f", "rb", "ri", "pr", "rr", "range", "sr", "cr", "ir", "R", "rs", "t", "y", "s", "fr", "k", "v", "h", "q", "g", "re", "er", "d", "p", "e", "ry", "ai", "it", "rd", "o", "mr", "w", "u", "dr", "x", "ar", "im", "rt"]}}
{"code": "a,b = map(int,input().split())\\nc = 0\\nfor i in range(2):\\n    if a > b:\\n        c += a\\n        a -= 1\\n    elif a < b:\\n        c += b\\n        b -= 1\\n    else:\\n        c += b\\n        b -= 1\\nprint(c)", "target": "233", "substitutes": {"a": ["f", "ba", "ack", "apa", "ap", "am", "ae", "ta", "ade", "l", "acc", "t", "au", "s", "ax", "A", "ca", "r", "at", "la", "ea", "g", "ak", "ct", "area", "d", "p", "alpha", "ao", "j", "app", "act", "e", "sa", "ai", "ata", "aa", "up", "al", "ac", "aj", "ad", "ma", "w", "u", "ia", "ab", "eas", "x", "ar", "ach", "an", "aff"], "b": ["z", "f", "rb", "ba", "ib", "mb", "be", "l", "y", "t", "bc", "s", "cb", "fb", "r", "bh", "k", "ch", "db", "v", "h", "q", "bas", "g", "wb", "nb", "d", "p", "bt", "bi", "br", "j", "bf", "e", "sb", "bis", "n", "ob", "bs", "u", "w", "B", "ab", "x", "bb", "body"], "c": ["f", "abc", "sc", "conv", "mc", "m", "C", "cat", "cr", "anc", "cs", "t", "final", "ci", "cb", "rc", "ca", "err", "co", "cm", "arc", "lc", "gc", "ct", "unc", "ce", "d", "cos", "cur", "col", "cp", "ec", "com", "total", "xc", "cd", "dc", "uc", "fc", "conf", "ac", "cache", "nc", "cum", "u", "cu", "tc", "cv", "count"], "i": ["f", "y", "t", "ix", "s", "r", "k", " j", "q", "ind", "id", " ii", "p", "j", "e", "it", "ii", "n", "I", "x", "im"]}}
{"code": "from collections import deque\\n\\ndq=deque()\\nn=int(input())\\n\\nfor i in range(n):\\n\tcom=input().split()\\n\tif com[0]=='insert':\\n\t\tdq.appendleft(com[1])\\n\telif com[0]=='deleteFirst':\\n\t\tdq.popleft()\\n\telif com[0]=='deleteLast':\\n\t\tdq.pop()\\n\telse:\\n\t\tif com[1] in dq:\\n\t\t\tdq.remove(com[1])\\nprint(' '.join(dq))", "target": "232", "substitutes": {"dq": ["df", "dt", "query", "think", "wx", "q", "cmd", "dm", "eq", "du", "dl", "der", "quad", "buf", "ry", " q", "delay", "list", " df", "ws", "ld", "qus", "iq", " weave", "grid", "yout", "xy", "pkg", "ue", "idd", "maybe", "queue", "ds", "htm", "Q", "aq", "batch", "dj", "daq", "quit", "dr", " dh", "req", "xd", "qt", "quer", "qa", "que", " dock", "docker", "gob", "nil", "dogs", "dp", "qq", "qs", "ques", "out", "zip", "aim", "hold", " dd", "dict", " dj", "dd", "dim", "jp", "db", "dx", "wy", "aux", "d", "pd", "rpm", "sq", "pause"], "n": ["nn", "nw", "nia", "m", "ni", "l", "nt", "t", "nr", "N", "len", "ns", "mn", "nm", "k", "r", "v", "na", "c", "ln", "sn", "q", "nd", "cn", "nu", "nb", "num", "nv", "p", "j", "ne", "nor", "np", "nan", "nc", "nl", "norm"], "i": ["z", "f", "l", "y", "ix", "ti", "s", "r", "k", "gi", "c", "q", "b", "ind", "p", "j", "e", "it", "I", "li", "u", "x", "um"], "com": ["ocom", "bon", "stat", "when", "cr", "rom", "tim", "pan", "cons", "common", "spe", "con", "ca", "err", "gr", "tom", "comb", "lim", "cal", "co", "gre", "prof", "c", "pal", "term", "see", "tem", "cl", "cmd", "ce", "mem", "comp", "crit", "cap", "go", "cho", "char", "sem", "Com", "chrom", "cle", "pl", "om", "cre", "jo", "consider", "dom", "lem", "conf", "lex", "hem", "loc", "cum", "rem", "cu", "cor", "sche", "war", "COM", "um", "cm", "ser", "comm", "car", "pro"]}}
{"code": "ans = []\\ns = input()\\nfor i in range(26):ans.append(0)\\nfor i in s:\\n  ans[ord(i)-97] = 1\\nfor i in range(26):\\n  if(ans[i]==0):print(chr(97+i));exit()\\nprint(\"None\")", "target": "767", "substitutes": {"ans": ["ens", "sts", "anon", "ls", "nets", "ones", "oss", "pan", "rs", "amps", "gs", "ines", "os", "ins", "ars", "aus", "ons", "ns", "ms", "ann", "anas", "aos", "arts", "ents", "ians", "ums", "angs", "rans", "aves", "ands", "eds", "ANS", "lets", "nas", "uns", "offs", "anes", "ams", "ads", "ras", "ates", "ats", "us", "vals", "anks", "an", "ks", "ants"], "s": ["ps", "ens", "sys", "ws", "ls", "has", "fs", "sis", "cs", "rs", "gs", "xs", "ins", "os", "ms", "ns", "ons", "sw", "acs", "es", "gins", "pers", "eds", "ubs", "S", "ches", "p", "ss", "ds", "its", "ims", "ses", "abs", "ates", "ats", "tes", "ts", "js"], "i": ["f", "ei", "ini", "ri", "zi", "\u00ed", "m", "iii", "l", "y", "t", "iy", "ti", "ip", "ci", "\u0438", "il", "ji", "ati", "gi", "v", "ij", "hi", "oi", "index", "ki", "phi", "yi", "ie", "ind", "id", "asi", "di", "ik", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "o", "li", "I", "ia", "u", "n", "x", "iti", "mi", "iu", "im", "ui"], "ord": ["org", "Ord", "chain", "order", "ip", "ji", "ch", "ln", "ORD", "code", "ie", "ind", "id", "num", "char", "dir", "deg", "bin", "addr", "ai", "cd", "align", "gb", "coord", "rank", "uni", "rt", "shift"]}}
{"code": "M, K = map(int, input().split())\\n\\nif K >= 2 ** M:\\n    print(-1)\\nelif K == 0:\\n    ans = []\\n    x = range(0, 2 ** M)\\n    y = range(0, 2 ** M)\\n    for xx, yy in zip(x, y):\\n        ans.append(xx)\\n        ans.append(yy)\\n    print(*ans)\\nelse:\\n    if M == 1 and K == 1:\\n        print(-1)\\n        exit()\\n    t = 0\\n    for i in range(1, 2 ** M):\\n        if i == K: continue\\n        t ^= i\\n    if t == K:\\n        x = [i for i in range(0, 2 ** M) if i != K]\\n        ans = [K] + x + [K] + list(reversed(x))\\n        print(*ans)\\n    else:\\n        print(-1)\\n", "target": "97", "substitutes": {"M": ["Y", "H", "C", "m", "MP", "X", "MAC", "F", "MX", "R", "PM", "G", "W", "MT", "MR", "LM", "CM", "N", "MI", "MN", "MC", "MAT", "MF", "MM", "Ms", "S", "E", "MH", "D", "L", "NM", "TM", "OM", "P", "Q", "MA", "AM", "GM", "MS", "MODE", "T", "MAN", "DM", "J", "Ma", "Z", "V", "RM", "I", "B", "Man"], "K": ["Y", "KA", "KN", "KY", "FK", "PK", "H", "C", "X", "F", "KK", "R", "SK", "G", "W", "Han", "N", "A", "k", "KB", "KR", "MC", "IK", "KI", "Mask", "KS", "U", "TH", "S", "OK", "E", "O", "VK", "NK", "D", "KING", "UK", "L", "P", "Q", "KE", "T", "J", "Z", "Ke", "V", "I", "B", "KC", "Kind", "KER", "WH", "MK"], "ans": ["ens", "lines", "ls", "xes", "mas", "vers", "ones", "idents", "amps", "xs", "s", "ins", "anas", "ars", "aus", "ns", "outs", "ms", "ann", "ons", "aces", "arts", "aos", "ents", "es", "ians", "ums", "ys", "rans", "ands", "ays", "posts", "ies", "works", "ANS", "leans", "uns", "offs", "anes", "ams", "ads", "ates", "ats", "us", "aints", "ts", "anks", "an", "ks", "ants"], "x": ["z", "xes", "yx", "m", "xp", "X", "yout", "ux", "xy", "pan", "l", "ix", "xs", "s", "xa", "ax", "r", "v", "xt", "dx", "wx", "q", "mx", "ex", "fx", "works", "p", "rx", "xxx", "xc", "ox", "xe", "xi", "n", "lex", "px", "w", "list", "an", "xd", "tx"], "y": ["Y", "z", "yo", "ey", "yl", "ym", "yn", "m", "xy", "py", "sy", "yt", "v", "ys", "gy", "b", "g", "ies", "yi", "ny", "p", "j", "ry", "ya", "uy", "ye", "axy", "n", "yr", "vy", "hy"], "xx": ["yz", "yx", "yn", "vv", "ux", "xy", "ck", "ix", "xs", "ax", "zzy", "xt", "dx", "wx", "ys", "zx", "fx", "ny", "ik", "fy", "xxx", "xc", "ox", "xxxx", "xi", "XX", "vy", "px", "zz", "xd", "inx"], "yy": ["nn", "ym", "ey", "yl", "icy", "yx", "yn", "ay", "xy", "zy", "py", "sy", "oy", "zzy", "xxxxxxxx", "yt", "gy", "ys", "wy", "ny", "fy", "tz", "xxx", "YY", "xxxx", "ky", "dy", "uy", "txt", "yr", "cy", "vy", "zz", "dj", "aaa", "arty", "zx"], "t": ["type", "f", "z", "det", "out", "m", "ta", "a", "l", "tt", "ti", "s", "r", "k", "tp", "ty", "at", "v", " T", "tar", "c", "ot", "b", "g", "ct", "test", "iat", "te", "p", "j", "mt", "trans", "total", "e", "it", "wt", "T", "time", "tc", "n", "o", "w", "ts", "an"], "i": ["z", "f", "io", "ini", "ei", "ri", "zi", "\u00ed", "m", "a", "ni", "l", "ti", "ip", "ci", "\u0438", "k", "ji", "ati", "gi", "v", "Ti", "ij", "c", "hi", "ori", "oi", "ki", "phi", "yi", "ind", "asi", "di", "ik", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "iri", "iti", "mi", "iu", "ski"]}}
{"code": "N = int(input())\\nd = list(map(int,input().split()))\\nd.sort()\\ndmed1 = N//2 - 1\\ndmed2 = N//2\\nans = d[dmed2]-d[dmed1]\\nprint(ans)", "target": "415", "substitutes": {"N": ["Num", "K", "NE", "H", "C", "X", "F", "Sn", "Ni", "CNN", "NB", "NI", "M", "NR", "MN", "SIZE", "NA", "Size", "S", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NH"], "d": ["z", "f", "done", "ld", "des", "m", "a", "df", "l", "t", "debug", "dos", "dict", "did", "dd", "i", "days", "r", "dt", "db", "sd", "dx", "c", "b", "g", "ind", "D", "dm", "di", "pd", "de", "dl", "do", "da", "p", "daily", "j", "ds", "pl", "e", "dates", "n", "ad", "o", "w", "data", "md", "new", "dat"], "dmed1": [" did3", "dged2", "dged1", "DMed01", "dmed01", " did1", "Dmed001", "dmid2", " did2", "dMed01", "Dmed01", "dged001", "Dmed1", "DMed1", "dmid1", "Dmed2", "dmid001", "dged01", "dmed3", "dMed1", "dmed001", "did1", "dmid01", "did2", " dmed3", "DMed001", "dMed2", "dMed001", "did3", "dmid3", "DMed2", "dMed3"], "dmed2": ["dmag4", "dmindo", "dmindtwo", " dMED2", "dMED2", "dpid02", "dmid2", " dmedtwo", "dpid2", " dmed02", " dMEDo", "dmag256", "dmedg", " dmag2", "dmodo", " dmedo", "dmid4", "dMEDtwo", "dMEDg", " dMEDg", "dmedtwo", " dmag4", "dmodg", "dmag2", "dmed256", "dmed02", "dmid02", "dmodtwo", "dmod2", "dmind2", "dpid4", " dmag02", " dmedg", "dmid256", "dmag02", " dMEDtwo", "dpid256", " dmag256", "dmindg", "dmedo", "dmed4", "dMEDo", " dmed256", " dmed4"], "ans": ["ens", "stats", "rors", "des", "mas", "aned", "ades", "idents", "cons", "amps", "iann", "ars", "anas", "ms", "aus", "ons", "ns", "ins", "ann", " Ans", "aps", "beans", "arts", "angs", "arms", "rans", "ys", "eds", "ANS", "ds", "uns", "nas", "anes", "nan", "ads", "ats", "ados", "ros", "vals", "ions", "an", "ks", "ants", "olds"]}}
{"code": "a, b = map(int, input().split())\\nans = \"Possible\" if a*b*(a+b) % 3 == 0 else \"Impossible\"\\nprint(ans)", "target": "635", "substitutes": {"a": ["f", "ba", "m", "am", "ae", "\u00e1", "l", "t", "sta", "af", "au", "s", "i", "ax", "A", "at", "la", "c", "g", "d", "p", "alpha", "da", "ao", "act", "e", "sa", "aa", "al", "ac", "ma", " A", "u", "ia", "ab", "eas", "x", "ar", "an", "aff"], "b": ["z", "f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "t", "bc", "s", "i", "cb", "fb", "db", "v", "c", "h", "g", "wb", "nb", "d", "p", "bt", "bi", "bin", "e", "sb", "bu", "gb", "bis", "n", "bs", "B", "ab", "bb", "eb"], "ans": ["ens", "ps", "ars", "ls", "des", "names", "mas", "aned", "vers", "cs", "rs", "pan", "amps", "ins", "anas", "os", "aus", "ns", "mn", "ms", "ann", "ons", "cks", "oman", "aos", "angs", "rans", "said", " means", "san", "vs", "ANS", "leans", "anes", "ams", "ats", "anks", "an", "ks", "lan"]}}
{"code": "N, M = map(int, input().split())\\nS = list(map(int, input().split()))\\nT = list(map(int, input().split()))\\ndp = [1] * (M+1)\\ndpleft = [0] * (M)\\nMOD = 10 ** 9 + 7\\nndp = [1] * (M+1)\\nfor n in range(N):\\n    for m in range(M):\\n        if S[n] == T[m]:\\n            ndp[m+1] = ndp[m] + dp[m+1]\\n            dpleft[m] = dp[m+1]\\n        else:\\n            ndp[m+1] = ndp[m] + dpleft[m]\\n    dp = ndp[:]\\nprint(dp[-1] % MOD)", "target": "505", "substitutes": {"N": ["Y", "H", "C", "NF", "X", "F", "R", "Ni", "CNN", "NB", "NI", "NR", "MN", "NA", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "V", "I", "Ns", "NC", "NN", "NH"], "M": ["Y", "K", "H", "MP", "C", "MX", "F", "R", "G", "MT", "SM", "MR", "LM", "CM", "MI", "MN", "MC", "MAT", "MF", "U", "MM", "E", "O", "D", "L", "NM", "JM", "TM", "P", "MS", "MAN", "DM", "J", "MODE", "V", "RM", "I", "B", "MD", "MU"], "S": ["SER", "SI", "H", "C", "Si", "X", "SS", "Sn", "R", "SL", "Spe", "SK", "SB", "SM", "s", "A", "Sing", "U", "ST", "SR", "D", "SN", "NS", "SU", "SO", "L", "SP", "P", "TS", "SA", "SF", "V", "I", "B"], "T": ["Y", "H", "C", "X", "F", "R", "t", "WT", "MT", "LT", "TA", "U", "TH", "D", "TG", "L", "TB", "TP", "TN", "TM", "TS", "P", "TI", "J", "V", "BT", "I", "B", "VT", "Tu", "TT", "It", "XT"], "dp": ["ps", "deb", "df", "pkg", "bp", "wd", "gp", "pb", "dro", "pp", "pas", "dd", "jp", "tp", "dt", "db", "sp", "dx", "vp", "pa", "dq", "fp", "isp", "dm", "pd", "d", "dl", "p", "dep", "dB", "ds", "lp", "cp", "td", "cd", "dc", "np", "DP", "dh", "bps", "delay", "px", "dj", "yp", "wp", "dr"], "dpleft": ["Doplewt", " dlext", "dprft", " dopleft", "dsleft", "dplext", "dileaft", "Dopleaft", "dopleft", "dslegt", " dplegt", " dlewt", "dslewt", "Dplext", "dleft", "dprxt", "dlewt", " dleft", "dlext", "dileft", "dsleaft", " dplext", "Dpleaft", "dslext", "dpleaft", "Doplext", "doplewt", "doplext", "dplewt", " dplewt", "dopleaft", "Dplewt", " doplewt", "Dpleft", "Dopleft", " doplext", "dplegt", "doplegt", "dprwt", "dprgt", "dilewt", " dlegt", " doplegt", "dlegt", "dilext"], "MOD": ["RR", "LOG", "ADD", "ED", "NOW", "MT", "DD", "OW", "ERROR", "MAX", "LAB", "SIZE", "FORM", "POST", "VER", "OD", "mod", "ND", "SPEC", "PUT", "LB", "TM", "OOL", "TD", "Mod", "AD", "RED", "REG", "OR", "JUST", "MODE", "MAN", "MS", "LOD", "UN", "KEY", "RM", "LOC", "NUM", "COM", "LD", "VERSION", "MW", "AST", "mods", "MD", "Mods"], "ndp": ["ntpp", "gnnp", "gnpp", "ndd", "ntp", "ddp", "dnj", "ntn", "cdm", "ntcp", "ldP", "cdn", "ndn", "gnp", "tdlp", "ntc", "ntlp", "indcp", "ddnp", "dd", "ldp", "randn", "indnp", "NDnp", "ndcp", "ndm", "randp", "cdp", "dnp", "ntd", "ldn", "indm", "ntnp", "ndP", "tdpp", "NDm", "NDj", "ddc", "NDn", "ldc", "dcp", "ndc", "dn", "cdj", "randP", "ndlp", "gnlp", "indd", "ddm", "tdp", "dnm", "ddd", "NDp", "ndj", "ndpp", "ddn", "indn", "randd", "ddP", "ndnp", "indp", "ldd", "dnn", "tdnp"], "n": ["f", "nn", "l", "nt", "t", "i", "ns", "mn", "nm", "r", "en", "un", "v", "na", "c", "sn", "q", "nd", "b", "g", "h", "cm", "cn", "nb", "d", "p", "dn", "j", "pi", "ne", "np", "nan", "nc", "o", "nl", "x"], "m": ["f", "gm", "ym", "mc", "tm", "esm", "l", "all", "sm", "t", "name", "y", "month", "ms", "i", "module", "mn", "nm", "k", "r", "v", "perm", "em", "c", "bm", "pm", "an", "h", "b", "g", "mx", "mod", "ind", "dm", "d", "p", "man", "km", "j", "mt", "om", "mo", "lem", "batch", "fm", "mr", "o", "mac", "mm", "me", "x", "um", "mi", "im", "cm", "md"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nX, Y = map(int, input().split())\\n    \\nif X % Y == 0:\\n    print(-1)\\n    exit()\\n\\nprint(X)", "target": "396", "substitutes": {"input": ["active", "str", "out", "edit", " Input", "sample", "raw", "request", "output", "buffer", "check", "hello", "enter", "dq", "q", "insert", "Input", "string", "select", "paste", "password", "cmd", "re", "source", "read", "next", "command", "get", "int", "inner", "got", "txt", "focus", "feed", "sequence", "print", "exec", "data", "view", "text"], "X": ["TY", "UX", "K", "C", "MX", "R", "W", "XY", "ML", "N", "M", "FX", "A", "MAX", "AX", "OX", "U", "ID", "XXX", "S", "DX", "E", "EX", "D", "L", "P", "INT", "Q", "XM", "T", "XP", "XX", "Z", "V", "I", "IX", "x", "TX", "XT"], "Y": ["SY", "TY", "C", "F", "R", "y", "G", "XY", "N", "M", "YN", "MI", "GB", "S", "E", "Py", "D", "IO", "L", "YS", "Year", "P", "My", "Q", "BY", "T", "J", "Z", "YC", "V", "I", "B", "IE", "NY", "YY", "MY"]}}
{"code": "while True:\\n    s = raw_input()\\n    if(s == \"-\"):\\n        break\\n    m = input()\\n    for i in range(m):\\n        h = input()\\n        temp = \"\"\\n        for j in range(h, len(s)):\\n            temp += s[j]\\n        for j in range(h):\\n            temp += s[j]\\n        s = temp\\n    print(s)", "target": "715", "substitutes": {"s": ["z", "ps", "stats", "sts", "comments", "sv", "ls", "ws", "f", "str", "a", "spec", "sql", "simple", "cs", "rs", "t", "l", "gs", "full", "ms", "ins", "os", "ns", "r", "single", "res", "strings", "sp", "v", "es", "c", "q", "b", "gets", "g", "S", "string", "source", "d", "p", "ss", "less", "ds", "args", "e", "sb", "its", "abs", "n", "bs", "sq", "w", "ats", "ts", "qs", "js"], "m": ["gm", "mc", "tm", "mas", "am", "hm", "l", "sm", "t", "ms", "M", "v", "perm", "em", "mis", "c", "bm", "b", "mx", "mod", "mp", " M", "dm", "mem", "vm", "km", "mt", "mo", "n", "mr", "ma", "mm", "um", "mi", "cm", "md"], "i": ["io", "ini", "zi", "ir", "y", "ci", "il", "gi", "v", "ij", "ie", "ind", "id", "di", "ik", "pi", "it", "ii", "si", "ma", "li", "I", "ia", "mi", "iu", "im"], "h": ["z", "f", "he", "H", "kh", "hm", "l", "ha", "bh", "r", "k", "ho", "v", "hs", "c", "hi", "q", "b", "g", "hd", "ih", "p", "oh", "ht", "hl", "n", "hr", "hh", "ah", "w", "sh"], "temp": ["ps", "emp", "fake", "out", "tmp", "pt", "sum", "tm", "tim", "dest", "t", "result", "final", "output", " Temp", "input", "v", "sp", "buffer", "length", "c", "term", "tem", "stim", "Temperature", "mp", "wr", "mem", "p", "pretty", "stem", "null", "variable", "Temp", "it", "fac", "current", "relative", "vt", "txt", "template", "tr", "tc", "n", "cum", "w", "set", "unt", "um", "ts", "prime", "hum"], "j": ["z", "f", "obj", "ion", "jl", "el", "ja", "xy", "l", "y", "t", "iz", "key", "jp", "k", "ji", "kid", "v", "ij", "c", "index", "q", "b", "je", "g", "ik", "d", "p", "oj", "jo", "kj", "it", "jj", "jump", "aj", "J", "n", "ju", "o", "uj", "dj", "li", "x", "bj", "jam", "jc"]}}
{"code": "N = int(input())\\nnums = list(map(int, input().split()))\\n\\ncnt = 0\\n\\nfor i in range(N):\\n    num = i + 1\\n    \\n    if (num % 2 == 1 and nums[i] % 2 == 1):\\n        cnt += 1\\n        \\n\\nprint(cnt)\\n", "target": "126", "substitutes": {"N": ["Num", "K", "C", "AN", "Sn", "R", "CNN", "NB", "NI", "M", "NR", "CN", "Len", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "P", "T", "GN", "n", "V", "I", "Ns", "NUM", "NO", "Wh", "NH"], "nums": ["Namps", "noms", "namps", "enoms", "nodes", " news", "nsumbers", "news", " nodes", "nsums", "Nodes", "nsamps", "enodes", "numbers", " namps", "nsews", "Nums", "Numbers", " noms", " numbers", "enums", "enumbers", "Noms", "News"], "cnt": ["cst", " cnd", "Cpt", "crount", "CNT", " cpt", "cNT", "Cct", "nNT", "Count", "Cnt", "crct", "nnd", "npt", "crnt", " cst", " count", " cNT", "nct", "crnd", "nnt", "Cst", "cnd", "cct", " cct", "nst", "nount", "count", "cpt"], "i": ["io", "zi", "iq", "m", "l", "y", "ix", "ti", "info", "ip", "ci", "ji", "gi", "v", "ij", "c", "hi", "index", "ki", "q", "yi", "ind", "id", "di", "bi", "multi", "j", "pi", "fi", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "uli", "li", "I", "iter", "x", "ui", "mi", "im"], "num": ["Num", "nom", "obj", "zi", "multipl", "mon", "tim", "node", "number", "note", "info", "nm", "phys", "ver", "msg", "cal", "na", "index", "nu", "nb", "sim", "mem", "mult", "alph", "zero", "om", "int", "bo", "np", "hom", "mark", "coord", "conf", "n", "uni", "loc", "bid", "no", "mom", "umi", "NUM", "um", "multi", "proc"]}}
{"code": "s = input()\\nprint(\"Yes\" if \"9\" in s else \"No\")", "target": "85", "substitutes": {"s": ["z", "f", "ps", "str", "sv", "ls", "des", "m", "fs", "y", "t", "gs", "i", "v", "c", "h", "b", "g", "S", "p", "ess", "ss", "sand", "e", "sf", "its", "ses", "n", "w", "sq", "tes", "ats", "ts", " S"]}}
{"code": "from math import *\\na,b,k=map(int,input().split())\\ng=gcd(a,b)\\nfor i in range(g,0,-1):\\n    if(g%i==0):\\n        k-=1\\n    if(k==0):\\n        print(i)\\n        break\\n", "target": "468", "substitutes": {"a": ["f", "ba", "ap", "ae", "au", "A", "r", "ca", "at", "la", "c", "ea", "an", "ity", "area", "va", "j", "app", "act", "ai", "sa", "aa", "up", "al", "ac", "ia", "ab", "aaa", "x", "ar", "ach", "am"], "b": ["f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "bg", "fb", "db", "v", "c", "nb", "d", "p", "bi", "j", "e", "sb", "bis", "n", "ob", "bs", "B", "ab", "bb", "eb"], "k": ["z", "dk", "max", "K", "m", "kr", "kind", "kt", "kh", "uk", "ka", "t", "ck", "kl", "ikk", "kk", "kan", "ke", "kid", "v", "kar", "c", "mk", "h", "q", "ak", "ijk", "ik", "p", "km", "j", "kj", "kw", "tk", "conf", "n", "o", "sk", "ko", "ku", "ks"], "g": ["gam", "gm", "m", "rg", "fg", "l", "G", "gs", "ug", "ga", "gp", "bg", "gr", "gi", "gre", "gu", "c", "gy", "gt", "group", "gg", "gc", "ge", "tg", "erg", "go", "j", "gd", "ig", "mg", "gn", "gb", "gh", "eg", "vg", "game", "og", "pg"], "i": ["ini", "ri", "m", "l", "t", "ix", "ti", "s", "ip", "ci", "gi", "v", "c", "hi", "oi", "index", "ki", "q", "yi", "id", "di", "ik", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "I", "li", "u", "x", "mi", "iu", "im"]}}
{"code": "#K\u306f 1 \u4ee5\u4e0a 100\u4ee5\u4e0b\u306e\u6574\u6570\\n#S\u306f\u82f1\u5c0f\u6587\u5b57\u304b\u3089\u306a\u308b\u6587\u5b57\u5217\\n#S\u306e\u9577\u3055\u306f1\u4ee5\u4e0a100\u4ee5\u4e0b\\n\\nk = int(input())\\ns =input()\\n\\nif len(s) <= k: #S\u306e\u9577\u3055\u304cK\u307e\u3067\\n    print(s)\\nelse:\\n    s = s[:k]\\n    s = s+\"... \"\\n    print(s)", "target": "797", "substitutes": {}}
{"code": "import sys\\n\\nn = int(input())\\n\\nif n == 0:\\n    print(0)\\n    sys.exit()\\n\\ncur = n\\nS = \"\"\\n\\nwhile cur != 0:\\n    if cur % 2 == 0:\\n        S = \"0\" + S\\n        cur /= -2\\n    else:\\n        S = \"1\" + S\\n        cur -= 1\\n        cur /= -2\\nprint(S)\\n", "target": "24", "substitutes": {"n": ["z", "f", "nn", "nw", "m", "a", "l", "nt", "t", "number", "name", "nr", "s", "N", "i", "ns", "r", "nm", "k", "v", "na", "c", "ln", "sn", "b", "g", "cn", "nb", "num", "d", "p", "nat", "j", "ne", "gn", "nor", "np", "nan", "nc", "o", "nl", "x", "norm"], "cur": ["scroll", "ve", "obj", "sc", "tmp", "off", "pr", "desc", "cr", "equ", "Cur", "dev", "se", "bc", "close", "row", "back", "con", "sec", "final", "rc", "ptr", "ver", "gr", "div", "ch", "db", "now", "ctrl", "co", "length", "c", "sl", "data", "gc", "g", "ct", "unc", "stable", "rev", "num", "cont", "go", "char", "ctr", "round", "buf", "fac", "const", "current", "tr", "ur", "pri", "coord", "nc", "loc", "cache", "sur", "aut", " Cur", "cor", "set", "don", "ah", "dr", "sh", "quit", "head", "ser", "car", "count", "dat", "pg"], "S": ["Sample", "Just", "Si", "SS", "X", "Now", "CSS", "U", "E", "DS", "As", "SN", "TS", "You", "Ns", "BS", "G", "OS", "M", "Sub", "US", "Sc", "STR", "SU", "P", "Q", "HTML", "Z", "Sur", "SC", "Y", "SI", "Sl", "F", "SL", "Sh", "SB", "A", "IS", "Source", "Part", "D", "L", "VS", "V", "CS", "SA", "Sign", "AR", "String", "Short", "H", "C", "Long", "Sn", "R", "JS", "s", "N", "Ser", "INS", "ST", "New", "NS", "Sy", "GO", "ES", "Str", "SH", "T", "J", "SE", "The", "B", "GS", "Set"]}}
{"code": "import math\\na,b=map(int,input().split())\\ngcd=math.gcd(a,b)\\n\\ndef prime_factorization(n):\\n  i=2\\n  prime=[]\\n  if n%i==0:\\n    n//=i\\n    prime.append(2)\\n    while n%i==0:\\n      n//=i\\n  i+=1\\n  while i*i<=n:\\n    if n%i:\\n      i+=2\\n    else:\\n      n//=i\\n      prime.append(i)\\n      while n%i==0:\\n        n//=i\\n  if n>1:\\n    prime.append(n)\\n  return prime\\n\\nprint(len(prime_factorization(gcd))+1)", "target": "590", "substitutes": {"a": ["f", "ba", "apt", "apa", "m", "am", "ae", "l", "y", "t", "ga", "A", "r", "ca", "input", "la", "c", "ea", "g", "area", "d", "p", "alpha", "ao", "oa", "e", "sa", "aa", "ac", "u", "ia", "ab", "eas", "aaa", "x", "ar", "an"], "b": ["z", "f", "rb", "ba", "m", "l", "y", "t", "s", "r", "fb", "v", "c", "h", "g", "nb", "d", "p", "bi", "e", "bis", "o", "bs", "u", "B", "ab", "x", "bb", "eb"], "gcd": ["ccd", " gtd", "mcd", "gede", "gcent", "gde", "qcc", "ggmd", "gtd", "mtd", "mbd", "cbd", "gCD", "ggcc", "gcc", "ctd", "qmd", "gccd", "gmd", "qcd", "cCD", "gcCD", "rgde", " gcent", "gcbd", "geCD", "gecd", "gebd", "ccc", "cmd", "mcent", "ccent", "qCD", "ggcd", "rgcd", "ggCD", "rgbd", "gbd", "gcde", "rgCD", " gbd"], "n": ["names", "name", "note", "un", "v", "h", "g", "yes", "num", "network", "no", "non", "x", "ll", "new", "z", "f", "nn", "m", "ni", "t", "number", "nm", "na", "long", "cn", "nu", "nb", "dn", "net", "gn", "nan", "nc", "o", "l", "nt", "nr", "fn", "r", "en", "k", "c", "p", "j", "e", "none", "nor", "w", "on", "nw", "out", "nia", "y", "s", "N", "ns", "mn", "ln", "sn", "ng", "d", "pi", "ne", "int", "np", "an"], "i": ["f", "z", "io", "ini", "ei", "ri", "zi", "m", " bi", "ni", "l", "y", "t", "ix", "iy", "ti", "s", "ip", "ci", "\u0438", "r", "v", "gi", "ij", "c", "hi", "index", "oi", "h", "q", "phi", "g", "yi", "ie", "id", " ii", "di", "ik", "d", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "I", "li", "u", "ia", "list", "x", "ui", "mi", "im", "iu", "init"], "prime": ["create", "core", "max", "pr", "ties", "places", "floor", "forth", "density", "series", "factor", "g", "tie", "tree", "pre", "power", "der", "weak", "f", "fine", "xy", "se", "t", "ite", "result", "final", "index", "profile", "random", "ate", "init", "grand", "print", "plus", "efficients", "thread", "pe", "knife", "ptr", "lock", "prof", "j", "zero", "proxy", "pri", "Prime", "primary", "ve", "out", "tmp", "here", "dict", "N", "pose", "__", "mp", "trace", "imes", "pi", "it", "np", "po"]}}
{"code": "n = int(input())\\n\\na = list(map(int, input().split()))\\na.append(0)\\na.insert(0,0)\\na_abs = []\\nfor i in range(n+1):\\n    a_abs.append(abs(a[i]-a[i+1]))\\n\\na_abs_max = sum(a_abs)\\nfor i in range(1,n+1):\\n    ans = a_abs_max - abs(a[i]-a[i+1]) - abs(a[i]-a[i-1]) + abs(a[i+1]-a[i-1])\\n    print(ans)", "target": "527", "substitutes": {"n": ["nw", "nn", "nia", "m", "l", "nt", "t", "name", "N", "len", "ns", "mn", "en", "v", "na", "c", "ln", "sn", "q", "an", "h", "yes", "nu", "cn", "nb", "num", "d", "p", "j", "network", "ne", "net", "gn", "np", "nan", "nc", "o", "no", "nl", "x", "norm"], "a": ["z", "f", "out", "obj", "apa", "m", "ae", "att", "l", "all", "t", "y", "sta", "to", "au", "ga", "ed", "xa", "result", "A", "ca", "at", "la", "v", "now", "history", "na", "c", "es", "ea", "an", "h", "b", "g", "val", "test", "aux", "area", "go", "d", "eps", "aaaa", "p", "alpha", "da", "app", "act", "zero", "oa", "e", "sa", "ai", "ata", "aa", "al", "abs", "ac", "o", "ma", "ia", "set", "ab", "eas", "aaa", "ar", "am", "data", "auto"], "a_abs": ["a64cons", " a2cons", "ac10ashes", "as64acc", "a2cons", " a_cons", "a2frac", "ac10ab", "a64abs", "a10agg", "ac_ab", "a2abs", "a64acc", "as64cons", " a2abs", "a0acc", "a_ashes", "ac10abs", "a_acc", "a2ab", "a64frac", "a11fields", "ac_ashes", "a10abs", " a2frac", "a0abs", "a0cons", "a_cons", "as_cons", "ac_abs", "a0fields", "a_agg", "a11cons", "a64ab", "as_acc", "a_fields", "a_ab", " a2ab", " a_frac", "a10ashes", "a64fields", "ac10agg", "a11abs", "ac_agg", "as64fields", "a11acc", "as_fields", " a_ab", "a10ab", "a_frac", "as64abs", "as_abs"], "i": ["f", "z", "io", "ini", "ei", "ri", "zi", "m", "cli", "uri", "l", "y", "t", "name", "ix", "iy", "this", "ti", "info", "ip", "ci", "key", "\u0438", "ji", "at", "gi", "v", "ij", "hi", "index", "ki", "q", "phi", "b", "g", "ami", "yi", "sim", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "batch", "li", "I", "ia", "me", "ui", "mi", "iu", "im", "ski", "init"], "a_abs_max": ["a_ab_max", "a_abs_sum", "a_bs_sum", "a_ab_sum", "a_abs_med", "a_abs_min", "a_ab_ax", "a_abs_ax", "a_bs_max", "a_ab_min", "a_bs_med", "a_bs_min"], "ans": ["ens", "aned", "vers", "AN", "oss", "ran", "iann", "ars", "anas", "aus", "ons", "ann", " Ans", "arts", " sans", "asks", "arms", "angs", "rans", "ands", "eds", " means", "san", "ANS", "leans", "uns", "nas", "anes", "ams", "ces", "ates", "ats", "ros", "anks", "an", "ants", "olds", "lan"]}}
{"code": "while(1):\\n    h,w = [int(i) for i in input().split()]\\n    if h == 0 and w == 0:\\n        break\\n    print(\"#\"*w)\\n    for i in range(h-2):\\n        print(\"#\"+\".\"*(w-2)+\"#\")\\n    print(\"#\"*w)\\n    print(\"\")\\n    \\n", "target": "58", "substitutes": {"h": ["ph", "uh", "he", "H", "m", "html", "kh", "rh", "hm", "l", "ha", "hei", "hz", "bh", "high", "r", "ch", "ho", "history", "hs", "hi", "zh", "hal", "hd", "ih", "height", "ht", "oh", "hw", "hl", "gh", "dh", "hr", "ah", "hh", "dr", "sh", "head", "his"], "w": ["nw", "ws", "iw", "win", "m", "wh", "l", "y", "nt", "W", "widget", "wd", "wall", "sw", "r", "v", "wa", "wx", "aw", "words", "wl", "g", "ex", "wb", "we", "wy", "wr", "wk", "d", "mem", "height", "window", "rw", "ht", "hw", "kw", "wt", "wid", "ew", "wo", "n", "wal", "wp", "x", "wi", "width"], "i": ["z", "ini", "ei", "zi", "\u00ed", "l", "y", "t", "ix", "ti", "ip", "ci", "k", "v", "gi", "gu", "ij", "hi", "oi", "ki", "phi", "q", "yi", "ind", "id", "di", "ik", "j", "pi", "fi", "qi", "ai", "int", "ii", "xi", "si", "n", "iri", "ic", "I", "li", "u", "ia", "x", "mi", "iu", "im"]}}
{"code": "N,K = map(int, input().split())\\nA = list(map(int, input().split()))\\nprint((N+K-3)//(K-1))", "target": "718", "substitutes": {"N": ["H", "C", "X", "F", "R", "Ni", "G", "NB", "M", "NV", "NR", "NP", "NA", "S", "E", "ND", "NT", "D", "SN", "NS", "L", "NM", "P", "Q", "T", "GN", "J", "Z", "n", "V", "I", "B", "Ns", "NC", "NN", "NH"], "K": ["Y", "KA", "KN", "PK", "H", "C", "X", "AC", "F", "KK", "R", "SK", "G", "W", "M", "k", "KB", "KR", "KI", "Mask", "KS", "S", "D", "UK", "L", "TN", "DK", "P", "Q", "KE", "T", "J", "Z", "V", "B", "Context"], "A": ["Y", "AA", "H", "C", "X", "a", "R", "G", "W", "M", "b", "S", "E", "D", "Array", "alpha", "L", "An", "P", "T", "J", "Z", "AB", "V", "Alpha", "B", "I"]}}
{"code": "import sys\\nfrom collections import deque\\n\\nqueue = deque()\\n\\nfor _ in range(int(sys.stdin.readline())):\\n    commands = sys.stdin.readline()[:-1].split(\" \")\\n    if commands[0] == \"insert\":\\n        queue.appendleft(commands[1])\\n    elif commands[0] == \"delete\":\\n        try:\\n            queue.remove(commands[1])\\n        except ValueError:\\n            pass\\n    elif commands[0] == \"deleteFirst\":\\n        queue.popleft()\\n    elif commands[0] == \"deleteLast\":\\n        queue.pop()\\n\\nprint(\" \".join(queue))", "target": "232", "substitutes": {"queue": ["finished", "wait", "ques", "ued", "line", "grid", "published", "zip", "order", "que", "archive", "result", "channel", "flush", "stack", "output", "ue", "buffer", "quote", "forced", "history", "lock", "journal", "empty", "index", "dq", "store", "q", "entry", "foo", "complete", "test", "force", "eq", "layer", "trace", "next", "frame", "buf", "required", "worker", "valid", "component", "Q", "Queue", "plot", "collection", "event", "priority", "enabled", "cache", "batch", "void", "table", "block", "sequence", "due", "delay", "running", "quit", "topic", "list", "space", "register", "jobs", "controller", "menu"], "_": [" ind", " len", " j", " __", " v", " p", " t", " c", " l", " the", " co", "___"], "commands": ["descants", "commodes", "cmdonents", "alients", "cmdands", "commonents", "comasks", "commanders", "broadodes", "condasks", "commanded", "payusters", "descents", "commins", "comodes", "capins", "cmdodes", "condons", "comases", "cmdons", "payands", "configants", "commons", "broadusters", "broadents", "condands", "condanders", "capons", "comores", "descanded", "cmdanded", "configanded", "broadores", "condents", "payents", "commances", "configands", "broadasks", "aliasks", "cmdents", "commants", "condanded", "Commands", "commasks", "cmdusters", "broadonents", "commms", "commores", "capands", "cmdasks", "descands", "Commodes", "commases", "Commms", "payonents", "descanders", "condants", "condances", "aliances", "comments", "cmdances", "cmdores", "descases", "comms", "condins", "broadands", "cmdins", "comands", "Commanded", "configanders", "aliands", "Comments", "capents", "commusters", "Commases", "cmdms", "cmdases"]}}
{"code": "H, W = [int(x) for x in input().split()]\\nfor i in range(H):\\n    str_list = input()\\n    print(str_list)\\n    print(str_list)", "target": "261", "substitutes": {"H": ["Y", "K", "He", "C", "X", "F", "HT", "R", "G", "Han", "HI", "M", "N", "HB", "A", "HH", "h", "MH", "Host", "HC", "D", "HA", "HE", "DH", "P", "Q", "Eh", "J", "V", "I", "B", "OH", "HS", "NH"], "W": ["C", "X", "F", "R", "WT", "N", "M", "Weight", "U", "WM", "S", "SW", "D", "WP", "WI", "L", "DW", "P", "VW", "Q", "T", "V", "w", "BW", "I", "B", "MW", "WC"], "x": ["z", "yx", "xes", "xp", "X", "hex", "ux", "xy", "y", "t", "ix", "xs", "xa", "xx", "xb", "k", "ax", "rax", "v", "xt", "dx", "wx", "q", "mx", "ex", "val", "fx", "any", "num", "p", "rx", "xc", "e", "xe", "xi", "n", "ic", "w", "xf", "xd", "tx", "inx"], "i": ["z", "f", "io", "zi", "l", "ix", "ti", "r", "k", "gi", "q", "b", "yi", "ind", "id", " ii", "p", "j", "pi", "it", "ii", "xi", "n", "li", "I", "ia", "w", "im"], "str_list": ["string2str", "str2int", "str2single", "string_set", "string_dict", "str_str", "str2list", "string2dict", "strlennet", "strlenlist", "string2single", "string2list", "str_type", "str2str", "str2type", "string2net", "string_net", "str_dict", "string_tree", "string_single", "string_list", "str2tree", "string2int", "string_int", "str2dict", "str_single", "string_type", "string2set", "str2set", "str_net", "str_int", "string2type", "str_tree", "strlenstr", "strlendict", "string2tree", "str2net", "string_str", "str_set"]}}
{"code": "o = input()\\ne = input()\\n\\nfor i in range(len(e)):\\n    print(o[i], end = '')\\n    print(e[i], end = '')\\n\\nif len(o) != len(e):\\n    print(o[len(o)-1])", "target": "102", "substitutes": {"o": ["f", "io", "ol", "vo", "out", "iso", "oos", "m", "a", "l", "y", "t", "to", "s", "os", "\u00f6", "r", "oid", "opl", "v", "co", "oi", "h", "ot", "fo", "b", "g", "q", "lo", "O", "oe", "er", "d", "p", "ao", "oa", "ro", "oh", "om", "et", "mo", "ox", "object", "so", "po", "bo", "onet", "al", "n", "ob", "oo", "u", "no", "ooo", "on", "ome", "og", "ll", "auto"], "e": ["f", "pe", "ve", "ei", "ele", "el", "le", "ent", "ae", "est", "be", "l", "se", "eeee", "t", "ese", "ed", "s", "r", "ue", "es", "c", "ea", "b", "ge", "ate", "E", "we", "ie", "eu", "oe", "re", "er", "ce", "de", "eps", "te", "p", "end", "ec", "et", "xe", "ee", "ye", "eg", "n", "ffe", "me", "ev", "ome", "eb"], "i": ["f", "zi", "\u00ed", "m", "l", "y", "ix", "iy", "ti", "info", "\u0438", "ci", "r", "ip", "ji", "gi", "v", "ij", "c", "index", "q", "b", "ami", "yi", "ind", "id", "di", "p", "j", "pi", "it", "int", "ii", "xi", "n", "si", "batch", "ic", "li", "I", "iter", "x", "mi", "im"]}}
{"code": "a,b,c,d=map(int,input().split())\\ny=max((a*c),(a*d),(b*c),(b*d))\\nprint(y)", "target": "774", "substitutes": {"a": ["f", "ba", "am", "ta", "ae", "sta", "af", "au", "ga", "ax", "A", "ca", "r", "la", "at", "ea", "era", "ity", "da", "ao", "app", "act", "aka", "sa", "aa", "aj", "al", "ac", "ad", "up", "ma", "ia", "ab", "aaa", "x", "ar", "ach", "an", "aff"], "b": ["f", "rb", "ba", "ib", "mb", "blue", "be", "l", "bc", "by", "i", "bridge", "cb", "fb", "r", "ver", "v", "db", "h", "g", "wb", "nb", "lib", "bi", "br", "j", "e", "sb", "bo", "gb", "bis", "n", "ub", "bs", "o", "bot", "ab", "x", "bb", "base"], "c": ["f", "sc", "C", "cr", "cs", "l", "t", "bc", "cf", "con", "etc", "ci", "r", "cb", "ca", "rc", "lc", "g", "gc", "cc", "ct", "unc", "cl", "ce", "cur", "cp", "ec", "e", "cd", "dc", "n", "ac", "nc", "cu", "tc", "ic", "enc", "cm"], "d": ["z", "f", "ld", "m", "df", "red", "bd", "l", "t", "dev", "s", "dd", "i", "r", "dt", "div", "db", "v", "sd", "g", "D", "di", "du", "de", "do", "p", "da", "ds", "e", "dc", "dh", "dp", "n", "ad", "o", "dr", "md"], "y": ["Y", "z", "aily", "ym", "ey", "yl", "yout", "my", "xy", "yu", "py", "yer", "iy", "by", "oy", "i", "yy", "high", "ery", "yt", "v", "ysc", "gy", "g", "yi", "ny", "hey", "fy", "yk", "ley", "hot", "ya", "ye", "very", "yr", "cy", "vy", "yp", "x", "yd", "ly"]}}
{"code": "five = input()\\nlst_five = five.split(\" \")\\n\\nfor i in range(len(lst_five)):\\n    if lst_five[i] == \"0\":\\n        print(i+1)\\n", "target": "727", "substitutes": {"five": ["license", "enza", "town", "pie", "one", "rice", "ogi", "seven", "nine", "knife", "two", "floor", "eight", "teen", "ten", "los", "fif", "phis", "whatever", "Five", "shit", "pocket", "fish", "freedom", "six", "zero", "fifth", "three", "integer", "money", "four", "tto", "foot", "dog"], "lst_five": ["lst5five", "lbl_five", "lbl_prime", "lst_silver", "lnd_two", "lnd_five", "lst5two", "lld_5", "lst___five", "lst_nine", "lst5silver", "lst5nine", "lst___prime", "lld_fifth", "lld_ten", "lst_two", "lnd_nine", "lst_ten", "lst___two", "lbl_two", "lst_fifth", "lst_5", "lld_five", "lnd_silver", "lst_prime"], "i": ["ini", "ei", "zi", "iq", "uri", "m", "ogi", "l", "ix", "ti", "s", "\u0438", "ci", "ji", "gi", "v", "ij", "hi", "index", "ori", "ki", "phi", "yi", "ind", "id", "di", "num", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "n", "ic", "li", "I", "x", "ui", "mi", "im", "ski"]}}
{"code": "s=input()\\n\\n\\nif int(s[5:7])>4:\\n    print('TBD')\\nelse:\\n    print('Heisei')", "target": "545", "substitutes": {"s": ["f", "sts", "str", "sv", "m", "a", "l", "t", "gs", "su", "i", "r", "input", "v", "sp", "sl", "c", "h", "q", "b", "g", "S", "string", "d", "p", "ss", "e", "sb", "n", "bs", "sq", "w", "u", "us", "ts"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\ntry:\\n    from typing import List\\nexcept ImportError:\\n    pass\\n\\n\\ndef solve(A: int, B: int, C: int, K: int):\\n    print(A + B + C + max(A, B, C) * (2 ** K - 1))\\n\\n\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    A = int(next(tokens))  # type: int\\n    B = int(next(tokens))  # type: int\\n    C = int(next(tokens))  # type: int\\n    K = int(next(tokens))  # type: int\\n    solve(A, B, C, K)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "674", "substitutes": {}}
{"code": "s=input()\\n\\nflag=True\\nfor i in range(len(s)-1):\\n    if s[i+1]==s[i]:\\n        flag=False\\nprint(\"Good\" if flag else \"Bad\") \\n", "target": "228", "substitutes": {"s": ["z", "f", "sts", "str", "ps", "sv", "ws", "ls", "has", "m", "fs", "a", "cs", "rs", "t", "gs", "xs", "os", "ins", "ms", "ags", "ns", "v", "sl", "c", "hs", "gins", "h", "q", "b", "gets", "g", "ies", "S", "ids", "p", "ss", "less", "ds", "sam", "parts", "e", "sa", "sb", "its", "n", "abs", "sq", "w", "tes", "ats", "als", "ts", "qs", "js"], "flag": ["bug", "f", "wait", "z", "ld", "level", "ground", "sync", "flags", "line", "failed", "field", "sign", "cond", "stay", "l", "lv", "hold", "online", "bird", "age", "status", "sp", "lock", "tag", "long", "mask", "lag", "store", "group", "start", "g", "bit", " Flag", "cmd", "id", "do", "cloud", "command", "join", "nil", "j", "FLAG", "bool", "land", "weight", "fire", "log", "no", "Flag", "agged", "arg", "nl", "og", "count"], "i": ["ini", "zi", "\u00ed", "m", "my", "l", "y", "ix", "iy", "ti", "info", "key", "ci", "\u0438", "ji", "ij", "ori", "index", "q", "yi", "ind", "id", "di", "p", "multi", "vi", "j", "pi", "qi", "ai", "it", "ii", "batch", "n", "si", "xi", "I", "li", "iter", "x", "on", "mi", "iu", "im", "ui"]}}
{"code": "x, y = map(int, input().split())\\n\\nif x % y == 0:\\n    print(-1)\\nelse:\\n    cnt = 1\\n    while True:\\n        res = x * cnt\\n        if res % y != 0:\\n            print(res)\\n            break\\n", "target": "396", "substitutes": {"x": ["z", "f", "xes", "xp", "X", "xy", "l", "t", "ix", "xs", "xa", "i", "xx", "ax", "r", "v", "xt", "dx", "wx", "index", "ex", "fx", "d", "p", "rx", " xx", "xc", "ox", "xi", "n", "w", "px", "left", "xf", "xd", "tx"], "y": ["Y", "z", "sys", "ym", "ey", "yl", "ay", "m", "my", "xy", "py", "t", "iy", "sy", "i", "oy", "yy", "ch", "yt", "ty", "v", "ys", "ot", "b", "gy", "ies", "yi", "ny", "fy", "size", "j", "ry", "ya", "dy", "uy", "ye", "n", "yr", "cy", "vy", "o", "sky", "ly"], "cnt": ["ctctr", "cst", "cnc", "ctnc", "Ccount", "CNT", "Cnc", "cNT", "Cct", "lcNT", "ccount", "Cnt", "tcct", "tcnt", "cctr", "lcnc", "tcst", "lcnt", " cst", "ctnt", "ctNT", "Cst", "cct", " cct", "lcctr", "tccount", "Cctr", " ccount"], "res": ["ress", "sys", "rand", "rest", "pro", "max", "out", "obj", "des", "sum", "pr", "ires", "reset", "xy", "ret", "rs", "cons", "nt", "result", "ms", "ins", "expr", "r", "gr", "resp", "tx", "c", "resh", "q", "yes", "val", "ref", "re", "mem", "comp", "rx", "ox", "results", "RES", "int", "pres", "part", "no", "rel", "reg", "Res", "resolution", "req", "prime", "rt", "resource", "sol", "js", "init"]}}
{"code": "s = input()\\ns1 = s[0]\\ns2 = s[-1]\\nans = s1 + str(len(s)-2) + s2\\nprint(ans)\\n", "target": "565", "substitutes": {"s": ["z", "f", "sys", "sts", "ps", "sv", "ws", "ls", "fs", "a", "sis", "spec", "l", "rs", "cs", "t", "gs", "xs", "cons", "ms", "ins", "i", "os", "ns", "v", "sp", "strings", "sl", "c", "h", "ys", "b", "g", "S", "vs", "p", "ss", "ds", "sa", "sb", "n", "abs", "bs", "sq", "tes", "ats", "us", "als", "x", "ts", "qs", "js"], "s1": ["s0", "ts2", "S2", " s3", " s01", "S3", "S01", "ts01", "S1", "ts3", "S0", "ts1", " s0", "s01", "ts0", "s3"], "s2": ["ts2", "sv2", "string2", "hs2", "sv1", "string4", "svTwo", "s02", " s4", "s4", "sv02", "ts1", "hs4", "ts02", " sTwo", " s02", "sTwo", "tsTwo"], "ans": ["ens", "ls", "conv", "ran", "pan", "cons", "ms", "anas", "ars", "aus", "ons", "ns", "ann", " Ans", "aos", "ians", "ands", "cn", "san", "ANS", "can", "anus", "uns", "ai", "nas", "anes", "span", "nan", "ams", "ads", "ces", "ras", "ats", "ros", "anks", "ana", "an", "ks", "ants", "scan"]}}
{"code": "import sys\\nn=int(input())\\n\\nl=0\\nprint(l)\\nsys.stdout.flush()\\nsl=input()\\nif sl==\"Vacant\":\\n    exit()\\nr=n-1\\nprint(r)\\nsys.stdout.flush()\\nsr=input()\\nif sr==\"Vacant\":\\n    exit()\\n\\n\\n\\nfor _ in range(18):\\n    m=(l+r)//2\\n    print(m)\\n    sys.stdout.flush()\\n    s=input()\\n    if s==\"Vacant\":\\n        exit()\\n    if (m-1-l)%2 and s!=sl:\\n        sr=s\\n        r=m\\n    if (m-1-l)%2==0 and s==sl:\\n        sr=s\\n        r=m\\n    if (r-m-1)%2 and s!=sr:\\n        sl=s\\n        l=m\\n    if (r-m-1)%2==0 and s==sr:\\n        sl=s\\n        l=m\\n", "target": "344", "substitutes": {"n": ["z", "nn", "ol", "names", "y", "nt", "t", "number", "name", "nr", "N", "i", "ns", "k", "v", "ul", "na", "c", "ln", "sn", "b", "g", "cn", "nb", "num", "d", "p", "dn", "L", "ne", "nc", "o", "w", "nl", "x", "ll"], "l": ["z", "f", "ol", "ls", "yl", "el", "le", "y", "t", "lin", "kl", "i", "len", "k", "il", "v", "ul", "c", "ln", "h", "b", "lc", "g", "tl", "ml", "d", "p", "dl", "L", "j", "lp", "pl", "e", "lr", "al", "o", "ell", "li", "u", "ql", "nl", "x", "rl", "ll"], "sl": ["fl", "str", "sv", "ls", "sell", "isl", "Sl", "SL", "rs", "cel", "sm", "se", "kl", "fr", "ssl", "rol", "sw", "sp", "ll", "sd", "ul", "ln", "sn", "zh", "h", "tl", "shr", "ml", "dl", "L", "pl", "sa", "sel", "hl", "sb", "lr", "tr", "gl", "spl", "ell", "sal", "nl", "south", "sh", "sil", "rl", "sol", "ly"], "r": ["z", "f", "rb", "ri", "pr", "rr", "cr", "a", "R", "rs", "t", "y", "nr", "fr", "i", "rc", "rl", "res", "v", "c", "h", "b", "g", "rn", "re", "er", "rm", "d", "p", "j", "ro", "ry", "e", "lr", "tr", "vr", "mr", "o", "u", "rd", "w", "dr", "x", "rar", "ar", "rt"], "sr": ["sys", "sv", "pr", "rub", "rr", "spr", "rg", "kr", "cr", "rs", "sm", "gs", "nr", "fr", "ssl", "sw", "gr", "sp", "sd", "sn", "tl", "SR", "shr", "rn", "rm", "usr", "sa", "sf", "sb", "so", "lr", "tr", "vr", "rt", "mr", "yr", "sur", "hr", "si", "dr", "sh", "rl", "ser", "sol"], "_": [" ge", " do", " j", "__", " __", " each", " c", " sub", "j", " you", " all", " ex", "___", " g"], "m": ["z", "f", "gm", "min", "mc", "tm", "le", "mol", "a", "all", "t", "sm", "y", "ms", "M", "i", "mn", "k", "err", "un", "ver", "v", "nm", "em", "arm", "c", "bm", "pm", "an", "q", "b", "h", "g", "mut", "mod", "re", "id", "dm", "rm", "d", "p", "mun", "man", "vm", "j", "mt", "mo", "e", "mat", "mr", "o", "met", "u", "mac", "w", "mm", "x", "mi", "im", "cm", "md"], "s": ["stats", "cs", "serv", "sm", "ins", "sw", "status", "hs", "ers", "ys", "h", "g", "ies", "yes", "sim", "ains", "parts", "sb", "its", "set", "ts", "ants", "js", "sts", "rates", "se", "t", "xs", "ms", "os", "eds", "supp", "ss", "ds", "sam", "ols", "us", "als", "ings", "sv", "ls", "rs", "gs", "ed", "ags", "ssl", "sp", "sd", "ments", "ges", "j", "sa", "w", "tes", "sh", "sol", "st", "ps", "sis", "y", "ing", "ns", "res", "es", "ations", "S", "vs", "so", "si", "bs", "sq", "ats"]}}
{"code": "def solve():\\n    n = int(input())\\n    p = []\\n    for _ in range(n):\\n         p.append(int(input()))\\n    print(sum(p) - max(p)//2)\\n\\n\\nif __name__ == '__main__':\\n    solve()\\n", "target": "259", "substitutes": {"n": ["nn", "nia", "names", "m", "l", "nt", "t", "number", "nr", "N", "i", "len", "ns", "mn", "k", "v", "na", "c", "long", "ng", "sn", "q", "ln", "cn", "nu", "nb", "num", "nv", "d", "j", "ne", "gn", "np", "nc", "no", "nl", "norm"], "p": ["ps", "pr", "pt", "m", "ap", "pu", "pins", "par", "rep", "pkg", "t", "pos", "pb", "s", "pp", "i", "jp", "tp", "press", "v", "sp", "now", "perm", "pa", "vp", "pm", "pers", "q", "post", "mp", "pre", "pd", "power", "j", "pi", "pl", "lp", "ping", "cp", "P", "it", "np", "po", "up", "pc", "u", "pid", "x", "pn"], "_": ["ay", " it", " j", " __", " l", " the", "___"]}}
{"code": "import math\\nfrom math import gcd,pi\\nINF = float(\"inf\")\\n\\nimport sys\\nsys.setrecursionlimit(10**6)\\nimport itertools\\nfrom collections import Counter,deque\\ndef i_input(): return int(input())\\ndef i_map(): return map(int, input().split())\\ndef i_list(): return list(i_map())\\ndef i_row(N): return [i_input() for _ in range(N)]\\ndef i_row_list(N): return [i_list() for _ in range(N)]\\ndef s_input(): return input()\\ndef s_map(): return input().split()\\ndef s_list(): return list(s_map())\\ndef s_row(N): return [s_input for _ in range(N)]\\ndef s_row_str(N): return [s_list() for _ in range(N)]\\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\\n\\n\\ndef main():\\n    n = i_input()\\n    l = [1]\\n    ans = []\\n    for i in range(2,10**4):\\n        l.append(l[i-2]+i)\\n    while True:\\n        if n == 0:\\n            break\\n        for i,k in enumerate(l):\\n            if n <= k:\\n                if i == 0:\\n                    a = k\\n                else:\\n                    a = k - l[i-1]\\n                ans.append(a)\\n                n -= a\\n                break\\n    for i in ans:\\n        print(i)\\n\\nif __name__==\"__main__\":\\n    main()\\n", "target": "389", "substitutes": {"INF": [" INEF", "NR", " INR", "InR", " INFF", "NFF", "InEF", "INFF", "NF", "NEF", "InFF", "INR", "InF", "INEF"], "N": ["Y", "Name", "Num", "K", "ALL", "H", "C", "X", "AN", "R", "NOW", "G", "CNN", "NB", "NI", "NG", "EN", "M", "NR", "CN", "A", "NP", "NA", "ANY", "S", "ND", "O", "NT", "D", "SN", "NS", "Node", "NM", "L", "TN", "NOTE", "P", "T", "MAN", "GN", "Z", "V", "Note", "I", "OUT", "Ns", "NC", "NAME", "NUM", "NO", "NN", "NH"], "_": ["f", "let", "pt", "____", "Local", "t", "ix", "un", "__", "val", "\u00e7", "d", "p", "P", "w", "___", "x", "on", "an", "ly"], "n": ["z", "f", "nn", "out", "m", "ni", "y", "nt", "t", "nr", "ns", "r", "nm", "en", "mn", "v", "na", "c", "ln", "h", "g", "cn", "nu", "nb", "num", "d", "p", "nat", "j", "ne", "ai", "gn", "np", "nan", "nc", "o", "w", "no", "nl", "x", "on", "an"], "l": ["fl", "lines", "ls", "jl", "le", "isl", "m", "line", "lv", "t", "lis", "gs", "kl", "s", "len", "r", "lb", "la", "v", "sl", "c", "lt", "ln", "b", "lc", "lo", "ml", "dl", "p", "L", "j", "lp", "pl", "lr", "o", "li", "u", "nl", "list", "rl", "ll"], "ans": ["ens", "ars", "ls", "nets", "idents", "rs", "gs", "xs", "amps", "ils", "s", "ins", "anas", "ms", "aus", "ons", "ns", "outs", "ann", "ags", "os", "acts", "ents", "ians", "angs", "ums", "ands", "ations", "works", "ANS", "ds", "uns", "ana", "anes", "nan", "ates", "ats", "nl", "us", "anks", "ions", "an", "ks", "ants", "olds"], "i": ["z", "f", "io", "ini", "ei", "ri", "zi", "m", "cli", "ni", "y", "t", "ix", "ti", "ci", "ji", "ati", "gi", "v", "adi", "ij", "c", "hi", "index", "oi", "ki", "phi", "b", "yi", "eni", "ind", "id", "asi", "di", "ik", "d", "p", "bi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "u", "x", "iti", "mi", "iu", "ski"], "k": ["z", "K", "m", "kr", "kt", "kh", "uk", "ka", "y", "t", "ck", "kl", "ikk", "ok", "key", "kk", "kan", "ke", "r", "v", "kar", "c", "mk", "ki", "q", "b", "an", "kn", "ak", "ik", "kok", "p", "km", "j", "kj", "kw", "tk", "u", "sk", "ko", "x", "ku", "ks"], "a": ["f", "ba", "apa", "fa", "m", "ae", "another", "ka", "t", "sta", "ga", "au", "s", "xa", "A", "ca", "r", "at", "pa", "na", "c", "wa", "ea", "an", "b", "p", "va", "alpha", "da", "ao", "j", "oa", "e", "sa", "ai", "aa", "ac", "o", "sha", "w", "u", "ab", "aaa", "x", "ar", "ana", "am"]}}
{"code": "N = int(input())\\nA = list(map(int,input().split()))\\nA.sort()\\n\\ncheck = True\\nfor i in range(N-1):\\n  if A[i] == A[i+1]:\\n    check = False\\n    \\nprint(\"YES\" if check else \"NO\")", "target": "135", "substitutes": {"N": ["Num", "K", "NE", "H", "C", "X", "NB", "NI", "M", "NR", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "No", "Q", "T", "GN", "J", "Z", "V", "n", "I", "B", "Ns", "NC", "NO", "NN", "Wh"], "A": ["AA", "H", "C", "AC", "a", "IA", "Abs", "BA", "PA", "CA", "AL", "TA", "LA", "EA", "There", "JA", "NA", "Save", "S", "O", "As", "All", "HA", "AT", "Array", "AU", "AF", "L", "WA", "GA", "An", "mA", "P", "MA", "AM", "This", "You", "AS", "AE", "The", "AP", "AB", "Answer", "One", "Alpha", "B", "I", "Each", "ACT", "SA"], "check": ["type", "wait", "checks", "diff", "out", "look", "sync", "load", "all", "Check", "ck", "close", "info", "control", "make", "ok", "switch", "key", "status", "fail", "lock", "match", "index", "start", "see", "flag", "mod", "test", "force", "cont", "call", "read", "warn", "crit", "kill", "cp", "send", "valid", "int", "block", "equal", " Check", "CHECK", "checked", "set", "print", "stop", "no", "list", "link", "update", "view"], "i": ["zi", "m", "uri", "a", "y", "ix", "ti", "info", "key", "ci", "ip", "k", "ji", "gi", "v", "ij", "ori", "index", "q", "phi", "g", "yi", "sim", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "n", "si", "ic", "I", "li", "us", "me", "x", "ui", "mi", "im", "ski", "init"]}}
{"code": "n=int(input())\\nl=[list(map(int,input().split())) for _ in range(n)]\\nl.sort(key=lambda x:x[0]+x[1],reverse=True)\\n\\nprint(sum([l[i][0] for i in range(n) if i % 2 == 0]) - sum([l[i][1] for i in range(n) if i % 2 == 1]))", "target": "794", "substitutes": {"n": ["z", "nn", "m", "y", "nt", "t", "number", "nr", "N", "len", "ns", "mn", "r", "v", "na", "c", "ng", "sn", "q", "ln", "h", "g", "b", "cn", "nu", "nb", "num", "d", "p", "j", "network", "ne", "net", "gn", "np", "nan", "nc", "o", "nl", "x", "ll"], "l": ["fl", "lit", "lines", "ld", "ls", "el", "m", "bl", "lv", "t", "lis", "kl", "s", "r", "lb", "la", "sl", "lt", "lu", "ln", "lc", "g", "tl", "lo", "cl", "ml", "dl", "p", "L", "j", "lp", "pl", "hl", "lr", "al", "li", "left", "ql", "lf", "nl", "list", "x", "rl", "lists", "ll", "ly"], "_": [" name", " ind", "name", "ix", " j", " mult", " __", " each", " p", " v", " pos", " parent", "ox", " the", " z", " x", " k", "I", " y", " index"], "i": ["io", "ini", "ei", "ri", "zi", "uri", "m", "cli", "y", "ix", "iy", "ti", "info", "ip", "ci", "\u0438", "ji", "im", "ati", "v", "gi", "gu", "ij", "hi", "oi", "ori", "ki", "phi", "id", "di", "p", "bi", "multi", "j", "pi", "fi", "ai", "it", "int", "ii", "iri", "si", "xi", "ic", "uli", "li", "I", "u", "x", "ui", "mi", "iti", "iu", "ski"]}}
{"code": "import sys\\nfrom bisect import *\\nfrom heapq import *\\nfrom collections import *\\nfrom itertools import *\\nfrom functools import *\\nfrom math import *\\nfrom fractions import *\\n\\nsys.setrecursionlimit(100000000)\\ninput = lambda: sys.stdin.readline().rstrip()\\n\\ndef main():\\n    A, B, Q = map(int, input().split())\\n    s, t = [], []\\n    for _ in range(A):\\n        s.append(int(input()))\\n    for _ in range(B):\\n        t.append(int(input()))\\n    for _ in range(Q):\\n        x = int(input())\\n        i = bisect_left(s, x)\\n        j = bisect_left(t, x)\\n        # visit s[i - 1] or s[i]\\n        # visit t[j - 1] or t[j]\\n        s_candidates = [s[k] for k in [i - 1, i] if 0 <= k < A]\\n        t_candidates = [t[k] for k in [j - 1, j] if 0 <= k < B]\\n        ans = float('inf')\\n        for s_candidate in s_candidates:\\n            for t_candidate in t_candidates:\\n                right = max(x, s_candidate, t_candidate) - x\\n                left = x - min(x, s_candidate, t_candidate)\\n                ans = min(ans, min(right, left) * 2 + max(right, left))\\n        print(ans)\\n\\n\\n\\n\\n\\n\\nmain()\\n", "target": "487", "substitutes": {"input": ["active", "str", "interface", "add", "out", "stream", "unknown", " Input", "shift", "sample", "format", "step", "request", "raw", "output", "buffer", "url", "history", "enter", "pull", "length", "index", "q", "insert", "human", "ref", "Input", "string", "select", "source", "cmd", "pattern", "config", "context", "read", "view", "cur", "image", "command", "hidden", "form", "get", "parse", "inc", "it", "int", "current", "inner", "focus", "feed", "sequence", "print", "exec", "lat", "arg", "gen", "PUT", "init"], "A": ["AY", "AR", "AA", "Ar", "RA", "AN", "AC", "Al", "Open", "IA", "AV", "CA", "AL", "U", "Av", "S", "As", "AU", "HA", "AF", "An", "At", "AM", "First", "AE", "AS", "The", "AP", "AB", "Area", "One", "Alpha", "I", "Ant", "ACT", "SA"], "B": ["BE", "Blue", "BB", "VB", "JB", "DB", "RB", "Rob", "Ber", "Bu", "OB", "SB", "NB", "BO", "WB", "BA", "BC", "BI", "Bi", "Bar", "GB", "S", "Builder", "MB", "TB", "LB", "QB", "BG", "FB", "T", "PB", "J", "AB", "Bill", "BL", "Bern", "BF", "BR"], "Q": ["Y", "QU", "Qual", "Blue", "Config", "CH", "MQ", "FF", "X", "Question", "Query", "Ok", "HQ", "Required", "q", "RE", "S", "ZZ", "US", "UK", "Questions", "If", "QB", "Maybe", "Queue", "You", "T", "J", "Bill", "Qu", "IX", "UE", "Que", "Thu", "IQ"], "s": ["sts", "str", "sv", "ws", "ls", "fs", "a", "cs", "rs", "se", "gs", "os", "ms", "ins", "ns", "sw", "strings", "sp", "sl", "es", "ys", "ies", "S", "vs", "ss", "ds", "sb", "its", "ses", "si", "bs", "sq", "ats", "ts", "js", "st"], "t": ["tu", "pt", "tm", "ent", "ta", "y", "tt", "nt", "tw", "r", "dt", "at", "ert", "ot", "q", "b", "ct", "tree", "test", "trace", "te", "p", "bt", "it", "wt", "T", "vt", "tr", "txt", "n", "art", "o", "tc", "tes", "unt", "tools", "ts", "rt", "st"], "_": ["let", "____", "ly", "__", "place", " __", "ity", "\u00e7", " the", "Se", "___", "non", "\u0430"], "x": ["z", "f", "xp", "X", "a", "hex", "ux", "xy", "y", "ix", "xs", "xa", "xx", "ax", "v", "nex", "xt", "dx", "wx", "c", "q", "mx", "ex", "fx", "p", "rx", "xc", "e", "ox", "xe", "xxxx", "int", "xi", "ic", "u", "px", "xf", "xd", "tx"], "i": ["f", "z", "m", "ir", "l", "y", "ix", "v", "ij", "hi", "q", "phi", "ind", "p", "bi", "e", "it", "int", "xi", "si", "n", "ic", "I", "li", "mi"], "j": ["z", "f", "out", "m", "l", "y", "ret", "r", "k", "ji", "v", "ij", "c", "q", "b", "g", "d", "p", "e", "it", "jj", "J", "n", "o", "js"]}}
{"code": "s=input()\\nn=len(s)\\nif s[n-1] is 's':\\n  print(s+'es')\\nelse: \\n  print(s+'s')", "target": "746", "substitutes": {"s": ["spec", "simple", "full", "ins", "series", "status", "ers", "h", "q", "ys", "g", "ies", "source", "ains", "parts", "sb", "set", "x", "ts", "js", "f", "sts", "ws", "m", "t", "xs", "ms", "os", "gins", "ands", "sg", "string", "temp", "ss", "ds", "sam", "erences", "abs", "als", "space", "str", "sv", "ls", "ares", "sql", "l", "rs", "gs", "sample", "ags", "i", "sp", "sl", "c", "state", "b", "p", "e", "w", "tes", "qs", "st", "ps", "sing", "has", "a", "ns", "es", "S", "short", "bs", "sq", "ats"], "n": ["z", "nn", "names", "m", "ni", "l", "nt", "t", "nr", "N", "i", "len", "ns", "mn", "nm", "nos", "en", "v", "c", "ng", "sn", "ln", "nd", "nu", "nb", "num", "d", "p", "j", "ne", "nor", "np", "nc", "no", "nl", "norm"]}}
{"code": "n = int(input())\\nA = list(map(int, input().split()))\\nd = {}\\n\\nfor i in A:\\n    if i in d:\\n        print(\"NO\")\\n        exit(0)\\n    else:\\n        d[i] = 1\\n\\nprint(\"YES\")\\n", "target": "135", "substitutes": {"n": ["z", "f", "nn", "m", "ni", "l", "y", "t", "nt", "s", "N", "ns", "nm", "k", "na", "c", "sn", "q", "b", "h", "nb", "num", "p", "j", "o", "w", "x"], "A": ["AA", "Ar", "H", "Another", " a", "a", "au", "N", "CA", "Some", "Av", "NA", "b", "S", "These", "As", "D", "Array", "AF", "L", "An", "At", "mA", "P", "AD", "This", "T", "The", "AB", "V", "I", "B", "Alpha", "an", "Ax"], "d": ["z", "f", "ld", "m", "a", "df", "l", "y", "t", "dict", "s", "dd", "r", "dt", "db", "v", "sd", "c", "h", "q", "nd", "b", "g", "D", "di", "pd", "de", "dl", "do", "da", "p", "j", "ds", "td", "dh", "o", "w", "x", "data", "dat", "fd"], "i": ["z", "f", "ini", "ri", "zi", "\u00ed", "m", " bi", " vi", "a", "l", "y", "t", "ti", " li", "k", "gi", "v", " ni", "ij", "c", "oi", " hi", "ki", " ki", "b", "yi", "ind", "id", " ii", "di", " Xi", "p", " ti", "j", "pi", "ai", " si", "ii", "xi", "si", "o", "ic", "li", "I", " di", " wi", "u", "x", " mi", "mi", "iti"]}}
{"code": "N,K = map(int,input().split())\\np = list(map(int,input().split()))\\n\\nl = []\\nfor i in range(N):\\n    l.append(((1+p[i])*(p[i]/2))/p[i])\\n\\nque = [0]*(N+1)\\nfor i in range(1,N+1):\\n    que[i] = l[i-1]+que[i-1]\\n\\nans = 0\\nfor i in range(K,len(l)):\\n    ans = max(ans,que[i+1]-que[i+1-K])\\n\\nif N == K:\\n    print(max(que))\\nelse:\\n    print(ans)", "target": "87", "substitutes": {"N": ["Y", "Num", "NE", "H", "C", "F", "R", "Ni", "CNN", "G", "NB", "NI", "M", "NR", "A", "MN", "NL", "NP", "NA", "S", "E", "ND", "NT", "D", "SN", "NS", "L", "TN", "Net", "P", "No", "Q", "T", "GN", "J", "n", "V", "I", "Ns", "NC", "NO", "NN", "Network", "NH"], "K": ["Y", "HK", "KA", "KN", "KY", "PK", "H", "C", "KT", "X", "AN", "F", "KK", "R", "SK", "G", "W", "NB", "Han", "M", "A", "k", "KR", "KI", "KS", "S", "E", "NK", "D", "KING", "UK", "L", "TN", "P", "Q", "KE", "Sk", "T", "J", "Ku", "Z", "V", "I", "B", "KC", "WH", "AK"], "p": ["ps", "pe", "f", "per", "pt", "pr", "m", "ap", "a", "par", "pkg", "t", "pos", "pb", "s", "pp", "ip", "jp", "tp", "r", "k", "v", "pa", "vp", "c", "pm", "q", "pers", "g", "pd", "d", "power", "pi", "pl", "lp", "cp", "P", "np", "pc", "n", "o", "u", "pn", "pro"], "l": ["fl", "lit", "ol", "ld", "ls", "el", "le", "isl", "m", "lv", "lin", "lis", "kl", "len", "en", "lb", "la", "sl", "c", "lu", "lt", "ln", "q", "b", "lc", "g", "lo", "lam", "ml", "dl", "L", "lp", "pl", "lr", "n", "loc", "log", "li", "nl", "list", "rl", "ll"], "i": ["io", "ini", "ei", "ri", "zi", "uri", "cli", "y", "ix", "iy", "ti", "info", "ip", "ci", "ji", "im", "ati", "gi", "v", "ij", "c", "ori", "index", "ki", "phi", "yi", "sim", "ind", "id", "asi", "di", "ik", "bi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "batch", "ic", "iri", "li", "I", "ia", "iter", "x", "ui", "mi", "iu", "multi", "iti", "ski"], "que": ["pe", "ve", "ques", "quer", "ls", "vel", "he", "rub", "le", "line", "pu", "fine", "se", "lv", "lis", "gue", "che", "au", "len", "cb", "en", "ue", "vre", "buffer", "lb", "quote", "la", "ch", "co", "pa", "vp", "lbs", "lu", "ln", "q", "b", "ge", "lo", "queue", "cpu", "ctx", "ce", "du", "cur", "te", "cho", "ru", "cp", "pl", "com", "buf", "ro", "late", "e", "xe", "sle", "gb", "bo", "flo", "n", "ob", "aque", "cu", "obs", "buff", "rl", "Que", "ide", "qu"], "ans": ["ps", "stats", "ens", "lines", "anon", "ls", "names", "oss", "ran", "ean", "anc", "cs", "rs", "cons", "amps", "xs", "s", "ms", "anas", "os", "ins", "ns", "outs", "ons", "ann", "aus", "aps", "acs", "aos", "arts", "ians", "angs", "ums", "rans", "ations", "yes", "vs", "ANS", "can", "uns", "ai", "nas", "offs", "anes", "nz", "bs", "ras", "ates", "ats", "us", "ros", "ts", "ions", "an", "ks", "ants", "lan"]}}
{"code": "s = input()\\n\\nif(len(s) % 2 == 0):\\n    s = s[:-2]\\nelse:\\n    s = s[:-1]\\n\\nwhile(s != \"\"):\\n    l = len(s)//2\\n    if(s[:l] == s[l:]):\\n        print(l*2)\\n        break\\n    s = s[:-2]\\n", "target": "696", "substitutes": {"s": ["stats", "spec", "cs", "full", "ins", "sw", "input", "v", "hs", "h", "q", "g", "bits", "eps", "less", "sb", "its", "bis", "ses", "save", "ts", "js", "z", "f", "sys", "sts", "ws", "obj", "conv", "m", "se", "t", "ms", "os", "pers", "changes", "ss", "ds", "self", "abs", "n", "us", "als", "str", "sv", "ls", "src", "rs", "gs", "steps", "i", "r", "sp", "sl", "c", "b", "csv", "http", "next", "p", "ims", "tes", "qs", "ps", "ress", "a", "y", "say", "ns", "es", "gets", "S", "d", "short", "bs", "sq", "ats"], "l": ["z", "fl", "lit", "ld", "ls", "yl", "el", "le", "m", "label", "lv", "kl", "lang", "i", "len", "lb", "v", "url", "lock", "sl", "length", "lu", "lt", "ln", "h", "lay", "b", "lc", "g", "long", "tl", "lo", "loop", "dl", "p", "L", "j", "lp", "pl", "hl", "al", "n", "o", "li", "left", "dL", "nl", "rl", "ll", "lan", "ly"]}}
{"code": "N = int(input())\\nW = [input() for _ in range(N)]\\nfor i in range(N):\\n    for j in range(N):\\n        if i != j:\\n            if W[i] == W[j]:\\n                print(\"No\")\\n                exit()\\nfor k in range(N-1):\\n    if W[k][-1] != W[k+1][0]:\\n        print(\"No\")\\n        exit()\\nprint(\"Yes\")", "target": "218", "substitutes": {"N": ["Y", "Number", "Name", "Num", "K", "NE", "C", "X", "AN", "F", "Ni", "CNN", "NB", "NI", "M", "NR", "CN", "Na", "Length", "Len", "NP", "NA", "Size", "S", "E", "ND", "Ne", "O", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "NUM", "Ns", "NO", "NN", "NH"], "W": ["Y", "K", "Works", "H", "C", "WD", "F", "WS", "G", "WT", "M", "WB", "WR", "WE", "WAR", "There", "RAM", "WM", "Wa", "Windows", "WER", "NW", "SW", "D", "Watch", "Word", "WP", "AF", "WA", "DW", "L", "TW", "RW", "VW", "P", "Q", "HTML", "CW", "J", "VS", "Wh", "V", "w", "BW", "Wait", "B", "We", "EW", "WH", "MW", "WC"], "_": ["pt", "m", " int", "all", "name", "ix", " m", " __", " p", "ex", "val", "ml", " l", "ox", " x", "ac", "___", "x", " n"], "i": ["io", "ini", "zi", "m", "a", "ir", "ni", "y", "ix", "ti", "ip", "ci", "\u0438", "ji", "v", "gi", "ij", "hi", "ori", "ki", "b", "yi", "id", "di", "ik", "bi", "pi", "ai", "ii", "xi", "si", "o", "ic", "li", "I", "ia", "x", "ui", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "m", "a", "ja", "l", "y", "t", "s", "jp", "ji", "v", "json", "ij", "q", "b", "je", "g", "p", "bi", "jo", "kj", "it", "jj", "jump", "aj", "J", "n", "si", "o", "ju", "uj", "dj", "u", "ia", "us", "x", "im", "bj", "js", "jc"], "k": ["z", "f", "kg", "K", "m", "kr", "kt", "uk", "kh", "ka", "y", "t", "ck", "kl", "ok", "key", "kk", "ke", "v", "c", "mk", "ki", "b", "g", "ak", "unk", "ijk", "wk", "ik", "p", "km", "kj", "ek", "kw", "tk", "ac", "n", "u", "w", "sk", "ko", "x", "ku"]}}
{"code": "import numpy as np\\n\\na, b, c, d = map(int, input().split())\\nx = np.array([a, b])\\ny = np.array([c, d])\\nz = np.outer(x, y)\\nprint(z.max())", "target": "774", "substitutes": {"a": ["active", "ba", "ap", "am", "ae", "\u00e1", "ed", "au", "i", "A", "r", "ca", "la", "at", "ea", "area", "alpha", "da", "ao", "app", "oa", "act", "e", "sa", "aa", "al", "art", "ac", "ma", " A", "ia", "ab", "aaa", "ar", "an", "aff"], "b": ["rb", "ba", "ib", "be", "l", "bc", "by", "i", "cb", "r", "fb", "db", "ble", "nb", "bi", "br", "bf", "e", "sb", "bo", "gb", "n", "ob", "o", "bs", "B", "ab", "bb", "bar", "base", "eb"], "c": ["cod", "C", "cr", "cs", "bc", "cf", "con", "rc", "ca", "cb", "ch", "co", "lc", "cc", "ct", "ce", "cur", "can", "cloud", "cp", "ec", "com", "cd", "dc", "uc", "fc", "ac", "tc", "cy", "cu", "cm"], "d": ["f", "df", "red", "bd", "t", "l", "dd", "r", "dt", "div", "v", "db", "sd", "dis", "nd", "D", "di", "de", "do", "da", "dir", "ds", "td", "e", "dc", "n", "rd", "o", "dra", "dr"], "x": ["yx", "el", "one", "X", "ux", "xy", "l", "t", "ix", "xs", "xa", "i", "xx", "ax", "www", "ty", "v", "xml", "xt", "dx", "wx", "ex", "ross", "p", "rx", "act", "xc", "ox", "search", "xi", "lex", "w", "xf", "xd", "tx"], "y": ["Y", "ym", "ey", "yl", "yn", "ay", "my", "xy", "l", "py", "iy", "by", "oy", "yy", "ty", "yt", "ch", "gy", "ot", "ys", "ies", "yi", "ny", "fy", "yk", "j", "ry", "ya", "ye", "axy", "yr", "hy", "ly"], "z": ["scroll", "fl", "yz", "zi", "zip", "xy", "zy", "rez", "iz", "uz", "os", "hz", "density", "v", "az", "cz", "h", "zh", "shine", "ze", "tz", "zer", "j", "zero", "zen", "zone", "nz", "zu", "Z", "ez", "w", "zz", "zo", "ll"]}}
{"code": "n = int(input())\\na = [int(i) for i in input().split()]\\nprint(sum(a[i] % 2 == 1 for i in range(0, n, 2)))", "target": "126", "substitutes": {"n": ["nn", "nw", "m", "l", "nt", "t", "N", "len", "ns", "mn", "k", "en", "v", "na", "c", "ln", "sn", "q", "b", "cn", "nu", "nb", "num", "d", "p", "j", "network", "ne", "net", "np", "nc", " N", "no", "nl"], "a": ["f", "ba", "array", "m", "am", "l", "t", "au", "ga", "xa", "A", "ca", "at", "la", "v", "c", "b", "area", "d", "p", "va", "alpha", "da", "ao", "sa", "ai", "aa", "ac", "o", "ma", "w", "ab", "an", "data"], "i": ["io", "ini", "ei", "ib", "ri", "zi", "\u00ed", "m", "l", "y", "t", "ix", "iy", "ti", "info", "ip", "ci", "v", "gi", "ij", "hi", "oi", "ki", "phi", "yi", "id", "di", "p", "bi", "j", "pi", "fi", "qi", "ai", "ii", "xi", "iri", "si", "ic", "li", "u", "I", "x", "ui", "mi", "iu", "im"]}}
{"code": "import heapq\\nn = int(raw_input())\\nheap = [map(int, raw_input().split(' '))[::-1] for _ in range(n)]\\nheapq.heapify(heap)\\n\\ndef f(heap):\\n\tt = 0\\n\twhile(heap):\\n\t\tnd,ct = heapq.heappop(heap)\\n\t\twhile(heap and heap[0][0] == nd): ct += heapq.heappop(heap)[1]\\n\t\tgap = nd - ct - t\\n\t\tif gap < 0:\\n\t\t\treturn False\\n\t\twhile(heap and heap[0][1] <= gap):\\n\t\t\tu,v = heapq.heappop(heap)\\n\t\t\tgap -= v\\n\t\t\tt += v\\n\t\tt += ct\\n\treturn True\\nprint 'Yes' if f(heap) else 'No'", "target": "55", "substitutes": {"n": ["z", "nn", "names", "m", "l", "all", "nt", "name", "number", "nr", "N", "ns", "nm", "k", "en", "na", "c", "sn", "q", "g", "cn", "nu", "nb", "num", "d", "size", "p", "count", "j", "network", " ns", " ng", "ne", "gn", "np", "nan", "nc", "no", "nl", " na"], "heap": [" heep", "keapon", "geop", "shemp", "hoap", "cheash", "hoaped", "herep", "keash", "pheap", "heaj", "hma", "hacp", "heape", "haar", "waaped", "hecap", "hiaj", "hiap", "fleac", "meav", "hyup", "hema", "keop", "mecap", "fleap", "fleapt", "cheap", "keape", "hiep", "heaped", "geapt", "checp", "heneAP", "helap", "watap", "meep", "pheat", "pheaps", "heup", "kecap", "sheape", "herapon", "sheAP", "sheep", "geap", "heaps", "helop", "hiAP", "kemp", "chemp", "pheash", "waesh", "haau", "heesh", "heapon", "hycap", "hama", "herpl", "haape", "heneau", "hear", "cheep", "haat", "hoesh", "haaps", "heep", "keapt", "cheop", "heneep", "keesh", "helcap", "sheapt", "cheav", " heapt", "haup", "hyap", "heneap", "sheapon", "kepl", "geac", "hap", "heop", "chear", "cheat", "cheapt", "cheac", "cheau", "hetap", " hemp", "hape", "waap", "sheaj", "heau", "sheav", "memp", "fleop", "hacap", "heapt", "meape", "phecp", "sheap", "hecp", "heat", "heAP", "helash", "phema", "heneav", "keaped", "keep", "haav", "herap", "shepl", "hyape", "heneaj", "pheape", "hemp", "meup", "ketap", "cheape", "haash", "keap", "hotap", "heac", "heash", "henear", "hepl", "cheaps", "meap", "haap", "hash", "checap", "sheop", "heav"], "_": [" un", " m", " j", " __", " p", " each", " time", " new", " l", " long", " pre", " g"], "t": ["qt", "f", "tu", "out", "pt", "tm", "m", "ent", "ta", "a", "l", "y", "nt", "tt", "to", "ti", "r", "dt", "tp", "at", "c", "lt", "gt", "ot", "h", "q", "g", "cn", "d", "p", "bt", "j", "ht", "et", "total", "td", "mt", "e", "it", "tf", "wt", "T", "vt", "time", "tc", "tab", "ts"], "nd": ["dk", "rand", "nn", "nw", "ld", "ent", "std", "nt", "dd", "dt", "sd", "ng", "wn", "th", "ND", "nb", "ind", "d", "vd", "nv", "dl", "dn", "pd", "hd", "ant", "da", "ds", "td", "ne", "ald", "cd", "od", "gn", "np", "rd", "nc", "nl", "md", "st", "fd"], "ct": ["apt", "ld", "pt", "cat", "cr", "nt", "tt", "ck", "cf", "dt", "at", "co", "c", "mut", "ot", "q", "cn", "cc", "Ct", "ind", "cmd", "ctx", "ce", "d", "cap", "ant", "cur", "bt", "CT", "ctr", "col", "ut", "ht", "et", "td", "act", "mt", "cent", "cox", "cd", "wt", "vt", "het", "nc", "ctl", "ts", "count", "ect"], "gap": ["pe", "expression", "wait", "diff", "phal", "tm", "ap", "gas", "shift", "chain", "hold", "bp", "close", "note", "gp", "step", "adj", "jp", "div", "sp", "snap", "pa", "lag", "q", "gt", " gaps", "g", "gc", "ge", "prot", "tg", "prev", "next", "p", "round", "pat", "exp", "j", "tap", "window", "ht", "gov", " Gap", "quant", "end", "hap", "peak", "jump", "span", "vt", "lap", "ift"], "u": ["f", "tu", "ud", "i", "ue", "un", "ul", "c", "lu", "U", "q", "g", "nu", "p", "ou", "uf", "uc", "ur", "up", "uv", "ju", "cu", "w", "us", "ui", "iu", "ru"], "v": ["z", "f", "ve", "sv", "vv", "m", "qv", "l", "lv", "y", "s", "i", "r", "ver", "k", "ue", "vp", "c", "h", "q", "b", "g", "tv", "vd", "nv", "d", "p", "vi", "j", "e", "av", "it", "vt", "vr", "uv", "V", "vy", "w", "vc", "cv"]}}
{"code": "#from statistics import median\\n#import collections\\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\\nfrom math import gcd\\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\\n#from collections import deque\\nfrom collections import deque,defaultdict,Counter\\nimport decimal\\nimport re\\nimport math\\nimport bisect\\nimport heapq\\n#\\n#\\n#\\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\\n#\\n#\\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\\n# \u56db\u6368\u4e94\u5165g\\n#\\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\\n#\\n#\\nimport sys\\nsys.setrecursionlimit(10000000)\\nmod = 10**9 + 7\\n#mod = 9982443453\\n#mod = 998244353\\nINF = float('inf')\\nfrom sys import stdin\\nreadline = stdin.readline\\ndef readInts():\\n  return list(map(int,readline().split()))\\ndef readTuples():\\n    return tuple(map(int,readline().split()))\\ndef I():\\n    return int(readline())\\na,b,c = readInts()\\nprint((a*b)//2)\\n", "target": "637", "substitutes": {}}
{"code": "r, c = map(int, raw_input().split())\\n\\ndata = [0 for i in range(r)]\\ntemp = [0 for i in range(c)]\\n\\nfor i in range(r):\\n    data[i] = map(int, raw_input().split())\\n    \\nfor i in range(r):\\n    data[i].append(0)\\n    data[i][c] = sum(data[i])\\nfor i in range(c):\\n    for j in range(r):\\n        temp[i] += data[j][i]\\ntemp.append(sum(temp))\\ndata.append(temp)\\n\\nfor i in range(r+1):\\n    print \" \".join(map(str, data[i]))", "target": "68", "substitutes": {"r": ["f", "rb", "ri", "m", "rg", "sr", "cr", "a", "ir", "R", "l", "rs", "nr", "fr", "rc", "res", "v", "h", "q", "g", "re", "d", "p", "br", "ro", "e", "rid", "ra", "n", "rd", "mr", "o", "w", "u", "dr", "rar", "ar", "rt"], "c": ["f", "sc", "mc", "m", "C", "cr", "a", "cs", "l", "t", "chain", "ci", "cin", "k", "rc", "ca", "v", "co", "h", "cv", "b", "lc", "gc", "ct", "cc", "cl", "ce", "d", "p", "cp", "ec", "com", "e", "dc", "n", "tc", "o", "cu", "u", "ac", "ic", "w", "x", "cm", "count"], "data": ["sum", "only", "full", "div", "input", "empty", "store", "group", "default", "read", "da", "dates", "no", "set", "iter", "list", "chart", "new", "values", "message", "date", "xy", "draw", "this", "t", "result", "shape", "final", "output", "buffer", "history", "json", "index", "test", "reports", "exp", "self", "multiple", "table", "n", "batch", "apps", "map", "done", "str", "Data", "debug", "memory", "raw", "open", "size", "next", "p", "zero", "total", "valid", "results", "ata", "time", "cache", "items", "dec", "where", "multi", "users", "out", "array", "all", "device", "dict", "step", "ns", "DATA", "res", "db", "now", "d", "window", "sequence", "rel", "dat"], "i": ["f", "io", "ini", "ei", "ib", "ri", "zi", "\u00ed", "m", "ir", "a", "l", "y", "ix", "ti", "ip", "ci", "\u0438", "il", "ji", "ati", "gi", "v", "ij", "oi", "ki", "b", "yi", "ie", "id", "di", "ik", "p", "bi", "multi", "pi", "e", "ai", "it", "int", "ii", "iri", "si", "xi", "ic", "o", "li", "I", "ia", "u", "x", "iti", "mi", "iu", "im", "ui"], "temp": ["ps", "emp", "level", "tmp", "pt", "sum", "ter", "ta", "tim", "t", "adjusted", "result", "porary", "final", "output", "div", "buffer", "comb", "v", "tar", "length", "condition", "term", "tem", "mod", "mp", "test", "pre", "mem", "cur", "p", "stem", "variable", "total", "alt", "Temp", "vol", "it", "current", "tr", "time", "template", "tc", "table", "n", "cum", "met", "cu", "set", "unt", "ts", "unit", "dat", "perature"], "j": ["z", "f", "ion", "jl", "m", "ja", "l", "y", "t", "jp", "k", "ji", "v", "ij", "h", "q", "b", "g", "p", "br", "oj", "pi", "kj", "it", "jj", "aj", "J", "n", "si", "o", "uj", "dj", "li", "bj", "js", "jc"]}}
{"code": "N = int(input())\\na = list(map(int,input().split()))\\n\\n\\nans = 1e10\\nfor i in range(-100,101):\\n    tmp = 0\\n    for j in a:\\n        tmp += (i-j)**2\\n    ans = min(ans,tmp)\\n\\nprint(ans)", "target": "548", "substitutes": {"N": ["Num", "K", "H", "C", "X", "F", "Sn", "R", "Ni", "G", "M", "A", "NA", "S", "E", "O", "D", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NN"], "a": ["z", "out", "apa", "m", "am", "ae", "another", "l", "all", "t", "pos", "to", "af", "s", "xa", "A", "input", "at", "na", "c", "ea", "b", "area", "p", "alpha", "oa", "e", "ai", "sa", "ata", "aa", "n", "ac", "o", "ma", "w", "set", "aaa", "list", "x", "an"], "ans": ["ars", "ens", "nn", "sv", "anon", "ls", "sum", "names", "nets", "aned", "vers", "AN", "oss", "ran", "ean", "cs", "rs", "nt", "pan", "gs", "xs", "amps", "iann", "au", "s", "ins", "anas", "os", "aus", "ns", "mn", "ons", "ann", "ms", "aps", "news", "outs", "aos", "arts", "beans", "es", "ents", "angs", "iban", "rans", "said", "posts", " means", "vs", "ANS", "ds", "ano", "uns", "ai", "offs", "anes", "mean", "nan", "ams", "ates", "ats", "asms", "anks", "an", "ks", "ants", "lan"], "i": ["z", "ini", "ib", "zi", "m", "ir", "y", "ti", "ip", "ci", "gi", "ij", "hi", "ki", "phi", "ami", "ie", "id", "di", "ik", "pi", "fi", "qi", "ai", "ii", "xi", "si", "ic", "li", "I", "ia", "x", "mi", "iu", "im"], "tmp": ["sup", "emp", "fake", "max", "obj", "tm", "pot", "mb", "xy", "pkg", "t", "tt", "nt", "etc", "cb", "yy", "perm", "sp", "now", "mk", "mut", "cv", "ot", "term", "mp", "temp", "nb", "tn", "ctx", "comp", "cp", "total", "td", "uf", "cmp", "fac", "tf", "np", "txt", "up", "opp", "amp", "tc", "buff", "qq", "prime", "rt", "proc", "new", "needed"], "j": ["z", "f", "obj", "jl", " iii", "m", "iaz", "ja", "l", "y", "t", "ix", "jp", "k", "ji", "v", "ij", "q", "b", "je", "g", "ie", " ii", " J", "p", "bi", "oj", "kj", "jj", " ja", "aq", "aj", "J", "xi", "si", "o", "uj", "dj", "x", " inj", "bj", "jc"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\n\\ndef myindex(l, s):\\n    if s in l:\\n        return l.index(s)\\n    else:\\n        return len(l)\\n\\ndef main():\\n    S = list(readline()[:-1])\\n    T = list(readline()[:-1])\\n    tmpS = []; tmpT = []\\n    cntS = 0; cntT = 0\\n    flag = True\\n    for i in range(len(S)):\\n        cntS = myindex(tmpS, S[i])\\n        cntT = myindex(tmpT, T[i])\\n        tmpS.append(S[i])\\n        tmpT.append(T[i])\\n        if cntS != cntT:\\n            flag = False\\n            break\\n    if flag:\\n        print('Yes')\\n    else:\\n        print('No')\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "490", "substitutes": {"readline": ["getLine", "readerle", "readse", "readerline", "readingLINE", "readingln", "readingLine", " readlin", " readlines", "Readline", "ReadLINE", "Readle", "readLine", "readinglines", "scanline", "getline", "poplin", "readlin", "ReadLine", "readinglin", "popline", "Readze", "getse", " readLINE", "popLine", " readle", "readle", "readze", "readingline", " readse", "readLINE", " readLine", "popse", "readlines", "getlin", " readln", "readerLine", " readze", "readerze", "scanln", "readln", "scanlin", "Readlines"], "l": ["f", "els", "lit", "ol", "lines", "ld", "ls", "yl", "el", "le", "line", "m", "lv", "t", "lin", "lis", " L", "kl", "len", "r", "il", "v", "lock", "sl", "c", "lt", "ln", "h", "b", "lc", "g", "tl", "ml", "d", "dl", "p", "L", "j", "lp", "pl", "hl", "n", "log", "li", "lf", "nl", "list", "x", "rl", "ll"], "s": ["f", "sts", "str", "sing", "sv", "ls", "ords", "m", "sign", "spec", "rs", "t", "se", "gs", "su", "ssl", "r", "sw", "single", "lower", "v", "sp", " self", "sd", "sl", "c", "hs", "h", "b", "string", "source", "p", " ls", "ss", " sin", "less", " sit", "e", "sb", "sf", "sa", "its", " si", " stat", "short", "n", "sq", "sin", "sk", "south", " se"], "S": ["BS", "SI", "Sl", "Si", "C", "H", "SS", "X", "R", "SL", "SAN", "G", "JS", "SB", "SM", "LS", "PS", "N", "M", "OS", "A", "RS", "INS", "ST", "IS", "E", "O", "SR", "DS", "As", "D", "US", "NS", "Source", "SU", "Is", "SO", "L", "Vs", "TS", "P", "IES", "SH", "AS", "SF", "SE", "VS", "V", "I", "B", "CS", "GS", "SA", "Set", "SQL"], "T": ["Y", "TY", "TR", "Format", "t", "WT", "MT", "W", "N", "LT", "TA", "TO", "ST", "TH", "NT", "TG", "AT", "CT", "L", "TB", "TN", "TM", "IT", "NOTE", "TS", "TI", "RT", "P", "J", "B", "VT", "TE", "JSON", "TT", "GT", "It", "XT", "PT", "TL"], "tmpS": ["tmpCS", " tmpESS", "tempESS", "ntV", "ntCS", " tmpL", " tmpGS", "tmpJS", "bowGS", "tempV", "tmpL", "primeN", "empGS", "empS", "bowJS", "tempN", "ntS", "tempS", "ntT", "tmpGS", "primeL", "primeS", "etcS", "tmpESS", "empN", "bowS", "tempT", "etcT", "etcCS", " tmpN", "tempCS", " tmpJS", "etcV", "empJS", "primeESS", "tmpV", "tmpN", "bowN", "tempL"], "tmpT": ["tmpR", "mpT", "permR", " tmpTT", "mpR", "managedS", "mpN", " tmpTS", "tempR", "managedT", "tmpM", "permTT", "tmpTT", " tmpR", "mpS", "tmpTS", "tempN", "managedTT", "permTS", "tempT", "mpM", "permT", " tmpN", "managedTS", " tmpM", "permN", "tmpN", "tempM", "permS"], "cntS": ["cctA", "cctN", "cncS", " cntL", "CountS", "cncL", "cntM", "cndA", " cNTA", "countL", "cNTS", "cNTC", "cntA", " cntA", "CountL", " cNTL", " cNTN", " cNTS", " cNTP", "cndS", "cntP", "CntL", "CntS", "cntC", "countS", "CountC", "cntN", "cNTN", "cctM", "CntC", "cctS", "cNTA", " cntM", "cNTL", "cncC", "ccountM", "cNTM", "cndL", "cntL", " cntP", "ccountS", "cndN", "ccountP", "countC", "cctP", "cNTP", " cntN", " cNTM", "ccountN", "cctL"], "cntT": ["cNTT", "cctT", "cctN", "ccountDT", "cntTN", "cCtS", "cCtTN", "countR", " cncG", " ccountT", " cntDT", "ctnTN", "cntP", "cctG", " cotN", " cntG", "countT", " ccountDT", "ctnT", "ctnDT", " cncT", "cntN", "cncT", "cncN", "cNTN", "cctR", "cotP", "cNTG", "cntG", " cntR", "cntR", " cotT", " cntP", " cncP", " cotP", "ctnS", " cotR", "cotN", "ccountS", "countN", " cncN", "countP", "ccountT", "cctP", "cotT", " cntN", "cNTP", "cntDT", "cCtDT", "cotR", "cncP", " cntTN", "cncG", "cCtT", " ccountTN", "ccountTN", " ccountS"], "flag": ["bug", "f", "wait", "ld", "offset", "member", "ground", "line", "flags", "sync", "field", "cond", "ret", "lv", "hold", "debug", "len", "compl", "bird", "status", "limit", "follow", "lock", "tag", "condition", "mask", "lag", "store", "group", "gc", "force", " Flag", "stage", "cloud", "leaf", "kill", "join", "bool", "enable", "hide", "fire", "log", "print", "set", "Flag", "sav", "list", "save", "submit", "stop", "count"], "i": ["f", "io", "ini", "ri", "zi", "m", "uri", "y", "t", "chain", "ix", "this", "ti", "info", "key", "ip", "point", "k", "ji", "v", "gi", "ij", "c", "ori", "index", "q", "b", "ami", "slice", "ind", "id", "di", "p", "bi", "multi", "j", "pi", "exp", "vi", "it", "xi", "si", "iri", "batch", "ic", "I", "li", "me", "x", "ui", "mi", "im"]}}
{"code": "def resolve():\\n    s = input()\\n    display_str = \"\"\\n    for i in range(len(s)):\\n        if s[i] == \"B\":\\n            if len(display_str) != 0:\\n                display_str = display_str[0:-1]\\n        else:\\n            display_str += s[i]\\n    print(display_str)\\n\\nresolve()", "target": "503", "substitutes": {"s": ["ps", "f", "sts", "str", "sv", "ws", "ls", "plays", "m", "fs", "a", "l", "rs", "t", "gs", "xs", "ins", "ms", "ns", "r", "v", "sp", "sl", "c", "hs", "h", "q", "b", "eds", "gets", "tests", "S", "csv", "p", "ains", "ss", "less", "ds", "aunts", "parts", "sb", "its", "ses", "n", "abs", "bs", "sq", "w", "ats", "st", "ts", "qs", "js"], "display_str": [" display_st", "displayderstr", "displayderiter", "displayderinst", "available_str", "displaymedstr", "display_iter", "summary_ret", "render_seq", "summaryfulstr", "summary_str", "displayfulnext", "display___str", "displayfulinst", "displayedStr", "displaymedstring", "Display_Str", "display_desc", "display_inst", "display_seq", "display_url", "display_stable", "summary_Str", "display___stable", "Display_list", "available_body", "available_url", "change_stable", "displayifynext", "displayedlist", "display___arr", "display___desc", "displayedinst", "availablelystring", "display_Str", "display_st", "displayfulret", "displaymedurl", "displayfullist", "display___st", "displaylystr", "displayedstr", "displayfulstr", "displayifyret", "display_dr", "available_string", "availablelyurl", "render_iter", "displayderseq", "display_arr", "Display_inst", "change_dr", "render_inst", "availablelybody", "display_list", "displaylybody", "displaymedbody", "display_ret", "display_body", "render_str", "change_str", "displaylyurl", "display_next", "summaryfulnext", "availablelystr", "display_string", "displayfulStr", "change_desc", "displayifyStr", "summaryfulStr", "displaylystring", "displayifystr", "summaryfulret", "summary_next", "Display_str", " display_arr", "display___dr"], "i": ["f", "ini", "zi", "m", "y", "ix", "iy", "ti", "key", "\u0438", "r", "k", "ji", "v", "gi", "json", "ij", "ori", "index", "q", "b", "yi", "ind", "id", "di", "p", "bi", "vi", "j", "pi", "ai", "it", "ii", "iri", "si", "batch", "ic", "xi", "I", "li", "me", "x", "mi", "im"]}}
{"code": "n = int(input())\\nA = list(map(int,input().split()))\\nMOD = 10**9+7\\n\\ncnt = [0] * (n+1)\\ncnt[0] = 3\\n\\nres = 1\\nfor i,a in enumerate(A):\\n  res *= cnt[a]\\n  res %= MOD\\n  cnt[a] -= 1\\n  cnt[a+1] += 1\\n\\nprint(res % MOD)", "target": "560", "substitutes": {"n": ["f", "nw", "nn", "m", "l", "nt", "t", "number", "s", "N", "len", "ns", "mn", "k", "r", "v", "na", "c", "sn", "q", "b", "h", "nu", "nb", "num", "d", "p", "j", "network", "ne", "gn", "np", "nc", "w", "no", "x"], "A": ["Y", "K", "AA", "H", "C", "X", "AC", "R", "G", "AV", "N", "M", "What", "CA", "LA", "JA", "NA", "S", "D", "AT", "AF", "L", "GA", "An", "P", "T", "AS", "The", "AB", "AP", "V", "J", "I", "B", "Answer", "Ax", "SA"], "MOD": ["TR", "K", "UT", "LOG", "ALL", "METHOD", "UL", "ED", "R", "MT", "N", "M", "ERROR", "MAX", "MED", "SIZE", "FORM", "MAG", "RO", "REM", "ID", "RE", "VER", "mod", "OD", "DX", "OK", "TM", "Mod", "AD", "RED", "UN", "JUST", "REG", "MODE", "MS", "MAN", "RM", "NUM", "VERSION", "VALUE", "DEC", "PUT", "MD", "Mods", "LL"], "cnt": ["acnc", "ncpt", "lcdef", "acust", " cnd", "ncdef", "acnt", "Cpt", "Cnd", "acpt", "lcnd", "cnc", "rcpt", "CNT", "acct", "cdef", "Cnc", "acNT", " cpt", "cNT", "lcCount", " cCount", "Cct", "ncCount", "cCount", " cdef", "Cnt", "ncNT", "cust", "rcnc", "rcnt", "lcnt", "rcNT", "ncnd", "Cust", "ncnt", " cNT", " cust", " cnc", "cnd", "cct", " cct", "cpt"], "res": ["rand", "ps", "ress", "rest", "max", "vec", "out", "sum", "des", "reset", "rep", "ret", "nt", "cons", "red", "pos", "result", "ms", "s", "r", "sol", "gr", "resp", "status", "resh", "mod", "sim", "re", "id", "num", "mem", "crit", "p", "j", "results", "RES", "rem", "pres", "rel", "resolution", "Res", "req", "prime", "resource", "pro"], "i": ["f", "m", "y", "t", "r", "at", "v", " j", "ij", "c", "index", "b", "g", "ind", "p", "j", "e", "ai", "aa", "o", "ma", "I", "w", "ab", "x"], "a": ["ba", "am", "ae", "ta", "acc", "y", "sta", "to", "af", "au", "ga", "ca", "r", "at", "la", "pa", "na", "aw", "c", "index", "ea", "era", "b", "aux", "area", "va", "alpha", "da", "ao", "j", "pi", "act", "ai", "sa", "aa", "aj", "ac", "art", "o", "ma", "ia", "ab", "aaa", "x", "ach", "an"]}}
{"code": "n = int(input())\\na = int(input())\\nsquare_num = n * n\\nprint(square_num - a)", "target": "379", "substitutes": {"n": ["z", "f", "nn", "m", "l", "y", "t", "nt", "number", "name", "all", "N", "i", "ns", "mn", "A", "k", "v", "na", "c", "sn", "q", "b", "h", "an", "g", "cn", "nu", "nb", "num", "d", "p", "j", "pi", "ne", "net", "nor", "np", "nan", "nc", "o", "w", "nl", "x"], "a": ["ba", "apa", "ta", "ae", "sta", "au", "ga", "xa", "i", "ca", "A", "pa", "ea", "an", "b", "aux", "area", "va", "alpha", "da", "ao", "j", "ai", "sa", "aa", "al", "ac", "ma", "ia", "ab", "ar", "am", "aff"], "square_num": ["square_nom", "Square_number", "square_index", "squaremonmon", "square_number", "Square_mon", "Square_index", "square2number", "squaremonindex", " square_nom", "square2mon", "square2nom", "square2num", "squaremonnum", "square_mon", " square_number", "Square_num", " square_mon", "squaremonnumber"]}}
{"code": "n = input()\\n\\nn_sum = 0\\nfor i in range(len(n)):\\n  n_sum += int(n[i])\\n\\nprint('Yes' if int(n)%n_sum == 0 else 'No')", "target": "161", "substitutes": {"n": ["f", "nn", "nw", "normal", "m", "a", "node", "l", "y", "nt", "t", "number", "name", "s", "N", "shape", "fn", "ns", "nm", "en", "v", "na", "c", "ren", "ng", "sn", "ln", "b", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "j", "ne", "gn", "np", "nc", "o", "w", "nl", "x", "data", "ll"], "n_sum": ["on_sim", "n_total", " n_Sum", "n_max", "n1max", "n1Sum", "n_sim", "n__num", "n_alpha", "n_Sum", "n__Sum", "on_total", "n_num", "n__sum", "n_hash", " n_hash", "n1sum", "on_sum", "n1alpha", " n_alpha", "n__hash", " n_num", " n_max"], "i": ["ini", "zi", "m", "y", "ix", "ti", "s", "key", "\u0438", "k", "ji", "gi", "v", "ij", "c", "ori", "index", "q", "b", "yi", "ind", "id", "di", "multi", "j", "pi", "qi", "ai", "ii", "batch", "si", "xi", "ic", "li", "I", "me", "x", "ui", "mi", "im"]}}
{"code": "a,b,c,d=map(int,input().split())\\nans=0\\nfor i in range(201):\\n    if a<=i<b and c<=i<d:\\n        ans+=1\\nprint(ans)\\n", "target": "146", "substitutes": {"a": ["z", "f", "ba", "am", "ae", "ta", "l", "af", "au", "ga", "ax", "A", "ca", "la", "at", "ea", "g", "ak", "area", "va", "p", "alpha", "ao", "oa", "e", "sa", "ai", "aq", "aa", "al", "ac", "art", "ma", "ace", " A", "ab", "x", "ar", "ach", "an"], "b": ["f", "rb", "ba", "ib", "mb", "be", "l", "y", "bc", "by", "cb", "fb", "A", "ca", "db", " ba", "nb", "lib", "bt", "bi", "br", "abb", "bf", "sb", "gb", "bo", "bis", "AB", "ob", "ub", "bs", "u", "bot", "B", "ab", "bb", "base", "eb"], "c": ["z", "f", "abc", "mc", "C", "cut", "cs", "l", "bc", "cf", "con", "ci", "cin", "rc", "cb", "ca", "k", "ctrl", "co", "arc", "city", "lc", "g", "cc", "ct", "ce", "cos", "can", "cp", "ec", "cd", "dc", "uc", "fc", "cache", "ac", "n", "cu", "u"], "d": ["f", "des", "m", "df", "red", "bd", "t", "dos", "dict", "dd", "r", "dt", "div", "db", "sd", "dq", "h", "dis", "g", "D", "di", "du", "de", "do", "p", "da", "pd", "dir", "ds", "td", "e", "cd", "dc", "dp", "n", "u", "dra", "xd"], "ans": ["rors", "ens", "cas", "anon", "sum", "aned", "AN", "oss", "ran", "cs", "rs", "amps", "iann", "s", "ins", "anas", "ms", "aus", "outs", "ons", "ann", "acs", "aps", "aos", "arts", "ents", "ums", "urs", "rans", "eds", "posts", " means", "terms", "ANS", "anus", "nas", "offs", "ams", "ads", "ras", "ats", "ros", "anks", "an", "ks", "ants", "lan", "irms"], "i": ["ini", "zi", "\u00ed", "ix", "ti", "s", "\u0438", "ci", "ip", "ji", "v", "gi", "ij", "hi", "oi", "ki", "q", "phi", "ami", "yi", "ind", "id", "di", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "ic", "u", "I", "li", "ia", "ql", "x", "mi", "iu", "im", "item"]}}
{"code": "def check(n,k,p,T):\\n    i = 0\\n    for j in range(k):\\n        s = 0\\n        while(s+T[i] <= p):\\n            s = s+T[i]\\n            i = i+1\\n            if (i==n):\\n                return n\\n    return i\\n\\n\\ndef solve(n,k,T):\\n    left =0\\n    right = 100000 * 10000\\n    mid = 0\\n    while (right -left > 1):\\n        mid = (left + right)//2\\n        v = check(n,k,mid,T)\\n        if (v >= n):\\n            right = mid\\n        else:\\n            left = mid\\n    return right\\n\\nlis=[]\\na = input()\\n(nn,kk)=list(map(int,a.split()))\\nfor i in range(nn):\\n    lis.append(int(input()))\\nans = solve(nn,kk,lis)\\nprint(ans)", "target": "139", "substitutes": {"n": ["z", "nw", "yn", "m", "node", "l", "y", "nt", "t", "number", "name", "N", "len", "ns", "r", "nm", "en", "na", "c", "ng", "sn", "q", "an", "ln", "g", "cn", "nu", "nb", "rn", "num", "d", "dn", "nil", "ne", "net", "int", "np", "nan", "nc", "o", "no", "nl", "x", "ll", "new"], "k": ["K", "m", "kr", "kt", "kh", "uk", "ka", "y", "t", "ck", "kl", "ikk", "key", "r", "ke", "kan", "c", "mk", "ki", "q", "g", "kn", "ak", "ijk", "ik", "km", "kj", "ek", "kw", "tk", "o", "u", "sk", "ko", "x", "ku", "ks", "ack"], "p": ["ps", "pe", "per", "pt", "m", "par", "l", "t", "pos", "pb", "pp", "ip", "r", "jp", "tp", "sp", "pa", "vp", "q", "power", "pi", "ping", "cp", "lp", "P", "pc", "u", "x", "pn", "pro"], "T": ["Y", "TR", "K", "UT", "H", "C", "Fig", "Target", "F", "Th", "R", "t", "WT", "W", "G", "MT", "Table", "N", "M", "LT", "A", "Type", "PO", "TH", "S", "DT", "FT", "AT", "CT", "L", "TP", "TN", "TM", "P", "TS", "Q", "This", "J", "Z", "V", "I", "B", "VT", "Test", "TF", "TT", "GT", "It", "TV", "XT", "PT", "TL"], "i": ["f", "z", "ini", "zi", "m", "l", "y", "t", "ix", "ti", "info", "ip", "ci", "r", "ji", "im", "gi", "ij", "c", "hi", "index", "ki", "phi", "yi", "ind", "id", "di", "ik", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "u", "set", "x", "mi", "iu", "multi"], "j": ["z", "f", "y", "name", "ix", "ip", "key", "jp", "r", "ji", "ij", "h", "q", "b", "g", "ind", "ijk", " ii", "id", "kj", "jj", "J", "o", "uj", "I", "x"], "s": ["ps", "sup", "f", "sv", "ls", "m", "spec", "l", "y", "t", "se", "gs", "rs", "ins", "os", "ns", "r", "single", "sp", "sym", "c", "h", "q", "b", "start", "g", "S", "sim", "ss", "less", "ds", "sb", "sa", "ims", "short", "span", "si", "w", "sin", "ats", "south", "us", "space", "x", "ts", "js"], "left": ["min", "offset", "level", "out", "le", "top", "m", "only", "shift", "l", "floor", "old", "back", "Left", "lb", "lock", "length", "place", "lt", "hi", "ul", "start", "long", "lo", "L", "low", "end", "local", "pl", "last", "half", "inner", "main", "lex", "small", "ell", "li", "nl", "x", "list", "lower", "st"], "right": ["rest", "max", "out", "top", "recent", "m", "off", "only", "range", "through", "ran", "R", "red", "all", "full", "l", "t", "close", "row", "back", "result", "ax", "high", "r", "res", "upper", "root", "tx", "ul", "over", "long", "start", "rights", "random", "th", "re", "id", "rev", "d", "rew", "next", "rx", "just", "Right", "end", "ro", "half", "short", "first", "w", "rem", "best", "reverse", "correct", "rel", "x", "nl", "rt", "after"], "mid": ["rand", "min", "med", "max", "offset", "le", "tm", "m", "pad", "fine", "grid", "my", "l", "middle", "ms", "dim", "len", "high", "mn", "div", "lim", "perm", "hi", "mk", "mask", "start", "nd", "mod", "lo", "ind", "id", "medium", "Mid", "end", "low", "mt", "late", "rid", "wid", "half", "main", "mer", "mr", "part", "pid", "mm", "x", "mi", "multi", "lower", "md"], "v": ["z", "f", "vo", "sv", "vv", "m", "qv", "l", "y", "t", "lv", "r", "value", "vp", "c", "b", "g", "val", "tv", "nv", "vs", "vi", "pi", "vt", "uv", "V", "o", "w", "u", "vr", "x", "vc", "cv"], "lis": ["details", "atis", "els", "lines", "ls", "xes", "lus", "nets", "alis", "pins", "l", "ais", "lia", "ils", "gs", "lies", "xs", "ms", "lik", "aus", "los", "ns", "lems", "lands", "idis", "es", "mes", "ians", "ills", "dis", "alities", "yi", "dl", "ois", "leys", "lp", "ols", "lins", "sels", "isi", "alist", "bis", "fits", "nl", "als", "list", "tis", "lists"], "a": ["apa", "ae", "ta", "att", "sta", "ga", "au", "xa", "ca", "A", "at", "la", "pa", "ea", "an", "b", "tta", "area", "va", "alpha", "da", "oa", "\u00e4", "sa", "ai", "ya", "ata", "aa", "al", "ac", "ma", "ia", "ab", "aaa", "ar", "am"], "nn": ["nw", "yn", "hn", "nt", "nr", "ns", "mn", "nm", "nex", "na", "ln", "sn", "nd", "wn", "cn", "kn", "nu", "nb", "ny", "rn", "tn", "nv", "dn", "ne", "inn", "gn", "nz", "nan", "nc", "nl", "NN", "pn"], "kk": ["dk", "ilk", "kas", "kr", "hn", "kt", "kh", "uk", "KK", "ka", "ck", "kl", "ikk", "cks", "kid", "kar", "mk", "ki", "kn", "ak", "ijk", "wk", "ik", "kok", "cki", "km", "kj", "ek", "kies", "trak", "ky", "tk", "sk", "ku", "ks", "yk"], "ans": ["ens", "rors", "cas", "aned", "ran", "idents", "amps", "iann", "ars", "anas", "aus", "outs", "ns", "ann", " Ans", "aos", "rets", "ians", "ums", "rans", "ays", "ands", "eds", "posts", "ations", "ANS", "leans", "anes", "mails", "les", "ats", "ados", "ros", "ions", "an", "ks", "ants", "olds", "lan", "irms"]}}
{"code": "import math\\nN=int(input())\\na=list(map(int,input().split()))\\nb=math.gcd(a[0],a[1])\\nfor i in range(N-1):\\n    b=math.gcd(a[i+1], b)\\nprint(b)\\n", "target": "534", "substitutes": {"N": ["Num", "K", "NE", "C", "AN", "R", "CNN", "NB", "NI", "M", "NV", "NR", "CN", "A", "Length", "Len", "NA", "Size", "Count", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "No", "P", "Q", "GN", "n", "Z", "V", "I", "NO", "NN", "Network", "NH"], "a": ["ba", "abc", "apa", "am", "ae", "att", "another", "l", "all", "sta", "ga", "au", "A", "ca", "input", "la", "at", "na", "c", "es", "ea", "g", "aux", "area", "da", "alpha", "app", "act", "oa", "parts", "aka", "isa", "sa", "aa", "up", "abs", "ac", "ma", "ia", "ab", "eas", "aaa", "an", "data"], "b": ["f", "rb", "ba", "ib", "m", "mb", "blue", "be", "l", "bc", "bp", "to", "back", "bg", "bh", "fb", "cb", "buffer", "db", "v", "birth", "c", "h", "g", "wb", "nb", "bank", "d", "bt", "bi", "br", "j", "bin", "sb", "bu", "gb", "beta", "bis", "ob", "bs", "w", "u", "B", "ab", "bb", "body", "bar", "base", "eb", "auto"], "i": ["z", "ini", "zi", "uri", "m", "ix", "ti", "info", "ip", "ci", "ji", "gi", "v", "ij", "hi", "major", "phi", "ind", "di", "bi", "j", "pi", "qi", "ai", "ii", "xi", "si", "n", "batch", "uni", "u", "li", "I", "me", "x", "ui", "mi", "im"]}}
{"code": "s = int(input())\\na = 10**9\\nif s == 10**18:\\n    print(0, 0, a, 0, 0, a)\\nelse:\\n    x3 = a-(s%a)\\n    y3 = (s+x3)//a\\n    print(0, 0, a, 1, x3, y3)", "target": "638", "substitutes": {"s": ["z", "f", "ps", "ls", "sc", "m", "fs", "l", "rs", "t", "y", "gs", "xs", "cs", "ms", "ins", "i", "os", "ns", "r", "v", "sp", "sd", "es", "c", "h", "b", "g", "S", "d", "p", "ss", "ds", "e", "sa", "sb", "n", "si", "abs", "bs", "w", "sq", "ats", "south", "x", "ts", "ar", "qs", "js"], "a": ["z", "f", "ba", "apa", "m", "am", "ta", "ae", "l", "y", "t", "sta", "to", "au", "af", "ga", "i", "A", "ca", "div", "at", "k", "v", "r", "length", "c", "index", "ea", "h", "b", "g", "mod", "d", "power", "p", "alpha", "da", "ao", "exp", "pi", "j", "oa", "e", "ai", "sa", "aa", "ac", "n", "o", "ma", "w", "u", "ia", "abs", "ab", "aaa", "x", "ar", "an"], "x3": ["xx43", "y2", "dx53", " x2", "x0", " x253", "ix3", "ox2", "y0", "v3", "ix2", " x003", "ox003", "xx53", "ix003", "ox253", " x43", "dx3", "v2", "dx43", "x253", "xx3", "v03", "x003", " x53", " x03", "dx2", "ix253", "x03", "v0", "ox3", "y03", "x2", " x0", "x43", "x53", "xx2"], "y3": ["sky3", "yThree", "sky1", "y35", "h35", " y1", " y35", " yThree", "h3", "ny1", "ny35", "ny3", "z53", "sky43", "y53", "z43", "y43", "z1", "sky53", " y43", "h1", "hThree", "nyThree", " y53", "z3", "y1"]}}
{"code": "import math\\nA, V = map(int, input().split())\\nB, W = map(int, input().split())\\nT = int(input())\\nD = abs(A - B)\\nD2 = (V - W) * T\\nprint(\"YES\" if D <= D2 else \"NO\")", "target": "349", "substitutes": {"A": ["Y", "AR", "AA", "Ar", "H", "C", "X", "AC", "Al", "a", "R", "IA", "AV", "CA", "AL", "LA", "U", "Av", "S", "As", "AU", "AT", "AF", "L", "An", "At", "P", "AH", "AS", "AE", "AB", "AP", "I", "Ax", "SA"], "V": ["Y", "VO", "VB", "VD", "H", "C", "R", "G", "AV", "N", "M", "v", "U", "S", "E", "Va", "VM", "L", "VC", "VI", "VW", "P", "GV", "J", "Z", "VS", "UV", "VT", "Iv", "VA", "VE"], "B": ["Y", "BE", "BB", "BS", "VB", "DB", "C", "Al", "EB", "RB", "Ber", "OB", "SB", "NB", "BO", "WB", "BA", "IB", "BC", "BI", "UB", "Bar", "b", "GB", "TB", "LB", "J", "AB", "BT", "BW", "BL", "CB", "BF", "BR", "Bs"], "W": ["Y", "H", "WS", "F", "R", "WW", "G", "WT", "N", "M", "WB", "WE", "WER", "Ws", "SW", "WP", "WC", "WI", "WA", "DW", "Win", "RW", "VW", "CW", "Z", "w", "BW", "We", "EW", "WH", "MW", "Web", "Wh"], "T": ["Y", "Time", "K", "H", "C", "X", "F", "R", "t", "G", "WT", "MT", "N", "M", "LT", "TA", "U", "TO", "TH", "S", "E", "L", "TB", "TN", "TM", "P", "TS", "Q", "J", "Z", "I", "VT", "TX", "TT", "GT"], "D": ["Y", "DN", "DL", "DB", "PD", "C", "X", "F", "R", "Do", "G", "DF", "DD", "FD", "N", "M", "DA", "S", "E", "O", "DS", "d", "L", "TD", "P", "DR", "Q", "DM", "DP", "Z", "I", "DE", "DC", "MD", "DO"], "D2": ["D3", "S2", "P3", "DB", "R3", "RB", "S3", "P02", " D1", " DB", "S1", "d1", "D02", " D3", " D02", "d2", "PB", "d3", "R2", "P2", "R02", "D1"]}}
{"code": "while True:\\n    n = list(input())\\n    if n[0] == '0':\\n        break\\n    sum = 0\\n    for i in n:\\n        sum += int(i)\\n    print(sum)", "target": "491", "substitutes": {"n": ["nn", "nw", "yn", "names", "m", "l", "pan", "t", "nt", "name", "nr", "s", "N", "fn", "ns", "nm", "v", "na", "c", "ng", "sn", "ln", "cn", "nu", "nb", "tn", "rn", "nv", "d", "next", "p", "nil", "j", "ne", "nor", "gn", "np", "nan", "nc", "nants", "nl", "non", "x", "pn"], "sum": ["tu", "add", "max", "med", "tmp", " summed", "comment", "hum", "score", "Sum", "su", "result", "output", "prof", "ot", "post", "share", "sim", "temp", "num", "mem", "cos", "size", "ss", "ut", "sam", "zero", "total", "sa", "vol", "fac", "np", "mean", "average", "si", "weight", "cum", "summary", "set", "us", "sat", "um", "dot", " SUM", "hash", "cost", "hist", "count", "new"], "i": ["io", "ei", "ini", "zi", "\u00ed", "m", "ti", "ip", "ci", "ji", "gi", "v", "gu", "ij", "hi", "oi", "ki", "q", "yi", "ind", "di", "bi", "pi", "qi", "ai", "int", "ii", "iri", "si", "xi", "o", "u", "li", "I", "ic", "ui", "mi", "iu"]}}
{"code": "#ABC 141\\nS =input()\\nW =[\"Sunny\", \"Cloudy\", \"Rainy\"]\\nfor i,w in enumerate(W):\\n    if w==S:\\n        print(W[(i+1)%3])\\n        exit()", "target": "183", "substitutes": {}}
{"code": "def sep():\\n    return map(int,input().strip().split(\" \"))\\ndef lis():\\n    return list(sep())\\n\\na,b=sep()\\nfor i in range(1,10005):\\n    if (i*8)//100==a and (i*10)//100==b:\\n        print(i)\\n        quit()\\nprint(-1)", "target": "418", "substitutes": {"a": ["ba", "ama", "apa", "ap", "ta", "ae", "l", "y", "t", "sta", "ga", "au", "A", "ca", "la", "at", "na", "c", "ea", "an", "tta", "area", "p", "va", "alpha", "ao", "oa", "aka", "sa", "ai", "aa", "al", "ac", "n", "ma", "u", "oo", "ia", "ab", "aaa", "x", "ar", "ach", "am", "ack"], "b": ["f", "rb", "ba", "ib", "be", "l", "y", "t", "bc", "bp", "s", "cb", "fb", "r", "v", "db", "c", "g", "nb", "d", "p", "bi", "j", "bf", "e", "sb", "bo", "bis", "n", "bs", "u", "B", "ab", "bb", "base", "eb"], "i": ["f", "ini", "ei", "zi", "m", "cli", "ix", "ti", "s", "ip", "ji", "gi", "v", "ij", "hi", "oi", "index", "ki", "ori", "phi", "yi", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "n", "li", "u", "I", "x", "ui", "mi", "iu", "im"]}}
{"code": "from collections import Counter,defaultdict,deque\\nfrom heapq import heappop,heappush,heapify\\nimport sys,bisect,math,itertools,fractions,pprint\\nsys.setrecursionlimit(10**8)\\nmod = 10**9+7\\nmod2 = 998244353\\nINF = float('inf')\\ndef inp(): return int(sys.stdin.readline())\\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\\n\\nn = inp()\\na = list(map(float,input().split()))\\ndp = [[0] * (n+5) for i in range(n+5)]\\ndp[0][0] = 1\\nfor i in range(n):\\n    for j in range(n+1):\\n        if j == 0:\\n            dp[i+1][j] = dp[i][j] * (1-a[i])\\n            continue\\n        dp[i+1][j] = dp[i][j-1] * a[i] + dp[i][j] * (1-a[i])\\nprint(sum(dp[n][n//2+1:]))\\n# pprint.pprint(dp)", "target": "437", "substitutes": {"mod": ["add", "min", "m", "spec", "module", "div", "circ", "scale", " Mod", "sim", "temp", "ind", "id", "mult", "fun", "ident", "Mod", "mode", "fac", "od", "MOD", "dec", "mag", "tab", "grow", "prime", "mods", "base"], "mod2": ["mod1", " mod3", "mod3", "MOD1", "MOD2", "Mod2", "Mod1", "MOD3", "Mod3", "Mod02", "MOD02", " mod02", " mod1", "mod02"], "INF": [" INInf", "INEFR", "INEInf", "EXFR", "INFR", "INInf", "EXInf", "INEFIN", " INFIN", "INFIN", "EXFIN", " INFR", "INEF", "EXF"], "n": ["z", "f", "nn", "out", "nia", "names", "m", "l", "y", "nt", "t", "name", "s", "N", "len", "ns", "r", "mn", "fn", "k", "v", "en", "nm", "na", "c", "long", "ln", "sn", "h", "b", "an", "g", "ng", "cn", "nu", "yes", "nb", "num", "size", "d", "p", "dn", "network", "ne", "none", "net", "it", "gn", "np", "nan", "nc", "o", "w", "no", "nl", "x", "on"], "i": ["z", "io", "ini", "ei", "ri", "zi", "m", "cli", "l", "y", "this", "ix", "ti", "info", "ip", "ci", "ji", "gi", "v", "ij", "c", "hi", "index", "h", "q", "phi", "ami", "yi", "ie", "ind", "id", "di", "ik", "d", "p", "bi", "multi", "pi", "ai", "it", "int", "ii", "xi", "si", "o", "ic", "li", "u", "ia", "I", "iter", "x", "ui", "mi", "iu", "im"], "a": ["ba", "apa", "ap", "m", "ae", "att", "all", "t", "au", "ga", "s", "pp", "A", "ca", "at", "la", "pa", "na", "aw", "c", "ea", "an", "b", "area", "d", "eps", "p", "alpha", "da", "app", "act", "pi", "e", "sa", "ai", "aa", "ac", "ad", "ma", "w", "ia", "ab", "aaa", "am", "data", "ack"], "dp": ["ps", "deb", "adr", "params", "decl", "df", "pkg", "wd", "gp", "pb", "pp", "dd", "jp", "tp", "dt", "div", "db", "pipe", "dx", "vp", "pa", "dq", "pm", "csv", "deep", "di", "dm", "pd", "d", "dl", "p", "dep", "ds", "lp", "tap", "cp", "rpm", "dial", "cd", "dc", "np", "DP", "dh", "bps", "delay", "px", "dj", "dr", "wp", "hp"], "j": ["z", "f", "str", "obj", "ion", "jl", "m", "ja", "y", "t", "fr", "jp", "k", "ji", "opt", "v", "r", "json", "ij", "h", "q", "b", "job", "g", "ie", "di", "p", "bi", "br", "oj", "kj", "it", "jj", "jump", "aj", "J", "si", "o", "ju", "uj", "dj", "li", "x", "bj", "js", "jc"]}}
{"code": "s = raw_input()\\n\\nSt1, St2 = [], []\\nsumv = 0\\n\\nfor i in range(len(s)):\\n    if s[i] == '\\\\':\\n        St1.append(i)\\n    elif s[i] == '/' and len(St1) > 0:\\n        j = St1.pop()\\n        a = i-j\\n        sumv += a\\n        while len(St2) > 0 and St2[-1][0] > j:\\n            a += St2.pop()[1]\\n\\n        St2.append([j, a])\\n\\nSt2.insert(0, [0, len(St2)])\\n\\nprint sumv\\nprint ' '.join(map(lambda x: str(x[1]), St2))", "target": "394", "substitutes": {"s": ["z", "f", "ps", "sts", "str", "ings", "ws", "ls", "m", "ares", "fs", "rates", "cs", "rs", "t", "y", "gs", "xs", "ms", "ns", "r", "input", "v", "sp", "strings", "aces", "hs", "c", "gins", "h", "q", "b", "tests", "g", "ers", "S", "bits", "string", "ges", "ches", "p", "ains", "less", "ds", "parts", "erences", "e", "ashes", "its", "ses", "n", "abs", "bs", "w", "bes", "ats", "ates", "x", "ts", "qs", "js"], "St1": ["st3", " St9", "Chain1", "ST3", "Str0", "ST9", "Chain2", "Str3", "st1", "Form2", "St9", "st0", "Str2", "St3", "Chain3", "Form9", "St0", "ST0", " St3", "Form3", " St0", "ST2", "Str1", "Form1", "ST1", "st2", "Str9"], "St2": ["Chain4", "st3", "Chain1", "Str02", "ST3", "Stack4", "Str0", "ST4", "Chain2", "StrGe", "St4", "Str3", "st1", "Stack0", "st4", " StGe", "St02", "Str2", "Str4", "St3", "Chain02", "Stacks", "Stack2", "ST02", "St0", "ST0", " St3", " St0", "ST2", "StGe", "Str1", "STGe", "STs", "ST1", "Strs", "Stack1", "st2", "Sts", " St4"], "sumv": ["umuv", "Sumvd", "umv", " sumsvd", "Sumvs", "sumvd", " sumvd", "sumuv", " sumsv", "cumv", " sumvs", "SumV", "umV", " sumV", "sumvs", " sumuv", "cumvs", "cumV", "Sumuv", " sumsV", "Sumv", "sumV"], "i": ["z", "io", "ini", "zi", "m", "l", "y", "ix", "ti", "ip", "\u0438", "k", "ji", "gi", "v", "ij", "index", "oi", "ki", "b", "yi", "ind", "id", "di", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "iri", "li", "I", "me", "x", "ui", "mi", "iu", "multi"], "j": ["z", "f", "jl", "m", "ja", "l", "y", "t", "jp", "k", "ji", "ch", "r", "v", "json", "Ja", "ij", "c", "h", "q", "b", "g", "jac", "d", "p", "bi", "br", "kj", "jas", "e", "it", "jj", "jump", "aj", "J", "n", "o", "ju", "uj", "dj", "u", "x", "js", "jc"], "a": ["z", "ba", "apa", "fa", "m", "ta", "ae", "ka", "y", "t", "au", "ga", "xa", "A", "ca", "at", "la", "v", "pa", "na", "c", "wa", "ea", "an", "h", "b", "area", "p", "va", "alpha", "da", "ao", "oa", "sa", "ai", "aa", "n", "ac", "o", "sha", "u", "w", "ia", "ma", "ab", "aaa", "x", "ar", "am", "ova"]}}
{"code": "n, m, d = [int(_) for _ in input().split()]\\n\\nif d == 0:\\n  print((m - 1) / n)\\nelse:\\n  print((m - 1) * 2 * (n - d) / (n * n))", "target": "572", "substitutes": {"n": ["z", "f", "nn", "a", "l", "nt", "t", "number", "s", "N", "i", "fn", "ns", "mn", "nm", "len", "k", "r", "v", "na", "c", "ln", "sn", "h", "q", "nd", "g", "b", "cn", "nu", "nb", "num", "size", "p", "dn", "j", "ne", "e", "np", "nc", "o", " N", "non", "x", "norm"], "m": ["f", "gm", "mc", "l", "y", "t", "sm", "ms", "M", "i", "mn", "r", "k", "v", "perm", "c", "mk", "pm", "h", "q", "b", "g", "mp", "dm", "num", "p", "man", "j", "mt", "mo", "mr", "o", "mm", "mi", "cm", "md"], "d": ["z", "f", "diff", "df", "l", "t", "s", "dd", "i", "den", "r", "dt", "v", "sd", "dx", "c", "dq", "h", "q", "b", "nd", "g", "D", "di", "num", "pd", "du", "p", "dm", "da", "de", "j", "ds", "e", "ad", "w", "md"], "_": ["f", "out", "tmp", "line", "my", "l", "all", "t", "name", "y", "ix", "ip", "r", "k", "msg", "un", "v", "na", "length", "c", "h", "post", "b", "q", "g", "val", "id", "ml", "num", "p", "km", "j", "mt", "none", "int", "up", "o", "w", "non", "new"]}}
{"code": "X,Y = [int(i) for i in input().split()]\\nif X%Y!=0:\\n  print(X)\\nelse:\\n  print(-1)", "target": "396", "substitutes": {"X": ["TY", "UX", "K", "Data", "C", "MX", "R", "W", "XY", "Index", "N", "M", "A", "OX", "S", "DX", "E", "O", "D", "Cross", "EX", "Xi", "L", "GE", "P", "Q", "Value", "T", "XP", "J", "XX", "Z", "V", "I", "B", "IX", "VALUE", "TX", "XT", "IN"], "Y": ["TY", "AY", "ET", "CH", "HY", "ORY", "R", "y", "G", "XY", "N", "M", "IB", "YN", "MI", "OW", "OWS", "TH", "RE", "E", "YA", "YE", "YS", "Year", "P", "My", "Q", "T", "GREEN", "J", "Z", "FY", "V", "YC", "I", "B", "BY", "YY", "MY"], "i": ["str", "ini", "io", "ri", "zi", "\u00ed", "a", "l", "y", "t", "ix", "ti", "v", "gi", "ij", "oi", "ki", "b", "phi", "ind", "id", "di", "p", "j", "pi", "qi", "ai", "int", "ii", "xi", "si", "iri", "n", "ic", "I", "li", "iter", "x", "iu"]}}
{"code": "N=int(input())\\nimport sys\\nsys.setrecursionlimit(10**6)\\nT=[[] for _ in range(N)]\\nfor i in range(N-1):\\n    a,b,c=map(int, input().split())\\n    T[a-1].append((b-1,c))\\n    T[b-1].append((a-1,c))\\n\\nQ,K=map(int, input().split())\\nD=[-1]*N\\nD[K-1]=0\\ndef dfs(start, nowd):\\n    to=T[start]\\n    for t in to:\\n        next_node,c=t\\n        if D[next_node]!=-1:\\n            continue\\n        nextd=nowd+c\\n        D[next_node]=nextd\\n        dfs(next_node, nextd)\\ndfs(K-1,0)\\n# print(D)\\nfor i in range(Q):\\n    x,y=map(int, input().split())\\n    print(D[x-1]+D[y-1])\\n", "target": "360", "substitutes": {"N": ["Y", "Num", "NE", "C", "F", "R", "NB", "NI", "M", "NV", "NR", "A", "MN", "NP", "NA", "S", "ND", "Ne", "NT", "NS", "L", "TN", "P", "UN", "GN", "J", "Z", "n", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "T": ["TR", "ET", "C", "F", "R", "WT", "G", "W", "M", "LT", "A", "TA", "OT", "TO", "S", "E", "O", "DT", "NT", "TG", "L", "TP", "TN", "TM", "TD", "TS", "P", "V", "BT", "B", "Tu", "Test", "VT", "TF", "TT", "GT", "TV", "XT", "PT", "TL"], "_": ["pt", " int", "ix", "__", " __", "ct", "val", " l", " x", " k", "x"], "i": ["z", "l", "y", "ite", "ix", "ti", "ci", "k", " j", "ind", "id", " ii", "p", "j", "e", " I", "it", "ii", "n", "I", "ia", "iter", "x"], "a": ["f", "ba", "ap", "m", "am", "ae", "be", "sta", "ga", "au", "ax", "A", "r", "ca", "at", "ea", "g", "ak", "ami", "d", "va", "p", "alpha", "j", "oa", "e", "sa", "ai", "aa", "aj", "ac", "ma", "ia", "ab", "aaa", "ar", "an"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "bc", "bp", "cb", "fb", "r", "v", "db", "h", "g", "nb", "bi", "br", "j", "bf", "e", "bu", "sb", "gb", "bo", "bis", "n", "o", "bs", "u", "B", "ab", "bb", "bar", "eb"], "c": ["f", "sc", "C", "cr", "cs", "l", "bc", "y", "cf", "s", "ci", "cb", "cin", "r", "ca", "ch", "rc", "v", "k", "co", "h", "arc", "lc", "g", "gc", "ct", "cc", "ce", "d", "cos", "can", "p", "cp", "ec", "com", "e", "cd", "dc", "n", "ac", "cy", "u", "tc", "cu", "w", "cm"], "Q": ["Y", "H", "C", "X", "F", "R", "G", "W", "Ni", "Next", "M", "U", "q", "S", "E", "O", "L", "TN", "QB", "P", "J", "Z", "V", "I", "B", "NC", "Qu", "IX", "UE"], "K": ["Y", "KA", "KN", "PK", "H", "C", "KT", "X", "F", "KK", "R", "SK", "G", "W", "M", "k", "KR", "KI", "Mask", "KS", "TH", "S", "E", "ND", "VK", "NK", "NT", "NS", "Key", "L", "TN", "P", "KE", "J", "Z", "V", "I", "B"], "D": ["DN", "Y", "DL", "DB", "PD", "C", "X", "WD", "F", "R", "Do", "DF", "G", "W", "DD", "DJ", "DEF", "M", "A", "Ds", "DA", "S", "DX", "DIR", "O", "DT", "ND", "DS", "E", "d", "YD", "L", "TD", "P", "DC", "TS", "J", "Z", "V", "I", "B", "DE", "TT", "DOS", "MD", "Delta", "DO", "DI"], "start": ["offset", "tmp", "node", "se", "step", "point", "key", "r", "check", "sp", "index", "entry", "ie", "ind", "id", "test", "init", "next", "char", "p", "end", "seed", "it", "current", "art", "set", "stop", "Start", "begin", "new", "st"], "nowd": ["nowed", " nowed", " nowdate", "NOWp", " nowdn", "nowdn", "NOWdn", "NOWed", "waitD", "nowD", "NOWD", "NOWd", " nowp", "waited", " NOWdn", "nowp", " NOWed", "NOWdate", "nowdate", "waitd", " NOWd", "waitdate", " nowD", " NOWp"], "to": ["tu", "tmp", "top", " TO", "itto", "ta", "oto", "node", "tt", "nt", "tw", "ti", " To", "by", "token", "at", "v", "TO", "phi", "eto", "toc", "tg", "go", "d", "next", "do", "te", "To", "total", "tc", "o", "no", "ts", "TT", "new"], "t": ["f", "tu", "out", "let", "tmp", "m", "ta", "est", "l", "y", "tt", "nt", "tw", "ti", "s", "dt", "tp", "ty", "at", "xt", "h", "ot", "g", "ct", "iat", "d", "te", "p", "ant", " ti", " ot", "e", "it", "int", "n", "tc", "ic", "o", "w", "x", "iti", "ts", "rt", "st"], "next_node": ["first_name", "nextjseed", "prev_link", "next_link", "nextjode", "next_ode", "last_key", "prev_node", "last_node", "next__component", "next_seed", "first_tree", "next_index", " next_seed", "next_key", "next_n", "next_tree", "last_component", "first_node", " next_n", "prev_tree", "next__node", "next__key", "nextjnode", "next__name", "prev_index", "next_component", "next_name", "last_name", " next_ode", "first_id", "nextjn", "next_id"], "nextd": ["nextD", " nextl", "newd", "ntn", "nownode", "ntl", "newnode", "nextnode", " nextn", " nextD", " nextnode", "nowl", "nows", "news", "ntd", "nexts", "Nextd", "NextD", "newl", "ntnode", " nexts", "nown", "nextn", "nextl", "newn", "Nextn", "newD", "Nextl"]}}
{"code": "import numpy as np\\n\\nN, K, Q = map(int, input().split())\\nA = np.zeros(N, dtype=int)\\n\\nfor i in range(Q):\\n    A[int(input()) - 1] += 1\\n\\nfor ai in A:\\n    print(['No', 'Yes'][int(ai) + K - Q > 0])", "target": "336", "substitutes": {"N": ["Y", "Num", "NE", "C", "X", "AN", "F", "R", "G", "CNN", "NB", "NI", "M", "NR", "CN", "MN", "NA", "S", "NT", "D", "SN", "NS", "L", "TN", "P", "GN", "n", "V", "I", "PN", "Ns", "NC", "ON", "NN", "NH"], "K": ["Y", "KA", "PK", "H", "C", "X", "F", "KK", "R", "G", "W", "M", "k", "KR", "KI", "KS", "S", "E", "NK", "D", "TN", "P", "KE", "T", "J", "Z", "V", "I", "B", "MK"], "Q": ["Y", "QU", "CH", "MQ", "H", "X", "F", "R", "G", "W", "NB", "M", "U", "q", "S", "E", "O", "D", "NS", "L", "QB", "P", "T", "J", "Z", "V", "I", "B", "Qu", "UE", "Que", "IQ"], "A": ["App", "AI", "AA", "Ar", "ALL", "H", "C", "X", "AC", "ANG", "a", "R", "G", "AV", "BA", "CA", "AL", "TA", "Av", "NA", "Count", "S", "O", "As", "AU", "HA", "All", "D", "Ah", "AF", "WA", "L", "GA", "Every", "An", "At", "ATA", "mA", "P", "AM", "This", "SA", "T", "The", "AB", "AP", "Answer", "One", "Added", "I", "B", "V", "ACT", "AE"], "i": ["z", "ei", "a", "y", "ti", "au", "gi", "ki", "q", "ind", " ii", "p", "bi", "j", "pi", "e", "it", "ii", "xi", "n", "ic", "I", "li", "ia", "me", "x"], "int": ["type", "interface", "str", "min", "det", "ret", "ext", "t", "oct", "len", "point", "ip", "k", "div", "uint", "status", "pret", "c", "long", "index", "q", "Int", "double", "ref", "string", "bit", "ind", "inter", "num", "char", "p", "round", "vert", "bool", "INT", "none", "net", "integer", "const", "ints", "short", "float", "n", "dec", "part", "iter", "print", "list", "x", "digit", "mint", "count", "st"], "input": ["expression", "active", "out", "unknown", "sample", "step", "raw", "request", "output", "url", "history", "route", "q", "csv", "ref", "Input", "source", "select", "cmd", "context", "config", "hidden", "pattern", "process", "image", "path", "command", "parse", "got", "focus", "hit", "feed", "print", "exec", "lat", "count", "shift"], "ai": ["ita", "ini", "ei", "oci", "AI", "zi", "ay", "aii", "ave", "ta", "ae", "a", "ka", "ni", "ais", "aci", "ti", "au", "ci", "ca", "aki", "ati", "hi", "ki", "iona", "ami", "yi", "air", "asi", "di", "ari", "bi", "ao", "agi", "sa", "aq", "ait", "ii", "iri", "si", "ace", "li", "ia", "umi", "mi", "ar", "ali", "an"]}}
{"code": "# F - Sugoroku\\nimport sys\\nsys.setrecursionlimit(10 ** 9)\\n\\nn,m = map(int,input().split())\\ns = input()\\n\\n# r[i]:s\u3092\u5f8c\u308d\u304b\u3089\u898b\u3066\u3044\u3063\u3066\u3001i\u304b\u3089\u6700\u5c0f\u4f55\u624b\u3067\u30b4\u30fc\u30eb\u3059\u308b\u304b\u3092\u6c42\u3081\u308b\u3002\\nINF = float('inf')\\nr = [INF for _ in range(n+1)]\\nr[n] = 0\\nidx = n\\nfor i in range(n-1,-1,-1):\\n  while(idx-i > m or r[idx] == INF):\\n    idx -= 1\\n  if idx <= i:\\n    print(-1)\\n    exit()\\n  if s[i] == '0':\\n    r[i] = r[idx]+1\\n    p = r[i]\\n#print(r)\\n\\n# r\u3092\u5148\u982d\u304b\u3089\u898b\u3066\u3044\u304d\u3001r\u306e\u6570\u5b57\u304c\u5909\u308f\u308b\u76f4\u524d\u307e\u3067\u9032\u3080\u3088\u3046\u306b\u3059\u308c\u3070\\n# \u6700\u77ed\u3067\u8f9e\u66f8\u9806\u6700\u5c0f\u306a\u30eb\u30fc\u30c8\u304c\u6c42\u307e\u308b\u3002\\nans = []\\nc = 0\\nfor i in range(n+1):\\n  if r[i] != INF and r[i] != p:\\n    p = r[i]\\n    ans.append(c)\\n    c = 1\\n  else:\\n    c += 1\\nprint(*ans)\\n\\n# mnr = [m for _ in range(n+1)]\\n# mnl = n+1\\n# def dfs(x,c):\\n#   global mnr,mnl\\n#   #print(x,c)\\n#   if x == n:\\n#     #print(r)\\n#     if len(r) < mnl or (len(r) == mnl and r < mnr):\\n#       mnr = r[:]\\n#       mnl = len(r)\\n#     return True\\n#   if c >= mnl or x > n or s[x] == '1':\\n#     return False\\n#   for i in range(m,0,-1):\\n#     r.append(i)\\n#     dfs(x+i,c+1)\\n#     r.pop()\\n# dfs(0,0)\\n# if mnl < n+1:\\n#   print(*mnr)\\n# else:\\n#   print(-1)", "target": "677", "substitutes": {}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nN,A,B = map(int,input().split())\\nanswer = 'Alice' if (B-A)%2==0 else 'Borys'\\nprint(answer)", "target": "507", "substitutes": {"input": ["active", "add", "sleep", "out", "eval", "echo", " Input", "sample", "control", "step", "request", "raw", "output", "quiet", "open", "pull", "q", "insert", "human", "ref", "Input", "source", "select", "cmd", "pattern", "read", "next", "command", "get", "ahead", "int", "got", "focus", "quick", "conf", "feed", "sequence", "print", "exec", "data", "text"], "N": ["Y", "K", "C", "X", "F", "R", "NB", "M", " C", " D", "NA", "S", "E", "O", "D", "SN", "NS", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", " n", " S"], "A": ["Y", "AY", "AR", "AA", "H", "C", "X", "AC", "a", "F", "IA", "G", "AV", "M", "BA", "CA", "AL", "U", "NA", "S", "E", "As", "D", "AU", "AT", "AF", "An", "P", "Q", "AM", "This", "AS", "AB", "AP", "V", "I", "AE"], "B": ["Y", "BB", "BS", "DB", "H", "C", "X", "EB", "F", "R", "G", "BO", "M", "BA", "BC", "BI", "b", "S", "D", "L", "P", "T", "J", "AB", "Z", "V", "BT", "I", "BER", "BM", "Bern", "BF", "Bs"], "answer": [" answers", " unanswered", "message", "onse", " question", " Answer", "poll", "sole", "quest", "wer", "result", "say", "request", "reply", "answered", "interpret", " answering", "query", "remember", "q", "WER", "said", "sen", "option", "ask", "cho", "zen", "ror", "review", "Answer", "swers", "definition", "response", "example", " answered", "question", "entry", "description"]}}
{"code": "from sys import stdin, setrecursionlimit\\n\\n\\ndef main():\\n    input = stdin.buffer.readline\\n    s = list(input()[:-1].decode())\\n    n = len(s)\\n    l = r = -1\\n    ans = 0\\n    for i in range(1, n):\\n        if s[i] == s[i - 1]:\\n            if l == -1:\\n                l = i\\n            else:\\n                r = i\\n        if r != -1:\\n            ans += r - l\\n            r = l = -1\\n    if l != -1:\\n        ans += n - l\\n    print(min(ans, n - ans))\\n\\n\\nif __name__ == \"__main__\":\\n    setrecursionlimit(10000)\\n    main()\\n", "target": "495", "substitutes": {"input": ["add", "out", "stream", "reader", "more", "control", "rc", "output", "buffer", "filter", "enter", "pull", "c", "start", "q", "enum", "val", "Input", "source", "select", "paste", "acl", "init", "ref", "hidden", "read", "cmd", "act", "send", "form", "get", "parse", "inc", "cmp", "it", "each", "got", "focus", "feed", "exec", "lat", "list", "view", "socket", "shift"], "s": ["ps", "sts", "sv", "lines", "ls", "ws", "m", "a", "cs", "rs", "t", "gs", "xs", "ins", "ms", "ns", "strings", "services", "sl", "c", "b", "g", "ies", "S", "ges", "rings", "p", "ss", "less", "ds", "parts", "sb", "its", "ses", "bs", "sq", "tes", "ats", "ts", "qs", "js"], "n": ["z", "nn", "le", "line", "m", "y", "nt", "t", "name", "N", "len", "ns", "k", "en", "v", "na", "c", "ln", "sn", "an", "h", "b", "g", "cn", "nu", "nb", "num", "d", "size", "p", "L", "j", "ne", "np", "nc", "o", "w", "u", "no", "nl", "x", "ll"], "l": ["z", "f", "fl", "ol", "ls", "el", "le", "line", "m", "a", "lv", "t", "lin", "kl", "len", "il", "lb", "v", "limit", "la", "ul", "sl", "c", "length", "long", "ln", "h", "b", "lc", "g", "tl", "lo", "ml", "d", "p", "L", "j", "lp", "e", "lr", "al", "o", "li", "u", "left", "nl", "list", "rl", "ll", "lan", "ly"], "r": ["z", "f", "rb", "ls", " R", "m", "rr", "sr", "a", "R", "rs", "t", "nr", "fr", "rc", "err", "res", "at", "v", "c", "h", "q", "b", "g", "rn", "er", "re", "d", "p", "br", "j", "ro", "e", "right", "ra", "ur", "rd", "mr", "rt", "u", "o", "w", "reg", "dr", "x", "rar", "ar", "rl", "ru"], "ans": ["ens", "rors", "els", "lines", "ls", "a", "ran", "rs", "cons", "lan", "gs", "amps", "xs", "lang", "os", "ins", "ars", "aus", "ns", "outs", "ann", "ons", "ms", "aps", "ags", "acs", "aos", "arts", "errors", "es", "ents", "ians", "ums", "angs", "rans", "ln", "ids", "eps", "ANS", "terms", "ds", "lets", "args", "uns", "offs", "ras", "ats", "nl", "als", "ros", "vals", "ts", "an", "ks", "ants", "olds", "ows"], "i": ["z", "io", "ini", "ri", "zi", "m", "y", "t", "ix", "ti", "ip", "ci", "ji", "gi", "v", "ij", "c", "hi", "index", "oi", "ki", "phi", "ie", "ind", "id", "di", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "iri", "li", "I", "u", "ia", "me", "x", "ui", "mi", "iu", "im"]}}
{"code": "n,m =map(int,input().split())\\n \\nH=[]\\nH=list(map(int,input().split()))\\nC=[]\\nfor i in range(n):\\n    C.append(1)\\n \\nfor i in range(m):\\n    a,b = map(int,input().split())\\n    if H[a-1]==H[b-1] :\\n        C[a-1] = 0\\n        C[b-1] = 0\\n    elif H[a-1]<H[b-1] :\\n        C[a-1] = 0\\n    else:\\n        C[b-1] = 0\\n \\nprint( C.count(1))      \\n", "target": "291", "substitutes": {"n": ["nn", "nw", "nia", "y", "nt", "t", "s", "N", "ns", "r", "mn", "na", "c", "ln", "h", "an", "sn", "cn", "nu", "nb", "num", "d", "nv", "p", "j", "ne", "net", "gn", "np", "nan", "nc", "o", "no", "nl"], "m": ["gm", "mc", "tm", "mas", "mb", "l", "y", "t", "sm", "ms", "M", "mn", "r", "mis", "c", "bm", "h", "dm", "d", "p", "man", "km", "j", "mt", "om", "mr", "ma", "mm", "me", "um", "mi", "cm"], "H": ["Y", "Cl", "HO", "He", "CH", "X", "AC", "F", "Th", "R", "HT", "G", "W", "AV", "HI", "M", "N", "HB", "A", "HQ", "HL", "Head", "HD", "HH", "h", "TH", "E", "MH", "Host", "GH", "His", "HC", "D", "HA", "HE", "Ah", "HM", "L", "GO", "P", "SH", "Eh", "HTML", "T", "J", "V", "I", "B", "OH", "HTTP", "RH", "HP", "History", "HS", "NH"], "C": ["Che", "CO", "AC", "Color", "X", "CNN", "W", "Next", "CA", "Current", "U", "GC", "E", "Cal", "This", "You", "OC", "And", "JC", "WC", "CP", "Cl", "K", "Reference", "G", "CR", "M", "CI", "Count", "Cond", "CC", "Cons", "P", "Cr", "Chain", "Ch", "F", "Cs", "Cont", "A", "c", "Size", "D", "All", "Control", "CT", "L", "Co", "V", "One", "CS", "EC", "DC", "Config", "Code", "R", "Query", "CM", "N", "BC", "CV", "Cu", "CD", "S", "New", "HC", "T", "Cache", "J", "B", "CB", "NC"], "i": ["io", "ini", "y", "ti", "ip", "ci", "r", "k", "gi", "c", "q", "yi", "ie", "ind", "di", "p", "pi", "e", "ai", "it", "ii", "xi", "ic", "li", "I", "ia", "x", "im"], "a": ["f", "ba", "ap", "ae", "ta", "l", "ga", "au", "back", "A", "r", "ca", "at", "la", "pa", "c", "ea", "an", "era", "ami", "area", "d", "va", "da", "alpha", "ao", "app", "oa", "act", "e", "sa", "ai", "aa", "aj", "ac", "o", "w", "ma", "ia", "u", "ab", "aaa", "x", "ar", "ach", "am"], "b": ["z", "f", "rb", "ba", "ib", "out", "bl", "be", "l", "y", "t", "bc", "bp", "big", "ga", "by", "back", "bg", "bh", "r", "cb", "v", "db", "c", "h", "g", "nb", "d", "p", "bi", "br", "j", "e", "sb", "gb", "aa", "bis", "batch", "ob", "bs", "u", "bot", "B", "ab", "bb", "body", "bar", "base", "eb"]}}
{"code": "import sys\\nN = int(input())\\nd = [int(input()) for i in range(N)]\\n\\ncnt = 0\\nbutton = d[0]\\nwhile button != 2:\\n    button = d[button-1]\\n    cnt += 1\\n\\n    if cnt > 100000:\\n        print(-1)\\n        sys.exit(0)\\n\\nprint(cnt+1)", "target": "573", "substitutes": {"N": ["Num", "K", "C", "X", "F", "R", "NB", "NI", "M", "NR", "A", "NA", "S", "ND", "NT", "D", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN"], "d": ["f", "ve", "ld", "m", "df", "l", "t", "dos", "dict", "ed", "dd", "days", "r", "dt", "db", "v", "sd", "c", "nd", "b", "D", "di", "du", "pd", "dl", "p", "da", "de", "do", "ds", "td", "dh", "n", "ad", "w", "dr", "data", "dat", "fd"], "i": ["io", "str", "out", "m", "ix", "ip", "r", "k", "q", "ie", "ind", "id", "ik", "p", "j", "it", "ii", "n", "li", "I", "ia", "iter", "x", "im"], "cnt": ["ucpt", "ncpt", "acount", "acnt", "Cpt", "acpt", "cnc", "rcpt", "CNT", "acct", "rcct", "Cnc", " cpt", "cNT", "Cct", "ucct", "ncnc", "Cnt", "rcnt", "npt", "rcNT", " count", "ncnt", "nct", " cNT", "nnt", "ucnc", "nnc", "ucnt", " cnc", "cct", " cct", "nount", "ncct", "count", "cpt"], "button": ["date", "m", "field", "html", "label", "action", "soft", "control", "result", "click", "delete", "trigger", "bridge", "butt", "switch", "key", "buffer", "status", "Button", "now", "v", "match", "index", "job", "b", "menu", "flag", "position", "page", "option", "next", "p", "command", "bi", "j", "btn", "window", "frame", "pressed", "current", "disabled", "event", "span", "mark", "focus", "cell", "utton", "bot", "li", "mini", "link", "submit", "entry", "shift"]}}
{"code": "s = input()\\n\\nif s == 'SUN':\\n    print(int(7))\\nelif s == 'MON':\\n    print(int(6))\\nelif s == 'TUE':\\n    print(int(5))\\nelif s == 'WED':\\n    print(int(4))\\nelif s == 'THU':\\n    print(int(3))\\nelif s == 'FRI':\\n    print(int(2))\\nelif s == 'SAT':\\n    print(int(1))\\nelse:\\n    print('\u66dc\u65e5\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093')\\n", "target": "471", "substitutes": {"s": ["ties", "cs", "ins", "v", "aces", "sym", "hs", "ers", "h", "q", "ys", "tests", "g", "ies", "ains", "sb", "its", "ses", "x", "ts", "js", "z", "f", "sys", "sts", "ws", "m", "rates", "aults", "t", "os", "ms", "ports", "ials", "gins", "string", "ss", "ols", "ds", "erences", "n", "o", "mods", "ls", "fs", "rs", "gs", "ists", "i", "ends", "arts", "sd", "c", "b", "ments", "p", "j", "sets", "e", "w", "sh", "qs", "ps", "ths", "ords", "has", "a", "y", "ns", "es", "S", "d", "u", "ats", "olds"]}}
{"code": "N = int(input())\\nprint(min([sum(map(int,list(str(A))))+sum(map(int,list(str(N-A)))) for A in range(1,N)]))", "target": "4", "substitutes": {"N": ["Num", "K", "H", "C", "NF", "R", "W", "NG", "NB", "NI", "M", "NV", "NR", "MN", "NP", "NA", "Size", "S", "ND", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "NN"], "A": ["Y", "K", "AI", "AA", "H", "C", "X", "AC", "a", "F", "R", "IA", "G", "AV", "M", "PA", "CA", "LA", "U", "NA", "S", "E", "O", "As", "Part", "AU", "HA", "D", "AF", "L", "An", "At", "P", "T", "J", "AB", "AP", "V", "Z", "I", "B", "Alpha", "Ax", "SA"]}}
{"code": "from sys import stdin\\ndef main():\\n    #\u5165\u529b\\n    readline=stdin.readline\\n    n,m=map(int,readline().split())\\n    d=make_divisors(m)\\n    l=m//n\\n    for v in d:\\n        if v<=l:\\n            print(v)\\n            break\\n\\ndef make_divisors(n):\\n    if n==1:\\n        divisors=[1]\\n        return divisors\\n    else:\\n        divisors=[]\\n        for i in range(1,n):\\n            if i*i>n:\\n                break\\n            if n%i==0:\\n                divisors.append(i)\\n                if i!=n//i:\\n                    divisors.append(n//i)\\n\\n        divisors.sort(reverse=True)\\n        return divisors\\n\\nif __name__==\"__main__\":\\n    main()", "target": "163", "substitutes": {}}
{"code": "def transformate(s, command):\\n    command, *op = command.split()\\n\\n    op[0] = int(op[0])\\n    op[1] = int(op[1])\\n\\n    if command == 'replace':\\n        return s[0:op[0]] + op[2] + s[op[1]+1:]\\n    elif command == 'reverse':\\n        return s[0:op[0]] + s[op[0]:op[1]+1][::-1] + s[op[1]+1:]\\n    elif command == 'print':\\n        print(s[op[0]:op[1]+1])\\n        return s\\n\\nif __name__ == '__main__':\\n    s = input()\\n    for _ in range(int(input())):\\n        s = transformate(s, input())\\n\\n", "target": "110", "substitutes": {"s": ["stats", "plays", "ets", "spec", "cs", "ins", "reads", "states", "outs", "v", "h", "q", "g", "ies", "source", "ains", "just", "less", "parts", "sb", "its", "ses", "x", "ts", "ast", "js", "z", "f", "sys", "sts", "ws", "obj", "m", "se", "t", "xs", "os", "ports", "itions", "string", "statement", "reports", "ss", "ds", "sam", "erences", "self", "abs", "n", "o", "ifies", "als", "str", "sv", "ls", "std", "fs", "l", "rs", "gs", "ed", "i", "r", "sp", "c", "state", "b", "ments", "ches", "p", "j", "e", "results", "utes", "w", "tes", "bes", "ions", "qs", "st", "ps", "ords", "stat", "isl", "a", "y", "ns", "es", "S", "aws", "bs", "sq", "u", "ats", "olds"], "command": ["function", "description", "message", "gate", "when", "operator", "field", "comment", "action", "this", "name", "parser", "domain", "case", "service", "channel", "point", "request", "attribute", "communication", "policy", "direction", "input", "check", "history", "query", "length", "condition", "position", "code", "string", "cmd", "pattern", "argument", "directory", "password", "power", "title", "option", "char", "clear", "config", "operation", "commit", "com", "statement", "which", "word", "execute", "mode", "Command", "three", "then", "event", "component", "template", "phrase", "sequence", "button", "connection", "prefix", "rule", "program", "menu", "text", "shift", "method"], "op": ["cat", "spec", "Op", "expr", "attr", "ver", "opl", "tp", "opt", "rop", "co", "post", "deep", "cmd", "admin", "pre", "ost", "ob", "cop", "osp", "top", "ep", "operator", "one", "att", "prop", "xy", "ext", "pop", "info", "os", "pp", "ok", "perm", "ot", "mod", "oop", "comp", "exp", "o", "dot", "im", "hop", "oc", "OP", "pos", "rot", "msg", "sp", "typ", "oper", "p", "app", "zero", "loc", "ic", "ps", "off", "ap", "rep", "iop", "ip", "jp", "ops", "bit", "mp", "tip", "ox", "it", "int", "block", "var", "opp", "mop", "rel", "og"], "_": [" i", " j", " __", " p", "val", "j", " x", "___"]}}
{"code": "S = input()\\nif S[0]=='A' and (S[2:len(S)-1].count('C')==1) and S[1:2].islower() and S[len(S)-1:].islower():\\n  print('AC')\\nelse:\\n  print('WA')", "target": "695", "substitutes": {"S": ["SER", "BS", "String", "SI", "H", "C", "SS", "F", "R", "SL", "SAN", "G", "W", "SB", "SM", "JS", "SK", "PS", "s", "OS", "N", "M", "SOURCE", "A", "Sing", "RS", "INS", "ST", "IS", "SR", "DS", "D", "US", "NS", "ASH", "STR", "SU", "Is", "SO", "L", "SP", "SQL", "P", "TS", "Q", "SH", "T", "SF", "SA", "SE", "Z", "VS", "V", "I", "B", "CS", "GS", "SSL", "BY", "HS"]}}
{"code": "N  = int (input())\\nnums = list(map(int, input().split(\" \")))\\ncolors = [0,0,0]\\nans = 1\\nMOD = 10 ** 9 + 7\\nfor num in nums:\\n    cot = 0\\n    ind = -1\\n    for i in range(3):\\n        if colors[i] == num:\\n            ind = i\\n            cot += 1\\n    colors[ind] += 1\\n    ans *= cot\\n    ans %= MOD\\nprint(ans)", "target": "560", "substitutes": {"N": ["Num", "K", "C", "X", "F", "R", "G", "Ni", "M", "NR", "A", "MN", "S", "O", "NT", "D", "NS", "L", "P", "Q", "T", "n", "Z", "V", "I", "B", "Ns", "NUM", "NN"], "nums": ["Num", "cums", "noms", "tum", "tums", "toms", "numbers", "cumbers", "coms", "Nums", "Numbers", " numbers", "Noms", "cum", "tumbers", " noms"], "colors": ["icolores", "colORS", "ColORS", "colorors", "colorset", "colourORS", "colourors", "icolours", "olores", "ollections", "collections", "COLurers", "icolors", "COLours", "COLors", "colurers", "Colurers", "olours", " colorset", "colourores", "colororset", "colores", "Colores", "Colorset", "colours", "COLORS", "coloururers", "COLlections", "icollections", "COLores", "Colors", "olors"], "ans": ["ens", "rors", "anon", "ls", "names", "mas", "ANN", "AN", "ones", "oss", "ran", "ean", "anc", "cs", "nt", "amps", "pos", "s", "ins", "os", "ms", "ns", "mn", "ons", "ann", "ars", " Ans", "aos", "arts", "ents", "es", "ians", "rans", "ot", "ands", "ations", "mod", " means", "ids", "terms", "ANS", "ots", "can", "ss", "ds", "mods", "uns", "actions", "mean", "nan", "ams", "ats", "ados", "ros", "ts", "ions", "an", "ks", "ants"], "MOD": ["AND", "MIN", "K", "ALL", "ADD", "UPDATE", "AN", "MAL", "ROM", "M", "MAX", "MED", "SIZE", "OT", "DEV", "MAG", "RO", "ID", "REM", "OD", "VER", "mod", "OK", "IND", "MAP", "CC", "TD", "Mod", "UN", "OR", "JUST", "MODE", "OUT", "NUM", "NO", "VERSION", "POS"], "num": ["Num", "nom", "sum", "mon", "node", "ord", "name", "number", "pos", "nam", "info", "con", "umer", "nm", "mn", "en", "un", "sym", "cal", "index", "enum", "nu", "typ", "nil", "col", "zero", "umber", "np", "hom", "coord", "n", "loc", "uni", "mom", "umi", "set", "NUM", "um", "x", "item"], "cot": ["Cod", "fat", "out", "cod", "annot", "tmp", "ent", "top", "sum", "cat", "cr", "anc", "nt", "to", "pos", "god", "rot", "con", "upt", "div", "OT", "co", "tar", "c", "tic", "odd", "mut", "crypt", "ot", "mot", "toc", "ott", "ct", "csv", "tan", "cart", "cos", "cont", "can", "mun", "col", "td", "ox", "cd", "int", "iod", "nut", "pc", "tc", "cop", "bot", "cor", "dot", "rat", "iot", "foot", "count", "osa", "pot"], "ind": ["rand", "cand", "mind", "cod", "ent", "kind", "cond", "find", "ord", "anc", "wind", "nt", "draw", "ix", "bind", "pos", "ci", "ann", "length", "index", "start", "nd", "IND", "id", "di", "d", "cont", "round", "dir", "col", "end", "j", "td", "vert", "inn", "seed", "ond", "int", "od", "iod", "n", "loc", "Ind", "ad", "set", "roll", "count", "init"], "i": ["z", "f", "ini", "zi", "m", "l", "y", "t", "ix", "ti", "ip", "ci", "ji", "gi", "v", "ij", "c", "index", "yi", "ie", "id", "di", "iat", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "li", "I", "x", "mi"]}}
{"code": "import itertools\\nn = int(input())\\ns = [i for i in input()]\\ncnt_s, cnt_d = [0]*(n+1), [0]*(n+1)\\nfor i in range(n):\\n    if s[i] == \"#\":\\n        cnt_s[i+1] = 1\\n    else:\\n        cnt_d[i+1] = 1\\ncnt_s, cnt_d = list(itertools.accumulate(cnt_s)), list(itertools.accumulate(cnt_d))\\nans = 10**6\\ncnt_d_l = cnt_d[-1]\\nfor i in range(n+1):\\n    ans = min(ans, cnt_s[i] - cnt_s[0] + (cnt_d_l - cnt_d[i]))\\nprint(ans)", "target": "187", "substitutes": {"n": [" ne", " size", "nn", "nia", " nan", "m", "names", " ind", "ni", "l", "all", "nt", "t", "name", " len", " states", "nr", "N", "len", "ns", "mn", "nm", "r", "en", "v", " j", " fn", " ni", "c", "na", "ln", " p", "sn", "g", "cn", "nu", "nb", " number", "d", " sn", " c", "p", "gain", "num", "j", "network", " ns", " np", " ng", " entries", "ne", "none", "pi", "net", " total", "gn", "np", "nan", " bins", " all", " gn", "nc", "o", " nat", "norm", " id", " na"], "s": ["ps", "stats", "sts", "ls", "names", "a", "rs", "t", "gs", "xs", "ins", "ms", "os", "ns", "ends", "strings", "hs", "ys", "tests", "S", "changes", "ids", "p", " inputs", "ss", "ds", "its", "ses", "ats", "ts", "js"], "i": ["f", "ei", "ini", "ri", "zi", "\u00ed", "m", "l", "y", "t", "this", "ix", "iy", "name", "ti", "ip", "key", "ci", "k", "ji", "v", "gi", "status", "gu", "ij", "c", "hi", "index", "oi", "ki", "h", "phi", "g", "yi", "ind", "id", "di", "ik", "p", "bi", "multi", "exp", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "iri", "u", "I", "li", "ia", "batch", "x", "ui", "mi", "iu", "im", "ski", "item"], "cnt_s": ["cnt___l", "cpt_l", "cnt__ls", "cnt_back", "cth_b", "cnt1back", "count2ds", "cnt00l", "cnt00ls", "cnt___b", "cnt_es", "cnt_h", "cnt_ps", "cnt2ds", "cnt1s", "cct_i", "cth_l", "cnt__h", "cent_s", "cnt_ls", "cth2back", "cct_n", "cth_back", "cpt_s", "cnt___d", "cnt_b", "cth2s", "cnt_l", "cct_s", "count2s", "cnt_ds", "cnt2s", "count_b", "cnt2d", "cnt2b", "cnt2l", "count_l", "cnt1l", "cnt2es", "cnt__l", "count_ds", "count2d", "cnt_n", "cnt1b", "cent_ps", "cpt_ls", "cnt___s", "cent_l", "count2es", "count_d", "cnt_i", "cnt__s", "cnt00s", "count_es", "cnt2back", "count_s", "cpt_h", "cth_s", "cth2l", "cth2b", "cnt2ps", "cnt00h"], "cnt_d": ["cct2l", "cent67s", "cent67dt", "count_del", "cct_d", "cent_dt", "cnt5d", "cent67r", "cct_c", "crt_m", "cent_s", "cct2c", "cnt2p", "cnt__d", "cnt_b", "cnt_l", "cct_l", "count_p", "cnt2c", "cst_d", "cnt67d", "crt_p", "cnt2s", "cent_r", "cnt2d", "cent_d", "cnt2b", "cnt2l", "cnd_s", "cst_l", "cnt5p", "cnt_bd", "cnd_d", "cnt__l", "crt_b", "crt_d", "cent67d", "cnt_c", "cnt_r", "cnt67r", "cnt_del", "cnt_m", "cst_bd", "cnt67bd", "cnt5s", "cnt67l", "cnd_l", "cnt2m", "cst_s", "cct2d", "count_d", "cnt__s", "count_s", "cnt_p", "cnt_dt", "cnt67dt", "cnt67s", "cnt5del"], "ans": ["ens", "nn", "weights", "views", "names", "aned", "vers", "rates", "oss", "ran", "ean", "cs", "rs", "amps", "xs", "iann", "ms", "anas", "ins", "aus", "ns", "outs", "os", "ann", "aps", "beans", "arts", "ents", "ians", "angs", "ums", "rans", "iban", "grades", "posts", "ations", "cn", " means", "terms", "ANS", "can", "ds", "uns", "nas", "offs", "anes", "nan", "mean", "ams", "ras", "ates", "ats", "nl", "asms", "ros", "us", "ions", "an", "ants", "uploads", "irms"], "cnt_d_l": ["cnt_l_L", "cnt_l_rl", "cnt_d_L", "cnt_l_l", "cnt_l_g", "cnt_d_rl", "cnt_d_g"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\ndef mapint(): return map(int, input().split())\\nsys.setrecursionlimit(10**9)\\n\\nN, K = mapint()\\nAs = list(mapint())\\nmod = 10**9+7\\n\\npos = []\\nneg = []\\nfor a in As:\\n    if a>=0:\\n        pos.append(a)\\n    else:\\n        neg.append(a)\\npos.sort(reverse=True)\\nneg.sort()\\nans = 1\\nlenp, lenn = len(pos), len(neg)\\nif (lenp+lenn)==K:\\n    for a in As:\\n        ans *= a\\n        ans %= mod\\n    print(ans)\\nelif lenn==0:\\n    for i in range(K):\\n        ans *= pos[i]\\n        ans %= mod\\n    print(ans)\\nelif lenp==0:\\n    if K%2==0:\\n        for i in range(K):\\n            ans *= neg[i]\\n            ans %= mod\\n        print(ans)\\n    else:\\n        neg = neg[::-1]\\n        for i in range(K):\\n            ans *= neg[i]\\n            ans %= mod\\n        print(ans)        \\nelse:\\n    p, n = 0, 0\\n    while p+n+1<K:\\n        if p+2<=lenp and n+2<=lenn:\\n            if pos[p]*pos[p+1]>=neg[n]*neg[n+1]:\\n                ans *= pos[p]\\n                p += 1\\n            else:\\n                ans *= neg[n]*neg[n+1]\\n                n += 2\\n        elif n+2<=lenn:\\n            ans *= neg[n]*neg[n+1]\\n            n += 2\\n        else:\\n            ans *= pos[p]\\n            p += 1\\n        ans %= mod\\n    if p+n<K:\\n        ans *= pos[p]\\n        ans %= mod\\n    print(ans)", "target": "606", "substitutes": {"N": ["Y", "C", "X", "AN", "R", "Ni", "M", "NR", "A", "MN", "Len", "S", "E", "O", "D", "NS", "L", "P", "Q", "T", "J", "Z", "V", "I", "B", "Ns"], "K": ["Y", "HK", "KA", "KN", "FK", "PK", "H", "C", "X", "AN", "F", "KK", "R", "SK", "G", "W", "Han", "Ak", "M", "A", "k", "MN", "KR", "Kent", "KI", "Mask", "KS", "Ko", "S", "OK", "E", "O", "NK", "KING", "UK", "L", "TN", "Kin", "P", "Q", "KE", "Sk", "T", "J", "Z", "V", "I", "MK"], "As": ["Have", "Os", "Ass", "Ar", "Pos", "Ab", "Rs", "Th", "Am", "Ak", "Self", "os", "Us", "asin", "A", " AS", "By", "Some", "Rat", "Save", "S", "Has", "Array", "Can", "In", "Is", "Others", "If", "An", "At", "Cons", "This", "And", "AS", "The", "Ac", "I", "ras", "Ns", "Each", "Las", "Pres", "Ps", "Ax"], "mod": ["good", "sub", "add", "max", "sum", "sign", "spec", "ran", "ver", "un", "post", "sim", "pre", "num", "admin", "round", "trans", "ident", "mode", "mer", "set", "mad", "fun", "m", "dig", "t", "ms", "modified", "perm", "mut", "OK", "temp", "ind", "man", "im", "mods", "med", "pur", "red", "rot", "r", "check", "term", "OD", " Mod", "j", "zero", "mt", "form", "Mod", "AD", "MOD", "ma", "bug", "min", "pad", "cond", "step", "san", "id", "d", "tool", "mult", "pi", "port", "it", "od", "int", "mat", "lex", "mag", "reg", "base"], "pos": ["ens", "pt", "pr", "Pos", "mit", "spec", "oss", "ins", "un", "post", "position", "yes", "ref", "val", "pre", "num", "trans", "no", "gen", "new", "POS", "op", "obj", "top", "mon", "prop", "pkg", "os", "ports", "index", "prot", "ind", "cos", "comp", "net", "doc", "up", "px", "pid", "us", "pro", "par", " Pos", "nt", "rot", "con", "en", "at", "pl", "bin", "loc", "pres", "sol", "ps", "pol", "out", "cond", "all", "s", "ns", "res", "pose", "vs", "pat", "Neg", "port", "pub", "po", "rel"], "neg": ["ens", "vec", "sub", "Pos", "serv", "ins", "unsigned", "sec", "un", "v", "mis", "dis", "yes", "val", "num", "deg", "trans", "iter", "rec", "no", "non", "gen", "values", "obj", "und", "cod", "desc", "prop", "xy", "ms", "nos", "len", "na", "ren", "index", "ind", "orig", "cos", "ots", "nan", "abs", "ko", "us", "ku", "unit", "terms", "str", "nt", "rot", "den", " Neg", "en", "ois", "zero", "bin", "uns", "loc", "pres", "dec", "obs", "vals", "ve", "negative", "out", "eval", "inv", "all", "ns", "mn", "res", "words", "bit", "minus", "rev", "vs", "Neg", "col", "ne", "reg", "por", "rel", "reverse", "vert"], "a": ["ba", "apa", "fa", "ap", "m", "am", "ta", "ae", "ka", "ja", "l", "all", "t", "name", "sta", "ha", "cha", "au", "s", "ga", "xa", "ca", " pa", "A", "la", "at", "pa", "na", "c", "ea", "index", "aqu", "b", "ak", "area", "va", "alpha", "ada", "ao", "j", "oa", "\u00e4", "aka", "act", "ai", "sa", "ana", "ata", "aq", "aa", "aj", "ac", "o", "ma", "w", "u", "sha", "ia", "aaa", "x", "ar", "ach", "an"], "ans": ["ens", "stats", "ones", "ins", "ars", "anas", "aus", "outs", "aos", "aces", "ies", "yes", "eps", "ai", "helps", "offs", "actions", "mean", "ates", "orts", "ros", "ts", "ants", "jas", "vers", "os", "ms", "ases", "acts", "aps", "beans", "ums", "ands", "eds", " means", "ANS", "ots", "can", "man", "ols", "ds", "anes", "nan", "ams", "ads", "asms", "us", "terms", "mods", "ls", "mas", "rs", "en", "ann", "arts", "ents", "aves", "works", "leans", "uns", "oms", "uls", "ras", "ions", "ks", "ps", "lines", "des", "ores", "cons", "amps", "s", "ns", "ons", "mn", "es", "ians", "angs", "rans", "posts", "vs", "ats", "an"], "lenp": ["genn", "lengthpp", "genpp", "lenup", "lonf", " lenpc", "listp", "lltp", "listpn", "lengthp", "lentp", "lnf", "lnpy", "lln", "Lenup", "lenpn", "olnpp", "Lenp", "lonpy", "llpy", "lengthpn", "lenf", "lnn", " lenP", "lenpc", "lnpp", "olnp", "genpn", "genp", "lonn", "lenpp", "Lenn", "lnP", "listpp", "Lenf", "lnup", "lonup", "lntp", "lnpc", "lonp", "lenP", " lenpp", "lontp", "lenpy", "olnpc", "llp", "olnP", "listn", "lnp", "lengthn"], "lenn": ["alern", " lenna", "klenn", "men", "plern", " linen", "lener", "lenny", " lern", "elogn", "elinen", "plen", "logn", "ylenna", "lern", " logn", "plenna", "mern", " len", "llen", "slenny", "len", "Lern", "alener", "klinen", "alenna", "Len", "ylenn", "elenn", "llern", "slen", "klogn", "menn", "slenn", "slenna", "elen", " lenny", "mener", "Lenny", "alenn", "ylener", "Lenn", "klen", "ylern", "llenn", "linen", "slern", "plenn", "lenna", " lener", "llener"], "i": ["z", "io", "ei", "ini", "ri", "zi", "\u00ed", "m", "uri", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "k", "ati", "gi", "v", "ij", "c", "hi", "index", "oi", "ki", "phi", "yi", "id", "di", "ik", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "x", "iti", "mi", "iu"], "p": ["op", "ps", "pe", "out", "ph", "per", "pt", "pr", "m", "ap", "par", "pan", "y", "pkg", "bp", "pb", "s", "pp", "ip", "jp", "k", "tp", "at", "point", "v", "sp", "perm", "pa", "pm", "h", "g", "er", "pre", "num", "d", "pat", "j", "pi", "cp", "ping", "pl", "port", "P", "it", "np", "pc", "o", "u", "part", "pid", "wp", "x", "on", "pn", "pro"], "n": ["z", "f", "nn", "out", "m", "node", "l", "y", "nt", "t", "name", "all", "nr", "note", "s", "fn", "ns", "mn", "k", "r", "en", "un", "v", "na", "c", "ren", "long", "ln", "sn", "ng", "b", "an", "g", "h", "cn", "nu", "nb", "tn", "num", "d", "size", "dn", "br", "j", "ne", "net", "nor", "np", "nan", "nc", "o", "w", "u", "no", "on", "x", "norm", "pn", "new"]}}
{"code": "def min2(x,y):\\n    return x if x < y else y\\n\\nfrom itertools import combinations\\nMOD = 2019\\nL, R = map(int, input().split())\\ndata = [L%MOD]\\nfor i in range(L+1, R+1):\\n    if data[0] ==i%MOD:\\n        break\\n    data.append(i%MOD)\\nres = float(\"inf\")\\nfor x, y in combinations(data, 2):\\n    res = min2((x*y)%MOD,res)\\nprint(res)", "target": "650", "substitutes": {"x": ["z", "f", "yx", "xes", "xp", "X", "xd", "a", "ux", "xy", "l", "ix", "xs", "xa", "xx", "ax", "r", " ax", "v", "xml", "xt", "dx", "wx", "mx", "ex", "fx", "p", " X", "rx", "xc", " xx", "ox", "xe", "xi", "px", "w", "xf", "zx", "tx"], "y": ["Y", "z", "f", "ym", "ey", "yl", "out", "yo", "ay", "m", "my", "xy", "py", "t", "iy", "by", "oy", "sy", "xx", "yy", "ty", "yt", "v", "gy", "ys", "b", "q", "ify", "ies", "yi", "ny", "any", "fy", "p", "ady", "nil", "j", "null", "ry", "e", "ya", "it", "uy", "ye", "axy", "yr", "n", "o", "vy", "cy", "iny", "yd", "sky", "ly"], "MOD": ["MIN", "SET", "UT", "LOG", "LOAD", "IME", "UPDATE", "MAC", "UL", "ED", "ROM", " mod", "MT", "ERROR", "MAX", "DATA", "LED", "MER", "SIZE", "FORM", "MAT", "MAG", "ACK", "REM", "ID", "VER", "RE", "mod", "OD", "IND", "DIR", " MODULE", "FUN", "SPEC", "CLASS", "FIL", "LB", "OOL", "LOCK", "Mod", "AD", "RED", "REG", "JUST", "ENGTH", "MODE", "IDENT", "MS", "LOD", "STEM", "UN", "TAG", "LOC", "NUM", "FILE", "JSON", "DEBUG", "VERSION", "DEC", "BY", "PUT", "MD", "Mods", "POS"], "L": ["DL", "Level", "H", "C", "X", "Long", "LR", "F", "LE", "l", "SL", "G", "LS", "N", "LT", "M", "LU", "A", "Left", "LA", "LG", "Length", "Lock", "Len", "NL", "LO", "U", "S", "O", "LIN", "GL", "RL", "LB", " l", "P", "T", "LI", "J", "V", "I", "B", "LOC", "LP", "LD", "LL", "Lu"], "R": ["Y", "RR", "RG", "RA", "Rs", "IR", "W", "CR", "MR", "N", "M", "NR", "r", "RS", "GR", "RAM", "RO", "RE", "SR", "PR", "D", "RL", "Right", "RT", "P", "RC", "Q", "DR", "RES", "RF", "T", "RP", "RM", "I", "Res", "BR"], "data": ["map", "done", "values", "lines", "Data", "found", "times", "pie", "blocks", "l", "this", "all", "name", "chain", "steps", "info", "result", "s", "shape", "raw", "ns", "r", "output", "DATA", "pieces", "div", "series", "missing", "na", "empty", "images", "index", "batch", "d", "size", "next", "p", "da", "window", "valid", "results", "ata", "np", "dates", "multiple", "n", "available", "items", "frames", "left", "table", "set", "ma", "keys", "list", "vals", "cache", "apps", "new", "dat"], "i": ["f", "ini", "ri", "zi", "m", "ir", "l", "t", "ix", "ti", "ip", "ji", "gi", "v", "ij", "index", "q", "b", "yi", "ind", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "n", "ic", "o", "li", "I", "iri", "mi", "iu", "im"], "res": ["z", "ress", "ps", "f", "pro", "max", "med", "out", "min", "rand", "rest", "sum", "des", "reset", "rez", "rep", "ret", "rs", "full", "cons", "pos", "result", "s", "os", "r", "err", "resp", "gr", "prof", "resh", "ther", "yes", "val", "ref", "rss", "sim", "re", "mem", "crit", "p", "j", "zero", "vol", "results", "RES", "rem", "pres", "print", "reg", "rel", "Res", "resolution", "req", "norm", "sol", "new", "init"]}}
{"code": "n = int(input())\\na = [int(s) for s in input().split()]\\n\\nans = 0\\nfor i in range(n):\\n    if a[a[i]-1] == i + 1:\\n        ans += 1\\nprint(ans // 2)\\n", "target": "397", "substitutes": {"n": ["z", "nn", "nia", "m", "l", "nt", "t", "N", "ns", "mn", "r", "k", "v", "na", "c", "ln", "sn", "q", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "gn", "np", "nc", "nl", "x"], "a": ["ba", "obj", "apa", "array", "m", "ta", "ae", "sta", "au", "ga", "xa", "A", "ca", "la", "at", "c", "ea", "an", "b", "area", "va", "p", "alpha", "ada", "ao", "oa", "act", "aka", "e", "sa", "ai", "ata", "aa", "ma", "w", "ia", "ab", "aaa", "am"], "s": ["f", "ps", "sys", "sing", "sts", "sv", "str", "ls", "sis", "src", "l", "rs", "t", "gs", "ms", "ns", "r", "sw", "v", "es", "c", "sl", "q", "b", "ies", "S", "string", "p", "ss", "j", "ds", "self", "e", "sa", "sb", "si", "u", "sq", "ats", "sh", "ts"], "ans": ["ens", "wan", "rors", "anon", "nets", "mas", "oss", "ran", "cs", "rs", "ins", "anas", "ms", "aus", "ns", "outs", "ons", "ann", "acts", " Ans", "acs", "aos", "arts", "ents", "ians", "ums", "asks", "rans", "aves", "eds", "posts", "ANS", "ots", "uns", "nas", "offs", "nan", "ads", "ras", "ats", "orts", "us", "ros", "anks", "an", "ks", "ants", "jas", "lan"], "i": ["f", "ini", "ri", "zi", "m", "l", "y", "ix", "ti", "ip", "ci", "v", "gi", "ij", "hi", "oi", "index", "ki", "q", "b", "ind", "id", "di", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "u", "I", "x", "ui", "mi", "iu", "im"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\na.sort(reverse=True)\\nx=1\\nl=[]\\nfor i in range(n-1):\\n    if i!=n-2:\\n        if a[i]==a[i+1]:\\n            x+=1\\n        else:\\n            if x>=4:\\n                l.append(a[i])\\n                l.append(a[i])\\n                break\\n            elif x==2 or x==3:\\n                l.append(a[i])\\n                x=1\\n                if len(l)>=2:\\n                    break\\n    else:\\n        if a[i]==a[i+1]:\\n            x+=1\\n            if x>=4:\\n                l.append(a[i])\\n                l.append(a[i])\\n                break\\n            elif x==2 or x==3:\\n                l.append(a[i])\\n                x=1\\n                if len(l)>=2:\\n                    break\\n        else:\\n            if x>=4:\\n                l.append(a[i])\\n                l.append(a[i])\\n                break\\n            elif x==2 or x==3:\\n                l.append(a[i])\\n                x=1\\n                if len(l)>=2:\\n                    break\\n#print(a,x)\\nif len(l)<2:\\n    print(0)\\nelse:\\n    print(l[0]*l[1])", "target": "53", "substitutes": {"n": ["z", "nn", "nia", "names", "m", "nt", "t", "name", "N", "len", "ns", "mn", "r", "v", "na", "c", "ng", "sn", "q", "an", "ln", "g", "cn", "nu", "nb", "num", "d", "size", "p", "j", "ne", "gn", "np", "nc", "o", "no", "nl"], "a": ["ba", "xa", "h", "era", "g", "val", "area", "da", "ao", "\u00e4", "ai", "ia", "ab", "eas", "auto", "f", "obj", "el", "m", "att", "t", "to", "result", "history", "test", "er", "aa", "o", "am", "ae", "ga", "ed", "A", "la", "at", "c", "ea", "b", "go", "va", "alpha", "app", "form", "isa", "e", "sa", "ata", "al", "ac", "ma", "aaa", "ana", "out", "array", "ap", "all", "sta", "au", "s", "ca", "now", "es", "aux", "ce", "d", "oa", "act", "u", "ar", "an"], "x": ["xp", "only", "X", "name", "xa", "ax", "xx", "ci", "ver", "v", "status", "co", "wx", "h", "g", "mx", "ct", "val", "version", "xi", "ace", "no", "ts", "content", "z", "f", "el", "ice", "xy", "t", "xs", "ms", "ty", "history", "xt", "index", "long", "ex", "test", "xc", "cox", "batch", "o", "px", "update", "inx", "pe", "str", "ix", "sex", "con", "xxxxxxxx", "k", "check", "tx", "c", "rox", "fx", "j", "none", "e", "xe", "xxxx", "ac", "ic", "w", "xf", "on", "type", "xes", "sync", "hex", "ux", "exclusive", "y", "fill", "step", "ns", "xml", "dx", "any", "rx", "xxx", "ox", "_", "int", "lex", "width"], "l": ["fl", "ol", "ld", "ls", "yl", "el", "line", "jl", "isl", "bl", "lv", "t", "kl", "r", "sol", "il", "lb", "la", "v", "ul", "sl", "lt", "ln", "b", "lc", "g", "tl", "lo", "acl", "cl", "ml", "dl", "L", "lp", "pl", "hl", "lr", "al", "gl", "ell", "li", "left", "dL", "rel", "nl", "list", "rl", "lists", "ll"], "i": ["io", "ini", "ei", "ri", "chain", "zi", "m", "uri", "cli", "y", "t", "this", "ix", "name", "ios", "ti", "info", "s", "ip", "ci", "\u0438", "err", "ji", "im", "v", "gi", "status", "ij", "c", "hi", "index", "ori", "ki", "q", "b", "phi", "ami", "ie", "ind", "id", "di", "num", "ik", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "iri", "iter", "us", "me", "ui", "mi", "iu", "multi", "list", "init"]}}
{"code": "raw_time = int(raw_input())\\n \\nif 0 <= raw_time < 86400:\\n    hour = raw_time / 3600\\n    min = (raw_time - hour * 3600) / 60\\n    sec = (raw_time - hour * 3600 - min * 60)\\n    print(\"%d:%d:%d\")%(hour, min, sec)", "target": "276", "substitutes": {"raw_time": ["rawedtime", "Raw_time", "Raw_Time", "cooked_ts", "raw_total", "cookededtime", " raw_money", "rawmluser", "raw_times", "rawmltime", "cookededts", "rawttime", "knownptpath", "cooked_total", " raw_t", " raw_Time", "raw67num", "raw10user", "raw10time", "rawpthour", "raw10path", "known_hour", "cookedednum", "rawmlpath", "raw_hour", "raw67total", "known_path", "rawptuser", "raw67time", "raw_t", "rawedtotal", "rawtnum", "raw_Time", "raw10hour", "raw_ts", "raw_current", "knownpttime", " raw_times", "raw_tim", "raw67ts", "rawttotal", "cookededtotal", "rawptpath", "knownptuser", "rawpttime", " raw_tim", "knownpthour", "rawednum", "cooked_num", "rawedts", "cooked_time", "rawmlhour", "raw_money", "rawmlcurrent", "known_user", "raw_user", "rawmlTime", "raw_num", "Raw_current", "raw_path", "rawtts", "known_time"], "hour": ["horse", "hop", "org", "iso", "date", "mon", "tick", "ir", "night", "hum", "ha", "day", "ow", "month", "row", "rot", " Hour", "door", "over", "co", "arm", "actor", "h", "job", "hou", "era", "user", "http", "inter", "hd", "host", "image", "app", "act", "port", "frame", "minute", "room", "addr", "ive", "dom", "rod", "block", "server", "time", "och", "hr", "week", "home", "Hour", "year", "im", "item"], "min": ["MIN", "Mini", "m", "mon", " minute", "cond", "second", "lin", "day", "month", "ms", "mn", "div", "un", "arm", "Min", "mod", "amin", "minus", "pre", "rm", "mem", "mic", "imm", "man", "col", "local", "minute", "mat", "doc", "mel", "time", "loc", "sin", "part", "don", "mini", "mm", "mid", "mi", "mins", "im", "sol"], "sec": ["ner", "sys", "sub", "win", "sc", "cond", "cs", "se", "second", "seq", "s", "con", "ms", "rc", "sch", "micro", "SEC", "secure", "Sec", "c", "nd", "gc", "ct", "cos", "next", "tz", "sem", "ss", "ec", "cle", "sel", "nc", "loc", "cell", "sq", "us", "ser", "sol", "isec"]}}
{"code": "def main():\\n    N = int(input())\\n    S = [input() for _ in range(N)]\\n    # B***\\n    # ***A\\n    # B**A\\n    c_a, c_b, c_ba = 0, 0, 0\\n    ans = 0\\n    for s in S:\\n        if s[0] == 'B' and s[-1] == 'A':\\n            c_ba += 1\\n        elif s[-1] == 'A':\\n            c_a += 1\\n        elif s[0] == 'B':\\n            c_b += 1\\n        ans += len(s.split('AB')) - 1\\n    ans += max(0, c_ba - 1)\\n    if c_ba > 0:\\n        if c_a > 0:\\n            c_a -= 1\\n            ans += 1\\n        if c_b > 0:\\n            c_b -= 1\\n            ans += 1\\n    ans += min(c_a, c_b)\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "456", "substitutes": {"N": ["Num", "K", "H", "C", "F", "CNN", "NG", "NB", "NI", "M", "NR", "NP", "NA", "ND", "NT", "D", "NS", "NM", "L", "TN", "P", "T", "GN", "J", "n", "Z", "V", "I", "Ns", "NC", "NUM", "NN", "NH"], "S": ["H", "C", "X", "R", "G", "W", "PS", "s", "M", "A", "U", "E", "O", "DS", "D", "NS", "L", "P", "Q", "T", "J", "Z", "V", "I", "B", "CS", "POS"], "_": ["ay", "all", "y", "ix", " j", "__", "place", " p", "ex", "val", "d", "j", " l", "al", "___", "x", " g"]}}
{"code": "a, b, c, k = map(int, input().split())\\nans = a-b\\nif k%2: ans *= -1\\nprint(ans)", "target": "669", "substitutes": {"a": ["z", "f", "ba", "m", "am", "l", "y", "t", "af", "s", "au", "i", "A", "r", "at", "v", "h", "d", "p", "alpha", "da", "ao", "e", "sa", "aa", "art", "ac", "n", "o", "w", "ab", "x", "ar", "an"], "b": ["f", "rb", "ba", "ib", "m", "be", "l", "y", "bc", "to", "i", "cb", "fb", "r", "ca", "v", "db", "g", "nb", "p", "bi", "br", "bf", "e", "bo", "beta", "bis", "n", "ob", "bs", "B", "ab", "x", "bb"], "c": ["z", "f", "m", "C", "l", "y", "t", "cs", "bc", "cf", "ci", "cb", "ca", "v", "lc", "g", "cc", "d", "p", "col", "ec", "e", "cd", "dc", "n", "x", "cm"], "k": ["dk", "z", "f", "K", "mc", "m", "kr", "ka", "t", "bc", "kl", "s", "i", "kk", "ke", "ch", "v", "mk", "q", "g", "ak", "ik", "d", "kok", "p", "km", "j", "kw", "conf", "n", "tc", "o", "u", "sk", "ko", "x", "ku", "ks"], "ans": ["ens", "ps", "ls", "mas", "aned", "AN", "oss", "cs", "rs", "cons", "pan", "gs", "amps", "iann", "s", "ms", "anas", "ins", "aus", "ns", "ons", "outs", "ann", "res", "aps", "aos", "es", "asks", "rans", "ands", "eds", "vs", "ANS", "ds", "leans", "uns", "nas", "offs", "anes", "ams", "bs", "books", "ras", "ats", "us", "vals", "ts", "anks", "an", "ks", "ants", "olds", "lan"]}}
{"code": "N = int(input())\\nP = []\\nfor i in range(N):\\n  P.append(int(input()) - 1)\\n\\nA = [0] * N\\nfor i in range(N):\\n  A[P[i]] = i\\n\\nans,cnt = 0,0\\nwork = -1\\nfor i in range(N):\\n  if work < A[i]:\\n    cnt += 1\\n    ans = max(ans, cnt)\\n  else:\\n    cnt = 1\\n  work = A[i]\\n\\nprint(N-ans)", "target": "525", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "X", "AN", "F", "Sn", "R", "Ni", "W", "CNN", "NB", "NI", "M", "NR", "MN", "CN", "NP", "NA", "S", "ND", "O", "New", "NT", "D", "NS", "L", "TN", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "Network", "NH"], "P": ["Y", "K", "PK", "IP", "H", "C", "X", "Pos", "R", "W", "PS", "Next", "M", "PA", "PO", "PU", "NP", "Pi", "Pay", "S", "E", "New", "Part", "p", "L", "TP", "PP", "Q", "Pen", "T", "DP", "J", "AP", "V", "I", "B", "PI", "Ps", "CP", "Pe", "POS", "BP"], "i": ["f", "io", "ini", "ei", "ri", "zi", "cli", "m", "a", "l", "y", "t", "iy", "ti", "ip", "ci", "r", "k", "ji", "ati", "gi", "v", "ij", "c", "hi", "index", "ki", "start", "b", "g", "yi", "ind", "id", "di", "d", "p", "bi", "j", "pi", "e", "ai", "_", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "u", "x", "iti", "mi", "iu", "im", "ui", "new"], "A": ["App", "Ass", "AR", "K", "AI", "AA", "Ar", "H", "C", "API", "AC", "Al", "a", "AN", "X", "R", "AV", "Abs", "BA", "PA", "CA", "AL", "M", "U", "JA", "Av", "NA", "S", "E", "As", "AU", "HA", "Array", "AT", "All", "Ag", "AF", "L", "GA", "An", "At", "AM", "This", "Map", "And", "SA", "T", "The", "AB", "AP", "V", "One", "I", "B", "Alpha", "ACT", "AE"], "ans": ["ens", "stats", "ings", "wan", "ps", "ws", "lines", "ls", "win", "Works", "vers", "AN", "ones", "ran", "cs", "rs", "nt", "amps", "xs", "s", "ms", "reads", "ins", "aus", "ns", "ons", "outs", "ann", "os", "acts", "res", "issues", "arts", "es", "ents", "angs", "ys", "rans", "wn", "yes", " means", "Work", "ids", "vs", "ANS", "works", "ss", "ds", "results", "anes", "nz", "workers", " spans", "ats", "x", "ions", "anks", "an", "ks", "ants"], "cnt": ["ctctr", "Cnz", "wount", "acount", "wnd", "ctot", " cnd", "uncount", "Cnd", "acnt", "account", "Cpt", "cnc", " cnz", "ctnc", "Ccount", " cot", "cot", "CNT", " cctr", "acNT", " cpt", "cNT", "Cct", "uncpt", "Count", "ccount", " ccount", "Cnt", "cnz", "cpt", "cont", "uncnz", "cctr", "ctnt", " count", " cNT", "uncnt", " cnc", "cnd", "cct", " cct", "coot", "conc", "coctr", "wnt", "count", "wct"], "work": ["task", "max", "ws", "out", "win", "a", "pkg", "conn", "W", "wd", "info", "step", "sw", "working", "age", "un", "check", "WORK", "index", " Work", "start", "job", "Work", "num", "works", "process", "p", "man", "count", "pi", "act", "end", "total", "self", "worker", "run", "current", "align", "weight", "rank", "workers", "n", "pay", "w", "part", "sk", "no", "week", "worked", "x", "ack"]}}
{"code": "import numpy as np\\n\\nn = int(input())\\ntable,ans = np.zeros((9,9)),0\\n\\nfor k in range(n):\\n    num = str(k+1)\\n    if int(num[0])!=0 and int(num[-1])!=0:\\n        table[int(num[0])-1][int(num[-1])-1]+=1\\n\\nfor i in range(9):\\n    for j in range(9):\\n        ans += table[i][j]*table[j][i]\\nprint(int(ans))", "target": "168", "substitutes": {"n": ["z", "f", "nn", "names", "m", "l", "t", "nt", "number", "nr", "s", "N", "fn", "ns", "nm", "en", "input", "mn", "na", "c", "ln", "sn", "q", "cn", "kn", "nb", "tn", "d", "p", "ne", "net", "np", "nan", "ic", "nc", "w", "nl", " N", "count"], "table": ["type", "map", "offset", "obj", "tmp", "sum", "ta", "bl", "t", "number", "row", "Table", "buffer", "TABLE", "db", "database", "index", "term", "master", "page", "tree", "stable", "bank", "p", "col", "window", "td", "total", "trans", "bool", "column", "binary", "tf", "tr", "cache", "able", "cell", "tab", "set", "ab", "list", "primary", "bar", "data", "count"], "ans": ["ens", "ls", "annot", "aned", "AN", "ran", "ean", "pan", "rs", "gs", "amps", "ins", "os", "ms", "anas", "ns", "aus", "ann", " Ans", "aos", "arts", "es", "ians", "ums", "iban", "rans", "ands", "eds", "posts", "yes", " means", "san", "tan", "ANS", "can", "leans", "nas", "anes", "nan", "ates", "ts", "anks", "an", "ks", "ants", "lan"], "k": ["f", "K", "m", "kr", "kh", "t", "ck", "kl", "ikk", "key", "kk", "ke", "kid", "v", "c", "mk", "ki", "q", "g", "ak", "kn", "unk", "ijk", "wk", "ik", "d", "p", "kj", "ek", "kw", "tk", "sk", "ko", "ku", "ks"], "num": ["img", "tu", "Num", "nom", "conv", "m", "mon", "desc", "hex", "tim", "node", "draw", "ord", "dev", "number", "note", "nam", "con", "ip", "len", "ten", "nm", "mn", "phys", "ver", "byte", "div", "en", "check", "cal", "mod", "th", "nu", "bit", "code", "test", "alph", "sam", "eng", "form", "bin", "valid", "net", "mat", "block", "no", "NUM", "um", "digit", "pn", "gen", "unit", "dat"], "int": ["interface", "add", "max", "format", "quote", "inet", "ref", "val", "pre", "call", "round", "dir", "frac", "bool", "addr", "integer", "iter", "list", "count", "det", "desc", "ext", "number", "uint", "pret", "na", "index", "long", "double", "intel", "string", "ind", "init", "net", "ints", "txt", "float", "print", "str", "elt", "nt", "open", "Int", "inter", "alpha", "vert", "bin", "inc", "dec", "digit", "rand", " Int", "range", "cond", "ret", "all", "oct", "ip", "switch", "point", "db", "mot", "code", "id", "internal", "char", "null", "port", "INT", "short", "dat"], "i": ["f", "z", "io", "ini", "zi", "m", "a", "l", "y", "t", "ix", "ti", "ip", "ci", "v", "ij", "hi", "q", "b", "ie", "id", "di", "p", "bi", "pi", "e", "ai", "it", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "x", "mi", "iu"], "j": ["z", "f", "obj", "jl", "m", "ja", "l", "y", "t", "key", "jp", "ji", "r", "v", "ij", "c", "q", "b", "g", "jac", "p", "kj", "it", "jj", "jump", "aj", "J", "o", "uj", "dj", "on", "x", "bj", "js", "jc"]}}
{"code": "n=int(input())\\na=[int(x) for x in input().rstrip().split()]\\n\\nnow=1\\nmod=10**9+7\\ndef lcm(a,b):#\u6700\u5c0f\u516c\u500d\u6570\\n    ori_a=a\\n    ori_b=b\\n    while b!=0:\\n        a,b=b,a%b\\n    return (ori_a*ori_b)//a\\n  \\nfor i in a:\\n  now=lcm(i,now)\\n# print(now)\\nprint(sum([now//i for i in a])%mod)\\n  \\n", "target": "477", "substitutes": {"n": ["z", "f", "nn", "m", "l", "t", "nt", "nr", "s", "N", "ns", "nm", "k", "v", "na", "c", "sn", "q", "cn", "nu", "nb", "num", "d", "p", "j", "np", "nc", "o", "w"], "a": ["z", "ba", "array", "m", "am", "ae", "l", "y", "t", "s", "i", "A", "r", "ca", "input", "v", "c", "ak", "d", "p", "alpha", "da", "ao", "e", "sa", "aa", "ac", "o", "ma", "w", "ab", "aaa", "an"], "x": ["z", "xes", "xp", "X", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "i", "xx", "ax", "r", "xb", "rax", "v", "dx", "wx", "mx", "ex", "fx", "ross", "p", "rx", "xc", "e", "ox", "xe", "xi", "px", "xf", "xd", "tx", "inx"], "now": ["sup", "min", " base", "bc", " scale", "step", "cb", "g", " t", " eb", "exp", " step", "bf", "sb", " r", " seed", "beta", " power", "bb", "prime", " round", " exp", " f"], "mod": ["z", "min", "ib", "max", "m", "mb", "be", "bc", "cb", "div", "bound", " Mod", "mult", "fun", "p", "round", "exp", "j", "bf", "Mod", "MOD", "bo", "beta", "bs", "dec", "base"], "b": ["z", "f", "ba", "ib", "m", "l", "y", "t", "bc", "i", "r", "v", "c", "g", "nb", "d", "p", "bi", "j", "e", "o", "bs", "w", "B", "ab", "bb"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\n\\ntot = 3 ** N\\n\\ncnt_odd, cnt_even = 0,0\\n\\nfor i in range(N):\\n\tif A[i] % 2 == 0:\\n\t\tcnt_even += 1\\n\telse:\\n\t\tcnt_odd += 1\\n\\nans = tot - (2**cnt_even)*(1**cnt_odd)\\nprint(ans)", "target": "282", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "AN", "F", "Sn", "R", "G", "CNN", "NB", "NI", "M", "NR", "NA", "Size", "S", "O", "ND", "NT", "D", "NS", "L", "NM", "P", "No", "UN", "T", "GN", "J", "n", "Z", "V", "The", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "A": ["AA", "Ar", "H", "C", "X", "AN", "AC", "a", "IA", "But", "M", "CA", "LA", "TA", "Given", "There", "JA", "Av", "NA", "S", "As", "D", "AT", "Array", "AF", "L", "GA", "An", "mA", "P", "AM", "This", "You", "AS", "AB", "Answer", "V", "AP", "I", "B", "Alpha", "SA"], "tot": ["tdot", "tdob", "Tot", "atota", "vtot", "Total", "tob", "atoby", "tota", "tOT", "atotal", "atot", "vtotal", "mot", "toby", "vtota", "tdotal", "mota", "Tob", "motal", "total", "tootal", "vtoby", "toot", "TOT", "moby", "toOT", "tdOT", "toob"], "cnt_odd": ["cnt_after", "count_any", "countLeven", "cntLeven", "countLany", "cnd_dev", "cntJafter", "cnt_oint", "ccount_odd", "cntJeven", "cntLafter", "count_after", "cntJany", "cntLodd", "cnt64odd", "ccount_oint", "countLafter", "cnt64even", "cnt_dev", "ccount_even", "cnd_odd", "count_odd", "countLodd", "cntJodd", "cnt_ind", "count_even", "cnd_even", "cnt64dev", "cnt_any", "cntLany", "ccount_ind"], "cnt_even": ["cct_quick", "cct_compl", "cnt10odd", "cnt10quick", "cnt_own", "cnt_Even", "cnt_high", "cnt_quick", "cct_Even", "cct_even", "cent_even", "cnt_compl", "cent_high", "cnt10even", "cent_odd", "cct_odd", "cnt10Even", "cct_own"], "i": ["f", "ini", "zi", "uri", "m", "y", "t", "ix", "ti", "s", "r", "ji", "gi", "v", "ij", "c", "ki", "b", "yi", "sim", "ind", "id", "di", "num", "bi", "multi", "j", "pi", "ii", "xi", "n", "si", "batch", "I", "u", "li", "x", "ui", "mi", "im"], "ans": ["cas", "sv", "ls", "names", "nets", "aned", "AN", "oss", "ran", "idents", "pan", "amps", "iann", "os", "ars", "anas", "aus", "ns", "ons", "people", "ann", " Ans", "aos", "beans", "es", "asks", "iban", "ians", "rans", "eds", "ANS", "can", "leans", "nas", "anes", "mens", "mails", "ats", "anks", "an", "ants", "scan", "jas", "lan"]}}
{"code": "N=int(input())\\nS=list(map(int,input().split()))\\nS.sort()\\nS.reverse()\\n\\ndic={}\\nfor i in range(N):\\n    tmp=S[i]\\n    if tmp in dic:\\n        dic[tmp]+=1\\n    else:    \\n        dic[tmp]=1\\nkouho1=0\\nkeys = [k for k, v in dic.items() if v >= 4]\\nkeys.sort()\\nkeys.reverse()\\nif len(keys)>=1:\\n    kouho1=keys[0]*keys[0]\\n\\nkouho2=0\\nkeys = [k for k, v in dic.items() if v >= 2]\\nkeys.sort()\\nkeys.reverse()\\nif len(keys)>=2:\\n    kouho2=keys[0]*keys[1]\\n\\nprint(max(kouho1,kouho2))\\n\\n\\n", "target": "53", "substitutes": {"N": ["Num", "K", "H", "C", "X", "F", "Sn", "R", "Ni", "W", "G", "NB", "NI", "M", "NR", "A", "NP", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "No", "Q", "T", "GN", "J", "Z", "n", "V", "I", "B", "Ns", "NC", "NN"], "S": ["Y", "BS", "SI", "H", "C", "Si", "SS", "X", "Ins", "F", "R", "SL", "G", "JS", "SB", "LS", "s", "OS", "M", "A", "Sing", "RS", "Save", "Windows", "New", "DS", "D", "SN", "NS", "Array", "SU", "Is", "L", "SP", "P", "TS", "List", "T", "Z", "VS", "V", "I", "B", "CS", "GS", "Pres", "Set"], "dic": ["Dics", "tdics", " dict", "edict", "didict", "edic", "pdic", "dsac", " dication", "didic", " dIC", "daIC", "dsic", "edics", "dict", "pdict", "daict", "daic", "indric", " dics", "mdict", "pdica", "daics", " dac", "didication", "tdica", "mdication", "Dic", " dric", "indic", "dics", "DIC", "indics", "Dict", "tdict", "fdIC", "dication", "dsIC", "fdric", "dric", "fdic", "edIC", "dsics", "mdic", "dac", "tdic", "didics", "Dac", "pdics", "mdics", "dica", "fdics", " dica", "dIC", "indIC"], "i": ["f", "zi", "m", "y", "t", "ix", "ti", "key", "ip", "r", "gi", "ij", "c", "ori", "index", "q", "b", "sim", "ind", "id", "di", "num", "d", "p", "bi", "j", "pi", "it", "ii", "xi", "n", "si", "ic", "I", "li", "x", "mi", "im"], "tmp": ["img", "emp", "obj", " temp", " key", "m", "vv", "tm", " ind", "src", "xy", "pkg", "nt", "t", "tt", "old", "key", "etc", "attr", "tp", "yy", "sp", "perm", "mk", "mut", "term", "gt", "phi", "mp", "temp", "nb", "ind", "prev", " prev", "ctx", "tg", "tv", "nv", "orig", "p", " val", "cp", "pi", "td", "seed", "cmp", "tf", "tk", "np", "vt", "txt", "cache", "var", "tc", "loc", "rt", "mm", "prefix", "prime", "cv", "new"], "kouho1": ["kounho3", "koufo3", "kouhea001", "koufo1", "koulho1", "kounfo3", "kouphione", "kougo3", "kouphi6", "kouhoone", "kounho2", "kouphi1", "kounfo2", "k\u00fchea3", "kouha0", "kounfo0", "k\u00fcho1", "kougoone", "k\u00fchea1", "koulho3", "koufo2", "k\u00fcho3", "kouhea3", "k\u00fchea001", "kougo2", "koulho0", "kouha6", "kougo001", "koulho6", "kouho6", "kouho001", "kouphi3", "kouha3", "kouphi0", "kouphi001", "kouheaone", "k\u00fcho001", "kougo1", "kouha1", "koufo0", "k\u00fcheaone", "kouhea1", "kouho3", "kounho0", "k\u00fchoone", "kounfo1", "kougo0", "kouha2", "kouho0", "kounho1"], "keys": ["ties", "times", "names", "ones", "hands", "pages", "modules", "reads", "cells", "phis", "errors", "ers", "ys", "tests", "ies", "bits", "links", "parts", "lets", "helps", "bys", "files", "chains", "actions", "lights", "tags", "groups", "vers", "xs", "ms", "ports", "styles", "eds", "docs", "changes", "rots", "ots", "codes", "sticks", "als", "apps", "ls", "headers", "gs", "fields", "services", "ites", "ids", "rows", "versions", "ashes", "papers", "cache", "workers", "items", "bes", "where", "vals", "qs", "ks", "ps", "els", "details", "users", "checks", "cases", "hawks", "amps", "days", "key", "ians", "writers", "players", "ops", "leases", "ors", "Keys", "bs", "lists"], "k": ["K", "sc", "m", "kr", "kh", "ka", "y", "t", "ck", "kl", "ikk", "ok", "kk", "key", "ke", "kar", "c", "mk", "h", "q", "g", "ak", "ijk", "ik", "d", "p", "j", "kj", "ek", "kw", "tk", "o", "w", "u", "x", "ku", "ks"], "v": ["f", "ve", "sv", "conv", "vv", "m", "qv", "dev", "lv", "t", "y", "l", "ver", "value", "vp", "c", "h", "q", "b", "g", "val", "tv", "nv", "vs", "d", "va", "p", "vi", "j", "e", "vol", "vt", "var", "uv", "vr", "V", "w", "o", "n", "x", "ev", "vc", "cv", "nov"], "kouho2": ["kuho2", "kouju0", "koulgo7", "koufo3", "koufo1", "kouhea22", "kuho3", "koupi2", "kougo3", "kouju4", "koulju2", "kougo7", "koulho4", "koulho2", "kufo0", "kouhea4", "kouha0", "kufo2", "kouju22", "koulju3", "koulho3", "koufo2", "kouju7", "kouhea3", "kouho02", "koulgo3", "kouho4", "kougo2", "kouju02", "kouju2", "koufo4", "koulho22", "kouju1", "kufo1", "kouhea2", "kougo02", "koulju22", "kufo3", "kouha3", "koulju4", "koulho02", "koupi7", "kuho1", "kouha1", "kouho22", "koufo22", "koufo0", "kouho7", "kouho3", "kouju3", "koupi02", "koupi3", "koulgo02", "koulgo2", "kuho0", "kouha2", "kouho0", "koulho7"]}}
{"code": "h,w,k=map(int,input().split())\\ndp=[0]*(w)\\nl=[1,1,2,3,5,8,13,21,34]#n\u672c\u306e\u7e26\u7dda\u306b\u9ad8\u30551\u306evalid\u306a\u6a2a\u68d2\u3092\u5f15\u304f\u901a\u308a\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306b\u306a\u308b\\n#a_n:=n\u672c\u306e\u7e26\u7dda\u306bvalid\u306a\u6a2a\u68d2\u3092\u5f15\u304f\u901a\u308a\u306e\u7dcf\u6570\u3001\u3068\u3059\u308c\u3070\\n#n+1\u672c\u306e\u6642\u306f1.1\u30682\u672c\u76ee\u306b\u6a2a\u68d2\u3092\u5f15\u304f\uff082\u30683\u306e\u9593\u306b\u5f15\u3051\u306a\u3044\u306e\u3067a_n-1\u901a\u308a\uff09\\n#          2.                \u5f15\u304b\u306a\u3044\uff08a_n\u901a\u308a\uff09\\n#\u3088\u3063\u3066\u6f38\u5316\u5f0fa_n+1=a_n+a_n-1\u304c\u6210\u7acb\u3002\\ndp[0]=1\\nmod=10**9+7\\nr=[0]*w\\nfor i in range(h):\\n    for i in range(w):\\n        r[i]=dp[i]*l[i]*l[w-1-i]#\u5de6\u53f3\u306b\u6a2a\u68d2\u3092\u5f15\u304b\u306a\u3044\\n        if i>=1:\\n            r[i]+=dp[i-1]*l[i-1]*l[w-1-i]#\u5de6\u306b\u306e\u307f\u6a2a\u68d2\u3092\u5f15\u304f\\n        if i<=w-2:\\n            r[i]+=dp[i+1]*l[i]*l[w-2-i]#\u53f3\u306b\u306e\u307f\u6a2a\u68d2\u3092\u5f15\u304f\\n        r[i]%=mod\\n    dp,r=r,dp\\n\\nprint(dp[k-1])", "target": "240", "substitutes": {"h": ["z", "f", "he", "m", "H", "hm", "y", "t", "ha", "r", "ch", "v", "c", "hi", "q", "b", "g", "p", "j", "ht", "e", "hl", "n", "hr", "o", "x"], "w": ["z", "f", "nw", "m", "wh", "y", "t", "W", "wd", " W", "i", "r", "v", "wa", "wx", "c", "q", "wl", "b", "wr", "work", "d", "p", "window", "rw", "hw", "kw", "wt", "fw", "wid", "weight", "n", "u", "x", "width"], "k": ["K", "m", "kr", "kh", "ka", "t", "ck", "kl", "i", "kk", "ke", "v", "mk", "q", "b", "g", "ik", "p", "km", "j", "kw", "tk", "n", "o", "sk", "ko", "ku", "ks"], "dp": ["dk", "ps", "df", "bd", "wd", "dd", "pp", "dt", "tp", "db", "sp", "dx", "dq", "D", "di", "pd", "d", "dl", "da", "ds", "cp", "pi", "dc", "np", "DP", "dh", "dj", "dr", "hp"], "l": ["f", "ls", "el", "le", "m", "t", "kl", "i", "lb", "v", "sl", "ln", "q", "lc", "g", "dl", "p", "L", "j", "lp", "pl", "hl", "lr", "n", "o", "li", "nl", "ll"]}}
{"code": "import sys,math\\nN = int(input())\\n\\nif not ( 1 <= N <= 10 ** 9 ):\\n    sys.exit\\n\\nroot_N = math.floor(math.sqrt(N))\\nprint(root_N ** 2)\\n", "target": "330", "substitutes": {"N": ["Num", "H", "C", "NF", "AN", "F", "R", "Ni", "G", "CNN", "NG", "NI", "NB", "M", "NV", "NR", "CN", "A", "NL", "NA", "S", "O", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "P", "Q", "NPR", "T", "GN", "n", "V", "I", "B", "Ns", "NUM", "NO", "NN", "NH"], "root_N": ["root___M", " root_Scott", "root___N", "root_I", "root_L", "Root_N", "root_C", " root_M", "Root_I", "root___Scott", "root_R", "Root_C", "Root_L", "root_Scott", "root_M", "root___R", " root_R"]}}
{"code": "n,q=[int(i) for i in input().split()]\\ns=input()\\n\\n\\ndp=[0]*(n)\\nans=0\\nfor i in range(1,n):\\n    if s[i-1]==\"A\" and s[i]==\"C\":\\n        ans=ans+1\\n    dp[i]=ans\\n\\nfor i in range(q):\\n    l,r=[int(i) for i in input().split()]\\n    print(dp[r-1]-dp[l-1])\\n", "target": "155", "substitutes": {"n": ["nn", "m", "ni", "y", "t", "nt", "nr", "N", "len", "ns", "k", "v", "na", "c", "h", "sn", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "j", "e", "np", "nc", "o", "w", "x"], "q": ["z", "qt", "f", "qa", "m", "iq", "t", "que", "k", "ue", "query", "c", "dq", "h", "g", "queue", "d", "p", "end", "quant", "qi", "e", "Q", "sq", "ql", "u", "quit", "w", "qq", "x", "qs", "qu"], "i": ["z", "ini", "ei", "ri", "zi", "\u00ed", "m", "cli", "uri", "a", "ir", "y", "t", "ix", "iy", "ti", "ip", "ci", "k", "il", "ati", "v", "adi", "gi", "ij", "c", "oi", "index", "ki", "phi", "yi", "ind", "id", "di", "ik", "d", "p", "bi", "j", "pi", "fi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "iri", "li", "I", "ia", "u", "o", "x", "ui", "mi", "iu", "iti"], "s": ["ps", "sts", "ings", "sv", "ls", "ares", "a", "sis", "cs", "rs", "t", "gs", "ists", "xs", "ins", "scripts", "ns", "sw", "aps", "sp", "sl", "c", "ys", "S", "p", "ains", "ss", "ds", "erences", "sb", "sa", "its", "ses", "si", "abs", "bs", "sq", "tes", "ats", "ts", "qs", "js"], "dp": ["ps", "deb", "df", "bp", "wd", "pb", "gp", "dd", "pp", "dro", "jp", "dt", "tp", "db", "pa", "vp", "dq", "di", "dm", "pd", "d", "du", "dl", "p", "dep", "da", "ds", "lp", "cp", "td", "tap", "dial", "sb", "cd", "dc", "np", "DP", "dh", "bps", "dj", "dr", "wp", "xd"], "ans": ["ens", "ps", "ls", "oss", "anc", "pan", "rs", "cons", "cs", "amps", "xs", "gs", "ins", "anas", "ms", "aus", "ns", "os", "ons", "ann", "aps", "aos", "arts", "es", "ents", "rans", "ys", "ands", "eds", "posts", "vs", "ANS", "eps", "can", "ds", "nas", "ai", "uns", "offs", "gn", "nan", "ats", "us", "ions", "an", "ks", "ants", "scan", "lan"], "l": ["f", "ls", "le", "m", "t", "len", "la", "lb", "v", "sl", "c", "lt", "ln", "b", "lc", "g", "lo", "d", "p", "L", "j", "lp", "pl", "e", "lr", "o", "li", "nl", "ll"], "r": ["f", "rb", "ri", "m", "rr", "sr", "cr", "R", "rs", "t", "fr", "rc", "rl", "v", "c", "h", "b", "g", "rn", "re", "er", "d", "p", "br", "j", "ro", "e", "lr", "right", "ur", "rd", "mr", "w", "dr", "rar", "ar", "rt"]}}
{"code": "n = int(input())\\nbtc = 380000.0\\na = 0\\n# \u5358\u4f4d\u6bce\u306b\u52a0\u7b97\u3059\u308b\u3002\\nfor _ in range(n):\\n    x, u = input().split()\\n    if u == 'JPY':\\n        a += int(x)\\n    elif u == 'BTC':\\n        a += float(x)*btc\\nprint(a)\\n", "target": "270", "substitutes": {"n": ["z", "f", "nn", "m", "t", "nt", "nr", "s", "N", "i", "fn", "ns", "nm", "k", "v", "na", "c", "sn", "q", "cn", "nb", "num", "d", "p", "dn", "j", "nan", "nc", "o"], "btc": ["ptcp", "stc", "ctx", "ptc", "btcp", "ptx", "ptg", "stx", "ctcp", "btg", "ctc", "btx", "stg", "stcp", "ctg"], "a": ["f", "ba", "fa", "m", "ae", "t", "af", "xa", "A", "ca", "r", "c", "ea", "b", "g", "area", "d", "p", "alpha", "da", "ao", "e", "sa", "aa", "ac", "ab", "aaa"]}}
{"code": "x=[int(a) for a in input().split()]\\nprint(min(x[0]*x[1],x[2]))", "target": "751", "substitutes": {"x": ["z", "f", "edit", "xes", "m", "xp", "X", "ux", "xy", "y", "t", "ix", "xs", "xa", "ax", "xx", "xxxxxxxx", "v", "check", "xt", "dx", "wx", "c", "q", "b", "fixed", "mx", "foo", "ex", "ct", "fx", "test", "ctx", "d", "works", "p", "man", "rx", "xxx", "xc", " xx", "ox", "xe", "cox", "xxxx", "mix", "xi", "n", "lex", "w", "px", "plus", "xf", "xd", "tx", "st"], "a": ["z", "f", "ba", "ae", "l", "y", "t", "af", "xa", "i", "ca", "A", "la", "v", "na", "c", "ea", "b", "val", "d", "va", "p", "alpha", "da", "j", "oa", "\u00e4", "aka", "sa", "ya", "aa", "n", "ma", "u", "ia", "ana", "an"]}}
{"code": "S = input()\\nK = int(input())\\n\\nif(S.count(S[0]) == len(S)):\\n    print(len(S)*K//2)\\nelse:\\n    cnt = 0\\n    lst = []\\n    tmp = S[0]\\n    for i in range(len(S)):\\n        if(tmp == S[i]):\\n            cnt += 1\\n        else:\\n            tmp = S[i]\\n            if(cnt > 1):\\n                lst.append(cnt)\\n            cnt = 1   \\n    if(cnt > 1):\\n        lst.append(cnt)\\n        \\n    ans = 0\\n    for i in lst:\\n        ans += K*(i//2)\\n    if(S[0] != S[-1]):\\n        print(ans)\\n    else:\\n        a = 0\\n        b = 0\\n        for i in range(len(S)):\\n            if(tmp != S[i]):\\n                break\\n            a += 1\\n        for i in S[::-1]:\\n            if(tmp != i):\\n                break\\n            b += 1\\n        print(ans+((a+b)//2-(a//2+b//2))*(K-1))", "target": "723", "substitutes": {"S": ["Y", "SER", "Sample", "BS", "Bytes", "SI", "H", "C", "Si", "SS", "X", "F", "GES", "R", "SL", "G", "JS", "W", "SM", "LS", "SB", "PS", "s", "N", "M", "SOURCE", "A", "Sub", "RS", "CSS", "SIM", "Save", "E", "SR", "DS", "Source", "D", "SAM", "NS", "Series", "SU", "L", "SP", "FS", "P", "TS", "Q", "ITS", "SH", "List", "T", "SF", "SA", "SE", "Z", "VS", "V", "Session", "I", "Sort", "B", "CS", "GS", "States", "Set", "SQL"], "K": ["Y", "HK", "FK", "PK", "H", "C", "X", "F", "KK", "R", "SK", "G", "W", "Check", "Ak", "N", "M", "A", "k", "KB", "KR", "KI", "Mask", "KS", "Size", "IND", "E", "VK", "NK", "D", "UK", "TN", "P", "Q", "KE", "T", "J", "Z", "V", "I", "B", "KC", "Kind", "MK", "Context"], "cnt": ["acnc", "conount", "cst", " ctr", " cnd", "connt", "acnt", "Cpt", "lcct", "acpt", "cnc", "lcnd", "lcount", "crt", "acct", " cpt", "lnt", "cNT", " cnton", "Cct", "cld", "lcNT", "secnton", "lld", "secrt", "lrt", "acnd", "Cnt", "acst", "lnd", "ncNT", "cnton", "connd", "lnton", "npt", "lNT", " cld", "gNT", "ctr", "lcnt", "lnc", " cst", "nctr", "lctr", " count", "secNT", " cNT", "nct", "ncnt", "lct", "nnt", "gnt", " crt", "acld", " cnc", "Cst", "cnd", "cct", " cct", "nst", "gnc", "gount", "lount", "conct", "secnt", "ncct", "count", "cpt"], "lst": ["Lsts", "mlst", "lsnd", "lsts", "Llist", "mlist", "dlsts", "flset", "lsbl", "tist", "nlist", "lsset", " llist", "mlnd", "Lnd", "dlst", "nllist", "lsist", "lsst", "lset", "dlset", "lnd", " lsts", "flist", "Lset", "flst", "tst", "llist", "List", "mlset", "tbl", "Lst", "nlsts", "lbl", "Lbl", "list", "dlist", "tnd", " list", "flsts", "nlst"], "tmp": ["emp", "obj", "tm", "m", "MP", "elt", "pkg", "ret", "nt", "t", "tt", "attr", "jp", "sp", "perm", "snap", "tar", "mk", "mut", "term", "gt", "phi", "mp", "temp", "nb", "test", "cmd", "pre", "ctx", "p", "tif", "pretty", "j", "cp", "ht", "pi", "td", "Temp", "cmp", "np", "vt", "txt", "template", "cache", "var", "tc", "buff", "TT", "rt", "st"], "i": ["f", "ini", "ei", "ri", "zi", "m", "uri", "l", "y", "t", "ix", "ti", "info", "ip", "ci", "k", "ji", "ati", "gi", "v", "adi", "gu", "ij", "c", "hi", "index", "ori", "oi", "q", "phi", "g", "ki", "yi", "ind", "id", "di", "ik", "iat", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "u", "x", "mi", "iu", "im"], "ans": ["ens", "stats", "ls", "names", "oss", "ran", "pan", "rs", "amps", "xs", "ms", "anas", "ins", "aus", "ons", "ns", "os", "ann", "ars", " Ans", "aps", "news", "aos", "arts", "ents", "es", "angs", "rans", "eds", "yes", " means", "terms", "ANS", "ots", "uns", "nas", "offs", "ints", "anes", "nan", "ads", "ras", "ats", "us", "ros", "vals", "anks", "an", "ks", "ants", "lan"], "a": ["ba", "apa", "ae", "sta", "af", "au", "ga", "xa", "A", "ca", "at", "la", "pa", "na", "ea", "an", "eu", "area", "va", "alpha", "ada", "ao", "oa", "\u00e4", "aka", "ai", "sa", "ana", "ata", "aq", "aa", "aj", "al", "ac", "art", "ma", "u", "ia", "ab", "aaa", "ar", "ach", "am"], "b": ["z", "f", "rb", "ib", "out", "be", "l", "y", "t", "bd", "bc", "by", "cb", "r", "k", "fb", "lb", "v", "db", "c", "g", "wb", "nb", "d", "p", "bt", "bi", "zb", "br", "j", "sb", "gb", "bis", "n", "ob", "o", "bs", "u", "ub", "B", "ab", "bb", "eb"]}}
{"code": "import math\\n\\na, b = list(map(int, input().split()))\\nn = b * 10\\nflag = False\\nwhile n <= 1009:\\n    if math.floor(n * 0.1) == b and math.floor(n * 0.08) == a:\\n        flag = True\\n        break\\n    n += 1\\nprint(n) if flag is True else print(-1)\\n", "target": "418", "substitutes": {"a": ["z", "f", "ba", "ae", "l", "y", "t", "s", "i", "A", "r", "ca", "la", "at", "v", "c", "ea", "h", "g", "area", "d", "p", "alpha", "e", "sa", "aa", "ac", "o", "ma", "w", "ia", "ab", "aaa", "x", "an"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "bp", "big", "s", "i", "cb", "fb", "r", "v", "db", "c", "g", "nb", "d", "p", "bt", "bi", "j", "bf", "e", "sb", "bu", "gb", "beta", "bs", "u", "B", "ab", "x", "bb", "bar", "base"], "n": ["z", "nn", "nw", "out", "m", "l", "all", "nt", "t", "number", "name", "note", "N", "i", "len", "ns", "nm", "r", "k", "mn", "en", "fn", "v", "na", "c", "long", "ln", "an", "sn", "ng", "g", "cn", "nu", "nb", "tn", "num", "d", "next", "p", "dn", "exp", "count", "j", "ne", "net", "int", "nor", "np", "nan", "nc", "o", "u", "no", "nl", "x", "on", "norm", "ll", "new"], "flag": ["bug", "f", "wait", "ld", "offset", "member", "ground", "sync", "flags", "line", "field", "cond", "hold", "lv", "debug", "mail", "bird", "age", "status", "limit", "tag", "true", "condition", "long", "lag", "mask", "group", "split", "gc", "start", "sun", "store", "bit", "force", "cmd", "id", " Flag", "cloud", "kill", "leaf", "just", "window", "FLAG", "bool", "enable", "run", "land", "layout", "set", "quit", "Flag", "sav", "list", "success", "ment", "fd"]}}
{"code": "# D - Static Sushi\\n\\nimport sys\\nimport numpy as np\\n\\nN, C = map(int, sys.stdin.buffer.readline().split())\\nx, v = [], []\\nfor _ in range(N):\\n    tmp, tmp2 = map(int, sys.stdin.buffer.readline().split())\\n    x.append(tmp)\\n    v.append(tmp2)\\n\\nx = np.array(x, np.int64)\\nv = np.array(v, np.int64)\\nv_cum = v.cumsum()\\ntx = np.flipud(x)\\ntv_cum = np.flipud(v).cumsum()\\nleft_cum = v_cum - x\\n\\nright_cum = tv_cum - np.flipud(C - x)\\nright_cum_max = np.maximum.accumulate(right_cum)\\n\\nright_cum_return = right_cum - np.flipud(C - x)\\nright_cum_return_max = np.maximum.accumulate(right_cum_return)\\n\\nans = max(0, np.max(left_cum), np.max(right_cum))\\n\\nfor first_abandon_idx in range(1, N):\\n    ans = max(ans, left_cum[first_abandon_idx-1] - x[first_abandon_idx-1] + right_cum_max[N-1 - first_abandon_idx])\\n    ans = max(ans, left_cum[first_abandon_idx-1] + right_cum_return_max[N-1 - first_abandon_idx])\\n\\nprint(ans)", "target": "127", "substitutes": {}}
{"code": "def solve():\\n    N = int(input())\\n    print(800 * N - (N // 15) * 200)\\n\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "492", "substitutes": {"N": ["Num", "K", "H", "C", "X", "F", "Ni", "CNN", "NG", "NI", "NB", "M", "NV", "NR", "MN", "NP", "U", "NA", "S", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "Q", "NPR", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NUM", "NN", "NH"]}}
{"code": "import math\\na,b,h,m = map(int, input().split())\\n# A: 360 / 720 [degree/min]\\n# B: 360/ 60 [degree/min]\\nr_a = 30*h + 0.5 * m\\nr_b = 6 * m\\nrad = math.pi * (r_a-r_b)/180\\nans = math.sqrt(a**2+b**2-2*a*b*math.cos(rad))\\nprint(ans)", "target": "290", "substitutes": {"a": ["ta", "ae", "t", "ax", "i", "A", "r", " ax", "c", "g", "area", " c", "alpha", "da", "ao", "j", "e", "sa", "aa", "aj", " A", "w", "aaa", "x", "aff"], "b": ["f", "rb", "ba", "be", "y", "bc", "cb", "fb", "r", "v", "c", "g", "p", "bt", "bi", "br", "j", "bf", "sb", "beta", "bis", "n", "bs", "B", "ab", "x", "bb"], "h": ["z", "f", "he", "H", "hm", "l", "ha", "i", "r", "ch", "v", "hs", "hi", "g", "p", "j", "oh", "e", "hl", "gh", "n", "hr", "o", "w", "hh", "x", "hp"], "m": ["mu", "f", "mc", "tm", "l", "t", "sm", "s", "M", "i", "r", "v", "c", "q", "g", "rm", "d", "p", "n", "o", "mr", "w", "mm", "x", "mi", "cm"]}}
{"code": "n=int(input())\\nxyh=[list(map(int,input().split())) for i in range(n)]\\nxyh.sort(key=lambda x:x[2],reverse=True)\\nfor X in range(0,101):\\n    for Y in range(0,101):\\n        f=True\\n        H=xyh[0][2]+abs(xyh[0][0]-X)+abs(xyh[0][1]-Y)\\n        for i in range(1,n):\\n            x,y,h=xyh[i]\\n            if h==0:\\n                if H-abs(x-X)-abs(y-Y)>0:\\n                    f=False\\n                    break\\n            else:\\n                if H-abs(x-X)-abs(y-Y)!=h:\\n                    f=False\\n                    break\\n        if f:\\n            print(X,Y,H)\\n            break", "target": "114", "substitutes": {"n": ["nn", "nw", "m", "a", "ni", "l", "nt", "t", "nr", "N", "ns", "mn", "k", "r", "v", "na", "c", "ln", "sn", "q", "g", "nu", "nb", "NT", "num", "d", "p", "j", "network", "pi", "ne", "gn", "np", "nan", "nc", "o", "w", "nl"], "xyh": ["phyhash", "oxyh", "axycache", "phyp", "jsonoh", "oxyhp", "phyh", "xyhp", "xxoh", "xxsh", "dxsh", "xyph", "miehs", "roxyha", "axyh", "roxyhe", "oxyph", "xxhe", "yyh", "xysh", "jsonhs", "yyoh", "roxyph", "axyhash", "xyoh", "proxyw", "dxhe", "roxyw", "yyhs", "xyha", "dxoh", "xxh", "axyp", "mieh", "oxyha", "oxyw", "xyw", "proxyhp", "phycache", "roxyh", "xycache", "jsonhe", "dxh", "xyhs", "jsonh", "oxycache", "miehe", "oxyoh", "roxyhp", "oxyp", "axysh", "roxyoh", "roxysh", "xyp", "proxyh", "oxysh", "proxysh", "axyoh", "xyhe", "yyhe", "axyph", "roxyp", "xyhash", "oxyhash", "mieoh", "axyha"], "i": ["z", "ini", "zi", "m", "l", "t", "ix", "iy", "ti", "key", "ip", "r", "k", "ci", "ji", "v", "ij", "c", "index", "ki", "q", "yi", "ind", "id", "di", "p", "bi", "j", "pi", "e", "ai", "it", "ii", "xi", "si", "ic", "I", "li", "mi", "im"], "X": ["TY", "UX", "K", "CH", "IP", "XL", "Width", "MX", "IC", "F", "R", "W", "XY", "N", "M", "FX", "A", "Tx", "OX", "ACE", "EL", "U", "ID", "TH", "XXX", "RE", "DX", "E", "O", "EX", "AT", "Xi", "L", "P", "INT", "Q", "This", "ZX", "XM", "T", "XP", "XX", "Z", "V", "I", "PH", "Ex", "IX", "TX", "WH", "XT", "IN"], "Y": ["SY", "TY", "AY", "ET", "K", "CH", "HY", "RY", "IP", "IC", "ED", "IA", "EY", "G", "W", "Other", "XY", "N", "M", "MI", "AL", "OT", "Cy", "TH", "Ray", "ANY", "E", "O", "Py", "YA", "D", "YD", "Sy", "IO", "YE", "IT", "YS", "Year", "ES", "CIA", "My", "Q", "BY", "IES", "UI", "T", "J", "Z", "YC", "V", "FY", "I", "B", "IE", "NY", "GY", "YY", "MY"], "f": ["fl", "of", "found", "fa", "m", "fast", "F", "fe", "fg", "df", "l", "t", "full", "cf", "result", "fr", "r", "fb", "k", "v", "alf", "c", "b", "fp", "g", "rf", "force", "d", "trace", "p", "exp", "bf", "fi", "e", "sf", "it", "tf", "fc", "conf", "o", "feed", "u", "w", "print", "ff", "fm"], "H": ["HK", "K", "HO", "He", "C", "F", "FH", "HT", "R", "G", "W", "Han", "HI", "N", "M", "HB", "HS", "HL", "HD", "HH", "Hamilton", "TH", "MH", "O", "His", "GH", "HC", "HA", "HE", "DH", "P", "SH", "Eh", "HTML", "T", "J", "V", "PH", "B", "OH", "RH", "WH", "HTTP", "HM"], "x": ["z", " dx", "xes", "el", "text", "xp", "m", "hex", "ux", "xy", "your", "l", "name", "ix", "xs", " foo", "xa", "ax", "xx", "xxxxxxxx", "at", " ax", "v", "xml", "xt", "dx", "wx", "c", " tx", "ex", "fx", " couples", "path", " c", "p", "exp", "rx", "act", "xc", " xx", " l", " z", "ox", "xe", "xxxx", "e", "xi", "lex", "w", "px", "xf", " cx", "on", "xd", "tx"], "y": ["z", "sys", "type", "ym", "ey", "yl", "yn", "ay", "xy", "py", "t", "yer", "iy", "by", "sy", "yy", "ty", "yt", "v", "c", "gy", "ys", "b", "ot", "ies", "yi", "ny", "hey", "j", "ry", "ya", "ye", "axy", "yr", "cy", "vy", "o"], "h": ["z", "uh", "he", "has", "m", "html", "here", "kh", "a", "rh", "hm", "l", "ha", "hold", "t", "k", "ch", "ho", "v", "hs", "c", "hi", "b", "g", "hal", "hd", "go", "ih", "p", "d", "oh", "ht", "hl", "hr", "o", "hh", "ah", "help", "sh", "hash", "his", "hp"]}}
{"code": "n = int(input())\\np = list(map(int,input().split()))\\n\\nfrom collections import deque\\ntemp = deque()\\nfor i in range(3):\\n    temp.append(p[i])\\ncounter = 0\\ntemp1 = sorted(temp)\\nif temp[1] == temp1[1]:\\n    counter += 1\\nfor i in range(n-3):\\n    temp.popleft()\\n    temp.append(p[i+3])\\n    temp1 = sorted(temp)\\n    if temp[1] == temp1[1]:\\n        counter += 1\\nprint(counter)", "target": "318", "substitutes": {"n": ["z", "nw", "nn", "names", "m", "l", "nt", "t", "number", "name", "nr", "N", "len", "ns", "mn", "k", "en", "r", "v", "na", "c", "sn", "q", "cn", "nu", "nb", "num", "d", "ne", "net", "gn", "nor", "np", "nc", "w", "no", "ll"], "p": ["ps", "pe", "pt", "pr", "ap", "m", "pins", "l", "pkg", "t", "bp", "pos", "pb", "s", "pp", "ip", "r", "tp", "jp", "press", "v", "sp", "pa", "vp", "c", "pm", "pers", "post", "fp", "mp", "pre", "power", "pi", "pl", "lp", "cp", "ping", "parts", "P", "np", "pc", "wp", "pn"], "temp": ["emp", "level", "pt", "timer", "porary", "status", "EMP", "pre", "cur", "rem", "set", "unt", "mm", "list", "ts", "mint", "wait", "t", "result", "output", "buffer", "condition", "tem", "mod", "stable", "test", "orig", "pretty", "stem", "current", "txt", "tc", "cu", "cum", "met", "prefix", "thread", " tmp", "memory", "ptr", " Temp", "em", "tar", "mem", "total", "alt", " temporary", "time", "cache", "multi", "method", "fake", "out", "tmp", "util", "tim", " temperature", "hold", "created", "res", "db", "now", "loop", "mp", "pool", "null", "local", "Temp", "tr", "template", "log", "por", "dat"], "i": ["f", "ei", "zi", "m", "uri", "l", "y", "ix", "ti", "ip", "ci", "ji", "im", "gi", "v", "gu", "ij", "c", "index", "ki", "q", "phi", "b", "g", "ami", "yi", "ind", "id", "di", "ik", "bi", "j", "pi", "e", "ai", "it", "ii", "xi", "si", "iri", "ic", "li", "I", "ia", "x", "iti", "mi", "iu", "multi", "ski"], "counter": ["thread", "frequency", "level", "conv", "currency", "external", "ounter", "ter", "sum", "comment", "another", "card", "order", "amount", "second", "number", "manager", "timer", "nt", "nr", "result", "created", "walker", "condition", "cause", "creator", "factor", "processor", "master", "entry", "user", "console", "loop", "code", "num", "directory", "Counter", "vector", "monitor", "ctr", "book", "zero", "total", "record", "outer", "const", "clock", "loader", "inner", "phrase", "nc", "sequence", "TER", "system", "cm", "controller", "terms", "count"], "temp1": ["tempOne", "tmpOne", "tem6", "empOne", "temp6", "tmp1", "empp", "thread1", "temp7", "tempp", "temOne", "threadp", "emp6", "threadone", "threadOne", "tmpp", " tempOne", "tmp6", "emp1", "tmpone", "tem7", " temp7", "tempone", "empone", "tem1", "emp7"]}}
{"code": "X, Y = map(int, input().split())\\nMOD = 10 ** 9 + 7\\n\\n\\nS = -X + 2 * Y\\nT = 2 * X - Y\\n\\nif S < 0 or T < 0:\\n    print(0)\\n    exit()\\nif S % 3 != 0 or T % 3 != 0:\\n    print(0)\\n    exit()\\n\\nS //= 3\\nT //= 3\\n\\n\\ndef cmb(n, r, p):\\n    r = min(n - r, r)\\n    if r == 0:\\n        return 1\\n    over = 1\\n    for i in range(n, n - r, -1):\\n        over = over * i % p\\n    under = 1\\n    for i in range(1, r + 1):\\n        under = under * i % p\\n    inv = pow(under, p - 2, p)\\n    return over * inv % p\\n\\n\\n# print(S, T)\\nans = cmb(S + T, S, MOD) % MOD\\nprint(ans % MOD)\\n", "target": "759", "substitutes": {"X": ["UX", "K", "CH", "H", "C", "F", "R", "G", "W", "XY", "N", "M", "A", "U", "TH", "DX", "E", "O", "D", "L", "P", "INT", "Q", "ZX", "XP", "J", "Z", "XX", "V", "I", "IX", "x", "TX", "XT"], "Y": ["SY", "TY", "AY", "K", "CH", "IP", "R", "HT", "EY", "y", "XY", "OS", "N", "M", "OT", "TH", "ANY", "OK", "E", "YA", "D", "YE", "TN", "IT", "YS", "Year", "P", "ES", "Q", "YC", "Z", "FY", "V", "J", "I", "B", "TX", "YY", "MY"], "MOD": ["RR", "SY", "MIN", "TR", "ONE", "MP", "OP", "EXP", "OS", "SIZE", "REM", "ID", "TH", "RE", "Scale", "mod", "SR", "DX", "TN", "TM", "Mod", "DR", "SH", "MODE", "PAR", "MS", "NUM", "MD", "POS"], "S": ["K", "SI", "H", "C", "Si", "SS", "F", "R", "SL", "G", "W", "JS", "SB", "SD", "s", "N", "M", "A", "RS", "U", "SR", "O", "E", "D", "NS", "SU", "L", "SP", "P", "TS", "Q", "SH", "MS", "SA", "SF", "J", "Z", "V", "I", "B", "CS", "GS"], "T": ["H", "C", "F", "R", "G", "WT", "t", "W", "N", "M", "TA", "OT", "U", "TH", "E", "O", "DT", "FT", "D", "TG", "AT", "L", "TN", "TM", "P", "TS", "TI", "Q", "TC", "J", "Z", "V", "B", "VT", "TT", "GT", "XT", "PT"], "n": ["z", "f", "nn", "nw", "m", "l", "y", "nt", "t", "nr", "N", "ns", "mn", "k", "v", "na", "c", "sn", "h", "an", "q", "g", "nu", "nb", "rn", "re", "num", "d", "j", "ne", "e", "int", "nor", "np", "nc", "o", "w", "no", "non", "x"], "r": ["f", "rate", "rb", "ri", "pr", "rr", "m", "range", "sr", "cr", "a", "R", "l", "rs", "t", "nr", "rc", "k", "res", "v", "root", "c", "h", "q", "b", "rf", "g", "pair", "re", "er", "d", "br", "j", "ro", "e", "it", "run", "right", "rd", "mr", "o", "w", "u", "dr", "x", "rar", "ar", "rt", "ru"], "p": ["op", "ps", "f", "pol", "of", "pr", "conv", "m", "ap", "par", "l", "y", "t", "bp", "pp", "ip", "k", "tp", "jp", "v", "sp", "pa", "vp", "c", "h", "b", "q", "g", "fp", "er", "pre", "d", "change", "power", "j", "pi", "cp", "P", "e", "it", "np", "up", "pc", "dp", "o", "w", "u", "x", "pn"], "over": ["overs", "out", "normal", "off", "top", " Over", "order", " OVER", "nr", "by", "ip", "Over", "OVER", "ver", "cover", "high", "en", "v", "at", "open", "co", "replace", "h", "above", "re", "er", "inter", "hover", "pre", "area", "host", "can", "der", "are", "allow", "outer", "ride", "tr", "hard", "ber", "dr", "on", "x", "um", "after"], "i": ["f", "io", "ini", "ri", "zi", "\u00ed", "m", "ir", "l", "y", "ix", "ti", "ip", "ci", "gi", "v", "ij", "h", "phi", "ind", "id", "di", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "li", "I", "ia", "u", "o", "x", "mi", "iu", "im"], "under": ["sup", "f", "mor", "out", " Under", "und", "des", "off", "ground", "pad", "par", "ud", "df", "other", "floor", "ower", "old", "ider", "su", "ow", "back", "below", "ver", "un", "v", "before", "Under", "idd", "ever", "group", "fore", "unders", "DER", "air", "above", "er", "ior", "der", "own", "adder", "new", "bottom", "inger", "are", "finger", "form", "int", "then", "behind", "hard", "up", "fire", "u", "shadow", "dr", "foot", "lower", "after"], "inv": ["mu", "vec", "rand", "f", "det", "conv", "dev", "ip", "adj", "err", "div", "v", "sym", "ij", "ln", "h", "q", "random", "imp", "Inv", "rav", "wr", "iv", "rev", "mult", "ov", "dir", "inn", "av", "vol", "pdf", "inc", "impl", "np", "fin", "conf", "ic", "rel", "reverse", "norm", " Inv", "fun", "vert"]}}
{"code": "S = input()[:-1]\\nans = 0\\n\\nfor i in range(len(S)):\\n    if S[:len(S)//2] == S[len(S)//2:]:\\n        ans = len(S)\\n        break\\n    else:\\n        S = S[:-1]\\nprint(ans)", "target": "696", "substitutes": {"S": ["Y", "SER", "BS", "SI", "Si", "C", "H", "SS", "X", "F", "R", "SL", "G", "JS", "SB", "SM", "s", "N", "M", "A", "RS", "INS", "U", "ST", "E", "O", "DS", "D", "SAM", "NS", "STR", "SU", "ANS", "L", "SP", "P", "TS", "Q", "SH", "T", "SF", "SE", "Z", "VS", "V", "I", "B", "CS", "GS", "SA", "Set"], "ans": ["rors", "ens", "ls", "pan", "rs", "anned", "s", "ms", "anas", "ins", "aus", "ons", "ns", "ars", "ann", "os", "acs", "aps", "aos", "arts", "beans", "ents", "rans", "eds", "posts", " means", "ids", "ANS", "nas", "uns", "anes", "span", "nan", " spans", "ads", "ats", "ros", "vals", "ts", "anks", "an", "ks", "ants", "lan", "irms"], "i": ["f", "a", "ite", "ix", "ti", "ci", "r", "k", " j", "c", "ind", "id", " ii", "p", "j", "it", "n", "li", "I", "iter", "x", "im"]}}
{"code": "a = list(map(int,input().split()))\\nx = 3*a[0]\\ny = a[1]\\nz = (x+y)//2\\nprint(z)\\n", "target": "428", "substitutes": {"a": ["ba", "apa", "array", "fa", "ap", "am", "ae", "att", "l", "t", "sta", "ga", "au", "xa", "i", "A", "ca", "at", "na", "c", "ea", "b", "foo", "aux", "d", "p", "da", "alpha", "ao", "app", "oa", "parts", "sa", "aa", "ac", "abs", "o", "ma", "ia", "set", "ab", "aaa", "an"], "x": ["yx", "xp", "X", "xy", "ix", "xs", "xa", "ax", "xx", "i", "v", "xt", "dx", "wx", "b", "mx", "ex", "fx", "rx", "xc", "ox", "xe", "xi", "w", "px", "xf", "xd", "tx"], "y": ["Y", "ym", "ey", "yo", "yl", "ay", "my", "xy", "py", "iy", "oy", "i", "yy", "ery", "ty", "yt", "gy", "ys", "b", "yi", "ny", "fy", "j", "ry", "ya", "dy", "uy", "ye", "yr", "cy", "vy", "yd"], "z": ["yz", "oz", "zi", "zip", "zy", "iz", "uz", "hz", "k", "v", "az", "cz", "complex", "h", "zh", "b", "phi", "g", "q", "yi", "ze", "d", "tz", "zer", "j", "zero", "zen", "zone", "nz", "ez", "n", "Z", "zo"]}}
{"code": "#template\\ndef inputlist(): return [int(j) for j in input().split()]\\n#template\\n#issue\u304b\u3089\u59cb\u3081\u308b\\nN,A,B = inputlist()\\nif (B-A-1) % 2 == 1:\\n    print(\"Alice\")\\nif (B-A-1) % 2 == 0:\\n    print(\"Borys\")", "target": "507", "substitutes": {}}
{"code": "n=int(input())\\ndef digitSum(n):\\n    # \u6570\u5024\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\\n    s = str(n)\\n    # \uff11\u6587\u5b57\u305a\u3064\u6570\u5024\u5316\u3057\u914d\u5217\u306b\u3059\u308b\u3002\\n    array = list(map(int, s))\\n    # \u5408\u8a08\u5024\u3092\u8fd4\u3059\\n    return sum(array)\\nprint(\"Yes\" if n%digitSum(n)==0 else \"No\")", "target": "161", "substitutes": {"n": ["z", "f", "nn", "m", "l", "t", "nt", "number", "s", "N", "i", "fn", "ns", "k", "v", "c", "ln", "h", "q", "b", "sn", "g", "nu", "num", "d", "p", "j", "total", "ne", "e", "nan", "o", "w", "x"]}}
{"code": "def main():\\n    import sys\\n    def input(): return sys.stdin.readline().rstrip()\\n    n = int(input())\\n    lx = []\\n    rx = []\\n    for i in range(n):\\n        a = 0\\n        cnt = 0\\n        for j in input():\\n            if j == '(':\\n                cnt += 1\\n            else:\\n                cnt -= 1\\n            a = min(a, cnt)\\n        \\n        if cnt >= 0:\\n            lx.append((a, cnt))\\n        else:\\n            rx.append((a, cnt))\\n    lx.sort(key= lambda x: -x[0]) # -a\u306e\u6607\u9806\\n    rx.sort(key= lambda x: x[0]-x[1]) # -b\u306e\u6607\u9806(b\u306e\u964d\u9806)\\n    total = 0\\n    check = True\\n    for x,cnt in (lx+rx):\\n        if total + x < 0:\\n            check = False\\n            break\\n        total += cnt\\n    if total == 0 and check:\\n        print('Yes')\\n    else:\\n        print(\"No\")\\n    \\n\\n\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "7", "substitutes": {"n": ["z", "f", "nn", "nia", "m", "l", "nt", "t", "number", "N", "len", "ns", "r", "na", "c", "ln", "sn", "b", "nu", "nb", "num", "d", "size", "ne", "gn", "nor", "np", "nc", "no", "nl", "x", "count"], "lx": ["plxs", "lltx", "llxx", "lxs", "lmx", "dlxy", " lxy", "tlxy", " ltx", "alxy", "alx", "lxy", "plx", "plxy", "llx", "dltx", "alox", "plxx", " lxs", "llxy", " lox", "llmx", " lxx", "lox", " lmx", "tlx", "alxx", "dlx", "dlmx", "tlox", "ltx", "tlxx", "llxs", "lxx"], "rx": ["rex", "ws", "ri", "xp", "rr", "rys", "ux", "rez", "rs", "xs", "rou", "ris", "ax", "xx", "rc", "r", "rax", "rl", "dx", "wx", "wine", "mx", "rox", "fx", "wy", "nox", "ross", "rm", "rw", "xc", "ox", "lr", "xi", "vr", "lex", "x", "rt", "tx"], "i": ["z", "f", "ini", "m", "l", "y", "ip", "ci", "r", "k", "v", "c", "q", "b", "ie", "ind", "p", "it", "ic", "li", "I", "x", "im"], "a": ["z", "f", "ba", "max", "apa", "el", "ae", "l", "all", "amount", "name", "sta", "t", "au", "ga", "xa", "A", "ca", "at", "la", "now", "c", "index", "ea", "an", "era", "b", "g", "area", "p", "alpha", "app", "window", "oa", "act", "aka", "sa", "ai", "ata", "aa", "ac", "sha", "ma", "element", "ia", "ab", "eas", "aaa", "x", "am", "base"], "cnt": ["ncount", "uncNT", "acnc", " cnd", "Cnd", "Cpt", "connt", "lcct", "acnt", "cnc", " cnz", "acpt", "Ccount", "Ctrl", " ccrit", "CNT", "Cnc", " cpt", "lnt", "ctrl", " ctrl", "cNT", "Cld", "Cct", "cld", "uncpt", "crpt", "ccount", "uncnd", "acnz", "Cnt", "cnz", "crct", "ltrl", "npt", "lNT", "conpt", " cld", "crnt", "lcnt", "Ccrit", "connz", "ctnt", "ccrit", "ctct", "ctld", "lct", "nct", " cNT", "lccrit", "uncnt", "nnt", "connc", "crnc", "lcpt", " cnc", "cnd", "cct", " cct", "ctpt", " ccount", "cpt"], "j": ["z", "obj", "ion", "jl", "ja", "y", "name", "note", "jp", "k", "ji", "ch", "v", "json", "ij", "q", "b", "g", "bi", "oj", "jo", "kj", "are", "jj", "jump", "aj", "J", "ju", "uj", "dj", "js", "bj", "jam", "jc"]}}
{"code": "a=list(map(int,input().split()))\\na.sort()\\n#print(a)\\nb1=a[2]-a[0]\\nb2=a[2]-a[1]\\n\\nif b1%2==0 and b2%2==0:\\n    print(b1//2+b2//2)\\nelif b1%2==1 and b2%2==1:\\n    print(b1//2+b2//2+1)\\nelse:\\n    print(b1//2+b2//2+2)\\n", "target": "107", "substitutes": {"a": ["z", "f", "ba", "array", "m", "ta", "att", "l", "all", "t", "ga", "au", "xa", "i", "ua", "A", "la", "an", "b", "g", "aux", "area", "ava", "va", "p", "ao", "oa", "aka", "sa", "ata", "aa", "n", "ma", "w", "ab", "aaa", "am"]}}
{"code": "K,T=map(int,input().split())\\na=list(map(int,input().split()))\\na.sort()\\na.reverse()\\nans=2*a[0]-sum(a)-1\\nif ans<0:\\n    ans=0\\nprint(ans)\\n", "target": "549", "substitutes": {"K": ["Y", "KA", "H", "C", "X", "F", "R", "G", "W", "Ak", "Ka", "N", "M", "A", "k", "KR", "KS", "S", "E", "O", "D", "P", "Q", "J", "Z", "V", "I", "B"], "T": ["Y", "H", "C", "X", "F", "R", "G", "t", "W", "WT", "N", "M", "A", "U", "S", "E", "O", "D", "L", "TN", "P", "Q", "J", "Z", "V", "I", "B"], "a": ["f", "done", "ba", "ent", "fa", "m", "ta", "att", "ae", "l", "all", "t", "au", "ga", "s", "xa", "i", "A", "ca", "en", "la", "at", "aos", "c", "an", "b", "tta", "changes", "area", "aux", "p", "alpha", "da", "ao", "oa", "parts", "isa", "sa", "ata", "aa", "abs", "ac", "n", "ma", "ia", "ab", "eas", "aaa", "am", "data", "aff", "auto"], "ans": ["ens", "rors", "checks", "ls", "oos", "views", "aned", "mas", "vers", "oss", "cons", "amps", "xs", "gs", "s", "ars", "anas", "ms", "aus", "ons", "os", "outs", "ann", "ns", "ins", "aps", "aos", "arts", "beans", "ians", "asks", "rans", "grades", "posts", "yes", " means", "ids", "vs", "ANS", "man", "leans", "lets", "uns", "offs", "anes", "actions", "ats", "orts", "ros", "anks", "an", "ks", "ants", "olds", "uploads", "lan", "irms"]}}
{"code": "n, a, b = map(int,input().split())\\nh = [ int(input()) for i in range(n)]\\nmaxim_h =  max(h)\\n\\nok = (maxim_h + a - 1) // a * n\\nng = 0\\nwhile abs(ok - ng) > 1:\\n\\n    X = (ok + ng) // 2\\n    #X\u56de\u7206\u767a\u3092\u8d77\u3053\u3059\u5fc5\u8981\u304c\u3042\u308b\u3068\u4eee\u5b9a\u3059\u308b\\n\\n    cnt = 0\\n    flag = 1\\n    for val in h:\\n        if val <= b * X:continue\\n        temp = (val - b * X + a - b - 1) // (a - b)\\n        cnt += temp\\n\\n        if cnt > X:\\n            flag = 0\\n            break\\n\\n    #print(X, cnt, ok)\\n    if flag:ok = X\\n    else:ng = X\\nprint(ok)\\n", "target": "51", "substitutes": {"n": ["z", "nn", "m", "l", "nt", "t", "N", "len", "ns", "mn", "nm", "k", "r", "v", "na", "c", "ln", "sn", "q", "nd", "g", "nu", "nb", "num", "d", "p", "j", "ne", "gn", "np", "nc", "o", "w", "x"], "a": ["f", "ba", "m", "ae", "l", "all", "t", "ga", "s", "A", "r", "at", "v", "na", "c", "an", "g", "val", "area", "num", "d", "p", "alpha", "ao", "j", "oa", "ai", "sa", "aa", "aj", "al", "ac", "o", "ma", "w", "u", "ia", "ab", "x", "am"], "b": ["z", "f", "ba", "m", "l", "y", "t", "bc", "r", "k", "v", "c", "bm", "g", "nb", "d", "p", "bi", "j", "e", "o", "bs", "w", "B", "ab", "bb"], "h": ["uh", "ph", "he", "H", "m", "kh", "hex", "rh", "hm", "l", "ha", "hz", "bh", "k", "ch", "ho", "history", "hs", "hi", "hd", "ih", "p", "host", "oh", "hl", "hr", "hh", "ah", "sh", "x", "head", "hash", "hp"], "i": ["f", "str", "y", "ix", "by", "ip", "r", "k", " j", "c", "q", "ind", "id", " ii", "p", "j", "e", "it", "I", "iter", "me", "x", "im"], "maxim_h": ["maxlim_r", "maxem_hi", "maxim_b", "maxlim_b", "maxim_r", "maxim2hi", "maxim_hi", "maxem_h", "maxim_H", "maxem_H", "maxim_p", "maxlim_h", "maxim2h", "maxim2H", "maxlim_p"], "ok": ["good", "op", "md", "ol", "oc", "off", "kr", "ir", "conn", "nt", "ck", "ow", "ready", "ms", "Ok", "k", "res", "check", "ocr", "ot", "resh", "mot", "OK", "ak", "yes", "typ", "id", "ook", "ik", "ih", "j", "oh", "ro", "valid", "it", "od", "ob", "o", "hr", "ko", "success", "og", "ll", "yk"], "ng": ["z", "rand", "nn", "org", "iq", "big", "ing", "NG", "nr", "ang", "bg", "mn", "sp", "now", "sd", "na", "index", "resh", "nd", "g", "mx", "wn", "meg", "next", "gov", "ss", "j", "window", "eng", "ne", "ong", "mg", "gn", "nz", "amp", "nc", "og", "md", "new"], "X": ["Y", "z", "K", "R", "y", "G", "xs", "NG", "N", "M", "ax", "Ok", "dx", "Max", "TH", "OK", "O", "Right", "Error", "P", "Q", "_", "error", "J", "Z", "XX", "I", "x", "Val"]}}
{"code": "s = input()\\ni = 0\\nS1 = []\\nS2 = []\\nwater = []\\nwtot = 0\\nwhile i < len(s):\\n    if s[i] == \"\\\\\":\\n        S1.append(i)\\n    elif s[i] == '/' and len(S1) != 0:\\n        w0 = (i - S1[-1])\\n        wtot += w0\\n        if len(S2) == 0:\\n            S2.append((S1[-1], w0))\\n        else:\\n            while len(S2) != 0 and S2[-1][0] > S1[-1]:\\n                w0 += S2[-1][1]\\n                S2.pop()\\n            S2.append((S1[-1], w0))\\n        S1.pop()\\n    i += 1\\n\\nans = str(wtot) + '\\n' + str(len(S2))\\nfor p in S2:\\n    ans += ' ' + str(p[1])\\nprint(ans)\\n\\n", "target": "394", "substitutes": {"s": ["z", "f", "ps", "sts", "ings", "ws", "ls", "m", "ares", "a", "rates", "sis", "rs", "t", "gs", "xs", "ins", "ms", "ports", "ns", "r", "ases", "strings", "sp", "aces", "arts", "c", "arms", "ers", "h", "b", "S", "rings", "ains", "ss", "less", "ds", "its", "n", "abs", "bs", "w", "ats", "st", "x", "ts", "qs", "Ws", "mods", "js"], "i": ["f", "io", "ini", "ei", "ri", "zi", "m", "cli", "l", "y", "t", "ix", "ti", "info", "ip", "ci", "\u0438", "gi", "v", "ij", "c", "hi", "index", "oi", "ori", "b", "phi", "ami", "yi", "ind", "id", "di", "bi", "multi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "iri", "ic", "li", "I", "o", "u", "ui", "mi", "iu", "im"], "S1": ["s0", "B3", "N2", "S3", "SOne", " S0", "SS3", "sAP", "N0", "T3", "S256", "V0", "s1", "SAP", " S256", " SAP", "SS2", "s3", " S10", "B2", "S12", "Source2", "JS1", "T1", "Source01", "DS2", "N256", "Source10", "RS2", "N1", "S0", "Source1", "S001", " S12", "s001", "V1", "RSAP", "RS1", "S01", " S3", "SS1", "s2", "B1", "SS5", " SOne", "s01", "Source0", "B5", "DS12", "SourceOne", "RSOne", "sOne", "s10", " S001", "S5", "DS0", "DS01", "DS1", "V256", "s12", "V2", "JS2", " S5", "JS001", "T2", "S10"], "S2": ["s0", "s42", "JS102", "N2", "S3", " Stwo", " S0", "SS3", "N4", "S42", "Sample56", "S56", "CSS62", "S7", "BS2", "P0", "PS0", "s1", "PS3", "CSS2", "CSStwo", " S7", "Stwo", "P2", "SU42", " S4", "TS42", "RS22", "SS2", "s3", "S4", "Sync1", "Settwo", "P56", "SU102", "JS1", "BS3", "SU2", "Ptwo", "N1", "RS2", "WS1", "CSSTwo", "S0", "PSTwo", "STwo", "TS2", "Set62", "WS512", "Sample1", "S512", "RS1", "PS62", "TS102", " S3", " S56", " S22", " S512", "SS1", "s2", "N512", "Sampletwo", "S62", "N22", "Synctwo", "WS4", "Sync42", "RS5", "BStwo", "Sample2", "P1", "Sync2", "PS2", "N5", "S102", "S5", "SS0", "JStwo", "s7", "JS2", "SetTwo", "Set7", " S5", "Set1", "BS1", "WS2", "PS1", "stwo", "S22", "Set2", "PStwo", "JS42"], "water": ["ps", "ws", "weights", "oss", "wat", "ms", "ports", "xa", "sw", "res", " psi", "prints", "aw", "pers", "we", "eps", "oat", "ping", "Water", "oxy", "powers", "workers", "Pool", "pid", "wp", "Ps", "wi", "oin"], "wtot": ["WTOT", "wtott", "wnos", "tos", "vtog", "ettots", "gtots", "WTos", "tott", "vtot", "wtote", "wtots", "wnots", "wtOT", "wtiot", "tOT", "wtos", "WTot", "ettoted", "wniot", "wnoted", "wnot", "gtoted", "vtoted", "wtog", "mtote", "wtoted", "wnOT", "wnott", "mtog", "vtote", "WToted", "WTote", "ettiot", "gtot", "mtoted", "WTog", "mtot", "WTott", "ettot", "tot", "gtiot"], "w0": ["wx0", "z10", " w1", "w05", "wr0", "w06", "wrk", "wt0", "wa2", " w000", "W00", "wtarg", " wk", "W10", "word00", "wa0", "z0", "ws00", "W05", "W1", "ws1", "wj", "wrarg", "zj", "ws05", " w00", "wx1", " wor", "wk", "wt2", "wx00", "warg", " wj", "wordor", "wa06", "wa00", "word06", "w2", "waor", "W0", " w10", "ws0", "wr000", "w10", " warg", "z1", " w2", "w00", "wx05", " w06", "wr2", "word0", "wor", "Wj", "wak", "w000", "w1", "wt000"], "ans": ["ens", "ps", "wan", "rors", "sv", "ws", "ls", "names", "aned", "oss", "amps", "os", "ins", "ars", "aus", "ons", "ns", "xa", "ann", "ms", "anas", "aos", "arts", "es", "na", "ians", "angs", "rans", "said", "posts", " means", "san", "ANS", "can", "ds", "nas", "ai", "anes", "ras", "ats", "ros", "anks", "an", "ks", "ants"], "p": ["op", "pe", "ps", "f", "pr", "ep", "ap", "m", "par", "rep", " pp", "t", "bp", " P", "pb", "pp", "ip", "jp", "tp", "v", "pa", "vp", "post", "fp", "pat", "lp", "pl", "cp", "ping", "pi", "P", "e", "po", "up", "pc", "n", "o", "part", "osp", "pid", "wp", "x", "pn", "pg"]}}
{"code": "n,a,b=map(int,input().split())\\ncount=0\\nfor i in range(n):\\n    S=sum(list(map(int,(str(i+1)))))\\n    if a<=S<=b:\\n        count+=i+1\\nprint(count)\\n", "target": "704", "substitutes": {"n": ["nn", "nw", "nia", "m", "l", "y", "nt", "t", "N", "ns", "mn", "v", "na", "c", "ln", "sn", "q", "nd", "nu", "nb", "NT", "num", "d", "p", "j", "network", "ne", "total", "net", "np", "nc", "x", "norm"], "a": ["f", "ba", "m", "am", "ta", "l", "t", "name", "sta", "au", "s", "ax", "A", "ca", "at", "v", "c", "ea", "g", "area", "p", "alpha", "ao", "app", "act", "sa", "ata", "aa", "al", "ac", "ma", "part", " A", "u", "ab", "ar", "an", "ack"], "b": ["f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "t", "bc", "bp", "s", "by", "cb", "r", "fb", "v", "db", "c", "g", "nb", "d", "p", "bi", "bf", "e", "bis", "bs", "B", "ab", "bb", "body", "eb"], "count": ["ount", "add", "frequency", "stat", "found", "sum", "report", "C", "child", "comment", "cond", "counter", "score", "hold", "amount", "nt", "number", "t", "second", "result", "status", "history", "length", "c", "index", "q", "Count", "flag", "th", "ct", "nb", "ind", "test", "num", "size", "trace", "command", "total", "cd", "tf", "current", "weight", "cache", "conf", "summary", "list"], "i": ["ei", "ini", "zi", "m", "uri", "l", "ix", "ti", "info", "s", "ip", "ci", "ji", "gi", "v", "ij", "c", "hi", "index", "ori", "q", "ind", "id", "di", "multi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "ic", "li", "u", "I", "iter", "x", "ui", "mi", "im"], "S": ["BS", "SI", "Si", "C", "H", "SS", "F", "R", "G", "W", "SB", "JS", "Sum", "s", "N", "M", "A", "D", "NS", "SU", "L", "P", "TS", "Q", "T", "J", "Z", "V", "I", "B", "CS", "SA"]}}
{"code": "from collections import Counter\\nfrom math import factorial\\n\\n\\nN, A, B = map(int, input().split())\\nV = list(map(int, input().split()))\\nC = Counter(V)\\nkeys = list(C.keys())\\nkeys.sort(reverse=True)\\n\\nif C[keys[0]] >= A:\\n    mean = keys[0]\\n    var = 0\\n    for i in range(A, min(B, C[keys[0]]) + 1):\\n        var += factorial(C[keys[0]]) // factorial(i) // factorial(C[keys[0]] - i)\\nelse:\\n    cnt = 0\\n    total = 0\\n    var = 0\\n    for v in keys:\\n        if cnt + C[v] < A:\\n            cnt += C[v]\\n            total += v * C[v]\\n        else:\\n            total += v * (A - cnt)\\n            mean = total / A\\n            var += factorial(C[v]) // factorial((A - cnt)) // factorial(C[v] - (A - cnt))\\n            break\\n\\nprint(mean)\\nprint(var)\\n", "target": "345", "substitutes": {"N": ["Y", "Number", "Name", "Num", "X", "R", " L", "M", "CN", "MN", "Na", " D", " n", "NL", " Y", "D", " number", "NS", "Node", "L", "NM", "TN", "P", "T", "n", "Base"], "A": ["Y", "AY", "AR", "K", "AI", "AA", "H", "API", "AN", "AC", "a", "F", "R", "IA", "G", "AV", "ACC", "M", "BA", "PA", "CA", "AL", "TA", "LA", "EA", "U", "JA", "NA", "S", "E", "O", "As", "AU", "All", "Array", "AT", "HA", "D", "AF", "L", "alpha", "GA", "An", "At", "P", "MA", "Q", "This", "AM", "AH", "First", "T", "AS", "AB", "AP", "Area", "I", "Alpha", "ACT", "Ax", "SA"], "B": ["Y", "BE", "BB", "DB", "H", "EB", "F", "RB", "R", "G", "NB", "M", "BA", "WB", "BC", "IB", "BI", "b", "S", "E", "D", "L", "TB", "LB", "P", "BG", "T", "J", "Z", "AB", "I", "BR", "Bs"], "V": ["Y", "K", "H", "X", "F", "R", "G", "W", "AV", "IV", "M", "NV", "CV", "U", "S", "D", "Va", "VM", "L", "VC", "VI", "Vs", "P", "Q", "GV", "T", "VOL", "VS", "J", "I", "VA"], "C": ["Che", "Cod", "Y", "Config", "K", "CF", "CE", "H", "CO", "Ch", "AC", "F", "Total", "R", "Collection", "Con", "G", "CNN", "CR", "Cs", "Query", "CON", "CM", "M", "CA", "CN", "MC", "CI", "c", "CU", "CV", "Conf", "GC", "U", "CD", "Count", "S", "E", "O", "New", "Cop", "D", "Can", "Control", "Counter", "CT", "L", "CC", "Cal", "P", "Cons", "DC", "You", "Co", "T", "Cache", "Col", "I", "CS", "EC", "CB", "JC", "NC", "WC", "CP", "CG"], "keys": ["stats", "ties", "names", "modules", "cells", "phis", "strings", "ys", "ies", "bits", "types", "links", "parts", "bys", "files", "chains", "lights", "tags", "ts", " Keys", "objects", "values", "groups", "params", "vers", "pins", "xs", "ms", "ports", "owners", "index", "styles", "Items", "docs", "changes", "pointers", "rots", "codes", "ds", "YS", "args", "parents", "sticks", "KEY", "iques", "apps", "headers", "rys", "gs", "fields", "services", "ids", "Names", "rows", "versions", "sels", "sites", "workers", "items", "pres", "vals", "qs", "ks", "ps", "els", "details", "users", "ples", "checks", "lines", "tops", "s", "key", "ians", "images", "ops", "vs", "Keys", "Key", "cats", "members", "bs", "sections", "mins", "lists"], "mean": ["type", "mu", "rate", "md", "min", "med", "normal", "max", "stat", "sum", "m", "std", "ean", "ka", "dev", "hold", "name", "au", "sample", "make", "meta", "age", "Avg", "mass", "index", "group", "g", "val", "test", "id", " avg", "mt", "av", " average", "bo", "main", "average", "n", "time", "mark", "ma", "cum", "summary", "weight", "me", "um", "mi", "an", "data", "unit", "count"], "var": ["type", "rate", "max", "arr", "out", "stat", "sum", "Var", "vari", "cat", "comment", "std", "par", "dev", "t", "debug", "raw", "r", "ver", "err", "value", "spot", "term", "mod", "ct", "val", "temp", "stable", "test", "warn", "vector", "can", "func", "p", "frac", "usr", "variable", "quant", "vol", "fac", "const", "vt", "average", "rank", "weight", "error", "cum", "n", "batch", "iter", "print", "star", "grad", "dr", "bar", "ser", "count"], "i": ["io", "ini", "zi", "m", "y", "t", "ix", "ti", "s", "ip", "ci", "gi", "ij", "hi", "q", "phi", "b", "ind", "id", "di", "bi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "o", "li", "I", "u", "iter", "x", "ui", "mi", "iu", "im"], "cnt": ["coct", "acnc", "mct", "uncrc", "cst", "dcnt", "mnt", "dount", "acnt", "account", "dNT", "acpt", "cnc", " cno", "tcrc", "Cpt", "copt", " cnz", "pcnc", "dnc", "CNT", "acct", " cctr", "tcno", "Cnc", " cpt", "dnt", "cNT", "Cct", "dcct", "ccount", "Count", "uncst", "Cnt", "pcct", "cnz", "tcnt", "mpt", "uncno", "cont", "cctr", "lcnc", "tcst", "lcnt", "count", "crc", " cst", "dcnc", " count", "lccount", " cNT", "uncnt", "dcnz", "lcpt", "acctr", " crc", " cnc", "cct", " cct", "mctr", "cno", "conc", "pcnz", "pcnt", " ccount", "cpt"], "total": ["mu", "done", "max", "normal", "sum", "gross", "m", "ta", "Total", "a", "all", "full", "nt", "t", "number", "to", "absolute", "shared", "result", "ms", "info", "final", "meta", "eta", "created", "otal", "value", "h", "ot", "human", "complete", "real", "temp", "parent", "trace", "pi", "zero", "valid", "net", "current", "bo", "average", "n", "table", "ma", "no", "mad", "base", "count"], "v": ["z", "f", "ve", "vo", "sv", "conv", "vv", "m", "vic", "qv", "a", "l", "lv", "y", "name", "t", "key", "r", "k", "ver", "value", "vp", "c", "h", "q", "g", "val", "tv", "iv", "id", "version", "rev", "nv", "vs", "d", "p", "vm", "vector", "vi", "ov", "j", "av", "e", "vt", "vr", "uv", "vy", "u", "w", "o", "n", "x", "ev", "vc", "cv", "nov"]}}
{"code": "N=int(input())\\nA=input()\\nB=input()\\nC=input()\\n\\nnum=0\\nfor i in range(N):\\n    str=[]\\n    str.append(A[i])\\n    str.append(B[i])\\n    str.append(C[i])\\n    num=num+len(set(str))-1\\nprint(num)", "target": "648", "substitutes": {"N": ["Num", "K", "X", "F", "R", "CNN", "NB", "NI", "M", "Mon", "NR", "CN", "NA", "ANY", "S", "NT", "D", "SN", "NS", "NM", "L", "TN", "No", "P", "GN", "n", "V", "I", "NUM", "NC", "Ns", "Bern", "NO", "NH"], "A": ["App", "AR", "AA", "Ar", "RA", "AC", "AN", "IA", "AV", "ACC", "Abs", "CA", "LA", "AL", "JA", "As", "HA", "AT", "Array", "AF", "GA", "An", "At", "And", "AS", "The", "AP", "AB", "One", "Alpha", "Ant", "ACT", "Act", "AST", "SA"], "B": ["Y", "BE", "BBC", "BB", "Blue", "VB", "EB", "Two", "RB", "Ber", "Rob", "OB", "But", "SB", "NB", "BO", "WB", "BA", "IB", "BC", "BI", "Be", "By", "Bar", "GB", "MB", "LB", "QB", "BG", "Ob", "AB", "BT", "BL", "USB", "Bern", "CB", "BY", "BR", "Bs", "Base"], "C": ["Che", "CE", "Ch", "CO", "IC", "CR", "Cs", "CON", "Cont", "CM", "BC", "CA", "CN", "CI", "c", "Cu", "CD", "CAR", "Cow", "Cond", "CBS", "CL", "CT", "CC", "DC", "Cr", "LC", "Co", "YC", "CS", "EC", "Car", "SC", "JC", "CB", "CP", "Mc", "Cos", "CG"], "num": ["done", "Num", "add", "nom", "anon", "sum", "off", "conv", "multipl", "mon", "die", "tim", "counter", "dev", "nt", "common", "number", "su", "result", "con", "final", "nm", "en", "div", "ver", "msg", "un", "cal", "na", "index", "enum", "nu", "th", "nb", "temp", "id", "mult", "next", "alph", "zero", "total", "com", "quant", "int", "umber", "np", "n", "cum", "dec", "no", "set", "NUM", "gen", "success", "um", "multi", "count", "new"], "i": ["f", "io", "ri", "zi", "uri", "y", "ix", "ti", "info", "ip", "key", "k", "ji", "v", "gi", "ij", "c", "hi", "ori", "index", "ki", "q", "b", "yi", "sim", "ind", "id", "di", "bi", "multi", "j", "pi", "it", "int", "iri", "si", "n", "xi", "ic", "li", "I", "batch", "me", "x", "ui", "mi", "im"], "str": ["arr", "obj", "pr", "desc", "cr", "hex", "ret", "ext", "t", "name", "rs", "s", "fr", "r", "err", "gr", "div", "msg", "res", "status", "url", "sp", "sl", "ocr", "use", "string", "tree", "dat", "STR", "cur", "read", "char", "inst", "exp", "next", "ctr", "usr", "br", "vol", "Str", "int", "var", "txt", "tr", "n", "print", "exec", "list", "st", "dr", "prefix", "ts", "enc", "comm", "text", "stri"]}}
{"code": "N = int(input())\\n\\nA = list(map(int,input().split()))\\n\\nS = A[0]\\nX = A[0]\\nl = 0\\nr = 0\\ncount = 0\\n\\nwhile r < N and l <= r:\\n    if S == X and r < N-1:\\n        r += 1\\n        S += A[r]\\n        X = X ^ A[r]\\n    elif S == X and r == N-1:\\n        count += r-l+1\\n        l += 1\\n        S -= A[l-1]\\n        X = X ^ A[l-1]\\n    else:\\n        count += r-l\\n        l += 1\\n        S -= A[l-1]\\n        X = X ^ A[l-1]\\n    #print([l,r,count])\\n\\nprint(count)", "target": "791", "substitutes": {"N": ["Number", "Y", "Num", "K", "Not", "NE", "H", "C", "AN", "F", "R", "Ni", "W", "NG", "NB", "M", "NR", "Na", "Len", "NL", "NA", "E", "O", "Ne", "NT", "D", "NAT", "NS", "FN", "SN", "Node", "L", "NM", "TN", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "A": ["AA", "AC", "W", "Abs", "UA", "CA", "U", "E", "As", "AF", "GA", "An", "Java", "This", "Map", "You", "And", "Action", "AB", "Answer", "K", "G", "M", "What", "Av", "NA", "These", "AU", "HA", "Array", "P", "Q", "AM", "Y", "Add", "Data", "Ar", "F", "Alice", "ACC", "Acc", "EA", "Some", "D", "All", "L", "WA", "At", "MA", "Auth", "V", "One", "ACT", "SA", "AE", "App", "H", "C", "a", "R", "LA", "RAM", "JA", "AT", "NS", "Address", "T", "The", "AP", "I", "Alpha", "B", "Each", "AST"], "S": ["Y", "Name", "BS", "K", "String", "SI", "Sl", "H", "C", "Si", "SS", "WS", "R", "SL", "G", "W", "SB", "JS", "PS", "SD", "s", "M", "Spec", "Size", "SR", "E", "DS", "D", "NS", "SU", "L", "ss", "Su", "Cons", "P", "TS", "Q", "SH", "You", "Stat", "T", "SF", "SE", "Z", "V", "I", "B", "CS", "GS", " s", "SA", "Set", "Sign"], "X": ["Y", "Name", "Number", "UX", "K", "String", "Data", "CH", "H", "C", "XL", "Long", "F", "Target", "Width", "R", "MX", "G", "XY", "M", "Length", "Tx", "OX", "U", "Int", "XXX", "DX", "E", "Sax", "Path", "Scale", "Complete", "Cross", "EX", "Array", "Xi", "Control", "L", "Content", "P", "ox", "Q", "This", "Value", "ZX", "XM", "List", "T", "XP", "J", "Z", "XX", "V", "One", "I", "Form", "Copy", "Sync", "Test", "IX", "x", "TX", "Log", "Context", "XT"], "l": ["z", "f", "lit", "ld", "ls", "level", "el", "le", "line", "m", "a", "t", "kl", "lang", "s", "i", "len", "k", "lb", "v", "ll", "ul", "length", "c", "sl", "lt", "ln", "h", "lag", "b", "lc", "g", "like", "q", "lo", "er", "d", "p", "L", "j", "lp", "pl", "e", "lr", "n", "loc", "o", "ell", "li", "u", "w", "left", "nl", "list", "x", "ar", "rl"], "r": ["z", "f", "rand", "rb", "rr", "m", "range", "sr", "cr", "a", "kr", "rg", "R", "rh", "y", "t", "rs", "nr", "s", "fr", "i", "rc", "k", "err", "NR", "res", "v", "c", "ren", "state", "h", "q", "b", "g", "rn", "er", "re", "num", "d", "p", "L", "br", "j", "ro", "e", "lr", "right", "ur", "n", "rd", "mr", "o", "u", "w", "rt", "art", "rel", "rem", "dr", "x", "rat", "rar", "ar", "rl"], "count": ["z", "ount", "max", "stat", "found", "sum", "skip", "child", "C", "cr", "label", "all", "nt", "t", "cycle", "debug", "name", "case", "CR", "second", "rc", "err", "v", "status", "now", "length", "c", "state", "index", "q", "group", "Count", "g", "flag", "th", "ct", "code", "ind", "force", "test", "id", "d", "size", "p", "j", "total", "current", "error", "n", "w", "list", "st"]}}
{"code": "n = int(input())\\nA = list(map(int,input().split()))[::-1]\\n\\n\\ndef b():\\n    if A[0] != 2:\\n        return -1\\n    else:\\n        ans = [2, 3]\\n        for i in range(1, n):\\n            r = ans[1] // A[i] * A[i]\\n            l = -((-ans[0] // A[i]) * A[i])\\n            # print(-ans[0] // A[i])\\n            # print(l, r)\\n            if r < l:\\n                return -1\\n            ans = [l, r+A[i]-1]\\n            # print(ans)\\n    return ans\\n\\nans = b()\\nif ans == -1:\\n    print(ans)\\nelse:\\n    print(ans[0], ans[1])", "target": "423", "substitutes": {"n": ["z", "nn", "m", "a", "nt", "t", "s", "N", "len", "ns", "mn", "k", "v", "na", "c", "ln", "sn", "q", "g", "nu", "nb", "num", "d", "p", "j", "ne", "np", "nan", "nc", "o", "w", "no", "nl", "x"], "A": ["Y", "App", "K", "Es", "AA", "H", "C", "X", "AN", "a", "R", "G", "W", "Acc", "N", "M", "Args", "Abs", "CA", "LA", "What", "U", "JA", "Av", "NA", "Ray", "S", "E", "Face", "As", "D", "AU", "AT", "Array", "Men", "AF", "L", "WA", "GA", "An", "mA", "P", "MA", "AM", "This", "And", "T", "AS", "AE", "The", "AB", "AP", "V", "Auth", "Alpha", "B", "I", "GS", "Answer", "Act", "SA"], "ans": ["ens", "sts", "ls", "mas", "AN", "ones", "cs", "cons", "gs", "xs", "ars", "anas", "ins", "aus", "ons", "outs", "ns", "ms", " Ans", "aps", "aces", "arts", "aos", "ents", "ians", "ums", "ys", "eds", "eps", "ANS", "An", "uns", "nas", "anes", "ses", "ams", "ads", "ras", "ates", "ats", "ros", "ions", "an", "ks", "ants"], "i": ["f", "io", "ini", "zi", "m", "a", "this", "t", "chain", "ti", "info", "s", "ip", "k", "ji", "v", "gi", "ij", "c", "index", "q", "b", "ind", "id", "di", "num", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "batch", "ic", "si", "I", "li", "me", "x", "ui", "mi", "iu", "im"], "r": ["f", "rb", "m", "R", "rs", "t", "k", "c", "h", "q", "b", "g", "re", "d", "p", "j", "ro", "e", "lr", "rd", "rt", "o", "w", "dr", "x", "ar", "rl"], "l": ["z", "f", "m", "y", "t", "s", "lb", "v", "c", "ln", "h", "q", "b", "g", "d", "p", "L", "j", "e", "lr", "o", "w", "u", "x", "ll"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\nmod = 10**9 + 7\\nbits = [0]*60\\nfor x in a:\\n    i = 0\\n    while x > 0:\\n        if x % 2 == 1:\\n            bits[i] += 1\\n        x //= 2\\n        i += 1\\nans = 0\\nfor i in range(60):\\n    ans += (bits[i] * (n-bits[i])) * pow(2, i, mod)\\n    ans %= mod\\nprint(ans)", "target": "353", "substitutes": {"n": ["z", "nw", "m", "l", "nt", "t", "number", "name", "s", "N", "len", "ns", "mn", "k", "en", "v", "na", "c", "sn", "h", "b", "an", "g", "cn", "nu", "nb", "num", "d", "p", "gain", "j", "ne", "net", "gn", "np", "o", "w"], "a": ["ba", "apa", "ap", "asia", "ae", "ta", "another", "all", "t", "xa", "A", "at", "la", "na", "c", "index", "ea", "an", "b", "area", "p", "va", "ada", "ao", "oa", "ai", "sa", "ata", "aa", "ac", "ma", "w", "ia", "ab", "aaa", "am"], "mod": ["sub", "add", "min", "max", "sum", "m", "sign", "spec", "pos", "rot", "step", "sec", "len", "r", "ver", "perm", "scale", "mp", "bit", " Mod", "san", "pre", "num", "d", "mem", "mult", "p", "comp", "sem", "j", "zero", "total", "Mod", "ai", "od", "MOD", "set", "reg", "mm", "prime", "cm", "mods", "fun"], "bits": ["details", "stats", "values", "weights", "ls", "nets", "heads", "tops", "flags", "pins", "rates", "bands", "ios", "gs", "xs", "bugs", "s", "ins", "ms", "outs", "ns", "points", "strings", "atts", "words", "bytes", "b", "bit", "vs", "terms", "rots", "ots", "airs", "nuts", "lets", "bool", "locks", "its", "ints", "plugins", "dates", "bis", "abs", "ads", "bps", "bs", "items", "ats", "tools", "ions", "uts", "ants"], "x": ["f", "z", "xes", "xp", "X", "ux", "xy", "t", "ix", "xs", "xa", "xx", "xb", "ax", "plex", "at", "ci", "v", "xt", "dx", "wx", "c", "mx", "ex", "fx", "ross", "any", "p", "rx", "act", " xx", "xc", "ox", "xe", "xi", "ic", "px", "w", "xf", "an", "xd", "tx", "inx"], "i": ["z", "io", "ini", "ei", "ri", "zi", "m", "l", "y", "ix", "ti", "info", "ip", "ci", "ji", "v", "gi", "ij", "c", "hi", "index", "ki", "phi", "b", "yi", "sim", "ind", "id", "di", "iat", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "I", "li", "ia", "ui", "mi", "iu", "im"], "ans": ["ens", "stats", "wan", "cas", "lines", "ls", "aned", "AN", "oss", "ran", "ean", "pan", "rs", "amps", "ars", "ins", "os", "aus", "ons", "ns", "ms", "ann", "anas", " Ans", "aps", "acs", "aos", "arts", "ents", "es", "ians", "ums", "angs", "rans", "yes", " means", "vs", "ANS", "leans", "ox", "ai", "uns", "nas", "offs", "anes", "nan", "ams", "ads", "ras", "ats", "us", "ts", "anks", "an", "ants"]}}
{"code": "#26\\nH = int(input())\\ncou = 1\\nwhile H>0:\\n    H = int(H/2)\\n    cou *= 2\\n    \\nprint(cou-1)", "target": "153", "substitutes": {}}
{"code": "n, k = [int(x) for x in input().split()]\\ntemp_list = sorted([[int(x) for x in input().split()] for _ in range(n)])\\nans = 0\\nfor a, b in temp_list:\\n    k -= b\\n    if k <= 0:\\n        ans = a\\n        break\\nprint(a)", "target": "608", "substitutes": {"n": ["f", "nn", "m", "l", "nt", "t", "N", "ns", "mn", "v", "na", "c", "sn", "q", "cn", "nu", "nb", "num", "d", "size", "nv", "p", "j", "ne", "np", "nan", "nc", "o", "w", "no"], "k": ["dk", "z", "max", "K", "m", "kr", "ta", "uk", "kh", "ka", "acc", "t", "kl", "ikk", "s", " ka", "i", "key", "kk", "r", "ke", "ok", "v", "c", "mk", "ki", "q", "kn", "ak", "nb", "ijk", "ik", "num", "p", "alpha", "km", "j", "kj", "kw", "conf", "ac", "o", "w", "sk", "ko", "ku", "ks"], "x": ["z", "ey", "yx", "xes", "xp", "X", "ux", "xy", "y", "t", "ix", "xs", "xa", "i", "xx", "ax", "ci", "v", "check", "xt", "dx", "wx", "c", "mx", "ex", "fx", "ross", "ctx", "\u00e7", "p", "rx", "xc", " xx", "e", "ox", "xe", "xxxx", "xi", "w", "xf", "xd", "tx", "inx"], "temp_list": ["tem2list", "tem_List", "Temp_List", "tem_lists", "temp2st", "tempdList", "Temp2lists", "tempdlists", "Temp_st", "tempdset", "tem_set", "Temp2List", "temp2list", "Temp_lists", "temp_List", "tem2lists", "temp2List", "temp_lists", "Temp2list", "temp2set", "Temp2st", "tempdlist", "temp_set", "temp_st", "tem_list", "tem2set", "tem2List", "temp2lists", "Temp_list"], "_": [" un", "ay", " int", "ix", " j", "__", " __", " p", "ex", "val", " e", " l", "ox"], "ans": ["wan", "ls", "mas", "AN", "anc", "rs", "aks", "amps", "s", "anas", "xa", "aus", "ns", "ann", " Ans", "acs", "aps", "aos", "arts", "banks", "angs", "rans", "eds", "posts", "ations", "grades", "ANS", "nas", "uns", "una", "books", "ates", "ats", "ados", "anks", "an", "ks", "ants", "ows"], "a": ["ba", "ta", "ae", "ka", "y", "t", "sta", "af", "au", "s", "xa", "i", "aus", "ars", "A", "ca", "at", "v", "aos", "arts", "pa", "na", "ea", "an", "ak", "p", "aaaa", "alpha", "ada", "ao", "oa", "e", "ai", "sa", "ata", "aq", "aa", "ra", "ac", "o", "ma", "w", "ia", "ab", "eas", "aaa", "ana", "am", "ants"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "y", "t", "bc", "i", "bg", "bh", "fb", "r", "ch", "v", "c", "bm", "h", "g", "wb", "nb", "p", "bt", "bi", "j", "bf", "bin", "e", "bu", "sb", "beta", "bis", "bs", "bid", "w", "B", "ab", "bb", "base"]}}
{"code": "import itertools,sys\\ndef I(): return int(sys.stdin.readline().rstrip())\\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\\nN = I()\\nA = LI()\\nans = 0\\nfor x in [x for x in itertools.product([-1,0,1],repeat=N)]:\\n    calc = 1\\n    for i in range(N):\\n        calc *= A[i]+x[i]\\n    if calc%2==0:\\n        ans += 1\\nprint(ans)\\n", "target": "282", "substitutes": {"N": ["Y", "Num", "K", "C", "X", "AN", "F", "R", "Ni", "CNN", "G", "NB", "NI", "M", "NR", "Na", "NP", "NA", "S", "O", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NN"], "A": ["Y", "AR", "AA", "C", "X", "AN", "Al", "a", "AC", "G", "M", "CA", "S", "E", "As", "AU", "AT", "Ag", "AF", "L", "GA", "An", "At", "P", "AM", "AH", "T", "SA", "AS", "AB", "AP", "V", "I", "B", "Alpha", "Ad", "Ax", "AE"], "ans": ["ens", "stats", "cas", "anon", "lines", "ls", "AN", "oss", "ean", "anc", "cs", "rs", "cons", "amps", "xs", "iann", "s", "ins", "anas", "ms", "aus", "ns", "outs", "ars", "ann", "acs", "aps", "arts", "ums", "rans", "eds", "posts", "vs", "ANS", "can", "offs", "anes", "ams", "n", "ats", "ros", "an", "ks", "ants"], "x": ["z", "f", "xes", "xp", "X", "ux", "xy", "l", "y", "t", "ix", "xs", "s", "xa", "ax", "xx", "xb", "k", "v", "xml", "Tx", "xt", "dx", "wx", "c", "mx", "ex", "fx", "d", " X", "p", "rx", "xxx", "pi", "xc", " xx", "e", "ox", "xe", "xi", "n", "o", "ic", "w", "u", "xf", "xd", "tx", "inx"], "calc": ["caluc", "comuc", " calcat", "comv", "Calerr", "Calcount", "calcount", "comc", "calC", " recalC", " recalr", "calr", "comb", " recalcat", " calerr", "comcat", "Calc", " recalerr", " recalcount", " calC", "Calr", " Calb", " recalc", "calv", " calr", " Calc", "calerr", " Caluc", " recalv", "comsc", "comC", " Calsc", "calb", " calb", " calsc", " caluc", " calcount", "calcat", "calsc", " calv"], "i": ["z", "f", "zi", "m", "a", "l", "y", "t", "ix", "ti", "s", "ip", "key", "ci", "k", "v", "ij", "c", "index", "q", "b", "yi", "ind", "id", "di", "ik", "p", "j", "pi", "ai", "it", "ii", "xi", "si", "n", "ic", "o", "li", "I", "u", "ui", "mi", "im"]}}
{"code": "import math\\n\\ndef print_circle(r):\\n    \"\"\"\\n    r: float\\n    outputs area and circumfence of a circle(radius r)\\n    \\n    >>> print_circle(2)\\n    12.566371 12.566371\\n    \"\"\"\\n\\n    print(\"{0:.6f} {1:.6f}\".format(math.pi * r**2, 2 * math.pi * r))\\n\\nif __name__ == '__main__':\\n    r = float(input())\\n    print_circle(r)", "target": "758", "substitutes": {"r": ["f", "rb", "rate", "m", "range", "sr", "R", "rh", "l", "rs", "t", "nr", "result", "rect", "fr", "i", "attr", "rc", "k", "res", "c", "h", "q", "b", "rf", "g", "rad", "re", "d", "p", "radius", "ro", "e", "lr", "right", "ur", "rd", "n", "mr", "o", "u", "rec", "dr", "x", "rar", "ar", "rt"]}}
{"code": "import numpy as np\\nH,W,K = map(int,input().split())\\nS = [list(str(input())) for _ in range(H)]\\n\\nl = np.array([['0' for _ in range(W)]]*H)\\nl = l.tolist()\\nk= 1\\nfor i in range(H):\\n  for j in range(W):\\n    if S[i][j] == '#':\\n      l[i][j] = str(k)\\n      k += 1\\nfor i in range(H):\\n  for j in range(W):\\n    if l[i][j] == '0':\\n      if i > 0:\\n        l[i][j] = l[i-1][j]\\n      else:\\n        for m in range(1,H-i):\\n          if l[i+m][j] != '0':\\n            l[i][j] = l[i+m][j]\\n            break\\nfor i in range(H):\\n  for j in range(W):\\n    if l[i][j] == '0':\\n      if j > 0:\\n        l[i][j] = l[i][j-1]\\n      else:\\n        for m in range(1,W-j):\\n          if l[i][j+m] != '0':\\n            l[i][j] = l[i][j+m]\\n            break\\n  print(' '.join(l[i]))", "target": "165", "substitutes": {"H": ["Y", "HK", "HO", "He", "CH", "X", "F", "Th", "HT", "R", "G", "Han", "HI", "M", "N", "A", "HL", "High", "HD", "HH", "h", "TH", "MH", "Host", "GH", " h", "HC", "HA", "Hi", "HE", "L", "HR", "P", "SH", "Eh", "HTML", "Ha", "T", "J", "V", "I", "OH", "HTTP", "WH", "History", "Wh", "HS", "AH", "NH"], "W": ["Y", "Width", "F", "WS", "HT", "R", "WW", "WT", "N", "M", "WB", "OW", "WR", "Wi", "WE", "WAR", "WM", "Windows", "NW", "Week", "SW", "WF", "WP", "WI", "WA", "DW", "TW", "L", "Win", "RW", "VW", "CW", "J", "Wh", "V", "w", "BW", "I", "We", "EW", "WH", "MW", "WC"], "K": ["Y", "PK", "C", "X", "R", "G", "Ni", "N", "M", "A", "KR", "KS", "E", "O", "D", "km", "P", "Q", "MS", "T", "J", "Z", "V", "I", "B"], "S": ["els", "ls", "SI", "Sl", "Si", "C", "SS", "R", "SL", "G", "SB", " L", "xs", "s", "N", "M", "A", "U", "E", "D", "NS", "L", "ss", "P", "T", "J", "si", "V", "I", "B", "Li", "list"], "_": ["__", "place", "val", " the", "w", "___"], "l": ["z", "fl", "ol", "ld", "ls", "yl", "el", "le", "isl", "jl", "y", "t", "all", "lv", " L", "lis", "kl", "s", "r", "il", "lb", "v", "la", "sl", "c", "lt", "ln", "h", "b", "lc", "g", "tl", "lo", "lib", "cl", "ml", "p", "dl", "L", "lp", "pl", "hl", "lr", "al", "n", "loc", "o", "log", "w", "li", "left", "ell", "dL", "nl", "list", "rl", "lists", "ll"], "k": ["kr", "kind", "kh", "ka", "t", "ck", "kl", "ikk", "s", "ok", "kk", "kan", "ke", "kid", "key", "c", "mk", "q", "ak", "kn", "ijk", "ik", "p", "km", "kj", "ek", "kw", "tk", "n", "w", "sk", "ko", "ku", "ks"], "i": ["ini", "ei", "ri", "name", "ci", "ji", "status", "v", "hi", "h", "di", "ai", "xi", "iri", "li", "ia", "iter", "x", "ui", "iti", "iu", "z", "io", "zi", "cli", "ir", "this", "t", "aci", "ti", "info", "ati", "ki", "phi", "er", "bi", "qi", "o", "im", "uri", "ix", "\u0438", "r", "at", "ij", "c", "oi", "ie", "ik", "p", "ii", "ic", "a", "y", "ip", "gi", "ori", "ami", "yi", "id", "pi", " I", "it", "int", "si", "I", "u", "mi", "init"], "j": ["z", "str", "out", "obj", "ion", "jl", "pr", "pt", "off", "ja", "xy", "y", "ret", "ni", "ix", "you", "note", "t", "fr", "jp", "ji", "adj", "opt", "v", "err", "json", "ij", "h", "q", "b", "je", "g", "jac", "test", "rev", "di", "next", "p", "bi", "br", "oj", "jo", "kj", "jas", "exp", "jit", "it", "jj", "jump", "tr", "aj", "J", "n", "xi", "ju", "o", "uj", "dj", "li", "w", "rel", "dr", "on", "x", "bj", "js", "jc"], "m": ["mu", "z", "gm", "min", "ym", "wm", "mc", "tm", "am", "y", "t", "sm", "manager", "s", "ms", "dim", "M", "mn", "r", "mal", "v", "perm", "arm", "c", "bm", "mk", "mut", "h", "q", "g", "mx", "mod", "dm", "rm", "mem", "ml", "p", "vm", "man", "mt", "om", "mo", "lem", "mat", "n", "fm", "mr", "ma", "w", "u", "mom", "mm", "me", "um", "mi", "im", "cm"]}}
{"code": "moji = str(input())\\nprint((\"No\",\"Yes\")[(\"B\" in moji) and (\"A\" in moji)])", "target": "234", "substitutes": {"moji": ["omozy", "mooji", "meoji", "koeme", "goji", "koji", "meiji", "meji", "moori", "kooji", "moiji", "omoji", "gooji", "mita", " moori", "goiji", " moiji", "moita", "omoiji", "omoori", "meita", "mji", " mooji", "goeme", "moeme", "koiji", "mozy", "mezy", "meori", "omoita", "meeme", "omooji", "mzy"]}}
{"code": "n = int(input())\\nl = [0]*n\\nfor i in range(n):\\n    l[i] = list(map(int,input().split()))\\n\\nl.sort(key = lambda x:x[1])\\n\\ncnt = 0\\nfor i in range(n):\\n    cnt += l[i][0]\\n    if cnt > l[i][1]:\\n        print(\"No\")\\n        exit()\\n\\nprint(\"Yes\")", "target": "55", "substitutes": {"n": ["z", "f", "nn", "nia", "m", "a", "y", "nt", "t", "nr", "N", "len", "ns", "mn", "k", "r", "v", "na", "c", "ng", "sn", "ln", "nd", "g", "nu", "nb", "num", "d", "p", "j", "pi", "ne", "net", "gn", "np", "nan", "nc", "o", "no", "nl", "x", "ll"], "l": ["fl", "lit", "ol", "lines", "ld", "ls", "el", "le", "m", "lv", "t", "lis", "lang", "len", "lb", "la", "sl", "c", "lt", "long", "ln", "like", "b", "lc", "g", "lam", "ml", "dl", "p", "L", "j", "lp", "pl", "hl", "List", "al", "loc", "log", "li", "nl", "list", "x", "rl", "lists", "ll"], "i": ["z", "f", "ini", "ei", "zi", "m", "y", "t", "iy", "ti", "ip", "ci", "key", "ji", "gi", "v", "gu", "ij", "c", "ori", "index", "ki", "phi", "yi", "ind", "id", "di", "ik", "p", "bi", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "iri", "si", "ic", "li", "I", "ia", "x", "iti", "mi", "iu", "im", "ui", "ski"], "cnt": ["acot", "conount", "connt", "acnt", "acpt", "cnc", "Ccount", " cot", "cot", "CNT", "acct", "Cnc", " cpt", "cNT", "ccount", " ccount", "Cnt", "rcnc", "rcnt", "npt", "rcNT", " count", " cNT", "nct", "connc", "nnt", "rccount", "nnc", " cnc", "cct", " cct", "conct", "nount", "count", "cpt"]}}
{"code": "n=input()\\na = []\\na.append(str(n[:len(n):2]))\\nprint(*a)", "target": "20", "substitutes": {"n": ["z", "f", "nn", "m", "l", "nt", "t", "N", "i", "fn", "ns", "nm", "mn", "v", "na", "c", "long", "ln", "sn", "q", "b", "h", "g", "an", "cn", "nu", "num", "d", "p", "j", "ne", "gn", "np", "nan", "nc", "o", "nl", "bn", "x"], "a": ["ba", "obj", "el", "fa", "ap", "qa", "am", "ta", "all", "t", "sta", "ga", "au", "s", "xa", "i", "A", "ca", "at", "la", "aos", "pa", "na", "wa", "ea", "b", "aux", "area", "p", "va", "da", "ao", "oa", "sa", "ya", "ata", "aa", "ma", "ia", "set", "ab", "an"]}}
{"code": "S = input()\\nans = []\\ncount = 0\\nfor i in range(len(S)):\\n    if int(S[i]) == 2:\\n        count += 1\\nprint(count)", "target": "765", "substitutes": {"S": ["Sample", "BS", "Bytes", "String", "SI", "H", "C", "Si", "SS", "X", "F", "R", "SL", "G", "JS", "SB", "s", "N", "M", "A", "E", "DS", "Source", "D", "SAM", "NS", "SU", "L", "SP", "P", "Q", "SH", "T", "SA", "SF", "Z", "V", "I", "B", "CS", "Screen", "Set"], "ans": ["names", "ANN", "AN", "cons", "ins", "N", "outs", "CN", "ann", " Ans", "ands", "want", "ANS", "Names", "An", "Cons", "args", "ints", "List", "mean", "n", "Ex", "Ns", "vals", "Stats", "an", "ants", "States"], "count": ["thread", "ount", "max", "stat", "found", "sum", "report", "child", "find", "counter", "score", "hold", "t", "nt", "all", "amount", "old", "number", "result", "ch", "status", "now", "trust", "OUNT", "length", "c", "index", "start", "q", "group", "Count", "flag", "th", "ct", "nb", "code", "test", "id", "ind", "temp", "num", "size", "process", "cur", "total", "current", "n", "print"], "i": ["f", "ini", "zi", "m", "l", "y", "ti", "s", "ip", "key", "r", "k", "ji", "gi", "v", "ij", "c", "ki", "q", "b", "yi", "ind", "id", "di", "p", "bi", "j", "pi", "it", "ii", "xi", "n", "si", "li", "I", "x", "ui", "mi", "im"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**8)\\ndef ii(): return int(sys.stdin.readline())\\ndef mi(): return map(int, sys.stdin.readline().split())\\ndef li(): return list(map(int, sys.stdin.readline().split()))\\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for i in range(N)]\\ndef dp2(ini, i, j): return [[ini]*i for i2 in range(j)]\\ndef dp3(ini, i, j, k): return [[[ini]*i for i2 in range(j)] for i3 in range(k)]\\n#import bisect #bisect.bisect_left(B, a)\\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\\n#from itertools import accumulate #list(accumulate(A))\\n\\nH, W = mi()\\nh, w = mi()\\n\\nprint((W-w)*(H-h))", "target": "458", "substitutes": {"N": ["Num", "K", "C", "X", "R", "Ni", "CNN", "NB", "NI", "M", "NR", "MN", "Na", "NP", "NA", "S", "ND", "NT", "D", "NS", "NM", "L", "TN", "P", "T", "GN", "J", "n", "Z", "V", "I", "Ns", "NC", "NO", "NN", "NH"], "i": ["f", "io", "zi", "\u00ed", "m", "ir", "a", "y", "ti", "ip", "ci", "ji", "gi", "v", "ij", "c", "hi", "phi", "ami", "ie", "id", "di", "ik", "p", "bi", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "u", "ia", "x", "ui", "mi", "iu", "im"], "ini": ["pai", "ri", "mind", "zi", "fa", "cli", "pin", "uri", "ni", "py", "ti", "ci", "ji", "ani", "eric", "gi", "hi", "ki", "phi", "ami", "yi", "inis", "eni", "ind", "asi", "di", "ik", "bi", "vi", "pi", "cfg", "fi", "ai", "int", "ii", "xi", "iri", "si", "reci", "li", "umi", "ui", "mi", "iki", "ski", "init"], "j": ["z", "obj", "jl", "pr", "ja", "l", "y", "jp", "ji", "err", "v", "json", "ij", "job", "q", "g", "jac", "er", "next", "p", "bi", "br", "gov", "kj", "jas", "it", "jj", "jump", "tr", "aj", "J", "n", "o", "bs", "uj", "dj", "us", "bj", "js", "jc"], "i2": ["li2", "li02", "pi1", "pi3", "zi5", "pi02", "li5", "i5", "si2", "pi2", "zi02", "pi5", "i1", "si5", "i02", "li1", "zi3", "zi1", "zi2", "si02", "si3"], "k": ["K", "kr", "kind", "kh", "uk", "ka", "ck", "kl", "ikk", "ok", "key", "kk", "kan", "ke", "v", "mk", "ki", "ak", "kn", "ijk", "wk", "ik", "km", "kj", "ek", "kw", "tk", "sk", "ko", "ku", "ks"], "i3": ["gi7", "i7", "i6", " i7", " i6", "gi6", "pi3", "gi3", "pi2", "pi7", "gi2", "pi6"]}}
{"code": "import numpy as np\\nfrom collections import defaultdict,deque\\nN,K= map(int,input().split())\\nA = np.array([1]+list(map(int,input().split())))-1\\n\\nAcs = np.cumsum(A)\\nAcs %= K\\n\\nans = 0\\ncnt = defaultdict(deque)\\nfor i,c in enumerate(Acs):\\n    cnt[c].append(i)\\n    while cnt[c]:\\n        if i-cnt[c][0]> K-1:\\n            cnt[c].popleft()\\n        else:\\n            break\\n    ans += len(cnt[c]) - 1\\nprint(ans)\\n\\n\\n", "target": "596", "substitutes": {"N": ["Num", "C", " NP", "Ni", "CNN", " P", "M", " C", "Na", " D", " T", "Size", "S", " M", "D", "NS", " X", "P", "T", " V", "n", "V", " Ne", "Ns", "NC", " E", " n", " S"], "K": ["HK", "KA", "KN", "KY", "FK", "PK", "H", "C", "X", "KK", "R", "Kn", "SK", "G", "Ak", "Ka", "M", "k", "KR", "Max", "KI", "Mask", "KS", "Size", "S", "OK", "E", "NK", "D", "Can", "UK", "Key", "L", "TN", "DK", "P", "Q", "Sk", "T", "J", "Z", "The", "V", "I", "B", "KC"], "A": ["Y", "App", "Ass", "AA", "Ar", "H", "C", "X", "AC", "a", "G", "Acc", "Abs", "CA", "Av", "NA", "S", "As", "D", "All", "Array", "AT", "AF", "To", "GA", "An", "P", "AM", "And", "T", "AS", "Rap", "AB", "AP", "Z", "I", "B", "Alpha", "Ant", "ACT", "Ax", "SA"], "Acs": ["CACS", "Ancus", "Ares", "CAces", "Cctions", "Acos", "CAcos", " ACS", "AAcs", "AACS", "Ancks", "CAcks", "Acus", "Acks", "CAcs", "acs", " Als", "CActions", "ACS", "Aces", "AAces", "AUcs", "AUces", "acos", "CAcus", "Ancos", " Actions", "CCS", "AUCS", "Ccs", "AUres", "CAres", "CAls", "Cls", "Ancs", "acks", "acus", "Als", "AAres", "Actions"], "ans": ["ens", "stats", "rors", " scans", "aned", "oss", "cus", "cs", "nt", "amps", "xs", "s", "os", "anas", "ms", "aus", "outs", "ns", "ons", " orphans", "ann", " Ans", "aps", "news", "acs", "aos", "arts", "ins", "ents", "ians", "cn", " means", "ANS", "ots", "can", "ds", "nas", "uns", "ai", "offs", "nz", "nan", " spans", "ads", "sk", "ates", "ats", "us", "ros", "anks", "an", "ks", "ants"], "cnt": ["csnt", "Cent", " cgt", "ctgt", "cst", "csgt", "encct", "ctrt", "Cpt", "csct", "crt", "cnc", "ctnc", "Crt", "CNT", "encent", "Cnc", " cpt", "encNT", "cNT", "cgt", "Cct", "ctst", "Cnt", "tcct", "tcnt", "csNT", " cst", "cent", "ctnt", " cent", "ncst", "ctct", "ncnt", " cNT", "encnt", " crt", "Cgt", " cnc", "Cst", "cct", " cct", "ncct", "tcpt", "cpt"], "i": ["zi", "m", " bi", "a", "t", "Ni", "ix", "ti", "ip", "ci", "k", "ati", "v", "gi", " j", "ij", "index", "oi", "ki", " ki", "b", "ind", "id", " ii", "di", "ik", " Xi", "p", "j", "pi", "e", " I", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "u", "x", "mi"], "c": ["f", "sc", "mc", "C", "cat", "cr", "cus", "anc", "cs", "l", "t", "bc", "chain", "cf", "ci", "cin", "ca", "k", "v", "co", "lc", "gc", "cc", "ct", "unc", "ce", "cont", "p", "can", "col", "cp", "ec", "cd", "dc", "uc", "cache", "pc", "ac", "nc", "tc", "cu", "fc", "ic", "cor", "cm", "count"]}}
{"code": "import numpy as np\\n\\nn,m = map(int,input().split())\\nl = []\\nfor _ in range(m):\\n    a = list(map(int,input().split()))\\n    l.append(a)\\n\\nmemo = np.zeros((n,2))\\nmemo[0][1] = 1\\n\\nfor i in range(n):\\n    memo[i][0] = 1\\n\\ntmp1 = 0\\ntmp2 = 0\\n\\nfor j in range(m):\\n    tmp1 = l[j][0]-1\\n    tmp2 = l[j][1]-1\\n    memo[tmp1][0] -= 1\\n    memo[tmp2][0] += 1\\n    \\n    if memo[tmp2][1] == 0 and memo[tmp1][1] == 1:\\n        memo[tmp2][1] = 1\\n    \\n    if memo[tmp1][1] == 1 and memo[tmp1][0] == 0:\\n        memo[tmp1][1] = 0\\n\\nans = 0\\nfor k in range(n):\\n    ans += memo[k][1]\\n\\nprint(int(ans))\\n", "target": "311", "substitutes": {"n": ["nn", "y", "nt", "name", "t", "N", "len", "ns", "mn", "r", "nm", "v", " fn", "na", "c", "ln", "sn", "an", "h", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "pi", " ns", " ng", "ne", "net", "gn", "np", "nan", "nc", "o", " gn", "no", "nl", "on", "x", " N"], "m": ["gm", "mc", "tm", "y", "t", "sm", "ms", "M", "mn", "nm", "r", "v", "mis", "c", "bm", "h", "b", "g", "dm", "num", "d", "mem", "p", "km", "mt", "om", "mo", "np", "mr", "o", "mm", "mi", "cm"], "l": ["fl", "ol", "lines", "ld", "ls", "el", "le", "line", "lv", "t", "lin", "lis", "kl", "s", "r", "lb", "la", "v", "sl", "c", "lt", "ln", "b", "lc", "g", "lam", "ml", "p", "dl", "L", "lp", "pl", "lr", "o", "li", "nl", "list", "rl", "lists", "ll"], "_": [" an", "ix", " __", " each", " p", "ind", "ik", "p", " x", "ac", "I", "x", "an"], "a": ["add", "ba", "el", "ae", "ta", "att", "another", "all", "sta", "au", "ga", "ca", "A", "r", "at", "la", "c", "ea", "an", "b", "aux", "area", "d", "p", "alpha", "da", "sa", "aa", "ac", "o", "ma", "part", "ab", "aaa", "list", "ar", "am"], "memo": ["memoryome", "processbo", "memoryato", "Memato", " mempo", "temi", "Memo", "memoryoo", "memorypo", "embo", "processe", "Memro", "memro", "histpo", "sumo", "processo", "Mempo", "emo", "emmo", "gomo", "memberlo", "histo", "memoryos", "metmo", "empo", "memorybo", "mmo", "tembo", "Memgo", "membero", "memoryro", "mmbo", "Memos", "cryptlo", "cryptato", "memato", "goo", "memlo", "emcho", "sumos", "Meme", "Memlo", "processos", " memome", "memorymo", "mempo", "remgo", "memoryo", "cryptmo", "histbo", "crypto", "processpo", "memorylo", "meto", "gove", "memberos", "memi", " membo", "remo", "meme", "metlo", "memoryi", "histe", "emro", " memlo", "mmoo", "processmo", "memmo", "memve", "sumbo", "metpo", "emoo", "membo", "metbo", "Memmo", "tempo", "Memi", "memorygo", "emi", "cryptve", " meme", "memgo", " memmo", "golo", "temo", "memome", "memoo", "mmcho", "memorycho", "rempo", "cryptgo", "metve", " memro", "remos", "Membo", "processi", " memgo", "sumpo", "processro", "memberpo", "Memome", "memos", "cryptpo", " memos", "memcho"], "i": ["z", "ini", "zi", "y", "t", "ix", "ti", "ip", "ci", "ji", "v", "ij", "b", "ind", "ik", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "si", "o", "ic", "li", "I", "x", "mi", "iu", "im"], "tmp1": ["tmp01", "ppoone", "txt3", "prop2", "mpOne", "opp51", "temp0", "tmpOne", "perm2", " tmpOne", "mp01", "txt2", "temp2", "mp3", "cmp1", "stage2", "propOne", "permOne", "ppoOne", "temp3", "cmp2", "oppone", "obj1", "stageone", "opp1", "tmp3", "propone", "perm1", "mpone", "prop1", "cmp01", "cmpone", "txt1", "cmp0", "ppo1", "mp0", "mp2", "txtone", "permone", "oppOne", "temp01", "perm0", "tmp51", " tmp51", "cmp51", "mp1", "tmpone", "cmpOne", "obj2", "stage1", "tempone", " tmpone", "temp1", "objOne", " tmp01", "tmp0", "obj01"], "tmp2": ["perm4", "cmptwo", "mp4", " tmpl", "temptwo", "cachetwo", " tmp02", "tempTwo", "tmptwo", "perm2", "temp2", "temp4", "mp02", "txt2", "txt02", "tmp8", "permtwo", "txt4", "cmp2", "mpTwo", " tmptwo", "tmp4", "tmpl", "temp02", "cmp8", "perm8", "txt1", "mp2", "cache1", "cmp4", "cache2", "mpl", "cache02", "mp1", "templ", "mptwo", "temp1", "txtTwo", "tmp02", "tmpTwo", "temp8"], "j": ["z", "f", "obj", "jl", "ja", "y", "t", "jp", "ji", "r", "v", "json", "ij", "c", "h", "q", "b", "g", "jac", "ind", "d", "p", "bi", "kj", "jj", "jump", "aj", "J", "uj", "li", "dj", "bj", "js", "jc"], "ans": ["ens", "rors", "cas", "ls", "aned", "anc", "cs", "rs", "amps", "ms", "ars", "ins", "aus", "ns", "ons", "os", "ann", "anas", "acs", "arts", "ents", "ians", "ums", "rans", "aves", "eds", "posts", "yes", " means", "ids", "vs", "ANS", "ds", "leans", "uns", "nas", "anes", "ads", "ates", "ats", "ros", "anks", "an", "ks", "ants"], "k": ["dk", "kg", "K", "kr", "kind", "kt", "kh", "uk", "ka", "ck", "kl", "ikk", "key", "kk", "ke", "kid", "v", "c", "mk", "ki", "q", "g", "ak", "ijk", "ik", "km", "kj", "ek", "kw", "tk", "sk", "ko", "ku"]}}
{"code": "H, W, M = map(int, input().split())\\nR = [0]*H #\u5404\u884c\u306b\u3042\u308b\u7206\u5f3e\u306e\u500b\u6570\\nC = [0]*W #\u5404\u5217\u306b\u3042\u308b\u7206\u5f3e\u306e\u500b\u6570\\nbombs = []\\nfor _ in range(M):\\n    h, w = map(lambda x: int(x)-1, input().split())\\n    R[h] += 1\\n    C[w] += 1\\n    bombs.append((h, w))\\n\\nR_max = max(R)\\nC_max = max(C)\\n\\n### R\u304c\u6700\u5927\u304b\u3064C\u304c\u6700\u5927\u306a\u5ea7\u6a19\u3067\u3042\u3063\u3066\u3001\\n# \u305d\u3053\u306b\u7206\u5f3e\u304c\u306a\u3044\u5834\u5408\u304c\u3042\u308c\u3070\\n# \u7b54\u3048\u304cR_max+C_max\\n# \u306a\u3051\u308c\u3070R_max+C_max-1\\ncount = 0 # \u7206\u5f3e\u304c\u3042\u308b\u5ea7\u6a19\u3067\u3042\u3063\u3066\u3001R\u304c\u6700\u5927\u304b\u3064C\u304c\u6700\u5927\u306e\u7d44\u306e\u500b\u6570\\nfor bx, by in bombs:\\n    if R[bx] == R_max and C[by] == C_max:\\n        count += 1\\n\\ncount_R = R.count(R_max)\\ncount_C = C.count(C_max)\\nif count >= count_R*count_C:\\n    ans = R_max + C_max - 1\\nelse:\\n    ans = R_max + C_max\\nprint(ans)", "target": "694", "substitutes": {"H": ["Y", "K", "He", "CH", "C", "X", "F", "HT", "G", "HI", "N", "HB", "A", "HH", "U", "h", "E", "HC", "D", "HA", "HE", "L", "P", "Q", "T", "J", "V", "I", "B", "OH", "RH", "WH", "HS", "NH"], "W": ["Y", "K", "Width", "X", "F", "G", "WT", "N", "WB", "NW", "E", "SW", "D", "WP", "L", "DW", "RW", "P", "VW", "Q", "CW", "T", "V", "w", "BW", "WH", "Wh"], "M": ["Y", "K", "m", "C", "X", "F", "G", "MT", "N", "A", "MC", "U", "MM", "S", "E", "O", "D", "L", "P", "Q", "T", "J", "Z", "V", "I", "B"], "R": ["RGB", "RG", "K", "C", "RA", "X", "F", "RB", "G", "N", "r", "U", "RO", "S", "E", "O", "D", "L", "P", "Q", "T", "RP", "Z", "V", "RM", "B"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**8)\\n\\nn = int(input())\\nA = list(map(int, input().split()))\\n\\ndef f(i, v):\\n    if i == n:\\n        return any(x % 2 == 0 for x in v)\\n\\n    ans = 0\\n    for d in (-1, 0, 1):\\n        v_ = v[:]\\n        v_.append(A[i]+d)\\n        ans += f(i+1, v_)\\n\\n    return ans\\n\\nprint(f(0, []))", "target": "282", "substitutes": {"n": ["z", "nn", "nw", "m", "ni", "l", "nt", "t", "nr", "N", "len", "ns", "r", "k", "en", "na", "c", "ln", "sn", "b", "nd", "cn", "nu", "nb", "ny", "num", "nv", "p", "ne", "gn", "nc", "w", "nl"], "A": ["Y", "App", "AA", "Ar", "H", "C", "X", "AC", "a", "R", "Am", "Acc", "N", "M", "CA", "Att", "JA", "Av", "S", "As", "D", "AU", "Array", "AT", "AF", "L", "GA", "An", "At", "mA", "P", "AM", "T", "AB", "AP", "V", "Alpha", "B", "Ax", "AE", "Above"], "i": ["ini", "ri", "zi", "m", "a", "l", "y", "t", "ix", "ti", "ip", "ci", "gi", "ij", "c", "index", "ki", "phi", "ind", "id", "di", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "I", "li", "iter", "mi", "iu", "im"], "v": ["z", "f", "vo", "sv", "vv", "m", "a", "qv", "l", "y", "lv", "t", "to", "r", "value", "vp", "c", "h", "q", "b", "g", "tv", "vs", "nv", "va", "p", "j", "e", "vt", "uv", "V", "o", "u", "w", "list", "vector"], "x": ["z", "ey", "xes", "m", "X", "ux", "xy", "l", "y", "ix", "xs", "xa", "ax", "xx", "ci", "k", "xt", "dx", "wx", "c", "index", "q", "mx", "zx", "ex", "fx", "p", "rx", "xc", " xx", "xe", "xi", "w", "px", "xf", "xd", "tx", "inx"], "ans": ["ens", "lines", "checks", "ls", "sum", "names", "flags", "mas", "ran", "rs", "s", "ms", "anas", "ins", "aus", "ons", "ns", "reads", "ann", "outs", "ends", "aos", "ents", "es", "ums", "rans", "ands", "eds", "ies", " means", "san", "vs", "ANS", "can", "nas", "uns", "nan", "ates", "ats", "us", "als", "vals", "ros", "anks", "os", "an", "ants", "scan", "ows"], "d": [" dx", "z", "m", "ud", "l", "y", "t", " dd", "did", "ed", "s", "dd", "dim", "r", "dt", "sd", "dx", "c", "q", "b", "dis", "g", "nd", "ind", "D", "di", "de", "du", "pd", "p", "da", "j", "ds", "td", "e", "it", "dy", " sd", "dp", "ad", "o", "u", "w", "dr", "xd", "fd"], "v_": ["sv2", "vv2", "sv_", "vv_", " v2", "env_", "uv_", "v2", "z_"]}}
{"code": "def solve():\\n    import math\\n    K = int(input())\\n    ans = 0\\n    for i in range(1, K+1):\\n        for j in range(1, K+1):\\n            for k in range(1, K+1):\\n                ans += math.gcd(math.gcd(i,j), k)\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "19", "substitutes": {"K": ["Y", "KY", "FK", "PK", "H", "X", "AC", "Now", "KK", "ANK", "SK", "G", "Han", "N", "M", "BC", "KR", "IK", "KI", "Mask", "KS", "TH", "S", "OK", "VK", "NK", "Can", "UK", "Key", "Once", "TN", "DK", "P", "Q", "T", "J", "Z", "KEY", "V", "I", "B", "KC", "MK", "Context"], "ans": ["ens", "ls", "aned", "AN", "oss", "ran", "anc", "pan", "rs", "cons", "gs", "amps", "s", "ins", "anas", "ms", "aus", "ons", "ns", "ars", "ann", "os", " Ans", "acs", "outs", "aos", "arts", "ians", "ums", "rans", "ands", " means", "works", "ANS", "offs", "anes", "ams", "ras", "ats", "ros", "vals", "anks", "an", "ks", "ants", "lan"], "i": ["f", "io", "ini", "ri", "zi", "m", "a", "l", "y", "ti", "ip", "ci", "ij", "c", "phi", "ami", "ie", "id", "di", "ik", "p", "bi", "pi", "e", " I", "ai", "ii", "xi", "si", "n", "ic", "li", "u", "I", "x", "iti", "mi", "iu", "im"], "j": ["z", "obj", "jl", "m", "a", "ja", "l", "y", "jp", "ji", "r", "v", "ij", "job", "q", "b", "je", "g", "ijk", "bi", "oj", "kj", "jas", "jj", "aj", "J", "n", "o", "uj", "dj", "bj", "js", "jc"], "k": ["z", "kg", "m", "kr", "kt", "uk", "kh", "ka", "ck", "kl", "N", "M", "kk", "r", "ke", "sch", "kid", "kar", "mk", "ki", "q", "ak", "ijk", "id", "ik", "p", "kin", "kernel", "km", "alpha", "ek", "kw", "tk", "n", "sk", "ko", "ku", "ks"]}}
{"code": "import numpy as np\\nimport numba\\nimport sys\\nfrom numba import njit, b1, i4, i8, f8\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\n\\n@njit((i8, i8, i8[:]), cache=True)\\ndef main(Height, Width, XY):\\n    UP = 300010\\n    row = np.zeros(UP, np.int64)\\n    col = np.zeros(UP, np.int64)\\n    \\n    for i in range(0, len(XY), 2):\\n        x, y = XY[i:i + 2] - 1\\n        row[x] += 1\\n        col[y] += 1\\n    \\n    row_max = row.max()\\n    col_max = col.max()\\n\\n    judge = np.sum(row == row_max) * np.sum(col == col_max)\\n\\n    for i in range(0, len(XY), 2):\\n        x, y = XY[i:i + 2] - 1\\n        \\n        if (row[x] == row_max and col[y] == col_max):\\n            judge -= 1\\n    \\n    summ = row_max + col_max\\n    \\n    return (summ if judge else summ - 1)\\n\\n\\nHeight, Width, M_ko = map(int, readline().split())\\nXY = np.array(read().split(), np.int64)\\n\\nans = main(Height, Width, XY)\\nprint(ans)\\n", "target": "694", "substitutes": {"read": ["map", "create", "READ", "str", "train", "wait", "stream", "reader", "load", "sync", "seek", "find", "df", "chain", "poll", "hold", "readable", "format", "reads", "r", "buffer", "input", "check", "pipe", "open", "query", "write", "length", "pull", "g", "build", "select", "default", "num", "height", "Read", "end", "new", "get", "parse", "run", "align", "float", "feed", "iter", "print", "reverse", " Read", "roll", "data", "view", "scan", "text", "dat"], "readline": ["readernl", "readerline", " readnl", "READle", "readlist", "loadnl", "checkpoint", "loadline", "readpoint", "Readline", "READline", "Readle", "readLine", "ReadLine", "READlines", "loadlist", "loadlines", "loadpoint", "READLine", " readle", "checklines", "readle", "readnl", " readlist", " readpoint", " readLine", "checkline", "checklist", "readerLine", "readerlines", "loadLine", "Readlines"], "readlines": ["Readlists", "readerline", "writelines", "runlists", "Readline", "writeline", "writelists", "Readelines", " readcodes", " readelines", "readlists", "readelines", "runline", "readercodes", "readerelines", "Readcodes", "readcodes", "runlines", "runcodes", "readerlines", "writecodes", "Readlines"], "Height": ["Y", "Build", "Data", "Eth", "He", "H", "FontSize", "Div", "Total", "Al", "Th", "Memory", "HT", "Sh", "Frame", "Row", "Depth", "Head", "Length", "High", "Max", "Ty", "Body", "Hor", "Box", "Vert", "TH", "Size", "Count", "Rank", "Dir", "East", "Top", "Ry", "Family", "height", "Def", "Read", "Press", "Win", "Eh", "HTML", "Dim", "Window", "Res", "RH", "Sky", "Header", "History"], "Width": ["Graph", "Amount", "H", "FontSize", "Wide", "X", "WD", "Th", "Memory", "Format", "WW", "W", "M", "WR", "Left", "Cut", "Length", "Len", "Body", "Range", "TH", "Size", "Tools", "Position", "Path", "Widget", " width", "Will", "DW", "HTML", "Dim", "Lens", "Write", "Form", "BW", "Wr", "WH", "Render", "Web", "West", "Desktop", "width"], "XY": ["Y", "Tile", "TY", "Sample", "UX", "Data", "VO", "Bytes", "Try", "Byte", "IP", "Radio", "RY", "PK", "X", "Pos", "XT", "xy", "EY", "Ey", "Zip", "TeX", "REL", "Index", "Dat", "YN", "PO", "Offset", "Proxy", "OT", "OTE", "Socket", "XXX", "Ray", "Tex", "WER", "DX", "Position", "LIN", "Py", "FT", "Xi", "Ry", "IO", "EO", "NOTE", "ZX", "Ay", "Co", "FY", "XX", "Layout", "Foot", "Copy", "VT", "Rot", "JSON", "IE", "Report", "Vector", "Pie", "DOS", "GT", "TX", "YY", "XXXX", "POS"], "UP": ["UT", "IP", "IME", "MP", "UL", "UMP", "USH", "OP", "UC", "IV", "SUP", "ASC", "upt", "OW", "LU", "upper", "Up", "PU", "UB", "CU", "U", "ULL", "EP", "SW", "US", "ups", "upp", "SU", "UK", "EU", "AMP", "SP", "UF", "UM", "UI", "IPP", "DP", "up", "AP", "UV", "UD", "CP", "PUT", "RIP", "UID"], "row": ["rown", "sum", "line", "array", "range", "xy", "rep", "rs", "ow", "pos", "rot", "month", "rect", "our", "by", "rc", "r", "ver", "Row", "OW", "sw", "res", "co", "index", "post", "user", "th", "re", "ru", "rows", "ro", "frame", "ry", "room", "ox", "record", "run", "arrow", "bo", "server", "tr", "rank", "vr", "ob", "cell", "loc", "sur", "table", "tab", "dr", "roll", "ser", "box", "ows"], "col": ["fl", "ol", "obj", "pt", "cat", "label", "xy", "cs", "serv", "nt", "pos", "rot", "con", "len", "fn", "rol", "ch", "COL", "ctrl", "co", "cal", "c", "ct", "val", "lib", "cmd", "cl", "num", "cont", "cur", "char", "br", "dir", "cp", "vol", "column", "cmp", "mat", "block", "var", "cache", "fc", "table", "Col", "cell", "loc", "tab", "cor", "coll", "box", "ll"], "i": ["ini", "ei", "ri", "zi", "ir", "ix", "iy", "ti", "info", "ip", "ci", "ji", "gi", "v", "sp", "adi", "gu", "ij", "c", "index", "ki", "q", "phi", "b", "g", "yi", "sim", "ind", "id", "di", "p", "bi", "vi", "exp", "j", "pi", "qi", "ai", "it", "ims", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "ui", "mi", "iu", "im", "ali", "ski"], "x": ["z", "el", "yx", "xes", "xp", "X", "hex", "ux", "xy", "l", "ix", "xs", "ip", "xx", "r", "at", "v", "xml", "xt", "dx", "wx", "mx", "ex", "fx", "wy", "rx", "xxx", "com", "xc", "ox", "xe", "xxxx", "lex", "xi", "px", "w", "lat", "on", "xf", "tx"], "y": ["z", "Y", "sys", "ym", "ey", "yl", "yn", "ay", "my", "xy", "py", "iy", "sy", "ip", "yy", "ch", "yt", "c", "ys", "gy", "ot", "b", "ies", "ny", "hey", "fy", "br", "j", "ry", "ya", "ye", "axy", "yr", "cy", "yd", "sky", "ly"], "row_max": ["row_best", "row_sum", "rowtmin", "ows_set", "rowLmax", "owsLax", "ry_pop", "row_ax", "rowtmax", "ows_max", "ry_ax", "row_size", " row_min", "rowtfull", "row_full", "row_pop", "row00set", "row_lock", " row_full", "ry_sum", "row00best", "row_min", " rowtsize", "owsLlock", "rowLax", " rowtmax", " rowtfull", "row_set", " rowtmin", "rowtsize", " row_size", "row00max", "ry_max", "ows_lock", "rowLlock", "ows_best", "owsLmax", "ows_ax"], "col_max": ["col67ax", "Col_med", "Col_max", "col67max", " col_mid", "row2ax", "col_Max", "row_ax", "col_act", "col2sum", "row_act", " col2min", "col_ref", "Col_min", "Col_sum", "col67crit", "row2act", " col2max", "col_sum", "col2ref", " col2ref", " col_ax", "col_crit", "col67act", "col2ax", "col_mid", "col_med", "col2max", " col_Max", "col_min", "row2max", "col2min", "col2act", "row2crit", "row_crit", "col2med", " col_ref", "col_ax", "col2crit", " col2ax", " col_min"], "judge": [" judgy", "suging", "vinegate", "gedenge", "sugate", " judgate", " judGE", "wongy", "vinege", "juedge", "jonger", "judger", "jugy", "wonge", "wonenge", "gedgate", "judgee", "wonGE", "jongate", "judgate", "judedge", "judenge", "judgy", " judedge", "gedge", "gedgee", " judenge", "wongee", "vineger", "juGE", "jonging", "judging", "vineging", "wongate", "jonge", " judgee", "wonedge", "judGE", "suge", "suger", "juge"], "summ": ["samp", "Summ", "simm", "sum", "ssamp", "Susc", "jusc", "sums", "susc", "rsamp", "Sum", " simm", "rsum", "Simm", "Samp", "rsumm", " sums", " susc", "rsums", "jum", "ssumm", " sum", "ssum", "jumm", "Sums", " samp", "ssusc", "jimm"], "M_ko": ["E__no", "M__max", "E__max", "E_max", "E_nom", "E__nom", "M__no", "E__ko", "E_ko", "M_max", "M_no", "M_nom", "M__ko", "M__nom", "E_no"], "ans": ["rors", "ens", "anon", "AN", "oss", "rates", "ran", "amps", "iann", "ins", "os", "ms", "aus", "ns", "anas", "ann", "aos", "arts", "beans", "arms", "rans", "ys", "ands", "eds", "posts", "ations", "ids", "ANS", "anes", "ses", "ams", "mails", "asms", "ats", "ates", "ros", "anks", "an", "ants", "uploads"]}}
{"code": "#from collections import deque\\n#from heapq import heapify, heappop, heappush\\n#from bisect import insort\\n#from math import gcd\\n#mod = 10**9 + 7\\nN = int(input())\\n#N, K = map(int, input().split())\\n#A = list(map(int, input().split()))\\nflag1 = False\\nflag2 = False\\nflag3 = False\\nc, d = map(int, input().split())\\nif c == d:\\n\tflag1 = True\\nc, d = map(int, input().split())\\nif c == d:\\n\tflag2 = True\\nc, d = map(int, input().split())\\nif c == d:\\n\tflag3 = True\\n\\nk = 3\\nwhile k < N:\\n\tif flag1 and flag2 and flag3:\\n\t\tbreak\\n\tk += 1\\n\tc, d = map(int, input().split())\\n\tflag1 = flag2\\n\tflag2 = flag3\\n\tif c == d:\\n\t\tflag3 = True\\n\telse:\\n\t\tflag3 = False\\n\t\t\\n\\n#ans = 0\\n#print(ans)\\n#print('Yes')\\nif flag1 and flag2 and flag3:\\n\tprint('Yes')\\nelse:\\n\tprint('No')", "target": "709", "substitutes": {}}
{"code": "import math\\n\\na, b, x = [int(n) for n in input().split()]\\n\\ndef to_deg(theta):\\n    return theta * 180 / math.pi\\n\\nif x <= a**2 * b / 2:\\n    theta = math.atan((a * b**2) / (2*x))\\nelse:\\n    theta = math.atan(2 * (a**2 * b - x) / a**3)\\n\\nprint(to_deg(theta))", "target": "619", "substitutes": {"a": ["z", "f", "ba", "m", "ae", "ta", "y", "t", "ga", "au", "s", "ax", "i", "A", "ca", "la", "v", "c", "ea", "an", "era", "area", "d", "go", "va", "p", "alpha", "ao", "app", "oa", "act", "aka", "pi", "e", "sa", "ai", "aa", "aj", "al", "ac", "ma", "u", "ia", "ab", "aaa", "ar", "am"], "b": ["f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "t", "bc", "to", "i", "cb", "fb", "r", "v", "db", "c", "ble", "h", "g", "bas", "wb", "nb", "d", "p", "bi", "br", "j", "sb", "bu", "gb", "bis", "ob", "bs", "B", "ab", "bb", "eb"], "x": ["z", "f", "m", "X", "xy", "l", "y", "t", "xs", "xa", "i", "xx", "ax", "xb", "ch", "v", "xt", "dx", "wx", "c", "h", "mx", "ex", "p", "rx", "pi", "xc", "e", "ox", "xe", "xi", "ic", "w", "px", "xf", "xd", "tx"], "n": ["z", "nn", "names", "m", "nin", "node", "ni", "\u00f1", "nt", "t", "name", "note", "nr", "i", "fn", "ns", "mn", "nm", "k", "v", "nex", "na", "ln", "sn", "nd", "wn", "cn", "nu", "nb", "ind", "num", "nil", "j", "ne", "nan", "nc", "nl"], "theta": [" theeta", " theenta", "theenta", "Thet", "theeta", "THEta", "youreta", "Thetera", "THElia", "hega", "yourt", "THEte", "thete", "thetera", "thepha", "Theenta", "gett", "THEga", "Thete", "atheta", " thelia", "athepha", "thega", "gette", "THEt", "getta", "hete", "geteta", " thete", "yourpha", "heta", "yourta", " thetera", "het", " thepha", "atheeta", " thet", "thelia", "thet", "Theta", "athet", "heenta", "THEtera", "Theeta", " thega", "helia"]}}
{"code": "from collections import Counter,defaultdict,deque\\nfrom heapq import heappop,heappush\\nfrom bisect import bisect_left,bisect_right \\nimport sys,math,itertools,fractions\\nsys.setrecursionlimit(10**8)\\nmod = 10**9+7\\nINF = float('inf')\\ndef inp(): return int(sys.stdin.readline())\\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\\n\\nn = inp()\\nd = defaultdict(int)\\nfor _ in range(n):\\n    s = input() \\n    d[s[0]] += 1\\nres = 0\\nli = ['M','A','R','C','H']\\nfor i in range(3):\\n    a = li[i]\\n    for j in range(i+1,4):\\n        b = li[j]\\n        for k in range(j+1,5):\\n            c = li[k]\\n            res += d[a] * d[b] * d[c]\\nprint(res)", "target": "760", "substitutes": {"mod": ["add", "min", "sign", "inv", "floor", "debug", "pos", "adj", "circ", "scale", " Mod", "pre", "mult", "fun", "round", "exp", "frac", "Mod", "fac", "MOD", "tr", "neg", "log", "dec", "mag", "prime", "base"], "INF": [" INInf", "PINF", "INN", " INN", "PINInf", " INV", "INInf", "PINN", "InV", "INV", "InN", "InF", "PINV", "InInf"], "n": ["z", "f", "nw", "nn", "m", "l", "nt", "t", "nr", "N", "fn", "ns", "r", "len", "mn", "na", "ln", "sn", "nu", "nb", "tn", "num", "p", "ne", "nor", "np", "nan", "nc", "o", "w", "no", "nl", "x"], "d": ["f", "done", "ld", "des", "ded", "m", "df", "bd", "dev", "dos", "dict", "ed", "did", "dd", "result", "r", "dt", "div", "db", "sd", "dx", "nd", "D", "di", "pd", "de", "p", "do", "da", "hd", "dl", "ds", "gd", "td", "cd", "dh", "dates", "ad", "o", "dec", "dr", "data", "md", "dat", "fd"], "_": ["of", "ay", "name", "ix", "__", " __", "ind", " x", "ac", "I", "set", "x", "an"], "s": ["ps", "stats", "sts", "ws", "ls", "fs", "sis", "spec", "se", "rs", "gs", "su", "xs", "ins", "os", "states", "ns", "sw", "sp", "sl", "S", "sim", "ss", "ds", "sa", "sb", "so", "ses", "si", "bs", "sq", "ats", "als", "sat", "space", "ts", "qs"], "res": ["rand", "ress", "ps", "rest", "max", "out", "obj", "sum", "des", "grid", "cond", "reset", "rez", "ret", "nt", "cons", "result", "ms", "r", "resp", "gr", "resh", "q", "yes", "we", "val", "rss", "re", "mem", "crit", "p", "zero", "results", "net", "RES", "int", "rem", "pres", "rel", "Res", "resolution", "respons", "req", "us", "prime", "dr", "sol"], "li": ["ini", "ls", "zi", "cli", "pins", "l", "lis", "ti", "au", "ci", "lig", " Li", "la", "chi", "gi", "sl", "lu", "pal", "ln", "lc", "loop", "lo", "lib", "di", "ml", "dl", "cho", "bi", "lie", "pi", "fi", "ai", "gb", "LI", "xi", "si", "Li", "link", "mi", "ali", "multi"], "i": ["z", "f", "ei", "ini", "ri", "zi", "m", "l", "y", "ti", "ip", "ci", "r", "ji", "v", "gi", "gu", "ij", "hi", "h", "q", "ki", "yi", "ie", "id", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "o", "I", "ia", "x", "mi", "iu"], "a": ["ba", "apa", "m", "ae", "l", "au", "A", "ca", "r", "la", "at", "ea", "an", "p", "va", "da", "ao", "oa", "e", "sa", "ai", "aq", "aa", "aj", "al", "ac", "o", "u", "ia", "ab", "eas", "aaa", "ar", "am"], "j": ["z", "f", "obj", "jl", "m", "ja", "l", "y", "t", "fr", "jp", "r", "ji", "v", "ij", "h", "q", "job", "je", "g", "ijk", "p", "bi", "br", "kj", "e", "it", "jj", "aj", "J", "o", "uj", "dj", "x", "bj", "js", "jc"], "b": ["z", "f", "rb", "ba", "ib", "m", "bl", "be", "l", "y", "bc", "by", "cb", "r", "fb", "lb", "db", "v", "h", "nb", "bi", "br", "abb", "bf", "e", "sb", "aa", "bis", "bs", "u", "bot", "B", "ab", "bb", "bar", "eb"], "k": ["z", "kg", "K", "m", "kr", "kt", "kh", "uk", "ka", "y", "t", "ck", "kl", "key", "kk", "ke", "ch", "kid", "v", "kar", "mk", "ki", "q", "g", "ak", "ik", "p", "kj", "ek", "kw", "tk", "o", "u", "ko", "ku", "ks"], "c": ["z", "f", "C", "cr", "l", "cs", "t", "bc", "ck", "cf", "cb", "r", "cin", "ca", "ch", "v", "co", "h", "lc", "g", "cn", "cc", "ct", "ce", "cos", "p", "col", "cp", "e", "tc", "ac", "cu", "u", "cm"]}}
{"code": "def main():\\n  n = int(input())\\n  #s = input()\\n  #s = input().split()\\n  #a,b = list(map(int,input().split()))\\n  #a = [input() for i in range(n)]\\n  #a = [int(input()) for i in range(n)]\\n  #a = [input().split() for i in range(n)]\\n  #a = [list(map(int,input().split())) for i in range(n)]\\n  ans = 0\\n  count = 0\\n  lis = []\\n  \\n  if n == 25:\\n    print(\"Christmas\")\\n  elif n == 24:\\n    print(\"Christmas Eve\")\\n  elif n == 23:\\n    print(\"Christmas Eve Eve\")\\n  else:\\n    print(\"Christmas Eve Eve Eve\")\\nif __name__ == '__main__':\\n  main()", "target": "191", "substitutes": {"n": ["z", "f", "nn", "m", "l", "nt", "t", "nr", "N", "i", "fn", "ns", "nm", "k", "v", "c", "ln", "sn", "b", "cn", "nb", "d", "p", "j", "nan", "nc", "nl", "count"]}}
{"code": "S=input()\\nT=input()\\ns=len(S)\\nt=len(T)\\nA=[]\\n\\n\\nfor i in range(s-t+1):\\n  word=S[i:i+t]\\n  a=0\\n  for j in range(t):\\n    if word[j]==T[j]:\\n      a+=1\\n    else:\\n      a+=0\\n  A.append(t-a)\\n\\nprint(min(A))", "target": "526", "substitutes": {"S": ["SER", "SI", "Sl", "H", "C", "X", "SS", "F", "R", "SL", "G", "SB", "OS", "N", "M", "RS", "U", "ST", "SR", "O", "DS", "Source", "D", "SU", "L", "SP", "P", "TS", "Q", "SH", "SA", "SF", "Z", "V", "I", "B"], "T": ["Y", "TR", "C", "F", "R", "WT", "W", "G", "N", "M", "TA", "OT", "TO", "NT", "D", "AT", "TG", "L", "TB", "TN", "TM", "TS", "P", "RT", "Q", "J", "V", "BT", "I", "B", "VT", "TT", "GT", "TV", "XT", "PT", "TL"], "s": ["z", "f", "ps", "sv", "ls", "sc", "m", "mys", "cs", "se", "gs", "ms", "os", "ins", "ns", "sp", "sd", "sl", "c", "es", "g", "ies", "ess", "p", "ss", "ds", "its", "n", "si", "ats", "tes", "sat", "ts", "qs", "js", "st"], "t": ["type", "f", "tu", "z", "target", "pt", "tm", "m", "ta", "l", "ret", "tt", "y", "tw", "ti", "len", "ten", "r", "tp", "dt", "ty", "at", "v", "c", "h", "q", "ot", "b", "g", "test", "d", "te", "p", "total", "e", "it", "wt", "tr", "time", "n", "tc", "o", "w", "ts", "st"], "A": ["Y", "AY", "AR", "AA", "H", "C", "AN", "AC", "G", "W", "AV", "N", "ASC", "BA", "CA", "AL", "LA", "TA", "UA", "EA", "RAM", "JA", "NA", "E", "O", "As", "All", "HA", "AT", "AU", "Array", "D", "AF", "L", "WA", "GA", "An", "P", "AM", "This", "AP", "AB", "V", "Answer", "I", "B", "ACT", "AST", "SA"], "i": ["z", "ini", "ei", "ri", "zi", "m", "ir", "y", "ix", "ti", "ip", "ci", "at", "gi", "v", "ij", "hi", "ori", "ki", "phi", "ie", "ind", "id", "di", "ik", "bi", "pi", "qi", "ai", "it", "ii", "iri", "si", "xi", "ic", "I", "li", "ia", "ui", "mi", "iu", "im"], "word": ["type", "feat", "message", "field", "comment", "node", "W", "name", "wd", "key", "token", "byte", "tag", "words", "term", "ORD", "user", "bit", "string", "password", "Word", "char", "image", "man", "window", "letter", "feature", "piece", "short", "w", "part", "space", "rule", "item", "text"], "a": ["z", "f", "obj", "apa", "qa", "m", "ta", "ae", "l", "sta", "au", "ga", "result", "xa", "ca", "at", "la", "v", "pa", "wa", "c", "na", "ea", "an", "era", "b", "g", "area", "d", "p", "alpha", "ao", "oa", "e", "sa", "aa", "ac", "n", "o", "ma", "w", "sha", "ia", "ab", "aaa", "x", "am"], "j": ["z", "f", "obj", "jl", "m", "xy", "ja", "l", "y", "jp", "k", "ji", "r", "kid", "v", "ij", "c", "job", "q", "b", "h", "g", "p", "bi", "br", "oj", "kj", "e", "it", "jj", "jump", "aj", "J", "n", "o", "uj", "dj", "js", "bj", "jas", "jc"]}}
{"code": "N = int(input())\\nAB = [[int(i) for i in input().split()] for _ in range(N)]\\n\\nAB.sort()\\nprint(sum(AB[-1]))", "target": "266", "substitutes": {"N": ["Num", "K", "NE", "H", "C", "NF", "X", "CNN", "NB", "NI", "M", "NV", "NR", "CN", "A", "NP", "NA", "ND", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "GN", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "AB": ["TY", "BB", "BS", "AI", "DB", "AC", "EB", "Ab", "RB", "OB", "IA", "SB", "NB", "AUD", "BA", "IB", "ABC", "LAB", "UB", "ALK", "ACK", "GB", "YA", "AF", "LB", "ICA", "QB", "ADA", "RAY", "AM", "FB", "ARM", "SA", "PB", "B", "Lab", "ab", "BL", "CB", "BM", "AST", "BN", "AH", "BP"], "i": ["f", "io", "ini", "ri", "zi", "cli", "m", "l", "ix", "ti", "info", "ip", "ci", "r", "k", "v", "ij", "c", "hi", "oi", "ki", "q", "phi", "g", "id", "di", "p", "j", "pi", "qi", "e", "ai", "int", "ii", "xi", "si", "iri", "I", "li", "x", "mi", "iu"], "_": [" un", "name", "ix", " m", " j", " __", " p", "val", " e", " c", "j", " l", " z", " x", " k", "___", "x"]}}
{"code": "A, B, C = input().split()\\nif A[len(A)-1:len(A)] == B[0:1] and B[len(B)-1:len(B)] == C[0:1]:\\n    print('YES')\\nelse:\\n    print('NO')\\n", "target": "334", "substitutes": {"A": ["AY", "AR", "AA", "Ar", "H", "RA", "Al", "AC", "AN", "IA", "G", "AV", "BA", "CA", "AL", "LA", " AA", "As", "AU", "HA", "AT", "Array", "AF", "L", "GA", "An", "At", "ATA", "P", "AM", "AH", "This", "AS", "AE", "The", "AB", "AP", "I", "AST", "ART", "SA"], "B": ["Y", "BE", "BBC", "BB", "BS", "Blue", "VB", "Bytes", "AA", "DB", "H", "EB", "F", "RB", "Ber", "OB", "G", "But", "SB", "NB", "BO", "WB", "N", "BA", "IB", "BC", "BI", "b", "S", "CBS", "BIL", "L", "TB", "LB", "QB", "BG", "P", "Q", "T", "PB", "AB", "V", "BT", "BW", "BL", "BER", "Bern", "CB", "USB", "BY", "BR", "Bs"], "C": ["Y", "CE", "CH", "CO", "IC", "CNN", "CR", "CP", "CON", "N", "FC", "BC", "CA", "CI", "c", "Cu", "S", "E", "D", "CBS", "CT", "VC", "CC", "LC", "You", "OC", "T", "TC", "YC", "CCC", "V", "CS", "EC", "COM", "SC", "JC", "NC", "WC", "DC"]}}
{"code": "a,b,c,x,y = map(int,input().split())\\nans = 0\\nab = min(a+b,c*2)\\ntemp = min(x,y)\\nans += ab*temp\\nx -= temp\\ny -= temp\\nans += min(a,c*2)*x \\nans += min(b,c*2)*y\\nprint(ans)", "target": "430", "substitutes": {"a": ["ba", "ap", "ae", "sta", "af", "ed", "au", "ga", "i", "ax", "A", "ca", "la", "at", "ea", "an", "ami", "ak", "d", "ao", "app", "oa", "e", "sa", "ai", "aq", "aa", "aj", "al", "ac", "ma", "ace", "ia", "aaa", "ar", "ach", "am"], "b": ["z", "f", "rb", "ba", "ib", "be", "l", "big", "bc", "by", "i", "cb", "fb", "r", "ch", "db", "v", "g", "nb", "lib", "bi", "br", "j", "bf", "e", "sb", "gb", "ac", "ob", "ub", "bs", "o", "B", "bb", "eb"], "c": ["z", "f", "sc", "C", "cr", "cs", "bc", "cf", "con", "sec", "etc", "ci", "rc", "cb", "ca", "v", "co", "cv", "lc", "cc", "ct", "unc", "ce", "d", "cur", "cp", "ec", "e", "cd", "dc", "uc", "fc", "conf", "n", "ac", "tc", "cache", "vc", "cm", "category"], "x": ["z", "yx", "xp", "m", "X", "ux", "xy", "l", "t", "ix", "xs", "s", "xa", "ax", "xx", "i", "check", "xml", "v", "xt", "dx", "wx", "mx", "ex", "fx", "p", "rx", "xxx", "xc", "ox", "xe", "xxxx", "ai", "time", "xi", "px", "w", "lat", "xf", "xd", "tx"], "y": ["Y", "z", "sys", "ym", "ey", "yl", "yo", "yn", "ay", "m", "my", "xy", "l", "py", "t", "yer", "iy", "sy", "i", "oy", "yy", "ery", "ty", "yt", "ch", "v", "gy", "ys", "ot", "ies", "yi", "wy", "ny", "ady", "ry", "story", "ya", "uy", "ye", "axy", "yr", "n", "o", "vy", "sky", "ly"], "ans": ["ens", "beans", "ls", "aned", "oss", "uploads", "cons", "amps", "ins", "anas", "ms", "aus", "ons", "outs", "ars", "ann", "ns", " Ans", "aps", "aos", "arts", "aces", "ents", "atan", "ians", "ums", "arms", "angs", "ays", "ands", "unes", "posts", "ations", "asks", "yes", " means", "ANS", "leans", "sets", "lets", "uns", "nas", "offs", "powers", "anes", "ams", "mos", "ads", "ces", "ates", "ats", "asms", "ados", "aints", "anse", "an", "ks", "ants", "scan", "jas", "irms"], "ab": ["rb", "abe", "abc", "abis", "apa", "ap", "Ab", "af", "aus", "fab", "ABC", "at", "ij", "abi", "rab", "ak", "lab", "ada", "av", "ai", "sa", "aq", "al", "AB", "ac", "abs", "bs", "ob", "ub", "tab", "abl", "bb", "ar", "am", "eb", "hab", "aba"], "temp": ["type", "emp", "nom", "level", "tmp", "pt", "tm", "m", "ter", "ta", "tim", " temperature", "t", "volt", "result", "ty", "buffer", "status", "now", "v", "em", "length", "term", "tem", "mod", "jac", "mp", "test", "mem", "power", "p", "height", "j", "stem", "pi", "deg", "total", "kw", "Temp", "current", "warm", "tr", "time", "txt", "cache", "tc", "cum", "w", "unt", "ts", "mint", "cm", "unit", "hum", "perature"]}}
{"code": "s, t = input(), input()\\nfor i in range(len(t)):\\n    if s == t:\\n        print('Yes')\\n        exit()\\n    s = s[1:] + s[:1]\\nprint('No')", "target": "721", "substitutes": {"s": ["z", "f", "ps", "sts", "str", "sv", "ws", "ls", "m", "a", "cs", "rs", "y", "gs", "l", "ins", "ns", "r", "prints", "v", "strings", "sl", "c", "es", "hs", "h", "ys", "b", "q", "g", "S", "string", "p", "ss", "j", "ds", "sa", "sb", "its", "ses", "n", "si", "bs", "sq", "ats", "st", "x", "ts", "qs"], "t": ["z", "f", "str", "out", "pt", "m", "ta", "l", "y", "tt", "r", "ty", "v", "c", "ot", "b", "q", "g", "ct", "temp", "tg", "test", "title", "te", "p", "bt", "j", "e", "wt", "T", "vt", "txt", "tr", "n", "o", "w", "x", "ts", "rt", "st"], "i": ["f", " il", "irl", "ite", "iy", "ti", "ci", "r", "k", "il", " j", "ind", "id", " ii", "j", "it", "ii", "n", "I", "iter", "im"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\n\\nMOD = 1000000007  # type: int\\n\\ndef mfact():\\n    f = [1]\\n    for i in range(1, 200007):\\n        f.append(f[-1] * i % MOD)\\n    return f\\n\\ndef inv(x):\\n    res = 1\\n    k = MOD - 2\\n    y = x\\n    while (k):\\n        if(k % 2 == 1):\\n            res = (res * y) % MOD\\n        y = (y ** 2) % MOD\\n        k = k // 2\\n    return res\\n\\ndef comb(n, k, f):\\n    a = f[n]\\n    b = f[n-k]\\n    c = f[k]\\n    bc = (b * c) % MOD\\n    return (a * inv(bc)) % MOD\\n\\ndef solve(N: int, M: int, K: int):\\n    ans = 0\\n    for i in range(N):\\n        for j in range(M):\\n            a = j * (j+1) // 2\\n            b = (M-1-j) * (M-1-j+1) // 2\\n            ans += (a+b) * i + M * (i*(i+1)//2) + a\\n            ans %= MOD\\n    f = mfact()\\n    ans *= comb(N*M-2, K-2, f)\\n    ans %= MOD\\n    print(ans)\\n    return\\n\\n\\n# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    M = int(next(tokens))  # type: int\\n    K = int(next(tokens))  # type: int\\n    solve(N, M, K)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "341", "substitutes": {}}
{"code": "N = int(input())\\n\\nAlice = []\\nBob = []\\n\\na = list(map(int, input().split()))\\na.sort(reverse=True)\\n\\nif len(a) % 2 == 1:\\n    a.append(0)\\n\\nwhile len(a) > 0:\\n    Alice.append(a.pop(0))\\n    Bob.append(a.pop(0))\\n\\nprint(sum(Alice) - sum(Bob))", "target": "452", "substitutes": {"N": ["Y", "Num", "C", "F", "R", "Ni", "G", "M", "NR", "A", "CN", "NA", "S", "E", "O", "D", "NS", "Node", "L", "P", "Q", "T", "J", "n", "V", "I", "B", "Ns", "NN"], "Alice": ["Easy", "Justice", "Silver", "Jane", "Blue", "Our", "Witness", "Mouse", "Ox", "Gold", "Baby", "Everyone", "Friends", "Eye", "Ey", "Anonymous", "Here", "Square", "White", "Lady", "Tx", "Ear", "There", "Alex", "Wonder", "Windows", "Jones", "Allen", "Chicken", "Emily", "Her", "Anything", "Orange", "Taylor", "Little", "Bitcoin", "Ice", "Leon", "Isa", "Queen", "Anna", "Answer", "Beck", "That", "Mine", "Iron"], "Bob": ["Rub", "Justice", "Brown", "Uber", "Blue", "Jane", "Boy", "Baby", "Hope", "Everyone", "Jim", "Lib", "Rob", "Ber", "Kay", "SB", "Ey", "Other", "Bah", "Robert", "Love", "Black", "Be", "Bar", "Wonder", "Jones", "Bet", "Again", "Bear", "Larry", "Beer", "Her", "Orange", "Jerry", "Back", "Bitcoin", "Boston", "Bed", "Buzz", "Elsa", "Answer", "Dear", "B", "CB", "John", "Already"], "a": ["f", "add", "arr", "out", "apa", "array", "el", "m", "am", "ae", "att", "l", "all", "t", "sta", "to", "ga", "au", "ed", "s", "A", "ca", "en", "la", "at", "aos", "pa", "na", "c", "empty", "ea", "wa", "h", "b", "g", "er", "aux", "area", "va", "alpha", "ao", "oa", "zero", "parts", "e", "sa", "aa", "ac", "abs", "ma", "w", "set", "ab", "eas", "aaa", "list", "an", "ack", "new", "auto"]}}
{"code": "s = input()\\ncnt0 = s.count('-')\\ncnt1 = s.count('+')\\nprint(cnt1 - cnt0)", "target": "166", "substitutes": {"s": ["f", "ps", "sts", "str", "sv", "ls", "a", "sis", "spec", "l", "t", "gs", "ms", "ins", "i", "os", "ns", "sw", "input", "v", "sp", "strings", "sl", "c", "h", "q", "b", "gets", "S", "string", "p", "less", "ss", "sa", "sb", "ashes", "its", "n", "abs", "bs", "sq", "tes", "ats", "us", "st", "space", "ts", "qs", "comm", "js"], "cnt0": ["cpt0", " cnt2", " ccount1", " cnt00", "Cct2", "cnt2", "ccount00", "cct0", "Cct00", "cct00", "cst1", " ccount00", "Cnt0", "ccount1", " ccount2", "cct2", "cst2", "cpt2", " ccount0", "ccount2", "cNT0", "cpt00", "cnt00", "Cnt2", "cst00", "ccount0", "cst0", "cNT00", "Cct0", "cNT1", "cNT2", "Cnt00"], "cnt1": [" cnt3", " cct0", " cct8", "cuct0", "cct3", "cntOne", "cctOne", "cuctOne", "cgt0", "cnt8", "cth01", "cunt1", "cgtOne", "cgt01", "cct1", "cbn0", "cct0", "cunt0", "cct8", "cnt3", "cbn1", "cth1", "cct01", "cuct1", "cbn8", " cct1", "cNT8", " cct3", "cthOne", "cunt01", "cuct01", "cNT3", "cNT0", "cgt1", "cnt01", " cnt8", "cNT1", "cth0", "cuntOne", "cbn3"]}}
{"code": "def resolve():\\n    N, K = map(int, input().split())\\n    candy_counter = [0] * N\\n\\n    for _ in range(K):\\n        d = int(input())\\n        A = list(map(int, input().split()))\\n        for i in A:\\n            candy_counter[i-1] += 1\\n\\n    ans = 0\\n    for i in candy_counter:\\n        if i == 0:\\n            ans += 1\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    resolve()", "target": "252", "substitutes": {"N": ["Y", "Num", "C", "F", "R", "Ni", "CNN", "G", "NB", "NI", "W", "M", "NR", "MN", "NA", "S", "E", "ND", "NT", "D", "NS", "NM", "L", "TN", "P", "Q", "NPR", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NN", "NH"], "K": ["Y", "KA", "Num", "KN", "KY", "PK", "H", "C", "X", "F", "KK", "R", "SK", "G", "W", "M", "k", "KR", "KI", "KS", "D", "KING", "UK", "L", "TN", "P", "No", "Q", "KE", "T", "J", "Z", "V", "I", "B", "KC", "AK"], "candy_counter": ["candy_hash", "coral_count", "caught_counter", "candy_time", "candyfulcounter", "candy_prefix", "coneyfulcount", "coneyfultime", "candyfulCounter", "coney_time", "caught_Counter", "coney_counter", "coneyfulCounter", "coney_Counter", "caught_count", "candyfultime", "candy_Counter", "coral_counter", "coral_Counter", "coney_count", "candyfulcount", "candy_count", "coneyfulcounter", "coral_hash", "caught_prefix"], "_": ["ix", " D", " j", " __", " each", " p", "ny", "D", "ind", " some", "j", " the", " x", "I", "x"], "d": ["z", "f", "mind", "did", "dd", "dt", " D", "v", "dx", "c", "g", "id", "D", "di", "pd", "de", "do", "p", "da", "ds", "Di", "dc", "dp", "n", "dec", "w", "data", "dat"], "A": ["Y", "AI", "AA", "H", "C", "X", "AC", "a", "G", "M", "CA", "AL", "NA", "S", "As", "D", "AT", "AF", "L", "GA", "An", "P", "AD", "AM", "T", "SA", "AS", "AB", "Z", "V", "AP", "I", "B", "AE"], "i": ["ini", "ei", "ri", "zi", "m", "a", "t", "aci", "iy", "ti", "\u0438", "ip", "ci", "k", "ji", "ati", "gi", "v", "ij", "c", "hi", "oi", "ori", "ki", "yi", "ind", "id", "asi", "di", " Xi", "p", "bi", "j", "pi", "ai", "ii", "xi", "si", "ic", "o", "li", "I", "x", "ui", "mi", "iu", "im", "iti"], "ans": ["ens", "rors", "stats", "cas", "ls", "names", "nets", "mas", "idents", "cs", "rs", "amps", "iann", "s", "ins", "ms", "aus", "ns", "outs", "ons", "ann", "aps", "aos", "beans", "arts", "ents", "ians", "angs", "ums", "asks", "posts", "ids", "terms", "ANS", "anus", "lets", "nas", "helps", "offs", "ints", "ads", "ats", "ros", "ts", "anks", "an", "ks", "ants", "lan"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\n\\n\\ndef solve(N: int, P: \"List[int]\"):\\n    sorted_lis = sorted([(n, i) for i, n in enumerate(P)])\\n    max_con = 1\\n    con_cnt = 0\\n    pre_idx = N\\n    for _, i in sorted_lis:\\n        if i > pre_idx:\\n            con_cnt += 1\\n        else:\\n            max_con = max(max_con, con_cnt)\\n            con_cnt = 1\\n        pre_idx = i\\n    max_con = max(max_con, con_cnt)\\n    print(N - max_con)\\n    return\\n\\n\\n# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    P = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\\n    solve(N, P)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "525", "substitutes": {}}
{"code": "def merge(A,left,mid,right):\\n    global cnt\\n    n1 = mid - left\\n    n2 = right - mid\\n    cnt += n1+n2\\n    L = [A[left+i] for i in range(n1)]\\n    R = [A[mid+i] for i in range(n2)]\\n    L.append(float(\"inf\"))\\n    R.append(float(\"inf\"))\\n    i = 0\\n    j = 0\\n    for k in range(left,right):\\n        if L[i] <= R[j]:\\n            A[k] = L[i]\\n            i += 1\\n        else:\\n            A[k] = R[j]\\n            j += 1\\n\\ndef mergesort(A,left,right):\\n    if left +1 < right:\\n        mid = int((left+right)/2)\\n        mergesort(A,left,mid)\\n        mergesort(A,mid,right)\\n        merge(A,left,mid,right)\\n\\nn = int(input())\\nA = list(map(int,input().split()))\\ncnt = 0\\nmergesort(A,0,n)\\nprint(\" \".join(map(str,A)))\\nprint(cnt)\\n", "target": "201", "substitutes": {"A": ["AA", "X", "AC", "AN", "Abs", "BA", "CA", "AL", "ACE", "As", "AF", "GA", "An", "Java", "This", "Map", "And", "AB", "Answer", "AY", "API", "IA", "G", "M", "NA", "Store", "AU", "HA", "Array", "ATA", "P", "AM", "Y", "Data", "Ar", "AV", "EA", "Bar", "D", "All", "WA", "At", "mA", "Area", "V", "One", "ACT", "AE", "SA", "App", "AR", "H", "C", "Al", "a", "N", "Args", "LA", "RAM", "JA", "CAR", "S", "Complete", "AT", "From", "To", "ICA", "T", "J", "The", "AP", "I", "B", "AST"], "left": ["partial", "lit", "min", "out", "level", "el", "le", "top", "m", "range", "both", "my", "l", "parent", "old", "full", "this", "to", "Left", "url", "open", "root", "lock", "length", "sp", "lt", "long", "start", "lo", "tree", "ind", "id", "any", "ml", "cont", "path", "initial", "low", "pl", "local", "end", "self", "last", "net", "it", "current", "inner", "main", "center", "search", "small", "loc", "first", "rel", "lat", "nl", "list", "primary", "handle", "lower", "width", "st"], "mid": ["rand", "sub", "partial", "min", "med", "max", "le", "tm", "m", "top", "range", "pad", "grid", "my", "full", "to", "middle", "ms", "len", "high", "mn", "lim", "upper", "hi", "mk", "start", "mmm", "nd", "master", "begin", "mp", "id", "inter", "medium", "Mid", "mult", "morning", "end", "low", "local", "mt", "int", "half", "wid", "main", "ra", "rid", "mer", "tri", "mr", "center", "rel", "mini", "mm", "lat", "mi", "multi", "lower", "md"], "right": ["max", "recent", "wrong", "only", "through", "full", "close", "back", "ax", "over", "hi", "start", "Right", "ry", "ra", "first", "rem", "success", "x", "new", "rest", "top", "one", "row", "middle", "rc", "upper", "history", "ren", "rights", "radius", "end", "bottom", "last", "then", "rd", "med", "rh", "red", "raw", "r", "root", "gt", "re", "rew", "rw", "wo", "center", "hr", "w", "rand", "min", "third", "range", "res", "nd", "th", "remote", "id", "west", "rx", "ro", "block", "tr", "mr", "reverse", "correct", "rt", "after"], "n1": ["kone", "nl001", "k001", "N2", "k2", "n01", "nt2", "nlone", "nt1", " none", "nl1", "n0", " n0", "n03", "nt03", "n001", "N0", " n001", "c1", "N01", "N03", "N1", "nl2", " n01", "nt0", "none", " n03", "c2", "c01", "k1"], "n2": ["rtwo", "N7", "p2", "N2", "n4", "n02", "r2", " n02", "N4", "p02", "c4", "p3", "p1", "np2", " n7", " n4", "c1", "n7", "n62", "N1", "c7", "n3", "c2", "N02", " ntwo", "np62", "r02", "nptwo", "N3", "np02", " n62", "ntwo", " n3", "r62"], "cnt": ["ncount", "ncpt", " cnd", "lcount", "cnc", "cth", "tcount", " cth", " cpt", "tcnc", " cCount", "Cct", "ccount", " ccount", "ncCount", "cCount", "ncth", "Cnt", "Count", "tcnt", "nnd", "npt", "lcnc", "lcnt", " count", "ncnd", "lccount", "ncnt", "nct", "Cth", "nnt", " cnc", "cnd", "cct", " cct", "nCount", "nccount", "tccount", "nount", "ncct", "count", "cpt"], "L": ["DL", "ALL", "Sl", "H", "XL", "UL", "LR", "SL", "LE", "l", "OL", "LS", "VL", "ML", "LM", "N", "LT", "M", "LU", "Left", "LA", "AL", "LG", "NL", "EL", "U", "PL", "RL", "CL", "P", "LI", "J", "FL", "I", "B", "dL", "LP", "LD", "BL", "LL", "Lu", "TL"], "i": ["f", "io", "ini", "ei", "ri", "zi", "\u00ed", "m", "a", "l", "y", "t", "ix", "ti", "info", "ip", "ci", "r", "ji", "gi", "ij", "c", "ori", "oi", "hi", "ki", "phi", "ami", "ind", "id", "di", "ik", "p", "bi", "pi", "fi", "qi", "ai", "it", "int", "ii", "iri", "si", "xi", "ic", "li", "I", "ia", "u", "o", "x", "ui", "iti", "mi", "im", "iu"], "R": ["RR", "Y", "K", "RG", "C", "RA", "Rs", "RB", "G", "CR", "MR", "N", "M", "r", "RS", "GR", "U", "RO", "Range", "RE", "S", "E", "SR", "D", "RL", "Right", "HR", "RT", "P", "DR", "Q", "RES", "RF", "T", "RP", "J", "V", "RM", "I", "B", "Res", "RH", "BR", "RIP"], "j": ["z", "obj", "jl", "pr", "m", "ja", "l", "y", "t", "fr", "r", "jp", "ji", "res", "v", "json", "ij", "job", "b", "g", "jac", "ind", "id", "er", "next", "p", "br", "kj", "it", "jj", "jump", "aj", "J", "o", "uj", "dj", "u", "bj", "js", "jc"], "k": ["z", "K", "m", "kr", "kt", "kh", "ka", "y", "t", "ck", "kl", "ok", "key", "kk", "r", "ke", "kan", "kid", "v", "kar", "ij", "ki", "q", "b", "kn", "ak", "unk", "ijk", "id", "ik", "p", "kok", "km", "kj", "ek", "kw", "it", "tk", "u", "sk", "ko", "x", "ku"], "n": ["z", "nn", "m", "l", "y", "nt", "t", "N", "len", "ns", "r", "mn", "nm", "en", "na", "c", "ln", "sn", "h", "nd", "cn", "nu", "nb", "num", "d", "p", "ne", "net", "np", "nan", "nc", "o", "no", "nl", "x"]}}
{"code": "N = int(input())\\nA, B = map(int, input().split())\\nP = list(map(int, input().split()))\\ncnt = [0]*3\\n\\nfor i in range(N):\\n    if(P[i] >= B+1):\\n        cnt[2] += 1\\n    elif(P[i] <= A):\\n        cnt[0] += 1\\n    else:\\n        cnt[1] += 1\\nprint(min(cnt))", "target": "372", "substitutes": {"N": ["Y", "Num", "C", "X", "R", "G", "CNN", "NB", "M", "NR", "NA", "S", "ND", "NT", "D", "SN", "NS", "L", "NM", "No", "Q", "T", "GN", "J", "n", "V", "I", "NUM", "NC", "NO", "NN", "NH"], "A": ["AR", "K", "AA", "H", "C", "RA", "AC", "AN", "F", "R", "M", "CA", "LA", "AL", "U", "S", "E", "As", "AU", "HA", "AT", "L", "GA", "An", "At", "AM", "AH", "T", "AS", "AB", "AP", "I", "SA"], "B": ["Y", "BE", "BB", "BS", "AA", "DB", "C", "EB", "RB", "R", "G", "NB", "M", "BA", "WB", "BC", "IB", "BI", "Bar", "b", "GB", "E", "L", "TB", "LB", "BG", "T", "J", "AB", "V", "I", "BY", "BR", "Bs", "Base"], "P": ["Y", "Progress", "PF", "GP", "IP", "PD", "C", "MP", "H", "PM", "PS", "M", "PA", "PO", "JP", "NP", "PL", "Pi", "Pay", "Path", "PR", "S", "D", "p", "L", "TP", "SP", "PP", "Q", "T", "DP", "J", "AP", "V", "I", "LP", "PI", "Power", "Ps", "CP", "PUT", "vP", "PT"], "cnt": ["catt", "dcurt", " cnot", "cunot", "dcnt", "cwd", "dcrt", "pnd", "cunt", " cnd", "cuNT", "connt", "Cpt", "crt", "pct", "cth", "thurt", "CNT", " cth", " cpt", "cNT", "curt", "Cct", "conurt", "cumnot", "crpt", "watconn", "watrt", "cumNT", "Cnt", "crct", "watnt", "thnt", "cumnt", "crNT", "conwd", "crnt", " cconn", "cconn", "thconn", "pth", "cnot", "cumatt", " cNT", "Cth", "dcconn", " crt", "thwd", " curt", "conconn", "waturt", "cnd", "cct", " cct", "pnt", " cwd", " catt", "cuatt", "Cnd", "cpt"], "i": ["f", "ini", "ri", "zi", "uri", "a", "ix", "ti", "info", "s", "ip", "ci", "\u0438", "ji", "gi", "v", "ij", "c", "ori", "index", "ki", "b", "phi", "yi", "ind", "id", "di", "go", "p", "bi", "multi", "j", "pi", "it", "ii", "xi", "si", "n", "ic", "batch", "I", "li", "x", "ui", "mi", "im", "ski"]}}
{"code": "top=int(input())\\nbottom=int(input())\\nheight=int(input())\\n \\nnum=top+bottom\\n \\nans=int(num*height/2)\\n \\nprint(str(ans))", "target": "319", "substitutes": {"top": ["scroll", "target", "origin", "offset", "pt", "tops", "floor", "y", "t", "parent", "to", "pos", "tp", "at", "upper", "start", "ot", "above", "there", "Top", "tip", "hot", "lon", "TOP", "client", "onet", "up", "first", "left", "bot", "part", "lat", "x", "lower", "market"], "bottom": ["scroll", "origin", "side", "background", "level", "org", "rown", "base", "Bottom", "off", "bott", "floor", "y", "number", "row", "rot", "back", "below", "upper", "root", "ul", "position", "size", "volume", "rows", "window", "low", "total", "room", "last", "bo", "hang", "left", "bot", "south", "boot", "body", "lower"], "height": ["scroll", "style", "headers", "html", "y", "hei", "row", "density", "div", "ty", "yt", "bull", "history", "gravity", "length", "hs", "h", "zh", "margin", "above", "size", "volume", "rows", "window", "ht", "Height", "total", "padding", "hung", "hang", "w", "bot", "grow", "resolution", "hash", "width", "ows", "huge"], "num": ["Num", "nom", "won", "sum", "mon", "name", "number", "su", "pos", "nam", "common", "mn", "phys", "nm", "ver", "un", "msg", "cal", "index", "nu", "nb", "sim", "id", "alph", "total", "hot", "mat", "int", "np", "mark", "n", "uni", "cum", "part", "bid", "no", "set", "NUM", "um", "count"], "ans": ["wan", "anon", "ls", "names", "ran", "ean", "pan", "rs", "cons", "skin", "anned", "s", "ms", "ins", "ang", "ns", "mn", "aus", "ann", "caps", "un", "beans", "ians", "angs", "ums", "rans", "ids", "ANS", "can", "ds", "nas", "zan", "anes", "nan", "us", "vals", "anks", "ana", "an", "ks", "ants", "scan", "lan"]}}
{"code": "def cmb(n, r, mod):\\n    if ( r<0 or r>n ):\\n        return 0\\n    r = min(r, n-r)\\n    return g1[n] * g2[r] * g2[n-r] % mod\\n\\nmod = 10**9+7 #\u51fa\u529b\u306e\u5236\u9650\\nN = 2*(10**6)\\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\\n\\nfor i in range( 2, N + 1 ):\\n    g1.append( ( g1[-1] * i ) % mod )\\n    inverse.append( ( -inverse[mod % i] * (mod//i) ) % mod )\\n    g2.append( (g2[-1] * inverse[-1]) % mod )\\n\\nK = int(input())\\nS = input()\\nL = len(S)\\n\\nans = 0\\nfor i in range(K+1):\\n    ans += cmb(K+L-i-1,K-i,mod)*pow(25,K-i,mod)*pow(26,i,mod)\\n    ans %= mod\\n\\nprint(ans)", "target": "539", "substitutes": {"n": ["z", "rand", "f", "nn", "nw", "m", "node", "l", "nt", "t", "number", "nr", "s", "N", "i", "ns", "nm", "k", "mn", "v", "na", "c", "ren", "ng", "sn", "q", "h", "ln", "g", "cn", "nu", "nb", "rn", "num", "d", "p", "dn", "br", "j", "ne", "e", "net", "np", "nc", "o", "w", "u", "on", "x"], "r": ["f", "rb", "rate", "min", "pr", "m", "rr", "rg", "sr", "cr", "a", "ir", "range", "R", "rh", "l", "rs", "t", "nr", "s", "fr", "i", "rc", "err", "k", "v", "c", "h", "q", "rf", "b", "g", "rn", "re", "er", "d", "p", "br", "j", "ro", "e", "nor", "lr", "ra", "ur", "rank", "rd", "mr", "vr", "u", "o", "hr", "w", "reg", "dr", "x", "rar", "ar", "rt"], "mod": ["z", "rand", "sub", "add", "min", "max", "base", "sum", "m", "sign", "dig", "a", "spec", "floor", "ix", "month", "seq", "rot", "fre", "pos", "step", "module", "div", "term", "scale", "b", "rad", "bit", " Mod", "re", "pre", "num", "d", "mult", "p", "exp", "dir", "ro", "Mod", "mode", "od", "MOD", "var", "tr", "ac", "log", "dec", "set", "reg", "x", "req", "year", "mods", "fun"]}}
{"code": "N, K = map(int, input().split())\\nA = [list(map(int, input().split())) for _ in range(N)]\\nA.sort()\\nfor i in range(N):\\n    if K>A[i][1]:\\n      K -= A[i][1]\\n    else:\\n      ans = A[i][0]\\n      break\\nprint(ans)", "target": "608", "substitutes": {"N": ["Num", "H", "C", "NF", "X", "F", "R", "Ni", "CNN", "G", "NB", "NI", "M", "NR", "MN", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "No", "T", "GN", "J", "n", "V", "I", "B", "Ns", "NO", "NN", "NH"], "K": ["Y", "HK", "KA", "KN", "KY", "PK", "H", "C", "X", "F", "KK", "R", "ka", "G", "W", "M", "k", "KR", "KS", "S", "E", "VK", "NK", "UK", "L", "DK", "P", "Q", "KE", "T", "J", "Z", "V", "I", "B", "MK", "ks"], "A": ["ETA", "App", "AY", "AA", "Ar", "API", "AC", "a", "F", "Alice", "IA", "G", "AV", "M", "BA", "PA", "CA", "LA", "TA", "Abs", "What", "Args", "EA", "RAM", "JA", "NA", "S", "O", "As", "All", "D", "AT", "Array", "AU", "AF", "WA", "GA", "An", "ICA", "ATA", "mA", "P", "MA", "Java", "AM", "This", "You", "AS", "AE", "The", "AB", "AP", "Answer", "One", "I", "B", "Alpha", "ACT", "AST", "SA", "OA"], "_": [" name", " un", " key", " ind", "name", "ix", "k", " j", " mult", " __", " each", " p", "id", " z", " x", " y", "I", "x", " id", " row", " index"], "i": ["f", "io", "ini", "ri", "zi", "uri", "m", "a", "this", "ix", "ti", "info", "s", "ip", "\u0438", "k", "ji", "gi", "ij", "c", "ori", "index", "h", "phi", "sim", "ind", "id", "di", "ik", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "n", "ic", "si", "I", "li", "batch", "me", "x", "ui", "mi", "im"], "ans": ["ens", "ps", "ls", "names", "Dan", "AN", "ran", "idents", "amps", "s", "ins", "os", "ms", "aus", "ns", "outs", "ann", "aos", "beans", "arts", "ians", "KS", "ids", "ANS", "Is", "leans", "An", "uns", "offs", "phans", "ates", "us", "ros", "vals", "anks", "ana", "an", "ks", "ants", "lan"]}}
{"code": "import math\\nn = int(input())\\nx = list(map(int, input().split()))\\ny = list(map(int, input().split()))\\ntmp = [[0 for i in range(6)] for j in range(n+1)]\\nabsDiff = abs(x[0]-y[0])\\ntmp[0][3] = tmp[0][0] = absDiff\\ntmp[0][4] = tmp[0][1] = absDiff ** 2\\ntmp[0][5] = tmp[0][2] = absDiff ** 3\\nmax = absDiff\\nfor i in range(1, n, 1):\\n    absDiff = abs(x[i]-y[i])\\n    tmp[i][0] = absDiff\\n    tmp[i][1] = absDiff ** 2\\n    tmp[i][2] = absDiff ** 3\\n    tmp[i][3] = tmp[i-1][3] + tmp[i][0]\\n    tmp[i][4] = tmp[i-1][4] + tmp[i][1]\\n    tmp[i][5] = tmp[i-1][5] + tmp[i][2]\\n    if absDiff > max:\\n        max = absDiff\\nprint(tmp[n-1][3])\\nprint(math.sqrt(tmp[n-1][4]))\\nprint(tmp[n-1][5] ** (1/3))\\nprint(max)", "target": "325", "substitutes": {"n": ["z", "nn", "min", "names", "m", "ni", "l", "nt", "t", "number", "all", "note", "nr", "name", "N", "fn", "ns", "mn", "k", "r", "en", "v", "at", "na", "c", "ren", "ln", "sn", "an", "ng", "g", "cn", "ct", "nu", "nb", "d", "num", "size", "p", "dn", "network", "ne", "none", "net", "np", "nan", "batch", "nc", "o", "w", "no", "nl", "on"], "x": ["z", "ls", "obj", "xes", "xp", "X", "hex", "ux", "xy", "l", "t", "ix", "xs", "xa", "ax", "xx", "input", "xml", "xt", "dx", "wx", "q", "ex", "work", "ml", "p", "rx", "xxx", "act", "xc", "ox", "xxxx", "xi", "lex", "px", "lat", "xf", "data", "xd", "tx"], "y": ["Y", "yo", "ey", "yl", "ym", "ay", "m", "yout", "xy", "yu", "t", "py", "yer", "iy", "oy", "sy", "yy", "yt", "v", "ys", "gy", "b", "ies", "yi", "ny", "fy", "p", "ya", "uy", "ye", "axy", "yr", "cy", "vy", "hy", "sky", "yk"], "tmp": ["img", "tu", "sup", "emp", "secondary", "attr", "cb", "etc", "tp", "expr", "timeout", "slow", "empty", "slice", "tree", "tg", "tn", "cmd", "pre", "ctx", "cur", "cp", "buf", "cmp", "tf", "gb", "mm", "auto", "sys", "obj", "top", "params", "desc", "node", "pkg", "t", "xs", "result", "assets", "ty", "perm", "json", "dirty", "split", "tem", "temp", "nb", "storage", "test", "comp", "pretty", "same", "txt", "stuff", "tc", "table", "yet", "buff", "req", "prefix", "ppo", "terms", "proc", "pro", "rb", "dump", "src", "elt", "nt", "yy", "resp", "msg", "sp", "tar", "csv", "lib", "p", "app", "uf", "cache", "aaa", "qq", "primary", "multi", "html", "zip", "py", "tt", "adj", "db", "now", "managed", "mk", "extra", "mp", "config", "td", "np", "tab", "prime", "rt"], "i": ["ei", "ini", "ri", "ci", "ji", "v", "status", "hi", "g", "source", "di", "ai", "xi", "iri", "li", "ia", "iter", "list", "ui", "iu", "z", "f", "io", "zi", "m", "cli", "ice", "t", "ti", "info", "index", "ki", "phi", "temp", "ind", "asi", "bi", "qi", "me", "im", "item", "iii", "l", "ios", "ix", "\u0438", "k", "il", "at", "ij", "oi", "ik", "p", "ii", "ic", "iy", "ip", "gi", "ori", "yi", "id", "pi", "it", "int", "si", "u", "I", "mi", "init"], "j": ["z", "ion", " iii", "zi", " bi", "ni", "l", "ix", " li", "k", "ji", "ij", "ket", "q", " e", " ii", "di", " c", "oj", "kj", "ai", "jj", " k", "J", "uj", "li", " di"], "absDiff": ["httpsDifferent", "accDifferent", "abisDelta", "AbsDiff", "accDiff", "absDist", "absoluteNew", "httpDelta", "abiDiff", "httpDiff", "absDual", "abisLen", "absDamage", "absoluteDamage", " absNew", "bsDelta", "habPatch", "bsDiff", "absoluteDiff", "abWar", "httpNew", "abDiff", "absPatch", "abDual", "abiDist", "bsdiff", "abLen", "relDiff", "abiDelta", "abisDiff", "accdiff", "bsDist", "habDifferent", "accDist", "httpsDiff", "abNew", "absDelta", "bsPatch", "Absdiff", "httpsDamage", "abDist", "absolutediff", "habDelta", "abDifferent", " absDelta", "habDiff", "abiDifferent", "relDifferent", "relDelta", "absWar", "abDelta", " absWar", "absoluteDelta", " absDual", "bsDifferent", "absoluteDifferent", " absDist", " absPatch", "abDamage", "absdiff", " absLen", "absDifferent", " absdiff", "abisDual", "absLen", " absDifferent", "abdiff", "absNew", "httpsNew", "httpWar", "AbsDelta"], "max": ["rest", "min", " Max", "med", "sum", "pr", "recent", "m", "only", "range", "std", "t", "full", "to", "hash", "step", "ax", "final", "MAX", "k", "res", "v", "check", " MAX", "Max", "length", "start", "scale", "gt", "fixed", "mx", "h", "default", "size", "next", "p", "exp", "end", "null", "total", "last", "maximum", "right", "mean", "best", "w", "ma", "grow", "dot", "mad", "view", "auto", "huge"]}}
{"code": "import sys\\na,b=list(map(int,input().split()))\\nif b==1:\\n  print(0)\\n  sys.exit()\\nfor i in range(100):\\n  if a+(a-1)*i >=b:\\n    print(i+1)\\n    sys.exit()", "target": "335", "substitutes": {"a": ["z", "f", "ba", "m", "ae", "ta", "l", "y", "t", "sta", "ga", "au", "xa", "A", "r", "la", "v", "c", "ea", "index", "g", "tta", "area", "p", "va", "alpha", "ao", "pi", "oa", "e", "sa", "ai", "aq", "aa", "ac", "n", "ma", "u", "w", "ia", "ab", "aaa", "x", "an"], "b": ["rb", "ba", "ib", "m", "mb", "be", "l", "y", "t", "bc", "to", "cb", "r", "fb", "v", "db", "c", "g", "wb", "nb", "d", "there", "p", "bi", "br", "j", "bf", "e", "sb", "beta", "bis", "n", "ob", "bs", "B", "ab", "bb", "base", "eb"], "i": ["f", "ini", "zi", "m", "l", "ix", "ti", "s", "ip", "ci", "k", "ji", "gi", "v", "ij", "c", "hi", "index", "ki", "q", "yi", "id", "di", "p", "bi", "j", "pi", "fi", "qi", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "u", "li", "I", "x", "ui", "mi", "iu", "multi"]}}
{"code": "a,b=list(map(int,input().split()))\\nif (a+b)>=24:\\n    print((a+b)-24)\\nelse:\\n    print(a+b)\\n\\n", "target": "253", "substitutes": {"a": ["ba", "el", "apa", "m", "am", "ta", "\u00e1", "att", "ae", "l", "t", "sta", "to", "au", "ga", "i", "A", "ca", "r", "at", "la", "c", "ea", "era", "area", "d", "p", "da", "ao", "act", "oa", "aka", "e", "sa", "ai", "aq", "aa", "aj", "al", "n", "ac", "ma", "ia", "ab", "eas", "aaa", "x", "ar", "an"], "b": ["f", "sub", "rb", "erb", "ib", "bl", "mb", "be", "l", "t", "bc", "bp", "ed", "back", "i", "cb", "fb", "db", "v", "c", "long", "nb", "d", "bi", "br", "j", "bin", "e", "sb", "it", "beta", "bis", "n", "ob", "o", "bs", "ub", "abs", "B", "ab", "bb", "bar", "base", "eb"]}}
{"code": "import math\\na,b,C = (float(i) for i in input().split())\\nrad =math.radians(C)\\nS = a*b*0.5*math.sin(rad)\\nL = a+b+math.sqrt(a**2+b**2-2*a*b*math.cos(rad))\\nH = b*math.sin(rad)\\nprint(S)\\nprint(L)\\nprint(H)", "target": "221", "substitutes": {"a": ["ba", "m", "ae", "l", "t", "to", "au", "ga", "s", "A", "r", "ca", "la", "at", "v", "c", "ea", "an", "era", "g", "val", "d", "va", "alpha", "ao", "oa", "e", "sa", "ai", "aq", "aa", "aj", "al", "n", "ac", "ma", "u", "w", " A", "ia", "ab", "aaa", "x", "ar", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "big", "s", "by", "back", "cb", "fb", "r", "v", "db", "c", "h", "g", "wb", "nb", "lib", "d", "p", "bi", "br", "j", "bin", "e", "sb", "bu", "gb", "n", "ob", "ub", "bs", "u", "o", "B", "ab", "bb", "eb"], "C": ["K", "CO", "AC", "F", "R", "G", "W", "Cs", "CON", "CM", "N", "M", "A", "BC", "CA", "c", "E", "O", "D", "CC", "P", "DC", "LC", "CW", "T", "Co", "V", "I", "B", "CS", "SC", "WC", "CP"], "i": ["f", "ei", "ini", "zi", "\u00ed", "l", "t", "ix", "ti", "s", "ci", "v", "ij", "c", "oi", "ki", "q", "phi", "id", "di", "bi", "j", "pi", "fi", "qi", "ai", "ii", "iri", "n", "si", "xi", "o", "I", "li", "iter", "x", "iu"], "rad": ["rand", "rb", "pard", "ram", "m", "range", "pad", "R", "red", "rh", "y", "ix", "rot", "rect", "ang", "raw", "r", "phys", "div", "lim", "root", "c", "bound", "term", "mod", "d", "mem", "cos", "ring", "radius", "Rad", "dir", "pi", "ro", "deg", "mad", "bin", "angle", "var", "conf", "rank", "ad", "grad", "w", "rem", "dra", "mm", "lat", "req", "prefix", "disc", "sky", "rain"], "S": ["St", "SER", "SI", "Sl", "Si", "SS", "Sn", "R", "SL", "JS", "SB", "LS", "SM", "SD", "s", "M", "A", "ST", "SR", "DS", "SN", "STR", "SU", "SO", "SP", "SF", "SE", "I", "B", "CS", "SC", "SA", "SQL", "Sign"], "L": ["DL", "Sl", "XL", "UL", "Long", "LE", "SL", "l", "OL", "LS", "ML", "LM", "LT", "LG", "LU", "LA", "HL", "AL", "NL", "EL", "PL", "LIN", "RL", "CL", "LB", "IL", "List", "LI", "I", "Li", "B", "LP", "LD", "dL", "LL", "Lu", "TL"], "H": ["HO", "He", "CH", "HT", "R", "HI", "M", "HB", "HQ", "HL", "High", "HD", "HH", "h", "TH", "MH", "Host", "GH", "His", "HC", "HA", "HE", "HM", "DH", "HR", "HTML", "EH", "OH", "RH", "WH", "HTTP", "Wh", "HS", "NH"]}}
{"code": "from fractions import gcd\\n\\nn, k = map(int, input().split())\\na = sorted(list(map(int, input().split())))\\nif max(a) < k:\\n    print(\"IMPOSSIBLE\")\\n    exit()\\nx = a[0]\\nfor i in range(1,n):\\n    x = gcd(x, a[i])\\n\\nprint(\"IMPOSSIBLE\" if k % x else \"POSSIBLE\")\\n", "target": "603", "substitutes": {"n": ["f", "nn", "m", "l", "y", "nt", "name", "t", "nr", "N", "ns", "mn", "r", "nm", "v", " fn", "na", "c", "ln", "sn", "q", "h", "g", "cn", "nu", "nb", "rn", "tn", " number", " nu", "num", "p", "j", " ns", " ng", "ne", " l", "gn", " N", "nc", " gn", "w", "o", "nl", "on", " na"], "k": ["dk", "f", "z", "max", "K", "m", "kr", "kt", "ka", "ck", "kl", "ikk", "kick", "kk", "key", "ke", "kid", "v", "c", "mk", "ki", "q", "g", "kn", "unk", "ak", "wk", "ik", "num", "kok", "p", "km", "j", "kj", "ek", "zero", "kw", "o", "sk", "ko", "ku", "ks"], "a": ["ba", "arr", "obj", "array", "am", "ae", "att", "l", "all", "t", "sta", "ga", "au", "s", "ed", "A", "ca", "r", "at", "la", "now", "es", "c", "na", "b", "aux", "d", "go", "p", "alpha", "app", "oa", "parts", "sa", "aa", "up", "ac", "abs", "o", "ma", "w", "ia", "ab", "eas", "aaa", "an", "data", "ack"], "x": ["z", "f", "xp", "X", "hex", "ux", "xy", "l", "y", "name", "ix", "xs", "xa", "ax", "xx", "key", "xb", "v", "xml", "xt", "dx", "wx", "c", "h", "mx", "g", "ex", "zx", "foo", "fx", "p", "rx", "xc", " xx", "e", "ox", "xe", "cox", "xi", "lex", "px", "w", "xf", "xd", "tx"], "i": ["z", "ini", "zi", "y", "ti", "ip", "ci", "r", "ji", "v", "gi", "ij", "hi", "ori", "ki", "phi", "b", "yi", "ind", "id", "di", "bi", "j", "pi", "fi", "qi", "ii", "xi", "si", "ic", "li", "u", "I", "ui", "mi", "multi"]}}
{"code": "x = int(input())\\ndef f(a,b):\\n    return a**5-b**5\\n\\nfor a in range(-120,120):\\n    for b in range(-120,120):\\n        if f(a,b)==x:\\n            print(a,b)\\n            exit()", "target": "597", "substitutes": {"x": ["z", "f", "m", "xp", "X", "xy", "y", "t", "xs", "xa", "ax", "xx", "xxxxxxxx", "ch", "v", "xt", "dx", "wx", "c", "g", "ex", "fx", "test", "p", "rx", "xxx", "xc", "e", "ox", "xe", "xxxx", "xi", "o", "w", "xf", "xd", "tx"], "a": ["f", "ba", "m", "am", "ta", "ae", "l", "t", "sta", "au", "ga", "af", "xa", "i", "A", "r", "ca", "at", "la", "pa", "na", "c", "aw", "ea", "era", "g", "ami", "area", "d", "va", "p", "da", "ao", "act", "oa", "e", "sa", "ai", "ata", "aq", "aa", "ra", "aj", "al", "ac", "ma", " A", "ia", "ab", "eas", "aaa", "ar", "an", "og"], "b": ["z", "f", "rb", "ba", "ib", "erb", "obj", "bl", "be", "l", "y", "bc", "by", "i", "xb", "cb", "fb", "db", "v", "c", "g", "wb", "nb", "d", "bi", "br", "j", "bf", "bin", "e", "sb", "reb", "it", "gb", "bis", "n", "ob", "o", "bs", "ub", "B", "ab", "bb", "bar", "base", "eb"]}}
{"code": "n=input()\\nprint(input().count(\"ABC\"))", "target": "369", "substitutes": {"n": ["z", "f", "nn", "names", "m", "nt", "t", "amount", "s", "N", "fn", "ns", "nm", "mn", "k", "v", "na", "c", "h", "b", "cn", "nb", "num", "d", "p", "j", "np", "nc", "o"]}}
{"code": "from sys import stdin, stdout\\nn, m = map(int, stdin.readline().strip().split())\\n\\nif m>=n:\\n    print('unsafe')\\nelse:\\n    print('safe')", "target": "585", "substitutes": {"n": ["z", "f", "nn", "a", "l", "nt", "t", "nr", "s", "ms", "N", "i", "fn", "ns", "mn", "r", "nm", "k", "v", "na", "c", "sn", "h", "b", "q", "g", "nb", "num", "d", "p", "j", "ne", "e", "nc", "o", "w", "nl", "x"], "m": ["mu", "f", "gm", "med", "mc", "tm", "l", "y", "t", "sm", "s", "ms", "M", "i", "mn", "nm", "em", "mis", "c", "h", "mx", "mp", "dm", "num", "d", "p", "mun", "man", "om", "mo", "mr", "ma", "mm", "mi", "cm", "md"]}}
{"code": "input()\\nA=list(map(int,input().split()))\\nB=list(map(int,input().split()))\\nC=list(map(int,input().split()))\\n\\nm=0\\ny=-1\\nfor x in A:\\n    m+=B[x-1]\\n    if x==y+1:\\n        m+=C[y-1]\\n    y=x\\nprint(m)", "target": "731", "substitutes": {"A": ["AR", "AA", "H", "X", "AC", "AN", "R", "IA", "G", "AV", "N", "M", "BA", "CA", "AL", "LA", "EA", "U", "S", "As", "AU", "D", "AF", "L", "GA", "An", "P", "AM", "AH", "This", "AS", "AP", "AB", "V", "I", "SA"], "B": ["Y", "BE", "BBC", "BS", "BB", "Blue", "VB", "DB", "EB", "Two", "RB", "OB", "SB", "NB", "BO", "WB", "BA", "IB", "BC", "BI", "Be", "b", "GB", "MB", "TB", "LB", "QB", "BG", "FB", "PB", "AB", "BL", "BF", "BR", "Bs"], "C": ["Che", "Blue", "CF", "CE", "CO", "R", "CNN", "CR", "Cs", "CP", "CM", "M", "BC", "CA", "c", "Cu", "GC", "CD", "CAR", "D", "CT", "CC", "Cons", "Cr", "LC", "You", "Cache", "YC", "CS", "SC", "JC", "EC", "CB", "NC", "DC", "Mc", "CG"], "m": ["mu", "gm", "ym", "wm", "sum", "mc", "tm", "am", "a", "xy", "l", "t", "sm", "ms", "M", "i", "r", "k", "im", "msg", "v", "perm", "arm", "c", "bm", "mut", "h", "b", "g", "mod", "temp", "sim", "dm", "num", "d", "rm", "p", "vm", "man", "km", "j", "lem", "mat", "mean", "n", "mr", "w", "mac", "mm", "me", "um", "mi", "fm", "cm"], "y": ["Y", "z", "ym", "ey", "yo", "ay", "a", "my", "xy", "py", "t", "iy", "by", "sy", "i", "yy", "ery", "ty", "yt", "ch", "v", "c", "index", "gy", "ot", "b", "h", "ies", "yi", "wy", "ny", "fy", "p", "ady", "height", "j", "hot", "dy", "uy", "ye", "axy", "n", "cy", "vy", "o", "set", "ly"], "x": ["z", "f", "max", "xes", "yx", "tmp", "xp", "X", "a", "ux", "xy", "l", "t", "name", "ix", "xs", "xa", "xx", "ax", "i", "step", "k", "at", "v", "xt", "dx", "wx", "c", "true", "index", "mx", "ex", "ct", "width", "fx", "ctx", "d", "p", "rx", "xc", "xe", "xi", "n", "px", "w", "left", "xf", "xd", "tx", "inx"]}}
{"code": "a=int(input())\\nb=list(map(int,input().split()))\\nb_max=b[0]\\ntotal=0\\nfor i in range(1,a):\\n    if b[i]<=b_max:\\n        total+=1\\n        b_max=b[i]\\nprint(total+1)", "target": "743", "substitutes": {"a": ["f", "m", "ae", "l", "all", "t", "amount", "ga", "au", "s", "ax", "A", "ca", "at", "c", "ea", "g", "area", "num", "d", "p", "alpha", "act", "e", "sa", "aa", "aj", "n", "ac", "ma", "w", "ia", "ab", "aaa", "an"], "b": ["f", "rb", "ba", "ib", "obj", "bl", "mb", "be", "l", "t", "bp", "ga", "pb", "by", "cb", "fb", "r", "db", "v", "c", "bound", "h", "g", "wb", "nb", "bank", "d", "emb", "p", "bt", "bi", "br", "sb", "it", "gb", "bis", "n", "ob", "bs", "arb", "B", "ab", "bb", "bar", "base", "eb"], "b_max": ["brMAX", "bb_maximum", " b_min", "b_Max", "bb_ver", "bvalmaximum", " b_Max", "b_MAX", "bvalver", "b_ver", " b_mean", "brver", "b_min", " b_last", " b_x", "bvalmax", "brmaximum", "b_x", "brmax", "bvalMAX", "bb_max", "b_last", "b_mean", "bb_MAX", "b_maximum"], "total": ["done", "stats", "max", "successful", "normal", "sum", "mill", "pie", "ta", "unknown", "unique", "Total", "basic", "all", "full", "t", "number", "note", "info", "final", "meta", "eta", "created", "broad", "public", "otal", "json", "empty", "everything", "ot", "human", "complete", "stable", "num", "trace", "completely", "serial", "zero", "quant", "last", "pdf", "current", "equal", "relative", "void", "summary", "no", "checked", "multi", "general"], "i": ["io", "ini", "zi", "uri", "m", "l", "ix", "ti", "s", "ip", "key", "\u0438", "ji", "v", "gi", "ij", "ori", "index", "q", "g", "ami", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "ic", "li", "I", "me", "x", "ui", "mi", "im", "ski"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nn, *a = map(int, read().split())\\nfor af in a[1:]:\\n    a[0] ^= af\\nprint('Yes' if a[0] == 0 else 'No')\\n", "target": "216", "substitutes": {"read": ["create", "READ", "str", "add", "play", "stream", "reader", "load", "sync", "std", "find", "chain", "se", "hold", "ext", "give", "readable", "cf", "reads", "r", "en", "rax", "input", "sp", "write", "length", "replace", "start", "gets", "q", "nd", "g", " write", "insert", "arc", " get", "select", "default", "test", "rx", "Read", "end", "send", "ead", "get", "parse", "run", " send", "rid", "each", "short", "ad", " reads", "feed", "rd", "first", "log", "iter", "print", "reverse", " Read", "text"], "readline": [" readfile", "Readfile", "loadline", "Readline", "readstring", "getline", "findlines", "loadlines", "loadstring", "findfile", "findline", "findstring", "Readstring", "loadfile", "getfile", "getlines", " readstring", "readfile", "Readlines", "getstring"], "readlines": ["writelines", "loadline", " readfiles", "loadln", "Readline", "writeline", "scanline", "scanfiles", "loadlines", "writeelines", "Readelines", " readelines", "readelines", "Readln", "scanlines", "Readfiles", "scanln", "loadfiles", "readln", "readfiles", "writefiles", "Readlines"], "n": ["z", "f", "m", "l", "nt", "t", "nr", "N", "i", "fn", "ns", "r", "k", "v", "na", "c", "sn", "an", "g", "nu", "nb", "d", "p", "j", "nc", "nl", "data", "count"], "a": ["f", "ba", "fa", "m", "ae", "ta", "att", "l", "all", "t", "sta", "to", "au", "ga", "xa", "s", "i", "A", "ca", "at", "la", "v", "na", "c", "aw", "wa", "ea", "h", "an", "b", "g", "area", "p", "va", "ao", "oa", "ai", "sa", "aq", "aa", "ew", "ac", "o", "ma", "w", "ia", "ab", "x", "am", "data"], "af": ["z", "f", "apt", " aff", "obj", "ap", "ae", "df", " AF", "l", "all", "name", "alog", " fa", "cf", "au", "A", "at", "alf", "aw", "q", "ref", " al", "saf", "aux", " Af", "AF", " ab", "av", "bool", "aq", "aj", "ac", "Af", "ma", "ah", "ia", "ab", "lf", "fm", "am", "aff"]}}
{"code": "# https://atcoder.jp/contests/abc100/tasks/abc100_b\\n\\nd, n = map(int, input().split())\\nif d == 0:\\n    if n == 100:\\n        ans = 101\\n    else:\\n        ans = n\\nelse:\\n    if n == 100:\\n        ans = 100 ** d * 101\\n    else:\\n        ans = 100 ** d * n\\nprint(ans)", "target": "781", "substitutes": {}}
{"code": "import sys\\nimport math\\n\\n\\ninint = lambda: int(sys.stdin.readline())\\ninintm = lambda: map(int, sys.stdin.readline().split())\\ninintl = lambda: list(inintm())\\ninstrm = lambda: map(str, sys.stdin.readline().split())\\ninstrl = lambda: list(instrm())\\n\\nn = inint()\\n\\nz = {}\\nans = 0\\n\\nfor i in range(n):\\n    s = \"\".join(sorted(input()))\\n    try:\\n        z[s] += 1\\n    except:\\n        z[s] = 1\\n\\nfor i in z:\\n    ans += z[i]*(z[i]-1)//2\\n\\nprint(ans)", "target": "84", "substitutes": {"inint": ["outInt", "Inints", "ginints", "InInt", " inInt", "inInt", "inINT", "outint", "Ininst", "InINT", "Inint", "ininst", "INint", "ininit", "ININT", "INinst", "ginint", "outinit", " ininit", "INints", "Ininit", "ginINT", "inints", "gininst", " inints", "outints"], "inintm": ["inmintr", "ininitl", "inintp", "inintn", "ininitm", "inmintmn", " inintmn", " ininitm", "InIntp", "InIntl", "inINTn", "inIntp", "inINTl", "Inintr", "inintr", "inmintl", "inINTm", "Inintm", "infloatr", "InIntr", "inmintp", "inIntr", " ininitl", "infloatm", "inINTmn", "inIntl", "Inintp", "inmintm", "InIntm", "ininitmn", "inintmn", "infloatl", "inIntm", "inmintn", " inintn", " ininitn", " ininitmn", "infloatp", "ininitn", "Inintl"], "inintl": ["enintm", "instreamg", "enintli", "inuintm", "enstrli", "inintli", "inintg", "instreaml", "enstrm", "instreamli", "inuintg", "instrli", "enstrg", "enintg", "inuintli", "instrg", "inuintl", "instreamm", "enstrl", "enintl"], "instrm": ["outintl", "outintm", "instrdm", "indrawl", "innumms", "inintdm", "infrm", "Instrl", "outstrsm", "Instrms", "instrmt", "indrawm", "innuml", "innumdm", "inlistl", "Inintm", "inlistmt", "Instrdm", "indrawms", "inlistsm", "inlistm", "Instrm", "outstrl", "outstrmt", "Inintdm", "infrl", "inintms", "indrawdm", "infrmt", "inintmt", "innumm", "outintmt", "outstrm", "instrsm", "instrms", "outintsm", "infrsm", "inintsm", "Inintms", "Inintl"], "instrl": ["outintl", "outstrp", "outintm", "instrp", "inintp", "outstrlist", "outintlist", "inintlist", "ininstl", "instreamp", "ininstm", "ininstlist", "instreaml", "outstrl", "outintp", "ininstp", "instrlist", "instreamlist", "outstrm", "instreamm"], "n": ["nn", "nia", "names", "m", "a", "l", "nt", "t", "number", "nr", "N", "ns", "mn", "en", "v", "na", "c", "ln", "sn", "cn", "nu", "nb", "num", "d", "p", "j", "network", "ne", "net", "gn", "np", "nan", "nc", "no", "an", "count"], "z": ["fl", "yz", "ld", "oz", "zi", "m", "a", "zip", "rez", "l", "y", "nt", "iz", "t", "uz", "os", "hz", "series", "v", "history", "sd", "az", "cz", "c", "h", "zh", "q", "gz", "ze", " Z", "config", "tz", "zer", "ess", "d", "p", "count", "j", "zero", "zen", "zone", "zes", "nz", "ez", "Z", "w", "zo", "x", "ts", "ll"], "ans": ["rors", "ens", "anon", "mas", "oss", "anc", "cs", "amps", "xs", "ins", "os", "ms", "aus", "ons", "ns", "outs", "ann", " Ans", "acs", "aps", "arts", "es", "ians", "ums", "angs", "rans", "ands", "eds", "posts", " means", "ids", "eps", "ANS", "ds", "uns", "offs", "anes", "nan", "ads", "ats", "ros", "anks", "an", "ks", "ants", "ows"], "i": ["ei", "ib", "ini", "ri", "zi", "m", "cli", "iii", "a", "l", "y", "t", "ix", "ti", "ip", "ci", "ji", "ati", "v", "gi", "hi", "index", "ki", "q", "b", "yi", "ind", "di", "p", "bi", "multi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "u", "iri", "x", "iti", "mi", "iu", "im", "ui"], "s": ["ps", "sts", "ws", "sv", "ls", "fs", "a", "sis", "spec", "rs", "gs", "su", "ms", "ins", "os", "ns", "series", "sp", "sym", "sl", "hs", "sn", "ies", "S", "p", "ss", "less", "ds", "sb", "sa", "ims", "short", "si", "abs", "bs", "sq", "tes", "ats", "south", "sat", "als", "ts", "qs", "js"]}}
{"code": "n, k = map(int,input().split())\\ni = 1\\nx = k\\nwhile True:\\n  if (x > n):\\n    print(i)\\n    break\\n  else:\\n    i = i + 1\\n    x = x*k\\n", "target": "719", "substitutes": {"n": ["nn", "m", "ni", "l", "nt", "t", "N", "len", "ns", "mn", "v", "na", "c", "ln", "sn", "h", "b", "q", "g", "an", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "net", "np", "nan", "nc", "o", " N", "no"], "k": ["dk", "z", "K", "m", "kr", "kt", "kh", "ka", "l", "y", "t", "ck", "kl", "kk", "r", "ke", "v", "c", "mk", "ki", "q", "b", "h", "ak", "unk", "ijk", "ik", "num", "p", "km", "j", "kb", "kw", "w", "u", "sk", "ko", "ku", "ks"], "i": ["ini", "ei", "ri", "zi", "m", "ir", "y", "ix", "ti", "info", "ip", "ci", "ij", "hi", "index", "phi", "yi", "ind", "id", "di", "multi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "I", "li", "u", "ui", "mi", "iu", "im"], "x": ["z", "f", "xp", "X", "ux", "xy", "l", "y", "ix", "xs", "xa", "xx", "ax", "ci", "step", " ax", "v", "nex", "xt", "dx", "wx", "c", "index", "mx", "ex", "p", "rx", "j", "pi", "xc", " xx", "e", "ox", "xe", "int", "xi", "ic", "w", "xf", "xd", "tx", "inx"]}}
{"code": "s = input()\\nans = s\\nif len(s) == 3:\\n    ans = ''\\n    for i in range(3):\\n        ans += s[2-i]\\nprint(ans)", "target": "528", "substitutes": {"s": ["f", "ps", "sts", "str", "sv", "ws", "ls", "m", "a", "cs", "rs", "t", "gs", "os", "ms", "ins", "ns", "input", "v", "sp", "hs", "c", "h", "q", "b", "S", "string", "p", "join", "ss", "sam", "null", "ds", "parts", "self", "sb", "sa", "its", "n", "abs", "bs", "sq", "w", "set", "ats", "tes", "st", "ts", "qs", "js"], "ans": ["ens", "wan", "cas", "sv", "anon", "pac", "annot", "aned", "oss", "ran", "ean", "anc", "pan", "rs", "ais", "cons", "amps", "ins", "os", "ms", "aus", "ons", "ns", "anas", "ann", "res", " Ans", "news", "aos", "ents", "ians", "ys", "rans", "cn", "vs", "ANS", "cos", "anus", "man", "can", "kin", "ds", "uns", "gn", "anes", "ams", "ras", "ats", "us", "ros", "ts", "anks", "an", "ks", "ants", "lan"], "i": ["z", "f", "ini", "zi", "m", "l", "y", "ix", "ti", "r", "k", "v", "gi", "ij", "c", "ori", "index", "q", "b", "ind", "id", "di", "p", "j", "pi", "ai", "it", "ii", "xi", "n", "ic", "o", "I", "li", "x", "mi"]}}
{"code": "S = input()\\n\\nif S == ('ABC'):\\n    print('ARC')\\nelif S == ('ARC'):\\n    print('ABC')\\nelse:\\n    print('\u5165\u529b\u306b\u8aa4\u308a\u304c\u3042\u308a\u307e\u3059\u3002ABC\u307e\u305f\u306fARC\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002')\\n", "target": "510", "substitutes": {"S": ["SER", "BS", "SI", "Si", "C", "H", "SS", "X", "F", "R", "SL", "G", "PS", "SB", "s", "N", "M", " IS", "A", "ST", "IS", "E", "DS", "D", "US", "SU", "SP", "P", "ESS", "SH", "T", "AS", "SA", "SE", "Z", "SF", "V", "I", "B", "CS", " s"]}}
{"code": "h,w=map(int,input().split())\\nG=[input() for _ in range(h)]\\n\\nfrom collections import deque\\nmove=[(0,1),(0,-1),(1,0),(-1,0)]\\n\\nque=deque([])\\n\\nfor i in range(h):\\n    for j in range(w):\\n        if G[i][j]=='#':\\n            que.append((i,j,0))\\n\\nc=0\\nvisit=[[0]*w for _ in range(h)]\\nwhile len(que)>0:\\n    ni,nj,c=que.popleft()\\n    for di,dj in move:\\n        mi,mj=ni+di,nj+dj\\n        if 0<=mi<h and 0<=mj<w and G[mi][mj]=='.' and visit[mi][mj]==0:\\n            visit[mi][mj]=1\\n            que.append((mi,mj,c+1))\\nprint(c)\\n", "target": "657", "substitutes": {"h": ["ph", "he", "H", "m", "html", "wh", "kh", "hm", "l", "ha", "y", "hz", "r", "ch", "v", "ho", "history", "hs", "hi", "HH", "q", "b", "phi", "g", "hou", "http", "hd", "d", "ih", "p", "host", "oh", "ht", "hw", "hl", "n", "hr", "o", "hh", "sh", "x", "his", "hp"], "w": ["z", "nw", "ws", "iw", "win", "m", "wh", "wed", "l", "t", "W", "y", "wd", "tw", "ww", "s", "sw", "r", "v", "wa", "aw", "wx", "words", "q", "wl", "b", "wn", "wb", "we", "wy", "wr", "wk", "d", "p", "window", "rw", "kw", "wt", "ew", "wid", "wo", "weight", "n", "wal", "wp", "wi", "width"], "G": ["Y", "GRE", "GP", "AG", "C", "F", "Gu", "R", "W", "PG", "Gs", "gp", "N", "M", "LG", "GF", "IG", "GR", "GC", "GB", "g", "MG", "ge", "E", "GH", "D", "TG", "GG", "GA", "GE", "GO", "FG", "P", "ig", "GU", "GM", "Ge", "GV", "GN", "J", "V", "I", "VG", "B", "GS", "GT", "GI", "CG"], "_": ["let", "pt", "all", "ing", "__", "place", "val", "get", " the", "___", "list", "ation"], "move": ["map", " guard", " Move", "gate", "Move", "range", "draw", "order", "motion", " movement", " advance", " operation", "cycle", " position", " path", "point", "request", "apply", "ove", "age", "transfer", " migration", "route", "start", " route", "movie", "ge", "position", "remote", "select", "queue", "change", " modify", "path", "remove", "next", "command", " step", " mov", "jump", " mutation", "up", " command", " diagonal", "save", " change", "update", "patch", " transition", "take"], "que": ["pe", "done", "ve", "ques", "zie", "quer", "vel", "rub", "gate", "going", "se", "close", "con", "en", "ue", "vre", "buffer", "fif", "quote", "redo", "gone", "inse", "q", "rue", "animate", "hou", "complete", "lo", "onge", "we", "wy", "queue", "ze", "remote", "paste", "de", "eq", "te", "cur", "cho", "dule", "bare", "cp", "com", "cle", "late", "xe", "Queue", "whe", "cache", "batch", "lex", "ob", "aque", "cue", "quit", "buff", "list", "qq", "hai", "rl", "Que", "pause", "qu"], "i": ["f", "ei", "ini", "ri", "zi", "m", "a", "l", "y", "ix", "iy", "ti", "ip", "ci", "ji", "ij", "hi", "ori", "oi", "ki", "ami", "yi", "ind", " ii", "bi", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "li", "I", "x", "ui", "iu", "im"], "j": ["z", "obj", "ion", "jl", "m", "ja", "l", "y", "jp", "r", "ji", "v", "ij", "q", "b", "ot", "g", "je", "d", "p", "kj", "it", "jj", "jump", "aj", "J", "n", "si", "o", "uj", "li", "bj", "js", "jc"], "c": ["z", "f", "sc", "mc", "m", "C", "cat", "cr", "cs", "l", "t", "bc", "cf", "con", "ci", "ca", "rc", "cin", "r", "v", "co", "cv", "b", "lc", "gc", "g", "cn", "cc", "ct", "unc", "ctx", "ce", "d", "p", "cp", "e", "dc", "cache", "pc", "n", "nc", "tc", "cum", "cy", "conf", "ac", "cu", "fc", "cm", "count"], "visit": ["transitation", "trait", "VISitor", "comitor", "viewat", "VISat", "designited", "designIT", "comat", "visitor", "viewiting", "traitation", "servIT", "transitor", "vismit", "visitation", "traitor", "visited", "VISit", "VISIT", "visIT", "designit", "serviting", "servited", "tramit", "transit", "visiting", "transmit", "viewited", "designiting", "comIT", "VISitation", "viewit", "VISmit", "visat", "viewIT", "viewitor", "comit", "servit"], "ni": ["ini", "nia", "zi", "nih", "Ni", "NI", "ti", "nie", "ns", "mn", "ili", "ci", "ani", "nis", "hi", "ori", "ami", "nu", "eni", "ny", "iat", "dn", "pi", "ne", "fi", "mie", "nir", "ii", "iri", "si", "n", "li", "ui"], "nj": ["ojl", " nja", "oz", "Nj", "Nz", "oaj", " njl", "mja", " naj", " nz", "naj", "Naj", "vj", "vja", "vz", "oj", "Njl", "nja", "nz", "njl", "mz"], "di": ["idi", "ini", "ri", "zi", "ogi", "ti", "ci", "cin", "gi", "adi", "eric", "hi", "udi", "dis", "yi", "asi", "d", "dl", "da", "bi", "pi", "ne", "fi", "ai", "Di", "ii", "xi", "si", "cu", "li", "iti", "DI"], "dj": ["nn", "him", "des", "jl", "tm", "adr", "m", "die", "xy", "bd", "py", "note", "fr", "jp", "dt", "ji", "json", "mis", "dis", "wy", "dm", "de", "du", "te", "dn", "bi", "ne", "ond", "jj", "dy", "bis", "dp", "delay", "ju", "uj", "bj", "jas"], "mi": ["ini", "ico", "mc", "m", "mon", "ti", "ms", "ira", "ci", "MI", "mn", "eric", "imi", "mis", "em", "hi", "ki", "ami", "mic", "imm", "lie", "pi", "mt", "fi", "ai", "mie", "ii", "xi", "si", "li", "mia", "umi", "Mi", "mini", "mm", "mid", "ui", "wi", "obi"], "mj": ["rmj", "nji", "mjl", "mje", "rmje", "nje", "mjp", "rmjl", "nmje", "paj", " mjs", "nmaj", "njp", "imj", "naj", "imje", "imaj", "yj", "nbr", "rmaj", "nvey", "esmj", "mv", "nmj", " mvey", " maj", "esmaj", "yaj", "pj", "mji", "pbr", "nv", "esmvey", "yji", " mje", "mvey", "njs", "imjl", "yv", "mjs", "esmjs", " mjp", "maj", " mv", " mbr", "njl", "mbr", " mji", "nmjp"]}}
{"code": "import queue\\nn=int(input())\\ne=[[] for _ in range(n+1)]\\nfor _ in range(n-1):\\n  a,b=map(int,input().split())\\n  e[a]+=[b]\\n  e[b]+=[a]\\nq=queue.Queue()\\nq.put(1)\\nvif=[-1]*n\\nvif[0]=0\\nwhile not q.empty():\\n  now=q.get()\\n  for to in e[now]:\\n    if vif[to-1]==-1:\\n      q.put(to)\\n      vif[to-1]=vif[now-1]+1\\nq.put(n)\\nvis=[-1]*(n+1)\\nvis[n-1]=0\\nwhile not q.empty():\\n  now=q.get()\\n  for to in e[now]:\\n    if vis[to-1]==-1:\\n      q.put(to)\\n      vis[to-1]=vis[now-1]+1\\nans=0\\nfor i in range(n):\\n  if vif[i]<=vis[i]:ans+=1\\nprint(['Snuke','Fennec'][ans>n//2])", "target": "435", "substitutes": {"n": ["z", "f", "nn", "out", "nia", "names", "m", "ni", "l", "nt", "t", "number", "name", "nr", "s", "N", "len", "ns", "mn", "en", "r", "k", "v", "na", "c", "ng", "sn", "an", "h", "g", "nd", "ln", "cn", "nu", "nb", "num", "d", "size", "p", "dn", "can", "j", "ne", "net", "gn", "nor", "np", "nan", "nc", "o", "w", "u", "no", "nl", "bn", "on", "x", "count"], "e": ["f", "pe", "ei", "ele", "el", "le", "ent", "m", "one", "ae", "be", "l", "y", "t", "eeee", "se", "en", "ue", "ke", "v", "es", "c", "ea", "h", "g", "ge", "ef", "E", "ate", "ze", "eu", "oe", "er", "ce", "d", "de", "te", "p", "eq", "ec", "et", "ne", "eng", "ee", "eg", "ez", "o", "u", "me", "x", "eb"], "_": ["let", "ing", "ix", "__", "place", "ate", "val", "ml", "p", " the", " x", "___", "x", "non", "ation"], "a": ["f", "ba", "am", "ae", "l", "t", "af", "ax", "A", "r", "ca", "la", "at", "c", "ea", "g", "ak", "er", "d", "va", "p", "ao", "j", "sa", "ai", "aa", "al", "ac", "o", "ma", "u", "ab", "x", "ar", "an"], "b": ["z", "f", "rb", "ba", "m", "be", "l", "y", "t", "bc", "s", "r", "fb", "k", "v", "c", "h", "g", "d", "p", "j", "bis", "ob", "o", "bs", "u", "B", "ab", "x", "bb", "eb"], "q": ["z", "qt", "f", "ack", "gm", "out", "ph", "ls", "iq", "m", "pg", "l", "y", "t", "pkg", "que", "ck", "back", "pp", "bg", "r", "k", "ue", "ch", "gr", "msg", "v", "check", "db", "query", "co", "lock", "c", "dq", "h", "g", "queue", "force", "cl", "leep", "d", "p", "j", "self", "Q", "it", "cache", "ic", "u", "sq", "w", "quit", "qq", "sh", "req", "qs", "comm", "requ", "ll", "qu"], "vif": [" vief", " vfy", "Vit", " vint", " vact", "nvif", "varig", "qvint", "svif", "VIf", "svIf", "uvift", "varact", "Vift", "svig", " vIF", "svirm", "vint", "vIf", "virm", "avig", "vift", "qvif", "vvig", " vify", "nvIf", "uvIf", "vig", "vact", "svih", "svIF", "varif", "vify", "uvif", " vof", "vtify", "vtig", "vIF", "vtief", "vtih", " virm", "Vif", "svift", "vfy", "avif", "qvfy", " vit", "nvift", "VIF", "varof", "qvify", "vih", "vip", "vtif", "vit", " vift", " vig", "vtint", "nvip", "svief", "Vip", "uvip", "avirm", "vvif", "avift", "vof", " vih", "vvof", "vief", " vIf", "vvact", "vtfy", "svit"], "now": ["wait", "gm", "sc", "tmp", "off", "tm", "when", "down", "here", "Now", "both", "NOW", "full", "hold", "this", "ow", "y", "t", "present", "day", "handle", "result", "raw", "sw", "www", "at", "before", "sp", " NOW", "aw", "ng", "store", "post", "yes", "temp", "onew", "ctx", "stage", "tz", "next", "aaaa", "host", "less", "window", "new", "older", "cmp", "current", "then", "today", "time", "ait", "aj", "got", "loc", "pres", "where", "gen", "currently", "on", "aaa", "ready", "after", "always"], "to": ["tu", "annot", "pr", "pt", "name", "forth", "please", "v", "too", "timeout", "co", "group", "see", "toc", "val", "num", "tom", "li", "no", "that", "x", "new", "auto", "op", "top", "ta", "node", "this", "t", "number", "token", "ty", "TO", "eto", "can", "bo", "o", "iot", "pro", "since", "ter", "oto", "l", "pos", "by", "at", "c", "term", "must", "go", "size", "te", "do", "next", "p", "zero", "total", "valid", "ma", "on", "type", "target", "y", "lo", "any", "cho", "To", "ne", "po", "will", "u"], "vis": ["ps", "wait", "ve", "vet", "visible", "sv", "nav", "gate", "lif", "vers", "mit", "browser", "inv", "serv", "pp", "ip", "ver", "phys", "lim", "miss", "v", "gu", "wa", "ain", "lu", "circ", "vin", "gg", "vid", "see", "rav", "di", "rev", "vs", "vine", "virt", "ess", "cap", "man", "vi", "exp", "cos", "gov", "pl", "Vis", "hib", "study", "trans", "av", "act", "vol", "it", "dc", "doc", "vt", "var", "vg", "mem", "vy", "iter", "VIS", "cv", "rain", "view", "icon", "vert"], "ans": ["ens", "wan", "ps", "ls", "cs", "rs", "nt", "cons", "gs", "amps", "iann", "s", "ins", "os", "ars", "aus", "ns", "ons", "mn", "ann", "outs", "anas", "acs", "aps", "acts", "aos", "es", "ents", "ians", "ums", "rans", "posts", "ms", "vs", "ANS", "ds", "nas", "ai", "uns", "offs", "anes", "nz", "nan", "ats", "ts", "anks", "ions", "an", "ks", "ants"], "i": ["f", "m", "l", "y", "t", "name", "ti", "s", "ip", "ci", "k", "at", "v", "ij", "c", "hi", "index", "h", "id", "di", "p", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "o", "ic", "I", "li", "u", "x", "mi", "iu", "im"]}}
{"code": "N=int(input())\\nans=\"\"\\ncheck=\"abcdefghijklmnopqrstuvwxyz\"\\n\\nwhile N!=0:\\n\tN-=1\\n\tans+=check[N%26]\\n\tN=N//26\\n\\nprint(ans[::-1])\\n\"\"\"\\nwhile N>0:\\n\tN-=1\\n\tans+=chr(ord(\"a\")+ N%26)\\n\tN//=26\\nprint(ans[::-1])\\n\"\"\"\\n\\n\\n", "target": "639", "substitutes": {"N": ["Num", "K", "H", "C", "X", "AN", "F", "Sn", "R", "G", "CNN", "Ni", "NB", "NI", "M", "NV", "NR", "CN", "MN", "A", "NA", "Size", "Count", "S", "E", "O", "NT", "D", "SN", "NS", "FN", "Node", "NM", "L", "TN", "P", "Q", "T", "GN", "J", "Z", "n", "V", "I", "B", "Ns", "NC", "NUM", "NN", "NH"], "ans": ["ens", "wan", "checks", " scans", "names", "ANN", "AN", "oss", "cs", "pan", "cons", "amps", "s", "ms", "os", "ins", "aus", "ns", "ons", "anas", "ann", " Ans", "news", "aos", " sans", "es", "na", "ians", "asks", "posts", "yes", " means", "san", "ids", "ANS", "Scan", "can", "leans", "An", "uns", "anes", "nan", "n", "ats", "Ns", "vals", "anks", "an", "ks", "ants", "ban"], "check": ["map", "checks", "look", "cat", "clean", "find", "Check", "ck", "name", "control", "info", "con", "ok", "cb", "ch", "un", "query", "c", "see", "code", "test", "re", "san", "char", "cp", "valid", "cmp", "block", "n", "CHECK", "checked", "print", "help", "link", "scan"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\n\\nxor=0#\uff10\u306a\u3089OK -> \u5b9f\u969b\u8a08\u7b97\u3059\u308b\u3068\u304d\u308c\u3044\u306b0\u306b\u306a\u308b\\n\\nfor i in range(n):\\n    xor=xor^a[i]\\nif xor==0:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")\\n", "target": "216", "substitutes": {"n": ["z", "nn", "m", "l", "t", "nt", "nr", "s", "N", "i", "ns", "nm", "k", "v", "na", "c", "sn", "q", "b", "cn", "nb", "num", "d", "p", "j", "np", "o", "x"], "a": ["ba", "add", "array", "m", "l", "t", "s", "xa", "i", "A", "r", "v", "c", "b", "g", "d", "p", "alpha", "sa", "ac", "o", "ma", "w", "ab", "x", "an"], "xor": ["zors", "rxOR", "fxOR", "fxnor", "rxors", "zor", "rxnor", "fxor", "xOR", "fxors", "rxor", "xnor", "znor", "zOR", "xors"]}}
{"code": "t, x = map(int, input().split())\\nans = '{:.6f}'.format(t/x)\\nprint(ans)", "target": "317", "substitutes": {"t": ["f", "tu", "pt", "m", "ta", "ret", "nt", "tt", "to", "i", "dt", "ty", "at", "term", "ot", "ct", "title", "te", "j", "total", "it", "tf", "wt", "int", "T", "time", "txt", "vt", "n", "tc", "o", "ts", "rt", "st"], "x": ["f", "xp", "X", "ux", "xy", "y", "ix", "xs", "xa", "ax", "xx", "i", "v", "xml", "xt", "dx", "wx", "c", "co", "mx", "ex", "fx", "p", "rx", "xc", "ox", "int", "xi", "n", "lex", "px", "xf", "xd", "tx"], "ans": ["ens", "wan", "ls", "aned", "AN", "ran", "ean", "anc", "pan", "cons", "iann", "os", "anas", "ins", "aus", "ars", "mn", "ms", "ann", "ano", "oman", "aos", " sans", "beans", "es", "iban", "rans", "gan", "cn", "san", "ANS", "can", "nas", "ai", "anes", "ams", "anks", "ana", "an", "ants", "scan", "lan"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nb = [0] * n\\nfor i in range(n):\\n    count = 0\\n    multi = 1\\n    if n - i == 0:\\n        count = sum(b)\\n    else:\\n        while (n - i) * multi <= n:\\n            count += b[(n - i) * multi - 1]\\n            multi += 1\\n    if count % 2 != a[n - i - 1]:\\n        b[n - i - 1] += 1\\nprint(sum(b))\\nif sum(b) == 0:\\n    exit()\\nfor i in range(n):\\n    if b[i] == 1:\\n        print(i + 1, end=' ')", "target": "568", "substitutes": {"n": ["z", "f", "nn", "out", "nia", "names", "m", "l", "y", "nt", "t", "number", "name", "note", "steps", "chain", "s", "N", "len", "ns", "mn", "r", "k", "nm", "en", "v", "ll", "na", "c", "ren", "ln", "sn", "ng", "nd", "g", "an", "h", "cn", "nu", "q", "nb", "num", "d", "p", "dn", "j", "pi", "ne", "net", "gn", "np", "nan", "nc", "o", "w", "no", "nl", "non", "x", "on", "after"], "a": ["map", "ba", "array", "m", "ae", "l", "all", "ga", "au", "s", "A", "ca", "at", "la", "v", "c", "ea", "area", "p", "alpha", "app", "oa", "e", "sa", "aa", "abs", "ac", "o", "ma", "ia", "ab", "aaa", "an", "auto"], "b": ["f", "rb", "ba", "ib", "obj", "m", "mb", "be", "l", "y", "t", "bc", "pb", "s", "bg", "cb", "fb", "r", "buffer", "db", "v", "c", "h", "g", "wb", "nb", "d", "p", "bi", "br", "j", "e", "bin", "sb", "binary", "gb", "bis", "batch", "ob", "o", "bs", "B", "ab", "buff", "bb", "base", "eb"], "i": ["z", "ei", "ini", "zi", "iq", "m", "cli", "l", "y", "t", "ite", "ix", "ti", "ed", "ip", "ci", "ji", "gi", "v", "gu", "ij", "c", "hi", "index", "like", "ki", "h", "phi", "g", "q", "yi", "ind", "id", "di", "ik", "api", "ih", "p", "bi", "j", "pi", "qi", "e", "ai", "it", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "batch", "iter", "me", "x", "ui", "mi", "iu", "im"], "count": ["f", "ount", "add", "max", "found", "sum", "m", "child", "cr", "cond", "counter", "nt", "common", "amount", "full", "number", "result", "con", "status", "history", "check", "co", "length", "c", "match", "index", "long", "q", "group", "Count", "gc", "ct", "temp", "nb", "ind", "code", "num", "cont", "size", "mult", "cur", "total", "current", "cache", "conf", "cum", "part", "summary", "um"], "multi": ["mu", "tu", "ini", "zi", "multipl", "m", "cli", "fine", "mon", " mono", "Multi", "su", "many", "ci", "MI", "single", "perm", "sym", "lu", "phi", "split", "double", "loop", "lo", "nu", "sim", "di", "mult", "pi", "mt", "none", "mix", "current", "each", "multiple", "si", "uni", "li", "mid", "ui", "mi", "strong", "cm"]}}
{"code": "from collections import Counter\\nn = int(input())\\nx = []\\nfor i in range(n):\\n    s = input()\\n    t = Counter(s)\\n    x.append(t)\\nans = \"\"\\nfor i in \"abcdefghijklmnopqrstuvwxyz\":\\n    tmp = []\\n    for j in x:\\n        tmp.append(j[i])\\n    ans += i*min(tmp)\\nprint(ans)", "target": "220", "substitutes": {"n": ["nn", "nia", "m", "a", "l", "nt", "number", "nr", "N", "len", "ns", "mn", "k", "na", "c", "ln", "sn", "h", "g", "cn", "nu", "nb", "d", "size", "p", "total", "np", "nan", "nc", "w", "nl", "count"], "x": ["z", "xes", "xp", "X", "ux", "xy", "y", "ix", "xs", "to", "xa", "ax", "xx", "at", "news", "check", "xml", "nex", "xt", "wx", "mx", "ex", "ct", "fx", "ross", "p", "exp", "rx", "xxx", "xc", "ox", "xe", "xi", "lex", "w", "px", "xf", "xd", "tx", "inx"], "i": ["io", "ini", "ei", "zi", "\u00ed", "m", "ir", "y", "ix", "ti", "ip", "ci", "k", "ji", "gi", "ij", "ori", "index", "ki", "phi", "ami", "yi", "ind", "id", " ii", "di", "ik", "iat", "asi", "p", "bi", "pi", "qi", "ai", "int", "ii", "xi", "si", "ic", "iri", "I", "li", "ia", "o", "iti", "mi", "iu", "im", "ui"], "s": ["ps", "sys", "sv", "ls", "m", "a", "sis", "spec", "rs", "se", "gs", "su", "os", "ns", "sw", "r", "sp", "sl", "c", "b", "g", "S", "p", "ss", "ds", "sb", "sa", "si", "sq", "ts", "js"], "t": ["f", "tu", "pt", "tm", "m", "ent", "ta", "y", "tt", "nt", "ti", "ty", "at", "tar", "c", "term", "ot", "b", "q", "gt", "tg", "te", "p", "ant", "it", "wt", "tr", "T", "vt", "tc", "o", "rt", "ts"], "ans": ["ens", "cas", "sv", "ls", "oss", "ran", "ean", "anc", "cs", "rs", "pan", "amps", "xs", "iann", "ins", "anas", "xa", "aus", "ns", "ms", "ons", "ann", "ars", "aos", "arts", "na", "es", "ians", "ents", "rans", "san", "vs", "ANS", "can", "nas", "anes", "nan", "mean", "ras", "ats", "us", "ros", "ts", "an", "ks", "ants", "lan"], "tmp": ["map", "sup", "emp", "fake", "obj", "rup", "ties", "tm", "zip", "xy", "py", "nt", "tt", "xs", "to", "pp", "etc", "cb", "attr", "sp", "perm", "now", "mk", "mut", "split", "nd", "csv", "mp", "temp", "lib", "aux", "ctx", "comp", "bt", "pretty", "buf", "new", "clip", "cmp", "tf", "np", "txt", "cache", "table", "tc", "sq", "tab", "buff", "aaa", "prime", "mint", "trap", "js", "auto"], "j": ["z", "f", "obj", "jl", "m", "ja", "l", "y", "name", "key", "jp", "k", "ji", "r", "v", "json", "ij", "item", "c", "h", "q", "b", "je", "g", "jac", " ii", "p", "oj", "kj", "jj", "aq", "aj", "J", "o", "uj", "dj", "bj", "js", "jc"]}}
{"code": "#W, H, x, y, r = map(int, input().split())\\ndef main():\\n    a, b, c, x, y = map(int, input().split())\\n\\n    min_sum = 100000 * 5000 + 100000 * 5000 + 200000 * 5000\\n\\n    if a == c and b == c :\\n        min_sum = a * x + b * y\\n    elif a  < c and b < c  or a  == c and b  < c or a < c and b  == c :\\n        min_sum = a * x + b * y\\n    elif a  > c and b  > c or a  == c and b  > c or a  > c and b  == c  :\\n        if x >= y :\\n            min_sum = y * 2 * c\\n            if a > c * 2:\\n                min_sum = min_sum + (x - y) * c * 2\\n            else:\\n                min_sum = min_sum + (x - y ) * a\\n        else:\\n            min_sum = x * 2 * c\\n            if b > c * 2:\\n                min_sum = min_sum + (y - x) * c * 2\\n            else:\\n                min_sum = min_sum + (y - x ) * b\\n    elif a < c and b > c:\\n        if c - a > b - c : #\u3080\u3060\\n            min_sum = a * x + b * y\\n        else:\\n            if x >= y :\\n                min_sum = (x-y)* a + y * c * 2\\n            else:\\n                min_sum = (y-x)* b + x * c * 2\\n    elif a > c and b < c:\\n        if c - b > a - c   : #\u3080\u3060\\n            min_sum = a * x + b * y\\n        else:\\n            if x >= y :\\n                min_sum = (x-y)* a + y * c * 2\\n            else:\\n                min_sum = (y-x)* b + x * c * 2\\n\\n\\n    else:\\n        for i in range(0, x+1):\\n            for j in range(0, y+1):\\n                if min_sum > a * i + b * j + max(x-i, y-j) * c * 2:\\n                    min_sum =a * i + b * j + max(x-i, y-j) * c * 2\\n\\n    print(min_sum)\\nmain()\\n# if a >= c and b <= c :\\n#     sum = x * c * 2\\n#     if x <= y :\\n#         sum = sum + ( y - x ) * b\\n# else:\\n#     sum = y * c * 2\\n#     if x >= y :\\n#         sum = sum + ( x - y ) * a\\n\\n\\n# if b > c * 2 :\\n    #     b_price = c\\n    #\\n    # input_array_list = []\\n    #\\n    # while True:\\n    #     input_array = input().split()\\n    #     if input_array[0] == \"0\" and input_array[1] == \"0\":\\n    #         break\\n    #     else:\\n    #         input_array_list.append(input_array)\\n    #\\n    # for item in input_array_list:\\n    #     n = int(item[0])\\n    #     k_sum = int(item[1])\\n    #\\n    #     count = 0\\n    #     for i in range(1,n + 1- 2):\\n    #         for j in range(i+1, n + 1 - 1):\\n    #             for k in range (j+1, n+ 1):\\n    #                 if i + j + k == k_sum :\\n    #                     count = count + 1\\n    #     print(count)\\n\\n    #\\n    # for item in input_array_list:\\n    #     if item[1] == \"+\":\\n    #         print(str(int(item[0])+int(item[2])))\\n    #     elif item[1] ==\"-\":\\n    #         print(str(int(item[0])-int(item[2])))\\n    #     elif item[1] == \"/\":\\n    #         print(str(int(item[0])//int(item[2])))\\n    #     elif item[1] == \"*\":\\n    #         print(str(int(item[0])*int(item[2])))\\n    #\\n\\n# import sympy as sp\\n\\n# input_list = []\\n# a,b,c = map(int, input().split())\\n# divisors = sp.divisors(c)\\n#\\n# count = 0\\n#\\n# for divisor in divisors:\\n#     if a <= divisor and divisor <= b:\\n#         count = count + 1\\n# print(count)\\n#\\n# while True:\\n#     pair_str = input().split()\\n#     pair_int = [int(s) for s in pair_str]\\n#     if pair_int[0] == 0 and pair_int[1] == 0 :\\n#         break\\n#     else:\\n#         input_list.append(pair_int)\\n#\\n# for pair_int in input_list:\\n#     if pair_int[0] <= pair_int[1]:\\n#         print(\"{} {}\".format(pair_int[0], pair_int[1]))\\n#     else:\\n#         print(\"{} {}\".format(pair_int[1], pair_int[0]))\\n\\n#for i in range(10000):\\n#    print(\"Hello World\")\\n#a = input().split()\\n#a_int = [int(s) for s in a]\\n#a_sorted = sorted(a_int)\\n#print(' '.join(map(str, a_sorted)))\\n", "target": "430", "substitutes": {}}
{"code": "import sys\\nsys.setrecursionlimit(10**9)\\n\\nH, W = map(int, input().split())\\nS = [input() for i in range(H)]\\n\\nvisited = set()\\ndef dfs(x, y, c, white, black):\\n  global visited\\n  for dx, dy in [[1, 0], [0, 1], [-1, 0], [0, -1]]:\\n    xx = x + dx; yy = y + dy\\n    if 0<=xx<H and 0<=yy<W and (xx, yy) not in visited and S[xx][yy]!=c:\\n      cc = S[xx][yy]\\n      if cc == '.':\\n        white += 1\\n      else:\\n        black += 1\\n      visited.add((xx, yy))\\n      white, black = dfs(xx, yy, cc, white, black)\\n  return white, black\\n\\nans = 0\\nfor x in range(H):\\n  for y in range(W):\\n    if (x, y) not in visited:\\n      visited.add((x, y))\\n      c = S[x][y]\\n      if c == '.':\\n        white = 1; black = 0\\n      else:\\n        white = 0; black = 1\\n      white, black = dfs(x, y, c, white, black)\\n      ans += white * black\\n\\nprint(ans)", "target": "431", "substitutes": {"H": ["Y", "HK", "K", "HO", "He", "CH", "C", "X", "F", "HT", "G", "Han", "HI", "M", "N", "HB", "HL", "High", "HD", "HH", "h", "TH", "MH", "E", "His", "GH", " h", "HC", "D", "HA", "Hi", "HE", "HHHH", "DH", "L", "HR", "P", "Q", "SH", "Eh", "T", "J", "Z", "V", "B", "OH", "HTTP", "HS", "NH"], "W": ["Y", "Works", "C", "X", "WS", "F", "R", "WW", "WT", "N", "M", "A", "WE", "WAR", "WM", "NW", "Windows", "SW", "D", "Watch", "WP", "WC", "WI", "L", "WA", "TW", "DW", "FW", "RW", "Win", "VW", "Q", "CW", "T", "Z", "V", "w", "BW", "We", "EW", "WH", "MW", "Wh"], "S": ["SER", "Sample", "IDS", "SI", "Sources", "Si", "C", "SS", "X", "WS", "R", "SL", "G", "SB", "PS", "JS", "s", "N", "M", "A", "SEC", "RS", "INS", "CSS", "Sys", "NRS", "Store", "SR", "DS", "Series", "SN", "NS", "SU", "SO", "L", "ss", "SP", "FS", "P", "SH", "Map", "T", "SF", "SE", "VS", "V", "I", "B", "CS", "SC", "SSL", "Stats", "SA", "Set", "SQL"], "i": ["io", "iw", "ion", "ir", "ix", "iy", "ti", "ip", "ci", "k", "ij", "hi", "ith", "ex", "yi", "ind", "di", "ik", "j", "e", " I", "ai", "ii", "xi", "o", "I", "ia", "im"], "visited": ["servied", "stritable", "invitable", "strited", "visitable", "vited", "grounditing", "revit", "Visit", "Visitable", "invit", "Vised", "Visated", "VISated", "revated", "comitable", "invitted", "comited", "Visited", "servitable", "invited", "vitable", "stried", "servitted", "navited", "grounded", "VISed", "vised", "Visiting", "VISit", "vied", "visied", "navied", "Visitted", "comitted", "visitted", "serviting", "servited", "VISited", "revited", "visiting", "vated", "invated", "visated", "vitted", "VISied", "stritted", "hiting", "VISitted", "servated", "vit", "hit", "navit", "groundited", "grounditted", "visit", "reviting", "comated", "Visied", "hated", "navitted", "hited", "VISiting", "servit"], "x": ["z", "yx", "el", "xp", "X", "kt", "xd", "ux", "xy", "l", "ix", "xs", "sex", "xa", "ax", "v", "xml", "nex", "xt", "wx", "index", "phil", "h", "mx", "ex", "fx", "test", "rx", "xxx", "pl", "act", "xc", "ox", "xe", "xxxx", "xi", "lex", "w", "px", "mm", "xf", "on", "zx", "tx", "inx"], "y": ["Y", "z", "ym", "ey", "yl", "icy", "yn", "ay", "yx", "yo", "my", "xy", "zy", "yu", "py", "l", "yer", "iy", "s", "by", "oy", "sy", "ery", "ty", "yt", "ch", "v", "ys", "gy", "b", "h", "ot", "ies", "g", "yi", "wy", "ny", "hy", "yan", "fy", "j", "ry", "ya", "uy", "ye", "axy", "yr", "cy", "vy", "w", "yd"], "c": ["f", "abc", "mc", "C", "cat", "cr", "cs", "l", "t", "bc", "cf", "s", "con", "ci", "cin", "ca", "cb", "rc", "ch", "v", "co", "cz", "h", "arc", "b", "lc", "g", "gc", "cn", "ct", "unc", "cl", "ce", "cont", "cos", "p", "d", "col", "cp", "ec", "com", "e", "cd", "dc", "uc", "conf", "fc", "cache", "ac", "n", "cu", "w", "u", "tc", "ic", "vc", "cm"], "white": ["good", "core", "clean", "full", "make", "White", "empty", "css", "see", "tan", "source", "nice", "com", "hot", "brown", "ace", "rain", "style", "normal", "fine", "comment", "draw", "cut", "broad", "alk", "blank", "orange", "aw", "index", "scale", "master", "ate", "warn", "clear", "race", "watch", "n", "green", "flush", "ack", "take", "map", "pack", "red", "une", "colour", "high", "en", "yellow", "check", "color", "write", "aste", "gray", "size", "process", "alpha", "walk", "zero", "send", "none", "burn", "weight", "w", "stone", "some", "gate", "important", "wh", "here", "blue", "score", "heat", "screen", "flat", "olor", "change", "title", "window", "reason", "focus", "mate", "error", "cess", "menu", "width", "transform"], "black": ["good", "sum", "ank", "other", "card", "full", "standard", "back", "make", "match", "empty", "mask", "deep", "tan", "read", "kw", "inner", "brown", "cell", "colored", "also", "scan", "bold", "style", "normal", "rown", "und", "comment", "row", "info", "result", "bg", "broad", "Black", "blank", "buffer", "aw", "hack", "lam", "clear", "join", "stroke", "bo", "then", "star", "buff", "green", "system", "flush", "ack", "red", "by", "raw", "copy", "yellow", "check", "fail", "color", "ul", "gray", "rew", "process", "agg", "pl", "zero", "bin", "seed", "w", "shadow", "where", " blacks", "sh", "diff", "blocks", "important", "wh", "blue", "grey", "flash", "disable", " BLACK", "san", "marg", "false", "pub", "mix", "safe", "error", "focus"], "dx": ["yx", "xp", "xy", "ix", "xs", "wd", "did", "dim", "ax", "dd", "wx", "dq", "foo", "ex", "DX", "fx", "d", "pd", "du", "dl", "da", "rx", "ds", "xxx", "ox", "xe", "cd", "xi", "px", "dj", "xd", "tx"], "dy": ["ey", "ties", "des", "eddy", "die", "xy", "zy", "py", "addy", "iy", "sy", "dim", "dt", "ty", "phy", "gy", "dis", "wy", "ny", "dm", "fy", "du", "ds", "lon", "pse", "uy", "vy", "sin", "dj", "dies", "south", "boot", "hy"], "xx": ["yz", "nn", "yx", "xp", "hn", "ux", "xy", "zy", "jack", "ix", "xs", "ck", "dd", "ax", "xxxxxxxx", "zzy", "nex", "xt", "wx", "zx", "foo", "fx", "ny", "ik", "fy", "j", "xxx", "xc", "ox", "xe", "xxxx", "cross", "xi", "XX", "vy", "px", "zz", "xd", "tx", "inx", "yk"], "yy": ["aily", "nn", "ym", "ey", "yl", "icy", "yn", "yx", "ay", "my", "xy", "zy", "py", "iy", "isy", "oy", "sy", "xxxxxxxx", "zzy", "ji", "ty", "yt", "ery", "yellow", "dt", "dd", "gy", "ys", "wy", "ny", "fy", "xxx", "opy", "ya", "ky", "uy", "cy", "vy", "zz", "dj", "iny", "arty", "YY"], "cc": ["sc", "mc", "cus", "cs", "acc", "bc", "ck", "cf", "con", "ci", "rc", "kk", "cb", "icc", "co", "cz", "circ", "lc", "gc", "css", "cn", "ct", "unc", "cl", "cp", "ec", "CC", "cmp", "cd", "uc", "fc", "ctl", "nc", "tc", "cy", "cu", "cell", "ac", "coll", "vc", "cm"], "ans": [" weights", "ens", "comments", "rors", "ls", "mas", "ones", "amps", "ms", "anas", "ins", "aus", "ns", "ons", "outs", "ann", " Ans", "acs", "ents", "es", "ians", "ums", "angs", "rans", "ays", "eds", "works", "ANS", "ots", "ds", "sets", "uns", "offs", "ints", "anes", "nz", "ames", " spans", "ats", "orders", " blacks", "ros", "anks", "an", "ks", "ants", "ows"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\n#----------\\nH,W = list(map(int, input().rstrip().split()))\\nh,w = list(map(int, input().rstrip().split()))\\n#----------\\nprint( (H-h)*(W-w) )", "target": "458", "substitutes": {}}
{"code": "if 2 in list(map(int,input().split())):\\n    print('No')\\nelse:\\n    print('Yes')\\n", "target": "356", "substitutes": {}}
{"code": "N = int(input())\\nL = [list(map(int,input().split())) for k in range(N-1)]\\nc = sorted(list(map(int,input().split())))\\na = sum(c) - c[-1]\\nT = [[] for k in range(N)]\\nfor e in L:\\n    T[e[0]-1].append(e[1]-1)\\n    T[e[1]-1].append(e[0]-1)\\n\\nkyori = [-1 for k in range(N)]\\nque = [L[0][0]]\\nkyori[L[0][0]] = c.pop()\\n\\nwhile len(que) > 0:\\n    now = que.pop()\\n    for tsugi in T[now]:\\n        if kyori[tsugi] == -1:\\n            kyori[tsugi] = c.pop()\\n            que.append(tsugi)\\nprint(a)\\nprint(*kyori, sep=\" \")\\n", "target": "364", "substitutes": {"N": ["Y", "Name", "Num", "K", "NE", "H", "C", "X", "F", "Sn", "R", "Ni", "G", "CNN", "NB", "NI", "M", "NR", "A", "Na", "NP", "NA", "S", "E", "O", "NT", "D", "SN", "NS", "TN", "P", "No", "Q", "GN", "J", "n", "Z", "V", "I", "Ns", "NO", "NN"], "L": ["K", "DL", "H", "C", "XL", "LR", "R", "LE", "l", "SL", "G", "W", "LS", "LM", "LT", "M", "LG", "A", "LU", "LA", "Lock", "NL", "U", "ln", "PL", "S", "E", "O", "LIN", "D", "RL", "Le", "LB", " l", "P", "LC", "List", "LI", "V", "I", "B", "Li", "LP", "BL", "LD", "LL", "Lu", "TL"], "k": ["kg", "kil", "kat", "m", "kt", "uk", "kh", "ka", "ank", "t", "ck", "kl", "ked", "ok", "i", "ang", "ke", "kid", "kar", "mut", "ki", "g", "th", "ak", "kn", "unk", "work", "ik", "kin", "p", "km", "get", "kw", "tk", "conf", "n", "w", "bid", "sk", "kov", "ko", "ku", "ks"], "c": ["z", "f", "conv", "m", "C", "cs", "l", "t", "y", "s", "con", "rc", "r", "ch", "v", "co", "h", "q", "b", "lc", "g", "csv", "ct", "cc", "cl", "ce", "d", "p", "cur", "cp", "xc", "dc", "fc", "conf", "n", "ac", "o", "cu", "u", "nc", "ic", "w", "tc", "x", "cm"], "a": ["f", "apa", "fa", "ta", "all", "amount", "t", "y", "au", "ga", "eta", "A", "r", "at", "la", "na", "aw", "ea", "b", "g", "area", "p", "alpha", "ao", "zero", "total", "ai", "sa", "aa", "n", "o", "ma", "ia", "ab", "ar", "an"], "T": ["Y", "K", "H", "C", "R", "t", "WT", "G", "W", "M", "LT", "A", "TA", "Ti", "U", "TH", "S", "E", "O", "NT", "AT", "TB", "TN", "TM", "TS", "P", "TI", "Q", "TC", "J", "V", "I", "B", "Tu", "TT", "GT", "TV", "PT", "TL"], "e": ["pe", "ine", "ve", "f", "ei", "ele", "el", "edge", "ent", "m", "one", "ae", "fe", "node", "be", "se", "ese", "ite", "t", "eeee", "note", "ed", "au", "i", "r", "en", "ue", "es", "ea", "ge", "E", "ze", "eu", "oe", "ie", "er", "ce", "d", "de", "te", "p", "ec", "et", "xe", "ee", "event", "ode", "eg", "n", "ffe", "o", "u", "element", "me", "x", "ase"], "kyori": ["uyori", "kori", "typor", "Kyori", "uchoris", "uyora", "nyori", "choris", "kuatri", "ketori", "ketoris", "koji", "kypor", "gyoko", "chori", "kyoris", "kuoko", "yoris", "koorea", "tyori", "Kyory", "gyoris", "yorea", "tyory", "yori", "kuora", "Kypor", "kyorea", "chni", "yoko", "kyatri", "kji", "tyoko", "nyor", "choko", "kyora", "kuoris", "kyni", "nypor", "kooris", "koori", "gyni", "kuorea", "nyora", "ketorea", "nyory", "kyor", "nyoko", "yatri", "uyoko", "kuor", "uchorea", "koris", "kuori", "uyor", "uchori", "ketatri", "kyory", "kyoko", "uchji", "gyori", "kyji", "yni", "Kyoko", "korea"], "que": ["pe", "ued", "ques", "quer", "vel", "he", "rub", "men", "fe", "be", "ha", "se", "online", "gue", "che", "fre", "en", "ue", "vre", "buffer", "quote", "gone", "rue", "q", "lo", "we", "onge", "queue", "remote", "te", "cur", "cho", "ru", "sem", "dule", "cle", "com", "ro", "late", "xe", "sle", "Queue", "bo", "cache", "batch", "rise", "ob", "aque", "cu", "cum", "quit", "qs", "buff", "me", "prime", "ome", "rl", "Que", "always", "qu"], "now": ["wait", "station", "gm", "when", "pack", "here", "date", " Now", "Now", "NOW", "hold", "old", "ow", "ready", "key", "sw", "age", " NOW", "json", "aw", "ng", "store", "we", "ze", "stage", "self", "get", "current", "then", "time", "aj", "save", "aaa", "gen", "new"], "tsugi": ["tsocket", " tsushi", "utsugi", "titu", "tsoul", "tsilian", "ensilian", "tsuin", "fsugi", "sagi", "tagi", "tuin", "ensiger", "utsocket", "utsoul", "utsushi", "tsibia", "ensitu", " tsugal", "tiger", "utsuin", "tsugal", "fsugal", "utsugal", "utsitu", "ensugi", "tilian", "suin", "sugi", "utsagi", "utsibia", "utsiger", "tsushi", "fsilian", " tsilian", "tsiger", "tibia", "sushi", "utsilian", "fsocket", " tsoul", " tsocket", " tsitu", "situ", "tsagi", "tugi", "sibia", "soul", "tsitu"]}}
{"code": "# ???????????????????????\u00a2??\u00b0\\ndef eval(m, f, r):\\n    if m == -1 or f == -1:\\n        return \"F\"\\n    elif m + f >= 80:\\n        return \"A\"\\n    elif 65 <= m + f < 80:\\n        return \"B\"\\n    elif 50 <= m + f < 65:\\n        return \"C\"\\n    elif 30 <= m + f < 50:\\n        if r >= 50:\\n            return \"C\"\\n        else:\\n            return \"D\"\\n    elif m + f < 30:\\n        return \"F\"\\n\\n\\nwhile 1:\\n    mfr = input().split()\\n    m = int(mfr[0])\\n    f = int(mfr[1])\\n    r = int(mfr[2])\\n\\n    if m == -1 and f == -1 and r == -1:\\n        break\\n    else:\\n        print(eval(m, f, r))", "target": "410", "substitutes": {}}
{"code": "n = int(input())\\nprint(0)\\nl = input()\\nif l == \"Vacant\":\\n    exit()\\nprint(n-1)\\nr = input()\\nif r == \"Vacant\":\\n    exit()\\ns = \"none\"\\nl_n = 0\\nr_n = n-1\\nwhile True:\\n    s_n = (l_n+r_n)//2\\n    print(s_n)\\n    diff = s_n - l_n\\n    s = input()\\n    if s == \"Vacant\":\\n        exit()\\n    elif s == \"Male\" and diff % 2 == 0:\\n        if l == \"Male\":\\n            l_n = s_n\\n        else:\\n            r = \"Male\"\\n            r_n = s_n\\n    elif s == \"Male\" and diff % 2 == 1:\\n        if l == \"Male\":\\n            r = \"Male\"\\n            r_n = s_n\\n        else:\\n            l = \"Male\"\\n            l_n = s_n\\n    elif s == \"Female\" and diff % 2 == 0:\\n        if l == \"Female\":\\n            l_n = s_n\\n        else:\\n            r = \"Female\"\\n            r_n = s_n\\n    elif s == \"Female\" and diff % 2 == 1:\\n        if l == \"Female\":\\n            r = \"Female\"\\n            r_n = s_n\\n        else:\\n            l = \"Female\"\\n            l_n = s_n\\n\\n", "target": "344", "substitutes": {"n": ["z", "nn", "names", "m", "a", "nt", "t", "name", "number", "to", "N", "i", "ns", "en", "v", "na", "c", "ln", "sn", "h", "g", "cn", "nb", "num", "d", "size", "p", "j", "ne", "none", "np", "nan", "nc", "o", "nl", "x"], "l": ["f", "fl", "lit", "ol", "ls", "let", "el", "le", "line", "m", "bl", "ler", "t", "lia", "lor", "kl", "i", "len", "il", "lb", "v", "url", "la", "lock", "sl", "c", "ln", "h", "lay", "lc", "g", "tl", "er", "ml", "p", "dl", "L", "j", "lp", "pl", "lar", "hl", "lr", "o", "ell", "li", "left", "lf", "nl", "rl", "ll", "lan", "ly"], "r": ["z", "f", "rb", "rest", "pr", "m", "rr", "kr", "sr", "cr", "range", "R", "rh", "rs", "all", "nr", "fr", "rc", "rl", "res", "err", "v", "c", "repl", "b", "g", "rn", "er", "re", "rev", "d", "p", "br", "j", "ro", "lr", "ur", "vr", "mr", "o", "u", "w", "rd", "rem", "rel", "dr", "rar", "ar", "rt"], "s": ["stats", "spec", "cs", "ins", "v", "aces", "sym", "settings", "ys", "tests", "g", "ies", "ains", "parts", "lets", "sb", "its", "ses", "ts", "js", "z", "f", "sts", "ws", "m", "rates", "t", "xs", "os", "acts", "er", "changes", "ss", "ols", "ds", "erences", "args", "o", "les", "mods", "str", "sv", "ls", "rs", "gs", "ists", "ags", "i", "ends", "arts", "sl", "c", "b", "ges", "p", "j", "sets", "ims", "sh", "qs", "ps", "lines", "ords", "y", "ns", "res", "es", "S", "ests", "si", "ats", "ar", "olds"], "l_n": ["r_p", "lpyn", "limlp", "li_p", "l00cn", "limlconn", "l_dn", "l__l", "l64an", "lmlp", "sl_on", "sl_conn", "L_N", "l_ne", "L_num", "l__p", "l00p", "l_an", "r_ne", "l_conn", "le_dn", "lmlconn", "l___n", "l_on", "l_cn", "l_x", "lmln", "l_p", "lpyconn", "le_en", "le_n", "l___x", " l_N", "le00p", "li_n", "sl_n", "l__N", "L_l", "l_nu", "l__n", "lmlnu", "l00n", "li_nu", "l_en", "l64p", "r_cn", "l___nu", "le00n", "l__num", "limln", "le_br", "l___l", "l__nu", "l__conn", "l_br", "li_conn", "l___p", "l_N", "lpyon", " l_l", "le00cn", "le_p", "L_n", "lpyp", "l_l", "l64n", " l_x", "le_cn", "l64cn", "l__x", "l___conn", "l_num", "le00an", "le_an", "limlnu", "sl_p", "l___N", "l00an"], "r_n": ["r_p", "r_en", "r_N", "attr_n", "r__p", "raphnan", "attr64nan", "attr_nan", "attr64ng", "l_y", "saphnu", "attr64N", "r64nan", "r_nan", "r_nu", "r67on", "rvalnu", "saphsize", "rb_n", "rpyn", "attr_ng", "rvalsize", "raphN", "saphnan", "r_y", "l_p", "rl_n", "r_ng", "r_on", "r_r", "attr_N", "rpyon", "raphng", "r64N", "r__r", "raphsize", "r__y", "r64ng", "raphnu", "r_size", "r_an", "rvalN", "s_nu", "l_nu", "r67n", "rpyan", "r64n", "l_min", "rb_N", "r67ln", "attr64n", "s_nan", "r_ln", "l_N", "rb_en", "rl_ln", "rvalmin", "rvalnan", "r67an", "rvaln", "rb_net", "r_net", "rpyln", "l_r", "rl_on", "r_min", "r__n", "rl_an", "s_size", "saphn", "raphn"], "s_n": ["s_names", "gs08gn", "s_on", "s____N", "ims_____dn", "gs08n", "s__l", "s08gn", "abs_cn", "s48gn", " s_N", "sts_on", "abs___cn", "s_cn", "gs08num", "s_N", "s_gn", "r___nor", "s___ne", "s____ng", "abs_z", "r_nor", "s__m", "r_ne", "s__n", "s___ten", "ns___n", "s_na", " s_sn", "sts_n", "abs_nr", "s_nor", " s_gn", "ims_____na", " s_rn", "s___m", "sts_____dn", " s_d", "ns___ten", "sts_an", "s_ns", "s_rn", "abs___z", " s_l", "sts_g", "s_____na", "ims_names", "s_number", "ims_n", "sts_N", "s____ten", "abs___n", "gs_num", " s_m", "sts_ng", "r___ns", "s_m", "s48sn", "s____ne", "s___n", "s_l", "s___nor", "s____n", "s_z", "s08n", "s_ten", "s_____an", "s08dn", "s_ne", "gs_n", "abs_n", "s___ns", "s_ng", "s____gn", "sts_____n", "ns___m", "r_ns", "s_num", "s_d", "ims_____names", "r___ne", "s_____dn", "s____num", "s_____names", "ns___num", "s____m", "ns_m", "s48rn", "s_dn", "ns_ten", "s_sn", "s_nr", "sts_ns", "s08names", " s_number", "s08na", "ns_num", "s_an", "gs08ne", "ims_____n", "s___num", "s_____ns", "sts_dn", "sts_____ns", "s___z", "gs_ne", "sts_sn", "s08num", "gs_gn", "abs___nr", "s____dn", "s___nr", "ns_n", "s__N", "s08ne", "s_____n", "ims_dn", "s_g", "s48n", "ims_na", "r___n", "sts_____an", "s___cn"], "diff": ["good", "add", "edit", "different", "message", "load", "desc", "range", "find", "eff", "df", "dev", "debug", "pos", "note", "control", "delete", "step", "dist", "attribute", "adj", "div", "check", "fail", "Diff", "exc", "dx", "length", "missing", "detail", "transfer", "extra", " difference", "split", "iff", "distance", " differences", "mod", "slice", "ind", "changes", "default", "config", "d", "change", "dl", "changed", "command", "cmp", "mix", "fix", "dust", "feed", "erence", "part", " delta", "connection", "help", "filter", "req", "update", "description"]}}
{"code": "import heapq\\nt = 1\\ndef max(a,b):\\n\tif a > b:\\n\t\treturn a\\n\treturn b\\ndef min(a,b):\\n\tif a < b:\\n\t\treturn a\\n\treturn b\\n\\nwhile t > 0:\\n\tt -= 1\\n\t# a,b = map(int,input().split())\\n\tn = int(input())\\n\tans = (n-1)*(n)//2\\n\tprint(ans)\\n\t# v = list(map(int,input().strip().split()))[0:n]\\n\t# i = 0\\n\t# ans = 0\\n\t# while i < n:\\n\t# \tj = i\\n\t# \twhile j+1 < n and v[j+1] <= v[j]:\\n\t# \t\tj += 1\\n\t# \tl = j-i+1\\n\t# \tans = max(ans,l)\\n\t# \ti = j+1\\n\t# print(ans-1)", "target": "574", "substitutes": {"t": ["z", "f", "qt", "tu", "out", "pt", "top", "m", "ta", "l", "y", "tt", "ti", "s", "step", "i", "r", "dt", "tp", "ty", "k", "timeout", "v", " T", "c", "term", "ot", "h", "q", "g", "tl", "d", "p", "j", "total", "e", "it", "wt", "tf", "time", "T", "vt", "tr", "n", "tc", "o", "w", "u", "ts"], "a": ["f", "ba", "ap", "am", "ae", "ta", "l", "sta", "ga", "au", "ax", "A", "ca", "at", "la", "na", "ain", "c", "ea", "ity", "ak", "any", "area", "aux", "ant", "va", "p", "da", "alpha", "ada", "app", "act", "oa", "e", "sa", "ai", "ee", "ata", "aq", "aa", "aj", "al", "ac", "o", "ma", "ah", "u", "ia", "ab", "eas", "aaa", "x", "ar", "ach", "an"], "b": ["z", "f", "rb", "ba", "ib", "erb", "abc", "m", "mb", "blue", "other", "be", "l", "y", "bc", "bd", "by", "back", "pb", "i", "s", "bh", "fb", "r", "cb", "ch", "v", "db", "c", "h", "g", "wb", "nb", "lib", "d", "bi", "br", "j", "bf", "bin", "e", "sb", "it", "gb", "bis", "n", "ob", "bs", "B", "ab", "bb", "eb"]}}
{"code": "N, M = map(int, input().split())\\n\\nif N <= 1: a = 0\\nelse: a = N*(N-1) // 2\\n\\nif M <= 1: b = 0\\nelse: b = M*(M-1) // 2\\n  \\nprint(a+b)", "target": "150", "substitutes": {"N": ["Num", "K", "NE", "H", "C", "NOR", "AN", "F", "R", "G", "CNN", "NB", "NG", "NR", "A", "MN", "CN", "NL", "NA", "ANY", "S", "ND", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "NOTE", "P", "UN", "NPR", "T", "MAN", "GN", "Z", "n", "V", "OUT", "B", "Ns", "NC", "NUM", "ON", "NO", "NN", "NH"], "M": ["Y", "MO", "H", "C", "MP", "FM", "m", "MX", "R", "PM", "G", "MT", "MR", "LM", "CM", "MI", "MN", "A", "MC", "MAT", "MM", "S", "MH", "D", "MB", "NM", "L", "JM", "TM", "P", "MA", "IM", "MS", "MAN", "T", "DM", "ME", "RM", "V", "B", "MIT", "MK", "EM", "MD", "MU"], "a": ["ba", "obj", "m", "ae", "eff", "l", "sta", "ga", "au", "back", "ca", "A", "at", "la", "ea", "ot", "da", "alpha", "ao", "app", "act", "oa", "ai", "sa", "aq", "aa", "aj", "al", "ac", "art", "o", "ma", "n", "ia", "ab", "eas", "aaa", "ar", "ach", "an"], "b": ["f", "rb", "ba", "ib", "m", "mb", "blue", "be", "bd", "l", "t", "bc", "y", "ga", "back", "i", "cb", "fb", "r", "db", "v", "c", "g", "d", "bi", "j", "e", "sb", "it", "bo", "bis", "n", "ob", "bs", "w", "B", "ab", "bb", "bar", "eb"]}}
{"code": "def func(n) :\\n    i = 1\\n    b = n\\n    while i*i <= n :\\n        if n % i == 0 :\\n            if max(len(str(i)), len(str(n//i))) < b :\\n                b = max(len(str(i)), len(str(n//i)))\\n        \\n        \\n        i += 1\\n    \\n    return print(b)        \\n\\nn = int(input())\\nfunc(n)", "target": "184", "substitutes": {"n": ["z", "f", "nn", "out", "m", "a", "ni", "l", "y", "nt", "t", "note", "N", "len", "ns", "nm", "en", "r", "k", "mn", "v", "fn", "na", "c", "ng", "sn", "q", "h", "g", "ln", "an", "cn", "nu", "nb", "num", "d", "size", "p", "j", "null", "ne", "net", "int", "gn", "np", "nan", "nc", "o", "w", "no", "nl", "non", "x", "on", "ll", "new"], "i": ["f", "io", "ini", "ri", "zi", "m", "a", "l", "y", "t", "ix", "ti", "info", "ip", "ci", "v", "gi", "ij", "hi", "index", "oi", "ki", "phi", "ami", "ind", "id", "di", "ik", "go", "p", "bi", "multi", "j", "pi", "qi", "ai", "it", "int", "ims", "ii", "xi", "si", "o", "ic", "I", "li", "u", "iri", "iter", "x", "ui", "mi", "iu", "im", "init"], "b": ["z", "f", "rb", "ib", "max", "m", "a", "be", "l", "y", "t", "bc", "bp", "bg", "bh", "r", "cb", "fb", "lb", "v", "db", "length", "c", "bm", "bound", "g", "wb", "nb", "d", "p", "bi", "br", "j", "bf", "bin", "sb", "bo", "gb", "beta", "batch", "ob", "bs", "u", "B", "ab", "bb", "bar", "base", "eb"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport re\\nimport numpy as np\\nimport sys\\nfrom collections import deque\\nfrom collections import defaultdict\\nimport heapq\\nimport collections\\nimport itertools\\nimport bisect\\n\\nsys.setrecursionlimit(10**6)\\n\\n\\ndef zz():\\n    return list(map(int, sys.stdin.readline().split()))\\n\\n\\ndef z():\\n    return int(sys.stdin.readline())\\n\\n\\ndef S():\\n    return sys.stdin.readline()[:-1]\\n\\n\\ndef C(line):\\n    return [sys.stdin.readline() for _ in range(line)]\\n\\n\\ndef is_match(a, b):\\n    for _a, _b in zip(a, b):\\n        if (_a == _b or _a == '?'):\\n            continue\\n        else:\\n            return False\\n    return True\\n\\n\\ns = S()\\nt = S()\\n\\n# s = s.replace('?', '.')\\n# pattern =   ''\\n\\nif (t in s):\\n    print(s.replace('?', 'a'))\\n    exit()\\nif (len(s) < len(t)):\\n    print('UNRESTORABLE')\\n    exit()\\n\\n\\nif (is_match(s[-len(t):], t)):\\n    ans = s[:-len(t)] + t\\n    ans = ans.replace('?', 'a')\\n    print(ans)\\n    exit()\\ni = 0\\n\\nfor _s in reversed(s[len(t)-1:-1]):\\n    i += 1\\n    if (_s == t[-1] or _s == '?'):\\n        if (is_match(s[-i - len(t): - i], t)):\\n            ans = s[:-i - len(t)] + t + s[-i:]\\n            ans = ans.replace('?', 'a')\\n            print(ans)\\n            exit()\\n\\n\\nprint('UNRESTORABLE')\\n", "target": "312", "substitutes": {}}
{"code": "N=int(input())\\na=list(map(int,input().split()))\\na=sorted(a)\\na_set=sorted(list(set(a)))\\n\\nflag=False\\nif sum(a)==0:\\n    flag=True\\nelif N%3==0:\\n    if len(a_set)==2:\\n        x,y=a_set\\n        if x==0 and a.count(x)*3==N:\\n            flag=True\\n    elif len(a_set)==3:\\n        x,y,z=a_set\\n        if x^y^z==0 and a.count(x)==a.count(y) and a.count(y)==a.count(z):\\n            flag=True\\n\\nprint('Yes' if flag else 'No')", "target": "216", "substitutes": {"N": ["Y", "Num", "K", "C", "X", "F", "Sn", "R", "Ni", "CNN", "W", "G", "M", "NR", "A", "NA", "S", "E", "ND", "NT", "D", "SN", "NS", "L", "TN", "P", "Q", "T", "J", "Z", "n", "V", "I", "B", "Ns", "NUM", "NN"], "a": ["f", "ba", "out", "apa", "array", "ae", "l", "t", "all", "sta", "to", "au", "ga", "s", "result", "i", "xa", "ed", "A", "r", "ca", "aff", "input", "at", "la", "na", "c", "ea", "an", "h", "b", "g", "area", "p", "alpha", "da", "exp", "ao", "act", "oa", "parts", "zero", "e", "sa", "ai", "ee", "ata", "aa", "up", "al", "n", "ac", "o", "ma", "abs", "w", "ia", "set", "ab", "eas", "aaa", "ana", "am", "data", "count", "auto"], "a_set": ["awsite", "a2sum", "ea_pop", "as_list", "a_mod", "aaa_set", "a1mod", "aa_ver", "a_map", "ea_mod", "ea_set", "a64set", "a1sum", " a_list", "a64lower", "a_ver", "aa_lower", "a_list", "a_sum", "aaa_map", "awset", "a64ver", "a1set", "aa_site", "a64site", "as_sub", "a_com", "a_pop", "awsum", "a_lower", "a2pop", "a_sub", "eawpop", "awmod", " a_cache", "awver", "as_hash", "eawset", "a_site", "as_set", "a_cache", "eawsum", "aaa_com", "aaa_list", "awlower", "a2set", "eawmod", "a_hash", "ea_sum", "aa_set", "a2mod", "a1pop", "awpop"], "flag": ["bug", "fl", "ld", "level", "offset", "ground", "sync", "flags", "neutral", "field", "sign", "label", "cond", "hold", "lv", "online", "debug", "mail", "bird", "age", "limit", "xml", "follow", "status", "lock", "tag", "state", "mask", "lag", "condition", "group", "long", "gc", "start", "lo", "store", "force", "id", "cmd", "stage", " Flag", "func", "cloud", "command", "dep", "flow", "kill", "leaf", "bool", "valid", "enable", "fly", "land", "event", "layout", "main", "fire", "oo", "no", "set", "Flag", "nl", "list", "sav", "count"], "x": ["el", "yx", "X", "ux", "xy", "l", "ix", "xs", "xa", "i", "xx", "ax", "r", "key", "xb", "xt", "dx", "wx", "co", "ex", "fx", "rx", "j", "com", "xc", "e", "ox", "xe", "xxxx", "xi", "n", "o", "px", "w", "lat", "on", "xf", "xd", "tx"], "y": ["Y", "yz", "yo", "ey", "yl", "ym", "yn", "ay", "my", "xy", "zy", "py", "t", "iy", "sy", "i", "oy", "yy", "xx", "yt", "v", "c", "gy", "ys", "b", "h", "ies", "ex", "yi", "ny", "fy", "j", "ry", "ox", "ya", "e", "uy", "ye", "n", "yr", "o", "vy", "cy", "iny", "hy", "ly"], "z": ["yz", "ld", "oz", "zi", "zip", "xy", "zy", "l", "iz", "uz", "hz", "i", "v", "az", "cz", "h", "zh", "q", "g", "gz", "ze", "tz", "zer", "j", "zone", "nz", "ez", "Z", "n", "o", "w", "zz", "zo", "ll", "ly"]}}
{"code": "import math\\n\\na=int(input())\\nb=int(input())\\nans=2*b-a\\nprint(ans)", "target": "524", "substitutes": {"a": ["z", "f", "ba", "apa", "m", "ae", "l", "all", "t", "y", "sta", "xa", "A", "r", "ca", "at", "la", "c", "ea", "an", "val", "area", "d", "alpha", "ao", "oa", "act", "ai", "sa", "aq", "aa", "al", "n", "ma", " A", "ia", "set", "ab", "x", "ar", "ach", "am", "aff"], "b": ["z", "f", "erb", "ba", "rb", "ib", "m", "l", "y", "bc", "s", "cb", "fb", "r", "v", "db", "c", "g", "bas", "nb", "d", "p", "bi", "j", "bf", "bin", "sb", "bis", "n", "ob", "bs", "u", "B", "ab", "bb", "eb"], "ans": ["ens", "ls", "nets", "names", "mas", "aned", "vers", "idents", "gs", "ars", "anas", "ins", "aus", "ons", "ms", "ann", "aos", "beans", "es", "ians", "arms", "anners", "rans", "nings", "ands", "san", "ANS", "anus", "man", "leans", "nas", "offs", "anes", "mens", "ats", "missions", "ana", "an", "anks", "ants", "olds", "ions", "lan"]}}
{"code": "from collections import deque\\nn,q=map(int,input().split())\\ntree=[[] for _ in range(n)]\\nfor i in range(n-1):\\n    a,b=map(int,input().split())\\n    a-=1\\n    b-=1\\n    tree[a].append(b)\\n    tree[b].append(a)\\ncnt=[0]*n\\nfor i in range(q):\\n    p,x=map(int,input().split())\\n    cnt[p-1]+=x\\n\\nstack=deque([[0,0,-1]]) # \u73fe\u5728\u5730\u3001\u305d\u306e\u4f4d\u7f6e\u3067\u5f15\u304d\u7d99\u3044\u3067\u304d\u305fcount\u3001\u524d\u306e\u4f4d\u7f6e\\n\\nwhile stack:\\n    num,count,preb = stack.pop()\\n    cnt[num]+=count\\n    for i in tree[num]:\\n        if i == preb:\\n            continue\\n        stack.append([i,cnt[num],num])\\n\\nprint(*cnt)", "target": "644", "substitutes": {"n": [" ne", "f", "nn", " nan", "m", " nin", "l", "t", "nt", "name", " len", "nr", "N", "len", "ns", "r", "mn", "k", "v", " j", " unn", " fn", "c", "na", " net", "sn", "ng", "g", "cn", "nu", "nb", " ii", " nu", "num", "d", " sn", "dn", "j", " ns", " ng", " np", "ne", " conn", "net", "gn", "np", "nan", " non", "nc", "o", " gn", "nl", " nat", " num", " na"], "q": ["z", "qt", "f", "qa", "iq", "m", "qv", "l", "y", "t", "que", "r", "k", "ch", "v", "query", "dq", "h", "g", "nu", "queue", "num", "d", "j", "quant", "qi", "e", "Q", "sq", "w", "quit", "qq", "qs", "qu"], "tree": ["map", "let", "tmp", "rees", "le", "m", "bl", "node", "l", "reen", "nt", "t", "dict", "free", "Tree", "db", "root", "index", "ree", "depth", "we", " trees", "tn", "j", "window", "wt", "tr", "cache", "al", "table", "left", "tower", "list", "ts", "forest", "data"], "_": [" int", "ix", "ind", " l", "ox", "I"], "i": ["f", "m", "l", "ti", "ip", "ci", "r", "k", "gi", "v", "c", "ki", "yi", "di", "bi", "j", "pi", "e", "it", "ii", "xi", "ic", "o", "I", "li", "u", "iu", "im"], "a": ["f", "ba", "apa", "ae", "be", "l", "t", "sta", "ga", "au", "af", "A", "r", "ca", "la", "at", "pa", "c", "ea", "an", "ak", "area", "act", "\u00e4", "e", "sa", "ai", "aa", "aj", "al", "art", "ac", "ma", "u", "ia", "ab", "aaa", "ar", "ach", "am", "aff"], "b": ["z", "f", "rb", "ba", "ib", "m", "mb", "blue", "bl", "be", "l", "y", "t", "bc", "bp", "back", "bh", "fb", "r", "cb", "db", "v", "c", "g", "nb", "d", "bi", "br", "j", "bin", "e", "sb", "beta", "bis", "ob", "o", "bs", "u", "B", "ab", "bb", "bar", "eb"], "cnt": ["Ctx", " cnd", "Cnd", "crt", "Ccount", "Crt", "unctx", "tcount", "Cct", "tct", "ccount", "Cnt", "tnt", "ctx", "uncrt", "uncnt", " crt", "cnd", "cct", " cct", "tnd", "uncct", " ccount", " ctx"], "p": ["ps", "pe", "pai", "per", "pt", "pr", "m", "ap", "pad", "par", "pkg", "pos", "pp", "jp", "tp", "press", "sp", "pa", "c", "post", "pre", "pat", "j", "pi", "cp", "port", "pn", "pl", "P", "po", "np", "pc", "part", "pid", "patch", "pro", "pg"], "x": ["z", "f", "m", "X", "xy", "l", "y", "t", "xs", "xa", "xx", "v", "xt", "dx", "wx", "c", "h", "ex", "ct", "d", "rx", "xc", "e", "ox", "xi", "o", "w", "px", "u", "xf", "tx"], "stack": ["thread", " queue", "obj", "tmp", "sum", "Stack", "parent", "name", "cycle", "pop", "buffer", "status", "v", "lock", "state", "depth", " stacked", "queue", "trace", "comp", " st", " top", "sequence", "cv", "ack", "tx", "st"]}}
{"code": "H, W, K = map(int, input().split()) \\nsl = []\\nfor _ in range(H):\\n    sl.append(list(input()))\\n\\n\\nans = 10**8\\nfor i in range(2 ** (H-1)):\\n    fail_flag = False\\n    comb = []\\n    for j in range(H-1):\\n        if ((i >> j) & 1): \\n            comb.append(j)\\n    comb.append(H-1)\\n    # print(comb)\\n    sections = []\\n    for k in range(0,len(comb)):\\n        if k == 0:\\n            sections.append( sl[0:comb[0]+1] )\\n        else:\\n            sections.append( sl[comb[k-1]+1:comb[k]+1] )\\n    # print(sections)\\n\\n    partition_cnt = 0\\n    sections_w_cnts = [0]*len(sections)\\n    for w in range(W):\\n        sections_curr_w_cnts = [0]*len(sections)\\n        partition_flag = False\\n        for i, sec in enumerate(sections):\\n            for row in sec:\\n                if row[w] == '1':\\n                    sections_curr_w_cnts[i] += 1\\n                    sections_w_cnts[i] += 1\\n                    if sections_curr_w_cnts[i] > K:\\n                        fail_flag = True\\n                        break\\n                    if sections_w_cnts[i] > K:\\n                        partition_flag = True\\n\\n            if fail_flag: break\\n        if fail_flag: break\\n\\n        if partition_flag:\\n            sections_w_cnts = [v for v in sections_curr_w_cnts]\\n            # sections_w_cnts[:] = sections_curr_w_cnts[:]\\n            partition_cnt += 1\\n        \\n\\n    if not fail_flag:\\n        ans = min(len(comb)-1+partition_cnt, ans)\\n\\nprint(ans)", "target": "329", "substitutes": {"H": ["Y", "HK", "HO", "He", "CH", "Graph", "C", "X", "F", "HT", "R", "G", "Han", "Hash", "HI", "N", "M", "HB", "A", "HQ", "Head", "HH", "h", "TH", "S", "MH", "Host", "GH", "His", "HC", "D", "HA", "HE", "DH", "L", "P", "Q", "Eh", "HEAD", "T", "J", "Z", "V", "I", "B", "OH", "RH", "HS", "NH"], "W": ["Width", "R", "G", "WT", "N", "M", "WB", "Weight", "WM", "NW", "SW", "WP", "WA", "DW", "TW", "L", "VW", "P", "Q", "CW", "T", "Wh", "V", "w", "BW", "WH", "MW", "WC"], "K": ["Y", "PK", "C", "X", "F", "R", "G", "N", "M", "A", "k", "KI", "KS", "S", "E", "O", "D", "TN", "P", "Q", "T", "J", "Z", "V", "I", "B"], "sl": ["fl", "sv", "ls", "sc", "isl", "Sl", "sr", "bl", "SL", "l", "se", "rs", "su", "kl", "scl", "ssl", "sch", "sw", "ch", "la", "sp", "ul", "sd", "sn", "zh", "lo", "lam", "cl", "dl", "pl", "sels", "sa", "sb", "sel", "spl", "sur", "sal", "sh", "rl"], "_": ["ay", "ix", "ow", "key", "h", "ian", "val", " h", "ik", "P", " x", " k", "ew", "J", "ac", "w", "x", "an"], "ans": ["AN", "ran", "inv", "cons", "AV", "au", "con", "aus", "ns", "mn", "ver", "ann", "en", "un", "ul", "bm", "mem", "ANS", "eps", "man", "bin", "ai", "anes", "mean", "bn", "an", "ks", "Bs"], "i": ["z", "f", "ib", "ini", "ri", "zi", "m", "a", "l", "y", "ti", "ip", "ci", "k", "ji", "ij", "hi", "h", "q", "b", "ki", "ami", "di", "ik", "p", "bi", "pi", "ai", "int", "ii", "xi", "si", "I", "li", "u", "x", "mi", "iu"], "fail_flag": ["fail___flag", "pass_flags", "fail_bool", "fail__count", "fail___bool", "pass_count", "fail___count", "fail___flags", "fail_count", "fail__flags", "fail__flag", "fail_flags", "pass_bool", "pass_flag", "fail__bool"], "comb": ["multipl", "cat", "decl", "cr", "both", "bl", "dest", "chain", "second", "bc", "tw", "result", "con", "etc", "div", "fail", "match", "dem", "zh", "split", "loop", "lo", "lam", "cl", "cont", "comp", "mult", "cho", "join", "pl", "com", "zero", "oth", "bin", "sel", "dom", "mix", "burn", "cong", "bo", "uc", "each", "wo", "conf", "them", "dec", "don", "Comb", "sh", "multi", "also"], "j": ["z", "f", "obj", "jl", "m", "ja", "y", "key", "jp", "k", "ji", "v", "ij", "c", "index", "h", "q", "b", "g", "jac", "ie", "d", "p", "bi", "kj", "it", "jj", "jump", "aj", "J", "n", "o", "u", "uj", "dj", "li", "x", "bj", "js", "jc"]}}
{"code": "N = int(input().strip())\\na_list = list(map(int, input().rstrip().split()))\\n\\na_list.sort()\\n\\nprint(a_list[-1] - a_list[0])", "target": "447", "substitutes": {"N": ["Y", "Num", "K", "C", "X", "F", "R", "Ni", "G", "M", "A", "na", "NA", "S", "E", "O", "D", "NS", "L", "TN", "P", "Q", "T", "n", "Z", "V", "I", "B", "Ns"], "a_list": ["a___list", "va_stack", "an_list", "a___pair", "a2lists", "va_list", "a00list", "a_group", "a7list", "an_level", "aresstack", " a_line", "vareslist", "a_set", "a_left", "a_stack", "an_lists", " a_group", "varesarray", "a_lists", "a_collection", "va_lists", "a_level", "a___group", "areslists", "a7collection", "a2array", "an00level", "a7group", "a2level", "an00lists", "a___collection", "a7pair", "a00level", "areslist", "va_array", "a2list", "varesstack", "a_array", "a2stack", "a_pair", " a_pair", " a_collection", "a00lists", " a_set", "vareslists", "a_line", "an00list", " a_left", "aresarray"]}}
{"code": "import sys\\nimport numpy as np\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nN, K = map(int, readline().split())\\nA = np.array(read().split(), np.int32)\\n\\ng = np.gcd.reduce(A)\\ncond = (K % g == 0) and (K <= A.max())\\nprint('POSSIBLE' if cond else 'IMPOSSIBLE')", "target": "603", "substitutes": {"read": ["map", "create", "READ", "stream", "connect", "reader", "load", "sync", "skip", "seek", "find", "tim", "chain", "hold", "give", "readable", "pop", "reads", "r", "input", "pipe", "check", "open", "query", "write", "length", "q", "reading", "select", "test", "num", "Read", "ead", "get", "parse", "run", "align", "then", "each", "rd", "feed", "first", "iter", "print", "reverse", " Read", "data", "scan", "text", "dat"], "readline": ["readerline", "Readread", " readfile", "READle", "Readfile", "READstring", "readerstring", " readread", "Readname", "Readline", "READline", "readname", "Readle", "readstring", "readread", "getline", "READlines", " readle", "readerread", "Readstring", "readle", "getname", "readerlines", "getfile", "getlines", " readname", " readstring", "readfile", "Readlines"], "readlines": ["Readdowns", "Readlists", "rawline", "readdowns", "rawlists", "Readline", " readdowns", "rawelines", "playlines", " readlists", "Readelines", "rawlines", "readlists", " readelines", "readelines", "playline", "playdowns", "playelines", "Readlines"], "N": ["Y", "C", "X", "R", "Ni", "G", "M", "NR", "NP", "S", "E", "O", "D", "NS", "L", "P", "T", "J", "Z", "V", "n", "I", "B", "Ns", " n", "NH"], "K": ["Y", "KA", "FK", "PK", "H", "C", "X", "F", "KK", "R", "SK", "G", "W", "M", "k", "KR", "KI", "KS", "S", "E", "VK", "NK", "D", "KING", "NS", "UK", "L", "P", "Q", "KE", "T", "J", "Z", "V", "I", "B", "MK"], "A": ["App", "Ass", "AA", "Ar", "H", "C", "AC", "a", "R", "Am", "G", "W", "AV", "ACC", "M", "BA", "CA", "NA", "S", "As", "D", "HA", "Array", "AT", "AF", "L", "GA", "An", "At", "mA", "P", "AM", "This", "SA", "AB", "AP", "V", "Alpha", "B", "Ax", "AE"], "g": ["gam", "yg", "gm", "groups", "org", "m", "rg", "fg", "l", "G", "t", "gs", "ga", "gp", "bg", "k", "msg", "gi", "v", "gu", "c", "group", "gc", "ge", "tg", "go", "gain", "p", "gd", "ig", "mg", "gn", "gb", "eg", "n", "vg", "gen", " G", "pg"], "cond": ["wait", "diff", "qual", "red", "chain", "cons", "bind", "close", "case", "con", "compl", "comb", "check", "lock", "bound", "c", "condition", "mod", "ex", "must", " Cond", "code", "Cond", "ind", "pre", "cont", "crit", "func", "cert", "dial", "bool", "ond", "then", "bo", "conf", "respond", "req", "prime", "connect"]}}
{"code": "import sys\\nimport math\\nfrom collections import defaultdict, deque, Counter\\nfrom copy import deepcopy\\nfrom bisect import bisect, bisect_right, bisect_left\\nfrom heapq import heapify, heappop, heappush\\n    \\ninput = sys.stdin.readline\\ndef RD(): return input().rstrip()\\ndef F(): return float(input().rstrip())\\ndef I(): return int(input().rstrip())\\ndef MI(): return map(int, input().split())\\ndef MF(): return map(float,input().split())\\ndef LI(): return list(map(int, input().split()))\\ndef TI(): return tuple(map(int, input().split()))\\ndef LF(): return list(map(float,input().split()))\\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\\n    \\n    \\ndef main():\\n    X, Y = MI()\\n    \\n    exist = False\\n    for x1 in range(0, X+1):\\n        y1 = Y - 2 * x1\\n        if x1 + 2 * y1 == X:\\n            exist = True\\n            break\\n    if not exist:\\n        print(0)\\n        sys.exit()\\n\\n    def cmb(n, r, mod):\\n        if ( r<0 or r>n ):\\n            return 0\\n        r = min(r, n-r)\\n        return g1[n] * g2[r] * g2[n-r] % mod\\n\\n    #\u51fa\u529b\u306e\u5236\u9650\\n    mod = 1000000007\\n    N = 10**6\\n    g1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\\n    g2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\\n    inverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\\n\\n    for i in range( 2, N + 1 ):\\n        g1.append( ( g1[-1] * i ) % mod )\\n        inverse.append( ( -inverse[mod % i] * (mod//i) ) % mod )\\n        g2.append( (g2[-1] * inverse[-1]) % mod )\\n\\n    a = cmb(x1+y1,y1,mod)\\n    print(a)\\n    \\nif __name__ == \"__main__\":\\n    main()", "target": "759", "substitutes": {"input": ["interface", "load", " Input", "format", "unsigned", "pull", "empty", "q", "ref", "val", "source", "cmd", "pattern", "read", "image", "command", "file", "inner", "feed", "first", "set", "new", "line", "att", "control", "request", "output", "buffer", "history", "json", "insert", "header", "hidden", "print", "arg", "put", "update", "prefix", "data", "view", "qt", "active", "str", "reader", "sample", "raw", "csv", "Input", "select", "context", "next", "frame", "form", "choice", "conf", "exec", "text", "out", "url", "xml", "config", "path", "char", "act", "get", "parse", "it", "int", "block", "error", "focus", "sequence", "lat", "entry", "init"], "H": ["K", "He", "C", "F", "R", "HT", "G", "N", "HI", "M", "A", "HH", "h", "TH", "GH", "HC", "D", "HA", "HE", "HM", "L", "P", "Q", "SH", "T", "J", "V", "I", "B", "OH", "RH", "WH", "HS"], "W": ["Num", "K", "Width", "F", "WS", "R", "HT", "G", "WT", "N", "M", "WB", "WR", "NW", "SW", "WP", "L", "WA", "DW", "Win", "RW", "P", "Q", "T", "J", "Wh", "V", "w", "I", "B", "BW", "We", "WH", "MW", "WC"], "num": ["Number", "mu", "Num", "nom", "sum", "m", "mon", "one", "hex", "number", "info", "dim", "nm", "ho", "cal", "na", "index", "h", " NUM", "th", "nu", "enum", "nb", "random", "mem", "p", "zero", "om", "UM", "integer", "np", "w", "no", "NUM", "um", "im", "unit"], "i": ["f", "io", "l", "y", "ti", "ip", "ci", "k", "gi", "hi", "q", "phi", "yi", "di", "p", "pi", "fi", "int", "ii", "xi", "li", "I", "u", "ia", "iu", "im"], "j": ["z", "f", "iw", "ph", "ion", "jl", "ja", "xy", "y", "nr", "jp", "k", "ji", "json", "ij", "job", "b", "g", " J", "oj", "kj", "jj", "aj", "J", "uj", "w", "bj", "jc"], "X": ["TY", "UX", "K", "C", "XL", "F", "MX", "R", "G", "XY", "N", "M", "WR", "U", "TH", "S", "DX", "E", "Xi", "L", "P", "ox", "Q", "T", "XP", "J", "XX", "Z", "V", "I", "IX", "x", "TX", "XT"], "Y": ["SY", "TY", "HY", "C", "R", "y", "G", "XY", "N", "M", "S", "E", "Py", "YA", "IO", "L", "YE", "Year", "P", "Q", "T", "J", "Z", "YC", "V", "I", "B", "NY", "YY", "MY"], "exist": ["create", "diff", "roy", "know", "establish", "die", "atten", "exclusive", "find", "ext", "setup", "present", "ists", "nec", "status", "follow", "match", "keep", "see", "ex", "use", "inite", "existing", "ist", "ze", "ind", "config", "icate", "there", "race", "purpose", "include", "danger", "send", "same", "act", "ident", "existence", "sit", "respond", "loc", "pres", "existent", "save", "success", "register", "count", "connect"], "x1": ["X3", "y2", "ox1", " x2", "X5", "X2", "x0", "y3", "y5", "ox2", "ex1", "ex2", "y0", "mx5", " x3", "x3", "mx2", "ox0", "x5", "ex0", "X0", "ex3", "ox3", "X1", "x2", " x0", "mx3", "mx1"], "y1": ["y2", "Y3", "x0", "y3", "y0", "xy3", " y0", "xy2", "Y2", "xy0", "Y0", " y2", "x3", "xy1", "Y1", "x2"], "n": ["z", "nn", "nw", "max", "out", "m", "a", "R", "l", "y", "nt", "t", "number", "name", "nr", "s", "N", "ns", "nm", "k", "mn", "NR", "res", "v", "na", "c", "ren", "sn", "h", "b", "g", "cn", "nu", "nb", "rn", "re", "d", "size", "p", "ne", "net", "nor", "run", "nc", "o", " N", "w", "u", "no", "x", "on", "norm", "new"], "r": ["rand", "f", "rb", "rate", "pr", "rr", "m", "range", "sr", "cr", "kr", "ran", "R", "l", "rs", "t", "y", "nr", "rc", "err", "k", "res", "c", "h", "q", "rf", "b", "g", "rn", "er", "re", "rm", "d", "p", "br", "usr", "rw", "ro", "run", "lr", "right", "rd", "mr", "o", "w", "u", "reg", "dr", "x", "rar", "ar", "rt"], "mod": ["rand", "sub", "add", "max", "m", "ran", "dev", "debug", "rot", "modified", "step", "module", "rc", "div", "perm", "scale", "rad", " Mod", "id", "rm", "d", "change", "mult", "deg", "Mod", "mode", "od", "MOD", "component", "tr", "rt", "rem", "dec", "set", "reg", "prime", "cm", "mods", "fun"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\n\\n\\ndef main():\\n    S = input()\\n    ans = 0\\n    for c in S:\\n        if c == '+': ans += 1\\n        else: ans -= 1\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "166", "substitutes": {"S": ["BS", "SI", "Si", "C", "H", "X", "SS", "AN", "R", "SL", "G", "s", "N", "M", "A", "O", "DS", "D", "NS", "ANS", "SU", "System", "SO", "L", "P", "TS", "Q", "SH", "T", "V", "I", "B", "CS", "SC", "SA"], "ans": ["ens", "rors", "mas", "cs", "rs", "cons", "amps", "s", "ins", "anas", "ms", "aus", "ons", "ns", "outs", "ann", " Ans", "aps", "acs", "aos", "arts", "ents", "asks", "ums", "angs", "rans", "eds", "posts", "terms", "ANS", "vs", "lets", "ai", "offs", "powers", "anes", "ads", "books", "ats", "orts", "ros", "vals", "ts", "anks", "an", "ks", "ants", "olds", "lan"], "c": [" pc", "cas", "sc", "mc", "C", "AC", "a", "anc", "cs", " unc", "sac", "bc", "cf", "Cs", "con", "etc", "ci", "cin", " C", "asc", "CA", " cas", " cc", " ac", "icc", " cont", "lc", " cod", " cf", "unc", "ct", "Sc", "cos", " ca", " cd", "Ca", "xc", "Cons", " cs", "uc", "pc", "ac", "n", "cu", " tc", "SC", "CS", "ar", "CG"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nS = readline().decode().rstrip()\\nN = len(S)\\nx,y = map(int,readline().split())\\nt_cnt = 0\\ncnt_x1 = 0\\ncnt_x2 = 0\\ncnt_y = 0\\nX = []\\nY = []\\nfor i in range(N):\\n    if S[i] == 'F':\\n        if t_cnt == 0:\\n            cnt_x1 += 1\\n        else:\\n            if t_cnt % 2 == 0:\\n                cnt_x2 += 1\\n            else:\\n                cnt_y += 1\\n    else:\\n        t_cnt += 1\\n        if cnt_x2 != 0:\\n            X.append(cnt_x2)\\n            cnt_x2 = 0\\n        if cnt_y != 0:\\n            Y.append(cnt_y)\\n            cnt_y = 0\\n            \\nif cnt_x2 != 0:\\n    X.append(cnt_x2)\\n    cnt_x2 = 0\\nif cnt_y != 0:\\n    Y.append(cnt_y)\\n    cnt_y = 0\\n\\nxN = len(X)\\nyN = len(Y)    \\nsumX = sum(X)\\nsumY = sum(Y)\\nx -= cnt_x1\\n\\nif sumX - x < 0 or (sumX - x) % 2 != 0:\\n    print('No')\\n    sys.exit()\\nelse:  \\n    xx = (sumX - x) // 2\\nif sumY - y < 0 or (sumY - y) % 2 != 0:\\n    print('No')\\n    sys.exit()\\nelse:  \\n    yy = (sumY - y) // 2\\n    \\ndp_x = [0]*(xx+1) \\ndp_x[0] = 1\\nfor i in range(xN):\\n    w = X[i]\\n    for j in range(xx,w-1,-1):\\n        dp_x[j] = dp_x[j] or dp_x[j-w]\\n        \\ndp_y = [0]*(yy+1) \\ndp_y[0] = 1\\nfor i in range(yN):\\n    w = Y[i]\\n    for j in range(yy,w-1,-1):\\n        dp_y[j] = dp_y[j] or dp_y[j-w]\\n\\nif dp_x[xx] and dp_y[yy]:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "753", "substitutes": {}}
{"code": "import math\\nX=int(input())\\n\\ndef is_prime(x):\\n    n = math.floor(math.sqrt(x))\\n    for i in range(2, n+1):\\n        if x % i == 0:\\n            return False\\n    return True\\n\\ni = X\\nwhile True:\\n    if is_prime(i):\\n        print(i)\\n        break\\n    i += 1", "target": "609", "substitutes": {"X": ["Y", "max", "K", "C", "MX", "F", "R", "G", "XY", "N", "A", "MAX", "Tx", "Max", "U", "Int", "XXX", "S", "DX", "E", "O", "Input", "OK", "EX", "D", "Xi", "L", "P", "Q", "T", "xi", "XX", "Z", "V", "I", "IX"], "x": ["z", "f", "xp", "m", "xy", "l", "y", "t", "ix", "xs", "s", "xa", "ax", "xx", "v", "xt", "dx", "wx", "c", "h", "q", "ex", "fx", "p", "exp", "rx", "act", "xc", "ox", "int", "time", "xi", "ic", "px", "xf", "tx"], "n": ["nn", "m", "ni", "l", "nt", "t", "nr", "N", "len", "ns", "nm", "k", "en", "v", "na", "c", "sn", "an", "nd", "nu", "nb", "num", "nv", "size", "p", "j", "ne", "net", "np", "nc", " N", "o", "no", "nl", "non", "norm"], "i": ["f", "ini", "ei", "zi", "m", "cli", "l", "y", "t", "ix", "ti", "info", "key", "ci", "ip", "k", "v", "gi", "ij", "hi", "index", "ki", "q", "b", "phi", "ex", "yi", "ind", "id", "di", "ik", "Xi", "p", "bi", "multi", "j", "pi", "qi", "e", "ai", "it", "int", "integer", "ii", "xi", "si", "ic", "li", "I", "iter", "o", "u", "ui", "mi", "iu", "im"]}}
{"code": "from subprocess import *\\ncall(('pypy3','-c',\"\"\"\\nimport sys\\ndef input(): return sys.stdin.readline().rstrip()\\nfrom collections import deque\\ndef main():\\n    h,w=map(int,input().split())\\n    B=[[-1]*w for _ in range(h)]\\n    ans=0\\n    que=deque()\\n    for i in range(h):\\n        s=input()\\n        for j,ss in enumerate(s):\\n            if ss==\"#\":\\n                que.append((i,j))\\n                B[i][j]=0\\n    while que:\\n        qr,qc=que.popleft()\\n        for r,c in ((qr+1,qc),(qr-1,qc),(qr,qc+1),(qr,qc-1)):\\n            if r>=0 and r<=h-1 and c>=0 and c<=w-1 and B[r][c]==-1:\\n                B[r][c]=B[qr][qc]+1\\n                que.append((r,c))\\n    print(max([max(b) for b in B]))\\n\\nif __name__=='__main__':\\n    main()\\n\"\"\"))", "target": "657", "substitutes": {}}
{"code": "n, m = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nmaxnum = [-1] * (n+1)\\ncost = [0,2,5,5,4,5,6,3,7,6]\\nmaxnum[0] = 0\\nfor i in range(n+1):\\n    for num in a:\\n        if ( i+cost[num] < n+1 ):\\n            maxnum[i+cost[num]] = max(maxnum[i+cost[num]], num + maxnum[i]*10)\\n\\nprint(maxnum[n])", "target": "712", "substitutes": {"n": ["nn", "max", "l", "y", "t", "nt", "name", "number", "nr", "N", "ns", "mn", "r", "nm", "un", "v", "k", "na", "c", "sn", "q", "g", "cn", "nu", "nb", "d", "p", "j", "network", "ne", "net", "np", "nc", "o", "w", "u", "no", "x", "norm", "on", "after"], "m": ["mu", "f", "mc", "l", "y", "t", "M", "r", "mn", "k", "nm", "v", "c", "bm", "h", "b", "g", "dm", "d", "p", "km", "j", "e", "o", "mm", "me", "mi", "cm"], "a": ["ba", "apa", "am", "ae", "ta", "another", "l", "all", "t", "au", "s", "A", "ca", "r", "at", "la", "pa", "na", "ea", "b", "area", "p", "alpha", "ao", "oa", "aka", "ai", "sa", "aa", "o", "ma", "w", "ia", "ab", "aaa", "ana", "an", "auto"], "maxnum": ["MaxNUM", "maximumnum", "maxnumber", "Maxnum", "axresult", " maxmon", "axNum", "maxum", "maximumnumber", " maxn", "Maxn", "lastnumber", " maxtag", "lastnum", "axNUM", "fullnum", "axnum", "maxresult", "Maxum", "rootnumber", "bestnumber", "fullnumber", "rootn", "maxtag", "maxn", "Maxnumber", "bestmon", "maxNUM", " maxNum", "rootum", " maxNUM", "fulln", "fullNum", "maxmon", "lastNUM", "axtag", " maxresult", "maxNum", "axmon", "maximumn", "besttag", "maximumNUM", "lastn", "rootnum", "fullresult", "bestnum", "fullum", "axnumber", "axn", " maxnumber"], "cost": ["map", "type", "ack", "hop", "style", "max", "carry", "sum", "util", "skip", "loss", "charge", "score", "tt", "info", "Cost", "control", "step", "pp", "shape", "dist", "spread", "check", "co", "cal", "length", "match", "store", "scale", "group", "distance", "use", "force", "supp", "config", "mem", "power", "gain", "cp", "required", "form", "const", "search", "var", "error", "weight", "rank", "ace", "grad", "need", "help", "req", "roll", "rule", "count", "shift"], "i": ["ini", "ri", "zi", "cli", "uri", "l", "y", "ix", "ti", "info", "ip", "ci", "r", "k", "v", "gi", "status", "ij", "c", "hi", "index", "ki", "b", "phi", "nu", "yi", "ind", "id", "di", "ik", "p", "bi", "j", "pi", "fi", "ai", "it", "int", "ii", "xi", "si", "ic", "li", "u", "I", "iter", "x", "iti", "mi", "iu", "im"], "num": ["tu", "Num", "nom", "out", "kat", "sum", "mon", "pu", "tim", "node", "other", "common", "name", "number", "note", "nam", "umer", "ip", "mn", "nm", "ver", "im", "en", "ul", "index", "al", "enum", "nu", "temp", "sim", "exist", "typ", "id", "test", "orig", "next", "p", "col", "end", "total", "it", "mat", "umber", "np", "int", "coord", "uu", "uni", "loc", "cum", "mate", "iter", "umi", "don", "NUM", "bn", "um", "x", "mi", "pn", "unit", "item", "new", "dat", "poly"]}}
{"code": "def resolve():\\n    BTC = 380000.0\\n    N = int(input())\\n    sumA = 0\\n    for _ in range(N):\\n        x, u = input().split()\\n        if u == \"JPY\":\\n            sumA += int(x)\\n        else:\\n            sumA += float(x) * BTC\\n    print(sumA)\\n\\n\\nresolve()\\n", "target": "270", "substitutes": {"BTC": ["HK", "Unit", "DB", "Amount", "ANA", "AN", "Total", "AC", "AK", "JS", "NB", "CPU", "AUD", "BA", "CN", "MAX", "BC", "OT", "DEV", "AT", "PUT", "STR", "CT", "TON", "bitcoin", "TN", "IT", "Bitcoin", "FA", "Q", "LC", "TC", "OUT", "B", "VALUE", "TX", "USD", "mint", "BY", "DEC", "TV", "VERSION"], "N": ["Y", "Num", "C", "X", "Ni", "CNN", "NB", "NI", "M", "NR", "A", "NA", "Size", "Count", "S", "NT", "SN", "NS", "FN", "NM", "L", "TN", "No", "T", "GN", "J", "n", "V", "I", "B", "Ns", "NC", "NN", "NH"], "sumA": ["SumB", " summeda", " summedA", "SumAA", "lossa", " sumAA", "sumP", "sortAA", " suma", "sumAA", "sortB", "lossA", "sortA", "totalB", "totalA", " summedB", " sumB", "totalP", "sumB", " sumP", "SumA", "SumP", "lossB", "Suma", "suma"], "_": [" j", "__", " __", " each", " c", " l", " the", " y", "___"], "x": ["xes", "xp", "X", "hex", "ux", "xy", "l", "y", "ix", "xs", "xa", "i", "xx", "point", "at", "v", "xml", "xt", "dx", "wx", "c", "co", "item", "mx", "ex", "fx", "ctx", "d", "rx", "xc", "e", "ox", "xe", "xxxx", "int", "lex", "xi", "n", "px", "xf", "xd", "tx"], "u": ["uid", "mu", "tu", "util", "pu", "fu", "yu", "t", "su", "i", "ue", "v", "ul", "gu", "c", "lu", "U", "b", "nu", "p", "ou", "uf", "bu", "uu", "uni", "ju", "cu", "uv", "us", "hu", "ui", "iu", "unit"]}}
{"code": "import heapq\\n\\nN, M = [int(x) for x in input().split()]\\nA = [-int(x) for x in input().split()]\\n\\nheapq.heapify(A)\\n\\nfor i in range(M):\\n    a = heapq.heappop(A)\\n    heapq.heappush(A, -((-a)//2))\\n\\nans = -sum(A)\\n\\nprint(ans)", "target": "72", "substitutes": {"N": ["Y", "C", "X", "AN", "R", " L", "NR", " Y", "S", "E", "O", "D", "FN", "NS", " Q", "L", "P", "Q", "J", "n", "V", "Z", "B", "Ns", "NC", " E", "NN", " n"], "M": ["Y", "K", "m", "C", "MP", "X", "MX", "F", "R", "PM", "MT", "LM", "CM", "MI", "MN", "MC", "MM", "S", "D", "L", "NM", "JM", "TM", "P", "Q", "MON", "MS", "MAN", "T", "DM", "J", "V", "RM", "I", "B"], "x": ["z", "yx", "xes", "m", "xp", "X", "php", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "xx", "ax", "ci", "k", "v", "xml", "xt", "dx", "wx", "c", "q", "mx", "ex", "fx", "ross", "ctx", "p", "rx", "xxx", "xc", "e", "ox", "xe", "xi", "n", "w", "xf", "xd", "tx", "inx"], "A": ["Y", "App", "AR", "AI", "AA", "H", "C", "X", "AN", "Al", "F", "IA", "G", "Abs", "CA", "LA", "AL", "EA", "JA", "NA", "S", "As", "D", "HA", "AT", "All", "AU", "Array", "AF", "L", "GA", "An", "At", "P", "MA", "Java", "AM", "This", "And", "AE", "The", "AB", "Z", "V", "AP", "I", "B", "One", "SA"], "i": ["z", "zi", "m", "y", "iz", "ix", "iy", "ti", "ci", "k", "yi", "ind", " ii", "p", "j", "e", " z", "ai", "it", "n", "li", "I", "ia", "on", " im", "im"], "a": ["f", "ba", "apa", "qa", "fa", "ta", "ae", "ha", "t", "sta", "ga", "au", "xa", "ca", "la", "at", "pa", "wa", "aw", "na", "ea", "b", "area", "va", "p", "da", "alpha", "ao", "oa", "act", "ai", "sa", "ata", "aa", "ac", "sha", "ma", "ana", "an"], "ans": ["ens", "rors", "cas", "ls", "mas", "aned", "cons", "gs", "amps", "ars", "anas", "aus", "ons", "outs", "ns", "ann", "aos", "beans", "asks", "rans", "ands", "eds", "posts", "ies", "ANS", "leans", "uns", "nas", "anes", "mails", "ats", "ros", "ana", "an", "ks", "ants", "olds"]}}
{"code": "while True:\\n    h, w = map(int, input().split())\\n    if h==w==0:\\n        break\\n\\n    for y in range(h):\\n        for x in range(w):\\n            print('#.'[(x+y)%2], end='')\\n        print()\\n    print()\\n", "target": "451", "substitutes": {"h": ["ish", "uh", "ph", "he", "H", "m", "html", "kh", "rh", "hm", "l", "ha", "hei", "hz", "high", "bh", "ho", "history", "hs", "hi", "b", "hal", "hd", "ih", "height", "oh", "ht", "eh", "hw", "hl", "gh", "hr", "ah", "hh", "dr", "sh", "his"], "w": ["nw", "ws", "iw", "win", "m", "wh", "windows", "l", "ww", "W", "widget", "wd", "wall", "sw", "r", "v", "wa", "wx", "aw", "ln", "wl", "wb", "we", "wy", "wr", "wk", "d", "window", "rw", "kw", "wt", "wid", "ew", "wo", "n", "wal", "wp", "wi", "ll", "width"], "y": ["Y", "z", "ym", "ey", "yl", "yo", "yn", "yx", "my", "xy", "py", "iy", "sy", "i", "xx", "yy", "yt", "ys", "gy", "ies", "yi", "wy", "ny", "fy", "j", "ry", "dy", "uy", "ye", "yr", "cy", "vy", "o", "hy", "ly"], "x": ["z", "f", "yx", "xp", "X", "xy", "l", "ix", "xs", "xa", "i", "xx", "v", "xt", "dx", "wx", "q", "zx", "ex", "fx", "p", "rx", "j", "xc", "ox", "xe", "xi", "cy", "o", "px", "xd", "tx"]}}
{"code": "n = int(input())\\nnum = n\\ntotal_num = 0\\n\\nwhile num != 0:\\n    total_num += num % 10\\n    num = num // 10\\n\\nif n % total_num == 0:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "161", "substitutes": {"n": ["z", "f", "Num", "max", "m", "a", "l", "all", "nt", "t", "number", "name", "s", "N", "i", "ns", "nm", "k", "r", "mn", "v", "c", "sn", "q", "b", "h", "g", "nu", "nb", "d", "p", "j", "total", "np", "nc", "o", "no", "x", "new"], "num": ["mu", "f", "Num", "add", "nom", "obj", "sum", "off", "m", "mon", "one", "t", "nt", "number", "result", "con", "N", "i", "final", "mn", "nm", "div", "msg", "un", "cal", "na", "index", "b", "mod", "nu", "nb", "d", "go", "mult", "p", "mun", "alpha", "alph", "end", "zero", "total", "int", "np", "cum", "dec", "no", "NUM", "bn", "um", "unit", "count", "new"], "total_num": ["new_sum", " total_set", "total_mon", " total_sum", "total_no", " total_mon", "new_cal", "total_sum", "total_set", "total_total", " total_no", "total_cal", "new_total", "new_num"]}}
{"code": "import math\\na, b, h, m = map(int, input().split())\\nang_a = (360 * h / 12) + (0.5 * m)\\nang_b = 360 * m / 60\\nang = abs(ang_a - ang_b if ang_a > ang_b else ang_b - ang_a)\\nans = math.sqrt((a ** 2 + b ** 2) - (2*a*b*math.cos(math.radians(ang))))\\nprint(ans)\\n", "target": "290", "substitutes": {"a": ["z", "ba", "ap", "am", "ae", "l", "y", "au", "ga", "i", "ax", "A", "r", "la", "at", "v", "c", "ea", "g", "ak", "val", "va", "alpha", "ao", "oa", "e", "sa", "aq", "aa", "aj", "al", "n", "ac", "ma", "w", "u", " A", "ia", "ab", "ah", "x", "ar", "ach", "an"], "b": ["rb", "ba", "ib", "be", "l", "y", "bc", "by", "i", "bg", "cb", "r", "fb", "v", "db", "c", "g", "wb", "nb", "d", "bi", "br", "abb", "bf", "e", "sb", "bu", "beta", "gb", "bis", "ob", "o", "bs", "ub", "B", "ab", "bb", "eb"], "h": ["he", "tm", "H", "html", "kh", "hm", "l", "ha", "t", "y", "hours", "ow", "i", "r", "k", "ch", "v", "ho", "hs", "hi", "q", "g", "hour", "ih", "p", "height", "oh", "om", "n", "hr", "hh", "ah", "w", "sh", "x", "im", "am"], "m": ["z", "f", "mu", "tm", "mc", "am", "l", "y", "t", "month", "s", "ms", "i", "M", "r", "k", "v", "c", "bm", "pm", "q", "g", "d", "p", "j", "mt", "e", "n", "o", "mr", "w", "u", "mm", "mi", "cm"], "ang_a": ["ang67a", "ung_ac", "hang_A", "ung09a", "hang_a", " ang_A", "ung_b", "ang09a", "ang09b", "hang_n", "ung09ac", "ang67A", "hang_r", "ung09b", "ang09era", "ang_oa", "ang_r", "ang_ar", "ang67ar", " ang_1", "ang_e", "angleroa", "ang_ac", "ang_era", "ung09era", "hang_e", "ang09ac", "ung_a", "anglera", "anglere", "hang_oa", "ang_n", "hang_b", "ang_A", " ang_ar", "ung_era", "anglerr", "ang_1", "ang671"], "ang_b": ["ang_u", "ang67a", "ang_be", "bang_nb", "ang_sb", " ang_2", "lang_a", "lang_ba", "bang_b", "anggrb", "ang67b", "ang67bc", "anggry", "ang_by", "angnety", "bang___nb", "ang_bc", "angmmy", "angnetb", "ang_nb", "ang___b", " ang_x", "angmmx", " ang_y", "bang___u", "bang_u", "angmm2", "cos_by", " angmm2", "ang_y", " angmmx", "angmmb", "cos_be", "cos_sb", "angnetx", " angmmy", "bang___a", "angnet2", "ang_ba", "lang_b", "ang___u", " angmmb", "bang___b", "bang_a", "ang_x", "anggr2", "ang_2", "anggrx", "cos_b", "ang___a", "ang67ba", "lang_bc", "ang___nb"], "ang": ["ag", "nav", "gate", "angular", "ANG", "Ang", "ran", "ank", "conn", "hog", "lang", "ax", "adj", "ann", "gang", "rang", "think", "ng", "gan", "g", "rad", "go", "cos", "uan", "anging", "eng", "ong", "ban", "angle", "n", "wang", "hang", "sin", "bang", "jiang", "yang", "an", "auto"], "ans": ["ens", "rors", "ls", "aned", "vers", "AN", "oss", "ran", "amps", "ins", "anas", "ars", "aus", "ons", "ns", "ann", " Ans", "oman", "aos", " sans", "arts", "angs", "rans", "ys", " means", "san", "vs", "ANS", "leans", "nas", "uns", "anes", "ses", "ams", "ads", "ats", "ros", "anks", "an", "ks", "ants", "lan"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nmod=10**9+7\\ncnt=[0]*60\\nfor elem in a:\\n    for i in range(60):\\n        cnt[i]+=(elem>>i)%2\\nans=0\\nfor i in range(60):\\n    ans+=((cnt[i]*(n-cnt[i]))<<i)%mod\\nprint(ans%mod)", "target": "353", "substitutes": {"n": ["z", "nn", "nw", "m", "l", "nt", "t", "name", "number", "s", "N", "len", "ns", "mn", "k", "v", "na", "c", "sn", "h", "b", "g", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "e", "net", "gn", "np", "o", "w", "x"], "a": ["ba", "out", "apa", "m", "am", "ae", "ta", "all", "t", "ha", "xa", "eta", "A", "at", "c", "aw", "ea", "b", "area", "p", "va", "alpha", "ao", "oa", "et", "e", "ai", "sa", "ana", "aa", "up", "ac", "o", "ma", "set", "aaa", "ar", "ach", "an"], "mod": ["sub", "add", "min", "max", "sum", "m", "mon", "sign", "comment", "cond", "ran", "action", "day", "debug", "pos", "ow", "step", "sec", "dd", "module", "ver", "div", "un", "perm", "tag", "odd", "mut", "scale", "mp", " Mod", "id", "num", "d", "mult", "dir", "j", "pi", "com", "total", "Mod", "od", "MOD", "lex", "log", "dec", "set", "x", "cm", "mods", "fun"], "cnt": ["ncpt", "ctot", " cnd", "Cnd", "Cpt", "cnc", "Ccount", " cot", "cot", "CNT", "Cnc", "ncld", "Cld", " cpt", "cNT", "Cct", "nNT", "cld", "ccount", "Cnt", "ncNT", "nnd", "gct", " cld", "ctnt", " cNT", "nct", "ncnt", "gnt", "nnt", "gcount", " cnc", "cnd", "cct", " cct", "gnc", "ctpt", "ctNT", " ccount", "Cot", "cpt"], "elem": ["adelem", "aceighth", " elements", "oeem", "adeem", "ember", "gember", "oelem", "oewid", "oember", "eem", "acelem", "gelem", "aceelement", "ewid", "teighth", " eighth", "gewid", "acelements", "elements", "eighth", "teelement", "telements", "adember", "eelement", " eelement", "geem", "telem", "adewid"], "i": ["f", "io", "ini", "ei", "ri", "zi", "\u00ed", "m", "l", "y", "t", "ix", "iy", "ti", "s", "ip", "ci", "ji", "im", "gi", "v", "gu", "ij", "c", "oi", "index", "ki", "phi", "b", "yi", "id", " ii", "di", "p", "bi", "j", "pi", "itime", "fi", "e", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "li", "I", "ia", "o", "u", "x", "iti", "mi", "iu", "ui"], "ans": ["ens", "cas", "mas", "ones", "oss", "cs", "amps", "ars", "anas", "ms", "aus", "ons", "ns", "outs", "ann", "ins", " Ans", "aps", "aos", "arts", "ents", "ians", "ums", "angs", "rans", "ays", "eds", "vs", "ANS", "leans", "lets", "nas", "uns", "offs", "ams", "ras", "ates", "ats", "orts", "an", "ks", "ants", "lan"]}}
{"code": "n = int(input())\\nprint('ACL' * n)\\n", "target": "533", "substitutes": {"n": ["f", "nn", "m", "l", "nt", "t", "number", "s", "N", "i", "fn", "ns", "len", "k", "v", "na", "c", "ln", "sn", "cn", "nu", "nb", "cl", "num", "d", "p", "j", "ne", "np", "nan", "nc", "o", "w", "nl"]}}
{"code": "import sys\\ntarget = input()\\ndata = sys.stdin.read()\\n\\nprint(\"%d\" %(data.lower().split().count(target.lower())))\\n", "target": "142", "substitutes": {"target": ["type", "field", "ARGET", "label", "Target", "reset", "src", "dest", "arget", "t", "to", "format", "output", "token", "buffer", "input", "value", "blank", "root", "replace", "mask", "group", "source", "test", "default", "pattern", "cmd", "title", "window", "total", "self", "padding", "subject", "address", "template", "table", "print", "rel", "arg", "that", "base", "count", "new", "transform"], "data": ["done", "partial", "str", "Data", "dump", "out", "message", "date", "hex", "all", "debug", "step", "raw", "ns", "output", "DATA", "buffer", "input", "value", "now", "empty", "bytes", "re", "any", "area", "dat", "rew", "read", "next", "size", "window", "ata", "batch", "feed", "selected", "no", "example", "space", "content", "body", "text", "auto"]}}
{"code": "N=int(input())\\nA=list(map(int,input().split()))\\nB=list(map(int,input().split()))\\nans=min(A[0],B[0])\\nB[0]-=ans\\nfor i in range(N-1):\\n    score=min(A[i+1],B[i]+B[i+1])\\n    ans+=score\\n    B[i+1]-=max(0,score-B[i])\\nprint(ans+min(B[N-1],A[N]))", "target": "530", "substitutes": {"N": ["Name", "Num", "K", "H", "C", "NOR", "AN", "F", "Ni", "CNN", "G", "NB", "NI", "M", "NV", "NR", "CN", "MN", "Len", "NL", "NP", "NA", "Size", "S", "ND", "O", "NT", "D", "SN", "NS", "FN", "Node", "NM", "L", "TN", "No", "P", "T", "GN", "J", "Z", "n", "V", "I", "Ns", "NUM", "NO", "NN"], "A": ["App", "AR", "AI", "AA", "Ar", "DB", "H", "C", "RA", "API", "AC", "Al", "AN", "IA", "AV", "M", "BA", "CA", "LA", "AL", "EA", "U", "JA", "S", "As", "AU", "All", "AT", "HA", "Array", "AF", "L", "GA", "An", "At", "P", "AD", "AM", "This", "AH", "AS", "SA", "AB", "AP", "I", "ACT", "AST", "AE"], "B": ["Y", "BE", "Blue", "BB", "BS", "VB", "DB", "H", "C", "EB", "Two", "RB", "F", "OB", "G", "SB", "NB", "BO", "Other", "WB", "BA", "IB", "BC", "M", "BI", "b", "GB", "S", "E", "O", "D", "L", "TB", "LB", "P", "BG", "PB", "T", "J", "AB", "V", "BT", "I", "BL", "CB", "Bern", "BM", "BY", "BR", "Bs", "BP"], "ans": ["ens", "ps", "cas", "lines", "ls", "names", "mas", "vers", "AN", "oss", "ran", "ean", "anc", "pan", "cs", "rs", "amps", "s", "ins", "ms", "os", "aus", "ns", "ons", "ars", "ann", "en", " Ans", "aps", "acs", "aos", "arts", "beans", "ents", "es", "ians", "iban", "rans", "posts", "cn", " means", "san", "eps", "ANS", "can", "ds", "An", "uns", "offs", "mean", "ras", "ats", "ros", "vals", "an", "ks", "ants", "olds", "scan", "lan"], "i": ["io", "ini", "zi", "uri", "cli", "a", "this", "y", "name", "ix", "ti", "info", "ip", "key", "ci", "ji", "v", "gi", "status", "ij", "ori", "index", "oi", "q", "b", "phi", "ami", "sim", "ind", "id", "di", "num", "bi", "j", "pi", "qi", "e", "ai", "it", "ii", "batch", "si", "n", "xi", "ic", "li", "I", "uni", "me", "x", "ui", "mi", "iu", "multi", "ski"], "score": ["z", "core", " Score", "style", "sc", "sum", "report", "pred", "loss", "sign", "draw", "name", "note", "result", "Score", "sch", "en", "err", "value", "status", "scan", "sd", "length", "match", "scale", "gc", "val", "test", "pre", "mem", "read", "strength", "te", "size", "ss", "speed", "scoring", "beta", "span", "weight", "rank", "ez", "mean", "float", "set", "sche", "grade", "success", "count", "text", "confidence"]}}
{"code": "import sys\\nimport collections\\n\\n\\ndef solve():\\n    readline = sys.stdin.buffer.readline\\n    mod = 10 ** 9 + 7\\n    n = int(readline())\\n    a = list(map(int, readline().split()))\\n    d = collections.defaultdict(int)\\n    d[-1] = 3\\n    mt = 1\\n    for v in a:\\n        mt *= d[v-1]\\n        mt %= mod\\n        d[v-1] -= 1\\n        d[v] += 1\\n    print(mt)\\n\\n\\nif __name__ == '__main__':\\n    solve()\\n", "target": "560", "substitutes": {"readline": ["readerline", "readerpoint", "throughlines", "readerlin", "loadline", "readerstring", "readpoint", " readlin", " readlines", "Readline", "ReadLINE", "readLine", "throughpoint", "readstring", "readlin", "throughlin", "ReadLine", "loadlines", "readerLINE", "loadpoint", " readLINE", "Readpoint", "Readstring", "readLINE", " readpoint", " readLine", "readlines", "throughline", "readerLine", "readerlines", "loadLine", " readstring", "Readlines"], "mod": ["z", " MOD", " mods", "min", "add", "max", "m", "util", "t", " m", "rot", "modified", "ms", "module", "r", "div", "un", "b", "bit", " Mod", "lib", "ind", " modify", "mult", " modified", "j", "null", "Mod", "mode", "od", "int", "MOD", "ac", "dec", "mag", "tab", "set", "x", "prime", "mods", "fun"], "n": ["z", "m", "l", "nt", "name", "t", " m", "N", "i", "ns", "mn", "r", "k", "na", "c", "sn", "g", "nb", "num", "nv", "p", "j", " ns", " nm", "o", "nl", " N", " na"], "a": ["ba", "of", "m", "am", "ta", "ae", "another", "all", "t", "ha", "af", "s", "ga", "xa", "i", "A", "r", "sw", "at", "c", "aw", "ea", "b", "area", "va", "p", "alpha", "ada", "ao", "oa", "sa", "aa", "o", "ma", "w", "set", "ab", "an"], "d": ["z", "f", "done", "out", "m", "std", "df", "bd", "l", "t", "dict", "did", "s", "dd", "final", "r", "dt", "db", "sd", "c", "nd", "b", "g", "D", "di", "pd", "de", "dl", "p", "da", "do", "dn", "j", "ds", "gd", "td", "e", "cd", "dh", "ad", "o", "ma", "w", "dr", "mad", "data", "md", "new", "dat", "fd"], "mt": ["mu", "wm", "stat", "pt", "tm", "m", "ta", "nt", "t", "tt", "MT", "sm", "month", "format", "ms", "mn", "dt", "tp", "lt", "mk", "mut", "lag", "g", "ct", "mp", "mint", "p", "mg", "wt", "mat", "vt", "tr", "mr", "ma", "met", "mag", "print", "mm", "mid", "ts", "TT", "fm", "md", "tx"], "v": ["z", "f", "ve", "sv", "vv", "m", " vi", "qv", "l", "lv", "t", " av", " var", " aval", "y", "dev", "s", "i", "r", "k", " j", "c", "index", " each", "q", "b", "g", " iv", " IV", "iv", "version", "rev", "nv", "vs", "va", "p", " sv", "vi", " val", "j", "e", " k", "var", "vt", " V", "uv", "V", "o", "u", "w", "li", "x", "ev", "ach", "cv"]}}
{"code": "answer = 0\\nfor candy in range(int(input()) + 1):\\n    answer += candy\\nprint(answer)", "target": "56", "substitutes": {"answer": ["expression", "ve", "sv", "message", "array", "field", "ta", "ae", "uno", "echo", "vote", "my", "voice", "wer", "archive", "result", "memory", "say", "output", "answered", "vantage", "value", "interpret", "approximately", "query", "term", "q", "eni", "option", "area", "next", "window", "word", "ai", "address", "aq", "energy", "Answer", "swers", "ace", "sequence", "response", "support", "question", "prefix", "viation", "an"], "candy": ["cuairo", "acairo", " crazy", "cuached", "hrazy", "cuffy", "encursor", "acached", "encached", "acursor", "handy", "encandy", "Crazy", "cursor", " cuffy", "encairo", " curry", "Cuffy", "curry", "Curry", "crazy", "cuandy", "huffy", "hurry", "cuursor", "cairo", "cached", "acandy", "Candy"]}}
{"code": "from sys import stdin\\nrs = lambda : stdin.readline().strip()\\nri = lambda : int(rs())\\nril = lambda : list(map(int, rs().split()))\\n\\ndef main():\\n    N = ri()\\n    a = ril()\\n    print(max(a) - min(a))\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "447", "substitutes": {"rs": ["ths", "str", "lines", "ls", "pr", "rr", "rys", "sr", "ires", "Rs", "rates", "rus", "cs", "xs", "ris", "ars", "ms", "ins", "rc", "r", "rl", "res", "RS", "rets", "gets", "ubs", "rss", "re", "vs", "rots", "rings", "rx", "rows", "ds", "sels", "ro", "rid", "rd", "mr", "bs", "ras", "dr", "rics", "ros", "ts", "vals", "rt"], "ri": ["ini", "rie", "ir", "atri", "rin", "ni", "ti", "ris", "i", "RI", "ira", "r", "rl", "res", "ati", "hi", "iro", "udi", "ori", "rit", "rio", "rn", "ior", "uti", "ric", "rip", "rx", "ro", "ry", "rid", "ra", "iri", "tri", "rise", "rd", "li", "mi", "rt", "ru", "stri"], "ril": ["ival", "medi", "jl", "tel", "vale", "rin", "rison", "lor", "ils", "ilan", "iol", "ris", "eor", "fol", "chal", "il", "mil", "wine", "lift", "phil", "igl", "loe", "isal", "rn", "sbm", "vil", "til", "elin", "obl", "dial", "milo", "cil", "rils", "bol", "ill", "gran", "rl", "bil", "irin"], "N": ["Num", "C", "X", "R", "ni", "nt", "nr", "M", "RI", "NR", "A", "na", "Max", "U", "S", "nu", "O", "D", "num", "L", "P", "T", "J", "n", "V", "I", "B", " n"], "a": ["z", "f", "m", "am", "ae", "l", "all", "t", "au", "s", "i", "len", "A", "ca", "r", "la", "v", "pa", "na", "c", "b", "area", "d", "p", "alpha", "j", "oa", "sa", "aa", "al", "n", "abs", "o", "ma", "w", "ab", "an", "data", "new"]}}
{"code": "n, m = map(int, input().split())\\nK = [0]*m\\nS = [[] for _ in range(m)]\\nfor i in range(m):\\n    K[i], *S[i] = map(lambda x:int(x)-1, input().split())\\n    K[i] += 1\\nP = list(map(int, input().split()))\\n\\nans = 0\\nfor i in range(pow(2,n)):\\n    B = bin(i)[2:].zfill(n)\\n    D = {j:True if b=='1' else False for j,b in enumerate(B)}\\n    _P = []\\n    for j,s in enumerate(S):\\n        _P.append(sum(D[_s] for _s in s)%2 == P[j])\\n    if all(_P):\\n        ans += 1\\nprint(ans)", "target": "546", "substitutes": {"n": ["z", "nn", "l", "y", "t", "nt", "N", "len", "ns", "mn", "k", "nm", "r", "v", "na", "c", "h", "sn", "an", "g", "q", "nu", "nb", "num", "d", "size", "p", "pi", "np", "nc", "o", "w", "x"], "m": ["gm", "max", "mc", "tm", "mas", "l", "y", "sm", "t", "ms", "M", "mn", "k", "r", "v", "perm", "mis", "c", "bm", "h", "an", "q", "g", "mod", "ml", "dm", "d", "num", "size", "p", "mem", "man", "km", "mt", "mr", "ma", "o", "mm", "mi", "cm"], "K": ["Y", "KA", "KN", "FK", "PK", "H", "C", "X", "KK", "Kar", "SK", "G", "N", "M", "A", "k", "KR", "MC", "Mask", "KS", "VK", "UK", "Kin", "Q", "KE", "Sk", "T", "J", "Z", "V", "I", "CP", "Sch"], "S": ["Y", "BS", "SI", "H", "C", "SS", "X", "R", "SL", "SK", "G", "W", "SB", "JS", "PS", "N", "M", "A", "Sub", "RS", "U", "E", "DS", "NS", "SU", "L", "SP", "YS", "Q", "T", "J", "Z", "V", "I", "CS", "Ps"], "_": ["pt", " int", "ix", "k", "val", "int", "x"], "i": ["ini", "ri", "ion", "zi", "\u00ed", "a", "y", "t", "ix", "iy", "ti", "ip", "ci", "k", "ji", "gi", "v", "ij", "index", "ki", "q", "g", "yi", "ind", "id", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "iri", "si", "xi", "ic", "li", "I", "ia", "u", "x", "ui", "mi", "iu", "im"], "P": ["Y", "PK", "PD", "H", "C", "X", "R", "PM", "G", "PS", "N", "M", "PA", "A", "JP", "NP", "E", "O", "p", "L", "TP", "SP", "PP", "Q", "T", "DP", "J", "Z", "AP", "V", "I", "Ps", "CP", "BP"], "ans": ["rors", "ps", "ens", "cas", "ls", "Ann", "aned", "AN", "anc", "cs", "rs", "amps", "iann", "ms", "anas", "ins", "aus", "ns", "outs", "os", "ann", "aps", "arts", "ents", "es", "ums", "rans", "vs", "ANS", "ups", "can", "mt", "ai", "offs", "nan", "ams", "ads", "ats", "orts", "Ant", "ros", "ts", "anks", "an", "ks", "ants"], "B": ["BE", "Blue", "BB", "BS", "DB", "EB", "RB", "Bus", "SB", "NB", "BO", "WB", "BA", "IB", "A", "BC", "BI", "Bi", "Bar", "Box", "GB", "TB", "BG", "Block", "J", "AB", "BW", "BL", "CB", "BM", "Bern", "BY", "BR", "Bs"], "D": ["DN", "DL", "DB", "PD", "C", "WD", "R", "Do", "Done", "DF", "DD", "DJ", "SD", "Det", "M", "Ds", "Diff", "DA", "CD", "DX", "E", "New", "DS", "Cond", "d", "Def", "Dialog", "Default", "JD", "TD", "Q", "DM", "DP", "J", "DE", "Dist", "MD", "DO", "DI"], "j": ["z", "f", "obj", "jl", "a", "ja", "l", "y", "t", "name", "ix", "key", "jp", "k", "ji", "at", "v", "json", "ij", "c", "job", "q", "g", "jac", "ind", "id", "d", "p", "oj", "kj", "it", "jj", "jump", "aj", "J", "ju", "uj", "dj", "x", "bj", "js", "jc"], "b": ["z", "f", "rb", "ba", "ib", "a", "mb", "be", "l", "y", "t", "bc", "bp", "bh", "cb", "k", "v", "db", "c", "h", "bit", "nb", "d", "p", "bt", "bi", "br", "bf", "bin", "sb", "bu", "binary", "bo", "bis", "bs", "u", "bb", "base"], "_P": ["__N", " _Pers", "MemPers", "_V", " _V", " _AP", "__D", "NewN", "__Pers", "MemV", "__B", " _D", "__P", "MemB", "_N", "_Pers", "_D", "__V", "NewB", "MemP", "_B", "_AP", " _N", "NewAP", " _B", "NewP"], "s": ["ps", "sys", "ings", "str", "sv", "sc", "a", "cs", "se", "t", "l", "gs", "spe", "xs", "y", "os", "ns", "sp", "sl", "c", "h", "g", "er", "d", "p", "ss", "ds", "e", "sb", "sa", "si", "o", "bs", "sq", "sk", "sh", "ts", "js"], "_s": [" _ts", " _ps", " _n", "_b", "_n", "_ts", "_x", " _b", " _x", "_ps"]}}
{"code": "#c = [[0 for i in range(3)] for i in range[3]];\\nc = [[0,0,0],[0,0,0],[0,0,0]];\\nc[0] = [int(x) for x in input().split()];\\nc[1] = [int(x) for x in input().split()];\\nc[2] = [int(x) for x in input().split()];\\n\\nans = 'true';\\n\\nfor i in range(1,3) :\\n    hdiff =  c[0][i] - c[0][i-1];\\n    for j in range(1,3) :\\n        if  c[j][i] - c[j][i-1] != hdiff :\\n            ans = 'false';\\n            break;\\n\\nfor i in range(1,3) :\\n    vdiff =  c[i][0] - c[i-1][0];\\n    for j in range(1,3) :\\n        if  c[i][j] - c[i-1][j] != vdiff :\\n            ans = 'false';\\n            break;            \\n\\nif(ans == 'true') :\\n    print('Yes');\\nelse :\\n    print('No');", "target": "297", "substitutes": {}}
{"code": "N = int(input())\\nA = [-1*int(input()) for _ in range(N)]\\n\\n\\ndef LIS(seq: list) -> int:\\n    \"\"\"param: seq\\n    return:LIS\u306e\u9577\u3055\uff08a_i =< a_j\uff09\\n    \"\"\"\\n    from bisect import bisect_right\\n    N = len(seq)\\n    L = [seq[0]]\\n    for i in range(1, N):\\n        if seq[i] > L[-1]:\\n            L.append(seq[i])\\n        else:\\n            idx = bisect_right(L, seq[i])\\n            if idx == len(L):\\n                L.append(None)  # avoid Out-of-Index-Error\\n            L[idx] = seq[i]\\n    return len(L)\\n\\n\\nprint(LIS(A))\\n", "target": "245", "substitutes": {"N": ["Y", "Num", "K", "NE", "H", "C", "NF", "X", "F", "Sn", "R", "G", "W", "NB", "NI", "M", "NR", "CN", "Length", "Len", "NP", "NA", "Size", "S", "E", "O", "ND", "NT", "D", "SN", "NS", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "A": ["Y", "AI", "AA", "C", "a", "R", "G", "M", "LA", "NA", "b", "S", "E", "D", "Array", "At", "P", "MA", "T", "AS", "Z", "AB", "V", "I", "B", "Alpha", "SA"], "_": [" un", "ix", " m", " j", " __", " p", " c", "j", " l", " z", " x", " k", "___", "x", " n", " y"], "L": ["LV", "DL", "H", "LR", "Long", "R", "SL", "LE", "l", "OL", "LS", "VL", "LM", "LT", "M", "LG", "LU", "Left", "LA", "EL", "NL", "PL", "S", "GL", "RL", "Le", "CL", "P", "IL", "LC", "List", "T", "LI", "V", "FL", "I", "Lens", "B", "LOC", "LP", "LD", "BL", "Li", "dL", "LIST", "LL", "Lu", "TL"], "i": ["f", "io", "ini", "ri", "zi", "l", "y", "ix", "ti", "ip", "k", "ji", "gi", " j", "v", "ij", "c", "ori", "index", "q", "yi", "ind", "id", "di", "p", "bi", "j", "pi", "ai", "it", "ii", "xi", "n", "ic", "si", "I", "li", "ia", "o", "iri", "x", "ui", "mi", "iu", "im"], "idx": ["ridx", "Idx", "idz", "indxc", " idxc", "ridz", "iddx", "inddx", "Iddx", "idxs", " iddx", " idxs", "ideex", "indix", " idix", "indx", "idexs", "Idix", " idz", "ridex", "idxc", "Idxc", "idix", "idez", "ridxs", " idex", "idex"]}}
{"code": "import math\\nn,m = map(int, input().split())\\n\\nans = 0\\n\\ntime = (n-m) * 100 + m * 1900\\nfor i in range(1, 1000000):\\n  ans += pow(1-pow(0.5,m),i-1) * pow(0.5,m) * time * i\\n\\ntemp = math.ceil(ans)\\nif str(temp)[-1] == \"1\":\\n  print(temp - 1)\\nelif str(temp)[-1] == \"9\":\\n  print(temp + 1)\\nelse:\\n  print(temp)", "target": "308", "substitutes": {"n": ["f", "nn", "names", "a", "l", "y", "t", "s", "N", "ns", "r", "mn", "k", "en", "v", "na", "c", "sn", "h", "b", "g", "cn", "nb", "num", "p", "j", "ne", "np", "nc", "o", "w", "nl", "x", "an"], "m": ["f", "gm", "mc", "tm", "mon", "l", "y", "t", "month", "s", "ms", "M", "mn", "r", "v", "c", "pm", "h", "q", "b", "g", "mp", "ml", "dm", "d", "num", "p", "man", "j", "mt", "e", "int", "o", "mr", "w", "mm", "x", "mi", "cm"], "ans": ["ens", "ls", "AN", "ran", "ean", "pan", "rs", "amps", "s", "ms", "anas", "ins", "aus", "ns", "ons", "ars", "ann", "ano", " Ans", "aces", "arts", "atan", "ents", "aos", "ians", "rans", "said", "eds", " means", "san", "ANS", "can", "oat", "ds", "leans", "uns", "span", "mean", "nan", "ams", "ats", "an", "ks", "ants", "lan"], "time": ["Time", "type", "rate", "message", "times", "tm", "date", "tim", "t", "tt", "timer", "runtime", "memory", "ms", "ty", "timeout", "now", "history", "v", "TIME", "h", "duration", "context", "mem", "size", "process", "speed", "mt", "clock", "template", "tc", "w", "ime", "etime", "ts", "mi", "tx"], "i": ["f", "io", "zi", "a", "l", "y", "t", "ix", "ti", "ms", "ip", "ci", "gi", "v", "ij", "hi", "index", "q", "yi", "id", "di", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "x", "mi", "im"], "temp": ["thread", "partial", "station", "emp", "str", "fake", "tmp", "pt", "des", "clean", "tim", "cel", "t", "timer", "adjusted", "result", "memory", "output", "sol", "buffer", "now", "pret", "c", "condition", "dem", "term", "tem", "mod", "position", "Temperature", "cold", "test", "mem", "there", "cap", "cur", "read", "strength", "stem", "cert", "total", "still", "deg", "Temp", "int", "current", "relative", "warm", "template", "cache", "tc", "txt", "cell", "cum", "cu", "print", "unt", "lat", "cool", "mint", "rounded", "count", "dat", "perature"]}}
{"code": "X,Y = (int(T) for T in input().split())\\nCount = 0\\nfor T in range(61):\\n    if X*(2**T)<=Y:\\n        Count += 1\\n    else:\\n        print(Count)\\n        break", "target": "631", "substitutes": {"X": ["UX", "H", "C", "XL", "Width", "F", "MX", "R", "XY", "N", "M", "A", "OX", "XXX", "S", "DX", "E", "Xi", "L", "P", "Q", "This", "ZX", " x", "XP", "J", "XX", "Z", "V", "I", "IX", "x", "TX", "Ax", "XT"], "Y": ["TY", "AY", "KY", "HY", "C", "R", "IA", "y", "G", "XY", "N", "M", "Type", "OT", "S", "E", "Py", "YA", "D", "YD", "Year", "P", "My", "Q", "Value", "J", "Z", "FY", "V", "YC", "I", "B", "BY", "YY", "MY"], "T": ["Time", "K", "H", "C", "Total", "F", "R", "t", "W", "G", "N", "M", "A", "Type", "Length", "Len", "Tx", "OT", "U", "Int", " t", "S", "E", "O", "NT", "D", "L", "TP", "TN", "P", "TS", "Q", "J", "Z", "V", "I", "Mut", "B", "VT", "Test", "Tu", "Qu", "TT", "GT", "TV", "Turn"], "Count": ["Number", "Time", "Name", "Num", "Code", "Try", "Success", "Amount", "C", "Force", "Long", "Total", "Skip", "Print", "Last", "Check", "Sum", "Index", "Table", "Empty", "Type", "Length", "Len", "Message", "Diff", "Fail", "Iter", "Thread", "Id", "Er", "Size", "Position", "Ct", "Condition", "Part", "Match", "Counter", "Token", "Process", "Tag", "Found", "Only", "Value", "First", "Comment", "Ind", "Ptr", "Continue", "Flag", "Test", "Group", "Val", "Report", "count", "Set"]}}
{"code": "\\nr,g,b = map(int,input().split())\\na = r *100+g*10+b\\nif a % 4 == 0:\\n    print('YES')\\nelse:\\n    print('NO')", "target": "392", "substitutes": {"r": ["rb", "ri", " R", "rr", "m", "rg", "sr", "ir", "R", "rh", "rus", "rs", "l", "nr", "rc", "rl", "c", "h", "q", "re", "d", "p", "rx", "ro", "e", "rd", "n", "w", "x", "ar", "rt", "ru"], "g": ["f", "gm", "m", "rg", "fg", "l", "y", "G", "gs", "ga", "gp", "s", "bg", "gr", "gi", "v", "gu", "c", "h", "gt", "gg", "group", "ge", "tg", "d", "p", "j", "gd", "gb", "gh", "vg", "n", "u", "green", "x", " G"], "b": ["z", "f", "rb", "ba", "ib", "m", "blue", "be", "l", "y", "t", "bc", "s", "i", "bg", "cb", "fb", "v", "db", "c", "h", "nb", "d", "p", "bi", "br", "j", "bf", "e", "sb", "beta", "bis", "n", "o", "bs", "u", "B", "bb"], "a": ["z", "f", "ba", "fa", "m", "ae", "ta", "another", "l", "t", " fa", "xa", "i", "A", "ca", "k", "v", "c", "ea", "h", "area", "d", "p", "alpha", "da", " ya", "j", "oa", "e", "sa", "aa", "n", "ac", "o", "ma", "w", " A", "ab", "aaa", "x", "an", "aff"]}}
{"code": "from collections import deque\\ns = [deque(input()) for _ in range(3)]\\nd = {\"a\":0, \"b\":1, \"c\":2}\\nD = {0:\"A\", 1:\"B\", 2:\"C\"}\\nplayer = 0\\nfor _ in range(301):\\n    x = s[player].popleft()\\n    player = d[x]\\n    if not s[player]:\\n        print(D[player])\\n        exit()", "target": "34", "substitutes": {"s": [" os", "ps", " sets", "stats", "details", "sv", " logs", "ls", "plays", " subs", "m", "a", "l", "rs", "t", "y", "gs", "os", "ins", "i", "scripts", "ns", "r", "ms", "Ds", "v", " parts", " locks", "es", "c", "ys", " fs", "b", "eds", "h", "q", "S", "g", "p", " ls", "ss", "ds", " ns", "parts", "args", " ads", " quests", "ses", "ads", "w", "sq", "als", " starts", "ts", " scripts", "qs", "js"], "_": ["z", "let", "ay", "m", "____", "my", "all", "ix", "ms", " j", "__", " __", "mod", "ate", "val", "pre", "\u00e7", "j", "ox", "valid", "n", "___", " f", "ation", "ly"], "d": ["z", "f", "des", "m", "l", "y", "t", "dict", "did", "dd", "r", "Ds", "db", "v", "c", "b", "g", "de", "pd", "p", "dl", "da", "do", "j", "ds", "e", "dh", "n", "ad", "w", "data"], "D": ["DL", "DB", "PD", "C", "X", "WD", "R", "G", "W", "DD", "FD", "dict", "N", "M", "dd", "A", "DATA", "Ds", "S", "E", "DS", "L", "ds", "P", "Q", "DM", "T", "Z", "V", "I", "B", "dL", "DE"], "player": ["type", "done", "linger", "play", "role", "message", "top", "winner", "ser", "ter", "move", "score", "steam", "name", "board", "number", "peer", "result", "dim", "point", "sector", "key", "butt", "ver", "status", "display", "ball", "tag", "match", "team", "index", "actor", "ayer", "players", "pen", "group", "g", "data", "position", "PLAY", "user", "playing", "test", "er", "layer", "p", "pl", "port", "zero", "slot", "pler", "Player", "e", "P", "seed", "worker", "lr", "bo", "league", "soc", "rank", "n", "game", "tower", "bench", "mi", "leader", "caster", "pro", "played"], "x": ["z", "f", "ey", "xp", "X", "hex", "ux", "xy", "l", "y", "t", "xs", "xa", "i", "xx", "v", "xt", "dx", "wx", "ex", "fx", "p", "rx", "xc", "xe", "ya", "xxxx", "ye", "lex", "n", "xi", "vr", "px", "w", "xf", "tx"]}}
{"code": "from itertools import permutations\\n\\n\\ndef main():\\n    n, c = map(int, input().split())\\n    d = [[int(x) for x in input().split()] for _ in range(c)]\\n    g = [[int(x) - 1 for x in input().split()] for _ in range(n)]\\n    count = [{}, {}, {}]\\n    for i in range(n):\\n        for j in range(n):\\n            now = g[i][j]\\n            index = (i + j + 2) % 3\\n            if now in count[index % 3]:\\n                count[index % 3][now] += 1\\n            else:\\n                count[index % 3][now] = 1\\n    answer = float(\"inf\")\\n    for color in permutations([i for i in range(c)], 3):\\n        now_answer = 0\\n        for i in range(3):\\n            for before_color, num in count[i].items():\\n                now_answer += d[before_color][color[i]] * num\\n        answer = min(answer, now_answer)\\n    print(answer)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n\\n", "target": "516", "substitutes": {"n": ["nn", "m", "a", "l", "y", "t", "nt", "nr", "s", "N", "ns", "r", "v", "na", "an", "q", "b", "sn", "cn", "nu", "nb", "p", "e", "np", "nc", "o", "u", "w", "no"], "c": ["f", "sc", "mc", "m", "C", "cr", "a", "cs", "l", "t", "cf", "con", "ci", "cin", "r", "k", "ch", "v", "co", "b", "lc", "cn", "ct", "cc", "ce", "p", "col", "e", "cd", "dc", "nc", "tc", "ac", "cm"], "d": ["f", "m", "a", "df", "l", "y", "t", "bd", "dict", "s", "dd", "r", "dt", "db", "v", "sd", "q", "b", "D", "di", "daily", "pd", "p", "da", "ds", "cd", "dh", "dp", "ad", "dr", "data", "dat", "fd"], "x": ["z", "yx", "xes", "xp", "php", "X", "hex", "ux", "xy", "y", "t", "ix", "xs", "xa", "xx", "ax", "ci", "v", "xt", "dx", "wx", "zx", "ex", "fx", "id", "rx", "xxx", "xc", "e", "ox", "xe", "xxxx", "xi", "lex", "px", "w", "xf", "xd", "tx", "inx"], "_": ["let", "pt", "____", "t", "__", "place", "val", "ml", "\u00e7", " the", "___"], "g": ["f", "gm", "groups", "m", "grid", "l", "y", "G", "gs", "ga", "bg", "ger", "r", "gr", "gi", "v", "db", "gu", "gt", "q", "group", "gg", "gc", "ge", "b", "h", "tg", "go", "p", "gd", "ig", "mg", "gn", "gb", "gen", "pg"], "count": ["z", "type", "ount", "max", "found", "sum", "C", "comment", "cr", "cond", "counter", "l", "y", "nt", "t", "number", "hold", "amount", "dict", "cycle", "score", "info", "result", "key", "ch", "at", "v", "history", "status", "length", "h", "q", "Count", "gc", "th", "ct", "cc", "nb", "code", "ind", "force", "config", "size", "process", "p", "command", "total", "td", "bool", "cd", "current", "cache", "conf", "table", "log", "list", "hash", "data"], "i": ["f", "z", "ini", "ei", "ri", "zi", "m", "a", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "r", "k", "key", "v", "gi", "ij", "hi", "q", "b", "phi", "yi", "ie", "ind", "id", "di", "ik", "iat", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "u", "w", "ia", "iti", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "ja", "l", "y", "t", "name", "day", "s", "jp", "r", "ji", "k", "v", "json", "ij", "job", "q", "b", "ind", "p", "kj", "it", "jj", "jump", "aj", "J", "o", "u", "uj", "dj", "im", "bj", "js", "jc"], "now": ["wait", "done", "gm", "function", "sc", "sum", "off", "when", "here", "Now", "node", "order", "NOW", "y", "full", "name", "ow", "day", "this", "result", "raw", "sw", "switch", "at", "sp", "length", "aw", "match", "store", "post", "temp", "test", "default", "size", "next", "zero", "self", "seed", "current", "then", "after", "time", "search", "aj", "span", "set", "on", "ready", "new", "always"], "index": ["type", "offset", "level", "capacity", "ion", "ice", "find", "node", "second", "name", "number", "ix", "pos", "note", "info", "Index", "location", "cycle", "key", "point", "status", "timeout", "root", "query", "length", "condition", "position", "page", "ind", "test", "id", "size", "initial", "axis", "zero", "seed", "int", "address", "search", "time", "si", "loc", "instance", "set", "where", "list", "update", "connect"], "answer": ["expression", "ve", " unanswered", "out", "message", "ion", "neutral", "reset", "vote", "equ", "score", "section", "poll", "urn", "number", "wer", "archive", "result", "say", "request", "reply", "answered", "value", "interpret", "status", "blank", "approximately", "query", "rage", "remember", "term", "sense", "uzzle", "position", "ze", "about", "version", "option", "ask", "clear", "command", "accept", "zero", "word", "consider", "ache", "uration", "energy", "error", "average", "Answer", "void", "ace", "offer", "response", "support", "question", "description"], "color": ["type", "background", "normal", "style", "role", "Color", "blue", "name", "cycle", "number", "fill", "row", "colour", "key", "theme", "pal", "state", "black", "id", "olor", "size", "ior", "char", "cho", "title", "col", "white", "word", "COLOR", "inner", "cy", "o", "cor", "green", "colored"], "now_answer": [" now_response", "now64message", "before_message", "now64result", "before64message", "before64request", "now_anova", "now_result", " now_anova", "now_mate", "before_result", "now64request", "before_request", "now_Answer", "now64answer", "before64answer", "now___answer", " now_Answer", "now___anova", "now___Answer", "before_answer", "now_message", "now_response", "now_request", " now_mate", "now___response", "before64result"], "before_color": ["before__color", "before_term", "Before_Color", "before_col", "Before_color", "before__term", " before_Color", "before_Color", "before__Color", "Before_col", " before_term"], "num": ["Num", "nom", "sum", "m", "mon", "comment", "tim", "node", "draw", "ord", "name", "number", "nam", "result", "con", "dim", "den", "final", "nm", "mn", "cal", "post", "enum", "nu", "th", "nb", "size", "alph", "total", "np", "mate", "uni", "cum", "NUM", "um", "text"]}}
{"code": "a, b, c, k = map(int, input().split())\\n\\nans = b - a if k % 2 == 1 else a - b\\n\\nprint(ans if ans <= 10**18 else \"Unfair\")\\n", "target": "669", "substitutes": {"a": ["f", "ba", "m", "ae", "ta", "y", "t", "af", "s", "xa", "i", "cb", "A", "r", "ca", "at", "v", "h", "ak", "d", "p", "alpha", "da", "ao", "j", "e", "sa", "aq", "aa", "ac", "n", "o", "u", "w", "ab", "x", "ach", "an", "ks"], "b": ["z", "f", "rb", "ba", "ib", "m", "bl", "be", "l", "y", "bc", "s", "i", "cb", "fb", "r", "ca", "v", "db", "h", "g", "cc", "nb", "d", "p", "bi", "j", "bf", "e", "bin", "it", "n", "ac", "bs", "u", "B", "ab", "bb", "eb"], "c": ["z", "f", "m", "C", "cr", "l", "y", "t", "bc", "cs", "cf", "s", "ci", "cb", "ca", "r", "v", "h", "g", "cc", "ce", "d", "p", "e", "n", "ac", "ic", "x"], "k": ["z", "f", "max", "K", "m", "kr", "kind", "ka", "t", "kl", "i", "kk", "ke", "ch", "kid", "v", "ket", "mk", "ki", "q", "ak", "nb", "num", "kok", "p", "alpha", "km", "j", "kj", "kw", "conf", "n", "o", "w", "sk", "ko", "x", "ku", "ks"], "ans": ["ps", "ens", "lines", "ls", "qual", "aned", "AN", "std", "ran", "pan", "cs", "cons", "rs", "amps", "ars", "anas", "ins", "aus", "ons", "outs", "ms", "ann", "acts", " Ans", "ns", "res", "aps", "aces", " sans", "un", "es", "na", "ians", "S", " means", "san", "ANS", "ant", "can", "man", "uns", "anes", "nan", "ams", "mean", " spans", "n", "u", "ats", "us", "an", "ks", "ants", "lan"]}}
{"code": "import math\\nimport numpy as np\\nimport numba\\nfrom numba import njit, b1, i4, i8, f8\\nfrom numba import jit\\nimport collections\\nimport bisect\\nfrom collections import deque\\nfrom copy import copy, deepcopy\\nimport time\\n \\ndef main():\\n    N,X,T = map(int,input().split())\\n    print(math.ceil(N/X) * T)\\n\\nif __name__ == '__main__':\\n    main()", "target": "105", "substitutes": {"N": ["Num", "C", "AN", "R", "Ni", "CNN", "NB", "NG", "M", "NR", "CN", "MN", "Na", "NL", "NA", "NW", "ND", "New", "NT", "D", "SN", "NS", "NM", "TN", "UN", "NPR", "GN", "J", "n", "I", "Ns", "NC", "NO", "NN", "NH"], "X": ["Y", "UX", "K", "H", "C", "XL", "MX", "F", "R", "M", "A", "AX", "OX", "XXX", "TH", "S", "DX", "E", "Cross", "L", "P", "Q", "XP", "J", "XX", "Z", "V", "I", "IX", "x", "TX"], "T": ["Y", "Time", "TR", "K", "H", "C", "R", "t", "WT", "MT", "M", "OT", "TO", "TH", "S", "E", "NT", "L", "TB", "TP", "TN", "TM", "TW", "TS", "P", "RT", "Q", "TI", "TC", "J", "Z", "V", "I", "B", "VT", "TF", "TT", "TX", "GT", "TV", "PT"]}}
{"code": "s = int(input())\\nmod = 10 ** 9 + 7\\n\\nfact = [1] * s\\ninv = [1] * s\\ninvf = [1] * s\\nfor i in range(2, s):\\n  fact[i] = fact[i-1] * i % mod\\n  inv[i] = -(mod // i) * inv[mod % i] % mod\\n  invf[i] = invf[i-1] * inv[i] % mod\\n\\ncount = 0\\nrest = s\\nfor n in range(1, s // 3 + 1):\\n  rest -= 3\\n  count = (count + fact[rest + n - 1] * invf[rest] * invf[n - 1]) % mod\\nprint(count)", "target": "235", "substitutes": {"s": ["z", "ps", "f", "sing", "sv", "ls", "m", "a", "l", "y", "t", "se", "gs", "ms", "sy", "ins", "ns", "r", "sw", "v", "sp", "sd", "es", "c", "h", "q", "b", "g", "S", "d", "size", "p", "ss", "j", "ds", "sb", "so", "time", "bs", "w", "sq", "sin", "ats", "x", "ts", "mods", "js"], "mod": ["sup", "sub", "add", "max", "sed", "sum", "sign", "ran", "spec", "sec", "module", "ver", "div", "sym", "tag", "post", "sim", "num", "com", "deg", "trans", "ident", "sin", "set", "mm", "fun", "fd", "ld", "m", "comment", "dig", "grid", "ms", "modified", "perm", "index", "scale", "temp", "ind", "comp", "mun", "cum", "req", "put", "comm", "mods", "med", "ix", "debug", "month", "r", "check", "sd", "odd", "term", " Mod", "func", "j", "form", "Mod", "MOD", "time", "loc", "dec", "sing", "min", "let", "ent", "cond", "seq", "step", "id", "config", "d", "mult", "pi", "ox", "od", "var", "lex", "log", "mag", "reg", "prime", "cm", "base"], "fact": ["f", "core", "feat", "stat", "fit", "cond", "fg", "floor", "cf", "fol", "fn", "ft", "acter", "factor", "term", "fo", "flag", "ct", "bit", "fx", "ist", "ind", "ref", "Fact", "power", "func", "col", "act", "pl", "form", "fig", "ox", "wire", "fac", "fam", "const", "mat", "var", "txt", "fc", "conf", "ac", "star", "facts", "ff", "cast", "fun", "fd"], "inv": ["f", "img", "out", "inventory", "conv", "iq", "bl", "all", "info", "ms", "ip", "ns", "ins", "fn", "lim", "un", "v", "vin", "ln", "Inv", "iv", "ind", "rev", "eq", "mult", "dir", "verse", "inn", "fig", "bin", "vol", "inf", "inc", "block", "fin", "fw", "conf", "ii", "wave", "log", "w", "iter", "rec", "rel", "us", " Inv", "vc", "fun", "ll", "init"], "invf": ["inventoryx", "blockfac", " invx", "blockF", "Invh", "incfo", "Invfc", "funfl", "iqv", "invg", "inventoryfl", "invfac", "hwf", "varfr", "inventoryfr", "varx", "blockv", "iqf", "invfunc", "blockf", "invv", "invfl", "hwh", " invh", "funh", "invx", "inventoryfunc", "hwfi", "hwfl", "varg", "Invfo", "invF", "invfc", "inventoryf", "iqfac", "inventoryfi", "Invv", " invg", "Invf", "Invfunc", "invfo", " invfac", "funf", "blockfo", "inventoryh", "blockfc", "iqF", " invfr", " invF", "incf", " invfunc", "inventoryg", " invv", "invfi", "varf", "incv", "incfc", "inventoryv", "funfi", "invfr", "invh"], "i": ["z", "f", "ini", "iso", "zi", "m", "ir", "a", "l", "y", "ix", "ti", "info", "ip", "ci", "\u0438", "ji", "gi", "v", "ij", "c", "hi", "index", "phi", "b", "ie", "ind", "id", "di", "p", "bi", "multi", "j", "pi", "fi", "ai", "it", "int", "ii", "xi", "si", "ic", "li", "I", "iter", "o", "iri", "list", "x", "ui", "mi", "iu", "im", "me"], "count": ["z", "ount", "add", "stat", "found", "sum", "report", "child", "cat", "cond", "find", "counter", "hold", "t", "nt", "number", "result", "len", "err", "check", "now", "length", "c", "match", "index", "start", "q", "term", "Count", "flag", "th", "ct", "val", "nb", "code", "ind", "ist", "test", "cmd", "num", "d", "call", "cont", "ctr", "act", "total", "cd", "current", "temp", "conf", "weight", "list"], "rest": ["rand", "min", "max", "ri", "range", "Rest", "est", "reset", "dest", "ret", "nt", "full", "pos", "rot", "N", "ns", "r", "mn", "res", "at", "native", "sp", "ng", "start", "sn", "nd", "th", "test", "next", "p", "tail", "just", "tip", "pi", "end", "port", "last", "it", "right", "short", "art", "part", "w", "rem", "reg", "stop", "us", "head", "patch", "some", "st"], "n": ["z", "f", "nn", "nw", "max", "out", "m", "l", "y", "nt", "name", "t", "number", "note", "all", "N", "nos", "ns", "mn", "nm", "r", "un", "v", "sd", "na", "c", "ng", "sn", "nd", "b", "g", "wn", "ind", "num", "d", "p", "j", "ne", "none", "nor", "gn", "np", "nan", "nc", "no", "x", "body", "new"]}}
{"code": "N = int(input())\\ns = list(input())\\nr, b = 0, 0\\nfor i in s:\\n    if i == \"R\":\\n        r += 1\\n    else:\\n        b += 1\\nif r > b:\\n    print('Yes')\\nelse:\\n    print(\"No\")", "target": "160", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "X", "F", "R", "G", "M", "NR", "A", "RN", "S", "E", "O", "D", "NS", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", "B", "NN"], "s": ["ps", "stats", "sv", "ws", "ls", "events", "has", "m", "a", "l", "rs", "t", "cs", "gs", "xs", "ins", "ns", "series", "strings", "es", "c", "h", "S", "d", "ches", "p", "ss", "ds", "parts", "args", "e", "ims", "ses", "n", "abs", "o", "bs", "w", "ts"], "r": ["f", "rb", "pr", "rr", "m", "sr", "a", "R", "l", "rs", "t", "rus", "y", "nr", "rc", "k", "v", "c", "h", "q", "g", "re", "d", "p", "rx", "usr", "ro", "e", "ra", "n", "rd", "mr", "w", "u", "dr", "x", "ar", "rt", "ru"], "b": ["z", "f", "rb", "ib", "m", "a", "be", "l", "y", "t", "bc", "back", "fb", "v", "db", "c", "h", "g", "wb", "nb", "d", "p", "bi", "j", "bf", "e", "sb", "bo", "n", "o", "bs", "u", "B", "bb", "eb"], "i": ["ei", "ini", "ri", "zi", "\u00ed", "uri", "Si", " bi", " vi", "iii", "ni", "t", "ti", "ati", "chi", "gi", "ori", "oi", "ki", "phi", "asi", "di", " Xi", "Xi", " ti", "bi", "pi", "ai", " si", "ii", "xi", "si", "iri", "uli", "I", "li", " di", " mi", "iti", "mi"]}}
{"code": "list = list(input())\\nprint(list.count('+')-list.count('-'))", "target": "166", "substitutes": {"list": ["str", "diff", "out", "ls", "tmp", "line", "top", "array", "spec", "l", "all", "t", "full", "nt", "dict", "format", "lower", "token", "copy", "input", "listed", "v", "now", "filter", "quote", "ul", "long", "index", "split", "header", "tree", "temp", "test", "select", "ist", "cont", "dl", "p", "join", "sort", "null", "pl", "word", "get", "net", "int", "List", "table", "n", "log", "li", "left", "LIST", "print", "set", "lat", "data", "lists", "new", "st"]}}
{"code": "\\nS=input()\\ncnt=0\\ncnt = cnt + S.count('+')-S.count('-')\\nprint(cnt)", "target": "166", "substitutes": {"S": ["SER", "BS", "String", "SI", "H", "C", "SS", "X", "F", "R", "SL", "G", "PS", "LS", "SB", "SM", "JS", "s", "N", "M", "ASC", "A", "SEC", "LESS", "ST", "IS", "DS", "D", "NS", "SU", "Is", "L", "SP", "P", "TS", "Q", "SH", "T", "SA", "SF", "SE", "Z", "V", "B", "CS", "GS", "HS"], "cnt": ["rNT", "cunt", " cnd", "cuNT", "acnt", "Cpt", "Ccount", "tcpt", "cuount", "cth", "rnt", "acct", " cth", "Cld", " cpt", "cNT", "nth", "cuct", "cld", "Cct", "tct", "ccount", " ccount", "acnd", "Cnt", "tcct", "acrand", "tcnt", "nld", "tnt", "trand", " cld", " count", " crand", "crand", " cNT", "nct", "Cth", "nnt", "rct", "cnd", "cct", " cct", "tnd", "rount", "tccount", "count", "cpt"]}}
{"code": "r = int(input())\\nprint(2*r*3.14159)", "target": "552", "substitutes": {"r": ["z", "f", "rb", "m", "rr", "rg", "R", "l", "rs", "t", "s", "i", "rc", "k", "v", "c", "h", "q", "b", "rf", "g", "re", "d", "p", "e", "n", "mr", "w", "u", "x", "rat", "rt"]}}
{"code": "k,n=[int(x) for x in input().split()]\\na=[int(x) for x in input().split()]\\nb=0\\nfor i in range(n-1):\\n  d=a[i+1]-a[i]\\n  b=max(b,d)\\nd=a[0]-(a[n-1]-k)\\nb=max(d,b)\\nprint(k-b)", "target": "33", "substitutes": {"k": ["dk", "f", "kg", "max", "K", "m", "kr", "kind", "kt", "uk", "ka", "ck", "kl", "ikk", "key", "kk", "r", "ke", "ch", "v", "c", "mk", "h", "q", "ki", "g", "ak", "unk", "kn", "id", "ik", "p", "km", "j", "kb", "kj", "ek", "kw", "tk", "sk", "ko", "ku", "ks"], "n": ["nn", "nia", "names", "m", "l", "y", "t", "name", "number", "nt", "nr", "N", "len", "ns", "mn", "r", "fn", "un", "en", "v", "na", "c", "ln", "sn", "h", "nd", "g", "cn", "nu", "nb", "num", "size", "p", "j", "network", "ne", "net", "nor", "np", "got", "nan", "nc", "o", "w", "no", "nl", "non"], "x": ["z", "ey", "yx", "xes", "xp", "X", "php", "hex", "ux", "xy", "l", "y", "t", "ext", "ix", "xs", "sex", "xa", "xx", "ci", "ax", "v", "xml", "xt", "dx", "wx", "c", "index", "q", "ex", "ct", "fx", "ross", "id", "ctx", "\u00e7", "p", "rx", "xc", " xx", "hyp", "e", "ox", "xe", "xi", "w", "xf", "xd", "tx", "inx", "qu"], "a": ["z", "f", "ba", "obj", "apa", "m", "am", "ae", "l", "y", "t", "all", "sta", "ga", "au", "s", "A", "ca", "r", "at", "la", "v", "history", "na", "c", "ea", "g", "p", "da", "app", "oa", "window", "e", "ai", "sa", "aa", "al", "ac", "ma", "ia", "ab", "aaa", "list", "an"], "b": ["z", "f", "rb", "ba", "ib", "m", "mb", "bl", "be", "l", "y", "t", "bc", "pb", "bg", "cb", "fb", "r", "lb", "db", "v", "bound", "c", "h", "g", "wb", "nb", "p", "bi", "br", "j", "bf", "bool", "e", "sb", "gb", "bo", "ob", "bs", "u", "B", "ab", "bb", "body", "base", "eb"], "i": ["f", "ini", "zi", "m", "l", "y", "t", "ix", "iy", "ti", "ip", "ci", "gi", "v", "ij", "hi", "index", "phi", "yi", "ind", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "ai", "it", "ii", "xi", "si", "ic", "li", "I", "mi", "iu", "im"], "d": ["z", "f", "diff", "ld", "m", "red", "bd", "l", "t", "y", "debug", "dd", "r", "dt", "div", "db", "v", "dx", "sd", "c", "nd", "g", "mod", "D", "di", "du", "de", "dl", "do", "da", "p", "dn", "j", "ds", "td", "e", "cd", "dy", "dh", "ad", "rd", "dec", "u", "dra", "dr", "dat", "fd"]}}
{"code": "n, m = map(int, input().split())\\n\\ndp = [[10**10 for _ in range(2**n)] for j in range(m)]\\ndp[0][0] = 0\\na, b = map(int, input().split())\\nc = list(map(int, input().split()))\\nidx = 0\\nfor cc in c:\\n  idx += 2**(cc-1)\\nfor j in range(1, 2**n):\\n  if ~idx & j == 0:\\n    dp[0][j] = a\\n\\nfor i in range(1, m):\\n  a, b = map(int, input().split())\\n  c = list(map(int, input().split()))\\n  idx = 0\\n  for cc in c:\\n    idx += 2**(cc-1)\\n  for j in range(2**n):\\n    dp[i][j] = min(dp[i-1][j], dp[i-1][(j|idx)^idx]+a)\\n\\nif dp[-1][-1] != 10**10:\\n  print(dp[-1][-1])\\nelse:\\n  print(-1)", "target": "772", "substitutes": {"n": ["nn", "mc", "l", "y", "t", "nt", "s", "N", "ns", "nm", "mn", "r", "k", "en", "v", "na", "h", "an", "sn", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "e", "gn", "np", "nc", "o", "u", "no", "non", "x", "on"], "m": ["f", "gm", "mc", "tm", "mb", "l", "y", "t", "month", "ms", "M", "mn", "r", "k", "nm", "v", "mis", "bm", "h", "g", "dm", "num", "d", "p", "mt", "mo", "o", "mm", "mi", "cm", "md"], "dp": ["ps", "pt", "deb", "adr", "decl", "bsp", "df", "pkg", "wd", "dos", "gp", "pb", "pp", "dd", "ip", "jp", "dt", "tp", "db", "vp", "pm", "dq", "fp", "imp", "deep", "isp", "dm", "pd", "d", "dl", "p", "dep", "ds", "cp", "lp", "xc", "dial", "dc", "np", "DP", "dh", "bps", "delay", "px", "dj", "lat", "dr", "wp", "list"], "_": ["C", "all", "ci", "__", "gc", "ct", "cp", "CC", "int", "time", "J", "ac", "ic", "x"], "j": ["z", "f", "obj", "jl", "iaz", "ja", "jit", "l", "y", "t", "yy", "jp", "r", "k", "ji", "ch", "v", "json", "ij", "index", "h", "q", "g", "ind", "id", "ijk", "d", "p", "bi", "oj", "kj", "it", "jj", "aj", "J", "o", "u", "uj", "dj", "x", "bj", "js", "jc"], "a": ["z", "f", "ba", "apa", "am", "ae", "l", "y", "t", "all", "au", "s", "ga", "r", "A", "ca", "v", "ea", "h", "g", "d", "p", "alpha", "e", "sa", "ai", "aa", "aj", "ac", "o", "ma", "u", "w", "ab", "x", "an"], "b": ["z", "f", "rb", "ba", "ib", "l", "y", "t", "bc", "r", "fb", "v", "g", "d", "p", "bi", "e", "sb", "o", "bs", "B", "ab", "bb"], "c": ["z", "f", "mc", "C", "cat", "cr", "l", "cs", "t", "bc", "s", "ci", "r", "cin", "cb", "ca", "ch", "v", "co", "h", "lc", "g", "unc", "ct", "ce", "d", "cos", "p", "cp", "ec", "xc", "e", "dc", "fc", "cache", "nc", "ic", "ac", "u", "x", "cm", "count"], "idx": [" idc", "ridix", "idxy", "idxi", "ridx", " idxi", "idew", "idxes", "idz", "pidex", "indz", "idexc", "namez", " idxc", "ridz", "pidx", "namexs", "edy", "pidxs", "edx", "idw", "indxs", "idxs", "ideg", "namex", "idexy", "timec", "idg", "ridxes", " idxy", "index", "indg", " idxs", " idw", "ridw", "namexes", "ideex", "indy", "idc", "indix", " idy", "timez", " idxes", "indx", " idix", "timexi", "inc", "ridy", "edxs", " idz", " idg", "ridxc", "idxc", "nameix", "inxi", "idix", "pidix", "idey", "namexc", "edz", "ridxs", " idex", "idy", "timex", "indxy", "idex", "inz", "inx"], "cc": ["sc", "mc", "ced", "occ", "cond", "anc", "acc", "cs", "cci", "bc", "cycle", "ck", "cf", "pp", "xx", "kk", "rc", "k", "ci", "icc", "erc", "co", "cz", "cv", "gc", "cn", "ct", "unc", "cl", "ctx", "\u00e7", "sect", "size", "func", "cp", "ec", "CC", "inc", "cmp", "cong", "gn", "ucc", "fc", "ctl", "nc", "cca", "cu", "hh", "ic", "cy", "ces", "mm", " ecc", "cm", "count"], "i": ["z", "ib", "ini", "zi", "l", "y", "t", "ix", "ti", "ip", "ci", "r", "k", "il", "v", "gi", "ij", "index", "h", "q", "ind", "id", " ii", "di", "ik", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "x", "mi", "iu", "im"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\nimport math\\nfrom bisect import bisect_right as br\\nfrom bisect import bisect_left as bl\\nsys.setrecursionlimit(2147483647)\\nfrom heapq import heappush, heappop,heappushpop\\nfrom collections import defaultdict\\nfrom itertools import accumulate\\nfrom collections import Counter\\nfrom collections import deque\\nfrom operator import itemgetter\\nfrom itertools import permutations\\nmod = 10**9 + 7\\ninf = float('inf')\\ndef I(): return int(sys.stdin.readline())\\ndef LI(): return list(map(int,sys.stdin.readline().split()))\\n\\nh, w = LI()\\na = [list(input()) for _ in range(h)]\\ndx,dy = [1,0],[0,1]\\nflag = True\\nfor i in range(h):\\n    for j in range(w):\\n        if a[i][j] == '#':\\n            que = deque()\\n            que.append((i,j))\\n            a[i][j] = '.'\\n            while que:\\n                y,x = que.popleft()\\n                for k in range(2):\\n                    ny, nx = y + dy[k], x + dx[k]\\n                    if 0 <= ny < h and 0 <= nx < w:\\n                        if a[ny][nx] == '#':\\n                            que.append((ny,nx))\\n                            a[ny][nx] = '.'\\n                            break\\n            flag = False\\n            break\\n    if not flag:\\n        break\\n\\n\\nfor i in range(h):\\n    for j in range(w):\\n        if a[i][j] == '#':\\n            print('Impossible')\\n            quit()\\nprint('Possible')", "target": "243", "substitutes": {}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\nans = 0\\nfor i in range(60):\\n    cnt1 = 0\\n    for j in range(N):\\n        cnt1 += (A[j]>>i)&1\\n    ans += cnt1 * (N-cnt1) * 2**i\\n    ans %= 10**9+7\\n\\nprint(ans)", "target": "353", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "X", "AN", "F", "Sn", "R", "G", "CNN", "NB", "M", "NR", "CN", "Len", "NA", "S", "E", "NT", "D", "SN", "NS", "L", "TN", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NN"], "A": ["App", "AA", "Ar", "H", "C", "X", "AN", "AC", "a", "API", "R", "M", "CA", "LA", "JA", "NA", "S", "As", "D", "HA", "AT", "Array", "AF", "WA", "GA", "An", "At", "P", "AM", "T", "AP", "AB", "V", "Answer", "Alpha", "B", "I", "ACT", "SA"], "ans": ["ens", "users", "ls", "names", "aned", "mas", "AN", "oss", "amps", "s", "ins", "anas", "ms", "aus", "outs", "ns", "ons", "ann", "os", "aps", "acs", "beans", "arts", "aces", "ents", "es", "ians", "angs", "aos", "rans", "ays", "posts", " means", "ids", "vs", "ANS", "can", "oat", "lets", "uns", "nas", "offs", "anes", "nan", "ams", "ates", "ats", "ros", "anks", "ions", "an", "ks", "ants", "uploads"], "i": ["z", "io", "ini", "zi", "m", "a", "l", "y", "ix", "ti", "ip", "ci", "k", "ji", "v", "gi", "ij", "c", "ki", "q", "b", "yi", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "o", "li", "I", "ia", "x", "mi", "iu"], "cnt1": ["cpt1", "ctx0", "cnc0", " cct7", " cct0", "cot1", "cpt0", "cctOne", "cntOne", " cnt2", "cctl", " cpt2", "cptn", " cpt1", "cnt2", "cntn", " cntn", " cctOne", " cntOne", "cct1", "cct0", "ctx1", " cctl", "cmd1", "cct7", "cnc1", "cnc7", "cotn", "cmdl", "cncOne", " cntl", " cct1", "cct2", "cptl", "cpt2", " cnt7", "cctn", "cNT7", "cNTOne", "cmd2", "cNT0", " cct2", " cnt0", "cot2", "cot0", " cpt0", "cnt7", "cmd0", " cptn", "cNT1", "cntl", "cnt0"], "j": ["z", "f", "obj", "ion", "jl", "m", "ja", "y", "jp", "k", "ji", "v", "ij", "c", "h", "q", "b", "g", "jac", "ind", "num", "p", "bi", "kj", "jj", "jump", "aj", "J", "n", "uj", "dj", "bj", "js", "jc"]}}
{"code": "Q, H, S, D = map(int, input().split())\\nN = int(input())\\na = N // 2\\nb = N % 2\\n\\nmoney = a * min(8*Q, 4*H, 2*S, D) \\\\n        + b * min(4*Q, 2*H, S)\\n\\nprint(money)\\n", "target": "404", "substitutes": {"Q": ["Y", "QU", "K", "CH", "MQ", "C", "X", "F", "R", "G", "W", "Query", "M", "A", "HQ", "QL", "HH", "q", "E", "L", "QB", "P", "Queue", "AM", "MS", "T", "J", "Z", "V", "I", "B", "Qu", "IX", "UE", "Que", "IQ"], "H": ["Y", "HK", "K", "He", "CH", "X", "HT", "R", "G", "W", " HH", "HI", "M", "HB", "A", "HQ", "HH", "h", "TH", "Host", "MH", "GH", "His", "HA", "Hours", "HE", "DH", "HR", "P", "HTML", "T", "J", "V", "B", "OH", "HTTP", "WH", "HS", "AH"], "S": ["Y", "SER", "SI", "Service", "C", "Si", "SS", "R", "SL", "SK", "G", "JS", "SAN", "SD", "s", "M", "Security", "A", "Ds", "RS", "U", "ST", "IS", "SR", "E", "DS", "NS", "SU", "P", "ESS", "TS", "T", "SA", "SE", "V", "B", "SSL"], "D": ["DN", "DB", "C", "WD", "ED", "R", "Do", "DF", "DD", "FD", "M", "A", "Ds", "DES", "DA", "CD", "DIR", "DS", "Dir", "d", "L", "DOM", "DR", "DM", "DP", "T", "Z", "B", "LD", "DE", "DOS", "DO", "DI"], "N": ["Y", "Num", "K", "NE", "C", "X", "AN", "R", "Ni", "W", "CNN", "NB", "NI", "NG", "M", "NR", "A", "MN", "NA", "E", "O", "NT", "SN", "NS", "FN", "L", "NM", "TN", "P", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NUM", "NC", "NN", "NH"], "a": ["z", "f", "ba", "m", "ap", "am", "ae", "ta", "l", "y", "t", "ga", "s", "A", "ca", "r", "at", "c", "ea", "ak", "p", "da", "alpha", "ao", "oa", "sa", "aa", "n", "ac", "o", "ma", " A", "ia", "ab", "x", "ar", "ach", "an", "aba"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "ga", "s", "i", "cb", "r", "fb", "v", "db", "c", "h", "g", "nb", "d", "p", "bi", "j", "sb", "n", "ub", "bs", "u", "B", "ab", " B", "bb", "eb"], "money": ["rent", "options", "normal", "price", "message", "currency", "m", "mon", "fine", "easy", "amount", "number", "result", "micro", "value", "quote", "wei", "machine", "iban", "buy", "double", "euro", "ONEY", "company", "margin", "option", "change", "balance", "volume", "cho", "total", "time", " Money", "very", "weight", "coin", "example", "mini", "payment", "multi", "data", "Money"]}}
{"code": "N = int(input())\\n\\nDP = [0 for _ in range(N + 1)]\\nDP[0] = 1\\nDP[1] = 1\\n\\nfor i in range(2, N + 1):\\n    DP[i] = DP[i - 1] + DP[i - 2]\\n\\nprint(DP[N])\\n\\n", "target": "152", "substitutes": {"N": ["Name", "K", "NE", "H", "C", "F", "Sn", "R", "Ni", "CNN", "NB", "NI", "M", "NV", "NR", "CN", "MN", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "P", "Q", "GN", "J", "n", "Z", "V", "I", "Ns", "NC", "Bern", "NO", "NN", "NH"], "DP": ["DN", "TY", "GP", "DL", "APD", "DB", "PD", "VP", "MP", "API", "WD", "Duration", "WW", "DF", "DD", "Dial", "CP", "DJ", "Documents", "PA", "Depth", "JP", "SCP", "POST", "NP", "DEP", "DA", "RAM", "GPU", "GB", "DER", "DX", "EP", "ND", "DT", "DS", "Document", "D", "WP", "DI", "DW", "TP", "Dialog", "PP", "DK", "GO", "P", "DR", "Decl", "FP", "STD", "HTML", "IPP", "DM", "PB", "dp", "VS", "TC", "Dex", "UD", "Privacy", "Patch", "GS", "LD", "MW", "HP", "DC", "DO", "EPA", "BP"], "_": ["pt", " int", "all", "ix", " m", "ip", "__", " n", " __", " p", "ct", "val", "int", " x", "I", "x", "an"], "i": ["ini", "zi", "m", "cli", "uri", "ogi", "ni", "l", "y", "ix", "ti", "ip", "ci", "k", "\u0438", "v", " j", "gi", "ij", "c", "index", "q", "ind", "id", " ii", "di", " c", "p", "bi", "j", "pi", " l", "qi", "fi", " I", "ai", "it", "int", " k", " x", "ii", "xi", "n", "si", "ic", "o", "I", "li", "u", "x", "ui", "mi", "iu", "multi", " n"]}}
{"code": "import sys\\nsys.setrecursionlimit(1000000000)\\nimport math\\nfrom math import gcd\\ndef lcm(a, b): return a * b // gcd(a, b)\\nfrom itertools import count, permutations, chain\\nfrom functools import lru_cache\\nfrom collections import deque, defaultdict\\nfrom pprint import pprint\\nii = lambda: int(input())\\nmis = lambda: map(int, input().split())\\nlmis = lambda: list(mis())\\nINF = float('inf')\\nN1097 = 10**9 + 7\\n\\ndef meg(f, ok, ng):\\n    while abs(ok-ng)>1:\\n        mid = (ok+ng)//2\\n        if f(mid):\\n            ok=mid\\n        else:\\n            ng=mid\\n    return ok\\n\\ndef get_inv(n, modp):\\n    return pow(n, modp-2, modp)\\n\\ndef factorials_list(n, modp):    # 10**6\\n    fs = [1]\\n    for i in range(1, n+1):\\n        fs.append(fs[-1] * i % modp)\\n    return fs\\n\\ndef invs_list(n, fs, modp):     # 10**6\\n    invs = [get_inv(fs[-1], modp)]\\n    for i in range(n, 1-1, -1):\\n        invs.append(invs[-1] * i % modp)\\n    invs.reverse()\\n    return invs\\n\\ndef comb(n, k, modp):\\n    num = 1\\n    for i in range(n, n-k, -1):\\n        num = num * i % modp\\n    den = 1\\n    for i in range(2, k+1):\\n        den = den * i % modp\\n    return num * get_inv(den, modp) % modp\\n\\ndef comb_from_list(n, k, modp, fs, invs):   \\n    return fs[n] * invs[n-k] * invs[k] % modp\\n\\n#\\n\\nclass UnionFindEx:\\n    def __init__(self, size):\\n        #\u6b63\u306a\u3089\u6839\u306e\u756a\u53f7\u3001\u8ca0\u306a\u3089\u30b0\u30eb\u30fc\u30d7\u30b5\u30a4\u30ba\\n        self.roots = [-1] * size\\n    def getRootID(self, i):\\n        r = self.roots[i]\\n        if r < 0:   #\u8ca0\u306a\u3089\u6839\\n            return i\\n        else:\\n            r = self.getRootID(r)\\n            self.roots[i] = r\\n            return r\\n    def getGroupSize(self, i):\\n        return -self.roots[self.getRootID(i)]\\n    def connect(self, i, j):\\n        r1, r2 = self.getRootID(i), self.getRootID(j)\\n        if r1 == r2:\\n            return False\\n        if self.getGroupSize(r1) < self.getGroupSize(r2):\\n            r1, r2 = r2, r1\\n        self.roots[r1] += self.roots[r2]    #\u30b5\u30a4\u30ba\u66f4\u65b0\\n        self.roots[r2] = r1\\n        return True\\n\\nYes = 'Yes'\\nNo = 'No'\\n\\n\\ndef main():\\n    from fractions import Fraction\\n    N=ii()\\n    zero = 0\\n    d = defaultdict(lambda : [0, 0])\\n    for _ in range(N):\\n        x, y = mis()\\n        if x == y == 0:\\n            zero += 1\\n            continue\\n        if y < 0 or (y==0 and x < 0):\\n            x, y = -x, -y\\n        g = gcd(x, y)\\n        x //= g\\n        y //= g\\n        if x<=0:\\n            rot = True\\n            c = (y, -x)\\n        else:\\n            rot = False\\n            c = (x, y)\\n        d[c][rot] += 1\\n    #\\n    N -= zero\\n    ans = 1\\n    for (q1, q2) in d.values():\\n        ans *= (pow(2, q1, N1097) - 1) + (pow(2, q2, N1097) - 1) + 1\\n        ans %= N1097\\n    ans -= 1\\n    ans %= N1097\\n    print(ans + zero)\\n\\n\\n\\n\\n\\n\\nmain()\\n\\n", "target": "86", "substitutes": {"a": ["ba", "m", "ae", "t", "ed", "au", "i", "r", "A", "ca", "at", "c", "ea", "an", "g", "ak", "area", "d", "p", "da", "alpha", "aka", "sa", "ya", "aq", "aa", "aj", "al", "ac", "ma", " A", "w", "ia", "ab", "aaa", "x", "ar", "ach", "am"], "b": ["z", "rb", "ba", "m", "be", "l", "y", "t", "bc", "s", "i", "bg", "cb", "r", "fb", "v", "c", "h", "g", "wb", "d", "p", "bi", "j", "bf", "e", "bu", "sb", "bo", "bs", "u", "B", "ab", "x", "bb", "bar", "eb"], "ii": ["ini", "ei", "ib", "zi", "iq", " ind", " i", "iii", "sis", "iy", "ti", "ci", " ni", " iv", "wi", "ind", "pi", "qi", " pi", "ai", " si", "si", " indices", "qq", " mi", "mi", "II", " inf"], "mis": ["mu", "mor", "isin", "mc", "Mis", "mas", "tm", "sis", "prop", "mus", "ris", "ms", "mits", "mn", "phys", "miss", "phis", " Mis", "mes", "mass", "mask", "dis", "mod", "sim", "mem", "its", "mons", "ims", "neg", "si", "ma", "sin", "Miss", "mm", "tis", "mi", "mins", "vals", "wi", "mess"], "lmis": ["ztis", "zmiss", "Ltis", "Lmiss", " ltis", "lmiss", "lmi", "ltis", "Lmis", "zmi", " lmiss", "zmis", "Lmi", " lmi"], "INF": ["INf", "INDEF", "INN", " INN", "ANf", "ANF", "Inf", "ANN", " INf", "ANDEF", "InN", "InF", "InDEF", " INDEF"], "N1097": ["N995", "L1043", "N1096", "L897", "N4096", "L896", "N897", "N996", "N4043", "N895", "L1095", "N4097", "N943", "L895", "N997", "N896", "N1095", "L843", "L1097", "N843", "N4095", "L1096", "N1043"], "f": ["z", "m", "F", "df", "l", "t", "cf", "af", "i", "fn", "r", "v", "c", "h", "q", "rf", "g", "d", "p", "func", "j", "fi", "bf", "e", "sf", "inf", "tf", "fc", "float", "w", "ff", "fun", "fd"], "ok": ["good", "rand", "ol", "out", "oc", "off", "kr", "nt", "full", "ck", "os", "ms", "key", "Ok", "k", "err", "res", "msg", "check", "perm", "ll", "ij", "alg", "ocr", "ot", "nd", "mot", "OK", "ak", "ind", "id", "cmd", "typ", "ik", "p", "km", "j", "oly", "oh", "ro", "deg", "valid", "it", "od", "loc", "o", "reg", "ko", "success", "ku", "og", "md"], "ng": ["z", "rand", "nw", "nn", "med", "aug", "org", "mb", "my", "inv", "nt", "NG", "nr", "ms", "ang", "ns", "mn", "nm", "raw", "hed", "now", "mong", "na", "index", "resh", "nd", "mx", "wn", "ny", "ind", "next", "gov", "ss", "ping", "sam", "eng", "ne", "ming", "ong", "ig", "inc", "mg", "gn", "nz", "reg", "jing", "sh", "og", "md", "new"], "mid": ["rand", "partial", "sub", "min", "med", "max", "mill", "le", "m", "my", "full", "middle", "ms", "mn", "div", "micro", "lim", "perm", "hi", "mk", "dem", "mask", "nd", "start", "mod", "val", "ind", "id", "orig", "Mid", "km", "low", "mt", "trans", "mad", "mg", "rid", "wid", "fin", "tri", "mer", "mr", "pid", "mini", "mm", "me", "mi", "multi", "md"], "n": ["z", "nn", "nw", "m", "node", "l", "nt", "t", "nr", "N", "i", "fn", "ns", "nm", "mn", "en", "r", "v", "na", "c", "sn", "h", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "j", "ne", "net", "nor", "gn", "np", "nc", "o", "on", "norm", "x", "ll"], "modp": ["modP", "modpc", " modpc", "mind", "minp", "modd", "minpa", "minP", "Modpa", " modd", "padp", "MODP", "primep", "MODn", "primepa", " modn", " Modpy", " ModP", " modP", " modpa", "modr", "ModP", "primeP", " Modp", "modpa", " modpy", "padpy", " modr", "modn", "padpc", "addr", "padP", "MODr", " Modpc", "addn", "Modd", "addP", "Modp", "addp", "MODp", "modpy"]}}
{"code": "c = input()\\nalph = 'abcdefghijklmnopqrstuvwxyz'\\nprint(alph[alph.index(c) + 1 ])", "target": "501", "substitutes": {"c": ["f", "abc", "m", "C", "cat", "cr", "a", "l", "cs", "t", "bc", "cf", "i", "ci", "k", "ch", "v", "co", "h", "b", "lc", "g", "cc", "ct", "ce", "d", "p", "cp", "xc", "e", "dc", "fc", "n", "ac", "cu", "u", "x"], "alph": ["canon", "fl", "ph", "phal", "abet", "bl", "finals", "phas", "anc", "hex", "letters", "alog", "hen", "oct", "forth", "alf", "arch", "ul", "alia", "alg", "pal", "phy", "flat", "dash", "isal", "phabet", " al", "ality", "alpha", "bert", "orth", "alias", "aka", "pl", "oth", "eng", "abal", "uf", "sel", "offs", "hom", "al", "atic", "het", "alid", "alian", "pha", "Alpha", "mar", "sav", "als", "utf", "tha", "ali", "bet", "along", "aval"]}}
{"code": "N = int(input())\\ns = [sorted(input()) for i in range(N)]\\ns.sort()\\nans = 0\\nfor i in range(N-1):\\n    if s[i] == s[i+1]:\\n        start = i\\n        end = N-1\\n        while start != end:\\n            center = (start + end) // 2\\n            if s[center] == s[i]:\\n                if s[center+1] == s[i]:\\n                    start = center+1\\n                else:\\n                    start = end = center\\n            else:\\n                end = center\\n        ans += start - i\\nprint(ans)", "target": "84", "substitutes": {"N": ["Num", "K", "C", "AN", "Sn", "R", "Ni", "CNN", "NB", "NI", "M", "NV", "NR", "CN", "MN", "Length", "Len", "NP", "NA", "Size", "S", "ND", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "GN", "n", "Z", "V", "I", "Ns", "NUM", "NO", "NN", "Network", "NH"], "s": ["ps", "stats", "sts", "sv", "ws", "ls", "times", "names", "has", "tests", "m", "fs", "a", "sis", "cs", "rs", "t", "gs", "xs", "ists", "ms", "ins", "os", "ns", "ports", "aps", "strings", "services", "sd", "es", "hs", "c", "ers", "ys", " ts", "ogs", "eds", "g", "ies", "S", "ments", "ests", "ands", "er", "ids", "ess", "p", "ss", "ds", "parts", "erences", "aws", "args", "sb", "its", "ences", "ses", "n", "abs", "sq", "w", "tes", "ats", "als", "ts", "qs", "js"], "i": ["f", "ini", "ri", "zi", "uri", "ice", "y", "t", "ix", "iy", "ti", "info", "ip", "ci", "k", "gi", "v", "ij", "c", "ori", "index", "oi", "ki", "phi", "hi", "ie", "ind", "id", "di", "ik", "iat", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "iri", "si", "n", "ic", "o", "li", "I", "iter", "ia", "xi", "me", "x", "mi", "iu", "im", "init"], "ans": ["ens", "stats", "rors", "cas", "ls", "sum", "names", "aned", "AN", "oss", "cs", "pan", "rs", "cons", "amps", "iann", "ins", "anas", "ms", "os", "ns", "ons", "outs", "ann", "ends", " Ans", "aus", "aps", "arts", "es", "ents", "ians", "rans", "ids", "vs", "ANS", "terms", "uns", "nas", "offs", "span", "actions", "mean", "nan", "n", "anes", "ams", "ads", "ats", "vals", "anks", "an", "ants", "scan"], "start": ["started", "rest", "origin", "ish", "offset", "top", "a", "find", "shift", "wind", "chain", "reset", "t", "name", "starting", "pos", "row", "to", "make", "point", "step", "key", "check", "sp", "before", "root", "open", "match", "index", "source", "ind", "id", "init", "next", "p", "window", "send", "get", "client", "last", "it", "int", "current", "right", "span", "time", "art", "first", "part", "set", "star", "stop", "left", "iter", "head", "Start", "lower", "begin", "new", "st"], "end": ["z", "rest", "max", "offset", "out", "edge", "ent", "range", "est", "termin", "dest", "ext", "old", "conn", "close", "append", "ed", "back", "final", "len", "en", "ends", "ue", "value", "pend", "ending", "length", "bound", "nd", "begin", "ind", "id", "d", "change", "next", "tail", "End", "send", "END", "e", "last", "it", "int", "right", "then", "hend", "rend", "event", "n", "left", "set", "stop", "ended", "until", "entry", "new", "st"], "center": ["core", "max", "origin", "offset", "sum", "centered", "here", "range", "this", "ix", "cf", "row", "free", "point", "ip", "ca", "cover", "value", "check", "enter", "root", "c", "index", "Center", "mask", "scale", "master", "menu", "ge", "share", "id", "central", "init", "ce", "context", "cap", "host", "cos", "cone", "join", "radius", "cp", "local", "outer", "client", "right", "inner", "server", "conf", "mate", "average", "small", "cell", "mean", "left", "star", "mac", "cor", "set", "south", "mid", "primary", "leader", "unit", "lower", "begin", "shift"]}}
{"code": "import sys\\nsys.setrecursionlimit(1000000)\\n\\nclass UnionFind():\\n    def __init__(self, n):\\n        self.n = n\\n        self.parents = [-1] * n\\n        # \u89aa\u306e\u756a\u53f7 \u6839\u306a\u3089\u8981\u7d20\u6570(\u8ca0\u306e\u6570)\\n\\n    def find(self, x):\\n        \"\"\"\u6728\u306e\u6839\u3092\u6c42\u3081\u308b\"\"\"\\n        if self.parents[x] < 0:\\n            return x\\n        else:\\n            self.parents[x] = self.find(self.parents[x])\\n            return self.parents[x]\\n\\n    def unite(self, x, y):\\n        \"\"\"x\u3068y\u306e\u5c5e\u3059\u308b\u96c6\u5408\u3092\u4f75\u5408\"\"\"\\n        x = self.find(x)\\n        y = self.find(y)\\n        if x == y:\\n            return\\n        if self.parents[x] > self.parents[y]:\\n            x, y = y, x\\n        self.parents[x] += self.parents[y]\\n        self.parents[y] = x\\n\\n    def same(self, x, y):\\n        \"\"\"x\u3068y\u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u5426\u304b\"\"\"\\n        return self.find(x) == self.find(y)\\n\\n    def size(self, x):\\n        \"\"\"\u30b0\u30eb\u30fc\u30d7\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3059\"\"\"\\n        return -self.parents[self.find(x)]\\n\\nN , M = map(int, input().split())\\np = list(map(int, input().split()))\\nxy = [list(map(int, input().split())) for _ in range(M)]\\nuf = UnionFind(N)\\nfor x, y in xy:\\n    uf.unite(x - 1, y - 1)\\nans = 0\\n\\nfor i in range(N):\\n    if uf.same(i, p[i] - 1):\\n        ans += 1\\n\\nprint(ans)\\n", "target": "367", "substitutes": {"self": ["disk", "ws", "diff", "ls", "obj", "tmp", "ae", "other", "dev", "rs", "conn", "full", "ix", "this", "close", "nt", "parent", "Self", "ms", "pp", "ins", "s", "final", "r", "env", "public", "c", "ren", "replace", "h", "ex", "th", "mp", "deep", "cl", "ml", "config", "vs", "cp", "pl", "local", "network", "object", "cmp", "subject", "lex", "loc", "first", "w", "left", "print", "rel", "help", "me", "sh", "plus", "new"], "n": ["z", "f", "nn", "m", "a", "l", "nt", "t", "number", "s", "N", "i", "len", "ns", "r", "k", "mn", "v", "na", "c", "ln", "sn", "h", "q", "b", "g", "cn", "nu", "depth", "nb", "num", "d", "p", "j", "ne", "nor", "np", "nan", "nc", "o", "u", "w", "no", "nl", "norm"], "parents": ["ps", "roots", "names", "params", "blocks", "parent", "states", "stack", "ns", "perm", "root", "errors", "owners", "banks", "ops", "g", "types", "ids", "children", "dep", "links", "files", "chains", "dates", "Parents", "keys", "items", "apps"]}}
{"code": "s = list(map(str, input()))\\n\\nif len(s) == len(set(s)):\\n    print('yes')\\nelse:\\n    print('no')\\n", "target": "642", "substitutes": {"s": ["f", "ps", "sts", "str", "sv", "ls", "m", "a", "cs", "rs", "t", "l", "gs", "su", "ms", "ins", "i", "ns", "r", "v", "sp", "sl", "c", "h", "q", "b", "S", "p", "ss", "j", "ds", "sb", "sa", "n", "bs", "sq", "st", "ts", "qs", "js"]}}
{"code": "import sys\\n\\ndef input():\\n    return sys.stdin.readline()[:-1]\\n\\ndef mi():\\n    return map(int, input().split())\\n\\ndef ii():\\n    return int(input())\\n\\n\\ndef main():\\n    N, M = mi()\\n    X = list(mi())\\n    X.sort()\\n    if N >= M:\\n        print(0)\\n        return\\n    dif = [(X[i+1]-X[i], i) for i in range(M-1)]\\n    dif.sort(reverse=True)\\n    koma = [-1]+[dif[i][1] for i in range(N-1)]+[M-1]\\n    print(sum(X[koma[i+1]]-X[koma[i]+1] for i in range(N)))\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "9", "substitutes": {"N": ["Y", "Name", "Num", "K", "NE", "H", "C", "AN", "F", "R", "Ni", "G", "NB", "NI", "NR", "MN", "Na", "NL", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "No", "NPR", "T", "GN", "J", "n", "V", "I", "Ns", "NC", "NO", "NN", "NH"], "M": ["Y", "MO", "K", "m", "C", "MP", "H", "FM", "MX", "R", "PM", "G", "MT", "SM", "LM", "CM", "Mon", "MI", "MN", "MC", "MAT", "MM", "S", "MH", "D", "NM", "L", "JM", "TM", "OM", "P", "MA", "IM", "MS", "MAN", "DM", "ME", "T", "n", "RM", "V", "I", "B", "Mi", "MD", "MU"], "X": ["Y", "UX", "Data", "K", "Rex", "H", "XL", "F", "MX", "R", "XY", "ML", "A", "MC", "Tx", "OX", "U", "XXX", "Ray", "S", "DX", "E", "ICE", "EX", "D", "Array", "Xi", "Cross", "Control", "RL", "L", "Right", "Content", "GE", "P", "Q", "ZX", "XM", "List", "T", "XP", "J", "XX", "Z", "V", "I", "Ex", "Test", "JSON", "IX", "x", "TX", "Fe", "XT"], "dif": ["diff", "Diffs", "pdift", "ddiff", " dift", "ddift", "pdiffs", "pdif", " diffs", "dIF", "Diff", "dift", "ddife", " dife", "pdiff", " diff", "Dift", "DIF", "diffs", "Dife", "pdIF", " dIF", "ddif", "dife", "Dif"], "i": ["io", "ei", "ini", "ri", "zi", "m", "cli", "uri", "l", "y", "t", "ix", "ti", "info", "s", "ip", "ci", "\u0438", "k", "ji", "gi", "v", "ij", "c", "ori", "oi", "index", "ki", "hi", "phi", "ami", "yi", "id", "di", "p", "bi", "multi", "j", "pi", "fi", "e", "isi", "ai", "it", "ii", "iri", "si", "xi", "n", "o", "li", "I", "ic", "u", "x", "ui", "mi", "iu", "im", "iti"], "koma": [" kna", "gomi", "noma", "jalo", "koko", "komas", " komi", "skoma", "gomas", "skasma", "akomas", "rekoko", "akomo", "rekasma", "goma", " kalo", "kalo", "rekomas", "nomas", "jomi", "skoko", "joko", "komo", "akoma", "akna", "jasma", "komi", "rekoma", "nomo", " komas", "skomas", "joma", "kna", "nna", "jomas", "galo", " komo", "kasma"]}}
{"code": "a,b,c =  input().split()\\nA = int(a)\\nC = int(c)\\nif b == \"+\":\\n    x = A + C\\n    print(x)\\nelse:\\n    y = A - C\\n    print(y)", "target": "543", "substitutes": {"a": ["f", "ba", "am", "ae", "l", "af", "au", "by", "i", "ca", "at", "la", "input", "ea", "ity", "ate", "p", "alpha", "da", "ao", "oa", "act", "e", "sa", "aa", "up", "al", "ac", "o", "ma", "u", "ia", "ab", "ar", "an", "auto"], "b": ["z", "f", "rb", "ba", "ib", "m", "mb", "be", "l", "t", "bc", "by", "back", "i", "cb", "fb", "ch", "v", "db", "h", "g", "nb", "d", "p", "bi", "e", "sb", "gb", "bo", "bis", "n", "ob", "u", "B", "ab", "bb", "base", "eb"], "c": ["f", "mc", "cr", "cs", "chain", "t", "bc", "l", "con", "i", "rc", "cin", "ca", "cb", "v", "co", "lc", "cc", "ct", "ce", "d", "cont", "cos", "cp", "ec", "e", "dc", "fc", "conf", "ac", "n", "cache", "u", "cm"], "A": ["Y", "AR", "AA", "H", "X", "Al", "AC", "F", "R", "G", "W", "ACC", "N", "M", "BA", "CA", "AL", "LA", "U", "S", "E", "As", "D", "AU", "AT", "AF", "L", "GA", "An", "P", "T", "SA", "AB", "V", "I", "B", "Alpha", "Ax", "AE"], "C": ["Y", "H", "X", "AC", "F", "R", "G", "W", "CON", "CM", "N", "M", "BC", "CA", "MC", "CI", "CU", "CV", "CD", "S", "E", "O", "HC", "D", "CT", "L", "CC", "P", "DC", "Q", "LC", "OC", "T", "YC", "Z", "V", "I", "B", "CS", "CB", "JC", "EC", "SC", "KC", "CP"], "x": ["z", "f", "xp", "m", "X", "xy", "l", "t", "xs", "xa", "i", "xx", "r", "v", "xt", "dx", "ij", "wx", "ex", "fx", "d", "p", "rx", "xc", "e", "xe", "int", "xi", "o", "w", "lat", "xd", "tx"], "y": ["Y", "z", "sys", "ym", "ey", "yl", "ay", "my", "xy", "py", "t", "i", "yy", "ch", "yt", "v", "h", "ot", "yi", "wy", "ny", "fy", "j", "hot", "ry", "ya", "dy", "ye", "n", "yr", "cy", "vy", "o", "sky"]}}
{"code": "s = input()\\nl = len(s)\\na = s[0:(l-1)//2]\\nb = len(a)\\nprint(\"Yes\" if s == s[::-1] and a == a[::-1] else \"No\")", "target": "420", "substitutes": {"s": ["z", "f", "ps", "sts", "str", "sv", "ls", "m", "rs", "t", "y", "gs", "se", "cs", "ms", "os", "i", "r", "sw", "sp", "sl", "c", "h", "q", "g", "S", "string", "d", "p", "ss", "ds", "e", "sa", "sb", "so", "n", "o", "bs", "sq", "tes", "ats", "south", "x", "sh", "ts", "qs", "js"], "l": ["z", "ls", "el", "le", "m", "t", "kl", "i", "len", "il", "v", "ul", "sl", "c", "lt", "long", "ln", "lc", "g", "lo", "cl", "ml", "d", "dl", "p", "L", "j", "pl", "hl", "al", "n", "loc", "gl", "li", "nl", "list", "ll"], "a": ["z", "f", "ba", "m", "am", "ta", "ae", "all", "t", "sta", "au", "i", "A", "r", "ca", "at", "pa", "na", "c", "ea", "h", "d", "p", "da", "ao", "oa", "e", "sa", "it", "ata", "aa", "al", "n", "ac", "o", "ma", "abs", "ia", "ab", "eas", "aaa", "ar", "an", "aff"], "b": ["z", "f", "ba", "m", "be", "y", "bc", "i", "r", "v", "c", "h", "g", "nb", "d", "p", "bi", "br", "j", "sb", "n", "bs", "B", "bol", "ab", "bb"]}}
{"code": "A, B, C = map(int,input().split())\\n(A, B) = (B, A)\\n(A, C) = (C, A)\\nprint(A, B, C)", "target": "499", "substitutes": {"A": ["Y", "App", "AR", "K", "AA", "Ar", "H", "X", "AC", "F", "R", "IA", "G", "W", "AV", "N", "M", "BA", "Abs", "CA", "AL", "LA", "What", "Auto", "Bar", "Av", "S", "E", "As", "AU", "HA", "Array", "AT", "Is", "AF", "L", "If", "GA", "An", "At", "CC", "P", "Q", "Java", "AM", "This", "AH", "And", "AS", "T", "J", "AB", "AP", "V", "One", "I", "Alpha", "Access", "SA"], "B": ["BE", "BB", "BS", "VB", "DB", "RB", "Rob", "R", "OB", "Ber", "But", "G", "SB", "NB", "BO", "WB", "M", "BA", "IB", "BC", "Break", "BI", "Be", "Bi", "Bar", "b", "GB", "E", "MB", "L", "TB", "LB", "BG", "P", "FB", "T", "AB", "V", "BT", "I", "USB", "BL", "Bern", "Reb", "BY", "BF", "BR", "Bs"], "C": ["CE", "H", "CO", "Ch", "AC", "F", "R", "G", "CNN", "CR", "Cs", "CP", "CON", "CM", "N", "FC", "M", "CN", "BC", "CI", "CV", "c", "CU", "GC", "CAR", "S", "E", "D", "CT", "L", "VC", "CC", "P", "Q", "LC", "CW", "Co", "T", "YC", "Z", "J", "V", "I", "CS", "KC", "EC", "SC", "JC", "CB", "WC", "DC", "Mc"]}}
{"code": "import bisect\\n\\n\\ndef main():\\n    INF = 10 ** 10\\n    N = int(input())\\n    A = [int(input()) for _ in range(N)]\\n    A.reverse()\\n    B = [INF for _ in range(N)]\\n    for a in A:\\n        index = bisect.bisect_right(B, a)\\n        B[index] = a\\n    ans = 0\\n    for b in B:\\n        if b == INF:\\n            break\\n        ans += 1\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "245", "substitutes": {"INF": ["INf", " INInf", " INFD", "ANF", "INFF", "ENF", "FINFs", "ANN", "FINF", "ANInf", "INFP", "PINFP", "InN", "ENFF", "ENFP", "PINInf", "Inf", " INFP", " INFs", "InInf", "PINf", "PINFF", "PINF", "FINInf", "ENN", "FINFD", "INInf", "InF", "INN", " INN", " INFF", "ANf", "InFs", "PINN", "InFD", "INFD", "INFs"], "N": ["Num", "NH", "K", "C", "AN", "F", "Ni", "CNN", "NB", "NI", "EN", "M", "NR", "CN", "Na", "NP", "NA", "Count", "S", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "T", "GN", "n", "Z", "V", "I", "NUM", "Ns", "NC", "NO", "NN", "NPR"], "A": ["AY", "AR", "AI", "AA", "Ar", "AC", "AN", "IA", "AV", "BA", "CA", "LA", "AL", "JA", "NA", "S", "As", "All", "Array", "AT", "AF", "L", "Address", "GA", "An", "ICA", "At", "P", "AM", "This", "AH", "AS", "AE", "The", "AB", "AP", "Answer", "One", "I", "Each", "SA"], "_": ["f", "let", " un", "____", "my", "py", "all", "ix", "un", "__", "place", " __", "ex", "val", "code", " time", "ml", "j", "ox", " the", " long", "___", "non"], "B": ["Y", "BE", "BB", "BS", "VB", "DB", "H", "C", "EB", "F", "Two", "R", "OB", "G", "SB", "BO", "WB", "BA", "IB", "BC", "M", "BI", "GB", "S", "E", "D", "L", "TB", "LB", "P", "FB", "T", "J", "AB", "V", "BT", "I", "BL", "Bern", "BF", "BR", "Bs"], "a": ["z", "f", "ba", "obj", "m", "ae", "ta", "l", "t", "name", "sta", "pos", "af", "au", "s", "xa", "i", "ca", "r", "at", "v", "pa", "na", "c", "ea", "area", "d", "p", "alpha", "ao", "j", "app", "oa", "\u00e4", "e", "sa", "ai", "it", "ata", "aq", "aa", "ac", "o", "ma", "u", "ia", "set", "ab", "aaa", "x", "ach", "an", "new"], "index": ["seek", "find", "location", "pos", "row", "Index", "result", "i", "key", "point", "value", "timeout", "length", "start", "scale", "position", "slice", "ind", "id", "num", "size", "p", "exit", "can", "j", "axis", "zero", "address", "n", "loc", "iter", "no", "set", "stop", "success", "x", "count", "connect"], "ans": ["rors", "ens", "sts", "ls", "annot", "names", "ores", "aned", "AN", "fts", "amps", "xs", "s", "ins", "os", "ms", "aus", "ns", "ons", "cks", "ann", "outs", "aps", "aces", "arts", "errors", "ents", "aos", "ians", "ums", "marks", "posts", "terms", "ANS", "ots", "can", "oa", "uns", "ai", "offs", "actions", "ads", "ates", "ats", "ros", "ts", "anks", "an", "ks", "ants", "olds", "irms"], "b": ["z", "f", "rb", "ba", "m", "ben", "bc", "bp", "i", "xb", "bh", "fb", "cb", "lb", "db", "v", "c", "bm", "wb", "nb", "p", "bt", "bi", "bf", "bin", "e", "sb", "bu", "beta", "bis", "n", "ob", "bs", "ab", "x", "bb", "ach", "bar", "base", "eb"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\n\\nn = int(input())\\na = list( map(int, input().split()))\\n\\nfrom itertools import accumulate\\nacc = a\\nacc = list(accumulate(acc))\\n\\ndef dfs(ind,prev,tmp,ans):\\n    if ind == n:\\n        return ans\\n    now = acc[ind]\\n\\n    if prev > 0:\\n        if now + tmp >= 0:\\n            ans +=abs(now + tmp +1)\\n            tmp += -(now + tmp +1)\\n    elif prev < 0:\\n        if now + tmp <= 0:\\n            ans +=abs(now + tmp -1)\\n            tmp += -(now + tmp -1)\\n\\n    return dfs(ind+1, now+tmp,tmp,ans)\\n\\nansM = dfs(0,-1,0,0)\\nansP = dfs(0,+1,0,0)\\n\\nprint(min(ansM,ansP))\\n", "target": "178", "substitutes": {"input": ["rand", "expression", "interface", "str", "out", "stream", "eval", "spec", " Input", "sample", "step", "fn", "raw", "output", "cin", "ch", "c", " output", "q", "csv", "ref", "Input", "source", "select", "temp", "cmd", "init", "config", "val", "read", "next", "char", "command", "act", "new", "get", "parse", "inc", " feed", "int", "each", "feed", "print", "exec", "list", "until", "gen", "view", "text", "shift", "method"], "n": ["z", "nn", "m", "l", "nt", "t", "nr", "s", "N", "i", "len", "ns", "r", "k", "fn", "na", "c", "long", "sn", "b", "nd", "g", "nu", "nb", "num", "d", "size", "p", "j", "int", "np", "nc", "o", "x", "count", "new"], "a": ["f", "arr", "obj", "am", "ae", "all", "amount", "t", "action", "au", "i", "attr", "A", "ca", "at", "c", "aw", "b", "ary", "aux", "area", "p", "alpha", "ao", "oa", "act", "sa", "ai", "aa", "ac", "ma", "ab", "aaa", "an", "ack", "auto"], "acc": ["ps", "ag", "arr", " ann", "abc", "obj", "annot", "oc", "sc", "sum", "AC", "alloc", "att", "account", " Acc", " av", "nt", "ACC", "au", "Acc", "attr", "adj", "ca", "ann", "asc", "aff", " cc", " ac", "atts", "c", "aw", "b", "gc", "cc", "ct", "unc", "mp", "num", "alpha", "agg", "act", "app", "capt", "cmp", "fac", "aa", "conf", " accum", "ac", "abs", "cum", "u", "tc", "acqu", "ab", "coll", " ACC", "aaa", "comm", "count"], "ind": ["cand", "mind", "cod", "ent", "pred", "desc", "kind", "cond", "ord", "wind", "hold", "nt", "old", "ix", "draw", "pos", "i", "adj", "ann", "ij", "index", "start", "nd", "mod", "IND", "id", "init", "pre", "num", "cont", "cmd", "dir", "j", "inn", "ident", "seed", "inc", "cmp", "it", "int", "inner", "loc", "Ind", "bid", "iter", "roll", "inst", "md", "dat"], "prev": ["op", "vious", "obj", "pred", "ap", "par", "other", "pkg", "serv", "old", "nr", "ip", "ptr", "adj", "jp", "before", "sp", "history", "snap", "ori", "start", "mp", "temp", "re", "rev", "pre", "next", "cur", "Prev", "j", "usr", "last", "cmp", "var", "pri", "loc", "rem", "pres", "iter", "rec", "rel", "Previous", "wp", "req", "via", "nov"], "tmp": ["img", "emp", "etc", "cb", "attr", "tp", "timeout", "before", "bytes", "tn", "cmd", "pre", "ctx", "buf", "deg", "addr", "cmp", "tf", "rt", "mm", "obj", "tm", "desc", "xy", "pkg", "t", "perm", "temp", "nb", "test", "txt", "stuff", "batch", "tc", "amp", "abs", "buff", "ppo", "proc", "src", "nt", "pos", "resp", "msg", "sp", "snap", "tar", "term", "p", "zero", "cache", "qq", "pac", "out", "html", "cond", "zip", "ret", "py", "tt", "amps", "jp", "nd", "mp", "td", "np", "prime", "cv"], "ans": ["ps", "ens", "values", "stats", "lines", "ls", "annot", "names", "AN", "oss", "rs", "amps", "xs", "s", "ins", "ms", "ars", "aus", "ons", "ns", "os", "ann", "outs", "anas", "aps", "acs", "news", "aos", "arts", "ents", "es", "ians", "rans", "eds", "posts", "yes", "tn", "vs", "ANS", "can", "ds", "uns", "ames", "mean", "ams", "ats", "orts", "ions", "apps", "an", "ants", "new"], "now": ["good", "wait", "gm", "nw", "ws", "obj", "off", "since", "when", "here", "Now", " Now", "both", "node", "pkg", "NOW", "old", "this", "sta", "ow", "wd", "day", "raw", "sw", " current", "resp", "msg", "at", " NOW", "wa", "aw", "mmm", "post", "nd", "mp", "tn", "ctx", "stage", "next", "ess", "hew", "j", "window", "null", "zero", "hw", "self", "last", "addr", "current", "today", "ew", "time", "aj", "wo", "amp", "first", "pres", "where", "wp", "on", "ready", "ack", "new"], "ansM": [" ansS", "anS", "anM", "antsM", "ausN", "ausS", " ansV", "ansS", "anV", "ausV", "ansV", "anN", "anP", "ansN", " ansN", "antsS", "ausM", "antsP"], "ansP": ["anT", " ansD", "ANSPP", "anD", "ANSM", " ansB", "anM", "anPP", "ANSQ", "annP", "annPP", "anB", "annM", "ANSP", "atsB", "ansB", " ansT", "atsT", "annQ", "anP", "atsD", "ansD", "anQ", "ansQ", "ansT", "atsP", "ansPP"]}}
{"code": "length = int(input())\\neles = [int(l) for l in input().split()]\\ntimes = 0\\n\\nfor i in range(length-1):\\n    _min = i\\n    for j in range(i, length):\\n        if eles[j] < eles[_min]:\\n            _min = j\\n    if i != _min:\\n        eles[i], eles[_min] = eles[_min], eles[i]\\n        times += 1\\n\\nprint(*eles)\\nprint(times)", "target": "666", "substitutes": {"length": ["z", "partial", "ength", "max", "range", "be", "se", "full", "name", "number", "t", "shape", "len", "k", "Length", "hello", "history", "long", "index", "h", "phi", "TH", "position", "duration", "size", "p", "height", "L", "end", "pi", "total", "ENGTH", "mount", "time", "n", "sequence", "no", "list", "prime", "count", "width"], "eles": ["eleves", "eleedes", "elles", "eled", "ellses", "ele", "elses", "eltses", "elsies", "eleed", " eltes", "elies", "elslees", "elledes", "eltes", "Elves", "lexes", "Eledes", "ellees", "elsxes", "ellves", " elves", " ellees", "Elxes", "elves", "elled", " eledes", "elsves", "ales", "elsedes", " elses", "lexedes", "Eles", "elxes", "elsses", "eledes", "elees", "Elses", "elltes", "lexies", "elee", " elxes", "aledes", "elllees", "lexses", "alses", "elted", " eled", "eletes", "alies", "elsed", "elte", "eleses"], "l": ["lit", "ls", "yl", "el", "le", "jl", "m", "line", "lv", "t", "lin", "len", "lb", "la", "v", "url", "lt", "long", "ln", "b", "lc", "ml", "p", "dl", "L", "lp", "pl", "hl", "n", "loc", "o", "li", "left", "lf", "nl", "list", "x", "ll", "ly"], "times": ["ps", "stats", "values", "cases", "lines", "checks", "events", "ties", "names", "recent", "ones", "rates", "tim", "counter", "cs", "rs", "t", "steps", "ms", "days", "features", "history", "tests", "types", "ries", "reports", "etimes", "imes", "rows", "runs", "versions", "seconds", "com", "TS", " Times", "Times", "its", "time", "actions", "dates", "months", "frames", "ts", "terms"], "i": ["z", "f", "io", "ini", "ri", "zi", "m", "a", "y", "t", "ix", "ti", "\u0438", "ci", "ip", "ji", "gi", "v", "ij", "c", "hi", "index", "phi", "b", "yi", "ie", "id", " ii", "di", "ik", "p", "bi", "pi", "e", "ai", "it", "jj", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "iri", "u", "x", "iti", "mi", "iu", "im"], "_min": ["__member", " _Min", " _max", "_Min", " _main", "_member", "_small", "_lt", "___only", " _start", "_mini", "_main", "___start", " _lt", "___min", " _lower", " _small", "_lower", "_max", "__lt", "_only", "__min", "_mid", "___Min", " _mini", "_start", "_mins", " _mid", " _only", " _member", " _mins"], "j": ["z", "f", "obj", "el", "jl", "m", "ja", "xy", "y", "t", "ix", "s", "jp", "ji", "v", "json", "ij", "job", "q", "b", "jac", "ie", "d", "p", "bi", "oj", "pi", "kj", "it", "jj", "jump", "aj", "J", "ii", "n", "xi", "ju", "uj", "dj", "li", "x", "bj", "js", "jc"]}}
{"code": "def main():\\n    n, k = map(int, input().split())\\n    print(k*((k-1)**(n-1)))\\n\\nif __name__ == '__main__':\\n    main()", "target": "582", "substitutes": {"n": ["nn", "m", "l", "nt", "t", "number", "nr", "s", "N", "i", "ns", "mn", "en", "r", "un", "v", "na", "c", "ln", "sn", "q", "h", "ot", "g", "cn", "nu", "nb", "num", "d", "p", "j", "network", "ne", "gn", "np", "nan", "nc", "o", "no", "ll"], "k": ["dk", "mu", "max", "K", "m", "kr", "kh", "ka", "ck", "kl", "ikk", "i", "kk", "kan", "ke", "kid", "ker", "v", "c", "mk", "ki", "q", "kn", "ak", "ik", "num", "kok", "p", "km", "j", "kb", "kj", "kw", "tk", "conf", "u", "sk", "ko", "ku", "ks"]}}
{"code": "n, k = map(int, input().split())\\n\\nanswer = k*((k-1)**(n-1))\\nprint(answer)\\n", "target": "582", "substitutes": {"n": ["z", "nn", "m", "ni", "l", "nt", "t", "N", "i", "ns", "mn", "nm", "en", "un", "r", "v", "na", "c", "sn", "q", "h", "g", "nu", "nb", "num", "d", "p", "j", "network", "ne", "gn", "np", "nc", "o", "u", "x"], "k": ["dk", "K", "mc", "m", "kr", "kh", "uk", "ka", "ck", "kl", "i", "kk", "r", "ke", "v", "c", "mk", "ki", "q", "g", "kn", "ak", "ijk", "ik", "p", "kok", "km", "j", "kb", "kj", "ek", "kw", "sk", "ko", "ku", "ks"], "answer": ["ve", " unanswered", "message", "array", "vote", "rep", "wer", "archive", "result", "say", "reply", "ver", "answered", "value", "interpret", "approximately", "query", "place", "remember", "term", "q", "position", "option", "ask", "next", "man", "word", "results", "search", "mate", "Answer", "definition", "response", "example", "support", "question", "viation", "entry"]}}
{"code": "from collections import deque\\nn, m = map(int, input().split())\\nedges = [[] for _ in range(n)]\\nfor _ in range(m):\\n    u, v = map(int, input().split())\\n    u -= 1\\n    v -= 1\\n    edges[u].append(v)\\n\\ns, t = map(int, input().split())\\ns -= 1\\nt -= 1\\n#dfs\\nfrom_s = [[-1]*3 for _ in range(n)]\\nd_s = deque()\\nd_s.append((s, 0))\\nfrom_s[s][0] = 0\\nwhile d_s:\\n    p, count = d_s.popleft()\\n    next_count = (count + 1) % 3\\n    for c in edges[p]:\\n        if from_s[c][next_count] != -1:\\n            continue\\n        from_s[c][next_count] = from_s[p][count] + 1\\n        d_s.append((c, next_count))\\nif from_s[t] == -1:\\n    print(-1)\\nelse:\\n    print(from_s[t][0]//3)\\n", "target": "795", "substitutes": {"n": ["nn", "nw", "nia", "yn", "names", "l", "conn", "nt", "nr", "N", "ns", "r", "k", "mn", "na", "ln", "sn", "g", "cn", "nu", "nb", "num", "d", "nv", "p", "dn", "j", " ns", " ng", "ne", "gn", "np", "nan", "nc", " gn", "nl", "nes"], "m": ["gm", "mc", "tm", "l", "month", "ms", "i", "M", "mn", "r", "nm", "mis", "c", "h", "b", "mod", "dm", "num", "d", "p", "man", "j", "mt", "om", "mo", "mos", "mr", "o", "ma", "mm", "mi", "cm", "md"], "edges": ["Edgs", " edlines", "edsgets", "edgets", "edsgs", "edsgments", "edGES", "sedGES", "sedges", "Edlines", "edgs", "segets", "seGES", "edslines", "segments", " edgs", "edlines", "Edges", "edsGES", "sedgets", "EdGES", "sedgments", " edGES", "seges", "edsges", "edgments"], "_": [" un", " g", "ix", "__", " __", "val", "j", " the", " pre", "___", " row"], "u": ["uid", "f", "tu", "pu", "ud", "su", "ug", "au", "i", "ue", "un", "ul", "lu", "U", "h", "nu", "eu", "du", "ut", "ou", "uf", "bu", "uc", "ur", "uu", "uv", "uni", "cu", "uj", "o", "us", "hu", "um", "ui", "iu", "ru"], "v": ["f", "ve", "vo", "sv", "conv", "vv", "qv", "l", "lv", "i", "r", "ver", "vp", "c", "q", "b", "g", "tv", "iv", "rev", "vd", "nv", "vs", "va", "volume", "p", "vi", "vm", "j", "av", "vol", "vt", "uv", "vr", "V", "o", "w", "ev", "vc", "cv", "vert"], "s": ["z", "f", "sv", "ws", "ls", "rs", "gs", "os", "ms", "i", "r", "sd", "sl", "c", "g", "S", "p", "ss", "j", "ds", "e", "sa", "sb", "its", "si", "o", "bs", "sq", "ats", "sh", "ts", "js"], "t": ["z", "f", "tm", "ter", "ta", "l", "tt", "nt", "i", "r", "dt", "tp", "at", "c", "h", "ot", "b", "g", "d", "tz", "te", "p", "j", "it", "wt", "int", "T", "vt", "tr", "tc", "o", "w", "ts"]}}
{"code": "# O(N)\\ndef is_not_empty(A):\\n    for x in A:\\n        if x:\\n            return True\\n    return False\\n\\ndef main():\\n    import sys\\n    input = sys.stdin.readline\\n    from collections import deque\\n\\n    N = int(input())\\n    # 1-indexed\\n    A = [deque() for _ in range(N+1)]\\n    # O(N^2)\\n    for i in range(1,N+1):\\n        for j in input().split():\\n            A[i].append(int(j))\\n\\n    # \u5f53\u65e5\u306e\u53c2\u52a0\u8005\\n    today = set()\\n    # \u521d\u65e5\\n    for i in range(1,N+1):\\n        # \u65e2\u306b\u53c2\u52a0\u3057\u305f\u4eba\u306f\u30c0\u30e1\\n        if i in today:\\n            continue\\n        enemy = A[i].popleft()\\n        ME = A[enemy].popleft()\\n        if ME == i and not(enemy in today):\\n            today.add(ME)\\n            today.add(enemy)\\n        else:\\n            A[i].appendleft(enemy)\\n            A[enemy].appendleft(ME)\\n    # \u521d\u65e5\u306b\u8ab0\u3082\u8a66\u5408\u3067\u304d\u306a\u304b\u3063\u305f\u3068\u304d\\n    if not today:\\n        print(-1)\\n        exit()\\n\\n    # \u524d\u65e5\u306e\u53c2\u52a0\u8005\\n    yesterday = today\\n    # \u65e5\u6570\\n    answer = 1\\n    while is_not_empty(A):\\n        today = set()\\n        # \u524d\u65e5\u306b\u8a66\u5408\u3057\u305f\u4eba\u306f\u5fc5\u305a\u6b21\u306e\u65e5\u306b\u8a66\u5408\u3059\u308b\\n        for i in yesterday:\\n            if not A[i]:\\n                continue\\n            if i in today:\\n                continue\\n            enemy = A[i].popleft()\\n            ME = A[enemy].popleft()\\n            if ME == i and not(enemy in today):\\n                today.add(ME)\\n                today.add(enemy)\\n            else:\\n                A[i].appendleft(enemy)\\n                A[enemy].appendleft(ME)\\n        if not today:\\n            print(-1)\\n            exit()\\n        answer += 1\\n        yesterday = today\\n\\n    print(answer)\\n\\nif __name__ == '__main__':\\n    main()", "target": "782", "substitutes": {}}
{"code": "s=0\\nfor x in input():s+=x<'T'or-(s>0)\\nprint(2*s)", "target": "713", "substitutes": {"s": ["ps", "stats", "z", "f", "ws", "ls", "sum", "m", "fs", "a", "simple", "rs", "t", "gs", "xs", "ows", "ms", "i", "say", "ns", "v", "sp", "es", "c", "hs", "long", "h", "q", "b", "g", "S", "d", "p", "ess", "ss", "ds", "sam", "sand", "seconds", "sb", "n", "w", "sq", "ats", "ts", "ar", "qs"], "x": [" dx", "z", "xes", "xp", "X", "xd", "a", "xy", "y", "t", "ix", "xs", "xa", "xx", "xb", "ax", "i", " ax", "v", "xt", "c", "ex", "fx", " c", "p", "rx", "xxx", "xc", " xx", "ox", "xe", "xxxx", "xi", "w", "xf", " cx", " y", "tx", "qu"]}}
{"code": "w = input()\\nw_set = set(w)\\nd = {}\\nfor i in w_set:\\n    d[i] = 0\\nfor i in w:\\n    d[i] += 1\\n\\nfor i in d.values():\\n    if i % 2 != 0:\\n        print(\"No\")\\n        exit()\\nprint(\"Yes\")", "target": "337", "substitutes": {"w": ["z", "f", "nw", "ws", "m", "wh", "a", "t", "W", "widget", "wd", "s", "r", "input", "v", "wig", "wa", "wx", "c", "data", "aw", "h", "q", "wl", "b", "g", "wb", "wr", "p", "window", "rw", "hw", "word", "e", "wt", "fw", "n", "u", "wal", "wp", "x", "wi"], "w_set": ["w2list", "w2et", "w_Set", " w_list", " w_et", "w_et", "w_pre", "w_list", " w_Set", " w_pre", "w2set", "w2Set"], "d": ["z", "f", "done", "m", "df", "red", "t", "dict", "did", "s", "ed", "dd", "r", "dt", "db", "v", "sd", "c", "h", "q", "b", "g", "D", "di", "pd", "de", "p", "dl", "da", "do", "j", "ds", "e", "dh", "n", "o", "set", "dra", "data"], "i": ["z", "f", "ei", "ini", "ib", "ri", "zi", "uri", "m", " vi", "a", "l", "y", "t", "ti", "ci", "k", "ili", "ati", "v", "adi", "gi", "ij", "c", "hi", "oi", "index", "ki", "h", "b", "yi", "eri", "ind", "id", " ii", "di", "uti", "p", "bi", "vi", "j", "pi", "fi", "ai", "it", "int", "ii", "iri", "xi", "si", "ic", "n", "li", "I", " di", "ia", "o", "x", "iti", "mi", "iu", "im", "iki"]}}
{"code": "n = int(input())\\nxy = []\\nfor _ in range(n):\\n    x, y = map(int, input().split())\\n    xy.append((x, y))\\ndxdy = {}\\nif n==1:\\n    print(1)\\n    exit()\\nfor i in range(n-1):\\n    for j in range(i+1, n):\\n        dx = xy[i][0] - xy[j][0]\\n        dy = xy[i][1] - xy[j][1]\\n        if dx<0:\\n            dx, dy = -dx, -dy\\n        elif dx==0:\\n            dx, dy = dx, abs(dy)\\n        if (dx, dy) in dxdy:\\n            dxdy[(dx, dy)] += 1\\n        else:\\n            dxdy[(dx, dy)] = 1\\nprint(n-max(dxdy.values()))", "target": "698", "substitutes": {"n": ["z", "nn", "names", "m", "a", "l", "nt", "t", "number", "nr", "s", "N", "len", "ns", "mn", "r", "k", "en", "v", "na", "c", "ng", "sn", "ln", "h", "b", "g", "an", "q", "cn", "nu", "nb", "num", "d", "size", "p", "network", "ne", "total", "e", "net", "gn", "nor", "np", "nan", "nc", "o", "w", "no", "nl"], "xy": ["zie", "obj", "ele", "yx", "xp", "yout", "zip", "ux", "hex", "py", "ios", "two", "xs", "prop", "XY", "info", "floor", "gs", "xx", "yy", "cb", "opl", "ji", "yt", "json", "wx", "vp", "phy", "gt", "fo", "uxe", "mx", "foo", "bits", "val", "wy", "code", "elf", "ctx", "fy", "eps", "te", "cho", "rx", "xxx", "ne", "xc", "oxy", "ox", "xe", "mie", "its", "gb", "np", "vt", "txt", "bis", "xi", "mop", "coord", "px", "iter", "list", "xf", "vals", "qq", "multi", "xd", "auto"], "_": ["ay", " int", "ix", " __", "ate", "ind", "ox", "ac", "ic", "I", "ia", "an"], "x": ["yx", "xp", "X", "hex", "ux", "l", "ix", "xs", "xa", "ax", "xx", "xt", "wx", "ex", "fx", "rx", "act", "com", "xc", " xx", "ox", "int", "xi", "lex", "px", "lat", "xf", "xd", "tx"], "y": ["Y", "ym", "ey", "yo", "yl", "ay", "my", "py", "yer", "iy", "sy", "yy", "ty", "yt", "v", "gy", "ys", "b", "ot", "ies", "ory", "yi", "ny", "fy", "et", "ya", "uy", "ye", "cy", "o", "yd", "sky", "ly"], "dxdy": ["dszy", "xdxy", "dhdy", "dhdx", "dxidy", "kwdt", " dxxy", "dxbill", "diy", "dxxy", "dydy", "ddy", "wxdy", "dydim", " dxiy", "dxiy", "dseddy", "dxeddy", "dsdx", "oxdx", "dybill", "dxdx", "cdzy", "oxdy", " dxdim", "dqeddy", "xdeddy", "xddy", "cddx", "dhzy", "oxzy", "dsdy", "dyidy", " dxdt", "xdiy", "dxdim", "xddx", "cddj", "dqzy", "dxaddy", "kwdy", "dyaddy", "cddy", "wxaddy", "dxzy", "oxdj", "dqidy", "dxy", "dydt", "dqdy", "dxdj", "dydx", "wxidy", "kwdim", "dqdx", "xdzy", "dqaddy", "kwbill", "dxdt", "dhdj", " dxbill", "wxdx"], "i": ["f", "ini", "ri", "zi", "m", "ir", "ix", "ti", "ip", "ci", "k", "ji", "v", "gi", "ij", "hi", "index", "q", "phi", "ie", "ind", "di", "ik", "p", "bi", "pi", "qi", "ai", "it", "jj", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "me", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "ja", "l", "note", "fr", "key", "jp", "k", "ji", "at", "v", "json", "ij", "h", "q", "b", "ct", "er", "di", "d", "p", "br", "kj", "it", "jj", "jump", "aj", "J", "uj", "dj", "li", "cm", "bj", "js", "jc"], "dx": ["xp", "die", "ord", "dev", "ck", "dos", "ax", "xx", "attr", "dt", "tp", "wx", "foo", "cmd", "ctx", "di", "du", "dl", "der", "da", "dep", "dir", "com", "addr", "dyl", "fix", "coord", "patch", "ld", "cod", "deb", "amd", "draw", "xs", "did", "ex", "mod", "ind", "nox", "orig", "hd", "exp", "ds", "cd", "doc", "abs", "cum", "px", "dj", "dr", "md", "xd", "yx", "red", "ix", "wd", "dist", "kk", "sd", "dq", "fx", "do", "loc", "grad", "diff", "tmp", "des", "pu", "eddy", "hex", "dim", "dd", "jp", "db", "DX", "wy", "eu", "d", "pd", "ox", "dra", "tx", "dat"], "dy": ["ei", "ded", "ties", "die", "elly", "dev", "yer", "los", "dt", "mil", "dem", "dis", "cmd", "di", "dl", "dir", "deg", "inner", "bis", "delay", "ell", "sin", "ui", "yk", "yl", "conn", "did", "sy", "len", "ty", "udi", "ind", "dn", "ds", "download", "then", "dj", "md", "elt", "addy", "den", "dist", "fr", "yy", "fn", " Dy", "phy", "ird", "fy", "yll", "ee", "uy", "loc", "idy", "body", "uin", "diff", "ym", "ey", "des", "eddy", "zy", "py", "iy", "dd", "dim", "err", "gy", "wy", "ny", "d", "lon", "bs", "dies", "lower"]}}
{"code": "N, K = map(int,input().split())\\np = list(map(int,input().split()))\\n\\nli = [0] * N\\nfor i in range(N): li[i] = sum(range(1, p[i]+1)) / p[i]\\n\\nans, total = sum(li[:K]), sum(li[:K])\\nif N != K:\\n  for i in range(1, N - K + 1):\\n    total = total - li[i-1] + li[i-1+K]\\n    ans = max(ans, total)\\n  print(ans)\\nelse: print(ans)", "target": "87", "substitutes": {"N": ["Y", "Num", "H", "C", "X", "AN", "Total", "F", "R", "Ni", "CNN", "G", "NB", "NI", "M", "NR", "A", "MN", "Na", "NP", "NA", "S", "E", "NT", "D", "SN", "NS", "L", "TN", "Net", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "PN", "B", "Ns", "NO", "NN", "NH"], "K": ["Y", "HK", "KA", "KN", "FK", "PK", "H", "C", "X", "AN", "Total", "F", "KK", "SK", "G", "NB", "M", "k", "KB", "KR", "IK", "KI", "KS", "TH", "S", "E", "O", "VK", "NK", "D", "KING", "UK", "L", "TN", "P", "Q", "KE", "Sk", "T", "J", "Ku", "Z", "V", "I", "B", "KC", "MK", "CP", "AK"], "p": ["ps", "pe", "ph", "per", "pt", "pr", "ap", "m", "par", "pkg", "l", "bp", "pos", "pb", "pp", "ip", "jp", "tp", "k", "v", "sp", "pa", "pm", "q", "mp", "pd", "power", "pi", "pl", "cp", "lp", "P", "np", "pc", "n", "dp", "pid", "pn", "pro"], "li": ["ini", "ls", "sum", "le", "zi", "line", "cli", "pu", "ni", "l", "lis", "ti", "ci", "len", " Li", "la", "sl", "lu", "pal", "ln", "ki", "phi", "loop", "lo", "di", "dl", "bi", "lie", "pi", "lp", "pl", "fi", "ai", "ee", "LI", "ii", "xi", "n", "si", "Li", "pid", "list", "link", "mi", "multi", "lists", "ll"], "i": ["z", "io", "ini", "ei", "ion", "zi", "cli", "l", "y", "chain", "ix", "iy", "ti", "info", "ip", "ci", "key", "\u0438", "ji", "gi", "v", "ij", "hi", "index", "ori", "ki", "phi", "ami", "yi", "sim", "ind", "id", "asi", "di", "ik", "bi", "multi", "j", "pi", "qi", "isi", "ai", "it", "int", "ii", "batch", "iri", "n", "ic", "si", "I", "xi", "iter", "x", "ui", "mi", "iti", "im", "ski"], "ans": ["ps", "stats", "ens", "ls", "mits", "sum", "names", "nets", "ones", "oss", "cs", "rs", "nt", "amps", "xs", "s", "os", "anas", "ms", "ins", "ns", "mn", "ons", "ann", "res", "ars", "aps", "outs", "news", "aos", "arts", "ends", "na", "es", "ents", "ids", "vs", "ANS", "plan", "trans", "sets", "nas", "ai", "offs", "nan", "mean", "n", "bs", "ates", "ats", "aus", "us", "ros", "nl", "vals", "ts", "an", "ks", "ants", "lan"], "total": ["done", "max", "out", "normal", "sum", "gross", "m", "mon", "cat", "ta", "Total", "other", "basic", "all", "full", "nt", "t", "note", "to", "info", "result", "ms", "final", "eta", "meta", "phys", "public", "otal", " Total", "ot", "complete", "num", "size", "next", "null", "local", "trans", "last", "net", "current", "mean", "n", "met", "summary", "no", "non", "base", "count"]}}
{"code": "s=str(input())\\nprint(s.swapcase())\\n", "target": "643", "substitutes": {"s": ["z", "f", "ps", "sts", "str", "sv", "ls", "m", "a", "l", "t", "gs", "su", "i", "input", "v", "sp", "strings", "sl", "c", "h", "q", "b", "S", "string", "p", "less", "ds", "self", "sb", "n", "o", "bs", "sq", "w", "st", "space", "ts", "qs"]}}
{"code": "N = int(input())\\nfor h in range(1,3501):\\n    for n in range(1,3501):\\n        d = 4*h*n-N*h-N*n\\n        if d == 0 or N*h*n%d != 0: continue\\n        w = N*h*n//d\\n        if w < 0: continue\\n        print(h,n,w)\\n        exit()", "target": "29", "substitutes": {"N": ["Y", "K", "NE", "H", "C", "X", "F", "R", "G", "W", "Ni", "NI", "M", "NR", "A", "Size", "S", "E", "O", "D", "SN", "NS", "L", "NM", "TN", "P", "No", "Q", "T", "J", "Z", "V", "I", "B", "Ns", "NO", "NN"], "h": ["f", "ph", "he", "H", "m", "html", "hn", " H", "kh", "rh", "hm", "l", "ha", "y", "t", "i", "bh", "r", "ho", "v", "hs", "c", "hi", "zh", "q", "b", "g", "hal", "hd", "ih", "p", "go", "j", "oh", "ht", "hw", "hl", "dh", "hr", "o", "hh", "ah", "u", "sh", "x", "igh", "hp"], "n": ["z", "nn", "nw", "he", "yn", "m", "a", "l", "nt", "t", "name", "s", "i", "fn", "ns", "mn", "nm", "r", "k", "un", "len", "v", "na", "c", "ln", "sn", "b", "an", "q", "cn", "nu", "nb", "nv", "num", "p", "dn", "j", "ne", "nor", "np", "nan", "nc", "o", "u", "nl", "non", "x", "pn"], "d": ["z", "f", "md", "diff", "und", "m", "a", "df", "l", "t", "did", "ed", "dd", "i", "r", "dt", "div", "v", "sd", "dx", "c", "dq", "b", "dis", "nd", "g", "mod", "ind", "id", "D", "di", "dm", "de", "pd", "p", "do", "da", "dn", "j", "ds", "td", "e", "cd", "dy", "od", "dh", "ad", "o", "rd", "dL", "xd", "fd"], "w": ["z", "nw", "ws", "iw", "win", "wh", "a", "l", "y", "W", "wat", "wd", "tw", " W", "sw", "r", "v", "wa", "wx", "wb", "we", "wr", "p", "rw", "word", "kw", "wt", "wid", "ew", "wo", "weight", "wal", "wp", "x", "wi", "width"]}}
{"code": "S = input()\\nmod = 13\\nmp = 10**9+7\\nn = len(S)\\ndp = [[0]*13 for i in range(n+1)]\\ndp[-1][0] = 1\\nd = 1\\nfor i in range(n):\\n    s = S[-i-1]\\n    if s==\"?\":\\n        for k in range(10):\\n            for j in range(13):\\n                l = (k*d + j)%mod\\n                if dp[i-1][j] !=0:\\n                    dp[i][l] +=dp[i-1][j]\\n                    dp[i][l] %=mp\\n    else:\\n        for j in range(13):\\n            l = (int(s)*d + j)%mod\\n            if dp[i-1][j] !=0:\\n                dp[i][l] = dp[i-1][j]\\n    d = d*10 %mod\\nprint(dp[n-1][5])\\n", "target": "798", "substitutes": {"S": ["Y", "BS", "SI", "Sl", "H", "C", "X", "SS", "F", "WS", "R", "SL", "G", "W", "SB", "JS", "PS", "N", "M", "A", "RS", "U", "SR", "O", "DS", "D", "NS", "SU", "L", "SP", "P", "Q", "T", "SA", "SF", "Z", "V", "I", "B", "CS", "GS"], "mod": ["good", "create", "sub", "add", "min", "max", "cod", "m", "comment", "sign", "dig", "cond", "spec", "red", "debug", "ms", "step", "modified", "dd", "r", "ke", "ver", "div", "check", "perm", "tag", "complex", "mk", "mut", "odd", "post", " Mod", "temp", "san", "id", "option", "warn", "mult", "comp", "mun", "da", "may", "cert", "mt", "deg", "trans", "form", "Mod", "ident", "mode", "od", "MOD", "ma", "dec", "log", "mag", "set", "reg", "mm", "mad", "mods", "fun", "md", "method"], "mp": ["ps", "max", "tmp", "ep", "m", "tm", "MP", "ap", "mb", "rep", "bp", "month", "pb", "ms", "pp", "jp", "sp", "mk", "pm", "scale", "p", "man", "pi", "cp", "pl", "mt", "mode", "cmp", "Mp", "omp", "amp", "ma", "mm", "prime", "md"], "n": ["z", "nn", "m", "ni", "y", "nt", "t", "nr", "N", "len", "ns", "mn", "r", "fn", "en", "v", "na", "c", "ln", "h", "sn", "nd", "an", "g", "cn", "nu", "nb", "num", "size", "p", "dn", "pi", "ne", "np", "nan", "nc", "o", "w", "no", "nl", "x"], "dp": ["ps", "pt", "deb", "adr", "bsp", "df", "pkg", "wd", "dos", "pb", "gp", "dd", "pp", "ssl", "jp", "tp", "dt", "db", "pipe", "dx", "vp", "pa", "dq", "pm", "fp", "csv", "deep", "di", "dm", "pd", "du", "dl", "p", "dep", "lp", "ds", "cp", "dial", "dc", "np", "DP", "dh", "bps", "px", "dj", "lat", "dr", "wp", "lists", "xd", "hp"], "i": ["z", "io", "ini", "zi", "\u00ed", "m", "ir", "y", "ix", "ti", "info", "ip", "ci", "\u0438", "ji", "at", "gi", "v", "status", "ij", "oi", "ki", "phi", "ie", "asi", "id", "di", "ik", "iat", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "u", "ia", "I", "iter", "me", "x", "iti", "mi", "iu", "im", "ui", "list"], "d": ["z", "f", "ld", "m", "dig", "bd", "t", "y", "ed", "dd", "r", "dt", "v", "dx", "sd", "c", "h", "b", "nd", "g", "D", "dm", "pd", "de", "p", "dl", "da", "ds", "td", "e", "dc", "dh", "ctl", "w", "u", "dr", "x", "mad", "data", "md", "dat", "fd"], "s": ["f", "ps", "sts", "str", "stats", "sv", "ws", "ls", "z", "m", "spec", "rs", "t", "y", "gs", "ins", "ms", "sw", "r", "v", "sp", "sd", "c", "q", "string", "p", "ss", "ds", "sb", "si", "ats", "als", "ts", "qs", "js"], "k": ["dk", "z", "kg", "f", "K", "m", "kr", "kt", "uk", "kh", "a", "ka", "y", "t", "kl", "ikk", "ms", "ok", "kk", "r", "ke", "kid", "kar", "ket", "c", "mk", "ki", "q", "b", "g", "ak", "kn", "id", "ik", "kok", "p", "km", "kj", "ek", "kw", "it", "tk", "o", "u", "dec", "sk", "ia", "ko", "x", "ku"], "j": ["z", "str", "obj", "ion", "el", "jl", "m", "ja", "y", "t", "ck", "note", "fr", "jp", "ji", "ch", "v", "json", "ij", "job", "q", "b", "g", "jac", "ijk", "er", "ik", "next", "p", "bi", "br", "oj", "jo", "kj", "jas", "it", "jj", "jump", "aj", "J", "o", "uj", "dj", "li", "x", "bj", "js", "jc"], "l": ["z", "fl", "lit", "ol", "ld", "ls", "yl", "el", "le", "jl", "m", "lv", "kl", "len", "il", "lb", "v", "ul", "sl", "lu", "long", "ln", "lt", "b", "lc", "g", "tl", "lo", "p", "dl", "L", "lp", "pl", "hl", "lr", "al", "loc", "li", "left", "nl", "list", "ll", "ly"]}}
{"code": "MAX_A = 10**6 + 1\\nMAX_P = MAX_A // 2\\nis_prim = [i%2==1 for i in range(MAX_P)]\\nis_prim[1] = False; is_prim[2] = True\\nfor i in range(3, MAX_P):\\n    if not is_prim[i]: continue\\n    for j in range(i+i, MAX_P, i): is_prim[j] = False\\n\\ndef solve():\\n    C = [0] * MAX_A\\n    for a in A: C[a] += 1\\n    pairwise = True\\n    for p in [i for i in range(MAX_P) if is_prim[i]]:\\n        if sum(C[p::p]) > 1: pairwise = False\\n    if pairwise: return 'pairwise'\\n    from math import gcd\\n    g = 0\\n    for a in A: g = gcd(g, a)\\n    if g == 1: return 'setwise'\\n    return 'not'\\n\\nn = int(input())\\nA = [*map(int, input().split())]\\nprint(solve(), 'coprime')\\n", "target": "405", "substitutes": {"MAX_A": ["MAX2B", " MAX_N", " MAX_G", "KEY_P", "MAX_C", "KEY__A", "MAX__P", "KEY_A", "MAX__C", "MAX_B", "MAX2A", "KEY__B", "MAX__B", " MAX_C", "MAX__G", "MAX__A", "MAX_N", "KEY__P", "MAX_G", "MAX_R", "KEY_B", "MAX2P", " MAX_R"], "MAX_P": ["MAX_C", "MAX__TP", " MAX_J", "MAX_T", " MAX2J", "MAX2N", "MAX2P", "max_H", "MAX__P", " MAX_PU", "MAX__H", "max_TP", "MAX_PA", "MIN_P", " MAX_PA", "MAX___P", "MAX_N", "MIN_A", "MAX2J", "MAX_TP", " MAX2N", "MAX2A", "MAX2C", "MAX___A", "max_P", "MAX___PU", "MAX_H", " MAX_p", " MAX_N", "MIN_C", "MAX_J", "max_PA", "MAX_p", " MAX2P", "MAX2T", "MIN_T", "MAX___p", " MAX2A", "MAX_PU", "MAX__PA"], "is_prim": [" is_prime", "is___pro", "Is_num", "is_pers", "si_pro", "is__Prim", " is_Prim", "is_prime", "is___pub", "is2num", " is_represent", "is_orig", " is_pers", "bis___Prim", "si___prim", "is___Prim", "Is2num", "is_pro", "is_num", "si_prim", "bis___perm", "is_pres", "is_pr", "is2prof", "bis_pub", "is2prim", " is_pr", "Is_prof", "is_pub", "is__num", "si___Prim", "si___pres", "is2prime", "Is_Prim", "is2pers", "Is_prim", "Is2prof", "is___pres", "is_represent", "is2pro", "is__prim", "is___perm", "bis___prim", "Is2prim", "is__prof", "is_prof", "is_perm", "bis_perm", "is_Prim", "is2pres", "si_Prim", "is___prim", "si_pres", "bis___pub", " is_orig", "bis_prim", "si___pro", "is2Prim", "Is2Prim", "bis_Prim"], "i": ["f", "io", "ei", "ini", "zi", "m", "l", "y", "t", "ix", "ti", "ip", "ci", "jp", "k", "ji", "r", "point", "v", "gi", "ij", "c", "index", "h", "q", "phi", "b", "ie", "ind", "id", "di", "ik", "d", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "li", "I", "ia", "o", "u", "x", "iti", "iu", "im"], "j": ["z", "f", "jl", "m", "ja", "jit", "l", "y", "t", "jp", "k", "ji", "v", "ij", "h", "q", "b", "jac", "ind", "ijk", " ii", "d", "bi", "oj", "kj", "e", "it", "jj", "jump", "aj", "J", "o", "uj", "dj", "jc"], "C": ["Y", "Cod", "H", "X", "F", "R", "G", "W", "CR", "CNN", "Cs", "CM", "N", "M", "CA", "CN", "c", "CU", "CV", "Cu", "CD", "S", "D", "CT", "L", "CC", "Cal", "P", "You", "T", "Co", "Cache", "CCC", "V", "I", "B", "CS", "CB", "CP", "CG"], "a": ["f", "ba", "apa", "fa", "ap", "m", "ta", "ae", "ja", "ka", "l", "ha", "t", "y", "ga", "au", "s", "xa", "ip", "ca", "ach", "la", "at", "v", "pa", "wa", "c", "na", "ea", "b", "va", "ada", "da", "ao", "alpha", "oa", "\u00e4", "e", "ai", "sa", " ja", "po", "aa", "ra", "ena", "ac", "o", "ma", "sha", "u", "w", "ab", "x", "ar", "ana", "an", "aval"], "pairwise": [" pairative", "penative", "pairgate", "parwise", "airware", "pargate", "airgate", " pairgate", "airful", "penstream", "airative", "airary", " pairstream", "penful", "parful", "pairary", "pairose", "parary", "penwise", " pairful", "airstream", "pairware", "airwise", "parware", " pairware", "pairstream", "pairative", " pairose", " pairary", "parose", "airose", "pairful"], "p": ["op", "pol", "f", "z", "ph", "pr", "ap", "m", "l", "y", "t", "bp", "gp", "s", "pp", "ip", "point", "jp", "r", "k", "tp", "v", "sp", "pa", "c", "q", "b", "h", "pair", "page", "d", "power", "pi", "cp", "P", "e", "np", "pc", "o", "part", "u", "pid", "pn"], "g": ["gam", "f", "gm", "m", "l", "G", "t", "gs", "ga", "gp", "r", "gr", "v", "gi", "gu", "c", "h", "q", "b", "gg", "gc", "ge", "gt", "gz", "tg", "d", "go", "gain", "cfg", "ig", "it", "mg", "gb", "eg", "ac", "ic", "w", "u", "x", " G", "pg"], "n": ["z", "f", "nn", "m", "l", "t", "Ni", "N", "ns", "Na", "v", "na", "c", "ng", "sn", "cn", "nu", "nb", "num", "d", "gn", "np", "nan", "nc", "o", "w", "x", " N"], "A": ["Y", "K", "AI", "AA", "Ar", "H", "X", "F", "R", "G", "N", "M", "PA", "CA", "LA", "TA", "ACE", "Bar", "NA", "S", "E", "O", "As", "AU", "All", "Array", "AT", "D", "AF", "L", "Address", "GA", "AMP", "alpha", "An", "ICA", "At", "P", "T", "Ma", "J", "AP", "AB", "V", "Z", "Alpha", "B", "I", "ACT", "Ax", "AE"]}}
{"code": "n, m = map(int, input().split())\\nal = []\\nbl = []\\nfor i in range(n):\\n    a, b = map(int, input().split())\\n    al.append([a, b])\\nfor j in range(m):\\n    c, d = map(int, input().split())\\n    bl.append([c,d])\\n\\ndef check(a,b):\\n    x = a[0] - b[0]\\n    y = a[1] - b[1]\\n    if x < 0:\\n        x = -x\\n    if y < 0:\\n        y = -y\\n    return x + y\\n\\nfor a in al:\\n    min = 1000000000\\n    cnt = 1\\n    for b in bl:\\n        tmp = check(a,b)\\n        if tmp < min:\\n            ans = cnt\\n            min = tmp\\n        cnt += 1\\n    print(ans)", "target": "3", "substitutes": {"n": ["nn", "nia", "yn", "l", "nt", "t", "s", "N", "ns", "r", "mn", "v", "na", "sn", "h", "an", "nu", "nb", "num", "nv", "p", "ne", "net", "np", "nc", "o", "no", "nl"], "m": ["gm", "mc", "l", "sm", "ms", "M", "r", "mn", "v", "perm", "em", "mis", "g", "mod", "re", "dm", "rm", "p", "mun", "man", "mos", "mr", "ma", "o", "mm", "me", "mi", "fm", "cm"], "al": ["alls", "ag", "fal", "el", "ap", "Al", "l", "all", "ala", "af", "ax", "mal", "en", "AL", "tal", "alf", "cal", "ul", "pal", "bal", "dal", "isal", "atal", "real", "hal", "aler", "stal", "alph", "pl", "alt", "ald", "ad", "ac", "ell", "alid", "wal", "ab", "sal", "als", "alled", "ali", "ar", "am", "ial", "ally"], "bl": ["fl", "ba", "ib", "ld", "jl", "yn", "Bl", "be", "bd", "l", "nt", "bc", "abel", "bel", "pb", "bg", "lb", "lbs", "mil", "sl", "ble", "bm", "eb", "ml", "dl", "bt", "br", "obl", "lp", "pl", "bj", "buf", "bf", "bo", "ob", "bs", "ab", "abl", "bn", "nl", "BL", "ill", "ll"], "i": ["ini", "ir", "l", "ti", "ci", "k", "il", "v", "gi", "ij", "ie", "ind", "ik", "bi", "e", "ai", "it", "ic", "o", "li", "I", "ia", "im"], "a": ["ba", "ade", "ja", "be", "ka", "xa", "pa", "wa", "era", "admin", "area", "ao", "\u00e4", "ya", "ai", "ace", "ah", "ia", "ab", "eas", "apa", "ta", "\u00e1", "att", "this", "to", "na", "er", "aq", "aa", "art", " A", "part", "ach", "am", "apt", "ae", "l", "ga", "ed", "A", "la", "at", "ea", "ak", "va", "alpha", "app", "e", "sa", "aj", "ac", "ma", "aaa", "ova", "aff", "ap", "ha", "sta", "au", "ca", "aux", "ce", "aaaa", "oa", "act", "it", "ar", "an"], "b": ["f", "erb", "ba", "ib", "rb", "blue", "ben", "be", "l", "t", "bd", "bc", "bp", "back", "pb", "cb", "r", "fb", "bh", "db", "v", "h", "bas", "g", "wb", "nb", "orig", "p", "bi", "br", "app", "bf", "amb", "bin", "e", "sb", "bu", "it", "ai", "bis", "ob", "ub", "bs", "w", "o", "B", "ab", "bb", "bar", "base", "eb"], "j": ["z", "f", "el", "jl", "l", "bd", "bc", "k", "ch", "v", "co", "h", "q", "g", "je", "jac", "di", "bi", "col", "e", "ai", "jj", "bo", "J", "o", "cm", "jc"], "c": ["abc", "C", "cat", "cr", "cus", "cs", "bc", "cf", "ci", "cin", "ca", "rc", "cb", "co", "lc", "cc", "ct", "ce", "cp", "ec", "e", "cd", "dc", "fc", "ac", "tc", "cy", "cu", "cm"], "d": ["z", "add", "df", "red", "bd", "l", "dict", "dd", "r", "dt", "db", "v", "h", "dis", "nd", "D", "di", "du", "de", "do", "da", "ds", "e", "ad", "rd", "dra", "dr", "dat"], "x": ["z", "f", "yx", "X", "ux", "xy", "l", "ix", "xs", "xa", "ax", "xx", "xml", "xt", "dx", "wx", "index", "mx", "zx", "ex", "fx", "p", "rx", "xc", "e", "ox", "xe", "xi", "w", "px", "xf", "im", "xd", "tx"], "y": ["Y", "z", "sys", "yz", "ym", "ey", "icy", "yl", "yn", "ay", "my", "xy", "yu", "py", "t", "yer", "iy", "isy", "sy", "oy", "yy", "ty", "yt", "gy", "ys", "h", "ies", "yi", "ny", "fy", "ady", "ley", "ry", "ya", "ky", "dy", "uy", "ye", "axy", "yr", "cy", "vy", "yd", "sky", "ly"], "min": ["ps", "MIN", "rest", "max", "stat", "sum", "pr", "only", "s", "ms", "len", "mn", "un", "limit", "v", "lt", " mins", "start", " Min", "Min", "mod", "mp", "temp", "val", "test", "pre", "mem", "minimum", "eps", "just", "minute", "cmp", "beta", "span", "small", "ma", "first", "best", "set", "rel", "mini", "st", "mi", "mins", "mint", "lower", "init"], "cnt": ["ncount", " cout", "cst", "Ctx", "Cpt", "ntx", "Ccount", "tcpt", "tcount", "rnt", "CNT", "cNT", "Cct", "nNT", "ccount", "Count", "Cnt", "tcct", "tcnt", "ctx", "nout", "count", " cst", "Cout", " cNT", "nnt", "rpt", "rct", "cout", "Cst", "nst", "cct", "rount", " ccount", " ctx", "cpt"], "tmp": ["emp", "max", "obj", "times", "this", "t", "tt", "result", "etc", "cb", "err", "attr", "yy", "msg", "v", "sp", "perm", "timeout", "tar", "mk", "mut", "term", "ot", "start", "mp", "temp", "nb", "ind", "test", "ctx", "pre", "nv", "size", "p", "cp", "td", "xxxx", "cmp", "_", "tf", "np", "time", "txt", "tc", "abs", "mm", "cv", "new"], "ans": ["ens", "ps", "ls", "names", "nets", "flags", "cs", "amps", "xs", "iann", "ins", "ms", "os", "ants", "ns", "outs", "ons", "ann", "aus", "aps", "arts", "arms", "eds", "posts", "ids", "vs", "ANS", "ds", "uns", "offs", "locks", "ints", "actions", "nan", "ats", "vals", "mins", "an", "ks", "terms", "uploads"]}}
{"code": "import sys\\n\\n\\n# \\n\\ndef input():\\n    return sys.stdin.readline().rstrip()\\n\\n\\ndef main():\\n\\n    X =int(input())\\n    if X==1:\\n        print(\"NO\")\\n        exit()\\n    if 105 % X ==0:\\n        print(\"YES\")\\n    else:\\n        print(\"NO\")\\n\\n\\n\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "474", "substitutes": {}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\n\\nDEBUG = False\\n\\ndef read(t):\\n    return t(sys.stdin.readline().rstrip())\\n\\n\\ndef read_list(t, sep = \" \"):\\n    return [t(s) for s in sys.stdin.readline().rstrip().split(sep)]\\n\\n\\ndef dprint(*args, **kwargs):\\n    if DEBUG:\\n        print(*args, **kwargs)\\n    return\\n\\n\\ndef main():\\n    a, b = read_list(int)\\n    print(max([a + b, a - b, a * b]))\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "175", "substitutes": {}}
{"code": "n, m, d = map(int, input().split())\\nif d >= n:\\n  print(0)\\nelif d == 0:\\n  print((n * (m - 1) * 10000000 / (n ** 2)) / 10000000)\\nelse:\\n  print((2 * (n - d) * (m - 1) * 10000000 / (n ** 2)) / 10000000)\\n", "target": "572", "substitutes": {"n": ["z", "f", "nn", "out", "a", "l", "y", "nt", "t", "all", "number", "s", "N", "i", "M", "ns", "r", "k", "mn", "nm", "en", "v", "na", "c", "sn", "h", "b", "q", "g", "cn", "nu", "nb", "num", "size", "p", "dn", "j", "ne", "e", "net", "nc", "o", "w", "x", "ll"], "m": ["gm", "mc", "l", "y", "t", "ms", "M", "i", "mn", "r", "k", "v", "perm", "c", "bm", "mk", "pm", "h", "b", "mx", "g", "mp", "dm", "num", "mem", "p", "man", "j", "mt", "mat", "mr", "ma", "o", "mm", "me", "mi", "md"], "d": ["z", "f", "l", "dev", "t", "ed", "s", "dd", "i", "days", "r", "dt", "div", "v", "sd", "c", "h", "q", "b", "nd", "g", "dis", "id", "D", "dm", "num", "pd", "di", "p", "de", "da", "j", "ds", "e", "dh", "o", "w", "u", "x", "md", "fd"]}}
{"code": "n, k = map(int, input().split())\\n\\nans = 0\\nif k == 0:\\n  print (n**2)\\n  exit()\\nfor i in range(1,n+1):\\n  if i <= k:\\n    continue\\n  ans += max(i-k,0)*(n//i) + max(n%i-(k-1),0)\\nprint (ans)", "target": "671", "substitutes": {"n": ["z", "nn", "m", "l", "nt", "t", "number", "N", "len", "ns", "mn", "v", "na", "c", "ln", "sn", "q", "b", "h", "g", "an", "cn", "nu", "nb", "num", "d", "size", "p", "j", "pi", "ne", "gn", "np", "nan", "nc", "o", "w", "no", "nl", "x"], "k": ["dk", "kg", "K", "m", "kr", "kind", "kt", "uk", "kh", "ka", "t", "ck", "kl", "ikk", "ok", "kick", "kk", "ke", "kid", "v", "ket", "mk", "ki", "q", "kn", "unk", "ak", "wk", "ik", "kok", "km", "j", "kb", "kj", "ek", "kw", "tk", "sk", "ko", "ku", "ks", "ack"], "ans": ["ens", "aned", "mas", "AN", "oss", "ran", "anc", "pan", "rs", "gs", "amps", "anned", "iann", "ins", "anas", "ms", "aus", "ns", "ann", " Ans", "acs", "beans", "arts", "ians", "rans", "eds", "said", "grades", " means", "san", "ids", "ANS", "can", "lets", "nas", "anes", "mean", "ams", "ads", "ates", "ats", "anks", "anse", "an", "ks", "ants", "lan"], "i": ["io", "ini", "ri", "zi", "m", "l", "ix", "ti", "ip", "ci", "key", "\u0438", "ji", "ati", "gi", "v", "ij", "hi", "oi", "index", "ki", "q", "phi", "id", "di", "ik", "bi", "j", "pi", "fi", "qi", "ai", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "x", "ui", "mi", "iu", "im", "ski"]}}
{"code": "import sys\\ns2nn = lambda s: [int(c) for c in s.split(' ')]\\nss2nn = lambda ss: [int(s) for s in ss]\\nss2nnn = lambda ss: [s2nn(s) for s in ss]\\ni2s = lambda: sys.stdin.readline().rstrip()\\ni2n = lambda: int(i2s())\\ni2nn = lambda: s2nn(i2s())\\nii2ss = lambda n: [sys.stdin.readline().rstrip() for _ in range(n)]\\nii2sss = lambda n: [list(sys.stdin.readline().rstrip()) for _ in range(n)]\\nii2nn = lambda n: ss2nn(ii2ss(n))\\nii2nnn = lambda n: ss2nnn(ii2ss(n))\\n\\nMOD = int(1e+9) + 7\\n\\ndef comb(n, k):\\n    r = 1\\n    for i in range(n, max(n-k, k), -1):\\n        r *= i\\n    for i in range(1, min(n-k, k) + 1, 1):\\n        r //= i\\n    return r\\n\\nclass Comb:\\n    def __init__(self, MAX, MOD):\\n        MAX += 1\\n        fac = [0] * MAX\\n        finv = [0] * MAX\\n        inv = [0] * MAX\\n        fac[0] = fac[1] = 1\\n        finv[0] = finv[1] = 1\\n        inv[1] = 1\\n        for i in range(2, MAX):\\n            fac[i] = fac[i - 1] * i % MOD\\n            inv[i] = MOD - inv[MOD%i] * (MOD // i) % MOD\\n            finv[i] = finv[i - 1] * inv[i] % MOD\\n        self.fac = fac\\n        self.finv = finv\\n        self.MOD = MOD\\n    \\n    def comb(self, n, k):\\n        fac = self.fac\\n        finv = self.finv\\n        MOD = self.MOD\\n        if (n < k):\\n            return 0\\n        if (n < 0 or k < 0):\\n            return 0\\n        return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD\\n\\ndef main():\\n    # \u884c\u6570, \u5217\u6570, \u99d2\u6570\\n    N, M, K = i2nn()\\n    # \u914d\u7f6e\u30b3\u30b9\u30c8\u306e\u7dcf\u548c % MOD\\n\\n    # \u4f8b\uff09N, M, K = 2, 2, 2\\n    # \u99d2\u304c\u7f6e\u3051\u308b\u5834\u6240\u306f4\u7b87\u6240: N * M\\n    # \u99d2\u306e\u914d\u7f6e\u306f6\u901a\u308a: comb(4, 2) = comb(N*M, K)\\n    # K=2 \u306e\u5834\u5408\u306e\u30b3\u30b9\u30c8\\n    xcost = 0\\n    for i in range(1, M):\\n        # i\u3092x\u5ea7\u6a19\u306e\u5dee\u3068\u3059\u308b\\n        # x\u5ea7\u6a19\u306e\u307f\u306b\u6ce8\u76ee\u3057\u305f\u5834\u5408\u3001\u5dee\u304ci\u3068\u306a\u308b\u306e\u306f(M-i)\u901a\u308a\\n        #   M=4, i=1, => (1,2), (2,3), (3,4) = 3\u901a\u308a\\n        #   M=4, i=2, => (1,3), (2,4) = 2\u901a\u308a\\n        #   M=4, i=3, => (1,4) = 1\u901a\u308a\\n        # \u3055\u3089\u306by\u5ea7\u6a19\u306e\u7d44\u307f\u5408\u308f\u305b\u306f, \u5de6\u5074\u304cN\u901a\u308a, \u53f3\u5074\u304cN\u901a\u308a\\n        #   (1,2) \u306b\u3064\u3044\u3066 M=2 \u306e\u5834\u5408 ((1,1), (2,1)), ((1,1), (2,2)), ((1,2), (2,1)), ((1,2), (2,2))\\n        xcost = (xcost + i * (M-i) * (N*N)) % MOD\\n    ycost = 0\\n    for i in range(1, N):\\n        ycost = (ycost + i * (N-i) * (M*M)) % MOD\\n    cost = (xcost + ycost) % MOD\\n    # K=3 \u306e\u5834\u5408\u3001K=2 \u306e\u5834\u5408\u306e\u30b3\u30b9\u30c8\u3092 NM-2 \u500d\u3059\u308c\u3070\u3088\u3044\\n    # \u6c4e\u7528\u7684\u306b\u8003\u3048\u308b\u3068\u3001 K=2 \u306e\u5834\u5408\u306e\u30b3\u30b9\u30c8\u3092 comb(MN-2, K-2) \u500d\u3059\u308c\u3070\u3088\u3044\\n    #cost = (cost * comb(M*N-2, K-2)) % MOD\\n    cost = (cost * Comb(N*M-2, MOD).comb(N*M-2, K-2)) % MOD\\n    print(cost)\\n\\nmain()\\n", "target": "341", "substitutes": {"s2nn": ["stons", "os2nn", "stonn", "ostonn", "estonw", "s2ns", "s1nn", "sTonw", "ostoln", "s1ns", "estonn", "s2fn", "s2nl", "stonl", "estons", "s4nn", "estofn", " s2ns", "s4ns", "os2nl", "s1fn", "sTons", "stocn", " s1cn", " s2net", "es2fn", "suffysn", "s4sn", "s1nw", "s2cn", "suffynl", "s2net", "stofn", "suffynn", "stoln", "s2ln", "s1cn", " s1net", " s1nn", " s2cn", "s2nw", "s4cn", "stosn", "ostonl", "s4net", "s2sn", "os2ln", "es2nn", "s1net", "stonw", "es2ns", "sTonn", "stonet", "sTofn", "s4nl", " s1ns", "s4ln", "suffyln", "ostosn", "os2sn", "es2nw"], "c": ["z", "f", "sc", "m", "C", "cat", "cr", "a", "anc", "cs", "y", "se", "sac", "t", "cf", "con", "ns", "rc", "ch", "co", "es", "h", "b", "g", "css", "cn", "cc", "ct", "cl", "Sc", "cont", "cos", "p", "d", "ss", "col", "e", "uc", "conf", "nc", "ac", "x", "enc", "cm", "st"], "ss2nn": ["ds2nn", "ss162nl", "ss3nn", "ds2nw", "lstosync", "ss3nw", "ss3sn", "sstown", "ds2wn", "ss_sn", "ds3nw", "ds3sn", "lstonn", "ss2rn", "ss_wn", "ds3nn", "lstorn", "sstonw", "ss162nn", "ss2wn", "ss2sync", "ss162rn", "ss2sn", "ls2nl", "ls2nn", "ds2sn", "ss_nn", "ls2rn", "ss_nw", "ss2nw", "sstorn", "ss2nl", "sstonn", "sstosn", "ls2sync", "sstosync", "sstonl", "lstonl", "ss3wn", "ds3wn", "ss162sync"], "s": ["f", "sys", "stats", "str", "ps", "ws", "sts", "ls", "sv", "sc", "a", "cs", "rs", "t", "y", "se", "su", "ms", "ins", "os", "ns", "sw", "sp", "sd", "es", "sl", "hs", "ys", "sn", "b", "css", "ies", "S", "g", "p", "ss", "ds", "sa", "sb", "ses", "si", "bs", "sq", "w", "ats", "south", "us", "st", "ts", "js"], "ss2nnn": ["ss2innns", "ss4innn", "ss2snz", "ss2nsl", "ss4innN", "ss4nnN", "ss4nnnn", "ss2snns", "ss4innnn", "ss2wnns", "ss2wnn", "ss2wnN", "ss2nnl", "ss2nsz", "ss2innn", "ss2snnn", "ss4innns", "ss4nnl", "ss2nsn", "ss2nnns", "ss2innN", "ss4wnz", "ss2snN", "ss2snn", "ss2snl", "ss2nnN", "ss4wnl", "ss2nsns", "ss4nnz", "ss4wnns", "ss2wnl", "ss2nnz", "ss2innnn", "ss2nnnn", "ss4nnns", "ss2wnnn", "ss4nnn", "ss2wnz", "ss4wnn"], "i2s": ["ii2s", " i2ss", "ii2n", " i1i", "i2i", "i1i", " i1j", " i2i", "i2ss", "i1ns", "i36ss", "i2ns", "i8i", "i1n", "i4s", "i1j", "i8s", "i2j", "i4ss", " i1s", " i1ss", "i36n", "ii2ns", "i36in", "i2in", " i2j", "i4n", "i36s", "i4ns", "i8ss", "i8j", "i1ss", "i1in", "i1s", " i2in"], "i2n": ["i1ns", "i2ns", "i1n", "i4s", "i4np", " i4s", " i4ns", " i4n", " i4np", "i2np", "i4n", "i4ns", "itonp", " i2np", "itos", "i1s", " i2ns", "iton", "i1np", "itons"], "i2nn": ["ii4ns", "i4non", "ii4n", "i2non", "ii4nn", "i022non", "i3ns", "ii2n", "i3n", "i4nn", "ii2non", "i2ns", "i022ns", "ii4non", "i3nn", "i3non", "ii2ns", "i022n", "i022nn", "i4n", "i4ns"], "ii2ss": ["ii2s", "ii42sis", "ci8hess", "ii022ess", "ci8ess", "ii4nn", "slice42s", "ii42nn", "slice2sis", "ii42s", "i2ds", "ii8ls", "ii02nn", "iiTwonn", "ii4s", "i2ss", "slice42sis", "i4nn", "ci8ls", "ii4ds", "ci8ss", "ii2sis", "slice2ss", "slice2s", "ii022ss", "ii4ss", "i4s", "iiTwosis", "ci2ss", "slice2nn", "iiTwoss", "i4ss", "ii022hess", "ii02ds", "iiTwos", "ci2hess", "ii2ds", "ii022ls", "ii8hess", "slice42nn", "ci2ess", "ii2ess", "i4ds", "ii4sis", "slice42ss", "ci2ls", "ii02ss", "ii8ess", "ii2hess", "ii2ls", "ii8ss", "ii02s", "ii42ss"], "_": ["let", "pt", "____", "py", "t", "un", "__", "place", " __", "val", " time", "get", " the", "time", "___"], "ii2sss": ["ii4ssn", "ii2sws", "ii4SSn", "ii2ssd", "ii4SSns", "ii2ssns", "ii4ssd", "ii2wnn", "ii2swn", "ii2SSns", "ii4ssns", "ii2wnd", "ii2SSn", "ii2wnns", "ii4SSs", "ii2SSs", "ii2wns", "ii4sss", "ii2ssn", "ii2swd", "ii2SSd", "ii2swns", "ii4SSd"], "ii2nn": ["ii4ns", "ii4n", "ci2fn", "ci52n", "ii4nn", "ii2n", "ci52nn", "ii2fn", "ii52ns", "ii52fn", "ci52fn", "ii52nn", "ii4fn", "ci52ns", "ii3nn", "ii3n", "ii3ns", "ii2ns", "ii3fn", "ci2nn", "ci2n", "ci2ns", "ii52n"], "ii2nnn": ["ii2ynz", "ii_nnl", "ii2snn", "ii_snl", "ii2snz", "ii2innn", "ii2nnv", "ii2nnz", "ii_nnz", "ii2ynn", "ii_snv", "ii2innz", "ii2snv", "ii2innv", "ii_snz", "ii2ynv", "ii2innl", "ii2ynl", "ii2snl", "ii2nnl", "ii_nnv", "ii_snn", "ii_nnn"], "MOD": ["METHOD", "RA", "MAC", "MT", "MED", "MAT", "MAG", "REM", "ID", "RE", "MM", "SPEC", "FIL", "DR", "UN", "JUST", "RES", "LOD", "COM", "MW", "Mods", "LV", "K", "LIB", "LOG", "M", "NR", "FIN", "FUN", "mod", "OK", "DIR", "IND", "FN", "LB", "CC", "RED", "IM", "REG", "MS", "JR", "LOC", "NAME", "DEC", "LL", "MIN", "PK", "UL", "ROM", "DJ", "DEF", "FORM", "Max", "OD", "func", "L", "IT", "TD", "Mod", "AD", "STAT", "MAN", "Mode", "NUM", "FILE", "DEBUG", "MD", "RR", "TR", "UPDATE", "FM", "VAL", "R", "FD", "MR", "N", "MI", "MN", "DATA", "MC", "SIZE", "DEV", "RO", "VER", "DX", "TYPE", "mult", "TM", "MODE", "RM", "I", "CLASS"], "n": ["max", "names", "arn", "name", "note", "un", "v", "g", "wn", "tn", "num", "orn", "no", "nl", "non", "x", "ll", "new", "z", "f", "nn", "el", "m", "node", "t", "number", "nm", "na", "cn", "nu", "kn", "nb", "dn", "gn", "nan", "nc", "o", "ion", "yn", "l", "nt", "nr", "fn", "en", "b", "rn", "size", "p", "j", "e", "nor", "w", "on", "nw", "min", "out", "a", "y", "all", "N", "ns", "mn", "ons", "ng", "sn", "ln", "d", "ne", "np", "pn", "an"], "k": ["dk", "z", "f", "max", "K", "m", "kr", "kind", "kh", "spec", "ka", "l", "y", "t", "ck", "kl", "ikk", "ok", "kk", "kan", "ke", "key", "v", "mk", "ki", "q", "g", "ak", "kn", "ijk", "wk", "id", "ik", "p", "km", "j", "kj", "kw", "tk", "rank", "o", "u", "w", "sk", "ko", "x", "ku", "ks"], "r": ["z", "f", "rb", "rate", "m", "rr", "rg", "sr", "cr", "a", "ir", "range", "R", "l", "rs", "t", "nr", "result", "rc", "res", "err", "v", "h", "q", "g", "pair", "er", "re", "d", "p", "radius", "j", "ro", "e", "it", "lr", "right", "var", "rd", "mr", "w", "u", "dr", "rat", "rar", "ar", "Rat"], "i": ["z", "f", "io", "ini", "ri", "zi", "m", "cli", "ir", "a", "l", "y", "t", "ix", "ti", "info", "ip", "ci", "il", "ji", "\u0438", "ati", "gi", "v", "ij", "hi", "h", "phi", "b", "mod", "id", "di", "ik", "d", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "I", "li", "ia", "u", "me", "x", "ui", "mi", "iu", "im"], "self": ["report", "clean", "spec", "other", "dev", "parent", "full", "close", "Self", "expr", "attr", "wrapper", "sw", "Object", "errors", "h", "ref", "network", "links", "My", "cmp", "rem", "response", "Test", "x", "Big", "also", "new", "objects", "obj", "python", "params", "node", "pkg", "this", "se", "result", "pp", "shape", "final", "env", "output", "ren", "replace", "cl", "object", "print", "me", "year", "view", "proc", "ae", "rs", "raw", "resp", "write", "user", "next", "p", "app", "rw", "e", "results", "subject", "right", "cache", "w", "sh", "Me", "HK", "partial", "tmp", "my", "py", "all", "you", "err", "res", "exc", "ln", "pair", "mp", "vs", "local", "mix", "np", "review", "mr", "Writer", "instance", "rel"], "MAX": ["MIN", "TR", "max", "K", "WIND", "INTER", "ALL", "GEN", "RA", "MAC", "X", "MX", "Maximum", "R", "MT", "MR", "N", "M", "CAP", "NR", "MC", "MED", "SIZE", "MAT", "Max", "MD", "MAG", "TIME", "REM", "ANY", "RE", "VER", "ND", "MAP", "LIN", "SPEC", "FN", "CAN", "TM", "LOCK", "ACTION", "Mod", "maximum", "MA", "AD", "IM", "RES", "HEAD", "MODE", "MAN", "CENT", "KEY", "RM", "OUT", "NUM", "PER", "TER", "AST", "MK", "CLASS", "VERSION"], "fac": ["mu", "f", "gam", "fat", "feat", "pac", "phal", "stat", "off", "util", "grid", "eff", "prop", "acc", "conn", "cf", "con", "fr", "fact", "attr", "perm", "co", "fil", "prof", "factor", "index", "fo", "mod", "jac", "unc", "lam", "fx", "auc", "fy", "cap", "mult", "func", "cur", "power", "cos", "frac", "gain", "agg", "pl", "act", "form", "uf", "vol", "bu", "fam", "Fac", "const", "sit", "var", "offs", "fc", "conf", "ac", "coord", "cum", "cu", "coin", "sav", "fun", "dat", "fd"], "finv": ["desvector", "finsv", "enver", "delvi", "parf", "denvt", "rafver", "filv", "finvin", "Finvi", "ranvs", "connsv", "synvin", "connv", "finov", "Finv", "lnc", "fnvc", "parvr", "ranvr", "tanv", "connvs", "fnvin", "delV", "fensv", " finvs", "finvc", "finver", "frever", "encvar", "fdV", "fenv", "env", "denvi", "finvar", "ranvin", "lnv", "fnov", "finj", "desV", "fdv", "desf", "desvr", "fdf", " finvector", "desvs", "FINc", "delj", "fnvi", "ranv", "ranf", "denvr", "fenvs", "rafv", "finvs", "encvi", "tanvi", "denf", "ranvt", "filvector", "fenvin", "synv", "filvs", "denver", "fdvr", "fnc", "ranvc", "envar", "finvt", "encver", "fnj", "envt", "finx", "finV", "tanver", "Finvs", "finvr", "finf", "parv", "lnov", "fnV", "sdvi", "FINov", "Finend", "envi", "parV", "frev", "fnv", "fnsv", "envr", "finvi", "finvector", "rafx", "FINv", "finend", "rafvr", "frej", " finvi", "desvi", "fdend", "sdv", "denx", "encv", "freV", "synvs", "delv", "denv", "sdvar", "FINV", "finc", "frevr", "filvi", "tanf", "fdvi", "frex", " finend", "fdvs", "sdver", "synvc", "enf", "fnvs", "connvin", "lnV", "frevi", "desv"], "inv": ["mu", "vec", "f", "z", "sing", "inventory", "conv", "iq", "unique", "eff", "order", "nr", "ms", "ins", "adj", "err", "res", "lim", "v", "ij", "vin", "ln", "q", "Inv", "nb", "wr", "ind", "iv", "aux", "rev", "eq", "bi", "av", "bin", "vol", "inc", "addr", "pdf", "var", "fin", "ii", "cum", "w", "sq", "iter", "rec", "rel", "reverse", "norm", "ev", "inst", "ll", "js", "init"]}}
{"code": "def main():\\n  s = input()\\n  if len(s)%2==0:\\n    s=s[:len(s)-2]\\n  else:\\n    s=s[:len(s)-1]\\n  while True:\\n    if(s[0:int(len(s)/2)]==s[int(len(s)/2):len(s)]):\\n      print(len(s))\\n      break\\n    s=s[:len(s)-2]\\n\\nmain()", "target": "696", "substitutes": {"s": ["stats", "ties", "spec", "cs", "full", "ins", "strings", "v", "hs", "h", "g", "bits", "eps", "less", "parts", "sb", "its", "ses", "bis", "save", "south", "ts", "js", "z", "f", "sys", "sts", "ws", "m", "t", "xs", "ms", "os", "string", "ss", "ds", "self", "n", "abs", "us", "str", "sv", "ls", "src", "l", "rs", "gs", "i", "r", "ends", "sl", "c", "b", "csv", "p", "past", "ims", "w", "tes", "qs", "ps", "a", "sis", "y", "say", "ns", "es", "S", "bs", "sq", "ats"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nN, K = [int(item) for item in input().split()]\\nA = [int(item) for item in input().split()]\\n\\n\\ndef make_divisors(n):\\n    divisors = []\\n    for i in range(1, int(n**0.5) + 1):\\n        if n % i == 0:\\n            divisors.append(i)\\n            if i != n // i:\\n                divisors.append(n // i)\\n\\n    # divisors.sort()\\n    return divisors\\n\\n\\nd_cand = make_divisors(sum(A))\\nd_cand.sort()\\nd_cand.reverse()\\n\\nfor d in d_cand:\\n    r = [a % d for a in A]\\n    rp_sum = sum(r)\\n    rm_sum = 0\\n    if rp_sum % d != 0:\\n        continue\\n    r.sort()\\n\\n    for i in range(N):\\n        # index i \u307e\u3067 r-, i+1\u304b\u3089 r+\\n        rp_sum -= r[i]\\n        rm_sum += r[i]\\n\\n        n_min = max(0, -(rm_sum + rp_sum) / d + (N - i - 1))\\n        n_max = (K - rm_sum) / d\\n        if n_min <= n_max and (n_min % 1 == 0 or n_max % 1 == 0 or int(n_min) != int(n_max)):\\n            print(d)\\n            break\\n    else:\\n        continue\\n    break\\n", "target": "764", "substitutes": {"input": ["active", "str", "out", "utils", "reader", "util", "cat", " inspect", " Input", "format", "fn", "raw", "output", "request", "buffer", "pull", "length", "empty", "upload", "index", "q", "enum", "csv", "Input", "select", "ctx", "config", "hidden", "read", "next", "join", "form", "get", "it", "int", "each", "feed", "sequence", "items", "first", "print", "list", " read", "put", "prefix", "data", "text", "init"], "N": ["Y", "C", "X", "R", "G", "NB", "M", "NL", "S", "E", "O", "D", "NS", "L", "P", "Q", "T", "J", "Z", "V", "I", "B", "Ns", "NC"], "K": ["KA", "PK", "H", "C", "X", "R", "G", "W", "M", "k", "KB", "KI", "NP", "KS", "U", "S", "km", "P", "Q", "KE", "T", "J", "Z", "V", "I", "B", "ks"], "item": ["hop", "offset", "Item", "member", "line", "m", "unknown", "node", "other", "t", "name", "number", "ix", "row", "case", "result", "key", "ip", "r", "k", "value", "msg", "v", "tag", "index", "term", "q", "entry", "val", "id", "option", "num", "p", "slot", "word", "it", "int", "integer", "event", "time", "hit", "items", "instance", "element", "iter", "x", "prefix", "data", "unit", "article", "text"], "A": ["Y", "AA", "H", "C", "X", "a", "R", "G", "W", "M", "BA", "S", "E", "O", "As", "D", "An", "P", "T", "AS", "J", "AB", "Z", "V", "I", "B"], "n": ["z", "f", "nn", "nia", "m", "ni", "l", "nt", "t", "fn", "ns", "r", "k", "mn", "nm", "v", "na", "c", "ln", "sn", "h", "b", "q", "g", "an", "cn", "nu", "nb", "num", "d", "p", "dn", "j", "ne", "inn", "nor", "gn", "np", "nan", "nc", "o", "u", "x", "norm", "ll"], "divisors": ["divilor", " divilores", "divistors", "divipORS", " divilions", "divitor", "divilions", "divisORS", " divistores", " divisor", "divilories", "divipors", "divilors", "divilores", " divistors", "divipores", " divilors", "divisor", " divilor", "divistor", "divitores", " divilORS", " divisories", "divitors", " divisORS", "divistores", "divensores", "divisories", "divotors", "divisores", " divilories", "divotions", "divisions", " divisores", "divotories", "divilORS", "divipions", " divistions", "divotores", "divitories", " divistor", "divensORS", "divensors", " divisions", "divensions", "divistions", "divotor"], "i": ["z", "f", "io", "ini", "ei", "ri", "zi", "m", "ni", "l", "y", "t", "ti", "ci", "k", "gi", "v", "ij", "c", "oi", "index", "ki", "q", "phi", "yi", "di", "ik", "d", "p", "bi", "j", "pi", "fi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "li", "I", "o", "iter", "u", "iri", "x", "mi", "iu", "im"]}}
{"code": "a, b = map(str, input().split())\\nans = \"No\"\\nkey = int(a+b)\\nfor i in range(1000):\\n    if i**2 == key:\\n        ans =\"Yes\"\\n        break\\nprint(ans)", "target": "271", "substitutes": {"a": ["f", "ba", "ae", "l", "sta", "au", "s", "ed", "A", "ca", "r", "at", "la", "na", "c", "ea", "an", "era", "g", "admin", "d", "da", "alpha", "act", "e", "sa", "ata", "aa", "up", "al", "n", "ac", "ma", "u", "ia", "ab", "eas", "x", "am", "aff"], "b": ["f", "rb", "ib", "be", "l", "y", "t", "bc", "s", "by", "cb", "fb", "r", "db", "v", "c", "g", "nb", "d", "bi", "j", "e", "sb", "beta", "gb", "bis", "n", "ob", "o", "bs", "B", "ab", "bb", "base", "eb"], "ans": ["ens", "wan", "oss", "ran", "ean", "aults", "rs", "amps", "ins", "anas", "ars", "aus", "ns", "ons", "ann", "utters", "aps", "aos", "arts", "rets", "ents", "angs", "arms", "rans", "ys", "said", "eds", "ANS", "ots", "man", "leans", "lets", "helps", "offs", "ams", "mos", "ras", "ats", "ros", "anks", "an", "ks", "ants", "jas", "lan"], "key": ["type", "f", "ey", "cond", "my", "y", "name", "case", "by", "switch", "k", "ke", "ch", "ver", "value", "check", "lock", "index", "val", "code", "ie", "test", "id", "change", "char", "Key", "next", "bi", "j", "ek", "e", "ai", "int", "conf", "KEY", "keys", "set", "stop", "x", "shift"], "i": ["ini", "zi", "m", "kh", "y", "ti", "\u0438", "ci", "ji", "gi", "v", "oi", "ki", "q", "phi", "ami", "yi", "di", "bi", "j", "pi", "qi", "ai", "xi", "si", "n", "ic", "o", "li", "I", "x", "mi", "im", "ski"]}}
{"code": "# from math import factorial\\nfrom sys import exit\\nn,m,k = map(int, input().split())\\nif m == 1:\\n    if k == n-1:\\n        print(1)\\n    else:\\n        print(0)\\n    exit()\\nMOD = 998244353\\n\\nans = tmp = (m * (m-1) ** (n-1)) % MOD\\n\\nfor i in range(k):\\n    tmp *= (n-1-i)\\n    tmp %= MOD\\n    tmp *= pow((m-1) * (i+1), -1, MOD)\\n    ans += tmp\\n    ans %= MOD\\n\\nprint(ans)", "target": "375", "substitutes": {}}
{"code": "import sys\\ninput = sys.stdin.buffer.readline\\nsys.setrecursionlimit(10 ** 7)\\n\\nN, M = map(int, input().split())\\ncnt = [0] * (N + 1)\\nfor _ in range(M):\\n    a, b = map(int, input().split())\\n    cnt[a] ^= 1\\n    cnt[b] ^= 1\\n\\nif all(x == 0 for x in cnt):\\n    print(\"YES\")\\nelse:\\n    print(\"NO\")", "target": "486", "substitutes": {"input": ["active", "str", "out", "reader", "util", "label", " Input", "println", "sample", "step", "fn", "raw", "output", "request", "buffer", "filter", "url", "history", "think", "pull", "q", "insert", "csv", "ref", "Input", "string", "select", "paste", "cmd", "pattern", "context", "hidden", "read", "source", "config", "next", "command", "new", "form", "get", "inc", "it", "int", "current", "temp", "txt", "focus", "feed", "print", "exec", "list", "update", "data", "text", "init"], "N": ["Y", "Num", "H", "C", "X", "F", "R", "NB", "NI", "NR", "A", "NA", "S", "ND", "O", "NT", "D", "NS", "NM", "L", "P", "Q", "T", "n", "V", "I", "B", "NUM", "NC", "Ns", "NO", "NN", "NH"], "M": ["Y", "K", "m", "C", "MP", "F", "MX", "R", "PM", "G", "MT", "MR", "MI", "A", "MN", "MC", "MM", "S", "D", "L", "NM", "JM", "P", "IM", "MS", "T", "MAN", "ME", "J", "DM", "V", "I", "B", "MU"], "cnt": ["ncount", "acount", "xcnt", "xcct", "acnt", "cnc", "ctnc", "Ccount", "tcNT", "cth", "CNT", "acct", "Cnc", "acNT", " cth", "cNT", "tcnc", "Cct", "ccount", "Count", "Cnt", "ncNT", "rcnc", "tcnt", "rcnt", "xcnc", "count", "rcNT", "ctnt", "xcNT", "ctct", " cNT", "ncnt", "Cth", "rcth", " cnc", "cct", " cct", "tccount", "ctNT", "ncct", " ccount"], "_": ["m", "k", " j", " __", " v", " p", " e", " c", " l", "n", " g"], "a": ["ba", "apa", "ae", "\u00e1", "l", "ga", "s", "af", "ax", "A", "r", "ca", "at", "la", "c", "ea", "g", "air", "da", "ao", "app", "\u00e4", "e", "sa", "ai", "aq", "aa", "ew", "aj", "ac", "ma", "ia", "ab", "aaa", "ach", "an", "aff"], "b": ["z", "f", "rb", "ba", "ib", "m", "blue", "be", "l", "y", "t", "bc", "s", "i", "xb", "cb", "fb", "v", "db", "c", "g", "nb", "d", "br", "abb", "j", "e", "sb", "bis", "n", "ob", "bs", "B", "ab", "bb", "eb"], "x": ["z", "f", "xes", "xp", "X", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "i", "xx", "ax", "xb", "k", "v", "xt", "dx", "wx", "q", "mx", "ex", "fx", "any", "rx", "xc", "e", "xe", "xi", "w", "xf", "xd", "tx"]}}
{"code": "N , K = map(int , input().split())\\nans = 0\\nif K == 0:\\n    print(N * N)\\n    exit(0)\\nfor b in range(1, N + 1):\\n    ans += int(N / b) * max(0,b - K) + max(N % b - K + 1 ,0)\\nprint(ans)", "target": "671", "substitutes": {"N": ["Y", "Num", "NE", "H", "C", "X", "AN", "F", "R", "Ni", "CNN", "W", "NB", "G", "M", "NR", "CN", "MN", "A", "NA", "S", "E", "ND", "O", "NT", "D", "NS", "FN", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "Note", "I", "B", "Ns", "NUM", "NC", "NO", "NN", "NH"], "K": ["Y", "HK", "KA", "FK", "PK", "H", "C", "X", "AN", "F", "KK", "R", "SK", "G", "NB", "M", "k", "KB", "KR", "BC", "IK", "KI", "Mask", "KS", "S", "E", "NK", "D", "UK", "L", "TN", "DK", "P", "Q", "KE", "T", "J", "Z", "V", "I", "B", "AK"], "ans": ["ens", "anon", "aned", "AN", "oss", "ran", "ean", "anc", "pan", "rs", "amps", "anned", "iann", "s", "ms", "anas", "ins", "aus", "ns", "ars", "ann", " Ans", "acs", "aos", "arts", "rans", "eds", "yes", " means", "san", "tan", "ANS", "can", "man", "An", "nas", "\u00e1n", "anes", "mean", "ams", "ats", "anks", "an", "ks", "ants", "lan"], "b": ["z", "f", "bat", "ib", "a", "be", "l", "y", "t", "bc", "bp", "NB", "i", "bg", "cb", "bh", "k", "BC", "BA", "BI", "v", "db", "r", "c", "bound", "h", "g", "nb", "num", "d", "p", "bi", "br", "j", "bf", "bin", "bool", "sb", "it", "bo", "batch", "n", "ob", "V", "bs", "u", "w", "B", "I", "bn", "BM", "x", " B", "bb", "body", "base", "eb"]}}
{"code": "# E - Colorful Hats 2\\nMOD = 10**9+7\\nN = int(input())\\nA = list(map(int,input().split()))\\ncount = [0]*N+[3]\\nused = [0]*(N+1)\\nans = 1\\nfor x in A:\\n    ans = (ans*(count[x-1]-used[x-1]))%MOD\\n    count[x] += 1\\n    used[x-1] += 1\\nprint(ans)", "target": "560", "substitutes": {}}
{"code": "def main():\\n    n = int(input())\\n    a_list = list(map(int, input().split()))\\n    num_list = [0] * n  # \u5404\u756a\u53f7\u304c\u66f8\u304b\u308c\u305f\u30dc\u30fc\u30eb\u304c\u4f55\u500b\u3042\u308b\u304b\\n    method_list = [0] * n  # \u540c\u3058\u756a\u53f7\u304c\u66f8\u304b\u308c\u305f\u7570\u306a\u308b2\u3064\u306e\u30dc\u30fc\u30eb\u3092\u9078\u3076\u65b9\u6cd5\\n\\n    for a in a_list:\\n        num_list[a - 1] += 1\\n\\n    for i in range(n):\\n        b = num_list[i]\\n        if b >= 2:\\n            method_list[i] = b * (b - 1) // 2\\n\\n    total_method = sum(method_list)\\n\\n    for k in range(n):\\n        c = a_list[k]  # k\u756a\u76ee\u306e\u30dc\u30fc\u30eb\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u6570\u5b57\\n        ans = total_method - method_list[c - 1]\\n        d = num_list[c - 1]\\n        if d >= 3:\\n            e = (d - 1) * (d - 2) // 2\\n        else:\\n            e = 0\\n        ans += e\\n        print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "247", "substitutes": {"n": ["z", "nn", "m", "a", "l", "nt", "t", "number", "nr", "N", "i", "ns", "mn", "k", "v", "na", "c", "ln", "sn", "q", "b", "an", "cn", "nu", "nb", "num", "d", "p", "j", "np", "nc", "no", "nl", "x", "count"], "a_list": ["a_name", "a_pair", "datackpair", "datackname", "acklist", "datacklists", "data_name", "ackname", "ackpair", "data_list", "data_lists", "data_pair", "a_lists", "datacklist", "acklists"], "num_list": ["a_num", "num_st", "num_set", "a_set", "a_st", "num_num"]}}
{"code": "import sys\\nread = sys.stdin.read\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\n\\ndef main():\\n    N = int(readline())\\n\\n    K = 0\\n    for i in range(1,10**3):\\n        if i * (i-1) // 2 == N:\\n            K = i\\n            break\\n\\n    if K == 0:\\n        print(\"No\")\\n        exit()\\n    \\n    S = [[0] * (K-1) for _ in range(K-1)]\\n\\n    a = 1\\n    for i in range(K-1):\\n        for j in range(i+1):\\n            S[i][j] = a\\n            S[j][i] = a\\n            a += 1\\n\\n    ans = []\\n    for s in S:\\n        ans.append(\"{} {}\".format(K-1, \" \".join(map(str, s))))\\n\\n\\n    tri = [S[i][i] for i in range(K-1)]\\n    ans.append(\"{} {}\".format(K-1, \" \".join(map(str, tri))))\\n\\n    print(\"Yes\")\\n    print(K)\\n\\n    print(\"\\n\".join(ans))\\n\\n    \\nif __name__ == \"__main__\":\\n    main()\\n", "target": "502", "substitutes": {"read": ["rand", "f", "READ", " READ", "str", "stream", "reader", "load", "std", "find", "hold", "readable", "reads", "r", "input", "check", "open", "write", "length", "like", " write", "test", "default", "p", "rx", "Read", "eng", "ro", "trans", "ead", "get", "run", "od", " bread", "rid", "each", "txt", "rd", " reads", "feed", "first", " Read", "text"], "readline": ["getLine", " readfile", "throughlines", "loadread", "loadline", "throughLine", "loadlin", " readlin", "Readline", "getread", "Readlin", "readLine", "playlines", "playlin", "readstring", "readlin", "getline", "readread", "loadlines", "stdline", "stdlin", "playfile", "throughread", "playline", "Readstring", "stdlines", "stdstring", "throughline", "loadfile", "getlines", "loadLine", " readstring", "readfile", "Readlines"], "readlines": [" readwords", "readerline", "writelines", "scanwords", "Readline", "readpoints", "writeline", "scanline", "Readelines", " readelines", "readelines", "readerines", "scanlines", "readerelines", "writepoints", "Readines", "readwords", "readines", " readines", "writewords", "readerlines", "scanpoints", " readpoints", "Readlines"], "N": ["Y", "Num", "C", "F", "R", "Ni", "G", "NB", "NI", "M", "NR", "A", "NA", "O", "NT", "D", "SN", "NS", "L", "NM", "TN", "No", "P", "Q", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NH"], "K": ["KA", "Disk", "X", "AN", "Now", "SK", "CNN", "Mask", "KS", "NK", "Can", "UK", "Keep", "CP", "AK", "Context", "KN", "FK", "G", "Check", "Kevin", "M", "KR", "Length", "NA", "OK", "VK", "Chart", "P", "Q", "Maybe", "Sk", "KEY", "Z", "MK", "Y", "He", "PK", "KT", "ANK", "Rem", "Han", "A", "k", "Kent", "Ko", "KING", "L", "TN", "KE", "CCC", "V", "KC", "Kind", "Log", "ks", "HK", "H", "C", "KK", "R", "Ka", "BC", "MN", "Head", "KI", "Key", "Blake", "T", "J", "The", "I", "B"], "i": ["z", "ini", "ib", "ri", "zi", "m", "l", "y", "Ni", "t", "ix", "ti", "ip", "ci", "k", "ji", "gi", "v", "ij", "c", "index", "ki", "q", "phi", "h", "yi", "ie", "ind", "id", "di", "ik", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "u", "iri", "x", "iti", "mi", "iu", "im"], "S": ["Y", "Sample", "BS", "SI", "Sl", "Si", "H", "C", "SS", "X", "GES", "R", "SL", "G", "PS", "SB", "JS", "M", "A", "RS", "E", "O", "SR", "DS", "NS", "SU", "System", "SO", "L", "SP", "P", "TS", "ES", "SH", "T", "J", "Z", "SE", "V", "I", "B", "CS", "GS", "Settings", "SA", "States", "Set"], "_": ["ion", " vi", "ite", "ix", "name", "ip", "il", "ji", " u", " __", " p", "ity", " e", " l", " I", " the", "it", " x", "J", "I", " di", " mi", "ation"], "a": ["z", "f", "fa", "m", "ae", "ta", "all", "t", "sta", "to", "au", "ga", "xa", "A", "r", "ca", "at", "v", "pa", "na", "c", "ea", "an", "b", "p", "alpha", "ao", "act", "oa", "e", "isa", "sa", "ai", "aa", "ac", "art", "o", "n", "w", "u", "ia", "ma", "ab", "x", "am"], "j": ["z", "f", "obj", "m", "ja", "l", "y", "t", "key", "jp", "k", "ji", "r", "v", "ij", "h", "q", "b", "g", "ind", "p", "bi", "oj", "kj", "it", "jj", "jump", "ii", "J", "si", "n", "o", "uj", "dj", "li", "x", "bj"], "ans": ["ens", "lines", "names", "aned", "AN", "ran", "rs", "amps", "os", "anas", "ins", "aus", "ons", "ns", "outs", "ann", "ars", "ms", "aos", "arts", "beans", "na", "ents", "ians", "arms", "angs", "rans", "ays", "ands", "said", "posts", "ations", "yes", " means", "san", "rets", "works", "ANS", "leans", "lets", "uns", "helps", "offs", "anes", "ams", "ads", "ras", "ates", "ats", "us", "ros", "anks", "an", "ks", "ants"], "s": ["z", "ps", "sts", "sv", "ls", "obj", "fs", "sis", "rs", "t", "se", "gs", "xs", "y", "os", "ins", "sec", "ns", "sw", "single", "sl", "es", "b", "eds", "g", "p", "ss", "ds", "self", "sa", "sb", "ses", "si", "sq", "iss", "set", "ats", "st", "ts", "js"], "tri": ["tu", "TR", "feat", "Tri", "ri", "ties", "tm", "cci", "dev", "ti", "ris", "rect", "RI", "maybe", "hi", "rit", "tie", "di", " Tri", "bi", "rx", "tre", "trial", "mt", "com", "tr", "ra", "reci", "cu", "mini", "mid", "tty", "trip", "prime", "rt", "tx", "poly"]}}
{"code": "import numpy as np\\n\\nn = int(input())\\nps = list(map(float, input().split()))\\n\\ndp = [np.zeros(n + 1) for _ in range(n)]\\n\\nfor i, p in enumerate(ps):\\n    if i == 0:\\n        dp[i][0] = 1-p\\n        dp[i][1] = p\\n    else:\\n        dp[i][0] = dp[i-1][0] * (1-p)\\n        dp[i][1:i+1] = dp[i-1][:i] * p + dp[i-1][1:i+1] * (1-p)\\n        dp[i][i+1] = dp[i-1][i] * p\\n\\nl = dp[-1]\\n\\nprint(l[len(l)//2:].sum())\\n", "target": "437", "substitutes": {"n": ["nn", "m", "a", "conn", "nt", "t", "number", "nr", "s", "N", "len", "ns", "mn", "r", "v", "na", "c", "ln", "sn", "cn", "nu", "nb", "num", "d", "size", "dn", "j", "network", "pi", "ne", "net", "gn", "np", "nan", "nc", "nl", "x", "count"], "ps": ["sts", "ples", "ips", "plays", "places", "pins", "rs", "PS", "amps", "gs", "pos", "s", "ms", "pp", "ports", "os", "ns", "aps", "points", "sp", "pers", "mp", "pd", "eps", "ups", "ds", "pl", "fps", "pse", "its", "np", "pps", "bps", "pes", "ats", "ros", "pn", "Ps"], "dp": ["dk", "deb", "adr", "desc", "decl", "bsp", "df", "pkg", "dos", "wd", "drop", "ga", "gp", "pb", "dro", "pp", "dd", "pas", "jp", "tp", "dt", "dim", "ssl", "db", "pipe", "vp", "dq", "pm", "fp", "imp", "csv", "deep", "dm", "pd", "d", "dl", "dep", "do", "ds", "cp", "lp", "dial", "cd", "dc", "np", "lr", "DP", "dh", "bps", "delay", "dj", "dr", "wp", "multi", "hp", "dat"], "_": [" name", " un", "nt", "name", "ix", " which", " j", " __", " e", " z", " r", " you", " x", " k", "I", " pre", "x", " g"], "i": ["f", "z", "io", "ini", "iso", "ri", "zi", "m", "uri", "cli", "a", "ir", "y", "t", "name", "ix", "ti", "info", "ip", "ci", "\u0438", "ji", "at", "gi", "v", "status", "ij", "ori", "index", "hi", "ki", "q", "phi", "g", "yi", "ind", "id", "di", "ik", "pre", "size", "bi", "multi", "j", "pi", "fi", "ai", "it", "int", "ii", "xi", "si", "iri", "o", "batch", "li", "I", "iter", "ic", "ia", "me", "x", "ui", "mi", "iu", "im", "init"], "p": ["op", "f", "ph", "pt", "pr", "ap", "m", "pu", "a", "par", "rep", "pkg", "t", "y", "gp", "pb", "pp", "ip", "jp", "tp", "r", "v", "sp", "pa", "c", "pm", "q", "post", "h", "fp", "pair", "b", "pre", "d", "pd", "power", "j", "cp", "pi", "pl", "ping", "lp", "P", "e", "np", "pc", "u", "part", "w", "wp", "pn", "pro", "pg"], "l": ["z", "ls", "el", "isl", "m", "bl", "lv", "t", "lin", "lis", "kl", "s", "len", "r", "il", "lb", "la", "v", "sl", "c", "long", "ln", "h", "lc", "g", "tl", "lo", "ml", "d", "dl", "L", "lp", "pl", "lr", "o", "li", "left", "dL", "nl", "list", "rl", "ll"]}}
{"code": "X = input()\\n\\nprint('YES' if X in '753' else 'NO')", "target": "474", "substitutes": {"X": ["Y", "UX", "K", "H", "C", "F", "MX", "R", "Check", "XY", "N", "Tx", "OX", "ANY", "XXX", "S", "DX", "E", "OK", "O", "EX", "L", "P", "ox", "Q", "ZX", " x", "T", "XP", "Z", "XX", "V", "I", "Ex", "x", "IX", "TX", "WH", "It", "Ax"]}}
{"code": "s = input()\\nw = int(input())\\nans = ''\\nfor i in range(0 ,len(s) , w):\\n  ans += s[i:i+w][0]\\n\\nprint(ans)", "target": "313", "substitutes": {"s": ["f", "sys", "sts", "ps", "sv", "ls", "m", "fs", "a", "spec", "cs", "se", "rs", "t", "gs", "ms", "ins", "os", "ns", "v", "sp", "sl", "hs", "c", "h", "q", "b", "S", "string", "ess", "p", "ss", "ds", "sb", "sa", "its", "n", "abs", "bs", "sq", "ats", "st", "ts", "qs", "js"], "w": ["z", "nw", "ws", "iw", "wm", "win", "m", "wh", "wed", "t", "W", "wd", "wall", "len", "r", "sw", "v", "wa", "wx", "aw", "q", "wl", "wb", "we", "wr", "d", "p", "window", "rw", "hw", "word", "kw", "wt", "ew", "wid", "wo", "weight", "n", "wal", "wp", "wi", "width"], "ans": ["ens", "wan", "cas", "anon", "annot", "aned", "AN", "oss", "ran", "ean", "anc", "pan", "rs", "amps", "ms", "anas", "ins", "aus", "ons", "ns", "ann", " Ans", "aos", "arts", "beans", "rans", " means", "san", "ANS", "can", "man", "ai", "anes", "ams", "ras", "ats", "ros", "ts", "anks", "an", "ks", "ants", "lan"], "i": ["ini", "ei", "ri", "zi", "m", "ix", "ti", "ip", "ci", "r", "k", "v", "gi", "ij", "c", "hi", "ori", "oi", "ki", "q", "b", "phi", "yi", "ind", "id", "di", "ik", "p", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "n", "ic", "I", "li", "x", "ui", "mi", "iu", "im"]}}
{"code": "def main():\\n    s = input()\\n\\n    if len(set(s)) == 3:\\n        print('Yes')\\n    else:\\n        print('No')\\n\\nif __name__ == '__main__':\\n    main()", "target": "777", "substitutes": {"s": ["ps", "f", "sts", "str", "sv", "ls", "m", "a", "rs", "t", "gs", "ms", "i", "r", "v", "strings", "c", "gins", "h", "q", "b", "g", "S", "p", "ss", "less", "ds", "sb", "n", "sq", "w", "ats", "ts", "qs"]}}
{"code": "n, k = map(int, input().split())\\nX = list(map(int, input().split()))\\nans = pow(10,9)+7\\nfor i in range(n-k+1):\\n    ans = min(ans, min(abs(X[i])+abs(X[i+k-1]-X[i]), abs(X[i+k-1])+abs(X[i]-X[i+k-1])))\\nprint(ans)", "target": "651", "substitutes": {"n": ["nn", "nia", "names", "m", "nt", "t", "name", "s", "N", "ns", "mn", "en", "un", "v", "na", "c", "ln", "sn", "b", "nd", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "net", "gn", "np", "nan", "nc", "no", "nl", "x"], "k": ["dk", "z", "kg", "max", "K", "mc", "m", "kr", "kind", "kh", "spec", "ka", "t", "ck", "kl", "ikk", "s", "key", "kk", "r", "ke", "ok", "kid", "v", "c", "mk", "ki", "q", "cm", "h", "kn", "unk", "ak", "ijk", "wk", "context", "ik", "num", "d", "p", "kok", "alpha", "km", "radius", "j", "kb", "kj", "ek", "kw", "tk", "sk", "ko", "ku", "ks"], "X": ["Y", "GRE", "UX", "K", "Data", "CE", "H", "C", "XL", "AC", "SS", "MX", "R", "xs", "ML", "N", "M", "A", "Tx", "OX", "U", "XXX", "PE", "DX", "ICE", "O", "Cross", "RL", "Array", "Xi", "AF", "L", "Chart", "Right", "GE", "P", "TS", "Q", "ZX", "XM", "List", "T", "XP", "J", "XX", "Z", "V", "I", "Form", "B", "HTTP", "JSON", "x", "IX", "TX", "WH", "CP", "XT"], "ans": ["ens", "wan", "cas", "anon", "ls", "mas", "aned", "AN", "oss", "ran", "ean", "pan", "amps", "xs", "ins", "anas", "ms", "aus", "ns", "ars", "os", "ann", "ons", " Ans", "outs", "aos", "arts", "asks", "angs", "ums", "rans", "iban", "was", "aver", " means", "san", "ANS", "can", "uns", "nas", "ai", "offs", "anes", "nan", "ams", "ras", "ates", "ats", "orts", "ros", "x", "ions", "ana", "an", "ks", "ants", "anks", "lan"], "i": ["f", "ini", "ei", "ri", "zi", "m", "cli", "uri", "name", "ix", "ti", "info", "ip", "ci", "\u0438", "im", "ji", "gi", "ij", "c", "hi", "index", "ki", "b", "phi", "ami", "ind", "id", "di", "p", "bi", "pi", "qi", "ai", "it", "ii", "xi", "si", "ic", "iri", "I", "li", "ia", "me", "x", "ui", "mi", "iu", "multi"]}}
{"code": "from bisect import bisect_left\\nimport sys\\ninput = sys.stdin.readline\\nclass UnionFind():\\n    def __init__(self, n):\\n        self.n = n\\n        self.parents = [-1] * n\\n    def find(self, x):\\n        if self.parents[x] < 0:\\n            return x\\n        else:\\n            self.parents[x] = self.find(self.parents[x])\\n            return self.parents[x]\\n    def union(self, x, y):\\n        x = self.find(x)\\n        y = self.find(y)\\n        if x == y:\\n            return\\n        if self.parents[x] > self.parents[y]:\\n            x, y = y, x\\n        self.parents[x] += self.parents[y]\\n        self.parents[y] = x\\n    def same(self, x, y):\\n        return self.find(x) == self.find(y)\\ndef main():\\n    N, Q = map(int, input().split())\\n    kouji = [list(map(int, input().split())) for _ in range(N)]\\n    D = [int(input()) for _ in range(Q)]\\n    ans = [-1]*Q\\n    nxt = [i+1 for i in range(Q)]\\n    uf = UnionFind(Q)\\n    kouji.sort(key=lambda x: x[2])\\n    for i in range(N):\\n        S, T, X = kouji[i]\\n        L = S-X\\n        R = T-X-1\\n        L_idx = bisect_left(D, L)\\n        R_idx = bisect_left(D, R+1)\\n        p = L_idx\\n        while p < R_idx:\\n            if ans[p] == -1:\\n                ans[p] = X\\n                uf.union(L_idx, p)\\n                nxt[p] = R_idx\\n                p += 1\\n            else:\\n                par = uf.find(p)\\n                p = nxt[par]\\n                uf.union(L_idx, par)\\n                par = uf.find(par)\\n                if nxt[par] < R_idx:\\n                    nxt[par] = R_idx\\n                if nxt[par] < p:\\n                    nxt[par] = p\\n    for i in range(Q):\\n        print(ans[i])\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "338", "substitutes": {"input": ["rand", "expression", "interface", "str", "out", "load", "util", " Input", "control", "format", "sample", "step", "raw", "request", "output", "cin", "buffer", "history", "url", "cmd", "pull", "index", "q", "insert", "csv", "enum", "ref", "Input", "source", "select", "string", "init", "context", "config", "pattern", "read", "view", "image", "next", "join", "command", "hidden", "path", "height", "get", "it", "int", "focus", "sequence", "print", "exec", "arg", "lat", "put", "update", "prefix", "data", "PUT", "shift"], "self": ["disk", "add", "spec", "parent", "full", "close", "Self", "ins", "back", "make", "expr", "compl", "sw", "wrapper", "attr", "public", "before", "co", "empty", "h", "q", "wn", "ref", "deep", "pre", "parts", "cmp", "soc", "graph", "first", "rem", "rec", "also", "new", "sys", "ws", "obj", "python", "child", "unknown", "pkg", "se", "this", "private", "pp", "shape", "final", "output", "history", "json", "ren", "replace", "ind", "thus", "cl", "test", "comp", "object", "small", "table", "print", "help", "me", "prefix", "req", "scope", "data", "view", "proc", "md", "item", "rb", "ls", "ae", "nt", "debug", "raw", "r", "resp", "c", "user", "console", "re", "context", "func", "app", "form", "e", "sel", "results", "subject", "right", "cache", "sh", "own", "details", "partial", "diff", "tmp", "what", "util", "wh", "my", "your", "py", "you", "case", "s", "res", "xml", "ng", "github", "nd", "pair", "th", "mp", "remote", "config", "local", "mix", "np", "short", "instance", "sq", "rel", "handle"], "n": ["f", "nn", "m", "l", "nt", "t", "number", "nr", "s", "ns", "nm", "k", "r", "mn", "en", "v", "na", "c", "sn", "q", "b", "an", "g", "cn", "nu", "nb", "ny", "num", "d", "dn", "j", "ne", "np", "nan", "nc", "o", "nl", "on"], "parents": ["roots", "tips", "times", "names", "ones", "parent", "modules", "kids", "states", "outs", "errors", "tests", "types", "links", "drivers", "relations", "parts", "its", "files", "chains", "actions", "dates", "Parents", "pots", "tags", "values", "groups", "devices", "pins", "xs", "ports", "mates", "owners", "banks", "runners", "packages", "masters", "changes", "pointers", "children", "codes", "keys", "apps", "terms", " Parents", "holders", "headers", "resources", "levels", "classes", "points", "ids", "works", "versions", "results", "cache", "workers", "vals", "ps", "checks", "lines", "tmp", "blocks", "projects", "days", "pas", "ns", "images", "properties", "makers", "np", "plugins", "jobs", "balls", "lists"], "x": [" dx", "xp", "xa", "ax", "xx", "expr", "v", "wx", "h", "q", "mx", "foo", "ct", "ry", "xi", "z", "f", "el", "m", "one", "xy", "ext", "t", "xs", "xt", "ex", "exp", "xc", "px", "xd", "edit", "abc", "yx", "l", "ix", "r", "k", "at", "c", "fx", " xx", "e", "xe", "xxxx", "w", "xf", "on", "xes", "ux", "key", "xb", "xml", "nex", "dx", "fixed", "any", "rx", "xxx", "ox", "int", "lex", "u", "zx", "tx"], "y": ["Y", "z", "type", "ym", "ey", "yl", "yo", "yn", "ay", "m", "my", "xy", "zy", "l", "py", "t", "yer", "iy", "yu", "by", "s", "sy", "oy", "yy", "r", "ty", "yt", "ch", "v", "c", "gy", "ys", "b", "h", "ies", "yi", "ny", "fy", "j", "hot", "ry", "ya", "uy", "ye", "yr", "cy", "vy", "o", "kit", "hy", "sky", "ly"], "N": ["Y", "K", "NE", "H", "C", "AN", "Ni", "G", "NB", "NI", "M", "NR", "A", "MN", "CN", "NL", "U", "NA", "E", "ND", "NT", "SN", "NS", "TN", "P", "No", "GN", "J", "V", "I", "Ns", "NC", "NN"], "Q": ["Y", "QU", "Qual", "K", "MQ", "H", "C", "F", "G", "W", "NB", "Query", "M", "A", "QL", "U", "q", "RE", "E", "O", "IT", "QB", "P", "Queue", "J", "Z", "V", "I", "B", "Qu", "UE", "Que", "IQ"], "kouji": [" kouloji", "kcubi", "kounji", "kounj", "kouiji", " kouiji", "kcuiji", "kouowa", "kauji", "kouloji", " kouilia", "kovji", "kounowa", "Kouj", "Kourji", "kouniji", "kourzy", "kouilia", "koulilia", "koubi", "kouoji", "koulj", "kauiji", "kouroji", " kouoji", " kouzy", "koulowa", "kourji", "koulji", "Kouriji", " koulji", "kovilia", " kcuji", "kouliji", " kcubi", "kouriji", "koulzy", "koviji", " koubi", " kcuiji", "koulbi", " kouliji", "kourowa", " koulzy", "Kouji", "kouzy", "kcuji", "kcuilia", " kcuilia", "kovbi", "Kourowa", "Kourj", "kauzy", "kauoji", "Kouowa", "Kouiji", "kouj", "kourj"], "_": ["let", "pt", "k", "__", "place", "time", "___"], "D": ["DN", "Y", "DL", "DB", "H", "C", "Do", "DF", "DD", "M", "A", "Ds", "DA", "DX", "DIR", "O", "ND", "Dir", "DS", "d", "DH", "DK", "P", "DR", "AD", "DM", "V", "I", "B", "DE", "DC", "MD", "DI"], "ans": ["ens", "ps", "lines", "ls", "names", "vers", "ones", "AN", "ran", "rs", "cons", "amps", "xs", "ins", "anas", "os", "aus", "ns", "outs", "ms", "ann", "ons", " Ans", "aps", "nos", "aos", "arts", "es", "angs", "ands", "eds", "icons", "ations", " means", "ids", "vs", "ANS", "ups", "versions", "ds", "An", "uns", "offs", "anes", "actions", "ams", "pres", "ras", "ats", "us", "ions", "an", "ks", "ants"], "nxt": ["Nld", "nnext", "nExt", "Nft", "rnld", "nnld", "nnyt", "unext", "unont", "gnhr", "cnExt", "anyt", "onext", "cnx", " nont", "Next", " next", "nntxt", "dnxt", "nyt", "nft", "Nyt", "cnext", "dnld", "anxt", "onxt", "nhr", " nExt", " nyt", "unxt", "dnhr", "anx", "dntxt", " nft", " nx", "gnext", "nld", "Nx", "gnxt", "onExt", "next", "nont", "anext", "untxt", "cnxt", "nnont", "rnext", " ntxt", " nld", "rnyt", "dnext", "nx", "NExt", "ntxt", "Nxt", "onft", "Nhr", "nnxt", "rnxt", "Ntxt"], "i": ["z", "ini", "ei", "ri", "zi", "m", "cli", "l", "t", "ti", "key", "ci", "ip", "k", "ji", "r", "v", "gi", "gu", "ij", "c", "hi", "index", "ki", "q", "phi", "h", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "I", "li", "u", "iter", "mi", "iu", "im", "ski"], "uf": ["f", "uh", "ph", "utils", "rub", "util", "NF", "pu", "UL", "fg", "ud", "ux", "fu", "df", "pkg", "Mu", "au", "uch", "pb", "fol", "ue", "ume", "il", "lb", "ul", "\u00fc", "lu", "ki", "UFF", "fp", "prot", "uff", "aux", "Ul", "du", "uci", "lp", "buf", "UF", "bf", "tf", "ull", "bo", "uc", "gb", "ur", "np", "uu", "ub", "cu", "u", "lf", "utf", "buff", "um", "ui", "us", "Buff"], "S": ["Y", "Single", "K", "SI", "H", "C", "SS", "F", "G", "W", "s", "M", "A", "Sing", "RS", "U", "E", "SR", "O", "NS", "SP", "P", "TS", "SA", "J", "Z", "V", "I", "B"], "T": ["Y", "TR", "K", "H", "C", "G", "t", "WT", "W", "M", "TA", "U", "E", "TP", "TN", "P", "TS", "TC", "J", "Z", "V", "I", "B", "TT", "TL"], "X": ["Y", "TR", "K", "CH", "H", "C", "XL", "F", "G", "W", "ML", "XY", "M", "A", "MAX", "Tx", "U", "PL", "DX", "E", "O", "EX", "IO", "TON", "Right", "IT", "P", "XP", "J", "Z", "XX", "V", "I", "IX", "TX", "TT", "XT"], "L": ["Y", "K", "DL", "H", "C", "XL", "LR", "SL", "l", "G", "LS", "M", "LT", "A", "NL", "U", "E", "P", "LC", "J", "Z", "V", "I", "B", "LP", "LL", "TL"], "R": ["Y", "RR", "TR", "H", "C", "RA", "F", "Rs", "G", "W", "M", "r", "A", "RS", "U", "RE", "E", "O", "SR", "Right", "P", "RT", "J", "Z", "V", "I", "B", "Res"], "L_idx": ["L_IdX", "L_idez", "L_Idx", "L_iterx", "L_IDxi", "LWidct", "L_idexc", "LWidxc", "L_IDct", "L_Idct", "L_idct", "L_idex", "L_ridz", "L_inc", "L_iterxc", "L_inz", "L_IDxc", "L_ridx", "L_pidx", "L_ridX", "L_iterxi", "L_pidy", "L_Idy", "L_idxc", "LWIDxc", "L__idz", "LWidxi", "L_Idex", "L_idey", "L_pidz", "L_ideex", "L_Idxc", "L_ridex", "L_idc", "L__idX", "L_idec", "L_IDx", "LWIDct", "L_inex", "L_idz", "L_pidxc", "LWidx", "LWIDxi", "L_Idxi", "L_idX", "LWIDx", "L_iterct", "L_idxi", "L_idy", "L__idx", "L__idex", "L_Idz", "L_inx"], "R_idx": ["R__Idz", "R_idexi", "R__idX", "R_idsx", "Roxidy", "R_indexv", "R_ideX", "R_prX", "R_idsX", "R_itix", "Roxindxi", "R_indexm", "R__idxt", "R_idxt", "Rixindm", "R__idx", "R_idu", "R_idey", "R_ndix", "R_fdx", "R_Idx", "R_uidxi", "Rixindv", "Roxindy", "R_indexk", "R_uidu", "R_idX", "R_IdX", "R_idk", "R_prxt", "R_itx", "R__idz", "R_ideu", "R__Idx", "R_prx", "R_indm", "Rixidk", "R_indy", "R_idsxt", "Rixidv", "R_idz", "R_indk", "R_idv", "Roxindx", "R_fdv", "Rixindx", "R_indu", "R_idex", "R_idy", "Rixindk", "R_ndx", "R__idez", "Rixidx", "Rixidm", "R__idex", "R_fdm", "Roxidxi", "R_ndf", "R__ideX", "Roxindu", "R_prz", "R_uidx", "R_Idz", "R_idez", "R_indexx", "R_indxi", "R_fdk", "R__Idxt", "R_idix", "Roxidu", "R_indv", "R_idf", "R_itz", "Roxidx", "R_idxi", "R_Idxt", "R_idm", "R_uidy", "R__IdX", "R_indx", "R_idsz", "R_itf", "R_ndz"], "p": ["op", "pe", "ps", "pai", "f", "pard", "per", "ph", "pr", "pt", "ap", "m", "prop", "rep", "pkg", "l", "t", "parent", "bp", "pos", "pp", "ip", "pas", "jp", "r", "tp", "perm", "sp", "pa", "c", "h", "q", "fp", "g", "pair", "mp", "pre", "d", "pat", "exp", "br", "j", "pi", "cp", "lp", "pub", "pl", "ping", "P", "it", "np", "pc", "dp", "part", "u", "pid", "wp", "ar", "pro", "param", "pg"], "par": ["ps", "pe", "pai", "pard", "per", "ph", "arr", "pr", "prop", "rep", "pkg", "parent", "Par", "pp", "pas", "ax", "jp", "r", "tp", "perm", "sp", "pa", "mk", "like", "pair", "prep", "mp", "pre", "plan", "pat", "j", "cp", "pi", "pl", "col", "P", "parse", "var", "pri", "part", "star", "pid", "rel", "arg", "ar", "pro", "param", "pg"]}}
{"code": "N=int(input())\\ncoins = [100,101,102,103,104,105]\\ndp = [int(i%coins[0]==0) for i in range(N+1)]\\nfor coin in coins[1:]:\\n  for i in range(coin,N+1):\\n    dp[i] += dp[i - coin]\\nif dp[-1] != 0:\\n  print(1)\\nelse:\\n  print(0)", "target": "513", "substitutes": {"N": ["Y", "Name", "Num", "K", "H", "C", "F", "Sn", "R", "Ni", "G", "CNN", "NB", "NI", "M", "NV", "NR", "CN", "MN", "NP", "S", "NT", "D", "SN", "NS", "FN", "Node", "L", "TN", "P", "Q", "T", "GN", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "Network"], "coins": ["values", "checks", "ips", "plays", "ls", "xes", "nets", "blocks", "tops", "names", "params", "cycles", "cs", "rs", "cons", "pages", "xs", " bitcoins", "charges", "ins", "assets", "ns", "caps", "pieces", "fields", "co", "units", "circ", "vin", "icons", "css", "bits", "cn", "limits", "vs", "cos", "rings", "codes", "bitcoin", "links", " Coins", "ics", "chains", "pps", "items", "keys", "ces", "pes", "facts", "packs", "qs", "cars"], "dp": ["ps", "deb", "adr", "df", "bp", "wd", "dos", "xs", "pb", "pp", "dd", "jp", "tp", "dt", "dx", "vp", "dq", "pm", "fp", "mp", "isp", "dm", "di", "pd", "d", "dl", "p", "dep", "lp", "ds", "cp", "dial", "dc", "np", "DP", "dh", "bps", "delay", "px", "dr", "wp"], "i": ["ei", "ini", "zi", "ico", "m", "l", "y", "ix", "iy", "ti", "s", "ip", "ci", "k", "gi", "v", "ij", "c", "ori", "oi", "index", "ki", "phi", "yi", "ind", "id", "di", "num", "d", "iat", "p", "bi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "iri", "n", "ic", "li", "I", "u", "x", "mi", "iu", "im", "oin"], "coin": ["Coin", "cash", "ico", "currency", "rice", "field", "counter", "chain", "name", "number", "cycle", "ix", "case", "to", "key", "BTC", "cin", "byte", "co", "c", "circ", "index", "ki", " Coin", "buy", "pair", "bit", "num", "bitcoin", "Bitcoin", "word", " bitcoin", "bin", "int", "money", "bo", "address", "block", "xi", "n", "tc", "ic", "I", "payment", "x", "year", "unit", "oin", "item"]}}
{"code": "from scipy.special import comb\\na,b=map(int,input().split())\\nprint(int(comb(a,2)+comb(b,2)))", "target": "150", "substitutes": {"a": ["f", "ba", "am", "angular", "ae", "l", "y", "t", "all", "sta", "ga", "au", "ed", "ax", "ca", "A", "r", "la", "at", "c", "ea", "g", "area", "d", "p", "ao", "act", "oa", "e", "sa", "aa", "aj", "n", "ac", "ma", "ia", "ab", "aaa", "x", "an", "aff"], "b": ["z", "rb", "ba", "ib", "be", "l", "y", "bc", "ed", "bh", "fb", "cb", "v", "db", "c", "h", "g", "nb", "lib", "d", "bi", "br", "j", "amb", "sb", "gb", "bis", "ob", "bs", "B", "ab", "bb", "bar", "base", "eb"]}}
{"code": "import sys\\ninput = lambda : sys.stdin.readline().rstrip()\\nsys.setrecursionlimit(max(1000, 10**9))\\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\\n\\nimport decimal\\na,b,c = map(int, input().split())\\nval = (c-a-b)**2 - 4*a*b\\nif c-a-b<0:\\n    print(\"No\")\\nelse:\\n    if val>0:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")", "target": "195", "substitutes": {"input": ["add", "out", "edit", "reset", " Input", "dict", "control", "sample", "service", "step", "raw", "request", "output", "check", "quiet", "pull", "q", "insert", "header", "ref", "Input", "source", "select", "paste", "cmd", "pattern", "config", "password", "read", "command", "send", "get", "int", "script", "feed", "print", "save", "exec", "list", "put", "update", "view", "text"], "write": ["export", "add", "out", "dump", "connect", "line", "report", "writing", "echo", "writ", "handle", "println", "close", "append", "format", "push", "switch", "output", "printf", "buffer", "value", "data", "scale", "insert", "rite", "writer", "wr", "string", "read", "process", "change", "next", "send", "feed", "log", "print", "save", "put", "update", "written", "flush", "text"], "a": [" af", "ba", "am", "ae", "ta", "l", "sta", "au", "ga", "xa", "i", " sa", "r", "A", "ca", "la", "at", "pa", "ea", "era", "g", "area", "d", "p", "va", "alpha", "app", "oa", "e", "sa", "aa", " alpha", "al", "ac", "o", "ma", " at", "w", "ia", "ab", "arg", "aaa", "x", "ar", "an", " an"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "s", "i", "cb", "fb", "r", "v", "db", "ble", "h", "g", "nb", "d", "p", "bi", "j", "bf", "e", "n", "o", "bs", "u", "B", "ab", "x", "bb", "eb"], "c": ["z", "f", "m", "C", "l", "cs", "t", "bc", "y", "chain", "ci", "r", "cb", "ca", "k", "rc", "err", "v", "co", "h", "lc", "g", "cc", "unc", "ct", "ce", "d", "cos", "p", "alpha", "e", "cd", "dc", "fc", "conf", "n", "ac", "tc", "cu", "u", "dec", "x", "enc", "count"], "val": ["pol", "el", "eval", "VAL", "elt", "l", "pos", "kl", "fol", "len", "rol", "ver", "res", "value", "v", "fail", "cal", "pal", "ind", "test", "ctx", "num", "crit", "p", "cho", "alpha", "valid", "vol", "sel", "it", "int", "vt", "conf", "al", "viol", "loc", "li", "rel", "vals", "Val", "aval"]}}
{"code": "\\ndef main():\\n   a,b = map(int,input().split())\\n   if a <= 8 and b<= 8:\\n       print('Yay!')\\n   else:\\n       print(':(')\\nmain()", "target": "322", "substitutes": {"a": ["f", "ba", "m", "ta", "ae", "au", "i", "A", "ca", "r", "at", "na", "ea", "ity", "g", "area", "d", "va", "p", "alpha", "da", "ao", "j", "app", "act", "oa", "sa", "ai", "ata", "aa", "aj", "ac", "sha", "ma", " A", "part", "ia", "ab", "aaa", "x", "ar", "an"], "b": ["z", "f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "t", "bc", "bp", "s", "i", "cb", "fb", "v", "db", "c", "g", "nb", "d", "bi", "j", "sb", "gb", "bis", "n", "bs", "B", "ab", "x", "bb", "base", "business"]}}
{"code": "num_of_sheep, num_of_wolf = map(int, input().split())\\n\\nif num_of_sheep > num_of_wolf:\\n    print('safe')\\nelse:\\n        print('unsafe')", "target": "585", "substitutes": {"num_of_sheep": ["num_of_steep", "num_of_sleep", "num_of_peap", "num_of_sweeps", "num_of_sleap", "num_of_sweap", "num_of_sweep", "num_of_sheek", "num_of_sleeps", "num_of_peep", "num_of_steek", "num_of_steap", "num_of_steeps", "num_of_sleek", "num_of_peek", "num_of_sheeps", "num_of_sheap", "num_of_sweek", "num_of_peeps"], "num_of_wolf": ["num_OF_wolf", "num_of_prison", "num_OF_Wolf", "num_Of_wolf", "num_Of_prison", "num_OF_life", "num_of_life", "num_Of_Wolf", "num_of_Wolf"]}}
{"code": "from collections import deque\\nn = deque(list(input()))\\ndigit = n.popleft()\\ncnt = 1\\nwhile n:\\n    if cnt == 3:\\n        break\\n    d = n.popleft()\\n    if d == digit:\\n        cnt += 1\\n    else:\\n        digit = d\\n        cnt = 1\\n\\nif cnt == 3:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "600", "substitutes": {"n": ["ine", "nn", "nw", "out", "yn", "m", "a", "node", "l", "conn", "t", "nt", "y", "all", "note", "nr", "present", "s", "ing", "N", "fn", "ns", "mn", "en", "at", "v", " fn", "na", "c", "ain", "long", "ln", "sn", "ng", "nd", "g", "cn", "nu", "rn", "tn", " ans", "p", "dn", " ng", "ne", "e", "gn", "np", "nan", "number", "nc", " gn", "nl", "on", "norm", "new"], "digit": ["uid", "rand", "partial", "date", "leading", "dig", "die", "hex", "confirmed", "number", "fred", "format", "unsigned", "hash", "final", "dt", "div", "upper", "tag", "index", "major", "ln", "hour", "character", "id", "init", "num", "du", "char", "p", "alpha", " digits", "letter", "total", "bin", "ident", "valid", "it", "integer", "int", "got", "period", "float", "dec", "part", "pid", "dot", "prime", "winner", "unit", "dat", "fd"], "cnt": ["acnc", "lcot", "lcno", "acnt", "lcount", "lcct", "cnc", " cno", " cot", "cot", "CNT", "acct", "Cnc", "acNT", "cachecount", "Cno", "cNT", "ncot", "Cct", "lcNT", "Count", "ccount", "ncnc", "Cnt", " ccount", "cachenc", "lcaught", "lcnc", "lcnt", " caught", " count", "lccount", " cNT", "ncnt", "cacheaught", "caught", "cachent", " cnc", "cct", " cct", "cno", "ncct", "count"], "d": ["z", "f", "done", "ld", "out", "ded", "date", "die", "a", "red", "l", "t", "day", "dict", "did", "ed", "s", "dd", "r", "k", "div", "v", "sd", "c", "nd", "g", "ind", "D", "de", "du", "p", "do", "der", "da", "nil", "j", "ds", "null", "end", "none", "dom", "dec", "dot", "data", "new", "dat", "fd"]}}
{"code": "import math, sys\\nfrom bisect import bisect_left, bisect_right\\nfrom collections import Counter, defaultdict, deque\\nfrom copy import deepcopy\\nfrom functools import lru_cache\\nfrom heapq import heapify, heappop, heappush\\nfrom itertools import accumulate, combinations, permutations\\ninput = sys.stdin.readline\\nmod = 10**9 + 7\\nns = lambda: input().strip()\\nni = lambda: int(input().strip())\\nnm = lambda: map(int, input().split())\\nnl = lambda: list(map(int, input().split()))\\n\\ndef main():\\n    n = ni()\\n\\n    e = [0] * (n + 1)\\n\\n    def num(m):\\n        return len(list(filter(lambda x: x>= m-1, e)))\\n\\n    for i in range(2, n+1):\\n        cur = i\\n        for j in range(2, i+1):\\n            while cur % j == 0:\\n                e[j] += 1\\n                cur //= j\\n    \\n    print(num(75) + num(25)*(num(3) - 1) + num(15)*(num(5) - 1)\\n        + num(5)*(num(5) - 1)*(num(3) - 2) // 2)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "145", "substitutes": {"input": ["qt", "expression", "active", "interface", "str", "out", "sum", "load", "reader", "eval", " Input", "sample", "result", "ip", "raw", "output", "cin", "request", "filter", "xml", "history", "json", "query", "data", "index", "mask", "dq", "q", "insert", "enum", "ref", "Input", "source", "val", "acl", "cmd", "pattern", "config", "hidden", "read", "init", "context", "csv", "command", "form", "get", "parse", "inc", "it", "int", "subject", "current", "focus", "conf", "feed", "sin", "sq", "lat", "arg", "list", "prefix", "submit", "gen", "proc", "shift"], "mod": [" MOD", "add", " mods", "max", "base", "off", " base", " reg", " const", "name", " scale", " lim", " mult", "mask", "scale", " Mod", " mode", " modified", " dec", " ord", "Mod", " pad", "MOD", " rem", "tab", "set", " module", "fun"], "ns": ["lines", "ls", "fs", "cs", "gs", "xs", "s", "ms", "ins", "os", "fn", "mn", "na", "nis", "ln", "cn", "nb", "NS", "ans", "ds", "ne", "keys", "si", "ts"], "ni": ["nn", "ini", "nw", "nit", "Ni", "NI", "nr", "nie", "ti", "fn", "mn", "ci", "na", "nis", "ori", "ln", "sn", "cn", "nu", "nb", "ny", "rn", "dn", "bi", "nice", "nat", "pi", "ne", "np", "main", "li", "no", "mi"], "nm": ["nw", "nom", "nn", "gm", "wm", "nam", "nr", "fn", "mn", "cn", "nu", "nb", "ny", "rn", "rm", "nv", "dn", "km", "ne", "nor", "np", "nc", "nah", "fm"], "nl": ["nn", "nw", "lines", "ls", "jl", "el", "bl", "l", "nr", "kl", "fn", "len", "syn", "il", "sl", "ln", "cn", "nu", "nb", "rn", "ml", "dl", "ne", "np", "nc", "rl"], "n": ["nn", "names", "l", "nt", "t", "nr", "N", "len", "mn", "en", "v", "na", "c", "long", "sn", "cn", "nu", "nb", "ny", "num", "d", "p", "network", "ne", "np", "nan", "nc", "o", "no", "x", "norm"], "e": ["f", "ei", "ele", "el", "le", "ae", "a", "l", "se", "eeee", "ed", "s", "en", "ue", "es", "c", "ea", "b", "g", "ex", "ef", "E", "ge", "ze", "eu", "oe", "ie", "er", "ce", "de", "d", "te", "p", "eps", "ec", "et", "ne", "xe", "ee", "eg", "nc", "o", "x", "eb"], "m": ["z", "f", "gm", "mc", "tm", "a", "l", "y", "t", "sm", "month", "ms", "M", "r", "k", "v", "c", "h", "b", "g", "dm", "num", "d", "p", "man", "mt", "o", "u", "mm", "mi", "cm"], "i": ["ini", "l", "y", "t", "ti", "ip", "ci", "v", "gi", "ij", "c", "index", "q", "ie", "ind", "id", "di", "iat", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "x", "mi", "iu", "im", "init"], "cur": ["ve", "ph", "oc", "sc", "pr", "off", "desc", "cr", "Cur", "se", "nr", "con", "rc", "err", "ver", "gr", "ch", "jp", "r", "ptr", "co", "c", "mut", "gc", "g", "ct", "oe", "cont", "go", "char", "ctr", "Cr", "fac", "const", "current", "tr", "ur", "pri", "nc", "sur", " Cur", "cor", "dr", "ser", "car", "count", "pg"], "j": ["z", "f", "out", "obj", "jl", "jit", "ja", "l", "y", "t", "jp", "k", "ji", "r", "ch", "v", "ij", "c", "job", "q", "b", "h", "g", "je", "d", "num", "p", "bi", "oj", "kj", "it", "jj", "jump", "aj", "J", "o", "uj", "dj", "li", "u", "x", "bj", "js", "jc"]}}
{"code": "def d(x,c):\\n if x%2!=0: return c\\n return d(x/2, c+1)\\n\\ninput()\\nprint(sum(d(i,0) for i in map(int,input().split())))", "target": "121", "substitutes": {"x": ["z", "f", "yx", "xp", "m", "X", "xy", "y", "t", "ix", "xs", "xa", "xx", "ax", "r", "ci", "v", "xt", "dx", "wx", "b", "ex", "ct", "fx", "cl", "d", "change", "p", "rx", "xc", "e", "ox", "xe", "xi", "n", "w", "xf", "xd", "tx"], "c": ["z", "f", "sc", "mc", "m", "C", "cr", "cs", "chain", "t", "bc", "l", "y", "cf", "con", "ci", "rc", "cb", "ca", "r", "k", "cin", "v", "co", "h", "b", "lc", "g", "gc", "cc", "ct", "code", "cl", "ce", "d", "cont", "p", "cur", "col", "null", "com", "e", "none", "dc", "cache", "tc", "ac", "n", "nc", "cor", "cm", "count", "category"], "i": ["ei", "ini", "zi", "\u00ed", "m", "l", "y", "ix", "ti", "ci", "k", "ji", "v", "gi", "ij", "oi", "ki", "q", "phi", "id", "di", "p", "bi", "j", "pi", "ai", "int", "ii", "xi", "si", "n", "li", "I", "u", "iter", "list", "ui", "mi", "iu"]}}
{"code": "N = int(input())\\nS, T = map(str, input().split())\\n\\nS = list(S)\\nT = list(T)\\nANS = []\\n\\nfor i in range(N):\\n    ANS.append(S[i])\\n    ANS.append(T[i])\\n    \\nANS = ''.join(ANS) \\n    \\n    \\nprint(ANS)", "target": "673", "substitutes": {"N": ["Number", "Num", "K", "C", "NF", "Ni", "CNN", "NB", "NI", "M", "NR", "MN", "NA", "ANY", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "No", "GN", "n", "V", "I", "Ns", "NC", "NUM", "NO", "NN", "NH"], "S": ["SER", "BS", "SI", "Sl", "Si", "SS", "Ins", "GES", "SL", "JS", "LS", "SM", "SB", "PS", "Services", "s", "A", "Sing", "Sub", "RS", "INS", "ST", "IS", "DS", "Source", "US", "NS", "SU", "Is", "SO", "NEWS", "L", "SP", "FS", "Su", "TS", "ITS", "IES", "SH", "You", "MS", "SA", "SF", "AS", "VS", "I", "B", "CS", "GS", "HS", "Set"], "T": ["Y", "TR", "UT", "H", "C", "X", "F", "R", "t", "WT", "MT", "G", "M", "LT", "A", "TA", "OT", "TH", "E", "NT", "D", "AT", "TG", "CT", "L", "TB", "Template", "TN", "TM", "IT", "NOTE", "P", "TS", "RT", "ITS", "J", "Z", "The", "V", "BT", "B", "VT", "TX", "TT", "GT", "It", "TF", "TV", "XT", "PT", "TL"], "ANS": ["ENS", "ULTS", "ATIONS", "IGHTS", "ONS", "ANN", "AN", "ANG", "VERS", "GES", "STDOUT", "MAL", "Stan", "ANK", "SAN", "ANT", "OST", "LS", "OU", "ICAN", "ENA", "CON", "AMES", "AUD", "OS", "ATES", "ADS", "INS", "LES", "PHOTOS", "UES", "URN", "IONS", "ANY", "IS", "ONES", "ENC", "ONEY", "NRS", "OSS", "NS", "ans", "PIN", "CAN", "ATS", "NEWS", "WA", "ERS", "ENTS", "TON", "LAN", "TS", "UN", "INAL", "MAS", "MAN", "YES", "AS", "AIN", "GS", "ARDIS", "ON", "ART", "IDS"], "i": ["f", "str", "io", "ri", "zi", "chain", "ix", "ti", "key", "ip", "ji", "gi", "v", "ij", "ori", "index", "q", "phi", "yi", "ind", "id", "di", "num", "bi", "multi", "vi", "pi", "qi", "it", "xi", "si", "n", "iri", "batch", "u", "I", "li", "ic", "set", "me", "x", "ui", "mi", "im", "ski"]}}
{"code": "n = list(map(str,input()))\\nfn = 0\\nfor i in range(len(n)):\\n  fn += int(n[i])\\nprint(\"Yes\" if int(\"\".join(n))%fn == 0 else \"No\")", "target": "161", "substitutes": {"n": ["nn", "nw", "names", "m", "l", "nt", "t", "N", "ns", "mn", "nm", "en", "v", "na", "c", "ren", "ln", "sn", "h", "b", "g", "cn", "nu", "nb", "d", "p", "dn", "j", "ne", "gn", "nor", "np", "nan", "nc", "o", "nl", "bn", "x", "norm", "pn", "ll"], "fn": ["f", "fl", "nn", "yn", "fa", "fs", "pan", "nt", "fill", "cf", "con", "fol", "fr", "ns", "mn", "nm", "len", "syn", "il", "ln", "wl", "wn", "cn", "tn", "rn", "typ", "isen", "FN", "pd", "num", "dl", "dn", "frac", "pn", "pl", "fps", "fi", "bf", "fen", "gn", "np", "nut", "aa", "fc", "nc", "bs", "bn", "nl", "filename", "fm", "BF", "fun", "bj", "width", "fd"], "i": ["ini", "zi", "m", "y", "ix", "ti", "s", "key", "ci", "r", "ji", "gi", "v", "ij", "c", "hi", "ori", "q", "b", "yi", "ind", "id", "di", "bi", "j", "pi", "qi", "ai", "ii", "xi", "si", "ic", "li", "I", "x", "ui", "mi", "im"]}}
{"code": "x, y = [int(s) for s in input().split()]\\nans = 0\\ntemp = x\\nwhile temp <= y:\\n    ans += 1\\n    temp *= 2\\nprint(ans)", "target": "631", "substitutes": {"x": ["z", "f", "m", "xp", "X", "xy", "l", "t", "ix", "xs", "i", "xx", "ax", "v", "xt", "dx", "wx", "c", "q", "b", "mx", "ex", "fx", "p", "rx", "xc", "ox", "xi", "n", "px", "w", "u", "xf", "tx"], "y": ["Y", "z", "ym", "yo", "yl", "ey", "yn", "m", "xy", "yu", "py", "t", "iy", "oy", "i", "sy", "yy", "yt", "v", "ys", "gy", "b", "ies", "yi", "ny", "fy", "ry", "ya", "uy", "yr", "n", "o", "vy", "cy", "iny", "hy"], "s": ["ps", "sts", "str", "sv", "ls", "fs", "a", "rs", "t", "gs", "xs", "ix", "ms", "i", "ns", "v", "sym", "es", "c", "hs", "ies", "S", "string", " c", " inputs", "ss", "ds", "self", "e", "ses", "n", "si", "sq", "tes", "ats", "als", "ts", " S"], "ans": ["ens", "users", "cas", "ls", "mas", "vers", "AN", "ones", "ran", "ean", "pan", "cons", "ins", "anas", "ms", "aus", "ons", "outs", "ns", "ann", " Ans", "acs", "beans", "arts", "ents", "ians", "rans", "eds", "posts", " means", "tan", "vs", "ANS", "man", "ds", "lets", "uns", "nas", "offs", "actions", "ams", "ads", "ras", "ats", "anks", "an", "ks", "ants", "lan"], "temp": ["map", "ps", "emp", "out", "tmp", "pt", "des", "times", "m", "sum", "ta", "tim", "this", "t", "result", "ms", "output", "tp", "ver", "ty", "res", "input", "tar", "c", "index", "dem", "term", "tem", "mod", "unc", "mp", "wr", "test", "typ", "pre", "ctx", "mem", "there", "p", "cp", "stem", "Temp", "current", "tr", "time", "txt", "cache", "tc", "cum", "w", "pid", "set", "ts", "mint", "rain", "tx", "dat", "perature"]}}
{"code": "from _collections import deque\\nh,w,k=map(int,input().split())\\nS=[input() for _ in range(h)]\\nA=deque([])\\ncnt=1\\n\\ndef func(X):\\n    global cnt\\n    ANS=[]\\n    c=X.count('#')\\n    a=0\\n    for x in X:\\n        ANS.append(cnt)\\n        if x=='#':\\n            cnt+=1\\n            a+=1\\n            if a==c:\\n                for _ in range(w-len(ANS)):\\n                    ANS.append(cnt-1)\\n                break\\n    A.append(ANS)\\n\\n\\n\\nfor i in range(h):\\n    if S[i].count('#')==0 and i!=0 and len(A)!=0:\\n        A.append(A[-1])\\n    elif S[i].count('#')!=0:\\n        func(S[i])\\n\\nif len(A)!=h:\\n    for _ in range(h-len(A)):\\n        A.appendleft(A[0])\\n\\nfor ans in A:\\n    print(*ans)", "target": "165", "substitutes": {"h": ["z", "f", "ph", "he", "H", "m", " H", "kh", "l", "ha", "y", "t", "s", "len", "bh", "r", "ch", "ho", "v", "hs", "hi", "length", "q", "b", "g", "http", "hal", "hd", "ih", "host", "p", "height", "ht", "oh", "hw", "e", "hl", "dh", " inh", "n", "hr", "o", "hh", "ah", "sh", "his", "hp"], "w": ["z", "nw", "ws", "iw", "win", "m", "wh", "l", "ww", "W", "wd", "r", "sw", "v", "wa", "wx", "wl", "wb", "we", "wr", "work", "d", "window", "rw", "hw", "wt", "ew", "wid", "fw", "n", "wal", "wp", "wi", "width"], "k": ["z", "K", "m", "ka", "l", "y", "t", "kl", "kk", "r", "ch", "v", "mk", "q", "b", "g", "kn", "ik", "num", "p", "km", "j", "kw", "n", "o", "sk", "ks"], "S": ["Sample", "BS", "SI", "Sl", "H", "Si", "C", "AN", "SS", "Ins", "R", "SL", "Spe", "SAN", "G", "W", "SB", "JS", "PS", "Services", "LS", "s", "N", "OS", "M", "Sub", "Save", "NRS", "IS", "E", "New", "Series", "DS", "As", "NS", "SU", "SO", "L", "Tags", "YS", "P", "ES", "TS", "SH", "AS", "T", "SF", "SE", "VS", "V", "I", "B", "CS", "GS", "Stats", "Ps", "SA", "SQL"], "_": ["Time", "let", "____", "Local", "all", "W", "__", "ate", "val", "D", "L", " the", "T", "Call", "___", "ation"], "A": ["AY", "Auth", "AR", "AA", "H", "C", "AN", "AC", "Al", "R", "IA", "G", "W", "AV", "N", "Abs", "PA", "CA", "AL", "LA", "EA", "Some", "U", "JA", "NA", "E", "O", "As", "AU", "D", "AT", "Array", "All", "HA", "AF", "L", "WA", "GA", "Others", "An", "At", "ICA", "ATA", "mA", "P", "MA", "Java", "AM", "AH", "Only", "And", "AS", "SA", "T", "The", "AP", "AB", "V", "One", "I", "B", "Answer", "Alpha", "Each", "AST", "AE"], "cnt": ["acno", "acnc", "acount", " cnd", "ucno", "Cnd", "acnt", "Cpt", "lcct", "lcount", "cnc", "Ccount", "rcpt", "tcount", "CNT", "acct", "tcno", "acNT", " cpt", "cNT", "tcnc", "Cct", "lcNT", "Count", "ccount", " ccount", "Cnt", "acnd", "tcnt", "rcnt", "lcnt", "ucount", "rcNT", " count", " cNT", "rccount", "ucnc", "ucnt", "cnd", "cct", " cct", "cno", "count", "cpt"], "X": ["Y", "UX", "K", "H", "C", "XL", "AN", "MX", "W", "XY", "N", "Tx", "OX", "XXX", "DX", "AT", "Xi", "L", "An", "P", "Q", "ZX", "XM", "T", "AS", "XP", "XX", "Z", "V", "I", "Ex", "IX", "TX", "XT"], "ANS": ["ENS", "AND", "ATIONS", "ANN", "ANA", "AN", "ONS", "VERS", "ANG", "WS", "ANK", "SAN", "ANT", "OUS", "EN", "ENA", "OS", "ATION", "ASC", "CN", " Ans", "ATES", "ADS", "LES", "INS", " TRANS", "rans", "IONS", "URN", "NRS", "IS", "ONES", "OSS", "ATS", "NS", "CAN", "AT", "US", "WA", "ERS", "An", "LAN", "YS", "ATA", "TS", "AS", "MAN", "\u30a2", " spans", " AN", "VIS", "ON", "AST", "STD", "ants", "SA", "IDS"], "c": ["z", "f", "m", "C", "l", "cs", "t", "bc", "con", "ci", "r", "rc", "ch", "v", "co", "b", "lc", "g", "cc", "ct", "d", "p", "can", "e", "dc", "n", "nc", "ac", "cu", "u", "tc", "count"], "a": ["ba", "apa", "ae", "ta", "t", "sta", "au", "ga", "xa", "ax", "ca", "ach", "at", "la", "pa", "wa", "na", "ea", "an", "b", "area", "p", "alpha", "ao", "count", "oa", "sa", "ai", "ata", "aa", "ac", "n", "sha", "ma", "o", "ia", "ab", "ar", "ana", "am", "aff"], "x": ["z", "xp", "ux", "xy", "l", "y", "t", "name", "ix", "xa", "ax", "xx", "xb", "v", "Tx", "xt", "dx", "wx", "ct", "fx", "p", "rx", "xc", "ox", "xe", "cross", "xi", "n", "px", "xf", "on", "an", "Ax", "xd", "tx", "inx"], "i": ["z", "ini", "ri", "zi", "uri", "l", "y", "ix", "iy", "ti", "s", "ip", "ci", "\u0438", "ji", "gi", "v", "ij", "hi", "index", "ori", "ki", "phi", "b", "yi", "ind", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "ii", "xi", "si", "iri", "ic", "n", "li", "I", "ia", "ui", "mi", "iu", "im"], "ans": ["ens", "cas", "lines", "ls", "names", "ONS", "ANN", "AN", "ais", "ANT", "amps", "ms", "ars", "ins", "aus", "ns", "ons", "anas", "ann", "ags", "aps", "aces", "aos", " sans", "ians", "rans", "IONS", "eds", "ids", "ATS", "rows", "An", "uns", "ints", "anes", "ads", "ats", "anks", "ana", "an", "ants"]}}
{"code": "h, w, k = map(int, input().split())\\ns = [list(map(int, list(input()))) for _ in range(h)]\\nresult = []\\nif h*w<=k:\\n    result.append(0)\\nelse:\\n    for i in range(2**(h-1)):\\n        checker, num, p = 0, i ,[0]\\n        for _ in range(h):\\n            p.append(p[-1]+num%2)\\n            checker += num%2\\n            num >>= 1\\n        x = 0\\n        c = [0 for _ in range(checker+1)]\\n        for j in range(w):\\n            num = i\\n            nex = [0 for _ in range(checker+1)]\\n            for m in range(h):\\n                nex[p[m]] += s[m][j]\\n            if max(nex) > k:\\n                x = float('inf')\\n                break            \\n            \\n            if all(nex[m]+c[m] <= k for m in range(checker+1)):\\n                c = [c[I]+nex[I] for I in range(checker+1)]\\n            else:\\n                x += 1\\n                c = nex\\n        result.append(checker+x)\\nprint(min(result))", "target": "329", "substitutes": {"h": ["f", "ph", "he", "H", "kh", "hm", "l", "ha", "y", "t", "bh", "r", "ch", "v", "history", "ho", "hs", "hi", "q", "b", "th", "hd", "ih", "oh", "ht", "hw", "hl", "n", "hr", "o", "hh", "sh", "his", "hp"], "w": ["z", "nw", "ws", "iw", "win", "wh", "wed", "y", "t", "W", "ow", "wd", " W", "r", "sw", "v", "wig", "wa", "wx", "q", "wl", "wn", "wb", "we", "wr", "work", "wk", "d", "window", "rw", "hw", "word", "kw", "wt", "ew", "wid", "n", "wal", "wp", "wi", "width"], "k": ["z", "f", "max", "K", "kr", "kh", "ka", "y", "ck", "kl", "ikk", "kick", "kk", "ke", "v", "ket", "mk", "q", "g", "ak", "unk", "kn", "wk", "ik", "km", "kj", "ek", "kw", "it", "n", "o", "sk", "ko", "ku", "ks"], "s": ["ps", "sys", "stats", "ws", "sv", "ls", "a", "cs", "rs", "l", "xs", "ins", "ns", "r", "strings", "sp", "v", "services", "es", "ys", "b", "S", "csv", "ss", "sa", "sb", "so", "ses", "n", "si", "ts", "js"], "_": ["let", "____", "all", "t", "ing", "W", "M", "__", "place", "val", "get", "___", "ation"], "result": ["done", "diff", "out", "successful", "function", "message", "found", "report", "relation", "comment", "ret", "section", "chain", "case", "back", "memory", "final", "output", "answer", "res", "r", "buffer", "created", "status", "now", "database", "comb", "match", "true", "profile", "complete", "use", "test", "directory", "trace", "power", "next", "command", "zero", "total", "product", "results", "current", "collection", "search", "Result", "cache", "error", "table", "void", "sequence", "response", "list", "success", "space", "data", "lower", "description"], "i": ["mu", "z", "f", "gm", "a", "l", "y", "t", "ed", "ip", "r", "v", "ij", "b", "phi", "g", "ie", "ind", "id", "di", "d", "bi", "pi", "e", "it", "int", "si", "n", "o", "ma", "li", "ic", "u", "mi", "iu", "im", "init"], "checker": ["Checkr", "Checkener", "markiler", "lockiner", "feedter", "failler", "lockker", "feedr", "checkederer", "lockder", "checkediner", "cleaniner", "checkger", "checkter", "checkiler", "iterder", "markker", "checktimer", "checkeder", "tester", "iterler", " checkler", "lockler", " checkker", " checkiler", "testener", "caller", " checkiner", "readler", "checkner", "failiner", "viewiter", " checkner", " checkr", "checkker", "failter", "cleanler", "checkedtimer", "checkerer", "callter", "viewter", "calliner", "feeder", "checkder", "readiner", "calltimer", "checkiner", "callger", "markner", "reader", "checkedter", "iterer", "checkler", "viewer", "testtimer", "cleanter", "viewger", " checkener", "cleanerer", "checkener", "Checker", "feedener", "callener", " checkter", "checkedener", "lockner", "checkr", "lockiler", "cleaner", "calliter", "failer", "locker", "Checkiter", "Checkger", "iteriner", "checkedler", "readder", " checkerer", "Checkter", "marker", "testiner", "checkiter"], "num": ["mu", "f", "Num", "nom", "sum", "conv", "mon", "tim", "name", "number", "nr", "nam", "con", "info", "final", "dim", "mn", "nm", "en", "un", "div", "msg", "ho", "cal", "ver", "na", "co", "index", "mod", "th", "nu", "nb", "mem", "d", "mult", "alpha", "col", "sam", "om", "ident", "cmp", "int", "np", "coord", "n", "cum", "u", "no", "NUM", "um", "pn"], "p": ["ps", "f", "pt", "pr", "ap", "a", "l", "y", "t", "pb", "pp", "ip", "jp", "tp", "r", "sp", "pa", "g", "mp", "er", "pi", "cp", "lp", "P", "np", "pc", "n", "o", "u", "wp", "pn"], "x": ["z", "f", "max", "rex", "xp", "X", "a", "hex", "xy", "y", "t", "ext", "ix", "xs", "xa", "xx", "ax", "r", "v", "check", "xml", "xt", "dx", "wx", "index", "mx", "ex", "ct", "fx", "alpha", "rx", "exp", "xc", "e", "ox", "xe", "xi", "n", "o", "px", "u", "checked", "xf", "on", "xd", "tx"], "c": ["z", "f", "sc", "mc", "C", "cat", "a", "cs", "l", "t", "y", "con", "ci", "cb", "rc", "r", "ch", "ca", "v", "co", "b", "lc", "g", "gc", "cn", "cc", "ct", "unc", "d", "cp", "ec", "xc", "e", "dc", "fc", "pc", "n", "nc", "tc", "cu", "ic", "ac", "u", "cm", "count"], "j": ["z", "ja", "l", "y", "t", "ip", "jp", "ji", "r", "ch", "v", "ij", "q", "b", "g", "d", "bi", "kj", "e", "it", "jj", "jump", "J", "n", "o", "li", "u", "uj", "im"], "nex": ["iw", "nic", "rez", "tin", "cs", "ck", "xa", "nec", "expr", "xx", "tex", "xon", "nv", "zer", "ston", "cki", "nl", "js", "nn", "rex", "ws", "atten", "ext", "number", "xs", "nm", "json", "na", "nexus", "ex", "nox", "test", "ew", "nz", "nc", "ez", "n", "nes", "cus", "nt", "sex", "ix", "nr", "ed", " unex", "esis", "stab", "ross", "nat", "nil", "none", " Nex", "nor", "mson", "nel", "ic", "tion", "tes", "athan", "ner", "nw", "des", "xes", "cons", "ns", "mn", "son", "res", "es", "ng", "sn", "ther", "von", "ny", "ce", "uan", "null", "oa", "ne", "pex", "ox", "cross", "mate", "ats", "pn", "tx"], "m": ["z", "f", "gm", "min", "mc", "mon", "am", "a", "l", "y", "t", "M", "mn", "r", "v", "em", "sym", "bm", "pm", "an", "b", "mut", "g", "mp", "ind", "er", "id", "dm", "d", "vm", "man", "pi", "mt", "om", "e", "it", "n", "o", "u", "Mi", "mm", "on", "um", "mi", "im", "cm"], "I": ["Y", "Num", "K", "H", "C", "Si", "X", "F", "IC", "R", "Index", "N", "M", "HI", "MI", "A", "Iter", "U", "Id", "Int", "E", "O", "IJ", "D", "Xi", "Is", "L", "pi", "P", "Im", "IM", "T", "J", "Z", "V", "Ind", "B", "Mi", "IX", "mi", "It", "im", "II", "DI"]}}
{"code": "import math\\n\\ndef solve(y, z):\\n  res = 0\\n  for i in range(len(y)):\\n    res += (y[i]-z[i])**2\\n  return math.sqrt(res)\\n\\nn, d = map(int, input().split())\\nx = [list(map(int, input().split())) for _ in range(n)]\\nans = 0\\nfor i in range(n-1):\\n  for j in range(i+1, n):\\n    dist = solve(x[i], x[j])\\n    if int(dist) == dist: ans += 1\\nprint(ans)", "target": "182", "substitutes": {"y": ["Y", "yo", "ey", "yl", "yn", "ay", "a", "my", "xy", "yu", "py", "yer", "iy", "oy", "sy", "yy", "yt", "v", "ys", "gy", "b", "ies", "yi", "ny", "fy", "ry", "ya", "uy", "ye", "yr", "cy", "vy", "yd", "sky"], "z": ["yz", "ld", "oz", "zi", "zip", "xy", "zy", "iz", "uz", "s", "os", "hz", "v", "az", "cz", "c", "zh", "b", "q", "ze", "tz", "zer", "zen", "zone", "zes", "zu", "ez", "Z", "zo", "ll"], "res": ["rand", "ress", "pro", "med", "obj", "pr", "des", "grid", "reset", "red", "ret", "rs", "cons", "cs", "result", "ms", "s", "expr", "rc", "r", "gr", "prof", "resh", "q", "ther", "yes", "ref", "rss", "sim", "re", "mem", "act", "vol", "RES", "rem", "pres", "reg", "rel", "resolution", "Res", "dr", "req", "norm", "js", "rt", "sol", "tx"], "i": ["io", "ini", "ei", "ri", "zi", "m", "a", "ir", "l", "ix", "iy", "ti", "info", "ip", "ci", "jp", "gi", "v", "ij", "hi", "index", "ori", "ki", "phi", "yi", "ie", "ind", "id", "di", "ik", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "ui", "mi", "iu", "im"], "n": ["nn", "nia", "m", "a", "l", "nt", "t", "s", "N", "len", "ns", "r", "mn", "k", "v", "na", "c", "ln", "an", "q", "b", "nd", "g", "sn", "cn", "nu", "nb", "num", "p", "dn", "ne", "np", "nan", "nc", "o", "w", "no"], "d": ["f", "m", "l", "t", "dict", "dd", "dim", "den", "r", "dt", "sd", "c", "q", "b", "g", "ind", "D", "dm", "di", "de", "p", "da", "dir", "ds", "e", "dc", "w", "data"], "x": ["f", "ls", "xes", "X", "hex", "ux", "xy", "l", "t", "ix", "xs", "s", "xa", "ax", "xx", "v", "check", "history", "xt", "xml", "wx", "index", "q", "mx", "ex", "ctx", "p", "rx", "act", "xc", "e", "ox", "xe", "search", "xi", "lex", "w", "u", "xf", "data", "xd", "tx"], "_": ["ix", " m", "ip", "ij", " __", " p", " pos", "ik", " l", " the", "ox", " k", "J", "I", "li", " f", " g"], "ans": ["ens", "stats", "ls", "ones", "oss", "ran", "cs", "rs", "cons", "amps", "xs", "s", "ins", "ms", "aus", "ns", "ons", "outs", "ann", "acs", "aps", "aos", "arts", "angs", "ums", "rans", "eds", "ies", "yes", "ids", "ANS", "ds", "uns", "ai", "offs", "ams", "ads", "ras", "ats", "ros", "aints", "ts", "an", "ks", "ants"], "j": ["f", "obj", "jl", "m", "ja", "l", "jp", "k", "ji", "r", "v", "ij", "h", "q", "b", "ian", "g", "jac", "ind", "p", "bi", "br", "kj", "jj", "jump", "aj", "J", "ii", "o", "uj", "dj", "bj", "js", "jc"], "dist": ["ps", "det", "diff", "des", "sum", "pred", "desc", "range", "df", "rep", "red", "dev", "nt", "pos", "s", "dd", "dim", "ns", "err", "sd", "dx", "dis", "distance", "ind", "test", "di", "p", "der", "da", "dir", "ds", "act", "ne", "cd", "dy", "dj", "rel", "dr", "norm", "rt", "Dist", "md"]}}
{"code": "import sys, itertools\\nprint(len(set(itertools.islice(sys.stdin.buffer, 1, None))))", "target": "326", "substitutes": {}}
{"code": "\\ns = input()\\nn = int(input())\\n\\nhanten=0\\ns1=\"\"\\ns2=\"\"\\nfor i in range(n):\\n    Q = input()\\n    if int(Q[0])==1:\\n        hanten+=1 \\n    elif int(Q[0])==2 :\\n        if hanten%2 == int(Q[2])-1 :\\n            s1= s1+Q[4]\\n        else:\\n            s2= s2+Q[4]\\n\\ns1 = s1[::-1]\\ns = s1+s+s2\\n\\nif hanten%2 :\\n    s = s[::-1]\\nprint(s)        \\n\\n\\n\\n", "target": "292", "substitutes": {"s": ["ps", "stats", "sts", "str", "f", "sv", "ls", "m", "fs", "a", "spec", "cs", "rs", "t", "se", "gs", "l", "ins", "ms", "ns", "r", "prints", "v", "sp", "strings", "sd", "es", "c", "sl", "h", "q", "b", "g", "sg", "S", "string", "p", "ss", "less", "ds", "sa", "sb", "ses", "abs", "bs", "w", "sq", "tes", "ats", "south", "x", "sh", "ts", "qs", "sol"], "n": ["nn", "nia", "m", "l", "nt", "t", "nr", "N", "len", "ns", "mn", "k", "en", "r", "v", "na", "c", "ln", "sn", "q", "h", "g", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "nor", "np", "nc", "nl", "x", "count"], "hanten": ["hantener", " hantatten", "hartlen", "ahantingian", "hantatten", "hANTian", "hantiener", "hartener", "ahanten", "hantingen", "hantn", " hantlen", "hantsn", "hartatten", "hantsatten", "hANTe", "hante", "hantlen", "hantedon", " hantener", "ahantian", "ahANTeni", "hanteni", "hartan", "ahANTener", "ahANTen", "hantinglen", "hantsen", "hantian", "harten", "hantslen", "hantingan", "hantingens", "hantingener", "ahanteni", " hantingatten", "hantion", "hantingon", "hantens", "harton", "hstantian", "hANTen", "hantien", "hantingn", "hantan", "hstantens", "hantedeni", "hANTeni", "ahantens", "ahanton", "hANTens", "ahantener", "ahANTon", "ahantingen", "ahantinge", " hantingen", " hantingan", "hantinge", " hanton", " hantingn", "hstante", " hantinglen", "ahantingens", "hantedener", "hanteden", "hantingian", "ahante", " hantn", "hartn", "hantingatten", " hantingener", " hantingon", "hANTener", "hanton", " hantan", "hANTon", "hstanten"], "s1": ["gs1", "s0", "ts2", " s001", "sol1", "s001", "S2", " s01", " s3", "sspre", "S4", "ss1", "S3", "tspre", "sol3", "rs0", "save91", "sts1", "S1", "sol2", " spre", " s91", "s91", " sone", "Sone", "ls0", "gs2", "os1", "ls1", "ss2", "rs1", "ls01", " s4", "s4", "gsone", "sts0", "os3", "save1", "gs4", "ts1", "sone", " s0", "saveons", "sons", "os2", "spre", "sol4", "os001", "s01", "ls001", "rs01", "save0", "rs001", "S001", " sons", "stsons", "s3", "sts91"], "s2": ["s0", "ts2", "S2", " s3", "sacbis", "servbis", "S3", " sleft", "ts0", "S1", "sleft", "s02", "ts3", "S0", "ts1", "sacleft", "ts02", " s0", " sbis", "sbis", " s02", "servleft", "serv2", "S02", "serv02", "sac2", "s3", "sac02"], "i": ["f", "y", "ix", "by", "r", "k", "gi", " j", "c", "q", "b", "ind", "id", "p", "j", "e", "it", "li", "I", "u", "iter", "x", "um", "im"], "Q": ["Y", "QU", "Qual", "Config", "K", "CH", "DB", "IP", "H", "C", "MQ", "X", "Ch", "Long", "F", "Question", "G", "Check", "Tip", "IV", "NB", "Query", "M", "HQ", "Type", "U", "Box", "Rich", "q", "Client", "Ray", "E", "Complete", "D", "Gate", "Control", "Array", "L", "Filter", "QB", "P", "Maybe", "Queue", "Field", "Zone", "T", "Entry", "J", "Z", "Answer", "V", "I", "Form", "B", "Qu", "Test", "IX", "UE", "CP", "Context", "IQ", "TL"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\ncnt = 0\\nfor i in range(3**N):\\n    ii = i\\n    res = 1\\n    for j in range(N):\\n        k = ii % 3\\n        ii = ii // 3\\n        res *= (A[j]-1+k)\\n    if res % 2 == 0:\\n        cnt += 1\\nprint(cnt)", "target": "282", "substitutes": {"N": ["Num", "K", "H", "C", "X", "F", "Sn", "R", "Ni", "G", "NB", "NI", "M", "NR", "MN", "Na", "NP", "S", "O", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "No", "Q", "T", "GN", "J", "Z", "n", "V", "I", "PN", "B", "Ns", "NN", "NH"], "A": ["Y", "K", "AI", "AA", "Ar", "H", "C", "X", "API", "a", "R", "G", "M", "CA", "LA", "U", "Av", "NA", "S", "As", "D", "AT", "Array", "AF", "L", "GA", "An", "mA", "P", "T", "Rap", "AB", "AP", "V", "Answer", "I", "B", "Alpha", "SA"], "cnt": ["acnc", "acnt", "Cpt", "cnc", "rcpt", " cot", "cot", "CNT", "rcct", "Cnc", "rcot", "acNT", " cpt", "cNT", "Cct", "Cnt", "rcnc", "rcnt", "rcNT", " cret", " cNT", "Cret", "acret", " cnc", "cct", " cct", "cret", "Cot", "cpt"], "i": ["io", "ini", "zi", "ir", "l", "y", "t", "ti", "info", "ip", "ci", "r", "v", "ij", "c", "ki", "ie", "ind", "id", "ik", "bi", "pi", "ai", "it", "int", "xi", "si", "n", "ic", "I", "li", "ia", "x", "iti", "iu", "im"], "ii": ["ini", "ei", "zi", "ta", "ires", "ice", "ir", "iii", "ni", "ios", "ix", "iy", "sci", "ti", "nr", "info", "ci", "ati", "chi", "gi", "hi", "ki", "phi", "ami", "wi", "irm", "ie", "ind", "init", "iat", "iam", "alpha", "pi", "qi", "ai", "xi", "si", "iri", "li", "ia", "mini", "mi", "iu", "II", "igi"], "res": ["z", "ress", "ps", "rest", "max", "out", "obj", "ri", "one", "reset", "rez", "red", "cs", "cons", "resources", "result", "ms", "step", "r", "err", "gr", " Res", "resh", "q", "ther", "re", "crit", "exp", "zero", "resource", "ne", "RES", "conf", "si", "cu", "rem", "resolution", "Res", "req", "prime", "ser", "sol", "js", "init"], "j": ["z", "f", "obj", "ion", "jl", "m", "ja", "xy", "l", "y", "t", "ix", "jp", "ji", "r", "v", "json", "ij", "c", "job", "q", "b", "h", "g", "jac", "p", "kj", "jj", "jump", "aj", "J", "n", "jam", "o", "uj", "dj", "bj", "js", "jc"], "k": ["z", "K", "m", "kr", "kh", "ka", "ck", "kl", "kk", "kan", "ke", "kid", "r", "sch", "ket", "mk", "ki", "q", "ak", "ijk", "wk", "ik", "km", "kj", "ek", "kw", "tk", "n", "sk", "ko", "ku", "ks"]}}
{"code": "#\u5168\u4f53\u7684\u306a\u65b9\u91dd\\n#\u6d45\u3044\u307b\u3046\u304b\u3089\u8caa\u6b32\u306b\u9802\u70b9\u3092\u500d\u5316\u3057\u3066\u3044\u304f\\n#\u73fe\u5728\u898b\u3066\u3044\u308b\u6bb5\u306e\u9802\u70b9\u6570\u304c\u305d\u308c\u3088\u308a\u6df1\u3044\u6bb5\u306e\u8449\u306e\u6570\u3092\u8d85\u3048\u308b\u3068\u4f59\u3063\u3066\u3057\u307e\u3046\\n#\u3088\u3063\u3066\u3001min\u3067\u62bc\u3055\u3048\u3064\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b(\u7d2f\u7a4d\u548c\u3067\u9ad8\u901f\u5316\u304c\u5fc5\u8981)\\n\\n\\n#\u7d2f\u7a4d\u548c\u306e\u5b9a\u7fa9\\ndef Csum(a):\\n    b,c=[],0\\n    for i in range(len(a)):\\n        c+=a[i]\\n        b.append(c)\\n    return b\\n\\n#n:\u4e8c\u5206\u6728\u306e\u6df1\u3055\\n#a:\u305d\u308c\u305e\u308c\u306e\u6bb5\u6570\u306e\u8449\u306e\u6570\\n#s:a\u306e\u7d2f\u7a4d\u548c\u3092\u3068\u3063\u305f\u3082\u306e(\u305d\u306e\u6df1\u3055\u3088\u308a\u3082\u6d45\u3044\u8449\u306e\u6570)\\n#su:a\u306e\u7dcf\u548c(\u5168\u4f53\u306e\u8449\u306e\u6570)\\n#b:\u73fe\u5728\u306e\u6df1\u3055\u306e\u9802\u70b9\u6570\\n#c:\u73fe\u5728\u307e\u3067\u306e\u9802\u70b9\u6570\\n\\nn=int(input())\\na=list(map(int,input().split()))\\ns,su,b,c=Csum(a),sum(a),1,0\\nfor i in range(n+1):\\n    #\u9802\u70b9\u6570\u30ab\u30a6\u30f3\u30c8\u306b\u73fe\u5728\u306e\u6bb5\u3092\u52a0\u7b97\\n    #\u8449\u306e\u6570\u3060\u3051\u89aa\u306e\u5019\u88dc\u3092\u6e1b\u3089\u3057\u3066\u304a\u304f\\n    c+=b\\n    b-=a[i]\\n    #\u6700\u5f8c\u307e\u3067\u9802\u70b9\u3092\u4f7f\u3044\u5207\u3063\u305f\u306a\u3089c\u3092\u51fa\u529b\\n    #\u9014\u4e2d\u3067\u9802\u70b9\u304c\u8db3\u308a\u306a\u304f\u306a\u3063\u305f\u3089-1\u3092\u51fa\u529b\\n    if b<=0:\\n        if i==n and b==0:\\n            print(c)\\n        else:\\n            print(-1)\\n        break\\n    #\u6b21\u306e\u6bb5\u306e\u9802\u70b9\u6570\u306e\u66f4\u65b0\\n    #i\u3088\u308a\u6df1\u3044\u8449\u306e\u6570(su-s[i])\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\\n    b=min(b*2,su-s[i])", "target": "625", "substitutes": {}}
{"code": "n = int(input())\\njisho = {}\\ns = list(input())\\nfor w in s:\\n    if w in jisho:\\n        jisho[w] += 1\\n    else:\\n        jisho[w] = 1\\n\\nfor _ in range(n - 1):\\n    s = list(input())\\n    temp = {}\\n    for w in s:\\n        if w in temp:\\n            temp[w] += 1\\n        else:\\n            temp[w] = 1\\n    for key, val in jisho.items():\\n        if key in temp:\\n            jisho[key] = min(jisho[key], temp[key])\\n        else:\\n            jisho[key] = 0\\nkouho = []\\nstart = ord(\"a\")\\nfor i in range(start, start + 26):\\n    w = chr(i)\\n    if w in jisho:\\n        kouho += str(w) * jisho[w]\\n    else:\\n        continue\\nprint(*kouho, sep=\"\")\\n", "target": "220", "substitutes": {"n": ["z", "nn", "nia", "names", "m", "l", "nt", "t", "N", "ns", "mn", "k", "v", "na", "c", "sn", "q", "g", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "np", "nan", "nc", "x"], "jisho": ["kjishyoes", "zishfo", " jichoid", "kjishyoo", "jistanod", "jisko", "jishoo", "kjishoo", "jihoid", " jishos", " jisno", " jeshote", " jippo", "jivanoa", "jisoo", "jiishole", "jigho", "jicoote", " jeshos", "jisfo", "jpishoo", " jishoa", "jichO", "jfishole", "jisos", "jishO", "jfisho", "zishoid", "jicoo", "jishom", "jisso", "kjishyo", "jichso", "jicoos", "jishfo", "jistoa", "jistoid", "jiishoa", "jishot", "jisote", "jisO", "jighso", "jiahoa", "jishesos", "jiahole", "jicofo", " jiso", "zichfo", " jisom", "jichot", "jishyos", " jisoo", "jpishos", "jippoin", "jishso", " jishod", "jiiahoid", " jisoid", "jishyoo", "jishesot", "jichole", "jichos", " jishoid", "jippod", "jisom", "jichoa", "jiskoo", "kjishoes", "jishyoes", "jfishoid", " jishom", " jesho", "jiiahoa", "jihno", " jeshfo", " jippoin", "jivano", "jiishoid", "jighfo", "jiahoid", "jiskole", " jishno", "jishoid", "jishod", "zisho", "jishyole", " jippos", "jishno", "jpishingO", "jistos", "jishyo", "jpisho", "jishingos", "jpishO", "jihoa", "jeshos", " jicho", "jishyno", "jishesom", "jfishoa", " jishote", "jisoid", "jishingO", "jippo", "jiskoes", "jihoin", "jistanoo", "jpishingoo", " jisoin", " jisot", "jivanoid", "zishso", "jishingo", "jistanos", "jishos", "jihoo", "jichoo", "jighoid", "jiho", "jippos", "jihod", " jichoa", "jisto", "jishole", "jihos", "kjishole", "jistanoid", "jisno", "jpishingo", "jeshote", " jippod", "jishingoo", "jiisho", "jiiahole", " jishfo", "jiiaho", " jishoo", " jishot", "kjishyole", "jisot", " jishoin", "jpishingos", " jichos", "jichfo", "jistano", "jichoes", "jishoa", "zichoid", "jicho", "jeshfo", "jisoin", "jivanole", "jisheso", "jishote", " jisos", "jichom", "jiaho", "kjisho", "jesho", "jishoin", "zicho", "jiso", "jistanoin", "jishoes", "jichoid", "zichso"], "s": ["ps", "z", "ings", "stats", "ws", "sv", "ls", "m", "a", "l", "rs", "t", "y", "gs", "xs", "ins", "ms", "sec", "ns", "r", "os", "sw", "strings", "v", "es", "c", "h", "ys", "b", "ies", "S", "p", "ss", "j", "less", "sa", "sb", "its", "ims", "time", "ses", "si", "items", "bs", "ats", "ts", "js"], "w": ["iw", "ww", "W", "name", "ow", "sw", "value", "v", "wa", "wx", "h", "g", "we", "read", "kw", "fw", "wid", "no", "x", "wi", "z", "f", "wait", "ws", "m", "t", "wig", "aw", "ex", "man", "end", "hw", "wt", "ew", "o", "wp", "rh", "l", "wat", "wd", "r", "k", "write", "lock", "c", "b", "wb", "wr", "rew", "go", "p", "rw", "wo", "weight", "wal", "on", "requ", "qu", "nw", "wh", "a", "y", "step", "th", "wy", "wk", "d", "window", "ne", "word", "u", "way"], "_": ["ay", "W", "ix", "ow", "name", "sw", " j", " __", " each", " p", " v", "j", " the", " x", " k", "ew", "x", " y"], "temp": ["z", "ps", "emp", "min", "max", "tmp", "pt", "mc", "tm", "m", "params", "pu", "ta", "tim", "l", "sac", "t", "tt", "memory", "ptr", "k", "buffer", "value", "v", "sp", "tar", "c", "length", "index", "h", "g", "tem", "Temperature", "mp", "storage", "test", "mem", "p", "count", "j", "pi", "stem", "total", "Temp", "valid", "current", "vt", "tr", "cache", "txt", "tc", "template", "time", "unt", "mm", "ts", "mint", "data", "sol", "tx", "st", "perature"], "key": ["name", "ver", "value", "v", "wa", "h", "q", "g", "num", "kw", "mac", "set", "x", "pot", "pg", "obj", "m", "ice", "prop", "ke", "ch", "ex", "ind", "KEY", "keys", "cy", "item", "str", "by", "kk", "k", "c", "ak", "ie", "te", "p", "j", "ek", "et", "loc", "on", "primary", "type", "rand", "ey", "a", "my", "chain", "y", "case", "ip", "code", "id", "title", "char", "Key", "col", "null", "pi", "ox", "it", "int", "var", "base"], "val": ["tu", "values", "hop", "ele", "what", "elt", "name", "ti", "res", "value", "v", "item", " v", "pair", "test", "typ", "Key", " value", "word", "new", "sel", "Value", "var", "vals", "Val", "wi", "aval", "tx"], "kouho": ["koulho", "kouko", "koudpha", "kounho", " koudfo", " koudko", "kcuphi", "kupha", "kuphi", "Koudho", "Kouphi", "koulphi", "koveho", "koulfo", "Koudfo", "koudpo", "koudfo", "Kouho", "koufo", "kounfo", " kouko", "ikoupha", "koudho", "koupo", "kouphi", " koudho", "kovefo", " kouhi", "koudphi", "kauho", "ikufo", "ikuphi", "kounko", "kounhi", "ikuho", "koulpo", " koufo", "Koudphi", "Koudpo", "kcufo", "ikouphi", "koveko", "kufo", "kuho", "kaufo", "kcuho", "kauphi", "koupha", " koudhi", "Koufo", "ikoufo", "Koupo", "kaupo", "kovehi", "koudhi", "kcupha", "ikouho", "ikupha", "koudko", "kouhi"], "start": ["rest", "add", "origin", "offset", "m", "range", "pad", "a", "shift", "y", "starting", "step", "r", "k", "root", "sp", "birth", "index", "g", "id", "init", "d", "next", "p", "power", "char", "j", "end", "pi", "get", "seed", "it", "int", "current", "art", "first", "star", "set", "stop", "x", "Start", "begin", "st"], "i": ["f", "ini", "ri", "zi", "m", "a", "y", "ti", "ip", "ci", "k", "v", "gi", "gu", "c", "hi", "index", "ki", "q", "b", "yi", "id", "di", "d", "p", "j", "pi", "e", "ai", "it", "ii", "xi", "si", "ic", "I", "li", "u", "x", "mi", "iu"]}}
{"code": "n = int(input())\\ninp = list(map(int,input().split()))\\ninp.reverse()\\nfor i in range(n-1):\\n\tprint(inp[i],\" \",sep=\"\",end=\"\")\\nprint(inp[n-1])", "target": "248", "substitutes": {"n": ["nw", "nia", "names", "m", "l", "nt", "t", "name", "s", "N", "len", "ns", "mn", "k", "en", "v", "na", "c", "long", "ln", "sn", "q", "h", "nd", "an", "cn", "nu", "nb", "num", "d", "size", "p", "gain", "dn", "count", "j", "network", "ne", "net", "gn", "np", "got", "nan", "nc", "o", "no", "nl", "norm", "ll", "always"], "inp": ["insp", "INj", "innP", "intpart", "inps", "inv", "insps", " Inpad", "intp", "INpr", "inP", " Inp", " inps", "Insp", "INpad", " ninpost", "innpad", "intpost", " ninq", " insp", "Inj", " Inpr", " inv", "inj", "Inv", "Inps", "INp", " inpost", "innpr", "INP", " inq", "Inp", " ninpart", "inpad", "inssp", "insv", "inpost", "inq", "inpart", "intq", "INsp", " inpart", " ninp", " inj", "INq", "inpr", " InP", "innp", "Inq"], "i": ["z", "f", "ini", "zi", "m", "ti", "s", "key", "ci", "r", "ji", "v", "gi", "ij", "hi", "index", "ori", "yi", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ii", "xi", "batch", "ic", "li", "I", "me", "x", "ui", "mi", "im", "init"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees#, log2, log\\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left, insort, insort_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\nfrom decimal import Decimal\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10**9 + 7\\nfrom decimal import *\\n\\na, b = MAP()\\n\\nif a*b <= 0:\\n\tprint(\"Zero\")\\nelif (b-a+1)%2 and b < 0:\\n\tprint(\"Negative\")\\nelse:\\n\tprint(\"Positive\")", "target": "725", "substitutes": {}}
{"code": "n = int(input())\\n\\nlst = [2, 1]\\nfor i in range(100):\\n    lst.append(lst[-1]+lst[-2])\\nprint(lst[n])", "target": "50", "substitutes": {"n": ["z", "f", "nn", "m", "a", "l", "nt", "t", "name", "s", "N", "ns", "nm", "k", "v", "na", "c", "sn", "q", "b", "h", "g", "nu", "nb", "num", "d", "p", "j", "ne", "np", "nan", "nc", "w", "no", "nl", "x"], "lst": ["lsts", "albl", "dlnt", "lbst", "lbnt", "lust", "llust", "lrst", "llnt", "alsts", "lut", "lrust", " llist", "alut", "lnt", "lck", "dlst", "lsist", "llbl", "alnd", "lsst", "klnt", "lrck", "lnd", " lsts", " lbl", "alst", "llst", "llnd", "llsts", "lsut", "dlbl", "dlnd", "llstab", "llist", "lstab", "alist", " lust", "lbust", "klbl", "lbl", " lnd", "klnd", " lut", "klst", "llck", "lrnt", "lbstab", "list", "lslist", " lstab", " list", "allist", " lck", " lnt"], "i": ["f", "l", "y", "ix", "r", "k", " j", "c", "h", "q", "ind", "id", " ii", "p", "j", "e", "it", "ii", "I", "iter", "x", "im"]}}
{"code": "S = str(input())\\nweek = ['SAT','FRI','THU','WED','TUE','MON','SUN']\\n\\nfor i in range(7):\\n  if S == week[i]:\\n    print(i+1)", "target": "471", "substitutes": {"S": ["Y", "BS", "String", "SI", "ALL", "H", "C", "SS", "F", "R", "G", "W", "JS", "s", "N", "M", "ASC", "A", "CSS", "U", "IS", "E", "DS", "D", "US", "SU", "L", "P", "Q", "T", "SA", "J", "Z", "V", "I", "B", "CS", "GS", "BY"], "week": ["f", " Week", "date", "field", "night", "section", "ww", "W", "day", "eight", "ow", "month", "row", "wall", "sec", "colour", "quarter", " weekday", "news", "now", "start", "we", "Week", "hour", "work", "ss", "window", "word", "time", "league", "fw", "weekly", "w", "season", "year", "rule", "unit"], "i": ["z", "f", "ini", "zi", "iq", "m", "y", "ix", "iy", "ti", "s", "ip", "ci", "ji", "v", " j", "gi", "ij", "ori", "index", "ki", "q", "b", "yi", "sim", "ind", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "n", "ic", "I", "li", "x", "ui", "mi", "im"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nN, K = map(int, input().split())\\nA = list(map(int, input().split()))\\nL = 50\\ndp = [[-float('inf')]*2 for _ in range(L+1)]\\ndp[0][0] = 0\\n\\nfor i in range(L):\\n    Ki = (K>>(L-1-i))&1\\n    \\n    for j in range(2):\\n        for k in range(2 if j else Ki+1):\\n            add = 0\\n            \\n            for Ai in A:\\n                add += k^((Ai>>(L-1-i))&1)\\n            \\n            dp[i+1][j|(k<Ki)] = max(dp[i+1][j|(k<Ki)], dp[i][j]+add*2**(L-1-i))\\n            \\nprint(max(dp[L]))", "target": "262", "substitutes": {"input": ["rand", "str", "out", "util", "reset", " Input", "println", "sample", "format", "step", "fn", "raw", "output", "request", "filter", "url", "pull", "pattern", "dq", "start", "q", "insert", "csv", "ref", "Input", "source", "select", "paste", "password", "cmd", "config", "init", "read", "view", "p", "call", "command", "hidden", "context", "next", "form", "get", "inc", "it", "int", "txt", "n", "feed", "print", "gen", "prefix", "data", "PUT", "text", "shift"], "N": ["Name", "Num", "C", "R", "name", "NR", "Len", "NL", "Count", "S", "E", "Input", "D", "All", "NS", "P", " I", "n", "V", "I", "Sync", " E", " n", " S"], "K": ["Y", "KA", "KN", "KY", "PK", "KT", "C", "H", "X", "F", "KK", "R", "SK", "G", "Ka", "M", "KB", "KR", "KI", "KS", "S", "VK", "D", "UK", "DK", "P", "Q", "KE", "Sk", "T", "J", "Z", "V", "I", "B", "KC", "MK"], "A": ["Y", "AI", "AA", "C", "AC", "AN", "a", "R", "IA", "CA", "LA", "TA", "EA", "JA", "Av", "S", "As", "AU", "D", "AT", "Array", "AF", "GA", "An", "At", "P", "AM", "AS", "AB", "AP", "V", "I", "B", "Ax", "SA"], "L": ["LV", "DL", "Level", "H", "C", "LR", "Long", "F", "R", "LE", "l", "SL", "LS", "ML", "LM", "M", "LT", "LG", "LU", "Left", "LA", "Length", "Len", "EL", "NL", "LO", "U", "S", "O", "LIN", "GL", "D", "RL", "CL", "Language", "P", "LC", "List", "T", "LI", "J", "V", "FL", "I", "dL", "B", "LP", "Li", "LL", "TL"], "dp": ["ps", "tmp", "deb", "adr", "bsp", "df", "pkg", "wd", "gp", "pb", "dd", "ip", "lip", "pp", "jp", "dt", "tp", "db", "dx", "vp", "dq", "split", "fp", "csv", "mp", "isp", "dm", "pd", "d", "du", "dl", "p", "dep", "lp", "ds", "cp", "td", "dial", "dc", "np", "lr", "DP", "dh", "bps", "px", "dj", "wp", "dr", "hp"], "_": ["ay", "all", "ix", "ip", "ul", " __", "ct", "val", "ml", "ik", "ai", " x", "J", "ac", "aj", "I", "x", "an", "new"], "i": ["z", "f", "ini", "ei", "ri", "zi", "m", "a", "l", "y", "t", "ix", "ti", "info", "ip", "ci", "\u0438", "ji", "r", "gi", "v", "ij", "hi", "index", "ki", "phi", "ind", "id", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "iter", "x", "ui", "mi", "iu", "im"], "Ki": ["Aj", "Qualiu", "Quala", "AI", "Nij", "Psi", "Nj", "Kiu", "PKj", "Qualij", "Ni", "Qualis", "NI", "Ka", " Kij", " Kiu", "UKis", "Kai", "Na", "Ksi", "Kj", "Kis", "KI", "A1", "PK1", "Quali", "Kii", "SKii", "Pi", "Pai", "Kij", "SKi", "SKis", " Ka", "Qualii", "PKiu", " Kj", "UKiu", "UKii", "UKi", " K1", "PKi", "Nsi", "Asi", "PI", "K1", "Qualj", "Aai", "Aiu", "SKiu", "Nai"], "j": ["z", "obj", "ion", "jl", "ja", "l", "y", "ix", "jp", "ji", "r", "adj", "err", "v", "json", "ij", "h", "q", "b", "jac", "ijk", " J", "p", "br", "oj", "kj", "jas", "it", "jj", "jump", "aj", "J", "n", "ju", "uj", "dj", "li", "u", " Dj", "x", "bj", "js", "jc"], "k": ["z", "max", "m", "kr", "kind", "kt", "kh", "a", "uk", "ka", "l", "ck", "kl", "ikk", "ok", "kk", "key", "ke", "r", "kid", "kan", "v", "kar", "c", "mk", "ki", "q", "ak", "unk", "ijk", "ik", "UK", "p", "alpha", "km", "kj", "ek", "none", "kw", "jj", "tk", "kick", "u", "sk", "ko", "ku", "ack"], "add": ["Add", "create", "sum", "load", "ADD", "a", "att", "cond", "ord", "acc", "wd", "fill", "append", "au", "push", "make", "dd", "step", "apply", "adj", "en", "div", "sd", "extra", "q", "post", "mod", "ate", "d", "change", "remove", "do", "mult", "end", "send", "trans", "late", "inc", "each", "aj", "ad", "feed", "set", "update", "attach", "new", "init"], "Ai": [" Ali", "aci", "GAis", "TAiu", "TAi", " Aci", "GAiu", "TAis", "Eai", "Uoi", "TAai", "Aci", "Eiu", "Ei", "Eis", "Ais", "GAi", "Uci", "ai", "GAai", "Uli", "Ui", " Aoi", "Ali", "Aai", "ali", "Aiu", "Aoi", "aoi"]}}
{"code": "n,m = map(int, input().split())\\n\\nanswer= (n-1)*(m-1)\\n\\nprint(answer)", "target": "192", "substitutes": {"n": ["nw", "nn", "nia", "nt", "t", "name", "N", "i", "ns", "r", "k", "en", "mn", "v", "na", "c", "long", "ln", "sn", "q", "h", "ot", "nu", "nb", "num", "d", "p", "dn", "j", "network", "ne", "net", "np", "nc", "o", "nl", "x", "norm", "on", "ll"], "m": ["mu", "gm", "mc", "mas", "hm", "mus", "ms", "i", "M", "mn", "r", "v", "perm", "mis", "c", "bm", "h", "mmm", "b", "q", "mx", "dm", "rm", "d", "p", "man", "j", "mt", "mo", "mat", "mos", "mr", "ma", "mm", "mi", "fm", "cm"], "answer": ["ve", " unanswered", "message", "fit", "voice", "rep", "number", "wer", "archive", "result", "say", "reply", "ver", "answered", "value", "output", "status", "interpret", "approximately", "query", "remember", "term", "q", "see", "option", "ask", "word", "results", "search", "Answer", "swers", "response", "support", "question", "viation", "entry", "vert"]}}
{"code": "a,b=map(int,input().split())\\nd=[(a+b),(a-b),(a*b)]\\nprint(max(d))", "target": "175", "substitutes": {"a": ["f", "ba", "el", "m", "am", "ta", "ae", "l", "t", "sta", "af", "ga", "au", "i", "A", "at", "la", "na", "c", "ea", "era", "ity", "g", "area", "power", "p", "da", "alpha", "j", "act", "oa", "aka", "e", "sa", "aa", "aj", "al", "ac", "n", "ma", "ia", "ab", "aaa", "x", "ar", "an", "auto"], "b": ["z", "f", "rb", "ba", "ib", "erb", "m", "mb", "blue", "be", "l", "y", "t", "bc", "back", "i", "cb", "fb", "r", "db", "v", "c", "h", "g", "nb", "bi", "br", "j", "e", "bool", "sb", "it", "gb", "bis", "n", "ob", "ub", "bs", "u", "o", "B", "ab", "bb"], "d": ["z", "f", "done", "ld", "des", "m", "df", "red", "l", "t", "dict", "dd", "r", "db", "dx", "sd", "c", "g", "defined", "D", "di", "de", "pd", "dl", "do", "da", "j", "ds", "e", "dom", "dh", "n", "ad", "w", "fd"]}}
{"code": "S = list(input())\\n\\nans = \"No\"\\n\\nif len(set(S)) == 2:\\n    if S.count(S[0]) == 2:\\n        ans = \"Yes\"\\n\\nprint(ans)", "target": "103", "substitutes": {"S": ["BS", "SI", "Si", "C", "H", "SS", "X", "F", "R", "SL", "G", "PS", "LS", "SM", "SB", "W", "s", "N", "M", "A", "RS", "U", "E", "DS", "D", "SAM", "NS", "SU", "L", "SP", "TS", "P", "Q", "SH", "T", "SF", "SE", "Z", "VS", "V", "I", "B", "CS", "GS", "SA", "Set"], "ans": ["ens", "sv", "des", "oss", "ran", "ean", "aults", "pan", "amps", "s", "ms", "ins", "ars", "aus", "ns", "ons", "outs", "ann", "aps", "aos", "arts", "ents", "arms", "rans", "ys", "said", "eds", "yes", "san", "vs", "ANS", "leans", "helps", "ai", "ams", "ads", "ras", "ats", "us", "ros", "ts", "anks", "an", "ks", "ants", "lan"]}}
{"code": "n = int(input())\\nx = input().split()\\ny = input().split()\\nimport math\\nfor i in range(4):\\n    D = 0\\n    for j in range(n):\\n        if i != 3:\\n            D = D + math.pow(math.fabs(int(x[j]) - int(y[j])),i+1)\\n        else:\\n            compare = math.fabs(int(x[j]) - int(y[j]))\\n            if D < compare:\\n                D = compare\\n    if i != 3:\\n        print('{0:.6f}'.format(math.pow(D,1/(i+1))))\\n    else:\\n        print('{0:.6f}'.format(D))\\n", "target": "325", "substitutes": {"n": ["z", "nw", "nn", "m", "ni", "l", "t", "nt", "nr", "nie", "N", "ns", "mn", "k", "r", "v", "na", "c", "sn", "q", "cn", "nu", "nb", "num", "d", "p", "network", "ne", "np", "nc", "w", "no"], "x": ["z", "xes", "text", "xp", "X", "ux", "xy", "ix", "xs", "xa", "ax", "xx", "www", "input", "v", "xml", "xt", "dx", "wx", "mx", "zx", "ex", "ml", "p", "rx", "xxx", "act", "xc", "ox", "xe", "xxxx", "xi", "px", "lat", "xf", "xd", "tx"], "y": ["Y", "z", "sys", "ym", "ey", "yl", "yo", "yn", "ay", "yout", "my", "xy", "py", "yer", "oy", "yy", "yt", "v", "ys", "gy", "b", "ies", "yi", "wy", "ny", "ry", "ya", "uy", "ye", "axy", "yr", "o", "vy", "cy", "iny", "sky"], "i": ["f", "ini", "ri", "zi", "m", "cli", "ni", "l", "ix", "ti", "info", "s", "ip", "ci", "ji", "ati", "gi", "v", "ij", "c", "index", "phi", "ami", "yi", "ind", "id", "asi", "di", "ik", "d", "iat", "p", "bi", "multi", "pi", "ai", "it", "ii", "xi", "si", "ic", "li", "I", "ia", "iti", "mi", "iu", "im", "ui"], "D": ["DN", "Y", "Return", "Data", "DL", "VD", "DB", "PD", "H", "C", "X", "WD", "F", "Duration", "R", "Do", "Done", "DF", "Date", "DD", "N", "M", "DATA", "Depth", "Ds", "Both", "Length", "Diff", "DEV", "U", "DA", "CD", "TH", "Count", "DER", "DIR", "DX", "E", "DT", "O", "DS", "Part", "New", "d", "DH", "L", "Default", "Die", "JD", "DVD", "DOM", "GO", "P", "DR", "Q", "Display", "DM", "DP", "Result", "J", "T", "V", "I", "B", "DE", "DC", "MD", "Delta", "DO", "DI"], "j": ["z", "str", "obj", "jl", "pr", "jit", "xy", "ja", "l", "note", "fr", "key", "jp", "k", "ji", "err", "v", "sp", "json", "ij", "job", "q", "b", "g", "ind", "er", "num", "next", "p", "br", "kj", "last", "it", "jj", "current", "jump", "tr", "aj", "J", "li", "dj", "uj", "bot", "bj", "js", "jc"], "compare": ["Compair", "compARE", "comarer", "comose", "CompARE", "comare", "condare", "condARE", "Compare", "spare", "cmpute", "Compute", "Compar", "cmpare", "condar", "supparing", "comparer", "Comparing", "cmpARE", "suppare", "comparing", "sparing", "condute", "compair", "comair", "Comparer", "compute", "compose", "comar", "compar", "Compose", "cmpar", "suppar", "sparer", "spose", "comaring", "suppair"]}}
{"code": "# coding: UTF-8\\nimport sys\\nimport numpy as np\\nimport math\\n\\n\\nn = int(input())\\naList = list(map(int, input().split()))\\ngcdListLeft = [0 for i in range(n)]\\ngcdListRight = [0 for i in range(n)]\\n\\ntmp = aList[0]\\nfor i in range(n):\\n\ttmp = gcdListLeft[i] = math.gcd(tmp, aList[i])\\n\\ntmp = aList[n-1]\\nfor i in range(n-1, -1, -1):\\n\ttmp = gcdListRight[i] = math.gcd(tmp,aList[i])\\n\\nans = gcdListRight[1]\\nfor i in range(1,n-1):\\n\tans = max(ans, math.gcd(gcdListLeft[i-1], gcdListRight[i+1]))\\nans = max(ans, gcdListLeft[n-2])\\nprint(ans)", "target": "94", "substitutes": {}}
{"code": "n = int(input())\\nif n == 0:\\n    print(0)\\n    exit()\\nans = []\\nwhile abs(n) > 0:\\n    ans.append(n%2)\\n    n = (n - (n % 2)) // -2\\nprint(''.join(map(str, ans[::-1])))\\n", "target": "24", "substitutes": {"n": ["z", "f", "nw", "nn", "nia", "names", "m", "a", "l", "nt", "t", "number", "note", "N", "i", "len", "ns", "nm", "en", "r", "v", "na", "c", "long", "ng", "sn", "ln", "h", "b", "g", "cn", "nu", "nb", "num", "d", "size", "p", "dn", "j", "ne", "natural", "net", "gn", "np", "nan", "nc", "o", "u", "no", "nl", "x", "norm", "an"], "ans": ["ens", "wan", "anon", "nets", "aned", "ran", "van", "pan", "anc", "amps", "anned", "ins", "anas", "ms", "aus", "ons", "ns", "ars", "ann", "os", "aos", "arts", "ents", "ians", "angs", "rans", "ands", "eds", "said", "ations", "tan", "san", "works", "ANS", "leans", "nas", "ai", "offs", "gn", "anes", "nan", "ams", "ats", "ros", "anos", "anks", "ions", "an", "ks", "ants", "lan"]}}
{"code": "a,b,c = map(int, input().split())\\nif a*c<=b: print(c)\\nelse: print(b//a)", "target": "64", "substitutes": {"a": ["z", "f", "ba", "m", "am", "ta", "ae", "l", "t", "au", "i", "ax", "A", "r", "ca", "la", "at", "v", "pa", "na", "ea", "val", "d", "p", "da", "alpha", "oa", "e", "sa", "aa", "aj", "al", "ac", "n", "ma", " A", "ab", "x", "ar", "an"], "b": ["f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "t", "bc", "i", "cb", "fb", "r", "v", "db", "h", "g", "nb", "d", "p", "bt", "bi", "bf", "e", "bool", "sb", "gb", "beta", "bis", "n", "ob", "bs", "B", "ab", "bb", "base", "eb"], "c": ["z", "f", "mc", "m", "C", "cr", "cs", "l", "t", "bc", "cf", "rc", "r", "ci", "ca", "ch", "cb", "v", "co", "lc", "g", "cc", "ct", "unc", "ce", "d", "can", "cp", "ec", "com", "e", "cd", "dc", "fc", "ac", "tc", "n", "cu", "u", "cm"]}}
{"code": "from math import sin, cos, pi\\n\\n\\nclass Point:\\n\\n    def __init__(self, x, y):\\n        self.x = x\\n        self.y = y\\n\\n    def __str__(self):\\n        return f\"{self.x:.8f} {self.y:.8f}\"\\n\\n\\ndef kock(n, p1: Point, p2: Point):\\n    if n == 0:\\n        return\\n    s = Point(\\n        x=(2*p1.x + p2.x)/3,\\n        y=(2*p1.y + p2.y)/3\\n    )\\n    t = Point(\\n        x=(p1.x + 2*p2.x)/3,\\n        y=(p1.y + 2*p2.y)/3\\n    )\\n    u = Point(\\n        x=(t.x - s.x) * cos(pi / 3) - (t.y - s.y) * sin(pi / 3) + s.x,\\n        y=(t.x - s.x) * sin(pi / 3) + (t.y - s.y) * cos(pi / 3) + s.y\\n    )\\n    kock(n - 1, p1, s)\\n    print(s)\\n    kock(n - 1, s, u)\\n    print(u)\\n    kock(n - 1, u, t)\\n    print(t)\\n    kock(n - 1, t, p2)\\n\\n\\ndef main():\\n    n = int(input())\\n    p1 = Point(0.0, 0.0)\\n    p2 = Point(100.0, 0.0)\\n    print(p1)\\n    kock(n, p1, p2)\\n    print(p2)\\n\\nmain()\\n", "target": "280", "substitutes": {"self": ["details", "sub", "sys", "ws", "obj", "ls", "util", "nt", "ae", "my", "your", "rs", "eth", "you", "this", "conn", "pos", "close", "full", "Self", "ins", "old", "se", "output", "r", "res", "ren", "h", "q", "nd", "user", "th", "ct", "mp", "ref", "oe", "cl", "context", "config", "p", "round", "just", "app", "local", "object", "e", "cmp", "subject", "body", "np", "txt", "conf", "error", "small", "cache", "rel", "me", "prefix", "sh", "md", "new", "py"], "x": ["xp", "X", "full", "name", "xa", "ax", "xx", "v", "wx", "g", "mx", "ct", "image", "ry", "xi", "ell", "content", "z", "f", "rex", "el", "one", "xy", "ware", "ext", "xs", "to", "ch", "ty", "xt", "index", "ex", "exp", "xc", "px", "left", "data", "xd", "yx", "l", "ix", "i", "at", "tx", "c", "fx", "p", "e", "xe", "xxxx", "time", "xf", "on", "ey", "xes", "a", "hex", "ux", "point", "key", "xml", "url", "dx", "any", "ce", "rx", "act", "ox", "get", "int", "lex", "lat", "zx", "width"], "y": ["Y", "z", "sys", "yz", "ym", "ey", "yl", "out", "yo", "ay", "html", "yout", "my", "xy", "py", "yer", "iy", "by", "oy", "i", "sy", "yy", "point", "key", "ery", "ty", "yt", "ch", "v", "c", "long", "gy", "ys", "b", "ot", "ies", "h", "yi", "wy", "ny", "hey", "any", "fy", "p", "ady", "j", "hot", "ry", "ya", "dy", "uy", "ye", "txt", "axy", "very", "yr", "cy", "vy", "o", "asy", "lat", "on", "yang", "yd", "sky", "data", "ly"], "n": ["z", "nn", "nw", "names", "m", "a", "l", "nt", "number", "name", "note", "all", "N", "i", "fn", "ns", "r", "mn", "k", "en", "v", "na", "c", "ren", "ng", "ln", "sn", "b", "an", "g", "h", "cn", "nb", "rn", "remote", "ny", "num", "size", "d", "p", "gain", "dn", "nat", "j", "network", "ne", "none", "get", "net", "nor", "gn", "np", "int", "nan", "batch", "nc", "o", "w", "no", "nl", "non", "on"], "s": ["stats", "ets", "spec", "cs", "ins", "sw", "v", "ers", "h", "g", "ies", "less", "sb", "its", "south", "ts", "js", "f", "sys", "sts", "ws", "se", "xs", "os", "ms", " ts", "eds", "ss", "ds", "abs", "o", "us", "als", "space", "ings", "sv", "ls", "fs", "l", "rs", "gs", "su", "by", "i", "r", "sp", "sd", "c", "b", "p", "sets", "sa", "ims", "sh", "st", "ps", "sing", "a", "ns", "es", "S", "vs", "d", "ans", "si", "sq", "ats"], "t": ["z", "f", "tu", "target", "out", "obj", "tmp", "pt", "tm", "m", "ta", "l", "tt", "ret", "tw", "all", "nt", "to", "i", "r", "tp", "dt", "k", "at", "v", "tx", "c", "gt", "ot", "b", "q", "g", "h", "temp", "tg", "test", "tree", "tz", "te", "p", "j", "ut", "mt", "total", "e", "it", "wt", "tf", "tk", "T", "txt", "tr", "tc", "o", "ts", "rt", "new", "st"], "u": ["uid", "f", "tu", "out", "m", "ud", "l", "os", "i", "r", "k", "ue", "un", "v", "ul", "c", "lu", "U", "h", "b", "g", "nu", "eu", "p", "ut", "ou", "uf", "uc", "ur", "uv", "uu", "o", "cu", "us", "ui", "um", "iu", "ru"], "p1": ["point1", "P81", "sp1", "port001", "pass1", "apasso", "cp3", " pone", "p91", "pOne", "ap1", "pkg001", "passo", " p51", "pp001", "pc2", "P0", "partanta", "portOne", "pc1", "cp51", "P2", "POne", "vpasso", "part1", "P3", "sp0", "rep001", " p81", "jpone", "p001", "port1", "p3", "sp2", "pgons", "jp1", "apOne", "pons", "app3", "jp2", "ppasso", "rep91", "jp0", "pone", "ppOne", "exp ", "repasso", "p81", "exp001", "partons", "p0", "pass001", "p ", "pointanta", "rep1", "exp1", "vp91", "ap001", " pOne", "pcasso", "pkg1", "panta", "cp1", "pkg ", "app0", "vp1", "P1", "app51", "pp1", " p3", "p51", "vp001", "pg1", "jpOne", "Pone", "jp81", "pganta", "pointons", "app1", "pc001", "pc91", "pc3", "cp0", "portasso", " p0"], "p2": ["post2", "nTwo", "p002", "ping372", "pr002", "n1", "ptwo", "p384", "ping14", "k3", "cp3", "it384", "ping13", " pTwo", "t2", "post372", " p182", "it002", "post13", "P2", "ping2", "pr4", "p14", " p256", "p182", "cpTwo", "pkgtwo", "lp2", " p384", "part4", "cp4", "p102", "P3", "lpTwo", "cp2", "p13", "lp3", " p02", "p3", "it2", "P4", "part13", "p4", "pkg4", "cp02", "part2", "rep2", "lp1", "p372", "pkg384", "n2", "part182", " p102", "pkg2", "p82", "ittwo", "reptwo", "t4", "pa82", " p4", "n256", "rep002", "prtwo", "PTwo", "pTwo", "cp102", "p256", "part14", "pr384", "P1", " ptwo", "P82", "pa2", "partTwo", "k2", "p02", "k102", " p3", "post14", " p82", "pa1", "part372", "P256", "cp182", "rep384", "t1", "t3", "pr2", "k02"]}}
{"code": "import statistics\\nn = int(input())\\na = []\\nfor i,j in enumerate(map(int,input().split())):\\n  a.append(j-i-1)\\nb,s = statistics.median(a),0\\nfor i in a:\\n  s+=abs(i-b)\\nprint(int(s))", "target": "463", "substitutes": {"n": [" name", " base", " vi", " m", " init", " t", " e", " sn", " c", " ns", " sig", " pi", " r", " si", " sd", " log", " id", " notice", "si", " iter", " mi", " info", " na", " it", " index"], "a": ["ba", "add", "out", "apa", "array", "qa", "ta", "ae", "all", "t", "sta", "to", "au", "ga", "xa", "ed", "A", "ca", "at", "la", "pa", "es", "na", "ea", "an", "changes", "area", "va", "da", "alpha", "ada", "oa", "act", "parts", "sa", "ai", "aa", "up", "al", "ac", "ma", "w", "ia", "set", "ab", "eas", "aaa", "ar", "am"], "i": ["f", "z", "ini", "ib", "ei", "zi", "\u00ed", "m", " bi", " vi", "iii", "l", "y", "ix", "iy", "ti", "info", "ip", "ci", "ji", "v", "gi", "ij", "hi", "index", "oi", "ami", "yi", "ind", "id", " ii", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "o", "li", "I", "ia", "iti", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "m", "ja", "y", "name", "step", "jp", "k", "ji", "v", "json", "ij", "job", "g", "jac", "bi", "kj", "jas", "it", "jj", "jump", "aj", "J", "si", "ju", "bs", "uj", "dj", "js", "jc"], "b": ["f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "by", "cb", "r", "fb", "v", "db", "c", "g", "nb", "p", "bi", "br", "e", "sb", "it", "bs", "B", "ab", "bb", "base", "eb"], "s": ["z", "f", "ps", "stats", "sv", "ls", "des", "m", "fs", "l", "y", "t", "cs", "rs", "gs", "su", "se", "ms", "ns", "r", "v", "sd", "es", "c", "h", "g", "S", "string", "d", "p", "ss", "ds", "e", "sb", "si", "abs", "o", "u", "bs", "sq", "ts", "js"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\n\\n\\ndef main():\\n    a, b, c = map(int, input().split())\\n    ans = \"No\"\\n    if a == b + c:\\n        ans = \"Yes\"\\n    if b == c + a:\\n        ans = \"Yes\"\\n    if c == a + b:\\n        ans = \"Yes\"\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "332", "substitutes": {"input": ["str", "out", "edit", "reader", " Input", "control", "sample", "step", "raw", "request", "output", "cin", "check", "quiet", "dq", "q", "insert", "csv", "ct", "ref", "Input", "string", "select", "paste", "password", "config", "cont", "read", "accept", "get", "inc", "it", "int", "got", "txt", "focus", "quick", "conf", "feed", "print", "list", "view"], "a": ["f", "ba", "m", "ae", "l", "t", "au", "i", "A", "ca", "r", "la", "at", "an", "h", "era", "ity", "ak", "ami", "eu", "area", "p", "da", "alpha", "ao", "j", "app", "oa", "\u00e4", "e", "sa", "ai", "aq", "aa", "aj", "al", "ac", "art", "o", "ma", "ah", " A", "ia", "n", "ab", "eas", "aaa", "arg", "x", "w", "ar", "ach", "am"], "b": ["z", "f", "rb", "ba", "ib", "erb", "be", "l", "y", "t", "bc", "bp", "to", "s", "i", "bg", "cb", "fb", "r", "v", "db", "h", "g", "wb", "nb", "d", "p", "bi", "j", "bf", "e", "sb", "bo", "gb", "bis", "n", "ob", "o", "bs", "u", "B", "ab", "x", "bb", "eb"], "c": ["z", "f", "abc", "sc", "mc", "m", "C", "cr", "l", "cs", "t", "bc", "cf", "con", "i", "cb", "cin", "r", "rc", "ca", "ch", "v", "co", "h", "lc", "g", "cc", "ct", "unc", "ce", "d", "cos", "p", "cp", "ec", "e", "dc", "uc", "n", "ac", "tc", "cu", "u", "o", "ic", "cor", "x", "ar", "cm"], "ans": ["ens", "oos", "qual", "des", "mas", "vers", "rs", "cons", "amps", "ins", "ms", "ars", "aus", "ons", "ns", "anas", "ann", "outs", "aos", "arts", "ents", "ums", "angs", "rans", "ys", "arms", "said", "eds", "yes", "san", "ups", "ANS", "terms", "eps", "leans", "lets", "uns", "helps", "offs", "mean", "mos", "mails", "books", "ads", "ras", "ats", "us", "ros", "ts", "an", "ks", "ants", "olds", "jas", "lan"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().rstrip()\\n\\nN = int(input())\\nac = 0\\nwa = 0\\ntle = 0\\nre = 0\\n\\nfor i in range(N):\\n    s = input()\\n    if s == \"AC\":\\n        ac += 1\\n    elif s == \"WA\":\\n        wa += 1\\n    elif s == \"TLE\":\\n        tle += 1\\n    else:\\n        re += 1\\n\\nprint(\"AC x \" + str(ac))\\nprint(\"WA x \" + str(wa))\\nprint(\"TLE x \" + str(tle))\\nprint(\"RE x \" + str(re))\\n\\n", "target": "531", "substitutes": {"N": ["Num", "K", "NE", "C", "Sn", "R", "CNN", "NB", "NI", "M", "NR", "CN", "A", "Na", "NP", "NA", "Count", "S", "ND", "NT", "SN", "NS", "L", "NM", "TN", "No", "T", "GN", "n", "V", "I", "Ns", "NC", "NUM", "NN", "NH"], "ac": ["iac", "cas", "ag", "pac", "oc", "abc", "cod", "mc", "ap", "aca", "AC", "att", "cus", "acon", "anc", "acc", "sac", "cs", "af", "au", "ca", "acs", "ain", "jac", "ak", "unc", "cc", "acl", "aud", "mic", "rac", "act", "ec", "ox", "fac", "dc", "aq", "fc", "pc", "ad", "ic", "Ac", "ace", "mac", "aut", "cu", "ab", "aic", "ach", "am", "ack"], "wa": ["wait", "ws", "wm", "he", "ay", "fa", "wh", "ja", "ha", "ww", "wat", "wd", "tw", "ax", "sw", "la", "pa", "wx", "aw", "lu", "Wa", "wl", "wb", "we", "hal", "wy", "wr", "dl", "da", "WA", "awa", "wen", "sa", "wt", "wo", "ma", "w", "wal"], "tle": ["pe", "tu", "vet", "ele", "tor", "le", "tel", "tm", "ta", "se", "tt", "kl", "ssl", "tp", "tele", "ty", "sl", "ble", "tile", "lu", "tl", "we", "tie", "tz", "te", "tool", "dl", "fle", "yle", "tif", "pl", "sett", "mt", "sle", "sel", "ule", "tf", "nel", "tc", "ale", "tes", "nl", "sal", "ly"], "re": ["ve", "rate", "rex", "pro", "mor", "le", "rez", "rep", "ret", "se", "be", "reat", "r", "res", "ue", "vre", "gre", "ren", "ere", "repl", "ree", "roc", "RE", "ge", "we", "ref", "rm", "rew", "com", "ro", "cre", "are", "ry", "e", "rose", "Re", "ror", "rem", "rec", "reg", "ber", "rel", "ru", "bre", "rek"], "i": ["f", "l", "y", "ix", "ti", "by", "ip", "r", "k", "gi", "c", "q", "b", "ind", "id", "p", "j", "e", "it", "n", "li", "I", "x", "im"], "s": ["ps", "ths", "sts", "sv", "ws", "ls", "ords", "ties", "has", "ares", "fs", "src", "cs", "se", "t", "rs", "gs", "xs", "ists", "ins", "ns", "sw", "ends", "v", "ials", "aces", "sym", "sd", "hs", "c", "shows", "h", "tests", "b", "eds", "g", "ks", "S", "csv", "ments", "string", "changes", "p", "ains", "ss", "ds", "sets", "erences", "sb", "ses", "n", "si", "sq", "set", "ats", "bes", "ts", "asts", "ser", "terms", "olds", "js"]}}
{"code": "N,K = map(int, input().split())\\nA = [int(a) for a in input().split()]\\n\\ndp = [False]*(K+1)\\n\\nfor i in range(K+1):\\n    f = False\\n    for j in range(N):\\n        if A[j] > i:\\n            break\\n        if dp[i-A[j]]:\\n            continue\\n        f = True\\n    dp[i] = f\\n    \\nif dp[K]:\\n    ans = \"First\"\\nelse:\\n    ans = \"Second\"\\n        \\nprint(ans)", "target": "93", "substitutes": {"N": ["H", "C", "NF", "X", "F", "R", "Ni", "NB", "NI", "M", "NR", "MN", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "Ns", "NN"], "K": ["Y", "KA", "KN", "FK", "PK", "H", "C", "X", "F", "KK", "R", "SK", "G", "M", "k", "KB", "KR", "Head", "IK", "Kent", "KI", "Mask", "KS", "TH", "S", "OK", "E", "O", "VK", "D", "KING", "UK", "Key", "TN", "DK", "P", "Q", "KE", "T", "J", "Z", "KEY", "V", "I", "B", "KC", "Kind", "MK", "Context"], "A": ["AI", "AA", "H", "C", "X", "AC", "IA", "G", "AV", "M", "PA", "CA", "LA", "U", "JA", "Av", "NA", "S", "Input", "As", "D", "AT", "AF", "L", "GA", "An", "ATA", "mA", "P", "AM", "This", "T", "AE", "The", "AB", "AP", "V", "I", "B", "Ant", "Ax", "SA"], "a": ["ae", "sta", "au", "af", "ga", "k", "ca", "at", "la", "c", "ea", "an", "era", "b", "ak", "va", "p", "alpha", "ao", "\u00e4", "e", "ya", "sa", "ai", "ata", "aq", "aa", "aed", "ac", "art", "sha", "o", "ma", "ia", "eas", "aaa", "x", "ach", "am", "ova", "aff"], "dp": ["ps", "APD", "deb", "df", "pkg", "bp", "dos", "fd", "pb", "gp", "pp", "pas", "dd", "jp", "tp", "dt", "db", "sp", "pa", "vp", "dq", "fp", "csv", "deep", "isp", "dm", "di", "pd", "d", "dl", "p", "dep", "lp", "cp", "ds", "gd", "tap", "dial", "cd", "dc", "np", "DP", "aa", "dh", "bps", "dr", "wp", "DC", "xd", "BP"], "i": ["z", "io", "ini", "zi", "m", "l", "y", "ix", "ti", "ip", "ci", "jp", "k", "ji", "r", "gi", "v", "ij", "hi", "index", "ki", "phi", "b", "ind", "id", "di", "ik", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "I", "li", "ia", "u", "x", "ui", "mi", "iu"], "f": ["fl", "found", "ground", "fa", "m", "fs", "fg", "F", "df", "fe", "l", "y", "t", "cf", "fr", "fb", "r", "alf", "v", "c", "h", "rf", "b", "g", "fp", "d", "p", "bf", "fi", "e", "bool", "sf", "fac", "tf", "fc", "conf", "n", "o", "u", "w", "ff", "fm", "aff", "fd"], "j": ["z", "jl", "ja", "y", "ix", "jp", "k", "ji", "kid", "r", "v", "sp", "ij", "h", "q", "b", "g", "ie", "ik", "next", "p", "bi", "kj", "it", "jj", "jump", "aj", "J", "n", "si", "o", "uj", "dj", "li", "x", "im", "bj", "js", "jc"], "ans": ["views", "des", "aned", "vers", "idents", "amps", "iann", "ins", "ars", "aus", "ons", "outs", "ns", "ann", "news", "aps", "aos", "arts", "rets", "ents", "ians", "angs", "arms", "rans", "ys", "ands", "eds", "posts", "unders", "ids", "ANS", "leans", "lets", "uns", "helps", "ongs", "offs", "mails", "ras", "ats", "eas", "orders", "ros", "anks", "an", "ks", "ants", "olds"]}}
{"code": "n=int(input())\\nS=[]\\nT=[]\\ndata=set()\\nfor i in range(n):\\n  s=input()\\n  S.append(s)\\n  data.add(s)\\nm=int(input())\\nfor i in range(m):\\n  t=input()\\n  T.append(t)\\n  data.add(t)\\nans=0\\nfor i in data:\\n  ans=max(ans,S.count(i)-T.count(i))\\nprint(ans)", "target": "118", "substitutes": {"n": ["nn", "nia", "names", "l", "y", "nt", "number", "nr", "N", "ns", "mn", "nm", "en", "un", "na", "c", "sn", "cn", "nu", "nb", "num", "d", "nv", "ne", "net", "np", "nan", "nc", "o", "no", "nl", "init"], "S": ["SER", "BS", "Data", "SI", "Sl", "Si", "H", "SS", "Sn", "GES", "R", "SL", "JS", "SB", "LS", "PS", "N", "M", "A", "RS", "ST", "SR", "DS", "D", "NS", "SU", "NEWS", "L", "SP", "Su", "TS", "P", "ITS", "SH", "MS", "SA", "VS", "I", "B", "CS", "GS", "Set"], "T": ["TY", "ET", "UT", "F", "HT", "R", "WT", "MT", "N", "M", "LT", "Tree", "TA", "OT", "TO", "ST", "TH", "NT", "AT", "TG", "CT", "L", "TN", "TM", "IT", "TD", "TS", "P", "ITS", "J", "BT", "I", "B", "VT", "TE", "TER", "TF", "TT", "GT", "TV", "XT", "PT", "TL"], "data": ["map", "done", "Data", "out", "sum", "date", "one", "a", "draw", "ret", "all", "nt", "l", "info", "result", "step", "final", "DATA", "res", "v", "empty", "group", "num", "d", "size", "next", "p", "image", "ds", "window", "total", "new", "self", "frame", "e", "results", "mode", "ata", "time", "dates", "cache", "table", "o", "batch", "multiple", "no", "set", "list", "x", "text", "dat"], "i": ["f", "ini", "ei", "zi", "cli", "iii", "a", "l", "ix", "iy", "ti", "ci", "r", "k", "il", "ji", "ati", "gi", "adi", "v", "gu", "ij", "c", "oi", "index", "ki", "phi", "yi", "ind", "id", "di", "ik", "d", "p", "bi", "vi", "multi", "j", "pi", "fi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "iri", "x", "iti", "mi", "iu", "im", "ski"], "s": ["ps", "sts", "str", "ls", "sr", "a", "cs", "se", "rs", "l", "gs", "su", "ins", "ms", "os", "ns", "single", "sl", "es", "ys", "ies", "less", "ss", "ds", "self", "sb", "si", "sq", "ats", "us", "space", "ts", "ar", "js", "st"], "m": ["mu", "gm", "mc", "tm", "mas", "l", "sm", "ms", "M", "mn", "mis", "c", "mut", "mx", "mod", "dm", "d", "mem", "mun", "man", "mt", "om", "mo", "mat", "mr", "ma", "met", "mm", "mid", "um", "mi", "multi", "cm"], "t": ["f", "pt", "tm", "ta", "a", "l", "tt", "ti", "r", "dt", "at", "c", "term", "ot", "gt", "q", "g", "h", "b", "ct", "tree", "test", "er", "tz", "te", "p", "ant", "et", "it", "tf", "vt", "tc", "o", "w", "ts", "rt", "text", "st"], "ans": ["rors", "ps", "ens", "lines", "ls", "oss", "ran", "cs", "rs", "pan", "amps", "xs", "iann", "ms", "anas", "os", "aus", "ns", "ins", "outs", "ann", "ons", "ars", "news", "aps", "aos", "arts", "es", "rans", "ands", "ids", "vs", "ANS", "man", "ds", "uns", "ai", "nas", "ints", "span", "anes", "nan", "ats", "ros", "an", "ks", "ants", "lan"]}}
{"code": "N=int(input())\\nX=list(map(int, input().split()))\\n\\nans=float('inf')\\nfor i in range(101):\\n  tmp=0\\n  for j in range(N):\\n    tmp+=(X[j]-i)**2\\n  ans=min(ans,tmp)\\nprint(ans)", "target": "46", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "F", "Sn", "R", "CNN", "NB", "NI", "M", "NR", "A", "MN", "NP", "NA", "S", "NT", "D", "SN", "NS", "L", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NN"], "X": ["Y", "UX", "K", "C", "XL", "MX", "R", "xs", "XY", "M", "A", "OX", "S", "DX", "ICE", "NS", "Xi", "P", "Q", "ZX", "XM", "T", "XP", "J", "XX", "Z", "V", "I", "IX", "x", "TX", "XT"], "ans": ["ens", "anon", "sv", "ls", "pac", "Ann", "aned", "AN", "oss", "ean", "anc", "cs", "amps", "xs", "iann", "s", "os", "anas", "ms", "aus", "ns", "ons", "outs", "ann", " Ans", "aps", "acs", "aos", "arts", "es", "ents", "ians", "angs", "ums", "rans", "iban", "posts", " means", "vs", "ANS", "can", "man", "oat", "An", "uns", "offs", "anes", "nan", "ams", "mos", "ads", "ces", "ates", "ats", "Ns", "asms", "aints", "anks", "ions", "an", "ants", "lan"], "i": ["ei", "ini", "ri", "zi", "m", "l", "y", "t", "ti", "ip", "ci", "\u0438", "ji", "v", "gi", "ij", "hi", "ki", "b", "yi", "id", "di", "ik", "p", "bi", "pi", "qi", "ai", "it", "ii", "xi", "si", "n", "ic", "u", "li", "I", "ia", "mi", "iu"], "tmp": ["img", "sup", "emp", "fake", "offset", "obj", "MP", "xy", "pkg", "py", "t", "tt", "nt", "result", "etc", "cb", "attr", "yy", "sp", "perm", "mk", "mut", "gt", "ot", "mp", "temp", "nb", "test", "ctx", "comp", "pretty", "cp", "total", "uf", "cmp", "tf", "np", "txt", "cache", "opp", "amp", "tc", "up", "yet", "buff", "qq", "prime", "ppo", "new"], "j": ["z", "f", "obj", "ion", "jl", "ja", "y", "jp", "k", "ji", "r", "v", "json", "ij", "job", "q", "b", "h", "g", "p", "oj", "kj", "jj", "jump", "aj", "J", "n", "uj", "dj", "bj", "js", "jc"]}}
{"code": "x = int(input())\\n\\nif x >= 30:\\n  ans = 'Yes'\\nelse:\\n  ans = 'No'\\nprint(ans)", "target": "371", "substitutes": {"x": ["z", "xes", "yx", "xp", "X", "a", "ux", "xy", "l", "y", "t", "ix", "xs", "s", "xa", "i", "ax", "xx", "v", "xt", "dx", "wx", "mx", "g", "ex", "yes", "p", "rx", "xc", " xx", "xe", "xi", "n", "w", "xf", "xd", "tx"], "ans": ["vet", "sv", "vers", "amps", "ars", "anas", "ins", "aus", "ons", "ns", "ann", "caps", "utters", "aps", "aos", "arts", "ents", "angs", "arms", "anners", "eds", "said", "posts", "san", "ANS", "ots", "lets", "cats", "ams", "ads", "books", "ras", "ats", "us", "ros", "ts", "anks", "ana", "an", "ks", "ants", "olds"]}}
{"code": "P=list(map(int,input().split()))\\nprint(sum(P)-max(P))", "target": "298", "substitutes": {"P": ["PF", "K", "GP", "H", "C", "X", "F", "R", "PM", "G", "PS", "N", "M", "PA", "JP", "PU", "PO", "U", "NP", "S", "D", "p", "L", "TP", "SP", "PP", "Q", "FP", "T", "MAN", "DP", "J", "AP", "V", "I", "B", "LP", "PI", "CP", "PUT", "PT"]}}
{"code": "#!/usr/bin/env python3\\n# from collections import Counter\\ns = list(str(input()))\\nt = list(str(input()))\\n\\ndict_ = {}\\nfor i in range(len(s)):\\n    if s[i] in dict_:\\n        dict_[s[i]].append(i)\\n    else:\\n        dict_[s[i]] = [i]\\nfor key, value in dict_.items():\\n    a = set([])\\n    for i in value:\\n        a.add(t[i])\\n    # print(a)\\n    if len(set(a)) != 1:\\n        print(\"No\")\\n        exit()\\n\\ns, t = t, s\\ndict_ = {}\\nfor i in range(len(s)):\\n    if s[i] in dict_:\\n        dict_[s[i]].append(i)\\n    else:\\n        dict_[s[i]] = [i]\\nfor key, value in dict_.items():\\n    a = set([])\\n    for i in value:\\n        a.add(t[i])\\n    # print(a)\\n    if len(set(a)) != 1:\\n        print(\"No\")\\n        exit()\\nprint(\"Yes\")\\n", "target": "490", "substitutes": {}}
{"code": "from collections import defaultdict\\nimport math\\nn = int(input())\\ndef is_prime(n):\\n  if n == 1:\\n    return False\\n  \\n  for k in range(2, int(math.sqrt(n)) + 1):\\n    if n%k == 0:\\n      return False\\n  return True\\n\\nd = defaultdict(int)\\n\\np = []\\nfor i in range(2,n+1):\\n  if is_prime(i):\\n    d[i] = 1\\n    p.append(i)\\n    continue\\n  x = i\\n  for j in p:\\n    while x%j == 0:\\n      x //= j\\n      d[j] += 1\\n\\n#75\\nc = 0\\nfor i in d.values():\\n  if i >= 74:\\n    c += 1\\nans = c\\n\\n#25 * 3\\nc,e = 0,0\\nfor i in d.values():\\n  if i >= 24:\\n    c += 1\\n  if i >= 2:\\n    e += 1\\nans += c*(e-1)\\n\\n#15 * 5\\nc, e = 0, 0\\nfor i in d.values():\\n  if i >= 14:\\n    c += 1\\n  if i >= 4:\\n    e += 1\\nans += c*(e-1)\\n\\n#5 * 5 * 3\\nc,e = 0,0\\nfor i in d.values():\\n  if i >= 4:\\n    c += 1\\n  if i >= 2:\\n    e += 1\\nans += (c*(c-1)//2)*(e-2)\\n\\nprint (ans)\\n\\n", "target": "145", "substitutes": {"n": ["z", "f", "nn", "nia", "m", "a", "l", "nt", "t", "name", "note", "nr", "N", "ns", "mn", "nm", "en", "r", "v", "ll", "na", "c", "ln", "sn", "ng", "an", "h", "g", "q", "cn", "nu", "nb", "ny", "num", "size", "nv", "nat", "network", "ne", "net", "np", "nan", "nc", "o", "no", "nl", "on", "count"], "k": ["dk", "K", "m", "kr", "kind", "kh", "uk", "ka", "t", "kl", "ikk", "ok", "key", "kk", "kan", "ke", "kid", "v", "kar", "ket", "mk", "ki", "kn", "ak", "unk", "ijk", "ik", "kok", "km", "kj", "kw", "tk", "u", "sk", "ko", "ku", "ks"], "d": ["z", "f", "done", "ld", "out", "m", "xd", "df", "bd", "l", "t", "debug", "dict", "s", "dd", "r", "dt", "div", "db", "sd", "c", "h", "q", "nd", "b", "g", "ind", "D", "di", "pd", "de", "dl", "da", "ds", "end", "gd", "td", "it", "cd", "dh", "ad", "o", "dec", "dr", "dot", "md", "new", "dat", "fd"], "p": ["op", "ps", "pe", "pard", "pr", "ap", "m", "xp", "a", "l", "pkg", "t", "bp", "pos", "pb", "pp", "r", "tp", "jp", "at", "v", "sp", "perm", "pa", "vp", "c", "pers", "q", "fp", "post", "pair", "g", "mp", "pre", "exp", "pi", "cp", "lp", "pl", "P", "it", "np", "up", "pc", "w", "set", "wp"], "i": ["z", "io", "ei", "ini", "ion", "zi", "\u00ed", "m", "l", "y", "t", "ix", "ti", "info", "ip", "ci", "ji", "gi", "v", "ij", "index", "ki", "q", "phi", "h", "ie", "ind", "id", "di", "ik", "bi", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "ui", "mi", "iu", "im"], "x": ["z", "f", "xes", "xp", "X", "a", "ux", "xy", "y", "t", "ix", "xs", "xa", "xx", "xb", "ax", "v", "status", "nex", "xt", "dx", "wx", "h", "q", "b", "ex", "rx", "act", "xc", "e", "ox", "xe", "ai", "xi", "o", "w", "u", "xf", "xd", "tx"], "j": ["z", "obj", "jl", "times", "m", "ja", "l", "y", "t", "ix", "jp", "ji", "r", "div", "v", "sp", "json", "ij", "c", "h", "q", "b", "g", "ijk", "oj", "pi", "kj", "new", "e", "it", "jj", "jump", "aj", "J", "si", "jam", "o", "uj", "dj", "u", "xi", "prime", "bj", "js", "shift", "jc"]}}
{"code": "K = int(input())\\na=''\\nfor i in range(K):\\n  a = a + 'ACL'\\nprint(a)", "target": "533", "substitutes": {"K": ["HK", "KA", "KN", "PK", "H", "C", "X", "F", "KK", "R", "SK", "G", "Ka", "N", "M", "A", "k", "KR", "Kent", "KI", "KS", "VK", "D", "KING", "UK", "L", "P", "Q", "T", "J", "Z", "V", "I", "B", "KC"], "a": ["f", "apa", "qa", "ae", "all", "t", "sta", "to", "au", "ga", "af", "xa", "eta", "A", "k", "ca", "input", "la", "v", "at", "pa", "wa", "c", "na", "ea", "an", "era", "b", "h", "g", "er", "area", "p", "alpha", "da", "ao", "oa", "sa", "ai", "ata", "aa", "n", "ac", "o", "ma", "u", "w", "ia", "ab", "aaa", "am", "data", "aff", "new"], "i": ["isin", "\u00ed", " il", "iii", "ite", "ix", "r", "k", " j", "__", "ij", "ind", "id", " ii", " I", "it", "ii", "n", "I", "iter", "x", " im", "im"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\nk = 1000\\ns = 0\\nfor i in range(n-1):\\n    if s == 0:\\n        if a[i] < a[i+1]:\\n            s = k // a[i]\\n            k -= s * a[i]\\n    else:\\n        if a[i] > a[i+1]:\\n            k += s * a[i]\\n            s = 0\\nprint(k + s * a[-1])", "target": "67", "substitutes": {"n": ["z", "nn", "nia", "names", "m", "l", "nt", "t", "name", "N", "ns", "mn", "v", "na", "c", "sn", "q", "an", "cn", "nu", "nb", "num", "d", "p", "j", "network", "ne", "gn", "np", "nan", "nc", "o", "no", "nl", "x", "norm"], "a": ["f", "ba", "apa", "array", "fa", "m", "ap", "ta", "ae", "l", "all", "t", "sta", "au", "ga", "ed", "xa", "A", "ca", "at", "la", "now", "history", "es", "c", "na", "ea", "an", "b", "g", "er", "area", "d", "p", "va", "alpha", "ada", "ao", "da", "app", "oa", "act", "e", "sa", "ai", "ata", "aa", "ac", "abs", "ma", "ia", "ab", "eas", "aaa", "ar", "ana", "am", "data"], "k": ["z", "K", "m", "kr", "kind", "kh", "uk", "ka", "ck", "kl", "ikk", "ok", "kk", "r", "ke", "kan", "kick", "v", "kar", "ker", "mk", "h", "q", "b", "g", "ak", "ijk", "ik", "num", "kok", "p", "km", "j", "kj", "ek", "kw", "tk", "sk", "ko", "x", "ku", "ks", "ack"], "s": ["f", "ps", "z", "stats", "sv", "ws", "ls", "views", "times", "m", "fs", "spec", "l", "rs", "t", "cs", "gs", "xs", "steps", "se", "os", "ags", "ins", "ms", "ns", "sw", "sym", "sd", "es", "c", "hs", "h", "q", "b", "eds", "g", "tests", "S", "gets", "ies", "p", "ss", "ds", "sets", "its", "ims", "conf", "si", "w", "sq", "ats", "us", "orders", "ts", "qs", "ks", "js"], "i": ["f", "io", "ini", "ei", "ri", "zi", "m", "uri", "cli", "y", "this", "t", "ix", "ti", "info", "ip", "ci", "\u0438", "ji", "v", "gi", "status", "ij", "ori", "index", "oi", "q", "b", "phi", "ind", "id", "di", "bi", "multi", "j", "pi", "ai", "it", "ii", "iri", "si", "xi", "ic", "batch", "li", "I", "iter", "me", "x", "ui", "mi", "iu", "im", "init"]}}
{"code": "n, x = map(int, input().split())\\nL = list(map(int, input().split()))\\nD = [0]\\nfor i in range(n):\\n    D += [L[i] + D[i]]\\nans = 0\\nfor d in D:\\n    if d <= x:\\n        ans += 1\\n    else:\\n        break\\nprint(ans)\\n", "target": "444", "substitutes": {"n": ["nn", "nia", "m", "l", "y", "nt", "t", "N", "ns", "mn", "k", "v", "na", "c", "ln", "sn", "b", "g", "nu", "nb", "num", "p", "j", "ne", "net", "np", "nc", "o", "nl", "ll"], "x": ["z", "f", "m", "xp", "X", "xy", "l", "y", "t", "ix", "xs", "xa", "ax", "xx", "k", "v", "xt", "dx", "wx", "q", "mx", "ex", "p", "rx", "xc", "e", "ox", "xe", "cox", "xi", "u", "w", "xf", "tx"], "L": ["DL", "XL", "X", "LE", "l", "SL", "LS", "ML", "LM", "N", "LT", "M", "LU", "LG", "Len", "NL", "EL", "PL", "CL", "LB", "P", "List", "LI", "V", "I", "Li", "B", "LP", "LD", "dL", "LL", "Lu", "TL"], "D": ["DN", "Y", "K", "DL", "DB", "PD", "H", "Dr", "C", "X", "F", "R", "Do", "DF", "W", "DD", "FD", "N", "M", "A", "Ds", "U", "DA", "CD", "S", "DIR", "E", "ND", "O", "DX", "DS", "Can", "Def", "DVD", "P", "DR", "AD", "Q", "DM", "DP", "T", "V", "I", "B", "LD", "DE", "DOS", "DO", "DI"], "i": ["f", "io", "ini", "ri", "zi", "m", "a", "l", "y", "ix", "ti", "info", "ip", "ci", "r", "ji", "gi", "v", "ij", "ori", "index", "ki", "q", "yi", "sim", "ind", "id", "di", "bi", "j", "pi", "it", "ii", "iri", "xi", "batch", "ic", "I", "li", "si", "ui", "mi", "iu", "im"], "ans": ["ps", "rors", "ens", "ls", "des", "annot", "names", "AN", "amps", "s", "ms", "anas", "ins", "os", "ns", "ons", "aus", "ann", "outs", "aps", "aos", "arts", "sd", "angs", "ums", "rans", "eds", "posts", " means", "ids", "terms", "ANS", "ds", "nas", "offs", "anes", "actions", "ads", "ats", "orders", "ros", "an", "ks", "ants", "lan"], "d": ["z", "f", "done", "m", "a", "ade", "ard", "l", "t", "name", "did", "ed", "dd", "div", "v", "dx", "sd", "c", "q", "g", "ind", "id", "di", "du", "pd", "dl", "p", "ds", "td", "self", "cd", "od", "iod", "dh", "ad", "o", "w", "an", "xd", "fd"]}}
{"code": "S = input()\\nK = int(input())\\n\\nans = 1\\nfor i in S:\\n\tif i != '1':\\n\t\tans = i\\n\t\tbreak\\n\tif K==1:\\n\t\tans = i\\n\t\tbreak\\n\tK-=1\\nprint(ans)", "target": "119", "substitutes": {"S": ["Y", "BS", "String", "SI", "Si", "C", "H", "X", "SS", "F", "R", "G", "s", "N", "M", "A", "Sing", "U", "E", "O", "DS", "NS", "SU", "L", "P", "TS", "Q", "T", "SA", "Z", "V", "I", "B", "CS", " s"], "K": ["KA", "KY", "PK", "H", "C", "X", "F", "KK", "R", "SK", "G", "N", "M", "A", "k", "KR", "IK", "Max", "KI", "KS", "O", "D", "UK", "L", "DK", "P", "Q", " k", "T", "J", "Z", "V", "I", "B", "MK", "AK"], "ans": ["ens", "rors", "cas", "names", "mas", "vers", "AN", "cs", "rs", "aks", "gs", "amps", "iann", "s", "ins", "os", "ars", "aus", "ns", "outs", "k", "ann", "ons", "anas", "aps", "acs", "aos", "arts", "angs", "eds", "posts", "yes", " means", "annels", "vs", "ANS", "lets", "uns", "offs", "powers", "nan", "ams", "n", "ads", "books", "ras", "ats", "eas", "ros", "anks", "an", "ks", "ants", "olds", "lan"], "i": ["f", "io", "ei", "ini", "zi", "Si", "m", " bi", " vi", "a", "ir", "ni", "l", "y", "t", "ti", "s", "\u0438", "ci", "ip", "k", " Li", "Ti", "v", "ij", "c", "hi", "oi", "phi", "b", "g", "yi", "ie", "asi", "id", "di", "ik", " Xi", "Xi", "p", "Is", "bi", "j", "pi", "fi", " I", "ai", "it", "ii", "iri", "si", "xi", "n", "ic", "I", "li", "ia", "Mi", " mi", "mi", "iu", " Ti"]}}
{"code": "n = int(input())\\nA = list(map(int, input().split()))\\nq = int(input())\\nm = list(map(int, input().split()))\\n\\n\"\"\"\\ndef exhaustive_search(m, i):\\n    if i == n:\\n        return 0\\n    if m < 0:\\n        return 0\\n    if m == A[i]:\\n        return 1\\n    return max(exhaustive_search(m, i + 1), exhaustive_search(m - A[i], i + 1))\\n\"\"\"\\n\\ndef dp_search(m):\\n    dp = [[1] + [0] * m for _ in range(n + 1)] # dp[i][j] i\u756a\u76ee\u307e\u3067\u3067j\u3092\u4f5c\u308c\u308b\u304b\\n    for i in range(1, n+1):\\n        for j in range(1, m+1):\\n            if j >= A[i-1]:\\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j - A[i-1]])\\n            else:\\n                dp[i][j] = dp[i-1][j]\\n    return dp[n][m]\\n\\nfor mi in m:\\n    if dp_search(mi):\\n        print(\"yes\")\\n    else:\\n        print(\"no\")\\n", "target": "279", "substitutes": {"n": ["z", "nn", "a", "l", "nt", "t", "s", "N", "ns", "nm", "k", "mn", "r", "v", "na", "c", "sn", "nd", "h", "cn", "nu", "nb", "num", "d", "p", "dn", "j", "network", "ne", "gn", "np", "nc", "o", "nl", "x"], "A": ["ay", "H", "C", "a", "G", "au", "N", "M", "an", "S", "E", "O", "D", "alpha", "L", "da", "P", "ai", "aa", "Z", "AB", "V", "I", "B", "Alpha", "am", "aff"], "q": ["z", "f", "l", "t", "pp", "i", "r", "k", "ch", "c", "dq", "h", "g", "mp", "d", "p", "j", "cp", "e", "Q", "it", "w", "u", "x", "qs", "qu"], "m": ["mu", "f", "gm", "tm", "l", "y", "t", "s", "ms", "M", "i", "r", "k", "nm", "v", "c", "bm", "h", "b", "g", "mp", "dm", "num", "d", "p", "j", "mt", "mo", "e", "o", "u", "w", "mm", "mid", "mi", "cm"], "dp": ["ps", "df", "gp", "pb", "dd", "pp", "jp", "dt", "tp", "sp", "pa", "vp", "dq", "pm", "fp", "mp", "dm", "pd", "d", "dl", "p", "ds", "cp", "lp", "dc", "np", "DP", "dh", "dr"], "_": ["ay", " j", "__", "wx", " p", "val", " e", " c", "j", " l", "ox", " the", " x", "___", "x", " y", " g"]}}
{"code": "import sys\\nfrom sys import exit\\nfrom collections import deque\\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right #func(\u30ea\u30b9\u30c8,\u5024)\\nfrom heapq import heapify, heappop, heappush\\nfrom math import *\\n\\nsys.setrecursionlimit(10**6)\\nINF = 10**20\\neps = 1.0e-20\\nMOD = 10**9+7\\n\\ndef mint():\\n    return map(int,input().split())\\ndef lint():\\n    return list(map(int,input().split()))\\ndef judge(x, l=['Yes', 'No']):\\n    print(l[0] if x else l[1])\\ndef lprint(l, sep='\\n'):\\n    for x in l:\\n        print(x, end=sep)\\n\\nn,a,b = mint()\\nif (n==1 and a!=b) or a>b:\\n    print(0)\\nelse:\\n    print(b*(n-1)+a-(a*(n-1)+b)+1)", "target": "395", "substitutes": {}}
{"code": "print('YES' if input() == input()[::-1] else 'NO')\\n", "target": "275", "substitutes": {}}
{"code": "def answer(n: int, p: []) -> int:\\n    p.append(p.pop(p.index(max(p))) // 2)\\n    return sum(p)\\n\\n\\ndef main():\\n    n = int(input())\\n    p = list(int(input()) for _ in range(n))\\n    print(answer(n, p))\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "259", "substitutes": {"n": ["nn", "m", "l", "y", "nt", "t", "number", "nr", "N", "i", "len", "ns", "r", "en", "mn", "v", "na", "c", "ng", "h", "sn", "q", "b", "g", "ln", "an", "cn", "nu", "nb", "rn", "num", "d", "dn", "j", "network", "ne", "net", "np", "nan", "nc", "o", "nl", "x", "ll"], "p": ["ps", "f", "pr", "pt", "ap", "m", "pad", "pins", "a", "rep", "l", "pkg", "t", "bp", "pos", "pb", "s", "pp", "i", "jp", "tp", "r", "public", "at", "v", "sp", "perm", "pa", "vp", "c", "pers", "post", "fp", "q", "g", "b", "h", "mp", "pre", "d", "power", "ping", "pl", "lp", "cp", "pi", "P", "np", "up", "pc", "dp", "list", "wp", "pn", "pro"], "_": ["ay", "y", " j", "__", " __", " each", "ge", "ex", "ate", "val", "j", "___"]}}
{"code": "W,a,b=map(int,input().split())\\nthre =0 \\nres =0\\nif a<=b:\\n  thre = a+W\\n  if thre >= b:\\n    res = 0\\n  else:\\n    res = b-thre\\nelse:\\n  thre=b+W\\n  if thre >= a:\\n    res = 0\\n  else:\\n    res = a-thre\\nprint(res)", "target": "547", "substitutes": {"W": ["Y", "H", "C", "X", "Width", "F", "Th", "R", "G", "N", "M", "WB", "A", "Weight", "Wil", "Wa", "NW", "WER", "S", "E", "Week", "SW", "Ws", "D", "Word", "WA", "L", "TW", "DW", "P", "Q", "T", "Wh", "V", "w", "BW", "B", "I", "We", "WC", "How"], "a": ["f", "ba", "obj", "apa", "m", "ap", "ae", "\u00e1", "att", "be", "l", "y", "t", "all", "sta", "au", "s", "i", "ax", "A", "ca", "r", "at", "c", "ea", "an", "h", "era", "g", "ak", "er", "d", "p", "va", "alpha", "ao", "app", "e", "sa", "ai", "ata", "aa", "ra", "aj", "al", "ac", "n", "o", "ma", "w", "ah", "ace", "art", "ab", "ad", "aaa", "ia", "x", "ar", "ach", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "bl", "be", "l", "y", "t", "bc", "to", "s", "i", "cb", "r", "fb", "A", "v", "db", "c", "h", "g", "nb", "d", "p", "bt", "bi", "j", "e", "n", "o", "bs", "w", "u", "B", "ab", "bb", "eb"], "thre": ["ethreat", "throm", " thure", "forthRE", "ethure", "Thresh", "thresh", "Thcom", "ethRE", "othr", "forthreat", " thresh", "othreat", "forthrule", "therRE", "tru", "ethru", "thares", "Thref", "thareat", "thmem", "thret", "ethree", "therrule", "thsree", " thret", "tre", " three", "othresh", "Thre", "thure", "othmem", "Thret", " thrate", "ethrate", "ethr", "thcom", "therre", "therreat", "ethrule", "thres", " throm", "tharoe", "ethre", "thaRE", "tresh", " thcom", "othre", "therroe", "thref", "thamem", "three", "thrate", "Thure", "forthre", "thsrom", "ethret", "thr", "ethroe", "ethrom", " thref", "thsrate", "throe", "othres", "thru", "ethres", "ethcom", "ethref", "thsre", "thare", "ethresh", "thrule", "othru", "threat", "tr", "thRE", "ethmem"], "res": ["ress", "ps", "rand", "details", "max", "sys", "out", "obj", "pro", "rest", "des", "reset", "rez", "rep", "ret", "conn", "cons", "R", "pos", "seq", "result", "ms", "ins", "i", "expr", "r", "ver", "resp", "gr", "err", "status", " Res", "resh", "ref", "val", "sim", "re", "pre", "mem", "p", "j", "progress", "rek", "zero", "stock", "results", "RES", "conf", "rem", "pres", "w", "reg", "rel", "resolution", "Res", "respons", "req", "sol"]}}
{"code": "n = int(input())\\nxy_array = [list(map(int, input().split())) for _ in range(n)]\\n\\nth = pow(10, 9)\\nright_up_max = -th\\nleft_down_min = th\\nleft_up_max = -th\\nright_down_min = th\\n\\nfor x, y in xy_array:\\n    right_up_max = max(x + y, right_up_max)\\n    left_down_min = min(x + y, left_down_min)\\n    left_up_max = max(x - y, left_up_max)\\n    right_down_min = min(x - y, right_down_min)\\n\\nans = max(right_up_max - left_down_min, left_up_max - right_down_min)\\nprint(ans)", "target": "399", "substitutes": {"n": ["z", "nn", "m", "ni", "l", "nt", "t", "number", "nr", "N", "i", "len", "ns", "mn", "k", "r", "nm", "na", "c", "ln", "sn", "q", "h", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "np", "nan", "nc", "w", "nl", "count"], "xy_array": ["xy_index", "x_map", "y2array", "x_arr", "xy2arr", "y_grid", "xyalarray", "y2arr", "xy2grid", "x_array", "xy_map", "y2grid", "xyalmap", "xyalindex", "xy_grid", "xy2array", "y_array", "x_index", "y_arr", "xyalarr", "xy_arr"], "_": [" un", "ix", " m", "k", " j", " __", " p", " t", "val", " e", " c", "j", " l", " z", " the", " you", " f", " row", " g"], "th": ["ths", "han", "f", "max", "ph", "pt", "top", "wh", "third", "kh", "through", "Th", "se", "eth", "t", "tt", "nt", "tw", "sec", "bh", "mn", "tp", "k", "ch", "ty", "ft", "hi", "h", "ith", "TH", "ther", "ct", "thin", "test", "orth", "ht", "oth", "mt", "td", "then", "tr", "gh", "hr", "w", "tha", "sh", " TH"], "right_up_max": ["right_out_min", "right_up_min", "right_down_ax", "right_down_range", "right_down_MAX", "right_down_max", "right_up_MAX", "right_up_ax", "right_out_max", "right_out_ax", "right_up_range"], "left_down_min": ["left_down_mins", "left_up_min", "left_own_in", "left_own_margin", "left_up_mid", "left_down_in", "left_downmmmins", "left_down_margin", "left_downmmmin", "left_down_max", "left_downmmmid", "left_down_mid", "left_own_max", "left_up_mins", "left_own_mins", "left_downmmmax", "left_own_min"], "left_up_max": ["left_out_ax", "left_up_min", "left_up_Max", "left_out_max", "left_out_min", "left_Up_min", "left_out_Max", "left_Up_max", "left_Up_full", "left_up_full", "left_up_ax", "left_Up_ax"], "right_down_min": ["right_own_mins", "right_up_min", "right_own_Min", "right_down_sum", "right_down_val", "right_up_val", "right_down_mins", "right_up_mins", "right_down64max", "right_own_min", "right_down_pos", "right_own_max", "right_down64pos", "right_down64min", "right_down_max", "right_up_name", "right_down64mins", "right_down_name", "right_own_pos", "right_up_sum", "right_down_Min"], "x": ["z", "yx", "text", "xp", "X", "hex", "xy", "l", "name", "ix", "xs", "wd", "by", "xa", "i", "xx", "ax", "key", "at", "check", "xml", "v", "xt", "dx", "wx", "zx", "ex", "ct", "bit", "fx", "ctx", "read", "p", "exp", "rx", "xxx", "xc", "ox", "xxxx", "xi", "lex", "px", "w", "lat", "dr", "xf", "on", "xd", "tx", "yk"], "y": ["z", "Y", "sys", "ym", "ey", "yl", "icy", "yn", "ay", "my", "xy", "zy", "py", "iy", "ed", "sy", "i", "xx", "yy", "key", "ery", "ty", "yt", "v", "ys", "gy", "ies", "iley", "yi", "wy", "ny", "hey", "fy", "ry", "ya", "dy", "uy", "ye", "axy", "yr", "cy", "vy", "ic", "yd", "sky", "ly"], "ans": ["mas", "aned", "AN", "ran", "pan", "ars", "anas", "aus", "ns", "ano", "ann", "atan", "beans", "asks", "angs", "ians", "rans", "than", "eds", "ations", "san", "ids", "ANS", "leans", "airs", "nas", "ana", "anes", "nan", "ams", "ras", "ats", "ros", "ions", "anks", "an", "ks", "ants", "uploads", "lan", "irms"]}}
{"code": "def gcd(a,b):\\n  if b == 0:\\n    return a\\n  else:\\n    return gcd(b,a%b)    \\n\\nn,ans=int(input()),1\\nA=list(map(int,input().split()))\\ngcd_l,gcd_r=[],[]\\nl,r=A[0],A[n-1]\\n\\nfor i in range(n-1):\\n  l,r=gcd(l,A[i]),gcd(r,A[n-i-1])\\n  gcd_l.append(l)\\n  gcd_r.append(r)\\n\\nfor i in range(n-2):\\n  v=gcd(gcd_l[i],gcd_r[n-3-i])\\n  if v > ans:\\n    ans = v\\n\\nif gcd_l[n-2] > ans:\\n  ans=gcd_l[n-2]\\nif gcd_r[n-2] > ans:\\n  ans=gcd_r[n-2]\\n  \\nprint(ans)", "target": "94", "substitutes": {"a": ["f", "ba", "am", "ae", "all", "t", "au", "result", "ca", "at", "pa", "na", "c", "ea", "h", "val", "va", "p", "alpha", "oa", "sa", "ata", "aq", "aa", "al", "ac", "o", "ma", "u", "ia", "ab", "aaa", "x", "bb", "ar", "an"], "b": ["z", "f", "rb", "ba", "m", "y", "t", "bc", "bg", "fb", "db", "c", "h", "g", "nb", "d", "p", "bi", "j", "bf", "e", "bin", "bu", "beta", "bis", "o", "bs", "u", "B", "ab", "bn", "x", " B", "bb", "eb"], "n": ["z", "nn", "out", "nia", "names", "m", "ni", "all", "nt", "t", "name", "number", "note", "chain", "N", "fn", "ns", "mn", "en", "at", "na", "c", "ren", "index", "ln", "sn", "h", "ng", "g", "cn", "nu", "nb", "remote", "rn", "num", "d", "go", "size", "p", "dn", "j", "pi", "network", "ne", "local", "e", "get", "net", "gn", "current", "np", "nan", "batch", "nc", "o", "w", "no", "nl", "on", "x", "an", "scan"], "ans": ["ens", "annot", "names", "AN", "anc", "cs", "ins", "anas", "ars", "aus", "outs", "aos", "iban", "ies", "yes", "eps", "ai", "helps", "offs", "nl", "ants", "jas", "cas", "vers", "xs", "anned", "os", "ms", "atts", " means", "ANS", "can", "anes", "nan", "ams", "ads", "us", "aints", "terms", "ls", "qual", "mas", "rs", "en", "ann", "arts", "ents", "said", "ups", "uns", "vals", "ana", "ks", "ows", "cons", "amps", "iann", "ons", "ns", "acs", "es", "ians", "sn", "rans", "posts", "ations", "san", "vs", "si", "ats", "anks", "an", "irms"], "A": ["App", "Data", "AI", "AA", "Ar", "H", "C", "API", "Al", "AC", "R", "G", "N", "M", "What", "CA", "LA", "TA", "EA", "JA", "NA", "S", "O", "As", "AU", "HA", "Array", "AT", "All", "AF", "L", "Address", "GA", "EMA", "WA", "An", "At", "ATA", "mA", "P", "MA", "Java", "AM", "Map", "AE", "T", "Rap", "AB", "AP", "V", "The", "I", "B", "Alpha", "ACT", "SA"], "gcd_l": ["gcd___L", "gcdablez", "gdc_ln", "gded_l", "gcp___l", "gcp_la", "gcd_lc", "gcdablelr", "gded_lr", "gcp___la", "gcd5ls", "gcp_li", "gcd_lr", "gcp_l", "gcp___L", "gcdLoglc", "gcd_ln", "gcdLogl", "gdid_l", "gcd___lr", "gdd_ln", "gcd_ls", "gcdalll", "gcdablelt", "gcdallL", "gcd10z", "gcd___ln", "gcdLogr", "gcd___la", "gdc_l", "gcd10lt", "gdd_lr", "gcd___l", "gdd_L", "gcd_tl", "gcdablel", "gdid_lc", "gcd___li", "gdc_ls", "gcdLogtl", "gdc_left", "gcd5l", "gded_z", "gcd_L", "gcd_z", "gded_lt", "gcd10lr", "gcd_la", "gcd10l", "gcdallla", "gcd_left", "gcd_lt", "gdid_r", "gcd5ln", "gcp___li", "gcdallli", "gcp_L", "gdd_l", "gdid_tl", "gcd5left", "gcd_li"], "gcd_r": ["gmd2rb", "gcd2r", "gdd_r", "gcd0rh", "gcd___r", "gcd___u", "gcd0r", "gdd_rh", "gcd_w", "gcd_p", "gcd_rb", "gmd2ro", "gcd___ro", "gdd_p", "gcd4right", "gdd_w", "gdom_r", "gcd0u", "gcd_rn", "gdd_rn", "gcd4w", "gcd2p", "gmd_rb", "gcd2ro", "gcd___rh", "gcd4rn", "gcd4r", "gmd_p", "gdd_u", "gmd2p", "gcd___l", "gdom_ru", "gcd_right", "gdom_rr", "gcd_rh", "gcd___p", "gcd_u", "gcd4p", "gcd_rr", "gcd2rb", "gmd_ro", "gdom_p", "gmd_r", "gcd_ru", "gcd___rb", "gcd0l", "gdd_right", "gdd_l", "gmd2r", "gcd_ro"], "l": ["fl", "lit", "ol", "ld", "ls", "yl", "isl", "le", "el", "jl", "t", "lin", "lis", "kl", "il", "la", "lb", "lock", "sl", "lu", "lt", "ln", "lc", "g", "tl", "lo", "cl", "ml", "d", "dl", "p", "L", "lp", "pl", "hl", "lr", "al", "ell", "li", "u", "left", "lf", "nl", "rl", "ll"], "r": ["rb", "pr", "m", "rr", "rg", "sr", "cr", "R", "rh", "rs", "t", "y", "s", "fr", "rc", "rl", "res", "rol", "c", "ren", "h", "q", "g", "rn", "er", "re", "rm", "d", "p", "br", "j", "ro", "e", "lr", "right", "ur", "rd", "mr", "o", "u", "vr", "rel", "dr", "rar", "ar", "rt", "ru"], "i": ["f", "ei", "ini", "ri", "zi", "m", "cli", "y", "t", "ix", "iy", "ti", "ip", "ci", "k", "ji", "gi", "gu", "ij", "c", "hi", "index", "h", "q", "ki", "g", "phi", "ami", "yi", "ind", "id", "di", "d", "p", "bi", "j", "pi", "e", "ai", "it", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "x", "ui", "mi", "iu", "im", "ali", "ski"], "v": ["z", "f", "ve", "vet", "vo", "sv", "conv", "vv", "m", "qv", "van", "lv", "t", "dev", "y", "au", "ver", "value", "c", "q", "g", "val", "tv", "vs", "nv", "va", "p", "vm", "vi", "j", "av", "vt", "uv", "vis", "V", "vr", "u", "vy", "sav", "x", "ev", "cv", "nov", "vert"]}}
{"code": "s = int(input())\\ndp = [0]*(2001)\\ndp[3] = 1\\nmod = 10**9+7\\nfor i in range(4,s+1):\\n    dp[i] = (dp[i-1] + dp[i-3]) % mod\\nprint(dp[s])", "target": "235", "substitutes": {"s": ["z", "ps", "f", "sing", "sv", "ls", "sc", "m", "a", "l", "rs", "t", "gs", "os", "ns", "r", "k", "v", "sp", "sym", "es", "c", "h", "q", "b", "g", "S", "d", "p", "ss", "j", "ds", "e", "sb", "n", "si", "o", "bs", "u", "us", "south", "ts"], "dp": ["dk", "ps", "deb", "adr", "xp", "bsp", "df", "bp", "wd", "dos", "ga", "gp", "pb", "dd", "pp", "jp", "tp", "dt", "db", "vp", "ea", "dq", "pm", "fp", "deep", "dm", "pd", "d", "du", "dl", "p", "dep", "ds", "cp", "lp", "dial", "uf", "dc", "DP", "dh", "bps", "delay", "dj", "osp", "dr", "wp", "bb", "eb"], "mod": ["z", "add", "max", "base", "sum", "m", "util", "sign", "dig", "debug", "modified", "step", "r", "ver", "div", "perm", "term", "scale", " Mod", "id", "d", "comp", "mult", "p", "j", "com", "form", "Mod", "od", "MOD", "log", "prime", "cm", "mods", "fun"], "i": ["io", "ini", "zi", "m", "cli", "a", "l", "y", "ix", "ti", "info", "key", "ci", "\u0438", "k", "ji", "v", "gi", "ij", "c", "oi", "q", "ind", "id", "di", "d", "p", "bi", "multi", "j", "pi", "fi", "qi", "ai", "it", "ii", "xi", "si", "n", "ic", "o", "I", "u", "li", "me", "x", "ui", "mi", "iu", "im"]}}
{"code": "import collections\\nimport sys\\nsys.setrecursionlimit(10 ** 8)\\n\\ndef Z(): return int(input())\\ndef ZZ(): return [int(_) for _ in input().split()]\\n\\nclass edge:\\n    def __init__(self, to, id): self.to, self.id = to, id\\n\\ndef main():\\n    N = Z()\\n    col = [0] * (N-1)\\n    G = collections.defaultdict(list)\\n    for i in range(N-1):\\n        a, b = ZZ()\\n        G[a].append(edge(b, i))\\n        G[b].append(edge(a, i))\\n    numCol = 0\\n    for i in range(1, N+1): numCol = max(numCol, len(G[i]))\\n\\n    def dfs(v):\\n        colSet = set()\\n        for ed in G[v]:\\n            if col[ed.id] != 0: colSet.add(col[ed.id])\\n        c = 1\\n        for ed in G[v]:\\n            if col[ed.id] != 0: continue\\n            while c in colSet: c += 1\\n            col[ed.id] = c\\n            c += 1\\n            dfs(ed.to)\\n\\n    dfs(1)\\n    print(numCol)\\n    for i in range(N-1): print(col[i])\\n\\n    return\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "157", "substitutes": {"_": ["z", " ip", "sys", " name", "out", " un", "tmp", "m", "field", "X", "node", "l", "parent", "y", "name", "all", "ix", "err", "A", "status", " any", " __", " each", "h", "ID", "g", "val", "num", "p", " new", " val", "j", " I", " the", " you", " example", "T", "n", " all", "w", " other", " of", "prefix", "new"], "self": ["details", "sub", "sys", "ws", "obj", "tmp", "params", "wh", "ae", "my", "dev", "se", "this", "eth", "you", "py", "rs", "nt", "t", "Self", "s", "ins", "by", "au", "close", "r", "sw", "res", "public", "ren", "ln", "h", "ex", "th", "mp", "thus", "about", "context", "d", "local", "\u00e4", "e", "n", "loc", "instance", "w", "rel", "me", "x", "new"], "to": ["type", "tu", "target", "top", "one", "ta", "src", "dest", "t", "nt", "su", "ti", "by", "os", "onto", "fn", "point", "token", "ty", "too", "root", "TO", "ot", "eto", " tid", "toc", "source", "go", "d", " too", "do", "tom", "te", "path", "To", "pretty", "et", "client", "po", "onet", "into", "n", "o", "no", "pid", "mid", "on", "that", "success", "iot", "x", "base", "st"], "id": ["uid", "type", "f", "target", "str", "min", "sid", "t", "name", "hid", "did", "format", "info", "ip", "key", "oid", "k", "res", "kid", "iden", "status", "ide", "url", "tag", "index", "Id", "h", "q", "ID", "ify", "vid", "ref", "code", "aid", "source", "rev", "ids", "d", "orig", "path", "p", "end", "e", "ident", "addr", "it", "int", "rid", "wid", "n", "bid", "no", "pid", "iter", "mid", "x", "link", "data", "init"], "N": ["Y", "Num", "K", "NE", "C", "AN", "Sn", "R", "Ni", "CNN", "NB", "NI", "EN", "M", "NR", "A", "MN", "Len", "NP", "NA", "Size", "Count", "S", "ND", "O", "NT", "SN", "NS", "NM", "L", "TN", "NOTE", "P", "T", "MAN", "GN", "J", "Z", "n", "V", "I", "B", "Ns", "NC", "NUM", "NO", "NN"], "col": ["vec", "member", "pt", "cat", "label", "serv", "cycle", "rol", "COL", "co", "g", "ge", "ct", "val", "ref", "cmd", "num", "cur", "cp", "column", "icol", "cell", "set", "coll", "count", "pg", "z", "f", "el", "child", "grid", "prop", "row", "index", "ind", "cl", "ign", "arg", "disc", "fl", "ol", "field", "nt", "pos", "cf", "rot", "resp", "gt", "L", "form", "valid", "collection", "loc", "DC", "out", "Coll", "C", "cond", "y", "all", "dict", "cal", "fixed", "mot", "config", "crit", "char", "sect", "act", "ne", "J", "Col", "tab"], "G": ["GRE", "GP", "Graph", "Gold", "AG", "C", "GROUP", "Graphics", "Gu", "R", "PG", "Gs", "UG", "M", "LG", "GF", "IG", "GR", "GC", "GB", "g", "MG", "S", "GH", "Gate", "GI", "GG", "GA", "GE", "GO", "GU", "BG", "P", "GM", "Ge", "GV", "Gen", "T", "GN", "Z", "V", "B", "GS", "Group", "GT", "Gr", "CG"], "i": ["z", "f", "ini", "ei", "zi", "m", "cli", "l", "y", "t", "ti", "ip", "ci", "il", "ji", "gi", "gu", "ij", "hi", "h", "ki", "phi", "g", "yi", "ind", "di", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "u", "I", "ia", "me", "x", "mi", "iu", "im"], "a": ["ba", "ap", "m", "ae", "be", "l", "t", "sta", "ga", "au", "s", "A", "r", "ca", "la", "at", "ea", "an", "g", "ami", "area", "va", "p", "alpha", "j", "app", "e", "ai", "sa", "aa", "ra", "aj", "ac", "art", "abs", "ma", "u", "ia", "ab", "aaa", "ar", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "bp", "s", "back", "by", "cb", "r", "fb", "g", "nb", "d", "p", "bi", "br", "j", "e", "sb", "n", "o", "bs", "u", "B", "ab", "x", "bb", "bar"], "numCol": ["sumCol", "nucol", "umCol", "nColl", "umVal", "nuCor", "sumCon", "numcol", " numCount", "numVal", "Numcol", "NumColumn", "nVal", "nuCol", "monCor", "umcol", "umCor", " numMon", " numcol", "NumCol", "NumCount", "moncol", "monCol", "nuMon", "numCount", "sumcol", " numColumn", "numCon", "NumColl", "numCor", " numCon", "NumMon", "nCol", "numColl", "sumCount", "nuVal", " numColl", "nuColumn", " numVal", "numMon", "sumColl", "nCon", "numColumn", "sumVal", "monVal"], "v": ["f", "sv", "m", "qv", "inv", "l", "lv", "y", "t", "r", "ver", "k", "h", "g", "iv", "version", "rev", "vs", "nv", "vd", "p", "vi", "j", "e", "av", "vt", "uv", "n", "V", "vr", "u", "w", "vy", "x", "ev", "vector"], "colSet": ["servSet", "collNum", "colSpec", "colSave", "COLSel", "servList", "collS", "colset", "ColSet", "numSet", "colS", " colS", "columnS", "COLSet", "numList", " colNum", " colList", " colSel", "collSpec", " colSave", "colList", "COLset", "columnSpec", "colNum", " colset", "servSave", "columnNum", "numset", "numSave", "ColSel", "Colset", "servset", "colSel", " colSpec", "columnSet", "collSet"], "ed": ["sed", "eled", "led", "ded", "ted", "el", "ent", "ced", "iced", "est", "ED", "wed", "se", "ing", "eed", "ved", "en", "hed", "ated", "es", "linked", "eds", "ped", "edd", "oned", "ex", "ined", "ze", "ie", "er", "ef", "ind", "ce", "d", "vd", "ned", "ented", "ec", "et", "ged", "e", "eded", "ee", "od", "aed", "eg", "ad", "ez", "bed", "ied", "ended", "ev", "Ed", "eb", "ared"], "c": ["z", "f", "abc", "conv", "mc", "m", "C", "ced", "cr", "cs", "t", "name", "cf", "s", "con", "rc", "ci", "k", "cb", "r", "co", "h", "lc", "g", "gc", "ct", "cc", "unc", "d", "cos", "p", "cur", "cont", "cp", "ec", "com", "xc", "e", "cd", "dc", "uc", "conf", "cache", "n", "ac", "nc", "cu", "w", "u", "ic", "cum", "tc", "x", "vc", "cm", "count"]}}
{"code": "from _collections import deque\\nn,m,k=map(int,input().split())\\n\\nfre=[[] for _ in range(n+1)]\\nbro=[[] for _ in range(n+1)]\\n\\nfor i in range(m):\\n    a,b=map(int,input().split())\\n    fre[a].append(b)\\n    fre[b].append(a)\\n\\nfor i in range(k):\\n    a, b = map(int, input().split())\\n    bro[a].append(b)\\n    bro[b].append(a)\\n\\nans=[]\\n\\nx=[-1]*(n+1)\\n\\nfor i in range(1,n+1):\\n    if x[i]==-1:\\n        x[i]=i\\n        data=deque([i])\\n        while len(data)>0:\\n            p=data.popleft()\\n            for j in fre[p]:\\n                if x[j]==-1:\\n                    x[j]=i\\n                    data.append(j)\\ng=[0]*(n+1)\\nfor i in range(1,n+1):\\n    g[x[i]]+=1\\nfor i in range(1,n+1):\\n    g[i]=g[x[i]]\\n\\nfor i in range(1,n+1):\\n    aa=g[i]-1\\n    aa-=len(fre[i])\\n    for j in bro[i]:\\n        if x[i]==x[j]:\\n            aa-=1\\n    ans.append(str(aa))\\nprint(\" \".join(ans))\\n\\n", "target": "368", "substitutes": {"n": [" ne", "f", "nn", " nan", "names", " ind", "l", "y", "nt", "t", " network", "name", "all", "N", "ns", "mn", "nm", "en", "un", " fn", " ni", "c", "na", " net", " v", "ng", "sn", "ln", "an", "cn", "nu", "wn", "nb", " ii", " nu", "num", "d", " out", "dn", "network", " ns", " ng", "ne", " l", "none", " conn", "net", "gn", " y", "np", "nan", " nm", " q", " gn", " syn", " Ne", "o", "nc", "on", "norm", " num", " na"], "m": ["mu", "f", "gm", "mc", "tm", "mas", "l", "y", "t", "month", "s", "ms", "M", "r", "mn", "nm", "v", "mis", "c", "bm", "h", "q", "dm", "d", "km", "e", "o", "mr", "w", "mm", "mi", "cm"], "k": ["z", "K", "kr", "kh", "ka", "y", "t", "ck", "s", "kk", "r", "ke", "mn", "v", "c", "mk", "q", "kn", "wk", "ik", "d", "kok", "km", "ek", "kw", "o", "w", "u", "sk", "ko", "ku", "ks"], "fre": ["mu", "f", "fl", "tu", "train", "frequency", "arr", "ele", "ifa", "fa", "pie", "fine", "ae", "fe", "bl", "ran", "fu", "pan", "que", "spe", " Fre", "fr", "fol", "len", "fn", "den", "broad", "free", "Fre", "hz", "fif", "perm", "ren", "phy", "ln", "lu", "ree", "flat", "nu", "wy", "re", "de", "fle", "frac", "cre", "fps", "fen", "tf", "ife", "fin", "fc", "conf", "fire", "met", "ma", "arb", "fm", "wi", "fun", "fee", "dat", "fd"], "_": ["pt", "____", "ing", "__", "place", "val", "___"], "bro": ["byn", "ba", "rr", "fine", "bl", "bus", "be", "bd", "bc", "cycle", "ck", "by", "fr", "brand", "bridge", "ok", "r", "ch", "lb", "ker", "ren", "ln", "unic", "lo", "broken", "wr", "bra", "br", "stro", "ro", "ken", "stock", "bu", "so", "bo", "gb", "tr", "rid", "bs", "Bro", "bol", "coll", "nl", "ko", "ber", "bur", "boot", "bre"], "i": ["f", "z", "io", "ini", "ri", "zi", "ir", "l", "y", "t", "ix", "ti", "info", "s", "ip", "ci", "r", "il", "ji", "at", "ati", "gi", "v", "ij", "c", "hi", "oi", "ki", "q", "phi", "h", "yi", "id", "di", "ik", "d", "bi", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "u", "iri", "I", "ia", "iti", "mi", "iu", "im", "an", "ui"], "a": ["f", "ba", "el", "off", "apa", "ap", "ae", "be", "l", "sta", "ed", "ga", "au", "xa", "A", "ca", "r", "la", "at", "pa", "c", "ea", "an", "era", "aux", "area", "alpha", "app", "oa", "e", "ai", "sa", "aj", "ac", "o", "ma", "part", "u", "ia", " A", "ab", "ar", "ach", "am", "aff"], "b": ["z", "f", "erb", "ba", "rb", "ib", "bl", "blue", "be", "l", "y", "bd", "bc", "bp", "t", "by", "s", "bg", "bh", "fb", "r", "cb", "lb", "db", "v", "c", "bound", "nb", "emb", "bi", "br", "bin", "e", "sb", "bo", "gb", "beta", "bis", "batch", "ob", "o", "bs", "u", "ab", "bb", "bar", "base", "eb"], "ans": ["ens", "stats", "lines", "ls", "aned", "rs", "amps", "s", "ms", "anas", "ins", "ars", "ns", "outs", "aus", "os", "ann", "news", "aos", "arts", "es", "ents", "ians", "angs", "ys", "ays", "ogs", "said", "vs", "ANS", "eps", "uns", "anes", "ams", "ads", "ats", "us", "ions", "apps", "an", "ks", "ants"], "x": ["z", "f", "xes", "X", "hex", "xy", "l", "y", "t", "ix", "xs", "s", "xa", "ax", "xx", "r", "at", "v", "xml", "xt", "dx", "wx", "c", "index", "h", "mx", "ex", "ct", "fx", "test", "ctx", "config", "d", "rx", "xc", "e", "ox", "xe", "xxxx", "xi", "lex", "ic", "o", "w", "u", "xf", "on", "tx", "inx"], "data": ["mu", "map", "done", "Data", "out", "times", "ad", "ta", "bus", "xy", "ret", "full", "debug", "ed", "raw", "ns", "DATA", "div", "res", "at", "open", "na", "empty", "q", "share", "we", "test", "di", "d", "rew", "next", "dl", "da", "window", "ds", "zero", "ne", "valid", "ata", "np", "cache", "batch", "ma", "li", "w", "no", "set", "rel", "list", "chart", "new", "dat"], "p": ["ps", "f", "pai", "pard", "ph", "ion", "pr", "ap", "pkg", "l", "t", "bp", "ix", "pp", "ip", "jp", "tp", "at", "v", "sp", "perm", "pa", "h", "fp", "pre", "d", "pi", "lp", "pl", "cp", "P", "e", "it", "np", "part", "pid"], "j": ["z", "obj", "jl", "pr", "iaz", "ja", "l", "y", "t", "name", "s", "key", "jp", "r", "ji", "v", "json", "ij", "c", "job", "q", "h", "je", "d", "bi", "br", "oj", "kj", "it", "jj", "aj", "J", "o", "uj", "dj", "u", "bj", "js", "jc"], "g": ["gam", "f", "gm", "groups", "gate", "rg", "l", "y", "G", "gs", "ga", "gp", "ger", "r", "gr", "gi", "v", "greg", "gu", "gre", "c", "gt", "h", "group", "gg", "gc", "ge", "q", "gz", "tg", "erg", "go", "d", "gain", "gd", "e", "ig", "mg", "gn", "gb", "eg", "u", "w", "gen", "green", "pg"], "aa": ["pai", "ba", "arr", "apa", "AA", "fa", "qa", "ave", "ja", "dev", "acc", "sta", " fa", "af", "ga", "au", "fr", "pa", "na", "wa", "hi", "ea", "rage", "area", "ava", "va", "aaaa", "bi", "da", "alpha", "pi", "oa", "sa", "ai", "ya", "ata", "aq", "aj", "ac", "o", "ma", "ia", "aaa", "ev"]}}
{"code": "n,m,k=map(int,input().split())\\nmod1,mod2=10**9+7,998244353\\nmod=mod2\\nMAX=n-1\\nfact=[1]*(MAX+1)\\ninv=[1]*(MAX+1)\\nfor i in range(2,MAX+1):\\n    fact[i]=i*fact[i-1]%mod\\ninv[-1]=pow(fact[-1],mod-2,mod)\\nfor i in range(MAX,1,-1):\\n    inv[i-1]=inv[i]*i%mod\\ndef comb(x,y):return fact[x]*inv[y]%mod*inv[x-y]%mod if x>=y>=0 else 0\\nans=0\\ncor=pow(m-1,n-1-k,mod)\\nfor i in range(k,-1,-1):\\n    ans=(ans+comb(n-1,i)*cor)%mod\\n    cor=cor*(m-1)%mod\\n\\nprint(m*ans%mod)", "target": "375", "substitutes": {"n": ["z", "f", "nn", "max", "min", "a", "l", "t", "s", "ms", "N", "M", "ns", "mn", "r", "nm", "v", "na", "c", "h", "q", "b", "cm", "g", "mx", "an", "cn", "nu", "nb", "rn", "num", "d", "p", "dn", "j", "ne", "np", "nc", "o", " N", "w"], "m": ["z", "f", "mu", "max", "mc", "l", "t", "s", "ms", "N", "M", "module", "mn", "r", "nm", "v", "c", "bm", "pm", "h", "mut", "b", "g", "rm", "num", "d", "mem", "dm", "p", "man", "j", "pi", "mt", "mean", "o", "w", "mm", "mi", "cm"], "k": ["dk", "z", "f", "max", "K", "mc", "kr", "kind", "ka", "t", "ck", "kl", "key", "kk", "r", "ke", "mn", "v", "c", "mk", "ki", "q", "g", "ak", "ik", "num", "d", "p", "km", "j", "ek", "kw", "o", "w", "sk", "ko", "ku", "ks"], "mod1": [" mod3", "mod3", "d3", "d01", "mod01", "id2", "id1", "id3", " mod01", "d2", "id01", "d1"], "mod2": ["MOD1", " mod6", "Mod02", "mode02", "mod02", " mod02", "mode6", "MOD2", "mod6", "MOD5", "Mod5", "mod5", "Mod2", "mode2", "MOD6", "Mod1", "MOD02", " mod5", "mode1"], "mod": [" MOD", "add", "max", "options", "sign", "spec", "name", "module", "ver", "div", "un", "tag", "complex", "post", "g", "sim", "pre", "power", "dir", "com", "deg", "cert", "trans", "ident", "addr", "mode", "fac", "rem", "set", "mm", "mad", "fun", "cod", "comment", "dig", "t", "modified", "ms", "sy", "perm", "mut", "scale", "temp", "ind", "orig", "comp", "warn", "man", "im", "mods", "pro", "md", "med", "pur", "ix", "debug", "check", "sd", "length", "c", "odd", "term", "OD", " Mod", "wr", "lib", "p", "j", "pl", "Mod", "MOD", "time", "trade", "ac", "dec", "method", "sing", "min", "cond", "seq", "step", "mn", "id", "config", "d", "crit", "mult", "sem", "ox", "it", "od", "lex", "mag", "reg", "correct", "prime", "cm", "base"], "MAX": [" MOD", "MIN", "max", " Max", "K", " max", "INTER", "ALL", "INC", "FAULT", "GEN", " HAS", "X", "AN", " MAP", "Maximum", "IC", "MX", "PATH", "R", " maximum", "MT", "MR", "N", "M", "ax", "NR", "AX", "MED", "SIZE", "Max", "MAG", "ID", "ANY", "ORD", "mx", " NUM", " MX", " BASE", "MAP", "ND", "SPEC", "EX", "US", "CAN", " MIN", "TM", "maximum", "MA", "AD", "OR", "HEAD", "MOD", "MS", "MODE", "KEY", "V", "I", "NUM", "VERSION", " NO", "NO", "MD", "IN"], "fact": ["f", "feat", " factor", "stat", "cond", "eff", "Factor", "ix", "cf", "con", "fol", "fn", "ft", "acter", "factor", "index", "term", "actor", "ct", "bit", "fx", "ref", "work", "ind", "Fact", "mem", "fun", "power", "mult", "frac", "col", "act", "form", "fig", "ox", "bin", "fac", "fam", "mix", "mat", "var", "txt", "fc", "wid", "loc", "ac", "facts", "reg", "ff", "hist", "init"], "inv": ["mu", "vec", "img", "f", "vo", "sing", "out", "inventory", "hash", "conv", "el", "iq", "eff", "info", "s", "ins", "ms", "ns", "r", "res", "fr", "lim", "ip", "v", "index", "ln", "vin", "q", "Inv", "wr", "iv", "ind", "rev", "mem", "eq", "mult", "verse", "act", "form", "vert", "inn", "vol", "inc", "mix", "var", "ii", "loc", " inverse", "w", "ic", "sq", "rec", "rel", "iter", "norm", " Inv", "vc", "fun", "init"], "i": ["z", "f", "ini", "ei", "ri", "zi", "a", "ir", "l", "t", "ix", "iy", "ti", "info", "ip", "ci", "ji", "im", "ati", "gi", "v", "ij", "c", "index", "oi", "ki", "phi", "yi", "ind", "id", " ii", "di", "ik", "p", "bi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "u", "ia", "ui", "mi", "iu", "multi"], "x": ["z", "f", "yx", "xp", "X", " Ax", "a", "xd", "ux", "xy", "l", "ix", "xs", "xa", "ax", "xx", "xb", "at", " ax", "v", "xt", "dx", "wx", "c", "h", "q", "ex", "fx", "ctx", "p", " X", "rx", "j", "xxx", "xc", " xx", "e", "ox", "xe", "xxxx", "xi", "lex", "w", "px", "lat", "zx", "tx"], "y": ["Y", "z", "sys", "yo", "ey", "yl", "yn", "ay", "my", "xy", "py", "t", "iy", "s", "oy", "key", "yy", "sy", "ery", "ty", "yt", "ch", "v", "gy", "h", "b", "ys", "g", "ies", "yi", "ny", "fy", "j", "ry", "e", "ya", "ox", "uy", "ye", "yr", "o", "vy", "cy", "ic", "kit", "hy", "sky", "ly"], "ans": ["ens", "cas", "ls", "AN", "cus", "ran", "anc", "cs", "rs", "cons", "amps", "xs", "gs", "s", "ms", "os", "ins", "aus", "ns", "mn", "ons", "ann", "ars", "acts", "aos", "arts", "es", "ents", "ians", "rans", "ies", "ations", " means", "ors", "ANS", "can", "uns", "ai", "annis", "mean", "ras", "ates", "ats", "ts", "an", "ks", "ants"], "cor": ["core", "cas", "mor", "tor", "sc", "cat", "cr", "cus", "anc", "cs", "cons", " cr", "con", "cot", "cb", "ci", "ca", "res", "ch", " con", " Cor", " com", "co", "c", "cow", " pr", "cer", "ctx", "cos", "cro", "cur", "ctr", "col", "cp", "com", "cre", "ry", "Cor", " norm", "cd", "ur", "conf", "reci", "COR", "cy", "cop", "pic", "cum", " err", "cm", "pro"]}}
{"code": "# abc057_b.py\\ndef calc(p1, p2):\\n    return abs(p1[0]-p2[0])+abs(p1[1]-p2[1])\\n\\n\\nN, M = map(int, input().split())\\nab = [list(map(int, input().split())) for i in range(N)]\\ncd = [list(map(int, input().split())) for i in range(M)]\\nfor i in range(N):\\n    dist = 10**9\\n    ans = 0\\n    for j in range(M):\\n        now_dist = calc(ab[i], cd[j])\\n        if dist > now_dist:\\n            dist = now_dist\\n            ans = j+1\\n    print(ans)\\n", "target": "3", "substitutes": {}}
{"code": "A = list(map(int, input().split()))\\n\\ns = sum(A)\\n\\nif s >= 22:\\n  print(\"bust\")\\n  \\nelse:\\n  print(\"win\")", "target": "443", "substitutes": {"A": ["AY", "K", "AA", "H", "C", "X", "a", "R", "G", "N", "M", "Abs", "CA", "S", "E", "As", "D", "All", "Array", "Ah", "L", "To", "GA", "An", "P", "This", "You", "T", "The", "AP", "Z", "V", "Area", "Alpha", "B", "I", "Adam", "Ax", "SA"], "s": ["ps", "sv", "ws", "ls", "ties", "has", "ares", "fs", "a", "rs", "t", "gs", "xs", "ms", "ags", "i", "ins", "ns", "sym", "hs", "c", "es", "gets", "b", "ies", "S", "ges", "changes", "ches", "p", "ss", "ds", "sa", "ashes", "its", "ses", "sq", "set", "ats", "ts", "ks", "js", "irms"]}}
{"code": "k=int(input())\\n\\nif k<=9:\\n    print(k)\\n    exit(0)\\n\\nans=[1,2,3,4,5,6,7,8,9]\\n\\ni=0\\nwhile len(ans)<k:\\n    v=str(ans[i])\\n    n=len(v)\\n    #\u6700\u5f8c\u306e\u6841\\n    v_last=int(v[-1])\\n\\n    if v_last==0:\\n        ans.append(int(v+'0'))\\n        ans.append(int(v+'1'))\\n    elif v_last==9:\\n        ans.append(int(v+'8'))\\n        ans.append(int(v+'9'))\\n    else:\\n        ans.append(int(v+str(v_last-1)))\\n        ans.append(int(v+str(v_last)))\\n        ans.append(int(v+str(v_last+1)))\\n    i+=1\\n\\nprint(ans[k-1])\\n\\n\\n\\n\\n\\n", "target": "339", "substitutes": {"k": ["f", "K", "m", "kr", "kt", "kh", "ka", "l", "t", "ck", "kl", "ikk", "kick", "kk", "ok", "ke", "c", "mk", "h", "q", "ki", "g", "ak", "unk", "kn", "ik", "go", "num", "kok", "p", "gain", "km", "j", "kb", "kj", "ek", "zero", "kw", "tk", "conf", "sk", "ko", "x", "ku", "ks", "ack"], "ans": ["ens", "sts", "ls", "des", "nets", "vers", "ran", "pan", "rs", "gs", "amps", "s", "ins", "anas", "ms", "aus", "ns", "ons", "ars", "ann", "os", " Ans", "aos", "rets", "ians", "angs", "rans", "eds", "said", "akens", "san", "vs", "ANS", "uns", "ai", "nas", "anes", "ames", "ams", "mos", "ads", "tes", "ats", "ates", "us", "als", "aints", "anks", "ions", "an", "ks", "ants"], "i": ["ini", "zi", "m", "a", "l", "y", "t", "ix", "ti", "ci", "gi", "ij", "c", "hi", "index", "b", "yi", "ind", "di", "p", "bi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "o", "ic", "li", "I", "u", "x", "ui", "mi", "iu"], "v": ["f", "ve", "vo", "sv", "conv", "m", "qv", "l", "lv", "s", "value", "vp", "c", "b", "val", "rev", "nv", "vs", "vd", "va", "p", "vm", "vi", "ov", "j", "av", "vt", "vr", "uv", "V", "vy", "u", "w", "x", "ev", "vc", "vector", "qu"], "n": ["z", "f", "nn", "m", "l", "y", "t", "nr", "s", "N", "ns", "r", "mn", "nm", "c", "sn", "q", "b", "nu", "d", "p", "j", "nc", "o", "w", "u", "nl"]}}
{"code": "n=int(input())\\np=int(n/15)\\n\\nprint(int(n*800-p*200))\\n", "target": "492", "substitutes": {"n": ["z", "f", "nn", "m", "a", "l", "y", "nt", "t", "number", "name", "N", "i", "ns", "mn", "en", "un", "v", "na", "c", "long", "sn", "q", "b", "cn", "nu", "nb", "rn", "num", "d", "dn", "j", "ne", "total", "net", "np", "nan", "nc", "o", "u", "nl", "x", "on", "ll", "new"], "p": ["ps", "pe", "per", "pt", "ap", "m", "pad", "t", "bp", "pos", "pp", "i", "jp", "tp", "k", "press", "sp", "perm", "pa", "c", "pm", "fp", "mp", "pre", "d", "power", "cp", "pl", "pi", "lp", "P", "np", "up", "pc", "dp", "wp"]}}
{"code": "N = int(input())\\nnum,a = 0,0\\nl = []\\nfor i in range(N):\\n    num += 1\\n    a += num\\n    l += num,\\n    if a >= N:\\n        minus = a - N\\n        break\\n\\nfor i in l:\\n    if i != minus:\\n        print(i)", "target": "389", "substitutes": {"N": ["Num", "K", "H", "C", "X", "F", "Sn", "R", "Ni", "G", "NB", "NI", "M", "NR", "A", "MN", "CN", "Na", "Len", "NP", "U", "NA", "Size", "S", "E", "O", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "NUM", "Ns", "NO", "NN", "NH"], "num": ["f", "Num", "add", "nom", "max", "out", "sum", "text", "m", "mon", "one", "ter", "date", "tim", "ord", "t", "name", "number", "nt", "nr", "con", "dim", "nm", "value", "cal", "na", "length", "true", "index", "b", "nu", "nb", "id", "d", "mult", "p", "alpha", "zero", "total", "uf", "int", "np", "n", "o", "ma", "no", "NUM", "um", "x", "multi", "new"], "a": ["ba", "add", "ap", "ta", "att", "ae", "this", "all", "acc", "sta", "number", "af", "au", "ga", "A", "ca", "at", "la", "pa", "na", "c", "ea", "index", "an", "b", "g", "area", "p", "va", "alpha", "da", "ao", "j", "oa", "sa", "ai", "ata", "aa", "aj", "al", "n", "art", "ac", "ma", "ia", "ab", "ar", "ana", "am", "aff"], "l": ["z", "ol", "ls", "el", "le", "jl", "m", "all", "t", "lv", " L", "len", "r", "vl", "il", "lb", "la", "v", "sl", "c", "lt", "ln", "h", "b", "lc", "g", "ml", "d", "dl", "p", "L", "j", "lp", "lr", "n", "o", "li", "left", "nl", "list", "rl", "ll"], "i": ["ini", "ei", "zi", "cli", "m", " bi", "iii", "ni", "y", "t", "ti", "info", "ci", "k", "il", "ji", "ati", "gi", "ij", "hi", "oi", "index", "ki", "b", "phi", "yi", " ii", "di", "ik", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "I", "li", "ia", "iter", "iri", "x", "iti", "mi", "iu", "im"], "minus": ["sup", "partial", "sub", "min", "negative", "diff", "nom", " negative", "neutral", "mon", "sign", "two", "second", "below", "nos", "missing", "mod", "lo", "de", "Neg", "division", "zero", "ne", "none", "neg", "sin", "us", "plus", "non", "prime", "digit", "some", "positive"]}}
{"code": "str = input()\\nx = int(str)\\nprint(x*x*x)", "target": "115", "substitutes": {"str": ["f", "arr", "out", "obj", "pr", "hex", "t", "name", "s", "oct", "fr", "expr", "raw", "r", "res", "ch", "input", "gr", "sp", "sl", "b", "string", "wr", "pre", "STR", "char", "cur", "p", "exp", "usr", "Str", "int", "tr", "txt", "n", "print", "list", "prefix", "dr", "text", "st"], "x": ["f", "xp", "X", "hex", "xy", "y", "t", "ix", "xs", "number", "xa", "ax", "xx", "i", "xxxxxxxx", "step", "ci", "v", "xt", "dx", "wx", "c", "index", "mx", "ex", "ct", "fx", "ctx", "p", "rx", "xxx", "xc", "xe", "xxxx", "int", "xi", "n", "px", "print", "xf", "xd", "tx"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**8)\\ndef line_to_int(): return int(sys.stdin.readline())\\ndef line_to_each_int(): return map(int, sys.stdin.readline().split())\\ndef line_to_list(): return list(map(int, sys.stdin.readline().split()))\\ndef line_to_list_in_iteration(N): return [list(map(int, sys.stdin.readline().split())) for i in range(N)]\\n# def dp(init, i, j): return [[init]*i for i2 in range(j)]\\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\\n#from collections import Counter # a = Counter(A).most_common()\\n# from itertools import accumulate #A = [0]+list(accumulate(A))\\n# import bisect #bisect.bisect_left(B, a), bisect.bisect_right(B,a)\\n\\na, b = line_to_each_int()\\nprint(a*b)", "target": "111", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "X", "F", "R", "G", "NB", "NI", "M", "NR", "NP", "NA", "Count", "S", "O", "ND", "NT", "D", "NS", "NM", "L", "TN", "P", "T", "GN", "Z", "n", "V", "I", "B", "NUM", "NC", "Ns", "NO", "NN"], "i": ["z", "f", "io", "y", "t", "ix", "ti", "ip", "r", "k", "gi", "c", "q", "id", "di", "p", "j", "pi", "it", "ii", "xi", "n", "ic", "li", "I", "x", "im"]}}
{"code": "r = int(input())\\n\\nprint(r * 2 * 3.1415926535897932384626433)", "target": "552", "substitutes": {"r": ["z", "f", "rb", "m", "rg", "R", "red", "l", "rs", "t", "s", "i", "rc", "k", "v", "c", "h", "q", "b", "g", "rad", "re", "d", "p", "radius", "j", "e", "n", "u", "w", "rec", "dr", "x", "rt"]}}
{"code": "# \u5199\u7d4cAC\\nfrom collections import defaultdict\\n\\nN = int(input())\\nA = [int(i) for i in input().split()]\\n\\n# dp[(i, x, flag)]:= i\u756a\u76ee\u307e\u3067\u3067x\u500b\u9078\u3093\u3067\u3044\u308b\u6642\u306e\u6700\u5927\u5024\\n# flag: i\u756a\u76ee\u3092\u3068\u308b\u30d5\u30e9\u30b0\\ndp = defaultdict(lambda: -float(\"inf\"))\\n\\n# \u521d\u671f\u6761\u4ef6\\ndp[(0, 0, 0)] = 0\\n\\n# \u8cb0\u3046DP\\nfor i, a in enumerate(A, 1):\\n    # i\u756a\u76ee\u307e\u3067\u3067\u9078\u3076\u500b\u6570\\n    for x in range((i // 2) - 1, (i + 1) // 2 + 1):\\n        dp[(i, x, 0)] = max(dp[(i - 1, x, 0)], dp[(i - 1, x, 1)])\\n        dp[(i, x, 1)] = dp[(i - 1, x - 1, 0)] + a\\n\\nprint(max(dp[(N, N // 2, 0)], dp[(N, N // 2, 1)]))", "target": "583", "substitutes": {}}
{"code": "N = int(input())\\np = [0] + list(map(int, input().split()))\\ncount = 0\\nfor i in range(1, N):\\n    if p[i] == i:\\n        p[i], p[i + 1] = p[i + 1], p[i]\\n        count += 1\\nif p[N] == N:\\n    print(count + 1)\\nelse:\\n    print(count)", "target": "77", "substitutes": {"N": ["Y", "Num", "K", "NE", "H", "C", "X", "F", "R", "Ni", "W", "G", "NB", "NI", "M", "NV", "NR", "CN", "A", "Len", "NP", "NA", "Count", "S", "E", "ND", "O", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "NC", "NN", "NH"], "p": ["ps", "pt", "pr", "m", "ap", "rep", "l", "pkg", "t", "pos", "to", "pb", "pp", "ip", "point", "jp", "tp", "r", "at", "v", "sp", "pa", "vp", "c", "pm", "pers", "b", "q", "post", "g", "h", "mp", "pre", "pd", "d", "exp", "j", "pi", "cp", "lp", "pl", "ping", "P", "np", "up", "pc", "n", "part", "x", "pn", "proc", "pro", "pg"], "count": ["z", "ount", "max", "found", "sum", "report", "C", "counter", "hold", "nt", "t", "number", "amount", "info", "result", "err", "value", "status", "length", "c", "index", "state", "long", "group", "Count", "double", "flag", "th", "ct", "nb", "temp", "ind", "test", "code", "num", "size", "process", "next", "ctr", "total", "zero", "cd", "tf", "current", "cache", "conf", "n", "weight", "summary", "print", "list"], "i": ["io", "ini", "ei", "ri", "zi", "m", "uri", "l", "y", "t", "Ni", "ix", "ti", "info", "ip", "ci", "k", "ji", "v", "gi", "ij", "hi", "index", "ori", "ki", "phi", "b", "ami", "ind", "id", "di", "num", "ik", "bi", "multi", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "iri", "iter", "me", "x", "ui", "mi", "iu", "im"]}}
{"code": "from fractions import gcd\\n\\nN,ma,mb=map(int,input().split())\\nmed=[]\\nfor i in range(0,N):\\n    a,b,c=map(int,input().split())\\n    med.append((a,b,c))\\n\\ndp=[[[float(\"inf\") for i in range(0,401)] for j in range(0,401)] for k in range(0,N)]\\n\\nfor i in range(0,401):\\n    for j in range(0,401):\\n        if not (i==0 and j==0):\\n            g=gcd(i,j)\\n            I=i//g\\n            J=j//g\\n            if I==ma and J==mb:\\n                dp[0][i][j]=0\\n            else:\\n                g=gcd(i+med[0][0],j+med[0][1])\\n                I=(i+med[0][0])//g\\n                J=(j+med[0][1])//g\\n                if I==ma and J==mb:\\n                    dp[0][i][j]=med[0][2]\\n\\nfor i in range(1,N):\\n    a,b,c=med[i]\\n    for j in range(0,401):\\n        for k in range(0,401):\\n            if 400>=j+a and 400>=k+b:\\n                dp[i][j][k]=min(dp[i-1][j][k],c+dp[i-1][j+a][k+b])\\n            else:\\n                dp[i][j][k]=dp[i-1][j][k]\\n\\nif dp[N-1][0][0]==float(\"inf\"):\\n    print(-1)\\nelse:\\n    print(dp[N-1][0][0])\\n", "target": "578", "substitutes": {"N": ["Y", "Number", "Num", "K", "C", "X", "AN", "F", "Sn", "R", "G", "Ni", "NB", "NI", "NG", "M", "NR", "A", "MN", "CN", "NL", "NP", "NA", "Size", "S", "E", "O", "NJ", "NT", "D", "SN", "NS", "FN", "Node", "L", "NM", "TN", "P", "No", "Q", "NY", "T", "GN", "n", "V", "Note", "Ns", "NC", "IX", "NO", "NN", "IN", "NH"], "ma": ["mu", "ama", "ram", "sum", "mc", "qa", "mas", "m", "fa", "ta", "ka", "ni", "ha", "sta", "ga", "ms", "ima", "ax", "pa", "na", "ket", "hi", "ea", "wa", "media", "mod", "mp", "mic", "da", "alpha", "pi", "sa", "MA", "ra", "Ma", "mma", "si", "mar", "mac", "ia", "met", "mag", "ota", "mm", "me", "mad", "ema"], "mb": ["rb", "ib", "mor", "tmp", "mc", "m", "bl", "pb", "ms", "ok", "mn", "nm", "fb", "db", "sp", "bm", "mp", "ref", "MB", "rm", "mem", "emb", "vm", "kj", "orm", "mt", "bf", "mg", "gb", "amp", "ob", "mar", "arb", "no", "reg", "obs", "mm", "BM", "mac", "um", "bb"], "med": ["ued", "made", "held", "guard", "led", "medi", "ded", "men", "ted", "successful", "centered", "emed", "pred", "df", "red", "wed", "adjusted", "fred", "mand", "ms", "modified", "ed", "res", "ammad", "mers", "MED", "hed", "illed", "listed", "ired", "linked", "mart", "master", "kept", "said", "ped", "mod", "used", "mp", "sim", "stead", "pre", "mem", "changed", "itted", "ned", "aled", "ged", "regulated", "filled", "hist", "wild", "hend", "mer", "inished", "Med", "met", "mag", "mr", "reed", "bed", "mm", "mid", "killed", "ended", "mad", "vard", "md"], "i": ["ini", "ei", "ri", "ci", "ji", "v", "hi", "h", "di", "ai", "xi", "iri", "li", "ia", "x", "iti", "iu", "II", "z", "f", "io", "zi", "\u00ed", "m", "ir", "ti", "info", "ki", "phi", "bi", "qi", "n", "o", "im", "IC", "l", "ix", "\u0438", "at", "ij", "oi", "ie", "ik", "p", "ims", "ii", "ic", "y", "ip", "gi", "ami", "id", "d", "iat", "pi", "it", "int", "si", "u", "mi"], "a": ["f", "ba", "m", "am", "ta", "ae", "l", "y", "t", "au", "ga", "af", "A", "r", "ca", "la", "at", "v", "ea", "h", "ami", "ak", "area", "d", "va", "p", "da", "alpha", "ao", "oa", "e", "sa", "ai", "ata", "aa", "aj", "al", "ac", "art", "o", "u", "n", "ia", "w", "ab", "aaa", "x", "ar", "ana", "an"], "b": ["z", "f", "rb", "ba", "ib", "erb", "m", "be", "l", "y", "t", "bc", "cb", "r", "fb", "ch", "v", "ble", "h", "q", "nb", "d", "p", "bi", "br", "e", "bu", "reb", "gb", "n", "ub", "bs", "u", "o", "B", "ab", "bb", "eb"], "c": ["z", "f", "mc", "m", "C", "cr", "l", "y", "t", "cs", "bc", "cf", "s", "rc", "cin", "r", "ch", "cb", "ca", "v", "ci", "co", "h", "lc", "cc", "ct", "d", "p", "can", "col", "cp", "ec", "e", "cd", "dc", "fc", "n", "tc", "ac", "cu", "u", "ic", "o", "x", "cm"], "dp": ["ps", "pt", "pr", "deb", "adr", "params", "decl", "bsp", "df", "pkg", "bp", "wd", "dos", "gp", "pb", "dd", "pp", "dim", "jp", "dt", "tp", "db", "vp", "dq", "pm", "fp", "csv", "imp", "mp", "deep", "isp", "dm", "di", "pd", "d", "dl", "p", "dep", "ds", "cp", "tap", "rpm", "dial", "cd", "dc", "np", "DP", "dh", "bps", "delay", "grad", "px", "dj", "dr", "wp", "hp"], "j": ["z", "f", "io", "str", "obj", "ion", "jl", "m", "ja", "l", "y", "t", "fr", "jp", "ji", "adj", "v", "json", "ij", "item", "job", "q", "h", "ki", "jac", "test", "ijk", "di", "ik", "d", "p", "bi", "br", "oj", "kj", "jas", "it", "jj", "jump", "right", "aj", "n", "si", "o", "bs", "uj", "dj", "u", "ju", "ic", "ia", "us", "on", "x", "im", "og", "bj", "js", "jc"], "k": ["z", "f", "dk", "kg", "K", "m", "kr", "kt", "kh", "uk", "ka", "y", "t", "ck", "kl", "ikk", "s", "ok", "kk", "ang", "ke", "r", "kid", "key", "v", "kar", "kan", "ij", "mk", "ki", "q", "an", "h", "ak", "kn", "ijk", "id", "ik", "d", "p", "kin", "km", "kj", "ek", "kw", "it", "tk", "n", "ic", "o", "u", "w", "sk", "ko", "ark", "x", "ar", "ku", "ks"], "g": ["z", "f", "gam", "gm", "ag", "ging", "gate", "m", "gas", "fg", "l", "y", "G", "t", "gs", "og", "ga", "gp", "ang", "ger", "gr", "msg", "v", "gi", "greg", "gu", "gre", "h", "q", "gt", "gg", "gc", "ge", "sg", "group", "tg", "erg", "d", "go", "p", "gain", "e", "get", "ig", "mg", "gn", "eg", "n", "gl", "ic", "u", "w", "reg", "arg", "x", " G"], "I": ["Y", "K", "SI", "AI", "IP", "Si", "H", "C", "X", "IC", "F", "IA", "G", "NI", "M", "HI", "MI", "A", "IG", "KI", "Int", "IJ", "D", "Xi", "GI", "Is", "L", "If", "III", "P", "TI", "Im", "IM", "IL", "V", "B", "PI", "IE", "IF", "II", "DI"], "J": ["Y", "K", "UT", "JB", "H", "C", "Job", "JO", "G", "JS", "DJ", "M", "A", "JP", "Ja", "JA", "Ju", "IJ", "JM", "JD", "P", "Q", "Java", "_", "Journal", "T", "Z", "V", "JR", "B", "JJ", "JC", "JSON", "Js", "MJ"]}}
{"code": "n,x,y=map(int,input().split())\\nanslist = [0]*(n)\\ntemp = 0\\nfor i in range(1,n):\\n    for j in range(i+1,n+1):\\n        temp = min(abs(j-i),(abs(x-i)+1+abs(y-j)),(abs(y-i)+1+abs(x-j)))\\n        anslist[temp] += 1\\n\\nanslist.pop(0)\\n\\nfor i in anslist:\\n    print(i)", "target": "22", "substitutes": {"n": ["z", "f", "nn", "m", "a", "ni", "l", "nt", "t", "number", "nr", "N", "len", "ns", "nm", "mn", "r", "k", "v", "na", "c", "ln", "sn", "q", "nd", "g", "cn", "nu", "nb", "num", "d", "p", "ne", "np", "nc", "o", "w", "no", "nl"], "x": ["z", "yx", "m", "X", "a", "xy", "l", "ix", "xs", "xa", "xx", "ax", "v", "xt", "dx", "wx", "c", "q", "ex", "p", "rx", "xc", "e", "ox", "xe", "xi", "o", "w", "px", "u", "left", "lat", "tx"], "y": ["z", "Y", "yo", "ey", "yl", "yn", "ay", "m", "a", "xy", "ja", "l", "py", "t", "yer", "by", "sy", "oy", "yy", "yt", "v", "ij", "c", "ys", "h", "b", "gy", "g", "ies", "yi", "ny", "p", "ry", "ye", "axy", "yr", "o", "cy", "hy", "ly"], "anslist": ["msList", "annlist", "annlevel", "arslist", "anslevel", "anset", "arslevel", " anslists", "inslists", "arslisted", "ANSlist", "ANSlisted", "ansset", "anList", "annlists", "anslists", "inslist", "ANSlists", "anlist", "ranslist", "anlists", "mslist", "ranslists", "mslisted", "mslists", "insList", " ansset", "ransset", "insset", "ansList", " anslevel", " anslisted", "annlisted", "ransList", "arslists", "ANSList", "anslisted", " ansList", "arsList"], "temp": ["ps", "emp", "min", "max", "fake", "level", "tmp", "pt", "tm", "m", "tim", "pressure", "hold", "t", "result", "ptr", "div", "buffer", "sp", "perm", "c", "index", "condition", "tem", "mod", "Temperature", "mp", "wr", "test", "pre", "mem", "cur", "pi", "stem", "pl", "Temp", "fac", "current", "tr", "vt", "time", "tc", "cum", "mag", "set", "unt", "sat", "ts", "prime", "mi", "dat"], "i": ["ini", "ei", "ri", "zi", "\u00ed", "m", "ir", "a", "iii", "l", "name", "ix", "ti", "info", "ip", "ci", "k", "ji", "gi", "v", "ij", "hi", "index", "oi", "h", "q", "ki", "yi", "ie", "ind", "id", " ii", "di", "ik", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "iri", "iti", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "m", "a", "xy", "ja", "l", "t", "ix", "s", "jp", "k", "ji", "r", "v", "ij", "c", "job", "q", "h", "b", "g", "ie", "d", "p", "oj", "pi", "kj", "e", "it", "jj", "jump", "aj", "J", "xi", "o", "uj", "dj", "u", "ia", "bj", "js", "jc"]}}
{"code": "# encoding:utf-8\\nimport copy\\nimport random\\nimport bisect #bisect_left\u3000\u3053\u308c\u3067\u4e8c\u90e8\u63a2\u7d22\u306e\u5927\u5c0f\u691c\u7d22\u304c\u884c\u3048\u308b\\nimport fractions #\u6700\u5c0f\u516c\u500d\u6570\u306a\u3069\u306f\u3053\u3063\u3061\\nimport math\\nimport sys\\nimport collections\\n \\nmod = 10**9+7\\nsys.setrecursionlimit(mod) # \u518d\u5e30\u56de\u6570\u4e0a\u9650\u306f\u3067default1000\\n \\nd = collections.deque()\\ndef LI(): return list(map(int, sys.stdin.readline().split()))\\n \\nN, K = LI()\\nA = LI()\\n \\nif K > 50:\\n    print(\" \".join([str(N) for i in range(N)]))\\n    sys.exit()\\n \\nfor i in range(K):\\n    A_new = [0 for i in range(N)]\\n    imos_table = [0 for i in range(N)]\\n \\n    for j in range(N): # \u3053\u3053\u3067\u4e00\u5ea6\u72b6\u614b\u306e\u5dee\u5206\u306b\u3064\u3044\u3066\u3092imos_table\u306b\u4fdd\u5b58\\n        left = max(0, j - A[j])\\n        right = j + A[j] + 1\\n        imos_table[left] += 1\\n        if right >= N:\\n            pass\\n        else:\\n            imos_table[right] -= 1\\n    \\n    # tmp \u3092\u4f7f\u3063\u3066\u524d\u304b\u3089\u9806\u306b\u72b6\u614b\u3092\u8a08\u7b97\u3057\u3066\u3044\u304f\\n    tmp = 0\\n    for j in range(N):\\n        tmp += imos_table[j]\\n        A_new[j] += tmp\\n \\n    A = copy.deepcopy(A_new)\\n \\nprint(\" \".join(map(str, A)))", "target": "377", "substitutes": {}}
{"code": "\\nans = float(\"inf\")\\n\\n\\ndef solve():\\n\\n    N, K = map(int, input().split())\\n\\n    if N % K:\\n        print(1)\\n    else:\\n        print(0)\\n\\n\\nif __name__ == \"__main__\":\\n    solve()\\n", "target": "626", "substitutes": {"ans": ["hat", "sum", "AN", "UL", "fg", "std", "a", "gs", "pos", "ins", "os", "asin", "opt", "ul", "na", "gt", "val", "auc", "eps", "mem", "null", "bin", "inf", "nan", "mean", "grad", "an"], "N": ["Num", "NE", "C", "X", "F", "CNN", "NB", "NI", "NG", "M", "NR", "CN", "MN", "Na", "NA", "S", "ND", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "Q", "GN", "J", "n", "V", "I", "Ns", "NC", "NN", "NH"], "K": ["Y", "KN", "PK", "H", "C", "X", "F", "KK", "R", "SK", "W", "M", "k", "KB", "KR", "MC", "MN", "KI", "KS", "S", "E", "D", "L", "TN", "P", "Q", "KE", "T", "J", "Z", "V", "I", "B"]}}
{"code": "import bisect\\n\\nn,m=map(int,input().split())\\n\\nans=[]\\n\\nre=[[] for _ in range(n)]\\n\\n\\n\\nfor _ in range(m):\\n  a=list(map(int,input().split()))\\n  re[a[0]-1].append(a[1])\\n  ans.append(a)\\n  \\nd=[]\\nfor f in re:\\n  sor=[]\\n  \\n  new=sorted(list(set(f)))\\n  \\n  for i in f:\\n    c=bisect.bisect_left(new,i)\\n    sor.append(c+1)\\n    \\n  d.append(sor)\\n    \\n  \\nfor x in ans:\\n  p=x[0]\\n  q=d[p-1].pop(0)\\n  print(str('{:0=6}'.format(p))+str('{:0=6}'.format(q)))\\n  \\n\\n", "target": "225", "substitutes": {"n": ["z", "nn", "nia", "yn", "l", "t", "nt", "nr", "N", "ns", "mn", "r", "v", "sn", "h", "an", "g", "cn", "nu", "nb", "rn", "j", "ne", "gn", "np", "nc", " N", "ll"], "m": ["gm", "mc", "l", "y", "t", "s", "ms", "M", "mn", "r", "nm", "k", "v", "bm", "b", "g", "dm", "num", "ml", "mun", "man", "mt", "mr", "o", "mm", "mi", "cm", "md"], "ans": ["ens", "ls", "vers", "pan", "rs", "cons", "sex", "xs", "s", "ins", "ms", "ns", "ons", "en", "res", "ann", "ars", "aus", "v", "xa", "aces", "es", "ents", "ers", "unes", "ations", "ex", "ANS", "ne", "uns", "anas", "o", "ats", "nl", "us", "ros", "ions", "an", "ants", "ows"], "re": ["ve", "rex", "ri", "fa", "fe", "rep", "ret", "rs", "spe", "fre", "fr", "r", "res", "vre", "gre", "co", "ren", "ere", "repl", "RE", "ex", "real", "we", "ref", "rev", "rew", "rx", "genre", "ro", "ne", "cre", "are", "ry", "e", "rer", "Re", "al", "rem", "rec", "reg", "rel", "ar", "ru"], "_": [" un", " j", "val", " pos", " time", " e", " z", " the", " all", " pre", "___", " row"], "a": ["ba", "apa", "ap", "am", "ae", "att", "l", "all", "sta", "au", "af", "A", "ca", "r", "at", "la", "pa", "aw", "ea", "era", "b", "aux", "area", "va", "ao", "app", "oa", "\u00e4", "act", "ai", "ya", "sa", "ata", "aa", "abs", "ac", "ia", "ab", "eas", "aaa", "ar", "ach", "an", "aff"], "d": ["z", "out", "l", "t", "dict", "s", "dd", "days", "r", "dt", "v", "dx", "sd", "dq", "b", "nd", "g", "D", "di", "du", "pd", "dl", "do", "da", "j", "ds", "e", "ad", "o", "w", "dra", "dr", "data", "xd", "fd"], "f": ["fl", "feat", "ei", "of", "fa", "fs", "fe", "F", "l", "y", "t", "ix", "cf", "af", "fre", "s", "fr", "fol", "r", "k", "un", "v", "ft", "face", "h", "fo", "rf", "fp", "g", "b", "ef", "id", "er", "orm", "bf", "fi", "e", "inf", "sf", "fin", "fc", "al", "o", "ma", "u", "w", "ic", "ff", "xf", "um", "im", "an", "fd"], "sor": ["spor", "ssors", "asora", "Sour", "tsor", "isutor", "psbor", " sour", "sutor", "asors", "sour", "tsors", "isora", "tsour", "sora", "isour", "sors", "isors", "tsutor", "asor", "sspor", "Sor", " sors", "isor", "pspor", "psors", "sbor", " sutor", " spor", "Sora", "ssbor", "ssor", "Sors", "asour", "psor", " sbor"], "new": ["create", "out", "l", "y", "t", "old", "s", "raw", "r", "un", "news", "v", "now", "aw", "ren", "h", "fresh", "b", "g", "we", "New", "mem", "next", "j", "ew", "o", "w", "set"], "i": ["io", "ini", "l", "y", "t", "ti", "ip", "ci", "il", "v", "ij", "b", "bi", "j", "pi", "fi", "e", "ai", "it", "int", "ii", "xi", "si", "o", "ic", "li", "I", "ia", "u", "mi", "iu", "im"], "c": ["conv", "C", "cat", "cr", "cut", "cs", "anc", "bc", "cf", "con", "ci", "ca", "cb", "rc", "ch", "co", "lc", "cn", "cc", "ct", "unc", "ce", "cos", "cur", "cp", "ec", "com", "dc", "uc", "fc", "tc", "cu", "cm", "category"], "x": ["xes", "xp", "X", "ux", "xy", "y", "t", "name", "ix", "xs", "sex", "xa", "xx", "xb", "r", "v", "xt", "dx", "wx", "es", "mx", "g", "ex", "pair", "fx", "rx", "xxx", "xc", "e", "ox", "xe", "ai", "xi", "o", "u", "w", "xf", "xd", "tx"], "p": ["pe", "ps", "pai", "per", "pt", "pr", "ap", "par", "pkg", "pan", "t", "l", "bp", "y", "pos", "pb", "s", "pp", "jp", "tp", "r", "pa", "pers", "h", "j", "pi", "ping", "cp", "pl", "P", "np", "pc", "o", "u", "pid", "pn", "pg"], "q": ["z", "qt", "qual", "qa", "iq", "qv", "y", "ck", "que", "quest", "cf", "r", "ue", "v", "query", "dq", "j", "quant", "qi", "kw", "Q", "aq", "sq", "quit", "qq", "question", "qs", "qu"]}}
{"code": "l=list(map(int,input().split()));print(list(x for x in l if l.count(x)==1)[0])", "target": "665", "substitutes": {"l": ["z", "f", "lit", "ls", "yl", "el", "le", "m", "y", "t", "lis", "kl", "s", "i", "len", "r", "lb", "la", "v", "sl", "c", "lu", "long", "ln", "h", "lc", "g", "d", "dl", "p", "L", "lp", "pl", "e", "hl", "n", "log", "li", "w", "left", "nl", "list", "rl", "ll", "ly"], "x": ["z", "f", "xes", "xp", "X", "ux", "xy", "y", "t", "ix", "xs", "s", "xa", "i", "xx", "xb", "ax", "k", "v", "xt", "dx", "wx", "h", "q", "mx", "ex", "fx", "ctx", "p", "rx", "xc", "e", "ox", "xe", "xi", "n", "u", "xf", "xd", "tx"]}}
{"code": "N,K=map(int,input().split())\\nmod=10**9+7\\n\\nfactorial=[1 for i in range(N+1)]\\nfor i in range(1,N+1):\\n    if i==1:factorial[i]=1\\n    else:factorial[i] = factorial[i-1]*i % mod\\n\\ndef comb(n,k):\\n    return factorial[n]*pow(factorial[n-k]*factorial[k], -1, mod)\\n\\nfor i in range(1,K+1):\\n  if i > N-K+1:print(0)\\n  else:print(comb(K-1,i-1)*comb(N-K+1,i)%mod)", "target": "366", "substitutes": {"N": ["Name", "Num", "KN", "NE", "H", "C", "X", "AN", "F", "R", "G", "CNN", "Ni", "NG", "NI", "NB", "M", "NR", "CN", "MN", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "FN", "L", "TN", "P", "T", "GN", "J", "V", "I", "Ns", "NUM", "NC", "NO", "NN", "NH"], "K": ["HK", "Y", "KN", "FK", "CH", "PK", "H", "C", "X", "F", "KK", "R", "ANK", "SK", "G", "W", "Han", "M", "MN", "KR", "IK", "Kent", "KI", "KS", "TH", "S", "OK", "ND", "VK", "NK", "UK", "Key", "DH", "TN", "DK", "P", "Q", "KE", "T", "J", "KEY", "Z", "V", "I", "KC", "Kind", "WH", "AK"], "mod": [" MOD", "sub", "add", "min", "max", "sum", "m", "util", "sign", "dig", "ow", "debug", "rot", "ms", "step", "modified", "module", "len", "div", "perm", "tag", "scale", "lam", "bit", " Mod", "temp", "san", "re", "lib", "d", "mult", "mun", "round", "exp", "j", "com", "deg", "Mod", "mode", "od", "MOD", "component", "lex", "log", "dec", "mag", "set", "reg", "x", "prime", "cm", "mods", "fun", "pro"], "factorial": ["actory", "factorual", " factoor", " factoroor", "factory", " factorory", "factororial", "actomsky", "Factoor", "formual", "factication", "actorical", "Factor", "authentory", "factomsky", "factories", "formory", "factogram", "factorogram", "Factorial", "factorication", "factograph", " factorories", "factsrocal", "actored", "Factory", "factorory", "factor", "actor", " factual", " factrocal", "factsication", "formored", "factsories", "factorograph", "authentorial", "factsory", "authentored", " factororial", "actorial", " factication", "factoor", "factororical", " factored", "factsorial", "authentograph", " factogram", "formorial", " factomsky", "factorored", "factorories", " factory", "factorical", "factored", "factsogram", "actograph", "Factorical", "actories", "Factories", "factrocal", "Factrocal", "factoror", "factual", " factories", "factoromsky"], "i": ["ei", "ini", "ri", "zi", "\u00ed", "m", "a", "ni", "l", "y", "t", "ix", "iy", "ti", "ip", "ci", "key", "ji", "\u0438", "ati", "gi", "v", " j", "ij", "hi", "index", "ki", "q", "phi", "g", "yi", "ind", "id", "asi", "di", "ik", "p", "bi", "multi", "j", "pi", "fi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "iter", "x", "iti", "mi", "iu", "im", "ui", "item"], "n": ["nn", "nw", "m", "node", "l", "y", "nt", "t", "nr", "fn", "ns", "mn", "en", "r", "v", "na", "c", "ng", "sn", "ln", "g", "cn", "nu", "nb", "rn", "num", "d", "p", "dn", "j", "ne", "net", "gn", "np", "nan", "o", "w", "on", "x", "an", "ll"], "k": ["z", "dk", "f", "m", "kr", "kt", "kh", "uk", "ka", "t", "ck", "kl", "ok", "key", "kk", "ke", "v", "ket", "c", "mk", "ki", "q", "g", "ak", "unk", "ijk", "wk", "ik", "p", "km", "j", "kj", "ek", "kw", "tk", "sk", "ko", "ku", "ks"]}}
{"code": "n,x=map(int,input().split())\\na=list(map(int,input().split()))\\nsum=0\\nans=1\\nfor i in range(n) :\\n    sum+=a[i]\\n    if sum <= x :\\n        ans+=1\\nprint(ans)", "target": "444", "substitutes": {"n": ["nn", "nw", "nia", "m", "l", "y", "nt", "t", "N", "ns", "mn", "k", "v", "na", "c", "ng", "sn", "ln", "nd", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "net", "gn", "np", "nan", "nc", "o", "no"], "x": ["z", "xes", "m", "xp", "X", "xy", "y", "ix", "xs", "xa", "ax", "xx", "k", "v", "xt", "dx", "wx", "mx", "ex", "fx", "p", "rx", "xc", "e", "ox", "xe", "cox", "xi", "w", "px", "xf", "tx", "inx"], "a": ["ba", "ta", "att", "ae", "all", "gs", "sta", "ga", "s", "au", "xa", "A", "ca", "at", "c", "ea", "an", "b", "area", "va", "alpha", "ao", "act", "oa", "sa", "ai", "aa", "ac", "ma", "ab", "aaa", "am", "data"], "sum": ["sys", "add", "max", "med", "out", " summed", "m", "oss", "dev", "se", "this", "Sum", "su", "au", "s", "ms", "result", " Sum", "cal", "na", "ums", "ass", "sim", "num", "mem", "size", "cos", "sam", "total", "av", "sa", "fac", "mean", "average", "cum", "ma", "summary", "mm", "sat", "um", "cast", " SUM", "success", "count", "st"], "ans": ["ens", "rors", "ls", "views", "mas", "vers", "oss", "cs", "rs", "gs", "xs", "amps", "ars", "ms", "anas", "aus", "ons", "ns", "outs", "ann", "ins", "acs", "aos", "arts", "beans", "ians", "ums", "eds", "posts", "vs", "ANS", "ots", "ds", "lets", "uns", "nas", "offs", "ints", "anes", "actions", "ams", "ads", "ras", "ats", "anks", "an", "ks", "ants", "olds", "lan"], "i": ["f", "ini", "zi", "m", "y", "ix", "ti", "ip", "\u0438", "r", "k", "ji", "gi", "v", "ij", "c", "ori", "ki", "q", "b", "yi", "ind", "di", "bi", "multi", "j", "pi", "qi", "ii", "xi", "si", "li", "u", "I", "ui", "mi", "im"]}}
{"code": "import math\\ns = input().split(\" \")\\nn = list(map(float,s))\\nd = math.sqrt((n[0]-n[2])**2 + (n[1]-n[3])**2)\\nprint(d)", "target": "196", "substitutes": {"s": ["f", "str", "ws", "sv", "ls", "names", "m", "a", "cs", "l", "t", "y", "gs", "xs", "ms", "ins", "i", "ns", "r", "v", "strings", "c", "gets", "h", "b", "ys", "g", "S", "p", "ss", "ds", "sb", "ses", "ats", "ts", "js"], "n": ["nn", "nw", "lines", "out", "names", "m", "spec", "l", "all", "nt", "t", "name", "conn", "note", "nr", "N", "i", "fn", "ns", "mn", "r", "en", "len", "v", "na", "c", "ren", "ln", "sn", "an", "cn", "nu", "nb", "tn", "num", "nv", "size", "p", "dn", "ne", "notes", "net", "it", "gn", "nor", "np", "nc", "keys", "nl", "on", "norm", "ll"], "d": ["f", "ld", "des", "m", "red", "bd", "t", "dict", "dd", "density", "dt", "db", "sd", "dx", "nd", "ind", "D", "dm", "di", "pd", "de", "dl", "do", "da", "p", "j", "ds", "gd", "td", "dom", "dy", "od", "dh", "ad", "rd", "dj", "dra", "dr", "mad", "dat", "fd"]}}
{"code": "n,x,y=map(int,input().split())\\nx,y=x-1,y-1\\nadj=[[float(\"inf\")]*n for i in range(n)]\\nadj[x][y]=adj[y][x]=1\\nfor i in range(n):\\n    for j in range(n):\\n        adj[i][j]=min(abs(i-j),abs(i-x)+1+abs(y-j),abs(i-y)+1+abs(y-j))\\nans=[0 for i in range(n)]\\nfor i in range(n-1):\\n    for j in range(i+1,n):\\n        ans[adj[i][j]]+=1\\nfor i in range(1,n):\\n    print(ans[i])", "target": "22", "substitutes": {"n": ["z", "f", "nn", "nia", "names", "m", "ni", "l", "t", "nt", "name", "s", "N", "len", "ns", "mn", "nm", "k", "r", "en", "v", "na", "c", "ln", "sn", "q", "ng", "an", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "pi", "network", "ne", "net", "nor", "gn", "np", "nan", "nc", "o", "w", "no", "non", "ll"], "x": ["z", " dx", "f", "yx", "m", "xp", "X", "a", "xy", "l", "ix", "xs", "xa", "xx", "ax", "ci", "ip", "k", "v", "xml", "xt", "dx", "wx", "h", "q", "g", "ex", "width", "fx", "p", "rx", "pi", "xc", " xx", "lon", "e", "ox", "xe", "ai", "it", "xi", "o", "px", "w", "u", "left", "lat", "xf", "tx"], "y": ["Y", "z", "ym", "ey", "yl", "yn", "ay", "m", "a", "my", "xy", "zy", "l", "py", "t", "yer", "iy", "s", "sy", "oy", "yy", "ji", "ty", "yt", "v", "ij", "ys", "gy", "b", "h", "ot", "ies", "phi", "yi", "wy", "ny", "height", "col", "pi", "hot", "e", "ry", "uy", "ye", "axy", "xi", "yr", "o", "vy", "cy", "u", "ic", "w", "iny", "hy", "sky", "ly"], "adj": ["map", "arr", "apt", "obj", "nav", "tmp", "adv", "ap", "att", "eff", "xy", "acc", "conn", "nt", "ext", "pp", "ax", "attr", "ns", "days", "ang", "ani", "en", "aps", "ji", "perm", "atts", "ij", "alg", "adapt", "jac", "gz", "ind", "hd", "hess", "app", "ai", "inf", "addr", "gn", "align", "np", "aq", "aj", "abs", "ad", "ads", "grad", "ab", "prefix", "apps", "comm", "aff", "js", "dat"], "i": ["z", "ini", "ei", "iso", "ri", "zi", "m", "ir", "a", "ni", "l", "ite", "ix", "iy", "ti", "info", "ip", "ci", "\u0438", "k", "ji", "ati", "v", "gi", "ij", "hi", "index", "ki", "phi", "ami", "ie", "asi", "id", "di", "ik", "p", "bi", "pi", "qi", "e", "isi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "u", "iter", "I", "ia", "iri", "ui", "mi", "iu", "im", "iti"], "j": ["z", "f", "obj", "jl", "m", "iaz", "ja", "xy", "l", "t", "s", "ang", "jp", "ji", "r", "k", "v", "json", "ij", "h", "q", "b", "g", "je", "ie", "ijk", "d", "p", "oj", "kj", "e", "it", "jj", "jump", "aj", "J", "xi", "o", "si", "uj", "u", "dj", "li", "on", "bj", "js", "jc"], "ans": ["ens", "ls", "aned", "oss", "pan", "rs", "cons", "cs", "gs", "xs", "amps", "iann", "ms", "anas", "ins", "aus", "ons", "ns", "mn", "ann", "outs", "os", "news", "aps", "arts", "ians", "angs", "ums", "rans", "eds", "posts", "ANS", "ds", "lets", "uns", "ai", "nas", "bys", "offs", "gn", "ams", "ras", "ats", "anks", "an", "ks", "ants"]}}
{"code": "from functools import reduce\\n\\nN = int(input())\\nA_list = list(map(int, input().split()))\\n\\nsums = [A_list[0]]\\n\\nfor i in range(1, N):\\n    sums.append(sums[i-1] + A_list[i])\\n\\nresult = 0\\nfor i in range(1, N):\\n    result += sums[i-1] * A_list[i]\\n\\nresult %= 10**9 + 7\\n\\nprint(result)\\n", "target": "198", "substitutes": {"N": ["K", "NE", "C", "AN", "R", "G", "CNN", "NG", "NB", "NI", "M", "NV", "NR", "CN", "MN", "A", " Num", " n", "NL", "NP", "NA", "S", " CN", "ND", "NK", "NT", "SN", "NS", "FN", "NM", "L", "TN", "P", "GN", "J", "n", "V", "I", "Ns", "NC", "NO", "NN"], "A_list": ["A2list", "Rap_List", " A_desc", "A_LIST", "AListlist", "A___list", "ACTListtop", "ACT_list", "A_lists", " A_l", "A___line", "A_desc", "A2lists", "A___top", " A_top", " A_listed", "A67desc", "Rap_list", "A___LIST", "A2member", "A_l", "A_List", "A2List", "AListtop", "A_line", "ACTListLIST", "A_listed", "ACT_LIST", "A_word", "Rap_member", "A_member", "A67word", "ACT_top", "A_top", "AListline", "AListLIST", "Rap_lists", " A_word", "A67list", "ACT_line", "ACTListline", "A67l", "ACTListlist"], "sums": ["gsums", "sumps", " subs", "jsubs", "setsumbs", "stsumps", "gesists", "asales", "sumes", "subs", " sods", "jsums", "jsears", "gesumps", "sales", " sumps", " sumes", "scamps", "scears", "gesums", "setsaves", " saves", "sucks", "jsamps", "setsucks", "subes", "scubs", "samps", "setsums", " sists", "gsumbs", "asubes", " sales", "gsods", "asums", " samps", "gsubes", " subes", "gesumes", "stsums", "saves", " sumbs", "gsucks", " sears", "sods", "gsales", "stsists", "gsaves", "scums", " sucks", "sumbs", "sears", "sists", "stsumes", "asods"], "i": ["io", "ini", "ei", "zi", "iq", "m", "cli", "uri", "chain", "y", "ix", "iy", "ti", "info", "ip", "\u0438", "ji", "im", "gi", "v", "gu", "ij", "ori", "oi", "index", "ki", "q", "phi", "ind", "id", "asi", "di", "bi", "exp", "pi", "qi", "ai", "it", "ii", "xi", "si", "iri", "ic", "batch", "li", "I", "ia", "me", "ui", "mi", "multi", "ski", "init"], "result": ["figure", "relation", "sum", "report", "currency", "date", "neutral", "ful", "comment", "pak", "ret", "score", "this", "number", "debug", "case", "make", "final", "cup", "output", "r", "res", "public", "buffer", "answer", "comb", "root", "value", "true", "mask", "profile", "double", "complete", "position", "test", "work", "num", "goal", "power", "trace", "zero", "total", "feature", "product", "package", "results", "fac", "integer", "current", "money", "trade", "Result", "average", "mate", "void", "mark", "search", "correct", "success", "prime", "vector", "different", "confidence"]}}
{"code": "n = int(input())\\nh = [int(x) for x in input().split()]\\ndp = [0]*n\\ndp[n-2] = abs(h[n-1]-h[n-2])\\n\\nfor i in range(n-3,-1,-1):\\n  dp[i] = min(dp[i+1]+abs(h[i]-h[i+1]),dp[i+2]+abs(h[i]-h[i+2]))\\n  \\nprint(dp[0])", "target": "5", "substitutes": {"n": ["z", "f", "nn", "out", "m", "l", "all", "nt", "t", "number", "name", "N", "fn", "ns", "mn", "k", "en", "v", "ll", "na", "c", "ren", "ng", "sn", "q", "ln", "nd", "g", "cn", "nu", "ct", "nb", "num", "d", "size", "p", "dn", "j", "network", "ne", "net", "gn", "np", "nc", "o", "no", "nl", "non", "on", "norm", "count"], "h": ["f", "ph", "uh", "he", "has", "H", "m", "kh", "hex", "rh", "hm", "l", "t", "s", "hz", "pp", "bh", "ch", "v", "history", "hs", "sl", "hi", "phi", "g", "th", "http", "hal", "ct", "hd", "go", "ih", "p", "host", "ht", "oh", "hw", "hl", "it", "its", "dh", "gh", "hr", "hh", "ah", "help", "sh", "hash", "his", "md", "hp"], "x": ["xes", "xp", "X", "hex", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "xx", "xb", "k", "v", "dx", "wx", "c", "q", "ex", "fx", "p", "rx", "xc", "e", "ox", "xe", "xi", "px", "xf", "tx", "inx"], "dp": ["dk", "ps", "deb", "adr", "decl", "df", "pkg", "wd", "ga", "pb", "gp", "dd", "pp", "dro", "ip", "jp", "dt", "tp", "db", "pipe", "pa", "vp", "dq", "fp", "csv", "imp", "dm", "di", "pd", "d", "du", "dl", "p", "dep", "da", "do", "ds", "cp", "lp", "tap", "td", "dial", "cd", "dc", "np", "DP", "dh", "bps", "delay", "grad", "dj", "dr", "wp", "hp", "dat"], "i": ["f", "io", "ini", "ei", "ri", "zi", "m", "uri", "cli", "y", "name", "ix", "ti", "info", "ip", "ci", "key", "\u0438", "ji", "gi", "v", "ij", "c", "hi", "index", "q", "phi", "g", "ami", "sim", "ind", "id", "di", "p", "bi", "multi", "j", "pi", "exp", "fi", "qi", "ai", "it", "ii", "xi", "si", "ic", "batch", "li", "u", "I", "ia", "me", "ui", "mi", "iu", "im", "item"]}}
{"code": "N = input()\\nfor n in N:\\n  if int(n) == 7:\\n    print('Yes')\\n    exit()\\nprint('No')", "target": "327", "substitutes": {"N": ["Y", "K", "NE", "H", "C", "X", "F", "R", "G", "W", "M", "NR", "A", "U", "NA", "S", "E", "O", "D", "SN", "NS", "L", "P", "Q", "T", "J", "Z", "V", "I", "B", "NO", "NN"], "n": ["ner", "f", " fast", "z", "nn", "nw", "m", "a", "l", "y", "nt", "name", "t", "number", "i", "ns", "k", " fn", "na", "c", "nd", "b", "g", "nu", "nb", "ind", "num", "d", "orn", "p", "nil", "j", "ne", "none", "nor", " note", "np", " omn", "nan", "nc", "no", "on", "x", "new"]}}
{"code": "import sys\\n\\ndef solve():\\n    input = sys.stdin.readline\\n    N = int(input())\\n    seat =  0\\n    for _ in range(N):\\n        l, r = map(int, input().split())\\n        seat += r - l + 1\\n    print(seat)\\n        \\n\\n    return 0\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "720", "substitutes": {"input": ["expression", "interface", "str", "out", "stream", "reader", "eval", "util", " Input", "sample", "step", "raw", "output", "cin", "buffer", "enter", "think", "empty", "index", "q", "csv", "ref", "Input", "source", "select", "acl", "cmd", "val", "read", "cur", "command", "act", "form", "get", "parse", "it", "int", "each", "inner", "focus", "feed", "sequence", "iter", "print", "exec", "lat", "gen", "data", "view", "proc", "text", "shift"], "N": ["Y", "K", "NE", "H", "C", "R", "CNN", "NI", "M", "NR", "CN", "NA", "S", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "P", "No", "Q", "T", "GN", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "seat": ["cas", "play", "sed", "role", "blind", "figure", "rolled", "ice", "cel", "sex", "nation", "su", "case", "sie", "result", "say", "broad", "suit", "co", "sl", "c", "index", "slave", "rue", "position", "ticket", "sen", "test", "character", "trace", "race", "nat", "speed", "port", "eat", "slot", "ride", "short", "ward", "ace", "cum", "ray", "set", "ab", "abl", "bring", "season", "pron", "bench", "car", "ction"], "_": [" a", " i", " m", "k", " j", "__", " __", "val", "j", " k", " y", "I", "___"], "l": ["f", "lit", "ls", "el", "le", "m", "t", "lin", "s", "i", "la", "lb", "v", "ul", "sl", "c", "lt", "ln", "b", "lc", "lo", "d", "p", "L", "j", "lp", "pl", "hl", "lr", "n", "li", "left", "u", "w", "nl", "rl", "ll"], "r": ["rb", "m", "rr", "range", "sr", "R", "rs", "t", "nr", "s", "i", "rc", "rl", "v", "c", "h", "q", "b", "re", "d", "p", "j", "ro", "e", "n", "rd", "vr", "mr", "u", "w", "rar", "ar", "rt", "ru"]}}
{"code": "li = set(map(int,input().split()))\\nprint(len(li))", "target": "32", "substitutes": {"li": ["ls", "le", "bl", "ni", "l", "lv", "lis", "ti", "i", "lig", "ci", "len", "la", "gi", "lic", "sl", "lu", "ln", "ki", "lc", "lo", "yi", "di", "dl", "bi", "lie", "pl", "fi", "LI", "ii", "si", "les", "Li", "lf", "nl", "ui", "mi", "multi"]}}
{"code": "N = int(input())\\narr = list(map(int, input().split()))\\ncount = sum([ 1 for x in arr[::2] if x % 2 == 1])\\nprint(count)", "target": "126", "substitutes": {"N": ["Y", "Num", "K", "C", "X", "Total", "F", "R", "G", "M", "A", "Count", "S", "E", "O", "Input", "D", "NS", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", "B", "Ns"], "arr": ["map", "img", "str", "obj", "tmp", "array", "Ar", "pad", "bl", "xy", "all", "nt", "seq", "dict", "fre", "ax", "err", "adj", "res", "gr", "db", "split", "val", "Array", "agg", "pl", "buf", "args", "mat", "gb", "wav", "n", "abs", "iter", "ray", "coll", "arg", "list", "enc", "bar", "data", "inst", "hist", "dat"], "count": ["z", "f", "ount", "max", "stat", "found", "sum", "iq", "cat", "unique", "counter", "nt", "number", "len", "ch", "status", "length", "c", "match", "index", "mask", "group", "Count", "flag", "th", "ct", "nb", "code", "ind", "id", "temp", "num", "d", "size", "cont", "col", "total", "mount", "current", "cache", "n", "list", "hash"], "x": [" dx", "ey", "xes", "xp", "X", "xy", "y", "ix", "xs", "xa", "xx", "xb", "ax", " ax", "dx", "wx", "ex", "fx", "\u00e7", "rx", "ost", "xxx", "xc", " xx", "ox", "xe", "xxxx", "xi", "px", "xf", " cx", "xd", "tx", "inx"]}}
{"code": "l = [int(x) for x in raw_input().split()]\\nprint \"Yes\" if l[0] + l[1] >= l[2] else \"No\"", "target": "618", "substitutes": {"l": ["z", "f", "fl", "ol", "ld", "ls", "el", "le", "m", "lv", "t", "lis", "kl", "i", "len", "lb", "v", "sl", "c", "long", "ln", "h", "lay", "b", "lc", "lag", "g", "lo", "ml", "d", "p", "dl", "L", "j", "lp", "pl", "hl", "lr", "n", "o", "li", "nl", "list", "rl", "lists", "ll", "ly"], "x": ["z", "yx", "xes", "xp", "X", "hex", "xy", "y", "t", "ix", "xs", "xa", "i", "xx", "xb", "k", "ax", "v", "xt", "dx", "wx", "c", "mx", "ex", "fx", "p", "rx", "xc", "e", "ox", "xe", "xi", "n", "xf", "xd", "tx", "inx"]}}
{"code": "N, T = map(int,input().split())\\nt = list(map(int,input().split()))\\nans = 0\\ns, e = 0, T\\nfor k in range(1,N):\\n    if e < t[k]:\\n        ans += e-s\\n        s = t[k]\\n        e = t[k] + T\\n    else:\\n        e = t[k] + T\\nans += e-s\\nprint(ans)\\n", "target": "355", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "X", "F", "R", "Ni", "G", "NB", "M", "NR", "A", "MN", "NP", "S", "E", "O", "NT", "D", "NS", "L", "TN", "P", "No", "J", "n", "Z", "V", "I", "B", "Ns", "NN", "NH"], "T": ["Y", "TR", "K", "H", "C", "X", "Total", "F", "R", "G", "WT", "W", "M", "A", "TA", "TH", "S", "E", "O", "D", "TG", "AT", "L", "TW", "TP", "TN", "TM", "P", "TS", "Q", "This", "J", "Z", "V", "I", "B", "TT", "GT", "PT"], "t": ["type", "f", "tu", "tmp", "pt", "tm", "m", "ta", "a", "l", "y", "nt", "tt", "i", "dt", "tp", "at", "ty", "v", "c", "ot", "b", "q", "g", "ct", "tree", "d", "te", "p", "td", "total", "wt", "tf", "tr", "txt", "n", "tc", "o", "table", "tab", "list", "ts", "rt"], "ans": ["ens", "rors", "lines", "ls", "ones", "cs", "rs", " es", "gs", "xs", "au", "ins", "anas", "ars", "aus", "ns", "ons", "ms", "ann", "outs", "os", " Ans", "aces", "arts", "aos", "es", "ents", "ians", "angs", "ers", "ations", "S", " means", "vs", "ANS", "ss", "uns", "anes", "ses", "ams", "n", " spans", "ates", "ats", "eas", "us", "x", "ts", "ions", "an", "ks", "ants"], "s": ["f", "z", "sts", "ps", "sv", "ls", "m", "a", "l", "se", "rs", "y", "steps", "cs", "xs", "ins", "i", "ns", "r", "v", "sd", "es", "c", "ers", "h", "b", "g", "ies", "S", "er", "d", "eps", "p", "ss", "ds", "sa", "sb", "sf", "its", "ses", "al", "n", "si", "o", "w", "sq", "sin", "ates", "ats", "tes", "x", "ts", "ar", "an"], "e": ["f", "pe", "ei", "ele", "el", "le", "ent", "m", "ae", "a", "fe", "be", "l", "se", "eeee", "ed", "i", "r", "en", "ue", "es", "eur", "c", "g", "ge", "ate", "E", "ef", "ze", "eu", "oe", "er", "ie", "ce", "d", "de", "te", "p", "end", "ec", "et", "ne", "xe", "ee", "entity", "eg", "n", "o", "u", "me", "x"], "k": ["z", "K", "kat", "kr", "kt", "kh", "ka", "l", "acc", "ck", "kl", "ikk", "i", "key", "kk", "ok", "ke", "kid", "kan", "v", "ket", "c", "mk", "ki", "q", "b", "ak", "unk", "kn", "ind", "ijk", "wk", "id", "num", "ik", "p", "kin", "km", "j", "kj", "ek", "kw", "it", "sk", "set", "ko", "x", "ku", "ks"]}}
{"code": "n,k=map(int,input().split())\\nif n>2*k-2:\\n  print('YES')\\nelse:\\n  print('NO')\\n", "target": "624", "substitutes": {"n": ["z", "f", "nn", "m", "l", "y", "t", "s", "N", "i", "ns", "mn", "un", "v", "na", "c", "ln", "sn", "q", "b", "h", "g", "cn", "nu", "nb", "num", "d", "p", "j", "nan", "nc", "w", "no", "x", "after"], "k": ["dk", "K", "mc", "m", "kr", "kh", "ka", "ck", "kl", "ikk", "i", "kk", "kan", "ke", "v", "c", "ket", "mk", "ki", "q", "kn", "ak", "wk", "p", "kok", "km", "j", "kj", "ek", "kw", "u", "sk", "ko", "ku", "ks"]}}
{"code": "tochi=input()\\ns=[]\\nI=[]\\n\\nsum=0\\nn=len(tochi)\\nfor i in range(n):\\n    if tochi[i] == \"\\\\\":\\n        s.append(i)\\n    elif tochi[i] == \"/\" and s:\\n        j = s.pop()\\n        a = i - j\\n        sum += a\\n\t\\n        while I and I[-1][0] > j:\\n            a += I.pop()[1]\\n        I.append([j, a])\\n\\nprint(sum)\\nprint(len(I), *(a for j, a in I))\\n    \\n\\n", "target": "394", "substitutes": {"tochi": ["Tochn", "tophi", "tochn", "tchi", "tphi", "tooch", "TOphi", "ochi", "etocharge", "Tochy", "tocharge", "TOchi", " tochn", "atochi", "tch", " toch", "ophi", "Toenergy", "etodet", "todet", "etoch", "toochn", "tochy", " todet", "atocharge", "toosh", "toenergy", "Tophi", "Toosh", "toochi", " tophi", "etochi", "och", " toenergy", " tocharge", " toosh", "Toch", "atodet", "Tochi", "tchy", "toch", "atoch", "tooenergy", "TOch", "oosh", "TOchy"], "s": ["f", "ps", "sts", "sv", "ls", "SI", "has", "m", "l", "y", "t", "se", "gs", "xs", "rs", "ins", "ns", "r", "strings", "sp", "es", "c", "b", "g", "S", "re", "p", "ss", "ds", "sb", "sa", "its", "ims", "si", "o", "bs", "ats", "us", "st", "x", "sh", "ts", "ar", " S", "js"], "I": ["Y", "SI", "AI", "IP", "Si", "C", "H", "X", "IC", "F", "G", "NI", "HI", "N", "RI", "MI", "A", "M", "IG", "CI", "KI", "U", "IS", "Pi", "S", "E", "O", "IJ", "D", "Xi", "Is", "IO", "L", "VI", "TI", "P", "Q", "IM", "IL", "T", "LI", "J", "V", "One", "B", "PI", "II", "We", "IE", "It", "GI", "DI"], "sum": ["z", "add", "max", "sv", "out", "m", "sign", "all", "Sum", "su", "info", "result", "ms", "say", "v", "sym", "match", "index", "scale", "g", "sim", "num", "mem", "size", "tail", "alpha", "sam", "total", "sa", "ai", "mean", "average", "si", "cum", "ma", "summary", "us", "sat", "um", "success", "hash", "cm", "hist", "count"], "n": ["nn", "nia", "m", "ni", "l", "t", "nt", "nr", "N", "len", "ns", "mn", "r", "nm", "v", "na", "c", "ln", "sn", "g", "cn", "nu", "nb", "num", "d", "p", "ne", "np", "nc", "no", "nl"], "i": ["f", "z", "io", "ini", "ei", "zi", "\u00ed", "m", "l", "y", "ix", "ti", "ip", "ci", "ji", "gi", "v", "ij", "index", "q", "b", "phi", "yi", "ie", "ind", "id", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "li", "ia", "o", "x", "mi", "iu"], "j": ["z", "f", "obj", "jl", "m", "ja", "l", "y", "t", "pos", "jp", "k", "ji", "ch", "r", "v", "ij", "h", "q", "b", "g", "je", "jac", "ie", "ind", "d", "p", "bi", "br", "kj", "it", "jj", "jump", "aj", "J", "o", "uj", "li", "dj", "u", "bj", "js", "jc"], "a": ["z", "f", "ba", "apa", "m", "am", "ta", "ae", "y", "t", "all", "sta", "name", "au", "ga", "xa", "A", "ca", "at", "la", "aos", "pa", "na", "c", "wa", "ea", "index", "h", "b", "g", "area", "p", "va", "alpha", "da", "ao", "oa", "\u00e4", "e", "sa", "ai", "ata", "aa", "ac", "o", "ma", "u", "w", "ia", "sha", "aaa", "ar", "an", "ova"]}}
{"code": "s = input()+\"2\"\\nk = int(input())\\n\\nfor i,j in enumerate(s):\\n    if j != \"1\":\\n        now = i\\n        break\\n\\nif s == \"1\"*len(s):\\n    print(1)\\nelse:\\n    if k-1 < now:\\n        print(1)\\n    else:\\n        print(s[now])", "target": "119", "substitutes": {"s": ["z", "ps", "f", "sts", "str", "sv", "ws", "ls", "m", "a", "l", "rs", "t", "gs", "xs", "ins", "ms", "ns", "r", "os", "v", "strings", "sp", "sl", "c", "es", "gets", "q", "b", "g", "S", "csv", "string", "vs", "p", "ss", "ds", "less", "e", "sa", "sb", "its", "n", "si", "abs", "bs", "w", "sq", "tes", "ats", "ts", "qs", "ks", "js"], "k": ["f", "max", "K", "m", "kr", "ka", "t", "ck", "kl", "ikk", "kk", "r", "ke", "kid", "v", "c", "mk", "q", "kn", "unk", "ijk", "ik", "p", "kok", "km", "kj", "ek", "kw", "n", "w", "sk", "ko", "ku", "ks"], "i": ["zi", "m", "a", "l", "y", "t", "ix", "ti", "key", "ji", "v", "ij", "index", "ki", "b", "yi", "ind", "id", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "I", "li", "x", "mi"], "j": ["z", "jl", "pr", "ja", "l", "y", "t", "name", "key", "jp", "ji", "v", "json", "ij", "q", "b", "g", "ind", "ik", "d", "p", "kj", "jas", "it", "jj", "jump", "aj", "J", "si", "n", "ju", "bs", "uj", "ii", "o", "ia", "js", "jc"], "now": ["wait", "gm", "sc", "off", "when", "down", "here", "Now", "node", "NOW", "hold", "this", "ow", "row", "step", "key", "ok", "sw", "given", "age", "at", "before", "sp", "wa", "length", "store", "start", "we", "temp", "pre", "next", "cur", "gov", "self", "kw", "current", "then", "today", "time", "ait", "aj", "n", "loc", "first", "set", "where", "currently", "on", "ready", "count", "new", "always"]}}
{"code": "def resolve():\\n    inp = input()\\n\\n    c0 = inp.count('0')\\n    c1 = inp.count('1')\\n\\n    print(min(c0, c1)*2)\\n\\nresolve()", "target": "40", "substitutes": {"inp": ["insp", "dinp", " inP", "ginp", "ding", "intm", "intsp", "ginP", "inps", "cinsp", "INg", "intp", "insh", "ing", "ginps", "inP", "INps", " inps", " inm", "cinp", "dinsp", "cinm", " insp", "INh", "dinh", "inm", "inh", "INp", "ginh", "insg", "INP", " inq", " inh", "inssp", "intq", "INsp", "inq", "cinq"], "c0": ["bcZero", "cZero", "ce25", "c02", "c25", "ctor", " czero", "ce02", " cor", "lczero", "ct1", "lc1", "bc02", "co0", "bc0", "ceZero", "ctzero", "bc25", "ct0", "co25", "lc0", "lcor", "czero", "cor", "ce0", "co02", "coZero"], "c1": ["rc01", "rc1", " c01", "ctb", "cs2", "cb", "pcOne", "csb", "cs1", "cacheb", "c81", "pc81", "cache1", "cache7", "c7", " c81", "ct7", "cache2", "pc01", "c2", "cOne", "ct2", "pc1", "c01", " cOne", "cs7", "rcOne", "rc81", "ct1"]}}
{"code": "i=0\\nwhile True:\\n    N=int(input())\\n    if N==0:\\n        break\\n    else:\\n        a = list(map(float,input().split()))\\n        m=sum(a)/N\\n        #print(m)\\n        for i in range(N):\\n            a[i]=(float)(a[i]-m)**2\\n            #print(a[i])\\n            i+=1\\n        \\n        A=(sum(a)/N)**(1/2)\\n        print(A)\\n        \\n", "target": "683", "substitutes": {"i": ["z", "f", "l", "y", "t", "s", "r", "k", "v", "c", "q", "b", "g", "id", "d", "p", "bi", "j", "pi", "ai", "ii", "si", "n", "o", "I", "w", "mi", "count"], "N": ["Num", "K", "H", "C", "AN", "F", "R", "Ni", "G", "NB", "NI", "NG", "M", "NR", "A", "Na", "Len", "NP", "U", "NA", "Size", "Count", "S", "NT", "D", "SN", "NS", "NM", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NH"], "a": ["ba", "array", "ta", "att", "ae", "another", "all", "sta", "ga", "au", "A", "ca", "la", "at", "c", "ea", "b", "aux", "area", "da", "alpha", "ao", "j", "oa", "sa", "ata", "aa", "ac", "n", "o", "ma", "ia", "ab", "aaa", "an"], "m": ["mu", "f", "gm", "mc", "l", "t", "ms", "M", "r", "k", "v", "c", "h", "q", "g", "dm", "p", "j", "pi", "n", "o", "w", "Mi", "mm", "mi", "multi", "cm"]}}
{"code": "h,w=map(int,input().split())\\nhw=[[]]\\nans=[]\\nfor i in range(h):\\n    ht=[0]+list(map(int,input().split()))\\n    hw.append(ht)\\nfor i in range(1,h+1):\\n    for j in range(1,w):\\n        if hw[i][j]%2==1:\\n            ans.append([i,j,i,j+1])\\n            hw[i][j+1]+=1\\n\\nfor k in range(1,h):\\n    \\n    if hw[k][-1]%2==1:\\n        ans.append([k,w,k+1,w])\\n        hw[k+1][-1]+=1\\nprint(len(ans))\\nfor i in ans:\\n    for j in range(len(i)):\\n        i[j]=str(i[j])\\n    print(\" \".join(i))", "target": "605", "substitutes": {"h": ["uh", "ph", "he", "H", "m", "kh", "rh", "l", "ha", "hei", "y", "hz", "bh", "r", "high", "ch", "ho", "v", "hs", "hi", "zh", "q", "g", "th", "hd", "ih", "host", "p", "height", "oh", "hl", "n", "hr", "hang", "hh", "sh", "x", "his"], "w": ["z", "nw", "iw", "ws", "win", "wh", "t", "W", "wd", "tw", "wall", "sw", "v", "wa", "wx", "wl", "wn", "wb", "we", "wy", "wr", "wk", "window", "rw", "kw", "wt", "wid", "ew", "n", "wal", "wp", "x", "wi", "width"], "hw": ["sys", "nw", "iw", "ws", "him", "tm", "xp", "gt", "windows", "rh", "hm", "pkg", "ware", "ha", "hold", "conn", "ow", "wd", "hz", "aus", "www", "sw", "phys", "wa", "hs", "wx", "phy", "vp", "hops", "dq", "phi", "mk", "htt", "wn", "Hardware", "we", "mph", "wy", "hip", "thus", "irm", "aux", "cpu", "ctx", "hd", "aw", "dl", "xc", "rpm", "xe", "mg", "hand", "wo", "nz", "whe", "fw", "cu", "hh", "haw", "home", "mm", "sh", "wife", "wi", "igh", "hp"], "ans": ["ens", "ws", "ls", "vers", "oss", "ran", "anc", "rs", "cons", "amps", "xs", "gs", "s", "ins", "ars", "aus", "ns", "anas", "ons", "ann", "outs", " Ans", "aos", "beans", "es", "ians", "angs", "urs", "ums", "sn", "eds", " means", "san", "ms", "vs", "ANS", "anus", "ds", "uns", "sa", "ai", "nas", "offs", "una", "anes", "nan", "uls", "si", "ams", "ras", "ates", "ats", "eas", "us", "sh", "os", "an", "ks", "ants"], "i": ["io", "ei", "ini", "ri", "zi", "m", "ir", "a", "l", "y", "ret", "ix", "ti", "info", "s", "ip", "ci", "r", "ji", "ati", "v", "gi", "ij", "c", "hi", "oi", "ki", "phi", "yi", "ie", "ind", "id", "di", "ik", "ih", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "u", "x", "iti", "mi", "iu", "im"], "ht": ["sys", "iw", "uh", "he", "pt", "html", "iet", "rh", "HT", "pkg", "conn", "ha", "hei", "nt", "wd", "hz", "bh", "hs", "hi", "phy", "zh", "gy", "gt", "th", "wy", "hd", "ih", "hea", "tif", "height", "vol", "hl", "gh", "hard", "hh", "sh"], "j": ["z", "out", "obj", "jl", "pr", "pt", "m", "a", "ja", "l", "y", "ret", "t", "s", "fr", "key", "jp", "ji", "err", "r", "v", "sp", "json", "ij", "c", "q", "b", "je", "g", "ind", "ijk", "di", "p", "bi", "br", "oj", "jo", "kj", "it", "jj", "jump", "aj", "J", "n", "si", "o", "ii", "uj", "dj", "li", "ju", "u", "us", "on", "x", "im", "bj", "js", "jc"], "k": ["z", "kg", "K", "m", "kr", "kt", "kh", "uk", "ka", "ck", "kl", "ok", "key", "kk", "kan", "ke", "kid", "v", "mk", "ki", "q", "g", "ak", "kn", "ijk", "wk", "ik", "kok", "km", "kj", "ek", "kw", "tk", "ac", "u", "sk", "ko", "kit", "ku", "ks"]}}
{"code": "import sys\\ndef input():\\n    return sys.stdin.readline()[:-1]\\nN,M=map(int,input().split())\\nsys.setrecursionlimit(200000)\\nb=[tuple(map(lambda x: int(x)-1, input().split())) for i in range(M)]\\nclass uf:\\n    def __init__(self,n):\\n        self.n=n\\n        self.l=[-1]*n\\n    def ro(self,n):         #root\\n        if self.l[n]<0:\\n            return n\\n        r=self.ro(self.l[n])\\n        self.l[n]=r\\n        return r\\n    def me(self,a,b):       #merge\\n        ra=self.ro(a)\\n        rb=self.ro(b)\\n        if self.l[ra]>self.l[rb]:\\n            ra,rb=rb,ra\\n        if ra!=rb:\\n            self.l[ra]+=self.l[rb]\\n            self.l[rb]=ra\\n    def size(self,n):\\n        return -self.l[self.ro(n)]\\n    def sa(self,a,b):       #same\\n        return self.ro(a)==self.ro(b)\\n    def rl(self):           #roots list\\n        return [i for i,v in enumerate(self.l) if v<0]\\n    \\n    def len(self):          #len(roots)\\n        return len(self.rl())\\n    def ul(self):\\n        d={n:i for i,n in enumerate(self.rl())}\\n        m=[[]for i in range(self.len())]\\n        for i in range(self.n):\\n            m[d[self.ro(i)]].append(i)\\n        return m\\n    def __str__(self):\\n        return f\"{self.ul()}\"\\nl=[0]*M\\ns=uf(N)\\nh=N*(N-1)//2\\nfor i in range(M-1,-1,-1):\\n    l[i]=h\\n    if s.ro(b[i][0])!=s.ro(b[i][1]):\\n        h-=s.size(b[i][0])*s.size(b[i][1])\\n        s.me(b[i][0],b[i][1])\\nprint(*l,sep=\"\\n\")", "target": "287", "substitutes": {"N": ["Y", "K", "H", "C", "X", "F", "R", "G", "Ni", "NR", "A", "MN", "U", "S", "O", "D", "L", "NM", "P", "Q", "T", "J", "V", "I", "B", "NC"], "M": ["K", "m", "C", "MP", "H", "MX", "F", "R", "Multi", "PM", "G", "MT", "CM", "MI", "MN", "MC", "MF", "U", "MM", "S", "O", "D", "L", "JM", "TM", "P", "IM", "MS", "T", "MAN", "DM", "J", "V", "I", "B", "Mi", "MU"], "b": ["z", "f", "m", "a", "y", "t", "bp", "s", "bg", "cb", "r", "k", "buffer", "v", "c", "h", "g", "nb", "d", "p", "bi", "j", "bs", "w", "B", "base"], "i": ["z", "m", "xy", "y", "ix", "ti", "nr", "ip", "key", "r", "k", "ci", "v", "c", "ind", "id", " ii", "p", "j", "pi", "xi", "o", "I", "li", "iter", "im"], "self": ["disk", "dev", "parent", "full", "close", "Self", "sw", "public", "h", "wn", "deep", "round", "links", "cert", "client", "cmp", "weak", "first", "also", "new", "ws", "obj", "params", "dig", "pkg", "conn", "this", "se", "pp", "final", "ren", "replace", "ex", "cl", "hw", "print", "me", "md", "ls", "look", "ae", "rs", "nt", "resp", "c", "user", "console", "next", "app", "results", "subject", "today", "cache", "w", "sh", "tmp", "my", "cook", "s", "res", "ln", "config", "vs", "local", "np", "log", "rel"], "n": ["z", "f", "nn", "m", "a", "y", "nt", "t", "number", "s", "len", "ns", "nm", "k", "r", "mn", "fn", "v", "na", "c", "ln", "sn", "h", "q", "g", "cn", "nu", "nb", "num", "d", "size", "p", "j", "ne", "int", "nor", "np", "nan", "nc", "o", "nl", "x", "ll"], "l": ["ls", "le", "m", "t", "len", "r", "v", "length", "c", "lt", "ln", "h", "lc", "g", "lo", "d", "p", "L", "j", "lp", "pl", "lr", "w", "nl", "list", "ll"]}}
{"code": "r, g, b, n = map(int, input().split())\\ncnt = 0\\n\\nfor i in range(n + 1):\\n    for j in range(n + 1):\\n        tmp = n - i * r  - j * g\\n        if 0 <= tmp and tmp % b == 0:\\n            cnt += 1\\nprint(cnt)", "target": "315", "substitutes": {"r": ["f", "rb", "rr", "m", "rg", "sr", "a", "ir", "R", "l", "t", "nr", "rc", "rl", "c", "h", "q", "re", "d", "p", "ro", "e", "ur", "rd", "o", "u", "w", "x", "ar", "rt"], "g": ["gam", "f", "gm", "m", "rg", "fg", "l", "y", "G", "t", "gs", "gp", "bg", "k", "v", "gi", "gu", "c", "h", "q", "gg", "gt", "ge", "gz", "tg", "d", "go", "p", "gd", "e", "ig", "gb", "u", "w", "reg", "pg"], "b": ["z", "f", "rb", "ba", "m", "a", "l", "y", "t", "bc", "bp", "bg", "fb", "v", "c", "nb", "d", "p", "bi", "e", "sb", "beta", "o", "bs", "u", "B", "x", "bb", "base"], "n": ["nn", "m", "l", "y", "nt", "t", "nr", "s", "N", "len", "ns", "nm", "mn", "v", "na", "c", "sn", "q", "cn", "nu", "nb", "num", "d", "p", "ne", "gn", "np", "nc", "o", "w", "no", "x"], "cnt": ["ccd", "cst", "cunt", "cuNT", "acnt", "crount", "cucd", "rnt", "acct", "rst", "acNT", " cpt", "cNT", "cuct", "crpt", " ccd", "crct", "npt", "crnt", " cst", " count", " cNT", "nct", "accd", "nnt", "rct", "cct", "nst", " cct", "rount", "nount", "count", "cpt"], "i": ["f", "ini", "zi", "m", "a", "ir", "l", "y", "ix", "ti", "ip", "ci", "v", "ij", "hi", "phi", "yi", "di", "ik", "bi", "pi", "ai", "int", "ii", "xi", "si", "ic", "u", "li", "I", "x", "iti", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "m", "ja", "l", "y", "t", "jp", "ji", "k", "v", "ij", "h", "q", "d", "p", "bi", "kj", "jj", "jump", "aj", "J", "o", "u", "dj", "uj", "bj", "js", "jc"], "tmp": ["img", "emp", "gm", "nom", "out", "obj", "m", "src", "xy", "elt", "this", "nt", "t", "tt", "old", "result", "etc", "attr", "jp", "timeout", "sp", "now", "perm", "tar", "mk", "mut", "gt", "term", "ot", "mp", "temp", "nb", "tn", "test", "ind", "orig", "cur", "p", "cp", "cmp", "tf", "np", "txt", "cache", "tc", "buff", "mm", "prime", "new", "st"]}}
{"code": "n = input()\\nprint \"\",\\nfor i in range(1,n+1):\\n\tif i % 3 ==0:\\n\t\tprint str(i),\\n\telse:\\n\t\tj = i\\n\t\twhile(j > 0):\\n\t\t\tif(j%10==3):\\n\t\t\t\tprint str(i),\\n\t\t\t\tbreak;\\n\t\t\tj = j/10", "target": "514", "substitutes": {"n": ["z", "nw", "nn", "m", "ni", "l", "nt", "t", "number", "nr", "N", "len", "ns", "mn", "k", "en", "v", "na", "c", "ln", "sn", "q", "b", "nu", "nb", "num", "d", "p", "network", "ne", "np", "nan", "nc", "o", " N", "w", "nl", "x"], "i": ["f", "z", "io", "ini", "zi", "\u00ed", "m", "a", "l", "y", "t", "ite", "ix", "ti", "s", "ip", "ci", "jp", "k", "r", "ji", "ati", "gi", "v", "ij", "c", "index", "ki", "q", "phi", "b", "ami", "yi", "id", "di", "ik", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "I", "li", "ia", "u", "x", "iu", "init"], "j": ["z", "f", "ort", "org", "obj", "jl", "ja", "other", "y", "t", "note", "fr", "jp", "k", "ji", "adj", "v", "json", "ij", "q", "ot", "b", "g", "je", "ind", "iat", "bi", "br", "oj", "kj", "jas", "ne", "it", "jj", "jump", "aj", "J", "art", "jam", "bs", "uj", "dj", "ju", "li", "o", "x", "ev", "im", "bj", "js", "jc"]}}
{"code": "#! /usr/local/bin/python3\\n# coding: utf-8\\n\\ndef insertion_sort(a):\\n    for i in range(1, len(a)):\\n        print(\" \".join(map(str, a)))\\n        w = a[i]\\n        j = i - 1\\n        while j >= 0 and w < a[j]:\\n            a[j + 1] = a[j]\\n            j -= 1\\n        a[j + 1] = w\\n\\nn = int(input())\\na = [int(i) for i in input().split()]\\ninsertion_sort(a)\\nprint(\" \".join(map(str, a)))\\n", "target": "217", "substitutes": {}}
{"code": "def resolve():\\n\ts = input()\\n\tprint('Yes' if s[0] == s[-1] else 'No')\\nresolve()", "target": "289", "substitutes": {"s": ["f", "ps", "sts", "str", "sv", "ls", "m", "a", "sis", "l", "rs", "t", "y", "gs", "su", "os", "ms", "i", "r", "v", "sp", "strings", "sl", "c", "es", "hs", "h", "q", "b", "g", "S", "d", "p", "ss", "ds", "sb", "n", "sq", "w", "tes", "ats", "x", "ts", "qs"]}}
{"code": "def main():\\n    n,k=map(int,input().split())\\n    x=k-1\\n    for i in range(1,n):\\n        k*=x\\n    print(k)\\n    \\nmain()\\n", "target": "582", "substitutes": {"n": ["nn", "m", "l", "y", "nt", "t", "N", "ns", "mn", "r", "v", "c", "ln", "sn", "q", "b", "g", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "net", "gn", "np", "nc", "o", "w", "no"], "k": ["dk", "z", "f", "K", "m", "kr", "kt", "kh", "uk", "ka", "l", "y", "t", "ck", "kl", "ikk", "s", "kick", "kk", "kan", "ke", "v", "c", "ket", "mk", "h", "q", "b", "ki", "kn", "ak", "ijk", "ik", "num", "kok", "p", "km", "j", "kb", "kj", "kw", "tk", "xi", "u", "sk", "ko", "ku", "ks", "ack", "yk"], "x": ["z", "f", "max", "xp", "m", "X", "xy", "l", "y", "t", "ix", "xs", "xa", "xx", "xb", "ax", "step", "r", "v", "xt", "dx", "wx", "mx", "ex", "fx", "rx", "j", "xc", "xe", "cox", "xi", "px", "xf", "xd", "tx"], "i": ["f", "iq", "y", "t", "ix", "r", " j", "ij", "index", "q", "ind", "id", " ii", "p", "j", "e", "it", "ii", "I", "iter", "im"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nMOD = 10 ** 9 + 7\\nINF = float('INF')\\nsys.setrecursionlimit(10 ** 5)\\n\\n\\ndef main():\\n    a, b = map(int, readline().split())\\n\\n    print(str(min(a, b)) * max(a, b))\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "69", "substitutes": {"readline": ["inlines", "readlock", "readablelimit", "inlin", "findlin", " readlock", "loadline", " readlin", " readlines", "Readline", "Readlin", "readLine", "findLine", "readsLine", "readslin", "findlines", "readlin", "ReadLine", "readableLine", "inline", "loadlines", "readableline", "Readlock", "loadlimit", "findline", "inLine", "Readlimit", "readsline", " readLine", "readlines", "readslock", "loadLine", "readlimit", "readablelines", "Readlines"], "MOD": ["MIN", "Bytes", " LONG", "ALL", " base", " LIM", " const", " mod", " WARNING", "EXP", "N", "MAX", "SIZE", "Len", "Length", "Max", "Exp", "bytes", "Range", "mod", " EXP", " BASE", " LOG", "Mod", " ALL", " num", "LINE"], "INF": ["PINFF", "PINF", "INN", " INN", " INFF", " INV", "PINN", "INFF", "InV", "InFF", "INV", "InN", "InF", "PINV"], "a": ["f", "ba", "el", "m", "ae", "l", "t", "sta", "ga", "au", "xa", "i", "r", "A", "ca", "la", "at", "v", "na", "c", "ea", "era", "g", "aux", "d", "va", "da", "alpha", "act", "oa", "aka", "e", "sa", "aa", "aj", "ac", "ma", "w", "ia", "ab", "aaa", "x", "an", "lower"], "b": ["z", "rb", "ib", "mb", "blue", "be", "l", "y", "bc", "by", "i", "bg", "cb", "fb", "db", "v", "c", "g", "wb", "nb", "d", "bi", "br", "j", "e", "sb", "bo", "beta", "bis", "batch", "abs", "ob", "bs", "B", "ab", "bb", "base", "eb"]}}
{"code": "N,M = map(int,input().split())\\n\\nglaf = [[] for i in range(N)]\\n\\nfor i in range(M):\\n    a,b = map(int,input().split())\\n    a=a-1\\n    b=b-1\\n    glaf[a].append(b)\\n    glaf[b].append(a)\\n    \\nfor i in glaf:\\n    cnt =0\\n    for j in i:\\n        cnt+=1\\n    \\n    print(cnt)", "target": "180", "substitutes": {"N": ["Num", "NE", "H", "C", "F", "R", "Ni", "CNN", "NB", "NI", "NR", "A", "MN", "Na", "NP", "NA", "S", "ND", "NT", "D", "NS", "NM", "L", "GN", "J", "n", "I", "B", "NUM", "NC", "Ns", "NO", "NN", "NH"], "M": ["K", "H", "C", "MP", "m", "F", "MX", "R", "Memory", "PM", "Multi", "MT", "MR", "LM", "CM", "A", "MN", "MI", "MC", "MM", "S", "MH", "D", "NM", "JM", "P", "MA", "IM", "MS", "MAN", "DM", "T", "J", "V", "I", "B", "Multiple", "MU"], "glaf": [" glAF", "glap", " glac", "Gluf", "gluf", "gallaf", "glac", "gallaft", "glAF", "iglaf", "Glaf", "Glaw", "gla", "Glac", "GLaf", " glaft", "Gla", "greuf", "greaf", " gluf", "Glaff", "gallaff", "Glaft", "Glaux", " glaw", "GLaff", "glaft", " glaux", "iglaft", "glaw", "GLAF", "glaux", "iglac", " gla", "greaft", "iglaw", "grea", "GLap", " glaff", "gallaux", "Glap", " glap", "GlAF", "glaff"], "i": ["ini", "ei", "zi", "m", "ir", "y", "ti", "ip", "ci", "k", "ji", "il", "gi", "ij", "c", "oi", "ki", "ie", "ind", "id", "di", "ik", "p", "bi", "pi", "fi", "ai", "it", "ii", "xi", "n", "si", "ic", "o", "I", "u", "li", "ia", "x", "iti", "mi", "iu", "im"], "a": ["f", "ba", "obj", "apa", "el", "m", "am", "ae", "ta", "l", "t", "sta", "ga", "af", "au", "A", "ca", "r", "la", "at", "pa", "c", "ea", "era", "ak", "ami", "eu", "aux", "area", "va", "p", "da", "alpha", "app", "act", "e", "av", "ai", "sa", "aq", "aa", "aj", "al", "art", "ac", "n", "ma", "u", "ab", "aaa", "ar", "an", "aff"], "b": ["z", "f", "rb", "ba", "ib", "m", "another", "be", "l", "y", "t", "bc", "bp", "by", "bg", "cb", "fb", "r", "v", "db", "c", "g", "wb", "nb", "d", "bi", "br", "e", "bin", "sb", "beta", "bis", "n", "ob", "bs", "B", "ab", "bb", "bar", "base", "eb"], "cnt": [" ctr", "acnt", "dcount", "lcct", "acpt", "cnc", "Cpt", "Ccount", "dnc", "rcct", "acct", "Cnc", " cpt", "dnt", "dpt", "Cct", "ccount", "Cnt", "rcnc", "rcnt", "ctr", "lcnt", "lctr", "rccount", "lcpt", " cnc", "cct", " cct", "actr", " ccount", "cpt"], "j": ["ib", "ei", "iq", "ja", "ix", "k", "ji", "gi", "gu", "ij", "ket", "h", "q", "ian", "je", "jac", " ii", "di", "ik", "bi", "jo", "oj", " ja", "aj", "J", "uj", " inj"]}}
{"code": "marks='SHCD'\\nn=input()\\ncard=[raw_input().split() for _ in range(n)]\\nm={}\\nfor mk,rk in card:\\n    m.setdefault(mk,[0]*14)\\n    m[mk][int(rk)]=1\\nfor i in range(len(m)):\\n    k=marks[i]\\n    v=m[k]\\n    for j in range(1,14):\\n        if not v[j]: print k,j", "target": "628", "substitutes": {"marks": ["values", "groups", "marked", "weights", "lines", "roots", "names", "flags", "mas", "params", "rs", "ms", "photos", "ns", "mn", "fields", "points", "arks", "breaks", "words", "mask", "images", "boxes", "tracks", "types", "ARK", "makes", "cards", "vs", "km", "ds", "links", "Mark", "notes", "dates", "mark", "keys", "lights", "orders", "tags", "vals", "ks"], "n": ["z", "nw", "nn", "names", "ni", "l", "y", "nt", "number", "nr", "s", "N", "ns", "nm", "r", "na", "c", "ln", "sn", "b", "cn", "nu", "nb", "rn", "num", "d", "p", "dn", "ne", "gn", "np", "nc", "nl", "x"], "card": ["battle", "guard", "member", "Card", "line", "field", "pad", "ard", "order", "name", "board", "note", "cf", "shape", "raw", "ARD", "check", "c", "arc", "g", "gc", "custom", "cc", "cards", "num", "cont", "crit", "char", " cards", "deck", "wild", "event", "cell", "sequence", "list", "dr", "vector", "car"], "_": ["line", "all", "name", "ix", " len", "un", "place", "val", "ml", " l", " x", "x"], "m": ["f", "gm", "wm", "mc", "tm", "am", "mb", "hm", "l", "sm", "t", "s", "ms", "M", "mn", "r", "perm", "em", "c", "bm", "pm", "h", "mask", "b", "g", "mp", "ml", "dm", "mem", "d", "rm", "p", "mint", "man", "vm", "mt", "mo", "mat", "mos", "mr", "ma", "o", "mm", "me", "mi", "fm", "cm", "md"], "mk": ["mc", "kr", "kt", "ck", "mand", "make", "ok", "kk", "mn", "ke", "kid", "miss", "mut", "ki", "mot", "ak", "wk", "ik", "hd", "iat", "p", "km", "cp", "ek", "mt", "trak", "ky", "mg", "tk", "art", "mr", "ma", "sk", "mm", "mid", "ark", "MK", "ku", "md", "init"], "rk": ["rokr", "Rkw", "rku", "roijk", "arK", "rkw", "Rk", "rok", " rkid", "rokid", "Rijk", "rijk", "roku", "arku", "roK", "rokw", " rK", "rkr", "Rkr", "rK", "rkid", " rkr", "arkid", "ark", " rkw", " rku", " rijk"], "int": ["type", "str", "min", "add", "oct", "len", "point", "uint", "long", "Int", "double", "bit", "ref", "id", "inter", "num", "char", "bool", "INT", "integer", "ints", "short", "float", "dec", "set", "print", "digit"], "i": ["z", "ei", "ini", "zi", "a", "l", "y", "t", "ti", "ip", "ci", "ji", "gi", "ij", "ori", "ki", "b", "ami", "di", "ik", "p", "bi", "pi", "qi", "ai", "ii", "xi", "si", "o", "ic", "li", "I", "u", "x", "mi", "iu"], "k": ["K", "kr", "kt", "kh", "ka", "ck", "kl", "ikk", "key", "kk", "kan", "ke", "kid", "kar", "ki", "q", "kn", "ak", "ijk", "ik", "p", "kok", "km", "kj", "ek", "kw", "tk", "u", "sk", "ko", "kit", "x", "ku", "ks", "rek"], "v": ["z", "f", "ve", "values", "vo", "sv", "vv", "qv", "l", "lv", "r", "value", "vp", "c", "h", "b", "tv", "nv", "vs", "d", "va", "p", "vm", "vi", "ov", "vt", "vr", "uv", "V", "w", "u", "ev", "cv"], "j": ["z", "f", "ion", "jl", "ja", "l", "y", "t", "name", " dj", "s", "jp", "ji", "r", "ij", "index", "h", "q", "b", "g", "je", "ind", "d", "p", "bi", "br", "oj", "axis", "kj", "ne", "it", "jj", "jump", "aj", "J", "ju", "o", "uj", "dj", "u", "x", "bj", "js", "jc"]}}
{"code": "a,b=input().split()\\na=int(a)\\nb=int(b)\\nprint(int(a+b/2))", "target": "668", "substitutes": {"a": ["ba", "obj", "apa", "am", "ae", "ta", "\u00e1", "l", "all", "af", "au", "ga", "ed", "i", "A", "ca", "input", "at", "la", "now", "na", "c", "ea", "area", "da", "alpha", "ao", "act", "oa", "aka", "anta", "sa", "ai", "ata", "aa", "aj", "al", "ac", "abs", "ma", "ia", "ab", "eas", "aaa", "an", "aff"], "b": ["z", "f", "sub", "rb", "ba", "ib", "m", "mb", "be", "l", "big", "two", "bc", "by", "i", "bh", "fb", "cb", "db", "v", "c", "bound", "g", "nb", "d", "bi", "br", "j", "bin", "sb", "it", "gb", "beta", "bis", "n", "ob", "abs", "bs", "B", "ab", "bb", "body", "bar", "base", "eb"]}}
{"code": "N = int(input())\\nseat = ['?' for _ in range(N+1)]\\nleft = 0\\nright = N\\nfor i in range(20):\\n  if i == 0:\\n    output = 0\\n  elif i == 1:\\n    output = (N-1)//2\\n  else:\\n    output = (right + left)//2\\n  print(output)\\n    \\n  s = input()\\n  if s == 'Vacant':\\n    exit()\\n  seat[output] = s\\n  if i == 0:\\n    seat[N] = s\\n  #print(seat)\\n  if ((right + output) % 2 == 0 and seat[right] != seat[output]) or ((right + output) % 2 == 1 and seat[right] == seat[output]):\\n    left = output\\n  else:\\n    right = output\\n", "target": "344", "substitutes": {"N": ["Y", "Number", "Num", "K", "NE", "H", "C", "X", "F", "R", "Ni", "CNN", "G", "NB", "NI", "number", "M", "NR", "CN", "A", "Left", "NP", "NA", "S", "E", "O", "NT", "D", "SN", "NS", "FN", "Output", "NM", "L", "TN", "Right", "P", "Q", "T", "GN", "J", "n", "V", "I", "B", "OUT", "Ns", "NC", "NO", "NN", "Network", "NH"], "seat": ["ve", "role", "town", "pack", "ice", "be", "cel", "se", "hold", "section", "nation", "su", "hall", "box", "result", "mail", "office", "broad", "public", "sea", "face", "ape", "sl", "journal", "co", "index", "slave", "route", "rue", "use", "position", "sen", "test", "character", "there", "te", "race", "nat", "port", "eat", "flight", "soc", "nel", "cell", "ace", "ray", "set", "cast", "car"], "_": ["line", "l", "ix", "ip", "un", "ct", "val", "ml", "j", "int", "n", "I", "x"], "left": ["offset", "out", "top", "le", "m", "wrong", "l", "old", "second", "control", "Left", "input", "length", "lt", "long", "start", "lo", "position", "exit", "L", "j", "low", "bottom", "last", "half", "n", "first", "w", "nl", "list", "x", "lower", "width", "st"], "right": ["rest", "max", "out", "top", "wrong", "range", "third", "R", "cut", "l", "rh", "close", "row", "back", "middle", "r", "Left", "upper", "root", "length", "start", "rights", "th", "well", "next", "p", "Right", "end", "ro", "outer", "last", "inner", "n", "w", "reverse", "stop", "rel", "mid", "x"], "i": ["ine", "io", "ini", "ri", "zi", "a", "ni", "l", "t", "ti", "\u0438", "ci", "ji", "gi", " j", "ati", "hi", "oi", "ori", " ii", "di", "bi", "j", "pi", "e", " I", "ai", "it", " x", "ii", "xi", "si", "n", "ic", "I", "li", "ia", "o", "x", " n", " it"], "output": ["target", "secondary", "out", "connect", "ion", "line", "field", "label", "node", "cut", "number", "control", "result", "format", "point", "input", "value", "write", "production", "long", "NA", "console", "position", "O", "string", "margin", "Input", "Output", "hidden", "next", "exit", "tail", "L", "network", "TN", "port", "outer", "column", "current", "n", "four", "o", "OUT", "print", "response", "II", "success", "put", "data", "PUT", "display", "text"], "s": ["f", "ps", "sts", "sing", "z", "sv", "out", "ls", "str", "ares", "a", "l", "y", "t", "se", "gs", "rs", "su", "ns", "r", "single", "sw", "v", "sp", "sd", "es", "c", "ys", "h", "b", "g", "S", "string", "p", "ains", "ss", "self", "e", "sa", "sb", "short", "si", "n", "abs", "o", "sq", "w", "u", "set", "ats", "south", "st", "sat", "x", "ts", "sol"]}}
{"code": "S=input()\\na=int(S[:2])\\nb=int(S[2:])\\nif 0<a<=12 and b==0 or 0<a<=12 and b>12:\\n  print(\"MMYY\")\\nelif 0<a<=12 and 0<b<=12:\\n  print(\"AMBIGUOUS\")\\nelif 0<b<=12 and a==0 or 0<b<=12 and a>12:\\n  print(\"YYMM\")\\nelse:\\n  print(\"NA\")", "target": "17", "substitutes": {"S": ["Y", "SER", "BS", "SI", "H", "C", "X", "SS", "F", "R", "SL", "SAN", "G", "W", "SB", "SM", "s", "N", "M", "SOURCE", "A", "RS", "U", "E", "SR", "Input", "DS", "D", "NS", "SU", "L", "P", "TS", "Q", "T", "SA", "SE", "Z", "V", "I", "B", "CS"], "a": ["f", "ba", "m", "ae", "att", "ta", "l", "y", "t", "this", "acc", "af", "s", "au", "ga", "i", "A", "ca", "r", "at", "la", "pa", "c", "ea", "an", "h", "g", "ak", "d", "p", "alpha", "ao", "j", "app", "oa", "e", "sa", "ata", "aa", "aj", "al", "n", "ac", "o", "ma", "u", "w", "ia", "ah", "ab", "eas", "aaa", "ar", "am"], "b": ["z", "f", "rb", "ba", "m", "be", "l", "y", "t", "bc", "bd", "s", "by", "i", "cb", "r", "fb", "v", "db", "c", "g", "nb", "d", "p", "bt", "bi", "j", "bf", "e", "sb", "beta", "aa", "n", "ob", "o", "bs", "u", "B", "ab", "x", "bb", "eb"]}}
{"code": "from collections import defaultdict\\nimport itertools \\n\\nn = int(input())\\n\\nd = defaultdict(int)\\n\\nfor i in range(n):\\n    s = input()\\n    d[s[0]] += 1\\n\\nl = [\"M\", \"A\", \"R\", \"C\", \"H\"]\\n\\nc = itertools.combinations(l, 3)\\n\\ns = 0\\n\\nfor x in c:\\n    s += d[x[0]] * d[x[1]] * d[x[2]]\\n\\nprint(s)\\n", "target": "760", "substitutes": {"n": ["z", "nn", "nia", "m", "a", "ni", "nt", "number", "nr", "N", "ns", "nm", "r", "k", "mn", "na", "sn", "nd", "cn", "ct", "nu", "nb", "num", "p", "j", "network", "ne", "np", "nan", "nc", "no", "nl", "count"], "d": ["f", "done", "ld", "des", "m", "df", "t", "debug", "dos", "dict", "did", "ed", "dd", "r", "dt", "db", "v", "sd", "dx", "h", "q", "b", "nd", "g", "mod", "D", "di", "pd", "de", "p", "dl", "da", "do", "du", "j", "ds", "cd", "dc", "dh", "ad", "o", "dot", "data", "md", "fd"], "i": ["f", "z", "io", "ini", "zi", "y", "ix", "ti", "ip", "r", "k", " j", "index", "ind", "id", " ii", "p", "j", "pi", "e", "it", "ii", "ic", "I", "iter", "im"], "s": ["ps", "sys", "sts", "stats", "ws", "sv", "ls", "m", "fs", "a", "sis", "spec", "sql", "cs", "se", "rs", "simple", "gs", "xs", "os", "ins", "ms", "ns", "r", "v", "sp", "ys", "b", "eds", "g", "ies", "S", "grades", "changes", "ans", "eps", "p", "ss", "less", "ds", "j", "sb", "sa", "its", "ses", "o", "bs", "sq", "set", "ats", "als", "st", "tes", "ts", "qs", "an", "js"], "l": ["f", "fl", "ol", "ls", "el", "m", "a", "t", "kl", "len", "r", "lb", "v", "sl", "ln", "h", "b", "lc", "g", "tl", "cl", "ml", "dl", "p", "L", "lp", "pl", "hl", "li", "ql", "nl", "list", "rl", "lists", "ll"], "c": ["f", "sc", "mc", "m", "C", "cr", "cs", "t", "bc", "cf", "con", "ci", "ca", "cin", "r", "ch", "cb", "v", "co", "h", "b", "g", "cc", "ct", "unc", "ce", "p", "cp", "com", "xc", "cd", "dc", "fc", "ac", "tc", "ic", "cu", "w", "nc"], "x": [" dx", "z", "ey", "xes", "yx", "xp", "X", "hex", "ux", "xy", "eeee", "ix", "xs", "xa", "ax", "xx", "xb", "sw", "k", "key", "at", " ax", "check", "nex", "xt", "dx", "wx", "index", "mx", "ex", "fx", "ross", "ctx", "\u00e7", "p", "exp", "rx", "xxx", " xx", "xc", "ox", "xe", "xxxx", "xi", "lex", "px", "xf", " cx", "zx", "tx", "inx"]}}
{"code": "N = int(input())\\nflag = 0\\nfor i in range(1,10):\\n    if N%i == 0:\\n        if N/i <= 9:\\n            flag = 1\\n            print(\"Yes\")\\n            break\\nif flag == 0:\\n    print(\"No\")", "target": "654", "substitutes": {"N": ["K", "NE", "C", "NF", "X", "AN", "F", "R", "G", "W", "NB", "M", "NV", "NR", "CN", "A", "NA", "Size", "S", "ND", "O", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "T", "GN", "J", "n", "Z", "V", "I", "B", "NUM", "NC", "NN", "NH"], "flag": ["bug", "f", "z", "ld", "member", "ground", "line", "flags", "field", "endif", "cond", "l", "all", "hold", "ret", "online", "debug", "af", "switch", "status", "lock", "tag", "true", "state", "mask", "lag", "store", "condition", "start", "g", "ln", "group", "bit", "id", "force", "leaf", "cloud", "nil", "alt", "FLAG", "bool", "const", "int", "event", "n", "fire", "no", "set", "print", "Flag", "nl", "list", "agged", "count", "st", "fd"], "i": ["f", "ini", "zi", "m", "l", "y", "t", "ite", "ix", "ti", "\u0438", "ci", "k", "gi", "v", "c", "oi", "q", "b", "ind", "id", "di", "ik", "d", "p", "bi", "j", "pi", "qi", "ai", "it", "int", "ii", "batch", "si", "n", "ic", "xi", "I", "li", "iter", "o", "x", "ui", "mi", "iu", "im"]}}
{"code": "n,x=map(int,input().split())\\nl=list(map(int,input().split()))\\n\\nd=0\\ncnt=1\\n\\nfor i in range(1,n+1):\\n    d=d+l[i-1]\\n    if d<=x:\\n        cnt+=1\\n\\nprint(cnt)\\n", "target": "444", "substitutes": {"n": ["nn", "m", "y", "nt", "t", "name", "N", "ns", "mn", "k", "en", "v", "na", "c", "sn", "q", "b", "h", "nd", "an", "cn", "nu", "nb", "num", "p", "j", "ne", "net", "np", "nc", "o", "no"], "x": ["z", "m", "X", "xy", "y", "ix", "xs", "xa", "ax", "xx", "v", "xt", "dx", "wx", "h", "mx", "ex", "p", "rx", "xc", "e", "ox", "xe", "xi", "w", "px", "xf", "tx", "inx"], "l": ["fl", "lines", "ld", "ls", "el", "le", "m", "lv", "t", "lis", "kl", "len", "r", "lb", "sl", "lt", "ln", "b", "lc", "wl", "lo", "ml", "dl", "L", "lp", "pl", "lr", "li", "nl", "list", "rl", "lists", "ll"], "d": ["f", "done", "diff", "ld", "m", "df", "red", "dev", "t", "debug", "to", "did", "dd", "r", "dt", "div", "db", "sd", "dx", "c", "h", "b", "g", "mod", "D", "di", "du", "pd", "p", "do", "da", "de", "dl", "ds", "gd", "td", "e", "cd", "dh", "dp", "dec", "dr", "dot", "data", "dat", "fd"], "cnt": ["acnc", "acount", "acnt", "Cpt", "cnc", "Ccount", "rcpt", "CNT", "rcct", "acct", " cpt", "cNT", "ucct", "ccount", " ccount", "Cnt", "rcnt", "npt", "ucount", "rcNT", " count", " cNT", "nct", "nnt", "rccount", "ucnc", "ucnt", " cnc", "cct", " cct", "rcount", "nount", "count", "cpt"], "i": ["f", "ini", "zi", "uri", "ogi", "y", "ti", "info", "s", "ip", "\u0438", "k", "ji", "gi", "v", "c", "hi", "ori", "oi", "b", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ai", "ii", "xi", "si", "li", "I", "ui", "mi", "im"]}}
{"code": "N = int(input())\\nA = list(map(int,input().split()))\\nM = 1000\\nS = 0\\n\\nfor i in range(0, N):\\n  if i != N-1 and A[i] < A[i+1]:\\n    if S == 0:\\n      S = M // A[i]\\n      M = M % A[i]\\n  elif i == N-1 or A[i] > A[i+1]:\\n    if S > 0:\\n      M += S * A[i]\\n      S = 0  \\nprint(M)", "target": "67", "substitutes": {"N": ["Number", "Num", "K", "H", "C", "F", "R", "G", "CNN", "Ni", "NB", "NI", "NR", "CN", "NA", "E", "NT", "D", "SN", "NS", "FN", "Node", "NM", "L", "TN", "NOTE", "P", "No", "Q", "T", "GN", "J", "Z", "n", "V", "I", "B", "Ns", "NUM", "NO", "NN"], "A": ["ETA", "App", "AA", "Ar", "H", "C", "API", "AC", "AN", "a", "F", "Al", "R", "IA", "Alice", "G", "AV", "Abs", "Args", "CA", "LA", "AL", "TA", "What", "EA", "JA", "DA", "As", "D", "HA", "AT", "Array", "All", "Ag", "AF", "WA", "To", "GA", "If", "An", "At", "mA", "P", "MA", "AM", "This", "AH", "You", "And", "AS", "AE", "The", "AP", "AB", "I", "B", "Alpha", "ACT", "PUT", "SA", "OA"], "M": ["Y", "K", "m", "C", "MP", "X", "FM", "H", "F", "R", "PM", "G", "W", "MT", "SM", "MR", "LM", "CM", "MI", "MC", "U", "REM", "MM", "Ms", "E", "D", "L", "NM", "TM", "P", "MA", "AM", "IM", "MS", "T", "MAN", "DM", "J", "Z", "V", "RM", "I", "B", "HM", "MD"], "S": ["Y", "Still", "Single", "K", "SI", "oS", "Si", "C", "H", "SS", "Ins", "F", "WS", "R", "SL", "SK", "G", "W", "JS", "SM", "Sum", "s", "Security", "Ds", "Sub", "RS", "CSS", "U", "Socket", "Size", "IS", "SHA", "Scale", "E", "SR", "DS", "D", "US", "NS", "SU", "L", "Math", "P", "TS", "Q", "State", "SH", "TPS", "MS", "T", "SF", "SA", "Session", "Z", "J", "V", "SE", "I", "B", "CS", "GS", "MIT", "Sign"], "i": ["ini", "ei", "ri", "name", "ci", "ji", "status", "v", "hi", "q", "sim", "di", "ai", "uli", "xi", "iri", "li", "set", "list", "x", "ui", "iu", "f", "io", "zi", "m", "cli", "ni", "this", "t", "aci", "ti", "info", "Ti", "index", "ki", "phi", "ind", "asi", " Xi", "bi", "qi", "n", "o", "me", "im", "uri", " bi", "ix", "\u0438", "ij", "oi", "j", "ii", "ic", " di", "multi", "ski", "chain", "ip", "key", "jp", "gi", "ori", "id", "pi", "it", "si", "I", "ici", "mi", "eri"]}}
{"code": "n = int(input())\\ncheck = 0\\nkeep = []\\n\\ndef q(n, check):\\n    if n in keep:\\n        return check\\n    else:\\n        keep.append(n)\\n    if n % 2 == 0:\\n        n = n // 2\\n    else:\\n        n = 3 * n + 1\\n    return q(n, check+1)\\nprint(q(n,check)+1)\\n", "target": "551", "substitutes": {"n": ["names", "name", "note", "v", "h", "q", "g", "num", "no", "non", "x", "norm", "count", "ll", "new", "z", "f", "nn", "m", "t", "number", "len", "nm", " fn", "na", "index", "long", "cn", "nu", "nb", "ind", "dn", "gn", "nan", "nc", "o", " ne", " nan", "l", "nt", "nr", "i", "k", "en", "c", "b", "rn", "size", "p", "nil", "j", "none", "nor", "w", "on", "nw", "out", "a", "y", "s", "N", "ns", "mn", "ng", "sn", "nd", "d", "ne", " ng", "int", "np"], "check": ["good", "add", "max", "checks", "out", "only", "score", "Check", "ck", "name", "close", "cf", "info", "ok", "cb", "k", "fail", "status", "co", "lock", "c", "start", "q", "scale", "double", "mod", "ct", "code", "test", "ind", "num", "cont", "call", "char", "p", "warn", "critical", "do", "crit", "j", "cp", "read", "com", "valid", "it", "cmp", "int", "block", "conf", "CHECK", "star", "checked", "print", "set", "x", "update", "new", "init"], "keep": ["rest", "keeping", "skip", "clean", "collect", "stay", "hold", "ck", "have", "drop", "EEP", "close", "make", "ok", "mn", "k", "mk", "remember", "store", "kept", "use", "catch", "exist", "cont", "col", "keeper", "are", "allow", "cmp", "keepers", "warm", "mark", " kept", " Keep", "Keep", "care", "need", "rem", "coll", "stop", "save", "list", "left", "pres", "set", "cv", "take"]}}
{"code": "a,b,c,k = map(int,input().split())\\n \\nif k < a:\\n  print(str(k))\\nelif k < (a + b):\\n  print(str(a))\\nelse:\\n  print(str(2*a + b - k))", "target": "174", "substitutes": {"a": ["z", "f", "ba", "apa", "m", "am", "ta", "ae", "ka", "t", "sta", "ga", "au", "s", "i", "ax", "A", "r", "ca", "at", "la", "now", "index", "ea", "h", "start", "g", "admin", "num", "d", "area", "ce", "p", "alpha", "da", "j", "oa", "aka", "e", "sa", "integer", "int", "aq", "aa", "aj", "al", "ac", "n", "ma", "ia", "ab", "aaa", "x", "ar", "an"], "b": ["f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "t", "bc", "i", "bg", "cb", "fb", "r", "v", "db", "g", "nb", "d", "bi", "br", "j", "e", "sb", "bo", "n", "ub", "bs", "o", "B", "ab", "bb", "eb"], "c": ["z", "f", "m", "C", "l", "cs", "y", "t", "bc", "i", "cb", "ca", "r", "v", "h", "lc", "g", "cc", "d", "p", "col", "e", "ac", "n", "ic", "o", "x", "cm"], "k": ["z", "K", "mc", "m", "kr", "kind", "kh", "uk", "ka", "l", "cs", "t", "ck", "kl", "ikk", "ok", "key", "kk", "r", "ke", "ca", "i", "v", "kar", "mk", "cm", "q", "g", "ak", "kn", "ijk", "ik", "p", "alpha", "km", "j", "kb", "kj", "ek", "kw", "it", "tk", "conf", "n", "ac", "o", "tc", "sk", "ko", "ku", "ks"]}}
{"code": "n = int(input())\\n\\ng = [[] for _ in range(n)]\\n\\nfor i in range(n):\\n    a = int(input())\\n    for j in range(a):\\n        x, y = map(int, input().split())\\n        x -= 1\\n        g[i].append((x, y))\\n\\nans = 0\\nfor i in range(2**n):\\n    temp = [-1]*n\\n    for j in range(n):\\n        if (i >> j) & 1:\\n            temp[j] = 1\\n        else:\\n            temp[j] = 0\\n    flag = True\\n    for j in range(n):\\n        if temp[j] == 1:\\n            for x, y in g[j]:\\n                if temp[x] != y:\\n                    flag = False\\n    if flag:\\n        ans = max(ans, sum(temp))\\nprint(ans)\\n", "target": "52", "substitutes": {"n": ["z", "f", "nn", "nia", "m", "ni", "l", "t", "nt", "number", "s", "N", "len", "ns", "mn", "r", "v", "na", "c", "ng", "sn", "an", "q", "b", "nu", "nb", "ny", "num", "d", "p", "ne", "net", "int", "np", "nan", "nc", "o", "w", "no", "nl"], "g": ["gm", "out", "gate", "m", "parent", "G", "t", "gs", "ga", "gp", "ug", "s", "bg", "gr", "msg", "gi", "v", "gu", "c", "gt", "q", "group", "gg", "gc", "sg", "ge", "tg", "erg", "d", "p", "gd", "get", "ig", "mg", "gn", "gb", "eg", "vg", "reg", "gen", "og", "pg"], "_": ["f", "let", "pt", " int", "all", "ix", "__", "ct", "val", "ml", "ox", "ac", "I"], "i": ["f", "z", "io", "ini", "zi", "m", "l", "t", "ix", "ti", "ip", "ci", "ji", "v", "gi", "ij", "c", "ki", "b", "phi", "yi", "ie", "id", "di", "ik", "p", "bi", "pi", "e", "ai", "int", "ii", "xi", "si", "o", "ic", "li", "I", "ia", "mi", "iu", "im"], "a": ["f", "ap", "m", "l", "au", "A", "ca", "r", "at", "la", "v", "na", "c", "an", "b", "area", "iat", "p", "pi", "sa", "ai", "aa", "aj", "al", "art", "ac", "o", "ma", "w", "ia", "ab", "aaa", "am"], "j": ["z", "f", "ion", "jl", "m", "ja", "l", "t", "s", "jp", "k", "ji", "v", "json", "ij", "job", "q", "b", "h", "je", "ie", "ind", "di", "d", "p", "bi", "oj", "kj", "e", "it", "jj", "jump", "aj", "J", "ii", "o", "ju", "uj", "dj", "li", "u", "bj", "js", "jc"], "x": ["z", "f", "el", "xes", "xp", "X", "hex", "ux", "xy", "l", "t", "ix", "xs", "xa", "ax", "xx", "ci", "xxxxxxxx", "at", "v", "xt", "dx", "wx", "c", "zx", "ex", "fx", "p", "rx", "com", "xc", "ox", "xe", "xxxx", "int", "xi", "lex", "w", "px", "u", "lat", "xf", "xd", "tx"], "y": ["z", "Y", "yz", "ym", "ey", "yl", "yo", "yn", "ay", "m", "xy", "py", "t", "yer", "iy", "sy", "oy", "yy", "key", "ery", "ty", "yt", "v", "gy", "ys", "b", "ies", "ory", "yi", "wy", "ny", "fy", "ry", "ya", "uy", "ye", "axy", "yr", "cy", "vy", "o", "ic", "ia", "yd", "sky", "ly"], "ans": ["ens", "ps", "stats", "sv", "anon", "ls", "flags", "aned", "vers", "AN", "oss", "ran", "cs", "rs", "pan", "gs", "xs", "amps", "iann", "s", "ms", "anas", "ins", "aus", "ns", "ons", "outs", "ann", "os", " Ans", "aps", "arts", "es", "ents", "angs", "ums", "rans", "ands", "eds", "posts", "ations", "vs", "ANS", "uns", "offs", "gn", "anes", "nan", "ates", "ats", "nl", "aints", "ions", "an", "ks", "ants"], "temp": ["thread", "ps", "emp", "fake", "max", "level", "tmp", "pt", "sum", "tim", "t", "dict", "result", "ptr", "buffer", "res", "v", "em", "tar", "length", "c", "condition", "tem", "mod", "Temperature", "mp", "test", "pre", "mem", "cap", "there", "p", "dep", "pretty", "stem", "total", "deg", "Temp", "valid", "fac", "current", "tr", "txt", "template", "cache", "tc", "cum", "met", "cu", "unt", "ts", "prime", "mint", "sol", "new", "dat", "perature"], "flag": ["type", "f", "wait", "bug", "style", "ld", "level", "member", "sync", "flags", "field", "cond", "lv", "debug", "close", "len", "status", "xml", "open", "lock", "tag", "match", "state", "mask", "condition", "lag", "start", "store", "long", "gc", "used", " Flag", "cmd", "id", "stage", "char", "cloud", "dep", "agg", "bool", "weight", "ctl", "fire", "set", "save", "Flag", "agged", "list", "nl", "link", "st", "fd"]}}
{"code": "n=int(input())\\nans=0\\nif n%2==0:\\n    for i in range(1,26):\\n        ans+=(n//(2*5**i))\\nprint(ans)", "target": "211", "substitutes": {"n": ["f", "nn", "nia", "m", "a", "ni", "l", "nt", "t", "s", "N", "len", "ns", "mn", "en", "v", "na", "c", "ln", "sn", "an", "b", "h", "cn", "nu", "nb", "num", "d", "p", "ne", "gn", "np", "nan", "nc", "o", "nl", "x"], "ans": ["ens", "wan", "cas", "sv", "mas", "aned", "vers", "AN", "oss", "ran", "ean", "pan", "rs", "amps", "iann", "s", "ins", "anas", "ms", "aus", "ns", "ons", "ars", "ann", " Ans", "acs", "aos", "arts", "ents", "rans", " means", "ANS", "can", "\u00e1n", "anes", "nan", "ams", "ras", "ats", "us", "ros", "anks", "an", "ants", "lan"], "i": ["ini", "zi", "m", "my", "ni", "l", "ix", "ti", "ip", "ci", "\u0438", "k", "gi", "v", "hi", "oi", "ki", "q", "b", "yi", "ind", "di", "p", "bi", "j", "pi", "ai", "int", "ii", "si", "ic", "I", "li", "x", "ui", "mi", "im"]}}
{"code": "import fractions\\n\\nN=int(input())\\nS=[]\\nfor i in range(N):\\n    S.append(int(input()))\\n\\n\\ndef koubaisu(a,b):\\n    return a*b//fractions.gcd(a,b)\\n\\nans=1\\n\\nif N==1:\\n    print(S[0])\\n    exit()\\nelif N==2:\\n    ans=koubaisu(S[0],S[1])\\n    print(ans)\\n    exit()\\nelif N>2:\\n    ans=koubaisu(S[0],S[1])\\n    for i in range(N-2):\\n        ans=koubaisu(ans,S[i+2])\\n\\nprint(ans)", "target": "186", "substitutes": {"N": ["NH", "Num", "K", "NE", "H", "GEN", "C", "NOR", "AN", "F", "R", "Ni", "CNN", "G", "NB", "NG", "EN", "NI", "M", "NR", "CN", "MN", "A", "Len", "NL", "NP", "NA", "NRS", "ANY", "Ne", "NT", "D", "SN", "NS", "NM", "L", "TW", "TN", "NOTE", "P", "UN", "UNE", "T", "MAN", "GN", "n", "V", "I", "PN", "B", "Ns", "NC", "ON", "NUM", "NO", "NN", "Network", "NPR"], "S": ["BS", "Bytes", "SI", "Si", "H", "SS", "WS", "GES", "R", "SL", "G", "JS", "LS", "SB", "PS", "s", "ASC", "M", "OS", "A", "Ds", "RS", "INS", "CSS", "ST", "Save", "NRS", "Windows", "SR", "DS", "Series", "D", "NS", "SU", "SO", "L", "FS", "SP", "TS", "P", "ES", "ITS", "IES", "SH", "MS", "T", "AS", "SF", "VS", "Z", "V", "I", "B", "CS", "GS", "Results", "BY", "HS", "SA", "Set"], "i": ["f", "ini", "ei", "zi", "cli", "m", "y", "iy", "ti", "ip", "ci", "k", "ji", "im", "gi", "v", "ij", "c", "hi", "q", "phi", "yi", "ind", "di", "ik", "p", "bi", "j", "pi", "qi", "ai", "it", "ii", "xi", "n", "si", "ic", "I", "li", "u", "iter", "x", "on", "mi", "iu", "multi"], "a": ["f", "ba", "ae", "l", "sta", "au", "ed", "s", " sa", "A", "r", "ca", "at", " ax", "c", "ea", "an", " ba", "ak", " e", "d", " ca", "aka", "sa", "aq", "aa", "aj", "al", "ac", "ma", "u", " A", "ia", "ab", "aaa", "eas", "x", " au", "ar", "am", "aff", " an"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "ed", "s", "bg", "cb", "fb", "db", "v", "c", "g", "d", "bi", "bf", "e", "bu", "sb", "it", "n", "bs", "u", "B", "ab", "bb", "bar", "eb"], "ans": ["ens", "cas", "roots", "ls", "vers", "AN", "rates", "oss", "cus", "anc", "pan", "rs", "cons", "amps", "xs", "s", "ms", "anas", "os", "aus", "ns", "ons", "ins", "ann", "ars", " Ans", "acs", "aos", "arts", "na", "ents", "angs", "rans", "eds", "posts", "eps", "ANS", "cos", "can", "man", "alias", "nas", "ai", "uns", "offs", "int", "nan", "ams", "n", "ads", "pres", "ras", "ats", "us", "ros", "vals", "ana", "an", "ks", "ants", "olds", "uploads", "jas", "lan", "irms"]}}
{"code": "def main():\\n    s = input()\\n\\n    print(s[:3])\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "775", "substitutes": {"s": ["ps", "f", "sts", "str", "sv", "ls", "m", "a", "sis", "l", "rs", "t", "y", "gs", "i", "r", "input", "v", "strings", "sl", "c", "h", "q", "b", "S", "string", "d", "p", "ss", "e", "sb", "n", "sq", "print", "ts", "qs"]}}
{"code": "import math\\nimport statistics\\na=int(input())\\n#b=int(input())\\n# c=[]\\n# for i in b:\\n#     c.append(i)\\n# e1,e2 = map(int,input().split())\\nf = list(map(int,input().split()))\\n#j = [input() for _ in range(3)]\\n# h = []\\n# for i in range(e1):\\n#     h.append(list(map(int,input().split())))\\nf.sort()\\ntyu = statistics.median(f)\\nif f[len(f)//2]==f[len(f)//2-1]:\\n    print(0)\\nelse:\\n    print(f[len(f)//2]-f[len(f)//2-1])", "target": "415", "substitutes": {"a": ["z", "m", "ae", "ka", "l", "y", "t", "ga", "A", "ca", "at", "na", "c", "h", "b", "area", "p", "sa", "aa", "n", "ma", " A", "ia", " b", "x", "an"]}}
{"code": "#!/usr/bin/env python\\n\\nimport sys\\n#from sympy import isprime\\n\\nclass bigint:\\n    primeset = set()\\n    def __init__(self,n,mod):\\n        if not mod in bigint.primeset:\\n            assert mod**2 < sys.maxsize, \"modulo is too large\"\\n            #assert isprime(mod), \"modulo should be a prime number\"\\n            bigint.primeset.add(mod)\\n        #\\n        self.n = n % mod\\n        self.mod = mod\\n        return\\n    #\\n    def __str__(self):\\n        return str(self.n)\\n    #\\n    def __add__(self,other):\\n        assert self.mod==other.mod, \"modulos of the two not match\"\\n        return bigint(self.n+other.n,self.mod)\\n    #\\n    def __sub__(self,other):\\n        assert self.mod==other.mod, \"modulos of the two not match\"\\n        return bigint(self.n-other.n,self.mod)\\n    #\\n    def __mul__(self,other):\\n        assert self.mod==other.mod, \"modulos of the two not match\"\\n        return bigint(self.n*other.n,self.mod)\\n    #\\n    def __pow__(self,other):\\n        assert type(other)==int, \"power should be integer\"\\n        #\\n        if other<0: return self ** ( other % ( self.mod-1 ) )\\n        elif other==0: return 1\\n        elif other==1: return self\\n        elif other%2==0:\\n            tmp= self ** (other//2)\\n            return bigint( ( tmp.n**2 ) % self.mod,self.mod )\\n        else:\\n            tmp= self ** (other//2)\\n            return bigint( ( tmp.n**2 * self.n ) % self.mod,self.mod )\\n    #\\n    def __truediv__(self,other):\\n        assert self.mod==other.mod, \"modulos of the two not match\"\\n        return self * ( other ** (other.mod-2) )\\n#\\n#::::::::::::::::::::::::::::::::::::::::::::::::::\\nmod= 10**9 + 7\\n\\ndef combination(n,m):\\n    global mod\\n    assert type(n)==type(m)==int, \"type error\"\\n    #\\n    mm= min(m,n-m)\\n    if mm==0: return bigint(1,mod)\\n    elif mm>0:\\n        a = bigint(n,mod)\\n        b = bigint(1,mod)\\n        for i in range(1,mm):\\n            a = a * bigint(n-i,mod)\\n            b = b * bigint(i+1,mod)\\n        return a / b\\n    #\\n    raise ValueError\\n#\\nn,m,k = [ int(x) for x in sys.stdin.readline().split() ]\\n#\\n# const.\\nnn= n * n\\nmm= m * m\\ncc= combination(n*m-2,k-2)\\n\\n# initialize\\nscore=bigint(0,mod)\\n\\n# scan over horizontal direction\\nfor i in range(1,n):\\n    score= score + bigint(i * mm * (n-i),mod) * cc\\n\\n# scan over vertical direction\\nfor i in range(1,m):\\n    score= score + bigint(i * nn * (m-i),mod) * cc\\n#\\nprint( score )\\n", "target": "341", "substitutes": {}}
{"code": "#!/usr/bin/env python3\\n# Generated by https://github.com/kyuridenamida/atcoder-tools\\nfrom typing import *\\nimport collections\\nimport functools as fts\\nimport itertools as its\\nimport math\\nimport sys\\n\\nINF = float('inf')\\n\\n\\ndef solve(N: int, d: \"List[int]\"):\\n    return sum(x * y for x, y in its.combinations(d, 2))\\n\\n\\ndef main():\\n\\n    sys.setrecursionlimit(10 ** 6)\\n\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    d = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\\n    print(f'{solve(N, d)}')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "434", "substitutes": {}}
{"code": "n=int(input())\\ns=input()\\ncnt=0\\ndef judge(n):\\n    pos=0\\n    pos=s.find(n[0],pos)\\n    if pos==-1:\\n        return 0\\n    pos=s.find(n[1],pos+1)\\n    if pos==-1:\\n        return 0\\n    pos=s.find(n[2],pos+1)\\n    if pos==-1:\\n        return 0\\n    return 1\\nfor i in range(1000):\\n    p=str(i).rjust(3,'0')\\n    if judge(p):\\n        cnt+=1\\nprint(cnt)", "target": "756", "substitutes": {"n": ["z", "f", "nn", "out", "names", "m", "l", "y", "nt", "t", "conn", "name", "note", "N", "fn", "ns", "r", "k", "en", "v", "na", "c", "ln", "sn", "h", "b", "q", "g", "an", "nd", "cn", "nu", "ct", "tn", "rn", "num", "d", "go", "dn", "j", "ne", "net", "it", "gn", "nor", "np", "nan", "nc", "o", "x", "on", "ll", "new"], "s": ["ps", "f", "sts", "ws", "sv", "ls", "conv", "m", "fs", "a", "cs", "rs", "t", "gs", "os", "ins", "ms", "ns", "ends", "input", "v", "sp", "strings", "hs", "c", "ys", "h", "b", "ools", "g", "S", "csv", "ss", "less", "ds", "e", "sb", "sa", "ashes", "its", "ims", "abs", "bs", "sq", "w", "ats", "als", "space", "ts", "qs", "js"], "cnt": ["cst", "acount", "curount", " cnd", "Cnd", "acnt", "CNT", "acct", "curNT", "cNT", "Cct", "nNT", "Count", "Cnt", "acst", "nnd", " cst", " count", " cNT", "nct", "curnt", "nnt", "Cst", "cnd", "cct", " cct", "curct", "nount", "count"], "pos": ["pt", "pr", "Pos", "spec", "v", "co", "tag", "start", "post", "position", "val", "ref", "trans", "plot", "neg", "no", "x", "POS", "z", "op", "offset", "obj", "mon", "to", "os", "len", "index", "cos", "comp", "doc", "pid", "proc", "pro", "l", "nt", "rot", "con", "at", "sp", "snap", "size", "pl", "none", "conf", "loc", "pres", "body", "ps", "diff", "off", "cond", "point", "key", "err", "res", "pose", "path", "pat", "col", "pi", "port", "int", "po", "pc", "lat", "init"], "i": ["f", "m", "y", "t", "ti", "info", "ip", "r", "k", "v", "gi", "c", "index", "q", "b", "ind", "id", "di", "bi", "j", "pi", "qi", "int", "ii", "xi", "si", "o", "ic", "u", "I", "li", "x", "mi", "iu"], "p": ["ps", "f", "pai", "pard", "conv", "pr", "m", "ap", "rep", "pkg", "t", "pp", "point", "jp", "r", "v", "sp", "pa", "vp", "c", "q", "b", "fp", "g", "pair", "d", "lp", "cp", "ping", "pl", "P", "np", "pc", "o", "u", "pid", "pn"]}}
{"code": "S = list(input().split())\\nprint(S[0][0].upper() + S[1][0].upper() + S[2][0].upper())", "target": "222", "substitutes": {"S": ["GRE", "SER", "Sample", "BS", "SI", "ALL", "C", "SS", "X", "R", "SL", "G", "PS", "JS", "SM", "LS", "SB", "s", "OS", "N", "M", "SOURCE", "A", "RS", "INS", "U", "ST", "IS", "SR", "DS", "D", "US", "SAM", "NS", "SU", "SO", "L", "SP", "FS", "P", "TS", "SH", "T", "SF", "SE", "VS", "STATE", "V", "I", "B", "CS", "GS", "BY", "HS", "SQL"]}}
{"code": "n = int(input())\\nhs = list(map(int,input().split()))\\nans = 0\\nm = 0\\nfor h in hs:\\n  if m <= h:\\n    ans += 1\\n  m = max(m, h)\\n \\nprint(ans)\\n", "target": "26", "substitutes": {"n": ["nn", "l", "nt", "t", "N", "ns", "nm", "k", "mn", "en", "v", "na", "c", "sn", "q", "b", "cn", "nb", "num", "d", "p", "j", "ne", "nc", "w", "nl", "x"], "hs": ["ths", "hers", "checks", "ws", "he", "views", "has", "heads", "tops", "rh", "hm", "rs", "gs", "xs", "hours", "s", "hz", "cks", "bh", "ns", "hes", "aches", "angs", "gins", "hops", "hou", "hd", "his", "vs", "hess", "sels", "hw", "bs", "hh", "sh", "ts", "HS", "hp"], "ans": ["ens", "asm", "sum", "aned", "AN", "ones", "oss", "ran", "rs", "cons", "amps", "xs", "s", "ins", "ms", "os", "aus", "ns", "ons", "outs", "ann", "acs", "aps", "aos", "arts", "beans", "ents", "ians", "angs", "ums", "rans", "eds", "yes", " means", "vs", "ANS", "ai", "oms", "offs", "anes", "ams", "ads", "ates", "ats", "ros", "x", "ts", "anks", "an", "ks", "ants"], "m": ["mu", "f", "z", "gm", "max", "min", "mc", "tm", "am", "a", "hm", "l", "y", "t", "sm", "ms", "M", "i", "mn", "r", "nm", "v", "c", "bm", "mut", "q", "b", "cm", "mx", "g", "mp", "dm", "rm", "d", "mem", "p", "mun", "mt", "mo", "mean", "mos", "o", "mr", "mm", "mi", "an", "md"], "h": ["f", "him", "he", "H", "hn", "kh", "a", "rh", "hm", "l", "ha", "t", "y", "s", "ms", "i", "bh", "mn", "k", "r", "ach", "ho", "v", "hin", "hi", "bm", "c", "q", "b", "hal", "hd", "d", "ih", "p", "j", "oh", "hap", "e", "hl", "hr", "o", "hh", "ah", "w", "x", "mi", "hash", "his", "hp"]}}
{"code": "N, K = map(int, input().split())\\nR, S, P = map(int, input().split())\\nT = input()\\n\\ndp = [[0]*3 for _ in range(N+1)]\\nfor i in range(1, N+1):\\n    if i <= K:\\n        dp[i][0] = int(T[i-1]=='s') * R\\n        dp[i][1] = int(T[i-1]=='p') * S\\n        dp[i][2] = int(T[i-1]=='r') * P\\n    else:\\n        dp[i][0] = max(dp[i-K][1], dp[i-K][2]) + int(T[i-1]=='s') * R\\n        dp[i][1] = max(dp[i-K][0], dp[i-K][2]) + int(T[i-1]=='p') * S\\n        dp[i][2] = max(dp[i-K][0], dp[i-K][1]) + int(T[i-1]=='r') * P\\n\\nans = 0\\nfor d in dp[-K:]:\\n    ans += max(d)\\nprint(ans)", "target": "383", "substitutes": {"N": ["Y", "NE", "H", "C", "X", "F", "Ni", "W", "G", "NB", "NI", "M", "NR", "MN", "NP", "NA", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "GN", "J", "n", "V", "I", "Ns", "NC", "NN"], "K": ["Y", "HK", "KA", "KN", "FK", "CH", "PK", "Works", "H", "C", "X", "Ch", "AC", "IC", "F", "KK", "SK", "G", "W", "Han", "M", "A", "k", "KR", "IK", "Kent", "KI", "KS", "ID", "TH", "OK", "E", "O", "VK", "NK", "D", "KING", "NS", "UK", "Key", "L", "IT", "Q", "KE", "J", "Z", "V", "One", "I", "B", "KC", "MK", "CP"], "R": ["RR", "Y", "AR", "RG", "H", "C", "RA", "X", "F", "Rs", "G", "W", "M", "NR", "r", "RS", "GR", "RO", "Range", "RE", "SR", "E", "D", "L", "Right", "RT", "DR", "Q", "RP", "J", "V", "RM", "I", "JR", "B", "Res", "Render", "BR"], "S": ["Y", "St", "SI", "Sl", "Si", "C", "H", "SS", "F", "Rs", "Sp", "SL", "SK", "G", "PS", "s", "M", "Ser", "A", "RS", "SR", "E", "D", "SN", "NS", "SU", "Is", "L", "ss", "SP", "Su", "Q", "SH", "SA", "V", "I", "B", "Set", "Sign"], "P": ["Y", "PK", "PD", "H", "C", "X", "F", "G", "W", "PS", "M", "PA", "A", "U", "E", "PR", "O", "D", "p", "L", "TP", "SP", "PP", "Q", "DP", "J", "V", "I", "B", "Ps", "PT"], "T": ["TR", "C", "Target", "F", "Th", "HT", "Format", "Tab", "t", "WT", "G", "Trans", "Table", "Text", "M", "LT", "TA", "Type", "OT", "U", "E", "NT", "D", "TG", "AT", "CT", "L", "Template", "TP", "TN", "TM", "IT", "TW", "If", "TB", "NOTE", "TS", "RT", "Q", "TC", "J", "V", "Transform", "I", "BT", "B", "Note", "VT", "JSON", "Test", "TF", "TT", "GT", "It", "XT", "PT", "TL"], "dp": ["dk", "ps", "ld", "sync", "deb", "adr", "desc", "decl", "bsp", "df", "pkg", "bp", "wd", "dos", "drop", "ga", "pb", "gp", "dd", "dro", "ip", "pp", "jp", "dt", "tp", "dim", "attr", "lip", "db", "pipe", "pa", "vp", "dq", "fp", "csv", "imp", "mp", "deep", "isp", "iper", "di", "dm", "pd", "du", "dl", "p", "dep", "pat", "ds", "lp", "cp", "td", "tap", "dial", "ump", "cd", "dc", "np", "DP", "var", "rank", "delay", "grad", "bps", "dj", "lat", "dr", "wp", "DC", "dat", "pg"], "_": [" un", "ix", "key", " __", " p", "val", " X", " I", " x", " k", "I", "x", " num"], "i": ["f", "io", "ini", "ei", "ri", "zi", "m", "cli", "iii", "chain", "this", "t", "name", "ix", "to", "ti", "info", "s", "ip", "ci", "\u0438", "k", "key", "ji", "at", "series", "gi", "status", "ij", "hi", "index", "ori", "ki", "oi", "phi", "ami", "lo", "ind", "id", "asi", "di", "ik", "p", "bi", "multi", "j", "pi", "fi", "isi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "iri", "I", "li", "batch", "iter", "set", "list", "x", "ui", "mi", "iu", "im", "me", "init"], "ans": ["ps", "ens", "wan", "cas", "ls", "des", "aned", " pars", "amps", "gs", " fans", "s", "ms", "os", "ars", "aus", "ns", "anas", "ann", " Ans", "aps", "Ds", "arts", "sd", "es", "ents", "angs", "rans", "ys", "eds", "posts", " pan", " means", "ANS", "ds", "nas", "anes", " spans", "ads", "ats", "us", "ros", "an", "ks", "ants", "lan"], "d": ["z", "f", "pard", "m", "ud", "df", "name", "did", "ed", "s", "dd", "pp", "k", " D", "dx", "sd", "g", "ind", "D", "di", "dm", "de", "p", "do", "da", "j", "ds", "gd", "td", "e", "dc", "dh", "ad", "n", "dra", "dr", "x", "data", "dat", "fd"]}}
{"code": "N = int(input())\\nA = [0]+list(map(int,input().split()))+[0]\\nB = [abs(a-b) for a,b in zip(A,A[1:])]\\nC = sum(B)\\n\\nfor n in range(N):\\n  print(C+abs(A[n]-A[n+2])-(B[n]+B[n+1]))", "target": "527", "substitutes": {"N": ["Num", "K", "H", "X", "F", "G", "CNN", "NB", "NI", "M", "NR", "NP", "NA", "S", "E", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "Z", "V", "I", "Ns", "NC", "NUM", "NN"], "A": ["AR", "AA", "H", "RA", "X", "AC", "API", "Al", "R", "IA", "G", "AV", "ACC", "AUD", "M", "CA", "AL", "LA", "TA", " LA", "EA", " AA", "U", "JA", "S", "E", "Input", "As", "D", "AU", "AT", "Array", "HA", "AF", "WA", "L", "GA", "An", "At", "ATA", "P", "Q", "MA", "AM", "AH", "This", "AS", "SA", "T", "AB", "AP", "V", "I", "Alpha", "ACT", "IE", "AST", "PUT", "AE"], "B": ["BE", "BB", "BS", "Bytes", "VB", "DB", "EB", "Two", "RB", "G", "SB", "NB", "Other", "WB", "BA", "IB", "BC", "BI", "Bar", "GB", "S", "D", "MB", "L", "TB", "LB", "BG", "FB", "T", "PB", "J", "AB", "V", "BT", "BL", "CB", "Bern", "Reb", "BY", "BF", "BN", "BR", "Bs"], "a": ["f", "ba", "am", "ae", "t", "sta", "au", "af", "i", "ca", "la", "at", "v", "pa", "c", "ea", "val", "area", "va", "p", "alpha", "j", "aka", "sa", "aa", "ac", "ma", "u", "ia", "ab", "x", "ach", "an"], "b": ["z", "sub", "rb", "ib", "be", "l", "y", "t", "bc", "i", "cb", "fb", "v", "db", "c", "g", "nb", "bi", "br", "j", "bf", "sb", "bis", "ob", "ub", "bs", "u", "ab", "bb", "bar", "base", "eb"], "C": ["Y", "K", "H", "CO", "F", "R", "G", "CR", "Cs", "CM", "M", "BC", "CA", "c", "CV", "U", "GC", "S", "E", "D", "L", "CC", "P", "Cr", "Q", "T", "J", "V", "I", "CS", "CB", "JC", "CP"], "n": ["f", "nn", "yn", "el", "names", "m", "l", "all", "nt", "name", "number", "note", "i", "fn", "ns", "nm", "mn", "r", "un", "opt", "v", "na", "c", "ren", "index", "ng", "sn", "ln", "nd", "g", "wn", "cn", "nu", "nb", "tn", "ind", "num", "d", "dn", "exp", "ne", "np", "batch", "nc", "nl", "x", "ll", "new"]}}
{"code": "n,c=map(int,input().split())\\nxy=[list(map(int,input().split())) for i in range(n)]\\ndata=[0]*(n+1)\\nfor i in range(n):\\n    x,y=xy[i]\\n    data[i+1]=data[i]+y\\ndata1=[0]*(n+1)\\ndata2=[0]*(n+1)\\nfor i in range(n):\\n    x,y=xy[i]\\n    data1[i+1]=data[i+1]-x\\n    data2[i+1]=data[i+1]-2*x\\ndata=[0]*(n+1)\\nfor i in range(n):\\n    x,y=xy[n-1-i]\\n    data[i+1]=data[i]+y\\ndata3=[0]*(n+1)\\ndata4=[0]*(n+1)\\nfor i in range(n):\\n    x,y=xy[n-1-i]\\n    data3[i+1]=data[i+1]-(c-x)\\n    data4[i+1]=data[i+1]-2*(c-x)\\nfor i in range(1,n+1):\\n    data1[i]=max(data1[i],data1[i-1])\\n    data2[i]=max(data2[i],data2[i-1])\\n    data3[i]=max(data3[i],data3[i-1])\\n    data4[i]=max(data4[i],data4[i-1])\\nans=-float(\"inf\")\\nfor i in range(0,n+1):\\n    a=data2[i]+data3[n-i]\\n    b=data4[i]+data1[n-i]\\n    ans=max(ans,a,b)\\nprint(ans)", "target": "127", "substitutes": {"n": ["z", "nn", "normal", "nia", "names", "m", "l", "t", "nt", "number", "name", "all", "note", "s", "N", "fn", "ns", "mn", "r", "en", "un", "v", "na", "ren", "ln", "sn", "an", "ng", "g", "cn", "nu", "yes", "nb", "remote", "rn", "num", "d", "size", "p", "dn", "j", "network", "pi", "ne", "inn", "none", "net", "it", "gn", "current", "np", "nan", "nc", "o", "ic", "no", "on", "norm", "ll", "new"], "c": ["z", "f", "sc", "mc", "m", "C", "cr", "cs", "t", "l", "chain", "etc", "ci", "r", "k", "cin", "rc", "ca", "lc", "gc", "g", "toc", "ct", "cc", "unc", "cl", "d", "cos", "p", "alpha", "ec", "xc", "e", "dc", "uc", "fc", "cache", "nc", "o", "tc", "u", "w", "ac", "ic", "cm", "count", "jc"], "xy": ["sys", "io", "yx", "sync", "windows", "zip", "my", "nt", "py", "ios", "xs", "google", "XY", "rot", "info", "ip", "xx", "ns", "yy", "ji", "yt", "co", "json", "wx", "vp", "phy", "fo", "mx", "ex", "wy", "ie", "roxy", "fy", "xxx", "ne", "xc", "oxy", "nuts", "xe", "psy", "np", "gb", "xi", "mop", "px", "mac", "multi", "linux"], "i": ["ini", "ei", "ri", "name", "ci", "ji", "status", "v", "adi", "hi", "like", "q", "g", "di", "ih", "ai", "xi", "iri", "li", "ia", "iti", "ui", "iu", "f", "io", "zi", "iq", "cli", "m", "one", "ir", "this", "ti", "info", "ati", "gu", "index", "ki", "phi", "ind", "asi", "er", "bi", "exp", "qi", "isi", "batch", "o", "me", "ali", "im", "item", "ico", "uri", "iii", "l", "ios", "ix", "ed", "\u0438", "il", "eric", "ij", "oi", "ie", "ik", "p", "j", "fi", "e", "ii", "ic", "multi", "ip", "key", "gi", "ami", "yi", "id", "pi", "it", "int", "si", "I", "u", "um", "mi", "init"], "data": ["rate", "times", "names", "windows", "dev", "name", "div", "value", "missing", "query", "bytes", "store", "bits", "share", "val", "tree", "di", "num", "read", "power", "image", "da", "parts", "dates", "no", "set", "list", "content", "values", "date", "params", "draw", "info", "result", "final", "index", "test", "exp", "last", "table", "keys", "map", "done", "Data", "bus", "nt", "debug", "raw", "byte", "sd", "snap", "mem", "size", "next", "p", "zero", "total", "valid", "ee", "results", "ata", "time", "cache", "al", "items", "ma", "where", "sky", "type", "details", "users", "chain", "device", "step", "days", "ns", "DATA", "db", "images", "code", "id", "config", "pi", "window", "np", "search", "block", "error", "base", "dat"], "x": ["z", "f", "yl", "yx", "el", "xes", "xp", "m", "X", "hex", "ux", "l", "t", "ix", "xs", "s", "xa", "xx", "ip", "www", "sw", "r", "ch", "v", "xml", "hello", "xt", "dx", "wx", "h", "g", "ex", "ct", "width", "fx", "wy", "ml", "d", "exp", "rx", "com", "xc", "e", "ox", "xe", "time", "xi", "lex", "ic", "o", "px", "w", "mac", "lat", "xf", "ll", "tx"], "y": ["Y", "z", "sys", "ym", "ey", "yl", "yn", "ay", "html", "my", "l", "py", "t", "iy", "s", "sy", "yy", "r", "ty", "yt", "ch", "v", "gy", "ys", "h", "ies", "yi", "wy", "ny", "yd", "fy", "p", "height", "j", "et", "hot", "ry", "dy", "uy", "ye", "axy", "o", "vy", "cy", "hy", "sky", "ly"], "data1": ["def4", "table3", "ata2", "dat21", "data21", "dateup", "table2", "Data2", "ata0", "Data4", " dataup", "table4", "Data0", " data8", "client2", " data01", "DATA01", "def1", "def0", "Data01", "client21", "dataFirst", "DATA1", "ata3", "def2", "client1", "content8", "ata1", "dat1", "content2", "Data3", "Data1", "dat2", "DATA2", "date8", "datFirst", "date1", " data21", "data0", " data0", "clientFirst", "contentup", "data01", "date2", "data8", "content1", "table1", "dataup", "DATA0", " dataFirst", "ata01"], "data2": ["DATA6", "date4", "entry2", "date7", "data02", "entry02", "def15", "dataSecond", " data02", "dat256", "entry4", "ata6", "Data2", "dat4", "date02", "dat3", "result7", "data7", "DATA3", " data8", "result1", " dataSecond", "ata4", " data15", "data6", "result2", "def1", " data7", "ata3", "def2", "DataSecond", "content8", "content15", "ata1", "def8", "dat2", "content2", "Data1", "Data3", "result8", "DATA2", "DATA256", "date8", "data256", "date1", " data256", " data6", "entry1", "date2", "data8", "DATA4", "content1", "ataSecond", "data15", "ata2"], "data3": ["data31", "ata31", "date4", "cache31", "cache33", "ata03", "version4", "date3", "result03", "Data2", "ata12", "ata6", "Data4", "dat4", "result31", "data03", " data03", "dat3", "result3", "cache6", "ata4", "data6", "ata3", "data12", "ata1", "dat1", "dat12", "Data3", "Data1", "data33", "result33", "version3", "date12", "version03", "cache3", "version2", "ata33", " data6", "cache03", "ata2"], "data4": ["def4", "data14", "def464", "def41", " data04", "data24", "data464", "done41", "ata42", "dat04", "datFour", " data44", "cache4", "Data2", "Data4", "dat4", "dat8", "ata84", "ata8", "Data42", " data8", "ata4", "ataFour", "cache24", " dataFour", " data24", "ata3", "done4", "result464", "ata14", "data44", "dat14", "dat2", "def8", "Data1", "ata1", "result8", "dat84", "data42", "dat24", "dataFour", "result41", "done464", "cache3", "ata04", "data84", "done8", " data84", "data8", "data04", "data41", "ata44", "result4", "cache44", " data42", " data14", "ata24", "ata2"], "ans": ["ens", "rors", "stats", "cas", "ls", "mas", "aned", "rates", "cs", "amps", "xs", "iann", "s", "ins", "ms", "os", "aus", "ns", "anas", "ars", "ann", "outs", "aps", "aos", "arts", "es", "ents", "angs", "ums", "ands", "posts", "yes", " means", "ids", "vs", "ANS", "uns", "offs", "actions", "nan", "ads", "asms", "ats", "ates", "us", "ros", "anks", "ions", "an", "ants", "olds", "ows", "irms"], "a": ["z", "f", "ba", "l", "t", "ga", "s", "au", "xa", "r", "A", "at", "v", "pa", "ea", "an", "g", "d", "p", "oa", "e", "sa", "aq", "aa", "aj", "ac", "o", "u", "ia", "ab", "ar", "am"], "b": ["f", "rb", "ba", "ib", "bl", "mb", "be", "l", "bp", "by", "cb", "fb", "r", "db", "v", "h", "g", "wb", "bi", "br", "j", "sb", "bis", "ob", "o", "bs", "w", "B", "ab", "bb", "bar", "base", "eb"]}}
{"code": "import itertools\\nimport sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\n\\ndef score(A):\\n    res = 0\\n    for a, b, c, d in abcd:\\n        if A[b - 1] - A[a - 1] == c:\\n            res += d\\n    return res\\n\\n  \\ndef main(n, m, abcd):\\n    p = itertools.combinations_with_replacement(range(1, m+1), n)\\n    L = list(p)\\n    ans = 0\\n    for A in L:\\n        ans = max(ans, score(list(A)))\\n    return ans\\n\\n\\nn, m, q = map(int, readline().split())\\nabcd = [list(map(int, readline().split())) for _ in range(q)]\\n\\nprint(main(n, m, abcd))", "target": "0", "substitutes": {"read": ["f", "READ", " READ", "stream", "reader", "load", "find", "hold", "give", "readable", "reads", "r", "en", "rax", "input", "open", "write", "start", "reading", " write", "select", "Read", " reader", "send", "ead", "get", "parse", "run", "then", "rid", "ad", " reads", "feed", "rd", "first", "iter", "print", "reverse", " Read", "ast", "text"], "readline": ["readerline", " readfile", "writelines", "Readfile", "Readl", "readerpoint", "readlist", "getrange", "loadline", "getspace", "getpoint", "readpoint", "writel", " readread", "Readline", "getread", "writeline", "getline", "readread", " readspace", "printread", "loadlist", "printlines", "loadlines", "getl", "readspace", "readrange", " readrange", "writefile", "printrange", "printline", " readlist", " readpoint", "readerlines", "loadfile", "getfile", "getlines", "readl", "Readlist", "readfile", "Readlines", "readerspace"], "readlines": ["Readlists", "readerline", "readeroffs", "readoffs", "Readline", "getline", " readlists", "Readelines", "getlists", "readlists", " readelines", "readelines", "readerelines", " readoffs", "readerlines", "getoffs", "getlines", "readerlists", "Readlines"], "A": ["Y", "Name", "App", "AA", "Ar", "H", "C", "X", "AC", "Al", "R", "Am", "G", "AV", "N", "M", "CA", "LA", "TA", "JA", "S", "E", "O", "As", "AU", "All", "Array", "D", "HA", "AT", "Ag", "AF", "GA", "An", "At", "Ca", "P", "Q", "AD", "AM", "You", "AE", "T", "The", "AP", "AB", "V", "I", "B", "Alpha", "Ax", "SA", "ARC"], "res": ["rand", "ps", "ress", "rest", "out", "sum", "des", "reset", "rates", "rez", "red", "ret", "rs", "cons", "cs", "result", "ms", "ins", "os", "ns", "r", "rc", "ons", "resp", "gr", "resh", "val", "re", "mem", "ro", "results", "RES", "right", "rem", "pres", "reg", "Res", "resolution", "respons", "vals", "req", "us", "x", "urs", "sol"], "a": ["f", "ba", "am", "ta", "l", "y", "t", "af", "s", "i", "r", "ca", "v", "pa", "ea", "ak", "va", "da", "ao", "j", "e", "ai", "sa", "aq", "aa", "aj", "al", "ac", "o", "ma", "w", "ab", "ach", "an"], "b": ["z", "f", "rb", "ba", "l", "y", "t", "bc", "back", "i", "cb", "r", "k", "v", "db", "h", "g", "nb", "bi", "j", "e", "sb", "o", "u", "B", "ab", "bb", "an", "eb"], "c": ["z", "f", "C", "l", "y", "t", "bc", "cf", "s", "cb", "r", "ca", "k", "v", "h", "g", "cc", "ct", "ce", "cp", "e", "cd", "dc", "ac", "u", "w", "x", "cm"], "d": ["z", "f", "done", "df", "bd", "l", "t", "dev", "did", "ed", "s", "dd", "i", "r", "dt", "k", "v", "sd", "g", "id", "D", "di", "de", "do", "da", "j", "ds", "e", "cd", "dc", "ad", "rd", "o", "w", "xd", "dat"], "n": ["nn", "out", "yn", "l", "y", "nt", "t", "conn", "nr", "N", "i", "fn", "ns", "nm", "mn", "r", "adj", "un", "v", "na", "long", "ln", "sn", "ng", "g", "cn", "nu", "nb", "rn", "tn", "num", "dn", "j", "ne", "gn", "np", "nan", "nc", "o", " N", "nl", "x", "on", "an", "ll", "new"], "m": ["gm", "min", "mc", "tm", "am", "l", "y", "t", "ms", "M", "i", "mn", "r", "k", "nm", "v", "em", "bm", "h", "g", "mod", "dm", "mun", "man", "km", "j", "mt", "om", "mo", "e", "mos", "o", "ma", "mr", "mm", "mi", "im", "cm", "md"], "abcd": ["labdd", "labcd", " abpd", " abd", "abod", "abdc", "acCD", "absCD", " abod", "abCD", "accr", "agcd", "agpd", "acdd", "abccloud", " abdd", "abcr", "labcr", "abd", "Abcloud", "agod", "abcloud", " abcloud", "Abdid", "absdd", "Abd", "abscd", "agdc", "abccd", "abdd", " abcr", "abpd", " abdc", " abCD", "abscmd", "Abcd", "accd", "abcmd", "acod", "accmd", "acpd", "abcdid", "acdc", "labCD", " abcmd", "abdid", " abdid"], "p": ["ps", "pe", "per", "ap", "pins", "par", "l", "t", " P", "s", "pp", "i", "ip", "PA", "r", "jp", "sp", "pa", "vp", "pers", "pair", "mp", "pre", "pd", "j", "lp", "pl", "cp", "P", "pc", "part", "list", "pron", "pn"], "L": ["DL", "H", "C", "X", "LR", "LE", "l", "SL", "G", "W", "LS", "LM", "N", "M", "LT", "LU", "LA", "NL", "PL", "S", "O", "D", "CL", "P", "Q", "LC", "List", "T", "LI", "Z", "V", "I", "Li", "B", "LP", "dL", "LIST", "LD", "LL", "Lu", "TL"], "ans": ["ens", "ps", "lines", "cases", "ls", "mas", "vers", "ones", "AN", "oss", "rates", "anc", "rs", "cons", "amps", "xs", "s", "ins", "ms", "os", "aus", "ns", "ons", "outs", "ann", "acts", "aps", "aos", "ents", "rans", "eds", "yes", " means", "vs", "ANS", "ups", "eps", "lets", "ox", "uns", "offs", "powers", "mean", "ras", "ats", "ros", "an", "ks", "ants", "lan"], "q": ["z", "qt", "f", "ve", "qa", "iq", "qv", "y", "t", "ms", "i", "r", "k", "v", "query", "dq", "h", "g", "j", "qi", "e", "Q", "it", "sq", "u", "ql", "w", "qq", "qs", "qu"], "_": ["name", "ix", "ip", " j", "place", "val", " e", "j", " z", " the", " k", "ac"]}}
{"code": "while(1):\\n H,W=map(int,input().split());\\n if H==0 and W==0 :\\n   break\\n else: \\n    print(('#'*W+'\\n')*H)", "target": "296", "substitutes": {"H": ["HO", "He", "CH", "HF", "HT", "AV", "HI", "M", "N", "HB", "A", "HQ", "HL", "HD", "HH", "h", "TH", "MH", "His", "HC", "HA", "HE", "DH", "Height", "HR", "P", "IL", "Eh", "SH", "HTML", "J", "V", "I", "B", "OH", "RH", "HS", "AH", "NH"], "W": ["Y", "C", "X", "F", "R", "HT", "WW", "G", "WT", "N", "M", "OW", "WR", "Wil", "WAR", "U", "NW", "S", "Widget", "Week", "SW", "D", "Watch", "Word", "WP", "WI", "L", "DW", "Win", "VW", "P", "ESS", "Q", "OR", "HTML", "MS", "CW", "T", "Wh", "V", "Writer", "BW", "B", "EW", "WH", "WC"]}}
{"code": "def Find(x, par, diff_weight):\\n    if par[x] < 0:\\n        return x\\n    else:\\n        px = Find(par[x], par, diff_weight)\\n        diff_weight[x] += diff_weight[par[x]]\\n        par[x] = px\\n        return px\\n\\ndef Unite(x, y, par, rank, diff_weight, w):\\n    w += diff_weight[x] - diff_weight[y]\\n    x = Find(x, par, diff_weight)\\n    y = Find(y, par, diff_weight)\\n\\n    if x != y:\\n        if rank[x] < rank[y]:\\n            x, y =  y, x\\n            w = -w\\n        if rank[x] == rank[y]:\\n            rank[x] += 1\\n        par[x] += par[y]\\n        par[y] = x\\n        diff_weight[y] = w\\n\\ndef Same(x, y, par, diff_weight):\\n    return Find(x, par,diff_weight) == Find(y, par, diff_weight)\\n\\ndef Size(x, par, diff_weight):\\n    return -par[Find(x, par, diff_weight)]\\n\\ndef Weight(x, par, diff_weight):\\n    Find(x, par, diff_weight)\\n    return diff_weight[x]\\n\\ndef Diff(x, y, par, diff_weight):\\n    return Weight(y, par, diff_weight)  - Weight(x, par, diff_weight)\\n\\nimport sys\\ninput = sys.stdin.buffer.readline\\nn, m = map(int, input().split())\\n\\npar = [-1]*n\\nrank = [0]*n\\ndiff_weight = [0]*n\\n\\nfor i in range(m):\\n    l, r, d = map(int, input().split())\\n    l, r = l-1, r-1\\n    if not Same(l, r, par, diff_weight):\\n        Unite(l, r, par, rank, diff_weight, d)\\n    else:\\n        if Diff(l, r, par, diff_weight) != d:\\n            print('No')\\n            exit()\\nelse:\\n    print('Yes')\\n", "target": "672", "substitutes": {"x": ["xp", "X", "xa", "ax", "xx", "sw", "v", "wx", "h", "mx", "g", "ct", "ctx", "xi", "z", "f", "el", "xy", "ext", "t", "xs", "xt", "ex", "exp", "xc", "batch", "xd", "inx", "yx", "l", "ix", "r", "at", "c", "fx", "p", "j", "pl", "e", "xe", "xxxx", "time", "xf", "on", "xes", "php", "a", "hex", "ux", "s", "point", "ip", "key", "xml", "nex", "dx", "es", "any", "d", "rx", "xxx", "act", "ox", "int", "lex", "u", "ar", "tx"], "par": ["good", "pr", "report", "cat", "percent", "dev", "parent", "name", "Par", "ars", "ax", "tp", "like", "post", "dis", "prep", "deep", "pre", "num", "cp", "cmp", "rem", "iter", "rec", "mm", "patch", "car", "param", "op", "sys", "el", "deb", "params", "prop", "pkg", "info", "pp", "scale", "er", "comp", "vol", "watch", "star", "part", "arg", "dr", "req", "bar", "proc", "pro", "str", "nt", "pos", "dist", "r", "sp", "tar", "inter", "p", "plan", "br", "pl", "pri", "arp", "ma", "war", "pol", "ps", "target", "min", "arr", "per", "rep", "dim", "pas", "jp", "err", "gr", "mp", "char", "pat", "col", "pi", "pub", "parse", "int", "var", "pc", "rel", "ar", "ser"], "diff_weight": ["dlmmtag", "diffmmwidth", "diff_Weight", " diff2weight", "diff_count", "diff_force", "iff_weight", "diff_package", "diff2count", "grad_scale", "difftmethod", "difflycondition", "iff_mask", "difflybase", "show_weight", "dist_wd", "diff_scale", " diff_w", "difflytype", "diffingmean", "diffmmtag", " Diff_time", "diffLtime", "dist_weight", "dlmmwidth", "old_weight", "diffmmweights", "diff___mean", "diffingmask", "diff_depth", "old_mean", "diffTheweight", "diff_speed", "diff_mem", "difflywd", "rel_method", "diffThedepth", "diff___wd", " diff_match", "diff_link", "iff_type", "dist_speed", "diff_wd", "diff_time", "iffingweight", "dist_count", " diff_value", "fixed_weight", "diff_method", "diff_base", "diff_check", "difflymethod", "diff67weight", " diff_base", " diff2sum", "differoption", "diff_mask", "iffingmask", "dist_term", "showlypackage", "old_target", " diff_speed", "dl_width", "diffmmcondition", "oldlywd", "diff_match", "fixed_mem", "oldlystyle", "difftcost", " diff_wd", "diff_w", "admin_tag", " DiffThecheck", "diffingspeed", "oldlygroup", "iff_sum", "diffLcost", "diff2wd", "diffingtype", "difftdirection", " diff_Weight", "difflymean", "diff_direction", "dist_style", "dist_sum", "dist_weights", "show_package", " diff2weights", "change_weight", "diffmmpackage", "showlycondition", "old_group", "difflypackage", "same_sum", "old_share", "diffJWeight", "difftweight", "diff___weight", "rel_weight", " diff_default", "diff_option", "admin_speed", "oldlytarget", "diffingweight", "diff2cost", "old_wd", "diff_condition", "diffmmterm", "diffJweight", "admintcost", "showlyweight", "iff_weights", "grad_weight", "diff2width", "diff_share", "dist_tag", "difflogweight", " DiffThedepth", "change_option", "diff_default", "difflycount", "same_value", "gradlyweight", "grad_force", "diffJw", "iff_cost", "oldlyweight", "difftspeed", "diff67sum", "diff_tag", "change_width", " diff_cost", " diff_sum", "diff67count", "show_condition", "diff_type", "diffThetime", "rel_speed", "diff67speed", "difflygroup", "Diff_force", "change_time", "diffmmcount", "difflymask", "diffJdefault", "oldlymean", "dist_w", "difflyforce", "difflyspeed", "difflyshare", " diff2mem", "diff2value", "difflogvar", "diffttag", "diff_weights", "fixed_weights", "diffLweight", "admintspeed", "Diff_weight", "difflylink", "grad_link", "dl_weights", " Diff_check", "difflogsum", "oldlyshare", "gradlyscale", "diffLwidth", "differcost", "diffmmweight", "admintweight", "diff2weights", "diff_term", "admin_weight", "Diff_var", "admin_cost", "gradlylink", "Diff_sum", "diff_value", "difflydirection", "diff___style", "dist_cost", "diff2weight", "showlycount", "diff2mem", "rel_direction", "diff_style", "difflystyle", "differweight", "adminttag", "iffingtype", "fixed_width", "dl_weight", " diff_mem", "difflytarget", "difflyscale", "gradlyforce", "diff_group", "dlmmweights", "diffingwd", "difflogforce", " DiffTheweight", " diff2wd", "show_count", " DiffThetime", "old_style", "dl_tag", "iff_speed", " Diff_weight", "diff_sum", "diff_target", "diff_mean", " diff2cost", "difflyWeight", "same_count", " Diff_depth", "diff_var", "differwidth", "diff_cost", "dist_force", "diff2sum", "diffmmstyle", " diff_group", "dlmmweight", "diffThecheck", "same_weight", "change_cost", " diff_force", " diff_weights", "diff_width", "difflyweight", "diffingstyle", "iffingspeed"], "px": ["ps", "pac", "Pixel", "tmp", "yx", "pt", "xp", "pack", "php", "pixel", "X", "xy", "pkg", "pan", "py", "rs", "ix", "xs", "pos", "amps", "s", "ms", "pp", "ax", "xx", "raw", "wx", "pm", "mx", "ex", "mp", "fx", "Xi", "p", "pi", "cp", "pl", "xc", "bars", "pex", "ox", "pc", "abs", "pic", "yp", "mm", "tx"], "y": ["z", "Y", "sys", "ym", "ey", "yl", "yn", "ay", "yx", "a", "my", "xy", "l", "py", "t", "yer", "iy", "xs", "by", "s", "sy", "xx", "yy", "r", "ip", "k", "ty", "yt", "ch", "v", "c", "gy", "ys", "b", "ot", "g", "ies", "h", "yi", "ny", "yd", "d", "fy", "p", "j", "col", "ry", "ox", "ya", "e", "uy", "ye", "bar", "xi", "yr", "cy", "vy", "o", "u", "ia", "asy", "ar", "hy", "sky"], "rank": ["type", "rate", "str", "pri", "max", "conf", "range", "cr", "clean", "loc", "vote", "ank", "std", "chain", "order", "score", "domain", "row", "nr", "pos", "dim", "shape", "dist", "attr", "r", "err", "root", "tag", " Rank", "index", "scale", "group", "master", "Rank", "depth", "deep", "work", "ranked", "call", "p", "sort", "height", "count", "vol", "cmp", "mix", "align", "right", "var", "error", "weight", "mark", "cache", "graph", "cum", "star", "mean", "hang", "average", "reg", "rec", "grade", "rat", "war", "head", "ar", "ack", "param"], "w": ["z", "nw", "ws", "iw", "wh", "l", "t", "wat", "W", "wd", "tw", "wed", "ww", "s", "r", "sw", "v", "wa", "wx", "c", "h", "g", "wb", "we", "wr", "d", "p", "wu", "rw", "hw", "e", "kw", "wt", "right", "fw", "ew", "weight", "u", "wp", "wi", "width"], "input": ["rand", "str", "add", "out", "stream", "reader", "text", "std", " Input", "shift", "sample", "format", "result", "step", "raw", "request", "output", "buffer", "think", "na", "pull", "q", "ref", "Input", "source", "select", "pattern", "context", "read", "path", "next", "call", "accept", "act", "get", "inc", "it", "int", "focus", "feed", "sq", "print", "exec", "data", "view", "connect", "init"], "n": ["z", "f", "nn", "a", "l", "t", "nt", "nr", "N", "ns", "mn", "r", "k", "nm", "na", "c", "h", "sn", "b", "q", "g", "an", "cn", "nu", "nb", "num", "d", "p", "j", "np", "nc", "o", "u", "nl", "ll"], "m": ["f", "gm", "mc", "tm", "l", "sm", "t", "month", "ms", "M", "len", "mn", "r", "nm", "v", "mis", "c", "bm", "h", "q", "b", "g", "mod", "dm", "d", "p", "km", "mt", "e", "mr", "o", "mm", "mi", "im", "cm"], "i": ["f", "iq", "l", "ix", "ti", "ci", "r", "k", " j", "c", "b", "ind", "id", "ior", "d", "p", "j", "e", "it", "ii", "li", "I", "iter", "im"]}}
{"code": "# https://atcoder.jp/contests/abc123/tasks/abc123_c\\nimport sys\\n# sys.setrecursionlimit(100000)\\n\\n\\ndef input():\\n    return sys.stdin.readline().strip()\\n\\n\\ndef input_int():\\n    return int(input())\\n\\n\\ndef input_int_list():\\n    return [int(i) for i in input().split()]\\n\\n\\ndef main():\\n    n = input_int()\\n    a = input_int()\\n    b = input_int()\\n    c = input_int()\\n    d = input_int()\\n    e = input_int()\\n    _min = min(a, b, c, d, e)\\n    ans = (n // _min) - 1 + 5\\n    if n % _min > 0:\\n        ans += 1\\n    print(ans)\\n\\n    return\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "784", "substitutes": {}}
{"code": "#!/usr/bin/env python3\\nt, s = map(int, input().split())\\nprint(t/s)\\n", "target": "317", "substitutes": {}}
{"code": "def main():\\n    n,k = map(int, input().split())\\n\\n    c = 0\\n    while True:\\n        if n >= k ** c:\\n            c += 1\\n        else:\\n            break\\n    \\n    print(c)\\n    return\\nmain()\\n", "target": "719", "substitutes": {"n": ["f", "nn", "out", "m", "l", "t", "nt", "number", "nr", "N", "i", "ns", "r", "en", "v", "ln", "sn", "q", "b", "an", "g", "cn", "nu", "nb", "num", "d", "nv", "p", "ne", "net", "np", "nc", "w", "x"], "k": ["dk", "K", "m", "kr", "kh", "ka", "ck", "kl", "i", "kick", "kk", "kan", "ke", "kar", "mk", "ki", "q", "h", "ak", "wk", "num", "kok", "p", "km", "j", "kb", "kj", "kw", "sk", "ko", "ku", "ks"], "c": ["z", "f", "max", "m", "C", "cr", "a", "cs", "l", "t", "con", "i", "ci", "rc", "ca", "cb", "v", "ctrl", "co", "q", "lc", "gc", "ct", "cc", "unc", "ce", "d", "cos", "cur", "p", "\u00e7", "num", "size", "col", "j", "xc", "cd", "fc", "conf", "nc", "ac", "cum", "u", "cu", "cache", "x", "cm", "count"]}}
{"code": "def collatz(n):\\n    return 3*n+1 if n%2 else n//2\\na,n=[],int(input())\\nwhile len(set(a))==len(a):\\n    a.append(n)\\n    n=collatz(n)\\nprint(len(a))", "target": "551", "substitutes": {"n": ["z", "f", "nn", "nw", "m", "l", "nt", "t", "number", "nr", "s", "N", "i", "len", "ns", "nm", "r", "mn", "en", "fn", "v", "na", "c", "ng", "sn", "ln", "an", "b", "g", "h", "cn", "nu", "nb", "tn", "rn", "num", "d", "p", "dn", "j", "ne", "gn", "nor", "np", "nan", "nc", "o", "w", "nl"], "a": ["f", "ba", "out", "obj", "apa", "qa", "m", "am", "ta", "ae", "y", "t", "name", "all", "sta", "ga", "s", "au", "xa", "i", "ca", "A", "r", "la", "na", "c", "ea", "h", "b", "ct", "area", "p", "alpha", "j", "oa", "sa", "ata", "aa", "ac", "o", "ma", "w", "abs", "set", "ab", "eas", "aaa", "ana", "an", "data", "ack", "new"]}}
{"code": "from queue import Queue\\nN = int(input())\\nG = [[] for _ in range(N)]\\nC = [[] for _ in range(N)]\\nfor _ in range(N-1):\\n    a, b, w = map(int, input().split())\\n    a -= 1\\n    b -= 1\\n    G[a].append(b)\\n    C[a].append(w)\\n    G[b].append(a)\\n    C[b].append(w)\\nans = [-1] * N\\nans[0] = 0\\nque = Queue()\\nque.put(0)\\nwhile not que.empty():\\n    v = que.get()\\n    l = len(G[v])\\n    for i in range(l):\\n        u = G[v][i]\\n        w = C[v][i]\\n        if ans[u] != -1:\\n            continue\\n        ans[u] = (ans[v] + w) % 2\\n        que.put(u)\\nprint(*ans, sep='\\n')", "target": "300", "substitutes": {"N": ["Num", "NE", "AN", "F", "R", "CNN", "Ni", "NG", "NI", "NB", "M", "NR", "CN", "A", "Na", "SIZE", "Len", "NA", "Size", "S", "O", "ND", "Ne", "NT", "D", "SN", "NS", "All", "L", "NM", "TN", "P", "Q", "T", "GN", "n", "V", "I", "B", "NUM", "NC", "Ns", "NO", "NN"], "G": ["GRE", "GP", "AG", "H", "Graphics", "GES", "Gu", "F", "W", "PG", "Gs", "LG", "A", "GF", "IG", "GR", "U", "GC", "GB", "g", "GH", "TG", "GI", "L", "GG", "GA", "GE", "GO", "GU", "FG", "BG", "Q", "GM", "Ge", "GV", "GN", "J", "V", "I", "B", "GS", "GT", "Gar", "CG"], "_": ["let", "pt", "____", "all", "ing", "ix", " j", "__", " __", "g", "ate", "val", "P", " x", "___", "x", "ation"], "C": ["Che", "H", "CO", "R", "W", "CR", "Cs", "CP", "CM", "M", "A", "CN", "BC", "MC", "CI", "CU", "CV", "U", "c", "GC", "Cu", "S", "CL", "CT", "L", "CC", "Cons", "P", "Q", "LC", "Co", "T", "Cache", "CCC", "V", "B", "CS", "EC", "JC", "NC", "CB", "WC", "DC", "Cos", "CG"], "a": ["ba", "el", "am", "ae", "t", "af", "au", "ga", "xa", "A", "r", "ca", "la", "at", "pa", "c", "ea", "h", "g", "ami", "area", "p", "va", "alpha", "app", "oa", "e", "sa", "ai", "aa", "aj", "al", "ac", "art", "n", "ma", "o", "ia", "ab", "aaa", "x", "ar", "an", "aff"], "b": ["z", "f", "rb", "ba", "ib", "m", "bl", "be", "y", "t", "bc", "s", "bg", "xb", "fb", "r", "A", "cb", "db", "c", "h", "g", "wb", "d", "p", "bi", "br", "j", "e", "bu", "sb", "bis", "n", "ob", "o", "bs", "B", "ab", "x", "bb", "bar", "base", "eb"], "w": ["z", "f", "nw", "ws", "iw", "win", "m", "wh", "red", "wed", "ww", "W", "t", "wd", "tw", "ow", "s", "wall", "r", "sw", "wig", "wa", "c", "wx", "aw", "h", "q", "wl", "g", "wb", "we", "wr", "d", "p", "window", "rw", "word", "e", "kw", "wt", "ew", "n", "o", "wal", "wp", "x", "wi", "width"], "ans": ["ens", "ps", "users", "groups", "ues", "names", "flags", "aned", "ones", "AN", "cs", "rs", "gs", "xs", "amps", "s", "os", "anas", "ins", "aus", "ns", "ons", "outs", "ms", "ars", "ann", "aps", "ags", "atts", "aces", "aos", "ents", "es", "ians", "asks", "na", "ums", "rans", "ands", "ass", "posts", "cn", " means", "ids", "vs", "ANS", "terms", "ds", "uns", "nas", "offs", "anes", "ams", "n", "ads", "ates", "ats", "nl", "us", "x", "vals", "anks", "qs", "an", "ks", "ants"], "que": ["pe", "ve", "ques", "vel", "he", "rub", "ope", "fe", "bl", "be", "se", "ha", "ck", "ste", "au", "con", "ube", "en", "ue", "la", "fif", "co", "inse", "q", "animate", "je", "who", "lo", "onge", "ct", "wy", "queue", "ze", "oe", "onde", "we", "ctx", "de", "eq", "cur", "te", "cho", "ru", "pat", "dule", "cp", "com", "ro", "pl", "ne", "cle", "uf", "xe", "sel", "bo", "po", "cache", "ob", "aque", "quit", "ko", "qq", "Que", "igh", "ack", "qu"], "v": ["f", "ve", "vo", "sv", "m", "qv", "inv", "van", "y", "lv", "t", "r", "ver", "k", "at", "vp", "c", "h", "q", "g", "tv", "iv", "rev", "nv", "vs", "p", "va", "vm", "vi", "j", "pi", "av", "vol", "it", "vt", "uv", "n", "V", "vr", "vis", "o", "vy", "x", "ev", "vc"], "l": ["z", "f", "els", "lit", "ls", "el", "le", "m", "lv", "t", "kl", "s", "len", "il", "ul", "sl", "c", "lt", "length", "ln", "h", "lc", "g", "lo", "ml", "d", "p", "dl", "L", "j", "lp", "pl", "hl", "n", "ell", "li", "nl", "ll"], "i": ["z", "f", "zi", "m", "y", "ix", "ti", "ip", "ci", "k", "ij", "c", "h", "q", "ind", "id", "di", "p", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "iri", "n", "si", "ic", "o", "I", "li", "xi", "x", "ui", "mi", "iu", "im"], "u": ["uid", "tu", "pu", "ud", "su", "au", "ug", "k", "ue", "ul", "gu", "c", "lu", "U", "h", "g", "user", "nu", "eu", "p", "ut", "ou", "uf", "bu", "uc", "ur", "up", "uu", "uv", "o", "cu", "ju", "uni", "uj", "us", "hu", "ui", "iu", "ru"]}}
{"code": "def readinput():\\n    n=int(input())\\n    return n\\n\\ndef main(n):\\n    x7=int(n/1.07)+1\\n    x9=int(n/1.09)-1\\n    n100=n*100\\n    for x in range(max(1,x9),x7+1):\\n        xx=x*108//100\\n        #print(x,xx)\\n        if xx==n:\\n            print(x)\\n            break\\n    else:\\n        print(':(')\\n\\n        \\n\\nif __name__=='__main__':\\n    n=readinput()\\n    main(n)\\n", "target": "194", "substitutes": {"n": ["z", "f", "nn", "out", "names", "m", "a", "l", "all", "t", "nt", "name", "number", "nr", "s", "N", "i", "fn", "ns", "nm", "mn", "r", "en", "v", "na", "c", "long", "ln", "sn", "q", "b", "an", "g", "cn", "nu", "nb", "num", "d", "cont", "size", "p", "dn", "j", "ne", "total", "int", "np", "nan", "nc", "o", "w"], "x7": ["x700", "xi5", "xx713", "ix5", "ix7", "x713", "ix9", " x5", "n7", "xi7", " x07", "xx7", "x07", "x5", "xx07", " x700", "n07", " x713", "n713", "xi700", "ix700", "xi9"], "x9": ["ax9", "ex6", "ex10", "ex09", "n8", "ex9", "x09", "wx10", "wx9", "x6", " x8", "n10", "ax09", "wx09", "wx6", "x10", "x8", " x10", "ax8", "n09", " x09", "n9", "ax10", " x6"], "n100": ["N400", "n400", " n400", "N104", "w108", "n108", "w400", "n104", "w104", " n104", "w100", " n108", "N100", "N108"], "x": ["z", "max", "xes", "xp", "X", "ux", "xy", "y", "ix", "xs", "xa", "ax", "i", "v", "xt", "dx", "wx", "c", "q", "mx", "ex", "fx", "p", "exp", "rx", "j", "xxx", "xc", "ox", "xe", "xi", "w", "xf", "tx"], "xx": ["yx", "vv", "ux", "xy", "ck", "xs", "dd", "pp", "yy", "xxxxxxxx", "xff", "dx", "wx", "mx", "foo", "cc", "xxx", "xxxx", "jj", "aa", "xi", "XX", "zz", "mm", "xd", "inx"]}}
{"code": "S = input()\\nf = int(S[0]+S[1])\\nb = int(S[2]+S[3])\\n\\ndef judge(int):\\n    if 1 <= int <= 12:\\n        return 0\\n    else:\\n        return 1\\nref = [judge(f), judge(b)]\\n\\nif ref == [1, 1]:\\n    print(\"NA\")\\nelif ref == [0, 1]:\\n    print(\"MMYY\")\\nelif ref == [1, 0]:\\n    print(\"YYMM\")\\nelse:\\n    print(\"AMBIGUOUS\")\\n", "target": "17", "substitutes": {"S": ["SER", "Sample", "BS", "String", "SI", "H", "C", "SS", "X", "F", "R", "SL", "G", "PS", "SB", "JS", "SD", "s", "OS", "N", "M", "SOURCE", "A", "RS", "ST", "IS", "E", "SR", "DS", "Source", "D", "US", "NS", "SAM", "SU", "L", "SP", "FS", "P", "TS", "State", "SH", "T", "SA", "SE", "Z", "V", "I", "B", "CS", "GS", "BY", "STATE"], "f": ["family", "fa", "F", "fe", "fg", "a", "df", "t", "cf", "af", "fr", "i", "fn", "fb", "alf", "ft", "c", "fed", "fp", "rf", "fx", "force", "d", "fi", "bf", "e", "uf", "sf", "fac", "tf", "fc", "lf", "ff", "fm", "fd"], "b": ["rb", "ba", "ib", "m", "a", "mb", "be", "y", "bc", "bp", "back", "cb", "fb", "db", "v", "c", "g", "nb", "d", "bi", "br", "j", "bf", "sb", "bis", "n", "ob", "bs", "B", "ab", "bb", "eb"], "int": ["rand", "str", "det", "rest", "out", "integ", "ret", "nt", "t", "number", "au", "oct", "i", "switch", "ip", "point", "div", "uint", "input", "index", "long", "Int", "double", "bit", "val", "ind", "string", "inter", "num", "cont", "next", "Integer", "char", "alpha", "trans", "bool", "INT", "inc", "it", "cmp", "integer", "ints", "inner", "short", "float", "void", "ic", "dec", "iter", "print", "st", "digit", "inst", "init"], "ref": ["map", "Ref", "el", "ap", "range", "rep", "ret", "old", "to", "REF", "cb", "r", "phys", "res", "resp", "alf", "check", "url", "cal", "bound", "repl", "g", "ef", "val", "re", "reference", "config", "mem", "next", "act", "ro", "ne", "addr", " reference", "error", "conf", "n", "ob", "review", "ab", "rel", "reg", "ail", "req", "base", "aff", "new"]}}
{"code": "import math\\nn = int(input())\\nfor i in range(1,50001):\\n    if math.floor(i * 1.08) == n:\\n        print(i)\\n        break\\nelse:\\n    print(\":(\")", "target": "194", "substitutes": {"n": ["f", "nw", "nn", "m", "l", "nt", "t", "number", "s", "N", "ns", "k", "v", "na", "c", "ln", "sn", "h", "b", "g", "nu", "nb", "num", "d", "p", "j", "network", "ne", "net", "int", "np", "nan", "nc", "o", "w", "nl", "x"], "i": ["f", "ini", "zi", "\u00ed", "m", "ogi", "a", "y", "ix", "ti", "info", "ip", "ci", "gi", "v", "ij", "hi", "oi", "index", "ki", "q", "b", "g", "yi", "ind", "id", "di", "ik", "p", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "li", "I", "ql", "iter", "x", "mi", "iu"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nN = [0] * (n+1)\\nfor i in range(1, n+1):\\n    N[i] += N[i-1] + a[i-1]\\n\\nMax = N[-1]\\nans = float(\"INF\")\\nfor i in range(1, n):\\n    if abs(N[i] - (Max-N[i])) < ans:\\n        ans =  abs(N[i] - (Max-N[i]))\\nprint(ans)", "target": "424", "substitutes": {"n": ["nw", "max", "nn", "nia", "m", "l", "y", "nt", "t", "number", "all", "name", "ns", "r", "en", "k", "v", "na", "c", "ln", "sn", "q", "b", "an", "g", "h", "cn", "nu", "nb", "num", "d", "size", "p", "j", "network", "pi", "ne", "net", "gn", "np", "nc", "o", "w", "no", "x", "on"], "a": ["f", "ba", "m", "ae", "att", "another", "all", "t", "cha", "au", "s", "A", "ca", "input", "at", "la", "na", "c", "wa", "ea", "an", "b", "area", "p", "alpha", "oa", "isa", "sa", "ai", "ata", "aa", "ac", "ma", "ia", "ab", "aaa", "ana", "am", "aff", "auto"], "N": ["Y", "Name", "Num", "K", "KN", "NE", "H", "C", "NF", "X", "AN", "F", "Sn", "R", "G", "CNN", "NG", "NI", "NB", "M", "NR", "CN", "MN", "A", "NP", "NA", "S", "ND", "O", "New", "NT", "SN", "NS", "FN", "Node", "Names", "NM", "L", "TN", "An", "NOTE", "P", "NPR", "T", "MAN", "GN", "J", "V", "Note", "I", "B", "Ns", "NC", "NUM", "Results", "NO", "NN", "NH"], "i": ["io", "ini", "ei", "ri", "zi", "cli", "uri", "chain", "y", "this", "ix", "iy", "ti", "info", "ip", "ci", "\u0438", "series", "ji", "im", "gi", "v", "status", "ij", "ori", "index", "ki", "phi", "yi", "sim", "ind", "id", "asi", "di", "bi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "ic", "iri", "li", "I", "ia", "iter", "batch", "set", "me", "x", "ui", "mi", "iu", "multi", "ski"], "Max": ["Num", "max", " max", "Grand", "X", "Total", "Rest", "Maximum", "Limit", "R", "Last", "Sum", "Mu", "ax", "Abs", "MAX", "Len", "Main", "Full", "Center", "Range", "Size", "Min", "Ms", "All", "Can", "Ra", "Node", "To", "Def", "Right", "End", "Net", "Des", "P", "Mod", "No", "Most", "Lim", "V", "Prime", "Big", "Ax", "Base"], "ans": ["ens", "cas", "lines", "checks", "ls", "Vers", "aned", "mas", "AN", "ones", "oss", "ran", "pan", "rs", "amps", "xs", "iann", "ins", "anas", "os", "aus", "ns", "ons", "outs", "ann", "mn", " Ans", "aos", "arts", "na", "es", "ians", "ents", "rans", "posts", " means", "san", "ms", "ANS", "can", "An", "uns", "anes", "nan", "ats", "Ns", "ros", "anks", "an", "ks", "ants", "lan"]}}
{"code": "# https://atcoder.jp/contests/agc008/tasks/agc008_a\\nx, y = map(int, input().split())\\n\\nans = float('inf')\\nfor i in range(4):\\n    t = 0\\n    if i == 0:\\n        tx = -1 * x\\n        ty = y\\n        t += 1\\n    elif i == 1:\\n        tx = x\\n        ty = -1 * y\\n        t += 1\\n    elif i == 2:\\n        tx = -1 * x\\n        ty = -1 * y\\n        t += 2\\n    else:\\n        tx = x\\n        ty = y\\n    if tx <= ty:\\n        t += ty - tx\\n        ans = min(ans, t)\\n\\nprint(ans)", "target": "15", "substitutes": {}}
{"code": "import math\\nn = int(input())\\nprint(int(2 * n / math.gcd(2, n)))", "target": "762", "substitutes": {"n": ["f", "nn", "m", "a", "l", "nt", "t", "number", "s", "N", "i", "fn", "ns", "mn", "len", "input", "v", "c", "ln", "sn", "h", "b", "q", "g", "cn", "nu", "nb", "num", "d", "p", "j", "int", "nan", "nc", "o", "u", "w", "nl", "x"]}}
{"code": "A_word = str(input().rstrip())\\nB_word=  str(input().rstrip())\\n\\ncounter=0\\nfor i in range(len(A_word)):\\n    if A_word[i]!=B_word[i]:\\n        counter+=1\\nprint(counter)", "target": "123", "substitutes": {"A_word": ["A_char", "A___comment", "B_filter", "AProword", "A_filter", "A____words", "B_block", "A___words", "A_comment", "A_target", "B_comment", "A___block", "A____filter", "A____word", "B_char", "B_words", "A_words", " A_target", "A___word", "A_block", "AProwords", "A____char", " A_words", "AProtarget"], "B_word": ["Bptfield", "BA_words", "USB_post", "USBuffyfield", "BAcurrentname", "Buffyfield", "USB_word", "BAcurrentcomment", "Buffypost", "USBuffyword", "Buffyterm", "Bptterm", "Buffyword", "USBuffypost", "Bptword", "B_term", "USB_field", "BA_name", "Bcurrentword", "Bptpost", "BA_comment", "B_name", "B_field", "Bcurrentwords", "B_comment", "B_words", "USB_term", "B_post", "BAcurrentword", "Bcurrentcomment", "BA_word", "USBuffyterm", "BAcurrentwords", "Bcurrentname"], "counter": ["frequency", "function", "message", "sum", "currency", "ounter", "ter", "C", "pointer", "order", "card", "nt", "amount", "number", "manager", "timer", "nr", "second", "result", "point", "created", "buffer", "walker", "over", "cookie", "c", "index", "condition", "processor", "user", "inter", "num", "Counter", "vector", "ctr", "book", "zero", "total", "record", "outer", "current", "clock", "inner", "time", "table", "sequence", "instance", "TER", "system", "cm", "controller", "count"], "i": ["f", "ini", "zi", "m", "uri", "ogi", "a", "y", "t", "ix", "ti", "ip", "ci", "\u0438", "k", "ji", "gi", "v", "ij", "c", "ori", "index", "h", "q", "ami", "yi", "ind", "id", "di", "p", "multi", "j", "pi", "qi", "ai", "it", "ii", "iri", "n", "xi", "ic", "si", "I", "li", "iter", "batch", "me", "x", "ui", "mi", "im", "init"]}}
{"code": "# coding: utf-8\\n# Your code here!\\nn=int(input())\\na=[0]*n\\nb=[0]*n\\nca=0\\nans=0\\nfor i in range(n):\\n    a[i],b[i]=map(int,input().split())\\nfor j in range(n):\\n    if a[j]>ca:\\n        ca=a[j]\\n        ans=a[j]+b[j]\\nprint(ans)", "target": "266", "substitutes": {}}
{"code": "n, a, b = map(int, input().split())\\n\\nans = 0\\ncnt = 0\\nfor i in range(a, n+1):\\n    res = 0\\n    num = i\\n    while num > 0:\\n        res += num % 10\\n        num //= 10\\n\\n    if res >= a and res <= b:\\n        ans += i\\n\\nprint(ans)", "target": "704", "substitutes": {"n": ["f", "nn", "m", "l", "nt", "t", "N", "ns", "r", "nm", "mn", "v", "na", "c", "sn", "an", "nd", "cn", "nu", "nb", "d", "p", "j", "ne", "e", "np", "nc", "o", "no", "x"], "a": ["ba", "apa", "m", "ae", "be", "l", "y", "t", "sta", "au", "ax", "A", "r", "ca", "at", "la", "na", "c", "an", "d", "va", "p", "alpha", "ao", "j", "act", "oa", "e", "sa", "ai", "aa", "al", "ac", "ma", "u", "ia", "ab", "x", "ar", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "l", "y", "t", "bc", "s", "cb", "r", "fb", "v", "db", "c", "h", "g", "bas", "nb", "d", "p", "bi", "e", "aa", "bis", "bs", "u", "B", "ab", "x", "bb", "eb"], "ans": ["ens", "rors", "lines", "sum", "names", "mas", "oss", "ran", "cs", "rs", "cons", "xs", "pos", "iann", "s", "ms", "ins", "os", "aus", "ns", "ars", "ons", "ann", " Ans", "aps", "outs", "acts", "arts", "es", "ums", "rans", "ids", "terms", "ANS", "ds", "usr", "uns", "results", "offs", "nz", "pres", "ras", "ats", "us", "ros", "an", "ks", "ants", "ows"], "cnt": ["Count", "rnt", " ccount", "rct", " count", "count", "cct", " cct", "rcount", "Ccount", "Cct", "rount", "ccount", "Cnt"], "i": ["z", "io", "ini", "ri", "zi", "m", "cli", "l", "y", "t", "ti", "info", "s", "ip", "ci", "r", "k", "v", "gi", "ij", "c", "q", "ind", "id", "di", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "int", "ii", "si", "ic", "I", "li", "ia", "x", "mi", "iu", "im", "init"], "res": ["rand", "ress", "ps", "rest", "obj", "des", "range", "cond", "reset", "rez", "ret", "rs", "cons", "nt", "conn", "pos", "dev", "rou", "result", "os", "ins", "con", "ns", "r", "ver", "resp", "ons", "rc", "resh", "yes", "ref", "re", "mem", "vol", "results", "RES", "conf", "rem", "pres", "reg", "rel", "Res", "resolution", "rat", "req", "respons", "resource", "pro"], "num": ["good", "Num", "nom", "max", "obj", "sum", "m", "mon", "nt", "number", "pos", "nr", "result", "con", "N", "final", "len", "mn", "nm", "ver", "un", "msg", "div", "news", "en", "snap", "na", "index", "mod", "nu", "nb", "temp", "sim", "id", "cmd", "test", "orig", "mult", "p", "col", "sam", "zero", "hot", "quant", "int", "np", "loc", "uni", "rem", "no", "reg", "NUM", "um", "multi", "count"]}}
{"code": "N=int(input())\\nd=input().split()\\nD=[list(s) for s in d]\\nans=\"\"\\nfor i in range(N):\\n    ans+=d[0][i]+d[1][i]\\nprint(ans)", "target": "673", "substitutes": {"N": ["Num", "K", "C", "F", "Sn", "R", "CNN", "NB", "NI", "M", "NR", "A", "NA", "S", "ND", "NT", "SN", "NS", "L", "NM", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NN", "NH"], "d": ["done", "details", "ve", "ld", "des", "m", "l", "t", "dos", "dict", "did", "dd", "dim", "r", "dt", "db", "sd", "dx", "c", "b", "split", "nd", "ands", "ind", "di", "pd", "de", "dl", "p", "da", "du", "do", "ds", "td", "e", "dh", "n", "ad", "w", "dL", "dr", "data", "dat"], "D": ["K", "DL", "DB", "PD", "C", "AN", "R", "W", "DD", "dict", "M", "A", "DATA", "Ds", "S", "O", "ND", "DS", "L", "P", "Q", "DM", "T", "V", "I", "B"], "s": ["ps", " os", "sts", "sing", " sets", "sv", "ls", " sp", " som", " sc", "fs", "a", " stands", " es", "rs", "t", "se", "gs", "xs", "os", "ins", "ns", " sh", "v", " self", " parts", "hs", "es", " iss", " ts", "ies", "S", "string", " str", "ains", "ss", "ds", "\u00df", "sb", "its", " si", "si", "sq", "ats", "st", "x", "ts", " se", " S"], "ans": ["ens", "ps", "cas", "sv", "ls", "AN", "ran", "ean", "anc", "pan", "rs", "amps", "iann", "ins", "anas", "ms", "os", "ns", "aus", "en", "ann", "ars", " Ans", "aos", "arts", "ents", "es", "ians", "rans", "eds", " means", "san", "ANS", "can", "anus", "ds", "anes", "nan", "ams", "ats", "us", "ros", "ts", "anks", "an", "ks", "ants", "lan"], "i": ["pai", "io", "ri", "zi", "m", "a", "l", "y", "ix", "ti", "ip", "ci", "k", "v", "gi", "ij", "c", "ori", "index", "q", "ind", "id", "di", "num", "p", "bi", "multi", "j", "pi", "it", "int", "ii", "iri", "si", "n", "ic", "xi", "I", "li", "x", "mi", "im"]}}
{"code": "s=input()+'T'\\nx,y=map(int,input().split())\\nif 'T' in s:\\n  pos=s.index('T')\\n  x-=pos\\n  s=s[pos+1:]\\narr=s.split('T')\\nxarr=[]\\nyarr=[]\\nfor i in range(len(arr)):\\n  l=len(arr[i])\\n  if l==0:\\n    continue\\n  if i%2==0:\\n    yarr.append(l)\\n  else:\\n    xarr.append(l)\\nx+=sum(xarr)\\ny+=sum(yarr)\\nif x%2==1 or y%2==1:\\n  print('No')\\nelse:\\n  #DP for xarr,yarr\\n  xdp=[0]*8005\\n  xdp[0]=1\\n  for val in xarr:\\n    for i in range(8004,-1,-1):\\n      if i-val<0:\\n        break\\n      if xdp[i-val]==1:\\n        xdp[i]=1\\n  ydp=[0]*8005\\n  ydp[0]=1\\n  for val in yarr:\\n    for i in range(8004,-1,-1):\\n      if i-val<0:\\n        break\\n      if ydp[i-val]==1:\\n        ydp[i]=1\\n  if xdp[x//2]==0:\\n    print('No')\\n  else:\\n    if ydp[y//2]==0:\\n      print('No')\\n    else:\\n      print('Yes')", "target": "753", "substitutes": {"s": ["f", "ps", "sts", "str", "sv", "ws", "ls", "obj", "m", "a", "spec", "sql", "rs", "t", "gs", "se", "ins", "ms", "os", "r", "sw", "input", "v", "sp", "strings", " parts", "es", "c", " ts", "h", "q", "b", "sg", "g", "S", "ies", "csv", "string", "source", " str", "p", "sort", " inputs", "ss", "j", "ds", "e", "sb", "ashes", "n", "abs", "bs", "sq", "tes", "save", "ats", "space", "ts", "ar", "qs", "js"], "x": ["z", "f", "m", "xp", "X", "a", "ux", "xy", "t", "ix", "xs", "to", "xa", "ax", "xx", "r", "k", "v", "xt", "dx", "wx", "c", "h", "mx", "zx", "ex", "ct", "fx", "d", "p", "rx", "xc", " xx", "ox", "xe", "xi", "n", "o", "w", "px", "xf", "xd", "tx"], "y": ["Y", "z", "ym", "ey", "yl", "yn", "ay", "m", "my", "xy", "py", "t", "iy", "oy", "sy", "yy", "ty", "yt", "v", "ys", "gy", "b", "ot", "ies", "yi", "wy", "ny", "fy", "j", "it", "dy", "uy", "ye", "yr", "n", "o", "vy", "cy", "hy"], "pos": ["z", "ps", "add", "origin", "offset", "obj", "ls", "pt", "names", "Pos", "xy", "nt", "neg", "os", "ins", "nos", "ms", "point", "lim", "pose", "v", "index", "mk", "post", "position", "val", "ind", "init", "num", "cos", "p", "pat", "j", "col", "pl", "port", "trans", "po", "doc", "conf", "n", "loc", "keys", "px", "part", "pres", "pid", "lat", "ks", "proc", "pro", "POS"], "arr": ["map", "img", "str", "ag", "play", "ls", "array", "Ar", "att", "bl", "rep", "all", "t", "nt", "ars", "fr", "ax", "attr", "ang", "r", "err", "gr", "split", "b", "val", "Array", "br", "j", "agg", "pl", "buf", "app", "av", "vol", "mat", "tr", "txt", "al", "n", "arb", "ray", "ab", "rel", "arg", "list", "vals", "ts", "ar", "data", "ll", "js"], "xarr": ["xarray", "rxarray", "xagg", "rxarg", "ixres", "oxdat", "Xdat", "ixarray", " xarg", "actarr", " xdat", " xstr", "actdat", "xres", "xstr", "yobj", "oxarr", "Xarr", "rxarr", "ydat", "rxres", "xarg", " xagg", "ixarr", "Xobj", "ixarg", "oxagg", "yarray", "actobj", "actarray", "xdat", "oxstr", "yagg", " xres", "Xarray", "xobj", " xarray", "ystr"], "yarr": ["gyarr", "yybuf", "xyobj", "yygr", "nyarr", "xyarr", "yyarray", "aydiff", " ybuf", "nyattr", " ygr", "ybuf", "ydiff", "nyreq", "xystr", "xstr", "ayattr", "yobj", "ygr", "yerr", "gyarray", "ayreq", "yystr", "nydiff", "yyarr", " yarray", "yyerr", "yreq", "yyattr", "yyreq", "yarray", "xyerr", "gybuf", "ayarr", "yattr", "xobj", "yydiff", "gygr", "yyobj", "xerr", "ystr"], "i": ["z", "f", "ini", "zi", "m", "a", "t", "ix", "ti", "key", "ci", "r", "k", "v", "gi", "ij", "ori", "index", "oi", "q", "b", "phi", "ind", "id", "di", "p", "bi", "j", "pi", "ai", "it", "ii", "xi", "si", "n", "ic", "o", "li", "I", "mi", "im"], "l": ["lit", "ol", "ld", "ls", "level", "el", "le", "m", "lv", "t", "lis", "kl", "len", "r", "il", "lb", "length", "sl", "lt", "long", "ln", "lu", "lay", "h", "lc", "g", "tl", "lo", "lam", "ml", "dl", "L", "lp", "pl", "hl", "n", "li", "nl", "list", "ll", "ly"]}}
{"code": "X, Y = map(int, input().split())\\nif X % Y == 0:\\n  ans = -1\\nelif Y % X == 0:\\n  ans = X * (Y//X + 1)\\nelse:\\n  ans = X\\nif ans > 10**18:\\n  ans = -1\\nif X == 1 and Y != 1:\\n  ans = Y + 1\\nprint(ans)", "target": "396", "substitutes": {"X": ["Time", "TY", "UX", "K", "CH", "IP", "IME", "C", "H", "AN", "XL", "MX", "Width", "RY", "R", "G", "W", "XY", "N", "M", "FX", "A", "AX", "OX", "U", "XXX", "TH", "S", "DX", "E", "O", "ICE", "D", "EX", "Xi", "ANS", "L", "P", "Q", "ZX", "XM", "T", "XP", "XX", "Z", "V", "I", "IX", "x", "TX", "Ax", "XT"], "Y": ["SY", "TY", "AY", "ONE", "HY", "H", "C", "MX", "YP", "HT", "EY", "y", "G", "W", "XY", "N", "M", "IB", "YN", "Cy", "TO", "TH", "GB", "S", "E", "O", "Py", "YA", "D", "YD", "L", "YE", "Height", "YS", "Year", "P", "BY", "Q", "T", "YC", "Z", "FY", "V", "J", "I", "B", "IE", "IF", "NY", "YY", "MY"], "ans": ["ens", "annot", "AN", "oss", "cs", "Trans", "ars", "anas", "ins", "aus", "outs", "aos", "aces", "ies", "Sin", "An", "lets", "offs", "Ns", "eas", "ros", "x", "Ax", "ants", "jas", "lan", "sys", "cas", "asm", "vers", "rates", "Rs", "ean", "xs", "Any", "ms", "aps", "NA", "eds", " means", "Sc", "ANS", "can", "man", "Cons", "ams", "ads", "terms", "ls", "qual", "mas", "rs", "gs", "A", "ann", " Ans", "arts", "ents", "Scan", "Year", "uns", "pres", "ras", "ks", "aned", "cons", "amps", "iann", "s", "ns", "acs", "rans", "S", "san", "NS", "vs", "ats", "an", "olds", "irms"]}}
{"code": "a=int(input())\\nprint(a/2/a if a%2 == 0 else ((a-1)/2+1)/a)", "target": "197", "substitutes": {"a": ["z", "f", "ba", "apa", "fa", "ap", "m", "ta", "ae", "l", "all", "t", "to", "ga", "s", "au", "i", "A", "ca", "la", "v", "c", "ea", "an", "h", "b", "g", "area", "go", "d", "p", "alpha", "da", "j", "oa", "aka", "e", "sa", "ai", "aa", "n", "ac", "o", "ma", "w", "abs", "ia", "u", "ab", "aaa", "x", "am", "data", "auto"]}}
{"code": "N,T = map(int,input().split())\\nt = list(map(int,input().split()))\\ncnt = 0\\nfor i in range(1,N):\\n    emp_time=(t[i]-t[i-1])-T\\n    if emp_time >= 0:\\n        cnt += T\\n    else:\\n        cnt += t[i]-t[i-1]\\nprint(cnt+T)", "target": "355", "substitutes": {"N": ["Y", "Num", "K", "C", "F", "Sn", "Ni", "CNN", "G", "NB", "NI", "M", "NR", "A", "MN", "NP", "NA", "Size", "S", "ND", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "No", "P", "GN", "J", "n", "V", "I", "Ns", "NO", "NN", "NH"], "T": ["Y", "Time", "TR", "K", "H", "C", "X", "F", "R", "WT", "G", "W", "M", "A", "TA", "TH", "S", "E", "DT", "NT", "D", "TG", "L", "TP", "TN", "TM", "P", "TS", "Q", "TC", "J", "Z", "V", "I", "B", "VT", "TT", "GT", "PT"], "t": ["type", "z", "tu", "tmp", "pt", "ent", "m", "ta", "a", "l", "y", "nt", "tt", "all", "to", "s", "dt", "tp", "v", "c", "h", "ot", "b", "q", "g", "ct", "temp", "tree", "d", "trace", "te", "p", "title", "tip", "j", "total", "e", "it", "wt", "got", "tr", "time", "n", "table", "o", "list", "ts", "data", "st"], "cnt": ["Ccat", "iccat", "cst", "cwd", "ecnt", "encct", "Cpt", "ecrt", "crt", "cnc", "Crt", "CNT", "icnt", "Cnc", " cpt", "Cwd", "cNT", "Cct", " ccat", "nNT", "Count", "Cnt", "ct", "ecpt", "Ct", "ccat", "npt", "icount", "icwd", "encnc", " cst", " count", " cret", " cNT", "Cret", "encnt", "nnt", " crt", " ct", "encret", " cnc", " cwd", "Cst", "cct", " cct", "nst", "cret", "count", "ect", "cpt"], "i": ["io", "ini", "zi", "m", "uri", "name", "ix", "ti", "info", "ip", "ci", "key", "\u0438", "ji", "gi", "v", "ij", "c", "ori", "index", "oi", "major", "q", "phi", "ind", "id", "di", "num", "bi", "multi", "pi", "ai", "it", "ii", "xi", "si", "n", "ic", "batch", "li", "I", "me", "x", "ui", "mi", "im"], "emp_time": ["paifultime", "pai_tim", "paifulvalue", "emp___runtime", "emp_test", "emprestest", "emp00tim", "emp___time", "empfultim", "emp00time", "empresvalue", "emp_tim", "empjtim", "adjust___runtime", "empjtime", "emprestim", "emprestime", "empjvalue", "pai_value", "adjust_runtime", "paifultest", "empjtest", "emp_value", "paifultim", "adjust___time", "emp00runtime", "adjust_tim", "adjust___tim", "emp___tim", "empfultest", "pai_test", "emp_runtime", "pai_time", "adjust_time", "empfulvalue", "empfultime"]}}
{"code": "N,M = map(int,input().split())\\nH = list(map(int,input().split()))\\nbad = []\\nfor i in range(M):\\n    A,B = map(int,input().split())\\n    if H[A-1] > H[B-1]:\\n        bad.append(B-1)\\n    elif H[A-1] < H[B-1]:\\n        bad.append(A-1)\\n    else:\\n        bad.append(A-1)\\n        bad.append(B-1)\\nprint(N-len(set(bad)))", "target": "291", "substitutes": {"N": ["Y", "K", "C", "X", "F", "R", "Ni", "G", "NB", "NI", "NR", "MN", "NA", "S", "E", "NT", "D", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "V", "I", "Ns", "NUM", "NN", "NH"], "M": ["Y", "K", "m", "C", "MP", "X", "F", "MX", "R", "G", "MT", "MR", "MN", "MI", "MC", "MM", "S", "D", "L", "NM", "P", "Q", "MS", "T", "MAN", "DM", "J", "V", "I"], "H": ["HK", "Y", "Graph", "HO", "He", "CH", "HF", "HT", "Han", "HI", "HB", "HS", "HQ", "HL", "High", "HD", "HH", "h", "MH", "Host", "His", "GH", "HC", "HA", "HE", "PP", "P", "SH", "HTML", "T", "V", "OH", "HTTP", "HP", "HM", "NH"], "bad": ["bug", "good", "add", "negative", "won", "failed", "wrong", "important", "unknown", "other", "red", "big", "all", "debug", "hog", "by", " good", "err", "lost", "db", "fail", "added", "missing", "poor", "slow", "like", "dirty", "dis", "black", "b", " BAD", "broken", "stable", "default", "Bad", "warn", "pretty", "dead", "null", "same", "new", "none", "valid", "disabled", "error", "neg", "ad", "log", "bid", "no", "killed", "written", "bar", "pro", "better", "needed"], "i": ["isin", "iq", " il", "y", "ite", "ix", "by", "r", "k", " j", "q", "ind", "id", " ii", "j", " I", "it", "n", "I", "no", "x", " mi"], "A": ["App", "AR", "K", "AI", "AA", "C", "RA", "API", "AN", "AC", "Al", "a", "F", "R", "IA", "G", "AV", "ACC", "BA", "CA", "LA", "AL", "TA", "EA", "U", "NA", "S", "E", "O", "As", "AU", "HA", "AT", "AF", "L", "GA", "An", "At", "P", "MA", "This", "And", "T", "AS", "AE", "AB", "AP", "V", "I", "Ant", "SA"], "B": ["Y", "BE", "Blue", "BB", "BS", "AR", "VB", "DB", "C", "EB", "RB", "Ber", "R", "OB", "G", "SB", "NB", "BO", "BA", "WB", "BC", "IB", "BI", "Be", "Bar", "b", "GB", "Builder", "E", "D", "L", "TB", "LB", "P", "BG", "T", "J", "Z", "AB", "V", "Bill", "I", "USB", "BL", "Bern", "BM", "BER", "Reb", "BY", "BF", "BR", "Bs"]}}
{"code": "N = int(input())\\n\\ndic = {(i,j):set([]) for i in range(1,N+1) for j in range(2)}\\n\\nfor i in range(1,N+1):\\n  a = int(input())\\n  for _ in range(a):\\n    x,y = map(int, input().split())\\n    dic[(i,y)].add(x)\\n    \\np = 2**N\\nrlt = 0\\n\\nfor b in range(p):\\n  s0 = set([])\\n  s1 = set([])\\n  for i in range(N):\\n    if b&(1<<i):\\n      s1.add(i+1)\\n    else:\\n      s0.add(i+1)\\n  f = 1\\n  for i in s1:\\n    for k in dic[(i,1)]:\\n      if k in s0:\\n        f = 0\\n        break\\n    for k in dic[(i,0)]:\\n      if k in s1:\\n        f = 0\\n        break\\n    if f == 0:\\n      break\\n  if f == 1:\\n    rlt = max(len(s1),rlt)\\n    \\nprint(rlt)", "target": "52", "substitutes": {"N": ["Y", "Num", "K", "NE", "H", "C", "AN", "F", "Sn", "R", "Ni", "G", "NB", "NI", "M", "NV", "NR", "CN", "MN", "A", "Len", "NP", "NA", "S", "O", "Ne", "NT", "D", "SN", "NS", "Node", "L", "TN", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NO", "NN", "NH"], "dic": ["Dics", " dict", "didict", "didic", "ddicc", "didarc", " darc", "doicc", "dict", " dist", "dist", "ddict", "Dictionary", "doic", "darc", " dics", "mdict", " dicc", "doics", "Dic", "Dist", "dictics", "dics", "ddic", "dictic", "Dict", "dictict", " dictionary", "dictist", "doictionary", "mdarc", "dictionary", "ddics", "mdic", "ddictionary", "didics", "mdics", "dicc"], "i": ["ini", "ri", "zi", "m", "ir", "l", "t", "ix", "ti", "info", "s", "ip", "ci", "r", "il", "v", "gi", "ij", "index", "oi", "ki", "yi", "ie", "ind", "id", "di", "ik", "bi", "pi", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "o", "I", "li", "ia", "u", "iri", "ui", "mi", "iu", "im"], "j": ["z", "m", "jit", "l", "t", "ix", "r", "ji", "jp", "v", "ij", "c", "q", "g", "ie", "d", "bi", "e", "jj", "J", "n", "o", "li", "uj", "ia", "ju", "bj", "js", "jc"], "a": ["z", "ba", "m", "am", "ae", "l", "au", "A", "ca", "at", "pa", "na", "c", "ea", "area", "e", "sa", "ai", "aa", "ac", "n", "o", "ma", "u", "ia", "ab", "aaa", "ar", "ana", "an"], "_": ["ion", "ay", "ix", " m", "ip", "A", "il", " n", "an", "ik", "ai", "ad", "ac", "o", "I", "B", "ia", "am", "ation"], "x": ["z", "m", "X", "xy", "l", "t", "ix", "xs", "s", "xa", "xx", "r", "v", "xt", "dx", "c", "d", "rx", "e", "ox", "int", "xi", "n", "ic", "w", "u", "tx"], "y": ["Y", "z", "ym", "yl", "yn", "ay", "m", "my", "xy", "l", "t", "py", "iy", "sy", "oy", "yy", "ch", "yt", "v", "c", "ys", "g", "ies", "yi", "ny", "col", "ye", "n", "yr", "cy", "o", "vy", "ly"], "p": ["ps", "m", "ap", "par", "l", "t", "bp", "pb", "pp", "r", "jp", "tp", "sp", "pa", "c", "q", "fp", "g", "h", "d", "power", "pi", "cp", "lp", "P", "e", "np", "pc", "n", "part", "pn"], "rlt": ["dlen", "wrnt", " rbt", "dgt", "rrt", "dlt", " relt", "lgt", " ralt", "Ralt", "rlen", "wrelt", "Rgt", "Rlr", "mrlt", "rnt", " rlen", "mrbt", "Rlt", " rtl", "Rbt", "glt", "lrt", "mrnt", "mralt", "rort", "ggt", "delt", "mrrt", "llt", "rtl", "rolr", "Rrt", "rogt", "rolt", "gelt", "rlr", "rbt", " rnt", "relt", " rgt", "mrtl", "wrlt", "rgt", "wrtl", "llr", " rrt", "mrelt", "ralt", "glen"], "b": ["z", "ib", "m", "be", "l", "big", "bc", "bp", "to", "ip", "bg", "bh", "cb", "r", "ch", "lb", "v", "c", "h", "g", "bit", "nb", "d", "bi", "br", "bf", "bool", "bin", "sb", "it", "bis", "bs", "w", "B", "ab", "bb", "base", "eb"], "s0": ["gs1", "os0", "S2", "series0", " s9", "szero", "series9", "S4", " s2", " s5", "S5", "S1", " sj", " szero", "gs5", "s2", "s9", "os1", "s5", " s4", "s4", "sj", "oszero", "S0", "gs4", "seriesj", "series1", "os2", "Szero", "gs0"], "s1": ["ts2", "tsone", " s001", "sin1", "S2", "s001", " s3", " s01", "p2", " s2", "ss1", "S3", "p0", "S01", "ws3", "p3", "p1", "sts1", "ss0", "S1", "s8", "s2", "ws1", "ss2", "ts3", "sts0", "S0", "ts1", "sone", "ws2", "ws001", "sts8", "sin2", "ts8", "s01", "S001", "sin0", "ss01", "ts0", "stsone", "s3"], "f": ["good", "fl", "fa", "m", "ter", "field", "F", "fg", "df", "fe", "l", "eff", "t", "full", "cf", "fr", "fab", "r", "fb", "v", "status", "alf", "c", "h", "rf", "g", "fp", "d", "exp", "flow", "bf", "fi", "e", "valid", "sf", "fac", "tf", "error", "fc", "conf", "feed", "o", "print", "ff", "xf", "fm", "fun", "aff", "fd"], "k": ["kg", "K", "m", "kr", "kt", "ka", "t", "ck", "give", "ikk", "ked", "ok", "kk", "ci", "ke", "kan", "kid", "r", "ang", "kar", "c", "mk", "mut", "ki", "ak", "kn", "ind", "ik", "d", "kin", "kok", "ek", "tk", "n", "w", "u", "sk", "kov", "ark", "ku", "ks"]}}
{"code": "#2 Kleene Inversion\\nn,k=map(int,input().split())\\na=list(map(int,input().split()))\\nmod=10**9+7\\n\\na_out = [sum(bb > aa for bb in a ) for aa in a]\\na_in = [sum(a[i] > a[j] for i in range(n) if i<j) for j in range(n)]\\n\\nprint( (sum(a_out)*k*(k-1)//2 + sum(a_in)*k)%mod )", "target": "542", "substitutes": {}}
{"code": "w = input()\\nfor i in range(len(w)):\\n    if w.count(w[i])%2==0:\\n        continue\\n    else:\\n        print('No')\\n        exit()\\nprint('Yes')", "target": "337", "substitutes": {"w": ["f", "nw", "ws", "iw", "wm", "won", "out", "m", "wh", "a", "l", "t", "W", "wd", "wall", "s", "raw", "sw", "r", "v", "now", "wa", "wx", "c", "words", "aw", "h", "q", "wl", "b", "wb", "we", "wr", "d", "rew", "p", "window", "rw", "hw", "word", "wt", "fw", "ew", "up", "n", "wal", "wp", "x"], "i": ["f", "ini", "zi", "\u00ed", "m", "l", "y", "ix", "iy", "ti", "ci", "k", "gi", " j", "ij", "c", "ori", "index", "q", "yi", "sim", "ind", "id", " ii", "di", "p", "bi", "j", "pi", "ii", "xi", "n", "si", "li", "I", "x", "mi", "im"]}}
{"code": "n,m = list(map(int, input(\"\").split()))\\nh = list(map(int, input(\"\").split()))\\n\\np = [1] * n\\n\\nfor i in range(m):\\n  a,b = map(int, input().split())\\n  if h[a-1] <= h[b-1]:\\n    p[a-1]=0\\n\\n  if h[a-1] >= h[b-1]:\\n    p[b-1]=0\\n\\nprint(sum(p))", "target": "291", "substitutes": {"n": ["nn", "l", "y", "t", "nt", "s", "N", "M", "ns", "r", "k", "nm", "mn", "v", "na", "c", "q", "nd", "g", "sn", "nu", "nb", "ny", "num", "d", "j", "e", "np", "nc", "o", "x"], "m": ["f", "gm", "mc", "tm", "l", "y", "t", "ms", "M", "mn", "r", "k", "nm", "v", "mis", "c", "bm", "mod", "dm", "num", "d", "man", "j", "mt", "om", "mo", "mr", "ma", "mm", "mi", "cm"], "h": ["uh", "ph", "he", "H", "here", "kh", "rh", "hm", "l", "ha", "hz", "pp", "bh", "r", "sw", "ho", "history", "hs", "hi", "q", "phi", "http", "hal", "math", "hd", "go", "ih", "exp", "ht", "oh", "hw", "act", "hl", "np", "gh", "cache", "hr", "her", "hh", "ah", "help", "sh", "hash", "hp"], "p": ["op", "ps", "pr", "ap", "params", "par", "rep", "pkg", "t", "pos", "pb", "pp", "jp", "tp", "press", "sp", "perm", "pa", "vp", "c", "pm", "q", "pers", "g", "post", "fp", "pd", "d", "power", "eps", "exp", "j", "pi", "cp", "ping", "lp", "pl", "progress", "P", "np", "cache", "pc", "dp", "up", "wp", "hp"], "i": ["z", "f", "iq", "l", "y", "ix", "ti", "r", "k", "gi", " j", "c", "q", "ind", "id", " ii", "j", "e", "it", "li", "I", "iter", "x", "im"], "a": ["f", "ba", "ap", "ae", "\u00e1", "ta", "be", "ga", "au", "ax", "A", "ca", "at", "la", "pa", "na", "c", "ea", "an", "ami", "ak", "er", "va", "alpha", "ao", "j", "oa", "act", "sa", "ai", "aa", "aj", "ac", " A", "ma", "ia", "ab", "aaa", "ar", "ach", "am", "aff"], "b": ["z", "f", "rb", "ba", "ib", "be", "l", "y", "t", "bc", "bp", "bd", "to", "by", "back", "bg", "bh", "r", "fb", "cb", "v", "db", "c", "ble", "bas", "g", "nb", "d", "bi", "br", "j", "bf", "e", "sb", "gb", "bis", "ob", "o", "bs", "bot", "B", "ab", "bb", "boot", "bar", "base", "eb"]}}
{"code": "from sys import stdin\\ndef main():\\n    #\u5165\u529b\\n    readline=stdin.readline\\n    s=readline().strip()\\n    K=int(readline())\\n\\n    N=len(s)\\n    words=[]\\n    for i in range(N):\\n        words.append(s[i])\\n    for i in range(N-1):\\n        words.append(s[i:i+2])\\n    for i in range(N-2):\\n        words.append(s[i:i+3])\\n    for i in range(N-3):\\n        words.append(s[i:i+4])\\n    for i in range(N-4):\\n        words.append(s[i:i+5])\\n    words=set(words)\\n    words=list(words)\\n    words.sort()\\n    print(words[K-1])\\n    \\nif __name__==\"__main__\":\\n    main()", "target": "246", "substitutes": {}}
{"code": "n = int(input())\\ns = input()\\nans = 0\\nfor i in range(1,n):\\n    x = s[:i]\\n    y = s[i:]\\n    ans = max(ans, len(list(set(x) & set(y))))\\n    \\nprint(ans)", "target": "575", "substitutes": {"n": ["z", "nn", "m", "l", "nt", "t", "N", "len", "ns", "mn", "k", "un", "v", "na", "c", "ln", "sn", "q", "b", "g", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "np", "nc", " N", "w", "no", "nl"], "s": ["z", "sts", "sv", "m", "fs", "a", "sis", "cs", "se", "rs", "gs", "xs", "t", "ins", "ms", "ns", "series", "input", "sp", "sl", "c", "ys", "q", "b", "h", "g", "ies", "S", "p", "ss", "ds", "sb", "sa", "ses", "bs", "sq", "w", "ats", "st", "ts", "qs", "js"], "ans": ["ens", "stats", "wan", "sv", "lines", "ls", "anon", "sum", "annot", "mas", "aned", "AN", "oss", "ran", "ean", "pan", "rs", "cs", "amps", "xs", "anned", "iann", "ins", "anas", "ms", "aus", "ns", "mn", "ons", "ann", "os", " Ans", "ends", "aps", "aos", "es", "rans", "aver", "san", "ANS", "anus", "nas", "ai", "offs", "gn", "anes", "nan", "mean", "ses", "ats", "ros", "ions", "anks", "an", "ks", "ants", "lan"], "i": ["f", "ini", "zi", "m", "l", "ix", "ti", "\u0438", "ci", "v", "gi", "ij", "c", "ori", "q", "b", "phi", "yi", "ind", "id", "di", "p", "bi", "vi", "j", "pi", "ai", "it", "ii", "xi", "si", "ic", "iri", "li", "I", "ui", "mi"], "x": ["z", "rex", "xp", "X", "ux", "xy", "ix", "xs", "xa", "ax", "xx", "rax", "v", "nex", "xt", "dx", "wx", "zx", "mx", "ex", "fx", "rx", "xxx", "xc", " xx", "ox", "xe", "xxxx", "xi", "px", "xf", "xd", "tx"], "y": ["z", "Y", "sys", "ym", "ey", "yl", "yo", "yn", "xy", "py", "yer", "yy", "ty", "yt", "v", "ys", "gy", "b", "ies", "yi", "ny", "hey", "fy", "j", "ya", "uy", "ye", "yr", "cy", "o", "sky"]}}
{"code": "from collections import defaultdict\\nfrom itertools import permutations\\n\\nn, c = map(int, input().split())\\nd = [list(map(int, input().split())) for _ in range(c)]\\ncmat = [list(map(int, input().split())) for _ in range(n)]\\n\\ndcnt = [defaultdict(int) for _ in range(3)]\\nfor i, ci in enumerate(cmat, 1):\\n    for j, cij in enumerate(ci, 1):\\n        mod = (i + j) % 3\\n        dcnt[mod][cij - 1] += 1\\n\\nans = 1000 * n ** 2\\nfor color in permutations(range(c), 3):\\n    tmp = 0\\n    for i, cnt in enumerate(dcnt):\\n        tmp += sum(d[k][color[i]] * cnt[k] for k in cnt)\\n    ans = min(ans, tmp)\\nprint(ans)\\n", "target": "516", "substitutes": {"n": ["z", "nn", "m", "a", "l", "nt", "t", "number", "s", "N", "ns", "mn", "r", "v", "na", "sn", "q", "b", "g", "cn", "nu", "nb", "num", "size", "p", "pi", "np", "nc", "o", "w", "nl", "x", " N", "count"], "c": ["f", "abc", "m", "C", "cr", "a", "cs", "l", "t", "cf", "con", "r", "cin", "rc", "v", "co", "b", "lc", "g", "cn", "ct", "cc", "cl", "ce", "p", "col", "cp", "cd", "dc", "fc", "nc", "ac", "u", "cm", "count"], "d": ["z", "done", "out", "des", "m", "df", "bd", "t", "dos", "dict", "did", "dd", "r", "dt", "db", "v", "sd", "b", "nd", "ct", "D", "di", "pd", "de", "do", "da", "ds", "td", "cd", "dc", "dates", "ad", "rd", "dec", "dL", "dr", "data", "dat", "fd"], "_": ["pt", " int", "____", "py", "t", "__", "place", " __", "ml", " the", "T", "___"], "cmat": ["cdoc", " cMat", "cmap", "dcmat", " chat", "crix", "cdMat", "cimat", "cipat", "cshat", "dcrix", "cpat", "chat", " cpat", "cdmat", "csMat", "dcmap", "cMat", " cmap", "cirix", "csmat", "cddoc", " crix", " cdoc", "dcpat", "cdhat", "csdoc", "cimap"], "dcnt": ["DCnt", "dcrt", " dcnd", "dcnd", "mcct", "cdst", " dcdef", "fcdef", "fcNT", "DCct", "dcst", "mcnt", "DCdef", "mcnd", "cdnd", "dcNT", "discnt", "discct", "fcnd", "cdnt", "fcct", "mcrt", "dcdef", "DCnd", "fcnt", " dcct", "fcrt", " dcNT", "discrt", "discnd", "fcst", " dcst", "cdNT", "dcct"], "i": ["io", "ini", "ib", "zi", "m", "a", "kh", "l", "y", "t", "ix", "ti", "ip", "ati", "v", "gi", "ij", "hi", "oi", "ki", "phi", "b", "ami", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "x", "mi", "iu"], "ci": ["ini", "oci", "zi", "cul", "C", "cus", "df", "cci", "cs", "cia", "sci", "ix", "ti", "cin", "ca", "co", "gu", "dx", "ki", "ct", "ind", "id", "di", "ce", "cont", "de", "da", "col", "pi", "uci", "cd", "dc", "ii", "si", "nc", "ic", "cu", "li", "cy", "cor", "x", "cm", "init"], "j": ["z", "obj", "jl", "m", "ja", "l", "y", "jp", "ji", "v", "Ja", "ij", "q", "b", "g", "jac", "ind", "bi", "oj", "kj", "jj", "jump", "aj", "J", "o", "uj", "dj", "x", "bj", "js", "jc"], "cij": ["cii", "cinj", "aii", "icj", "ciz", "aij", "cini", "cinji", "cez", "cinz", "cin", "icn", "ceji", "cen", "ciij", "cei", "aiij", "ceij", "cinn", "cej", "aiji", "icji", "ciji", "icz", "cinij"], "mod": ["good", "sub", "add", "edit", "m", "cond", "ade", "parent", "modified", "ms", "module", "ver", "perm", "mut", " Mod", "sim", "ind", "id", "comp", "man", "dir", "com", "form", "ident", "Mod", "mode", "ox", "od", "MOD", "lex", "mag", "tab", "set", "reg", "im", "mods", "base"], "ans": ["ens", "stats", "ls", "aned", "oss", "anc", "cs", "rs", "nt", "cons", "amps", "iann", "s", "os", "anas", "ms", "aus", "ns", "ons", "mn", "ann", "outs", "ins", "news", "arts", "ents", "ians", "ums", "iban", "rans", "posts", "yes", " means", "ids", "ANS", "ds", "uns", "nas", "offs", "ints", "nan", "ams", "ates", "ats", "ados", "us", "ros", "an", "ks", "ants", "ows"], "color": ["type", "core", "cat", "Color", "pixel", "kh", "draw", "node", "name", "cycle", "ck", "common", "kl", "row", "colour", "key", "r", "ch", "v", "state", "g", "pair", "ind", "id", "ik", "olor", "char", "col", "chrom", "COLOR", "kw", "ox", "gb", "component", "mate", "o", "cy", "cor", "set", "x", "category"], "tmp": ["emp", "max", "offset", "obj", "sum", "tm", "m", "pad", "mb", "xy", "pkg", "nt", "tt", "t", "pos", "result", "etc", "ptr", "cb", "attr", "resp", "msg", "sp", "perm", "mk", "mut", "term", "ot", "mp", "temp", "nb", "test", "ctx", "comp", "p", "cp", "buf", "total", "cmp", "np", "txt", "amp", "tc", "px", "mm", "buff", "qq", "ppo", "mint", "proc", "new"], "cnt": ["pcpt", "dcrt", "dcnd", "tcrt", "fcNT", "crt", "tcNT", "rcct", "dcNT", "cdef", " cpt", "cNT", "dcvt", "ccount", "dccount", " cdef", "pcct", "cpt", "tcnt", "rcnt", "fcnd", "cvt", "pcvt", "tcnd", " cvt", "dcdef", "rcdef", "fcnt", "fcrt", "rccount", "dcpt", "cnd", "cct", " cct", "pcnt", " ccount", "dcct"], "k": ["z", "K", "iq", "m", "kind", "kt", "kh", "ka", "t", "ck", "kl", "ikk", "key", "kk", "ok", "ke", "v", "kar", "ki", "q", "g", "unk", "ind", "id", "ijk", "ik", "kin", "p", "kw", "tk", "ic", "o", "u", "sk", "ko", "x", "ku", "ks"]}}
{"code": "N = int(input())\\na = list(map(int,input().split()))\\nn = 1\\nans = 0\\nfor i in a:\\n    if i != n:\\n        ans += 1\\n    else:\\n        n +=1\\nif n == 1:\\n    print(\"-1\")\\nelse:\\n    print(ans)", "target": "749", "substitutes": {"N": ["Y", "Num", "K", "C", "X", "F", "R", "Ni", "G", "M", "A", "NA", "S", "E", "O", "D", "NS", "L", "P", "Q", "T", "J", "Z", "V", "I", "B", "Ns", "NN"], "a": ["ba", "m", "am", "ta", "ae", "another", "l", "all", "t", "sta", "to", "s", "xa", "A", "ca", "input", "at", "la", "pa", "na", "aw", "index", "ea", "b", "area", "p", "va", "alpha", "oa", "isa", "sa", "ai", "each", "aa", "o", "ma", "w", "ab", "list", "x", "ana", "an", "aba"], "n": ["f", "nn", "normal", "nia", "names", "m", "ni", "l", "nt", "t", "s", "len", "ns", "mn", "k", "en", "Na", "ann", "v", "na", "c", "sn", "b", "g", "cn", "nu", "nb", "num", "d", "p", "nat", "j", "ne", "net", "gn", "np", "nan", "nc", "no", "x", "an"], "ans": ["ens", "ls", "nets", "mas", "aned", "gs", "iann", "s", "ins", "anas", "os", "aus", "ns", "ons", "mn", "ann", "outs", "ms", "aps", "aos", "arts", "ents", "ians", "angs", "eds", "posts", "said", "ids", "terms", "ANS", "ds", "leans", "lets", "ai", "offs", "nan", "ams", "ses", "ads", "ates", "ats", "us", "ros", "ts", "anks", "an", "ks", "ants"], "i": ["ei", "ini", "zi", "\u00ed", " bi", "ni", "name", "ti", "ci", "ji", "gi", "ij", "ori", "oi", "ki", "phi", "ami", "yi", "asi", "id", "di", " Xi", "Xi", " ti", "bi", "j", "pi", "qi", "ai", "ii", "xi", "si", "o", "li", "I", "x", "iti", "mi", "iu"]}}
{"code": "import heapq\\nN = int(input())\\nAB = []\\nfor i in range(N):\\n    ab = list(map(int, input().split()))\\n    AB.append([-ab[0] - ab[1], -ab[0], -ab[1]])\\n\\nAB.sort(reverse=True)\\n\\nheapq.heapify(AB)\\nans = 0\\nfor i in range(N):\\n    q = heapq.heappop(AB)\\n    if i % 2 == 0:\\n        ans += - q[1]\\n    else: ans += q[2]\\nprint(ans)", "target": "794", "substitutes": {"N": ["K", "GEN", "AN", "R", "Ni", "CNN", "NG", "NI", "NB", "M", "NR", "CN", "MN", "NL", "NA", "S", "ND", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "No", "P", "Q", "GN", "n", "V", "I", "PN", "B", "Ns", "NC", "ON", "NO", "NN", "Network", "NH"], "AB": ["TY", "BB", "BS", "AI", "AA", "IGN", "AG", "AC", "EB", "Ab", "Tab", "OB", "SB", "BN", "NB", "BA", "IB", "ABC", "LAB", "UB", "ACK", "URN", "GB", "AT", "ASH", "AF", "LB", "OAD", "ICA", "QB", "ACH", "AD", "RAY", "AM", "FB", "AE", "PB", "SA", "ABLE", "abs", "B", "Lab", "BL", "CB", "REP", "AST", "AK", "AH", "BP"], "i": ["f", "ini", "ei", "ri", "zi", "a", "y", "ix", "iy", "ti", "ci", "k", "gi", "v", "gu", "ij", "c", "hi", "ki", "phi", "yi", "ind", "id", "di", "ik", "d", "bi", "j", "pi", "fi", "e", "ai", "it", "ii", "xi", "si", "n", "ic", "I", "li", "iter", "x", "iti", "iu", "im"], "ab": ["ib", "abc", "ap", "a", "Ab", "att", "ext", "af", "au", "pb", "aus", "ABC", "fab", "fb", "ty", "lb", "aps", "abi", "rab", "lam", "ash", "lib", "cap", "lab", "abb", "book", "pub", "jab", "av", "reb", "abin", "abs", "ac", "ub", "ob", "aut", "tab", "ace", "abl", "bag", "mac", "bs", "bb", "am", "ast", "eb", "hab"], "ans": ["ens", "stats", "cas", "ls", "sum", "aned", "AN", "ran", "cs", "lan", "amps", "ms", "anas", "ins", "aus", "ns", "ons", "ars", "ann", "acs", "aos", "arts", "ents", "asks", "ums", "rans", "ands", "eds", "posts", "yes", " means", "ANS", "can", "nas", "uns", "helps", "offs", "anes", "ads", "ras", "ats", "eas", "ros", "vals", "anks", "an", "ants", "olds", "ows", "irms"], "q": ["z", "qt", "f", "ve", "qual", "pt", "qa", "iq", "pg", "qv", "pkg", "t", "que", "quest", "ck", "pp", "r", "ch", "v", "query", "c", "dq", "h", "g", "queue", "eq", "d", "p", "exp", "j", "quant", "qi", "ox", "Q", "aq", "quick", "sq", "ql", "quality", "qq", "sh", "qs", "requ", "entry", "qu"]}}
{"code": "n,x=map(int, input().split())\\na=[int(x) for x in input().split()]\\n\\nd=0\\nans=0\\nfor i in a:\\n    d+=i\\n    if d<=x:ans+=1\\nprint(ans+1)", "target": "444", "substitutes": {"n": ["z", "nn", "m", "ni", "l", "y", "t", "s", "N", "ns", "mn", "k", "nm", "v", "na", "c", "sn", "h", "b", "g", "cn", "nb", "num", "p", "j", "nc", "o"], "x": ["f", "rex", "xes", "xp", "X", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "xx", "ax", "xxxxxxxx", "xb", "rax", " ax", "v", "nex", "xt", "dx", "wx", "c", "q", "g", "mx", "ex", "fx", "p", "rx", "xc", "e", "ox", "xe", "xi", "u", "px", "w", "xf", "an", "xd", "tx", "inx"], "a": ["ba", "array", "m", "ap", "ae", "another", "l", "y", "t", "all", "sta", "to", "au", "A", "ach", "at", "la", "v", "c", "aw", "an", "b", "area", "p", "alpha", "ada", "oa", "sa", "ai", "aa", "ac", "o", "ma", "w", "ab", "ana", "am"], "d": ["f", "done", "out", "m", "df", "l", "cs", "t", "dos", "did", "s", "dd", "den", "r", "dt", "db", "v", "dx", "c", "nd", "dis", "g", "ind", "D", "di", "du", "pd", "p", "de", "da", "j", "ds", "e", "cd", "ad", "o", "w", "dra", "dr", "data", "dat", "fd"], "ans": ["rors", "ens", "ps", "cas", "ls", "mas", "ones", "rs", "amps", "xs", "ins", "os", "ars", "aus", "ons", "ns", "outs", "ann", "ms", "anas", "Ds", "aos", "ents", "es", "ians", "ums", "rans", "eds", "vs", "ANS", "ds", "uns", "ai", "nas", "anes", "ads", "ats", "ros", "ts", "an", "ks", "ants", "lan"], "i": ["z", "io", "ei", "ini", "zi", "\u00ed", "m", "l", "y", "t", "ti", "ci", "gi", "v", "ij", "hi", "oi", "ki", "phi", "yi", "id", "di", "p", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "o", "ic", "li", "u", "I", "iti", "mi", "iu", "im"]}}
{"code": "import math\\n\\n\\ndef calc_distance(Y, Z):\\n    temp = 0\\n    for y, z in zip(Y, Z):\\n        temp += (y-z)**2\\n    return temp\\n\\n\\ndef is_integer(num):\\n    for k in range(1, num+1):\\n        if k*k == num:\\n            return True\\n    else:\\n        return False\\n\\n\\nN, D = map(int, input().split())\\nX = [list(map(int, input().split())) for _ in range(N)]\\ncnt = 0\\nfor i in range(len(X)-1):\\n    for j in range(i, len(X)):\\n        distance = calc_distance(X[i], X[j])\\n        if is_integer(distance):\\n            cnt += 1\\nprint(cnt)\\n", "target": "182", "substitutes": {"Y": ["TY", "AY", "K", "C", "R", "XY", "By", "Cy", "TH", "Ray", "S", "E", "Py", "YA", "YE", "YS", "Year", "CIA", "My", "Q", "T", "J", "YC", "FY", "V", "I", "YOU", "BY", "YY", "MY"], "Z": ["UX", "K", "AZ", "Zen", "C", "SS", "ED", "SL", "OS", "M", "ZA", "TH", "S", "ZZ", "ZI", "ZE", "L", "BOX", "TS", "P", "Q", "Zone", "ZX", "T", "J", "V", "FL", "I", "WH"], "temp": ["emp", "fake", "tmp", "pt", "sum", "m", "tim", "t", "W", "result", "make", "point", "output", "value", "v", "sp", "length", "c", "tem", "Temperature", "d", "power", "p", "height", "stem", "total", "Temp", "current", "tr", "T", "time", "tc", "n", "cum", "w", "set", "cm", "hum", "perature"], "y": ["yz", "ym", "ey", "yl", "yo", "yn", "a", "my", "xy", "t", "iy", "oy", "yy", "ty", "yt", "ys", "b", "ies", "yi", "ny", "ry", "ya", "uy", "ye", "axy", "yr", "cy", "vy", "x", "yd"], "z": ["yz", "oz", "zi", "zip", "zy", "t", "iz", "uz", "v", "az", "c", "cz", "q", "b", "zh", "gz", "ze", "d", "tz", "zer", "zen", "zone", "ez", "o", "zz", "zo", "x"], "num": ["f", "Num", "nom", "max", "sum", "m", "one", "mon", "node", "t", "number", "key", "kk", "nm", "mn", "cal", "na", "g", "random", "th", "nu", "nb", "id", "mult", "p", "alpha", "total", "valid", "int", "current", "np", "n", "o", "u", "no", "NUM", "ko", "um", "x", "multi", "unit"], "k": ["f", "K", "m", "kr", "kt", "kh", "ka", "t", "number", "kl", "ikk", "key", "kk", "mn", "ke", "kid", "kar", "c", "mk", "ki", "q", "g", "ak", "wk", "ik", "d", "p", "kin", "km", " K", "kj", "ek", "kw", "tk", "n", "w", "u", "sk", "ko", "x", "ku"], "N": ["Num", "K", "C", "R", "Ni", "NB", "NI", "M", "NR", "A", "MN", "CN", "Na", "NP", "NA", "S", "E", "ND", "NT", "NS", "L", "NM", "TN", "P", "No", "Q", "T", "J", "n", "V", "I", "Ns", "NC", "NN", "NH"], "D": ["K", "H", "C", "F", "R", "G", "W", "DD", "M", "U", "DA", "S", "DX", "E", "O", "ND", "DS", "d", "L", "P", "Q", "T", "DM", "V", "I", "B", "DC", "DI"], "X": ["GRE", "UX", "K", "Data", "String", "H", "XL", "AC", "MX", "SS", "R", "W", "Check", "XY", "ML", "M", "A", "AX", "OX", "XXX", "PE", "S", "DX", "E", "O", "EX", "Array", "Xi", "Cross", "L", "TP", "YS", "P", "TS", "Q", "This", "ZX", "XM", "List", "T", "XP", "J", "XX", "V", "I", "Ex", "FE", "HTTP", "JSON", "IX", "x", "TX", "WH", "Context", "XT"], "_": [" un", "pt", " g", "ix", " m", "key", " __", " p", "val", " e", " pos", " c", " l", " x", "I", "___"], "cnt": [" ctr", "cst", "acount", "xcnt", "xcct", "connt", "Cpt", "acnt", "acpt", "xcount", "concount", "xctr", "CNT", "rcct", "rctr", "acNT", " cpt", "cNT", "crst", "ccount", "Count", "Cnt", "crct", "rcnt", "crcount", "ctr", "crnt", "count", " cst", " count", "const", " cNT", "cct", " cct", "rcount", "conct", " ccount", "cpt"], "i": ["ini", "zi", "a", "l", "ix", "iy", "ti", "ip", "ci", "r", "v", "ij", "c", "hi", "index", "ki", "b", "yi", "ie", "ind", "id", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "o", "ic", "li", "I", "ia", "u", "x", "ui", "mi", "iu", "im"], "j": ["obj", "jl", "m", "ja", "l", "key", "jp", "r", "ji", "v", "ij", "c", "q", "b", "ian", "g", "jac", "p", "br", "oj", "kj", "jj", "jump", "aj", "J", "n", "o", "uj", "dj", "x", "bj", "js", "jc"], "distance": ["Distance", "dimension", "frequency", "diff", "message", "relation", "score", "driver", "location", "close", "result", "dim", "dist", "step", "density", "direction", "value", "json", "length", "depth", "position", "duration", "remote", "directory", "path", "power", "d", "command", "height", "radius", "relative", "time", "weight", "delay", "response", "trip", "shift"]}}
{"code": "A,B,C,D=map(int,input().split())\\n#a,b\u306e\u6700\u5927\u516c\u7d04\u6570\\ndef gcd(a, b):\\n    while b:\\n        a, b = b, a % b\\n    return a\\n\\n#a,b\u306e\u6700\u5c0f\u516c\u500d\u6570\\ndef lcm(a, b):\\n    return a * b // gcd (a, b)\\n\\nlcm_=lcm(C,D)\\nanswer=B-A+1-(B//C-A//C)-(B//D-A//D)+(B//lcm_-A//lcm_)\\nif A%C==0:\\n    answer-=1\\nif A%D==0:\\n    answer-=1\\nif answer<=-1:\\n    print(0)\\nelse:\\n    if A%C==0 and A%D==0:\\n        print(answer+1)\\n    else:\\n        print(answer)\\n", "target": "31", "substitutes": {"A": ["AA", "Ar", "H", "X", "AC", "a", "R", "G", "N", "M", "BA", "CA", "S", "E", "AT", "Array", "AF", "L", "An", "P", "T", "AS", "J", "AB", "V", "I", "SA"], "B": ["Y", "BE", "BBC", "BB", "DB", "Ab", "RB", "BO", "M", "BA", "BC", "CA", "BI", "Bi", "Bar", "b", "BD", "LB", "J", "AB", "V", "BT", "CB", "Bern", "BF", "Bs"], "C": ["Y", "CE", "G", "CNN", "Cs", "CM", "FC", "M", "N", "ABC", "CA", "BC", "c", "CD", "E", "CL", "VC", "CC", "DC", "YC", "V", "EC", "CB", "JC", "CS", "CP"], "D": ["DL", "DB", "PD", "F", "R", "DF", "G", "W", "DD", "N", "M", "Ds", "DA", "CD", "DX", "DS", "d", "DH", "L", "P", "DR", "Q", "DP", "DM", "DE", "DC", "DI"]}}
{"code": "N, K = map(int, input().split())\\ncnt = (N - 1) * (N - 2) // 2\\nif cnt < K:\\n    print(-1)\\n    exit()\\n\\nedges = [[] for _ in range(N)]\\nfor i in range(1, N):\\n    edges[0].append(i)\\n\\nef, et = 1, 2\\nfor i in range(cnt - K):\\n    edges[ef].append(et)\\n    et += 1\\n    if et == ef:\\n        et += 1\\n    if et == N:\\n        ef += 1\\n        et = ef + 1\\n\\nM = sum([len(edge) for edge in edges])\\nprint(M)\\nfor u in range(N):\\n    for v in edges[u]:\\n        print(u + 1, v + 1)", "target": "621", "substitutes": {"N": ["Num", "NE", "H", "C", "NF", "AN", "F", "R", "Ni", "CNN", "G", "NB", "NI", "W", "EN", "NR", "CN", "MN", "A", "U", "NP", "NA", "S", "E", "ND", "O", "Ne", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "P", "No", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NN", "NH"], "K": ["KN", "PK", "H", "C", "X", "AN", "F", "KK", "R", "SK", "G", "W", "NB", "A", "k", "KB", "KR", "KI", "NP", "KS", "TH", "S", "E", "NK", "D", "KING", "UK", "L", "TN", "P", "Q", "KE", "T", "J", "Z", "V", "I", "B", "KC", "WH"], "cnt": ["ncount", "ncpt", "cst", "rcwd", "cwd", "Cpt", "cnc", "ctnc", "ncwd", "CNT", "rcct", " cpt", "ctwd", "cNT", "ctst", "ccount", "Count", "ncnc", "Cnt", "ncNT", "rcnt", "ctcount", "count", " cst", "ctnt", " count", "ncst", "ctct", " cNT", "ncnt", "ctount", " cnc", "cct", "rcount", "nccount", "ncct", " ccount", "cpt"], "edges": ["owedGES", " edps", "edsmonds", "edpes", "atedles", " edgress", " edves", "edmonds", "edsgs", "ledges", "edsles", "ledgs", "ledves", "hedgs", "hedles", "edsgments", "gedwards", "edles", "hedmonds", "edgs", "ledgments", "gedges", "edsps", "esges", " edwards", "esgs", " edgments", "edps", "owedges", " edgs", "gedgments", "edves", "gedpes", "edsGES", " edles", "owedps", "edgress", "atedges", "owedgress", "EDwards", " edGES", "edsves", "atedGES", "esles", "edsgress", "esmonds", " edmonds", "edwards", "EDgments", "EDges", " edpes", "EDpes", "edGES", "atedmonds", "edsges", "hedges", "edgments"], "_": [" un", " int", "ix", " mult", " each", "ct", "code", "ind", " c", " the", " x", " k", "n", " all", "I", "x", " n"], "i": ["f", "io", "ini", "ei", "zi", "m", "ir", "a", "l", "y", "t", "ti", "ip", "ci", "il", "gi", "ij", "c", "ki", "b", "ie", "id", "di", "ik", "p", "bi", "j", "pi", "fi", "e", "ai", "it", "int", "ii", "iri", "si", "n", "ic", "xi", "li", "I", "ia", "iu", "im"], "ef": ["f", "ET", "ei", "PF", "CF", "ele", "el", "IGN", "ep", "FF", "NF", "fe", "eff", "fg", "F", "ED", "elt", "ext", "DF", "Fe", "Ni", "NG", "eth", "EN", "af", "ed", "DEF", "en", "ert", "alf", "FIN", "Len", "es", "inet", "ea", "ex", "E", "ref", "Ne", "eu", "oe", "elf", "orf", "eps", "EF", "ec", "Net", "bf", "e", "uf", "ee", "ife", "ew", "eg", "n", "het", "ffe", "lf", "FE", "ff", "EC", "ev", "eb", "fd"], "et": ["etter", "ET", "ets", "el", "ent", "ep", "pt", "acket", "iet", "est", "eff", "elt", "l", "t", "nt", "eth", "ed", "len", "en", "at", "ett", "pet", "ert", " pt", "inet", "es", "ea", "ot", " set", "ate", "ex", "ct", " e", "eu", "er", "eq", "esp", "ant", "p", " en", "end", "ec", "ne", "e", "ee", "it", "int", "acet", "onet", "ew", "eg", "het", "n", "o", "ac", "set", "itt", "on", "bet", "unit", "eb", "ect"], "M": ["MO", "m", "C", "H", "MX", "R", "Multi", "G", "MT", "LM", "CM", "Mon", "MI", "MN", "MC", "Met", "U", "MM", "S", "E", "O", "L", "NM", "JM", "VM", "TM", "P", "MS", "T", "DM", "MAN", "Z", "V", "RM", "I", "B", "MD", "MU"], "edge": ["pe", "ine", " ge", "diff", " wedge", " Edge", " ele", "ice", "node", "se", " element", "ite", " ve", " he", " pair", "dd", " event", "Edge", " bet", "tex", "ue", " line", "ick", " link", " row", "pair", "ge", " be", "ie", " pe", "di", "ce", "ink", " entry", "end", "vert", "GE", "e", "ee", " wire", "ye", " node", "eg", "cell", "ace", "set", " E", "link", " w", "entry", "ide"], "u": ["uid", "mu", "tu", "f", "pu", "a", "ud", "yu", "y", "t", "l", "su", "au", "k", "ue", "un", "gu", "ul", "c", "lu", "U", "h", "nu", "eu", "du", "p", "ou", "uf", "bu", "uc", "ur", "up", "uv", "uu", "o", "n", "cu", "uni", "us", "x", "ui", "iu"], "v": ["f", "vo", "sv", "vv", "m", "qv", "a", "l", "lv", "t", "y", "k", "vp", "c", "h", "q", "b", "g", "tv", "vs", "nv", "va", "p", "vm", "vi", "j", "ou", "av", "vt", "var", "uv", "vr", "V", "n", "o", "w", "us", "x", "ui", "vc", "cv"]}}
{"code": "def main():\\n\\n    N, P = map(int, input().split())\\n    S = input()\\n\\n    if P == 2 or P == 5:\\n        ans = 0\\n        for i in range(N):\\n            if int(S[i]) % P == 0:\\n                ans += (i + 1)\\n        print(ans)\\n        exit()\\n\\n    sum_rem = [0] * N\\n    sum_rem[0] = int(S[N - 1]) % P\\n    ten = 10\\n    for i in range(1, N):\\n        a = (int(S[N - 1 - i]) * ten) % P\\n        sum_rem[i] = (a + sum_rem[i - 1]) % P\\n        ten = (ten * 10) % P\\n\\n    ans = 0\\n    count = [0] * P\\n    count[0] = 1\\n    for i in range(N):\\n        ans += count[sum_rem[i]]\\n        count[sum_rem[i]] += 1\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "448", "substitutes": {"N": ["Y", "Num", "K", "NE", "H", "C", "X", "AN", "F", "Sn", "R", "G", "CNN", "W", "NB", "NI", "Ni", "M", "NR", "CN", "A", "Len", "NP", "NA", "E", "O", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "No", "Q", "NPR", "T", "GN", "J", "n", "V", "I", "PN", "B", "Ns", "NUM", "NO", "NN", "NH"], "P": ["Y", "PF", "GP", "K", "PK", "IP", "H", "C", "X", "F", "R", "PM", "G", "M", "PA", "A", "POS", "PO", "PU", "JP", "Pat", "NP", "U", "PE", "PR", "O", "E", "Part", "D", "Person", "p", "L", "TP", "AMP", "PP", "Pro", "Q", "FP", "Pen", "T", "DP", "J", "AP", "PET", "V", "Pad", "I", "PN", "B", "PI", "Pain", "Power", "Ps", "CP", "PUT", "Port", "PT"], "S": ["SER", "Bytes", "SI", "H", "C", "Si", "SS", "Rs", "R", "SL", "G", "PS", "SB", "JS", "s", "M", "A", "RS", "CSS", "ST", "Socket", "SR", "Input", "Source", "SAM", "NS", "SN", "SU", "SO", "L", "ss", "SP", "Q", "T", "SF", "V", "Sel", "I", "B", "CS", "SA", "Set", "SQL"], "ans": ["ens", "ps", "wan", "cas", "beans", "ls", "annot", "mas", "aned", "AN", "oss", "ean", "anc", "pan", "rs", "cons", "amps", "iann", "ines", "s", "ins", "anas", "ms", "aus", "ns", "ars", "ons", "ann", "outs", "os", "aps", "aos", "arts", "aces", "ents", "es", "ians", "ums", "arms", "rans", "ays", "angs", "eds", "posts", "ies", "asks", "yes", "vs", "ANS", "ots", "can", "ds", "nas", "ai", "uns", "offs", "anes", "ams", "n", "books", "ras", "ats", "ros", "anks", "an", "ks", "ants", "scan", "lan"], "i": ["io", "ini", "ei", "ri", "ion", "zi", "\u00ed", "m", "cli", "iq", "iii", "l", "y", "t", "ix", "iy", "ti", "s", "ip", "ci", "r", "ji", "gi", "v", "gu", "ij", "c", "index", "oi", "ki", "phi", "b", "yi", "ind", "id", "er", "di", "ik", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "iter", "x", "iti", "mi", "iu", "im", "ui", "ski"], "sum_rem": ["temp64res", "sum64im", "sum64rem", "temp_rem", "sumMemrm", "sum_pre", "temp64remove", "sum67rm", "sum_mem", " sum2remove", "sum64res", "num_res", "sum2remove", " sum2res", " sum_div", "num_rm", "sum2rem", "sum2rel", "num_rem", "sum2div", " sum2div", "sum2res", " sum_im", "sum64rm", "sum64Rem", "sumlenrem", " sum_rm", "sum67res", "sum_rel", "sum67div", " sum_pre", "sumMemrem", "sum_res", "sumMempre", "sum64remove", "num_mem", "temp64rel", "sum_div", " sum2rem", "sumlenremove", "sumMemres", "sum_Rem", "sum64rel", "temp_remove", " sum_res", "sumlenres", " sum_Rem", "sum_remove", "sum2Rem", "sum67rem", " sum_remove", " sum2Rem", "sum2rm", "sum_im", "sumlenRem", "temp_res", "temp_rel", "sum_rm", "sum2mem", "temp64rem", " sum2rm"], "ten": ["rent", "ens", "quist", "men", "text", "mon", "ter", "ta", "atten", "nine", "five", "tin", "two", "t", "nt", "second", "common", "number", "sequ", "teen", "den", "au", "div", "lett", "ren", "pent", "nu", "sen", "von", "mont", "tan", "six", "num", "te", "next", "fort", "orth", "cert", "mt", "zero", "padding", "aren", "three", "const", "wt", "integer", "half", "tr", "int", "float", "ven", "n", "Ten", "ts", "prime", "width"], "a": ["ba", "apa", "fa", "ae", "att", "another", "ja", "sta", "au", "xa", "ca", "A", "la", "at", "na", "ea", "era", "b", "aux", "area", "va", "alpha", "ao", "app", "oa", "aka", "sa", "ai", "aa", "aj", "ac", "ma", "ia", "ab", "aaa", "ana", "an"], "count": ["z", "ount", "rate", "add", "stat", "found", "sum", "report", "child", "comment", "counter", "score", "hold", "nt", "amount", "order", "number", "info", "result", "ch", "status", "history", "length", "c", "match", "index", "state", "group", "Count", "gc", "flag", "share", "ct", "nb", "code", "force", "ctx", "config", "num", "size", "process", "ctr", "consider", "cd", "const", "cache", "weight", "n", "table", "summary", "list", "cast", "data", "st"]}}
{"code": "n = int(input())\\nl = list(map(int, input().split()))\\n\\ni = 0\\nans = 0\\nwhile i < n:\\n    j = i\\n    while j < n-1 and l[j] >= l[j+1]:\\n        j += 1\\n    k = i\\n    while k < n-1 and l[k] <= l[k+1]:\\n        k += 1\\n    i = max(j, k) + 1\\n    ans += 1\\n    #print(j, k)\\n\\nprint(ans)", "target": "226", "substitutes": {"n": ["z", "nn", "nia", "names", "m", "a", "ni", "all", "nt", "t", "name", "number", "N", "fn", "ns", "mn", "r", "nm", "en", "un", "v", "na", "c", "sn", "q", "cn", "nu", "ct", "nb", "num", "d", "p", "network", "act", "ne", "none", "net", "np", "nan", "nc", "o", " N", "no", "nl", "non", "x", "after"], "l": ["z", "fl", "ol", "ld", "ls", "el", "le", "m", "lv", "lis", "kl", "r", "il", "lb", "la", "v", "ul", "sl", "lu", "ln", "b", "lc", "g", "tl", "lib", "acl", "ml", "dl", "p", "L", "lp", "pl", "hl", "lr", "li", "ql", "nl", "list", "rl", "ll"], "i": ["f", "io", "ini", "ei", "ri", "m", "a", "y", "t", "ti", "ci", "r", "ji", "v", "ij", "hi", "index", "ki", "q", "h", "g", "ami", "yi", "ie", "ik", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "I", "li", "u", "ia", "x", "mi", "iu", "init"], "ans": ["ens", "ls", "a", "xs", "iann", "s", "ins", "ms", "os", "aus", "ns", "mn", "ars", "ann", "ons", "anas", "outs", "aos", "arts", "ians", "angs", "yes", "ANS", "ots", "can", "ai", "span", "nan", "ams", "ats", "nl", "us", "ts", "anks", "an", "ks", "ants"], "j": ["z", "f", "obj", "ort", "jl", "pt", "pr", "ja", "y", "t", "ret", "jack", "fr", "jp", "ji", "res", "err", "v", "json", "ij", "index", "job", "b", "je", "g", "ind", "ijk", "d", "gov", "br", "oj", "kj", "col", "jas", "last", "it", "jj", "jump", "aj", "J", "ju", "bs", "uj", "dj", "o", "x", "bj", "js", "jc"], "k": ["z", "dk", "kg", "K", "mc", "m", "kr", "kt", "a", "uk", "kh", "ka", "y", "ck", "kl", "ikk", "s", "ok", "kk", "r", "mn", "ke", "kid", "key", "v", "kan", "c", "ket", "mk", "ki", "q", "g", "ak", "unk", "ijk", "wk", "ik", "p", "kok", "km", "kj", "ek", "kw", "tk", "o", "u", "sk", "ko", "ark", "ku", "ks"]}}
{"code": "K = int(input())\\nS = input()\\n\\nans = S\\n\\nif len(S) > K:\\n    ans = S[:K] + '...'\\n\\nprint(ans)", "target": "797", "substitutes": {"K": ["Y", "KA", "KN", "FK", "PK", "H", "C", "X", "F", "KK", "R", "SK", "G", "W", "Ka", "N", "M", "A", "k", "KR", "KI", "Mask", "KS", "E", "D", "UK", "L", "P", "Q", "Sk", "T", "J", "Z", "KEY", "V", "I", "B"], "S": ["Y", "str", "Just", "sv", "String", "BS", "SI", "Short", "Sl", "H", "C", "Si", "SS", "X", "Long", "F", "R", "SL", "Spe", "G", "SB", "SM", "s", "N", "M", "lower", "A", "Sing", "Inf", "So", "h", "ST", "Int", "O", "DS", "D", "SN", "NS", "Array", "SU", "L", "SP", "SQL", "P", "TS", "Q", "Str", "SH", "T", "short", "SF", "SE", "Z", "V", "I", "B", "SA", "Sign"], "ans": ["ens", "ls", "annot", "Ann", "aned", "AN", "ran", "anc", "pan", "cons", "amps", "s", "ms", "ins", "anas", "aus", "ns", "ons", "ann", " Ans", "aos", " sans", "arts", "beans", "ln", "rans", " means", "san", "there", "ANS", "Scan", "can", "An", "Cons", "uns", "helps", "Sk", "anes", "\u00e1n", "mean", "nan", "ams", "ads", "ras", "ats", "ros", "vals", "anks", "ana", "an", "ks", "ants"]}}
{"code": "import math\\n\\nN = int(input())\\n\\np = 1\\nfor i in range(2, N+1):\\n  p *= i\\n  p = p % (1000000000 + 7)\\n  \\nprint(p)\\n", "target": "204", "substitutes": {"N": ["Y", "K", "C", "Sn", "R", "Ni", "NB", "NI", "M", "NV", "NR", "A", "NP", "NA", "S", "NT", "D", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "n", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "p": ["ps", "f", "per", "pr", "pt", "ap", "m", "pad", "php", "a", "par", "rep", "l", "y", "t", "pkg", "pos", "pb", "pp", "jp", "tp", "r", "k", "press", "v", "sp", "pa", "c", "q", "h", "fp", "g", "post", "pd", "d", "power", "change", "j", "pi", "lp", "cp", "ping", "progress", "pl", "P", "np", "pc", "n", "dp", "o", "u", "print", "x", "pn", "pro", "pg"], "i": ["io", "ini", "zi", "m", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "r", "v", "ij", "c", "hi", "ki", "q", "phi", "b", "ind", "di", "ik", "j", "pi", "e", "it", "ii", "xi", "si", "n", "ic", "I", "li", "x", "mi", "iu"]}}
{"code": "K, X = map(int, input().split())\\nK *= 500\\nif K >= X:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")\\n", "target": "299", "substitutes": {"K": ["Y", "KA", "KN", "FK", "PK", "H", "C", "F", "KK", "R", "SK", "G", "Ak", "N", "M", "A", "k", "KB", "KR", "IK", "Kent", "KI", "KS", "S", "VK", "NK", "D", "KING", "UK", "P", "Q", "KE", "T", "J", "Z", "V", "I", "B", "KC", "MK", "AK"], "X": ["Y", "UX", "PK", "C", "XL", "F", "MX", "R", "W", "N", "M", "A", "AX", "OX", "U", "XXX", "S", "DX", "E", "EX", "Cross", "Xi", "L", "P", "Q", "T", "J", "XX", "Z", "V", "I", "B", "IX", "x", "TX", "XT"]}}
{"code": "import numpy as np\\nn,k = map(int,input().split())\\nh = np.array(list(map(int,input().split())))\\n\\nprint(len(h[k<=h]))", "target": "494", "substitutes": {"n": ["f", "nn", "io", "yn", "m", "ni", "l", "y", "t", "N", "ns", "v", "na", "c", "ng", "b", "ian", "g", "d", "j", "ne", "ry", "net", "np", "w", "x"], "k": ["dk", "K", "kat", "m", "kr", "kh", "uk", "ka", "ck", "kl", "ikk", "i", "kk", "ke", "kid", "v", "ket", "mk", "q", "ki", "kn", "unk", "ik", "p", "km", "j", "kj", "ek", "kw", "tk", "sk", "ko", "x", "ku", "ks"], "h": ["hat", "uh", "ph", "he", "H", "m", "html", "kh", "hex", "rh", "hm", "l", "t", "pp", "bh", "r", "ho", "history", "v", "hs", "c", "hi", "zh", "q", "hal", "hd", "ih", "p", "j", "ht", "oh", "hw", "om", "hl", "hr", "hang", "hh", "u", "dr", "sh", "head", "hash", "his", "hist", "hp"]}}
{"code": "s = list(input())\\nans = 0\\ncnta = 0\\nflagb = 0\\nflabc= 0\\nfor i in range(len(s)):\\n  if s[i]==\"A\":\\n    if flagb==0:\\n      cnta+=1\\n    else:\\n      cnta=1\\n      flagb=0\\n  if s[i]==\"B\":\\n    if flagb==0 and cnta:\\n      flagb=1\\n    else:\\n      flagb=0\\n      cnta=0\\n  if s[i]==\"C\":\\n    if flagb and cnta:\\n      ans+= cnta\\n      flagb=0\\n    else:\\n      cnta=0\\n      flagb=0\\nprint(ans)\\n", "target": "305", "substitutes": {"s": ["ps", "stats", "sts", "ths", "sv", "ws", "ls", "lines", "m", "a", "rates", "cs", "rs", "t", "gs", "ists", "os", "ins", "ms", "ns", "aus", "ports", "sw", "aps", "strings", "hs", "c", "gins", "h", "q", "b", "ers", "tests", "ies", "S", "ests", "ids", "p", "ains", "ss", "ds", "parts", "args", "sb", "its", "ims", "ses", "conf", "n", "abs", "sq", "tes", "ats", "ts", "qs", "js"], "ans": ["ens", "ls", "flags", "names", "AN", "ones", "cs", "rs", "cons", "amps", "xs", "os", "ags", "ins", "aus", "ns", "ons", "outs", "ann", "ars", "ms", "anas", "aps", "atts", "aos", "es", "ents", "ians", "angs", "aves", "eds", "ids", "vs", "ANS", "ds", "sets", "uns", "anes", "ads", "ces", "ats", "eas", "us", "anks", "an", "ks", "ants"], "cnta": ["lcnb", "cncan", "cctA", "mcntoa", "acntA", "cptsa", "mcntl", " cNTA", "cntoa", "cNToa", "cNTa", "cna", "mcontb", " cntba", "acNTi", "ccounta", "conta", " cpta", "cantb", "canta", "centa", "cnotba", "cncea", "Cctl", "mcntb", "CntA", "cNTl", "ctntf", "acNTb", "cntf", "cctoa", "cctp", "cptl", "cncA", "cNTf", "cndi", "cnuma", " cNTa", "cnce", "lcnto", "centA", "cnte", "cnotan", "contb", "cNTi", "cnumba", "ctenta", "ctntA", " cptsa", "cncsa", "acntb", "lcntea", " cntA", " cntsa", "lcnea", "lcntb", "cntba", "cotba", "cnotb", "cntsa", "cnca", "acNTa", "lcnta", "centb", "cnt_", "centf", "cncb", "cncp", "cNTo", "cnuman", "Cntl", "cotb", "ccountA", "CctA", "cntl", "ctntb", "cno", "Cnt_", "ctnta", "cnb", "lcno", "cpte", "cctl", "cnti", "mconta", "cotan", "cntea", "cNTp", "contoa", "acnta", " cotan", "mcontoa", "ctentA", "cnsa", " cnte", "cNTb", " cntb", "cnea", "cNTA", "cnco", "cnota", " cotba", " cntp", "ccta", "canti", "cntan", "cnda", "mcnta", "cctb", "cnan", "cne", "ctentf", "cantA", "cNTea", " cptan", "cndA", "acnti", "ctentb", "cnumb", " cota", "ccountl", "lcna", "mcontl", "cntb", " cotb", " cpte", "cntA", "cota", "cctf", " cNTp", "cpta", "cptA", "Cct_", "cct_", "Cnta", "acNTA", "cntp", "Ccta", " cntan", "cnto", "cptan", "ccount_", "contl", "cpt_", "cndb"], "flagb": ["anchba", "lagB", "Flagba", " flagbi", "storeb", "flagbs", "Flagb", "lagbi", "flagr", "flagc", "lagb", "taga", "flagba", "anchb", "tagbe", "commanda", "arga", "killb", "flagbi", "Flagr", "commandbs", " flagbs", "flagB", "storea", "childa", "FlagB", "argB", "tagB", "storeba", "storeB", "Flagbs", "tagb", "lagba", "flaga", "laga", " flagr", "ancha", "lagc", " flagbe", "lagbe", "killB", "flagbe", " flagc", "killbi", " flagB", "killa", "childba", "childr", " flagba", "argb", " flaga", "commandB", "Flaga", "childb", "anchr", "tagc", "commandb", "argba"], "flabc": ["slabs", "FLops", "flops", "FLabs", "sloyd", "flabs", "slg", "FLoyd", "flg", "clops", "cloyd", "clg", "FLg", "floyd", "clabs", "slops"], "i": ["io", "ini", "zi", "m", "y", "this", "name", "ix", "iy", "ti", "info", "key", "ip", "ci", "k", "ji", "\u0438", "gi", " j", "status", "ij", "c", "index", "oi", "q", "b", "ind", "id", " ii", "di", "j", "pi", "ai", "it", "ii", "iri", "uli", "xi", "si", "ic", "li", "I", "set", "me", "x", "on", "mi", "iu", "im", "ui"]}}
{"code": "N = int(input())\\n\\ndef f(n):\\n    print(n, flush = True)\\n    S = input()\\n    if S == 'Vacant':\\n        exit()\\n    return S\\n\\nl = 0\\nr = N\\nS = f(l)\\nfor i in range(20):\\n    mid = (l + r) // 2\\n    U = f(mid)\\n    len = mid - l + 1\\n    if (len % 2 == 0 and S != U) or (len % 2 and S == U):\\n        l = mid\\n        S = U\\n    else:\\n        r = mid\\n", "target": "344", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "X", "AN", "F", "R", "Ni", "G", "W", "M", "NR", "A", "Na", "Length", "NA", "Size", "E", "O", "NT", "D", "US", "NS", "L", "P", "Q", "UN", "T", "J", "Z", "V", "I", "B", "NC", "NO", "NN"], "n": ["z", "f", "nn", "m", "y", "nt", "t", "number", "nr", "s", "ns", "k", "v", "c", "ln", "sn", "b", "g", "nu", "nb", "num", "d", "p", "ne", "int", "nc", "o", "u", "x"], "S": ["Y", "SER", "Num", "String", "ls", "SI", " R", "Sl", "Si", "C", "H", "SS", "F", "Rs", "R", "SL", "SAN", "G", "W", "SB", " L", "LS", "SK", "JS", "s", " LS", "M", "A", "RS", "Id", "ST", "Size", "SR", "O", "E", "New", "D", "US", "NS", "SN", "SU", "L", "ss", " rs", "SP", "P", "Q", "_", "T", "SA", "SF", "SE", "Z", "Se", "V", "I", "rs", "B", "SC", " s", "Start", "Sel"], "l": ["z", "f", "ls", "le", "m", "t", " L", "s", "k", "lb", "v", "ul", "sl", "c", "lt", "long", "ln", "h", "start", "b", "lc", "g", "tl", "lo", "id", "ml", "d", "p", "dl", "L", "j", "lp", "e", "lr", "o", " sl", "li", "u", "w", "nl", "x", "rl", "ll"], "r": ["z", "f", "m", "rr", "sr", "R", "rs", "t", "nr", "s", "fr", "k", "v", "c", "h", "q", "b", "g", "rn", "id", "re", "d", "p", "rx", "j", "ro", "e", "lr", "right", "rt", "mr", "o", "u", "w", "rd", "dr", "rl"], "i": ["f", "y", "t", "ix", "ti", "by", "k", " j", "q", "ind", "id", " ii", "num", "p", "j", "e", "it", "li", "I", "x", "im"], "mid": ["uid", "rand", "sub", "max", "med", "mor", "min", "le", "line", "m", "sid", "range", "grid", "mit", "middle", "ms", "M", "dim", "mn", "nm", "res", "lim", "hi", "mk", "mask", "start", "lt", "nd", "lo", "mp", "val", "ind", "id", "orig", "mem", "Mid", "mult", "medium", "next", "man", "end", "mt", "int", "mat", "rid", "wid", "half", "mer", "tri", "mr", "pid", "mm", "mi", "mad"], "U": ["Unit", "UT", "SI", "H", "UP", "UL", "F", "R", "UC", "G", "OU", "M", "Us", "LU", "A", "ue", "CU", "UR", "O", "D", "US", "SU", "L", "EU", "UF", "GU", "UI", "P", "Q", "UN", "T", "V", "u", "UD", "I", "FU", "UE", "MU", "Lu", "UID"], "len": ["vec", "ld", "ls", "el", "le", "bl", "elt", "nt", "lis", "pos", "den", "en", "lim", "Len", "length", "sl", "long", "ln", "phi", "lc", "tl", "slice", "lib", "num", "mem", "size", "dl", "L", "lp", "pl", "lon", "hl", "wid", "LI", "fin", "loc", "gl", "ell", "li", "iter", "lf", "ll", "lan"]}}
{"code": "#!/usr/bin/env python3\\nfrom collections import deque, Counter\\nfrom heapq import heappop, heappush\\nfrom bisect import bisect_right\\n\\ndef main():\\n    N = int(input())\\n    C = [None] * N\\n    ans = 0\\n    for i in range(N):\\n        a, b = map(int, input().split())\\n        C[i] = a+b\\n        ans -= b\\n    C.sort(reverse=True)\\n    print(ans + sum(C[::2]))\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "794", "substitutes": {}}
{"code": "import numpy as np\\n\\nH, N = map(int, input().split())\\nA = []\\nB = []\\n\\nfor i in range(N):\\n  a, b = map(int, input().split())\\n  A.append(a)\\n  B.append(b)\\n  \\nA = np.array(A)\\nB = np.array(B)\\nDP = np.zeros(H + 1)\\n\\nfor i in range(1, H + 1):\\n  DP[i] = np.amin(DP[np.maximum(i - A, 0)] + B)\\n\\nprint(int(DP[-1]))\\n\\n", "target": "41", "substitutes": {"H": ["Y", "K", "He", "C", "X", "R", "HT", "W", "HI", "M", "HB", "HL", "Head", "High", "HH", "h", "TH", "MH", "Host", " h", "HC", "HA", "D", "HE", "DH", "Height", "P", "T", "J", "V", "I", "OH", "HS", "AH", "NH"], "N": ["Y", "Num", "K", "NE", "C", "X", "R", "Ni", "NB", "NI", "M", "NR", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "NM", "L", "TN", "No", "P", "T", "GN", "J", "n", "Z", "V", "I", "Ns", "NC", "NO", "NN", "NH"], "A": ["AR", "AA", "C", "RA", "API", "AC", "AN", "X", "IA", "G", "AV", "ACC", "ASC", "BA", "ABC", "CA", "LA", "AL", "TA", "M", "PA", "EA", "U", "Av", "NA", "S", "E", "As", "AU", "HA", "AT", "Array", "D", "Ax", "AF", "WA", "L", "GA", "An", "ICA", "ATA", "P", "AM", "AH", "This", "AS", "SA", "T", "AB", "AP", "V", "Alpha", "I", "AST", "AK", "AE"], "B": ["BE", "BB", "BS", "VB", "DB", "C", "EB", "Two", "RB", "OB", "G", "SB", "NB", "BO", "WB", "BA", "IB", "BC", "HB", "BI", "Bar", "GB", "Builder", "D", "MB", "L", "TB", "LB", "GO", "P", "BG", "FB", "PB", "J", "AB", "V", "BT", "I", "USB", "BER", "Bern", "BL", "CB", "BY", "BF", "BR", "Bs", "BP"], "i": ["z", "f", "ri", "zi", "m", "l", "y", "Ni", "ti", "ip", "jp", "k", "gi", "v", "ij", "c", "hi", "index", "h", "phi", "yi", "ind", "id", "asi", "di", "d", "p", "bi", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "iri", "I", "li", "u", "x", "mi", "iu", "II"], "a": ["ba", "el", "apa", "ae", "l", "sta", "ga", "au", "ed", "ca", "r", "la", "at", "ea", "g", "er", "ce", "alpha", "app", "act", "oa", "e", "ya", "sa", "ee", "aa", "ac", "ma", "ia", "ab", "aaa", "an", "aff"], "b": ["rb", "mb", "blue", "be", "l", "bc", "bp", "ed", "by", "cb", "fb", "ch", "db", "url", "g", "nb", "lib", "bi", "br", "j", "bin", "sb", "bis", "batch", "ob", "bs", "ab", "bb", "bar", "base", "eb"], "DP": ["DN", "GP", "DL", "PK", "PD", "DB", "VP", "DF", "DD", "DJ", "CP", "PA", "SCP", "NP", "DEP", "DA", "DX", "DT", "DS", "D", "WP", "DW", "TP", "PP", "DK", "DOM", "P", "DR", "FP", "STD", "DM", "PB", "dp", "AB", "UD", "PN", "LP", "HP", "DC", "DO", "BP"]}}
{"code": "N = int(input())\\nA = list(map(int,input().split()))\\nflag = True\\nans = 0\\nwhile flag:\\n    flag = False\\n    for j in range(N-1,0,-1):\\n        if A[j] < A[j-1]:\\n            A[j],A[j-1] = A[j-1],A[j]\\n            flag = True\\n            ans += 1\\nprint(*A)\\nprint(ans)\\n\\n", "target": "561", "substitutes": {"N": ["Num", "K", "C", "Sn", "Ni", "CNN", "NB", "NI", "M", "NR", "NP", "NA", "S", "ND", "Ne", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NN", "NH"], "A": ["AA", "X", "AC", "AN", "Abs", "CA", "AL", "U", "E", "As", "AF", "GA", "An", "Java", "This", "Map", "And", "AB", "Answer", "Ax", "AY", "API", "IA", "M", "What", "Av", "NA", "AU", "HA", "Array", "Ag", "P", "AM", "AH", "Ass", "He", "Ar", "Ab", "Alice", "AV", "Face", "All", "D", "WA", "L", "At", "mA", "MA", "AS", "Af", "V", "One", "ACT", "SA", "AE", "App", "H", "C", "Al", "a", "PA", "LA", "JA", "Save", "S", "AT", "Address", "ICA", "The", "AP", "I", "Alpha", "B"], "flag": ["bug", "type", "wait", "f", "done", "ld", "offset", "member", "ground", "load", "flags", "sync", "field", "only", "cond", "l", "all", "hold", "debug", "free", "result", "age", "status", "limit", "follow", "lock", "tag", "condition", "mask", "lag", "store", "group", "start", "loop", "used", "use", "ind", " Flag", "id", "stage", "cloud", "leaf", "command", "join", "FLAG", "bool", "weight", "fire", "no", "set", "print", "Flag", "agged", "list", "success", "count"], "ans": ["ens", "ars", "ls", "annot", "AN", "cs", "rs", "pan", "amps", "s", "ags", "anas", "ms", "aus", "ons", "ns", "outs", "ann", "ins", " Ans", "acs", "aps", "arts", "ents", "es", "ians", "rans", "posts", "ations", " means", "ids", "vs", "ANS", "can", "ds", "uns", "anes", "nan", "ams", "n", " spans", "ads", "ats", "aints", "ts", "os", "an", "ks", "ants", "anks"], "j": ["z", "f", "gm", "str", "adj", "obj", "jl", "pt", "pr", "m", "a", "ja", "jit", "l", "ret", "ix", "note", "fr", "i", "key", "jp", "k", "ji", "r", "err", "v", "sp", "json", "at", "ij", "opt", "kid", "state", "job", "q", "b", "h", "jac", "ind", "p", "exp", "br", "kj", "it", "jj", "jump", "aj", "J", "n", "uj", "dj", "li", "x", "bj", "js", "jc"]}}
{"code": "#n=int(input())\\nh,w=map(int,input().split())\\n#l=list(map(int,input().split()))\\nl=[list(input()) for i in range(h)]\\n\\n# \u307e\u305a\u306f\u884c\u306b\u3064\u3044\u3066\u78ba\u8a8d\u3059\u308b\\nrow_compare=['.' for i in range(w)]\\nsave_rows=[]\\nfor row in range(h):\\n    if not l[row]==row_compare:\\n        save_rows.append(row)\\n\\nnewl=[l[row] for row in save_rows]\\n\\nh=len(newl)\\n#\u6b21\u306f\u5217\\nsave_col=[]\\ncol_compare=[\".\" for i in range(h)]\\nfor col in range(w):\\n    temp=[]\\n    for row in range(h):\\n        temp.append(newl[row][col])\\n    if not temp==col_compare:\\n        save_col.append(col)\\n\\nansl=[]\\nfor row in range(h):\\n    temp=[]\\n    for col in range(w):\\n        if col in save_col:\\n            temp.append(newl[row][col])\\n    ansl.append(temp)\\n\\nfor row in ansl:\\n    print(*row,sep=\"\")", "target": "413", "substitutes": {}}
{"code": "s = input()\\nt = input()\\n \\nflag = True\\nfor i in range(len(s)):\\n  if s[i] != t[i]:\\n    flag = False\\nif flag == True:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")\\n", "target": "472", "substitutes": {"s": ["z", "f", "sts", "str", "ps", "sv", "ws", "ls", "fs", "a", "l", "rs", "cs", "gs", "xs", "se", "ins", "os", "ms", "ns", "sw", "v", "sp", "strings", "hs", "c", "h", "q", "b", "S", "d", "p", "ains", "ss", "ds", "parts", "its", "ses", "n", "abs", "bs", "ats", "als", "x", "ts", "qs", "js"], "t": ["f", "str", "out", "tmp", "pt", "tm", "m", "ta", "y", "tt", "r", "dt", "ty", "v", "c", "term", "ot", "q", "g", "ct", "test", "te", "p", "bt", "j", "e", "it", "wt", "mat", "vt", "T", "txt", "tr", "n", "tc", "o", "ts", "rt", "st"], "flag": ["bug", "f", "wait", "style", "ld", "level", "ground", "sync", "flags", "field", "cond", "stay", "l", "lv", "ret", "af", "bird", "age", "status", "band", "lock", "tag", "true", "long", "mask", "lag", "state", "group", "g", "bit", "cmd", "d", "do", "cloud", "command", "func", "nil", "FLAG", "bool", "land", "fire", "log", "set", "Flag", "agged", "arg", "nl", "list", "safety", "count", "fd"], "i": ["ini", "zi", "\u00ed", "m", "y", "ix", "iy", "ti", "key", "ip", "r", "k", "ji", "ci", "\u0438", "gi", "ij", "ori", "index", "q", "yi", "ind", "id", "di", "p", "j", "pi", "qi", "ai", "it", "ii", "batch", "si", "iri", "xi", "I", "li", "iter", "set", "us", "me", "x", "mi", "im"]}}
{"code": "N, K = [int(_c) for _c in input().split(\" \")]\\nS_orig = input()\\npoint_list = []\\nfor target, non_target in zip([\"L\", \"R\"], [\"R\", \"L\"]):\\n    S = list(S_orig)\\n\\n    start_idx_list = []\\n    before_char = None\\n    for i, c in enumerate(S):\\n        if i == 0:\\n            start_idx_list.append(i)\\n            before_char = c\\n        else:\\n            if before_char == non_target and c == target:\\n                start_idx_list.append(i)\\n            before_char = c\\n    start_idx_list.append(len(start_idx_list) - 1)\\n    if len(start_idx_list) - 1 <= K:\\n        point_list.append(len(S) - 1)\\n        continue\\n\\n    longest = 0\\n    start_idx = -1\\n    end_idx = -1\\n    for i in range(len(start_idx_list) - K):\\n        cur_length = start_idx_list[i + K] - start_idx_list[i] + 1\\n        if cur_length > longest:\\n            start_idx = start_idx_list[i]\\n            end_idx = start_idx_list[i + K]\\n            longest = cur_length\\n\\n    for _idx in range(start_idx, end_idx):\\n        S[_idx] = target\\n    S = [\"N\"] + S + [\"N\"]\\n\\n    point = 0\\n    for idx in range(1, N + 1):\\n        if S[idx] == \"L\":\\n            if S[idx + 1] == \"L\":\\n                point += 1\\n        if S[idx] == \"R\":\\n            if S[idx - 1] == \"R\":\\n                point += 1\\n\\n    point_list.append(point)\\n\\nprint(max(point_list))", "target": "164", "substitutes": {"N": ["H", "C", "X", "R", "Ni", "G", "NB", "NI", "M", "NV", "NR", "MN", "NP", "NA", "Size", "ND", "NT", "D", "NS", "L", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NN"], "K": ["Y", "HK", "KA", "KN", "FK", "PK", "H", "C", "X", "F", "KK", "R", "SK", "G", "NB", "Han", "M", "A", "k", "KB", "KR", "MC", "Kent", "KI", "NP", "KS", "Mask", "TH", "OK", "O", "VK", "NK", "KING", "D", "UK", "Key", "L", "TN", "P", "Q", "KE", "T", "J", "Z", "KEY", "V", "I", "B", "KC"], "_c": ["_cs", "_col", " _cs", "vali", "_r", "valcol", "_i", " _char", "valc", "valr", " _cf", "_char", "_cf"], "S_orig": ["N_Orig", "N_original", "S___Orig", "S_Orig", "S___cap", "S___original", "S_original", "T_loc", "N_temp", "S___orig", "T_cap", "N_orig", "S_cap", "S___temp", "T_Orig", "S_loc", "S_temp", "S___loc", "T_orig"], "point_list": ["point67pair", "point_block", "pointLogpool", "point67list", " point_List", "pointingList", "reset_pair", "point_string", "pointLogvector", "point1vector", "point_pool", "function_string", "reset67list", "reset_info", "point2List", "functionLogarray", "point2list", "point_set", "point1block", "pointLogarray", "pointLogstring", "point__list", "point1list", " point_block", "point_info", "function_list", " point_set", "pointLoglist", "point6list", "function_pool", "reset_path", " point1chain", "point6string", "point_path", "point__info", "pointlychain", "point2detail", "pointLogblock", "function_array", "pointlyblock", "pointingdetail", "point_detail", "pointinglist", "functionLogstring", "point67path", "point_array", "point1chain", "point__pair", "reset67info", " point1vector", " point_detail", "pointlyvector", "point_chain", "point6pool", " point_vector", "point_vector", "point2set", "point_pair", "reset67path", "point6array", " point_chain", " point1list", "reset_list", "functionLogpool", " point1block", "pointlylist", "pointLogchain", "point67info", "reset67pair", "pointingset", "functionLoglist", "point_List", "point__path"], "target": ["type", "pointer", "C", "cat", "field", "ARGET", "Target", "node", "cut", "arget", "t", "nt", "name", "to", "result", "key", "output", "k", "ch", "value", "buffer", "v", "length", "match", "index", "mask", "term", "gt", "b", "g", "string", "source", "character", "reference", "inter", "char", "p", "nil", "null", "self", "it", "int", "current", "T", "n", "table", "set", "stop", "arg", "link", "vector", "category"], "non_target": ["not_target", "Non_arget", "non_match", "not_char", "Non_match", "Non_Target", "nonnontarget", "non_arget", "nonnonchar", "Non_target", "nonnonarget", "non_char", "non_Target", "not_arget", "nonnettarget", "nonnetarget", "nonnetchar"], "S": ["Y", "Sample", "BS", "String", "SI", "Si", "C", "H", "SS", "X", "Target", "WS", "R", "SL", "G", "JS", "SB", "PS", "LS", "s", "M", "SOURCE", "OS", "A", "Abs", "RS", "Bs", "Windows", "IS", "SR", "E", "O", "DS", "Series", "D", "SAM", "NS", "US", "SU", "SO", "L", "SP", "P", "TS", "ES", "Q", "SH", "MS", "T", "SF", "AS", "SE", "Z", "V", "VS", "I", "B", "CS", "GS", "RAW", "Screen", "SSL", "SA", "States", "Set", "SQL"], "start_idx_list": ["start_idz_no", "start_idxc_def", "start_idxxlist", "start_idzxlist", "start_idn2List", "start_idn_List", "start_idco_List", "start_idz_dict", "start_idx_str", "start_idn2list", "start_idex_list", "start_idn_LIST", "start_idx_set", "start_idn2LIST", "start_idx_info", "start_idct_list", "start_idx_lists", "start_idct_List", "start_idz_list", "start_idzxno", "start_idxs_List", "start_idn_list", "start_idxs_set", "start_idx_LIST", "start_idx2set", "start_idxs_list", "start_idx2List", "start_idxc_list", "start_idx_no", "start_idxs_dict", "start_idx_List", "start_idex_List", "start_idx2list", "start_idxxdict", "start_idx2LIST", "start_idxs_info", "start_idx2dict", "start_idco_list", "start_idx_map", "start_idct_set", "start_idzxdict", "start_idct_dict", "start_idx_def", "start_idxc_str", "start_idxxno", "start_idx2info", "start_idx_dict", "start_idex_lists", "start_idex_LIST", "start_idxs_lists", "start_idco_map"], "before_char": ["after_string", "before_car", "before_CHAR", "after_character", "after_char", "after_byte", "Before_char", "after_ch", "before_string", "before_character", "before_ch", "after_CHAR", "Before_ch", "after_car", "before_byte", "Before_character", "Before_car"], "i": ["f", "ini", "ei", "zi", "m", "a", "l", "y", "t", "name", "ix", "iy", "ti", "info", "ip", "ci", "\u0438", "k", "ji", "v", "gi", "ij", "ori", "index", "ki", "h", "b", "phi", "g", "ie", "ind", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "iri", "si", "xi", "ic", "li", "I", "iter", "ia", "x", "ui", "mi", "iu", "im"], "c": ["z", "f", "cod", "mc", "m", "C", "cat", "cr", "cut", "cs", "l", "t", "y", "cf", "con", "ci", "ca", "cb", "r", "ch", "k", "cin", "v", "rc", "co", "h", "arc", "b", "lc", "cc", "ct", "ce", "\u00e7", "cos", "cur", "char", "can", "p", "col", "cp", "com", "xc", "e", "it", "n", "tc", "ic", "u", "cm"], "longest": ["longgest", "elongest", "Longlargest", "shortmax", " longlargest", "longlargest", " longmax", "Longgest", "shortEST", "Longest", "Longested", "longmax", "elonggest", " longested", "shortgest", "elongested", "longested", "Longmax", "shortlargest", "LongEST", "shortested", "longEST", " longgest", "elongEST", "shortest"], "start_idx": ["start_ridw", "start_idy", "start_ideex", "start_indxc", "start_Idex", "start_idew", "start_indx", "start_midex", "start_idxs", "start_idxc", "start_ilxi", "start_idsxs", "start_midx", "start_idsx", "start_ridxc", "start_ilx", "start_ridy", "start_Idxi", "start_idsex", "start_idexi", "start_idexc", "start_idxi", "start_idz", "start_midxs", "start_indw", "start_Idx", "start_ilex", "start_idix", "start_idw", "start_ridx", "start_ilz", "start_idsix", "start_indy", "start_Idz", "start_idex", "start_idez", "start_midix", "start_idey"], "end_idx": ["end_index", "end_idix", "end_ridy", "end_Idex", "end_IDex", "end_Idx", "end_Idix", "end_indx", "end_idz", "end_idy", "end_ridp", "end_IDx", "end_iddx", "end_Idy", "end_indy", "end_IDz", "end_IDix", "end_idp", "end_ridex", "end_Idp", "end_inddx", "end_ridx", "end_Idz", "end_Iddx", "end_idex"], "cur_length": ["cur2Length", "Cur_text", "Cur_value", "current_length", "cur_text", "cur_value", "cur_long", "current_Length", "cur2len", "current_long", "cur_Length", "current_len", "cur_len", "Cur_len", "cur2length", "Cur_length"], "_idx": ["_Idx", "_ridix", "_ridxc", "_idexc", "_Idxc", "_uidxes", "_Idz", " _idez", "_idez", " _idexc", "_ridz", "_ideix", "_uidx", "_ridx", "_idex", "_Idix", " _idxc", "_uidxc", "_idix", "_Idxes", " _idz", "_uidz", " _idex", "_idxc", " _ideix", "_idz", "_idxes", " _idix"], "point": ["function", "out", "pt", "line", "pointer", "pad", "draw", "chain", "number", "to", "close", "Point", "result", "back", "step", "key", "channel", "value", "points", "check", "tag", "bound", "index", "long", "oint", "post", "group", "start", "pair", "position", "page", "val", "inter", "p", "volume", "command", "window", "end", "frame", "word", "feature", "zone", "stroke", "int", "block", "mark", "art", "table", "instance", "part", "set", "print", "stop", "x", "dot", "vector"], "idx": ["adx", "likeg", " idxf", "Idx", "idz", "idwx", "idmx", "idexc", "idxe", "Idxs", " idxc", "adz", "IDxf", "pidx", "likex", "Idxe", "idxs", "IDxs", "idxf", "idg", "Idz", " idwx", " idxs", "adxf", "IDmx", "idexe", "pidxf", "bugx", "bugwx", "bugxf", "adxs", "IDx", "pidxe", "bugxe", "Idxf", "Idv", " idxe", " idz", " idg", "idxc", "Idxc", "IDv", "IDg", " idmx", " idv", "pidwx", "likexf", "idexf", "idex", "likemx", "idv"]}}
{"code": "s = list(input())\\nans = 0\\ncnt_w = 0\\nfor i, ss in enumerate(s):\\n    if ss == 'W':\\n        ans += i - cnt_w\\n        cnt_w += 1\\n\\nprint(ans)        \\n", "target": "587", "substitutes": {"s": ["ps", "sts", "sv", "ls", "m", "a", "sis", "l", "rs", "t", "gs", "ms", "ins", "ns", "r", "input", "strings", "sl", "c", "q", "b", "S", "p", "ds", "parts", "sa", "its", "ses", "n", "w", "sq", "ats", "ts"], "ans": ["ens", "wan", "sv", "ws", "aned", "mas", "AN", "oss", "ran", "cs", "rs", "pan", "amps", "os", "anas", "ms", "aus", "ns", "ons", "ins", "ann", "outs", " Ans", "news", "acs", "aos", "arts", "es", "ents", "asks", "rans", "ays", "eds", "ANS", "anus", "ds", "nas", "ai", "offs", "gn", "anes", "ams", "ads", "ras", "ats", "eas", "us", "ros", "anks", "an", "ants", "lan"], "cnt_w": ["cnt__W", "cct2s", "cnt_W", "cnt__s", "cnd_w", "cnd_r", "cnd_W", "cnt2r", "cnt_r", "cct_s", "cct2w", "cnt2W", "cct_w", "cnd_ws", "cct_W", "cct2W", "cct_ws", "cnt2ws", "cct_r", "cnt2w", "cnt_ws", "cnt__w", "cnt__r", "cnt_s", "cnt2s", "cct2r"], "i": ["z", "ini", "ri", "zi", "m", "a", "ix", "iy", "ti", "ci", "v", "ij", "c", "hi", "b", "phi", "yi", "ind", "di", "p", "bi", "j", "pi", "ai", "int", "ii", "xi", "si", "n", "ic", "I", "li", "mi", "iu"], "ss": ["ress", "ps", "sts", "sv", "ws", "sc", "SS", "sis", "cs", "rs", "ese", "uses", "sex", "sy", "ns", "sch", "ssl", "sd", "mes", " iss", "sn", "ass", "css", "rss", "test", "ross", " SS", "vs", "ess", "hess", "ness", "\u00df", "sf", "si", "bs", "sq", "iss", "sk", "ats", "sat", "ts"]}}
{"code": "#abcdef\\n#a*b,a*c,a*d,a*e,a*f\\n#b*c,b*d,b*e,b*f\\n#c*d,c*e,c*f\\n#d*e,d*f\\n#e*f\\n\\nn = int(input())\\nl = list(map(int,input().split()))\\n\\nmod = 10**9 + 7\\nall_l = 0\\nfor i in range(n):\\n    all_l += l[i]\\n    all_l %= mod\\n\\nans = 0\\nfor i in range(n-1):\\n    all_l = (all_l-l[i])%mod\\n    ans += (l[i]*all_l)%mod\\n    ans %= mod\\n\\nprint(ans)\\n", "target": "198", "substitutes": {}}
{"code": "import sys\\ndef rs(): return sys.stdin.readline().rstrip()\\ndef ri(): return int(sys.stdin.readline())\\ndef ria(): return list(map(int, sys.stdin.readline().split()))\\ndef ws(s): sys.stdout.write(s); sys.stdout.write('\\n')\\ndef wi(n): sys.stdout.write(str(n)); sys.stdout.write('\\n')\\ndef wia(a, sep=' '): sys.stdout.write(sep.join([str(x) for x in a])); sys.stdout.write('\\n')\\n\\n\\ndef main():\\n    n = ri()\\n    x = rs()\\n\\n    k = int(x, 2)\\n    d = x.count('1')\\n    \\n    if d > 1:\\n        k0 = k % (d-1)\\n    k1 = k % (d+1)\\n\\n    f = [0] * (n + 1)\\n    for i in range(1, n+1):\\n        f[i] = f[i % bin(i).count('1')] + 1\\n\\n    for i in range(n):\\n        cnt = 0\\n        if x[i] == '1' and d - 1 > 0:\\n            cnt += f[(k0 - pow(2, n - i - 1, d - 1)) % (d - 1)] + 1\\n        elif x[i] == '0':\\n            cnt += f[(k1 + pow(2, n - i - 1, d + 1)) % (d + 1)] + 1\\n        wi(cnt)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "690", "substitutes": {"s": ["ps", "sys", "str", "ws", "sv", "ls", "sql", "se", "rs", "y", "gs", "t", "ins", "ns", "r", "single", "sp", "c", "h", "b", "S", "string", "p", "ss", "sb", "its", "sq", "w", "st", "ts", "qs", "js"], "n": ["z", "nn", "out", "names", "m", "ni", "l", "y", "nt", "t", "number", "name", "note", "nr", "N", "fn", "ns", "r", "mn", "un", "v", "na", "c", "ng", "sn", "ln", "an", "nd", "g", "ot", "cn", "nu", "nb", "num", "size", "p", "dn", "j", "ne", "net", "int", "gn", "np", "nan", "nc", "o", " N", "w", "u", "no", "non", "on", "new"], "a": ["ba", "ae", "ta", "y", "all", "t", "ha", "to", "au", "xa", "A", "ca", "at", "la", "na", "c", "aw", "ea", "b", "aux", "area", "p", "oa", "parts", "e", "ai", "sa", "ata", "aa", "ac", "ma", "w", "ia", "ab", "eas", "aaa", "an"], "sep": ["seps", "speper", "speg", "seg", "sexpen", " seps", "spep", "seper", " seep", " sepen", "sexep", "speps", " seg", "separp", " seper", "separps", "separper", "separep", "seep", "speep", "sexp", "sexg", "sepen", "spepen"], "x": ["z", " dx", "yx", "xes", "xp", "X", "hex", "ux", "xy", "y", "t", "ix", "xs", "xa", "xx", "ax", "xb", "rax", "key", "r", "v", "xml", "nex", "xt", "dx", "wx", "c", "h", "mx", "ex", "ct", "fx", "config", "p", "rx", "xc", " xx", "e", "ox", "xe", "xxxx", "xi", "lex", "ic", "px", "w", "xf", " cx", "xd", "tx", "inx"], "k": ["gam", "ilk", "K", "m", "kh", "uk", "ck", "kl", "ikk", "ok", "kk", "sch", "ke", "r", "kick", "kar", "c", "mk", "ki", "q", "h", "g", "ak", "work", "ijk", "wk", "ik", "p", "km", "ek", "kw", "tk", "w", "sk", "ko", "ku", "ks", "rek"], "d": ["z", "done", "diff", "ld", "date", "ord", "l", "all", "t", "name", "debug", "dos", "dict", "did", "to", "dd", "days", "dim", "r", "dt", "div", "db", "v", "sd", "dx", "c", "dq", "q", "b", "dis", "g", "mod", "id", "D", "di", "dm", "du", "de", "p", "dn", "da", "pd", "do", "ds", "td", "dom", "dc", "default", "dh", "ad", "o", "rd", "w", "dec", "dra", "dr", "dot", "data", "md", "new", "dat", "fd"], "k0": ["kw0", "key2", " k2", "key5", "p0", "k2", "kw5", "k25", "p1", "p00", "ik25", "key1", "key0", " k5", "p25", "kw2", " k00", "ik00", "k5", "ik0", "ik1", "k00", " k25", "kw1"], "k1": ["k001", "k01", "tk4", "root4", "tk01", " k4", "k4", "tk0", "root1", " k01", "kk0", "kk1", "kk4", "root001", "tk1", " k001", "kk01", "root0", "tk001"], "f": ["fl", "fa", "m", "fs", "F", "fe", "df", "fg", "l", "y", "t", "full", "cf", "fr", "fab", "fb", "r", "v", "alf", "c", "h", "fo", "b", "fp", "g", "fed", "rf", "p", "fi", "bf", "e", "uf", "fw", "fc", "o", "w", "u", "xf", "fm", "fd"], "i": ["z", "ini", "ei", "zi", "m", "cli", "iii", "l", "y", "t", "ite", "ix", "ti", "info", "ip", "ci", "\u0438", "ji", "gi", "v", "ij", "c", "hi", "index", "oi", "h", "ki", "phi", "b", "like", "yi", "id", "di", "ik", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "iri", "u", "ui", "mi", "iu", "im", "item"], "cnt": ["pst", "rNT", "cst", "acount", "cunt", "rrt", "dounter", "cuNT", "dNT", "Cpt", "lcct", "counter", "crt", "acnt", "pNT", "cuust", "rnt", "CNT", "acct", "cCt", "icnt", "rst", " cpt", "cNT", "icct", "Cct", "lcNT", "Cnt", "acCt", "cpt", "cust", "prt", "cuounter", "lcnt", " cCt", "icount", " cst", " count", " cNT", "dust", " crt", " counter", "lcpt", " cust", "icCt", "cct", " cct", "pnt", "count", "dnt"]}}
{"code": "import sys\\na,b=map(int, input().split())\\ns=[a,b,a+b]\\nfor si in s:\\n  if si%3==0:\\n    print('Possible')\\n    sys.exit()\\n\\nprint('Impossible')\\n", "target": "635", "substitutes": {"a": ["f", "ba", "m", "ae", "l", "y", "t", "sta", "au", "ga", "xa", "i", "A", "r", "ca", "la", "v", "na", "c", "ea", "era", "d", "p", "da", "alpha", "oa", "e", "sa", "aa", "al", "ac", "ma", "w", "u", " A", "ab", "aaa", "x", "an"], "b": ["z", "f", "rb", "ba", "ib", "m", "another", "be", "l", "y", "t", "bc", "i", "cb", "fb", "r", "v", "db", "c", "h", "g", "nb", "d", "p", "bi", "e", "sb", "bis", "n", "ob", "bs", "B", "ab", "bb", "bar", "base", "eb"], "s": ["z", "ps", "sys", "ws", "ls", "events", "views", "times", "m", "fs", "rs", "t", "gs", "xs", "ins", "ms", "i", "ns", "strings", "v", "c", "tests", "S", "csv", "d", "p", "ss", "ds", "parts", "aws", "args", "e", "sb", "ims", "ses", "n", "abs", "bs", "ats", "ts"], "si": ["ini", "sv", "iso", "SI", "ri", "zi", "Si", "ta", "sis", " sidx", "sci", "su", "sie", "ti", "sta", "sy", "i", "ci", " psi", " SI", "ati", "sd", " ni", "esi", "yi", "sim", " Si", "di", "bi", "sic", "sam", "sa", "sf", "ai", "sb", " sd", "ii", "xi", "li", "ui", "mi"]}}
{"code": "x = lambda: int(input())\\nprint(((x()+x())*x())//2)", "target": "319", "substitutes": {"x": ["z", "f", "xes", "m", "X", "xy", "l", "y", "t", "xs", "s", "xa", "xx", "input", "v", "check", "hello", "dx", "wx", "c", "h", "b", "mx", "foo", "ex", "test", "ctx", "d", "power", "p", "rx", "xc", " xx", "e", "ox", "xe", "mix", "int", " y", "xi", "n", "w", "print", "xf", "xd", "tx"]}}
{"code": "string = input()\\n \\nif string[-1] != 's':\\n  new_string = string[0:] + 's'\\nif string[-1] == 's':\\n  new_string = string[0:] +'es'\\n \\nprint(new_string)", "target": "746", "substitutes": {"string": ["partial", "str", "escape", "function", "String", "dump", "stream", "message", "array", "text", "comment", "sql", "chain", "section", "old", "number", "case", "append", "s", "format", "result", "switch", "buffer", "input", "strings", "length", "true", "long", "store", "state", "group", "pair", "foo", "complete", "source", "test", "force", "san", "char", "ring", "command", "null", "port", "resource", "word", "object", "sound", "file", "parse", "ident", "past", "integer", "int", "component", "short", "strip", "phrase", "sequence", "part", "print", "filename", "ment", "list", "space", "prefix", "data", "new", "description"], "new_string": ["newfulnumber", "newreshnumber", " new_san", "new_object", "new_section", " new_object", "newingfilename", " new_expression", "newingstrings", "newingprefix", "new_san", " new_strings", "newmatarray", "new_filename", " new_section", "new_prefix", "newfulsan", "newreshexpression", "newreshsan", "newmatsection", "new_array", "newmatstring", "newreshstring", "new_strings", "newfulstring", "newingstring", " new_prefix", " new_array", "newfulexpression", " new_number", " new_filename", "new_number", "newmatobject", "new_expression"]}}
{"code": "N = int(input())\\nprint(N // 2 - 1 + (N % 2))\\n", "target": "522", "substitutes": {"N": ["DN", "K", "H", "C", "X", "F", "R", "G", "Ni", "CNN", "NB", "NI", "NG", "M", "NV", "NR", "A", "MN", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "Q", "T", "GN", "J", "Z", "n", "V", "I", "B", "Ns", "NC", "NUM", "NN"]}}
{"code": "D,N=map(int,input().split())\\n\\nB=100**D\\nI=0\\nA=0\\nwhile I<N:\\n    A+=B\\n    if (A//B)%100:\\n        I+=1\\nprint(A)\\n", "target": "781", "substitutes": {"D": ["DN", "Y", "K", "DB", "C", "X", "F", "R", "Do", "DF", "G", "DD", "M", "Ds", "Size", "S", "E", "O", "DS", "d", "L", "P", "Q", "T", "DP", "Z", "V", "DE", "DI"], "N": ["Num", "K", "C", "NF", "F", "R", "Ni", "W", "NB", "NI", "M", "NV", "NR", "MN", "Len", "NP", "NA", "S", "ND", "NT", "SN", "NS", "FN", "L", "NM", "P", "Q", "T", "J", "n", "V", "Ns", "NC", "NN"], "B": ["Y", "BB", "DB", "H", "C", "X", "EB", "F", "RB", "R", "G", "SB", "NB", "BO", "M", "BA", "IB", "BC", "WB", "BI", "U", "b", "S", "E", "O", "L", "TB", "LB", "P", "T", "J", "AB", "Z", "V", "CB", "BF", "Bs"], "I": ["K", "He", "AI", "SI", "IP", "Si", "H", "X", " i", "F", "R", "IA", "G", "NI", "Index", "i", "M", "HI", "MI", "IG", "BI", "KI", "U", "Int", "S", "E", "O", "Xi", "Is", "GI", "L", "P", "My", "Im", "TI", "This", "IL", "You", "T", "J", "V", "One", "We", "PI", "IX", "It", "II", "DI"], "A": ["App", "AY", "AR", "AI", "AA", "Arm", "H", "API", "AC", "a", "F", "R", "IA", "G", "M", "Abs", "BA", "CA", "LA", "AL", "EA", "Bar", "U", "JA", "NA", "S", "E", "New", "As", "HA", "Array", "All", "Ah", "AF", "L", "GA", "An", "At", "P", "This", "AH", "You", "And", "AS", "SA", "The", "AB", "AP", "V", "One", "Alpha", "ACT", "Start", "AE"]}}
{"code": "def main():\\n    import sys\\n    input = sys.stdin.buffer.readline\\n    H, W, D = (int(i) for i in input().split())\\n    A = [[int(i) for i in input().split()] for j in range(H)]\\n    Q = int(input())\\n    LR = [[int(i) for i in input().split()] for j in range(Q)]\\n\\n    B = [0]*(H*W+1)\\n    pos = {A[i][j]: (i+1, j+1) for i in range(H) for j in range(W)}\\n\\n    for i in range(D+1, H*W+1):\\n        y, x = pos[i - D]\\n        ny, nx = pos[i]\\n        power = abs(nx - x) + abs(ny - y)\\n        B[i] = B[i - D] + power\\n\\n    for le, ri in LR:\\n        print(B[ri] - B[le])\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "254", "substitutes": {"input": ["f", "active", "str", "out", "connect", "util", "cat", "reset", " Input", "shift", "format", "channel", "raw", "fn", "output", "cin", "r", "request", "point", "url", "enter", "pull", "socket", "index", "q", "unit", "val", "Input", "string", "select", "ref", "cmd", "context", "config", "hidden", "read", "view", "p", "image", "command", "next", "pattern", "join", "frame", "get", "client", "inc", "it", "int", "txt", "conf", "focus", "table", "first", "w", "feed", "print", "set", "lat", "arg", "list", "qq", "prefix", "data", "PUT", "proc", "text", "init"], "H": ["Y", "HK", "HO", "He", "C", "X", "HT", "R", "G", "HI", "N", "M", "HB", "HL", "High", "HD", "U", "HH", "h", "TH", "MH", "GH", "His", "HC", "HA", "HE", "DH", "L", "HR", "P", "T", "J", "I", "OH", "HTTP", "HS", "NH"], "W": ["Y", "X", "Width", "WD", "R", "WW", "WT", "N", "M", "WR", "WE", "WAR", "Tw", "WM", "Wa", "NW", "SW", "WP", "WC", "L", "DW", "WA", "Win", "FW", "VW", "CW", "J", "V", "w", "BW", "Window", "We", "EW", "WH", "MW", "Web", "Wh"], "D": ["Y", "DN", "DL", "DB", "C", "X", "WD", "R", "Do", "DF", "G", "DD", "N", "M", "Ds", "DA", "CD", "S", "DX", "E", "DT", "DS", "Dir", "d", "DH", "L", "DW", "P", "DR", "DM", "T", "DP", "J", "Z", "V", "I", "DE", "DC", "DO", "DI"], "i": ["ini", "ci", "ji", "v", "adi", "hi", "h", "q", "di", "ai", "xi", "iri", "li", "ia", "iti", "ui", "iu", "z", "io", "ib", "zi", "\u00ed", "cli", "m", "t", "ti", "info", "ati", "index", "ki", "phi", "asi", "bi", "qi", "n", "o", "im", "str", "uri", "iii", "l", "ix", "\u0438", "k", "ij", "c", "oi", "b", "ie", "ik", "p", "fi", "e", "ii", "ic", "ski", "a", "ip", "gi", "ami", "yi", "id", "d", "pi", "it", "int", "si", "I", "u", "mi", "init"], "A": ["AR", "AI", "AA", "RA", "AC", "Al", "a", "R", "G", "AV", "ACC", "N", "M", "BA", "ABC", "AL", "LA", "EA", "U", "JA", "S", "As", "HA", "AT", "AF", "L", "GA", "An", "P", "AD", "AM", "AH", "AB", "AP", "V", "I", "Alpha", "Ax", "SA"], "j": ["z", "f", "obj", "zi", "ir", "iaz", "ja", "a", "l", "t", "key", "ci", "jp", "k", "ji", "r", "ang", "v", "gi", "json", "ij", "c", "job", "q", "b", "g", "ie", "ind", "di", "ik", "d", "p", "bi", "oj", "jo", "kj", "ai", "it", "jj", "aj", "J", "n", "ju", "o", "li", "uj", "dj", "im", "bj", "js", "jc"], "Q": ["Y", "QU", "K", "MQ", "C", "X", "F", "R", "LE", "G", "Query", "N", "M", "U", "q", "S", "E", "L", "QB", "P", "T", "J", "Z", "V", "I", "Qu", "UE", "Que", "IQ"], "LR": ["RR", "LV", "DL", "RB", "Rs", "R", "LE", "LS", "NB", "MT", "CR", "LM", "MR", "LT", "RI", "LG", "NR", "RS", "NL", "RN", "SR", "RL", "L", "LB", "HR", "RW", "DR", "LC", "lr", "FB", "LI", "RP", "RM", "Li", "LP", "LD", "rl", "BR", "LL", "Lu", "TL"], "B": ["Y", "BE", "BB", "BS", "VB", "DB", "RB", "R", "OB", "G", "SB", "BO", "WB", "M", "BA", "N", "BC", "IB", "BI", "b", "S", "E", "O", "L", "TB", "LB", "P", "BG", "T", "PB", "J", "AB", "V", "BT", "BW", "BL", "BER", "BM", "Bern", "BR", "Bs", "BP"], "pos": ["z", "ps", "offset", "tmp", "pt", "pr", "Pos", "a", "xy", "l", "rot", "os", "point", "pose", "PO", "points", "index", "phi", "b", "Position", "position", "val", "d", "cos", "p", "pat", "L", "pi", "pl", "P", "addr", "po", "n", "loc", "abs", "o", "bs", "px", "lat", "data", "pro", "POS"], "y": ["Y", "z", "yo", "ym", "ey", "yn", "ay", "a", "xy", "py", "iy", "sy", "oy", "yy", "ty", "yt", "gy", "h", "ies", "yi", "wy", "p", "ry", "e", "ox", "dy", "uy", "ye", "axy", "xi", "n", "cy", "vy", "o", "u"], "x": ["z", "yx", "xp", "X", "xy", "ix", "xs", "xa", "xx", "ci", "ax", "ip", "at", "nex", "xt", "dx", "wx", "ex", "width", "fx", "p", "rx", "xc", "ry", "ox", "xi", "n", "w", "px", "lat", "xf", "xd", "tx", "inx"], "ny": ["nn", "yz", "yo", "yn", "yx", "my", "xy", "zy", "ni", "py", "nit", "sy", "xx", "yy", "ns", "ery", "ty", "yt", "na", "gy", "sn", "nu", "wy", "nb", "ne", "ry", "ox", "ky", "uy", "np", "axy", "n", "si", "cy", "vy", "sky"], "nx": ["nw", "Ny", "dnw", "dnxt", "dnx", "dnex", "dw", "nex", "dx", "nxt", " nex", "Nx", " nxt", " nw", "Nex", "nnw", "dy", "dex", "nnx", "Nxt", "nnex", "nny", "Nw"], "power": ["capacity", "rice", "ice", "vote", "charge", "ower", "number", "key", "powered", "density", " Power", "pole", "ty", "value", "age", "ho", "length", "production", "scale", "position", "magic", "p", "command", "pi", "P", " POWER", "powers", "angle", "energy", "weight", "xi", "rise", "w", "Power", "OWER", "shift"], "le": ["pe", "ine", "ve", "ol", "ld", "ele", "el", "let", "LE", "l", "se", "ler", "ste", "kl", "ue", "ke", "ole", "ble", "hi", "lu", "lo", "ie", "er", "re", "Le", "te", "yle", "cle", "ne", "e", "ile", "sle", "ig", "ye", "lex", "ale", "li", "les", "rel"], "ri": ["rob", "pe", "io", "ei", "zi", "uri", "rin", "ni", "se", "ti", "ris", "RI", "r", "ue", "gi", "hi", "lo", "wi", "rike", "rio", "re", "ie", "di", "rip", "rx", "vi", "pi", "ro", "fi", "ry", "ai", "rid", "ra", "rik", "iri", "xi", "tri", "rd", "si", "Ro", "mi", "rl", "ru", "stri"]}}
{"code": "def main():\\n    N,K = map(int,input().split())\\n    syo = N//K\\n    amari = N%K\\n    N = abs(amari-K)\\n    ans = min(N,amari)\\n    return ans\\n    \\n\\nprint(main())\\n", "target": "63", "substitutes": {"N": ["Y", "Num", "NE", "H", "C", "X", "AN", "F", "Sn", "R", "Ni", "G", "CNN", "NG", "NI", "NB", "M", "NR", "A", "MN", "CN", "Na", "NA", "S", "O", "Ne", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "P", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "K": ["Y", "KA", "FK", "PK", "H", "C", "X", "F", "KK", "R", "SK", "G", "W", "Mu", "Ka", "M", "A", "k", "KR", "Max", "Kent", "KI", "KS", "Int", "S", "OK", "E", "O", "VK", "NK", "D", "KING", "UK", "L", "DK", "Cal", "P", "Q", "KE", " k", "T", "J", "Z", "V", "I", "B", "KC", "ks", "Sch"], "syo": [" chronO", "Syos", " chroni", "aseO", "SyO", "Syo", "syi", "asei", "aseo", "aseos", "Syi", " chronos", "syos", " chrono", "syO"], "amari": ["Amarian", "Amori", "Amardi", " amar", "amani", "Amar", "aminari", "ambarian", "ambari", "amir", "aminar", "aminori", "amarian", "ambani", "aminoid", "aminardi", "amoid", "aminani", "Amir", "amardi", "Amoid", "amar", " amir", " amori", "aminarian", " Amori", " amardi", "Amani", " Amari", "amori", "ambar", " Amar", " Amir", "Amari", " amoid"], "ans": ["nn", "mas", "X", "AN", "R", "cs", "Cs", "s", "ms", "os", "ins", "ns", "mn", "A", "ann", " Ans", "na", "S", "NS", "ANS", "An", "Vs", "P", "nas", "Im", "Str", "ams", "n", "sk", "Ns", "vals", "an", "ks"]}}
{"code": "N=int(input())\\n*A,=map(int,input().split())\\nS=sum(A)\\n\\ncount=[[]for _ in range(N-1)]\\ncount[0]=[A[0],S-A[0]]\\ni=1\\nwhile i<N-1:\\n    count[i]=[A[i]+count[i-1][0],S-(A[i]+count[i-1][0])]\\n    i+=1\\n\\nprint(min(abs(l-r) for l,r in count))", "target": "424", "substitutes": {"N": ["Y", "Number", "Name", "Num", "K", "NE", "C", "F", "R", "Ni", "G", "NB", "NI", "M", "NR", "NP", "NA", "E", "ND", "NT", "D", "SN", "NS", "FN", "L", "TN", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "Network", "NH"], "A": ["Y", "AR", "K", "AA", "ALL", "AI", "H", "C", "X", "AC", "a", "F", "R", "G", "W", "M", "What", "CA", "AL", "LA", "PA", "ACE", "U", "JA", "RAM", "NA", "Count", "E", "O", "D", "All", "AT", "Array", "HA", "AU", "AF", "L", "Address", "GA", "An", "At", "GO", "ATA", "P", "MA", "ACA", "AM", "AH", "T", "Average", "AB", "AP", "V", "I", "B", "Alpha", "ACT", "PUT", "SA"], "S": ["Y", "BS", "SI", "H", "C", "Si", "SS", "F", "WS", "R", "SL", "SAN", "G", "W", "SB", "JS", "s", "OS", "M", "RS", "U", "E", "DS", "D", "US", "NS", "SU", "L", "P", "TS", "Q", "SH", "MS", "T", "SA", "SF", "SE", "Z", "AS", "V", "I", "B", "CS", "GS", "SQL"], "count": ["rate", "core", "add", "found", "sum", "report", "second", "cycle", "close", "delete", "match", "store", "group", "ct", "num", "call", "command", "first", "set", "list", "child", "comment", "att", "number", "CR", "info", "result", "ch", "history", "index", "lag", "Count", "nb", "temp", "ind", "force", "test", "queue", "ctr", "cd", "const", "current", "n", "cast", "map", "ount", "frequency", "order", "nt", "check", "length", "c", "cont", "size", "total", "consider", "cache", "weight", "array", "C", "range", "find", "counter", "all", "hold", "amount", "dict", "attribute", "now", "use", "th", "code", "id", "config", "trace", "summary", "tab", "hash"], "_": [" un", " int", "ix", " m", " j", " __", " each", " p", " t", " e", " c", " x", " k", "x", " row", " g", " index"], "i": ["io", "ini", "zi", "m", "cli", "uri", "a", "y", "t", "this", "ix", "ti", "info", "by", "ip", "ci", "key", "\u0438", "ji", "at", "upper", "gi", "v", "ij", "c", "item", "index", "oi", "hi", "start", "phi", "g", "ind", "id", "di", "num", "go", "p", "bi", "exp", "j", "pi", "fi", "qi", "ai", "it", "ii", "xi", "n", "si", "ic", "batch", "I", "li", "u", "iter", "me", "x", "ui", "mi", "iu", "multi", "init"], "l": ["z", "f", "ld", "ls", "el", "le", "m", "a", "lin", "len", "k", "lb", "la", "v", "sl", "c", "lt", "ln", "h", "q", "b", "lc", "p", "L", "j", "lp", "e", "hl", "lr", "n", "o", "li", "u", "rel", "nl", "x", "rl", "ll"], "r": ["z", "ri", "rr", "m", "range", "rg", "R", "rs", "t", "nr", "result", "rc", "err", "res", "v", "c", "h", "q", "b", "rf", "g", "er", "d", "p", "j", "e", "it", "lr", "right", "rd", "rt", "mr", "o", "u", "rel", "dr", "x", "rat", "ar", "rl"]}}
{"code": "\\nfrom math import gcd\\nfrom functools import reduce\\n\\n\\ndef resolve():\\n    N, K = map(int, input().split())\\n    A = list(map(int, input().split()))\\n\\n    _max = max(A)\\n    g = reduce(gcd, A)\\n\\n    if K <= _max and K % g == 0:\\n        print(\"POSSIBLE\")\\n    else:\\n        print(\"IMPOSSIBLE\")\\n\\n\\nif __name__ == \"__main__\":\\n    resolve()", "target": "603", "substitutes": {"N": ["Y", "C", "X", "F", "R", "Ni", "G", "M", "NR", "Na", "NA", "S", "E", "NT", "D", "NS", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", "Ns", "NN"], "K": ["HK", "Y", "KA", "GP", "KY", "PK", "H", "C", "X", "F", "KK", "R", "G", "W", "M", "k", "KR", "Max", "KS", "S", "VK", "NK", "KING", "D", "L", "P", "Q", "KE", "Sk", "T", "J", "Z", "V", "I", "B", "KC", "MK"], "A": ["Y", "App", "AA", "H", "C", "AN", "AC", "a", "R", "IA", "G", "AV", "M", "CA", "LA", "NA", "S", "As", "All", "D", "Array", "AF", "L", "GA", "An", "At", "mA", "P", "MA", "This", "And", "AS", "AE", "T", "The", "AB", "AP", "V", "Alpha", "B", "Ax", "SA"], "_max": [" _best", "_maximum", " _co", "pmax", "_co", "pfinal", "pMax", "pco", " _final", "_Max", " _maximum", "_final", " _MAX", "_MAX", " _Max", "_best"], "g": ["gam", "f", "yg", "gm", "m", "rg", "G", "t", "gs", "ug", "ga", "gp", "k", "msg", "gi", "v", "gu", "gravity", "c", "b", "gg", "gc", "ge", "group", "tg", "gain", "p", "j", "cfg", "gd", "ig", "mg", "eg", "n", "w", "arg", "gen", " G", "pg"]}}
{"code": "def main():\\n    n = int(input())\\n    dp = [[0 for i in range(10)] for i in range(10)]\\n    for i in range(1,n+1):\\n        h,t = int(str(i)[0]), int(str(i)[-1])\\n        dp[h][t] += 1\\n    ans = 0\\n    for i in range(10):\\n        for j in range(10):\\n            ans += dp[i][j] * dp[j][i]\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "168", "substitutes": {"n": ["nn", "nw", "nia", "m", "ni", "l", "nt", "name", "nr", "N", "len", "ns", "mn", "nm", "un", "v", "na", "c", "sn", "cn", "nu", "nb", "num", "d", "p", "network", "ne", "net", "gn", "nor", "np", "nc", " N", "w", "no", "nl", "non"], "dp": ["ps", "deb", "adr", "df", "pkg", "wd", "dos", "xs", "gp", "pb", "dd", "pp", "jp", "dt", "tp", "db", "pipe", "dx", "vp", "dq", "pm", "di", "dm", "pd", "d", "dl", "p", "dep", "ds", "lp", "cp", "tap", "dial", "dc", "DP", "dh", "bps", "delay", "dj", "osp", "dr", "wp", "pn", "xd", "hp"], "i": ["z", "f", "str", "ei", "ini", "zi", "\u00ed", "m", "ir", "a", "l", "y", "ti", "\u0438", "ci", "ip", "r", "ji", "k", "ati", "gi", "v", "ij", "c", "hi", "ki", "b", "q", "g", "phi", "yi", "ie", "id", "di", "ik", "d", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "u", "ia", "I", "x", "iti", "mi", "iu", "im"], "h": ["f", "ph", "he", "H", "m", "html", "kh", "rh", "l", "ha", "bh", "high", "ho", "v", "hs", "hi", "zh", "th", "hd", "d", "ih", "p", "exp", "oh", "ht", "hl", "it", "gh", "hr", "ah", "hh", "w", "sh"], "t": ["z", "f", "tu", "pt", "tm", "m", "ta", "l", "y", "tt", "r", "dt", "tp", "ty", "at", "v", "ot", "b", "typ", "tz", "te", "p", "it", "tf", "wt", "T", "tr", "tc", "o", "tab", "x", "ts", "rt", "st"], "ans": ["ens", "ps", "wan", "ls", "aned", "a", "oss", "ran", "pan", "rs", "gs", "amps", "s", "os", "ins", "anas", "aus", "ns", "ons", "ars", "ann", "aos", "arts", "beans", "na", "ents", "ians", "ums", "rans", "ays", "ands", "eds", "posts", "ANS", "can", "ds", "oa", "lets", "nas", "ai", "offs", "anes", "nan", "ams", "ads", "books", "ras", "ats", "us", "ros", "ados", "an", "ants", "lan"], "j": ["z", "f", "obj", "ion", "m", "a", "ja", "l", "y", "jp", "k", "ji", "r", "v", "ij", "c", "q", "b", "g", "d", "p", "oj", "pi", "kj", "e", "it", "jj", "aj", "J", "o", "uj", "dj", "li", "x", "js", "jc"]}}
{"code": "import sys\\nn, a  = [int(i) for i in sys.stdin.readline().split()]\\nx_ls = [int(i) - a for i in sys.stdin.readline().split()]\\n#memo_ls[i][j] : i\u756a\u76ee\u307e\u3067\u3067j - 50*50\u304c\u3067\u304d\u308b\u901a\u308a\u6570\\nmemo_ls = [[0 for i in range(2 * 50 * 50 + 1)] for j in range(n+1)]\\nmemo_ls[0][50*50] = 1\\nfor i, x in enumerate(x_ls, 1):\\n    for j in range(2*50*50+1):\\n        memo_ls[i][j] =  memo_ls[i-1][j]\\n        if 0 <= j - x <= 2*50*50:\\n            memo_ls[i][j] += memo_ls[i - 1][j - x]\\nprint(memo_ls[-1][50*50] - 1)", "target": "610", "substitutes": {"n": ["yn", "names", "l", "y", "name", "s", "N", "ns", "r", "v", " fn", "na", "c", " ni", "index", "b", "g", "id", "d", "p", "ai", "it", "ii", " N", "o", "ic", " na"], "a": ["z", "f", "m", "ae", "ta", "l", "all", "t", "y", "au", "s", "A", "at", "na", "c", "h", "an", "b", "area", "p", "alpha", "ao", "e", "ai", "sa", "aa", "ac", "o", "ma", "ab", "aaa", "x", "am"], "i": ["z", "f", "ini", "ei", "ib", "ri", "zi", "m", "ir", "l", "y", "t", "iy", "ti", "ci", "ili", "il", "ani", "ati", "v", "adi", "gi", "ij", "c", "index", "oi", "ki", "b", "rit", "g", "ami", "ik", "d", "p", "j", "pi", "itime", "fi", "ai", "it", "int", "ii", "xi", "si", "ic", "iri", "I", "li", "ia", "x", "iti", "mi", "iu", "im"], "x_ls": ["xLls", "xLl", "x_ln", "w_del", "x_del", "xLln", "w_l", "x_l", "xLdel", "w_ls", "w_ln"]}}
{"code": "n = int(input())\\nfor i in range(1, n+1):\\n    if i % 3 == 0:\\n        print(' '+str(i), end = '')\\n    elif i % 10 ==3:\\n        print(' '+str(i), end = '')\\n    else:\\n        x = i\\n        while x != 0:\\n            x = x // 10\\n            if x % 10 == 3:\\n                print(' '+str(i), end = '')\\n                break\\nprint('')", "target": "514", "substitutes": {"n": ["f", "nn", "m", "ni", "l", "nt", "t", "N", "len", "ns", "mn", "k", "v", "na", "c", "sn", "q", "b", "an", "g", "nu", "nb", "num", "d", "p", "j", "network", "ne", "np", "nan", "nc", "o", " N", "w", "nl"], "i": ["z", "ini", "zi", "\u00ed", "m", "a", "l", "y", "t", "ix", "ti", "ip", "ci", "ji", "ati", "gi", "v", "ij", "c", "hi", "index", "q", "phi", "b", "yi", "id", "di", "ik", "Xi", "p", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "li", "I", "iter", "o", "ia", "u", "mi", "iu", "im"], "x": ["z", "f", "rex", "max", "xes", "xp", "X", "a", "hex", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "ax", "xx", "v", "check", "co", "dx", "wx", "xt", "c", "index", "long", "mx", "zx", "ex", "bit", "p", "rx", "j", "xxx", "xc", "ox", "xe", "ai", "int", "xi", "lex", "ic", "w", "xf", "im", "xd", "tx", "inx"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\n\\n\\ndef solve(N: int, K: int):\\n    ans = 1\\n    for _ in range(N):\\n        ans = min(ans * 2, ans + K)\\n    print(ans)\\n\\n\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    K = int(next(tokens))  # type: int\\n    solve(N, K)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "441", "substitutes": {}}
{"code": "a = list(map(int,input().split()));\\n\\na[0],a[1] = a[1],a[0]\\na[0],a[2] = a[2],a[0]\\n\\nfor i in range(3):\\n    print(a[i],end=' ');", "target": "499", "substitutes": {"a": ["ba", "fa", "xa", "v", "h", "g", "area", "da", "ao", "ia", "set", "ab", "eas", "list", "x", "z", "f", "obj", "apa", "m", "ta", "att", "t", "result", "pp", "history", "na", "aa", "n", "abs", "o", " A", "am", "data", "ack", "ae", "l", "ga", "A", "at", "la", "c", "ea", "b", "go", "p", "va", "alpha", "j", "app", "form", "e", "sa", "ata", "al", "ac", "ma", "w", "aaa", "aff", "out", "tmp", "array", "ap", "all", "sta", "au", "now", "es", "aux", "ce", "d", "window", "act", "oa", "u", "an"], "i": ["z", "f", "ri", "zi", "m", "l", "y", "ix", "ti", "s", "ci", "r", "k", "ji", "v", "gi", "ij", "c", "ki", "q", "b", "g", "yi", "ind", "id", "di", "p", "bi", "multi", "j", "pi", "it", "ii", "xi", "n", "si", "ic", "I", "li", "x", "mi", "im"]}}
{"code": "n = int(input())\\nh = [int(x) for x in input().split()]\\n\\ncnt = 1\\n\\nfor i in range(1,n):\\n    for j in range(i):\\n        if(h[i]<h[j]):\\n            break\\n        if(j==(i-1)):\\n            cnt += 1\\n\\nprint(cnt)", "target": "26", "substitutes": {"n": ["z", "nn", "m", "l", "nt", "t", "N", "ns", "mn", "k", "en", "un", "v", "na", "c", "ln", "sn", "q", "an", "cn", "nu", "nb", "num", "d", "p", "ne", "net", "np", "nc", " N", "w", "no", "nl", "norm", "init"], "h": ["ph", "uh", "he", "H", "m", "here", "kh", "hex", "rh", "hm", "ha", "dict", "hz", "pp", "bh", "r", "ho", "history", "hs", "c", "hi", "phi", "b", "g", "th", "header", "hal", "hd", "ih", "p", "oh", "ht", "hw", "hl", "her", "ah", "hh", "help", "dr", "sh", "hash", "hist", "hp"], "x": ["z", "f", "xes", "X", "a", "hex", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "xx", "xb", "ax", "k", " ax", "v", "dx", "wx", "c", "q", "mx", "ex", "fx", "ctx", "p", "rx", "xc", "e", "xe", "xi", "u", "px", "xf", "xd", "tx", "inx"], "cnt": ["curcount", "Cpt", "rnt", " cpt", "Cct", "rust", "Count", "ccount", " ccount", "Cnt", "cust", "curpt", " count", "Cust", "curnt", "rct", " cust", "curct", "cct", " cct", "rount", "rcount", "count", "rpt", "cpt"], "i": ["f", "io", "ini", "ri", "zi", "m", "a", "l", "y", "ix", "ti", "ip", "ci", "key", "k", "ji", "gi", "ij", "c", "hi", "index", "ki", "q", "phi", "yi", "ie", "id", "di", "ik", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "o", "ic", "li", "I", "ia", "ui", "mi", "iu", "im"], "j": ["z", "f", "obj", "ion", "jl", "ja", "l", "y", "jp", "ji", "v", "ij", "c", "job", "q", "b", "g", "jac", "p", "bi", "oj", "kj", "it", "jj", "jump", "aj", "J", "si", "jam", "o", "uj", "dj", "li", "ju", "bj", "js", "jc"]}}
{"code": "import sys\\ninput = sys.stdin.buffer.readline\\n\\nn, m = map(int, input().split())\\nAB = []\\nfor i in range(n):\\n    a, b = map(int, input().split())\\n    AB.append((a, b))\\n#AB.sort(key = lambda x:(-x[0], -x[1]))\\nAB.sort(reverse=True)\\n#print(AB)\\n\\nh = []\\nimport heapq\\nheapq.heapify(h)\\nans = 0\\nfor i in reversed(range(m)):\\n    while AB:\\n        a, b = AB.pop()\\n        if i+a > m:\\n            AB.append((a, b))\\n            break\\n        else:\\n            heapq.heappush(h, (-b, a))\\n    #print(i, h)\\n    if h:\\n        b, a = heapq.heappop(h)\\n        b = b*(-1)\\n        ans += b\\nprint(ans)\\n", "target": "576", "substitutes": {"input": ["f", "active", "str", "out", "sum", "load", "util", "find", " Input", "reset", "sample", "step", "raw", "request", "output", "cin", "url", "query", "pull", "dq", "q", "insert", "ref", "Input", "source", "select", "paste", "cmd", "temp", "config", "pattern", "read", "cur", "next", "view", "command", "call", "image", "new", "get", "it", "int", "current", "feed", "print", "exec", "gen", "update", "data", "PUT", "proc", "text", "shift"], "n": ["nn", "gm", "nia", "l", "nt", "t", "nr", "ms", "N", "M", "ns", "nm", "mn", "r", "na", "c", "ln", "sn", "h", "nd", "g", "ct", "nb", "d", "dn", "j", "ne", "e", "gn", "np", "nc", "no", "x", "ll"], "m": ["mu", "f", "mc", "mb", "l", "t", "ms", "M", "mn", "nm", "r", "k", "v", "c", "bm", "mask", "g", "num", "mem", "d", "p", "o", "mm", "me", "mi", "fm", "cm"], "AB": ["BS", "BB", "AA", "IAS", "AC", "EB", "Ab", "OB", "IA", "SB", "NB", "BA", "IB", "ABC", "BC", "AL", "TA", "LAB", "UB", "BR", "AT", "AF", "ICA", "ACH", "AD", "AM", "AH", "B", "Lab", "ab", "BL", "BM", "BN", "SA", "BP"], "i": ["iq", " il", "y", "ite", "ix", "ti", "by", "ci", "k", "q", "ind", "id", " ii", "j", "it", "ii", "li", "I", "iter", "x", " mi", "um", "im"], "a": ["ba", "le", "ae", "ka", "sta", "ga", "au", "xa", "A", "ca", "la", "at", "c", "ea", "an", "er", "aux", "area", "ant", "va", "alpha", "app", "act", "oa", "aka", "sa", "int", "aa", "aj", "ac", "ma", "ia", "ab", "aaa", "am", "lower"], "b": ["rb", "ba", "ib", "mb", "be", "l", "y", "bc", "bp", "back", "cb", "fb", "r", "v", "url", "db", "c", "g", "d", "bi", "br", "j", "e", "sb", "bis", "ob", "bs", "shell", "u", "B", "ab", "bb", "bar", "base", "eb"]}}
{"code": "n = int(input())\\ncheck = []\\nans = 0\\nfor _ in range(n):\\n    n1, n2 = map(int, input().split())\\n    if n1 == n2:\\n        check.append(1)\\n    else:\\n        check.append(0)\\n\\nfor i in range(n-1):\\n    if sum(check[i:i+3])==3:\\n        ans = 1\\n        break\\nif ans:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "709", "substitutes": {"n": ["z", "f", "nn", "nia", "m", "a", "l", "nt", "t", "number", "name", "s", "N", "len", "ns", "mn", "k", "r", "en", "v", "na", "c", "ln", "sn", "an", "nd", "h", "cn", "nu", "nb", "num", "d", "size", "p", "ne", "gn", "np", "nan", "nc", "non", "x", "norm"], "check": ["type", "good", "wait", "add", "checks", "look", "pack", "clean", "find", "Check", "ck", "close", "dict", "control", "info", "con", "ok", "cks", "cb", "key", "status", "now", "co", "cal", "c", "true", "index", "scale", "see", "double", "checking", "test", "work", "force", "read", "call", "warn", "clear", "walk", "cp", "com", "valid", "cmp", "int", "run", "block", "quick", "rank", "CHECK", "checked", "set", "print", "update", "handle", "scan", "init"], "ans": ["ens", "checks", "ls", "flags", "names", "aned", "cs", "rs", "cons", "amps", "xs", "s", "ins", "anas", "reads", "aus", "ns", "ons", "cks", "ann", "outs", "ars", "acts", "aps", "aces", "arts", "ents", "ians", "ums", "rans", "eds", "posts", "yes", "san", "ms", "vs", "ANS", "can", "uns", "helps", "offs", "actions", "nan", "ats", "vals", "anks", "an", "ks", "ants", "uploads"], "_": ["ay", "ix", "ow", "val", "ind", "valid", " x", "ic", "I", "x"], "n1": ["i11", "N2", "NOne", "onOne", "n0", "nOne", "N0", "t2", "on2", "i1", "z11", "N1", "on0", "tOne", " n11", "i2", "z1", "z2", "t0", "n11", "t1", "on1"], "n2": [" n42", "Nb", "p2", "N2", "i42", "n02", "pb", " n02", "p02", "p1", "n42", "nb", "npl", "N1", "i1", " nb", "ipl", "N42", "i2", "N02", " npl", "Npl"], "i": ["f", "ini", "ei", "ri", "zi", "l", "y", "t", "ix", "ti", "ip", "ci", "gi", "ij", "c", "ori", "index", "oi", "ki", "q", "yi", "ind", "id", "di", "ik", "p", "multi", "j", "pi", "fi", "qi", "ai", "it", "ii", "xi", "si", "ic", "uli", "I", "li", "x", "ui", "mi", "iu", "im"]}}
{"code": "S=input()\\nT=input()\\nprint(\"Yes\" if S in T*2 else \"No\")", "target": "721", "substitutes": {"S": ["Y", "Iss", "SI", "Si", "C", "H", "SS", "X", "F", "Pos", "R", "SL", "G", "W", "LS", "PS", "Sh", "s", "N", "M", "A", "Ds", "Sup", "E", "O", "D", "NS", "SU", "Is", "L", "An", "Sav", "P", "TS", "SF", "V", "I", "B", "CS", "Ps", "Bs", "Set"], "T": ["Y", "H", "C", "F", "R", "G", "WT", "W", "t", "N", "M", "TA", "TH", " t", "E", "O", "D", "TG", "L", "TB", "TP", "TN", "TW", "TS", "P", "Q", "J", "V", "B", "VT", "TF", "TT", "GT", "TX", "XT", "PT"]}}
{"code": "a, b = input().split()\\na, b = int(a), int(b)\\n\\nprint(int(a+(b/2)))", "target": "668", "substitutes": {"a": ["f", "ba", "obj", "el", "m", "ta", "ae", "be", "l", "y", "t", "sta", "au", "ga", "ed", "xa", "i", "A", "ca", "input", "at", "la", "na", "c", "ea", "p", "va", "da", "alpha", "ao", "oa", "act", "anta", "aka", "e", "get", "sa", "ai", "it", "aa", "up", "aj", "n", "abs", "ac", "ma", " A", "ia", "ab", "eas", "aaa", "x", "an", "aff"], "b": ["z", "f", "rb", "ib", "m", "mb", "blue", "be", "l", "y", "t", "bc", "two", "big", "by", "i", "bh", "fb", "cb", "db", "v", "c", "bound", "g", "wb", "nb", "d", "bi", "br", "j", "e", "bin", "sb", "reb", "it", "gb", "bis", "n", "ob", "abs", "bs", "B", "ab", "bb", "bar", "base", "eb", "new"]}}
{"code": "import sys\\nimport math  # noqa\\nimport bisect  # noqa\\nimport queue  # noqa\\n\\n\\ndef input():\\n    return sys.stdin.readline().rstrip()\\n\\n\\ndef main():\\n    N = int(input())\\n    G = [[] for _ in range(N)]\\n    for _ in range(N - 1):\\n        a, b, c = map(int, input().split())\\n        a -= 1\\n        b -= 1\\n        G[a].append((b, c))\\n        G[b].append((a, c))\\n    Q, K = map(int, input().split())\\n    K -= 1\\n    X = []\\n    Y = []\\n    for _ in range(Q):\\n        x, y = map(int, input().split())\\n        x -= 1\\n        y -= 1\\n        X.append(x)\\n        Y.append(y)\\n\\n    que = queue.Queue()\\n    INF = 10 ** (25)\\n    dist = [INF for _ in range(N)]\\n    dist[K] = 0\\n    que.put(K)\\n    while not que.empty():\\n        cn = que.get()\\n        for nn, c in G[cn]:\\n            if dist[nn] > dist[cn] + c:\\n                dist[nn] = dist[cn] + c\\n                que.put(nn)\\n\\n    for x, y in zip(X, Y):\\n        print(dist[x] + dist[y])\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "360", "substitutes": {}}
{"code": "from collections import defaultdict\\n\\nA = input()\\nN = len(A)\\ndp = [0] * N\\ndp[0] = 1\\nd = defaultdict(int)\\nd[A[0]] = 1\\n\\nfor i in range(1, N):\\n  a = A[i]\\n  dp[i] = dp[i-1]\\n  dp[i] += i - d[a]\\n  d[a] += 1\\n\\nprint(dp[-1])", "target": "351", "substitutes": {"A": ["Y", "App", "AY", "AR", "Data", "K", "AI", "AA", "Ar", "H", "C", "X", "Al", "AC", "Ab", "R", "IA", "G", "CA", "EA", "Att", "JA", "Av", "S", "E", "As", "D", "AU", "AT", "All", "Array", "AF", "L", "Address", "GA", "An", "Ca", "At", "P", "AM", "AH", "This", "SA", "AS", "T", "AB", "AP", "V", "I", "B", "Alpha", "Ant", "ACT", "Ax", "AE"], "N": ["Y", "Num", "K", "C", "F", "R", "Ni", "G", "NB", "NI", "EN", "M", "NR", "Len", "NP", "NA", "Size", "S", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "No", "T", "GN", "J", "n", "Z", "V", "I", "PN", "B", "Ns", "NO", "NN", "NH"], "dp": ["ps", "deb", "df", "pkg", "wd", "pb", "gp", "dd", "pp", "dro", "jp", "dt", "tp", "resp", "db", "sd", "vp", "pa", "dq", "dm", "pd", "du", "dl", "p", "dep", "da", "ds", "lp", "cp", "td", "PP", "dial", "cd", "dc", "np", "DP", "dh", "bps", "grad", "yp", "dr", "wp", "DC"], "d": ["f", "done", "m", "df", "bd", "l", "t", "debug", "dict", "did", "s", "dd", "r", "dt", "db", "v", "c", "dq", "b", "g", "D", "di", "default", "pd", "de", "dl", "p", "da", "do", "j", "ds", "td", "gd", "e", "dc", "dh", "n", "ad", "o", "w", "u", "dr", "x", "data", "fd"], "i": ["z", "f", "io", "ini", "zi", "m", "l", "y", "ix", "ti", "info", "ip", "k", "ji", "v", "gi", "pa", "ij", "c", "index", "q", "b", "ind", "id", "di", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "o", "u", "I", "li", "iter", "ia", "x", "ui", "mi", "iu"], "a": ["pai", "apa", "ae", "ja", "l", "parent", "this", "all", "sta", "ga", "s", "au", "ca", "at", "la", "pa", "wa", "ea", "index", "b", "ami", "aux", "area", "p", "alpha", "j", "app", "act", "pi", "sa", "ai", "aa", "ac", "o", "ma", "sha", "ia", "ab", "aaa", "x", "an", "ack"]}}
{"code": "t = list(input())\\ntl = len(t)\\n\\nfor i in range(tl):\\n    if t[i] != '?':\\n        continue\\n\\n    if tl == 1:\\n        t[i] = 'D'\\n    elif i == tl - 1:\\n        t[i] = 'D'\\n    elif t[i-1] == 'P':\\n        t[i] = 'D'\\n    elif t[i+1] == '?':\\n        t[i] = 'P'\\n    elif t[i+1] == 'D':\\n        t[i] = 'P'\\n    else:\\n        t[i] = 'D'\\n\\nprint(''.join(t))\\n", "target": "678", "substitutes": {"t": ["tu", "pt", "tp", "dt", "yt", "v", "q", "g", "ct", "tree", "tg", "tf", "list", "x", "ts", "f", "m", "comment", "ta", "to", "ty", "xt", "lt", "ot", "temp", "test", "bt", "wt", "txt", "n", "table", "o", "tc", "qt", "str", "l", "nt", "r", "at", "tar", "c", "b", "the", "te", "p", "j", "et", "total", "form", "tes", "text", "st", "type", "out", "tmp", "ent", "a", "ret", "y", "all", "tt", "s", "d", "title", "trace", "tip", "td", "it", "mat", "T", "tr", "template", "sequence", "lat", "rt"], "tl": ["fl", "lit", "ls", "tm", "ta", "sr", "ly", "l", "lv", "tt", "gs", "lis", "nt", "ti", "len", "sol", "dt", "tp", "il", "lb", "latest", "ul", "sl", "lt", "ln", "wl", "lc", "tn", "ml", "te", "dl", "lp", "pl", "ht", "td", "hl", "it", "tf", "lr", "tr", "ctl", "n", "tall", "lf", "nl", "lat", "list", "ts", "rl", "ll", "TL"], "i": ["io", "ini", "ei", "ri", "zi", "\u00ed", "m", "uri", "cli", "ta", "ni", "l", "this", "name", "ix", "iy", "ios", "ti", "info", "chain", "ip", "\u0438", "ci", "ji", "gi", "status", "ij", "ori", "index", "oi", "hi", "q", "phi", "yi", "ind", "id", "di", "ik", "p", "bi", "j", "pi", "qi", "isi", "ai", "it", "ii", "iri", "si", "xi", "ic", "batch", "li", "I", "iter", "me", "x", "ui", "mi", "iu", "im", "list"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nN, K = map(int, input().split())\\nsushi = [None] * N\\nfor i in range(N):\\n    t, d = map(int, input().split())\\n    sushi[i] = (d, t)\\nsushi.sort(reverse=True)\\n\\ntypes = set()\\ncand = []\\ns = x = 0\\n\\nfor d, t in sushi[:K]:\\n    if t in types:\\n        cand.append(d)\\n    else:\\n        types.add(t)\\n        x += 1\\n    s += d\\ncand.sort(reverse=True)\\n\\nans = s + x*x\\nfor d, t in sushi[K:]:\\n    if t in types:\\n        continue\\n    if not cand:\\n        break\\n    dr = cand.pop()\\n    s += d - dr\\n    types.add(t)\\n    x += 1\\n    ans = max(ans, s + x*x)\\nprint(ans)", "target": "466", "substitutes": {"input": ["qt", "str", "add", "out", "reader", "load", "sum", "util", "reset", " Input", "sample", "format", "step", "raw", "fn", "output", "cin", "request", "url", "pull", "dq", "q", "unit", "insert", "ref", "Input", "select", "paste", "cmd", "context", "config", "init", "read", "next", "view", "command", "get", "inc", "it", "int", "focus", "conf", "feed", "iter", "set", "exec", "print", "gen", "list", "data", "PUT", "text", "shift"], "N": ["Y", "Num", "C", "X", "AN", "F", "R", "G", "CNN", "NB", "NI", "M", "NR", "CN", "A", "Len", "NA", "Size", "S", "O", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NUM", "NC", "NO", "NN", "NH"], "K": ["Y", "Num", "KA", "FK", "PK", "C", "X", "AN", "F", "KK", "R", "KO", "SK", "G", "NB", "M", "k", "KR", "NP", "KI", "KS", "S", "E", "NK", "D", "UK", "Key", "L", "TN", "P", "Q", "KE", "T", "J", "Z", "KEY", "V", "I", "Keep", "B", "KC", "DC"], "sushi": ["msobi", "mshi", "Shi", "xshi", "xsuchi", "msushi", " sesh", "tushi", "tsesh", "sci", "isci", "sigh", "shi", "Suchi", "tsigh", "tobi", " satus", " shi", "tesh", "Sigh", "Sobi", "thi", "tsobi", "msatus", "suchi", "xsatus", "Satus", "xsushi", "Sci", "sobi", " suchi", " sigh", "tsushi", "Sushi", "isatus", "isushi", "sesh", " sobi", "ishi", "tshi", "satus", " sci"], "i": ["z", "ini", "\u00ed", "m", " il", " bi", "l", "y", "ite", "ix", "ti", "ci", "k", " me", "v", " j", "ij", "c", "index", " p", " e", "ind", "id", " ii", " c", "p", "j", "pi", "e", " I", "it", "ii", "xi", "n", "iri", "o", "li", "I", "on", " mi", " f", "mi", " it"], "t": ["tu", "pt", "name", "dt", "yt", "ert", "v", "g", "ct", "tg", "tn", " unt", " Not", "set", "ts", "f", "det", "m", "ta", "att", "to", "ti", "ty", "xt", "lt", "ot", "ott", "ht", "wt", "vt", "txt", "n", "o", "qt", "str", "ter", "l", "nt", "tw", "dist", "r", "k", "at", " T", "ft", "c", "gt", "b", "typ", "te", "p", "j", "et", "mt", "w", "st", "type", "let", "ent", "kt", "a", "ret", "y", "tt", "th", "title", "ant", " ot", "td", "it", "int", "T", "u", "lat", "rt"], "d": ["z", "f", "done", "ld", "out", "des", "m", "a", "red", "l", "y", "dos", "dict", "did", "ed", "dd", "r", "dt", "v", "db", "dx", "sd", "c", "true", "h", "b", "g", "ind", "id", "D", "di", "dm", "de", "hd", "p", "dn", "da", "do", "j", "ds", "end", "td", "e", "dom", "cd", "dh", "n", "ad", "o", "w", "data", "new", "dat", "fd"], "types": ["options", "ties", "times", "names", "faces", "cs", "modules", "errors", "tests", "ies", "drivers", "ype", "tags", "ts", "asts", "ants", "objects", "groups", "events", "devices", "params", "desc", "rates", "xs", "ms", "ports", "features", "ty", "packages", "styles", "ands", "icators", "codes", "keys", "tools", "cast", "ypes", "headers", " Types", "kind", "rs", "otypes", "resources", "fields", "classes", "caps", "idates", "builders", "tar", "testers", "Types", "rings", "planes", "rows", "sets", "casters", "workers", "casts", "pes", "vals", "type", "ths", "users", "checks", "abilities", "amps", "phones", "players", "posts", "properties", "ters", "plugins", "ctors", "dies", "packs", "jobs", "balls", "lists"], "cand": ["good", "max", "member", "found", "recent", "cat", "clean", "cs", "dev", "make", "etc", "Cand", "co", "dem", "start", "ped", "cmd", "cur", "coord", "cell", "ace", "car", "count", "new", "train", "prop", "cut", "pop", "result", "ok", "ch", "ands", "temp", "ind", "test", "cart", "cos", "cd", "tc", "star", "arg", "cast", "thread", " candidates", "nt", "pos", "high", "msg", "idates", "tar", "c", "team", "typ", "cont", "alpha", "valid", "sel", "conf", "rank", "loc", "dec", " Cand", "rand", "tmp", "cons", "old", "brand", "err", "flag", "ce", "config", "cap", "char", "col", "cfg", " candidate", "rend", "var", "mate", "tab", "reg"], "s": ["z", "stats", "sts", "sv", "ws", "ls", "times", "m", "cs", "rs", "y", "gs", "xs", "ins", "os", "ars", "ns", "r", "ms", "v", "es", "c", "ys", "eds", "g", "ies", "S", "ids", "p", "ss", "ds", "ashes", "ims", "n", "abs", "bs", "w", "tes", "ats", "ts", "mins", "qs", "js"], "x": ["z", "f", "max", "xes", "m", "xp", "X", "ux", "l", "y", "ix", "xs", "xa", "ax", "xx", "r", "k", "v", "xt", "dx", "wx", "c", "index", "h", "g", "mx", "ex", "ct", "width", "fx", "ctx", "p", "rx", "xc", "e", "ox", "xe", "time", "xi", "n", "lex", "w", "u", "px", "on", "xf", "an", "tx"], "ans": ["ens", "rors", "ls", "names", "aned", "vers", "rates", "ran", "anc", "cs", "rs", "gs", "xs", "ins", "ms", "ars", "aus", "ns", "ons", "outs", "ann", "os", " Ans", "dd", "aos", "arts", "ians", "angs", "ers", "rans", "ays", "ands", "ies", "yes", " means", "ors", "vs", "ANS", "ids", "ds", "uns", "uds", "anes", "ads", "ats", "orders", "ros", "ions", "anks", "an", "ks", "ants"], "dr": ["rand", "ld", "rr", "Dr", "adr", "cr", "rs", " Dr", "driver", "fr", "dro", "dd", "ptr", "r", "dt", "dq", "gt", "ot", "nd", "er", "di", "de", "hd", "ds", "drm", "ry", "DR", "cd", "rer", "lr", "rid", "dc", "dp", "rd", "hr", "mr", "dj", "ar", "xd"]}}
{"code": "s = input()\\n\\nans = 0\\nfor si in s:\\n  if si == \"o\":\\n    ans += 1\\n\\nprint(700+100*ans)", "target": "231", "substitutes": {"s": ["ps", "ls", "events", "views", "m", "fs", "a", "rs", "t", "gs", "xs", "ins", "os", "i", "ms", "ns", "v", "es", "c", "b", "eds", "g", "S", "csv", "eps", "ches", "p", "ss", "ds", "args", "inks", "ims", "ses", "n", "abs", "w", "sq", "tes", "ats", "ts", "qs"], "ans": ["ens", "cs", "rs", "cons", "amps", "gs", "ins", "anas", "os", "aus", "ons", "ns", "ms", "ann", "ars", "acs", "aps", "aos", "arts", "ents", "rans", "eds", "san", "ANS", "ds", "lets", "uns", "ai", "helps", "offs", "anes", "ams", "ads", "ras", "ats", "us", "ts", "anks", "an", "ks", "ants", "lan"], "si": ["sv", " iso", " sp", "SI", " so", "zi", "Si", " bi", " vi", " i", "sis", "ti", "i", " sap", " sa", " psi", " SI", "sp", "sd", " ni", " ki", "sim", " Si", "eni", " ss", "di", "san", " Ai", " sip", "bi", " ski", "sam", "sa", "so", " sd", "ii", "isha", " di", "ui", "mi", "ski", " su"]}}
{"code": "S = input()\\ncompanies = {company for company in S}\\nif len(companies) > 1:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "234", "substitutes": {"S": ["BS", "Si", "C", "H", "SS", "X", "F", "R", "SL", "G", "JS", "SM", "s", "N", "M", "SOURCE", "A", "INS", "E", "DS", "D", "NS", "SU", "SO", "L", "SP", "P", "Q", "T", "J", "Z", "V", "I", "B", "CS"], "companies": ["replies", "collones", "collIES", "repleries", "replones", "comeries", "quos", "replos", "comies", "companeries", "replIES", "companIES", "replties", "companos", "otherIES", "companones", "companties", "comices", "comos", "otheries", "collies", "replices", "otherones", "quies", "queries", "quices", "collties", "otherties", "companices"], "company": ["party", "price", "computer", "field", "comment", "label", "account", "name", "number", "common", "sample", "service", "office", "value", "hello", "email", "team", "city", "group", "property", "contact", "option", "title", "Company", "owner", "country", "com", "product", "entity", "money", "address", "stuff", "tax", "n", "person", "element", " Company", " office", "compan", "new"]}}
{"code": "n=int(input())\\naa=list(map(int,input().split()))\\naa.sort()\\nd=0\\nfor i in range(1,len(aa)):\\n  d+=abs(aa[i]-aa[i-1])\\nprint(d)", "target": "447", "substitutes": {"n": ["nn", "m", "l", "t", "nt", "s", "N", "len", "ns", "nm", "r", "v", "na", "c", "sn", "h", "b", "cn", "nu", "nb", "num", "p", "j", "total", "nan", "nc", "o", "nl", "count"], "aa": ["arr", "apa", "array", "AA", "fa", "ave", "qa", "aho", "ews", "ae", "a", "ja", "ais", "eeee", "af", "ga", "au", "aye", "fr", "lla", "say", "la", "aos", "na", "ea", "apy", "b", "nai", "auc", "area", "ava", "go", "va", "aaaa", "alpha", "da", "alph", "oa", "act", "aka", "fps", "av", "isa", "sa", "ai", "ya", "aq", "ii", "ma", "ah", "arb", "nda", "aaa", "bb", "data", "aff", "agree"], "d": ["f", "done", "ld", "des", "m", "a", "df", "dev", "bd", "t", "l", "debug", "dict", "au", "dd", "r", "dt", "db", "v", "sd", "dx", "c", "mod", "ind", "D", "di", "pd", "de", "dl", "p", "da", "j", "ds", "gd", "td", "cd", "dy", "dh", "u", "dec", "dra", "dot", "dat", "fd"], "i": ["ini", "zi", "cli", "uri", "a", "y", "ix", "ti", "s", "ip", "key", "ci", "ji", "gi", "v", "ij", "hi", "index", "oi", "q", "b", "phi", "ind", "id", "di", "bi", "multi", "pi", "fi", "qi", "ai", "it", "ii", "iri", "si", "xi", "ic", "li", "I", "x", "ui", "mi", "iu", "im"]}}
{"code": "def main():\\n    n = int(input())\\n    hs = list(map(int, input().split()))\\n\\n    INF = 10 ** 12\\n    dp = [INF] * n\\n    dp[0] = 0\\n    dp[1] = abs(hs[1] - hs[0])\\n\\n    for i in range(2, n):\\n        dp[i] = min(dp[i], dp[i - 1] + abs(hs[i] - hs[i - 1]))\\n        dp[i] = min(dp[i], dp[i - 2] + abs(hs[i] - hs[i - 2]))\\n\\n    print(dp[-1])\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "5", "substitutes": {"n": ["f", "nn", "m", "ni", "l", "nt", "t", "nr", "s", "N", "ns", "mn", "r", "k", "c", "ln", "sn", "q", "h", "b", "an", "cn", "nu", "nb", "num", "d", "size", "p", "j", "ne", "net", "gn", "np", "nan", "nc", "w", "no", "nl", "x"], "hs": ["ps", "ths", "sts", "sys", "hers", "ws", "roots", "ls", "lines", "has", "heads", "tops", "fs", "rh", "hm", "rs", "gs", "xs", "hours", "ists", "amps", "s", "hz", "reads", "cks", "bh", "ns", "HS", "outs", "hes", "phis", "h", "ys", "hops", "ks", "ops", "zh", "mph", "ges", "hd", "vs", "quarters", "hess", "ht", "sels", "hw", "sb", "ashes", "its", "ims", "pps", "bs", "hh", "irs", "ats", "als", "sh", "qs", "his", "hp"], "INF": [" INInf", "inFF", "ANF", "INFF", "ANN", "ANInf", "LINInf", "InN", "INEF", "LINN", "inN", "ANEF", "InInf", "LINF", "inF", "LINFF", " INEF", "INInf", "InF", "INN", " INN", " INFF", "InEF", "inInf"], "dp": ["ps", "rate", "deb", "adr", "ep", "decl", "bsp", "df", "xy", "pkg", "bp", "dos", "wd", "drop", "ga", "gp", "pb", "dro", "dd", "pp", "ip", "jp", "dt", "tp", "gr", "dim", "db", "pipe", "vp", "dq", "pm", "fp", "csv", "imp", "deep", "di", "dm", "pd", "d", "du", "dl", "p", "dep", "do", "ds", "cp", "lp", "td", "tap", "dial", "xe", "cd", "its", "dc", "np", "DP", "dh", "bps", "delay", "dj", "dr", "wp", "dat"], "i": ["ini", "ri", "name", "ci", "ji", "v", "hi", "h", "q", "g", "di", "ai", "xi", "li", "iter", "set", "x", "ui", "iu", "z", "f", "io", "zi", "m", "cli", "this", "t", "ti", "info", "index", "phi", "ind", "bi", "exp", "qi", "batch", "me", "im", "item", "uri", "ter", "l", "ix", "\u0438", "r", "at", "ij", "c", "b", "p", "j", "fi", "e", "ii", "ic", "multi", "iso", "chain", "y", "s", "ip", "key", "jp", "gi", "ori", "ami", "id", "pi", "it", "int", "si", "I", "mi"]}}
{"code": "n = input()\\nS = map(int, raw_input().split())\\nq = input()\\nT = map(int, raw_input().split())\\n\\ncount = 0\\n\\nfor i in range(q):\\n    Search = T[i]\\n    for j in range(n):\\n        if S[j] == Search:\\n            count = count + 1\\n            break\\n\\nprint count", "target": "316", "substitutes": {"n": ["z", "nn", "nw", "m", "l", "y", "nt", "t", "nr", "s", "N", "ns", "nm", "v", "na", "c", "ln", "sn", "b", "g", "cn", "nu", "nb", "rn", "num", "d", "p", "dn", "ne", "np", "nc", "o", "nl", "x"], "S": ["SI", "H", "C", "Si", "X", "SS", "R", "SL", "Spe", "G", "SB", "s", "N", "M", "A", "NS", "L", "SP", "P", "TS", "Q", "SH", "SA", "SF", "J", "V", "I", "B", "CS", "Set", "Sign"], "q": ["z", "qt", "qa", "iq", "m", "l", "y", "t", "s", "r", "k", "ue", "v", "query", "c", "dq", "h", "b", "g", "d", "p", "qi", "Q", "aq", "sq", "ql", "quit", "qq", "qs", "qu"], "T": ["Y", "K", "H", "C", "X", "F", "R", "t", "W", "G", "WT", "N", "M", "A", "TA", "E", "O", "D", "TG", "L", "TB", "TN", "TM", "P", "TS", "Q", "J", "Z", "V", "B", "Tu", "TT", "GT", "XT", "TL"], "count": ["ount", "add", "out", "level", "found", "sum", "report", "message", "comment", "find", "reset", "counter", "hold", "t", "nt", "number", "debug", "amount", "result", "value", "age", "status", "now", "length", "c", "index", "start", "group", "Count", "gc", "flag", "th", "ct", "val", "nb", "code", "ind", "test", "force", "num", "size", "process", "next", "total", "consider", "current", "search", "weight", "print", "quit"], "i": ["io", "ini", "ei", "zi", "\u00ed", "iq", "ir", "a", "y", "ix", "ti", "ip", "\u0438", "gi", "ij", "ori", "ki", "phi", "yi", "di", "ik", "ih", "bi", "pi", "ai", "int", "ii", "xi", "si", "iri", "ic", "li", "I", "ia", "iti", "mi", "iu", "im"], "Search": ["Name", "Return", "Need", "Target", "Pos", "Sp", "Print", "Term", "Solution", "Query", "Index", "Score", "Type", "Length", "Exp", "Find", "Current", "Request", "Status", "ID", "Count", "Position", "Condition", "Match", "Key", "Is", "Filter", "Accept", "Found", "Q", "Help", "Value", "First", "search", "Result", "Test", "Start", "Select", "Set", "Title"], "j": ["z", "f", "str", "ion", "jl", "ja", "y", "note", "nr", "key", "jp", "k", "ji", "v", "json", "ij", "job", "h", "b", "ot", "g", "bi", "kj", "jj", "jump", "aq", "aj", "J", "o", "uj", "dj", "bj", "js", "jc"]}}
{"code": "k = int(input())\\na,b = map(int,input().split())\\nn = range(k,1001,k)\\nif any(a <= i and i <= b for i in n):\\n    print('OK')\\nelse:\\n    print('NG')\\n", "target": "78", "substitutes": {"k": ["dk", "K", "m", "kr", "kh", "ka", "ck", "kl", "ok", "kk", "ke", "mk", "ki", "q", "kn", "unk", "ak", "ik", "num", "kok", "p", "km", "j", "kj", "ek", "kw", "sk", "ko", "ku", "ks"], "a": ["ba", "m", "ta", "ae", "t", "au", "A", "r", "at", "la", "v", "c", "ea", "an", "d", "p", "va", "ao", "pi", "oa", "e", "sa", "ai", "ata", "aa", "al", "art", "o", "ac", "ma", "ab", "eas", "x", "ar", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "bc", "cb", "r", "fb", "v", "c", "nb", "d", "p", "bi", "br", "j", "bf", "e", "sb", "gb", "o", "bs", "B", "ab", "bb", "base", "eb"], "n": ["nn", "nw", "nia", "yn", "m", "ni", "l", "nt", "t", "s", "N", "fn", "ns", "mn", "nm", "v", "na", "c", "ng", "sn", "ln", "g", "nu", "nb", "rn", "num", "d", "next", "p", "j", "ne", "nor", "np", "nan", "nc", "w", "nl", "new"], "i": ["f", "io", "ini", "ei", "zi", "\u00ed", " bi", "l", "y", "ix", "ti", "ip", "ati", "gi", "v", "ij", "hi", "oi", "ki", "q", "phi", "yi", " ii", "di", "ik", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "I", "li", "u", "ia", "iri", "x", "iti", "iu", "im"]}}
{"code": "N = int(input())\\nA = list(input())\\nB = list(input())\\nC = list(input())\\n\\ncount = 0 \\n\\nfor i in range(N):\\n\tif A[i] == B[i] and A[i] == C[i]:\\n\t\tcontinue\\n\telif A[i] == B[i] or A[i] == C[i] or B[i] == C[i]:\\n\t\tcount +=1\\n\telse:\\n\t\tcount +=2\\nprint(count)", "target": "648", "substitutes": {"N": ["Num", "K", "H", "F", "R", "CNN", "NB", "NI", "M", "NR", "CN", "Len", "NA", "Count", "S", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "P", "T", "GN", "n", "V", "I", "NUM", "NC", "NO", "NN", "NH"], "A": ["App", "AR", "AI", "AA", "Ar", "RA", "AC", "Al", "a", "R", "IA", "AV", "Abs", "CA", "LA", "AL", " AA", "Att", "Av", " AI", "S", "As", "AU", "HA", "AT", "Array", "Ag", "AF", "L", "GA", "An", "At", "This", "AH", "SA", "AS", "The", "AP", "AB", "Art", "I", "Ant", "ACT", "AE"], "B": ["Y", "BE", "Blue", "BB", "BBC", "BS", "VB", "AR", "DB", "H", "EB", "RB", "R", "OB", "G", "SB", "NB", "BO", "WB", "BA", "IB", "BC", "BI", "Be", "Bar", "b", "GB", "E", "L", "TB", "LB", "BG", "PB", "T", "J", "AB", "V", "BT", "I", "BL", "CB", "Bern", "BM", "BR", "Bs"], "C": ["Y", "ISC", "CF", "CE", "H", "AC", "F", "R", "G", "W", "CR", "Cs", "CP", "CON", "CM", "M", "BC", "CA", "CI", "c", "Cu", "CAR", "S", "E", "D", "CL", "CT", "L", "CC", "P", "Q", "T", "Co", "TC", "YC", "J", "CCC", "V", "Cache", "I", "CS", "CB", "EC", "SC", "JC", "Car", "DC"], "count": ["thread", "ount", "found", "sum", "report", "message", "comment", "cond", "counter", "hold", "amount", "nt", "number", "debug", "second", "result", "status", "length", "c", "tag", "state", "index", "group", "Count", "flag", "ct", "must", "nb", "code", "ind", "test", "force", "num", "process", "next", "command", "total", "zero", "bool", "reason", "cache", "weight", "n", "conf", "table", "part", "print", "list", "hash"], "i": ["io", "ini", "str", "ei", "iso", "ri", "zi", "uri", "cli", "chain", "y", "name", "ix", "ios", "ti", "info", "ip", "key", "\u0438", "ci", "ji", "v", "gi", "status", "ij", "c", "ori", "index", "oi", "ki", "q", "b", "ind", "id", "di", "bi", "multi", "j", "pi", "fi", "qi", "isi", "ai", "it", "ii", "iri", "si", "xi", "ic", "uli", "I", "li", "batch", "mac", "us", "dr", "x", "ui", "mi", "iu", "im", "ski", "item"]}}
{"code": "import sys\\nw = sys.stdin.readline().strip().lower()\\nt = sys.stdin.read().lower().split()[:-1]\\nprint(t.count(w))", "target": "142", "substitutes": {"w": ["nw", "iw", "ws", "wh", "fg", "ww", "W", "ow", "wd", "wall", "www", "sw", "r", "v", "wig", "wa", "aw", "wx", "h", "wl", "wn", "wb", "we", "th", "wr", "rew", "p", "window", "rw", "hw", "word", "wt", "ew", "wo", "n", "wal", "wp", "x", "wi", "width"], "t": ["tu", "pt", "tm", "ta", "a", "tt", "nt", "tw", "tp", "dt", "ty", "at", "v", "c", "gt", "ot", "b", "ct", "tg", "tz", "te", "p", "tap", "td", "e", "it", "tf", "wt", "T", "vt", "tr", "txt", "n", "tc", "o", "ts", "rt"]}}
{"code": "n = int(input())\\ns = input()\\ncnt_r = 0\\ncnt_b = 0\\nfor i in range(len(s)):\\n    if s[i] == 'R':\\n        cnt_r+=1\\n    elif s[i] == 'B':\\n        cnt_b +=1\\nif cnt_r > cnt_b:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "160", "substitutes": {"n": ["z", "f", "nn", "m", "l", "nt", "t", "N", "ns", "r", "k", "nm", "v", "na", "c", "sn", "h", "b", "q", "nb", "num", "d", "size", "p", "j", "nc", "o", "nl"], "s": ["ps", "sts", "str", "sv", "ws", "ls", "plays", "ties", "has", "ares", "a", "abilities", "cs", "rs", "t", "gs", "ists", "xs", "ins", "ms", "ns", "r", "ends", "input", "strings", "sp", "v", "es", "c", "hs", "gins", "ers", "tests", "b", "ies", "S", "bits", "ments", "string", "changes", "p", "ains", "ss", "ds", "parts", "ves", "sb", "its", "ses", "bis", "abs", "bs", "sq", "tes", "ats", "ts", "qs", "js"], "cnt_r": ["cnttrs", "cnd_p", "cnt__p", "cNT_r", "cpt_m", "cnt__rd", "cpt_r", "cnt__b", "cnd_r", "cpt_b", "cnt__rs", "cnttp", "cpt_rb", "cNT_e", "cnt_p", "cnt_R", "cNT_p", "cnd_rs", "cnt_rd", "cnt_m", "cnttrd", "cnttr", "cnt_e", "cnt__r", "cnt__rb", "cNT_R", "cnd_rd", "cnt_rb", "cnt__m", "cnt_rs"], "cnt_b": ["cnt_B", "cnt2b", "cnt2l", "cnt_a", "cnc_e", "cnc_B", "cot_b", "cnt2p", "cnc_r", "cot_p", "cot_a", "cot_r", "cct_b", "cnt_l", "cct_l", "cnt2r", "cnt2B", "cnt_p", "cnc_b", "cct_r", "cnt_e", "cnt2a", "cct_B"], "i": ["f", "ini", "ri", "zi", "\u00ed", "m", "y", "this", "ix", "ti", "info", "\u0438", "ci", "k", "ji", "ch", "gi", "ij", "c", "ori", "index", "q", "b", "yi", "ind", "id", "di", "p", "bi", "multi", "j", "pi", "qi", "e", "it", "ii", "uli", "si", "iri", "xi", "ic", "I", "li", "ia", "x", "ui", "mi", "iu", "im"]}}
{"code": "x, y = map(int, input().split())\\ngroup = {\\n    1:1,\\n    3:1,\\n    5:1,\\n    7:1,\\n    8:1,\\n    10:1,\\n    12:1,\\n    4:2,\\n    6:2,\\n    9:2,\\n    11:2,\\n    2:3\\n}\\nif group[x] == group[y]:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "206", "substitutes": {"x": ["z", "f", "xp", "X", "a", "xy", "l", "ix", "xs", "xa", "i", "ax", "xx", "input", "v", "xt", "dx", "wx", "index", "g", "ex", "fx", "p", "rx", "xc", "ox", "xe", "xi", "n", "w", "left", "xf", "xd", "tx"], "y": ["Y", "ym", "yl", "ay", "yout", "my", "xy", "l", "py", "t", "yer", "iy", "isy", "by", "sy", "i", "key", "yy", "oy", "ip", "yt", "v", "gy", "ot", "b", "g", "ory", "ny", "er", "fy", "ady", "j", "dy", "uy", "axy", "n", "o", "vy", "cy", "yp", "hy", "sky", "ly"], "group": ["map", "type", "groups", "sum", "field", "GROUP", "order", "name", "number", "handle", "close", "dict", "row", "ready", "hash", "step", "back", "key", "gr", "status", "check", "match", "condition", "mask", "store", "g", "pair", "flag", "use", "defined", "force", "pattern", "tool", "process", "p", "join", "window", "book", "zero", "block", "component", "graph", "roup", "part", "set", "print", "Group", "panel", "list", "save", "where", "scope", "data", "project"]}}
{"code": "import re\\n\\nS = input()\\npat = r'A?KIHA?BA?RA?$'\\nprint('YES' if re.match(pat, S) else 'NO')", "target": "796", "substitutes": {"S": ["SER", "BS", "SI", "H", "C", "X", "SS", "F", "R", "G", "W", "SB", "JS", "PS", "s", "N", "M", "A", "INS", "E", "DS", "Source", "D", "SN", "NS", "SAM", "L", "P", "TS", "Q", "T", "AS", "SA", "V", "I", "B", "CS", " s", "GS", "Set"], "pat": ["ps", "str", "bat", "feat", "pr", "Pattern", "cat", "pad", "atten", "att", "rep", "rot", "res", "Pat", "pal", "repl", "mut", "pen", "prot", "re", "pattern", "cmd", "pd", "path", "fun", "p", "exp", "pl", "act", "trans", "capt", "mat", "psy", "reg", "lat", "sat", " Pat", "patch", "ser", "proc", "dat"]}}
{"code": "N,T=map(int,input().split())\\nt=[int(i) for i in input().split()]+[10**15]\\nans=0\\nfor i in range(N):\\n    ans+=min(t[i+1]-t[i],T)\\nprint(ans)\\n", "target": "355", "substitutes": {"N": ["Num", "K", "H", "C", "F", "R", "Ni", "CNN", "NB", "NI", "M", "NR", "A", "MN", "Na", "NA", "S", "ND", "NT", "D", "NS", "L", "NM", "TN", "P", "No", "GN", "J", "n", "V", "I", "Ns", "NO", "NN", "NH"], "T": ["Y", "TR", "K", "C", "X", "Total", "F", "R", "WT", "G", "MT", "W", "M", "A", "Type", "S", "E", "O", "D", "AT", "L", "TB", "TP", "TN", "TS", "P", "Q", "J", "V", "I", "B", "TT", "GT", "XT", "PT"], "t": ["type", "f", "tu", "target", "max", "tmp", "pt", "tm", "m", "ent", "ta", "l", "nt", "tt", "s", "tp", "dt", "ty", "c", "gt", "ot", "b", "q", "g", "temp", "tree", "test", "tz", "te", "p", "total", "td", "e", "it", "wt", "tr", "time", "up", "n", "table", "o", "ts", "rt"], "i": ["f", "ini", "ei", "ri", "zi", "\u00ed", "cli", "uri", "m", "ogi", "y", "ix", "iy", "ti", "info", "ip", "ci", "\u0438", "k", "ji", "gi", "v", "ij", "c", "hi", "oi", "index", "ki", "q", "phi", "b", "g", "ori", "ami", "yi", "ind", "id", "di", "ik", "bi", "multi", "pi", "qi", "ai", "it", "int", "ii", "iri", "xi", "si", "n", "ic", "li", "u", "I", "ia", "x", "ui", "mi", "iu", "im"], "ans": ["ens", "rors", "wan", "cas", "ls", "AN", "oss", "ean", "cs", "rs", "pan", "amps", "iann", "s", "ms", "ins", "ars", "aus", "ns", "ons", "anas", "ann", " Ans", "acs", "aps", "aos", "arts", "beans", "ents", "ians", "rans", "eds", "yes", " means", "vs", "ANS", "can", "nas", "uns", "offs", "anes", "nan", "mean", "ams", "ras", "ats", "ros", "ts", "anks", "an", "ants", "lan"]}}
{"code": "a,b=map(int,input().split())\\nprint(b+100*max(10-a,0))\\n", "target": "250", "substitutes": {"a": ["f", "ba", "m", "ae", "be", "l", "t", "ga", "s", "au", "i", "A", "ca", "r", "at", "la", "c", "ea", "g", "d", "p", "da", "app", "act", "oa", "e", "sa", "aa", "aj", "n", "ac", "ma", "ab", "x", "an", "auto"], "b": ["f", "rb", "ba", "m", "mb", "blue", "be", "l", "y", "t", "bc", "s", "i", "cb", "fb", "r", "v", "db", "c", "h", "g", "wb", "nb", "d", "bi", "br", "j", "e", "sb", "gb", "bis", "n", "bs", "u", "B", "ab", "bb", "eb"]}}
{"code": "# 34\\nA = int(input())\\nB = int(input())\\nC = int(input())\\nX = int(input())\\n\\nans = 0\\nfor a in range(0, A + 1):\\n    if 500 * a > X: continue\\n    for b in range(0, B + 1):\\n        if 500 * a + 100 * b > X: continue\\n        for c in range(0, C + 1):\\n            if 500 * a + 100 * b + 50 * c == X: ans +=1\\n\\nprint(ans)", "target": "439", "substitutes": {}}
{"code": "print(3-sum(i!=j for i,j in zip(*open(0))))", "target": "773", "substitutes": {"i": ["mu", "f", "z", "zi", "m", "a", "l", "y", "t", "ip", "r", "ji", "v", "ij", "c", "h", "q", "b", "phi", "yi", "ie", "di", "ik", "p", "bi", "pi", "e", "ai", "ii", "xi", "n", "ic", "I", "li", "u", "ia", "x", "iu"], "j": ["z", "f", "jl", "ja", "l", "t", "jp", "r", "ji", "k", "v", "json", "ij", "c", "q", "b", "g", "jac", "ie", "d", " J", "p", "oj", "kj", "jj", "jump", "J", "n", "dj", "x", "js", "jc"]}}
{"code": "#!/usr/bin/env python3\\nimport math\\n\\nn = int(input())\\nx = {}\\n\\nfor i in range(1, 50001):\\n    x.setdefault(math.floor(i * 1.08), i)\\n\\n\\ntry:\\n    print(x[n])\\nexcept:\\n    print(\":(\")\\n", "target": "194", "substitutes": {}}
{"code": "n = int(input())*2\\narr = list(map(int, input().split()))\\narr = sorted(arr)\\nsum = 0\\nfor i in range(0,n,2):\\n  sum += arr[i]\\nprint(sum)", "target": "215", "substitutes": {"n": ["z", "nw", "nn", "m", "l", "nt", "t", "s", "N", "ns", "mn", "k", "v", "na", "c", "sn", "q", "nd", "h", "cn", "nu", "nb", "num", "d", "size", "p", "j", "ne", "net", "gn", "nor", "np", "nan", "nc", "no", "nl", "ll"], "arr": ["map", "img", "sys", "str", "obj", "tmp", "array", "annot", "load", "iq", "bl", "my", "xy", "elt", "all", "nt", "auto", "dict", "au", "fr", "attr", "expr", "r", "err", "gr", "adj", "ang", "res", "compl", "db", "resp", "alg", "b", "mp", "val", "ind", "Array", "cur", "br", "frac", "agg", "pl", "alph", "act", "buf", "av", "vol", "align", "impl", "np", "gb", "aa", "abs", "arb", "coll", "ab", "aaa", "list", "dr", "rel", "arg", "vals", "enc", "data", "inst", "dat"], "sum": ["gam", "add", "max", "med", "SI", " summed", "rup", "loss", "oss", "hum", "dev", "se", "score", "Sum", "su", "au", "s", " Sum", "say", "final", "cal", "ums", "temp", "sim", "num", "mem", "size", "cos", "sam", "total", "av", "sa", "vol", "mean", "average", "weight", "cum", "summary", "us", "sat", "um", "success", " SUM", "dot", "hash", "cost", "hist", "count"], "i": ["ini", "zi", "m", "ix", "ti", "s", "ip", "key", "\u0438", "ji", "gi", "v", "ij", "ori", "index", "ki", "yi", "sim", "ind", "id", "di", "bi", "multi", "vi", "j", "pi", "qi", "ai", "ii", "xi", "si", "ic", "li", "I", "x", "ui", "mi", "im"]}}
{"code": "a, b, c, k = map(int, input().split())\\nans = a - b\\nif abs(ans) > 1e18 :\\n    print(\"Unfair\")\\nelif k % 2 == 0 :\\n    print(ans)\\nelse :\\n    print(-ans)\\n", "target": "669", "substitutes": {"a": ["z", "f", "ba", "m", "ap", "am", "ta", "l", "t", "af", "au", "xa", "i", "A", "r", "at", "v", "p", "alpha", "da", "j", "e", "sa", "aa", "al", "ac", "art", "n", "abs", "w", "u", "ab", "x", "ar", "an"], "b": ["f", "rb", "ba", "ib", "m", "blue", "be", "l", "y", "big", "bc", "i", "cb", "fb", "r", "ca", "v", "db", "ble", "g", "p", "bi", "br", "j", "bf", "e", "gb", "beta", "bis", "n", "bs", "u", "B", "ab", "x", "bb", "base"], "c": ["f", "mc", "m", "C", "cr", "l", "y", "t", "cs", "bc", "ci", "ca", "cb", "v", "lc", "g", "cc", "d", "p", "col", "ec", "e", "cd", "dc", "n", "x", "cm"], "k": ["z", "dk", "f", "K", "m", "kr", "kind", "kh", "ka", "t", "ck", "kl", "i", "kk", "ke", "v", "mk", "q", "ak", "ijk", "num", "ik", "kok", "p", "km", "j", "kj", "kw", "n", "o", "w", "sk", "ko", "x", "ku", "ks"], "ans": ["ens", "ps", "ls", "aned", "vers", "cs", "rs", "cons", "pan", "gs", "amps", "lan", "iann", "s", "ins", "anas", "ms", "aus", "ns", "ons", "ars", "ann", "outs", "aps", "news", "aos", "arts", "ents", "ians", "rans", "san", "vs", "ANS", "leans", "uns", "nas", "offs", "anes", "nan", "ams", "ras", "ates", "ats", "us", "ros", "vals", "ts", "anks", "ana", "an", "ks", "ants", "olds", "ions", "ows"]}}
{"code": "import math\\nwhile True:\\n    a=0\\n    A=0\\n    b=0\\n    n=int(input())\\n    if n==0:\\n        break\\n    s=list(map(int,input().split()))\\n    S=sum(s)\\n    m=S/n\\n    for i in range(n):\\n        b=(s[i]-m)**2\\n        a=a+b\\n    A=a/n\\n    C=math.sqrt(A)\\n    print(C)\\n", "target": "683", "substitutes": {"a": ["f", "ba", "ap", "am", "ae", "l", "y", "t", "au", "result", "xa", "r", "at", "c", "ea", "g", "area", "d", "p", "alpha", "e", "sa", "ai", "ata", "aq", "aa", "al", "ac", "o", "ma", "u", "ia", "ab", "aaa", "x", "ar", "an"], "A": ["K", "AA", "H", "AC", "R", "IA", "G", "N", "M", "xa", "ABC", "CA", "EA", "U", "JA", "E", "As", "D", "Va", "AU", "alpha", "L", "AF", "GA", "An", "Ca", "mA", "P", "sa", "AM", "And", "T", "AE", "AB", "Z", "V", "I", "B", "Alpha", " B", "am", "SA"], "b": ["z", "f", "rb", "ba", "ib", "be", "l", "y", "t", "bc", "cb", "r", "fb", "v", "db", "c", "h", "g", "nb", "d", "p", "bi", "br", "j", "bf", "e", "sb", "beta", "o", "bs", "ub", "B", "ab", "bb", "eb"], "n": ["f", "nn", "sum", "l", "nt", "t", "number", "nr", "N", "len", "ns", "r", "k", "nm", "M", "v", "na", "c", "ln", "sn", "q", "an", "g", "cn", "nu", "nb", "num", "d", "size", "p", "j", "network", "ne", "nor", "np", "nc", "o", "u", "no", "nl", "x", "count"], "s": ["ps", "stats", "sts", "sv", "ls", "plays", "spec", "l", "rs", "t", "gs", "xs", "ms", "ins", "os", "ns", "r", "strings", "sp", "services", "sl", "c", "h", "tests", "ies", "p", "ss", "ds", "sb", "its", "items", "bs", "ats", "als", "ts", "qs", "js"], "S": ["Y", "Sm", "SI", "H", "Si", "SS", "X", "F", "R", "G", "W", "SB", "N", "M", "U", "D", "NS", "SU", "L", "P", "Q", "MS", "T", "J", "Z", "V", "I", "B", "Ns", "SA"], "m": ["mu", "f", "gm", "mc", "tm", "l", "y", "sm", "t", "ms", "M", "mn", "r", "nm", "v", "em", "c", "bm", "pm", "h", "g", "dm", "num", "p", "vm", "man", "j", "o", "ma", "mm", "mi", "cm"], "i": ["ini", "ri", "zi", "uri", "ix", "ti", "ip", "key", "r", "ji", "gi", "ij", "c", "ori", "index", "ki", "ind", "id", "di", "bi", "j", "pi", "fi", "ai", "ii", "xi", "si", "ic", "li", "u", "I", "x", "mi"], "C": ["CF", "CO", "R", "G", "CNN", "Cs", "CON", "CM", "N", "M", "Cont", "CA", "CN", "BC", "CSS", "c", "CV", "GC", "CD", "E", "D", "CT", "VC", "CC", "Cal", "Cr", "LC", "OC", "Co", "T", "CCC", "B", "CS", "EC", "SC", "JC", "CB", "DC", "CG"]}}
{"code": "S = input()\\n\\nresult = (15 - len(S) + S.count(\"o\")) >= 8\\n\\nif result:\\n    print(\"YES\")\\nelse:\\n    print(\"NO\")\\n", "target": "656", "substitutes": {"S": ["SER", "BS", "SI", "H", "C", "Si", "SS", "X", "F", "R", "SL", "G", "SB", "SM", "s", "N", "M", "A", "SEC", "ST", "E", "O", "DS", "D", "STR", "SU", "L", "SP", "P", "TS", "Q", "T", "SF", "SE", "V", "I", "B", "CS", "SA"], "result": ["successful", "know", "figure", "different", "die", "specified", "confirmed", "chain", "this", "section", "present", "su", "functional", "make", "final", "point", "r", "answer", "res", "created", "status", "match", "mask", "profile", "complete", "test", "exist", "there", "successfully", "process", "necessary", "same", "feature", "product", "valid", "results", "Result", "mate", "correct", "success"]}}
{"code": "n=int(input())\\nl=[list(map(int,input().split())) for _ in range(n)]\\ndp=[[0]*3 for _ in range(n)]\\ndp[0]=l[0]\\nfor i in range(n-1):\\n    for j in range(3):\\n        dp[i+1][j]=max(dp[i][(j+1)%3],dp[i][(j+2)%3])+l[i+1][j]\\nprint(max(dp[n-1]))", "target": "555", "substitutes": {"n": ["z", "nn", "nia", "names", "m", "a", "nt", "t", "name", "s", "N", "len", "ns", "mn", "k", "r", "en", "fn", "v", "na", "c", "ln", "sn", "q", "h", "ng", "g", "cn", "nu", "nb", "rn", "num", "d", "size", "p", "dn", "pi", "network", "ne", "net", "np", "nan", "nc", "o", "no", "nl", "x", "on", "ll"], "l": ["fl", "ol", "lines", "ls", "le", "m", "lv", "t", "lis", "kl", "s", "il", "lb", "v", "ul", "sl", "c", "ln", "h", "b", "lc", "g", "ml", "d", "dl", "p", "L", "lp", "pl", "hl", "lr", "li", "u", "nl", "list", "rl", "lists", "ll"], "_": ["let", " cpu", "ay", "__", "place", " __", "ity", "val", " the", "___"], "dp": ["ps", "ld", "DL", "pr", "deb", "adr", "pu", "df", "pkg", "wd", "pb", "gp", "dd", "pp", "jp", "tp", "dt", "db", "sl", "vp", "dq", "pm", "fp", "imp", "isp", "di", "dm", "pd", "d", "du", "dl", "p", "dep", "layer", "ds", "lp", "cp", "pl", "dial", "uf", "dc", "lr", "DP", "dh", "dj", "dr", "lists"], "i": ["f", "ei", "ini", "zi", "this", "ix", "ti", "ip", "ci", "\u0438", "ji", "at", "gi", "v", "ij", "hi", "index", "q", "b", "ami", "ind", "id", "di", "ik", "d", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "I", "li", "ia", "me", "x", "ui", "mi", "iu", "im"], "j": ["z", "f", "str", "obj", "jl", "pt", "m", "ja", "jit", "y", "note", "fr", "key", "jp", "k", "ji", "err", "dt", "v", "sp", "json", "ij", "job", "q", "b", "g", "jac", "ijk", "di", "d", "p", "gov", "br", "kj", "jas", "it", "jj", "jump", "aj", "J", "o", "ju", "uj", "dj", "x", "bj", "js", "jc"]}}
{"code": "N = int(input())\\nif N % 2 == 0:\\n    answer = 0\\n    N //= 2\\n    for i in range(100):\\n        answer += N // 5\\n        N //= 5\\n    print(answer)\\nelse:\\n    print('0')", "target": "211", "substitutes": {"N": ["DN", "Number", "Num", "K", "NE", "H", "C", "NF", "X", "AN", "F", "G", "CNN", "NB", "NI", "EN", "M", "NV", "NR", "CN", "A", "NA", "Size", "S", "E", "O", "NT", "D", "SN", "NS", "FN", "Node", "L", "NM", "TN", "P", "No", "Q", "UNE", "You", "T", "MAN", "J", "Z", "n", "V", "Answer", "I", "B", "NUM", "NC", "Ns", "MIT", "NO", "NN", "Network", "NH"], "answer": ["ine", "ve", "issue", " unanswered", "array", "ta", "vote", "voice", "equ", "poll", "urn", "wer", "archive", "result", "say", "output", "adj", "answered", "value", "interpret", "v", "vantage", "open", "query", "index", "remember", "term", "ot", "q", "eni", "ze", "option", "ce", "accept", "form", "record", "address", "aq", "energy", "n", "Answer", "audio", "swers", "offer", "response", "example", "don", "question", "um", "entry", "vert"], "i": ["ir", "iii", "ite", "ix", "k", "il", " j", "ij", "h", "ind", "id", " ii", "j", "ai", "it", "ii", "n", "li", "I", "ia", "iter", "x", "on", "im"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\n\\n\\ndef solve(s: str, K: int):\\n    n = len(s)\\n    ss = {\\n        s[i:j]\\n        for i in range(n)\\n        for j in range(i + 1, min(n + 1, i + K + 1))\\n    }\\n    print(sorted(ss)[K - 1])\\n \\n\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    s = next(tokens)  # type: str\\n    K = int(next(tokens))  # type: int\\n    solve(s, K)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "246", "substitutes": {}}
{"code": "a=list(map(int,input().split()))\\n\\nb=a[0]*a[1]\\nc=a[2]*a[3]\\n\\nif b-c>0:\\n  print(b)\\n\\nelse:\\n  print(c)", "target": "754", "substitutes": {"a": ["f", "ba", "abc", "apa", "array", "ap", "am", "ae", "att", "l", "all", "t", "sta", "ga", "au", "ars", "ed", "A", "ca", "at", "es", "words", "ea", "h", "aux", "area", "go", "p", "alpha", "da", "app", "oa", "act", "parts", "args", "sa", "ata", "aq", "aa", "each", "up", "abs", "ac", "ma", "ab", "eas", "aaa", "x", "an", "data", "ast", "aff", "auto"], "b": ["f", "rb", "ba", "ib", "m", "bl", "mb", "be", "l", "t", "bc", "i", "bg", "bh", "cb", "fb", "r", "db", "v", "g", "wb", "nb", "d", "p", "bt", "bi", "br", "bf", "sb", "gb", "bo", "beta", "ob", "bs", "B", "ab", "bb", "base", "eb"], "c": ["f", "sc", "m", "C", "cat", "cr", "cs", "l", "bc", "cf", "con", "rc", "cin", "cb", "ca", "ch", "ci", "r", "v", "co", "lc", "gc", "g", "ct", "cc", "unc", "ce", "d", "cos", "cur", "cp", "ec", "com", "e", "cd", "dc", "fc", "ac", "tc", "ic", "n", "u", "cu", "x", "cm"]}}
{"code": "n = int(input())\\nb = list(map(int, input().split()))\\nprocedure = [-1] * n\\ntmp_n = n\\nfor m in range(n-1, -1, -1):\\n    for i in range(tmp_n-1, -1, -1):\\n        if b[i] == i+1:\\n            procedure[m] = i + 1\\n            del b[i]\\n            tmp_n -= 1\\n            break\\n    else:\\n        print(-1)\\n        exit()\\nfor i in range(n):\\n    print(procedure[i])\\n", "target": "593", "substitutes": {"n": ["f", "nn", "out", "nia", "names", "a", "l", "nt", "t", "number", "nr", "s", "N", "len", "ns", "r", "k", "v", "na", "c", "ln", "sn", "an", "nd", "g", "h", "cn", "nu", "nb", "num", "d", "size", "p", "dn", "j", "network", "pi", "ne", "net", "gn", "np", "nan", "nc", "o", "nl", "x", "count"], "b": ["f", "rb", "ba", "ib", "a", "be", "l", "y", "t", "bc", "bp", "pb", "cb", "r", "byte", "db", "v", "c", "bit", "nb", "bank", "d", "p", "bi", "bf", "e", "sb", "it", "binary", "gb", "ob", "o", "bs", "B", "ab", "bb", "eb"], "procedure": ["prcture", "proceURE", "procodute", "procedction", "procture", "prcturation", "procedute", "prcedction", "prcedure", "proceduration", "Proceure", "Procedicate", "procodure", "proceicate", "procodicate", "procdure", "prctction", "propertURE", "propertute", "properture", "procticate", "prctURE", "procdute", "ProcedURE", "proceuration", "Proceicate", "ProceURE", "procdURE", "prceduration", "proctURE", "procturation", "prctute", "proctute", "procedicate", "Procedute", "procedURE", "proceute", "procection", "propertction", "proctction", "procodURE", "Procedure", "Proceute", "prcedURE", "prcedute", "proceure", "procduration"], "tmp_n": ["tmp_ns", "tmp2N", "tmp_nan", "tmp2num", "tmp4n", "tmp_1", "mp_nan", "mp_num", "tmp_c", "mp2n", " tmp_ns", "tmp2n", "mp2num", "mp_c", "mp2N", "tmp_size", "tmp4ns", "mp_n", "mp_N", " tmp_1", "tmp2nan", " tmp_num", "tmp41", "mp_size", "tmp_num", "mp2nan", "tmp_N", "tmp4num"], "m": ["mu", "f", "gm", "mc", "am", "a", "l", "y", "t", "s", "M", "mn", "k", "r", "at", "v", "mis", "arm", "c", "index", "mut", "h", "g", "mx", "ind", "id", "dm", "num", "d", "p", "j", "pi", "mt", "om", "o", "ma", "li", "mm", "mid", "mi", "im", "cm"], "i": ["ini", "ei", "ri", "zi", "a", "l", "y", "t", "ix", "iy", "ti", "ip", "ci", "\u0438", "k", "ji", "gi", "v", "ij", "ori", "index", "oi", "ki", "yi", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "o", "ic", "li", "I", "ia", "u", "x", "ui", "mi", "iu", "im", "iti", "ski"]}}
{"code": "n=int(input())\\nl=[list(map(int,input().split())) for i in range(n)]\\n\\nfor x in range(101):\\n    for y in range(101):\\n        k=set(e+abs(x-q)+abs(w-y)  for q,w,e in l if e)\\n        for pre in k:\\n            for a,s ,d in l:\\n\\n                if d!=max(0,pre-abs(x-a)-abs(s-y)):break\\n            else:print(x,y,pre);exit()", "target": "114", "substitutes": {"n": ["z", "nn", "m", "ni", "nt", "t", "nr", "N", "ns", "mn", "v", "na", "c", "ln", "sn", "cn", "nu", "nb", "num", "p", "j", "network", "ne", "net", "np", "nc", "o", "no", "nl"], "l": ["z", "f", "els", "ls", "let", "yl", "el", "le", "m", "t", "lin", "kl", "len", "r", "v", "sl", "c", "lt", "ln", "h", "b", "lc", "g", "dl", "p", "L", "j", "lp", "pl", "hl", "o", "li", "left", "nl", "list", "rl", "lists", "ll"], "i": ["io", "ini", "zi", "ir", "ix", "ti", "ip", "ci", "il", "v", "b", "ie", "ind", "id", "di", "ik", "j", "pi", "it", "xi", "ic", "o", "li", "u", "im"], "x": ["z", "f", "m", "X", "xd", "ux", "xy", "t", "ix", "xs", "xa", "ax", "xx", "r", "v", "xt", "dx", "wx", "c", "h", "g", "ex", "fx", "re", "p", "rx", "j", "xc", "ox", "xe", "int", "xi", "o", "zx", "tx"], "y": ["Y", "z", "ym", "ey", "yl", "yo", "yn", "ay", "my", "xy", "py", "t", "iy", "sy", "oy", "yy", "ch", "yt", "v", "gy", "b", "ys", "g", "yi", "wy", "ny", "fy", "p", "j", "ry", "uy", "ye", "yr", "o", "vy", "cy", "hy", "ly"], "k": ["K", "m", "kr", "kt", "kh", "ka", "ck", "kl", "ikk", "ok", "kk", "ke", "kar", "mk", "ki", "b", "kn", "ak", "ijk", "wk", "ik", "p", "km", "j", "kj", "ek", "ken", "kw", "o", "ko", "ku", "ks"], "e": ["pe", "f", "ei", "el", "le", "ent", "m", "ae", "be", "se", "t", "ite", "ed", "r", "en", "ue", "es", "c", "ea", "b", "g", "ex", "ge", "E", "ate", "ie", "eu", "oe", "er", "ze", "te", "p", "ec", "et", "ee", "eg", "o", "u", "me"], "q": ["z", "f", "ay", "qa", "m", "qv", "t", "ix", "r", "ch", "v", "c", "dq", "h", "b", "g", "ie", "p", "j", "qi", "ox", "Q", "al", "o", "u", "qu"], "w": ["z", "f", "nw", "ws", "m", "t", "W", "tw", "wd", "sw", "r", "v", "wa", "wx", "h", "wl", "g", "ex", "wb", "we", "p", "rw", "wt", "ew", "o", "u", "wp", "wi"], "pre": ["ps", "ve", "pr", "m", "cond", "pan", "t", "common", "dict", "PRE", "step", "key", "jp", "adj", "un", "db", "sp", "before", "gre", "v", "ij", "pret", "post", "val", "mp", "temp", "re", "Pre", "er", "inter", "prev", "next", "p", "j", "pi", "ne", "new", "pri", "o", "pres", "dj", "set", "prefix", "prime", "pro", "after"], "a": ["z", "f", "ba", "m", "ae", "t", "au", "xa", "A", "r", "at", "v", "pa", "c", "ea", "an", "h", "b", "area", "p", "ao", "j", "ai", "sa", "aq", "aa", "aj", "al", "o", "u", "ab", "ar", "am"], "s": ["z", "ps", "sys", "f", "sv", "ls", "sr", "t", "sw", "v", "sp", "sd", "sl", "c", "es", "ys", "b", "h", "g", "ies", "S", "p", "ss", "j", "ds", "sb", "sa", "so", "si", "o", "south", "ts", "st"], "d": ["z", "f", "done", "diff", "m", "t", "pos", "dict", "did", "ed", "r", "dt", " D", "v", "dx", "c", "h", "b", "g", "ind", "D", "di", "de", "pd", "p", "do", "da", "j", "ds", "dh", "dp", "ad", "o", "dr"]}}
{"code": "#harshad number \\nn = int(input()) \\nflag = 0 \\nn_str = str(n) \\nn_len = len(n_str) \\nn_digit = 0 \\nfor i in range(n_len):\\n    n_digit += int(n_str[i]) \\n\\nif n % n_digit == 0: \\n    flag = 1\\n\\n\\n\\nif flag:\\n    print('Yes') \\nelse:\\n    print('No')\\n", "target": "161", "substitutes": {}}
{"code": "N, K = map(int, input().split())\\n\\nif K == 1:\\n  print(0)\\n  exit()\\n\\nif N > K:\\n  print(N - K)\\nelse:\\n  print(0)", "target": "739", "substitutes": {"N": ["Num", "H", "C", "X", "AN", "F", "R", "G", "CNN", "NB", "NG", "M", "NR", "A", "MN", "NP", "NA", "S", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "Z", "n", "V", "I", "Ns", "NC", "NUM", "NO", "NN", "NH"], "K": ["HK", "Y", "KA", "KN", "FK", "PK", "H", "C", "X", "F", "KK", "SK", "G", "M", "A", "k", "MN", "KR", "MC", "KB", "Kent", "KI", "Mask", "KS", "TH", "S", "NK", "D", "KING", "UK", "L", "DK", "P", "Q", "KE", "T", "J", "KEY", "Z", "V", "I", "B", "KC", "MK"]}}
{"code": "S = sorted(input())\\nT = sorted(input())[::-1]\\nprint(\"Yes\" if S<T else \"No\")", "target": "260", "substitutes": {"S": ["Y", "BS", "SI", "H", "C", "Si", "SS", "X", "F", "R", "SL", "G", "W", "LS", "PS", "s", "N", "M", "A", "IS", "E", "DS", "D", "NS", "SU", "L", "Su", "P", "TS", "Q", "SH", "SA", "SF", "J", "Z", "VS", "V", "SE", "I", "AS", "B", "CS", "GS"], "T": ["Y", "TR", "H", "C", "X", "F", "R", "G", "WT", "N", "M", "A", "TA", "TH", "E", "O", "D", "TG", "L", "TN", "TM", "P", "TS", "TI", "Q", "J", "Z", "V", "I", "B", "TX", "TT", "GT", "XT", "PT"]}}
{"code": "x = int(input())\\nD = []\\nfor i in range(x):\\n    d = int(input())\\n    D.append(d)\\nk = []\\ncount = 1\\nd = max(D)\\nk.append(d)\\nD.remove(d)\\nfor j in range(x-1):\\n    c = max(D)\\n    if c < d:\\n        k.append(c)\\n        d = c\\n        count += 1\\n    D.remove(c)\\n\\nprint(count)", "target": "347", "substitutes": {"x": ["z", "f", "max", "xes", "m", "xp", "X", "xy", "l", "y", "t", "ix", "xs", "xx", "ax", "r", "v", "history", "xt", "dx", "wx", "h", "ex", "width", "p", "rx", "xc", "e", "xi", "n", "batch", "px", "w", "no", "xf", "tx", "st"], "D": ["Y", "Data", "DL", "K", "VD", "DB", "PD", "Dr", "C", "X", "WD", "F", "R", "Do", "G", "W", "DD", "FD", "Date", "DJ", "Query", "N", "M", "Dec", "A", "Ds", "Max", "DA", "CD", "XXX", "Count", "S", "DX", "DIR", "ND", "O", "E", "DS", "Dir", "All", "Can", "DH", "L", "Default", "Def", "Don", "ds", "TD", "DOM", "P", "DK", "DR", "AD", "Q", "And", "DM", "DP", "T", "J", "V", "I", "B", "DE", "DC", "DO", "DI"], "i": ["f", "ir", "l", "y", "r", "v", "h", "b", "yi", "ie", "ind", " ii", "ik", "e", "it", "n", "ic", "o", "I", "u", "li", "im"], "d": ["f", "done", "add", "max", "min", "ld", "mind", "date", "m", "ord", "l", "y", "t", "name", "debug", "dos", "did", "dd", "r", "dt", "div", "db", "sd", "dx", "nd", "b", "g", "ct", "ind", "di", "de", "pd", "do", "dn", "da", "dl", "p", "ds", "end", "td", "e", "dom", "cd", "dy", "int", "dh", "ad", "n", "delay", "dec", "dr", "dot", "data", "new", "dat", "fd"], "k": ["z", "K", "m", "kr", "kh", "ka", "l", "ck", "kl", "ok", "kk", "kan", "ke", "ch", "sch", "r", "v", "mk", "mask", "h", "q", "th", "ak", "kn", "id", "ik", "p", "km", "cp", "ek", "kw", "n", "sk", "ko", "ku", "ks", "ack"], "count": ["thread", "z", "ount", "found", "sum", "report", "child", "comment", "find", "counter", "hold", "nt", "amount", "common", "number", "debug", "cycle", "delete", "result", "err", "check", "status", "length", "index", "state", "start", "group", "Count", "flag", "position", "ct", "used", "code", "ind", "id", "num", "call", "change", "process", "total", "const", "current", "error", "conf", "cache", "n"], "j": ["z", "f", "ey", "ion", " iii", "el", "zi", "l", "y", "ix", "ji", "v", "ij", "ket", "q", "ind", "oj", "kj", "ai", "jj", "J", "o", "uj", "dj", "no", "li", "jc"], "c": ["f", "max", "sc", "mc", "m", "C", "cat", "cr", "cut", "cs", "l", "t", "bc", "cf", "con", "ci", "ca", "cb", "r", "v", "co", "cal", "cv", "h", "b", "lc", "gc", "cc", "ct", "ce", "cur", "can", "p", "cp", "ec", "e", "cd", "dc", "uc", "fc", "ac", "tc", "ic", "cu", "n", "u", "cm"]}}
{"code": "x,y=map(int,input().split())\\nif x%y:\\n  print(x*(y-1))\\nelse:\\n  print(-1)", "target": "396", "substitutes": {"x": ["z", "f", "m", "xp", "X", "xy", "l", "ix", "xs", "xa", "i", "xx", "ax", "step", "k", "v", "dx", "wx", "index", "ex", "width", "fx", "d", "p", "rx", "xxx", "xc", " xx", "e", "ox", "xe", "int", "xi", "n", "lex", "px", "w", "left", "xf", "xd", "tx"], "y": ["Y", "z", "sys", "type", "yo", "ym", "yl", "ey", "ay", "m", "my", "xy", "py", "t", "iy", "oy", "i", "sy", "yy", "ty", "yt", "ch", "v", "co", "gy", "ys", "b", "ies", "ny", "fy", "height", "hot", "ry", "dy", "uy", "np", "ye", "axy", "n", "yr", "cy", "iny", "hy", "sky", "ly"]}}
{"code": "n=int(input())\\nd=[int(x) for x in input().split()]\\nif n%2==1:\\n    print(0)\\n    exit()\\nd.sort()\\nprint(d[n//2]-d[n//2-1])", "target": "415", "substitutes": {"n": ["f", "nn", "names", "m", "l", "all", "t", "nt", "name", "N", "i", "len", "ns", "mn", "nm", "en", "v", "na", "c", "ln", "sn", "ng", "q", "b", "g", "h", "nu", "nb", "num", "size", "p", "dn", "ne", "total", "nor", "np", "nan", "nc", "w", "no", "nl", "norm"], "d": ["z", "done", "ld", "m", "df", "ord", "l", "t", "dos", "debug", "dict", "ed", "s", "dd", "i", "r", "created", "div", "dt", "db", "sd", "dx", "c", "b", "nd", "g", "ind", "D", "di", "pd", "de", "do", "p", "da", "dl", "j", "ds", "td", "dh", "dates", "o", "w", "dot", "data", "dat", "fd"], "x": ["z", "ey", "xes", "xp", "X", "ux", "xy", "l", "y", "ix", "xs", "xa", "i", "xx", "ax", "xb", "k", "v", "dx", "wx", "q", "mx", "ex", "val", "fx", "p", "rx", "xc", "e", "ox", "xe", "xi", "lex", "px", "xf", "tx"]}}
{"code": "o=input()\\ne=input()\\npw=\"\"\\nfor i in range(len(o)+len(e)):\\n  if i%2==0:\\n    pw=pw+o[i//2]\\n  else:\\n    pw=pw+e[i//2]\\nprint(pw)", "target": "102", "substitutes": {"o": ["f", "io", "ol", "vo", "yo", "m", "a", "l", "y", "t", "ow", "s", "os", "\u00f6", "opl", "orea", "h", "ot", "fo", "b", "lo", "O", "oe", "d", "p", "ao", "oa", "ro", "oh", "mo", "ox", "so", "po", "onet", "bo", "ode", "n", "ob", "oo", "u", "w", "ooo", "og"], "e": ["pe", "ve", "ei", "ele", "el", "ent", "ae", "est", "be", "se", "eeee", "y", "ed", "r", "en", "ue", "v", "es", "c", "ea", "g", "ge", "ate", "E", "ie", "eu", "oe", "er", "re", "ce", "d", "de", "te", "p", "ec", "et", "eng", "xe", "ee", "eg", "u", "element", "ev", "eb"], "pw": [" pkw", "pwb", "Pwd", "cpwt", " pwt", "npws", "ppwa", "lpws", "Pwr", " pwd", "pwd", "jpwd", "pwr", "lpwt", "tpwd", "ppws", " pwb", "pws", "ppkw", " pws", "npwr", " pwr", "ppwt", " pwa", "Pw", "lpw", "cpwa", "lpwb", "pkw", "tpw", "npwa", "ppwr", "Pwa", "jpws", "cpw", "jpwa", "pwa", "ppwb", "tpwt", "npw", "ppwd", "ppw", "tpkw", "Pwt", "pwt", "jpw", "Pws", "cpwd"], "i": ["ini", "ei", "zi", "\u00ed", "m", "uri", "cli", "y", "ix", "ti", "info", "ip", "ci", "\u0438", "ji", "gi", "v", "ati", "ij", "ori", "oi", "index", "ki", "q", "b", "phi", "yi", "ind", "asi", "id", "di", "p", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "ic", "n", "li", "I", "uli", "iri", "x", "ui", "mi", "im", "ski"]}}
{"code": "import sys\\nimport re\\nimport math\\nimport collections\\nimport bisect\\nimport itertools\\nimport fractions\\nimport functools\\nimport copy\\nimport heapq\\nimport decimal\\nimport statistics\\nimport queue\\n\\n# import numpy as np\\n\\nsys.setrecursionlimit(10 ** 9)\\nINF = 10 ** 16\\nMOD = 10 ** 9 + 7\\n# MOD = 998244353\\n\\nni = lambda: int(sys.stdin.readline())\\nns = lambda: map(int, sys.stdin.readline().split())\\nna = lambda: list(map(int, sys.stdin.readline().split()))\\nna1 = lambda: list(map(lambda x: int(x) - 1, sys.stdin.readline().split()))\\n\\n\\n# ===CODE===\\n\\n\\n\\ndef main():\\n    a, b, q = ns()\\n    s = [ni() for _ in range(a)]\\n    t = [ni() for _ in range(b)]\\n\\n    def disLR(a, idx):\\n        small = a[max(0, idx - 1)]\\n        large = a[min(len(a) - 1, idx)]\\n        return [small, large]\\n\\n    for _ in range(q):\\n        ans = INF\\n\\n        x = ni()\\n\\n        idxs = bisect.bisect_left(s, x)\\n        a1 = disLR(s, idxs)\\n\\n        idxt = bisect.bisect_left(t, x)\\n        a2 = disLR(t, idxt)\\n\\n        for ta1 in a1:\\n            for ta2 in a2:\\n                tmp1 = abs(x - ta1) + abs(ta2 - ta1)\\n                tmp2 = abs(x - ta2) + abs(ta1 - ta2)\\n                ans = min(ans, tmp1, tmp2)\\n\\n        print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "487", "substitutes": {}}
{"code": "a, b = input().split()\\nab = a*int(b)\\nba = b*int(a)\\nif ab <= ba:\\n  print(ab)\\nelse:\\n  print(ba)", "target": "69", "substitutes": {"a": ["f", "apt", "ae", "\u00e1", "l", "t", "sta", "af", "au", "ax", "i", "A", "ca", "r", "at", "ea", "an", "era", "h", "ity", "ate", "ak", "area", "admin", "d", "p", "alpha", "da", "ao", "app", "act", "oa", "e", "ai", "sa", "aq", "aa", "aj", "al", "art", "ac", "o", "ma", "ia", "x", "ar", "ach", "am", "aff"], "b": ["f", "rb", "ib", "mb", "ben", "be", "l", "y", "bc", "bp", "by", "i", "bg", "bh", "fb", "r", "cb", "db", "v", "c", "g", "wb", "nb", "re", "d", "bi", "br", "j", "bf", "bin", "e", "sb", "it", "gb", "bis", "ob", "bs", "B", "bb", "body", "base", "eb"], "ab": ["rob", "rb", "abe", "ib", "abc", "abis", "apa", "ap", "Ab", "af", "au", "ax", "fab", "aus", "ca", "fb", "lb", "rab", "auc", "ava", "lab", "abb", "app", "av", "ai", "sa", "aq", "aj", "al", "abs", "ac", "ub", "AB", "ob", "abl", "bb", "ar", "am", "eb", "hab", "aba"], "ba": ["rb", "abe", "bon", "apa", "fa", "ta", "bl", "ben", "be", "bd", "ha", "bc", "bp", "ga", "xa", "BA", "bee", "cb", "ca", "fb", "la", "lb", "db", "pa", "az", "bas", "Ba", "va", "lab", "bi", "da", "bra", "bo", "gb", "aa", "beta", "ena", "bs", "aaa", "bb", "bar", "bre", "eb", "aba"]}}
{"code": "def k(n):\\n  return n**2\\na=int(input())\\nL=list(map(int,input().split()))\\nc=sum(L)\\nc=c**2\\nL=list(map(k,L))\\nd=sum(L)\\nprint((c-d)//2)", "target": "434", "substitutes": {"n": ["z", "f", "nn", "m", "l", "t", "nt", "nr", "N", "i", "ns", "nm", "k", "r", "v", "na", "ln", "sn", "q", "b", "cn", "nu", "nb", "num", "p", "j", "ne", "np", "u", "nl", "x", "ll", "new"], "a": ["ap", "ae", " na", "i", "A", "Na", "at", "na", "ea", "h", "b", "g", "ak", "area", "p", "alpha", "ao", "e", "ai", "sa", "aa", "al", " A", "ab", " b", "count"], "L": ["LV", "K", "DL", "H", "C", "Long", "LR", "R", "LE", "l", "SL", "W", "LS", "ML", "LM", "N", "LT", "M", "LG", "LU", "A", "LA", "NL", "EL", "U", "PL", "S", "O", "GL", "D", "RL", "CL", "LB", "P", "Q", "IL", "LC", "List", "T", "LI", "J", "V", "FL", "I", "dL", "B", "LP", "LD", "BL", "Li", "LL", "Lu", "TL"], "c": ["z", "f", "m", "C", "cr", "l", "y", "t", "cs", "cf", "s", "i", "ci", "r", "k", "div", "ch", "ca", "v", "co", "h", "q", "b", "lc", "g", "cn", "cc", "ct", "p", "j", "e", "cd", "dc", "u", "x", "cm", "count"], "d": ["z", "f", "m", "df", "l", "t", "dd", "r", "dt", "db", "v", "dx", "sd", "dq", "b", "D", "dm", "di", "du", "de", "dl", "p", "da", "pd", "dn", "j", "ds", "e", "cd", "dc", "dh", "dp", "dr"]}}
{"code": "import sys\\n\\nn = int(sys.stdin.readline())\\nborrowing = 100000\\n\\nfor i in range(0, n):\\n    borrowing *= 1.05\\n    borrowing = int((borrowing+999) / 1000) * 1000\\n\\nprint(borrowing)", "target": "569", "substitutes": {"n": ["nn", "nw", "m", "l", "nt", "t", "N", "ns", "mn", "r", "k", "na", "c", "ln", "sn", "g", "cn", "nu", "nb", "d", "size", "p", "j", "ne", "total", "seed", "net", "nor", "np", "nan", "nc", "nl", "x", "norm"], "borrowing": ["throwing", "torrown", "orrying", "crorying", "berrow", "throw", "torrow", "berling", "burrow", "barrowing", "berrowing", "burrowing", "barrying", "crorow", "torrowing", "torrying", "burling", "burrying", "borrying", "borrown", "borling", "barrown", "orrowing", "thrying", "crorowing", "borrow", "croling", "berrown", "crorown", "thling", "torling", "barling", "barrow", "burrown", "orrow", "orling"], "i": ["ini", "a", "y", "t", "ix", "r", "k", " j", "c", "q", "ind", "id", " ii", "p", "j", "e", "it", "ii", "I", "ia", "iter", "x", "um", "im"]}}
{"code": "boin = ['a','e','i','o','u']\\nif input() in boin:\\n    print(\"vowel\")\\nelse:\\n    print(\"consonant\")", "target": "120", "substitutes": {"boin": ["choin", "voin", "Boint", "choint", "poin", "boinc", "vodin", "poins", "podin", "choins", "boint", " hoin", "fodin", " hoint", " hoins", " hoinc", "Boinc", "voins", "Boins", "bodin", "Boin", "choinc", "foin", "boins", "foins"]}}
{"code": "def f(k):\\n    import itertools\\n\\n    N = [[str(i) for i in range(10)]]\\n    n = 0\\n    while n < k:\\n        T = []\\n        U = [n[0] for n in N[-1]]\\n        anchor = 0\\n        for i in range(len(U) - 1):\\n            if U[i] != U[i + 1]:\\n                T.append((anchor, i + 1))\\n                anchor = i + 1\\n        else:\\n            T.append((anchor, len(U)))\\n        M = []\\n        for i in range(10):\\n            for d in (-1, 0, 1):\\n                if 0 <= i + d < len(T):\\n                    for j in range(*T[i + d]):\\n                        M.append(\"{}{}\".format(i, N[-1][j]))\\n        N[-1] = [n for n in N[-1] if not n.startswith(\"0\")]\\n        n += len(N[-1])\\n        N.append(M)\\n    N = list(itertools.chain.from_iterable(N))\\n    return N[k - 1]\\n\\n\\nK = int(input())\\nprint(f(K))\\n", "target": "339", "substitutes": {"k": ["z", "max", "mc", "m", "kr", "kind", "kt", "ka", "y", "t", "ck", "kl", "ok", "kk", "kan", "ke", "kid", "kar", "c", "mk", "ki", "q", "kn", "unk", "ak", "id", "wk", "ik", "num", "p", "km", "ek", "kw", "o", "w", "u", "sk", "ko", "ff", "ku", "ks"], "N": ["Y", "NE", "H", "C", "NF", "X", "AN", "F", "Sn", "R", "G", "W", "CNN", "NG", "NI", "EN", "NB", "NR", "CN", "MN", "A", "NP", "NA", "S", "ND", "O", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "P", "And", "GN", "J", "V", "I", "PN", "OUT", "B", "Ns", "NC", "ON", "NN", "TT", "GT", "NH"], "i": ["io", "ini", "ei", "ri", "zi", "\u00ed", "m", "l", "y", "t", "ix", "iy", "ti", "ip", "ci", "ji", "v", "gi", "ij", "c", "hi", "oi", "index", "ki", "phi", "ami", "ind", "id", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "o", "ic", "I", "li", "u", "iri", "ia", "x", "iti", "ui", "iu", "im", "mi"], "n": ["Ni", "name", "note", "un", "v", "an", "g", "wn", "tn", "num", "nl", "non", "x", "new", "z", "f", "nn", "m", "node", "ni", "t", "number", "len", "nm", "na", "cn", "nu", "nb", "can", "dn", "ned", "net", "gn", "nan", "nc", "o", "yn", "l", "nt", "nr", "fn", "r", "en", "ann", "c", "rn", "NT", "size", "next", "p", "br", "nat", "e", "none", "nor", "al", "w", "on", "nw", "out", "hn", "y", "s", "ns", "mn", "ln", "sn", "ne", "it", "np", "u"], "T": ["Y", "TY", "TR", "UT", "H", "C", "X", "F", "R", "t", "WT", "G", "MT", "A", "TA", "TH", "S", "E", "NT", "D", "TG", "L", "TN", "TM", "TS", "P", "Q", "TC", "J", "V", "I", "B", "Tu", "TF", "TT", "GT", "TV", "TL"], "U": ["Unit", "UX", "UT", "H", "C", "UP", "UL", "Ut", "R", "UC", "OU", "URI", "Us", "UU", "LU", "A", "CU", "S", "UR", "O", "US", "SU", "L", "EU", "UF", "GU", "UI", "UM", "Q", "UV", "V", "u", "I", "UD", "FU", "Tu", "UE", "MU", "UID"], "anchor": ["connectori", "connectur", "ancory", "tailor", "ancbor", " anchent", "ancent", " anchori", "connector", "anchbor", "tailori", "ancor", " anchter", "geor", " anchory", "honent", "anchent", "ignter", "ger", "linkored", " anchbor", "linkory", "honbor", "anchener", "tailur", "ignored", "geter", "ther", "ignur", "honor", "ignor", "cusener", "anchur", "cusory", "tailter", "anchter", "cusored", "linkener", "honory", "ignener", "cusor", " anchr", "theori", "ignory", "theor", "linkor", "anchori", "theter", "connectter", "ignori", "anchr", "anchory", "geori", "anchored"], "M": ["m", "H", "MP", "FM", "C", "MX", "MAL", "Multi", "R", "PM", "MT", "SM", "ML", "LM", "CM", "Mon", "MI", "MN", "MC", "MM", "S", "D", "Matrix", "L", "NM", "VM", "JM", "TM", "OM", "P", "MA", "AM", "IM", "MS", "MAN", "J", "RM", "I", "MD"], "d": ["z", " iii", "m", "a", "l", "t", "ed", "s", "dd", "dim", "r", "dt", "div", "v", "sd", "dx", "gu", "c", "dq", "h", "q", "b", "g", "id", "D", "di", "du", "de", "do", "p", "da", "dn", "dir", "ds", "e", "ond", "od", "dc", "dy", "iod", "ad", "w", "dj", " di", "pd", "x", "dat", "fd"], "j": ["z", "obj", "jl", "m", "a", "ja", "l", "y", "t", "jp", "ji", "v", "json", "ij", "c", "h", "q", "b", "g", "di", "p", "bi", "oj", "kj", "jj", "aj", "J", "o", "uj", "dj", "li", "bj", "js", "jc"], "K": ["Y", "HK", "KA", "KN", "FK", "PK", "H", "C", "X", "F", "KK", "R", "ANK", "SK", "G", "W", "KR", "IK", "KI", "KS", "ID", "S", "VK", "NK", "UK", "P", "Q", "KE", "J", "Z", "V", "B", "Kind", "DEC"]}}
{"code": "n,m=map(int,input().split())\\ns=list(map(int,input().split()))\\nt=list(map(int,input().split()))\\ndp=[[0]*(m+1) for _ in range(n+1)]\\nfor i in range(n+1):\\n  dp[i][0]=1\\nfor i in range(m+1):\\n  dp[0][i]=1\\nmod=pow(10,9)+7\\nfor i in range(n):\\n  for j in range(m):\\n    dp[i+1][j+1]=sum((dp[i][j+1],dp[i+1][j],-dp[i][j]))%mod\\n    if s[i]==t[j]:dp[i+1][j+1]+=dp[i][j]\\n    dp[i+1][j+1]%=mod\\nprint(dp[-1][-1])\\n#print(dp)", "target": "505", "substitutes": {"n": ["nn", "l", "y", "nt", "name", "nr", "N", "ns", "mn", "r", "nm", "v", "na", "c", "sn", "an", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "pi", "ne", "gn", "np", "nan", "nc", "o", "x", "on"], "m": ["gm", "mc", "tm", "l", "y", "sm", "ms", "M", "mn", "r", "k", "nm", "v", "mis", "c", "bm", "mut", "an", "b", "g", "sim", "dm", "d", "p", "man", "mt", "om", "mr", "o", "mm", "me", "mi", "cm"], "s": ["ps", "f", "sv", "ls", "a", "cs", "rs", "l", "gs", "xs", "ms", "ins", "ns", "sw", "tp", "sp", "sym", "sd", "sl", "es", "ys", "h", "b", "g", "S", "d", "p", "ss", "ds", "sa", "sb", "its", "si", "bs", "ats", "ts", "js"], "t": ["f", "tu", "pt", "ties", "tm", "ta", "l", "y", "tt", "tw", "r", "tp", "dt", "ty", "at", "v", "c", "h", "ot", "b", "g", "types", "ct", "tree", "tz", "te", "p", "td", "it", "tf", "wt", "T", "tr", "tc", "o", "ts", "rt", "st"], "dp": ["ps", "deb", "adr", "dds", "bsp", "df", "pkg", "wd", "dos", "gp", "pb", "dd", "pp", "ip", "jp", "dt", "tp", "broad", "db", "pipe", "dx", "vp", "dq", "pm", "fp", "mp", "deep", "dm", "di", "pd", "d", "du", "dl", "p", "dep", "ds", "lp", "cp", "td", "dial", "dc", "np", "DP", "dh", "bps", "delay", "px", "dj", "dr", "wp", "pn", "xd", "hp"], "_": ["ix", "ip", " u", " __", " v", " p", " e", "ik", " l", " z", " the", " I", "ai", " x", " k", "o", "I", "li", "x", " index"], "i": ["z", "f", "io", "ini", "ei", "ri", "ion", "zi", "cli", "ir", "a", "l", "y", "this", "ix", "iy", "ti", "info", "ip", "ci", "\u0438", "k", "ji", "at", "gi", "v", "ij", "c", "hi", "ki", "ami", "yi", "ie", "id", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "iri", "iter", "x", "ui", "mi", "iu", "im"], "mod": [" MOD", "sub", "add", "min", "max", "base", "qual", "dig", "debug", "ed", "modified", "step", "ver", "div", "value", "check", "perm", "mut", "ify", "term", "post", " Mod", "sim", "san", "d", "comp", " modify", "mult", "p", "man", "pl", "com", "form", "trans", "Mod", "ident", "od", "MOD", "bo", "var", "tr", "log", "set", "prime", "mods", "fun", "pro"], "j": ["z", "io", "obj", "jl", "pr", "pt", "ja", "jit", "ret", "y", "ix", "note", "fr", "jp", "k", "ji", "v", "sp", "json", "ij", "h", "q", "b", "g", "jac", "ind", "er", "ijk", "di", "p", "br", "kj", "it", "jj", "jump", "tr", "aj", "J", "ju", "o", "uj", "dj", "u", "li", "x", "bj", "js", "jc"]}}
{"code": "\\nn=int(input())\\nn //= 3\\nprint(n)", "target": "584", "substitutes": {"n": ["z", "f", "nn", "out", "names", "m", "l", "t", "nt", "number", "name", "s", "N", "i", "len", "ns", "nm", "k", "mn", "v", "na", "c", "long", "ln", "sn", "q", "b", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "int", "np", "nan", "nc", "o", "w", "print", "nl", "x"]}}
{"code": "n, k = map(int, input().split())\\nlength = list(map(int, input().split()))\\n\\nlength.sort(reverse=True)\\ntotal = 0\\nfor i in range(k):\\n  total += length[i]\\n\\nprint(total)", "target": "433", "substitutes": {"n": ["z", "f", "nn", "m", "l", "y", "t", "nr", "N", "ns", "mn", "nm", "v", "c", "sn", "h", "b", "g", "nb", "num", "d", "size", "p", "j", "nc", "w", "x", "count"], "k": ["dk", "K", "m", "kr", "kh", "ka", "ck", "kl", "ikk", "kk", "ke", "kid", "mk", "ki", "q", "b", "kn", "unk", "ak", "wk", "ik", "ask", "kok", "p", "km", "j", "kb", "kj", "ek", "kw", "sk", "ko", "ku", "ks"], "length": ["type", "ength", "function", "load", "text", "l", "t", "full", "number", "result", "shape", "len", "buffer", "input", "Length", "json", "sl", "long", "index", "h", "distance", "position", "th", "duration", "string", "size", "strength", "p", "join", "height", "L", "piece", "last", "ENGTH", "int", "then", "component", "short", "loc", "sequence", "log", "stop", "list", "data", "library", "count", "width"], "total": ["done", "max", "successful", "normal", " summed", "sum", "neutral", "unique", "Total", "basic", "all", "full", "t", "number", "note", "private", "shared", "final", "eta", "created", "public", "otal", "OTAL", "open", "complex", " Total", "reported", "human", "complete", "used", "temp", "num", "completely", "serial", "significant", "loaded", "zero", "quant", "valid", "net", "money", "mean", "average", "no", "system", "multi", "count", " totals", "general", "huge"], "i": ["f", "io", "ini", "zi", "m", "ti", "s", "ip", "ci", "ji", "gi", "v", "ij", "ori", "oi", "ki", "q", "b", "h", "sim", "ind", "id", "di", "ik", "bi", "multi", "j", "pi", "qi", "ai", "ii", "xi", "si", "ic", "li", "I", "x", "ui", "mi", "im"]}}
{"code": "s = input()\\na_number = 0\\nz_number = 0\\n\\nfor i in range(len(s)):\\n    if s[i] == 'A':\\n        a_number = i\\n        break\\n\\nfor j in reversed(range(len(s))):\\n    if s[j] == 'Z':\\n        z_number = j\\n        break\\n\\nprint(z_number - a_number + 1)", "target": "365", "substitutes": {"s": ["z", "f", "ps", "sts", "str", "sv", "ws", "ls", "m", "ares", "fs", "a", "y", "t", "rs", "gs", "ins", "ms", "ns", "r", "v", "strings", "ials", "hs", "c", "gins", "h", "tests", "b", "ands", "g", "ations", "S", "ers", "ments", "eds", "bits", "itions", "p", "ains", "ss", "less", "ds", "parts", "erences", "sb", "its", "ences", "ses", "n", "abs", "bs", "sq", "w", "tes", "ats", "bes", "als", "x", "ts", "qs", "js"], "a_number": ["a_num", "a2zero", "aoxmessage", "a_square", " a2zero", "a_no", "a2number", "a2no", "aPno", " a2no", "a_message", "aPnumbered", "a2numbered", " a2number", " a_dimension", "aPnumber", "aoxnumbered", " a2numbered", "aPzero", "z_square", "aoxsquare", " a_Number", "z_message", "aoxnumber", "z_numbered", "a_zero", " a_num", "a_Number", " a_no", "a_numbered", " a_numbered", " a_zero", "a_dimension"], "z_number": ["zi_number", "zi_notation", "zThenumbered", "zTheno", "zi__notation", " z_no", "zi__count", "z_num", "z___count", "z__count", "j_total", "z_Number", "z__value", "j_number", "z__Number", "z_no", " z_numbered", " z_value", "z_total", "zThevalue", "z_currency", "z__numbered", "z__number", "z__notation", "z___number", "j_num", "z___Number", "z_numbered", "z_value", "zi__Number", "j_currency", "zThenumber", "zi__number", "z_notation", "z__no", "zi_count", "z_count", "zi_Number", "z___notation"], "i": ["z", "io", "ini", "\u012b", "zi", "\u00ed", "a", "ir", "l", "y", "ix", "iy", "ti", "ip", "ci", "r", "ji", "gi", "ij", "ki", "phi", "ian", "yi", "ie", "id", "di", "ik", "bi", "pi", "e", "ai", "it", "ii", "xi", "si", "n", "ic", "li", "I", "ia", "u", "x", "iti", "mi", "iu", "ui"], "j": ["z", "obj", "jl", "m", "a", "ja", "l", "y", "t", "jp", "r", "ji", "k", "v", "json", "ij", "job", "q", "b", "h", "je", "g", "jac", "p", "bi", "br", "oj", "kj", "jas", "e", "jj", "jump", "block", "aj", "J", "n", "jam", "o", "uj", "dj", "ju", "x", "bj", "js", "jc"]}}
{"code": "n, a, b, c, d = map(int, input().split())\\ns = input()\\nif '##' in s[a:max(c, d)] or (d < c and '...' not in s[b-2:d+1]):\\n  print('No')\\nelse:\\n  print('Yes')", "target": "478", "substitutes": {"n": ["z", "f", "m", "l", "y", "nt", "t", "nr", "N", "i", "ns", "r", "v", "na", "sn", "h", "q", "g", "cn", "nu", "nb", "num", "p", "j", "ne", "nc", "o", "x"], "a": ["ba", "m", "am", "ae", "y", "af", "au", "i", "A", "ca", "r", "at", "v", "ea", "index", "area", "p", "da", "j", "e", "sa", "aa", "aj", "al", "ac", "art", "ma", "w", "o", "ia", "ab", "x", "ar", "an"], "b": ["z", "f", "ba", "ib", "m", "be", "l", "y", "t", "bc", "to", "i", "cb", "r", "v", "db", "h", "g", "nb", "p", "bi", "j", "e", "sb", "o", "bs", "u", "B", "ab", " B", "bb"], "c": ["z", "f", "sc", "m", "C", "cr", "cs", "l", "t", "bc", "cf", "cb", "ca", "cin", "v", "h", "lc", "g", "cc", "ct", "ce", "p", "can", "cp", "ec", "e", "cd", "dc", "fc", "ac", "nc", "w", "x", "cm"], "d": ["z", "f", "min", "m", "df", "l", "t", "dd", "i", "r", "dt", "v", "db", "dx", "q", "g", "D", "di", "pd", "de", "p", "do", "da", "dn", "j", "ds", "end", "e", "dc", "dp", "o", "w", "dr", "x", "data"], "s": ["z", "ps", "sv", "ws", "ls", "cs", "y", "rs", "t", "gs", "xs", "ins", "ns", "r", "v", "sp", "sl", "es", "ys", "eds", "g", "S", "p", "ss", "ds", "aws", "parts", "args", "sa", "sb", "ims", "abs", "bs", "sq", "ats", "st", "ts", "js"]}}
{"code": "s = list(str(input()))\\nt = list('AKIHABARA')\\ns.reverse()\\nt.reverse()\\nfor i in range(len(t)):\\n    c = t.pop()\\n    if s:\\n        if c == s[-1]:\\n            s.pop()\\n        else:\\n            if c == 'A':\\n                continue\\n            else:\\n                break\\n    else:\\n        if c != 'A':\\n            print('NO')\\n            exit()\\n        else:\\n            continue\\nif not s:\\n    print('YES')\\nelse:\\n    print('NO')\\n", "target": "796", "substitutes": {"s": ["ps", "stats", "sts", "str", "sv", "ws", "ls", "events", "ties", "has", "m", "ares", "a", "l", "rs", "cs", "gs", "xs", "ms", "ins", "os", "ns", "r", "ends", "strings", "sp", "es", "hs", "ys", "q", "b", "g", "ies", "S", "changes", "ains", "ess", "p", "ss", "j", "ds", "sa", "sb", "its", "ims", "ses", "n", "abs", "si", "bs", "sq", "w", "tes", "ats", "als", "st", "ts", "qs", "js"], "t": ["z", "tu", "out", "tmp", "pt", "ties", "tm", "ent", "m", "ta", "ret", "l", "nt", "tt", "tw", "os", "dt", "ty", "at", "v", "gt", "ot", "b", "g", "tree", "temp", "title", "te", "p", "j", "ht", "td", "e", "it", "wt", "got", "tr", "vt", "T", "tc", "n", "o", "tes", "tools", "ts", "rt", "js", "st"], "i": ["f", "l", "y", "ite", "ti", "k", " j", "q", "ind", "id", " ii", "p", "j", "e", "it", "n", "li", "I", "iter", "x", "im"], "c": ["f", "sc", "cod", "mc", "m", "C", "cr", "cus", "anc", "cs", "l", "bc", "chain", "con", "ci", "cin", "k", "ch", "v", "co", "h", "arc", "b", "lc", "gc", "g", "cc", "ct", "unc", "cl", "ce", "d", "cos", "p", "col", "cp", "ec", "cd", "dc", "conf", "cache", "n", "ac", "ic", "cu", "cell", "nc", "mac", "ace", "enc", "cation"]}}
{"code": "n,k = map(int, input().split())\\nma = n//k + n%k\\nmi = n//k\\nprint(ma -mi)", "target": "739", "substitutes": {"n": ["z", "f", "nn", "m", "a", "node", "l", "y", "t", "nt", "s", "N", "i", "ns", "mn", "nm", "v", "na", "c", "sn", "q", "b", "h", "g", "an", "cn", "nu", "num", "d", "p", "j", "pi", "ne", "net", "gn", "int", "np", "nan", "o", "w", "x", "new"], "k": ["dk", "mu", "max", "K", "m", "kr", "kh", "uk", "a", "ka", "l", "t", "ck", "kl", "ikk", "i", "ok", "kk", "kick", "ke", "kid", "v", "kar", "c", "mk", "ki", "q", "b", "cm", "g", "kn", "ik", "num", "d", "kok", "p", "km", "j", " K", "kj", "kw", "tk", "u", "sk", "ko", "ku", "ks", "ack"], "ma": ["mu", "ama", "sum", "fa", "mas", "m", "ta", "ka", "lia", "sta", "ms", "i", "ca", "la", "ho", "pa", "na", "wa", "hi", "ki", "nu", "hea", "da", "pi", "mo", "sa", "MA", "una", "mma", "Ma", "si", "ia", "mm", "me", "um", "mad", "ema", "uma"], "mi": ["mu", "ini", "mc", "m", "my", "ka", "ti", "ms", "i", "ci", "MI", "mn", "mis", "pa", "hi", "pm", "ki", "phi", "ami", "yi", "di", "mic", "bi", "vi", "pi", "fi", "mo", "mie", " si", "si", "li", "mia", "Mi", "umi", "mm", "mid", "wi"]}}
{"code": "def main():\\n    H, W, M = map(int, input().split())\\n    bomb_row = [0 for _ in range(H)]  # \u7206\u5f3e\u304c\u4f55\u884c\u76ee\u306b\u4f55\u500b\u3042\u308b\u304b\\n    bomb_column = [0 for _ in range(W)]  # \u7206\u5f3e\u304c\u4f55\u5217\u76ee\u306b\u4f55\u500b\u3042\u308b\u304b\\n    bomb_map = set()  # \u7206\u5f3e\u304c\u3069\u3053\u306b\u3042\u308b\u304b\\n\\n    for _ in range(M):\\n        r, c = map(int, input().split())\\n        bomb_row[r - 1] += 1\\n        bomb_column[c - 1] += 1\\n        bomb_map.add((r - 1, c - 1))\\n\\n    max_row = max(bomb_row)  # \u884c\u3054\u3068\u306b\u898b\u3066\u6700\u3082\u591a\u3044\u7206\u5f3e\u306e\u500b\u6570\\n    max_column = max(bomb_column)  # \u5217\u3054\u3068\u306b\u898b\u3066\u6700\u3082\u591a\u3044\u7206\u5f3e\u306e\u500b\u6570\\n    ans = max_row + max_column\\n\\n    bomb_max_row = []  # \u7206\u5f3e\u304cmax_row\u500b\u3042\u308b\u884c\\n    bomb_max_column = []  # \u7206\u5f3e\u304cmax_column\u500b\u3042\u308b\u5217\\n\\n    for i in range(H):\\n        if bomb_row[i] == max_row:\\n            bomb_max_row.append(i)\\n    for i in range(W):\\n        if bomb_column[i] == max_column:\\n            bomb_max_column.append(i)\\n\\n    for r in bomb_max_row:\\n        for c in bomb_max_column:\\n            if (r, c) not in bomb_map:  # \u6700\u591a\u884c\u3068\u6700\u591a\u5217\u306e\u4ea4\u70b9\u306b\u7206\u5f3e\u304c\u7121\u3051\u308c\u3070\u7d42\u4e86\\n                print(ans)\\n                return\\n\\n    print(ans - 1)  # \u6700\u591a\u884c\u3068\u6700\u591a\u5217\u306e\u4ea4\u70b9\u306b\u7206\u5f3e\u304c\u3042\u308c\u3070ans - 1\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "694", "substitutes": {"H": ["K", "HO", "He", "CH", "C", "X", "F", "HT", "R", "G", "HI", "N", "HB", "A", "HL", "HD", "HH", "h", "TH", "MH", "HC", "D", "HA", "HE", "P", "Q", "SH", "Eh", "T", "J", "V", "B", "OH", "RH", "WH", "HS", "NH"], "W": ["Width", "X", "WD", "F", "G", "WT", "N", "WB", "NW", "E", "SW", "D", "WP", "WA", "DW", "L", "RW", "P", "VW", "Q", "T", "V", "w", "BW", "WH", "MW", "Wh"], "M": ["Y", "K", "m", "C", "X", "F", "R", "G", "CM", "N", "A", "MC", "U", "MM", "S", "E", "O", "D", "L", "P", "Q", "T", "Z", "V", "I", "B"], "bomb_row": [" firstrowrows", " firstrowrow", " starting_block", " first2rows", " first2col", " first_rows", " starting_col", " starting_row", " first2row", " startingrowrows", " first2block", " firstrowblock", " startingrowblock", " first_row", " starting_rows", " first_block", " startingrowcol", " startingrowrow", " first_col", " firstrowcol"], "_": ["f", "ay", "all", "py", "y", "ix", "un", " j", "__", "ex", "val", "ny", "d", "j", " you", "n", "___", "x", "new"]}}
{"code": "import sys\\nreadline = sys.stdin.readline\\nreadline()\\nbits = 1\\nfor a in map(int, readline().split()): bits |= bits << a\\nreadline()\\nsys.stdout.write(\"\\n\".join(\"yes\"*((bits >> q) & 1)or\"no\" for q in map(int, readline().split())))\\nsys.stdout.write(\"\\n\")", "target": "279", "substitutes": {"readline": ["getLine", "readerle", "readlock", "readerline", "writelines", "readliner", "readlist", "readereline", " readlock", "buildliner", "loadline", "readpoint", " readlines", "Readline", "Readeline", "buildline", "Readle", "readLine", "readinglines", "readword", "loadlock", "writeline", "getline", "readstring", "readerlock", "ReadLine", "readinglist", "newword", "Readword", "loadliner", "readerliner", "readeline", " readle", "buildlines", "Readpoint", "readle", "getlist", "readingstring", "readingline", "newpoint", " readpoint", " readLine", "readlines", "newLine", " readword", " readeline", "writestring", "buildLine", "readerLine", "readerlines", "writelist", "newline", " readliner", "getlines", "loadLine", "getliner", "Readlines", "getstring"], "bits": ["maps", "values", "checks", "lines", "ls", "flags", "nets", "tops", "pins", "gs", "pos", "bugs", "s", "states", "ms", "ins", "outs", "ns", "pieces", "aps", "issues", "words", "bytes", "mask", "gets", "ops", "ies", "yes", "bit", "limits", "vs", "cuts", "rots", "ots", "codes", "parts", "fps", "bool", "locks", "its", "ints", "plugins", "dates", "bis", "bps", "items", "bs", "frames", "keys", "bes", "ats", "orts", "obs", "vals", "ts"], "a": ["z", "f", "ba", "ap", "m", "am", "ae", "ta", "l", "y", "t", "af", "au", "ga", "xa", "i", "s", "A", "ca", "r", "na", "aw", "c", "ea", "b", "g", "mod", "ak", "ref", "aid", "area", "p", "ao", "j", "e", "sa", "ai", "aq", "aa", "inner", "aj", "al", "ac", "n", "o", "w", "u", "an", "new", " an"], "q": ["z", "f", "qt", "ba", "ib", "qa", "m", "iq", "l", "t", "wer", "au", "s", "i", "r", "k", "ue", "v", "pa", "c", "mask", "h", "b", "dq", "g", "bit", "d", "eq", "p", "ou", "qi", "bool", "ai", "Q", "int", "aq", "n", "u", "ql", "sq", "w", "x", "requ", "qu"]}}
{"code": "import math\\n\\nn,k = map(int,input().split())\\nprint(n-k+1)\\n", "target": "459", "substitutes": {"n": ["nn", "m", "l", "nt", "t", "N", "i", "len", "ns", "r", "mn", "v", "na", "c", "long", "ln", "sn", "q", "b", "h", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "natural", "gn", "np", "nan", "nc", "w", "nl", "x", "norm"], "k": ["z", "mu", "K", "m", "kr", "kh", "ka", "t", "ck", "kl", "ikk", "i", "kick", "kk", "r", "ke", "kan", "v", "c", "mk", "ki", "q", "kn", "ik", "p", "kok", "km", "j", "kj", "kw", "tk", "o", "u", "ko", "ku", "ks"]}}
{"code": "d, n = map(int, input().split())\\nif n == 100:\\n    n += 1\\nprint(n if d==0 else 100*n if d==1 else (100**2)*n)\\n", "target": "781", "substitutes": {"d": ["z", "f", "m", "a", "l", "t", "did", "s", "dd", "i", "days", "r", "dt", "v", "sd", "dx", "c", "q", "b", "nd", "g", "dis", "D", "dm", "di", "pd", "du", "p", "dn", "da", "do", "j", "ds", "deg", "dh", "dec", "x", "data", "fd"], "n": ["z", "f", "nn", "nw", "normal", "m", "a", "l", "nt", "t", "number", "nr", "s", "N", "i", "den", "ns", "mn", "nm", "r", "en", "un", "v", "len", "sd", "na", "c", "long", "ln", "sn", "q", "nd", "an", "g", "h", "b", "cn", "nu", "nb", "num", "p", "dn", "j", "ds", "ne", "nor", "gn", "np", "nan", "nc", "o", "w", "no", "x", "pn", "count"]}}
{"code": "for i in range(1,10):\\n\tfor j in range(1,10):\\n\t\tmultiply = i * j\\n\t\tprint('{0}x{1}={2}'.format(i,j,multiply))", "target": "789", "substitutes": {"i": ["io", "ini", "ri", "zi", "m", "a", "ir", "l", "y", "ix", "iy", "ti", "ci", "gi", "v", "ij", "c", "hi", "ki", "phi", "b", "ami", "yi", "ie", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "li", "I", "ia", "x", "iti", "mi", "iu"], "j": ["z", "f", "out", "obj", "jl", "pr", "m", "a", "ly", "ja", "l", "y", "t", "name", "fr", "jp", "ji", "v", "json", "ij", "c", "q", "b", "g", "jac", "d", "p", "oj", "kj", "it", "jj", "jump", "aj", "J", "n", "o", "uj", "dj", "x", "bj", "js", "jc"], "multiply": ["multiplipll", "multiplipl", "multiplipllate", "multipllate", "multoply", "multipl", "multuply", "multiplulate", "multipulate", "multiplipify", "multipll", "multoplate", "multiplate", "multipliplly", "multupl", "multiplify", "multupulate", "multipify", "multipliplulate", "multureify", "multipliplify", "multopify", "multupify", "multurel", "multureulate", "multopulate", "multiplipulate", "multurely", "multuplate", "multipliply", "multipliplate", "multiplly"]}}
{"code": "a,b=input().split()\\nnum = int(a+b)\\n\\nans = \"No\"\\n\\nfor i in range(320):\\n    if i**2 != num:\\n        continue\\n    else:\\n        ans = \"Yes\"\\n        break\\nprint(ans)", "target": "271", "substitutes": {"a": ["f", "ack", "ba", "am", "ae", "l", "sta", "to", "af", "au", "ca", "r", "A", "at", "la", "na", "c", "ea", "admin", "ce", "alpha", "ao", "act", "oa", "aka", "e", "sa", "ai", "aa", "aj", "al", "art", "n", "ac", "ma", "ia", "ab", "eas", "x", "ach", "an", "aff"], "b": ["f", "rb", "ib", "mb", "blue", "be", "l", "y", "bc", "bp", "by", "cb", "fb", "r", "db", "v", "c", "g", "d", "bi", "j", "bin", "e", "sb", "gb", "bis", "n", "ob", "ub", "bs", "bid", "B", "ab", "bb", "base", "eb"], "num": ["good", "Num", "nom", "max", "sum", "mon", "name", "number", "con", "final", "nm", "ver", "cal", "na", "index", "g", "mod", "nu", "mp", "val", "nb", "test", "id", "orig", "alpha", "zero", "valid", "conf", "n", "ad", "bid", "no", "NUM", "um", "multi", "count"], "ans": ["ens", "names", "rs", "amps", "ins", "ms", "ars", "aus", "ns", "ons", "anas", "ann", "os", "utters", "news", "aps", "aos", "arts", "ents", "angs", "arms", "rans", "ys", "aves", "said", "eds", "vs", "ANS", "ots", "helps", "offs", "ras", "ats", "eas", "orders", "ros", "us", "ts", "anks", "an", "ks", "ants", "lan", "irms"], "i": ["ini", "ei", "zi", "\u00ed", "l", "y", "ite", "ix", "iy", "ti", "\u0438", "ci", "gi", "gu", "ki", "q", "phi", "yi", " ii", "di", "ik", "bi", "j", "pi", "ai", "ii", "xi", "si", "n", "I", "li", "ia", "x", "iti", "mi", "im"]}}
{"code": "# \u554f\u984c\u304c\u5c11\u3057\u308f\u304b\u308a\u305a\u3089\u3044\u3002\\nn = int(input())\\nw = list(map(int, input().split()))\\na = 10**19\\nfor i in range(1, n-1):\\n  \t# \u91cd\u308a\u3092\u4e8c\u3064\u306b\u5206\u3051\u3001\u5dee\u7570\u306e\u6700\u5c0f\u5024\u3092\u5224\u5b9a\u3059\u308b\u3002\\n    a = min(abs(sum(w[:i+1]) - sum(w[i+1:])), a)\\nprint(a)\\n", "target": "8", "substitutes": {}}
{"code": "#!/usr/bin/env python3\\nimport itertools\\n\\n\\ndef main():\\n    N = int(input())\\n    S = [input() for i in range(N)]\\n    S_cnt = [0]*5\\n    E = [\"M\", \"A\", \"R\", \"C\", \"H\"]\\n    for s in S:\\n        for i in range(5):\\n            if s[0] ==E[i]:\\n                S_cnt[i] += 1\\n    E_list = list(itertools.combinations(E, 3))\\n    tmp = 1\\n    ans = 0\\n    for e in E_list:\\n        for i in range(3):\\n            for j in range(5):\\n                if e[i] == E[j]:\\n                    tmp *= S_cnt[j]\\n        ans += tmp\\n        tmp = 1\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "760", "substitutes": {}}
{"code": "# ABC_054_C_One_Stroke_Path.py\\n\\nfrom itertools import permutations\\nN, M = list(map(int, input().split()))\\nL=[]\\nfor _ in range(M):\\n    L.append(list(map(int, input().split())))\\n# print(L)\\n\\nP = list(permutations(range(1,N+1)))\\n# print(P)\\nct = 0\\nfor i in P:\\n    if i[0]==1 and \\\\n    all((sorted([i[j], i[j+1]]) in L) for j in range(N-1)):\\n        ct += 1\\nprint(ct)", "target": "143", "substitutes": {}}
{"code": "from collections import Counter,defaultdict,deque\\nfrom heapq import heappop,heappush,heapify\\nimport sys,bisect,math,itertools,fractions,pprint\\nsys.setrecursionlimit(10**8)\\nmod = 10**9+7\\nINF = float('inf')\\ndef inp(): return int(sys.stdin.readline())\\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\\n\\nn = inp()\\nA = [inp() for i in range(n)]\\nrem = 0\\nres = 0\\nfor i,a in enumerate(A):\\n    res += (a+rem)//2\\n    if a != 0:\\n        rem = (a+rem)%2\\n    else:\\n        rem = 0\\nprint(res)", "target": "455", "substitutes": {"mod": ["add", "min", "m", "sign", "ran", "inv", "floor", "div", "scale", " Mod", "pre", "crit", "mult", "fun", "comp", "round", "exp", "pi", "Mod", "fac", "MOD", "tr", "log", "dec", "set", "grow", "prime", "base"], "INF": ["INf", "PINf", " INInf", "PINF", "INN", " INN", "PINInf", "INInf", "PINN", "Inf", " INf", "InN", "InF", "InInf"], "n": ["z", "nn", "m", "l", "y", "nt", "t", "s", "N", "len", "ns", "nm", "r", "en", "mn", "v", "ll", "na", "c", "ln", "sn", "an", "b", "nd", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "net", "int", "np", "nan", "nc", "o", "w", "no", "x", "count"], "i": ["ini", "ei", "ri", "zi", "m", "y", "ti", "ip", "ci", "r", "il", "gi", "v", "adi", "pa", "ij", "ki", "b", "ami", "yi", "ind", "di", "ik", "p", "bi", "j", "pi", "fi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "iter", "ia", "x", "iu", "im"], "A": ["Y", "AA", "Ar", "H", "C", "AC", "R", "G", "AV", "N", "BA", "CA", "LA", "RAM", "JA", "NA", "S", "As", "D", "All", "AT", "Array", "Ah", "AF", "L", "GA", "An", "At", "P", "AM", "This", "The", "AB", "J", "V", "I", "B", "Ax", "SA"], "rem": ["rest", "pr", "pt", "m", "rom", "rep", "ret", "nt", "Rem", " Rem", "fr", "mn", "r", "resp", "gr", "ch", "perm", "div", "em", "dem", "resh", "REM", "pers", "RE", "ex", "ref", "remote", "mont", "re", "rm", "pre", "mem", "remove", "rip", "br", "col", "prom", "RES", "tr", "hr", "mr", "pres", "ber", "reg", "rel", "Res", "dr", "norm", "req", "ev", "cm", "pro"], "res": ["ress", "ps", "rand", "rest", "out", "obj", "pr", "sum", "reset", "rep", "ret", "rs", "nt", "pos", "result", "ms", "fr", "pas", "r", "err", "resp", "gr", "dem", "resh", "pers", "RE", "ref", "mont", "re", "num", "mem", "crit", "p", "progress", "zero", "results", "RES", "pres", "ber", "reg", "rel", "Res", "resolution", "req"], "a": ["f", "ba", "m", "am", "ta", "ae", "ha", "t", "name", "sta", "ga", "s", "au", "xa", "ca", "r", "la", "at", "v", "pa", "na", "c", "ea", "b", "val", "area", "va", "p", "alpha", "ao", "j", "oa", "ai", "sa", "aa", "ac", "o", "ma", "u", "ia", "eas", "aaa", "x", "ar", "ana", "an"]}}
{"code": "from math import floor, sqrt\\nfrom collections import defaultdict\\nN,M = map(int,input().split())\\nd = defaultdict(int)\\nfor i in range(2, floor(sqrt(M))+1):\\n    while M % i == 0:\\n        d[i] += 1\\n        M //= i\\nif M != 1:\\n    d[M] += 1\\ndef comb(n,k):\\n    if k == 0:\\n        return 1\\n    return comb(n-1,k-1) * n // k\\nans = 1\\nfor e in d.values():\\n    ans *= comb(N+e-1, e)\\nprint(ans % (10**9+7))", "target": "473", "substitutes": {"N": ["K", "H", "C", "X", "AN", "F", "Sn", "R", "G", "CNN", "Ni", "W", "A", "MN", "CN", "NA", "S", "E", "O", "D", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "V", "I", "B", "NUM", "Ns", "NN"], "M": ["Mass", "MO", "K", "m", "C", "MP", "H", "F", "MX", "R", "PM", "G", "MT", "MR", "LM", "CM", "MI", "MN", "MC", "U", "Size", "MM", "S", "E", "O", "D", "L", "NM", "JM", "TM", "P", "MA", "Q", "AM", "MS", "T", "DM", "MAN", "Ma", "J", "V", "RM", "I", "B", "Mi", "Me", "MU"], "d": ["done", "ld", "m", "df", "l", "bd", "t", "dict", "ed", "did", "dd", "r", "dt", "div", "db", "v", "sd", "c", "h", "q", "nd", "b", "D", "di", "pd", "de", "do", "p", "da", "j", "ds", "gd", "td", "cd", "dh", "ad", "o", "md", "dat", "fd"], "i": ["f", "io", "ini", "zi", "m", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "im", "gi", "v", "ij", "hi", "oi", "ki", "q", "phi", "b", "ind", "id", "di", "ik", "p", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "x", "ui", "mi", "iu", "multi"], "n": ["f", "nn", "m", "l", "nt", "t", "len", "ns", "r", "en", "fn", "mn", "v", "na", "c", "ln", "sn", "h", "wn", "cn", "nu", "nb", "num", "size", "p", "dn", "j", "ne", "net", "gn", "np", "nan", "nc", "w", "no", "on", "x", "an", "ll"], "k": ["dk", "z", "max", "K", "m", "kr", "kind", "kt", "kh", "uk", "ka", "y", "t", "ck", "kl", "ok", "kk", "kan", "ke", "r", "v", "c", "mk", "ki", "q", "g", "ak", "kn", "ik", "num", "p", "km", "j", "kj", "ek", "kw", "tk", "o", "sk", "ko", "x", "ku", "ks"], "ans": ["ps", "ens", "ls", "cus", "ran", " es", "rs", "cs", "lan", "amps", "ines", "s", "ms", "ins", "os", "ars", "ns", "mn", "ons", "aus", "ann", " Ans", "aps", "aos", "arts", "es", "ents", "ums", "rans", "eds", "posts", "ies", " means", "vs", "ANS", "eps", "ds", "uns", "nas", "anes", "ads", "ats", "als", "us", "ros", "vals", "an", "ks", "ants", "ows"], "e": ["pe", "f", "ve", "ei", "ele", "el", "le", "edge", "ene", "ae", "a", "eff", "se", "ese", "eeee", "ite", "t", "ed", "s", "en", "ue", "ke", "es", "c", "g", "ef", "ate", "E", "ze", "eu", "oe", "er", "ie", "de", "te", "p", "ec", "ek", "ne", "et", "ee", "it", "ode", "eg", "o", "u", "me", "x", "eb"]}}
{"code": "a,b,c=map(int,input().split())\\nif a**2+b**2==c**2:\\n  print(a*b//2)\\nelif a**2+c**2==b**2:\\n  print(a*c//2)\\nelse:\\n  print(b*c//2)", "target": "637", "substitutes": {"a": ["f", "ba", "m", "ap", "am", "ta", "\u00e1", "ae", "l", "t", "sta", "ga", "au", "i", "ax", "A", "r", "ca", "at", "ea", "g", "ak", "area", "d", "p", "va", "da", "alpha", "ao", "oa", "e", "sa", "ai", "aq", "aa", "aj", "al", "ac", "ma", "u", "ia", "ab", "aaa", "x", "ar", "ach", "an"], "b": ["f", "rb", "ba", "ib", "mb", "be", "l", "t", "bc", "bp", "i", "bg", "cb", "fb", "r", "ca", "ch", "db", "v", "h", "g", "wb", "nb", "lib", "d", "bi", "br", "j", "bf", "e", "sb", "bo", "gb", "beta", "bis", "abs", "ob", "ub", "bs", "ac", "o", "B", "ab", "bb", "bar", "eb"], "c": ["f", "mc", "C", "cat", "cr", "cs", "l", "t", "bc", "cf", "con", "cb", "cin", "r", "ca", "ch", "rc", "ci", "v", "co", "h", "lc", "g", "cc", "ct", "unc", "ce", "d", "cos", "cur", "can", "cp", "e", "cd", "dc", "fc", "tc", "n", "ac", "cu", "u", "cor", "vc", "cm"]}}
{"code": "import collections\\nN = int(input())\\na = list(map(int,input().split()))\\nans = 0\\nc = collections.Counter(a)\\n\\nkey = list(c.keys())\\n\\n\\nfor i in key:\\n  if i > c[i]:\\n    ans += c[i]\\n  elif i < c[i]:\\n    ans += c[i] - i\\nprint(ans)", "target": "536", "substitutes": {"N": ["Num", "C", "Ni", "M", "ns", "A", " C", "NR", " D", " Num", "na", "ID", "Count", "S", "Input", "D", "NS", "Names", "Key", " K", "P", "n", "I", " NC", "Ns", "NC", "NN", " S"], "a": ["f", "ba", "ta", "ae", "t", "au", "ed", "A", "ca", "la", "input", "at", "ea", "an", "b", "ate", "area", "va", "p", "alpha", "ao", "act", "e", "sa", "ata", "aa", "up", "ac", "n", "o", "ma", "abs", "ia", "ab", "aaa", "ar", "am"], "ans": ["ens", "lines", "sum", "AN", "oss", "ran", "pan", "rs", "amps", "ms", "anas", "ins", "ars", "ns", "ons", "aus", "ann", "outs", " Ans", "aps", "acs", "aos", "arts", "ents", "asks", "ums", "angs", "rans", "ays", "eds", "posts", "grades", "ids", "ANS", "anus", "trans", "lets", "nas", "uns", "helps", "offs", "anes", "ams", "ads", "ates", "ats", "orts", "ados", "ros", "vals", "anks", "an", "ks", "ants", "olds", "jas", "lan", "irms"], "c": ["f", "abc", "sc", "mc", "C", "cr", "cs", "l", "bc", "con", "etc", "ci", "ca", "rc", "cb", "ch", "v", "co", "cv", "lc", "gc", "csv", "ct", "cc", "ce", "cont", "cos", "cur", "p", "col", "cp", "ec", "com", "xc", "cd", "dc", "current", "fc", "cache", "nc", "tc", "ac", "cu", "ic", "mac", "cm"], "key": ["type", "sum", "ice", "order", "y", "name", "box", "case", "info", "row", "step", "ip", "k", "ver", "check", "root", "v", "index", "start", "id", "path", "char", "Key", "next", "alpha", "j", "col", "et", "ai", "int", "KEY", "keys", "set", "list", "x", "link", "base", "count", "new"], "i": ["z", "io", "ini", "zi", "aii", "uri", "ni", "l", "y", "t", "name", "ix", "aci", "ti", "info", "ci", "ip", "\u0438", "ji", "ati", "gi", "v", "ij", "ori", "oi", "index", "ki", "phi", "yi", "asi", "id", "di", "ik", "iat", "vi", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "o", "li", "I", "ia", "set", "u", "n", "list", "x", "ui", "mi", "iu"]}}
{"code": "N, P = map(int, input().split())\\nS = input()\\n\\nans = 0\\nif P == 2 or P == 5 :\\n    for i in range(N) :\\n        if int(S[i])%P == 0 :\\n            ans += i+1\\n    print(ans)\\n    exit()\\n\\nmodP = [0 for _ in range(P)]\\nmodP[0] = 1\\nnow = 0\\nt = 1\\nfor i in range(N) :\\n    now += int(S[-1-i]) * t\\n    now %= P\\n    modP[now] += 1\\n    t = t * 10 % P\\n\\nfor r in modP :\\n    ans += r*(r-1)//2\\n\\nprint(ans)\\n", "target": "448", "substitutes": {"N": ["Y", "K", "H", "C", "X", "AN", "F", "R", "Ni", "CNN", "W", "NB", "NI", "M", "NR", "A", "NP", "NA", "E", "O", "NT", "D", "SN", "NS", "L", "No", "Q", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NN"], "P": ["Y", "K", "PK", "IP", "H", "C", "X", "F", "R", "PM", "G", "W", "M", "PA", "A", "PO", "PU", "U", "NP", "PR", "O", "E", "New", "D", "p", "L", "TP", "PP", "Q", "T", "DP", "J", "V", "I", "B", "LP", "PI", "Power", "CP", "PUT", "PT", "BP"], "S": ["BS", "String", "SI", "C", "X", "SS", "F", "R", "SL", "G", "PS", "SB", "JS", "LS", "s", "M", "A", "POS", "RS", "INS", "U", "Input", "DS", "D", "NS", "SU", "L", "SP", "TS", "Q", "T", "SA", "SF", "Z", "V", "I", "B", "CS", "Set", "SQL"], "ans": ["ens", "rors", "ings", "cas", "anon", "ls", "annot", "mas", "AN", "oss", "ran", "anc", "rs", "amps", "au", "s", "ins", "ms", "os", "aus", "ns", "ons", "ann", "ars", "outs", "aps", " Ans", "aos", "arts", "aces", "ents", "rans", "eds", "posts", "said", "yes", " means", "ANS", "uns", "ai", "offs", "mean", "anas", "ras", "ats", "ros", "anks", "an", "ks", "ants"], "i": ["ini", "ei", "zi", "\u00ed", "m", "a", "l", "y", "ix", "ti", "ip", "ci", "ji", "v", "gi", "gu", "ij", "c", "ori", "index", "ki", "q", "phi", "b", "ie", "ind", "id", "batch", "di", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "iri", "u", "me", "x", "ui", "mi", "iu", "im", "iti"], "modP": ["modT", " modO", "posA", "modR", " modT", "ModR", " modp", "ModT", "MODM", "ModA", "posR", "MODA", "modA", "MODP", "modifiedP", " modM", "MODT", "modeR", "modp", "modifiedR", " modA", "modifiedA", "ModP", "modeP", "ModO", "MODR", "modifiedp", "modeO", " modR", "modO", "posp", "MODO", "modeM", "posP", "modM"], "_": ["line", " int", "all", "ix", "ip", "un", "ex", "val", "int", "n", "I", "no", "x", "an"], "now": ["z", "wait", "obj", "tmp", "sc", "ay", "off", "when", "m", "Now", "a", "shift", "ord", "NOW", "tt", "full", "ow", "y", "row", "ms", "sw", "gr", "age", "at", "wa", "aw", "start", "g", "we", "d", "next", "p", "j", "oa", "total", "current", "then", "after", "ew", "time", "aj", "n", "w", "set", "save", "on", "x", "ready", "count", "new", "st"], "t": ["z", "f", "pt", "tm", "m", "ta", "a", "l", "y", "tt", "s", "dt", "tp", "at", "v", "c", "ot", "b", "g", "ct", "tn", "d", "tz", "p", "j", "total", "mt", "e", "wt", "tf", "T", "time", "vt", "n", "tc", "o", "w", "u", "x", "ts", "rt", "new"], "r": ["rand", "rate", "pr", " R", "m", "cr", "sr", "ir", "R", "rs", "nr", "result", "attr", "rc", "err", "res", "k", "c", "h", "q", "b", "g", "pair", "re", "id", "d", "p", "radius", "ro", "e", "it", "run", "right", "ur", "n", "rt", "rd", "o", "w", "u", "mr", "rec", "rat", "ar", "Rat"]}}
{"code": "from collections import Counter\\nn = int(input())\\na = [int(input()) for i in range(n)]\\nc = Counter(a).values()\\nans = 0\\nfor i in c:\\n    if i % 2 == 1:\\n        ans += 1\\nprint(ans)", "target": "707", "substitutes": {"n": ["nn", "nia", "m", "l", "nt", "t", "number", "nr", "N", "len", "ns", "mn", "k", "r", "v", "ll", "na", "ln", "sn", "an", "b", "g", "cn", "nu", "nb", "num", "d", "size", "p", "total", "nan", "nc", "nl", "x", "count"], "a": ["ba", "abc", "am", "ta", "ae", "t", "sta", "ga", "au", "xa", "ca", "A", "la", "at", "na", "ea", "b", "area", "da", "alpha", "act", "aka", "sa", "ai", "ata", "aa", "ac", "abs", "ma", "ia", "ab", "eas", "aaa", "an"], "i": ["ini", "ei", "ri", "zi", "\u00ed", " bi", "iii", "ni", "iy", "ti", "ip", "ci", "r", "\u0438", "ji", "ati", "gi", "ij", "ori", "oi", "ki", "q", "phi", "ami", "yi", "ind", " ii", "di", "ik", "Xi", "p", "bi", "j", "pi", "ai", "ii", "xi", "si", "I", "li", "u", "iter", "x", "iti", "mi", "iu", "im"], "c": ["f", "sc", "mc", "m", "C", "cr", "cs", "t", "bc", "cons", "cf", "etc", "ci", "ca", "rc", "cb", "r", "ch", "v", "cv", "b", "lc", "gc", "toc", "cc", "ct", "csv", "ctx", "cont", "p", "xc", "dc", "cache", "fc", "nc", "ac", "cu", "u", "tc", "cm", "count"], "ans": ["ens", "rors", "ls", "cs", "rs", "amps", "iann", "s", "ins", "anas", "ars", "aus", "ns", "ms", "outs", "ann", "os", "aps", "acs", "aos", "arts", "ents", "ums", "angs", "ys", "eds", "terms", "ANS", "lets", "nas", "offs", "nan", "ads", "books", "ras", "ats", "orts", "us", "ros", "anks", "an", "ks", "ants", "lan", "irms"]}}
{"code": "# 2019-11-14 20:54:46(JST)\\nimport sys\\n# import collections\\n# import math\\n# from string import ascii_lowercase, ascii_uppercase, digits\\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\\nimport itertools\\n# from functools import reduce\\n# import operator as op\\n# from scipy.misc import comb # float\\n# import numpy as np \\n\\ndef main():\\n    n, k = [int(x) for x in sys.stdin.readline().split()]\\n    # \u3042\u308b\uff11\u5730\u70b9\u3092\u7d4c\u7531\u3057\u3066\u305d\u308c\u4ee5\u5916\u306e\u5168\u3066\u306b\u3044\u304f\u306e\u304c\u6700\u3082\u591a\u304f\\n    # \u3053\u308c\u306f (n - 1) * (n - 2) // 2\u3000\u901a\u308a\\n    # k\u304c\u3053\u308c\u3088\u308a\u5927\u304d\u3044\u3068\u304d\u306b\u306f\u5b58\u5728\u305b\u305a\u3001\u305d\u308c\u4ee5\u4e0b\u306e\u6642\u306f\u7406\u8ad6\u4e0a\u5b58\u5728\u3059\u308b\\n    if k > (n - 1) * (n - 2) // 2:\\n        print(-1)\\n        sys.exit()\\n        \\n    all_uv = list(itertools.combinations(range(1, n+1), 2))\\n\\n    m = n * (n - 1) // 2 - k\\n    print(m)\\n    # 1\u3092\u4e2d\u592e\u3068\u3057\u3066\u8003\u3048\u3066\u3001\u6700\u4f4e\u96501\u4ee5\u5916\u306en-1\u500b\u306e\u9802\u70b9\u306f1\u3068\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\\n    for u, v in all_uv[:n*(n-1)//2-k]: # k\u306e\u5236\u7d04\u304b\u3089\u3001i\u306e\u6700\u5927\u5024\u306f\u6700\u5c0f\u3067(n-1)-1\u307e\u3067\\n        print(u, v)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "621", "substitutes": {}}
{"code": "n,x = map(int, input().split())\\na = list(map(int, input().split()))\\nans = 0\\nfor i in range(n-1):\\n    if a[i] <= x:\\n        if a[i]+a[i+1] <= x: continue\\n        else:\\n            ans += (a[i]+a[i+1])-x\\n            a[i+1] -= (a[i]+a[i+1])-x\\n    else:\\n        ans += a[i]-x + a[i+1]\\n        a[i], a[i+1] = x, 0\\nif a[-1] > x: ans += a[-1]-x\\nprint(ans)", "target": "76", "substitutes": {"n": ["z", "nn", "nia", "m", "ni", "l", "nt", "t", "name", "N", "ns", "mn", "r", "en", "v", "na", "c", "ng", "sn", "ln", "nd", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "net", "gn", "np", "nan", "nc", "o", "no", "norm"], "x": ["z", "f", "xes", "xp", "X", "ux", "xy", "l", "y", "t", "ix", "xs", "s", "xa", "ax", "xx", "r", "ci", "v", "xt", "dx", "wx", "c", "co", "h", "mx", "ex", "fx", "d", "p", "rx", "xc", "e", "ox", "xe", "cox", "xxxx", "int", "xi", "o", "ic", "px", "w", "u", "xf", "on", "im", "an", "tx"], "a": ["z", "f", "map", "ba", "apa", "el", "fa", "m", "ae", "att", "l", "all", "t", "sta", "au", "ga", "ed", "xa", "s", "A", "ca", "at", "la", "v", "history", "na", "c", "es", "ea", "index", "an", "h", "b", "g", "aux", "area", "ce", "d", "p", "va", "da", "ao", "app", "oa", "\u00e4", "parts", "e", "sa", "ai", "ee", "ata", "aa", "al", "ac", "o", "ma", "w", "abs", "ia", "u", "ab", "eas", "aaa", "ana", "am", "ack"], "ans": ["ens", "rors", "aned", "mas", "ran", "cs", "rs", "amps", "xs", "anned", "ines", "ins", "anas", "ms", "aus", "ns", "ons", "outs", "ann", "ars", "aps", "aos", "arts", "ians", "ums", "asks", "rans", "ays", "ands", "eds", "posts", "ops", "said", " means", "works", "ANS", "ds", "leans", "uns", "helps", "offs", "anes", "mean", "ams", "ads", "ras", "ates", "ats", "orts", "ados", "ros", "anks", "an", "ks", "ants", "olds"], "i": ["io", "ini", "ei", "rest", "ri", "zi", "cli", "uri", "ir", "chain", "y", "this", "name", "ix", "ios", "ti", "info", "ip", "ci", "key", "\u0438", "ji", "gi", "v", "status", "ij", "c", "ori", "index", "oi", "ki", "hi", "b", "phi", "ami", "ie", "ind", "id", "di", "ik", "bi", "multi", "j", "pi", "exp", "port", "fi", "ai", "it", "ii", "xi", "si", "iri", "ic", "batch", "li", "I", "ia", "iter", "me", "ui", "mi", "iu", "im", "ski", "init"]}}
{"code": "N = int(input())\\nA = [list(map(int,input().split())) for _ in range(N)]\\nprint(sorted(A)[-1][0] + sorted(A)[-1][1])", "target": "266", "substitutes": {"N": ["Num", "K", "H", "C", "X", "Sn", "R", "Ni", "CNN", "NB", "M", "NR", "Len", "NA", "S", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "Q", "T", "GN", "J", "n", "V", "I", "B", "Ns", "We", "Bern", "NO", "NN", "Wh", "NH"], "A": ["Y", "AY", "AI", "AA", "Ar", "H", "C", "X", "a", "R", "IA", "Alice", "G", "AV", "M", "BA", "Abs", "CA", "LA", "RAM", "JA", "They", "NA", "Av", "S", "As", "D", "AU", "Array", "AT", "AF", "L", "WA", "GA", "An", "mA", "P", "Java", "AM", "T", "AE", "AB", "AP", "V", "One", "I", "B", "Alpha", "ACT", "SA"], "_": [" un", "ix", " j", "__", " __", " p", "val", " c", " z", " the", "ox", " x", " co", "___", "x", " g", " no"]}}
{"code": "s = input()\\n\\nfor i in range(len(s)):\\n    if s[i] == 'A':\\n        st = i\\n        break\\nfor i in range(len(s)-1, -1, -1):\\n    if s[i] == 'Z':\\n        en = i\\n        break\\nprint(en-st+1)", "target": "365", "substitutes": {"s": ["z", "f", "ps", "sts", "str", "ings", "sv", "ws", "ls", "ties", "ords", "m", "ares", "a", "sis", "l", "rs", "t", "gs", "xs", "ins", "ms", "ns", "r", "ends", "v", "strings", "ials", "es", "c", "hs", "gins", "h", "tests", "b", "ands", "ers", "ations", "S", "bits", "ments", "ies", "eds", "itions", "ids", "p", "ains", "ss", "ds", "parts", "erences", "sb", "its", "ences", "ses", "n", "abs", "bs", "w", "sq", "ys", "tes", "ats", "bes", "als", "x", "ts", "qs", "js"], "i": ["f", "ine", "io", "ei", "ini", "zi", "\u00ed", "cli", "ir", "a", "l", "y", "t", "this", "ix", "iy", "ite", "ti", "ip", "ci", "\u0438", "ji", "il", "ati", "gi", "v", "ij", "c", "hi", "index", "q", "b", "g", "yi", "ie", "ind", "id", "di", "ik", "d", "inter", "p", "bi", "multi", "j", "pi", "itime", "record", "e", "ai", "it", "ii", "iri", "si", "xi", "ic", "li", "I", "ia", "ql", "x", "ui", "mi", "iu", "im"], "st": ["St", "started", "sts", "str", "rest", "stat", "std", "est", "se", "strike", "sta", "tt", "ste", "sty", "step", "fr", "sw", "sp", "start", "ST", "sn", "nd", "th", "stable", "stra", "sth", "inst", "ost", "ut", "usr", "mt", "sb", "const", "stop", "sat", "sh", "irst", "put", "rt", "ast"], "en": ["ens", "han", "men", "ene", "atten", "reen", "hen", "EN", "een", "ense", "den", "env", "sten", "ren", "pen", "\u00e9n", "enum", "sen", "enh", "En", "eni", "eu", "mun", "oen", "eng", "zen", "wen", "inn", "fen", "ven", "ena", "ened", "agen", "enc", "gen", "enn"]}}
{"code": "N = int(input())\\n\\nans = 0\\nList = []\\nfor i in range(N):\\n    A = int(input())\\n    List.append(A)\\n    \\ndef func(a, b):\\n    ret = 0\\n    for i in range(a, b + 1):\\n        ret += List[i] // 2\\n        if List[i] % 2 and i != b:\\n            List[i + 1] -= 1\\n            ret += 1\\n    return ret\\n\\nleft = 0\\nfor right in range(N):\\n    if List[right] == 0:\\n        ans += func(left, right - 1)\\n        left = right + 1\\n    \\nans += func(left, N - 1)\\n\\nprint(ans)", "target": "455", "substitutes": {"N": ["Num", "K", "H", "C", "AN", "F", "R", "Ni", "CNN", "nt", "NB", "NI", "M", "NR", "Left", "Na", "Len", "NP", "NA", "S", "O", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "Right", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NO", "NN", "NH"], "ans": ["ens", "cas", "groups", "ls", "names", "Ann", "aned", "vers", "AN", "oss", "rs", "nt", "cons", "amps", "s", "ins", "reads", "os", "ants", "ns", "ons", "ars", "ann", "res", "aus", "anas", " Ans", "outs", "errors", "arts", "rets", "ents", "ums", "ands", "posts", "ies", "ations", "ms", "ids", "ANS", "can", "ds", "leans", "An", "Cons", "lets", "uns", "offs", "anes", "Returns", "ams", "ates", "ats", "Ns", "vals", "aints", "ions", "an", "ks", "terms", "lists"], "List": ["St", "Add", "Ring", "Name", "Num", "Data", "String", "Not", "Ta", "Rest", "Long", "Less", "Print", "Local", "ists", "Next", "Lt", "Table", "Index", "Left", "Old", "Object", "Chan", "Len", "Known", "Type", "There", "Main", "Function", "Att", "Body", "Int", "Wa", "Status", "Input", "ist", "Part", "All", "Source", "Array", "Output", "Node", "Names", "Is", "L", "If", "Out", "Listener", "Chain", "Found", "Parent", "This", "Map", "Queue", "Result", "I", "Added", "Library", "Li", "Ex", "Group", "Test", "list", " list", "Set", "LIST", "Man"], "i": ["f", "io", "ib", "ini", "ei", "zi", "m", "ir", "l", "y", "t", "ix", "ti", "ip", "ci", "r", "k", "\u0438", "v", "gi", "ij", "c", "index", "oi", "yi", "ind", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "n", "si", "o", "ic", "li", "I", "ia", "list", "x", "ui", "mi", "iu", "im", "iri"], "A": ["App", "AR", "AI", "AA", "Ar", "C", "Al", "AC", "IA", "CA", "LA", "NA", "S", "O", "As", "Part", "AU", "HA", "AT", "Array", "Ag", "AF", "L", "Address", "An", "At", "P", "The", "AB", "AP", "V", "Alpha", "B", "I", "Added", "Ant", "Ax"], "a": ["ba", "ta", "ae", "l", "t", "sta", "au", "r", "ca", "la", "at", "c", "ea", "an", "ami", "va", "p", "alpha", "sa", "ai", "aa", "aj", "al", "art", "n", "ac", "ma", "o", "ia", "ab", "aaa", "x", "ar", "am"], "b": ["z", "f", "rb", "ba", "ib", "be", "l", "y", "t", "bc", "to", "s", "cb", "fb", "r", "k", "v", "db", "c", "h", "g", "nb", "p", "bi", "j", "null", "false", "e", "sb", "it", "bis", "n", "ob", "bs", "u", "B", "ab", "x", "bb", "eb"], "ret": ["Ret", "det", "Return", "out", "tmp", "ter", "reset", "red", "rs", "nt", "t", "ext", "result", "back", "len", "r", "jp", "res", "reply", "at", "en", "rets", "ft", "over", "xt", "lt", "gt", "val", "tn", "re", "mem", "RET", "mt", "alt", "ry", "get", "uf", "net", "it", "int", "mat", "rem", "iter", "print", "list", " Ret", "rt"], "left": ["ner", "rest", "out", "level", "ls", "top", "le", "m", "off", "l", "all", "nt", "t", "old", "len", "r", "Left", "lb", "ft", "lt", "index", "start", "lc", "lo", "ct", "ind", "L", "j", "low", "end", "local", "Right", "last", "it", "half", "inner", "n", "loc", "nl", "list", "x", "lower", "new", "st"], "right": ["rest", "max", "out", "top", "one", "range", "through", "R", "l", "rh", "full", "day", "t", "close", "row", "back", "result", "ax", "r", "Left", "root", "before", "ft", "co", "length", "ren", "gt", "pair", "th", "re", "rew", "d", "p", "Right", "j", "ro", "outer", "block", "inner", "after", "wo", "short", "n", "rem", "w", "reverse", "correct", "rel", "success", "x", "rt", " RIGHT", "new"]}}
{"code": "N, X, Y = map(int, input().split())\\nlst = [0 for i in range(N-1)]\\nfor i in range(1, N+1):\\n    for j in range(i+1, N+1):\\n        k = min(abs(j-i), abs(X-i) + abs(Y-j) + 1)\\n        lst[k-1] += 1\\nfor i in lst:\\n    print(i)", "target": "22", "substitutes": {"N": ["Num", "K", "NE", "H", "C", "AN", "Ni", "CNN", "NB", "NI", "M", "NR", "MN", "NP", "NA", "S", "ND", "Ne", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "Ns", "NUM", "NO", "NN", "NH"], "X": ["TY", "UX", "H", "C", "XL", "IC", "MX", "R", "W", "XY", "M", "A", "AX", "OX", "TH", "S", "DX", "EX", "L", "P", "Q", "T", "XP", "J", "XX", "Z", "V", "I", "Ex", "IX", "x", "XT"], "Y": ["SY", "TY", "AY", "CH", "H", "RY", "MX", "R", "HT", "EY", "y", "G", "W", "XY", "M", "Cy", "TH", "S", "E", "Py", "YA", "NS", "L", "YS", "Q", "NY", "T", "J", "Z", "YC", "V", "FY", "I", "B", "BY", "YY", "MY"], "lst": ["Lsts", "lsts", "dlnt", "Lists", "tists", "tsts", "tist", " lists", "lnt", "Lnd", "dlst", "elST", "lset", "dlset", "elist", "lnd", " lsts", "Lset", "tst", " lST", "elst", "LST", " lset", "List", "Lst", "lST", " lnd", "list", "dlist", " list", "Lnt", "elnd", "lists", " lnt"], "i": ["ini", "ei", "ri", "zi", "m", "a", "ir", "l", "y", "t", "ix", "iy", "ti", "ip", "ci", "\u0438", "ji", "key", "gi", "v", "ij", "hi", "index", "oi", "ki", "phi", "yi", "ie", "id", " ii", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "iri", "u", "iter", "x", "iti", "mi", "iu", "im", "ui"], "j": ["z", "f", "obj", "jl", "m", "ja", "l", "y", "t", "ix", "fr", "jp", "ji", "v", "ij", "index", "h", "q", "b", "g", "IJ", "p", "bi", "oj", "pi", "kj", "it", "jj", "aj", "J", "ii", "xi", "si", "ic", "uj", "dj", "u", "o", "li", "n", "x", "bj", "js", "jc"], "k": ["kat", "K", "kr", "kh", "uk", "spec", "ka", "qv", "ck", "kl", "ikk", "key", "kk", "kan", "ke", "kid", "mk", "q", "ak", "unk", "kn", "ijk", "wk", "ik", "km", "kj", "ek", "kw", "tk", "sk", "ko", "ku", "ks", "yk"]}}
{"code": "from collections import defaultdict\\nimport sys\\ninput = sys.stdin.readline\\n\\nN, M = [int(x) for x in input().split()]\\nA = [0] + [int(x) % M for x in input().split()]\\n\\n# \u7d2f\u7a4d\u548c(mod M)\u306b\u5909\u3048\u308b\\nfor i in range(1, N + 1):\\n    A[i] += A[i - 1]\\n    A[i] %= M\\n\\ncandy = defaultdict(int) # default value is 0\\nfor i in range(N + 1):\\n    candy[A[i]] += 1\\n\\nans = 0\\nfor n in candy.values():\\n    ans += n * (n - 1) // 2\\n\\nprint(ans)", "target": "23", "substitutes": {"input": ["op", "active", "str", "out", "cat", " Input", "draw", "dict", "format", "step", "raw", "request", "output", "cin", "history", "url", "pull", "socket", "q", "enum", "ct", "csv", "Input", "cmd", "pattern", "config", "context", "read", "cur", "hidden", "next", " inputs", "initial", "join", "get", "it", "int", "each", "focus", "feed", "sequence", "print", "lat", "list", "put", "update", "data", "unit", "proc", "text", "init"], "N": ["Y", "K", "C", "X", "F", "R", "Ni", " C", " D", "S", "E", "O", "D", "SN", " X", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", "Ns", " n", " S"], "M": ["K", "m", "C", "MP", "X", "H", "F", "MX", "R", "G", "W", "MT", "LM", "CM", "MI", "MC", "U", "MM", "S", "O", "D", "L", "NM", "TM", "P", "Q", "MS", "T", "DM", "J", "Z", "V", "RM", "I", "B"], "x": ["z", "rex", "yx", "xes", "xp", "m", "X", "expl", "ux", "xy", "hex", "l", "y", "t", "ix", "xs", "xa", "i", "xx", "key", "k", "ci", "plex", " ax", "v", "nex", "xt", "dx", "wx", "c", "mx", "zx", "ex", "ct", "fx", "ross", "ctx", "\u00e7", "p", "rx", "xxx", " xx", "xc", "e", "ox", "xe", "int", "xi", "n", "acqu", "px", "w", "xf", " cx", "item", "tx", "inx", "qu"], "A": ["Y", "K", "AA", "H", "C", "X", "a", "R", "G", "W", "U", "S", "E", "O", "D", "Array", "L", "An", "P", "T", "J", "Z", "V", "I", "B", "Alpha"]}}
{"code": "S = input()\\nN = len(S)\\ni = 0\\nwhile N-i >4:\\n    if S[N-i-5:N-i] == \"dream\":\\n        i+=5\\n    elif N-i>6 and S[N-i-7:N-i]==\"dreamer\":\\n        i+=7\\n    elif S[N-i-5:N-i] == \"erase\":\\n        i += 5\\n    elif N-i>5 and S[N-i-6:N-i] ==\"eraser\":\\n        i+=6\\n    else:\\n        break\\n\\nif N == i:\\n    print(\"YES\")\\nelse:\\n    print(\"NO\")", "target": "151", "substitutes": {"S": ["Y", "BS", "String", "SI", "H", "C", "X", "SS", "F", "WS", "R", "SL", "G", "W", "PS", "SB", "JS", "LS", "s", "OS", "M", "A", "RS", "INS", "CSS", "U", "ST", "IS", "E", "O", "DS", "D", "US", "NS", "SU", "SO", "L", "FS", "SP", "P", "TS", "Q", "IES", "SH", "You", "MS", "T", "SF", "AS", "SA", "Z", "VS", "V", "I", "B", "CS", "GS", "Set"], "N": ["AN", "Last", "Ni", "NI", "ANY", "E", "O", "Ne", "SN", "NOTE", "UN", "You", "And", "NO", "POS", "NPR", "Name", "Scott", "K", "G", "EN", "Any", "M", "NR", "CN", "Given", "NP", "NA", "ND", "NAT", "US", "FN", "P", "No", "Q", "n", "Z", " n", "NH", "Y", "NF", "F", "NB", "NG", "A", "For", "Size", "NT", "D", "All", "Node", "L", "NM", "TN", "MAN", "V", "Note", "Num", "NE", "C", "Long", "R", "New", "NS", "Is", "GO", "UNE", "T", "GN", "J", "The", "I", "OUT", "B", "NN", "IN"], "i": ["f", "io", "ini", "ei", "out", "rest", "zi", "iq", "m", "cli", "a", "chain", "you", "t", "y", "ix", "l", "to", "ti", "s", "\u0438", "ci", "ip", "k", "im", "at", "gi", "v", "ij", "ori", "index", "oi", "h", "hi", "ki", "b", "g", "ind", "id", "di", "pre", "api", "p", "bi", "vi", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "n", "si", "o", "ic", "I", "li", "u", "iri", "ia", "us", "x", "ui", "mi", "iu", "multi", "um", "item"]}}
{"code": "from collections import Counter,defaultdict,deque\\nfrom heapq import heappop,heappush,heapify\\nfrom bisect import bisect_left,bisect_right \\nimport sys,math,itertools,fractions,pprint\\nsys.setrecursionlimit(10**8)\\nmod = 10**9+7\\nINF = float('inf')\\ndef inp(): return int(sys.stdin.readline())\\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\\n\\nclass UnionFind():\\n    def __init__(self, n):\\n        self.n = n\\n        self.parents = [-1] * n\\n\\n    def find(self, x):\\n        if self.parents[x] < 0:\\n            return x\\n        else:\\n            self.parents[x] = self.find(self.parents[x])\\n            return self.parents[x]\\n\\n    def union(self, x, y):\\n        x = self.find(x)\\n        y = self.find(y)\\n\\n        if x == y:\\n            return\\n\\n        if self.parents[x] > self.parents[y]:\\n            x, y = y, x\\n\\n        self.parents[x] += self.parents[y]\\n        self.parents[y] = x\\n\\n    def size(self, x):\\n        return -self.parents[self.find(x)]\\n\\n    def same(self, x, y):\\n        return self.find(x) == self.find(y)\\n\\n    def members(self, x):\\n        root = self.find(x)\\n        return [i for i in range(self.n) if self.find(i) == root]\\n        \\n    def roots(self):\\n        return [i for i, x in enumerate(self.parents) if x < 0]\\n\\n    def group_count(self):\\n        return len(self.roots())\\n    \\n    def all_group_members(self):\\n        return {r: self.members(r) for r in self.roots()}\\n\\nn,m = inpl()\\nuf = UnionFind(n)\\ned = [inpl() for _ in range(m)]\\nres = [n*(n-1)//2]\\nfor i in range(1,m)[::-1]:\\n    a,b = ed[i]\\n    a,b = a-1, b-1\\n    if uf.same(a,b):\\n        res.append(res[-1])\\n        continue\\n    res.append(res[-1] - uf.size(a)*uf.size(b))\\n    uf.union(a,b)\\nprint(*res[::-1])", "target": "287", "substitutes": {"mod": ["add", "min", "sign", "inv", "floor", "debug", " trunc", "circ", "scale", " Mod", "mult", "fun", "exp", "frac", "j", "pi", "Mod", "fac", "MOD", "tr", "log", "dec", "mag", "set", "grow", "prime", "base"], "INF": [" INInf", "PINFF", "PINF", "INN", " INN", " INFF", "PINInf", "INInf", "INFF", "PINN", "InFF", "InN", "InF", "InInf"], "self": ["disk", "add", "clean", "spec", "other", "dev", "parent", "full", "name", "manager", "close", "Self", "make", "expr", "attr", "sw", "series", "public", "before", "co", "missing", "empty", "h", "q", "wn", "complete", "ref", "deep", "tree", "work", "pre", "ctx", "network", "links", "parts", "cmp", "weak", "graph", "first", "rem", "rec", "also", "new", "sys", "ws", "obj", "python", "params", "child", "unknown", "node", "pkg", "this", "se", "private", "result", "pp", "final", "shape", "rc", "output", "history", "json", "ren", "replace", "selves", "test", "cl", "exp", "object", "truth", "gh", "txt", "small", "table", "left", "print", "help", "me", "prefix", "req", "scope", "data", "view", "proc", "md", "rb", "ls", "look", "rs", "nt", "urn", "debug", "raw", "resp", "filter", "console", "user", "about", "context", "mem", "next", "p", "func", "app", "form", "e", "results", "subject", "right", "cache", "loc", "w", "support", "own", "method", "details", "partial", "diff", "tmp", "views", "what", "util", "my", "py", "all", "au", "s", "xml", "github", "pair", "th", "mp", "remote", "config", "change", "local", "get", "mix", "block", "np", "lex", "log", "instance", "rel", "handle"], "n": ["z", "f", "nn", "node", "l", "nt", "t", "number", "nr", "s", "ms", "N", "len", "ns", "nm", "k", "en", "mn", "v", "na", "c", "sn", "h", "q", "an", "g", "cn", "nu", "nb", "ny", "num", "d", "size", "p", "dn", "M", "j", "network", "ne", "net", "gn", "int", "np", "span", "nan", "nc", "o", "w", "no", "on", "norm"], "parents": ["roots", "options", "tips", "times", "names", "ones", "parent", "modules", "kids", "states", "outs", "errors", "tests", "types", "links", "drivers", "relations", "its", "files", "chains", "actions", "dates", "Parents", "orders", "tags", "values", "groups", "devices", "params", "pins", "xs", "ports", "mates", "aps", "owners", "banks", "packages", "masters", "changes", "children", "codes", "ds", "keys", "apps", "terms", " Parents", "holders", "headers", "gs", "classes", "levels", "fields", "points", "services", "ids", "works", "p", "versions", "results", "papers", "workers", "items", "pres", "ps", "users", "checks", "lines", "days", "ns", "boxes", "properties", "ors", "makers", "members", "plugins", "packs", "mins", "jobs", "balls", "lists"], "x": ["xp", "X", "name", "xa", "ax", "xx", "expr", "v", "co", "wx", "h", "mx", "foo", "ct", "val", "xi", "z", "f", "wait", "el", "one", "xy", "ext", "t", "xs", "xt", "index", "ex", "test", "exp", "xc", "o", "px", "element", "dr", "xd", "yx", "l", "ix", "at", "check", "color", "c", "fx", "p", "j", "e", "xe", "xxxx", "ic", "w", "xf", "on", "xes", "exclusive", "ux", "hex", "s", "key", "xml", "dx", "fixed", "any", "rx", "xxx", "act", "ox", "lex", "u", "zx", "tx"], "y": ["Y", "z", "type", "io", "ym", "ey", "yl", "yo", "ay", "my", "xy", "py", "t", "yer", "iy", "by", "sy", "oy", "yy", "k", "ty", "yt", "ch", "v", "c", "gy", "ys", "h", "ot", "ies", "user", "yes", "yi", "wy", "ny", "hey", "er", "fy", "p", "br", "j", "hot", "ry", "e", "ya", "ox", "uy", "ye", "axy", "yr", "cy", "vy", "o", "yet", "u", "kit", "on", "sky", "base", "ly"], "root": ["roots", "node", "chain", "parent", "this", "box", "result", "k", "oot", "c", "h", "ot", "g", "depth", "tree", "id", "test", "p", "join", "br", "owner", "Root", "ro", "it", "right", "rank", "us", "head", "prime", "unit", "base"], "i": ["z", "f", "ei", "ri", "zi", "l", "t", "ix", "ti", "ip", "ci", "k", "v", "ij", "c", "index", "h", "phi", "ind", "id", "di", "d", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "o", "ic", "li", "I", "u", "ia", "mi", "iu", "im"], "r": ["z", "rb", "role", "pr", "rr", "kr", "sr", "cr", "ir", "rh", "R", "l", "rs", "nr", "result", "rc", "err", "gr", "k", "c", "h", "q", "g", "pair", "er", "re", "d", "p", "br", "j", "usr", "ro", "e", "right", "vr", "mr", "rd", "w", "u", "rar", "ar", "rt"], "m": ["mu", "z", "f", "gm", "mc", "tm", "mas", "l", "sm", "t", "s", "ms", "M", "mn", "k", "nm", "v", "em", "mis", "c", "bm", "h", "g", "dm", "num", "d", "p", "man", "j", "mt", "om", "e", "mr", "o", "w", "mm", "mi", "cm"], "uf": ["sup", "uh", "ud", "df", "ow", "su", "af", "pb", "fol", "ue", "ul", "fed", "fo", "ef", "prot", "uff", "eu", "elf", "fam", "ull", "bo", "uc", "ub", "lf", "ff", "us", "um", "ui", "eb"], "ed": ["sed", "med", "ld", "led", "ded", "ted", "ED", "red", "wed", "eed", "rated", "hed", "added", "edited", "es", "fed", "eds", "ped", "ex", "oned", "iped", "ined", "ored", "er", "ess", "ned", "et", "ged", "e", "eded", "embed", "aed", "ad", "reed", "bed", "ied", "ened", "ended", "Ed", "oted", "ared"], "_": ["of", "pt", "all", "ix", "un", "__", "g", "ate", "val", "ml", "mult", "int"], "res": ["ress", "ps", "els", "rest", "out", "obj", "red", "ret", "rs", "os", "ms", "gr", "q", "ands", "re", "aux", "j", "RES", "bs", "rem", "reg", "rel", "Res", "bed", "als", "us", "js"], "a": ["f", "ba", "ae", "l", "t", "s", "A", "ca", "at", "la", "v", "c", "ea", "g", "d", "p", "alpha", "j", "e", "ai", "sa", "aa", "ac", "o", "w", "u", "ab", "aaa", "an"], "b": ["z", "f", "rb", "ba", "be", "l", "t", "bc", "s", "v", "c", "g", "d", "p", "bi", "j", "e", "beta", "o", "bs", "w", "B", "ab", "bb"]}}
{"code": "A, B, C = map(int, input().split())\\n\\nif A<B:\\n    a = A\\n    b = B\\nelse:\\n    a = B\\n    b = A\\n\\n\\nprint('Yes') if a<=C<=b else print('No')\\n", "target": "780", "substitutes": {"A": ["Y", "AY", "AR", "K", "AA", "Ar", "H", "X", "AN", "AC", "F", "R", "IA", "G", "AV", "N", "M", "BA", "CA", "AL", "U", "S", "E", "O", "As", "D", "HA", "AT", "AU", "AF", "L", "GA", "An", "At", "P", "Q", "AM", "This", "AE", "AS", "SA", "T", "AB", "AP", "V", "Z", "I", "The", "J", "CB", "AH"], "B": ["Y", "BE", "BBC", "BB", "VB", "DB", "H", "X", "EB", "F", "RB", "R", "OB", "G", "SB", "NB", "BO", "WB", "M", "BA", "IB", "BC", "N", "BI", "GB", "S", "E", "MB", "D", "BD", "L", "TB", "BG", "P", "Q", "T", "J", "AB", "Z", "V", "BT", "I", "BW", "BL", "CB", "Bern", "BF", "BR", "Bs"], "C": ["Y", "K", "CE", "H", "CO", "F", "R", "G", "W", "CR", "CP", "N", "M", "BC", "CI", "c", "U", "S", "E", "O", "D", "Can", "CT", "L", "CC", "P", "Q", "T", "Co", "YC", "J", "CCC", "V", "Z", "I", "EC", "CS", "CB", "DC"], "a": ["ba", "obj", "ap", "ae", "y", "t", "sta", "ga", "au", "i", "ca", "r", "at", "c", "ain", "aw", "an", "ak", "area", "p", "alpha", "j", "app", "oa", "act", "e", "ai", "sa", "aa", "aj", "al", "art", "ac", "n", "ace", "aut", "o", "ab", "eas", "x", "ar", "ach", "am", "aff"], "b": ["z", "rb", "obj", "m", "bl", "be", "l", "y", "t", "bc", "s", "i", "bg", "bh", "fb", "cb", "r", "lb", "db", "v", "c", "q", "g", "wb", "cc", "nb", "d", "p", "bt", "bi", "j", "e", "sb", "beta", "n", "ob", "o", "bs", "ab", "x", "bb", "bar", "base", "eb"]}}
{"code": "def main():\\n    N = int(input())\\n    p_list = [list(map(int, input().split())) for i in range(N)]\\n\\n    z_list = []\\n    w_list = []\\n    for i in range(N):\\n        x = p_list[i][0]\\n        y = p_list[i][1]\\n        z_list.append(x + y)\\n        w_list.append(x - y)\\n    ans = max(max(z_list) - min(z_list), max(w_list) - min(w_list))\\n    print(ans)\\n    return\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "399", "substitutes": {"N": ["Name", "Num", "K", "C", "Sn", "Ni", "CNN", "NB", "NI", "M", "NR", "CN", "A", "Len", "NP", "NA", "Count", "S", "O", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "No", "T", "GN", "J", "n", "V", "I", "NUM", "We", "NO", "NN", "Network", "NH"], "p_list": ["pistslist", "p___source", "poplelist", "p_List", "p_layer", "pt_source", "p_del", " p_chain", "pistsList", "p___list", "p___layer", "popledel", "p_num", "pistschain", "ptoplelayer", "P_list", "p_source", "pt_del", "ptopledel", "pt_layer", "poplelayer", "pt_list", "poplesource", "P_List", " p_List", "ptoplelist", "P_num", "p_chain", "p___del", "ptoplesource"], "i": ["z", "io", "ini", "ei", "ri", "zi", "m", "ix", "iy", "ti", "info", "ip", "ci", "ji", "gi", "ij", "ori", "index", "phi", "yi", "id", "di", "ik", "p", "bi", "j", "pi", "qi", "ai", "it", "ii", "xi", "n", "si", "ic", "iri", "li", "I", "ia", "batch", "me", "ui", "mi", "iu", "im"], "z_list": ["zptword", "az67source", "zmatstream", "z67stream", "izptlist", "az_list", "zxleft", "z67list", "z_left", "z_List", "z12listed", "zptlevel", "izptlevel", "az67stream", "az_chain", "iz_level", "z12list", "zmatchain", " z_listed", "zptlist", "z67chain", "z12set", "iz_word", "z67List", "z2word", "zmatsource", "zmatlist", "z2set", "z_stream", "az67list", "zh_stream", "z_set", "z2listed", "z_listed", "z67source", "z_source", "zxlevel", "z_level", " z_word", "zh_List", "zptleft", "z12word", "z_info", "z_word", "zxlist", "izptleft", "az_stream", "izptword", "zh_list", "iz_left", "z_chain", "az_source", "iz_list", " z_set", "z2list", "z67info", "az67chain", "zxword", "zh_info"], "w_list": ["kwmmlist", "kwmmtemp", "wgrdata", "p_cont", "p2lists", "W_LIST", "w_stack", "w4cont", " w_stack", "w_int", "W_test", "w2list", " w_str", "w_data", "w4lists", "w_block", "p_lists", "w___stack", "w___str", "W_data", "w2LIST", "kwmmint", "w2lists", "kw_LIST", "w4list", "p_LIST", "w_LIST", "kw_list", "kwmmLIST", "w___list", "w_lists", "w2cont", "p2list", "w___cont", "kw_temp", "w_cont", "w4LIST", "wmmlist", "kw_int", "p2cont", "wmmtemp", "w___block", "w_str", "w_temp", "w___LIST", "W_list", "wgrtest", "wmmLIST", "wmmint", "w___lists", "w_test", "wgrlist", " w_block", "wgrLIST", "p2LIST"], "x": ["z", "yx", "xp", "X", "a", "xy", "l", "ix", "xs", "xa", "xx", "ax", "at", "xml", "xt", "dx", "wx", "zx", "ex", "fx", "p", "rx", "xc", "ry", "ox", "xe", "xi", "lex", "w", "px", "lat", "xf", "xd", "tx"], "y": ["z", "Y", "yo", "ey", "ym", "yl", "yn", "ay", "xy", "zy", "py", "yer", "iy", "yy", "yt", "gy", "ot", "b", "ys", "ies", "yi", "ny", "fy", "ry", "ya", "dy", "uy", "ye", "n", "yr", "cy", "vy", "o", "sky", "ly"], "ans": ["ens", "cas", "mas", "aned", "vers", "AN", "oss", "ran", "pan", "iann", "ars", "anas", "ms", "aus", "ons", "ns", "ann", "aps", "aos", "arts", "ians", "rans", "ations", "san", "ANS", "can", "nas", "anes", "nan", "ams", "ras", "ats", "anks", "an", "ks", "ants", "olds", "scan", "lan"]}}
{"code": "from itertools import groupby\\n\\n\\ns = input()\\ng = list(groupby(s))\\nprint(len(g) - 1)", "target": "655", "substitutes": {"s": ["ps", "f", "sys", "groups", "sv", "ls", "names", "m", "fs", "a", "cs", "rs", "t", "l", "gs", "xs", "ms", "ars", "i", "os", "ns", "ins", "c", "gins", "h", "pers", "ogs", "b", "S", "p", "ss", "ds", "parts", "sa", "sb", "ses", "sq", "ats", "ts", "qs"], "g": ["f", "gm", "groups", "ls", "ging", "m", "rg", "l", "t", "G", "gs", "ga", "gp", "bg", "r", "gr", "msg", "v", "gi", "greg", "gu", "c", "gt", "group", "b", "gc", "sg", "gg", "tg", "d", "j", "cfg", "ged", "ig", "mg", "gb", "n", "reg", "og", "pg"]}}
{"code": "N,M=map(int,input().split())\\nB=[0]*(N+1)\\nfor _ in range(M):\\n    u,v=map(int,input().split())\\n    B[u]+=1\\n    B[v]+=1\\n\\nfor a in range(1,N+1):\\n    print(B[a])\\n", "target": "180", "substitutes": {"N": ["Y", "Num", "K", "NE", "H", "C", "F", "R", "Ni", "W", "NB", "NI", "NR", "A", "U", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "Node", "L", "NM", "P", "Q", "T", "GN", "J", "n", "V", "I", "NUM", "NC", "NN", "NH"], "M": ["K", "m", "H", "MP", "C", "F", "MX", "R", "Multi", "PM", "G", "MT", "MR", "LM", "MI", "MN", "MC", "Length", "U", "REM", "Size", "MM", "S", "MH", "D", "L", "NM", "P", "Q", "MS", "MAN", "T", "DM", "J", "V", "I", "MU"], "B": ["Y", "BE", "Blue", "BB", "BS", "Bytes", "VB", "DB", "H", "C", "EB", "Two", "RB", "F", "OB", "G", "SB", "NB", "Other", "BA", "IB", "A", "BC", "WB", "BI", "Bar", "b", "GB", "Builder", "dB", "L", "TB", "LB", "GO", "BG", "P", "FB", "T", "J", "AB", "V", "BT", "USB", "Bern", "BY", "Bs", "Base"], "_": [" un", "m", " o", "ix", "A", " j", " __", " p", "val", " x", " A", "x"], "u": ["uid", "tu", "pu", "fu", "ud", "su", "ug", "au", "ue", "un", "ul", "lu", "U", "eu", "du", "ut", "ou", "uf", "bu", "uc", "ur", "uu", "uv", "cu", "uj", "us", "hu", "um", "ui", "iu", "ru"], "v": ["f", "ve", "sv", "m", "qv", "l", "y", "lv", "i", "k", "h", "b", "g", "tv", "iv", "nv", "va", "p", "vi", "j", "av", "vol", "vt", "var", "uv", "n", "V", "vr", "w", "vis", "x", "ev", "vc"], "a": [" af", "ba", "ae", "au", " na", "i", "xa", "A", " pa", "ca", "la", " j", "pa", "na", "c", "ea", "b", " c", "va", " ca", "ica", "alpha", "ao", "j", "p", "oa", "\u00e4", " z", "ai", "sa", "aa", "n", "ac", "o", " A", "ia", "x", "ana", "an", " an"]}}
{"code": "# input\\nsection = raw_input()\\n\\n# map the height of the section\\nheight = 0\\nheights = [0]\\nfor p in xrange( len(section) ):\\n    if   section[p] == '/':\\n        height += 1\\n    elif section[p] == '\\\\':\\n        height -= 1\\n    heights.append(height)\\n\\n# search the pools\\npools = []\\nwater = []\\np = 0\\nwhile p < len(section):\\n    if section[p] == '\\\\':\\n        try:\\n            pr = heights[p+1:].index( heights[p] )\\n            pools.append([p, p+1+pr])\\n            p = p+1+pr\\n        except:\\n            p+=1\\n    else:\\n        p+=1\\n\\n# count\\nfor pool in pools:\\n    tp = section[pool[0]:pool[1]]\\n    depth = 0\\n    s = 0\\n    for p in xrange( len(tp) ):\\n        if   tp[p] == '/':\\n            depth -= 1\\n        elif tp[p] == '\\\\':\\n            depth += 1\\n            s += 2*(depth-1)+1\\n        else:\\n            s += depth\\n    water.append(s)\\n\\n# print\\nprint sum(water)\\nif len(water) == 0:\\n    print len(water)\\nelse:\\n    print len(water), \" \".join(map(str, water))", "target": "394", "substitutes": {}}
{"code": "import math\\nN,X=map(int,input().split())\\nL=list(map(int,input().split()))\\nL.append(X)\\nL=sorted(L)\\nm=L[1]-L[0]\\nfor i in range(N):\\n  m=math.gcd(m,L[i+1]-L[i])\\nprint(m)", "target": "586", "substitutes": {"N": ["Y", "K", "C", "R", "G", "CNN", "Ni", "NB", "NI", "M", "NR", "A", "NL", "NA", "S", "NT", "D", "NS", "NM", "TN", "P", "No", "NPR", "T", "GN", "J", "n", "V", "I", "Ns", "NC", "NO", "NN", "NH"], "X": ["Y", "UX", "K", "H", "C", "XL", "MX", "R", "G", "Check", "XY", "M", "OX", "XXX", "S", "DX", "E", "ICE", "Cross", "Xi", "P", "Q", "ZX", "XM", "T", "XP", "J", "XX", "Z", "V", "I", "x", "IX", "TX", "XT"], "L": ["LV", "DL", "H", "XL", "Long", "LR", "LE", "l", "SL", "G", "OL", "LS", "ML", "LM", "M", "LT", "LG", "LU", "Left", "LA", "AL", "Lock", "EL", "NL", "PL", "S", "RL", "CL", "LB", "P", "LC", "List", "GV", "T", "LI", "Z", "V", "FL", "I", "dL", "LIST", "LP", "BL", "LD", "B", "SSL", "Log", "LL", "Lu", "TL"], "m": ["mu", "gm", "min", "wm", "mc", "tm", "l", "y", "t", "sm", "all", "ms", "M", "r", "v", "perm", "em", "c", "bm", "pm", "h", "mmm", "b", "mask", "g", "mx", "mod", "mp", "margin", "dm", "rm", "d", "p", "vm", "j", "mt", "om", "mat", "int", "mean", "n", "mr", "ma", "mac", "mm", "x", "um", "mi", "fm", "cm"], "i": ["f", "ini", "ri", "zi", "cli", "uri", "l", "ix", "ti", "info", "s", "ip", "ci", "ji", "gi", "v", "ij", "hi", "ori", "index", "phi", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "n", "uni", "ic", "li", "I", "u", "x", "ui", "mi", "im", "ski"]}}
{"code": "n=int(input())\\nc=list(input())\\n\\ncntr=c.count('R')\\n\\ncnt=0\\nfor i in range(0,cntr):\\n  if c[i]=='W':\\n    cnt+=1\\n\\nprint(cnt)", "target": "714", "substitutes": {"n": ["z", "f", "nn", "m", "l", "nt", "t", "N", "ns", "r", "k", "nm", "v", "na", "sn", "q", "b", "nb", "num", "d", "p", "j", "e", "nc", "o", "nl", "x", "count"], "c": ["f", "sc", "mc", "m", "C", "cr", "a", "l", "cs", "t", "rc", "r", "cb", "cin", "ch", "v", "co", "arc", "b", "lc", "gc", "ct", "cl", "ce", "d", "cont", "p", "cur", "ec", "xc", "cd", "dc", "fc", "pc", "ac", "nc", "cu", "u", "w", "ic", "list", "vc"], "cntr": ["cNTr", "crtl", "crtr", "cndl", "cndnr", " cgtr", " cntnr", "cctl", "cgtt", "cndR", "cndr", "crcl", "cctt", " cntt", "cNTnr", "cntn", " cntn", "cgtn", "crcR", "cntnr", " cndR", "cgtr", " cndl", "cgtl", " cgtt", " cntl", "crcr", "cNTl", "crtn", "cctr", "cctn", "cntt", " cntR", "cntR", "crtt", " cndr", "crcnr", "cNTR", "cntl", " cgtn", " cgtl", " cndnr"], "cnt": ["cst", "dcnt", "ecnt", "tnc", "Cpt", "cnc", "dcNT", " cpt", "cNT", "ecnc", "Cct", "tct", "nNT", "Cnt", "tNT", "cpt", "tnt", "npt", "ecNT", "dcnc", " cst", "ecct", " cNT", "nct", "nnt", "nnc", " cnc", "Cst", "cct", " cct", "nst", "dcct"], "i": ["ini", "zi", "m", "cli", "y", "ti", "s", "ip", "ci", "r", "\u0438", "ji", "gi", "v", "ij", "ori", "oi", "ki", "b", "ami", "yi", "sim", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ii", "xi", "si", "li", "I", "x", "ui", "mi", "im"]}}
{"code": "N = int(input())\\ndic = {}\\nfor i in range(N):\\n    s = str(input())\\n    if s in dic:\\n        dic[s] += 1\\n    else:\\n        dic[s] = 1\\n\\nS = sorted(dic.values())\\nt = S[-1]\\n\\nX = []\\nfor key in dic:\\n    if dic[key] == t:\\n        X.append(key)\\nx = sorted(X)\\n\\nfor i in range(len(X)):\\n    print(x[i])", "target": "750", "substitutes": {"N": ["Num", "K", "C", "F", "Sn", "Ni", "NB", "NI", "M", "NR", "A", "NP", "NA", "E", "O", "ND", "NT", "D", "SN", "NS", "L", "NM", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN"], "dic": [" dico", "dafc", "nic", "didcl", "cdpic", "sdcl", "fdicc", "ddict", "pdico", "doic", "didirc", "DIC", "pdiac", "ddIC", "Dlic", "Dict", "dictionary", "nIC", " dcl", "dpic", "dicc", "dIC", " dlic", "didfc", "daht", "dfc", "dlic", "dico", " dics", "dht", "daicc", "Dic", " dht", "doIC", "fdic", "fdiac", "didics", "didpic", "pdic", " diac", "fdico", "daic", "nictionary", "doics", "pdicc", "cdics", "diac", "ddlic", "dics", "ddic", " dpic", "didht", "doictionary", " dfc", "cdic", "cdirc", " dirc", " dict", "didict", "didic", "didicc", " dIC", "daIC", "Dicc", "dict", "nics", "dcl", "daict", "sdict", " dicc", " dictionary", "dirc", "sdic", "sdicc"], "i": ["f", "z", "ini", "ri", "zi", "m", "l", "y", "ix", "iy", "ti", "ci", "r", "k", "v", "gi", "ij", "ori", "index", "ki", "q", "b", "yi", "ie", "ind", "id", "di", "ik", "p", "bi", "vi", "j", "pi", "qi", "e", "ai", "it", "ii", "xi", "n", "si", "ic", "I", "li", "u", "mi", "im"], "s": ["ps", "sys", "sts", "sing", "str", "stats", "sv", "ls", "obj", "a", "sis", "se", "gs", "os", "ns", "sw", "k", "single", " self", "sp", "sym", "sl", "c", "hs", "es", "h", "g", "source", "sim", "d", "p", "ss", "j", "ds", "self", "e", "sa", "sb", " k", "short", "conf", "si", "keys", "sq", "iss", "sk", "set", "us", "south", "space", "ts", "sat", "ski", "sol"], "S": ["Y", "BS", "SI", "Si", "C", "H", "SS", "R", "G", "PS", "M", "ASC", "A", "Sing", "RS", "Save", "IS", "SR", "Source", "US", "NS", "SU", "Is", "L", "YS", "TS", "P", "ITS", "Q", "T", "SA", "Z", "VS", "V", "I", "Sort", "B", "CS", "GS", "Pres", "Set"], "t": ["type", "tu", "tm", "m", "ta", "l", "y", "tt", "to", "ti", "k", "dt", "tp", "ty", "at", "v", "c", "ot", "types", "ct", "temp", "typ", "d", "tz", "te", "p", "T", "txt", "template", "tc", "n", "set", "ts", "st"], "X": ["Y", "UX", "K", "H", "XL", "AC", "MX", "F", "ux", "R", "ix", "xs", "XY", "AX", "Tx", "OX", "tx", "Int", "XXX", "DX", "O", "EX", "D", "Array", "Xi", "L", "YS", "P", "TS", "ox", "Q", "ZX", "XM", "T", "XP", "xi", "XX", "Z", "V", "I", "IX", "TX", "Ax", "XT"], "key": ["type", "obj", "ey", "ice", "my", "y", "name", "case", "k", "ke", "value", "v", "sym", "index", "q", "pair", "ex", "val", "ie", "ind", "id", "char", "Key", "te", "tip", "p", "j", "col", "ry", "kw", "ox", "e", " k", "txt", "pri", "KEY", "keys", "set", "list", "item"], "x": ["z", "f", "xes", "xp", "one", "ux", "xy", "y", "ix", "xs", "xa", "ax", "xx", "k", "v", "xt", "dx", "mx", "ex", "fx", "p", "rx", "xc", "e", "ox", "xe", "xi", "n", "XX", "w", "lat", "list", "xf", "tx"]}}
{"code": "class UnionFind:\\n    def __init__(self, num):\\n        self.parent = [-1] * num\\n\\n    def find(self, node):\\n        if self.parent[node] < 0:\\n            return node\\n        self.parent[node] = self.find(self.parent[node])\\n        return self.parent[node]\\n\\n    def union(self, node1, node2):\\n        node1 = self.find(node1)\\n        node2 = self.find(node2)\\n        if node1 == node2:\\n            return\\n        if self.parent[node1] > self.parent[node2]:\\n            node1, node2 = node2, node1\\n        self.parent[node1] += self.parent[node2]\\n        self.parent[node2] = node1\\n        return\\n\\n    def same(self, node1, node2):\\n        return self.find(node1) == self.find(node2)\\n\\n    def size(self, x):\\n        return -self.parent[self.find(x)]\\n\\n    def roots(self):\\n        return [i for i, x in enumerate(self.parent) if x < 0]\\n\\n    def group_count(self):\\n        return len(self.roots())\\n\\n\\nn, m = map(int, input().split())\\n\\nuf = UnionFind(n)\\n\\nfor i in range(m):\\n    a, b = map(int, input().split())\\n    a -= 1\\n    b -= 1\\n    uf.union(a, b)\\n\\nprint(uf.group_count() - 1)\\n\\n", "target": "354", "substitutes": {"self": ["disk", "spec", "dev", "full", "close", "Self", "make", "attr", "expr", "sw", "compl", "series", "public", "claim", "before", "co", "errors", "h", "q", "complete", "wn", "ref", "deep", "default", "pre", "ctx", "network", "parts", "cmp", "graph", "rem", "rec", "also", "static", "new", "sys", "ws", "obj", "python", "params", "child", "pkg", "se", "this", "conn", "private", "result", "pp", "shape", "final", "history", "json", "ren", "replace", "test", "cl", "thus", "comp", "current", "then", "gh", "txt", "small", "table", "print", "help", "me", "prefix", "req", "data", "view", "proc", "md", "ls", "reader", "rs", "nt", "eth", "debug", "raw", "ssl", "r", "filter", "c", "user", "http", "context", "mem", "p", "func", "app", "form", "subject", "cache", "w", "where", "body", "own", "details", "partial", "diff", "views", "what", "wh", "my", "py", "s", "dd", "xml", "github", "nd", "th", "mp", "rss", "remote", "config", "path", "change", "local", "get", "parse", "so", "block", "short", "error", "instance", "sq", "rel", "handle", "tx"], "num": ["Num", "nom", "max", "sum", "mon", "draw", "t", "number", "nam", "dim", "nm", "missing", "na", "index", "nu", "mult", "p", "zero", "total", "local", "int", "np", "no", "NUM", "um", "multi"], "parent": ["family", "task", "max", "level", "manager", "peer", "public", "mask", "store", "position", "tree", "mother", "source", "default", "client", "Parent", "file", "cmp", "first", "list", "head", "static", "offset", "line", "top", "params", "child", "father", "comment", "ports", "policy", "buffer", "limit", "lt", "master", "test", "children", "owner", "last", "parents", "net", "current", "server", "person", "part", "pid", "scope", "unit", "map", "root", "user", "size", "p", "total", "cache", "type", "ps", "target", "per", "tmp", "ip", "point", "stack", "page", "config", "path", "pool", "host", "tip", "port", "local", "block", "instance", "stop", "home"], "node": ["good", "nn", "nw", "obj", "load", "edge", "line", "one", "child", "only", "label", "t", "se", "number", "name", "note", "row", "peer", "nt", "point", "key", "token", "msg", "value", "status", "root", "open", "empty", "index", "start", "post", "tree", "code", "source", "id", "thus", "remote", "internal", "Node", "next", "path", "leaf", "host", "nil", "null", "local", "object", "none", "seed", "np", "component", "ode", "time", "then", "cell", "instance", "set", "save", "success", "link", "primary", "data", "view", "new"], "node1": ["se1", "post2", "note11", "n1", "rowone", "row2", "ode2", " node5", "node001", "tree0", "station2", "ode5", "seone", "tree1", "ode3", " node01", "noteOne", "node0", "entity8", "node01", "role1", "ode001", "row1", "ode11", "ode01", "roleone", "nodeOne", "odeed", "note1", "Node0", "Node01", "odeone", "component01", " node001", " nodeone", "node8", "posted", "source8", "note2", " node0", "Node1", "odeName", "node3", "post1", " nodex", "n2", "component1", "node5", "Nodex", " node11", "n01", "Nodeone", "stationx", "se2", "postone", " node3", "node11", "nodeone", "ode0", "source11", "nodeName", "entity11", "componentName", "roleed", "source1", "component11", "odeOne", "note5", "ode1", "Node2", "station1", "role2", "nodex", "n0", "nodeed", "n3", "entity2", "treeone", "note8", "source2", " nodeName", "entity1", " nodeOne", "se001"], "node2": [" nodeb", "node7", "odetwo", "n1", "ode2", "node4", "odeTwo", "hostTwo", "sourcetwo", "page6", "resource2", "node12", "ode3", "resource1", "note02", "noteb", "nlet", "edge1", "event8", "event2", "ode7", "lineTwo", "cellTwo", "Nodelet", "note1", "line3", "edgeTwo", "event02", "page2", "node8", "resourcetwo", " nodelet", "n7", "resourcelet", "note2", " node02", "cell1", " node8", "Node1", "lineb", "ode4", "node3", "nodeTwo", "line12", "Node02", "n2", "ode8", "n02", "node6", " node3", "line1", " nodetwo", "linetwo", "msgTwo", "Node12", "edgeb", "source1", "nodelet", "ode6", " node7", "ode1", "hosttwo", "msg2", "nodetwo", "odeb", "nodeb", "Node2", "celltwo", " node6", "line4", " node4", "page1", "eventb", "host1", "line2", "host2", "Nodetwo", "cell2", "msg1", "ode02", "pageb", "sourcelet", "ode12", " nodeTwo", "source2", "noteTwo", "node02", "edge2", "msgb"], "x": ["z", "yx", "xes", "xp", "X", "hex", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "xx", "ax", "ci", "k", "v", "nex", "xt", "dx", "wx", "mx", "ex", "ct", "fx", "ctx", "p", "rx", "j", "xxx", "xc", "e", "ox", "xe", "xi", "lex", "ic", "px", "xf", "tx", "inx"], "i": ["z", "f", "ri", "zi", "l", "y", "ix", "ti", "nr", "s", "ip", "ci", "r", "k", "v", "ij", "c", "index", "ki", "q", "phi", "g", "h", "ind", "id", "di", "ik", "p", "bi", "j", "pi", "e", "ai", "int", "ii", "xi", "si", "ic", "li", "I", "u"], "n": ["f", "nn", "l", "y", "t", "nt", "nr", "N", "fn", "ns", "r", "mn", "nm", "en", "v", "na", "c", "ln", "h", "sn", "an", "g", "cn", "nu", "nb", "d", "p", "dn", "j", "ne", "net", "gn", "np", "nc", "o"], "m": ["f", "gm", "mc", "tm", "mas", "hm", "l", "t", "ms", "M", "r", "mn", "nm", "v", "perm", "mis", "c", "h", "g", "mod", "ml", "dm", "d", "p", "man", "km", "mt", "mos", "o", "ma", "mr", "mm", "mi", "cm"], "uf": ["f", "uh", "ucl", "ulf", "pu", "fg", "ud", "ux", "df", "aft", "uch", "pb", "aus", "ue", "ume", "xff", "uda", "ul", "lu", "upload", "fo", "uff", "eu", "ust", "oster", "du", "uci", "buf", "UF", "bf", "kw", "ull", "bo", "uc", "gb", "ucc", "uu", "ub", "u", "lf", "us", "ff", "um", "ui", "utf", "uph", "hum"], "a": ["ba", "apa", "ae", "ta", "sta", "au", "af", "xa", "ua", "A", "r", "ca", "la", "at", "pa", "c", "ea", "an", "eu", "area", "va", "p", "alpha", "da", "oa", "act", "e", "ai", "sa", "ata", "aq", "aa", "aj", "ac", "ma", "u", "ia", "ab", "eas", "aaa", "ar", "am", "aff"], "b": ["z", "f", "rb", "ba", "ib", "bl", "mb", "be", "l", "y", "t", "bc", "bg", "cb", "r", "fb", "v", "db", "c", "g", "wb", "d", "p", "bi", "br", "j", "e", "sb", "gb", "beta", "bis", "ob", "bs", "u", "B", "ab", "bb", "bar", "eb"]}}
{"code": "N, A, B = map(int, input().split())\\nS = input()\\n\\nac_count = 0\\nac_b_count = 0\\nfor s in S:\\n    if ac_count < A + B:\\n        if s == 'a':\\n            print('Yes')\\n            ac_count += 1\\n\\n        elif s == 'b' and ac_b_count < B:\\n            print('Yes')\\n            ac_count += 1\\n            ac_b_count += 1\\n\\n        else:\\n            print('No')\\n    else:\\n        print('No')", "target": "724", "substitutes": {"N": ["Y", "K", "H", "C", "NF", "X", "F", "R", "Ni", "G", "CNN", "W", "M", "NR", "NA", "E", "D", "NS", "L", "P", "T", "J", "n", "Z", "V", "I", "NC", "NN"], "A": ["AR", "K", "AA", "H", "C", "AC", "AN", "a", "R", "IA", "AV", "ACC", "M", "BA", "CA", "AL", "LA", "ACE", "NA", "As", "AU", "HA", "AT", "AF", "L", "An", "At", "P", "AM", "AS", "T", "AB", "AP", "I", "SA"], "B": ["Y", "BB", "BS", "VB", "DB", "H", "C", "EB", "F", "R", "G", "SB", "M", "BA", "IB", "BC", "BI", "b", "E", "O", "D", "L", "LB", "P", "FB", "T", "J", "AB", "Z", "V", "BT", "I", "BW", "CB", "BL", "Bs"], "S": ["Y", "BS", "SI", "H", "C", "X", "SS", "F", "R", "SL", "G", "SB", "M", "U", "E", "O", "DS", "D", "NS", "SU", "L", "SP", "P", "Q", "T", "SF", "Z", "V", "I", "SA"], "ac_count": ["alpha_cache", " ac_cur", "acuregroup", "acptsum", "alpha_count", "ac_sum", "ac_num", "acurecount", " ac_group", "ac10count", " ac_tag", "acLnum", "ac2number", "ac2Count", "ac10sum", " ac_number", "alphaptcache", "ac10nb", "ac_Count", "ac00count", " ac00tag", " ac_sum", "acptcache", "ac_number", " ac00count", "ac_nb", "alpha_nb", "acptnb", " ac00group", " ac_Count", "ac2sum", "ac00group", "alpha_sum", "acLcur", "ac2count", "acLcount", "ac10cache", "alphaptsum", "ac_cache", "ac_cur", "alphaptnb", "ac00tag", "acptcount", "acuretag", " ac_num", "ac_tag", "alphaptcount", "ac_group"], "ac_b_count": ["ac_a_Count", "ac_a_count", "ac_b_length", "ac_r_count", "ac_b_found", "ac_b_sum", "ac_a_sum", "ac_a_number", "ac_b2Count", "ac_b_number", "ac_b2count", "ac_a_found", "ac_b2found", "ac_a_length", "ac_r_length", "ac_b_Count", "ac_b2number", "ac_r_found", "ac_r_Count"], "s": ["ps", " sets", "sts", " signs", "ws", "ords", "ets", "has", "ares", "fs", "gs", "ists", "ins", "ons", "ns", "ases", "aps", "aces", " sins", "arts", "es", "hs", " iss", " parts", " samples", "eds", "ies", "ations", " ss", "ains", " inputs", "ss", "ds", "sets", "uns", "its", "ses", " signals", "abs", "bs", "ates", "ats", "als", " starts", "ts", " changes"]}}
{"code": "import sys, bisect, math, itertools, heapq, collections\\nfrom operator import itemgetter\\n# a.sort(key=itemgetter(i)) # i\u756a\u76ee\u8981\u7d20\u3067sort\\nfrom functools import lru_cache\\n# @lru_cache(maxsize=None)\\nsys.setrecursionlimit(10**8)\\ninput = sys.stdin.readline\\nINF = float('inf')\\nmod = 10**9 + 7\\neps = 10**-7\\n\\n\\ndef inp():\\n    '''\\n    \u4e00\u3064\u306e\u6574\u6570\\n    '''\\n    return int(input())\\n\\n\\ndef inpl():\\n    '''\\n    \u4e00\u884c\u306b\u8907\u6570\u306e\u6574\u6570\\n    '''\\n    return list(map(int, input().split()))\\n\\n\\nclass combination():\\n    def __init__(self, mod):\\n        '''\\n        mod\u3092\u6307\u5b9a\u3057\u3066\u521d\u671f\u5316\\n        '''\\n        self.mod = mod\\n        self.fac = [1, 1]  # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\\n        self.ifac = [1, 1]  # \u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\\n        self.inv = [0, 1]  # \u9006\u5143\u8a08\u7b97\u7528\\n\\n    def calc(self, n, k):\\n        '''\\n        nCk%mod\u3092\u8a08\u7b97\u3059\u308b\\n        '''\\n        if k < 0 or n < k:\\n            return 0\\n        self.make_tables(n)  # \u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\\n        k = min(k, n - k)\\n        return self.fac[n] * (self.ifac[k] * self.ifac[n - k] %\\n                              self.mod) % self.mod\\n\\n    def make_tables(self, n):\\n        '''\\n        \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u30fb\u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\\n        '''\\n        for i in range(len(self.fac), n + 1):\\n            self.fac.append((self.fac[-1] * i) % self.mod)\\n            self.inv.append(\\n                (-self.inv[self.mod % i] * (self.mod // i)) % self.mod)\\n            self.ifac.append((self.ifac[-1] * self.inv[-1]) % self.mod)\\n\\n\\nmod = 998244353\\ncomb = combination(mod)\\nn, m, k = inpl()\\nif m == 1:\\n    if k >= n - 1:\\n        print(1)\\n        exit()\\n    else:\\n        print(0)\\n        exit()\\nans = 0\\nfor i in range(min(n, k + 1)):\\n    ans += m * pow(m - 1, n - 1 - i, mod) * comb.calc(n - 1, i) % mod\\n    ans %= mod\\nprint(ans)\\n", "target": "375", "substitutes": {}}
{"code": "w = input().lower()\\ntext = ''\\nwhile True:\\n    t = input()\\n    if t == 'END_OF_TEXT':\\n        break\\n    text += t.lower() + ' '\\nprint(len([t for t in text.split(' ') if t == w]))", "target": "142", "substitutes": {"w": ["nw", "ws", "iw", "wh", "W", "ww", "ow", "wall", "sw", "v", "wa", "aw", "words", "wx", "wl", "wb", "we", "wy", "wr", "rew", "window", "rw", "hw", "word", "kw", "wt", "ew", "wo", "n", "wp", "wi", "width"], "text": ["str", "message", "comment", "a", "code", "ext", "nt", "name", "section", "uit", "note", "Text", "i", "translation", "output", "r", "buffer", "msg", "value", "url", "history", "xt", "write", "length", "long", "term", "ct", "width", "temp", "source", "test", "character", "TEXT", "password", "context", "title", "read", "path", "p", "te", "command", "image", "sect", "end", "word", "it", "txt", "n", "log", "left", "print", "x", "prefix", "data", "item"], "t": ["pt", "name", "dt", "tp", "v", "h", "g", "rit", "ct", "tree", "tg", "tf", "ts", "z", "f", "top", "m", "ta", "to", "ti", "ty", "xt", "lt", "ot", "test", "ht", "wt", "vt", "txt", "tc", "n", "o", "art", "qt", "ter", "l", "nt", "tw", "i", "at", "tar", "c", "term", "gt", "b", "the", "typ", "te", "p", "j", "et", "e", "tes", "st", "type", "out", "let", "ent", "kt", "tim", "y", "tt", "th", "title", "d", "ant", "it", "got", "T", "tr", "ont", "lat", "rt"]}}
{"code": "N = int(input())\\nl = [2,1]\\nif N  == 1 :\\n    print(l[1])\\n    exit()\\nfor i in range(2,N+1) :\\n    l.append(l[i-2] + l[i-1])\\nprint(l[-1])", "target": "50", "substitutes": {"N": ["Number", "K", "NE", "H", "C", "NF", "Sn", "Ni", "G", "NB", "NI", "M", "NV", "NR", "CN", "MN", "Len", "NL", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "T", "GN", "J", "n", "V", "I", "B", "We", "NC", "NO", "NN", "Wh", "NH"], "l": ["fl", "ol", "ld", "ls", "el", "le", "m", "range", "bl", "lv", "t", "lis", "kl", "r", "lb", "la", "v", "lock", "sl", "c", "lt", "lu", "ln", "lag", "q", "lc", "g", "tl", "lo", "ml", "dl", "p", "L", "lp", "pl", "hl", "lr", "league", "al", "n", "li", "ql", "nl", "list", "rl", "lists", "ll"], "i": ["ini", "zi", "cli", "uri", "ogi", "ix", "ti", "s", "ip", "ci", "\u0438", "ji", "gi", "ij", "hi", "ori", "oi", "index", "q", "phi", "ind", "id", "di", "num", "bi", "multi", "pi", "fi", "qi", "ai", "it", "ii", "xi", "si", "n", "ic", "uni", "li", "I", "x", "ui", "mi", "im"]}}
{"code": "a,b = map(int,input().split())\\nprint(['P','Imp'][all([a%3>0,b%3>0,(a+b)%3>0])]+'ossible')", "target": "635", "substitutes": {"a": ["f", "ba", "el", "m", "am", "ta", "ae", "l", "t", "sta", "af", "s", "au", "i", "A", "r", "la", "at", "v", "c", "ea", "ce", "d", "p", "da", "alpha", "ao", "j", "oa", "aka", "e", "sa", "ata", "aq", "aa", "al", "n", "ac", "ma", "ia", "ab", "aaa", "x", "an", "aff"], "b": ["rb", "ba", "ib", "erb", "m", "be", "l", "y", "t", "bc", "bp", "to", "s", "i", "cb", "fb", "r", "v", "db", "c", "g", "nb", "lib", "d", "p", "bi", "j", "sb", "it", "gb", "bis", "n", "ob", "o", "bs", "bot", "B", "ab", "bb", "eb"]}}
{"code": "N = int(input())\\nT = list(map(int, input().split()))\\nM = int(input())\\n\\nAns = []\\n\\nfor _ in range(M):\\n    P,X = map(int, input().split())\\n    Ans.append(sum(T) - T[P-1] + X)\\n\\nfor ans in Ans:\\n    print(ans)", "target": "730", "substitutes": {"N": ["Y", "K", "H", "C", "F", "R", "G", "Ni", "NR", "A", "S", "E", "O", "D", "NS", "L", "TN", "Q", "J", "n", "Z", "V", "I", "B", "NN"], "T": ["Y", "H", "C", "R", "G", "WT", "W", "t", "A", "TA", "S", "E", "NT", "D", "TG", "L", "TB", "TP", "TN", "TM", "TS", "Q", "J", "Z", "V", "I", "B", "Tu", "TX", "TT", "GT", "TF", "TV", "XT", "PT"], "M": ["K", "H", "C", "m", "MP", "MX", "F", "R", "G", "W", "MT", "MI", "MC", "MM", "S", "D", "L", "NM", "TM", "Q", "MA", "IM", "MS", "MAN", "ME", "DM", "J", "V", "I", "B"], "Ans": ["Anv", "ANts", "ANs", "Ants", " Anc", "Ann", "Anns", "ANos", "Annv", "ANns", " Ann", "Anos", "Anls", "anns", " Anls", "anls", " Anns", "As", "ANc", " Anv", "Annn", "Anc", "ANn", "ANv", "Annos", "Ac", " Anos", " Ants", "Als", "ANls", "ants"], "_": [" un", " j", "__", " __", " v", " c", " z", " the", " k", " y"], "P": ["Y", "K", "Pop", "PK", "H", "C", "F", "R", "Pod", "PA", "Po", "PO", "PU", "PC", "NP", "U", "Pi", "PE", "S", "p", "L", "TP", "PP", "Pro", "Q", "DP", "J", "V", "I", "B", "PI", "Power", "CP", "Port", "PT"], "X": ["Y", "UX", "K", "CE", "H", "C", "XL", "F", "MX", "R", "W", "XY", "A", "OX", "XXX", "S", "DX", "E", "Cross", "EX", "Xi", "L", "Q", "ZX", "XP", "Z", "XX", "V", "I", "Ex", "x", "WH", "IX", "TX", "Ax", "XT"], "ans": [" os", "ens", "cas", "anon", " ann", " vers", "aned", "names", "AN", "oss", " pars", "ean", "idents", " es", "ran", " aval", "amps", "iann", " names", "ms", " Ann", " An", "s", "aus", "ons", "ars", "ann", "anas", " sins", " sans", "asks", "rans", " ones", " ins", " means", "aud", "ANS", "An", " was", " sav", " isn", "anes", " spans", " AN", "ats", "eas", "ros", "an", "ks", "ants"]}}
{"code": "li = list(map(int,input().split()))\\nsu = sum(li)\\nma = max(li)\\n\\nif su%2 == ma%2:print(int((ma*2-(su-ma))/2))\\nelse:print(int(((ma+1)*2-(su-ma)+1)/2))", "target": "107", "substitutes": {"li": ["ini", "ls", "zi", "le", "cli", "ni", "l", "lv", "lis", "ti", "i", "ci", "len", "la", "lic", "ul", "sl", "lu", "lt", "ln", "ki", "lo", "di", "ml", "dl", "bi", "lie", "pi", "fi", "sa", "LI", "ii", "xi", "si", "Li", "list", "mi", "multi", "lists", "sol"], "su": ["mu", "sup", "tu", "uid", "sing", "cas", "ri", "sum", "sudo", "des", "pu", "fu", "se", "au", "aus", "gu", "sl", "prof", "lu", "nu", "sim", "num", "du", "SU", "ss", "Su", "mo", "sa", "bu", " Su", "so", "Se", "si", "uni", "cu", "u", "sur", "sche", "us", "me", "ui", " se", "ru", "stri"], "ma": ["mu", "tu", "sum", "mc", "fa", "m", "mas", "pu", "ta", "a", "ja", "se", "ha", "sta", "ga", "au", "ms", "la", "pa", "wa", "gu", "na", "ea", "pm", "fo", "nu", "mp", "val", "mont", "ml", "sama", "da", "EMA", "ada", "pi", "sam", "mt", "mo", "sa", "MA", "mat", "una", "mma", "Ma", "si", "mos", "ju", "mar", "sha", "ia", "sche", "mm", "me", "um", "hu", "mi", "mad", "ema", "data"]}}
{"code": "X,Y = map(int,input().split())\\nif  X == Y:\\n  print(-1)\\n  exit()\\nif X > Y and X % Y == 0:\\n  print(-1)\\n  exit()\\nfor x in range(X,10**18+1,X):\\n  if x % Y != 0:\\n    print(x)\\n    exit()", "target": "396", "substitutes": {"X": ["Time", "TY", "UX", "K", "CE", "IP", "H", "C", "AC", "Width", "MX", "F", "R", "G", "W", "XY", "N", "M", "A", "MAX", "AX", "Type", "SIZE", "OX", "ACE", "ID", "XXX", "ANY", "S", "DX", "E", "EX", "Cross", "D", "Xi", "L", "GE", "P", "ox", "Q", "ZX", "XM", "T", "XP", "XX", "Z", "V", "I", "HTTP", "IX", "TX", "IE", "PUT", "XT", "IN"], "Y": ["SY", "TY", "AY", "K", "CH", "IP", "H", "C", "F", "YP", "EY", "y", "G", "W", "NB", "XY", "OS", "N", "M", "OO", "IB", "YN", "OW", "A", "Ty", "ID", "IS", "S", "E", "O", "Py", "YA", "D", "YD", "L", "YS", "Year", "P", "UI", "My", "BY", "Q", "T", "YC", "J", "FY", "V", "Z", "I", "B", "IE", "NY", "YY", "MY"], "x": ["z", "f", "yx", "xp", "a", "xy", "l", "y", "t", "ix", "xs", "xa", "i", "xx", "ax", "xb", "k", "r", "v", "xt", "dx", "wx", "c", "index", "q", "mx", "zx", "ex", "ct", "fx", "p", "rx", "xxx", "xc", " xx", "e", "ox", "xe", "int", "xi", "n", "px", "xf", "xd", "tx"]}}
{"code": "a=list(map(int,input().split()))\\na=sorted(a)\\nd=str(a[2])+str(a[1])\\nprint(int(d)+a[0])", "target": "627", "substitutes": {"a": ["active", "ba", "el", "array", "fa", "m", "ae", "att", "l", "all", "sta", "ga", "au", "ed", "xa", "i", "A", "ca", "answer", "input", "la", "at", "na", "c", "es", "ea", "an", "era", "b", "aux", "area", "p", "da", "alpha", "j", "app", "oa", "parts", "sa", "ai", "aa", "up", "abs", "ac", "n", "ma", "ia", "ab", "eas", "aaa", "x", "am", "aff", "auto"], "d": ["f", "des", "m", "df", "l", "t", "dd", "i", "r", "dt", "db", "v", "sd", "c", "b", "g", "D", "di", "pd", "du", "dl", "de", "da", "dn", "p", "j", "ds", "td", "e", "dom", "dy", "dh", "n", "o", "dec", "dra", "dr", "dat", "fd"]}}
{"code": "def LI():\\n    return list(map(int, input().split()))\\n\\n\\nN, M = LI()\\nx = M//N\\nfor i in range(x, 0, -1):\\n    if M % i != 0:\\n        continue\\n    ans = i\\n    break\\nprint(ans)", "target": "163", "substitutes": {"N": ["Y", "Num", "K", "C", "X", "F", "R", "Ni", "NI", "NR", "MN", "U", "NA", "S", "E", "O", "ND", "NT", "D", "NS", "L", "NM", "P", "Q", "T", "J", "n", "V", "I", "B", "Ns", "NC", "NN"], "M": ["MO", "K", "m", "C", "MP", "X", "MX", "F", "R", "G", "Ni", "MT", "LM", "CM", "MI", "MN", "MC", "MM", "S", "E", "D", "L", "NM", "VM", "TM", "P", "MON", "MA", "Q", "MS", "MAN", "T", "DM", "V", "I", "B", "Mi", "MD", "MU"], "x": ["z", "f", "xes", "xp", "m", "X", "xy", "l", "y", "t", "ix", "xs", "xa", "xx", "ax", "v", "xt", "dx", "wx", "index", "mx", "ex", "p", "rx", "xc", "ox", "int", "xi", "n", "w", "xf", "tx"], "i": ["io", "ini", "ri", "zi", "m", "a", "l", "y", "t", "ix", "ti", "s", "ci", "r", "k", "gi", "v", "ij", "c", "ki", "q", "b", "yi", "id", "di", "ik", "p", "bi", "j", "pi", "e", "ai", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "mi", "iu", "im"], "ans": ["rors", "ls", "names", "mas", "AN", "ran", "pan", "amps", "xs", "iann", "s", "ms", "anas", "ins", "aus", "ns", "mn", "ants", "ann", "xa", "os", "aps", "aos", "ys", "rans", "eds", "ies", "ANS", "ai", "results", "anes", "n", "ats", "ros", "vals", "anks", "ana", "an", "ks", "terms", "lan"]}}
{"code": "input_str = input() # ARC or ABC\\nif input_str == 'ARC':\\n  print('ABC')\\nelse:\\n  print('ARC')", "target": "510", "substitutes": {"input_str": ["output2string", "output_list", "input2list", "input_string", "input_arr", "input_list", "output2str", "input2arr", "input2string", "output_string", "output_arr", "input2str", "output2list", "output2arr", "output_str"]}}
{"code": "import math\\nfrom functools import reduce\\n\\nn, x = map(int, input().split())\\na = list(map(int, input().split()))\\na.append(x)\\na.sort()\\n\\nl = []\\nfor i in range(n):\\n    l.append(a[i+1] - a[i])\\n\\ndef gcd_list(numbers):\\n    return reduce(math.gcd, numbers)\\n\\nprint(gcd_list(l))\\n\\n", "target": "586", "substitutes": {"n": ["z", "f", "nn", "nia", "names", "m", "t", "nt", " m", "N", "ns", "mn", "r", "nm", "k", "v", " fn", "na", "c", "ln", " p", "q", "g", "nu", "nb", "d", "p", " ng", "ne", "net", " r", "gn", "np", "nc", " gn", "nl", " N", "ll"], "x": ["z", "yx", "xp", "X", "exclusive", "ux", "xy", "y", "t", "xs", "xa", "ax", "xx", "xxxxxxxx", "v", "xt", "dx", "wx", "c", "mx", "ex", "fx", "rx", "xc", "e", "ox", "xe", "int", "xi", "px", "xf", "xd", "tx"], "a": ["ba", "el", "apa", "am", "ae", "att", "ta", "another", "all", "t", "sta", "ga", "au", "s", "xa", "A", "ca", "en", "la", "at", "history", "na", "c", "ea", "b", "aux", "area", "va", "alpha", "da", "oa", "parts", "sa", "aa", "al", "abs", "ac", "ma", "ia", "ab", "eas", "aaa", "list", "ar", "an", "auto"], "l": ["z", "fl", "els", "ol", "ld", "ls", "el", "le", "isl", "bl", "all", "t", "lv", "lis", "kl", "r", "la", "v", "sl", "lt", "ln", "like", "lo", "cl", "ml", "d", "dl", "p", "L", "lp", "pl", "hl", "o", "log", "li", "shell", "nl", "list", "rl", "ll"], "i": ["z", "f", "ini", "zi", "cli", "uri", "ogi", "ix", "ti", "info", "ip", "key", "ci", "ji", "gi", "ij", "hi", "index", "q", "phi", "ami", "ind", "di", "num", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "ic", "batch", "li", "I", "iri", "ui", "mi", "im"], "numbers": ["gumeric", "bynumbers", "numeric", " nums", "lumeric", "nometers", "nums", "gumer", "dumeric", "bynuctions", "lumbers", "innometers", "bynometers", "dumer", "numbered", "innums", "nuctions", "dumbered", "dumbers", " nometers", "numer", "innuctions", "gumbered", "gumbers", "lumer", "bynums", " nuctions", "innumbers", "lumbered"]}}
{"code": "print(int(input())+1>>1)", "target": "748", "substitutes": {}}
{"code": "s = list(input())\\nif len(s) < 4:\\n    print('No')\\n    exit()\\n\\nif s[0] == 'Y' and s[1] == 'A' and s[2] == 'K' and s[3] == 'I':\\n    print('Yes')\\nelse:\\n    print('No')", "target": "27", "substitutes": {"s": ["z", "f", "ps", "sts", "str", "sv", "lines", "ls", "ords", "a", "l", "y", "t", "rs", "gs", "xs", "ins", "ms", "i", "states", "ns", "sw", "v", "sp", "ents", "c", "gins", "h", "q", "b", "ys", "g", "ers", "S", "eds", "changes", "ids", "p", "ains", "ss", "less", "ds", "parts", "sb", "ims", "ses", "n", "abs", "items", "bs", "sq", "w", "tes", "ats", "als", "ts", "qs", "mods", "sol", "js"]}}
{"code": "X, Y, Z = map(int, input().split())\\n\\nsum = 0\\n\\nfor i in range(1,X):\\n    if sum > X:\\n        ans = i-2\\n        break\\n    if sum == X:\\n        ans = i-1\\n        break\\n    else:\\n        sum = Y*i+Z*(i+1)\\n\\nprint(ans)\\n", "target": "101", "substitutes": {"X": ["TY", "max", "UX", "K", "CE", "ONE", "IME", "H", "C", "AN", "AC", "R", "G", "W", "XY", "N", "M", "A", "MAX", "SIZE", "OX", "U", "TH", "XXX", "S", "DX", "E", "D", "EX", "US", "Xi", "L", "VI", "P", "Q", "T", "XP", "J", "XX", "V", "I", "NUM", "IX", "x", "TX", "Ax", "XT", "IN"], "Y": ["TY", "AY", "CH", "C", "R", "EY", "y", "G", "W", "XY", "N", "A", "S", "E", "Py", "YA", "YS", "Year", "My", "Q", "NY", "T", "GREEN", "J", "YC", "V", "I", "B", "BY", "YY", "MY"], "Z": ["z", "K", "AZ", "H", "C", "FF", "SS", "F", "G", "W", "Zip", "N", "M", "TH", "S", "DX", "ZZ", "ZI", "D", "L", "TW", "CC", "TD", "P", "Q", "NZ", "Zone", "ZX", "T", "J", "Zero", "V", "XX", "I", "B", "WH"], "sum": ["sup", "sub", "add", "max", "med", "out", "SI", "sc", "gate", "am", "this", "Sum", "su", "ms", "ann", "un", "status", " sums", "cal", "snap", "scan", "mess", "match", "ums", "mut", "na", "scale", "mass", "mod", "sim", "umm", "tan", "num", "mem", "go", "SU", "size", "tail", "cos", "can", "sam", "total", "sa", "vol", "span", "mean", "conf", "si", "cum", "summary", "set", "us", "um", " SUM", "body", "an", "count"], "i": ["z", "ini", "ei", "zi", "m", "cli", "l", "y", "ix", "ti", "info", "ip", "ci", "\u0438", "gi", "v", "ij", "c", "ori", "index", "oi", "q", "ie", "ind", "id", "asi", "di", "num", "sim", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "li", "I", "ia", "x", "ui", "mi", "iu", "im"], "ans": ["sys", "wan", "cas", "ls", "mas", "vers", "oss", "cus", "ean", "pan", "cons", "amps", "sta", "ins", "ms", "os", "aus", "mits", "ns", "ars", "ann", "acs", "aos", "ums", "eds", "posts", " means", "sim", "ANS", "can", "man", "nas", "uns", "offs", "nz", "nan", "ams", "cum", "asms", "ats", "us", "um", "anks", "an", "ks", "ants", "lan", "irms"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\na1, a2 = [],[]\\nfor index, i in enumerate(a, start=1):\\n  if index % 2 == 0:\\n    a2.append(i)\\n  else:\\n    a1.append(i)\\n\\nans = []\\nif n % 2 == 0:\\n  ans = a2[::-1] + a1\\nelse:\\n  ans = a1[::-1] + a2\\n\\nprint(\" \".join(str(i) for i in ans))", "target": "601", "substitutes": {"n": ["f", "dimension", "nn", "m", "ni", "l", "all", "nt", "t", "number", "name", "N", "len", "ns", "mn", "nm", "k", "v", "na", "c", "ln", "sn", "h", "cn", "nu", "nb", "num", "d", "size", "p", "j", "network", "ne", "np", "span", "nan", "nc", "nl", "count"], "a": ["array", "m", "ap", "am", "ta", "ae", "l", "all", "t", "au", "ga", "s", "xa", "A", "la", "na", "c", "ea", "b", "area", "d", "p", "da", "ao", "oa", "sa", "ai", "ata", "aa", "ac", "o", "ma", "w", "ab", "aaa", "an", "data"], "a1": ["ga2", "ga3", "A2", " a4", " a0", "A0", "aa01", "ae4", "ae1", "ae2", " a01", "a4", "aa1", "A1", "ga01", "aa2", " a3", "ga4", "ma2", "ma01", "a3", "a0", "aa0", "a01", "ma1", "ga1", "A01", "A3"], "a2": ["ga2", "ga02", "ga3", "xa0", "A2", " a4", " a0", "A0", "Atwo", "ae4", "atwo", "ae1", "ae2", "xa1", "act02", "a4", "A1", " a02", "a02", "xatwo", "ga4", " a3", "gatwo", " atwo", "a3", "a0", "act1", "A4", "xa2", "act2", "acttwo", "ga1", "A3"], "index": ["f", "dimension", "cation", "nn", "capacity", "find", " sidx", "order", "y", "second", "ix", "number", "pos", "degree", "Index", "key", "timeout", "check", "length", "start", "see", "position", "ate", "ind", "id", "num", "size", "axis", "network", "zero", "int", "si", "loc", "instance", "iter", "connection", "stop", "x", "unit", "count", "connect"], "i": ["ini", "ei", "ri", "zi", "m", "uri", "t", "ix", "ti", "info", "ip", "ci", "ji", "ani", "gi", "v", "ij", "hi", "oi", "ori", "ki", "phi", "q", "yi", "ind", "id", "di", "p", "bi", "vi", "j", "pi", "fi", "ai", "it", "int", "ii", "xi", "si", "ic", "li", "I", "iter", "x", "iti", "mi", "iu", "im"], "ans": ["ens", "ps", "users", "ls", "names", "mas", "aned", "vers", "cs", "rs", "cons", "amps", "gs", "xs", "authors", "s", "ins", "anas", "ms", "aus", "ns", "ons", "outs", "ann", "ars", " Ans", "aps", "aos", "arts", "ents", "ians", "angs", "ums", "rans", "ands", "eds", " means", "vs", "ANS", "can", "uns", "helps", "offs", "anes", "actions", "ams", "ras", "ates", "ats", "ros", "aints", "anks", "an", "ks", "ants", "olds"]}}
{"code": "N,M = map(int,input().split())\\n\\npath = [[] for i in range(N)]\\n\\nfor _ in range(M):\\n\ta,b = map(int,input().split())\\n\tpath[a-1].append(b-1)\\n\tpath[b-1].append(a-1)\\nvis = [0 for i in range(N)]\\ncnt = 0\\n\\ndef dfs(now,depth):\\n\tglobal cnt\\n\tif depth == N: cnt+=1\\n\tfor new in path[now]:\\n\t\tif vis[new] == 0:\\n\t\t\tvis[new] = 1\\n\t\t\tdfs(new,depth+1)\\n\t\t\tvis[new] = 0\\n\\nvis[0] = 1\\ndfs(0,1)\\nprint(cnt)\\n", "target": "143", "substitutes": {"N": ["Y", "H", "C", "AN", "F", "R", "NOW", "G", "CNN", "Ni", "NB", "NI", "NEW", "NR", "A", "MN", "SIZE", "NP", "NA", "S", "E", "ND", "New", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "V", "I", "B", "Ns", "NC", "NUM", "NN", "NH"], "M": ["Y", "K", "m", "C", "MP", "MX", "F", "R", "Multi", "PM", "MT", "MR", "LM", "CM", "MI", "MN", "MC", "MM", "S", "MH", "D", "NM", "L", "JM", "TM", "P", "MA", "IM", "MS", "MAN", "DM", "T", "V", "I", "B"], "path": ["map", "str", "ws", "out", "pr", "pt", "m", "PATH", "chain", "l", "pkg", "name", "this", "wd", "pos", "steps", "cycle", "rect", "step", "shape", "raw", "phys", "v", "history", "ath", "root", "route", "phi", "use", "th", "Path", "ref", "mp", "test", "trace", "p", "next", "call", "pat", "dir", "walk", "pi", "pl", "cp", "rain", "self", "progress", "end", "axis", "time", "txt", "n", "log", "w", "set", "list", "data", "transform"], "i": ["f", "ini", "zi", "m", "ir", "ti", "ip", "ci", "ji", "v", "gi", "ij", "c", "di", "ik", "p", "pi", "e", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "li", "I", "u", "iter", "x", "iu", "im"], "_": [" un", " m", "A", " j", " mult", " __", " each", "val", " some", " l", " the", " x", "ac", "n", "I", "B", "x", " num", " y"], "a": ["f", "ba", "el", "m", "ae", "be", "sta", "ga", "au", "A", "ca", "la", "at", "c", "ea", "an", "ak", "va", "p", "j", "act", "\u00e4", "oa", "e", "sa", "aa", "aj", "ac", "art", "ma", "ace", "u", "ia", "ab", "eas", "aaa", "ar", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "bp", "s", "fb", "r", "v", "db", "c", "h", "g", "nb", "d", "p", "bi", "br", "j", "e", "sb", "gb", "bis", "n", "bs", "u", "B", "ab", "bb", "body", "base", "eb"], "vis": ["map", "vec", "wait", "visible", "nav", "stat", "skip", "mit", "ir", "inv", "serv", "pos", "dict", "switch", "ann", "lim", "miss", "v", "status", "pose", "exc", "circ", "state", "scale", "g", "docs", "see", "ref", "rev", "orig", "mem", "vs", "virt", "gain", "man", "pl", "Vis", "study", "comm", "vol", "mat", "dc", "graph", "mos", "cache", "grad", "loc", "drive", "iter", "VIS", "list", "im", "gen", "view", "vert"], "cnt": ["ncpt", "Crand", " cnd", "Cnd", "Cpt", "gcnt", "cnc", "ncrand", "CNT", "rcct", "curNT", " cpt", "ncrowd", " crowd", "cNT", "Cct", "ncnc", "Cnt", "rcnt", "gcrowd", "curpt", "crowd", "rcNT", " crand", "crand", "ncnt", "gcct", " cNT", "curnt", " cnc", "gcnc", "cnd", "cct", " cct", "rcnd", "curct", "ncct", "cpt"], "now": ["wait", "gm", "since", "recent", "when", "off", "down", "date", "here", "Now", "node", "NOW", "setup", "cycle", "ow", "given", "raw", "sw", "aw", "force", "next", "cur", "track", "window", "seed", "current", "then", "time", "ew", "aj", "loc", "w", "currently", "on", "update", "handle", "count", "after", "always"], "depth": ["type", "details", "level", "parent", "nt", "debug", "dim", "final", "stack", "ptr", "dist", "Depth", "div", "status", "before", "history", "root", "length", "index", "DEP", "scale", "deep", "tree", "ind", "context", "d", "size", "process", "p", "next", "tip", "height", "dep", "dir", "progress", "total", "int", "current", "component", "time", "priority", "weight", "rank", "focus", "n", "float", "reverse", "prime", "scope", "count"], "new": ["z", "create", "add", "out", "normal", "recent", "one", "child", "node", "old", "name", "number", "NEW", "nt", "to", "t", "row", "raw", "r", "un", "news", "v", "root", "index", "start", "g", "deep", "New", "d", "size", "next", "p", "j", "null", "self", "current", "ew", "time", "n", "w", "set", "on", "x", "gen"]}}
{"code": "import sys\\nimport math\\nimport itertools\\nimport collections\\nimport heapq\\nimport re\\nimport numpy as np\\n\\nrr = lambda: sys.stdin.readline().rstrip()\\nrs = lambda: sys.stdin.buffer.readline().split()\\nri = lambda: int(sys.stdin.readline())\\nrm = lambda: map(int, sys.stdin.buffer.readline().split())\\nrl = lambda: list(map(int, sys.stdin.readline().split()))\\ninf = float('inf')\\nmod = 10**9 + 7\\n\\nprint('red' if ri()<3200 else rr())\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "target": "90", "substitutes": {"rr": ["RR", "rb", "arr", "adr", "raf", "rg", "rin", "nr", "fr", "rc", "err", "r", "res", "reply", "repl", "irm", "wr", "rn", "nder", "Mr", "rint", "rx", "rw", "rpm", "addr", "lr", "rer", "rid", "rd", "vr", "mr", "rt", "hr", "dr", "rar"], "rs": ["ps", "rb", "ws", "ls", "rys", "sr", "fs", "cs", "xs", "ris", "ins", "ms", "rc", "ns", "res", "vs", "rx", "rows", "ds", "ro", "its", "rd", "mr", "irs", "ras", "dr", "ts", "rt"], "ri": ["rand", "io", "rub", "uri", "ir", "rin", "ti", "ris", "i", "RI", "rc", "ci", "r", "res", "hi", "rit", "rio", "re", "RL", "rint", "rx", "pi", "ro", "ry", "rid", "ra", "iri", "rd", "rt", "si", "tri", "li", "rel", "dr", "mi", "ru", "stri"], "rm": ["rb", "mor", "m", "raf", "mb", "rep", "sm", "ms", "fn", "nm", "mk", "pm", "mx", "irm", "rn", "dm", "mt", "rpm", "ror", "mr", "RM", "rem", "reg", "rar", "mi", "fm", "rt", "md"], "rl": ["rb", "ld", "ls", "jl", "sr", "l", "lin", "rc", "lb", "la", "sl", "ln", "tl", "rn", "dl", "rx", "lp", "rw", "ro", "hl", "lr", "rd", "mr", "nl", "rt", "ll"], "inf": ["f", "imag", "floor", "info", "ins", "pp", "compl", "lim", "Inf", "rf", "ind", "cont", "eq", "exp", "frac", "pi", "imal", "bin", "ipl", "inc", "int", "conf", "nan", "log", "star", "iter"], "mod": ["sub", "add", "min", "max", "base", "ran", "inv", "floor", "debug", "circ", "bit", " Mod", "ref", "ind", "id", "mult", "round", "dir", "Mod", "mode", "od", "MOD", "log", "dec", "set", "reg", "prime", "fun"]}}
{"code": "num = map(int, raw_input().split())\\n\\nflg=1\\nwhile flg==1:\\n    flg=0\\n    for i in range(2):\\n        if num[i]>num[i+1]:\\n            box = num[i]\\n            num[i]=num[i+1]\\n            num[i+1]=box\\n            flg=1\\n\\nprint \"%d %d %d\" % (num[0],num[1],num[2])", "target": "117", "substitutes": {"num": ["img", "tu", "add", "sum", "ord", "dev", "note", "nam", "ver", "div", "val", "cur", "eng", "coord", "no", "set", "list", "norm", "gen", "count", "new", "conv", "mon", "desc", "dig", "draw", "number", "prim", "info", "result", "final", "nm", "news", "na", "index", "mod", "nu", "nb", "test", "orig", "mun", "sam", "n", "update", "unit", "map", "nom", "nt", "con", "check", "mem", "size", "alph", "zero", "total", "form", "uf", "sel", "cache", "loc", "NUM", "multi", "Num", "out", "off", "hex", "tim", "hold", "old", "dim", "mn", "cal", "th", "get", "mat", "int", "np", "um", "dat"], "flg": ["frg", "flgu", "fcge", "fcgr", "frgm", "FLgs", "dlgu", "fll", "flbg", "Flgs", "folgs", "FLg", " flgm", "flge", "plg", "dlg", "FLgr", " flbg", "Flg", " flgs", " flgr", "frl", "folg", "FLgu", "frgs", "Flgr", "flgs", " flgu", "Flge", "folgr", "plgs", "FLbg", "plgm", " fll", "fcgs", "flgm", "pll", " flge", "dlgr", "folge", "fcg", "flgr", "FLge", "dlbg"], "i": ["f", "io", "ini", "zi", "m", "uri", "ir", "l", "y", "this", "chain", "ix", "ti", "info", "ip", "ci", "key", "ji", "v", "gi", "ij", "ori", "index", "oi", "ki", "q", "b", "ie", "ind", "id", "sim", "di", "bi", "multi", "j", "pi", "exp", "ai", "it", "ii", "xi", "si", "n", "ic", "I", "li", "iter", "set", "me", "x", "ui", "mi", "list", "im", "item", "init"], "box": ["base", "ico", "pack", "cat", "label", "grid", "border", "zip", "draw", "hold", "old", "ix", "row", "ax", "ver", "check", "root", "co", "tar", "aw", "thing", "Box", "boxes", "area", "col", "act", "book", "form", "BOX", "bin", "deck", "ox", "gro", "bo", "boxing", "bot", "set", "bar", "unit", "new", "holder"]}}
{"code": "H,W=map(int,input().split())\\nans='Impossible'\\nj=0\\n\\nfor i in range(H):\\n  A=[x for x in input()]\\n  count=A.count('#')\\n  if i==0 and A[0]=='.':\\n    break\\n  try:\\n    if i>0 and '#' in A[:j]:\\n      break\\n    else:\\n      if i==0:\\n        if count!=A[:count].count('#'):\\n        \tbreak\\n      elif count!=A[j:j+count].count('#'):\\n        break\\n  except:\\n    j+=(count-1)\\n    pass\\n  j+=(count-1)\\nelse:\\n  ans='Possible'\\nprint(ans)", "target": "243", "substitutes": {"H": ["Y", "K", "He", "C", "X", "F", "R", "HT", "G", "N", "M", "HI", "HD", "HH", "h", "TH", "S", "E", "D", "HA", "Hi", "HE", "L", "P", "Q", "Eh", "T", "J", "Z", "V", "I", "OH", "HS", "NH"], "W": ["C", "F", "WS", "R", "G", "WT", "WB", "M", "N", "WM", "wl", "Ws", "SW", "D", "WP", "WC", "WA", "L", "VW", "P", "CW", "T", "V", "w", "BW", "We", "MW", "Wh"], "ans": ["ens", "rors", "aned", "oss", "ran", "rs", "amps", "iann", "ins", "anas", "ars", "aus", "ons", "ns", "ms", "ann", "os", " Ans", "aos", "arts", "ians", "angs", "arms", "rans", "ys", "said", "eds", "posts", "cn", " means", "san", "vs", "ANS", "uns", "anes", "nan", "ams", "ras", "asms", "ats", "eas", "ros", "aints", "anks", "an", "ks", "ants", "jas"], "j": ["z", "f", "out", "obj", "jl", "pr", "m", "a", "ja", "l", "y", "t", "pos", "jp", "k", "ji", "r", "ch", "v", "ij", "c", "index", "job", "h", "b", "q", "g", "je", "ind", "d", "next", "p", "oj", "kj", "e", "it", "jj", "jump", "aj", "J", "n", "o", "uj", "dj", "w", "u", "x", "js", "jc"], "i": ["ei", "ini", "zi", "a", "ni", "l", "y", "t", "ix", "iy", "ti", "xa", "ip", "ci", "\u0438", "ji", "ati", "v", "ij", "c", "ori", "phi", "yi", "id", "di", "ik", "Xi", " Xi", "iat", "p", "pi", " I", "ai", "it", "ii", "xi", "si", "n", "o", "I", "li", "ic", "x", "count", "inx"]}}
{"code": "n,a,b = map(int,input().split())\\nmodnum = 10**9+7\\nans = pow(2,n,modnum)-1\\n\\ndef modinv(a, mod=10**9+7):\\n    return pow(a, mod-2, mod)\\ndef combination(n, r, mod=10**9+7):\\n    r = min(r, n-r)\\n    res = 1\\n    for i in range(r):\\n        res = res * (n - i) * modinv(i+1, mod) % mod\\n    return res\\nans -= combination(n, a, modnum)\\nans -= combination(n, b, modnum)\\nans %= modnum\\nprint(ans)", "target": "580", "substitutes": {"n": ["nn", "nw", "m", "l", "nt", "t", "nr", "s", "N", "fn", "ns", "mn", "en", "v", "na", "c", "ren", "sn", "an", "q", "g", "h", "cn", "nu", "nb", "rn", "re", "num", "d", "p", "dn", "j", "ne", "e", "net", "nor", "int", "np", "nc", "o", " N", "w", "rem", "x", "on"], "a": ["f", "ba", "le", "m", "ae", "be", "l", "y", "t", "au", "ed", "A", "ca", "at", "la", "c", "ea", "an", "ak", "admin", "area", "p", "alpha", "ao", "act", "sa", "aa", "al", "ac", "ma", "ia", "ab", "aaa", "ar", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "bl", "be", "l", "y", "t", "s", "fb", "v", "c", "g", "nb", "d", "p", "bi", "j", "e", "o", "bs", "u", "B", "ab", "bb", "eb"], "modnum": [" modnumber", " moden", "modmon", "Moden", "addsum", "addnum", "MODnum", "lexnum", "tagenc", " modenc", "modulenm", "addmon", " modmon", "modnm", "Modnumber", "MODn", " modn", "Modum", " modnm", "Modn", " modum", "Modmon", "Modnum", "modum", "modn", "tagnm", "modsum", "tagnum", "moduleenc", " modsum", "tempen", "modulenum", "tempnum", "tempmon", "tempum", "moden", "modenc", "addum", "lexsum", "modnumber", "lexum", "lexmon", "MODum", "MODnumber"], "ans": ["ens", "rors", "ls", "mas", "vers", "AN", "oss", "ran", "rs", "cons", "amps", "s", "ins", "os", "ars", "ms", "ons", "ns", "aus", "ann", " Ans", "aps", "outs", "aos", " sans", "arts", "ents", "es", "ians", "rans", "ands", " means", "terms", "ANS", "man", "rows", "relations", "uns", "results", "powers", "actions", "ams", "ras", "ates", "ats", "orts", "eas", "ros", "x", "ts", "aints", "ions", "an", "ants"], "mod": ["sub", "add", "sign", "spec", "name", "module", "ver", "div", "un", "tag", "post", "g", "sim", "pre", "num", "com", "deg", "mode", "rem", "set", "mm", "fun", "f", "ld", "aug", "cod", "m", "dig", "t", "ms", "modified", "perm", "scale", "rad", "ind", "comp", "man", "mods", "md", "pro", "med", "debug", "c", " Mod", "re", "mem", "size", "p", "j", "form", "Mod", "MOD", "time", "ac", "grad", "rand", "min", "cond", "id", "d", "crit", "od", "tr", "lex", "reg", "prime", "init"], "r": ["f", "rb", "m", "rr", "range", "sr", "cr", "rg", "R", "l", "rs", "t", "nr", "s", "rc", "v", "c", "h", "q", "g", "rn", "re", "rm", "d", "p", "br", "radius", "j", "ro", "e", "it", "right", "rid", "rd", "mr", "o", "rem", "w", "u", "rel", "reg", "dr", "x", "rar", "ar", "rt", "ru"], "res": ["ress", "ps", "rand", "rest", "max", "out", "obj", "sum", "range", "cr", "reset", "rez", "red", "ret", "rs", "cons", "full", "resources", "result", "ms", "os", "ins", "rc", "expr", "gr", "resp", " Res", "resh", "ther", "yes", "sim", "re", "p", "results", "RES", "rem", "pres", "reg", "rel", "resolution", "Res", "x", "req", "rat", "resource", "js"], "i": ["z", "ini", "zi", "m", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "k", "ji", "v", "gi", "ij", "ori", "index", "hi", "q", "ind", "id", "di", "bi", "j", "pi", "qi", "e", "ai", "it", "ii", "xi", "si", "ic", "iri", "li", "I", "u", "x", "ui", "mi", "iu"]}}
{"code": "import sys\\n\\nread = sys.stdin.read\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\nsys.setrecursionlimit(10 ** 9)\\nINF = 1 << 60\\n\\n\\nN = int(readline())\\nB = list(map(int, readline().split()))\\n\\n\\ndef main():\\n    ans = []\\n    while B:\\n        for i in range(len(B), 0, -1):\\n            if i == B[i - 1]:\\n                ans.append(B.pop(i - 1))\\n                break\\n        else:\\n            print(-1)\\n            return\\n    print(*reversed(ans), sep='\\n')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "593", "substitutes": {"read": ["rand", "READ", " READ", "str", " guess", "stream", "reader", "load", "std", "find", "hold", "readable", "pop", "reads", "r", "input", "open", "write", "gets", "start", " write", "reading", " get", "select", " RN", "default", "test", " find", "Read", "rx", "ro", " reader", "ead", "get", "parse", "run", " send", "rid", "each", "txt", " reads", "feed", "iter", "print", " Read", " readable", "text"], "readline": ["selectline", "Readread", " readfile", "READfile", "Readfile", "openread", "readmode", " readread", " readprintln", " readlin", "Readline", "READline", "Readmode", "Readlin", "readLine", "readblock", "readstring", "readread", "openline", "ReadLine", "readlin", "READlines", "getline", " readmode", "readableprintln", "readableline", "selectmode", "selectlines", "READLine", "readableblock", "Readstring", "selectstring", "openlin", "openstring", " readLine", " readblock", "getblock", "getlines", " readstring", "getprintln", "readfile", "readablelines", "readprintln", "Readlines"], "readlines": ["Readlists", "Readrows", "checkrows", "runlists", "Readline", "runrows", "readvals", "Readelines", " readelines", "readlists", "runvals", "readelines", "checklines", "runline", "Readvals", "readrows", "runlines", "checkline", " readvals", "runelines", "checklists", "Readlines"], "INF": ["INf", "PINf", "LINF", "PINF", "PINFD", " INFD", " INV", "LINV", "LINf", " INf", "INFD", "LINFD", "INV", "PINV"], "N": ["K", "C", "F", "R", "Ni", "G", "NB", "M", "NR", "A", "Size", "S", "E", "O", "D", "NS", "FN", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", "Ns"], "B": ["BE", "BB", "BS", "Bytes", "VB", "DB", "C", "EB", "RB", "OB", "G", "W", "SB", "NB", "BO", "But", "WB", "M", "BA", "IB", "BC", "A", "BI", "b", "S", "MB", "BD", "L", "TB", "LB", "BG", "Q", "Bank", "FB", "T", "PB", "AB", "V", "BT", "I", "BL", "CB", "BM", "USB", "BY", "BR", "Bs", "BP"], "ans": ["ens", "anon", "annot", "aned", "AN", "ran", "pan", "amps", "anned", "ins", "ars", "anas", "aus", "ons", "ns", "ann", "acers", "aces", "aos", "beans", "ents", "ians", "angs", "rans", "ands", "said", "yes", " means", "ANS", "leans", "uns", "helps", "anes", "nan", "ams", "mos", "ads", "mails", "ras", "ates", "ats", "ros", "anks", "an", "ants"], "i": ["ini", "zi", "m", "cli", "uri", "a", "t", "ix", "ti", "s", "ip", "key", "ci", "ati", "gi", "v", "ij", "hi", "oi", "ori", "ki", "b", "phi", "ind", "id", "asi", "di", "ik", "p", "bi", "multi", "j", "pi", "fi", "qi", "isi", "ai", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "uni", "me", "x", "ui", "mi", "im"]}}
{"code": "\\na, b, c, x, y = list(map(int, input().split()))\\n\\nans = x*a + y*b # normal\\n\\nans = min(ans, 2*c*max(x, y)) # all from c\\n\\n\\nif max(x, y) == x: \\n    A = True\\nelse:\\n    A = False\\nleft = (max(x, y) - min(x, y))*(a if A else b)\\nans = min(ans, 2*c*min(x, y) + left)\\n\\nprint(ans)", "target": "430", "substitutes": {"a": ["f", "ba", "apa", "am", "ade", "l", "af", "ga", "ars", "xa", "ax", "A", "ca", "r", "ea", "ate", "admin", "d", "va", "da", "ao", "act", "e", "ox", "sa", "aa", "ew", "aj", "al", "art", "ac", "ab", "ach", "an", "aff"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "t", "bc", "s", "i", "cb", "fb", "r", "ch", "v", "db", "h", "g", "nb", "d", "bi", "br", "j", "e", "sb", "bo", "gb", "n", "ob", "o", "bs", "u", "B", "ab", "bb", "eb"], "c": ["f", "abc", "m", "C", "cr", "l", "cs", "t", "cb", "ca", "r", "k", "v", "h", "g", "cc", "ct", "ce", "d", "p", "ec", "e", "cd", "dc", "n", "cy", "cm"], "x": ["z", "yx", "m", "X", "xd", "xy", "l", "t", "ix", "xs", "xa", "i", "xx", "ax", "v", "xt", "dx", "h", "ex", "width", "d", "rx", "xc", " xx", "e", "ox", "int", "xi", "left", "w", "px", "lat", "zx", "tx"], "y": ["Y", "z", "ym", "ey", "yl", "yn", "ay", "m", "xy", "l", "py", "t", "yer", "iy", "sy", "oy", "i", "yy", "ery", "yt", "v", "gy", "ies", "yi", "ny", "fy", "j", "ry", "dy", "uy", "ye", "axy", "n", "asy", "cy", "vy", "yr", "yd", "ly"], "ans": [" weights", " cross", "add", " ret", " conv", "sum", " dot", " ro", "ta", " cov", "eff", "inv", " o", " res", " scale", "s", "res", " psi", " cc", " mult", "total", " sum", " cs", " co", "ac", "cor", "dot", " rc"]}}
{"code": "n = input()\\ns = \"ABC\"\\n\\nprint(s + n)", "target": "429", "substitutes": {"n": ["z", "f", "nn", "yn", "m", "a", "y", "nt", "t", "N", "i", "fn", "ns", "mn", "k", "v", "na", "c", "ln", "sn", "an", "b", "g", "cn", "nu", "nb", "num", "d", "p", "j", "np", "nan", "nc", "o", "w", "nl", "x"], "s": ["ps", "f", "str", "ws", "ls", "m", "a", "cs", "rs", "t", "l", "gs", "ms", "ins", "i", "ns", "r", "prints", "strings", "es", "c", "h", "ys", "b", "S", "string", "d", "p", "ss", "ds", "parts", "e", "sb", "its", "bs", "w", "u", "ats", "south", "ts", "qs"]}}
{"code": "n,k=map(int,input().split())\\nh=list(map(int,input().strip().split()))[:n]\\nh.sort()\\nif(k>=n):\\n    print(0)\\n\\nelif(k==0):\\n    b=sum(h)\\n    print(b)\\nelif(k<n):\\n    b=sum(h[:-k])\\n    print(b)", "target": "744", "substitutes": {"n": ["z", "f", "nn", "m", "a", "l", "y", "nt", "t", "s", "N", "i", "ns", "mn", "nm", "r", "v", "na", "c", "ln", "q", "sn", "g", "an", "nd", "nu", "nb", "num", "d", "size", "p", "j", "ne", "net", "int", "np", "nc", "o", "w", "no", "nl", "x"], "k": ["dk", "z", "max", "K", "m", "kr", "kind", "kt", "kh", "uk", "spec", "ka", "l", "ck", "kl", "ok", "kick", "kk", "key", "ke", "kid", "c", "mk", "q", "ki", "g", "kn", "unk", "ak", "id", "ik", "num", "kok", "p", "alpha", "km", "j", "kj", "ek", "zero", "kw", "tk", "ic", "sk", "ko", "ku", "ks"], "h": ["f", "uh", "ph", "he", "has", "H", "m", "kh", "hex", "rh", "hm", "l", "rs", "t", "hz", "i", "bh", "r", "v", "history", "hs", "c", "hi", "q", "http", "hal", "hd", "ih", "p", "oh", "ht", "hw", "hl", "ah", "hh", "w", "u", "sh", "x", "hash", "his", "hist", "hp"], "b": ["rb", "ba", "out", "obj", "conv", "a", "mb", "blue", "be", "l", "t", "bc", "bp", "back", "i", "bg", "cb", "fb", "bh", "r", "buffer", "lb", "db", "bound", "g", "wb", "nb", "d", "bi", "br", "j", "bool", "sb", "gb", "bo", "beta", "bis", "batch", "ob", "bs", "B", "ab", "bb", "body", "bar", "base", "eb"]}}
{"code": "a,b = map(int,input().split())\\nprint(a*b if a<=9 and b<=9 else -1)", "target": "181", "substitutes": {"a": ["z", "f", "ba", "m", "am", "ae", "l", "t", "sta", "af", "au", "i", "A", "r", "ca", "at", "la", "na", "c", "ea", "ity", "g", "area", "d", "p", "alpha", "da", "ao", "oa", "e", "sa", "ata", "aq", "aa", "aj", "al", "n", "ac", "abs", " A", "u", "ab", "aaa", "x", "ar", "an", "aff"], "b": ["z", "f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "t", "bc", "i", "cb", "fb", "r", "v", "db", "c", "g", "wb", "nb", "d", "bi", "br", "j", "bf", "bin", "sb", "reb", "beta", "bis", "n", "bs", "B", "ab", "x", "bb", "bar", "base"]}}
{"code": "b = input()\\nbp_dict = {'A': 'T', 'C': 'G'}\\nif b == 'A':\\n    print('T')\\nif b == 'T':\\n    print('A')\\nif b == 'C':\\n    print('G')\\nif b == 'G':\\n    print('C')", "target": "562", "substitutes": {"b": ["z", "f", "ba", "obj", "m", "a", "be", "l", "y", "t", "bc", "bp", "s", "by", "i", "bh", "fb", "r", "v", "db", "c", "h", "g", "wb", "unc", "nb", "d", "p", "bi", "br", "j", "bf", "e", "bool", "sb", "bu", "bis", "n", "ob", "bs", "w", "li", "B", "no", "ab", "x", "bb", "body", "base", "eb"], "bp_dict": ["bp__map", "bp2dir", "gp_dict", "bp_map", "bp__dir", "bp2dict", "gp_map", "bp__dict", "bp_dir", "bp2map", "gp_dir"]}}
{"code": "n, a, b = map(int, input().split())\\nprint(max(0, a + (n-1)*b - (n-1)*a - b + 1))", "target": "395", "substitutes": {"n": ["f", "nw", "nn", "names", "m", "l", "all", "nt", "t", "name", "N", "i", "len", "ns", "nm", "mn", "v", "na", "c", "long", "sn", "q", "g", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "net", "np", "got", "nc", "o", "no", "nl", "non", "x", "norm", "ll"], "a": ["f", "ba", "m", "ae", "to", "au", "xa", "i", "A", "at", "la", "c", "ea", "an", "g", "area", "d", "p", "alpha", "da", "j", "app", "act", "oa", "e", "sa", "aa", "aj", "al", "ac", "ma", "u", "w", "ia", " A", "ab", "aaa", "ar", "am", "auto"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "s", "i", "fb", "r", "db", "v", "c", "h", "g", "nb", "d", "bi", "j", "e", "sb", "bis", "ob", "bs", "u", "B", "ab", "bb", "body", "base"]}}
{"code": "inf =  1100000\\ndef main():\\n  N =  int(input())\\n  a = list(map(int, input().split()))\\n  a.sort()\\n  detect = [0] *inf\\n  for x in a:\\n    if detect[x] != 0:\\n      detect[x] = 2\\n      continue\\n    for i in range(x, inf, x):\\n      detect[i] += 1\\n  ans = 0\\n  for i in range(N):\\n    if detect[a[i]] == 1:\\n      ans += 1\\n  print(ans)\\n  \\nif __name__ == \"__main__\":\\n  main()", "target": "268", "substitutes": {"inf": ["z", "img", "ine", "sup", "f", "min", "max", "out", "diff", "adv", "one", "only", "fine", " Inf", "fg", "expl", "inv", "nt", "info", "ins", "pp", "adj", "lim", "Inf", "fo", "rf", "phi", "Pi", "ef", "ex", "ref", "ind", "inter", "num", "exp", "pi", "zero", "ipl", "inc", "it", "tf", "int", "txt", "conf", "n", "w", "I", "iter", "IN", "aff", "init"], "N": ["Y", "Num", "K", "C", "X", "F", "R", "Ni", "NB", "NI", "M", "A", "MN", "Na", "Len", "Inf", "NP", "Size", "Count", "S", "NT", "D", "NS", "L", "TN", "P", "No", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NN"], "a": ["z", "f", "done", "ba", "m", "am", "ae", "ta", "att", "l", "all", "t", "sta", "au", "ga", "s", "xa", "A", "input", "at", "na", "aw", "c", "ea", "index", "b", "g", "test", "aux", "area", "p", "alpha", "da", "act", "zero", "e", "sa", "ai", "ata", "aa", "n", "ac", "abs", "ma", "w", "set", "ab", "aaa", "an", "data"], "detect": ["deection", "normalection", "detract", "disector", "exection", "temected", "identect", "temector", "deector", "veector", "Detect", "identection", "identector", "Detsect", "deected", "detsect", "identdet", "Detract", "disection", "exector", "veect", "Detection", "Detected", "veection", "noector", "disdet", "diagnract", "normalector", "temsect", "temect", "detdet", "noect", "detector", "noection", "diagnector", "Detector", "desect", "vedet", "exect", "diagnect", "diagnection", "deect", "normalect", "detection", "detected", "normalract", "disect"], "x": ["z", "f", "xes", "yx", "xp", "X", "xy", "l", "y", "t", "ix", "xs", "ti", "xa", "xx", "xb", "ax", "ci", "v", "xt", "dx", "wx", "c", "index", "mx", "ex", "lo", "ct", "fx", "p", "rx", "j", "xxx", "pi", "xc", " xx", "e", "ox", "xe", "xxxx", "int", "xi", "n", "ic", "o", "w", "xf", "Ax", "xd", "tx", "inx"], "i": ["ini", "ei", "ri", "zi", "m", "l", "y", "t", "ix", "iy", "ti", "s", "ip", "ci", "ji", "v", "gi", " j", "ij", "c", "index", "ki", "phi", "yi", "ind", "id", "di", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "iti", "mi", "iu", "im", "ui"], "ans": ["ens", "rors", "cas", "ls", "views", "names", "ones", "oss", "idents", "cs", "rs", "cons", "amps", "xs", "iann", "s", "os", "ins", "ars", "ms", "ns", "ons", "aus", "ann", "outs", "news", "aos", "arts", "ents", "es", "ums", "ys", "rans", "eds", "posts", "ids", "ANS", "uns", "ai", "helps", "offs", "ints", "nan", "ads", "ras", "ats", "ros", "vals", "ts", "anks", "an", "ks", "ants", "lan"]}}
{"code": "import bisect\\nn = int(input())\\nA = list(map(int,input().split()))\\nA.sort()\\nif n == 2:\\n  ans = [A[1],A[0]]\\n  print(*ans)\\n  exit()\\nMAX = A[-1]\\ntarget = MAX//2\\nok = 0\\nng = n\\nwhile abs(ok-ng)>1:\\n  mid = (ok+ng)//2\\n  if A[mid] <= target:\\n    ok = mid\\n  else:\\n    ng = mid\\nans = [MAX,A[ok]]\\n\\nnxt = ok+1\\n#print(A[nxt])\\nif nxt < n:\\n  dif0 = min(MAX-A[ok],A[ok])\\n  dif1 = min(MAX-A[nxt],A[nxt])\\n  if dif0 < dif1:\\n    ans[1] = A[nxt]\\nprint(*ans)", "target": "207", "substitutes": {"n": ["z", "nn", "max", "m", "a", "l", "all", "nt", "t", "number", "nr", "N", "i", "len", "ns", "r", "k", "en", "fn", "mn", "NR", "na", "c", "ln", "sn", "NA", "nd", "g", "cn", "nb", "tn", "num", "d", "size", "p", "nat", "ne", "nor", "gn", "np", "nan", "nc", "no", "nl", "x", "norm", "count", "init"], "A": ["Y", "App", "AY", "Ass", "AI", "AA", "Ar", "C", "X", "AC", "Al", "a", "Ab", "IA", "G", "AV", "au", "N", "Args", "BA", "Abs", "CA", "LA", "TA", "AL", "What", "Ent", "PA", "EA", "JA", "Av", "S", "As", "AU", "All", "AT", "Array", "D", "AF", "WA", "L", "GA", "M", "An", "ICA", "At", "ATA", "mA", "P", "MA", "AM", "This", "You", "AE", "AS", "T", "The", "AB", "AP", "Answer", "One", "I", "B", "AST", "Ax", "SA"], "ans": ["ens", "cas", " ann", "annot", "Ann", "ANN", "AN", "ones", "ran", "pan", "amps", "ms", "ars", " An", "aus", "ns", "ons", "ann", "os", " Ans", "aps", "aos", "arts", " sans", "ents", "ians", "angs", "rans", "eds", " means", "ids", "ANS", "man", "An", "anes", "nan", "ams", "ads", "ras", " AN", "ats", "ros", "an", "ks", "ants", " answ", "lan", " an"], "MAX": ["MIN", "max", "K", "ALL", "GEN", "RA", "X", "AN", "MX", "Maximum", "MAL", "R", "ANK", "MT", "NG", "NEW", "N", "M", "ax", "NR", "AX", "MED", "SIZE", "OT", "OX", "Max", "NA", "OK", "MAP", "ND", "NK", "NT", "CAN", "LAN", "END", "ACTION", "MA", "OR", "HEAD", "MOD", "MAN", "Z", "OUT", "NUM", "AK", "MD"], "target": ["type", "max", "min", "tmp", "top", "ARGET", "range", "Target", "arget", "nt", "t", "to", "step", "point", "high", "limit", "root", "OT", "length", "match", "mask", "start", "TO", "term", "master", "gt", "size", "next", "window", "total", "error", "mark", "set", "stop", "arg", "count", "new", "auto"], "ok": ["good", "op", "rand", "md", "max", "ack", "out", "oc", "off", "kr", "tick", "dev", "conn", "nt", "t", "ck", "pos", "ms", "ax", "i", "Ok", "k", "res", "err", "msg", "ch", "check", "ocr", "index", "start", "ot", "mot", "OK", "ak", "yes", "ind", "id", "typ", "cmd", "ik", "orf", "init", "next", "kok", "ek", "ro", "valid", "ox", "it", "od", "int", "fin", "loc", "o", "iter", "Tok", "ko", "success", "kit", "og", "scan", "auto"], "ng": ["z", "rand", "nw", "max", "mb", "big", "NG", "nr", "ms", "step", "ang", "ns", "mn", "err", "nm", "now", "sd", "na", "resh", "nd", "g", "mx", "wn", "ny", "next", "gov", "ss", "window", "sam", "eng", "ne", "ong", "mg", "gn", "nz", "nc", "nl", "sh", "og", "md", "pg"], "mid": ["rand", "sub", "min", "med", "max", "mill", "m", "mit", "my", "full", "ms", "middle", "dim", "mn", "lim", "hi", "mk", "dem", "mmm", "nd", "lt", "mask", "start", "mod", "mp", "ind", "id", "medium", "Mid", "next", "kill", "nil", "mt", "trans", "mo", "wid", "main", "mean", "mer", "loc", "part", "pid", "mini", "mm", "me", "mi", "mad", "MD", "md"], "nxt": [" nx", " next", "Nx", "nx", "next", "nbr", "nuxt", "Nbr", "nuext", "Nxt", " nbr", "nubr", "nux", "Next"]}}
{"code": "N, K = map(int, input().split())\\nfruit = input().split()\\n#print(fruit)\\nfruit = [int(x) for x in fruit]\\n#print(fruit)\\nfruit.sort()\\n#print(fruit)\\nprint(sum(fruit[:K]))", "target": "124", "substitutes": {"N": ["Y", "H", "C", "X", "F", "R", "Ni", "CNN", "G", "M", "NA", "S", "E", "O", "D", "NS", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NN"], "K": ["Y", "KA", "C", "X", "F", "R", "G", "W", "Ka", "M", "A", "k", "KI", "NP", "KS", "S", "O", "D", "NS", "P", "Q", "KE", "T", "J", "Z", "V", "B"], "fruit": [" R", "F", " Input", " L", "s", "i", "r", "input", "v", " n", " U", " T", " v", " input", "E", "Input", " Xi", " inputs", " F", " I", " x", " data", "n", " q", " s", " E", " S"]}}
{"code": "def main():\\n  N = int(input())\\n  S = str(input())\\n  ans = 0\\n  for i in range(N - 2):\\n      if S[i] == 'A' and S[i + 1] == 'B' and S[i + 2] == 'C':\\n        ans += 1\\n  print(ans)\\nmain()", "target": "369", "substitutes": {"N": ["Num", "NE", "C", "Ni", "CNN", "NG", "NB", "NI", "EN", "M", "Mon", "NR", "CN", "Len", "NP", "NA", "ND", "Ne", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "NPR", "T", "GN", "n", "V", "I", "Ns", "NC", "NO", "NN", "NH"], "S": ["Sample", "BS", "SI", "Sl", "Si", "C", "SS", "WS", "SL", "Spe", "G", "PS", "SB", "SM", "JS", "s", "M", "A", "ST", "IS", "DS", "NS", "STR", "SU", "SO", "L", "ss", "SP", "Su", "P", "TS", "SH", "T", "SF", "AS", "SE", "VS", "I", "B", "CS", "GS", "SA", "Set", "SQL"], "ans": ["ens", "wan", "cas", "anon", "sum", "annot", "mas", "aned", "AN", "oss", "ran", "ean", "pan", "rs", "amps", "iann", "s", "ins", "anas", "ms", "aus", "ns", "ann", " Ans", "acs", "aos", "arts", "ents", "ums", "rans", "eds", "san", "ANS", "An", "nas", "ai", "offs", "anes", "mean", "ams", "n", "ads", "ras", "ats", "ros", "anks", "an", "ks", "ants", "lan"], "i": ["io", "ini", "ei", "zi", "m", "cli", "uri", "ogi", "this", "ix", "ti", "s", "ip", "ci", "key", "\u0438", "ji", "gi", "v", "ij", "c", "ori", "index", "oi", "ki", "q", "b", "phi", "ami", "yi", "ind", "id", "di", "bi", "j", "pi", "qi", "ai", "it", "uli", "n", "xi", "ic", "si", "I", "li", "me", "x", "ui", "mi", "ski"]}}
{"code": "n, m = list(map(int, input().split()))\\ncnt = [1] * n\\nhas_red = [False] * n\\nhas_red[0] = True\\nfor i in range(m):\\n    a, b = list(map(int, input().split()))\\n    has_red[b - 1] = has_red[b - 1] or has_red[a - 1]\\n    if cnt[a - 1] == 1:\\n        has_red[a - 1] = False\\n    cnt[a - 1] -= 1\\n    cnt[b - 1] += 1\\nprint(has_red.count(True))\\n", "target": "311", "substitutes": {"n": ["f", "nn", "l", "y", "nt", "t", "s", "ms", "N", "M", "ns", "r", "k", "nm", "mn", "v", "na", "c", "h", "q", "sn", "g", "nd", "cm", "an", "nb", "num", "d", "p", "j", "ne", "np", "nan", "nc", "o", "w", "x", "count"], "m": ["f", "gm", "mc", "tm", "mon", "mb", "l", "t", "ms", "M", "mn", "r", "k", "nm", "v", "c", "bm", "g", "dm", "num", "d", "p", "man", "km", "j", "mt", "om", "mr", "ma", "mm", "mi", "cm"], "cnt": ["Cent", "cst", "crent", "lcount", "lcct", "rcpt", "CNT", "rcct", " cpt", "cNT", "Cct", "nNT", "Count", "Cnt", "ncNT", "crct", "rcnt", "crNT", "crnt", "lcnt", " cst", "cent", " count", " cent", "ncst", " cNT", "ncnt", "nct", "nnt", "lcpt", "Cst", "cct", " cct", "rcount", "nount", "ncct", "count", "cpt"], "has_red": ["has_rew", "has_pred", "has__red", "has_Red", "hadPblue", "have_cond", "have_blue", "have_red", "has_white", "had_red", "had_high", " has_Red", " has_pred", "hasPblue", "has_RED", "has__blue", "hasPred", " has_white", "hasPhigh", "hadPcond", " has_cond", "had_blue", "has_cond", "has_green", "have_error", "had_cond", "have_RED", "has___RED", " has_green", "have_Red", "has2blue", "has__rew", "have_pred", "has_error", "hadPhigh", "has2red", "has2pred", "have_rew", "has_high", "has2Red", "has___Red", "has_blue", "has___pred", "hadPred", "has__cond", "has___red", "hasPcond"], "i": ["z", "f", "l", "y", "ite", "ix", "by", "r", "k", " j", "c", "q", "ind", "id", " ii", "p", "j", "e", "it", "I", "li", "iter", "x", "im"], "a": ["z", "f", "ba", "el", "ap", "ae", "ta", "be", "l", "all", "t", "sta", "au", "ga", "A", "ca", "at", "la", "v", "pa", "na", "c", "ea", "era", "g", "ak", "er", "va", "p", "da", "alpha", "br", "j", "ao", "oa", "act", "e", "sa", "ai", "bar", "aa", "aj", "ac", " A", "w", "ma", "ab", "ar", "an"], "b": ["z", "f", "rb", "ba", "be", "l", "y", "t", "bc", "bp", "bd", "to", "ga", "s", "by", "bg", "r", "ca", "v", "db", "c", "h", "an", "g", "nb", "d", "p", "bi", "br", "j", "e", "sb", "aa", "o", "bs", "u", "B", "ab", "bb", "bar", "eb"]}}
{"code": "h = int(input())\\ncnt = 1\\nwhile 1 < h:\\n    cnt += 1\\n    h //= 2\\n    #print(h)\\n#print(cnt)\\n\\nres = 0\\n\\nfor v in range(cnt):\\n    res += 2**v\\nprint(res)", "target": "153", "substitutes": {"h": ["z", "f", "he", "H", "m", "a", "hm", "l", "y", "t", "i", "bh", "k", "ch", "v", "ho", "history", "hs", "c", "hi", "index", "q", "b", "phi", "g", "hhh", "hd", "ih", "p", "j", "ht", "oh", "hl", "dh", "n", "hr", "ah", "hh", "w", "x", "head", "hash", "his", "count", "hp"], "cnt": ["ncount", "ncpt", "acount", "acnt", "acpt", "CNT", "acct", "acNT", " cpt", "cNT", "Cct", "Count", "Cnt", " count", "ncnt", " cNT", "cct", " cct", "ncct", "count", "cpt"]}}
{"code": "n,m,x = map(int,input().split())\\na = list(map(int,input().split()))\\ni = 0\\nj = 0\\nfor k in a:\\n    if k>x:\\n        i += 1\\n    elif k<x:\\n        j += 1\\nprint(min(i,j))", "target": "660", "substitutes": {"n": ["z", "f", "nn", "l", "y", "t", "s", "N", "ns", "v", "na", "c", "h", "q", "b", "g", "nb", "num", "d", "p", "e", "nc", "o", "w"], "m": ["mu", "f", "mc", "l", "t", "ms", "dim", "M", "mn", "r", "nm", "v", "c", "h", "b", "g", "d", "p", "km", "e", "o", "ma", "w", "mm", "mi", "cm"], "x": ["z", "f", "xes", "X", "xy", "l", "y", "t", "ix", "xs", "xa", "xx", "ax", "r", "v", "xt", "dx", "wx", "c", "h", "q", "g", "mx", "ex", "d", "p", "rx", "xc", "e", "ox", "xi", "o", "w", "u", "xf", "tx"], "a": ["z", "ba", "out", "apa", "ap", "ae", "ta", "another", "l", "all", "t", "ga", "s", "xa", "A", "ca", "r", "at", "la", "v", "na", "c", "wa", "ea", "b", "area", "p", "oa", "e", "ai", "sa", "aa", "o", "ma", "w", "ab", "an"], "i": ["io", "ini", "ri", "zi", "y", "ix", "ti", "info", "ip", "ci", "gi", "v", "ij", "hi", "ami", "ind", "di", "p", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "o", "li", "I", "ia", "ui", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "ja", "l", "y", "t", "s", "fr", "jp", "ji", "r", "v", "json", "ij", "h", "b", "g", "jac", "d", "p", "oj", "kj", "e", "it", "jj", "jump", "aj", "J", "o", "uj", "dj", "bj", "js", "jc"], "k": ["z", "K", "kr", "kh", "ka", "ck", "kl", " ka", "ikk", "kk", "kan", "ke", "kid", "v", "kar", "c", "mk", "ki", "q", "g", "ak", "unk", "ijk", "wk", "ik", "kok", "p", "km", "kj", "ek", "aka", "kw", "ulkan", "tk", "u", "sk", "ko", "isk", "ku", "ks"]}}
{"code": "# Aizu Problem ITP_1_8_A: Toggling Cases\\n#\\nimport sys, math, os\\n\\n# read input:\\nPYDEV = os.environ.get('PYDEV')\\nif PYDEV==\"True\":\\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\\n\\n\\nout = \"\"\\nfor char in input().strip():\\n    o = ord(char)\\n    if 65 <= o <= 90:\\n        out += chr(o + 32)\\n    elif 97 <= o <= 122:\\n        out += chr(o - 32)\\n    else:\\n        out += char\\nprint(out)", "target": "643", "substitutes": {}}
{"code": "n = int(input())\\nA = list(map(int,input().split()))\\nans = 0\\nfor i in range(n-1):\\n    if A[i] >= A[i+1]:\\n        ans += A[i]-A[i+1]\\n        A[i+1] = A[i]\\nprint(ans)\\n", "target": "680", "substitutes": {"n": ["nn", "nw", "nia", "names", "m", "ni", "l", "nt", "t", "name", "N", "ns", "mn", "en", "v", "na", "c", "ln", "sn", "q", "nd", "cn", "nu", "nb", "num", "d", "p", "ne", "net", "gn", "np", "nan", "nc", "no", "nl", "x", "norm", "ll"], "A": ["Y", "He", "AA", "Ar", "H", "C", "X", "AN", "AC", "a", "Al", "R", "IA", "Alice", "G", "N", "M", "Abs", "Args", "CA", "LA", "EA", "U", "JA", "Av", "NA", "S", "As", "All", "HA", "AT", "Array", "AU", "AF", "L", "WA", "GA", "To", "Address", "An", "At", "ATA", "mA", "P", "MA", "Java", "AM", "This", "You", "Map", "And", "AE", "Action", "The", "AB", "AP", "Answer", "One", "Alpha", "B", "I", "SA"], "ans": ["ens", "sum", "aned", "AN", "oss", "ran", "cs", "rs", "pan", "gs", "amps", "anned", "ins", "anas", "ars", "aus", "ns", "outs", "ons", "ann", "aps", "aos", "arts", "ians", "ums", "rans", "ands", "eds", "grades", " means", "ANS", "uns", "nas", "offs", "anes", "mean", "ams", "ads", "ras", "ats", "ros", "anks", "ions", "an", "ks", "ants", "lan"], "i": ["io", "ini", "ei", "rest", "ri", "zi", "cli", "uri", "this", "name", "ix", "ti", "info", "ip", "ci", "key", "ji", "gi", "v", "status", "ij", "hi", "ori", "oi", "ki", "q", "index", "phi", "ami", "sim", "ind", "id", "di", "bi", "multi", "j", "pi", "vi", "qi", "ai", "it", "ii", "xi", "si", "iri", "ic", "batch", "li", "I", "set", "me", "x", "ui", "mi", "iu", "im", "item", "init"]}}
{"code": "n,ma,mb=map(int,input().split())\\ndp=[[[9999]*401for _ in range(401)]for _ in range(n+1)];dp[0][0][0]=0\\nsa=sb=0\\nfor i in range(1,n+1):\\n  a,b,c=map(int,input().split())\\n  sa+=a;sb+=b\\n  for j in range(401):\\n    for k in range(401):\\n      if j>=a and k>=b:dp[i][j][k]=min(dp[i-1][j-a][k-b]+c,dp[i-1][j][k])\\n      else:dp[i][j][k]=dp[i-1][j][k]\\na=9999\\nfor i in range(1,min(sa//ma,sb//mb)+1):\\n  if dp[n][ma*i][mb*i]!=9999:a=min(a,dp[n][ma*i][mb*i])\\nprint(-1if a==9999else a)", "target": "578", "substitutes": {"n": ["z", "f", "nn", "m", "ni", "l", "y", "nt", "t", "note", "nr", "s", "N", "len", "ns", "nm", "mn", "r", "fn", "v", "na", "sn", "h", "an", "g", "nu", "num", "d", "p", "dn", "pi", "ne", "e", "net", "np", "nan", "nc", "o", "w", "x"], "ma": ["mu", "ama", "kat", "asa", "mc", "fa", "m", "mas", "qa", "ta", "ka", "ja", "lia", "se", "ha", "ga", "ms", "ca", "mn", "la", "sea", "hma", "pa", "wa", "na", "ea", "usa", "ame", "ml", "area", "va", "da", "alpha", "sam", "mt", "MA", "mg", "una", "aa", "mma", "ra", "si", "sha", "mar", "ju", "ia", "ota", "mm", "me", "mi", "mad", "ema"], "mb": ["rb", "ib", "nom", "mor", "ym", "ram", "mc", "m", "bd", "sm", "bc", "bp", "pb", "ms", "mn", "db", "bm", "mk", "nob", "nd", "mx", "meg", "mp", "nb", "MB", "rm", "ml", "mem", "emb", "dm", "vm", "kb", "mt", "bf", "amb", "mg", "gb", "ob", "ub", "mar", "umb", "bs", "mm", "um", "bb", "mi", "fm", "md"], "dp": ["ps", "deb", "adr", "decl", "bsp", "df", "pkg", "wd", "dos", "ga", "pb", "gp", "dd", "pp", "jp", "dt", "tp", "db", "vp", "dq", "pm", "fp", "csv", "imp", "mp", "deep", "dm", "pd", "d", "dl", "p", "dep", "ds", "lp", "cp", "tap", "rpm", "dial", "cd", "dc", "np", "DP", "dh", "bps", "delay", "px", "dj", "lat", "dr", "wp", "disc"], "_": ["pt", "ing", "t", "ms", "__", " __", "val", " the", "___", "ation"], "sa": ["ama", "ba", "sv", "asa", "apa", "mas", "ta", "ja", "ka", "ha", "sta", "ga", "s", "au", "sy", "xa", "ca", "la", "pa", "sl", "na", "sd", "ea", "sg", "da", "ada", "sam", "oa", "ai", "ata", " si", "aa", "si", "ac", "sha", "ia", "ab", "an", "Sa", "SA"], "sb": ["rb", "ib", "ha", "sm", "bc", "bp", "SB", "ga", "pb", "s", "bg", "cb", "fb", "tp", "lb", "db", "pa", "sg", "wb", "nb", "sbm", "dl", "bt", "bi", "zb", "sth", "lp", "bf", "sf", "gb", "si", "ob", "ub", "bs", "umb", "bb", "bj"], "i": ["z", "io", "ini", "ri", "zi", "m", "ni", "l", "y", "t", "ite", "ix", "ti", "info", "ip", "ci", "\u0438", "ji", "v", "gi", "status", "ij", "oi", "index", "h", "q", "g", "yi", "ie", "id", "di", "ik", "iat", "d", "p", "bi", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "iter", "u", "ia", "dr", "x", "ui", "mi", "iu", "im"], "a": ["f", "ba", "apa", "fa", "m", "ap", "am", "qa", "ae", "ta", "ja", "ka", "all", "t", "ha", "sta", "ga", "s", "au", "xa", "A", "r", "ca", "at", "la", "v", "pa", "na", "wa", "ea", "h", "ami", "ate", "er", "area", "p", "va", "alpha", "da", "ao", "oa", "act", "e", "ai", "ata", "aq", "aa", "aj", "al", "art", "ac", "u", "ah", "sha", "o", "ab", "eas", "aaa", "ia", "x", "ar", "ach", "an"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "bc", "bp", "ga", "pb", "s", "bg", "cb", "r", "fb", "lb", "db", "v", "g", "wb", "nb", "d", "bt", "bi", "br", "bf", "e", "o", "bs", "u", "B", "ab", "bb"], "c": ["z", "f", "m", "C", "cr", "l", "cs", "t", "bc", "cf", "s", "cb", "r", "ca", "ch", "ci", "cin", "v", "co", "h", "lc", "g", "cc", "unc", "ce", "d", "p", "cp", "e", "cd", "fc", "ac", "cu", "u", "x", "cm"], "j": ["z", "f", "obj", "ion", "jl", "m", "ja", "l", "y", "t", "jp", "ji", "at", "v", "json", "ij", "h", "q", "je", "g", "jac", " ii", "di", "ik", "d", "p", "bi", "oj", "kj", "jas", "ai", "it", "jj", "jump", "aj", "J", "si", "o", "ju", "li", "dj", "uj", "x", "bj", "js", "jc"], "k": ["z", "kg", "K", "kat", "m", "kr", "kind", "kt", "kh", "uk", "ka", "t", "ck", "kl", "ikk", "ok", "kk", "key", "ke", "kan", "kid", "v", "kar", "mk", "ki", "q", "ak", "unk", "kn", "ijk", "wk", "ik", "p", "kok", "km", "kj", "ek", "kw", "tk", "u", "sk", "ko", "x", "ku", "ks"]}}
{"code": "S = sorted(input())\\n\\nif len(set(S)) == 2 and S.count(S[0]) == S.count(S[-1]):\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "103", "substitutes": {"S": ["SER", "BS", "SI", "H", "C", "SS", "X", "F", "GES", "R", "SL", "G", "W", "SB", "SM", "PS", "JS", "s", "N", "M", "SOURCE", "A", "RS", "INS", "ST", "E", "SR", "DS", "D", "SN", "SAM", "NS", "US", "SU", "SO", "L", "SP", "P", "TS", "IES", "SH", "T", "SA", "SF", "SE", "Z", "J", "V", "VS", "I", "B", "CS", "GS"]}}
{"code": "import numpy as np\\n\\nclass UnionFind:\\n    def __init__(self, sz: int):\\n        self._par: np.array = np.full(sz + 1, -1)\\n\\n    def root(self, a: int):\\n        if self._par[a] < 0:\\n            return a\\n        self._par[a] = self.root(self._par[a])\\n        return self._par[a]\\n    \\n    def size(self, a: int):\\n        return -self._par[self.root(a)]\\n    \\n    def unite(self, a, b):\\n        a = self.root(a)\\n        b = self.root(b)\\n        if a != b:\\n            if self.size(a) < self.size(b):\\n                a, b = b, a\\n            self._par[a] += self._par[b]\\n            self._par[b] = a\\n    \\nif __name__ == '__main__':\\n    N, M = map(int, input().split())\\n    uf = UnionFind(N + 1)\\n    for i in range(M):\\n        a, b = map(int, input().split())\\n        uf.unite(a, b)\\n    ans = 1\\n    for i in range(1, N + 1):\\n        ans = max(ans, uf.size(i))\\n    print(ans)", "target": "602", "substitutes": {"self": ["disk", "add", "spec", "dev", "parent", "close", "Self", "make", "expr", "attr", "sw", "compl", "wrapper", "co", "pull", "empty", "h", "q", "wn", "complete", "ref", "deep", "work", "default", "pre", "round", "network", "cmp", "hand", "soc", "graph", "rem", "rec", "sche", "patch", "also", "new", "sys", "ws", "obj", "python", "pkg", "se", "this", "conn", "private", "pp", "shape", "final", "history", "json", "ren", "test", "cl", "hw", "object", "gh", "txt", "small", "table", "left", "lf", "help", "me", "req", "scope", "view", "proc", "ls", "look", "reader", "sql", "rs", "nt", "ral", "raw", "resp", "filter", "console", "user", "context", "mem", "next", "func", "agg", "app", "form", "results", "subject", "cache", "w", "own", "details", "partial", "tmp", "views", "eval", "util", "my", "py", "all", "dict", "s", "dd", "xml", "github", "nd", "pair", "th", " yourself", "mp", "config", "sect", "path", "hess", "local", "get", "_", "np", "review", "log", "instance", "rel", "handle"], "_par": ["_var", "___ps", " _orig", " _var", "_pas", " _rec", "_req", "___arr", "_arr", "_pub", " _rep", "_ps", " _rel", " _ps", "_rep", " _pas", "objvar", "_pol", " _p", "_dev", "___par", "objparam", " _req", " _arr", " _prop", " _param", "_p", "objpar", "_target", "___rec", "_rel", "_prop", "_orig", "_pass", "_param", "objp", "_rec"], "a": ["ba", "ja", "value", "v", "pa", "h", "era", "g", "val", "default", "area", "admin", "da", "ao", "ai", "ya", "ra", "ia", "ab", "eas", "x", "ast", "auto", "f", "obj", "apa", "el", "m", "ta", "att", "this", "t", "to", "ua", "na", "air", "er", "exp", "aq", "aa", "n", "abs", "o", "art", "arg", "ach", "am", "ack", "ae", "l", "ga", "ed", "A", "r", "at", "la", "c", "ea", "ak", "go", "va", "p", "alpha", "j", "app", "e", "sa", "ata", "aj", "al", "ac", "ma", "w", "aaa", "aff", "off", "ap", "all", "sta", "au", "af", "s", "ca", "any", "ce", "act", "oa", "it", "u", "ar", "an"], "b": ["z", "f", "rb", "ba", "ib", "erb", "tmp", "m", "bl", "other", "be", "l", "y", "t", "bc", "bp", "to", "pb", "back", "bg", "bh", "fb", "cb", "r", "lb", "db", "v", "url", "birth", "c", "h", "g", "wb", "nb", "d", "p", "bt", "bi", "br", "j", "end", "bin", "e", "sb", "bis", "n", "ob", "o", "bs", "u", "B", "ab", "bb", "body", "bar", "base", "eb"], "N": ["Num", "K", "NE", "H", "C", "AN", "F", "Sn", "R", "Ni", "CNN", "NB", "NI", "NR", "A", "MN", "U", "NP", "NA", "Size", "S", "O", "ND", "NT", "D", "SN", "NS", "NM", "L", "P", "MAN", "T", "GN", "n", "I", "B", "NUM", "NC", "Ns", "NN", "NH"], "M": ["MO", "m", "C", "MP", "H", "F", "MX", "R", "Multi", "MT", "MR", "CM", "MI", "MN", "MC", "REM", "MM", "S", "D", "Many", "NM", "L", "JM", "P", "MA", "AM", "MS", "T", "MAN", "DM", "J", "RM", "V", "I", "B", "MU"], "uf": ["f", "gow", "uh", "ulf", "pu", "raf", "fg", "ud", "ux", "df", "aft", "ush", "af", "pb", "uch", "fol", "aus", "ue", "ume", "ul", "lu", "fo", "rf", "ef", "uff", "eu", "ust", "oster", "du", "buf", "UF", "kw", "tf", "ull", "bo", "uc", "ucc", "gb", "uu", "ub", "u", "lf", "us", "utf", "um", "ui", "ff", "uph", "hum"], "i": ["z", "ei", "ini", "ri", "zi", "m", "cli", "l", "y", "t", "ix", "ti", "ip", "ci", "k", "ji", "gi", "v", "c", "hi", "oi", "phi", "di", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "ii", "xi", "si", "n", "ic", "iri", "li", "I", "o", "mi", "iu", "im"], "ans": ["ens", "ps", "cas", "aned", "vers", "oss", "rs", "nt", "amps", "gs", "xs", "iann", "s", "ms", "anas", "ins", "aus", "ns", "ons", "os", "ann", "outs", "ends", "aps", "arts", "es", "asks", "ums", "rans", "ands", "posts", "yes", "ids", "ANS", "rows", "uns", "nas", "offs", "anes", "nz", "ates", "ats", "us", "ros", "anks", "an", "ks", "ants", "uploads", "irms"]}}
{"code": "n=int(input())\\na=sorted(list(map(int,input().split())))\\nai=a[-1]\\naa=ai/2\\nans=float(\"inf\")\\nfor i in range(n-1):\\n    tmp=abs(a[i]-aa)\\n    if tmp<ans:\\n        ans=tmp\\n        aj=a[i]\\nprint(ai,aj)", "target": "207", "substitutes": {"n": ["nn", "nw", "nia", "names", "m", "l", "nt", "t", "number", "name", "N", "ns", "mn", "nm", "r", "v", "na", "c", "ln", "sn", "q", "nd", "cn", "nu", "nb", "num", "d", "j", "ne", "net", "gn", "np", "nan", "nc", "no", "nl", "ll"], "a": ["f", "obj", "array", "ap", "am", "ae", "all", "t", "au", "ga", "s", "A", "at", "la", "now", "aos", "history", "na", "c", "es", "b", "aux", "area", "go", "next", "aaaa", "p", "alpha", "da", "ao", "app", "oa", "e", "sa", "up", "abs", "o", "ma", "ab", "eas", "aaa", "list", "an", "auto"], "ai": ["arr", "aug", "AI", "apa", "ay", "fa", "aii", "ta", "ae", "ais", "au", "af", "aus", "ci", "ca", "ax", "ati", "na", "hi", "ea", "an", "ami", "ak", "air", "aid", "ari", "bi", "ao", "oa", "aka", "av", "sa", "aq", "ait", "al", "art", "ia", "ab", "aaa", "hai", "mi", "ar", "ali", "am"], "aa": ["ita", "ba", "apt", "apa", "AA", "fa", "qa", "asia", "ta", "ae", "af", "au", "ca", "pa", "na", "ea", "area", "ava", "va", "aaaa", "ica", "ari", "ao", "oa", "aka", "av", "isa", "sa", "aq", "ena", "ma", "ah", "nda", "ia", "ab", "aaa", "amba", "aba"], "ans": ["ens", "ls", "oos", "asa", "mas", "oss", "cs", "rs", "amps", "s", "ars", "anas", "ins", "aus", "ns", "ons", "mn", "ann", "ags", "ms", "aps", "aos", "arts", "na", "ents", "angs", "rans", "aves", "vs", "ANS", "ots", "can", "alpha", "eps", "nas", "uns", "una", "anes", "ames", "nan", "ras", "ats", "Ns", "eas", "ros", "ts", "os", "an", "ants"], "i": ["ini", "ri", "zi", "m", "uri", "ix", "ti", "info", "s", "ip", "ci", "ji", "v", "gi", "ij", "hi", "index", "ki", "q", "b", "phi", "yi", "ind", "id", "di", "bi", "vi", "j", "pi", "qi", "it", "ii", "xi", "si", "ic", "iri", "li", "I", "me", "x", "mi", "im", "init"], "tmp": ["emp", "offset", "obj", "out", "tm", "xy", "pkg", "py", "t", "tt", "etc", "yy", "attr", "jp", "timeout", "perm", "snap", "tar", "mk", "term", "mmm", "tem", "mp", "temp", "tv", "test", "option", "pre", "comp", "cur", "cp", "sam", "td", "clip", "cmp", "jj", "tf", "vt", "txt", "dust", "tc", "abs", "mm", "buff", "prefix", "prime", "trap", "new", "pot"], "aj": ["arr", "apt", "apa", "ay", "ap", "ae", "ja", "ais", "au", "af", "ax", "ca", "aja", "aps", "ij", " maj", "na", "ak", "aux", "ao", "j", "oa", "\u00e4", "aka", "av", "sa", "jj", "aq", "ait", "ah", "uj", "ab", "aaa", "am"]}}
{"code": "n = int(input())\\nans = n\\nL = [list(map(int, input().split())) for _ in range(n)]\\npq = []\\nfor i in range(n):\\n    for j in range(i+1, n):\\n        pq.append([L[j][0] - L[i][0], L[j][1] - L[i][1]])\\nfor p, q in pq:\\n    cost = n\\n    for x, y in L:\\n        if [x-p, y-q] in L:\\n            cost -=1\\n    ans = min(ans, cost)\\nprint(ans)\\n", "target": "698", "substitutes": {"n": ["z", "f", "nn", "nia", "m", "l", "nt", "t", "name", "number", "s", "N", "len", "ns", "mn", "k", "r", "v", "na", "c", "ln", "sn", "an", "h", "g", "cn", "nu", "nb", "ind", "rn", "num", "d", "size", "ne", "none", "gn", "np", "nan", "nc", "o", "w", "no", "nl", "new"], "ans": ["ps", "stats", "ens", "nn", "cas", "lines", "checks", "ls", "names", "vers", "AN", "rates", "cs", "rs", "cons", "amps", "xs", "iann", "s", "ms", "ins", "os", "ants", "ns", "mn", "ons", "ann", "anas", "outs", "aps", "aus", "arts", "ents", "es", "asks", "ands", "posts", "cn", "ids", "vs", "ANS", "works", "rows", "runs", "leans", "sets", "uns", "offs", "gn", "ams", "ads", "ates", "ats", "vals", "ts", "aints", "ions", "an", "ks", "terms", "anks", "izes"], "L": ["LV", "DL", "H", "C", "XL", "X", "LR", "F", "R", "LE", "l", "SL", "G", "W", "LS", "VL", "ML", "LM", "N", "LT", "M", "LU", "LG", "Left", "LA", "NL", "U", "PL", "S", "GL", "D", "RL", "CL", "LB", " l", "P", "Q", "LC", "List", "T", "LI", "J", "Z", "V", "FL", "I", "B", "dL", "LP", "LD", "BL", "LL", "Lu", "TL"], "_": [" int", "all", "name", "ix", "ip", "il", "val", "ind", "ik", "num", "ox", "ai", " the", "J", " all", "I", "li"], "pq": [" pQ", "cpql", "iqv", "cpQ", "iq", "cpq", "ppqq", "iue", "pqv", " pqq", "paql", " pqv", "ppq", " pue", " pql", "pqq", "pue", "Pue", "Pq", "paqq", "paQ", "PQ", "pql", "ppql", "cpqq", "paq", "iQ", "Pqv", "pQ", "ppQ"], "i": ["ini", "ri", "zi", "m", "l", "t", "this", "ix", "ti", "ip", "ci", "ji", "gi", "v", "ij", "ki", "b", "yi", "ie", "ind", "di", "ik", "bi", "multi", "pi", "ai", "it", "jj", "int", "ii", "xi", "si", "ic", "li", "I", "ia", "ui", "mi", "iu", "im", "item"], "j": ["z", "f", "obj", "jl", "ja", "l", "fr", "jp", "k", "ji", "v", "json", "ij", "h", "b", "jac", "di", "next", "bi", "br", "oj", "kj", "it", "jj", "jump", "aj", "J", "o", "li", "uj", "dj", "rel", "bj", "js", "jc"], "p": ["z", "pe", "ps", "op", "ph", "pt", "pr", "ap", "a", "par", "l", "pos", "pb", "pp", "ip", "jp", "k", "tp", "v", "pa", "c", "h", "mp", "cp", "lp", "pi", "pl", "P", "e", "pc", "u", "pn", "pro"], "q": ["z", "pe", "f", "ve", "iq", "m", "l", "ip", "r", "k", "ue", "ch", "v", "query", "c", "dq", "h", "b", "g", "d", "qi", "ry", "e", "ox", "Q", "aq", "o", "u", "w", "qq", "qs", "qu"], "cost": ["z", "add", "min", "max", "sum", "skip", "loss", "CO", " costs", "oss", "charge", "dev", "score", "cons", "close", "cf", "Cost", "con", "step", "k", "spread", "opt", "co", "cal", "wage", "scale", "lc", "depth", " Cost", "risk", "mem", "cos", "goal", "alpha", "cp", "end", "total", "var", "nz", "weight", "mean", "rank", "loc", "best", "tax", "stop", "head", "count"], "x": ["z", "f", "pe", "yn", "m", "X", "a", "xy", "l", "ix", "xs", "xa", "xx", "r", "k", "ch", "v", "xt", "dx", "c", "h", "ex", "fx", "rx", "xc", "e", "ox", "xi", "w", "u", "px", "tx"], "y": ["z", "Y", "ym", "ey", "yl", "ay", "m", "a", "xy", "l", "py", "t", "yer", "iy", "yy", "r", "ty", "yt", "v", "c", "ys", "b", "ies", "ny", "ry", "e", "uy", "ye", "o", "vy", "cy", "u", "ly"]}}
{"code": "n=int(input())\\nres=0\\nfor _ in range(n):\\n  a,b=map(int,input().split())\\n  res+=(abs(a-b)+1)\\nprint(res)", "target": "720", "substitutes": {"n": ["f", "nn", "nw", "nia", "nets", "m", "names", "l", "nt", "t", "number", "nr", "N", "i", "len", "ns", "mn", "r", "na", "c", "ng", "sn", "q", "ln", "g", "cn", "nb", "num", "d", "p", "j", "ne", "net", "gn", "np", "nan", "nc", "no", "nl"], "res": ["ress", "rand", "ps", "rest", "pro", "arr", "out", "obj", "med", "max", "cond", "reset", "red", "ret", "nt", "cons", "result", "ms", "os", "pas", "r", "resp", "gr", "cal", "prof", "resh", "mod", "ex", "sim", "mont", "re", "mem", "crit", "comp", "clus", "act", "zero", "quant", "stock", "vol", "results", "net", "fac", "RES", "rem", "pres", "rel", "Res", "sat", "dr", "req", "resolution", "sol"], "_": [" i", "ix", "i", " j", "__", " __", "j", " k", " x", "I", "___", "x"], "a": ["ba", "am", "ae", "sta", "ga", "au", "ed", "ax", "ca", "A", "la", "at", "ea", "tta", "va", "da", "alpha", "ao", "act", "oa", "anta", "aka", "sa", "aa", "aj", "ac", "ma", "ia", "ab", "eas", "aaa", "ar", "an", "aff"], "b": ["z", "rb", "ib", "mb", "be", "l", "bc", "bp", "bg", "cb", "fb", "r", "bh", "db", "v", "c", "bas", "g", "nb", "d", "bi", "br", "j", "bin", "sb", "bis", "ob", "bs", "u", "B", "ab", "bb", "bar", "base", "eb"]}}
{"code": "import bisect\\n\\nMOD=10**9+7\\nN=int(input())\\n\\nclist=[]\\nfor i in range(N):\\n  c=int(input())\\n  clist.append(c)  \\n#print(clist)\\n\\nc2list=clist[:1]\\nfor i in range(1,N):\\n  if clist[i]!=c2list[-1]:\\n    c2list.append(clist[i])\\n#print(c2list)\\nN2=len(c2list)\\n\\ncldic={}\\ndp=[0]*(N2-1)+[1]\\nfor i in range(N2):\\n  c=c2list[i]\\n  dp[i]=dp[i-1]\\n  if c in cldic:\\n    dp[i]+=dp[cldic[c]]      \\n  cldic[c]=i\\n    \\n#print(dp)\\nprint(dp[-1]%MOD)", "target": "708", "substitutes": {"MOD": [" CE", " Max", " Class", " NOTE", " mod", "M", "NR", "CN", " MAX", " CL", " Module", " PROT", "mod", " EXP", " CN", " Mod", " LOG", " M", " X", " MIN", "NM", " K", "Mod", " Length", " V", " E", " S", " Mode"], "N": ["Num", "K", "C", "X", "F", "R", "Ni", "CNN", "G", "NB", "NI", "M", "NV", "NR", "CN", "A", "MN", "S", "ND", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NN"], "clist": ["sclists", " clth", "clelist", "sclist", " clister", "CLize", "sclister", "clists", "sclize", "plth", "contize", "sclth", "CLelist", "plister", "plist", "clister", "clth", "contelist", "cllist", "contist", "sclelist", "contlist", "CLlist", "clize", "CList", " clists", "plists", "scllist"], "i": ["f", "y", "ix", "by", "ci", "r", "k", " j", "q", "ind", "id", " ii", "p", "j", "it", "n", "I", "iter", "x", "um", "im"], "c": ["f", "sc", "conv", "cod", "C", "cat", "cr", "cs", "bc", "cf", "con", "ci", "rc", "cb", "ca", "co", "b", "lc", "gc", "cc", "ct", "cl", "ce", "char", "can", "cp", "com", "cd", "int", "dc", "ac", "n", "cu", "cm", "category"]}}
{"code": "def main():\\n  n,m,k = map(int, input().split())\\n  f = [1]\\n  p = 998244353\\n  for i in range(1, n):\\n    f.append(f[-1] * i % p)\\n\\n  ans = 0\\n  def nCk(n,k):\\n    return f[n] * pow(f[n-k], p-2, p) * pow(f[k], p-2, p) % p\\n\\n  for i in range(k+1):\\n    ans += (m * nCk(n-1, i) * pow(m-1, n-1-i, p)) % p\\n  print(ans % p)\\n\\nif __name__ == '__main__':\\n  main()", "target": "375", "substitutes": {"n": ["nn", "names", "l", "y", "nt", "t", "all", "name", "s", "N", "key", "ns", "r", "nm", "mn", "un", "v", "na", "c", "ren", "ln", "sn", "h", "b", "q", "g", "an", "ng", "cn", "nu", "nb", "id", "num", "d", "size", "dn", "j", "pi", "ne", "local", "net", "gn", "np", "nan", "nc", "o", " N", "w", "no", "x", "on", "ll", "new"], "m": ["mu", "mc", "tm", "a", "l", "y", "t", "s", "ms", "M", "mn", "r", "v", "c", "bm", "mk", "pm", "h", "q", "b", "g", "mp", "num", "d", "j", "pi", "mt", "e", "o", "mr", "w", "u", "mm", "mi"], "k": ["dk", "z", "K", "kr", "kh", "uk", "ka", "y", "t", "ck", "kl", "s", "ok", "kk", "r", "ke", "key", "kan", "v", "kid", "c", "mk", "ki", "q", "b", "g", "th", "ak", "unk", "kn", "wk", "ik", "num", "km", "j", "kj", "ek", "e", "kw", "o", "u", "sk", "ko", "ku", "ks"], "f": ["fl", "fa", "fs", "F", "a", "df", "fg", "fe", "l", "t", "cf", "af", "fr", "fab", "r", "fb", "v", "ft", "c", "h", "fo", "b", "fp", "rf", "fed", "q", "g", "fx", "fi", "bf", "e", "uf", "fac", "tf", "fc", "o", "w", "u", "lf", "ff", "xf", "x", "fm", "fd"], "p": ["op", "ps", "pe", "z", "per", "pt", "pr", "ap", "php", "a", "l", "y", "t", "pkg", "bp", "pos", "pb", "s", "pp", "ip", "r", "jp", "tp", "v", "sp", "perm", "pa", "c", "q", "h", "fp", "g", "b", "pre", "pd", "d", "power", "j", "pi", "cp", "ping", "lp", "port", "P", "e", "int", "np", "pc", "o", "u", "pid", "x", "pn", "pro", "pg"], "i": ["ini", "\u00ed", "l", "y", "t", "ti", "ip", "ci", "gi", "v", "ij", "c", "ki", "phi", "id", "di", "ik", "bi", "j", "pi", "fi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "u", "pid", "x", "iti", "mi", "iu", "im"], "ans": ["ens", "ps", "stats", "cas", "ls", "mas", "oss", "ran", "rs", "amps", "xs", "s", "ms", "ins", "anas", "aus", "ns", "outs", "ons", "ann", "ars", "ends", "aps", "aos", "arts", "ents", "ians", "rans", "eds", "posts", " means", "ANS", "lets", "uns", "ai", "offs", "gn", "nan", "ams", "ras", "ats", "us", "als", "ros", "vals", "anks", "an", "ks", "ants", "lan"]}}
{"code": "S=str(input())\\nans=S.replace(\",\" , \" \")\\nprint(ans)", "target": "588", "substitutes": {"S": ["SER", "BS", "SI", "Si", "C", "H", "SS", "X", "R", "SK", "G", "SB", "SM", "s", "N", "M", "A", "Sing", "ST", "SN", "SAM", "SU", "SO", "L", "P", "TS", "SH", "T", "SF", "Z", "V", "I", "B", "CS", "GS", "SA"], "ans": ["ens", "wan", "bean", "annot", "aned", "AN", "ran", "ean", "anc", "pan", "cons", "amps", "os", "ms", "ins", "aus", "ons", "mn", "anas", "ann", "ns", "ars", "aos", "beans", "es", "na", "cn", "san", "ANS", "can", "ai", "nan", "sk", "ats", "ana", "an", "ants", "scan", "lan"]}}
{"code": "import re\\nimport sys\\nimport math\\nimport itertools\\nimport bisect\\nfrom copy import copy\\nfrom collections import deque,Counter\\nfrom decimal import Decimal\\nimport functools\\ndef v(): return input()\\ndef k(): return int(input())\\ndef S(): return input().split()\\ndef I(): return map(int,input().split())\\ndef X(): return list(input())\\ndef L(): return list(input().split())\\ndef l(): return list(map(int,input().split()))\\ndef lcm(a,b): return a*b//math.gcd(a,b)\\nsys.setrecursionlimit(10 ** 6)\\nmod = 10**9+7\\ncnt = 0\\nans = 0\\ninf = float(\"inf\")\\nal = \"abcdefghijklmnopqrstuvwxyz\"\\nAL = al.upper()\\n\\nH, W = I()\\n\\npad_s = ['.'*(W+2)]\\nfor h in range(H):\\n  pad_s.append('.' + input() + '.')\\npad_s.append('.'*(W+2))\\n\\nfor i,ss in enumerate(pad_s):\\n  for j,s in enumerate(ss):\\n    if s == '#'\\\\n      and pad_s[i][j+1] == '.'\\\\n      and pad_s[i][j-1] == '.'\\\\n      and pad_s[i+1][j] == '.'\\\\n      and pad_s[i-1][j] == '.':\\n      print('No')\\n      exit()\\n\\nprint('Yes')\\n", "target": "559", "substitutes": {"a": ["f", "ba", "m", "ae", "l", "t", "ga", "au", "A", "r", "ca", "la", "c", "ea", "an", "g", "p", "aaaa", "alpha", "app", "e", "sa", "aq", "aa", "aj", "ac", "o", "ma", "u", " A", "ia", "ab", "eas", "aaa", "x", "ar", "am"], "b": ["z", "f", "rb", "ba", "m", "be", "l", "y", "t", "bc", "bg", "cb", "r", "fb", "v", "c", "g", "nb", "d", "p", "bi", "br", "bf", "e", "sb", "bu", "n", "ob", "bs", "u", "B", "ab", "bb"], "mod": ["rand", "sub", "add", "min", "base", "sign", "dig", "ran", "inv", "floor", "step", "adj", "ver", "div", "circ", "scale", "sim", "mult", "round", "Mod", "fac", "MOD", "neg", "log", "dec", "set", "grow", "fun"], "cnt": ["rcpt", "cant", "rcnt", "acnt", "rctr", "Cnt", "Ctr", "ctr", "Cant", "Cpt", "actr", "acpt", "acant", "rcant", "cpt"], "ans": ["times", "std", "ins", "den", "ms", "len", "ns", "ann", " orphans", "un", "miss", "never", "errors", "na", " errors", "mem", "warn", "eps", "uns", "ai", "cmp", " sum", "nz", "nan", "mean", "no", "an", "fun"], "inf": ["f", "sup", "mind", "pred", "std", "df", "inv", "info", "ins", "pp", "lim", "Inf", "fo", "rf", "phi", "ef", "ct", "ind", "exp", "frac", "pi", "ipl", "inc", "it", "fin", "conf", "log"], "al": ["ag", "phal", "el", "ap", "Al", "att", "MAL", "all", "ral", "mal", "il", "tal", "alf", "cal", "ul", "alg", "pal", "bal", "dal", "atal", "isal", "hal", "aler", "alpha", "aled", "alph", "alt", "IL", "ale", "alid", "ell", "wal", "ab", "sal", "als", "ali", "ar", "ial"], "AL": ["AA", "VAL", "AC", "Al", "UL", "MAL", "HT", "SL", "LE", "OL", "EN", "CN", "IND", "US", "AT", "STR", "CL", "alph", "ATT", "AD", "IL", "ER", "MS", "AS", "BL", "als", "LL", "IN"], "H": ["HK", "Y", "K", "HO", "He", "F", "HF", "HT", "R", "G", "HI", "N", "M", "HB", "A", "HL", "HD", "HH", "TH", "MH", "GH", "HC", "HA", "Hi", "HE", "DH", "HR", "P", "SH", "T", "V", "I", "OH", "HTTP", "HS", "NH"], "W": ["Y", "K", "C", "Width", "X", "WS", "R", "WT", "N", "M", "WR", "Weight", "WE", "WAR", "S", "SW", "Word", "WP", "WC", "WI", "L", "DW", "WA", "Win", "VW", "P", "Q", "HTML", "CW", "T", "J", "Z", "V", "Writer", "w", "BW", "B", "I", "Window", "We", "EW", "WH", "Wh"], "pad_s": ["padLLn", "pad2r", " pad_b", "fix_names", "pay_e", "pad_u", "pad_r", "pad2s", "pay_u", "padLLsb", " pad2s", "pad_S", "pad64d", " pad_d", " pad_tes", "pad___s", "pay_s", "pad_n", "fix_space", "pad2n", " pad_r", "padptsq", "pad64details", " pad2r", "pad64s", " pad_i", "pad5ims", "pad_e", " pad_ns", "pad_ims", " pad_ims", "pad5d", "padreqspace", "pad___i", "pad5s", "pad_d", "padLLs", "pad64S", "pad___d", " pad_details", " pad2b", "pad_sb", "padreqn", "pad_details", "pad2b", "pad_sq", " pad_sb", "padreqnames", "pad_i", "pad_tes", "pad64n", "pad5tes", "fix_s", "fix_n", "pad64sb", "padLLS", " pad_sq", "pad64ns", "padpts", "pad_b", " pad_S", "pay_S", " pad2n", "pad_space", "pad_names", " pad_n", "pad_ns", "padreqs"], "h": ["ph", "he", "hn", "hex", "hm", "ha", "y", "bh", "ch", "hs", "hi", "hd", "ih", "p", "ht", "oh", "hw", "hl", "hr", "hh", "w", "hu", "hash", "his", "hp"], "i": ["ini", "ei", "ri", "zi", "ir", "y", "this", "ix", "ti", "ip", "ci", "\u0438", "at", "gi", "ij", "hi", "index", "ki", "ami", "ind", "id", "di", "bi", "pi", "ai", "it", "int", "ims", "ii", "xi", "si", "ic", "li", "I", "ia", "x", "ui", "mi", "iu"], "ss": ["ps", "ress", "sv", "ls", "sc", "SS", "oss", "sis", "cs", "rs", "se", "su", "ti", "ms", "sy", "os", "ns", "sw", "sd", "sl", "es", "sn", "ass", "css", "rss", "ess", "ds", "ness", "\u00df", "ses", "si", "sq", "iss", "us", "tis", "ts", "ser", "sol"], "j": ["z", "str", "out", "obj", "jl", "pt", "ja", "y", "t", "ix", "fr", "jp", "err", "ji", "k", "at", "v", "json", "ij", "c", "g", "ind", "er", "di", "next", "p", "bi", "br", "oj", "kj", "it", "jj", "jump", "tr", "aj", "J", "n", "o", "li", "dj", "uj", "bot", "x", "im", "bj", "js", "jc"], "s": ["ps", "ws", "sv", "ls", "sc", "cs", "gs", "xs", "ins", "ars", "os", "ms", "ns", "sp", "sd", "sl", "es", "sn", "ys", "ies", "S", "ments", "p", "ds", "its", "ims", "ses", "si", "n", "bs", "sq", "ats", "als", "sh", "ts", "js"]}}
{"code": "N,K=map(int,input().split())\\nA=[0]+list(map(int,input().split()))+[0]\\np=50\\n\\nif K<=p:    \\n    for i in range(K):\\n        B=[0]+[0]*N+[0]\\n        for j in range(1,N+1):\\n            left  = max(0,j-A[j])\\n            right = min(N+1,j+A[j]+1)\\n            B[left]  += 1\\n            B[right] -= 1\\n        A[0]=B[0]\\n        for k in range(1,N+1):\\n            A[k]=A[k-1]+B[k]\\nelse:\\n    A=[N]*(N+2)\\nprint(*A[1:N+1])", "target": "377", "substitutes": {"N": ["Y", "Name", "Num", "NE", "H", "C", "NOR", "X", "AN", "F", "Sn", "R", "Ni", "CNN", "W", "G", "NI", "NB", "NG", "M", "NV", "NR", "CN", "MN", "Na", "NP", "NA", "S", "E", "ND", "Ne", "O", "NT", "D", "SN", "NS", "FN", "Node", "NAT", "L", "TN", "Right", "P", "Q", "NPR", "T", "GN", "J", "n", "Z", "V", "I", "PN", "Ns", "NUM", "NO", "NN"], "K": ["Y", "KA", "KN", "PK", "H", "C", "X", "F", "KK", "R", "SK", "G", "W", "M", "KR", "KI", "KS", "S", "E", "NK", "D", "KING", "UK", "L", "TN", "P", "Q", "KE", "T", "J", "Z", "V", "I", "KC"], "A": ["Y", "App", "AY", "AR", "AA", "Ar", "H", "X", "AC", "API", "a", "R", "IA", "G", "AV", "ACC", "M", "BA", "Args", "CA", "AL", "LA", "UA", "What", "ABC", "Abs", "EA", "RAM", "JA", "NA", "S", "E", "As", "D", "AU", "AT", "Array", "HA", "All", "AF", "L", "Address", "GA", "An", "At", "ICA", "mA", "P", "MA", "Java", "AM", "This", "AH", "SA", "J", "AB", "AP", "The", "One", "I", "Alpha", "Adam", "Answer", "ACT", "AST", "AE"], "p": ["f", "ps", "max", "per", "m", "a", "par", "l", "t", " P", "pp", "r", "jp", "tp", "sp", "pa", "c", "q", "b", "h", "g", "start", "d", "power", "pi", "cp", "lp", "P", "e", "np", "n", "o", "w", "wp"], "i": ["z", "f", "m", "a", "jit", "y", "ix", "ip", "r", "jp", "ji", "ij", "q", "ind", "id", " ii", "er", "ik", "d", " J", "it", "J", "I", "li", "ia", "x", "im"], "B": ["BE", "BB", "BS", "VB", "DB", "EB", "Two", "RB", "R", "OB", "SB", "NB", "WB", "BA", "IB", "BC", "BI", "Both", "Bar", "Body", "b", "GB", "Builder", "L", "TB", "LB", "FB", "PB", "T", "J", "AB", "V", "BT", "BL", "CB", "Bern", "BM", "BY", "BF", "BR", "Bs", "Base"], "j": ["z", "obj", "jl", "m", "ja", "l", "y", "t", "jp", "ji", "r", "v", "json", "ij", "job", "q", "b", "jac", "ijk", "kj", "jj", "jump", "tr", "aj", "J", "n", "uj", "dj", "u", "x", "bj", "js", "jc"], "left": ["min", "offset", "el", "le", "top", "both", "l", "all", "back", "r", "Left", "before", "open", "lock", "lt", "start", "lo", "L", "low", "bottom", "last", "inner", "half", "n", "loc", "li", "nl", "x", "lower", "shift"], "right": ["rest", "max", "top", "m", "third", "R", "rh", "all", "back", "r", "upper", "before", "root", "over", "length", "g", "pair", "th", "re", "join", "Right", "end", "ro", "last", "cross", "current", "inner", "tr", "short", "then", "n", "art", "w", "rem", "reverse", "correct", " Right", "x", "rt", "after"], "k": ["z", "dk", "m", "kr", "kind", "kt", "uk", "kh", "ka", "y", "t", "ck", "kl", "ikk", "ok", "key", "kk", "ke", "r", "kid", "kan", "v", "kar", "mk", "q", "g", "th", "ak", "unk", "ijk", "wk", "ik", "km", "kj", "ek", "kw", "it", "tk", "n", "u", "sk", "ko", "x", "ku"]}}
{"code": "S = input()\\n\\nA = []\\n\\nok = 1\\nans = 0\\ncnt = 0\\nfor i in range(len(S)):\\n    if ok == 1 and i < len(S)-1 and S[i] == 'B' and S[i+1] == 'C':\\n        A.append('B')\\n        ans += cnt\\n    elif S[i] == 'A':\\n        A.append('A')\\n        cnt += 1\\n        ok = 1\\n    elif ok == 1 and i > 0 and S[i-1] == 'B' and S[i] == 'C':\\n        continue\\n    else:\\n        A = []\\n        cnt = 0\\n        ok = 0\\n\\nprint(ans)", "target": "305", "substitutes": {"S": ["Y", "Sample", "BS", "Bytes", "String", "SI", "Sl", "H", "C", "Si", "SS", "X", "F", "WS", "R", "SL", "SK", "G", "JS", "SB", "PS", "SM", "s", "OS", "N", "M", "Sing", "RS", "Save", "ST", "Windows", "E", "O", "DS", "Series", "D", "Source", "NS", "SU", "SO", "L", "SQL", "P", "TS", "ES", "Q", "SH", "You", "T", "AS", "SA", "SE", "Z", "VS", "V", "SF", "I", "B", "CS", "GS", "Set"], "A": ["App", "AR", "AA", "ALL", "Ar", "H", "C", "AC", "AN", "a", "R", "G", "W", "ACC", "N", "M", "ASC", "What", "CA", "EA", "ACE", "As", "AU", "All", "AT", "Array", "D", "AF", "WA", "Address", "GA", "An", "At", "P", "AM", "This", "T", "AE", "AS", "The", "AB", "AP", "V", "Answer", "I", "B", "One", "SA"], "ok": ["good", "ens", "ps", "op", "ack", "checks", "out", "oc", "sc", "off", "kind", "anc", "cs", "conn", "nt", "you", "ck", "og", "pos", "ix", "ms", "os", "sec", "rc", "Ok", "err", "syn", "k", "ax", "oks", "check", "scan", "fail", "ins", "ick", "ks", "ot", "ops", "mot", "OK", "ak", "yes", "ind", "id", "typ", "ik", "ask", "j", "pl", "deg", "valid", "it", "od", "ob", "loc", "log", "no", "set", "ko", "req", "boot", "ku", "ready", "md"], "ans": ["ens", "stats", "lines", "anon", "ls", "names", "AN", "cs", "rs", "cons", "xs", "pos", "lang", "s", "os", "ms", "ars", "ons", "ns", "aus", " orphans", "ann", "ins", "oks", "aos", "ents", "es", "angs", "rans", "ands", "eds", "ids", "vs", "ANS", "ots", "ols", "ds", "An", "uns", "n", "ads", "ats", "Ns", "Ant", "anks", "an", "ks", "ants", "ows"], "cnt": ["icnd", "acount", "pnd", "mNT", "pns", " cmd", "mnt", " cnd", "pcount", "Cnd", "acnt", "cnc", "mccount", "mcnt", "mcnd", "CNT", "icnt", "acNT", "mnd", "icmd", "cNT", "nNT", "ccount", " ccount", "Count", "Cnt", "acnd", " cns", "cmd", "nnd", "mnc", "icount", "icNT", " cNT", "acmd", " curs", "icurs", "nnt", "mcns", "nnc", "curs", " cnc", "acurs", "cnd", "pnt", "cns", "count"], "i": ["z", "io", "ini", "ei", "ri", "zi", "m", "uri", "a", "y", "you", "name", "ix", "t", "ti", "info", "s", "ip", "ci", "key", "\u0438", "ji", "jp", "gi", "v", "ij", "c", "ori", "index", "oi", "ki", "q", "b", "phi", "ami", "ind", "id", "di", "ik", "bi", "multi", "exp", "j", "pi", "qi", "ai", "it", "int", "ii", "batch", "si", "iri", "ic", "xi", "li", "I", "ia", "me", "x", "ui", "mi", "iu", "im", "list", "ski"]}}
{"code": "def g(s):\\n    a, b, c = list(map(int, s.split()))\\n    for i in range(a, b+1):\\n        if c % i == 0:\\n            yield 1\\n\\nprint(sum(g(input())))", "target": "630", "substitutes": {"s": ["f", "sts", "str", "sv", "ls", "l", "se", "t", "say", "r", "single", "input", "v", " self", "strings", "h", "q", "g", "S", "string", " str", "p", "less", "ss", "e", "sb", "n", "o", "sq", "w", "space", "ts"], "a": ["f", "ba", "am", "ta", "ae", "au", "ax", "A", "r", "ca", "at", "la", "pa", "na", "ea", "area", "d", "da", "app", "act", "oa", "aka", "e", "ai", "sa", "aa", "aj", "al", "ac", "o", "ma", "ia", "ab", "aaa", "ach", "an"], "b": ["f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "t", "bc", "cb", "fb", "v", "db", "g", "nb", "d", "bi", "j", "bf", "e", "sb", "bo", "n", "ob", "bs", "B", "ab", "bb", "body", "eb"], "c": ["z", "f", "m", "C", "cs", "l", "t", "bc", "cf", "con", "cb", "cin", "k", "rc", "ca", "v", "co", "city", "lc", "g", "gc", "cc", "ct", "ce", "d", "cos", "p", "ec", "e", "dc", "fc", "n", "tc", "nc", "ic", "w", "cm", "count"], "i": ["f", "ini", "ri", "zi", "m", "y", "ti", "ci", "gi", "v", " j", "ori", "oi", "ki", "q", "g", "yi", "ind", "id", "di", "ik", "d", "p", "bi", "j", "pi", "isi", "ai", "ii", "xi", "si", "ic", "o", "li", "I", "u", "x", "ui", "mi", "im"]}}
{"code": "N, M = map(int, input().split())\\nA = [0]*N\\nfor _ in range(M):\\n    x, y = map(int, input().split())\\n    x, y = x-1, y-1\\n    A[x]+=1\\n    A[y]+=1\\nfor a in A:\\n    if a%2:\\n        print(\"NO\")\\n        exit()\\nprint(\"YES\")", "target": "486", "substitutes": {"N": ["Y", "K", "NE", "H", "C", "X", "F", "R", "G", "Ni", "W", "NR", "U", "NA", "S", "E", "ND", "NT", "D", "NS", "L", "NM", "P", "T", "J", "n", "V", "I", "B", "NC", "NN"], "M": ["Y", "K", "H", "m", "C", "X", "MP", "F", "R", "G", "MT", "MR", "CM", "MN", "MC", "U", "MM", "S", "MH", "D", "L", "NM", "P", "Q", "MS", "T", "MAN", "DM", "J", "V", "I", "B", "MU"], "A": ["Y", "AY", "AA", "H", "C", "Everyone", "X", "AC", "R", "IA", "G", "W", "BA", "CA", "LA", "AL", "ACE", "Bar", "S", "As", "All", "HA", "AT", "Array", "D", "Ah", "AF", "WA", "L", "GA", "An", "ICA", "ATA", "P", "Q", "AM", "You", "And", "T", "SA", "The", "AB", "AP", "V", "One", "Alpha", "B", "I", "AE"], "_": ["ay", "my", "ix", "ow", "i", " j", " __", " each", " p", "ame", "ate", "val", " e", "j", " the", " it"], "x": ["z", "f", "yx", "el", "xp", "m", "X", "ux", "xy", "l", "name", "ix", "xs", "ax", "i", "xx", "at", "v", "xml", "xt", "dx", "wx", "g", "ex", "ct", "width", "fx", "path", "rx", "xxx", "xc", "lon", "ox", "xe", "xxxx", "xi", "lex", "n", "w", "px", "left", "lat", "xf", "xd", "tx"], "y": ["Y", "z", "ym", "ey", "yo", "yl", "yn", "ay", "m", "my", "xy", "py", "t", "yer", "iy", "oy", "i", "sy", "yy", "ty", "yt", "v", "c", "gy", "ys", "b", "ot", "ies", "iley", "yi", "ny", "hey", "j", "col", "lon", "ya", "ye", "axy", "yr", "n", "cy", "o", "kit", "ly"], "a": ["z", "apa", "qa", "ae", "ta", "ha", "cha", "sta", "ga", "xa", "i", "ca", "la", "pa", "na", "ea", "aqu", "b", "area", "ora", "va", " ya", "ao", "oa", "\u00e4", "aka", "zero", "sa", "ai", "ya", "ata", "aq", "aa", "sha", "ma", "an"]}}
{"code": "n = int(input())\\nl = [0]*101\\ni = 2\\nfor i in range(2,n+1):\\n    j = 2\\n    while i >= 2:\\n        while i % j == 0:\\n            i = i//j\\n            l[j] += 1\\n        j += 1\\n\\nans = sum(x >= 74 for x in l)\\n\\na = sum(x >= 2 for x in l)\\nb = sum(x >= 24 for x in l)\\nans += b*(a-1)\\n\\na = sum(x >= 4 for x in l)\\nb = sum(x >= 14 for x in l)\\nans += b*(a-1)\\n\\na = sum(x >= 2 for x in l)\\nb = sum(x >= 4 for x in l)\\nans += b*(b-1)*(a-2)//2\\n\\nprint(ans)", "target": "145", "substitutes": {"n": ["z", "nn", "m", "ni", "nt", "t", "s", "N", "len", "ns", "mn", "k", "v", "na", "c", "sn", "q", "h", "cn", "nu", "nb", "num", "p", "ne", "np", "o", "w", "nl"], "l": ["z", "f", "lit", "ol", "ls", "let", "el", "jl", "le", "m", "line", "t", "lin", "lis", " L", "kl", "s", "len", "r", "il", "la", "v", "lock", "sl", "c", "lu", "long", "ln", "h", "lay", "like", "g", "lc", "ml", "dl", "p", "L", "lp", "pl", "e", "large", "al", "o", "log", "li", "left", "ql", "nl", "list", "rl", "ll", "ly"], "i": ["z", "f", "io", "zi", "m", " bi", "y", "t", "ix", "ti", "ip", "ci", "ji", "ati", "v", "gi", "ij", "hi", "index", "ki", "phi", "id", " ii", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "I", "li", "ia", "ui", "mi", "iu", "iti"], "j": ["z", "f", "out", "jl", "pr", "m", "ja", "y", "t", "jp", "k", "ji", "r", "ch", "v", "json", "ij", "state", "index", "q", "g", "ind", "go", "d", "next", "p", "bi", "br", "kj", "new", "ai", "_", "it", "jj", "jump", "aj", "J", "o", "uj", "dj", "u", "li", "js", "jc"], "ans": ["ens", "lines", "ls", "names", "mas", "ins", "aned", "AN", "oss", "amps", "xs", "iann", "s", "os", "ms", "xa", "ns", "ons", "anas", "ann", "ars", "aus", "aps", "acs", "aces", " sans", "aos", "es", "na", "ents", "angs", "ians", "ums", "ays", "ands", "eds", "posts", "unes", "ations", " means", "ANS", "anus", "leans", "uns", "ai", "sa", "offs", "anes", "ams", " spans", "ads", "ates", "ats", " s", "ab", "ions", "ana", "an", "ks", "ants", " an"], "x": ["z", "xes", "xp", "X", "php", "hex", "ux", "xy", "y", "ext", "tt", "ix", "xs", "xx", "ax", "ci", "k", "xa", "plex", "ctor", "news", "v", "xml", "check", "xt", "json", "wx", "c", "dx", "history", "ho", "h", "post", "rox", "rit", "ex", "ct", "fx", "work", "id", "ross", "ctx", "\u00e7", "p", "exp", "rx", "xxx", "xc", "e", "ox", "xe", "xxxx", "xi", "lex", "o", "ic", "px", "w", "lat", "dr", "xf", "on", "data", "xd", "tx", "inx"], "a": ["z", "f", "ba", "apa", "el", "fa", "ap", "ta", "ae", "all", "acc", "name", "sta", "ga", "au", "s", "xa", "ca", "A", "at", "la", "pa", "wa", "c", "ea", "an", "era", "g", "area", "alpha", "da", "ao", "app", "oa", "e", "sa", "ai", "aa", "aj", "al", "ac", "o", "ma", "ia", "ab", "aaa", "ar", "am"], "b": ["z", "f", "rb", "ba", "ib", "erb", "obj", "m", "mb", "bl", "be", "y", "t", "bc", "back", "pb", "s", "xb", "cb", "fb", "r", "db", "v", "c", "h", "g", "wb", "nb", "lib", "d", "p", "bi", "br", "amb", "e", "sb", "it", "gb", "bo", "beta", "bis", "abs", "ob", "o", "bs", "u", "B", "ab", "aaa", "bb", "bar", "base", "eb"]}}
{"code": "s= input()\\nk = sorted(s)\\nS = ''\\nfor i in k:\\n  S += i\\nif S == 'abc':\\n    print('Yes')\\nelse:\\n    print('No')", "target": "777", "substitutes": {"s": ["z", "f", "ps", "str", "m", "a", "spec", "l", "y", "t", "gs", "ins", "r", "input", "v", "sl", "c", "h", "q", "b", "g", "d", "p", "ss", "j", "e", "sa", "n", "o", "w", "x", "ts"], "k": ["K", "m", "kr", "kt", "kh", "ka", "t", "ck", "ikk", "ok", "kk", "key", "ke", "ch", "v", "ket", "mk", "ki", "q", "g", "ak", "kn", "ijk", "ik", "p", "kin", "km", "j", " K", "kj", "ek", "kw", "n", "keys", "o", "w", "sk", "x", "ks"], "S": ["Y", "K", "SI", "Si", "C", "H", "X", "SS", "F", "R", "SK", "G", "W", "N", "M", "A", "E", "O", "D", "SU", "Is", "L", "Sav", "P", "Q", "T", "SA", "J", "Z", "V", "I", "B", "CS"], "i": ["z", "io", "ini", "ei", "zi", "\u00ed", "m", " vi", "l", "y", "name", "ti", " li", " Li", "gi", "gu", "ki", " ki", "h", "yi", "di", " Xi", "p", "j", "pi", "fi", " I", "ai", "ii", "si", "n", "o", "I", "li", " di"]}}
{"code": "a,b = map(int,input().split())\\nc = a\\n\\nfor i in range(b):\\n    if c % b == 0:\\n        break\\n    c += a\\n\\nprint(c)", "target": "209", "substitutes": {"a": ["z", "f", "ba", "m", "am", "ta", "ae", "l", "y", "t", "au", "s", "xa", "A", "r", "ca", "k", "at", "ea", "h", "g", "air", "aux", "area", "d", "p", "alpha", "e", "sa", "ai", "aa", "n", "ac", "o", "ma", "w", "u", "ia", "ab", "aaa", "x", "ar", "ach", "an"], "b": ["f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "t", "bc", "bp", "cb", "fb", "r", "db", "v", "length", "bound", "h", "g", "wb", "nb", "d", "p", "bi", "bf", "e", "sb", "bis", "n", "bs", "B", "ab", " B", "bb", "base", "eb"], "c": ["scroll", "f", "m", "C", "cr", "chu", "cs", "l", "t", "bc", "to", "case", "con", "ci", "r", "cb", "ca", "k", "rc", "v", "ctrl", "co", "arc", "lc", "gc", "ct", "cc", "ce", "d", "crit", "p", "cos", "cur", "cp", "xc", "e", "cd", "uc", "cache", "ac", "nc", "n", "cum", "u", "w", "cu", "cm", "count"], "i": ["ix", "ci", "r", "k", " j", "__", "code", "ind", "id", " ii", "\u00e7", "p", "j", "it", " k", "n", "ic", "I", "iter", "x"]}}
{"code": "from itertools import combinations\\nn,m,x = map(int, input().split())\\nca = [list(map(int, input().split())) for _ in range(n)]\\n\\nans = float(\"inf\")\\nfor i in range(1,n+1):\\n  for j in combinations(ca,i):\\n    l = [0]*(m+1)\\n    for k in j:\\n      for i2 in range(m+1):\\n        l[i2] += k[i2]\\n    if all(l[num] >= x for num in range(1,m+1)):\\n      ans = min(ans, l[0])\\nif ans == float(\"inf\"): print(-1)\\nelse: print(ans)", "target": "112", "substitutes": {"n": ["nn", "a", "y", "t", "nt", "number", "name", "nr", "s", "N", "ns", "mn", "r", "nm", "v", "na", "c", "sn", "an", "h", "g", "cn", "nu", "nb", "d", "size", "p", "ne", "net", "gn", "np", "nan", "nc", "o", "w", "nl"], "m": ["gm", "mc", "tm", "a", "y", "t", "name", "ms", "M", "mn", "r", "nm", "v", "mis", "c", "h", "b", "g", "dm", "d", "mem", "p", "mun", "man", "mt", "om", "mo", "o", "ma", "w", "mm", "mi", "cm"], "x": ["z", "f", "max", "xes", "xp", "X", "a", "ux", "xy", "y", "t", "ix", "xs", "xa", "ax", "xx", "v", "xt", "dx", "h", "q", "mx", "ex", "p", "rx", "xc", "e", "ox", "xe", "xi", "w", "xf", "tx"], "ca": ["ba", "cas", "mc", "fa", "ta", "ae", "cr", " Ca", "a", "ka", "ja", "cs", "ha", "ga", "ax", "ci", "CA", "co", "pa", "na", "c", "wa", "an", "cn", "aco", "can", "ica", "da", "ada", "Ca", "sa", "ai", "cd", "ma", "cu", "ia", "cm"], "_": ["Num", " un", " int", "name", "ix", "il", "un", " u", " am", " mult", " __", " each", " p", " mon", " number", " val", "ox", " the", "I", " other", "um", " index"], "ans": ["ens", "ps", "nn", "sv", "ls", "nets", "AN", "ones", "oss", "rates", "ran", "pan", "rs", "amps", "xs", "gs", "s", "ins", "anas", "ms", "aus", "ns", "mn", "ons", "ann", "outs", "os", "aps", "arts", "ents", "es", "ians", "rans", "ands", "eds", "posts", "ies", "yes", " means", "vs", "ANS", "eps", "ds", "uns", "helps", "offs", "actions", "nan", "mean", "ates", "ats", "nl", "us", "ros", "vals", "an", "ks", "ants", "olds", "lan"], "i": ["ini", "y", "t", "ti", "ci", "v", "ij", "c", "index", "ki", "q", "b", "ind", "id", "ik", "p", "bi", "pi", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "mi", "iu"], "j": ["z", "kh", "ja", " dj", "key", "jp", "r", "ji", "ke", "v", "ch", "ij", "ki", "q", " ki", "b", "ot", "g", "ak", "ijk", " ii", "ik", " Xi", "p", "oj", "kj", "it", "jj", "J", "o", "uj", "dj", "ia", " Dj"], "l": ["z", "lit", "ol", "ls", "el", "le", "jl", "lv", "t", "lis", "kl", "s", "len", "r", "il", "la", "lb", "v", "ul", "sl", "c", "lt", "ln", "q", "b", "lc", "g", "tl", "lo", "ml", "p", "dl", "L", "lp", "lr", "o", "li", "nl", "list", "rl", "ll"], "k": ["z", "K", "kr", "kh", "ka", "t", "ck", "kl", "ok", "key", "kk", "jp", "ke", "kid", "v", "kar", "mk", "ki", "q", "g", "ak", "kn", "ijk", "wk", "ik", "p", "km", "kj", "ek", "kw", "tk", "o", "sk", "ko", "ku", "ks"], "i2": ["id0", " i3", "pi1", "j3", "pi3", " i5", "j2", "id1", "id3", "i0", "k2", "k3", "i3", "j0", "i5", "k0", "id2", "pi2", "pi5", "i1", "j5", " i1", "j1", "k1"], "num": ["f", "Num", "nn", "max", "nom", "out", "sum", "mon", "tim", "node", "all", "name", "number", "common", "nr", "result", "con", "dim", "final", "r", "nm", "un", "na", "index", "nu", "nb", "id", "typ", "p", "np", "mate", "uni", "u", "no", "NUM", "um", "pn", "unit", "new"]}}
{"code": "w, a, b = map(int, input().split())\\nprint(max(0, b - a - w, a - b - w))", "target": "547", "substitutes": {"w": ["z", "f", "nw", "ws", "iw", "win", "m", "wh", "l", "y", "t", "W", "widget", "wd", "wed", "s", "i", "r", "sw", "v", "wa", "c", "wx", "h", "q", "g", "wb", "d", "p", "window", "rw", "e", "wt", "ew", "n", "wal", "wp", "x", "wi", "width"], "a": ["f", "ba", "m", "ap", "l", "t", "au", "s", "xa", "i", "A", "r", "ca", "v", "wa", "c", "ea", "an", "g", "aux", "d", "va", "p", "da", "e", "sa", "aa", "al", "n", "ac", "o", "ma", " A", "u", "ab", "x", "ar", "am"], "b": ["z", "f", "rb", "ba", "m", "be", "l", "y", "t", "bc", "s", "i", "r", "fb", "v", "c", "h", "g", "wb", "nb", "d", "p", "bi", "j", "e", "n", "abs", "o", "bs", "u", "B", "ab", "x", "bb", "eb"]}}
{"code": "N = int(input())\\na,b = [], []\\nfor i in range(N):\\n  x,y = map(int, input().split())\\n  a.append(x-y)\\n  b.append(x+y)\\na.sort()\\nb.sort()\\nans = max(a[-1] - a[0], b[-1] - b[0])\\nprint(ans)", "target": "399", "substitutes": {"N": ["Num", "K", "C", "Sn", "Ni", "CNN", "NB", "NI", "M", "NR", "A", "MN", "Na", "Len", "NP", "NA", "Size", "Count", "S", "ND", "NT", "D", "SN", "NS", "NM", "L", "TN", "No", "P", "Q", "GN", "n", "Z", "V", "I", "B", "Ns", "NC", "NN", "NH"], "a": ["f", "ba", "obj", "el", "apa", "qa", "ae", "ta", "att", "l", "all", "sta", "ga", "au", "s", "A", "ca", "la", "at", "pa", "na", "es", "ea", "an", "era", "aux", "area", "alpha", "da", "ao", "oa", "act", "ahead", "sa", "ai", "aq", "aa", "al", "ac", "o", "ma", " A", "u", "ia", "ab", "eas", "aaa", "ar", "am", "aff"], "b": ["rb", "ba", "ib", "obj", "bl", "mb", "blue", "be", "l", "t", "bc", "bp", "pb", "by", "xb", "cb", "fb", "buffer", "db", "v", "g", "wb", "nb", "lib", "bi", "br", "j", "sb", "it", "gb", "bis", "n", "ob", "abs", "bs", "u", "B", "ab", "bb", "body", "base", "eb"], "i": ["f", "isin", "iq", "ite", "ix", "r", "k", " j", "q", "ind", "id", " ii", "p", "j", "it", " k", "n", "I", "iter", "no", "im"], "x": ["yx", "xp", "X", "ux", "xy", "l", "ix", "xs", "xa", "ax", "xx", "xt", "dx", "wx", "ex", "ct", "fx", "ctx", "rx", "xc", " xx", "ox", "xe", "int", "lex", "xi", "px", "w", "xf", "xd", "tx"], "y": ["Y", "ym", "ey", "yl", "yo", "yn", "ay", "my", "xy", "py", "yer", "iy", "sy", "oy", "yy", "ty", "yt", "gy", "ys", "ies", "yi", "ny", "fy", "et", "ry", "ya", "dy", "uy", "ye", "yr", "cy", "vy", "yd", "sky", "ly"], "ans": ["ens", "ls", "mas", "aned", "ares", "vers", "AN", "oss", "ran", "amps", "iann", "ars", "anas", "ms", "aus", "ons", "ns", "ann", " Ans", "aps", "aos", "arts", "asks", "rans", "ands", "san", "ANS", "can", "nas", "zan", "anes", "ras", "asms", "ats", "ros", "anks", "an", "ks", "ants", "lan"]}}
{"code": "N = int(input())\\n\\nR = [list(map(int, input().split())) for _ in range(N)]\\nB = [list(map(int, input().split())) for _ in range(N)]\\n\\nR = sorted(R, key=lambda x: -x[1])  # \u8d64\u3044\u70b9\u306fy\u5ea7\u6a19\u304c\u5927\u304d\u3044\u9806\u306b\u3059\u308b\\nB = sorted(B, key=lambda x: x[0])  # \u9752\u3044\u70b9\u306fx\u5ea7\u6a19\u304c\u5c0f\u3055\u3044\u9806\u306b\u3059\u308b\\n\\nfor a, b in B:  # \u9752\u3044\u70b9, x\u5ea7\u6a19\u304c\u5c0f\u3055\u3044\u9806\u306b\u306a\u3063\u3066\u3044\u308b\\n    for c, d in R:  # \u8d64\u3044\u70b9, y\u5ea7\u6a19\u304c\u5927\u304d\u3044\u9806\u306b\u306a\u3063\u3066\u3044\u308b\\n        if a > c and b > d:  # \u9752\u3044\u70b9\u306ex\u5ea7\u6a19\u3088\u308a\u8d64\u3044\u70b9\u306ex\u5ea7\u6a19\u304c\u5c0f\u3055\u304f, \u9752\u3044\u70b9\u306ey\u5ea7\u6a19\u3088\u308a\u8d64\u3044\u70b9\u306ey\u5ea7\u6a19\u304c\u5c0f\u3055\u3051\u308c\u3070\u30da\u30a2\u306b\u3059\u308b\\n            R.remove([c, d])\\n            break\\n\\nprint(N - len(R))\\n", "target": "591", "substitutes": {"N": ["Num", "K", "H", "C", "X", "F", "Ni", "W", "CNN", "NB", "NI", "G", "M", "NR", "A", "NA", "S", "O", "ND", "NT", "D", "SN", "NS", "L", "TN", "P", "Q", "T", "GN", "J", "Z", "n", "V", "I", "Ns", "NC", "NO", "NN"], "R": ["RR", "Y", "RGB", "K", "RG", "AR", "H", "C", "RA", "X", "F", "RB", "Rs", "G", "W", "M", "NR", "A", "r", "RS", "U", "RO", "RE", "S", "E", "SR", "D", "RL", "L", "P", "DR", "Q", "RF", "ER", "T", "RP", "J", "V", "RM", "I", "BR"], "_": [" un", " g", "____", " success", "__", " time", " z", " the", " l", " long", " pre", "___", "x"], "B": ["Y", "BS", "C", "F", "RB", "G", "W", "SB", "NB", "M", "BA", "A", "b", "S", "E", "O", "D", "L", "P", "T", "Z", "AB", "V", "I", "BR", "Bs"]}}
{"code": "A, B= input().split()\\nif A==B:\\n    print('H')\\nelse:\\n    print('D')", "target": "264", "substitutes": {"A": ["App", "AR", "AA", "Ar", "H", "C", "AN", "AC", "IA", "G", "AV", "Abs", "M", "What", "CA", "LA", "AL", "There", "S", "As", "HA", "AT", "AGE", "Ah", "AF", "An", "At", "P", "This", "AH", "AS", "AE", "The", "AP", "AB", "Alpha", "I", "ACT", "SA"], "B": ["Y", "BBC", "BB", "BS", "VB", "DB", "C", "RB", "Ber", "But", "BO", "N", "WB", "BA", "IB", "BC", "M", "BI", "b", "S", "E", "D", "L", "GO", "T", "J", "AB", "Z", "V", "BT", "I", "USB", "BER", "Bern", "CB", "BL", "BY", "BR", "Bs"]}}
{"code": "#4\\nimport sys\\nN = int(input())\\nx,y,k = 0,0,0\\n\\nif N == 1:\\n    print(1)\\n    sys.exit()\\nelif N <= 12:\\n    print(N)\\n    sys.exit()\\nx = int(0.8*N)\\n\\nfor i in range(x,N):\\n    k = str(i*108)\\n    if int(k[0:-2]) == N:\\n        print(i)\\n        y +=1\\n        break\\n\\nif y !=1:\\n    print(\":(\")\\n", "target": "194", "substitutes": {}}
{"code": "def triangle(dataset):\\n    a, b, c = dataset\\n    if a*a + b*b == c*c:\\n        return 1\\n    return 0\\n\\nN = int(input())\\nfor _ in range(N):\\n    dataset = sorted(map(int, input().split()))\\n    flag = triangle(dataset)\\n    print([\"NO\", \"YES\"][flag])", "target": "199", "substitutes": {"dataset": ["datrasset", "databsetter", "dataasetter", "datasket", "datbsET", "metraset", "metrasET", "datASetic", "datrasET", "Dataset", "variaserver", "variableserver", "DatASite", "datasET", "datarsets", "datasite", "metasET", "datbserver", "dataasets", "datbsets", "databaseset", "variablesets", "Datasets", "dataskets", "databasesets", "datbsonet", "databasesetter", "datbsset", "metasets", "datrasets", "datbsetter", "Datasetic", "variasets", "datbsite", "databasesonet", "metrasset", "datbset", "datableserver", "datableset", "Datasite", "datarsset", "databasesite", "DatASets", "databset", "datarset", "variableset", "metaset", "databasesetic", "datarsET", "metasset", "datASet", "datasketter", "datasets", "dataasonet", "DatASet", "metrasets", "dataserver", "datasonet", "datASets", "datablesetter", "datasetter", "datablesets", "datraset", "databaseserver", "dataskonet", "datasetic", "dataaset", "datasset", "datbsetic", "variaset", "databsets", "variasetter", "variablesetter", "DatASetic", "datASite", "databsonet"], "a": ["z", "f", "ba", "apa", "m", "am", "ae", "ta", "l", "t", "to", "i", "ax", "A", "r", "ca", "at", "la", "v", "ak", "aux", "area", "admin", "d", "p", "da", "e", "sa", "aq", "aa", "aj", "al", "ac", "n", "art", "ma", " A", "ia", "ab", "x", "ar", "ach", "an", "data", "aff"], "b": ["f", "rb", "ba", "ib", "erb", "be", "l", "y", "t", "bc", "s", "i", "cb", "r", "fb", "v", "db", "g", "wb", "d", "bi", "abb", "j", "bf", "bin", "e", "bu", "reb", "sb", "bo", "beta", "n", "ub", "bs", "o", "B", "ab", "bb", "eb"], "c": ["z", "f", "m", "C", "cr", "be", "cs", "l", "t", "bc", "cf", "cb", "r", "ca", "cin", "v", "lc", "g", "cn", "cc", "ct", "ce", "d", "p", "e", "cd", "fc", "n", "ac", "tc", "cu", "u", "o", "x"], "N": ["Num", "K", "C", "Total", "F", "R", "NB", "NI", "M", "NV", "NR", "A", "NL", "Size", "Count", "S", "O", "NT", "D", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "V", "I", "B", "Ns", "NC", "NUM", "NN"], "_": [" which", " j", "__", " __", " co"], "flag": ["bug", "f", "style", "qual", "ground", "line", "flags", "sync", "pin", "field", "sign", "debug", "age", "status", "band", "tag", "true", "condition", "mask", "lag", "store", "group", "bit", "id", "stage", "cloud", "command", "gui", "leaf", "feature", "FLAG", "bool", "int", "weight", "print", "Flag", "arg", "nl", "count"]}}
{"code": "import numpy as np\\n\\nn, x = map(int, input().split())\\nL = list(map(int, input().split()))\\n\\nCS_L = np.cumsum(L).tolist()\\nans = len([l for l in CS_L if l <= x])\\nprint(ans + 1)", "target": "444", "substitutes": {"n": ["z", "f", "nn", "io", "yn", "m", "y", "t", "N", "ns", "r", "k", "v", "na", "c", "h", "b", "ian", "g", "d", "j", "ne", "ry", "net", "np", "w"], "x": ["z", "m", "xp", "X", "xy", "y", "t", "ix", "xs", "xa", "ax", "xx", "i", "k", "v", "xt", "dx", "wx", "h", "q", "mx", "ex", "ctx", "p", "rx", "xc", "ox", "xi", "w", "px", "xf", "xd", "tx", "inx"], "L": ["Y", "K", "DL", "H", "C", "X", "Long", "SL", "LE", "Local", "LS", "ML", "N", "M", "LT", "LU", "LG", "LA", "EL", "NL", "Load", "S", "LIN", "CL", "LB", "P", "LC", "List", "T", "LI", "V", "FL", "I", "Li", "B", "LP", "BL", "LL", "TL"], "CS_L": ["CS___N", "CS_l", " CS_N", "CS_X", "CS___X", "CS___L", "CS_S", "cs_LT", "cs_I", " CS_l", "CS_N", "cs_S", " CS_X", "CS_LT", "cs_L", "CS___l", "CS_I"], "ans": ["ens", "ls", "mas", "aned", "vers", "ran", "cs", "iann", "os", "anas", "ars", "aus", "outs", "ms", "ins", "ann", "ns", "aos", "arts", "asks", "rans", "eds", "ANS", "aunts", "leans", "lets", "uns", "helps", "yrs", "anes", "ams", "ces", "asms", "ats", "ros", "asts", "an", "ks", "ants", "uploads", "lan"], "l": ["z", "f", "lit", "ls", "el", "line", " il", "t", "lin", "lis", "kl", "i", " li", "len", "r", " Li", "lb", "la", "v", "url", "c", "lt", "long", "ln", "lag", "h", "lc", "g", "id", "dl", "p", "j", "lp", "local", " lam", "hl", "loc", "li", "u", "dL", "left", "nl", "lic", "rl", "ll"]}}
{"code": "n=int(input())\\na=input();b=input();c=input()\\nx=0\\nfor i in range(n):\\n  x+=len(list(set([a[i],b[i],c[i]])))-1\\nprint(x)", "target": "648", "substitutes": {"n": ["nn", "nw", "nia", "m", "l", "nt", "t", "N", "len", "ns", "mn", "r", "k", "v", "na", "ln", "sn", "ng", "nd", "nu", "nb", "num", "d", "p", "j", "ne", "gn", "np", "nan", "nc", "o", "nl"], "a": ["ba", "apt", "am", "ae", "att", "\u00e1", "sta", "to", "ga", "au", "A", "ca", "at", "la", "ea", "area", "ao", "app", "act", "oa", "sa", "ata", "aa", "up", "al", "ac", "art", "ma", "ia", "ab", "aaa", "ar", "an", "data"], "b": ["rb", "ba", "ib", "bl", "blue", "be", "y", "bc", "bp", "gs", "bh", "fb", "cb", "lb", "db", "ble", "bas", "nb", "bi", "br", "bf", "bin", "sb", "bo", "gb", "bis", "ob", "bs", "B", "ab", "bb", "eb"], "c": ["sc", "C", "cr", "cs", "bc", "cf", "con", "rc", "ca", "ch", "co", "cv", "city", "lc", "gc", "cn", "cc", "ct", "cl", "ce", "cos", "cur", "cp", "ec", "com", "cd", "dc", "fc", "cache", "tc", "ac", "cu", "cm"], "x": ["z", "xp", "X", "php", "hex", "xy", "y", "ix", "xs", "sex", "xa", "xx", "xb", "xxxxxxxx", "ax", "at", "xml", "xt", "dx", "wx", "long", "mx", "ex", "ct", "fx", "rx", "xc", "ox", "xe", "cox", "int", "xi", "lex", "xf", "im", "xd", "tx"], "i": ["f", "io", "ini", "ri", "zi", "m", "uri", "l", "y", "this", "ix", "ti", "info", "key", "ci", "ip", "k", "ji", "v", "gi", "ij", "q", "phi", "g", "yi", "ind", "id", "di", "p", "bi", "multi", "j", "pi", "fi", "it", "ii", "iri", "si", "ic", "batch", "I", "li", "xi", "us", "me", "ui", "mi", "im", "init"]}}
{"code": "print(sum(s!=t for s,t in zip(input(),input())))", "target": "123", "substitutes": {"s": ["f", "has", "times", "m", "a", "another", "l", "cons", "gs", "xs", "i", "ns", "r", "v", "hs", "c", "units", "h", "q", "b", "ops", "g", "ies", "d", "p", "ains", "args", "e", "its", "ints", "ses", "n", "abs", "w", "sq", "u", "als", "ts", "qs"], "t": ["z", "f", "tu", "m", "ta", "a", "l", "y", "tw", "to", "ti", "r", "ty", "un", "v", "wa", "c", "h", "q", "ot", "g", "tg", "d", "te", "p", "just", "total", "e", "wt", "tf", "T", "tc", "n", "w", "u", "x", "ts"]}}
{"code": "def count_section_by_zero(data):\\n  count = 0\\n  flg = False\\n  start = 0\\n  for i, d in enumerate(data):\\n    if flg is False and d != 0:\\n      count += 1\\n      flg = True\\n      \\n    if d == 0:\\n      flg = False\\n  return count\\n\\ndef input_list():\\n  return list(map(int, input().split()))\\n\\ndef input_list_str():\\n  return map(str, input().split())\\n\\ndef lcm_base(x, y):\\n    return (x * y) // fractions.gcd(x, y)\\n\\ndef lcm_list(numbers):\\n    return reduce(lcm_base, numbers, 1)\\n\\ndef gcd(*numbers):\\n    return reduce(fractions.gcd, numbers)\\n\\ndef gcd_list(numbers):\\n    return reduce(fractions.gcd, numbers)\\n\\n# 2\u3067\u5272\u308a\u5207\u308c\u308b\u56de\u6570\\ndef divide_two(arg):\\n  c = 0\\n  while True:\\n    if c >= 2:\\n      break\\n    if arg % 2 != 0:\\n      break\\n    arg //= 2\\n    c += 1\\n  return c\\n\\n# \u7d20\u56e0\u6570\u5206\u89e3\\ndef prime_factorize(n):\\n    a = []\\n    while n % 2 == 0:\\n        a.append(2)\\n        n //= 2\\n    f = 3\\n    while f * f <= n:\\n        if n % f == 0:\\n            a.append(f)\\n            n //= f\\n        else:\\n            f += 2\\n    if n != 1:\\n        a.append(n)\\n    return a\\n\\ndef main():\\n  k, a, b = input_list()\\n  ans = 1\\n  lf = max(0, k - a+1)\\n  lf1 = lf//2\\n  if lf:\\n    ans = a + lf1 * (b - a) + lf%2\\n  else:\\n    ans +k\\n  print(max(ans, k+1))\\n  \\n  \\nimport math\\nimport fractions\\nimport collections\\nfrom functools import reduce\\nmain()", "target": "293", "substitutes": {"data": ["values", "str", "lines", "Data", "array", "all", "name", "result", "dd", "raw", "r", "series", "DATA", "input", "json", "empty", "group", "read", "image", "p", "da", "ds", "window", "zero", "bin", "results", "ata", "table", "batch", "items", "n", "iter", "list", "text", "dat"], "count": ["z", "f", "ount", "add", "offset", "found", "sum", "reset", "counter", "nt", "t", "number", "amount", "name", "result", "v", "limit", "length", "c", "index", "Count", "flag", "nb", "ind", "code", "num", "size", "call", "process", "ctr", "total", "last", "const", "current", "time", "batch", "n", "set"], "flg": ["FLgs", "FlG", "flbg", "Flgs", "folgs", "folga", "FLg", "flgc", "flge", " flG", " flbg", "slg", "flog", " flog", "Flgc", " flgc", "folbg", "slog", " flgs", "FLG", "FLga", "folg", "Flga", "Flog", "Flbg", "slgs", "flgs", "slge", "Flge", "flga", "FLbg", "FLgc", "flG", " flge", "Flg", "FLge"], "start": ["done", "offset", " end", "date", "skip", "t", "name", "starting", "pos", " stop", "step", "state", " offset", "duration", "id", "size", "p", "end", "it", " skip", "time", "delay", " restart", "pid", "stop", "Start", "st"], "i": ["f", "ini", "zi", "m", "l", "iy", "ti", "dim", "ci", "v", "b", "phi", "ind", "di", "p", "j", "pi", "ai", "int", "ii", "si", "li", "I", "mi", "dat"], "d": ["z", "f", "m", "a", "df", "l", "t", "did", "s", "dd", "den", "r", "dt", "div", "dx", "sd", "c", "dq", "nd", "b", "g", "D", "di", "dm", "du", "de", "p", "dn", "da", "do", "dir", "j", "ds", "end", "e", "dy", "dp", "n", "ad", "dec", "dra", "digit", "dat", "fd"], "x": ["z", "yx", "xp", "m", "X", "xy", "l", "ix", "xs", "xa", "ax", "xx", "v", "xt", "dx", "wx", "ex", "fx", "rx", "xc", " xx", "ox", "xxxx", "xi", "n", "px", "w", "on", "xf", "xd", "tx"], "y": ["Y", "z", "yz", "ym", "ey", "yl", "ay", "my", "xy", "py", "yer", "iy", "sy", "oy", "yy", "xx", "ery", "ty", "yt", "gy", "ys", "b", "ies", "yi", "ny", "fy", "ya", "uy", "ye", "yr", "cy", "vy", "iny", "yd", "sky", "ly"], "numbers": ["numumeric", "nographies", "numeric", " nums", "nways", "lums", "nums", "fumeric", "tways", "gways", "todes", "mograms", "lctors", " numer", "godes", "dumeric", "nodes", "modes", "fifiers", "lumbers", "fodes", "enographies", "neters", "numums", "mumbers", " nways", "tograms", "mums", " nodes", "Neters", "Nodes", "tums", " neters", "Nograms", "dumbers", " nograms", "numer", "difiers", " nctors", " nifiers", "nctors", "dodes", "Nums", "numumbers", "Numbers", "enums", "gumbers", "nograms", "enumbers", "lumer", "Nctors", "enumer", "nifiers", " nographies", "gograms", "numeters", " numeric", "tumbers", "Nographies", "Numeric", "Numer", "fumbers"]}}
{"code": "n1 = int(input())\\n\\nr1 = n1 * n1\\n\\nprint(r1)\\n", "target": "787", "substitutes": {"n1": ["nanau", "r0", "p2", "n5", "N2", "p0", " n2", "r3", "r2", "p3", "nau", "nan0", "p1", " n0", "n0", "nan5", "N0", "rau", "N1", " nau", "n3", "N3", "r5", " n5", "n2", "nan1"], "r1": ["gr11", "R5", "m0", "rc1", "r0", "r11", "gr7", "r2", "R7", " r11", "rc5", "R1", " r2", "gr2", "rc0", "gr1", "R0", "R2", "r5", "r7", "m5", " r7", "m1", "R11"]}}
{"code": "N = int(input())\\nA_list = list(map(int, input().split()))\\nB_list = list(map(int, input().split()))\\nC_list = list(map(int, input().split()))\\n\\ntotal = 0\\nfor a in A_list:\\n    total += B_list[a-1]\\n\\nfor i in range(N-1):\\n    if A_list[i] + 1 == A_list[i + 1]:\\n        total += C_list[A_list[i]-1]\\n\\nprint(total)", "target": "731", "substitutes": {"N": ["Num", "K", "H", "C", "Ni", "CNN", "NB", "NI", "EN", "M", "NV", "NR", "A", "NP", "NA", "S", "NT", "D", "SN", "NS", "NM", "L", "TN", "No", "P", "T", "GN", "J", "n", "Z", "V", "I", "B", "NUM", "NO", "NN", "Wh", "NH"], "A_list": ["AListst", "Arenlist", " A_rest", "B_tree", "Arenlisted", "AListint", "GA_li", "Arencurrent", "AListlist", "U_set", "GA_List", "Arentree", "GA_list", "A8li", "AListList", "Arenrest", " A_List", "ArenList", " A_current", "GA8List", "A_List", "A_st", "GA8list", "AExrest", " A_st", "A_listed", "GA_top", " A_int", "A_li", "A_top", "AExlist", "B_listed", "A8top", "A8List", "GA8li", "AExcurrent", "AExList", "A_current", "A_int", "A_set", "B_List", "A_rest", "GA8top", "A_tree", "A8list", "U_listed", "U_list"], "B_list": ["B4print", "BA_list", "BListsource", "BListprint", "OB_lower", "B4source", "OBmlset", "OB_List", "B_set", "BListlist", "B_block", "Bmlset", "BA_source", "B4list", "OBmllower", "BmlList", "Bmllist", "BA_print", "Bmllower", "B_List", "OB_set", "BA_block", "B_source", "B_lower", "OBmllist", "OB_list", "OBmlList", "B4block", "BListblock", "B_print"], "C_list": ["Ctxlists", "C2List", "CThelist", "H_listed", "CtxLIST", "C_all", "H_all", "C8list", "CtxList", "HTheobj", "C__obj", "C__all", "C8obj", "C_listed", "H_obj", "HTheall", "CTheobj", "C8listed", "CThelisted", "HThelisted", "C__list", "C2LIST", "C8all", "C2list", "H_list", "C__listed", "C_obj", "YC_LIST", "YC_list", "HThelist", "C_lists", "CTheall", "Ctxlist", "C_List", "YC_lists", "C2lists", "C_LIST", "YC_List"], "total": ["stats", "successful", "normal", "sum", "neutral", "comment", "unique", "Total", "confirmed", "basic", "all", "full", "t", "number", "amount", "note", "private", "to", "result", "final", "meta", "eta", "created", "broad", "public", "otal", "OTAL", "database", "complex", " Total", "ot", "reported", "complete", "human", "yes", "temp", "trace", "serial", "oat", "zero", "quant", "valid", "last", "net", "money", "equal", "relative", "current", "average", "mean", "template", "available", "sequence", "summary", "no", "list", "system", "multi", "base", "count", "significant", "general", "huge"], "a": ["z", "ba", "ae", "ta", "l", "t", "name", "af", "au", "xa", "ca", "A", "la", "at", "pa", "na", "c", "ea", "index", "aqu", "b", "p", "alpha", "ao", "j", "pi", "oa", "\u00e4", "aka", "e", "sa", "ai", "aq", "aa", "ac", "o", "ma", "ab", "aaa", "x", "an"], "i": ["z", "f", "ini", "ei", "zi", "m", "l", "y", "ix", "ti", "ip", "ci", "ji", "gi", "v", "ij", "hi", "index", "q", "b", "phi", "yi", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "iri", "si", "xi", "ic", "uli", "li", "I", "ia", "x", "ui", "mi", "iu", "im"]}}
{"code": "from fractions import gcd\\n\\ndef mi():\\n    return map(int, input().split())\\n\\ndef main():\\n    N, X = mi()\\n    x = list(mi())\\n    y = [abs(x[i]-X) for i in range(N)]\\n    t = y[0]\\n    for i in range(N):\\n        t = gcd(t, y[i])\\n    print(t)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "586", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "AN", "F", "R", "Ni", "G", "CNN", "NB", "NI", "M", "Mon", "NR", "CN", "NP", "NA", "S", "NT", "D", "SN", "NS", "NM", "L", "TN", "No", "P", "T", "GN", "J", "n", "V", "I", "We", "Ns", "NUM", "NO", "NH"], "X": ["Y", "TY", "UX", "K", "IP", "H", "C", "F", "MX", "R", "G", "W", "XY", "M", "A", "OX", "U", "S", "DX", "E", "EX", "Xi", "L", "P", "Q", "T", "XP", "J", "Z", "XX", "V", "I", "IX", "TX", "XT"], "x": ["z", "f", "xes", "m", "xp", "a", "xy", "l", "ix", "xs", "xa", "ax", "xx", "input", "v", "xt", "dx", "wx", "c", "mx", "ex", "fx", "p", "rx", "xc", "ox", "xe", "xi", "n", "px", "tx"], "y": ["Y", "z", "sys", "yo", "ym", "ey", "yn", "m", "xy", "yu", "py", "yy", "ty", "yt", "gy", "ys", "b", "ot", "ies", "yi", "ny", "j", "hot", "ya", "uy", "ye", "yr", "n", "o", "vy", "hy", "yk"], "i": ["ini", "ei", "ri", "zi", "m", "ix", "iy", "ti", "ip", "ci", "ji", "gi", "v", "gu", "ij", "ori", "index", "phi", "g", "yi", "sim", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "iri", "ic", "n", "li", "I", "ui", "im"], "t": ["z", "f", "tu", "target", "out", "tmp", "pt", "tm", "m", "ta", "l", "tt", "to", "r", "dt", "at", "v", " T", "c", "term", "ot", "b", "h", "g", "q", "temp", "tg", "test", "trace", "te", "p", "j", "total", "trans", "e", "tf", "wt", "int", "T", "vt", "tr", "n", "tc", "o", "ts", "st"]}}
{"code": "import sys\\nsys.setrecursionlimit(4100000)\\nimport math\\nINF = 10**9\\n\\ndef main():\\n    n = int(input())\\n    a = int(input())\\n\\n    if n%500 <= a:\\n        print('Yes')\\n    else:\\n        print('No')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "144", "substitutes": {"INF": ["INf", "inF", "inV", " INV", "InF", "Inf", "INB", " INf", "InV", " INB", "INV", "inf", "inB", "InB"], "n": ["f", "nn", "m", "ni", "l", "y", "nt", "t", "number", "nr", "s", "N", "i", "ns", "en", "na", "c", "ln", "sn", "an", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "np", "nan", "nc", "o", " N", "no", "nl", "x"], "a": ["ba", "apa", "ae", "ta", "l", "t", "af", "au", "ga", "s", "i", "A", "ca", "la", "pa", "na", "an", "b", "area", "p", "va", "alpha", "ao", "j", "oa", "e", "sa", "ai", "aa", "aj", "ac", "o", "ma", "ia", "ab", "am"]}}
{"code": "from collections import Counter\\n\\nn = map(int, input().split())\\n\\nA = list(map(int, input().split()))\\n\\ndef f(): \\n    for i, a in enumerate(A, 1):\\n        if i < a:\\n            yield i, a\\n        else:\\n            yield a, i\\n\\nc = Counter(f())\\nprint(len([k for k, v in c.items() if v == 2]))", "target": "397", "substitutes": {"n": ["names", "m", "Ni", "name", "s", " names", "N", "fn", "ns", "en", "Na", " fn", "na", " ni", "b", " ans", "d", "Names", "p", " ns", "aa", " N", "o", "Ns", "NC", "x", " na"], "A": ["Y", "AA", "array", "Ar", "H", "C", "X", "AC", "R", "G", "N", "CA", "S", "As", "D", "Array", "AF", "L", "An", "At", "P", "This", "T", "AS", "SA", "The", "AB", "AP", "V", "I", "B", "Alpha", "Ax", "AE"], "i": ["f", "z", "io", "ini", "zi", "m", "ta", "ni", "l", "y", "t", "ix", "ti", "\u0438", "ci", "ip", "ati", "gi", "ij", "hi", "index", "ki", "phi", "b", "ami", "di", "ik", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "li", "I", "x", "mi", "iu"], "a": ["z", "f", "ap", "m", "ae", "ta", "t", "sta", "af", "au", "s", "ca", "r", "at", "pa", "na", "ea", "index", "an", "b", "g", "d", "va", "p", "alpha", "da", "ao", "j", "pi", "e", "sa", "ai", "ata", "aa", "al", "ac", "art", "ma", "o", "u", "ia", "w", "ab", "aaa", "x", "ar", "ach", "am", "count"], "c": ["z", "f", "sc", "mc", "C", "cr", "l", "cs", "t", "bc", "ci", "r", "ca", "cb", "ch", "icc", "co", "h", "q", "b", "lc", "gc", "ct", "cc", "p", "ec", "xc", "cil", "fc", "pc", "nc", "ic", "ac", "cu", "vc", "count"], "k": ["z", "K", "m", "kr", "y", "t", "name", "ck", "kl", "s", "key", "kk", "r", "mk", "ki", "q", "b", "g", "ak", "ind", "id", "ik", "d", "p", "km", "j", "kj", "e", "kw", "tk", "keys", "u", "w", "sk", "x"], "v": ["z", "ve", "values", "sv", "vv", "m", "qv", "dev", "l", "lv", "t", "value", "h", "q", "b", "val", "tv", "iv", "nv", "vs", "vi", "j", "vt", "var", "uv", "V", "w", "o", "u", "x", "ev", "vc", "cv"]}}
{"code": "import numpy as np\\n\\nN = int(input())\\n\\nans = 0\\nfor i in range(1, N + 1):\\n    if ((i % 3) != 0) & ((i % 5) != 0):\\n        ans += i\\n\\nprint(ans)", "target": "167", "substitutes": {"N": ["K", "C", "X", "AN", "R", "G", "Ni", "CNN", "NB", "NI", "M", "NV", "NR", "CN", "A", "NP", "NA", "S", "ND", "NT", "SN", "NS", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "ans": ["ens", "wan", "anon", "aned", "AN", "oss", "ran", "ean", "pan", "rs", "amps", "iann", "s", "ins", "anas", "ms", "aus", "outs", "ns", "ons", "ann", "ano", " Ans", "aos", "arts", "atan", "es", "ians", "rans", "eds", "yes", " means", "ANS", "can", "nas", "offs", "anes", "nan", "ams", "ats", "anks", "an", "ks", "ants", "was", "lan"], "i": ["z", "ini", "ei", "zi", "\u00ed", "m", "cli", "l", "y", "t", "ix", "ti", "info", "ip", "ci", "\u0438", "k", "ani", "gi", "v", "ij", "hi", "index", "ki", "phi", "yi", "sim", "ind", "id", "di", "ik", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "iri", "ic", "n", "li", "I", "x", "ui", "mi", "iu", "im", "init"]}}
{"code": "import decimal\\n\\na, b = input().split()\\nx, y = decimal.Decimal(a), decimal.Decimal(b)\\nprint(int(x * y))", "target": "44", "substitutes": {"a": ["ba", "apa", "ae", "l", "t", "sta", "ga", "au", "os", "ed", "A", "ca", "r", "la", "at", "ea", "an", "ity", "area", "d", "alpha", "da", "ao", "oa", "act", "sa", "ya", "aa", "al", "n", "ac", "ma", "ia", "ab", "aaa", "ar", "ach", "am"], "b": ["erb", "ba", "rb", "ib", "mb", "blue", "be", "bc", "bp", "by", "bh", "fb", "cb", "db", "v", "c", "bas", "g", "nb", "bi", "bf", "bin", "sb", "it", "beta", "bis", "n", "ob", "bs", "B", "ab", "bb", "bar", "eb"], "x": ["f", "yx", "xp", "X", "xy", "l", "ix", "xs", "xa", "ax", "xx", "v", "xml", "xt", "dx", "wx", "c", "mx", "ex", "fx", "d", "rx", "xc", " xx", "e", "ox", "xe", "xi", "n", "w", "px", "xf", "xd", "tx"], "y": ["Y", "ym", "ey", "yo", "yl", "ay", "my", "xy", "py", "yer", "iy", "oy", "i", "sy", "yy", "ty", "yt", "ch", "gy", "ys", "ot", "ies", "yi", "ny", "fy", "j", "uy", "ye", "yr", "cy", "vy", "o", "yd", "ly"]}}
{"code": "N = int(input())\\nS = input()\\nT = input()\\n\\nans = 2 * N\\nfor i in range(1, N + 1):\\n    if S[-i:] == T[:i]:\\n        ans = 2 * N - i\\nprint(ans)\\n", "target": "693", "substitutes": {"N": ["K", "NE", "H", "C", "NF", "X", "AN", "F", "Ni", "CNN", "W", "NB", "NI", "G", "M", "NR", "CN", "MN", "A", "U", "NP", "NA", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "Q", "GN", "J", "Z", "n", "V", "I", "Ns", "NC", "NO", "NN", "NH"], "S": ["Y", "SER", "BS", "SI", "Si", "C", "H", "SS", "X", "R", "SL", "Spe", "G", "PS", "SB", "s", "M", "A", "RS", "ST", "DS", "SN", "NS", "SU", "L", "SP", "Su", "P", "TS", "SH", "SA", "SF", "V", "I", "B", "CS", "GS"], "T": ["Y", "TR", "H", "C", "X", "R", "G", "WT", "t", "MT", "Trans", "M", "LT", "OT", "TH", "E", "DT", "NT", "D", "TG", "AT", "L", "TP", "TN", "TS", "P", "Q", "J", "V", "I", "B", "TX", "TT", "GT", "XT", "PT"], "ans": ["ens", "wan", "ls", "mas", "aned", "ANN", "AN", "oss", "ean", "cs", "rs", "pan", "cons", "gs", "amps", "anned", "iann", "s", "ins", "anas", "ars", "aus", "ns", "ons", "ms", "ann", "outs", " Ans", "aos", "arts", "rans", " means", "ANS", "kin", "can", "anus", "nas", "ai", "offs", "\u00e1n", "anes", "nan", "ams", "ats", "Ns", "ros", "anks", "ana", "an", "ks", "ants", "olds", "lan"], "i": ["z", "io", "ei", "ini", "zi", "\u00ed", "cli", "iq", "a", "l", "y", "t", "ix", "ti", "ip", "ci", "\u0438", "k", "gi", "v", "ij", "c", "ori", "q", "yi", "ind", "id", "di", "ik", "p", "bi", "j", "pi", "ai", "it", "ii", "xi", "si", "n", "ic", "li", "I", "ia", "iter", "x", "ui", "mi", "iu", "im", "iti"]}}
{"code": "n = int(input())\\n\\nprime_1 = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\\nprime_2 = [4,9,25,49]\\nprime_3 = [8,27]\\nprime_4 = [16,81]\\n\\ndp = [0]*15\\n\\nfor i in range(15):\\n    dp[i] += n // prime_1[i]\\n\\nfor j in range(4):\\n    dp[j] += n // prime_2[j]\\n    \\nfor k in range(2):\\n    dp[k] += n // prime_3[k]\\n\\nfor l in range(2):\\n    dp[l] += n // prime_4[l]\\n\\ndp[0] += n // 32\\ndp[0] += n // 64\\n\\nn2 = sum(x>1 for x in dp) \\nn4 =sum(x>3 for x in dp)\\nn14=sum(x>13 for x in dp)\\nn24=sum(x>23 for x in dp)\\nn74=sum(x>73 for x in dp)\\n\\np553 = (n2-n4) * (n4*(n4-1) //2 ) + ((n4*(n4-1)*(n4-2))//2)\\np144 = (n4-n14) * n14 + (n14*(n14-1))\\np242 = (n2-n24) * n24 + (n24*(n24-1))\\np750 = n74\\n\\nprint(p553+p144+p242+p750)", "target": "145", "substitutes": {"n": ["z", "f", "nn", "out", "names", "m", "node", "y", "t", "nt", "conn", "N", "fn", "ns", "r", "en", "mn", "nm", "v", "na", "c", "ng", "sn", "an", "g", "cn", "nu", "num", "d", "p", "dn", "ne", "np", "nan", " N", "w", "nl", "non", "norm", "on"], "prime_1": ["Prime_3", "Prime_1", " prime24", " prime21", "prime22", "prime21", "prime23", "prime_01", " prime22", "prime24", "Prime_01", " prime23", "Prime_2"], "prime_2": ["profile_1", "profile_2", "prime_0", "profile_6", " prime_0", "prime_6", "profile_3"], "prime_3": [" prime_5", "proxy_6", "prime_11", "proxy_5", "prime____3", "proxy_3", "prime____5", "prime____1", "prime_5", "prime_13", "prime____13", "prime_6", " prime_13", "proxy_11"], "prime_4": ["prime_four", "primary_3", "primary_4", " prime_four", "primary_2", "primary_1", "prime_6", " prime_6"], "dp": ["dk", "deb", "ep", "adr", "decl", "bsp", "df", "pkg", "bp", "wd", "dos", "pb", "gp", "pp", "dd", "peer", "dim", "jp", "tp", "dt", "broad", "resp", "point", "db", "pipe", "pa", "vp", "dq", "pm", "fp", "eb", "csv", "deep", "isp", "dm", "di", "pd", "d", "ctx", "dl", "p", "dep", "lp", "cp", "ds", "pi", "tap", "dial", "dc", "np", "DP", "dh", "arp", "bps", "delay", "px", "osp", "lat", "dr", "wp", "xd", "hp"], "i": ["z", "ini", "zi", "m", "a", "y", "t", "ix", "iy", "ti", "s", "ip", "ci", "r", "ji", "v", "ij", "c", "q", "phi", "ind", "id", "di", "ik", "p", "bi", "pi", "ai", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "iti", "mi", "iu", "im"], "j": ["z", "obj", "ion", "jl", "m", "ja", "y", "t", "s", "jp", "ji", "r", "v", "json", "ij", "c", "job", "q", "b", "h", "je", "g", "jac", "p", "bi", "oj", "jo", "kj", "col", "jas", "jj", "jump", "aj", "J", "o", "uj", "dj", "li", "u", "bj", "js", "jc"], "k": ["z", "kg", "K", "m", "kr", "kt", "kh", "uk", "ka", "y", "t", "ck", "kl", "ikk", "key", "kk", "kan", "ke", "r", "kid", "v", "c", "mk", "ki", "q", "g", "kn", "ak", "wk", "ik", "kin", "kok", "p", "km", "kj", "ek", "kw", "tk", "o", "w", "u", "sk", "ko", "ku"], "l": ["z", "ol", "ls", "yl", "el", "jl", "le", "m", "lv", "t", "lin", "kl", "s", "r", "ch", "lb", "la", "v", "sl", "c", "lu", "ln", "h", "q", "b", "lc", "g", "p", "L", "lp", "lr", "lex", "o", "li", "u", "lf", "nl", "ll", "ly"], "n2": ["pTwo", "on5", "gn25", "nTwo", "p2", "n5", "N2", "on14", "numTwo", "N4", " nTwo", "N5", "n25", "num2", "p5", "p4", "n022", " n022", "gn4", "on2", "N022", "on022", "N14", "num5", "num4", "on4", "N25", "on25", "gn14", " n5", "gn2"], "x": ["z", "pe", "f", "ey", "xes", "xp", "X", "ced", "ux", "xy", "y", "t", "hold", "ix", "xs", "tt", "con", "ip", "ax", "xx", "request", "plex", "at", "check", "v", "xml", "xt", "dx", "wx", "c", "index", "h", "rox", "see", "ex", "mx", "ct", "rit", "fx", "work", "inx", "ross", "ctx", "\u00e7", "d", "cont", "p", "exp", "rx", "xxx", "xc", "e", "ox", "xxxx", "mix", "cross", "time", "batch", "xi", "w", "u", "lat", "xf", "on", "an", "xd", "tx", "st"], "n4": ["n44", "N8", " n16", "N7", "n4000", "N24", "num8", " n4000", "ne4", "n54", "ns24", "n5", "sn4000", "N2", "n8", "n464", " n44", "N4", "ns14", "N04", "np2", "num2", "n04", "num464", " n04", " n8", "sn4", "n7", "num54", "N464", "num14", "ns8", " n464", "N14", "num24", "ne54", "num4", "num44", "sn5", "ns16", "N54", "ne4000", "sn44", "ne2", "ne44", "N44", "np4", "ns2", "ne7", " n5", "n16", "N16", "np04", "ns4", "num7", "ne5"], "n14": ["en14", " n16", "nn74", "nn18", "nn24", "N24", "N29", "sn24", "sn18", "ne4", "pn18", "n13", "pn24", "N13", "num13", "num514", "fn29", "n29", "N4", "num18", "ne13", "fn16", " n29", "pn14", "en12", "N18", "n514", "sn14", "n12", "fn14", "sn4", "num14", "ne14", "N514", "N14", "num24", "en4", "pn74", "num4", " n12", " n13", "en29", "ne514", "n16", "N12", " n18", "N16", "fn13", "nn14", "n18"], "n24": ["np74", " n16", "N24", "num29", "np24", "ne239", "pn244", "ns74", "ns24", " n15", "dn15", "pn64", "pn24", "ne74", "en25", "n64", "n29", "N4", "np14", "n244", " n29", "ns14", "nt24", "N64", "n25", "N74", "n15", "num15", "p24", "n239", "nt14", "num25", "N244", "dn24", "pn4", "en24", "ne14", "num24", "en64", "N14", "p74", "nt74", "num4", "num64", "dn64", "en29", "num244", "np4", "num16", "n16", "nt239", "p239", "ns4", "p14", " n25", "dn16", "ne24", " n64"], "n74": ["p75", "ns750", "x54", "n54", "ns74", "x74", "x73", "p73", "n75", " n73", "ns75", "N73", "N74", " n750", "x75", " n75", "n750", "p74", "N54", "ns73", "n73", "N75", " n54"], "p553": ["pol553", "n553", "pol253", "p556", "jp253", " p592", "jp563", "pi563", "n533", " p533", "p523", "P592", "pol556", "P553", "pi556", "P533", "p563", "pol563", "p592", "pi553", "jp556", "p533", "n523", "n592", " p523", "pi253", "p253", "P523", "jp553"], "p144": ["p556", "pr54", "pa464", " p264", "pm164", "p464", "p164", " p145", "p264", "p145", "pa144", "p54", "pm464", " p464", "pm264", " p556", " p54", "pa164", "pp556", " p164", "pr144", "pm144", "pp145", "pp54", "pa264", "pr145", "pr556", "pp144"], "p242": ["cp248", "np248", "pm241", "pa241", "cp222", "pm242", " p244", "p234", " p241", "pa234", "pa242", "np242", "p244", " p248", "cp241", " p222", "p248", " p234", "p222", "pm244", "pa244", "pm234", "cp242", "p241", "np241", "np222"], "p750": ["pp74", "p751", "pp780", "pp774", "pi750", "p752", "pi74", "y752", "p774", "y750", "y751", " p751", "pi780", "pi774", " p774", "p74", "pp751", "pp750", "pp752", "pi752", "p780", "pi751", "y74", " p780"]}}
{"code": "N,C = map(int,input().split())\\nST = []\\nfor _ in range(N):\\n  s,t,c = map(int,input().split())\\n  ST.append([s,0,c])\\n  ST.append([t,1,c])\\nST.sort(key=lambda x:x[0])\\nST.sort(key=lambda x:x[2])\\nfor i in range(len(ST)-1):\\n  if ST[i][2]==ST[i+1][2] and ST[i][0]==ST[i+1][0]:\\n    ST[i][1]=2\\n    ST[i+1][1]=2\\n\\nST.sort(key=lambda x:x[1])\\nST.sort(key=lambda x:x[0])\\n\\nans =[0]\\nfor st in ST:\\n  if st[1]==0:\\n    ans.append(ans[-1]+1)\\n  elif st[1]==1:\\n    ans.append(ans[-1]-1)\\nprint(max(ans))\\n\\n", "target": "632", "substitutes": {"N": ["Num", "K", "H", "X", "F", "R", "Ni", "CNN", "NB", "M", "NR", "Len", "NP", "S", "E", "ND", "NT", "D", "NS", "L", "NM", "TN", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NUM", "NN", "NH"], "C": ["Y", "K", "X", "R", "G", "W", "CR", "Cs", "M", "A", "S", "E", "O", "D", "L", "TN", "CC", "P", "LC", "T", "TC", "V", "I", "B", "CS", "SC"], "ST": ["TY", "SET", "SS", "OST", "MT", "SM", "ICT", "TABLE", "RS", "SW", "DS", "ENTS", "SP", "TS", "ESS", "UST", "HEAD", "INST", "ENS", "FR", "sts", "ET", "UT", "Stack", "IST", "HT", "EN", "SEC", "ND", "US", "STR", "ANS", "RET", "EST", "SC", "NAME", "TT", "GT", "PUT", "LIST", "GROUP", "SL", "ANK", "ANT", "LS", "POST", "NRS", "SR", "NT", "IT", "STAT", "ACT", "USD", "SA", "GET", "St", "TR", "ALL", "STDOUT", "ED", "DATA", "TH", "OLD", "S", "LET", "AT", "END", "ENT", "INT", "SH", "SF", "SE", "STRUCT", "OUT", "LD", "AST", "STD", "NULL", "STATE"], "_": ["ay", "ix", " j", "__", " __", " p", "val", " x", " y", " k"], "s": ["ps", "sys", "sts", "ls", "fs", "spec", "se", "rs", "gs", "su", "ms", "os", "ins", "ns", "sd", "es", "sl", "S", "ss", "less", "ds", "sb", "sa", "n", "bs", "sq", "ats", "south", "als", "us", "ts"], "t": ["type", "tu", "pt", "tm", "ta", "l", "y", "tt", "tw", "ti", "r", "dt", "tp", "ty", "at", "ot", "b", "ct", "tg", "test", "te", "p", "it", "T", "tr", "n", "tc", "o", "u", "set", "ts", "rt", "text"], "c": ["z", "f", "abc", "mc", "m", "cr", "a", "l", "cs", "bc", "cf", "con", "rc", "r", "cin", "ca", "cb", "v", "co", "b", "lc", "g", "cc", "ct", "ce", "d", "cos", "can", "cp", "com", "e", "cd", "dc", "cache", "n", "tc", "ac", "cu", "u", "x", "cm"], "i": ["io", "ini", "ei", "ri", "zi", "m", "uri", "cli", "l", "this", "name", "ix", "ti", "info", "ip", "ci", "\u0438", "k", "ji", "v", "gi", "status", "ij", "ori", "index", "oi", "q", "phi", "ind", "id", "di", "p", "bi", "multi", "j", "pi", "fi", "ai", "it", "ii", "xi", "si", "batch", "ic", "iri", "I", "li", "iter", "list", "x", "ui", "mi", "me", "im", "iu", "init"], "ans": ["ens", "sts", "roots", "anon", "ls", "nets", "ares", "aned", "AN", "oss", "cs", "rs", "amps", "xs", "ms", "anas", "ins", "aus", "ns", "outs", "os", "ann", "ars", " Ans", "acs", "beans", "aos", "arts", "ents", "ians", "angs", "ums", "asks", "rans", "eds", "posts", "yes", " means", "akens", "san", "eps", "ANS", "works", "leans", "nas", "uns", "helps", "offs", "anes", "ams", " spans", "ads", "ces", "ates", "ats", "orts", "eas", "aints", "anks", "ions", "an", "ks", "ants", "olds"], "st": ["St", "z", "sts", "str", "play", "ld", "stat", "sign", "std", "est", "chain", "se", "nt", "name", "sta", "ste", "case", "ed", "step", "at", "check", "ft", "start", "nd", "stab", "see", "th", "ct", "lo", "ist", "stage", "sect", "sth", "ost", "et", "mt", "stress", "const", "ew", "n", "ace", "set", "cest", "x", "irst", "inst"]}}
{"code": "import sys,queue,math,copy,itertools,bisect,collections,heapq\\n\\ndef main():\\n    sys.setrecursionlimit(10**7)\\n    INF = 10**18\\n    MOD = 10**9 + 7\\n    LI = lambda : [int(x) for x in sys.stdin.readline().split()]\\n    NI = lambda : int(sys.stdin.readline())\\n\\n    N = NI()\\n\\n    N0 = 2**(N.bit_length())\\n    st = [0] * (N0*2)\\n\\n    def gindex(l, r):\\n        L = l + N0; R = r + N0\\n        lm = (L // (L & -L)) // 2\\n        rm = (R // (R & -R)) // 2\\n        while L < R:\\n            if R <= rm:\\n                yield R - 1\\n            if L <= lm:\\n                yield L - 1\\n            L //= 2; R //= 2\\n        while L > 0:\\n            yield L - 1\\n            L //= 2\\n\\n    def update(i,s):\\n        x = 2 ** (ord(s) - ord('a'))\\n        i += N0-1\\n        st[i] = x\\n        while i > 0:\\n            i = (i-1) // 2\\n            st[i] = st[i*2+1] | st[i*2+2]\\n\\n    def query(l,r):\\n        l += N0\\n        r += N0\\n        ret = 0\\n\\n        while l < r:\\n            if l % 2:\\n                ret |= st[l-1]\\n                l += 1\\n            if r % 2:\\n                r -= 1\\n                ret |= st[r-1]\\n            l //= 2 ; r //= 2\\n\\n        return ret\\n\\n\\n    for i,s in enumerate(sys.stdin.readline().rstrip()):\\n        update(i+1,s)\\n    Q = NI()\\n    for _ in range(Q):\\n        c,a,b = sys.stdin.readline().split()\\n        if c == '1':\\n            update(int(a),b)\\n        else:\\n            ret = query(int(a),int(b)+1)\\n            cnt = 0\\n            b = 1\\n            for i in range(26):\\n                cnt += (b & ret) > 0\\n                b <<= 1\\n            print(cnt)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "779", "substitutes": {"INF": ["IRF", "PINFF", "PINF", "PINFD", " INFF", " INFD", " INH", "PINH", "INFF", "IRH", "INH", "INFD", "IRFF", "IRFD"], "MOD": ["LOG", "INC", "CONT", " mod", "EXP", "DEF", "MER", "FIN", "RO", "REM", "mod", "DIR", "LIN", "SPEC", "FN", "OFF", "NM", "LOCK", "Mod", "DR", "REG", "MODE", "DM", "NUM", "DEC", "MD", "Mods", "POS"], "LI": ["TY", "LIB", "SI", "RY", "LE", "SL", "RI", "LG", "MI", "IG", "LO", "CI", "NL", "LIN", "lib", "IO", "LB", "Lin", "IL", "LC", "li", "I", "Li", "BL", "IE", "IF", "II", "DI"], "x": ["z", "f", "ey", "xes", "xp", "X", "hex", "ux", "xy", "y", "t", "ix", "xs", "xa", "ax", "xx", "xb", "xxxxxxxx", "v", "xt", "dx", "wx", "mx", "ex", "fx", "p", "rx", "j", "xc", "e", "ox", "xe", "xxxx", "xi", "n", "o", "px", "w", "u", "xf", "xd", "tx"], "NI": ["MEN", "SI", "AI", "NE", "GEN", "ni", "Ni", "NG", "RI", "NR", "MI", "MN", "CN", "NV", "NSA", "FIN", "CI", "KI", "NA", "ANI", "IND", "LIN", "IJ", "NS", "PIN", "IO", "NM", "TON", "TN", "VI", "TI", "UI", "NPR", "GN", "I", "NN", "GI", "MRI", "IN", "DI"], "N": ["NH", "C", "NF", "Ni", "W", "G", "NB", "M", "NV", "NR", "CN", "MN", "NSA", "NL", "NP", "NA", "S", "ND", "NT", "NAT", "SN", "NS", "NM", "TN", "T", "GN", "n", "V", "I", "Ns", "NC", "NN", "NPR"], "N0": ["FN05", "TN1", "AN7", "EN0", "EN00", "N2", "EN08", "NOTE0", "N4", "L3", "N6", "AN2", "NN0", "R1", "NOTE08", " N4", "NK", "NNZero", "NN3", "R0", "V0", "TN0", "LZero", "N3", " NK", "NZero", "N000", "NO4", " N00", "L0", "R3", "NOTE00", "GN7", "FN0", "NS1", "NO1", "N1", "TNZero", "TN7", "NS0", "EN000", "V4", "N7", "NSK", "N05", "V1", "NN4", " N000", "GN0", "GN2", "TN2", "GN6", "AN6", "N08", "NO5", " N08", " N2", " N05", " N5", "GN08", "N5", "NN1", "NN2", "L1", "FN08", "AN0", "NS2", "TN4", " N1", "L2", "LK", "R2", "N00", "L4", "GN05", "TN6", "V5", "NO0", "NOTE000"], "st": ["St", "z", "stri", "sts", "str", "rest", "ld", "stat", "sc", "pt", "std", "est", "bl", "se", "nt", "t", "sta", "ste", "sty", "stack", "sw", "sp", "sl", "state", "store", "start", "ST", "nd", "stab", "th", "ct", "stable", "ist", "storage", "ust", "ss", "ost", "ut", "usr", "td", "sa", "const", "n", "set", "stop", "nl", "list", "sh", "put", "ast", "lat", "inst"], "l": ["z", "f", "ol", "ld", "ls", "el", "le", "m", "t", "kl", "len", "lb", "la", "v", "sl", "lu", "lt", "ln", "h", "lc", "g", "tl", "lo", "cl", "p", "dl", "j", "lp", "pl", "hl", "lr", "al", "n", "loc", "o", "ell", "li", "u", "left", "nl", "rl", "ll", "ly"], "r": ["z", "f", "rb", "ri", "m", "rr", "sr", "cr", "rs", "t", "rc", "err", "res", "rl", "v", "ren", "h", "q", "g", "rn", "re", "er", "d", "p", "br", "j", "ro", "ry", "e", "lr", "tr", "ur", "n", "rd", "mr", "vr", "u", "w", "o", "reg", "dr", "rar", "ar", "rt", "ru"], "L": ["Y", "LV", "DL", "Sl", "H", "C", "X", "XL", "LR", "Line", "F", "SL", "LE", "G", "W", "LS", "VL", "ML", "LM", "M", "LT", "LG", "Left", "LA", "Lock", "NL", "EL", "LO", "S", "LIN", "D", "RL", "Le", "CL", "P", "IL", "LC", "ER", "T", "J", "Z", "V", "FL", "I", "B", "LP", "BL", "LD", "LL", "Lu", "TL"], "R": ["RR", "Y", "TR", "AR", "H", "C", "RA", "X", "LR", "F", "RB", "IR", "Rs", "LE", "G", "CR", "MR", "M", "RI", "NR", "A", "RS", "GR", "RN", "RO", "RE", "S", "SR", "O", "D", "RL", "HR", "RT", "P", "DR", "RES", "RF", "ER", "T", "J", "Z", "RM", "V", "I", "B", "Res", "LL"], "lm": ["lmm", "nlM", "Lm", "llm", " lr", "nlmm", "Lf", "Ll", "LM", "llM", "lll", "Lmm", "lM", " lM", "nlr", " lmm", "llf", "lr", " ll", "nlm", " lf", "Lr", "lf", "ll"], "rm": ["rr", "m", "lamm", "cr", "rom", "rh", "sm", "MT", "MR", "nr", "LM", "mn", "nm", "res", "rol", "arm", "bm", "pm", "irm", "rn", "re", " RM", "Mr", "rx", "NM", "JM", "drm", "mt", "lr", "rt", "RM", "mr", "rem", "reg", "dr", "rar", "rl"], "i": ["z", "f", "ini", "ib", "ri", "zi", "m", "cli", "y", "t", "ix", "ti", "info", "ip", "ci", "v", "gi", "status", " j", "ij", "hi", "index", "h", "phi", "yi", "ie", "ind", "id", "di", "p", "bi", "multi", "exp", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "u", "iter", "ui", "mi", "iu", "im", "init"], "s": ["ps", "z", "sts", "str", "f", "sv", "ls", "sc", "m", "spec", "se", "t", "rs", "gs", "y", "xs", "os", "ins", "ns", "sw", "single", "res", "series", "v", "sp", "sl", "es", "h", "g", "S", "string", "p", "ss", "j", "e", "sb", "n", "si", "o", "bs", "sq", "u", "ats", "space", "sh", "ts", "js"], "ret": ["Ret", "f", "z", "ib", "out", "std", "reset", "rez", "elt", "nt", "t", "result", "back", "len", "rc", "err", "res", "reply", "lb", "cb", "v", "rets", "match", "lt", "repl", "gt", "q", "g", "ref", "val", "test", "re", "d", "mem", "RET", "p", "nil", "j", "usr", "ne", "alt", "ry", "last", "bin", "bool", "it", "int", "lr", "n", "ob", "iter", "print", "ber", "nl", "dr", " Ret", "rt", "ll"], "Q": ["Y", "QU", "K", "CH", "MQ", "C", "X", "F", "G", "W", "Query", "M", "q", "S", "D", "CL", "IO", "QB", "P", "UI", "Queue", "T", "J", "Z", "V", "I", "Qu", "Que", "IQ"], "_": [" do", "ix", "A", " j", " __", "val", "j", "ox", " the", "n", "I", "no", "an"], "c": ["f", "abc", "m", "C", "t", "cf", "ci", "cin", "rc", "cb", "ca", "k", "v", "co", "h", "lc", "unc", "ct", "p", "col", "cp", "ec", "com", "xc", "cd", "dc", "uc", "fc", "ac", "tc", "n", "cu", "ic", "o", "count"], "a": ["ba", "abc", "fa", "m", "ae", "y", "t", "au", "xa", "A", "ca", "la", "at", "v", "ea", "an", "aux", "p", "va", "da", "app", "oa", "e", "sa", "aa", "aj", "al", "ac", "n", "o", "w", "u", "ab", "aaa", "ar", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "y", "t", "bc", "bp", "pb", "bg", "cb", "fb", "v", "g", "wb", "nb", "d", "p", "bi", "br", "j", "e", "bin", "bu", "sb", "bis", "n", "ob", "bs", "u", "B", "ab", "bb", "bar", "eb"], "cnt": [" ctr", "acount", "Ctr", "pcount", "Cpt", "acnt", "lcount", "acpt", "CNT", "acct", "pctr", " cpt", "cNT", "Cct", "lcNT", "Count", "pcct", "Cnt", "ctr", "lcnt", " count", " cNT", "lcpt", "cct", " cct", "pcnt", "count", "cpt"]}}
{"code": "import numpy as np\\nimport sys\\ndef sinput(): return sys.stdin.readline()\\ndef iinput(): return int(sinput())\\ndef imap(): return map(int, sinput().split())\\ndef fmap(): return map(float, sinput().split())\\ndef iarr(): return list(imap())\\ndef farr(): return list(fmap())\\ndef sarr(): return sinput().split()\\n\\ns = input()\\nans = 1\\ntmp = s[0]\\nfor i in s:\\n    if i != tmp:\\n        ans += 1\\n        tmp = i\\nprint(ans-1)", "target": "655", "substitutes": {"s": ["ps", "sts", "sv", "ls", "m", "a", "sis", "rs", "t", "gs", "su", "xs", "ins", "ms", "ns", "series", "input", "strings", "services", "c", "b", "eds", "S", "csv", "p", "ss", "ds", "seconds", "parts", "sa", "sb", "ashes", "ims", "ses", "si", "n", "abs", "bs", "sq", "w", "set", "ats", "ts", "qs", "js"], "ans": ["ens", "rors", "nets", "ones", "oss", "cs", "rs", "amps", "xs", "ins", "ms", "os", "aus", "ns", "outs", "ons", "ann", "aps", "acs", "arts", "ents", "ums", "ands", "eds", "ids", "terms", "ANS", "ots", "vs", "ds", "offs", "powers", "ads", "ats", "orts", "orders", "anks", "an", "ks", "ants", "olds"], "tmp": ["img", "done", "sv", "out", "obj", "offset", "m", "src", "this", "nt", "t", "tt", "xs", "ip", "output", "adj", "ann", "msg", "perm", "sp", "before", "snap", "sym", "mk", "mut", "start", "phi", "share", "mp", "temp", "nb", "ind", "test", "pre", "mem", "p", "j", "sam", "total", "self", "addr", "cmp", "np", "txt", "cache", "uni", "aaa", "qq", "data", "new"], "i": ["z", "f", "ei", "ini", "out", "ri", "zi", "\u00ed", "m", "a", "ni", "l", "y", "t", "aci", "name", "ti", "\u0438", "ip", "r", "ji", "ati", "gi", "v", "gu", "ij", "oi", "ki", "ami", "yi", "sim", "id", " ii", "di", " Xi", "Xi", "p", "bi", "j", "pi", "e", " I", "ai", "it", " si", "ii", "xi", "si", "n", "I", "li", "list", "x", "iti", "mi", "iu", "multi", "init"]}}
{"code": "N,M = map(int,input().rstrip().split(\" \"))\\nA = []\\nB = []\\nans = False\\nfor i in range(N):\\n    A.append(list(input()))\\nfor i in range(M):\\n    B.append(list(input()))\\nfor i in range(N - M + 1):\\n    for i2 in range(N - M + 1):\\n        for i3 in range(M):\\n            if A[i3 + i][i2:i2 + M] != B[i3]:\\n                break\\n            if i3 == M -1:\\n                ans = True\\nif ans:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "483", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "X", "F", "R", "Ni", "CNN", "W", "NB", "NI", "G", "NR", "NA", "S", "E", "ND", "O", "NT", "D", "NS", "L", "NM", "TN", "P", "Q", "T", "J", "n", "Z", "V", "I", "Ns", "NC", "NN", "NH"], "M": ["Y", "MO", "K", "m", "H", "MP", "C", "X", "MX", "F", "R", "PM", "G", "MT", "MR", "LM", "CM", "MI", "MN", "MC", "MM", "S", "MH", "O", "E", "MB", "D", "NM", "L", "JM", "TM", "P", "Q", "IM", "AM", "MS", "MAN", "T", "DM", "J", "Z", "RM", "V", "I", "Mi", "MU"], "A": ["App", "AR", "AA", "Ar", "ALL", "AC", "Al", "a", "AV", "Abs", "BA", "ABC", "CA", "AL", "Av", "As", "All", "HA", "AT", "Array", "AU", "Ag", "AF", "WA", "L", "GA", "An", "At", "ATA", "P", "AM", "This", "AE", "SA", "The", "AP", "AB", "Art", "One", "Alpha", "I", "Ac", "Ant", "ACT", "AST", "Ax", "AH"], "B": ["Y", "BE", "Blue", "BB", "BS", "VB", "DB", "EB", "Two", "RB", "OB", "G", "But", "SB", "NB", "BO", "WB", "BA", "IB", "BC", "BI", "Be", "Bar", "b", "GB", "S", "D", "L", "TB", "Bo", "LB", "Back", "FB", "T", "PB", "J", "AB", "BT", "BL", "CB", "Bern", "BR", "Bs"], "ans": ["ens", "oos", "ls", "flags", "cs", "rs", "cons", "amps", "xs", "gs", "s", "os", "ms", "ins", "anas", "ns", "aus", "ars", "ann", " Ans", "aps", "arts", "ents", "ians", "angs", "rans", "ys", "aves", "yes", " means", "vs", "ANS", "cos", "can", "ds", "leans", "uns", "helps", "ai", "ras", "umes", "ats", "orts", "anks", "an", "ks", "ants", "olds", "irms"], "i": ["ini", "zi", "m", "ir", "ice", "a", "IC", "y", "t", "Ni", "ti", "ip", "ci", "k", "il", "gi", "ij", "h", "q", "phi", "g", "yi", "ie", "id", "di", "p", "bi", "j", "pi", "e", "P", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "li", "I", "o", "ia", "Mi", "x", "iti", "mi", "im", "II"], "i2": ["li2", "pi1", "j3", "pi3", " i5", "j2", "li8", "ilet", "li5", "pi4", " ilet", "pilet", "i5", " i8", "pi2", "pi5", "i1", "i4", " i1", "li3", "j1", " i4", "lilet", "i8", "j4", "pi8"], "i3": ["viThree", "icry", "ti5", "li2", "pi3", " i5", " i15", "ai2", "vi3", "icThree", "i15", "iThree", "piThree", "ithree", "ii15", "vi2", "i5", "ai4", "pi2", "pi5", "ii5", "piry", " ithree", "ic2", "i4", "pi15", "li3", "ti3", "ti2", "ii3", "pithree", " i4", "ic3", "aithree", "lithree", "iry", "viry", "tithree", "li4", "ii2", "ai3"]}}
{"code": "a = raw_input().split()\\nb = []\\nb.append(int(a[0]))\\nb.append(int(a[1]))\\nb.append(int(a[2]))\\nb.sort()\\nprint b[0], b[1], b[2]", "target": "117", "substitutes": {"a": ["active", "apa", "array", "el", "ae", "att", "l", "sta", "ga", "au", "A", "ca", "la", "at", "v", "es", "aw", "ea", "an", "era", "er", "aux", "area", "ce", "go", "aaaa", "va", "da", "app", "oa", "act", "parts", "sa", "aa", "abs", "ac", "ma", "part", "ia", "ab", "aaa", "am", "aff", "auto"], "b": ["good", "z", "f", "rb", "ba", "ib", "objects", "obj", "conv", "browser", "blue", "mb", "be", "l", "bl", "t", "bp", "pb", "back", "xb", "cb", "fb", "buffer", "db", "root", "v", "bound", "h", "always", "g", "wb", "nb", "lib", "bank", "storage", "br", "j", "buf", "parts", "bin", "bool", "sb", "reb", "it", "binary", "bu", "gb", "beta", "bo", "bis", "abs", "ob", "n", "bs", "arb", "B", "ab", "buff", "bb", "body", "bar", "base", "eb", "auto"]}}
{"code": "s = input()\\nprint(1 - int(s))", "target": "497", "substitutes": {"s": ["z", "f", "sts", "str", "ls", "m", "a", "l", "t", "gs", "i", "ns", "r", "v", "c", "h", "q", "b", "g", "S", "d", "p", "ss", "ds", "self", "e", "sb", "its", "n", "w", "sq", "x", "ts", "qs"]}}
{"code": "import bisect\\n\\nn = int(input())\\nX = list(map(int, input().split()))\\n\\nsorted_x = sorted(X)\\n\\nl, r = sorted_x[n//2], sorted_x[n//2-1]\\n\\nfor x in X:\\n    if bisect.bisect_left(sorted_x, x) < n // 2:\\n        print(l)\\n    else:\\n        print(r)", "target": "16", "substitutes": {"n": ["z", "nn", "out", "nia", "names", "m", "ni", "nt", "t", "number", " len", "name", "nr", "s", "N", " na", "len", "ns", "fn", "nm", "mn", "i", "v", "na", "c", "sn", "cn", "nu", "nb", "id", "num", "d", "size", "p", "dn", "j", "ne", "natural", "net", "nor", "gn", "np", "nan", "nc", "no", "nl", "norm", " num", "count"], "X": ["Y", "UX", "K", "H", "C", "XL", "AC", "IC", "MX", "R", "G", "W", "xs", "XY", "N", "FX", "OX", "U", "XXX", "S", "DX", "Input", "EX", "D", "Array", "L", "P", "Q", "XM", "T", "XP", "J", "XX", "Z", "V", "I", "IX", "TX", "XT"], "sorted_x": ["sordered_x", "sorter_x", "sorted_json", "sorted_xs", "sorting_x", "sorted_xy", "sorted_xi", "sordered_xy", "sorted_co", "sorter_ex", "sorting_json", "sorted_xml", "sorter_y", "sorter_xi", "sordered_y", "sorting_xml", "sortedgedjson", "sorting_xs", "sordered_co", "sorted_y", "sorted_ex", "sorting_y", "sortedgedx", "sortedgedxs"], "l": ["fl", "ol", "ls", "yl", "el", "le", "kl", "i", "sol", "lb", "ul", "sl", "lock", "lt", "lu", "ln", "lc", "tl", "lo", "dl", "L", "lp", "pl", "hl", "lr", "al", "ell", "li", "left", "nl", "list", "rl", "ll"], "r": ["rb", "pr", "rr", "rg", "sr", "kr", "cr", "R", "red", "rs", "nr", "rect", "fr", "i", "rc", "rl", "res", "v", "repl", "b", "rf", "rn", "er", "re", "rm", "d", "p", "ro", "e", "lr", "right", "rd", "mr", "vr", "dr", "rar", "ar", "rt"], "x": [" dx", "xp", "hex", "xy", "y", "ix", "xs", "xx", "i", "ax", "k", " ax", "v", "dx", "wx", "mx", " xp", "ex", "fx", " ox", "p", "exp", "rx", "xc", " xx", "e", "ox", "xe", "xxxx", "xi", "lex", " crow", " ex", "px", "w", "xf", " cx", "Ax", "tx"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nS = input()\\n\\ncount = 0\\nfor i, s in enumerate(S):\\n    if i % 2 and s == S[0]:\\n        count += 1\\n    if i % 2 == 0 and s != S[0]:\\n        count += 1\\n\\nif count > len(S):\\n    count = len(S) - count\\n\\nprint(count)\\n\\n", "target": "495", "substitutes": {}}
{"code": "def make_prime_table(n):\\n    sieve = list(range(n + 1))\\n    sieve[0] = -1\\n    sieve[1] = -1\\n    for i in range(4, n + 1, 2):\\n        sieve[i] = 2\\n    for i in range(3, int(n ** 0.5) + 1, 2):\\n        if sieve[i] != i:\\n            continue\\n        for j in range(i * i, n + 1, i * 2):\\n            if sieve[j] == j:\\n                sieve[j] = i\\n    return sieve\\n\\n\\ndef prime_factorize(n):\\n    result = []\\n    while n != 1:\\n        p = prime_table[n]\\n        e = 0\\n        while n % p == 0:\\n            n //= p\\n            e += 1\\n        result.append((p, e))\\n    return result\\n\\n\\nN = int(input())\\n\\nprime_table = make_prime_table(N)\\nd = {}\\nfor i in range(2, N + 1):\\n    for p, e in prime_factorize(i):\\n        d.setdefault(p, 0)\\n        d[p] += e\\n\\n# 75 = 5 * 5 * 3\\n#    = 15 * 5\\n#    = 25 * 3\\n#    = 75\\nn74 = 0\\nn24 = 0\\nn14 = 0\\nn4 = 0\\nn2 = 0\\nfor k in d:\\n    if d[k] >= 74:\\n        n74 += 1\\n    if d[k] >= 24:\\n        n24 += 1\\n    if d[k] >= 14:\\n        n14 += 1\\n    if d[k] >= 4:\\n        n4 += 1\\n    if d[k] >= 2:\\n        n2 += 1\\n\\nresult = 0\\n# x ^ 4 * y ^ 4 * z ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\\nresult += n4 * (n4 - 1) // 2 * (n2 - 2)\\n# x ^ 14 * y ^ 4 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\\nresult += n14 * (n4 - 1)\\n# x ^ 24 * y ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\\nresult += n24 * (n2 - 1)\\n# x ^ 74 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\\nresult += n74\\nprint(result)\\n", "target": "145", "substitutes": {"n": ["z", "f", "nn", "m", "a", "node", "l", "ni", "nt", "t", "number", "name", "y", "nr", "s", "len", "ns", "r", "en", "mn", "nm", "v", "na", "c", "ren", "ln", "sn", "q", "b", "h", "g", "ng", "cn", "nu", "nb", "num", "size", "dn", "pi", "ne", "net", "current", "np", "nc", "o", "w", "no", "on", "x", "pn", "ll"], "sieve": ["stsieving", "sieving", "tve", "siever", "atsift", " sift", "osorter", "osift", "stsorter", "portsiever", " sive", "sorter", "osieving", "atsorter", "osieve", "wsine", "insine", "esve", "svine", "unsieve", " sarchive", " slet", "opensvine", "sarchive", "insvine", "ariever", "atsiever", "wsieve", "arve", "portsieving", "atsieve", "arieving", "sift", "esiever", "sine", "tiever", "insiever", "esieve", "Sve", "bisieve", "atsve", "Sive", "arieve", "stsieve", "inslet", "slet", "sve", "insieve", "unsrule", "atsieving", "opensieve", " siever", "bisrule", "wsorter", " sieving", "tieve", "tlet", "srule", "portsve", "esive", "insve", "bisarchive", "stsift", "opensine", "wsieving", " sve", "sive", " sorter", "Sieving", "bisiever", "portsine", "insift", "Sieve", "Siever", "unsarchive", "unsiever", " svine", " sine", "portsieve", "portsorter", "opensift", " srule"], "i": ["z", "f", "io", "ini", "ei", "zi", "m", "a", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "r", "k", "ji", "pp", "v", "gi", "ij", "c", "hi", "index", "h", "q", "phi", "b", "ki", "yi", "ie", "di", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "u", "I", "ia", "x", "mi", "iu", "im"], "j": ["z", "f", "jl", "m", "a", "ii", "xy", "jit", "ja", "y", "t", "l", "jp", "k", "ji", "r", "v", "json", "ij", "c", "h", "q", "b", "je", "g", "jac", "ijk", "bi", "br", "kj", "ne", "it", "jj", "jump", "aj", "J", "si", "o", "uj", "dj", "li", "u", "x", "bj", "js", "jc"], "result": ["create", "out", "either", "relation", "message", "date", "comment", "ret", "all", "second", "case", "our", "memory", "final", "r", "answer", "output", "res", "public", "buffer", "root", "match", "true", "group", "pair", "complete", "test", "re", "trace", "power", "null", "total", "word", "product", "results", "collection", "search", "component", "Result", "cache", "mate", "table", "void", "sequence", "first", "response", "correct", "success", "rule", "also", "description"], "p": ["ps", "pe", "f", "pard", "ph", "per", "pt", "pr", "ap", "m", "pu", "a", "par", "pkg", "l", "t", "y", "bp", "pb", "pp", "ip", "point", "jp", "tp", "r", "k", "v", "perm", "pa", "vp", "c", "h", "b", "q", "g", "pair", "fp", "pers", "er", "pre", "pd", "power", "pat", "lp", "ping", "pi", "cp", "pl", "port", "P", "np", "pc", "dp", "o", "part", "u", "x", "pn", "pro", "pg"], "e": ["pe", "f", "ei", "ele", "el", "le", "ep", "edge", "ae", "fe", "eff", "be", "ef", "se", "eeee", "ed", "r", "en", "ue", "es", "eur", "g", "ge", "ate", "E", "we", "ie", "eu", "oe", "er", "ze", "ce", "de", "te", "exp", "ec", "ne", "xe", "ee", "ex", "ye", "error", "eg", "o", "u", "element", "me", "x", "ev", "eb"], "N": ["Y", "Num", "K", "C", "X", "F", "R", "Ni", "G", "NG", "NI", "NB", "M", "NR", "CN", "NP", "NA", "S", "E", "O", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "V", "I", "B", "NO", "NN"], "prime_table": [" prime_count", "primevallist", "prime_list", "prime_tree", "prime2map", "primevalTable", "prime__table", " prime_tree", "primevaltable", " prime_map", "Prime_state", "prime2table", "prime__count", "prime__map", "prime2count", "Prime_list", "prime2tree", "prime_Table", "Prime_Table", "prime__tree", "prime_count", "Prime_table", "primevalstate", "prime_map", "prime_state"], "d": ["f", "des", "m", "df", "l", "t", "debug", "dict", "s", "dd", "days", "r", "dt", "div", "db", "v", "dx", "sd", "c", "h", "b", "nd", "g", "D", "di", "pd", "de", "do", "da", "ds", "dh", "ad", "o", "w", "u", "dr", "dat", "fd"]}}
{"code": "from collections import deque\\n\\n\\nclass UnionFindWeighted:\\n    \"\"\"\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u4ed8\u304dUnionFind\"\"\"\\n    def __init__(self, n):\\n        self.parent = [-1] * n\\n        self.weight = [0] * n\\n        self.cnt = n\\n        self.INF = 10 ** 18\\n\\n    def root(self, x):\\n        \"\"\"\u9802\u70b9x\u306e\u6839\u3092\u6c42\u3081\u308b\"\"\"\\n        if self.parent[x] < 0:\\n            return x\\n        rt = self.root(self.parent[x])\\n        self.weight[x] += self.weight[self.parent[x]]\\n        self.parent[x] = rt\\n        return rt\\n\\n    def merge(self, x, y, weight):\\n        \"\"\"\u9802\u70b9x\u3092\u542b\u3080\u96c6\u5408\u3068\u9802\u70b9y\u542b\u3080\u96c6\u5408\u3092\u7d50\u5408\u3059\u308b\\n        weight: \u9802\u70b9y\u306b\u5bfe\u3059\u308b\u9802\u70b9x\u306e\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb(\u9802\u70b9x\u306e\u65b9\u304cweight\u9ad8\u3044)\\n        \"\"\"\\n        root_x = self.root(x)\\n        root_y = self.root(y)\\n        if root_x == root_y:\\n            return\\n        if self.parent[root_x] < self.parent[root_y]:\\n            self.parent[root_x] += self.parent[root_y]\\n            self.parent[root_y] = root_x\\n            self.weight[root_y] = -weight + self.weight[x] - self.weight[y]\\n        else:\\n            self.parent[root_y] += self.parent[root_x]\\n            self.parent[root_x] = root_y\\n            self.weight[root_x] = weight - self.weight[x] + self.weight[y]\\n        self.cnt -= 1\\n\\n    def is_same(self, x, y):\\n        \"\"\"\u9802\u70b9x, y\u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059\"\"\"\\n        return self.root(x) == self.root(y)\\n\\n    def diff(self, x, y):\\n        \"\"\"\u9802\u70b9y\u306b\u5bfe\u3059\u308b\u9802\u70b9x\u306e\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u3092\u6c42\u3081\u308b\\n        \u305f\u3060\u3057\u3001\u9802\u70b9x,y\u9593\u306b\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f INF \u3092\u8fd4\u3059\\n        \"\"\"\\n        if not self.is_same(x, y):\\n            return self.INF\\n        return self.weight[x] - self.weight[y]\\n\\n    def get_size(self, x):\\n        \"\"\"\u9802\u70b9x\u3092\u542b\u3080\u96c6\u5408\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\"\"\"\\n        return -self.parent[self.root(x)]\\n\\n    def get_cnt(self):\\n        \"\"\"\u96c6\u5408\u306e\u500b\u6570\u3092\u8fd4\u3059\"\"\"\\n        return self.cnt\\n\\n\\nn = int(input())\\ninfo = [list(map(int, input().split())) for i in range(n - 1)]\\nqq, k = map(int, input().split())\\nquery = [list(map(int, input().split())) for i in range(qq)]\\nk -= 1\\n\\ntree = [[] for i in range(n)]\\nfor a, b, cost in info:\\n    a -= 1\\n    b -= 1\\n    tree[a].append((b, cost))\\n    tree[b].append((a, cost))\\n\\nuf = UnionFindWeighted(n)\\nroot = k\\npar = {root: -1}\\nq = deque([root])\\nwhile q:\\n    v = q.pop()\\n    for nxt_v, cost in tree[v]:\\n        if nxt_v in par:\\n            continue\\n        else:\\n            par[nxt_v] = v\\n            uf.merge(nxt_v, par[nxt_v], cost)\\n            q.append(nxt_v)\\n\\nfor a, b in query:\\n    a -= 1\\n    b -= 1\\n    print(uf.diff(a, k) + uf.diff(b, k))", "target": "360", "substitutes": {"self": ["disk", "add", "pr", "report", "names", "spec", "dev", "full", "name", "close", "note", "Self", "make", "expr", "attr", "sw", "compl", "wrapper", "public", "series", "before", "co", "pull", "tag", "errors", "empty", "h", "complete", "ref", "deep", "work", "pre", "serial", "round", "network", "links", "book", "parts", "cmp", "weak", "event", "graph", "first", "rem", "them", "rec", "response", "chart", "also", "via", "new", "always", "sys", "ws", "obj", "python", "params", "unknown", "pkg", "conn", "se", "this", "private", "result", "os", "pp", "shape", "final", "history", "json", "ren", "replace", "index", "selves", "thus", "oe", "cl", "test", "changes", "comp", "object", "gh", "txt", "small", "table", "left", "print", "help", "me", "prefix", "year", "scope", "resource", "view", "proc", "data", "md", "item", "look", "kind", "ae", "sql", "rs", "eth", "urn", "nt", "debug", "raw", "ssl", "r", "resp", "filter", "console", "user", "re", "context", "mem", "size", "func", "app", "form", "e", "results", "subject", "right", "time", "cache", "w", "where", "link", "body", "own", "method", "type", "details", "partial", "diff", "views", "util", "eff", "my", "your", "all", "you", "old", "py", "dict", "au", "s", "case", "dd", "attribute", "adj", "err", "res", "xml", "github", "ass", "pair", "th", "mp", "remote", "config", "sect", "path", "change", "cho", "local", "ro", "get", "parse", "mix", "np", "block", "short", "error", "review", "instance", "sq", "log", "rel", "reverse", "handle", "entry"], "n": ["z", "f", "nn", "m", "node", "l", "nt", "t", "number", "name", "nr", "s", "N", "ns", "r", "mn", "na", "c", "index", "sn", "h", "an", "g", "cn", "nu", "nb", "ny", "num", "d", "size", "p", "j", "network", "ne", "total", "net", "it", "np", "nan", "nc", "o", "w", "no", "on", "count", "new"], "parent": ["family", "max", "name", "manager", "peer", "store", "post", "position", "source", "mother", "default", "pre", "client", "Parent", "file", "first", "known", "list", "container", "static", "new", "line", "top", "params", "child", "comment", "father", "node", "row", "buffer", "limit", "index", "master", "depth", "temp", "test", "children", "owner", "last", "parents", "current", "server", "table", "part", "pid", "scope", "unit", "map", "user", "p", "total", "seed", "time", "cache", "loc", "type", "target", "per", "tmp", "chain", "point", "page", "id", "config", "path", "pool", "host", "tip", "port", "block", "instance"], "weight": ["family", "rate", "sum", "load", "carry", "label", "density", "value", "status", "tag", "match", "mask", "like", "group", "share", "position", "wn", "work", "default", "version", "power", "gain", "sort", "speed", "feature", "fw", "mean", "average", "list", "norm", "head", "count", "style", "child", "comment", "node", "draw", "shape", "age", "limit", "aw", "index", "scale", "master", "distance", "depth", "force", "strength", "tail", "cast", "update", "data", "igh", "unit", "map", "weights", "wed", "wd", "Weight", "filter", "lock", "length", "gravity", "term", "option", "mem", "size", "process", "alpha", "package", "time", "hard", "rank", "cache", "w", "need", "link", "type", "target", "relation", "what", "score", "hold", "amount", "device", "dict", "step", "key", "switch", "direction", "mass", "config", "pool", "window", "port", "word", "wire", "money", "um", "hash", "width", "shift", "transform"], "cnt": ["rcOUNT", " cnd", "lcount", "Ccount", "CNT", " crowd", "cNT", "lcNT", "nNT", "tount", "ccount", " ccount", "rcrowd", "Cnt", " cOUNT", "Count", "tnt", "rcnt", "lcnt", "crowd", "rcNT", " count", "cOUNT", "nrowd", "lccount", " cNT", "nnt", "rcnd", "cnd", "tnd", "rcount", "tOUNT", "nount", "count"], "INF": ["inInf", "INf", " INInf", " INf", "MINf", "InN", "InFIN", "PINInf", " INFIN", "MINInf", " INFs", "MINFs", "InInf", "inFs", "inF", "PINFIN", "PINF", "INInf", "inf", "MINF", "InF", "INN", " INN", "PINN", "INFIN", "INFs"], "x": ["pr", "xp", "X", "xa", "ax", "xx", "expr", "tex", "wx", "h", "g", "foo", "ct", "cmd", "ctx", "eq", "xi", "vector", "z", "f", "el", "xy", "ext", "t", "xs", "xt", "ex", "test", "xc", "current", "batch", "px", "left", "data", "xd", "edit", "yx", "red", "l", "ix", "r", "at", "color", "fx", "re", "p", "j", "e", "xe", "xxxx", "right", "time", "w", "xf", "on", "st", "exclusive", "hex", "ux", "my", "chain", "ip", "key", "point", "xml", "dx", "fixed", "width", "id", "any", "path", "rx", "xxx", "act", "ox", "lex", "sq", "lat", "tx"], "rt": ["rent", "tmp", "pr", "rr", "rh", "xy", "rs", "t", "tt", "nt", "this", "rot", "fr", " RT", "rc", "r", "dt", "yt", "ft", "xt", "lt", "gt", "ot", "rf", "ct", "rm", "rint", "rx", "td", "RT", "ox", " r", "it", "right", "vt", "rank", "rd", "tc", "grow", "reg", "rat", "rl", "unit", "oot", "tx"], "y": ["Y", "z", "sys", "ym", "ey", "yl", "yo", "ay", "my", "xy", "chain", "py", "t", "yer", "iy", "sy", "key", "yy", "r", "ery", "ty", "yt", "ch", "c", "ys", "gy", "ies", "yi", "wy", "ny", "hey", "er", "fy", "j", "col", "hot", "ry", "ya", "story", "ye", "axy", "yr", "cy", "vy", "o", "bot", "w", "yet", "kit", "sky"], "root_x": ["parent_x", "prefix_ex", "parent_lex", "Root_z", "rootjix", "parent_name", "root_ix", "rootjlex", "parent_g", "root___ex", "prefix_ip", "rootjz", "rootpylex", "parent_wx", "root_lex", "rootpyc", "rootpyx", "root08ex", " root_ex", "root_lat", "root_bit", "prefix_ox", "root_r", "root_c", "root___g", "root08yx", "parent_y", "root___name", "rootablex", "rootty", "parent_bit", "Root_i", "parent_ix", "rootjy", "root_i", "Root_y", "root08x", "root_by", "Root_c", "root___by", "rootpyy", "root_ip", "rootableex", "root_yx", "root___y", "root08by", "roottc", "roottx", "root_wx", "root_ex", "Root_x", "rootji", "rootpyix", "rootpyr", "root_g", "prefix_x", " root_dx", "root___wx", "root_z", " root_yx", "root_dx", " root_lat", "rootabledx", "root___yx", "rootablelat", "Root_r", "root___bit", "rootjx", "roottr", " root_by", "root_ox", "root_name", "root___x"], "root_y": ["parent_x", "root0sky", "root_ies", "root_my", "root09ny", "root_client", " root_ya", "null_ys", "null_ies", "root09client", "root_ya", "rootensky", "total_ies", " root_ys", "root09y", "root_o", "parent_py", "root_xy", "root5ys", "root_ys", "root_cy", "parent_y", "root_yy", "null_sky", "parent_yy", " root_py", "root_Y", "original_Y", " root_cy", "root0ies", "parent_z", "original_my", "root_sky", "root_py", "rootxo", "root5ny", "root5client", "root09ies", "total_ny", "parent_o", "root_ey", "root5py", "total_client", "rootxyy", "rootenys", "root0y", "rootxy", "root_z", "root_ny", "root5ya", " root_Y", "null_y", "rootxx", " root_ey", " root_xy", "root5ies", "root0ys", "total_y", "original_y", "original_x", "root5y", "rootenies", "rooteny"], "info": ["type", "f", "details", "zip", "node", "order", "auto", "row", "ti", "check", "status", "history", "Info", "lock", "json", "index", "fo", "work", "id", "num", "size", "image", "bi", "inf", "information", "time", "INFO", "error", "rank", "table", "iter", "list", "data", "item", "init"], "i": ["io", "ini", "ei", "ri", "zi", "iy", "ti", "ip", "ci", "gi", "ij", "c", "oi", "ki", "yi", "di", "ik", "p", "pi", "ai", "it", "ii", "xi", "si", "ic", "li", "I", "ia", "iti", "iu", "im"], "qq": ["mu", "qt", "kg", "gm", "nn", "iq", "qa", "fine", "xy", "pkg", "ck", "hz", "bg", "kk", "quiet", "dq", "mask", "nu", "nb", "ctx", "eq", "fy", "kie", "squ", "km", "quant", "qi", "kw", "mix", "tk", "np", "aq", "nz", "quick", "sq", "iu", "qs", "qu"], "k": ["dk", "z", "K", "m", "kr", "kh", "uk", "ka", "ck", "kl", "ok", "kk", "key", "ke", "kid", "c", "mk", "ki", "g", "ik", "num", "p", "km", "j", "kw", "tk", "o", "w", "u", "sk", "ku", "ks"], "query": ["comment", "range", "node", "score", "conn", "Query", "une", "filter", "check", "db", "lock", "match", "open", "random", "depth", "select", "work", "num", "qi", "parse", "inner", "rank", "sq", "where", "prime", "qu"], "tree": ["out", "obj", "tmp", "child", "node", "t", "name", "common", "dict", "Tree", "status", "lock", "match", "index", "split", "ree", "depth", "j", "total", "table", "connection", "prime", "data", "entry"], "a": ["ba", "apa", "am", "ae", "ta", "sta", "af", "au", "ga", "xa", "ax", "A", "ca", "la", "c", "ea", "va", "ao", "e", "sa", "ai", "aq", "aa", "aj", "ab", "aaa", "ar", "an", "aff", "aba"], "b": ["z", "f", "rb", "ba", "m", "l", "t", "bc", "s", "r", "fb", "c", "g", "d", "p", "bi", "j", "bf", "e", "beta", "o", "bs", "u", "B", "ab", "bb", "eb"], "cost": ["z", "f", "add", "sum", "node", "acc", "bc", "ix", "key", "value", "co", "dx", "c", "index", "fo", "cc", "ind", "size", " c", "j", "total", "qi", "inf", "aa", "ac"], "root": ["rate", "core", "max", "roots", "intern", "peer", "value", "tag", "store", "start", "group", "default", "round", "just", "average", "first", "bot", "container", "head", "oot", "project", "top", "child", "node", "cut", "domain", "result", "rc", "rap", "index", "scale", "split", "ot", "depth", "string", "join", "hook", "owner", "server", "main", "table", "grow", "register", "prefix", "wrap", "scope", "data", "unit", "box", "copy", "cover", "color", "leaf", "zero", "bin", "seed", "right", "locked", "rank", "target", "super", "bank", "host", "tip", "Root", "ox", "cross", "align", "home", "stop", "prime", "handle", "base"]}}
{"code": "n, x = map(int, input().split())\\nA = list(map(int, input().split()))\\n\\nA.sort()\\nans = 0\\nfor a in A:\\n    x -= a\\n    if x < 0:\\n        break\\n    else:\\n        ans += 1\\nif 0 < x:\\n    ans -= 1\\n\\nprint(max(ans, 0))\\n", "target": "100", "substitutes": {"n": ["z", "nn", "m", "l", "y", "t", "name", "nr", "N", "ns", "mn", "k", "v", "na", "c", "sn", "h", "b", "g", "cn", "nb", "num", "d", "p", "j", "nc", "o", "w"], "x": ["z", "f", "max", "xes", "m", "xp", "X", "xy", "pan", "y", "t", "l", "ix", "xs", "s", "xa", "i", "xx", "ax", "ns", "k", "step", "input", "v", "check", "xt", "dx", "na", "wx", "ex", "p", "rx", "act", "xc", "e", "ox", "cox", "int", "xi", "w", "px", "xf", "an", "tx", "inx"], "A": ["Y", "AA", "Ar", "H", "C", "X", "AC", "R", "G", "But", "N", "M", "Abs", "What", "CA", "Some", "JA", "NA", "S", "E", "O", "As", "D", "All", "AT", "Array", "AF", "L", "GA", "An", "mA", "P", "Even", "AM", "This", "You", "T", "SA", "The", "AB", "AP", "V", "One", "Alpha", "B", "Answer", "AE"], "ans": ["ens", "anon", "ls", "names", "mas", "vers", "ones", "cs", "rs", "cons", "amps", "xs", "s", "ins", "anas", "ms", "aus", "ons", "ns", "outs", "ann", "os", " Ans", "aps", "aos", "arts", "co", "ents", "ums", "rans", "yes", "vs", "ANS", "ds", "ox", "uns", "offs", "anes", "actions", "ats", "orders", "ros", "ts", "anks", "an", "ks", "ants", "olds"], "a": ["z", "ba", "apa", "fa", "ae", "ta", "y", "t", "sta", "au", "af", "xa", "i", "ca", "la", "at", "pa", "wa", "ea", "index", "va", "p", "ao", "j", "oa", "\u00e4", "ai", "sa", "ya", "aa", "ac", "o", "ma", "u", "ia", "ar", "ana", "an"]}}
{"code": "import sys\\n\\n\\nQ = int(input())\\npair = []\\n\\nMAX = 0\\nfor i in range(Q):\\n    l, r = map(int, input().split())\\n    MAX = max(MAX, l, r)\\n    pair.append((l, r))\\n\\nN = 101010\\nN = 25\\nN = MAX + 1\\nis_prime = [1 for i in range(N)]\\n\\nis_prime[0] = is_prime[1] = 0\\n\\n# sieve\\nfor i in range(2, N):\\n    if not is_prime[i]:\\n        # 0, 1, 4, 6, 9, ...\\n        continue\\n    for j in range(i*2, N, i):\\n        #print(j)\\n        is_prime[j] = 0\\n#print('sieve')\\n#print(is_prime)\\n\\n# 2017-like\\na = [0 for i in range(N)]\\nfor i in range(N):\\n    if i % 2 == 0:\\n        continue\\n    if is_prime[i] and is_prime[(i+1) // 2]:\\n        a[i] = 1\\n#print('2017')\\n#print(a)\\n\\n# accum\\ns = [0]\\nfor i, n in enumerate(a):\\n    s.append(s[i] + n)\\ns.pop(0)\\n#print('accum')\\n#print(s)\\n\\n# Query\\n#print(pair)\\n#print('ANS')\\nfor l, r in pair:\\n    print(s[r] - s[l-1])\\n\\n", "target": "617", "substitutes": {"Q": ["Y", "QU", "Qual", "K", "CH", "MQ", "H", "FF", "X", "F", "R", "G", "Check", "Query", "M", "A", "QL", "q", "S", "D", "UK", "L", "QB", "P", "T", "J", "Z", "V", "I", "B", "Qu", "UE", "IQ"], "pair": ["map", "create", "side", "diff", "qual", "GROUP", "both", "result", "key", "single", "enter", "lock", "place", "match", "replace", "split", "air", "inter", "cur", "p", "quad", "ARE", "join", "airs", "P", "USE", "parse", "equal", "batch", "coord", "KEY", "part", "set", "list", "prefix", "prime"], "MAX": ["MIN", "TR", "max", "ALL", "GEN", "X", "AN", "MX", "Maximum", "ENDED", "R", "CONT", "W", "MT", "NEW", "MR", "CR", "M", "NV", "NR", "DATA", "MED", "SIZE", "Max", "NA", "REM", "TH", "RE", "ANY", "MAP", "ND", "EX", "NULL", "L", "END", "INT", "maximum", "MA", "IL", "UN", "OR", "MODE", "Z", "V", "OUT", "NUM", "BER", "NAME", "TER", "VALUE", "NO", "VERSION", "IN"], "i": ["f", "ini", "ri", "zi", "iy", "ti", "ip", "ci", "ji", "gi", "ij", "c", "ki", "b", "yi", "ind", "di", "ik", "bi", "pi", "e", "ai", "it", "ii", "xi", "n", "ic", "li", "I", "u", "iter", "x", "iu", "im"], "l": ["lit", "ld", "ls", "el", "le", "m", "lin", "lis", "kl", "la", "lb", "sl", "lu", "lt", "ln", "lc", "g", "tl", "lo", "ml", "L", "lp", "pl", "lon", "hl", "lr", "al", "n", "loc", "li", "left", "nl", "rl", "ll"], "r": ["rb", "pr", "m", "rr", "rg", "sr", "cr", "R", "red", "rs", "t", "nr", "rect", "fr", "rc", "res", "v", "ren", "h", "q", "b", "g", "ref", "re", "er", "d", "p", "br", "j", "ro", "ry", "run", "n", "rd", "mr", "vr", "u", "w", "rel", "dr", "rar", "ar", "rt"], "N": ["Y", "K", "C", "X", "AN", "F", "R", "G", "Ni", "CNN", "NB", "NI", "M", "NV", "NR", "CN", "A", "Max", "NL", "NP", "NA", "NW", "S", "E", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "T", "GN", "J", "n", "Z", "V", "I", "B", "NUM", "NC", "Ns", "NO", "NN", "NPR"], "is_prime": ["is2prime", " is_primary", "is_primary", "is_none", "is2meg", "Is2prime", "Is_pr", "Is2Prime", "is2zero", " is_zero", "Is2meg", "is2primary", "Is_none", "Is_one", "Is2pr", "is_pr", "is_zero", "is_one", "Is_meg", "is_Prime", "is2pr", "is2Prime", "Is_Prime", "is_meg", " is_Prime", "Is_prime"]}}
{"code": "mod = 10**9+7\\nh,w = map(int,input().split())\\ngrid = [[l == \"#\" for l in list(input())] for _ in range(h)]\\ndp = [[0]*w for _ in range(h)]\\ndp[0][0] = 1\\nfor s in range(1,h+w):\\n  for i in range(max(0,s-w+1),min(h,s+1)):\\n    j = s-i\\n    if grid[i][j]:\\n      continue\\n    if i == 0:\\n      dp[i][j] = dp[i][j-1]\\n    elif j == 0:\\n      dp[i][j] = dp[i-1][j]\\n    else:\\n      dp[i][j] = (dp[i][j-1]+dp[i-1][j])%mod\\nprint(dp[-1][-1]%mod)", "target": "273", "substitutes": {"mod": ["add", "max", "med", "sum", "m", "util", "sign", "pad", "dig", "cond", "day", "debug", "month", "row", "ms", "step", "modified", "module", "dd", "ver", "div", "check", "perm", "secure", "tag", "complex", "scale", "ex", "temp", "sim", " Mod", "pre", "d", "size", "fun", "round", "man", "dir", "com", "mt", "form", "Mod", "ident", "mode", "fac", "od", "MOD", "var", "log", "mag", "set", "prime", "mods", "base", "fd"], "h": ["z", "max", "he", "H", "m", "kh", "y", "t", "ha", "hei", "bh", "r", "k", "v", "hs", "c", "hi", "q", "b", "zh", "g", "th", "hd", "d", "ih", "p", "height", "ht", "oh", "hw", "hl", "dh", "n", "hr", "o", "hh", "dr", "sh", "x"], "w": ["z", "nw", "ws", "iw", "wm", "win", "m", "wh", "wed", "t", "W", "wd", "tw", "len", "sw", "r", "k", "v", "wa", "wx", "q", "wl", "g", "wb", "wy", "wr", "d", "p", "window", "rw", "hw", "kw", "wt", "wid", "fw", "weight", "n", "wp", "x", "wi", "width"], "grid": ["map", "gm", "gate", "df", "node", " grids", "ha", "wd", "domain", "gp", "dim", "dt", "gr", "tp", "db", "pipe", "gi", "tile", "mask", "dq", "lay", "group", "g", "gc", "du", "pool", "func", "layer", "sb", "addr", "np", "rid", "weight", "graph", "ad", "coord", "Grid", "lat", "dr", "list", "qq"], "l": ["lit", "ol", "ld", "ls", "yl", "jl", "le", "m", "label", "t", "lin", "kl", "lang", "len", "il", "lb", "la", "v", "url", "sl", "c", "ln", "b", "lc", "g", "lo", "ml", "p", "L", "lp", "local", "e", "hl", "n", "loc", "o", "li", "left", "nl", "list", "x", "rl", "ll"], "_": ["f", "let", "m", "ly", "all", "ing", "py", "un", "__", "g", "ex", "val", "ml", "mt", "get", " the", "net", "___", "non", "list", "ation"], "dp": ["ps", "pt", "deb", "adr", "bsp", "df", "pkg", "wd", "dos", "dict", "gp", "pb", "dd", "pp", "ip", "jp", "dt", "tp", "gr", "db", "pipe", "vp", "dq", "pm", "fp", "csv", "dm", "pd", "d", "dl", "p", "dep", "pat", "ds", "cp", "lp", "tap", "dial", "dc", "np", "DP", "dh", "bps", "px", "dj", "dr", "wp", "pn", "hp"], "s": ["z", "ps", "sys", "f", "sv", "ls", "m", "a", "y", "t", "rs", "gs", "xs", "ms", "ns", "sw", "r", "v", "sp", "sd", "sl", "c", "hs", "q", "b", "g", "S", "d", "p", "ss", "ds", "sb", "si", "n", "o", "sq", "u", "ats", "sh", "x", "ts", "js"], "i": ["z", "io", "ini", "ei", "iso", "ri", "zi", "m", "cli", "ir", "a", "y", "ix", "ti", "info", "ip", "ci", "\u0438", "key", "at", "v", "gi", "status", "ij", "hi", "index", "b", "phi", "g", "yi", "ind", "id", "di", "ik", "ih", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "o", "li", "I", "ia", "u", "iter", "x", "ui", "mi", "iu", "im", "item"], "j": ["z", "f", "str", "obj", "ion", "jl", "pr", "a", "ja", "y", "t", "ret", "note", "fr", "key", "step", "jp", "k", "ji", "adj", "err", "res", "v", "r", "json", "ij", "index", "q", "b", "g", "ind", "ijk", "er", "di", "d", "next", "p", "br", "kj", "e", "it", "jj", "dt", "jump", "aj", "J", "n", "si", "o", "uj", "dj", "rel", "bj", "js", "jc"]}}
{"code": "MM = input().split()\\nX = int(MM[0])\\nY = int(MM[1])\\nZ = int(MM[2])\\nx = 0\\nwhile True:\\n  if x*(Y+Z)+Z >X:\\n    break\\n  else:\\n    x +=1\\nprint(x-1)", "target": "101", "substitutes": {"MM": ["DB", "IME", "FM", "MP", "MX", "PM", "MT", "SM", "MR", "ML", "LM", "MRI", "MI", "MN", "MC", "FORM", "MAT", "MF", "RAM", "SIM", "WM", "Hmm", "MB", "MIC", "VM", "TM", "OM", "INK", "UM", "MA", "AM", "IM", "MS", "XM", "MAN", "LI", "DM", "STEM", "RM", "mm", "BM", "AME", "MW", "EM", "MD"], "X": ["UX", "K", "H", "C", "XL", "MX", "R", "XY", "N", "M", "A", "U", "XXX", "S", "DX", "E", "ZZ", "OK", "EX", "L", "P", "INT", "Q", "T", "XP", "XX", "V", "I", "IX", "TX", "VALUE", "XT"], "Y": ["SY", "TY", "AY", "HY", "MX", "YP", "EY", "y", "XY", "N", "Cy", "Py", "YA", "YD", "YS", "Year", "My", "IES", "NY", "YES", "GREEN", "YC", "J", "Yo", "FY", "I", "V", "B", "IE", "BY", "YY", "MY"], "Z": ["z", "BS", "K", "AZ", "UX", "H", "C", "FF", "SS", "MX", "F", "SL", "G", "Az", "W", "Zip", "OS", "N", "M", "ZA", "SEC", "IZ", "U", "TH", "ONES", "S", "DX", "ZZ", "ZI", "D", "US", "L", "BOX", "USE", "Q", "NZ", "Zone", "ZX", "T", "GREEN", "J", "XX", "V", "FL", "B", "BY", "YY", "UID"], "x": ["z", "max", "xes", "m", "xp", "xy", "y", "t", "number", "ix", "xs", "sex", "xa", "i", "xx", "xb", "xxxxxxxx", "v", "xt", "dx", "wx", "c", "index", "long", "q", "ex", "ct", "id", "num", "\u00e7", "p", "rx", "com", " xx", "xc", "ox", "xe", "int", "xi", "n", "w", "xf", "im", "xd", "tx"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\nans = int(1e18)\\nfor i in range(101):\\n    cnt = 0\\n    for j in range(n):\\n        cnt += (a[j]-i)**2\\n    ans = min(ans,cnt)\\n    cnt = 0\\n    for j in range(n):\\n        cnt += (a[j]+i) **2\\n    ans = min(ans,cnt)\\nprint(ans)\\n", "target": "548", "substitutes": {"n": ["z", "nn", "m", "l", "nt", "t", "nr", "s", "N", "ns", "mn", "k", "r", "v", "na", "c", "sn", "q", "b", "h", "g", "cn", "nu", "nb", "num", "d", "p", "pi", "ne", "e", "net", "np", "nan", "nc", "o", "w", "no", "nl", "x"], "a": ["ba", "apa", "array", "ap", "am", "ae", "att", "sta", "au", "ga", "xa", "aus", "A", "at", "history", "c", "b", "aux", "area", "p", "alpha", "ao", "app", "act", "oa", "ai", "sa", "aa", "up", "ac", "abs", "ma", "ia", "ab", "aaa", "an", "data"], "ans": ["ens", "wan", "nn", "cas", "ls", "nets", "mas", "aned", "vers", "AN", "ones", "oss", "anc", "cs", "rs", "lan", "amps", "xs", "s", "ins", "anas", "ms", "aus", "ns", "ons", "mn", "ann", "os", "outs", "news", "aps", "aos", "arts", "beans", "na", "es", "ians", "angs", "ums", "sn", "eds", "cn", "vs", "ANS", "nas", "ai", "uns", "helps", "offs", "anes", "nan", "ams", "mos", "bs", "books", "ces", "ates", "ats", "nl", "asms", "ros", "x", "eas", "ions", "an", "ks", "ants", "olds", "jas", "ows"], "i": ["io", "ei", "ini", "jl", "zi", "m", "l", "y", "ti", "ip", "ci", "ji", "gi", "v", "ij", "ki", "yi", "ind", "di", "ik", "p", "bi", "pi", "qi", "e", "ai", "it", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "x", "mi", "iu", "im"], "cnt": ["cst", "cachect", "kwnt", "Cpt", "connt", "pcmd", "cnc", "pcnc", "ckt", " ckt", "kwkt", "icnt", "Cnc", " cpt", "icmd", "cNT", "icct", "Cct", "cld", "lcNT", "bckt", "crpt", "contct", "Cnt", "pcNT", "crct", "bcnt", "cmd", "conobj", "lcnc", " cld", "kwst", "crnt", "conmd", "lcnt", "bcst", " cst", "icNT", "pcld", "contnt", " cNT", "cachent", "crnc", "lcld", " cnc", " cobj", "cct", " cct", "conct", "icobj", "pcnt", " cmd", "cobj", "cpt"], "j": ["z", "f", "obj", "ion", "jl", "pr", "m", "ja", "y", "t", "yy", "jp", "k", "ji", "v", "json", "ij", "c", "job", "q", "b", "h", "je", "g", "ie", "p", "oj", "jo", "kj", "it", "jj", "jump", "aj", "J", "o", "ju", "uj", "dj", "li", "x", "bj", "js", "jc"]}}
{"code": "N=int(input())\\n*D,=map(int,input().split())\\nM=max(D)\\nfrom collections import*\\nC=Counter(D)\\n\\nans=1\\nnow=C[1]\\nfor i in range(2,M+1):\\n    ans*=pow(now,C[i],998244353)\\n    ans%=998244353\\n    now=C[i]\\n\\nif D[0]!=0:\\n    ans=0\\nif 0 in D[1:]:\\n    ans=0\\nprint(ans)", "target": "480", "substitutes": {"N": ["Y", "X", "F", "R", "G", "W", "Ni", "NR", "S", "E", "O", "ND", "NS", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NN"], "D": ["Y", "DN", "AND", "DL", "VD", "DB", "PD", "X", "F", "R", "Do", "G", "DF", "DD", "FD", "A", "Ds", "DA", "CD", "S", "DX", "E", "O", "DIR", "DS", "d", "L", "TD", "P", "Q", "AD", "T", "DM", "DP", "V", "I", "B", "LD", "DE", "DC", "DO", "DI"], "M": ["Y", "K", "m", "MP", "MX", "F", "R", "G", "MT", "CM", "MI", "MC", "U", "MM", "S", "E", "O", "L", "NM", "OM", "P", "Q", "MS", "T", "DM", "J", "V", "I", "B"], "C": ["Che", "H", "CO", "Ch", "F", "R", "G", "CNN", "Cs", "CP", "CM", "A", "MC", "c", "CU", "CV", "GC", "CD", "S", "E", "O", "Counter", "CT", "L", "CC", "P", "LC", "T", "Co", "Cache", "YC", "Col", "V", "I", "B", "CS", "KC", "JC", "NC", "WC", "DC", "CG"], "ans": ["ens", "ps", "ls", "oos", "names", "Ann", "flags", "aned", "vers", "AN", "ones", "oss", "cs", "rs", "cons", "amps", "gs", "iann", "s", "ms", "os", "ins", "aus", "ons", "ns", "reads", "ann", "ars", "outs", "aps", "news", "beans", "arts", "aos", "ents", "ians", "was", "rans", "ays", "eds", "posts", "yes", " means", "terms", "ANS", "ds", "nas", "uns", "offs", "anas", "ads", "ats", "eas", "us", "ros", "vals", "an", "ks", "ants", "olds"], "now": ["gm", "max", "obj", "tmp", "off", "when", "date", "here", "Now", "node", "draw", "NOW", "old", "tt", "day", "ow", "this", "af", "hold", "age", "at", "before", "aw", "store", "start", "fore", "we", "pre", "next", "cur", "clear", "null", "local", "still", "self", "seed", "current", "then", "today", "time", "aj", "nc", "delay", "pres", "save", "on", "ready", "count", "new"], "i": ["f", "ini", "zi", "m", "l", "y", "ix", "ti", "info", "ip", "r", "k", "ji", "gi", " j", "v", "ij", "c", "ori", "index", "q", "b", "yi", "ind", "id", "di", "p", "bi", "j", "pi", "ai", "it", "ii", "xi", "n", "si", "ic", "I", "li", "x", "ui", "mi", "multi"]}}
{"code": "x1,y1,x2,y2 = map(int,input().split())\\nx3 = x2 - (y2-y1)\\ny3 = y2 + (x2-x1)\\nx4 = x1 - (y2-y1)\\ny4 = y1 + (x2-x1)\\nprint(x3,y3,x4,y4)", "target": "62", "substitutes": {"x1": [" xfirst", "x01", "ox1", "rx11", " xOne", "ux01", "ex1", "ix3", "ex2", "rx001", "xOne", "x11", "ixOne", "l001", " xric", "oxOne", " x001", "xfirst", "x001", "ux001", "rx1", "ox001", "xxfirst", "ox11", "exfirst", "xx1", "xx3", "ixric", "z001", "ux1", "ux11", "xric", "ix1", "ex3", "ox3", "z1", "l3", "rx01", "l1", "ox01", "z2", "oxric", "l2", "z3", "xx2"], "y1": ["oyone", " yone", "yy6", "y101", "Y3", "x0", "iyOne", "y0", "ye101", "Y4", " y0", "ny6", "oy101", "Y2", "Y0", "y01", " y101", "ny1", "oy1", "ye01", "oy01", "ny3", "yy2", "yy4", "nyOne", "yy1", "Y1", "iy3", "yyOne", "yeone", "yOne", "y6", " y01", "iy6", "iy1", "yy3", "yone", "ye1"], "x2": ["x02", "ex4", "name2", "ytwo", "ex1", "ex2", "extwo", "rx3", "nametwo", "rx1", "rx4", "name1", "on02", "ext2", "on2", "rx2", " xtwo", "name4", "exttwo", "xtwo", "ex02", "y02", "ontwo", "on1", "ext1"], "y2": ["cy02", "x02", "my2", "cyuser", "y5", "yer102", "ylet", "cy1", "iyuser", "ay2", "yy5", "my02", " y5", "yuser", "yer02", "py2", "my4", " y02", "my102", "yy2", "yy102", "yy4", "ay5", "xuser", "yy02", "aylet", "py4", "iy02", "yer4", "yer2", "y02", "iy1", "yylet", " ylet", "py5", "iy2", "y102", "py02", "ay4", "cy2"], "x3": [" x83", "ox03", "ix3", "ex03", "rx3", "ox33", " x003", "ox003", "ex33", "ix003", "xi3", "xi83", "x003", "x03", "ex3", "rx33", "ox3", "xi2", "ex003", "rx03", "x83", "rx003", "xi003", "x33", "ix83", "ix2"], "y3": ["sky3", "skyThird", "ery50", " yThird", "skyThree", "yThree", "y50", "ryThird", "sky1", "vyRes", "vyRight", "iyRes", "iy50", "eryRight", "ery3", "vy3", " yThree", "ryThree", "ry3", "yThird", "yRight", "vy50", "iyRight", "iy3", "ry1", "yRes", "eryRes"], "x4": ["ox256", "ix94", "ox4", "x40", "xi4", "ixFour", "x94", "ax4", "axFour", "ax40", "xiFour", " x256", " xFour", "x256", " x40", " x94", "xFour", "oxFour", "ix4", "ox94", "xi40", "ix256", "xi384", "x384", " x384", "ax384"], "y4": ["yy6", "yyCrit", "y40", "ey6", "ayCrit", "ey422", "sky422", "y422", "eyCrit", "ny4", "ay40", "yy4", "ny422", "sky4", "yCrit", "skyfour", "ey40", "yfour", "ay6", "ey4", "y6", "ay4", "yy40", "nyfour", "eyfour"]}}
{"code": "MOD = 10**9 + 7\\n\\ns = input()\\nn = len(s)\\n\\ndp = [[0]* 13 for i in range(n+1)]\\ndp[0][0] = 1\\n\\nfor i in range(n):\\n    if s[i] != '?':\\n        for j in range(13):\\n            a = s[i]\\n            a = int(a)\\n            keta = (j*10 + a) % 13\\n            dp[i+1][keta] += dp[i][j]\\n            dp[i+1][keta] %= MOD\\n    else:\\n        for j in range(13):\\n            for k in range(10):\\n                keta = (j*10 + k) % 13\\n                dp[i+1][keta] += dp[i][j]\\n                dp[i+1][keta] %= MOD\\n                \\nprint(dp[n][5] % MOD)", "target": "798", "substitutes": {"MOD": ["RR", "MIN", "SET", "TR", "K", "LOG", "PD", "UPDATE", "MAC", "MAL", "ED", "MT", "FD", "MR", "DJ", "M", "MAX", "LED", "MC", "MED", "FORM", "FIN", "MAT", "COMPLE", "RO", "REM", "ID", "OD", "VER", "mod", "OK", "DX", "DIR", "MAP", "RE", "SPEC", "PUT", "OFF", "TM", "TD", "LOCK", "Mod", "DR", "RED", "UN", "JUST", "MAS", "MODE", "MS", "OR", "LOD", "RM", "TAG", "NUM", "JSON", "VALUE", "BN", "MD", "Mods", "LL", "POS"], "s": ["ps", "sts", "sv", "ws", "ls", "m", "fs", "l", "rs", "t", "y", "gs", "xs", "os", "ms", "ns", "r", "aps", "strings", "sp", "v", "sd", "sl", "c", "ys", "h", "b", "g", "S", "d", "p", "ss", "ds", "e", "sa", "sb", "ses", "si", "bs", "w", "ats", "ts", "qs", "js"], "n": ["z", "nn", "m", "ni", "l", "nt", "t", "name", "nr", "N", "len", "ns", "mn", "r", "en", "fn", "v", "ul", "na", "c", "ln", "sn", "g", "wn", "nu", "nb", "num", "d", "size", "p", "ne", "np", "nan", "nc", "o", "ic", "no", "nl"], "dp": ["dk", "ps", "pt", "deb", "adr", "bsp", "df", "wd", "dos", "pb", "gp", "dd", "dro", "pp", "ssl", "jp", "dt", "tp", "db", "pipe", "vp", "dq", "pm", "fp", "eb", "csv", "imp", "isp", "dm", "pd", "d", "de", "dl", "p", "dep", "dn", "ds", "lp", "cp", "dial", "dc", "np", "DP", "dh", "bps", "delay", "dj", "lat", "dr", "wp", "lists", "xd", "hp"], "i": ["f", "io", "ini", "ei", "zi", "\u00ed", "m", "ir", "l", "y", "t", "this", "ix", "name", "ti", "info", "ip", "ci", "\u0438", "ji", "at", "v", "gi", "status", "ij", "c", "index", "b", "ami", "ie", "ind", "id", "di", "ik", "p", "bi", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "batch", "list", "x", "iti", "mi", "iu", "im", "ui"], "j": ["z", "obj", "ion", "jl", "m", "ja", "jit", "l", "y", "t", "ix", "key", "jp", "ji", "r", "at", "v", "json", "ij", "c", "h", "q", "b", "g", "jac", "ie", "ind", "ik", "d", "p", "bi", "br", "oj", "kj", "e", "ai", "it", "jj", "jump", "aj", "J", "o", "ju", "uj", "dj", "li", "x", "bj", "js", "jc"], "a": ["z", "ba", "apa", "fa", "m", "am", "ae", "ta", "ka", "l", "y", "t", "sta", "au", "xa", "ca", "A", "at", "la", "v", "pa", "c", "ea", "b", "area", "d", "va", "p", "alpha", "ao", "oa", "e", "av", "sa", "ai", "aa", "aj", "al", "ac", "ma", "u", "ia", "x", "ar", "an"], "keta": ["neta", "keed", "kena", "littleama", "kera", "kerva", " ketacha", "ketarea", "kerea", "neted", "keama", "kati", "koki", "klpa", "ktas", "koked", "petb", "kenwa", "kokarea", "keacha", "kenan", "ktan", "peta", "kea", "ketb", " ketva", "ketan", "kenama", "kei", "ketea", "keva", "kab", "keti", "kapa", "katama", "keni", "keza", "ketza", "kenas", "petpa", "ketama", "katza", "kokama", "klas", "littlearea", "keted", "ketas", "ketpa", "kean", "littlewa", "ktza", "kokas", "kti", "koka", "keea", "ketwa", "keracha", "kata", "kaa", "kla", "kokwa", "ktama", " ketea", "ketacha", "keas", "kenarea", "neti", "netas", "kta", "klb", "littlea", "kaas", "petas", "ketva"], "k": ["z", "f", "kg", "K", "kat", "m", "kr", "kt", "kh", "uk", "ka", "y", "t", "ck", "kl", "ok", "key", "kk", "ke", "v", "kar", "ket", "c", "ki", "q", "h", "g", "ak", "kn", "ijk", "ik", "p", "km", "kj", "ek", "kw", "tk", "o", "sk", "ko", "ku", "ks"]}}
{"code": "n = int(input())\\na, b = map(int, input().split())\\np = [int(_) for _ in input().split()]\\n\\nnum1, num2, num3 = 0, 0, 0\\nfor i in p:\\n    if i <= a:\\n        num1 += 1\\n    elif b+1 <= i:\\n        num3 += 1\\n    else:\\n        num2 += 1\\nprint(min(num1, num2, num3))", "target": "372", "substitutes": {"n": ["z", "f", "nn", "m", "ni", "l", "t", "N", "ns", "nm", "k", "v", "na", "c", "sn", "q", "nu", "nb", "num", "d", "j", "e", "np", "nc", "o", "w", "x"], "a": ["ba", "apa", "m", "ap", "ae", "ta", "l", "y", "t", "s", "A", "r", "at", "v", "c", "ea", "an", "ao", "oa", "e", "ai", "sa", "aa", "ac", "ma", "ia", "ab", "aaa", "x", "ar", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "bp", "cb", "r", "v", "c", "h", "g", "nb", "d", "bi", "j", "e", "sb", "o", "bs", "B", "ab", "bb", "eb"], "p": ["op", "ps", "f", "pe", "out", "pt", "pr", "m", "ap", "l", "pan", "t", "pos", "pb", "pp", "jp", "tp", "r", "k", "v", "sp", "pa", "c", "h", "q", "fp", "mp", "j", "pi", "lp", "pl", "P", "it", "np", "o", "wp", "x", "pn"], "_": [" name", " prefix", "sing", "out", " un", "m", "____", "l", "parent", "nt", "name", "t", "ip", "len", "r", "k", "v", "status", " any", " self", "na", "length", " __", "long", "index", "h", " each", "val", "id", " new", "j", " parent", "self", " the", " example", "nan", " data", " all", "w", " pre", " other", "x", "prefix", " mi", " info", "new", " index"], "num1": ["NUM3", "number2", " num5", "um1", "n1", "Num11", "mon0", "NUM1", "um11", "n0", " num11", "n41", "nOne", " num41", "um4", "NUM2", "mon41", "numOne", "num5", "num4", "Num4", "mon1", "Num1", "number3", "number5", " num4", "umOne", "number1", " numOne", "num11", "NUM5", "monOne", "num0", "num41", "NumOne", " num0"], "num2": ["NUM3", " num5", "termb", " numb", "term52", "num02", "term2", "um2", "um0", "NUMobj", "term3", "NUM1", "um5", "NUM0", "numobj", "sumobj", "sum2", "NUM2", " num02", "sum1", "num5", "um02", "sum3", "um52", "numb", "num52", "NUM02", "um3", "umb", " numobj", "NUM5", " num52", "num0", " num0"], "num3": ["num6", " num5", "number03", "Num43", "um1", " num03", "n1", "n5", "Num3", "um5", "um43", "number003", " num43", "number4", "num03", " num003", "um4", "num003", "num5", "num43", "num4", "n3", "um03", "number3", "n6", " num4", "um3", "Num5", "um003", "Num03", "um6", " num6"], "i": ["z", "f", "ini", "ei", "ib", "zi", "m", " bi", "iii", "l", "y", "t", "ix", "ti", "s", "ci", "v", " j", "pa", "ij", "c", "phi", "di", "d", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "x", "mi", "iu"]}}
{"code": "n,k = [int(i) for i in input().split()]\\ntd = [[int(i) for i in input().split()] for _ in range(n)]\\n\\n###d\u304c\u5927\u304d\u3044\u9806\u306b\u30bd\u30fc\u30c8\\ntd.sort(key = lambda x: x[1],reverse=True)\\n\\n###\u5404t\u3067d\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u683c\u7d0d\\nfix_eated_d=[]\\n###\u5404t\u3067d\u304c\u6700\u5927\u3067\u306a\u3044\u3082\u306e\u3092\u683c\u7d0d\u3002t\u306e\u7a2e\u985e\u3092\u5897\u3084\u3059\u969b\u306e\u524a\u9664\u5019\u88dc\\nchange_eated_d=[]\\n\\neated_t = set()\\nd_point = 0\\n\\n###\u307e\u305ad\u3092\u6700\u5927\u5316\\nfor t,d in td[:k]:\\n  \\n  ###\u3059\u3067\u306bt\u304c\u9078\u3070\u308c\u3066\u3044\u308b\u306a\u3089\u6700\u5927\u306ed\u3067\u306f\u306a\u3044\u306e\u3067change\u3078\\n  if t in eated_t:\\n    change_eated_d.append(d)\\n    \\n  ###\u307e\u3060t\u304c\u9078\u3070\u308c\u3066\u3044\u306a\u3044\u306a\u3089\u6700\u5927\u306ed\u3060\u304b\u3089fix\u3078\\n  else:\\n    fix_eated_d.append(d)\\n    eated_t.add(t)\\n    \\n  d_point += d\\n  \\npoint = len(eated_t)**2 + d_point\\n\\n###t\u306e\u7a2e\u985e\u3092\u5897\u3084\u3059\\nfor t,d in td[k:]:\\n  ###\u524a\u9664\u5019\u88dc\u304c\u306a\u304f\u306a\u308c\u3070\u7d42\u4e86\\n  if not change_eated_d:\\n    break\\n  \\n  ###\u3059\u3067\u306bt\u304c\u9078\u3070\u308c\u3066\u3044\u308b\u306a\u3089skip\\n  if t in eated_t:\\n    continue\\n    \\n  ###\u307e\u3060t\u304c\u9078\u3070\u308c\u3066\u3044\u306a\u3044\u306a\u3089\u8ffd\u52a0\u3001change\u4e2dd\u304c\u6700\u5c0f\u306e\u3082\u306e\u3092\u524a\u9664\\n  eated_t.add(t)\\n  d_point += d - change_eated_d.pop()\\n  point = max(point, len(eated_t)**2 + d_point)\\n  \\nprint(point)\\n\\n\\n", "target": "466", "substitutes": {"n": ["nn", "nia", "names", "m", "l", "nt", "t", "nr", "N", "fn", "ns", "mn", "nm", "v", "na", "c", "ln", "sn", "nd", "cn", "nu", "nb", "num", "nv", "d", "p", "dn", "j", "ne", "np", "nan", "nc", "o", "no", "pn", "count"], "k": ["z", "K", "m", "kind", "uk", "ka", "kl", "ok", "kk", "v", "mk", "ki", "q", "kn", "ak", "ik", "p", "km", "j", "ek", "tk", "w", "sk", "ko", "ku", "ks"], "i": ["ini", "ei", "ri", "zi", "\u00ed", "m", "uri", "l", "t", "ti", "\u0438", "ip", "ci", "ji", "v", "gi", "ij", "c", "oi", "ki", "phi", "yi", "ie", "id", "di", "ik", "d", "p", "bi", "j", "pi", "ai", "int", "ii", "xi", "si", "iri", "ic", "li", "I", "ia", "x", "iti", "mi", "iu", "im"], "td": ["dk", "ld", "pt", "ta", "df", "bd", "dd", "dt", "tp", "sd", "nd", "th", "kn", "tn", "ind", "di", "pd", "dl", "ds", "cd", "od", "tk", "dh", "tr", "tc", "ad", "ts", "dat"], "_": [" un", " key", "ix", " m", " j", " __", " p", " e", " time", " c", " new", "j", " l", " z", " x", " non", "x", " y", " index"]}}
{"code": "s = input()\\n\\nfor i in range(len(s)-1):\\n    if s[i:i+2] == 'AC':\\n        print('Yes')\\n        exit()\\n\\nprint('No')\\n\\n", "target": "384", "substitutes": {"s": ["f", "ps", "sts", "str", "sv", "ws", "ls", "ares", "fs", "a", "rs", "t", "name", "gs", "ins", "ms", "ns", "strings", "v", "hs", "gins", "tests", "b", "eds", "g", "ands", "S", "bits", "string", "ches", "p", "ains", "ss", "parts", "erences", "sb", "ashes", "its", "ses", "uts", "n", "abs", "bs", "sq", "w", "tes", "ats", "als", "ts", "js", "qs", "data", "text"], "i": ["f", "ini", "zi", "\u00ed", "m", "uri", "l", "y", "ix", "iy", "ti", "ci", "gi", " j", "ij", "ori", "index", "oi", "q", "phi", "yi", "sim", "ind", "id", "di", "ik", "iat", "bi", "j", "pi", "fi", "qi", "ai", "uli", "si", "xi", "ic", "li", "I", "iter", "x", "on", "mi", "iu", "im"]}}
{"code": "x = int(input())\\nreached, ans = 0, 0\\nwhile reached < x:\\n    reached += ans\\n    if reached >= x:\\n        break\\n    ans += 1\\n    # print(reached, ans)\\nprint(ans)", "target": "350", "substitutes": {"x": ["z", "f", "xes", "m", "xp", "X", "a", "ux", "l", "y", "t", "ix", "xs", "s", "xa", "i", "xx", "ax", "r", "news", "v", "xml", "xt", "co", "wx", "c", "h", "q", "b", "g", "ex", "fx", "re", "p", "rx", "xc", "e", "ox", "xe", "xi", "n", "w", "xf", "an", "xd", "tx"], "reached": [" reared", "rateach", "rateaped", "raped", "breached", "preach", "reaped", "preached", "preachable", "Reval", "rateachable", "rateached", "breaped", "rached", " Reared", " reaches", "breachable", "preval", "reach", "Reaped", "Reached", "Reaches", " Reaches", "rach", "breach", "rachable", "Reachable", "reaches", " reval", " Reach", "reared", "reachable", "reval", " reachable", " reach", " Reached", "Reach", "Reared"], "ans": ["ens", "rors", "max", "anon", "lines", "annot", "times", "aned", "ones", "AN", "ran", "anc", "pan", "rs", "amps", "anned", " fans", "ed", "ines", "ars", "anas", "ins", "aus", "ons", "ns", "outs", "ann", "con", "aps", "aces", "ents", "es", "ians", "angs", "ers", "rans", "ations", "ex", "vs", "ANS", "p", "can", "ds", "anes", "span", "nan", "lex", "n", " spans", "ats", "anos", "anks", "ana", "an", "ants", "scan", "tx"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\\nfrom itertools import permutations, combinations, product, accumulate\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom fractions import gcd\\n\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\n\\nN, M = MAP()\\nS = LIST()\\nT = LIST()\\n\\ndp = []\\nfor i in range(N+1):\\n\tdp.append([0]*(M+1))\\n# print(dp)\\n\\nfor i in range(1, N+1):\\n\tfor j in range(1, M+1):\\n\t\tif S[i-1] == T[j-1]:\\n\t\t\tdp[i][j] = (1 + dp[i-1][j] + dp[i][j-1]) % mod\\n\t\telse:\\n\t\t\tdp[i][j] = (dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]) % mod\\nans = (dp[-1][-1] + 1) % mod\\nprint(ans)\\n", "target": "505", "substitutes": {"INF": ["inP", " INInf", "inF", "NAP", " INV", "inV", "NAF", " INP", "NAInf", "NAV", "inInf", "INV", "INInf", "INP"], "mod": ["MIN", "add", "min", "max", "inv", "G", "EXP", "shape", "len", "adj", "r", "scale", " Mod", "d", "mult", "fun", "p", "exp", "Mod", "AD", "int", "MOD", "neg", "Z", "x", "DEC", "cm", "base"], "N": ["Num", "K", "C", "F", "R", "Ni", "NB", "NI", "NR", "CN", "MN", "A", "NP", "NA", "E", "ND", "O", "NT", "D", "NS", "FN", "NM", "L", "TN", "P", "NPR", "GN", "J", "n", "V", "I", "Ns", "NC", "NN", "NH"], "M": ["K", "m", "H", "C", "MP", "F", "R", "G", "MT", "MI", "MN", "A", "MC", "U", "MM", "E", "O", "D", "L", "NM", "JM", "TM", "P", "Q", "Map", "MOD", "MS", "J", "V", "I", "B", "Mi"], "S": ["SI", "C", "X", "R", "SL", "G", "LS", "s", "A", "RS", "INS", "SR", "E", "O", "NS", "L", "SP", "YS", "TS", "P", "Z", "V", "I", "B", "IN"], "T": ["Y", "TR", "F", "R", "t", "WT", "G", "LT", "TA", "E", "O", "NT", "L", "TP", "TN", "TM", "TS", "P", "J", "V", "B", "TE", "TT", "GT", "PT", "TL"], "dp": ["deb", "adr", "bsp", "bp", "dos", "drop", "pb", "pp", "pas", "jp", "tp", "dt", "db", "pa", "vp", "dq", "isp", "paste", "iper", "dm", "pd", "p", "dl", "dep", "drops", "tap", "cp", "ulp", "dc", "DP", "arp", "bps", "delay", "osp", "yp", "aaa", "wp", "dr"], "i": ["f", "m", "l", "t", "ix", "by", "ip", "key", "r", "k", " j", "c", "q", "ind", "id", "p", "j", "e", "it", "n", "I", "li", "iter", "x", "im"]}}
{"code": "N = int(input())\\nmy_list = []\\nfor i in range(1,N+1):\\n    l = list((input().split()))\\n    l.append(i)\\n    my_list.append(l)\\n \\nmy_list2 = sorted(my_list, key=lambda x:(x[0],-int(x[1])))\\nfor i in my_list2:\\n  print(i[2])\\n", "target": "185", "substitutes": {"N": ["Number", "Num", "K", "H", "C", "R", "Ni", "NB", "NI", "M", "NV", "NR", "A", "MN", "SIZE", "Len", "NP", "NA", "Size", "Count", "S", "ND", "NT", "D", "NS", "L", "NM", "TN", "P", "T", "J", "n", "V", "I", "Ns", "NC", "NO", "NN", "Network", "NH"], "my_list": ["MY_list", "my7list", "my___top", "my2group", " my2list", "my_table", "my2List", "my7left", "my_detail", "my___group", " my_detail", "my7table", " my_List", " my2table", "my_group", "MY_group", "my_List", "my___list", " my_left", " my2List", " my_set", "my_left", "MY_top", "my2left", "my7List", "my_set", "MY_lists", "my___lists", "my2table", "my2lists", " my_table", "my_lists", "my_top", "my2list", "my2top", " my2left"], "i": ["f", "ini", "ei", "ri", "zi", "m", "y", "t", "ite", "ix", "ti", "ci", "k", "ati", "gi", "v", "ij", "c", "hi", "index", "ki", "q", "phi", "g", "ami", "yi", "ind", "id", " ii", "di", "p", "bi", "j", "pi", "qi", "e", "ai", "it", "ii", "xi", "n", "iri", "ic", "si", "I", "li", "u", "ici", "x", "iti", "mi", "iu", "im"], "l": ["fl", "lit", "ol", "ld", "ls", "yl", "el", "le", "bl", "lv", "lis", "kl", "s", "il", "la", "lb", "ul", "sl", "lt", "long", "ln", "lay", "lc", "lo", "cl", "ml", "dl", "L", "lp", "pl", "hl", "lr", "li", "nl", "list", "rl", "ll", "ly"], "my_list2": ["my_list1", "my_field2", "my_null1", "my_field02", "my_LIST2", "my_List1", "my_List2", "my_List02", "my_LIST02", "my_field1", "my_list02", "my_null4", "my_List4", "my_LIST4", "my_LIST1", "my_list4", "my_null2"]}}
{"code": "def mapt(fn, *args):\\n    return tuple(map(fn, *args))\\n\\n\\ndef Input():\\n    return mapt(int, input().split(\" \"))\\n\\n\\ndef main():\\n    a, b = Input()\\n    towers = [1] * 999\\n    for i in range(1, 999):\\n        towers[i] = towers[i-1] + i + 1\\n    n = b - a\\n    ans = 0\\n    for i in range(998):\\n        if towers[i+1] - towers[i] == n:\\n            ans = towers[i] - a\\n    print(ans)\\n\\n\\nmain()", "target": "653", "substitutes": {"fn": ["f", "partial", "fl", "nn", "function", "yn", "sync", "what", "xp", "fs", "nt", "ns", "nm", "mn", "syn", "phy", "ln", "fp", "wn", "cn", "unc", "fx", "tn", "typ", "FN", "func", "dn", "dl", "gn", "txt", "fc", "nc", "filename", "fm", "fun"], "a": ["z", "ba", "apa", "m", "ae", "ta", "y", "t", "sta", "au", "ed", "xa", "A", "ca", "at", "pa", "na", "c", "an", "ami", "air", "p", "alpha", "ada", "da", "pi", "e", "ox", "sa", "ai", "it", "aa", "al", "ac", "o", "ma", "w", "u", "ia", "ab", "ar", "ach", "am"], "b": ["f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "s", "fb", "r", "v", "c", "h", "g", "wb", "nb", "d", "p", "bi", "j", "e", "sb", "o", "bs", "u", "B", "ab", " B", "bb", "eb"], "towers": ["tsowers", " tonies", "mowers", " thews", "mients", "tsrenches", "touses", "tales", " takes", "tuouses", "tops", "poes", "toowers", " trenches", "tooes", " topers", "ttoes", "tsopers", "ttops", "tuools", "toes", " touses", "mhews", " tients", "thowers", "tsools", "tshews", "ttowers", "tuowers", "trenches", " tools", "tsients", "tennis", " toes", " tales", "tuoes", "tsonies", "tworset", "toouses", "topers", "twiers", "tuales", "thopers", "torset", "thiers", "tsales", "takes", "thops", "tuakes", " tennis", "tients", "toakes", "powers", "twonies", "thoes", "mrenches", "tuennis", " tiers", "thews", "piers", "ttiers", "twowers", "tools", "tiers", "tonies", "pops", "tsennis", "thients", "tsorset", " torset", "tsiers"], "i": ["io", "ei", "ini", "ri", "zi", "m", "l", "y", "t", "ix", "iy", "ti", "ip", "ci", "\u0438", "ji", "gi", "v", "ij", "c", "index", "ki", "phi", "ami", "yi", "ind", "id", "di", "d", "p", "bi", "j", "pi", "itime", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "x", "iti", "mi", "iu", "im", "ui"], "n": ["z", "nn", "m", "l", "t", "nt", "s", "N", "len", "ns", "r", "mn", "k", "en", "v", "na", "c", "ln", "sn", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "ne", "gn", "np", "nc", "o", "w", "nl", "an"], "ans": ["rors", "stats", "ens", "wan", "aned", "oss", "amps", "iann", "s", "ms", "anas", "ars", "aus", "ns", "ons", "outs", "ann", "ins", " Ans", "aps", "aos", "arts", "ents", "ians", "angs", "ums", "rans", "posts", "ies", " means", "ANS", "ots", "uns", "offs", "anes", " spans", "ads", "ates", "ats", "os", "anks", "an", "ants", "olds", "lan"]}}
{"code": "n = int(input())\\nx,y,z = 0,0,0\\nans = 0\\nfor _ in range(n):\\n    s = input()\\n    for i in range(len(s)-1):\\n        if s[i] == 'A' and s[i+1] == 'B':\\n            ans += 1\\n    if s[0] == 'B' and s[-1] == 'A':\\n        x += 1\\n    elif s[0] == 'B':\\n        y += 1\\n    elif s[-1] == 'A':\\n        z += 1\\n    else:\\n        pass\\nif x == 0:\\n    print(ans+min(y,z))\\nelse:\\n    if y + z > 0:\\n        print(ans + x + min(y,z))\\n    else:\\n        print(ans + x - 1)", "target": "456", "substitutes": {"n": ["nn", "nw", "nia", "m", "l", "nt", "nr", "N", "len", "ns", "mn", "v", "na", "c", "ln", "sn", "q", "cn", "nu", "nb", "num", "nv", "p", "j", "ne", "nor", "np", "nan", "nc", "no", "nl"], "x": ["f", "max", "yx", "el", "xes", "xp", "m", "X", "a", "xy", "l", "t", "ix", "xs", "sex", "xa", "xx", "ax", "v", "xml", "xt", "dx", "wx", "mx", "ex", "p", "rx", "xxx", "xc", "e", "ox", "int", "xi", "o", "w", "px", "xf", "on", "an", "xd", "tx"], "y": ["Y", "yz", "ym", "ey", "yo", "yl", "yn", "ay", "m", "a", "my", "xy", "zy", "py", "iy", "by", "oy", "sy", "yy", "ty", "yt", "v", "ys", "gy", "b", "ies", "yi", "ny", "j", "ry", "ox", "ya", "uy", "ye", "axy", "yr", "o", "vy", "cy", "sky", "yk"], "z": ["yz", "oz", "zi", "zip", "zy", "l", "t", "iz", "uz", "os", "hz", "v", "xt", "sd", "az", "cz", "c", "h", "zh", "g", "gz", "ze", "d", "tz", "zer", "j", "zen", "zone", "zes", "nz", "ez", "Z", "o", "w", "zz", "zo", "ll"], "ans": ["ens", "stats", "ps", "ars", "cas", "anon", "ls", "oss", "cus", "pan", "rs", "cs", "gs", "xs", "amps", "iann", "os", "ins", "ms", "aus", "ns", "mn", "ons", "ann", "res", " Ans", "aps", "utters", "outs", "aos", "arts", "ents", "es", "ians", "rans", "ands", "said", "posts", "eds", "yes", "san", "vs", "ANS", "can", "man", "ss", "ds", "leans", "ox", "ai", "uns", "helps", "offs", "anes", "nz", "nan", "anas", "ads", "ras", "ates", "ats", "us", "ros", "ados", "ts", "an", "ks", "ants", "olds", "jas"], "_": ["out", "ay", "ix", " m", "A", "en", "un", " j", "__", " __", " p", "ate", "j", "I", " num"], "s": ["ps", "stats", "sts", "sv", "ws", "ls", "lines", "ties", "m", "ares", "fs", "a", "sis", "spec", "cs", "rs", "se", "t", "gs", "l", "xs", "ists", "os", "ins", "ports", "ns", "sw", "r", "v", "sp", "aps", "aces", "sl", "hs", "c", "ers", "h", "tests", "b", "eds", "g", "S", "csv", "ments", "ests", "d", "ains", "p", "ss", "less", "ds", "parts", "erences", "sa", "sb", "ses", "abs", "sq", "tes", "ats", "south", "st", "als", "ts", "ions", "qs", "olds", "js"], "i": ["f", "ini", "ei", "ri", "zi", "m", "l", "t", "ix", "iy", "ti", "ip", "ci", "k", "ji", "v", " j", "gi", "ij", "c", "index", "b", "phi", "g", "ind", "id", " ii", "di", "p", "bi", "multi", "j", "pi", "ai", "it", "ii", "xi", "si", "ic", "I", "li", "ui", "mi", "im"]}}
{"code": "import itertools\\n\\n\\ndef read():\\n    N, T = list(map(int, input().strip().split()))\\n    A = list()\\n    B = list()\\n    for i in range(N):\\n        a, b = list(map(int, input().strip().split()))\\n        A.append(a)\\n        B.append(b)\\n    return N, T, A, B\\n\\n\\ndef solve(N, T, A, B):\\n    dp1 = [[0 for j in range(T)] for i in range(N+2)]\\n    dp2 = [[0 for j in range(T)] for i in range(N+2)]\\n    for i, t in itertools.product(range(N), range(T)):\\n        u = t - A[i]\\n        if u >= 0:\\n            dp1[i+1][t] = max(dp1[i][u] + B[i], dp1[i][t])\\n        else:\\n            dp1[i+1][t] = dp1[i][t]\\n        u = t - A[N-1-i]\\n        if u >= 0:\\n            dp2[N-i][t] = max(dp2[N+1-i][u] + B[N-1-i], dp2[N+1-i][t])\\n        else:\\n            dp2[N-i][t] = dp2[N+1-i][t]\\n    v = 0\\n    for i, t in itertools.product(range(N), range(T)):\\n        v = max(v, dp1[i][t] + dp2[i+2][(T-1) - t] + B[i])\\n    return v\\n\\n\\nif __name__ == '__main__':\\n    inputs = read()\\n    print(\"%s\" % solve(*inputs))\\n", "target": "200", "substitutes": {"N": ["Y", "Name", "Number", "Num", "NOT", "K", "NE", "H", "C", "X", "AN", "Sn", "R", "G", "CNN", "Ni", "NB", "NI", "NG", "Next", "M", "NR", "CN", "MN", "Len", "NL", "NP", "NA", "Size", "S", "E", "O", "ND", "New", "NT", "D", "SN", "NS", "FN", "Node", "L", "NM", "TN", "IT", "NOTE", "P", "GN", "J", "n", "Z", "V", "Note", "I", "OUT", "MAN", "Ns", "NC", "ON", "NO", "NN", "GT", "NH"], "T": ["Y", "TR", "K", "H", "C", "X", "R", "WT", "G", "M", "TA", "Type", "OT", "U", "TO", "TH", "S", "E", "O", "NT", "D", "AT", "TG", "L", "TB", "TP", "TN", "TM", "TW", "P", "TS", "TI", "RT", "TC", "J", "Z", "V", "I", "TE", "TT", "GT", "XT", "PT"], "A": ["AR", "AA", "H", "C", "RA", "API", "AN", "AC", "Al", "R", "IA", "ACC", "M", "BA", "CA", "LA", "TA", "AL", "EA", "U", "S", "As", "AU", "HA", "AT", "D", "Array", "All", "AF", "L", "GA", "An", "At", "ATA", "mA", "P", "MA", "AD", "AM", "AS", "SA", "The", "AB", "AP", "V", "I", "Alpha", "AE"], "B": ["BE", "BB", "BS", "VB", "AA", "DB", "H", "C", "EB", "Two", "RB", "Ber", "R", "But", "G", "SB", "NB", "BO", "BU", "WB", "BA", "IB", "BC", "M", "BI", "Bar", "GB", "E", "D", "L", "TB", "LB", "BG", "P", "PB", "J", "AB", "V", "BT", "BL", "BER", "CB", "Bern", "BM", "BY", "BF", "BR", "Bs"], "i": ["ini", "ri", "ci", "ji", "hi", "h", "q", "g", "di", "ih", "ai", "xi", "iri", "li", "ia", "iter", "x", "iti", "ui", "iu", "f", "io", "ish", "zi", "cli", "m", "one", "this", "ite", "ti", "info", "ati", "Ti", "index", "ki", "phi", "ex", "ind", "bi", "n", "o", "im", "item", "l", "ix", "ed", "k", "il", "at", "ij", "oi", "ie", "ik", "p", "time", "ii", "ic", "multi", "y", "iy", "s", "ip", "jp", "gi", "ori", "id", "pi", " I", "it", "int", "J", "si", "I", "mi"], "a": ["ba", "el", "ae", "sta", "au", "ga", "ed", "ca", "at", "la", "pa", "ea", "an", "air", "er", "area", "p", "da", "app", "oa", "\u00e4", "e", "sa", "ee", "aa", "aj", "ac", "ma", "ia", "ab", "aaa", "ar", "am"], "b": ["rb", "erb", "ib", "obj", "mb", "bl", "be", "l", "bc", "bp", "by", "bg", "cb", "fb", "r", "db", "g", "wb", "nb", "d", "br", "amb", "sb", "bis", "ob", "bs", "ab", "bb", "bar", "base", "eb"], "dp1": ["dp4", "dt1", "dt11", "lat71", "dp8", "dl8", "dl01", "dp71", "cp1", "djA", "dpache", "pd2", "cp2", "dl1", "pd8", "pd5", "dj71", "lat1", "dp11", "dt8", "dp12", "dp9", "pd12", "pd1", "pd9", "dp5", "dj4", "DP0", "dt2", "pd0", "pkg12", "pd01", "dt9", "dlache", "DP2", "lat4", "dl2", "dep0", "pkg4", "pdache", "dpA", "dep1", "dt12", "pdA", "dep11", "pd71", "pkg9", "dt0", "dl0", "pd4", "dj1", "cp11", "DP5", "DP1", "dp0", "latA", "dep01", "dl11", "dt4", "pd11", "pkg1", "depache", "cp0", "dt01", "dl5", "dp01"], "j": ["z", "obj", "ion", "jl", "m", "ja", "jit", "y", "name", "ite", "jp", "r", "ji", "k", "ij", "q", "jac", "ie", "ind", "id", "di", "p", "oj", "jo", "pi", "kj", "ai", "jj", "aj", "J", "uj", "dj", "js", "im", "jas", "jc"], "dp2": ["dptwo", "dp8", "dl8", "hp2", "dl12", "cp1", "pd2", "dq1", "cp2", "dq02", "dl1", "dttwo", "pd3", "pd5", "pd6", "pd02", "cp12", "DP3", "dp12", "pd12", "pd1", "dm5", "DP8", "cp3", "dep2", "dp5", "dq2", "dt2", "hp12", "pd256", "pd0", "deptwo", "dp6", "tp1", "dq6", "dm2", "cp6", "dt256", "tp2", "dt5", "tp02", "dm256", "dq0", "DP2", "dp256", "dl2", "pdtwo", "hpB", "dp3", "dep1", "dpB", "dmtwo", "dltwo", "dl3", "dp02", "DP1", "pd8", "dep12", "dp0", "cp0", "hp1", "pdB", "dlB"], "t": ["z", "type", "tu", "f", "qt", "out", "let", "pt", "m", "ta", "kt", "att", "tim", "l", "y", "nt", "tt", "tw", "ret", "ti", "to", "all", "token", "dt", "tp", "ty", "at", "xt", "ft", "c", "h", "ot", "q", "g", "gt", "term", "ct", "temp", "test", "typ", "title", "d", "te", "p", "ht", "et", "td", "total", "it", "wt", "int", "tr", "vt", "txt", "n", "tc", "o", "time", "ic", "itt", "x", "ts", "rt", "st"], "u": ["uid", "mu", "tu", "uri", "util", "pu", "fu", "ud", "l", "su", "au", "ue", "un", "ul", "gu", "lu", "U", "g", "user", "nu", "eu", "p", "ut", "ou", "uf", "uc", "ur", "uu", "uv", "o", "cu", "uni", "ju", "uj", "us", "hu", "um", "ui", "iu", "ru", "Lu"], "v": ["z", "f", "ve", "values", "sv", "diff", "conv", "vv", "m", "qv", "l", "y", "lv", "all", "r", "value", "c", "h", "q", "g", "val", "tv", "nv", "d", "vs", "p", "vector", "vi", "ov", "e", "vt", "var", "n", "uv", "V", "o", "w", "vr", "x", "ev", "cv", "new"], "inputs": ["outputs", "contextls", "Inputls", "inputes", "Inputes", "configs", "lengthS", "outputS", "contextes", "outputls", "inputS", "lengtha", "outputes", "contexts", "outputa", "configS", "inputa", "inputls", "Inputs", "lengths", "configa"]}}
{"code": "import sys\\nn,m = map(int, input().split())\\n\\n# it watches only end of union\\n# for i in range(m):\\n#     l,r,d = map(int, input().split())\\n#     if ml[l] == -1 and ml[r] == -1:\\n#         ml[l] = 0\\n#         ml[r] = d\\n#     elif ml[l] != -1 and ml[r] == -1:\\n#         ml[r] = d + ml[l]\\n#         if ml[r] > n:\\n#             print('R', i, ml[l], ml[r], flush=True)\\n#             print('No', flush=True)\\n#             sys.exit()\\n#     elif ml[l] == -1 and ml[r] != -1:\\n#         ml[l] = ml[r] - d\\n#         if ml[l] < 1:\\n#             print('L', i, ml[l], ml[r], flush=True)\\n#             print('No', flush=True)\\n#             sys.exit()\\n#     else:\\n#         if ml[r] - ml[l] != d:\\n#             print('B', i, l, ml[l], r, ml[r], d, flush=True)\\n#             print('No', flush=True)\\n#             sys.exit()\\n# print('Yes', flush=True)\\n\\nclass UnionfindWithWeight():\\n    def __init__(self,n):\\n        self.parents=[-1]*n\\n        self.ranks=[0]*n\\n        self.dist=[0]*n\\n    def find(self,x):\\n        if self.parents[x]<0:\\n            return self.dist[x],x\\n        else:\\n            tmp=self.find(self.parents[x])\\n            self.dist[x]+=tmp[0]\\n            self.parents[x]=tmp[1]\\n            return self.dist[x],self.parents[x]\\n    def union(self,x,y,d):\\n        rx=self.find(x)[-1]\\n        ry=self.find(y)[-1]\\n        diff=d+self.dist[x]-self.dist[y]\\n        if rx==ry:\\n            if diff!=0:\\n                return True\\n            return False\\n        if self.ranks[ry]>self.ranks[rx]:\\n            rx,ry=ry,rx\\n            diff=-diff\\n        self.parents[ry]=rx\\n        self.dist[ry]=diff\\n        if self.ranks[ry]==self.ranks[rx]:\\n            self.ranks[rx]+=1\\n        return False\\nlrd = []\\nfor i in range(m):\\n    l,r,d = list(map(int, input().split()))\\n    lrd.append([l,r,d])\\nv=UnionfindWithWeight(n)\\nfor i in lrd:\\n    l, r, d = i\\n    if v.union(l-1,r-1,d):\\n        print('No')\\n        import sys\\n        sys.exit()\\nprint('Yes')\\n", "target": "672", "substitutes": {"n": ["yn", "t", "s", "N", "i", "fn", "ns", "mn", " fn", "na", "sn", "h", "cn", "nb", "rn", "num", " c", "j", " ng", "ne", "nan", " gn", "u", "on", "x", "norm", " N", " na"], "m": ["mu", "f", "mc", "l", "t", "s", "ms", "M", "i", "mn", "k", "r", "v", "c", "bm", "h", "q", "b", "g", "mp", "d", "p", "km", "o", "mm", "mi", "cm"]}}
{"code": "N, A, B = map(int, input().split())\\n\\nans = A * (N // (A + B))\\nif N % (A + B) > A:\\n    ans += A\\nelse:\\n    ans += N % (A + B)\\n\\nprint(ans)\\n", "target": "716", "substitutes": {"N": ["Y", "K", "NE", "H", "C", "X", "AN", "F", "R", "Ni", "G", "CNN", "NG", "NI", "EN", "W", "M", "NR", "CN", "Na", "SIZE", "NL", "NA", "S", "E", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "Ns", "NUM", "NO", "NN", "IN", "NPR"], "A": ["Y", "AY", "AR", "K", "AI", "AA", "H", "C", "API", "AC", "AN", "Al", "F", "R", "IA", "G", "AV", "ACC", "M", "BA", "CA", "LA", "AL", "U", "JA", "NA", "S", "E", "O", "As", "AU", "HA", "AT", "Array", "D", "AF", "L", "alpha", "GA", "An", "At", "P", "AD", "MA", "AM", "This", "AH", "Q", "AS", "AE", "T", "AP", "AB", "V", "Alpha", "I", "AST", "ART", "SA"], "B": ["Y", "BE", "BB", "BS", "VB", "DB", "H", "C", "EB", "Two", "OB", "G", "SB", "NB", "BO", "Other", "WB", "BA", "IB", "BC", "BI", "Bar", "b", "GB", "E", "D", "Big", "L", "TB", "LB", "BG", "Q", "FB", "T", "J", "AB", "Z", "V", "BT", "BL", "USB", "Bern", "BER", "BY", "BR"], "ans": ["ens", "cas", "ls", "mas", "aned", "vers", "AN", "oss", "ran", "pan", "rs", "gs", "amps", "s", "ins", "anas", "ms", "aus", "ons", "ns", "ars", "ann", "outs", " Ans", "acs", "aos", " sans", "arts", "ents", "angs", "rans", "eds", "unes", "posts", " means", "terms", "ANS", "can", "man", "leans", "uns", "helps", "offs", "anes", "ams", "ads", "ras", "asms", "ats", "ros", "anks", "an", "ks", "ants", "olds", "lan"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 5 + 10)\\ndef input(): return sys.stdin.readline().strip()\\n\\ndef resolve():\\n    \\n    x,y=map(int,input().split())\\n    print(x if x%y!=0 else -1)\\n    \\nresolve()", "target": "396", "substitutes": {"x": ["z", "f", "xp", "m", "X", "a", "ux", "xy", "l", "t", "ix", "xs", "i", "xx", "r", "k", "v", "xt", "dx", "wx", "c", "h", "mx", "ex", "fx", "d", "p", "rx", " xx", "xc", "ox", "int", "xi", "n", "px", "w", "xf", "xd", "tx", "inx"], "y": ["Y", "z", "yz", "yl", "ay", "m", "xy", "l", "t", "py", "iy", "s", "sy", "i", "oy", "yy", "r", "ty", "yt", "ch", "v", "c", "ys", "ot", "b", "gy", "ies", "yi", "ny", "ind", "fy", "p", "j", "col", "ry", "dy", "uy", "np", "n", "o", "cy", "sky", "ly"]}}
{"code": "import sys\\nimport itertools\\nfrom math import ceil\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\n\\nin_n = lambda: int(readline())\\nin_nn = lambda: map(int, readline().split())\\nin_nl = lambda: list(map(int, readline().split()))\\nin_na = lambda: map(int, read().split())\\nin_s = lambda: readline().rstrip().decode('utf-8')\\n\\n\\ndef main():\\n    D, G = in_nn()\\n    p = [0] * D\\n    c = [0] * D\\n    for i in range(D):\\n        a, b = in_nn()\\n        p[i] = a\\n        c[i] = b\\n\\n    comb = itertools.product([0, 1], repeat=D)\\n    ans = 10**9 + 7\\n\\n    for com in comb:\\n        score = 0\\n        prob = 0\\n        for i, x in enumerate(com):\\n            if x == 1:\\n                prob += p[i]\\n                score += c[i] + p[i] * 100 * (i + 1)\\n\\n        for i in range(D - 1, -1, -1):\\n            if score >= G:\\n                break\\n            if com[i] == 0:\\n                pt = ceil((G - score) / (100 * (i + 1)))\\n                pt = min(pt, p[i] - 1)\\n                score += pt * 100 * (i + 1)\\n                prob += pt\\n\\n        if score >= G:\\n            ans = min(ans, prob)\\n\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "125", "substitutes": {"read": ["map", "rand", "READ", "stream", "reader", "load", "sync", "report", "skip", "seek", "std", "find", "df", "chain", "hold", "ext", "readable", "rot", "reads", "r", "buffer", "pipe", "open", "write", "length", "q", "arc", " write", "reading", "we", "th", "ind", "select", "test", "size", "Read", "ro", "get", "run", "align", "then", "each", "txt", "float", "rd", "feed", "iter", "print", "reverse", " Read", "sh", "roll", "ast", "scan", "text"], "readline": ["getLine", "writeLine", "iterline", "sendline", "readerline", " readnl", " readfile", " readstream", "Readl", "getstream", "readlist", "sendlin", "readstream", "readentry", "loadline", " readlin", " readlines", "Readline", "sendnl", "iterfile", "iterlist", "readLine", "readerstream", "writeline", "readstring", "readlin", "getline", "ReadLine", "loadlist", "loadlines", "loadstring", "runlin", "readlink", " readl", "iterlines", "runnl", "runline", "readerentry", " readentry", "Readstring", "readnl", " readlist", " readLine", "readlines", "runlines", " readlink", "Readentry", "loadl", "getlink", "readerlink", "loadfile", "runfile", "sendfile", "readerLine", "writelist", "readerlines", "readl", " readstring", "runlist", "Readlist", "readfile", "Readlines"], "in_n": ["in2nn", "in2nc", " in_nc", "inLsn", "in_sn", "in2sn", "inLnc", "in_nc", "in2n", "inLn", "inLnn", " in_sn"], "in_nn": ["in2nn", "in___yn", " in2mn", "in2mn", " in_yn", "in67na", "via_n", "via_nn", "in___nn", "in67nn", "in2na", "in67mn", " in2yn", "in67yn", "in___na", "in_mn", "via_na", "in___mn", "in_yn", "in_nu", " in_mn", " in2nn", "via_nu", " in2na", "in2yn"], "in_nl": ["in2nn", " in2n", " in2nl", " in2ln", "in2ln", "in_ln", "in2n", "in2nl", " in2nn", " in_ln"], "in_na": [" in_ne", "in_ne", "in_nan", " in_nan"], "in_s": ["out_na", "in_sp", "inLna", "out_n", "out_s", "inLsp", "inLs", "out_sp", "inLn"], "D": ["DN", "DL", "Du", "DB", "H", "C", "Dr", "X", "F", "R", "Do", "DF", "DD", "FD", "DJ", "N", "M", "A", "DA", "S", "DIR", "E", "O", "DX", "DS", "Dir", "d", "L", "JD", "P", "DR", "Q", "DM", "DP", "T", "J", "Z", "Dim", "V", "I", "B", "DE", "DC", "DO", "DI"], "G": ["Y", "GRE", "GP", "H", "C", "F", "R", "W", "N", "M", "A", "GF", "IG", "GR", "U", "GB", "g", "S", "E", "GH", "Gate", "L", "GG", "GA", "Gi", "GE", "GO", "P", "FG", "BG", "Q", "GU", "Greg", "GD", "GM", "Ge", "T", "GN", "J", "Z", "V", "I", "B", "GS", "GT", "GI"], "p": ["op", "ps", "pe", "f", "pr", "ap", "m", "pan", "y", "t", "l", "bp", "pos", "pb", "s", "pp", "r", "tp", "at", "v", "sp", "co", "pa", "pm", "h", "q", "g", "d", "pat", "j", "pi", "cp", "lp", "P", "pc", "n", "o", "wp", "pn", "pro"], "c": ["z", "f", "ps", "sc", "mc", "m", "C", "cr", "l", "cs", "t", "bc", "s", "ci", "r", "k", "cb", "ch", "v", "co", "h", "lc", "g", "gc", "cn", "ct", "cc", "d", "cp", "xc", "e", "dc", "fc", "pc", "n", "tc", "ic", "ac", "cu", "u", "cm"], "i": ["z", "f", "io", "ini", "ei", "ri", "zi", "m", "cli", "uri", "l", "y", "t", "ios", "chain", "ix", "name", "ti", "info", "s", "ite", "ip", "ci", "ji", "gi", "v", "status", "ij", "hi", "index", "oi", "phi", "g", "yi", "ind", "id", "di", "d", "bi", "multi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "o", "li", "I", "batch", "me", "ui", "mi", "iu", "im"], "a": ["z", "ba", "m", "ae", "y", "t", "sta", "ga", "s", "A", "ca", "r", "at", "la", "pa", "na", "ea", "an", "d", "va", "j", "e", "sa", "ai", "_", "bar", "aa", "ac", "n", "o", "ma", "w", "set", "ab", "am", "new"], "b": ["f", "ba", "ib", "m", "bl", "be", "l", "y", "t", "bc", "s", "cb", "r", "v", "h", "g", "wb", "nb", "d", "bi", "j", "e", "sb", "n", "bs", "w", "B", "ab", "bb", "new"], "comb": ["map", "pe", "sc", " combination", "cat", "cr", "bl", "prop", "acc", "chain", "tw", "cb", "div", "buffer", "band", "match", "pair", "loop", "test", "cl", "go", "comp", "mult", " combine", "cap", "join", "change", "pl", "xc", "bin", " combo", "cd", "mix", "mat", "bo", "conf", "batch", "coord", "log", "star", "ab", "Comb", "bag", " combined", "box"], "ans": ["ps", "stats", "ens", "rors", "lines", "weights", "ls", "ores", "names", "aned", "AN", "ones", "oss", "pan", "rs", "cs", "gs", "xs", "pos", "amps", "s", "os", "ins", "ms", "aus", "ns", "outs", "ann", "aps", "aos", "es", "ys", "ands", "eds", "ations", "ids", "eps", "ANS", "ss", "ds", "uns", "offs", "bs", "pres", "ates", "ats", "us", "ros", "vals", "ts", "ions", "anks", "an", "ants"], "com": ["pe", "core", "pac", "stat", "sc", "m", "computer", "cr", "rom", "be", "con", "etc", "im", "lim", "ch", "co", "cal", "complex", "prof", "dem", "pair", "ex", "mod", "lam", "mp", "code", "re", "go", "Com", "comp", "du", "cho", "count", "cp", "pl", "om", "dom", "cmp", "conf", "coord", "tc", "cum", "log", "cor", "Comb", "COM", "me", "um", "ome", "cm", "comm", "pro"], "score": ["core", "rate", "sum", "report", "pred", "loss", "cr", "note", "value", "status", "match", "g", "gc", "ge", "val", "scoring", "mean", "set", "sche", "cost", "display", "count", "confidence", "f", "style", "message", "se", "result", "index", "ot", "scale", "ate", "test", "er", "ind", "strength", "ss", "ize", "pro", "pe", "price", "ter", "est", "ed", "pb", "Score", "dist", "en", "sd", "mem", "size", "te", "zero", "e", "time", "weight", "rank", "pri", "cor", "scroll", " Score", "stat", "sc", "ores", "y", "err", "code", "d", "path", "error", "log", "grade", "sat", "prime"], "prob": ["Procb", " probe", "prbe", "PROp", "pep", "prB", "prop", "pribe", "proB", "Prox", "procb", "prib", " prop", "PROB", "ProB", "PROcb", "PROb", "priB", "pecb", "prox", "peb", "PROc", " prox", "PRObe", " proc", "probe", "prb", " procb", "prc", "pex", "Prob", "Prop", " proB", "prip", "Probe", "proc"], "x": ["z", "f", "xes", "xp", "X", "xy", "y", "ix", "xs", "xa", "ax", "xx", "ci", "status", "xt", "dx", "wx", "co", "index", "mx", "ex", "ct", "fx", "re", "rx", "xc", "e", "ai", "xi", "ic", "xf", " cx", "Ax", "xd", "tx", "inx"], "pt": ["ps", "qt", "apt", "offset", "pr", "pot", "xy", "pan", "nt", "t", "pkg", "pos", "rot", "pb", "png", "point", "dist", "ptr", "tp", "res", "points", "sp", "pm", "ot", "pen", "ct", "val", "mont", "ind", "typ", "ctx", "pre", "pd", "path", "pat", "tip", "round", "col", "j", "pl", "port", "hot", "slot", "cert", "td", "int", "po", "bo", "tr", "txt", "pc", "px", "pid", "mint", "PT", "poly"]}}
{"code": "S,T=open(0).read().split()\\nprint(sum([S[i]==T[i] for i in range(3)]))", "target": "773", "substitutes": {"S": ["BS", "SI", "H", "C", "Si", "SS", "F", "R", "SL", "G", "JS", "SB", "LS", "s", "N", "M", "A", "DS", "D", "NS", "Is", "SO", "L", "Vs", "Su", "P", "TS", "SH", "You", "SA", "SF", "SE", "Z", "VS", "V", "I", "B", "GS", "States"], "T": ["Y", "NOT", "TR", "UT", "H", "C", "R", "G", "WT", "W", "MT", "N", "M", "E", "NT", "D", "L", "TN", "TM", "P", "TS", "TI", "Q", "J", "Z", "V", "I", "B", "VT", "TX", "TT", "GT", "TV", "PT", "TL"], "i": ["str", "zi", "cli", "m", "a", "chain", "y", "t", "ix", "ti", "s", "ip", "key", "ji", "im", "v", " j", "ij", "ori", "ki", "q", "b", "ami", "sim", "ind", "id", "di", "num", "p", "bi", "vi", "j", "pi", "fi", "qi", "ai", "it", "ii", "xi", "si", "n", "I", "li", "iter", "x", "ui", "mi", "multi"]}}
{"code": "import math\\nimport sys\\n\\nn = int(sys.stdin.readline().rstrip())\\n\\nif n == 1:\\n    print(1)\\n    sys.exit()\\nelif n == 2:\\n    print(2)\\n    sys.exit()\\n\\nm = 1\\ns = 0\\nwhile (s <= n):\\n    s += m\\n    m += 1\\n# print(m)\\nfor i in range(1, m):\\n    if i == s - n:\\n        continue\\n    else:\\n        print(i)", "target": "389", "substitutes": {"n": ["z", "nn", "nia", "l", "t", "nt", "number", "note", "nr", "N", "i", "len", "ns", "mn", "r", "nm", "v", "na", "c", "ln", "sn", "an", "g", "cn", "nu", "nb", "num", "size", "d", "p", "j", "ne", "none", "net", "nor", "gn", "np", "nan", "nc", "o", "no", "nl", "on", "norm", "x"], "m": ["mu", "f", "z", "gm", "min", "max", "asm", "mc", "tm", "am", "l", "y", "sm", "t", "ms", "M", "i", "mn", "k", "im", "r", "v", "arm", "c", "bm", "b", "g", "mod", "dm", "d", "p", "vm", "man", "mt", "om", "o", "mr", "mm", "me", "mi", "fm", "cm"], "s": ["ps", "stats", "sts", "sv", "ws", "ls", "sum", "a", "cs", "rs", "t", "sm", "gs", "ms", "os", "i", "ins", "ns", "r", "ows", "sd", "hs", "start", "S", "sim", "size", "p", "ss", "ds", "sb", "sa", "ims", "si", "bs", "sq", "ats", "south", "us", "ts", "qs", "lower"]}}
{"code": "N=int(input())\\n\\na=N//11\\nb=N%11\\n\\n\\ncount=0\\ncount+=2*a\\nif 0<b and b<=6:\\n    count+=1\\nelif 6<b:\\n    count+=2\\n\\nprint(count)", "target": "241", "substitutes": {"N": ["Y", "K", "H", "C", "X", "AN", "F", "R", "G", "W", "NB", "NI", "M", "NV", "NR", "A", "CN", "NA", "NW", "S", "E", "O", "NT", "D", "NS", "FN", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NUM", "NN", "NH"], "a": ["z", "f", "ba", "add", "m", "ae", "eff", "l", "y", "t", "acc", "au", "s", "i", "A", "r", "aff", "ca", "v", "na", "c", "aw", "ea", "index", "g", "unc", "d", "p", "alpha", "oa", "act", "e", "sa", "aa", "n", "w", "set", "ab", "an"], "b": ["z", "f", "rb", "ba", "out", "m", "be", "l", "y", "t", "bc", "s", "by", "i", "cb", "fb", "r", "v", "db", "c", "h", "g", "nb", "d", "p", "bi", "j", "bf", "e", "sb", "bu", "beta", "n", "bs", "u", "w", "B", "ab", "x", " B", "bb", "bar"], "count": ["z", "f", "type", "ount", "offset", "stat", "found", "sum", "report", "message", "child", "comment", "cond", "counter", "l", "t", "nt", "number", "debug", "amount", "second", "result", "i", "value", "status", "now", "length", "c", "match", "index", "long", "term", "q", "start", "Count", "split", "flag", "th", "ct", "page", "code", "nb", "ind", "test", "temp", "cmd", "num", "d", "size", "process", "p", "trace", "command", "total", "cd", "current", "cache", "weight", "n", "summary", "print", "hash", "always"]}}
{"code": "def print_ans():\\n    for i in field:\\n        print(\"\".join(i))\\n    exit()\\n        \\nh,w,a,b=map(int,input().split())\\n\\nfield=[[\"0\"]*w for i in range(h)]\\n\\nif a==0:\\n    if b==0:\\n        print_ans()\\n    else:\\n        for i in range(b):\\n            field[i]=[\"1\"]*w\\n        print_ans()\\nif b==0:\\n    for i in range(h):\\n        for j in range(a):\\n            field[i][j]=\"1\"\\n    print_ans()\\n    \\nfor i in range(h):\\n    for j in range(w):\\n        if i<b and j<a:\\n            field[i][j]=\"1\"\\n        if i>=b and j>=a:\\n            field[i][j]=\"1\"\\nprint_ans()", "target": "509", "substitutes": {"i": ["ei", "ini", "ri", "name", "ci", "ji", "v", "adi", "hi", "q", "g", "source", "di", "itime", "ai", "xi", "iri", "li", "ql", "ia", "list", "x", "iti", "ui", "iu", "f", "io", "zi", "\u00ed", "m", "cli", "ir", "ni", "t", "aci", "ti", "info", "ati", "index", "ki", "phi", " Xi", "qi", "o", "im", "uri", " bi", "l", "ix", "\u0438", "r", "ij", "c", "oi", "ie", "ik", "p", "e", "ii", "ic", "multi", "y", "iy", "s", "ip", "gi", "ori", "ami", "yi", "id", "pi", "it", "int", "si", "I", "ici", "mi"], "h": ["z", "f", "he", "H", "m", "kh", "l", "ha", "y", "bh", "r", "k", "ho", "v", "hs", "c", "hi", "g", "th", "hd", "d", "ih", "p", "oh", "ht", "hw", "hl", "n", "hr", "o", "hh", "ah", "u", "sh", "x", "his"], "w": ["z", "nw", "ws", "iw", "win", "m", "wh", "l", "y", "t", "W", "wed", "wd", " W", "r", "v", "wa", "wx", "q", "wl", "g", "wb", "we", "wr", "d", "window", "rw", "hw", "word", "wt", "ew", "wid", "wo", "n", "wal", "wp", "x", "wi", "width"], "a": ["z", "f", "ba", "apa", "ta", "ae", "another", "be", "l", "y", "t", "sta", "au", "s", "ga", "ax", "A", "ca", "r", "at", "v", "na", "c", "ea", "an", "g", "ak", "er", "aux", "area", "d", "p", "va", "ao", "app", "oa", "act", "e", "ai", "sa", "ata", "aa", "aj", "al", "ac", "n", "o", "ma", "u", "ah", "ab", "eas", "aaa", "x", "ar", "ach", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "bl", "be", "l", "y", "t", "bc", "bp", "by", "s", "bh", "r", "fb", "ch", "k", "v", "db", "c", "g", "wb", "nb", "lib", "d", "p", "bi", "e", "sb", "bo", "n", "o", "bs", "u", "B", "ab", "x", "bb", "bar", "eb"], "field": ["load", "label", "spec", "name", "manager", "expr", "v", "tag", "match", "post", "group", "g", "file", "fix", "xi", "list", "vector", "z", "f", "ld", "message", "line", "desc", "child", "comment", "section", "domain", "row", "info", "result", "control", "index", "FIELD", "queue", "test", "force", "exp", "table", "arg", "prefix", "data", "view", "proc", "map", "l", "memory", "fields", "term", "user", "mem", "frame", "et", "form", "e", "Field", "cache", "link", "type", "function", "relation", "tmp", "pad", "ip", "key", "attribute", "switch", "db", "pair", "id", "config", "track", "col", "window", "wire", "int", "rule", "entry"], "j": ["z", "f", "str", "obj", "ion", "jl", "m", "ja", "l", "y", "t", "you", "fr", "jp", "k", "ji", "r", "un", "v", "json", "ij", "c", "q", "job", "g", "ian", "d", "p", "bi", "br", "oj", "kj", "jas", "e", "it", "jj", "jump", "aj", "J", "n", "o", "uj", "dj", "u", "on", "x", "bj", "js", "jc"]}}
{"code": "import sys\\nimport numpy as np\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n# ----------------------------------------------\\naa = str(input())\\n#print(aa)\\ntar = ord(aa)\\nif (tar <= 91):\\n    print('A')\\nelse:\\n    print('a')\\n", "target": "251", "substitutes": {"read": ["f", "sub", "READ", "add", "create", "stream", "reader", "load", "sync", "std", "find", "ext", "hold", "readable", "pop", "fill", "reads", "r", "rax", "check", "write", "length", "replace", "q", "reading", "insert", "ind", "test", "default", "d", "height", "Read", "align", "run", "rid", "rd", "ad", "iter", "print", "rec", "req", "sh", "roll", "count", "text", "take"], "readline": ["getLine", "findln", "READstring", "loadline", "Readline", "READline", "readLine", "getline", "findlines", "readstring", "READlines", "loadlines", "findonly", "loadstring", "readonly", " readonly", "Readonly", "findline", "READLine", "Readln", " readln", "readln", "getlines", "loadLine", "Readlines", "getstring"], "readlines": ["readerline", "loadline", " readfiles", "Readline", "readvals", "readervals", "loadlines", "Readvals", "Readines", "loadines", "readines", " readines", " readvals", "Readfiles", "readerlines", "loadfiles", "readfiles", "readerfiles", "Readlines"]}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\n\\ndef resolve():\\n    n = int(input())\\n    N = n * 2\\n    for i in range(1, int(pow(N, 0.5)) + 1):\\n        if N % i == 0 and abs(N // i - i) == 1:\\n            x, y = i, N // i\\n            print(\"Yes\")\\n            print(y)\\n            break\\n    else:\\n        print(\"No\")\\n        exit()\\n\\n    res = [[0] * x for _ in range(y)]\\n    num = 1\\n    left = 0\\n    while left < y:\\n        for i in range(left, x):\\n            res[left][i] = num\\n            res[i + 1][left] = num\\n            num += 1\\n        left += 1\\n\\n    for i in res:\\n        print(x, *i)\\n\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "502", "substitutes": {"input": ["f", "active", "str", "out", "reader", "eval", "util", "reset", " Input", "control", "format", "step", "fn", "raw", "output", "buffer", "enter", "start", "q", "ref", "Input", "source", "select", "val", "cmd", "init", "config", "read", "next", "get", "inc", "int", "txt", "focus", "feed", "iter", "print", "exec", "lat", "gen", "prefix", "data", "text", "shift"], "f_inf": ["F_inf", "f4err", "f4Inf", "F_in", "f_in", "f_err", "F2in", "f2inf", "F_Inf", "f2in", "f4inf", "f_Inf", "F2inf", "f4in", "f2Inf", "F2Inf", "F2err", "F_err", "f2err"], "mod": ["add", "min", "max", "base", "m", "cond", "floor", "pos", "circ", "scale", "bit", " Mod", "sim", "ind", "mult", "round", "exp", "frac", "Mod", "mode", "MOD", "neg", "dec", "set", "prime", "cm", "fun", "init"], "n": ["z", "f", "nn", "out", "m", "l", "y", "nt", "t", "number", "nr", "ns", "r", "en", "v", "na", "c", "ln", "sn", "cn", "nu", "nb", "d", "p", "ne", "gn", "int", "np", "nc", "o", "u", "no", "x"], "N": ["Y", "Num", "H", "C", "X", "AN", "F", "Sn", "R", "Ni", "G", "NB", "NI", "M", "NR", "A", "MN", "CN", "Na", "NL", "NP", "U", "NA", "Size", "S", "E", "ND", "O", "Ne", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "V", "I", "B", "Ns", "NUM", "NO", "NH"], "i": ["f", "z", "ei", "ini", "ri", "zi", "m", "cli", "a", "l", "y", "t", "name", "ix", "ti", "info", "ip", "ci", "r", "k", "ji", "ati", "gi", "v", "ij", "c", "index", "ki", "q", "b", "phi", "lo", "yi", "ind", "id", "di", "ik", "d", " ii", "p", "bi", "j", "pi", "fi", "qi", "e", " I", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "x", "iti", "mi", "iu", "im"], "res": ["ps", "ress", "rand", "rest", "arr", "out", "obj", "pr", "des", "cond", "reset", "rez", "ret", "rs", "cons", "nt", "pos", "result", "ins", "ms", "s", "expr", "r", "err", "resp", "gr", "resh", "we", "re", "mem", "rx", "stock", "results", "RES", "mat", "right", "rem", "pres", "reg", "rel", "Res", "als", "x", "vals", "req", "prime", "sol", "tx", "init"], "_": ["m", "one", " int", "a", "l", "y", "all", "name", "ix", "ow", " __", "ex", "ate", "ct", "d", "mult", "j", "ox", "int", "o", "I", "an"], "num": ["f", "Num", "nom", "max", "out", "sum", "multipl", "mon", "one", "m", "dev", "number", "nr", "info", "con", "dim", "final", "nm", "mn", "en", "un", "cal", "na", "index", "nu", "nb", "test", "mult", "next", "j", "end", "zero", "total", "om", "ox", "net", "mat", "np", "hom", "cum", "rem", "no", "NUM", "success", "um", "norm", "x", "on", "multi", "unit", "count", "new"], "left": ["z", "add", "min", "out", "level", "offset", "sum", "off", "le", "m", "wrong", "l", "y", "nt", "old", "ix", "full", "pos", "row", "t", "len", "Left", "lim", "lock", "c", "lt", "long", "index", "start", "loop", "lo", "ex", "ind", "id", "cont", "p", "L", "col", "j", "pl", "local", "pi", "ox", "net", "it", "right", "inner", "xi", "small", "loc", "li", "w", "list", "x", "mi", "boot", "st", "ll", "tx", "shift"]}}
{"code": "s=int(input())\\nif s<=999:\\n    print('ABC')\\nelse:\\n    print('ABD')", "target": "636", "substitutes": {"s": ["f", "ps", "sv", "ls", "m", "fs", "a", "rs", "t", "gs", "su", "ms", "ins", "i", "ns", "sw", "v", "sym", "es", "c", "h", "q", "b", "g", "S", "changes", "d", "p", "ss", "ds", "seconds", "ashes", "its", "conf", "n", "sq", "iss", "w", "ats", "ts", "ks", "js"]}}
{"code": "MOD = 10 ** 9 + 7\\nINF = 10 ** 11\\nimport sys\\nsys.setrecursionlimit(100000000)\\n\\ndef main():\\n    N,i = map(int,input().split())\\n    print(N - i + 1)\\nif __name__ == '__main__':\\n    main()\\n", "target": "664", "substitutes": {"MOD": ["TR", "LIB", "PK", "SL", "EXP", "MER", "FORM", "FIN", "DEV", "RO", "ID", "VER", "mod", "DIR", "SW", "SPEC", "CC", "LOCK", "RC", "Mod", "AD", "STAT", "RES", "MS", "MODE", "LD", "DE", "CLASS", "MD"], "INF": ["INf", "CONB", "PINf", "PINF", "CONV", " INV", "INB", " INf", " INB", "CONF", "PINB", "CONf", "INV", "PINV"], "N": ["Y", "Num", "K", "C", "X", "F", "R", "Ni", "G", "NB", "NI", "M", "NR", "CN", "Na", "NA", "S", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "T", "GN", "J", "Z", "n", "I", "B", "Ns", "NUM", "NN", "NH"], "i": ["f", "zi", "iq", "m", "l", "y", "t", "ix", "ti", "ip", "k", "v", "gi", "ij", "ori", "index", "phi", "id", "di", "num", "p", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "o", "I", "li", "u", "x", "mi", "iu", "im"]}}
{"code": "from sys import stdin\\nimport sys\\nimport math\\nfrom functools import reduce\\nimport functools\\nimport itertools\\nfrom collections import deque,Counter,defaultdict\\nfrom operator import mul\\nimport copy\\n# ! /usr/bin/env python\\n# -*- coding: utf-8 -*-\\nimport heapq\\nsys.setrecursionlimit(10**6)\\nINF =  float(\"inf\")\\nimport bisect\\n\\nN, M = list(map(int, input().split()))\\nS = input()\\n\\nm = N\\nrecord = []\\nwhile True:\\n    for i in range(M,-1,-1):\\n        if i == 0:\\n            print(-1)\\n            sys.exit()\\n        if m-i < 0: continue\\n        if S[m-i] == \"0\":\\n            m = m - i\\n            record.append(str(i))\\n            if m == 0:\\n                print(\" \".join(reversed(record)))\\n                sys.exit()\\n            break\\n\\n\\n", "target": "677", "substitutes": {}}
{"code": "from collections import Counter\\nN = int(input())\\nP = []\\nQ = []\\nfor L in range(1, N+1):\\n    L = str(L)\\n    a = int(L[0])\\n    b = int(L[-1])\\n    if a == 0 or b == 0:\\n        continue\\n    P.append((a, b))\\nC = Counter(P)\\n\\nans = 0\\nfor i in range(len(P)):\\n    q = (P[i][-1], P[i][0])\\n    ans += C[q]\\n\\nprint(ans)", "target": "168", "substitutes": {"N": ["K", "X", "R", "G", "Ni", "CNN", "NB", "M", "NV", "NR", "CN", "NL", "NA", "Size", "S", "O", "NT", "D", "NS", "NM", "GN", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "NPR"], "P": ["GP", "PK", "PD", "H", "MP", "X", "IP", "API", "ARP", "F", "R", "PM", "G", "PS", "Pers", "M", "PA", "A", "PO", "PU", "JP", "SCP", "PC", "NP", "PL", "S", "Path", "PR", "D", "Array", "PIN", "p", "TP", "SP", "PP", "FP", "List", "Pen", "T", "DP", "PB", "J", "AP", "Cache", "V", "RP", "I", "B", "LP", "Patch", "Ps", "CP", "PUT", "PT", "BP"], "Q": ["Y", "QU", "K", "CH", "MQ", "X", "F", "G", "W", "M", "A", "QL", "U", "D", "QB", "T", "J", "Z", "V", "I", "B", "CP", "IQ"], "L": ["Y", "K", "DL", "H", "X", "XL", "Line", "F", "R", "LE", "l", "SL", "G", "LS", "ML", "LM", "M", "LT", "LG", "A", "LU", "LA", "Len", "NL", "EL", "U", "ln", "PL", "S", "O", "LIN", "GL", "D", "RL", "CL", "LB", "LC", "List", "T", "LI", "Z", "V", "FL", "I", "Li", "B", "LP", "BL", "LOC", "LD", "dL", "LL", "TL"], "a": ["ba", "apa", "m", "ap", "ae", "\u00e1", "l", "sta", "ga", "au", "af", "ua", "A", "ca", "r", "la", "at", "c", "ea", "an", "ant", "p", "alpha", "da", "ao", "oa", "e", "ai", "sa", "aq", "aa", "al", "ac", "ma", "ia", "ab", "eas", "aaa", "x", "ar", "am"], "b": ["erb", "ba", "ib", "rb", "mb", "be", "l", "bc", "bp", "back", "by", "cb", "fb", "db", "v", "c", "nob", "h", "g", "nb", "d", "bi", "br", "app", "sb", "reb", "bis", "ob", "bs", "B", "ab", "bb", "bar", "base", "eb"], "C": ["K", "H", "Ch", "R", "Con", "CR", "Cs", "CON", "CM", "M", "CA", "A", "CN", "CU", "c", "CV", "Cu", "GC", "Count", "S", "Cop", "D", "Can", "Counter", "CT", "CC", "Cal", "DC", "OC", "Co", "T", "Cache", "V", "B", "CS", "JC", "CP", "Mc"], "ans": ["ens", "ps", "rors", "ls", "names", "aned", "AN", "oss", "cs", "rs", "cons", "gs", "xs", "amps", "ins", "anas", "ms", "aus", "ns", "ons", "ars", "ann", "ends", "acs", "aps", "aos", "arts", "ents", "es", "rans", "eds", "ies", " means", "san", "vs", "ANS", "can", "trans", "nas", "uns", "offs", "anes", "nan", "ads", "ras", "ats", "us", "ros", "vals", "anks", "an", "ks", "ants"], "i": ["f", "ini", "ri", "zi", "m", "l", "y", "ix", "ti", "info", "ip", "ci", "k", "ji", "v", "gi", "ij", "hi", "ori", "index", "phi", "slice", "ind", "id", "di", "p", "multi", "j", "pi", "qi", "it", "ii", "xi", "si", "n", "ic", "iri", "li", "I", "batch", "me", "x", "ui", "mi", "iu", "im"], "q": ["z", "qt", "ve", "qual", "iq", "qa", "qv", "pkg", "y", "l", "ck", "que", "quest", "ip", "k", "ch", "check", "quote", "v", "query", "c", "dq", "p", "j", "quant", "qi", "ox", "aq", "sq", "ql", "qq", "question", "qs", "requ", "qu"]}}
{"code": "import sys\\n\\ninput = sys.stdin.buffer.readline\\nin_n = lambda: int(input())\\nin_nn = lambda: map(int, input().split())\\nin_s = lambda: input().rstrip().decode('utf-8')\\nin_map = lambda: [s == ord('.') for s in input() if s != ord('\\n')]\\n\\nMOD = 10**9 + 7\\nINF = 8 * 10**18\\n\\n\\ndef main():\\n\\n    N = in_n()\\n    S = in_s()\\n\\n    ans = 0\\n    for i in range(1, N - 1):\\n        v1 = set(S[:i])\\n        v2 = set(S[i:])\\n        ans = max(ans, len(v1 & v2))\\n\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "575", "substitutes": {"input": ["expression", "interface", "str", "out", "stream", "reader", "util", "find", " Input", "sample", "format", "step", "fn", "raw", "output", "point", "upper", "filter", "enter", "url", "check", "dq", "q", "insert", "csv", "ref", "Input", "source", "select", "val", "init", "context", "config", "hidden", "read", "char", "image", "cmd", "next", "password", "pattern", "join", "get", "parse", "inc", "int", "align", "inner", "focus", "table", "feed", "sequence", "print", "exec", "lat", "gen", "arg", "prefix", "data", "view", "text", "shift"], "in_n": [" in_cn", "In_ns", "In__n", "in_N", "in_sn", "In__nn", "in_cn", "in__n", "In_nn", "in__ns", "in__nn", " in_N", "In_n", " in_sn", "in_ns", "In__ns"], "in_nn": ["in2nn", "in_na", "in___nn", "in___n", "in_kn", "in2na", "in2kn", "in___na", " in_na", " in_kn", "in2n", "in___kn"], "in_s": ["in_ss", "in_sl", "in42s", "out_n", "out_s", "in__ss", "out_sl", "out_map", "in__s", "in42map", "in42n", "out_ss", "in__sl", "in42ss"], "in_map": [" in_m", "in_m", "in_en", " in_en"], "s": ["f", "ps", "sts", "str", "ws", "ls", "has", "m", "ares", "fs", "a", "cs", "rs", "t", "y", "gs", "xs", "ins", "ms", "os", "ns", "r", "v", "sym", "es", "c", "gets", "b", "string", "p", "ains", "ss", "j", "ds", "sb", "n", "si", "abs", "sq", "ts"], "MOD": ["RR", "MIN", "LOG", "INC", "MAC", "UL", "FD", "EXP", "DEF", "REF", "SUP", "OVER", "FORM", "FIN", "RO", "REM", "VER", "mod", "LIN", "AF", "TM", "END", "Mod", "AD", "REG", "MODE", "MS", "RM", "POS"], "INF": ["INf", "INFE", "INEFR", "CONFE", "INFR", "INEFE", " INFE", "INEf", "CONf", "CONF", " INf", "CONFR", " INFR", "INEF"], "N": ["NH", "NER", "K", "C", "NOR", "AN", "R", "Ni", "CNN", "NB", "NI", "M", "NR", "MN", "NP", "NA", "ND", "NT", "SN", "NS", "L", "NM", "TN", "P", "No", "T", "GN", "J", "n", "V", "I", "NC", "NO", "NN", "NPR"], "S": ["Y", "BS", "String", "SI", "H", "C", "Si", "SS", "R", "SL", "PS", "LS", "SM", "SB", "JS", "M", "A", "RS", "INS", "ST", "IS", "SR", "US", "NS", "SAM", "SU", "SO", "L", "SP", "TS", "P", "ES", "Q", "SH", "T", "SF", "Z", "V", "I", "B", "CS", "SA", "Set", "SQL"], "ans": ["ens", "rors", "anon", "ls", "mas", "aned", "AN", "oss", "ran", "anc", "cons", "amps", "xs", "anned", "iann", "ins", "anas", "ms", "aus", "ns", "outs", "ons", "ann", "ars", "os", "aps", " Ans", "aos", "arts", "ents", "angs", "ums", "rans", "ANS", "uns", "nas", "offs", "anes", "nan", "ads", "ats", "ros", "an", "ks", "ants", "lan"], "i": ["z", "f", "ini", "ri", "zi", "m", "l", "y", "ix", "ti", "ip", "ci", "\u0438", "k", "v", "gi", "ij", "hi", "index", "b", "ind", "id", "di", "p", "bi", "j", "pi", "e", "ai", "it", "ii", "xi", "si", "ic", "li", "I", "x", "ui", "mi"], "v1": ["m0", "V1", "ve001", " v0", "m3", "ve1", "rev1", "v3", "V11", "v11", "V3", "rev0", "rev11", "v001", " v3", "rev001", "ve11", "V001", "v0", "V0", " v11", "ve0", "m1", "m11"], "v2": ["g3", " vtwo", "sv2", "vtwo", "V1", "ve2", "vetwo", "ve1", "g6", "v3", "sv3", " v256", "V3", "v6", " v3", "g256", "V2", "v256", "sv256", "ve3", " v6", "sv6", "g2", "Vtwo"]}}
{"code": "N,M = map(int,input().split())\\nli = []\\nfor _ in range(M):\\n  li += input().split()\\nfor i in range(1,N+1):\\n  print(li.count(str(i)))\\n", "target": "180", "substitutes": {"N": ["Num", "NE", "H", "C", "F", "R", "Ni", "CNN", "G", "NB", "NI", "NR", "A", "MN", "Na", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "Node", "L", "NM", "P", "T", "GN", "J", "n", "V", "I", "Ns", "NC", "NN"], "M": ["K", "m", "C", "MP", "F", "MX", "R", "Multi", "PM", "MT", "MR", "LM", "CM", "MI", "MN", "MC", "MM", "S", "D", "Many", "L", "NM", "P", "IM", "MS", "MAN", "DM", "T", "J", "V", "I", "B", "Mi"], "li": ["ls", "le", "zi", "cli", "ni", "l", "lis", "ti", "au", "ci", "len", "liga", "la", "lic", "sea", "ul", "sl", "lu", "lt", "ln", "ki", "hi", "lo", "yi", "ml", "di", "dl", "L", "lie", "lp", "pl", "pi", "fi", "qi", "ai", "LI", "ii", "n", "si", "Li", "list", "link", "mi", "multi", "ll"], "_": [" j", " __", " each", " p", " c", " the", " x", " k", "I", "x"], "i": ["z", "f", "ini", "zi", "m", "ni", "l", "y", "ti", "ci", "k", "v", " j", "__", "ij", "c", "oi", "index", "q", "ind", "id", " ii", "di", "num", "p", "j", "pi", "qi", "it", "int", "ii", "xi", "n", "si", "iri", "ic", "I", "x", "mi", "iu"]}}
{"code": "H, W = map(int, input().split())\\nS = [input() for i in range(H)]\\n\\nfor h in range(H):\\n    new_s = ''\\n    for w in range(W):\\n        if S[h][w] == '#': \\n            new_s += '#'\\n            continue\\n        count = 0\\n        ary = [-1, 0, 1]\\n        for i in ary:\\n            for j in ary:\\n                if h+i < 0 or h+i >= H or w+j < 0 or w+j >=W: continue\\n                if S[h+i][w+j] == '#':\\n                    count += 1\\n        new_s += str(count)\\n    \\n    S[h] = new_s\\n\\nfor s in S:\\n    print(s)", "target": "615", "substitutes": {"H": ["Y", "HK", "HO", "He", "C", "X", "F", "HT", "R", "Sh", "HI", "M", "N", "HB", "A", "HQ", "HL", "High", "HD", "HH", "U", "TH", "MH", "Host", "His", "GH", "E", "HC", "HA", "Hi", "HE", "DH", "P", "SH", "Eh", "Ha", "T", "J", "V", "I", "B", "OH", "RH", "HS", "AH", "NH"], "W": ["Y", "Width", "X", "F", "WS", "HT", "R", "WW", "G", "N", "M", "WB", "WR", "A", "Weight", "WE", "WAR", "WM", "Wa", "NW", "Ws", "SW", "WP", "WC", "WI", "WA", "DW", "L", "TW", "FW", "Win", "RW", "VW", "P", "Q", "CW", "T", "J", "Z", "V", "BW", "I", "B", "We", "EW", "WH", "MW", "Wh"], "S": ["Y", "Sample", "BS", "String", "SI", "C", "Si", "SS", "X", "ALS", "WS", "F", "R", "SL", "G", "JS", "SB", "LS", "PS", "N", "M", "OS", "A", "Windows", "SR", "E", "DS", "Series", "D", "NS", "SU", "L", "P", "TS", "ES", "Q", "SH", "List", "T", "SF", "J", "VS", "Z", "V", "I", "B", "CS", "GS", "Screen", "HS", "SA", "States", "Set"], "i": ["z", "ini", "ish", "iw", "zi", "\u00ed", "m", "ir", "a", "y", "ix", "ti", "\u0438", "ci", "ip", "ji", "v", "gi", "ij", "hi", "ki", "b", "phi", "yi", "ie", "id", "di", "ik", "ih", "p", "pi", "fi", "qi", "e", "ai", "it", "ii", "xi", "si", "o", "ic", "li", "ia", "I", "u", "x", "iti", "mi", "iu", "im", "ui"], "h": ["ph", "he", "m", "kh", "a", "rh", "hm", "l", "ha", "y", "t", "hor", "hash", "hz", "bh", "r", "k", "ho", "v", "history", "hs", "c", "hi", "q", "b", "phi", "g", "zh", "th", "hd", "ih", "p", "oh", "ht", "hw", "hl", "dh", "gh", "hr", "hh", "ah", "u", "hu", "sh", "x", "ach", "igh", "hp"], "new_s": ["newMemb", "new42sb", "NEW_sb", "NEW_S", "new_e", " new_sb", "NEW_s", " new_e", "NEW_y", "new_r", "new_S", "newMemS", "newMems", "new42e", "NEW_e", "new42r", " new_r", "new_b", "NEW_b", "newMemsb", "new_sb", "new42s", "new_y"], "w": ["z", "nw", "ws", "iw", "win", "m", "wh", "y", "ww", "widget", "wd", "ow", "tw", "wall", "sw", "k", "v", "wa", "wx", "aw", "q", "wl", "wn", "wb", "we", "wy", "wr", "wk", "d", "window", "rw", "ht", "hw", "word", "kw", "wt", "wid", "wo", "ew", "fw", "wal", "wp", "x", "wi", "width"], "count": ["ount", "add", "found", "sum", "C", "child", "comment", "only", "cond", "reset", "counter", "hold", "amount", "nt", "number", "second", "case", "delete", "result", "status", "length", "c", "match", "long", "index", "start", "state", "group", "Count", "double", "flag", "code", "nb", "ind", "id", "num", "call", "process", "size", "next", "ctr", "race", "command", "total", "zero", "const", "current", "weight", "cache", "hash", "needed"], "ary": ["z", "secondary", " boundaries", "either", "wise", "ational", "C", "ter", " boundary", "exclusive", "counter", "itary", "number", "xx", "ham", "ery", "ARY", "never", "status", "early", "journal", "c", "condition", "index", "ith", "ere", "ify", "loop", "ory", "must", "aries", "er", "opening", "icate", "ctr", "arity", "are", "ry", "ive", "binary", "eway", "ire", "ternal", "able", "etary", "ray", "list", "arily", "prefix", "primary", "ation", "arie", "arry", "entry", "iary", "ally"], "j": ["z", "f", "nw", "obj", "jl", "a", "ja", "y", "t", "wd", "fr", "jp", "r", "ji", "k", "v", "json", "ij", "wa", "q", "b", "g", "je", "we", "d", "p", "oj", "jo", "kj", "jas", "e", "jj", "jump", "aj", "J", "n", "o", "ju", "uj", "dj", "u", "x", "bj", "js", "jc"], "s": ["ps", "f", "stats", "ws", "https", "ls", "ords", "sv", "has", "m", "ews", "fs", "rs", "t", "y", "gs", "xs", "second", "ms", "ns", "r", "series", "strings", "v", "es", "hs", "c", "b", "g", "string", "p", "ss", "rows", "ds", "less", "e", "sb", "its", "ims", "ses", "n", "tes", "ats", "als", "qs", "Ws", "js"]}}
{"code": "n=int(input())\\n\\nnum=0\\nfor i in range(1,10**3):\\n    if i*(i-1)//2==n:\\n        num=i\\n        break\\n\\nif num==0:print(\"No\");exit()\\nlength=num-1\\nA,cnt=[],1\\nfor i in range(1,num):\\n    B=[]\\n    cnt +=i-1\\n    for j in range(i):B.append(cnt+j)\\n    for j in range(i,length):B.append(B[-1]+j)\\n    A.append(B)\\nA.append([i*(i+1)//2 for i in range(1,length+1)])\\n\\nprint(\"Yes\")\\nprint(length+1)\\nfor i in A:\\n    print(length,*i)", "target": "502", "substitutes": {"n": ["z", "f", "m", "a", "l", "nt", "t", "number", "s", "N", "len", "ns", "mn", "nm", "k", "v", "na", "c", "sn", "b", "g", "nu", "nb", "d", "p", "ne", "np", "nan", "nc", "o", "w", "x"], "num": ["Num", "nom", "max", "sum", "m", "mon", "nt", "number", "result", "con", "dim", "N", "final", "nm", "mn", "en", "len", "un", "msg", "cal", "na", "index", "b", "th", "nu", "nb", "mem", "mult", "p", "alph", "end", "total", "zero", "pn", "none", "net", "np", "hom", "uni", "cum", "rem", "no", "NUM", "non", "um", "x", "im", "count"], "i": ["io", "ini", "ei", "ri", "zi", "m", "a", "iii", "ni", "l", "y", "t", "name", "ix", "ti", "ip", "ci", "\u0438", "ji", "ati", "gi", "v", "ij", "c", "hi", "index", "ki", "q", "phi", "b", "oi", "yi", "ie", "ind", "id", "di", "ik", "d", "p", "bi", "multi", "pi", "fi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "iter", "x", "ui", "mi", "iu", "im", "iti"], "length": ["z", "f", "type", "dimension", "ength", "max", "rest", "function", "capacity", "l", "full", "name", "number", "result", "shape", "len", "buffer", "Length", "Len", "dx", "long", "index", "h", "term", "phi", "loop", "th", "position", "duration", "string", "test", "id", "size", "power", "height", "L", "pi", "end", "total", "form", "padding", "np", "component", "short", "sequence", "left", "no", "head", "prime", "count", "width"], "A": ["Y", "App", "Data", "AI", "AA", "Ar", "ALL", "H", "C", "AC", "a", "G", "AV", "N", "Abs", "CA", "LA", "Length", "EA", "Bar", "JA", "NA", "Count", "S", "E", "O", "As", "Part", "AU", "All", "Array", "AT", "HA", "AF", "L", "Address", "GA", "An", "At", "mA", "P", "This", "AM", "And", "T", "The", "AB", "AP", "V", "One", "I", "Alpha", "Each", "AST", "Ax", "SA"], "cnt": ["rNT", "cst", "acount", "ecnt", " cnd", "acnt", "Cpt", "rnd", "lcnd", "cnc", "rnt", "CNT", "acct", "Cnc", " cpt", "cNT", "ecnc", "Cct", "lcNT", "Count", "Cnt", "acst", "ecpt", "lcnt", "ecNT", " cst", " count", " cNT", "lcpt", " cnc", "Cst", "cnd", "cct", " cct", "count", "rpt", "cpt"], "B": ["BE", "Blue", "BB", "BS", "Bytes", "VB", "DB", "C", "EB", "Two", "RB", "OB", "SB", "NB", "BO", "Other", "WB", "N", "BA", "IB", "BC", "M", "BI", "Be", "Bar", "Body", "b", "GB", "E", "D", "Big", "L", "TB", "LB", "FB", "T", "Block", "J", "AB", "BT", "I", "BL", "CB", "Bern", "BY", "BF", "BR", "Bs"], "j": ["z", "f", "obj", "jl", "m", "ja", "jit", "l", "y", "t", "jp", "k", "ji", "r", "v", "json", "ij", "c", "q", "b", "g", "je", "d", "p", "bi", "oj", "kj", "it", "jj", "jump", "aj", "J", "si", "o", "uj", "dj", "li", "u", "x", "bj", "js", "jc"]}}
{"code": "N = int(input())\\nlst = input().split()\\n\\nfor i in range(N):\\n   lst[i] = int(lst[i])\\nlst.sort(reverse=True)\\n\\nAlice = 0\\nBob = 0\\n\\nfor i in range(N // 2):\\n   Alice += lst[2 * i]\\n   Bob += lst[(2 * i) + 1]\\n\\nif N % 2 == 1:\\n   Alice += lst[-1]\\n\\nprint(Alice - Bob)", "target": "452", "substitutes": {"N": ["Num", "K", "H", "C", "X", "F", "Sn", "R", "G", "CNN", "Ni", "NB", "NI", "M", "NR", "CN", "A", "Na", "Length", "Len", "NA", "S", "O", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "Network", "NH"], "lst": ["lict", " lstro", "Lsts", "rlbl", "lmust", "lsts", " lld", "Lists", "lssts", "lust", "lsct", "dlsts", "Lstr", " ltd", "Lmust", "dllist", "listro", "Ltd", " lists", "Lld", "llstr", "liists", "elsts", "olmust", "olst", "dlst", "lstro", "lsst", "olist", "elist", "ltd", " lsts", "dlstr", " lbl", "olust", "llst", "lilist", "dlct", "elld", "llsts", "elst", "rlst", "llist", "rlsts", "lct", " lust", "List", "rlist", "Lust", "Lst", "Lstro", "lstr", " lmust", "lbl", "Lbl", "litd", "list", "dlist", "lslist", " list", "liist", "lists", "lld"], "i": ["ei", "ini", "zi", "\u00ed", "m", "iq", "uri", "l", "ix", "iy", "ti", "ip", "ci", "\u0438", "ji", "gi", "v", "gu", "ij", "ori", "index", "oi", "ki", "q", "phi", "ami", "yi", "ie", "ind", "id", "di", "ik", "p", "bi", "j", "pi", "qi", "ai", "it", "ims", "ii", "xi", "n", "iri", "ic", "si", "I", "li", "iter", "ia", "u", "x", "ui", "mi", "iu", "im"], "Alice": ["Easy", "Blue", "Jane", "Mouse", "Witness", "Oil", "Everybody", "Ox", "Gold", "Baby", "Everyone", "Friends", "Al", "Eye", "Their", "Experience", "Anonymous", "Smith", "Ey", "Andrew", "Here", "Square", "Andre", "Roger", "Alien", "A", "White", "Stone", "Alex", "Alabama", "Allen", "Laura", "Emily", "Array", "Taylor", "Orange", "Little", "Leon", "Ice", "Faith", "Isa", "Hal", "Amazon", "Henry", "Anna", "Say", "Alan", "Howard", "Charles", "Answer", "Grey", "Adams", "Beck", "Tea", "Iron", "American"], "Bob": ["Brown", "Joe", "Blue", "BB", "Jane", "Billy", "Boy", "Baby", "Hope", "Everyone", "Jim", "Bl", "Ber", "Rob", "OB", "Kay", "Jack", "Ey", "Bah", "Robert", "IB", "HB", "Be", "Lady", "Jones", "Bet", "Again", "Bear", "Larry", "Ben", "Beer", "Her", "Jerry", "Bitcoin", "Lou", "Bir", "Boston", "Seven", "Elsa", "Toy", "ob", "Bay", "B", "Beh", "CB", "John", "Reb", "Already"]}}
{"code": "a=int(input())\\nb=int(input())\\nans=6-a-b\\nprint(ans)", "target": "752", "substitutes": {"a": ["z", "f", "ba", "m", "ap", "l", "all", "t", "au", "s", "i", "A", "r", "ca", "at", "v", "c", "ea", "d", "p", "alpha", "e", "sa", "aa", "n", "ac", "u", "ab", "aaa", "x", "ar", "an"], "b": ["z", "f", "sub", "rb", "ba", "ib", "m", "blue", "be", "l", "y", "t", "bc", "bp", "bg", "cb", "fb", "r", "v", "c", "g", "nb", "d", "bf", "e", "sb", "bis", "al", "n", "bs", "B", "ab", "bb", "eb"], "ans": ["ens", "ls", "names", "mas", "idents", "rs", "gs", "s", "ins", "anas", "aus", "ns", "ons", "ann", "aos", "beans", "es", "ians", "arms", "anners", "ands", "san", "ANS", "anus", "ds", "leans", "nas", "nan", "n", "ads", "bs", "ats", "vals", "anos", "anks", "ana", "an", "missions", "ants", "ions", "lan"]}}
{"code": "S = str(input())\\nif S[0] == S[1] == S[2]:\\n  print('No')\\nelse:\\n  print('Yes')", "target": "234", "substitutes": {"S": ["Y", "GRE", "SER", "BS", "SI", "H", "SS", "F", "SL", "G", "PS", "SB", "SM", "JS", "s", "N", "M", "ASC", "SOURCE", "A", "SEC", "RS", "INS", "ST", "IS", "DS", "SAM", "US", "ASH", "ISS", "SU", "NS", "L", "SP", "FS", "P", "TS", "SH", "T", "SF", "SE", "VS", "V", "I", "B", "CS", "GS", "BY", "SA"]}}
{"code": "def resolve():\\n    (H, W) = list(map(int, input().split(\" \")))\\n    S = [list(input()) for i in range(H)]\\n    L = [[0 for _ in range(W)] for _ in range(H)]\\n    R = [[0 for _ in range(W)] for _ in range(H)]\\n    U = [[0 for _ in range(W)] for _ in range(H)]\\n    D = [[0 for _ in range(W)] for _ in range(H)]\\n    for i in range(H):\\n        for j in range(W):\\n            if S[i][j] == \"#\":\\n                continue\\n            L[i][j] = L[i][j-1]+1 if j > 0 else 1\\n    for i in range(H-1, -1, -1):\\n        for j in range(W-1, -1 ,-1):\\n            if S[i][j] == \"#\":\\n                continue\\n            R[i][j] = R[i][j+1]+1 if j < W-1 else 1\\n    for i in range(H-1, -1, -1):\\n        for j in range(W):\\n            if S[i][j] == \"#\":\\n                continue\\n            D[i][j] = D[i+1][j]+1 if i < H-1 else 1\\n    for i in range(H):\\n        for j in range(W-1, -1 ,-1):\\n            if S[i][j] == \"#\":\\n                continue\\n            U[i][j] = U[i-1][j]+1 if i > 0 else 1\\n    ans = 0\\n    for i in range(H):\\n        for j in range(W):\\n            ans = max(ans, L[i][j]+R[i][j]+U[i][j]+D[i][j]-3)\\n\\n    print(ans)\\n\\nif '__main__' == __name__:\\n    resolve()", "target": "391", "substitutes": {"H": ["Y", "HK", "HO", "He", "CH", "C", "X", "F", "Th", "HT", "G", "Sh", "HI", "N", "M", "HB", "A", "HQ", "HL", "High", "HH", "h", "TH", "Host", "MH", "GH", "O", "HC", "HA", " h", "Hi", "HE", "HM", "HR", "P", "Q", "SH", "Eh", "HTML", "Ha", "EH", "T", "J", "V", "I", "B", "USB", "OH", "RH", "HTTP", "HP", "History", "HS", "NH"], "W": ["Y", "Sw", "Width", "X", "F", "HT", "WW", "G", "WT", "N", "M", "WB", "WR", "A", "WE", "Space", "WAR", "Tw", "NW", "RE", "Windows", "Week", "SW", "WP", "WI", "WA", "DW", "TW", "Win", "RW", "VW", "Q", "HTML", "CW", "T", "J", "Wh", "V", "Writer", "w", "BW", "We", "EW", "WH", "MW", "WC"], "S": ["Y", "Single", "String", "SI", "Sl", "C", "Si", "X", "SS", "SL", "G", "PS", "LS", "SB", "JS", "s", "N", "M", "A", "RS", "ST", "E", "O", "SR", "Series", "Source", "NS", "SU", "SP", "P", "TS", "Q", "SH", "T", "SA", "SF", "J", "Z", "SE", "V", "I", "B", "CS", "GS", "SSL", "Set", "SQL"], "i": ["ei", "ini", "ri", "parent", "ci", "ji", "v", "status", "hi", "h", "g", "di", "itime", "ai", "xi", "iri", "li", "ia", "x", "ui", "iu", "z", "f", "io", "ib", "zi", "cli", "ir", "this", "t", "ti", "info", "ati", "index", "ki", "phi", "ind", "er", "bi", "qi", "o", "im", "uri", "iii", "l", "ix", "\u0438", "r", "at", "ij", "c", "oi", "ie", "ik", "p", "e", "ii", "ic", "w", "multi", "a", "ret", "y", "ip", "err", "gi", "es", "ori", "ami", "yi", "id", "pi", "it", "int", "si", "I", "u", "mi", "init"], "L": ["DL", "Sl", "XL", "X", "LR", "F", "SL", "LE", "l", "G", "OL", "LS", "LM", "N", "M", "LT", "LG", "A", "AL", "NL", "EL", "PL", "O", "LIN", "RL", "CL", "LB", "P", "Q", "LC", "List", "T", "LI", "J", "Z", "V", "I", "B", "dL", "LP", "BL", "LL", "Lu", "TL"], "_": ["let", "pt", "____", "my", "py", "t", "ing", "__", "g", "val", "p", "ox", " the", "get", "T", "ac", "___", "x", "ly"], "R": ["RR", "Y", "AR", "RG", "RA", "Rs", "RB", "G", "MR", "N", "M", "NR", "r", "A", "RS", "GR", "RN", "RO", "Range", "RE", "PR", "UR", "SR", "RL", "Right", "HR", "Repl", "RT", "P", "DR", "Q", " r", "Re", "RP", "Ren", "T", "Z", "RM", "V", "B", "Res", "BR"], "U": ["Y", "UT", "UP", "UL", "Ut", "Gu", "UC", "G", "OU", "URI", "Us", "UU", "LU", "Union", "A", "Up", "PU", "CU", "UR", "O", "E", "US", "UK", "SU", "EU", "UF", "Un", "UI", "Q", "UN", "You", "T", "V", "u", "UD", "I", "B", "Tu", "UE", "PUT", "MU", "Lu", "UID"], "D": ["DN", "Y", "DL", "DB", "PD", "C", "X", "Do", "DF", "G", "DD", "N", "M", "A", "DA", "DIR", "DX", "O", "DT", "Dir", "DS", "d", "DH", "DOM", "P", "DR", "Q", "DM", "T", "J", "Z", "V", "I", "B", "DE", "DO", "DI"], "j": ["pr", "jl", "pt", "ja", "note", "ji", "opt", "v", "h", "q", "ian", "g", "ijk", "di", "li", "ah", "x", "js", "jc", "z", "obj", "att", "jit", "t", "json", "ind", "er", "bi", "exp", "jump", "n", "ju", "o", "dj", "bj", "str", "ion", "l", "ix", "by", "fr", "r", "k", "ij", "job", "b", "jac", "ie", "br", "kj", "jj", "aj", "w", "on", "ort", "off", "a", "ret", "y", "you", "ip", "key", "jp", "adj", "res", "err", "je", "rev", "d", "oj", "jo", "it", "J", "si", "uj", "rel", "og"], "ans": ["ens", "comments", "ings", "ls", "names", "aned", "rates", "ran", "cs", "rs", "amps", "xs", "s", "ins", "ms", "os", "aus", "ons", "ns", "anas", "ann", "res", "outs", "aps", "ends", "arts", "ents", "ians", "iban", "asks", "rans", "ands", "posts", "ations", "yes", " means", "ids", "ANS", "ds", "uns", "helps", "offs", "ints", "actions", "ras", "asms", "ats", "us", "ros", "ts", "ions", "an", "ks", "ants", "olds", "lan"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\ndef main():\\n    N = int(input())\\n    A = list(map(int, input().split()))\\n    com_left = [0] * (N+1)\\n    com_right = [0] * (N+1)\\n    total = sum(A)\\n    for i in range(N):\\n        com_left[i+1] = com_left[i] + A[i]\\n        com_right[i] = total - com_left[i]\\n    ans = 2020202020\\n    for i in range(N):\\n        diff = abs(com_left[i] - com_right[i])\\n        ans = min(ans, diff)\\n    print(ans)\\nif __name__ == \"__main__\":\\n    main()", "target": "728", "substitutes": {"input": ["str", "sleep", "out", "connect", "sum", "load", "eval", " Input", "sample", "format", "step", "raw", "fn", "output", "cin", "request", "enter", "empty", "q", "unit", "human", "insert", "csv", "ref", "Input", "source", "select", "paste", "password", "init", "val", "context", "read", "next", "command", "new", "get", "parse", "inc", "int", "run", "txt", "focus", "quick", "feed", "print", "exec", "data", "PUT", "text", "shift"], "N": ["Number", "Name", "Num", "H", "C", "AN", "R", "NOW", "Ni", "CNN", "NB", "NI", "M", "NR", "CN", "Length", "Len", "SIZE", "NP", "NA", "Count", "S", "ND", "New", "NT", "D", "SN", "NS", "Node", "NM", "L", "TN", "No", "P", "T", "MAN", "GN", "n", "V", "I", "B", "Ns", "NC", "NUM", "NO", "NN", "Network", "NH"], "A": ["AR", "AI", "AA", "H", "C", "AC", "a", "IA", "ACC", "ASC", "BA", "What", "CA", "LA", "AL", "JA", "NA", "As", "AU", "All", "AT", "Array", "AF", "L", "GA", "An", "Ca", "At", "P", "Java", "AM", "This", "AS", "SA", "AP", "AB", "Alpha", "B", "AE"], "com_left": ["Com_top", " com_com", "comp_lower", "com_long", " com___key", "comettop", "cometlong", "cometleft", "comp_current", "Com_Left", "com___left", "com___right", "com_key", "com_path", "com___key", "com_top", " com___list", "com___list", "cometLeft", "commatleft", "commatl", "com_com", "comp_right", " com_list", " com_l", "com_list", "com_l", " com_path", "comp_left", "com_current", "com_Left", " com___right", "comp_l", "commatcurrent", "Com_long", "Com_left", " com_key", "com_lower", "commatright", " com___left"], "com_right": ["comp_left", "com___block", "com___left", "comp_right", "com_block", "com___right", "comm_over", "com2left", "com___rem", "com_path", "comm_left", "com_rem", "com2ro", "com10ro", " com_rem", "comp_path", " com_block", "comm_right", "com_ro", "com10right", "com2right", "com_over", "comm_then", "com10left", "com_then", "com10path", "comp_ro", "com2path"], "total": ["done", "max", "normal", "out", "sum", "m", "ta", "Total", "all", "full", "t", "auto", "amount", "to", "parent", "info", "result", "meta", "created", "otal", "OTAL", "tar", " Total", "human", "complete", "size", "initial", "zero", "net", "current", "mean", "n", "summary", "no", "set", "base", "count", "general"], "i": ["f", "io", "ini", "ei", "ri", "zi", "iq", "uri", "cli", "a", "l", "y", "chain", "ix", "iy", "ti", "info", "s", "ip", "ci", "\u0438", "ji", "gi", "v", "gu", "ij", "ori", "oi", "hi", "ki", "q", "phi", "index", "h", "ami", "yi", "source", "ind", "asi", "di", "bi", "vi", "j", "pi", "fi", "qi", "isi", "ai", "it", "ii", "xi", "si", "iri", "ic", "batch", "li", "I", "me", "x", "ui", "mi", "iu", "im", "ski"], "ans": ["ens", "ps", "add", "ls", "views", "names", "aned", "AN", "oss", "ean", "anc", "cs", "rs", "cons", "pan", "amps", "xs", "iann", "lang", "s", "os", "anas", "ins", "ms", "ns", "ons", "outs", "ann", "aus", "acs", "news", "aps", "beans", "arts", "ents", "ians", "iban", "rans", "ands", "eds", "posts", "yes", "ids", "vs", "ANS", "terms", "can", "man", "nas", "ai", "offs", "nan", "ats", "us", "ros", "anks", "ions", "an", "ks", "ants", "lan"], "diff": ["add", "different", "adv", "deb", "wrong", "pad", "eff", "dev", "dd", "dist", "adj", "Diff", "exc", "missing", "extra", " difference", "iff", "distance", "changes", " Diff", "change", "dl", "changed", "frac", "trans", "cmp", "equal", "relative", "fix", "error", "abs", "erence", "part", "update", "patch", "Delta", "new"]}}
{"code": "#import re\\nx=input()\\nans=0\\nns=0\\nnt=0\\nfor i in range(len(x)):\\n  if x[i]=='S':\\n    ns+=1\\n  elif ns>0 and x[i]=='T':\\n    ns-=1\\n  else:\\n    ans+=1\\nprint(ans+ns)\\n", "target": "713", "substitutes": {}}
{"code": "from math import ceil\\nn = int(input())\\nans = 0\\nfor i in range(1, n):\\n    for j in range(1, n // i + 1):\\n        if i * j != n:\\n            #print(i, j, n - i * j)\\n            ans += 1\\nprint(ans)", "target": "589", "substitutes": {"n": ["nn", "m", "a", "ni", "l", "t", "nt", "Ni", "nr", "N", "len", "ns", "mn", "k", "r", "en", "v", "na", "c", "ln", "sn", "q", "b", "an", "g", "h", "cn", "nu", "nb", "num", "d", "p", "dn", "bi", "ne", "gn", "np", "nan", "nc", "nl", "x"], "ans": ["ei", "isin", "sum", "ix", "s", "reads", "jp", "es", " ni", "start", " p", "ian", " e", "pi", "kj", "e", "ai", "jj", " k", "ia", " s", " err", "an", "ski", " it"], "i": ["ini", "ei", "ri", "zi", "m", " bi", "ir", "a", "ni", "l", "ix", "ti", "ip", "ci", "gi", "v", "ij", "hi", "ki", "phi", "yi", " ii", "di", "ik", "p", "bi", "pi", "ai", "ii", "xi", "si", "ic", "o", "li", "I", "u", "ia", "x", "ui", "mi", "iu", "im", "iti"], "j": ["z", "f", "obj", "jl", "iaz", "ja", "l", "y", "fr", "jp", "ji", "v", "ij", "q", "b", "je", "jac", "p", "bi", "oj", "kj", "jj", "jump", "aj", "J", "si", "o", "ii", "uj", "dj", "u", "bj", "js", "jc"]}}
{"code": "n, l = list(map(int, input().split()))\\n\\nc = ((l) + (l+n-1)) * n // 2\\n\\nif 0 < l:\\n    c -= l\\nelif l <= 0 <= l + n - 1:\\n    pass\\nelse:\\n    c -= (l+n-1)\\n\\nprint(c)", "target": "302", "substitutes": {"n": ["z", "f", "nn", "m", "a", "all", "nt", "t", "name", "to", "s", "N", "i", "len", "ns", "r", "k", "v", "ul", "long", "ln", "sn", "q", "b", "an", "g", "h", "cn", "nu", "nb", "num", "d", "size", "p", "count", "j", "e", "int", "np", "nc", "o", "w", "no", "nl", "x", "ll"], "l": ["z", "f", "ol", "ls", "yl", "el", "le", "m", "t", "lin", "kl", "s", "i", "len", "r", "v", "ul", "sl", "length", "long", "ln", "h", "q", "b", "lc", "g", "lu", "ct", "ml", "d", "p", "dl", "L", "j", "lp", "pl", "local", "e", "lr", "al", "loc", "o", "li", "u", "left", "nl", "list", "x", "ll"], "c": ["z", "f", "m", "C", "cr", "cs", "t", "y", "cf", "i", "ci", "r", "rc", "ca", "ch", "v", "co", "h", "cv", "b", "lc", "g", "gc", "cn", "ct", "cc", "cl", "ce", "d", "cos", "p", "cur", "j", "cp", "xc", "e", "ac", "o", "cu", "u", "w", "cum", "x", "cm"]}}
{"code": "def abc():\\n    n, a, b = map(int, input().split())\\n    plan1 = n * a\\n    plan2 = b\\n    print(min(plan1, plan2))\\n\\n\\nabc()\\n", "target": "751", "substitutes": {"n": ["z", "f", "nn", "m", "l", "t", "nt", "nr", "s", "N", "i", "ns", "mn", "r", "nm", "v", "c", "ng", "sn", "q", "h", "g", "nu", "nb", "num", "d", "p", "j", "nc", "x"], "a": ["z", "f", "ba", "m", "ta", "ae", "t", "s", "i", "ax", "A", "ca", "at", "c", "an", "ity", "d", "va", "p", "alpha", "j", "e", "ai", "sa", "ata", "aa", "al", "ac", "ma", "w", "ab", "x", "ar", "am", "aff"], "b": ["f", "sub", "rb", "ba", "m", "l", "y", "t", "bc", "be", "pb", "i", "cb", "fb", "r", "v", "c", "h", "g", "nb", "d", "p", "bi", "j", "bf", "e", "beta", "ob", "bs", "B", "ab", "bb"], "plan1": [" plan3", "plOne", "Plan2", "plan3", "pl0", " planOne", "fan1", "Plan0", "Plan1", "pl3", " plan0", "pl1", "fan0", "fanOne", "Plan3", "pl2", "planOne", "plan0"], "plan2": ["plan4", " plan4", "Plan1", "Plan3", "pl2", "plan3", " plan3", "pl3", "Plan2", "pl4", "Plan4", "pl1"]}}
{"code": "n = int(input())\\nS = input()\\n\\nsapp = [[0] * n for _ in range(10)]\\nfor idx, s in enumerate(S):\\n    sapp[int(s)][idx] = 1\\n\\nfrom itertools import accumulate\\nsacc = [list(accumulate(sa)) for sa in sapp]\\n\\npins = set()\\nfor i in range(1, n-1):\\n    for lnum in range(10):\\n        if sacc[lnum][i-1] == 0:\\n            continue\\n        for rnum in range(10):\\n            # i+1\u304b\u3089\u6700\u5f8c\u307e\u3067\u3067\u51fa\u73fe\u3059\u308b\u304b\\n            rnumc = sacc[rnum][-1] - sacc[rnum][i]\\n            if rnumc > 0:\\n                pins.add(100*lnum + 10*int(S[i]) + rnum)\\n\\nprint(len(pins))\\n", "target": "756", "substitutes": {"n": ["z", "f", "nn", "names", "m", "l", "nt", "t", "number", "N", "ns", "k", "v", "na", "c", "sn", "q", "b", "h", "g", "an", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "net", "gn", "np", "nan", "nc", "o", "w", "x"], "S": ["BS", "SI", "Si", "C", "H", "X", "SS", "R", "SB", "N", "M", "OS", "A", "U", "SIM", "DS", "D", "SN", "NS", "SAM", "SU", "L", "P", "T", "SE", "Z", "V", "I", "B", "CS", "SA", "SQL"], "sapp": ["sApp", "Smap", "sac", " sac", "Sac", "psacc", "nacc", "psmap", "svapp", "nAPP", "sAPP", "SAPP", "svacc", "SApp", " sAPP", " smap", "smap", "psac", "svAPP", "Sacc", "Sapp", " sApp", "svApp", "napp", "nmap", "psapp"], "_": ["nn", "pt", "a", "all", "nt", "ing", "ix", "un", "ng", "ex", "ate", "ct", "val", "mod", "ml", "mt", "time", "ac", "non", "x", "an", "ation"], "idx": ["idxy", "idz", "midxc", "midx", "indxc", " idxc", "midz", "indxs", "idxs", "IDxs", " idxy", " idn", "midy", " idxs", "indy", " idy", "IDxy", "IDx", "indx", " idz", "indn", "idxc", "IDn", "idy", "indxy", "indz", "idn"], "s": ["ps", "sys", "f", "sing", "sv", "sc", "a", "src", "se", "sm", "t", "gs", "su", "y", "sample", "ins", "single", "sym", "sd", "sl", "es", "b", "g", "string", "p", "ss", "ds", "sam", "sb", "sit", "si", "sq", "ats", "st", "space", "ts"], "int": ["str", "min", "integ", "range", "ext", "oct", "point", "uint", "input", "filter", "long", "index", "Int", "double", "val", "string", "ind", "id", "inter", "num", "char", "sort", "bool", "INT", "get", "ints", "integer", "short", "float", "dec", "iter", "set", "print", "list", "digit"], "sacc": ["sadj", "nsacc", "nsatt", "Sattr", " sadj", "ssadj", "gsadj", "nsapp", "sagg", "ssacc", "sattr", " satt", "ssatt", " sagg", " sattr", "gsatt", "gsagg", "Satt", "ssagg", "satt", "nsattr", "Sacc", "Sapp", "gsacc"], "sa": ["sys", "ama", "asa", "mas", "ta", "ae", "a", "sis", "ja", "se", "sac", "sta", "su", "sie", "ti", "sy", "say", "ca", "sw", "sea", "pa", "sd", "na", "gu", "da", "ss", "ao", "sam", "isa", "nas", "sb", "ai", "pse", "so", " si", "ses", "si", "ma", "ia", "asse", "space", "Sa", "SA", "osa"], "pins": ["ps", "pin", "ta", "reset", "sis", "bp", "su", "os", "nos", "mn", " pa", "status", "mis", "pa", "lock", "marks", "we", "pi", "rpm", "locks", "po", "ses", "cache", "si", " pin", "pres", "Pin", "spin"], "i": ["z", "f", "ini", "zi", "m", "a", "ni", "l", "y", "ti", "ip", "ci", "gi", "v", "c", "ki", "b", "phi", "yi", "asi", " ii", "di", "d", "p", "bi", "j", "pi", "ai", "ii", "xi", "si", "ic", "o", "li", "I", "mi", "iu"], "lnum": ["olinumb", "rnumb", "nnumn", "lnummer", "lnumb", "lnUM", "bnum", "olinum", "rnumer", "nnummer", "olnum", "kinum", "nnum", "kinummer", "lnumer", "kinumn", "kinume", "bnummer", "olinUM", "lnumn", "olnumb", "olnumer", "rnUM", "nnume", "lnume", "olinumer", "olnUM", "bnume", "bnumn"], "rnum": ["rrNum", "rnumber", "rrnam", "rNum", "rnam", "nrnum", "Rnumber", "Rnam", "RNum", "nrNum", "rrnumber", "rrnum", "nrnumber", "Rnum", "nrnam"]}}
{"code": "n,k,*a=map(int,open(0).read().split())\\na.sort()\\np=a.pop\\ns=b=~k%2or p()\\ni=0\\nfor _ in k//2*'_':\\n x=a[i]*a[i+1]\\n if x*b>a[-1]*a[-2]*b:s*=x;i+=2\\n else:s*=p()*p()\\n s%=10**9+7\\nprint(s)", "target": "606", "substitutes": {"n": ["nn", "m", "l", "nt", "t", "Ni", "nr", "N", "ns", "nm", "mn", "v", "na", "c", "sn", "q", "h", "nu", "nb", "num", "nv", "d", "j", "ne", "np", "nan", "nc", "nl"], "k": ["z", "max", "K", "m", "kr", "kind", "kh", "ka", "l", "t", "ck", "kl", "ok", "kk", "key", "ke", "v", "c", "mk", "q", "g", "ak", "unk", "ik", "d", "num", "km", "j", "kj", "ek", "kw", "tk", "o", "w", "sk", "ko", "ku", "ks"], "a": ["f", "ba", "abc", "apa", "m", "ap", "ta", "ae", "l", "all", "t", "sta", "ga", "au", "xa", "A", "ca", "at", "history", "aos", "na", "c", "wa", "an", "h", "g", "aux", "area", "changes", "go", "da", "alpha", "app", "window", "oa", "parts", "args", "e", "sa", "ai", "ata", "aa", "ac", "o", "ma", "w", "mac", "ia", "ab", "eas", "aaa", "ar", "ach", "am", "data", "ack"], "p": ["op", "ps", "pe", "f", "pr", "ap", "m", "rep", "l", "y", "t", "pos", "pop", "pb", "pp", "point", "r", "tp", "jp", "v", "pa", "c", "h", "fp", "q", "g", "pre", "d", "power", "j", "lp", "ping", "cp", "P", "np", "pc", "o", "u", "pn"], "s": ["ps", "stats", "f", "sv", "ws", "ls", "hat", "m", "fs", "cs", "rs", "t", "se", "gs", "xs", "l", "y", "os", "ms", "ns", "r", "sw", "v", " parts", "es", "c", " samples", "h", "gets", "g", "S", "changes", "d", "ss", "j", "ds", "parts", "e", "sb", "sa", "its", "ses", "o", "w", "sq", "tes", "ats", "us", "sh", "ts", "ar", "js"], "b": ["z", "f", "ba", "ib", "m", "be", "l", "y", "t", "bc", "bp", "pb", "bh", "r", "v", "c", "h", "g", "nb", "d", "bi", "j", "e", "sb", "o", "bs", "u", "w", "B", "bb"], "i": ["f", "zi", "m", "l", "y", "t", "ix", "ti", "ip", "ci", "jp", "v", "gi", "ij", "c", "hi", "index", "phi", "sim", "ind", "id", "di", "multi", "j", "pi", "fi", "ai", "it", "int", "ims", "ii", "xi", "si", "o", "ic", "li", "I", "u", "me", "mi", "iu", "im", "init"], "_": ["A", " j", "__", " __", " each", "E", " c", " the", "I", "B", " y"], "x": ["z", "xes", "xp", "X", "ux", "xy", "y", "ix", "xs", "xa", "ax", "xx", "xb", "v", "xt", "dx", "wx", "c", "mx", "ex", "fx", "rx", "xc", " xx", "e", "ox", "xe", "xi", "px", "xf", "xd", "tx"]}}
{"code": "import sys\\nreadline = sys.stdin.readline\\nMOD = 10**9+7\\ndef frac(limit):\\n    frac = [1]*limit\\n    for i in range(2,limit):\\n        frac[i] = i * frac[i-1]%MOD\\n    fraci = [None]*limit\\n    fraci[-1] = pow(frac[-1], MOD -2, MOD)\\n    for i in range(-2, -limit-1, -1):\\n        fraci[i] = fraci[i+1] * (limit + i + 1) % MOD\\n    return frac, fraci\\n\\nfrac, fraci = frac(2341398)\\ndef cmb(a, b):\\n    if not a >= b >= 0:\\n        return 0\\n    return frac[a]*fraci[b]*fraci[a-b]%MOD\\n\\nK, = map(int, input().split())\\nt = len(input().strip())\\n\\nR = 0\\nfor x in range(K+1):\\n    R += cmb(K+t-x-1, t-1)*pow(25, K-x, MOD)*pow(26, x, MOD)%MOD\\n    R %= MOD\\nprint(R)\\n", "target": "539", "substitutes": {"readline": [" Readlines", " Readstring", " readlines", "Readline", "READline", "Readeline", "readLine", "readstring", "ReadLine", "READlines", "readeline", "READLine", " Readline", "READeline", "Readstring", " readLine", "readlines", " readeline", " ReadLine", " readstring", "Readlines"], "MOD": ["READ", "SET", "X", "MT", "EXP", "REL", "MAX", "MED", "MAT", "REM", "ID", "RE", "MM", "SPEC", "FIL", "UN", "JUST", "LOD", "TAG", "COM", "Mods", "LIB", "LOG", "IME", "M", "FIN", "FUN", "mod", "DIR", "OK", "IND", "TW", "CC", "RED", "REG", "LOC", "DEC", "PUT", "MIN", "UL", "ROM", "LED", "OD", "OFF", "BIT", "L", "IT", "TD", "LOCK", "Mod", "AD", "OR", "NUM", "FILE", "DEBUG", "MD", "TR", "ALL", "UPDATE", "ED", "FD", "N", "ERROR", "DATA", "MC", "SIZE", "DEV", "RO", "VER", "TM", "DOM", "MODE", "IDENT", "PER", "LD", "VALUE", "DE", "LINE", "IN"], "limit": ["type", "lit", "max", "min", "level", "capacity", "line", "m", "util", "pin", "range", "mit", "Limit", "spec", "cut", "l", "control", "len", "make", "lim", "perm", "fail", "check", "lock", "length", "bound", "filter", "condition", "scale", "limited", "mod", "lo", "bit", "margin", "source", "limits", "default", "size", "p", "tail", "join", "pi", "pl", "IT", "it", "int", "block", "Lim", "n", "log", "li", "iter", "set", "PI", "link", "mi", "prime", "unit", "base"], "frac": ["feat", "integ", "sum", "percent", "df", "floor", "full", "format", "etc", "compl", "div", "quant", "bf", "cmp", "fac", "offs", "tf", "norm", "f", " fraction", " df", "obj", "Fr", "fine", " abs", "ext", "conn", "rc", "cin", "scale", "abi", "cart", "comp", "cos", "exp", "inf", "txt", "float", "tc", "abs", "cum", "arg", " cum", "org", "pack", "nt", "cf", "fr", "fn", " fr", "fb", "at", "icc", "circ", "func", "p", "alpha", "agg", "fi", "bin", "inc", "conf", "fc", "ac", "ic", "rand", "diff", "arr", "pac", "ifa", "off", "inv", "acc", "all", "err", "res", "lim", "flat", "pi", "null", "it", "int", "rel", "init"], "i": ["f", "z", "io", "ini", "iso", "zi", "m", "l", "y", "ix", "iy", "ti", "info", "s", "ip", "ci", "lim", "gi", "v", "status", "ij", "c", "index", "ki", "phi", "yi", "ind", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "fi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "li", "I", "ia", "u", "o", "ui", "mi", "iu", "im", "item"], "fraci": ["randit", " fractionis", "fI", "fcij", "fcai", "fracini", "complij", "compli", "fracii", "cummi", "stab\u0438", "fracI", "funcis", "exci", "stabiu", "fraco", "funci", "fcip", "devis", "obji", "excic", "perm\u0438", "fci", "floati", "stabmi", "fracic", "complmi", "compliu", "fcis", "quanti", "fracui", "gzui", "frac\u0438", "fracmi", "permi", "fcir", "frai", "cmpui", "objI", "fis", "gzi", "diffii", "floatini", "fcini", "complis", "fris", "diffir", "cumi", "complini", "permiu", "funcI", "fracis", "devmi", "excis", "fai", "objis", "stabi", "fro", "devui", "randai", "frit", "diffci", "objai", "complui", "devi", "fi", "frip", " fractionic", "fracir", "cum\u0438", "fracci", "gzis", "quantir", "frui", "floatij", "diffi", " fractioni", "rando", "cmpis", "excii", "floatiu", "fracip", "fracij", "cumiu", "funcai", " fractionii", "gzip", "fcci", "fciu", "diffic", "fracit", "fcui", "cmpi", "fraciu", "cmpmi", "fco", "randi", "diffis", "fracai", "fri", "fcit", "permmi", "quantci"], "a": ["ba", "m", "ta", "ae", "be", "l", "y", "sta", "au", "ga", "ax", "A", "r", "ca", "la", "at", "pa", "na", "c", "ea", "an", "ity", "ak", "area", "d", "va", "p", "alpha", "da", "ao", "j", "e", "sa", "ai", "aa", "ra", "aj", "al", "ac", "o", "ma", "w", "u", "ia", "ab", "ar", "am"], "b": ["z", "f", "rb", "ba", "m", "ben", "be", "l", "y", "bc", "to", "back", "s", "cb", "r", "k", "fb", "lb", "v", "c", "h", "g", "nb", "d", "go", "p", "bi", "br", "j", "e", "bu", "sb", "beta", "aa", "n", "ob", "bs", "u", "B", "ab", "bb", "eb"], "K": ["Y", "HK", "KA", "KN", "FK", "PK", "H", "C", "KT", "X", "F", "KK", "G", "W", "N", "M", "A", "k", "KR", "KS", "O", "NK", "D", "UK", "L", "P", "Q", "KE", "T", "J", "Z", "V", "I", "B", "KC", "TT", "MK"], "t": ["z", "f", "pt", "tm", "m", "ta", "l", "y", "tt", "tw", "len", "r", "tp", "k", "dt", "at", "ty", "v", " T", "c", "d", "tz", "te", "p", "j", "total", "wt", "T", "tr", "time", "n", "tc", "o", "w", "ts"], "R": ["RR", "Y", "TR", "Return", "AR", "RG", "Red", "H", "C", "RA", "X", "F", "Rs", "G", "W", "CR", "MR", "N", "M", "NR", "r", "RS", "GR", "RAM", "RO", "Range", "RE", "SR", "E", "D", "Mr", "L", "Right", "HR", "Rate", "Repl", "P", "RT", "DR", "Q", " r", "RF", "ER", "T", "Result", "J", "RM", "V", "I", "JR", "B", "Res", "ROR", "Rat", "BR"], "x": ["z", "f", "ey", "yx", "xes", "xp", "m", "X", "xy", "l", "y", "ix", "xs", "s", "xa", "ax", "xx", "r", "k", "v", "xt", "dx", "wx", "index", "h", "mx", "ex", "id", "d", "rx", "j", "xxx", "xc", "e", "ox", "xe", "xi", "n", "o", "ic", "u", "w", "xf", "xd", "tx"]}}
{"code": "string = input()\\nk = int(input())\\nans = list(string)\\n\\nalpha = \"abcdefghijklmnopqrstuvwxyz\"\\nalpha_to_num = {}\\nfor i in range(26):\\n    alpha_to_num[alpha[i]] = i\\n    \\nfor i, s in enumerate(ans):\\n    if s == \"a\":\\n        continue\\n    pos = alpha_to_num[s]\\n    kk = 26 - pos\\n    if kk > k:\\n        continue\\n    k -= kk\\n    ans[i] = \"a\"\\n    \\npos = alpha_to_num[ans[-1]]\\nnew_pos = (k + pos) % 26\\nans[-1] = alpha[new_pos]\\nprint(\"\".join(ans))", "target": "171", "substitutes": {"string": ["str", "String", "array", "line", "comment", "spec", "chain", "name", "number", "sample", "format", "result", "series", "buffer", "strings", "v", "S", "source", "san", "char", "p", "ring", "null", "letter", "word", "stress", "object", "ident", "parse", "file", "int", "past", "phrase", "sequence", "part", "list", "space", "prefix", "ar", "data", "text"], "k": ["dk", "max", "K", "m", "kind", "kr", "kt", "kh", "uk", "KK", "ka", "ck", "kl", "ikk", "ok", "kan", "ke", "kid", "v", "kar", "mk", "g", "kn", "ak", "ijk", "wk", "ik", "num", "kok", "p", "km", "cki", "j", "kj", "ek", "kw", "tk", "n", "sk", "ko", "ku", "ks", "yk"], "ans": ["ens", "values", "lines", "ls", "names", "ones", "idents", "cs", "rs", "gs", "amps", "anned", "ms", "anas", "ins", "os", "ns", "ons", "aus", "ann", "ars", "states", "news", "strings", "outs", "aos", "arts", "es", "ents", "ians", "angs", "ys", "types", "ids", "vs", "ANS", "terms", "ds", "parts", "uns", "results", "ints", "anes", "ams", "keys", "ads", "ras", "ats", "us", "vals", "anks", "an", "ks", "ants"], "alpha": ["type", "abc", "asa", "sum", "asia", "a", "phas", "letters", "format", "xa", "attr", "rc", "asc", "at", "upper", "filter", "sym", "aw", "index", "scale", "acl", "num", "p", "ppa", "pretty", "da", "alph", "alias", "letter", "pi", "trans", "capital", "int", "beta", "al", "ac", " Alpha", "sha", "ma", "ace", "Alpha", "pha", "star", "lat", "prefix", "ar", "digit", "auto"], "alpha_to_num": ["alpha_to_mon", "alpha_To_number", "alpha_to_name", "alpha_to1sum", "alpha_to_sum", "alpha_num_num", "alpha_2_sum", "alpha_num_number", "alpha_to2name", "alpha_To_num", "alpha_to_number", "alpha_num2name", "alpha_num2mon", "alpha_num_name", "alpha_num2number", "alpha_num2num", "alpha_to1mem", "alpha_2_num", "alpha_to2mon", "alpha_num_mon", "alpha_to1number", "alpha_to2num", "alpha_To_mon", "alpha_to_mem", "alpha_2_number", "alpha_2_mem", "alpha_to_con", "alpha_to2con", "alpha_to2number", "alpha_to1num"], "i": ["f", "io", "ini", "ri", "zi", "m", "a", "l", "y", "t", "ix", "ti", "ip", "ci", "gi", "v", "ij", "c", "ori", "index", "ki", "b", "g", "sim", "ind", "id", "ie", "di", "ik", "num", "p", "bi", "multi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "iri", "li", "I", "u", "o", "x", "ui", "mi", "im"], "s": ["ps", "sys", "sts", "str", "sing", "sv", "ls", "sc", "a", "sis", "spec", "se", "y", "t", "gs", "su", "rs", "xs", "ins", "os", "ns", "sw", "series", "sp", "sym", "es", "c", "sn", "start", "eds", "S", "p", "ains", "ss", "j", "ds", "sb", "span", "si", "n", "sin", "set", "ats", "us", "sat", "space", "ts", "ks", "ski", "js"], "pos": ["z", "ps", "add", "pro", "str", "offset", "kat", "pt", "pc", "Pos", "cond", "spec", "prop", "l", "sta", "to", "rot", "os", "key", "point", "at", "pose", "sp", "length", "tag", "index", "ln", "start", "post", "position", "yes", "val", "prot", "size", "cos", "p", "kin", "ss", "j", "pi", "pl", "port", "it", "mat", "po", "up", "pri", "n", "o", "pres", "loc", "no", "set", "pid", "stop", "us", "part", "x", "ko", "lat", "sol", "POS"], "kk": ["dk", "K", "kas", "kr", "hn", "kt", "kh", "uk", "KK", "ka", "ck", "kl", "ikk", "ok", "kid", "mk", "ki", "kn", "ak", "ijk", "wk", "ik", "kok", "kin", "km", "cki", "cp", "kj", "king", "kw", "ky", "tek", "sk", "ko", "sky", "ku", "ks", "yk"], "new_pos": [" new_Pos", "newvalpos", " newvalloc", "new__Pos", "new__pi", "new_Pos", "newvalPos", " newvalpi", "new_position", "new__loc", " newvalpos", " new_pi", "New_position", "New_pos", "newvalpi", "new_cos", "New_cos", "new_pi", "newvalloc", " newvalPos", " new_loc", "New_Pos", "new_loc", "new__pos"]}}
{"code": "import collections\\nimport math\\n\\nn=int(input())\\na=list(map(int,input().split()))\\nev=[a[2*i] for i in range(n//2)]\\nod=[a[2*i+1] for i in range(n//2)]\\n\\nccev=collections.Counter(ev)\\nccod=collections.Counter(od)\\n\\nmcev=ccev.most_common()\\nmcod=ccod.most_common()\\n\\nif mcev[0][0]!=mcod[0][0]:\\n    print(n-mcev[0][1]-mcod[0][1])\\n    exit()\\nelif len(mcev)==1 and len(mcod)==1:\\n    print(n-mcev[0][1])\\n    exit()\\nelif len(mcev)==1:\\n    print(n-mcod[1][1])\\n    exit()\\nelif len(mcod)==1:\\n    print(n-mcev[1][1])\\n    exit()\\nelse:\\n    tt=max(mcev[1][1],mcod[1][1])\\n    print(n-mcev[0][1]-tt)\\n    exit()\\n", "target": "498", "substitutes": {"n": ["z", "nn", "nia", "names", "m", "conn", "nt", "t", "name", "number", "N", "fn", "ns", "mn", "r", "k", "en", "v", "now", "na", "c", "ren", "ln", "sn", "an", "b", "ng", "g", "cn", "ct", "nu", "nb", "yes", "num", "d", "p", "dn", "j", "ne", "e", "net", "gn", "np", "nan", "nc", "o", "w", "no", "x", "on", "ll", "new"], "a": ["ba", "apa", "m", "ap", "ae", "ta", "att", "van", "sta", "au", "ga", "A", "at", "la", "v", "na", "an", "b", "aux", "area", "va", "alpha", "app", "act", "aka", "av", "sa", "ai", "ata", "aa", "aj", "ac", "abs", "ma", "ab", "eas", "aaa", "ar", "am"], "ev": ["vet", "ve", "vel", "events", "Ev", "ep", "eval", "van", "dev", "iver", "ow", "env", "div", " Ev", "v", "ever", "Dev", "ech", "eur", "veh", "ef", "tv", "iv", "eve", "vd", "nv", "esp", "ov", "ec", "ek", "eng", "vol", "event", "ew", "eg", "ell", "iev", "eas", "enc", "nov", "eb", "EV", "vert"], "i": ["io", "ei", "ini", "ri", "zi", "\u00ed", "m", "cli", "uri", "ix", "iy", "ti", "ip", "ci", "ji", "gi", "ij", "ori", "oi", "hi", "ki", "q", "phi", "id", "di", "bi", "multi", "pi", "qi", "ai", "it", "int", "ii", "iri", "si", "xi", "ic", "li", "I", "ui", "mi", "iti", "im"], "od": ["med", "ld", "cod", "ded", "pod", "ud", "ord", "bd", "ed", "dd", "ok", "sd", "b", "OD", "ped", "ood", "mod", "lad", "ods", "d", "pd", "hd", "do", "oa", "td", "ox", "ond", "cd", "rod", "ad", "ob", "o", "yd", "md"], "ccev": ["mcem", "ccedv", "ckei", "ccervt", "cceve", "cceri", "ccesve", "mkev", "mcex", "ccedvt", "ckevt", "mkeve", "mcevt", "mkex", "mkem", "mceve", "ccevt", "ccei", "ckex", "ckeve", "mkei", "ccedx", "mkevt", "ccerv", "ccem", "ckem", "ccesv", "ccex", "ccerve", "ccesx", "mcei", "ccerx", "ccerm", "ccedi", "ccesm", "ckev"], "ccod": ["ckcod", "mccod", "cmodo", "mcad", " ccont", "cmodi", "cscod", "csode", "ckad", "csad", "csod", "czodi", "mcode", " ccodo", "czont", "ccodi", "cmod", " ccodi", "ccodo", "ckod", "ckode", "czodo", "ccode", "cccod", "ccad", "czod", "ccont", "cmont"], "mcev": ["mcede", "ccey", "nceve", " mcevt", "mclesv", "cmkeb", "mciy", "mcix", "cmcev", "cmkev", "mkeuv", "mcesf", "mclever", "mocee", "mccesuv", "ccef", "mcedvt", "nceb", "mcivs", "cmkem", "receva", "ckey", "ccesem", "ccex", "ncev", "mCEvt", "ccesx", "mceem", "mcesv", "mcisv", "mcedh", "moceh", "ckevs", " mCEsv", "mciv", "mceuv", "mceb", "mccesv", " mCEve", "mcem", "mocev", "ccesf", "mcesy", "mkev", "reciva", "mclef", "mcevt", "mccev", "mkem", "ncesb", "mclev", "ncesve", "muceb", "cmceb", "mucem", "mcivt", "mcceuv", "ccesv", "mneve", "mcesve", "mnesv", "cmcem", "mcleh", "ncesv", "mcyx", "mcesh", "moucee", "mkesv", "mcesvt", "mccex", "mCEsv", "muceve", "mciva", "mcevs", "mcex", "mccesh", "mcyv", "mkey", "receh", "mcalv", "mneb", "mcalem", "mcee", "mceve", "mucee", "mclex", "mcleva", "mcesx", "ckex", "mcey", "mcyf", "mcedv", "mkever", "mucex", "mcleve", "mceva", "muceh", "mccesx", "recih", "mcalx", "cceem", "mcesuv", "muceuv", "mnev", "mcesb", "mcysv", "mciem", "ccessv", "mkeh", "mciver", "moucev", "ccevs", "mkeb", " mCEv", "mucevt", "mkeva", "ncessv", "reciver", "recev", "mucev", "cmceve", "mcesem", "mkeve", "mCEve", "recever", "mkex", "cmkeve", "mcef", "mcalsv", "mceh", "moucevt", "mclevt", " mCEvt", "reciv", "mcessv", "mcih", " mcesv", "mkevs", "mcesvs", "mcive", "mocevt", "mcever", "mcesm", "mcese", " mceve", "mouceh", "ckev", "mCEv", "mcceh"], "mcod": ["comcond", " mod", "mtd", "Mcode", "mcode", " mcos", "mcond", "micot", "micond", "mtck", "zcod", "bcod", "mics", "mpc", " mcond", "pcod", "mCod", "micod", "ccs", "cod", "ocod", "ycod", "pCod", "mick", "mancod", "Mcox", "ptd", "mod", "cCod", "zod", "mancode", "Mcod", "ocs", "mcot", "podic", "micz", "mtcos", "mcs", " mpc", "bod", "mcos", "mck", " mcot", "pcos", "bpc", "ccos", "ytd", "micos", "mancox", "bcox", "yodic", "mtcox", "MCod", "Mod", "Mcos", "ocox", " mck", "comcot", "ccz", "mcz", "pcox", " mcox", "manod", "comcod", "ccox", "modic", "pod", "mtcod", "micox", "zcox", "mcox", " mcode", "ycox", "ocz", "zpc", "comcox"], "tt": ["tu", "tm", "ta", "kt", "att", "tim", "t", "nt", "tp", "dt", "ty", "yt", "ft", "trust", "htt", "tl", "tta", "ott", "tv", "bolt", "tn", "tz", "tip", "td", "mt", "tf", "utt", "tk", "txt", "dust", "tax", "tc", "unt", "itt", "tty", "ts", "TT", "bb", "rt", "fee"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\n\\nnum1, num2, num4 = 0, 0, 0\\nfor i in a:\\n    if i % 4 == 0:\\n        num4 += 1\\n    elif i % 2 == 0:\\n        num2 += 1\\n    else:\\n        num1 += 1\\n\\nif num1 <= num4:\\n    print('Yes')\\nelif num1 == num4 + 1 and num2 == 0:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "612", "substitutes": {"n": ["nn", "m", "l", "t", "nt", "s", "N", "ns", "nm", "mn", "k", "v", "na", "c", "sn", "b", "cn", "nb", "num", "d", "p", "j", "e", "np", "nc", "o", "w", "x"], "a": ["ba", "out", "m", "asia", "ta", "ae", "another", "l", "all", "t", "sta", "s", "xa", "A", "ca", "at", "na", "c", "ea", "index", "an", "b", "area", "p", "va", "ao", "oa", "ai", "sa", "aa", "o", "ma", "w", "ab", "aaa", "list", "am"], "num1": ["num6", "number2", "um1", "n1", "n4", "Num0", "um0", "Num2", "um2", "number0", "number6", "um7", "sum2", "number4", "um4", "sum1", "numOne", "Num4", "Num1", "sum4", "n6", "umOne", "number1", " numOne", "n2", " num7", "num0", "Num7", "num7", "NumOne", " num6", " num0"], "num2": ["number2", " numb", "num02", "n1", "n4", "numTwo", "Numb", "um2", " numTwo", "NUM1", "NUM0", "n0", "NUM4", "number4", "um4", "NUM2", " num02", "umTwo", "Num4", "NumTwo", "numb", "NUM02", "number1", "umb", "number02", "num0", "n2", "Num2", " num0"], "num4": ["n44", "umfour", "number2", "number54", "um1", "n1", "n4", "nFour", " num54", "um2", "um0", "mon0", "um54", "numfour", "numFour", "monfour", "number7", "um7", "number4", "num54", " num44", "NumFour", "um4", "num44", "Num4", "mon1", " numfour", "Num1", "mon4", " numFour", " num7", "Num44", "num0", "num7", "n2", "Num2", " num0"], "i": ["ei", "ini", "zi", "\u00ed", " bi", "ni", "t", "ti", "ci", "ji", "ati", "ij", "c", "ori", "oi", "phi", "ami", "yi", "id", " ii", "di", " Xi", "Xi", "iat", "p", " ti", "pi", "ai", "it", "ii", "xi", "si", "iri", "ic", "o", "li", "I", "x", "iu"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\nimport math\\nfrom bisect import bisect_right as br\\nfrom bisect import bisect_left as bl\\nsys.setrecursionlimit(2147483647)\\nfrom heapq import heappush, heappop,heappushpop\\nfrom collections import defaultdict\\nfrom itertools import accumulate\\nfrom collections import Counter\\nfrom collections import deque\\nfrom operator import itemgetter\\nfrom itertools import permutations\\nmod = 10**9 + 7\\ninf = float('inf')\\ndef I(): return int(sys.stdin.readline())\\ndef LI(): return list(map(int,sys.stdin.readline().split()))\\n\\na, b, t = LI()\\nans = 0\\ni = 1\\nwhile i*a <= t:\\n    ans += b\\n    i += 1\\nprint(ans)", "target": "13", "substitutes": {}}
{"code": "n,s= map(int,input().split())\\nmin = s-n+1\\nmax =s+n\\nif(s-n<-1000000): min = -1000000\\nif((s+n)>1000001): max = 1000001\\nfor i in range(min,max):\\n  print(i,end=\" \")", "target": "688", "substitutes": {"n": ["z", "f", "nn", "nw", "m", "one", "a", "l", "y", "t", "nt", "name", "all", "ms", "N", "ns", "mn", "en", "nm", "k", "v", "na", "c", "sn", "an", "b", "h", "g", "cn", "nu", "nb", "num", "d", "size", "p", "j", "ne", "none", "net", "int", "np", "nan", "nc", "o", "w", "x", "norm"], "s": ["ps", "sys", "f", "sv", "ls", "m", "spec", "cs", "rs", "t", "se", "gs", "su", "os", "ms", "ins", "ns", "r", "sp", "es", "c", "b", "S", "yes", "sim", "p", "ss", "ds", "seconds", "self", "sa", "sb", "so", "its", "ims", "bs", "sq", "set", "ats", "south", "sat", "st", "us", "ts", "tes", "qs", "js"], "min": ["rand", "MIN", "sub", "rest", "offset", "med", "diff", "m", "only", "range", "my", "sol", "mn", "limit", "lt", "start", "Min", "mod", "ind", "default", "pre", "minimum", "sort", "initial", "low", "local", "ne", "minute", "int", "main", "short", "small", "loc", "first", "left", "rel", "mini", "mid", "st", "mins", "lower", "begin", "init"], "max": ["map", "rand", "rest", "out", "med", "sum", "range", "inv", "ext", "t", "full", "step", "ax", "final", "r", "MAX", "v", "limit", "Max", "length", "start", "h", "gt", "mx", "ex", "mod", "ref", "work", "size", "next", "can", "exp", "end", "act", "total", "last", "maximum", "right", "up", "conf", "ma", "w", "x", "prime", "mad", "view", "base", "huge"], "i": ["f", "ini", "m", "l", "y", "t", "ti", "ip", "r", "k", "ji", "v", " j", "gi", "ij", "c", "index", "q", "b", "g", "ind", "id", "di", "p", "bi", "j", "pi", "qi", "ai", "int", "ii", "iri", "si", "xi", "ic", "I", "li", "iter", "x", "mi", "im"]}}
{"code": "import math\\nn=int(input())\\nn_=int(math.sqrt(n))\\n\\nlist_ans=[]\\nfor i in range(2,n_+1):\\n  if n%i==0:\\n    ans=i+(n//i)-2\\n    list_ans.append(ans)\\n    \\n  \\nif not list_ans:\\n  print(n-1)\\n  exit()\\nprint(min(list_ans))", "target": "523", "substitutes": {"n": ["f", "nn", "nia", "names", "m", "ni", "l", "nt", "t", "number", "s", "N", "len", "ns", "mn", "en", "v", "na", "c", "ng", "sn", "ln", "b", "an", "g", "h", "cn", "nu", "nb", "num", "size", "d", "p", "dn", "j", "network", "ne", "gn", "nor", "np", "nan", "nc", "o", "no", "nl", "x"], "n_": ["isw", "n1", " nsw", "i_", "na_", "n__", "lnsw", " n__", "ln1", "i__", "nsw", "i1", "ln_", " n1", "z_", "ln__"], "list_ans": ["listableani", "list_an", "list_ann", "list_angs", "list2ants", "list_ani", " list_ani", " list_ANS", "list2ani", "listableants", "list_ANS", "list2anas", "list_ants", "list2ann", " list_angs", "list2ans", " list_ants", " list_an", " list_ann", "list2an", " list_anas", "listableans", "list_anas", "listablean", "list2ANS"], "i": ["f", "ini", "ei", "ib", "zi", "m", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "\u0438", "gi", "v", "ij", "hi", "oi", "index", "ki", "q", "yi", "ind", "id", "di", "ik", "d", "p", "bi", "j", "pi", "isi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "x", "ui", "mi", "iu", "im"], "ans": ["ens", "cas", "ls", "cus", "ean", "cs", "ais", "pan", "iann", "ars", "anas", "ins", "aus", "ons", "ms", "ns", "ann", "arts", "es", "ians", "eds", "posts", "san", "vs", "ANS", "can", "nas", "offs", "int", "ints", "anes", "ats", "orts", "an", "ants", "ski", "lan"]}}
{"code": "n = int(input())\\ns = list(input().split())\\nP = s.count(\"P\")\\nW = s.count(\"W\")\\nG = s.count(\"G\")\\nprint(\"Three\" if n==P+W+G else \"Four\")", "target": "229", "substitutes": {"n": ["f", "nn", "nw", "m", "l", "nt", "t", "number", "nr", "N", "i", "ns", "mn", "k", "r", "v", "na", "c", "ln", "sn", "h", "b", "g", "nu", "nb", "num", "d", "p", "network", "np", "nan", "nc", "w", "nl", "x"], "s": ["ps", "stats", "sts", "ings", "sv", "ws", "ls", "times", "sis", "l", "rs", "gs", "xs", "ms", "os", "i", "ns", "strings", "sp", "sl", "hs", "ers", "h", "pers", "b", "ys", "g", "S", "vs", "p", "rings", "ss", "ds", "parts", "sb", "ashes", "its", "ims", "ses", "abs", "items", "bs", "w", "sq", "tes", "ats", "als", "ts", "qs", "ks", "js"], "P": ["K", "PK", "PD", "H", "IP", "C", "X", "F", "R", "PS", "N", "M", "PA", "PO", "PC", "U", "PL", "Pi", "S", "PR", "D", "Pl", "PIN", "p", "L", "TP", "PP", "Q", "Pro", "T", "DP", "AP", "PN", "PH", "Power", "CP", "PUT", "Pe", "PT"], "W": ["Y", "K", "H", "X", "F", "R", "HT", "WW", "WT", "N", "M", "WR", "Weight", "WE", "WAR", "U", "WM", "Wa", "NW", "S", "Week", "SW", "D", "Word", "WP", "L", "DW", "WA", "Win", "VW", "J", "Z", "Wh", "V", "w", "BW", "B", "We", "EW", "WH", "MW", "WC"], "G": ["Y", "GP", "AG", "H", "GEN", "C", "F", "Graphics", "Gu", "R", "PG", "N", "M", "IG", "GR", "MG", "g", "S", "D", "TG", "L", "GG", "Gi", "GA", "SG", "GE", "GU", "FG", "Q", "Greg", "You", "J", "V", "VG", "B", "GS", "Group", "GT", "Gar"]}}
{"code": "def main():\\n    X, Y = map(int, input().split())\\n\\n    if X % Y == 0:\\n        print(\"-1\")\\n    else:\\n        print(X)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "396", "substitutes": {"X": ["TY", "UX", "K", "CE", "IP", "C", "Width", "MX", "R", "G", "W", "XY", "N", "M", "A", "OX", "Int", "XXX", "ID", "DX", "EX", "Cross", "D", "Xi", "L", "Right", "Win", "P", "INT", "Q", "ZX", "XM", "Co", "T", "XP", "XX", "Z", "V", "I", "IX", "VALUE", "TX", "x", "XT"], "Y": ["TY", "AY", "Your", "K", "KY", "CH", "IP", "HY", "y", "G", "NB", "XY", "OS", "N", "M", "YN", "OW", "MI", "NBC", "TH", "IS", "E", "Py", "D", "L", "YS", "My", "Q", "NY", "T", "J", "Z", "FY", "V", "YC", "I", "B", "YOU", "BY", "YY", "MY"]}}
{"code": "n = int(input())\\n\\nfrom collections import defaultdict\\nd = {0:2,1:1}\\n\\ndef calc(n):\\n    if n not in d:\\n        d[n] = calc(n-1) + calc(n-2)\\n    return d[n]\\n\\nfor i in range(n):\\n    calc(i)\\n\\nprint(calc(n))", "target": "50", "substitutes": {"n": ["name", "note", "v", "h", "q", "g", "wn", "num", " c", "no", "nl", "non", "x", "ll", "new", "z", "f", "nn", "m", "node", "t", "number", "len", "nm", "na", "ren", "cn", "nu", "nb", "ind", "dn", "net", "nan", "nc", "o", "l", "nt", "fn", "r", "k", "en", "c", "b", "rn", "go", "size", "p", "nat", "j", "none", "nor", "w", "on", "nw", "y", "s", "N", "ns", "mn", "ng", "sn", "ln", "nd", "ne", " ng", "int", "np", " N"], "d": ["f", "done", "ld", "m", "a", "df", "l", "t", "dict", "s", "dd", "r", "dt", "db", "v", "dx", "sd", "c", "h", "b", "nd", "g", "defined", "ind", "D", "di", "pd", "de", "dl", "do", "da", "p", "ds", "td", "dh", "dates", "ad", "o", "x", "data", "dat", "fd"], "i": ["ini", "zi", "m", "y", "iy", "ti", "ip", "r", "ji", "v", "gi", "ij", "q", "yi", "ind", "id", "di", "p", "bi", "j", "pi", "qi", "ai", "int", "ii", "xi", "si", "ic", "I", "u", "li", "iter", "x", "mi", "iu", "im"]}}
{"code": "a, b, c, d = (int(i) for i in input().split())\\nl = [0] * 101\\n\\nfor i in range(a, b+1):\\n    l[i] += 1\\n    \\nfor i in range(c, d+1):\\n    l[i] += 1\\nans = 0\\nfor i in l:\\n    if i == 2: ans += 1\\nprint(max(ans-1, 0))\\n", "target": "146", "substitutes": {"a": ["f", "ba", "ap", "am", "ae", "\u00e1", "be", "af", "s", "au", "ga", "ax", "A", "r", "at", "ea", "ak", "ao", "app", "act", "e", "ai", "sa", "aa", "aj", "al", "ac", "n", "o", "ma", "ia", "ab", "aaa", "x", "ar", "an"], "b": ["z", "f", "rb", "ba", "ib", "blue", "be", "y", "bc", "board", "back", "cb", "fb", "r", "db", "v", "g", "nb", "bi", "br", "j", "bf", "sb", "gb", "bo", "bis", "n", "ob", "bs", "shell", "B", "ab", "bb", "body", "eb"], "c": ["f", "C", "cr", "cs", "t", "bc", "cf", "s", "rc", "r", "cin", "ca", "cb", "ch", "co", "lc", "g", "cc", "ct", "ce", "cos", "cur", "cp", "ec", "e", "cd", "dc", "uc", "fc", "cache", "n", "tc", "ac", "cu", "u", "o", "cm"], "d": ["z", "f", "ld", "m", "t", "dos", "s", "dd", "days", "r", "dt", "v", "db", "nd", "g", "D", "di", "de", "pd", "p", "do", "da", "dir", "j", "ds", "td", "e", "cd", "dc", "n", "rd", "o", "ad", "u", "dec", "dra", "data"], "i": ["f", "io", "ei", "ib", "ini", "ri", "zi", "\u00ed", "m", "cli", " bi", "ir", "ni", "y", "t", "ix", "iy", "ti", "s", "ip", "ci", "\u0438", "ji", "ati", "v", "gi", "adi", "ij", "index", "oi", "ki", "phi", "yi", "ind", "id", " ii", "di", "ik", "p", "bi", "j", "pi", "qi", "e", "ai", "it", "ii", "xi", "si", "n", "o", "ic", "li", "I", "u", "ql", "iri", "ia", " di", "x", "iti", "mi", "iu", "im", "ui"], "l": ["f", "fl", "ol", "ld", "ls", "el", "le", "line", "m", "bl", "lv", "t", "lis", "r", "ch", "lb", "v", "la", "sl", "lt", "long", "ln", "h", "lay", "lc", "g", "lo", "ml", "dl", "p", "L", "j", "lp", "pl", "n", "loc", "o", "li", "w", "nl", "list", "rl", "lists", "ll"], "ans": ["ens", "rors", "cas", "ls", "views", "nets", "oss", "cs", "gs", "xs", "amps", "s", "os", "ins", "ms", "aus", "ons", "ns", "outs", "ann", "acts", "aps", "acs", "aos", "arts", "es", "ents", "ums", "ys", "ays", "ands", "eds", "posts", "yes", "vs", "ANS", "ds", "lets", "uns", "nas", "offs", "ats", "ros", "an", "ks", "ants", "olds"]}}
{"code": "a,b,c = map(int,raw_input().split())\\ncount = 0\\nfor i in range(a,b+1):\\n\tif c%i == 0:\\n\t\tcount += 1\\nprint str(count)", "target": "630", "substitutes": {"a": ["f", "ba", "am", "ae", "l", "af", "au", "ax", "A", "r", "ca", "at", "la", "ea", "ak", "d", "da", "app", "act", "aka", "oa", "e", "sa", "aa", "aj", "al", "ac", "ma", "ia", "ab", "aaa", "x", "ar", "an"], "b": ["f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "bc", "cb", "fb", "r", "v", "db", "g", "nb", "d", "bi", "j", "bf", "e", "sb", "gb", "bis", "n", "ob", "bs", "B", "ab", "bb", "bar", "eb"], "c": ["z", "f", "mc", "m", "C", "cr", "cs", "l", "t", "bc", "cb", "cin", "rc", "k", "v", "h", "lc", "g", "cc", "ct", "unc", "ce", "d", "p", "ec", "e", "cd", "dc", "cache", "fc", "n", "nc", "tc", "ic", "u", "x"], "count": ["thread", "ount", "max", "found", "sum", "report", "C", "counter", "hold", "amount", "nt", "number", "t", "second", "month", "result", "check", "quiet", "OUNT", "length", "true", "index", "state", "q", "group", "Count", "flag", "th", "ct", "nb", "temp", "ind", "id", "num", "size", "cur", "next", "ctr", "col", "total", "last", "inc", "tf", "current", "weight", "batch", "n", "first", "part", "iter", "success"], "i": ["f", "ini", "ri", "zi", "m", "y", "ti", "ip", "ci", "k", "v", "gi", "ij", "ori", "oi", "ki", "q", "g", "yi", "ind", "id", "di", "ik", "d", "p", "bi", "j", "pi", "e", "ii", "xi", "si", "ic", "o", "I", "li", "u", "x", "ui", "mi", "im"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\n\\nl = a[:]\\nwhile len(l) > 1:\\n    midx = l.index(min(l))\\n    r = []\\n    for i in range(len(l)):\\n        if i != midx:\\n            l[i] = l[i] % l[midx]\\n        if l[i] != 0:\\n            r.append(l[i])\\n    l = r[:]\\nprint(l[0])", "target": "534", "substitutes": {"n": ["z", "f", "nn", "m", "t", "nt", "nr", "s", "N", "len", "ns", "nm", "k", "mn", "v", "na", "c", "sn", "h", "b", "nb", "num", "d", "p", "j", "nc", "o", "nl", "x"], "a": ["ba", "apa", "m", "ae", "ta", "t", "ga", "au", "A", "la", "at", "wa", "c", "an", "h", "b", "p", "alpha", "da", "ao", "j", "sa", "aa", "al", "ac", "ma", "ia", "ab", "list", "ar", "ach", "am"], "l": ["f", "lit", "ol", "ld", "ls", "el", "le", "m", "lv", "t", "lis", "gs", "kl", "len", "sol", "il", "lb", "la", "v", "sl", "length", "lt", "c", "ln", "lag", "h", "b", "lc", "g", "tl", "lo", "ml", "dl", "p", "L", "j", "lp", "pl", "local", "hl", "lr", "al", "loc", "o", "ell", "li", "nl", "list", "x", "rl", "ll", "ly"], "midx": ["midf", "idi", "minx", " midy", "mti", "middlexi", "idwx", "medi", " midwx", "mif", "mii", "medx", "miny", "middlel", "ndxi", "medy", "midi", "midxi", "midl", "miwx", "midwx", " midf", "minxs", "midy", "ndi", "mtxi", "medxs", "middlei", " midi", "mtx", "idx", " midxs", "mix", "ndl", "mini", "ndx", "mtl", "middlex", "midxs", "idf"], "r": ["rb", "pr", "m", "rr", "kr", "cr", "rg", "R", "rh", "rs", "fr", "rc", "err", "res", "gr", "rl", "v", "c", "h", "q", "b", "g", "re", "er", "rm", "d", "p", "br", "ro", "e", "it", "right", "ur", "vr", "hr", "mr", "u", "rd", "w", "rec", "rel", "o", "dr", "x", "ar", "rt"], "i": ["io", "ini", "ei", "ri", "zi", "m", "uri", "cli", "y", "chain", "this", "ix", "ti", "ip", "ci", "key", "\u0438", "ji", "im", "ati", "v", "gi", "ij", "ori", "oi", "index", "ki", "q", "phi", "b", "id", "di", "bi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "iri", "ic", "batch", "li", "I", "x", "iti", "mi", "iu", "multi", "ui"]}}
{"code": "import sys\\na, b, c = map(int, sys.stdin.readline().rstrip().split())\\nprint(a * b // 2)", "target": "637", "substitutes": {"a": ["f", "ba", "m", "ae", "t", "au", "af", "xa", "A", "r", "ca", "la", "at", "ea", "g", "area", "d", "alpha", "da", "ao", "oa", "act", "e", "sa", "aq", "aa", "aj", "n", "ac", "ma", "u", "w", "ab", "aaa", "x", "an", "aff"], "b": ["f", "rb", "ba", "ib", "m", "be", "y", "bc", "i", "cb", "fb", "r", "ca", "v", "db", "g", "wb", "cc", "nb", "d", "bi", "j", "bf", "e", "sb", "bo", "gb", "n", "bs", "B", "ab", "bb", "eb"], "c": ["z", "f", "abc", "mc", "m", "C", "l", "cs", "t", "bc", "s", "i", "cb", "ca", "r", "v", "h", "lc", "g", "cc", "ct", "d", "p", "ec", "xc", "e", "n", "o"]}}
{"code": "N = int(input())\\nV = list(map(int, input().split()))\\nC = list(map(int, input().split()))\\n\\ntoku = 0\\ntotal = 0\\n\\nfor i in range(N):\\n  toku = V[i] - C[i]\\n  if toku > 0:\\n    total += toku\\nprint(total)", "target": "74", "substitutes": {"N": ["Y", "Num", "K", "X", "AN", "R", "Ni", "CNN", "NB", "NI", "M", "NR", "NP", "NA", "S", "NT", "D", "SN", "NS", "L", "NM", "No", "P", "T", "GN", "J", "n", "I", "NC", "NO", "NN", "NH"], "V": ["Your", "Values", "VO", "VB", "VD", "VAL", "VERS", "F", "VL", "IV", "AV", "NV", "v", "CV", "U", "VER", "Va", "VM", "VC", "VI", "Vs", "Ver", "VW", "GV", "VOL", "VS", "UV", "VIS", "VT", "Vector", "TV", "VA", "VE"], "C": ["K", "CE", "H", "CO", "AC", "IC", "R", "CR", "Cs", "CP", "CM", "M", "BC", "A", "CA", "CI", "CV", "c", "CU", "U", "Cu", "S", "D", "CL", "VC", "CC", "LC", "Co", "T", "YC", "I", "B", "CS", "CB", "SC", "JC", "EC", "DC"], "toku": ["nuk", "noma", "tkok", "Tung", " tku", "qtoki", "noku", "nku", "nkok", "Toko", " tkok", " tung", " tuk", "Tkok", "tku", "toki", " toko", "tung", "Toku", "Toma", "toma", "qtoku", "qtku", "Tku", "toko", "Toki", "qtung", "Tuk", " toma", "tuk", "noko", " toki"], "total": ["stats", "max", "successful", "normal", " summed", "sum", "neutral", "loss", "ta", "Total", "unknown", "unique", "confirmed", "other", "basic", "all", "t", "full", "number", "private", "result", "final", "eta", "created", "public", "otal", "OTAL", " Total", "flat", "everything", "ot", "reported", "human", "complete", "used", "temp", "num", "serial", "zero", "required", "quant", "pdf", "net", "current", "equal", "available", "void", "n", "summary", "no", "list", "system", "multi", "general", "huge"], "i": ["f", "pai", "io", "ri", "zi", "m", "uri", "chain", "t", "ix", "ti", "ip", "k", "ji", "gi", "ij", "c", "ori", "index", "ki", "q", "b", "ind", "id", "di", "p", "bi", "j", "pi", "qi", "it", "ii", "xi", "si", "n", "iri", "batch", "I", "li", "u", "ic", "set", "x", "iti", "mi", "ui", "multi"]}}
{"code": "from sys import stdin, stdout\\n\\n\\ndef solve():\\n    n = int(input())\\n    A = [float(i) for i in stdin.readline().split()]\\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\\n    dp[0][0] = 1\\n    for i in range(1, n+1):\\n        for j in range(0, i+1):\\n            if j == 0: dp[i][j] = (1 - A[i-1]) * dp[i-1][j]\\n            else: dp[i][j] = (A[i-1] * dp[i-1][j-1]) + ((1 - A[i-1]) * dp[i-1][j])\\n    ans = 0\\n    for i in range((n+1)//2, n+1):\\n        ans += dp[-1][i]\\n    return ans\\n\\nprint(solve())\\n\\n", "target": "437", "substitutes": {"n": ["nn", "nia", "m", "a", "l", "nt", "t", "name", "N", "ns", "mn", "en", "v", "na", "c", "ln", "sn", "an", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "network", "pi", "ne", "ai", "net", "int", "gn", "np", "nan", "nc", "o", "x", "on", "norm"], "A": ["App", "AI", "AA", "Ar", "H", "C", "ap", "API", "AC", "a", "Ang", "R", "Am", "au", "Acc", "N", "CA", "Ad", "RAM", "JA", "Av", "As", "D", "AU", "AT", "Array", "All", "Ag", "alpha", "GA", "An", "At", "P", "AD", "AM", "This", "AH", "AE", "Auth", "Rap", "AB", "AP", "V", "Area", "Ap", "B", "Alpha", "AAA", "Ax", "SA"], "i": ["io", "ei", "ini", "zi", "\u00ed", "m", "cli", "a", "ir", "my", "l", "y", "t", "name", "ix", "this", "ti", "info", "ip", "ci", "\u0438", "key", "ji", "at", "v", "gi", "status", "ij", "oi", "index", "ki", "phi", "ami", "yi", "ie", "ind", "id", "asi", "di", "ik", "p", "bi", "multi", "pi", "e", "ai", "it", "int", "ii", "xi", "iri", "si", "ic", "li", "u", "I", "ia", "o", "me", "x", "ui", "mi", "iu", "im", "data"], "dp": ["ps", "deb", "adr", "decl", "df", "pkg", "wd", "dos", "dict", "gp", "pb", "dd", "dro", "pp", "pas", "jp", "dt", "tp", "push", "db", "pipe", "dx", "vp", "dq", "pm", "htt", "csv", "deep", "dm", "pd", "d", "du", "dl", "p", "dep", "ds", "cp", "lp", "tap", "dial", "uf", "dc", "np", "DP", "dh", "ctl", "px", "dj", "dr", "wp", "hp"], "_": ["sys", "pt", "my", "py", "ix", "un", "__", "place", " __", "ml", " time", "ox", " the", "time", "___", "non"], "j": ["z", "f", "str", "obj", "jl", "m", "ja", "jit", "l", "y", "t", "fr", "jp", "k", "ji", "r", "at", "v", "json", "ij", "h", "q", "b", "job", "g", "jac", "test", "di", "p", "bi", "br", "oj", "kj", "it", "jj", "jump", "tr", "aj", "J", "si", "ju", "o", "uj", "dj", "li", "x", "bj", "js", "jc"], "ans": ["ens", "sts", "cas", "lines", "options", "checks", "mas", "aned", "AN", "amps", "gs", "xs", "s", "ins", "ms", "anas", "aus", "ns", "ons", "outs", "ann", "aps", "aos", "arts", "ents", "ians", "ums", "rans", "ays", "ands", "eds", "posts", "ations", "ies", "yes", " means", "works", "ANS", "can", "uns", "nas", "offs", "nan", "ams", "ates", "ats", "orts", "ros", "x", "anks", "an", "ks", "ants", "olds", "scan"]}}
{"code": "def bisect_right_rev(lst, x):\\n    if lst[0] < x:\\n        return 0\\n    if x <= lst[-1]:\\n        return len(lst)\\n\\n    a = 0\\n    b = len(lst) - 1\\n\\n    while abs(b - a) > 1:\\n        c = (a + b) // 2\\n\\n        if lst[c] < x:\\n            b = c\\n        else:\\n            a = c\\n    \\n    return b\\n\\nN = int(input())\\nA = [int(input()) for _ in range(N)]\\nseq = []\\n\\nfor i in range(N):\\n    if len(seq) == 0:\\n        seq.append(A[i])\\n    else:\\n        ind = bisect_right_rev(seq, A[i])\\n        if ind == len(seq):\\n            seq.append(A[i])\\n        else:\\n            seq[ind] = A[i]\\n\\nprint(len(seq))", "target": "245", "substitutes": {"lst": ["Lsts", "plbl", "plso", "mlst", "lsts", "Lso", " lso", "mlist", "dlsts", "Lstr", "plst", "mlstr", "tsts", "plnt", "klist", "nts", "nsts", "lts", "ulsts", "lnt", "elsts", "Lnd", "dlst", "ults", "plist", "elST", "lso", "lnd", " lsts", " lbl", "mlsts", "tST", "ulstr", "klsts", "tst", " lST", "dlnd", "elbl", "elst", " lstr", "nstr", "List", "tbl", "Lst", "lST", "lbl", "lstr", " lts", "ulst", " lnd", "Lbl", "klst", "klstr", "list", "nst", "dlist", " list", "Lnt", " lnt"], "x": ["z", "f", "xes", "xp", "X", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "ax", "xx", "at", "v", "xt", "dx", "wx", "co", "q", "ex", "ct", "val", "rx", "xc", "e", "ox", "xe", "cox", "xi", "n", "ic", "px", "xf", "zx", "tx"], "a": ["z", "f", "ba", "m", "am", "ae", "l", "y", "t", "au", "ca", "r", "la", "at", "v", "pa", "na", "index", "ea", "an", "g", "d", "va", "p", "j", "app", "oa", "e", "sa", "ai", "aa", "aj", "al", "n", "ac", "o", "abs", "ma", "ia", "ab", "ar", "ach", "bar"], "b": ["z", "f", "rb", "ba", "ib", "m", "bl", "be", "l", "y", "t", "bc", "bp", "cb", "r", "fb", "v", "db", "g", "nb", "d", "p", "bi", "br", "j", "e", "sb", "gb", "n", "ob", "o", "bs", "u", "abs", "B", "ab", "bb", "base"], "c": ["z", "f", "m", "C", "cr", "cs", "l", "t", "bc", "cf", "s", "con", "cb", "ca", "rc", "r", "ch", "ci", "v", "ctrl", "co", "h", "lc", "gc", "cc", "ct", "unc", "ce", "d", "cur", "p", "cp", "xc", "e", "cd", "dc", "fc", "n", "tc", "cy", "ac", "u", "ic", "cm"], "N": ["Y", "Num", "C", "X", "Sn", "R", "Ni", "CNN", "NB", "NI", "M", "NR", "Na", "Len", "NL", "NP", "NA", "S", "O", "ND", "NT", "SN", "NS", "L", "NM", "TN", "P", "No", "Q", "T", "GN", "n", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "A": ["App", "Ass", "AI", "AA", "Ar", "H", "C", "AC", "AV", "ACC", "au", "ABC", "CA", "AL", "LA", "Att", "JA", "NA", "S", "As", "AU", "All", "AT", "Array", "HA", "AF", "L", "WA", "GA", "An", "At", "P", "MA", "AM", "AS", "AE", "Auth", "The", "AB", "AP", "V", "Alpha", "B", "Each", "AST", "AAA", "Ax", "SA"], "_": ["ix", " m", " j", " __", " each", " p", " v", "val", "j", " z", "it", "I", " y", " g"], "seq": ["good", "vec", "sub", "feat", "spec", "rez", "sec", "expr", "q", "sim", "eq", "cur", "buf", "iter", "list", "gen", "z", "cas", "iq", "desc", "pkg", "ext", "nos", "len", "nm", "phys", "syn", "na", "long", "zh", "temp", "queue", "test", "supp", "ctr", "exp", "txt", "batch", "buff", "prefix", "req", "str", "qa", "src", "nt", "sequ", "pos", "msg", "length", "ij", "dq", "mem", "cont", "next", "j", "Sequ", "sel", "pse", "ait", "loc", "pres", "obs", "text", "fake", "ence", "sc", "tmp", "zip", "stack", "lim", "trace", "sem", "lex", "sequence", "sq", "bs", "rel", "jobs", "tx"], "i": ["f", "ini", "ri", "zi", "iq", "m", "uri", "l", "y", "ix", "ti", "info", "ip", "ci", "k", "ji", "v", " j", "gi", "ij", "index", "h", "q", "slice", "id", "di", "p", "bi", "j", "pi", "qi", "it", "int", "ii", "xi", "n", "si", "ic", "I", "li", "iter", "me", "mi", "iu", "im"], "ind": ["cand", "ld", "obj", "cod", "ded", "pt", "pred", "cond", "find", "att", "wind", "hold", "old", "bind", "pos", "fr", "ptr", "sp", "dx", "ij", "index", "start", "nd", "IND", "slice", "id", "cmd", "d", "cont", "next", "count", "j", "end", "dir", "inn", "addr", "inc", "it", "int", "dy", "each", "ii", "loc", "Ind", "dj", "iter", "ill", "req", "md"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\n\\n\\nans = 0\\nfor i in range(N):\\n    while True:\\n        if A[i]%2 == 0:\\n            ans += 1\\n            A[i] = A[i] // 2\\n        else:\\n            break\\n\\nprint(ans)", "target": "121", "substitutes": {"N": ["Num", "K", "C", "X", "R", "Ni", "CNN", "NB", "NI", "M", "NR", "CN", "Na", "NA", "S", "ND", "NT", "D", "SN", "NS", "NM", "L", "No", "P", "T", "GN", "n", "Wh", "V", "Z", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "A": ["AA", "Ar", "H", "C", "X", "AC", "AN", "a", "API", "R", "IA", "AV", "M", "Args", "Abs", "CA", "LA", "RAM", "JA", "NA", "Count", "S", "New", "As", "D", "HA", "Array", "AT", "All", "AF", "WA", "Address", "GA", "L", "An", "At", "mA", "MA", "Q", "AM", "AE", "The", "AP", "AB", "Answer", "One", "Alpha", "B", "I", "ACT", "Access", "SA"], "ans": ["ens", "anon", "ls", "annot", "aned", "vers", "AN", "ran", "ean", "cs", "rs", "pan", "gs", "amps", "anned", "s", "ins", "anas", "ms", "aus", "ns", "outs", "ann", " Ans", "aps", "aos", "arts", "ents", "ians", "ums", "rans", "eds", "posts", " means", "ids", "ANS", "anes", "mean", "ams", "nan", "ats", "ros", "ts", "anks", "an", "ks", "ants", "lan", "irms"], "i": ["io", "ini", "ei", "ri", "zi", "m", "uri", "cli", "a", "l", "y", "chain", "ix", "ti", "info", "ip", "ci", "key", "ji", "gi", "v", "ori", "index", "ki", "q", "b", "phi", "yi", "sim", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "batch", "si", "xi", "ic", "uni", "li", "I", "u", "me", "x", "ui", "mi", "iu", "im", "init"]}}
{"code": "n = int(input())\\n\\nc = n//2\\nif(n%2 == 0):c-=1\\nprint(c)\\n", "target": "522", "substitutes": {"n": ["z", "f", "nn", "nia", "m", "a", "l", "t", "nt", "name", "nr", "s", "N", "i", "len", "ns", "v", "na", "sn", "q", "b", "h", "g", "cn", "nu", "ct", "nb", "num", "d", "size", "p", "dn", "j", "ne", "np", "nan", "nc", "o", "no", "nl", "x", "count"], "c": ["f", "sc", "m", "C", "cr", "a", "cs", "l", "t", "cf", "con", "i", "ci", "r", "k", "rc", "ch", "v", "co", "b", "lc", "gc", "g", "cn", "ct", "cc", "\u00e7", "d", "ce", "cur", "p", "cos", "cp", "xc", "cd", "dc", "pc", "nc", "ac", "cu", "u", "cum", "cm", "count"]}}
{"code": "N,K=[int(s) for s in input().split()]\\nA=[int(s) for s in input().split()]\\nF=[int(s) for s in input().split()]\\nA.sort()\\nF.sort(reverse=1)\\n\\n\\ndef success(x):\\n  suc_sum=0\\n  for i in range(N):\\n    a=x//F[i]\\n    if A[i]>a:\\n      suc_sum+=A[i]-a\\n  if suc_sum<=K:\\n    return True\\n  else:\\n    return False\\n\\ndef bisearch():\\n  bi_max=10**12\\n  bi_a=0\\n  bi_b=bi_max\\n  while bi_b-bi_a>1:\\n    c=(bi_a+bi_b)//2\\n    if success(c):\\n      bi_a,bi_b=[bi_a,c]\\n    else:\\n      bi_a,bi_b=[c,bi_b]\\n  return [bi_a,bi_b]\\n\\na,b=bisearch()\\nif success(a):\\n  print(a)\\nelse:\\n  print(b)", "target": "633", "substitutes": {"N": ["Y", "Num", "H", "C", "X", "R", "Ni", "CNN", "W", "NB", "NI", "M", "NV", "NR", "MN", "NA", "NW", "S", "E", "NT", "D", "NS", "NM", "L", "P", "No", "T", "GN", "J", "n", "Z", "V", "I", "B", "NUM", "NC", "Ns", "NN", "NH"], "K": ["Y", "KA", "KN", "KY", "PK", "H", "C", "X", "KK", "R", "SK", "G", "W", "NB", "M", "k", "KB", "KR", "KI", "KS", "Size", "S", "NK", "D", "TN", "P", "Q", "KE", "T", "J", "Z", "V", "B"], "s": ["external", "spec", "name", "ins", "input", "v", "hs", "h", "ys", "bits", "sb", "its", "ses", "downs", "sin", "ces", "ts", "js", "f", "sts", "ws", "m", "se", "t", "xs", "ms", "ports", "os", "gins", "string", "changes", "ss", "ds", "self", "n", "space", "str", "sv", "ls", "sid", "fs", "rs", "gs", "r", "ills", "ments", "ges", "p", "e", "sa", "w", "ps", "ords", "y", "ns", "single", "es", "opens", "S", "id", "d", "int", "short", "u", "ats"], "A": ["Y", "AR", "AA", "Ar", "H", "C", "X", "AC", "R", "IA", "G", "AV", "M", "AL", "LA", "TA", "JA", "NA", "S", "As", "All", "AU", "AT", "Array", "AF", "L", "GA", "An", "ICA", "P", "MA", "Q", "AM", "This", "AS", "SA", "AB", "AP", "I", "B", "AST", "AE"], "F": ["f", "PF", "CF", "H", "C", "FM", "X", "FF", "R", "DF", "W", "G", "FD", "M", "GF", "Fi", "S", "E", "WF", "D", "FN", "FI", "AF", "L", "EF", "FS", "UF", "P", "FG", "FA", "Q", "FP", "FB", "SF", "FO", "J", "V", "I", "B", "FU", "FE"], "x": ["z", "f", "xes", "xp", "X", "xy", "l", "y", "t", "ix", "xs", "xa", "ax", "xx", "xb", "r", "at", "v", "xt", "wx", "h", "ex", "fx", "p", "rx", "xxx", "xc", "e", "ox", "xe", "xi", "n", "w", "xf", "xd", "tx"], "suc_sum": ["susc_sum", "suca64scale", "soc_sta", "suca_sum", "suc00num", "suc_scale", "suc00sam", "sucsmin", "sucmataverage", "suc_sam", "suca64sum", "suca_sam", "suc_cum", "sucscum", "suca64num", "sucmatum", "suc64scale", "suc64sam", "sucmatsum", "soc_sum", "suca64sam", "sucsum", "susc_cum", "suca_num", "suc_min", "suc00sum", "sucssum", "sucmatsta", "sucsaverage", "suca_scale", "suc_average", "soc_average", "suc64sum", "susc_min", "suc64num", "suc_um", "suc00scale", "suc_num", "sucssta", "soc_um", "suc_sta"], "i": ["z", "io", "ini", "ri", "ion", "zi", "m", "uri", "l", "y", "t", "name", "ix", "chain", "ti", "ip", "key", "k", "gi", "v", "ij", "index", "q", "ind", "id", "di", "p", "bi", "j", "pi", "ai", "it", "ii", "batch", "xi", "n", "ic", "o", "li", "I", "iri", "si", "ui", "mi", "iu", "multi"], "a": ["f", "ba", "abc", "apa", "m", "ae", "ta", "another", "l", "t", "sta", "ga", "au", "xa", "ca", "la", "at", "pa", "ea", "an", "era", "h", "foo", "area", "va", "p", "da", "ao", "oa", "e", "isa", "ai", "ya", "sa", "ata", "aq", "aa", "ra", "n", "art", "o", "ac", "ma", "sha", "ia", "ab", "eas", "aaa", "w", "ar", "am"], "bi_max": ["bi64x", "ai_max", "ai67ac", "bi67max", "bi67ma", " bi_x", "ai67m", "bi09max", "ai_ac", "bi___ma", "bi67ac", "bi_ma", "bi64ac", "bi64m", "bi_m", "bi64max", "bi64res", "bi_count", "bi09x", "ai_m", "ai67ma", "bi___max", "bi_res", "bi_ac", "bi09res", "bi___m", "ai67max", "bi___ac", "bi64count", "ai_ma", "bi67m", " bi_res", "bi09count", " bi_count", "bi64ma", "bi_x"], "bi_a": ["bi67au", "bi00add", "bi___w", "bi_ba", "ibi_aj", "bi_au", "yi_part", "bi____ba", "bi00a", "bi67la", "bi67b", "bi20b", "ibi_a", "bi64ba", "bi09an", "bi00o", "bi_al", "bi____eas", "bi64a", "yi_au", "bi_ai", "bipoba", "yiptal", "isi___a", "yi67au", "biptb", "bi67admin", "ibiponame", "bi___b", "isi___part", "ibipoadmin", "bi09a", "bi____name", "bi67aj", "ibi_an", "isi_b", "bi_la", "ibi67a", "ibi_eas", "bi____aj", "ibi67eas", "bi_name", "bi___part", "bi67w", "yipta", "ibipoba", "ibi67aq", "bi67eas", "bipta", "isi_part", "yi_a", "isi___b", "ibi_aq", "bi67ai", "bi09add", " bi_la", "bipoadmin", "bi_an", "biponame", "bi00an", "bi09o", "yi67a", "isi___w", "bi67a", "bi64name", "bi___a", "bi67part", "bi____aq", "bi_add", "bi20a", "bi_aj", "ibi_admin", "ibi_name", "bi_part", "bi64admin", " bi_admin", "yiptb", "biptto", "ibi_o", "bi20to", "bi____admin", "yi_al", "yi67part", "isi_a", "bi_aq", "yiptto", "ibipoa", "yi_to", "bi_admin", "bi67aq", "bi____a", "bi_to", "ibi_add", "bipoa", "isi_w", "bi20al", "bi_eas", "yi_b", "bi_w", " bi_ai", "ibi67aj", "yi67b", "ibi_ba", "bi_o", "biptal"], "bi_b": ["bi09beta", "bi_ba", "ibi_z", "ibi67b", "bi2b", "bi_f", "biplbc", "bi67bc", "bi___z", "bi00a", "bi67b", "bi5n", " bi2ba", " bi2n", "ibi___back", "bi_z", "bigrback", "bi67g", "bi67z", "bi00h", "biplb", "bi___h", " bi2beta", "ibi___b", "ibi_B", "bi00b", "ibiplg", "bi___it", "bi___back", "bi_n", "bi___b", "bi_B", "bi09f", "bi67big", "bi_g", " bi2a", "bi09r", "ibi___bc", "bi09b", " bi_it", "bi5ba", "bi_it", "mi09f", "bi_beta", "ibi_b", " bi2max", "bi_back", " bi_r", "ibiplbig", "bi09j", "bi5b", "bigrb", "bi_big", "bi5a", "bi2ba", "mi_f", "bi___B", " bi_ba", "bi2r", " bi_n", "mi09j", "mi_max", "ibi___be", "bi_be", "ibi67z", "bi___a", "bi00it", "bi2a", "mi_b", "biplbig", "bi2n", "ibi_be", "bigrbc", " bi_h", "bi2max", "ibi67B", "ibiplb", "ibi_back", "bi___bc", "bi_j", "ibi_g", "bi2beta", "biplg", "bi09max", "bi_h", "mi09b", " bi_beta", "bigrbe", "ibi_big", " bi2r", "bi_bc", " bi2b", "mi_j", "bi67B", "ibi67bc", "mi09max", "bi_r", "ibiplbc", "bi___be", "ibi_bc"], "c": ["f", "abc", "sc", "mc", "m", "C", "cat", "cr", "l", "cs", "t", "bc", "cf", "con", "ci", "cb", "ca", "rc", "ch", "r", "v", "icc", "co", "h", "lc", "gc", "g", "cn", "cc", "unc", "ct", "ce", "cont", "cos", "p", "cur", "cp", "e", "cd", "dc", "fc", "tc", "ac", "cu", "u", "cm"], "b": ["f", "rb", "erb", "ib", "mb", "be", "l", "y", "t", "bc", "bp", "to", "bh", "r", "fb", "v", "h", "wb", "nb", "d", "p", "bi", "j", "e", "sb", "bis", "n", "ob", "o", "bs", "u", "B", "ab", "bb", "body", "eb"]}}
{"code": "N = int(input())\\na = list(map(int, input().split()))\\n\\nmaxa = max(a)\\nmina = min(a)\\nadd = None\\nif abs(maxa) > abs(mina):\\n    add = maxa\\nelse:\\n    add = mina\\n\\nindex = a.index(add)\\nans = [(index, i) for i in range(N) if i != index]\\nif add > 0:\\n    ans += [(i, i+1) for i in range(N-1)]\\nelse:\\n    ans += [(i, i-1) for i in range(N-1, 0, -1)]\\n\\nans = list(map(lambda x: (x[0]+1, x[1]+1), ans))\\nprint(len(ans))\\nprint('\\n'.join(map(lambda x: '%d %d' % x, ans)))\\n", "target": "412", "substitutes": {"N": ["Y", "Number", "Name", "Num", "K", "NE", "C", "X", "AN", "Sn", "R", "Ni", "NB", "NI", "NG", "M", "NR", "CN", "MN", "A", "Len", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "L", "TN", "NOTE", "T", "MAN", "GN", "J", "Z", "n", "V", "I", "B", "Ns", "NO", "NN", "NH"], "a": ["f", "ba", "out", "ta", "ae", "l", "all", "t", "sta", "ga", "au", "ed", "A", "ca", "la", "at", "aos", "na", "an", "b", "g", "area", "aaaa", "p", "alpha", "ao", "oa", "act", "ai", "sa", "ata", "aa", "ac", "abs", "o", "ma", "w", "ia", "ab", "eas", "aaa", "x", "ar", "am", "auto"], "maxa": ["loado", "modb", "loadam", "maxA", "minan", "maxarea", " maxA", "createam", "maxam", "minaa", "miny", "createA", "maxan", "loada", "createa", "modaa", "createo", "maxo", "moda", "maxb", " maxan", "minarea", "enda", "axa", "maxy", "endb", "mody", "upa", "loadA", "maxaa", "axo", "axam", " maxarea", "minA", "upan", "endaa", "upA", "endy", "minb", "axA", "uparea"], "mina": ["modac", "maina", "maxas", "maxA", "minimuma", " minal", "maxma", "smallb", "smalla", " minA", "mainal", "minma", "modA", "minas", "mainb", "Minma", "moda", "maxb", "Minb", "smallma", "smallal", " minma", "mainma", "minimumas", "minimumac", "modas", "minimumA", "maxac", "Mina", "minA", "minb", "minal", "minac", "MinA", " minb"], "add": ["Add", "diff", "sum", "load", "ADD", "pad", "comment", "cond", "find", "att", "eff", "ord", "move", "ext", "acc", "draw", "ix", "fill", "append", "pos", "ed", "step", "dd", "apply", "en", "attach", "adjust", "check", "added", "start", "post", "mod", "ate", "ind", "num", "d", "change", "cont", "do", "adder", "app", "end", "adding", "inc", "conf", "ad", "n", "part", "set", "save", "define", "update", "count", "new", "init"], "index": ["type", "values", "min", "max", "offset", "negative", "active", "find", "l", "ix", "pos", "ti", "info", "Index", "key", "input", "value", "filter", "query", "length", "start", "position", "slice", "ind", "id", "di", "num", "context", "read", "call", "size", "alpha", "initial", "rows", "col", "pi", "j", "zero", "end", "null", "none", "ai", "column", "int", "address", "search", " Index", "xi", "si", "loc", "first", "I", "n", "iter", "li", "set", "list", "x", "mi", "prime", "count", "init"], "ans": ["ens", "ls", "aned", "mas", "vers", "ran", "ais", "rs", "amps", "xs", "ins", "anas", "ms", "aus", "ons", "ns", "ars", "ann", "os", " Ans", "outs", "aps", "mn", "aos", " sans", "arts", "ents", "ians", "angs", "ums", "rans", "ands", "eds", "posts", "nes", "ations", "san", "ids", "vs", "ANS", "terms", "can", "leans", "lets", "uns", "nas", "offs", "anes", "ses", "ams", "ads", "ras", "ates", "ats", "ros", "ions", "anks", "an", "ks", "ants", "olds"], "i": ["io", "ini", "ei", "ri", "zi", "\u00ed", "m", "uri", "cli", "l", "y", "t", "ix", "pos", "ti", "info", "Index", "ip", "ci", "ji", "v", "gi", "ij", "hi", "ori", "oi", "phi", "ie", "ind", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "o", "li", "I", "iter", "iri", "x", "ui", "mi", "iu", "im", "iti"]}}
{"code": "from collections import defaultdict\\ndef main():\\n    n = int(input())\\n    s =defaultdict(lambda:0)\\n    for i in range(n):\\n        s[input()] += 1\\n    max_s = max(s.values())\\n    for key, value in sorted(s.items()):\\n        if value == max_s:\\n            print(key)\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "750", "substitutes": {"n": ["nn", "nw", "nia", "names", "m", "l", "nt", "t", "nr", "N", "len", "ns", "k", "v", "na", "c", "ng", "sn", "ln", "g", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "net", "gn", "np", "nan", "nc", "no", "nl", "norm"], "s": ["ps", "sys", "sts", "stats", "ws", "sv", "ls", "conv", "a", "rs", "t", "gs", "shared", "ms", "os", "ins", "ports", "ns", "sw", "strings", "hs", "es", "ys", "pers", "ogs", "tests", "g", "q", "S", "b", "ies", "eds", "changes", "vs", "p", "ss", "less", "ds", "sa", "locks", "its", "so", "mos", "abs", "sq", "ats", "als", "ts", "qs", "sol", "js"], "i": ["f", "io", "ini", "y", "ix", "ti", "ip", "r", "k", "c", "index", "q", "b", "ie", "ind", "p", "j", "e", "it", "ii", "I", "x", "im"], "input": ["active", "interface", "unique", "unknown", "spec", "action", "name", "widget", "control", "step", "request", "raw", "output", "timeout", "enter", "index", "q", "Input", "source", "select", "default", "context", "config", "hidden", "cmd", "command", "initial", "height", "window", "get", "seed", "mode", "int", "current", "focus", "conf", "lat", "prefix", "gen", "PUT", "init"], "max_s": ["maxpooln", "maxpooli", " maxptn", "max_sa", "maxptn", " max_value", "maxpti", " max_sa", "max_n", " max_n", " maxptsa", "maxptsa", "max_value", "max_i", " maxpts", " max_i", "maxpools", "maxpoolsa", "maxpts", " maxpti"], "key": ["type", "f", "str", "ey", "obj", "member", "sum", "le", "what", "field", "prop", "y", "parent", "name", "case", "by", "attribute", "k", "v", "index", "property", "pair", "entry", "ory", "val", "ie", "id", "option", "title", "path", "char", "Key", "variable", "kw", "column", "int", "KEY", "keys", "w", "prefix", "bar", "item"], "value": ["values", "max", "sv", "function", "python", "what", "operator", "field", "unknown", "second", "number", "result", "attribute", "ue", "v", "json", "length", "true", "index", "property", "position", "val", "test", "default", "password", "size", "variable", "total", "feature", "new", "last", "Value", "current", "component", "save", "success", "VALUE", "vector", "unit", "entry", "text"]}}
{"code": "def insertionSort(A, n, g):\\n\tglobal cnt\\n\\n\tfor i in range(g, n):\\n\t\tv = A[i]\\n\t\tj = i - g\\n\t\twhile j >= 0 and A[j] > v:\\n\t\t\tA[j + g] = A[j]\\n\t\t\tj = j - g\\n\t\t\tcnt = cnt + 1\\n\t\tA[j + g] = v\\n\\ndef shellSort(A, n):\\n\tglobal m\\n\tglobal G\\n\\n\th = 1\\n\twhile (True):\\n\t\tif h > n:\\n\t\t\tbreak\\n\t\tG.append(h)\\n\t\th = 3 * h + 1\\n\\n\tm = len(G)\\n\tG.reverse()\\n\\n\tfor i in range(m):\\n\t\tinsertionSort(A, n, G[i])\\n\\nif __name__ == '__main__':\\n\tN = int(input())\\n\tR = [int(input()) for i in range(N)]\\n\\n\tcnt = 0\\n\tG = []\\n\tm = 0\\n\\n\tshellSort(R, N)\\n\\n\tprint(m)\\n\tprint(\" \".join(map(str, G)))\\n\tprint(cnt)\\n\tfor i in range(N):\\n\t\tprint(R[i])", "target": "622", "substitutes": {"A": ["Y", "App", "K", "AA", "Ar", "H", "C", "X", "Al", "AC", "a", "Am", "W", "M", "CA", "LA", "U", "JA", "Av", "S", "E", "As", "AU", "D", "Array", "AT", "All", "Ag", "Ah", "L", "GA", "An", "At", "P", "Q", "AM", "This", "Map", "T", "SA", "J", "AP", "The", "V", "AB", "I", "B", "Alpha", "One", "Z", "Ax", "AE"], "n": ["z", "nn", "nw", "a", "l", "nt", "t", "s", "ns", "nm", "r", "k", "ch", "mn", "na", "c", "ng", "sn", "q", "an", "ln", "b", "nu", "nb", "num", "d", "p", "ne", "net", "nor", "gn", "np", "nan", "nc", "o", "w", "no", "nl", "x"], "g": ["z", "f", "yg", "gm", "ag", "l", "y", "t", "gs", "ug", "gp", "ga", "s", "bg", "ger", "r", "k", "gi", "gu", "c", "gt", "q", "b", "gg", "gc", "ge", "tg", "d", "go", "p", "gd", "e", "ig", "it", "mg", "gn", "eg", "o", "u", "reg", "gen", "x", "pg"], "i": ["z", "f", "ei", "ini", "ri", "zi", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "k", "ji", "gi", "ij", "c", "hi", "q", "phi", "b", "ki", "yi", "id", "di", "ik", "p", "bi", "multi", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "u", "ia", "I", "x", "iti", "mi", "iu", "im", "ui"], "v": ["z", "f", "ve", "vo", "sv", "qv", "l", "y", "lv", "r", "value", "c", "q", "b", "tv", "vs", "nv", "va", "p", "vi", "vt", "vg", "V", "vy", "u", "li", "uv", "vr", "x", "ev", "vc"], "j": ["z", "f", "obj", "jl", "a", "ja", "l", "y", "t", "jp", "r", "ji", "k", "json", "ij", "c", "q", "b", "je", "jac", "next", "p", "kj", "it", "jj", "jump", "aj", "J", "ju", "o", "uj", "u", "dj", "li", "x", "bj", "js", "jc"], "cnt": ["ncount", "acnc", "dcnt", "acount", "ncret", "acnt", "lcount", "lcct", "crt", "dcctr", "cnc", "Ccount", "Crt", " CNT", " cctr", "acct", "dcNT", "uncct", "Cnc", "CNT", "acNT", " Cctr", "cNT", "Cct", " Cct", "Count", "ccount", " ccount", "Cnt", "unccount", "cctr", "lcnc", "lcnt", "uncrt", " count", " cret", " cNT", "ncnt", "uncnt", " Cnt", " crt", "acret", "cct", " cct", "cret", "ncct", "count", "dcct"], "h": ["z", "f", "ph", "he", "H", "kh", "hm", "l", "y", "t", "ha", "s", "hz", "high", "bh", "k", "r", "ch", "ho", "hs", "c", "hi", "index", "zh", "q", "hal", "hd", "ih", "p", "height", "ht", "oh", "hl", "dh", "hr", "hang", "o", "w", "ah", "hh", "u", "help", "sh", "x", "his", "count", "hp"], "m": ["z", "f", "mu", "gm", "mc", "tm", "a", "l", "y", "t", "sm", "ms", "M", "len", "r", "k", "mn", "em", "c", "q", "b", "dm", "num", "mem", "d", "p", "man", "mt", "mo", "e", "o", "mr", "w", "mm", "um", "mi", "im", "cm", "md"], "N": ["Y", "Num", "K", "H", "C", "X", "AN", "Sn", "Ni", "NB", "NG", "NI", "M", "Mon", "NR", "CN", "MN", "Na", "NL", "NA", "S", "New", "NT", "SN", "NS", "NM", "L", "TN", "No", "P", "T", "GN", "J", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "R": ["RR", "Y", "AR", "RG", "RGB", "H", "C", "RA", "X", "Reg", "LR", "F", "Rs", "W", "M", "r", "RS", "GR", "RO", "RE", "S", "SR", "E", "D", "RL", "L", "Right", "P", "DR", "RES", "RP", "J", "V", "I", "B", "Res", "BR"], "G": ["Y", "Num", "K", "GP", "H", "C", "X", "Reg", "F", "Graphics", "Gu", "W", "Gs", "M", "LG", "GF", "GR", "U", "GC", "Size", "GB", "S", "E", "GH", "D", "TG", "GI", "L", "GG", "GA", "GE", "P", "FG", "GU", "Q", "BG", "Ge", "GV", "T", "J", "Z", "V", "I", "B", "GS", "GT", "Gar"]}}
{"code": "R=int(input())\\nprint(\"A\"+[\"GR\"[R<2800],\"B\"][R<1200]+\"C\")", "target": "738", "substitutes": {"R": ["RR", "TR", "AR", "K", "RG", "RGB", "H", "C", "RA", "X", "F", "G", "W", "MR", "N", "M", "A", "r", "RS", "GR", "U", "RO", "Range", "RE", "S", "E", "O", "SR", "D", "L", "P", "RT", "DR", "Q", "RF", "T", "RP", "Z", "V", "RM", "I", "B", "Res", "Rot", "Random"]}}
{"code": "def gcd(a, b):\\n    if b == 0: return a\\n    return gcd(b, a % b)\\n\\n\\nalllist = list(map(int, input().split()))\\nalllist = sorted(alllist, reverse=True)\\n\\n\\nresult = gcd(alllist[0], alllist[1])\\nprint(result)\\n\\n", "target": "1", "substitutes": {"a": ["f", "ba", "m", "am", "ae", "l", "all", "t", "to", "au", "i", "A", "r", "ca", "at", "na", "c", "ea", "h", "g", "val", "area", "d", "p", "alpha", "oa", "e", "sa", "aa", "al", "ac", "n", "o", "ma", " A", "ia", "ab", "x", "ar", "an", "auto"], "b": ["z", "f", "ba", "ib", "m", "another", "be", "l", "y", "t", "bc", "i", "bg", "cb", "r", "fb", "A", "value", "v", "db", "c", "h", "g", "nb", "d", "p", "bi", "j", "bf", "bin", "e", "sb", "it", "beta", "n", "o", "bs", "u", "B", "ab", "x", "bb", "bar", "base"], "alllist": ["calllisted", "alplst", "pallliste", "palldist", "alldiste", "alcliste", "alclisted", "calclist", "allplst", " alpllist", "alcollelist", "calclst", "allllist", "calcliste", "alclst", "alblist", "alllisted", "almlist", " alplisted", "alcollist", "allllst", "alplelist", "callliste", "alclist", "alcolliste", "alpliste", "allplists", "almlisted", " alllisted", "alcllist", "alllst", " alldiste", "almlists", "palllist", "palldst", "alplist", " alldist", "alllllist", " alplists", " alldists", "allplist", "palllst", "palllists", "alplisted", "palldiste", "alblst", " allliste", "allllists", "alclists", "alldist", "calclisted", "calllst", " alllelist", "alldelist", "alpllist", "alllelist", "alllists", "alplists", " alllists", "almllist", "allliste", "alldists", "alldst", "alldlist", "palldists", "allpllist", "albliste", "alcollists", " alldelist", "calllist", " alplist", "alblisted", " allllist"], "result": ["successful", "function", "either", "relation", "message", "currency", "report", "different", "date", "ret", "number", "su", "final", "r", "answer", "res", "output", "value", "comb", "single", "direction", "gre", "profile", "double", "complete", "meg", "test", "process", "power", "command", "division", "feature", "valid", "results", "money", "current", "Result", "mark", "first", "correct", "success", "prefix", "confidence", "description"]}}
{"code": "import sys\\nwhile True:\\n    s = input()\\n    if s == '-':\\n        sys.exit()\\n    m = int(input())\\n    for _ in range(m):\\n        h = int(input())\\n        s = s[h:] + s[:h]\\n    print(s)\\n", "target": "715", "substitutes": {"s": ["z", "ps", "sts", "str", "f", "ws", "sv", "ls", "stats", "a", "simple", "sql", "l", "rs", "t", "se", "gs", "full", "ms", "ins", "i", "ns", "r", "strings", "sp", "es", "c", "sl", "hs", "q", "b", "gets", "g", "S", "csv", "string", "source", "changes", "d", "p", "ss", "less", "ds", "j", "sb", "its", "bis", "abs", "n", "bs", "sq", "summary", "tes", "ats", "ts", "qs", "an", "js"], "m": ["mu", "gm", "med", "mc", "tm", "mas", "mb", "my", "hm", "l", "sm", "ms", "M", "v", "perm", "em", "mis", "c", "mx", "mod", "dm", "mun", "man", "km", "mt", "om", "mo", "n", "mos", "mr", "ma", "mm", "um", "mi", "cm", "md"], "_": [" ge", "ay", "k", " j", "__", "j", " the", " you", "___", " g", " an"], "h": ["z", "f", "uh", "he", "H", "html", "kh", "hm", "l", "ha", "t", "hz", "i", "bh", "k", "ho", "v", "hs", "c", "hi", "index", "q", "b", "zh", "hd", "d", "ih", "p", "j", "oh", "hl", "dh", "n", "hr", "o", "hh", "u", "w", "hu", "sh", "x"]}}
{"code": "n,m=map(int,input().split())\\nx=list(map(int, input().split()))\\n\\nif n >= m:\\n  print('0')\\n  exit(0)\\n\\nx_sorted = sorted(x)\\ndx = [abs(x_sorted[i+1]-x_sorted[i]) for i in range(m-1)]\\ndx_sorted = sorted(dx,reverse=True)\\n\\nresult = sum(dx_sorted)\\nfor i in range(n-1):\\n  result -= dx_sorted[i]\\nprint(result)", "target": "9", "substitutes": {"n": ["f", "nn", "nw", "ni", "l", "y", "nt", "t", "s", "N", "ns", "mn", "r", "nm", "v", "na", "c", "sn", "h", "an", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "j", "network", "ne", "net", "gn", "np", "nan", "nc", "o", "nl"], "m": ["gm", "mc", "tm", "l", "y", "sm", "t", "ms", "M", "mn", "r", "nm", "v", "perm", "mis", "c", "bm", "mk", "mut", "h", "b", "mx", "g", "dm", "num", "d", "p", "man", "j", "mt", "mo", "mos", "mr", "o", "ma", "mm", "mi", "cm"], "x": ["xes", "xp", "X", "ux", "xy", "y", "ix", "xs", "xa", "ax", "xx", "input", "xml", "xt", "wx", "ex", "fx", "rx", "xc", "ox", "xe", "cox", "xi", "lex", "px", "xf", "xd", "tx"], "x_sorted": ["x_solved", "x_sorters", "x_gsolved", "x_setsort", "x_isolved", "x_setsorted", "x_dsorted", "x_insorter", "x_sorting", "x_Sorted", "x_setsorter", "x_namesorted", "x_sort", "x_dsorters", "x_isverted", "x_sotted", "x_isorters", "x_namesorter", "x_nameslied", "x_Sorting", "x_Sorter", "x_inslied", "x_isorted", "x_slied", "x_dsolved", "x_gsverted", "x_isorter", "x_Slied", "x_isort", "x_dsverted", "x_sverted", "x_gsorters", "x_Sort", "x_insorted", "x_isotted", "x_insorting", "x_namesorting", "x_sorter", "x_Sotted", "x_gsorted", "x_setsotted"], "dx": ["ws", "yx", "dds", "xp", "eddy", "ux", "xy", "df", "ix", "xs", "dos", "su", "dim", "ax", "xx", "adj", "wx", "dq", "docs", "DX", "fx", "nox", "d", "du", "dl", "ds", "ox", "mix", "dy", "wo", "xi", "px", "dj", "req", "xd", "tx"], "i": ["f", "io", "ini", "ei", "ri", "zi", "iq", "cli", "uri", "ogi", "l", "y", "ix", "iy", "ti", "s", "ip", "ci", "ji", "gi", "v", "ij", "hi", "ori", "index", "ki", "q", "phi", "g", "id", "di", "bi", "j", "pi", "qi", "ai", "it", "ii", "iri", "si", "xi", "ic", "li", "I", "u", "iter", "ui", "mi", "iu", "im"], "dx_sorted": ["dx2gsaved", "dx2gsorted", "dx2gsordered", "dx_gsordered", "dx_sorters", "dx_Sorted", "dx_esaved", "dx_sorter", "dx_unsorters", "dx2sorted", "dx_gsorter", "dx_unsorted", "dx2saved", "dx_esorted", "dx_Sorters", "dx_Sort", "dx_unsorter", "dx_Sordered", "dx_esordered", "dx_gsaved", "dx_sordered", "dx_gsorters", "dx2sorter", "dx2sordered", "dx_Sorter", "dx_esort", "dx_isort", "dx_isorted", "dx_saved", "dx_unsort", "dx_sort", "dx2gsorter", "dx_isordered", "dx_isorter", "dx_gsort", "dx_gsorted", "dx_Saved", "dx_isaved"], "result": ["f", "successful", "different", "relation", "sum", "currency", "neutral", "date", "report", "fine", "comment", "df", "ret", "score", "number", "su", "final", "gradient", "rc", "r", "output", "res", "length", "the", "depth", "test", "directory", "goal", "mult", "p", "power", "successfully", "command", "zero", "total", "feature", "product", "package", "results", "integer", "current", "Result", "average", "cum", "success", "me", "alone", "performance", "count", "new", "confidence", "description"]}}
{"code": "\"\"\"\\n\u56db\u9685\u306b\u4eee\u60f3\u306e\u539f\u70b9\u3092\u3064\u304f\u308a\u3001\u5404\u5ea7\u6a19\u304b\u3089\u305d\u306e\u539f\u70b9\u3078\u306e\u30de\u30f3\u30cf\u30c3\u30bf\u30f3\u8ddd\u96e2\u3092\u8a08\u6e2c\u3059\u308b\u3002\\n\"\"\"\\n\\nN = int(input())\\nXY = [list(map(int,input().split())) for _ in range(N)]\\n\\ndef measure(originX,originY):\\n    origin = [originX,originY]\\n    XY.sort(key=lambda x: abs(x[0]-origin[0])+abs(x[1]-origin[1]))\\n    return abs(XY[-1][0]-origin[0])+abs(XY[-1][1]-origin[1])-(abs(XY[0][0]-origin[0])+abs(XY[0][1]-origin[1]))\\n\\nans = 0\\nans = max(ans,measure(1,1))\\nans = max(ans,measure(1,10**9))\\nprint(ans)", "target": "399", "substitutes": {"N": ["Num", "K", "C", "X", "F", "R", "Ni", "CNN", "NB", "M", "NV", "NR", "Len", "NP", "NA", "S", "ND", "NT", "D", "NS", "FN", "NM", "L", "TN", "P", "Q", "T", "GN", "Z", "n", "V", "I", "Ns", "NC", "NUM", "NN"], "XY": ["Y", "Tile", "TY", "ETA", "UX", "Data", "VO", "BS", "Fixed", "Bytes", "IP", "RY", "VAL", "X", "xy", "EY", "Zip", "REL", "YN", "Frame", "PO", "Proxy", "OX", "OT", "Info", "OTE", "Sys", "XXX", "Ray", "Position", "DX", "O", "Py", "NT", "NS", "Array", "Xi", "Pie", "IO", "SO", "Net", "YS", "GE", "ES", "NOTE", "RIP", "IES", "ZX", "IOR", "Ge", "Co", "FY", "XX", "Copy", "Prime", "NUM", "VT", "Rot", "JSON", "IX", "IE", "GT", "FILE", "BY", "DOS", "XXXX", "POS"], "_": [" un", " g", "ix", " m", " j", " __", " p", "val", " c", "j", " l", " x", "___", "x"], "originX": ["sampleX", "entryXX", "originXP", "sampleZ", "entryZ", "originXX", "entryX", "oriX", "oriXP", " originXP", "sampleXP", "sampleIX", "originZ", "OriginXX", " originIX", "oriXX", "entryY", "OriginY", "oriZ", "originIX", "oriIX", " originZ", "oriY", "OriginX", "OriginZ"], "originY": ["originYY", " originYear", " originXY", "oriXY", "origX", "originXY", "origYear", "originIP", " originYY", " originIP", "OriginY", "origY", "origYY", "oriYY", "origXY", "OriginIP", "origIP", "oriYear", "oriY", "OriginX", "originYear", "OriginXY"], "origin": ["Orig", "target", "background", "offset", "gate", "uri", " origins", "here", "border", "original", "spec", "src", "dest", "parent", "this", "metadata", "pos", "domain", "info", "SOURCE", "Origin", "meta", "copy", "translation", "ebin", "root", "history", "ori", "index", "extra", "scale", "era", "master", "plane", "source", "remote", "reference", "orig", "trace", "alpha", "axis", "pi", "alias", "local", "frame", "trans", "proxy", "it", "subject", "server", "neg", "coord", "focus", "loc", "instance", "star", "iter", "system", "scope", "base", "scan", "init"], "ans": ["ens", "rors", "cas", "ls", " scans", "views", "names", "mas", "aned", "vers", "AN", "oss", "aults", "ades", "pan", "cons", "amps", "gs", "xs", "s", "ms", "ins", "reads", "aus", "ns", "outs", "ons", "ann", "os", " Ans", "aps", "beans", "arts", "aos", "es", "asks", "ums", "ians", "rans", "ays", "angs", "ands", "eds", " means", "ups", "ANS", "ots", "can", "uns", "helps", "nas", "offs", "ints", "anes", "ams", "anas", "ads", " spans", "ces", "asms", "ats", "orts", "orders", "als", "ros", "anks", "an", "ks", "ants", "uploads"]}}
{"code": "def main():\\n    # n=int(input())\\n    n,k= map(int, input().split())\\n    p=n-2*k\\n    print(p) if p>0 else print(0)\\n    return\\nmain()", "target": "520", "substitutes": {}}
{"code": "n,u,v = map(int,input().split())\\nu -= 1\\nv -= 1\\npeer = [[] for _ in range(n)]\\nfor _ in range(n-1):\\n  a,b = map(int,input().split())\\n  a -= 1\\n  b -= 1\\n  peer[a].append(b)\\n  peer[b].append(a)\\nrank = [10**6 for _ in range(n)]\\nseen = [0 for _ in range(n)]\\npre = [10**6 for _ in range(n)]\\npst = [[] for _ in range(n)]\\nseen[v] = 1\\nrank[v] = 0\\nnow = [v]\\nwhile now:\\n  last = now\\n  now = []\\n  for x in last:\\n    for y in peer[x]:\\n      if seen[y] == 0:\\n        seen[y] += 1\\n        rank[y] = rank[x] + 1\\n        now.append(y)\\n        pre[y] = x\\n        pst[x].append(y)\\n#print(rank)\\nback = (rank[u]-1) // 2\\ntar = u\\nfor _ in range(back):\\n  tar = pre[tar]\\ndepth = -1\\nnow = [tar]\\nwhile now:\\n  depth += 1\\n  last = now\\n  now = []\\n  for x in last:\\n    now += pst[x]\\n#print(tar,depth,last)\\nif rank[u] % 2 == 1:\\n  print(back + depth)\\nelse:\\n  print(back + depth + 1)", "target": "309", "substitutes": {"n": ["z", "f", "nn", "m", "l", "nt", "t", "number", "nr", "N", "i", "ns", "mn", "r", "en", "na", "c", "ln", "sn", "h", "an", "g", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "e", "net", "np", "nan", "nc", "o", "w", "no"], "u": ["uid", "f", "tu", "m", "ud", "t", "au", "i", "r", "ue", "un", "ul", "lu", "U", "h", "g", "nu", "p", "ut", "ou", "uf", "uc", "ur", "uv", "uu", "o", "uj", "cu", "us", "um", "ui", "iu"], "v": ["z", "f", "ve", "vo", "sv", "vv", "m", "qv", "l", "t", "lv", "i", "r", "ver", "k", "en", "vp", "c", "h", "q", "g", "tv", "iv", "nv", "d", "vs", "p", "va", "vm", "vi", "j", "e", "av", "vt", "var", "uv", "V", "o", "w", "vr", "vy", "ev", "vc"], "peer": ["type", "pe", "per", "party", "message", "pod", "ter", "problem", "node", "other", "chain", "parent", "pkg", "yer", "sta", "to", "channel", "point", "pb", "ger", "ver", "tp", "ker", "pipe", "sp", "status", "actor", "master", "group", "user", "remote", "queue", "er", "stage", "player", "p", "next", "owner", "local", "frame", "package", "worker", "peak", "seed", "client", "current", "bro", "server", "inner", "league", "pc", "table", "time", "verified", "caster", "pro"], "_": ["Name", "let", "pt", "____", "py", "ing", "ix", "all", " do", "__", " __", "g", "ate", "val", "D", "ml", "In", "p", "mt", "P", " the", "get", "Auth", "able", "___", "on", "ation"], "a": ["ba", "ap", "m", "ae", "l", "t", "ga", "au", "i", "A", "r", "ca", "la", "at", "c", "ea", "an", "g", "er", "va", "p", "oa", "e", "sa", "aa", "al", "ac", "o", "w", "ia", "ab", "aaa", "ar", "ach", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "mb", "bl", "be", "l", "t", "bc", "s", "i", "fb", "r", "db", "c", "h", "g", "lib", "d", "p", "bi", "br", "j", "e", "sb", "aa", "bis", "ob", "o", "bs", "B", "ab", "bb", "eb"], "rank": ["pe", "sup", "rate", "ack", "ranking", "max", "sum", "range", "est", "vote", "ank", "node", "score", "chain", "order", "dist", "shape", "r", "ver", "index", "scale", "group", "distance", "Rank", "depth", "random", "ranked", "re", "num", "power", "p", "race", "sort", "total", "span", "error", "weight", "cache", "average", "mean", "mark", "pri", "cum", "sche", "square", "grade", "head", "hash", "rain", "count"], "seen": ["pe", "done", "sent", "marked", "found", "sum", "since", "recent", "meet", "seeing", " unseen", "est", "specified", "node", "score", "se", "old", "common", "shared", "en", "status", "gu", "linked", "kept", "see", "ge", "flag", "used", "sen", "exist", "ranked", "num", "read", "zero", "peak", "sa", "seed", "shown", "pri", "saw", "mean", "served", "average", "weight", "set", "sche", "shadow", "known", "me", "success", "verified", "count", "session", "ordered"], "pre": ["pe", "ps", "sup", "per", "tmp", "pr", "par", "pan", "se", "PRE", "pp", "tp", "public", "status", "pret", "before", "gre", "sp", "post", "master", "prep", "mp", "temp", "prev", "Pre", "inter", "next", "p", "are", "pri", "first", "pres", "rel", "prefix", "prime", "pro"], "pst": ["pnd", "cpust", "sst", "psts", "sust", "ppstr", "ppust", "psst", "ppst", "ppsts", "cpst", "cpsts", "ssts", "pstr", "pust", "snd", "cpstr", "psnd", "ppnd", "pssts", "psstr", "cpnd"], "now": ["good", "wait", "gm", "max", "tmp", "since", "off", "when", "recent", "here", "Now", "node", "draw", "NOW", "old", "present", "ow", "day", "cycle", "result", "ww", "wd", "ty", "msg", "latest", "status", "before", " NOW", "aw", "age", "store", "start", "post", "fore", "hold", "we", "force", "stage", "next", "p", "cur", "j", "new", "older", "past", "current", "then", "warm", "time", "today", "loc", "first", "set", "save", "currently", "wp", "on", "update", "forest", "ready", "after", "always"], "last": ["pe", "max", "since", "est", "node", "Last", "l", "all", "old", "parent", "t", "full", "cycle", "this", "order", "chain", "final", "never", "latest", "state", "start", "prev", "stage", "next", "p", "end", "total", "new", "past", "current", "first", "best", "left", "reverse", "stop", "list", "after", "st"], "x": ["z", "f", "ey", "tmp", "yx", "ay", "el", "xp", "X", "xd", "ux", "xy", "l", "t", "name", "ix", "xs", "xa", "ax", "xx", "key", "i", "k", "step", "at", "xt", "dx", "wx", "c", "index", "h", "ex", "fx", "ctx", "p", "rx", "j", "xxx", " xx", "xc", "ry", "ox", "xe", "e", "xxxx", "ye", "xi", "o", "w", "px", "xf", "zx", "tx"], "y": ["Y", "z", "sys", "yo", "ey", "yl", "ym", "yn", "ay", "my", "xy", "zy", "yu", "py", "t", "yer", "iy", "oy", "i", "key", "yy", "xx", "sy", "ery", "k", "yt", "ty", "ch", "c", "gy", "ys", "h", "ies", "yi", "wy", "ny", "hy", "fy", "p", "yk", "j", "ry", "dy", "uy", "ye", "yr", "cy", "vy", "o", "ic", "yp", "w", "iny", "yd", "ly"]}}
{"code": "a, b = map(int, input().split())\\n\\nimport math\\naS = math.ceil(a / 0.08)\\nal = math.floor((a + 1) / 0.08)\\nbs = math.ceil(b / 0.10)\\nbl = math.floor((b + 1) / 0.10)\\n\\nflag = True\\nfor i in range(10000):\\n    if aS <= i < al and bs <= i < bl:\\n        print(i)\\n        flag = False\\n        break\\nif flag:\\n    print(-1)\\n", "target": "418", "substitutes": {"a": ["f", "apa", "fa", "am", "ta", "ae", "l", "t", "sta", "to", "af", "s", "au", "os", "A", "r", "ca", "at", "la", "es", "c", "na", "ea", "g", "area", "p", "va", "alpha", "da", "ao", "app", "act", "oa", "e", "sa", "aa", "aj", "n", "ac", "ma", "u", "ia", "ab", "eas", "x", "ar", "ach", "an", "ast"], "b": ["z", "f", "rb", "ba", "ib", "out", "m", "mb", "be", "l", "y", "t", "bc", "to", "s", "back", "pb", "bg", "by", "fb", "cb", "v", "db", "c", "g", "wb", "nb", "d", "bi", "br", "bf", "bin", "e", "sb", "gb", "bis", "n", "ob", "o", "u", "B", "bes", "ab", "x", "bb", "eb"], "aS": ["aSA", " aL", "aaSA", "aaL", "amB", " aB", "AL", "amS", " aSA", "amL", "aB", "aL", "AS", "AB", "aaB", "amSA", "aaS"], "al": ["alan", "el", "alo", "ap", "alis", "Al", "att", "l", "all", "ala", "af", "ral", "AL", "tal", "alf", "pal", "bal", "ass", "hal", "aler", "stal", "aled", "alt", "ald", "ad", "alid", "ell", "alian", "wal", "ab", "sal", "als", "ali", "ar", "ial", "aval", "ally"], "bs": ["els", "BS", "ls", "blocks", "bc", "gs", "bos", "ins", "os", "pb", "aus", "ns", "bles", "cb", "lbs", "ubs", "bas", "bits", "eb", "vs", "bi", "zb", "ds", "sb", "its", "gb", "bis", "ses", "bps", "bes", "ab", "obs", "als", "ts", "bb", "Bs", "js"], "bl": ["rb", "jl", "Bl", "be", "l", "bc", "bp", "bel", "pb", "bg", "fb", "lb", "lbs", "db", "ll", "ble", "bm", "eb", "bi", "br", "obl", "lp", "pl", "bf", "sb", "bis", "ob", "ab", "bn", "BL", "abl", "bb", "bj"], "flag": ["bug", "wait", "ld", "member", "ground", "load", "flags", "neutral", "sync", "field", "cond", "stay", "hold", "switch", "age", "limit", "status", "fail", "lock", "tag", "condition", "mask", "lag", "store", "group", "gc", "force", " Flag", "cmd", "stage", "func", "cloud", "command", "leaf", "tail", "kill", "commit", "bool", "run", "shell", "print", "set", "Flag", "agged", "ment", "list", "submit", "save", "again", "fd"], "i": ["f", "ini", "ri", "zi", "m", "l", "y", "ix", "ti", "info", "s", "ip", "ci", "key", "k", "ji", "v", "gi", "ij", "hi", "index", "ori", "ki", "q", "oi", "yi", "id", "di", "p", "bi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "li", "I", "u", "iter", "x", "mi", "iu", "multi"]}}
{"code": "from collections import Counter\\nH,W=map(int,input().split())\\nA=[]\\nfor _ in range(H):\\n    A+=list(input())\\n\\n#\u57fa\u672c\u7684\u306b4\u500b\u305a\u3064\u306a\u3044\u3068\u30c0\u30e1\\n#\u884c\u6570\u30fb\u5217\u6570\u304c\u5947\u6570\u306e\u5834\u5408\u3001\u771f\u3093\u4e2d\u306e\u884c\u30fb\u5217\u306f2\u500b\u305a\u3064\u3067\u3088\u3044\\n#\u884c\u6570\u30fb\u5217\u6570\u304c\u4e21\u65b9\u3068\u3082\u5947\u6570\u306e\u5834\u5408\u3001\u5168\u4f53\u306e\u4e2d\u5fc3\u306f1\u500b\u3067\u3088\u3044\\n\\nC=Counter(A)\\ng4=0\\ng2=0\\ng1=0\\nfor n in C.values():\\n    g4+=n//4\\n    g2+=(n%4)//2\\n    g1+=(n%4)%2\\n\\nans='No'\\nif (g1==1 and H&1 and W&1) or g1==0:\\n    if g4 >= (H//2)*(W//2):\\n        if (g2 + (g4 - (H//2)*(W//2))*2) == (H//2 if W&1 else 0) + (W//2 if H&1 else 0):\\n            ans='Yes'\\nprint(ans)", "target": "188", "substitutes": {"H": ["K", "HO", "He", "C", "X", "F", "R", "HT", "G", "Han", "HI", "N", "M", "HB", "HL", "High", "HD", "HH", "h", "MH", " h", "D", "HA", "HC", "HE", "DH", "L", "P", "Q", "SH", "Eh", "J", "V", "I", "B", "OH", "HS", "AH", "NH"], "W": ["K", "C", "X", "Width", "F", "R", "G", "WT", "N", "M", "Weight", "WM", "S", "D", "WC", "L", "P", "VW", "Q", "CW", "T", "V", "w", "I", "B", "BW", "EW", "Wh"], "A": ["AY", "AA", "C", "AN", "F", "R", "G", "AV", "N", "M", "CA", "JA", "S", "As", "All", "HA", "Array", "D", "Ah", "AF", "L", "To", "GA", "An", "At", "P", "Q", "AM", "AH", "You", "J", "AB", "The", "V", "B", "Each", "Ax", "SA"], "_": ["ay", " do", " j", "__", " __", " p", "val", " the", " you", "___", " of"]}}
{"code": "from math import radians, cos, sin, sqrt\\n\\na, b, c = map(float, input().split())\\n\\nc = radians(c)\\nh = b * sin(c)\\ns = a * h * 1 / 2\\n\\nd = sqrt(a ** 2 + b ** 2 - 2 * a * b * cos(c))\\nl = a + b + d\\n\\nprint(s)\\nprint(l)\\nprint(h)\\n", "target": "221", "substitutes": {"a": ["f", "ba", "apt", "m", "ta", "ae", "\u00e1", "ha", "ga", "au", "i", "A", "ca", "r", "la", "at", "ea", "an", "g", "area", "p", "alpha", "da", "ao", "oa", "\u00e4", "e", "sa", "ai", "ata", "aq", "aa", "aj", "al", "ac", "o", "ma", " A", "ah", "ia", "ab", "aaa", "ar", "ach", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "y", "t", "bc", "i", "bg", "cb", "r", "fb", "v", "g", "wb", "nb", "p", "bi", "j", "bf", "e", "bu", "sb", "gb", "n", "o", "bs", "u", "w", "B", "ub", "ab", " B", "bb", "eb"], "c": ["z", "f", "mc", "m", "C", "cr", "cs", "t", "bc", "y", "chain", "cf", "con", "etc", "ci", "r", "ca", "cb", "rc", "cin", "v", "co", "arc", "lc", "g", "gc", "ct", "cc", "cl", "ce", "cos", "cont", "cp", "e", "cd", "dc", "uc", "fc", "cache", "n", "ac", "cy", "cu", "u", "o", "tc", "cor", "nc", "ic", "cm"], "h": ["f", "ph", "he", "H", "m", "html", "kh", "rh", "hm", "ha", "y", "i", "high", "r", "bh", "ch", "ho", "v", "hs", "hi", "g", "http", "hal", "hd", "ih", "p", "oh", "e", "hl", "n", "hr", "o", "her", "ah", "hh", "w", "u", "hash", "hp"], "s": ["z", "stats", "sv", "ls", "spec", "sql", "rs", "cs", "se", "gs", "su", "i", "ns", "r", "sp", "sd", "sl", "g", "ies", "S", "p", "ss", "ds", "sa", "sb", "so", "si", "n", "sq", "ats", "south", "ts", "sol", "js"], "d": ["f", "done", "ld", "des", "m", "bd", "t", "ed", "dd", "i", "r", "dt", "dx", "sd", "q", "dis", "g", "nd", "D", "dm", "di", "pd", "de", "dl", "p", "dn", "ds", "td", "e", "dy", "dh", "n", "rd", "delay", "ad", "dL", "dra", "dr", "md", "fd"], "l": ["z", "f", "ol", "ld", "ls", "yl", "el", "le", "line", "m", "y", "t", "lis", "i", "r", "sol", "v", "sl", "ln", "lc", "g", "ml", "p", "dl", "L", "lp", "pl", "lr", "al", "n", "o", "li", "w", "dL", "nl", "ll"]}}
{"code": "import math\\nfrom decimal import Decimal\\nA, B, H, M = map(int, input().split())\\ntheta = abs(11/2*M - 30*H)\\nrad = math.radians(theta)\\ncos = Decimal(math.cos(rad))\\nans = math.sqrt(A**2 + B**2 - 2 * A * B * cos)\\nprint(\"{:.020f}\".format(ans))", "target": "290", "substitutes": {"A": ["AY", "AR", "K", "AI", "AA", "Ar", "AG", "C", "RA", "AC", "AN", "Al", "a", "R", "IA", "G", "AV", "BA", "CA", "AL", "LA", "U", "As", "AU", "HA", "AT", "AF", "L", "GA", "An", "P", "AM", "AH", "SA", "AS", "AB", "AP", "ACT", "Ax", "AE"], "B": ["Y", "BB", "BS", "DB", "C", "EB", "BAT", "RB", "Bu", "R", "W", "NB", "BO", "N", "BA", "IB", "BC", "WB", "BI", "Bar", "b", "GB", "S", "O", "D", "L", "TB", "LB", "BG", "P", "T", "J", "AB", "V", "BT", "I", "BW", "BER", "Bern", "BM", "BY", "BR", "Bs"], "H": ["Y", "K", "He", "CH", "C", "X", "F", "R", "HT", "G", "W", " HH", "HI", "HH", "h", "TH", "S", "MH", "E", "GH", "D", "HA", "HE", "HM", "L", "HR", "P", "SH", "AM", "T", "J", "V", "I", "hh", "HS", "AH", "NH"], "M": ["Y", "K", "m", "C", "X", "MP", "F", "R", "G", "W", "MT", "MR", "N", "MI", "MC", "TH", "MM", "S", "E", "O", "MH", "D", "L", "Month", "P", "Q", "AM", "MS", "T", "MAN", "J", "Z", "V", "I"], "theta": [" theeta", "schete", "Thetta", "Thet", " thetta", "theeta", "thetta", "scheeta", "thete", "morningtta", "Thete", "schet", "morningt", "morningta", " thete", "scheta", "morningte", " thet", "Theta", "thet", "Theeta"], "rad": ["rand", "rb", "pard", "med", "ram", "range", "ran", "red", "rs", "pos", "rot", "ax", "ang", "r", "div", "b", "mod", "radius", "Rad", "dir", "ro", "deg", "trans", "rod", "angle", "ra", "ad", "abs", "ac", "dec", "rem", "rel", "dra", "mm", "mad", "rain"], "cos": ["ens", "canon", "vec", "cas", "normal", "times", "mas", "cms", "roman", "cat", "oss", "cus", "cs", "se", "cons", "pos", "rot", "os", "con", "nos", "los", "cin", "asin", "phys", "pose", "aos", "co", "atan", "c", "phi", "css", "go", "exp", "frac", "lon", "cross", "mson", "fc", "conf", "neg", "mos", "turn", "cum", "sin", "dec", "mag", "cor", "coll", "abs", "ac", "dot", "las", "Cos"], "ans": ["ens", "anon", "ls", "names", "aned", "AN", "ran", "ins", "anas", "os", "aus", "ns", "ons", "ann", " Ans", "oman", "aos", " sans", "beans", "arts", "ians", "rans", " means", "san", "works", "ANS", "leans", "uns", "nas", "zan", "\u00e1n", "anes", "ras", "asms", "ats", "an", "ants", "lan"]}}
{"code": "s_in = input()\\ns_out = s_in.replace(\",\", \" \", 2)\\nprint(s_out)", "target": "588", "substitutes": {"s_in": ["sostoninput", "s2in", "sostonnin", "s2input", "S_out", "suchout", "S_nin", "S_in", "s_input", " s_raw", "s_nin", "s_raw", "sostonin", "suchinput", "s2raw", "S_input", "suchraw", "s2out", " s_input", "suchin", "sostonout"], "s_out": ["s7print", "s2in", "s2OUT", "s7in", " s2OUT", " s_print", " s2out", "s_OUT", " s2in", "s7OUT", "s2out", "s7out", " s_OUT", "s_print"]}}
{"code": "s = input ()\\nwhile len(s) != 0:\\n  s = s[:-2]\\n  le = round (len(s)/2)\\n  if s[:le] == s[le:len(s)]:\\n    print (len(s))\\n    break", "target": "696", "substitutes": {"s": ["z", "f", "ps", "sts", "str", "stats", "sv", "ws", "ls", "conv", "m", "a", "spec", "l", "rs", "t", "cs", "gs", "xs", "y", "ms", "ins", "os", "i", "ns", "v", "sp", "strings", "hs", "c", "es", "sl", "gins", "h", "b", "g", "S", "bits", "ments", "string", "p", "ss", "less", "ds", "j", "e", "sa", "sb", "its", "ims", "n", "abs", "bs", "sq", "tes", "ats", "als", "x", "ts", "qs", "js"], "le": ["pe", "ld", "ls", "ele", "led", "el", "fe", "LE", "l", "se", "be", "kl", "len", "ger", "ke", "little", "ole", "length", "ble", "lt", " Le", "gt", "ge", "er", "ce", "de", "size", "Le", "te", "less", "ne", "e", "sle", "lem", "ale", "les", "li", "left", "nl", "me"]}}
{"code": "#import time\\ncount=0\\ndef merge(A,left,mid,right):\\n    global count\\n    L=A[left:mid]+[2**30]\\n    R=A[mid:right]+[2**30]\\n\\n    i=0\\n    j=0\\n    for k in range(left,right):\\n        count+=1\\n        if L[i]<=R[j]:\\n            A[k]=L[i]\\n            i+=1\\n        else:\\n            A[k]=R[j]\\n            j+=1\\n\\n\\ndef mergeSort(A,left,right):\\n    if left+1 < right:\\n        mid = int((left+right)/2)\\n        mergeSort(A,left,mid)\\n        mergeSort(A,mid,right)\\n        merge(A,left,mid,right)\\n\\n\\n#start = time.time()\\n\\nn=int(input())\\ns=list(map(int,input().split()))\\ncount=0\\nmergeSort(s,0,n)\\n\\nprint(s[0],end='',sep='')\\nfor i in range(1,n):\\n    print(\" \",s[i],end='',sep='')\\nprint()\\n\\nprint(count)\\n\\n#end=time.time()-start\\n#end*=1000\\n#print (\"Time:{0}\".format(end) + \"[m_sec]\")\\n\\n", "target": "201", "substitutes": {}}
{"code": "from collections import Counter\\n\\nn = int(input())\\na = map(int, input().split())\\n\\nc = Counter(a)\\nr = 1 if n % 2 == 0 else 0\\nfor k, v in c.items():\\n    if r == 0 and k == 0 and v == 1:\\n        continue\\n    if k != 0 and k % 2 == r and v == 2:\\n        continue\\n    print(0)\\n    break\\nelse:\\n    print(2**(n//2) % (10**9+7))\\n", "target": "73", "substitutes": {"n": ["f", "nn", "m", "ni", "l", "nt", "t", "number", "nr", "N", "i", "ns", "mn", "na", "ln", "sn", "an", "b", "h", "g", "cn", "nu", "nb", "rn", "num", "d", "dn", "j", "ne", "net", "nor", "nc", "o", "u", "w", "nl", "x"], "a": ["ba", "apa", "ap", "m", "am", "ta", "ae", "l", "ga", "au", "ed", "xa", "s", "ca", "A", "la", "at", "ea", "b", "area", "d", "p", "alpha", "j", "parts", "ai", "sa", "ata", "aa", "ac", "o", "ma", "ia", "ab", "aaa", "ar", "ach", "an"], "c": ["z", "f", "sc", "mc", "m", "C", "cs", "l", "t", "cb", "ca", "ch", "rc", "co", "b", "lc", "gc", "g", "cc", "ct", "d", "cont", "p", "col", "cp", "xc", "dc", "cache", "ac", "tc", "nc", "cu", "coll", "cm"], "r": ["z", "f", "rate", "rb", "pr", "m", "rr", "rg", "sr", "cr", "kr", "R", "l", "rs", "t", "debug", "nr", "s", "i", "rc", "err", "res", "h", "q", "b", "g", "er", "re", "rm", "d", "p", "br", "j", "right", "rank", "rd", "mr", "hr", "w", "o", "u", "dr", "x", "ar", "rt"], "k": ["K", "m", "kr", "kt", "kh", "ka", "ck", "kl", "ikk", "i", "key", "kk", "kan", "ke", "kid", "mk", "ki", "q", "ak", "kn", "unk", "ijk", "wk", "ik", "p", "km", "j", "kj", "ek", "aka", "kw", "tk", "sk", "ko", "x", "ku"], "v": ["z", "f", "ve", "sv", "conv", "vv", "m", "qv", "l", "lv", "y", "s", "i", "ver", "h", "q", "b", "val", "tv", "vd", "vs", "nv", "va", "vm", "p", "vi", "j", "av", "vol", "vt", "uv", "vr", "V", "w", "o", "x", "ev", "vc", "cv", "nov", "vert"]}}
{"code": "from bisect import bisect_left\\nn = int(input())\\nL = list(map(int, input().split()))\\nL.sort()\\nans = 0\\n\\nfor i in range(n):\\n    for j in range(i+1, n):\\n        ans += bisect_left(L, L[i]+L[j])-j-1\\nprint(ans)\\n", "target": "518", "substitutes": {"n": ["z", "nn", "m", "a", "ni", "l", "nt", "name", "number", "t", "N", "len", "ns", "nm", "k", "mn", "ll", "na", "c", "ln", "sn", "nd", "g", "cn", "ct", "nu", "nb", "num", "d", "size", "nv", "p", "dn", "network", " ns", "pi", " ng", "ne", "gn", "np", "nc", "w", "nl", "x", " N", "count"], "L": ["DL", "H", "X", "XL", "Line", "LR", "F", "R", "SL", "LE", "l", "G", "LS", "ML", "LM", "N", "LT", "M", "LU", "LG", "A", "LA", "Left", "NL", "EL", "PL", "S", "O", "D", "RL", "CL", "P", "IL", "LC", "List", "T", "LI", "J", "V", "I", "B", "LIST", "LP", "BL", "LD", "Li", "dL", "LL", "Lu", "TL"], "ans": ["ens", "cas", "anon", "ls", "vers", "AN", "ran", "ean", "cs", "rs", "pan", "amps", "ms", "ins", "anas", "aus", "ons", "ns", "ars", "ann", "aps", "acs", "aos", "arts", "beans", "es", "ians", "rans", "posts", "yes", " means", "ANS", "leans", "uns", "ai", "nas", "offs", "nan", "mean", "ams", "ads", "ras", "ats", "orts", "ros", "vals", "ana", "an", "ks", "ants", "lan"], "i": ["ini", "ri", "zi", "m", "l", "y", "ix", "ti", "ci", "ji", "gi", "v", "ij", "hi", "ki", "ami", "yi", "ie", "ind", "di", "bi", "multi", "pi", "fi", "ai", "it", "ii", "xi", "si", "ic", "li", "I", "ia", "x", "ui", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "m", "a", "jit", "ja", "l", "y", "t", "s", "jp", "k", "ji", "r", "v", "ij", "c", "index", "job", "q", "b", "g", "jac", "size", "p", "oj", "end", "kj", "it", "jj", "jump", "aj", "J", "o", "uj", "dj", "x", "bj", "js", "jc"]}}
{"code": "import collections, math, bisect\\n\\nlocal = False\\nif local:\\n    file = open(\"input.txt\", \"r\")\\n    import time\\n\\ndef inp():\\n    if local:\\n        return file.readline().rstrip()\\n    else:\\n        return input().rstrip()\\n\\ndef ints():\\n    return [int(_) for _ in inp().split()]\\n\\n\\nif local:\\n    start=time.time()\\n\\nN,M = ints()\\n\\nconnection = [dict() for i in range(N)]\\n\\nfor i in range(1, M+1):\\n    x,y,z = ints()\\n\\n    connection[x-1][y-1] = True\\n    connection[y-1][x-1] = True\\n\\nans = 0\\nvisited = set()\\n\\nfor i in range(N):\\n    if i in visited:\\n        continue\\n\\n    ans+=1\\n    stck = [i]\\n    visited.add(i)\\n\\n    while len(stck)>0:\\n        vertex = stck.pop(-1)\\n\\n        for nextVertex in connection[vertex]:\\n            if nextVertex not in visited:\\n                visited.add(nextVertex)\\n                stck.append(nextVertex)\\n\\nprint(ans)\\n\\n\\nif local:\\n    fin = (time.time()-start)*1000\\n    print(\"{:.2f}\".format(fin) + \"ms\")\\n", "target": "147", "substitutes": {"local": ["type", "disk", "level", "tmp", "external", "only", "foreign", "node", "Local", "this", "l", "present", "location", "close", "private", "case", "memory", "back", "personal", "final", "ssl", "public", "localhost", "input", "native", "managed", "lock", "empty", "state", "http", "remote", "lib", "internal", "default", "central", "ocal", "config", "process", "cloud", "dir", " locally", "window", "same", "commit", "false", "self", "valid", "client", "so", "binary", "land", "time", "server", "cache", "relative", "loc", "ale", "instance", "save", "where", "south", "link"], "file": ["f", "function", "message", "line", "le", "File", "full", "name", "channel", "fn", "mail", "buffer", "input", "db", "open", " File", "fp", "console", "foo", "csv", "user", "page", "string", "path", "dir", "port", "ile", "run", "files", "al", "table", "document", "log", "where", "FILE", "filename", "resource", "base"], "_": ["tu", " name", "out", " un", "line", "label", "a", "l", "t", "name", "all", " main", "row", "lang", "point", "key", "token", "err", "msg", "status", "length", "place", " __", "long", "index", "h", " each", "val", " get", "id", "ml", " time", " new", "j", "self", "T", " all", "instance", "___", " std", "new", " g"], "start": ["started", "train", "ish", "offset", "load", "date", " Start", "reset", "t", "starting", "step", "before", "open", "root", "sp", "now", "ST", "prep", "call", "end", "get", "seed", "it", "run", "time", "art", "first", "iter", "set", "save", "stop", "st", "Start", "base", "begin", "init"], "N": ["Y", "Num", "K", "C", "R", "Ni", "CNN", "NB", "NI", "NR", "MN", "Na", "NP", "NA", "S", "O", "ND", "NT", "D", "SN", "NS", "Node", "NM", "L", "TN", "P", "No", "T", "GN", "n", "Z", "V", "I", "NUM", "NC", "Ns", "NO", "NN", "NH"], "M": ["Y", "K", "m", "C", "H", "MP", "X", "F", "R", "Multi", "MT", "LM", "CM", "Mon", "MI", "MN", "MC", "MM", "S", "D", "Many", "L", "NM", "JM", "P", "My", "MA", "MS", "MAN", "T", "ME", "J", "DM", "Z", "V", "I", "B", "MU"], "connection": ["function", "relation", "ion", "line", "established", "pointer", "specified", "conn", "section", "close", "con", "Connection", "creation", "direction", "database", "open", "condition", "index", "city", "pair", "position", "tree", "character", "reference", "context", "directory", "path", "pool", "network", "window", "closed", "connected", "graph", "generation", "associated", "document", "sequence", "set", "response", "link", "entry", "connect", "description"], "i": ["ini", "ei", "ri", "zi", "m", "a", "ni", "l", "t", "ix", "iy", "ti", "ip", "ci", "k", "ji", "gi", "v", "gu", "ij", "c", "oi", "index", "ki", "phi", "yi", "ie", "ind", "id", "di", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "u", "iter", "iri", "iti", "mi", "im", "ski"], "x": ["yz", "yx", "m", "xp", "X", "a", "xy", "l", "t", "ix", "xs", "xa", "xx", "ax", "r", "k", "v", "xt", "dx", "wx", "c", "ex", "p", "rx", "j", "xc", "e", "ox", "int", "xi", "n", "o", "w", "px", "lat", "zx", "tx"], "y": ["Y", "yz", "yo", "ey", "yl", "ym", "yn", "ay", "m", "xy", "zy", "py", "iz", "iy", "oy", "sy", "yy", "xx", "yt", "v", "ys", "gy", "b", "g", "ies", "yi", "ny", "j", "ry", "ox", "ye", "n", "yr", "cy", "vy", "o", "ic", "ez"], "z": ["f", "yz", "zi", "xy", "zy", "l", "t", "iz", "hz", "v", "az", "cz", "c", "zh", "q", "g", "ze", "d", "tz", "zer", "j", "zone", "e", "Z", "ez", "w", "zz", "zo"], "ans": ["ens", "stats", "ps", "lines", "annot", "names", "AN", "oss", "ran", "ean", "anc", "cs", "rs", "pan", "gs", "xs", "anned", "amps", "s", "ms", "ins", "os", "anas", "ns", "ons", "outs", "ann", "reads", "aus", "acs", "arts", "ents", "ians", "rans", "eds", "posts", "ations", "yes", "san", "ids", "vs", "ANS", "terms", "anus", "ds", "lets", "ai", "anes", "actions", "span", "ats", "orts", "anks", "an", "ks", "ants", "lan"], "visited": ["verated", "vertited", "vertitted", "vited", "Visated", "VISiting", "Vised", " visitted", "Visored", "Visited", "vertied", "versiting", "verited", "eniting", "VISored", "versitted", "verit", "servitted", "navited", "veriting", "veritted", "visied", "vised", "vied", "VISed", "enited", "Visiting", "VisITED", "Visitted", "visitted", "serviting", "servited", "VISited", "navated", "vated", "visiting", "visated", "vitted", "vertITED", "VISitted", "enitted", "versited", "vit", "visored", "navit", "visit", "Visied", "navitted", "ened", "versit", "visITED", " visated", "vITED", " visored", "VISated", "servit"], "stck": ["estck", "stecks", "estleck", "Stleck", "Stack", "stleck", "seleck", " stcl", "estcks", "stcker", "estcl", "stack", "istck", "stcl", "istack", "STleck", " stleck", " stack", "istleck", "stkk", "stcks", " stcker", "STcker", "istkk", "istcks", "STcks", "secl", "steleck", "Stck", " stkk", " stcks", "steck", "STck", "seck", "STkk", "Stcks", "stecl", "secker", "STcl"], "vertex": ["verlet", "vicle", "generface", "vericle", "vertindex", "verindex", "Vertex", "vertnode", "vertlet", "vtex", "portface", "Verface", "verface", "portindex", "genertex", "vertface", "genericle", "vface", "verticle", "vnode", "genernode", "portlet", "verttex", "porttex", "vernode", "Verindex", "Verlet"], "nextVertex": ["nextVersite", "nextVface", "nextvertex", "nextVercell", "nextVerite", "nextVertedge", "nextveredge", "nextVerttex", "nextverite", " nextVertnel", "nextVersedge", "nextVerface", " nextVertface", " nextVernel", "nextVertite", " nextVerite", " nextVerttex", " nextVertcell", "nextVedge", "nextVernel", " nextVertedge", " nextvertex", "nextVeredge", " nextVeredge", "nextVertcell", "nextverface", "nextVtex", " nextveredge", "nextVertnel", "nextVerstex", " nextVercell", " nextverface", " nextVertite", "nextVertface", "nextVcell", "nextVersface", "nextVnel", " nextVerface", "nextvernel", "nextvercell"], "fin": ["finished", "ini", "train", "des", "report", "fa", "fine", "raf", "par", "df", "ran", "dev", "pan", "close", "fre", "con", "fr", "final", "fn", "den", "syn", "FIN", "exc", "sd", "gc", "cmd", "init", "fun", "dl", "frac", "end", "trans", "vol", " dur", "conf", "cum", "tun", "Fin", "after", "lan", "fd"]}}
{"code": "from collections import Counter\\n\\nN, K = map(int, input().split())\\n*A, = map(int, input().split())\\nMOD = 10**9+7\\nS = [0]*(N+1)\\nc = Counter()\\nc[0] = 1\\nans = 0\\n\\nfor i in range(N):\\n    S[i+1] = (S[i]+A[i]-1)%K\\n    if i+1-K>=0:\\n        c[S[i+1-K]] -= 1\\n    ans += c[S[i+1]]\\n    c[S[i+1]] += 1\\n\\nprint(ans)\\n", "target": "596", "substitutes": {"N": ["Y", "Num", "KN", "C", "X", "AN", "F", "R", "G", "Ni", "CNN", "NB", "NI", "M", "NR", "CN", "MN", "U", "NA", "E", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "P", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NN"], "K": ["HK", "KA", "GP", "KN", "KY", "FK", "PK", "H", "C", "KT", "X", "AN", "AC", "F", "KK", "R", "SK", "G", "MT", "CM", "M", "k", "KB", "KR", "IK", "Kent", "KI", "Mask", "KS", "OK", "NK", "D", "UK", "Key", "L", "TN", "IT", "ICA", "Kin", "P", "Mod", "Q", "KE", "T", "MS", "J", "Z", "Ku", "V", "KEY", "B", "KC", "TER", "Power", "MK", "CP"], "A": ["Y", "AA", "C", "X", "AC", "a", "F", "R", "G", "W", "CA", "U", "NA", "E", "O", "As", "AU", "AT", "Array", "AF", "L", "GA", "An", "At", "P", "Q", "AM", "T", "AS", "AB", "AP", "V", "I", "B", "Ax", "SA"], "MOD": ["max", "m", "X", "UL", "inv", "EXP", "M", "MAX", "SIZE", "perm", "Len", "Mask", "mask", "scale", "REM", "ID", "Size", "mod", "TM", "Mod", "AD", "mode", "MODE", "MS", "Z", "log", "NUM", "Log"], "S": ["BS", "String", "SI", "Si", "C", "H", "SS", "X", "R", "SL", "G", "PS", "SB", "LS", "Cs", "s", "M", "OS", "RS", "INS", "U", "ST", "Socket", "Size", "IS", "NRS", "SR", "O", "DS", "Source", "Series", "US", "NS", "Sc", "SN", "SU", "System", "L", "SP", "FS", "P", "TS", "ES", "TPS", "MS", "T", "AS", "SF", "Session", "Z", "VS", "V", "SE", "I", "B", "CS", "SC", "GS", "SA", "States", "Set", "SQL"], "c": ["z", "f", "sc", "conv", "mc", "m", "C", "cr", "a", "l", "cs", "t", "s", "con", "rc", "r", "k", "cb", "ch", "v", "ctrl", "co", "cv", "h", "b", "lc", "g", "gc", "csv", "ct", "cc", "cn", "ce", "d", "cos", "p", "cur", "col", "cp", "e", "cmp", "dc", "cache", "pc", "n", "nc", "fc", "cu", "u", "conf", "ac", "cm", "count"], "ans": ["ens", "rors", "cas", "ls", "names", "AN", "oss", "anc", "cs", "rs", "cons", "amps", "xs", "s", "os", "ins", "ms", "ars", "ns", "outs", "ons", "ann", " Ans", "acs", "es", "ents", "ians", "rans", "eds", "posts", "vs", "ANS", "can", "uns", "nas", "offs", "nan", "ads", "ats", "ros", "ions", "an", "ks", "ants", "scan"], "i": ["io", "ini", "ei", "ri", "zi", "uri", "cli", "ix", "ti", "info", "s", "ip", "ci", "\u0438", "series", "ji", "ati", "gi", "v", "status", "ij", "ori", "hi", "index", "ki", "q", "b", "phi", "oi", "esi", "ami", "sim", "ind", "id", "asi", "di", "bi", "j", "pi", "fi", "isi", "ai", "it", "ii", "xi", "si", "iri", "ic", "batch", "I", "li", "u", "iter", "uni", "x", "ui", "mi", "iu", "multi", "ski"]}}
{"code": "#!/usr/bin/env python\\n# -*- coding:utf-8 -*-\\nfrom __future__ import print_function,division\\nfrom itertools import combinations\\nimport time\\nimport sys\\nimport io\\nimport re\\nimport math\\nstart = time.clock()\\ni = 0\\ndef enum_sum_numbers(sets, s_range, r):\\n    for cmb in combinations(sets,r):\\n        yield sum(cmb)\\n    if r <=s_range:\\n        for s in enum_sum_numbers(sets,s_range, r+1):\\n            yield s\\n\\nsys.stdin.readline()\\na=[int(s) for s in sys.stdin.readline().split()]\\nsys.stdin.readline()\\nms=[int(s) for s in sys.stdin.readline().split()]\\nsets={s for s in enum_sum_numbers(a,len(a),1)}\\nfor m in ms:\\n    print('yes' if m in sets else 'no')", "target": "279", "substitutes": {}}
{"code": "H, N = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nif sum(a) >= H:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "314", "substitutes": {"H": ["Y", "K", "HO", "He", "C", "X", "F", "HT", "G", "W", "HI", "M", "A", "HH", "h", "S", "MH", "O", "E", "D", "HA", "HE", "L", "P", "Q", "Eh", "T", "J", "V", "I", "B", "OH", "AH", "NH"], "N": ["Y", "K", "C", "X", "F", "G", "W", "M", "NR", "A", "NA", "S", "E", "O", "D", "L", "P", "No", "Q", "T", "J", "n", "Z", "V", "B", "NO", "NN"], "a": ["f", "ba", "ae", "ta", "att", "all", "t", "sta", "au", "i", "A", "ca", "la", "c", "h", "b", "area", "va", "alpha", "da", "ao", "j", "sa", "ai", "ata", "aa", "n", "o", "ma", "ab", "eas", "aaa", "an", "data", "agree", "auto"]}}
{"code": "n = input()\\nxs = map(float, input().split())\\nys = map(float, input().split())\\nabs_d = [abs(x - y) for (x, y) in zip(xs, ys)]\\nd = [sum([i ** p for i in abs_d]) ** (1 / p) for p in range(1, 4)]\\nd.append(max(abs_d))\\n\\nprint(*d, sep='\\n')\\n", "target": "325", "substitutes": {"n": ["f", "nn", "names", "m", "t", "nt", "name", "N", "fn", "ns", "mn", "nm", "k", "r", "v", "na", "c", "sn", "q", "cn", "nu", "nb", "ny", "num", "ne", "np", "nc", "o", "norm"], "xs": ["ls", "xes", "yx", "xp", "tops", "ews", "ires", "xy", "icks", "rs", "gs", "ists", "s", "ins", "iffs", "ns", "ons", "ials", "es", "ies", "opens", "fx", "inters", "vs", "eps", "rx", "its", "ints", "ics", "ims", "abs", "px", "rices", "ats", "ices", "ts", "apps", "tx", "ows"], "ys": ["sys", "ues", "ips", "yn", "yx", "tops", "rys", "ews", "ones", "fs", "mys", "xy", "yss", "rs", "ios", "gs", "s", "os", "ars", "es", "ians", "gy", "eds", "ies", "vs", "rots", "ols", "ds", "YS", "ves", "its", "uds", "bs", "irs", "ks", "ows"], "abs_d": ["abs_l", "ab_b", "abs2b", "abs2d", "Abs_b", "Abs_p", "abs2p", "abs_p", "abs_n", "abs2n", "ab_d", "Abs_d", "abs_ds", "abs_b", "ab2b", " abs_p", "ab_n", "Abs_n", "ab2n", "abs2ds", "ab2d", "ab_p", " abs_ds", "abs2l", "ab2p", " abs_l"], "x": ["z", "yx", "xp", "X", "a", "ux", "xy", "l", "ix", "xa", "xx", "ax", "xt", "dx", "wx", "ex", "fx", "rx", "j", "xc", "e", "ox", "xi", "lex", "px", "w", "xf", "xd", "tx"], "y": ["Y", "z", "sys", "yo", "ey", "yl", "ym", "yn", "ay", "xy", "yu", "py", "iy", "oy", "sy", "yy", "ery", "yt", "gy", "b", "ies", "yi", "ny", "j", "ry", "uy", "ye", "yr", "cy", "yd", "sky"], "d": ["z", "f", "done", "out", "ld", "des", "m", "dig", "df", "l", "t", "debug", "dict", "s", "dd", "r", "db", "v", "dx", "sd", "b", "g", "mod", "ind", "D", "di", "dm", "pd", "daily", "de", "da", "do", "j", "ds", "td", "gd", "e", "dh", "ad", "dra", "dr", "data", "md", "dat", "fd"], "i": ["z", "ini", "ei", "zi", "m", "a", "l", "t", "ix", "ti", "ip", "ci", "key", "v", "pa", "ij", "c", "ki", "q", "phi", "id", "di", "bi", "j", "pi", "e", "ai", "ii", "xi", "si", "ic", "li", "I", "mi", "iu", "im"], "p": ["op", "pe", "f", "ps", "pr", "m", "a", "par", "l", "t", "bp", "s", "pp", "ip", "jp", "tp", "r", "k", "v", "perm", "pa", "c", "h", "q", "b", "g", "power", "exp", "j", "pi", "pl", "lp", "P", "pc", "o", "u", "pn", "pg"]}}
{"code": "N = int(input())\\na = list(map(int, input().split()))\\ncount = 1\\nbk = 0\\nfor i in a:\\n    if i == count:\\n        count += 1\\n    else:\\n        bk += 1\\nif bk == N:\\n    ans = -1\\nelse:\\n    ans = bk\\nprint(ans)\\n", "target": "749", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "X", "AN", "F", "Ni", "CNN", "G", "M", "NR", "A", "Len", "NA", "Count", "S", "E", "NT", "D", "NS", "L", "P", "No", "Q", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NN"], "a": ["ba", "ta", "another", "l", "all", "t", "sta", "to", "s", "xa", "A", "ca", "pa", "na", "index", "ea", "an", "b", "area", "p", "va", "oa", "parts", "ai", "sa", "each", "aa", "n", "ac", "ma", "ia", "set", "ab", "am", "aba"], "count": ["ount", "max", "found", "sum", "C", "find", "cond", "counter", "cs", "nt", "t", "cycle", "number", "pos", "con", "ns", "k", "ch", "v", "now", " counts", "c", "index", "start", "b", "Count", "flag", "th", "ct", "cc", "nb", "ind", "num", "cont", "process", "ctr", "total", "current", "span", "conf", "cache", "n", "nc", "first", "an"], "bk": ["dk", "bgkh", "nbak", "ikn", "bgkick", "brik", "bkick", "iak", "nbck", "bbak", " bik", "bbck", "brk", "Bak", "Bek", " bkk", "brkk", "nbek", "brkick", "bbk", " bkr", "bkr", "iuk", "bek", "fbak", "rbkn", "buk", "bke", "bik", "rbak", "bkh", "ik", "fbk", "fbuk", "bgk", "dkk", " bkick", "nbk", "brkh", "Bck", " bkh", " bke", "rbk", "rbuk", "bck", "bkk", "bbek", "brkr", "bgik", "bak", "bkn", "brke", "dkr", "Bk", "dke", "fbkn"], "i": ["ei", "ini", "zi", "\u00ed", " bi", "ni", "aci", "ti", "ci", "k", "ati", "gi", "ij", "ori", "oi", "ki", "phi", "b", "yi", "ind", "id", "di", "bi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "o", "li", "I", "x", "iti", "iu"], "ans": ["ens", "rors", "ls", "names", "mas", "aned", "AN", "cs", "pan", "nt", "amps", "gs", "ms", "ars", "ins", "aus", "ons", "ns", "os", "ann", "anas", "outs", "aps", "aos", "arts", "ians", "angs", "ums", "sn", "ands", "eds", "ids", "vs", "ANS", "versions", "uns", "offs", "actions", "vals", "anks", "ana", "an", "ks", "ants", "olds", "lan", "irms"]}}
{"code": "n = int(input())\\nL = [list(map(int,input().split())) for _ in range(n)]\\nL.sort(key=lambda x:x[0]+x[1])\\nseen=-10**10\\ncnt=0\\nfor i in range(n):\\n    if seen<=L[i][0]-L[i][1]:\\n        seen=L[i][0]+L[i][1]\\n        cnt+=1\\nprint(cnt)", "target": "109", "substitutes": {"n": ["z", "nw", "nn", "m", "l", "nt", "t", "number", "nr", "s", "N", "len", "ns", "nm", "mn", "r", "v", "na", "c", "ln", "sn", "q", "g", "cn", "nu", "nb", "num", "d", "size", "p", "j", "network", "ne", "gn", "np", "nc", "no", "nl", "count"], "L": ["DL", "C", "X", "XL", "LR", "Long", "SL", "LE", "l", "G", "LS", "ML", "LM", "N", "LT", "M", "LG", "LU", "Left", "LA", "NL", "EL", "PL", "S", "O", "GL", "RL", "CL", "Language", "P", "IL", "LC", "List", "GV", "T", "LI", "J", "V", "FL", "I", "Layout", "B", "dL", "LP", "BL", "LD", "LIST", "Alpha", "SSL", "LL", "Lu", "TL"], "_": [" name", "ix", " j", " __", " p", "val", " c", " z", " the", " x", " k", "I", " pre", "x", " w", " index"], "seen": ["done", "told", "marked", "printed", "found", "zi", "recent", " unseen", "specified", "l", "se", "reen", "you", "common", "seq", "recorded", "en", "expected", "linked", "hi", "index", "gone", "kept", "lc", "see", "g", "ge", "used", "sen", "represented", "read", "next", "view", "total", "each", "shown", "saw", "served", "checked", "set", "known", "written", "verified", "new", "ordered"], "cnt": ["conount", " cgt", "rrt", " cnd", "connt", "rnd", "crt", "Crt", "rnt", "congt", " cctr", "rctr", " cpt", "cgt", "Cct", "Count", "Cnt", "cumct", "cumnt", "cctr", "cumctr", " count", "cumpt", " crt", "rpt", "rct", "Cgt", "cnd", "cct", " cct", "conct", "count", "Cnd", "cpt"], "i": ["f", "io", "ini", "ri", "zi", "uri", "m", "l", "y", "this", "ix", "ti", "info", "s", "ip", "key", "k", "ji", "gi", "v", "ij", "c", "ori", "index", "q", "ind", "id", "di", "p", "bi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "ic", "batch", "I", "li", "me", "x", "ui", "mi", "iu", "im", "item"]}}
{"code": "# coding: utf-8\\n# Your code here!\\nimport math\\n\\nwhile True:\\n    n = int(input())\\n    if n == 0:\\n        break\\n    s = list(map(int,input().split()))\\n    \\n    sum = 0\\n    for i in range(len(s)):\\n        sum += s[i]\\n    m = sum/len(s)\\n    \\n    a = 0\\n    for i in range(len(s)):\\n        a += s[i]*s[i]\\n    a = a/len(s)\\n    \\n    print(\"{0:.8f}\".format(math.sqrt(a-m*m)))\\n", "target": "683", "substitutes": {}}
{"code": "import math\\nS = int(input())\\nv = 10**9\\nx3 = (v-S%v)%v\\ny3 = (S+x3)//v\\nprint(\"0 0 %d 1 %d %d\"%(10**9, x3, y3))", "target": "638", "substitutes": {"S": ["Y", "SI", "Si", "C", "H", "X", "SS", "F", "R", "G", "W", "SM", "s", "N", "M", "A", "U", "E", "D", "NS", "SU", "L", "Vs", "P", "TS", "Q", "SH", "T", "SA", "SF", "SE", "Z", "VS", "V", "J", "I", "B"], "v": ["f", "ve", "sv", "SI", "vv", "m", "qv", "inv", "l", "y", "t", "lv", "s", "i", "M", "NV", "r", "ver", "div", "k", "value", "vp", "c", "length", "h", "b", "q", "g", "tv", "d", "nv", "vs", "p", "size", "vi", "j", "pi", "av", "e", "vol", "vt", "var", "n", "uv", "V", "VS", "u", "w", "o", "si", "x"], "x3": ["X3", "w3", "y2", " x2", "X2", "ox03", "x0", "x883", "ix3", "ix883", " x30", "ex2", "ex03", "y0", "ix03", "x43", "ox43", " x883", " x43", "x1", "X30", "X03", "ix43", " x1", " x03", "w2", "x03", "ex3", "ox3", "ox883", "x2", "ex30", " x0", "w1", "y1", "w0", "x30"], "y3": [" y13", "y2", "yy23", "dy53", "y23", "dy23", "dy2", "y13", "ny13", " y2", "yy53", "ny3", "yy2", " y23", "y53", "iy3", "iy15", "dy3", "y15", " y15", "ny15", "iy13", "yy3", " y53"]}}
{"code": "# encoding:utf-8\\n\\ninput = map(int, raw_input().split())\\na, b = input\\n\\nd = a / b\\nr = a % b\\nf = float(a) / b\\n\\nprint(d),\\nprint(r),\\nprint(('%03.9f' % f))", "target": "301", "substitutes": {}}
{"code": "from collections import deque\\nimport sys\\ninput = sys.stdin.readline\\ninf = pow(10, 10)\\n\\nn, m = map(int, input().split())\\na = [inf] * n\\n\\nedge = [[] for i in range(n)]\\n\\nfor i in range(m):\\n    l, r, d = map(int, input().split())\\n    l-=1;r-=1\\n    edge[l].append((r, d))\\n    edge[r].append((l, -d))\\n\\nflag = True\\ndist = [inf] * n\\nfor i in range(n):\\n    if not flag: break\\n    if dist[i] == inf:\\n        dist[i] = 0\\n        dq = deque([i])\\n        while dq:\\n            now = dq.popleft()\\n            for e in edge[now]:\\n                nnode, d = e\\n                if dist[nnode] == inf:\\n                    dist[nnode] = dist[now] + d\\n                    dq.append(nnode)\\n                else:\\n                    if dist[nnode] != dist[now] + d:\\n                        flag = False\\n                        break\\nif flag:\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "672", "substitutes": {"input": ["qt", "rand", "str", "out", "stream", "utils", "reader", "sum", "load", "text", "util", " Input", "shift", "sample", "format", "raw", "fn", "output", "cin", "url", "q", "csv", "ref", "Input", "source", "select", "cmd", "pattern", "config", "hidden", "read", "char", "next", "image", "command", "form", "get", "it", "inc", "int", "each", "focus", "conf", "feed", "first", "print", "exec", "list", "data", "proc", "new", "init"], "inf": ["sup", "ine", "img", "mind", "pred", " Inf", "here", "fine", "imag", "expl", "ir", "inity", "hex", "inv", "ext", "ix", "info", "ins", "pp", "asin", "rc", "ip", "xff", "lim", "err", "Inf", "hi", "extra", "rf", "phi", "limited", "ef", "ex", "ref", "ind", "inter", "cos", " Infinity", "exp", "tif", "frac", "pi", "orth", "ipl", "inc", "it", "int", "integer", "const", "fin", "txt", "conf", "nan", "si", "sin", "iter", "sil", "aff", "init"], "n": ["f", "nn", "y", "nt", "t", "nr", "N", "ns", "k", "nm", "en", "mn", "na", "c", "ln", "h", "sn", "b", "nd", "an", "g", "cn", "nu", "nb", "num", "p", "dn", "j", "ne", "int", "np", "nan", "nc", "o", "no", "nl", "x"], "m": ["gm", "mc", "tm", "mas", "t", "ms", "M", "mn", "k", "nm", "v", "mis", "c", "h", "q", "b", "g", "dm", "p", "man", "j", "mo", "mr", "ma", "o", "mm", "mi", "cm"], "a": ["ae", "t", "au", "s", "A", "adj", "at", "ea", "b", "g", "ate", "area", "p", "alpha", "da", "ao", "j", "pi", "act", "sa", "ai", "aa", "ac", "o", "ma", "w", "ia", "an"], "edge": ["pe", "ine", "diff", "el", "line", "gate", "field", "range", "die", "grid", "ae", "ice", "node", "order", "conn", "se", "cycle", "point", "Edge", "env", "adj", "ue", "buffer", "face", "match", "index", "distance", "g", "pair", "ge", "cer", "ie", "ges", "force", "oe", "queue", "ce", "eq", "image", "ink", "end", "frame", "ee", "ange", "event", "eg", "graph", "ace", "connection", "link", "entry", "ide"], "i": ["f", "ei", "ini", "zi", "ir", "y", "t", "iy", "ti", "ip", "ci", "gi", " j", "v", "ij", "c", "index", "ki", "phi", "yi", "ind", "id", "di", "ik", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "u", "ia", "iri", "I", "iter", "x", "iti", "mi", "iu", "im"], "l": ["f", "ld", "ls", "le", "t", "lin", "kl", "s", "lb", "la", "v", "sl", "c", "lu", "lt", "ln", "h", "b", "lc", "g", "tl", "lo", "ml", "p", "dl", "L", "j", "lp", "lr", "o", "li", "left", "u", "nl", "rl", "ll"], "r": ["z", "rb", "ri", "rr", "rg", "sr", "cr", "R", "rh", "rs", "t", "s", "rc", "rl", "res", "v", "c", "h", "q", "b", "g", "re", "er", "p", "j", "ro", "lr", "right", "ra", "ur", "rd", "mr", "o", "w", "u", "vr", "dr", "x", "ar", "rt"], "d": ["z", "f", "diff", "ld", "red", "t", "ed", "s", "dd", "dt", "v", "sd", "dx", "c", "h", "q", "b", "nd", "g", "D", "di", "pd", "de", "p", "do", "da", "j", "ds", "dom", "cd", "dy", "dh", "dp", "rd", "o", "u", "w", "dr", "fd"], "flag": ["bug", "f", "wait", "ag", "ld", "level", "offset", "ground", "sync", "flags", "load", "field", "die", "cond", "day", "debug", "age", "status", "limit", "lock", "tag", "condition", "mask", "lag", "state", "store", "group", "gc", "start", "code", "ind", "id", "cmd", "do", "cloud", "command", "gui", "agg", "alt", "bool", "const", "run", "weight", "ctl", "fire", "log", "set", "save", "Flag", "agged", "arg", "list", "link", "count", "fd"], "dist": ["sum", "pt", "pred", "label", "df", "dev", "push", "dt", "dis", "ge", "ist", "di", "dm", "num", "dl", "dep", "da", "dir", "deg", "addr", "coord", "delay", "norm", "count", "det", "desc", "att", "node", "dest", "index", "distance", "depth", "ind", "supp", "dn", "exp", "progress", "dj", "dr", "req", "disc", "data", "Dist", "md", "nt", "wd", "next", "p", "j", "weight", "loc", "diff", "out", "des", "zip", "rep", "driver", "dict", "dim", "err", "adj", "dx", "pm", "tip", "int", "np", "rel", "shift"], "dq": ["qt", "ques", "ld", "ay", "qa", "adr", "iq", "eddy", "grid", "die", "zip", "df", "hold", "que", "wd", "dict", "dd", "jp", "dt", "ue", "db", "dx", "wx", "q", "wy", "queue", "dm", "pd", "du", "dl", "der", "dep", "quad", "ds", "gd", "ry", "cd", "np", "ait", "nz", "dp", "due", "delay", "sq", "dj", "daq", "quit", "dr", "qq", "qs", "rl", "ready", "xd", "egg"], "now": ["wait", "nw", "gm", "ws", "obj", "sc", "tmp", "when", "here", "Now", "node", "NOW", "y", "old", "handle", "ow", "row", "ww", "result", "sw", "at", "age", "json", "ij", "aw", "we", "ze", "er", "next", "te", "j", "hw", "self", "older", "current", "then", "wo", "ew", "aj", "ait", "loc", "time", "w", "set", "aaa", "on", "ready", "new"], "e": ["ine", "nw", "ei", "est", "node", "be", "se", "eeee", "t", "ow", "ed", "s", "au", "ue", "at", "es", "g", "ge", "ate", "E", "we", "ie", "ze", "er", "eq", "te", "et", "ne", "new", "xe", "ee", "ye", "ode", "eg", "u", "me", "x", "ize", "ase"], "nnode": [" nline", "nn", "xode", "onkey", "onNode", "xtree", "znode", "nline", "nNode", "cnode", "zline", " ndata", "node", "ledge", " nserver", "nserver", "gndata", "ptree", "pserver", "cNode", "tnode", "zdata", " nn", "ltree", "xnode", "dnn", "dnnode", " nkey", "crow", "pnode", "tode", " nedge", "xNode", "onrow", "gnline", "tedge", "dntree", "ckey", "nkey", "lode", "ntree", "onnode", " node", "nedge", " ntree", " nNode", "dnserver", " nrow", "ndata", "lnode", "pn", "nrow", "gnnode", "lNode"]}}
{"code": "#!/usr/bin/env python3\\nfrom collections import defaultdict, Counter\\nfrom itertools import product, groupby, count, permutations, combinations\\nfrom math import pi, sqrt\\nfrom collections import deque\\nfrom bisect import bisect, bisect_left, bisect_right\\nfrom string import ascii_lowercase\\nfrom functools import lru_cache\\nimport sys\\nsys.setrecursionlimit(10000)\\nINF = float(\"inf\")\\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\\n\\n\\ndef inside(y, x, H, W):\\n    return 0 <= y < H and 0 <= x < W\\n\\n\\ndef ceil(a, b):\\n    return (a + b - 1) // b\\n\\n\\ndef sum_of_arithmetic_progression(s, d, n):\\n    return n * (2 * s + (n - 1) * d) // 2\\n\\n\\ndef gcd(a, b):\\n    if b == 0:\\n        return a\\n    return gcd(b, a % b)\\n\\n\\ndef lcm(a, b):\\n    g = gcd(a, b)\\n    return a / g * b\\n\\n\\n\\ndef solve():\\n    N = int(input())\\n    P = list(map(int, input().split()))\\n    Q = list(map(int, input().split()))\\n\\n    p = 0\\n    q = 0\\n    for i, v in enumerate(permutations(range(1, N + 1)), start=1):\\n        p_ok = True\\n        q_ok = True\\n        for j in range(N):\\n            p_ok &= v[j] == P[j]\\n            q_ok &= v[j] == Q[j]\\n\\n        if p_ok:\\n            p = i\\n        if q_ok:\\n            q = i\\n\\n    print(abs(p - q))\\n\\n\\ndef main():\\n    solve()\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "436", "substitutes": {}}
{"code": "S=list(input().split())\\nans=\"\"\\nfor i in range(3):\\n    ans+=chr(ord(S[i][0])-32)\\nprint(ans)", "target": "222", "substitutes": {"S": ["BS", "SI", "Si", "C", "H", "SS", "X", "R", "SL", "G", "PS", "SB", "SM", "s", "N", "M", "A", "E", "D", "NS", "SU", "L", "SP", "P", "Q", "T", "SA", "Z", "V", "I", "B", "CS"], "ans": ["ens", "wan", "cas", "anon", "pac", "ls", "annot", "aned", "AN", "oss", "ran", "ean", "anc", "pan", "rs", "cons", "amps", "s", "ins", "os", "ms", "aus", "ns", "ons", "ars", "ann", "anas", " Ans", "ano", "aos", " sans", "arts", "ents", "rans", "san", "ANS", "can", "man", "An", "gn", "ras", "ats", "ros", "ts", "anks", "ana", "an", "ks", "ants", "lan"], "i": ["zi", "m", "y", "ix", "ti", "s", "key", "r", "k", "ji", "gi", "v", "ij", "c", "index", "q", "b", "sim", "ind", "id", "di", "num", "p", "bi", "multi", "j", "pi", "qi", "ai", "ii", "xi", "n", "batch", "ic", "I", "li", "x", "mi", "im"]}}
{"code": "N=int(input())\\nA=int(input())\\n\\nAmari=N%500\\n\\nif A>=Amari:\\n    print('Yes')\\n\\nelif A<Amari:\\n    print('No')", "target": "144", "substitutes": {"N": ["Y", "Num", "K", "NE", "H", "C", "X", "AN", "F", "Sn", "Ni", "CNN", "NB", "M", "NR", "NA", "S", "E", "Ne", "D", "SN", "NS", "NM", "L", "TN", "P", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "A": ["Y", "AY", "AR", "AI", "AA", "H", "C", "AC", "AN", "a", "IA", "Am", "Abs", "CA", "JA", "NA", "S", "As", "HA", "AT", "Array", "Ah", "AF", "GA", "If", "An", "At", "ICA", "P", "AM", "This", "And", "AS", "J", "AP", "AB", "Area", "The", "I", "B", "Alpha", "Ant", "Ax", "SA"], "Amari": ["Amarian", "AmARI", "amarian", "AMarian", "aminelli", "AMari", "amARI", "AMinelli", " Amai", " Amius", " AmARI", " Amarian", "AMai", "Amius", "amius", "amari", "AMius", "Amai", " Aminelli", "AMARI", "amai", "Aminelli"]}}
{"code": "n, y = map(int,input().split())\\ny = y / 1000\\nf = 0\\nfor i in range(n+1):\\n    for j in range(n-i+1):\\n        #print(i)\\n        if 10 * i + 5 * j + 1 * (n - i - j) == y:\\n            print(i)\\n            print(j)\\n            print(n - i - j)\\n            f = 1\\n            break\\n    if f == 1:\\n        break\\nif f != 1:\\n    print(-1)\\n    print(-1)\\n    print(-1)", "target": "465", "substitutes": {"n": ["nn", "nia", "m", "l", "nt", "t", "N", "len", "ns", "mn", "k", "en", "v", "na", "c", "sn", "q", "g", "cn", "nu", "nb", "num", "d", "p", "ne", "np", "nan", "nc", "o", "no", "x"], "y": ["Y", "z", "ym", "ey", "yl", "yn", "ay", "m", "xy", "l", "t", "py", "yu", "iy", "oy", "sy", "yy", "ty", "yt", "v", "c", "ys", "h", "b", "gy", "ies", "yi", "ny", "p", "ya", "dy", "uy", "ye", "float", "yr", "cy", "vy", "o", "x", "hy"], "f": ["of", "fa", "m", "fs", "F", "a", "df", "l", "t", "s", "k", "v", "alf", "h", "b", "g", "ef", "d", "p", "bf", " F", "e", "sf", "tf", "float", "fc", "o", "fd"], "i": ["ini", "zi", "m", "a", "l", "t", "ti", "ip", "ci", "gi", "v", "ij", "ki", "b", "yi", "ind", "id", " ii", "di", "ik", "p", "bi", "pi", "it", "int", "ii", "xi", "si", "ic", "o", "li", "u", "I", "x", "iti", "mi", "iu", "im"], "j": ["z", " iii", "l", " dj", "k", "ji", "v", "ij", " v", "q", "g", " J", " c", "oj", "kj", " z", " ja", "jj", " k", "J", " q", "o", "uj", "dj", " b", "bj", " Dj"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 6)\\ninput = sys.stdin.readline\\n\\ndef dfs(d, v, p):\\n    if (d & 1):\\n        C[v] = 1\\n    for w, u in E[v]:\\n        if u == p:\\n            continue\\n        dfs(d ^ w, u, v)\\n\\nN = int(input())\\nC = [0] * N\\nE = [[] for _ in range(N)]\\nfor i in range(N-1):\\n    u, v, w = map(int, input().split())\\n    u -= 1\\n    v -= 1\\n    E[u].append((w % 2, v))\\n    E[v].append((w % 2, u))\\ndfs(0, 0, -1)\\nprint(*C, sep='\\n')", "target": "300", "substitutes": {"input": ["f", "expression", "str", "out", "stream", "util", "reset", "spec", " Input", "sample", "format", "step", "fn", "raw", "output", "ch", "buffer", "enter", "open", "c", "index", "q", "csv", "ct", "ref", "Input", "source", "select", "cmd", "context", "config", "pattern", "read", "call", "image", "command", "initial", "hidden", "alpha", "form", "get", "inc", "it", "int", "np", "each", "inner", "print", "exec", "gen", "list", "data", "view", "text", "init"], "d": ["z", "f", "m", "red", "l", "y", "t", "s", "dd", "days", "r", "dt", "div", "sd", "c", "h", "q", "b", "dis", "g", "nd", "start", "id", "D", "dm", "pd", "dn", "da", "dir", "j", "ds", "end", "td", "e", "dc", "dh", "n", "ad", "dec", "x", "fd"], "v": ["z", "f", "ve", "vo", "sv", "vv", "m", "qv", "l", "y", "t", "lv", "s", "r", "ver", "k", "value", "c", "h", "q", "b", "g", "tv", "iv", "vs", "vd", "va", "nv", "vi", "j", "e", "av", "vt", "uv", "n", "V", "vr", "o", "vy", "x", "ev", "vc"], "p": ["ps", "f", "pe", "per", "pr", "m", "a", "par", "l", "t", "s", "pp", "jp", "r", "tp", "k", "sp", "pa", "c", "q", "b", "h", "pi", "cp", "pl", "pun", "P", "up", "pc", "n", "o", "part"], "C": ["Y", "K", "CF", "CE", "H", "X", "F", "R", "G", "W", "Cs", "CM", "M", "A", "CN", "CA", "CI", "c", "CU", "CV", "CSS", "GC", "S", "O", "D", "CT", "L", "CC", "Cal", "P", "DC", "Q", "T", "V", "I", "B", "CS", "EC", "CB", "CP", "CG"], "w": ["z", "f", "nw", "iw", "ws", "win", "m", "wh", "l", "y", "t", "W", "wd", "sw", "r", "wa", "wx", "c", "h", "q", "wl", "b", "g", "wn", "wb", "we", "nu", "wr", "wk", "wu", "rw", "hw", "word", "e", "kw", "wt", "n", "wal", "wp", "x", "wi", "width"], "u": ["uid", "mu", "tu", "f", "pu", "a", "ud", "su", "au", "ug", "r", "k", "ue", "un", "ul", "c", "lu", "U", "h", "nu", "eu", "ut", "ou", "uf", "bu", "uc", "ur", "up", "uu", "uv", "o", "cu", "uj", "n", "us", "um", "ui", "x", "iu", "ru"], "N": ["Num", "K", "F", "Sn", "Ni", "W", "CNN", "NG", "NB", "NI", "M", "NV", "NR", "CN", "MN", "SIZE", "Len", "NL", "NP", "NA", "Size", "S", "ND", "NT", "D", "SN", "NS", "Node", "NM", "L", "TN", "No", "P", "T", "GN", "n", "Z", "V", "I", "Ns", "NC", "NO", "NN", "NH"], "E": ["Y", "Che", "ET", "EEE", "Es", "H", "F", "R", "G", "W", "M", "A", "EE", "EA", "U", "PE", "S", "O", "D", "L", "EU", "ES", "P", "e", "Q", "OE", "T", "Se", "J", "V", "I", "B", "EC", "IE", "AE", "EV"], "_": ["ix", " m", " j", " __", "val", " c", " l", " x", " k", "I", "x"], "i": ["f", "l", "y", "t", "ix", "ip", "k", " j", "c", "q", "b", "ind", "id", "j", "pi", "e", "it", "n", "li", "I", "iter", "x", "im"]}}
{"code": "N,M,K=map(int, input().split())\\n\\n\\n#\u96a3\u308a\u5408\u3046\u30d6\u30ed\u30c3\u30afN-1\\ndef cmb(n, r, p):\\n  if (r < 0) or (n < r):\\n    return 0\\n  r = min(r, n - r)\\n  return fact[n] * factinv[r] * factinv[n-r] % p\\n\\np=998244353\\nn = 10 ** 6  # N \u306f\u5fc5\u8981\u5206\u3060\u3051\u7528\u610f\u3059\u308b\\nfact = [1, 1]  # fact[n] = (n! mod p) \u968e\u4e57\u306emod\\nfactinv = [1, 1]  # factinv[n] = ((n!)^(-1) mod p)\\ninv = [0, 1]  # factinv \u8a08\u7b97\u7528\\n\\nfor i in range(2, n + 1):\\n    fact.append((fact[-1] * i) % p)\\n    inv.append((-inv[p % i] * (p // i)) % p)\\n    factinv.append((factinv[-1] * inv[-1]) % p)\\nans=0\\n\\nfor i in range(K+1):\\n    if i==0:\\n        ans+=(M*pow(M-1,N-1,p)%p)\\n        ans%=p\\n    else:\\n        ans+=cmb(N-1,i,p)*(M*pow(M-1,N-1-i,p)%p)\\n        ans%=p\\nprint(ans)", "target": "375", "substitutes": {"N": ["Y", "H", "C", "X", "F", "R", "Ni", "CNN", "G", "W", "NA", "S", "E", "O", "D", "NS", "L", "P", "Q", "T", "J", "Z", "n", "V", "I", "B", "NN"], "M": ["m", "C", "H", "X", "MX", "F", "R", "W", "MT", "MR", "CM", "MN", "MC", "Ms", "MM", "D", "L", "NM", "P", "MS", "T", "MAN", "J", "V", "I", "B"], "K": ["Y", "KN", "H", "C", "X", "F", "R", "G", "W", "A", "k", "KR", "U", "KS", "S", "D", "L", "TN", "P", "Q", "T", "J", "Z", "V", "I", "B"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\n# import time\\n# import math\\n# import numpy as np\\n# import scipy.sparse.csgraph as cs            # csgraph_from_dense(ndarray, null_value=inf), bellman_ford(G, return_predecessors=True), dijkstra, floyd_warshall\\n# import random                                # random, uniform, randint, randrange, shuffle, sample\\n# import string                                # ascii_lowercase, ascii_uppercase, ascii_letters, digits, hexdigits\\n# import re                                    # re.compile(pattern) => ptn obj; p.search(s), p.match(s), p.finditer(s) => match obj; p.sub(after, s)\\n# from bisect import bisect_left, bisect_right # bisect_left(a, x, lo=0, hi=len(a)) returns i such that all(val<x for val in a[lo:i]) and all(val>-=x for val in a[i:hi]).\\n# from collections import deque                # deque class. deque(L): dq.append(x), dq.appendleft(x), dq.pop(), dq.popleft(), dq.rotate()\\n# from collections import defaultdict          # subclass of dict. defaultdict(facroty)\\n# from collections import Counter              # subclass of dict. Counter(iter): c.elements(), c.most_common(n), c.subtract(iter)\\n# from datetime import date, datetime          # date.today(), date(year,month,day) => date obj; datetime.now(), datetime(year,month,day,hour,second,microsecond) => datetime obj; subtraction => timedelta obj\\n# from datetime.datetime import strptime       # strptime('2019/01/01 10:05:20', '%Y/%m/%d/ %H:%M:%S') returns datetime obj\\n# from datetime import timedelta               # td.days, td.seconds, td.microseconds, td.total_seconds(). abs function is also available.\\n# from copy import copy, deepcopy              # use deepcopy to copy multi-dimentional matrix without reference\\n# from functools import reduce                 # reduce(f, iter[, init])\\n# from functools import lru_cache              # @lrucache ...arguments of functions should be able to be keys of dict (e.g. list is not allowed)\\n# from heapq import heapify, heappush, heappop # built-in list. heapify(L) changes list in-place to min-heap in O(n), heappush(heapL, x) and heappop(heapL) in O(lgn).\\n# from heapq import nlargest, nsmallest        # nlargest(n, iter[, key]) returns k-largest-list in O(n+klgn).\\n# from itertools import count, cycle, repeat   # count(start[,step]), cycle(iter), repeat(elm[,n])\\n# from itertools import groupby                # [(k, list(g)) for k, g in groupby('000112')] returns [('0',['0','0','0']), ('1',['1','1']), ('2',['2'])]\\n# from itertools import starmap                # starmap(pow, [[2,5], [3,2]]) returns [32, 9]\\n# from itertools import product, permutations  # product(iter, repeat=n), permutations(iter[,r])\\n# from itertools import combinations, combinations_with_replacement\\nfrom itertools import accumulate             # accumulate(iter[, f])\\n# from operator import itemgetter              # itemgetter(1), itemgetter('key')\\n# from fractions import gcd                    # for Python 3.4 (previous contest @AtCoder)\\n\\n\\n\\ndef main():\\n    mod = 1000000007                # 10^9+7\\n    inf = float('inf')              # sys.float_info.max = 1.79...e+308\\n    # inf = 2 ** 64 - 1             # (for fast JIT compile in PyPy) 1.84...e+19\\n    sys.setrecursionlimit(10**6)    # 1000 -> 1000000\\n    def input(): return sys.stdin.readline().rstrip()\\n    def ii():    return int(input())\\n    def mi():    return map(int, input().split())\\n    def mi_0():  return map(lambda x: int(x)-1, input().split())\\n    def lmi():   return list(map(int, input().split()))\\n    def lmi_0(): return list(map(lambda x: int(x)-1, input().split()))\\n    def li():    return list(input())\\n    \\n    n, w = mi()\\n    L = [lmi() for _ in range(n)]\\n    w1 = L[0][0]\\n    if n * (w1 + 3) <= w:\\n        print(sum(map(lambda x: x[1], L)))\\n    elif n * w <= 10**6:\\n        # \u666e\u901a\u306e dp \u6226\u7565\\n        dp = [0 for _ in range(w+1)]\\n        for i in range(n):\\n            weight, value = L[i]\\n            for j in range(w, 0, -1):\\n                if j - weight >= 0:\\n                    dp[j] = max(dp[j], dp[j - weight] + value)\\n        print(dp[w])\\n    else:\\n        group_by_weight = [[] for _ in range(4)]\\n        for weight, value in L:\\n            group_by_weight[weight - w1].append(value)\\n        w1_0 = sorted(group_by_weight[0], reverse=True)\\n        w1_1 = sorted(group_by_weight[1], reverse=True)\\n        w1_2 = sorted(group_by_weight[2], reverse=True)\\n        w1_3 = sorted(group_by_weight[3], reverse=True)\\n        accum_0, accum_1, accum_2, accum_3 = map(lambda x: [0] + list(accumulate(x)), [w1_0, w1_1, w1_2, w1_3])\\n        ans = -1\\n        for i in range(len(w1_0)+1):\\n            for j in range(len(w1_1)+1):\\n                for k in range(len(w1_2)+1):\\n                    for l in range(len(w1_3)+1):\\n                        if (i+j+k+l)*w1 + j + 2*k + 3*l <= w:\\n                            ans = max(ans, accum_0[i] + accum_1[j] + accum_2[k] + accum_3[l])\\n        print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "512", "substitutes": {}}
{"code": "import heapq\\n\\nn, c = map(int, input().split())\\nd = [list(map(int, input().split())) for _ in range(c)]\\ngrid = [list(map(int, input().split())) for _ in range(n)]\\n\\nMAXN = 500\\nMAXC = 30\\n\\ns = [[0 for _ in range(MAXC)] for _ in range(3)]\\nfor i in range(3):\\n    for co in range(c):\\n        for x in range(n):\\n            for y in range(n):\\n                if (x+y)%3 == i:\\n                    s[i][co] += d[grid[x][y]-1][co]\\n\\nans = 10**10\\nfor c0 in range(c):\\n    for c1 in range(c):\\n        if c0 == c1:\\n            continue\\n        for c2 in range(c):\\n            if c0 == c2 or c1 == c2:\\n                continue\\n            ans = min(ans, s[0][c0]+s[1][c1]+s[2][c2])\\nprint(ans)\\n", "target": "516", "substitutes": {"n": ["z", "f", " name", "yn", " nan", "m", "C", "a", "l", "t", "nt", "N", "ns", "r", "v", " fn", "na", " net", " p", "an", "sn", "q", "g", "h", "b", "cn", "nu", " number", " nu", "num", " sn", "p", " out", "j", " ns", " ng", "ne", "e", "nc", "o", " gn", "ic", "u", " err", " N", " num"], "c": ["f", "mc", "m", "C", "cr", "a", "cs", "l", "t", "chain", "cf", "con", "ci", "cin", "r", "k", "rc", "ch", "v", "h", "q", "b", "lc", "g", "cn", "cc", "ct", "cl", "ce", "cont", "p", "cur", "col", "cp", "ec", "com", "e", "dc", "uc", "cache", "nc", "o", "ic", "u", "ac", "cu", "tc", "cm", "count"], "d": ["f", "done", "m", "df", "l", "t", "dos", "dict", "dd", "dim", "r", "dt", "db", "sd", "dq", "h", "b", "nd", "g", "D", "di", "daily", "pd", "de", "du", "do", "da", "p", "ds", "cd", "dh", "dp", "ad", "dr", "data", "dat", "fd"], "_": ["pt", " int", "my", "____", "py", "t", "un", "__", "place", "g", "ct", "val", "ml", " the", "int", "T", "___"], "grid": ["map", "f", "gm", "sid", "range", "node", "draw", "chain", "hold", "domain", "free", "dd", "gi", "db", "v", "tile", "dq", "lay", "group", "g", "gc", "ge", "id", "num", "du", "da", "ds", "local", "client", "net", "wire", "np", "rid", "cache", "graph", "ad", "Grid", "reg", "set", "lat", "cm", "data", "box"], "MAXN": ["MAXR", "maxN", " MAXR", "maxC", "MaximumC", "MaximumR", " MAXS", "maxR", "maxS", "MaximumS", "MaximumN", "MAXS"], "MAXC": ["maxN", "maxC", "MaximumT", "maxS", "maxK", " MAXG", "MAXS", "MaxT", "MaxN", "maxG", "MaximumC", "maxT", "MaximumN", "MAXG", "MAXT", "MaximumS", "MAXK", "MaximumG", "MaxK", "MaxC", " MAXS", "MaximumK"], "s": ["z", "stats", "sts", "ps", "sv", "ws", "ls", "lines", "names", "m", "a", "rates", "cs", "rs", "t", "se", "gs", "os", "ms", "ins", "ns", "r", "states", "v", "strings", "sd", "hs", "h", "q", "gets", "eds", "g", "S", "csv", "ids", "vs", "p", "ss", "ds", "parts", "sets", "sa", "sb", "results", "so", "ses", "o", "bs", "w", "sq", "als", "ts", "qs", "an", "js"], "i": ["z", "f", "io", "ini", "ico", "m", "l", "ix", "ti", "ip", "ci", "v", "ij", "ki", "phi", "g", "id", "di", "p", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "mi", "iu", "im"], "co": ["io", "cod", "ico", "CO", "ice", "xy", "ck", "con", "key", "ci", "coe", "ca", "ho", "fo", "lo", "cc", "code", "ind", "ce", "go", "cos", "aco", "do", "can", "col", "com", "ro", "xc", "ox", "bo", "po", "Co", "pc", "nc", "o", "cu", "li", "ic", "no", "cor", "ko", "cm"], "x": ["z", "yx", "ico", "m", "xp", "X", "a", "xd", "xy", "l", "ix", "xs", "row", "ax", "ci", "xx", "r", "v", "dx", "wx", "xt", "mx", "ex", "p", "rx", "j", "xc", "lon", " xx", "e", "ox", "ai", "xe", "xi", "o", "ic", "w", "px", "on", "xf", "zx", "tx"], "y": ["z", "Y", "sys", "ym", "ey", "yl", "yn", "ay", "m", "my", "xy", "py", "t", "iy", "by", "oy", "sy", "yy", "ty", "yt", "ch", "v", "gy", "ys", "b", "g", "ies", "yi", "ny", "p", "j", "ry", "e", "ox", "ye", "axy", "o", "cy", "on", "hy", "ly"], "ans": ["ens", "rors", "ings", "lines", "ls", "names", "oss", "cs", "pan", "cons", "rs", "gs", "xs", "amps", "ms", "anas", "os", "aus", "ns", "ons", "ins", "ann", " Ans", "arts", "ents", "ians", "angs", "iban", "rans", "ands", "eds", "ations", "yes", " means", "san", "ids", "ANS", "nas", "uns", "offs", "anes", "nan", "ates", "ats", "us", "ros", "vals", "ions", "an", "ks", "ants"], "c0": ["unc1", " c4", "ac0", "ac4", "co3", "lc3", "c02", "p0", "lc02", "ac8", "unc4", "c4", "p02", "ac5", "co1", "p1", "c8", "c5", "co8", "c3", "unc0", "p00", " c5", "lc1", " c00", "co0", "unc5", "co00", "unc2", " c3", "ac2", "unc8", "lc0", "lc00", "ac1", "co4", "c00", "lc4", " c02"], "c1": ["unc1", "ac0", "co3", "p2", "p0", "C1", "ac8", "co1", "p3", "p1", "c8", "co8", "c3", "unc0", "p9", "C2", "C0", "co0", "c9", "ct3", "unc3", " c3", "ac2", "ct0", "unc8", "C3", "ct2", "co9", "ac1", "ac3", "C9", "co2", "ct1"], "c2": ["pTwo", "unc1", "c22", "C02", "ac4", "lcTwo", "ac02", "p2", "c02", "C1", "unc4", "C5", "c4", "ac5", "co1", " c22", "co22", "p1", "c5", "c8", "C8", "co8", "cTwo", "p4", " c5", "C2", "lc1", "unc02", "unc2", "lc2", "ac2", " c8", "C22", "ac1", "C4", "co02", "CTwo", "co4", "co2", "lc4", " c02"]}}
{"code": "def si(p):\\n  if p == 0:\\n    return \"-\"\\n  else:\\n    return \"+\"\\nN = int(input())\\nX = [N // 1000, (N % 1000) // 100, (N % 100) // 10, N % 10]\\nf = 0\\nfor i in range(2):\\n  for j in range(2):\\n    for k in range(2):\\n      x = X[0] + (2 * i - 1) * X[1] + (2 * j - 1) * X[2] + (2 * k - 1) * X[3]\\n      if x == 7:\\n        print(str(X[0]) + si(i) + str(X[1]) + si(j) + str(X[2]) + si(k) + str(X[3]) + \"=7\")\\n        f = 1\\n        break\\n    if f == 1:\\n      break\\n  if f == 1:\\n    break", "target": "504", "substitutes": {"p": ["z", "ps", "m", "a", "par", "y", "t", "pp", "ip", "jp", "tp", "r", "v", "sp", "pa", "c", "post", "b", "fp", "g", "q", "h", "d", "pi", "cp", "ping", "lp", "P", "e", "it", "np", "pc", "n", "pid", "pro"], "N": ["Y", "Name", "Number", "Num", "K", "NE", "H", "C", "F", "Sn", "Ni", "W", "G", "NG", "NB", "CNN", "M", "NV", "NR", "MN", "SIZE", "NL", "NP", "NA", "Size", "S", "Ne", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "NOTE", "P", "Q", "UN", "NPR", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NUM", "ON", "NO", "NN", "Network", "IN", "NH"], "X": ["Y", "Time", "TY", "UX", "K", "String", "Data", "Rex", "CE", "IP", "H", "C", "XL", "AC", "F", "Long", "MX", "R", "Format", "OP", "Check", "W", "XY", "M", "Tx", "OX", "U", "Int", "XXX", "RE", "S", "DX", "ICE", "Work", "EX", "D", "Cross", "Array", "Control", "AT", "L", "Right", "Content", "PP", "Chain", "P", "Q", "ZX", "XM", "List", "T", "XP", "J", "XX", "Z", "V", "Take", "I", "Form", "Upload", "Ex", "Patch", "HTTP", "Test", "IX", "TX", "JSON", "WH", "Context", "XT"], "f": ["z", "fl", "out", "fa", "m", "ter", "fs", "fe", "F", "df", "a", "l", "y", "t", "cf", "af", "fr", "r", "v", "c", "index", "h", "b", "fp", "rf", "g", "ef", "loop", "force", "d", "end", "bf", "e", "fen", "sf", "fac", "tf", "fc", "float", "n", "o", "print", "xf", "fm", "fd"], "i": ["io", "ini", "zi", "\u00ed", "ir", "a", "l", "y", "ix", "ti", "info", "s", "ip", "ci", "ij", "phi", "ie", "ind", "id", "di", "ik", "bi", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "u", "I", "ia", "mi", "iu", "im"], "j": ["z", "obj", "jl", "pr", "ja", "y", "jp", "ji", "div", "v", "json", "ij", "job", "q", "b", "h", "je", "g", "jac", "d", "bi", "oj", "kj", "jas", "jj", "jump", "aj", "J", "n", "o", "uj", "dj", "bj", "js", "jc"], "k": ["z", "kg", "K", "kat", "m", "kr", "kind", "kt", "kh", "ka", "t", "ck", "kl", "ikk", "key", "kk", "kan", "ke", "kid", "v", "kar", "c", "mk", "ki", "q", "h", "g", "ak", "ijk", "wk", "ik", "kok", "km", "kj", "ek", "kw", "tk", "n", "o", "u", "sk", "ku"], "x": ["z", "xes", "xp", "xy", "l", "y", "t", "ix", "xs", "xa", "ax", "xx", "v", "xml", "xt", "dx", "wx", "c", "true", "h", "mx", "ex", "fx", "rx", "act", "xc", "e", "ox", "xe", "xi", "lex", "n", "w", "px", "xf", "xd", "tx"]}}
{"code": "n=int(input())\\nl=[]\\nwhile n!=1 and n!=0:\\n  l.append(abs(n)%2)\\n  if n>0:\\n    n=-n\\n    n//=(-2)\\n    n=-n\\n  elif n<0:\\n    n=abs(n)\\n    n//=(-2)\\n    n=-n\\nl.append(n)\\nl=l[::-1]\\nans=str()\\nfor i in l:\\n  ans+=str(i)\\nprint(ans)\\n", "target": "24", "substitutes": {"n": ["name", "note", "un", "v", "h", "q", "g", "num", "no", "nl", "x", "norm", "new", "z", "f", "nn", "m", "reset", "conn", "t", "number", "len", "nm", "na", "long", "cn", "nu", "nb", "dn", "net", "gn", "nan", "nc", "o", "nt", "nr", "fn", "r", "en", "k", "c", "b", "size", "p", "j", "none", "e", "nor", "al", "w", "on", "body", "out", "y", "all", "s", "N", "ns", "mn", "ln", "sn", "ng", "nd", "any", "d", "null", "ne", "int", "np", "u", "an"], "l": ["fl", "lit", "ol", "ls", "el", "isl", "le", "m", "jl", "all", "t", "lv", "lis", "kl", "s", "r", "vl", "il", "lb", "la", "v", "ul", "sl", "c", "lt", "ln", "h", "b", "lc", "g", "tl", "lo", "acl", "cl", "ml", "d", "dl", "p", "L", "lp", "pl", "e", "hl", "lr", "al", "o", "log", "li", "nl", "list", "rl", "lists", "ll"], "ans": ["ens", "rors", "ls", "names", "ean", "pan", "rs", "amps", "xs", "iann", "s", "ms", "anas", "os", "aus", "ns", "ons", "ars", "ann", "ins", " Ans", "strings", "aos", " sans", "arts", "ents", "es", "angs", "rans", "ands", "san", "ANS", "ols", "ds", "leans", "anes", "nan", "ams", "ads", "ats", "nl", "ros", "an", "ks", "ants", "lan"], "i": ["ei", "ini", "ri", "zi", "\u00ed", "m", "a", "ite", "ti", "ip", "ci", "gi", "v", "ij", "hi", "oi", "ki", "q", "yi", "ind", "di", "bi", "vi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "iri", "ic", "li", "I", "u", "x", "mi", "iu"]}}
{"code": "s = list(input())\\nn = len(s)\\nans = 10**19\\n# \u9023\u7d9a\u3059\u308b\uff13\u3064\u306e\u6570\u5b57\u3068\u6bd4\u8f03\u3059\u308b\u3002\\nfor i in range(1, n-1):\\n    a = int(\"\".join([s[i-1], s[i], s[i+1]]))\\n    ans = min(abs(753-a), ans)\\nprint(ans)\\n", "target": "122", "substitutes": {"s": ["f", "sys", "sts", "ps", "ls", "m", "a", "l", "rs", "t", "cs", "gs", "os", "i", "ns", "v", "strings", "sl", "c", "es", "h", "q", "b", "S", "ids", "p", "ss", "ds", "e", "sa", "its", "w", "sq", "ts", "qs", "js"], "n": ["z", "nn", "names", "m", "l", "t", "N", "ns", "mn", "k", "na", "c", "sn", "q", "nd", "h", "b", "cn", "nu", "nb", "d", "p", "j", "np", "o", "nl", "ll"], "ans": [" ma", "ens", "ps", "mas", "m", "cs", "t", "au", "ms", "pp", "ns", "mn", "es", " fs", "eps", "ds", "pi", " ns", "e", "o", " mt", "ts", " err", "an", "ows"]}}
{"code": "N = int(input())\\nL = list(\"abcdefghijklmnopqrstuvwxyz\")\\na = 1\\nwhile N > 26**a:\\n    N = N - 26**a\\n    a += 1\\n \\npre = []\\nfor i in reversed(range(1,a)):\\n    r = (N-1) // 26**i\\n    pre.append(r)\\n    N = int(N%(26**i))\\n \\nans = ''\\nfor i in pre:\\n    ans += L[i]\\nprint(ans+L[N-1])", "target": "639", "substitutes": {"N": ["Number", "Y", "Num", "K", "H", "C", "NF", "AN", "F", "R", "Ni", "W", "CNN", "NB", "NI", "NG", "EN", "M", "NV", "NR", "CN", "A", "MN", "SIZE", "NP", "NA", "Size", "S", "ND", "NT", "D", "SN", "NS", "FN", "Node", "NM", "TN", "No", "P", "Q", "UN", "T", "GN", "J", "Z", "n", "V", "I", "B", "Ns", "NC", "NO", "NN", "BN", "NH"], "L": ["DL", "H", "XL", "LR", "R", "LE", "l", "SL", "OL", "LS", "ML", "LM", "LT", "M", "LG", "LU", "LA", "EL", "NL", "ln", "PL", "S", "LIN", "CL", "P", "LC", "List", "LI", "FL", "I", "dL", "LP", "BL", "LD", "LL", "LIST", "TL"], "a": ["z", "ita", "ba", "apa", "m", "ta", "ae", "l", "sta", "to", "au", "ga", "xa", "A", "ca", "k", "at", "la", "pa", "na", "c", "wa", "ea", "index", "an", "b", "ak", "area", "va", "p", "alpha", "ica", "j", "pi", "oa", "e", "sa", "ai", "aa", "span", "ac", "n", "o", "ma", "sha", "abs", "ia", "w", "ab", "eas", "aaa", "u", "ana", "am", "ast", "count"], "pre": ["ps", "pr", "cond", "par", "pan", "PRE", "ci", "res", "pret", "before", "gre", "ble", "ori", "post", "master", "ree", "prep", "mp", "temp", "tree", "Pre", "re", "prev", "inter", "next", "p", "initial", "pi", "mediate", "are", "get", "current", "ra", "pri", "cache", "n", "first", "pres", "li", "rem", "rel", "list", "prefix", "prime", "prem", "pro", "after", "init"], "i": ["f", "z", "ini", "ei", "ri", "zi", "m", "cli", "ir", "R", "iii", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "k", "res", "ji", "ati", "gi", "v", "ij", "hi", "oi", "index", "ki", "phi", "b", "yi", "id", "re", "di", "ik", "d", " ii", "p", "bi", "multi", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "u", "ia", "x", "iti", "mi", "iu", "im", "ski"], "r": ["rate", "rb", "ri", "pr", "rr", "m", "adr", "rg", "sr", "kr", "cr", "ir", "range", "R", "l", "rs", "nr", "fr", "rc", "res", "q", "g", "re", "er", "p", "br", "ro", "lr", "rid", "rd", "vr", "mr", "n", "dr", "rar", "ar", "rt"], "ans": ["ens", "rors", "cas", "oes", "ls", "mas", "AN", "oss", "ran", "cs", "rs", "gs", "amps", "s", "ms", "anas", "ars", "aus", "ns", "ons", "ins", "ann", "os", " Ans", "aps", "ends", "aos", "arts", "es", "ents", "ians", "rans", "posts", "ies", "ANS", "can", "ds", "uns", "offs", "anes", "ads", "ras", "ats", "ros", "vals", "an", "ks", "ants"]}}
{"code": "W,H,x,y,r=map(int,input().split())\\nprint(\"Yes\"*(r<=x<=W-r)*(r<=y<=H-r)or\"No\")\\n", "target": "563", "substitutes": {"W": ["Y", "C", "X", "Width", "WD", "F", "R", "WW", "G", "N", "M", "OW", "Weight", "NW", "Size", "TH", "S", "SW", "D", "WC", "L", "DW", "FW", "RW", "Win", "VW", "P", "HTML", "CW", "T", "V", "w", "BW", "Window", "We", "WH", "Wh", " w"], "H": ["Y", "He", "CH", "X", "HT", "R", "G", "HI", "M", "N", "HB", "HQ", "HL", "High", "HH", "h", "TH", "MH", "GH", "His", "HC", " h", "HA", "HE", "DH", "Height", "Eh", "HTML", "T", "V", "B", "RH", "It", "Wh", "AH", "NH"], "x": ["z", "xp", "X", "a", "xy", "ix", "xs", "i", "xx", "v", "xt", "dx", "wx", "h", "ex", "width", "fx", "d", "rx", "xc", "ox", "int", "xi", "n", "o", "w", "left", "px", "im", "xd", "tx"], "y": ["Y", "z", "ym", "ey", "yl", "ay", "yout", "my", "xy", "py", "yer", "iy", "by", "oy", "yy", "ty", "yt", "v", "gy", "h", "b", "ys", "ies", "ny", "j", "ry", "ox", "ya", "uy", "ye", "axy", "n", "asy", "cy", "yr", "sky", "ly"], "r": ["rate", "rb", "m", "rg", "sr", "a", "R", "red", "rs", "t", "nr", "result", "rect", "fr", "i", "rc", "err", "res", "v", "c", "like", "h", "q", "b", "dq", "g", "pair", "rad", "re", "er", "d", "p", "alpha", "j", "ro", "e", "it", "lr", "rank", "n", "rd", "mr", "w", "rel", "rt"]}}
{"code": "n, a, b = list(map(int, input().split()))\\nans = 0\\n\\n\\ndef dsum(n):\\n    wa = 0\\n    while n > 0:\\n        wa += n % 10\\n        n //= 10\\n    return wa\\n\\n\\nfor i in range(1, n + 1):\\n    res = i\\n    if a <= dsum(i) <= b:\\n        ans += i\\n\\nprint(ans)\\n", "target": "704", "substitutes": {"n": ["f", "nn", "nw", "nia", "names", "m", "ni", "l", "y", "t", "nt", "s", "N", "len", "ns", "mn", "nm", "adj", "v", "na", "c", "long", "sn", "an", "g", "cn", "nu", "nb", "tn", "num", "d", "size", "p", "j", "ne", "net", "np", "nan", "nc", "o", "w", "nl", "x", "norm", "new"], "a": ["ba", "apa", "ae", "ta", "ha", "sta", "au", "A", "ca", "at", "la", "na", "ea", "an", "va", "p", "alpha", "da", "ao", "oa", "ai", "sa", "ata", "aa", "al", "ac", "o", "ma", "w", " A", "ab", "aaa", "ar", "ana", "am"], "b": ["f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "bp", "to", "by", "cb", "r", "fb", "lb", "v", "db", "c", "g", "nb", "d", "p", "bi", "bf", "e", "sb", "beta", "bis", "o", "bs", "B", "ab", "bb", "base", "eb"], "ans": ["ens", "wan", "ws", "ls", "ran", "cs", "rs", "cons", "pan", "amps", "xs", "au", "s", "ms", "ins", "reads", "aus", "ns", "mn", "ons", "ann", "outs", "anas", "xa", "aos", "co", "arts", "es", "na", "rans", "wn", " means", "ANS", "can", "ds", "oa", "lets", "uns", "ai", "ats", "us", "ros", "x", "os", "an", "ks", "ants"], "wa": ["z", "wait", "ws", "wm", "Ta", "ta", "ja", "pan", "ha", "ww", "wat", "wd", "xa", "ho", "pa", "aw", "na", "wx", "Wa", "wb", "we", "hal", "wy", "wr", "da", "WA", "ao", "oa", "awa", "ai", "sa", "wt", "wo", "wid", "wave", "ma", "w", "wal", " Wa", "wi"], "i": ["z", "f", "io", "ini", "ei", "ri", "zi", "m", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "r", "v", "ij", "c", "hi", "ki", "q", "phi", "yi", "di", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "ii", "xi", "si", "ic", "o", "u", "li", "I", "ia", "x", "mi", "iu", "im"], "res": ["ps", "ei", "ri", "zi", "ires", "ir", "inv", "rs", "cons", "ios", "ris", "ms", "ins", "os", "ons", "r", "aps", "es", "hi", "resh", "q", "re", "eps", "pi", "results", "ra", "si", "Res"]}}
{"code": "from collections import deque\\ns = deque(list(input()))\\nt = deque(list(input()))\\n\\nfor i in range(len(s)+1):\\n  if s == t:\\n    print(\"Yes\")\\n    exit()\\n  p = s.pop()\\n  s.appendleft(p)\\nprint(\"No\")", "target": "721", "substitutes": {"s": ["ps", "f", "sts", "z", "sv", "out", "ls", "m", "fs", "a", "cs", "rs", "l", "gs", "xs", "y", "ms", "ars", "os", "ns", "ins", "sp", "hs", "c", "es", "gins", "h", "ys", "ogs", "b", "g", "q", "S", "ains", "ss", "ds", "ols", "sb", "sa", "its", "ims", "al", "abs", "n", "items", "w", "sq", "set", "ats", "st", "ts", "qs", "igs", "js"], "t": ["f", "out", "pt", "tm", "m", "ta", "tt", "tp", "dt", "ty", "k", "v", "gt", "ot", "q", "b", "ct", "tree", "test", "tz", "te", "j", "et", "mt", "e", "it", "wt", "T", "vt", "txt", "tr", "n", "o", "w", "ts", "st"], "i": ["f", "iq", "y", "ix", "ti", "by", "r", "k", " j", "q", "ind", "id", " ii", "j", "e", "it", "n", "I", "iter", "x", "im"], "p": ["op", "ps", "pe", "f", "pard", "pt", "pr", "m", "rep", "pkg", "pp", "jp", "tp", "press", "sp", "perm", "pa", "vp", "pm", "q", "mp", "pre", "cp", "pl", "lp", "ping", "P", "np", "pc", "n", "part", "pid", "pro"]}}
{"code": "part = set()\\nS = input()\\nK = int(input())\\n\\npart.add(S)\\nfor i in range(len(S)):\\n  for j in range(i,i+K):\\n    part.add(S[i:j+1])\\n    \\npart = list(part)\\npart.sort()\\nprint(part[K-1])\\n", "target": "246", "substitutes": {"part": ["made", "found", "only", "parent", "back", "band", "joined", "start", "group", "complete", "work", "version", "power", "parts", "trans", "first", "list", "PART", "party", "top", "python", "one", "se", "t", "result", "bound", "split", "self", "zone", "P", "main", "art", "table", "n", "star", "print", "space", "prefix", "year", "bar", " Part", "sample", "sp", "user", "Part", "p", "alpha", "total", "worker", "valid", "primary", "partial", "diff", "out", "tmp", "pod", "pad", "s", "step", "point", "key", "pair", "local", "word", "block", "half", "var", "component", "error", "base", "session"], "S": ["SER", "BS", "Single", "SI", "Si", "H", "C", "SS", "F", "R", "SL", "SK", "G", "SAN", "SB", "SM", "s", "N", "M", "SOURCE", "A", "Sing", "SEC", "ST", "Input", "DS", "Source", "D", "SAM", "NS", "SU", "L", "SP", "P", "SH", "T", "SF", "SE", "V", "I", "B", "CS", "GS", "SA", "Set"], "K": ["HK", "KA", "KN", "FK", "PK", "H", "C", "KT", "Ch", "F", "KK", "SK", "W", "N", "M", "k", "KB", "KR", "KI", "Mask", "KS", "VK", "KING", "D", "UK", "Key", "L", "P", "Q", "KE", "T", "J", "KEY", "Z", "V", "I", "B", "Kind", "KC", "MK", "CP"], "i": ["ini", "zi", "a", "l", "y", "ix", "ti", "ip", "ci", "k", "ji", "gi", "v", "ij", "hi", "ki", "yi", "ie", "di", "ik", "bi", "pi", "fi", "qi", "ai", "it", "ii", "xi", "si", "ic", "li", "I", "u", "ia", "x", "ui", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "ja", "y", "t", "pos", "jp", "k", "ji", "un", "v", "json", "ij", "job", "q", "b", "h", "g", "bi", "oj", "jo", "kj", "jj", "jump", "aj", "J", "n", "uj", "dj", "li", "bj", "js", "jc"]}}
{"code": "from collections import deque\\nn=int(input())\\narr=[[] for _ in range(n)]\\nfor i in range(n-1):\\n    a,b=map(int,input().split())\\n    arr[a-1].append([b-1,i])\\n    arr[b-1].append([a-1,i])\\n\\nque=deque([0])\\nans=[0]*(n-1)\\npar=[0]*n\\npar[0]=-1\\nwhile que:\\n    x=que.popleft()\\n    p=par[x]\\n    color=1\\n    for tup in arr[x]:\\n        if p==color:\\n            color+=1\\n        if ans[tup[1]]==0:\\n            ans[tup[1]]=color\\n            par[tup[0]]=color\\n            color+=1\\n            que.append(tup[0])\\nprint(max(ans))\\nprint(*ans,sep='\\n')", "target": "157", "substitutes": {"n": [" ne", "f", "nn", "nia", "names", "m", "l", "pan", "nt", "t", "name", "nr", " narr", "N", "len", "ns", "mn", "nm", "r", "v", "ll", "na", " ni", "c", "sn", " expl", "nd", "g", "an", "cn", "nu", "nb", "num", "d", "nv", "nat", "j", "network", " ns", "pi", " ng", "ne", "net", "gn", "np", "nut", "nan", "nc", " nm", " gn", " N", "o", "no", "nl", "norm", " num", " na"], "arr": ["map", "img", "ag", "aug", "obj", "array", "Ar", "att", "bl", "rep", "rs", "nt", "all", "dict", "au", " narr", "fr", "ax", "stack", "ang", "r", "err", "gr", "res", "attr", "aus", "adj", "unch", "arm", "az", "arc", "mp", "air", "rad", "val", "Array", "plan", "app", "pl", "args", "hist", "mat", "plot", "np", "align", "aa", "conf", "ad", "abs", "ell", "ray", "ab", "coll", "aaa", "list", "arg", "ar", "bar", "inst", "ear", "ack"], "_": [" int", "all", "ix", " j", "__", " __", "ct", "val", " l", " all"], "i": ["f", "ini", "zi", "m", "l", "y", "t", "ix", "ti", "ip", "ci", "gi", " j", "v", "ij", "c", "index", "h", "q", "ind", "id", "di", "d", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "iri", "xi", "o", "ic", "li", "u", "I", "ia", "si", "mi", "iu", "im"], "a": ["ba", "m", "ae", "\u00e1", "ta", "sta", "au", "ga", "ax", "A", "r", "ca", "la", "at", "pa", "c", "ea", "an", "ak", "ami", "va", "app", "oa", "e", "sa", "ai", "aa", "aj", "al", "ac", "ma", "ia", "ab", "ar", "ach", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "bp", "bg", "bh", "r", "fb", "cb", "v", "db", "c", "h", "g", "nb", "d", "bi", "br", "j", "e", "sb", "gb", "bis", "o", "bs", "u", "B", "ab", "bb", "bar", "base", "eb"], "que": ["pe", "ued", "ve", "ques", "ues", "vel", "ope", "qa", "ae", "bl", "ux", "rs", "eeee", "cycle", "au", "con", "stack", "cb", "compl", "en", "ue", "vre", "buffer", "fif", "la", "xt", "exc", "co", "dq", "q", "loe", "imp", "we", "wy", "queue", "oe", "de", "cur", "cho", "ru", "dule", "cle", "buf", "ro", "com", "xe", "sel", "Queue", "bar", "bo", "whe", "ette", "ob", "aque", "quit", "obs", "buff", "list", "qq", "qs", "rl", "Que", "ack", "qu"], "ans": ["ps", "ens", "ls", "names", "ares", "oss", "ran", "anc", "cs", "rs", "pan", "amps", "xs", "gs", "s", "ars", "anas", "ins", "os", "ns", "ons", "aus", "ann", "res", "ms", "aps", "outs", "syn", "arts", "es", "ians", "angs", "arms", "rans", "ations", "vs", "ANS", "ax", "can", "ols", "trans", "uns", "offs", "ams", "ras", "obs", "ats", "orders", "ros", "vals", "ts", "ar", "an", "ants", "scan"], "par": ["pol", "ps", "pard", "per", "pr", "params", "pu", "cat", "prop", "rep", "se", "parent", "pos", "row", "dict", "Par", "ars", "pp", "pas", "gr", "sp", "pa", "mk", "pal", "prep", "mp", "pre", "warn", "comp", "plan", "pat", "col", "pi", "pl", "trans", "parse", "var", "pri", "ma", "cop", "rec", "rel", "arg", "dr", "ar", "bar", "car", "pro", "param"], "x": ["z", "pe", "xes", "xp", "X", "ux", "xy", "y", "t", "ix", "xs", "xa", "ax", "xx", "k", "at", "v", "xt", "dx", "wx", "c", "index", "h", "q", "ex", "rx", "j", "xc", "e", "ox", "xe", "xi", "lex", "px", "xf", "xd", "tx", "inx"], "p": ["ps", "pe", "f", "per", "ph", "pr", "m", "rep", "l", "y", "t", "pos", "pp", "ip", "jp", "tp", "k", "v", "perm", "pa", "c", "h", "pat", "lp", "cp", "ping", "pl", "P", "it", "np", "pc", "o", "u", "pn", "pro"], "color": ["max", "pr", "cat", "Color", "label", "cycle", "value", "status", "co", "h", "black", "light", "g", "cp", "white", "hot", "coll", "colored", "category", "style", "normal", "message", "m", "comment", "prop", "draw", "number", "row", "ok", "ch", "index", "scale", "cos", "COLOR", "stroke", "o", "grow", "green", "prefix", "update", " colour", "resource", "background", "red", "l", "colour", "theme", "r", "k", "c", "state", "pal", "term", "option", "size", "alpha", "zero", "cor", "topic", "type", "pixel", "hex", "blue", "y", "fill", "our", "err", "pair", "olor", "char", "cho", "col", "po", "reason"], "tup": ["Time", "catups", "catime", "tsump", "treeup", "montUP", " tUP", "catUP", "top", "touch", "catup", "ttump", "ttime", " tups", "tsupid", "dettrip", "Tump", "attup", "Tups", "tUP", "attups", "tupid", "Tup", "treeUP", "montup", "atime", " tupid", "treetrip", "tump", "tsop", "attump", "atups", "montime", "treeouch", "atUP", " time", " tump", "ttUP", "attime", "ttupid", "ttrip", "tups", "ttup", "time", " touch", "tsup", "detUP", " top", "detouch", " ttrip", "montupid", "detup", "atup", "ttop"]}}
{"code": "n=int(input())\\n*a,=map(int,input().split())\\nmod=10**9+7\\ncol=[0]*(n+1)\\ncol[0]=3\\n\\nans=1\\n\\nfor i in range(n):\\n    ans*=col[a[i]]\\n    col[a[i]]-=1\\n    col[a[i]+1]+=1\\n    ans%=mod\\n\\nprint(ans%mod)\\n", "target": "560", "substitutes": {"n": ["z", "nn", "nia", "m", "l", "nt", "t", "number", "s", "N", "len", "ns", "mn", "k", "r", "v", "na", "c", "sn", "q", "b", "an", "g", "cn", "nu", "nb", "num", "d", "p", "j", "network", "ne", "np", "nc", "o", "no", "x"], "a": ["am", "ae", "att", "ta", "y", "all", "sta", "au", "s", "info", "ga", "ax", "ca", "A", "ch", "at", "la", "v", "c", "ea", "index", "b", "aux", "area", "go", "p", "da", "alpha", "ao", "j", "oa", "pi", "parts", "sa", "ai", "aa", "up", "ac", "ma", "w", "ia", "ab", "aaa", "x", "an"], "mod": ["sub", "add", "min", "max", "sum", "m", "sign", "ran", "ms", "step", "module", "r", "ver", "div", "un", "term", "scale", " Mod", "sim", "id", "num", "d", "mult", "p", "man", "round", "sem", "com", "zero", "ro", "Mod", "mode", "od", "MOD", "time", "log", "dec", "mag", "reg", "mm", "prime", "im", "cm", "mods", "fun", "pro"], "col": ["pol", "pro", "ol", "obj", "win", "pt", "pr", "mon", "cat", "cond", "l", "nt", "ix", "cycle", "pos", "row", "rot", "con", "rol", "res", "ch", "COL", "co", "cal", "c", "ot", "mot", "ct", "val", "ref", "cl", "cmd", "num", "config", "pool", "cur", "cho", "count", "ox", "client", "column", "icol", "Col", "table", "loc", "cell", "tab", "cor", "coll", "x", "year", "foot", "ll"], "ans": ["ens", "anon", "pac", "ls", "sum", "mas", "vers", "AN", "ones", "oss", "cus", "ean", "anc", "cs", "rs", "pan", "ran", "amps", "iann", "s", "os", "ms", "ins", "ars", "ns", "ons", "anas", "ann", " orphans", " Ans", "aus", "aps", "news", "aos", "acs", "ents", "es", "ians", "rans", "grades", "posts", " means", "outs", "terms", "ANS", "can", "lets", "uns", "nas", "offs", "anes", "uls", "ras", "ats", "us", "an", "ks", "ants", "ows"], "i": ["f", "io", "ini", "ri", "zi", "m", "uri", "chain", "y", "this", "ix", "ti", "info", "s", "ip", "ci", "ji", "v", "gi", "ij", "c", "hi", "index", "ki", "q", "b", "phi", "ami", "ind", "id", "asi", "di", "p", "bi", "exp", "j", "pi", "ai", "it", "ii", "batch", "si", "xi", "ic", "I", "li", "iri", "iter", "set", "me", "x", "ui", "mi", "list", "im", "ski"]}}
{"code": "while True:\\n\ttry:\\n\t\tlist = [int(item) for item in raw_input().split()]\\n\t\tlist.sort()\\n\t\tif list[0] ** 2 + list[1] ** 2 == list[2] ** 2 :\\n\t\t\tprint 'YES'\\n\t\telse :\\n\t\t\tprint 'NO'\\n\texcept EOFError:\\n\t\tbreak\\n\texcept IndexError:\\n\t\tcontinue", "target": "199", "substitutes": {"list": ["map", "type", "str", "out", "array", "range", "l", "chain", "t", "all", "old", "dict", "result", "format", "i", "lower", "single", "ver", "listed", "v", "filter", "lt", "long", "pair", "see", "we", "tree", "ist", "test", "config", "cont", "dl", "join", "null", "bool", "alist", "int", "List", "block", "batch", "table", "n", "sequence", "li", "log", "iter", "print", "set", "LIST", "lat", "part", "data", "lists", "new", "st"], "item": ["str", "Item", "member", "cat", "name", "row", "case", "ip", "key", "value", "url", "tag", "match", "index", "ex", "bit", "val", "page", "ind", "id", "num", "char", "image", "word", "ox", "it", "int", "block", "event", "inner", "up", "hit", "items", "instance", "cell", "element", "iter", "x", "unit", "article", "entry", "text"]}}
{"code": "a=input()\\nb=set(a[:-1]);c=set(a[1:])\\n\\nif len(b)==1 or len(c)==1:\\n  print('Yes')\\nelse:\\n  print('No')\\n", "target": "600", "substitutes": {"a": ["f", "ba", "ap", "am", "ta", "ae", "att", "l", "sta", "af", "au", "ga", "i", "A", "ca", "la", "at", "input", "aw", "area", "ce", "go", "p", "da", "alpha", "app", "oa", "act", "parts", "sa", "ata", "aa", "al", "n", "ac", "abs", "ma", "ia", "ab", "aaa", "ar", "ach", "an", "auto"], "b": ["rb", "ba", "ib", "mb", "bl", "be", "bc", "back", "bh", "cb", "fb", "db", "ble", "bound", "bas", "nb", "d", "bi", "j", "bf", "sb", "reb", "gb", "bo", "bis", "ob", "bs", "B", "ab", "bb", "base", "eb"], "c": ["f", "sc", "mc", "m", "C", "cr", "cs", "l", "t", "bc", "cf", "con", "rc", "cin", "cb", "ca", "v", "co", "lc", "gc", "g", "ct", "cc", "ce", "d", "cos", "cp", "ec", "e", "dc", "fc", "n", "tc", "ac", "cu", "o", "vc", "cm"]}}
{"code": "m, d = map(int,input().split())\\nn, e = map(int,input().split())\\nprint(int(n >= 2 and e == 1))", "target": "571", "substitutes": {"m": ["mu", "f", "z", "mc", "l", "y", "t", "M", "i", "mn", "r", "k", "v", "c", "h", "q", "b", "g", "dm", "p", "j", "o", "mm", "me", "x", "mi", "cm"], "d": ["f", "df", "l", "dd", "r", "dt", "v", "c", "dq", "q", "D", "dm", "di", "de", "pd", "do", "dn", "da", "p", "dir", "j", "ds", "dc", "dh", "dp", "dr", "dat"], "n": ["z", "f", "nn", "ni", "l", "y", "nr", "s", "N", "i", "ns", "r", "nm", "mn", "k", "v", "na", "c", "q", "b", "g", "nu", "nb", "num", "p", "dn", "j", "ne", "nc", "o", "nl", "x"], "e": ["f", "pe", "el", "le", "ae", "be", "l", "se", "t", "ed", "s", "i", "r", "en", "es", "c", "h", "b", "g", "ge", "E", "eu", "er", "oe", "de", "te", "p", "ec", "et", "ne", "xe", "ee", "o", "u", "x"]}}
{"code": "a = int(input())\\nif a == 1:\\n  print(\"Hello World\")\\nelse:\\n  b = int(input())\\n  c = int(input())\\n  print(int(b + c))", "target": "691", "substitutes": {"a": ["f", "ba", "abc", "apa", "ta", "ae", "t", "ga", "au", "i", "A", "ca", "at", "ea", "area", "ava", "va", "p", "alpha", "da", "ao", "ada", "oa", "e", "sa", "ai", "ata", "aa", "aj", "n", "ma", "ab", "eas", "aaa", "ar", "ach", "an", "aff"], "b": ["rb", "ba", "ib", "mb", "be", "bc", "bp", "back", "bh", "fb", "cb", "db", "ble", "bas", "g", "wb", "nb", "bi", "br", "j", "bf", "sb", "bo", "gb", "bis", "ob", "bs", "B", "ab", "bb", "eb"], "c": ["z", "f", "abc", "sc", "C", "cr", "cs", "bc", "cf", "con", "ci", "ca", "cb", "ch", "v", "co", "lc", "g", "cc", "unc", "ct", "ce", "d", "cos", "cp", "ec", "e", "cd", "dc", "uc", "fc", "ac", "tc", "n", "cu", "u", "cm"]}}
{"code": "import sys\\n\\na, b, c, d = [int(input()) for _ in range(4)]\\n\\nprint(min(a,b) + min(c,d))", "target": "553", "substitutes": {"a": ["f", "ba", "ap", "am", "ae", "l", "sta", "ax", "r", "A", "ca", "la", "at", "ea", "aux", "area", "alpha", "app", "oa", "\u00e4", "act", "e", "sa", "aa", "aj", "al", "ac", "ma", "w", "ab", "aaa", "ar", "an", "aff"], "b": ["sub", "erb", "ba", "rb", "ib", "obj", "mb", "be", "l", "bc", "by", "cb", "fb", "ch", "db", "g", "nb", "bi", "br", "abb", "j", "sb", "gb", "bo", "bis", "ob", "bs", "B", "ab", " B", "bb", "eb"], "c": ["sc", "C", "cr", "cs", "bc", "cf", "con", "etc", "rc", "cb", "ca", "ch", "ctrl", "co", "cv", "lc", "ct", "cc", "ce", "cos", "cur", "cp", "ec", "e", "cd", "dc", "uc", "cache", "fc", "ac", "tc", "cy", "cu", "cm"], "d": ["z", "f", "des", "m", "df", "red", "l", "dd", "r", "dt", "v", "db", "sd", "dx", "g", "D", "di", "de", "pd", "du", "do", "da", "ds", "td", "e", "dc", "rd", "n", "ad", "w", "dra", "dr", "digit"], "_": [" un", "ix", " m", " j", "__", " __", " p", "g", " t", "ex", "val", "j", "ox", " the", "___", " f", " g"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nL,R,d= map(int, readline().split())\\n\\nprint(R//d-(L-1)//d)", "target": "156", "substitutes": {"read": ["pe", "rand", "READ", " READ", "str", "reader", "load", "seek", "through", "find", "se", " reading", "hold", "give", "readable", "reads", "r", "open", "write", "data", "replace", " write", "reading", "pair", " get", " find", "Read", "send", "ead", "get", "run", "int", "then", "each", "rid", "rd", " reads", "first", " peek", "print", "reverse", " Read", " readable", "text", "take"], "readline": [" readjust", "readerline", " readnl", " readfile", "READfile", "Readl", "readerlin", "loadline", " readlin", "Readline", "printl", "READline", "readLine", "readbuffer", "readstring", "readlin", "runlin", "Readnl", "READLine", " readl", "runline", "READjust", "Readstring", "readerbuffer", "readnl", "printline", "runbuffer", " readLine", "loadjust", "printnl", "loadfile", "runfile", "readerfile", "printstring", "readl", "loadLine", " readbuffer", " readstring", "readjust", "readfile"], "L": ["Y", "DL", "H", "C", "X", "LR", "SL", "l", "LE", "G", "W", "LS", "LM", "N", "M", "LT", "Len", "NL", "U", "S", "E", "LIN", "D", "RL", " l", "P", "Q", "LC", "T", "LI", "J", "Z", "V", "I", "dL", "B", "LP", "LL"], "R": ["RR", "Y", "AR", "RG", "Red", "H", "C", "RA", "X", "Dr", "F", "Rs", "G", "N", "M", "NR", "r", "A", "RS", "RO", "RE", "S", "D", "RL", "Mr", "P", "DR", " r", "RF", "T", "J", "V", "RM", "I", "B", "Res"], "d": ["z", "f", "done", "ld", "m", "l", "t", "s", "dim", "i", "dd", "r", "dt", "v", "db", "sd", "length", "c", "dq", "b", "D", "di", "pd", "p", "do", "da", "dl", "dn", "j", "ds", "e", "dom", "dh", "dp", "n", "rd", "o", "w", "u", "dL", "dr", "dat", "fd"]}}
{"code": "import sys\\n\\nclass UFT: #Union-find tree class\\n    def __init__(self, N): \\n        self.tree = [int(i) for i in range(N)] \\n        self.rank = [0 for i in range(N)]\\n        self.size = [1] * N\\n\\n    def find(self, a):\\n        if self.tree[a] == a: return a\\n        else:\\n            self.tree[a] = self.find(self.tree[a])\\n            return self.tree[a]\\n\\n    def findSize(self, a):\\n        self.tree[a] = self.find(a)\\n        self.size[a] = self.size[self.tree[a]]\\n        return self.size[a]\\n\\n    def unite(self, a, b):\\n        a = self.find(a)\\n        b = self.find(b)\\n        asize = self.size[a]\\n        bsize = self.size[b]\\n        if a == b: return\\n        if self.rank[a] < self.rank[b]: \\n            self.tree[a] = b\\n            self.size[b] += asize\\n        else:\\n            self.tree[b] = a\\n            self.size[a] += bsize\\n            if self.rank[a] == self.rank[b]: self.rank[a] += 1\\n\\n\\n\\ndef solve():\\n    input = sys.stdin.readline\\n    N, M = map(int, input().split())\\n    B = [[int(a) - 1 for a in input().split()] for _ in range(M)]\\n    parent = UFT(N)\\n\\n    Ans = [N * (N - 1) // 2] * M\\n    for i in reversed(range(1, M)):\\n        x, y = B[i]\\n        if parent.find(x) != parent.find(y):\\n            xsize = parent.findSize(x)\\n            ysize = parent.findSize(y)\\n            parent.unite(x, y)\\n            Ans[i - 1] = Ans[i] - (xsize * ysize)\\n        else:\\n            Ans[i-1] = Ans[i]\\n    print(\"\\n\".join(map(str, Ans)))\\n\\n    return 0\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "287", "substitutes": {}}
{"code": "def main():\\n    n = int(input())\\n    s = input()\\n    t = input()\\n\\n    for i in range(n):\\n        if s[i:] == t[:n - i]:\\n            print(n + i)\\n            break\\n    else:\\n        print(2 * n)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "693", "substitutes": {"n": ["z", "f", "nn", "nia", "m", "a", "l", "y", "nt", "number", "name", "N", "len", "ns", "r", "en", "k", "un", "v", "na", "c", "ln", "sn", "q", "an", "h", "g", "ng", "cn", "nu", "nb", "num", "d", "size", "p", "j", "ne", "total", "e", "np", "nan", "nc", "o", "w", "u", "no", "nl", "x", "ll", "new"], "s": ["ps", "sts", "sv", "ws", "ls", "m", "a", "sis", "cs", "rs", "gs", "xs", "ms", "ins", "ns", "sw", "sl", "c", "es", "ers", "ys", "b", "eds", "g", "S", "changes", "p", "ains", "ss", "sa", "sb", "its", "si", "ats", "st", "ts", "qs", "js"], "t": ["f", "out", "pt", "tm", "m", "ent", "ta", "l", "y", "tt", "ty", "at", "v", "xt", "c", "ot", "b", "ct", "tree", "test", "tz", "te", "p", "j", "it", "wt", "vt", "T", "txt", "tr", "tc", "o", "ts", "rt", "st"], "i": ["z", "io", "ini", "zi", "m", "l", "y", "ix", "ti", "ip", "ci", "r", "k", "ji", "gi", "v", "ij", "hi", "oi", "ori", "index", "q", "yi", "ind", "di", "p", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "u", "iri", "iter", "x", "ui", "mi", "iu", "im"]}}
{"code": "#\u4e8b\u524d\u306b\u968e\u4e57\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f maxim\u306bn\u306e\u6700\u5927\u5024\u3092\u3044\u308c\u308b\\nmaxim = 10**6+1\\n\\nMOD = 10**9+7\\nkaijou = [1]*(maxim)\\nfor i in range(1,maxim):\\n    kaijou[i]=(kaijou[i-1]*i)%MOD\\n\\n#nCr\\ndef nCr(n,r):\\n    return ((kaijou[n]*pow(kaijou[r],MOD-2,MOD))%MOD*pow(kaijou[n-r],MOD-2,MOD))%MOD\\n\\n#nHr\\ndef nHr(n,r):\\n    return ((kaijou[n+r-1]*pow(kaijou[n],MOD-2,MOD))%MOD*pow(kaijou[r-1],MOD-2,MOD))%MOD\\n\\n\\nN = int(input())\\n\\nans = 1 if N >=3 else 0\\nfor i in range(2,(N//3)+1):\\n    tmp = nHr(N-3*i,i)\\n    ans = (ans+tmp)%MOD\\n\\nprint(ans)", "target": "235", "substitutes": {}}
{"code": "n,m=map(int,input().split())\\na=n/m\\n\\nprint(round(a,10))", "target": "317", "substitutes": {"n": ["f", "nn", "l", "y", "t", "nt", "nr", "s", "N", "i", "ns", "r", "k", "mn", "v", "na", "c", "sn", "h", "b", "q", "cn", "nu", "nb", "num", "d", "nv", "p", "j", "ne", "nc", "o", "w", "u", "x"], "m": ["mu", "f", "mc", "l", "y", "t", "all", "ms", "M", "i", "mn", "r", "nm", "v", "c", "bm", "mut", "h", "q", "b", "g", "mod", "ml", "dm", "d", "p", "mun", "man", "e", "mean", "mr", "ma", "o", "mm", "me", "x", "mi", "cm"], "a": ["f", "ba", "apa", "ta", "ae", "t", "au", "xa", "i", "A", "la", "at", "pa", "wa", "c", "b", "area", "d", "p", "alpha", "da", "ao", "oa", "act", "sa", "ai", "aa", "aj", "ac", "sha", "o", "ma", "ia", "ab", "an", "aba"]}}
{"code": "from collections import Counter, defaultdict\\nimport sys\\nsys.setrecursionlimit(10 ** 5 + 10)\\n# input = sys.stdin.readline\\nfrom math import factorial\\nimport heapq, bisect\\nimport math\\nimport itertools\\nimport queue\\nfrom collections import deque\\nfrom fractions import Fraction\\n\\n\\n\\ndef main():\\n    num = int(input())\\n    data = list(map(int, input().split()))\\n\\n    now_ind = 1\\n    break_num = 0\\n\\n    for i in range(num):\\n        if data[i] == now_ind:\\n            now_ind += 1\\n        else:\\n            break_num += 1\\n\\n    if break_num == num:\\n        print(-1)\\n    else:\\n        print(break_num)\\n\\n\\n\\nif __name__ == '__main__':\\n    main()\\n\\n", "target": "749", "substitutes": {}}
{"code": "print(str((lambda x:x**3)(int(input()))))", "target": "115", "substitutes": {}}
{"code": "MOD = 10**9+7\\nh, w = map(int, input().split())\\nS = [input() for _ in range(h)]\\nL = [[0]*w for _ in range(h)]\\nR = [[0]*w for _ in range(h)]\\nU = [[0]*w for _ in range(h)]\\nD = [[0]*w for _ in range(h)]\\nfor i in range(h):\\n  for j in range(w):\\n    if j > 0:\\n      if S[i][j-1] == \".\":\\n        L[i][j] = L[i][j-1]+1\\n      if S[i][w-j] == \".\":\\n        R[i][w-1-j] = R[i][w-j]+1\\n    if i > 0:\\n      if S[i-1][j] == \".\":\\n        U[i][j] = U[i-1][j]+1\\n      if S[h-i][j] == \".\":\\n        D[h-1-i][j] = D[h-i][j]+1\\nans = 0\\nfor i in range(h):\\n  for j in range(w):\\n    if S[i][j] == \".\":\\n      temp = L[i][j]+R[i][j]+U[i][j]+D[i][j]+1\\n      ans = max(ans, temp)\\nprint(ans)", "target": "391", "substitutes": {"MOD": ["MIN", "LOG", "X", "AN", "MT", "AV", "EXP", "CON", "M", "MAX", "SIZE", "REM", "VER", "mod", "rad", "O", "power", "TW", "TM", "Mod", "AD", "mode", "RES", "HEAD", "MS", "MAN", "MODE", "Z", "NUM"], "h": ["z", "f", "ph", "he", "H", "m", "html", " H", "kh", "hex", "rh", "hm", "l", "y", "t", "ha", "s", "hz", "pp", "bh", "r", "ch", "v", "history", "ho", "hs", "c", "hi", "q", "zh", "g", "th", "id", "hd", "go", "ih", "p", "host", "br", "pi", "ht", "oh", "hw", "hl", "it", "dh", "gh", "n", "hr", "o", "hh", "ah", "hu", "sh", "x", "his", "hp"], "w": ["z", "f", "wait", "nw", "ws", "iw", "wm", "win", "pt", "off", "m", "wh", "a", "l", "y", "t", "W", "wed", "wd", "tw", "s", "wall", "r", "sw", "v", "wa", "wx", "c", "q", "wl", "g", "wcs", "wn", "wb", "we", "wr", "work", "wk", "d", "p", "window", "rw", "hw", "word", "kw", "wt", "wid", "ew", "weight", "wo", "n", "u", "wal", "wp", "x", "wi", "width"], "S": ["BS", "SI", "Sl", "Si", "H", "C", "SS", "SL", "G", "W", "LS", "PS", "SB", "JS", "SM", "s", "SD", "N", "M", "Ser", "A", "RS", "ST", "SR", "E", "Series", "Source", "NS", "SU", "SO", "SP", "P", "ES", "Q", "SH", "T", "SA", "SF", "J", "SE", "Se", "V", "I", "B", "CS", "GS", "SC", "SSL", "Set"], "_": ["Time", "f", "let", "pt", "ful", "m", "my", "py", "ing", "t", "ver", "__", "place", "g", "val", "ml", "Mem", "p", "get", "P", "able", "___", "mm", "x"], "L": ["DL", "Sl", "H", "XL", "X", "LR", "Line", "Long", "F", "SL", "LE", "G", "W", "LS", "OL", "LM", "N", "M", "LT", "LG", "LU", "Left", "A", "HL", "NL", "EL", "PL", "LIN", "RL", "CL", "Lin", "Q", "LC", "List", "T", "J", "Z", "V", "I", "B", "LOC", "LP", "BL", "Li", "LL", "Lu", "TL"], "R": ["RR", "Y", "TR", "AR", "RA", "Rs", "RB", "G", "W", "MR", "N", "M", "A", "r", "RS", "GR", "RO", "Range", "RE", "SR", "RL", "Array", "Right", "HR", "Repl", "RT", "P", "DR", "Q", "RC", "RES", "RF", "ER", "Re", "Ren", "Result", "T", "V", "RM", "I", "B", "Res", "Rot", "BR"], "U": ["Users", "UT", "UP", "UL", "Ut", "UC", "W", "OU", "Us", "UU", "LU", "M", "A", "Union", "PU", "CU", "UR", "US", "AU", "UK", "SU", "EU", "UF", "Su", "GU", "UI", "Q", "UN", "T", "UV", "V", "UD", "I", "u", "Tu", "UE", "PUT", "MU", "Lu", "UID"], "D": ["DN", "DL", "DB", "PD", "H", "C", "X", "Do", "DF", "W", "G", "DD", "N", "M", "Del", "A", "Ds", "DEV", "DA", "DIR", "O", "DT", "Dir", "DS", "All", "d", "Def", "GO", "DOM", "P", "DR", "Q", "DM", "T", "J", "Z", "V", "I", "B", "LD", "DE", "DC", "DO", "DI"], "i": ["ini", "ei", "ri", "parent", "ci", "ji", "v", "status", "hi", "q", "di", "ih", "ai", "xi", "iri", "li", "ia", "iter", "x", "ui", "iu", "z", "io", "ish", "zi", "iq", "cli", "m", "ti", "info", "ati", "index", "ki", "phi", "ind", "bi", "exp", "vi", "qi", "n", "o", "im", "item", "uri", "iii", "ix", "ed", "\u0438", "il", "at", "ij", "oi", "b", "ie", "ik", "p", "e", "ii", "ic", "on", "multi", "out", "a", "ret", "y", "ip", "key", "gi", "ori", "ami", "id", "pi", "it", "int", "si", "I", "u", "rel", "mi", "init"], "j": ["jl", "pt", "pr", "ja", "note", "ji", "div", "opt", "v", "q", "g", "ijk", "di", "li", "x", "new", "js", "jc", "z", "jas", "obj", "one", "kh", "att", "jit", "t", "ch", "json", "ind", "er", "bi", "exp", "end", "jump", "n", "ju", "o", "dj", "boot", "item", "bj", "str", "ion", "l", "ix", "ed", "by", "fr", "yy", "r", "k", "sp", "ij", "job", "b", "next", "p", "br", "kj", "jj", "aj", "on", "out", "off", "iaz", "ret", "y", "s", "ip", "key", "adj", "jp", "err", "je", "id", "rev", "d", "oj", "col", "it", "block", "tr", "J", "si", "uj", "u", "rel"], "ans": ["ps", "ens", "ls", "ones", "AN", "cus", "ran", "cs", "amps", "xs", "iann", "s", "ms", "anas", "ins", "aus", "ns", "os", "ons", "ann", "outs", " Ans", "arts", "es", "ents", "ians", "angs", "ums", "rans", "iban", "eds", "posts", "ations", " means", "ids", "ANS", "can", "ds", "lets", "uns", "nas", "offs", "nan", "ates", "ats", "asms", "us", "ions", "an", "ks", "ants"], "temp": ["emp", "tmp", "pt", "tm", "ta", "tim", "t", "upt", "ptr", "adj", " Temp", "buffer", "condition", "tem", "Temperature", "unc", "test", "pre", "mem", "cap", "stem", "Temp", "current", "warm", "time", "txt", "template", "tc", "cum", "stop", "ts", "mi", "mint", "dat", "perature"]}}
{"code": "def main():\\n    n = int(input())\\n    alis = list(map(int, input().split()))\\n    blis = list(map(int, input().split()))\\n    ans = 0\\n\\n    for i in range(n-1, -1, -1):\\n        if blis[i] <= alis[i+1]:\\n            ans += blis[i]\\n        elif blis[i] < alis[i+1] + alis[i]:\\n            ans += blis[i]\\n            alis[i] = alis[i] - (blis[i] - alis[i+1]) \\n        elif blis[i] >= alis[i+1] + alis[i]:\\n            ans += alis[i] + alis[i+1]\\n            alis[i] = 0\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "530", "substitutes": {"n": ["nn", "nia", "m", "l", "nt", "t", "N", "ns", "mn", "r", "en", "v", "na", "c", "ln", "sn", "an", "cn", "nu", "nb", "num", "d", "nv", "j", "ne", "net", "gn", "nor", "np", "nan", "nc", "nl", "ll"], "alis": ["atis", "plays", "aus", "phis", "mares", "aos", "nis", "ippers", "isal", "bas", "olics", "ains", "lets", "its", "eas", "orts", "ts", "pins", "xs", "ris", "ms", "abus", "lands", "prints", "atts", "ums", "rots", "nuts", "isi", "enges", "mos", "als", "aints", "ali", "uts", "alls", "illas", "ls", "mas", "ews", "lis", "lys", "ists", "emis", "lems", "doms", "asons", "ales", "lins", "sels", "itus", "alist", "ics", "ims", "mails", "naires", "vals", "tis", "qs", "ps", "details", "els", "xes", "ais", "lbs", "alia", "ians", "alities", "aler", "ongs", "bees", "alien", "bps", "fits", "ats", "las", "balls", "lists", "irms"], "blis": ["selis", "ablits", "BLis", "BLi", "lbi", "Blians", "illis", "lbians", "rubatis", "bllis", "obji", "lbiss", "flits", " blIS", "lli", "Blist", "blIS", "illais", "lbis", "oblis", "illi", "obli", " bls", "bls", "flisi", "objlis", "selas", " blits", "obliss", "oblatis", "illas", "flas", "bliss", " bliss", "objis", "blatis", " bllis", "ablis", "blits", "rubIS", "llits", "blais", "blist", "illisi", "Bliss", "objiss", "ills", "selais", "blians", "selisi", "BLiss", "flais", "llist", "rubis", "blas", " bli", "abli", "fli", "BList", "llians", "lliss", "blisi", "bli", "abls", "Bli", "Blis", "obllis", " blist", " blatis", "flist", "llis", "flis", "oblIS", "illits", "rubi"], "ans": ["ens", "wan", "lines", "aned", "ran", "ean", "cons", "amps", "xs", "anned", "iann", "ows", "ins", "anas", "ms", "aus", "ns", "ars", "ons", "ann", "outs", " Ans", "aos", "arts", "ents", "ums", "rans", "ands", "eds", "posts", "ops", " means", "san", "vs", "ANS", "uns", "helps", "offs", "anes", "ams", "ads", "mails", "ras", "ates", "ats", "ados", "ros", "us", "vals", "aints", "os", "an", "ks", "ants", "olds", "jas", "lan"], "i": ["ini", "ei", "ri", "ci", "ji", "v", "status", "hi", "q", "g", "di", "ai", "xi", "iri", "li", "iter", "set", "list", "x", "ui", "iu", "f", "io", "zi", "m", "cli", "ir", "this", "ti", "info", "json", "index", "ki", "phi", "ind", "bi", "exp", "isi", "me", "im", "uri", "ios", "ix", "\u0438", "at", "ij", "oi", "b", "ie", "p", "j", "fi", "ii", "ic", "multi", "ski", "chain", "y", "s", "ip", "key", "gi", "ori", "ami", "yi", "lo", "remote", "eu", "id", "pi", "it", "si", "I", "mi"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport sys\\nfrom sys import stdin\\n\\nstrN = stdin.readline().rstrip()\\nN = int(strN)\\nstrLen = len(strN)\\n\\nodd_count1 = 0\\nfor i in range(1, strLen + 1):\\n    if i % 2 == 0:\\n        if i == strLen:\\n            print(odd_count1)\\n            sys.exit(0)\\n    else:\\n        if i == strLen:\\n            t1 = '1'\\n            t1 += '0' * (i - 1)\\n            t3 = N - int(t1) + 1\\n            odd_count1 += t3\\n            print(odd_count1)\\n            sys.exit(0)\\n        else:\\n            t1 = '1' + '0' * (i - 1)\\n            t2 = '9' * i\\n            odd_count1 += (int(t2) - int(t1)+1)\\n", "target": "469", "substitutes": {}}
{"code": "#!/usr/bin/env python\\n# coding: utf-8\\n\\n# In[10]:\\n\\n\\nN, A, B = map(int, input().split())\\n\\n\\n# In[17]:\\n\\n\\nif (B-A)%2 == 0:\\n    ans = (B-A)//2\\nelse:\\n    ans = min(A-1, N-B) + 1 + (B-A-1)//2\\nprint(ans)\\n\\n\\n# In[ ]:\\n\\n\\n\\n\\n", "target": "594", "substitutes": {}}
{"code": "import math\\n\\ndef kock(n,p1x,p1y,p2x,p2y):\\n    if(n==0):\\n        return\\n\\n    sx = (2*p1x+p2x)/3.0\\n    sy = (2*p1y+p2y)/3.0\\n    tx = (p1x+2*p2x)/3.0\\n    ty = (p1y+2*p2y)/3.0\\n\\n    ux = (tx-sx)*math.cos(math.radians(60)) - (ty-sy)*math.sin(math.radians(60)) + sx\\n    uy = (tx-sx)*math.sin(math.radians(60)) + (ty-sy)*math.cos(math.radians(60)) + sy\\n\\n    kock(n-1,p1x,p1y,sx,sy)\\n    print(sx,sy)\\n    kock(n-1,sx,sy,ux,uy)\\n    print(ux,uy)\\n    kock(n-1,ux,uy,tx,ty)\\n    print(tx,ty)\\n    kock(n-1,tx,ty,p2x,p2y)\\n\\n\\nn = int(input())\\nprint(0,0)\\nkock(n,0,0,100,0)\\nprint(100,0)\\n", "target": "280", "substitutes": {"n": ["z", "f", "nn", "nw", "names", "m", "a", "l", "all", "nt", "t", "name", "note", "nr", "s", "N", "i", "fn", "ns", "nm", "r", "k", "mn", "v", "na", "c", "ren", "index", "ng", "sn", "ln", "h", "q", "g", "cn", "nu", "nb", "tn", "rn", "num", "d", "p", "gain", "dn", "j", "ne", "nor", "gn", "np", "nan", "nc", "o", "w", "no", "nl", "non", "x", "pn"], "p1x": ["p0i", " p0ex", "p0ex", "p2xc", "pg1xc", "p25ex", "p3xc", "p2fx", "p25x", " p0xml", "p0y", " p0fx", "pg001ex", "pg1y", "p1i", " p1xml", " p1ex", " p1i", "p001y", "pg1x", "p1fx", "p25y", "p3ex", "p2ex", "p3x", "p3y", "p001i", "p1xml", "p001xc", "p01y", "p01fx", " p1fx", "pg1ex", "p01x", "p25xml", "p0x", "pg001xc", "p2i", "p001ex", " p0y", "p1ex", "p1xc", "p01ex", "pg001x", "p0xml", "p2xml", "p001x", " p0x", "p0fx", " p0i", "pg001y"], "p1y": ["p512Y", "jp1y", "jp1x", "jp101yy", "p12wy", " p0ym", "p1yy", "poneye", "p512yer", "p1wy", "jp101x", "p0y", "ip1ny", "jp101y", "p1yer", "p15yy", "jp1ny", "p512y", "p1yd", "ip12ye", "p1Y", "p101wy", "p1ty", "p25yd", "poney", "p1ym", "p2Y", "ip12wy", "p101yy", "poneny", " p1ty", "p25ty", " p1yer", "p101ye", " p1yd", "ip1y", "p2yy", "jp1yy", "p25y", "ponewy", "p25ym", "p15x", "p0yd", "ip1ye", "p0ym", " p0yd", "p30ty", "jp101ny", "p2yer", "ip12y", "p15ny", "ip1wy", " p1ym", "p1ye", "p12ny", "ip12ny", "p30y", "p101ny", "p30yd", "p2ny", "p15y", " p0ty", " p1Y", "p1ny", "p512x", "p12y", "p101y", " p0y", "p101x", "p0ty", "p12ye", "p30ym"], "p2x": ["p102x", " p02ex", "p3xs", "p02xs", " p4xi", "p102y", "p2xs", " p02xs", "p02x", "p14tx", "p1xi", "p022lex", "P2y", "P1tx", " p4y", " p02x", "P1y", "p1tx", "p4x", "P2x", " p4rx", "p4xi", "p2xi", "p2lex", "P2ce", " p4lex", "ptwox", "p8rx", "P1x", "p102ce", "p3ex", "p2ex", "p4y", "p02ex", "ptwoxs", "p14y", "p4lex", "p2tx", " p2xy", "p8x", "ptwoex", " p2ex", "p4rx", "p1xy", "p3x", "p4ex", "P1ce", " p4x", "p022x", "p022xy", " p2rx", "p14x", "p8xi", " p4ex", " p4xy", "p022y", "P2tx", "p2xy", "p14ce", "p102tx", " p2xi", "p8ex", "p2rx", "p1rx", "p1lex", "p1ce", "p2ce", "p4xy", "p1ex", " p2lex", " p2xs"], "p2y": [" p2b", "p1ys", "p3b", " p4ty", "p6y", " p4yy", "p13xy", "p2b", "p3xy", " p3x", "p20y", "p42y", "p2xy", "p2ry", "p2ty", "p42yy", "p1b", "p42x", "p4ry", " p3y", "p20ty", " p2sys", "p2yy", "p13x", "p3sys", "p6ty", "p1xy", "p4xy", " p3b", "p2ys", "p6ry", "p4y", "p13y", "p13ys", "p42xy", "p3y", "p3x", "p20ry", " p3sys", " p3xy", " p2ys", "p42b", "p4ty", " p3ys", " p4x", "p1yy", " p2ry", "p4yy", " p2xy", " p2ty", " p4y", " p4ry", "p4x", " p2yy", "p2sys", "p42sys", " p4xy", "p1sys", "p3ys"], "sx": ["sfx", " sfx", "sz", " sxf", " sxe", "ssxf", "jsxi", "hsx", "psx", "six", "rsx", "tsfx", "nsfx", "sxf", "tsz", "iny", "nsox", "sxd", " stx", "psxd", "csfx", "sxx", "nsx", "lsxf", "hsy", "lsy", "hsxx", "tsy", "ssz", "ssxe", "rsy", " sX", "nsy", "ssx", " sxi", "inx", "psX", "lsxe", " sox", "ssy", "psxx", "stx", "csx", "sxe", "tsx", "jsy", " sxx", "sox", "rsxx", "csz", "rsX", " sxd", "lsx", "rsxd", "sX", "lsox", "inxd", "jsz", "ssix", "inxx", "sxi", "cstx", "tsix", "tstx", "jsx", "lsfx", "jsix", "hsxd", "ssfx", " sz"], "sy": ["SY", "sys", "sing", "ish", "style", "ey", "icy", "sv", "ties", "ay", "she", "sync", "ony", "iet", "my", "y", "py", "sm", "sie", "info", "isy", "sty", "yy", "ery", "syn", "sym", "Ty", "gy", "ys", "ny", "fy", "tsy", "Sy", "ss", " shy", "ry", "sa", "sf", "pse", "ky", "psy", "dy", "then", "ury", "si", "yr", "cy", "asy", "sq", "sin", "mag", "shell", "sche", "south", "sat", "sh", "ety", "sky", "ser", "sol", "ly"], "tx": ["tmp", "pt", "tel", "tm", "text", "ta", "kt", "hex", "tim", "t", "tt", "ix", "nt", "xs", "ax", "tp", "dt", "at", "Tx", "xt", "dx", "wx", "lt", "mx", "ex", "tl", "ct", "fx", "ctx", "tz", "tool", "hea", "rx", "act", "mt", "trans", "ox", "tf", "tk", "tr", "txt", "lex", "tc", "px", "mac", "tab", "lat", "mm", "pty", "tty", "x", "TX", "ts", "prefix", "rt"], "ty": ["type", "TY", "sys", "tu", "tor", "ties", "pt", "tm", "rys", "ta", "kt", "my", "y", "tt", "sty", "oy", "yy", "yt", "sym", "Ty", "phy", "gy", "ys", "tem", "ct", "wy", "ny", "tie", "typ", "fy", "tz", "tif", "ht", " shy", "ry", "ky", "psy", "dy", "txt", "ury", "si", "tc", "cy", "vy", "tri", "lat", "mm", "pty", "tty", "x", "ety", "rt", "arty"], "ux": ["uid", "mu", "sys", "io", "UX", "iw", "lus", "eus", "ud", "cus", "ulse", "sex", "ck", "au", "xx", "ua", "rc", "aus", "ue", "hua", "wx", "lu", "gy", "uxe", "hel", "mx", "ex", "fx", "nox", "eu", "aux", "ctx", "du", "lux", "uan", "rx", "uci", "usr", "ox", "uf", "bo", "uc", "up", "lex", "uu", "cu", "u", "mac", "us", "mm", "x", "ui", "linux", "ru"], "uy": ["tu", "aily", "yo", "icy", "iq", "asia", "uk", "ud", "yout", "yu", "y", "hog", "hub", "uz", "sty", "oy", "yy", "ue", "yt", "bull", "\u00fa", "lu", "gy", "uly", "uxe", "wy", "ny", "eu", "nox", "du", "dylib", "ht", "ou", "uf", "ky", "dy", "bo", "dyl", "ury", "zu", "uu", "uv", "ju", "cu", "u", "vy", "uj", "hh", "cy", "hon", "ui", "yang", "ru"]}}
{"code": "N, K, X, Y = map(int, open(0).read().split())\\nprint(X*min(N, K)+Y*max(N-K, 0))\\n", "target": "71", "substitutes": {"N": ["ALL", "NE", "C", "AN", "F", "R", "Ni", "CNN", "G", "NB", "NG", "NI", "M", "NR", "A", "NP", "NA", "ANY", "S", "ND", "O", "NT", "D", "SN", "NS", "L", "NM", "TN", "UN", "You", "T", "MAN", "GN", "J", "n", "I", "We", "NC", "Ns", "NO", "NN", "NH"], "K": ["HK", "KA", "FK", "PK", "H", "C", "KK", "R", "SK", "G", "M", "A", "k", "KR", "IK", "KI", "Mask", "KS", "S", "VK", "NK", "KING", "D", "UK", "L", "DK", "P", "Q", "KE", "T", "J", "KEY", "Z", "V", "I", "KC", "MK", "AK"], "X": ["UX", "CE", "H", "C", "SS", "Width", "XL", "MX", "F", "IGHT", "XY", "M", "FX", "A", "OX", "ANY", "XXX", "DX", "ICE", "EX", "Right", "ZX", "T", "XP", "J", "XX", "Z", "V", "I", "IX", "x", "TX", "Screen", "XT"], "Y": ["TY", "AY", "ET", "Your", "HY", "C", "R", "HT", "EY", "y", "G", "XY", "M", "E", "Py", "YA", "YD", "IO", "L", "YS", "Year", "Q", "You", "NY", "T", "GREEN", "J", "Z", "YC", "V", "FY", "I", "B", "UE", "BY", "GY", "YY", "MY"]}}
{"code": "# -*- coding: utf-8 -*-\\nN = int(input())\\ng = N // 2\\nk = ( N + 1 ) // 2\\nif N % 2 == 0:\\n    print(g)\\nelse:\\n    print(k)", "target": "748", "substitutes": {}}
{"code": "# abc103_b.py\\n# https://atcoder.jp/contests/abc103/tasks/abc103_b\\n\\n# B - String Rotation /\\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec / \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\\n# \u914d\u70b9 : 200\u70b9\\n\\n# \u554f\u984c\u6587\\n# \u82f1\u5c0f\u6587\u5b57\u304b\u3089\u306a\u308b\u6587\u5b57\u5217 S, T\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\\n# S\u3092\u56de\u8ee2\u3055\u305b\u3066 T\u306b\u4e00\u81f4\u3055\u305b\u3089\u308c\u308b\u304b\u5224\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n# \u3059\u306a\u308f\u3061\u3001\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u4efb\u610f\u306e\u56de\u6570\u7e70\u308a\u8fd4\u3057\u3066 S\u3092 T\u306b\u4e00\u81f4\u3055\u305b\u3089\u308c\u308b\u304b\u5224\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\\n# \u64cd\u4f5c: S=S1S2...S|S|\u306e\u3068\u304d\u3001S \u3092 S|S|S1S2...S|S|\u22121\u306b\u5909\u66f4\u3059\u308b\\n# \u3053\u3053\u3067\u3001|X|\u306f\u6587\u5b57\u5217 X\u306e\u9577\u3055\u3092\u8868\u3057\u307e\u3059\u3002\\n\\n# \u5236\u7d04\\n#     2\u2264|S|\u2264100\\n#     |S|=|T|S, T\u306f\u82f1\u5c0f\u6587\u5b57\u304b\u3089\u306a\u308b\\n\\n# \u5165\u529b\\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\\n# S\\n# T\\n\\n# \u51fa\u529b\\n# S\u3092\u56de\u8ee2\u3055\u305b\u3066 T\u306b\u4e00\u81f4\u3055\u305b\u3089\u308c\u308b\u5834\u5408\u306f Yes\u3001\u4e00\u81f4\u3055\u305b\u3089\u308c\u306a\u3044\u5834\u5408\u306f No \u3092\u51fa\u529b\u305b\u3088\u3002\\n\\n# \u5165\u529b\u4f8b 1\\n# kyoto\\n# tokyo\\n\\n# \u51fa\u529b\u4f8b 1\\n# Yes\\n#     1\u56de\u76ee\u306e\u64cd\u4f5c\u3067 kyoto \u304c okyot \u306b\u306a\u308a\u307e\u3059\\n#     2\u56de\u76ee\u306e\u64cd\u4f5c\u3067 okyot \u304c tokyo \u306b\u306a\u308a\u307e\u3059\\n\\n# \u5165\u529b\u4f8b 2\\n# abc\\n# arc\\n\\n# \u51fa\u529b\u4f8b 2\\n# No\\n\\n# \u4f55\u5ea6\u64cd\u4f5c\u3092\u884c\u3063\u3066\u3082 abc \u3068 arc \u3092\u4e00\u81f4\u3055\u305b\u3089\u308c\u307e\u305b\u3093\u3002\\n\\n# \u5165\u529b\u4f8b 3\\n# aaaaaaaaaaaaaaab\\n# aaaaaaaaaaaaaaab\\n\\n# \u51fa\u529b\u4f8b 3\\n# Yes\\n\\n\\ndef calculation(lines):\\n    la = lines[0]\\n    lb = lines[1]\\n    flag = False\\n    for _ in range(len(la)):\\n        la = la[1:] + la[:1]\\n        if la == lb:\\n            return ['Yes']\\n    return ['No']\\n\\n\\n# \u5f15\u6570\u3092\u53d6\u5f97\\ndef get_input_lines(lines_count):\\n    lines = list()\\n    for _ in range(lines_count):\\n        lines.append(input())\\n    return lines\\n\\n\\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\\ndef get_testdata(pattern):\\n    if pattern == 1:\\n        lines_input = ['kyoto', 'tokyo']\\n        lines_export = ['Yes']\\n    if pattern == 2:\\n        lines_input = ['abc', 'arc']\\n        lines_export = ['No']\\n    if pattern == 3:\\n        lines_input = ['aaaaaaaaaaaaaaab', 'aaaaaaaaaaaaaaab']\\n        lines_export = ['Yes']\\n    return lines_input, lines_export\\n\\n\\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\\ndef get_mode():\\n    import sys\\n    args = sys.argv\\n    if len(args) == 1:\\n        mode = 0\\n    else:\\n        mode = int(args[1])\\n    return mode\\n\\n\\n# \u4e3b\u51e6\u7406\\ndef main():\\n    mode = get_mode()\\n    if mode == 0:\\n        lines_input = get_input_lines(2)\\n    else:\\n        lines_input, lines_export = get_testdata(mode)\\n\\n    lines_result = calculation(lines_input)\\n\\n    for line_result in lines_result:\\n        print(line_result)\\n\\n    # if mode > 0:\\n    #     print(f'lines_input=[{lines_input}]')\\n    #     print(f'lines_export=[{lines_export}]')\\n    #     print(f'lines_result=[{lines_result}]')\\n    #     if lines_result == lines_export:\\n    #         print('OK')\\n    #     else:\\n    #         print('NG')\\n\\n\\n# \u8d77\u52d5\u51e6\u7406\\nif __name__ == '__main__':\\n    main()\\n", "target": "721", "substitutes": {}}
{"code": "# \u3067\u3064oO(YOU PLAY WITH THE CARDS YOU'RE DEALT..)\\nimport sys\\ndef main(N, A):\\n    idx = [0] * N\\n    D = [[-1] * (N) for _ in range(N)]\\n    for j in range(N):\\n        D[j][0] = 0\\n    while True:\\n        f = True\\n        for i in range(N):\\n            if idx[i] >= N - 1: continue\\n            m = A[i][idx[i]]\\n            if A[m][idx[m]] == i:\\n                d = max(D[i][idx[i]], D[m][idx[m]])\\n                idx[i] += 1\\n                idx[m] += 1\\n                D[i][idx[i]] = d + 1\\n                D[m][idx[m]] = d + 1\\n                f = False\\n        if f: break\\n    ans = -1\\n    for i in range(N):\\n        ans = max(ans, D[i][N - 1])\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    input = sys.stdin.readline\\n    N = int(input())\\n    A = [list(map(lambda x:int(x) - 1, input().split())) for _ in range(N)]\\n    main(N, A)\\n", "target": "782", "substitutes": {}}
{"code": "import math\\na,b,x=map(int,input().split())\\nc=b-(x/(a*a))\\nk=math.sqrt(c**2+(a*a/4))\\nif x<=a*a*b/2:\\n  o=(x*2/b)/a\\n  k=math.sqrt(o**2+b*b)\\n  print(math.degrees(math.acos(o/k)))\\nelse:\\n  print(math.degrees(math.acos(a/(2*k))))", "target": "619", "substitutes": {"a": ["z", "f", "ba", "m", "am", "ae", "ta", "l", "y", "t", "all", "au", "s", "xa", "i", "ax", "ca", "A", "r", "la", "v", "at", "ea", "h", "g", "val", "area", "num", "d", "p", "alpha", "ao", "j", "pi", "oa", "e", "sa", "ai", "aa", "al", "ac", "n", "ma", "u", " A", "w", "ia", "ab", "aaa", "ar", "an"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "to", "s", "i", "r", "fb", "ca", "v", "h", "g", "nb", "d", "p", "bi", "j", "e", "n", "bs", "u", "w", "B", "ab", "bb", "base"], "x": ["z", "f", "xp", "m", "X", "xy", "l", "y", "t", "ix", "xs", "xa", "i", "xx", "ax", "r", "v", "xt", "wx", "g", "ex", "d", "p", "rx", "xc", "e", "ox", "xe", "xi", "n", "ic", "u", "xf", "tx"], "c": ["z", "f", "mc", "m", "C", "cr", "cs", "l", "t", "bc", "cf", "ci", "r", "cb", "ch", "rc", "ca", "v", "co", "h", "lc", "g", "cc", "ct", "unc", "d", "e", "cd", "dc", "fc", "ac", "n", "ic", "cu", "u", "tc", "cm"], "k": ["z", "dk", "K", "mc", "m", "kr", "kind", "kh", "ka", "y", "ck", "kl", "ikk", "i", "ok", "kk", "sch", "ke", "ch", "kan", "mk", "h", "q", "ki", "g", "ak", "ijk", "wk", "ik", "p", "alpha", "km", "kj", "kw", "tk", "n", "u", "sk", "ko", "ku", "ks", "yk"], "o": ["op", "f", "io", "vo", "ta", "y", "t", "ow", "to", "os", "i", "ok", "oid", "uo", "co", "oi", "h", "fo", "ot", "O", "oe", "oj", "ao", "oa", "ro", "oh", "om", "mo", "e", "ox", "bo", "po", "\u00f3", "ob", "oo", "u", "n", "no", "ko"]}}
{"code": "# import numpy as np\\n\\nA_init = 500\\nB_init = 100\\nC_init = 50\\n\\nA_n = int(input())\\nB_n = int(input())\\nC_n = int(input())\\n\\nX = int(input())\\n\\ncnt = 0\\nfor a in range(A_n+1):\\n    if A_init * a <= X:\\n        for b in range(B_n+1):\\n            if (A_init * a + B_init * b) <= X:\\n                for c in range(C_n+1):\\n                    if (A_init * a + B_init * b + C_init * c) == X: cnt += 1\\n            else:\\n                break\\n    else:\\n        break\\n# print(np.count_nonzero([k+[i for i in All_list] == X for k in All_list]))\\nprint(cnt)", "target": "439", "substitutes": {}}
{"code": "import sys\\n\\ndef LS2(): \\n    return list(sys.stdin.readline().rstrip())  #\u7a7a\u767d\u306a\u3057\\n\\nn = LS2()\\n\\nfor i in range(3):\\n    if n[i] == '1':\\n        n[i] = '9'\\n    else:\\n        n[i] = '1'\\n\\nprint(''.join(n))", "target": "370", "substitutes": {}}
{"code": "import sys\\n\\n\\ndef main():\\n    n = int(sys.stdin.readline())\\n\\n    if n < 105:\\n        print(0)\\n        exit()\\n\\n    dp = [0] * 201\\n    ans = 0\\n\\n    for i in range(1, n + 1):\\n        for j in range(105, n + 1):\\n            if j % i == 0:\\n                dp[j] += 1\\n\\n    for i in range(105, n + 1, 2):\\n        if dp[i] >= 8:\\n            ans += 1\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "288", "substitutes": {"n": ["nn", "nw", "m", "l", "all", "nt", "t", "number", "name", "nr", "s", "N", "len", "ns", "mn", "nm", "v", "na", "c", "long", "ln", "sn", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "network", "ne", "net", "nor", "np", "nan", "nc", "o", "w", "no", "nl", "norm", "comm"], "dp": ["dk", "ps", "deb", "dds", "adr", "bsp", "df", "bp", "pb", "gp", "dd", "pp", "xa", "jp", "tp", "dt", "db", "pa", "vp", "dq", "fp", "dm", "di", "pd", "d", "dl", "p", "dep", "da", "dn", "ds", "lp", "cp", "gd", "td", "dial", "dc", "DP", "dh", "arp", "bps", "dj", "osp", "dr", "wp", "xd", "hp"], "ans": ["ens", "cas", "ls", "mas", "a", "rs", "amps", "xs", "iann", "s", "ins", "anas", "os", "aus", "ons", "ns", "outs", "ann", "ms", "aps", "aos", "arts", "ians", "ums", "eds", "posts", "vs", "ANS", "ds", "ai", "helps", "offs", "ads", "ras", "ates", "ats", "us", "ros", "x", "ts", "anks", "an", "ks", "ants", "jas", "lan"], "i": ["f", "ib", "ini", "zi", "m", "ir", "a", "l", "y", "t", "ix", "iy", "ti", "ip", "ci", "k", "ji", "ati", "gi", "v", "ij", "h", "ki", "b", "yi", "ie", "di", "ik", "d", "p", "bi", "pi", "qi", "ai", "it", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "x", "ui", "mi", "iu", "im"], "j": ["z", "f", "obj", "ion", "jl", "m", "a", "ja", "l", "y", "t", "jp", "k", "ji", "v", "ij", "job", "q", "b", "ot", "g", "ie", "d", "p", "bi", "oj", "kj", "ai", "it", "jj", "aj", "J", "si", "o", "ii", "uj", "dj", "li", "ia", "I", "x", "bj", "js", "jc"]}}
{"code": "import itertools\\n\\ndef main():\\n    n, m, q = map(int, input().split())\\n    r = list(map(int, input().split()))\\n    dist = [[10**18 for _ in range(n)] for _ in range(n)]\\n    for i in range(m):\\n        a, b, c = map(int, input().split())\\n        dist[a-1][b-1] = c\\n        dist[b-1][a-1] = c\\n\\n    for k in range(n):\\n        for i in range(n):\\n            for j in range(n):\\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\\n\\n    ans = 10 ** 18\\n    for p in itertools.permutations(r):\\n        total = 0\\n        for i in range(q-1):\\n            total += dist[p[i]-1][p[i+1]-1]\\n        ans = min(ans, total)\\n\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "450", "substitutes": {"n": ["z", "nn", "l", "y", "t", "nt", "N", "ns", "mn", "nm", "v", "na", "h", "g", "nu", "nb", "num", "d", "pi", "ne", "nc", "o", "u", "no", "x", "an"], "m": ["f", "gm", "mc", "l", "y", "t", "ms", "M", "mn", "nm", "v", "h", "g", "mp", "dm", "d", "man", "mt", "mo", "mr", "o", "u", "mm", "mi", "an"], "q": ["z", "qt", "max", "qa", "iq", "l", "y", "t", "que", "v", "query", "dq", "h", "g", "queue", "d", "quant", "qi", "e", "Q", "o", "sq", "w", "u", "quit", "qq", "qs", "qu"], "r": ["rb", "pr", "range", "sr", "rg", "cr", "R", "l", "rs", "t", "nr", "rect", "fr", "rc", "res", "v", "h", "g", "er", "d", "br", "ro", "rd", "mr", "o", "w", "dr", "list", "rar", "ar", "rt"], "dist": ["sup", "pt", "sum", "pred", "df", "push", "dt", "dis", "tree", "ist", "dl", "deg", "delay", "hist", "fun", "hp", "det", "ld", "desc", "att", "dest", "conn", "t", "shape", "chi", "history", "phi", "distance", "master", "ind", "dn", "exp", "ds", "progress", "dj", "dr", "data", "Dist", "map", "nt", "wd", "pos", "ists", "fn", "sd", "tar", "dq", "lib", "mem", "size", "form", "dp", "rank", "loc", " distance", " Dist", "diff", "des", "range", "rep", "dict", "dd", "dim", "adj", "err", "res", "jp", "dx", "d", "mat", "np", "rel", "reg", "lat", "rt", "width"], "_": [" int", " am", "__", "place", " __", "val", "code", " the", "int", " x", "ac", "I", "___", "x"], "i": ["z", "f", "ini", "zi", "l", "y", "t", "ix", "ti", "info", "ip", "ci", "il", "ji", "at", "v", "gi", "ij", "index", "ki", "phi", "yi", "ind", "id", "di", "ik", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "o", "ic", "li", "u", "ia", "I", "iri", "x", "ui", "mi", "iu", "im", "iti"], "a": ["f", "ba", "ap", "ae", "ta", "l", "t", "au", "ga", "s", "A", "ca", "at", "la", "pa", "ea", "an", "g", "ak", "d", "br", "ao", "oa", "e", "ai", "sa", "aa", "aj", "ac", "o", "u", "ab", "aaa", "x", "ar", "ach", "am"], "b": ["z", "f", "rb", "ba", "ib", "be", "l", "y", "t", "bc", "s", "cb", "fb", "v", "db", "h", "g", "d", "bi", "br", "e", "sb", "bu", "o", "bs", "u", "B", "ab", "x", "bb", "eb"], "c": ["z", "f", "C", "cr", "l", "cs", "t", "y", "s", "cb", "cin", "ch", "rc", "ca", "v", "co", "h", "arc", "g", "lc", "cc", "ct", "ce", "d", "can", "cp", "e", "dc", "ac", "cu", "u", "cor", "x", "cm"], "k": ["z", "f", "K", "kr", "kh", "ka", "l", "t", "ck", "kl", "s", "ok", "key", "kk", "ke", "kid", "v", "ket", "mk", "ki", "g", "kn", "ak", "unk", "ijk", "ik", "km", "kj", "e", "kw", "it", "o", "u", "w", "sk", "ko", "x", "ku", "ks"], "j": ["z", "f", "obj", "jl", "ja", "l", "y", "t", "fr", "key", "ji", "jp", "v", "json", "ij", "h", "ijk", "ik", "bi", "oj", "kj", "e", "it", "jj", "jump", "aj", "J", "o", "u", "dj", "uj", "li", "on", "x", "bj", "js", "jc"], "ans": ["ens", "ps", "cas", "ls", "mas", "oss", "ran", "rs", "nt", "amps", "iann", "s", "ms", "anas", "ins", "aus", "ns", "os", "ars", "ann", "ons", "outs", "news", "aos", "arts", "ents", "iban", "ands", "said", "posts", "eds", "yes", "vs", "ANS", "anus", "eps", "oat", "ds", "nas", "offs", "anes", "nz", "nan", "ates", "ats", "nl", "ros", "an", "ks", "ants", "lan"], "p": ["ps", "pol", "f", "pr", "ap", "par", "pkg", "l", "t", "s", "pp", "ip", "jp", "tp", "at", "v", "perm", "pa", "pm", "h", "fp", "g", "pair", "ik", "cp", "pi", "lp", "ping", "e", "P", "np", "pc", "o", "u", "pid", "wp", "x", "pn", "hp"], "total": ["done", "max", "normal", " summed", "sum", "ful", "ta", "Total", "basic", "all", "full", "t", "common", "nt", "private", "shared", "result", "final", "meta", "eta", "created", "broad", "otal", "tar", "ot", "reported", "complete", "human", "yes", "stable", "num", "serial", "oat", "null", "trans", "valid", "net", "current", "bo", "equal", "average", "available", "void", "mean", "met", "no", "checked", "count", "new", "huge"]}}
{"code": "a,b = map(int,input().split())\\nif a > b :\\n    print('a > b')\\nif a < b :\\n    print('a < b')\\nif a == b :\\n    print('a == b')\\n", "target": "598", "substitutes": {"a": ["f", "apa", "am", "ae", "\u00e1", "name", "sta", "au", "ga", "af", "i", "ax", "A", "ca", "la", "ea", "ity", "g", "ami", "area", "va", "p", "da", "alpha", "ao", "act", "aka", "oa", "\u00e4", "isa", "sa", "ai", "ata", "aq", "aa", "aj", "al", "ac", "ma", "ah", "part", "ia", "ab", "eas", "aaa", "x", "ach", "an", "aff"], "b": ["f", "rb", "ba", "ib", "erb", "mb", "bl", "ben", "be", "l", "blue", "t", "bc", "bp", "back", "pb", "by", "i", "bh", "fb", "cb", "db", "v", "c", "h", "g", "nb", "d", "bt", "bi", "br", "bf", "e", "sb", "gb", "bo", "bis", "n", "ob", "ub", "bs", "abs", "B", "ab", "beck", "bb", "bar", "eb"]}}
{"code": "n, m = map(int, input().split())\\nnum = [\"A\"] * n\\nfor i in range(m):\\n    s, c = map(int, input().split())\\n    if n>1 and s == 1 and c == 0:\\n        print(-1)\\n        exit()\\n    elif num[s - 1] != \"A\" and num[s - 1] != c:\\n        print(-1)\\n        exit()\\n    num[s - 1] = c\\n\\nfor j in range(n):\\n    if num[j] == \"A\":\\n        num[j] = 0\\n    if n>1 and num[0] == 0:\\n        num[0] = 1\\nprint(int(\"\".join(map(str, num))))\\n", "target": "285", "substitutes": {"n": ["f", "nn", "a", "l", "y", "t", "nt", "name", "number", "ms", "N", "ns", "r", "mn", "nm", "en", "v", "na", "ln", "h", "sn", "an", "g", "cn", "nu", "nb", "d", "p", "ne", "net", "gn", "np", "nan", "nc", "o", "u", "w", "nl", "x", "on"], "m": ["gm", "mc", "tm", "mas", "l", "t", "sm", "ms", "M", "mn", "r", "nm", "v", "mis", "bm", "h", "b", "mod", "dm", "d", "mem", "p", "mun", "man", "km", "mt", "om", "mo", "mos", "mr", "ma", "mm", "mi", "cm"], "num": ["mu", "tu", "add", "sum", "die", "note", "nam", "ver", "div", "un", "missing", "tag", "empty", "val", "serial", "coord", "rem", "no", "save", "norm", "new", "mon", "desc", "one", "comment", "ext", "number", "prim", "final", "nm", "na", "nu", "nb", "temp", "test", "orig", "mun", "sam", "net", "cum", "im", "unit", "str", "nom", "rub", "nt", "con", "en", "byte", "check", "dat", "mem", "alpha", "alph", "zero", "total", "form", "none", "uf", "cache", "al", "loc", "NUM", "on", "enc", "Num", "out", "cond", "hex", "tim", "dim", "mn", "cal", "th", "mat", "int", "np", "log", "um", "pn", "init"], "i": ["f", "l", "y", "ti", "r", "k", "v", "q", "b", "ind", " ii", "ik", "p", "bi", "pi", "e", "ai", "it", "ii", "si", "o", "I", "li", "ia", "x", "im"], "s": ["ps", "z", "sts", "sing", "sv", "ls", "a", "sis", "spec", "cs", "rs", "se", "t", "gs", "su", "xs", "steps", "os", "ins", "ms", "ns", "sw", "v", "sp", "es", "hs", "ys", "h", "ies", "S", "p", "ss", "ds", "sa", "sb", "its", "ims", "si", "bs", "ats", "south", "als", "ts", "js"], "c": ["z", "f", "mc", "C", "cr", "a", "cs", "l", "t", "cf", "cb", "r", "cin", "ca", "ch", "v", "co", "b", "lc", "gc", "g", "ct", "cc", "d", "ce", "p", "can", "cp", "com", "e", "dc", "tc", "ic", "cu", "u", "ac", "cm", "count"], "j": ["z", "obj", "jl", "ja", "l", "y", "ix", "jp", "k", "ji", "r", "v", "json", "ij", "job", "q", "b", "h", "je", "p", "bi", "oj", "jo", "kj", "jas", "it", "jj", "jump", "aj", "J", "o", "uj", "dj", "li", "x", "bj", "js", "jc"]}}
{"code": "N = int(input())\\n\\nA_list = list(map(int, input().split()))\\nA_list_min = sorted(A_list)\\n\\nfor i in range(len(A_list)-1):\\n    if A_list_min[i] == A_list_min[i+1]:\\n        print(\"NO\")\\n        exit()\\nprint(\"YES\")", "target": "135", "substitutes": {"N": ["K", "C", "X", "F", "R", "Ni", "M", "NR", "A", "NA", "S", "E", "O", "D", "NS", "FN", "Node", "L", "TN", "P", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NN"], "A_list": ["N_stack", "A_List", "NA12list", "A7list", "A_st", "A___list", "A___tree", " A_LIST", "NA_min", "A12listed", "A7tree", "N_tree", "NA12listed", " A_List", "N_valid", " A_st", "A_listed", "A12List", "A_stack", "NA_List", "A_valid", "A12list", "A_min", "NA12min", "A7valid", "A_tree", "A12min", "NA12List", "NA_list", "A___valid", "A___stack", "N_list", "A_LIST", "NA_listed", "A7stack"], "A_list_min": ["A_not_min", "A_int_lower", "A_list_only", "A_list_max", "A_not_max", "A_not_only", "A_int_max", "A_int_min", "A_int_mins", "A_list_mins", "A_not_mins", "A_list_lower"], "i": ["f", "ini", "zi", "m", "cli", "uri", "l", "y", "ix", "ti", "s", "\u0438", "ci", "ji", "v", "gi", "ij", "hi", "ori", "ki", "phi", "yi", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "n", "ic", "batch", "li", "I", "uli", "uni", "us", "me", "x", "ui", "mi", "im", "ski"]}}
{"code": "l = sorted(map(int, input().split()))[:2]\\nprint(sum(l))", "target": "298", "substitutes": {"l": ["z", "f", "fl", "ls", "le", "m", "lv", "t", "lis", "kl", "s", "i", "len", "r", "v", "sl", "c", "lt", "long", "h", "b", "lc", "g", "lo", "lam", "ml", "d", "p", "dl", "L", "j", "lp", "hl", "n", "li", "left", "dL", "nl", "rl", "ll"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nz = sum(a)\\nln = []\\nx = 0\\nfor i in range(n - 1):\\n    x += a[i]\\n    ln.append(abs(z - 2 * x))\\nprint(min(ln))", "target": "424", "substitutes": {"n": ["nn", "nw", "nia", "names", "m", "l", "nt", "t", "name", "N", "ns", "mn", "k", "en", "na", "c", "sn", "an", "nd", "cn", "nu", "nb", "num", "d", "j", "network", "ne", "gn", "np", "nc", "o", "nl", "non"], "a": ["ba", "array", "ap", "am", "ae", "att", "all", "sta", "ga", "au", "ed", "xa", "A", "la", "na", "c", "ea", "b", "area", "va", "da", "alpha", "j", "oa", "parts", "sa", "ai", "aa", "al", "ac", "o", "ma", "abs", "ia", "ab", "eas", "aaa", "ana", "an"], "z": ["yz", "ld", "oz", "sum", "zi", "zip", "y", "iz", "uz", "s", "hz", "sd", "az", "cz", "c", "zh", "b", "ze", "d", "tz", "zer", "ess", "height", "j", "zero", "zen", "zone", "zes", "nz", "ez", "Z", "zo"], "ln": ["fl", "nn", "ern", "ls", "yn", "bl", "zn", "sql", "l", "lv", "lin", "println", "kl", "fol", "fn", "sol", "vl", "mn", "eln", "sl", "oln", "lu", "sn", "vin", "wl", "wn", "cn", "kn", "lad", "nb", "tan", "tn", "rn", "ml", "isen", "dl", "gn", "lr", "lvl", "log", "li", "nl", "bn", "umen", "pn", "ll", "lan"], "x": ["xp", "X", "xy", "l", "y", "ix", "xs", "xa", "ax", "xx", "v", "xt", "dx", "wx", "mx", "ex", "ct", "fx", "p", "rx", "xc", "ox", "xe", "xi", "lex", "checked", "xf", "xd", "tx"], "i": ["ini", "zi", "uri", "y", "ix", "ti", "s", "ip", "ci", "k", "ji", "gi", "ij", "hi", "ori", "sim", "ind", "id", "di", "bi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "ic", "li", "I", "ui", "mi", "im", "ski"]}}
{"code": "from sys import stdin\\ndef main():\\n    #\u5165\u529b\\n    readline=stdin.readline\\n    a,b,c=map(int,readline().split())\\n\\n    li=[a,b,c]\\n    li.sort(reverse=True)\\n    if li[0]==li[1]+li[2]:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\nif __name__==\"__main__\":\\n    main()", "target": "332", "substitutes": {}}
{"code": "n=int(input())\\ns=input()\\nans=n\\nfor i in range(len(s)-1):\\n    if s[i]==s[i+1]:\\n        ans-=1\\nprint(ans)", "target": "717", "substitutes": {"n": ["nn", "names", "m", "l", "nt", "t", "N", "ns", "mn", "k", "v", "na", "c", "ln", "sn", "q", "h", "b", "an", "NA", "cn", "nb", "num", "d", "nv", "p", "j", "ne", "np", "nan", "nc", "nl"], "s": ["ps", "sts", "sv", "ws", "ls", "fs", "a", "sis", "cs", "rs", "se", "gs", "xs", "ins", "os", "ms", "ns", "strings", "sp", "sl", "c", "hs", "ys", "S", "ments", "ges", "ids", "ains", "ss", "ds", "parts", "sb", "sa", "its", "bis", "ses", "si", "abs", "bs", "tes", "ats", "als", "st", "ts", "qs", "js"], "ans": ["ens", "wan", "anon", "sum", "nets", "mas", "aned", "AN", "oss", "ran", "pan", "rs", "cs", "iann", "ins", "anas", "ms", "aus", "ons", "ns", "os", "ann", "outs", " Ans", "news", "aos", "beans", "rans", "sn", "cn", "ANS", "anus", "nas", "ai", "uns", "offs", "anes", "nan", "ams", "ats", "ros", "ts", "anks", "ana", "an", "ks", "ants", "lan"], "i": ["f", "ini", "ri", "zi", "\u00ed", "uri", "ix", "iy", "ti", "ip", "\u0438", "ci", "ji", "gi", " j", "ij", "ori", "index", "ki", "q", "yi", "sim", "ind", "id", " ii", "di", "bi", "multi", "j", "pi", "fi", "qi", "it", "ii", "batch", "si", "xi", "ic", "I", "li", "us", "me", "x", "on", "mi", "iu", "im", "ui", "ski"]}}
{"code": "import math\\nn=int(input())\\n\\ndef add_v(l1,l2):\\n    n=len(l1)\\n    l=[0]*n\\n    for i in range(n):\\n        l[i]=l1[i]+l2[i]\\n    return l\\n\\ndef scar_multiple_v(scalar,l):\\n    n=len(l)\\n    ans=[0]*n\\n    for i in range(n):\\n        ans[i]=l[i]*scalar\\n    return ans\\n\\ndef mat_multi_v(mat,l):\\n    n=len(l)\\n    ans=[0]*n\\n    for i in range(n):\\n        for j in range(n):\\n            ans[i]+=mat[i][j]*l[j]\\n    return ans\\n\\ndef make_points(tail,head):\\n    ans=[[0]*2 for _ in range(5)]\\n    ans[0]=tuple(tail)\\n    ans[1]=tuple(add_v(tail,scar_multiple_v(1/3,add_v(head,scar_multiple_v(-1,tail)))))\\n\\n    v=scar_multiple_v(1/3,add_v(head,scar_multiple_v(-1,tail)))\\n    mat=[[1+math.cos(math.radians(60)),-math.sin(math.radians(60))],\\\\n         [math.sin(math.radians(60))  ,1+math.cos(math.radians(60))]]\\n    ans[2]=tuple(add_v(tail,mat_multi_v(mat,v)))\\n    ans[3]=tuple(add_v(tail,scar_multiple_v(2/3,add_v(head,scar_multiple_v(-1,tail)))))\\n    ans[4]=tuple(head)\\n    return tuple(ans)\\n\\ndef make_1_coch_curve(iter,tail,head):\\n    points=make_points(tail,head)\\n    if iter == n-1:\\n        for i in range(len(points)-1):\\n            print(\"{} {}\".format(points[i][0],points[i][1]))\\n            \\n    else:\\n        for i in range(4):\\n            make_1_coch_curve(iter+1,points[i],points[i+1])\\n            \\nif n == 0:\\n    print(\"{} {}\\n{} {}\".format(0,0,100,0))\\nelse:\\n    make_1_coch_curve(0,[0,0],[100,0])\\n    print(\"{} {}\".format(100,0))\\n        \\n\\n", "target": "280", "substitutes": {"n": ["names", "name", "note", "un", "h", "g", "yes", "num", "nv", "no", "nl", "x", "ll", "count", "z", "f", "nn", "el", "m", "t", "number", "len", " fn", "na", "ren", "long", "cn", "nu", "nb", "dn", "net", "nan", "nc", "o", "nt", "nr", "fn", "r", "k", "en", "c", "rn", "size", "p", " ns", "none", "nor", " N", "on", "out", "nia", "all", "s", "N", "ns", "mn", "ng", "ln", "sn", "d", "pi", " ng", "ne", "np", "an"], "l1": ["L0", "ll1", "ls2", " lr", " l3", "lone", "ls0", "ls1", " lone", "lc1", "lir", "l0", "L1", "ll0", "lc2", "li3", "li1", "lsone", "l3", "lr", " l0", "lc0", "L2", "Lone", "llr", "ll3", "li0"], "l2": ["L0", "ls2", " l3", "kl2", "kl1", "lsecond", "Lsecond", "klsecond", "ls3", "L3", "ls0", "ls1", "L1", "l0", "kl0", "l3", " l0", "L2", " lsecond"], "l": ["fl", "lit", "ol", "ld", "ls", "isl", "le", "el", "m", "bl", "lv", "t", "lin", "lis", " L", "kl", "lang", "len", "r", "il", "lb", "la", "ul", "sl", "c", "lt", "lu", "ln", "h", "b", "lc", "g", "tl", "lo", "lam", "lib", "ml", "dl", "p", "L", "lp", "pl", "col", "mt", "lon", "al", "loc", "o", "li", "nl", "list", "ll", "ly"], "i": ["io", "ei", "ini", "zi", "\u00ed", "m", "uri", "ir", "y", "t", "ix", "iy", "ti", "info", "ip", "ci", "il", "im", "gi", "status", "ij", "c", "ori", "index", "oi", "ki", "phi", "ami", "yi", "sim", "ie", "ind", "id", "di", "ik", "p", "exp", "bi", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "u", "batch", "ia", "iri", "x", "iti", "on", "iu", "mi", "ui", "me", "item", "init"], "scalar": ["scalsar", "scumar", "Scallar", "scaller", "scaler", "escalar", "escalAR", "ScalAR", "scalsarial", "scumarial", "scallar", "Scalar", "escalpar", "scalsAR", "scumAR", "Scallant", "scallant", "escalarial", "scaledAR", "ScallAR", "Scaller", "scaledarial", "escalsAR", "scaleder", "scalarial", "scaledpar", "scalspar", "Scaler", "escalspar", "escalsarial", "scalpar", "scassant", "scalant", "scassar", "scallAR", "scaledant", "scasser", "escalsar", "scassAR", "scalAR", "scumpar", "Scalant", "scaledar"], "ans": ["ens", "names", "ones", "oss", "anc", "cs", "lang", "ars", "anas", "ins", "aus", "outs", "aos", "aces", "ays", "yes", "eps", "parts", "offs", "mean", "ates", "nl", "orts", "x", "ts", "ants", "lan", "ms", "ports", "os", "aps", "ums", "ands", "eds", " means", "ANS", "ots", "can", "man", "ds", "ints", "anes", "nan", "ams", "ads", "us", "als", "terms", "ls", "rs", "gs", "ann", "ends", "arts", "ents", "works", "uns", "uls", "ras", "vals", "ions", "ks", "ows", "ps", "els", "lines", "cons", "amps", "s", "ons", "ns", "acs", "rets", "es", "ians", "ln", "posts", "san", "vs", "ats", "an"], "mat": ["vec", "Mat", "hat", "kat", "tm", "m", "mon", "cat", "mas", "mol", "mit", "att", "pit", "ha", "t", "lin", "rot", "format", "mn", "ver", "at", "MAT", "vp", "pal", "mut", "h", "phi", "mot", "math", "ml", "mem", "vs", "lab", "pat", "man", "col", "pi", "act", "pl", "mt", "late", "it", "wt", "vt", "ma", "met", "mac", "rices", "lat", "mm", "rat", "multi", "cm", "vert"], "j": ["z", "jl", "a", "ja", "y", "t", "name", "pos", "s", "jp", "k", "ji", "ij", "c", "h", "q", "b", "jac", "di", "p", "bi", "br", "oj", "pi", "kj", "ai", "it", "jj", "jump", "aj", "J", "si", "o", "uj", "dj", "li", "bj", "js", "jc"], "tail": ["fat", "headed", "win", "tailed", "other", "parent", "tank", "back", "wall", "pipe", "pull", "tails", "tag", "h", "slice", "tree", "source", "shot", "HEAD", "inner", "first", "ail", "list", "mint", "ll", "origin", "top", "both", "t", "len", "buffer", "upper", "limit", "ball", "long", "index", "header", "test", "ind", "txt", "table", "left", "foot", "unit", "thread", "ls", "rot", "front", "il", "root", "fail", "lock", "length", "term", "nil", "alt", "subject", "shell", "link", "body", "scroll", "target", "out", "gate", "heads", "chain", "all", "old", "loop", "th", "pool", "tip", "lead", "null", "col", "port", "template", "log", "bang", "handle", "base"], "head": ["thread", "target", "headed", "neck", "he", "top", "gate", "headers", "down", "heads", "parent", "name", "ck", "dict", "back", "wall", "front", "Head", "root", "before", "lock", "tag", "index", "h", "post", "start", "th", "header", "id", "hd", "foot", "host", "der", "end", "window", "port", "form", "stick", "self", "local", "client", "subject", "HEAD", "then", "block", "doc", "right", "ad", "first", "left", "heading", "list", "link", "body", "view", "md", "st"], "_": ["f", "ay", "draw", "all", "t", "this", "ix", "y", "c", "aw", "ex", "ate", "ct", "val", "code", "it", "ac", "ic", "I", "set", "x"], "v": ["f", "ve", "sv", "conv", "m", "mit", "t", "s", "ver", "vp", "c", "h", "b", "g", "tv", "nv", "vs", "va", "vm", "p", "av", "vol", "vt", "var", "uv", "o", "V", "w", "u", "x", "cv", "vert"], "iter": ["thread", "max", "ep", "skip", "ter", "repeat", "counter", "order", "chain", "this", "ite", "nr", "step", "len", "ip", "Iter", "index", "loop", "ate", "ind", "id", "er", "inter", "num", "size", "call", "read", "trial", "ne", "IT", "alt", "valid", "it", "int", "inner", "ait", "nc", "rec", "It", "itter", "count", "init", "iterator"], "points": ["ps", "objects", "groups", "lines", "checks", "plays", " Points", "pt", "tops", "places", "Points", "pins", "windows", "finals", "faces", "amps", "gs", "steps", "pos", "xs", "ins", "ports", "point", "assets", "outs", "days", "arts", "marks", "styles", "posts", "docs", "bits", "inters", "changes", "pointers", "p", "ds", "parts", "results", "chains", "dates", "months", "products", "ads", "items", "bs", "games", "pots", "tools", "orders", "ts"]}}
{"code": "n,k=map(int,input().split())\\nif n==1:\\n  print(k)\\nelse:\\n  print(k*(k-1)**(n-1))", "target": "582", "substitutes": {"n": ["z", "f", "nn", "names", "m", "l", "nt", "t", "name", "s", "N", "i", "ns", "mn", "r", "un", "v", "na", "c", "ln", "sn", "q", "b", "h", "g", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "np", "nan", "nc", "o", "w", "u", "no", "x"], "k": ["dk", "K", "m", "kr", "kind", "kh", "uk", "ka", "ck", "kl", "ikk", "i", "key", "kk", "ke", "v", "kar", "ket", "c", "mk", "ki", "q", "h", "g", "th", "kn", "ak", "ijk", "ik", "kok", "p", "km", "j", "kb", "kj", "kw", "tk", "u", "sk", "ko", "ku", "ks"]}}
{"code": "n=int(input())\\ns=input()\\nl=0\\nr=n\\nwhile r-l>1:\\n  mid=(r+l)//2\\n  dic={}\\n  flag=False\\n  for i in range(n-mid+1):\\n    tmp=s[i:i+mid]\\n    if tmp not in dic:\\n      dic[tmp]=i+mid\\n    else:\\n      if dic[tmp]<=i:\\n        flag=True\\n        break\\n  if flag:\\n    l=mid\\n  else:\\n    r=mid\\nprint(l)", "target": "521", "substitutes": {"n": ["z", "nn", "m", "a", "nt", "t", "nr", "N", "len", "ns", "k", "mn", "nm", "v", "na", "c", "ln", "sn", "q", "h", "b", "nd", "g", "nb", "rn", "num", "d", "p", "j", "ne", "int", "np", "nc", "o", "w", "nl", "x"], "s": ["stats", "sts", "str", "sv", "ws", "ls", "m", "a", "spec", "rs", "t", "se", "y", "gs", "ms", "ns", "series", "strings", "sp", "v", "sl", "c", "ys", "h", "b", "S", "string", "d", "p", "ss", "ds", "sa", "sb", "sq", "w", "south", "st", "ts", "js"], "l": ["z", "f", "ld", "ls", "level", "le", "line", "m", "lock", "lv", "t", "lin", "kl", "len", "k", "v", "ul", "sl", "c", "lu", "length", "ln", "h", "long", "b", "lc", "g", "lt", "lo", "ml", "d", "p", "dl", "L", "j", "e", "lr", "o", "li", "u", "left", "nl", "list", "x", "rl", "ll"], "r": ["z", "rb", "ri", "m", "rr", "range", "sr", "R", "rs", "t", "nr", "result", "rc", "k", "err", "res", "rl", "v", "c", "h", "b", "g", "rn", "id", "re", "er", "d", "p", "j", "ro", "e", "lr", "right", "rd", "mr", "o", "u", "w", "dr", "x", "rar", "rt"], "mid": ["rand", "sub", "min", "med", "max", "le", "line", "m", "pad", "grid", "mit", "pan", "t", "middle", "ms", "dim", "len", "mn", "fr", "lim", "upper", "perm", "hi", "lt", "dem", "mk", "mask", "nd", "lay", "ln", "start", "mod", "lo", "ind", "id", "inter", "orig", "Mid", "mult", "pi", "mt", "trans", "mo", "late", "rid", "wid", "half", "fin", "tri", "mer", "mr", "left", "pid", "mm", "mi", "md"], "dic": ["Dics", " dlic", " dict", "didict", " dication", "didic", " dIC", "didyn", " diac", "ldlic", "dict", "dyn", "ldics", "diics", "dlic", " dics", "mdict", "didiac", "diict", "didication", "ldIC", "Dic", "diac", "mic", "DIC", "dics", "mication", " dyn", "Dlic", "Dict", "diic", "mdiac", "dication", "ldic", " dpic", "mics", "Dpic", "miac", "mdic", "mdyn", "dpic", "didics", "dipic", "dIC"], "flag": ["z", "f", "bug", "style", "ld", "offset", "level", "ground", "line", "flags", "sync", "field", "cond", "lv", "hold", "debug", "status", "co", "lock", "tag", "state", "mask", "lag", "store", "group", "gc", "use", "force", "id", "cmd", "stage", " Flag", "do", "cloud", "tail", "leaf", "FLAG", "bool", "enable", "error", "weight", "fire", "set", "save", "Flag", "nl", "list", "agged", "count", "fd"], "i": ["f", "ini", "ei", "ri", "zi", "m", "y", "t", "ix", "ti", "ip", "ci", "k", "ji", "v", "gi", "ij", "hi", "ori", "oi", "ki", "q", "phi", "index", "ind", "id", "di", "iat", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "iri", "x", "mi", "iu", "im"], "tmp": ["img", "sup", "emp", "obj", "dump", "m", "src", "xy", "node", "pkg", "elt", "nt", "t", "tt", "name", "ip", "key", "attr", "nm", "tp", "jp", "yy", "etc", "v", "sp", "perm", "cookie", "sym", "quote", "ori", "mk", "mut", "term", "start", "gt", "mp", "temp", "nb", "test", "ind", "cmd", "option", "pre", "p", "j", "cp", "sam", "td", "cmp", "tf", "np", "txt", "tc", "buff", "prefix", "prime"]}}
{"code": "def main():\\n    A, B, C, D = list(input())\\n    for i in ['+','-']: \\n        for j in ['+','-']:\\n            for k in ['+','-']:\\n                tmp = A + i + B + j + C + k + D\\n                if eval(tmp) == 7:\\n                    print(tmp+'=7')\\n                    exit()\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "504", "substitutes": {"A": ["Y", "AR", "K", "AA", "Ar", "H", "X", "AC", "Al", "a", "R", "Am", "G", "N", "AL", "U", "Av", "S", "As", "AU", "AT", "Array", "Ag", "L", "An", "At", "P", "AH", "You", "T", "AS", "J", "AB", "AP", "V", "Ac", "I", "Ax", "SA"], "B": ["Y", "BBC", "BB", "Blue", "BS", "VB", "DB", "H", "EB", "Bu", "OB", "G", "NB", "BO", "WB", "N", "BA", "BC", "BI", "Bi", "Br", "b", "Ba", "MB", "L", "TB", "FB", "T", "J", "AB", "V", "BT", "I", "CB", "BER", "Bern", "BY", "BR", "Bs"], "C": ["Y", "K", "CE", "H", "X", "F", "R", "G", "W", "CR", "Cs", "CP", "CM", "N", "M", "BC", "CA", "c", "U", "CD", "S", "E", "O", "CT", "L", "CC", "An", "P", "Cr", "Q", "CW", "T", "YC", "J", "V", "I", "EC", "CB", "JC", "CS", "DC"], "D": ["Y", "K", "DB", "H", "X", "F", "R", "Do", "G", "W", "DD", "N", "M", "DA", "CD", "S", "E", "O", "d", "do", "L", "If", "P", "Q", "T", "J", "Z", "V", "I", "DC"], "i": ["f", "io", "ei", "ini", "ib", "zi", "m", "a", "ir", "l", "y", "t", "aci", "ix", "ti", "ci", "ati", "gi", "v", "ij", "c", "h", "phi", "b", "yi", "id", "di", "ik", "d", "p", "bi", "fi", " I", "ai", "it", "ii", "xi", "ic", "o", "li", "I", "ia", "x", "iti", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "pr", "m", "a", "bl", "ja", "l", "serv", "y", "t", "jp", "r", "ji", "v", "ij", "c", "job", "q", "b", "h", "je", "g", "d", "bi", "oj", "kj", "jas", "e", "jj", "J", "n", "o", "ju", "uj", "dj", "bot", "bj", "js", "jc"], "k": ["z", "f", "kg", "K", "m", "cr", "kt", "uk", "a", "y", "t", "ck", "kl", "s", "kk", "r", "ke", "kid", "v", "kar", "c", "h", "q", "b", "g", "ak", "ik", "d", "p", "kj", "ek", "e", "kw", "n", "o", "u", "w", "sk", "x", "ku"], "tmp": ["img", "partial", "emp", "out", "obj", "conv", "MP", "html", "zip", "xy", "ret", "pkg", "nt", "tt", "result", "etc", "yy", "jp", "msg", "sp", "perm", "slow", "tar", "empty", "mk", "mut", "mp", "temp", "nb", "test", "cp", "buf", "clip", "Temp", "cmp", "tf", "np", "var", "txt", "T", "stuff", "abs", "loc", "yet", "buff", "qq", "prefix", "new"]}}
{"code": "n, k = map(int, input().split())\\n\\nif k == 1:\\n    print(0)\\n    exit()\\nn -= k\\nprint (n)", "target": "739", "substitutes": {"n": ["z", "f", "mu", "nn", "m", "l", "y", "t", "nt", "number", "s", "N", "i", "ns", "r", "mn", "v", "na", "c", "ln", "h", "q", "b", "cn", "nu", "nb", "num", "d", "p", "j", "total", "ne", "int", "np", "nc", "o", "w", "no", "x", "new"], "k": ["dk", "f", "mu", "max", "K", "m", "kr", "kh", "ka", "l", "t", "ck", "kl", "ikk", "i", "key", "kk", "ke", "v", "c", "ket", "mk", "ki", "q", "g", "kn", "unk", "ik", "num", "kok", "p", "km", "j", "kb", "kj", "kw", "tk", "rank", "sk", "ko", "ku", "ks"]}}
{"code": "s = str.upper(input())\\n\\nfor i in range(len(s)):\\n    if s[i] == 'A':\\n        a = i\\n        break\\n\\n\\nfor i in range(1,len(s)):\\n    if s[-i] == 'Z':\\n        b = len(s) + 1 - i\\n        break\\nprint(b-a)", "target": "365", "substitutes": {"s": ["z", "f", "ps", "sts", "str", "sv", "ws", "ls", "m", "ares", "l", "rs", "t", "se", "gs", "xs", "ins", "os", "ns", "r", "ends", "input", "v", "sp", "strings", "aces", "hs", "c", "gins", "h", "q", "eds", "g", "ands", "S", "ers", "ments", "ys", "string", "p", "ains", "ss", "less", "ds", "parts", "erences", "sb", "its", "ences", "bis", "ses", "n", "abs", "utes", "bs", "sq", "w", "tes", "ats", "bes", "space", "ts", "qs", "js"], "i": ["z", "f", "io", "ei", "ini", "ri", "zi", "\u00ed", "iq", "m", "cli", "ir", "l", "y", "t", "ix", "iy", "ti", "ip", "ci", "ji", "ati", "gi", "v", "ij", "c", "index", "q", "yi", "ie", "ind", "id", "di", "ik", "d", "p", "bi", "j", "pi", "itime", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "li", "I", "ql", "ia", "u", "o", "me", "x", "iti", "mi", "iu", "im"], "a": ["f", "ba", "ap", "ae", "l", "t", "sta", "au", "ga", "xa", "A", "ca", "r", "at", "v", "c", "ea", "area", "alpha", "da", "app", "oa", "e", "sa", "ai", "aq", "aa", "aj", "art", "ad", "ac", "ma", "ia", "ab", "aaa", "x", "ar", "ach", "an"], "b": ["z", "f", "rb", "ib", "mb", "be", "l", "y", "t", "bc", "bp", "back", "cb", "fb", "r", "db", "v", "c", "wb", "nb", "d", "bi", "j", "e", "sb", "bo", "beta", "bis", "n", "abs", "o", "bs", "B", "ab", "bb", "eb"]}}
{"code": "import re\\nimport sys\\nimport math\\nimport itertools\\nimport bisect\\nfrom copy import copy\\nfrom collections import deque,Counter\\nfrom decimal import Decimal\\nimport functools\\ndef v(): return input()\\ndef k(): return int(input())\\ndef S(): return input().split()\\ndef I(): return map(int,input().split())\\ndef X(): return list(input())\\ndef L(): return list(input().split())\\ndef l(): return list(map(int,input().split()))\\ndef lcm(a,b): return a*b//math.gcd(a,b)\\nsys.setrecursionlimit(10 ** 6)\\nmod = 10**9+7\\ncnt = 0\\nans = 0\\ninf = float(\"inf\")\\nal = \"abcdefghijklmnopqrstuvwxyz\"\\nAL = al.upper()\\n\\nn,m,k = I()\\n\\nfor i in range(n+1):\\n    for j in range(m+1):\\n        if i*(m-j)+j*(n-i) == k:\\n            print(\"Yes\")\\n            exit()\\n\\nprint(\"No\")\\n", "target": "92", "substitutes": {"a": ["f", "ba", "ae", "l", "t", "ga", "au", "A", "r", "ca", "na", "c", "ea", "an", "ak", "area", "p", "e", "ai", "sa", "aq", "aa", "aj", "ac", "o", "ma", "w", "ia", "ab", "eas", "aaa", "x", "ar", "am"], "b": ["z", "f", "rb", "ba", "be", "l", "y", "t", "bc", "s", "bg", "cb", "r", "fb", "v", "db", "c", "h", "g", "nb", "d", "p", "bi", "br", "bf", "e", "bu", "sb", "ob", "bs", "u", "B", "ab", "bb", "eb"], "mod": ["sub", "add", "min", "base", "sum", "times", "ran", "floor", "step", "adj", "ver", "div", "cal", "circ", "scale", "temp", "sim", "mult", "round", "exp", "Mod", "fac", "MOD", "log", "dec", "set", "grow", "fun"], "cnt": ["fcnt", "fcnd", "Cnt", " crc", "Crc", "fcCount", "cnd", "crc", " cCount", " cnd", "Cnd", "fcrc", "CCount", "cCount"], "ans": ["sum", "times", "jobs", "ins", "den", " threads", "len", " orphans", "miss", "never", "un", "errors", " errors", "gc", "bits", "warn", "eps", " misses", "zero", "ai", "locks", " cs", "nz", "nan", "no", " err", "an", "fun"], "inf": ["z", "f", "off", "pred", "imag", "inv", "info", "pp", "fr", "adj", "Inf", "fo", "ef", "ex", "ct", "ind", "exp", "frac", "pi", "inc", "it", "int", "conf", "nan", "log", "iter", "ff"], "al": ["ol", "el", "ap", "Al", "bl", "att", "all", "ral", "mal", "il", "tal", "alf", "cal", "alg", "pal", "bal", "atal", "hal", "aler", "alpha", "aled", "alph", "alt", "IL", "ale", "alid", "ell", "wal", "ab", "sal", "als", "ali", "ar", "ial", "ll"], "AL": [" JA", "VAL", "AN", "Al", "AC", "LE", "all", "OL", "N", " IL", "CN", " CJ", "cal", "RE", "val", "IJ", " J", "alph", "INT", "IM", "IL", "J", "als", " Al", "ali", "IN"], "n": ["z", "nn", "ni", "l", "y", "t", "nt", "N", "ns", "mn", "r", "nm", "en", "v", "na", "c", "h", "an", "sn", "g", "nu", "nb", "num", "d", "p", "dn", "e", "np", "nan", "nc", "o", "w", "x", "on"], "m": ["z", "mc", "l", "y", "t", "ms", "M", "mn", "r", "nm", "v", "c", "h", "q", "g", "dm", "num", "d", "p", "man", "e", "o", "ma", "mm", "x", "mi", "cm", "md"], "k": ["z", "f", "kg", "K", "kr", "kh", "ka", "l", "y", "ck", "kl", "ok", "key", "kk", "ke", "v", "c", "mk", "ki", "q", "an", "g", "ak", "ik", "d", "p", "kj", "int", "tk", "keys", "o", "u", "w", "sk", "ko", "x", "ku", "ks"], "i": ["z", "ini", "zi", "l", "y", "ti", "ip", "ci", "r", "\u0438", "ani", "gi", "v", "ij", "c", "hi", "h", "q", "phi", "di", "ik", "p", "bi", "pi", "qi", "e", "ai", "int", "ii", "xi", "si", "o", "ic", "I", "li", "ia", "u", "x", "iti", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "ja", "jit", "l", "y", "t", "jp", "ji", "r", "v", "ij", "h", "q", "g", "je", "d", "p", "br", "oj", "kj", "e", "it", "jj", "aj", "J", "si", "o", "uj", "dj", "li", "u", "bj", "js", "jc"]}}
{"code": "def main():\\n    import sys\\n    ikimasu = sys.stdin.buffer.readline\\n    ini = lambda: int(ins())\\n    ina = lambda: list(map(int, ikimasu().split()))\\n    ins = lambda: ikimasu().strip()\\n    \\n    n = ini()\\n    rick = 0\\n    import math\\n    for i in range(1,n+1):\\n        rick+=math.floor((n-1)/i)\\n    print(rick)\\n        \\n\\n\\n    \\n        \\n\\n\\n        \\n\\n\\n    \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "589", "substitutes": {"ikimasu": ["ikiamasus", "iskvimanu", "ikvimau", "ikimsaci", "ikkiamasu", "ikirmalin", "ikkimasu", "ikkimabo", "ikimsasu", "iskvimasa", "ickimsanu", "ickimsasu", "ikiamaci", "iskvimau", "ikiamanu", "ikiomasus", "iskimasa", "ikemanu", "iskimasu", "iskimau", "ikimmingatu", "iksimau", "ikimanu", "iskimanu", "ikkimatu", "ikirmaci", "ikiomabo", "ikvimasu", "ickimalin", "ikkimasus", "ikkiamasus", "ickimanu", "ikemasu", "ikvimanu", "ikimasa", "ickimsaci", "iksimasu", "ickimasu", "ikemau", "ikemasa", "ikirmanu", "iksimanu", "ikirmasu", "ikimatu", "ickimsalin", "ikimmingasu", "ikimsanu", "ikkiamabo", "ikimmingasus", "iksimasa", "ikiamasu", "ikkiamatu", "ikimasus", "ikiomasu", "ikimsalin", "ikimau", "ikimaci", "ikimalin", "ickimaci", "ikimabo", "ikiomatu", "ikimmingabo", "ikiamalin", "ikiamatu", "ikiamabo", "ikvimasa", "iskvimasu"], "ini": ["innie", "ine", "inos", "din", "isin", "zi", "fine", "rin", "ni", "inate", "lin", "ti", "ris", "ci", "cin", "ani", "gi", "ain", "udi", "abi", "gin", "ami", "ined", "inis", "login", "bi", "inn", "ai", "int", "rid", "ii", "si", "ic", "ma", "sin", "li", "mi", "uin", "oin", "init"], "ina": ["ine", "inos", "arin", "zi", "nets", "rin", "ines", "ris", "anas", "ino", "inen", "cin", "en", "lim", "nis", "ain", "ea", "ined", "inis", "vine", "iners", "elin", "nil", "ned", "iris", "isa", "nir", "rid", "uin"], "ins": ["ps", "sts", "lines", "out", "ls", "ips", "isin", "Ins", "pins", "cs", "rs", "cons", "lin", "gs", "ris", "outs", "cin", "ns", "strings", "rets", "INS", "gin", "login", "ind", "ains", "ds", "lins", "inn", "inning", "int", "ints", "ics", "inner", "ats", "vals", "ts", "mins", "qs", "ks", "init"], "n": ["z", "nn", "nic", "nia", "names", "m", "ni", "l", "y", "nt", "t", "number", "nr", "s", "N", "len", "ns", "mn", "r", "en", "fn", "na", "c", "ln", "sn", "cn", "nu", "nb", "rn", "num", "p", "dn", "j", "network", "ne", "gn", "np", "nc", "o"], "rick": ["innie", "rig", "won", "coat", "nic", "eddy", "rus", "rs", " brick", "setup", "ck", "jack", "rich", "ris", "brand", "riv", "rc", "xff", "wired", "pull", "ick", "wine", "ACK", "roc", "rock", "nexus", "rike", "omi", "init", "risk", "ric", "rint", "cki", "riot", "rac", "rip", "rib", "stick", "ichael", "ox", "ripp", "rik", "rack", "craft", "rett", "ipp", "cake", "ack", "ricks"], "i": ["f", "io", "ei", "ri", "zi", "m", "l", "y", "t", "ti", "ci", "r", "k", "gi", "v", "c", "hi", "oi", "q", "yi", "di", "d", "p", "bi", "j", "pi", "e", "ai", "ii", "xi", "si", "ic", "o", "I", "li", "x", "mi", "iu", "im", "wi"]}}
{"code": "S = input()[:: -1]\\nmod = 10 ** 9 + 7\\ndp = [[0 for _ in range(13)] for _ in range(len(S) + 1)]\\n\\nif S[0] == \"?\":\\n    for k in range(10):\\n        dp[1][k % 13] += 1\\nelse:\\n    dp[1][int(S[0]) % 13] += 1\\n\\ntmp = 1\\nfor i in range(2, len(S) + 1):\\n    tmp *= 10\\n    tmp %= 13\\n    for j in range(13):\\n        if dp[i - 1][j] > 0:\\n            if S[i - 1] == \"?\":\\n                for k in range(10):\\n                    dp[i][(tmp * k + j) % 13] += dp[i - 1][j] % mod\\n            else:\\n                dp[i][(tmp * int(S[i - 1]) + j) % 13] += dp[i - 1][j] % mod\\n\\nprint(dp[len(S)][5] % mod)", "target": "798", "substitutes": {"S": ["Sample", "BS", "SI", "Sl", "Si", "C", "H", "SS", "X", "F", "WS", "Rs", "R", "SL", "SAN", "JS", "SB", "SM", "SD", "s", "OS", "N", "M", "A", "RS", "INS", "NRS", "IS", "SR", "DS", "Series", "D", "SN", "NS", "SU", "SO", "L", "SP", "FS", "P", "TS", "Q", "T", "SF", "SA", "SE", "Z", "V", "VS", "I", "J", "B", "GS", "CS", "Ps", "SQL"], "mod": [" MOD", "sub", "add", "min", "max", "ld", "sum", "m", "sign", "dig", "comment", "cond", "ran", "day", "debug", "month", "row", " m", "oct", "modified", "step", "dd", "module", "sec", "ver", "div", "check", "mk", "mut", "scale", "lam", " Mod", "san", "d", "comp", "mult", "fun", "dir", "com", "trans", "form", "Mod", "ident", "mode", "od", "MOD", "var", "tr", "lex", "log", "dec", "mag", "grow", "set", "reg", "put", "cm", "mods", "base", "pro", "method"], "dp": ["dk", "ps", "DB", "deb", "adr", "bsp", "df", "pkg", "dos", "wd", "ga", "pb", "dro", "dd", "dim", "pp", "jp", "dt", "tp", "ty", "broad", "Ds", "db", "sp", "vp", "dq", "pm", "fp", "Db", "csv", "imp", "mp", "deep", "DS", "lip", "D", "di", "dm", "pd", "d", "dl", "p", "dep", "TP", "lp", "cp", "ds", "tap", "PP", "dial", "P", "dc", "np", "DP", "dh", "bps", "px", "dj", "lat", "dr", "wp", "Ps", "DC", "Dat", "BP"], "_": ["pt", "ay", "all", "py", "ix", "__", "g", "ct", "val", "code", "ny", "ml", " x", "time", "___", "list", "x", "non", "ation"], "k": ["z", "f", "kg", "kil", "kat", "K", "m", "kr", "kt", "uk", "kh", "ka", "t", "ck", "ork", "kl", "ikk", "s", "ok", "kk", "r", "ke", "kid", "v", "kar", "c", "mk", "ki", "q", "g", "ak", "unk", "kn", "ijk", "wk", "ik", "d", "num", "kok", "p", "km", "kj", "ek", "kw", "tk", "n", "w", "u", "sk", "ko", "ku", "ack"], "int": ["interface", "det", "str", "integ", "ret", "ext", "oct", "len", "point", "ip", "uint", "byte", "open", "long", "Int", "bit", "ref", "val", "ind", "internal", "id", "inter", "num", "pre", "imm", "round", "INT", "inc", "integer", "ints", "short", "float", "print", "digit", "inst", "init"], "tmp": ["sup", "tu", "gm", "max", "emp", "obj", "sum", "top", "tm", "m", "ta", "xy", "pkg", "nt", "t", "tt", "attr", "jp", "tp", "timeout", "sp", "perm", "v", "length", "tar", "mk", "mut", "term", "start", "split", "phi", "mp", "temp", "nb", "test", "tn", "ctx", "num", "size", "p", "cp", "total", "td", "kw", "cmp", "np", "tc", "buff", "mm", "x", "prefix", "qq", "prime", "proc", "needed"], "i": ["z", "io", "ini", "ri", "zi", "m", "cli", "y", "ix", "ti", "info", "ip", "ci", "key", "ji", "\u0438", "at", "v", "gi", "status", "ij", "index", "h", "q", "b", "phi", "ind", "id", "di", "ik", "p", "bi", "pi", "ai", "it", "ii", "xi", "si", "ic", "li", "I", "ia", "me", "x", "ui", "mi", "iu", "im"], "j": ["z", "f", "obj", "ion", "jl", "pt", "m", "ja", "jit", "l", "y", "t", "jack", "fr", "key", "jp", "ji", "v", "json", "ij", "h", "q", "b", "g", "je", "jac", "ind", "p", "bi", "br", "kj", "jas", "it", "jj", "jump", "aj", "J", "n", "o", "uj", "dj", "li", "x", "bj", "js", "jc"]}}
{"code": "N,M = map(int, input().split())\\nL = [[int(u) for u in input().split()] for i in range(M)]\\nS,T = map(int, input().split())\\n\\nedge = [[] for i in range(N+1)]\\nfor i in range(M):\\n    edge[L[i][0]].append(L[i][1])\\n    \\nq = [S]\\nINF = 10**9\\nvisited = [[INF+1, INF+1, INF+1] for i in range(N+1)]\\nvisited[S][0] = 0\\ncnt = 1\\nwhile len(q) > 0:\\n    length = len(q)\\n    for j in range(length):\\n        temp = q.pop(0)\\n        for i in range(len(edge[temp])):\\n            if visited[edge[temp][i]][cnt%3] > INF:\\n                q.append(edge[temp][i])\\n                visited[edge[temp][i]][cnt%3] = cnt\\n    cnt += 1\\n    \\nif visited[T][0] < INF:\\n    print(visited[T][0]//3)\\nelse:\\n    print(-1)", "target": "795", "substitutes": {"N": ["Y", "Name", "Num", "K", "NE", "H", "C", "AN", "F", "R", "Ni", "G", "W", "NB", "NI", "NR", "A", "NA", "E", "ND", "NT", "D", "SN", "NS", "Node", "NM", "TN", "P", "Q", "GN", "J", "n", "Z", "V", "I", "Ns", "NC", "NO", "NN"], "M": ["Y", "K", "H", "m", "C", "MP", "X", "F", "R", "G", "MT", "MR", "CM", "MI", "MN", "MC", "U", "MM", "D", "NM", "TM", "P", "Q", "MS", "MAN", "J", "V", "I", "B", "Mi"], "L": ["DL", "H", "LR", "F", "R", "LE", "l", "SL", "G", "LS", "LM", "LT", "LG", "LU", "Left", "LA", "NL", "U", "E", "LIN", "D", "LB", "P", "Q", "LC", "List", "LI", "J", "V", "I", "B", "LP", "LL", "Lu", "TL"], "u": ["uid", "mu", "tu", "itu", "pu", "fu", "ud", "l", "yu", "t", "su", "ue", "v", "ul", "gu", "c", "lu", "U", "eu", "du", "uci", "ut", "ou", "uf", "bu", "uc", "ur", "up", "uu", "uv", "o", "cu", "n", "uni", "ju", "uj", "hu", "um", "ui", "iu", "ku"], "i": ["io", "ini", "ei", "str", "ri", "ion", "zi", "m", "ir", "l", "y", "t", "ix", "iy", "ti", "info", "s", "ip", "ci", "k", "il", "ji", "gi", "v", "ij", "c", "ori", "index", "ki", "phi", "yi", "id", "di", "ik", "p", "bi", "pi", "fi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "n", "li", "I", "ia", "o", "x", "ui", "mi", "iu", "im", "iti"], "S": ["Y", "K", "SI", "Si", "C", "H", "SS", "X", "F", "R", "SL", "SK", "G", "SB", "SM", "s", "A", "U", "E", "O", "SR", "SN", "NS", "SP", "TN", "P", "TS", "Q", "SH", "SA", "J", "V", "I", "B", "CS"], "T": ["Y", "TR", "K", "H", "C", "F", "R", "HT", "t", "WT", "G", "W", "TA", "U", "TO", "ST", "TH", "E", "O", "NT", "AT", "TG", "TW", "TN", "TM", "IT", "TS", "P", "TI", "Q", "TC", "J", "V", "BT", "I", "B", "VT", "TT", "GT", "TV", "XT", "PT"], "edge": ["pe", "ine", "issue", "ve", "line", "le", "gate", "only", "die", "label", "ice", "node", "l", "se", "ite", "note", "device", "degree", "service", "point", "Edge", "env", "adj", "tex", "age", "query", "inline", "index", "extra", "route", "see", "ge", "use", "cer", "slice", "ie", "ges", "ind", "force", "inter", "ce", "player", "ink", "network", "end", "ne", "GE", "e", "seed", "ee", "entity", "equal", "connected", "graph", "ace", "connection", "reverse", "even", "link", "IE", "update", "rule", "handle", "connect", "ide"], "q": ["z", "qt", "f", "ued", "gm", "quer", "ues", "out", "qual", "qus", "ques", "qa", "iq", "qv", "confirmed", "l", "t", "tt", "que", "seq", "ck", "r", "ue", "ch", "buffer", "v", "quote", "query", "secure", "dq", "h", "b", "fresh", "g", "needed", "resh", "queue", "eq", "p", "buf", "required", "quant", "qi", "e", "Q", "Queue", "aq", "quick", "n", "log", "w", "sq", "ql", "quit", "qq", "x", "req", "qs", "requ", "qu"], "INF": ["INf", "FINEV", " INInf", " INFin", "INC", "INFF", "ENF", "NAF", " INf", "InV", "NAInf", "INDF", "EXFF", "InN", "FINEDF", "INEF", "EXF", "ENFF", "InB", "INH", "ENf", "PINInf", "InH", " INH", "Inf", " INFIN", "ENEF", " INB", "InFin", "INV", "INFin", "ENFIN", "ENC", "InInf", "ENB", "PINV", "FINEF", "FINEFin", "PINFF", "PINF", "InFF", " INEF", "INInf", "InF", " INC", "EXC", " INDF", "NAH", "INN", " INN", " INFF", "PINH", " INV", "PINN", "InEF", "NAN", "INB", "INFIN", "InDF", "EXFIN"], "visited": ["centralited", "continitted", "boundits", "bounditing", "centralitted", "Visits", "visulated", "VISulated", "boundited", "Visit", "invulated", "viewitted", "invitted", "Visited", "visended", "viewits", "viewended", "invited", "centralended", "Visulated", "viewITED", "bounditted", "navited", "invended", "Visiting", "visits", "continited", "VisITED", "Visitted", "centralits", "VISITED", "visitted", "VISited", "Visended", "visiting", "viewited", "centralITED", "centraliting", "VISitted", "navit", "visit", "VISits", "continit", "navitted", "continended", "visITED", "VISended", "navITED", "navended"], "cnt": ["acnc", "ncpt", " cgt", "ctgt", "gcNT", "acount", "gcctr", "acnt", "Cpt", "gcnt", "acpt", "cnc", "ctnc", "Ccount", "acct", " cctr", "Cnc", "acNT", " cpt", "Cld", "cNT", "cgt", "Cct", "cld", "Count", "ccount", " ccount", "Cnt", "cctr", "ctnt", " count", "ctct", "ctld", " cNT", "ncnt", "Cgt", "acld", "acctr", " cnc", "gcnc", "cct", " cct", "nccount", "ctpt", "ncct", "count", "cpt"], "length": ["z", "f", "ength", "max", "capacity", "bus", "be", "l", "full", "number", "shape", "len", "Length", "history", "Len", "long", "ln", "h", "loop", "position", "th", "duration", "size", "join", "height", "tail", "end", "total", "ENGTH", "angle", "time", "loc", "sequence", "log", "no", "stop", "prime", "count", "width"], "j": ["z", "ion", "iaz", "y", "t", "ix", "key", "jp", "k", "ji", "ij", "ket", "g", "ie", " ii", "ik", "size", "bi", "oj", "kj", "jj", " k", "J", "o", "uj", "ia", "item", "jc"], "temp": ["thread", "emp", "fake", "level", "tmp", "pt", "tm", "hex", "tim", "spec", "method", "t", "timer", "result", "porary", "key", "token", "ptr", "buffer", " Temp", "em", "empty", "term", "tem", "cer", "test", "typ", "pre", "orig", "context", "stem", "pi", "Temp", "current", "vt", "txt", "template", "tr", "tc", "time", "trade", "connected", "cu", "iter", "unt", "tty", "prefix", "prime", "unit", "base", "new", "dat", "perature"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\n\\n\\ndef main():\\n    N, M = map(int, input().split())\\n    A = [0] * M\\n    C = [0] * M\\n    for i in range(M):\\n        A[i], _ = map(int, input().split())\\n        C[i] = sum(2 ** (int(c) - 1) for c in input().split())\\n\\n    INF = 10 ** 18\\n    dp = [INF] * (2 ** N)\\n    dp[0] = 0\\n    for a, c in zip(A, C):\\n        for s in range(2 ** N):\\n            dp[s | c] = min(dp[s | c], dp[s] + a)\\n\\n    ans = dp[-1] if dp[-1] != INF else -1\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "772", "substitutes": {"input": ["str", "out", "stream", "connect", "utils", "reader", "load", "util", "cat", "std", "reset", " Input", "shift", "dict", "sample", "format", "result", "fn", "raw", "output", "cin", "request", "xml", "pull", "index", "q", "csv", "ct", "ref", "Input", "source", "select", "cmd", "context", "config", "hidden", "read", "next", "p", "image", "join", "initial", "new", "get", "parse", "inc", "it", "int", "run", "align", "table", "feed", "print", "set", "list", "prefix", "data", "view", "text", "init"], "N": ["Y", "Num", "K", "H", "AN", "F", "R", "Ni", "G", "NB", "NR", "MN", "NA", "S", "O", "NT", "D", "SN", "NS", "NM", "L", "P", "Q", "T", "GN", "J", "n", "V", "I", "PN", "B", "Ns", "NC", "NUM", "NO", "NN"], "M": ["MO", "K", "m", "MP", "H", "X", "F", "MX", "R", "PM", "MT", "MR", "LM", "CM", "MI", "MN", "MC", "Length", "Size", "MM", "S", "Ms", "O", "D", "L", "NM", "TM", "P", "MA", "AM", "MS", "MAN", "T", "DM", "J", "V", "I", "B", "Mi"], "A": ["AR", "AI", "AA", "Ar", "H", "AC", "AN", "Al", "R", "IA", "Acc", "BA", "CA", "AL", "U", "Av", "S", "As", "D", "AU", "AT", "Ag", "AF", "L", "An", "At", "P", "AM", "And", "AS", "The", "AB", "AP", "Ac", "I", "B", "Ant", "Ax", "AE"], "C": ["Y", "K", "CF", "X", "AC", "F", "R", "G", "CR", "Cs", "CP", "CM", "BC", "CN", "MC", "CU", "U", "CAR", "S", "E", "O", "D", "CT", "L", "VC", "CC", "P", "Q", "T", "Co", "TC", "Z", "V", "I", "B", "CS", "CB", "JC", "DC"], "i": ["z", "zi", "m", "l", "y", "t", "ix", "ti", "ci", "r", "v", " j", "gi", "ij", "b", "ind", "id", " ii", "di", "p", "multi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "li", "I", "ia", "u", "x", "ui", "mi", "im"], "_": ["oc", "ico", "IC", "t", "ix", "Cont", "con", "etc", "rc", "err", "ci", "ch", "__", "co", "cc", "ct", "id", "cont", "col", "cp", "______", "ac", "Col"], "c": ["z", "f", "sc", "mc", "m", "cr", "l", "y", "t", "cs", "cf", "con", "ci", "cb", "k", "ca", "ch", "rc", "cin", "v", "co", "b", "lc", "g", "cc", "unc", "ct", "ce", "d", "cos", "p", "cur", "can", "cont", "j", "col", "cp", "com", "xc", "e", "cd", "dc", "pc", "n", "ac", "ic", "o", "u", "cu", "tc", "x", "cm"], "INF": [" INInf", "ANF", "ANN", "INDF", "ANInf", "InN", "INEF", "InFIN", "PINInf", " INFIN", "InInf", "PINFIN", "PINF", "PINEF", " INEF", "INInf", "InF", " INDF", "PINDF", "INN", " INN", "InEF", "PINN", "ANDF", "INFIN"], "dp": ["ps", "pr", "deb", "adr", "params", "df", "dos", "wd", "pb", "gp", "dd", "pp", "lip", "jp", "tp", "dt", "db", "sp", "pipe", "dx", "pa", "vp", "dq", "fp", "imp", "isp", "dm", "di", "pd", "d", "p", "dl", "dep", "da", "ds", "cp", "lp", "td", "tap", "dial", "cd", "dc", "np", "DP", "dh", "bps", "delay", "dj", "osp", "wp", "dr", "DC", "fd"], "a": ["z", "f", "m", "ae", "l", "y", "t", "au", "ga", "ca", "la", "at", "v", "ea", "b", "area", "d", "p", "alpha", "j", "e", "ai", "sa", "aa", "al", "n", "ac", "o", "ma", "w", "ab", "x", "ar", "ach", "an"], "s": ["ps", "z", "sys", "sv", "ls", "sc", "cs", "se", "t", "gs", "su", "os", "ins", "ns", "sw", "sp", "sd", "es", "sn", "b", "S", "p", "ss", "j", "ds", "sb", "sa", "span", "n", "si", "bs", "sin", "sq", "ats", "us", "sat", "south", "als", "ts", "ar"], "ans": ["ps", "cas", "ls", "Ann", "aned", "AN", "ean", "cs", "gs", "amps", "ins", "ars", "ms", "aus", "anas", "ns", "ann", "aps", "arts", "rans", "ands", "eds", "posts", " means", "ids", "ANS", "can", "ds", "An", "anes", "nan", "ses", "ads", "sk", "ats", "ados", "ros", "anks", "an", "ks", "ants", "scan", "lan"]}}
{"code": "import copy\\n\\nh, w, k = map(int, input().split())\\nc = [list(input()) for _ in range(h)]\\nans = 0\\n\\nfor i in range(1 << (h + w)):\\n    l = copy.deepcopy(c)\\n    for p in range(h):\\n        if i >> p & 1:\\n            l[p] = ['r'] * w\\n    for m in range(w):\\n        if i >> (m + h) & 1:\\n            for o in range(h):\\n                l[o][m] = 'r'\\n    s = ''\\n    for i in range(h):\\n        s += ''.join(l[i])\\n    if s.count('#') == k:\\n        ans += 1\\nprint(ans)", "target": "65", "substitutes": {"h": ["f", "ph", "he", "H", "kh", "hm", "ha", "y", "t", "bh", "r", "ch", "v", "ho", "hs", "hi", "q", "b", "g", "th", "http", "hd", "ih", "host", "j", "oh", "ht", "hw", "e", "hl", "dh", "n", "hr", "ah", "hh", "u", "sh", "x", "hp"], "w": ["z", "f", "nw", "ws", "iw", "wm", "win", "wh", "wed", "t", "W", "y", "wd", "r", "v", "wa", "wx", "q", "wl", "wn", "wb", "we", "wr", "wk", "d", "window", "rw", "hw", "wt", "ew", "fw", "n", "u", "wp", "x", "wi", "width"], "k": ["z", "max", "K", "kr", "kh", "uk", "ka", "t", "ck", "kl", "ok", "kk", "ke", "v", "mk", "q", "b", "ak", "kn", "ik", "km", "j", "ek", "kw", "tk", "n", "sk", "ko", "ku", "ks"], "c": ["mc", "C", "cr", "a", "cs", "con", "rc", "ca", "cb", "ch", "v", "co", "cv", "b", "lc", "cn", "cc", "ct", "ce", "col", "cp", "xc", "cd", "dc", "cache", "fc", "n", "nc", "tc", "cu", "u", "cm"], "_": [" int", "all", "parent", "name", "ix", "ow", "ip", "phi", "val", "ind", "ml", "ik", "ai", "int", "wid", " all", "I", "x", "ation"], "ans": ["rors", "ens", "ls", "oss", "anc", "cs", "rs", "amps", "ins", "anas", "ars", "aus", "ons", "ns", "os", "ann", "ms", " Ans", "acs", "aps", "outs", "aos", "arts", "ents", "angs", "urs", "rans", "ums", "eds", "posts", "ids", "ANS", "uns", "ai", "anes", "ams", "ads", "ats", "us", "ros", "ts", "an", "ks", "ants"], "i": ["f", "ini", "ei", "zi", "cli", "ir", "ni", "y", "t", "ix", "ti", "ip", "ci", "il", "ati", "gi", "adi", "v", "ij", "ori", "oi", "hi", "ki", "yi", "asi", "er", "id", "di", "ik", " ii", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "li", "I", "ia", "no", "set", "x", "ui", "mi", "iu", "im"], "l": ["fl", "els", "ol", "ld", "ls", "el", "t", "lis", "lang", "r", "lb", "la", "v", "sl", "lt", "ln", "b", "lc", "g", "tl", "lo", "lib", "cl", "ml", "dl", "L", "lp", "pl", "hl", "lr", "n", "li", "nl", "list", "rl", "ll"], "p": ["op", "pe", "ps", "f", "ph", "pr", "pt", "ap", "pu", "a", "y", "t", "pb", "pp", "ip", "r", "tp", "jp", "v", "perm", "pa", "pm", "q", "b", "mp", "pre", "j", "pi", "pl", "lp", "P", "pc", "n", "u", "yp", "pid", "wp", "x", "pn", "pg"], "m": ["mu", "z", "f", "gm", "mc", "tm", "mon", "a", "y", "t", "M", "r", "mn", "v", "em", "bm", "pm", "b", "g", "mp", "d", "mem", "j", "mt", "om", "mo", "e", "n", "ma", "u", "mm", "x", "mi", "im", "am", "md"], "o": ["op", "f", "out", "a", "y", "t", "ow", "to", "os", "r", "v", "co", "ot", "b", "O", "j", "oa", "mo", "e", "ox", "po", "bo", "n", "oo", "u", "on", "x", "an"], "s": ["ps", "stats", "sts", "str", "ws", "sv", "ls", "lines", "des", "ances", "a", "cs", "rs", "t", "cons", "gs", "xs", "os", "ins", "ms", "ns", "r", "strings", "es", "b", "g", "ies", "S", "ss", "ds", "sb", "ashes", "its", "short", "n", "si", "abs", "bs", "sq", "tes", "ats", "als", "ts", "uts", "js"]}}
{"code": "s = list(input())\\nk = int(input())\\nfor i in range(len(s)):\\n  dp = 26-ord(s[i])+97\\n  if k >= dp and s[i] != \"a\":\\n    k-=dp\\n    s[i] = \"a\"\\n    if k == 0:\\n      break\\nelse:\\n  s[-1] = chr((ord(s[-1])-97+k)%26+97)\\nprint(*s,sep=\"\")", "target": "171", "substitutes": {"s": ["stats", "cs", "ins", "states", "strings", "v", "hs", "settings", "arms", "h", "q", "tests", "g", "bits", "parts", "sb", "its", "ses", "bis", "save", "list", "ts", "js", "sts", "ws", "m", "se", "t", "ms", "os", "ports", "ogs", "eds", "changes", "ss", "ds", "args", "n", "mos", "abs", "print", "als", "sv", "ls", "fs", "rs", "gs", "steps", "r", "c", "b", "csv", "p", "results", "w", "tes", "qs", "ps", "comments", "out", "a", "sis", "ns", "es", "gets", "S", "ests", "vs", "d", "bs", "ats"], "k": ["dk", "K", "kat", "kr", "kt", "uk", "kh", "ka", "ck", "kl", "ikk", "ok", "kk", "r", "ke", "kid", "c", "mk", "q", "g", "ak", "kn", "unk", "ijk", "wk", "ik", "d", "kok", "p", "km", "j", "cp", "kj", "ek", "kw", "tk", "dp", "n", "sk", "ko", "x", "ku", "ks", "yk"], "i": ["io", "ini", "ei", "ri", "zi", "m", "uri", "ir", "ix", "iy", "ti", "\u0438", "ci", "ip", "ji", "gi", "ij", "ori", "index", "ki", "q", "b", "phi", "yi", "ind", "id", "di", "p", "bi", "multi", "j", "pi", "it", "ii", "iri", "si", "xi", "ic", "I", "li", "iter", "me", "x", "ui", "mi", "iu", "im"]}}
{"code": "#!/usr/bin/env python3\\nimport sys, math, itertools, collections, bisect\\ninput = lambda: sys.stdin.buffer.readline().rstrip().decode('utf-8')\\ninf = float('inf') ;mod = 10**9+7\\nmans = inf ;ans = 0 ;count = 0 ;pro = 1\\n\\nn = int(input())\\nA = list(map(int,input().split()))\\nfor i in range(n): A[i] -= 1\\nfor i in range(n):\\n  if not A[i] > i:continue\\n  else:\\n    if A[A[i]] == i:ans += 1\\nprint(ans)", "target": "397", "substitutes": {}}
{"code": "x,y,a,b,c=map(int,input().split())\\nR=sorted(map(int,input().split()),reverse=True)\\nG=sorted(map(int,input().split()),reverse=True)\\nN=sorted(map(int,input().split()),reverse=True)\\nL=sorted(R[:x]+G[:y]+N[:(x+y)],reverse=True)\\nprint(sum(L[:(x+y)]))\\n", "target": "104", "substitutes": {"x": ["f", "yx", "xp", "m", "X", "hex", "my", "xy", "l", "ix", "xs", "xa", "ax", "i", "xx", "r", "key", "v", "xml", "xt", "dx", "wx", "h", "g", "mx", "ex", "foo", "width", "fx", "ctx", "path", "p", "rx", "xxx", "xc", " xx", "ox", "xe", "xxxx", "search", "time", "xi", "n", "lex", "left", "px", "w", "lat", "xf", "xd", "tx"], "y": ["Y", "z", "ym", "ey", "yl", "yn", "ay", "m", "my", "xy", "l", "py", "yer", "iy", "by", "sy", "i", "oy", "yy", "r", "ty", "yt", "ys", "h", "ot", "g", "ies", "yi", "wy", "ny", "ady", "height", "j", "hot", "ry", "dy", "uy", "ye", "axy", "n", "asy", "cy", "vy", "yr", "yd", "sky", "ly"], "a": ["ba", "m", "ta", "ae", "l", "t", "s", "ax", "A", "ca", "r", "at", "v", "ea", "d", "p", "alpha", "da", "e", "sa", "aa", "ac", "n", "ab", "an"], "b": ["f", "ba", "m", "be", "bc", "i", "cb", "r", "ca", "v", "g", "d", "bi", "abb", "e", "beta", "aa", "n", "o", "bs", "B", "ab", "bb", "eb"], "c": ["z", "m", "C", "cr", "cs", "l", "t", "cf", "s", "cb", "r", "ca", "ch", "v", "g", "cc", "ce", "d", "p", "col", "ec", "e", "cd", "dc", "n", "tc", "o", "cm"], "R": ["RR", "TR", "AR", "RG", "Red", "H", "C", "RA", "X", "RB", "IR", "Rs", "MR", "RI", "NR", "A", "r", "RS", "GR", "RO", "RE", "S", "SR", "PR", "RL", "Mr", "Right", "RC", "RT", "DR", "ER", "Re", "RM", "JR", "B", "BR"], "G": ["GRE", "GP", "RG", "C", "Graphics", "PG", "Gs", "LG", "GF", "IG", "GR", "GC", "GB", "MG", "g", "GH", "GL", "TG", "Gi", "GG", "GA", "GU", "BG", "GM", "Ge", "GV", "GN", "VG", "B", "GS", "GT", "GI", "Gr", "CG"], "N": ["Y", "C", "NOR", "AN", "Sn", "Ni", "W", "NB", "NI", "NG", "M", "NR", "CN", "MN", "Na", "NL", "NA", "S", "NT", "D", "SN", "NS", "FN", "NM", "TN", "T", "GN", "J", "n", "Note", "B", "Ns", "NC", "NN", "NH"], "L": ["DL", "ALL", "H", "XL", "Long", "LR", "SL", "l", "LE", "OL", "LS", "ML", "LM", "M", "LT", "LG", "LU", "HL", "EL", "NL", "S", "LIN", "D", "RL", "CL", "P", "List", "T", "LI", "J", "Z", "V", "FL", "B", "LP", "BL", "LD", "SSL", "Log", "LL"]}}
{"code": "#float\u578b\u3092\u8a31\u3059\u306a\\n#numpy\u306fpython\u3067\\nimport sys\\ninput = sys.stdin.readline\\nsys.setrecursionlimit(10**7)\\nfrom collections import Counter, deque\\nfrom collections import defaultdict\\nfrom itertools import combinations, permutations, accumulate, groupby, product\\nfrom bisect import bisect_left,bisect_right\\nfrom heapq import heapify, heappop, heappush\\nfrom math import floor, ceil,pi,factorial\\nfrom operator import itemgetter\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\ndef LI2(): return [int(input()) for i in range(n)]\\ndef MXI(): return [[LI()]for i in range(n)]\\ndef SI(): return input().rstrip()\\ndef printns(x): print('\\n'.join(x))\\ndef printni(x): print('\\n'.join(list(map(str,x))))\\ninf = 10**17\\nmod = 10**9 + 7\\n\\nr,g,b,n=MI()\\ncount=0\\nfor i in range(n//r+1):\\n    for j in range((n-r*i)//g+1):\\n        #print(i,j,n-r*i-g*j)\\n        if n-r*i-g*j>=0 and (n-r*i-g*j)%b==0:\\n            count+=1\\nprint(count)", "target": "315", "substitutes": {}}
{"code": "import sys\\ninput = sys.stdin.readline\\nins = lambda: input().rstrip()\\nini = lambda: int(input().rstrip())\\ninm = lambda: map(int, input().split())\\ninl = lambda: list(map(int, input().split()))\\nout = lambda x: print('\\n'.join(map(str, x)))\\n\\nx, y, z = inm()\\nprint(z, x, y)", "target": "499", "substitutes": {"input": ["img", "expression", "interface", "str", "din", "reader", "load", " Input", "shift", "all", "sample", "format", "result", "raw", "fn", "output", "cin", "request", "point", "filter", "hello", "history", "index", "q", "enum", "ref", "Input", "source", "select", "cmd", "pattern", "config", "hidden", "read", "next", "p", "image", " inputs", "command", "form", "get", "parse", "it", "int", "conf", "focus", "n", "feed", "print", "exec", "arg", "lat", "list", "prefix", "submit", "data", "view", "text", "init"], "ins": ["ens", "din", "isin", " scans", "Ins", " inn", "cin", " pins", "INS", "vin", "ys", "gin", " ans", "eps", " inputs", " din", " outs", " pulls", "inn", " sed", " cis", "ints", " bins", " inst", "obs", "qs", " inf", "oin"], "ini": ["ine", "din", "isin", "zi", "ni", "ti", "ima", "i", "ci", "cin", "gin", "ami", "amin", "ined", "ind", "di", "bi", "inn", "isi", "inc", "ina", "ii", "si", "li", "umi", "mid", "mi"], "inm": ["inputn", "inms", "outn", " inms", "itms", "outm", " inn", "readn", "readmm", "itm", "inputM", "inputms", "inputmm", "inputm", "outl", "outmm", "inn", "inputl", "inmm", "itM", "readm", "readl", "itn", " inM", "inM"], "inl": ["insls", "inss", " inls", "inL", "insL", "inls", "inputL", " inL", "insl", "inputl", "inputls", "inputs"], "out": ["sys", "str", "io", "sum", "conv", "ret", "to", "result", "format", "fn", "outs", "output", "res", "ch", "write", "g", "p", "Out", "int", "conf", "n", "o", "log", "OUT", "print", "list"], "x": ["el", "xp", "m", "X", "a", "ux", "xy", "l", "t", "ix", "xs", "xa", "i", "xx", "xb", "r", "v", "xt", "dx", "wx", "c", "q", "mx", "ex", "fx", "p", "rx", "xc", "ox", "xe", "xxxx", "int", "xi", "lex", "n", "w", "px", "u", "xf", "xd", "tx"], "y": ["Y", "yz", "yo", "ey", "yl", "ym", "yn", "ay", "m", "xy", "ly", "py", "iy", "oy", "i", "yy", "yt", "gy", "ys", "ies", "yi", "ny", "fy", "j", "ry", "ya", "uy", "ye", "axy", "yr", "vy", "iny", "sky", "yk"], "z": ["f", "yz", "str", "oz", "zi", "m", "zip", "xy", "zy", "l", "iz", "uz", "hz", "i", "v", "wx", "az", "cz", "zh", "yi", "ze", "d", "tz", "zer", "j", "zone", "zes", "nz", "Z", "ez", "zz", "zo"]}}
{"code": "\\nfrom collections import defaultdict,deque\\nimport sys,heapq,bisect,math,itertools,string,queue,copy,time\\nsys.setrecursionlimit(10**8)\\nINF = float('inf')\\nmod = 10**9+7\\neps = 10**-7\\ndef inp(): return int(sys.stdin.readline())\\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\\ndef inpl_str(): return list(sys.stdin.readline().split())\\n\\nN,A,B = inpl()\\n\\nMAX = min(A,B)\\nMIN = max(0,A+B-N)\\nprint(MAX,MIN)\\n", "target": "362", "substitutes": {"INF": ["INFT", " INFT", "inF", "INN", "InFT", " INN", "inV", " INV", "InV", "inN", "INV", "InN", "InF", "inFT"], "mod": ["add", "base", "sign", "pad", "inv", "floor", "pos", "mask", "scale", " Mod", "mult", "round", "exp", "frac", "pi", "deg", "Mod", "fac", "MOD", "var", "neg", "dec", "mag", "grow", "prime", "DEC", "mods", "fun"], "eps": ["ps", "lines", "times", "ep", " abs", "PS", "steps", "ms", "pp", "days", "err", "levels", " steps", "errors", "es", " errors", "bytes", "mask", "scale", "phi", "bits", "EP", "E", " EPS", "eq", "exp", "pi", "e", "prime"], "N": ["C", "X", "AN", "R", "G", "NB", "NI", "M", "NR", "MN", "Max", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "L", "NM", "P", "Q", "T", "GN", "n", "Z", "V", "I", "Ns", "NC", "NUM", "NN"], "A": ["AR", "AA", "H", "C", "RA", "X", "AC", "AN", "R", "G", "AV", "ACC", "BA", "CA", "LA", "AL", "U", "NA", "As", "AU", "HA", "AT", "Array", "AF", "L", "GA", "An", "At", "P", "AD", "AM", "This", "AS", "SA", "AE", "AP", "AB", "Alpha", "I", "AH"], "B": ["Y", "Blue", "BB", "BS", "DB", "C", "RB", "R", "SB", "BU", "BO", "NB", "M", "BA", "WB", "BC", "BI", "Bar", "b", "GB", "S", "L", "TB", "LB", "BG", "BY", "Q", "T", "J", "AB", "V", "I", "BL", "USB", "BM", "Bern", "BER", "CB", "Big", "BR", "Bs"], "MAX": ["max", "GEN", "RA", "X", "MX", "Maximum", "CONT", "R", "NR", "MED", "Max", "MAG", "VER", "OLD", "MAP", "ND", "NULL", "HE", "END", "BOX", "MA", "RES", "HEAD", "MOD", "JUST", "GER", "OR", "KEY", "CHECK", "NUM", "TER", "RAW", "VALUE", "AST", "STD", "MD"], "MIN": ["NOT", "SET", "min", "PART", "NE", "VAL", "MP", "MAL", "SAN", "SM", "M", "NR", "MED", "MER", "LESS", "REM", "VER", "Min", "MAP", "Minimum", "PIN", "BIL", "TOP", "UN", "STAT", "JUST", "IM", "MOD", "MS", "MODE", "INFO", "NUM", "VALUE", "DEC", "BY", "FAULT", "IN"]}}
{"code": "\\n# B Magic2\\nA, B, C = map(int, input().split())\\nK = int(input())\\nfor i in range(K + 1):  # range()\u306f0\u304b\u3089\u306a\u306e\u3067+1\\n    for j in range(K + 1):\\n        for k in range(K + 1):\\n            if i + j + k <= K:  # K\u56de\u4ee5\u5185\\n                if A * (2 ** i) < B * (2 ** j):\\n                    if B * (2 ** j) < C * (2 ** k):\\n                        print(\"Yes\")\\n                        exit()\\nprint(\"No\")\\n", "target": "508", "substitutes": {}}
{"code": "from collections import deque\\nN = int(input())\\nque = deque(['a'])\\n\\nwhile len(que) > 0:\\n    s = que.popleft()\\n    if len(s) == N:\\n        print(s)\\n    else:\\n        for i in range(ord(sorted(s)[-1]) - 95):\\n            que.append(s + chr(97 + i))", "target": "427", "substitutes": {"N": ["Num", "K", "NE", "C", "NF", "AN", "F", "R", "NB", "M", "NR", "CN", "A", "Len", "NL", "NA", "Size", "S", "NT", "D", "SN", "NS", "FN", "L", "NM", "No", "P", "Q", "T", "GN", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "Network", "NH"], "que": ["pe", "ued", "ve", "ques", "quer", "ues", "vel", "bl", "ux", "se", "ha", "seq", "rot", "con", "stack", "en", "ue", "buffer", "la", "vre", "fif", "lbs", "ctrl", "co", "empty", "mes", "dq", "dem", "q", "gone", "ped", "lo", "we", "queue", "onde", "de", "mem", "cur", "te", "ru", "eq", "alph", "pl", "com", "buf", "ne", "xe", "pse", "bo", "cache", "lex", "quick", "ob", "aque", "quit", "obs", "list", "qq", "req", "qs", "bar", "Que", "qu"], "s": ["z", "ps", "sys", "sing", "str", "sv", "f", "ls", "sts", "m", "a", "sis", "simple", "spec", "l", "rs", "se", "y", "gs", "t", "sql", "sample", "ms", "os", "ns", "r", "single", "sw", "k", "v", "sp", "sl", "hs", "h", "b", "g", "S", "sen", "string", "p", "ss", "less", "ds", "sb", "search", "short", "txt", "bis", "n", "abs", "sq", "w", "ats", "x", "ts", "js", "st"], "i": ["z", "io", "ini", "zi", "m", "l", "ti", "ci", "k", "gi", "v", "c", "hi", "oi", "q", "b", "yi", "di", "bi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "li", "I", "x", "mi"]}}
{"code": "H = int(input())\\nW = int(input())\\nN = int(input())\\n\\na = max(H,W)\\n\\nif N%a == 0:\\n    print(N//a)\\nelse:\\n    print(N//a+1)\\n", "target": "592", "substitutes": {"H": ["K", "HO", "He", "CH", "Ch", "X", "HT", "HI", "M", "HB", "A", "HL", "High", "HD", "HH", "h", "TH", "MH", "Host", "His", "D", "HA", "ASH", "HE", "DH", "HR", "SH", "Help", "V", "B", "OH", "RH", "It", "HS", "AH", "NH"], "W": ["Y", "K", "X", "WD", "F", "WS", "R", "WW", "WT", "M", "WB", "A", "Weight", "WM", "WER", "SW", "D", "WP", "WC", "WI", "L", "DW", "WA", "VW", "P", "T", "V", "w", "BW", "B", "EW", "WH", "MW", "Wh"], "N": ["Y", "Number", "Name", "Num", "K", "NE", "C", "X", "F", "R", "G", "CNN", "NB", "Ni", "NG", "NI", "M", "NR", "A", "MN", "CN", "Na", "NA", "Size", "S", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "P", "No", "T", "MAN", "GN", "J", "n", "V", "I", "B", "Ns", "NO", "NN", "NH"], "a": ["z", "ack", "ba", "apa", "ae", "ta", "att", "l", "t", "sta", "ow", "au", "ga", "s", "xa", "i", "A", "ca", "la", "pa", "ea", "an", "b", "g", "area", "ava", "p", "alpha", "da", "ao", "ica", "act", "oa", "zero", "sa", "ai", "aa", "span", "ac", "n", "sha", "ma", "w", "o", "ia", "ab", "eas", "am", "ast", "aff", "auto"]}}
{"code": "import collections\\nK = int(input())\\n\\nif K < 10:\\n    print(K)\\n    exit()\\n\\nq = collections.deque()\\nfor i in range(1, 10):\\n    q.append(i)\\ni = 9\\nwhile True:\\n    x = q.popleft()\\n    lsk = x % 10\\n    shifted = x * 10\\n    if lsk != 0:\\n        q.append(shifted + lsk - 1)\\n        i += 1\\n        if i == K:\\n            print(shifted + lsk - 1)\\n            break\\n    q.append(shifted + lsk)\\n    i += 1\\n    if i == K:\\n        print(shifted + lsk)\\n        break\\n    if lsk != 9:\\n        q.append(shifted + lsk + 1)\\n        i += 1\\n        if i == K:\\n            print(shifted + lsk + 1)\\n            break\\n", "target": "339", "substitutes": {"K": ["HK", "Y", "KA", "KN", "KY", "FK", "PK", "KT", "H", "C", "X", "F", "KK", "R", "KO", "SK", "G", "Han", "N", "M", "k", "KR", "Kent", "KI", "Mask", "KS", "TH", "S", "OK", "VK", "NK", "KING", "UK", "L", "IT", "P", "Q", "KE", "T", "TC", "J", "Z", "KEY", "V", "Ku", "I", "B", "KC", "KER", "MK", "AK"], "q": ["qt", "ued", "f", "quer", "gm", "ues", "ld", "ques", "ve", "qa", "iq", "pg", "qv", "l", "y", "t", "que", "gs", "ck", "pp", "k", "ue", "check", "v", "quote", "query", "lock", "co", "c", "dq", "h", "fresh", "resh", "g", "queue", "force", "eq", " Q", "p", "bt", "exp", "qi", "e", "Q", "Queue", "aq", "cache", "conf", "quick", "o", "sq", "ql", "quit", "list", "qq", "req", "qs", "requ", "ll", "qu"], "i": ["ini", "ei", "ri", "zi", "m", "cli", "ni", "l", "y", "t", "Ni", "ix", "chain", "ti", "info", "ip", "ci", "\u0438", "k", "ji", "ati", "gi", "v", "status", "ij", "hi", "index", "oi", "ki", "phi", "g", "yi", "id", "di", "ik", "num", "p", "bi", "multi", "j", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "iri", "li", "I", "u", "o", "ui", "mi", "iu", "im", "iti"], "x": ["z", "f", "xes", "xp", "X", "xd", "ux", "xy", "l", "y", "ix", "xs", "xa", "xx", "xb", "ax", "xxxxxxxx", "v", "xt", "dx", "wx", "c", "h", "ex", "p", "rx", " xx", "xc", "xe", "xi", "px", "u", "w", "xf", "zx", "tx", "inx"], "lsk": ["ailsk", "LSik", "psky", "playsch", "linesk", "objky", "olsky", "lesk", "leskk", "selskn", "lskk", "psk", "LSkin", "leskg", "ltk", "lsky", "valsk", "lesks", "olskn", "leska", "lsked", "psks", "LSak", "lsK", "objf", "selskk", "msk", "tsk", "retsks", "listsky", "LSke", "leske", "lesik", "lskin", "olsik", "lcky", "objke", "wsark", "wske", "lskn", "mske", "selsK", "LSka", "mskin", "tsK", "lesK", "ltky", "LSk", "selsik", "lesf", "lsv", "lskg", "ailske", "retskg", "ltf", "lesky", "listsk", "olsv", "lsks", "selsf", "lck", "valskg", "lsf", "lska", "playsky", "lsark", "tsik", "lesv", "playsik", "lineske", "listsik", "retsk", "psv", "olskk", "objk", "ltke", "linesik", "leskn", "lsch", "lsik", "msak", "listsch", "retsked", "playsk", "lcke", "lesked", "olsch", "olske", "valsked", "lcark", "selske", "wsk", "valsks", "pske", "lske", "tsf", "wsky", "selsk", "ailsak", "lsak", "lineska", "ailskin", "olsks", "olsk", "psark"], "shifted": ["SHift", " shattered", "sshifted", " shifting", "SHarded", "slifted", "slift", "thifted", "swifter", "lifter", "sshifting", "lifted", "sshanged", " shifter", " sharded", "Shifting", "khifted", "SHifting", "thift", "lift", "charded", "swift", "khattered", "kharded", "khift", "chift", "shanged", "chifting", "chifter", "shifter", "SHifter", "thifting", " shanged", "khifting", "swifted", "thifter", "SHifted", "swifting", "lifting", "swarded", "slanged", "shattered", "sharded", "chifted", "shifting", "slarded", "sshattered", "Shifted", "ssharded", "Shattered", "sshifter", "slifter", "shift", "slifting"]}}
{"code": "from collections import deque\\n\\nn = int(input())\\n\\nl = deque()\\nfor _ in range(n):\\n    command = input().split()\\n    if command[0] == \"insert\":\\n        l.appendleft(command[1])\\n    elif command[0] == \"delete\":\\n        try:\\n            ind = l.remove(command[1])\\n        except ValueError:\\n            pass\\n    elif command[0] == \"deleteFirst\":\\n        l.popleft()\\n    elif command[0] == \"deleteLast\":\\n        l.pop()\\n        \\nprint (\" \".join(l))", "target": "232", "substitutes": {"n": ["z", "nn", "m", "t", "nt", "number", "nr", "s", "N", "i", "len", "ns", "mn", "k", "nm", "r", "v", "na", "c", "ln", "sn", "nd", "g", "cn", "nb", "num", "d", "p", "j", "it", "np", "nan", "nc", "nl", "x", "count"], "l": ["f", "fl", "lit", "ol", "lines", "ld", "ls", "el", "le", "m", "lv", "t", "all", "gs", "lis", "kl", "lang", "i", "lb", "la", "v", "lock", "sl", "c", "lt", "long", "ln", "b", "lc", "g", "tl", "lo", "ml", "dl", "p", "L", "j", "lp", "pl", "local", "hl", "lr", "locked", "li", "left", "shell", "lf", "nl", "list", "rl", "lists", "ll"], "_": [" j", "__", " __", "ny", " c", "j", " you", "___"], "command": ["expression", "function", "capacity", "message", "line", "when", "field", "comment", "exclusive", "method", "chain", "action", "case", "control", "requisite", "channel", "request", "attribute", "communication", "direction", "check", "query", "condition", "slave", "media", "force", "password", "cmd", "config", "argument", "call", "power", "directory", "process", "pattern", "volume", "operation", "rule", "com", "statement", "word", "form", "minute", "execute", "Command", "column", "three", "block", "component", "script", "event", "template", "document", "definition", "sequence", "response", "connection", "example", "button", "handler", "usage", "controller", "menu", "category", "description"], "ind": ["sub", "ld", "line", "ent", "m", "label", "rep", "hold", "pos", "i", "len", "err", "ll", "length", "index", "nd", "cmd", "exp", "j", "end", "lp", "self", "loc", "Ind", "log", "vc", "inst", "count"]}}
{"code": "import math\\nimport sys\\nreadline = sys.stdin.readline\\n\\n\\ndef main():\\n    n = int(readline().rstrip())\\n\\n    for i in range(50001):\\n        k = math.floor(i * 1.08)\\n        if n == k:\\n            print(i)\\n            return\\n    print(':(')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "194", "substitutes": {"readline": ["writeLine", "readsonline", "readernl", "readse", "readerline", "Readonline", "writelines", " readonline", "readpoint", "Readjust", " readlines", "Readline", "READline", "readLine", "readsse", "readsLine", "writeline", "ReadLine", "READlines", "Readnl", "Readse", "readerjust", "Readpoint", "READjust", "readsline", "readnl", "READnl", " readse", " readpoint", " readLine", "readlines", "readerlines", "readonline", "writepoint", "readjust", "Readlines"], "n": ["nn", "nw", "m", "ni", "l", "nt", "t", "nr", "N", "ns", "r", "nm", "un", "na", "c", "ln", "ng", "sn", "an", "g", "nu", "nb", "num", "nv", "ne", "net", "nor", "np", "nan", "nc", "o", "w", "no", "nl", "non", "x", "norm"], "i": ["f", "ini", "zi", "y", "ix", "ti", "s", "ip", "r", "ji", "gi", "v", "ij", "hi", "oi", "index", "ki", "q", "ori", "yi", "id", "di", "ik", "bi", "pi", "qi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "u", "iri", "x", "mi", "iu"], "k": ["dk", "K", "kr", "kh", "ka", "ck", "kl", "ikk", "kick", "kk", "sch", "ke", "ok", "kid", "kan", "kar", "mk", "ak", "kn", "ijk", "wk", "ik", "kie", "kok", "km", "j", "kj", "ek", "kw", "tk", "sk", "ko", "ku", "ks"]}}
{"code": "n = int(input())\\nt = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nmod = 10 ** 9 + 7\\n\\nfor ti, ai in zip(t, a):\\n    if ti == ai == t[-1] == a[0]:\\n        break\\nelse:\\n    print(0)\\n    exit()\\n\\nans, frag = 1, 0\\nfor i in range(n):\\n    if t[i] == a[i] == t[-1] == a[0]:\\n        frag = 1\\n    if 0 < i < n - 1 and t[i - 1] == t[i] and a[i] == a[i + 1]:\\n        ans = ans * min(t[i], a[i]) % mod\\nprint(ans if frag == 1 else 0)\\n", "target": "321", "substitutes": {"n": ["z", "nn", "nia", "names", "m", "l", "nt", "number", "name", "N", "len", "ns", "mn", "k", "v", "na", "c", "ln", "sn", "q", "g", "cn", "nu", "nb", "num", "d", "size", "p", "j", "pi", "ne", "np", "nan", "nc", "w", "no", "nl"], "t": ["f", "tu", "tmp", "pt", "ent", "m", "tm", "ter", "ta", "att", "l", "tt", "nt", "tw", "s", "r", "tp", "ty", "at", "dt", "v", "c", "lt", "h", "ot", "b", "q", "g", "ct", "tree", "tg", "test", "d", "title", "te", "p", "tif", "tip", "j", "td", "it", "wt", "tf", "T", "tr", "tc", "o", "table", "u", "tab", "ts", "rt", "st"], "a": ["z", "f", "ba", "out", "el", "ap", "ta", "ae", "att", "another", "all", "sta", "au", "s", "ga", "ed", "A", "ca", "at", "la", "pa", "na", "wa", "ea", "an", "b", "g", "aux", "area", "p", "va", "da", "ao", "app", "oa", "e", "sa", "ata", "aa", "al", "ac", "o", "ma", "abs", "u", "ia", "ab", "eas", "aaa", "ar", "am"], "mod": ["sub", "add", "min", "max", "sum", "times", "m", "sign", "dig", "cond", "ran", "debug", "ms", "step", "ver", "div", "scale", " Mod", "sim", "ind", "lib", "mult", "com", "mt", "form", "Mod", "od", "MOD", "lex", "ac", "mag", "set", "reg", "mods", "fun"], "ti": ["tu", "ita", "ei", "zi", "ta", "ni", "tin", "aci", "ci", "ati", "Ti", "gi", "hi", "ki", " ki", "ot", "yi", "asi", "di", "iat", "uti", "te", "vi", "tif", "TI", "it", "ii", "xi", "si", "tri", "li", "iti", "ui", "mi", "tis", "wi"], "ai": ["pai", "AI", "apa", "zi", "ap", "aii", "am", "ta", "ae", "ais", "au", "xa", "ang", "ci", "ati", "pa", "ij", "hi", "yi", "asi", "di", "iat", "bi", "ao", "pi", "oa", "sa", "ait", "aj", "xi", "li", "ia", "umi", "mi", "ali", "ar", "an"], "ans": ["ens", "ars", "ls", "annot", "names", "mas", "aned", "AN", "ones", "oss", "ran", "pan", "amps", "xs", "iann", "s", "ins", "anas", "ms", "aus", "ns", "ons", "mn", "ann", "os", " Ans", "aps", "aos", "ents", "ians", "rans", " means", "san", "terms", "ANS", "eps", "leans", "An", "uns", "offs", "nan", "mean", "ras", "ats", "us", "ions", "an", "ks", "ants", "jas"], "frag": ["fragger", "feig", "brag", "prig", "Frag", " frig", "feag", "fragg", "Frig", "frig", "feagg", "prag", "Frags", "pragg", "Fragged", "frang", "feagger", " fragged", "Frang", "prags", "brig", "trag", "bragger", "Fragger", "trang", "trig", "bragg", " frang", "Fragg", "frags", "brags", "fragged", "tragged"], "i": ["f", "io", "ini", "ei", "ri", "zi", "uri", "cli", "l", "y", "ix", "s", "ip", "ci", "\u0438", "ji", "gi", "v", "status", "ij", "hi", "ori", "index", "ki", "oi", "phi", "b", "g", "ami", "sim", "ind", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "qi", "isi", "it", "int", "ii", "xi", "si", "ic", "iri", "li", "I", "iter", "x", "ui", "mi", "iu", "im"]}}
{"code": "from collections import Counter\\nn = int(input())\\na = list(map(int, input().split()))\\nb = Counter(a)\\nans = 0\\nfor i in set(a):\\n    if b[i] < i:\\n        ans += b[i]\\n    else:\\n        ans += b[i]-i\\nprint(ans)", "target": "536", "substitutes": {"n": ["nn", "names", "nt", "name", "t", " m", "s", " names", "N", "ns", "en", "Na", " fn", "na", "c", "an", "id", "d", "p", "pi", " ns", "ai", "o", "x", " N", " id", " na"], "a": ["f", "active", "ba", "apa", "ap", "m", "am", "ta", "ae", "l", "all", "t", "y", "ga", "au", "s", "A", "ca", "input", "la", "at", "na", "c", "ea", "aux", "area", "d", "p", "oa", "e", "isa", "sa", "aa", "abs", "ac", "ma", "o", "w", "ab", "eas", "aaa", "an"], "b": ["f", "rb", "ba", "ib", "m", "mb", "bl", "be", "l", "y", "bc", "bp", "ga", "pb", "cb", "fb", "db", "v", "c", "g", "wb", "nb", "emb", "bi", "br", "bf", "e", "sb", "gb", "ob", "bs", "B", "ab", "bb", "base", "eb"], "ans": ["ens", "mas", "aned", "vers", "AN", "oss", "ran", "pan", "rs", "amps", "ins", "anas", "ms", "aus", "ons", "ns", "ars", "ann", "outs", "os", "acs", "aps", "aos", "arts", "ians", "ums", "asks", "rans", "ands", "eds", "posts", " means", "vs", "ANS", "uns", "nas", "helps", "offs", "anes", "nan", "ams", "ads", "ras", "ates", "ats", "orts", "umes", "ros", "anks", "an", "ks", "ants", "lan", "irms"], "i": ["z", "io", "ini", "ri", "zi", "m", "uri", "t", "ix", "ti", "ip", "key", "ci", "k", "ji", "gi", "v", "ij", "index", "ki", "q", "ami", "yi", "ind", "id", "di", "p", "bi", "j", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "o", "li", "u", "I", "set", "us", "x", "ui", "mi", "iu", "multi"]}}
{"code": "import collections\\nN = int(input())\\n*A, = map(int, input().split())\\nprint(max(collections.Counter(A + [a-1 for a in A] + [a+1 for a in A]).values()))", "target": "42", "substitutes": {"N": [" name", " af", "AA", " R", " P", " L", " O", " names", " C", " D", " v", " p", " ans", " Q", " out", " ns", " total", " data", "n", "Alpha", " NT", " B", " n", " na", " NA"], "A": ["Y", "AR", "AA", "H", "C", "AC", "G", "au", "M", "BA", "PA", "CA", "LA", "AL", "What", "Given", "EA", "There", "Some", "NA", "S", "These", "E", "As", "All", "HA", "Array", "D", "AF", "L", "GA", "An", "P", "Q", "_", "This", "AH", "You", "AS", "T", "AE", "AB", "AP", "V", "One", "Alpha", "B", "I", "Z", "Ax", "SA"], "a": ["f", "ita", "ba", "let", "apa", "ta", "ae", "ade", "ja", "ka", "all", "t", "name", "ha", "ow", "to", "au", "ga", "author", "xa", "ca", "div", "at", "la", "v", "pa", "na", "wa", "c", "index", "h", "era", "b", "aqu", "area", "go", "ora", "p", "va", "alpha", " ya", "count", "app", "oa", "zero", "aka", "isa", "sa", "ai", "span", "aa", "ra", "ew", "n", "o", "ma", "sha", "w", "ach", "an", "data", "aff", "auto"]}}
{"code": "if __name__ == '__main__':\\n\tn = int(input())\\n\\n\ttmp = n // 2\\n\tprint(tmp * (n - tmp))", "target": "402", "substitutes": {"n": ["z", "f", "nn", "names", "m", "l", "nt", "t", "number", "name", "s", "N", "i", "ns", "nm", "k", "v", "na", "c", "sn", "h", "b", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "int", "np", "nan", "nc", "o", "u", "nl", "x", "new"], "tmp": ["mu", "tu", "out", "obj", "sum", "tm", "m", "nt", "t", "tt", "rot", "i", "nm", "msg", "v", "sp", "perm", "timeout", "now", "mk", "term", "nd", "split", "mp", "temp", "nb", "test", "num", "orig", "size", "p", "j", "td", "total", "cmp", "tf", "np", "cum", "mm", "prefix", "prime", "count", "new", "st"]}}
{"code": "h, w = map(int, input().split())\\na = [list(map(str, list(input()))) for i in range(h)]\\nl1 = [\".\" for i in range(w)]\\nl2 = [\".\" for i in range(h)]\\nfor i in range(h):\\n  if \"#\" in a[i]:\\n    l2[i] = \"#\"\\nfor i in range(w):\\n  if \"#\" in [a[j][i] for j in range(h)]:\\n    l1[i] = \"#\"\\nfor i in range(h):\\n  l = []\\n  for j in range(w):\\n    if l1[j] == \"#\" and l2[i] == \"#\":\\n      l.append(a[i][j])\\n  if len(l) != 0:\\n    print(\"\".join(l))", "target": "413", "substitutes": {"h": ["z", "he", "H", "m", "kh", "rh", "hm", "ha", "y", "t", "hz", "bh", "r", "k", "v", "ho", "hs", "hi", "q", "b", "g", "th", "http", "hd", "ih", "p", "host", "oh", "ht", "hl", "n", "hr", "o", "ah", "hh", "u", "x", "sh", "his"], "w": ["z", "nw", "ws", "iw", "win", "wh", "y", "ww", "W", "t", "wd", "s", "wall", "sw", "r", "v", "wa", "wx", "aw", "hi", "wl", "wn", "wb", "we", "wr", "d", "p", "window", "rw", "hw", "wt", "ew", "fw", "wid", "n", "u", "wal", "wp", "x", "width"], "a": ["f", "ba", "apa", "m", "ae", "ta", "att", "ha", "t", "sta", "au", "ga", "ed", "xa", "s", "A", "ca", "at", "la", "v", "history", "c", "aw", "ea", "an", "b", "area", "va", "p", "alpha", "ada", "ao", "da", "app", "oa", "e", "ai", "sa", "ata", "aa", "ac", "o", "ma", "ab", "aaa", "ana", "am", "data"], "i": ["z", "io", "ei", "ini", "ion", "zi", "\u00ed", "m", "ir", "tim", "ni", "y", "ix", "ti", "info", "s", "ip", "ci", "\u0438", "jp", "il", "ji", "ati", "gi", "v", "json", "ij", "c", "hi", "oi", "index", "q", "phi", "ki", "g", "ami", "yi", "id", "di", "ik", "p", "pi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "o", "li", "ia", "iter", "n", "u", "I", "x", "iti", "mi", "iu", "im", "ui", "on"], "l1": [" l4", "L0", "li2", " l3", "pl4", " lOne", "l001", "li001", "pl0", "liOne", "la16", " l16", "la1", "la3", "L1", "l0", "li16", "lOne", " l001", "li1", "li3", "l16", "pl1", "l4", "l3", " l0", "LOne", "L2", "pl2", "la001", "L4", "li0"], "l2": [" l4", "sl2", "L0", "li2", "dl1", "ltwo", "L02", " l5", "sl1", "nltwo", "nl1", "l02", "sl0", " l02", "L1", "l0", "sl02", "dl2", "loder", "nl2", " loder", "lioder", "l5", "li1", "l4", " ltwo", "dltwo", "Loder", " l0", "L2", "nl5", "L4", "li4", "dl5"], "j": ["z", "f", "io", "obj", "ion", "pr", "jl", "ja", "y", "t", "row", "fr", "ip", "jp", "r", "ji", "v", "json", "ij", "job", "q", "b", "g", "jac", "p", "bi", "oj", "jo", "br", "kj", "pi", "fi", "e", "it", "jj", "jump", "aj", "J", "n", "o", "li", "uj", "dj", "x", "bj", "js", "jc"], "l": ["z", "fl", "ol", "lines", "ls", "yl", "el", "isl", "jl", "m", "bl", "lis", "kl", "los", "r", "lb", "v", "lock", "sl", "c", "ln", "b", "lc", "g", "tl", "lo", "cl", "ml", "dl", "p", "L", "lp", "pl", "hl", "lr", "n", "o", "li", "nl", "list", "rl", "ll"]}}
{"code": "n = int(input())\\ns = input()\\ncount = 0\\nr = s.count('R')\\ng = s.count('G')\\nb = s.count('B')\\nfor i in range(0,n-2):\\n    for j in range(i+1,n-1):\\n        if j < 2*j -i <= n-1 and sorted([s[i],s[j],s[2*j-i]]) == ['B','G','R']:\\n            count += 1\\nprint(r*g*b - count)", "target": "294", "substitutes": {"n": ["nn", "names", "m", "l", "t", "nt", "N", "len", "ns", "mn", "v", "ll", "na", "c", "sn", "q", "an", "cn", "nu", "nb", "num", "d", "size", "p", "network", "ne", "net", "nor", "np", "nan", "nc", "o", "nl", "x", "norm"], "s": ["ps", "stats", "sts", "f", "sv", "lines", "ls", "ws", "m", "fs", "a", "sis", "spec", "cs", "se", "rs", "t", "gs", "l", "ins", "os", "ms", "ns", "sw", "input", "strings", "sp", "sl", "c", "ys", "q", "eds", "h", "S", "vs", "p", "ss", "less", "ds", "parts", "e", "sb", "sa", "ashes", "its", "bis", "ses", "abs", "bs", "sq", "w", "tes", "ats", "als", "st", "ts", "qs", "js"], "count": ["core", "add", "found", "sum", "report", "only", "other", "name", "close", "delete", "attr", "v", "status", "tag", "h", "group", "ct", "num", "call", "cell", "first", "set", "z", "child", "comment", "t", "number", "result", "ch", "index", "Count", "property", "nb", "ind", "test", "ctr", "cd", "const", "current", "cast", "ount", "unique", "l", "nt", "common", "length", "c", "size", "p", "total", "send", "strip", "cache", "weight", "conf", "stat", "C", "cond", "find", "counter", "score", "hold", "amount", "attribute", "err", "now", "flag", "th", "code", "id", "d", "get", "search", "hash", "handle", "base"], "r": ["rb", "pr", "rr", "rg", "sr", "cr", "a", "range", "R", "rh", "l", "rs", "fr", "attr", "rc", "gr", "c", "h", "rf", "er", "re", "d", "rx", "br", "ro", "ur", "rd", "mr", "reg", "dr", "rar", "ar", "rt"], "g": ["z", "gm", "m", "rg", "fg", "l", "y", "G", "gs", "ga", "gp", "bg", "gr", "v", "gu", "c", "gt", "q", "gg", "group", "ge", "h", "tg", "re", "d", "gain", "gd", "ig", "mg", "gb", "eg", "u", "reg", "dr", "og", "pg"], "b": ["z", "f", "rb", "ib", "m", "a", "mb", "blue", "be", "l", "y", "t", "bc", "back", "bg", "cb", "fb", "db", "v", "c", "nb", "d", "p", "bi", "br", "sb", "gb", "beta", "bis", "ob", "u", "B", "ab", "bb", "base", "eb"], "i": ["ini", "ish", "ri", "zi", "m", "ir", "l", "y", "ix", "ti", "ip", "ci", "ji", "gi", "v", "ij", "index", "ki", "phi", "yi", "ind", "id", "asi", "di", "ik", "iat", "p", "bi", "pi", "e", "ai", "it", "ii", "xi", "si", "ic", "iri", "li", "I", "u", "ia", "o", "x", "ui", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "a", "ja", "l", "y", "t", "jp", "ji", "k", "v", "json", "ij", "job", "q", "h", "jac", "d", "p", "bi", "oj", "kj", "it", "jj", "jump", "aj", "J", "si", "o", "ii", "uj", "dj", "li", "u", "x", "bj", "js", "jc"]}}
{"code": "def main():\\n    n = int(input())\\n    s = input()\\n    left = 0\\n    right = 0\\n    for i in range(n):\\n        if s[i] == '(':\\n            right += 1\\n        else:\\n            if right == 0:\\n                left += 1\\n            else:\\n                right -= 1\\n    print('('*left+s+')'*right)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "790", "substitutes": {"n": ["nn", "nia", "m", "l", "nt", "t", "number", "nr", "N", "ns", "r", "k", "na", "c", "ln", "sn", "q", "cn", "nu", "nb", "num", "d", "p", "j", "network", "ne", "net", "gn", "np", "nan", "nc", "o", "no", "nl", "x", "norm", "count"], "s": ["ps", "sts", "str", "sv", "ws", "ls", "out", "has", "fs", "a", "spec", "l", "rs", "t", "second", "gs", "xs", "ins", "ms", "os", "ns", "r", "ends", "sp", "hs", "c", "ys", "gets", "b", "S", "string", "p", "ss", "j", "ds", "e", "sb", "its", "short", "ses", "abs", "sq", "w", "tes", "ats", "u", "st", "ts", "qs", "js"], "left": ["min", "out", "offset", "top", "m", "down", "field", "wrong", "both", "l", "t", "name", "old", "full", "back", "len", "r", "Left", "single", "url", "open", "ft", "lock", "length", "joined", "lt", "long", "index", "start", "lo", "internal", "d", "path", "L", "j", "low", "local", "bottom", "net", "half", "main", "inner", "up", "shell", "w", "lat", "nl", "x", "lower", "ll", "width"], "right": ["rest", "max", "out", "different", "top", "recent", "m", "one", "wrong", "down", "third", "field", "range", "rh", "R", "paren", "t", "full", "row", "result", "back", "ax", "r", "Left", "res", "value", "root", "before", "co", "dx", "length", "ft", "long", "start", "rights", "random", "remote", "re", "d", "rew", "next", "p", "just", "Right", "end", "none", "outer", "last", "padding", "cross", "inner", "short", "block", "w", "rem", "reverse", "correct", "success", "x", "head", "width", "shift"], "i": ["f", "zi", "m", "l", "y", "ix", "ti", "ip", "r", "k", "ji", "gi", "ij", "c", "index", "ki", "q", "yi", "ind", "id", "di", "p", "bi", "j", "pi", "ai", "it", "ii", "iri", "si", "xi", "batch", "li", "I", "ic", "x", "mi", "im"]}}
{"code": "n = int(input())\\nans = 0\\nsum = 0\\nfor _ in range(n):\\n  a = int(input())\\n  if a == 0:\\n    ans += sum//2\\n    sum = 0\\n    continue\\n  sum += a\\nans += sum // 2\\nprint(ans)", "target": "455", "substitutes": {"n": ["nn", "nw", "nia", "m", "l", "pan", "nt", "t", "nr", "N", "i", "len", "ns", "mn", "v", "na", "c", "ln", "sn", "an", "cn", "nb", "num", "nv", "d", "p", "ne", "total", "net", "gn", "np", "nan", "nc", "no", "nl", "x"], "ans": ["ens", "stats", "wan", "ls", "annot", "mas", "oss", "ean", "rs", "cons", "amps", "xs", "gs", "s", "ins", "reads", "ms", "aus", "ns", "ons", "outs", "ann", "anas", "acts", "aos", "ents", "ians", "ums", "an", "ays", "posts", "vs", "ANS", "ots", "ds", "uns", "nas", "offs", "actions", "mean", "ams", "ads", "ats", "vals", "ts", "ames", "ks", "ants"], "sum": ["tu", "sys", "add", "max", "sv", "out", "ay", "m", "comment", "se", "t", "Sum", "su", "s", "ms", "ns", "ann", "scan", " sums", "na", "ums", "index", "an", "ass", "g", "share", "must", "sim", "num", "mem", "size", "sem", "alpha", "ss", "ut", "sam", "zero", "total", "sa", "span", "uss", "mean", "average", "si", "cum", "ma", "summary", "set", "us", "sat", "um", "sh", "ize", "am", "count", "st"], "_": ["k", " j", "__", " __", "val", " the", "no", "___", "x"], "a": ["z", "f", "ba", "add", "apa", "m", "am", "ae", "acc", "this", "t", "sta", "au", "ga", "ed", "i", "ca", "A", "at", "la", "v", "now", "na", "aw", "c", "ea", "b", "val", "area", "p", "alpha", "da", "oa", "act", "ai", "sa", "aa", "ac", "o", "ma", "w", "u", "ia", "ab", "ar", "an"]}}
{"code": "n, m, l = [int(i) for i in input().split()]\\n\\nA = []\\nB = []\\nC = []\\nfor ni in range(n):\\n    A.append([int(i) for i in input().split()])\\n\\nfor mi in range(m):\\n    B.append([int(i) for i in input().split()])\\n\\nfor i in range(n):\\n    C.append([])\\n    for j in range(l):\\n        C[i].append(0)\\n        for k in range(m):\\n            C[i][j] += A[i][k] * B[k][j]\\n\\nfor li in range(n):\\n    print(\" \".join([str(s) for s in C[li]]))", "target": "684", "substitutes": {"n": ["nn", "a", "y", "t", "nt", "N", "ns", "r", "mn", "nm", "v", "na", "c", "ln", "h", "an", "b", "sn", "g", "q", "nu", "nb", "num", "d", "p", "o", "no", "on", "x", "ll"], "m": ["z", "gm", "mc", "tm", "a", "y", "t", "sm", "ms", "M", "mn", "r", "v", "c", "bm", "mk", "h", "q", "b", "an", "g", "dm", "ml", "d", "p", "mt", "e", "o", "mr", "u", "w", "ma", "mm", "im", "cm"], "l": ["z", "ls", "el", "le", "lv", "t", "lin", "lis", "len", "r", "il", "v", "sl", "c", "lt", "ln", "h", "b", "lc", "g", "lo", "ml", "p", "L", "lp", "pl", "al", "o", "nl", "list", "ll", "ly"], "i": ["z", "io", "ei", "ini", "ri", "zi", "uri", "cli", "a", "ir", "iom", "y", "t", "ix", "ti", "info", "\u0438", "ci", "ip", "ili", "il", "ji", "ati", "v", "ij", "c", "oi", "ki", "q", "h", "ie", "id", "di", "ik", "p", "pi", "fi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "I", "u", "ia", "x", "iti", "iu", "im", "ui"], "A": ["App", "Ass", "AR", "K", "AA", "Ar", "H", "API", "AC", "AN", "Al", "a", "R", "IA", "ACC", "N", "M", "ABC", "AL", "U", "Av", "S", "As", "AU", "AT", "Array", "Ag", "AF", "L", "GA", "An", "At", "P", "AM", "AH", "This", "SA", "AS", "Auth", "The", "AB", "AP", "I", "Alpha", "Ant", "ACT", "AE"], "B": ["BE", "Blue", "BB", "BS", "VB", "DB", "EB", "Two", "RB", "OB", "But", "G", "SB", "NB", "BO", "BU", "N", "M", "BA", "WB", "BC", "IB", "BI", "Be", "Bar", "b", "GB", "L", "TB", "BG", "FB", "PB", "T", "J", "AB", "I", "BL", "BER", "Bern", "CB", "BF", "BR", "Bs"], "C": ["Che", "Y", "K", "H", "Ch", "X", "F", "R", "G", "W", "CR", "Cs", "CP", "CM", "N", "M", "BC", "CA", "CN", "CU", "c", "U", "Cu", "CD", "S", "E", "O", "D", " c", "CT", "L", "CC", "Cal", "P", "Cr", "LC", "T", "Co", "YC", "V", "I", "CS", "CB", "Car", "JC", "DC", "CG"], "ni": ["ini", "ei", "ri", "zi", "ti", "nm", "mn", "ji", "ani", "ati", "gi", "na", "ki", "nu", "yi", "eni", "ny", "ie", "di", "pi", "ne", "fi", "qi", "ii", "si", "iti", "wi", "obi"], "mi": ["mu", "ini", "ei", "zi", "ti", "ci", "mn", "il", "gi", "mis", "ki", "yi", "di", "ml", "mic", "bi", "vi", "pi", "fi", "mo", "ai", "ii", "si", "ma", "ia", "igi"], "j": ["z", "ion", "jl", "ja", "y", "t", "jp", "ji", "r", "v", "ij", "h", "q", "b", "je", "g", "jac", "ik", "p", "bi", "br", "jo", "kj", "jj", "jump", "aj", "J", "ju", "o", "uj", "dj", "x", "bj", "js", "jc"], "k": ["z", "kg", "K", "kr", "kt", "uk", "kh", "ka", "y", "ck", "kl", "kk", "kan", "ke", "kid", "v", "kar", "c", "mk", "ki", "q", "h", "ak", "kn", "ijk", "ik", "p", "km", "kj", "ek", "kw", "tk", "ac", "u", "sk", "ko", "ku", "ks"], "li": ["ini", "jl", "zi", "le", "cli", "lin", "ti", "ci", "ji", " Li", "il", "gi", "lu", "lt", "ln", "ki", "lo", "yi", "ie", "di", "p", "bi", "pi", "ne", "fi", "qi", "ai", "LI", "ii", "xi", "si", "Li", "ui", "ly"], "s": ["f", "ps", "ls", "yl", "le", "line", "fs", " es", "y", "t", "name", "se", "xs", "rs", "cs", "ix", "ms", "os", "r", "sol", "v", "sym", "sd", "sl", "c", "es", "hs", "ln", "h", "b", "eds", "g", "ies", "S", "string", " ss", "p", "ss", "e", "sb", " si", "ses", "si", "o", "tes", "ats", "als", " S", "item", "js"]}}
{"code": "import sys\\nfrom heapq import heappush, heappop\\n\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\n\\ndef resolve():\\n    n, m = map(int, input().split())\\n    B = [[] for _ in range(m)]\\n    for _ in range(n):\\n        a, b = map(int, input().split())\\n        if m - a >= 0:\\n            B[m - a].append(b)\\n\\n    que = []\\n    res = 0\\n    for i in reversed(range(m)):\\n        for b in B[i]:\\n            heappush(que, -b)\\n        if que:\\n            res += heappop(que) * (-1)\\n    print(res)\\n\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "576", "substitutes": {"input": ["rand", "expression", "str", "out", "stream", "reader", "sum", "reset", "raw", "output", "cin", "buffer", "ch", "history", "pull", "q", "ref", "Input", "source", "select", "paste", "cmd", "pattern", "config", "init", "read", "next", "p", "image", "command", "new", "get", "parse", "inf", "it", "inc", "int", "each", "txt", "focus", "feed", "first", "iter", "print", "list", "text", "shift"], "f_inf": ["f_exp", "f2exp", " f_frac", " f_exp", "f2frac", "f_frac", "f_err", "fvalexp", " f_err", "f2inf", "fvalfrac", "fvalinf", "fvalerr", "f2err"], "mod": ["sub", "add", "min", "cond", "floor", "debug", "pos", "circ", "scale", "bit", "temp", "sim", "ind", "pre", "mult", "fun", "round", "Mod", "mode", "fac", "MOD", "dec", "tab", "set", "grow", "prime", "cm", "base"], "n": ["nn", "l", "y", "nt", "t", "nr", "N", "ns", "mn", "r", "nm", "v", "na", "c", "h", "sn", "nd", "g", "nu", "nb", "num", "d", "p", "dn", "j", "ne", "np", "nan", "o", "no", "x"], "m": ["mu", "f", "gm", "mc", "tm", "mas", "am", "mb", "l", "sm", "t", "ms", "M", "meta", "r", "mn", "nm", "k", "v", "perm", "em", "mis", "c", "bm", "h", "an", "g", "dm", "num", "d", "p", "mun", "man", "km", "j", "mt", "mean", "o", "ma", "mm", "me", "um", "mi", "cm", "md"], "B": ["BE", "Blue", "BB", "BS", "Bytes", "DB", "C", "EB", "Two", "R", "OB", "G", "SB", "NB", "BO", "N", "M", "BA", "IB", "A", "BC", "WB", "BI", "Bar", "Box", "GB", "Builder", "S", "D", "L", "TB", "LB", "P", "T", "Block", "J", "AB", "V", "BT", "I", "Beta", "BL", "BM", "BR", "Bs", "Base", "BP"], "_": [" un", "ix", " j", "__", " mult", " __", " each", " v", "val", " pos", " e", " l", " z", " the", " x", " all", " pre", "___", " num", " w", " y"], "a": ["ba", "ae", "ta", "be", "l", "t", "sta", "ga", "au", "xa", "A", "r", "ca", "la", "pa", "na", "c", "ea", "an", "era", "aux", "area", "va", "p", "da", "alpha", "ao", "e", "sa", "ai", "aa", "aj", "al", "ac", "o", "ma", "ia", "ab", "aaa", "ar", "am"], "b": ["f", "rb", "ba", "ib", " bi", "blue", "ben", "be", "l", "y", "t", "bc", "name", "bp", "back", "s", "cb", "r", "fb", "bh", "lb", "v", "db", "ble", "c", "item", "h", "g", "yi", "di", "p", "bi", "br", "j", " ib", "e", "bin", "bu", "sb", "bo", "bis", "ob", "bs", "u", "li", "ab", "ibe", "bb", "bar", "base", "eb"], "que": ["rent", "done", "ve", "ques", "ued", "ues", "ine", "men", "iq", "fine", "fe", "xy", "ret", "ha", "se", "ck", "free", "cb", "rl", "ue", "vre", "buffer", "ume", "ket", "mes", "gone", "dq", "q", "animate", "loe", "lo", "we", "wy", "queue", "de", "du", "te", "cur", "cho", "exp", "cp", "buf", "ro", "ne", "e", "xe", "Q", "ai", "Queue", "sle", "bo", "nz", "ob", "aque", "quit", "obs", "buff", "me", "req", "bar", "Que", "pause", "qu"], "res": ["ps", "rand", "vec", "max", "out", "obj", "pr", "des", "reset", "rez", "ret", "rs", "nt", "cons", "cs", "pos", "result", "ms", "fr", "pas", "r", "err", "resp", "gr", " Res", "resh", "rss", "re", "crit", "vol", "results", "RES", "conf", "rem", "pres", "rel", "reg", "Res", "resolution", "respons", "req", "vals", "us", "sol"], "i": ["z", "ini", "zi", "y", "name", "ti", "ip", "key", "ci", "ji", "v", "gi", "ij", "c", "ki", "g", "yi", "ind", "id", "di", "p", "bi", "j", "pi", "ai", "it", "ii", "xi", "si", "iri", "ic", "li", "I", "x", "mi", "iu", "im"]}}
{"code": "mozi = 'abcdefghijklmnopqrstuvwxyz'\\nC = input()\\nprint(mozi[mozi.index(C)+1])", "target": "501", "substitutes": {"mozi": ["pozo", "muzo", "foze", "cozo", "pozin", "muzi", "muzin", "moze", "mezi", " mozin", "mozo", "mozin", "cozy", "pozen", "mezen", "moszi", "fozen", "pozi", "moszo", "cozi", "mozen", "moszin", "fozi", "mezo", " mozo", "mozy", "cozin", "mezy", "mosze", "fozo", "muzy", " moze", "fozin", "mezin"], "C": ["K", "H", "Ch", "X", "F", "R", "Con", "G", "CNN", "N", "M", "CA", "A", "CN", "CI", "c", "U", "S", "E", "Cow", "D", "called", "CT", "L", "CC", "P", "Q", "LC", "T", "Z", "CCC", "V", "I", "B", "JC", "CP", "CG"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\ndef mapint(): return map(int, input().split())\\nsys.setrecursionlimit(10**9)\\n\\nS = str(input())\\nT = str(input())\\nans = 0\\nfor i in range(3):\\n    if S[i]==T[i]:\\n        ans += 1\\nprint(ans)", "target": "773", "substitutes": {"S": ["SER", "BS", "SI", "Si", "SS", "R", "SL", "JS", "LS", "SB", "PS", "s", "N", "A", "RS", "U", "ST", "IS", "DS", "Source", "US", "NS", "SU", "L", "SP", "P", "SH", "SF", "SA", "SE", "VS", "I", "GS", "CS"], "T": ["Y", "TR", "F", "R", "t", "WT", "MT", "N", "M", "TIT", "LT", "TA", "OT", "TO", "ST", "E", "O", "AT", "TG", "TN", "TM", "IT", "P", "TS", "TI", "Q", "Maybe", "J", "V", "I", "B", "TX", "TT", "GT", "XT", "PT", "TL"], "ans": ["rors", "ens", "users", "cas", "stats", "anon", "aned", "oss", "cons", "amps", "iann", "s", "ins", "anas", "ms", "aus", "outs", "ns", "ann", "acs", "aps", "aos", "arts", "beans", "ents", "ums", "angs", "rans", "eds", "posts", "ids", "ups", "ANS", "nas", "ai", "offs", "ints", "anes", "ams", "ads", "mails", "ats", "ros", "anks", "an", "ks", "ants", "olds", "lan", "irms"], "i": ["z", "f", "ini", "zi", "iq", "y", "ix", "ti", "s", "ip", "ci", "ji", "gi", "v", "ij", "ori", "ki", "b", "yi", "ind", "id", "di", "p", "bi", "multi", "j", "pi", "vi", "qi", "ai", "it", "ii", "xi", "si", "n", "batch", "ic", "li", "I", "u", "me", "x", "ui", "mi", "im"]}}
{"code": "if ''.join(sorted(input()))==\"abc\":\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")\\n", "target": "777", "substitutes": {}}
{"code": "# -*- coding: utf-8 -*-\\n\"\"\"\\nCreated on Tue May 12 14:59:02 2020\\n\\n@author: shinba\\n\"\"\"\\n\\nn = input()\\n\\nprint(\"ABC\"+n)\\n", "target": "429", "substitutes": {}}
{"code": "import sys\\nfrom itertools import accumulate\\n\\ninput = sys.stdin.readline\\n\\n\\ndef main():\\n    N = int(input())\\n    A = list(map(int, input().split()))\\n\\n    cumsum_A = list(accumulate(A))\\n    sum_A = sum(A)\\n\\n    ans = float(\"inf\")\\n    for i in range(N - 1):\\n        # cost = abs((sum_A - cumsum_A[i]) - cumsum_A[i])\\n        cost = abs(sum_A - 2 * cumsum_A[i])\\n        if cost < ans:\\n            ans = cost\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "728", "substitutes": {"input": ["type", "expression", "str", "out", "reader", "load", "text", "eval", "sum", "reset", " Input", "name", "sample", "format", "step", "raw", "point", "output", "request", "url", "enter", " output", "empty", "index", "q", "insert", "ref", "Input", "source", "select", "val", "cmd", "pattern", "config", "init", "read", "next", "command", "initial", "get", "int", "each", "focus", "sequence", "first", "set", "print", "filename", "exec", "list", "update", "gen", "view", "new", "shift"], "N": ["Number", "Num", "K", "Not", "C", "CNN", "NB", "NI", "M", "NR", "Len", "NP", "NA", "Count", "S", "ND", "NT", "D", "SN", "NS", "Node", "NM", "TN", "P", "No", "Q", "T", "GN", "n", "V", "I", "B", "Ns", "NC", "NO", "NN", "Network", "NH"], "A": ["Y", "App", "Answer", "AA", "H", "C", "X", "AC", "a", "R", "Alice", "AV", "M", "Args", "What", "CA", "Given", "Bar", "JA", "S", "These", "As", "D", "HA", "Array", "AT", "All", "AF", "To", "GA", "An", "P", "AM", "This", "And", "SA", "The", "AP", "AB", "V", "One", "Alpha", "B", "I", "Adam", "Area", "ACT", "Ax", "AE"], "cumsum_A": ["cumssum_A", "cumssum_N", "cumsum_N", "cumssum_a", "cumsum_B", "cumssum_B", "cumsum2A", "cumsum2N", "cumsum_a", "cumsum2B", "cumsum2a"], "sum_A": ["sum_a", " sum_P", " sum_B", "sum_P", " sum_a", "sum_B"], "ans": ["Ann", "AN", "dev", "af", "s", "con", "asin", "ns", "ann", "Na", "limit", "errors", "sd", "na", "g", "tan", "eps", "ANS", "null", "Error", "e", "cross", "nan", "sin", "vals", "an", "scan"], "i": ["z", "f", "y", "t", "ix", "ti", "s", "r", "gi", " j", "c", "q", "b", "ind", " ii", "p", "j", "e", "it", "ii", "n", "I", "li", "x", "im"]}}
{"code": "# A - \u9ad8\u6a4b\u541b\u3068\u30db\u30c6\u30eb\u30a4\u30fc\u30b8\u30fc\\n# https://atcoder.jp/contests/abc044/tasks/abc044_a\\n\\nN = int(input())\\nK = int(input())\\nX = int(input())\\nY = int(input())\\n\\nresult = 0\\n\\nfor i in range(N):\\n    if i < K:\\n        result += X\\n    else:\\n        result += Y\\n\\nprint(result)\\n", "target": "71", "substitutes": {}}
{"code": "n = int(input())\\nas_ = list(int(i) for i in input().split())\\n\\n\\ndef output_history(history):\\n    print(len(history))\\n    for h in history:\\n        print('{0} {1}'.format(h[0], h[1]))\\n\\n\\ndef distribute(list_, hstr, x, y):\\n    list_[y] += list_[x]\\n    hstr.append((x + 1, y + 1))  # Fortran\u5f0f\\n    return list_, hstr\\n\\n\\nhistory = []\\n\\n# \u6b63\u8ca0\u3069\u3061\u3089\u304b\u306b\u5bc4\u305b\u308b\\n# MaxMin\u5927\u304d\u304f\u5916\u308c\u3066\u3044\u308b\u65b9\u306b\u5bc4\u305b\u308b\\nif abs(max(as_)) > abs(min(as_)):\\n    # \u6b63\u306b\u5bc4\u305b\u308b\\n    # \u6b63\u306eMax\u3092\u8ca0\u306e\u8981\u7d20\u306b\u7e70\u308a\u8fd4\u3057\u5206\u914d\\n    x = as_.index(max(as_))\\n    while not all([a >= 0 for a in as_]):\\n        for y, a in enumerate(as_):\\n            if a < 0:\\n                as_, history = distribute(as_, history, x, y)\\n\\n    # \u524d\u304b\u3089\u9806\u306b\u8d70\u67fb\u3057\u53cd\u8ee2\u7b87\u6240\u3067\u524d\u306e\u8981\u7d20\u3092\u5f8c\u308d\u306e\u8981\u7d20\u306b\u8db3\u3057\u5408\u308f\u305b\u308b\\n    for x in range(len(as_) - 1):\\n        # \u53cd\u8ee2\u7b87\u6240\u3067\\n        if as_[x + 1] - as_[x] < 0:\\n            as_, history = distribute(as_, history, x, x + 1)\\n\\nelse:\\n    # \u8ca0\u306b\u5bc4\u305b\u308b\\n    # \u8ca0\u306eMax\u3092\u6b63\u306e\u8981\u7d20\u306b\u7e70\u308a\u8fd4\u3057\u5206\u914d\\n    x = as_.index(min(as_))\\n    while not all([a <= 0 for a in as_]):\\n        for y, a in enumerate(as_):\\n            if a > 0:\\n                as_, history = distribute(as_, history, x, y)\\n\\n    # \u5f8c\u308d\u304b\u3089\u9806\u306b\u8d70\u67fb\u3057\u53cd\u8ee2\u7b87\u6240\u3067\u5f8c\u308d\u306e\u8981\u7d20\u3092\u524d\u306e\u8981\u7d20\u306b\u8db3\u3057\u5408\u308f\u305b\u308b\\n    for x in reversed(range(len(as_) - 1)):\\n        # \u53cd\u8ee2\u7b87\u6240\u3067\\n        if as_[x + 1] - as_[x] < 0:\\n            as_, history = distribute(as_, history, x + 1, x)\\n\\noutput_history(history)\\n", "target": "412", "substitutes": {"n": ["z", "f", "nn", "m", "l", "t", "s", "N", "ns", "nm", "k", "r", "mn", "v", "na", "c", "sn", "q", "b", "nb", "num", "d", "p", "j", "np", "nc", "o", "w"], "as_": ["List_", "act_"], "i": ["f", "ini", "ei", "\u00ed", "m", "a", "l", "t", "ix", "ti", "\u0438", "ip", "v", "gi", "ij", "c", "oi", "index", "q", "phi", "ind", " ii", "di", "p", "j", "pi", "e", " I", "ai", "ii", "xi", "si", "I", "u", "li", "iter", " it"], "history": ["details", "description", "recent", "html", "historic", "range", "unknown", "rh", " histories", "hm", "recorded", "hid", "timer", "info", "memory", "stack", "created", "buffer", "ho", "timeout", "remember", "zh", "profile", "ash", "queue", "prev", "rev", "hover", "context", "trace", "window", "ISTORY", "record", "story", "past", "time", "cache", "sequence", "rem", "rec", "list", "sh", "hash", "his", "hist", "menu", "hp", "History"], "h": ["uh", "ph", "he", "has", "H", "m", "html", " H", "kh", "hex", "rh", "hm", "l", "ha", "hz", "bh", "ach", "ch", "ho", "hs", "hi", "zh", "th", "hal", "enh", "hover", "hd", "ih", "oh", "eh", "hl", "each", "cache", "hh", "ah", "sh", "head", "hash", "his", "igh", "hist", "hp", "History"], "list_": ["str_", "List_", "dict_", "LIST_"], "hstr": ["hexstring", " htr", "harr", "ztr", "hStr", "zStr", "rarr", "hextr", "hexstr", "rStr", "htr", "tStr", "zstring", "tstring", "zstr", "tstr", "hstring", " harr", "rstring", "rstr", " hstring", "tarr", " hStr", "hexStr"], "x": ["z", "f", "yx", "xp", "m", "X", "xy", "l", "t", "ix", "xs", "xa", "ax", "xx", "r", "v", "xt", "dx", "wx", "c", "index", "mx", "ex", "p", "rx", "j", "xc", "e", "ox", "xi", "lex", "px", "w", "left", "lat", "xf", "xd", "tx", "inx"], "y": ["Y", "z", "ym", "ey", "yl", "yo", "yn", "ay", "my", "xy", "ly", "zy", "py", "t", "yer", "iy", "yu", "oy", "sy", "yy", "ty", "yt", "v", "c", "gy", "ys", "ies", "yi", "ny", "hy", "fy", "ady", "j", "ya", "uy", "ye", "axy", "yr", "cy", "vy", "yd", "yk"]}}
{"code": "if input().find(\"AC\") != -1:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "384", "substitutes": {}}
{"code": "_ = input()\\na = [int(i) for i in input().split()]\\na.sort()\\na.reverse()\\nprint(sum(a[::2]) - sum(a[1::2]))", "target": "452", "substitutes": {"_": ["tmp", "m", "l", "t", "name", "ix", "su", "en", "msg", "length", "index", "val", "p", "self", "time", "n", "I", "set", "list", "x"], "a": ["f", "done", "ba", "apa", "m", "am", "ta", "ae", "all", "t", "sta", "au", "ga", "ed", "xa", "A", "en", "la", "at", "history", "aos", "c", "ea", "b", "aux", "area", "changes", "p", "alpha", "da", "ao", "oa", "zero", "parts", "aka", "sa", "ai", "aa", "n", "abs", "ma", "u", "ia", "ab", "eas", "aaa", "an", "data"], "i": ["ini", "ri", "zi", "\u00ed", "l", "t", "ix", "ti", "ip", "ji", "v", "gi", "ij", "oi", "ki", "b", "phi", "id", "di", "p", "bi", "j", "pi", "qi", "ai", "int", "ii", "xi", "si", "iri", "n", "I", "li", "u", "x", "iu"]}}
{"code": "N,K=map(int,input().split())\\nH=[int(h) for h in input().split()]\\nH=sorted(H)\\ncnt=0\\nfor i in range(1,len(H)+1):\\n    if H[-i]>=K:\\n        cnt+=1\\n    else:\\n        print(cnt)\\n        exit()\\nprint(cnt)\\n", "target": "494", "substitutes": {"N": ["Y", "C", "X", "F", "Ni", "M", "NR", "NA", "S", "E", "ND", "NT", "D", "NS", "L", "TN", "P", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NN", "NH"], "K": ["Y", "HK", "KA", "KN", "FK", "PK", "C", "X", "F", "KK", "R", "SK", "G", "W", "Han", "M", "A", "k", "KR", "KI", "KS", "S", "VK", "NK", "KING", "UK", "P", "Q", "KE", "T", "J", "Z", "KEY", "V", "B", "KC"], "H": ["Y", "HK", "HO", "He", "CH", "C", "X", "F", "HT", "W", "AV", "Han", "HI", "M", "HB", "A", "HL", "Head", "HD", "HH", "TH", "S", "MH", "Host", "His", "GH", "HC", "HA", "HE", "DH", "L", "P", "Q", "Eh", "T", "J", "V", "B", "OH", "HTTP", "History", "HS", "NH"], "h": ["f", "him", "he", "html", "kh", "hex", "hm", "l", "ha", "bh", "k", "ch", "v", "ho", "hs", "c", "hi", "q", "hd", "d", "ih", "oh", "ht", "hl", "dh", "n", "hh", "ah", "hu", "x", "sh", "hash", "hp"], "cnt": ["cunt", "curcount", "cuNT", "Cpt", "lcct", "nust", "Ccount", "CNT", "curNT", " cpt", "cNT", "cuct", "Cct", "lcNT", "Count", "ccount", " ccount", "Cnt", "cust", "gNT", "lcnt", "gpt", " count", "Cust", "lccount", " cNT", "nct", "curnt", "nnt", "gnt", "cucount", " cust", "curct", "cct", " cct", "gount", "nount", "count", "cpt"], "i": ["zi", "m", "a", "l", "y", "t", "ix", "ti", "s", "ip", "key", "ci", "k", "v", "gi", "ij", "c", "hi", "ki", "q", "b", "yi", "ind", "id", "di", "ik", "p", "bi", "j", "pi", "ai", "ii", "xi", "si", "n", "ic", "o", "li", "I", "x", "mi", "iu", "im"]}}
{"code": "n = int(input())\\nA = [int(i) for i in input().split(\" \")]\\n\\navg=[]\\nfor i in range(len(A)):\\n    avg.append(A[i]-(i+1))\\navg.sort()\\nb=avg[int(n/2)]\\n\\nsum = 0\\nfor j in range(len(A)):\\n    sum += abs(A[j]-(b+j+1))\\n\\nprint(sum)\\n", "target": "463", "substitutes": {"n": ["z", "nw", "nn", "nia", "names", "m", "l", "nt", "t", "number", "name", "N", "len", "ns", "mn", "en", "un", "v", "na", "c", "sn", "q", "g", "cn", "nu", "nb", "num", "d", "p", "network", "ne", "np", "nc", "no", "nl"], "A": ["App", "AY", "AR", "AI", "AA", "Ar", "DB", "H", "C", "API", "AC", "a", "G", "AV", "au", "N", "M", "CA", "LA", "TA", "RAM", "JA", "Av", "NA", "As", "AU", "All", "AT", "Array", "HA", "AF", "WA", "Address", "GA", "L", "An", "At", "ATA", "P", "Q", "AM", "AH", "Map", "This", "AE", "AB", "AP", "V", "Answer", "I", "B", "Alpha", "ACT", "Act", "PUT", "SA"], "i": ["io", "ini", "ei", "ri", "zi", "\u00ed", "uri", "l", "ix", "iy", "ti", "info", "ip", "ci", "ji", "im", "gi", "v", "ij", "hi", "oi", "index", "ki", "phi", "yi", "ie", "id", "di", "ik", "bi", "pi", "fi", "qi", "ai", "it", "int", "ii", "iri", "xi", "si", "ic", "li", "ia", "ui", "mi", "iu", "iti"], "avg": [" avj", "aug", "navgt", "avergs", "ovgm", "avt", " avm", "avej", " avgt", " avgu", "aveg", "aum", "averge", "avgu", "avgc", "avegc", "avgs", "navgu", "avgm", "averg", " avgc", "avj", "auge", "avgt", "augm", "avegs", " avge", "avert", "navg", "ovg", "ovgs", "augs", "ovm", "avegu", "avge", " avgm", "avegt", "augc", "aut", "avet", "avm", " avgs", "avege", "navj"], "b": ["rb", "ib", "m", "a", "mb", "be", "to", "by", "bh", "fb", "cb", "lower", "buffer", "db", "bound", "g", "wb", "nb", "bi", "br", "sb", "gb", "beta", "bo", "bis", "ob", "bs", "bot", "B", "ab", "bb", "bar", "base", "eb"], "sum": ["sys", "max", "med", "sv", "rup", " summed", "loss", "hum", "dev", "Sum", "su", "sample", "scan", "cal", "match", "mass", "prof", "ass", "share", "temp", "sim", "test", "num", "mem", "size", "cos", "tail", "ss", "usr", "sam", "zero", "total", "av", "sa", "vol", "average", "mean", "up", "weight", "cum", "summary", "sat", "um", "system", "success", "dot", "hash", " SUM", "cost", "hist", "count", "st"], "j": ["z", "f", "obj", "jl", "ja", "jit", "xy", "y", "note", "fr", "key", "jp", "k", "ji", "v", "sp", "json", "ij", "job", "q", "h", "jac", "ie", "br", "kj", "it", "jj", "jump", "aj", "J", "uj", "dj", "li", "bj", "js", "jc"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nn=int(input())\\nL=list(map(int,input().split()))\\n\\nans = 0\\nfor i in range(n):\\n    for j in range(i+1,n):\\n        ans += L[i]*L[j]\\nprint(ans)\\n\\n", "target": "434", "substitutes": {"input": ["expression", "interface", "str", "sleep", "add", "out", "sum", "load", "eval", "find", " Input", "l", "println", "sample", "format", "step", "raw", "fn", "output", "buffer", "enter", "open", "q", "insert", "ref", "Input", "source", "select", "val", "cmd", "init", "read", "next", "command", "rint", "new", "get", "it", "int", "inner", "focus", "feed", "print", "exec", "put", "forward", "gen", "view", "text", "shift"], "n": ["z", "nn", "nia", "m", "a", "l", "nt", "t", "N", "len", "ns", "r", "mn", "k", "v", "na", "c", "long", "ln", "sn", "q", "b", "nd", "g", "wn", "cn", "nu", "nb", "num", "d", "p", "dn", "ne", "net", "int", "np", "nc", "o", "w", "no", "nl", "x", "count"], "L": ["DL", "H", "XL", "LR", "Long", "LE", "SL", "l", "LS", "ML", "LM", "N", "LT", "LU", "LG", "LA", "NL", "EL", "PL", "LIN", "RL", "CL", "P", "IL", "List", "LI", "J", "V", "I", "dL", "LP", "BL", "LL", "Lu", "TL"], "ans": ["ens", "cas", "anon", "ls", "sum", "aned", "vers", "AN", "oss", "ean", "pan", "rs", "amps", "anned", "ins", "anas", "ars", "aus", "ns", "ons", "ms", "ann", " Ans", "acs", "aos", "arts", "beans", "ians", "ums", "rans", "eds", "yes", " means", "ANS", "oat", "nas", "offs", "anes", "nan", "ams", "mean", "ads", "ras", "ats", "ros", "anks", "ana", "an", "ks", "ants", "lan"], "i": ["io", "ini", "ei", "ri", "zi", "m", "a", "l", "y", "ix", "ti", "ip", "ci", "ji", "gi", "ij", "hi", "ori", "ki", "ami", "yi", "ie", "id", "di", "ik", "bi", "pi", "ai", "it", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "ui", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "m", "ja", "l", "y", "note", "jp", "k", "ji", "v", "sp", "json", "ij", "job", "q", "b", "ot", "jac", "oj", "br", "kj", "jj", "jump", "aj", "J", "uj", "dj", "bj", "js", "jc"]}}
{"code": "import heapq\\nn,m, = map(int,input().split())\\nE = [[] for i in range(n)]\\nfor i in range(m):\\n    a,b,c = map(int,input().split())\\n    a -= 1\\n    b -= 1\\n    E[a].append((c,b))\\n    E[b].append((c,a))\\n\\n\\ndef dijkstra(x):\\n    dis = [float(\"inf\")]*n\\n    dis[x] = 0\\n    q = []\\n    heapq.heappush(q,(0,x))\\n    \\n    while q:\\n        cost,bef = heapq.heappop(q)\\n\\n        if dis[bef] < cost:\\n            continue\\n\\n        for ncost,nex in E[bef]:\\n            dist = ncost+cost\\n\\n            if dist < dis[nex]:\\n                dis[nex] = dist\\n                heapq.heappush(q,(dist,nex))\\n    return dis\\n\\nshort = []\\nfor i in range(n):\\n    short.append(dijkstra(i))\\ncount = 0\\nfor i in range(n):\\n    for dist,nex in E[i]:\\n        if short[i][nex] < dist:\\n            count += 1\\nprint(count//2)\\n\\n", "target": "755", "substitutes": {"n": ["f", "nn", "l", "y", "t", "nt", "nr", "ms", "N", "fn", "ns", "mn", "r", "len", "en", "M", "v", "na", "ln", "sn", "an", "h", "g", "nd", "cn", "nu", "nb", "num", "d", "size", "nv", "p", "dn", "j", "ne", "e", "gn", "np", "nan", "nc", "o", "no", "nl", "on", " N"], "m": ["gm", "mc", "tm", "l", "y", "t", "ms", "M", "mn", "r", "nm", "k", "v", "bm", "h", "num", "d", "p", "mun", "man", "j", "mt", "om", "mo", "mr", "o", "ma", "mm", "mi", "cm"], "E": ["Y", "ET", "EEE", "Es", "NE", "C", "X", "F", "GES", "R", "G", "W", "Gene", "Energy", "N", "M", "A", "REE", "EE", "EL", "U", "PE", "S", "O", "D", "L", "EF", "EU", "EO", "GE", "NOTE", "P", "e", "ES", "Q", "OE", "Ge", "T", "ME", "J", "Se", "SE", "V", "I", "Dis", "B", "EC", "IE", "Pe"], "i": ["f", "z", "ei", "ini", "ri", "zi", "cli", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "r", "k", "at", "ati", "v", "gi", "ij", "oi", "ki", "h", "phi", "g", "asi", "di", "ik", "p", "bi", "j", "pi", "e", "ai", "it", "ii", "xi", "si", "ic", "o", "li", "u", "ia", "I", "iter", "iti", "mi", "iu", "im"], "a": ["f", "ba", "ae", "l", "y", "t", "af", "ga", "au", "s", "ax", "A", "ca", "r", "la", "at", "ea", "an", "h", "g", "ami", "ak", "admin", "d", "p", "e", "sa", "ai", "aa", "aj", "ac", "o", "ma", "u", "ab", "aaa", "ar", "ach", "am"], "b": ["z", "f", "rb", "ba", "ib", "be", "l", "y", "t", "bc", "fb", "r", "ca", "v", "db", "h", "g", "d", "p", "bi", "j", "e", "aa", "ob", "o", "bs", "u", "w", "B", "ac", "ab", "bb", "eb"], "c": ["z", "f", "C", "l", "y", "t", "cs", "bc", "cf", "cb", "r", "cin", "ca", "v", "co", "h", "lc", "g", "cc", "ce", "d", "p", "col", "ec", "e", "fc", "ac", "o", "u", "ab", "cm"], "x": ["z", "f", "yx", "xes", "xp", "X", "ux", "xy", "y", "t", "ix", "xs", "xa", "xx", "ax", "at", "v", "xt", "wx", "mx", "ex", "p", "rx", "xxx", "xc", " xx", "e", "ox", "int", "xi", "lex", "ic", "w", "xf", "tx", "inx"], "dis": ["atis", "stats", "without", "dev", "bel", "co", "mis", "di", "dl", "neg", "delay", "no", "nl", "non", "rex", "ws", "asm", "el", "fine", "xy", "se", "ris", "phys", " Dis", "phi", "ex", "stable", "de", "ds", "ez", "disc", "data", "pro", "done", "l", "nt", "lis", "pos", "by", "sd", "DIS", "re", "size", "e", "Dis", "sol", "ly", "ps", "details", "diff", "des", "wise", "cond", "inv", "chain", "all", "free", "res", "es", "yi", "d", "mat", "rel"], "q": ["z", "qt", "f", "play", "qual", "iq", "qa", "l", "all", "t", "y", "quest", "que", "ix", "s", "r", "k", "ue", "ch", "v", "query", "dq", "h", "g", "queue", "eq", "d", "p", "quad", "j", "quant", "qi", "e", "ry", "ai", "Q", "it", "aq", "o", "sq", "w", "quit", "quality", "qq", "qs", "ll", "qu"], "cost": ["op", "rand", "diff", "sum", "gross", "rice", "CO", "eff", "charge", "score", "dev", "cons", "tt", "conn", "cf", "info", "Cost", "con", "step", "sol", "co", "length", "circ", "start", "cc", "ct", "work", "supp", "force", "contact", "cos", "size", "power", "comp", "ctr", "exp", "ost", "cp", "const", "dc", "nz", "weight", "loc", "stone", "stop", "fee", "st"], "bef": ["wbef", "Bec", "belf", "Bcf", " balf", "wbalf", "baef", "Bek", "balf", "baec", "labuf", "labEF", "bec", "bcf", "baEF", " buf", " bek", "bEF", " bcf", " bEF", "Bef", "buf", "bauf", "baelf", " bec", "labelf", "baalf", "wbuf", "labef", "wbek", " belf", "bek", "baek", "bacf"], "ncost": ["NCot", "bcost", "ncond", "nnost", "NCond", "nnist", "NCob", "ncot", "bcond", "NCust", "nnot", "NCast", "ncob", "NCist", "nvust", "cnist", "cnot", "nvob", "bcob", "ncust", "nvond", "cnast", "ncast", "cnost", "bcust", "NCost", "ncist", "nnast", "nvost"], "nex": ["nw", "rex", "nn", "nic", "ele", "yx", "nin", "nit", "nt", "ton", "sex", "ix", "tw", "nr", "oct", "nec", "xx", "sw", "mn", "ns", "tex", "nm", "xon", "eric", "ldon", "dx", "na", "nis", "ij", "es", "ng", "sn", "nexus", "ex", "sen", "fx", "ny", "tn", "ross", "wy", "nox", "eni", "nen", "ston", "nil", "nat", "ds", "ne", "nee", "wen", "pex", "nor", "iox", "nut", "nz", "nel", "lex", "nc", "ez", "ew", "vy", "tion", "xi", "tes", "nl", "non", "prefix", "nes", "tx"], "dist": ["core", "add", "max", "sum", "pred", "df", "dev", "push", "density", "dt", "ist", "di", "dep", "cp", "addr", "inner", "delay", "no", "det", "rest", "obj", "desc", "dig", "dest", "conn", "ti", "ty", "index", "distance", "ind", "test", "cos", "comp", "dn", "exp", "radius", "bi", "ctr", "cd", "nz", "dj", "dr", "disc", "Dist", "red", "nt", "wd", "ptr", "length", "ij", "cont", "next", "form", "weight", "dp", "loc", " distance", "inst", "st", "min", "diff", "function", "des", "driver", "dd", "dim", "key", "dx", "d", "dy", "np", "reg", "rel"], "short": ["good", "sub", "str", "out", "ort", "Short", "sc", "fast", "desc", "wh", "est", "att", "hex", "ord", "cs", "ext", "full", "private", "une", "s", "adj", "yt", "sp", "length", "empty", "long", "sn", "ex", "tie", "test", "outh", "supp", "inter", "ind", "d", "ctr", "trans", " Short", "offs", "int", "weak", "tr", "small", "quick", "no", "ats", "lat", "reverse", " shorts", "sh", "list", "new"], "count": ["scroll", "ount", "add", "frequency", "max", "found", "sum", "report", "currency", "C", "comment", "cond", "counter", "hold", "amount", "nt", "cycle", "debug", "number", "result", "check", "length", "state", "index", "start", "group", "Count", "flag", "th", "ct", "code", "nb", "test", "force", "ind", "num", "cont", "call", "process", "trace", "size", "ctr", "consider", "last", "cd", "mount", "error", "conf", "cache", "weight"]}}
{"code": "X, K, D = map(int,input().split())\\nX = abs(X)\\n\\nif X > K*D:\\n    print( X - K*D )\\nelse:\\n    a = X//D\\n    K -= a\\n    X -= D*a\\n    if K%2 == 0:\\n        print(X)\\n    else:\\n        print(abs(X-D))", "target": "66", "substitutes": {"X": ["Y", "Time", "UX", "Data", "CE", "IP", "H", "C", "XL", "Long", "F", "MX", "AC", "R", "G", "W", "XY", "N", "M", "A", "OX", "Max", "U", "Int", "XXX", "ANY", "S", "DX", "E", "OK", "US", "EX", "Cross", "Xi", "L", "Right", "Win", "P", "Q", "ZX", " x", "Value", " DX", "T", "XP", "J", "Z", "XX", "V", "One", "I", "B", "Ex", "IX", "x", "TX", "XT"], "K": ["HK", "Y", "KA", "FK", "PK", "H", "C", "F", "KK", "Kar", "SK", "G", "W", "Ak", "Ka", "N", "M", "A", "k", "KR", "IK", "Max", "KI", "Mask", "KS", "E", "O", "VK", "UK", "Key", "L", "DK", "Kin", "P", "Q", "KE", "T", "J", "Ke", "Z", "V", "KEY", "I", "B", "Kind", "KC", "Power", "MK", "CP", "AK", "Sch"], "D": ["Y", "DN", "DL", "DB", "C", "F", "R", "Do", "DF", "G", "DD", "N", "M", "A", "Ds", "DA", "S", "DX", "E", "O", "DT", "DS", "Dir", "d", "L", "Def", "GO", "DOM", "P", "Q", "Di", "DM", "DP", "T", "J", "Z", "V", "I", "B", "dL", "LD", "DOS", "DE", "DC", "MD", "DO", "DI"], "a": ["z", "f", "ap", "m", "ae", "l", "y", "t", "au", "xa", "i", "ax", "A", "ca", "r", "k", "v", "pa", "c", "aw", "b", "g", "d", "p", "j", "e", "ai", "sa", "aa", "art", "AB", "o", "ac", "w", "ma", "ia", "n", "ab", "x", "ar", "an"]}}
{"code": "from fractions import gcd\\ndef main():\\n    x, y = map(int, input().split())\\n    if x % y == 0:\\n        print(\"-1\")\\n    else:\\n        print(x)\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "396", "substitutes": {"x": ["z", "f", "yx", "m", "xp", "X", "ux", "xy", "l", "t", "ix", "xs", "xa", "ax", "xx", "i", "xxxxxxxx", "v", "xt", "dx", "wx", "c", "index", "g", "ex", "fx", "d", "p", "rx", "xc", " xx", "ox", "xe", "xxxx", "int", "xi", "lex", "n", "px", "w", "xf", "xd", "tx"], "y": ["Y", "z", "yo", "ym", "yl", "ey", "yn", "ay", "m", "yout", "my", "xy", "t", "py", "iy", "sy", "i", "oy", "yy", "k", "ty", "yt", "v", "gy", "ys", "b", "g", "ies", "yi", "nb", "ny", "fy", "uy", "ye", "n", "yr", "cy", "vy", "hy", "sky", "ly"]}}
{"code": "from collections import defaultdict\\nN = int(input())\\nprm = defaultdict(int)\\nfor n in range(2, N+1):\\n    for p in range(2, int(n**0.5)+2):\\n        while n % p == 0:\\n            prm[p] += 1\\n            n //= p\\n        if n == 1:\\n            break\\n    else:\\n        prm[n] += 1\\nC = [2, 4, 14, 24, 74]\\ncnt = [0]*5\\nfor p, x in prm.items():\\n    for i, c in enumerate(C):\\n        if x >= c:\\n            cnt[i] += 1\\nc2, c4, c14, c24, c74 = cnt\\n\\nans = c4*(c4-1)//2*(c2-2) if c2 > 2 else 0\\nans += max(0, c24*(c2-1))\\nans += max(0, c14*(c4-1))\\nans += c74\\nprint(ans)\\n", "target": "145", "substitutes": {"N": ["Num", "K", "Sn", "R", "Ni", "NG", "NB", "M", "NV", "ns", "CN", "NR", "A", " Num", "Len", "NL", "NP", "Size", "S", "ND", "O", "NT", "D", "NS", "L", "TN", "P", "Q", "T", "V", "I", "PN", "B", " NC", "Ns", "NC", "NO", "NN", "POS", "NH"], "prm": ["PRgm", "prgm", "pirfm", "Prdm", "prp", "Prp", "prdm", "crdm", " prmm", "PRfm", "pirm", "Prmp", " prmp", "PRm", "sprm", " prms", "prfm", "pirp", "pirrm", "PRmp", "prmp", "crms", "prmm", " prrm", "Prms", "pirdm", "PRrm", "sprrm", "prms", "Prmm", "Prrm", "sprmt", "pirms", " prgm", "crp", "PRmm", "pirgm", "sprms", "crm", " prmt", " prfm", "prmt", "Prm", "pirmt", "prrm"], "n": ["f", "nn", "out", "yn", "m", "a", "node", "ni", "l", "y", "nt", "t", "pan", "number", "nr", "ns", "r", "k", "nm", "v", "na", "ln", "sn", "q", "b", "an", "g", "cn", "nu", "nb", "num", "d", "nat", "j", "ne", "e", "gn", "nor", "np", "nan", "nc", "o", "u", "no", "pid", "nl", "pn"], "p": ["pe", "ps", "f", "pr", "pt", "ep", "m", "ap", "a", "par", "pan", "l", "t", "y", "bp", "pos", "s", "pp", "ip", "jp", "r", "tp", "k", "at", "v", "perm", "sp", "pa", "q", "h", "pen", "g", "pre", "d", "pat", "j", "pi", "pl", "cp", "P", "e", "np", "pc", "o", "ic", "u", "pid", "wp", "pn", "pg"], "C": ["Y", "K", "H", "X", "F", "R", "G", "CR", "CM", "M", "CN", "CA", "A", "MC", "CU", "CV", "Count", "S", "E", "O", "D", "CT", "L", "CC", "P", "Q", "LC", "T", "TC", "V", "I", "B", "CS", "SC", "NC", "CP"], "cnt": ["coct", "cmleft", "conount", "acount", "cmnt", "connt", "acnt", "Cpt", "accrit", "coount", "Ccount", "concount", " ccrit", "CNT", "acct", " cpt", "cleft", "cNT", "ccount", " ccount", "Count", "Cnt", "cocrit", "ncNT", "cont", "conpt", " count", "cmNT", "ccrit", "ncleft", "ncnt", "cmcount", "Cleft", "cct", " cct", "nccount", "count", "cpt"], "x": ["xes", "xp", "X", "a", "ux", "xy", "y", "t", "ix", "xs", "xa", "ax", "xx", "xb", "ci", "v", "nex", "xt", "dx", "wx", "co", "q", "ex", "ct", "cl", "rx", "cp", "xc", "e", "ox", "xe", "ai", "xi", "pc", "ic", "px", "xf", " cx", "xd", "tx"], "i": ["z", "zi", "m", "l", "y", "ix", "ti", "ci", "k", "v", "ij", "index", "b", "ind", "id", "di", "ik", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "mi"], "c": ["f", "cod", "cr", "cs", "l", "y", "t", "cf", "con", "ci", "cin", "ch", "v", "co", "cv", "h", "b", "lc", "gc", "ct", "cc", "ce", "cos", "col", "cp", "xc", "e", "cd", "pc", "nc", "tc", "cu", "ic", "cor", "cm", "count"], "c2": ["pTwo", "vc2", "c22", "cc52", "v1", "rc2", "lc20", "pcTwo", "p2", "tc1", "tc2", "lc52", "vc52", "C1", "tc4", "tc14", " c22", "p1", "lc22", "rc12", "cc14", "vTwo", "cTwo", "v2", "vc14", "p4", "lc14", "c20", "c1", "C2", "rc22", "pc2", "c12", "lc2", "cc20", "c52", "cc2", "lc12", "pc1", "v4", "vc20", "rc4", "C4", " c12", "pc4", "lc4", "C14", " c1"], "c4": ["cache40", "lcfour", "C40", "ac4", "c40", " cfour", "ac42", "cache4", "v40", "ac14", " c9", "ac40", "c8", "C42", "C8", " c42", "v24", "c42", "Cfour", " c40", "c9", "C24", "ac24", "C64", " c8", "cfour", "cache64", "v4", "c64", "acfour", "C4", "cache8", "lc8", "v14", " c64", "C9", "lc9", "lc4", "C14"], "c14": [" c17", "ic14", "tc17", "tc14", "ic17", "ct4", "c8", "C8", "c57", "ct8", "c17", "C24", " c8", "ct24", " c57", "C4", "tc74", "ct14", "tc57", "ic57", "ic74", "C14"], "c24": [" c04", "C74", "c04", " c84", "unc74", "cf04", " c54", "unc84", "C54", "c54", "pc24", "cf84", "cf24", "pc74", "pc54", "C24", "cf74", "unc04", "unc24", "pc14", "C14", "c84"], "c74": ["c49", "C74", "ac64", "C76", "at44", "category74", "c44", "ac74", " c174", "category44", "at49", "category24", "dc44", " c76", "ac76", "dc24", "dc74", "category49", "c174", "at24", "ac174", "C64", "dc49", "c64", "C174", " c64", "at74", "c76"], "ans": ["rors", "ens", "ps", "cas", "mas", "aned", "cs", "amps", "xs", "iann", "s", "ars", "anas", "ms", "aus", "outs", "ons", "ns", "ann", "os", " Ans", "aps", "aos", "arts", "ins", "ents", "ians", "angs", "rans", "ays", "ands", "eds", "posts", "ations", "cn", " means", "ids", "ANS", "ots", "can", "uns", "nas", "helps", "ongs", "offs", "anes", "nan", " spans", "ads", "ces", "asms", "ats", "ros", "anks", "an", "ks", "ants", "olds", "uploads", "lan", "irms"]}}
{"code": "n, *l = (int(input()) for _ in range(6))\\nprint((n - 1) // min(l) + 5)", "target": "784", "substitutes": {"n": ["f", "nn", "names", "m", "y", "t", "nt", "N", "i", "ns", "mn", "r", "k", "v", "c", "ln", "sn", "h", "b", "q", "nu", "nb", "num", "d", "p", "j", "ne", "np", "nan", "nc", "o", "nl", "x"], "l": ["ls", "el", "le", "m", "t", "lin", "lis", "i", "len", "r", "v", "sl", "c", "length", "long", "ln", "h", "lay", "b", "lc", "g", "lt", "lo", "lam", "d", "p", "dl", "L", "lp", "pl", "loc", "o", "li", "nl", "ll"], "_": [" un", "ix", " j", "__", " __", " each", " p", "ex", "val", " c", " sub", " outer", " the", " all", " long", " pre", "___", " f", " g"]}}
{"code": "inputList = []\\nwhile True:\\n    try:\\n        num = int(input())\\n    except EOFError:\\n        break\\n    inputList.append(num)\\n\\ninputList.sort()\\nlength = len(inputList)\\nfor i in range(3):\\n    print(inputList[length - i - 1])", "target": "550", "substitutes": {"inputList": ["channelLeft", "inputLeft", "inputLibrary", "InputLock", " inputLeft", "historyList", "openLIST", "numLibrary", "channelLIST", "numSet", " inputLIST", "dataSet", "historyEx", "InputLibrary", "numLock", " inputData", " InputLeft", "inputEx", "subjectLIST", "InputList", " InputLIST", "InputEx", "outputSet", "InputSet", " InputList", "subjectList", "InputL", "numList", "outputEx", "historySet", "openLeft", "dataLock", " InputSet", "subjectLeft", " inputL", "openList", "channelData", "outputList", "inputData", "inputLock", "dataList", "inputLIST", "historyL", " inputEx", " inputSet", "inputSet", "dataLibrary", "channelList", "inputL", "openSet", "subjectData"], "num": ["f", "Num", "nom", "obj", "conv", "sum", "mon", "tim", "dev", "number", "nam", "con", "nm", "en", "ver", "cal", "th", "nu", "nb", "mem", "alph", "sam", "zero", "cert", "eng", "local", "int", "np", "txt", "conf", "mark", "n", "dec", "NUM", "gen", "um", "multi", "unit", "count", "new", "dat"], "length": ["type", "family", "capacity", "be", "l", "se", "full", "all", "number", "name", "pp", "shape", "len", "ty", "Length", "now", "root", "long", "index", "h", "term", "phi", "position", "th", "duration", "size", "height", "end", "total", "last", "component", "time", "available", "n", "loc", "sequence", "left", "print", "list", "prime", "library", "count", "width", "always"], "i": ["z", "f", "ini", "zi", "iq", "m", "l", "y", "t", "ti", "ci", "im", "gi", "v", "gu", "ij", "c", "phi", "g", "yi", "ind", "di", "p", "bi", "j", "pi", "qi", "ai", "ii", "xi", "n", "ic", "I", "li", "x", "mi", "multi"]}}
{"code": "s = input()\\nt = input()\\nls = len(s)\\nlt = len(t)\\ndp = [[0 for j in range(lt+1)] for i in range(ls+1)]\\nfor i in range(1, ls+1):\\n  for j in range(1, lt+1):\\n    if s[i-1] == t[j-1]:\\n      dp[i][j] = dp[i-1][j-1] + 1\\n    else:\\n      dp[i][j] = max(dp[i-1][j], dp[i][j-1])\\nans = \"\"\\nlength = dp[ls][lt]\\ni = ls\\nj = lt\\nwhile length > 0:\\n  if s[ls-1] == t[lt-1]:\\n    ans = s[ls-1] + ans\\n    ls -= 1\\n    lt -= 1\\n    length -= 1\\n  elif dp[ls-1][lt] == length:\\n    ls -= 1\\n  else:\\n    lt -= 1\\nprint(ans)", "target": "129", "substitutes": {"s": ["ps", "sts", "str", "sv", "out", "m", "a", "cs", "l", "rs", "gs", "xs", "ists", "ms", "os", "states", "ns", "r", "ssl", "ins", "strings", "sp", "v", "sl", "c", "hs", "h", "q", "b", "ys", "g", "sg", "S", "ests", "string", "vs", "p", "ains", "ss", "ds", "e", "sa", "sb", "its", "ims", "ses", "n", "bs", "ats", "ts", "js"], "t": ["f", "out", "pt", "tm", "m", "ta", "kt", "att", "l", "y", "tt", "tp", "dt", "at", "v", "sp", "c", "gt", "ot", "q", "b", "g", "ct", "tree", "tg", "d", "title", "te", "p", "bt", "mt", "it", "wt", "mat", "T", "vt", "txt", "tr", "tc", "n", "o", "table", "ts", "rt", "text", "st"], "ls": ["ps", "els", "lines", "ld", "has", "elt", "cs", "l", "rs", "lv", "LS", "lis", "gs", "xs", "ists", "ms", "ins", "len", "ns", "acts", "lb", "la", "sl", "es", "hs", "ln", "gt", "lc", "tl", "vs", "dl", "less", "ols", "ds", "sels", "lp", "lets", "its", "lvl", "bs", "les", "li", "irs", "ats", "lf", "ts", "rl", "ll", "js"], "lt": ["lit", "min", "ld", "let", "el", "le", "elt", "l", "lv", "nt", "LS", "lis", "ret", "Lt", "old", "pos", "LT", "len", "dt", "lb", "lbs", "la", "fail", "lett", "xt", "opt", "sl", "lu", "ln", "gt", "split", "lc", "long", "tl", "lo", "lib", "ml", "dl", "tail", "nat", "lp", "ds", "pl", "mt", "alt", "lon", "bool", "its", "wt", "lr", "lvl", "int", "beta", "bs", "li", "left", "lf", "list", "ts", "rt", "ll", "st"], "dp": ["ps", "deb", "adr", "df", "pkg", "bp", "wd", "gp", "pb", "dd", "pp", "depend", "jp", "tp", "dt", "db", "pa", "vp", "dq", "pm", "fp", "dm", "pd", "d", "du", "dl", "p", "dep", "ds", "lp", "cp", "port", "dial", "dc", "np", "DP", "dh", "bps", "delay", "dj", "dr", "wp", "hp"], "j": ["z", "obj", "let", "ion", "jl", "pr", "m", "a", "ja", "l", "y", "fr", "jp", "k", "ji", "r", "gi", "v", "json", "ij", "index", "start", "q", "b", "h", "g", "jac", "ie", "id", "di", "d", "next", "p", "bi", "br", "oj", "kj", "fi", "it", "jj", "jump", "tr", "aj", "J", "n", "si", "o", "uj", "li", "dj", "u", "x", "bj", "js", "jc"], "i": ["z", "io", "ini", "ib", "zi", "m", "ir", "a", "ni", "l", "y", "ix", "ti", "ip", "ci", "ji", "gi", "v", "ij", "ori", "oi", "q", "phi", "b", "g", "ie", "id", "di", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "o", "ic", "li", "I", "ia", "u", "x", "ui", "mi", "iu", "im"], "ans": ["ens", "ps", "rors", "lines", "names", "aned", "AN", "oss", "ean", "cs", "rs", "gs", "amps", "os", "ins", "ms", "aus", "ns", "anas", "ons", "ann", "ars", "ends", "aos", "arts", "beans", "es", "ents", "ians", "urs", "rans", "than", "ands", "eds", "yes", " means", "ids", "eps", "ANS", "ds", "uns", "offs", "anes", "nan", "ams", "mean", "ras", "ats", "ros", "vals", "ions", "anks", "an", "ks", "ants"], "length": ["ength", "max", "ld", "capacity", "line", "efficiency", "loss", "other", "be", "l", "lv", "full", "number", "present", "shape", "len", "value", "Length", "Len", "sl", "long", "term", "lag", "h", "lc", "distance", "position", "duration", "string", "test", "d", "path", "size", "p", "tail", "L", "end", "ness", "lp", "total", "padding", "maximum", "ENGTH", "time", "n", "sequence", "li", "left", " lengths", "nl", "stop", "list", "data", "count", "width", "needed"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\nsys.setrecursionlimit(10 ** 9)\\nMOD = 10 ** 9 + 7\\n\\nfrom fractions import gcd\\n\\nA, B = map(int, input().split())\\n\\nprint (A * B // gcd(A, B))", "target": "209", "substitutes": {"input": ["rand", "expression", "str", "out", "reader", " inspect", " Input", "println", "sample", "raw", "output", "buffer", "ctrl", "socket", "q", "console", "insert", "human", "csv", "ref", "Input", "string", "select", "paste", "cmd", "source", "config", "context", "read", "pattern", " inputs", "command", "get", "mode", "run", "int", "focus", "conf", "feed", "first", "print", "exec", "list", "prefix", "data", "view", "text"], "MOD": ["MIN", "min", "ALL", "R", " mod", "debug", "EXP", "M", "MAX", "SIZE", "perm", " MAX", "Max", "mask", "REM", "mod", " M", "mult", "L", "P", "INT", "Mod", "log", "I", "NUM", "prefix", "prime", "base"], "A": ["AR", "AI", "AA", "H", "C", "X", "AN", "AC", "a", "IA", "G", "AV", "ACC", "BA", "ABC", "CA", "LA", "AL", "EA", "Bar", "Av", "S", "As", "AU", "D", "AT", "HA", "Array", "Ah", "AF", "L", "GA", "An", "mA", "This", "AH", "AM", "And", "AE", "AP", "AB", "I", "ACT", "Ax", "SA"], "B": ["Y", "BE", "BB", "BS", "VB", "DB", "C", "EB", "OB", "G", "BO", "WB", "N", "BA", "IB", "BC", "BI", "UB", "Bar", "GB", "D", "MB", "TB", "BG", "Q", "FB", "T", "J", "AB", "Z", "V", "Bill", "BT", "I", "BW", "BL", "USB", "BM", "BER", "Bern", "BY", "BF", "BR", "Bs"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 5 + 10)\\ndef input(): return sys.stdin.readline().strip()\\n\\ndef resolve():\\n    \\n    class UnionFind(object):\\n        def __init__(self, n=1):\\n            # \u6728\u306e\u89aa\u8981\u7d20\u3092\u7ba1\u7406\u3059\u308b\u30ea\u30b9\u30c8par\u3092\u3064\u304f\u308a\u307e\u3059\u3002\\n            # par[x] == x\u306e\u5834\u5408\u306b\u306f\u3001\u305d\u306e\u30ce\u30fc\u30c9\u304c\u6839\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\\n            # \u521d\u671f\u72b6\u614b\u3067\u306f\u4e00\u5207\u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3059\u3079\u3066\u306e\u30ce\u30fc\u30c9\u304c\u6839\u306b\u306a\u308a\u307e\u3059\u306d\u3002\\n            self.par = [i for i in range(n)]\\n            # \u6728\u306e\u9ad8\u3055\u3092\u6301\u3063\u3066\u304a\u304d\u3001\u3042\u3068\u3067\u4f4e\u3044\u65b9\u3092\u9ad8\u3044\u65b9\u306b\u3064\u306a\u3052\u308b\u3002\u521d\u671f\u72b6\u614b\u306f0\\n            self.rank = [0 for _ in range(n)]\\n            self.size = [1 for _ in range(n)]\\n    \\n        def find(self, x):\\n            \"\"\"\\n            x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u63a2\u7d22\uff1a\\n            \u3042\u308b\uff12\u3064\u306e\u8981\u7d20\u304c\u5c5e\u3059\u308b\u6728\u306e\u6839\u304c\u540c\u3058\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308c\u3070\u3088\u3044\u3002\\n            \u3064\u307e\u308a\u3001\u89aa\u306e\u89aa\u306e\u89aa\u306e\u30fb\u30fb\u30fb\u3068\u6839\u306b\u305f\u3069\u308a\u7740\u304f\u307e\u3067\u8d70\u67fb\u3059\u308c\u3070\u3088\u3044\u3002\\n            \u518d\u5e30\u3002\\n            \"\"\"\\n            # \u6839\u306a\u3089\u305d\u306e\u756a\u53f7\u3092\u8fd4\u3059\\n            if self.par[x] == x:\\n                return x\\n            # \u6839\u3067\u306a\u3044\u306a\u3089\u3001\u89aa\u306e\u8981\u7d20\u3067\u518d\u691c\u7d22\\n            else:\\n                # \u4e00\u5ea6\u898b\u305f\u5024\u306b\u3064\u3044\u3066\u306f\u6839\u306b\u76f4\u63a5\u7e4b\u3044\u3067\u7d4c\u8def\u5727\u7e2e\\n                # \u89aa\u3092\u66f8\u304d\u63db\u3048\u308b\u3068\u3044\u3046\u3053\u3068\\n                self.par[x] = self.find(self.par[x])\\n                return self.par[x]\\n    \\n        def union(self, x, y):\\n            \"\"\"\\n            x \u3068 y \u306e\u30b0\u30eb\u30fc\u30d7\u3092\u7d50\u5408\\n            \"\"\"\\n            # \u6839\u3092\u63a2\u3059\\n            x = self.find(x)\\n            y = self.find(y)\\n            # \u5c0f\u3055\u3044\u6728\u306b\u7d50\u5408\u3057\u3066\u7d4c\u8def\u5727\u7e2e\\n            if x != y:\\n                if self.rank[x] < self.rank[y]:\\n                    x, y = y, x\\n                # \u540c\u3058\u9577\u3055\u306e\u5834\u5408rank\u304c1\u5897\u3048\u308b\\n                if self.rank[x] == self.rank[y]:\\n                    self.rank[x] += 1\\n                # \u4f4e\u3044\u65b9\u306e\u6728\u306e\u6839\u3092\u9ad8\u3044\u65b9\u306e\u6839\u3068\u3059\u308b\\n                self.par[y] = x\\n                self.size[x] += self.size[y]\\n    \\n        def is_same(self, x, y):\\n            \"\"\"\\n            x \u3068 y \u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304b\u5426\u304b\\n            \"\"\"\\n            return self.find(x) == self.find(y)\\n    \\n        def get_size(self, x):\\n            \"\"\"\\n            x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u6570\\n            \"\"\"\\n            x = self.find(x)\\n            return self.size[x]\\n    \\n    N,M,K=map(int,input().split())\\n    uf = UnionFind(N)  # \u30ce\u30fc\u30c9\u6570N\u3067\u30af\u30e9\u30b9\u7d99\u627f\\n    friends_cnt=[0]*N\\n    for i in range(M):\\n        # A,B\u306f\u30ce\u30fc\u30c9\\n        A, B = map(int, input().split())\\n        A-=1\\n        B-=1\\n        friends_cnt[A]+=1\\n        friends_cnt[B]+=1\\n    \\n        # \u9023\u7d50\u30af\u30a8\u30ea union\\n        uf.union(A, B)\\n    \\n    blocks=[[] * N for i in range(N)]\\n    for i in range(K):\\n        x, y = map(int, input().split())\\n        x, y = x - 1, y - 1\\n        blocks[x].append(y)\\n        blocks[y].append(x) # \u6709\u5411\u306a\u3089\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\\n    \\n    for i in range(N):\\n        ans=uf.get_size(i)-friends_cnt[i]-1\\n        for j in blocks[i]:\\n            if uf.is_same(i,j):\\n                ans-=1\\n        print(ans,end=' ')\\n    print()\\n\\n    \\n    \\n\\n    \\n\\nresolve()", "target": "368", "substitutes": {"self": ["obj", "ls", "unknown", "this", "Self", "ms", "res", "exc", "c", "ln", "q", "ref", "cl", "local", "_", "cmp", "neg", "w", "rel", "me"], "n": ["z", "f", "nn", "m", "l", "nt", "t", "nr", "N", "i", "ns", "r", "k", "na", "c", "nd", "g", "nu", "nb", "d", "p", "j", "np", "nc", "u", "nl", " N", "count"]}}
{"code": "import sys\\n\\n\\ndef input():\\n    return sys.stdin.readline().strip()\\n\\n\\nsys.setrecursionlimit(20000000)\\n\\n\\ndef main():\\n    N, M = map(int, input().split())\\n    S = []\\n\\n    d = [[float(\"inf\")] * N for _ in range(N)]\\n    L = []\\n    for i in range(M):\\n        a, b, c = map(int, input().split())\\n        d[a - 1][b - 1] = c\\n        d[b - 1][a - 1] = c\\n        if a < b:\\n            L.append((a - 1, b - 1))\\n        else:\\n            L.append((b - 1, a - 1))\\n    for i in range(N):\\n        d[i][i] = 0\\n    L = set(L)\\n\\n    def warshall_floyd(d):\\n        # d[i][j]: i\u304b\u3089j\u3078\u306e\u6700\u77ed\u8ddd\u96e2\\n        for k in range(N):\\n            for i in range(N):\\n                for j in range(N):\\n                    if d[i][j] > d[i][k] + d[k][j]:\\n                        d[i][j] = d[i][k] + d[k][j]\\n                        if i < j:\\n                            if (i, j) in L:\\n                                S.append((i, j))\\n                        else:\\n                            if (j, i) in L:\\n                                S.append((j, i))\\n        return d\\n\\n    warshall_floyd(d)\\n    print(len(set(S)))\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "755", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "AN", "F", "R", "Ni", "CNN", "W", "NB", "NI", "NR", "A", "MN", "U", "NA", "E", "O", "ND", "NT", "D", "NS", "NM", "TN", "P", "No", "Q", "T", "MAN", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN"], "M": ["Y", "K", "H", "m", "MP", "C", "MX", "F", "R", "PM", "G", "MT", "LM", "CM", "Mon", "A", "MN", "MI", "MC", "Size", "MM", "E", "D", "Many", "NM", "JM", "P", "MA", "MS", "T", "MAN", "V", "I", "B", "MD", "MU"], "S": ["Y", "BS", "SI", "Si", "SS", "X", "F", "R", "SL", "G", "W", "s", "A", "DATA", "E", "O", "DS", "D", "NS", "P", "T", "SA", "J", "Z", "V", "I", "B", "Set"], "d": ["z", "f", "done", "m", "std", "df", "l", "bd", "t", "dict", "s", "dd", "r", "dt", "db", "v", "sd", "h", "g", "D", "di", "pd", "de", "p", "dl", "da", "do", "j", "ds", "td", "e", "cd", "dh", "n", "ad", "o", "w", "dL", "set", "data", "dat", "fd"], "_": [" int", "all", "ix", "ci", " __", " each", "ity", "code", " some", "num", "ox", " the", "ai", " x", " data", "ac", " all", "I", "li", "x", " num", " index"], "L": ["DL", "H", "C", "XL", "LR", "R", "LE", "l", "SL", "G", "W", "LS", "VL", "ML", "LM", "LT", "LU", "LA", "HL", "Lock", "NL", "EL", "PL", "O", "D", "RL", "CL", "P", "IL", "List", "T", "LI", "J", "Z", "V", "FL", "I", "B", "dL", "LP", "Li", "BL", "LD", "LL", "Lu", "TL"], "i": ["z", "f", "io", "ini", "zi", "m", "l", "y", "t", "ti", "ip", "ci", "r", "k", "v", "ij", "index", "h", "ind", "di", "p", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "o", "li", "I", "u", "x", "mi", "iu", "im"], "a": ["ba", "apa", "el", "ap", "m", "ae", "ta", "l", "sta", "ga", "au", "A", "r", "ca", "la", "at", "pa", "na", "ea", "an", "va", "p", "alpha", "ao", "app", "oa", "e", "sa", "ai", "aq", "aa", "aj", "ac", "art", "n", "ma", "ace", "ia", "ab", "aaa", "x", "ar", "ach", "am"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "bc", "bp", "back", "s", "cb", "fb", "r", "bh", "v", "db", "ble", "h", "g", "nb", "p", "bi", "br", "j", "bf", "e", "sb", "bu", "bo", "gb", "n", "ob", "o", "bs", "u", "B", "ab", "bb", "eb"], "c": ["z", "f", "sc", "m", "C", "cat", "cr", "l", "cs", "t", "bc", "cf", "con", "ci", "cin", "r", "cb", "ca", "rc", "v", "co", "h", "arc", "lc", "g", "cc", "ct", "ce", "p", "cur", "cp", "xc", "e", "cd", "dc", "fc", "ac", "n", "cu", "u", "cm"]}}
{"code": "n,k=map(int,input().split())\\na=list(map(int,input().split()))\\nn=[0]*200000\\nx=[]\\nfor i in a:\\n    n[i-1]+=1\\nfor i in n:\\n    if i!=0:\\n        x+=[i]\\ny=len(x)\\nz=y-k\\nif z<=0:\\n    print(0)\\nelse:\\n    x.sort()\\n    print(sum(x[:z]))", "target": "257", "substitutes": {"n": ["nn", "yn", "m", "node", "l", "t", "nt", "nr", "s", "N", "ns", "r", "en", "v", "na", "c", "sn", "h", "b", "an", "g", "cn", "nu", "nb", "num", "d", "p", "j", "ne", "e", "gn", "np", "nc", "o", "w", "on"], "k": ["f", "max", "K", "m", "kr", "ka", "t", "kl", "ikk", "key", "kk", "r", "ke", "v", "c", "mk", "ki", "q", "b", "ik", "kok", "p", "alpha", "km", "j", "kj", "ek", "tk", "sk", "ko", "ku", "ks"], "a": ["ba", "m", "ae", "ta", "another", "l", "all", "t", "au", "s", "xa", "A", "ca", "at", "la", "na", "aw", "c", "ea", "an", "b", "ak", "aux", "area", "p", "alpha", "oa", "e", "ai", "sa", "aa", "ac", "ma", "w", "set", "ab", "aaa", "ar", "ach", "am", "ack", "auto"], "x": ["f", "out", "xes", "m", "xp", "X", "xy", "l", "t", "ix", "xs", "xa", "xx", "news", "v", "xml", "co", "xt", "wx", "c", "ex", "test", "ctx", "p", "rx", "j", "xc", "e", "ox", "xe", "cox", "client", "int", "xi", "o", "w", "u", "px", "xf", "tx"], "i": ["f", "io", "ini", "ei", "ri", "zi", "\u00ed", "m", " bi", "l", "t", "ix", "iy", "ti", "\u0438", "ip", "ci", "key", "ji", "gi", "v", "ij", "hi", "oi", "index", "ki", "ori", "phi", "yi", "asi", "id", " ii", "di", "ik", "ind", "p", "bi", "multi", "j", "pi", "ai", "ii", "xi", "si", "ic", "o", "li", "I", "ui", "mi", "iu", "im", "iti"], "y": ["Y", "ym", "ey", "yl", "yo", "yn", "ay", "m", "xy", "py", "t", "iy", "sy", "yy", "yt", "v", "gy", "ys", "b", "ot", "ies", "yi", "ny", "p", "j", "hot", "ya", "uy", "ye", "yr", "o", "vy", "cy", "hy"], "z": ["yz", "oz", "zi", "m", "zip", "zy", "l", "t", "iz", "uz", "hz", "v", "az", "cz", "c", "h", "zh", "q", "gz", "ze", " Z", "d", "tz", "zer", "size", "j", "zone", "zes", "nz", "ez", "Z", "w", "zz", "zo", "count"]}}
{"code": "C=list(map(int,input().split()))\\nC=set(C)\\nprint(len(C))", "target": "32", "substitutes": {"C": ["Y", "SET", "K", "H", "X", "F", "R", "G", "CNN", "CM", "N", "M", "A", "Cloud", "CI", "c", "CV", "CU", "GC", "CD", "Count", "S", "D", "CBS", "CT", "L", "VC", "CC", "P", "Q", "LC", "You", "T", "YC", "Z", "V", "I", "B", "CS", "NC", "JC", "CP"]}}
{"code": "def solve():\\n    ret = 1\\n    cur_num = X\\n    while cur_num * 2 <= Y:\\n        cur_num *= 2\\n        ret += 1\\n    print(ret)\\n\\nif __name__ == \"__main__\":\\n    X, Y = map(int, input().split())\\n    solve()", "target": "631", "substitutes": {"ret": ["Ret", "det", "out", "pt", "sum", "ter", "reset", "nt", "t", "result", "rect", "back", "len", "r", "err", "res", "dt", "opt", "status", "rets", "ft", "xt", "match", "gt", "g", "flag", "val", "re", "inter", "num", "mem", "cont", "RET", "quad", "trial", "mt", "alt", "mat", "int", "tr", "nz", "grad", "print", "quit", "dr", "x", "sat", "rt"], "cur_num": ["cur_ver", " cur_NUM", "cur_mon", "Cur_num", "cur_number", "cur___obj", "cur___num", "cur_obj", "cur___mon", " cur_mon", "cur_NUM", " cur_sum", "Cur_mon", "cur___sum", "Cur_ver", " cur_obj", "Cur_number", " cur_Num", "cur_Num", "cur_sum"], "X": ["TY", "UX", "K", "H", "C", "XL", "MX", "XT", "R", "XY", "N", "A", "MAX", "OX", "Max", "XXX", "S", "DX", "D", "L", "P", "Q", "T", "XP", "J", "XX", "Z", "V", "I", "B", "x", "VALUE", "TX", "IX", "XXXX"], "Y": ["TY", "KY", "DB", "C", "HT", "R", "EY", "y", "G", "W", "XY", "N", "M", "YN", "A", "S", "E", "Py", "YA", "L", "Height", "TN", "YS", "P", "Q", "Value", "T", "J", "Z", "XX", "V", "I", "B", "IE", "NY", "YY", "MY"]}}
{"code": "N = int(input())\\ns = []\\nfor i in range(N):\\n  tmp = list(input())\\n  tmp.sort()\\n  s.append(\"\".join(tmp))\\n\\ns.sort()\\nm = {}\\nfor i in range(len(s)):\\n  if s[i] in m.keys():\\n    m[s[i]] += 1\\n  else:\\n    m[s[i]] = 1\\n\\nv = [int(x * (x-1) / 2) for x in list(m.values())]\\nprint(sum(v))\\n", "target": "84", "substitutes": {"N": ["Num", "K", "C", "X", "F", "Sn", "R", "Ni", "W", "NB", "NI", "M", "NV", "NR", "A", "MN", "Len", "NP", "S", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "No", "Q", "T", "GN", "n", "Z", "V", "I", "B", "Ns", "NC", "NN"], "s": ["stats", "sts", "sys", "comments", "ws", "sv", "ls", "groups", "views", "has", "fs", "a", "spec", "cs", "rs", "t", "gs", "xs", "steps", "ins", "os", "ms", "ns", "sp", "strings", "services", "c", "ys", "tests", "h", "b", "g", "eds", "S", "csv", "ments", "ests", "ids", "vs", "p", "ss", "j", "ds", "seconds", "parts", "args", "sb", "sa", "its", "ims", "ses", "n", "si", "items", "bs", "sq", "w", "abs", "ats", "st", "tags", "ts", "qs", "uploads", "mods", "js"], "i": ["f", "io", "ini", "ei", "ri", "zi", "uri", "y", "ix", "iy", "ti", "info", "ip", "ci", "k", "ji", "gi", "ij", "ori", "index", "ki", "phi", "used", "ind", "id", "asi", "di", "ik", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "ii", "xi", "n", "iri", "ic", "o", "I", "li", "si", "iter", "ui", "mi", "iu", "im"], "tmp": ["emp", "obj", "ls", "tm", "MP", "html", "my", "ret", "py", "nt", "t", "tt", "ext", "gs", "etc", "sp", "tar", "vp", "mk", "mp", "temp", "aux", "ctx", "pre", "cur", "p", "pretty", "buf", "td", "cmp", "tf", "np", "gb", "papers", "txt", "stuff", "cache", "tc", "abs", "tab", "buff", "pty", "pro", "js", "st"], "m": ["map", "mu", "gm", "wm", "sum", "mc", "tm", "mb", "hm", "sm", "t", "metadata", "manager", "ms", "M", "mail", "mn", "perm", "em", "bm", "pm", "cm", "an", "g", "mx", "mod", "mp", "rm", "mem", "p", "vm", "man", "multi", "km", "mt", "mo", "mg", "mat", "n", "fm", "mr", "ma", "mos", "met", "mm", "mi", "im", "am", "md"], "v": ["values", "sv", "sum", "conv", "vv", "qv", "l", "lv", "t", "y", "NV", "r", "value", "c", "h", "b", "g", "tv", "nv", "vs", "vd", "p", "vm", "d", "j", "av", "vt", "n", "uv", "V", "u", "w", "vc", "vector"], "x": ["z", "xes", "xp", "X", "a", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "xx", "key", "ax", "k", "xt", "dx", "wx", "c", "index", "mx", "ex", "val", "fx", "p", "rx", "xc", "e", "ox", "xe", "xi", "lex", "ic", "px", "u", "xf", "xd", "tx"]}}
{"code": "from bisect import *\\nn = int(input())\\na = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\nc = list(map(int,input().split()))\\n\\na.sort()\\nc.sort()\\nres = 0\\nfor i in b:\\n    temp_a = bisect_left(a, i)\\n    temp_c = n - bisect_right(c, i)\\n    res += temp_a*temp_c\\nprint(res)", "target": "37", "substitutes": {"n": ["z", "nn", "nia", "names", "m", "l", "nt", "t", "number", "name", "nr", "N", "fn", "ns", "mn", "k", "r", "na", "ng", "sn", "q", "h", "cn", "nb", "num", "size", "p", "gain", "j", "network", "np", "nc", "w", "nl"], "a": ["ba", "obj", "apa", "am", "ta", "ae", "sta", "au", "ga", "A", "r", "at", "la", "era", "area", "ans", "ao", "app", "act", "oa", "sa", "ai", "aa", "ra", "up", "al", "ac", "ma", "aut", "ab", "aaa", "eas", "ar", "ach", "an", "auto"], "b": ["z", "rb", "ba", "ib", "m", "range", "mb", "be", "l", "y", "t", "bc", "xb", "cb", "r", "v", "db", "g", "nb", "d", "p", "bt", "bi", "e", "bool", "sb", "it", "gb", "bis", "o", "bs", "w", "B", "ab", "bb", "base", "eb"], "c": ["z", "f", "mc", "m", "C", "cr", "cus", "cs", "l", "t", "bc", "chain", "cons", "cf", "con", "etc", "ci", "r", "cin", "rc", "cb", "v", "ctrl", "co", "cv", "lc", "g", "cc", "ct", "unc", "ce", "d", "cos", "p", "cont", "cp", "ec", "com", "e", "cd", "dc", "fc", "nc", "tc", "ac", "u", "cu", "cm"], "res": ["ress", "rand", "ps", "arr", "out", "obj", "sum", "des", "conv", "reset", "rez", "red", "ret", "rs", "cons", "nt", "conn", "result", "ms", "os", "final", "ons", "resp", "gr", "status", "cal", "resh", "ex", "yes", "val", "re", "mem", "crit", "frac", "usr", "zero", "stock", "vol", "results", "RES", "powers", "rem", "pres", "rel", "reg", "resolution", "Res", "respons", "req", "us", "sol"], "i": ["ini", "ri", "zi", "m", " bi", " vi", "iii", "l", "ix", "ti", "\u0438", "ci", "gi", "v", "ij", "ori", "oi", "index", "ki", "ind", " Ai", " ii", "di", " ti", "j", "pi", "qi", " I", " pi", "ai", "it", "int", " si", "ii", "xi", "si", "iri", "ic", "li", "I", " di", "x", "ui", "mi", "iu"], "temp_a": ["temp2A", " temp_an", "temp2a", " temp_au", "temp_ao", " temp_A", "temp_an", " temp_ao", "temp_au", "temp2b", "temp2au", "temp_A", "temp_b", " temp_b"], "temp_c": [" temp2cs", " temp2a", "temp2cs", "temp2a", " temp_cn", "temp_cn", "temp__a", "tempgrc", "temp_ca", "tempgrcs", "tmp_c", "tempgrcn", "temp__cs", "temp2c", "temp2ca", "tempgra", "temp__c", "temp_cs", "temp2cn", " temp_cs", "tmp_ca", "temp__cn", " temp2c", " temp2cn", "temp2b", "temp_b", "tmp_b"]}}
{"code": "a,b,c = map(int,input().split())\\nif b >= c:\\n    print(c+b)\\nelif b < c and c <= a + b:\\n    print(b+c)\\nelif a+b < c:\\n    print(b + b + a + 1)\\n", "target": "176", "substitutes": {"a": ["z", "f", "ba", "out", "m", "am", "ae", "ta", "l", "t", "sta", "af", "au", "ga", "s", "i", "A", "ca", "r", "at", "ea", "h", "era", "g", "area", "d", "p", "va", "alpha", "j", "app", "oa", "act", "e", "ai", "sa", "ee", "aa", "al", "ac", "n", "o", "ace", "ma", "w", "ia", "ab", "x", "ar", "ach", "an"], "b": ["z", "f", "rb", "ba", "ib", "out", "obj", "m", "bl", "be", "l", "y", "t", "bc", "s", "i", "cb", "fb", "r", "ca", "v", "db", "h", "q", "g", "wb", "nb", "d", "p", "bt", "bi", "br", "j", "bf", "e", "sb", "gb", "beta", "n", "ob", "o", "bs", "u", "B", "ab", "bb", "bar", "eb"], "c": ["z", "f", "sc", "mc", "m", "C", "cat", "cr", "cs", "l", "t", "bc", "cf", "s", "con", "i", "cb", "cin", "ca", "r", "ci", "rc", "v", "co", "h", "q", "lc", "g", "cc", "ct", "ce", "d", "p", "can", "cp", "ec", "e", "cd", "dc", "fc", "ac", "n", "tc", "cu", "u", "ic", "o", "ab", "x", "cm"]}}
{"code": "s=[]\\np=[]\\ns=input()\\ns+=s\\np=input()\\n\\nif (p in s)==True:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")\\n\\n", "target": "661", "substitutes": {"s": ["ps", "z", "f", "sv", "ls", "has", "m", "a", "cs", "rs", "t", "y", "gs", "xs", "l", "se", "ing", "ins", "i", "ns", "tp", "v", "sp", "sl", "es", "c", "hs", "h", "pers", "q", "b", "g", "ies", "S", "er", "d", "ss", "j", "ds", "e", "sa", "ses", "si", "n", "sq", "w", "set", "ats", "tes", "sh", "ts", "new"], "p": ["op", "ps", "f", "pe", "pt", "pr", "m", "ap", "rep", "l", "t", "pb", "pp", "i", "jp", "tp", "r", "v", "sp", "pa", "vp", "c", "pm", "h", "q", "b", "g", "mp", "d", "j", "pi", "lp", "pl", "P", "po", "pc", "n", "o", "u", "w", "set", "sav", "pro", "st"]}}
{"code": "n = int(input())\\ns = [int(input()) for _ in range(n)]\\ns.sort(reverse=True)\\nsm = sum(s)\\nans = 0\\nwhile (sm - ans)%10==0 and s:\\n    now = s.pop()\\n    ans += now\\n    if(sm - now)%10!=0:\\n        ans = now\\n        break\\n\\nprint(sm - ans)\\n\\n", "target": "741", "substitutes": {"n": ["z", "f", "nn", "m", "l", "nt", "t", "N", "i", "len", "ns", "nm", "mn", "k", "v", "na", "c", "sn", "q", "nu", "nb", "num", "d", "size", "p", "j", "ne", "gn", "np", "nc", "no", "nl", "x", "count"], "s": ["ps", "stats", "sts", "sv", "ws", "ls", "events", "times", "m", "fs", "a", "rs", "t", "gs", "xs", "y", "cons", "ms", "ins", "i", "os", "ns", "sw", "states", "services", "ents", "es", "ers", "ys", "b", "S", "changes", "vs", "ess", "p", "rings", "ss", "less", "ds", "sam", "seconds", "sb", "sa", "its", "ses", "abs", "bs", "sq", "ats", "als", "ts", "qs", "js"], "_": [" un", " code", " m", "un", " j", "__", " __", " p", "val", " time", " c", " l", " f", " g"], "sm": ["z", "Sm", "gm", "sv", "ym", "wm", "ism", "sum", "tm", "m", "esm", "zn", "SM", "ms", "sy", "ns", "mn", "sw", "nm", "sp", "sym", "sd", "arm", "em", "sn", "sim", "tn", "dm", "rm", "mem", "sem", "sam", "mt", "sa", "sb", "sf", "gn", "si", "mos", "shell", "sur", "mm", "sh", "md"], "ans": ["ens", "lines", "ls", "mas", "oss", "ran", "ean", "pan", "rs", "cs", "amps", "xs", "ms", "os", "ins", "aus", "ns", "ons", "ars", "ann", "en", "un", "news", "aps", " Ans", "aos", "arts", "ano", "es", "na", "ents", "ums", "beans", "rans", "ians", " means", "ANS", "ots", "can", "ds", "leans", "uns", "nas", "offs", "span", "mean", "ams", "nan", "ats", "us", "anos", "ts", "an", "ks", "ants"], "now": ["wait", "gm", "diff", "him", "tmp", "off", "when", "down", "here", " Now", "Now", "NOW", "full", "hold", "ow", "young", "old", "ready", "auto", "raw", "sw", "at", "never", "sp", " NOW", "json", "aw", "long", "store", "pair", "temp", "test", "force", "size", "next", "null", "alt", "sf", "so", "current", "then", "after", "time", "today", "aj", "small", "set", "save", "currently", "on", "update", "again", "handle", "new", "st"]}}
{"code": "import sys\\nX,Y = map(int,input().split())\\nif (X+Y)%3 != 0:\\n    print(0)\\n    sys.exit()\\nA = Y - (X+Y)//3\\nB = X - (X+Y)//3\\nif A<0 or B<0:\\n    print(0)\\n    sys.exit()\\nN = A+B\\ndef cmb(n, r, mod):\\n    inv = [0,1]\\n    for i in range(2, N + 1):\\n        inv.append((-inv[mod % i] * (mod // i)) % mod)\\n    cmd = 1\\n    for i in range(1,min(r,n-r)+1):\\n        cmd = (cmd*(N-i+1)*inv[i])%mod\\n    return cmd\\n    \\na = cmb(N,A,10**9+7)\\nprint(a)", "target": "759", "substitutes": {"X": ["TY", "UX", "Data", "URL", "H", "C", "XL", "Width", "MX", "R", "W", "XY", "M", "DATA", "AX", "OX", "U", "ANY", "XXX", "TH", "S", "DX", "E", "Path", "EX", "Cross", "Xi", "L", "P", "INT", "Q", "This", "ZX", "HTML", "XM", "T", "XP", "XX", "Z", "V", "I", "IX", "AME", "TX", "x", "PUT", "XT"], "Y": ["SY", "TY", "AY", "Data", "CH", "DB", "HY", "H", "C", "R", "HT", "EY", "y", "G", "NB", "XY", "YN", "OW", "OT", "TH", "OD", "S", "E", "Py", "YA", "YD", "L", "YE", "Height", "Base", "YS", "Year", "P", "My", "Q", "HTML", "T", "YC", "Z", "FY", "V", "J", "I", "HTTP", "JSON", "IE", "BY", "YY", "MY"], "A": ["AR", "K", "AZ", "AI", "AA", "Ar", "H", "C", "RA", "AC", "AN", "R", "IA", "G", "AV", "M", "BA", "AL", "AX", "ACE", "U", "Av", "NA", "S", "E", "AU", "HA", "AT", "D", "AF", "L", "GA", "An", "P", "AD", "Q", "AM", "AH", "AS", "SA", "T", "AB", "AP", "V", "I", "Ax", "AE"], "B": ["BB", "BS", "VB", "DB", "C", "EB", "F", "RB", "R", "G", "NB", "BO", "BU", "WB", "BA", "IB", "BC", "M", "BI", "UB", "b", "GB", "S", "D", "L", "TB", "LB", "BG", "P", "Q", "FB", "T", "J", "AB", "V", "I", "BL", "BER", "BM", "BY", "BR", "Bs"], "N": ["Num", "K", "H", "C", "AN", "F", "R", "G", "W", "NB", "NI", "M", "NR", "CN", "U", "NA", "S", "ND", "NT", "D", "NS", "L", "NM", "TN", "P", "Mod", "Q", "MOD", "T", "GN", "J", "Z", "V", "I", "Ns", "NUM", "NC", "NN"], "n": ["f", "m", "R", "l", "y", "nt", "t", "nr", "s", "ns", "na", "c", "sn", "h", "b", "g", "nu", "nb", "rn", "num", "d", "p", "j", "ne", "nor", "np", "nc", "o", "w", "u", "no", "x", "ll"], "r": ["f", "rb", "rate", "ri", "m", "rr", "range", "sr", "R", "l", "rs", "t", "nr", "rc", "k", "res", "c", "h", "q", "b", "g", "rn", "er", "re", "rm", "d", "p", "rx", "j", "ro", "e", "rd", "w", "u", "x", "rar", "ar", "rt"], "mod": ["good", "rand", "z", "add", "min", "max", "cod", "sum", "m", "cond", "ran", "R", "dev", "debug", "rot", "step", "M", "module", "rc", "ver", "div", "perm", "cm", "q", "bit", " Mod", "sim", "ind", "id", "re", "num", "d", "comp", "mult", "j", "pl", "com", "trans", "Mod", "mode", "od", "int", "MOD", "var", "tr", "rank", "log", "rem", "grad", "tab", "set", "reg", "x", "req", "prime", "im", "rt", "mods", "fun", "md"], "inv": ["vec", "vo", "nav", "inventory", "conv", "iq", "pkg", "mus", "nr", "info", "ins", "ms", "hz", "ns", "ip", "res", "lim", "v", "index", "ln", "q", "Inv", "wr", "iv", "ind", "rev", "aux", "nv", "vs", "eq", "hw", "trans", "vol", "inc", "mg", "ii", "abs", "loc", "sq", "iter", "rec", "reverse", "req", " Inv", "qs", "rt", "ll", "init"], "i": ["z", "f", "io", "ei", "ini", "ri", "zi", "m", "cli", "l", "y", "t", "ix", "iy", "ti", "ip", "ci", "ji", "gi", "v", "ij", "c", "index", "q", "phi", "b", "yi", "ind", "id", "di", "ik", "d", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "u", "x", "ui", "mi", "iu", "im"], "cmd": ["rand", "md", "add", "out", "normal", "off", "one", "cr", "cond", "ret", "conn", "nt", "pkg", "cycle", "all", "control", "rc", "err", "cb", "ch", "msg", "resp", "Cmd", "ctrl", "MD", "bound", "c", "term", "q", "nd", "cn", "ct", "cc", "code", "ind", "mem", "call", "cur", "exit", "command", "ctr", "tail", "dir", "cp", "cfg", "addr", "Command", "cmp", "cd", "run", "it", "batch", "quit", "dr", "req", "head", "comm", "fun", "count", "new", "init", "method"], "a": ["z", "m", "l", "y", "t", "ga", "xa", "ca", "c", "ea", "b", "g", "aux", "area", "d", "p", "alpha", "da", "j", "oa", "e", "sa", "ata", "aa", "o", "ma", "u", "w", "ia", "chart", "an"]}}
{"code": "from collections import Counter\\nn,k=list(map(int,input().split()))\\na=list(map(int,input().split()))\\ncou=Counter(a).most_common()\\nrem=len(cou)-k\\ni=-1\\nans=0\\nwhile rem>0:\\n    ans+=cou[i][1]\\n    i-=1\\n    rem-=1;\\nprint(ans)", "target": "257", "substitutes": {"n": ["ner", "Name", "Number", "nn", "l", "t", "name", "s", "N", "na", "c", "Iter", "er", "d", "Node", "Names", "p", "Keys", "Key", "o", "Base"], "k": ["dk", "max", "K", "m", "kr", "ka", "ck", "kl", "ikk", "ed", "kk", "ke", "kar", "length", "mk", "ki", "q", "g", "kn", "ind", "ik", "kok", "p", "km", "j", " K", "ek", "_", "it", "ky", "its", "sk", "ko", "ku", "ks"], "a": ["ba", "apa", "ap", "ta", "ae", "sta", "au", "ga", "af", "ax", "A", "ca", "at", "pa", "na", "c", "an", "b", "p", "da", "ao", "oa", "sa", "ai", "ata", "aa", "al", "ac", "o", "ma", "abs", "ia", "ab", "aaa", "ar", "am"], "cou": [" cau", " clu", "mcOU", " coud", "mcru", "cru", "Cru", "mcoul", "cOU", "acour", "cooun", "cau", "cour", "coud", "Clu", "acou", "Coud", "Cau", "acoul", "coau", "coul", "colu", "coun", "coou", "Coul", "clu", "COU", " coul", " cOU", "Cour", "mcou", "Cou", " coun", " cru", "acoud", "Coun", " cour"], "rem": ["ps", "andre", "gm", "rest", "ri", "ram", "jl", "m", "rom", "ran", "rep", "ret", "nt", "Rem", "common", "nr", " Rem", "ris", "fr", "mn", "r", "res", "nm", "sp", "em", "gre", "ems", "ren", "dem", "ki", "REM", "gc", "ex", "remote", "re", "rm", "mem", "remove", "p", "exp", "km", "rx", "j", "com", "inn", "tr", "mr", "pres", "reg", "rel", "im", "cm", "prem"], "i": ["ini", "ei", "ri", "zi", "m", " bi", "l", "ti", "ci", "res", "gi", " j", "v", "pa", " ni", "ij", "hi", "c", "index", "ki", "yi", " ii", "di", "ik", "p", " ti", "bi", "j", "pi", "ai", " si", "ii", "xi", "si", "I", "li", " di", "ia", "x", " mi", "mi", "iu", "ui"], "ans": ["ens", "ls", "names", "oss", "ran", "cs", "rs", "pan", "amps", "xs", "s", "ins", "os", "ars", "ants", "ns", "ons", "aus", "ann", "res", "anas", "aps", "acs", "aos", "arts", "es", "ents", "ians", "asks", "rans", "ands", "eds", "posts", "ies", " means", "vs", "ANS", "uns", "ai", "nas", "offs", "anes", "ams", "ads", "ras", "ats", "vals", "an", "ks", "terms", "lan"]}}
{"code": "def ext_euclid(a, b):\\n    # return (x, y, gcd(a, b)) such that a * x + b * y = gcd(a, b)\\n    if b == 0:\\n        return 1, 0, a\\n    y, x, v = ext_euclid(b, a % b)\\n    y -= (a // b) * x\\n    return x, y, v\\n\\n\\ndef mod_inv(a, mod):\\n    x, _, _ = ext_euclid(a, mod)\\n    return x % mod\\n\\n\\ndef comb_list_1(H, W, A, B, mod, modinv_list):\\n    # (h+B-1)_C_(B-1)  (h in {0, ..., H-A-1})\\n    ret = [0 for _ in range(H - A)]\\n    c = 1\\n    for h in range(H - A):\\n        ret[h] = c\\n        c *= h + B\\n        c *= modinv_list[h + 1]\\n        c %= mod\\n    return ret\\n\\n\\ndef comb_list_2(H, W, A, B, mod, modinv_list):\\n    # (-h+H+W-B-2)_C_(W-B-1)  (h in {0, ..., H-A-1})\\n    ret = [0 for _ in range(H - A)]\\n    # initial value -> (A+W-B-1)_C_(W-B-1)  (h = H-A-1)\\n    c = 1\\n    for a in range(1, A + 1):\\n        c *= (a + W - B - 1)\\n        c *= modinv_list[a]\\n        c %= mod\\n    # fill elements of result list from the back\\n    for h in range(H - A - 1, -1, -1):\\n        ret[h] = c\\n        c *= H - h + W - B - 1\\n        c *= modinv_list[H - h]\\n        c %= mod\\n    return ret\\n\\n\\ndef main():\\n    MOD = 10 ** 9 + 7\\n    H, W, A, B = list(map(int, input().split(' ')))\\n    modinv_list = [None] + [mod_inv(h, MOD) for h in range(1, H + 1)]  # modinv doesn't exist on h = 0\\n    combs_1 = comb_list_1(H, W, A, B, MOD, modinv_list)\\n    combs_2 = comb_list_2(H, W, A, B, MOD, modinv_list)\\n    ans = 0\\n    for c1, c2 in zip(combs_1, combs_2):\\n        ans += c1 * c2\\n        ans %= MOD\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "567", "substitutes": {"a": ["ba", "abc", "m", "ae", "t", "A", "ca", "c", "aux", "d", "va", "p", "da", "act", "e", "sa", "aa", "ac", "o", "w", "ab", "aaa", "x", "ana", "an", "aff"], "b": ["z", "rb", "ba", "abc", "m", "another", "be", "y", "bc", "fb", "r", "v", "c", "g", "d", "j", "e", "bo", "n", "ob", "o", "bs", "B", "x", " B", "bb", "eb"]}}
{"code": "from math import pi\\nr=input()\\nprint\"%.8f %.8f\"%(pi*r*r,2*pi*r)", "target": "758", "substitutes": {"r": ["f", "rb", "pr", "rr", "m", "range", "cr", "sr", "a", "R", "l", "rs", "t", "nr", "fr", "i", "rc", "k", "res", "v", "c", "h", "term", "q", "rf", "g", "pair", "b", "re", "er", "d", "p", "radius", "rx", "j", "pi", "e", "lr", "ur", "rd", "n", "mr", "w", "u", "dr", "x", "ar", "rt"]}}
{"code": "tms=int(input())\\nstrlist=sorted(list(map(int,input().split())))\\nans=sum(strlist[tms::][::2])\\nprint(ans)", "target": "438", "substitutes": {"tms": ["sts", "Tmos", "wtoms", "Toms", "wtms", "tmos", "tts", " toms", "smos", "ttems", "tems", " tbs", "Tts", "Tbs", " tts", "sems", "ttmos", "toms", "wtts", "Tems", "wtbs", "sms", "Tms", "tbs", "ttms", "ttts"], "strlist": ["strlevel", "strList", "STRl", "intlist", "intl", " strset", "stringset", "stringList", "Strlist", "strl", "STRList", "Strout", "intlevel", " strList", " strl", " strout", "StrList", "strset", "stringout", "Strset", "intList", "strout", "STRlist", "STRlevel", " strlevel", "stringlist"], "ans": ["ens", "anon", "mas", "aned", "vers", "oss", "ran", "pan", "os", "anas", "ms", "aus", "ns", "ann", "aos", "beans", "es", "asks", "ums", "rans", "nings", "aver", "san", "ANS", "nas", "uns", "zan", "anes", "nan", "ams", "asms", "ats", "anks", "ana", "an", "ants", "jas", "lan"]}}
{"code": "# -*- coding: utf-8 -*-\\n\"\"\"\\nCreated on Sun Apr 29 18:04:22 2018\\nALDS1_3b_r \u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u306b\u3088\u308b\u5b9f\u88c5\\n@author: maezawa\\n\"\"\"\\n\\ndef fifo_enque(data):\\n    global tail\\n    global fifo\\n    fifo[tail] = data\\n    tail = (tail+1)%fifo_size\\n    \\ndef fifo_deque():\\n    global head\\n    global fifo\\n    data = fifo[head]\\n    head = (head+1)%fifo_size\\n    return data\\n\\nfifo_size = 100000\\nfifo = [0 for _ in range(fifo_size)]\\nhead = 0\\ntail = 0\\n\\nn, q = list(map(int, input().split()))\\nfor i in range(n):\\n    s = input().split()\\n    data = [s[0], int(s[1])]\\n    fifo_enque(data)\\n    \\ncurrent_time = 0\\nfinished = []\\nfin_time = []\\n\\nwhile True:\\n    data = fifo_deque()\\n    if data[1] > q:\\n        current_time += q\\n        data[1] -= q\\n        fifo_enque(data)\\n    else:\\n        current_time += data[1]\\n        finished.append(data[0])\\n        fin_time.append(current_time)\\n    if head == tail:\\n        break\\n\\nfor i in range(n):\\n    print(\"{} {}\".format(finished[i], fin_time[i]))\\n        \\n\\n\\n", "target": "745", "substitutes": {}}
{"code": "from collections import defaultdict\\n\\nN = int(input())\\n\\ndef factorize(N):\\n    factors = defaultdict(int)\\n    i = 2\\n    while i * i <= N:\\n        factor = 0\\n        while N % i == 0:\\n            N //= i\\n            factor += 1\\n        if factor > 0:\\n            factors[i] = factor\\n        i += 1\\n    if N > 1:\\n        factors[N] = 1\\n    return factors\\n\\ndef to_cnt(n):\\n    i = 0\\n    while n >= i+1:\\n        n-=(i+1)\\n        i += 1\\n    return i\\n\\nans = 0\\nfor _, n in factorize(N).items():\\n    ans += to_cnt(n)\\nprint(ans)", "target": "454", "substitutes": {"N": ["Y", "Num", "K", "C", "X", "AN", "F", "R", "G", "CNN", "Ni", "NB", "NI", "NG", "M", "NR", "CN", "A", "Na", "MN", "Length", "Len", "NL", "NA", "Size", "Count", "S", "O", "Input", "ND", "NT", "D", "SN", "NS", "FN", "L", "NM", "TN", "P", "No", "Q", "T", "GN", "J", "Z", "V", "I", "B", "Ns", "NUM", "NO", "NN", "Network", "NH"], "factors": ["motores", "factores", "colctors", "Factctors", "ACTores", "actctors", "motors", "factorts", "Factorts", " factorts", "Factor", "floories", "factories", "Factored", "factctors", "actores", "floers", "ACTors", "Factores", "colories", "actor", " factores", "ACTorts", "motctors", " factctors", " factored", "colores", "colers", "factorctors", "factorories", "factorors", "Factors", "ACTctors", "facters", "factored", "colors", "actors", "motor", "factorers", "Factories", "colored", "floors", "floctors", " factories"], "i": ["ei", "ini", "Ni", "ci", "v", "status", "q", "g", "di", "ai", "xi", "li", "list", "x", "ui", "iu", "II", "z", "f", "io", "zi", "m", "cli", "t", "ti", "index", "ki", "phi", "asi", "ind", "bi", "qi", "o", "me", "im", "l", "ix", "\u0438", "r", "k", "ij", "c", "b", "p", "j", "fi", "e", "ii", "ic", "multi", "a", "y", "s", "ip", "gi", "yi", "eu", "id", "d", "pi", " I", "it", "int", "si", "I", "u", "mi", "init"], "factor": ["Number", "f", "core", "frequency", "nom", "out", "zi", "multipl", "operator", "ter", "ta", "a", "F", "Factor", "l", "floor", "t", "number", "to", "ti", "result", "step", "fact", "final", "token", "div", "ho", "actor", "term", "creator", "index", "phi", " Factor", "scale", "lo", "O", "character", "version", "mult", "power", "zer", "p", "initial", "L", "form", "product", "ipl", "e", "FA", "fac", "beta", "ER", "span", "multiple", "T", "I", "iter", "B", "TER", "x", "prime", "vector", "base", "fd"], "n": ["z", "f", "nn", "normal", "m", "node", "l", "y", "nt", "t", "Ni", "number", "s", "fn", "ns", "r", "mn", "en", "nm", "v", "na", "c", "long", "ln", "sn", "b", "nd", "g", "cn", "nu", "yes", "num", "d", "p", "j", "ne", "net", "gn", "np", "nan", "nc", "o", "x", "an", "ll", "new"], "ans": ["ens", "cas", "ls", "AN", "anc", "cs", "amps", "s", "ms", "ins", "aus", "ns", "ons", "outs", "ann", " orphans", " Ans", "aos", "arts", "es", "ians", "ums", "rans", "ks", "ands", "eds", "posts", "ations", "yes", " means", "ANS", "can", "ds", "leans", "uns", "nas", "offs", "anes", "nan", "ams", " spans", "ads", "ates", "ats", "vals", "ana", "an", "authors", "ants", "olds"], "_": ["Name", " name", "nn", "y", "ix", " m", "ip", "en", " j", " __", " p", "ny", "p", "man", "j", " x", " k", "x", "on"]}}
{"code": "line = input()\\na, b, c = [int(n) for n in line.split()]\\nk = int(input())\\nnumbers = [a, b, c]\\nnumbers.sort(reverse=True)\\nnumbers[0] *= 2 ** k\\nprint(sum(numbers))\\n", "target": "674", "substitutes": {"line": ["ine", "lines", "le", "field", "range", "Line", "node", "l", "se", "this", "lin", "number", "online", "name", "row", "sample", "inline", "data", "email", "ln", "user", "lo", "header", "page", "string", "source", "eline", "kin", "liner", "frame", "ne", "word", "object", "e", "stroke", "cell", "sequence", "lf", "nl", "list", " Line", "LINE", "entry", "text"], "a": ["f", "ba", "m", "ae", "be", "l", "t", "sta", "au", "ga", "A", "ca", "r", "la", "at", "an", "h", "aux", "va", "alpha", "ao", "app", "act", "e", "sa", "address", "aa", "ac", "ma", "ia", "ab", "ar", "ach", "am", "aff"], "b": ["f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "cb", "fb", "r", "v", "db", "h", "g", "lib", "d", "bi", "e", "sb", "bo", "gb", "ob", "bs", "u", "B", "ab", "bb", "eb"], "c": ["z", "f", "sc", "m", "C", "cr", "cs", "l", "t", "bc", "cf", "cb", "ca", "rc", "ch", "v", "co", "lc", "g", "cc", "ct", "ce", "d", "cos", "cp", "ec", "e", "dc", "fc", "ac", "tc", "u", "enc", "cm"], "n": ["z", "nn", "names", "m", "ni", "l", "nt", "t", "name", "note", "nr", "N", "i", "ns", "nm", "r", "v", "na", "ln", "ng", "q", "g", "nu", "nb", "num", "d", "p", "j", "ne", "e", "nor", "np", "nan", "nc", "o", " N", "nl", "x"], "k": ["K", "m", "kh", "ka", "l", "t", "ck", "kl", "ikk", "key", "kk", "kan", "ke", "kid", "v", "mk", "q", "ak", "unk", "ijk", "ik", "num", "kok", "p", "alpha", "km", "kb", "ek", "kw", "tk", "o", "w", "sk", "ko", "ku", "ks"], "numbers": [" nubes", "numeric", " nums", "langes", "lubes", "nanges", "lums", "nums", "sums", " nomes", "genumbers", "noromes", " namples", "sumbers", "noramples", "nodes", "nubes", "lumbers", "tumeric", "lodes", "norumbers", "gnodes", "nomes", "gnumer", "tums", "genodes", "tomes", "tubes", "numer", "samples", "genums", "norumeric", "gnums", "gnumbers", "norums", "tanges", "lumer", " numeric", "tumbers", "genumer", " nanges", "sumeric", "namples"]}}
{"code": "#S, L, h\\nimport math\\na, b, C = map(int, input().split())\\n\\nS = a*b*math.sin(C*math.pi/180)*(1/2)\\nL = a+b+math.sqrt(a*a+b*b-2*a*b*math.cos(C*math.pi/180))\\nh = 2*S/a\\n\\nprint('%.4f'% S)\\nprint('%.4f'% L)\\nprint('%.4f'% h)", "target": "221", "substitutes": {}}
{"code": "import sys\\ninput = sys.stdin.readline\\ns = input().rstrip()\\nl = len(s)\\nk = int(input())\\nchk = set()\\nfor i in range(26):\\n  for j in range(l):\\n    if s[j] == chr(i+97):\\n      for m in range(min(5,l-j)):\\n        chk.add(s[j:j+1+m])\\n  if len(chk) >= k:\\n    break\\n    \\nchk = sorted(list(chk))\\nprint(chk[k-1])", "target": "246", "substitutes": {"input": ["rand", "str", "add", "sleep", "out", "util", "find", " Input", "reset", "spec", "println", "pos", "fn", "request", "output", "cin", "raw", "ch", "enter", "pull", "start", "q", "insert", "enum", "ref", "Input", "source", "select", "val", "cmd", "pattern", "config", "password", "read", "next", "call", "rint", "command", "initial", "act", "get", "inc", "cmp", "it", "int", "inner", "got", "txt", "focus", "hit", "feed", "print", "exec", "submit", "put", "data", "text", "shift"], "s": ["f", "stats", "sts", "ps", "str", "sv", "lines", "ls", "ws", "plays", "fs", "a", "cs", "rs", "t", "gs", "xs", "ms", "reads", "ins", "r", "ends", "strings", "c", "gins", "ys", "h", "b", "g", "S", "csv", "string", "p", "ains", "ss", "less", "parts", "sb", "ashes", "its", "n", "ads", "abs", "bs", "sq", "w", "tes", "ats", "ts", "qs", "sol", "js"], "l": ["z", "f", "ls", "el", "le", "t", "kl", "len", "r", "v", "sl", "length", "c", "ln", "h", "b", "lc", "g", "d", "size", "p", "dl", "L", "lp", "pl", "hl", "n", "li", "w", "nl", "list", "ll"], "k": ["z", "dk", "K", "kr", "kt", "kh", "ka", "t", "ck", "kl", "ok", "kk", "ke", "ch", "kid", "c", "mk", "h", "q", "ki", "kn", "unk", "ak", "ik", "kok", "p", "km", "kb", "kj", "ek", "kw", "tk", "n", "sk", "ko", "ku", "ks"], "chk": ["chend", "echcheck", "Chd", "chp", "thkw", "echck", "chq", "Chk", "clck", "echnd", " chkl", "thck", "chemax", "echp", "cheq", "Chkl", "chks", "chkw", " chck", "tchkl", "Chck", "check", " chks", "schck", "echke", "cld", "chmax", " chnd", "tchk", "Chik", "chep", "chck", "schcheck", "echmax", "tchq", "echk", "echkw", "cheke", "schk", "chke", "checheck", "echks", "chik", " chke", " chq", "clk", "Chq", "chcheck", "clik", "chnd", " chmax", "thk", "tchks", "chd", " chd", "tchkw", "chkl", "chek", "cheks", " chik", "tchck", "thks", "echq", "schp"], "i": ["z", "ei", "ini", "zi", "a", "y", "ix", "ti", "ip", "ci", "ji", "gi", "ij", "hi", "oi", "ami", "ie", "di", "bi", "pi", "ai", "ii", "xi", "si", "ic", "li", "I", "ia", "ui", "mi", "iu", "im"], "j": ["z", "f", "obj", "ion", "jl", "pt", "ja", "y", "t", "ix", "jp", "ji", "r", "v", "json", "ij", "index", "job", "q", "b", "h", "g", "je", "jac", "di", "p", "oj", "kj", "jas", "e", "it", "jj", "jump", "aj", "J", "n", "si", "o", "ju", "uj", "dj", "li", "bj", "js", "jc"], "m": ["z", "f", "gm", "ym", "wm", "mc", "tm", "am", "t", "sm", "month", "ms", "M", "mn", "v", "em", "arm", "c", "bm", "pm", "h", "q", "b", "mx", "g", "dm", "d", "p", "vm", "km", "mt", "om", "lem", "n", "mr", "met", "dj", "mm", "mi", "fm", "cm"]}}
{"code": "# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\\n# import sys\\n# sys.setrecursionlimit(10 ** 6)\\n# import bisect\\n# from collections import deque\\n# from decorator import stop_watch\\n#\\n#\\n# @stop_watch\\ndef solve(S, K):\\n    ans = ''\\n    for i in range(len(S)):\\n        if i + 1 == K:\\n            ans = S[i]\\n            break\\n        if S[i] != '1':\\n            ans = S[i]\\n            break\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    S = input()\\n    K = int(input())\\n    # N, M = map(int, input().split())\\n    # A = [int(i) for i in input().split()]\\n    # B = [int(i) for i in input().split()]\\n    # AB = [[int(i) for i in input().split()] for _ in range(N)]\\n    solve(S, K)\\n\\n    # # test\\n    # from random import randint\\n    # from func import random_str\\n    # solve()\\n", "target": "119", "substitutes": {}}
{"code": "N = [int(_) for _ in input().split()][0]\\nif N>=1000:\\n    print('ABD')\\nelse:\\n    print('ABC')", "target": "636", "substitutes": {"N": ["K", "C", "X", "F", "R", "G", "W", "NB", "NI", "M", "NV", "NR", "A", "NA", "S", "E", "NT", "D", "NS", "L", "NM", "TN", "P", "Q", "T", "J", "Z", "n", "V", "I", "B", "NUM", "NC", "NN", "NH"], "_": ["Y", "m", "C", "H", " g", "a", "my", "R", "t", "name", "M", "len", "A", "un", "na", "c", "length", "long", "NP", "U", "q", "b", " p", "place", "val", " get", "ml", "L", " l", "P", "T", "J", "AB", "Z", " all", "I", " d", "NN", " f", "new"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n \\ndef main():\\n    n = int(readline())\\n    #f(x):=x\u4ee5\u4e0b\u306e\u7d20\u6570\u3092\u5217\u6319\u3059\u308b\u95a2\u6570\\n    #int -> list\\n    def f(x):\\n        if x < 2:\\n            return [] \\n        res = [2]\\n        for i in range(2, x+1):\\n            f = True\\n            for j in res:\\n                if i%j == 0:\\n                    f = False\\n            if f:\\n                res.append(i)\\n        return res\\n    primes = f(n)\\n    numOfPrime = []\\n    for p in primes:\\n        #2^10=1024\u3060\u304b\u308910\u307e\u3067\u3067\u5341\u5206\\n        numOfDiv = 0\\n        for k in range(1, 11):\\n            numOfDiv += n//(p**k)\\n        numOfPrime.append((p, numOfDiv))\\n    P = int(1e9)+7\\n    ans = 1\\n    for i, j in numOfPrime: \\n        ans *= (j+1)\\n        ans %= P\\n    print(ans) \\nif __name__ == '__main__':\\n    main()\\n", "target": "658", "substitutes": {"read": ["READ", " READ", "str", "reader", "load", "seek", " writ", "find", " dat", "hold", "give", "readable", "pop", "reads", "r", "en", "buffer", "check", "write", "length", "replace", "gets", " write", "reading", "insert", "ind", " get", "Read", "send", "get", "parse", "od", "run", " send", "rid", "then", "int", "each", "rd", " reads", "feed", "iter", "print", " Read", "roll", "data", "text", "take"], "readline": [" readlf", " readfile", "READfile", "readlist", "loadline", "loadlin", "getfunction", " readlin", "Readline", "READline", "getline", "readstring", "readlin", "loadlist", "READlines", "loadlines", "Readlf", "loadstring", "getlf", "READlist", "readfunction", " readlist", "getlin", "readlf", "loadfile", "getlines", " readfunction", " readstring", "readfile", "Readfunction", "Readlines", "getstring"], "readlines": ["READnames", "readernames", "readins", "readnames", "loadlists", " readles", "loadles", "readpoints", "scanles", "READins", "READlines", "readerins", "loadlines", " readlists", " readins", " readelines", "readlists", "loadpoints", "readelines", "readles", " readnames", "READelines", "scanlines", "readerelines", "scanlists", "readerlines", "scanpoints", " readpoints"], "n": ["z", "f", "nn", "m", "l", "nt", "t", "nr", "s", "N", "i", "ns", "r", "k", "c", "sn", "h", "b", "nu", "nb", "d", "size", "p", "j", "e", "nc", "u", "nl"]}}
{"code": "def ALDS1_3B():\\n    n, q = map(int, input().split())\\n    PQ = [[l[0], int(l[1])] for l in  [input().split() for i in range(n)]  ]\\n    times = 0\\n    while PQ:\\n        p = PQ.pop(0)\\n        if p[1] <= q:\\n            times += p[1]\\n            print('%s %d' %(p[0], times))\\n        else:\\n            times += q\\n            PQ.append([p[0], p[1]-q])\\n\\n\\nif __name__ == '__main__':\\n    ALDS1_3B()", "target": "745", "substitutes": {"n": ["nn", "m", "a", "nt", "t", "nr", "N", "len", "ns", "mn", "r", "k", "v", "na", "c", "ln", "sn", "b", "g", "cn", "nu", "nb", "num", "d", "j", "ne", "gn", "np", "nc", "w", "no", "x"], "q": ["z", "qt", "f", "qual", "qa", "iq", "m", "qv", "charge", "y", "t", "r", "k", "ue", "ch", "v", "query", "dq", "h", "b", "g", "queue", "d", " Q", "eq", "j", "quant", "qi", "Q", "aq", "time", "sq", "ql", "u", "quit", "quality", "qq", "qs", "requ", "qu"], "PQ": ["pQB", "PAQual", "FPQB", "JPUK", "PAIT", "NPPen", "NPQ", "TPQU", "NPQual", "PIT", "TPQB", "FPq", " PQual", "PQB", "FPQ", "PAQB", "TPIT", "pQU", "pq", "PAQueue", " PQueue", "PAPen", "PQU", "PQueue", "JPQB", "Pq", "NPQB", "TPUK", " PQB", "FPQU", "PQual", " PPen", " PQU", "JPQU", " PIT", "IPQ", "IPQU", "pQ", "IPQB", "JPQ", "PPen", "IPq", " PUK", "PAQ", "TPQueue", "TPQ", "PUK"], "l": ["fl", "lit", "ol", "ld", "ls", "jl", "el", "line", "m", "lv", "lin", "kl", "r", "k", "lb", "la", "v", "url", "sl", "c", "lt", "ln", "lay", "b", "lc", "tl", "ml", "layer", "dl", "L", "lp", "pl", "local", "hl", "loc", "o", "li", "left", "nl", "list", "x", "rl", "ll"], "i": ["z", "f", "ini", "zi", "m", "y", "ix", "ti", "r", "k", "v", "gi", "b", "ind", "id", "di", "j", "pi", "li", "I", "x", "im"], "times": ["ps", "comments", "stats", "values", "users", "cases", "checks", "events", "blocks", "places", "ones", "tim", "forms", "cs", "counter", "t", "uses", "steps", "modules", "things", "hours", "amps", "ms", "ports", "outs", "caps", "points", "aps", "tests", "types", "changes", "reports", "etimes", "imes", "runs", "versions", "seconds", "TS", " Times", "results", "Times", "offs", "its", "powers", "ims", "time", "dates", "actions", "months", "frames", "tags", "ts", "qs", "ks", "terms"], "p": ["op", "ps", "f", "pt", "m", "ap", "a", "rep", "pkg", "t", "bp", "pb", "pp", "point", "jp", "tp", "r", "v", "sp", "pa", "vp", "c", "item", "pers", "b", "g", "pair", "post", "mp", "er", "pre", "j", "lp", "ping", "cp", "app", "port", "pi", "P", "it", "current", "np", "up", "dp", "pc", "part", "x", "pro", "new", "pg"]}}
{"code": "N=int(input())\\nK=[int(n) for n in input().split()]\\nS=sum(K)\\ntotal=0\\nfor i in range(N):\\n  S-=K[i]\\n  total+=K[i]*S\\nprint(total %(10**9+7))", "target": "198", "substitutes": {"N": ["Y", "Num", "H", "C", "X", "F", "R", "Ni", "NB", "NI", "M", "NR", "A", "NA", "NT", "D", "SN", "NS", "L", "TN", "P", "No", "Q", "T", "GN", "J", "Z", "V", "I", "B", "NC", "NO", "NN"], "K": ["KA", "Disk", "KN", "FK", "PK", "H", "C", "X", "F", "KK", "Kn", "SK", "W", "M", "A", "k", "KB", "KR", "Mask", "KS", "OK", "VK", "NK", "KING", "D", "Can", "UK", "Keys", "Key", "DK", "Cal", "P", "Q", "KE", "T", "J", "KEY", "Z", "V", "I", "B", "KC", "Kind", "ks"], "n": ["f", "nn", "nw", "yn", "names", "m", "node", "ni", "l", "nt", "t", "number", "name", "note", "nr", "fn", "ns", "nm", "k", "mn", "v", "na", "c", "ln", "sn", "nd", "wn", "cn", "nu", "num", "d", "p", "dn", "nil", "j", "ne", "nor", "np", "nan", "nc", "nl", "an"], "S": ["Y", "Sample", "SI", "Si", "C", "H", "SS", "X", "Total", "F", "R", "G", "W", "Sum", "PS", "s", "M", "A", "U", "Size", "Scale", "O", "D", "NS", "SU", "L", "Sal", "P", "TS", "Q", "SH", "MS", "T", "J", "Z", "V", "I", "B", "CS", "GS", "SA", "Set"], "total": ["f", "stats", "done", "active", "normal", "out", "sum", "ta", "Total", "unique", "basic", "all", "t", "this", "number", "full", "to", "note", "result", "s", "final", "eta", "output", "created", "public", "otal", "OTAL", "database", "open", "start", "human", "complete", "size", "goal", "alpha", "initial", "zero", "local", "quant", "net", "current", "relative", "average", "available", "log", "summary", "set", "square", "system", "base", "count", "new", "general", "description"], "i": ["ini", "zi", "m", "uri", "y", "ix", "ti", "ip", "key", "k", "ji", "gi", "v", "ij", "ori", "index", "ki", "q", "b", "sim", "ind", "id", "di", "ik", "bi", "j", "pi", "qi", "it", "ii", "iri", "si", "xi", "ic", "I", "li", "x", "ui", "mi", "iu", "multi"]}}
{"code": "def ss_reverse(ss,a,b):\\n    rev = ss[a:b+1]\\n    rev = rev[::-1]\\n    edited = ss[:a] + rev + ss[b+1:]\\n    return edited\\n\\ndef ss_replace(ss,a,b,word):\\n    edited = ss\\n    edited= ss[:a] + word + ss[b+1:]\\n    return edited\\n\\ndef print_result(ss,a,b):\\n    print(ss[a:b+1])\\n\\nss = input()\\nn = int(input())\\n\\nfor i in range(n):\\n    I = input().split()\\n    if len(I) == 4:\\n        ss = ss_replace(ss,int(I[1]),int(I[2]),I[3])\\n    \\n    if I[0] == \"reverse\" :\\n        ss = ss_reverse(ss,int(I[1]),int(I[2]))\\n\\n    if I[0] == \"print\" :\\n        print_result(ss,int(I[1]),int(I[2]))\\n    \\n\\n", "target": "110", "substitutes": {"ss": ["stats", "https", "SS", "oss", "spec", "cs", "ssh", "ins", "xx", "sw", "status", "css", "complete", "less", "ses", "ts", "js", "pg", "sys", "cas", "ws", "se", "ms", "os", "sch", "news", "json", "styles", "nexus", "test", "webkit", "tz", "cos", "ds", "\u00df", "txt", "abs", "px", "iss", "us", "str", "sv", "ls", "est", "src", "sql", "rs", "sex", "ed", "scl", "ssl", "yy", "sd", "sl", "ess", "pse", "sit", "sh", "sol", "ps", "out", "sc", "sync", "html", "sis", "struct", "tt", "seq", "s", "ns", "es", "ng", "sn", "ass", "rss", "vs", "host", "hess", "bs", "sq", "ats", "ser", "tx"], "a": ["ba", "el", "apa", "ap", "am", "ae", "ta", "sta", "au", "af", "ga", "back", "xa", "ca", "A", "div", "at", "la", "pa", "ea", "era", "ak", "ami", "any", "admin", "area", "go", "va", "alpha", "da", "ao", "br", "app", "oa", "aka", "sa", "ai", "ana", "ata", "aa", "aj", "al", "ac", "sha", "ma", "part", "abs", "ia", "ab", "arg", "aaa", "ar", "ach", "an", "aff", "after"], "b": ["z", "f", "rb", "ba", "ib", "m", "mb", "be", "l", "y", "t", "bc", "bg", "cb", "r", "fb", "bh", "v", "db", "c", "h", "an", "g", "nb", "d", "bi", "br", "j", "e", "sb", "beta", "bis", "batch", "o", "bs", "ab", "bb", "body", "bar", "eb"], "rev": ["canon", "sub", "vec", "edit", "obj", "reviewed", "inv", "rez", "rs", "seq", "pos", "ed", "rot", "expr", "rc", "r", "adj", "res", "err", "v", "history", "rage", "ren", "repl", "ref", "rss", "re", "prev", "orig", "vs", "change", "changed", "alpha", "trans", " revised", "it", "short", "txt", "neg", "review", "vis", "rec", "reverse", "rel", " reversed", "ev", "rt", "ser", "bre", "rek", "new", "vert"], "edited": ["started", "sub", "registered", "sed", "edit", "reviewed", "ted", "tmp", " edits", "text", "editor", "wrote", "generated", "original", "ext", "seq", "pos", "adjusted", "ed", "uned", "modified", "stated", "dated", "ins", " updated", "created", "r", "elected", "Edited", "v", "added", "ired", "joined", "rendered", "ritten", " written", "ex", "oned", " ed", "updated", "orig", " added", "changed", "ned", "ented", " revised", "trans", " inserted", "pressed", "txt", "locked", "released", "abs", "ac", "activated", "aired", "checked", "reverse", "bed", "worked", "ied", "x", "ended", "colored", " edit", "written", "tx"], "word": ["sword", "feat", "edit", "win", "comment", "action", "cycle", "wd", "pos", "point", "butt", "v", "tag", "words", "term", "string", "work", "re", "cmd", "Word", "char", "man", "ring", "letter", "feature", "doc", "var", "weight", "phrase", "w", "part", "wp", "space", "prefix", "rule", "text"], "n": ["z", "nn", "nia", "m", "l", "nt", "t", "number", "nr", "N", "len", "ns", "mn", "en", "v", "na", "c", "ln", "sn", "ot", "nd", "g", "nu", "nb", "num", "d", "p", "j", "ne", "np", "nc", "w", "nl", "norm"], "i": ["f", "l", "y", "t", "s", "ci", "r", "k", "v", "c", "index", "q", "ind", "di", "p", "j", "pi", "e", "xi", "li", "u", "ia", "x"], "I": ["Y", "SI", "AI", "IP", "Si", "X", "IC", "F", "G", "NI", "Index", "HI", "RI", "IB", "MI", "M", "IG", "Fi", "Info", "CI", "KI", "ID", "IS", "O", "IJ", "D", "Xi", "FI", "Is", "GI", "IO", "L", "If", "VI", "IT", "III", "TI", "UI", "IM", "IL", "HTML", "LI", "J", "V", "Note", "Li", "PI", "IX", "IE", "IF", "II", "DI"]}}
{"code": "def main():\\n\tN = int(input())\\n\tA = [int(a) for a in input().split(\" \")]\\n\tA.sort()\\n\tcnt = []\\n\tc = 0\\n\ta = 0\\n\tfor i in range(len(A)):\\n\t\tif i == 0:\\n\t\t\ta = A[i]\\n\t\t\tc += 1\\n\t\telse:\\n\t\t\tif A[i] == a:\\n\t\t\t\tc += 1\\n\t\t\telif A[i] != a:\\n\t\t\t\tcnt.append(c)\\n\t\t\t\tc = 1\\n\t\t\t\ta = A[i]\\n\telse:\\n\t\tcnt.append(c)\\n\\n\tcnt = list(map(lambda ct: (2 - (ct % 2)), cnt))\\n\tevens = cnt.count(2)\\n\tif evens % 2 == 0:\\n\t\tprint(len(cnt))\\n\telse:\\n\t\tprint(len(cnt) - 1)\\n\\nmain()", "target": "224", "substitutes": {"N": ["Y", "K", "H", "C", "X", "F", "R", "Ni", "M", "NA", "S", "E", "O", "NT", "D", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NN"], "A": ["App", "AY", "AR", "AI", "AA", "Ar", "H", "C", "API", "AC", "AV", "ACC", "Abs", "Args", "CA", "LA", "TA", "AL", "JA", "S", "As", "Australia", "AU", "HA", "AT", "Array", "All", "AF", "WA", "Address", "GA", "L", "An", "At", "ATA", "P", "AM", "This", "AS", "AE", "The", "AP", "AB", "One", "I", "B", "Alpha", "ACT", "SA"], "a": ["f", "ba", "apa", "ap", "ae", "another", "l", "ha", "parent", "name", "sta", "t", "all", "au", "ga", "af", "xa", "s", "eta", "ca", "la", "at", "pa", "na", "ea", "index", "an", "era", "b", "val", "area", "go", "va", "p", "alpha", "ao", "j", "app", "oa", "\u00e4", "aka", "act", "e", "ya", "ai", "sa", "ata", "aed", "aa", "ac", "n", "sha", "ma", "o", "u", "ia", "ab", "eas", "aaa", "x", "ar", "ach", "am", "data", "aff", "auto"], "cnt": ["coct", "ncount", "acnc", "rNT", "csnt", " ctr", "gcNT", "csnd", "curount", " cnd", "csct", "gcnt", "acnt", "counter", "cnc", "coront", "Ccount", "cornt", "scont", "Cont", "rnt", "CNT", "acct", "csret", "Cnc", "acNT", "scnt", "curret", "cNT", "curnd", " cont", "Cct", "nNT", "coont", "ccount", "Count", "Cnt", "sctr", "cont", "corct", "csNT", "curounter", "ctr", "scct", "count", "nounter", "cortr", "csnc", " count", " cret", " cNT", "nct", "gcct", "curnt", "nnt", " counter", "rct", " cnc", "gcnc", "curct", "cct", " cct", "cocount", "rount", "cnd", "cret", "nount", " ccount"], "c": ["f", "mc", "m", "C", "cr", "cs", "l", "t", "con", "ci", "r", "k", "rc", "cb", "ch", "v", "co", "h", "b", "lc", "gc", "ct", "cc", "unc", "ce", "d", "cos", "p", "cur", "cont", "col", "cp", "com", "e", "cd", "dc", "conf", "n", "nc", "ac", "cu", "u", "tc", "cum", "x", "cm", "count"], "i": ["io", "ini", "ri", "zi", "m", "l", "y", "t", "ix", "ti", "ip", "ci", "r", "point", "ji", "gi", "v", "ij", "ori", "index", "b", "g", "ie", "ind", "id", "di", "num", "bi", "multi", "j", "pi", "ai", "it", "ii", "xi", "si", "n", "ic", "o", "li", "I", "iter", "me", "x", "mi", "iu", "im"], "evens": [" evenings", "evenings", " eveneds", "Eveneds", " evenches", " Eveneds", "evenits", " Evens", "oddches", " evenows", "Evens", " Evenits", " Evenings", "oddits", "eveneds", "oddeds", "oddows", "Evenches", "odds", "oddings", "evenches", "Evenows", "evenows", " evenits"]}}
{"code": "A,x,C = input ().split ()\\nn = x[:1]\\nprint ('A'+n+'C')", "target": "324", "substitutes": {"A": ["Y", "AA", "Ar", "H", "X", "a", "R", "G", "N", "CA", "S", "E", "O", "Input", "As", "D", "Array", "An", "At", "P", "T", "The", "V", "I", "B", "Alpha", "Ax"], "x": ["z", "xp", "X", "a", "ux", "xy", "l", "y", "t", "xs", "xa", "i", "xx", "xxxxxxxx", "input", "v", "xt", "wx", "c", "na", "h", "b", "ex", "ct", "d", "p", "rx", "xc", "e", "ox", "xe", "xxxx", "int", "xi", "w", "xd", "tx"], "C": ["Y", "K", "H", "X", "F", "R", "G", "CNN", "CP", "N", "M", "BC", "CN", "E", "D", "L", "CC", "P", "LC", "T", "YC", "Z", "V", "B", "CS", "CB", "JC", "DC"], "n": ["z", "nn", "names", "m", "node", "l", "\u00f1", "t", "name", "number", "nt", "nr", "N", "i", "fn", "ns", "mn", "nm", "k", "len", "v", "na", "c", "long", "ln", "sn", "cn", "nu", "nb", "num", "d", "next", "ne", "nor", "int", "np", "nan", "nc", "o", "no", "nl"]}}
{"code": "from heapq import heappush, heappop\\nfrom bisect import bisect_left, bisect_right\\nfrom collections import deque, defaultdict\\nfrom itertools import combinations, permutations, combinations_with_replacement\\nfrom itertools import accumulate\\nfrom math import ceil, sqrt, pi\\n\\nMOD = 10 ** 9 + 7\\nSIZE = 10 ** 6\\n\\nN, P = map(int, input().split())\\nS = input()\\n\\nanswer = 0\\nif P == 2 or P == 5:\\n    for i, s in enumerate(S):\\n        if int(s) % P == 0:\\n            answer += i + 1\\nelse:\\n    S = S[::-1]\\n    cnt = defaultdict(int)\\n    tmp = 0\\n    for i, s in enumerate(S):\\n        tmp += int(s) * pow(10, i, P)\\n        if tmp % P == 0:\\n            answer += 1\\n        answer += cnt[tmp % P]\\n        cnt[tmp % P] += 1\\n\\nprint(answer)", "target": "448", "substitutes": {"MOD": ["ALL", "ADD", "INC", "UL", "G", "W", " mod", "FD", "REF", "M", "ERROR", "FORM", "Exp", "RO", "ID", "RE", "OD", "mod", "OM", "CC", "Mod", "AD", "MS", "AP", "EW", "NO", "BY", "MD"], "SIZE": ["Y", " size", "K", "EEE", "FontSize", "GES", "W", " W", "EXP", "MAX", "NP", "Size", "IS", "IZE", "MB", "ALE", "size", " sizes", "ES", "ITS", "SH", " INT", "Z", "PI", "WH", "ize", "STD"], "N": ["Y", "C", "F", "R", "Ni", "NB", "M", "NR", "A", "NL", "Size", "E", "NT", "D", "NS", "L", "TN", "Q", "T", "J", "n", "Z", "V", "I", "B", "GT"], "P": ["K", "PART", "PK", "IP", "H", "C", "MP", "X", "PD", "F", "YP", "R", "Format", "G", "PS", "M", "PA", "Type", "PO", "PU", "JP", "SCP", "NP", "U", "Pi", "PE", "PR", "O", "Part", "D", "p", "WP", "L", "TP", "SP", "AMP", "Pocket", "PP", "Q", "T", "DP", "J", "V", "I", "B", "LP", "PI", "Power", "CP", "PUT", "Port", "PT", "BP"], "S": ["BS", "SI", "Si", "C", "SS", "R", "SL", "SAN", "G", "PS", "SB", "JS", "OS", "M", "A", "RS", "U", "Socket", "IS", "SR", "E", "Input", "DS", "SAM", "NS", "US", "SN", "SU", "SO", "L", "ss", "SP", "TS", "Q", "SH", "T", "SA", "SF", "Session", "Answer", "SE", "V", "VS", "I", "B", "CS", "GS", "SQL"], "answer": ["ve", "offset", "message", "array", "comment", " Answer", "echo", "vote", "poll", "number", "archive", "wer", "result", "say", "request", "reply", "output", "answered", "value", "attribute", "timeout", "interpret", "adj", "query", "write", "open", "vantage", "opt", "index", "remember", "term", "q", "approximately", "distance", "see", "position", "eni", "test", "option", "size", "next", "image", "exit", "do", "accept", "window", "zero", "word", "consider", "ee", "address", "aq", "energy", "error", "cache", "Answer", "void", "response", "set", "question", "um", "prefix", "entry", "new"], "i": ["f", "ini", "zi", "m", "a", "l", "y", "t", "ix", "iy", "ti", "info", "ip", "ci", "gi", "v", "ij", "c", "index", "oi", "phi", "b", "yi", "ind", "id", "di", "ik", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "batch", "si", "n", "ic", "xi", "li", "I", "iter", "ui", "mi", "iu", "im"], "s": ["ps", "f", "z", "str", "ings", "ws", "ls", "names", "m", "fs", "a", "sql", "cs", "rs", "se", "t", "gs", "xs", "y", "ms", "ars", "ins", "ns", "r", "single", "res", "v", "sp", "hs", "c", "es", "ys", "q", "gets", "b", "string", "p", "ess", "ss", "j", "ds", "e", "sb", "files", "ses", "abs", "n", "bs", "sq", "w", "bes", "ats", "als", "x", "ts", "js"], "cnt": ["colst", "cst", "dcnt", " counters", "ncret", " cnd", "counters", "acnt", "account", " cmp", "Ccount", "dcst", "dcmp", " cot", "cot", "acct", "ncot", "Cct", "ccount", "acnd", "Cnt", "dcounters", "colnt", " cst", "colmp", " cret", "cmp", "ncnt", "Cret", "cnd", "cct", " cct", "colounters", "cret", "ncct", " ccount", "Cot", "Cnd"], "tmp": ["img", "tu", "nom", "out", "obj", "sum", "tm", "m", "crop", "xy", "node", "acc", "pkg", "nt", "t", "tt", "second", "etc", "attr", "adj", "ptr", "tp", "jp", "msg", "opt", "timeout", "sp", "perm", "sym", "snap", "tar", "v", "mk", "term", "mp", "temp", "nb", "tn", "ctx", "p", "j", "cp", "pi", "sam", "td", "cmp", "np", "txt", "cache", "tc", "mm", "qq", "prefix", "ppo", "prime", "cv", "proc", "st", "pot"]}}
{"code": "from collections import deque\\nn=int(input())\\na=[]\\nfor i in range(n):\\n    a.append(int(input()))\\na.sort()\\na=deque(a)\\nans=0\\n\\nbig=a.pop()\\nsmall=a.popleft()\\nans+=big-small\\n#print(ans,a,big,small)\\npre_big=big\\npre_small=small\\nchecked_a=deque([small,big])\\nwhile(len(a)>1):\\n    big=a.pop()\\n    small=a.popleft()\\n    ans+=pre_big-small\\n    ans+=big-pre_small\\n#    print(ans,a,big,small,pre_big,pre_small)\\n    pre_big=big\\n    pre_small=small\\n\\nif(len(a)==1):\\n    last_a=a.pop()\\n    ans+=max(pre_big-last_a,last_a-pre_small)\\n\\nprint(ans)\\n\\n", "target": "310", "substitutes": {"n": ["nn", "nia", "nets", "m", "ni", "l", "nt", "nr", "N", "len", "ns", "mn", "nm", "k", "na", "c", "ng", "sn", "an", "nd", "ln", "cn", "nu", "nb", "nv", "d", "p", "nat", "count", "ne", "net", "gn", "np", "nan", "nc", "nants", "no", "nl", " N", "ll"], "a": ["z", "f", "done", "ba", "arr", "obj", "apa", "array", "fa", "am", "ta", "ae", "l", "all", "t", "sta", "ga", "au", "ed", "xa", "A", "ca", "la", "at", "history", "aos", "pa", "na", "wa", "c", "index", "ea", "es", "era", "b", "aux", "area", "go", "aaaa", "p", "alpha", "da", "ao", "va", "exp", "oa", "act", "parts", "e", "sa", "ata", "aa", "up", "abs", "ac", "ma", "ia", "ab", "eas", "aaa", "an", "auto"], "i": ["f", "y", "ix", "ci", "r", "k", "c", "q", "b", "ind", "id", "p", "j", "e", "it", "I", "u", "iter", "x", "um", "im"], "ans": ["ens", "anon", "names", "aned", "oss", "anc", "pan", "cons", "amps", "ins", "anas", "ars", "aus", "ons", "ns", "outs", "ann", "ends", "aps", "aos", "aces", "ents", "asks", "rans", "ands", "posts", "ANS", "leans", "uns", "nas", "offs", "ats", "anks", "an", "ants", "olds", "lan"], "big": ["z", "good", "fat", "max", "normal", " bigger", "bl", "be", "full", "old", "great", "tiny", "high", "div", "little", "long", "b", "g", "real", "lo", "significant", "bi", "bra", "bled", "large", "gb", "short", "main", "grand", "li", "bot", " Big", "Big", "new", "huge"], "small": ["sub", "min", "sell", "sc", "simple", "old", "full", "second", "young", "tiny", "little", "sp", "now", "slow", "empty", " Small", "Small", "lo", "medium", "size", "low", "sam", "local", "self", "none", "last", "large", "short", "sized", "quick", "loc", "left", "li", "mini", "south", "sh", "own", "new", "huge"]}}
{"code": "x = int(input())\\nyokin = 100\\nans = 0\\nwhile yokin < (x):\\n  yokin = (yokin*100 +yokin)//100 \\n  ans += 1\\nprint(ans)", "target": "359", "substitutes": {"x": ["z", "f", "xp", "X", "xy", "y", "t", "ix", "xs", "step", "ax", "xx", "i", "xa", "k", "input", "v", "xt", "dx", "wx", "index", "q", "ex", "width", "fx", "p", "rx", "xc", "time", "xi", "n", "px", "w", "xd", "tx"], "yokin": ["ayolit", "xyorius", "pyoky", "xyotin", "yoky", "nyoton", "yitis", " yoko", "yyitis", " yoky", " yjin", "ayokin", " yolin", "yolit", " yolit", "xyokin", "pyoton", " yhog", "yoko", "yyokin", "nyjin", "yyorius", "xyoko", "nyorius", "yoton", "pyokin", " yitis", "nyolin", "nyitis", "ypson", "ayoko", "nyotin", "yyjin", "nyhog", "yypson", "yhog", "yotin", "nyoko", "nyokin", "yolin", "yjin", " ypson", " yorius", "pyolin", " yotin", "nyoky", "ayotin", "yorius", "yyhog", "nyolit", "nypson", " yoton"], "ans": ["rors", "ens", "ls", "names", "percent", "oss", "ean", "gs", "xs", "amps", "iann", "s", "ins", "anas", "os", "aus", "ons", "ns", "outs", "ann", "ars", "ms", "news", "aos", "arts", "ents", "es", "ians", "angs", "ys", "ays", "eds", "yes", " means", "vs", "ANS", "uns", "helps", "offs", "ams", "ads", "asms", "ats", "us", "anks", "an", "ks", "ants", "uploads"]}}
{"code": "\\nimport operator\\nclass SegmentTree:\\n    def __init__(self, size, fn=operator.add, default=None, initial_values=None):\\n        \"\"\"\\n        :param int size:\\n        :param callable fn: \u533a\u9593\u306b\u9069\u7528\u3059\u308b\u95a2\u6570\u3002\u5f15\u6570\u3092 2 \u3064\u53d6\u308b\u3002min, max, operator.xor \u306a\u3069\\n        :param default:\\n        :param list initial_values:\\n        \"\"\"\\n        default = default or 0\\n\\n        # size \u4ee5\u4e0a\u3067\u3042\u308b\u6700\u5c0f\u306e 2 \u51aa\u3092 size \u3068\u3059\u308b\\n        n = 1\\n        while n < size:\\n            n *= 2\\n        self._size = n\\n        self._fn = fn\\n\\n        self._tree = [default] * (self._size * 2 - 1)\\n        if initial_values:\\n            i = self._size - 1\\n            for v in initial_values:\\n                self._tree[i] = v\\n                i += 1\\n            i = self._size - 2\\n            while i >= 0:\\n                self._tree[i] = self._fn(self._tree[i * 2 + 1], self._tree[i * 2 + 2])\\n                i -= 1\\n\\n    def set(self, i, value):\\n        \"\"\"\\n        i \u756a\u76ee\u306b value \u3092\u8a2d\u5b9a\\n        :param int i:\\n        :param value:\\n        :return:\\n        \"\"\"\\n        x = self._size - 1 + i\\n        self._tree[x] = value\\n\\n        while x > 0:\\n            x = (x - 1) // 2\\n            self._tree[x] = self._fn(self._tree[x * 2 + 1], self._tree[x * 2 + 2])\\n\\n    def add(self, i, value):\\n        \"\"\"\\n        \u3082\u3068\u306e i \u756a\u76ee\u3068 value \u306b fn \u3092\u9069\u7528\u3057\u305f\u3082\u306e\u3092 i \u756a\u76ee\u306b\u8a2d\u5b9a\\n        :param int i:\\n        :param value:\\n        :return:\\n        \"\"\"\\n        x = self._size - 1 + i\\n        self.set(i, self._fn(self._tree[x], value))\\n\\n    def get(self, from_i, to_i=None, k=0, L=None, r=None):\\n        \"\"\"\\n        [from_i, to_i) \u306b fn \u3092\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059\\n        :param int from_i:\\n        :param int to_i:\\n        :param int k: self._tree[k] \u304c\u3001[L, r) \u306b fn \u3092\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u6301\u3064\\n        :param int L:\\n        :param int r:\\n        :return:\\n        \"\"\"\\n        if to_i is None:\\n            return self._tree[self._size - 1 + from_i]\\n\\n        L = 0 if L is None else L\\n        r = self._size if r is None else r\\n\\n        if from_i <= L and r <= to_i:\\n            return self._tree[k]\\n\\n        if to_i <= L or r <= from_i:\\n            return None\\n\\n        ret_L = self.get(from_i, to_i, k * 2 + 1, L, (L + r) // 2)\\n        ret_r = self.get(from_i, to_i, k * 2 + 2, (L + r) // 2, r)\\n        if ret_L is None:\\n            return ret_r\\n        if ret_r is None:\\n            return ret_L\\n        return self._fn(ret_L, ret_r)\\n\\n    def __len__(self):\\n        return self._size\\n\\ndef resolve():\\n    N = int(input())\\n    S = input()\\n    Q = int(input())\\n\\n    seg = SegmentTree(N, fn=operator.or_)\\n    for i in range(N):\\n        s = 2 ** (ord(S[i]) - ord('a'))\\n        seg.set(i, s)\\n\\n    for _ in range(Q):\\n        act, q1, q2 = input().split()\\n        if act == \"1\":\\n            # \u6587\u5b57\u5909\u66f4\\n            idx = int(q1) - 1\\n            s_bin = 1 << (ord(q2) - ord('a'))\\n            seg.set(idx, s_bin)\\n        else:\\n            # L,R\u533a\u9593\u306e\u6587\u5b57\u7a2e\u3092\u51fa\u529b\\n            l = int(q1)-1\\n            r = int(q2)\\n            x = bin(seg.get(l, r))\\n            print(x.count(\"1\"))\\n\\n\\nif __name__ == \"__main__\":\\n    resolve()\\n", "target": "779", "substitutes": {"self": ["obj", "se", "Self", "s", "shape", "__", "ren", "h", "ref", "network", "local", "object", "cmp", "small", "w", "left", "rel", "me", "new", "init"], "size": ["dimension", "max", "offset", "capacity", "sum", "range", "name", "number", "dim", "shape", "len", "value", "SIZE", "root", "length", "empty", "scale", "group", "Size", "position", "num", "power", "small", "n", "set", "data", "count", "width"], "fn": ["map", "f", "function", "normal", "obj", "util", "inv", "dist", "attr", "nm", "syn", "opt", "Function", "fp", "cn", "unc", "func", "act", "bin", "cmp", "np", "fc", "float", "n", "norm", "fun", "init", "method"], "default": ["type", "add", "function", "normal", "name", "pos", "result", "dim", "shape", "key", "value", "input", "v", "missing", "length", "long", "index", "scale", "group", "use", "position", "val", "width", "d", "func", "p", "initial", "Default", "null", " value", "total", "none", "current", "weight", "float", "delay", "print", "optional", "primary", "data", " Default", "FAULT", "new", "shift"], "initial_values": ["init_values", "initial_value", "initial_Values", "init_Values", "init_vals", "init_value", "initial_vals"]}}
{"code": "N,M = map(int,input().split())\\nL = sorted(map(int,input().split()),reverse=True)\\n\\nsum = 0\\nfor i in range(M):\\n    sum += L[i]\\n\\n    \\nprint(sum)", "target": "433", "substitutes": {"N": ["Y", "K", "H", "C", "X", "F", "R", "Ni", "G", "W", "NR", "NA", "S", "E", "D", "TN", "P", "Q", "T", "J", "n", "Z", "V", "I", "B", "Ns", "NN"], "M": ["K", "m", "C", "MP", "H", "MX", "F", "R", "PM", "G", "MT", "SM", "MR", "LM", "MI", "MN", "MC", "MM", "S", "E", "D", "NM", "JM", "P", "Q", "MS", "T", "MAN", "DM", "J", "V", "I", "B"], "L": ["DL", "H", "XL", "LR", "LE", "SL", "l", "LS", "ML", "LM", "LT", "LG", "LU", "LA", "NL", "EL", "PL", "S", "LIN", "CL", "LB", "P", "List", "LI", "V", "FL", "I", "B", "Li", "LP", "LD", "dL", "LL", "TL"], "sum": ["add", "max", "med", "SI", " summed", "rup", "comment", "loss", "oss", "score", "se", "t", "Sum", "su", "result", "final", "cal", "share", "temp", "sim", "num", "mem", "size", "cos", "tail", "commit", "sam", "zero", "total", "sa", "vol", "mean", "average", "weight", "n", "si", "cum", "summary", "us", "sat", "um", "dot", " SUM", "system", "hash", "cost", "hist", "count"], "i": ["f", "ini", "zi", "m", "uri", "l", "y", "ti", "s", "ip", "key", "\u0438", "k", "ji", "gi", "v", "ij", "ori", "q", "yi", "ind", "id", "di", "bi", "multi", "vi", "j", "pi", "qi", "ii", "xi", "n", "iri", "si", "li", "I", "u", "x", "ui", "mi", "im"]}}
{"code": "s = list(input())\\nt = input()\\nfor i in range(len(s)):\\n    rotate_s = s.pop()\\n    s.insert(0, rotate_s)\\n    if \"\".join(s) == t:\\n        print(\"Yes\")\\n        exit()\\nprint(\"No\")\\n", "target": "721", "substitutes": {"s": ["ps", "f", "sts", "z", "stats", "ws", "sv", "ls", "a", "l", "rs", "cs", "gs", "xs", "ins", "os", "ms", "ns", "r", "strings", "sp", "c", "ers", "h", "q", "b", "ys", "gins", "ies", "S", "g", "ids", "d", "eps", "p", "ains", "ss", "less", "ds", "seconds", "parts", "sa", "its", "n", "abs", "items", "bs", "sq", "ats", "als", "x", "ts", "qs", "js"], "t": ["type", "f", "pt", "tm", "ta", "l", "tt", "to", "r", "dt", "ty", "at", "v", "lt", "gt", "ot", "q", "ct", "tree", "test", "title", "te", "p", "bt", "j", "mt", "e", "it", "wt", "vt", "T", "txt", "tr", "n", "o", "ts", "rt", "st"], "i": ["f", "irl", "l", "ix", "by", "r", "k", " j", "c", "q", "ind", "id", " ii", "p", "j", "it", "n", "I", "iter", "x", "im"], "rotate_s": ["rotate_self", "rotat_in", "rotating_self", "rotating_set", "rotateseqin", "rotat_s", "rotating_s", "rotateseqs", "rotate_set", "rotate_S", "rotate_in", "rotateseqS", "rotat_S"]}}
{"code": "n, m = map(int,input().split())\\nadj = [[0]*(n+1) for i in range(n+1)]\\nedges = []\\nfor i in range(m):\\n    a, b = map(int, input().split())\\n    edges.append((a, b))\\n    adj[a][b] = 1\\n    adj[b][a] = 1\\n\\n\\nvisited = [False] * (n+1)\\nparents = [None] * (n+1)\\ncycles = set()\\ncount = 0\\ndef dfs(u):\\n    for v in range(n+1):\\n        if adj[u][v]:\\n            if parents[u] == v:\\n                continue\\n            #print (u, v)\\n            #print (parents)\\n            adj[u][v], adj[v][u] = 0, 0\\n            if parents[v] is not None:\\n                #print (\"Isn't None\", u, v, parents[u])\\n                cycles.add(u)\\n                cycles.add(v)\\n                w = parents[u]\\n                while w != v:\\n                    cycles.add(w)\\n                    w = parents[w]\\n                \\n            if parents[v] == None: \\n                parents[v] = u\\n                dfs(v)\\nparents[1] = 0\\ndfs(1)\\nans = m\\n#print (parents)\\nfor i in range(m):\\n    a, b = edges[i]\\n    if a in cycles and b in cycles:\\n        ans -= 1\\nprint (ans)", "target": "634", "substitutes": {"n": ["nn", "names", "l", "y", "nt", "t", "name", "s", "N", "ns", "nm", "mn", "r", "en", "na", "c", "ln", "sn", "h", "an", "g", "cn", "nu", "nb", "num", "d", "p", "dn", "j", "network", "pi", "ne", "net", "gn", "np", "nc", "o", "w", "no"], "m": ["mu", "gm", "mc", "tm", "mas", "mb", "l", "t", "sm", "ms", "M", "mn", "r", "nm", "mis", "c", "bm", "h", "g", "dm", "d", "size", "p", "man", "km", "j", "mt", "om", "mr", "ma", "mm", "um", "mi", "cm"], "adj": ["map", "arr", "nav", "stat", "adv", "edge", "pred", "cond", "att", "bl", "eff", "acc", "conn", "nt", "dev", "ext", "wd", "order", "dict", "cycle", "ax", "attr", "ns", "compl", "days", "outs", "expr", "aps", "div", "atts", "ij", "g", "jac", "temp", "ind", "rev", "num", "p", "hess", "j", "app", "deg", "gn", "align", "np", "connected", "graph", "ad", "ads", "grad", "abs", "cache", "obs", "rel", "norm", "apps", "comm", "agree", "dat"], "i": ["ini", "ei", "zi", "ir", "l", "ti", "ip", "ci", "k", "gi", "c", "ki", "ind", "id", "di", "p", "pi", "ai", "it", "ii", "xi", "si", "ic", "o", "li", "I", "x", "mi", "iu", "im"], "edges": ["Edgs", " edits", "edmonds", " edvs", "adGES", "edits", "hedxs", "edvs", "embedges", "Edmonds", "advs", "hedgs", "embedgs", "hedmonds", "edgs", "Edvs", "embedmonds", "Edits", "adges", "Edges", "adits", "EdGES", "edxs", "Edxs", " edGES", "embedxs", "edGES", "hedges"], "a": ["ba", "ae", "be", "l", "t", "sta", "ga", "ed", "au", "A", "ca", "r", "la", "at", "c", "ea", "an", "g", "ami", "ant", "va", "p", "j", "app", "e", "sa", "aa", "aj", "ac", "o", "ma", " A", "ia", "w", "ab", "aaa", "x", "ar", "ach", "am", "aff"], "b": ["f", "rb", "ba", "ib", "mb", "blue", "bl", "be", "l", "y", "bc", "s", "bg", "cb", "fb", "bh", "r", "db", "c", "h", "g", "nb", "p", "bi", "br", "abb", "j", "bin", "e", "sb", "aa", "bis", "ob", "o", "bs", "B", "ab", "bb", "bar", "base", "eb"], "visited": ["Visited", "transITED", "VisITED", "visiter", "Visitted", "visitted", "transitted", "revited", "revITED", "transiter", "Visiter", "visITED", "reviter", "revitted", "transited"], "parents": ["ps", "stats", "groups", "roots", "ients", "names", "headers", "blocks", "params", "parent", "gs", "kids", "pos", "ins", "ns", "points", "errors", "owners", "images", "bits", "ctx", "ids", "children", "p", "dep", "codes", "ds", "links", "relations", "its", "chains", "dates", "graph", "ators", "Parents", "keys", "apps", "terms"], "cycles": ["ours", "ages", "groups", "lines", "checks", "events", "views", "times", "heads", "cs", "pages", "uses", "cycle", "steps", "flows", "classes", "ends", "points", "tests", "changes", "eps", "versions", "links", "verts", "chains", "rules", "dates", "sections"], "count": ["add", "found", "sum", "skip", "counter", "acc", "nt", "cycle", "status", "length", "c", "index", "state", "Count", "flag", "depth", "ct", "loop", "nb", "test", "num", "cont", "change", "ctr", "total", "current", "time", "cache"], "u": ["uid", "mu", "tu", "pu", "ud", "yu", "su", "au", "ug", "ue", "ul", "gu", "c", "lu", "U", "user", "nu", "eu", "du", "p", "ut", "ou", "uf", "bu", "uc", "ur", "uv", "uu", "o", "cu", "ju", "uj", "uni", "us", "hu", "um", "ui", "iu", "ru"], "v": ["z", "f", "ve", "vo", "sv", "vv", "qv", "l", "y", "t", "s", "r", "k", "c", "h", "q", "uu", "g", "val", "nv", "p", "vi", "j", "e", "vt", "vr", "uv", "V", "o", "w", "ic", "vy", "us", "li", "x", "ev", "vc"]}}
{"code": "x=int(input())\\nans,k,i=0,1,0\\nwhile 1:\\n    ans+=k\\n    if ans>=x:\\n        break\\n    k+=1\\nprint(k)", "target": "350", "substitutes": {"x": ["z", "f", "xes", "m", "xp", "X", "xy", "l", "y", "t", "ix", "xs", "s", "xa", "ax", "xx", "v", "xt", "c", "h", "q", "b", "mx", "ex", "fx", "p", "rx", "xc", "ox", "xi", "n", "w", "xf", "an", "xd", "tx"], "ans": ["ens", "ars", "ls", " scans", "names", "mas", "a", "ran", "anc", "pan", "rs", "cs", "cons", "gs", "xs", "s", "ins", "anas", "ms", "ns", "ons", "ann", "aus", "v", "aces", "es", "ians", "ies", " means", "ids", "ANS", "ds", "ai", "gn", "ams", "n", " spans", "ats", "us", "vals", "an", "ks", "ants", "scan"], "k": ["z", "max", "K", "m", "one", "kind", "kr", "kt", "kh", "a", "ka", "y", "ck", "ikk", "s", "ed", "kk", "r", "ke", "kid", "v", "c", "ket", "mk", "ki", "q", "an", "ak", "unk", "ind", "ijk", "ik", "p", "kok", "kin", "km", "j", "kb", "kj", "ek", "e", "kw", "tk", "n", "o", "ic", "w", "u", "sk", "ko", "ark", "isk", "ku", "ks"], "i": ["ini", "m", "l", "ix", "ip", "ci", "v", "ij", "c", "index", "ki", "ind", "id", "ik", "p", "bi", "j", "pi", "ai", "it", "ii", "xi", "n", "ic", "I", "im", "init"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport sys\\nsys.setrecursionlimit(10**9)\\nINF=10**18\\nMOD=10**9+7\\ninput=lambda: sys.stdin.readline().rstrip()\\nYesNo=lambda b: bool([print('Yes')] if b else print('No'))\\nYESNO=lambda b: bool([print('YES')] if b else print('NO'))\\nint1=lambda x:int(x)-1\\n\\ndef main():\\n    s=list(input())+['T']\\n    x,y=map(int,input().split())\\n    x+=16000\\n    y+=16000\\n    ud=[]\\n    lr=[]\\n    f=0\\n    f2=0\\n    c=0\\n    for t in s:\\n        if t=='F':\\n            if not f:\\n                x-=1\\n            else:\\n                c+=1\\n        else:\\n            f=1\\n            if c:\\n                if f2:\\n                    ud.append(c)\\n                else:\\n                    lr.append(c)\\n            c=0\\n            f2=not f2\\n    for l,z in [(ud,y),(lr,x)]:\\n        N=len(l)\\n        dp=[0]*(N+1)\\n        dp[0]=1<<16000\\n        for i in range(N):\\n            dp[i+1]|=dp[i]<<l[i]|dp[i]>>l[i]\\n        if not (dp[-1]>>z)&1:\\n            print('No')\\n            break\\n    else:\\n        print('Yes')\\n        \\n    \\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "753", "substitutes": {}}
{"code": "import sys\\nimport math  # noqa\\nimport bisect  # noqa\\nimport queue  # noqa\\n\\n\\ndef input():\\n    return sys.stdin.readline().rstrip()\\n\\n\\ndef main():\\n    _ = int(input())\\n    A = list(map(int, input().split()))\\n    B = list(map(int, input().split()))\\n\\n    cnt = 0\\n    for a, b in zip(A, B):\\n        if a < b:\\n            cnt += (b - a) // 2\\n        else:\\n            cnt -= a - b\\n\\n    if cnt < 0:\\n        print(\"No\")\\n    else:\\n        print(\"Yes\")\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "778", "substitutes": {}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians#, log2\\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy, copy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left, insort, insort_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\n#import numpy as np\\n#from decimal import *\\n\\nN = INT()\\na = LIST()\\n\\nA = Counter(a)\\n#print(A)\\nans = 0\\nfor key, value in A.items():\\n\tif key > value:\\n\t\tans += value\\n\telse:\\n\t\tans += value - key\\n\\nprint(ans)\\n\\n", "target": "536", "substitutes": {}}
{"code": "n = int(input())\\napple = list(map(int, input().split()))\\nprint(sum(apple) - n)", "target": "519", "substitutes": {"n": ["f", "nn", "m", "l", "y", "nt", "t", "s", "N", "i", "ns", "mn", "k", "v", "na", "c", "sn", "h", "b", "g", "cn", "nu", "nb", "num", "d", "p", "j", "total", "e", "gn", "np", "nan", "nc", "nl", "x"], "apple": ["type", "win", "apache", "python", "top", "fa", "allowed", "windows", "my", "Apple", "pan", "all", "conn", "note", "device", "os", "ca", " Apple", "mal", "ul", "na", "phy", "pal", "fresh", "mouse", "there", "can", "leaf", "fruit", "app", "window", "ro", "parse", "available", "ma", " apples", "mac", "panic", "print", "list", "wife", "linux", "some", "scan"]}}
{"code": "S = input()\\na = b = 0\\nfor i in range(len(S)):\\n  if S[i]== 'B':\\n    b += 1\\n  else:\\n    a += b\\nprint(a)", "target": "587", "substitutes": {"S": ["BS", "String", "SI", "H", "C", "Si", "SS", "F", "R", "SL", "G", "PS", "SB", "JS", "s", "N", "M", "A", "RS", "E", "DS", "D", "SAM", "US", "NS", "SU", "L", "SP", "P", "Q", "T", "SF", "SE", "Z", "VS", "V", "I", "B", "CS", "GS", "SA", "Set"], "a": ["ba", "out", "obj", "apa", "m", "ap", "am", "ta", "ae", "att", "action", "t", "sta", "au", "s", "result", "xa", "A", "r", "ca", "la", "at", "v", "na", "c", "ea", "index", "g", "area", "d", "p", "alpha", "j", "oa", "act", "e", "sa", "ai", "bar", "aq", "aa", "n", "ac", "o", "ma", "w", "ab", "ar", "ach", "an", "ack"], "b": ["z", "f", "rb", "ba", "m", "one", "be", "l", "y", "t", "bc", "pb", "s", "cb", "r", "fb", "k", "v", "db", "c", "bm", "g", "wb", "nb", "d", "p", "br", "j", "bf", "e", "sb", "bo", "n", "ob", "bs", "B", "ab", "x", "bb", "eb"], "i": ["f", "ini", "zi", "m", "y", "ix", "ti", "s", "key", "ci", "r", "k", "ji", "gi", "ij", "c", "ori", "ki", "q", "yi", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ii", "xi", "si", "n", "I", "li", "x", "mi", "im"]}}
{"code": "def makes( r,l ):\\n    s=\"\"\\n    for i in range(r-1):\\n        s+=\"0 \"\\n    rl=r+l\\n    rl2=rl//2\\n    if rl%2==0:\\n        s+=str(rl2)+\" \"\\n        s+=str(rl2)+\" \"\\n    else:\\n        if r%2==1 :\\n            s+=str(rl2+1)+\" \"\\n            s+=str(rl2)+\" \"\\n        if l%2==1 :\\n            s+=str(rl2)+\" \"\\n            s+=str(rl2+1)+\" \"\\n    for i in range(l-1):\\n        s+=\"0 \"\\n    return s\\n\\n\\ns = input()\\nrc=lc=0\\nans=\"\"\\nfor i in range(len(s)):\\n    if s[i]==\"R\":\\n        if rc!=0 and lc!=0 :\\n            ans += makes(rc,lc)\\n            rc=0\\n            lc=0\\n        rc+=1\\n    else:\\n        lc+=1\\nif rc!=0 and lc!=0 :\\n    ans += makes(rc,lc)\\nprint(ans)", "target": "722", "substitutes": {"r": ["rb", "pr", "m", "rr", "rg", "sr", "range", "cr", "R", "rh", "rs", "res", "c", "h", "b", "g", "er", "d", "p", "rx", "ro", "lr", "rid", "ra", "ur", "rd", "n", "mr", "vr", "w", "u", "o", "dr", "x", "rar", "ar", "rt", "ru"], "l": ["z", "f", "ol", "ls", "el", "le", "m", "y", "t", "lv", "lin", "kl", "len", "il", "lb", "la", "v", "sl", "c", "lt", "length", "ln", "h", "long", "b", "g", "lo", "val", "lib", "ml", "dl", "p", "L", "j", "lp", "pl", "hl", "lr", "n", "ell", "li", "left", "nl", "ll", "ly"], "s": ["cs", "name", "ins", "states", "reads", "aus", "strings", "v", "hs", "ers", "h", "tests", "g", "ies", "eps", "parts", "sb", "its", "ears", "ts", "js", "z", "f", "sts", "ws", "m", "rates", "t", "xs", "ms", "os", "prints", "aps", "eds", "er", "ss", "ds", "args", "n", "abs", "als", "str", "sv", "ls", "fs", "rs", "gs", "steps", "ed", "raw", "sd", "c", "b", "ubs", "csv", "ments", "p", "ims", "w", "tes", "qs", "ows", "ps", "comments", "ress", "lines", "sc", "a", "ing", "ns", "resses", "es", "ations", "S", "d", "aws", "bs", "irs", "ats"], "i": ["ini", "ei", "ri", "zi", "cli", "m", "ir", "this", "t", "ix", "ti", "ip", "ci", "k", "il", "ji", "gi", "v", "ij", "c", "hi", "oi", "ki", "phi", "ind", "id", "di", "ik", "p", "bi", "multi", "j", "pi", "e", "ai", "it", "ii", "xi", "n", "si", "ic", "li", "I", "iter", "x", "mi", "ar", "im", "iu"], "rl": ["rb", "ls", "pr", "rr", "rg", "sr", "src", "rs", "lv", "lin", "rol", "lb", "rang", "ln", "tl", "rn", "RL", "dl", "rx", "lp", "pl", "ro", "hl", "lr", "rid", "vr", "rd", "mr", "nl", "rt", "ll"], "rl2": ["rl4", "rc1", "rt4", "rrl", "rl3", "lr02", "rc2", "rl02", "rt1", "rc3", "dl1", "lr2", "rc02", "hl4", "hl3", "lr3", "rt3", "rr1", "hl0", "rr02", "rx1", "rc5", "rr2", "rl0", "rl5", "hl02", "rt02", "rl1", "dl2", "rx2", "rr0", "hl1", "lr1", "hll", "lrl", "lr4", "rll", "lr5", "dl3", "rx0", "rx02", "rt5", "rc4", "rr3", "rt2", "lr0", "hl2", "dl5"], "rc": ["rand", "sys", "sc", "isc", "sync", "rr", "cr", "src", "rh", "cs", "rs", "bc", "ck", "enc", "erc", "ctrl", "co", "c", "cv", "arc", "roc", "irc", "gc", "cc", "rn", "auc", "rev", "cur", "rx", "lp", "ec", "ro", "rw", "RC", "hl", "LC", "lr", "dc", "uc", "ra", "right", "fc", "pc", "nc", "tc", "hr", "cu", "ac", "ic", "loc", "rec", "reg", "rd", "ras", "dr", "rt", "ru"], "lc": ["ls", "sc", "mc", "cli", "lv", "cs", "bc", "lin", "kl", "ci", "lb", "la", "icc", "lic", "c", "lu", "ln", "cm", "wl", "gc", "tl", "cow", "cc", "unc", "lib", "cl", "ml", "dl", "lp", "cp", "hl", "LC", "lr", "dc", "uc", "fc", "pc", "tc", "nc", "ic", "cu", "li", "ctl", "lf", "coll", "nl", "vc", "ll"], "ans": ["ens", "rors", "ran", "anc", "cs", "rs", "amps", "gs", "ins", "ms", "os", "aus", "ons", "ns", "ars", "ann", "outs", " Ans", "aps", "acs", "aos", "arts", "ents", "es", "ians", "angs", "ums", "rans", "ays", "ands", "eds", "ys", "ations", " means", "ANS", "uns", "anes", "ams", "anas", "ads", "ras", "ates", "ats", "als", "ros", "ions", "an", "ks", "ants", "ows"]}}
{"code": "import math\\nwhile True:\\n    n=int(input())\\n    if n==0:\\n        break\\n    else:\\n        a=list(map(int,input().split()))\\n        m=sum(a)/n\\n        l=0\\n        for i in range(n):\\n            l+=(a[i]-m)**2\\n        b=math.sqrt(l/n)\\n        print(\"{:.8f}\".format(b))\\n", "target": "683", "substitutes": {"n": ["z", "f", "nn", "nw", "nia", "nt", "t", "number", "s", "ms", "N", "len", "ns", "mn", "r", "v", "na", "c", "long", "ln", "sn", "q", "h", "g", "cn", "nu", "nb", "num", "d", "size", "p", "nat", "j", "ne", "natural", "total", "np", "nc", "o", "no", "nl", "norm", "count"], "a": ["f", "ba", "arr", "apa", "am", "ta", "ae", "att", "all", "t", "ga", "au", "ed", "s", "A", "ca", "r", "la", "at", "na", "c", "ea", "g", "area", "p", "da", "app", "oa", "sa", "ai", "aa", "ac", "ma", "ia", "ab", "aaa", "an", "auto"], "m": ["mu", "f", "gm", "mc", "tm", "am", "mb", "y", "t", "sm", "ms", "M", "r", "k", "mn", "nm", "perm", "em", "bm", "mk", "pm", "h", "g", "mem", "vm", "mt", "om", "o", "ma", "mr", "mm", "mi", "im", "cm"], "l": ["f", "lit", "ol", "ls", "el", "le", "t", "lis", "kl", "len", "r", "lb", "v", "la", "sl", "c", "lu", "long", "ln", "lt", "lc", "g", "lo", "ml", "d", "dl", "p", "L", "lp", "hl", "lr", "o", "log", "li", "left", "shell", "nl", "ll"], "i": ["z", "ini", "ri", "zi", "uri", "y", "ix", "ti", "ip", "ci", "r", "ji", "gi", "v", "ij", "ori", "ki", "yi", "di", "bi", "j", "pi", "fi", "ii", "xi", "si", "ic", "li", "u", "I", "x", "ui", "mi"], "b": ["f", "rb", "ba", "obj", "blue", "be", "y", "bp", "to", "bg", "cb", "fb", "r", "lb", "v", "db", "c", "bound", "g", "wb", "nb", "d", "p", "bi", "sb", "beta", "gb", "bs", "B", "ab", "bb", "body", "base", "eb"]}}
{"code": "s=input()\\nif int(s[:2])<=12 and int(s[:2])>0:\\n    if int(s[2:4])<=12 and int(s[2:4])>0:\\n        print(\"AMBIGUOUS\")\\n    else:\\n        print(\"MMYY\")\\nelif int(s[2:4])<=12 and int(s[2:4])>0:\\n    print(\"YYMM\")\\nelse:\\n    print(\"NA\")", "target": "17", "substitutes": {"s": ["z", "f", "ps", "sts", "str", "sv", "ws", "ls", "a", "sis", "spec", "rs", "t", "se", "gs", "os", "states", "i", "say", "ns", "r", "sw", "ins", "input", "v", "sl", "c", "hs", "es", "h", "q", "b", "S", "csv", "p", "ss", "less", "ds", "args", "sa", "sb", "its", "conf", "ses", "n", "abs", "bis", "bs", "sq", "w", "tes", "ats", "south", "sh", "ts", "qs", "js"]}}
{"code": "n = int(input())\\nc = 0\\n\\ndef devisor(n):\\n    if n == 2:\\n        return 1\\n    else:\\n        if n < 2 or n % 2 == 0:\\n            return 0\\n        elif pow(2,n-1,n) == 1:\\n            return 1\\n        else: return 0\\n\\nfor i in range(n):\\n    x = int(input())\\n    c += devisor(x)\\n\\nprint(c)", "target": "735", "substitutes": {"n": ["z", "f", "nn", "nia", "m", "a", "l", "nt", "t", "name", "note", "nr", "s", "N", "len", "ns", "mn", "k", "nm", "fn", "v", "en", "r", "na", "ng", "sn", "ln", "b", "h", "g", "q", "cn", "nu", "nb", "num", "d", "size", "p", "dn", "count", "j", "ne", "e", "gn", "np", "nan", "nc", "o", "no", "nl", "non", "on", "ll"], "c": ["C", "cr", "cs", "l", "t", "cf", "con", "rc", "ca", "r", "cb", "ch", "v", "co", "cal", "cm", "lc", "gc", "ct", "cc", "ce", "d", "cos", "cur", "p", "crit", "cont", "col", "cp", "com", "xc", "cd", "dc", "conf", "pc", "ac", "cache", "cum", "u", "cu", "nc", "cv", "count"], "i": ["f", "iq", "a", "y", "ix", "by", "ip", "r", "k", " j", "q", "b", "yi", "ind", "id", " ii", "p", "j", "e", "it", "ii", "I", "im"], "x": ["f", "xp", "X", "ux", "xy", "y", "ix", "xs", "xa", "xx", "ax", "rax", "v", "xt", "dx", "wx", "mx", "ex", "fx", "rx", "xc", "ox", "xe", "xxxx", "int", "xi", "lex", "w", "xf", "xd", "tx"]}}
{"code": "import sys\\ndef I(): return int(sys.stdin.readline().rstrip())\\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #\u7a7a\u767d\u3042\u308a\\n\\n\\nN = I()\\nA = LI()\\nmod = 10**9+7\\ns = sum(A)\\ns %= mod\\n\\na = s**2-sum(A[i]**2 for i in range(N))\\na %= mod\\na *= pow(2,mod-2,mod)\\na %= mod\\n\\nprint(a)\\n", "target": "198", "substitutes": {}}
{"code": "n = int(input())\\nHXY = []\\nfor i in range(n):\\n    x, y, h = map(int, input().split())\\n    HXY.append((h, x, y))\\n\\nHXY.sort(reverse=True)\\n\\nfor i in range(101):\\n    for j in range(101):\\n        H = -1\\n        for k in range(n):\\n            h, x, y = HXY[k]\\n            if h > 0:\\n                temp = h + abs(x-i) + abs(y-j)\\n                if H > 0:\\n                    if H != temp:\\n                        break\\n                else:\\n                    H = temp\\n            else:\\n                if H - abs(x-i) - abs(y-j) > 0:\\n                    break\\n        else:\\n            if H > 0:\\n                print(i, j, H)\\n", "target": "114", "substitutes": {"n": ["nn", "nw", "m", "hn", "l", "nt", "t", "nr", "N", "ns", "mn", "r", "v", "na", "c", "ln", "sn", "cn", "nu", "nb", "num", "nv", "d", "p", "network", "ne", "gn", "np", "nan", "nc", "o", "w", "no", "nl"], "HXY": ["HIXY", " HTwo", "hSample", "HMultiple", "hTwo", "HIDX", "HITry", "hxy", "hXY", " HOut", "VLine", " HUX", " HDX", "HISample", "HQueue", "HMEY", "HTry", "HUX", "HITwo", "HMXY", "HCXY", " HMultiple", "HIQueue", "HCEY", " HLine", "HMDX", " HTry", " HQueue", " Hxy", "hUX", "HMTile", "HCMultiple", "HMTry", "VUX", "Vxy", "HDX", "HMOut", "Hxy", "hQueue", " HSample", "HTile", "HCTile", "HLine", "HSample", " HEY", "HOut", "VXY", " HTile", "HMMultiple", "HTwo", "HEY", "HIOut", "hLine"], "i": ["ini", "ri", "zi", "ir", "ix", "iy", "ti", "ip", "ci", "ij", "hi", "ki", "phi", "yi", "ie", "ind", "di", "ik", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "u", "I", "ia", "iti", "mi", "iu", "im", "ui"], "x": ["z", "yx", "el", "xp", "X", "ice", "hex", "my", "xy", "l", "t", "ix", "xs", "xa", "ip", "xx", "key", "ax", "at", "v", "xml", "xt", "dx", "wx", "co", "ij", "mx", "ex", "fx", "ctx", "p", "rx", "xxx", "act", "xc", "e", "ox", "xe", "int", "xi", "lex", "o", "w", "px", "lat", "on", "xf", "xd", "tx"], "y": ["z", "Y", "sys", "ym", "ey", "yl", "yo", "yn", "ay", "my", "xy", "py", "t", "yer", "iy", "by", "sy", "xx", "yy", "ty", "yt", "v", "ot", "b", "ys", "ies", "yi", "ny", "fy", "p", "ry", "ox", "ya", "ye", "axy", "yr", "o", "vy", "cy"], "h": ["uh", "he", "m", "html", "kh", "hex", "rh", "hm", "l", "t", "ha", "high", "bh", "ho", "v", "history", "hs", "c", "hi", "HH", "b", "phi", "g", "hal", "temp", "His", "hd", "d", "ih", "p", "HE", "height", "oh", "ht", "hl", "dh", "hr", "hh", "w", "ah", "sh", "hash", "HM", "hum", "hp"], "j": ["z", "obj", "ion", "jl", "ja", "xy", "l", "t", "note", "yy", "jp", "ji", "v", "json", "ij", "q", "b", "job", "je", "g", "jac", "iv", "ijk", "d", "p", "bi", "br", "pi", "kj", "e", "jj", "jump", "J", "o", "ju", "uj", "dj", "bj", "js", "jc"], "H": ["Y", "HK", "K", "HO", "He", "X", "FH", "kh", "Th", "HT", "rh", "R", "G", "W", "Han", "Hash", "HI", "N", "M", "HB", "HS", "HQ", "HL", "Head", "ho", "High", "HD", "HH", "Hz", "TH", "MH", "His", "HC", "HA", "HE", "DH", "Ah", "Temp", "Ha", "Eh", "HTML", "EH", "T", "J", "V", "I", "B", "OH", "RH", "WH", "HM", "AH", "NH"], "k": ["z", "K", "m", "kr", "kh", "ka", "t", "ck", "kl", "ikk", "ok", "kk", "kan", "ke", "kid", "v", "kar", "ket", "c", "mk", "ki", "q", "kn", "ak", "ijk", "wk", "ik", "kin", "p", "km", "kj", "ek", "e", "kw", "it", "tk", "ake", "u", "sk", "ko", "ku"]}}
{"code": "#http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_1_A&lang=jp\\n#?????\\????????????????\u00a3?\\n#?\u00a8?????????????????????????????????\u00b1?????????\\ndef insertion_sort(target_list, n_list):\\n    \\n    for focus_index in range(1, n_list):\\n        print(*target_list)\\n        target = target_list[focus_index]\\n        if target < target_list[focus_index - 1]:#?????\u00a3?????\u00b0??????????????\u00a7??????\\n            compare_index = focus_index\\n\\n            while compare_index > 0 and target_list[compare_index - 1] > target:\\n                target_list[compare_index] = target_list[compare_index - 1]\\n                compare_index -= 1;\\n\\n            target_list[compare_index] = target\\n    \\n    return target_list\\n\\ndef main():\\n    n_list = int(input())\\n    target_list = [int(a) for a in input().split()]\\n    print(*insertion_sort(target_list, n_list))\\nif __name__ == \"__main__\":\\n    main()", "target": "217", "substitutes": {}}
{"code": "n,t = map(int,input().split())\\nx = list(map(int,input().split()))\\nm = 0\\n\\nfor i in range(1,n):\\n    if x[i] - t <= x[i - 1]:\\n        m += x[i] - x[i - 1]\\n    else:\\n        m += t\\n    \\n\\nprint(m + t)", "target": "355", "substitutes": {"n": ["f", "nn", "l", "y", "nt", "N", "ns", "mn", "k", "v", "na", "c", "ln", "sn", "g", "nu", "nb", "num", "d", "p", "j", "ne", "net", "np", "nan", "nc", "o", "no", "nl"], "t": ["type", "f", "z", "pt", "tm", "ta", "a", "l", "y", "tt", "r", "dt", "tp", "k", "at", "v", "c", "lt", "term", "ot", "b", "h", "g", "q", "tree", "test", "d", "te", "p", "j", "mt", "e", "it", "wt", "int", "T", "tr", "tc", "o", "w", "u", "ts", "rt", "st"], "x": ["z", "f", "xes", "xp", "X", "a", "ux", "xy", "l", "y", "xs", "s", "xa", "ax", "xx", "xb", "at", "v", "xt", "wx", "c", "index", "q", "b", "mx", "g", "ex", "ct", "fx", "d", "p", "rx", "pl", "xc", "e", "ox", "xe", "int", "xi", "ic", "px", "w", "list", "xf", "xd", "tx", "st"], "m": ["gm", "wm", "mc", "tm", "l", "y", "ms", "M", "r", "im", "v", "perm", "em", "c", "bm", "pm", "cm", "h", "b", "g", "mod", "sim", "dm", "rm", "d", "mem", "p", "man", "multi", "km", "com", "mt", "om", "mean", "mr", "cum", "mm", "me", "um", "mi", "fm", "am"], "i": ["io", "ini", "ri", "zi", "uri", "cli", "y", "ix", "ti", "info", "ip", "ci", "\u0438", "ji", "gi", "v", "ij", "ori", "index", "oi", "ki", "phi", "ami", "ind", "id", "di", "bi", "multi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "batch", "ic", "li", "I", "me", "ui", "mi", "im", "ski"]}}
{"code": "n = int(input())\\na_l1 = list(map(int, input().split()))\\na_l2 = list(map(int, input().split()))\\nc = 0\\nm_a_l1 = []\\nfor i in a_l1:\\n    c += i\\n    m_a_l1.append(c)\\nc = 0\\nm_a_l2 = [0] * n\\nfor i,j in enumerate(reversed(a_l2)):\\n    c += j\\n    m_a_l2[-1-i] = c\\n\\nans = 0\\nfor i,j in zip(m_a_l1, m_a_l2):\\n    ans = max(i+j, ans)\\nprint(ans)", "target": "476", "substitutes": {"n": ["z", "nn", "m", "l", "nt", "t", "s", "N", "ns", "r", "k", "mn", "v", "na", "ln", "sn", "q", "an", "h", "cn", "nu", "nb", "num", "d", "size", "p", "ne", "np", "nan", "nc", "o", "w", "nl", "x", "count"], "a_l1": ["a_la2", "a_la4", "a_la1", "a_lcanta", "a_lanta", "a_ls2", "a_lc1", "a_Lanta", "a_l4", "a_lsanta", "a_ls4", "a_L1", "a_lc2", "a_dlanta", "a_dl1", "a_L2", "a_laanta", "a_ls1", "a_dl2", "a_L4"], "a_l2": ["a_rl2", "a_dl6", "a_rl1", "a_rl3", "a_l0", "a_ls0", "a_ls2", "a_L6", "a_l3", "a_dl3", "a_l4", "a_ls4", "a_L1", "a_l6", "a_L0", "a_dl1", "a_L2", "a_L3", "a_rl6", "a_ls1", "a_dl2", "a_L4"], "c": ["z", "f", "mc", "m", "C", "cat", "cr", "a", "cus", "l", "cs", "cons", "t", "con", "ci", "ca", "cb", "cin", "ch", "rc", "r", "v", "k", "co", "cz", "cv", "h", "lc", "gc", "g", "cn", "ct", "cc", "unc", "ce", "cont", "cos", "p", "can", "d", "cp", "com", "xc", "cd", "dc", "conf", "pc", "tc", "ac", "cum", "cu", "nc", "cache", "u", "cm"], "m_a_l1": ["m_a_r2", "m_a_n2", "m_a_l5", "m_a_l11", "m_a_n1", "m_a_L4", "m_a_r8", "m_a_g1", "m_a_v0", "m_a_p5", "m_a_l8", "m_a_p3", "m_a_l0", "m_a_ls5", "m_a_v2", "m_a_ls2", "m_a_n8", "m_a_g3", "m_a_L3", "m_a_L2", "m_a_ls1", "m_a_p2", "m_a_r1", "m_a_l4", "m_a_v5", "m_a_g11", "m_a_v1", "m_a_L8", "m_a_L1", "m_a_ls0", "m_a_p0", "m_a_p1", "m_a_L11", "m_a_r4", "m_a_g2", "m_a_n4", "m_a_l3", "m_a_p11"], "i": ["io", "ei", "ini", "ib", "ri", "ion", "zi", "\u00ed", "m", "ir", "l", "y", "ix", "iy", "ti", "ip", "ci", "ji", "ati", "gi", "v", "ij", "hi", "oi", "index", "ki", "q", "phi", "yi", "ie", "ind", "id", "di", "ik", "ih", "p", "bi", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "iter", "ia", "u", "x", "ui", "mi", "iu", "im", "iti"], "m_a_l2": ["m_a_n2", "m_a_v3", "m_a_fl1", "m_a_fl3", "m_a_fl0", "m_a2v3", "m_a_n1", "m_a_L4", "m_a_fl2", "m_a2v1", "m_a2l2", "m_a_v0", "m_a2v0", "m_a_l0", "m_a2l1", "m_a_n0", "m_a_p3", "m_a_v4", "m_a_v2", "m_a2l3", "m_a_L3", "m_a_L2", "m_a_p2", "m_a_l4", "m_a_v1", "m_a_L1", "m_a_p0", "m_a_p1", "m_a2l0", "m_a2v2", "m_a_n4", "m_a_l3", "m_a_n3"], "j": ["z", "obj", "him", "jl", "pr", "m", "ja", "xy", "l", "y", "t", "fr", "jp", "r", "ji", "k", "v", "json", "ij", "job", "q", "b", "ot", "g", "je", "ie", "di", "p", "bi", "oj", "kj", "ne", "it", "jj", "aj", "J", "ii", "o", "bs", "uj", "dj", "li", "ia", "x", "bj", "js", "jc"], "ans": ["ens", "ps", "cas", "ls", "conv", "cus", "anc", "cs", "rs", "cons", "amps", "iann", "s", "ms", "ins", "ars", "aus", "ns", "anas", "ons", "os", "ann", " Ans", "acs", "aps", "arts", "es", "ents", "angs", "ums", "ations", "cn", " means", "ANS", "ots", "can", "ds", "nas", "uns", "ints", "anes", "nz", "nan", " spans", "ces", "ates", "ats", "ros", "an", "ks", "ants", "ows"]}}
{"code": "from math import floor \\nfrom fractions import Fraction\\n\\nA, B = input().split()\\nA = int(A)\\nB = Fraction(B)\\nprint(floor(A*B))", "target": "44", "substitutes": {"A": ["AY", "AR", "AI", "AA", "DB", "USA", "H", "C", "API", "AC", "Al", "R", "IA", "G", "AV", "ACC", "BA", "CA", "LA", "AL", "EA", "Some", "Bar", "U", "NA", "S", "As", "YA", "AU", "HA", "Array", "AGE", "AF", "L", "GA", "An", "At", "mA", "This", "AH", "AE", "The", "AB", "AP", "Area", "One", "I", "Alpha", "ACT", "AST", "Start", "SA", "OA"], "B": ["Y", "BE", "Blue", "BB", "BS", "Bytes", "VB", "DB", "C", "EB", "F", "RB", "Long", "OB", "G", "W", "SB", "NB", "Other", "BO", "WB", "BA", "IB", "BC", "BI", "Bar", "b", "GB", "Builder", "D", "MB", "Big", "Is", "L", "TB", "NOTE", "BG", "J", "AB", "V", "BL", "BER", "Bern", "CB", "BY", "BF", "BR", "Bs"]}}
{"code": "N = int(input())\\nA = sorted(list(map(int,input().split())))\\n\\nans_list = []\\np = []\\nn = []\\n\\n# \u6700\u5927\u306b\u30d7\u30e9\u30b9\u3001\u6700\u5c0f\u306b\u30de\u30a4\u30ca\u30b9\u3092\u5272\u308a\u5f53\u3066\u308b\\np.append(A[-1])\\nn.append(A[0])\\n\\n# \u6b63\u306a\u3089\u30d7\u30e9\u30b9\u3092\u8ca0\u306a\u3089\u30de\u30a4\u30ca\u30b9\u3092\u5272\u308a\u5f53\u3066\u308b\\nfor a in A[1:-1]:\\n    if a >= 0:\\n        p.append(a)\\n    elif a < 0:\\n        n.append(a)\\n\\n# \u30d7\u30e9\u30b9\u304c\uff11\u3064\u306b\u306a\u308b\u307e\u3067\u6d88\u3059\\nres = n[0]\\nfor ep in p[1:]:\\n    ans_list.append((res, ep))\\n    res -= ep\\nn[0] = res\\np = [p[0]]\\n\\n# \u30de\u30a4\u30ca\u30b9\u304c\u306a\u304f\u306a\u308b\u307e\u3067\u6d88\u3059\\nres = p[0]\\nfor en in n:\\n    ans_list.append((res, en))\\n    res -= en\\n\\n# \u6b8b\u3063\u305f\u3082\u306e\u304c\u6700\u5927\u5024\\nM = res\\nprint(M)\\nfor x, y in ans_list:\\n    print(x, y)", "target": "18", "substitutes": {"N": ["Y", "Num", "K", "H", "C", "X", "F", "Sn", "R", "Ni", "G", "M", "S", "E", "O", "D", "L", "P", "Q", "T", "J", "Z", "V", "I", "B", "Ns", "NN"], "A": ["Y", "K", "AA", "H", "C", "X", "AN", "a", "R", "G", "M", "S", "As", "D", "Array", "NS", "alpha", "L", "An", "P", "T", "V", "I", "B", "Alpha", "an", "Ax"], "ans_list": ["ans2name", "an_name", "an_int", "an_set", "an_list", "an2list", "ans2set", "ans_set", "ans2list", "an2set", "an2int", "ans_name", "an2name", "ans2int", "ans_int"], "p": ["op", "ps", "f", "pt", "pr", "m", "ap", "a", "par", "rep", "t", "pos", "pp", "v", "perm", "pa", "c", "pm", "h", "cp", "pi", "lp", "P", "po", "np", "pc", "pn"], "n": ["nn", "m", "node", "l", "t", "nt", "name", "nr", "ns", "en", "v", "na", "c", "sn", "b", "cn", "nu", "nb", "num", "d", "j", "ne", "np", "nan", "o", "w"]}}
{"code": "S = input()\\nT = input()\\n\\ndp = [[0 for j in range(len(T) + 1)] for i in range(len(S) + 1)]\\n\\nfor i in range(len(S)):\\n    for j in range(len(T)):\\n        if S[i] == T[j]:\\n            dp[i + 1][j + 1] = max(dp[i][j] + 1, dp[i + 1][j], dp[i][j + 1])\\n        else:\\n            dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])\\n\\nres = []\\nstack = [(len(S), len(T))]\\n\\nwhile stack:\\n    x, y = stack.pop()\\n    if dp[x][y] == 0:\\n        break\\n    if x - 1 >= 0 and dp[x][y] == dp[x - 1][y]:\\n        stack.append((x - 1, y))\\n    elif y - 1 >= 0 and dp[x][y] == dp[x][y - 1]:\\n        stack.append((x, y - 1))\\n    else:\\n        res.append(S[x - 1])\\n        stack.append((x - 1, y - 1))\\n\\nprint(''.join(res[::-1]))", "target": "129", "substitutes": {"S": ["Y", "SER", "SI", "Sl", "H", "Si", "C", "SS", "X", "F", "Rs", "WS", "R", "SL", "G", "JS", "SB", "SM", "PS", "LS", "W", "s", "N", "M", "A", "RS", "U", "ST", "SR", "DS", "D", "NS", "SU", "L", "ss", "SP", "TS", "P", "Q", "SH", "SF", "J", "Z", "SA", "V", "I", "B", "CS", "Res", "States", "SQL"], "T": ["Y", "TR", "UT", "H", "C", "X", "R", "t", "WT", "MT", "G", "N", "M", "TA", "OT", "FT", "NT", "D", "AT", "TG", "L", "TB", "TP", "TN", "TM", "TD", "TS", "P", "RT", "TI", "TC", "J", "V", "BT", "I", "B", "VT", "TF", "TT", "GT", "TV", "XT", "PT", "TL"], "dp": ["ps", "pr", "pt", "deb", "desc", "df", "xy", "pkg", "wd", "dict", "gp", "pb", "pp", "dd", "ip", "jp", "dt", "tp", "pas", "dro", "dim", "db", "pipe", "dx", "vp", "pa", "dq", "pm", "deep", "dm", "pd", "d", "dl", "p", "dep", "pat", "ds", "lp", "cp", "tap", "rpm", "dial", "dc", "np", "DP", "dh", "grad", "px", "dj", "dr", "wp", "hp", "dat"], "j": ["z", "f", "str", "obj", "jl", "pt", "pr", "m", "ja", "ret", "t", "l", "ix", "note", "fr", "jp", "k", "ji", "adj", "dt", "v", "err", "json", "sp", "ij", "job", "q", "b", "g", "user", "jac", "ie", "ind", "er", "di", "next", "p", "bi", "br", "oj", "kj", "col", "it", "jj", "jump", "tr", "aj", "J", "n", "o", "uj", "dj", "li", "ju", "rel", "bs", "bj", "js", "jc"], "i": ["io", "ini", "ei", "iso", "zi", "\u00ed", "m", "uri", "ir", "l", "t", "name", "ix", "ti", "info", "ip", "ci", "\u0438", "ji", "at", "v", "gi", "status", "ij", "index", "b", "ami", "ie", "id", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "iri", "o", "ic", "li", "I", "ia", "iter", "ui", "mi", "iu", "im", "item"], "res": ["ress", "ps", "vec", "ack", "rest", "arr", "pr", "des", "reset", "rez", "red", "ret", "rs", "nt", "cons", "resources", "result", "fr", "pas", "expr", "r", "resp", "gr", "resh", "pers", "we", "re", "der", "exp", "rx", "frac", "usr", "stock", "vol", "results", "RES", "rem", "pres", "reg", "rel", "Res", "resolution", "us", "req", "rek"], "stack": ["wait", "str", "level", "stream", "conv", "load", "Stack", "pack", "reset", "chain", "hold", "nt", "full", "rs", "pos", "case", "pop", "result", "push", "row", "shape", "switch", "fr", "buffer", "upper", "v", "history", "sp", "check", "lock", "sl", "length", "empty", "store", "now", "screen", "console", "loop", "depth", "proc", "slice", "we", "queue", "stage", "trace", "size", "p", "next", "track", "window", "frame", "local", "stick", "stock", "valid", "mount", "np", "cache", "n", "sequence", "frames", "iter", "list", "space", "scope", "box", "ack", "st"], "x": ["z", "f", "el", "xp", "m", "X", "a", "hex", "xy", "l", "name", "ix", "xs", "xa", "ax", "xx", "key", "k", "ip", "at", "v", "xml", "xt", "dx", "wx", "index", "h", "b", "g", "mx", "ex", "width", "fx", "code", "p", "rx", "xxx", "act", "xc", " xx", "e", "ox", "xe", "time", "lex", "xi", "n", "px", "w", "left", "u", "lat", "xf", "on", "item", "tx"], "y": ["Y", "z", "type", "io", "ym", "ey", "yo", "icy", "yn", "ay", "yl", "my", "xy", "py", "t", "name", "iy", "by", "sy", "key", "yy", "ty", "yt", "ch", "v", "gy", "h", "b", "g", "ies", "yes", "yi", "wy", "ny", "er", "fy", "p", "height", "col", "hot", "ry", "ya", "dy", "uy", "ye", "axy", "n", "cy", "vy", "o", "no", "year", "sky", "ly"]}}
{"code": "import sys\\n\\nl = []\\nresult = []\\nfor i in sys.stdin:\\n    l.append(i)\\n\\nfor i in range(0,len(l)):\\n    l[i] = l[i].split()\\n    for j in range(0,len(l[i])):\\n        l[i][j] = int(l[i][j])\\n\\nfor i in range(1,l[0][0]+1):\\n    a = []\\n    for j in range(0,l[0][1]):\\n        a.append(l[i][j] * l[j+l[0][0]+1][0])\\n    result.append(sum(a))\\n\\nfor data in result:\\n    print(data)\\n", "target": "614", "substitutes": {"l": ["z", "f", "fl", "lit", "ol", "lines", "ld", "ls", "el", "le", "m", "all", "t", "lv", "lis", "kl", "s", "r", "la", "v", "url", "lb", "ul", "sl", "c", "lt", "ln", "h", "lag", "b", "lc", "g", "tl", "lo", "lam", "lib", "ml", "dl", "p", "L", "lp", "pl", "local", "hl", "lr", "al", "n", "loc", "log", "li", "u", "left", "shell", "lf", "nl", "list", "rl", "lists", "ll"], "result": ["f", "done", "successful", "out", "description", "relation", "report", "df", "ret", "section", "t", "this", "su", "memory", "final", "cup", "output", "r", "res", "rc", "created", "now", "group", "complete", "test", "d", "power", "cur", "ut", "zero", "total", "e", "results", "tr", "Result", "cache", "table", "summary", "response", "correct", "list", "success", "new", "dat", "ult"], "i": ["f", "z", "io", "ini", "ei", "ri", "zi", "\u00ed", "m", "uri", "ir", "y", "t", "name", "ix", "this", "ti", "info", "s", "ip", "ci", "r", "im", "input", "ji", "v", "gi", "ij", "c", "ori", "oi", "index", "hi", "ki", "phi", "ami", "yi", "ie", "ind", "id", "er", "di", "ik", "p", "bi", "pi", "ai", "it", "int", "ii", "xi", "si", "iri", "o", "ic", "li", "I", "ia", "u", "iter", "x", "ui", "mi", "iu", "multi", "item"], "j": ["z", "f", "io", "obj", "ion", "jl", "pr", "ja", "y", "fr", "jp", "r", "ji", "v", "json", "ij", "job", "q", "b", "h", "g", "jac", "di", "p", "br", "oj", "jo", "kj", "pi", "it", "jj", "jump", "aj", "J", "n", "si", "o", "ju", "uj", "dj", "u", "li", "x", "im", "bj", "js", "jc"], "a": ["f", "active", "ba", "add", "fa", "am", "ta", "all", "ha", "sta", "ga", "au", "xa", "ca", "A", "r", "div", "at", "v", "na", "c", "ea", "b", "aux", "area", "d", "p", "alpha", "da", "act", "sa", "ata", "aa", "ac", "o", "ma", "u", "ia", "ab", "aaa", "ar", "an"], "data": ["mu", "done", "Data", "obj", "line", "what", "date", "m", "action", "name", "row", "step", "final", "key", "raw", "output", "div", "DATA", "value", "json", "csv", "val", "di", "d", "image", "da", "jo", "zero", "total", "self", "ata", "error", "average", "cache", "table", "o", "ma", "li", "n", "response", "rel", "list", "success", "item", "dat"]}}
{"code": "import sys\\ninput = lambda: sys.stdin.readline().rstrip()\\n\\ndef main():\\n    o = input()\\n    e = input()\\n    ans = []\\n    for i in range(max(len(o), len(e))):\\n        if i < len(o):\\n            ans.append(o[i])\\n        if i < len(e):\\n            ans.append(e[i])\\n    print(''.join(ans))\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "102", "substitutes": {"input": ["interface", "str", "sleep", "utils", "sum", "util", " Input", "println", "dict", "sample", "format", " print", "raw", "output", "cin", "printf", "enter", "pull", "q", "insert", "ref", "Input", "source", "select", "paste", "password", "pattern", "config", "init", "read", "call", "view", "cmd", "command", "join", "get", "parse", "inc", "it", "int", "inner", "fix", "focus", "feed", "print", "lat", "put", "update", "submit", "PUT", "proc", "new", "shift"], "o": ["op", "io", "ol", "vo", "yo", "iso", "one", "a", "l", "y", "t", "os", "\u00f6", "ole", "co", "orea", "ot", "fo", "lo", "O", "oe", "do", "ao", "oa", "et", "ro", "om", "mo", "ox", "so", "po", "onet", "bo", "ode", "n", "ob", "oo", "u", "no", "ko", "ooo", "on", "og"], "e": ["pe", "f", "ve", "ei", "ele", "el", "le", "one", "ae", "est", "a", "be", "se", "eeee", "y", "ed", "en", "ue", "v", "es", "c", "ea", "ge", "ex", "E", "we", "ie", "eu", "oe", "er", "re", "ce", "de", "eps", "te", "d", "exp", "ec", "et", "ne", "xe", "ee", "it", "ye", "eg", "ev", "eb"], "ans": ["ens", "anon", "roots", "ls", "nets", "aned", "ares", "ran", "amps", "gs", "os", "anas", "ms", "aus", "ons", "ns", "ins", "ann", "outs", "ars", "acs", "aos", "beans", "aces", "ents", "arts", "rets", "arms", "angs", "rans", "ays", "ands", "said", "eds", "akens", "vs", "ANS", "works", "anus", "leans", "helps", "offs", "powers", "anes", "ams", "ads", "mos", "ces", "ates", "ats", "ados", "ros", "aints", "anks", "an", "ants", "uploads"], "i": ["f", "ini", "ei", "ri", "zi", "m", "uri", "cli", "chain", "y", "ite", "ix", "ti", "ip", "ci", "r", "key", "ji", "gi", "v", "ori", "oi", "index", "ki", "phi", "yi", "slice", "sim", "id", "di", "bi", "multi", "j", "pi", "vi", "qi", "isi", "ai", "it", "ii", "xi", "si", "n", "iri", "ma", "li", "I", "ic", "x", "ui", "mi", "im"]}}
{"code": "from sys import stdin\\ndata = stdin.readline().rstrip()\\n\\na = int(data.split()[0])\\nb = int(data.split()[1])\\n\\nprint(a * b)", "target": "111", "substitutes": {"data": ["done", "details", "values", "function", "Data", "dump", "message", "line", "date", "down", "hex", "reset", "this", "auto", "row", "sample", "result", "step", "raw", "output", "DATA", "div", "value", "input", "now", "bytes", "empty", "string", "area", "d", "read", "rew", "next", "size", "command", "da", "new", "ata", "block", "feed", "dec", "response", "rel", "content", "body", "text", "dat"], "a": ["ba", "m", "am", "ta", "ae", "eff", "t", "sta", "ga", "s", "au", "af", "i", "xa", "ed", "ca", "A", "la", "c", "era", "area", "d", "change", "da", "alpha", "ao", "app", "oa", "act", "sa", "ai", "aq", "aa", "aj", "al", "ac", "ma", "ia", "ab", "ar", "ach", "an", "aff"], "b": ["f", "rb", "ba", "ib", "mb", "be", "t", "bc", "bp", "by", "i", "cb", "fb", "db", "c", "g", "wb", "nb", "d", "next", "br", "sb", "gb", "beta", "bis", "ob", "bs", "B", "ab", "bb", "bar", "base", "eb"]}}
{"code": "import sys\\nfrom itertools import permutations\\n\\nread = sys.stdin.read\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\nsys.setrecursionlimit(10 ** 9)\\nINF = 1 << 60\\nMOD = 1000000007\\n\\n\\ndef main():\\n    N, M, *AB = map(int, read().split())\\n    G = [[] for _ in range(N)]\\n    for a, b in zip(*[iter(AB)] * 2):\\n        G[a - 1].append(b - 1)\\n        G[b - 1].append(a - 1)\\n\\n    def dfs(v, seen):\\n        if len(seen) == N:\\n            return 1\\n\\n        ans = 0\\n        for nv in G[v]:\\n            if nv not in seen:\\n                seen.add(nv)\\n                ans += dfs(nv, seen)\\n                seen.remove(nv)\\n\\n        return ans\\n\\n    print(dfs(0, {0}))\\n    return\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "143", "substitutes": {"read": ["rand", "sys", "READ", "str", "stream", "reader", "load", "seek", "std", "find", "chain", "hold", "give", "readable", "reads", "key", "rc", "r", "input", "interpret", "byte", "pipe", "open", "query", "write", "length", "replace", "q", "g", "reading", "select", "test", "default", "orig", "mem", "size", "next", "rx", "Read", "send", "ead", "get", "file", "parse", "run", "then", "each", "rid", "rd", "feed", "iter", "print", "reverse", " Read", "scan", "text", "take"], "readline": ["getLine", "readlock", " readfile", "READfile", "stdLine", "Readfile", "READstring", "Readline", "READline", "readLine", "readstring", "getline", "getlock", "READlines", "stdline", "runline", "Readstring", "stdlines", "runlines", "stdlock", "getlines", " readstring", "runlock", "runLine", "readfile", "Readlines"], "readlines": [" readls", "readerline", "readerls", "writelines", "READline", "findfiles", "findlines", "READlines", "scanfiles", "writelists", "findlists", " readelines", "readlists", "readelines", "READelines", "scanlines", "readerelines", "scanlists", "readls", "scanreads", "findreads", "READls", "readerlines", "readfiles", "writereads", "writefiles", "readreads"], "INF": ["INf", "PINf", "EXf", "PINF", "PINFD", " INFD", "EXFD", " INV", "EXV", "INFD", " INf", "INV", "EXF", "PINV"], "MOD": ["LOG", "INC", "OP", " mod", "FD", "EXP", "DEF", "REF", "SEC", "DEV", "RO", "REM", "ID", "VER", "mod", "OFF", "LOCK", "END", "RC", "Mod", "RT", "AD", "REG", "STAT", "MODE", "NO", "DEC", "POS"], "N": ["Y", "Num", "K", "H", "C", "F", "R", "NB", "NI", "EN", "NR", "A", "MN", "SIZE", "Len", "NA", "S", "ND", "NT", "D", "SN", "NS", "L", "NM", "P", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NUM", "NN"], "M": ["Y", "K", "m", "C", "MP", "F", "R", "MT", "CM", "MI", "MN", "MC", "MM", "S", "E", "O", "D", "L", "NM", "TM", "P", "T", "J", "V", "I", "B", "BM"], "AB": ["BB", "BS", "AA", "DB", "AG", "AC", "EB", "Ab", "Tab", "RB", "OB", "SB", "BN", "WB", "BA", "IB", "ABC", "BC", "LAB", "UB", "AF", "RAY", "AD", "AM", "FB", "PB", "ABLE", "Lab", "B", "ab", "CB", "BM", "AST", "AK", "AH", "ATT", "BP"], "G": ["GRE", "GP", "Graph", "AG", "H", "GEN", "C", "GROUP", "F", "Gu", "R", "PG", "Good", "Gs", "LG", "A", "GF", "GR", "GC", "GB", "g", "S", "GH", "D", "Gate", "TG", "L", "GG", "GA", "GE", "GO", "GU", "FG", "P", "Q", "Gen", "GV", "T", "GN", "J", "Z", "V", "I", "B", "GS", "Group", "GT", "GI"], "_": [" un", "line", "all", "ix", " j", " p", "ex", "ate", "ct", "val", " l", "int", " x", "n", " all"], "a": ["z", "f", "ba", "m", "ta", "ae", "y", "t", "sta", "af", "ga", "s", "au", "i", "A", "ca", "la", "pa", "na", "c", "ea", "an", "ak", "va", "p", "ao", "j", "oa", "e", "sa", "aa", "aj", "ac", "o", "ma", "w", "ia", "ab", "aaa", "x", "ar", "am"], "b": ["z", "f", "rb", "ba", "m", "bl", "mb", "be", "l", "y", "t", "bc", "bp", "to", "back", "s", "i", "bg", "bh", "fb", "cb", "r", "db", "c", "g", "nb", "d", "p", "bi", "br", "j", "bf", "bin", "e", "sb", "bo", "gb", "bis", "n", "o", "bs", "u", "B", "ab", "bb", "base", "eb"], "v": ["f", "ve", "vo", "sv", "vv", "m", "qv", "lv", "t", "i", "ver", "k", "vp", "c", "h", "tv", "iv", "vs", "vd", "p", "vm", "vi", "j", "vt", "var", "uv", "vr", "V", "n", "w", "x", "ev", "vc", "nov", "vert"], "seen": ["registered", "made", "done", "marked", "printed", "held", "named", "found", "seeing", "mentioned", "only", " unseen", "specified", "reen", "se", "recorded", "seq", "hid", "shared", "given", "en", "gotten", "expected", "gu", "linked", "gone", "reported", "kept", "said", "see", "tested", "used", "sen", "represented", "hidden", "called", "same", "zero", "ged", " Seen", "study", "received", "each", "shown", "closed", "hung", "saw", "served", "checked", "set", "known", "killed", "documented", "me", "written", "verified", "ordered"], "ans": ["ens", "stats", "values", "groups", "lines", "names", "AN", "amps", "xs", "s", "ins", "anas", "ms", "aus", "outs", "ons", "ns", "ann", "ends", "aos", "ents", "es", "angs", "ums", "rans", "ands", "eds", "posts", "ations", " means", "vs", "ANS", "lets", "uns", "offs", "nan", "ams", "ats", "orts", "als", "x", "vals", "ts", "anks", "an", "ks", "ants", "olds"], "nv": ["qt", "ve", "nn", "vo", "sv", "nw", "nav", "obj", "vv", "dev", "lv", "nt", "nr", "NV", "fn", "mn", "cb", "nm", "ver", "dt", "ns", "vp", "mk", "sn", "nd", "vid", "nu", "nb", "ny", "tn", "iv", "tv", "vd", "ant", "vs", "dn", "vm", "ov", "av", "tk", "np", "vt", "nz", "uv", "n", "nc", "vr", "dj", "nl", " NV", "ev", "vc", "cv", "nov"]}}
{"code": "s = list(str(input()))\\nl = set(s)\\nfor i in range(26):\\n    c = chr(ord('a')+i)\\n    if c not in l:\\n        print(c)\\n        exit()\\nelse:\\n    print('None')\\n", "target": "767", "substitutes": {"s": ["z", "f", "ps", "sts", "str", "ls", "m", "a", "sis", "rs", "t", "cs", "gs", "ins", "ns", "r", "v", "sl", "c", "es", "h", "q", "b", "g", "S", "d", "p", "ss", "ds", "e", "sa", "n", "si", "st", "x", "ts", "js"], "l": ["fl", "lit", "ls", "el", "le", "m", "a", "all", "t", "lis", "gs", "sol", "ch", "lb", "v", "sl", "c", "lt", "ln", "b", "lc", "g", "lo", "d", "p", "L", "j", "lp", "pl", "et", "hl", "n", "li", "left", "w", "set", "nl", "list", "x", "ll", "ly"], "i": ["f", "ei", "zi", "m", "a", "y", "ix", "ti", "ci", "k", "ch", "v", "gi", "c", "hi", "b", "yi", "di", "p", "bi", "j", "pi", "qi", "ai", "int", "ii", "xi", "si", "n", "ic", "I", "li", "x", "mi"]}}
{"code": "int1 = lambda x: int(x) - 1\\n\\nN, M = map(int, input().split())\\n\\nred = [True] + [False] * (N-1)\\nn_ball = [1] * N\\n\\nfor _ in range(M):\\n    x,y = map(int1, input().split())\\n    if red[x]:\\n        red[y] = True\\n        n_ball[x] -= 1\\n        n_ball[y] += 1\\n        if n_ball[x] == 0:\\n            red[x] = False\\n    else:\\n        n_ball[x] -= 1\\n        n_ball[y] += 1\\n\\nprint(sum(red))", "target": "311", "substitutes": {"int1": ["Int1", "int0", "str3", "float3", "str0", "Int0", "Int2", "float2", "int3", "str2", "int2", "Int3", "float1", "str1", "float0"], "N": ["Y", "Num", "K", "H", "C", "X", "AN", "F", "R", "Ni", "W", "NB", "Mon", "NR", "CN", "MN", "U", "NA", "Count", "S", "ND", "Ne", "O", "NT", "D", "NS", "NM", "L", "TN", "P", "T", "MAN", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NUM", "NO", "NN"], "M": ["Y", "K", "m", "C", "MP", "X", "MX", "F", "R", "G", "MT", "MR", "MI", "MN", "MC", "U", "MM", "S", "O", "D", "NM", "L", "TM", "P", "Q", "MS", "T", "DM", "MAN", "J", "V", "I", "B"], "red": ["good", "med", "ld", "led", "found", "Red", "ded", "ful", "pred", "important", "ced", "cond", "blue", "redd", "debug", "dict", "ed", "fred", "rot", "given", "gold", "rc", "r", "yellow", "orange", "aligned", "redo", "color", "linked", "true", "ared", "gray", "black", " Red", "rad", "ref", "ind", "re", "rew", "ring", "pretty", "loaded", "ned", "white", "ro", "RED", "rod", "right", "connected", "rd", "star", "rec", "reg", "success", "green", "colored", "rounded", "md", "needed"], "n_ball": [" n2piece", "n2bomb", "noutwall", " n_cell", " n_Ball", "nPball", "n_view", "n_temp", "n10fan", " n2ball", " n_range", " n2wall", "n_cell", " n_square", "n10pool", "n__balls", "n2ball", "n10ball", "n_pool", "dn_wall", "n_piece", "n_square", " n_piece", "n12piece", "dn_pool", "nPballs", "n_bomb", " n_temp", "n10wall", "n_range", " n_balls", "n12wall", "noutball", "n2Ball", " n2bomb", "nPcollection", " n_collection", "n_wall", "n2wall", "nPview", "n2piece", "n_collection", "n_Ball", "n__wall", "n12bomb", "n2balls", " n_bomb", "n2square", "n_balls", " n_view", "noutpool", "dn_fan", "n_fan", "dn_ball", "noutfan", " n_wall", "n__ball", "n__Ball", "n12ball"], "_": ["ay", " it", " j", "__", " each", " p", " e", "ny", " c", "j", " z", " the", " co", "I", "___", " g"], "x": ["z", "el", "xes", "yx", "m", "xp", "X", "att", "ux", "xy", "l", "t", "ext", "ix", "xs", "day", "full", "chain", "xa", "i", "xb", "xx", "xxxxxxxx", "ax", "key", "at", "point", "v", "xml", "xt", "dx", "wx", "c", "index", "major", "ex", "ct", "fx", "any", "pei", "exp", "rx", "expr", "axis", "xxx", "xc", "ox", "xe", "xxxx", "int", "xi", "n", "lex", "batch", "px", "w", "lat", "sat", "xf", "xd", "tx"], "y": ["Y", "z", "sys", "yz", "io", "ym", "ey", "yl", "yn", "ay", "m", "my", "xy", "zy", "py", "t", "iy", "by", "sy", "i", "ip", "yy", "en", "ty", "yt", "ch", "v", "gy", "ys", "b", "ies", "yi", "ny", "ind", "fy", "yk", "j", "hot", "ya", "dy", "ye", "axy", "yr", "n", "cy", "vy", "o", "sat", "kit", "sky", "ly"]}}
{"code": "a, b, c = map(int,input().split())\\n\\nif (a+c)==2*b:print('YES')\\nelse:print('NO')", "target": "172", "substitutes": {"a": ["f", "ba", "le", "am", "ae", "\u00e1", "l", "af", "au", "A", "r", "at", "na", "ity", "admin", "d", "da", "act", "aka", "oa", "e", "sa", "ai", "aq", "aa", "aj", "al", "ac", "ma", "ia", "ab", "aaa", "x", "ar", "an", "aff"], "b": ["z", "f", "rb", "ba", "ib", "erb", "be", "l", "y", "bc", "s", "i", "bg", "cb", "fb", "v", "db", "g", "nb", "d", "p", "bi", "bf", "e", "sb", "gb", "bo", "bis", "n", "ob", "bs", "B", "ab", "bb", "eb"], "c": ["f", "sc", "C", "cr", "cs", "bc", "cf", "con", "rc", "cb", "ci", "ca", "ch", "v", "co", "lc", "cc", "ct", "unc", "ce", "d", "cos", "can", "cp", "ec", "com", "e", "cd", "dc", "n", "tc", "ac", "cm"]}}
{"code": "n = int(input())\\narr = [int(x) for x in input().split()]\\nq = int(input())\\n\\ndictA = {}\\nfor i in arr:\\n    if dictA.get(i): dictA[i] += 1\\n    else: dictA[i] = 1\\n\\nsumm = sum(arr)\\n\\nfor i in range(q):\\n    b, c = list(map(int, input().split()))\\n    if dictA.get(b):\\n        summ = summ - (dictA[b]*b) + (dictA[b]*c)\\n        if dictA.get(c): dictA[c] += dictA[b]\\n        else: dictA[c] = dictA[b]\\n        del dictA[b]\\n    print(summ)\\n", "target": "411", "substitutes": {"n": ["z", "f", "nn", "m", "l", "t", "nt", "nr", "N", "ns", "nm", "k", "r", "mn", "v", "na", "sn", "nu", "num", "d", "p", "j", "e", "np", "nc", "o", "w", "nl"], "arr": ["map", "img", "str", "obj", "array", "iq", "bl", "xy", "nt", "ix", "seq", "dict", "au", "nr", " narr", "fr", "ax", "attr", "r", "ang", "gr", "err", "ins", "res", "now", "ind", "init", "Array", "br", "frac", "pl", "buf", "args", "ai", "vol", "np", "tr", "ait", "aa", "arb", "ab", "arg", "aaa", "list", "ar", "enc", "data", "inst", "hist", "dat"], "x": ["z", " dx", "xes", "yx", "X", "a", "ux", "xy", "y", "ix", "xs", "xa", "xx", "xb", " ax", "v", "xt", "dx", "wx", "mx", "ex", "fx", "ctx", "\u00e7", "p", "rx", "xc", " xx", "e", "ox", "xe", "xxxx", "xi", "w", "px", "xf", " cx", "tx", "inx"], "q": ["z", "qt", "f", "qa", "m", "iq", "qv", "y", "t", "r", "k", "ch", "v", "query", "dq", "h", "g", "nb", "num", "d", "p", "j", "quant", "qi", "e", "Q", "np", "u", "sq", "w", "qq", "qs", "requ", "count", "qu"], "dictA": ["descA", "tableA", "cacheAE", "lookA", "collectAE", "dictAA", "ictA", "dictAU", "ictAs", "predAn", "dictI", " dictAU", "levelACT", "descCA", " dictB", "ictAC", "lookAH", "collAn", "lista", "cacheGA", " dictAB", "objectA", " dictABC", " dictE", "dirAn", "descAA", "dictAB", "dicta", " dictAI", "dictAs", "primeA", " dictAn", "ictAn", "hostAL", "primeAL", " dictACT", "tableAH", "hashAA", " dictGA", "ictCA", "dictAC", "dirA", "predGA", "listAA", "lookT", "levelGA", "cmdAA", "dictG", "dirGA", "cmdAU", "ictAE", " dictPart", "hostG", "sumB", "predApp", "dictACT", "primeT", "hashA", "primeAB", " dictI", " dictAs", "ictApp", "prefixAH", "objectAI", "collectA", "ictAbs", " dictT", "dirApp", "hashABC", "dictE", " dicta", "dictT", "upperAE", "dictApp", "levela", "levelAL", " dictAE", "ictT", "rentA", "dictAH", "levelAA", "ictI", "ictAI", " dictApp", "sumAA", "levelG", "tableAt", "objectApp", " dictAA", " dictAbs", "ictB", "dictPart", "prefixAt", "sumA", "tableAE", "prefixA", "dictB", "upperAA", "descAn", "lookAbs", "sumE", " dictAC", "dictCA", "sumAE", "dictAI", "collA", "levelA", "dictAbs", "ictGA", "hostA", "cmdA", "listA", "collectAn", "collectGA", "cmdABC", "dictAn", "collCA", "cacheA", "ictAL", "hashAU", "dictGA", "ictAt", "prefixAE", "rentAC", "objectPart", "cacheAn", " dictAH", "hostGA", "rentT", "dictAL", "listACT", "collAA", "upperA", "ictE", "sumAs", " dictG", "rentI", "dictAt", "ictPart", "ictAA", "predA", "ictAB", "dictABC", " dictAL", "ictAH", "dictAE"], "i": ["f", "io", "ini", "iso", "zi", "iq", "m", "a", "ir", "l", "y", "ite", "ix", "ti", "s", "ip", "ci", "r", "k", "im", "gi", "v", "ij", "hi", "oi", "ori", "ki", "index", "phi", "yi", "ie", "ind", "id", "di", "ik", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "li", "I", "u", "o", "us", "ui", "mi", "iu", "multi", "item"], "summ": [" saw", "Summ", "simm", "sumer", "insum", "sum", "insumer", "sums", "Sum", " sumer", " simm", "tum", "inscum", " scum", "Simm", " sums", "insumm", "timm", "dumer", "tumm", "damm", " samm", "ssaw", "dum", "Saw", "scum", "tamm", "Sumer", "ssums", "samm", "ssumm", " sum", "ssum", "Sums", "saw", "Scum", "Samm", "dumm"], "b": ["z", "f", "rb", "erb", "ib", "ba", "m", "a", "bl", "bus", "be", "l", "y", "t", "bc", "bp", "pb", "back", "by", "bg", "cb", "fb", "r", "s", "ch", "lb", "v", "db", "ble", "h", "g", "wb", "nb", "p", "bi", "br", "j", "bf", "e", "sb", "bo", "gb", "bis", "ob", "o", "bs", "u", "bot", "B", "ab", "bb", "base", "eb"], "c": ["z", "f", "sc", "mc", "m", "C", "cat", "cr", "a", "cs", "l", "t", "bc", "chain", "cf", "s", "con", "cb", "cin", "r", "ca", "ch", "rc", "ci", "v", "co", "lc", "g", "gc", "cc", "ct", "unc", "cl", "ce", "d", "p", "cur", "cp", "ec", "e", "cd", "dc", "uc", "fc", "cache", "ac", "tc", "cu", "u", "cm"]}}
{"code": "# ABC068 B - Break Number\\nN = int(input())\\n\\nfor i in range(7):\\n    if N >= 2**i:\\n        M = 2**i\\nprint(M)", "target": "733", "substitutes": {}}
{"code": "# -*- coding: utf-8 -*-\\nmoji=[]\\nmoji.append(\"eraser\")\\nmoji.append(\"erase\")\\nmoji.append(\"dreamer\")\\nmoji.append(\"dream\")\\nuser = \"erasedream\"\\nuser = int(input())\\nresult = user\\ncount = 1\\n\\nwhile result != 0:\\n    result += user\\n    result %= 360\\n    count += 1\\nprint(count,end=\"\")\\n", "target": "11", "substitutes": {}}
{"code": "a, b, c = input().split()\\n\\nif a == b and a == c:\\n    print(\"Yes\")\\n\\nelse:\\n    print(\"No\")\\n", "target": "649", "substitutes": {"a": ["f", "ba", "m", "am", "ta", "ae", "\u00e1", "l", "bc", "af", "au", "i", "cb", "A", "ca", "ch", "at", "la", "r", "v", "ea", "h", "g", "ak", "admin", "p", "da", "alpha", "app", "act", "oa", "aka", "e", "sa", "ai", "aq", "aa", "al", "ma", "ia", "B", "ab", "eas", "aaa", "ach", "an", "aff"], "b": ["rb", "ba", "ib", "m", "mb", "bl", "be", "y", "bc", "i", "bg", "cb", "fb", "r", "v", "db", "ble", "h", "wb", "nb", "d", "p", "bt", "bi", "e", "sb", "bo", "gb", "n", "ob", "abs", "bs", "B", "ab", "x", "bb", "bar", "eb"], "c": ["z", "f", "mc", "m", "C", "cat", "cs", "l", "t", "bc", "cf", "s", "con", "i", "cb", "ca", "k", "ch", "co", "h", "lc", "g", "cc", "ct", "ce", "d", "cos", "p", "can", "cp", "ec", "e", "cd", "n", "tc", "o", "ac", "cu", "u", "vc", "cm"]}}
{"code": "n,k = map(int, input().split())\\n\\ndef Base_10_to_n(X, n):\\n    if (int(X/n)):\\n        return Base_10_to_n(int(X/n), n)+str(X%n)\\n    return str(X%n)\\ns = Base_10_to_n(n, k)\\nprint(len(s))", "target": "719", "substitutes": {"n": ["z", "nn", "out", "names", "m", "l", "y", "nt", "t", "number", "name", "note", "N", "i", "ns", "mn", "nm", "r", "div", "v", "na", "c", "ln", "sn", "an", "b", "ng", "g", "h", "group", "cn", "nu", "nb", "num", "d", "size", "p", "dn", "j", "local", "ne", "net", "int", "gn", "np", "nan", "nc", "o", " N", "w", "nl", "x", "ll", "new"], "k": ["dk", "K", "m", "kr", "spec", "ka", "ck", "kl", "ikk", "i", "kick", "kk", "kan", "ke", "key", "kar", "c", "mk", "q", "g", "kn", "ak", "ik", "p", "km", "j", "ek", "kw", "sk", "ko", "ku", "ks", "ack"], "X": ["Y", "Time", "UX", "K", "CE", "H", "C", "XL", "IC", "MX", "Check", "Gene", "XY", "N", "A", "Tx", "OX", "U", "Int", "XXX", "ANY", "S", "DX", "E", "O", "EX", "Cross", "Array", "Xi", "Matrix", "L", "Right", "Win", "P", "Q", "ZX", "Value", "XM", "XP", "XX", "Z", "V", "I", "Ex", "HTTP", "RH", "IX", "x", "TX", "XT"], "s": ["ps", "comments", "str", "sv", "ls", "m", "a", "sql", "cs", "rs", "t", "cons", "gs", "su", "ms", "ns", "r", "series", "prints", "v", "strings", "es", "gets", "b", "S", "string", "sort", "ss", "less", "ds", "sb", "ses", "w", "ats", "ts", "qs", "js"]}}
{"code": "\\ndef main():\\n    s = input()\\n    t = input()\\n    if s == t[:-1]:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "472", "substitutes": {"s": ["ps", "f", "sts", "sv", "ls", "m", "fs", "a", "sis", "cs", "rs", "y", "gs", "l", "ms", "i", "ns", "sl", "c", "ys", "q", "b", "g", "S", "changes", "p", "ss", "ds", "sa", "sb", "n", "sq", "ats", "ts", "qs"], "t": ["z", "f", "pt", "tm", "m", "ta", "l", "y", "nt", "tt", "tw", "i", "tp", "dt", "ty", "v", "c", "ot", "q", "b", "g", "ct", "d", "te", "p", "j", "e", "wt", "T", "txt", "n", "tc", "o", "w", "ts", "st"]}}
{"code": "a = [int(s) for s in input().split()]\\nmax_id = a.index(max(a[0], a[1], a[2]))\\nmin_id = a.index(min(a[0], a[1], a[2]))\\nsum = 0\\nsum += abs(a[0] - a[1])\\nsum += abs(a[1] - a[2])\\nsum += abs(a[2] - a[0])\\nsum -= abs(a[max_id] - a[min_id])\\nprint(sum)", "target": "793", "substitutes": {"a": ["ba", "fa", "input", "aos", "h", "era", "g", "val", "area", "power", "da", "ao", "parts", "ia", "set", "ab", "eas", "x", "auto", "z", "f", "obj", "apa", "ta", "att", "result", "history", "na", "er", "exp", "args", "aa", "n", "o", "am", "abc", "ae", "l", "ga", "ed", "i", "A", "at", "c", "ea", "b", "go", "p", "alpha", "app", "zero", "sa", "cache", "al", "ac", "ma", "w", "aaa", "aff", "out", "array", "ap", "all", "sta", "au", "es", "aux", "d", "oa", "act", "u", "ar", "an"], "s": ["ps", "sts", "str", "ples", "sv", "lines", "ls", "ares", "rs", "t", "xs", "ms", "ows", "i", "ns", "strings", "v", "hs", "es", "c", "S", "csv", "string", " inputs", "ss", "ds", "sb", "ses", "n", "sq", "tes", "ats", "als", "space", "x", "ts", "qs", "fts", " S"], "max_id": [" max_mid", "max_ids", "maxlenid", "max_no", "max_pid", "min_ids", "min_pid", "maxenpid", "maxenmid", "maxlenindex", "maxlenmid", " max_pid", "max_mid", "maxenid", " max_index", "maxenindex", "maxlenpid", "max_index", "min_no"], "min_id": ["low_id", "min__id", "low_ids", "min_key", "min_ids", " min_k", "low_key", " min_Id", "min_rid", " min_index", "minenindex", "min_index", "min_k", "min__k", "min__index", "min__Id", "min_Id", "minenk", "low_rid", "minenid", "minenId"], "sum": ["sup", "tu", "add", "max", "loss", "dev", "status", "v", "ho", "sym", "match", "g", "sim", "num", "cmp", "fac", "average", "mean", "set", "hist", "count", "sys", "m", "comment", "Sum", "result", "ms", "na", "scale", "temp", "cos", "tail", "sam", "vol", "doc", "cum", "us", "cast", "dot", " SUM", "gam", "sv", "su", "prof", "must", "mem", "size", "zero", "total", "sa", "weight", "cache", "multi", "sky", "hum", "st", "diff", "tmp", "tim", "acc", "all", "score", "au", "mass", "ass", "use", "si", "u", "summary", "sat", "um", "hash"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\nfrom collections import defaultdict\\nN,M = map(int,input().split())\\nabc = [list(map(int,input().split())) for i in range(M)]\\n\\ng = defaultdict(list)\\nrg = defaultdict(list)\\nfor a,b,c in abc:\\n    g[a].append((b,c))\\n    rg[b].append(a)\\n\\ninf = 10**20\\nscore = [-inf]*(N+1)\\nscore[1] = 0\\n\\nfor i in range(N-1):\\n    for v in range(1,N+1):\\n        for nv, c in g[v]:\\n            if score[v] + c > score[nv]:\\n                score[nv] = score[v] + c\\n\\nupdate = [False]*(N+1)\\nfor v in range(1,N+1):\\n    for nv, c in g[v]:\\n        if score[v] + c > score[nv]:\\n            score[nv] = score[v] + c\\n            update[v] = True\\n\\nvisited = [False]*(N+1)\\nl = [N]\\nwhile l:\\n    v = l.pop()\\n    visited[v] = True\\n    for nv in rg[v]:\\n        if not visited[nv]:\\n            l.append(nv)\\nfor u,v in zip(update, visited):\\n    if u and v:\\n        print('inf')\\n        exit()\\n\\nprint(score[N])\\n", "target": "258", "substitutes": {"input": ["rand", "str", "out", "stream", "val", "reader", "load", "util", " Input", "sample", "format", "fn", "raw", "output", "request", "filter", "url", "pull", "q", "csv", "ref", "Input", "string", "select", "source", "cmd", "context", "config", "init", "read", "char", "next", "pattern", "command", "new", "get", "parse", "inc", "it", "int", "txt", "feed", "sequence", "print", "arg", "gen", "data", "view", "text", "shift"], "N": ["Y", "Name", "Num", "K", "NE", "C", "AN", "R", "Ni", "G", "CNN", "NB", "NI", "NV", "NR", "A", "MN", "CN", "Na", "NL", "NP", "NA", "ANY", "S", "ND", "O", "New", "NT", "D", "SN", "NS", "FN", "Node", "L", "NM", "TN", "NOTE", "P", "Q", "T", "MAN", "GN", "J", "n", "V", "Note", "I", "Z", "Ns", "NC", "NUM", "NO", "NN", " n"], "M": ["Y", "K", "m", "C", "MP", "MX", "R", "Multi", "G", "MT", "MR", "LM", "CM", "MI", "MN", "A", "MC", "MM", "S", "E", "D", "L", "NM", "TM", "P", "IM", "MS", "T", "MAN", "DM", "J", "V", "I", "B", "Mi", "MD"], "abc": ["rb", "ba", "org", "oc", "chest", "mc", "abet", "fg", "acon", "bc", "au", "etc", "ABC", "rc", "cb", "fb", "db", "icc", "exc", "arc", "gc", "lam", "lib", "acl", "alpha", "xc", "ig", "gb", "fc", "conf", "nc", "ac", "ic", "ob", "abs", "cache", "ab", "pg"], "i": ["ini", "ei", "zi", "m", "ir", "ti", "ip", "ci", "gi", "ij", "ie", "ind", "id", "di", "p", "pi", "it", "int", "ii", "xi", "n", "si", "ic", "o", "li", "I", "iter", "x", "iu", "im"], "g": ["f", "gm", "ag", "m", "fg", "G", "gs", "og", "ga", "gp", "bg", "r", "gr", "ch", "msg", "gi", "gu", "gt", "q", "gg", "gc", "sg", "h", "group", "ge", "tg", "erg", "d", "p", "j", "cfg", "gd", "ig", "it", "mg", "gn", "gb", "gh", "vg", "n", "ac", "reg", "gen", "pg"], "rg": ["yg", "sys", "rb", "ag", "RG", "org", "mc", "rr", "sr", "fg", "rs", "gs", "bg", "rc", "r", "mn", "ang", "gr", "lb", "rang", "cb", "alg", "ng", "gg", "gc", "sg", "tg", "rn", "erg", "lp", "cfg", "ro", "gd", "usr", "ig", "gn", "lr", "gb", "np", "graph", "nc", "rd", "mr", "vg", "gru", "reg", "ar", "rl", "pg"], "a": ["f", "ba", "m", "ae", "t", "sta", "af", "s", "A", "r", "ca", "la", "ea", "an", "ak", "ant", "va", "p", "j", "av", "e", "sa", "aq", "aa", "aj", "ac", "n", "o", "ma", "w", "ab", "aaa", "x", "ar", "ach", "am", "aff"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "y", "t", "bc", "s", "bg", "cb", "r", "fb", "lb", "db", "d", "p", "bi", "j", "e", "sb", "bu", "aa", "n", "ob", "bs", "B", "ab", "bb"], "c": ["z", "f", "comments", "cod", "sc", "mc", "m", "C", "cr", "cs", "t", "bc", "cf", "s", "ci", "r", "cb", "ca", "rc", "ch", "cin", "icc", "co", "h", "arc", "lc", "gc", "cc", "ct", "unc", "cl", "ce", "d", "cos", "p", "col", "cp", "ec", "com", "xc", "e", "dc", "conf", "cache", "ac", "n", "o", "cu", "pc", "fc", "cor", "w", "ic", "tc", "x", "vc", "cm"], "inf": ["f", "core", "min", "diff", "sc", "std", "expl", "dev", "ext", "info", "ins", "pp", "rc", "err", "aff", "Inf", "ref", "ind", "inter", "cont", "exp", "ctr", "frac", "pi", "inc", "it", "int", "tf", "conf", "nan", "nc", "n", "ic", "log", "star", "I", "iter", "count", "init"], "score": ["scroll", "good", "stats", "core", "rate", "play", "diff", "style", "sc", "sum", "report", "message", "sync", "date", "float", "loss", "est", "t", "give", "number", "note", "result", "push", "Score", "err", "value", "status", "check", "display", "sd", "match", "index", "scale", "distance", "gc", "double", "ignore", "test", "num", "size", "strength", "process", "goal", "sort", "zero", "deg", "evaluate", "send", "scoring", "gem", "mean", "gb", "search", "beta", "error", "weight", "rank", "n", "reason", "average", "cache", "summary", "show", "set", "grade", "success", "cost", "count", "confidence", "description"], "v": ["z", "f", "ve", "vo", "sv", "conv", "vv", "m", "vic", "qv", "y", "lv", "t", "dev", "s", "en", "ver", "k", "value", "vp", "h", "val", "tv", "iv", "rev", "vs", "vd", "p", "vm", "va", "vi", "ov", "j", "av", "e", "it", "vt", "var", "n", "uv", "o", "vr", "w", "V", "vy", "li", "ic", "x", "on", "ev", "vc", "cv", "nov", "vert"], "nv": ["qt", "ve", "nn", "vo", "sv", "nav", "nw", "adv", "conv", "vv", "vic", "hn", "kh", "qv", "ni", "dev", "lv", "nit", "nt", "nr", "NV", "fn", "nm", "dt", "env", "mn", "vidia", "vp", "mk", "sn", "vid", "ovan", "csv", "nu", "nb", "ny", "tn", "iv", "cmd", "tv", "vd", "ant", "vm", "anne", "gov", "ov", "br", "sov", "nil", "squ", "vi", "av", "np", "vt", "nut", "var", "txt", "uv", "nc", "vr", "cu", "rt", "ju", "nz", "n", "nl", " NV", "ev", "vc", "cv", "nov", "bj", "vert"], "update": ["mu", "op", "wait", "add", "ag", "diff", "edit", "sync", "report", "load", "touch", "UPDATE", "edge", "other", "move", "two", "all", "fill", "result", " updated", "msg", "check", "status", "write", "replace", "index", "use", "ge", "val", "dating", "force", "updated", "test", "init", "go", "change", "num", "changed", " Update", "it", "current", "equal", "component", "beta", "dates", "cache", "doc", "hit", "up", "feed", "log", "iter", "set", "save", "stop", "where", "arg", "unit", "Updated", "new", "Update"], "visited": ["expite", "inviting", "guited", "vited", "Visits", "Visit", "invit", "expit", "invitted", "Visited", "vite", " revisied", "invited", "guitted", "visite", "visied", "Visiting", "VISit", "visits", " revisited", "expitted", "Visitted", "vits", "visitted", " revisitted", "VISited", "expited", "visiting", "vitted", "VISitted", "vit", "visit", "VISits", "Visied", "guied", " revisiting", "Visite", "guiting", "VISiting"], "l": ["z", "fl", "lit", "ol", "ls", "el", "m", "all", "t", "lv", "kl", "s", "len", "r", "Left", "lb", "sl", "ln", "h", "q", "lc", "tl", "lo", "ml", "p", "dl", "L", "j", "lp", "pl", "hl", "n", "o", "li", "w", "left", "lf", "nl", "list", "rl", "ll"], "u": ["uid", "itu", "tu", "mu", "pu", "fu", "ud", "yu", "su", "au", "ug", "aus", "ue", "ul", "lu", "U", "nu", "eu", " nu", "ut", "ou", "uf", "bu", "uc", "ur", "uu", "uv", "ju", "cu", "uni", "us", "hu", "ui", "iu", "ru"]}}
{"code": "a = []\\nfor i in range(5):\\n    a.append(int(input()))\\nk = int(input())\\n\\nfor i in range(5):\\n    for j in range(i, 5):\\n        if a[j] - a[i] > k:\\n            print(':(')\\n            exit()\\nprint('Yay!')", "target": "208", "substitutes": {"a": ["f", "arr", "array", "m", "am", "ta", "ae", "all", "t", "sta", "ga", "au", "xa", "A", "at", "la", "now", "history", "na", "c", "ea", "h", "ot", "b", "g", "p", "va", "da", "alpha", "ao", "app", "window", "oa", "e", "sa", "aq", "aa", "up", "n", "ac", "ma", "w", "set", "ab", "aaa", "x", "an", "data"], "i": ["f", "ei", "ini", "ri", "zi", "m", "ir", "l", "y", "t", "ti", "ip", "ci", "ji", "gi", "v", "ij", "c", "hi", "index", "ki", "b", "yi", "ie", "ind", " ii", "di", "ik", "p", "bi", "pi", "qi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "o", "li", "I", "ia", "u", "x", "iti", "mi", "iu", "im"], "k": ["K", "kr", "kh", "ka", "ck", "kl", "ikk", "kk", "ke", "v", "kar", "mk", "ki", "q", "ak", "kn", "ijk", "wk", "ik", "kok", "km", "kj", "ek", "kw", "tk", "n", "sk", "ko", "ku", "ks"], "j": ["z", "f", "ion", "jl", "m", "ja", "l", "y", "t", "jp", "ji", "v", "ij", "c", "q", "b", "je", " ii", "ik", "d", "p", "bi", "oj", "jo", "kj", "e", "jj", "aj", "J", "ii", "n", "ju", "si", "uj", "dj", "ia", "o", "bj", "jc"]}}
{"code": "import sys\\nimport numpy as np\\nfrom numba import njit, void, i8\\ninput = sys.stdin.buffer.readline\\n\\ndef main():\\n    R, C, K = map(int, input().split())\\n    cell = np.full((R+1, C+1), 0, dtype=np.int64)\\n    for i in range(K):\\n        x, y, c = map(int, input().split())\\n        cell[x-1, y-1] = c\\n    print(calc(cell, R, C))\\n\\n@njit(i8(i8[:,:],i8,i8))\\ndef calc(cell, R, C):\\n    L_INF = int(1e17)\\n    dp = np.full((R+1, C+1, 4), -L_INF, dtype=np.int64)\\n    dp[0, 1, 0] = dp[1, 0, 0] = 0\\n    for i in range(1, R + 1):\\n        for j in range(1, C + 1):\\n            for k in range(4):\\n                dp[i, j, k] = max(dp[i, j, k], dp[i, j-1, k])\\n                if k > 0:\\n                    dp[i, j, k] = max(dp[i, j, k], dp[i, j, k-1])\\n                    dp[i, j, k] = max(dp[i, j, k], dp[i, j-1, k-1] + cell[i-1, j-1])\\n                if k == 1:\\n                    dp[i, j, 1] = max(dp[i, j, 1], dp[i-1, j, 3] + cell[i-1, j-1])\\n    return dp[R, C, 3]\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "113", "substitutes": {"input": ["img", "str", "out", "utils", "reader", "load", "util", "reset", " Input", "sample", "point", "raw", "request", "output", "buffer", "history", "url", "json", "pull", "xml", "index", "q", "insert", "enum", "csv", "position", "Input", "source", "select", "ref", "pattern", "config", "context", "read", "view", "next", "image", "command", "it", "int", "choice", "address", "focus", "feed", "sequence", "first", "set", "list", "update", "data", "PUT", "entry", "new", "init"], "R": ["Y", "RR", "TR", "AR", "RG", "RGB", "H", "RA", "X", "Dr", "F", "Rs", "IR", "G", "CR", "MR", "VR", "N", "M", "NR", "r", "A", "RS", "GR", "U", "RO", "Range", "Run", "RE", "S", "SR", "PR", "D", "RL", "L", "Right", "HR", "RT", "P", "DR", "RC", "OR", "ER", "J", "RM", "V", "I", "B", "Res", "RH", "BR"], "C": ["Y", "Cl", "CF", "CE", "CO", "AC", "Ch", "IC", "CNN", "CR", "Cs", "CON", "CM", "N", "M", "BC", "CN", "CV", "U", "CU", "GC", "CD", "S", "E", "HC", "D", "CL", "CT", "L", "VC", "CC", "P", "CW", "T", "Co", "TC", "YC", "J", "COR", "I", "V", "B", "CS", "EC", "JC", "CB", "NC", "SC", "WC", "CP"], "K": ["Y", "HK", "Num", "KY", "PK", "X", "F", "KK", "SK", "G", "W", "NB", "N", "M", "KR", "KI", "KS", "Size", "S", "O", "D", "P", "Q", "KE", "T", "J", "Z", "V", "I", "B", "KC", "AK"], "cell": ["function", "tmp", "el", "line", "adv", "pred", "pack", "field", "pixel", "grid", "label", "df", "node", "cel", "cs", "ck", "row", "fn", "cb", "cin", "Cell", "ch", "cells", "v", "tex", "co", "cal", "job", "lc", "entry", "csv", "cc", "slice", "nb", "cer", "code", "ce", "cont", "call", "char", "p", "dl", "col", "cp", "local", "td", "cle", "nel", "word", "client", "binary", "int", "tf", "fc", "pc", "table", "cache", "ell", "cy", "tab", "tc", "ctl", "chart", "content", "ll"], "i": ["ini", "ei", "ri", "zi", "cli", "ir", "l", "ix", "ti", "info", "ip", "ci", "r", "\u0438", "at", "v", "gi", "ij", "hi", "oi", "ki", "phi", "ami", "ie", "id", "er", "di", "ik", "p", "bi", "multi", "pi", "e", "ai", "it", "ii", "xi", "si", "n", "ic", "o", "li", "I", "u", "ia", "ui", "mi", "iu", "im"], "x": ["z", "f", "m", "X", "a", "xy", "l", "t", "ix", "xs", "s", "r", "v", "xt", "dx", "h", "mx", "ex", "p", "rx", "col", "xc", "e", "ox", "xi", "n", "o", "w", "u", "tx"], "y": ["Y", "z", "ym", "yl", "yn", "my", "xy", "py", "t", "iy", "oy", "sy", "yy", "ch", "yt", "ty", "v", "gy", "ys", "b", "ies", "ny", "p", "col", "n", "yr", "cy", "o", "hy"], "c": ["z", "f", "m", "l", "t", "cs", "ci", "r", "rc", "ch", "cb", "v", "color", "h", "q", "b", "lc", "g", "gc", "cc", "ct", "d", "p", "col", "cp", "xc", "e", "dc", "n", "nc", "tc", "u", "w", "cm", "count"], "L_INF": ["L_NAF", "L_InF", "L_PINf", "L_NAFT", "L_MINFT", "L_FILN", "L_FILF", "L_FILD", "L_NAH", "L_PIND", "L_CONH", "L_MINH", "L_PINF", "L_MINF", "L_InD", "L_Inf", "L_IND", "L_PINN", "L_CONF", "L_CONFT", "L_INf", "L_InN", "L_INFT", "L_MINZ", "L_NAZ", "L_INN", "L_FILf", "L_CONZ", "L_INZ", "L_INH"], "dp": ["ps", "deb", "adr", "desc", "decl", "xp", "pixel", "bsp", "df", "pkg", "conn", "bp", "wd", "pb", "gp", "pp", "dd", "dist", "lip", "jp", "tp", "dt", "resp", "ip", "attr", "db", "dx", "vp", "dq", "pm", "dis", "fp", "prep", "imp", "csv", "deep", "dm", "ctx", "pd", "du", "dl", "p", "dep", "cp", "lp", "ds", "dial", "sb", "cd", "dc", "np", "DP", "dh", "ctl", "pc", "delay", "px", "dj", "dr", "wp", "dat"], "j": ["z", "f", "str", "io", "obj", "jl", "el", "pt", "ja", "jit", "l", "other", "note", "s", "fr", "key", "r", "jp", "ji", "adj", "v", "sp", "json", "em", "ij", "item", "job", "q", "b", "je", "g", "user", "jet", "ie", "ijk", "d", "next", "p", "bi", "br", "kj", "last", "it", "jj", "jump", "tr", "aj", "J", "n", "o", "bs", "uj", "dj", "bot", "on", "im", "og", "bj", "js", "jc"], "k": ["dk", "z", "kg", "mc", "m", "kind", "kr", "kt", "kh", "uk", "ka", "t", "ck", "kl", "ok", "key", "kk", "ke", "kan", "kid", "kick", "kar", "v", "mk", "cm", "q", "g", "ak", "kn", "ijk", "wk", "id", "ik", "d", "p", "km", "kj", "ek", "kw", "it", "tk", "ac", "o", "u", "sk", "ko", "ku", "ks", "ack"]}}
{"code": "a = input()\\nb = input()\\n\\nc = 0\\nfor i, j in zip(a, b):\\n    if i != j:\\n        c += 1\\nprint(c)", "target": "123", "substitutes": {"a": ["z", "f", "ba", "apa", "ap", "am", "ae", "t", "au", "ax", "A", "input", "at", "ea", "ate", "aux", "d", "p", "da", "act", "anta", "oa", "e", "sa", "aa", "aj", "al", "art", "ac", "o", "abs", "ab", "eas", "aaa", "x", "ar", "ach", "an"], "b": ["z", "f", "rb", "ba", "erb", "ib", "mb", "be", "l", "y", "t", "bc", "bp", "cb", "fb", "r", "db", "v", "lib", "d", "p", "bi", "bf", "e", "sb", "gb", "bis", "ob", "bs", "B", "ab", "bb", "eb"], "c": ["f", "sc", "C", "cr", "cut", "cs", "t", "cf", "con", "ci", "rc", "ca", "r", "cb", "co", "cm", "lc", "gc", "g", "ct", "cc", "ce", "\u00e7", "crit", "d", "cos", "cur", "col", "cp", "total", "xc", "cd", "dc", "uc", "conf", "fc", "ac", "cache", "nc", "n", "cum", "cu", "tc", "cv", "count"], "i": ["ib", "ini", "zi", "y", "ti", "\u0438", "ci", "ip", "ji", "ati", "v", "ij", "hi", "ki", "phi", "ami", "yi", "di", "ik", "iat", "p", "bi", "pi", "qi", "ai", "ii", "xi", "si", "li", "I", "ia", "x", "iti", "mi", "iu"], "j": ["z", "f", "jl", "m", "ja", "xy", "l", "y", "bc", "jp", "k", "ji", "r", "v", "json", "ij", "q", "je", "p", "bi", "kj", "jas", "it", "jj", "bo", "jump", "aj", "J", "n", "bs", "uj", "ia", "bj", "js", "jc"]}}
{"code": "def main():\\n    H1,M1,H2,M2,K = [int(x) for x in input().split()]\\n    if M2 >= M1:\\n        diff = (H2-H1)*60 + M2-M1\\n    else:\\n        diff = (H2-H1)*60 + 60-M1+M2 -60\\n    if diff <= 0:\\n        print(0)\\n    else:\\n        print(diff - K)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "281", "substitutes": {"H1": [" H30", "H30", "h0", "H3", "HI0", "M3", "H0", "Head41", "HI30", "M30", "h2", "Head1", "Head2", "M0", "M41", " H0", "h8", "H41", " H41", "M8", "Head3", "HI2", "HI1", " H8", "h1", " H3", "H8"], "M1": ["M4", "P001", "H3", "V1", "M001", "M3", "M01", "H0", "m3", "P1", "MP1", "P01", "V11", "MC0", "m2", "MP2", "MC4", "M11", "M0", "V3", "V01", "V2", "H01", "m1", "V0", "H11", "MC2", "H4", "P2", "MP001", "MC1", "V4", " M001", "P11"], "H2": ["Host2", "M22", " H02", "H3", " h102", "M3", "Htwo", "Mtwo", "M5", " h2", " h3", "H5", "Hosttwo", "HA02", "M102", " H102", " h1", "M02", "H102", "HA2", "HA1", " H5", "Host5", " H3", "Host3", "HA22", " Htwo", "H22", "H02", " H22"], "M2": ["MC102", "M22", "MC22", "MCTwo", "R12", "H3", "M3", "Htwo", "Mtwo", "M5", "R3", "P1", " M5", "MC6", " MTwo", "M42", "H5", "MC5", "M102", "MTwo", "R1", " M12", " M42", "P102", " M3", "P6", " M102", "MCtwo", " M6", " M22", "MC42", "MC2", "R2", "M12", "H12", " Mtwo", "P2", "H42", "MC1", "HTwo", "H22", "M6"], "K": ["HK", "Y", "KA", "Disk", "FK", "PK", "H", "C", "X", "KK", "R", "Kar", "SK", "G", "W", "N", "M", "A", "k", "KR", "MC", "IK", "KI", "Mask", "KS", "S", "E", "VK", "D", "Key", "P", "Q", "KE", "Sk", "T", "J", "Z", "KEY", "V", "I", "KC", "Kind", "MK"], "x": ["xes", "xp", "X", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "i", "xx", "ax", "xxxxxxxx", "k", "xb", "key", "v", "dx", "wx", "mx", "pair", "ex", "fx", "any", "p", "rx", "xc", "e", "ox", "xe", "xi", "cy", "px", "xf", "xd", "tx"], "diff": ["disk", "max", "different", "sum", "deb", "desc", "range", "eff", "df", "cut", "dev", "l", "debug", "pos", "rot", "result", "step", "dist", "adj", "div", "value", "Diff", "missing", "dx", "length", "odd", " difference", "start", "split", "iff", "distance", "dis", "test", "d", "change", "comp", "dl", "changed", "total", "cmp", "equal", "relative", "fix", "conf", "dust", "loc", "error", "neg", "rel", "patch", "Delta", "shift"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\ntry:\\n    from typing import List\\nexcept ImportError:\\n    pass\\n\\n\\ndef solve(N: int, K: int, l: \"List[int]\"):\\n    l.sort(reverse=True)\\n    print(sum(l[:K]))\\n\\n\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    K = int(next(tokens))  # type: int\\n    l = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\\n    solve(N, K, l)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "433", "substitutes": {}}
{"code": "n = int(input())\\nassert n <= 20 and n >= 3,\"input error(3 <= n <= 20)\"\\np = list(map(int,input().split()))\\nres = 0\\nfor i in range(1,n-1,1):\\n    if (p[i-1] < p[i] and p[i] < p[i+1]) or (p[i-1] > p[i] and p[i] > p[i+1]):\\n        res +=1\\n\\nprint(res)", "target": "318", "substitutes": {"n": ["z", "f", "nn", "min", "nia", "m", "a", "l", "all", "nt", "t", "number", "s", "N", "len", "ns", "mn", "k", "un", "v", "na", "c", "ng", "sn", "q", "ln", "b", "g", "h", "cn", "nu", "nb", "num", "d", "size", "j", "ne", "natural", "net", "nor", "np", "nan", "nc", "o", "u", "no", "nl", "non", "x"], "p": ["op", "ps", "f", "pe", "per", "pt", "pr", "ap", "xp", "a", "rep", "l", "pkg", "bp", "pos", "pb", "pp", "ip", "r", "tp", "jp", "press", "at", "sp", "pa", "vp", "c", "pm", "q", "pers", "post", "g", "fp", "mp", "pre", "d", "eps", "power", "exp", "pi", "pl", "lp", "cp", "ping", "app", "P", "it", "np", "up", "dp", "pc", "pid", "wp", "x", "pn", "pro", "pg"], "res": ["ress", "rand", "rest", "out", "obj", "pr", "pt", "sum", "cond", "reset", "red", "ret", "cs", "cons", "result", "ms", "con", "pas", "expr", "r", "ver", "gr", "resp", "sol", "cal", "prof", "resh", "pers", "ther", "yes", "ref", "sim", "re", "mem", "crit", "round", "clus", "progress", "stock", "vol", "net", "RES", "pres", "rem", "reed", "rel", "reg", "Res", "us", "success", "req", "pro"], "i": ["f", "io", "ini", "ei", "iso", "ri", "zi", "m", "cli", "uri", "y", "name", "ix", "ti", "info", "ip", "ci", "\u0438", "k", "ji", "im", "v", "gi", "ij", "ori", "index", "ki", "q", "phi", "g", "ami", "ie", "ind", "id", "asi", "di", "eu", "bi", "exp", "j", "pi", "ai", "it", "ii", "xi", "si", "ic", "iri", "li", "I", "ia", "me", "x", "ui", "mi", "iu", "multi"]}}
{"code": "k = int(input())\\nalst = list(map(int, input().split()))[::-1]\\nl = 2\\nr = 2\\n\\ndef check(l, r, a):\\n    if l % a == 0:\\n        return True\\n    elif r // a == l // a:\\n        return False\\n    else:\\n        return True\\n\\nfor a in alst:\\n    if not check(l, r, a):\\n        print(-1)\\n        exit()\\n    l = (l + a - 1) // a * a\\n    r = r // a * a + (a - 1)\\nprint(l, r)", "target": "423", "substitutes": {"k": ["z", "f", "K", "m", "kr", "ka", "y", "t", "ok", "i", "key", "v", "c", "q", "b", "g", "ak", "ik", "p", "km", "j", "e", "kw", "n", "o", "w", "u", "ko", "ks"], "alst": ["elSt", "calst", "Albt", "Alst", "dalst", "alstr", "albt", "dalist", "dalST", " alist", " albt", "elST", "alSt", "elist", " alST", "alST", "calstr", "elst", "calST", " alSt", "alist", "AlST", "dalSt", " alstr", "calbt", "Alstr"], "l": ["f", "ol", "ld", "ls", "yl", "el", "le", "m", "t", "lin", "kl", "s", "i", "len", "sol", "lb", "v", "la", "ul", "sl", "c", "lt", "length", "ln", "h", "lock", "b", "lc", "g", "tl", "lo", "ml", "p", "dl", "L", "j", "lp", "pl", "local", "hl", "lr", "al", "n", "loc", "o", "ell", "li", "left", "u", "nl", "list", "ar", "rl", "ll", "st"], "r": ["z", "rb", "pr", "rr", "m", "kr", "cr", "sr", "R", "red", "y", "t", "rs", "nr", "result", "fr", "i", "attr", "rc", "rl", "err", "res", "v", "c", "h", "q", "b", "g", "er", "re", "rm", "d", "p", "br", "j", "rw", "ro", "ry", "e", "run", "lr", "right", "ur", "n", "rd", "o", "mr", "w", "u", "hr", "rec", "rel", "vr", "dr", "rar", "ar", "rt", "ru"], "a": ["add", "ba", "ka", "name", "ow", "xa", "pa", "h", "g", " ba", "val", "area", "num", " ra", "ao", "ai", "sha", "ia", "set", "ab", "count", "auto", "z", "f", " af", "apa", "m", "ta", "action", "t", "to", "na", "aw", "index", "exp", "aa", "n", "o", " A", "am", "ack", "ita", "le", "ae", "ga", "i", "A", " pa", "at", "la", "c", "ea", "b", "ak", " ta", "go", "p", "alpha", "j", "e", "sa", "al", "ac", "ma", "w", "aaa", "all", "y", "ha", "au", "s", "ca", "d", "window", "oa", "act", "aka", "ar", "an", "after"]}}
{"code": "from statistics import median\\n#import collections\\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\\nfrom fractions import gcd\\nfrom itertools import combinations # (string,3) 3\u56de\\nfrom collections import deque\\nfrom collections import defaultdict\\nimport bisect\\n#\\n#    d = m - k[i] - k[j]\\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\\n#\\n#\\n#\\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\\n#\\n#\\n\\nimport sys\\nsys.setrecursionlimit(10000000)\\nmod = 10**9 + 7\\n\\ndef readInts():\\n  return list(map(int,input().split()))\\ndef main():\\n    a,b,c,k = readInts()\\n    a_ = b + c\\n    b_ = a + c\\n    ab = a_ - b_\\n    k = k % 2\\n    if ab >= 10**18:\\n        print(\"Unfair\")\\n    else:\\n        if k == 0:\\n            print(a-b)\\n        else:\\n            print(ab*(-1)**(k+1))\\n\\nif __name__ == '__main__':\\n  main()\\n", "target": "669", "substitutes": {}}
{"code": "import array\\nfrom functools import reduce\\nfrom operator import xor\\n\\nN = int(input())\\nA = array.array(\"L\", map(int, input().split()))\\n\\nQ = array.array(\"L\", [0]) * N\\n\\nR = reduce(xor, A)\\nfor i in range(N):\\n    print(R^A[i])\\n", "target": "453", "substitutes": {"N": ["Num", "K", "C", "X", "F", "G", "Ni", "CNN", "NB", "NI", "M", "NR", "CN", "Na", "Len", "NP", "NA", "Size", "Count", "S", "E", "O", "ND", "NT", "D", "SN", "NS", "L", "NM", "TN", "P", "No", "T", "GN", "n", "V", "I", "Ns", "NC", "NO", "NN", "Network", "NH"], "A": ["Y", "AR", "K", "AI", "AA", "H", "C", "X", "AC", "a", "G", "M", "BA", "CA", "LA", "AL", "U", "JA", "NA", "S", "E", "As", "AU", "D", "Array", "All", "AF", "L", "GA", "An", "At", "P", "AM", "SA", "T", "The", "AP", "AB", "V", "I", "B", "Alpha", "AE"], "Q": ["Y", "QU", "Cl", "K", "H", "C", "MQ", "X", "F", "G", "W", "M", "U", "q", "S", "E", "O", "D", "L", "P", "T", "J", "Z", "V", "I", "B", "UE"], "R": ["RR", "Y", "TR", "K", "RG", "H", "C", "RA", "X", "F", "G", "W", "CR", "MR", "Query", "M", "NR", "r", "RS", "GR", "RE", "S", "D", "L", "Right", "HR", "P", "DR", "RF", "ER", "T", "Result", "J", "V", "RM", "I", "JR", "B", "Rat"], "i": ["f", "ini", "zi", "m", "uri", "cli", "l", "chain", "ti", "s", "ip", "ci", "r", "ji", "gi", "v", " j", "ij", "ori", "index", "yi", "sim", "ind", "id", "di", "bi", "j", "pi", "qi", "ii", "batch", "n", "si", "iri", "xi", "I", "li", "spin", "x", "ui", "mi", "multi"]}}
{"code": "n, k = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nd = dict()\\nfor v in a:\\n    if v not in d:\\n        d[v] = 1\\n    else:\\n        d[v] += 1\\n\\nl = []\\nfor v in d.values():\\n    l.append(v)\\nl.sort()\\n\\nprint(sum(l[:len(l)-k]))", "target": "257", "substitutes": {"n": ["z", "nn", "m", "y", "t", "N", "i", "fn", "ns", "r", "mn", "c", "h", "q", "b", "sn", "g", "nb", "num", "nv", "p", "j", "nc", "o", "w", "x"], "k": ["dk", "kg", "K", "m", "kr", "kh", "ka", "ck", "kl", "ok", "i", "kk", "r", "ke", "c", "mk", "ki", "q", "kn", "ak", "ik", "num", "p", "km", "j", "kj", "ek", "kw", "w", "sk", "ko", "ku", "ks"], "a": ["f", "ba", "out", "m", "am", "ta", "another", "all", "t", "i", "A", "ca", "at", "la", "na", "c", "aw", "ea", "h", "b", "ak", "area", "va", "p", "alpha", "ao", "oa", "sa", "aa", "al", "ac", "ma", "w", "set", "ab", "aaa", "x", "ach", "an", "ack"], "d": ["f", "done", "ld", "ded", "m", "df", "bd", "t", "dev", "debug", "dict", "did", "s", "dd", "r", "dt", "div", "db", "sd", "c", "h", "nd", "b", "g", "mod", "ct", "ind", "D", "di", "pd", "de", "do", "p", "da", "dl", "j", "ds", "gd", "td", "dh", "ad", "o", "dec", "x", "data", "dat"], "v": ["f", "ve", "vo", "sv", "vv", "m", "qv", "lv", "t", "y", "ed", "i", "r", "ver", "en", "value", "h", "q", "b", "cv", "g", "val", "tv", "iv", "id", "version", "rev", "nv", "vs", "p", "vd", "vector", "vi", "ov", "j", "e", "av", "var", "vt", "vr", "uv", "V", "u", "w", "o", "x", "ev", "vc", "nov", "vert"], "l": ["fl", "ol", "out", "ls", "ld", "el", "le", "m", "bl", "all", "t", "lv", "lis", "gs", "kl", "s", "i", "len", "r", "la", "lb", "sl", "ln", "like", "h", "b", "lc", "g", "lo", "ml", "dl", "p", "L", "lp", "pl", "hl", "lr", "o", "ell", "li", "ql", "left", "log", "dL", "nl", "list", "rl", "lists", "ll"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\nimport sys\\nimport os\\nimport math\\n\\ndef distance(v0, v1, p):\\n    n = len(v0)\\n    s = 0\\n    for i in range(n):\\n        diff = abs(v0[i] - v1[i])\\n        s += diff ** p\\n    return s ** (1/p)\\n\\ndef chebyshev(v0, v1):\\n    n = len(v0)\\n    ret = 0\\n    for i in range(n):\\n        diff = abs(v0[i] - v1[i])\\n        if diff > ret:\\n            ret = diff\\n    return ret\\n\\nn = int(input())\\nv0 = list(map(float, input().split()))\\nv1 = list(map(float, input().split()))\\n\\nprint(distance(v0, v1, 1))\\nprint(distance(v0, v1, 2))\\nprint(distance(v0, v1, 3))\\nprint(chebyshev(v0, v1))", "target": "325", "substitutes": {}}
{"code": "from collections import deque\\ndef MI(): return map(int, input().split())\\nN,Q=MI()\\ngraph=[[] for i in range(N)]\\nPoint=[0]*N\\nfor i in range(N-1):\\n  a,b=MI()\\n  graph[a-1].append(b-1)\\n  graph[b-1].append(a-1)\\nfor i in range(Q):\\n  p,x=MI()\\n  Point[p-1]+=x\\nque=deque([])\\nque.append(0)\\ncheck=[0]*N\\nwhile que:\\n  v=que.pop()\\n  check[v]=1\\n  for u in graph[v]:\\n    if check[u]!=1:\\n      #continue\\n      Point[u]+=Point[v]\\n      que.append(u)\\nprint(*Point)", "target": "644", "substitutes": {"N": ["Num", "K", "NE", "C", "X", "AN", "F", "R", "G", "CNN", "Ni", "NB", "NI", "NG", "M", "NR", "A", "CN", "Na", "U", "NA", "Size", "S", "ND", "O", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "No", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NO", "NN", "Network", "NH"], "Q": ["Y", "QU", "K", "CH", "MQ", "C", "X", "F", "R", "G", "NB", "Query", "M", "A", "q", "S", "O", "D", "NS", "L", "QB", "P", "Queue", "T", "J", "Z", "V", "I", "B", "Qu", "UE", "Que", "IQ"], "graph": ["map", " graphs", "Graph", " Graph", "edge", "grid", "node", "draw", "order", "G", "handle", "domain", "dict", "point", "adj", "en", "raph", "gr", "series", "index", "group", "g", "tree", "pattern", "config", "path", "image", "man", "network", "gd", "int", "plot", "subject", "collection", "layout", "connected", "n", "model", "connection", "set", "igraph", "ograph", "Network", "gen", "connect", "pg"], "i": ["ini", "ei", "zi", "ir", "iy", "ti", "ip", "ci", "il", "ati", "gi", "ij", "ki", "yi", "ind", "id", "di", "bi", "pi", "fi", "e", "ai", "it", "ii", "xi", "iri", "si", "ic", "li", "ia", "I", "iti", "iu", "im", "irin"], "Point": ["Graph", "Data", "Points", "X", "Line", "Pos", "Check", "Index", "point", "Edge", "Connection", "Connect", "Type", "Offset", "Count", "Position", "Path", "Array", "Control", "Node", "Key", "Address", "Out", "At", "Base", "Chain", "P", "Value", "Entry", "Result", "Block", "Pool", "Grid", "Group", "Vector", "Ax", "Port", "Set"], "a": ["ba", "m", "ae", "be", "sta", "ga", "au", "A", "r", "ca", "la", "at", "na", "c", "ea", "g", "go", "va", "br", "j", "app", "oa", "e", "sa", "aa", "aj", "n", "ac", "o", "ia", "ab", "aaa", "ar", "ach", "an"], "b": ["z", "f", "rb", "ba", "m", "be", "l", "y", "t", "bc", "bp", "s", "r", "fb", "c", "h", "q", "g", "nb", "d", "bi", "br", "j", "e", "n", "o", "bs", "B", "ab", "bb", "eb"], "p": ["ps", "pe", "f", "per", "pt", "pr", "m", "ap", "par", "y", "t", "bp", "pp", "ip", "jp", "tp", "pa", "c", "q", "g", "d", "j", "pi", "cp", "pl", "port", "P", "pc", "n", "o", "part", "pro"], "x": ["z", "f", "m", "xp", "X", "ux", "xy", "l", "y", "t", "ix", "xs", "xa", "ax", "xx", "point", "k", "xt", "c", "h", "q", "g", "pair", "fx", "rx", "xc", "e", "ox", "xe", "xi", "n", "w", "tx"], "que": ["ued", " queue", "ck", "close", "quote", "co", "empty", "q", "onge", "we", "ctx", "eq", "vent", "cur", " buff", "cle", "buf", "com", "Queue", "ob", "aque", "set", " fe", "iq", "ext", "online", "pop", " che", "seen", " cloak", "buffer", "ue", "xt", "ket", "uxe", " fut", "queue", "de", "exp", " done", "bo", "quit", "me", "Que", " ge", "done", "con", "den", "en", "dq", "te", "zero", " shed", "e", "xe", "prom", "obs", "gone", "rent", "qu", "ve", "ques", "vel", "cond", "seq", "stack", " clen", "animate", "lo", "tube", " seq", "lex", " qu", "checked", "ru"], "check": ["wait", "checks", "look", "sync", "load", "only", "comment", "score", "Check", "ck", "close", "info", "control", "step", "ok", "switch", "rc", "cb", "ch", "status", "lock", "index", "see", "loop", "flag", "mod", "code", "test", "work", "num", "cont", "call", "read", "process", "valid", "cmp", "const", "run", "block", "CHECK", "checked", "set", "no", "update", "link"], "v": ["f", "ve", "sv", "vv", "m", "qv", "y", "lv", "ver", "vp", "c", "h", "q", "g", "tv", "vs", "nv", "va", "vm", "vi", "ov", "j", "e", "av", "vt", "vr", "n", "V", "o", "uv", "ev", "vc"], "u": ["uid", "mu", "tu", "f", "pu", "ud", "yu", "you", "y", "su", "au", "k", "ue", "gu", "ul", "c", "lu", "U", "q", "nu", "eu", "ut", "ou", "bu", "uc", "ur", "uu", "uv", "ju", "cu", "o", "us", "hu", "ui", "um", "iu"]}}
{"code": "n, d = map(int,input().split())\\n\\ntotal = []\\nfor i in range(n):\\n    x = list(map(int,input().split()))\\n    total.append(x)\\n\\nans = 0\\nfor i in range(n):\\n    for j in range(i+1,n):\\n        temp = 0\\n        for y,z in zip(range(d),range(d)):\\n            temp += (total[i][y] - total[j][z])**2\\n        if temp**0.5 == int(temp**0.5):\\n            ans += 1\\n\\nprint(ans)", "target": "182", "substitutes": {"n": ["f", "nn", "nia", "yn", "m", "a", "l", "nt", "t", "s", "N", "ns", "r", "mn", "v", "na", "c", "ln", "sn", "h", "b", "q", "nd", "g", "cn", "nu", "nb", "num", "p", "dn", "pi", "ne", "e", "np", "nan", "nc", "o", "w", "no"], "d": ["m", "t", "dd", "dim", "r", "dt", "v", "sd", "c", "dq", "h", "q", "b", "nd", "g", "D", "di", "dm", "pd", "du", "p", "do", "da", "dn", "dir", "ds", "e", "dom", "dc", "dh", "w", "dr", "data", "dat"], "total": ["details", "done", "stats", "successful", " summed", "sum", "tmp", "pie", "gross", "Total", "percent", "basic", "you", "full", "t", "nt", "all", "this", "private", "shared", "note", "seen", "final", "meta", "eta", "created", "public", "otal", "now", "database", "joined", "tar", "ot", "reported", "human", "complete", "num", "less", "bare", "zero", "required", "quant", "treated", "current", "bo", "server", "template", "available", "void", "table", "running", "summary", "checked", "no", "list", "primary", "multi", " totals", "general", "huge"], "i": ["io", "ini", "ei", "ri", "zi", "m", "ir", "l", "ix", "iy", "ti", "ip", "ci", "k", "ji", "at", "v", "gi", "ij", "hi", "ki", "yi", "ie", "ind", "id", "asi", "ik", "ih", "p", "bi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "ic", "o", "li", "I", "ia", "iti", "mi", "iu", "im"], "x": ["f", "xes", "yx", "xp", "X", "xy", "l", "ix", "xs", "xa", "ax", "xx", "xxxxxxxx", "news", "v", "xml", "check", "xt", "dx", "wx", "mx", "ex", "fx", "rx", "xxx", "xc", "ox", "xxxx", "int", "xi", "px", "lat", "xf", "tx"], "ans": ["ens", "comments", "ls", "aned", "AN", "ones", "cs", "rs", "amps", "s", "ins", "anas", "ms", "aus", "ns", "outs", "ons", "ann", "ars", "acs", "aps", "arts", "ents", "ians", "ums", "rans", "posts", "ations", "yes", "vs", "ANS", "can", "leans", "uns", "ai", "offs", "ads", "ats", "anks", "an", "ks", "ants"], "j": ["obj", "jl", "ja", "l", "fr", "jp", "k", "ji", "v", "ij", "job", "q", "b", "ot", "je", "g", "h", "oj", "kj", "it", "jj", "J", "si", "o", "uj", "dj", "bj", "js", "jc"], "temp": ["type", "station", "emp", "fake", "min", "out", "level", "tmp", "pt", "sum", "capacity", "m", "ta", "tim", "cel", "max", "t", "adjusted", "result", "heat", "output", "v", "now", "status", "tar", "wa", "weather", "condition", "index", "c", "tem", "mod", "adapt", "Temperature", "mp", "test", "mem", "cap", "cont", "power", "strength", "null", "pi", "cert", "deg", "Temp", "int", "current", "perature", "vt", "txt", "tr", "tc", "cell", "w", "unt", "mm", "ts", "mint", "hum", "water"], "y": ["Y", "ym", "ey", "yl", "yn", "ay", "a", "xy", "zy", "py", "iy", "oy", "yy", "ch", "ty", "yt", "v", "gy", "b", "yi", "wy", "ny", "hy", "fy", "ry", "uy", "ye", "yr", "cy", "vy", "o", "yd", "ly"], "z": ["sys", "yz", "ld", "oz", "zi", "zip", "zy", "iz", "uz", "ed", "os", "at", "wx", "az", "cz", "zh", "q", "ot", "gz", "ze", "tz", "zer", "te", "zen", "zone", "nz", "ez", "Z", "zz", "zo", "ll", "st"]}}
{"code": "s = input()\\nn = len(s)\\n\\nans = 0\\nif s[1:] == '9' * (n - 1):\\n  ans = int(s[0]) + 9 * (n - 1)\\nelif n != 1:\\n  ans = int(s[0]) + 9 * (n - 1) - 1\\nelse:\\n  ans = int(s[0])\\n\\nprint(ans)\\n", "target": "2", "substitutes": {"s": ["f", "ps", "sts", "stats", "str", "sv", "ws", "ls", "m", "fs", "a", "cs", "rs", "t", "l", "gs", "xs", "ms", "ins", "i", "os", "ns", "sp", "sl", "c", "hs", "h", "q", "b", "gets", "S", "vs", "eps", "p", "ss", "ds", "parts", "sa", "sb", "its", "ims", "bis", "ses", "abs", "bs", "sq", "tes", "ats", "x", "ts", "qs", "js"], "n": ["z", "nn", "names", "m", "l", "all", "nt", "t", "name", "number", "note", "nr", "N", "i", "len", "ns", "mn", "en", "r", "k", "fn", "v", "na", "c", "ln", "sn", "q", "an", "cn", "nu", "ct", "nb", "d", "num", "p", "dn", "j", "network", "ne", "net", "gn", "np", "nan", "nc", "w", "nl", "non", "x", "norm", "ll"], "ans": ["ens", "wan", "cas", "sum", "aned", "mas", "vers", "AN", "ran", "ean", "pan", "rs", "cs", "cons", "amps", "gs", "anned", "iann", "ins", "anas", "ms", "aus", "ns", "os", "ars", "ann", "ano", " Ans", "acs", "aos", "aces", "arts", "na", "rans", "eds", "said", " means", "san", "ANS", "can", "uns", "ai", "nas", "offs", "anes", "nan", "mean", "ams", "ads", "mos", "ras", "asms", "ats", "ros", "ana", "an", "ks", "ants", "olds", "scan", "lan"]}}
{"code": "s = str(input())\\nfor i in range(len(s)):\\n    s=s[:-2]\\n    if s[:len(s)//2] ==s[len(s)//2:]:\\n        print(len(s))\\n        break", "target": "696", "substitutes": {"s": ["f", "ps", "sts", "str", "stats", "sv", "ws", "ls", "des", "m", "a", "sql", "l", "rs", "t", "cs", "gs", "se", "ins", "ns", "r", "sw", "input", "v", "sp", "strings", "sl", "c", "hs", "es", "gins", "h", "q", "b", "g", "S", "string", "eps", "p", "ss", "less", "ds", "j", "parts", "sb", "ims", "bis", "n", "abs", "bs", "sq", "w", "tes", "als", "st", "ts", "qs", "js"], "i": ["f", "\u00ed", "a", "y", "ite", "iy", "k", " j", "ij", "c", "yi", "ind", "id", " ii", "j", "it", "ii", "n", "I", "x", "im"]}}
{"code": "S = str(input())\\nN = len(S)\\nD = [0,0] #B,W\\nans = 0; prev = S[0]\\nfor i in range(N):\\n  if S[i] == \"B\":\\n    D[0] += 1\\n  else:\\n    D[1] += 1\\n  if i >= 1:\\n    if S[i] == prev:\\n      continue\\n    else:\\n      ans += 1\\n      prev = S[i]\\nif D[0] == 0: #\u3059\u3079\u3066W\\n  print(0); exit()\\nelif D[1] == 0:\\n  print(0); exit()\\nprint(ans)\\n", "target": "655", "substitutes": {"S": ["Y", "SI", "H", "C", "X", "SS", "F", "R", "G", "s", "M", "A", "ST", "E", "O", "DS", "NS", "STR", "SU", "L", "SP", "P", "Q", "SH", "T", "SA", "J", "Z", "V", "I", "B"], "N": ["K", "H", "C", "F", "R", "G", "W", "Ni", "M", "NR", "E", "O", "ND", "NS", "L", "P", "Q", "T", "J", "n", "Z", "V", "I", "B", "NC", "NN"], "D": ["DL", "PD", "H", "C", "F", "R", "G", "W", "DF", "DD", "M", "Ds", "E", "ND", "O", "DS", "d", "L", "P", "Q", "DP", "T", "DM", "Z", "V", "I", "B", "DI"]}}
{"code": "s = list(map(int, input().split()))\\nfor i in range(1,s[0]+1):\\n    a=i*(i+1)/2\\n    if a>=s[0]:\\n        print(i)\\n        break", "target": "350", "substitutes": {"s": ["ps", "stats", "sts", "ws", "sv", "ls", "m", "fs", "sis", "cs", "se", "rs", "t", "gs", "su", "ms", "ins", "ns", "sp", "hs", "c", "es", "gins", "q", "b", "g", "ies", "S", "p", "ss", "less", "ds", "e", "sb", "ses", "bis", "n", "bs", "sq", "tes", "ats", "als", "ts", "qs", "js"], "i": ["z", "io", "ini", "zi", "m", "l", "ix", "ti", "info", "ip", "ci", "v", "gi", "ij", "c", "hi", "index", "oi", "q", "b", "phi", "ind", "id", "di", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "iri", "li", "u", "I", "ia", "x", "mi", "iu", "im"], "a": ["apa", "ta", "t", "sta", "au", "ga", "xa", "A", "ca", "at", "la", "pa", "na", "c", "ea", "an", "b", "ami", "area", "p", "alpha", "da", "ao", "oa", "ai", "sa", "aa", "ac", "n", "ma", "ab", "aaa", "ana", "am"]}}
{"code": "n = int(input())\\npoints = list(map(int, input().split()))\\n\\nsum = 0\\nfor i in points:\\n  sum += i\\n\\nmean = sum/len(points)\\nif mean%2 != 0:\\n    mean = int(round(mean,0))\\n\\nans = 0\\nfor i in points:\\n  ans += (i - mean)**2\\n\\nprint(ans)", "target": "46", "substitutes": {"n": ["z", "f", "names", "m", "l", "nt", "t", "nr", "s", "N", "ns", "mn", "k", "v", "na", "sn", "b", "nb", "num", "d", "size", "p", "j", "np", "nc", "x", "norm", "count"], "points": ["ps", "objects", "users", "values", "groups", "lines", "checks", "plays", "devices", "pt", "times", "names", "params", "views", "Points", "pins", "windows", "pages", "amps", "xs", "pos", "steps", "gs", "s", "ports", "point", "ns", "days", "assets", "cells", "strings", "aps", "arts", "words", "bytes", "images", "posts", "docs", "shots", "changes", "pointers", "ids", "reports", "works", "p", "ds", "parts", "args", "results", "ints", "plugins", "actions", "dates", "workers", "products", "items", "years", "keys", "games", "pps", "vals", "ts", "jobs", "data"], "sum": ["add", "max", "med", "out", " summed", "oss", "se", "all", "Sum", "su", "ms", " sums", "prof", "mass", "ums", "index", "share", "temp", "sim", "num", "mem", "size", "cos", "sam", "zero", "total", "vol", "sa", "uss", "average", "si", "ma", "cum", "summary", "set", "us", "sat", "um", "success", "hash", "an", "hist", "count"], "i": ["z", "f", "mu", "ei", "ini", "ri", "zi", "\u00ed", "cli", "m", "iii", "a", "l", "y", "t", "ti", "s", "ip", "ci", "point", "ili", "ji", "ati", "gi", "v", "adi", "ij", "c", "hi", "oi", "ki", "phi", "yi", "eni", "ind", "di", "ik", "d", "p", "bi", "j", "pi", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "ma", "li", "I", "u", "iti", "mi", "iu", "im", "ui"], "mean": ["mu", "han", "min", "med", "normal", "max", "gate", "mc", "m", "line", "std", "ean", "score", "se", "dev", "sample", "ms", "meta", "density", "mn", "age", "Avg", "root", "na", "mass", "index", "mask", "scale", "share", "lo", " means", "tan", "default", "go", "cos", "mem", "size", "can", "man", "volume", "pi", " avg", "mt", "total", "zero", "av", " average", "main", "average", "mark", "weight", "cum", "ma", "summary", "sin", "grade", "me", "um", "cast", "head", "mi", "an", "md"], "ans": ["ens", "stats", "groups", "ls", "views", "mas", "ones", "oss", "cs", "amps", "gs", "ms", "anas", "ins", "aus", "ns", "outs", "mn", "ann", "os", "aos", "ians", "ums", "arms", "ands", "eds", "grades", " means", "vs", "ANS", "ots", "uns", "offs", "anes", "actions", "ams", "ads", "ras", "ates", "ats", "an", "ks", "ants", "olds"]}}
{"code": "n = int(input())\\nA = list(map(int, input().split()))\\nA2 = A[:]\\nRAW = A[:]\\n\\n# +-\u306b\u3059\u308b\u3068\u304d\\nsu = 0\\nfor i, a in enumerate(A):\\n    su += a\\n    if i % 2 == 0:\\n        if su <= 0:\\n            # a[i] \u3092\u5897\u3084\u3059\\n            t = (-su + 1)\\n            A[i] += t\\n            su += t\\n    else:\\n        if su >= 0:\\n            # a[i] \u3092\u3078\u3089\u3059\\n            t = (su + 1)\\n            A[i] -= t\\n            su -= t\\n\\n# -+\u306b\u3059\u308b\u3068\u304d\\nsu = 0\\nfor i, a in enumerate(A2):\\n    su += a\\n    t = 0\\n    if i % 2 ==0:\\n        if su >= 0:\\n            # a[i]\u3092\u3078\u3089\u3059\\n            t = (su + 1)\\n            A2[i] -= t\\n            su -= t\\n    else:\\n        if su <= 0:\\n            # a[i]\u3092\u3075\u3084\u3059\\n            t = (-su + 1)\\n            A2[i] += t\\n            su += t\\n# print(A)\\n# print(A2)\\n\\nans1 = sum([abs(a-b) for a,b in zip(A, RAW)])\\nans2 = sum([abs(a-b) for a,b in zip(A2, RAW)])\\nprint(min(ans1, ans2))", "target": "178", "substitutes": {"n": ["z", "f", "nn", "m", "l", "t", "name", "nr", "s", "N", "i", "ns", "r", "k", "na", "c", "sn", "q", "b", "h", "nb", "num", "d", "p", "j", "e", "nc", "o", "x"], "A": ["Y", "K", "AA", "H", "C", "X", "a", "F", "R", "Alice", "G", "N", "M", "CA", "There", "JA", "Av", "NA", "S", "These", "E", "As", "D", "Ag", "Ah", "alpha", "L", "AF", "GA", "An", "At", "P", "This", "AH", "T", "AB", "AP", "V", "I", "B", "Alpha", "SA"], "A2": ["B1", "N3", " A3", "B3", "B2", "N1", "N2", "A1", " A1", "A3"], "RAW": ["abc", "AA", "ave", "AC", "F", "Ni", "W", "AV", "final", "BA", "AL", "EA", "Pi", "DX", "Va", "alpha", "AF", "GG", "III", "isa", "Q", "beta", "aa", "AE", "AS", "Z", "pha", "Alpha", "Li", "SA"]}}
{"code": "a=[list(map(int,input().split())) for _ in [0]*3]\\nn=int(input())\\nb=[int(input()) for _ in range(n)]\\n\\nimport numpy as np\\n\\nfor i in range(3):\\n  a[i]=[1 if x in b else 0 for x in a[i]]   \\n\\ns_1=max(np.sum(a,axis=0))\\ns_2=max(np.sum(a,axis=1))\\ns_3=a[0][0]+a[1][1]+a[2][2]\\ns_4=a[0][2]+a[1][1]+a[2][0]\\n\\nif max(s_1,s_2,s_3,s_4)==3:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "464", "substitutes": {"a": ["ba", "add", "ax", "input", "v", "aos", "h", "area", "da", "ao", "parts", "ai", "ia", "ab", "eas", "z", "f", "obj", "apa", "m", "att", "t", "result", "history", "na", "mod", "changes", "aa", "abs", "o", "am", "data", "ack", "abc", "ae", "l", "ga", "ed", "A", "r", "at", "c", "ea", "go", "p", "alpha", "app", "e", "sa", "ac", "ma", "w", "aaa", "aff", "array", "ap", "all", "y", "sta", "au", "s", "ca", "es", "aux", "d", "window", "oa", "act", "it", "an", "base"], "_": [" name", " int", "name", "ix", " m", " which", " j", " __", " p", " t", "val", " time", " val", "j", "ox", " z", " you", " the", " all", "I", " long", " std", " row", " g", " no"], "n": ["nn", "nia", "m", "ni", "l", "y", "nt", "t", "nr", "N", "ns", "r", "k", "v", "na", "c", "sn", "an", "nd", "nu", "nb", "num", "d", "p", "j", "ne", "it", "nor", "nc", "o", "no"], "b": ["rb", "ba", "ib", "m", "mb", "another", "be", "l", "y", "bc", "s", "by", "cb", "r", "db", "v", "c", "h", "nb", "d", "p", "bi", "j", "e", "sb", "gb", "ob", "bs", "w", "B", "ab", "bb", "bar", "base", "eb"], "i": ["ini", "zi", "m", "l", "y", "t", "ix", "iy", "ti", "ip", "ci", "r", "k", "v", " j", "ij", "c", "index", "yi", "ind", "id", " ii", "di", "p", "j", "pi", "ai", "it", "ii", "xi", "iri", "si", "ic", "o", "li", "I", "mi", "im"], "x": ["io", "xes", "yx", "X", "hex", "ux", "xy", "y", "t", "ix", "xa", "ip", "ci", "ax", "xx", "check", "xt", "co", "index", "mx", "ex", "id", "rx", "xc", "xxxx", "mix", "xi", "ic", "px", "on", "xf", "tx", "inx", "qu"], "s_1": ["sld1", "slda", "s_01", " s_a", "sld6", "s_a", " s_6", " s_61", "s_6", " s_7", "s__01", "sld01", "s_61", " s_01", "s_7", "s__6", "s__a", "s__1"], "s_2": [" s_02", "s2256", "qs_4", "qs_256", "s_20", "s__4", "s22", "qs_3", "s_02", "s24", "s__20", "s__2", "s__02", "s23", "s_256", " s_20", "qs_2"], "s_3": ["ss63", "spl8", "s_5", "s_third", "s_8", "ssthird", "ss50", "s_63", "s25", " s_8", "s_163", "s_50", "is_63", "sJ3", "s23", "spl3", "is_third", "s2163", "sJthird", " s_163", "is_50", "s28", "spl163", "sJ50", "sJ63", "ss3", "spl5", "is_3", " s_5"], "s_4": ["s_464", "gs_256", "s_04", "s_5", "s_fourth", "ssfourth", "sJ4", "gss256", "gs_fourth", "gs_464", "ss464", "gssfourth", "sJ464", "s_34", "ss4", "gss464", "gs_4", "gss4", "sJ256", " s_34", " s_04", "s_256", "sJfourth", "ss256", " s_5"]}}
{"code": "#!/usr/bin/env python3\\n\\nR, G, B, N = map(int, input().split())\\n\\nans = 0\\ncnt = 0\\ncnt2 = 0\\nfor i in range(N+1):\\n    cnt = R * i\\n    for j in range(N+1):\\n        cnt2 = cnt + G * j\\n        if cnt2 == N:\\n            ans += 1\\n            continue\\n        if cnt2 > N:\\n            continue\\n        else:\\n            nokori = N - cnt2\\n            if nokori % B == 0:\\n                ans += 1\\nprint(ans)\\n", "target": "315", "substitutes": {}}
{"code": "import collections\\n\\nN = int(input())\\nS_list = []\\nfor n in range(N):\\n  S_list.append(input())\\n\\nc = collections.Counter(S_list)\\nmax_list = []\\n_max_value = 0\\nfor idx, value in enumerate(c.most_common()):\\n  if idx == 0:\\n    max_list.append(value[0])\\n    _max = value[1]\\n    continue\\n  if _max == value[1]:\\n    max_list.append(value[0])\\n  else:\\n    break\\n\\nfor answer in sorted(max_list):\\n  print(answer)", "target": "750", "substitutes": {"N": ["K", "NE", "C", "AN", "F", "G", "CNN", "NG", "NI", "NB", "M", "NV", "NR", "CN", "SIZE", "NP", "NA", "S", "ND", "NT", "D", "SN", "NS", "NM", "L", "TN", "P", "Q", "NPR", "GN", "Z", "V", "NUM", "NC", "Ns", "NO", "NN", "Network", "NH"], "S_list": ["SetsLIST", "SIXdetail", "SESSlist", "NS_LIST", "S_detail", "SIXLIST", "NS_listed", "SESSlisted", "SIM_stack", "S2lists", "SIMyslists", "SIM_list", "S64list", "S_set", "Syslists", "S64listed", "SListset", "S_stack", "SIM_set", "S2set", "SListlists", "S64LIST", "Sysstack", "Setslist", "SIMyslist", "S2list", "S64lists", "Sysset", "SListlist", "SListstack", "NS_list", "SIMysset", "SESSlists", "S_LIST", "SIXlist", "S_lists", "Setslists", "S_listed", "SIM_lists", "NS_lists", "Setsdetail", "NS_detail", "S2stack", "SIMysstack", "Syslist", "SIXlists", "SESSLIST"], "n": ["nn", "nt", "number", "nr", "i", "ns", "mn", "nm", "k", "r", "na", "ng", "sn", "q", "nd", "nu", "nb", "num", "ne", "nor", "np", "nan", "nc", "nl", "x"], "c": ["abc", "mc", "m", "C", "cr", "counter", "cs", "cf", "con", "cb", "rc", "ch", "v", "ctrl", "co", "cv", "lc", "gc", "cc", "ct", "cl", "ce", "cos", "cur", "col", "cp", "ec", "cd", "dc", "conf", "cache", "nc", "ac", "cu", "ic", "coll", "cm", "count"], "max_list": ["meanofflists", "maxfulstream", "max_test", "max_List", "maxfullists", "max_stream", "max_LIST", "max2table", "max_log", "maxoffList", "meanoffList", "uniqueedtest", " max_LIST", "uniqueedlog", "maxedset", "unique_log", "mean_list", "max64log", "maximum_LIST", "unique_list", "max_table", "maxoffstream", "maximum_table", "maximum_list", "maxenlist", "uniqueedset", "max_lists", "maxentable", "unique_test", "unique_set", "maxfullist", "maxedlog", "max64set", "maxofflists", "mean_stream", " max_status", "maximum_set", "max64test", "maxenset", " max_List", "uniqueedlist", "max2LIST", "max_status", "mean_lists", "maxfulList", "mean_List", "max2set", "max64list", "meanoffstream", "max2log", "max2list", "max_set", "max2test", "maxedlist", "meanofflist", "maxofflist", "maxedtest", "maxenLIST"], "_max_value": ["_max_val", "_max_values", "_max_max"], "idx": ["ridix", "ridx", "Idx", "Idy", "Idex", "iddx", "inddx", "ideix", "Iddx", "idxs", "index", " iddx", " idxs", "ideex", "indy", " idy", " idix", "indx", "idexs", "ridex", "idix", "ridxs", " idex", "idy", "idex"], "value": ["ve", "values", "function", "message", "python", "field", "vote", "node", "name", "number", "case", "row", "result", "step", "point", "key", "attribute", "ver", "ue", "byte", "v", "now", "hello", "vp", "index", "entry", "pair", "ge", "position", "see", "val", "property", "test", "default", "version", "password", "go", "flow", "variable", "word", "zone", "record", "get", "Value", "current", "block", "component", "instance", "element", "response", "VALUE", "vector", "data", "unit", "item", "description"], "_max": [" _min", " _res", "_min", "_ex", "_Max", "_res", " _Max", " _ex"], "answer": [" unanswered", "ence", "message", "onse", "array", "among", "vote", "inv", "rep", "order", "echo", "name", "wer", "result", "channel", "say", "adj", "reply", "answered", "ever", "query", "item", "remember", "term", "q", "option", "window", "word", "address", "aq", "energy", "review", "Answer", "swers", "ace", "response", "question", "vector", "entry", "description"]}}
{"code": "s = int(input())\\nh = s // 3600\\nm = s % 3600 // 60\\ns = s % 60\\nprint(h, ':', m, ':', s, sep='')\\n\\n", "target": "276", "substitutes": {"s": ["z", "f", "sts", "ps", "sv", "ls", "fs", "a", "sql", "l", "rs", "t", "cs", "gs", "ms", "os", "i", "ns", "r", "v", "sym", "sd", "hs", "c", "es", "q", "b", "gets", "g", "S", "string", "d", "p", "ss", "j", "ds", "seconds", "e", "sa", "sb", "ims", "n", "si", "o", "w", "sq", "tes", "ats", "ts", "js"], "h": ["f", "uh", "he", "H", " H", "kh", "hm", "ha", "t", "hours", "ow", "hz", "i", "bh", "r", "ho", "v", "hs", "hi", "HH", "b", "hour", "hd", "ih", "j", "oh", "ht", "hw", "it", "hl", "dh", "hr", "hh", "sh", "his"], "m": ["mu", "gm", "ym", "mc", "tm", "hm", "l", "t", "sm", "ms", "M", "i", "mn", "r", "v", "c", "mk", "mmm", "dm", "d", "p", "mun", "vm", "mt", "mo", "n", "fm", "mr", "w", "mm", "me", "mid", "mi", "im", "cm", "md"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\nns = lambda: readline().rstrip() # input string\\nni = lambda: int(readline().rstrip()) # input int\\nnm = lambda: map(int, readline().split()) # input multiple int \\nnl = lambda: list(map(int, readline().split())) # input multiple int to list\\n\\nn = ni()\\na = nl()\\n\\nsa = set(a)\\nl = len(sa)\\n\\nif l == 1:\\n    if a[0] == 0:\\n        print('Yes')\\n    else:\\n        print('No')\\nelif len(a) % 3 == 0:\\n    if l == 2:\\n        if a.count(0) == n // 3:\\n            print('Yes')\\n        else:\\n            print('No')\\n    elif l == 3:\\n        if all([a.count(ele) == n // 3 for ele in sa]):\\n            li = list(sa)\\n            if li[0] ^ li[1] ^ li[2] == 0:\\n                print('Yes')\\n            else:\\n                print('No')\\n        else:\\n            print('No')\\n    else:\\n        print('No')\\nelse:\\n    print('No')\\n", "target": "216", "substitutes": {"readline": ["READlin", "rdLine", " readpe", "READstring", "rdblock", "rdline", "Readline", "READline", "Readlin", "readLine", "readblock", "Readpe", "readsLine", "getline", "readstring", "readlin", "ReadLine", "rdlines", "READlines", "rxblock", "readpe", "readspe", "readsline", "Readstring", "rxlines", "readslines", " readLine", "rxline", " readblock", "getlin", "rxLine", "getlines", "Readlines", "getstring"], "readlines": ["listl", "Readl", " readlin", "Readline", "READline", "rewlists", "rewlines", "Readlin", "readlin", "READlines", "rewines", " readlists", "listlin", "listlines", "listline", "readlists", " readl", "readines", " readines", "rewline", "READlists", "READines", "readl", "Readlines"], "ns": [" name", " translate", "function", "names", " indent", "name", "s", " names", "fn", " sync", " functions", " fs", "NS", " map", "func", " ls", " namespace", " norm", " default", "n", "Ns", " n", " external", "pace"]}}
{"code": "a,b,c=map(int,input().split())\\nx=max(a,b,c)\\nprint(a+b+c-x)", "target": "298", "substitutes": {"a": ["f", "ba", "le", "ap", "am", "ae", "l", "ga", "af", "au", "ed", "i", "A", "r", "la", "at", "na", "ea", "da", "ao", "act", "oa", "aka", "e", "sa", "aq", "aa", "aj", "al", "ac", "ma", "ia", "ab", "eas", "aaa", "ar", "ach", "an", "aff"], "b": ["f", "sub", "rb", "ba", "ib", "erb", "bl", "mb", "be", "l", "y", "bc", "by", "i", "cb", "fb", "r", "v", "db", "g", "nb", "d", "bi", "br", "zb", "bf", "e", "sb", "gb", "bo", "bis", "ob", "ub", "bs", "u", "B", "ab", "bb", "eb"], "c": ["f", "mc", "C", "cr", "cs", "y", "bc", "cf", "sec", "rc", "cin", "cb", "ci", "ca", "v", "co", "lc", "g", "ct", "cc", "unc", "ce", "d", "cos", "cur", "can", "cp", "ec", "com", "xc", "e", "cd", "dc", "uc", "fc", "tc", "ac", "ic", "cy", "cu", "cm"], "x": ["z", "f", "max", "xp", "X", "ux", "xy", "l", "y", "xs", "xa", "ax", "xx", "xb", "i", "k", "v", "xt", "dx", "wx", "h", "ex", "fx", "d", "rx", "xc", "e", "ox", "xe", "xi", "w", "xf", "xd", "tx"]}}
{"code": "S = input()\\n\\nnum_0 = S.count('0')\\nnum_1 = S.count('1')\\n\\nprint(min(num_0, num_1)*2)", "target": "40", "substitutes": {"S": ["SER", "Sample", "BS", "SI", "H", "C", "SS", "X", "F", "R", "SL", "G", "JS", "LS", "SB", "s", "OS", "N", "M", "ASC", "SOURCE", "INS", "IS", "SR", "DS", "Source", "D", "US", "NS", "SU", "Is", "NEWS", "L", "SP", "P", "Q", "SH", "T", "SA", "SF", "Z", "VS", "V", "SE", "B", "CS", "GS", "HS"], "num_0": ["num_2", "numvaldefault", " num_good", "num_90", "nuval2", "nuval90", "nummm00", "nu_default", "nu_90", "num_00", "num_default", "nuvaldefault", "nummm1", " num_00", "numval0", "nu_0", "nuval0", "nummm0", "nummmgood", "numval90", "num_good", "nu_2", "numval2"], "num_1": ["num_81", "num641", "NUM_1", "num_100", "NUM_100", "num6481", "NUM_4", "num_4", "NUM_one", "num64one", " num_81", "num_one", " num_one"]}}
{"code": "n=int(input())\\nc=[int(input()) for _ in range(n)]\\nmod=10**9+7\\n\\ndp=[0]*(n+1)\\n\\ndp[0]=1\\nlast=[-1]*(2*10**5+1)\\nlast[c[0]]=0\\n\\nfor i in range(1,n):\\n    if c[i]==c[i-1] or last[c[i]]==-1:\\n        dp[i]=dp[i-1]\\n    else:\\n        dp[i]=(dp[i-1]+dp[last[c[i]]])%mod\\n    last[c[i]]=i\\n\\nprint(dp[n-1])\\n", "target": "708", "substitutes": {"n": ["z", "nn", "m", "a", "l", "y", "nt", "t", "number", "s", "N", "len", "ns", "mn", "r", "k", "nm", "fn", "v", "na", "ln", "sn", "q", "nd", "h", "g", "cn", "nb", "num", "d", "size", "p", "dn", "count", "j", "ne", "net", "gn", "np", "nan", "nc", "o", "w", "no", "x", "on", "ll"], "c": ["f", "abc", "sc", "mc", "m", "C", "cr", "a", "cs", "l", "chain", "t", "cf", "s", "con", "etc", "ci", "rc", "r", "ca", "ch", "cb", "k", "v", "co", "h", "cv", "b", "lc", "g", "cn", "cc", "ct", "unc", "csv", "config", "d", "ce", "p", "col", "cp", "e", "cats", "cd", "dc", "fc", "pc", "nc", "ac", "ic", "conf", "cache", "tc", "cu", "vc", "cm", "count"], "_": ["m", "ix", " m", " j", " __", " p", "g", "ate", "val", "j", "I", "x", " g"], "mod": ["z", " MOD", "sub", "add", "max", "base", "sum", "m", "dig", "cond", "ran", "spec", "debug", " m", "modified", "module", "ver", "div", "un", "tag", "post", "scale", "val", " Mod", "mult", "dir", "com", "form", "Mod", "ident", "mode", "od", "MOD", "var", "tr", "ac", "log", "dec", "mag", "set", "mods", "fun", "pro"], "dp": ["ps", "tmp", "pr", "deb", "adr", "df", "pkg", "bp", "wd", "dos", "pb", "gp", "dd", "pp", "ip", "ns", "jp", "dt", "tp", "div", "resp", "db", "pipe", "vp", "dq", "pm", "fp", "di", "dm", "pd", "d", "du", "dl", "p", "dep", "ds", "cp", "lp", "td", "cd", "dc", "np", "DP", "dh", "bps", "delay", "grad", "dr", "wp", "pn"], "last": ["rest", "max", "ld", "out", "stat", "sum", "desc", "range", "est", "Last", "l", "se", "old", "nt", "all", "second", "close", "parent", "dict", "full", "this", "final", "dist", "latest", "query", "state", "index", "slave", "extra", "nd", "group", "entry", "used", "stable", "prev", "config", "d", "size", "next", "p", "cur", "tail", "sort", "end", "same", "local", "total", "self", "np", "right", "worst", "cache", "loc", "first", "most", "left", "reverse", "list", "cast", "scope", "cost", "static", "base", "count", "new", "st", "needed"], "i": ["z", "io", "ini", "ei", "ri", "zi", "m", "uri", "a", "l", "y", "t", "ix", "ti", "s", "ip", "ci", "\u0438", "k", "ji", "im", "v", "gi", "ij", "hi", "index", "h", "q", "b", "phi", "ind", "id", "asi", "di", "ik", "d", "iat", "p", "bi", "j", "pi", "fi", "e", "ai", "it", "int", "ii", "iri", "si", "ic", "o", "I", "li", "xi", "iter", "batch", "u", "me", "x", "ui", "mi", "iu", "multi"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**7)\\n\\nN,Q=map(int,input().split())\\npar=[i for i in range(N+1)]\\ndef find(x):\\n    if par[x] ==x:\\n        return x\\n    else:\\n        par[x] = find(par[x])\\n        return par[x]\\ndef same(x,y):\\n    return find(x) == find(y)\\ndef unite(x,y):\\n    x = find(x)\\n    y = find(y)\\n    if x == y:\\n        return 0\\n    par[x]=y\\nfor i in range(Q):\\n    a,b=map(int,input().split())\\n    unite(a,b)\\nans=dict()\\nfor i in par:\\n    tmp=find(i)\\n    if tmp in ans:\\n        ans[tmp]+=1\\n    else:\\n        ans[tmp]=1\\nprint(max(ans.values()))", "target": "602", "substitutes": {"N": ["Y", "Num", "H", "C", "X", "R", "Ni", "CNN", "NI", "M", "NR", "A", "NP", "NA", "S", "ND", "NT", "D", "NS", "NM", "P", "No", "NPR", "n", "V", "I", "B", "Ns", "NC", "NO", "NN", "NH"], "Q": ["Y", "QU", "K", "MQ", "C", "H", "X", "F", "R", "G", "W", "Query", "M", "A", "U", "q", "E", "D", "L", "QB", "P", "Queue", "T", "J", "Z", "V", "I", "B", "Qu", "IX", "UE", "Que", "IQ"], "par": ["pol", "ps", "sys", "pard", "per", "arr", "pr", "params", "cat", "prop", "rep", "pkg", "pos", "dict", "Par", "ars", "pp", "pas", "ax", "jp", "gr", "sp", "kar", "pa", "tar", "mk", "pal", "car", "prep", "pair", "mp", "pre", "p", "plan", "pat", "col", "pi", "pl", "cp", "pub", "trans", "com", "parse", "PAR", "var", "pri", "conf", "arp", "cop", "part", "rec", "rel", "arg", "dr", "req", "ar", "bar", "proc", "pro", "param"], "i": ["z", "f", "ini", "ei", "zi", "m", "xy", "l", "t", "iy", "ti", "key", "ip", "r", "k", "ci", "ji", "v", "gi", "ij", "c", "index", "oi", "ki", "q", "phi", "g", "yi", "ind", "id", "di", "ik", "d", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "n", "si", "ic", "o", "I", "li", "ia", "u", "mi", "iu", "im"], "x": ["z", "f", "edit", "yl", "el", "xes", "yx", "xp", "one", "X", "hex", "ux", "xy", "xd", "l", "ext", "t", "ix", "xs", "s", "xa", "ax", "xx", "key", "expr", "v", "xml", "xt", "dx", "wx", "c", "ick", "h", "q", "fixed", "mx", "foo", "ex", "fx", "any", "orig", "p", "exp", "rx", "j", "xxx", "pl", "xc", " xx", "e", "ox", "xe", "xxxx", "int", "lex", "xi", "n", "u", "left", "px", "w", "lat", "dr", "xf", "on", "item", "tx"], "y": ["Y", "z", "ym", "ey", "yl", "yn", "ay", "m", "my", "xy", "yu", "py", "t", "yer", "iy", "sy", "oy", "yy", "xx", "key", "ty", "yt", "v", "c", "gy", "ys", "ies", "yi", "ny", "yd", "fy", "p", "j", "ry", "ya", "uy", "ye", "yr", "n", "cy", "vy", "o", "yang", "hy", "sky", "ly"], "a": ["ba", "ae", "l", "au", "ax", "A", "r", "ca", "la", "at", "c", "ea", "an", "g", "p", "da", "j", "oa", "\u00e4", "e", "sa", "ai", "aa", "al", "art", "ac", "o", "n", "ma", "ab", "aaa", "ar", "am"], "b": ["z", "f", "rb", "ba", "m", "l", "t", "bc", "s", "cb", "r", "fb", "v", "db", "c", "h", "g", "d", "p", "bi", "j", "e", "bu", "sb", "n", "ob", "bs", "u", "B", "ab", "bb", "eb"], "ans": ["ps", "ens", "stats", "users", "anon", "ls", "aned", "ran", "cs", "rs", "amps", "xs", "s", "ms", "ins", "anas", "ars", "ns", "ons", "aus", "ann", "outs", " Ans", "aps", "news", "aos", "arts", "beans", "asks", "angs", "ums", "ys", "rans", "ops", "eds", "ands", "posts", "ians", " means", "ids", "vs", "ANS", "ds", "uns", "nas", "offs", "anes", "ams", "uls", "ads", "ras", "ats", "orts", "us", "eas", "vals", "anks", "an", "ks", "ants", "uploads"], "tmp": ["emp", "io", "ei", "nom", "obj", "tm", "m", "src", "pkg", "nt", "t", "tt", "name", "pos", "ti", "attr", "key", "err", "tp", "ji", "ptr", "yy", "timeout", "sp", "perm", "wx", "ij", "mk", "mut", "term", "oi", "phi", "ki", "mp", "temp", "nb", "ind", "test", " ii", "ctx", "di", "tn", "p", "j", "td", "cmp", "tf", "int", "np", "var", "txt", "ii", "vt", "tc", "uni", "si", "instance", "cache", "mm", " ie", "rt", "iott"]}}
{"code": "import sys\\nfrom collections import deque\\n\\nN = int(input())\\nA = list(map(int, sys.stdin.readline().rsplit()))\\n\\nres = deque()\\nt = (N + 1) % 2\\n\\nfor i in range(N):\\n    if i % 2 == t:\\n        res.appendleft(A[i])\\n    else:\\n        res.append(A[i])\\n\\nprint(*res)\\n", "target": "601", "substitutes": {"N": ["H", "C", "AN", "R", "G", "CNN", "NG", "NI", "NB", "M", "NV", "NR", "CN", "NA", "S", "ND", "NT", "D", "SN", "NS", "FN", "NM", "L", "TN", "P", "Q", "T", "GN", "J", "n", "V", "I", "B", "NUM", "NC", "Ns", "NO", "NN", "Network", "NH"], "A": ["App", "AY", "Ass", "AA", "Ar", "C", "AC", "a", "Am", "Acc", "Abs", "What", "CA", "LA", "Att", "RAM", "JA", "NA", "As", "D", "All", "Array", "AT", "AF", "L", "Address", "GA", "WA", "An", "At", "P", "MA", "AM", "Map", "This", "AE", "Auth", "Rap", "AB", "AP", "V", "Answer", "Alpha", "B", "ACT", "SA"], "res": ["ress", "ps", "rest", "out", "pr", "reset", "creat", "rez", "red", "ret", "rs", "cons", "nt", "rus", "full", "result", "os", "fr", "pas", "r", "gr", "resp", "resh", "fresh", "we", "mont", "re", "rev", "crit", "exp", "clus", "usr", "pub", "results", "RES", "right", "rem", "pres", "ber", "rel", "reg", "Res", "list", "us", "req", "rt", "rek"], "t": ["type", "tu", "pt", "tm", "m", "ta", "tt", "nt", "tw", "ti", "r", "tp", "dt", "ty", "at", "k", "v", " T", "ot", "g", "ct", "test", "te", "p", "j", "total", "it", "wt", "tf", "T", "vt", "tc", "n", "ts", "mint", "rt", "st"], "i": ["f", "ini", "ri", "zi", "m", "y", "ix", "ti", "ip", "ci", "\u0438", "ji", "v", "gi", "ij", "hi", "oi", "ori", "ki", "q", "phi", "index", "yi", "di", "ik", "bi", "vi", "j", "pi", "qi", "ai", "it", "ii", "xi", "si", "n", "iri", "ic", "li", "I", "iter", "x", "ui", "mi", "iu", "multi", "ski"]}}
{"code": "import math\\nA, P = input().split()\\nA = int(A)\\nP = int(P)\\n\\nprint(math.floor((3*A+P)/2))", "target": "428", "substitutes": {"A": ["AY", "AR", "Data", "AI", "AA", "Ar", "H", "C", "Everyone", "X", "AC", "API", "Al", "IA", "Alice", "G", "AV", "ACC", "BA", "CA", "LA", "AL", "Bar", "Av", "NA", "S", "As", "AU", "HA", "Array", "All", "Ah", "AF", "L", "GA", "An", "At", "mA", "This", "AH", "And", "The", "AB", "AP", "Area", "One", "B", "ACT", "AST", "Ax", "SA"], "P": ["Progress", "PF", "GP", "PK", "PD", "IP", "C", "MP", "H", "PM", "PS", "Pod", "N", "M", "PA", "POS", "JP", "PU", "PO", "PC", "NP", "Client", "PL", "Pi", "S", "PR", "Py", "D", "PIN", "p", "WP", "TP", "SP", "PP", "Q", "Pro", "Pen", "T", "MAN", "DP", "AP", "V", "PN", "B", "LP", "Pain", "CP", "PUT", "Port", "PT", "BP"]}}
{"code": "import math, collections\\nn, a, b = map(int, input().split())\\nlist_v = [int(v) for v in input().split()]\\nlist_v.sort(reverse=True)\\nlist_ave = []\\nlist_num = []\\nfor i in range(a, b+1):\\n  temp_ave = sum(list_v[:i]) / len(list_v[:i])\\n  list_ave.append(temp_ave)\\n  list_num.append(i)\\nmax_ave = max(list_ave)\\nprint(max_ave)\\n\\nlist_target = [list_num[i] for i, v in enumerate(list_ave) if v == max_ave]\\ncount = collections.Counter(list_v)\\nsort_count = sorted(count.items(), reverse=True)\\nres = 0\\nfor one_num in list_target:\\n  r = one_num\\n  for o in sort_count:\\n    temp = r - o[1]\\n    if temp <= 0:\\n      res += math.factorial(o[1]) // (math.factorial(o[1]-r) * math.factorial(r))\\n      break\\n    else:\\n      r -= o[1]\\nprint(res)", "target": "345", "substitutes": {"n": ["l", "t", "name", "number", " names", "s", "N", "fn", " internal", "en", " fn", " ni", "ln", "ct", "num", " ns", " np", " numbers", "np", " nm", " sys", " N", " nat", "ize", " na"], "a": ["ba", "m", "am", "ta", "ae", "l", "t", "s", "A", "ca", "at", "la", "pa", "na", "c", "va", "p", "alpha", "da", "ao", "e", "ai", "sa", "aa", "aj", "al", "ac", "ma", "w", "ia", "ab", "x", "ar", "an", "aff"], "b": ["z", "f", "rb", "ba", "ib", "m", "be", "l", "y", "t", "bc", "cb", "k", "db", "c", "h", "bas", "g", "nb", "d", "p", "bi", "br", "j", "e", "bis", "bs", "w", "B", "ab", "bb", "eb"], "list_v": ["listededv", "list_i", "listpyave", " list_av", "displaylistv", "listmav", "listdbqv", "queuemvr", "queuemv", "list__sv", "LIST_sv", "list__n", "listdbve", "list_qv", "listedvar", "LIST_qv", "queue_n", "queuemn", "list__v", "listlistv", "queue_v", "listlistvs", "listdbave", "listdbsv", "listed_vv", "listmv", "display_v", "listpyqv", "displaylistsv", "list_var", "listmvr", "displaylistvs", "listed_var", "display_vs", "list_b", "listed_b", "listdbv", "listededvv", "LIST_v", "queue_av", "listed_v", "display_m", "list__m", "listpyv", "list_vr", "listedvv", "list__vs", "list_vv", "list__vr", "listedv", "listlistsv", "list_n", "displaylistm", "list_sv", " list_i", "list__av", "list_av", "listededvar", "list_m", "queue_vr", "listdbi", "listlistm", "listdbav", "list_ve", "queuemav", "listededb", "listmn", "list_vs", " list_ve", "LIST_ave", "display_sv", "listedb", "listpysv"], "v": ["f", "ve", "vo", "sv", "conv", "vv", "m", "ter", "qv", "l", "lv", "y", "ver", "ue", "k", "value", "vp", "c", "q", "vid", "g", "val", "tv", "iv", "version", "nv", "vd", "vs", "vector", "va", "vi", "j", "av", "vol", "var", "vt", "uv", "V", "u", "w", "x", "ev", "vc", "cv", "nov", "vert"], "list_ave": ["listlav", "list10num", "listableave", " list_alt", "lower_target", "set_ave", "lowerlaves", "list___ave", "list_alt", "listltarget", "set_au", "lowerlave", "lower_ave", "set_av", "list10ave", " list_aves", "group_ave", "list___aves", "list_aver", "lower_av", "list10aver", "group10num", "group_num", "listlave", "set_aves", "listlaves", "listablealt", "listableaves", "group_aver", "list_au", "list___alt", "group10aver", "lowerltarget", "list___num", "list_vae", "list_aves", "lowerlav", "list_av", "lower_aves", "group_vae", "group10vae", "group10ave", "list10vae", "listablenum"], "list_num": ["list64um", "list_mon", "list_ver", "listJen", "list_um", "list_orig", "List_orig", "list__um", "listenen", "list__num", " list_alph", "list64ver", "listJmon", "list_sum", "List_num", "list__alph", " list_mon", "listJnum", "List_en", "listenorig", "list64num", " list_ver", "listJorig", "list_alph", "list__ver", "list_en", "listennum", " list_sum", "list64alph", "listenmon", " list_um", "List_mon"], "i": ["io", "ini", "ri", "zi", "m", "uri", "l", "y", "t", "ix", "ti", "ip", "ci", "\u0438", "ji", "gi", "ij", "c", "ori", "index", "ki", "phi", "g", "yi", "ind", "id", "di", "num", "p", "bi", "j", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "iri", "ic", "li", "I", "u", "x", "ui", "mi", "im"], "temp_ave": ["Temp_slave", "temp_cal", "tempureslave", "ptrfulcal", "Temp_av", "ptr_cal", "ptrfulair", "ptr_grade", "temptgrade", "temp__cal", "ptr_air", "Temp_aver", "ptrfulgrade", "temptave", "tempureaver", "temp_aver", "temp_slave", "temp__ave", "tempfulave", "tempfulgrade", "tempureave", "temptair", "temp_av", "temp__grade", "Temp_ave", "temptcal", "ptrfulave", "tempfulcal", "temp_air", "temp_grade", "tempureav", "temp__air", "ptr_ave", "tempfulair"], "max_ave": [" max_save", "max___aver", "maxensave", "master___ave", "master_aved", "master___aver", "maxenaver", "master_ave", "max2average", "max_save", "max_ive", "max___ive", "max2ave", "max_aved", "master_aver", "max2aver", " max_average", "master_ive", "max_average", " max_aver", "maxenave", "master___ive", "max_aver", "master___aved", "max___aved", "maxenaves", "max___ave", "max2aves", "max_aves", " max_aves"], "list_target": ["listListtmp", "listListmatch", "listListtarget", "listListcount", "list_match", "listlistnum", "listlistcopy", "list_tmp", "listlistother", " list_other", "list_count", "listlisttarget", " list_match", "list_other", "list_copy", " list_copy", " list_count", " list_tmp"], "count": ["z", "ount", "stat", "found", "sum", "find", "counter", "order", "t", "nt", "cycle", "number", "amount", "info", "history", "length", "c", "index", "store", "h", "start", "group", "Count", "flag", "ct", "nb", "force", "num", "size", "p", "total", "last", "cache", "list", "success", "hash"], "sort_count": ["sort_order", " sortabletarget", "sort2count", " sort2num", "sortennum", "sort_target", "sortenacc", "sort2order", "sort_num", " sort_sum", "sortableorder", " sort_target", "sortablesum", "sortablenum", " sortablesum", "sort_acc", " sort2count", " sort2acc", " sort2order", "sort_sum", " sortablecount", "sortableacc", " sort_acc", " sort_num", "sort2acc", " sort_order", "sort2num", "sortenorder", " sortablenum", "sortencount", "sortablecount", "sortabletarget"], "res": ["ress", "rand", "ps", "rest", "arr", "out", "pr", "conv", "sum", "eff", "reset", "rez", "red", "ret", "rs", "cons", "pos", "result", "ms", "expr", "sol", "resp", "gr", "resh", "ther", "yes", "we", "val", "re", "mem", "crit", "progress", "stock", "vol", "results", "RES", "conf", "rem", "pres", "rel", "reg", "resolution", "Res", "req"], "one_num": ["other_num", "one_dim", "one_sum", "one_member", "oneJmember", "one_um", "other_digit", " one_sum", " one_n", "oneJdim", " one_um", "oneJdigit", "one_n", "oneJnum", "one_digit", "other_dim", "other_member"], "r": ["f", "rb", "pr", "m", "rr", "rg", "cr", "kr", "reset", "R", "l", "rs", "t", "ret", "nr", "result", "s", "attr", "rc", "k", "gr", "err", "c", "h", "q", "g", "re", "er", "rm", "d", "p", "j", "ro", "e", "lr", "right", "rank", "rd", "mr", "w", "u", "rec", "dr", "x", "rar", "ar", "rt"], "o": ["op", "f", "out", "obj", "iso", "off", "m", "l", "y", "t", "to", "s", "os", "ok", "oid", "ho", "co", "c", "h", "ot", "q", "fo", "g", "O", "oe", "er", "go", "p", "ao", "oj", "j", "oa", "ro", "ou", "mo", "e", "ox", "object", "it", "od", "so", "po", "bo", "onet", "ob", "oo", "u", "no", "oin", "auto"], "temp": ["ps", "partial", "emp", "fake", "diff", "nom", "tmp", "pt", "sum", "ta", "t", "ptr", "adj", "err", "EMP", "length", "condition", "term", "tem", "mod", "Temperature", "mp", "test", "pre", "there", "total", "deg", "Temp", "fac", "current", "tr", "tc", "rem", "w", "ts", "hum", "perature"]}}
{"code": "import math\\na = list(map(int, input().split()))\\nif sum(list(map(lambda x:x%2, a))) == 3:\\n    b = a.pop(a.index(max(a)))\\n    print(a[0]*a[1]*(math.ceil(b/2) - math.floor(b/2)))\\nelse:\\n    print(0)", "target": "333", "substitutes": {"a": ["z", "f", "ba", "arr", "array", "m", "am", "ae", "att", "l", "all", "t", "sta", "ga", "s", "au", "xa", "ed", "A", "ca", "r", "input", "la", "at", "v", "div", "na", "c", "es", "ea", "era", "area", "p", "aaaa", "alpha", "da", "ao", "app", "oa", "parts", "act", "e", "sa", "ata", "aq", "aa", "up", "abs", "ac", "n", "ma", "ia", "set", "ab", "eas", "aaa", "list", "x", "ar", "an", "auto"], "b": ["rb", "erb", "ib", "mb", "be", "l", "y", "big", "bc", "bp", "by", "bg", "bh", "fb", "cb", "db", "v", "bound", "bytes", "bas", "wb", "nb", "bi", "br", "sb", "gb", "bo", "bis", "ob", "bs", "B", "ab", "bb", "body", "bar", "base", "eb"]}}
{"code": "import random\\nimport time\\nimport copy\\n\\ndef down_score(d, c, last_d, score):\\n    sum = 0\\n    for i in range(26):\\n        sum = sum + c[i]*(d-last_d[i])\\n        \\n    return int(score - sum)\\n\\n\\ndef main():\\n    D = int(input())\\n\\n    c = list(map(int, input().split()))\\n\\n    s = [list(map(int, input().split())) for i in range(D)]\\n\\n    start = time.time()\\n    \\n    last_d = [0 for i in range(26)]\\n    ans = []    \\n    score1 = 0\\n    \\n    for i in range(D):\\n        max = 0\\n        idx = 0\\n        for j in range(26):\\n            if max < (s[i][j] + c[j] * (i-last_d[j])*(i-last_d[j]+1)/2) and c[j] != 0:\\n                max = s[i][j] + c[j] * (i-last_d[j])*(i-last_d[j]+1)/2\\n                idx = j\\n            elif max == (s[i][j] + c[j] * (i-last_d[j])*(i-last_d[j]+1)/2) and c[j] * (i-last_d[j])*(i-last_d[j]+1)/2 > c[idx]* (i-last_d[idx])*(i-last_d[idx]+1)/2 and c[j] != 0:\\n                idx = j\\n            \\n        last_d[idx] = i+1\\n        score1 += s[i][idx]\\n        score1 = down_score(i+1,c,last_d,score1)\\n        \\n        ans.append(idx)\\n        \\n    random.seed(10)\\n    while time.time() - start < 1.9:\\n        cp = ans.copy()\\n        last_d = [0 for i in range(26)]\\n        score2 = 0  \\n        \\n        idx1 = random.randint(0,25)\\n        idx2 = random.randint(0,25)\\n        if random.randint(0,1):\\n            d1 = random.randint(0,D-1) \\n            d2 = random.randint(0,D-1)\\n            if idx1 == idx2:\\n                continue\\n            if random.randint(0,1):\\n                ans[d1] = idx1\\n            else:\\n                ans[d1] = idx1\\n                ans[d2] = idx2\\n             \\n        #2\u5024\u5165\u308c\u66ff\u3048\\n        elif random.randint(0,1):           \\n            d1 = random.randint(0,D-15) \\n            d2 = random.randint(d1+1,d1+14)\\n            tmp1 = ans[d1]\\n            tmp2 = ans[d2]\\n            if random.randint(0,1):\\n                ans[d1] = tmp2\\n                ans[d2] = tmp1\\n            \\n        #3\u5024\u5165\u308c\u66ff\u3048          \\n        else:\\n            d1 = random.randint(0,D-15) \\n            d2 = random.randint(d1+1,d1+7)\\n            d3 = random.randint(d2+1,d2+7) \\n            tmp1 = ans[d1]\\n            tmp2 = ans[d2]\\n            tmp3 = ans[d3]\\n            if random.randint(0,1):\\n                ans[d1] = tmp2\\n                ans[d2] = tmp3\\n                ans[d3] = tmp1\\n            else:\\n                ans[d1] = tmp3\\n                ans[d2] = tmp1\\n                ans[d3] = tmp2\\n            \\n        for i in range(D):\\n            score2 += s[i][ans[i]]\\n            last_d[ans[i]] = i+1\\n            score2 = down_score(i+1, c, last_d, score2)\\n        \\n        if score1 > score2:\\n            ans = cp.copy()\\n        else:\\n            score1 = score2\\n    \\n    for i in range(D):\\n        print(ans[i]+1)  \\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "272", "substitutes": {"d": ["z", "f", "m", "l", "t", "dos", "dd", "r", "dt", "div", "v", "sd", "b", "g", "id", "di", "pd", "p", "do", "da", "ds", "end", "td", "e", "n", "ad", "u", "dr", "x", "dat"], "c": ["z", "f", "comments", "sc", "cod", "mc", "m", "C", "cr", "a", "cus", "cs", "l", "t", "chain", "cf", "con", "etc", "rc", "cin", "r", "cb", "ch", "ca", "ci", "v", "ctrl", "co", "cm", "b", "lc", "g", "gc", "csv", "cc", "ct", "unc", "lib", "cl", "ce", "cos", "p", "cur", "cont", "codes", "ec", "com", "args", "e", "cats", "cmp", "cd", "dc", "uc", "fc", "cache", "ac", "n", "conf", "cu", "u", "tc", "ic", "cv"], "last_d": [" last2j", "last___3", "parent4di", "last_w", " last_s", "last___p", "lastxD", " last_m", "parent_ds", "last3d", "last_dev", "last64s", "last_dates", "since_dd", "last43", "last0w", "last___D", "parent_di", "last____dict", "bootxdict", "parent_D", "last_dd", "bootxd", "last___ds", "last10d", "last____d", "last_i", "last_data", "last5D", "last2D", "last_p", " last_p", "boot_dict", " last_dict", "last10ds", "last0dict", "last9w", " last_j", "since_dt", "lastdevdd", "parent_db", "last64d", "last9ds", " last_did", "last3e", "lastxd", "lastxdict", "last3dev", "last_ad", "master_3", "las_d", "parent3d", "last0d", "master5ds", "last0i", " last2do", "last64di", "last____did", "last5di", "last5ds", "boot_nd", " last2d", "since_e", "last9ad", "last3D", "last0ds", "bootxnd", "last4di", "last4d", "last9dt", "parent3dates", "parent4d", "Last_di", "last_nd", "last9dev", "parent_dates", "last5d", "last___d", "last9d", "sincedeve", " last_g", "last_j", "lastdeve", "last3db", "last9dict", "sincedevdd", "master5d", "las_dev", "last2dates", " last_db", "last_g", " last_dt", "lastxdb", "sincedevd", "parent3db", "last_ds", "lastdevd", "last____di", "last_do", " last_c", "master5i", "last2do", "las_dt", "last_db", "boot_d", "last_e", "parent4ds", "sincedevdt", " last_ds", "last_s", "last3dt", "parent_d", "last64did", "last___di", "last2db", "last____nd", "last2d", "lastdevdt", "last_dt", "last_did", "last___c", "last2g", "las_ad", "last___db", "master53", " last_w", "parent3D", "last_c", "lastxnd", " last_D", "last3dates", "last03", "Last_ds", "last_3", "last10dt", "since_d", "master_i", "last5i", "last____s", "Last_d", " last_do", "Last_D", "last_dict", " last_di", "last_m", "last10m", "lastxdates", "last3dd", "master_d", "last2j", " last_data", "last53", "last2p", "last4ds", "last_D", "parent_3", "last_di", "last3ad", "parent43", " last2D", "master_ds"], "score": ["scroll", "core", " Score", "min", "sc", "report", "message", "loss", "cr", "y", "number", "note", "result", "Score", "err", "value", "status", "sd", "index", "scale", "test", "size", "strength", "ss", "scoring", "error", "float", "rank", "weight", "mean", "sche", "grade", "success", "ize", "count"], "sum": ["gam", "sys", "add", "med", "min", "out", "SI", "sc", "m", "all", "dev", "Sum", "se", "su", " Sum", "cal", "scale", "temp", "sim", "num", "mem", "cos", "zero", "total", "sa", "vol", "cmp", "mix", "mean", "weight", "si", "average", "cum", "star", "summary", "set", "us", "sat", "um", "sh", " SUM", "dot", "hash", "hist", "count"], "i": ["z", "io", "ei", "ini", "ri", "zi", "m", "cli", "ir", "l", "y", "t", "parent", "ix", "iy", "ti", "info", "ip", "ci", "il", "ji", "at", "ati", "gi", "v", "ij", "hi", "index", "oi", "ki", "ori", "phi", "h", "g", "ami", "ie", "ind", "id", "di", "ik", "api", "p", "bi", "multi", "pi", "e", "ai", "it", "int", "ii", "xi", "si", "n", "ic", "iri", "li", "I", "ia", "o", "x", "ui", "mi", "iu", "im", "iti"], "D": ["Y", "K", "Data", "DB", "C", "Dr", "R", "Do", "Done", "DD", "N", "M", "A", "Ds", "Length", "Len", "SIZE", "DA", "ID", "Size", "Count", "S", "DS", "Dir", "L", "Def", "JD", "P", "DM", "T", "DP", "J", "Z", "XX", "V", "I", "DE", "DC", "DI"], "s": ["ps", "stats", "sts", "sv", "ls", "sc", "m", "a", "sis", "cs", "rs", "t", "l", "gs", "y", "ins", "os", "ms", "ns", "r", "strings", "sp", "v", "h", "tests", "b", "g", "ies", "S", "p", "ss", "ds", "sets", "sb", "its", "sites", "ims", "ses", "n", "abs", "bs", "sq", "ats", "als", "st", "ts", "js"], "start": ["started", "offset", "top", " Start", "reset", "y", "t", "starting", "step", "root", "open", "now", "before", "birth", "pre", "p", "end", "get", "seed", "last", "it", "int", "current", "time", "art", "first", "set", "stop", "st", "Start", "boot", "base", "begin", "init"], "ans": ["ens", "lines", "ls", "names", "aned", "anc", "cs", "rs", "amps", "os", "anas", "ins", "aus", "ns", "outs", "ms", "ann", "ons", "aps", "es", "ians", "ums", "ays", "ands", "eds", "ations", "yes", "ids", "vs", "ANS", "works", "ss", "ds", "sets", "uns", "nas", "offs", "yrs", "anes", "ses", "ams", "mos", "mails", "ates", "ats", "asms", "us", "anos", "anks", "an", "ants"], "score1": ["status1", "score0", "Score0", " scoreone", "core3", " score0", "Scoreone", "score3", "Score1", "Score2", " score3", "status2", "core2", "core1", "Score3", "core0", "scoreone", "statusone", "status0"], "max": ["z", "f", "map", "rand", "rest", "med", "min", " Max", "load", "m", "range", "cut", "full", "con", "hash", "ax", "final", "high", "r", "MAX", "k", "ms", "limit", "check", "co", "Max", "gt", "h", "scale", "master", "mx", "g", "ex", "ref", "id", "force", "num", "size", "p", "end", "pi", "total", "act", "last", "maximum", "right", "conf", "n", "ma", "star", "checked", "set", "x", "head", "prime", "mad", "count", "huge"], "idx": ["edj", "indh", "idz", "idh", "likex", "propx", " idj", "prov", "bidpx", "inj", "mitxi", " idy", "indx", "likez", "idix", "iny", "idi", "idxy", "indpt", "Idx", "Idy", "odz", "ridv", "likey", "ideix", "ridxi", "idindex", "midi", "mitv", "bidv", "Idtx", "prox", "oidx", "idpx", "ridy", "liketx", " idh", "idv", "indz", "inx", "idj", "ideindex", "idxi", " idxi", "edindex", "edpx", " idi", "Idpx", "midx", "bidx", "edx", "likept", "widj", "odx", "Idz", "bidj", "odj", "oidxy", " idindex", "likeh", " idix", "idpt", "proj", "widpx", "midix", "ridex", " idv", "edz", "idy", " idex", "idei", "inz", " idpt", "ridx", "ridxy", "edy", "oidex", " idtx", " idxy", "idtx", "bidindex", "ody", "oidy", "widx", "Idj", "widindex", "midindex", "mity", "Idv", " idz", "mitx", "idex"], "j": ["jl", "pr", "pt", "ja", "note", "dt", "div", "ji", "v", "h", "q", "g", "yes", "ijk", "di", "li", "set", "x", "jas", "js", "jc", "z", "obj", "el", "jit", "xy", "kid", "json", "index", "ind", "er", "exp", "jump", "n", "o", "dj", "dr", "im", "bj", "str", "l", "ix", "by", "fr", "k", "at", "sp", "ij", "job", "jac", "p", "br", "kj", "jj", "aj", "hr", "ret", "y", "ip", "key", "adj", "jp", "err", "je", "id", "rev", "oj", "false", "it", "tr", "J", "uj"], "cp": ["ps", "cas", "ls", "params", "aned", "oss", "rates", "anc", "cs", "cons", "con", "aus", "ano", "ann", "csv", "mp", "cpu", "vs", "ups", "eps", "works", "plan", "ss", "cmp", "cross", "np", "anes", "cum", "pid"], "score2": ["core4", "score4", "sum0", " score0", "core2", "sum1", "core1", "score0", " score4", "core0", "sum2", "sum4"], "idx1": ["idy01", "idy2", " idx0", "idz01", "idz0", "idz2", " idy1", "idx01", "idx0", "idex1", "idex2", "idz1", " idy2", " idy0", "idex01", "idy0", "idy1", "idex0", " idy01", " idx01"], "idx2": ["idp1", " idy4", "idy2", " idy1", " idy3", "idn4", "idn1", "idp2", "idx4", "idy4", "idp4", " idy2", "idn2", "idy3", "idp3", "idx3", "idy1", "idn3", " idx3", " idx4"]}}
{"code": "a, b = [int(input()) for _ in range(2)]\\nc = [1, 2, 3]\\nc.remove(a)\\nc.remove(b)\\nprint(*c)", "target": "752", "substitutes": {"a": ["f", "add", "le", "ae", "\u00e1", "af", "ga", "au", "ed", "i", "ax", "back", "A", "ca", "la", "at", "ain", "er", "aux", "admin", "da", "alpha", "act", "e", "sa", "aa", "aj", "al", "ac", "ma", "ab", "eas", "ar", "ach", "an", "aff"], "b": ["f", "sub", "rb", "ba", "ib", "be", "l", "t", "bc", "bp", "back", "i", "cb", "fb", "r", "db", "v", "g", "nb", "d", "bi", "br", "j", "e", "sb", "bis", "n", "ob", "bs", "B", "ab", "bb", "base", "eb"], "_": [" un", "ix", "un", " j", " p", "ex", "val", " time", "local", " l", " all", " long", " f", " g"], "c": ["z", "f", "abc", "sc", "C", "cr", "anc", "cs", "l", "t", "bc", "cf", "con", "etc", "rc", "ca", "cb", "r", "ci", "v", "co", "cv", "city", "arc", "lc", "g", "gc", "csv", "ct", "unc", "cc", "ce", "d", "cos", "cur", "cont", "cp", "ec", "xc", "e", "cd", "dc", "cache", "fc", "n", "nc", "ic", "cu", "tc", "ac", "cm"]}}
{"code": "import sys\\nimport math\\nimport itertools as it\\ndef I():return int(sys.stdin.readline().replace(\"\\n\",\"\"))\\ndef I2():return map(int,sys.stdin.readline().replace(\"\\n\",\"\").split())\\ndef S():return str(sys.stdin.readline().replace(\"\\n\",\"\"))\\ndef L():return list(sys.stdin.readline().replace(\"\\n\",\"\"))\\ndef Intl():return [int(k) for k in sys.stdin.readline().replace(\"\\n\",\"\").split()]\\ndef Lx(k):return list(map(lambda x:int(x)*-k,sys.stdin.readline().replace(\"\\n\",\"\").split()))\\n\\nif __name__ == \"__main__\":\\n    h,w = I2()\\n    s = [S() for _ in range(h)]\\n    for i in range(1,h-1):\\n        for j in range(1,w-1):\\n            if(s[i][j] == \"#\" and s[i][j-1]!=\"#\" and s[i][j+1]!=\"#\" and s[i-1][j]!=\"#\" and s[i+1][j] != \"#\"):\\n                print(\"No\")\\n                exit()\\n    print(\"Yes\")", "target": "559", "substitutes": {"k": ["dk", "z", "max", "K", "m", "kr", "kt", "kh", "uk", "ka", "l", "t", "ck", "kl", "ikk", "ok", "key", "kk", "kan", "ke", "kid", "v", "kar", "mk", "ki", "q", "kn", "unk", "ak", "ijk", "wk", "ik", "kin", "p", "km", "kj", "ek", "kw", "tk", "n", "sk", "ko", "x", "ku", "ks", "yk"], "h": ["z", "him", "he", "H", "m", "html", " H", "kh", "rh", "hm", "l", "ha", "y", "high", "r", "bh", "ho", "v", "c", "hi", "zh", "b", "g", "hal", "hd", "ih", "height", "oh", "ht", "hw", "hl", "n", "hr", "o", "hang", "hh", "ah", "x", "sh", "his", "hp"], "w": ["z", "nw", "iw", "ws", "win", "he", "m", "wh", "l", "ww", "W", "wd", "wall", "r", "sw", "wa", "aw", "wx", "wl", "wcs", "wn", "wb", "we", "wr", "d", "window", "rw", "hw", "kw", "wt", "ew", "wid", "n", "wal", "wp", "width"], "s": ["z", "ps", "details", "sts", "stats", "sv", "ws", "m", "a", "rates", "l", "rs", "t", "gs", "ins", "ms", "scripts", "ns", "r", "states", "strings", "services", "sl", "hs", "ers", "gets", "b", "eds", "tests", "ies", "S", "bits", "ys", "g", "ges", "ids", "vs", "eps", "p", "ss", "ds", "parts", "sa", "results", "its", "ims", "bis", "ses", "n", "abs", "bs", "sq", "ats", "als", "ts", "qs", "js"], "_": ["let", " int", "all", " m", " __", " p", " e", "ml", " l", "int", " x", "x"], "i": ["f", "io", "ini", "ei", "ri", "zi", "m", "ir", "y", "ix", "ti", "info", "ip", "ci", "\u0438", "at", "v", "gi", "ij", "hi", "oi", "ki", "phi", "ami", "ie", "ind", "id", "di", "ik", "bi", "pi", "ai", "it", "ims", "ii", "xi", "si", "iri", "o", "ic", "li", "I", "ia", "x", "ui", "mi", "iu", "im"], "j": ["z", "f", "obj", "jl", "pt", "ja", "l", "y", "t", "ix", "note", "fr", "jp", "ji", "r", "at", "err", "v", "adj", "json", "ij", "q", "b", "je", "g", "ind", "er", "di", "next", "p", "bi", "br", "oj", "kj", "jas", "it", "jj", "jump", "aj", "J", "n", "si", "o", "bs", "li", "dj", "uj", "ju", "x", "bj", "js", "jc"]}}
{"code": "import math\\nA,B,C,X,Y = map(int,input().split())\\nans = A * X + B * Y\\nfor c in range(2 * 10 ** 5 + 1):\\n    a = math.ceil(X - c * 0.5)\\n    b = math.ceil(Y - c * 0.5)\\n    if a < 0:\\n        a = 0\\n    if b < 0:\\n        b = 0\\n    mny = a * A + b * B + c * C\\n    if mny < ans:\\n        ans = mny\\nprint(ans)", "target": "430", "substitutes": {"A": ["AY", "AR", "AI", "AA", "AG", "H", "AC", "Al", "R", "IA", "G", "AV", "N", "BA", "CA", "AL", "Av", "S", "As", "AU", "AT", "AF", "L", "GA", "An", "At", "P", "AM", "AH", "AS", "SA", "AB", "AP", "I", "ACT", "Ax", "AE"], "B": ["BE", "BBC", "BB", "VB", "DB", "H", "RB", "Ber", "R", "G", "SB", "NB", "BO", "WB", "M", "BA", "IB", "BC", "BI", "Bi", "GB", "S", "D", "MB", "BD", "TB", "LB", "BG", "T", "J", "AB", "Z", "V", "BT", "I", "BL", "BM", "CB", "BY", "BR", "Bs"], "C": ["CDC", "K", "CE", "H", "F", "R", "G", "W", "CR", "Cs", "CP", "CON", "CM", "N", "M", "BC", "CI", "U", "S", "E", "O", "D", "CT", "L", "CC", "P", "Q", "T", "YC", "Z", "J", "V", "I", "EC", "CB", "CS", "DC"], "X": ["UX", "CH", "H", "XL", "Width", "MX", "R", "G", "XY", "M", "FX", "Left", "Tx", "OX", "EL", "XXX", "TH", "S", "DX", "E", "EX", "AT", "CT", "Right", "Win", "INT", "Q", "ZX", "XM", "T", "XP", "XX", "Z", "V", "I", "Ex", "HTTP", "RH", "IX", "x", "TX", "WH", "XT"], "Y": ["SY", "TY", "AY", "ET", "CH", "H", "R", "HT", "EY", "y", "G", "JS", "XY", "N", "M", "GB", "TH", "S", "E", "Py", "YA", "D", "YD", "IO", "L", "YE", "Height", "Content", "YS", "Year", "My", "Q", "NY", "T", "YC", "Z", "FY", "V", "J", "I", "HTTP", "BY", "YY", "MY"], "ans": ["ens", "ars", "rors", "ls", "names", "aned", "AN", "idents", "rs", "amps", "xs", "iann", "s", "ms", "anas", "ins", "aus", "ons", "ns", "mn", "ann", "outs", " Ans", "ends", "aps", "ags", "aos", " sans", "aces", "ents", "es", "ians", "ums", "rans", "ands", "posts", " means", "ANS", "leans", "An", "uns", "nas", "offs", "anes", "nan", "ams", "ads", "ates", "ats", "us", "ros", "vals", "os", "anks", "an", "ants"], "c": ["z", "f", "abc", "m", "cr", "anc", "cs", "y", "t", "bc", "l", "cf", "con", "i", "etc", "cb", "cin", "rc", "ci", "k", " cc", "div", "v", "ca", "co", "lc", "g", "unc", "ct", "code", "cc", "\u00e7", "ce", "d", "p", "cos", "col", "cp", "xc", "e", "cd", "dc", "fc", "conf", "ac", "nc", "cy", "ic", "n", "tc", "cu", "r", "x", "cm", "count"], "a": ["ba", "apa", "ap", "am", "ae", "ta", "l", "sta", "ga", "au", "ax", "ca", "at", "la", "pa", "ea", "era", "g", "ak", "area", "ant", "p", "va", "alpha", "ao", "app", "act", "oa", "isa", "ai", "sa", "aq", "aa", "aj", "al", "art", "ac", "o", "ma", "ia", "ab", "aaa", "x", "ar", "ana", "an", "ast", "aff"], "b": ["f", "rb", "ba", "ib", "erb", "m", "bl", "be", "l", "y", "bc", "bp", "by", "i", "cb", "fb", "lb", "db", "v", "g", "wb", "nb", "p", "bi", "br", "abb", "j", "bf", "amb", "bin", "e", "sb", "bu", "bo", "bis", "n", "ob", "o", "bs", "ub", "ab", "bb", "bar", "base", "eb"], "mny": [" mni", " mmy", "tmmy", " mgy", "sna", "lny", "cni", "mfy", "lfy", "mgy", "cmy", "gmna", "mnny", "gmky", " mthy", "gmcy", "mthy", "cgy", "mky", "mna", "gmmy", "sny", "tmni", " mfy", "tmny", "mncy", "mmy", "mcy", "gmfy", "gmny", "cny", "mnna", "lthy", "tmgy", "mnky", "mni", "gmthy", "sky", "scy", "lmy"]}}
{"code": "while True:\\n    x = raw_input()\\n    if x == \"0\":\\n        break\\n    print(\"%d\" % (sum(map(int, x)), ))\\n", "target": "491", "substitutes": {"x": ["z", " dx", "xp", "X", " i", "ux", "xy", "l", "y", "t", "xs", "s", "xa", "i", "xx", "xb", "xxxxxxxx", "rax", "v", "xt", "dx", "wx", "c", "mx", "ex", "fx", "p", " X", "rx", "xc", " xx", " z", "ox", "xe", "int", " y", "xi", "n", "px", "w", "xf", "xd", "tx"]}}
{"code": "N = int(input())\\na = list(input())\\ncount = 1\\nfor i in range(N):\\n  if i>0:\\n    if a[i-1]==a[i]:\\n      pass\\n    elif a[i-1]!=a[i]:\\n      count+=1\\n      \\nprint(count)", "target": "717", "substitutes": {"N": ["Num", "K", "C", "F", "R", "Ni", "CNN", "G", "NB", "NI", "M", "NR", "A", "CN", "Len", "NP", "NA", "Count", "S", "ND", "NT", "D", "NS", "NM", "L", "TN", "No", "P", "T", "GN", "J", "n", "Z", "V", "I", "B", "Ns", "NC", "NN", "NH"], "a": ["z", "f", "esa", "ba", "fa", "qa", "am", "ta", "ae", "another", "l", "all", "t", "sta", "ga", "au", "s", "xa", "A", "ca", "input", "at", "la", "now", "pa", "c", "ea", "b", "area", "d", "p", "va", "alpha", "da", "oa", "e", "isa", "sa", "ai", "ata", "aa", "n", "ac", "o", "ma", "u", "ia", "ab", "eas", "aaa", "list", "ana", "an", "data"], "count": ["ount", "stat", "found", "sum", "report", "C", "counter", "hold", "t", "nt", "number", "amount", "result", "check", "status", "length", "c", "index", "q", "group", "Count", "flag", "ct", "nb", "code", "ind", "test", "num", "d", "size", "process", "p", "next", "col", "total", "cd", "weight", "conf", "n", "cache", "quit", "print", "list"], "i": ["io", "ini", "ei", "zi", "m", "uri", "l", "y", "t", "chain", "ix", "iy", "ti", "ip", "ci", "\u0438", "k", "ji", "gi", "v", "ij", "ori", "index", "q", "b", "phi", "sim", "ind", "id", "asi", "di", "go", "bi", "multi", "j", "pi", "fi", "qi", "ai", "it", "ii", "xi", "si", "batch", "ic", "o", "li", "I", "iter", "me", "x", "ui", "mi", "iu", "im", "ski", "init"]}}
