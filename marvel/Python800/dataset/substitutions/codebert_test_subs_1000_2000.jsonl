{"code": "import sys\\nsys.setrecursionlimit(10**8)\\ndef ii(): return int(sys.stdin.readline())\\ndef mi(): return map(int, sys.stdin.readline().split())\\ndef li(): return list(map(int, sys.stdin.readline().split()))\\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\\ndef dp2(ini, i, j): return [[ini]*i for _ in range(j)]\\ndef dp3(ini, i, j, k): return [[[ini]*i for _ in range(j)] for _ in range(k)]\\n#import bisect #bisect.bisect_left(B, a)\\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\\n#from itertools import accumulate #list(accumulate(A))\\n\\nN, M = mi()\\nC = li()\\n\\n'''\\n# \u4e8c\u6b21\u5143DP\\ndp = dp2(float('inf'), N+1, M+1)\\ndp[0][0] = 0\\nfor i in range(1, M+1):\\n    for j in range(N+1):\\n        #if j == 0:\\n            #dp[i][j] = 0\\n        dp[i][j] = min(dp[i-1][j], dp[i][j])\\n        c = C[i-1]\\n        if j+c <= N:\\n            dp[i][j+c] = min(dp[i][j]+1, dp[i-1][j+c])\\n#print(dp)\\nprint(dp[M][N])\\n'''\\n\\n# 1\u6b21\u5143DP\\ndp = [float('inf') for i in range(N+1)]\\ndp[0] = 0\\n\\nfor i in range(M):\\n    for j in range(N+1):\\n        c = C[i]\\n        if j+c <= N:\\n            dp[j+c] = min(dp[j]+1, dp[j+c])\\n\\nprint(dp[N])\\n", "target": "286", "substitutes": {"N": ["F", "MN", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "Num", "NS", "NE", "K", "Na", "O", "P", "T", "C", "B", "D", "Ne", "S", "I", "NT", "Z", "Ns", "R", "M", "J", " n", "G", "n"], "_": ["s", "a", " block", "__", "non", " local", "p", "al", "place", "ing", "___", "of", "ay", " time", "x", " un", "l", "d", "q", "out", "f", "ac", "m", "ip", "b", "t", "all", "val", "er", "n"], "ini": ["ui", "iri", "arin", "ei", "int", "ins", "qi", "mi", "p", "phi", "ai", "ic", "init", "ine", "ix", "inf", "ti", "ani", "z", "mini", "iris", "eni", "si", "index", "inc", "ind", "uri", "pi", "mind", "io", "network", "ir", "cli", "xi", "cin", "di", "ni", "ci", "isi", "inn", "iki", "inet", "zi", "id", "li", "ii", "ik", "config", "lin", "n"], "i": ["ji", "ui", "ie", "int", "qi", "mi", "p", "ai", "c", "y", "o", "im", "ix", "iu", "z", "si", "x", "ind", "I", "l", "u", "d", "pi", "q", "f", "io", "m", "xi", "di", "ni", "ci", "ip", "v", "b", "e", "t", "id", "li", "ii", "n"], "j": ["ji", "a", "ie", "ja", "qi", "p", "g", "c", "jo", "y", "jj", "jl", "z", "si", "jet", "x", "it", "l", "u", "uj", "d", "q", "js", "jp", "f", "m", "ij", "J", "v", "b", "key", "e", "t", "li", "ii", "n"], "k": ["ke", "p", "g", "c", "K", "y", "o", "r", "ks", "z", "x", "kw", "w", "ka", "ak", "l", "ok", "u", "d", "q", "f", "sk", "m", "v", "b", "key", "kr", "ik", "n"]}}
{"code": "n,a,b = map(int,input().split())\\n\\nminans = a*(n-1)+b\\nmaxans = a+b*(n-1)\\n\\nif a>b or (n==1 and a!=b):\\n    print(0)\\nelse:\\n    print(maxans-minans+1)", "target": "395", "substitutes": {"n": ["s", "k", "mn", "p", "na", "g", "c", "i", "o", "r", "y", "number", "nc", "num", "net", "h", "ba", "size", "ne", "z", "x", "nan", "A", "w", "l", "u", "d", "nn", "max", "f", "j", "network", "m", "ns", "v", "e", "N", "t", "nb", "an"], "a": ["min", "aa", "va", "ma", "ans", "p", "ai", "g", "c", "i", "fa", "y", "h", "api", "ba", "ab", "au", "art", "da", "x", "A", "ar", "w", "ak", "l", "u", "d", "f", "sa", "ca", "ac", "m", "ga", "asa", "j", "area", "am", "aj", "ae", "oa", "alpha", "an", "ad"], "b": ["s", "k", "aa", "ib", "fb", "p", "bs", "g", "c", "i", "y", "r", "h", "o", "beta", "B", "ba", "ab", "z", "x", "w", "sb", "cb", "l", "ob", "bb", "d", "u", "rb", "bf", "abb", "f", "j", "eb", "m", "binary", "v", "base", "e", "big", "nb", "lb"], "minans": ["donans", "Minans", "minants", " minan", " minants", " minANS", "minANS", "minons", "donan", "Minan", "minan", "maxan", "Minants", "Minons", " minons", "maxANS", "donants", "MinANS", "maxants", "donons"], "maxans": ["sumas", "suman", "minanas", "minas", "sumans", "allans", "sumanas", " maxANS", " maxan", "maxas", " maxas", "Maxins", "Maxans", "allins", "Maxan", "minan", "maxins", "maxan", "maxanas", "allANS", " maxanas", "MaxANS", "allan", "maxANS", " maxins"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\nanswer = 0\\n\\nwhile(True):\\n\tfor i in range(n):\\n\t\tif a[i] % 2 == 0:\\n\t\t\ta[i] = a[i] / 2\\n\t\telse:\\n\t\t\tprint(answer)\\n\t\t\texit()\\n\tanswer += 1", "target": "659", "substitutes": {"n": ["min", "s", "k", "p", "na", "c", "o", "number", "r", "nc", "num", "y", "size", "ne", "z", "x", "nan", "w", "l", "nin", "u", "d", "nn", "max", "f", "j", "m", "ns", "b", "np", "t", "N", "count", "e", "nb"], "a": ["s", "aa", "wa", "va", "ans", "p", "qa", "na", "ai", "aw", "c", "o", "y", "ba", "ab", "au", "array", "ana", "x", "A", "w", "ia", "args", "l", "u", "f", "sa", "ac", "m", "ga", "area", "aj", "am", "input", "ae", "oa", "alpha", "b", "ea", "v", "e", "all", "form", "an", "ad"], "answer": ["aa", "ze", "int", " answers", "reply", "p", "number", "en", "result", "une", "size", "ani", "z", "array", "response", "x", "sn", "current", "ee", "ace", "nn", "score", "page", "one", "option", "address", "area", "output", "ae", "average", "oa", "question", "answered", "ell", "alpha", "e", "order", "count", "grade", "next", "an", "Answer", "offset"], "i": ["gi", "k", "ui", "ie", "int", "code", "ei", "qi", "p", "ai", "c", " I", "oi", "o", "y", "h", "num", "ini", "ix", "iu", "ti", "z", "si", "eni", "index", "x", "ind", "I", "l", "u", "d", "pi", "q", "ki", "j", "f", "io", "ac", "xi", "ri", "di", "ci", "v", "e", "id", "li", "ii", "bi", "ip"]}}
{"code": "Score = int(input())\\n\\nNumero = 0\\n\\nfor i in range (1, 10000000):\\n\tif i*(i+1)/2 >= Score:\\n\t\tNumero = i\\n\t\tbreak\\n\\nK = Numero\\n\\nP = []\\n\\nfor i in range (0, K):\\n\tif Score >= (K-i):\\n\t\tP.append(K-i)\\n\t\tScore = Score - (K-i)\\n\\nP = reversed(P)\\n\\nprint(*P, sep = \"\\n\")", "target": "389", "substitutes": {"Score": ["Power", "Quality", "Length", "Base", "Number", "Match", "Scale", "Size", "Num", "Copy", "Error", "Test", "Distance", "Winner", "Core", "Fine", "ise", " score", "Su", "Sk", "C", "Family", "Rank", "Inf", "Result", "Weight", "Success", "Info", "Id", "Style", "Finish", "score", "Sc", "Average", "Code", "Rate", "Me", "Value", "Fi", "Speed", "Time", "Fit", "Pi", "Cor", "Location", "Sum", "Split", "Xi", "Index", "Grade", "Last", "Feature", "Performance", "Key", "Count"], "Numero": ["NUMBER", "numron", "numERO", " Numera", "NUMNo", "NumLO", " NumBER", "MyNo", "NUMulo", "Cuera", "NUMLO", "SequERO", "Numron", "Myulo", " Numendo", " NumLO", "NUMron", "NumBER", "Sequendo", "NUMero", "numNo", "NumNo", "Cuendo", "Numendo", "Sequero", "Numera", "numero", "NUMERO", "Numulo", "NumERO", "Myron", "numLO", "numBER", "Sequera", "Myero", "Cuero", "CuERO", "numulo", " NumERO"], "i": ["gi", "ji", "s", "k", "ui", "a", "ei", "int", "ie", "qi", "p", "phi", "ai", "init", "c", "o", "y", "r", "ini", "iu", "slice", "ti", "z", "mini", "si", "index", "x", "yi", "ind", "start", "I", "l", "fi", "u", "pi", "d", "q", "io", "j", "f", "m", "xi", "di", "ri", "ni", "ci", "v", "b", "e", "zi", "id", "li", "ii", "n", "bi", "ip"], "K": ["Power", "F", "k", "E", "KK", "ID", "L", "KO", "KI", "V", "Max", "Grid", "H", "Q", "X", "Y", "Size", "IK", "KE", "O", " k", "B", "C", "Sk", "SK", "T", "D", "KS", "KB", "Kent", "S", "W", "KC", "I", "HK", "Z", "UK", "IO", "KR", "PK", "U", "OK", "M", "J", "N", "G", "Ku", "Work", "Key"], "P": ["F", "PI", " p", "E", "TP", "L", "V", "H", "PUT", "Q", "X", "p", "Y", "PS", "LP", "O", "B", "T", "C", "D", "NP", "Ps", "IP", "S", "PP", "A", "W", "Position", "I", "DP", "PA", "Points", "RP", "Py", "U", "Part", "R", "M", "J", "N", "G"]}}
{"code": "n, p = map(int, input().split())\\n\\ns = input()\\n\\nruisekiwa = [0 for _ in range(0, n + 1)]\\nif 10 % p == 0:\\n    ans = 0\\n    for i in range(0, n):\\n        if (ord(s[i]) - ord('0')) % p == 0:\\n            ans += i + 1\\n    print(ans)\\n    exit()\\n\\nten = 1\\nfor _i in range(0, n):\\n    i = n - _i - 1\\n    ruisekiwa[n - i] = ((ord(s[i]) - ord('0')) * ten + ruisekiwa[n - i - 1]) % p\\n    ten *= 10\\n    ten %= p\\n\\nans = 0\\ncnt = [0 for _ in range(0, p)]\\nfor i in range(0, n+1):\\n    ans += cnt[ruisekiwa[i]]\\n    cnt[ruisekiwa[i]] += 1\\n\\nprint(ans)\\n", "target": "448", "substitutes": {"n": ["name", "k", "mn", "g", "c", "y", "o", "nc", "en", "num", "net", "un", "ne", "nu", "z", "on", "x", "sn", "w", "l", "u", "d", "pi", "nt", "f", "network", "m", "j", "ns", "no", "ni", "v", "b", "np", "inn", "t", "N", "e", "pn", "nb", "an"], "p": ["op", "k", "change", "a", "span", "power", "ps", "bp", "g", "c", "pre", "fp", "y", "o", "tp", "r", "pm", "h", "pos", "cp", "en", "ap", "api", "P", "pt", "z", "pa", "x", "w", "start", "l", "u", "pi", "d", "q", "page", "f", "j", "jp", "m", "pp", "ip", "v", "b", "np", "t", "pe", "e", "pn", "pc", "part"], "s": ["a", "strings", "south", "qs", "ps", "sed", "g", "c", "sets", "o", "y", "r", "z", "si", "es", "x", "S", "w", "sb", "l", "u", "d", "f", "sa", "cs", "m", "ns", "os", "v", "b", "e", "t", "an", "ins"], "ruisekiwa": ["ruisekaiw", "ruiseskema", "ruiseskew", "ruisekeema", "ruisekiw", "ruisediya", "ruisekaqa", "ruisedkiwa", "ruiseskiya", "ruisekiza", "ruiseskiza", "ruiserkiqa", "ruisedkuya", "ruiseskila", "ruiseskaha", "ruisediwa", "ruisekuha", "ruiseskawa", "ruisekila", "ruisekeewa", "ruisediza", "ruisedkiw", "ruiserkiwa", "ruisekaiwa", "ruiseskiqa", "ruisekuya", "ruisekawa", "ruisekeeza", "ruisedkiwal", "ruisekaila", "ruiseskaw", "ruisediqa", "ruiserskiya", "ruisedkuwal", "ruisedkuw", "ruiserkiza", "ruisekiya", "ruisekuw", "ruisekuwal", "ruisekaha", "ruisekew", "ruiserkima", "ruisekiqa", "ruiseskiwa", "ruisekawal", "ruiseskaya", "ruisekiha", "ruisekema", "ruiserskiqa", "ruisedkiya", "ruisekaza", "ruiseskiwal", "ruisekela", "ruiseskewa", "ruisekama", "ruisekaya", "ruiserskiza", "ruisekaw", "ruiseskiha", "ruisekeeya", "ruisekiwal", "ruisedkuwa", "ruiserskima", "ruisekuwa", "ruiseskima", "ruisekaima", "ruiseskiw", "ruisekewa", "ruiserkiya", "ruisekima", "ruiserskiwa", "ruiseskela"], "_": ["k", "__", "code", "non", "place", "al", "g", "ing", "lex", "un", "ay", "ap", "long", "x", "ind", "user", "d", "q", "out", "j", "f", "am", "b", "val", "ad", "block", "ip"], "ans": ["ano", "ain", "a", "ents", "cas", "lan", "nas", "offs", "amps", "ras", "ams", "na", "eps", "ai", "atan", "ats", "aning", "aps", "anas", "ads", "AN", "ANS", "ane", "aces", "ony", "ann", "anon", "anc", "ani", "au", "ays", "ana", "ares", "can", "nan", "ars", "anus", "ant", "enna", "aned", "cn", "ations", "atts", "ons", "aus", "anan", "anne", "ens", "sk", "leans", "ants", "ns", "ases", "os", "ls", "cons", "ians", "ds", "plan", "an", "ins"], "i": ["gi", "k", "ui", "vi", "a", "ei", "int", "ie", "qi", "mi", "init", "ai", "phi", "c", " I", "oi", "o", "y", "ini", "ix", "iu", "ti", "mini", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "it", "l", "fi", "u", "pi", "d", "io", "j", "f", "m", "xi", "di", "ri", "ni", "ci", "v", "b", "e", "t", "info", "zi", "id", "li", "ii", "bi", "ip"], "ten": ["zero", "const", "mn", "int", "wt", "pent", "tw", "ner", "ven", "ai", "fort", "hen", "mult", "en", "num", "net", "atten", "teen", "rent", "ne", "aren", "au", "eni", "ien", "two", "tan", "ties", "prime", "nat", "tun", "nt", "ta", "one", "ens", " proportion", "nw", "den", "vert", "oren", "fen", "none", "wen", "Ten", "ni", "len", " Ten", "t", "pn", "next", " len", "ti"], "_i": ["_pi", " _p", "_p", " _n", " _j", "_n", "_j", "_li"], "cnt": ["cNT", "lcant", "CNT", "cnc", "pcnc", " cNT", "pNT", " cct", "cct", "lcnc", "acann", " cnc", " cant", "pnd", "Cnt", "acnt", "cgt", "Cnc", "pant", "acNT", " cgt", " cnd", "pcct", "lcgt", "lcnd", "cann", "pcnt", "pgt", "lcnt", "pann", "acnc", "pnt", "cant", "pcNT", "Cct", "lcNT", "lcann", "cnd", "pnc"]}}
{"code": "h, w = map(int, input().split())\\ntizu = [list(input()) for _ in range(h)]\\npos = 1\\nfor row in tizu:\\n    pos -= 1\\n    for i, index in enumerate(row):\\n        if i == pos:\\n            if index == \"#\":\\n                pos += 1\\n        else:\\n            if index == \"#\":\\n                print(\"Impossible\")\\n                exit()\\nprint(\"Possible\")", "target": "243", "substitutes": {"h": ["rh", "ih", "hs", "k", "sh", "H", "p", "hours", "g", "c", "host", "r", "y", "height", "o", "ht", "head", "z", "x", "l", "u", "d", "q", "f", "header", "m", "hi", "b", "v", "t", "e", "hm", "n"], "w": ["wa", "wt", "wp", "win", "p", "g", "c", "width", "rw", "y", "wh", "weight", "z", "x", "kw", "W", "window", "wx", "u", "d", "f", "m", "sw", "ws", "wo", "v", "col", "n"], "tizu": ["Tyi", "taqi", "Tiu", "tiaz", "tyi", "ytqi", " tiaz", "Tizu", "ytizu", "Tiaz", " tyi", "ytiu", "tiu", "taizu", "taici", "ytiaz", "tayi", "tqi", "Tici", " tiu", " tqi", " tici", "tici", "Tqi"], "_": ["k", "p", "g", " time", " k", "x", "all", "id"], "pos": ["min", "loc", "unit", "pid", "cond", "p", "default", "ps", "c", "o", "num", "axis", "pt", "sp", "size", "po", "z", "x", "diff", "start", "l", "page", "j", "f", "position", "neg", "Pos", "POS", "os", "len", "all", "count", "col", "val", "skip", "pose", "block", "ref", "offset", "n"], "row": ["raw", "line", "rows", "y", "o", "num", "result", "item", "r", "tr", "week", "array", "po", "search", "x", "bug", "Row", "ward", "page", "found", "sw", "ww", "entry", "v", "ow", "order", "xy", "cell", "col", "word", "month", "range", "block", "column", "feed"], "i": ["ui", "loc", "a", "int", "p", "ai", "c", "o", "r", "y", "ini", "iu", "z", "si", "x", "start", "I", "l", "d", "pi", "j", "position", "m", "ni", "v", "b", "zi", "col", "li", "ii", "n"], "index": ["ion", "error", "loc", "end", "value", "a", "int", "p", "c", "condition", "width", "o", "number", "num", "ix", "item", "axis", "office", "iter", "weight", "si", "search", "x", "diff", "body", "action", "current", "page", "ln", "f", "position", "point", "sw", "input", "list", "data", "length", "find", "e", "col", "id", "word", "Index", "prefix", "n"]}}
{"code": "s = input()\\nmodify = '2018'+ s[4:]\\n\\nprint(modify)\\n", "target": "49", "substitutes": {"s": ["ss", "p", "plus", "c", "strip", "i", "g", "sl", "r", "conf", "es", "S", "w", "sb", "start", "save", "u", "d", "f", "status", "ssl", "m", "sync", "copy", "input", "single", "su", "data", "abs", "v", "b", "string", "space", "e", "ls", "share", "submit", "changes", "comments", "n"], "modify": ["checkification", "modfix", "signfix", "modifying", "codifier", "manify", "modifier", "codifying", " modification", " modfix", "manifying", "signifier", " modifying", "signify", "codification", "manifier", "manification", " modifier", "codify", "modification", "checkfix", "checkify", "checkifier", "signification"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\n\\n\\ndef main():\\n    k = int(input())\\n    if k % 2 == 0: print((k // 2) ** 2)\\n    if k % 2 != 0: print(((k - 1) // 2) * (k + 1) // 2)\\n    \\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "402", "substitutes": {"k": ["kid", "ke", "p", "g", "c", "i", "K", "o", "y", "num", "ks", "kl", "x", "kw", "w", "ka", " K", "ko", "ak", "ask", "l", "ok", "u", "d", "unk", "q", "j", "sk", "f", "ky", "m", "ek", "ku", "check", "tk", "length", "v", "key", "b", "ck", "t", "id", "ik", "n"]}}
{"code": "N, M, P = map(int, input().split())\\n\\nv = [[] for _ in range(N)]\\nabc = []\\nfor _ in range(M) :\\n    a, b, c = map(int, input().split())\\n    v[b-1].append((a-1, -(c-P)))\\n    \\nvisited = [False] * N\\nvisited[N-1] = True\\nqueue = [N-1]\\nwhile queue :\\n    cur = queue.pop()\\n    for nex, cost in v[cur] :\\n        if not visited[nex] :\\n            queue.append(nex)\\n            visited[nex] = True\\n        abc.append((nex, cur, cost))\\n        \\ndist = [float('inf')] * N\\ndist[0] = 0\\n\\ndef bellmanford() :\\n    for i in range(N) :\\n        for a, b, c in abc :\\n            if dist[a] + c < dist[b] :\\n                dist[b] = dist[a] + c\\n                if i == N-1 :\\n                    return True\\n    return False\\n    \\nif bellmanford() :\\n    print(-1)\\nelse :\\n    print(max(0, -dist[N-1]))\\n", "target": "88", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "H", "Q", "X", "Y", "NC", "Size", "Num", "NS", "NE", "K", "NM", "CNN", "O", "T", "C", "B", "D", "Len", "IP", "Ne", "Inf", "S", "A", "W", "I", "No", "NT", "OS", "NG", "Node", "Ni", "Z", "Ns", "ND", "U", "R", "Part", "J", "GN", "NB", " n", "G", "KN", "NA", "Wh", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "p", "Y", "K", "MX", "DM", "NM", "O", "B", "C", "T", "D", "LM", "MD", "S", "A", "W", "CM", "Ma", "Z", "m", "MC", "U", "R", "J", "Multi", "MF", "G", "n"], "P": ["F", "PI", "E", "PO", "L", "V", "H", "Q", "X", "p", "Y", "K", "PN", "O", "T", "C", "B", "D", "S", "A", "PP", "W", "I", "PA", "U", "R", "J", "G"], "v": ["s", "vi", "ve", "uv", "V", "va", "vo", "p", "g", "vu", "h", "values", "lv", "vs", "rev", "array", "vp", "cv", "stack", "inv", "versions", "l", "u", "conv", "q", "f", "iv", "j", "m", "vv", "br", "vt", "tv", "t", "e", "volt", "order", "sv", "val", "n"], "_": ["k", "__", "non", "g", "ing", " time", "x", " un", "q", "out", "f", " dev", " non", " self", "ip"], "abc": ["aa", "ib", "court", "lab", "fb", "p", "acc", "arc", "circ", "rec", "nc", "auc", "erc", "buf", "ba", "lc", "ab", "anc", "au", "que", "fc", "array", "cache", "x", "bl", "af", "cb", "ABC", "album", "account", "abb", "frac", "etc", "ignore", "ac", "rc", "lib", " ABC", "acl", "dc", "cd", "aux", "abs", "bc", "mc", "cover", "xc", "config"], "a": ["aa", "s", "va", "p", "na", "ai", "ama", "fa", "y", "o", "r", "api", "ba", "B", "ab", "au", "z", "da", "x", "pa", "ar", "A", "af", "w", "ka", "ah", "ia", "ak", "l", "u", "d", "aaa", "f", "ca", "sa", "ax", "ac", "asa", "m", "area", "am", "aj", "ya", "ae", "oa", "e", "an", "ad", "n"], "b": ["s", "aa", "k", "be", "ib", "fb", "p", "bs", "bp", "g", "pb", "y", "r", "o", "wb", "B", "ba", "ab", "x", "A", "w", "sb", "l", "u", "d", "bb", "rb", "aaa", "f", "j", "eb", "ca", "m", "base", "e", "bc", "nb", "lb", "ad", "n"], "c": ["k", "s", "loc", "p", "g", "arc", "h", "o", "ec", "y", "cp", "r", "nc", "C", "lc", "uc", "z", "ce", "x", "unc", "cy", "cu", "w", "cm", "l", "u", "d", "cn", "q", "f", "ca", "j", "cs", "m", "ac", "dc", "co", "ci", "cf", "e", "cr", "cc", "col", "pc", "mc", "enc", "xc", "n"], "visited": ["visit", "accessitted", "viewitted", "visitable", "viewited", "visiting", "inviting", "Visiting", "Visitable", "Visit", "VisITED", "viewed", "navITED", "circiter", "visored", "posited", "Visored", "posored", "Visitted", "circited", "VISit", "posit", "isited", "navited", "missited", "positable", "visiter", "circitted", "visITED", "visitted", "Visiter", "missed", "isored", "missit", "invITED", "accessiter", "missitted", "isitable", "Visited", "viewit", "circit", "isit", "VISitted", "VISited", "navit", "invited", "accessit", "invit", "naviting", "vised", "VISed", "accessited"], "queue": ["pool", "group", "collection", "line", "Queue", "channel", "Q", "event", "ues", "enum", "priority", "case", "result", "future", "buf", "force", "lc", "forward", "server", "que", "array", "counter", "index", "cache", "store", "file", "cv", "route", "next", "stack", "current", "enabled", "l", "child", "protected", "buffer", "q", "job", "wait", "f", "update", "status", "sync", "menu", "ue", "sequence", "parent", "list", "live", "batch", "complete", "fl", "foo", "view", "count", "seq", "config", "loop", "feed"], "cur": ["cot", "spec", "const", "sc", "cor", "reci", "ur", "prev", "kk", "cont", "tr", "rib", "air", "iter", "coll", "lc", "car", "uc", "div", "ch", "ce", "cache", "fer", "cross", "current", "con", "src", "focus", "tri", "sur", "rc", "Cur", "cat", "sync", "sr", "char", "pull", "dr", "dc", "co", "entry", "su", "sch", "cer", "ct", "cf", "cr", "count", "col", "step", "ctr", "next", "draw", "feed"], "nex": ["ss", " vex", " obj", "sen", "nexus", "ie", "nox", "ner", "sex", "rex", "ele", "gru", "est", "ext", "na", " dj", "xx", " express", "expl", "fx", "rx", "lex", "nc", "ix", " x", " cess", " su", "coll", "lc", "ne", " unex", "cus", " step", "ex", "x", "sn", "pex", "cross", "obj", "wx", "nn", "nz", " feat", "six", "sync", "dr", " nexus", "dc", "fee", "su", "nl", "pick", "nr", "expr", "ck", "cr", " syn", "cons", " sidx", "nec", "ez", "step", "eff", "feat", "oss", "next", " sus"], "cost": ["contact", "ack", "loc", "risk", "const", "product", "acc", "price", "work", "cp", "weight", "coll", "size", "uc", "div", "Cost", "clean", "child", "ace", "score", "char", "pp", "rank", "fee", "co", "supp", "dc", "length", "func", "dev", "cf", "cc", "grade", "step", "eff", "config", "draw", "feed"], "dist": ["loc", "dd", "sh", "rec", "support", "force", "nu", "dis", "shift", "Dist", "data", "length", "dev", "np", "feat", "info", "distance", "beta", "ord", "desc", "div", "dest", "comp", "store", "de", "cd", "depth", "wd", "form", "rest", "dy", "default", "nd", "dj", "Distance", " difference", "md", "weight", "size", "index", "mu", "ind", "start", "draw", "req", "d", " distribution", "sup", " distances", "ist", "inst", "rank", "dim", "help", "count", "grade", "mix", "config", "front", " distance", " Dist", "num", "sd", "diff", "show", "df", "di", "check", "ld", "progress", "range", "test", "sum"], "i": ["gi", "k", "ei", "int", "qi", "p", "ai", "g", "ic", " I", "r", "num", "iu", "C", "z", "si", "x", "ind", "I", "it", "l", "u", "d", "pi", "j", "f", "ac", "xi", "di", "ip", "e", "id", "li", "bi", "n"]}}
{"code": "x , y , z , k = map(int,input().split())\\na = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\nc = list(map(int,input().split()))\\nab = []\\nfor i in a:\\n    for j in b:\\n        ab.append(i+j)\\nab.sort(reverse=True)\\nab = ab[:k]\\nabc = []\\nfor i in ab:\\n    for j in c:\\n        abc.append(i+j)\\nabc.sort(reverse=True)\\nfor i in range(k):\\n    print(abc[i])", "target": "403", "substitutes": {"x": ["int", "X", "p", "xs", "g", "xx", "h", "o", "w", "l", "u", "d", "max", "q", "f", "m", "v", "t", "e", "xy", "n"], "y": ["dy", "p", "Y", "phi", "g", "h", "o", "cy", "w", "l", "yt", "u", "d", "f", "m", "ya", "v", "t", "e", "xy", "py", "vy", "n"], "z": ["iz", "ze", "p", "g", "h", "o", "cz", "zh", "zy", "cy", "w", "yz", "u", "d", "q", "f", "Z", "m", "v", "e", "t", "zi", "ii", "n"], "k": ["km", "kid", "p", "g", "dk", "K", "o", "h", "num", "kk", "r", "ks", "size", "mk", "kw", "w", "ko", "ak", "l", "u", "d", "max", "q", "sk", "f", "m", "v", "ck", "e", "ik", "kb", "n"], "a": ["aa", "s", "va", "at", "p", "ai", "ama", "fa", "ba", "au", "ana", "da", "A", "ar", "af", "ak", "ach", "aaa", "ca", "f", "sa", "ac", "asa", "ga", "am", "aj", "ae", "alpha", "an", "ad"], "b": ["aa", "ib", "fb", "p", "bs", "g", "r", "o", "fab", "ba", "sb", "cb", "l", "ob", "bb", "d", "u", "f", "eb", "ca", "ac", "ae", "db", "v", "base", "bc", "ad", "n"], "c": ["p", "ic", "g", "ec", "C", "ch", "cy", "w", "con", "l", "u", "d", "q", "f", "ca", "cs", "ac", "cd", "co", "ci", "ct", "v", "cf", "e", "bc", "cr", "cc", "xc", "n"], "ab": ["ib", "lab", "fb", "p", "bs", "ai", "pb", "fa", "fab", "app", "AB", "ap", "ba", "hab", "array", "az", "bl", "av", "af", "ah", "sb", "cb", "ak", "ob", "Ab", "bb", "ub", "ach", "abb", "f", "eb", "ca", "sa", "ac", "acl", "am", "abl", "ae", "abs", "base", "bc", "abe", "ast", "ad"], "i": ["gi", "ji", "ui", "ie", "int", "ib", "qi", "p", "ai", "o", "jj", "ix", "im", "iu", "ti", "si", "index", "yi", "ind", "I", "it", "l", "u", "pi", "ish", "f", "io", "iii", "xi", "di", "ni", "ci", "ij", "v", "t", "e", "zi", "id", "li", "ii", "n", "bi", "ip"], "j": ["gi", "ji", "ie", "ja", "p", "g", "jo", "r", "jj", "h", "im", "ym", "o", "ig", "je", "ch", "w", "ind", "get", "it", "l", "u", "uj", "d", "q", "js", "jp", "f", "job", "m", "oj", "br", "ait", "aj", "ct", "J", "ij", "v", "bj", "t", "e", "kj", "n"], "abc": ["loc", "ib", "lab", "fb", "acc", "obb", "ai", "ic", "arc", "cca", "circ", "ec", "fab", "rec", "auc", "inf", "coll", "lc", "anc", "uc", "au", "fc", "ah", "af", "cb", "ABC", "ob", "occ", "rb", "abb", "aaa", "rc", "etc", "acl", "ac", " ABC", "icc", "dc", "aux", "abs", "asc", "bc", "mc", "xc"]}}
{"code": "s=input()\\nn=len(s)\\nmod=10**9+7\\ndp=[[0]*13 for _ in range(n+1)]\\ndp[0][0]=1\\nmul=1\\n\\nfor i in range(n):\\n    x=s[-(i+1)]  # \u5f8c\u308d\u304b\u3089\u898b\u3066\u3044\u304f\\n    if x=='?':\\n        for k in range(10):\\n            for j in range(13):\\n                dp[i+1][(mul*k+j)%13]+=dp[i][j]\\n                dp[i+1][(mul*k+j)%13]%=mod\\n    else:\\n        k=int(x)\\n        for j in range(13):\\n            dp[i+1][(mul*k+j)%13]+=dp[i][j]\\n            dp[i+1][(mul*k+j)%13]%=mod\\n    mul=mul*10%13\\n# print(dp)\\nprint(dp[n][5])\\n", "target": "798", "substitutes": {"s": ["a", "spec", "south", "service", "p", "states", "g", "c", "xs", "o", "y", "r", "z", "es", "search", "S", "series", "w", "sb", "l", "services", "u", "d", "sg", "f", "sort", "ssl", "m", "ns", "input", "data", "b", "v", "string", "t", "ls", "e", "ds", "source"], "n": [" N", "k", "p", "g", "c", "nm", "o", "r", "nc", "num", "y", "net", "h", "size", "nu", "ne", "z", "sn", "w", "l", "cn", "d", "j", "f", "m", "ns", "b", "e", "N", "t", "dn", "nb"], "mod": ["min", " d", "mn", "int", " r", "mult", "r", " div", "pm", " c", " Mod", "div", "scale", " dd", " cm", "mega", "cm", "max", " m", "j", "m", " dec", "complex", "dec", "step", " size", "Mod"], "dp": ["ss", " p", " tcp", "eps", "p", "ps", " DP", "sl", " e", " c", "cp", "rep", " pairs", "gp", "P", "mp", " dd", "array", "params", "dm", "cm", "bb", "pi", "d", "DP", "dl", "dt", "m", "pp", "dr", "address", "dc", "data", "pair", " cp", "e", "ds", " df", "ip"], "_": ["int", "p", "num", "I", "u", "q", "j", "f", "m", "e", "all", "val", "an", "ip"], "mul": [" mmult", "Mmult", "Mul", " mUL", "cmul", "cmUL", "mmult", "muli", "cmmult", "cmuli", " muli", "MUL", "Muli", "mUL"], "i": ["k", "ui", "int", "p", "phi", "mi", "c", " I", "y", "o", "ine", "ini", "iu", "ti", "z", "si", "index", "I", "l", "u", "d", "pi", "j", "f", "m", "xi", "di", "ip", "ci", "b", "e", "id", "li", "ii", "bi"], "x": [" p", "X", "p", "xs", "c", "xx", "y", "rx", "o", "px", " y", "z", " xx", "xxx", "xxxx", "index", "w", "d", "f", "xi", "data", "xe", "xp", "e", "xes", "xy", "xc", "xxxxxxxx"]}}
{"code": "X,K,D = map(int,input().split())\\nX = abs(X)\\nX_div_D = X//D\\n\\nans_min = X % D\\n\\nif K <= X_div_D:\\n  print(X - K * D)\\nelse:\\n  if (K % 2) ^ (X_div_D % 2) == 0:\\n    print(ans_min)\\n  else:\\n    print(abs(ans_min - D))", "target": "66", "substitutes": {"X": ["F", "k", "E", "Length", "L", "V", "XM", "Max", "H", "DX", "Q", "XX", "Y", "XP", "Width", "EX", "Test", "O", "P", "T", "C", "DD", "x", "PE", "S", "A", "W", "IX", "XXX", "I", "Model", "CD", "TX", "Z", "Data", "Array", "U", "R", "Time", "OK", "M", "XL", "N", "G", "Cross"], "K": ["F", "Power", "k", "KK", "Ke", "E", "L", "V", "Max", "Ak", "Q", "Y", "IK", "DC", "KE", "Sk", " k", "P", "T", "C", "O", "SK", "NK", "KS", "S", "A", "VK", "Z", "UK", "KR", "PK", "FK", "Mask", "U", "J", "M", "CP", "DK", "N", "G", "Ka"], "D": ["F", "AD", "E", "L", "DS", "V", "DX", "Q", "DH", "Y", "DC", "DM", "DE", "DB", "O", "P", "B", "C", "T", "MD", "DD", "De", "JD", "LD", "S", "A", "W", "I", "CD", "Ds", "d", "Do", "Di", "DF", "Z", "ND", "FD", "M", "N", "DL", "G", "DI", " d"], "X_div_D": ["X_div_DD", "X_mult_Q", "X_DIV_d", "X_div1D", "X_mult1DD", "X_div_Do", "X_div_d", "X_div_DI", "X_div_F", "X_mult_DD", "X_div_Q", "X_mult_Do", "X_div2D", "X_DIV_Q", "X_div_L", "X_DIV_D", "X_div1Q", "X_mult1D", "X_div2F", "X_div1Do", "X_mult_D", "X_div1DD", "X_mult1Q", "X_DIV_DI", "X_div2L", "X_mult1Do", "X_div2d"], "ans_min": ["ans_in", "ans_sum", "an_in", "ANS_type", "an_min", "ANS_MIN", "anspMin", "ANS_Min", "ans_MIN", "ans_max", "anspmax", "an_max", "ANS_min", "an_sum", "ANS_max", "ans_type", "ans_Min", "anspmin"]}}
{"code": "A,B,X=list(map(int, input().split()))\\nif A<=X<=A+B:\\n  print('YES')\\nelse:\\n  print('NO')", "target": "488", "substitutes": {"A": ["F", "GA", "E", "Ca", "a", "L", "V", "UA", "MA", "Y", "IA", "LA", "TA", "EA", "K", "AM", "AB", "AW", "P", "C", "T", "D", "AC", "Ar", "SA", "mA", "API", "AA", "Alpha", "S", "I", "PA", "Offset", "CA", "U", "AY", "M", "N", "G", "Am", "Ang", "RA"], "B": ["F", "E", "L", "LB", "V", "Q", "Y", "PB", "BA", "AB", "O", "P", "C", "T", "D", "SB", "BB", "BC", "BI", "I", "MB", "Ab", "BE", "Z", "WB", "U", "Blue", "GB", "R", "M", "J", "b", "N", "G", "BF", "Bs"], "X": ["F", "E", "L", "XXXX", "V", "H", "Q", "XX", "Y", "XP", "Width", "K", "P", "C", "T", "D", "AC", "x", "S", "W", "IX", "XXX", "I", "TX", "Z", "U", "R", "J", "M", "XL", "N", "G"]}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10 ** 6)\\nint1 = lambda x: int(x) - 1\\np2D = lambda x: print(*x, sep=\"\\n\")\\ndef MI(): return map(int, sys.stdin.readline().split())\\ndef LI(): return list(map(int, sys.stdin.readline().split()))\\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\\n\\ndef main():\\n    n, k = MI()\\n    xy = []\\n    xx = []\\n    yy = []\\n    for _ in range(n):\\n        x, y = MI()\\n        xy.append([x, y])\\n        xx.append(x)\\n        yy.append(y)\\n    xx.sort()\\n    yy.sort()\\n    #print(xx)\\n    #print(yy)\\n    xtoi = {x: i for i, x in enumerate(xx)}\\n    ytoj = {y: j for j, y in enumerate(yy)}\\n    cs2d = [[0] * (n + 1) for _ in range(n + 1)]\\n    for x, y in xy:\\n        i, j = xtoi[x], ytoj[y]\\n        cs2d[i + 1][j + 1] = 1\\n    #p2D(cs2d)\\n    for i in range(1, n + 1):\\n        for j in range(1, n + 1):\\n            cs2d[i][j] += cs2d[i][j - 1]\\n    for j in range(1, n + 1):\\n        for i in range(1, n + 1):\\n            cs2d[i][j] += cs2d[i-1][j]\\n    #p2D(cs2d)\\n    ans = 10 ** 20\\n    for ri in range(n):\\n        r = xx[ri]\\n        for li in range(ri):\\n            l = xx[li]\\n            for ti in range(n):\\n                t = yy[ti]\\n                for bi in range(ti):\\n                    b = yy[bi]\\n                    cnt = cs2d[ri+1][ti+1]-cs2d[ri+1][bi]-cs2d[li][ti+1]+cs2d[li][bi]\\n                    if cnt >= k:\\n                        s = (r - l) * (t - b)\\n                        if s < ans: ans = s\\n    print(ans)\\n\\nmain()\\n", "target": "540", "substitutes": {"int1": ["floatD", "x1", "intD", " int3", "int3", " intD", "float1", "x3", "float3", "xD"], "p2D": ["p3D", " i2D", "p7D", "p7d", "p2P", " i2M", "p3d", "p2d", "p7M", "p7P", "p3M", " i2P", "p2M", "p3P", " i2d"], "rows_number": ["rows_range", "rows_numbered", "lines_numbered", "rowslenrange", " rows_range", "rows_num", "lines_number", " rows_numbered", "rows_zero", "rowslennumbered", "rowslennum", "rowslennumber", "lines_zero", "lines_num", " rows_num"], "_": [" inter", " block", "__", " local", "ing", " seq", " time", " line", " pool", " un", " set", "l", " over", "out", "f", " post", " dev", "ac", " non", " mem", " rel", " sub", " full", " col"], "n": ["s", "p", "g", "c", "i", "o", "number", "num", "r", "net", "z", "w", "l", "u", "d", "nn", "q", "j", "f", "network", "m", "ns", "no", "v", "b", "t", "N", "e"], "k": ["km", "ke", "p", "g", "c", "i", "K", "o", "kk", "ks", "z", "kw", "w", "ok", "u", "q", "j", "sk", "f", "yk", "m", "ky", "v", "key", "e"], "xy": ["dd", "dy", "ie", "code", "XX", "p", "zx", "phi", "px", "pos", "iter", "ne", "z", "zy", "index", "xxxx", "xxx", "wy", "cross", "flat", "lines", "wx", "nn", "nt", "quad", "f", "xi", "XY", "data", "oxy", "key", "zip", "py", "vy", "xc", "qq", "part", "xxxxxxxx"], "xx": ["ss", "dd", "dy", "code", "XX", "X", "something", "h", "rx", "px", "inf", "z", "zy", "xxx", "xxxx", "index", "wy", "fy", "cross", "ny", "wx", "nn", "nz", "zz", "pp", "ww", "xi", "XY", "inx", "b", "key", "ls", "py", "xc", "qq", "abc", "xxxxxxxx"], "yy": ["ss", "yd", "YY", "dd", "dy", "XX", "zx", "yx", "eeee", "z", "zy", "xxx", "xxxx", "wy", "uy", "cy", "fy", "cross", "ny", "nn", "j", "ky", "zz", "XY", "oy", "foo", "py", "vy", "qq", "isy", "ey", "xxxxxxxx"], "x": ["dx", "int", "code", "python", "X", "p", "XX", "event", "ic", "xs", "c", "i", "something", "g", "rx", "h", "px", "ix", "o", "number", "z", "xt", "ex", "xxx", "index", "xxxx", "w", "cross", "l", "php", "wx", "d", "u", "one", "f", "ax", "m", "ww", "xi", "ux", "self", "data", "xe", "xp", "xml", "v", "b", "e", "string", "xes", "word", "xc", "xxxxxxxx"], "y": ["yr", "s", "ys", "dy", "ye", "p", "Y", "c", "i", "o", "ym", "z", "xxx", "yi", "cy", "w", "ny", "l", "u", "d", "q", "j", "f", "sy", "m", "ya", "v", "b", "e", "t", "vy", "ry", "ey", "ies"]}}
{"code": "n=int(input())\\nl=list(map(int,input().split()))\\nans=[0]*n\\nfor i in range(len(l)):\\n    ans[l[i]-1]=i+1\\nprint(*ans)", "target": "736", "substitutes": {"n": ["k", "L", "p", "g", "c", "o", "number", "nc", "num", "r", "nu", "ne", "z", "fn", "nan", "sn", "ny", "cn", "nn", "nt", "max", "ln", "f", "j", "m", "ns", "no", "ni", "nl", "len", "b", "t", "N", "pn", "nb", "an"], "l": ["lp", "s", "k", "loc", "ol", "L", "p", "c", "o", "sl", "r", "log", "el", "lr", "la", "left", "lc", "kl", "z", "lines", "u", "ll", "f", "ln", "dl", "j", "m", "rl", "list", "nl", "fl", "len", "b", "v", "e", "ls", "le", "li", "ul", "lin"], "ans": ["s", "a", "ents", "lan", "span", "ins", "eps", "p", "na", "ps", "ats", "ions", "en", "AN", "ANS", "anes", "la", "mean", "ann", "ani", "anc", "ana", "x", "can", "nan", "cross", "args", "lines", "aned", "nn", "ons", "ln", "ens", "leans", "ants", "ns", "scan", "ases", "list", "os", "nl", "len", "an"], "i": ["gi", "k", "ui", "a", "int", "qi", "mi", "p", "phi", "ai", "c", "y", "h", "o", "ini", "pos", "iu", "slice", "lo", "lc", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "u", "d", "pi", "q", "j", "f", "m", "xi", "ri", "ci", "v", "b", "e", "col", "id", "li", "ii", "bi", "ip"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\n\\ndef main():\\n    mod=10**9+7\\n    ans=-1\\n    \\n    A,B=MI()\\n    for i in range(10000):\\n        a=int(i*0.08)\\n        b=int(i*0.1)\\n        \\n        if a==A and b==B:\\n            ans=i\\n            break\\n        \\n    print(ans)\\n\\n\\nmain()\\n", "target": "418", "substitutes": {"input": ["call", "raw", " data", " output", "magic", "int", "text", "reader", "request", "method", "default", "gui", "init", "visible", "element", "inside", "unknown", "format", "interface", " inputs", "instance", "result", "inf", "empty", "temp", "array", "index", "expression", "image", "file", "version", "exec", "I", "current", "accept", " Input", "lib", "json", "pull", "output", "parent", "list", "data", "Input", " int", "single", "type", "util", "view", "select", "string", "xml", "print", "keep", "submit", "filter", "source", "form", "feed", "radio"], "mod": ["modules", "mode", "min", "auto", "MOD", "ms", "mult", "ix", "im", "times", "reg", "Mod", "mini", "sim", "module", "cm", "pi", "ace", "d", "m", "ac", "man", "mods", "mac", "mm", "li", "rad", "ip"], "ans": ["ano", "aid", "ents", "lan", "cas", "span", "amps", "ras", "na", "ai", "ms", "umi", "Ann", "ions", "Na", "anas", "AN", "ANS", "ks", "aces", "ann", "anc", "ani", "ays", "ana", "can", "S", "An", "ars", "ia", "I", "aves", "aned", "parts", "aus", "ki", "sa", "ants", "ns", "os", "ci", "san", "actions", "mods", "LI", "ls", "ians", "ds", "an", "ins"], "A": ["F", " AA", "Ca", "L", "AI", "Y", "ai", "IA", "LA", "EA", "Si", "Na", "SA", "P", "C", "mA", "AC", " IA", "As", "D", "au", "AA", "Alpha", "S", "I", "PA", "Ma", "CA", "Ra", "U", "AF", "alpha", "M", "N", "KA", "G", "NA", "Fa", "An"], "B": ["F", "E", "L", "X", "Y", "CB", "BA", "AB", "O", "P", "C", "D", "BB", "BI", "S", "TB", "BD", "W", "I", "RB", "BE", "Z", "BL", "OB", "WB", "U", "BS", "M", "NB", "BM", "QB", "N", "VB", "BF", "Ub", "Bs"], "i": ["gi", "min", "s", "k", "ui", "ami", "int", "qi", "p", "phi", "ai", "inter", "c", "h", "y", "r", "ini", "ix", "iu", "ti", "z", "mini", "si", "index", "x", "ind", "start", "I", "l", "u", "d", "idi", "pi", "j", "f", "io", "m", "xi", "ci", "ip", "e", "multi", "id", "li", "ii", "bi", "n"], "a": ["aa", "sta", "ao", "va", "ma", "p", "na", "ai", "ama", "c", "aw", "fa", "ba", "ab", "au", "ana", "pa", "af", "ia", "ak", "u", "ca", "sa", "ac", "asa", "am", "ae", "oa", "an", "ad", "n"], "b": ["aa", "be", "k", "s", "ib", "fb", "p", "bs", "c", "y", "wb", "mb", "ba", "ab", "z", "x", "sb", "l", "bf", "rb", "bb", "ub", "d", "abb", "bd", "eb", "f", "br", "v", "abe", "abc", "lb", "bi", "ad", "n"]}}
{"code": "import itertools\\nimport math\\n\\nN=int(input())\\nzahyou=[list(map(int,input().split()))for i in range(N)]\\njyunban=list(itertools.permutations(range(N)))\\ndist=list()\\nfor i in range(len(jyunban)):\\n    tmp=0\\n    for j in range(N-1):\\n        tmp+=math.sqrt((zahyou[jyunban[i][j]][0]-zahyou[jyunban[i][j+1]][0])**2+(zahyou[jyunban[i][j]][1]-zahyou[jyunban[i][j+1]][1])**2)\\n    dist.append(tmp)\\nprint(sum(dist)/math.factorial(N))", "target": "611", "substitutes": {"N": ["F", "MN", " M", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "Num", "NS", "K", "num", "NM", "O", "P", "T", "C", "B", "D", "Len", " C", "Ne", "S", "W", "I", "NT", "OS", "Z", "Ns", "R", "M", "J", "GN", " n", "NUM", " size", "n"], "zahyou": ["zihYou", "zihopen", "zaharYou", "zihyou", "zoyyou", "zayou", "zahopen", "zachyour", "zohupid", "jahyou", "jihyou", "zuhou", "jahYou", "jahana", "zlahyou", "zayYou", "zohyour", "zachyou", "yahyour", "yohyou", "zohYou", "juhYou", "jahou", "jahplus", "zuhana", "juhupid", "zohou", "zlahupid", "jahyour", "juhou", "zohana", "zahupid", "zayyou", "juhana", "jahopen", "zuhYou", "zachopen", "yohYou", "zoyyour", "jihopen", "zahYou", "jihyour", "zaharyou", "zuhyour", "yahopen", "zohplus", "zachYou", "zohopen", "zahyour", "zaharana", "zuhupid", "zoyopen", "zoyYou", "zahou", "juhyou", "zahana", "jihYou", "juhplus", "yohyour", "zohyou", "zahplus", "zuhyou", "jahupid", "yohopen", "yahYou", "zihyour", "yahyou", "zlahyour", "juhyour", "zuhplus", "zaharyour", "zayplus", "zlahYou"], "i": ["gi", "ji", "s", "k", "ui", "a", "ie", "int", "qi", "p", "ai", "y", "o", "jj", "ini", "ix", "iu", "ti", "z", "si", "index", "x", "yi", "ind", "I", "ia", "it", "l", "uri", "u", "pi", "d", "ki", "io", "f", "m", "xi", "ri", "ni", "ci", "ip", "isi", "v", "b", "e", "info", "id", "li", "ii", "ik", "n"], "jyunban": ["jyunak", "jayuncat", "jyaunban", "jydenfen", "jytuntcomment", "jyunscan", "jayuntcat", "jyunafen", "jytunman", "jyfuncat", "jymmunban", "jyuntcomment", "jyaunfen", "jyuntscan", "jyumbank", "jyaumcomment", "jyfunban", "jyunbin", "jytuncat", "jayunban", "jydenban", "jyunfa", "jytenban", "jyoubn", "jymmunscan", "jyumban", "jymunfa", "jyenbank", "jyuntban", "jyuntcat", "jytunbin", "jyoncat", "jyuntk", "jyencat", "jyuncat", "jayunbank", "jytuntbin", "jymmunbank", "jytenbn", "jayunfa", "jyfunbin", "jyunacomment", "jymunbank", "jyaumk", "jyfunman", "jyumk", "jyouk", "jyunfen", "jymmunman", "jyaumfen", "jytunfen", "jyouman", "jyuncomment", "jyunbn", "jyaumban", "jyuntfen", "jymuncat", "jyumbn", "jytuncomment", "jydencat", "jyonfa", "jytunban", "jyunacat", "jyumfen", "jyouban", "jyenbn", "jyunaban", "jytunbn", "jyauncomment", "jyunman", "jydencomment", "jytenbank", "jyumcomment", "jayuntfa", "jytunbank", "jyuntman", "jyonban", "jytuntcat", "jyuntbank", "jyunbank", "jyenbin", "jyenk", "jytunk", "jyuntfa", "jyenman", "jytuntfen", "jyonbank", "jytuntban", "jayuntbank", "jyaunk", "jytenk", "jyuntbin", "jyouscan", "jymunman", "jymunban", "jyunk", "jyenban", "jayuntban", "jytuntman", "jyoubank", "jymunscan"], "dist": [" distance", "cmp", "rest", "missing", "dir", "p", "distance", "exp", "err", " Dist", "extra", "dj", "Distance", "result", "num", "results", "prev", "push", "desc", "temp", "div", "array", "search", "diff", "dest", "comp", "req", "dis", "nt", "shift", "Dist", "transfer", "list", "data", "features", "match", "tree", "check", "dev", "np", "order", "det", "progress", "range", "part", "form", "test", "info"], "tmp": ["km", "cmp", "const", "int", "part", "tt", "prop", "p", "phi", "distance", "fb", "fp", "extra", "tp", "result", "kk", "cp", "beta", "txt", "sp", "temp", "proc", "mp", "div", "xt", "diff", "adj", "obj", "pi", "sup", "dt", "term", "output", "duration", "data", "stuff", "np", "pot", "nb", "test"], "j": ["em", "ji", "k", "ie", "code", "ja", "p", "jen", "g", "c", "jo", "y", "dj", "jj", "o", "h", "iu", "jit", "jl", "z", "je", "si", "jet", "x", "w", "adj", "obj", "it", "l", "u", "uj", "d", "q", "js", "jp", "job", "f", "m", "jc", "br", "aj", "jam", "ij", "J", "v", "b", "e", "kj", "li", "ii", "n", "ip"]}}
{"code": "n = int(input())\\nimport math\\nfor i in range (50000):\\n  x = i*1.08\\n  if math.floor(x) == n:\\n    print(i)\\n    exit()\\nprint(\":(\")", "target": "194", "substitutes": {"n": ["min", "s", "name", "k", "p", "c", "o", "number", "nc", "r", "num", "y", "ne", "z", "fn", "index", "nan", "sn", "w", "l", "d", "nn", "max", "f", "j", "m", "ns", "b", "np", "t", "N", "e", "nb", "an"], "i": [" p", "k", "a", "int", " it", " z", "p", "phi", "init", "c", " I", "y", " e", "ini", " ip", " c", "ix", "iu", "z", " f", "si", "index", "ind", "start", " il", "I", "uri", "l", "it", "u", "pi", "d", "j", "f", "m", " j", "xi", "input", "ci", "v", "b", " ii", "e", "t", "id", "li", "ii"], "x": ["k", "int", "python", "X", "p", "xs", "c", "xx", "y", "o", "h", "ix", "number", "rx", "num", "z", "ex", "index", "cross", "w", "l", "u", "d", "q", "f", "j", "m", "xi", "v", "b", "e", "t"]}}
{"code": "N=int(input())\\nfor i in reversed(range(1,N+1)):\\n  if (i**.5).is_integer():\\n    print(i)\\n    exit()", "target": "330", "substitutes": {"N": ["F", "L", "V", "NN", "NL", "H", "X", "Y", "Size", "NS", "NE", "K", "number", "Na", "O", "P", "T", "C", "B", "D", "NH", "Ne", "S", "A", "I", "NT", "Node", "Ni", "Z", "Ns", "R", "M", "J", "NB", " n", "NA", "n"], "i": ["gi", "k", "a", "int", "chi", "p", "phi", "ai", "c", "h", "ini", "iter", "z", "si", "index", "x", "ind", "start", "current", "I", "it", "l", "d", "pi", "j", "m", "xi", "input", "data", "ci", "b", "v", "key", "e", "count", "id", "ii", "n", "bi", "ip"]}}
{"code": "r = float(input())\\n\\npi = 3.141592653589793\\nprint(pi*r**2, 2*pi*r)\\n", "target": "758", "substitutes": {"r": ["rh", "s", "k", "mr", "ur", "p", "c", "i", "rate", "h", "rx", "radius", "o", "rf", "pr", "lr", "x", "ar", "l", "rb", "d", "u", "f", "range", "sr", "rc", "m", "rg", "rt", "R", "alpha", "nr", "b", "v", "t", "e", "fr", "kr", "cr", "pc", "rs", "n"], "pi": ["lp", "PI", "k", "chi", "p", "phi", "c", "i", "radius", "pm", "pr", " PI", "lr", "api", "si", "scale", "pa", "x", "l", "bb", "d", "f", "frac", "m", "xi", "R", "Pi", "ci", "alpha", "b", "v", "pixel", "t", "kr", "py", "n", "pc"]}}
{"code": "n = int(input())\\n\\nnums = list(map(int, input().split()))\\n\\nans = 0\\nfor idx in range(1, n):\\n    if nums[idx] - nums[idx-1] < 0:\\n        ans += abs(nums[idx] - nums[idx-1])\\n        nums[idx] = nums[idx-1]\\n\\nprint(ans)", "target": "680", "substitutes": {"n": ["k", "p", "na", "c", "i", "y", "number", "nc", "num", "o", "net", "nu", "ne", "z", "fn", "x", "nan", "sn", "zn", "l", "d", "nn", "network", "f", "j", "m", "Ns", "ns", "no", "nl", "ni", "len", "b", "np", "t", "N", "nb", "nor"], "nums": ["cumbers", "Nums", " nals", " numeric", "cumeric", "uodes", " numer", "cals", "nummies", "enals", "Numer", "Num", "lumbers", "uummies", "num", "numer", "Numbers", "inals", "cum", "annoms", " nules", "uals", "cubs", "Nummies", "annumer", "inodes", "nubs", "annums", "gnums", "lummies", "numeric", "Numeric", "enums", "cumer", "gnules", "annumbers", "inummies", "nanums", "enummies", "uums", "nanals", " noms", "nanumbers", " nubs", "gnubs", "inums", "noms", "gnumbers", "nanumer", "Nubs", "cums", " numbers", "numbers", "nals", " num", "lum", "nodes", "enodes", "Nules", "nules", "lums", "Noms", "cummies"], "ans": ["ano", "ents", "lan", "ras", "nas", "cas", "amps", "span", "na", "ai", "aning", "anas", "AN", "ANS", "anes", "ane", "ann", "anse", "ani", "anon", "anc", "ana", "ays", "au", "can", " means", "nan", "ars", "aned", "ons", "aus", "anne", "leans", "sk", "ants", "ns", "man", "scan", "san", "ls", "ds", "an"], "idx": ["pidz", "minxs", "indexX", "idexb", "Idxs", "ridx", " idna", " idy", "Idx", "miny", "ridy", "Idxes", "pidxx", "idna", "indexx", "idexc", "indexna", "idxes", " idxes", "minx", "IDxx", "IDy", "idX", "idy", "IDz", "pidX", "pidxc", "idex", " idxs", "Idz", "ridxes", "minz", " idz", "inxs", "IdX", "idxb", "idxc", "inxb", " idxx", "Idxc", "idxx", "idexs", "inx", "pidx", "inxc", "IDx", "idz", " idxb", "Idy", " idxc", " idX", "indexy", "Idna", "idxs", "pidy", "ridX"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\ndef mapint(): return map(int, input().split())\\nsys.setrecursionlimit(10**9)\\n\\nA, B = input().split()\\nB = int(''.join(B.split('.')))\\n\\nprint(int(A)*B//100)", "target": "44", "substitutes": {"A": ["F", "GA", "E", "Ca", "a", "L", "H", "X", "Y", "IA", "LA", "AR", "TA", "EA", "AB", "O", "AW", "P", "C", "T", "D", "AC", "SA", "API", "AA", "S", "W", "I", "Data", "CA", "U", "AF", "Input", "M", "N", "G", "Am", "HA"], "B": ["F", "E", "Number", "L", "LB", "V", "H", "Q", "X", "Y", "UB", "K", "PB", "Bi", "BA", "AB", "O", "P", "T", "C", "D", "SB", "IP", "BB", "BC", "BI", "TB", "W", "I", "Bytes", "BE", "Z", "BL", "OB", "WB", "U", "R", "GB", "M", "J", "b", "NB", "N", "QB", "G", "BER", "BF", "Bs"]}}
{"code": "def val(num):\\n    print(num, flush=True)\\n    sex = input()\\n    if sex == \"Vacant\":\\n        exit(0)\\n    return 1 if sex == \"Male\" else 0\\n\\n\\nn = int(input())\\n\\nl_sex = val(0)\\nr_sex = val(n - 1)\\n\\nleft = 0\\nright = n - 1\\n\\nwhile left < right:\\n    mid = (left + right) // 2\\n    sex = val(mid)\\n    if (mid - left) % 2 == 0 and sex != l_sex:\\n        right = mid\\n        r_sex = sex\\n    elif (mid - left) % 2 == 1 and sex == l_sex:\\n        right = mid\\n        r_sex = sex\\n    else:\\n        left = mid\\n        l_sex = sex", "target": "344", "substitutes": {"num": ["min", "name", "zero", "unit", "text", "loc", "int", "code", "dom", "init", "Num", "number", "nom", "nu", "div", "index", "x", "oct", "valid", "node", "d", "max", "one", "m", "dim", "len", "np", "count", "multi", "id", "nb", "form", "test", "sum"], "sex": ["ss", "name", "loc", "zero", "false", "com", "event", "plus", "sect", "im", "la", "sign", "x", "female", "f", "status", "model", "gender", "data", "length", "zip", "sem", "xy", "yet", "se", "sense", "nexus", "mode", "ie", "general", "xx", "male", "sometimes", "temp", "xxxx", "cross", " Sex", "www", "function", "string", "Sex", "id", "source", "form", "xxxxxxxx", "species", "spec", "cas", "sexual", "lex", "number", "case", "woman", "size", "ex", "es", "sn", "wife", "marriage", "ww", "match", "alpha", "view", "girlfriend", "mix", "text", "na", "night", "cess", "ception", "wh", "ident", "xxx", "sim", " gender", "six", "term", "null", "su", "test"], "n": [" N", "name", "k", "s", "p", "na", "nm", "c", "i", " ni", "o", "number", "nc", "y", "h", "r", "ne", "nu", "z", " ne", "x", "sn", "w", "node", "l", "d", " nu", "nn", "nt", "f", "j", "m", "ns", "\u00f1", "no", "nl", "ni", "nr", "len", "b", "t", "N", "count", "all", "nb"], "l_sex": ["l_female", " l_female", "rl_lex", "l_sexual", " l_model", "l_lex", "r_gender", "rl_sexual", "r_case", "l_model", "rl_sex", "le_lex", "l__name", "l_name", "rl_gender", "le_sex", "l_gender", " l_name", "le_female", "l__sex", "l__model", "l__female", "l_case"], "r_sex": ["l_female", "rh_sex", "r___gender", " r_lex", "r_female", "r_sexual", " r_female", "l_sexual", "rh_sem", "rh___sem", "r_lex", "r___sex", "rh___sex", "r_sem", "r_gender", "rh___gender", "rh_gender", "r___sem"], "left": ["min", "loc", "leave", "level", "plus", "Left", "x", "l", "length", "inner", "li", "part", "lo", "full", "L", "low", "pos", "lc", "ne", "two", "child", "member", "half", "old", "small", "len", "all", "id", "form", "middle", "last", "nd", "lex", "case", "lower", "size", "ind", "start", "pl", "d", "less", "max", "eight", "m", "parent", "day", "ell", "le", "front", "end", "line", "side", "diff", "nt", "one", "term", "down", "cl"], "right": ["rh", "middle", "end", "rest", "value", "rights", "third", "method", "p", "correct", "c", "plus", "inside", "rw", "h", "r", "rd", "rx", "head", "round", "this", "x", "partial", "w", "start", "reverse", "only", "Right", "th", "d", "max", "row", "one", "ax", "three", "m", "wrong", "none", "half", "back", "short", "rel", "parent", "no", "length", "alpha", "ra", "pair", "id", "inner", "part"], "mid": ["min", "mouse", "int", "mer", "ms", "medium", "main", "grand", "hyp", "mitt", "mind", "mand", "shift", "lim", "data", "med", "high", "sub", "Mid", "part", "mad", "mi", "lat", "center", "low", "pos", "cm", "half", "small", "man", "hi", "len", "multi", "id", "mit", "middle", "nd", "nm", "case", "lower", "md", "long", "grid", "dem", "cent", "quarter", "pard", "ind", "start", "max", "m", "different", "mate", "parent", "dim", "end", "line", "late", "south", "top", "night", "mini", "rand", "diff", "master", "partial", "patch", "nt", "mm", "month", "range"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nprint('DENIED' if sum(ai % 3 != 0 and ai % 5 != 0 for ai in a if ai % 2 == 0) else 'APPROVED')", "target": "381", "substitutes": {"n": ["s", "ain", "p", "na", "g", "c", "i", "y", "r", "Na", "num", "z", "x", "adj", "cn", "d", "j", "m", "ns", "ni", "b", "N", "nb", "an"], "a": ["aa", "wa", "span", "p", "access", "acc", "na", "c", "i", "fa", "y", "ba", "ab", "z", "x", "A", "ar", "w", "ia", "d", "ca", "j", "sa", " A", "ac", "am", "aj", "ae", "alpha", "b", "ea", "all", "an", "ad"], "ai": ["aa", "int", "chi", "issue", "na", "p", "acc", "access", "qa", "c", "ash", "i", " ac", "dat", "fa", "aii", "ay", "air", "ba", "ani", "au", "ais", "pa", "A", "af", "mu", "adj", "ia", "ass", "ta", "ca", "sa", "agi", "ac", "iat", "ait", "aj", "amin", "am", "ae", "ci", "alpha", " order", "dim", "b", "ha", "order", "all", "aut", "sub", "pai", "config", "an", "bi", "ad"]}}
{"code": "s = list(input())\\nt = list(input())\\n\\nfor i in range(len(s)-len(t), -1, -1):\\n    flag = True\\n    for j in range(len(t)):\\n        if not(s[i+j] == t[j] or s[i+j] == '?'):\\n            flag = False \\n    if flag :\\n        for j in range(len(t)):\\n            s[i+j] = t[j]\\n        for k in range(len(s)):\\n            if s[k] == '?':\\n                s[k] = 'a'\\n        print(''.join(s))\\n        exit()\\nprint('UNRESTORABLE')\\n", "target": "312", "substitutes": {"s": ["ss", "sq", "a", "sh", "strings", "south", "qs", "service", "p", "states", "ps", "g", "c", "xs", "sym", "sets", "y", "o", "r", "ks", "z", "si", "es", "search", "x", "S", "st", "w", "sb", "args", "l", "services", "ses", "d", "u", "parts", "q", "less", "f", "sa", "ssl", "m", "cs", "sync", "sort", "ns", "self", "ws", "input", "os", "abs", "ts", "b", "v", "gs", "string", "e", "ls", "ds", "se", "source", "n"], "t": ["a", "python", "at", "tt", "tw", "p", "to", "g", "c", "target", "y", "h", "tp", "o", "tools", "r", "pt", "T", "tf", "unt", "temp", "z", "ty", "x", "st", "flat", "ant", "it", "l", "u", "d", "ta", "f", "m", "rt", "qt", "b", "v", "ts", "e", "test", "n"], "i": ["ji", "ui", "vi", "a", "ie", "int", "qi", "mi", "p", "ai", "c", "o", "y", "h", "ix", "ini", "iu", "z", "si", "eni", "index", "x", "ind", "I", "l", "u", "pi", "ki", "f", "io", "xi", "di", "ni", "ci", "ij", "v", "b", "e", "id", "li", "ii", "ik", "n", "bi", "ip"], "flag": ["field", "group", "int", "code", "arg", "stat", "use", "log", "like", "sign", "force", "long", "si", "store", "af", "ind", "start", "only", "l", "star", "sy", "f", "lag", "sort", "sa", "style", "flags", "fun", "sync", "FLAG", "status", "back", "kind", "mask", "type", "key", "v", "debug", "count", "standard", "id", "bit", "filter", "skip", "part", "Flag", "offset"], "j": ["ji", "end", "ie", "int", "str", "ja", "p", "_", "g", "c", "jo", "o", "y", "jj", "r", "h", "jl", "z", "je", "si", "ch", "x", "ind", "w", "it", "l", "u", "d", "uj", "q", "js", "f", "jp", "ki", "m", "job", "aj", "ij", "J", "v", "b", "key", "e", "li", "ii", "part", "n"], "k": ["km", "ji", "kid", "ke", "p", "kh", "g", "c", "K", "y", "h", "o", "kk", "ijk", "ks", "kn", "z", "x", "kw", "w", "ind", "ok", "u", "d", "q", "ki", "f", "sk", "m", "ku", "mask", "v", "key", "ck", "e", "id", "kj", "ik", "n"]}}
{"code": "import sys\\nread = sys.stdin.read\\nreadlines = sys.stdin.readlines\\ndef main():\\n    n = int(input())\\n    pre_t = 0\\n    pre_x = 0\\n    pre_y = 0\\n    for _ in range(n):\\n        t, x, y = map(int, input().split())\\n        d_dis = abs(x - pre_x) + abs(y - pre_y)\\n        d_t = abs(t - pre_t)\\n        if d_dis > d_t:\\n            print('No')\\n            sys.exit()\\n        elif (d_t - d_dis) % 2 == 1:\\n            print('No')\\n            sys.exit()\\n        else:\\n            pre_t = t\\n            pre_x = x\\n            pre_y = y\\n    print('Yes')\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "726", "substitutes": {"read": ["raw", " data", "end", "open", "reader", " write", "win", "stream", "default", "g", " readers", "load", "lex", "rx", "Read", " copy", "wake", "content", "connect", "write", "proc", "long", "run", "READ", "w", " stream", "current", "d", "readable", "walk", "console", " reads", "df", "input", "data", "reads", "type", "reading", " Read", " reader", "feed"], "readlines": ["inputline", "readcodes", "Readnames", "Readline", " readcodes", " readnames", " readline", "Readlines", "readnames", "inputlines", "readline", "inputcodes", "Readcodes", "inputnames"], "n": ["k", "a", "p", "c", "i", "o", "nc", "num", "en", "net", "number", "r", "ot", "ne", "nu", "z", "fn", "sn", "w", "l", "d", "nn", "nt", "f", "j", "m", "ns", "no", "ni", "len", "v", "b", "N", "e", "nb"], "pre_t": ["prePy", "prePT", " prePy", "p_t", "p_y", "pre2y", "pre2x", "pre_tt", " pre_T", "pre_T", " prePT", "prePz", " prePz", " pre_p", "pre_p", "pre2tt", "p_tt", "p_x", " prePt", "pre_z", " pre_z", "pre2t", "prePt"], "pre_x": ["pre67n", "p_y", "pre00max", "p_index", "prej1", "pre_n", "pre_max", "pre67x", "pre00x", "pre_index", "p_max", "pre_1", "prejmax", "prejy", "prejx", "pre00y", "pre001", "p_x", "p_n", "pre67y", "pre_z", " pre_z", "p_1", "pre67index"], "pre_y": ["pre___x", "prev_yt", "pre_b", "pre_yy", "prev_yy", "pre_yt", " pre_ya", "pre___ya", "pre_ya", "prev_y", " pre_ey", "pre___y", "prev_b", "pre_z", " pre_z", "pre___ey", "pre_ey"], "_": [" p", " time", " __", " k", " q", " no", " loop", " non", " self", " syn", " d"], "t": ["s", "int", "at", "tt", "p", "g", "c", "i", "o", "r", "ot", "tp", "h", "pt", "T", "ti", "z", "ty", "w", "start", "it", "l", "yt", "u", "d", "nt", "max", "ta", "f", "dt", "m", "ts", "v", "b", "type", "e", "test", "total"], "x": ["k", "a", "int", "X", "p", "xs", "c", "i", "xx", "width", "post", "o", "h", "ix", "px", "rx", "T", "size", "z", "xt", "on", "ex", "ty", "index", "w", "l", "u", "d", "max", "f", "ax", "m", "xi", "ct", "v", "b", "e", "xy", "id"], "y": ["s", "a", "ys", "dy", "int", "python", "ye", "p", "Y", "c", "i", "o", "ym", "T", "z", "ty", "yi", "yo", "cy", "w", "start", "ny", "yt", "l", "d", "j", "sy", "m", "yy", "ya", "type", "v", "b", "e", "xy", "py", "vy", "ey"], "d_dis": ["dJdist", "d_Dis", "dJt", "nJdis", " d__dis", " d__Dis", " d_Dis", "d_dist", "n_dis", " d_des", "dJno", " d__de", " d__t", "d_no", "d_com", "nJno", "dFt", "dJy", "dFdes", "nJy", "d__de", "d__dis", "d_de", "n_y", "dFdis", "dJdis", " d_de", "d__Dis", "d_des", "dJDis", "dJde", "d_y", "n_dist", "d__t", "n_no", "nJdist", "dFcom", " d_com"], "d_t": ["d_dist", "d_f", "d_wt", "d8t", " d_n", "pre_d", "djwt", "d_n", "d8dis", "pre_n", "d_e", "djdis", "d_d", "pre_f", "d8e", "djt", "d8n", "djdist", " d_dist", " d_e", " d_wt"]}}
{"code": "# https://atcoder.jp/contests/abc152/submissions/9693323\\n\\nimport sys\\nread = sys.stdin.read\\n\\nN, *A = map(int, read().split())\\nmod = 10 ** 9 + 7\\n\\n\\ndef min_factor(n):\\n    sieve = list(range(n + 1))\\n    sieve[2::2] = [2] * (n // 2)\\n    for i in range(3, int(n ** 0.5) + 2, 2):\\n        if sieve[i] == i:\\n            sieve[i * i::2 * i] = [i] * ((n - i * i) // (2 * i) + 1)\\n    return sieve\\n\\n\\ndef prime_factorize(n):\\n    a = {}\\n    while n != 1:\\n        b = table[n]\\n        if b in a:\\n            a[b] += 1\\n        else:\\n            a[b] = 1\\n        n //= b\\n    return a\\n\\n\\ntable = min_factor(10**6)\\n\\ndic = {}\\nfor i in A:\\n    for key, value in prime_factorize(i).items():\\n        if key in dic:\\n            dic[key] = max(dic[key], value)\\n        else:\\n            dic[key] = value\\n\\nlcm = 1\\nfor i, j in dic.items():\\n    lcm *= pow(i, j, mod)\\n    lcm %= mod\\n\\nanswer = sum(lcm * pow(i, mod - 2, mod) for i in A) % mod\\nprint(answer)\\n", "target": "477", "substitutes": {}}
{"code": "from heapq import heapify,heappush,heappop\\nN, M = map(int, input().split())\\n\\nI = [[] for _ in range(N)]\\nfor i in range(M):\\n  A, B = map(int, input().split())\\n  A -= 1\\n  B -= 1\\n  I[A].append(B)\\n  I[B].append(A)\\n\\ntask = [] \\nused = [0 for _ in range(N)]\\nmin_len = [0 for _ in range(N)]\\nlength = [10**20 for _ in range(N)]\\nprev_points = [0 for _ in range(N)]\\nheappush(task, (0, 0, -1))\\nprint(\"Yes\")\\n\\nwhile task:\\n  while task:\\n    l, p, prev = heappop(task)    \\n    if used[p] == 0:\\n      break\\n  #print(task)\\n  used[p] = 1\\n  min_len[p] = l\\n  prev_points[p] = prev +1 #\u756a\u53f7\u30921\u305a\u3089\u3059\\n  \\n  for j in I[p]:\\n    if used[j] == 1: continue\\n    #print(p,j)\\n    if length[j] > l+1:\\n      length[j] = l+1\\n      heappush(task, (l+1, j, p))\\n    \\nfor i in range(1, N):\\n  print(prev_points[i])", "target": "616", "substitutes": {"N": ["IC", "F", "E", "L", "V", "NN", "H", "Q", "X", "Y", "NC", "Size", "Num", "NS", "NE", "NI", "K", "NM", "CNN", "O", "P", "T", "C", "D", "Ne", "S", "W", "RN", "Z", "II", "Ns", "U", "R", "J", "GN", " n", "NUM", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "K", "NM", "O", "MON", "P", "T", "C", "D", "LM", "S", "W", "CM", "Z", "m", "U", "R", "J", "MU", "G", "n"], "I": ["F", "PI", "E", "IN", "L", "KI", "V", "IL", "CI", "Q", "X", "AI", "Y", "MI", "IE", "SI", "O", "P", "C", "T", "D", "IJ", "IP", "API", "BI", "S", "Info", "We", "IM", "IO", "Z", "II", "HI", "U", "Input", "LI", "G", "VI"], "_": ["s", "line", "__", "code", "non", "al", "ing", "o", "of", "un", "ay", "app", "long", "x", "user", "d", "q", "out", "f", "am", "ip", "t", "e", "all", "id", "val", "n", "block"], "i": ["k", " bi", "c", " id", " iP", " c", "D", "x", "ind", "d", "j", " j", "ip", "b", " ii", "id", " index", " b", " d", "n"], "A": ["F", "E", "a", "L", "H", "Q", "X", "AS", "Y", "AP", "IA", "LA", "AR", "TA", "This", "BA", "AW", "O", "SA", "P", "C", "mA", "D", "T", "Ar", "AC", "API", "As", "AA", "And", "S", "W", "Ab", "PA", "AB", "CA", "U", "R", "AF", "G", "HA", "An"], "B": ["F", "E", "EB", "L", "LB", "V", "H", "Q", "X", "Y", "UB", "K", "Bi", "DB", "BA", "AB", "O", "P", "C", "T", "D", "SB", "BB", "S", "TB", "W", "MB", "Ab", "BE", "Two", "OB", "WB", "II", "Beta", "U", "Blue", "R", "GB", "J", "b", "NB", "Both", "QB", "Other", "G", "BER", "BF", "Bs"], "task": ["error", "unit", "date", "text", "table", "Task", "queue", "request", "level", "event", "worker", "thread", "method", "qa", "correct", "process", "problem", "target", "delay", "work", "num", "result", "item", "instance", "section", "tag", "link", "pattern", "chapter", "array", "rule", "time", "run", "module", "file", "master", "route", "action", "pack", "ask", "patch", "child", "q", "job", "position", "point", "sync", "sequence", "input", "parent", "list", "check", "complete", "question", "project", "key", "message", "plan", "id", "trip", "activity", "test", "block", "trial"], "used": ["loaded", "uses", "usable", "finished", "Used", "using", "sent", "queue", "active", "needed", "use", "result", "USE", " Used", "left", "empty", "checked", "run", "available", "required", "failed", "users", "current", "user", " unused", "u", "items", "usage", "filled", "expected", "position", "found", "free", "ended", "us", "data", "count", "progress", "next", "sum", "total"], "min_len": ["min_num", "max_pos", "min__num", "max_len", "min__pos", "min_Len", "min__len", "max_num", "max_Len", "min_pos", "min__Len"], "length": ["Length", "k", "period", "distance", "width", "number", "weight", "P", "size", "cost", "time", "start", "position", "point", "shape", "duration", "data", "path", "len", "limit", "type", "count", "id", "range", "sum", "block", "offset", "n"], "prev_points": ["next_points", "next_point", "prev_size", "next_size", "next_pos", "prev_pos", "prev_point"], "l": ["lp", "k", "L", "g", "c", "o", "el", "left", "lc", "kl", "w", "u", "pl", "ll", "f", "ln", "j", "m", "rl", "list", "fl", "v", "b", "t", "ls", "e", "li", "lo"], "p": ["lp", "op", "pid", "pre", "ps", "bp", "c", "fp", "y", "h", "o", "r", "pr", "tp", "cp", "per", "ap", "P", "pa", "vp", "u", "pi", "q", "f", "j", "point", "pp", "m", "ip", "v", "b", "np", "t", "e", "pe", "pn", "pc", " P", "n"], "prev": ["cur", "op", "last", "pre", "post", "r", "rec", "pres", "orig", "per", "re", "tmp", "rev", "cache", "par", "current", "obj", "jp", "pp", "old", "rel", "v", "Prev", "vious", "skip", "next", "block", "ip"]}}
{"code": "def main():\\n    line = input()\\n    A, B, X = [int(n) for n in line.split()]\\n    if A > X:\\n        print('NO')\\n    elif B + A < X:\\n        print('NO')\\n    else:\\n        print('YES')\\n\\nmain()\\n", "target": "488", "substitutes": {"line": ["name", "text", "shell", "L", "code", "str", "o", "comment", "log", "lc", "time", "source", "file", "node", "user", "lines", "l", "row", "Line", "page", "out", "lf", "m", "LINE", "frame", "entry", "no", "data", "nl", "cell", "message", "word", "cl", "inline", "lin", "block", " Line"], "A": ["AD", "GA", "E", "a", "V", "AS", "Q", "Y", "AP", "IA", "LA", "AR", "AN", "BA", "AM", "O", "AW", "P", "C", "AB", "D", "AC", "Ar", "mA", "AA", "Alpha", "S", "W", "AH", "I", "Ab", "PA", "Ma", "Array", "CA", "U", "AF", "AY", "M", "N", "G", "Am", "HA", "NA", "Ac", "An"], "B": ["F", "Ben", "E", "L", "V", "H", "Q", "Y", "UB", "K", "BA", "AB", "O", "P", "C", "T", "D", "AA", "BI", "W", "I", "Z", "WB", "U", "R", "GB", "M", "J", "b", "N", "G", "Bs"], "X": ["F", "YY", "E", "L", "V", "H", "Q", "XX", "Y", "XP", "K", " x", "ZX", "FF", "O", "P", "C", "T", "D", "AC", "x", "W", "AX", "XXX", "IX", "TX", "Z", "CL", "U", "M", "XL", "N", "G"], "n": [" N", "name", "k", "a", "ner", "p", "nd", "g", "c", "i", "o", "number", "r", "num", " text", "pos", " seq", "nu", "ne", "z", "x", "nan", "sn", "w", "node", "l", "d", "nn", "nt", "f", "j", "m", " j", "ns", "no", "b", "t", "N", "e", "all", " num", "nb", " all"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\n\\nx = [0]*n\\nfor i in range(n):\\n    x[0] += (-1)**(i) * a[i]\\n    \\nfor i in range(1,n):\\n    x[i] = 2*a[i-1] - x[i-1]\\n    \\nfor i in range(n):\\n    print(x[i],end=\"\")\\n    print(\" \",end=\"\")", "target": "406", "substitutes": {"n": ["s", "k", "p", "g", "c", "y", "o", "nc", "num", "r", "h", "ne", "z", "nan", "w", "l", "u", "d", "f", "j", "m", "ns", "no", "ni", "b", "v", "np", "t", "N", "e", "nb", "an"], "a": ["aa", "s", "k", "wa", "auto", "at", "ans", "p", "na", "ai", "aw", "c", "y", "o", "ba", "ab", "z", "array", "ana", "da", "index", "A", "w", "args", "l", "u", "f", "sa", "ca", "ac", "m", "ga", "area", "am", "ae", "alpha", "b", "e", "an", "ad"], "x": ["int", "code", "python", "sex", "X", "p", "na", "xs", "c", "g", "xx", "plus", "y", "h", "o", "ix", "work", "rx", "pos", "content", "z", "array", "on", "ex", "index", "search", "w", "cross", "l", "u", "d", "q", "one", "f", "ax", "m", "xi", "input", "data", "xe", "v", "b", "xp", "t", "e", "xes", "xy", "test"], "i": ["gi", "s", "k", "ui", "ie", "int", "qi", "p", "phi", "ai", "c", "o", "y", "r", "ini", "ix", "iu", "ti", "z", "si", "index", "yi", "ind", "I", "it", "l", "u", "pi", "d", "j", "f", "io", "m", "xi", "di", "ni", "ci", "ip", "b", "v", "t", "e", "zi", "id", "li", "ii", "bi"]}}
{"code": "import math\\nr = float(input())\\ns = r * r * math.pi\\nl = 2 * r * math.pi\\nprint('%.5f %.5f' % (s, l))", "target": "758", "substitutes": {"r": ["str", " R", "p", "g", "c", "err", "i", "rate", "h", "radius", "pr", "lr", "array", "x", "ar", "math", "w", "rb", "u", "pi", "d", "q", "f", "rs", "sr", "rc", "m", "ir", "dr", "function", "rl", "rt", "rg", "R", "alpha", "nr", "v", "b", "pair", "e", "t", "fr", "range", "rad", "n"], "s": ["ss", "min", "spec", "p", "ps", "c", "i", "y", "o", "sl", "h", "z", "si", "es", "x", "S", "w", "sb", "u", "pi", "d", "f", "sr", "cs", "m", "ns", "b", "v", "e", "ls", "t", "rs", "n"], "l": ["lp", "L", " L", "p", "g", "c", "ly", "i", "dL", "o", "sl", "lr", "ml", "la", "lc", "kl", "d", "ll", "vl", "dl", "ln", "f", "lf", "m", "rl", "nl", "wl", "b", "len", "v", "yl", "e", "ls", "ell", "il", "li", "lb", "n"]}}
{"code": "r,cr,c = map(int,input().split())\\n\\nmatrix_a = [list(map(int,input().split())) for i in range(r)]\\nmatrix_b = [list(map(int,input().split())) for i in range(cr)]\\nmatrix_c = [ [0 for a in range(c)] for b in range(r)]\\n\\nfor j in range(r):\\n    for k in range(c):\\n        for l in range(cr):\\n            matrix_c[j][k] += matrix_a[j][l]*matrix_b[l][k]\\n\\nfor x in matrix_c:\\n    print(\" \".join(list(map(str,x))))", "target": "684", "substitutes": {"r": ["rh", "yr", "rr", "ur", "p", "h", "o", "pr", "z", "ar", "w", "u", "d", "rb", "q", "ra", "f", "rs", "rc", "m", "ir", "sr", "right", "R", "nr", "v", "e", "t", "ru", "range", "n"], "cr": ["rh", "yr", "cur", "sc", "Cr", "p", "y", "pr", "tr", "lc", "z", "cy", "w", "cm", "rb", "d", "u", "f", "rc", "sr", "m", "core", "cd", "br", "R", "ci", "nr", "v", "e", "kr", "col", "CR", "n"], "c": ["s", "cur", "sc", "Cr", "p", "g", "h", "ec", "C", "lc", "z", "ch", "cy", "cu", "w", "cm", "u", "d", "q", "f", "rc", "cs", "m", "ac", "dc", "cd", "ci", "v", "e", "n"], "matrix_a": ["matrices_i", "matrices_b", "matrices_area", "matrix_i", "matrix_p", "matrices_ad", "matrix__b", "matrix_ad", "matrix__area", "matrix_area", "matrix__i", "matrix__a", "matrices_p", "matrices_a"], "i": ["int", "qi", "p", "ai", "g", "o", "iu", "ind", "it", "u", "pi", "q", "f", "ir", "xi", "ri", "ci", "ij", "v", "e", "il", "id", "li", "ii", "n", "bi", "ip"], "matrix_b": ["matrix__cb", "matrices_b", "matrices_v", "matrices_B", "matrix__v", "matrix_v", "matrix1a", "matrices_cb", "matrix_e", "matrix1e", "matrix1b", "matrix__b", "matrix_cb", "matrix_B", "matrices_e", "matrix1B", "matrix__a", "matrices_a"], "matrix_c": ["matrices_cr", "matrices_b", "matrix_p", "matrix_e", "matrices_cf", "matrices_n", "matrix_cr", "matrices_e", "matrix_n", "matrix_cf", "matrices_c", "matrices_p", "matrices_a"], "a": ["aa", "ma", "p", "ai", "xa", "ab", "z", "ar", "A", "ka", "ia", "u", "d", "q", "f", "ac", "ga", "ae", "alpha", "all", "id", "an", "ad", "n"], "b": ["int", "p", "ai", "h", "y", "z", "bl", "w", "bb", "u", "d", "q", "f", "m", "br", "v", "e", "id", "lb", "n"], "j": ["ji", "ie", "ja", "p", "g", "y", "h", "o", "jj", "ijk", "el", "z", "w", "u", "d", "q", "jp", "f", "m", "ir", "jc", "br", "ij", "J", "v", "key", "e", "t", "li", "ik", "n"], "k": ["ke", "p", "g", "K", "y", "o", "kk", "ijk", "ks", "kn", "kl", "z", "w", "ko", "ak", "it", "ok", "u", "d", "q", "ki", "f", "ky", "sk", "v", "e", "id", "ik", "n"], "l": ["lp", "ji", "ol", "L", "lin", "p", "g", "o", "y", "h", "el", "lc", "kl", "z", "w", "u", "d", "ll", "q", "ln", "f", "ir", "nl", "lu", "v", "e", "t", "il", "le", "li", "cl", "lb", "n"], "x": ["code", "X", "p", "xf", "xs", "xx", "y", "rx", "h", "im", "z", "ex", "xxx", "index", "cross", "w", "u", "q", "f", "ax", "ac", "m", "xi", "xb", "ct", "xe", "v", "xp", "e", "t", "xes", "xy", "id", "xc", "n"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\n\\nN, M = map(int, readline().split())\\nS = list(map(int, readline().split()))\\nT = list(map(int, readline().split()))\\n\\nP = 10 ** 9 + 7\\n\\ndp = [[0] * (M + 1) for i in range(N + 1)]\\n\\nfor x in range(1, N + 1):\\n    for y in range(1, M + 1):\\n        dp[x][y] = dp[x][y - 1] + dp[x - 1][y] - dp[x - 1][y - 1]\\n        if S[x - 1] == T[y - 1]:\\n            dp[x][y] += dp[x - 1][y - 1] + 1\\n\\n        dp[x][y] = dp[x][y] % P\\n\\nans = dp[N][M] + 1\\nprint(ans % P)\\n", "target": "505", "substitutes": {"readline": ["playlines", " ReadLine", "playmark", "readinglines", "loadlines", "readlink", "ReadLine", "feedlink", " readout", "playlink", "readLine", "readmark", "readinglink", "Readline", " readpoint", "readingpoint", "loadline", "feedwrite", " readshell", "readlines", "readwrite", " readinline", " Readline", "readingmark", "readshell", "readingline", "readout", "playout", " readlines", "playwrite", "Readinline", " readwrite", "feedlines", " readmark", "loadshell", " readlink", " Readinline", "playline", " readLine", "readpoint", "readinline", "feedline", "playpoint", "loadlink", "readingout", "readingshell"], "N": ["F", "MN", "E", "L", "NO", "V", "NN", "H", "NL", "Q", "X", "Y", "Num", "NS", "NE", "NI", "K", "Na", "NM", "O", "C", "B", "D", "Ne", "A", "W", "I", "No", "NT", "Ni", "Z", "Ns", "ND", "U", "R", "J", "CN", "SN", " n", "G", "NA", "Mo", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "MA", "Y", "MI", "Mo", "K", "RM", "NM", "O", "JM", "B", "C", "D", "LM", "MD", "A", "W", "CM", "I", "IM", "Z", "m", "MC", "U", "R", "J", "MM", "MU", "G", "MO", "n"], "S": ["F", "s", "E", "L", "V", "H", "X", "Y", "SR", "NS", "Si", "K", "TS", "PS", "ST", "SI", "O", "C", "B", "SK", "D", "Ps", "Sa", "A", "SL", "W", "Sl", "I", "SS", "Ns", "TT", "U", "R", "SP", "SN", "G"], "T": ["F", "TP", "E", "L", "V", "H", "Q", "X", "Y", "TS", "TN", "O", "C", "B", "D", "DT", "A", "W", "I", "NT", "Z", "TT", "U", "R", "t", "MT", "G", "PT"], "P": ["F", "TP", "PI", "E", " p", "L", "V", "H", "Q", "X", "p", "Y", "AP", "K", "LP", "O", "C", "D", "NP", "Ps", "IP", "A", "PP", "VP", "I", "DP", "PA", "Pr", "pp", "YP", "RP", "Py", "BP", "U", "R", "PIN", "J", "CP", "SP", "JP", "G", "PF", "PT"], "dp": ["lp", "TP", " p", "pid", "dh", " tcp", "wp", "fd", "p", "dist", "ps", "default", "pb", "xs", "fp", "dat", "var", "tp", "pm", "cp", "pos", "rep", "gp", "dep", "sp", "NP", "mp", " dd", "vp", "dm", "par", "pi", "d", "xd", "DP", "do", "dl", "dt", "point", "pp", "deb", "port", "dr", "dc", "df", "pkg", "data", "db", "ip", "dim", "np", " cp", "pd", "e", "yp", "ds", "dn", "hp", "pg", " df", " d", " DP"], "i": ["gi", "yr", "a", "ei", "p", "c", " I", "yu", "ix", "ym", "iu", "index", "mu", "ind", "I", "u", "q", "j", "xi", "ci", "ip", "you", "my", "e", "col", "id", "py", "ti"], "x": ["min", "name", "int", "event", "ext", "plus", "rx", "ix", "content", "any", "l", "q", "j", "f", "ya", "ct", "xe", "xp", "xy", "full", "ady", "code", "sex", "X", "xs", "host", "xx", "yx", "h", "cross", "u", "oy", "ci", "key", "v", "e", "id", "xc", "ey", "ye", "p", "z", "ex", "index", "time", "image", "cy", "ind", "d", "m", "mx", "my", "t", "dx", "k", "a", "gy", "Y", "na", "c", "fx", "o", "yn", "work", "px", "xxx", "w", "wx", "one", "ax", "xi", "no", "pe", "xa", "n"], "y": ["yr", "ys", "a", "dy", "ady", "ie", "ye", "gy", "X", "p", "Y", "c", "yx", "yu", "yn", "o", "ix", "ym", "ay", "year", "any", "yahoo", "z", "zy", "ty", "yi", "yo", "cy", "wy", "ind", "w", "ny", "yt", "u", "d", "ish", "j", "sy", "ky", "m", "yes", "yan", "yy", "ya", "oy", "iy", "ery", "type", "yl", "key", "e", "xy", "py", "vy", "ry", "ey", "ies", "sky", "n"], "ans": ["ano", "dd", "a", "pid", "lan", "span", "eps", "ai", "ions", "aning", "AN", "anny", "options", "ANS", "ane", "ann", "ANT", "ani", "anon", "ays", "ana", "cho", "can", " means", "A", "An", "nan", "params", "anch", "ctx", "ids", "aus", "trans", "pp", "ants", "ns", "types", "di", "ara", "os", "dev", "ian", "cons", "ANN", "ds", "plan", "an", "ins"]}}
{"code": "N = int(input())\\nA, B = map(int, input().split())\\nfirst = 0\\nsecond = 0\\nthird = 0\\nfor P in input().split():\\n    P = int(P)\\n    if P <= A:\\n        first += 1\\n    elif P <= B:\\n        second += 1\\n    else:\\n        third += 1\\nprint(min(first, second, third))\\n", "target": "372", "substitutes": {"N": ["F", "L", "V", "NN", "X", "K", "number", "O", "T", "C", "D", "NP", "S", "I", "NT", "Z", "R", "Part", "M", "NB", " n", "G", "NA", "nb", "n"], "A": ["F", "E", "First", "a", "L", "At", "V", "H", "X", "AL", "Y", "LA", "AR", "K", "AN", "AH", "O", "SA", "C", "T", "D", "AC", "Ar", "AAA", "AU", "AA", "S", "OA", "W", "I", "CA", "U", "R", "AF", "M", "G", "NA"], "B": ["F", "E", "L", "LB", "V", "Q", "X", "Y", "UB", "PB", "DB", "BA", "AB", "O", "C", "T", "D", "BB", "BC", "S", "W", "Z", "BL", "WB", "R", "GB", "M", "b", "NB", "BM", "QB", "G", "BER", "BS"], "first": ["min", "middle", "First", "full", "a", "last", "fifth", "part", "top", "p", "pre", "Second", "per", "fourth", "left", "split", "size", "C", "st", "now", "only", "start", "th", "before", "max", "one", "right", "initial", "parent", "length", "alpha", "primary", "b", "space", "next", "front", "sum"], "second": ["multiple", "middle", "fifth", "last", "south", "part", "latest", "nd", "Second", "fourth", "secondary", "lower", "future", "section", "beta", "sometimes", "left", "split", "size", " seconds", "final", "two", "female", "later", "st", "sec", "Two", "position", "sort", "six", "site", "small", "seconds", "double", "after", "next", "offset"], "third": ["then", "middle", "fifth", " Third", "last", "part", "Three", "important", "nd", "rd", "fourth", "td", "final", "diff", "prime", "th", "sec", "d", "quad", "max", "Third", "sup", "right", "three", "fold", "minute", "ultimate", "parent", "primary", "alpha", "division", "next", "thirds"], "P": ["F", "Page", "PI", " p", "E", "Product", "Point", "TP", "L", "Port", "PO", "V", "First", "PUT", "H", "Q", "X", "p", "Y", "WP", "K", "PM", "O", "T", "C", "D", "NP", "IP", "S", "PP", "W", "Position", "Step", "I", "PA", "DP", "RP", "Py", "U", "R", "Part", "PIN", "M", "J", "CP", "G", "PF", "PT"]}}
{"code": "# http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_11_B\\n# Depth First Search\\n# Result:\\nimport sys\\n\\nclass Graph(object):\\n    def __init__(self, size):\\n        super(Graph, self).__init__()\\n        self.__size = size\\n        self.__vertices = [None] * size\\n\\n    def add_vertex(self, vertex):\\n        self.__vertices[vertex.id_ - 1] = vertex\\n\\n    def get_vertex(self, vid):\\n        return self.__vertices[vid - 1]\\n\\n    def depth_first_search(self):\\n        d = [0] * self.__size\\n        f = [0] * self.__size\\n        timer = 1\\n        for j in range(1, self.__size + 1):\\n            vtx = self.get_vertex(j)\\n            if not vtx.visited:\\n                stack = [vtx]\\n                d[vtx.id_ - 1] = timer\\n                vtx.visited = True\\n                timer = self.__depth_first_search(stack, timer, d, f) + 1\\n\\n        for vtx in self.__vertices:\\n            print '%d %d %d' % (vtx.id_, d[vtx.id_ - 1], f[vtx.id_ - 1])\\n\\n    def __depth_first_search(self, stack, timer, d, f):\\n        while len(stack) > 0:\\n            top = stack[-1]\\n            avid = top.get_next_adjacnt()\\n            if avid == -1:\\n                timer += 1\\n                f[top.id_ - 1] = timer\\n                stack.pop()\\n            else:\\n                av = self.get_vertex(avid)\\n                if not av.visited:\\n                    timer += 1\\n                    stack.append(av)\\n                    d[av.id_ - 1] = timer\\n                    av.visited = True\\n        return timer\\n\\n    def __str__(self):\\n        str_ = ''\\n        for e in self.__vertices:\\n            str_ += '%s\\n' % e\\n        return str_\\n\\nclass Vertex(object):\\n    def __init__(self, id_):\\n        super(Vertex, self).__init__()\\n        self.id_ = id_\\n        self.adjacents = []\\n        self.next_idx = 0\\n        self.visited = False\\n\\n    def add_adjacent(self, avid):\\n        self.adjacents.append(avid)\\n\\n    def get_next_adjacnt(self):\\n        if len(self.adjacents) == 0: return -1\\n        if self.next_idx < len(self.adjacents):\\n            val = self.adjacents[self.next_idx]\\n            self.next_idx += 1\\n            return val\\n        else:\\n            return -1\\n\\n    def __str__(self):\\n        str_ = '%d ' % self.id_\\n        if len(self.adjacents) == 0:\\n            str_ += '0'\\n        else:\\n            str_ += '%d' % len(self.adjacents)\\n            for e in self.adjacents:\\n                str_ += ' %d' % e\\n        return str_\\n\\n\\n\\ns = int(sys.stdin.readline().strip())\\ngraph = Graph(s)\\nfor _ in range(0, s):\\n    vals = [int(x) for x in sys.stdin.readline().strip().split(' ')]\\n    v = Vertex(vals[0])\\n    graph.add_vertex(v)\\n    if vals[1] == 0: continue\\n    for i in range(0, vals[1]):\\n        v.add_adjacent(vals[2 + i])\\n\\ngraph.depth_first_search()", "target": "788", "substitutes": {}}
{"code": "import sys\\nimport math\\n\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\n\\nclass SegTree:\\n    \"\"\"\\n    init(init_val, ide_ele): \u914d\u5217init_val\u3067\u521d\u671f\u5316 O(N)\\n    update(k, x): k\u756a\u76ee\u306e\u5024\u3092x\u306b\u66f4\u65b0 O(N)\\n    query(l, r): \u533a\u9593[l, r)\u3092segfunc\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059 O(logN)\\n    \"\"\"\\n\\n    def __init__(self, init_val, segfunc, ide_ele):\\n        \"\"\"\\n        init_val: \u914d\u5217\u306e\u521d\u671f\u5024\\n        segfunc: \u533a\u9593\u306b\u3057\u305f\u3044\u64cd\u4f5c\\n        ide_ele: \u5358\u4f4d\u5143\\n        n: \u8981\u7d20\u6570\\n        num: n\u4ee5\u4e0a\u306e\u6700\u5c0f\u306e2\u306e\u3079\u304d\u4e57\\n        tree: \u30bb\u30b0\u30e1\u30f3\u30c8\u6728(1-index)\\n        \"\"\"\\n        n = len(init_val)\\n        self.segfunc = segfunc\\n        self.ide_ele = ide_ele\\n        self.num = 1 << (n - 1).bit_length()\\n        self.tree = [ide_ele] * 2 * self.num\\n        # \u914d\u5217\u306e\u5024\u3092\u8449\u306b\u30bb\u30c3\u30c8\\n        for i in range(n):\\n            self.tree[self.num + i] = init_val[i]\\n        # \u69cb\u7bc9\u3057\u3066\u3044\u304f\\n        for i in range(self.num - 1, 0, -1):\\n            self.tree[i] = self.segfunc(self.tree[2 * i], self.tree[2 * i + 1])\\n\\n    def update(self, k, x):\\n        \"\"\"\\n        k\u756a\u76ee\u306e\u5024\u3092x\u306b\u66f4\u65b0\\n        k: index(0-index)\\n        x: update value\\n        \"\"\"\\n        k += self.num\\n        self.tree[k] = x\\n        while k > 1:\\n            self.tree[k >> 1] = self.segfunc(self.tree[k], self.tree[k ^ 1])\\n            k >>= 1\\n\\n    def query(self, left, right):\\n        \"\"\"\\n        [left, right)\u306esegfunc\u3057\u305f\u3082\u306e\u3092\u5f97\u308b\\n        left: index(0-index)\\n        right: index(0-index)\\n        \"\"\"\\n        res = self.ide_ele\\n        left += self.num\\n        right += self.num\\n        while left < right:\\n            if left & 1:\\n                res = self.segfunc(res, self.tree[left])\\n                left += 1\\n            if right & 1:\\n                res = self.segfunc(res, self.tree[right - 1])\\n            left >>= 1\\n            right >>= 1\\n        return res\\n\\n\\ndef segfunc(x, y):\\n    \"\"\"\\n    \u533a\u9593(x,y)\u306b\u5bfe\u3057\u3066\u884c\u3044\u305f\u3044\u64cd\u4f5c\u306e\u5165\u529b\\n    \u6700\u5c0f\u5024\uff1amin(x,y)\\n    \u6700\u5927\u5024\uff1amax(x,y)\\n    \u548c\uff1ax + y\\n    \u7a4d\uff1ax * y\\n    \u6700\u5927\u516c\u7d04\u6570\uff1amath.gcd(x, y)\\n    \"\"\"\\n    return math.gcd(x, y)\\n\\n\\ndef resolve():\\n    n = int(input())\\n    A = list(map(int, input().split()))\\n    res = 0\\n\\n    ide_ele = 0\\n    seg = SegTree(A, segfunc, ide_ele)\\n\\n    for i in range(n):\\n        tmp = A[i]\\n        seg.update(i, 0)\\n        g = seg.query(0, n)\\n        res = max(res, g)\\n        seg.update(i, tmp)\\n    print(res)\\n\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "94", "substitutes": {"input": ["raw", "spec", "str", "reader", "stream", "enter", "process", "usr", "wave", "temp", "proc", "image", "buffer", "ll", "out", " Input", "output", "parent", "list", "data", "Input", "bin", "include", "dec", "enc", "parse", "source"], "f_inf": ["f__info", "f_Inf", "f__Inf", "f0Inf", "f__log", "f0inf", " f_Inf", " f_log", "f_info", " f_info", "f__inf", "f0log", "f_log", "f0info"], "mod": ["min", "mode", "spec", "exp", "mult", "mem", "delay", "ver", "temp", " Mod", "scale", "sim", "module", "ind", "cm", "pi", "m", "fun", "depth", "dim", "mods", "debug", "complex", "order", "dec", "step", "ctr", "Mod"], "self": ["s", "other", "Self", "k", "name", "full", "spec", "layer", "error", "static", "me", "event", "worker", "p", "qa", "_", "host", "plus", "sys", "load", "context", "work", "case", "instance", "app", "pos", "result", "client", "this", "wrapper", "proc", "mp", "x", "cache", "master", "w", "node", "next", "user", "obj", "args", "ctx", "less", "max", "object", "lf", "acl", "style", "cs", "parser", "parent", "private", "os", "func", "base", "e", "plugin", "ds", "cl", "parse", "part", "form", "ref", "on"], "init_val": ["initxdata", " init_valid", "initvalval", "initxvals", "initpydata", " init_el", " init_data", " init_vals", "initvalel", "initxval", "initpylen", "init_valid", "initvalvals", " init_len", "initpyval", "initpyel", "initpyvalid", "initvallen", "init_el", "initpyvals", "initxvalid", "init_len", "init_vals", "init_data"], "segfunc": ["seGfunc", "segmentproc", " seggfun", "seggobj", "segeproc", " seggproc", "segfunction", "segmentfun", "segmentfunc", " seggsec", "psegfunc", "segyobj", " segfunction", "segyfunc", "segyfunction", "seGfun", "seggfunction", "psegefun", "segsproc", "segobj", "psegefunc", "seGfunction", "segproc", "psegefunction", "segssec", "seggfunc", " segfun", "segfun", " segproc", " seggfunc", "segmentsec", "segyfun", "seggsec", "segefun", " segsec", "segsfun", "psegeobj", "segefunction", "seggfun", "segefunc", "segsec", "psegfun", "seGproc", " seggfunction", "segeobj", "segsfunc", "psegfunction", "psegobj", "seggproc"], "ide_ele": ["ide__verse", "ide_el", "ide2ele", "side_el", "idegel", "id_eval", "ide_eval", "side_ele", "ide__val", "id_letter", "idegline", "ide_verse", "side_element", "ide_val", "side_val", "id_el", "side_verse", "idepel", "id_element", "ide_element", "idepele", "ide2val", "ide__el", "idegele", "ide2verse", "ide2eval", "ide_line", "ide__ele", "idepeval", "idegelement", "id_ele", "side_line", "ide2el", "ide2letter", "ide_letter", "idepletter"], "n": ["k", "mn", "non", "p", "init", "nm", "c", "i", "o", "nc", "size", "ne", "nu", "z", "sn", "w", "conn", "l", "d", "nt", "nn", "max", "j", "f", "m", "ns", "ni", "nr", "len", "b", "t", "N", "nb"], "num": ["unit", "span", "dom", "init", "Num", "nm", "umi", "mem", "number", "NUM", "split", "nom", "nu", "index", "sim", "node", "om", "con", "uni", "nam", "rank", "batch", "bin", "nr", "dim", "len", "gen", "count", "hom", "id", "ctr", "nb", "sum", "block", "um"], "tree": ["text", "struct", "Tree", "table", "code", "tail", "ree", "leaf", "split", "seed", "rule", "index", "cache", "module", "file", "node", "body", "child", "root", "model", "depth", "parent", "list", "data", "bin", "path", "zip", "seq"]}}
{"code": "n = input()\\nif n==n[::-1]:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "289", "substitutes": {"n": ["name", "k", "s", "a", "p", "na", "init", "g", "c", "nm", "i", "o", "r", "nc", "y", "num", "un", "pos", "number", "ne", "nu", "z", "fn", "node", "l", "u", "cn", "d", "nn", "nt", "f", "ln", "j", "m", "none", "Ns", "ns", "ni", "b", "v", "np", "t", "N", "e", "pn", "nb"]}}
{"code": "n, m, x = map(int, input().split())\\na = list(map(int, input().split()))\\n\\ndef answer(n: int, m: int, x: int, a:list) -> int:\\n    left = 0\\n    right = 0\\n    for i in a:\\n        if i < x:\\n            left += 1\\n        else:\\n            right += 1\\n    return min(left, right)\\n\\nprint(answer(n, m, x, a))", "target": "660", "substitutes": {"n": ["name", "k", "int", "p", "na", "nd", "c", "y", "o", "nc", "en", "num", "net", "rn", "ne", "nu", "z", "ind", "w", "ny", "l", "cn", "d", "u", "nt", "nn", "q", "f", "network", "j", "nw", "ns", "no", "b", "v", "e", "N", "t", "dn", "nb", "an"], "m": ["int", "mn", "p", "ms", "c", "mon", "y", "r", "h", "o", "im", "ym", "md", "z", "fm", "dm", "mu", "w", "cm", "l", "u", "d", "f", "j", "man", "M", "v", "b", "t", "e", "mm", "an"], "x": ["name", "int", "X", "p", "xs", "c", "g", "xx", "y", "r", "o", "ix", "xa", "im", "inf", "z", "xt", "on", "ex", "time", "index", "w", "l", "u", "d", "max", "q", "f", "j", "ax", "xi", "M", "v", "b", "e", "t", "xes", "mm", "xy", "an"], "a": ["aa", "s", "wa", "va", "at", "ma", "p", "access", "ai", "c", "ama", "aw", "y", "o", "r", "ba", "ab", "au", "array", "ana", "index", "A", "ar", "af", "ia", "args", "ata", "l", "d", "ta", "f", "ca", "sa", " A", "ac", "ga", "area", "aj", "am", "ae", "data", "alpha", "b", "v", "ea", "e", "all", "an", "ad"], "left": ["min", "full", "last", "L", "line", "int", "code", "level", "hide", "o", "r", "low", "Left", "lo", "la", "size", "z", "index", "diff", "partial", "ind", "start", "l", "child", "j", "ignore", "none", "small", "parent", "no", "length", "len", "all", "le", "internal", "inner", "li", "cl", "offset"], "right": ["rh", "error", "ack", "raw", "middle", "end", "rest", "value", "int", "rights", "third", "correct", "plus", "r", "result", "rew", "round", "bottom", "array", "index", "partial", "cross", "start", "reverse", "Right", "patch", "d", "max", "row", "wrong", "one", "ax", "back", "rank", "no", " Right", "length", "red", "inner", "progress", "part", "column"], "i": ["ji", "ei", "int", "chi", "qi", "p", "ai", "c", "o", "r", "ini", "iq", "iu", "ti", "z", "si", "ind", "I", "ia", "it", "l", "pi", "d", "f", "iii", "j", "io", "ait", "ni", "ci", "ij", "b", "e", "il", "id", "li", "ii", "ip"]}}
{"code": "# ABC068A - ABCxxx\\ndef main():\\n    N = input().rstrip()\\n    print(\"ABC\", N, sep=\"\")\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "429", "substitutes": {}}
{"code": "S = input()\\nl = [S[0]]\\na = 0\\nn = len(S)\\nf = S[0]\\nfor i in range(1, n):\\n    if f != \"L\" or S[i] != \"R\":\\n        l[a] += S[i]\\n    else:\\n        l.append(S[i])\\n        a += 1\\n    f = S[i]\\n\\n#print(l)\\nfor x in l:\\n    r = x.count(\"R\")\\n    t = len(x)\\n    a, b = divmod(t, 2)\\n    for i in range(r - 1):\\n        print(\"0\", end=\" \")\\n    if r % 2 == 0:\\n        print(a, end=\" \")\\n        print(a + b, end=\" \")\\n    else:\\n        print(a + b, end=\" \")\\n        print(a, end=\" \")\\n    for i in range(t - r - 1):\\n        print(\"0\", end=\" \")\\n", "target": "722", "substitutes": {"S": ["F", "s", "E", "L", "DS", "Sort", "V", "H", "Es", "Q", "X", "SF", "Y", "SE", "Sample", "NS", "INS", "K", "Si", "TS", "PS", "SH", "SI", "IDS", "O", "Files", "P", "T", "B", "C", "D", "A", "SL", "Service", "Sl", "I", "SS", "Single", "Z", "WS", "Set", "CS", "U", "R", "Part", "M", "GS", "SM", "N", "G", "SO", "BS", "SU", "Socket"], "l": ["lp", "s", "k", "ol", "L", " L", "p", "g", "c", "h", "r", "o", "sl", "y", "el", "la", "lc", "kl", "z", "u", "ll", "ln", "dl", "m", "list", "nl", "len", "b", "v", "t", "ls", "e", "ul", "li"], "a": ["aa", "s", "wa", "at", "va", "ma", "active", "p", "ai", "c", "aw", "fa", "y", "r", "o", "la", "ba", "au", "z", "x", "A", "ar", "af", "w", "ia", "ata", "u", "aaa", "ca", "sa", "ac", "area", "am", "aj", "ae", "alpha", "b", "ea", "an", "ad", "offset"], "n": [" N", "s", " p", "k", "p", "g", "c", "y", "o", "r", "nc", " c", "h", "z", "fn", "x", "w", "u", "d", "q", "j", "m", "ns", "nl", "len", "b", "an", "t", "N", "e", "nb", " b"], "f": ["F", "s", "name", "fb", "p", "fd", "g", "c", "fp", "fa", "y", "o", "r", "h", "rf", "tf", "fs", "z", "fc", "x", "A", "af", "w", "u", "d", "j", "frac", "lf", "m", "fold", "fen", "alpha", "b", "v", "e", "t"], "i": ["gi", "s", "k", "ui", "end", "ei", "int", "ie", "p", "ai", "c", " I", "h", "r", "y", "ix", "ini", "iu", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "uri", "fi", "u", "d", "pi", "j", "io", "m", "di", "ri", "ni", "ci", "v", "b", "e", "t", "info", "id", "li", "ii", "bi"]}}
{"code": "import sys\\n\\ndef solve():\\n    input = sys.stdin.readline\\n    N = int(input())\\n    A = [int(a) for a in input().split()]\\n    B = [(A[i], i) for i in range(N)]\\n    B.sort(reverse = True)\\n\\n    DP = [[-1 for j in range(N + 1)] for _ in range(N)] #i\u756a\u76ee\u306e\u5e7c\u5150\u307e\u3067\u898b\u305f\u6642\u3001\u5de6\u304b\u3089i\u756a\u76ee\u307e\u3067\u57cb\u307e\u3063\u3066\u3044\u308b\u6642\u306e\u6700\u5927\u5024\\n    DP[0][0] = B[0][0] * abs(B[0][1] - (N - 1))\\n    DP[0][1] = B[0][0] * B[0][1]\\n\\n    for i in range(1, N):\\n        for j in range(i + 1):\\n            #\u53f3\u306b\u8a70\u3081\u308b\u6642\u306fj\u306e\u5024\u306f\u5909\u308f\u3089\u306a\u3044\\n            #\u5de6\u306b\u8a70\u3081\u308b\u3068\u304d\u306fj += 1\\n            DP[i][j] = max(DP[i][j], DP[i-1][j] + B[i][0] * abs(B[i][1] - (N - 1 - i + j)))\\n            DP[i][j+1] = max(DP[i][j+1], DP[i-1][j] + B[i][0] * abs(B[i][1] - j))\\n    print(max(DP[N-1]))\\n\\n    return 0\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "91", "substitutes": {"input": ["F", "RAW", "amp", "IN", "raw", "call", "error", "int", "PUT", "H", "request", "Q", "argument", "stream", "init", "c", "host", "target", "format", "result", "comment", "list", "support", "temp", "config", "array", "expression", "response", "S", "image", "file", "current", "exec", "answer", "accept", "out", "f", "IO", "eval", "INT", "pull", "output", "frame", "U", "data", "Input", "alpha", "binary", "path", "string", "view", "select", "include", "filter", "source", "param", "feed", "ref"], "N": ["F", "E", "Number", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "NS", "K", "Na", "NM", "O", "P", "C", "T", "D", "Len", "Ne", "S", "W", "I", "NT", "Ni", "TW", "Z", "Ns", "U", "R", "M", "J", " n", "G", " Ne", "NA", " NI", "n"], "A": ["AD", "Ca", "L", "H", "AS", "Y", "AP", "LA", "AR", "AM", "AB", "P", "C", "mA", "As", "AC", "AAA", "Ar", "API", "AA", "Alpha", "S", "W", "I", "Ab", "Array", "CA", "U", "AF", "Input", "alpha", "G", "Am", "HA", "NA"], "a": ["aa", "tta", "wa", "sta", "int", "va", "ma", "p", "na", "ai", "c", "fa", "isa", "api", "ba", "mA", "ab", "pa", "x", "ia", "ata", "d", "ca", "f", "sa", "asa", "ac", "ga", "area", "ae", "alpha", "b", "an", "ad", "n"], "B": ["F", "E", "L", "V", "Q", "Y", "Bi", "DB", "BA", "AB", "O", "P", "C", "T", "D", "SB", "BB", "AA", "S", "W", "I", "BL", "WB", "II", "U", "R", "M", "J", "b", "G", "Bs"], "i": ["gi", "ji", "k", "int", "p", "phi", "ai", "c", " I", "y", "o", "ini", "iu", "z", "si", "index", "x", "ind", "I", "l", "u", "pi", "d", "f", "io", "xi", "ip", "ij", "b", "v", "e", "id", "li", "ii", "n", "bi", "ti"], "DP": ["PG", "DEP", "TP", "DA", "DS", "DC", "DM", "DE", "DB", "D", "DD", "PD", "DT", "PP", "VP", "Dim", "CD", "DR", "PC", "DF", "END", "CP", "DJ", "SP", "dp", "EP", " D", "DI"], "j": ["ji", "ai", "g", "c", "o", "num", "z", "x", "ind", "adj", "obj", "l", "d", " J", "q", "jp", "f", "m", "oj", "ga", "ac", "aj", "ij", "J", "bj", "py"], "_": ["k", "al", "g", "h", "ay", "x", "l", "u", "q", "f", "m", "J", "all", "an", "block"]}}
{"code": "all = [x for x in range(1,53)]\\n\\nN = int(input())\\ni = 1\\n\\nwhile i <= N:\\n\tM, num = input().split()\\n\tnum = int(num)\\n\tif M == 'S':\\n\t\tall.remove(num)\\n\telif M == 'H':\\n\t\tall.remove(num+13)\\n\telif M == 'C':\\n\t\tall.remove(num+26)\\n\telif M == 'D':\\n\t\tall.remove(num+39)\\n\t\\n\ti += 1\\n\\nsN = 52 - N\\n\\nfor j in range(sN):\\n\tif all[j] // 13 == 0 or (all[j] // 13 == 1 and all[j] % 13 == 0):\\n\t\tprint(\"S {}\".format(all[j]))\\n\telif all[j] // 13 == 1 or (all[j] // 13 == 2 and all[j] % 13 == 0):\\n\t\tprint(\"H {}\".format(all[j]-13))\\n\telif all[j] // 13 == 2 or (all[j] // 13 == 3 and all[j] % 13 == 0):\\n\t\tprint(\"C {}\".format(all[j]-26))\\n\telse:\\n\t\tprint(\"D {}\".format(all[j]-39))", "target": "628", "substitutes": {"all": ["int", "alls", "any", "this", "coll", "current", "user", "l", "out", "f", "initial", "found", "list", "data", "call", "full", "channel", "arr", "pos", "both", "left", "split", "array", "att", "two", "ass", "page", "pp", "old", "average", "v", "summary", "wall", "total", "All", "default", "by", "result", "log", "el", "ale", "index", "image", "only", "pl", "cal", "sort", "m", "none", "self", "am", "alpha", "fl", "ell", "t", "config", "block", "where", "other", "a", "alt", "pal", "ALL", "al", "process", "app", "local", "diff", "url", "valid", "w", "one", "object", "up", "null", "val", "cl", "sum", "n"], "x": ["a", "int", "sex", "X", "p", "xs", "c", "g", "xx", "y", "h", "rx", "im", "r", "ix", "z", "xxx", "index", "xxxx", "w", "wx", "u", "d", "max", "q", "row", "f", "ax", "m", "xi", " X", "v", "xp", "xy", "id", "n"], "N": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "Num", "NS", "K", "NM", "O", "P", "T", "C", "B", "D", "Ne", "S", "W", "I", "No", "Ni", "Z", "Ns", "R", "J", " n", "G", "n"], "i": ["gi", "k", "ui", "qi", "mi", "p", "phi", "ai", "c", "o", "ini", "iu", "z", "si", "index", "ind", "start", "I", "l", "u", "pi", "d", "f", "m", "xi", "di", "ri", "ni", "ci", "b", "zi", "id", "li", "ii", "nb", "n", "bi", "ti"], "M": ["F", "MN", "ID", "E", "L", "V", "H", "Q", "Y", "MO", "Num", "DM", "NM", "AM", "O", "MON", "P", "T", "C", "B", "D", "LM", "MD", "Module", "S", "A", "W", "CM", "OM", "I", "FM", "MODE", "IM", "MH", "m", "VM", "U", "R", "J", "dim", "SM", "MF", "MT", "G", "Mo", "NUM", "RM"], "num": ["gi", "min", "name", "text", "loc", "unit", "int", "mn", "dom", "p", "Num", "nm", "umi", "mon", "mem", "o", "number", "im", "un", "pos", "split", "temp", "nu", "nom", "index", "sim", "begin", "mu", "inc", "numbered", "om", "chrom", "con", "cm", "u", "d", "member", "mom", "uni", "one", "f", "m", "du", "note", "man", "um", "four", "lim", "no", "su", "bin", "b", "dim", "id", "month", "sam", "uu", "form", "sum", "NUM", "trial", "n"], "sN": ["dN", "nC", "sL", "mN", "dM", "nN", " sL", "wL", "mM", "wN", "nM", " sNs", "sM", "sNs", "wNs", "mC", "sC", "dC"], "j": ["s", " z", "y", "ix", "current", "adj", "l", "uj", "js", "f", "json", "b", "fr", "li", "ie", "X", "jo", "jj", "section", "left", "jl", "je", "jet", "u", "jp", "note", "br", "ij", "J", "v", "key", "e", "id", " l", "ja", "p", "dj", "el", "z", "index", "ind", "it", "d", " J", "row", "m", "bj", "t", "off", "ji", "k", "jen", "g", " dj", "c", "o", "obj", "job", "oj", "aj", "jam", "ld", "jon", "cell", "kj", "ii", "n"]}}
{"code": "N = int(input())\\nA = [int(input()) for _ in range(N)]\\n\\nif A[0] > 0:\\n    print(-1)\\n    exit()\\n\\nans = 0\\nprev = 0\\n\\nfor a in reversed(A):\\n    if prev > 0:\\n        if a == (prev - 1):\\n            prev = a\\n            continue\\n        elif a < prev:\\n            print(-1)\\n            exit()\\n    ans += a\\n    prev = a\\n\\nprint(ans)\\n", "target": "785", "substitutes": {"N": ["F", "Number", "L", "NO", "V", "NN", "X", "na", "Y", "NC", "Size", "Num", "NS", "K", "Na", "AN", "O", "P", "B", "C", "T", "Ne", "S", "An", "RN", "No", "Ni", "Ns", "ns", "R", "M", " n", "G", "NA", "an", "n"], "A": ["App", "At", "V", "All", "New", "H", "AS", "X", "Y", "AP", "Adam", "LA", "K", "AST", "Na", "AM", "O", "P", "B", "C", "AV", "As", "AC", "Ar", "mA", "API", "AA", "And", "Alpha", "S", "W", "I", "Array", "CA", "AF", "alpha", "M", "Prev", "G", "NA", "An", "ad", "n"], "_": ["p", " seq", "ay", " time", "x", "out", "f", "all"], "ans": ["s", "ents", "offs", "nas", "ras", "amps", "eps", "ams", "na", "ai", "ats", "arts", "aps", "results", "anas", "AN", "ads", "ANS", "ks", "vs", "ann", "cycles", "ani", "ays", "errors", "outs", "nan", "ars", "versions", "aves", "aned", "ons", "aus", "sk", "cs", "ants", "acs", "ns", "os", "reads", "actions", "ls", "olds", "ops", "changes", "an", "n", "ins"], "prev": ["new", "rh", "aa", "op", "last", "cmp", "span", "p", "na", "pre", "nav", "i", "append", "var", "h", "r", "adv", "orig", "num", "pres", "ap", "iter", "first", "ann", "ab", "rev", "ana", "history", "av", "par", "anch", "current", "adj", "ak", "before", "iv", "ax", "ac", "pp", "jump", "br", "breaks", "no", "adr", "alpha", " Prev", "nr", "b", "Previous", "v", "Prev", "vious", "skip", "sav", "next", "anti", "an", "ad", "n"], "a": ["aa", "s", "wa", "change", "auto", "int", "va", "another", "span", "ma", "active", "p", "qa", "na", "ai", "c", "i", "o", "y", "result", "app", "ap", "ab", "au", "ana", "ar", "w", "action", "current", "l", "u", "aaa", "sa", "ac", "ga", "asa", "area", "am", "ae", "alpha", "b", "aaaa", "v", "e", "all", "next", "an", "ad", "n"]}}
{"code": "n,d = [int(z) for z in input().split()]\\np=[]\\nfor g in range(n):\\n      p.append([int(z) for z in input().split()])\\nc=0\\n\\ndef dist(a,b):\\n      s=0\\n      for i in range(d):\\n            s+= (a[i]-b[i])**2\\n      return s**0.5\\n\\nfor j in range(n):\\n      for k in range(j+1,n):\\n            z = dist(p[j],p[k])\\n            #print(z)\\n            if (type(z)==float)or(type(z)==int):\\n                       if (z%1==0):\\n                             c+=1\\nprint(c)\\n", "target": "182", "substitutes": {"n": ["y", "o", "nc", "num", "r", "net", "h", "size", "ne", "x", "w", "l", "u", "nt", "q", "nn", "f", "network", "m", "ns", "ni", "v", "np", "t", "N", "e", "count", "nb"], "d": ["dd", "dy", "nd", "dat", "h", "r", "o", "D", "da", "x", "w", "l", "u", "do", "q", "f", "dt", "m", "dc", "v", "e", "t", "dp", "pd", "ds", "dn", "ad"], "z": ["iz", "oz", "ze", "zer", "int", "zone", "y", "h", "pos", "cz", "temp", "size", "zo", "az", "zh", "zy", "ch", "x", "cy", "w", "zn", "l", "max", "q", "ll", "nz", "Z", "f", "zz", "m", "zen", "fl", "zip", "v", "t", "e", "count", "zi", "gz", "tz", "za"], "p": ["lp", "ps", "phi", "y", "r", "tp", "o", "pr", "P", "pt", "sp", "pa", "x", "l", "u", "pi", "q", "f", "jp", "m", "point", "data", "v", "np", "t", "e", "pe", "py", "pc"], "g": ["gi", "code", "ge", "go", "gh", "y", "gc", "gu", "num", "o", "ig", "ng", "gn", "w", "get", "l", "u", "q", "f", "m", "ga", "gb", "v", "e", "gen", "gm", "G"], "c": ["sc", "y", "h", "nc", "r", "C", "lc", "size", "ce", "cy", "w", "cm", "l", "q", "f", "cs", "m", "dc", "cd", "ci", "ct", "e", "t", "count", "cc", "xc"], "a": ["aa", "na", "ai", "y", "r", "ba", "ab", "au", "da", "x", "A", "af", "w", "l", "u", "f", "ca", "sa", "ac", "m", "ae", "alpha", "e", "an"], "b": ["aa", "ib", "fb", "bs", "bp", "y", "r", "o", "beta", "B", "ba", "ab", "x", "w", "sb", "l", "u", "bf", "f", "eb", "m", "v", "e", "nb"], "s": ["ss", "sq", "ps", "y", "r", "o", "sd", "size", "si", "x", "S", "w", "l", "u", "q", "sg", "f", "cs", "m", "ns", "su", "os", "abs", "v", "t", "e", "ls", "ds", "sum"], "i": ["gi", "ji", "ui", "ie", "ei", "phi", "ai", "y", "o", "ini", "iu", "ti", "si", "x", "yi", "ind", "I", "ia", "l", "u", "pi", "q", "f", "m", "xi", "di", "ni", "ij", "v", "e", "zi", "id", "li", "ii", "ik", "bi"], "j": ["ji", "end", "ie", "ja", "y", "h", "o", "num", "r", "jj", "kl", "ch", "index", "x", "ind", "w", "l", "u", "q", "f", "jp", "m", "aj", "ij", "J", "v", "e", "t", "li", "ii"], "k": ["ke", "K", "y", "o", "h", "kk", "ijk", "kg", "ks", "kl", "ch", "x", "w", "l", "u", "q", "ki", "f", "sk", "m", "ac", "v", "key", "e", "ik"]}}
{"code": "from collections import defaultdict\\ndd = defaultdict(int)\\nn,p=map(int, input().split())\\nS = list(input().rstrip())\\ntmp = 0\\nr=1\\nsu=0\\ndd[0]=1\\nif p==2 or p==5:\\n    c=n\\n    for s in S[::-1]:\\n        if int(s)%p==0:\\n            su+=c\\n        c-=1\\n    print(su)\\nelse:\\n    for s in S[::-1]:\\n        tmp+=int(s)*r\\n        tmp%=p\\n        dd[tmp]+=1\\n        r*=10\\n        r%=p\\n    for i in dd.values():\\n        su += (i*(i-1))//2\\n    print(su)\\n", "target": "448", "substitutes": {"dd": ["ss", "yd", " props", " data", "sh", "DS", "NN", "tt", "fd", "cond", "nd", " style", "ud", " backup", "sd", "DB", "td", "md", "idd", " rand", "D", "DD", "dds", "od", "div", "PD", "BD", "now", " stuff", "CD", "bb", "d", "do", "nn", " sd", "xd", "ff", "DF", " pick", "pp", "mmm", " DD", "cd", "df", " pp", "stuff", " di", "ld", "CC", "ods", "MM", "pd", " case", "ds", " ad", " cc", "odd", "cdn", " cd", "ad", " d"], "n": ["k", "o", "nc", "num", "y", "pos", "C", "size", "ne", "nu", "z", "x", "sn", "l", "u", "pi", "d", "nt", "nn", "q", "cn", "j", "f", "m", "ns", "nr", "v", "b", "np", "t", "N", "pn", "e", "nb"], "p": ["lp", "op", "a", "pid", "pre", "bp", "ps", "g", "fp", "o", "tp", "h", "pm", "pr", "cp", "y", "per", "P", "sp", "z", "pa", "x", "pro", "par", "l", "u", "pi", "d", "q", "f", "j", "jp", "m", "pp", "b", "v", "np", "t", "e", "pe", "pn", "dp", "part", "pc"], "S": ["ss", "F", "L", "sc", "DS", "SE", "ps", "TS", "PS", "SH", "Sol", "Su", "slice", "P", "T", "C", "B", "D", "size", "si", "Session", "A", "sn", "SL", "Service", "RS", "I", "Sing", "ses", "SS", "OS", "Single", "Sc", "Z", "ns", "Set", "R", "U", "Part", "M", "N", "ls", "SN", "G", "se", "sv", "SU"], "tmp": ["cmp", "a", "int", "tt", "pre", "tp", "kk", "pos", "cp", "td", "beta", "md", "P", "T", "C", "sp", "temp", "attr", "mp", "nu", "po", "si", "vm", "st", "sn", "cu", "cm", "u", "pi", "rb", "nt", "sup", "f", "pp", "Temp", "mmm", "vt", "v", "nr", "np", "t", "cpp", "e", "mm", "config", "tc"], "r": ["yr", "rr", "k", "a", "h", "pr", "rf", "lr", "rn", "z", "x", "ar", "w", "l", "u", "d", "rb", "q", "j", "f", "sr", "rc", "m", "pp", "rt", "R", "nr", "v", "b", "t", "e", "cr", "ru", "er", "rs"], "su": ["ss", " suite", "cmp", "spec", "sc", "cas", "sex", "acc", "sed", "stri", "sl", "sd", "pr", "sf", "sie", "Su", "sp", "temp", "nu", "uc", "si", "uu", "cho", "sim", "ste", "sn", "cu", "rue", "src", "u", "rb", "pi", "d", "ses", "sup", "f", "sr", "rc", "sort", "pp", "nw", "du", "site", "tu", "ws", "ci", "stuff", "nr", "zip", "zi", "se", "sv", "ru", "sam", "rs", "SU", "csv", "test", "tc"], "c": ["k", "a", "y", "nc", "circ", "h", "cp", "C", "lc", "z", "x", "cy", "cu", "l", "u", "cn", "d", "max", "f", "rc", "cs", "ac", "m", "cat", "dc", "ci", "v", "b", "e", "t", "count", "cc", "xc", "pc"], "s": ["ss", "sq", "a", "ys", "spec", "sit", "ps", "stat", "xs", "sets", "o", "sl", "sf", "sie", "sp", "size", "uns", "si", "es", "sn", "series", "w", "sb", "st", "sites", "l", "ses", "u", "f", "sa", "cs", "sync", "sw", "ments", "ns", "os", "abs", "gs", "b", "v", "ages", "sing", "t", "ls", "e", "ds", "se", "sv", "rs", "changes", "ins"], "i": ["k", "ui", "a", "ei", "int", "chi", "phi", "ai", "h", "iu", "ti", "z", "si", "es", "index", "x", "I", "it", "l", "u", "pi", "d", "page", "j", "f", "m", "ments", "xi", "us", "di", "ci", "v", "b", "e", "t", "id", "its", "ii", "ios", "abi", "ip"]}}
{"code": "count=int(raw_input())\\n\\nfor i in range(0,count):\\n    a,b,c=map(int,raw_input().split())\\n    if pow(a,2)+pow(b,2)==pow(c,2):\\n        print 'YES'\\n    elif pow(a,2)+pow(c,2)==pow(b,2):\\n        print 'YES'\\n    elif pow(b,2)+pow(c,2)==pow(a,2):\\n        print 'YES'\\n    else:\\n        print 'NO'", "target": "199", "substitutes": {"count": ["call", "loc", "cycle", "code", "cond", "p", "process", "y", "number", "num", "weight", "C", "coll", "size", "div", "index", "cb", "current", "con", "l", "max", "f", "depth", "list", "length", "sum", "limit", "len", "base", "e", "order", "cc", "col", "id", "part", "n", "Count"], "i": ["gi", "p", " I", "y", "ix", "num", "item", "iu", "z", "index", "x", "ind", " il", "I", "u", "d", "f", "j", "ci", "ip", "e", "col", "id", "li", "ii", "n", "ti"], "a": ["aa", "s", "auto", "at", "p", "ai", "aw", "y", "o", "api", "ba", "ab", "au", "z", "da", "x", "A", "ar", "af", "w", "l", "u", "d", "f", "sa", "ca", "ac", "asa", "area", "am", "aj", "ae", "alpha", "v", "e", "an", "ad", "n"], "b": ["aa", "s", "be", "auto", "ib", "fb", "p", "bs", "g", "y", "r", "o", "h", "wb", "B", "ba", "ab", "x", "w", "sb", "cb", "l", "bb", "d", "u", "rb", "f", "eb", "j", "ac", "ae", "db", "v", "an", "e", "bc", "lb", "bi", "ad", "n"], "c": ["s", "k", "p", "g", "y", "r", "h", "o", "ec", "C", "z", "ce", "x", "cy", "cu", "w", "l", "u", "d", "q", "f", "cs", "ac", "m", "dc", "ci", "v", "cf", "e", "cc", "n"]}}
{"code": "l = []\\nwhile True:\\n  a,op,b = input().split()\\n  if op == '?':\\n    break\\n  A = int(a)\\n  B = int(b)\\n  if op == '+':\\n    l.append(A+B)\\n  elif op == '-':\\n    l.append(A-B)\\n  elif op == '*':\\n    l.append(A*B)\\n  elif op == '/':\\n    l.append(A//B)\\nfor i in l:\\n  print(i)", "target": "475", "substitutes": {"l": ["lp", "isl", "s", "ol", "L", "lin", "p", "c", "ql", "o", "sl", "r", "lis", "el", "ml", "la", "split", "lv", "left", "lc", "jl", "kl", "bl", "lines", "pl", "u", "d", "ll", "ln", "dl", "f", "lf", "m", "acl", "cli", "rl", "list", "nl", "wl", "fl", "live", "lit", "v", "t", "ls", "e", "il", "le", "li", "ul", "lb", "n"], "a": ["aa", "wa", "sta", "va", "at", "p", "qa", "ai", "aw", "c", "o", "y", "ap", "api", "la", "ab", "au", "art", "da", "x", "ar", "af", "ak", "aaa", "f", "sa", "ca", "ac", "area", "am", "ea", "e", "an", "ad", "n"], "op": ["aa", "amp", "loc", "error", "cmp", "pop", "top", "prop", "p", "opt", "exp", "opus", "post", "o", "r", "ipop", "ot", "oped", "app", "pos", "ap", "oc", "api", "mop", "sp", "mp", "rot", "oop", "opp", "oct", "oper", "Op", "ok", "ob", "cop", "opter", "root", "iop", "upp", "hop", "vert", "f", "jp", "rip", "cat", "operation", "option", "br", "bot", "omp", "rop", "lit", "ype", "type", "key", "OP", "yp", "id", "ops", "bit", "ort", "skip", "block", "ip"], "b": ["s", "be", "aa", "ib", "fb", "p", "bs", "pb", "c", "y", "r", "wb", "mb", "split", "ba", "ab", "x", "w", "sb", "cb", "bf", "bb", "rb", "f", "bd", "eb", "db", "v", "e", "bc", "bas", "nb", "lb", "n"], "A": ["F", " AA", "GA", "Ca", "E", "L", "T", "Area", "AI", "AS", "MA", "Y", "X", "AP", "IA", "Num", "Adam", "LA", "AR", "TA", "EA", "Na", "Ha", "BA", "AB", " LA", "SA", "AW", "C", "P", "AC", "D", "AE", "mA", "API", "BB", "AA", "As", "Alpha", "S", "W", " BA", "AH", "I", " AI", "PA", "Ma", "Average", "Action", "CA", "U", "AF", "AY", "alpha", "KA", "G", "HA", "NA", "Fa", "Java"], "B": ["F", "Base", "E", "EB", "L", "LB", "V", "H", "Q", "X", "HB", "Y", "UB", "AP", "Bi", "DB", "BA", "AB", "O", "FB", "P", "C", "T", "D", "SB", "AH", "Bal", "BB", "BC", "BI", "TB", "I", "MB", "BE", "Z", "BL", "OB", "WB", "Beta", "U", "GB", "J", "M", "NB", "Band", "N", "QB", "G", "BF", "Bs"], "i": ["gi", "k", "int", "qi", "p", "ai", "ic", "c", "g", " I", "r", " iP", "iter", "iu", "z", "si", "x", "url", "now", "ind", "w", "I", "it", "uri", "u", "d", "ach", "j", "f", "xi", "input", "ci", "v", "e", "info", "id", "li", "ii", "n", "ip"]}}
{"code": "n,m = map(int, input().split())\\n\\ndef make_divisors(n):\\n  divisors = []\\n  for i in range(1, int(n**0.5)+1):\\n    if n%i == 0:\\n      divisors.append(i)\\n      if i != n//i:\\n        divisors.append(n//i)\\n  divisors.sort(reverse=True)\\n  return divisors\\n\\nnumbers = make_divisors(m)\\nfor i in range(len(numbers)):\\n  if numbers[i] <= m/n:\\n    print(numbers[i])\\n    break", "target": "163", "substitutes": {"n": ["s", "k", "a", "mn", "non", "p", "g", "c", "nm", "o", "number", "nc", "num", "y", "net", "en", "un", "rn", "size", "ne", "nu", "z", "fn", "x", "index", "nan", "sn", "w", "zn", "l", "u", "d", "cn", "nt", "nn", "one", "f", "j", "ln", "ns", "no", "ni", "v", "b", "np", "e", "N", "t", "nb", "an"], "m": ["k", "mn", "ma", "mi", "p", "g", "c", "nm", "y", "o", "number", "r", "h", "num", "size", "z", "mini", "x", "dm", "mu", "cm", "l", "u", "d", "pi", "mo", "f", "j", "sm", "bm", "M", "v", "b", "dim", "e", "mm", "hm", "mc", "range"], "divisors": ["diviscored", " divisners", "decidored", "divusions", " divusions", "divsories", "numizores", "divisons", "divxions", " divistions", "divsors", "dividoring", "divisor", "numisories", " divistories", "decisored", "divxners", "divsions", "divumoring", "divumor", "diviscores", "dividners", "divistions", "numizories", "numizor", "dividories", " divistores", "dividor", "divistoring", " divisions", "divumons", " divistor", "divusors", "divizors", "divistons", "divistor", "decidores", "dividores", "divusor", "dividions", "divisiors", "decisors", "divizores", "divizor", "divisiores", " divistoring", "divizories", "divistories", " divistons", "divisners", "dividors", " divusners", "numisores", "decisions", " divisores", "divistores", "divisoring", "dividored", "divumors", " divistors", " divisories", "divactor", "divisored", "numisor", "diviscions", "numizors", "dividons", "decisores", "decidors", " divusors", "divxors", "divistors", "divactores", "divxor", "divisories", "divisiored", "divisores", " divisons", " divisor", "divactories", "numisors", "divsores", "divisiions", "divisions", "divactors", " divusor", " divisoring", "decidions", "diviscors", "divusners"], "i": ["gi", "ih", "a", "ie", "int", "qi", "mi", "p", "ai", "c", "oi", "o", "y", "number", "ini", "num", "iu", "lc", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "uri", "l", "fi", "u", "d", "pi", "j", "f", "io", "xi", "di", "ri", "ni", "ci", "ip", "v", "b", "e", "t", "zi", "id", "li", "ii", "multi", "bi", "abi"], "numbers": ["cumbers", "Nums", "snumbers", "lumber", "bynums", "yumbered", " number", "snumbered", "lumbers", "number", "bynumber", "nums", "cowers", "Numbers", "bynowers", "lodes", "codes", " nodes", "snums", "numbered", "nowers", "yodes", "bynumbers", "Numbered", "yums", "bynodes", "cums", " nowers", "nodes", "yumbers", "lums", " nums"]}}
{"code": "x1, y1, x2, y2 = map(int, input().split())\\ndx, dy = x2 - x1, y2 - y1\\ndef rot(x, y):\\n    return -y, x\\ndx, dy = rot(dx, dy)\\nx3, y3 = x2 + dx, y2 + dy\\ndx, dy = rot(dx, dy)\\nx4, y4 = x3 + dx, y3 + dy\\nprint(x3, y3, x4, y4)\\n", "target": "62", "substitutes": {"x1": ["y5", "X5", " x5", "X3", "X2", "X1", "Xp", "xp", "x5", "yp", " xp"], "y1": ["xone", "Yone", " yone", "y5", " y5", "Y1", "vy5", "vy1", "Y0", "dy5", "vy01", "x0", " y0", "y0", "yone", "dy1", " y01", "dy01", "y01", "vyone", "Y2", "dyone"], "x2": [" x62", "X22", "y12", " xb", "yii", "axii", "y22", "x62", "y62", "dx1", " x22", "X2", "X1", "yb", "dx12", "xb", "dx2", " xii", "xii", " x12", "ax62", "X4", "ax2", "ax3", "dxb", "x22", "x12"], "y2": ["dy0", "ey0", "eyTwo", "Y4", "Y3", "Y1", "YTwo", "Y0", "xTwo", "x0", " yTwo", "dyTwo", " y0", "yTwo", "ey2", "y0", "cy3", "ey1", "dy1", "cy1", "dy2", "Y2", "cy2", "cy4"], "dx": ["dd", "ie", "dh", "dom", "DX", "zx", "distance", "dist", "xs", "width", "xx", "fx", "rx", "ix", "px", "dj", "tp", "md", "z", "zy", "da", "diff", "wy", "w", "yt", "wx", "req", "d", "do", "xd", "dt", "dq", "du", "ww", "dr", "xi", "dc", "cd", "depth", "duration", "ci", " DX", "wd", "xp", "pixel", "dim", "dp", "xy", "ds", "dn", "eddy", "phy"], "dy": ["yd", "dd", "ady", "dh", "dir", "gy", "dist", "distance", " Dy", "phi", "dat", "delay", "dj", "ym", "tie", "md", "dot", "dem", "zy", "idy", "fy", "diff", "wy", "ty", "orient", "dm", "ind", "yt", "lon", "d", "do", "ee", "dl", "dt", "sy", "dq", "du", "den", "sync", "yy", "di", "ni", "db", "wd", "hi", "dev", "xy", "py", "ds", "vy", "dn", "ii", "eddy", "ry", "phy"], "x": ["min", "name", "k", "ox", "int", "X", "p", "tx", "g", "c", "i", "xx", "yx", "fx", "h", "rx", "ix", "px", "z", "ex", "index", "w", "start", "l", "d", "max", "q", "f", "ax", "m", "data", "v", "b", "e", "t", "xy", "col", "xc", "n"], "y": ["yd", "ys", "ye", "p", "Y", "c", "i", "yx", "yn", "z", "zy", "yi", "w", "ny", "yt", "d", "j", "sy", "m", "yy", "ya", "oy", "b", "yl", "v", "e", "t", "xy", "py", "vy", "ry", "ey", "ies"], "x3": ["y03", "dxd", "dx3", " x43", "x63", " x03", " xd", "X3", "xThree", "ax63", "indexthree", "dx1", "index43", "dxThree", "XThree", "x103", "xd", "X1", "Xd", "ythree", "index03", " x63", "xthree", " xThree", "y103", "y63", "index3", "y43", " x103", "x03", "ax103", "ax03", "x43", "ax3", " xthree"], "y3": ["y15", "py6", "py15", "py5", "y03", "ya1", "y5", " y5", " y15", "py3", " y03", "x6", "ey5", "ey1", "ya15", "ya3", " y6", "y6", "x03", "ey3", "ey03", "ey6", "ey15"], "x4": ["X6", "Xfour", "yfour", "y5", " x5", "ix2", "x6", "X2", " x44", "xfour", "y6", "ix4", "y44", "x5", " xfour", "X4", " x6", "x44", "ix5", "ix44"], "y4": ["ya4", "dy4", "yafour", "yfour", "eyfour", "y40", " y44", "ey44", "ey14", " y14", "ey40", " yfour", "dy8", "eyFour", "yFour", " y8", "ey8", "y14", "dyFour", "ya14", "y8", "y44", " y40", "ya44", " yFour", "ey4", "dy40"]}}
{"code": "S = input()\\n\\ns = S[0]\\nfor i in range(1, len(S)):\\n    if s[-1] != S[i]:\\n        s += S[i]\\n\\nif len(S) == 1:\\n    print(0)\\n    exit(0)\\nelif len(S) == 2:\\n    print(1)\\n    exit(0)\\n\\nprint(len(s)-1)\\n", "target": "655", "substitutes": {"S": ["F", "E", "L", "DS", "V", "H", "Q", "X", "Y", "SE", "Sample", "NS", "Si", "K", "TS", "PS", "SH", "Parts", "Source", "SI", "O", "P", "T", "C", "B", "D", "A", "W", "SL", "Sl", "I", "Sing", "SS", "Single", "Set", "U", "R", "Input", "M", "SM", "N", "G", "SO", "SU", "ES"], "s": ["ss", "sq", "a", "spec", "south", "strings", "p", "ps", "xs", "c", "g", "sets", "JS", "o", "h", "results", "P", "C", "sp", "size", "si", "es", "blocks", "w", "sb", "args", "l", "services", "u", "d", "ses", "parts", "sg", "less", "f", "cs", "m", "ssl", "sync", "ns", "input", "os", "gs", "b", "v", "letters", "e", "t", "ls", "N", "ds", "sv", "SU", "n", "ins"], "i": ["gi", "k", "ui", "end", "a", "ie", "int", "qi", "mi", "p", "ai", "c", "y", "o", "ix", "ini", "pos", "iu", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "j", "f", "m", "xi", "di", "ip", "ci", "b", "v", "e", "id", "li", "ii", "val", "bi", "n"]}}
{"code": "def main():\\n    c = list(map(int, input().split()))\\n\\n    c_set = set(c)\\n    print(len(c_set))\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "32", "substitutes": {"c": ["s", "k", "loc", "sc", "ctrl", "p", "g", "i", "h", "r", "ec", "C", "lc", "size", "fc", "cache", "cu", "cv", "con", "l", "u", "d", "f", "cs", "m", "ac", "dc", "input", "set", "ci", "v", "b", "e", "t", "cr", "cc", "count", "col", "mc", "cl", "config", "n"], "c_set": ["C_set", "C_type", "c_list", " c_get", "C_SET", "c_Set", "c_et", "C_Set", "c_type", "c_SET", " c_et", " c_list", "c_get"]}}
{"code": "N=int(input())\\na=[int(i) for i in input().split()]\\nb=[int(i) for i in input().split()]\\n\\ncan = sum(b)-sum(a)\\nactA,actB = 0,0\\nfor i in range(N):\\n    diff = b[i]-a[i]\\n    if diff==0:continue\\n    if diff>0:\\n        actA+=(diff+1)//2\\n        actB+=diff%2\\n    else:\\n        actB+=(-diff)\\nleftA = can-actA\\nleftB = can-actB\\nprint(\"Yes\" if leftA>=0 and leftA*2==leftB else \"No\")\\n", "target": "778", "substitutes": {"N": ["F", "E", "L", "V", "NN", "NL", "H", "Q", "X", "Y", "NS", "NE", "NI", "K", "O", "P", "T", "C", "B", "D", "Ne", "S", "W", "I", "No", "NT", "Z", "Ns", "U", "R", "M", "J", "NB", " n", "G", "NA", "n"], "a": ["aa", "s", "wa", "at", "va", "ma", "p", "ai", "c", "aw", "fa", "y", "ba", "ab", "au", "array", "da", "A", "w", "ia", "l", "u", "d", "f", "ca", "sa", " A", "ac", "asa", "area", "am", "ae", "alpha", "ea", "e", "an", "ad", "n"], "i": ["gi", "s", "k", "ui", "ie", "int", "chi", "qi", "p", "phi", "ai", "c", "o", "y", "ini", "ix", "iu", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "it", "l", "u", "pi", "d", "j", "f", "io", "m", "xi", "input", "di", "ni", "ci", "v", "e", "id", "li", "ii", "n", "ip"], "b": ["s", "be", "ib", "fb", "p", "bs", "bp", "g", "c", "y", "wb", "mb", "bis", "beta", "B", "ba", "ab", "A", "sb", "cb", "l", "ob", "bb", "d", "bf", "rb", "u", "abb", "f", "bd", "binary", "v", "base", "e", "bc", "nb", "bi", "n"], "can": ["aa", "k", "call", "auto", "common", "sc", "non", "go", " Can", "na", "correct", "c", "DC", "pan", "Na", "AN", "any", "will", "sign", "ane", "AC", "ann", "anc", "uc", "AA", "An", "Can", "cross", "allow", "con", "max", "gain", "ca", "Con", "ban", "ac", "cat", "yes", "self", "CA", "man", "co", "scan", "act", "null", "no", "CAN", "cover", "NA", "an", "sum", "n"], "actA": ["ctA", "actO", " actO", "ActP", "ActA", "ActAM", "actionA", "actionP", "factU", "factB", "actAP", "ctB", "actionAM", "actionB", "factAP", "ActB", "factO", "actU", "factA", "actionAP", "actP", " actAP", "actAM", " actU", "ctP", "ctAM", "actionO", "actionU"], "actB": ["factW", "factL", " actb", "agentb", "effectWB", "ActD", "actWB", "actW", " actF", "effectB", "ActA", "actBER", "factF", "actionBER", "actionA", "factWB", "factB", "antL", "actBB", "actionB", "agentA", "actD", "actionBB", "factD", "agentB", "factBB", "ActB", "effectF", "antD", "ActL", "ActBB", "factA", "ActBER", "actL", "actb", "effectW", "factb", " actWB", "factBER", " actW", "agentWB", "antB", "actF"], "diff": ["bad", "new", "error", "change", "cmp", "part", "fix", "missing", "default", "dist", "distance", "ge", "err", " differences", "Delta", "low", "case", "erence", "pos", " difference", "beta", "inf", "split", "conf", "div", "comp", "iff", "bug", "patch", "d", "shift", "f", "update", "different", "fail", "rel", "no", "data", "dev", "flow", "e", "count", "changed", "message", "mix", "progress", "range", "changes", "sum", "Diff", "ref"], "leftA": [" leftAPI", "actAA", "lCA", "righta", "la", "leftAA", " leftAA", "lAPI", "LeftA", "Lefta", "LeftCA", " lefta", "LeftAPI", "rightA", "rightB", "lA", " leftCA", "rightAA", "leftAPI", "leftCA", "lB", "acta", "lefta"], "leftB": ["actY", "actWB", "joinY", "rightBI", "LeftBI", "LeftBB", " leftBI", "leftBI", "LeftA", "leftb", "joinWB", " LeftY", "LeftB", "joinB", "rightA", " leftBB", " LeftB", "joinb", "rightB", "leftWB", "rightBB", "actb", " Leftb", " LeftWB", "leftBB", "leftY"]}}
{"code": "N,K,C= map(int, input().split())\\nS=input()\\nA=[]\\nfor i in range(N):\\n  if S[i]=='o':\\n    A.append(i)\\nM=[]\\nd=0\\ncnt=0\\nfor i in A:\\n  if d<=i:\\n    M.append(i)\\n    d=i+C+1\\n    cnt+=1\\n  if cnt==K+1:\\n    print()\\n    exit()\\n    \\nU=[]\\nd=N-1\\ncnt=0\\nfor i in A[::-1]:\\n  if i<=d:\\n    U.append(i)\\n    d=i-C-1\\n    cnt+=1\\n  if cnt==K+1:\\n    print()\\n    exit()\\nD=set(M)&set(U)\\nD=sorted(D)\\nfor i in D:\\n  print(i+1)", "target": "647", "substitutes": {"N": ["F", "k", "E", "L", "V", "H", "Q", "X", "Y", "NC", "Size", "NS", "CNN", "O", "P", "T", "B", "Len", "Ne", "W", "I", "Z", "Ns", "R", "J", "CN", "G", "n"], "K": ["F", "k", "KK", "E", "Ke", "L", "KO", "KI", "V", "Max", "H", "Ak", "Q", "X", "Y", "KE", "O", "Sk", "P", "T", "SK", "NK", "KS", "KB", "W", "I", "No", "HK", "Ch", "Z", "KR", "Context", "PK", "J", "G", "KN", "Ku"], "C": ["F", "E", "CE", "L", "Cs", "V", "CI", "Cu", "H", "One", "X", "Y", "Size", "NC", "c", "DC", "O", "P", "T", "B", "EC", "W", "CF", "I", "Ch", "Sc", "Z", "CL", "CS", "R", "JC", "CC", "G", "Count"], "S": ["F", "s", "E", "L", "IS", "V", "AS", "X", " s", "Y", "SE", "Q", "NS", "Si", "SH", "SI", "O", "SA", "P", "T", "B", "SK", "W", "RS", "Sl", "I", "SS", "OS", "Z", "CS", "R", "GS", "G", "BS", "SU"], "A": ["F", "E", "a", "L", "At", "V", "All", "AS", "X", "Q", "Y", "MA", "AP", "LA", "AR", "Ha", "AM", "O", "P", "B", "T", "As", "Ar", "AC", "API", "AA", "Alpha", "W", "I", "Ab", "Ma", "Array", "Art", "AF", "G", "Am", "NA", "An", "App"], "i": ["ui", "ei", "int", "qi", "phi", "ai", "y", "ix", "slice", "si", "x", "yi", "l", "j", "f", "b", "li", "inner", "info", "gi", "ie", "mi", "ini", "api", "u", "pi", "ni", "ci", "ij", "v", "e", "multi", "id", "ti", "ip", "ami", "chi", "p", "oi", "r", "iu", "z", "index", "ind", "start", "it", "fi", "io", "m", "input", "zi", "anti", "n", "ji", "k", "a", "c", "o", "iq", "mini", "I", "uri", "idi", "ki", "xi", "di", "iw", "ii", "bi", "ori"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "MA", "Y", "MO", "Man", "AM", "O", "P", "T", "B", "Map", "MD", "LM", "W", "I", "Do", "m", "MC", "Me", "Mu", "R", "J", "G", "Mo"], "d": ["dx", "s", "k", "did", "dd", "a", "dy", "dom", "ed", "fd", "p", "nd", "c", "dat", "o", "y", "sd", "md", "done", "z", "da", "x", "dm", "w", "ind", "l", "u", "do", "xd", "Do", "f", "dt", "dl", "m", "du", "dc", "cd", "di", "ct", "b", "v", "ld", "e", "t", "ds", "id", "ad", "n"], "cnt": ["ecno", "Cannot", " cpt", "cpt", "cnc", "lcpt", "rocnt", "recno", "Cpt", " cct", "lcont", "cct", "crt", "lcnc", "econt", "lcrt", " cannot", "Cnt", " cno", "cont", "ucnc", "recont", "Cnc", "Cno", "prt", "unc1", "ecnt", "ucno", "C1", "uncannot", "unctext", "recnc", "rocno", "uncno", "lctext", "recnt", "ctext", " count", "cno", "cannot", "lcnt", "roctext", "ucnt", "lcct", "pnt", "rocrt", "Crt", "ucct", "lcno", "count", "ppt", "Cct", "ecnc", "uncnt", " c1", "c1", "uncrt", "pno", "Count", "lcount"], "U": ["F", "E", "L", "Up", "V", "Q", "X", "CU", "Y", "UB", "UC", "UN", "LU", "Su", "UP", "O", "P", "T", "B", "UD", "I", "UV", "u", "UT", "Ut", "Do", "US", "UR", "R", "OU", "UU", "PU", "MU", "G", "UF", "UL"], "D": ["F", "AD", "E", "DA", "L", "DS", "V", "H", "Q", "X", "DH", "Y", "DM", "DO", "DB", "O", "P", "T", "B", "MD", "DD", "Dou", "DT", "W", "I", "CD", "Ds", "Do", "Di", "DF", "Z", "R", "DL", "G", "DI"]}}
{"code": "import math\\nr = float(input())\\ns = '{:.6f}'.format(r * r * math.pi)\\nl = '{:.6f}'.format(2 * r * math.pi)\\nprint(s,l)\\n", "target": "758", "substitutes": {"r": [" p", " h", "k", "mr", "str", " R", "rad", "p", "g", "c", "i", "o", "rd", "h", " c", "radius", "y", "lr", "z", "x", " sr", "ar", "w", "rb", "d", "u", "pi", "q", "f", "range", "sr", "j", "m", "rl", "R", "alpha", "nr", "b", "v", "pair", "e", "t", "cr", "order", " yr", " rs", "rs", " d", "n"], "s": ["ss", "uss", "ans", "p", "g", "c", "i", "y", "sl", "h", "o", "si", "es", "x", "S", "w", "sb", "u", "d", "sg", "q", "sin", "f", "cs", "m", "su", "v", "b", "t", "e", "ls", "ds", "se", "rs", "n"], "l": ["lp", "ol", "L", "p", "al", "ly", "sl", "el", "ml", "lr", "la", "lc", "kl", "ll", "vl", "dl", "ln", "f", "lf", "rl", "nl", "wl", "ell", "v", "yl", "ls", "le", "il", "li", "ul", "lb", "n"]}}
{"code": "n=int(input())\\nl=[]\\nfor i in range(n):\\n    a,b=map(int,input().split())\\n    l.append((a+b,a,b))\\nl.sort(reverse=True)\\nk=0\\nx=0\\ny=0\\nwhile k<n:\\n    if k%2==0:\\n        x+=l[k][1]\\n    else:\\n        y+=l[k][2]\\n    k+=1\\nprint(x-y)", "target": "794", "substitutes": {"n": ["min", "s", "p", "c", "o", "nc", "r", "num", "number", "net", "size", "ne", "z", "fn", "norm", "sn", "w", "d", "nn", "f", "j", "m", "ln", "ns", "no", "nl", "nr", "len", "v", "t", "N", "e", "count", "nb"], "l": ["lp", "loc", "ol", "L", "shell", "p", "g", "c", "ly", "o", "sl", "r", "el", "la", "left", "lo", "lc", "kl", "u", "d", "ll", "ln", "dl", "f", "m", "j", "rl", "list", "nl", "fl", "v", "ell", "e", "ls", "t", "il", "le", "li", "ul", "ler", "lin"], "i": ["gi", "ie", "p", "ai", "c", "h", "el", "z", "index", "ind", "I", "u", "d", "q", "f", "j", "inn", "e", "il", "col", "id", "li", "ip"], "a": ["aa", "int", "ma", "p", "ai", "c", "fa", "api", "la", "ba", "ab", "pa", "da", "A", "w", "ak", "u", "d", "ca", "sa", "f", "ac", "area", "am", "aj", "ae", "oa", "alpha", "e", "an", "ad"], "b": ["s", "aa", "fb", "p", "bs", "g", "c", "pb", "r", "h", "wb", "beta", "B", "ba", "ab", "body", "sb", "w", "rb", "d", "bb", "bf", "f", "j", "eb", "xb", "db", "v", "e", "bas", "abc", "nb", "lb"], "k": ["km", "kid", "ke", "p", "g", "c", "gh", "K", "o", "work", "kk", "ijk", "ks", "kn", "z", "ch", "mk", "kin", "kw", "w", "ka", "ko", "ak", "ask", "ok", "u", "d", "unk", "q", "ki", "j", "sk", "ky", "f", "m", "pp", "yk", "ek", "ku", "kick", "key", "v", "ck", "e", "kr", "id", "ik", "uk"], "x": ["dx", "X", "p", "c", "yx", "xx", "h", "r", "ix", "o", "px", "pos", "z", "cy", "w", "u", "d", "q", "j", "ax", "f", "m", "ya", "length", "v", "key", "e", "t", "xy", "rx"], "y": ["yd", "ady", "dy", "ys", "ye", "gy", "p", "Y", "c", "ym", "ay", "z", "ty", "ch", "zy", "yi", "yo", "cy", "wy", "ny", "yt", "bb", "j", "ky", "sy", "yy", "ya", "oy", "iy", "v", "e", "xy", "py", "vy", "ry", "ey"]}}
{"code": "# coding: utf-8\\n\\nN = int(input())\\n\\ncount = 0\\nfor i in range(1, N+1, 2):\\n    i_yakusu = 0\\n    for j in range(1, i+1):\\n        if i % j == 0:\\n            i_yakusu += 1\\n    if i_yakusu == 8:\\n        count += 1\\n\\nprint(count)", "target": "288", "substitutes": {}}
{"code": "n,m,l=map(int,input().split())\\na=[list(map(int,input().split())) for i in range(n)]\\nb=[list(map(int,input().split())) for j in range(m)]\\nc=[[0]*l for r in range(n)]\\nfor i in range(n):\\n    for j in range(l):\\n        for r in range(m):\\n            c[i][j]+=a[i][r]*b[r][j]\\n    print(' '.join(map(str,c[i])))\\n", "target": "684", "substitutes": {"n": ["s", "k", "p", "g", "o", "y", "nc", "en", "un", "nu", "ne", "z", "x", "sn", "w", "u", "d", "nt", "f", "ln", "ns", "no", "v", "len", "t", "N", "e", "nb", "an"], "m": ["s", "k", "p", "ms", "g", "y", "o", "h", "im", "en", "z", "x", "mu", "w", "cm", "u", "d", "q", "f", "sm", "M", "v", "e", "mm", "hm", "li", "range", "an"], "l": ["s", "k", "ol", "L", "p", "g", "y", "o", "sl", "h", "el", "lc", "z", "kl", "x", "w", "u", "d", "ll", "q", "f", "ln", "nl", "fl", "v", "len", "e", "ls", "t", "li"], "a": ["aa", "at", "ma", "ans", "p", "na", "ai", "y", "ba", "ab", "au", "ar", "A", "ia", "u", "d", "ca", "f", "sa", "ac", "ga", "area", "am", "aj", "ae", "alpha", "e", "an", "ad"], "i": ["ji", "k", "ui", "vi", "ie", "int", "qi", "p", "ai", "o", "y", "ini", "iu", "lc", "ti", "z", "si", "x", "yi", "I", "it", "u", "pi", "d", "io", "f", "xi", "ori", "di", "ri", "ni", "ci", "ij", "v", "e", "il", "zi", "li", "ii", "bi", "ip"], "b": ["s", "k", "p", "bs", "g", "y", "o", "h", "B", "ba", "ab", "z", "x", "bl", "w", "sb", "u", "bb", "d", "bf", "f", "eb", "v", "e", "nb", "lb"], "j": ["ji", "k", "ie", "int", "ja", "p", "g", "y", "o", "h", "un", "jj", "jl", "z", "si", "index", "x", "ind", "u", "uj", "d", "q", "f", "jp", "ir", "xi", "ij", "J", "v", "e", "t", "id", "li", "ii"], "c": ["k", "p", "g", "y", "nc", "h", "o", "C", "lc", "z", "ce", "x", "cy", "cu", "cm", "u", "d", "f", "ca", "cs", "ac", "cat", "dc", "cd", "ci", "ct", "v", "cf", "e", "cr", "count", "cc", "col", "xc", "enc"], "r": ["yr", "k", "ur", "p", "ai", "err", "y", "o", "pr", "re", "lr", "z", "x", "ar", "w", "it", "u", "d", "rb", "q", "f", "sr", "right", "ir", "rs", "rc", "br", "rel", "R", "nr", "v", "e", "cr", "fr", "id", "ru", "er", "range"]}}
{"code": "a,b = map(int,input().split())\\nc = 0\\nfor i in range(2):\\n    if a > b:\\n        c += a\\n        a -= 1\\n    elif a < b:\\n        c += b\\n        b -= 1\\n    else:\\n        c += b\\n        b -= 1\\nprint(c)", "target": "233", "substitutes": {"a": ["aa", "auto", "sta", "va", "ma", "p", "qa", "na", "ai", "g", "aw", "fa", "ama", "eta", "api", "la", "ba", "ab", "au", "pa", "da", "A", "ar", "af", "ia", "l", "u", "d", "f", "sa", "ca", "asa", "ac", "m", "ga", "area", "aux", "am", "ae", "alpha", "ea", "e", "anta", "abc", "an", "ad", "n"], "b": ["aa", "k", "ib", "boot", "fb", "p", "bs", "g", "pb", "plus", "y", "r", "h", "emb", "wb", "mb", "B", "ba", "ab", "pa", "x", "w", "sb", "body", "l", "ob", "bb", "d", "rb", "bf", "ub", "abb", "u", "f", "eb", "j", "m", "ac", "db", "bin", "gb", "v", "bar", "base", "e", "nb", "lb", "ad", "n"], "c": ["cur", "k", "cycle", "code", "toc", "p", "g", "h", "y", "r", "ec", "nc", "o", "cp", "chain", "C", "lc", "uc", "z", "fc", "ce", "unc", "x", "cache", "cy", "cu", "w", "cm", "l", "u", "d", "f", "ca", "cs", "m", "ac", "dc", "cd", "ci", "ct", "v", "e", "t", "cr", "cc", "count", "col", "mc", "xc", "enc", "n", "pc"], "i": ["gi", "ie", "ib", "p", "ai", "g", " I", "y", "h", "r", "num", "iu", "index", "x", "ind", "I", "u", "d", "j", "f", "ac", "col", "id", "li", "n", "ip"]}}
{"code": "from collections import deque\\n\\ndq=deque()\\nn=int(input())\\n\\nfor i in range(n):\\n\tcom=input().split()\\n\tif com[0]=='insert':\\n\t\tdq.appendleft(com[1])\\n\telif com[0]=='deleteFirst':\\n\t\tdq.popleft()\\n\telif com[0]=='deleteLast':\\n\t\tdq.pop()\\n\telse:\\n\t\tif com[1] in dq:\\n\t\t\tdq.remove(com[1])\\nprint(' '.join(dq))", "target": "232", "substitutes": {"dq": ["group", "pool", "queue", "qi", "gh", "delay", "rx", "que", "conn", "ctx", "q", " misc", "cat", "dc", "sequence", "list", "data", "qt", "zip", "keep", "dn", "hw", "Q", "gui", "dep", "lc", "hillary", "quad", "eq", "nw", "sync", "cd", "seq", "multi", "pg", "sq", "ctrl", "qa", "idd", "window", "cb", "req", "d", "cmd", "du", "requ", "input", "pkg", "question", "flow", "imp", "qq", "quick", "dx", "qs", "die", "nav", " queue", "iq", "xxx", "search", "diff", "wx", "patch", "dt", "dl", "query", "df", "fail", "aux", "db", "quit", "hold", "down", "iw"], "n": ["k", "p", "na", "c", "o", "r", "number", "num", "en", "y", "size", "ne", "z", "x", "nan", "sn", "w", "l", "d", "nt", "f", "j", "m", "nw", "ns", "no", "nl", "nr", "b", "np", "t", "N", "count", "e", "nb", "nor"], "i": ["gi", "ie", "ib", "qi", "p", "ai", "c", " I", "y", "ix", "im", "item", " ip", "iu", "ti", "index", "x", "ind", "I", "u", "io", "col", "id", "li", "bit", "ip"], "com": ["name", "cur", "loc", "op", "call", "spec", "common", "code", "cor", "qu", "sex", "dom", "c", "COM", "im", "cont", "comment", "log", "cum", "fe", "coll", "names", "conf", "ab", "uc", "component", "ch", "ex", "sim", "url", "comp", "crit", "om", "con", "cm", "req", "cal", "Com", "hop", "cap", "ca", " Com", "row", "comm", "once", "char", "comb", "term", "core", "see", "lim", "co", "close", "check", "sem", "atom", "pe", "bc", "cell", "col", "sub", "cl", "tc"]}}
{"code": "ans = []\\ns = input()\\nfor i in range(26):ans.append(0)\\nfor i in s:\\n  ans[ord(i)-97] = 1\\nfor i in range(26):\\n  if(ans[i]==0):print(chr(97+i));exit()\\nprint(\"None\")", "target": "767", "substitutes": {"ans": ["a", "ents", "groups", "lan", "nas", "amps", "span", "ams", "atan", "na", "eps", "ras", "xs", "ats", "ai", "arts", "ions", "results", "AN", "ANS", "rules", "anes", "ks", "aces", "names", "ann", "anon", "ani", "anc", "ana", "es", "ands", "params", "x", "can", "ays", "ars", "args", "aned", "ons", "ids", "aus", "anne", "ens", "leans", "cs", "ants", "acs", "ns", "types", "parser", "scan", "os", "oa", "letters", "ls", "ips", "ops", "an", "ins"], "s": ["ss", "a", "qs", "xs", "c", "rows", "sym", "ions", "sets", "cases", "o", "si", "es", "S", "sb", "I", "l", "services", "ses", "lines", "d", "sg", "f", "sa", "rs", "m", "sync", "sw", "ns", "gs", "b", "e", "ls", "opens", "ips", "ds", "se", "ops", "n", "ins"], "i": ["ih", "k", "ui", "ji", "a", "ie", "ei", "int", "chi", "qi", "p", "phi", "ai", "c", "oi", "y", "r", "o", "ix", "pos", "iu", "ti", "z", "si", "eni", "index", "x", "ind", "start", "I", "uri", "l", "u", "pi", "d", "io", "j", "f", "m", " j", "xi", "di", "ri", "ni", "ci", "ski", "b", "e", "id", "li", "ii", "n", "bi", "ip"], "ord": ["alt", "sid", "align", "code", "arr", "nd", "num", "orig", "coord", "div", "asm", "oct", "ind", "chrom", "src", "sup", "char", "rank", "addr", "cd", "ip", "bin", "mod", "order", "atom", "byte", "add", "ad", "org"]}}
{"code": "M, K = map(int, input().split())\\n\\nif K >= 2 ** M:\\n    print(-1)\\nelif K == 0:\\n    ans = []\\n    x = range(0, 2 ** M)\\n    y = range(0, 2 ** M)\\n    for xx, yy in zip(x, y):\\n        ans.append(xx)\\n        ans.append(yy)\\n    print(*ans)\\nelse:\\n    if M == 1 and K == 1:\\n        print(-1)\\n        exit()\\n    t = 0\\n    for i in range(1, 2 ** M):\\n        if i == K: continue\\n        t ^= i\\n    if t == K:\\n        x = [i for i in range(0, 2 ** M) if i != K]\\n        ans = [K] + x + [K] + list(reversed(x))\\n        print(*ans)\\n    else:\\n        print(-1)\\n", "target": "97", "substitutes": {"M": ["F", "MN", "GM", "E", "L", "V", "H", "Q", "X", "MA", "Y", "DM", "MX", "PM", "NM", "AM", "O", "P", "T", "LM", "B", "D", "C", "MD", "S", "A", "W", "CM", "OM", "I", "FM", "IM", "Z", "m", "VM", "MC", "U", "R", "J", "SM", "MF", "N", "MM", "MT", "G", "MO", "RM"], "K": ["F", "k", "KK", "Ke", "E", "ID", "L", "KI", "AK", "V", "H", "Q", "X", "Y", "IK", "KE", "TH", "Sk", " k", "P", "T", "C", "B", "SK", "O", "D", "NK", "KS", "S", "A", "W", "I", "No", "HK", "unk", "Z", "KR", "PK", "MC", "U", "Mask", "R", "OK", "J", "CP", "N", "G", "CH", "Ku"], "ans": ["s", "a", "ents", "lan", "nas", "cas", "amps", "eps", "ams", "p", "na", "atan", "ai", "xs", "ats", "ions", "cases", "antis", "anas", "ads", "aos", "photos", "ANS", "AN", "ks", "asts", "aces", "names", "ann", "anon", "ani", "au", "ana", "es", "ands", "params", " means", "can", "ars", "ays", "args", "aned", "lines", "parts", "atts", "ons", "aus", "sk", "ens", "trans", "ants", "ns", "co", "scan", "ases", "list", "os", "ts", "cons", "ls", "plan", "ds", "icks", "an", "addons", "ins"], "x": ["dx", "s", "k", "int", "sex", "X", "p", "tx", "xs", "c", "plus", "yx", "rx", "h", "px", "ix", "pos", "o", "lex", "aces", "ann", "z", "array", "ex", "xxx", "index", "w", "cross", "l", "wx", "u", "d", "f", "ax", "m", "xi", "ux", "shape", "list", "data", "v", "b", "xp", "e", "xes", "xy", "id", "test", "an", "n"], "y": ["yr", "yd", "ys", "dy", "ye", "hy", "p", "Y", "z", "zy", "yi", "wy", "cy", "yo", "ny", "yt", "sy", "j", "ky", "m", "ya", "oy", "iy", "yl", "b", "xy", "vy", "isy", "ry", "ey", "ies"], "xx": ["ss", "dx", "dd", "XX", "X", "zx", "something", "yx", "fx", "rx", "eeee", "ix", "px", "zzy", "zy", "xxx", "xxxx", "cross", "XXX", "wx", "nn", "ax", "zz", "ww", "xi", "ux", "stuff", "foo", "ck", "xy", "sky", "xxxxxxxx"], "yy": ["yr", "YY", "dy", "gy", "zx", "uz", "yx", "bird", "z", "uy", "zy", "xxx", "ty", "yo", "cy", "xxxx", "fy", "ah", "ny", "hop", "aaa", "j", "sy", "zz", "ya", "oy", "foo", "yl", "xy", "py", "vy", "ey", "sky"], "t": ["s", "k", "a", "int", "at", "tm", "tt", "p", "g", "c", "o", "h", "ot", "iot", "T", "tf", " ti", "z", "ty", "I", "it", "l", " T", "u", "pi", "nt", "ta", "f", "j", "m", "ts", "v", "b", "e", "n", "ti"], "i": ["gi", "ji", "k", "a", "ie", "int", "chi", "Ti", "qi", "p", "phi", "ai", "ic", "c", "oi", "o", "ix", "ini", "iu", "T", " ti", "z", "si", "index", "yi", "w", "I", "it", "l", "iti", "u", "pi", "ta", "f", "j", "io", "m", "xi", "ori", "di", "hi", "ip", "ci", "ni", "v", "b", "e", "zi", "id", "li", "ii", "ik", "n", "bi", "ti"]}}
{"code": "N = int(input())\\nd = list(map(int,input().split()))\\nd.sort()\\ndmed1 = N//2 - 1\\ndmed2 = N//2\\nans = d[dmed2]-d[dmed1]\\nprint(ans)", "target": "415", "substitutes": {"N": ["F", "E", "L", "V", "NN", "H", "X", "Y", "Size", "Num", "NS", "NI", "K", "NM", "CNN", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "A", "I", "No", "NT", "Ni", "Z", "Ns", "ns", "R", "M", "J", " n", "G", "NA", "n"], "d": ["s", "k", "dd", "a", "p", "nd", "g", "c", "i", "dat", "o", "dict", "sd", "ded", "D", "z", "x", "dm", "w", "l", "Ds", "do", "u", "f", "j", "dt", "m", "dl", "dc", "di", "data", "db", "b", "ld", "v", "t", "e", "pd", "ds", " D", "ad", "n"], "dmed1": [" dmad4", "Dmad2", "dmodOne", " dmed3", "dMed2", "dmad01", "Dmad01", "dmadOne", "dMed1", "dmad3", "DmedOne", "dmer2", "dmed01", "Dmed2", "dmag1", "dmed4", "dmagOne", " dmed4", "dmod1", " dmad3", "dmad4", "dmag2", "DmadOne", "Dmed01", "dMed3", "dmad1", "dmer3", " dmad2", "dmedOne", "dmag01", "Dmed1", " dmad1", "dmer4", "dmer1", "dmad2", "dmod2", "Dmad1", "dMed4", "dmod01", "dmed3"], "dmed2": ["Dmad2", "dMed4", "DmedB", "dmer0", "Dmed4", "dMed2", "Dmed0", "dmad0", "dMedB", "dMed1", "dmer2", "Dmad4", "Dmed2", "dmed4", "dmad4", "dMed0", "dmedB", "dmad1", "dmadB", "dmed0", "DmadB", "Dmad0", "dmerB", "dmer4", "dmad2", "dmer1", "Dmad1", "Dmed1"], "ans": ["ents", "lan", "ras", "cas", "nas", "na", "ats", "Ann", "ions", "aning", "anas", "AN", "CNN", "ads", "ANS", "annels", "ann", "anon", "ani", "anc", "ana", "nan", "An", "ars", "anned", "anks", "aned", "chan", "ons", "leans", "sk", "ants", "ns", "os", "cons", "ls", "ANN", "ians", "ds", "an"]}}
{"code": "a, b = map(int, input().split())\\nans = \"Possible\" if a*b*(a+b) % 3 == 0 else \"Impossible\"\\nprint(ans)", "target": "635", "substitutes": {"a": ["aa", "sta", "int", "ma", "p", "qa", "aka", "c", "aw", "ama", "fa", "i", "y", "la", "ba", "mA", "ab", "au", "da", "x", "pa", "A", "l", "u", "d", "f", "sa", "ca", "asa", "ac", "m", "aj", "am", "ae", "alpha", "ea", "e", "ha", "anta", "ada", "an", "ad", "n"], "b": ["s", "aa", "k", "ib", "fb", "p", "bs", "g", "c", "i", "y", "number", "r", "h", "wb", "mb", "beta", "B", "ab", "z", "x", "A", "sb", "l", "bb", "d", "bf", "rb", "u", "abb", "f", "eb", "v", "e", "count", "abc", "nb", "lb", "bi", "ad", "n"], "ans": ["ents", "nas", "sex", "amps", "eps", "cas", "atan", "na", "ats", "ags", "cases", "anas", "AN", "ANS", "anes", "ks", "aces", "ann", "ani", "ana", "es", "ania", "can", " means", "ars", "anus", "anks", "lines", "aned", "ons", "aus", "ens", "leans", "cs", "ants", "ns", "idents", "os", "ls", "plan", "an", "comments", "ins"]}}
{"code": "N, M = map(int, input().split())\\nS = list(map(int, input().split()))\\nT = list(map(int, input().split()))\\ndp = [1] * (M+1)\\ndpleft = [0] * (M)\\nMOD = 10 ** 9 + 7\\nndp = [1] * (M+1)\\nfor n in range(N):\\n    for m in range(M):\\n        if S[n] == T[m]:\\n            ndp[m+1] = ndp[m] + dp[m+1]\\n            dpleft[m] = dp[m+1]\\n        else:\\n            ndp[m+1] = ndp[m] + dpleft[m]\\n    dp = ndp[:]\\nprint(dp[-1] % MOD)", "target": "505", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "H", "Q", "X", "Y", "Num", "NS", "NE", "K", "NM", "CNN", "O", "P", "C", "B", "D", "Ne", "W", "I", "No", "NT", "Z", "Ns", "U", "R", "J"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "MO", "K", "RM", "NM", "AM", "O", "MON", "P", "B", "LM", "D", "C", "JM", "W", "CM", "OM", "I", "FM", "IM", "Z", "U", "Mi", "R", "MS", "SM", "MF", "MM", "MT", "MU", "Mo"], "S": ["F", "s", "E", "L", "V", "Y", "SR", "NS", "Si", "TS", "PS", "SI", "O", "P", "C", "B", "D", "SK", "A", "SL", "I", "SS", "OS", "Ns", "CS", "U", "R", "SM", "SP", "SN", "G", "ES"], "T": ["F", "TP", "E", "L", "V", "H", "X", "Y", "TA", "TS", "TN", "TV", "Tu", "O", "P", "C", "B", "D", "TB", "DT", "NT", "UT", "TX", "TM", "TT", "U", "R", "J", "TF", "t", "MT", "VT", "PT"], "dp": ["lp", "TP", "dd", "dh", "wp", "eps", "p", "pb", "fp", "DC", "dat", "DM", "tp", "pm", "cp", "tmp", "gp", "beta", "dB", "P", "dep", "D", "NP", "DD", "dot", "PP", "dm", "cm", "d", "xd", "DP", "dl", "dt", "DI", "pp", "deb", "dr", "dc", "cd", "df", "pkg", "di", "ep", "drop", "db", "CP", "wd", "np", "pair", "pd", "imp", "ds", "dn", "hp", "VP", "ip"], "dpleft": ["doplet", " dplet", "dpleFT", "doplefts", "dveFT", " doplefts", " dlekt", "dpext", "dplegt", "DpleFT", "Dplegt", "DpeFT", "dplever", "dlelt", "dprlt", "dvekt", "dveft", "dplyt", "dplyver", " dplefts", " dlext", " dplekt", "Dpegt", "dplelt", " dopleft", "dplyft", " dplext", "dplykt", "dplyFT", "dprkt", "dprft", "dleft", "delefts", "dplyfts", " doplet", "dpelt", "dplekt", "dplext", "dopleft", "dpegt", "dlext", "dplygt", "Dpeft", "dpeft", "dlekt", "delet", "dpekt", " dplelt", "Dpekt", " dlelt", " dplever", "Dpleft", " doplever", "dprxt", "dplefts", "dplet", "dvegt", "dpeFT", "Dplekt", "delever", "doplever", " dleft", "deleft"], "MOD": ["mode", "ID", "REM", "PUT", "X", "mult", "MED", "PM", "DM", " mod", "ROM", "md", "D", "LOD", "MD", "Mod", "Module", "DIV", "DD", "MAC", "VERSION", "module", "OD", "SIZE", "OM", "Mods", "MODE", "DR", "Mode", "ARM", "FD", "mods", "mod", "MM", "MT", "Mo", "NUM", "RM"], "ndp": ["ddc", "idm", "cdnps", "NDp", "ndf", "ndps", "idp", "ntd", "vdp", "odp", "ncp", "ddp", "ydP", "ngc", "undp", "undn", "sdP", "ncd", "vdps", "ntp", "ydps", "ngm", "ldp", "NDP", "ngf", "sdps", "vdm", "sdm", "ddd", "undps", "ngp", "idps", "odc", "NDn", "dds", "idc", "ndm", "cdns", "nccp", "ddcp", "undP", "ndd", "ldc", "ldf", "ydm", "ngP", "ndc", "vdc", "odP", "ntcp", "cdnp", "ndn", "ddn", "odf", "ddps", "NDps", "ydp", "ndcp", "ods", "ldP", "cdnc", "ddm", "ncP", "ntP", "ngps", "nds", "ddP", "ndP", "odps", "sdp"], "n": ["a", "mn", "p", "na", "nd", "g", "c", "nm", "i", "o", "en", "num", "un", "net", "nu", "ne", "z", "x", "sn", "ind", "l", "u", "d", "cn", "nn", "nt", "f", "j", "network", "ns", "v", "b", "e", "nb", "an"], "m": ["em", "km", "s", "k", "mn", "ma", "tm", "mi", "p", "ms", "g", "nm", "c", "i", "o", "y", "r", "h", " i", "pm", "ym", "im", "md", "mini", "x", "fm", "module", "dm", "mu", "w", "vm", "om", "cm", "l", "machine", "u", "d", "f", "j", "sm", "bm", "man", "am", "b", "v", "mod", "e", "mm", "hm", "gm", "mc", "an", "um"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nX, Y = map(int, input().split())\\n    \\nif X % Y == 0:\\n    print(-1)\\n    exit()\\n\\nprint(X)", "target": "396", "substitutes": {"input": ["error", "raw", "IN", " output", "value", "int", "PUT", "sample", "Q", "method", "sleep", "request", "radio", "load", "format", " x", "switch", "conf", "config", "array", "run", "index", "x", "expression", "exec", "answer", "out", "IO", " Input", "model", "eval", "option", "output", "parent", " int", "data", "Input", "U", "view", "select", "help", "flow", " IN", "print", "echo", "submit", "param", "form", "n"], "X": ["F", "PI", "ID", "E", "L", "XXXX", "XM", "V", "H", "Python", "Q", "XX", "Check", "XP", "K", "MX", "ZX", "O", "P", "T", "C", "Int", "IP", "FORM", "x", "PE", "A", "W", "XXX", "HTTP", "I", "TX", "Z", "Code", "XY", "Value", "U", "Input", "Content", "J", "M", "XL", "N", "Index", "VALUE"], "Y": ["F", "PI", "YY", "E", "L", "dy", "V", "YC", "y", " y", "O", "P", "T", "C", "D", "IP", "x", "S", "A", "W", "Ind", "I", "Type", "Z", "IO", "XY", "Py", "yy", "U", "oy", "M", "J", "N", "py", "Col", "Index", "My", "YS"]}}
{"code": "while True:\\n    s = raw_input()\\n    if(s == \"-\"):\\n        break\\n    m = input()\\n    for i in range(m):\\n        h = input()\\n        temp = \"\"\\n        for j in range(h, len(s)):\\n            temp += s[j]\\n        for j in range(h):\\n            temp += s[j]\\n        s = temp\\n    print(s)", "target": "715", "substitutes": {"s": ["ss", "new", "k", "sh", "a", "south", "strings", "spec", "sample", "p", "ps", "ms", "g", "c", "sym", "states", "sl", "y", "r", "o", "storage", "sp", "size", "z", "si", "es", "params", "x", "S", "w", "sb", "current", "l", "services", "ses", "d", "u", "parts", "sg", "js", "f", "sm", "ns", "ws", "input", "su", "gs", "b", "v", "ts", "space", "t", "e", "ls", "string", "ds", "source", "n"], "m": [" p", " M", " ms", " w", "p", "ms", "g", "c", "o", "y", "r", "im", "md", " f", "z", " cm", "w", "cm", "l", "u", "d", "f", "sm", "bm", " mm", "am", "M", "b", "v", "mod", "e", "mm", "gm", "hm", "mc", " b", "n"], "i": ["ji", "ih", "p", "ai", "c", "jo", "o", "y", "ix", "im", "iu", "z", "je", "ind", "I", "l", "f", "xi", "hi", "ij", "v", "b", "e", "id", "li", "ii", "n", "ip"], "h": ["hs", "k", "sh", "H", "p", "g", "c", "oh", "y", "o", "ht", "ph", "hr", "z", "x", "w", "hh", "l", "u", "d", "q", "f", "hi", "v", "b", "e", "t", "hm", "n"], "temp": ["wa", "str", "stable", "p", "pre", "c", "y", "tmp", "content", "iter", "emp", "empty", "z", "mini", "index", "cache", "clean", "partial", "w", "body", "current", "l", "u", "tem", "out", "shift", "f", "comb", "json", "Temp", "output", "input", "v", "b", "fake", "t", "e", "source", "test", "n"], "j": ["ji", "k", "a", "sh", "p", "g", "c", "jo", "y", "o", "jj", "r", "z", "je", "si", "index", "x", "ind", "w", "obj", "l", "u", "d", "q", "js", "f", "jp", "oj", "aj", "ij", "J", "key", "v", "b", "e", "id", "ii", "n"]}}
{"code": "N = int(input())\\nnums = list(map(int, input().split()))\\n\\ncnt = 0\\n\\nfor i in range(N):\\n    num = i + 1\\n    \\n    if (num % 2 == 1 and nums[i] % 2 == 1):\\n        cnt += 1\\n        \\n\\nprint(cnt)\\n", "target": "126", "substitutes": {"N": ["F", "MN", "Number", "L", "NO", "NN", "X", "Y", "NC", "Num", "NS", "NE", "NI", "K", "Na", "number", "NM", "CNN", "O", "Len", "T", "C", "P", "D", "B", "Ne", "S", "NY", "I", "No", "NT", "Ns", "M", "GN", "NB", "NA", "NUM", "n"], "nums": ["cumbers", "Nums", "rnums", "rnum", "coms", "Num", "cups", "Numbers", "Nups", "cum", "codes", " nups", "nups", " noms", "noms", "cums", " numbers", "numbers", "Nodes", "nodes", "rnumbers", "rnodes", "Noms"], "cnt": ["cNT", " cpt", "cpt", "acount", "Ccount", "CNT", "cnc", "Cpt", "fnt", " cNT", "cct", "ccount", " cnc", "fount", "acnt", "Cnt", "nct", "Cnc", "acNT", "nnt", "lcnn", "Cnn", "lccount", "acnn", " count", "lcnt", "fnc", "lcct", "fpt", "count", "cnn", "Cct", "nnn", "ncount", "Count", " cnn"], "i": ["gi", "k", "end", "int", "qi", "mi", "p", "ai", "c", "h", "ix", "pos", "ini", "iu", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "u", "d", "pi", "j", "f", "io", "m", "xi", "di", "ri", "hi", "ci", "zi", "id", "li", "ii", "n", "bi", "ip"], "num": ["gi", "min", "loc", "end", "mn", "init", "Num", "mon", "umi", "c", "nm", "number", "conf", "nom", "uc", "div", "nu", "fn", "index", "inc", "node", "con", "cm", "u", "cal", "max", "nn", "mom", "uni", "um", "no", "bin", "dim", "np", "count", "col", "id", "nb", "sum", "NUM", "n"]}}
{"code": "s = input()\\nprint(\"Yes\" if \"9\" in s else \"No\")", "target": "85", "substitutes": {"s": ["ss", "ins", "words", "ans", "p", "ps", "ms", "xs", "c", "sym", "sl", "sf", "fs", "si", "es", "S", "sb", "args", "lines", "services", "ses", "fts", "sec", "f", "ssl", "m", "cs", "ns", "abs", "gs", "b", "ts", "string", "e", "ls", "has", "ips", "opens", "ops", "submit", "sv", "n"]}}
{"code": "from math import *\\na,b,k=map(int,input().split())\\ng=gcd(a,b)\\nfor i in range(g,0,-1):\\n    if(g%i==0):\\n        k-=1\\n    if(k==0):\\n        print(i)\\n        break\\n", "target": "468", "substitutes": {"a": ["aa", "s", "wa", "va", "p", "ai", "aw", "c", "ama", "y", "r", "api", "la", "ab", "au", "da", "x", "A", "w", "action", "ia", "args", "l", "u", "d", "ca", "sa", " A", "m", "ac", "f", "am", "alpha", "an", "ad", "n"], "b": ["s", "be", "ib", "fb", "p", "bs", "c", "y", "r", "h", "B", "ab", "x", "sb", "cb", "l", "bh", "rb", "d", "bb", "bf", "abb", "f", "eb", "m", "db", "v", "e", "bc", "lb", "n"], "k": ["km", "s", "ke", "p", "c", "gh", "K", "y", "r", "o", "h", "kk", "ks", "z", "ch", "x", "mk", "kw", "w", "ko", "l", "ok", "u", "d", "unk", "q", "ki", "f", "sk", "j", "ky", "m", "ga", "v", "e", "n"], "g": ["gi", "gar", "group", "groups", "p", "ge", "go", "c", "gap", "gh", "h", "r", "gam", "gu", "gc", "ig", "gp", "reg", "gn", "w", "erg", "l", "u", "d", "gas", "sg", "q", "gg", "f", "j", "mg", "m", "ga", "rg", "gs", "eg", "gb", "e", "gen", "gm", "G", "pg", "n"], "i": ["gi", "int", "chi", "qi", "p", "phi", "ai", "c", "oi", "y", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", " j", "xi", "di", "hi", "ci", "v", "key", "e", "zi", "id", "li", "ii", "ik", "bi", "n"]}}
{"code": "#K\u306f 1 \u4ee5\u4e0a 100\u4ee5\u4e0b\u306e\u6574\u6570\\n#S\u306f\u82f1\u5c0f\u6587\u5b57\u304b\u3089\u306a\u308b\u6587\u5b57\u5217\\n#S\u306e\u9577\u3055\u306f1\u4ee5\u4e0a100\u4ee5\u4e0b\\n\\nk = int(input())\\ns =input()\\n\\nif len(s) <= k: #S\u306e\u9577\u3055\u304cK\u307e\u3067\\n    print(s)\\nelse:\\n    s = s[:k]\\n    s = s+\"... \"\\n    print(s)", "target": "797", "substitutes": {}}
{"code": "import sys\\n\\nn = int(input())\\n\\nif n == 0:\\n    print(0)\\n    sys.exit()\\n\\ncur = n\\nS = \"\"\\n\\nwhile cur != 0:\\n    if cur % 2 == 0:\\n        S = \"0\" + S\\n        cur /= -2\\n    else:\\n        S = \"1\" + S\\n        cur -= 1\\n        cur /= -2\\nprint(S)\\n", "target": "24", "substitutes": {"n": [" N", "s", "k", " p", "a", " s", "p", "g", "c", "i", " ni", "o", "r", "nc", "num", " c", "en", "y", "number", "rn", "ne", "z", "fn", "x", " ne", " fn", "sn", "start", "l", "cn", "d", "nt", "nn", "j", "f", "m", "none", "ns", "no", "nl", "b", "len", "np", "nr", "e", "N", " sn", "pn", "t", "all", "nb", " len"], "cur": ["yr", "rest", "sc", "const", "ctrl", "cor", "ur", "enter", "c", "circ", "nc", "sl", "result", "pr", " cursor", "prev", "head", "ver", "rib", "ph", "iter", "oc", "inf", "desc", "car", "uc", "rev", "div", "ch", "aug", "oct", "fer", "ah", "der", "ind", "start", "current", "con", "req", "tri", "sur", "row", "ser", "shift", " Cur", "UR", "rc", "Cur", "cat", "char", "sr", "dr", "yy", " circ", "ct", "bar", "cr", "aur", "count", "col", " prev", "se", "keep", "ctr", "next", "feed"], "S": ["F", "s", "E", "L", "IS", "DS", "V", "H", "SC", "Q", " s", "X", "SE", "Y", "AS", "Sample", "NS", "SR", "Si", "K", "TS", "PS", "Source", "SI", "O", "SA", "P", "T", "C", "B", "D", "SB", "SK", " SS", "A", "SL", "Sl", "SS", "US", "WS", "CS", "U", "R", "M", "GS", "String", "SP", "N", "SN", "G", "SU"]}}
{"code": "import math\\na,b=map(int,input().split())\\ngcd=math.gcd(a,b)\\n\\ndef prime_factorization(n):\\n  i=2\\n  prime=[]\\n  if n%i==0:\\n    n//=i\\n    prime.append(2)\\n    while n%i==0:\\n      n//=i\\n  i+=1\\n  while i*i<=n:\\n    if n%i:\\n      i+=2\\n    else:\\n      n//=i\\n      prime.append(i)\\n      while n%i==0:\\n        n//=i\\n  if n>1:\\n    prime.append(n)\\n  return prime\\n\\nprint(len(prime_factorization(gcd))+1)", "target": "590", "substitutes": {"a": ["aa", "wa", "sta", "va", "ma", "p", "na", "ity", "ai", "ama", "c", "fa", "h", "y", "asha", "la", "ba", "mA", "ab", "au", "da", "x", "pa", "A", "ia", "u", "pi", "aaa", "ca", "sa", "ac", "ga", "area", "am", "alpha", "ea", "ad"], "b": ["s", "be", "k", "ib", "fb", "p", "bs", "c", "y", "r", "wb", "bis", "mb", "B", "ab", "x", "sb", "l", "bb", "d", "bf", "rb", "abb", "f", "eb", "xb", "db", "v", "e", "nb", "lb", "bi"], "gcd": ["ggmd", "Gcr", "ggcr", "Gcod", "gmd", " gcr", "tgcd", "gcr", "Gmd", "rgcore", "rgcr", "tgcod", "tgcr", "sgCD", "sgcore", " gmd", "ggcd", "gcore", "Gcore", "tgCD", "Gcd", "sgcr", "GCD", "rgCD", " gCD", "rgcd", " gcod", "sgcd", "gCD", "ggCD", "gcod"], "n": ["s", "k", "non", "p", "g", "c", "y", "o", "yn", "nc", "num", "un", "ine", "net", "en", "ini", "rn", "ne", "nu", "z", "ng", "on", "mini", "index", "x", "fn", "nan", "gn", "sn", "w", "nat", "l", "nin", "u", "d", "cn", "nn", "pi", "nt", "j", "f", "ln", "network", "m", "none", "ns", "number", "no", "ni", "ci", "v", "np", "e", "N", "t", "pn", "dn", "ii", "nb", "an"], "i": ["gi", "ji", "k", "ui", "vi", "ie", "int", "ei", "chi", "qi", "mi", "p", "phi", "ai", "g", "c", "ic", "oi", "y", "o", "ini", "iu", "api", "ti", "z", "mini", "eni", "si", "index", "x", "yi", "ind", "start", "I", "l", "u", "pi", "d", "fi", "j", "f", "io", "m", "xi", "ori", "di", "ni", "ci", "ip", "hi", "v", "e", "t", "zi", "id", "multi", "li", "ii", "part", "bi"], "prime": ["phi", "tie", "slice", "floor", " Prime", "edge", "piece", "j", "f", "proxy", "ape", "sequence", "four", "private", "length", "primary", "appa", "knife", "zip", "np", "se", "chy", "ie", "hot", "power", "init", "ate", "Prime", "tmp", "temp", "ne", "flat", "pi", "position", "key", "ice", "plane", "pose", "trial", "p", "ge", "ine", "result", "\u662f", "size", "square", "index", "sup", "archive", "pie", "ffe", "rice", "t", "py", "pure", "ve", "static", "me", "plot", "seed", "ite", "phase", "copy", "pe", "pse", "parse", "test"]}}
{"code": "n = int(input())\\n\\na = list(map(int, input().split()))\\na.append(0)\\na.insert(0,0)\\na_abs = []\\nfor i in range(n+1):\\n    a_abs.append(abs(a[i]-a[i+1]))\\n\\na_abs_max = sum(a_abs)\\nfor i in range(1,n+1):\\n    ans = a_abs_max - abs(a[i]-a[i+1]) - abs(a[i]-a[i-1]) + abs(a[i+1]-a[i-1])\\n    print(ans)", "target": "527", "substitutes": {"n": ["s", "name", "k", "span", "p", "c", "o", "y", "nc", "num", "net", "ne", "z", "x", "nan", "sn", "w", "conn", "l", "d", "nt", "nn", "max", "f", "j", "network", "m", "ns", "no", "nl", "ni", "b", "len", "np", "v", "t", "N", "count", "nb", "an"], "a": ["aa", "s", "wa", "auto", "at", "va", "another", "ma", "p", "na", "qa", "ai", "aw", "c", "ama", "ing", "fa", "y", "o", "work", "app", "la", "ba", "ab", "au", "array", "ana", "z", "da", "x", "index", "ar", "A", "ia", "args", "u", "aaa", "ca", "f", "sa", "ac", "m", "ga", "sup", "area", "aux", "aj", "am", "input", "ae", "about", "alpha", "audio", "data", "b", "ea", "e", "all", "za", "an", "ad"], "a_abs": ["a68bs", " a2bs", "ae_absolute", " a2bb", " a2ab", "a67bs", "a68parts", "a_ab", " a_parts", "a2abs", "a67bb", "ae_ab", "a67abs", " a_ab", "ae_bs", " a_bs", "a2bs", "a68ab", "a_bb", "a_parts", "a2ab", "a68abs", "a_bs", " a2abs", "a2bb", "a67ab", "a_absolute", "ae_abs", " a_bb"], "i": ["gi", "ih", "s", "ji", "ui", "ie", "ei", "ami", "int", "qi", "mi", "p", "phi", "ai", "c", "oi", "o", "y", "ini", "ix", "iu", "mini", "si", "eni", "index", "x", "yi", "ind", "start", "I", "uri", "it", "l", "u", "pi", "d", "ki", "io", "j", "f", "cli", "m", "xi", "di", "ri", "ni", "ci", "ip", "isi", "b", "v", "e", "info", "multi", "id", "li", "ii", "source", "anti", "bi", "ti"], "a_abs_max": ["a_abs_min", "a_abs_MAX", "a_ab_min", "a_abs2min", "a_abs2MAX", "a_ab_MAX", "a_abs2max", "a_ab_max"], "ans": ["lan", "ras", "nas", "cas", "atan", "na", "gan", "ions", "anas", "AN", "ANS", "anes", "ane", "ann", "anon", "ani", "anc", "annot", "ana", "es", "can", "nan", "ars", "anned", "ros", "anus", "aned", "ons", "aus", "anan", "anne", "leans", "sk", "ants", "ns", "aux", "san", "cons", "an"]}}
{"code": "while(1):\\n    h,w = [int(i) for i in input().split()]\\n    if h == 0 and w == 0:\\n        break\\n    print(\"#\"*w)\\n    for i in range(h-2):\\n        print(\"#\"+\".\"*(w-2)+\"#\")\\n    print(\"#\"*w)\\n    print(\"\")\\n    \\n", "target": "58", "substitutes": {"h": ["rh", "hs", "ih", "k", "wa", "end", "sh", "dh", "H", "p", "c", "oh", "gh", "y", "o", "r", "num", "ht", "head", "ph", "z", "x", "ah", "l", "bh", "u", "d", "th", "max", "f", "m", "hi", "hl", "b", "v", "t", "e", "uh", "ha", "hm", "col", "n"], "w": ["rh", "hw", "s", "k", "wa", "end", "sh", "wt", "wp", "win", "p", "g", "c", "aw", "width", "y", "r", "fw", "work", "how", "we", "wb", "wh", "wave", "z", "wal", "x", "ew", "W", "kw", "l", "wx", "u", "d", "max", "f", "m", "nw", "sw", "ww", "ws", "wl", "wd", " W", "v", "b", "ow", "t", "e", "word", "n"], "i": ["gi", "ji", "ui", "ie", "int", "chi", "qi", "p", "phi", "oi", "o", "y", "ini", "ix", "pos", "iu", "z", "si", "index", "yi", "x", "ind", "uli", "I", "l", "idi", "u", "pi", "d", "j", "io", "xi", "ori", "ri", "di", "hi", "ip", "ci", "b", "v", "e", "zi", "id", "li", "ii", "n", "bi", "ti"]}}
{"code": "N,K = map(int, input().split())\\nA = list(map(int, input().split()))\\nprint((N+K-3)//(K-1))", "target": "718", "substitutes": {"N": ["F", "Nat", "E", "NR", "L", "NO", "V", "NN", "Max", "H", "Q", "X", "Y", "NS", "O", "P", "T", "C", "B", "D", "S", "I", "NT", "Node", "Z", "Ns", "U", "R", "M", "J", " n", "G", "NA", "n"], "K": ["F", "Power", "k", "KK", "E", "Length", "Point", "L", "AK", "V", "H", "Ak", "Q", "X", "Y", "KE", "Sk", "O", "P", "T", "C", "D", "SK", "NK", "KS", "S", "W", "Z", "KR", "PK", "U", "Mask", "J", "M", "DK", "G", "KN", "Work"], "A": ["F", "a", "V", "All", "H", "X", "Y", "Na", "AN", "O", "P", "B", "C", "D", "Ar", "AA", "Alpha", "S", "W", "I", "Z", "Array", "R", "alpha", "J", "M", "G", "NA"]}}
{"code": "import sys\\nfrom collections import deque\\n\\nqueue = deque()\\n\\nfor _ in range(int(sys.stdin.readline())):\\n    commands = sys.stdin.readline()[:-1].split(\" \")\\n    if commands[0] == \"insert\":\\n        queue.appendleft(commands[1])\\n    elif commands[0] == \"delete\":\\n        try:\\n            queue.remove(commands[1])\\n        except ValueError:\\n            pass\\n    elif commands[0] == \"deleteFirst\":\\n        queue.popleft()\\n    elif commands[0] == \"deleteLast\":\\n        queue.pop()\\n\\nprint(\" \".join(queue))", "target": "232", "substitutes": {"queue": ["pool", "group", "line", "collection", "Queue", "channel", "event", "p", "enum", "command", "process", "delay", "loop", "result", "main", "future", "log", "delete", "force", "server", "que", "array", "cache", "quote", "history", "module", "file", "stage", "stack", "buffer", "q", "job", "page", "wait", "status", "cli", "menu", "port", "ue", "console", "sequence", "output", "database", "entry", "list", "data", "complete", "batch", "type", "string", "view", "message", "seq", "progress", "config", "manager"], "_": ["__", "non", "p", "g", "i", "r", "of", " time", " __", "time", "f", " j", "len", "col", "n"], "commands": ["collanded", "Commodes", "contands", "commandand", "Commads", "cmdcmd", "compand", "contacks", "command", "commodes", "calland", "compander", "commops", "operits", "compands", "Commops", "commandues", "cmdanded", "commases", "commues", "cmdants", "Command", "companded", "aggases", "commandands", "Commants", "comments", "commcmd", "Commands", "contops", "cmdands", "Commues", "commandends", "operands", "queodes", "commandanded", "cmdand", "commandases", "commends", "cmdits", "callands", "commants", "rements", "callues", "queand", "aggands", "operents", "cmdents", "queands", "colland", "queander", "compodes", "commacks", "contants", "cmdodes", "Commases", "commits", "cmdues", "aggand", "commads", "opercmd", "remcmd", "cmdops", "Comments", "remands", "commandodes", "commandents", "aggends", "commander", "Commacks", "commandander", "Commanded", "Commends", "collads", "cmdacks", "callanded", "collands", "remits", "commanded", "compads"]}}
{"code": "H, W = [int(x) for x in input().split()]\\nfor i in range(H):\\n    str_list = input()\\n    print(str_list)\\n    print(str_list)", "target": "261", "substitutes": {"H": ["F", "Length", "E", "OH", "L", "V", "Q", "X", "Y", "K", "h", "SH", "HC", "O", "P", "T", "C", "B", "D", "CH", "NH", "S", "He", "A", "EH", "I", "Z", "HH", "MH", "HI", "U", "R", "M", "N", "G", "HA", "RH"], "W": ["L", "V", "Q", " w", "Y", "WE", "MW", "WR", "K", "SW", "GW", "P", "B", "C", "WC", "w", "Word", "TW", "WI", "U", "M", "N", "VW", "G", "CW", "Wh", "FW"], "x": ["k", "int", "X", "p", "xf", " z", " w", "xs", "c", "xx", "y", "h", "rx", "ix", "z", "ex", "index", "xxx", "xxxx", "w", "wx", "u", "d", "f", " ax", "ww", "xi", "xb", "xe", " X", "v", "xp", "e", "t", "xy", "xc", "xa", "xxxxxxxx"], "i": ["gi", "k", "p", "c", " I", "y", "r", "work", "ix", "index", "ind", "I", "u", "d", "he", "io", "j", "f", "ir", "xi", "ip", "v", "e", "iw", "col", "id", "ti"], "str_list": [" str_pair", "strapptable", "strfList", "str_block", "strappList", " str2List", " str_set", "frapptable", "strflist", "strfval", "str2table", "str2block", "str_pair", "str2list", "str_batch", "str_val", "fr_table", " str2block", "strappval", " str_block", "strftable", " str_batch", "strappblock", "str2List", "str_List", " str2pair", "fr_List", "str2val", "str2pair", "fr_list", "frapplist", "strapppair", "frappval", " str2list", "strapplist", " str_List", "str_set", "fr_val", "str_table", "frappList"]}}
{"code": "o = input()\\ne = input()\\n\\nfor i in range(len(e)):\\n    print(o[i], end = '')\\n    print(e[i], end = '')\\n\\nif len(o) != len(e):\\n    print(o[len(o)-1])", "target": "102", "substitutes": {"o": ["s", "k", "op", "ol", "a", "auto", "oo", "to", "p", "go", "c", "element", "oi", "y", "bo", "office", "O", "lo", "z", "oe", "po", "ou", "x", "so", "l", "u", "d", "do", "out", "mo", "f", "io", "j", "m", "one", "iso", "none", "no", "os", "oa", "b", "v", "t", "off", "n"], "e": ["E", "end", "a", "ei", "ie", "ze", "ed", "ele", "p", "c", "element", "y", "ec", "en", "el", "fe", "esi", "ne", "oe", "edge", "es", "ce", "x", "w", "l", "ee", "d", "u", "one", "f", "eu", "j", "m", "ue", "ae", "b", "v", "ea", "pe", "se", "pse", "n"], "i": ["gi", "k", "ui", "end", "a", "ie", "int", "qi", "mi", "p", "ai", "c", "y", "h", "ix", "ini", "pos", "iu", "ti", "z", "eni", "si", "index", "x", "yi", "ind", "start", "I", "l", "fi", "u", "d", "pi", "f", "j", "io", "xi", "di", "ri", "ni", "ci", "key", "b", "v", "id", "li", "ii", "n", "bi", "lo"]}}
{"code": "a,b,c,d=map(int,input().split())\\ny=max((a*c),(a*d),(b*c),(b*d))\\nprint(y)", "target": "774", "substitutes": {"a": ["s", "aa", "int", "ma", "p", "ai", "ama", "i", "aw", "r", "app", "mA", "ab", "au", "art", "da", "x", "A", "ar", "af", "w", "ia", "l", "f", "sa", "asa", "m", "ac", "ga", "area", "aj", "am", "ae", "alpha", "audio", "ea", "e", "an", "n"], "b": ["s", "k", "fb", "p", "bs", "g", "pb", "i", "r", "h", "o", "B", "ba", "ab", "x", "sb", "cb", "l", "bb", "bf", "u", "f", "eb", "j", "m", "db", "v", "base", "e", "big", "lb", "ad", "n"], "c": ["s", "k", "cur", "cycle", "com", "p", "g", "i", "cp", "C", "uc", "z", "fc", "ce", "x", "cy", "cu", "w", "con", "cm", "l", "u", "f", "ca", "cs", "ac", "m", "dc", "cd", "ci", "cf", "e", "cr", "col", "pc", "cl", "ad", "n"], "d": ["dx", "s", "k", "dd", "dy", "dir", "p", "nd", "g", "i", "dat", "r", "o", "rd", "D", "z", "da", "x", "w", "l", "u", "f", "j", "m", "du", "dc", "cd", "day", "db", "v", "ld", "e", "t", "ds", "id", "dn", "ad", "n"], "y": ["maybe", "ys", "dy", "python", "ye", "p", "Y", "g", "i", "ym", "year", "z", "zy", "x", "cy", "now", "yt", "l", "max", "sy", "f", "j", "m", "yan", "yy", "ya", "oy", "type", "e", "t", "count", "py", "col", "vy", "ey", "sky", "n"]}}
{"code": "five = input()\\nlst_five = five.split(\" \")\\n\\nfor i in range(len(lst_five)):\\n    if lst_five[i] == \"0\":\\n        print(i+1)\\n", "target": "727", "substitutes": {"five": ["balls", "east", "letter", "zero", "fifth", "league", "ten", "little", "seed", "two", "quarters", " Five", "fif", "fed", "eight", "one", "three", "six", "none", "style", "seven", "four", "fleet", "length", "knife", "nine", "letters", "Five", "odd"], "lst_five": ["lstften", "lst__fifth", "lstr_ten", "lbl_five", "lstffifth", "lct_fifth", "lst_ten", "lst_5", "lstr_fifth", "lstsfive", "lct_05", "lst__ten", "lstr_five", "lbl_Five", "lst__five", "lst_Five", "lbl_three", "lst_05", "lstffive", "lct_five", "lst_fifth", "lbl_5", "lst_three", "lstsfifth", "lsts05"], "i": ["gi", "ih", "k", "vi", "ui", "int", "qi", "mi", "p", "ai", "inter", "c", "h", "y", "ix", "ini", "pos", "iu", "slice", "ti", "z", "mini", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "q", "j", "f", "none", "xi", "ri", "di", "ip", "ci", "my", "e", "zi", "id", "udi", "li", "ii", "bi", "n"]}}
{"code": "s=input()\\n\\n\\nif int(s[5:7])>4:\\n    print('TBD')\\nelse:\\n    print('Heisei')", "target": "545", "substitutes": {"s": ["strings", "a", "words", "states", "p", "xs", "c", "g", "i", "h", "r", "results", "fs", "es", "S", "tests", "args", "parts", "services", "ses", "lines", "u", "d", "sg", "l", "f", "ssl", "m", "ns", "ws", "su", "abs", "ts", "gs", "b", "v", "string", "t", "ls", "e", "session", "letters", "ds", "submit", "source", "comments", "fts"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\ntry:\\n    from typing import List\\nexcept ImportError:\\n    pass\\n\\n\\ndef solve(A: int, B: int, C: int, K: int):\\n    print(A + B + C + max(A, B, C) * (2 ** K - 1))\\n\\n\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    A = int(next(tokens))  # type: int\\n    B = int(next(tokens))  # type: int\\n    C = int(next(tokens))  # type: int\\n    K = int(next(tokens))  # type: int\\n    solve(A, B, C, K)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "674", "substitutes": {}}
{"code": "s=input()\\n\\nflag=True\\nfor i in range(len(s)-1):\\n    if s[i+1]==s[i]:\\n        flag=False\\nprint(\"Good\" if flag else \"Bad\") \\n", "target": "228", "substitutes": {"s": ["ss", "strings", "a", "south", "ys", "qs", "ins", "words", "service", "states", "p", "ps", "g", "c", "sym", "sets", "y", "o", "ows", "si", "es", "events", "S", "sb", "start", "tests", "args", "lines", "services", "l", "d", "ses", "u", "sg", "parts", "f", "status", "ssl", "cs", "sync", "flags", "ns", "input", "data", "gs", "b", "string", "v", "e", "ls", "t", "opens", "ips", "ds", "sv", "comments", "n"], "flag": ["field", "group", "line", "int", "ag", "arg", "init", "use", "log", "leaf", "weight", "sign", "say", "force", "long", "store", "valid", "af", "ind", "bug", "wait", "f", "lag", "sort", "cat", "style", "flags", "char", "FLAG", "age", "mask", "binary", "match", "type", "key", "sum", "debug", "count", "big", "fill", "bit", "id", "ret", "filter", "part", "Flag", "offset"], "i": ["gi", "ji", "k", "a", "int", "p", "phi", "ai", "c", "y", "ix", "ini", "iu", "z", "si", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "j", "f", "m", "xi", "di", "ci", "v", "b", "key", "e", "id", "li", "ii", "val", "n"]}}
{"code": "x, y = map(int, input().split())\\n\\nif x % y == 0:\\n    print(-1)\\nelse:\\n    cnt = 1\\n    while True:\\n        res = x * cnt\\n        if res % y != 0:\\n            print(res)\\n            break\\n", "target": "396", "substitutes": {"x": ["dx", "a", "int", "X", "p", "tx", "xs", "c", "i", "xx", "yx", "rx", "r", "px", "h", "pos", "ix", "size", "z", "xt", "ex", "index", "w", "l", "ctx", "u", "d", "max", "row", "f", "ax", "m", "xi", "v", "b", "xp", "pair", "xy", "col", "val", "xc", "active", "n"], "y": ["yd", "ady", "ys", "dy", "ye", "gy", "p", "Y", "c", "yx", "i", "o", "ym", "ay", "z", "zy", "uy", "yi", "cy", "ny", "yt", "d", " dy", "f", "sy", "ky", "j", "m", "yy", "ya", "oy", "iy", "type", "t", "xy", "py", "col", "vy", "isy", "ry", "ey", "sky", "n"], "cnt": ["cNT", " cpt", "cpt", "C0", "conount", "CNT", "cnc", "ucNT", "Cpt", " cNT", " cnc", "connt", "Cnt", "c0", "Cnc", "con0", " count", " c0", "ucpt", "ucnt", "count", "conNT", "Count", "ucnc"], "res": ["min", "rr", "error", "mr", "arr", "rows", "err", "our", "rx", "r", "result", "results", "pos", "rep", "re", "gr", "reg", "rez", "grid", "rev", "rand", "response", "Res", "con", "req", "max", "q", "resolution", "row", "sol", "RES", "right", "rc", "rect", "range", "resh", "resp", "rem", "nr", "key", "cr", "red", "reset", "col", "id", "ret", "val", "rs", "ry", "mid"]}}
{"code": "s = input()\\ns1 = s[0]\\ns2 = s[-1]\\nans = s1 + str(len(s)-2) + s2\\nprint(ans)\\n", "target": "565", "substitutes": {"s": ["strings", "a", "south", "groups", "ins", "states", "p", "g", "c", "xs", "i", "sets", "y", "o", "speech", "es", "params", "S", "sb", "tests", "args", "lines", "parts", "ses", "l", "services", "d", "sg", "ids", "f", "sa", "cs", "m", "ns", "single", "input", "os", "gs", "b", "v", "string", "space", "e", "ls", "t", "letters", "sv", "source", "an", "n"], "s1": ["ss3", "h0", "h1", "p0", "ses1", "ss1", "p1", "p2", " s3", "s0", "ses2", "ses3", "h2", "s3", " s0", "ss2"], "s2": ["s62", " stwo", "ses5", "sg2", "ses62", "ses1", "ss1", "dtwo", "sa1", " ssecond", "sgsecond", "ss62", "s5", "sa2", "ses2", "dsecond", "sa5", "d2", "sa62", "stwo", "sgtwo", "ss5", "ssecond", "ss2"], "ans": ["ain", "ents", "ras", "sex", "nas", "atan", "na", "xs", "ats", "aning", "AN", "ANS", "ks", "ane", "annels", "ann", "anc", "es", "can", "An", "ars", "sn", "anus", "aned", "chan", "aus", "ens", "leans", "cs", "sk", "ants", "man", "scan", "os", "san", "an", "ds", "sam", " Ans", "ins"]}}
{"code": "import sys\\nn=int(input())\\n\\nl=0\\nprint(l)\\nsys.stdout.flush()\\nsl=input()\\nif sl==\"Vacant\":\\n    exit()\\nr=n-1\\nprint(r)\\nsys.stdout.flush()\\nsr=input()\\nif sr==\"Vacant\":\\n    exit()\\n\\n\\n\\nfor _ in range(18):\\n    m=(l+r)//2\\n    print(m)\\n    sys.stdout.flush()\\n    s=input()\\n    if s==\"Vacant\":\\n        exit()\\n    if (m-1-l)%2 and s!=sl:\\n        sr=s\\n        r=m\\n    if (m-1-l)%2==0 and s==sl:\\n        sr=s\\n        r=m\\n    if (r-m-1)%2 and s!=sr:\\n        sl=s\\n        l=m\\n    if (r-m-1)%2==0 and s==sr:\\n        sl=s\\n        l=m\\n", "target": "344", "substitutes": {"n": [" N", "k", "ol", "p", "na", "g", "nm", "c", "i", "o", "nc", "en", "y", "num", "el", "rn", "ne", "z", "x", "nn", "nt", "ln", "j", "ns", "no", "nl", "nr", "b", "v", "e", "N", "t", "nb", "nor"], "l": ["lp", "k", "loc", "ol", "L", "line", "ur", "p", "al", "g", "c", "ly", "i", "ql", "y", "h", "o", "lr", "el", "left", "lo", "lc", "kl", "z", "x", "w", "u", "d", "ll", "ln", "f", "dl", "j", "rl", "nl", "length", "fl", "lu", "v", "b", "ell", "lb", "e", "ls", "t", "il", "yl", "li", "ul", "lin"], "sl": ["ss", "isl", "yr", "sq", "sh", "ur", "p", "tl", "pr", "sf", "lr", "el", "sal", "lv", "sp", "lc", "z", "kl", "bl", "sn", "SL", "sb", "Sl", "pl", "sur", "ll", "ser", "ln", "dl", "ssl", "f", "sw", "rl", "sm", "rs", "sa", "sel", "single", "su", "nl", "wl", "fl", "hl", "ell", "cr", "ls", "e", "il", "fr", "sle", "gl", "li", "cl", "sv", "sil"], "r": ["rh", "yr", "rr", "k", "mr", "ur", "rm", "p", "rar", "err", "c", "i", "rw", "y", "o", "rd", "pr", "rf", "h", "lr", "hr", "ro", "z", "x", "ar", "w", "u", "d", "rb", "row", "ra", "j", "f", "rc", "ir", "dr", "rl", "rt", "rg", "R", "nr", "v", "b", "cr", "e", "fr", "ru", "er", "rs"], "sr": ["yr", "ss", "rr", "rh", "cur", "mr", "rm", "spr", "SR", "err", "rw", "radius", "pr", "rf", "sf", "tr", "usr", "lr", "gr", "rn", "hr", "sp", "ar", "sn", "sb", "vr", "rb", "sur", "ser", "sa", "ir", "ssl", "dr", "rl", "sm", "sw", "rc", "rg", "su", "adr", "nr", "cr", "fr", "kr", " yr", "sv", "rs", "nor"], "_": [" p", "p", "g", " time", "el", " __", "x", "f", " j", " d"], "m": ["em", "min", "k", "mad", "mn", "mos", "arm", "me", "ma", "tm", "rm", "mi", "p", "ms", "g", "c", "nm", "i", "mult", "mon", "y", "o", "h", "im", "en", "un", "pm", "ym", "ml", "mas", "z", "dem", "x", "sim", "dm", "mu", "w", "cm", "u", "d", "q", "mand", "mo", "f", "j", "sm", "bm", "man", "am", "M", "v", "b", "mod", "e", "t", "sem", "mm", "gm", "mc", "range", "an", "mid", "um"], "s": ["ss", "sh", "rows", "alls", "sets", "y", "ims", "ves", "say", "ows", "si", " ss", "sb", "sur", "q", "js", "f", "sy", "ments", "gs", "b", "ings", "se", "ops", "ies", "ins", "ans", "states", "ats", "i", "h", "ers", "sports", "sf", "ads", "u", "sg", "sa", "cs", "sw", "os", "v", "e", "res", "sq", "ys", "p", "ps", "sp", "resses", "es", "ch", "S", "sn", "lines", "ses", "less", "d", "sm", "ns", "ts", "t", "ls", "a", "south", "eps", "g", "c", "sym", "o", "ores", "sd", "sie", "times", "vs", "ays", "als", "sim", "w", "ges", "ssl", "ws", "su", "ds", "its", "sv", "rs", "sum"]}}
{"code": "def solve():\\n    n = int(input())\\n    p = []\\n    for _ in range(n):\\n         p.append(int(input()))\\n    print(sum(p) - max(p)//2)\\n\\n\\nif __name__ == '__main__':\\n    solve()\\n", "target": "259", "substitutes": {"n": ["min", "k", "g", "c", "i", "o", "y", "nc", "num", "number", "pos", "ne", "z", "index", "x", "l", "u", "d", "f", "j", "network", "m", "ns", "no", "v", "b", "t", "N", "count", "e", "nb"], "p": ["lp", "s", "a", "pre", "ps", "bp", "g", "c", "i", "y", "r", "tp", "o", "h", "pos", "cp", "ap", "P", "sp", "array", "pa", "x", "params", "w", "l", "patch", "u", "pi", "d", "j", "jp", "f", "m", "point", "pp", "data", "ip", "v", "b", "np", "t", "e", "pc"], "_": ["__", "g", " row", " ip", " time", " __", "x", "out", "f", " loop", " rec", " mem", " col"]}}
{"code": "import math\\nfrom math import gcd,pi\\nINF = float(\"inf\")\\n\\nimport sys\\nsys.setrecursionlimit(10**6)\\nimport itertools\\nfrom collections import Counter,deque\\ndef i_input(): return int(input())\\ndef i_map(): return map(int, input().split())\\ndef i_list(): return list(i_map())\\ndef i_row(N): return [i_input() for _ in range(N)]\\ndef i_row_list(N): return [i_list() for _ in range(N)]\\ndef s_input(): return input()\\ndef s_map(): return input().split()\\ndef s_list(): return list(s_map())\\ndef s_row(N): return [s_input for _ in range(N)]\\ndef s_row_str(N): return [s_list() for _ in range(N)]\\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\\n\\n\\ndef main():\\n    n = i_input()\\n    l = [1]\\n    ans = []\\n    for i in range(2,10**4):\\n        l.append(l[i-2]+i)\\n    while True:\\n        if n == 0:\\n            break\\n        for i,k in enumerate(l):\\n            if n <= k:\\n                if i == 0:\\n                    a = k\\n                else:\\n                    a = k - l[i-1]\\n                ans.append(a)\\n                n -= a\\n                break\\n    for i in ans:\\n        print(i)\\n\\nif __name__==\"__main__\":\\n    main()\\n", "target": "389", "substitutes": {"INF": ["UNFF", "INFF", "UNF", "ANFT", "ANf", "InFF", "UNFT", "ANF", "InF", "UNf", "InFT", "INf", "ANFF", "INFT", "Inf"], "N": ["F", "MN", "E", "Number", "L", "NO", "V", "NN", "H", "X", "Y", "NC", "Size", "Num", "NS", "NI", "K", "Na", "NM", "AN", "CNN", "O", "P", "T", "C", "B", "D", "Ne", "S", "A", "W", "I", "No", "NG", "Node", "Ni", "Z", "Ns", "U", "R", "M", "GN", "CN", "Name", "NA"], "_": ["Page", "__", "code", "non", "p", "g", "ing", "___", "o", "ay", "O", "x", "A", "d", "f", "ac", "U", "Se", "all", "G", "word", "Def"], "n": ["p", "ai", "g", "c", "y", "o", "nc", "num", "net", "number", "en", "yn", "r", "ne", "nu", "z", "on", "fn", "x", "nan", "ar", "sn", "w", "u", "d", "nt", "nn", "j", "f", "ln", "m", "ns", "no", "ni", "nr", "v", "b", "e", "t", "pn", "li", "nb", "an"], "l": ["lp", "s", "ol", "L", "p", "g", "c", "o", "sl", "r", "lis", "el", "left", "la", "lc", "kl", "z", "u", "d", "ll", "q", "f", "ln", "dl", "j", "m", "land", "list", "nl", "fl", "lu", "b", "v", "len", "e", "ls", "le", "li", "ul", "lin"], "ans": ["ano", "atin", "ao", "lan", "atan", "na", "ai", "ats", "ions", "aning", "anas", "AN", "aos", "ANS", "ks", "ane", "aces", "ann", "ase", "ani", "ana", "ands", "can", " means", "A", "An", "lang", "nan", "anned", "aned", "lines", "ons", "aus", "ens", "ln", "leans", "sk", "ants", "ns", "man", "os", "san", "ls", "plan", "an", "ins"], "i": ["gi", "ji", "ui", "ie", "int", "ei", "chi", "qi", "mi", "p", "ai", "ic", "c", "phi", " I", "oi", "o", "y", "ini", "num", "iq", "iu", "ti", "z", "si", "mini", "index", "x", "yi", "ind", "I", "it", "u", "pi", "d", "ki", "j", "f", "io", "m", "xi", "di", "ni", "ip", "ci", "b", "v", "key", "e", "zi", "id", "li", "ii", "ik", "bi"], "k": ["s", "p", "g", "c", "K", "o", "y", "h", "num", "kk", "ks", "z", "ch", "x", "kw", "w", "ko", "ok", "u", "d", "unk", "max", "q", "j", "sk", "f", "m", "ku", "self", "alpha", "v", "b", "key", "ck", "e", "ik", "an"], "a": ["aa", "sta", "va", "at", "ao", "ma", "p", "na", "ai", "aw", "c", "fa", "y", "o", "la", "ab", "z", "au", "ana", "x", "A", "af", "ia", "u", "ca", "sa", "ac", "ga", "area", "am", "ae", "alpha", "b", "ea", "e", "all", "ad", "an", "active"]}}
{"code": "N = int(input())\\nA = list(map(int,input().split()))\\nA.sort()\\n\\ncheck = True\\nfor i in range(N-1):\\n  if A[i] == A[i+1]:\\n    check = False\\n    \\nprint(\"YES\" if check else \"NO\")", "target": "135", "substitutes": {"N": ["F", "Length", "E", "Number", "L", "V", "NN", "Max", "H", "X", "Y", "Size", "NS", "NE", "K", "Na", "O", "P", "B", "C", "T", "D", "Ne", "S", "I", "No", "NT", "Node", "Ni", "Z", "Ns", "M", "J", "NB", " n", "NA", "n"], "A": ["F", "E", "a", "L", "At", "New", "V", "All", "H", "AS", "X", "Q", "Y", "AP", "LA", "K", "AST", "AM", "O", "P", "B", "C", "T", "As", "D", "Ar", "AC", "API", "AA", "And", "Alpha", "S", "W", "I", "Average", "Array", "CA", "U", "AF", "Input", "AY", "M", "J", "G", "NA", "An"], "check": ["name", "call", "end", " Check", "fix", "Check", "stat", "c", "load", "work", "num", "run", "search", "index", "clean", "valid", "clear", "only", "action", "start", "ind", "ask", "it", "ok", "control", "wait", "walk", "ignore", "sync", "close", "pull", "stop", "set", "fail", "match", "find", "type", "key", "ck", "add", "id", "fill", "CHECK", "block", "test", "update", "info"], "i": ["gi", "k", "ui", "a", "ie", "int", "qi", "mi", "p", "phi", "ai", "c", "h", "y", "gu", "ix", "pos", "iu", "ti", "z", "si", "eni", "index", "x", "ind", "start", "I", "uri", "l", "u", "d", "pi", "q", "j", "io", "xi", "ri", "di", "ip", "ci", "b", "key", "my", "v", "e", "il", "id", "li", "ii", "bi", "n"]}}
{"code": "n=int(input())\\nl=[list(map(int,input().split())) for _ in range(n)]\\nl.sort(key=lambda x:x[0]+x[1],reverse=True)\\n\\nprint(sum([l[i][0] for i in range(n) if i % 2 == 0]) - sum([l[i][1] for i in range(n) if i % 2 == 1]))", "target": "794", "substitutes": {"n": ["s", "name", "k", "p", "g", "c", "o", "number", "nc", "y", "num", "r", "en", "size", "ne", "nu", "z", "x", "nan", "sn", "w", "u", "d", "nn", "nt", "f", "ln", "j", "m", "ns", "len", "b", "limit", "v", "t", "N", "e", "nb"], "l": ["s", "k", "loc", "ol", "a", "L", "p", "g", "c", "o", "r", "y", "lis", "el", "left", "lc", "kl", "z", "x", "w", "u", "d", "ll", "f", "dl", "ln", "j", "m", "list", "nl", "lu", "b", "v", "e", "ls", "t", "il", "li", "ul"], "_": ["k", " p", "p", " id", "ix", " ip", " k", "x", "ind", "I", "f", "j", " j", "id", "ip"], "i": ["gi", "s", "k", "ui", "a", "ei", "int", "chi", "qi", "p", "init", "ai", "c", "y", "o", "ini", "ix", "iu", "z", "si", "index", "x", "ind", "I", "uri", "u", "pi", "d", "it", "q", "out", "j", "io", "f", "m", "xi", "di", "ci", "ip", "\u0438", "v", "b", "e", "t", "info", "id", "inner", "ii", "li", "ti"]}}
{"code": "import sys\\nfrom bisect import *\\nfrom heapq import *\\nfrom collections import *\\nfrom itertools import *\\nfrom functools import *\\nfrom math import *\\nfrom fractions import *\\n\\nsys.setrecursionlimit(100000000)\\ninput = lambda: sys.stdin.readline().rstrip()\\n\\ndef main():\\n    A, B, Q = map(int, input().split())\\n    s, t = [], []\\n    for _ in range(A):\\n        s.append(int(input()))\\n    for _ in range(B):\\n        t.append(int(input()))\\n    for _ in range(Q):\\n        x = int(input())\\n        i = bisect_left(s, x)\\n        j = bisect_left(t, x)\\n        # visit s[i - 1] or s[i]\\n        # visit t[j - 1] or t[j]\\n        s_candidates = [s[k] for k in [i - 1, i] if 0 <= k < A]\\n        t_candidates = [t[k] for k in [j - 1, j] if 0 <= k < B]\\n        ans = float('inf')\\n        for s_candidate in s_candidates:\\n            for t_candidate in t_candidates:\\n                right = max(x, s_candidate, t_candidate) - x\\n                left = x - min(x, s_candidate, t_candidate)\\n                ans = min(ans, min(right, left) * 2 + max(right, left))\\n        print(ans)\\n\\n\\n\\n\\n\\n\\nmain()\\n", "target": "487", "substitutes": {"input": ["until", "group", "int", "method", "argument", "comment", "empty", "version", "current", "q", "out", "shift", "model", "pull", "list", "data", "Input", "type", "session", "keep", "ahead", "inner", "feed", "error", "call", "init", "unknown", "temp", "array", "child", "focus", " Input", "string", "print", "double", "source", "raw", "digit", "python", "reader", "request", "enter", "qa", "element", "target", "insert", "number", "instance", "lower", "iter", "index", "image", "upper", "point", "alpha", "config", "text", "enum", "visible", "context", "inf", "connect", "hidden", "expression", "search", "integer", "exec", "null", "output", "single", "select", "parse"], "A": ["F", "Ca", "DA", "a", "L", "First", "H", "AI", "X", "Y", "IA", "LA", "AR", "K", "Na", "AN", "BA", "AM", "O", "SA", "P", "C", "mA", "D", "As", "Ar", "AAA", "API", "AC", "AA", "Sa", "S", "I", "Ma", "CA", "U", "Input", "M", "N", "G", "HA", "NA", "An"], "B": ["F", "E", "L", "LB", "X", "Y", "UB", "AR", "CB", "Bi", "DB", "BA", "AB", "P", "C", "T", "D", "BB", "BC", "BI", "TB", "W", "I", "Ab", "BE", "Z", "OB", "WB", "U", "R", "M", "b", "NB", "QB", "BF", "Bs"], "Q": ["QU", "F", "E", "L", "V", "H", "X", "Y", "Query", "K", "FF", "P", "T", "C", "D", "IQ", "MQ", "S", "W", "IX", "I", "q", "Z", "II", "U", "R", "J", "Qu", "N", "QB", "G"], "s": ["ss", "sq", "a", "strings", "ans", "p", "states", "xs", "c", "sets", "y", "r", "o", "ks", "z", "si", "S", "w", "sb", "sites", "l", "services", "u", "d", "ses", "q", "js", "f", "sections", "ns", "ws", "su", "abs", "gs", "b", "v", "string", "ts", "e", "ds", "se", "n"], "t": ["the", "text", "a", "int", "at", "wt", "tt", "p", "c", "y", "o", "r", "tools", "tr", "pt", "T", "tf", "temp", "ti", "z", "xt", "ty", "w", "ant", "l", "u", "d", "nt", "q", "ta", "out", "f", "m", "rt", "ct", "ts", "b", "v", "qt", "e", "tz", "total", "n"], "_": [" arg", "a", " block", "__", "non", " g", "al", "place", "p", " id", "of", " ip", "un", " seq", "ay", " time", " un", " the", "l", "u", " over", "out", "f", " o", "ac", " non", " mem", " sub", "all", "val", " l", "n", "ip"], "x": ["dx", "k", "a", "int", "sex", "X", "p", "tx", "event", "xs", "c", "xx", "yx", "y", "r", "rx", "ix", "lex", "z", "xt", "ex", "index", "xxx", "xxxx", "search", "w", "l", "wx", "u", "d", "q", "f", "ax", "xi", "xe", "v", "b", "xp", "my", "e", "xes", "xy", "id", "xc", "cl", "n"], "i": ["ie", "int", "qi", "p", "ai", "c", "o", "y", "iu", "z", "si", "ind", "I", "u", "q", "io", "m", "xi", "ci", "v", "b", "e", "li", "ii", "n"], "j": ["ji", "k", "ie", "p", "c", "y", "o", "jj", "jit", "z", "l", "q", "js", "jp", "f", "m", "aj", "ij", "J", "v", "bj", "e", "kj", "ret", "ii", "n"]}}
{"code": "s=input()\\nn=len(s)\\nif s[n-1] is 's':\\n  print(s+'es')\\nelse: \\n  print(s+'s')", "target": "746", "substitutes": {"s": ["ss", "strings", "a", "south", "str", "ins", "words", "ans", "states", "p", "ps", "xs", "c", "g", "i", "sym", "sed", "sets", "plus", "o", "joined", "results", "second", "si", "es", "search", "S", "sb", "current", "args", "parts", "services", "ses", "d", "lines", "less", "sg", "l", "terms", "f", "cs", "m", "ssl", "ns", "self", "ws", "input", "single", "data", "os", "gs", "b", "ts", "string", "space", "t", "ls", "e", "v", "sing", "session", "ds", "source", "sum", "comments"], "n": [" N", "k", "p", "g", "c", "i", "o", "r", "nc", "num", "y", "size", "ne", "z", "x", "sn", "adj", "l", "u", "d", "j", "f", "m", "ns", "ni", "b", "len", "v", "e", "N", "t", "all", "nb"]}}
{"code": "n = int(input())\\nA = list(map(int, input().split()))\\nd = {}\\n\\nfor i in A:\\n    if i in d:\\n        print(\"NO\")\\n        exit(0)\\n    else:\\n        d[i] = 1\\n\\nprint(\"YES\")\\n", "target": "135", "substitutes": {"n": [" N", "p", "na", "g", "c", "Num", "o", "Na", "nc", "num", "C", "ne", "x", "l", "pi", "nn", "nt", "Ni", "j", "f", "m", "Ns", "ns", "ni", "b", "N", "nb"], "A": ["F", "a", "L", "At", "H", "p", "Y", "ai", "c", "K", "Na", "P", "B", "C", "T", "D", "mA", "Ar", "au", "array", "AA", "If", "Alpha", "S", "I", "args", "Z", "II", "Array", "am", "Input", "alpha", "M", "b", " a", "N", "G", "NA", "An", "ad"], "d": ["s", "dd", "a", "p", "nd", "g", "c", "dat", "y", "o", "h", "dict", "P", "D", "z", "x", "w", "l", "u", "do", "q", "f", "j", "dt", "m", "di", "data", "db", "v", "b", "dim", "t", "e", "pd", "N", "ds", "id", " D", "dn", "ad"], "i": ["gi", "k", "ui", "a", "ei", "ie", "ib", "chi", "qi", "p", "ai", "c", "ifi", "oi", "o", "y", "r", "ini", "iq", "iu", "ani", "z", "si", "eni", "index", "x", "yi", "ind", "I", "it", "l", "u", "pi", "ati", "j", "iii", "f", "m", "xi", "di", "ni", "ci", "ij", "v", "b", "key", "t", "e", "id", "li", "ii", "ik", "bi", "ti"]}}
{"code": "N,K = map(int,input().split())\\np = list(map(int,input().split()))\\n\\nl = []\\nfor i in range(N):\\n    l.append(((1+p[i])*(p[i]/2))/p[i])\\n\\nque = [0]*(N+1)\\nfor i in range(1,N+1):\\n    que[i] = l[i-1]+que[i-1]\\n\\nans = 0\\nfor i in range(K,len(l)):\\n    ans = max(ans,que[i+1]-que[i+1-K])\\n\\nif N == K:\\n    print(max(que))\\nelse:\\n    print(ans)", "target": "87", "substitutes": {"N": ["F", "MN", "k", "E", "L", "V", "NN", "H", "NL", "Q", "X", "Y", "Size", "Num", "NS", "NE", "O", "P", "T", "C", "Len", "D", "B", "Ne", "S", "A", "W", "I", "No", "NT", "Node", "Ni", "Z", "Ns", "U", "R", "M", "J", "CN", " n", "KN", "NA", "n"], "K": ["F", "k", "E", "KK", "Ke", "L", "KO", "KI", "V", "H", "Ak", "Q", "X", "Y", "NE", "KE", "KT", "Sk", "O", "P", "T", "C", "B", "SK", "D", "NK", "KS", "S", "W", "KC", "Z", "KR", "PK", "U", "R", "J", "M", "G", "KN", "KA", "Ka", "Ku", "n"], "p": ["lp", "s", "k", "op", "a", "pre", "ps", "g", "c", "o", "r", "tp", "h", "pr", "P", "z", "pa", "x", "w", "u", "pi", "d", "pl", "q", "f", "j", "m", "pp", "v", "b", "np", "e", "pe", "py", "pc", " P", "n"], "l": ["lp", "s", "k", "ol", "L", "c", "o", "sl", "lis", "el", "la", "left", "lo", "lc", "kl", "los", "u", "pl", "ll", "q", "ln", "dl", "f", "cli", "m", "list", "nl", "lu", "v", "b", "e", "ls", "le", "li", "ul", "cl", "lb", "n"], "i": ["gi", "min", "k", "ui", "a", "ie", "int", "ei", "ami", "qi", "mi", "phi", "ai", "c", "o", "y", "ini", "ix", "iu", "api", "ti", "z", "si", "eni", "index", "x", "ind", "start", "I", "uri", "u", "pi", "d", "fi", "io", "j", "f", "xi", "ori", "di", "ni", "ci", "ip", "isi", "v", "b", "e", "info", "zi", "id", "li", "ii", "bi", "n"], "que": ["min", "cur", "k", "layer", "L", "line", "sh", "code", "vel", "queue", "qu", "Queue", "Q", "qa", "c", "hide", "h", "case", "en", "pos", "log", "buf", "fe", "la", "lc", "conf", "cle", "kl", "ques", "bl", "cv", "u", "pl", "q", "f", "lf", "cli", "sync", "core", "ue", "pull", "list", "hi", "ide", "fl", "lu", "v", "lb", "len", "e", "pe", "play", "le", "seq", "id", "li", "cl", "ul", "range", "che", "Que", "block", "lo"], "ans": ["ss", "s", "a", "lan", "ras", "cas", "span", "eps", "amps", "na", "nas", "ions", "en", "anas", "AN", "ANS", "ks", "la", "ane", "aces", "mean", "ann", "anon", "ani", "anc", "ana", "es", "lines", "aned", "ace", "ons", "q", "anne", "ens", "sk", "cs", "acl", "leans", "ants", "acs", "ns", "man", "scan", "ases", "os", "san", "ls", "plan", "ds", "ops", "an", "ins"]}}
{"code": "s = input()\\n\\nif(len(s) % 2 == 0):\\n    s = s[:-2]\\nelse:\\n    s = s[:-1]\\n\\nwhile(s != \"\"):\\n    l = len(s)//2\\n    if(s[:l] == s[l:]):\\n        print(l*2)\\n        break\\n    s = s[:-2]\\n", "target": "696", "substitutes": {"s": ["ss", "strings", "sets", "y", "ks", "si", "blocks", "events", "sb", "parts", "js", "f", "data", "abs", "gs", "b", "session", "your", "comments", "ins", "new", "states", "xs", "i", "second", "aws", "u", "sg", "sa", "os", "string", "e", "source", "spec", "p", "ps", "r", "es", "params", "S", "lines", "services", "ses", "d", "m", "ns", "self", "input", "seconds", "ts", "t", "ls", "a", "south", "g", "c", "steps", "sym", "o", "sl", "results", "w", "tests", "args", "ssl", "ws", "single", "su", "opens", "ds", "its", "sv", "rs", "n"], "l": ["lp", "k", "ol", "L", "p", "al", "g", "c", "i", "tl", "dL", "o", "sl", "r", "el", "left", "la", "lo", "lv", "lc", "kl", "z", "w", "u", "d", "ll", "ln", "f", "j", "dl", "m", "lf", "rl", "nl", "length", "lu", "len", "ell", "b", "v", "e", "ls", "le", "li", "ul", "lb", "n"]}}
{"code": "N = int(input())\\nW = [input() for _ in range(N)]\\nfor i in range(N):\\n    for j in range(N):\\n        if i != j:\\n            if W[i] == W[j]:\\n                print(\"No\")\\n                exit()\\nfor k in range(N-1):\\n    if W[k][-1] != W[k+1][0]:\\n        print(\"No\")\\n        exit()\\nprint(\"Yes\")", "target": "218", "substitutes": {"N": ["F", "E", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "NS", "NE", "K", "Na", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "I", "No", "NT", "Node", "Z", "Ns", "R", "J", "M", " n", "NA", "n"], "W": ["F", "E", "L", "New", "V", "Sw", "H", "Q", "X", "Y", "WE", "MW", "K", "SW", "NW", "GW", "Widget", "O", "AW", "P", "B", "T", "C", "D", "S", "Weight", "w", "Word", "I", "We", "Write", "TW", "Web", "WM", "WB", "WA", "WF", "U", "R", "M", "J", "VW", "G", "CW", "FW", "BW"], "_": ["p", "num", "x", "I", "l", "q", "f", "len", "all", "id"], "i": ["ji", "ih", "ui", "a", "ie", "int", "p", "ai", "c", "o", "y", "iu", "z", "si", "eni", "x", "ind", "I", "l", "u", "ki", "io", "f", "ir", "m", "xi", "ori", "ri", "ni", "ci", "ij", "v", "b", "e", "iw", "id", "li", "ii", "n", "bi", "ip"], "j": ["ji", "s", "a", "ja", "p", "c", "jo", "y", "o", "jj", "r", "num", "h", "pos", "ijk", "jl", "z", "je", "si", "index", "x", "ind", "I", "l", "u", "d", "q", "ik", "f", "jp", "m", "ij", "J", "v", "key", " ii", "b", "e", "bj", "kj", "ii", " l", "n"], "k": ["km", "kid", "ke", "p", "c", "K", "y", "o", "h", "kk", "ijk", "kg", "ks", "kn", "z", "kl", "ch", "x", "kw", "w", "ko", "l", "ok", "u", "d", "q", "ki", "sk", "f", "m", "ku", "key", "v", "b", "ck", "e", "kr", "id", "ik", "n"]}}
{"code": "import numpy as np\\n\\na, b, c, d = map(int, input().split())\\nx = np.array([a, b])\\ny = np.array([c, d])\\nz = np.outer(x, y)\\nprint(z.max())", "target": "774", "substitutes": {"a": ["aa", "va", "p", "na", "ai", "aw", "i", "h", "r", "ba", "ab", "art", "da", "pa", "A", "ar", "ak", "u", "ca", "f", "ax", "sa", "ac", "asa", "area", "aj", "am", "ae", "alpha", "ea", "an", "n"], "b": ["aa", "k", "fb", "p", "bs", "g", "i", "r", "h", "B", "ba", "ab", "w", "sb", "cb", "l", "bb", "u", "f", "eb", "db", "v", "e", "bc", "abc", "nb", "lb", "bi", "ad", "n"], "c": ["k", "p", "i", "r", "h", "o", "ec", "C", "fc", "cy", "w", "cb", "con", "l", "u", "f", "ca", "ac", "dc", "cd", "ci", "cf", "e", "bc", "cr", "col", "cl", "n"], "d": ["dx", "k", "dd", "dy", "p", "nd", "i", "h", "r", "D", "da", "l", "de", "dad", "u", "do", "f", "bd", "j", "dt", "dr", "dc", "cd", "db", "ld", "e", "t", "ds", "n"], "x": ["dx", "s", "k", "int", "X", "p", "xs", "i", "xx", "h", "rx", "ix", "array", "index", "w", "l", "u", "bb", "f", "ax", "j", "m", "data", "v", "e", "t", "xy", "n"], "y": ["iz", "ys", "dy", "gy", "Y", "i", "ym", "ay", "zy", "yi", "yo", "cy", "ny", "yt", "j", "yy", "ya", "oy", "iy", "t", "e", "xy", "py", "vy", "isy", "ii", "ey", "ies"], "z": ["iz", "ze", "density", "p", "phi", "init", "g", "zone", "i", "tz", "cz", "inf", "zo", "az", "zy", "zh", "w", "yz", "l", "q", "f", "Z", "j", "m", "zen", "data", "fl", "spin", "zip", "v", "t", "e", "zl", "zi", "gz", "n"]}}
{"code": "n = int(input())\\na = [int(i) for i in input().split()]\\nprint(sum(a[i] % 2 == 1 for i in range(0, n, 2)))", "target": "126", "substitutes": {"n": ["min", "s", "k", "part", "p", "g", "c", "o", "r", "nc", "num", "y", "net", "z", "x", "w", "l", "u", "d", "nt", "max", "f", "j", "m", "ns", "b", "v", "len", "t", "N", "e", "count", "nb"], "a": ["aa", "s", "ans", "p", "ai", "g", "c", "y", "h", "ab", "au", "array", "z", "x", "A", "w", "action", "args", "ata", "l", "u", "aba", "f", "aaa", "sa", " A", "m", "area", "am", "input", "data", "ae", "alpha", "b", "e", "all", "an"], "i": ["gi", "ji", "k", "int", "chi", "qi", "p", "phi", "ai", "c", "oi", "o", "r", "y", "ini", "iu", "ti", "z", "si", "index", "x", "yi", "ind", "I", "it", "l", "u", "pi", "d", "j", "f", "io", "xi", "input", "di", "ri", "ni", "ci", "b", "key", "v", "e", "t", "zi", "id", "li", "ii", "bi"]}}
{"code": "import heapq\\nn = int(raw_input())\\nheap = [map(int, raw_input().split(' '))[::-1] for _ in range(n)]\\nheapq.heapify(heap)\\n\\ndef f(heap):\\n\tt = 0\\n\twhile(heap):\\n\t\tnd,ct = heapq.heappop(heap)\\n\t\twhile(heap and heap[0][0] == nd): ct += heapq.heappop(heap)[1]\\n\t\tgap = nd - ct - t\\n\t\tif gap < 0:\\n\t\t\treturn False\\n\t\twhile(heap and heap[0][1] <= gap):\\n\t\t\tu,v = heapq.heappop(heap)\\n\t\t\tgap -= v\\n\t\t\tt += v\\n\t\tt += ct\\n\treturn True\\nprint 'Yes' if f(heap) else 'No'", "target": "55", "substitutes": {"n": [" N", "s", "k", " p", "p", "c", "i", "o", "number", "nc", "r", "num", "y", "net", "size", "z", "index", "x", "nan", "node", "w", "l", "d", "nt", "nn", "j", "network", "f", "m", "ns", "nr", "len", "limit", "b", "np", "N", "e", "nb"], "heap": ["weep", "peap", "sheip", "hyip", "heip", "wifeap", "heapt", "heaf", "Heapt", "hyap", "weop", "geep", "Heal", "ghaps", "peaps", "cheapt", "cheal", "neap", "leape", "keaper", "Heap", "henap", "wifeaps", "leap", "keap", "hyaf", "hak", "weape", "keamp", "keep", "heal", "hep", "hapy", "sheal", "leal", "sheaper", "scheep", "keape", "geap", "cleap", "sheap", "sheep", "wifeaper", "Heak", "sheape", "heapy", "hapt", "cheop", "ghap", "weal", "geamp", "heaper", "henape", "heamp", "hyat", "ghapt", "heak", "sheat", "cleal", "coip", "keaps", "keal", "coat", "peaf", "Heat", "sheaf", "Heaps", "cheap", "peep", "weat", "heaps", "coaf", "peaper", "hap", "cleop", "heep", "keak", "weaps", "neaps", "Heaper", "scheap", "ghal", "sheop", "wifeape", "henep", "heape", "coap", "keop", "cleep", "yeapt", "cheapy", "neep", "leaper", "hal", "cleip", "henamp", "peape", "heop", "cleaps", "cheaps", "yeal", "weapt", "weaper", "heat", "Heape", "geape", "hop", "yeapy", "weap", "neat", "Heop", "scheop", "yeap", "keaf", "scheip", "Heep"], "_": [" block", "__", " row", " seq", " __", "x", " un"], "t": ["s", "k", "a", "int", "at", "total", "tt", "et", "p", "g", "c", "i", "y", "h", "tp", "mt", "r", "pt", "T", "z", "art", "x", "w", "ant", "l", "d", "nt", "q", "ta", "f", "dt", "j", "m", "note", "rt", "type", "ts", "b", "e", "trial", "col", "offset"], "nd": ["end", "dd", "odd", "na", "std", "c", "nc", "td", "rn", "ord", "ne", "ng", "nu", "od", "nv", "gn", "st", "ind", "inc", "gd", "ant", "adj", "d", "nt", "nn", "max", "nz", "nw", "ns", "ND", "old", "cd", "dc", "nl", "ld", "np", "dn", "und", "nb", "ad"], "ct": ["CT", "sq", "const", "sc", "int", "at", "wt", "tt", "qa", "ft", "lat", "c", "std", "ht", "nc", "cont", "txt", "pt", "x", "cent", "oct", "gn", "ont", "ant", "apt", "patch", "cn", "d", "sec", "nt", "q", "dt", "ut", "gt", "cat", "ns", "dc", "cd", "act", "vc", "cit", "rt", "ci", "qt", "ld", "cf", "cr", "lt", "cc", "count", "col", "cl", "feat"], "gap": ["wa", "sc", "int", "span", "total", "lap", "gy", "p", "qa", "period", "ge", "g", "lat", "c", "tap", "aps", "gc", "y", "num", "round", "ver", "ap", "gp", "txt", "snap", "sp", "z", "div", "scale", "pa", "w", "window", " gaps", "nat", "adj", "patch", "max", "q", "hop", "shift", "frac", "gt", "dc", "area", "act", "parent", "batch", "padding", "zip", "ha", "count", "flow", "col", "id", "fill", "sv", "feat", "next", "pg", "ref", "offset", "ip"], "u": ["s", "k", "a", "ur", "p", "g", "c", "i", "o", "y", "gu", "nu", "ou", "cu", "w", "l", "d", "q", "f", "m", "tu", "us", "U", "b", "ul"], "v": ["new", "s", "k", "vi", "end", "ve", "erv", "uv", "V", "p", "g", "c", "i", "h", "ver", "lv", "vs", "z", "ch", "vp", "nv", "av", "cv", "w", "vm", "version", "get", "q", "ff", "j", "iv", "f", "pp", "vv", "br", "vc", "vt", "b", "tv", "view", "vy", "sv", "ev"]}}
{"code": "#from statistics import median\\n#import collections\\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\\nfrom math import gcd\\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\\n#from collections import deque\\nfrom collections import deque,defaultdict,Counter\\nimport decimal\\nimport re\\nimport math\\nimport bisect\\nimport heapq\\n#\\n#\\n#\\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\\n#\\n#\\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\\n# \u56db\u6368\u4e94\u5165g\\n#\\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\\n#\\n#\\nimport sys\\nsys.setrecursionlimit(10000000)\\nmod = 10**9 + 7\\n#mod = 9982443453\\n#mod = 998244353\\nINF = float('inf')\\nfrom sys import stdin\\nreadline = stdin.readline\\ndef readInts():\\n  return list(map(int,readline().split()))\\ndef readTuples():\\n    return tuple(map(int,readline().split()))\\ndef I():\\n    return int(readline())\\na,b,c = readInts()\\nprint((a*b)//2)\\n", "target": "637", "substitutes": {}}
{"code": "r, c = map(int, raw_input().split())\\n\\ndata = [0 for i in range(r)]\\ntemp = [0 for i in range(c)]\\n\\nfor i in range(r):\\n    data[i] = map(int, raw_input().split())\\n    \\nfor i in range(r):\\n    data[i].append(0)\\n    data[i][c] = sum(data[i])\\nfor i in range(c):\\n    for j in range(r):\\n        temp[i] += data[j][i]\\ntemp.append(sum(temp))\\ndata.append(temp)\\n\\nfor i in range(r+1):\\n    print \" \".join(map(str, data[i]))", "target": "68", "substitutes": {"r": ["rh", "k", "ur", "p", "err", "h", "rd", "pr", "re", "x", "ar", "w", "l", "u", "d", "rb", "row", "range", "sr", "f", "ir", "m", "right", "rc", "rg", "R", "nr", "b", "v", "e", "t", "cr", "order", "ru", "er", "rs", "n"], "c": ["s", "k", "a", "p", "o", "nc", "y", "h", "C", "z", "ch", "ce", "x", "cu", "w", "l", "u", "d", "q", "f", "cs", "m", "ac", "rc", "ci", "ct", "v", "b", "e", "t", "cr", "count", "col", "id", "n"], "data": ["s", "group", "int", "content", "this", "write", "empty", "x", "series", "shift", "f", "model", "json", "list", "zip", "info", "new", "change", "code", "dat", "DATA", "tmp", "api", "left", "split", "done", "div", "array", "Data", "function", "script", "breaks", "tree", "sum", "next", "form", "update", "raw", "wa", "str", "p", "default", "extra", "number", "case", "layout", "result", "format", "size", "z", "time", "index", "response", "cache", "start", "d", "input", "parent", "map", "count", "a", "missing", "results", "first", "search", "diff", "partial", "body", "w", "one", "style", "output", "base", "test", "draw", "n"], "i": ["gi", "ji", "ui", "vi", "a", "ei", "int", "ie", "qi", "p", "init", "ai", "ic", "oi", "o", "y", "ini", "ix", "iu", "api", "z", "si", "x", "yi", "ind", "I", "it", "l", "u", "pi", "d", "f", "io", "ir", "xi", "di", "ri", "ni", "ci", "ip", "ij", "b", "v", "e", "t", "il", "info", "id", "li", "ii", "n", "bi", "abi", "ti"], "temp": ["new", "unit", "loc", "variable", "a", "total", "p", "dat", "extra", "format", "layout", "result", "tmp", "content", "iter", "left", "emp", "size", "z", "mini", "index", "diff", "cache", "partial", "w", "body", "flat", "current", "pi", "tem", "buffer", "shift", "out", "f", "json", "Temp", "output", "input", "tree", "v", "zip", "key", "fake", "t", "base", "e", "b", "col", "source", "form", "test", "sum", "tc", "offset", "n"], "j": ["ji", "k", "ie", "ja", "p", "g", "y", "jj", "ix", "o", "iu", "jl", "z", "rev", "x", "ind", "l", "u", "uj", "q", "jp", "f", "jc", "xi", "br", "J", "v", "b", " ii", "e", "fr", "li", "ii", "bi", "n"]}}
{"code": "N = int(input())\\na = list(map(int,input().split()))\\n\\n\\nans = 1e10\\nfor i in range(-100,101):\\n    tmp = 0\\n    for j in a:\\n        tmp += (i-j)**2\\n    ans = min(ans,tmp)\\n\\nprint(ans)", "target": "548", "substitutes": {"N": ["L", "NN", "na", "K", "Na", "num", "AN", "O", "P", "B", "C", "T", "NP", "S", "A", "I", "nn", "Z", "Ns", "ns", "no", "R", "M", "J", " n", "NA", "nb", "n"], "a": ["aa", "ao", "span", "p", "na", "ai", "c", "ba", "mA", "ab", "au", "array", "ana", "z", "x", "A", "ar", "af", "args", "ata", "ak", "f", "sa", " A", "ac", "asa", "ants", "area", "aj", "am", "ae", "oa", "alpha", "b", "ea", "all", "an", "ad", "n"], "ans": ["ano", "s", "ents", "lan", "nas", "span", "offs", "eps", "ams", "p", "na", "atan", "ai", "ms", "amps", "anas", "AN", "aos", "ANS", "anes", "ks", "asts", "mean", "ane", "vs", "ann", "anon", "ani", "ana", "x", "nan", "A", " means", "asses", "aned", "nn", "ons", "aus", "sk", "sa", "leans", "ens", "ants", "cs", "ns", "features", "oa", "alpha", "plan", "ds", "an", "ad", "n"], "i": ["ji", "k", "ie", "int", "chi", "p", "phi", "ai", "c", "y", "h", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "f", "jp", "m", "xi", "di", "ci", "ij", "v", "b", "id", "li", "ii", "bi", "n"], "tmp": ["amp", "const", "int", "span", "sample", "p", "ai", "extra", "kk", "pos", "cp", "beta", "txt", "slice", "temp", "mp", "mini", "array", "now", "start", "obj", "nb", "rb", "bb", "sup", "aaa", "Temp", "area", "yy", "output", "data", "alpha", "stuff", "foo", "np", "space", "mm", "abc", "part", "test", "tc", "offset"], "j": ["ji", "k", "ie", "ib", "ja", "p", "g", "c", "y", "o", "jj", "im", "pos", "z", "index", "x", "start", "I", "obj", "adj", "ia", "l", "d", "q", "jp", "f", "m", "oj", "aj", "ij", "J", "v", "b", " ii", "e", "t", "ii", " jo", "n", "ip"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\n\\ndef myindex(l, s):\\n    if s in l:\\n        return l.index(s)\\n    else:\\n        return len(l)\\n\\ndef main():\\n    S = list(readline()[:-1])\\n    T = list(readline()[:-1])\\n    tmpS = []; tmpT = []\\n    cntS = 0; cntT = 0\\n    flag = True\\n    for i in range(len(S)):\\n        cntS = myindex(tmpS, S[i])\\n        cntT = myindex(tmpT, T[i])\\n        tmpS.append(S[i])\\n        tmpT.append(T[i])\\n        if cntS != cntT:\\n            flag = False\\n            break\\n    if flag:\\n        print('Yes')\\n    else:\\n        print('No')\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "490", "substitutes": {"readline": ["READLine", "loadlock", "readinglines", " readlin", "runlines", "loadlines", "READline", "runmain", "readingLINE", "loadpage", " readerlin", "readerlines", "loadLine", "readLine", "connectlen", "readlen", "readerlock", "readsync", "loadline", " readersync", "readl", "loadmain", "readlines", " Readsync", " readerl", " Readlin", " Readline", " readl", "readerpage", "readerline", "readingline", "runLINE", "readingpage", "readmain", "READlen", "readLINE", "loadLINE", "connectlines", "loadlen", " readsync", "READlines", "connectline", "readinglock", "readingmain", "readlin", " readerline", "readpage", "connectLine", " Readl", "readlock", "runline"], "l": ["lp", "ol", "L", "line", " L", "NL", "p", "c", "o", "sl", "r", "lis", "log", "el", "ml", "left", "lv", "lc", "kl", "lines", "d", "ll", "f", "dl", "ln", "lace", "m", "lf", "rl", "list", "nl", "lit", "v", "b", "lb", "len", "e", "ls", "t", "il", "li", "ul", "lin", "n"], "s": ["ss", "a", "L", "ins", "p", "ps", "stat", "xs", "c", "y", "sl", "o", "r", "sf", "sp", "size", "z", "si", "x", "w", "sb", "lines", "ses", "d", "f", "object", "ssl", "m", "single", "list", " ls", "os", "abs", "v", "b", "string", "t", "ls", "e", "se", "sv", "n"], "S": ["F", "E", "L", "V", "H", "X", "SE", "Sample", "NS", "JS", "Si", "TS", "SH", "ST", "Source", "SI", "Su", "O", "P", "B", "C", "D", "Section", "Session", "A", "SL", "Sl", "I", "Ds", "SS", "OS", "Single", "Z", "Data", "WS", "Ns", "Set", "U", "R", "M", "String", "Sin", "N", "Name", "SN", "G", "Index", "SO", "SU"], "T": ["F", "E", "L", "V", "LT", "Ti", "TL", "X", "Y", "To", "TA", "This", "Text", "Test", "IT", "TS", "TN", "P", "TR", "B", "D", "C", "TB", "DT", "W", "Type", "NT", "UT", "TX", "TM", "Z", "TT", "Temp", "U", "R", "M", "TF", "t", "WT", "N", "Token", "Ts", "Target", "PT", "GT"], "tmpS": ["mpS", " tmpN", "ppoX", "tempS", "ttT", "ppoS", " tmps", " tmpL", "tmps", "tempL", "tempX", "tmpX", "ppoN", "tempN", "pageX", "ttL", "mps", "pageS", "mpT", "pageT", "ppoT", "tempT", "ttS", "tts", "tmpL", "pageN", "mpN", "mpL", "tmpN"], "tmpT": [" tmpN", "mpS", "tempS", " tmpt", "tmpB", " tmpB", "zipT", "mpB", "extraT", "extraB", "tempN", "zipN", "tempB", "zipS", "tempt", "mpT", "zipt", "tempT", "tmpt", "extrat", "extraN", "mpN", "tmpN"], "cntS": ["cndL", "CntL", "ecrtS", "lcntD", "lcntL", "csts", "crts", "cntL", "cwdI", "crtN", "lcrtS", "cndS", "countB", "countD", "cncN", "lcntN", "cncL", "crtI", "cstS", "cwdS", "CndL", "cncB", "countN", "cwdT", "cntN", "cncS", "CndB", "countL", "ecrtI", "cannotN", "cnts", "cndN", "CntN", "cndB", "cstT", "cannotL", "cntB", "crtL", "cntD", "crtD", "CndS", "CndN", "lcrtD", "crtS", "cwds", "crtT", "ecnts", "ecntS", "ecrts", "countS", "cntI", "cannotD", "lcntS", "cannotS", "lcrtL", "ecntI", "lcrtN", "CntB", "ecrtT", "ecntT", "CntS", "cstI"], "cntT": ["cctE", "cndL", "CntL", "crtB", "CNTL", "cndO", "cntM", " cntM", "cctS", "CNTS", "CntT", "cctM", "countM", " cntB", "cncO", "cntL", "countB", " cntNot", "CntE", "cncL", " cndO", "cctT", " cntO", "cndT", " crtB", "cNTT", " crtM", "cctL", " crtT", "cntE", "cNTE", "contL", "cntB", "cntO", " cndL", "crtL", "cNTL", "crtS", "crtT", " cntL", "countS", "cctB", "crtE", "contO", "cndNot", "cncNot", "contT", "CNTT", "contNot", "cncT", "countT", " crtS", " cndT", "CntS", "CNTE", "cNTS", "crtM", " cndNot", "cntNot"], "flag": ["bad", "error", "zag", "field", "agn", "fortune", "line", "const", "int", "code", "ag", "agged", "arg", "gc", "log", "leaf", "tag", "sign", "force", "cost", "disabled", "file", "af", "start", "safe", "bug", "fi", " flags", "band", "wait", "lag", "status", "agg", "style", "flags", "FLAG", "no", "type", "key", "len", "debug", " Flag", "count", "id", "bit", "ret", "warning", "filter", "Flag", "offset"], "i": ["gi", "ih", "ji", "ui", "vi", "ie", "ib", "int", "qi", "p", "ai", "c", " I", "oi", "o", " iP", "ix", "ini", "ig", "iu", "slice", "ite", "lc", "ti", "z", "si", "index", "x", "ind", " il", "I", "uri", "fi", "u", "pi", "j", "f", "io", " j", "xi", "ri", "di", "ni", "ci", "\u0438", "b", " ii", "e", "t", "info", "multi", "id", "li", "ii", "bi", "ip"]}}
{"code": "def resolve():\\n    s = input()\\n    display_str = \"\"\\n    for i in range(len(s)):\\n        if s[i] == \"B\":\\n            if len(display_str) != 0:\\n                display_str = display_str[0:-1]\\n        else:\\n            display_str += s[i]\\n    print(display_str)\\n\\nresolve()", "target": "503", "substitutes": {"s": ["ss", "a", "strings", "str", "settings", "shows", "ins", "p", "g", "c", "xs", "sets", "sts", "o", "sl", "r", "results", "speech", "si", "es", "params", "S", "sb", "args", "l", "services", "ses", "d", "u", "parts", "sg", "f", "m", "self", "input", "os", "abs", "gs", "b", "v", "string", "e", "t", "ls", "ds", "submit", "n"], "display_str": ["displayingstr", "displayerpath", "displayingtype", "displaypydr", " display_dr", "displayFtype", " display2Str", " display_name", "displayfulorig", "contentFstr", "displayenstr", " displayingchar", " display_type", "display_dr", "content_Str", "display_vec", " display2str", " display2STR", "display_len", "display2str", "displaypystr", "displayFStr", "displayingorig", "displaypyStr", " displayingtype", "display_orig", "displaypyblock", "displaylyvec", "displayactype", "displaylyarr", "content_type", "displayerstr", "displayedStr", " display_orig", "displaylypath", " display_arr", " display_char", "content_str", "contentFlen", " display_Str", "contentFStr", "content_len", "displayedstring", "contentFtype", "displayacstr", " display_text", "displayacchar", "display_char", " display_STR", " display_block", "display_path", " displayingstr", " display2text", "displayervec", " display_vec", " displayingorig", "displayFlen", "displayentext", "display_type", " display_string", "displayenSTR", "displayedname", "displayacorig", "displayenStr", "display2Str", "displaylystr", "display_STR", "displayerarr", "displayFstr", "display2STR", " display_path", "display_text", "displayfulchar", "displayedstr", "displayfultype", "display2text", "displayingchar", "display_name", "displayfulstr", "display_arr", "display_block", "display_string", "display_Str"], "i": ["gi", "ji", "k", "ui", "a", "int", "qi", "p", "stat", "ai", "c", "h", "r", "gu", "iu", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "I", "l", "u", "d", "pi", "j", "f", "xi", "di", "ni", "ci", "b", "v", "key", "e", "t", "id", "li", "ii", "n", "bi", "ip"]}}
{"code": "n = int(input())\\nA = list(map(int,input().split()))\\nMOD = 10**9+7\\n\\ncnt = [0] * (n+1)\\ncnt[0] = 3\\n\\nres = 1\\nfor i,a in enumerate(A):\\n  res *= cnt[a]\\n  res %= MOD\\n  cnt[a] -= 1\\n  cnt[a+1] += 1\\n\\nprint(res % MOD)", "target": "560", "substitutes": {"n": [" N", "s", "k", "p", "g", "c", "o", "r", "nc", "num", "net", "C", "ne", "nu", "z", "x", "w", "l", "RN", "u", "d", "max", "f", "j", "network", "m", "Ns", "ns", "M", "nr", "b", "N", "nb", "nor"], "A": ["F", "E", "L", "V", "H", "AS", "X", "Y", "Adam", "AR", "K", "AM", "O", "SA", "P", "B", "C", "T", "D", "AC", "As", "API", "array", "AA", "S", "W", "I", "CA", "U", "R", "AF", "M", "N", "G", "NA", "RA"], "MOD": ["ID", "NR", "REM", "NO", "PUT", "RC", "ALL", "VER", "AP", "RT", "UN", "OR", " mod", "COR", "RR", "RE", "TR", "LOD", "MD", "Mod", "MAC", "VERSION", "FORM", "Mult", "SIZE", "OD", "MIN", "CF", "Mods", "RN", "MODE", "LOG", "RES", "Z", "MAX", "ARM", "U", "R", "FD", "OK", "M", "MS", "CC", "mod", "REG", "N", "CR", "RA", "NUM", "RM"], "cnt": ["countont", "cNT", "recout", "scrt", "const", "recent", "countNT", "Cent", "scNT", "acnd", " crt", "recno", " cNT", " cent", " cct", "countct", "cct", "crt", " cwd", "connt", "acnt", "Cnt", " cno", "cont", "lcrt", "cst", "pwd", "Cno", "prt", "cent", "acNT", "cout", " cnd", "scnt", " cont", "acont", " cst", "recnt", "cno", "lcnt", "acct", "lcct", "scnd", "conrt", "Crt", "pnt", "lcwd", "conct", "Cst", " cout", "Cout", "Cct", "pct", "cnd", "cwd", "countnt", "acrt"], "res": ["Rs", "ras", "vals", "eps", "arr", "ps", "ms", "rows", "err", " Res", "exp", "r", "css", "results", "result", "pos", "rep", "re", "ver", "gr", "pres", "RE", "reg", "rez", "conf", "rev", "final", "es", "blocks", "Res", "cells", "runs", "obj", "req", "ons", "resolution", "out", "row", "RES", "js", "details", "cs", "resh", "resp", "os", "data", "features", "acts", "ress", "rss", "powers", "nos", "cr", "cons", "seq", "ret", "rs", "changes"], "i": ["aa", "k", "ui", "ie", "ei", "at", "p", "ai", "g", "c", "o", "r", "z", "index", "x", "ar", "ind", "I", "ia", "u", "pi", "j", "f", "ac", "ir", "aj", "e", "an"], "a": ["aa", "ack", "s", "at", "va", "ma", "active", "p", "qa", "access", "ai", "c", "r", "la", "ba", "ab", "au", "array", "z", "art", "x", "av", "af", "ar", "action", "w", "ia", "u", "ace", "aaa", "j", "f", "sa", "ax", "ac", "ca", "ga", "m", "area", "aux", "aj", "am", "ae", "data", "alpha", "b", "ea", "e", "ha", "all", "an", "ad"]}}
{"code": "n = int(input())\\na = int(input())\\nsquare_num = n * n\\nprint(square_num - a)", "target": "379", "substitutes": {"n": ["s", "k", "aa", "p", "na", "g", "c", "i", "o", "number", "nc", "num", "y", "net", "h", "nu", "z", "fn", "x", "da", "nan", "A", "ar", "w", "ny", "l", "u", "d", "nn", "f", "network", "j", "m", "ns", "ni", "alpha", "b", "np", "e", "N", "all", "nb", "an"], "a": ["aa", "wa", "va", "span", "p", "na", "qa", "ai", "c", "fa", "lla", "o", "xa", "la", "ba", "ab", "au", "da", "ar", "A", "u", "aaa", "ca", "f", "sa", "asa", "ga", "area", "am", "aj", "ae", "alpha", "b", "ea", "e", "an", "ad"], "square_num": ["shape_number", "square_len", "squarepnum", "sq_sum", "squareqnum", "squarepoffset", "shape_num", "shape_con", "sq_number", "sq_num", "squareqoffset", "squareqcon", "shape_offset", "squarepnumber", "square_offset", "squareqnumber", "square_number", "squarepcon", "square_con", "sq_len", "square_sum"]}}
{"code": "n = input()\\n\\nn_sum = 0\\nfor i in range(len(n)):\\n  n_sum += int(n[i])\\n\\nprint('Yes' if int(n)%n_sum == 0 else 'No')", "target": "161", "substitutes": {"n": ["s", "k", "name", "span", "p", "na", "g", "c", "o", "r", "y", "nc", "num", "number", "ne", "nu", "z", "fn", "x", "index", "nan", "sn", "node", "adj", "l", "u", "d", "cn", "nn", "nt", "f", "network", "j", "m", "none", "ns", "input", "b", "v", "np", "t", "N", "e", "dn", "nb"], "n_sum": ["N_count", "N__count", "n_total", "net_sum", "N__cum", "n_scale", " n_count", "n_count", "n__count", "N_cum", "n__cum", "N__sum", "n_cum", " n_scale", "N_sum", "net_count", "n__sum", "net_total"], "i": ["gi", "ji", "ui", "end", "a", "ei", "chi", "qi", "mi", "p", "ai", "c", "y", "h", "r", "ini", "jj", "iu", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "j", "f", "xi", "di", "ri", "v", "e", "li", "val", "ii", "bi", "lo"]}}
{"code": "a,b,c,d=map(int,input().split())\\nans=0\\nfor i in range(201):\\n    if a<=i<b and c<=i<d:\\n        ans+=1\\nprint(ans)\\n", "target": "146", "substitutes": {"a": ["aa", "s", "auto", "va", "p", "ai", "g", " ta", "ama", "h", "r", "o", "la", "ba", "ab", "au", "da", "x", "pa", "A", "af", "w", "u", "ta", "f", "sa", "ca", "asa", "ac", " fa", "area", "alpha", "anta", "an", "ad", "n"], "b": ["fb", "p", "bs", "g", "y", "r", "wb", "mb", "zb", "B", "ba", "ab", "body", "sb", "cb", "l", "bb", "rb", "abb", "f", "eb", "ca", "bd", "m", "j", "db", "v", "bar", "base", "e", "bc", "bi", "n"], "c": ["k", "end", "p", "ic", "g", "y", "h", "ec", "C", "lc", "ab", "uc", "z", "x", "cy", "cu", "l", "u", "f", "ca", "ac", "m", "dc", "cd", "ci", "cf", "e", "bc", "cc", "col", "um", "n"], "d": ["dx", "s", "dd", "dy", "fd", "p", "nd", "g", "dat", "h", "r", "ded", "D", "z", "da", "x", "daily", "l", "dad", "u", "f", "j", "m", "du", "dc", "cd", "e", "pd", "ds", "ad", "n"], "ans": ["aid", "ents", "lan", "nas", "ras", "amps", "atan", "na", "ushes", "ats", "anas", "AN", "ANS", "anes", "ks", "asts", "aces", "ann", "ani", "anc", "ays", "es", "ana", "can", " means", "ars", "aves", "aned", "ches", "ace", "ons", "ids", "aus", "ens", "sk", "cs", "leans", "ants", "ns", "man", "os", "reads", "acts", "actions", "cons", "ians", "ds", "an", "ad", "comments", "ins"], "i": ["gi", "k", "ie", "int", "p", "phi", "ai", "o", "h", "ix", "ini", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "j", "f", "xi", "di", "ri", "ip", "ci", "alpha", "v", "e", "id", "li", "ii", "bi", "n"]}}
{"code": "def check(n,k,p,T):\\n    i = 0\\n    for j in range(k):\\n        s = 0\\n        while(s+T[i] <= p):\\n            s = s+T[i]\\n            i = i+1\\n            if (i==n):\\n                return n\\n    return i\\n\\n\\ndef solve(n,k,T):\\n    left =0\\n    right = 100000 * 10000\\n    mid = 0\\n    while (right -left > 1):\\n        mid = (left + right)//2\\n        v = check(n,k,mid,T)\\n        if (v >= n):\\n            right = mid\\n        else:\\n            left = mid\\n    return right\\n\\nlis=[]\\na = input()\\n(nn,kk)=list(map(int,a.split()))\\nfor i in range(nn):\\n    lis.append(int(input()))\\nans = solve(nn,kk,lis)\\nprint(ans)", "target": "139", "substitutes": {"n": ["normal", "na", "g", "c", "o", "y", "nc", "en", "num", "r", "net", "ne", "nu", "z", "x", "nan", "sn", "w", "node", "ny", "l", "u", "d", "nt", "f", "m", "ns", "no", "b", "t", "N", "pn", "e", "nb", "an"], "k": ["ke", "g", "c", "K", "y", "r", "h", "ks", "kn", "z", "x", "mk", "kw", "w", "kin", "ko", "ak", "l", "ok", "u", "d", "q", "ki", "sk", "f", "ky", "m", "kt", "ku", "b", "t", "e", "ik"], "p": ["ps", "g", "c", "y", "r", "tp", "cp", "P", "sp", "w", "l", "u", "pi", "d", "q", "f", "jp", "m", "pp", "b", "np", "t", "e", "pn", "pc"], "T": ["F", "TP", "E", "PO", "L", "V", "LT", "H", "Q", "X", "Y", "TA", "K", "TS", "TN", "TV", "KT", "O", "P", "B", "C", "D", "S", "TB", "DT", "A", "W", "I", "NT", "UT", "TE", "TX", "TM", "TW", "Z", "TT", "Temp", "TC", "U", "R", "Time", "Total", "M", "TF", "t", "N", "WT", "MT", "Ts", "PT"], "i": ["gi", "ih", "ui", "vi", "end", "ie", "int", "chi", "qi", "mi", "phi", "ai", "init", "c", " I", "y", "r", "o", "ini", "ix", "num", "iq", "iu", "api", "ti", "z", "si", "index", "yi", "x", "ind", "I", "it", "l", "u", "pi", "d", "io", "f", "m", "xi", "di", "ri", "ni", "ci", "ip", "isi", "b", "e", "t", "N", "id", "li", "ii", "bi"], "j": [" z", " dj", " r", " I", " id", "o", " sig", " ip", " y", " seq", " c", " f", "z", "x", " pi", "ind", " q", "I", "q", " m", " o", " self", " me", " sp", "ii", " xp", " b", "ip"], "s": ["ss", "hs", "south", "ps", "states", "g", "c", "xs", "sets", "y", "sl", "r", "h", "o", "ks", "sp", "size", "si", "es", "S", "sn", "w", "start", "l", "ses", "d", "u", "sin", "f", "cs", "m", "ns", "ws", "os", "ts", "b", "t", "ls", "e", "ds", "se", "rs", "ins"], "left": ["min", "middle", "full", "last", "L", "leave", "ner", "low", "r", "pos", "Left", "lower", "lo", "la", "size", "lc", "long", "two", "x", "diff", "l", "pl", "d", "ll", "m", "found", "half", "small", "old", "list", "nl", "length", "fl", "day", "len", "limit", "ell", "e", "lt", "all", "li", "cl", "inner", "ul", "offset"], "right": ["false", "rx", "x", "Right", "q", "length", "inner", "error", "h", "rew", " Right", "all", "id", "rad", "rh", "ack", "middle", "rest", "rights", "third", "correct", "rw", "r", "start", "it", "d", "max", "row", "ra", "m", "back", "R", "t", "end", "ed", " r", "rd", "num", "round", "rand", "partial", "w", "one", "ax", "cl", "range"], "mid": ["min", "middle", "end", "mad", "line", "int", "pid", "lan", "mr", "mi", "nd", "ms", "nm", "medium", "r", "low", "main", "md", "uid", "mini", "rand", "x", "diff", "partial", "next", "start", "bug", "cm", "l", "d", "max", "nt", "mind", "m", "small", "depth", "minute", "cd", "no", "hi", "len", "limit", "dim", "key", "micro", "mm", "id", "sub", "Mid", "range", "part", "offset"], "v": ["value", "uv", "V", "g", "c", "o", "r", "h", "lv", "z", "x", "w", "l", "u", "d", "pi", "q", "f", "m", "vv", "b", "limit", "t", "e", "val", "ev", "ii", "vd"], "lis": ["lp", "lins", "arel", "lan", "lia", "LS", "lie", "xs", "lite", "kids", "alli", "la", "lv", "lc", "ani", "lol", "ais", "yi", "atis", "los", "lys", "l", "ses", "ll", "nz", "inos", "ens", "ils", "pins", "list", " ls", "nl", "ni", "nis", "isi", "lems", "alis", "LI", "ls", "lt", "lig", "lies", "zi", "li", "lists", "sels"], "a": ["aa", "aff", "tta", "va", "ma", "na", "ai", "aw", "c", "ba", "au", "ana", "pa", "ar", "A", "af", "ia", "ak", "aaa", "ca", "sa", "asa", "ac", "area", "am", "aj", "ae", "oa", "alpha", "b", "ea", "an", "ad"], "nn": ["aa", "wn", "mn", "lan", "NN", "ner", "non", "na", "nd", "nm", "nc", "rn", "ann", "kn", "nu", "ng", "ne", "fn", "nan", "ork", "sn", "kin", "node", "ny", "cn", "nt", "ll", "nz", "ln", "sk", "nw", "ns", "no", "nl", "ni", "nr", "inn", "pn", "dn", "nb", "test"], "kk": ["km", "KK", "cks", "kid", "ikk", "aka", "dk", "king", "cp", "ijk", "ks", "kn", "kl", "ork", "mk", "kw", "kee", "ka", "kin", "ko", "ctx", "ok", "cki", "ki", "sk", "ky", "yk", "kt", "ku", "ck", "kr", "cc", "qq", "kar", "uk"], "ans": ["lan", "nas", "ras", "eps", "na", "ai", "anas", "AN", "ANS", "anes", "ks", "asts", "mean", "ane", "ann", "anon", "ani", "anc", "au", "ays", "ana", "es", "asm", "ars", "anus", "asses", "args", "aned", "aus", "ens", "sk", "leans", "ants", "ns", "scan", "ls", "an", "ins"]}}
{"code": "import math\\nN=int(input())\\na=list(map(int,input().split()))\\nb=math.gcd(a[0],a[1])\\nfor i in range(N-1):\\n    b=math.gcd(a[i+1], b)\\nprint(b)\\n", "target": "534", "substitutes": {"N": ["F", "MN", "L", "Limit", "V", "NN", "H", "Q", "X", "Size", "Num", "NS", "NI", " B", "K", "NW", "NM", "O", "Len", "B", "T", "C", "P", "D", " C", "Ne", "S", "A", "I", "NT", "Ni", "Z", " A", "Ns", "R", "M", "J", " n", "G", " Ne", "NA", "Count", "n"], "a": ["aa", "s", "auto", "sta", "int", "va", "at", "missing", "ans", "p", "c", "y", "app", "la", "ba", "mA", "empty", "ab", "array", "da", "x", "A", "w", "args", "l", "u", "d", "aaa", "ca", "f", "sa", "ac", "m", "ga", "sup", "object", "area", "aux", "am", "input", "aj", "ae", "alpha", "ea", "e", "add", "an", "ad", "n"], "b": ["bad", "s", "k", "aa", "be", "fb", "p", "bs", "g", "c", "y", "r", "wb", "bis", "B", "ba", "ab", "x", "body", "sb", "cb", "obj", "l", "ob", "bb", "d", "bf", "u", "rb", "abb", "f", "bd", "eb", "db", "binary", "v", "base", "e", "bc", "abc", "nb", "lb", "bi", "ad", "n"], "i": ["gi", "k", "vi", "ui", "end", "mi", "p", "phi", "ai", "g", "c", "h", "y", "ix", "ini", "iu", "ti", "z", "mini", "si", "index", "x", "ind", "start", "I", "l", "fi", "u", "d", "pi", "q", "j", "f", "xi", "ri", "di", "ci", "zi", "id", "li", "ii", "bi", "n"]}}
{"code": "s = int(input())\\na = 10**9\\nif s == 10**18:\\n    print(0, 0, a, 0, 0, a)\\nelse:\\n    x3 = a-(s%a)\\n    y3 = (s+x3)//a\\n    print(0, 0, a, 1, x3, y3)", "target": "638", "substitutes": {"s": ["ss", "sq", "south", "span", "ans", "p", "states", "xs", "c", "g", "sym", "i", "sets", "o", "r", "aps", "y", "ab", "ows", "si", "es", "ays", "als", "S", "A", "ar", "sb", "args", "parts", "aws", "u", "d", "ses", "sg", "aus", "f", "sy", "sa", "cs", "m", "sections", "ns", "ws", "seconds", "os", "gs", "b", "ages", "e", "ls", "ds", "se", "an", "n"], "a": ["aa", "wa", "sta", "va", "span", "p", "access", "ai", "xs", "c", "i", "fa", "y", "h", "la", "ba", "ab", "z", "au", "div", "aug", "pa", "x", "index", "da", "A", "ar", "w", "l", "u", "d", "aaa", "f", "ca", "sa", "m", "ac", "ga", "sup", " A", "area", "aj", "input", "ae", "am", "alpha", "b", "ea", "e", "abc", "an", "active", "n"], "x3": [" x23", "xy23", "x15", "y1", "x1", "a1", "y03", " x2", "dx3", "dxThird", "dx15", " x1", "xThird", " x03", " x15", "xy03", "X3", "dx1", "y2", "x2", "X2", "X1", "xy3", "x03", "aThird", "xy1", " xThird", "a15", "a3", "y23", "x23"], "y3": ["cy23", "y1", "x1", "y03", "Y23", "Y3", " y23", " y2", "Y1", " y03", "x2", "cy03", " y1", "cy3", "Y03", "Y2", "cy2", "y2", "y23"]}}
{"code": "import math\\nA, V = map(int, input().split())\\nB, W = map(int, input().split())\\nT = int(input())\\nD = abs(A - B)\\nD2 = (V - W) * T\\nprint(\"YES\" if D <= D2 else \"NO\")", "target": "349", "substitutes": {"A": ["F", "AD", "E", "a", "L", "H", "X", "Y", "AP", "LA", "EA", "K", "AM", "O", "AH", "P", "C", "AC", "AW", "As", "AA", "S", "I", "Z", "AB", "U", "R", "AF", "M", "N", "G"], "V": ["F", "E", "L", "H", "Q", "X", "Y", "K", "O", "P", "C", "S", "Vol", "I", "UV", "VA", "VC", "VD", "Z", "VM", "U", "R", "J", "M", "v", "N", "VB", "VW", "G", "VT"], "B": ["F", "E", "L", "LB", "BT", "Q", "X", "Y", "DB", "BA", "AB", "O", "P", "C", "BB", "BC", "BI", "TB", "Z", "OB", "WB", "U", "GB", "R", "M", "b", "QB", "N", "VB", "G", "Bs"], "W": ["F", "E", "L", "H", "Q", "X", "Y", "WE", "K", "SW", "GW", "P", "C", "S", "w", "We", "Z", "WS", "WA", "WF", "U", "R", "M", "J", "N", "VW", "G", "Wh"], "T": ["F", "E", "L", "H", "Q", "X", "Y", "TA", "K", "TS", "TH", "O", "P", "C", "DT", "S", "TB", "Type", "TE", "FT", "TW", "Z", "TT", "R", "Time", "Total", "M", "TF", "t", "N", "WT", "G"], "D": ["F", "AD", "E", "L", "DS", "H", "Q", "X", "Y", "K", "DB", "O", "P", "C", "MD", "DD", "S", "DT", "Ds", "d", "DF", "Z", "U", "R", "M", "N", "DL", "G"], "D2": ["F2", "V1", "B2", "V2", " D3", "dTwo", "D1", "B3", "V02", "F3", "BTwo", "D3", " DTwo", " D1", "d02", "D02", "FTwo", " D02", "d1", "d2", "DTwo", "VTwo"]}}
{"code": "while True:\\n    n = list(input())\\n    if n[0] == '0':\\n        break\\n    sum = 0\\n    for i in n:\\n        sum += int(i)\\n    print(sum)", "target": "491", "substitutes": {"n": ["k", "ner", "p", "na", "g", "c", "o", "y", "nc", "r", "num", "en", "net", "un", "nu", "ne", "z", "fn", "sn", "node", "zn", "l", "nin", "u", "d", "nn", "nt", "f", "ln", "j", "network", "m", "ns", "input", "v", "b", "e", "N", "pn", "t", "nb", "an"], "sum": ["mass", "min", "error", "text", " summ", " sums", "span", "chi", "acc", "init", "c", "mem", "miss", "num", "net", "cum", "iter", "weight", "sign", "mean", "seed", "temp", "size", "cost", "si", "index", "sim", "scale", "start", "max", "gram", "out", " count", "amount", "average", "bin", "alpha", "loss", " Sum", "Sum", "all", " num", "count", "li", "skip", "sam", "part", "um", "total"], "i": ["gi", "k", "a", "end", "int", "chi", "p", "stat", "ai", "c", "r", "ini", "pos", "iq", "iu", "z", "si", "index", "x", "ind", "start", "I", "it", "l", "u", "pi", "d", "q", "io", "j", "f", "m", "xi", "input", "v", "e", "iw", "li", "ii", "bi", "ip"]}}
{"code": "#ABC 141\\nS =input()\\nW =[\"Sunny\", \"Cloudy\", \"Rainy\"]\\nfor i,w in enumerate(W):\\n    if w==S:\\n        print(W[(i+1)%3])\\n        exit()", "target": "183", "substitutes": {}}
{"code": "def sep():\\n    return map(int,input().strip().split(\" \"))\\ndef lis():\\n    return list(sep())\\n\\na,b=sep()\\nfor i in range(1,10005):\\n    if (i*8)//100==a and (i*10)//100==b:\\n        print(i)\\n        quit()\\nprint(-1)", "target": "418", "substitutes": {"a": ["aa", "auto", "va", "ma", "p", "ai", "aw", "c", "y", "app", "ba", "ab", "au", "da", "index", "A", "af", "l", "u", "d", "ca", "sa", " A", "ac", "asa", "f", "am", "ae", "alpha", "e", "abc", "an", "ad", "n"], "b": ["s", "be", "bur", "fb", "p", "bs", "c", " B", "y", "bo", "wb", "beta", "B", "ba", "ab", "sb", "cb", "l", "bb", "d", "bf", "ben", "f", "bd", "eb", "xb", "db", "v", "e", "bing", "nb", "lb", "bi", "n"], "i": ["gi", "k", "ui", "pid", "int", "chi", "qi", "mi", "p", "phi", "ai", "init", "c", "h", "ix", "iu", "wei", "seed", "ti", "mini", "si", "eni", "index", "x", "yi", "ind", "start", "I", "uri", "l", "u", "pi", "d", "j", "f", "m", "xi", "input", "di", "hi", "ip", "ci", "key", "my", "e", "info", "multi", "id", "li", "ii", "bi", "n"]}}
{"code": "from collections import Counter,defaultdict,deque\\nfrom heapq import heappop,heappush,heapify\\nimport sys,bisect,math,itertools,fractions,pprint\\nsys.setrecursionlimit(10**8)\\nmod = 10**9+7\\nmod2 = 998244353\\nINF = float('inf')\\ndef inp(): return int(sys.stdin.readline())\\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\\n\\nn = inp()\\na = list(map(float,input().split()))\\ndp = [[0] * (n+5) for i in range(n+5)]\\ndp[0][0] = 1\\nfor i in range(n):\\n    for j in range(n+1):\\n        if j == 0:\\n            dp[i+1][j] = dp[i][j] * (1-a[i])\\n            continue\\n        dp[i+1][j] = dp[i][j-1] * a[i] + dp[i][j] * (1-a[i])\\nprint(sum(dp[n][n//2+1:]))\\n# pprint.pprint(dp)", "target": "437", "substitutes": {"mod": ["mode", "dig", "MOD", "exp", "mult", "lock", "round", " Mod", "scale", "comp", "module", "bug", "sec", "lib", "fun", "depth", "util", "mods", "complex", "debug", "imp", "grade", "step", "mix", "progress", "ctr", "loop", "Mod"], "mod2": [" mod4", "MOD2", "Mod1", "mod3", "Mod4", " mod1", "MOD1", "mod1", "Mod3", " mod3", "MOD3", "Mod2", "MOD4", "mod4"], "INF": ["INV", "PINV", "PINFF", "INFF", "INf", " INf", "ANV", "ANf", "PINF", " INV", "ANF", "PINf", " INFF", "ANFF"], "n": ["s", "k", "non", "p", "c", "g", "y", "o", "nc", "num", "r", "un", "en", "ne", "nu", "z", "x", "nan", "sn", "w", "node", "l", "u", "d", "nt", "cn", "f", "m", "network", "none", "ns", "no", "length", "v", "b", "len", "t", "N", "pn", "e", "all", "nb", "an", "nor"], "i": ["ji", "s", "k", "ui", "ie", "int", "ei", "qi", "p", "init", "ai", "ic", "c", "o", "y", "ini", "ix", "iu", "api", "ti", "mini", "z", "si", "yi", "x", "ind", "I", "it", "l", "u", "pi", "d", "q", "io", "f", "xi", "di", "ni", "ci", "ip", "ij", "b", "v", "e", "info", "zi", "id", "li", "ii", "inner", "ik", "bi"], "a": ["aa", "s", "va", "p", "na", "ai", "c", "y", "o", "r", "ap", "api", "P", "ba", "ab", "au", "array", "z", "da", "x", "A", "w", "u", "d", "sa", "f", "m", "ac", "ca", "area", "am", "aj", "data", "ae", "alpha", "b", "v", "e", "all", "an", "ad", "ip"], "dp": ["lp", "amp", "dd", "sh", "wp", "p", "dist", "ps", "pb", "mult", "dat", "tp", "pm", "pos", "cp", "gp", "ph", "P", "dep", "dB", "sp", "mp", "da", "pa", "vp", "dm", "d", "pi", "do", "DP", "dl", "dt", "point", "pp", "deb", "dr", "port", "ga", "dc", "address", "df", "pkg", "di", "ep", "data", "db", "alpha", "wd", "dim", "b", "np", "pair", "e", "pd", "ds", "pg", "direction", "ad", "ip"], "j": ["ji", "k", "ui", "ie", "ja", "p", "ai", " dj", "jo", "c", "dj", "y", "jj", "num", "axis", "o", "ix", "jl", "z", "je", "ch", "jet", "x", "ind", "adj", "l", "u", "uj", "d", "q", "job", "jp", "m", "jc", "note", "xi", "aj", "ij", "J", "bj", "b", " ii", "v", "e", "key", "li", "ii", " l"]}}
{"code": "s = raw_input()\\n\\nSt1, St2 = [], []\\nsumv = 0\\n\\nfor i in range(len(s)):\\n    if s[i] == '\\\\':\\n        St1.append(i)\\n    elif s[i] == '/' and len(St1) > 0:\\n        j = St1.pop()\\n        a = i-j\\n        sumv += a\\n        while len(St2) > 0 and St2[-1][0] > j:\\n            a += St2.pop()[1]\\n\\n        St2.append([j, a])\\n\\nSt2.insert(0, [0, len(St2)])\\n\\nprint sumv\\nprint ' '.join(map(lambda x: str(x[1]), St2))", "target": "394", "substitutes": {"s": ["ss", "strings", "south", "acks", "qs", "ins", "p", "states", "ps", "xs", "c", "g", "ats", "sets", "o", "r", "h", "ks", "aces", "si", "es", "als", "S", "w", "cells", "sb", "tests", "args", "sites", "l", "parts", "lines", "d", "less", "services", "ses", "ches", "f", "cs", "m", "ssl", "sections", "ns", "ws", "os", "abs", "gs", "b", "string", "ts", "ings", "e", "ls", "ips", "ds", "n"], "St1": ["st4", "STone", "StrOne", "ST1", " Stone", "StrFirst", "Str2", "Str3", "StOne", "st0", "Form2", "FormFirst", "St0", "ST2", " St3", "Strone", "Stone", "stone", "stOne", "st2", "Formone", "Str4", "Form1", "St4", " St0", "St3", " St4", "STFirst", "Str0", "st3", "Str1", " StOne", "StFirst", "st1"], "St2": ["st4", "Strb", "Est2", "ST1", "ST8", "ST7", "Str2", "Str3", "Str7", "St7", "st8", " St182", "Est1", "St182", " StTwo", "st0", "st182", "st6", "St0", "st7", "Str6", "StTwo", " St3", "St6", "ST2", "ST6", "ST0", "st2", " St8", "Str4", " St6", "ST3", "Stb", "STTwo", "St4", " St0", "stb", "St3", " St4", " Stb", "Est8", "Str0", "St8", "st3", "ST182", "Str1", "StrTwo", "stTwo", "EstTwo", "st1"], "sumv": ["gamb", "meanf", " Sumf", "SumV", "sumvv", " sumvv", "Sumvv", "gamv", "Sumv", "sumf", " sumf", " Sumvv", "gramv", " sumb", "meanj", "gramV", "gramf", "gamj", " Sumv", "sumb", "meanb", "Sumf", "meanv", " sumV", "gamf", "sumj", "sumV", " sumj"], "i": ["ji", "k", "ui", "ie", "int", "qi", "mi", "p", "ai", "c", "y", "ix", "ini", "iu", "z", "si", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "f", "m", "xi", "ni", "ci", "ij", "alpha", "v", "b", "e", "t", "id", "li", "ii", "n", "bi", "ti"], "j": ["ji", "k", "ie", "ja", "p", "g", "c", "jo", "y", "o", "jj", "r", "dj", "el", "jl", "z", "je", "ch", "pa", "x", "ind", "start", "ia", "adj", "obj", "l", "d", "js", "jp", "f", "m", "sa", "area", "br", "aj", "ij", "J", "v", "b", "e", "n"], "a": ["aa", "wa", "va", "ma", "ja", "p", "ai", "c", "fa", "y", "o", "api", "ba", "ab", "z", "au", "da", "x", "pa", "A", "ah", "af", "ia", "ak", "aaa", "ca", "sa", "ac", "ga", "area", "aj", "am", "ae", "oa", "alpha", "b", "ea", "e", "an", "ad", "n"]}}
{"code": "n, m, d = [int(_) for _ in input().split()]\\n\\nif d == 0:\\n  print((m - 1) / n)\\nelse:\\n  print((m - 1) * 2 * (n - d) / (n * n))", "target": "572", "substitutes": {"n": [" N", "s", "k", "a", "p", "g", "c", "i", "o", "y", "r", "num", "number", "net", "h", "ne", "nu", "z", "fn", "x", "w", "l", "u", "nn", "q", "nt", "f", "ln", "j", "network", "ns", "M", "v", "b", "t", "N", "e", "nb"], "m": ["min", "s", "k", "mn", "p", "g", "c", "nm", "i", "y", "o", "r", "num", "h", "md", "mean", "z", "x", "dm", "mu", "w", "cm", "l", "machine", "u", "f", "j", "M", "v", "b", "mod", "e", "N"], "d": ["dd", "dy", "fd", "p", "nd", "g", "c", "i", "o", "y", "rd", "sd", "md", "D", "z", "da", "x", "diff", "dm", "l", "u", "do", "f", "dt", "j", "dc", "cd", "di", "b", "v", "ld", "e", "ds", "dn", "ad"], "_": ["km", "name", "k", "line", "__", "p", "ms", "o", "num", "md", " __", "D", "nom", "dot", "dm", "node", "adj", "u", "out", "ln", "j", "f", "self", "len", "v", "all", "mm", "id", "word", "lin"]}}
{"code": "X,Y = [int(i) for i in input().split()]\\nif X%Y!=0:\\n  print(X)\\nelse:\\n  print(-1)", "target": "396", "substitutes": {"X": ["F", "YY", "E", "Length", "ID", "L", "V", "H", "DX", "Q", "XX", "Check", "Width", "XP", "K", "MX", "XT", "ZX", "O", "P", "T", "C", "Int", "D", "IP", "x", "XXX", "IX", "I", "TX", "Z", "Code", "INT", "XY", "Value", "U", "R", "J", "XL", "N", "G", "Index", "VALUE"], "Y": ["YY", "E", "V", "Q", "YC", "y", " y", "YA", "Cy", "B", "C", "P", "D", "T", "IP", "YR", "x", "S", "cy", "A", "W", "NY", "I", "TY", "MY", "Z", "XY", "Py", "yy", "U", "AY", "M", "J", "N", "G", "Col", "HY"], "i": ["gi", "ji", "k", "a", "ei", "int", "qi", "p", "phi", "c", " I", "y", "ini", "ix", "iu", "z", "si", "x", "ind", "I", "idi", "u", "pi", "d", "q", "j", "f", "io", "m", "xi", "ri", "ij", "v", "key", " ii", "e", "t", "id", "li", "ii", "bit", "n", "ti"]}}
{"code": "N=int(input())\\nimport sys\\nsys.setrecursionlimit(10**6)\\nT=[[] for _ in range(N)]\\nfor i in range(N-1):\\n    a,b,c=map(int, input().split())\\n    T[a-1].append((b-1,c))\\n    T[b-1].append((a-1,c))\\n\\nQ,K=map(int, input().split())\\nD=[-1]*N\\nD[K-1]=0\\ndef dfs(start, nowd):\\n    to=T[start]\\n    for t in to:\\n        next_node,c=t\\n        if D[next_node]!=-1:\\n            continue\\n        nextd=nowd+c\\n        D[next_node]=nextd\\n        dfs(next_node, nextd)\\ndfs(K-1,0)\\n# print(D)\\nfor i in range(Q):\\n    x,y=map(int, input().split())\\n    print(D[x-1]+D[y-1])\\n", "target": "360", "substitutes": {"N": ["F", "E", "L", "NO", "V", "NN", "H", "X", "Y", "Size", "NC", "Num", "NS", "NE", "Na", "NM", "O", "P", "C", "B", "Len", "NP", "Ne", "S", "A", "W", "I", "No", "NT", "Ni", "Z", "Ns", "ND", "R", "M", "J", " n", "NA", "n"], "T": ["F", "AT", "CT", "TP", "E", "L", "V", "LT", "H", "X", "Y", "Text", "TS", "TN", "TH", "TV", "Tu", "KT", "O", "P", "B", "C", "TG", "S", "A", "DT", "W", "I", "ET", "UT", "NT", "TE", "TM", "Z", "TT", "TC", "U", "R", "M", "TF", "WT", "G", "GT"], "_": ["num", " x", " time", "x", "d", "q", "f", " int", "all"], "i": ["k", "int", " it", "p", "ai", " I", " e", " ip", "iq", "ind", "I", "it", "d", "q", "j", " j", "ci", "ip", "id", "ti"], "a": ["aa", "k", "s", "int", "va", "p", "ai", "aw", "y", "r", "ba", "ab", "z", "da", "x", "A", "ar", "af", "w", "ak", "l", "u", "d", "q", "f", "ca", "sa", "ac", "aj", "am", "ae", "alpha", "v", "e", "an", "ad", "n"], "b": ["aa", "s", "k", "be", "ib", "p", "bs", "g", "y", "r", "h", "o", "B", "ba", "ab", "z", "x", "w", "sb", "l", "bb", "d", "bf", "u", "rb", "q", "f", "bd", "j", "db", "v", "e", "bc", "nb", "bi", "ad", "n"], "c": ["s", "k", "end", "cycle", "toc", "p", "init", "g", "center", "y", "o", "r", "h", "chain", "C", "lc", "z", "ce", "x", "cy", "cu", "w", "cb", "l", "u", "d", "cn", "max", "q", "f", "ca", "cs", "ac", "dc", "ci", "v", "cf", "e", "cc", "n"], "Q": ["F", "E", "L", "V", "H", "X", "p", "Y", "Delta", "O", "P", "B", "C", "S", "A", "W", " q", "I", "q", "Z", "U", "R", "J", "M", "G"], "K": ["F", "k", "E", "KK", "L", "V", "H", "X", "Y", "IK", "O", " k", "P", "ks", "C", "Sk", "SK", "B", "KS", "S", "A", "W", "I", "q", "Z", "UK", "PK", "U", "R", "J", "M", "G", "KA", "Ka", "Ku", "Key"], "D": ["F", "E", " M", "L", "DA", "DS", "V", "X", "Y", "DC", "DM", "DO", "DB", "O", "P", "C", "B", "MD", "DD", " C", "PD", "LD", "DT", "S", "A", "I", "Ds", "d", "Do", " DO", "Z", "DF", " DD", "U", "R", "M", " Do", "DL", " DM", "G", " P", " d"], "start": ["s", "k", "end", "Start", "p", "use", "x", "st", "next", "w", "get", "l", "u", "d", "q", "f", "stop", "back", "data", "v", "e", "starting", "add", "id", "step", "source", "part", "offset", "n"], "nowd": [" nowds", "waite", "waitb", "nextl", " NOWb", "nowb", "nowds", " nowe", " NOWe", "NOWd", "waitd", "NOWf", " nowl", "nowf", "nexte", "waitds", " nowb", " nowf", " NOWd", "nextf", "nowl", "NOWl", "NOWe", " NOWds", "nowe"], "to": ["new", "Next", "until", "toc", "Start", "top", "p", "go", "To", "termin", "state", "bound", "DC", "target", "o", "this", "TO", "C", "node", "current", "l", "do", "d", "max", "ta", "f", "m", "point", "stop", "dc", "co", "no", "data", "between", "v", "ada", "source", "next", "n"], "t": ["s", "k", "int", "tail", "p", "g", "tim", "target", "o", "y", "h", "cont", "this", "z", "x", "st", "w", "it", "d", "nt", "q", "ta", "out", "f", "dt", "j", "m", "stop", "ts", "v", "e", "tc", "n"], "next_node": ["next_edge", " next_route", "next__node", " next_scene", "next_route", "next_scene", "next_Node", "next_dest", " next_edge", "next__day", "next_day", " next_dest", "next__edge", " next_Node", "nextdingedge", "nextdingnode", " next_day", "nextdingroute", "nextdingscene"], "nextd": ["mainnd", "lastD", "nextnode", "mainD", "mainad", " nextf", "newd", "newn", "newf", "nextD", " nextad", "newe", " nextnode", "newc", "lastad", "nowc", "lastd", "nowf", "nexte", "nown", "lastnd", " nextc", "nextf", "maind", "nextn", " nextnd", " nextn", "newnode", "nextad", "nownode", " nextD", " nexte", "nextc", "nextnd", "nowe"]}}
{"code": "import numpy as np\\n\\nN, K, Q = map(int, input().split())\\nA = np.zeros(N, dtype=int)\\n\\nfor i in range(Q):\\n    A[int(input()) - 1] += 1\\n\\nfor ai in A:\\n    print(['No', 'Yes'][int(ai) + K - Q > 0])", "target": "336", "substitutes": {"N": ["F", "E", "L", "V", "NN", "H", "X", "Y", "Size", "Num", "NS", "Na", "NM", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "W", "I", "No", "NT", "Ni", "Z", "Ns", "U", "R", "M", " n", "G", "KN", "NA", "n"], "K": ["F", "k", "KK", "L", "V", "H", "X", "Y", "O", "P", "T", "C", "B", "D", "SK", "KS", "S", "W", "q", "Z", "KR", "PK", "U", "J", "M", "G", "KN", "Ku", "n"], "Q": ["QU", "F", "Quality", "Length", "E", "L", "V", "H", "X", "Y", "Query", "O", "P", "T", "C", "B", "D", "IQ", "MQ", "S", "W", "IX", "I", "q", "Z", "U", "M", "J", "Qu", "QB", "G"], "A": ["F", "a", "At", "X", "AI", "Y", "AP", "LA", "AST", "FA", "AM", "AB", "SA", "P", "B", "T", "C", "As", "D", "Ar", "AC", "API", "array", "AA", "Args", "Alpha", "S", "W", "I", "Ab", "Array", "CA", "U", "AF", "Input", "alpha", "M", "mA", "Ast", "G", "Am", "HA", "NA", "An", "Answer", "App"], "i": ["gi", "ih", " bi", "a", "qi", "p", "c", " I", "y", "iu", "z", "au", "ind", "I", "it", "j", "ac", "ait", "ni", "ci", "ip", "iy", "id", "li", "ii", "bi", "ti"], "int": ["float", "min", "text", "digit", "const", "str", "ext", "Integer", "inter", "ints", "number", "num", "pos", "slice", "pt", "iter", "Int", "long", "array", "index", "x", "oct", "ind", "inc", "uint", "integer", "start", "I", "max", "nt", "vert", "object", "sort", "point", "char", "short", "INT", "set", "list", "len", "string", "dec", "count", "double", "range"], "input": ["error", "raw", "text", "request", "argument", "element", "load", "target", "result", "empty", "temp", "config", "hidden", "array", "expression", "diff", "url", "image", "valid", "save", "exec", "current", "out", "eval", "json", "pull", "output", "data", "Input", "select", "space", "filter", "parse", "source", "param", "form", "ref", "radio"], "ai": ["aa", " exam", " bi", "a", "iri", " info", "ei", "chi", " da", "AI", "mi", "qi", " ca", " ac", " answer", " ap", " ba", "aii", "ini", " ga", " ti", "si", " fu", "eni", "ais", " au", " pi", " mi", " ar", " AI", "pi", "ati", "ari", "ki", "adi", "agi", " si", "II", "xi", " li", "di", "ni", "ci", " aid", "ae", " di", " acc", " ii", " bias", " pa", " mini", "asi", " ad", "ii", "li", "bi", "ti"]}}
{"code": "# F - Sugoroku\\nimport sys\\nsys.setrecursionlimit(10 ** 9)\\n\\nn,m = map(int,input().split())\\ns = input()\\n\\n# r[i]:s\u3092\u5f8c\u308d\u304b\u3089\u898b\u3066\u3044\u3063\u3066\u3001i\u304b\u3089\u6700\u5c0f\u4f55\u624b\u3067\u30b4\u30fc\u30eb\u3059\u308b\u304b\u3092\u6c42\u3081\u308b\u3002\\nINF = float('inf')\\nr = [INF for _ in range(n+1)]\\nr[n] = 0\\nidx = n\\nfor i in range(n-1,-1,-1):\\n  while(idx-i > m or r[idx] == INF):\\n    idx -= 1\\n  if idx <= i:\\n    print(-1)\\n    exit()\\n  if s[i] == '0':\\n    r[i] = r[idx]+1\\n    p = r[i]\\n#print(r)\\n\\n# r\u3092\u5148\u982d\u304b\u3089\u898b\u3066\u3044\u304d\u3001r\u306e\u6570\u5b57\u304c\u5909\u308f\u308b\u76f4\u524d\u307e\u3067\u9032\u3080\u3088\u3046\u306b\u3059\u308c\u3070\\n# \u6700\u77ed\u3067\u8f9e\u66f8\u9806\u6700\u5c0f\u306a\u30eb\u30fc\u30c8\u304c\u6c42\u307e\u308b\u3002\\nans = []\\nc = 0\\nfor i in range(n+1):\\n  if r[i] != INF and r[i] != p:\\n    p = r[i]\\n    ans.append(c)\\n    c = 1\\n  else:\\n    c += 1\\nprint(*ans)\\n\\n# mnr = [m for _ in range(n+1)]\\n# mnl = n+1\\n# def dfs(x,c):\\n#   global mnr,mnl\\n#   #print(x,c)\\n#   if x == n:\\n#     #print(r)\\n#     if len(r) < mnl or (len(r) == mnl and r < mnr):\\n#       mnr = r[:]\\n#       mnl = len(r)\\n#     return True\\n#   if c >= mnl or x > n or s[x] == '1':\\n#     return False\\n#   for i in range(m,0,-1):\\n#     r.append(i)\\n#     dfs(x+i,c+1)\\n#     r.pop()\\n# dfs(0,0)\\n# if mnl < n+1:\\n#   print(*mnr)\\n# else:\\n#   print(-1)", "target": "677", "substitutes": {}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nN,A,B = map(int,input().split())\\nanswer = 'Alice' if (B-A)%2==0 else 'Borys'\\nprint(answer)", "target": "507", "substitutes": {"input": ["error", "IN", "raw", "a", " output", "value", "int", "str", "PUT", "request", "sample", "argument", " number", "element", "load", "number", "format", "num", "comment", "switch", "config", "array", "index", " python", "exec", "I", "accept", "out", " Input", "eval", "option", "pull", "output", "parent", "list", "data", "Input", "bin", "type", "help", "select", "view", "echo", "keep", "submit", "source", "param", "feed", "n"], "N": ["F", "L", "V", "Q", "X", "Y", " O", "Num", " number", " I", "O", "P", "C", "D", " C", "S", "I", "Z", "U", "R", "M", "NB", " n", "NA", " D", " NI", "n"], "A": ["F", "AD", "E", "a", "L", "All", "Q", "X", "Y", "LA", "K", "AB", "O", "SA", "P", "C", "T", "As", "mA", "D", "AC", "Ar", "AA", "Alpha", "S", "W", "I", "PA", "CA", "U", "AF", "M", "G", "NA", "An", "n"], "B": ["F", "E", "L", "V", "Q", "Y", "Bi", "BA", "AB", "O", "P", "C", "T", "D", "BB", "BC", "AA", "BI", "S", "TB", "BD", "I", "Ab", "BE", "OB", "WB", "Beta", "U", "GB", "M", "b", "NB", "G", "BF", "Bs", "n"], "answer": ["name", "text", "value", "ze", "token", "code", " answers", "issue", "reply", "feed", "result", "comment", " answered", " answering", "knowledge", "une", "say", "swers", "array", "edge", "response", "now", "ask", "ace", "object", "update", "status", "option", "address", "output", "question", "answered", "string", " Answer", "ell", "message", "grade", "word", "next", "Answer"]}}
{"code": "from sys import stdin, setrecursionlimit\\n\\n\\ndef main():\\n    input = stdin.buffer.readline\\n    s = list(input()[:-1].decode())\\n    n = len(s)\\n    l = r = -1\\n    ans = 0\\n    for i in range(1, n):\\n        if s[i] == s[i - 1]:\\n            if l == -1:\\n                l = i\\n            else:\\n                r = i\\n        if r != -1:\\n            ans += r - l\\n            r = l = -1\\n    if l != -1:\\n        ans += n - l\\n    print(min(ans, n - ans))\\n\\n\\nif __name__ == \"__main__\":\\n    setrecursionlimit(10000)\\n    main()\\n", "target": "495", "substitutes": {"input": ["raw", "text", "line", "table", "open", "reader", "request", "p", "stream", "c", "socket", "target", "o", "result", "comment", "iter", "connect", "temp", "server", "file", "w", "current", "u", "accept", "buffer", "out", "f", "pull", "output", "list", "data", "Input", "bin", "select", "include", "print", "keep", "filter", "source", "param", "feed", "ins"], "s": ["ss", " lines", "strings", "a", "qs", "ins", "p", " logs", "g", "c", "rows", "ps", "xs", "sets", "o", " inputs", "ks", " sections", "si", "es", "S", "w", "sb", "lines", "ses", "d", "services", "items", "parts", "f", "m", "sync", " S", "ns", " ls", "os", "gs", "b", "ings", "e", "ls", "t", "ds", " streams", " sequences"], "n": ["min", "k", "L", "p", "c", "o", "nc", "y", "en", "number", "net", "h", "rn", "left", "ne", "z", "x", "sn", "w", "u", "d", "pi", "nn", "nt", "f", "ln", "j", "m", "ns", "ni", "nl", "nr", "len", "v", "b", "t", "N", "e", "pn", "li", "nb", "nor"], "l": ["lp", "ol", "a", "L", "line", "ur", "p", "c", "y", "sl", "o", "el", "lr", "ml", "left", "la", "lo", "lc", "long", "kl", "z", "ar", "u", "d", "pl", "ll", "ln", "f", "j", "dl", "m", "rl", "list", "nl", "length", "fl", "lu", "v", "len", "b", "lb", "t", "ls", "e", "il", "li", "ul"], "r": ["yr", "rr", "k", "a", " R", "ur", "p", "g", "c", "h", "o", "pr", "lr", "ro", "z", "x", "ar", "w", "u", "d", "rb", "f", "right", "sr", "range", "m", "rl", "ri", "R", "nr", "b", "v", "e", "t", "fr", "ru", "er", "rs", "an"], "ans": ["a", "L", "int", "lan", "les", "nas", "ins", "ras", "cas", "p", "na", "arr", "span", "ats", "ions", "auth", "anas", "AN", "ANS", "rules", "la", "vs", "names", "ann", "ani", "anc", "ana", "es", "can", "x", "ar", "sn", "ars", "lang", "runs", "args", "lines", "aned", "nn", "ons", "aus", "ln", "cs", "m", "ants", "rl", "ns", "ran", "os", "reads", "len", "ls", "cons", "ru", "rs", "an"], "i": ["k", "ui", "a", "line", "int", "p", "ai", "c", "o", "y", "ini", "iu", "lc", "ti", "z", "si", "index", "x", "ind", "start", "I", "u", "d", "pi", "j", "f", "m", "xi", "ni", "ci", "v", "b", "e", "t", "id", "li", "ii"]}}
{"code": "n,m =map(int,input().split())\\n \\nH=[]\\nH=list(map(int,input().split()))\\nC=[]\\nfor i in range(n):\\n    C.append(1)\\n \\nfor i in range(m):\\n    a,b = map(int,input().split())\\n    if H[a-1]==H[b-1] :\\n        C[a-1] = 0\\n        C[b-1] = 0\\n    elif H[a-1]<H[b-1] :\\n        C[a-1] = 0\\n    else:\\n        C[b-1] = 0\\n \\nprint( C.count(1))      \\n", "target": "291", "substitutes": {"n": ["name", "k", "s", "p", "c", "h", "number", "o", "num", "r", "y", "size", "z", "x", "w", "l", "u", "d", "q", "f", "j", "ns", "v", "t", "N", "count", "e", "nb"], "m": ["s", "k", "mn", "p", "ms", "g", "c", "h", "y", "o", "r", "md", "z", "x", "w", "l", "u", "d", "f", "j", "sm", "man", "M", "v", "e", "mm", "mc", "wm", "range"], "H": ["F", "Hi", " h", "E", "L", "V", "RH", "Q", "X", "Y", "c", "K", "h", "SH", "Ha", "HC", "O", "P", "T", "B", "D", "NH", "S", "A", "W", "EH", "I", "HK", "Ch", "GH", "Z", "HH", "HM", "CL", "HI", "Cl", "U", "R", "M", "CC", "N", "G", "CR", "CH", "Count"], "C": ["F", "CV", "E", "Cs", "L", "V", "CI", "Cu", "Q", "X", "CU", "Y", "Size", "c", "DC", "K", "CNN", "P", "T", "B", "D", "EC", "Cache", "WC", "S", "A", "GC", "W", "CM", "I", "CO", "Ch", "VC", "Sc", "Z", "Code", "CL", "CA", "Cl", "CCC", "U", "R", "JC", "M", "CC", "Custom", "N", "Cond", "G", "CW", "CR", "Co", "Count", "Control"], "i": ["k", "int", "qi", "p", "c", "h", "r", "o", "num", "iu", "on", "index", "x", "ind", "I", "it", "l", "u", "d", "pi", "f", "io", "j", " j", "xi", "ni", "ci", "e", "li", "ii", "ti"], "a": ["aa", "s", "auto", "int", "va", "p", "ai", "c", "aw", "h", "y", "o", "la", "ba", "ab", "z", "da", "x", "pa", "A", "af", "w", "u", "d", "ca", "f", "sa", "ac", "ga", "am", "aj", "ae", "alpha", "e", "part", "an", "ad"], "b": ["bad", "s", "be", "aa", "k", "ib", "part", "p", "bs", "g", "c", "y", "h", "r", "o", "wb", "B", "ba", "ab", "z", "x", "w", "sb", "body", "l", "bh", "u", "d", "rb", "bb", "f", "j", "bd", "ga", "ac", "br", "v", "base", "e", "an", "bc", "nb", "lb", "bi", "ad"]}}
{"code": "import sys\\nN = int(input())\\nd = [int(input()) for i in range(N)]\\n\\ncnt = 0\\nbutton = d[0]\\nwhile button != 2:\\n    button = d[button-1]\\n    cnt += 1\\n\\n    if cnt > 100000:\\n        print(-1)\\n        sys.exit(0)\\n\\nprint(cnt+1)", "target": "573", "substitutes": {"N": ["F", "Number", "L", "V", "NN", "Q", "X", "Y", "Size", " number", "Num", "NS", "K", "number", "Button", "O", "P", "T", "C", "B", "D", " C", "Ne", "S", "A", " cycle", "SIZE", "I", "NT", "Ni", "Z", "Ns", "R", "M", "SN", " n", " D", "NA", "n"], "d": ["s", "did", "dd", "dh", "p", "g", "c", "dat", "dict", "D", "z", "x", "diff", "dm", "ind", "w", "start", "draw", "l", "u", "do", "f", "dt", "bd", "j", "m", "dl", "input", "data", "b", "v", "ld", "t", "e", "dp", "ds", " D", "ad", "n"], "i": ["gi", "int", "ai", "c", " I", "r", "num", "ix", "pos", "iu", "z", "index", "x", "ind", "I", "u", "io", "f", "j", "ij", "il", "id", "li", "ii", "bit", "ip"], "cnt": ["cNT", " cpt", "cpt", "acount", "CNT", "cnc", "Cpt", " cNT", "cct", "lcnc", " cnc", "acnt", "Cnt", "xcount", "lcotton", "Cnc", "acNT", "acpt", "xcct", "Cotton", "xcotton", " count", "cotton", "acnc", "lcnt", "lcct", "count", "Cct", "lcNT", "xcnt", "Count", "lcount"], "button": ["field", "text", "date", "ctrl", "span", "channel", "qi", "event", "p", "c", "element", "click", "number", "num", "Button", "left", "delete", "index", "next", "current", "bug", "focus", "label", "j", " buttons", "option", "stop", "pull", "input", "flag", "bot", "check", "type", "key", "btn", "timeout", "select", "bc", "count", "atom", "down", "submit", "li", "nb", "off"]}}
{"code": "s = input()\\n\\nif s == 'SUN':\\n    print(int(7))\\nelif s == 'MON':\\n    print(int(6))\\nelif s == 'TUE':\\n    print(int(5))\\nelif s == 'WED':\\n    print(int(4))\\nelif s == 'THU':\\n    print(int(3))\\nelif s == 'FRI':\\n    print(int(2))\\nelif s == 'SAT':\\n    print(int(1))\\nelse:\\n    print('\u66dc\u65e5\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u307e\u305b\u3093')\\n", "target": "471", "substitutes": {"s": ["ss", "hs", "uses", "spec", "qs", "ins", "words", "states", "ps", "p", "g", "c", "sym", "i", "ats", "ours", "sets", "sts", "o", "times", "conf", "fs", "es", "als", "S", "sb", "tests", " signs", "parts", "services", "erences", "ses", "ches", "lines", "sg", "ains", "l", "js", "u", "rows", "cs", "m", "sync", "ments", "ssl", "ns", "ws", "us", "os", "abs", "gs", "ts", "b", "e", "ls", "t", "ds", "its", "ops", "comments", "n"]}}
{"code": "N = int(input())\\nprint(min([sum(map(int,list(str(A))))+sum(map(int,list(str(N-A)))) for A in range(1,N)]))", "target": "4", "substitutes": {"N": ["F", "E", "Number", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "NS", "Num", "K", "number", "Na", "NM", "O", "P", "B", "C", "T", "D", "NP", "Len", "Ne", "S", "W", "I", "NT", "Z", "Ns", "R", "M", "J", "NB", " n", "G", "n"], "A": ["F", "E", "a", "Number", "At", "Any", "L", "All", "Entry", "H", "X", "Y", "ai", "Num", "LA", "K", "Na", "P", "B", "C", "T", "As", "D", "Ar", "API", "AA", "Sa", "Alpha", "S", "W", "I", "Z", "Offset", "Array", "CA", "U", "Part", "alpha", "M", "J", " a", "G", "Abs", "Am", "NA", "An"]}}
{"code": "from sys import stdin\\ndef main():\\n    #\u5165\u529b\\n    readline=stdin.readline\\n    n,m=map(int,readline().split())\\n    d=make_divisors(m)\\n    l=m//n\\n    for v in d:\\n        if v<=l:\\n            print(v)\\n            break\\n\\ndef make_divisors(n):\\n    if n==1:\\n        divisors=[1]\\n        return divisors\\n    else:\\n        divisors=[]\\n        for i in range(1,n):\\n            if i*i>n:\\n                break\\n            if n%i==0:\\n                divisors.append(i)\\n                if i!=n//i:\\n                    divisors.append(n//i)\\n\\n        divisors.sort(reverse=True)\\n        return divisors\\n\\nif __name__==\"__main__\":\\n    main()", "target": "163", "substitutes": {}}
{"code": "def transformate(s, command):\\n    command, *op = command.split()\\n\\n    op[0] = int(op[0])\\n    op[1] = int(op[1])\\n\\n    if command == 'replace':\\n        return s[0:op[0]] + op[2] + s[op[1]+1:]\\n    elif command == 'reverse':\\n        return s[0:op[0]] + s[op[0]:op[1]+1][::-1] + s[op[1]+1:]\\n    elif command == 'print':\\n        print(s[op[0]:op[1]+1])\\n        return s\\n\\nif __name__ == '__main__':\\n    s = input()\\n    for _ in range(int(input())):\\n        s = transformate(s, input())\\n\\n", "target": "110", "substitutes": {"s": ["ss", "hs", "strings", "sets", "y", "en", "ks", "fs", "si", "ands", "x", "events", "sb", "l", "parts", "js", "f", "ments", "abs", "gs", "b", "ings", "space", "session", "ops", "se", "ies", "comments", "ins", "new", "settings", "ans", "states", "xs", "i", "aws", "u", "sg", "cs", "sync", "os", "v", "string", "e", "ips", "source", "sq", "ys", "spec", "request", "p", "ps", "ions", "r", "posts", "es", "S", "sites", "lines", "services", "ses", "d", "m", "ns", "self", "input", "ts", "t", "ls", "end", "a", "south", "qs", "words", "ed", "g", "c", "sym", "ists", "o", "sl", "results", "speech", "times", "als", "outs", "w", "tests", "args", "ches", "ssl", "ws", "opens", "forms", "ds", "its", "sv", "n"], "command": ["name", "mode", "text", "description", "shell", "password", "domain", "automatic", "method", "argument", "p", "power", "service", "process", "resource", "sudo", "o", "execute", "comment", "which", "md", "game", "pattern", "component", "directory", "image", "module", "history", "clear", "action", "exec", "connection", "attribute", "root", "media", "template", "cmd", "comm", "cli", "operation", "menu", "option", "script", "parser", "sequence", "input", "parent", "document", "system", "program", "type", "string", "key", "path", "Command", "package", "custom", "help", "message", "move", "prefix", "source", "direction", "ip"], "op": ["amp", "loc", "comment", "cp", "http", "module", "current", "operator", "cat", "pull", "data", "type", "ops", "part", "loop", "error", "at", "ic", "pos", "ap", "oc", "api", "split", "dot", "opp", "oop", "cop", "iop", "page", "pp", "operation", "key", "atom", "step", "id", "source", "ip", "p", "mop", "sp", "oct", "oper", "route", "it", "upp", "cmd", "point", "input", "set", "parent", "OP", "word", "move", "block", "off", "pop", "top", "opt", "opus", "hip", "post", "o", "ipop", "app", "game", "om", "Op", "patch", "ok", "cap", "hop", "one", "object", "copy", "style", "option", "up", "output"], "_": ["k", "__", "non", " time", " the"]}}
{"code": "S = input()\\nif S[0]=='A' and (S[2:len(S)-1].count('C')==1) and S[1:2].islower() and S[len(S)-1:].islower():\\n  print('AC')\\nelse:\\n  print('WA')", "target": "695", "substitutes": {"S": ["F", "s", "E", "L", "DS", "Sort", "V", "H", "Q", "X", "SE", "Sample", "NS", "K", "Test", "TS", "SH", "Source", "ST", "SI", "O", "OSS", "P", "T", "B", "C", "D", "SB", "SK", "Session", "A", "W", "SL", "Sl", "SS", "OS", "Single", "CS", "U", "R", "Part", "Input", "M", "GS", "SM", "SP", "Sign", "String", "N", "SN", "G", "SO", "SU", "Socket"]}}
{"code": "N  = int (input())\\nnums = list(map(int, input().split(\" \")))\\ncolors = [0,0,0]\\nans = 1\\nMOD = 10 ** 9 + 7\\nfor num in nums:\\n    cot = 0\\n    ind = -1\\n    for i in range(3):\\n        if colors[i] == num:\\n            ind = i\\n            cot += 1\\n    colors[ind] += 1\\n    ans *= cot\\n    ans %= MOD\\nprint(ans)", "target": "560", "substitutes": {"N": ["NO", "NN", " NUM", "Num", "UC", "NI", "K", "O", "UM", "Len", "B", "C", "S", "A", "I", "NT", "OS", "ons", "Ni", "Ns", "no", "M", "CN", " n", "G", "NUM", "n"], "nums": ["cumbers", "Nums", "rnums", "cals", "rnum", "Num", "Numbers", "NUM", "nUM", "cum", "rnals", "cums", " numbers", "numbers", " nUM", "nals", "rnumbers", "Nals", "cUM"], "colors": ["icolours", "coloror", "collores", " colions", "Colors", "colores", "colours", "icolores", "collors", "colorors", "Colions", "filors", "filours", " colores", "colori", " color", "filores", " collections", "icolor", "filori", "icolors", "Colores", "collections", "color", "Color", "colions", "icolions", "colorlections", "Collections", "colorores", "icolori", "collours", "collori"], "ans": ["ss", "ano", "s", "ents", "int", "cycles", "lan", "span", "cas", "amps", "eps", "les", "ai", "ms", "ions", "anon", "css", "activation", "pos", "AN", "CNN", "ANS", "mean", "ann", "ANT", "anc", "ani", " dd", "cus", "ays", "annot", "can", "x", " means", "ana", "ars", "anus", "cm", "aned", "cn", "ations", "nn", "ons", "ids", "ln", "sk", "cs", "ants", "ns", "cos", "os", "ci", "len", "mods", "mod", "ls", "cons", "olds", "ians", "ds", "ANN", "an", "sum", "every", "ins"], "MOD": ["ID", "OT", "NO", "CI", "XX", "LOC", "mult", "NI", "LIB", "UN", "OR", " mod", "AN", "CNN", "ANS", "C", "Mod", "COL", " Mod", "DIV", "CM", "OD", "MIN", "Mods", "I", "cm", "MODE", "OS", "MAX", "ARM", "R", "FD", "M", "CC", "mods", "mod", "ADD", "MM", "DAY", "IND", "CR", "NUM", "RM"], "num": ["min", "loc", "unit", "mn", "nm", "Num", "mon", "c", "mult", "umi", "number", "nc", "pos", "NUM", "nom", "anc", "div", "nu", "coord", "index", "x", "con", "cn", "nn", "nt", "max", "uni", "cat", "nam", "mat", "ni", "dim", "byn", "count", "col", "nb", "sum", "um", "n"], "cot": ["ott", "error", "loc", "const", "int", "at", "cor", "ai", "c", "mult", "cod", "sat", "ot", "nc", "iot", "cp", "tmp", "cz", "pt", "ann", "rot", "ch", "xxx", "unc", "nil", "tan", "cb", "bug", "cm", "chan", "cn", "nt", "dt", "cs", "cat", "ac", "core", "cd", "dc", "bot", "ni", "ci", "cf", "cr", "bc", "count", "pot", "nit", "col", "mot", "Col", "ctr", "sum", "every", "pc"], "ind": ["min", "loc", "end", "ie", "int", "span", "cor", "cond", "nd", "c", "ini", "pos", "sd", "ix", "pt", "ord", "ann", "z", "ch", "index", "x", "cand", "Ind", "start", "inc", "anch", "d", "nt", "nn", "sk", "inst", "cd", "ni", "ci", "find", "inn", "mod", "count", "add", "col", "IND", "val", "ii", "ad", "n"], "i": ["gi", "ih", "k", "ui", "a", "ie", "int", "p", "c", "oi", "o", "y", "ix", " c", "ini", "iu", "ti", "z", "si", "eni", "index", "x", "start", "I", "l", "u", "d", "uni", "j", "io", "f", "m", " j", "xi", "ori", "ni", "ci", "b", " ii", "col", "id", "li", "ii", "n", "bi", "ip"]}}
{"code": "import itertools\\nn = int(input())\\ns = [i for i in input()]\\ncnt_s, cnt_d = [0]*(n+1), [0]*(n+1)\\nfor i in range(n):\\n    if s[i] == \"#\":\\n        cnt_s[i+1] = 1\\n    else:\\n        cnt_d[i+1] = 1\\ncnt_s, cnt_d = list(itertools.accumulate(cnt_s)), list(itertools.accumulate(cnt_d))\\nans = 10**6\\ncnt_d_l = cnt_d[-1]\\nfor i in range(n+1):\\n    ans = min(ans, cnt_s[i] - cnt_s[0] + (cnt_d_l - cnt_d[i]))\\nprint(ans)", "target": "187", "substitutes": {"n": [" N", " p", "k", "non", "p", "na", " number", "c", " ni", "y", "o", "nc", "num", " c", "net", "nu", "ne", "z", " ne", "x", " fn", "sn", "w", "l", " np", "u", "d", "nt", "nn", "ln", "f", "network", "j", "m", " count", "ns", " init", " ns", "b", "v", "t", "N", " names", " sn", "e", " l", "nb", "an"], "s": ["ss", "strings", "a", "groups", "words", "p", "states", "ps", "g", "c", "xs", "sets", "h", "irs", "size", "si", "es", "S", "w", "args", "sites", "lines", "ses", "d", "sg", "f", "cs", "m", "sync", "ments", "ns", "ws", "ts", "b", "gs", "images", "e", "ls", "ds", "sum", "ins"], "i": ["gi", "ji", "k", "ui", "ei", "int", "ie", "chi", "qi", "mi", "p", "ai", "g", "c", "h", "r", "y", "ini", "ix", "o", "iu", "ti", "z", "mini", "si", "eni", "index", "x", "yi", "ind", "I", "it", "l", "u", "pi", "d", "io", "f", "j", "m", "xi", "input", "di", "ri", "hi", "ni", "ci", "v", "b", "e", "t", "info", "multi", "id", "li", "ii", "bi", "ip"], "cnt_s": ["cnt6l", "cnt6ds", "count_c", "cct_i", "cnt12services", "cnt6s", "cct_s", "cnt1d", "cct_g", "cct_ds", "cnt12l", "cct_e", "cnt12s", "cnt_services", "cnt1n", "count_s", "cnt1s", "cnt12d", "cct_a", "cnt_n", "cct_l", "count_l", "count_d", "cnt6d", "cct_n", "cnt_ds", "cnt_a", "cnt_i", "cnt_c", "cnt_g", "cct_d", "cnt_l", "cnt_e", "cnt1ds", "count_services"], "cnt_d": ["cnt_D", "cont_b", "cct_D", "cont6ad", "cct_s", "cnt1d", "cont_d", "cst_b", "cont_de", "cnt10ds", "cct_ds", "cnt6c", "cnt_f", "cnt_ad", "cont_sd", "cntPsd", "cct_w", "cnt_de", "cntNl", "cnt10w", "cnt1s", "cntNs", "cont_c", "cnt_sd", "cnt6ad", "cct_b", "cnt_b", "cct_l", "cntPc", "cntPd", "cnt6d", "cnt1b", "cct_f", "cnt_ds", "cont6sd", "cnt1l", "cont6c", "cnt_w", "cntPad", "cnt_c", "cst_s", "cct_d", "cntNd", "cnt_l", "cnt10D", "cnt6sd", "cntNf", "cnt1de", "cont_ad", "cnt10d", "cntNb", "cont_s", "cont6d", "cst_d"], "ans": ["ss", "a", "ents", "lan", "cas", "nas", "ras", "ends", "eps", "offs", "na", "amps", "ai", "gan", "xs", "ats", "atan", "ions", "anas", "AN", "atten", "ANS", "anes", "ks", "aces", "ann", "anse", "ani", "anc", "ays", "es", "ana", "can", "nan", "ars", "asses", "aned", "ons", "aus", "ens", "sk", "cs", "trans", "leans", "ants", "ns", "scan", "os", "san", "ls", "plan", "ds", "span", "an", "ins"], "cnt_d_l": ["cnt_s_el", "cnt_d_g", "cnt_d_el", "cnt_d2l", "cnt_s_d", "cnt_d2d", "cnt_s_g", "cnt_d2L", "cnt_d2g", "cnt_d_d", "cnt_s_L", "cnt_d_L", "cnt_s_l", "cnt_d_e", "cnt_s_e"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\ndef mapint(): return map(int, input().split())\\nsys.setrecursionlimit(10**9)\\n\\nN, K = mapint()\\nAs = list(mapint())\\nmod = 10**9+7\\n\\npos = []\\nneg = []\\nfor a in As:\\n    if a>=0:\\n        pos.append(a)\\n    else:\\n        neg.append(a)\\npos.sort(reverse=True)\\nneg.sort()\\nans = 1\\nlenp, lenn = len(pos), len(neg)\\nif (lenp+lenn)==K:\\n    for a in As:\\n        ans *= a\\n        ans %= mod\\n    print(ans)\\nelif lenn==0:\\n    for i in range(K):\\n        ans *= pos[i]\\n        ans %= mod\\n    print(ans)\\nelif lenp==0:\\n    if K%2==0:\\n        for i in range(K):\\n            ans *= neg[i]\\n            ans %= mod\\n        print(ans)\\n    else:\\n        neg = neg[::-1]\\n        for i in range(K):\\n            ans *= neg[i]\\n            ans %= mod\\n        print(ans)        \\nelse:\\n    p, n = 0, 0\\n    while p+n+1<K:\\n        if p+2<=lenp and n+2<=lenn:\\n            if pos[p]*pos[p+1]>=neg[n]*neg[n+1]:\\n                ans *= pos[p]\\n                p += 1\\n            else:\\n                ans *= neg[n]*neg[n+1]\\n                n += 2\\n        elif n+2<=lenn:\\n            ans *= neg[n]*neg[n+1]\\n            n += 2\\n        else:\\n            ans *= pos[p]\\n            p += 1\\n        ans %= mod\\n    if p+n<K:\\n        ans *= pos[p]\\n        ans %= mod\\n    print(ans)", "target": "606", "substitutes": {"N": ["F", "E", "L", "V", "H", "Q", "X", "Y", "AN", "O", "P", "T", "C", "B", "D", "S", "A", "W", "I", "Z", "U", "R", "M", "J", "G"], "K": ["F", "Power", "k", "E", "KK", "Ke", "T", "L", "V", "H", "Ak", "Q", "X", "Y", "IK", "dk", "KE", "AN", "O", "Sk", "P", "B", "C", "D", "SK", "Zero", " k", "ks", "NK", "KS", "Kent", "S", "A", "W", "I", "HK", "unk", "Ch", "Z", "UK", "KR", "PK", "U", "R", "OK", "M", "J", "G", "KA", "Ka", "Ku", "Work"], "As": ["ano", "Base", "First", "At", "Any", "All", "ras", "AS", "Is", "ps", "ai", "To", "This", "Si", "Per", "Na", "Os", "Parts", "mas", "Zero", "Of", "St", "ase", "Ar", "Ps", "au", "If", "asm", "Alpha", "S", "A", "Res", "No", "Ap", "Ma", "Ni", "Single", " A", "ac", "Ns", "Array", "am", "Has", "alpha", "Same", "an", "Sum", "Am", "Ang", "The", "Ac", "An"], "mod": ["bad", "min", "zero", "pre", "ai", "re", "cum", "sign", "scale", "x", "module", "pack", "Mods", "ak", "user", "j", "ac", "fun", "co", "list", "length", "sub", "part", "MOD", "X", "Num", "comp", "clean", "con", "cm", "de", "sec", "unk", "man", "J", "string", "dec", "add", "multi", "form", "Mod", "mult", "r", "case", "lex", "ver", "md", "reg", " Mod", "dem", "asm", "da", "index", "d", "max", "row", "ln", "Z", "m", "du", "comb", "rank", "set", "alpha", "M", "mix", "block", "k", "Max", "perm", "exp", "c", "circ", "num", "un", "AC", "od", "valid", "bug", "ok", "no", "check", "mods", "Am"], "pos": ["ss", "min", "loc", "pid", "int", "pre", "plus", "en", "sign", "x", "l", "out", "trans", "yes", "Pos", "us", "list", "data", "gen", "part", "ins", "change", " positions", "rot", "pro", "clean", "ass", "vert", "position", "cos", "os", "len", "e", "all", "add", "pose", "op", "unit", "prop", "ps", "size", "z", "index", "start", "lines", "max", "sin", "none", "act", "nos", "block", "on", "k", "top", "opt", "post", "o", "P", "push", "vs", "po", "diff", "patch", "POS", "no", "val", "sum"], "neg": ["bad", "min", "loc", "zero", " Neg", "non", "plus", "negative", "orig", "comment", "empty", "nan", "pack", "adj", "trans", "sk", "ac", "cat", "us", "bin", "abs", "dev", "origin", "gen", "sub", "error", "go", "oc", "temp", "ne", "Neg", "minus", "rot", "clean", "tax", "position", "cos", "rel", "os", "v", "dec", "add", "isu", " negative", "ack", "op", "unit", "pri", "strip", "extra", "iter", "size", "rev", "index", "ko", "max", "sin", "none", "nos", "col", "nor", "off", "block", "other", "k", "opt", "post", "o", "cats", "num", "tag", "po", "cost", "diff", "norm", "activ", "valid", "bug", "ok", "nt", "term", "null", "no", "range", "sum", "ori"], "a": ["aa", "ack", "wa", "aid", "va", "ma", "ja", "active", "na", "go", "ai", "access", "ama", "c", "fa", "eta", "o", "Na", "la", "ba", "mA", "ab", "au", "ana", "pa", "da", "x", "A", "ar", "w", "ka", "ia", "ak", "u", "ace", "sha", "ta", "ca", "sa", "f", "ac", "ga", "asa", "cha", "area", "aux", "aj", "am", "ae", "alpha", "b", "ea", "\u00e4", "e", "ada", "za", "an", "ad"], "ans": ["s", "ents", "offs", "nas", "span", "ms", "antis", "anas", "ks", "any", "android", "names", "vers", "cus", "errors", "ands", "nan", "anus", "ons", "sk", "yes", "ants", "us", "arson", "ean", "plan", "ins", "sex", "amps", "atan", "xs", "ats", "AN", "ads", "ANS", "aces", "au", "ana", "ars", "chan", "cs", "man", "os", "reads", "len", "anim", "ians", "acers", "an", "aid", "lan", "cas", "ams", "ps", "gan", "regular", "ions", " ads", "anes", "annels", "ann", "can", "params", "A", "lang", "ace", "leans", "none", "ns", "anners", "san", "ls", "cons", "angs", "An", "ano", "ates", "ras", "eps", "na", "anges", "cats", "ores", "aos", "vs", "anon", "ani", "anc", "ays", "outs", " means", "ant", "anks", "args", "aned", "ations", "aus", "anne", "ens", "works", "rates", "ds", "oss"], "lenp": [" lenP", "lenh", "lengthps", "Lenpos", "lenc", "lnp", "lnpe", "lenw", " lenw", "lengthc", "lenpos", "lenq", "lenpe", "lenps", "Lenq", "Lenn", " lenpe", "Lenh", " lenps", "Lenw", " lenpos", "lnpos", "lnn", "lengthP", "lenP", " lenh", " lenc", "Lenps", "LenP", "Lenp", "lnP", "lnh", " lenq", "Lenpe", "lengthp", "lnq", "lnw", "Lenc"], "lenn": ["klENN", " lhen", "elinn", "llnn", "linn", " logn", "klenn", "llinn", "lyn", "lcenn", "Lnn", "lcenny", " lnn", " lENN", "klenny", "olenn", "olyn", "lcogn", "Len", "elenn", " lenny", "lenny", "llern", "elen", "llogn", "Lenn", "Logn", "olenny", "Lenny", "lENN", "llenny", "lern", "elenny", "lhen", "lnn", "olern", " linn", "Linn", "len", " lyn", "logn", "Lhen", "llenn", "llhen", "klogn", "lcENN", "llyn", " len", " lern"], "i": ["s", "k", "ui", "ie", "int", "ei", "qi", "ai", "ic", "c", "isin", "oi", "o", "r", "y", "ini", "inf", "iu", "ti", "z", "si", "x", "yi", "mu", "ind", "I", "it", "l", "u", "pi", "q", "f", "j", "io", "m", "xi", "ori", "di", "ci", "ij", "b", "v", "e", "il", "id", "li", "ii", "bi", "ip"], "p": ["s", "k", "op", "pid", "at", "wp", "pre", "ps", "bp", "c", "o", "y", "tp", "per", "pm", "pr", "cp", "ap", "api", "P", "pt", "po", "on", "pa", "x", "start", "current", "l", "patch", "u", "pi", "pl", "q", "page", "j", "pu", "jp", "m", "point", "pp", "f", "port", "br", "ep", "ip", "b", "v", "np", "t", "pe", "pn", "e", "py", "pc", "part"], "n": ["s", "k", "name", "part", "na", "g", "c", "o", "yn", "nc", "num", "en", "y", "un", "net", "ne", "ng", "z", "on", "x", "sn", "w", "ny", "l", "u", "cn", "d", "nt", "nn", "out", "j", "network", "f", "m", "none", "ns", "no", "v", "b", "np", "t", "pn", "e", "all", "nb", "an"]}}
{"code": "def min2(x,y):\\n    return x if x < y else y\\n\\nfrom itertools import combinations\\nMOD = 2019\\nL, R = map(int, input().split())\\ndata = [L%MOD]\\nfor i in range(L+1, R+1):\\n    if data[0] ==i%MOD:\\n        break\\n    data.append(i%MOD)\\nres = float(\"inf\")\\nfor x, y in combinations(data, 2):\\n    res = min2((x*y)%MOD,res)\\nprint(res)", "target": "650", "substitutes": {"x": ["dx", "min", "int", "X", "p", "na", "tx", "xs", "c", "xx", "fx", "h", "rx", "ix", "px", "lex", "ay", "inf", "z", "xt", "on", "ex", "index", " xx", "xxx", "w", "l", "wx", "u", "d", "f", "ax", "j", "m", "point", "xi", "ux", "alpha", " X", "v", "t", "xy", "val", "n"], "y": ["yr", "s", "yd", "ys", "ady", "dy", "a", "ye", "hy", "gy", "p", "Y", "c", "xx", "yx", "o", "r", "ym", "ay", "year", " Y", "z", "uy", "ty", "zy", "yi", "yo", "cy", "wy", "ny", "yz", "yt", "d", "sy", "j", "f", "yy", "ya", "oy", "iy", "b", "bar", "yl", "v", "e", "xy", "py", "vy", "isy", "ry", "ey", "n"], "MOD": ["F", "ID", "Length", "REM", "PUT", "RC", "ORD", "FE", "LOC", "COM", "MED", "SPEC", "DM", "UN", "OR", " mod", "JSON", " modular", "AND", "COR", "ROM", "TR", "LOD", "Mod", "MD", " Mod", "Module", "LD", "FORM", "DIV", "EXT", "OD", "CM", "MIN", "Mods", "I", "Model", "MAL", "MODE", "ION", "LR", "LOG", "MAX", "LAB", "Mode", "ARM", " MODULE", "FD", "OK", "M", "CC", "mod", "REG", "RAM", "LL", "VAL", "NUM", "RM"], "L": ["F", "E", "LB", "V", "LT", "H", "NL", "Q", "X", "Y", "K", "Lu", "LU", "Left", "O", "P", "B", "C", "T", "D", "LM", "Len", "S", "A", "W", "SL", "I", "l", "Li", "EL", "LR", "LE", "Z", "Lo", "U", "M", "J", "N", "DL", "G", "LL", " l", "UL"], "R": ["F", "E", "RG", "Rs", "RD", "NR", "V", "H", "Q", "X", "Y", "SR", "K", "r", "RW", "RR", "Range", "RO", "P", "T", "B", "C", "D", "W", "RS", "Right", "Rh", "RN", "RL", "RP", "U", "M", "J", "JR", "N", "G", "RA", "RH", "IR", "RM"], "data": ["s", "error", "raw", "ui", "a", "zero", "int", "sample", "p", "arr", "rows", "dat", "o", "results", "result", "pos", "DATA", " Data", "values", "la", "split", "empty", "this", "done", "size", "div", "array", "index", "response", "blocks", "cache", "da", "series", "valid", "body", "window", "start", "partial", "ata", "d", "items", "row", "shift", "f", "Data", "function", "area", "output", "input", "breaks", "list", "batch", "alpha", "len", "ada", "block", "ad"], "i": ["ji", "k", "end", "int", "p", "phi", "ai", "c", " I", "r", "o", "ini", "ix", "iu", "z", "si", "index", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", "m", "xi", "di", "ip", "ci", "ij", "v", "b", "e", "id", "li", "ii", "n", "bi", "ti"], "res": ["rh", "min", "rus", "ras", "rex", "arr", "exp", "err", "our", "rate", "rx", "r", "result", "results", "pres", "rep", "re", "gr", "reg", "rez", "rev", "final", "rand", "response", "reed", "Res", "req", "max", "resolution", "sol", "RES", "right", "resh", "resp", "rel", "os", "rem", "ress", "rss", "reset", "id", "ret", "val", "rs", "sum"]}}
{"code": "n = int(input())\\na = [int(s) for s in input().split()]\\n\\nans = 0\\nfor i in range(n):\\n    if a[a[i]-1] == i + 1:\\n        ans += 1\\nprint(ans // 2)\\n", "target": "397", "substitutes": {"n": ["min", "k", "span", "p", "na", "c", "o", "r", "nc", "num", "y", "number", "ne", "z", "x", "nan", "l", "u", "d", "nn", "f", "j", "m", "Ns", "ns", "ni", "b", "np", "t", "N", "count", "e", "nb", "an"], "a": ["aa", "sta", "va", "ma", "p", "ai", "aw", "c", "y", "o", "ba", "ab", "au", "array", "z", "ar", "A", "w", "ia", "args", "l", "u", "aaa", "ca", "f", "sa", "ac", "asa", "m", "area", "am", "ae", "oa", "alpha", "b", "e", "all", "an", "ad"], "s": ["ss", "sq", "sid", "span", "p", "g", "c", "sym", "o", "r", "sf", "sie", "second", "si", "x", "S", "sb", "ses", "d", "u", "sin", "f", "sa", "m", "sw", "ns", "ws", "su", "abs", "b", "string", "v", "e", "ds", "an"], "ans": ["ents", "int", "lan", "span", "nas", "ins", "amps", "offs", "p", "na", "cas", "ai", "atan", "ats", "ions", "anas", "AN", "ANS", "anes", "ks", "annels", "ann", "anon", "ani", "ays", "ana", "ania", "x", "can", "ars", "anus", "aves", "lines", "aned", "nn", "ons", "aus", "ens", "leans", "cs", "ants", "ns", "os", "reads", "acts", "ds", "an"], "i": ["gi", "k", "int", "p", "ai", "c", "o", "y", "r", "ix", "ini", "pos", "axis", "iu", "z", "si", "eni", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "j", "io", "f", "m", "xi", "di", "ni", "ci", "alpha", "v", "b", "e", "id", "li", "ii", "ti"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\na.sort(reverse=True)\\nx=1\\nl=[]\\nfor i in range(n-1):\\n    if i!=n-2:\\n        if a[i]==a[i+1]:\\n            x+=1\\n        else:\\n            if x>=4:\\n                l.append(a[i])\\n                l.append(a[i])\\n                break\\n            elif x==2 or x==3:\\n                l.append(a[i])\\n                x=1\\n                if len(l)>=2:\\n                    break\\n    else:\\n        if a[i]==a[i+1]:\\n            x+=1\\n            if x>=4:\\n                l.append(a[i])\\n                l.append(a[i])\\n                break\\n            elif x==2 or x==3:\\n                l.append(a[i])\\n                x=1\\n                if len(l)>=2:\\n                    break\\n        else:\\n            if x>=4:\\n                l.append(a[i])\\n                l.append(a[i])\\n                break\\n            elif x==2 or x==3:\\n                l.append(a[i])\\n                x=1\\n                if len(l)>=2:\\n                    break\\n#print(a,x)\\nif len(l)<2:\\n    print(0)\\nelse:\\n    print(l[0]*l[1])", "target": "53", "substitutes": {"n": ["s", "k", "non", "p", "c", "o", "r", "nc", "num", "y", "net", "h", "size", "nu", "ne", "z", "w", "d", "nt", "nn", "f", "j", "network", "m", "ns", "len", "b", "v", "np", "t", "N", "e", "nb", "nor"], "a": ["s", "y", "this", "la", "ata", "f", "ac", "list", "data", "b", "ea", "ad", "aa", "auto", "ie", "va", "code", "ans", "api", "au", "array", "ana", "ia", "u", "ca", "sa", "ga", "ae", "e", "all", "form", "za", "an", "wa", "ao", "another", "p", "qa", "access", "aw", "result", "da", "pa", "image", "A", "d", "sup", "m", "self", "area", "am", "alpha", "t", "front", "missing", "ma", "na", "c", "something", "ama", "o", "work", "app", "ab", "history", "args", "aaa", "asa", "aux", "audio", "active"], "x": ["ss", "s", "name", "int", "fix", "ext", "plus", "y", "rx", "ix", "re", "content", "any", "xt", "f", "status", "ux", "length", "ct", "xe", "type", "xp", "b", "xy", "full", "change", "code", "sex", "X", "tx", "xs", "xx", "h", "fe", "left", "cross", "u", "wide", "sync", "v", "key", "e", "id", "xc", "bit", "ye", "rex", "p", "width", "lex", "size", "long", "z", "ex", "index", "get", "d", "m", "ww", "view", "t", "on", "dx", "k", "gy", "xf", "exp", "c", "fx", "o", "work", "xxx", "w", "wx", "ax", "xi", "no", "check", "xml", "pe", "xa"], "l": ["lp", "s", "ol", "L", "line", "shell", " L", "ur", "p", "al", "g", "c", "ly", "y", "r", "sl", "o", "like", "el", "left", "split", "lo", "la", "lc", "kl", "z", "url", "u", "d", "pl", "ll", "ln", "f", "dl", "m", "list", "nl", "fl", "lu", "v", "b", "len", "ell", "e", "ls", "t", "il", "yl", "li", "ul"], "i": ["s", "ui", "ei", "int", "qi", "phi", "ai", "y", "ix", "slice", "si", "yi", "module", "j", "f", "list", "type", "b", "li", "part", "info", "gi", "ie", "mi", "init", "ini", "api", "u", "pi", "ni", "ci", "v", "e", "multi", "id", "source", "ip", "ti", "reply", "p", "oi", "iu", "link", "z", "eni", "index", "ind", "start", "it", "d", "io", "m", "my", "t", "ih", "k", "end", "g", "c", "o", "mini", "I", "uri", "ki", "cli", "xi", "ri", "di", "ii", "bi", "ori"]}}
{"code": "raw_time = int(raw_input())\\n \\nif 0 <= raw_time < 86400:\\n    hour = raw_time / 3600\\n    min = (raw_time - hour * 3600) / 60\\n    sec = (raw_time - hour * 3600 - min * 60)\\n    print(\"%d:%d:%d\")%(hour, min, sec)", "target": "276", "substitutes": {"raw_time": ["docker_value", "raw2times", "docker36hour", "purevalprice", "raw_value", "docker_time", "pure_number", "raw2tim", " raw_clock", "user_info", " raw2times", " raw_tim", "raw_price", "raw_tim", "purevaltime", "user_sleep", "raw_mode", "docker_hours", " raw2tim", "raw___hour", "purevalhour", " raw2time", "raw_number", "docker36time", "raw_sleep", " raw2clock", "full_value", "raw36hours", "raw2time", "raw_times", "full_mode", "docker36value", "raw_clock", "rawvalprice", "raw_hour", "raw_info", "raw___price", "pure_price", "raw36time", "raw36value", "raw67time", "purevalnumber", "raw67info", "raw___time", "rawvaltime", "rawvalhour", "raw67sleep", "rawvalnumber", "raw36hour", "user_time", "full_time", "full_hour", "raw2clock", " raw_times", "raw_rate", "raw_hours", "pure_hour", "docker_hour", "docker36hours", "user_rate", "pure_time", "raw___number", "raw67rate"], "hour": ["error", "mode", "unit", "date", "dd", "alt", "part", "mi", "exp", "inter", "hours", "element", "night", "over", "price", "h", "app", "year", "md", "hr", "rot", "week", "div", "server", "time", "factor", "second", "oct", "quarter", "image", "anch", "user", "ee", "row", "hop", "page", "ax", "ac", "noon", "clock", " Hour", "age", "minute", "Hour", "day", "length", "type", "key", "bar", "ow", "mod", "micro", "ror", "month", "volume", "block", "off", "offset"], "min": ["s", "name", "unit", "date", "int", "cond", "mi", "ai", "mon", "pm", "pos", "year", "sign", "second", "time", "MIN", "Min", "max", "sa", "m", "minute", "am", "day", "mins", "len", " minute", "mod", "dec", "val", "month", "n", "mid", "pc"], "sec": ["ss", "loc", "sc", "str", "cond", "ms", "stat", "c", "SEC", "ec", "sd", "pos", "year", "isec", "reg", "second", " seconds", "Sec", "time", "si", "sim", "sun", "max", "frac", "sa", "cs", "ac", "minute", "seconds", "day", "ct", "mod", "dec", "seq", "sub", "se", "micro", "offset", "pc"]}}
{"code": "def main():\\n    N = int(input())\\n    S = [input() for _ in range(N)]\\n    # B***\\n    # ***A\\n    # B**A\\n    c_a, c_b, c_ba = 0, 0, 0\\n    ans = 0\\n    for s in S:\\n        if s[0] == 'B' and s[-1] == 'A':\\n            c_ba += 1\\n        elif s[-1] == 'A':\\n            c_a += 1\\n        elif s[0] == 'B':\\n            c_b += 1\\n        ans += len(s.split('AB')) - 1\\n    ans += max(0, c_ba - 1)\\n    if c_ba > 0:\\n        if c_a > 0:\\n            c_a -= 1\\n            ans += 1\\n        if c_b > 0:\\n            c_b -= 1\\n            ans += 1\\n    ans += min(c_a, c_b)\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "456", "substitutes": {"N": ["F", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "NS", "K", "Na", "O", "P", "T", "C", "B", "D", "Ne", "A", "W", "I", "No", "Z", "Ns", "R", "M", "J", "NB", " n", "G", "NA", "n"], "S": ["F", "s", "E", "L", "V", "H", "Q", "X", "SE", "SH", "SI", "O", "P", "B", "C", "T", "D", "A", "I", "SS", "Z", "U", "R", "Input", "M", "G", "SU"], "_": ["__", "p", "g", " id", " ip", " time", " __", "x", "d", "out", "f", "ac", " j", "id"]}}
{"code": "a, b, c, k = map(int, input().split())\\nans = a-b\\nif k%2: ans *= -1\\nprint(ans)", "target": "669", "substitutes": {"a": ["aa", "s", "int", "va", "p", "ai", "aw", "i", "y", "ba", "ab", "au", "da", "x", "pa", "A", "w", "u", "f", "sa", " A", "ac", "asa", "ca", "m", "area", "aj", "am", "ae", "alpha", "ada", "abc", "an", "ad", "n"], "b": ["aa", "end", "fb", "p", "bs", "g", "i", "y", "r", "h", "wb", "beta", "B", "ba", "ab", "z", "x", "sb", "cb", "l", "bb", "d", "rb", "u", "abb", "f", "j", "ca", "m", "bot", "db", "abs", "v", "bar", "e", "bc", "abc", "ad", "n"], "c": ["p", "y", "C", "lc", "uc", "z", "ce", "x", "cy", "cm", "u", "d", "ca", "f", "cs", "ac", "m", "dc", "ci", "cf", "e", "bc", "cc", "col", "mc", "ad", "n"], "k": ["km", "kid", "p", "acc", "g", "i", "dk", "K", "o", "r", "kk", "ks", "kn", "z", "ch", "x", "kw", "ak", "ok", "d", "q", "j", "sk", "f", "cs", "m", "ac", "ky", "ku", "kind", "v", "ck", "e", "ad", "n"], "ans": ["s", "ents", "offs", "lan", "nas", "span", "atan", "na", "aning", "activation", "anas", "AN", "ANS", "anes", "ks", "asts", "mean", "ane", "ann", "anon", "ani", "anc", "ana", "ania", "x", "can", " means", "A", "nan", "ars", "cross", "params", "anks", "aned", "ace", "aus", "anne", "sk", "cs", "leans", "ants", "ns", "scan", "os", "ean", "ds", "an", "ins"]}}
{"code": "N = int(input())\\nP = []\\nfor i in range(N):\\n  P.append(int(input()) - 1)\\n\\nA = [0] * N\\nfor i in range(N):\\n  A[P[i]] = i\\n\\nans,cnt = 0,0\\nwork = -1\\nfor i in range(N):\\n  if work < A[i]:\\n    cnt += 1\\n    ans = max(ans, cnt)\\n  else:\\n    cnt = 1\\n  work = A[i]\\n\\nprint(N-ans)", "target": "525", "substitutes": {"N": ["F", "Network", "E", "Number", "L", "NO", "V", "NN", "H", "Q", "X", "p", "Y", "Size", "NS", "NE", "Num", "K", "Na", "AN", "O", "Sk", "B", "C", "T", "D", "Len", "Ne", "S", "W", "I", "No", "NT", "Ni", "Z", "Net", "Ns", "R", "M", "J", " n", "G", "NA", "Work", "Count", "n"], "P": ["F", "Power", "PI", "TP", "E", "PO", "L", "V", "H", "Q", "X", "p", "Y", "AP", "K", "PS", "O", "T", "C", "B", "D", "NP", "Ps", "IP", "S", "PP", "I", "PA", "Py", "U", "M", "J", "G", "PF"], "i": ["gi", "s", "ui", "a", "ie", "ei", "int", "p", "ai", "c", "o", "y", "r", "ini", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "current", "it", "l", "u", "pi", "d", "f", "io", "j", "m", "cli", "xi", "di", "ni", "ci", "v", "b", "e", "t", "multi", "id", "zi", "li", "ii", "n", "bi", "ip"], "A": ["F", "a", "L", "At", "V", "All", "H", "AS", "X", "Y", "Q", "AP", "p", "LA", "K", "AN", "AM", "B", "C", "T", "As", "AC", "D", "API", "array", "AA", "au", "Alpha", "S", "W", "I", "PA", "CA", "U", "AF", "Input", "M", "an", "Wa", "G", "Am", "NA", "An", "Work", "App", "n"], "ans": ["ano", "s", "aff", "lan", "NN", "span", "amps", "offs", "workers", "na", "ai", "ats", "aning", "activation", "Parts", "anas", "AN", "CNN", "pos", "ANS", "anes", "ann", "cycles", "ani", "NP", "ana", "Work", "can", " means", "nan", "ork", " scans", "aned", "lines", "ass", "chan", "nn", "ons", "works", "ln", "cs", "atches", "ants", "ns", "Ns", " spans", "man", "scan", "ases", "ni", "reads", "np", "cons", "ANN", "plan", "NA", "an", "n", "ins"], "cnt": ["ecrt", "cNT", "conount", "cret", "CNT", "conno", " crt", " cNT", " cct", "cct", "crt", "bcount", "connd", "connt", " cnn", "nct", "Cnt", " cno", "ecnn", "nNT", "scno", "pcount", "ecount", "Cno", "ecnt", " cnd", "scnt", "nnt", "nno", "pcret", "lcnn", "bcrt", "pcnt", " count", "cno", "bcnn", "lcnt", "pcnn", "scnd", "count", "bcnt", "cnn", "Cct", "lcret", "cnd", "scount", " cret", "lcount"], "work": ["ack", "aff", "k", "end", "win", "worker", "X", "p", "workers", "c", "working", "y", "number", "num", "wh", "push", "ann", "WORK", "run", "x", "clean", "ork", " Work", "w", "W", "start", "ask", "ass", "ace", "max", "nn", "works", "ax", "pp", "man", "age", "rank", "act", "ni", "ow", "what", "count", "add", " works", "part", "Work", " worker", "ad", "on"]}}
{"code": "import numpy as np\\n\\nn = int(input())\\ntable,ans = np.zeros((9,9)),0\\n\\nfor k in range(n):\\n    num = str(k+1)\\n    if int(num[0])!=0 and int(num[-1])!=0:\\n        table[int(num[0])-1][int(num[-1])-1]+=1\\n\\nfor i in range(9):\\n    for j in range(9):\\n        ans += table[i][j]*table[j][i]\\nprint(int(ans))", "target": "168", "substitutes": {"n": [" N", "s", " p", "a", " span", "p", "na", " number", "c", "o", "r", "y", "en", " c", "net", "z", "x", "nan", " fn", "sn", "w", "l", "u", "d", "nn", "f", "m", "Ns", "ns", "b", "t", "N", " sn", "pn", "nb", " len"], "table": ["Table", "code", "span", "p", "state", "c", "result", "interface", "tr", "tmp", "section", "round", "slice", "transform", "array", "index", "cache", "source", "bl", "file", "module", "body", "window", "con", "union", "nn", "root", "row", "f", "object", "header", "m", "model", "note", "core", "port", "query", "input", "database", "list", "data", "db", "binary", "shape", "type", "b", "tab", "feature", "tree", "count", "col", "range", "part", "test", "bi", "TABLE"], "ans": ["s", "a", "lan", "nas", "span", "atan", "na", "ai", "ions", "aning", "AN", "ANS", "anes", "ks", "ane", "ann", "anon", "ani", "anc", "annot", "ana", "can", "asin", "nan", "sn", "anus", "aned", "ations", "nn", "anne", "leans", "sk", "cs", "ants", "ns", "scan", "os", "san", "ls", "ds", "an", "ins"], "k": ["s", "p", "_", "c", "K", "o", "r", "y", "h", "kk", "ks", "z", "ch", "x", "w", "ak", "l", "ok", "u", "d", "max", "q", "ki", "sk", "f", "m", "b", "ck", "N", "ik"], "num": ["min", "name", "text", "loc", "unit", "digit", "end", "mn", "dom", "non", "p", "na", "Num", "nm", "mon", "mult", "miss", "number", "un", "pos", "bn", "nu", "nom", "div", "config", "index", "norm", "oct", "inc", "node", "conn", "om", "con", "max", "nn", "out", "one", "m", "nam", "note", "none", "no", "len", "dim", "byn", "np", "gen", "off", "col", "mix", "word", "range", "part", "form", "an", "sum", "block", "um"], "int": ["float", "min", "text", "digit", "struct", "const", "str", "pointer", "win", "na", "ext", "init", "inter", "c", "ints", "number", "Int", "size", "long", "index", "x", "oct", "cent", "inc", "ind", "uint", "integer", "start", "max", "nt", "sin", "rect", "object", "point", "short", "INT", "pad", "null", "set", "flag", "list", "intel", "alpha", "abs", "len", "dec", "count", "id", "double", "val", "bit", "range"], "i": ["ji", "ui", "a", "ie", "p", "ai", "c", "o", "y", "ix", "iu", "z", "index", "x", "ind", "start", "I", "it", "l", "u", "d", "pi", "q", "io", "f", "m", "ci", "ij", "b", "inn", "v", "e", "id", "ii", "ik", "ip"], "j": ["ion", "ji", "a", "ie", "ja", "p", "ai", "g", "c", "y", "o", "r", "jj", "ijk", "section", "z", "si", "index", "x", "ind", "it", "l", "u", "d", "q", "f", "jp", "m", "xi", "ij", "J", "v", "b", "key", "e", "ii"]}}
{"code": "n=int(input())\\na=[int(x) for x in input().rstrip().split()]\\n\\nnow=1\\nmod=10**9+7\\ndef lcm(a,b):#\u6700\u5c0f\u516c\u500d\u6570\\n    ori_a=a\\n    ori_b=b\\n    while b!=0:\\n        a,b=b,a%b\\n    return (ori_a*ori_b)//a\\n  \\nfor i in a:\\n  now=lcm(i,now)\\n# print(now)\\nprint(sum([now//i for i in a])%mod)\\n  \\n", "target": "477", "substitutes": {"n": ["name", "k", "p", "na", "g", "c", "i", "o", "number", "nc", "num", "bn", "ne", "z", "node", "w", "nn", "f", "j", "ns", "ni", "t", "N", "nb", "an"], "a": ["aa", "p", "ai", "c", "aw", "i", "y", "ba", "ab", "z", "da", "A", "w", "action", "args", "d", "aaa", "f", "ca", "sa", " A", "ac", "m", "area", "am", "data", "ae", "alpha", "e", "ad", "abc", "an", "active"], "x": ["dx", "name", "int", "python", "X", "p", "tx", "exp", "xs", "i", "xx", "fx", "rx", "number", "y", "r", "px", "num", "ix", "z", "ex", "index", "xxx", " xx", "cross", "w", "d", "q", "f", "ax", "m", "ww", "xi", "key", "pair", "e", "t", "id", "val", "bit"], "now": ["new", "cycle", "NOW", "nd", "nc", " Now", " c", "tmp", "md", "size", "time", "node", "cb", "bf", "bb", "d", "max", "m", "self", "Now", " self", "callback", "bc", "id", "next", " d"], "mod": ["int", "MOD", "cond", " maj", "p", "r", "num", " c", " time", "year", " Mod", "time", " min", "module", " sec", " cm", "cm", "sec", "max", " m", "j", "m", "ac", "fun", "month", " d", "Mod"], "b": ["k", "p", "bs", "g", "c", "i", "y", "r", "emb", "beta", "B", "ab", "z", "w", "l", "bb", "d", "abb", "f", "bin", "v", "bar", "e", "abc", "nb"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\n\\ntot = 3 ** N\\n\\ncnt_odd, cnt_even = 0,0\\n\\nfor i in range(N):\\n\tif A[i] % 2 == 0:\\n\t\tcnt_even += 1\\n\telse:\\n\t\tcnt_odd += 1\\n\\nans = tot - (2**cnt_even)*(1**cnt_odd)\\nprint(ans)", "target": "282", "substitutes": {"N": ["F", "MN", "E", "L", "NO", "V", "NN", "H", "Q", "X", "Y", "Size", "NS", "NE", "K", "Na", "NM", "O", "P", "T", "C", "B", "D", "Len", "NH", "Ne", "S", "I", "NT", "Z", "Ns", "R", "M", "J", "GN", "NB", "SN", " n", "G", "NA", "n"], "A": ["F", "a", "L", "At", "V", "All", "AS", "AI", "Y", "AP", "LA", "K", "AN", "AM", "AB", "O", "P", "B", "C", "T", "As", "D", "mA", "Ar", "API", "AA", "Alpha", "S", "W", "I", "Array", "CA", "AF", "alpha", "M", "G", "Am", "NA", "An"], "tot": ["fott", "tots", "tOT", "TOT", "Tot", "Tota", "nott", "nots", "fot", "fOT", "Tott", "fots", "tota", " Tott", " TOT", "Tots", " Tota", "tott", " Tot", "nOT", "fota"], "cnt_odd": ["cnt2even", "cNT_even", "cNT_off", "cct_odd", "cst_off", "cct_own", "cct_even", "cct_Even", "cNT_Even", "cst_even", "cnt_own", "cst_Even", "cnt2off", "cnt_Even", "cnt2Even", "cnt_off", "cnt2odd", "cst_odd", "cnt2own", "cNT_odd"], "cnt_even": ["cnt2even", "cst_down", "count_hen", "cnt2down", "cct_odd", "cst_all", "cnt_hen", "cct_own", "cct_off", "cct_even", "cnt_down", "count_odd", "cst_even", "cnt_all", "cnt_own", "cnt2all", "cnt_Even", "cnt_off", "cnt2odd", "count_even", "cst_odd", "count_Even"], "i": ["gi", "k", "ui", "end", "a", "qi", "p", "ai", "c", "y", "h", "ix", "iu", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "q", "j", "f", "io", "m", "xi", "ri", "ci", "b", "e", "id", "li", "ii", "n", "bi", "ip"], "ans": ["s", "a", "lan", "cas", "nas", "amps", "eps", "ras", "atan", "na", "std", "ai", "ats", "Ann", "aning", "anas", "AN", "ANS", "mean", "ann", "anon", "anc", "au", "nan", "An", "ars", "aned", "nn", "ids", "aus", "ln", "cs", "leans", "ants", "acs", "ns", "len", "ls", "plan", "ds", "an", "n", "ins"]}}
{"code": "N=int(input())\\nS=list(map(int,input().split()))\\nS.sort()\\nS.reverse()\\n\\ndic={}\\nfor i in range(N):\\n    tmp=S[i]\\n    if tmp in dic:\\n        dic[tmp]+=1\\n    else:    \\n        dic[tmp]=1\\nkouho1=0\\nkeys = [k for k, v in dic.items() if v >= 4]\\nkeys.sort()\\nkeys.reverse()\\nif len(keys)>=1:\\n    kouho1=keys[0]*keys[0]\\n\\nkouho2=0\\nkeys = [k for k, v in dic.items() if v >= 2]\\nkeys.sort()\\nkeys.reverse()\\nif len(keys)>=2:\\n    kouho2=keys[0]*keys[1]\\n\\nprint(max(kouho1,kouho2))\\n\\n\\n", "target": "53", "substitutes": {"N": ["F", "E", "L", "NO", "V", "NN", "NL", "H", "Q", "X", "Y", "Size", "NS", "NE", "K", "NM", "O", "P", "T", "C", "B", "D", "Ne", "I", "NT", "Z", "Ns", "R", "M", "J", "NB", "SN", " n", "NA", "n"], "S": ["F", "s", "VS", "E", "L", "Sort", "V", "SC", "X", "Y", "SE", "Sample", "NS", "Copy", "Results", "Si", "K", "TS", "SH", "Parts", "SI", "Files", "P", "T", "C", "B", "SK", "D", "Rules", "A", "SL", "Sl", "I", "Changes", "SS", "Ns", "Keys", "U", "R", "Part", "List", "M", "Sin", "G", "SO", "SU"], "dic": ["nicc", "dican", " dip", "lic", "bip", "pdiac", "Dac", "bict", "dicc", "pdic", "dication", "tict", "dict", "dac", "pdication", "odiac", "diac", "Dics", "sdic", "Dic", "idiac", "dip", " dict", "lik", " dican", "nic", "dik", "ldic", "bic", "dics", "nik", "odic", "tic", "sdict", " dicc", "Dip", "sdication", "Diac", "pdican", "Dice", "pdict", "dice", " dac", " dice", "idic", "nict", "pdics", " dication", "ldics", "tip", "tics", "sdics", "ldiac", "licc", "bics", " dics", " diac", "lict", "ldip", "bice", "idics", "odics", "odican", " dik", "bac", "idip"], "i": ["ih", "vi", "ie", "int", "qi", "p", "ai", "c", "y", "ix", "ini", "iu", "ti", "z", "si", "eni", "index", "x", "ind", "start", "I", "u", "pi", "d", "q", "j", "f", "m", "xi", "ci", "ij", "key", "t", "id", "li", "ii", "bi", "ip"], "tmp": ["new", " temp", "unit", "cmp", "ie", "int", "tt", "fb", "p", "c", "nm", "number", "tp", "num", "kk", "pos", "cp", "beta", "slice", "txt", "T", "emp", "md", "temp", "mp", "nu", "div", "nom", "xt", "nov", "diff", "xxx", "vm", "now", "current", "obj", "nb", "rb", "nt", "j", "Temp", "vv", "rt", "yy", "no", "data", "alpha", "vt", "key", "np", "foo", "t", "true", "dev", "pot", "fake", "py", "prefix", "part", "test"], "kouho1": ["koupho11", "kouha1", "kouho61", "kwhoone", "kouha2", "kouppo1", "koulo1", "koupo11", "kouha61", "koupo2", "koupho2", "koufo61", "kouko1", "kouko61", "kounho1", "kouho5", "kouhoone", "kouyo01", "koupho1", "kouppo11", "kouppo01", "kwko5", "kounho2", "kouwo2", "kounfo2", "kouyo11", "kouho01", "koulo5", "kouko5", "koufo1", "kouko2", "kouho11", "koupho01", "kwho3", "kouvaone", "kwko1", "kouwo1", "koufo2", "kounfo61", "kouwo11", "kouloone", "kounfo1", "kwho5", "kwko3", "koupo1", "kouwo01", "koupo01", "kwkoone", "kounho61", "kouko3", "kwho1", "kouho3", "kouva3", "koulo3", "koukoone", "kouyo1", "kouyo2", "kouva5", "kouva1", "kouppo2"], "keys": ["lights", "s", "strings", "ms", "rows", "y", "pres", "ks", "names", "obs", "errors", "white", "blocks", "events", "x", "parts", "files", "ids", "headers", "docs", "types", "fields", "images", "ops", "changes", "comments", "phones", "settings", "states", "bs", "xs", "cases", "users", "items", "Keys", "breaks", "key", "letters", "powers", "ips", "ys", "vals", "ps", "rules", "values", "posts", "codes", "es", "index", "locks", "mu", "sites", "lines", "ns", "objects", "stars", "xes", "players", "lists", "checks", "qs", "groups", "words", "kids", "cats", "vs", "models", "pieces", "cells", "tests", "args", "opens", "chains", "n"], "k": ["km", "s", "a", "int", "ke", "p", "g", "c", "K", "h", "r", "o", "y", "un", "ijk", "kg", "ks", "kn", "z", "x", "mk", "w", "ka", "ak", "ok", "u", "d", "max", "q", "j", "sk", "f", "ky", "m", "kt", "kick", "key", "b", "t", "an", "block", "n"], "v": ["vi", "value", "uv", "V", "va", "p", "g", "c", "h", "gu", "y", "o", "vid", "ver", "lv", "vs", "z", "x", "nv", "av", "w", "l", "u", "d", "conv", "q", "vert", "f", "vol", "j", "iv", "m", "vv", "van", "vt", "b", "tv", "key", "t", "e", "sv", "ev", "vari", "n"], "kouho2": ["kouha1", "kouhiall", "kouha2", "kouppo1", "kouha8", "kougo4", "kouphoall", "kouppo3", "koupha2", "koupo2", "koupho2", "kougo32", "kouha4", "koupho1", "kouho32", "koulha8", "kougo1", "kouha52", "koulha1", "koupha32", "koulha2", "koupho32", "koupo3", "kouwo2", "koubo52", "kouwo8", "koulho1", "koupho4", "koubo8", "kouha32", "koulho8", "kouhoall", "kouho8", "koulho2", "koulha52", "kouhi3", "koupha1", "koubo2", "kouwo1", "koupo32", "koulho52", "koubo1", "koupha4", "kouma2", "koupho3", "kouma1", "koupo1", "kouhi1", "koupoall", "kouho4", "kouho3", "kouho52", "kouhi2", "koumaall", "kouma3", "kougo2", "kouppoall", "kouppo2", "koupo4", "kouwo52"]}}
{"code": "h,w,k=map(int,input().split())\\ndp=[0]*(w)\\nl=[1,1,2,3,5,8,13,21,34]#n\u672c\u306e\u7e26\u7dda\u306b\u9ad8\u30551\u306evalid\u306a\u6a2a\u68d2\u3092\u5f15\u304f\u901a\u308a\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306b\u306a\u308b\\n#a_n:=n\u672c\u306e\u7e26\u7dda\u306bvalid\u306a\u6a2a\u68d2\u3092\u5f15\u304f\u901a\u308a\u306e\u7dcf\u6570\u3001\u3068\u3059\u308c\u3070\\n#n+1\u672c\u306e\u6642\u306f1.1\u30682\u672c\u76ee\u306b\u6a2a\u68d2\u3092\u5f15\u304f\uff082\u30683\u306e\u9593\u306b\u5f15\u3051\u306a\u3044\u306e\u3067a_n-1\u901a\u308a\uff09\\n#          2.                \u5f15\u304b\u306a\u3044\uff08a_n\u901a\u308a\uff09\\n#\u3088\u3063\u3066\u6f38\u5316\u5f0fa_n+1=a_n+a_n-1\u304c\u6210\u7acb\u3002\\ndp[0]=1\\nmod=10**9+7\\nr=[0]*w\\nfor i in range(h):\\n    for i in range(w):\\n        r[i]=dp[i]*l[i]*l[w-1-i]#\u5de6\u53f3\u306b\u6a2a\u68d2\u3092\u5f15\u304b\u306a\u3044\\n        if i>=1:\\n            r[i]+=dp[i-1]*l[i-1]*l[w-1-i]#\u5de6\u306b\u306e\u307f\u6a2a\u68d2\u3092\u5f15\u304f\\n        if i<=w-2:\\n            r[i]+=dp[i+1]*l[i]*l[w-2-i]#\u53f3\u306b\u306e\u307f\u6a2a\u68d2\u3092\u5f15\u304f\\n        r[i]%=mod\\n    dp,r=r,dp\\n\\nprint(dp[k-1])", "target": "240", "substitutes": {"h": ["rh", "ih", "hs", "H", "p", "g", "c", "oh", "gh", "o", "y", "r", "ph", "hr", "z", "x", "hh", "bh", "q", "he", "f", "m", "hi", "v", "b", "e", "hm"], "w": ["hw", "wa", "p", "g", "c", "width", "y", "r", "fw", "o", "wh", "weight", "z", "x", "ew", "W", "kw", "wx", "u", "d", "q", "f", "m", "sw", "ww", "ws", "wl", "wd", "v", "t", "wu", "e", "n"], "k": ["km", "ke", "p", "kh", "c", "i", "K", "o", "y", "kk", "ks", "kl", "z", "ch", "kw", "u", "q", "j", "sk", "f", "m", "v", "ck", "e", "ik", "n"], "dp": ["lp", "dd", "sh", "dh", "p", "ps", "phi", "i", "o", "r", "pm", "cp", "pos", "ph", "P", "D", "pi", "dt", "dl", "m", "pp", "dr", "dc", "cr", "mm", "ds"], "l": ["lp", "ol", "L", "p", "g", "c", "i", "dL", "o", "sl", "el", "lr", "lc", "kl", "ll", "vl", "ln", "f", "dl", "m", "nl", "wl", "fl", "v", "e", "ls", "li", "n"]}}
{"code": "import sys,math\\nN = int(input())\\n\\nif not ( 1 <= N <= 10 ** 9 ):\\n    sys.exit\\n\\nroot_N = math.floor(math.sqrt(N))\\nprint(root_N ** 2)\\n", "target": "330", "substitutes": {"N": ["F", "E", "Number", "L", "V", "NL", "H", "X", "Y", "Size", "Num", "NS", "NI", "K", "NM", "O", "P", "Len", "C", "T", "D", "B", " C", "Ne", "S", "W", "SIZE", "I", "NT", "OS", "Node", "Ni", "Z", "network", "Ns", "R", "M", "NB", "SN", " n", "G", " Ne", "NA", "Count", "n"], "root_N": ["mainrootT", "rootrootn", "root_n", "rootrootC", " root_F", "main_n", "mainrootC", "root_C", "mainrootN", "mainrootn", "rootrootN", "rootrootT", " root_n", "main_N", "root_O", "main_T", " root_O", "root_T", "main_C", "root_F"]}}
{"code": "n,q=[int(i) for i in input().split()]\\ns=input()\\n\\n\\ndp=[0]*(n)\\nans=0\\nfor i in range(1,n):\\n    if s[i-1]==\"A\" and s[i]==\"C\":\\n        ans=ans+1\\n    dp[i]=ans\\n\\nfor i in range(q):\\n    l,r=[int(i) for i in input().split()]\\n    print(dp[r-1]-dp[l-1])\\n", "target": "155", "substitutes": {"n": ["k", "a", "p", "c", "y", "nc", "o", "num", "net", "z", "x", "w", "u", "d", "nn", "nt", "j", "f", "m", "ns", "v", "b", "t", "N", "nb", "an"], "q": ["k", "sq", "qs", "qu", "qi", "Q", "p", "qa", "g", "c", "y", "h", "ix", "z", "ch", "x", "w", "u", "d", "j", "f", "dq", "m", "query", "qt", "v", "t", "count", "qq"], "i": ["gi", "ji", "k", "ui", "a", "ei", "int", "ie", "qi", "p", "ai", "c", "y", "o", "ini", "h", "iu", "ti", "z", "si", "index", "x", "yi", "ar", "ind", "start", "I", "it", "idi", "u", "d", "pi", "j", "f", "io", "cli", "m", "xi", "input", "di", "ni", "ci", "ip", "b", "v", "t", "e", "zi", "id", "multi", "li", "ii", "bi"], "s": ["ss", "sq", "a", "sc", "qs", "p", "ps", "states", "g", "c", "xs", "ions", "o", "h", "sd", "si", "es", "S", "sb", "ses", "d", "u", "sg", "f", "sk", "cs", "m", "sync", "ns", "os", "gs", "b", "v", "e", "ls", "ips", "ds", "sv", "ins"], "dp": ["lp", "ss", "wp", "eps", "p", "dist", "ps", "xs", "pb", "fp", "tp", "sd", "cp", "pos", "gp", "P", "dB", "sp", "vs", " dd", "pa", "params", "dm", "grad", "d", "pi", "DP", "dl", "dt", "dq", "pp", "deb", "dr", "ns", "address", "pad", "dc", "rank", "df", "data", "db", "adr", "wd", "alpha", "dim", "np", "pair", "e", "pd", "ds", "dos", "hp", "ip"], "ans": ["ss", "a", "lan", "span", "offs", "eps", "p", "na", "ps", "ai", "atan", "ats", "AN", "ANS", "ks", "vs", "ann", "ani", "errors", "can", "params", "x", "A", "sn", "ars", "nan", "aned", "u", "d", "nn", "ons", "sk", "cs", "ants", "ns", "rank", "scan", "os", "ni", "alpha", "dev", "ls", "ips", "cons", "ians", "ds", "an", "ad", "ins"], "l": ["k", "a", "L", "p", "g", "c", "o", "sl", "h", "lc", "z", "x", "ar", "w", "u", "d", "ll", "j", "dl", "f", "sr", "m", "ln", "rl", "nl", "b", "v", "e", "t"], "r": ["yr", "rh", "k", "a", "p", "g", "c", "o", "h", "hr", "z", "x", "ar", "w", "u", "d", "j", "f", "sr", "m", "ir", "rl", "R", "nr", "b", "v", "e", "fr", "ru", "er", "rs"]}}
{"code": "n = int(input())\\nbtc = 380000.0\\na = 0\\n# \u5358\u4f4d\u6bce\u306b\u52a0\u7b97\u3059\u308b\u3002\\nfor _ in range(n):\\n    x, u = input().split()\\n    if u == 'JPY':\\n        a += int(x)\\n    elif u == 'BTC':\\n        a += float(x)*btc\\nprint(a)\\n", "target": "270", "substitutes": {"n": ["name", "k", "s", "p", "na", "g", "c", "o", "nc", "ot", " c", "z", "fn", "ar", "conn", "l", "cn", "f", "j", "cs", "m", "ns", "v", "b", "np", "t", "N", "an"], "btc": ["bdh", "bdc", "bdp", "btf", "ctf", "pth", "bth", "ctp", "bdf", "cth", "ptc", "btp", "ptf", "ptp", "ctc"], "a": ["aa", "va", "p", "ai", "c", "fa", "i", " c", "ba", "ab", "A", "af", "d", "ca", "f", "sa", "ac", "area", "am", "ae", "alpha", "b", "an", "e", "abc", " b", "ad"]}}
{"code": "x=[int(a) for a in input().split()]\\nprint(min(x[0]*x[1],x[2]))", "target": "751", "substitutes": {"x": ["min", "value", "int", "python", "code", "sex", "rex", "X", "event", "tx", "p", "na", "xs", "plus", "c", "i", "xx", "yx", "rx", "y", "work", "ix", "number", "z", "es", "ex", "xxxx", "xxx", "index", "search", " xx", "cross", "max", "hex", "one", "f", "ax", "m", "ww", "xi", "xf", "input", "data", "check", "match", "xe", "b", "key", "v", "view", "e", "t", "xes", "pe", "xy", "word", "xc", "n"], "a": ["aa", "name", "int", "va", "at", " da", "p", "na", "ai", "c", "i", "fa", "y", " i", "la", "ab", "z", "pa", "index", "da", "A", "action", "aaa", "ca", "sa", " A", "ac", "ga", "f", "area", "aux", "ya", " an", "ae", "alpha", "b", "ita", "\u00e4", " pa", "val", "an", "n"]}}
{"code": "S = input()\\nK = int(input())\\n\\nif(S.count(S[0]) == len(S)):\\n    print(len(S)*K//2)\\nelse:\\n    cnt = 0\\n    lst = []\\n    tmp = S[0]\\n    for i in range(len(S)):\\n        if(tmp == S[i]):\\n            cnt += 1\\n        else:\\n            tmp = S[i]\\n            if(cnt > 1):\\n                lst.append(cnt)\\n            cnt = 1   \\n    if(cnt > 1):\\n        lst.append(cnt)\\n        \\n    ans = 0\\n    for i in lst:\\n        ans += K*(i//2)\\n    if(S[0] != S[-1]):\\n        print(ans)\\n    else:\\n        a = 0\\n        b = 0\\n        for i in range(len(S)):\\n            if(tmp != S[i]):\\n                break\\n            a += 1\\n        for i in S[::-1]:\\n            if(tmp != i):\\n                break\\n            b += 1\\n        print(ans+((a+b)//2-(a//2+b//2))*(K-1))", "target": "723", "substitutes": {"S": ["s", "VS", "DS", "V", "SC", "Series", "SE", "JS", "Su", "Files", "St", "RS", "OS", "Site", "WS", "Set", "G", "SO", "Socket", "L", "H", "Es", "Q", "X", "NS", "SH", "ST", "Sa", "Service", "Sl", "Sing", "Ds", "Ns", "U", "GS", "SM", "String", "N", "Sort", "TS", "PS", "Sol", "IDS", "O", "B", "C", "A", "SL", "SS", "US", "Single", "Z", "CS", "R", "M", "Sign", "SP", "F", "E", "Y", "Si", "SAM", "SI", "P", "T", "D", "Session", "W", "I", "FS", "Sub", "Sin", "BS", "SU"], "K": ["F", "k", "KK", "L", "KI", "V", "H", "Ak", "Q", "X", "Y", "IK", "KE", "Sk", "ks", "P", "T", "C", " k", "SK", "D", "O", "B", "NK", "KB", "KS", "W", "KC", "I", "Z", "KR", "PK", "U", "Mask", "M", "J", "N", "G", "KA", "Ka", "Ku"], "cnt": ["cNT", "fcnn", "CNT", "cnc", "fcount", " crt", "Cwd", " cNT", "ncnt", " cct", "cct", "lcnc", "crt", " cwd", " cnc", "lcrt", "Cnt", " cno", " cnn", "cst", "fcnt", "Cno", " cnd", "ncno", "lcnd", "ncrt", " cst", "Cnn", "lount", " count", "cno", "lcnt", "Cnd", "fcrt", "lcct", "ncnc", "lNT", "Crt", "lcwd", "count", "Cst", "Cct", "cnn", "lcNT", "lnt", "cnd", "ncNT", "cwd", "ncount", "Count", "lcount"], "lst": ["Lbl", "lnsts", "llnt", "llST", "lnstr", "cct", " lnt", "llbl", "vcl", "lcbl", " lsts", "lcst", " lsc", "lnst", "cst", "cbl", "vst", " lstr", "vsts", "Lsc", "lsc", " lbl", "lstr", "LST", " lcl", " lST", "lcl", "lST", "llsc", "Lst", "lct", "llst", "lcnt", "llstr", "lncl", "lcct", "lbl", "Lnt", "vstr", "lnt", "lsts", "Lstr", " lct"], "tmp": ["ji", "cmp", "part", "tt", "fb", "p", "pre", "img", "c", "append", "tp", "prev", "kk", "app", "cp", "pos", "txt", "slice", "beta", "T", "sp", "emp", "temp", "proc", "mp", "config", "xt", "si", "opp", "st", "sn", "sb", "start", "cb", "buff", "obj", "src", "rb", "cop", "bb", "nt", "sup", "j", "jp", "f", "m", "copy", "pp", "Temp", "pad", "data", "stuff", "v", "np", "t", "nb", "front", "test", "tc"], "i": ["ji", "s", "k", "ui", "end", "ie", "int", "qi", "mi", "p", "phi", "ai", "_", "c", "h", "y", "r", "ini", "iq", "iu", "temp", "z", "si", "index", "x", "ind", "start", "I", "it", "l", "u", "d", "pi", "j", "f", "io", "m", "xi", "ori", "di", "ip", "ci", "length", "alpha", "v", "e", "t", "multi", "id", "li", "ii", "n", "bi", "ti"], "ans": ["s", "ents", "lan", "nas", "ras", "amps", "na", "ai", "xs", "Ann", "ions", "anas", "aos", "ads", "AN", "ANS", "ks", "aces", "names", "ann", "anon", "ani", "anc", "au", "ana", "es", "pa", "outs", "ars", "anus", "args", "aned", "ons", "aus", "cs", "ants", "acs", "ns", "os", "actions", "ls", "ANN", "ds", "ops", "an", "ad", "ins"], "a": ["aa", "wa", "sta", "va", "ma", "p", "ai", "aw", "c", "fa", "ama", "la", "ba", "ab", "au", "ana", "pa", "da", "x", "A", "ah", "af", "ia", "u", "aaa", "ca", "sa", "f", "ac", "asa", "ga", "area", "aj", "am", "ae", "alpha", "ea", "ada", "an", "ad", "n"], "b": ["aa", "k", "s", "ib", "p", "bs", "pb", "c", "g", "y", "r", "h", "wb", "bis", "mb", "ba", "B", "ab", "z", "x", "w", "sb", "body", "l", "bh", "u", "d", "rb", "bb", "bf", "f", "bd", "j", "m", "bot", "ae", "db", "v", "base", "e", "bc", "abe", "nb", "lb", "ad", "n"]}}
{"code": "import math\\n\\na, b = list(map(int, input().split()))\\nn = b * 10\\nflag = False\\nwhile n <= 1009:\\n    if math.floor(n * 0.1) == b and math.floor(n * 0.08) == a:\\n        flag = True\\n        break\\n    n += 1\\nprint(n) if flag is True else print(-1)\\n", "target": "418", "substitutes": {"a": ["aa", "s", "auto", "span", "p", "na", "c", "y", "r", "ba", "ab", "div", "z", "da", "index", "x", "A", "w", "u", "aaa", "ca", "f", "sa", " A", "ac", "ga", "area", "ae", "alpha", "ea", "base", "e", "an", "ad", "offset"], "b": ["s", "be", "k", "end", "ib", "fb", "p", "bs", "c", "i", "y", "r", "number", "wb", "beta", "B", "ba", "ab", "x", "sb", "bol", "l", "ok", "bb", "d", "bf", "rb", "u", "abb", "f", "bd", "j", "lib", "eb", "null", "binary", "bin", "v", "bar", "base", "e", "abc", "nb"], "n": ["s", "k", "span", "p", "g", "c", "i", "y", "o", "number", "num", "nc", "un", "bn", "rn", "size", "ne", "nu", "z", "fn", "x", "nan", "gn", "sn", "node", "conn", "adj", "l", "cn", "d", "u", "nt", "nn", "f", "j", "m", "ns", "no", "nl", "nr", "len", "v", "t", "N", "count", "e", "nit", "dn", "nb", "an", "nor"], "flag": ["bad", "error", "field", "group", "int", "ag", "oo", "arg", "init", "err", "hide", "log", "leaf", "year", "sign", "wave", "force", "long", "z", "store", "start", "bug", "wait", "ln", "f", "status", "lag", "style", "flags", "fun", "FLAG", "char", "free", "neg", "spin", "binary", "type", "len", "debug", "count", "add", "id", "big", "ret", "skip", "bit", "part", "Flag", "offset", "info"]}}
{"code": "# D - Static Sushi\\n\\nimport sys\\nimport numpy as np\\n\\nN, C = map(int, sys.stdin.buffer.readline().split())\\nx, v = [], []\\nfor _ in range(N):\\n    tmp, tmp2 = map(int, sys.stdin.buffer.readline().split())\\n    x.append(tmp)\\n    v.append(tmp2)\\n\\nx = np.array(x, np.int64)\\nv = np.array(v, np.int64)\\nv_cum = v.cumsum()\\ntx = np.flipud(x)\\ntv_cum = np.flipud(v).cumsum()\\nleft_cum = v_cum - x\\n\\nright_cum = tv_cum - np.flipud(C - x)\\nright_cum_max = np.maximum.accumulate(right_cum)\\n\\nright_cum_return = right_cum - np.flipud(C - x)\\nright_cum_return_max = np.maximum.accumulate(right_cum_return)\\n\\nans = max(0, np.max(left_cum), np.max(right_cum))\\n\\nfor first_abandon_idx in range(1, N):\\n    ans = max(ans, left_cum[first_abandon_idx-1] - x[first_abandon_idx-1] + right_cum_max[N-1 - first_abandon_idx])\\n    ans = max(ans, left_cum[first_abandon_idx-1] + right_cum_return_max[N-1 - first_abandon_idx])\\n\\nprint(ans)", "target": "127", "substitutes": {}}
{"code": "def solve():\\n    N = int(input())\\n    print(800 * N - (N // 15) * 200)\\n\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "492", "substitutes": {"N": ["F", "MN", "Number", "L", "V", "NN", "H", "NL", "Q", "X", "Y", "Size", "Num", "NS", "K", "Na", "NM", "O", "P", "T", "C", "B", "D", "Len", "S", "NT", "Node", "Ni", "Z", "Ns", "R", "M", "J", " n", "G", "Index", "NA", "n"]}}
{"code": "import math\\na,b,h,m = map(int, input().split())\\n# A: 360 / 720 [degree/min]\\n# B: 360/ 60 [degree/min]\\nr_a = 30*h + 0.5 * m\\nr_b = 6 * m\\nrad = math.pi * (r_a-r_b)/180\\nans = math.sqrt(a**2+b**2-2*a*b*math.cos(rad))\\nprint(ans)", "target": "290", "substitutes": {"a": ["aa", " p", "ma", "p", "c", " c", "ba", "div", "da", "x", "A", " alpha", "w", "ca", "sa", " A", "ac", "f", "alpha", "abc", "an", "ad", "n"], "b": ["p", "bs", "g", "c", "i", "y", "r", "emb", "wb", "beta", "mb", "B", "ab", "x", "w", "sb", "l", "bh", "bb", "d", "f", "binary", "v", "bar", "base", "bc", "abc"], "h": ["hs", "end", "sh", "H", "p", "g", "c", "y", "o", "r", "md", "z", "div", "x", "w", "hh", "bh", "u", "q", "f", "hi", "v", "help", "e", "mm", "hm"], "m": ["s", "k", "p", "ms", "g", "c", "i", "o", "r", "y", "im", "z", "module", "math", "mu", "w", "cm", "l", "u", "d", "f", "j", "M", "v", "e", "mm", "n"]}}
{"code": "n=int(input())\\nxyh=[list(map(int,input().split())) for i in range(n)]\\nxyh.sort(key=lambda x:x[2],reverse=True)\\nfor X in range(0,101):\\n    for Y in range(0,101):\\n        f=True\\n        H=xyh[0][2]+abs(xyh[0][0]-X)+abs(xyh[0][1]-Y)\\n        for i in range(1,n):\\n            x,y,h=xyh[i]\\n            if h==0:\\n                if H-abs(x-X)-abs(y-Y)>0:\\n                    f=False\\n                    break\\n            else:\\n                if H-abs(x-X)-abs(y-Y)!=h:\\n                    f=False\\n                    break\\n        if f:\\n            print(X,Y,H)\\n            break", "target": "114", "substitutes": {"n": ["s", "k", "p", "c", "o", "num", "nc", "en", "size", "ne", "z", "sn", "w", "l", "d", "pi", "nn", "nt", "j", "network", "m", "ns", "no", "len", "b", "v", "t", "N", "e", "nb", "nor"], "xyh": ["tinyx", "projecth", "djH", "indexH", "pyc", "xysh", "projectsh", "dybody", "pyp", "xyH", "pyhost", "xf", "noH", "dyq", "XYf", "xx", "pyh", "djp", "yc", "indexx", "twoc", "xsh", "twoh", "nop", "djh", "yh", "yq", "pyx", "xyhost", "indexsh", "tinyH", "xh", "XYH", "noh", "xxbody", "xxh", "projectx", "pyv", "XYp", "xyc", "tinyv", "yhost", "twohost", "xxq", "ybody", "XYh", "djv", "yH", "dyh", "indexv", "xH", "xyq", "xybody", "indexh", "nof", "xyv", "pyH", "xp", "twoH", "tinyh", "projectc", "xyf", "xyp", "xxH", "xyx", "xc", "indexc", "dyH", "xv"], "i": ["gi", "ih", "k", "ui", "a", "ie", "qi", "p", "ai", "c", "o", "ix", "ini", "iu", "z", "si", "index", "yi", "ind", "I", "l", "u", "pi", "d", "io", "j", "m", " j", "xi", "di", "ri", "ni", "ci", "hi", "ip", "b", "v", "e", "zi", "id", "li", "ii", "bi", "ti"], "X": ["F", "YY", "E", "L", "V", "DX", "Q", "XX", "RH", "XP", "Width", "EX", "K", "TH", "FF", "ZX", "O", "P", "B", "C", "T", "D", "WH", "S", "A", "W", "AX", "IX", "I", "EL", "TX", "Z", "XY", "PH", "U", "R", "Time", "UX", "J", "M", "XL", "N", "Xi", "Ex", "CH"], "Y": ["F", "YY", "E", "ID", "L", "V", "Q", "MI", "YN", "Poly", "YC", "Ay", "K", "TH", "YA", "Cy", "B", "P", "T", "D", "C", "IP", "Bu", "Year", "Ry", "S", "A", "W", "NY", "EY", "I", "TY", "SY", "MY", "Ni", "Z", "YE", "XY", "Py", "Yo", "U", "AY", "J", "M", "RY", "N", "G", "Col", "CH", "HY", "My"], "f": ["F", "s", "k", "end", "fd", "p", "g", "c", "fa", "r", "o", "rf", "sf", "fe", "inf", "tf", "fs", "z", "fc", "af", "w", "only", "l", "u", "d", "bf", "q", "j", "m", "found", "function", "df", "v", "b", "e", "t", "info", "form"], "H": ["F", "rh", "Hi", "E", "Hy", "L", "V", "HS", "Q", "HB", "g", "SH", "Ha", "HC", "AH", "ph", "O", "P", "T", "C", "B", "D", "NH", "S", "W", "EH", "I", "Rh", "GH", "GF", " F", "HK", "Z", "HH", "MH", "HM", "HI", "U", "R", "M", "FH", "N", "G", "HA", "RH"], "x": ["dx", "s", "k", "a", "int", "sex", "rex", "p", "event", "xs", "c", "plus", "xx", "yx", "work", "ix", "px", "number", "rx", "case", "o", "ph", "guy", "z", "xt", "ex", "xxx", " xx", "index", "xxxx", "time", "w", "cross", "l", "u", "d", "one", "ax", "m", "xi", "self", "xb", "no", "data", "v", "xp", "b", "pair", "e", "pe", "t", "xy", "py", "id", "xc", "xa", "on"], "y": ["s", "a", "dy", "ye", "gy", "p", "c", "yn", "o", "ym", "ay", "z", "zy", "yi", "cy", "w", "ny", "l", "u", "d", "yer", "j", "sy", "yy", "ya", "oy", "hi", "iy", "b", "v", "t", "xy", "py", "vy", "ry", "ey", "ies"], "h": ["rh", "hs", "ih", "end", "sh", "a", "hy", "p", "c", "oh", "gh", "r", "o", "ph", "hr", "z", "ah", "w", "hh", "l", "u", "he", "q", "HH", "j", "m", "hd", "han", "hi", "v", "b", "e", "ha", "uh", "t", "hm"]}}
{"code": "n = int(input())\\np = list(map(int,input().split()))\\n\\nfrom collections import deque\\ntemp = deque()\\nfor i in range(3):\\n    temp.append(p[i])\\ncounter = 0\\ntemp1 = sorted(temp)\\nif temp[1] == temp1[1]:\\n    counter += 1\\nfor i in range(n-3):\\n    temp.popleft()\\n    temp.append(p[i+3])\\n    temp1 = sorted(temp)\\n    if temp[1] == temp1[1]:\\n        counter += 1\\nprint(counter)", "target": "318", "substitutes": {"n": ["s", "k", "c", "h", "number", "nc", "num", "o", "r", "nu", "ne", "z", "x", "sn", "w", "l", "d", "pi", "nt", "q", "f", "j", "m", "ns", "no", "ni", "nl", "nr", "b", "np", "t", "N", "count", "nb", "nor"], "p": ["lp", "s", "op", "k", "a", "python", "pre", "ps", "bp", "c", "o", "r", "tp", "per", "y", "cp", "ap", "api", "P", "sp", "po", "params", "w", "l", "u", "pi", "d", "f", "j", "m", "pp", "list", "data", "v", "b", "np", "t", "e", "pc"], "temp": ["level", "pre", "content", "this", "empty", "white", "pack", "current", "l", "f", "model", "list", "type", "fake", "order", "session", "loop", "stable", "tmp", "api", "pt", "lc", "original", "clean", "flat", "buffer", " Temp", "tree", "v", "key", "atom", "print", "source", "form", "tc", "total", "unit", "wp", "extra", "tp", "result", "iter", "ex", "index", "cache", " temporary", "stack", "get", "input", "parent", "t", "config", "other", "table", "static", "c", "emp", "local", "cook", "valid", "shared", "w", "tem", "copy", "term", "Temp", "null", "output", "base", "test"], "i": ["ih", "k", "ui", "a", "ie", "int", "qi", "mi", "ai", "c", "y", "o", "ix", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "io", "j", "f", "m", "xi", "ri", "di", "ni", "ip", "ci", "nr", "v", "b", "e", "count", "id", "li", "ii"], "counter": ["name", "cur", "trace", "const", "collection", "code", "pointer", "hello", "currency", "inter", "c", "handler", "number", "num", "result", "instance", "Counter", "rew", "iter", "phrase", "time", "index", "x", "cookie", "current", "offset", "page", "outer", "ignore", "clock", "stop", "entry", "no", "match", "type", "key", "race", "order", "count", "reference", "ter", "step", "id", "inner", "exit", "loop", "sum", "info"], "temp1": ["temp2", "Temp3", "tem1", "tempOne", "tem0", " tempOne", "Temp0", "tem2", "temp8", "tem8", " temp3", "Tempone", "temp0", " tempone", "temOne", "get1", " temp0", "getone", "emp1", "emp2", "Temp1", "temone", "p1", " temp8", "tempone", "emp0", "p2", "empone", "get2", "Temp2", "pOne", " temp2", "get0", "p8", "emp3", "temp3"]}}
{"code": "X, Y = map(int, input().split())\\nMOD = 10 ** 9 + 7\\n\\n\\nS = -X + 2 * Y\\nT = 2 * X - Y\\n\\nif S < 0 or T < 0:\\n    print(0)\\n    exit()\\nif S % 3 != 0 or T % 3 != 0:\\n    print(0)\\n    exit()\\n\\nS //= 3\\nT //= 3\\n\\n\\ndef cmb(n, r, p):\\n    r = min(n - r, r)\\n    if r == 0:\\n        return 1\\n    over = 1\\n    for i in range(n, n - r, -1):\\n        over = over * i % p\\n    under = 1\\n    for i in range(1, r + 1):\\n        under = under * i % p\\n    inv = pow(under, p - 2, p)\\n    return over * inv % p\\n\\n\\n# print(S, T)\\nans = cmb(S + T, S, MOD) % MOD\\nprint(ans % MOD)\\n", "target": "759", "substitutes": {"X": ["F", "E", "L", "V", "H", "Q", "XX", "XP", "NS", "K", "P", "C", "D", "IP", "x", "A", "W", "IX", "I", "TX", "Z", "XY", "U", "R", "UX", "Time", "M", "XL", "N"], "Y": ["F", "YY", "E", "ID", "V", "Q", "YC", "K", "y", " y", "IE", "Ty", "AM", "YA", "Cy", "B", "P", "D", "IP", "MK", "YR", "A", "W", "NY", "EY", "I", "TY", "SY", "MY", "Z", "IO", "XY", "Py", "U", "AY", "J", "RY", "M", "N", "CH", "HY"], "MOD": [" TS", "CT", " M", "SR", "TA", "TS", " TT", "tr", "section", "TR", "C", "D", " C", "time", "sec", "SS", "TM", "Z", "TT", "TC", "M", "MS", "ts", "mod", " Z", " P", " TC", "Mod"], "S": ["F", " TS", "s", "L", "V", "H", "SC", " s", "SE", "Q", "NS", "INS", "Si", "K", "SEC", "TS", "PS", "SH", "ST", "SI", "Su", "O", "SA", "P", "C", "SK", " SD", "oS", "D", " C", "Sa", " SS", "A", "W", "I", "SS", "OS", "Z", "CS", "U", "R", "M", " SF", "N", "SN", "SD", "G", "SU"], "T": ["F", "AT", "E", "L", "V", "LT", "H", "Q", "RT", "K", "TS", "TN", "TH", "O", "P", "C", "B", "D", "TG", "A", "TB", "W", "I", "NT", "UT", "FT", "TE", "TX", "Z", "TT", "TC", "U", "R", "Time", "M", "TF", "t", "N", "MT", "G", "VT", "PT"], "n": ["min", "k", "c", "y", "o", "num", "h", "rn", "ne", "z", "x", "w", "l", "u", "d", "nt", "q", "f", "j", "m", "ns", "nr", "b", "v", "t", "N", "e"], "r": ["rh", "yr", "rr", "s", "a", "mr", "c", "err", "h", "rd", "rec", "pr", "rf", "re", "rn", "hr", "ro", "x", "ar", "w", "l", "u", "d", "rb", "ra", "f", "sr", "right", "m", "ir", "range", "dr", "rc", "rt", "rg", "R", "nr", "b", "v", "e", "order", "fr", "cr", "ru", "rs"], "p": ["lp", "s", "a", "pid", "int", "power", "ps", "pre", "bp", "c", "fp", "y", "tp", "per", "h", "pr", "cp", "pm", "ap", "P", "sp", "proc", "z", "pa", "x", "ar", "w", "par", "l", "php", "u", "pi", "d", "pl", "q", "j", "jp", "f", "param", "m", "pp", "point", "port", "up", "ip", "v", "b", "np", "t", "pe", "e", "pn", "py", "after", "er", "part", "pc"], "over": ["rr", "error", "group", "above", "open", "pre", "inter", "ore", "number", " Over", "prev", "rew", "hard", "re", "ver", "air", "ever", "ider", "x", "Over", "are", "now", "om", "user", "OVER", "upper", "out", "outer", "f", "uper", "ir", "ire", "m", "up", "R", "adr", "between", "b", "v", "e", "order", "cover", "overs", "after", "ror", "very", "er", "off", "ip"], "i": ["k", "a", "ie", "int", "qi", "phi", "ai", "c", "y", "h", "ini", "im", "inf", "iu", "z", "si", "x", "ar", "ind", "I", "l", "u", "pi", "d", "q", "f", "j", "ir", "m", "xi", "ip", "v", "b", "e", "id", "li", "ii", "range"], "under": ["rr", "int", "above", "ground", "dist", "ore", "enny", "per", "un", "rew", "hard", "rf", "ver", "air", "lower", "ower", "idd", "ever", "behind", "ider", "flower", "are", "now", "u", " Under", "upp", "fore", "own", "f", "upper", "ir", "ior", "dr", "old", "up", "below", "df", "arrow", "isf", "ip", "v", "ow", "pair", "e", "Under", "nder", "river", "cover", "double", "after", "er", "und", "part", "ori"], "inv": ["min", "rr", "rav", "sq", "Inv", "rup", "invest", "extra", "var", "adv", "prev", "im", "orig", "rec", "law", "iq", "like", "vs", "nu", "rev", "mini", "au", "adjust", "nov", "inc", "mu", "w", "adj", "ovo", "inventory", "u", "q", "out", "eq", "ln", "ior", "aux", "pkg", "nr", "v", "dev", "owski", "le", "sum", "block", "ip"]}}
{"code": "S = input()[:-1]\\nans = 0\\n\\nfor i in range(len(S)):\\n    if S[:len(S)//2] == S[len(S)//2:]:\\n        ans = len(S)\\n        break\\n    else:\\n        S = S[:-1]\\nprint(ans)", "target": "696", "substitutes": {"S": ["F", "ss", "s", "E", "L", "DS", "V", "H", "Q", "X", "Y", "SE", "Sample", "NS", "Si", "K", "TS", "PS", "SH", "ST", "AN", "SI", "ANS", "O", "OSS", "P", "T", "B", "C", "D", "SK", "SA", "A", "Service", "RS", "Sl", "I", "Sing", "SS", "Single", "Site", "Send", "U", "R", "Input", "Part", "M", "Sign", "String", "SM", "N", "SN", "G", "SO", "SU", "Socket"], "ans": ["ss", "ano", "ain", "lan", "nas", "cas", "amps", "span", "atan", "na", "ats", "Ann", "aning", "anas", "AN", "ANS", "anes", "ane", "annels", "ann", "anse", "ani", "anc", "anon", "ana", "ania", "can", "nan", "An", "anned", "ars", "anus", "aned", "ons", "anan", "aus", "leans", "cs", "ants", "ns", "os", "san", "ean", "ANN", "ds", "an", "ins"], "i": ["gi", "k", "a", "p", "ai", "g", "c", "h", "r", "num", "iu", "lo", "z", "si", "index", "x", "ind", "I", "l", "d", "j", "f", "e", "id", "li", "ii", "n", "ip"]}}
{"code": "a = list(map(int,input().split()))\\nx = 3*a[0]\\ny = a[1]\\nz = (x+y)//2\\nprint(z)\\n", "target": "428", "substitutes": {"a": ["s", "auto", "int", "span", "p", "na", "c", "aw", "ab", "au", "array", "da", "A", "w", "ia", "l", "u", "ca", "sa", "f", "asa", "ac", "ga", "area", "aux", "aj", "ae", "data", "alpha", "b", "ea", "e", "za", "an", "ad", "n"], "x": ["dx", "wa", "gy", "X", "p", "c", "i", "xx", "width", "yx", "h", "rx", "ix", "px", "pos", " xx", "index", "ex", "w", "l", "Z", "ax", "j", "m", "ww", "xi", "ya", "v", "b", "e", "xy", "step", "xa", "n"], "y": ["yr", "yd", "ys", "dy", "ye", "gy", "p", "Y", "c", "i", "ym", "zy", "yi", "wy", "cy", "yo", "ny", "yt", "d", "sy", "j", "ky", "yy", "ya", "oy", "b", "yl", "t", "xy", "vy", "ry", "ey", "n"], "z": ["iz", "ze", "gy", "p", "Y", "tz", "c", "zone", "xx", "h", "height", "o", "az", "zy", "zh", "index", "w", "yz", "l", "d", "j", "Z", "f", "m", "zen", "ya", "alpha", "v", "zip", "e", "xy", "zi", "gz", "za", "n"]}}
{"code": "#template\\ndef inputlist(): return [int(j) for j in input().split()]\\n#template\\n#issue\u304b\u3089\u59cb\u3081\u308b\\nN,A,B = inputlist()\\nif (B-A-1) % 2 == 1:\\n    print(\"Alice\")\\nif (B-A-1) % 2 == 0:\\n    print(\"Borys\")", "target": "507", "substitutes": {}}
{"code": "n=int(input())\\ndef digitSum(n):\\n    # \u6570\u5024\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\\n    s = str(n)\\n    # \uff11\u6587\u5b57\u305a\u3064\u6570\u5024\u5316\u3057\u914d\u5217\u306b\u3059\u308b\u3002\\n    array = list(map(int, s))\\n    # \u5408\u8a08\u5024\u3092\u8fd4\u3059\\n    return sum(array)\\nprint(\"Yes\" if n%digitSum(n)==0 else \"No\")", "target": "161", "substitutes": {"n": [" N", "name", "k", "a", "code", "p", "g", "c", "i", "o", "number", "y", "num", "r", "h", "z", "fn", "x", "next", "l", "u", "d", "nn", "f", "network", "j", "m", "none", "ns", "v", "b", "np", "e", "N", "t", "nb"]}}
{"code": "def main():\\n    import sys\\n    def input(): return sys.stdin.readline().rstrip()\\n    n = int(input())\\n    lx = []\\n    rx = []\\n    for i in range(n):\\n        a = 0\\n        cnt = 0\\n        for j in input():\\n            if j == '(':\\n                cnt += 1\\n            else:\\n                cnt -= 1\\n            a = min(a, cnt)\\n        \\n        if cnt >= 0:\\n            lx.append((a, cnt))\\n        else:\\n            rx.append((a, cnt))\\n    lx.sort(key= lambda x: -x[0]) # -a\u306e\u6607\u9806\\n    rx.sort(key= lambda x: x[0]-x[1]) # -b\u306e\u6607\u9806(b\u306e\u964d\u9806)\\n    total = 0\\n    check = True\\n    for x,cnt in (lx+rx):\\n        if total + x < 0:\\n            check = False\\n            break\\n        total += cnt\\n    if total == 0 and check:\\n        print('Yes')\\n    else:\\n        print(\"No\")\\n    \\n\\n\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "7", "substitutes": {"n": ["s", "k", "p", "c", "o", "y", "nc", "num", "r", "ne", "z", "x", "nan", "sn", "l", "u", "d", "nt", "nn", "f", "m", "ns", "no", "b", "len", "t", "N", "e", "count", "nb", "an"], "lx": ["ilint", "lX", "lw", "rint", "dlx", " lX", "rw", "ulrx", "ilc", "ilx", "lint", "lex", "elx", "llX", " lrx", " lint", "lc", " lc", "dlux", " lw", "elex", "ulx", "elrx", "elux", "llux", "ilw", "rc", "lux", "llx", "lrx", "ulux", "ulX", "dlex", "llrx", " lux", " lex", "dlrx"], "rx": ["rh", "rr", "loc", "ross", "nox", "rex", "rm", "xf", "tx", "zx", "hea", "yx", "rw", "fx", "lex", "r", "rf", "lr", "x", "wy", "pex", "cross", "wx", "ctx", "rb", "rou", "rc", "sync", "rl", "xi", "ux", "mx", "rt", "xb", "rin", "ri", " Rx", "xml", "xc", "rio", "abc", "rss", "xa", "xxxxxxxx"], "i": ["gi", "ji", "k", "ie", "p", "ai", "c", "jo", "y", "h", "jj", "z", "ind", "I", "l", "d", "q", "jp", "ct", "ij", "J", "b", "e", "t", "li", "ip"], "a": ["aa", "s", "wa", "sta", "va", "ma", "p", "na", "qa", "ai", "c", "aw", "fa", "y", "r", "asha", "la", "ba", "ab", "au", "ana", "pa", "x", "da", "index", "A", "ar", "af", "w", "ia", "l", "d", "sha", "aaa", "ca", "f", "sa", "ac", "asa", "ga", "area", "aj", "ya", "ae", "alpha", "b", "ea", "e", "ha", "count", "za", "an"], "cnt": ["cNT", " cpt", "ccnt", "cpt", "CNT", "cnc", "rnd", "rcno", "fcno", "lcpt", " crt", " cNT", "Cpt", " cct", "cct", "lcnc", "rcnt", "rcount", "crt", " cnc", "acnt", "lcrt", "Cnt", " cno", "ccrt", "fcct", "fcnt", "Cnc", "rnt", "Cno", "acNT", " cnd", "ccnc", "lcnd", "lcnn", "ccct", "rnn", "acnn", " count", "cno", "rcNT", "lcnt", "rnc", "fcrt", "acct", "lcct", "Crt", "lcno", "count", "cnn", "Cct", "lcNT", "cnd", "Count", " cnn"], "j": ["ji", " p", "k", "ja", " je", "p", " dj", " r", "o", "jj", " c", "item", " jack", " ja", "z", "je", " jobs", "l", " b", "uj", " J", "q", "js", "job", "jp", "f", "oj", " si", "aj", "ij", "J", "b", " l", " jo", " job", " section", " d"]}}
{"code": "a=list(map(int,input().split()))\\na.sort()\\n#print(a)\\nb1=a[2]-a[0]\\nb2=a[2]-a[1]\\n\\nif b1%2==0 and b2%2==0:\\n    print(b1//2+b2//2)\\nelif b1%2==1 and b2%2==1:\\n    print(b1//2+b2//2+1)\\nelse:\\n    print(b1//2+b2//2+2)\\n", "target": "107", "substitutes": {"a": ["aa", "span", "p", "ama", "c", "i", "la", "ba", "ab", "div", "array", "ana", "A", "w", "ata", "l", "u", "sup", "ca", "aaa", "sa", "f", "ac", "ga", "parser", "area", "aux", "aj", "ava", "alpha", "b", "an", "n"]}}
{"code": "K,T=map(int,input().split())\\na=list(map(int,input().split()))\\na.sort()\\na.reverse()\\nans=2*a[0]-sum(a)-1\\nif ans<0:\\n    ans=0\\nprint(ans)\\n", "target": "549", "substitutes": {"K": [" N", "F", "k", "E", "V", "H", "Q", "X", "Y", "_", "Sk", " k", "ks", "P", "C", "B", "SK", "D", "O", "KS", "W", "Z", "KR", "R", "J", "M", "N", "G"], "T": ["F", "E", "V", "H", "Q", "X", "p", "Y", "TS", "TN", "O", "P", "B", "C", "D", "S", "TB", "W", "TX", "Z", "TT", "U", "R", "M", "t", "N", "WT"], "a": ["aa", "s", "k", "tta", "ao", "va", "at", "p", "ai", "c", "aw", "fa", "i", "y", "la", "ba", "mA", "ab", "au", "array", "ana", "pa", "x", "da", "ar", "A", "af", "ata", "l", "d", "ta", "f", "ca", "sa", "asa", "ac", "m", "ga", "area", "aux", "am", "ae", "alpha", "b", "ea", "t", "e", "an", "ad", "n"], "ans": ["ss", "s", "aid", "ents", "lan", "nas", "offs", "cas", "ams", "atan", "na", "anges", "ats", "aning", "activation", "anas", "AN", "ads", "ANS", "asts", "ks", "anes", "mean", "aces", "annels", "ann", "anon", "ani", "anc", "ana", "ays", "ania", "can", "nan", " means", "ars", "anus", "aves", "aned", "ons", "aus", "leans", "ens", "cs", "ants", "atches", "ns", "ases", "os", "acts", "ls", "ians", "ds", "ops", "artifacts", "an", "ins"]}}
{"code": "n, a, b = map(int,input().split())\\nh = [ int(input()) for i in range(n)]\\nmaxim_h =  max(h)\\n\\nok = (maxim_h + a - 1) // a * n\\nng = 0\\nwhile abs(ok - ng) > 1:\\n\\n    X = (ok + ng) // 2\\n    #X\u56de\u7206\u767a\u3092\u8d77\u3053\u3059\u5fc5\u8981\u304c\u3042\u308b\u3068\u4eee\u5b9a\u3059\u308b\\n\\n    cnt = 0\\n    flag = 1\\n    for val in h:\\n        if val <= b * X:continue\\n        temp = (val - b * X + a - b - 1) // (a - b)\\n        cnt += temp\\n\\n        if cnt > X:\\n            flag = 0\\n            break\\n\\n    #print(X, cnt, ok)\\n    if flag:ok = X\\n    else:ng = X\\nprint(ok)\\n", "target": "51", "substitutes": {"n": ["k", "p", "g", "c", "o", "y", "r", "num", "number", "nc", "size", "ne", "z", "x", "sn", "w", "l", "u", "d", "q", "f", "j", "m", "ns", "v", "e", "N", "count", "nb", "an"], "a": ["min", "aa", "s", "wa", "va", "ma", "p", "na", "ai", "g", "c", "y", "ba", "ab", "au", "z", "da", "x", "A", "w", "ak", "u", "d", "ca", "sa", "f", "ac", "m", "j", "area", "aj", "am", "ae", "alpha", "all", "an", "ad"], "b": ["ib", "p", "bs", "bp", "g", "c", "y", "beta", "B", "ab", "z", "x", "w", "sb", "bb", "d", "u", "rb", "abb", "f", "j", "v", "bc", "nb"], "h": ["rh", "hs", "k", "loc", "sh", "H", "p", "c", "host", "oh", "o", "y", "r", "num", "ph", "z", "x", "ah", "w", "hh", "l", "bh", "th", "d", "max", "q", "f", "m", "v", "ha", "e", "count", "hm", "hp"], "i": ["gi", "k", " bi", " z", "p", "ai", "c", " I", " iP", "ix", "pos", "index", "x", "ind", "I", "it", "u", "d", "j", " j", " ii", "id", "li", "ii", "ip"], "maxim_h": ["maxlim_sh", "maxim_sh", "maxlim_f", "maxim_c", "maxlim_h", "maxlim_c", "maxim_p", "maxlim_w", "maxim_w", "maxim_hh", "maxim_f", "maxlim_p", "maxlim_hh"], "ok": ["ih", "k", "loc", "ack", "dy", "p", "ai", "c", "oh", "o", "y", "num", "ready", "work", "md", "Ok", "ick", "ann", "od", "x", "ah", "w", "ind", "inc", "ko", "ak", "bug", "d", "max", "q", "f", "j", "ax", "oy", "check", "length", "OK", "ck", "e", "good", "dec", "big", "id"], "ng": ["gi", "rh", "ih", "wn", "aa", "sq", "loc", "mn", "ining", "eng", "win", "na", "ong", "nd", "g", "img", "working", "ning", "xx", "ing", "gh", "nc", "king", "bling", "ig", "rn", "hing", "ann", "ne", "xxx", "x", "nih", "gn", "ah", "inc", "NG", "nn", "nz", "yang", "nw", "sw", "ping", "bot", "my", "bc", "bg", "big", "cl", "sam", "abc", "nb", "ang", "org"], "X": ["F", "L", "NN", "H", "Q", "XX", "Y", "xx", "K", "O", "P", "B", "C", "x", "W", "AX", "XXX", "I", "NG", "Z", "R", "length", "OK", "J", "M", "XL", "N", "G"]}}
{"code": "s = input()\\ni = 0\\nS1 = []\\nS2 = []\\nwater = []\\nwtot = 0\\nwhile i < len(s):\\n    if s[i] == \"\\\\\":\\n        S1.append(i)\\n    elif s[i] == '/' and len(S1) != 0:\\n        w0 = (i - S1[-1])\\n        wtot += w0\\n        if len(S2) == 0:\\n            S2.append((S1[-1], w0))\\n        else:\\n            while len(S2) != 0 and S2[-1][0] > S1[-1]:\\n                w0 += S2[-1][1]\\n                S2.pop()\\n            S2.append((S1[-1], w0))\\n        S1.pop()\\n    i += 1\\n\\nans = str(wtot) + '\\n' + str(len(S2))\\nfor p in S2:\\n    ans += ' ' + str(p[1])\\nprint(ans)\\n\\n", "target": "394", "substitutes": {"s": ["ss", "strings", "a", "ys", "qs", "groups", "ps", "states", "xs", "c", "g", "sym", "sets", "o", "h", "ims", "times", "ks", "aces", "ows", "si", "es", "blocks", "S", "w", "parts", "l", "u", "d", "services", "ses", "f", "ssl", "m", "cs", "ments", "ns", "os", "abs", "gs", "b", "v", "ings", "ts", "t", "ls", "e", "opens", "ds", "n", "ins"], "i": ["gi", "ui", "ie", "int", "ei", "qi", "mi", "phi", "ai", "c", "o", "y", "ini", "iu", "ti", "z", "eni", "si", "index", "yi", "x", "ind", "start", "I", "it", "l", "u", "pi", "d", "j", "io", "f", "adi", "m", "xi", "ori", "input", "di", "ri", "ni", "ci", "ip", "b", "v", "t", "e", "zi", "id", "li", "ii", "bi", "n"], "S1": ["Sone", "SS3", "NEC", "SS0", "SFirst", "P2", " S4", "SS2", "SSFirst", "SUFirst", "SS4", "Pp", " S81", "s2", "S3", "P3", "SEC", " S8", "P0", "s81", "sp", "SU1", "s1", "s4", " SFirst", "N4", "Sp", " Sp", "sone", "S4", "S81", "N2", "s8", "P1", "P8", "S0", "S8", " Sone", "s0", "N0", " SEC", "N1", " S0", "SS1", "P81", "SU3", "s3", "sEC", "SU2", " S3"], "S2": ["V1", "P2", "V2", "SII", "Se2", "s2", "WS2", "S20", "s4", "STwo", "SStwo", "N4", "S5", "S62", " S82", "Se1", "SP2", " S52", " Sb", "ssecond", "sII", "Vb", "SS3", "SS2", "SP1", "DS1", "N82", " SSSecond", "DS2", "SS20", "S3", "SS5", "DStwo", "Se4", "s82", " SSecond", " Ssecond", "WS0", "N2", "SP62", " SS1", "N1", "SSecond", " S5", "SS1", " Stwo", " S4", " S3", "S82", "SPsecond", " SStwo", "s52", "s20", "s62", "Ntwo", "s1", "Sb", "S4", "Setwo", "P1", "S0", "V0", "s0", "NII", " SS2", " STwo", " S0", "Nb", "s3", "DS82", "Stwo", " SII", "N5", " S62", "sTwo", "WS52", "S52", "WSTwo", "SSSecond", "P4", "Ssecond", "N0", "s5", "P82", "stwo", " S20"], "water": ["lp", "ss", "wa", "span", "wp", "eps", "na", "ps", "ai", "aw", "en", "Ps", "au", "Sa", "pa", "ar", "sa", "sw", "man", "parser", "ws", "sea", "ep", "ice", "ips", "pn", "oss", "sense"], "wtot": ["wbot", "WToot", "wtop", "WTot", "wbop", "wtoot", "twOT", "iwot", "twota", "wtota", "iwott", "WTOT", "wots", "WTott", "Wrots", "wtots", "WrOT", "Wroot", "wot", "WTota", "wbott", "WTots", "wtott", "RWOT", "woot", "iwop", "iwOT", "RWota", "RWott", "twop", "twott", "wtOT", "wOT", "Wrot", "wbOT", "RWot", "twot"], "w0": ["W0", " w00", "ew2", "wa1", " w6", "sw00", "W00", "hee", "wa00", "waee", "h0", "h1", "ew1", "W2", "w1", "w6", "wa0", "sw0", "W6", "sw2", "ewee", "wa6", "w00", "wee", "ew0", "W1", " w2", " wee", "h00", "ew00", "w2", "swee", " w1", "Wee", "wa2"], "ans": ["ents", "lan", "nas", "ras", "amps", "eps", "na", "ps", "ms", "ai", "atan", "ats", "Ann", "ions", "aning", "anas", "AN", "ANS", "anes", "ks", "ann", "anse", "anc", "ays", "ana", "can", " means", "An", "ars", "anus", "aned", "ations", "ons", "aus", "sk", "ants", "ns", "ases", "os", "san", "ls", "ds", "ops", "an", "ins"], "p": ["lp", "op", "k", "a", "pop", "pre", "bp", "ps", "c", "fp", "o", "case", "r", "tp", "pr", "pos", "P", "sp", "po", "pa", "x", "w", "par", "u", "q", "j", "jp", "param", "point", "m", "v", "b", "np", "t", "pe", "pse", "part", " P", "n", "pc"]}}
{"code": "n,a,b=map(int,input().split())\\ncount=0\\nfor i in range(n):\\n    S=sum(list(map(int,(str(i+1)))))\\n    if a<=S<=b:\\n        count+=i+1\\nprint(count)\\n", "target": "704", "substitutes": {"n": ["s", "k", "p", "g", "c", "y", "number", "o", "num", "r", "h", "size", "ne", "z", "x", "w", "l", "u", "d", "f", "j", "m", "ns", "v", "e", "N", "t", "nb"], "a": ["aa", "s", "wa", "va", "span", "p", "na", "ai", "c", "y", "o", "ba", "ab", "si", "AA", "da", "A", "u", "d", "f", "sa", " A", "ac", "ga", "asa", "area", "am", "alpha", "N", "NA", "an", "ad", "offset"], "b": ["s", "k", "fb", "p", "bs", "c", "y", "o", "r", "h", "wb", "B", "ba", "ab", "x", "A", "w", "sb", "cb", "l", "bb", "d", "f", "j", "v", "NB", "base", "e", "nb", "lb", "bi"], "count": ["call", "int", "code", "missing", "total", "p", "c", "number", "num", "case", "weight", "split", "C", "size", "counter", "index", "x", "cache", "now", "ind", "start", "current", "l", "child", "nt", "q", "f", "found", "depth", "list", "length", "type", "len", "key", "base", "limit", "order", "N", "id", "Count", "SU", "test", "sum", "offset"], "i": ["gi", "k", "ui", "ie", "int", "mi", "p", "ai", "c", "o", "y", "ini", "iu", "z", "mini", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "j", "f", "m", "di", "ri", "ip", "ci", "v", "e", "zi", "id", "li", "ii", "bi"], "S": ["F", "ss", "s", "sq", "L", "V", "H", "Q", "X", " s", "Y", "SE", "NS", "Si", "SH", "SI", "O", "SA", "P", "T", "B", "C", "D", "SK", "Sa", "A", "W", "SIZE", "I", "SS", "U", "R", "M", "N", "session", "Sum", "G", "SU"]}}
{"code": "from collections import Counter\\nfrom math import factorial\\n\\n\\nN, A, B = map(int, input().split())\\nV = list(map(int, input().split()))\\nC = Counter(V)\\nkeys = list(C.keys())\\nkeys.sort(reverse=True)\\n\\nif C[keys[0]] >= A:\\n    mean = keys[0]\\n    var = 0\\n    for i in range(A, min(B, C[keys[0]]) + 1):\\n        var += factorial(C[keys[0]]) // factorial(i) // factorial(C[keys[0]] - i)\\nelse:\\n    cnt = 0\\n    total = 0\\n    var = 0\\n    for v in keys:\\n        if cnt + C[v] < A:\\n            cnt += C[v]\\n            total += v * C[v]\\n        else:\\n            total += v * (A - cnt)\\n            mean = total / A\\n            var += factorial(C[v]) // factorial((A - cnt)) // factorial(C[v] - (A - cnt))\\n            break\\n\\nprint(mean)\\nprint(var)\\n", "target": "345", "substitutes": {"N": ["F", "E", "L", "H", "X", "Y", "Num", "NS", "K", "Na", "O", "P", "T", "D", "S", "W", "I", "Ns", "U", "R", "M", "NB", "G", " n", "n"], "A": ["At", "Az", "MA", "LA", "K", "BA", "AH", "API", "AA", "Total", "G", "Fa", "First", "Ca", "L", "H", "Area", "Q", "X", "IA", "AB", "Bu", "AU", "As", "au", "Alpha", "Data", "U", "J", "NA", "App", "Australia", "AI", "This", "Na", "O", "SA", "mA", "S", "Ma", "Z", "R", "alpha", "M", "The", "F", "E", "a", "Ak", "Y", "AP", "AR", "TA", "EA", "Ha", "P", "T", "AC", "D", "Ar", "W", "I", "PA", "Average", "Auth", "CA", "AY", "KA", "n"], "B": ["F", "E", "L", "LB", "Q", "X", "Y", "Bi", "DB", "BA", "AB", "O", "P", "T", "D", "BB", "BC", "BI", "BD", "BF", "W", "TB", "I", "MB", "BE", "WB", "Beta", "U", "R", "GB", "M", "b", "NB", "G", "BS", "Bs"], "V": ["F", "VS", "E", "vi", "L", "VO", "Vi", "Q", "X", "Y", "K", "P", "T", "D", "S", "W", "VP", "I", "UV", "VA", "VC", "VD", "Z", "VM", "U", "R", "NV", "IV", "M", "J", "VB", "G", "VI", "GV", "Vs", "VL", "VT"], "C": ["F", "CV", "CT", "You", "E", "CE", "Cs", "L", "FC", "CI", "Cu", "H", "CU", "SC", "X", "Y", "NC", "Size", "c", "YC", "DC", "K", "Comp", "CNN", "HC", "O", "P", "T", "D", "EC", "WC", "AC", "Cache", "S", "GC", "W", "CM", "CF", "KC", "I", "Chart", "Ch", "VC", "Sc", "Con", "Code", "CL", "CA", "MC", "Collection", "CS", "U", "R", "JC", "M", "CP", "CC", "Custom", "Chain", "Case", "G", "CW", "Col", "CR", "Co", "Control"], "keys": ["s", "strings", "ms", "rows", "y", "ks", "names", "vers", "errors", "blocks", "x", "parts", "files", "ids", "docs", "types", "fields", "length", "ops", "changes", "Key", "makers", "weights", "states", "bs", "xs", "cases", "parents", "dot", "items", "Keys", "shape", "key", "powers", "ips", " Keys", "ys", "vals", "members", "rules", "values", "codes", "es", "index", "params", "mu", "lines", "planes", "ns", "objects", "rank", "alpha", "xes", "count", "lists", "YS", "levels", "k", "frames", "checks", "qs", "groups", "words", "c", "cats", "vs", "models", "classes", "diff", "versions", "pieces", "cells", "links", "args", "ports", "Names", "chains"], "mean": ["mass", "error", "aa", "mad", "a", "ma", "na", "std", "err", "miss", "md", "mas", "weight", "spread", "au", "scale", "cost", "diff", "norm", "av", "mu", "tan", "meta", "doc", "ta", "m", "rank", "shape", "data", "average", "alpha", "med", "type", "dev", "summary", "count", "val", "sav", "parse", "percent", "an", "sum", "ad"], "var": ["error", "cur", "risk", "variable", "mad", "const", "int", "span", "p", "err", "y", "result", "iter", "attr", "au", "scale", "adjust", "cost", "ar", "valid", "mu", "par", "tax", "bb", "max", "Var", "ta", "vol", "frac", "fat", "cat", "pp", "dr", "rank", "verage", "shape", "data", "average", "alpha", "length", "type", "bar", "feature", "dev", "Total", "count", "quant", "grade", "cover", "sav", "vari", "sum", "ad", "info"], "i": ["gi", "k", "ui", "vi", "a", "ie", "int", "qi", "p", "phi", "ai", "c", "y", "ini", "iu", "ti", "z", "mini", "si", "x", "yi", "ind", "I", "l", "u", "pi", "d", "j", "f", "io", "m", "xi", "di", "ri", "ni", "ij", "b", "e", "t", "id", "li", "ii", "n", "bi", "ip"], "cnt": ["cNT", "lcred", "acount", "Ccount", "CNT", " ccount", "cnc", "cned", " cred", "lcned", "Cwd", "incnet", " cNT", " cwd", "cct", "lcnc", "ccount", " cnc", "acnt", "Cnt", "fcnd", "cnet", "incnt", " cnet", "fcct", "fcnt", "Cnc", "lcnet", "acNT", " cned", "mcnc", "Cred", " cnd", "account", "lcnd", "fcwd", "Cnn", " count", "incned", "mcount", "acnc", "lcnt", "mcnt", "incnc", "lcct", "cnd", "mcnn", "lcwd", "count", "cnn", "Cct", "lcNT", "lcount", "cwd", "cred", "Cnd", "Count", " cnn"], "total": ["error", "aa", "full", "mad", "auto", " tot", "va", "ma", " whole", "normal", "tt", " summed", " sum", "eta", "post", "otal", "net", "ph", " cat", "dot", "final", "scale", "cost", "au", "valid", "now", "tax", "ass", "doc", "less", " totals", "nt", "ta", "max", "frac", "trans", "fat", "cat", "null", "parent", "no", "Total", "average", "alpha", "length", "type", "base", "t", "all", "Sum", "count", "quant", "percent", "volume", "sum", "info"], "v": ["k", "vi", "ui", "variable", "a", "value", "uv", "va", "ve", "p", "g", "c", "vd", "y", "h", "o", "vid", "ver", "api", "lv", "vs", "qv", "vin", "rev", "vp", "x", "nv", "av", "vm", "w", "l", "u", "q", "iv", "f", "j", "vol", "m", "vv", "vc", "alpha", "b", "key", "t", "e", "val", "ev", "sv", "uu", "volume", "vari", "ii", "sum", "n"]}}
{"code": "N=int(input())\\nA=input()\\nB=input()\\nC=input()\\n\\nnum=0\\nfor i in range(N):\\n    str=[]\\n    str.append(A[i])\\n    str.append(B[i])\\n    str.append(C[i])\\n    num=num+len(set(str))-1\\nprint(num)", "target": "648", "substitutes": {"N": ["F", "Length", "L", "NO", "V", "NL", "X", "Y", "Size", "NC", "Num", "NS", "NE", "K", "CNN", "O", "P", "T", "D", "Len", "Ne", "S", "W", "I", "NT", "Ni", "Z", "Ns", "R", "M", "NB", " n", "NUM", "n"], "A": ["F", "AD", "a", "At", "Al", "H", "Az", "AS", "AP", "LA", "AR", "EA", "BA", "AB", "P", "AU", "AC", "As", "D", "Ar", "AAA", "API", "AA", "Alpha", "S", "Ab", "Auth", "Art", "CA", "Ant", "AF", "M", "AMI", "G", "Am", "Ang", "Ac"], "B": ["F", "E", "LB", "V", "X", "UB", "PB", "DB", "BA", "AB", "O", "P", "T", "D", "SB", "BB", "BC", "BI", "BD", "W", "BBC", "RB", "Ab", "OB", "R", "Blue", "M", "b", "NB", "Both", "G", "BS", "Ub", "Bs"], "C": ["F", "E", "CE", "Cs", "L", "Q", "CU", "X", "c", "DC", "K", "CNN", "P", "T", "D", "AC", "BC", "S", "GC", "W", "CD", "Z", "Con", "CL", "CA", "CS", "U", "R", "M", "CC", "Custom", "G", "CR"], "num": ["name", "loc", "text", "end", "digit", "unit", "int", "code", "die", "init", "Num", "number", "result", "pos", "NUM", "iter", "split", "nu", "coord", "div", "final", "index", "dest", "valid", "node", "con", "obj", "u", "d", "nt", "max", "out", "uni", "f", "status", "no", "su", "check", "nr", "len", "b", "dim", "count", "off", "col", "id", "multi", "nb", "form", "test", "sum", "um", "n"], "i": ["gi", "ji", "k", "ui", "ie", "qi", "mi", "p", "ai", "c", "h", "y", "ix", "ini", "pos", "iu", "lc", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "uri", "l", "fi", "u", "d", "pi", "j", "f", "io", "xi", "ri", "di", "ip", "ci", "b", "e", "info", "zi", "id", "li", "ii", "n", "bi", "ti"], "str": ["letter", "text", "unit", "strings", "STR", "int", "code", "sta", "ner", "arr", "exp", "ext", "stri", "err", "strip", "r", "Str", "usr", "dict", "pos", "tr", "orig", "iter", "hr", "temp", "lc", "div", "st", "obj", "it", "u", "sec", "wr", "out", "star", "j", "f", "sr", "frac", "char", "style", "dr", "br", "us", "list", "data", "tree", "string", "cr", "fr", "inner", "er", "part", "test", "nor", "ocr"]}}
{"code": "N = int(input())\\n\\nA = list(map(int,input().split()))\\n\\nS = A[0]\\nX = A[0]\\nl = 0\\nr = 0\\ncount = 0\\n\\nwhile r < N and l <= r:\\n    if S == X and r < N-1:\\n        r += 1\\n        S += A[r]\\n        X = X ^ A[r]\\n    elif S == X and r == N-1:\\n        count += r-l+1\\n        l += 1\\n        S -= A[l-1]\\n        X = X ^ A[l-1]\\n    else:\\n        count += r-l\\n        l += 1\\n        S -= A[l-1]\\n        X = X ^ A[l-1]\\n    #print([l,r,count])\\n\\nprint(count)", "target": "791", "substitutes": {"N": ["F", "E", "NR", "L", "V", " R", "NL", "H", "Q", "Y", "Size", "Num", "NS", "K", "Na", "O", "P", "B", "C", "T", "D", "Len", "Ne", "I", "RN", "No", "NT", "Node", "Z", "Ns", "ND", "R", "M", "J", " n", "G", "NA", "Count", "n"], "A": ["F", "You", "GA", "E", "First", "a", "L", "At", "Any", "All", "Entry", "Az", "AS", "MA", "Y", "H", "AP", "AL", "Adam", "LA", "AR", "AST", "K", "Math", "Ha", "AM", "SA", "P", "B", "C", "T", "As", "mA", "D", "Ar", "API", "array", "AA", "Args", "And", "Alpha", "Bu", "W", "Ab", "AU", "Ma", "Average", "Data", "Code", "Array", "CA", "R", "Part", "alpha", "M", "Wa", "G", "HA", "NA", "AC", "The", "Answer", "App"], "S": ["F", "s", "E", "Rs", "L", "Cs", "V", " R", "H", "Q", " s", "Y", "SE", "Size", "SC", "SR", "NS", "AR", "Si", "K", "SH", "ST", "Lu", "SI", "Su", "O", "P", "B", "C", "T", "St", "D", "Sa", "Sch", "SL", "W", "RS", "Sl", "I", "SS", "Sc", "Z", "Ns", "CL", "U", "R", "Part", "M", "Sign", "G", "SU", "Count"], "X": ["Power", "Tx", "V", "Check", "XP", "K", "Local", "Rest", "x", "Do", "Line", "Expl", "Context", "Value", "LL", "G", "Ex", "CR", "Plus", "Length", "Base", "Point", "L", "H", "Q", "XX", "Operation", "Int", "Sync", "IX", "XXX", "TX", "Data", "RL", "El", "Array", "PH", "U", "Content", "String", "Sax", "Location", "Cross", "CE", "One", "Mass", "ZX", "B", "C", "Like", "HTTP", "Model", "Single", "Z", "CL", "UX", "R", "M", "Phoenix", "XL", "ML", "Something", "Work", "Long", "F", "E", "Any", "Max", "DX", "Y", "Size", "Sample", "Form", "Math", "P", "T", "PE", "Sc", "FX", "XY", "CC", "Count"], "l": ["lp", "s", "k", "loc", "ol", "a", "L", "line", " L", "ur", "p", "al", "g", "c", "i", "h", "sl", "o", "lr", "el", "la", "left", "lc", "z", "kl", "x", "ar", "w", "u", "d", "pl", "ll", "ln", "f", "j", "dl", "m", "rl", "rel", "nl", "R", "length", "fl", "b", "v", "len", "ell", "e", "t", "ls", "il", "li", "ul", "n"], "r": ["rh", "yr", "s", "k", "rr", "a", "L", "Rs", " R", "ur", "p", "c", "SR", "i", "err", "h", "o", "pr", "RR", "lr", "re", "P", "B", "z", "x", "ar", "w", "Rh", "rb", "d", "u", "f", "range", "sr", "m", "j", "right", "ir", "dr", "rl", "rt", "br", "R", "nr", "b", "v", "len", "e", "order", "fr", "cr", "t", "ru", "er", "rs", "nor", "n"], "count": ["rh", "last", "p", "err", "c", "h", "case", "pr", "C", "size", "z", "ch", "ind", "start", "w", "current", "child", "nt", "q", "max", "ln", "f", "rc", "depth", "list", "length", "len", "base", "cr", "e", "all", "fr", "order", "seq", "id", "val", "CR", "range", "sum", "Count", "n"]}}
{"code": "n = int(input())\\nA = list(map(int,input().split()))[::-1]\\n\\n\\ndef b():\\n    if A[0] != 2:\\n        return -1\\n    else:\\n        ans = [2, 3]\\n        for i in range(1, n):\\n            r = ans[1] // A[i] * A[i]\\n            l = -((-ans[0] // A[i]) * A[i])\\n            # print(-ans[0] // A[i])\\n            # print(l, r)\\n            if r < l:\\n                return -1\\n            ans = [l, r+A[i]-1]\\n            # print(ans)\\n    return ans\\n\\nans = b()\\nif ans == -1:\\n    print(ans)\\nelse:\\n    print(ans[0], ans[1])", "target": "423", "substitutes": {"n": [" N", "s", "k", "a", "span", "p", "g", "c", "o", "nc", "num", "y", "h", "net", "C", "z", "x", "nan", "w", "u", "d", "nn", "f", "j", "m", "Ns", "ns", "nl", "ni", "len", "b", "np", "t", "N", "nb"], "A": [" N", "F", "E", "a", "L", "At", "Any", "V", "H", "Q", "p", "Y", "X", "AS", "Adam", "LA", "AR", "K", "Na", "AN", "O", "P", "B", "C", "T", "As", "AU", "ASC", "API", "array", "AA", "Args", "Alpha", "S", "An", "W", "I", "args", "PA", "Auth", "Array", "CA", "am", "U", "R", "AF", "alpha", "M", "Part", " a", "b", "N", "G", "NA", "an", "App"], "ans": ["s", "a", "lan", "cas", "amps", "eps", "atan", "na", "ai", "ats", "Ann", "ions", "AN", "ads", "ANS", "la", "vs", "ann", "anon", "anc", "ani", "ana", "ays", "can", "x", "nan", "ar", "sn", "ars", "An", "aned", "ass", "nn", "ons", "aus", "ca", "sa", "cs", "ants", "ns", "no", "ds", "an", "ad", "ins"], "i": ["gi", "ji", "k", "ui", "a", "int", "p", "phi", "ai", "g", "c", "h", "y", "num", "ix", "ini", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "uri", "u", "d", "pi", "j", "f", "io", "di", "ni", "ci", "v", "b", "t", "e", "multi", "id", "li", "ii", "bi"], "r": ["k", "p", "g", "c", "h", "o", "ar", "w", "rb", "q", "f", "j", "sr", "range", "m", "rl", "rank", "rg", "R", "alpha", "nr", "v", "b", "e", "t", "er", "rs"], "l": ["lp", "ol", "L", "p", "g", "c", "o", "sl", "el", "lr", "la", "lc", "kl", "z", "u", "ll", "ln", "f", "j", "m", "nl", "v", "b", "len", "e", "ls", "li", "lo"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\nmod = 10**9 + 7\\nbits = [0]*60\\nfor x in a:\\n    i = 0\\n    while x > 0:\\n        if x % 2 == 1:\\n            bits[i] += 1\\n        x //= 2\\n        i += 1\\nans = 0\\nfor i in range(60):\\n    ans += (bits[i] * (n-bits[i])) * pow(2, i, mod)\\n    ans %= mod\\nprint(ans)", "target": "353", "substitutes": {"n": ["min", "s", "k", "p", "c", "g", "o", "number", "r", "num", "y", "h", "size", "nu", "ne", "z", "nan", "w", "adj", "l", "u", "d", "nn", "max", "f", "j", "m", "ns", "ni", "b", "np", "e", "N", "nb", "an"], "a": ["aa", "s", "int", "va", "code", "p", "ai", "c", "fa", "y", "la", "ba", "ab", "array", "ana", "index", "A", "af", "ia", "args", "ata", "aaa", "f", "sa", "ac", "m", "area", "am", "alpha", "b", "part", "an", "ad"], "mod": ["min", "mode", "modified", "int", "MOD", "perm", "exp", "ai", "g", "mult", "r", "ix", "num", "round", "section", "md", "reg", "lo", "div", " Mod", "scale", "module", "ia", "bug", "sec", "d", "mag", "max", "row", "m", "ac", "man", "dim", "mods", "ow", "complex", "mac", "add", "step", "part", "rad", "Mod"], "bits": ["s", "frames", "lins", "bytes", "int", "words", "p", "states", "bs", "hours", "xs", "rows", "bands", "ions", "ints", "bis", "cycles", "config", "blocks", "pieces", "bug", "bps", "parts", "patch", "bugs", "items", "lines", "details", "flags", "ns", "mask", "features", "reads", "bin", "abs", "b", "ips", "big", "its", "bit", "ops", "part", "bi", "ins"], "x": ["dx", "s", "int", "X", "xf", "p", "tx", "ic", "_", "xs", "c", "xx", "ai", "y", "rx", "h", "ix", "num", "px", "z", "xt", "ex", "xxx", "index", " xx", "w", "l", "wx", "u", "d", "pi", "q", "j", "ax", "f", "xi", "ci", "xp", "b", "t", "xes", "xy", "bit", "xc", "abc", "xa"], "i": ["ji", "k", "ui", "ie", "int", "qi", "p", "phi", "ai", "c", "y", "o", "h", "ini", "ix", "iu", "lo", "ti", "z", "mini", "si", "index", "yi", "ind", "I", "uri", "l", "u", "pi", "d", "j", "f", "io", "m", "xi", "di", "ri", "ci", "ip", "b", "v", "t", "e", "zi", "id", "li", "ii", "bit", "bi"], "ans": ["s", "ents", "lan", "cas", "nas", "amps", "eps", "ras", "atan", "na", "ms", "ai", "ats", "ions", "aning", "anas", "AN", "ads", "ANS", "anes", "any", "ks", "aces", "ann", "ani", "anc", "cus", "ays", "es", "ana", "can", " means", "nan", "ars", "anus", "ia", "aned", "ons", "aus", "ens", "sk", "leans", "ants", "ns", "os", "ian", "ls", "ips", "olds", "ds", "an", "ins"]}}
{"code": "#26\\nH = int(input())\\ncou = 1\\nwhile H>0:\\n    H = int(H/2)\\n    cou *= 2\\n    \\nprint(cou-1)", "target": "153", "substitutes": {}}
{"code": "n, k = [int(x) for x in input().split()]\\ntemp_list = sorted([[int(x) for x in input().split()] for _ in range(n)])\\nans = 0\\nfor a, b in temp_list:\\n    k -= b\\n    if k <= 0:\\n        ans = a\\n        break\\nprint(a)", "target": "608", "substitutes": {"n": ["span", "p", "g", "c", "i", "o", "number", "y", "num", "r", "ne", "nu", "z", "w", "l", "u", "d", "nt", "f", "j", "network", "m", "ns", "v", "np", "t", "N", "e", "nb", "an"], "k": ["ke", "p", "na", "g", "c", "i", "K", "o", "y", "num", "kk", "ks", "kn", "z", "nan", "kw", "w", "ka", "anch", "ko", "ak", "ok", "u", "unk", "q", "ki", "j", "sk", "f", "ky", "m", "ac", "alpha", "v", "key", "ck", "ik", "nb", "ad"], "x": ["int", "python", "sex", "X", "p", "na", "exp", "xf", "xs", "c", "i", "xx", "y", "rx", "h", "ix", "num", "temp", "z", "xt", "on", "ex", "index", "w", "cross", "max", "f", "ax", "point", "sw", "xi", "input", "xp", "t", "e", "xes", "xy", "id", "bit", "xc", "draw"], "temp_list": ["temp_l", "temp_n", " temp_l", " temp_List", " temp_n", " temp_lists", "temp_lists", "tempwlists", "tempwList", "tempwlist", "temp_List"], "_": ["__", "X", "p", "g", " seq", " time", "f", "all"], "ans": ["lan", "nas", "atan", "na", "ai", "aning", "anas", "AN", "ANS", "ks", "ane", "ann", "anon", "anc", "ani", "ana", "can", "nan", "An", "ars", "aned", "nn", "aus", "sk", "sa", "cs", "ants", "acs", "ns", "scan", "ls", "an", "ins"], "a": ["aa", "s", "wa", "auto", "p", "na", "ai", "aw", "fa", "i", "y", "analysis", "ba", "ab", "au", "array", "ana", "art", "pa", "nan", "ar", "A", "ka", "ak", "aaa", "ca", "f", "sa", "ac", "ga", "parser", "area", "am", "ae", "alpha", "all", "ad", "an", "active"], "b": ["s", "be", "auto", "ib", "p", "pb", "c", "g", "i", "y", "r", "num", "h", "wb", "mb", "beta", "ba", "B", "ab", "z", "nan", "w", "sb", "l", "nb", "rb", "bb", "u", "d", "ok", "f", "eb", "j", "db", "bin", "binary", "bar", "v", "e", "part", "bi"]}}
{"code": "import itertools,sys\\ndef I(): return int(sys.stdin.readline().rstrip())\\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\\nN = I()\\nA = LI()\\nans = 0\\nfor x in [x for x in itertools.product([-1,0,1],repeat=N)]:\\n    calc = 1\\n    for i in range(N):\\n        calc *= A[i]+x[i]\\n    if calc%2==0:\\n        ans += 1\\nprint(ans)\\n", "target": "282", "substitutes": {"N": ["F", "E", "L", "V", "NN", "X", "Y", "NC", "Size", "Num", "NS", "NE", "K", "Na", "NM", "AN", "O", "P", "T", "C", "B", "D", "Ne", "S", "I", "RN", "No", "NT", "Ni", "Z", "Ns", "R", "J", "M", "CN", " n", "G", "NA", "n"], "A": ["a", "L", "At", "V", "AS", "X", "Y", "LA", "AR", "K", "AN", "BA", "O", "SA", "P", "B", "C", "As", "AC", "Ar", "D", "AA", "Alpha", "S", "An", "I", "CA", "U", "AF", "alpha", "M", "G", "HA", "NA", "an"], "ans": ["s", "a", "lan", "nas", "offs", "amps", "ras", "span", "na", "ai", "xs", "c", "activation", "AN", "ANS", "anes", "annels", "aces", "ann", "ares", "anc", "ani", "annot", "ana", "ays", "anon", "can", "nan", "An", "ars", "anus", "args", "aned", "ace", "aus", "anan", "anne", "ens", "cs", "ants", "Ns", "ns", "acs", "ases", "ni", "ci", "alpha", "os", "cons", "ANN", "NA", "an", "n", "ins"], "x": ["dx", "s", "a", "int", "com", "rex", "na", "X", "xf", "p", "tx", "ext", "_", "c", "xs", "xx", "g", "fx", "y", "rx", "xa", "h", "im", "work", "ix", "re", "o", "r", "la", "XX", "z", "xt", "ex", "index", "xxx", "con", "l", "u", "wx", "d", "f", "ax", "m", "xi", "mx", "ux", "xb", "list", "v", "xp", "xml", "b", "t", "e", "xes", "xy", "id", "xc", "abc", "an", "ins"], "calc": ["call", " calrc", "concu", "calpc", "calci", "Calrc", " recalrc", "Calac", "Calc", "conl", "calcu", " Calcs", "Calcs", " Calc", "calac", "alc", " calcs", " recalc", "concs", " calac", " calpc", " Calcu", "alac", "Calpc", "calrc", " recalci", "Calci", " calci", "calcs", " Call", "alpc", "all", "alcs", "conc", "alcu", " recalac"], "i": ["gi", "s", "k", "ui", "a", "int", "qi", "p", "phi", "ai", "c", "y", "r", "o", "ix", "im", "ini", "iu", "ti", "z", "si", "index", "ind", "w", "I", "it", "l", "u", "pi", "d", "ki", "io", "j", "f", "m", "xi", "ci", "ij", "v", "b", "e", "zi", "id", "ii", "n", "bi", "ip"]}}
{"code": "import math\\n\\ndef print_circle(r):\\n    \"\"\"\\n    r: float\\n    outputs area and circumfence of a circle(radius r)\\n    \\n    >>> print_circle(2)\\n    12.566371 12.566371\\n    \"\"\"\\n\\n    print(\"{0:.6f} {1:.6f}\".format(math.pi * r**2, 2 * math.pi * r))\\n\\nif __name__ == '__main__':\\n    r = float(input())\\n    print_circle(r)", "target": "758", "substitutes": {"r": ["rr", "k", "mr", "ur", "p", "g", "c", "i", "var", "rx", "o", "radius", "result", "pr", "re", "lr", "x", "ar", "w", "l", "rb", "d", "pi", "u", "q", "f", "range", "sr", "rc", "m", "ir", "dr", "rt", "br", "rg", "R", "nr", "b", "v", "cr", "e", "t", "fr", "ru", "er", "rs", "rad", "n"]}}
{"code": "import numpy as np\\nH,W,K = map(int,input().split())\\nS = [list(str(input())) for _ in range(H)]\\n\\nl = np.array([['0' for _ in range(W)]]*H)\\nl = l.tolist()\\nk= 1\\nfor i in range(H):\\n  for j in range(W):\\n    if S[i][j] == '#':\\n      l[i][j] = str(k)\\n      k += 1\\nfor i in range(H):\\n  for j in range(W):\\n    if l[i][j] == '0':\\n      if i > 0:\\n        l[i][j] = l[i-1][j]\\n      else:\\n        for m in range(1,H-i):\\n          if l[i+m][j] != '0':\\n            l[i][j] = l[i+m][j]\\n            break\\nfor i in range(H):\\n  for j in range(W):\\n    if l[i][j] == '0':\\n      if j > 0:\\n        l[i][j] = l[i][j-1]\\n      else:\\n        for m in range(1,W-j):\\n          if l[i][j+m] != '0':\\n            l[i][j] = l[i][j+m]\\n            break\\n  print(' '.join(l[i]))", "target": "165", "substitutes": {"H": ["F", " N", "rh", " h", "E", "Hy", "Hi", "L", "V", "Q", "X", "Y", "h", "SH", "Ha", "O", "P", "T", "C", "B", "D", "CH", "WH", "w", "EH", "I", "Rh", "HK", "GH", "Ch", "Z", "HH", "HM", "HI", "U", "R", "length", "Han", "M", "J", "N", "G", "Wh", "RH"], "W": ["F", "E", "L", "Sw", "V", "Q", "X", "Y", "WD", "WE", "Width", "WR", "WP", "MW", "SW", "SH", "Wi", "GW", "Ha", "P", "T", "C", "B", "D", "WC", "WH", "w", "I", "We", "DW", "Z", "Web", "Ws", "WS", "WI", "TW", "WB", "WA", "WF", "U", "R", "M", "J", "N", "Wa", "VW", "G", "Wh", "FW", "BW"], "K": ["F", "E", "V", "Q", "X", "Y", "O", "P", "B", "C", "T", "D", "SK", "KS", "A", "w", "HK", "Z", "U", "R", "M", "J", "N", "G"], "S": ["F", "s", "a", "L", "V", " L", "SC", " s", "p", "SE", "c", "Si", "r", "SH", "SI", "O", "P", "T", "C", "B", "D", "A", "SL", "Sl", "I", "u", "SS", "Li", "f", "U", "R", "list", "M", "b", "N", "SN", "G"], "_": ["__", " w", " x", " time", "x", "out", "f", "J", " length", "block"], "l": ["lp", "s", "ol", "shell", "L", "line", " L", "ur", "p", "al", "g", "c", "ly", "y", "r", "h", "sl", "o", "log", "like", "el", "ml", "la", "split", "left", "lc", "kl", "z", "w", "u", "d", "Li", "pl", "ll", "iol", "ln", "f", "dl", "acl", "rl", "old", "list", "nl", "live", "fl", "wl", "hl", "v", "b", "ell", "t", "ls", "e", "il", "le", "li", "ul", "n"], "k": ["kid", "ke", "p", "g", "c", "y", "o", "r", "kk", "ijk", "ks", "kn", "z", "x", "kw", "w", "ko", "ak", "ok", "u", "d", "q", "ki", "sk", "f", "kick", "v", "b", "ck", "e", "kr", "id", "ik", "n"], "i": ["s", "ui", "ei", "int", "qi", "phi", "ai", "y", "ix", "im", "si", "x", "yi", "f", "ir", "b", "li", "ik", "info", "gi", "ie", "mi", "ic", "h", "ini", "api", "u", "pi", "hi", "ci", "ij", "ni", "v", "e", "multi", "id", "ti", "ip", "vi", "ami", "p", "oi", "iu", "z", "eni", "ind", "it", "d", "io", "my", "zi", "anti", "n", "ji", "ih", "a", "c", "o", "w", "I", "uri", "ki", "cli", "xi", "di", "ii", "bi", "ori"], "j": ["ion", "ji", "ie", "int", "ja", "qi", "p", "g", "jo", "c", "h", "y", "jj", "r", "dj", "o", "ix", "pr", "el", "jl", "z", "je", "ch", "jet", "x", "w", "adj", "obj", "I", "u", "uj", "d", "q", "js", "jp", "f", "job", "note", "xi", "json", "jc", "br", "oj", "aj", "jam", "ij", "J", "v", "b", "bj", "key", "e", "jon", "fr", "bi", "kj", "li", "ii", "n", "block", "on"], "m": ["mn", "ma", "mi", "p", "g", "c", "h", "r", "y", "o", "im", "ym", "un", "pm", "z", "x", "fm", "dm", "mu", "w", "om", "cm", "u", "d", "q", "one", "f", "sm", "bm", "man", "am", "M", "b", "v", "e", "mm", "gm", "mc", "li", "an", "um", "n"]}}
{"code": "moji = str(input())\\nprint((\"No\",\"Yes\")[(\"B\" in moji) and (\"A\" in moji)])", "target": "234", "substitutes": {"moji": ["amojo", "vojo", "mozy", "gooji", "fojo", "mooji", "moja", "moie", " moie", "voji", "omoie", "amozy", "fooji", "omoja", "foie", "gozy", "voja", "omooji", "foja", "mojo", "amoji", " moja", "amooji", "gojo", "kojo", "koja", "foji", "koji", "kooji", "goji", " mooji", "omoji", "vozy", "vooji"]}}
{"code": "n = int(input())\\nl = [0]*n\\nfor i in range(n):\\n    l[i] = list(map(int,input().split()))\\n\\nl.sort(key = lambda x:x[1])\\n\\ncnt = 0\\nfor i in range(n):\\n    cnt += l[i][0]\\n    if cnt > l[i][1]:\\n        print(\"No\")\\n        exit()\\n\\nprint(\"Yes\")", "target": "55", "substitutes": {"n": ["s", "k", "p", "na", "g", "c", "o", "r", "nc", "y", "num", "number", "net", "h", "nu", "ne", "z", "fn", "x", "nan", "w", "cn", "d", "u", "nn", "nt", "f", "j", "m", "ns", "nl", "len", "b", "v", "np", "t", "N", "e", "count", "nb"], "l": ["lp", "s", "loc", "ol", "L", "p", "g", "c", "o", "sl", "y", "like", "el", "la", "split", "left", "lo", "lv", "lc", "kl", "z", "x", "u", "ll", "ln", "f", "dl", "j", "m", "rl", "list", "nl", "length", "b", "v", "t", "ls", "e", "il", "li"], "i": ["gi", "ui", "ie", "int", "ei", "qi", "p", "ai", "c", "o", "y", "ini", "ix", "iq", "iu", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "it", "u", "pi", "f", "io", "j", "cli", "xi", "di", "ni", "ci", "v", "e", "t", "il", "multi", "id", "li", "ii", "bi", "ip"], "cnt": ["cNT", "scrt", " cpt", "crnt", "cpt", "CNT", "cnc", "lcpt", "scnn", "crrt", " crt", " cNT", "ncnt", "crt", "lcnc", " cnc", "lcrt", "Cnt", "Cnc", "uncpt", "crnn", " cnd", "scnt", "Cnn", "uncrt", "uncnc", "lcnt", "ncnc", "scnd", "ncnn", "cnn", "uncnt", "crnd", "cnd", "ncNT", " cnn"]}}
{"code": "n=input()\\na = []\\na.append(str(n[:len(n):2]))\\nprint(*a)", "target": "20", "substitutes": {"n": ["name", "s", "text", "aa", "k", "token", "p", "na", "g", "c", "i", "o", "r", "number", "num", "api", "names", "z", "fn", "x", "nan", "node", "l", "u", "d", "nt", "nn", "f", "m", "none", "ns", "input", "data", "b", "v", "t", "N", "e", "nb", "an"], "a": ["s", "aa", "k", "p", "na", "c", "aw", "i", "o", "r", "asha", "la", "ab", "array", "ana", "da", "A", "ar", "args", "l", "u", "d", "aaa", "f", "sa", "ac", "m", "asa", "ga", "ns", "area", "aj", "input", "am", "data", "ae", "alpha", "b", "v", "an"]}}
{"code": "S = input()\\nans = []\\ncount = 0\\nfor i in range(len(S)):\\n    if int(S[i]) == 2:\\n        count += 1\\nprint(count)", "target": "765", "substitutes": {"S": ["F", "s", "L", "V", "H", "SC", "Q", "SF", "X", "SE", "Stack", "NS", "Si", "Test", "Os", "Switch", "SI", "O", "P", "T", "C", "B", "D", "SB", "Save", "Session", "A", "W", "Service", "I", "SS", "Single", "Array", "R", "Input", "Part", "M", "GS", "String", "SIGN", "N", "SN", "G", "SO", "SU"], "ans": ["ss", "s", "a", "L", "int", "XX", "X", "Sample", "AN", "DATA", "O", "P", "Int", "C", "A", "Output", " A", "Array", "list", "Cons", "cons", "N", "Sum", "an", "Count", "n"], "count": ["error", "call", "name", "value", "int", "code", "level", "p", "c", "number", "num", "log", "weight", "size", "counter", "time", "index", "cache", "ind", "start", "catch", "max", "score", "found", "depth", "age", "flag", "list", "length", "match", "type", "len", "key", "base", "order", "id", "skip", "part", "test", "sum", "Count", "n"], "i": ["k", "vi", "a", "ei", "qi", "mi", "p", "ai", "g", "c", "y", "h", "r", "ix", "iu", "z", "si", "eni", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "j", "io", "xi", "ri", "di", "ci", "v", "e", "col", "zi", "li", "val", "ii", "bi"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**8)\\ndef ii(): return int(sys.stdin.readline())\\ndef mi(): return map(int, sys.stdin.readline().split())\\ndef li(): return list(map(int, sys.stdin.readline().split()))\\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for i in range(N)]\\ndef dp2(ini, i, j): return [[ini]*i for i2 in range(j)]\\ndef dp3(ini, i, j, k): return [[[ini]*i for i2 in range(j)] for i3 in range(k)]\\n#import bisect #bisect.bisect_left(B, a)\\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\\n#from itertools import accumulate #list(accumulate(A))\\n\\nH, W = mi()\\nh, w = mi()\\n\\nprint((W-w)*(H-h))", "target": "458", "substitutes": {"N": ["F", "MN", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "Num", "NS", "NE", "K", "Na", "O", "P", "T", "C", "B", "D", "Ne", "S", "I", "Z", "Ns", "R", "M", "J", " n", "G", "n"], "i": ["ji", "ui", "a", "ie", "int", "qi", "mi", "p", "ai", "ic", "c", "y", "o", "iu", "z", "si", "x", "yi", "ind", "I", "l", "u", "pi", "d", "q", "ki", "f", "io", "m", "xi", "di", "ni", "ci", "ip", "b", "v", "e", "t", "id", "li", "ii", "n", "ti"], "ini": ["ui", "iri", "arin", "ie", "int", "qi", "mi", "p", "phi", "ai", "ic", "init", "ine", "ix", "inf", "ti", "ani", "z", "mini", "eni", "si", "index", "iris", "iana", "inc", "ind", "uri", "fi", "pi", "ki", "network", "adi", "xi", "di", "ni", "ci", "isi", "inn", "iki", "inet", "ina", "zi", "id", "li", "ii", "ik", "lin", "abi", "n"], "j": ["ji", "a", "ie", "ja", "p", "g", "c", "jo", "y", "o", "jj", "z", "si", "jet", "x", "w", "I", "l", "u", "uj", "d", "pi", "q", "js", "jp", "f", "m", "ij", "J", "v", "b", "key", "t", "e", "li", "ii", "ik", "n"], "i2": [" i1", "pi2", "jsecond", "j62", "sisecond", "ii62", "p4", "pi1", "ii4", " i4", "si62", "isecond", "i1", "si4", "ii2", "pi4", "p1", "p2", "si2", "i4", "j2", "i62", "iisecond", "j4"], "k": ["ke", "p", "g", "c", "K", "y", "o", "h", "r", "ks", "z", "x", "kw", "w", "ak", "l", "u", "q", "f", "sk", "m", "J", "v", "b", "ik", "n"], "i3": ["j03", "i1", "pi4", "pi03", "pi1", "li3", "j4", "pi3", "i03", "li03", "j1", "li1", "j3", "i4", "li4"]}}
{"code": "import numpy as np\\nfrom collections import defaultdict,deque\\nN,K= map(int,input().split())\\nA = np.array([1]+list(map(int,input().split())))-1\\n\\nAcs = np.cumsum(A)\\nAcs %= K\\n\\nans = 0\\ncnt = defaultdict(deque)\\nfor i,c in enumerate(Acs):\\n    cnt[c].append(i)\\n    while cnt[c]:\\n        if i-cnt[c][0]> K-1:\\n            cnt[c].popleft()\\n        else:\\n            break\\n    ans += len(cnt[c]) - 1\\nprint(ans)\\n\\n\\n", "target": "596", "substitutes": {"N": [" M", "L", " L", " R", "NC", " O", "Num", " CI", " B", " CN", "CNN", "P", "B", "C", " C", "I", " E", " NC", " NP", "Ns", "U", " n", " D", " NI", " P", " NK", "n"], "K": ["F", "k", "E", "KK", "L", "AK", "V", "Max", "H", "Ak", "Q", "X", "Y", "Size", "IK", "O", "Sk", "P", "T", "C", "EC", "D", "SK", "AC", "B", "KS", "KB", "S", "W", "KC", "I", "HK", "Z", "UK", "KR", "U", "R", "OK", "M", "J", "CC", "G", "KA", "CH", "Ku", "n"], "A": ["Ca", "a", "At", "AS", "X", "Y", "AP", "LA", "AM", "AB", "P", "B", "C", "T", "AC", "As", "Ar", "mA", "API", "array", "AA", "Args", "Alpha", "S", "I", "Average", "ac", "Array", "CA", "AF", "Input", "alpha", "M", "Ac", "An"], "Acs": ["AUcons", "acks", " Acons", "Acks", "AcCS", "Accs", "Accks", "Ccs", " ACS", "AAfs", "aCs", "AAks", "Afs", "Aks", "Cks", "AUfs", " Acks", "ACs", "aCS", "Acons", "CCS", "acs", " Afs", "AUcs", "CCs", "ACS", "AUks", "AAcons", "AAcs", " ACs", " Aks", "Ccks"], "ans": ["ano", "unks", "lan", "span", "cas", "amps", "nas", "atan", "na", "offs", "ai", "gan", "ats", "eps", "aning", "anas", "AN", "aos", "ANS", "anes", "ks", "asts", "atten", "annels", "ane", "ann", "ani", "au", "anc", "ana", "annot", "can", "nan", "An", "ars", "anned", "ant", "aned", "aus", "leans", "cs", "ants", "atches", "acs", "ns", "os", "cons", "ians", "ANN", "plan", "ops", "oss", "an", "ins"], "cnt": ["cNT", "crnt", " ccount", "Ccount", "CNT", "dcnt", "cnc", "crct", "crrt", "dcrt", "cint", " crt", "Cwd", " cNT", "dcont", " cct", "lcont", "cct", "lcnc", "crt", "ncnt", " cwd", " cnc", "cont", "lcrt", "Cnt", "ccount", "rcnt", "Cnc", "ncont", "prt", "rcct", " cont", "dccount", "ncrt", "lcnn", "ncwd", "Cnn", " cint", "rcNT", "lcnt", "lcct", "Cont", "pnt", "Crt", "cront", "cnn", "Cct", "lcNT", "Cint", "pct", "pint", "rcont", "cwd", " cnn"], "i": ["ji", "k", "a", "int", "qi", "p", "ai", " I", "o", "r", "h", "C", "lc", "z", "si", "index", "x", "ind", "start", "I", "it", "l", "u", "d", "pi", "f", "j", "m", "ni", "ci", "v", "b", "e", "col", "id", "li", "ii", "n"], "c": ["s", "k", "a", "code", "p", "ic", "y", "r", "nc", "ec", "o", "h", "oc", "C", "lc", "uc", "z", "fc", "ch", "ce", "x", "cache", "unc", "cy", "cu", "w", "con", "cm", "l", "u", "d", "cn", "f", "ca", "cs", "ac", "m", "self", "dc", "ci", "ct", "b", "v", "cf", "e", "cr", "t", "cc", "col", "pc", "xc", "mc", "tc", "n"]}}
{"code": "import numpy as np\\n\\nn,m = map(int,input().split())\\nl = []\\nfor _ in range(m):\\n    a = list(map(int,input().split()))\\n    l.append(a)\\n\\nmemo = np.zeros((n,2))\\nmemo[0][1] = 1\\n\\nfor i in range(n):\\n    memo[i][0] = 1\\n\\ntmp1 = 0\\ntmp2 = 0\\n\\nfor j in range(m):\\n    tmp1 = l[j][0]-1\\n    tmp2 = l[j][1]-1\\n    memo[tmp1][0] -= 1\\n    memo[tmp2][0] += 1\\n    \\n    if memo[tmp2][1] == 0 and memo[tmp1][1] == 1:\\n        memo[tmp2][1] = 1\\n    \\n    if memo[tmp1][1] == 1 and memo[tmp1][0] == 0:\\n        memo[tmp1][1] = 0\\n\\nans = 0\\nfor k in range(n):\\n    ans += memo[k][1]\\n\\nprint(int(ans))\\n", "target": "311", "substitutes": {"n": [" N", "s", " p", "mn", "p", "g", "c", " network", "y", " v", "r", "num", " c", "o", "net", "nc", " net", " f", "z", "ne", "x", "nan", " fn", "w", "u", "d", "q", "f", "ns", "no", "b", "v", "t", "N", "e", " num", "nb", " b"], "m": ["s", "mn", "tm", "p", "ms", "g", "c", "nm", "y", "r", "o", "num", "h", "z", "x", "dm", "mu", "w", "u", "d", "f", "sm", "M", "v", "b", "e", "mm", "hm", "mc", "range"], "l": ["lp", "s", "loc", "ol", "L", "p", "g", "c", "o", "r", "el", "la", "left", "kl", "z", "x", "w", "u", "d", "ll", "ln", "f", "dl", "list", "nl", "b", "v", "t", "ls", "e", "li"], "_": [" p", " z", "p", "g", "of", "z", "x", "q", "f", "ac", "am", "J", "all", "id", "an", "ip"], "a": ["aa", "s", "ao", "active", "p", "na", "ai", "c", "o", "y", "la", "ab", "array", "ana", "da", "x", "ar", "A", "ia", "args", "u", "d", "aaa", "f", "sa", "ac", "area", "aj", "am", "ae", "alpha", "b", "ea", "ad"], "memo": ["emoro", "programo", "cessoo", "geolo", "emo", "memoryolo", "sumoto", "rambo", " memno", "memos", "memino", "momo", "aimbo", "cryptoo", "temoo", "aimos", "temo", "ramo", "momos", "memoro", "hemo", "Memos", "programone", "cesso", "memoryoro", "membero", " memone", "embo", "indexio", "emolo", "memio", "cessno", "memone", "cessos", "cryptos", "hemu", "indexolo", "emos", "memolo", "memoryno", " memos", "cryptology", "gero", "memorybo", "emio", "hemos", "memoryio", "geoo", " memoro", "limos", "memoryos", "gemo", "memoryo", "Membo", "ramos", "hembo", "memoryoto", "membo", " memio", "crypto", "memberos", " memoto", "indexo", "limo", "momro", "memno", "programoo", "temos", " membo", " memode", "memode", "sumino", "gemos", "memology", "limu", "emu", "Memoo", "memoryino", "sumo", " memro", "memoto", "geos", "memro", "momode", "emoo", "memberology", "limoo", "ramio", "memoo", " memolo", "geo", "gebo", "sumbo", "Memo", "Memu", "geone", "limbo", "aimo", "aimu", "gembo", "Memro", "temro", "geode", " memino", " memoo", "memu", " memology", "indexoo", "memoryoo", "gemio", "programos", "memberoo", "limio"], "i": ["ih", "ji", "ie", "int", "p", "ai", "c", "y", "o", "ini", "im", "iu", "api", "z", "si", "x", "ind", "I", "u", "pi", "d", "f", "io", "ir", "xi", "di", "ni", "ci", "b", "inn", "v", "e", "li", "ii", "ik", "ip"], "tmp1": ["tmp3", " tmp3", "txt6", "txt1", "temp2", "txt3", "stageone", "tempn", "tmpone", "mem3", " tmpone", "stage2", "temp0", "mpn", "txt2", "temp4", "mp3", "mem2", "tmp151", "mem151", "locone", "tmp4", "mp1", "mp4", "loc4", "tempone", "treatment2", "tmpn", "mpone", "treatmentone", "stage4", "mp2", "loc2", " tmpn", "mp151", "temp1", "treatment1", "mp6", "tmp6", "mem1", "tmp0", "loc1", " tmp0", "treatment0", "temp151", "stage1", "temp6", "temp3"], "tmp2": ["mem4", "tmp3", "temp2", "memone", "temp82", "tmp02", "mp0", "treatment82", "tmpone", " tmp02", "temp0", "temp4", "mp82", "mp3", "mp256", "mem2", "tmp82", "mp02", "tmp4", "mp1", "mp4", "mem256", "tempone", "treatment2", "mpone", "treatment3", "mp2", "tmp256", "temp1", "treatment1", "temp02", "mem1", "tmp0", "temp256", " tmp0", " tmp4", "temp3"], "j": ["ji", "ie", "ja", "p", "g", "c", "y", "h", "o", "dj", "un", "im", "r", "jl", "z", "x", "ind", "u", "d", "q", "job", "f", "jp", "jam", "J", "v", "b", "e", "t", "li"], "ans": ["s", "lan", "span", "ras", "nas", "les", "p", "na", "atan", "anges", "aning", "anas", "AN", "ANS", "anes", "ks", "asts", "ann", "anon", "ani", "anc", "es", "can", "nan", " means", "lang", "anus", "aned", "ids", "ons", "ki", "anne", "sk", "cs", "leans", "ants", "ns", "han", "ran", "os", "san", "gen", "ls", "cons", "ds", "ces", "artifacts", "banks", "an", "ins"], "k": ["km", "s", "ke", "p", "g", "c", "dk", "K", "h", "y", "r", "num", "o", "kk", "ks", "kn", "z", "ch", "x", "kin", "w", "ok", "u", "unk", "q", "ki", "f", "sk", "ac", "b", "key", "v", "ck", "e", "id", "ik", "an"]}}
{"code": "H, W, M = map(int, input().split())\\nR = [0]*H #\u5404\u884c\u306b\u3042\u308b\u7206\u5f3e\u306e\u500b\u6570\\nC = [0]*W #\u5404\u5217\u306b\u3042\u308b\u7206\u5f3e\u306e\u500b\u6570\\nbombs = []\\nfor _ in range(M):\\n    h, w = map(lambda x: int(x)-1, input().split())\\n    R[h] += 1\\n    C[w] += 1\\n    bombs.append((h, w))\\n\\nR_max = max(R)\\nC_max = max(C)\\n\\n### R\u304c\u6700\u5927\u304b\u3064C\u304c\u6700\u5927\u306a\u5ea7\u6a19\u3067\u3042\u3063\u3066\u3001\\n# \u305d\u3053\u306b\u7206\u5f3e\u304c\u306a\u3044\u5834\u5408\u304c\u3042\u308c\u3070\\n# \u7b54\u3048\u304cR_max+C_max\\n# \u306a\u3051\u308c\u3070R_max+C_max-1\\ncount = 0 # \u7206\u5f3e\u304c\u3042\u308b\u5ea7\u6a19\u3067\u3042\u3063\u3066\u3001R\u304c\u6700\u5927\u304b\u3064C\u304c\u6700\u5927\u306e\u7d44\u306e\u500b\u6570\\nfor bx, by in bombs:\\n    if R[bx] == R_max and C[by] == C_max:\\n        count += 1\\n\\ncount_R = R.count(R_max)\\ncount_C = C.count(C_max)\\nif count >= count_R*count_C:\\n    ans = R_max + C_max - 1\\nelse:\\n    ans = R_max + C_max\\nprint(ans)", "target": "694", "substitutes": {"H": ["F", " h", "L", "V", "Q", "X", "DH", "Y", "K", "h", "SH", "O", "P", "T", "C", "B", "D", "S", "w", "HR", "EH", "Z", "HH", "HI", "U", "Height", "J", "N", "G", "Wh", "CH"], "W": ["F", "E", "V", "Q", "X", "Y", "WR", "MW", "NW", "GW", "RW", "P", "B", "C", "T", "w", "We", "Z", "WM", "N", "VW", "G", "Wh", "FW", "BW"], "M": ["F", "MN", "E", "V", "Q", "X", "Y", "K", "O", "P", "B", "T", "C", "D", "S", "A", "CM", "I", "Z", "MH", "m", "U", "J", "N", "MM", "G"], "R": ["F", "rh", "E", "RG", "Rs", "L", "V", "X", "SR", " r", "r", "RW", "O", "P", "B", "C", "D", "S", "I", "Z", "J", "N", "G", "RA", "RH", "RM"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**8)\\n\\nn = int(input())\\nA = list(map(int, input().split()))\\n\\ndef f(i, v):\\n    if i == n:\\n        return any(x % 2 == 0 for x in v)\\n\\n    ans = 0\\n    for d in (-1, 0, 1):\\n        v_ = v[:]\\n        v_.append(A[i]+d)\\n        ans += f(i+1, v_)\\n\\n    return ans\\n\\nprint(f(0, []))", "target": "282", "substitutes": {"n": [" N", "s", "k", "a", "p", "c", "o", "y", "nc", "num", "ne", "z", "fn", "nan", "sn", "w", "l", "nin", "u", "pi", "nn", "j", "m", "Ns", "ns", "b", "e", "N", "t", "pn", "nb"], "A": ["F", "E", "a", "L", "At", "V", "H", "AS", "X", "p", "Y", "AN", "P", "B", "C", "T", "D", "As", "mA", "Ar", "API", "array", "AA", "Alpha", "S", "I", "args", "Average", "Array", "am", "data", "Input", "alpha", "M", "N", "G", "Ang", "an", "ad"], "i": ["k", "a", "int", "p", "ai", "c", "y", "r", "o", "ini", "axis", "iu", "ti", "z", "si", "index", "yi", "w", "ind", "start", "I", "l", "u", "pi", "ki", "j", "f", "m", "xi", "ni", "ci", "b", "key", "e", "t", "id", "li", "ii", "bi"], "v": ["s", "k", "vi", "a", "value", "ve", "int", "V", "va", "p", "g", "c", "var", "y", "o", "values", "api", "vs", "z", "array", "vp", "nv", "w", "l", "u", "q", "f", "j", "m", "b", "t", "e", "val", "sv", "vd"], "x": ["dx", "a", "int", "X", "p", "xs", "c", "_", "xx", "y", "h", "ix", "num", "any", "z", "ex", "index", "xxx", "w", "cross", "u", "max", "j", "ax", "f", "xi", "xp", "an", "e", "xy", "id", "xc", "abc", "xa"], "ans": ["s", "a", "ents", "lan", "nas", "cas", "amps", "eps", "ends", "na", "ai", "ats", "ions", "AN", "ads", "ANS", "ks", "vs", "aces", "ann", "anc", "ays", "errors", "es", "can", "nan", "als", "ars", "args", "lines", "aned", "ids", "aus", "ons", "ens", "sk", "ants", "flags", "ns", "os", "reads", "ls", "cons", "all", "plan", "ds", "an", "ins"], "d": ["dx", "s", "aid", "dd", "end", "a", "ed", "p", "nd", "std", "g", "c", "y", "rd", " c", "D", "ou", " dd", "da", "ind", "w", "l", "u", "xd", "q", "dt", "m", "du", "days", "dc", "cd", "di", "day", "ci", "dim", "dev", "e", "pd", "ds", "id", " D", "dn", "ad"], "v_": ["V2", "m2", "v2", " v2", "z_", "m_", "sv2", "z2", "sv_", "V_"]}}
{"code": "def solve():\\n    import math\\n    K = int(input())\\n    ans = 0\\n    for i in range(1, K+1):\\n        for j in range(1, K+1):\\n            for k in range(1, K+1):\\n                ans += math.gcd(math.gcd(i,j), k)\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "19", "substitutes": {"K": [" N", "F", "Power", "KK", "E", "Ke", "L", "V", "Max", "H", "Q", "X", "Y", "IK", " SK", "AN", "O", "ks", "P", "C", "Sk", "T", "B", "D", "SK", "NK", "KS", "Kent", "S", "KC", "I", "HK", "sk", "UK", "Z", "KR", "PK", " KP", "U", "M", "J", "CP", "CC", "N", "KA", "G", "CH", " P", " NK"], "ans": ["s", "ents", "lan", "nas", "les", "amps", "ras", "atan", "na", "ats", "aning", "anas", "AN", "ANS", "anes", "ks", "asts", "mean", "aces", "ane", "ann", "anon", "ani", "anc", "ays", "es", "ana", "can", " means", "nan", "ars", "anus", "aned", "nn", "ons", "aus", "sk", "cs", "ants", "ns", "os", "san", "ls", "ds", "an"], "i": ["a", "int", "chi", "p", "phi", "ai", "c", "o", "r", "ini", "im", "iu", "z", "si", "x", "yi", "ind", "I", "ia", "l", "u", "pi", "d", "io", "f", "ir", "m", "xi", "ij", "v", "b", "id", "li", "ii", "bi", "ip"], "j": ["ion", "ji", "ie", "ja", "p", "g", "o", "y", "jj", "h", "im", "ijk", "jit", "jl", "z", "x", "ind", "I", "l", "uj", "d", " J", "q", "js", "jp", "f", "m", "jc", "xi", "aj", "ij", "J", "b", "v", "kj", "ii", "ang", "n"], "k": ["km", "a", "kid", "ke", "p", "g", "c", "dk", "o", "kk", "ijk", "kg", "ks", "kn", "z", "kl", "x", "mk", "kw", "w", "kin", "ko", "ak", "ok", "u", "unk", "q", "ki", "sk", "m", "v", "ck", "kb", "uk", "n"]}}
{"code": "import numpy as np\\nimport numba\\nimport sys\\nfrom numba import njit, b1, i4, i8, f8\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\n\\n@njit((i8, i8, i8[:]), cache=True)\\ndef main(Height, Width, XY):\\n    UP = 300010\\n    row = np.zeros(UP, np.int64)\\n    col = np.zeros(UP, np.int64)\\n    \\n    for i in range(0, len(XY), 2):\\n        x, y = XY[i:i + 2] - 1\\n        row[x] += 1\\n        col[y] += 1\\n    \\n    row_max = row.max()\\n    col_max = col.max()\\n\\n    judge = np.sum(row == row_max) * np.sum(col == col_max)\\n\\n    for i in range(0, len(XY), 2):\\n        x, y = XY[i:i + 2] - 1\\n        \\n        if (row[x] == row_max and col[y] == col_max):\\n            judge -= 1\\n    \\n    summ = row_max + col_max\\n    \\n    return (summ if judge else summ - 1)\\n\\n\\nHeight, Width, M_ko = map(int, readline().split())\\nXY = np.array(read().split(), np.int64)\\n\\nans = main(Height, Width, XY)\\nprint(ans)\\n", "target": "694", "substitutes": {"read": ["raw", "end", "rest", "align", "open", "reader", " write", "method", "stream", "default", "c", "process", "load", "r", "lex", "rx", "work", "Read", "iter", "connect", "write", "run", "READ", "index", "build", "body", "ind", "w", "current", "exec", "get", "d", "buffer", "show", "readable", "report", "right", "update", "walk", "sync", " reads", "scan", "input", "check", "reads", "data", "find", "bind", "play", "reading", "add", " Read", "send", "fill", "parse", "config", "feed"], "readline": ["writeLine", "loadlist", "loadlines", "inputLine", "inputline", "loadLine", "readLine", " readlist", "readlist", "loadline", "loadlog", " readlog", "writelines", "inputlog", "writeline", "writelist", "inputlines", " readLine", "readlog"], "readlines": ["readstrings", "readframes", "readinglines", "loadframes", "loadlines", "READline", "readeritems", "readerlines", "readingitems", "Readstrings", "Readline", "readerframes", "loadline", "readitems", "READstrings", "Readlines", "readerline", "readingline", "loaditems", " readstrings", " readframes", "readingframes", "READlines", "Readframes", "READframes"], "Height": ["Power", "Hi", "Length", "Above", "Pixel", "Max", "Grid", "H", "Build", "X", "Y", "Size", "Tech", "East", "WD", "height", "TH", " height", "Family", "Week", "Rank", "Zip", "Over", "HUD", "SIZE", "Depth", "Dim", "Row", "Ch", "HH", "Data", "Round", "Ra", "Stretch", "High", "Hour", "Time", "Top", "Room", "Bottom", "Pull", "Sky", "Block", "RH", "Header"], "Width": ["Length", "Network", "L", " width", "FL", "Scale", "X", "Size", "Cut", "width", "Text", "Across", "BW", "Core", "Widget", "Left", "Len", "Space", "Settings", "WH", "Format", "Weight", "W", "Pen", "NY", "File", "Pain", "Dim", "CM", "Age", "Spread", "Style", "Output", "Step", "Sp", "Frame", "Web", "Fl", "Fill", "Will", "Pl", "El", "Stretch", "Content", "Paper", "Win", "N", "White", "Pull", "Wind", "Unit", "Amount", "FontSize", "With"], "XY": ["Lib", "Ro", "IF", "Poly", "phi", "XP", "Files", "API", "EY", "Proxy", "Ch", "Line", "Site", "zip", "LI", "Ruby", "xy", "Col", "Pixel", "PO", "LT", "Grid", "XX", "X", "MI", "YN", "Ge", "LP", "FILE", "Multiple", "Len", "Tile", "IP", "Sync", "XXX", "Photo", "Vo", "IO", "Data", "LINE", "Py", "Room", "Image", "PDF", "Location", "Xi", "Co", "XXXX", "CI", "Python", "RT", "Clock", "Pie", "FF", "Zip", "Zone", "Fi", "Multi", "py", "VT", "PI", "VO", "Bot", "Y", "Copy", "Widget", "File", "GUI", "FO", "Pic", "Job", "Net", "Scene", "DOS", "Tex"], "UP": ["PI", "RAW", "ups", "Up", "TOP", "CU", "ALL", "Y", "UB", "UC", "USH", "Flow", "NW", "MP", "LP", "upt", "NUM", "UM", "ASC", "IP", "API", "Down", "Zip", "SIZE", "UD", "UV", "IM", "upper", "upp", "OW", "AMP", "Offset", "Us", "DOWN", "up", "UMP", "U", " up", "FFFF", "UI", "Unit", "SU", "um", "UL"], "row": ["ride", "cur", "raw", "loc", "group", "auto", "line", "sc", "feed", "roll", "p", "rows", "c", "post", "height", "h", "r", "low", "head", "project", "coll", "ro", "grid", "div", "scale", "server", "index", "image", "w", "node", "Row", "l", "pi", "max", "page", "one", "right", "rc", "model", "agg", "up", "co", "frame", "ri", "oy", "entry", "length", "key", "bar", "ow", "record", "flow", "order", "mod", "xy", "cell", "view", "id", "range", "ry", "block", "offset"], "col": ["character", "min", "field", "loc", "cur", "ol", "line", "collection", "win", "p", "c", "pol", "px", "pos", "cp", "chain", "year", "el", "oc", "left", "coll", "COL", "ch", "index", "file", "w", "con", "l", "icol", "out", "core", "color", "co", "oy", "ct", "fl", "path", "ell", "key", "cel", "cf", "cr", "cell", "il", "Col", "ail", "keep", "val", "py", "word", "cl", "column", "block"], "i": ["ui", "a", "ei", "int", "ie", "qi", "p", "phi", "ai", "g", "c", "o", "ix", "ini", "iu", "slice", "lc", "ti", "z", "mini", "si", "eni", "index", "yi", "mu", "ind", "uli", "I", "uri", "l", "u", "pi", "j", "io", "f", "m", "cli", "xi", "ori", "di", "ri", "ni", "ip", "ci", "v", "e", "info", "zi", "id", "multi", "li", "ii", "part", "anti", "bi", "n"], "x": ["dx", "name", "k", "line", "int", "dy", "ye", "X", "p", "win", "xs", "c", "xx", "yx", "fx", "h", "r", "px", "o", "rx", "z", "ex", "index", "w", "l", "wx", "u", "d", "max", "one", "j", "f", "xi", "ya", "hi", "data", "b", "v", "key", "e", "xy", "zi", "py", "id", "n"], "y": ["a", "ady", "dy", "ye", "gy", "p", "Y", "c", "h", "ym", "ay", "z", "zy", "yi", "yo", "cy", "ny", "l", "yt", "u", "d", "sy", "j", "ky", "m", "up", "yy", "ya", "oy", "b", "v", "key", "xy", "py", "vy", "id", "ry", "ey", "n"], "row_max": ["flow_min", "rowJw", "row_ax", "row_cycle", "row_index", " row_rest", "row\u00b7Max", "col_sum", " row_Max", "row_sum", "row_Max", "col_wh", "row_wh", "col_cycle", "flow_max", "row_cent", "row_rest", "row_min", "rowJmax", "rowJwh", "row\u00b7rest", "col_w", "flow_ax", "col_min", "flow_index", "row_w", "row\u00b7cent", "row\u00b7max", " row_cent"], "col_max": ["col_c", "col_default", " col_min", " col_orig", "column_MAX", "col_MAX", "column_max", "row_min", "col_Max", "col_min", "row_sum", "column_Max", "col_orig", "row_c", "column_default", "col_sum"], "judge": ["judgate", "emerger", "Judges", " judges", "dogGE", "Judgy", "juGE", "emerge", " judgate", "judges", "juge", " judger", "Judger", "judger", "judgee", "dogger", "doggate", " judgy", "doggee", "judGE", "judgy", "dogges", "JudGE", "emergate", "jugee", "doggy", "dogge", " judgee", "Judge", "juger", "Judgee", "emerges"], "summ": ["insum", "scumm", " sums", "scum", " sum", "insumm", "Summ", "sesum", "insummer", "summer", "insugar", "sesusc", "sesumm", "susc", "sums", "scummer", "Summer", "Sumo", "insumo", "scums", "sugar", " summer", "sumo", "Sum", "insusc", "sum", "sesugar"], "M_ko": ["MNKo", "N_Ko", "MNko", "N_ko", "M_Ko", "MNK", "M_CO", "N_CO", "M_K", "MNCO", "N_K"], "ans": ["lan", "ras", "cas", "nas", "gan", "Ann", "aning", "anas", "AN", "aos", "photos", "ANS", "anes", "ane", "ann", "anse", "ani", "anc", "anon", "ana", "ania", "can", "outs", "An", "aned", "ace", "ons", "aus", "anne", "ants", "ns", "man", "ran", "san", "Scan", "ANN", "plan", "ds", "NA", "an", "ins"]}}
{"code": "#from collections import deque\\n#from heapq import heapify, heappop, heappush\\n#from bisect import insort\\n#from math import gcd\\n#mod = 10**9 + 7\\nN = int(input())\\n#N, K = map(int, input().split())\\n#A = list(map(int, input().split()))\\nflag1 = False\\nflag2 = False\\nflag3 = False\\nc, d = map(int, input().split())\\nif c == d:\\n\tflag1 = True\\nc, d = map(int, input().split())\\nif c == d:\\n\tflag2 = True\\nc, d = map(int, input().split())\\nif c == d:\\n\tflag3 = True\\n\\nk = 3\\nwhile k < N:\\n\tif flag1 and flag2 and flag3:\\n\t\tbreak\\n\tk += 1\\n\tc, d = map(int, input().split())\\n\tflag1 = flag2\\n\tflag2 = flag3\\n\tif c == d:\\n\t\tflag3 = True\\n\telse:\\n\t\tflag3 = False\\n\t\t\\n\\n#ans = 0\\n#print(ans)\\n#print('Yes')\\nif flag1 and flag2 and flag3:\\n\tprint('Yes')\\nelse:\\n\tprint('No')", "target": "709", "substitutes": {}}
{"code": "import math\\n\\na, b, x = [int(n) for n in input().split()]\\n\\ndef to_deg(theta):\\n    return theta * 180 / math.pi\\n\\nif x <= a**2 * b / 2:\\n    theta = math.atan((a * b**2) / (2*x))\\nelse:\\n    theta = math.atan(2 * (a**2 * b - x) / a**3)\\n\\nprint(to_deg(theta))", "target": "619", "substitutes": {"a": ["aa", "s", "va", "at", "ma", "p", "na", "ai", "aw", "c", "i", "ama", "y", "o", "ba", "ab", "au", "z", "da", "pa", "A", "w", "ia", "l", "u", "d", "aaa", "ca", "f", "sa", " A", "ac", "asa", "ga", "m", "area", "am", "aj", "ae", "alpha", "e", "an", "ad"], "b": ["be", "fb", "p", "bs", "g", "c", "i", "y", "h", "wb", "mb", "beta", "B", "ba", "ab", "z", "two", "A", "w", "sb", "body", "l", "bb", "bf", "d", "u", "abb", "f", "j", "m", "xb", "db", "gb", "v", "base", "e", "lb", "bi"], "x": ["dy", "int", "X", "p", "xf", "xs", "c", "g", "i", "xx", "fx", "y", "h", "r", "px", "z", "ex", "xxx", "index", "w", "l", "u", "d", "pi", "q", "f", "j", "ax", "m", "xi", "v", "xp", "e", "t", "xc"], "n": [" N", "name", "k", " p", "p", "na", "nd", "g", "c", "i", " r", " ni", "o", "num", " c", " nan", "nu", "fn", "nan", " fn", "sn", "nat", "l", " ng", "d", "nn", "nt", "ln", "j", "f", " no", "m", "ns", " an", "e", "N", "pn", "t", "dn", " l", "nb"], "theta": [" theda", " theba", "theda", "asterta", "lamtan", "asterpha", "lama", "tha", "thta", "thytera", " theeta", "theba", "thda", "thyeta", "hetda", "Thea", "athepha", " thepha", "hettera", "hetta", "Theta", "atheda", "lamta", "themda", "themta", "thetera", "thyda", " thea", "thyta", "thtan", "theeta", "themba", "heteta", " thetan", "asterda", "Thetan", " thetera", "thempha", "Theda", "Thepha", "asterba", "thepha", "lamda", "atheta", "thetan", "athea", "thea"]}}
{"code": "from collections import Counter,defaultdict,deque\\nfrom heapq import heappop,heappush\\nfrom bisect import bisect_left,bisect_right \\nimport sys,math,itertools,fractions\\nsys.setrecursionlimit(10**8)\\nmod = 10**9+7\\nINF = float('inf')\\ndef inp(): return int(sys.stdin.readline())\\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\\n\\nn = inp()\\nd = defaultdict(int)\\nfor _ in range(n):\\n    s = input() \\n    d[s[0]] += 1\\nres = 0\\nli = ['M','A','R','C','H']\\nfor i in range(3):\\n    a = li[i]\\n    for j in range(i+1,4):\\n        b = li[j]\\n        for k in range(j+1,5):\\n            c = li[k]\\n            res += d[a] * d[b] * d[c]\\nprint(res)", "target": "760", "substitutes": {"mod": [" imp", "mode", "unit", "spec", "MOD", "exp", "init", " exp", "circ", "im", "round", " Mod", "scale", "sim", "comp", "module", "mu", "ind", "cm", "sec", "mag", "fun", "dim", "mods", "debug", "dec", "step", "Mod"], "INF": ["INV", " PINN", " PINF", "InV", "INN", "InF", " INV", " PINV", " INN", "InN"], "n": ["p", "g", "o", "r", "number", "y", "num", "h", "nc", "ne", "z", "x", "sn", "l", "nn", "f", "m", "ns", "no", "ni", "np", "e", "N", "t", "nb"], "d": ["did", "dy", "dh", "p", "g", "dat", "o", "dict", "r", "h", "sd", "y", "ded", "D", "z", "da", "x", "w", "l", "u", "q", "f", "dt", "dl", "m", "dc", "data", "db", "v", "dim", "e", "t", "ds", "dos"], "_": ["int", "__", "g", "num", "of", " time", "l", "out", "f", "all", " num", "ad", "ip"], "s": ["p", "ps", "g", "y", "r", "h", "o", "sl", "ks", "sp", "z", "S", "w", "l", "parts", "u", "ses", "f", "cs", "m", "ns", "v", "e", "t", "ds"], "res": ["rh", "int", "vals", "arr", "pre", "ps", "exp", "rows", "err", "na", "ms", " Res", "r", "rec", "result", "results", "pres", "rep", "re", "gr", "rez", "rev", "z", "es", "response", "Res", "req", "hes", "q", "resolution", "out", "js", "RES", "ons", "details", "cs", "ids", "row", "resh", "resp", "os", "data", "len", "ress", "nos", "powers", "cons", "rys", "id", "ret", "rs", "sum"], "li": ["lp", "vi", "loc", "ie", "chi", "lic", " Mi", "mi", "qi", "p", "ai", "lie", "ly", " ni", "lock", " Li", "la", "lc", "si", "bl", " pi", " mi", "l", "pl", "Li", "pi", "ln", "dl", "lib", "cli", " si", "xi", "co", "ri", "di", "ci", "ni", "list", " di", "lu", "LI", "e", "le", "py", " mini", "zi", "ii", "bi", "lo"], "i": ["ih", "ji", "ui", "ie", "int", "p", "ai", "o", "y", "jj", "ix", "im", "h", "r", "iu", "z", "si", "x", "ind", "I", "l", "u", "pi", "q", "ki", "f", "ir", "m", "xi", "ni", "ci", "ij", "hi", "v", "e", "ii", "ik", "ip"], "a": ["aa", "va", "ao", "p", "ai", "ama", "o", "r", "h", "ba", "ab", "au", "art", "da", "x", "pa", "A", "ak", "u", "f", "sa", "ca", "ac", "aj", "am", "ae", "oa", "alpha", "e", "an", "ad"], "j": ["ji", "ie", "int", "ja", "p", "g", "h", "r", "y", "o", "jj", "jl", "z", "ch", "x", "ind", "w", "it", "l", "u", "q", "f", "jp", "m", "ip", "J", "v", "key", "e", "t", "ii"], "b": ["aa", "ib", "p", "g", "pb", "y", "r", "h", "o", "ba", "B", "ab", "x", "sb", "l", "u", "rb", "f", "ae", "db", "v", "e", "bc", "lb"], "k": ["ke", "p", "g", "K", "h", "r", "o", "y", "kk", "kg", "ks", "kn", "z", "ch", "x", "kw", "w", "it", "l", "ok", "u", "q", "ki", "f", "sk", "m", "v", "key", "ck", "e", "ik"], "c": ["p", "g", "h", "r", "o", "y", "C", "z", "ch", "x", "cy", "cu", "w", "l", "u", "q", "f", "ca", "ac", "m", "ci", "v", "cf", "e", "col"]}}
{"code": "def main():\\n  n = int(input())\\n  #s = input()\\n  #s = input().split()\\n  #a,b = list(map(int,input().split()))\\n  #a = [input() for i in range(n)]\\n  #a = [int(input()) for i in range(n)]\\n  #a = [input().split() for i in range(n)]\\n  #a = [list(map(int,input().split())) for i in range(n)]\\n  ans = 0\\n  count = 0\\n  lis = []\\n  \\n  if n == 25:\\n    print(\"Christmas\")\\n  elif n == 24:\\n    print(\"Christmas Eve\")\\n  elif n == 23:\\n    print(\"Christmas Eve Eve\")\\n  else:\\n    print(\"Christmas Eve Eve Eve\")\\nif __name__ == '__main__':\\n  main()", "target": "191", "substitutes": {"n": [" N", "name", "p", "g", "c", "i", "o", "number", "nc", "num", "z", "fn", "index", "sn", "node", "l", "nn", "f", "network", "j", "m", "ns", "nr", "b", "e", "N", "t", "nb"]}}
{"code": "S=input()\\nT=input()\\ns=len(S)\\nt=len(T)\\nA=[]\\n\\n\\nfor i in range(s-t+1):\\n  word=S[i:i+t]\\n  a=0\\n  for j in range(t):\\n    if word[j]==T[j]:\\n      a+=1\\n    else:\\n      a+=0\\n  A.append(t-a)\\n\\nprint(min(A))", "target": "526", "substitutes": {"S": ["F", "L", "V", "H", "Q", "X", "Y", "SE", "NS", "Si", "TS", "SH", "ST", "SI", "O", "P", "B", "C", "D", "SK", "Sa", "W", "SL", "Sl", "I", "SS", "U", "R", "M", "N", "G", "SU", "n"], "T": ["F", "E", "L", "V", "LT", "H", "Q", "X", "Y", "TA", "Test", "TS", "TN", "TH", "P", "B", "C", "D", "TO", "TG", "TB", "DT", "W", "Type", "NT", "UT", "TX", "Z", "TT", "U", "R", "M", "TF", "N", "WT", "G", "PT"], "s": ["ss", "p", "ps", "xs", "c", "g", "sets", "y", "o", "tp", "h", "z", "si", "es", "x", "w", "l", "ses", "u", "d", "f", "m", "ns", "su", "ts", "b", "gs", "v", "space", "ls", "e", "ds", "sv", "n"], "t": ["k", "at", "tt", "p", "g", "c", "y", "o", "tp", "h", "r", "pt", "tf", "ti", "z", "time", "x", "w", "l", "u", "d", "ta", "dt", "f", "m", "port", "term", "ts", "v", "b", "e", "test", "total", "n"], "A": ["F", "GA", "D", "L", "At", "V", "H", "AS", "Y", "AP", "Adam", "LA", "TA", "Ay", "K", "EA", "AST", "AM", "AB", "SA", "P", "C", "B", "As", "AC", "Ar", "mA", "API", "ASC", "AA", "array", "au", "Alpha", "W", "w", "I", "Average", "ac", "Array", "CA", "AF", "alpha", "M", "N", "G", "Am", "NA"], "i": ["k", "ie", "mi", "p", "ai", "c", "h", "r", "jj", "y", "ini", "pos", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "d", "pi", "f", "m", "xi", "ci", "v", "b", "e", "zi", "id", "li", "ii", "n"], "word": ["letter", "k", "wa", "token", "int", "span", "words", "p", "g", "c", "o", "prev", "we", "section", "O", "tag", "weight", "C", "ana", "art", "x", "W", "w", "start", "Word", "doc", "max", "ac", "term", "man", "ws", "U", "string", "v", "ow", "space", "se", "part"], "a": ["aa", "wa", "at", "va", "span", "ma", "p", "ai", "c", "aw", "o", "y", "ba", "au", "array", "ana", "z", "pa", "x", "da", "ar", "w", "ia", "ata", "l", "u", "d", "ta", "f", "sa", "m", "ac", "asa", "area", "aj", "am", "ae", "alpha", "b", "ea", "e", "count", "part", "an", "ad", "n"], "j": ["ji", "k", "dy", "ja", "p", "g", "c", "jo", "h", "y", "jj", "o", "r", "pos", "z", "je", "si", "index", "x", "ind", "w", "adj", "obj", "l", "u", "d", " J", "job", "jp", "f", "m", "oj", "aj", "ij", "J", "v", "b", "key", "e", "kj", "li", "ii", "n"]}}
{"code": "N = int(input())\\nAB = [[int(i) for i in input().split()] for _ in range(N)]\\n\\nAB.sort()\\nprint(sum(AB[-1]))", "target": "266", "substitutes": {"N": ["F", "Length", "Number", "L", "V", "NN", "H", "X", "Y", "Size", "Num", "NS", "K", "number", "Na", "NM", "O", "P", "B", "T", "C", "D", "Len", "Ne", "S", "A", "I", "Ni", "Z", "Ns", "Part", "R", "M", " n", "n"], "AB": ["Lab", "AK", "LB", "X", "AL", "UB", "AR", "TA", "AST", "IB", "DB", "BA", "AM", "FB", "IGN", "B", "AE", "AV", "AC", "SB", "ab", "IP", "BB", "AA", "BC", "BI", "A", "PP", "Tab", "ABC", "Ab", "BE", "TW", "LAB", "BL", "OB", "Array", "CAP", "AF", "List", "BM", "AG", "NA", "BF"], "i": ["gi", "k", " h", "int", "p", "phi", "ai", "c", " I", "oi", "h", "ini", "iu", "ti", "z", "si", "index", "x", "ind", " il", "I", "l", "u", "pi", "d", "q", "j", "f", "m", "xi", "ri", "ci", "ip", "v", "key", " ii", "e", "id", "ii", "bi", "n"], "_": ["k", "__", "g", " row", " time", " __", "x", " un", "f"]}}
{"code": "A, B, C = input().split()\\nif A[len(A)-1:len(A)] == B[0:1] and B[len(B)-1:len(B)] == C[0:1]:\\n    print('YES')\\nelse:\\n    print('NO')\\n", "target": "334", "substitutes": {"A": ["F", "GA", "E", "Ca", "a", "L", "Az", "AS", "X", "MA", "Y", "AP", "IA", "Adam", "LA", "AR", "EA", "AST", "DATA", "AB", "AM", "SA", "P", "T", "AC", "D", "Ar", "As", "API", "AU", "AA", "Alpha", "S", "Ab", "ANC", "Data", "Array", "CA", "U", "AF", "Input", "R", " a", "N", "Am", "Ang", "HA", "NA", "AW", "Ac", "App"], "B": ["F", "E", "Ca", "EB", "L", "LB", "V", "H", "BT", "Q", "Bah", "X", "Y", "UB", "CU", "c", "DB", "BA", "AB", "O", "P", "T", "D", "AC", "BB", "BC", "BI", "S", "BBC", "TB", "W", "I", "BE", "OB", "WB", "CL", "CA", "U", "GB", "R", "M", "b", "QB", "N", "G", "BER", "BF", " b", "Bs"], "C": ["F", "E", "L", "Cs", "V", "H", "CU", "X", "Y", "c", "YC", "DC", "K", "O", "P", "T", "D", "AC", "BC", "S", "GC", "W", "CM", "CF", "KC", "I", "CD", "Z", "CL", "CA", "CS", "U", "R", "JC", "M", "CC", "N", "G"]}}
{"code": "a,b,c,x,y = map(int,input().split())\\nans = 0\\nab = min(a+b,c*2)\\ntemp = min(x,y)\\nans += ab*temp\\nx -= temp\\ny -= temp\\nans += min(a,c*2)*x \\nans += min(b,c*2)*y\\nprint(ans)", "target": "430", "substitutes": {"a": ["aa", "wa", "p", "ai", "i", "fa", "ba", "z", "au", "da", "pa", "A", "ar", "af", "w", "ah", "u", "d", "f", "sa", "ca", "ac", "m", "asa", "area", "aj", "am", "ae", "alpha", "e", "n"], "b": ["k", "ib", "fb", "p", "bs", "g", "i", "h", "o", "r", "wb", "B", "ba", "z", "w", "sb", "cb", "l", "bb", "d", "bf", "u", "rb", "f", "eb", "j", "m", "db", "v", "e", "lb", "n"], "c": ["s", "k", "cycle", "sc", "p", "g", "i", "h", "ec", "nc", "C", "lc", "uc", "z", "fc", "ce", "cy", "cu", "w", "con", "cm", "l", "u", "d", "f", "ca", "cs", "ac", "m", "dc", "ci", "v", "e", "bc", "cr", "cc", "xc", "n"], "x": ["dx", "k", "dy", "int", "X", "p", "g", "i", "xx", "h", "o", "r", "rx", "px", "ix", "ba", "z", "ex", "xxx", "index", "w", "cross", "l", "u", "d", "max", "q", "f", "ax", "m", "ac", "xi", "ae", "v", "e", "t", "xy", "id", "abc", "an", "n"], "y": ["yr", "yd", "k", "ys", "dy", "p", "Y", "i", "h", "yn", "o", "ym", "year", "z", "yi", "wy", "cy", "w", "ny", "yt", "l", "u", "d", "ish", "j", "f", "sy", "m", "yy", "ya", "oy", "iy", "v", "t", "e", "py", "vy", "ey", "ies", "n"], "ans": ["ano", "s", "ents", "lan", "nas", "offs", "amps", "eps", "ams", "atan", "na", "ats", "activation", "anas", "AN", "ads", "aos", "ANS", "mean", "aces", "ane", "ann", "ani", "anc", "abilities", "ays", "ana", "es", "can", "outs", " means", "nan", "clean", "ars", "aned", "ations", "ace", "atts", "ons", "aus", "ens", "sk", "cs", "ants", "ns", "han", "man", "shape", "ls", "ians", "oss", "an", "ad"], "ab": ["amp", " Ab", "fb", "bs", "aps", "fab", "app", "tmp", "AB", "ap", "ba", "emp", " eb", "pa", "af", "ak", "Ab", "bb", " AB", "cap", "ca", "eb", "ax", "ac", "area", "am", "abl", "ae", "alpha", "abs", " acc", "tab", "cr", "bc", "abc", "an", "ad", "n"], "temp": ["new", "min", "amp", "wa", "const", "level", "tw", "font", "p", "acc", "adapt", "condition", "tim", "fab", "cp", "tmp", "cum", "txt", "pt", "this", "emp", "iter", "sign", "z", "az", "es", "tc", "unc", "white", "now", "w", "current", "adj", "ak", "flat", "ee", "acer", "tem", "max", "q", "sol", "ca", "ac", "Temp", "option", "area", "output", "aj", "am", "parent", "ct", "abs", "fake", "t", "base", "atom", "col", "eff", "test", "sum", "ad", "n"]}}
{"code": "s, t = input(), input()\\nfor i in range(len(t)):\\n    if s == t:\\n        print('Yes')\\n        exit()\\n    s = s[1:] + s[:1]\\nprint('No')", "target": "721", "substitutes": {"s": ["ss", "new", "a", "strings", "qs", "ins", "eps", "p", "states", "ps", "xs", "c", "sets", "tes", "y", "r", "o", "sl", "results", "sf", "times", "si", "es", "als", "S", "w", "sb", "start", "tests", "args", "l", "lines", "ses", "d", "u", "services", "sg", "f", "status", "cs", "m", "ssl", "ments", "ns", "self", "input", "os", "ts", "b", "gs", "v", "string", "ls", "e", "ips", "ds", "ops", "its", "n"], "t": ["k", "text", "a", "token", "python", "tw", "tt", "p", "g", "c", "y", "o", "tp", "tn", "ot", "tmp", "T", "tty", "temp", "z", "x", "st", "w", "l", "u", "d", "ta", "f", "dt", "j", "title", "m", "input", "ts", "v", "b", "e", "test", "total", "n"], "i": ["gi", "end", "int", "p", "c", " I", "h", "r", "iu", "si", "index", "x", "ind", "start", "I", "l", "u", "d", "f", "j", "ip", "e", "il", "id", "li", "ii", "n"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\n\\nMOD = 1000000007  # type: int\\n\\ndef mfact():\\n    f = [1]\\n    for i in range(1, 200007):\\n        f.append(f[-1] * i % MOD)\\n    return f\\n\\ndef inv(x):\\n    res = 1\\n    k = MOD - 2\\n    y = x\\n    while (k):\\n        if(k % 2 == 1):\\n            res = (res * y) % MOD\\n        y = (y ** 2) % MOD\\n        k = k // 2\\n    return res\\n\\ndef comb(n, k, f):\\n    a = f[n]\\n    b = f[n-k]\\n    c = f[k]\\n    bc = (b * c) % MOD\\n    return (a * inv(bc)) % MOD\\n\\ndef solve(N: int, M: int, K: int):\\n    ans = 0\\n    for i in range(N):\\n        for j in range(M):\\n            a = j * (j+1) // 2\\n            b = (M-1-j) * (M-1-j+1) // 2\\n            ans += (a+b) * i + M * (i*(i+1)//2) + a\\n            ans %= MOD\\n    f = mfact()\\n    ans *= comb(N*M-2, K-2, f)\\n    ans %= MOD\\n    print(ans)\\n    return\\n\\n\\n# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    M = int(next(tokens))  # type: int\\n    K = int(next(tokens))  # type: int\\n    solve(N, M, K)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "341", "substitutes": {}}
{"code": "N = int(input())\\n\\nAlice = []\\nBob = []\\n\\na = list(map(int, input().split()))\\na.sort(reverse=True)\\n\\nif len(a) % 2 == 1:\\n    a.append(0)\\n\\nwhile len(a) > 0:\\n    Alice.append(a.pop(0))\\n    Bob.append(a.pop(0))\\n\\nprint(sum(Alice) - sum(Bob))", "target": "452", "substitutes": {"N": ["F", "Nat", "E", "Number", "L", "NR", "NL", "NI", "K", "Na", "O", "P", "B", "C", "T", "Ne", "S", "I", "RN", "No", "Node", "Ns", "M", "NB", " n", "G", "NA", "n"], "Alice": ["You", "Interest", "Blake", "Australia", "Care", "Community", "ICE", "All", "Tony", "Anonymous", "Austin", "Size", "Bernie", "Emily", "Adam", "Friends", "Notice", "Experience", "Witness", "Chicago", "Chelsea", "Alex", "Silver", "Esc", "Eye", "Ell", "Everyone", "Albert", "AA", "A", "Stone", "Address", "America", "Age", "Anna", "Anne", "Orange", "Andrew", "Allen", "Aside", "Array", "Alien", "Here", "Blue", "Shape", "Jane", "Diamond", "Ever", "Atlantic", "ice", "White", "Larry", "English", "Queen", "Everything", "Answer", "Square"], "Bob": ["Hide", "Birth", "Ben", "Boy", "Blake", "Lib", "Rob", "Human", "Bah", "UB", "Bernie", "Adam", "CB", "Robert", "Pro", "Bar", "Jack", "Rub", "Deb", "FB", "B", "Google", " bob", "BB", "BI", "But", "Sab", "Tab", "Chris", "MB", "Ab", "Brian", "Ber", "Brad", "Web", "BL", "OB", "Hub", "Reddit", "Bill", "Pinterest", "Blue", "Sub", "obby", "Since", "Rust", "David", "Ryan", "Brother", "Bear", "Baby", "Joe"], "a": ["aa", "s", "wa", "auto", "ao", "va", "missing", "another", "ans", "p", "ai", "c", "aw", "i", "fa", "ama", "o", "y", "la", "ba", "ab", "au", "array", "da", "x", "index", "pa", "A", "w", "args", "u", "d", "aaa", "f", "ca", "sa", "aba", "m", "asa", "ac", "ga", "address", "area", "aux", "input", "am", "list", "ae", "aj", "alpha", "b", "ea", "e", "all", "an", "ast", "ad", "n"]}}
{"code": "s = input()\\ncnt0 = s.count('-')\\ncnt1 = s.count('+')\\nprint(cnt1 - cnt0)", "target": "166", "substitutes": {"s": ["strings", "a", "words", "p", "states", "xs", "c", "g", "i", "sets", "r", "results", "es", "blocks", "events", "S", "w", "sb", "tests", "args", "l", "parts", "ses", "lines", "services", "conv", "u", "js", "f", "ssl", "m", "ns", "ws", "input", "os", "b", "string", "space", "e", "ls", "opens", "t", "letters", "ds", "sv"], "cnt0": ["cnt50", "cst50", "cnum0", "cst1", "Cct50", "count0", "Cct00", "cnum1", "Cct2", "cnt2", "cnum2", "cct50", "cno0", "cst2", "Cnt1", "count1", "Cnt2", "count2", "cct1", "Cct0", "count00", "cnum50", "cnt00", "Cnt50", "cct0", "cct2", "cno2", "cno1", "cno00", "Cnt0", "Cct1", "cct00", "cst0", "Cnt00"], "cnt1": ["count01", " cnt2", "cptn", " cptn", "cpt1", "count0", "Cct01", "cpt01", "cnc1", "cct01", "cnc2", "cpt2", "Cct2", "cnt2", "cnt01", "cntn", "cncn", "Cnt1", "count1", "Cnt2", "count2", "cct1", "Cct0", "cct0", "cct2", " cpt1", " cpt2", "Cnt01", "cpt0", "cctn", " cpt0", "Cnt0", " cntn", "Cct1", "cnc0"]}}
{"code": "def resolve():\\n    N, K = map(int, input().split())\\n    candy_counter = [0] * N\\n\\n    for _ in range(K):\\n        d = int(input())\\n        A = list(map(int, input().split()))\\n        for i in A:\\n            candy_counter[i-1] += 1\\n\\n    ans = 0\\n    for i in candy_counter:\\n        if i == 0:\\n            ans += 1\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    resolve()", "target": "252", "substitutes": {"N": ["F", "E", "L", "V", "NN", "H", "Q", "X", "Y", "NS", "O", "P", "T", "C", "B", "D", "S", "W", "I", "Z", "Ns", "U", "R", "M", "J", " n", "G", "n"], "K": ["F", "k", "KK", "E", "L", "V", "H", "Q", "X", "Y", "O", " k", "P", "T", "C", "Sk", "D", "B", "SK", "KS", "S", "W", "Z", "KR", "U", "R", "M", "J", "KA", "G", "KN", "n"], "candy_counter": ["cavy_buffer", "cavy_counter", "candy_inter", "candy\u00b7inter", "caddy_time", "candy_number", "caddy_cache", "candy_time", "cavy_entry", "candy_entry", "caddy_inter", "caddy_counter", "candy\u00b7cache", "caddy_count", "candy_average", "candy\u00b7counter", "candy_count", "candy_cache", "caddy_average", "candy_buffer", "candy\u00b7time", "cavy_number"], "_": [" p", "p", "g", "h", "o", " x", " __", "x", "I", " m", "f", " j", "ip"], "d": ["dd", "p", "std", "c", "o", "sd", "C", "D", "DD", "da", "Ds", "do", "Di", "Do", "Ma", "m", "dc", "di", "ci", "dim", "ds", "id", " D", "dos", "DI", "ad", "n"], "A": ["AD", "E", "a", "L", "At", "V", "H", "Y", "LA", "AN", "AM", "SA", "P", "B", "C", "T", "D", "As", "API", "array", "AA", "au", "Alpha", "S", "I", "Z", "II", "Array", "CA", "U", "alpha", "M", "G", "Am", "KA", "NA", "An"], "i": ["gi", "s", "k", "ui", "a", "ei", "int", "qi", "p", "phi", "ai", "c", "o", "r", "ix", "axis", "iu", "ti", "z", "si", "index", "x", "ind", "I", "l", "idi", "u", "pi", "io", "j", "f", "m", "xi", "di", "ni", "v", "b", "t", "e", "zi", "id", "li", "ii", "n"], "ans": ["s", "aid", "dd", "a", "lan", "nas", "ins", "amps", "p", "na", "ai", "aning", "Na", "AN", "ANS", "ks", "ann", "anon", "ani", "anc", "ays", "ana", "errors", "can", "x", "nan", "An", "ars", "aned", "nn", "ki", "sk", "ants", "ns", "scan", "os", "ls", "plan", "ds", "an", "ad", "n"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\n\\n\\ndef solve(N: int, P: \"List[int]\"):\\n    sorted_lis = sorted([(n, i) for i, n in enumerate(P)])\\n    max_con = 1\\n    con_cnt = 0\\n    pre_idx = N\\n    for _, i in sorted_lis:\\n        if i > pre_idx:\\n            con_cnt += 1\\n        else:\\n            max_con = max(max_con, con_cnt)\\n            con_cnt = 1\\n        pre_idx = i\\n    max_con = max(max_con, con_cnt)\\n    print(N - max_con)\\n    return\\n\\n\\n# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    P = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\\n    solve(N, P)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "525", "substitutes": {}}
{"code": "def merge(A,left,mid,right):\\n    global cnt\\n    n1 = mid - left\\n    n2 = right - mid\\n    cnt += n1+n2\\n    L = [A[left+i] for i in range(n1)]\\n    R = [A[mid+i] for i in range(n2)]\\n    L.append(float(\"inf\"))\\n    R.append(float(\"inf\"))\\n    i = 0\\n    j = 0\\n    for k in range(left,right):\\n        if L[i] <= R[j]:\\n            A[k] = L[i]\\n            i += 1\\n        else:\\n            A[k] = R[j]\\n            j += 1\\n\\ndef mergesort(A,left,right):\\n    if left +1 < right:\\n        mid = int((left+right)/2)\\n        mergesort(A,left,mid)\\n        mergesort(A,mid,right)\\n        merge(A,left,mid,right)\\n\\nn = int(input())\\nA = list(map(int,input().split()))\\ncnt = 0\\nmergesort(A,0,n)\\nprint(\" \".join(map(str,A)))\\nprint(cnt)\\n", "target": "201", "substitutes": {"A": ["At", "Az", "Entry", "MA", "LA", "K", "AM", "API", "AA", "Rap", "Input", "AMI", "Wa", "G", "Mid", "Answer", "AD", "GA", "Point", "H", "X", "Parts", "AU", "As", "au", "Alpha", "Data", "Action", "Array", "U", "Part", "N", "Ang", "NA", "App", "Australia", "All", "AL", "This", "Ay", "O", "SA", "B", "C", "mA", "Args", "S", "Ma", "M", "The", "An", "Java", "Long", "F", "a", "New", "From", "Y", "AP", "Adam", "Sample", "AR", "TA", "Math", "Ha", "AW", "P", "T", "D", "AC", "Ar", "W", "File", "I", "PA", "Average", "CA", "AF", "Am", "HA"], "left": ["min", "middle", "loc", "full", "last", "a", "end", "line", "level", "p", "plus", "c", "hide", "center", "low", "o", "Left", "lower", "law", "pos", "inf", "both", "size", "local", "ne", "lc", "long", "two", "index", "ind", "start", "l", "pl", "d", "one", "f", "m", "none", "position", "half", "small", "list", "no", "length", "len", "ell", "e", "all", "le", "cell", "id", "inner", "cl", "li", "front", "offset", "lo"], "mid": ["min", "mouse", "middle", "end", "line", "int", "late", "pid", "mer", "mr", "top", "mi", "nd", "ms", "nm", "mult", "center", "low", "medium", "r", "main", "head", "lower", "md", "pos", "la", "first", "size", "mini", "grid", "rand", "scale", "index", "diff", "x", "master", "ind", "start", "patch", "d", "max", "member", "offset", "m", "small", "pad", "depth", "lim", "hi", "med", "dim", "len", "down", "high", "le", "mm", "multi", "id", "sub", "Mid", "inner", "range", "part", "off", "rad"], "right": ["rh", "middle", "then", "end", "last", "rest", "rights", "third", "method", "nd", "rw", "h", "r", "rd", "rew", "head", "round", "ro", "rand", "x", "w", "Right", "th", "remote", "d", "max", "ra", "row", "one", "three", "different", "none", "rel", "length", "down", "through", "id", "range", "part", "off"], "n1": ["c3", " n01", "p3", " n3", "l2", "n01", "n3", "p1", "N2", "p2", "p01", "l01", "l3", "nOne", " nOne", "l1", "c2", "pOne", "NOne", "N1", "N3", "c1"], "n2": [" n02", "N6", "v2", " ntwo", "v4", "p4", "p02", "d62", "pTwo", "c02", "v6", "cTwo", "n62", "ktwo", "N4", "dtwo", "ctwo", "n4", "k2", "N2", "n02", "p1", "p2", "nTwo", " n62", "c2", "k62", "n6", "ntwo", "N1", "v1", "d2", "ptwo", "p6", " nTwo"], "cnt": ["dcnc", "cNT", "dcNT", " cpt", "cpt", "dcno", "CNT", "dcnt", "cnc", "lcpt", "acnd", "scNT", " cNT", "Cpt", "ncnt", " cct", "cct", "ncnd", " cnc", "acnt", "Cnt", " cno", "Cnc", "Cno", "acNT", " cnd", "scnt", "acnn", "cno", "scpt", "lcnt", "lcct", "scnd", "ncnn", "cnn", "Cct", "lcNT", "cnd", "ncNT", "Cnd", " cnn"], "L": ["F", "E", "LB", "IL", "LT", "TL", "NL", "FL", "LS", "X", "LA", "LP", "Lu", "LU", "Left", "P", "LM", "B", "D", "PL", "SL", "W", "Sl", "I", "l", "EL", "LR", "Li", "LE", "Line", "BL", "RL", "Lo", "CL", "U", "List", "J", "LO", "LI", "XL", "N", "DL", "LL", "G", " l", "VL", "Long", "UL"], "i": ["ji", "ui", "a", "ie", "int", "qi", "p", "ai", "c", "o", "r", "y", "ini", "iu", "ti", "z", "si", "index", "x", "yi", "w", "start", "ind", "I", "l", "u", "d", "pi", "q", "ki", "f", "m", "xi", "ori", "di", "ri", "ni", "ci", "ip", "ij", "hi", "b", "v", "e", "t", "id", "li", "ii", "ik"], "R": ["F", "E", "Rs", "NR", "V", "H", "Q", "X", "Y", "SR", "AR", "WR", "K", "r", "RW", "RR", "O", "RE", "P", "B", "T", "TR", "D", "RO", "S", "W", "Red", "HR", "RS", "Right", "GR", "Rh", "RN", "I", "DR", "LR", "BR", "Z", "KR", "RL", "CL", "RP", "U", "M", "J", "JR", "N", "G", "RA", "CR", "RH"], "j": ["ji", "ie", "ja", "qi", "p", "y", "r", "jj", "h", "o", "ix", "jl", "z", "si", "x", "I", "l", "u", "d", "uj", "pi", "q", "jp", "f", "m", "jc", "aj", "ni", "J", "v", "b", "e", "li", "ii", "ik"], "k": ["km", "s", "a", "ke", "p", "g", "c", " r", "K", "y", "r", "o", "num", "kk", "h", "ijk", "ks", "z", "x", "ind", "w", "I", "l", "u", "d", "q", "ik", "f", "sk", "ki", "m", "ky", "ku", "b", "v", "e", "id", " l"], "n": ["a", "p", "g", "c", "o", "r", "nc", "num", "en", "un", "y", "net", "ne", "z", "x", "nan", "sn", "l", "d", "nn", "nt", "f", "m", "ns", "ni", "len", "b", "t", "N", "nb", "an"]}}
{"code": "N = int(input())\\nA, B = map(int, input().split())\\nP = list(map(int, input().split()))\\ncnt = [0]*3\\n\\nfor i in range(N):\\n    if(P[i] >= B+1):\\n        cnt[2] += 1\\n    elif(P[i] <= A):\\n        cnt[0] += 1\\n    else:\\n        cnt[1] += 1\\nprint(min(cnt))", "target": "372", "substitutes": {"N": ["F", "E", "L", "V", "H", "Q", "X", "Y", "NC", "NS", "NE", "K", "Na", "O", "C", "T", "D", "Ne", "S", "W", "I", "No", "NT", "Z", "Ns", "U", "R", "M", "J", "NB", "G", "NA", "n"], "A": ["F", "AD", "E", "a", "L", "V", "AI", "X", "AS", "Y", "MA", "AP", "LA", "AR", "TA", "K", "AH", "O", "C", "T", "D", "AC", "API", "AA", "S", "W", "I", "PA", "CA", "U", "R", "AF", "M", "G", "NA", "RA"], "B": ["F", "E", "L", "V", "H", "Q", "X", "Y", "K", "BA", "AB", "O", "C", "T", "D", "BB", "S", "W", "I", "Z", "BL", "U", "R", "GB", "M", "J", "b", "NB", "G", "Bs"], "P": ["F", "TP", "E", "PO", "L", "V", "PUT", "Q", "X", "p", "Y", "AP", "K", "PS", "LP", "O", "T", "C", "D", "NP", "Ps", "IP", "API", "S", "PP", "PR", "PA", "PK", "Py", "U", "R", "Part", "PIN", "M", "CP", "PU", "G", "APP", "PT"], "cnt": ["ecrt", "cNT", " cpt", "cpt", "CNT", "cnc", "conno", "concat", " crt", "ccat", " cNT", "cct", "crt", " cnc", "connt", "lcrt", "Cnt", " cno", "nNT", "nnc", "nnot", "conpt", "Cno", "nrt", "ecnt", "nount", "connc", "nnt", "nno", "ncat", "npt", " ccat", " count", "cno", "lcnt", "Cnot", "cnot", "lcct", "conrt", "Crt", "count", " cnot", "Cct", "ecct", "lcNT", "ecNT", "Count"], "i": ["gi", "k", "ui", "ei", "qi", "p", "ai", "c", " I", "h", "y", "r", "ix", "iu", "z", "si", "index", "x", "ind", "start", "I", "it", "l", "uri", "u", "d", "j", "f", "io", " j", "xi", "ni", "ip", "ci", "v", "b", "e", "id", "li", "ii", "n", "bi", "ti"]}}
{"code": "top=int(input())\\nbottom=int(input())\\nheight=int(input())\\n \\nnum=top+bottom\\n \\nans=int(num*height/2)\\n \\nprint(str(ans))", "target": "319", "substitutes": {"top": ["min", "TOP", "above", "span", "p", "border", "pos", "crop", "left", "first", "size", "file", "master", "start", "lon", "max", "upper", "right", "position", "header", "title", "tops", "stop", "up", "bot", "Top", "padding", "high", "front", "offset", "n"], "bottom": ["ss", "min", "op", "end", "last", "dy", "super", "level", "dist", "opt", "border", "pos", "both", "left", "size", "url", "body", "lon", "max", "root", "nn", "j", "right", "position", "style", "below", "depth", "bot", "parent", "area", "no", "Bottom", "order", "py", "id", "home", "bas", "off", "offset", "org"], "height": ["ss", "name", "dy", "above", "level", "dir", "rows", "width", "y", "h", "crop", "size", "div", "hang", "image", "lon", "max", "upper", "row", "right", "style", "up", "depth", "Height", "data", "bin", "len", "view", "flow", "high", "id", "ul", "wall", "block"], "num": ["cube", "name", "unit", "span", "init", "Num", "mon", "mult", "width", "number", "un", "pos", "NUM", "size", "coord", "index", "norm", "con", "cal", "nn", "upper", "max", "uni", "one", "parent", "no", "su", "bin", "len", "count", "off", "col", "ul", "nb", "sum", "block", "um", "total", "n"], "ans": ["ss", "s", "lan", "nas", " span", "na", "atan", "gan", " ang", "aning", "AN", "ANS", "anes", "ane", "ann", "anon", "anc", "ana", "can", "asin", "anned", "ars", "anus", "con", "aned", "nn", "max", "ons", "anan", "works", "ln", "ants", "ns", "man", "scan", "ran", "os", "san", "len", " case", " n", " max", "plan", " len", "an"]}}
{"code": "def cmb(n, r, mod):\\n    if ( r<0 or r>n ):\\n        return 0\\n    r = min(r, n-r)\\n    return g1[n] * g2[r] * g2[n-r] % mod\\n\\nmod = 10**9+7 #\u51fa\u529b\u306e\u5236\u9650\\nN = 2*(10**6)\\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\\n\\nfor i in range( 2, N + 1 ):\\n    g1.append( ( g1[-1] * i ) % mod )\\n    inverse.append( ( -inverse[mod % i] * (mod//i) ) % mod )\\n    g2.append( (g2[-1] * inverse[-1]) % mod )\\n\\nK = int(input())\\nS = input()\\nL = len(S)\\n\\nans = 0\\nfor i in range(K+1):\\n    ans += cmb(K+L-i-1,K-i,mod)*pow(25,K-i,mod)*pow(26,i,mod)\\n    ans %= mod\\n\\nprint(ans)", "target": "539", "substitutes": {"n": ["min", "s", "k", "p", "g", "c", "i", "o", "number", "num", "nc", "y", "net", "h", "rn", "ne", "z", "x", "sn", "w", "l", "cn", "d", "nt", "u", "f", "j", "m", "sr", "ns", "R", "nr", "b", "v", "t", "N", "e"], "r": ["rh", "min", "rr", "yr", "k", "s", "mr", " R", "p", "g", "c", "err", "i", "h", "rd", "radius", "pr", "rf", "re", "rn", "hr", "x", "ar", "w", "l", "rb", "d", "u", "j", "sr", "m", "ir", "dr", "right", "f", "rt", "R", "nr", "b", "v", "e", "cr", "t", "order", "fr", "ru", "er", "rs", "rad"], "mod": [" MOD", "min", "cur", "mode", "spec", "int", "dig", "MOD", "rm", "method", "exp", "num", "im", "pm", "round", "tr", "md", "re", "reg", " Mod", "div", "rule", "x", "comp", "module", "sec", "d", "max", "row", "j", "f", "lib", "m", "ac", "comb", "fun", " modifier", "am", "mods", "dev", "complex", "add", "step", "sub", "form", "rad", "Mod"]}}
{"code": "N, K = map(int, input().split())\\nA = [list(map(int, input().split())) for _ in range(N)]\\nA.sort()\\nfor i in range(N):\\n    if K>A[i][1]:\\n      K -= A[i][1]\\n    else:\\n      ans = A[i][0]\\n      break\\nprint(ans)", "target": "608", "substitutes": {"N": ["F", "k", "E", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "Num", "NS", "AN", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "I", "No", "Z", "Ns", "U", "R", "M", "J", " n", "G", "n"], "K": ["F", "k", "KK", "E", "L", "KI", "V", "H", "Ak", "Q", "X", "Y", "O", "Sk", "P", "T", "C", "B", "SK", "D", "NK", "KS", "S", "W", "I", "Z", "KR", "PK", "U", "R", "J", "M", "G", "KA", "KN", "Ku"], "A": ["F", "Next", "a", "L", "At", "V", "UA", "AS", "X", "Y", "MA", "AP", "JA", "Adam", "LA", "AR", "AST", "FA", "Parts", "AN", "Ha", "ANS", "AM", "SA", "P", "B", "T", "C", "As", "AU", "Ar", "API", "array", "AA", "Args", "Alpha", "S", "OA", "W", "I", "Ab", "PA", "Ma", "Average", "Array", "CA", "Java", "U", "AF", "M", "Wa", "KA", "G", "An", "App"], "_": [" id", "ix", " seq", " __", "x", " un", "Id", "I", "u", "j", "ac", " j", " key", "J", "id", "ip"], "i": ["gi", "k", "ui", "a", "ie", "int", "__", "qi", "p", "init", "ai", "c", " I", " id", "y", " iP", "ix", " ip", " ind", " e", " c", "axis", " __", "ini", "iu", "ti", "si", "eni", "index", "x", "yi", " ir", "ind", "start", " il", "I", " ic", "uri", "l", "u", "pi", "ki", "j", " o", "io", " j", "xi", "ori", " sub", "di", "ci", "ij", "b", "e", "info", "multi", "id", "li", " u", " index", "ii", "n", "bi", "ip"], "ans": ["a", "lan", "cas", "span", "AS", "atan", "na", "ai", "Ann", "aning", "AN", "CNN", "ANS", "ks", "ann", "anon", "anc", "ani", "annot", "ana", "errors", "can", "nan", "An", "anned", "anus", "aned", "aus", "ants", "ns", "scan", "features", "CAN", "ANN", "plan", "NA", "an"]}}
{"code": "import math\\nn = int(input())\\nx = list(map(int, input().split()))\\ny = list(map(int, input().split()))\\ntmp = [[0 for i in range(6)] for j in range(n+1)]\\nabsDiff = abs(x[0]-y[0])\\ntmp[0][3] = tmp[0][0] = absDiff\\ntmp[0][4] = tmp[0][1] = absDiff ** 2\\ntmp[0][5] = tmp[0][2] = absDiff ** 3\\nmax = absDiff\\nfor i in range(1, n, 1):\\n    absDiff = abs(x[i]-y[i])\\n    tmp[i][0] = absDiff\\n    tmp[i][1] = absDiff ** 2\\n    tmp[i][2] = absDiff ** 3\\n    tmp[i][3] = tmp[i-1][3] + tmp[i][0]\\n    tmp[i][4] = tmp[i-1][4] + tmp[i][1]\\n    tmp[i][5] = tmp[i-1][5] + tmp[i][2]\\n    if absDiff > max:\\n        max = absDiff\\nprint(tmp[n-1][3])\\nprint(math.sqrt(tmp[n-1][4]))\\nprint(tmp[n-1][5] ** (1/3))\\nprint(max)", "target": "325", "substitutes": {"n": [" N", "s", "k", "name", "span", "non", "p", "na", "g", "c", "number", "nc", "num", "o", "h", "net", "en", "un", "ne", "ng", "z", "fn", "nan", "w", "zn", "l", "u", "d", "nt", "nn", "ln", "f", "m", "network", "none", "ns", "nw", "no", "len", "b", "v", "np", "t", "N", "count", "e", "nb", "an", "nor"], "x": ["dx", "s", "k", "a", "int", "X", "p", "xs", "c", "g", "width", "xx", "h", "o", "ix", "pos", "size", "z", "time", "index", "ex", "w", "l", "u", "d", "one", "f", "ax", "m", "data", "v", "b", "t", "e", "xy", "id"], "y": ["yd", "ys", "dy", "ye", "p", "Y", "c", "yx", "ym", "ay", "year", "z", "zy", "ty", "cy", "iny", "w", "ny", "l", "yt", "d", "q", "sy", "ky", "m", "yy", "ya", "b", "v", "yl", "t", "xy", "py", "vy", "ry", "ey", "sky"], "tmp": ["ott", "amp", "int", "fb", "bp", "mph", "cp", "this", "cro", "current", "bb", "doc", "ff", "etc", "pad", "data", "b", "zip", "np", "fake", "pot", "cmp", "code", "img", "dat", "pos", "td", "mb", "api", "tf", "done", "temp", "proc", "mp", "array", "dest", "buff", "cm", "page", "pp", "ppa", "v", "tab", "project", "source", "tc", "wp", "tm", "tt", "p", "storage", "tp", "result", "md", "crop", "html", "attr", "sp", "nom", "ppo", "params", "cache", "now", "stack", "cb", "meta", "mom", "sup", "comb", "mmm", "pkg", "map", "stuff", "alpha", "t", "cpp", "py", "treatment", "config", "front", "table", "top", "pb", "fp", "post", "pm", "app", "kk", "txt", "emp", "diff", "st", "bt", "obj", "wx", "nt", "copy", "Temp", "output", "vt", "nb", "test"], "i": ["gi", "ih", "s", "k", "ui", "a", "ei", "int", "ie", "qi", "mi", "p", "ai", "ic", "c", "oi", "o", "ix", "im", "ini", "iu", "api", "ti", "z", "mini", "si", "index", "yi", "I", "uri", "l", "u", "pi", "d", "it", "ki", "f", "io", "cli", "iv", "xi", "ori", "di", "ri", "ni", "ip", "ij", "ci", "v", "b", "e", "t", "il", "info", "multi", "id", "li", "ii", "bi"], "j": ["gi", "ji", "k", "ie", "c", " I", "ix", " ip", "iu", "z", " pi", "ind", " Xi", "I", " il", "d", " J", " epoch", "xi", "ci", "ij", "J", "b", "id", "li", "ii", " jo"], "absDiff": ["relDifferent", "isDistance", " Absdiff", " absDef", "absDef", "assDifferent", "abDef", "abDistance", "AbsChange", "AbsDiff", " absDifferent", "fracDifferent", " abs3", "AbsDistance", " absDelta", "relChange", "altChanged", "Absdiff", " absChanged", "fracdiff", "abs3", " absdiff", "absDifferent", "isDiff", "lsDistance", "reldiff", "AbsDelta", "abChanged", "fracDiff", "msDiff", "fracDelta", "lsDelta", "absDelta", "isDifferent", "absChanged", "msdiff", "assDiff", "altDelta", "ass3", "msDistance", "assChange", "absChange", "transDistance", "absdiff", "transDiff", "lsDiff", "altDiff", "AbsDef", " AbsDistance", " absDistance", "assdiff", "transDelta", "absConf", "abdiff", "Abs3", "abConf", "altdiff", "abDifferent", "abDiff", "AbsConf", "relDiff", "msDifferent", "isdiff", "AbsDifferent", " AbsDelta", " absConf", " AbsDiff", "abDelta", "absDistance", "lsdiff", "transdiff"], "max": ["min", "cur", "k", "end", "last", "auto", "value", "Max", "top", "default", "p", "nd", "init", "std", "c", "est", "h", "prev", "first", "temp", "size", "div", "final", "rand", "scale", "wrap", "diff", "res", "now", "only", "w", "bug", "q", "MAX", "right", "ax", "none", "self", "pad", "shape", " Max", "med", "alpha", "key", "dev", "limit", "mod", "all", "count", "step", "id", "range", "next", "sum", "best", "total"]}}
{"code": "import sys\\na,b=list(map(int,input().split()))\\nif b==1:\\n  print(0)\\n  sys.exit()\\nfor i in range(100):\\n  if a+(a-1)*i >=b:\\n    print(i+1)\\n    sys.exit()", "target": "335", "substitutes": {"a": ["aa", "s", "sta", "va", "ma", "p", "ai", "aw", "ama", "c", "fa", "y", "la", "ba", "ab", "z", "au", "da", "x", "pa", "index", "A", "af", "w", "l", "u", "d", "pi", "aaa", "f", "sa", " A", "ac", "asa", "ga", "ca", "m", "area", "am", "ae", "alpha", "e", "an", "ad", "n"], "b": ["aa", "be", "k", "ib", "fb", "p", "bs", "c", "y", "number", "r", "num", "wb", "beta", "B", "ba", "ab", "x", "A", "next", "sb", "l", "bb", "d", "rb", "u", "abb", "f", "bd", "binary", "v", "limit", "base", "e", "nb", "lb", "n"], "i": ["gi", "k", "ui", "int", "p", "phi", "ai", "c", "oi", "y", "h", "ini", "ix", "iu", "z", "mini", "si", "eni", "index", "x", "ind", "start", "I", "l", "u", "d", "pi", "f", "j", "xi", "ori", "ri", "di", "ni", "ip", "ci", "v", "e", "id", "li", "ii", "ad", "n"]}}
{"code": "a,b=list(map(int,input().split()))\\nif (a+b)>=24:\\n    print((a+b)-24)\\nelse:\\n    print(a+b)\\n\\n", "target": "253", "substitutes": {"a": ["aa", "auto", "sta", "int", "va", "p", "qa", "aw", "c", "i", "ama", "y", "work", "api", "la", "ba", "ab", "au", "da", "x", "A", "ia", "d", "sup", "ca", "sa", "f", "asa", "ac", "ga", "front", "area", "aj", "am", "ae", "oa", "alpha", "ea", "e", "id", "abc", "home", "za", "an", "ad", "n"], "b": ["bad", "aa", "be", "ib", "fb", "p", "bs", "pb", "c", "reb", "i", "y", "emb", "wb", "mb", "bis", "zb", "B", "ba", "ab", "z", "x", "url", "body", "sb", "cb", "l", "ob", "bb", "d", "rb", "bf", "abb", "f", "eb", "v", "bar", "base", "e", "bc", "bas", "big", "abc", "nb", "lb", "bi", "n"]}}
{"code": "import math\\na,b,C = (float(i) for i in input().split())\\nrad =math.radians(C)\\nS = a*b*0.5*math.sin(rad)\\nL = a+b+math.sqrt(a**2+b**2-2*a*b*math.cos(rad))\\nH = b*math.sin(rad)\\nprint(S)\\nprint(L)\\nprint(H)", "target": "221", "substitutes": {"a": ["aa", "s", "auto", "sta", "at", "va", "ma", "p", "na", "ai", "aw", "c", "y", "api", "la", "ba", "mA", "ab", "au", "AA", "da", "x", "A", "af", "w", "ia", "u", "d", "aaa", "ca", "f", "sa", " A", "ac", "asa", "m", "area", "am", "aj", "ae", "oa", "alpha", "e", "ada", "an", "ad", "n"], "b": ["s", "be", "ib", "fb", "p", "bs", "g", "c", " B", "h", "y", "r", "wb", "B", "ba", "ab", "x", "A", "sb", "cb", "l", "bb", "d", "rb", "bf", "u", "f", "bd", "j", "db", "gb", "v", "base", "e", "bc", "nb", "lb", "bi", "n"], "C": ["F", "CT", "E", "Cs", "Cr", "V", "CI", "Cu", "FC", "CU", "Y", "c", "DC", " c", "O", "P", "B", "T", "D", "AC", "A", "W", "CM", "CF", "I", "CD", "d", "CO", "VC", "CL", "U", "R", "ci", "M", "CC", "N", "G", "CR"], "i": ["gi", "s", "k", "ui", "ei", "int", "qi", "mi", "phi", "c", " I", "r", "ini", "ix", "iu", "mini", "z", "si", "index", "x", "ar", "ind", "I", "uri", "idi", "u", "pi", "d", "j", "io", "f", "xi", "ri", "di", "ci", "v", "id", "li", "ii", "n", "abi", "ip"], "rad": ["rh", "AD", "amp", "dd", "mad", "Rad", "dom", "dir", "std", "c", "bound", "DC", "var", "arc", "r", "radius", "md", "D", "div", "CD", "bb", "d", "band", "star", "cmd", "angle", "vol", "ac", "style", "dc", "cd", "pad", "di", "R", "alpha", "bin", "CC", "dev", "mod", "dec", "deg", "mm", "Ang", "part", "ang", "direction", "ad", "n"], "S": ["F", "s", "IS", "V", "SC", "X", "AS", "Y", "NS", "JS", "Si", "K", "TS", "SH", "ST", "SAM", "Su", "P", "B", "T", "SK", "D", "Sa", "A", "SL", "RS", "Sl", "I", "SS", "CS", "U", "R", "GS", "N", "SN", "SD", "G", "SO"], "L": ["F", "HL", "IL", "V", "TL", "NL", "FL", "LS", "LT", "LA", "dL", "LP", "Len", "B", "LM", "D", "LD", "PL", "SL", "Sl", "l", "EL", "LR", "LE", "Line", "OL", "BL", "Fl", "RL", "El", "CL", "Lo", "R", "XL", "LI", "N", "DL", "LG", "LL", "VL", "Long"], "H": ["F", "HL", "E", "V", "HS", "Q", "X", "DH", "Y", "K", "h", "HF", "SH", "TH", "HC", "P", "T", "B", "D", "WH", "HE", "W", "SL", "EH", "GH", "HK", "HH", "HM", "HI", "U", "R", "M", "J", "HT", "N", "G", "RH"]}}
{"code": "from fractions import gcd\\n\\nn, k = map(int, input().split())\\na = sorted(list(map(int, input().split())))\\nif max(a) < k:\\n    print(\"IMPOSSIBLE\")\\n    exit()\\nx = a[0]\\nfor i in range(1,n):\\n    x = gcd(x, a[i])\\n\\nprint(\"IMPOSSIBLE\" if k % x else \"POSSIBLE\")\\n", "target": "603", "substitutes": {"n": ["p", "na", "g", "c", "ate", "o", "number", "r", "num", "ot", "y", "nc", "z", "on", "fn", "w", "it", "l", "u", "d", "nn", "q", "nt", "out", "f", "j", "m", "ns", "b", "v", "t", "N", "nb", "an"], "k": ["km", "ke", "p", "g", "c", "dk", "K", "o", "y", "num", "ks", "size", "kn", "z", "mk", "kw", "w", "ko", "ak", "it", "ok", "u", "d", "max", "q", "ki", "f", "sk", "j", "m", "ky", "kick", "v", "b", "e", "ik"], "a": ["aa", "s", "tta", "wa", "sta", "va", "ma", "p", "na", "c", "aw", "fa", "o", "y", "la", "ba", "mA", "ab", "au", "array", "da", "A", "args", "ata", "ca", "f", "sa", "ac", "ga", "area", "aux", "input", "am", "ae", "alpha", "b", "ea", "e", "an", "ad"], "x": ["dx", "int", "X", "p", "na", "xf", "g", "c", "xs", "xx", "fx", "y", "h", "r", "ix", "rx", "z", "array", "xt", "ex", "index", "xxx", "unc", "cross", "l", "u", "d", "max", "f", "j", "ax", "m", "xi", "input", "data", "check", "alpha", "v", "b", "xp", "t", "e", "xes", "xy", "xc", "val", "abc"], "i": ["gi", "ih", "ji", "ui", "end", "qi", "p", "ai", "c", "h", "y", "ix", "num", "iu", "ti", "z", "on", "si", "index", "yi", "ind", "start", "I", "u", "d", "pi", "q", "j", "io", "m", "pp", "xi", "di", "ci", "b", "v", "col", "id", "bit", "ii", "bi", "ip"]}}
{"code": "x = int(input())\\ndef f(a,b):\\n    return a**5-b**5\\n\\nfor a in range(-120,120):\\n    for b in range(-120,120):\\n        if f(a,b)==x:\\n            print(a,b)\\n            exit()", "target": "597", "substitutes": {"x": ["int", "code", "X", "p", "event", "xxxxxxxx", "ic", "xs", "g", "c", "i", "xx", "y", "h", "rx", "r", "z", "ex", "xxx", "index", "valid", "w", "l", "wx", "u", "d", "f", "m", "xi", "exc", "check", "xe", "v", "xp", "e", "t", "xy", "xc", "n"], "a": ["aa", "s", "auto", "int", "va", "ma", "p", "ai", "g", "c", "aw", "ama", "i", "y", "la", "ba", "ab", "au", "da", "A", "af", "w", "l", "u", "d", "aaa", "f", "ca", "sa", " A", "ac", "ga", "ax", "area", "am", "ae", "alpha", "ea", "e", "an", "ad", "n"], "b": ["s", "be", "aa", "ib", "part", "fb", "p", "bs", "bp", "pb", "c", "i", "y", "r", "h", "app", "wb", "bis", "mb", "B", "ba", "ab", "w", "sb", "cb", "l", "bf", "d", "rb", "bb", "abb", "f", "eb", "bd", "ac", "ga", "db", "v", "bar", "base", "e", "bc", "abe", "bas", "nb", "lb", "bi", "ad", "n"]}}
{"code": "n=input()\\nprint(input().count(\"ABC\"))", "target": "369", "substitutes": {"n": ["name", "s", "p", "na", "init", "c", "i", "o", "number", "nc", "y", "num", "r", "sign", "z", "fn", "x", "node", "l", "nn", "f", "j", "ln", "m", "ns", "nr", "N", "nb"]}}
{"code": "from sys import stdin, stdout\\nn, m = map(int, stdin.readline().strip().split())\\n\\nif m>=n:\\n    print('unsafe')\\nelse:\\n    print('safe')", "target": "585", "substitutes": {"n": [" N", "min", " p", "k", "mn", "p", "na", "ms", " number", "nm", "c", " r", "i", "g", "o", "r", "nc", "num", " c", " name", " ignore", " nm", "z", " header", "x", "nan", " fn", "sn", "w", "l", "u", "d", "nn", "ln", "f", "ns", "nl", " ns", "b", "e", "N", " body", " l", "nb"], "m": ["mn", "int", "rm", "mi", "p", "ms", "c", "nm", "i", "o", "r", "number", "num", "pm", "ym", "md", "fm", "x", "dm", "om", "cm", "l", "nb", "d", "mo", "f", "j", "bm", "mx", "M", "v", "b", "e", "N", "mm", "mc", "param"]}}
{"code": "input()\\nA=list(map(int,input().split()))\\nB=list(map(int,input().split()))\\nC=list(map(int,input().split()))\\n\\nm=0\\ny=-1\\nfor x in A:\\n    m+=B[x-1]\\n    if x==y+1:\\n        m+=C[y-1]\\n    y=x\\nprint(m)", "target": "731", "substitutes": {"A": ["F", "GA", "Ca", "a", "L", "Az", "X", "MA", "Y", "IA", "LA", "Ay", "This", "BA", "AM", "SA", "P", "AB", "As", "D", "Ar", "mA", "AA", "Alpha", "S", "Ab", "Ma", "CA", "U", "M", " a", "N", "G", "Am", "HA", "NA"], "B": ["F", "E", "L", "LB", "BT", "X", "UB", "PB", "BA", "AB", "O", "P", "T", "D", "SB", "BB", "BC", "BI", "TB", "BF", "W", "BD", "I", "MB", "Ab", "BE", "BL", "WB", "R", "M", "b", "NB", "N", "QB", "G", "BS", "Bs"], "C": ["F", "E", "L", "Cs", "V", "H", "Q", "CU", "X", "Y", "NC", "c", "DC", "K", "CNN", "O", "P", "T", "D", "AC", "Cloud", "S", "Can", "W", "Z", "Con", "CL", "U", "R", "M", "N", "G"], "m": ["s", "a", "mr", "int", "p", "Y", "g", "c", "mon", "i", "r", "h", "o", "im", "ym", "mean", "z", "dm", "mu", "w", "om", "cm", "l", "u", "d", "q", "f", "j", "sm", "bm", "am", "M", "b", "v", "dim", "t", "e", "hm", "gm", "n"], "y": ["yr", "a", "ady", "dy", "ye", "hy", "gy", "X", "p", "Y", "c", "i", "yu", "h", "o", "ix", "ym", "ay", "z", "zy", "fy", "yi", "wy", "cy", "yo", "w", "ny", "l", "yt", "d", "j", "sy", "ky", "yy", "ya", "oy", "iy", "M", "v", "b", "yl", "t", "e", "py", "id", "vy", "ry", "ey", "n"], "x": ["dx", "min", "s", "a", "int", "X", "xf", "p", "Y", "xs", "c", "i", "xx", "h", "rx", "px", "ix", "pos", "axis", "ym", "num", "any", "z", "xt", "ex", "index", "xxx", "image", "w", "cm", "l", "wx", "u", "d", "xd", "max", "f", "j", "ax", "xi", "xb", "ya", "xe", "xp", "v", "b", "t", "e", "xy", "xc", "xa", "n"]}}
{"code": "a=int(input())\\nb=list(map(int,input().split()))\\nb_max=b[0]\\ntotal=0\\nfor i in range(1,a):\\n    if b[i]<=b_max:\\n        total+=1\\n        b_max=b[i]\\nprint(total+1)", "target": "743", "substitutes": {"a": ["aa", "s", "wa", "auto", "va", "span", "active", "p", "qa", "c", "ama", "aw", "fa", "y", "la", "ba", "ab", "div", "au", "pa", "da", "A", "l", "sup", "ca", "sa", "aaa", "asa", "ga", "f", "area", "alpha", "ea", "e", "all", "an", "ad", "n"], "b": ["s", "k", "ib", "boot", "fb", "p", "bs", "bp", "g", "c", "y", "r", "h", "o", "B", "ba", "ab", "array", "x", "w", "sb", "obj", "l", "ob", "bb", "d", "rb", "bf", "u", "f", "eb", "db", "binary", "bin", "gb", "v", "base", "e", "nb", "lb", "bi", "n"], "b_max": ["b_default", "sb_min", "b1count", "sb_end", "b1max", " b_count", "b_end", "bb_Max", " b_ax", "bb_min", "b_Max", "b1ax", "b_min", "sb_Max", "bb_max", "b_ax", "bb_default", "sb_max", "b1Max", "b_count", " b_Max"], "total": ["error", "full", "auto", "token", "stable", "c", "number", "always", "result", "gross", "pretty", "local", "basic", "final", "scale", "valid", "partial", "now", "next", "shared", "current", "meta", "ok", "max", "nt", "fat", "json", "null", "parent", "no", "Total", "length", "alpha", "complete", "di", "base", "t", "count", "all", "multi", "percent", "part", "sum", "info"], "i": ["gi", "ji", "k", "ui", "int", "qi", "p", "ai", "c", "oi", "y", "h", "ini", "ix", "iu", "slice", "lc", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "it", "l", "fi", "u", "d", "pi", "j", "f", "io", "xi", "di", "ri", "ni", "ci", "v", "e", "info", "multi", "id", "li", "ii", "bi", "n"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nn, *a = map(int, read().split())\\nfor af in a[1:]:\\n    a[0] ^= af\\nprint('Yes' if a[0] == 0 else 'No')\\n", "target": "216", "substitutes": {"read": ["raw", "end", "open", "reader", " write", "method", "stream", "create", "stat", "load", "lex", "h", "en", "use", "Read", "insert", "re", "iter", "connect", "write", "ro", "array", "run", "READ", "x", "each", "w", "only", " stream", "current", "exec", "get", "php", "ok", "buffer", "catch", "readable", "wait", "eval", "sync", " reads", "scan", "input", "set", "data", "reads", "check", "find", "select", "bind", "play", "reading", "add", " Read", " reader", "parse", "loop", "feed"], "readline": ["runlines", "inputblock", "READline", "writeblock", "inputline", "Readline", "writelines", "readonly", "READLINE", "Readlines", "readblock", "writeline", "readLINE", "inputonly", "inputlines", "READlines", "runonly", "ReadLINE", "writeonly", "runblock", "writeLINE", "runline"], "readlines": ["printpoints", "newlines", "writewords", "newl", "Readline", " readbytes", "readl", "Readbytes", "newbytes", "parseline", "writelines", "newline", "printlines", "Readlines", " readl", "parsepoints", "writeline", "parsewords", "printline", "readbytes", "readwords", "writepoints", "printwords", "readpoints", "parselines", "Readl"], "n": ["aa", "k", "p", "na", "ai", "g", "c", "i", "o", "r", "nc", "y", "z", "fn", "w", "l", "u", "nt", "j", "m", "ac", "ns", "b", "v", "t", "N", "nb", "an"], "a": ["s", "aa", "wa", "int", "va", "ma", "p", "na", "ai", "aw", "c", "i", "fa", "eta", "y", "h", "en", "la", "ba", "au", "array", "z", "ana", "da", "A", "w", "action", "ata", "l", "u", "aaa", "f", "ca", "sa", "ac", "m", "ga", "area", "am", "data", "ae", "alpha", "b", "ea", "ha", "e", "count", "ada", "an", "ast"], "af": ["aff", "amp", "at", "al", "na", "ft", "ai", "ash", "aw", "Af", "fa", "mult", " ac", "p", "ap", " al", "ab", " f", "au", "art", "A", "av", "atal", "f", "ax", "lf", "ac", "cat", "ait", "AF", "ae", "alpha", "fast", "all", "sub", "ad", "abc", "an", " all", "ref", "ef"]}}
{"code": "# https://atcoder.jp/contests/abc100/tasks/abc100_b\\n\\nd, n = map(int, input().split())\\nif d == 0:\\n    if n == 100:\\n        ans = 101\\n    else:\\n        ans = n\\nelse:\\n    if n == 100:\\n        ans = 100 ** d * 101\\n    else:\\n        ans = 100 ** d * n\\nprint(ans)", "target": "781", "substitutes": {}}
{"code": "import sys\\nimport math\\n\\n\\ninint = lambda: int(sys.stdin.readline())\\ninintm = lambda: map(int, sys.stdin.readline().split())\\ninintl = lambda: list(inintm())\\ninstrm = lambda: map(str, sys.stdin.readline().split())\\ninstrl = lambda: list(instrm())\\n\\nn = inint()\\n\\nz = {}\\nans = 0\\n\\nfor i in range(n):\\n    s = \"\".join(sorted(input()))\\n    try:\\n        z[s] += 1\\n    except:\\n        z[s] = 1\\n\\nfor i in z:\\n    ans += z[i]*(z[i]-1)//2\\n\\nprint(ans)", "target": "84", "substitutes": {"inint": ["outint", " INint", "outnt", "outlist", "INint", "INlist", "inInt", " incinter", "inind", " innt", "INInt", " inind", " incint", " inlist", " INind", " ininter", " incind", "INnt", "ininter", "innt", "inlist", " INinter", " inInt", " INInt", "outInt", " incInt"], "inintm": ["insintd", "instrf", "instrv", "inintv", "insstrf", "insintms", "insstrv", "instrd", "inindl", "inintsm", "inindd", "inintd", "insstrm", "inindv", "inntl", "invertl", "insstrms", "instrms", "insstrl", "invertms", "inntm", "insintf", "inntv", "inintms", "insintv", "inntd", "inindm", "insintm", "invertm", "invertf", "insstrd", "inintsl", "inintf", "inintsms", "inintsf", "insintl"], "inintl": ["inninterl", "innintv", "inninterd", "inintv", "inmintl", "ininterl", "innintln", "inintd", "inintln", "inmintd", "ininterln", "ininitd", "ininterv", "ininitv", "ininitln", "inninterv", "innintl", "inmintv", "ininitl", "inninterln", "innintd", "inmintln", "ininterd"], "instrm": ["instringm", "inctrp", " instrrm", " instrbm", "instrma", "inintp", "innerms", "instrp", "instringma", "inctrm", "instrbm", "innerm", "inintbm", "inStrm", "inintr", " instrp", " innerm", "inctrr", "innerma", " inStrp", "inctrbm", "inintms", " inStrr", " instrma", "innerrm", " innerms", "inStrbm", "instringrm", " innerrm", "inStrr", " instrms", "inStrp", "inintma", " inStrm", " inStrbm", "instrr", "inintrm", " innerma", "instringms", "instrrm", "instrms", " instrr"], "instrl": ["inctf", "instrf", "insintn", "insstrf", "inintn", "inctm", "instructm", "insstrm", "insstrl", "instructl", "instructn", "insintf", "inctl", "insstrn", "instructf", "instrn", "insintm", "inintf", "inctn", "insintl"], "n": ["k", "a", "ner", "p", "c", "y", "o", "nc", "num", "r", "number", "ne", "x", "sn", "w", "ny", "l", "u", "j", "f", "m", "ns", "no", "os", "ni", "b", "np", "t", "N", "e", "all", "count", "an"], "z": ["iz", "a", "ze", "zer", "int", "code", "str", "p", "c", "zone", "zes", "y", "o", "sd", "cz", "slice", "zo", "az", "zh", "x", "st", "w", "start", "so", "zn", "l", "u", "d", "nz", "q", "ens", "Z", "f", "j", "m", "ns", "zen", "os", "v", "zip", "t", "e", "ez", "zi", "gz", "tz", "za", "an"], "ans": ["a", "int", "nas", "span", "ins", "p", "na", "std", "ai", "xs", "ions", "anas", "AN", "ANS", "ks", "aces", "ann", "anon", "anc", "ones", "ays", "ana", "ania", "x", "es", "sn", "ars", "args", "aned", "ines", "anz", "ids", "aus", "ons", "nz", "ens", "ln", "cs", "leans", "sk", "ants", "acs", "ns", "eds", "ases", "os", "ds", "ops", "an"], "i": ["gi", "ji", "k", "a", "ie", "int", "ei", "p", "ai", "c", "o", "y", "h", "iu", "ti", "si", "index", "x", "yi", "ind", "I", "it", "l", "u", "pi", "d", "j", "io", "f", "m", " j", "xi", "di", "ci", "b", "v", "e", "t", "zi", "id", "li", "ii", "bi", "ip"], "s": ["ss", "sq", "a", "strings", "south", "ie", "span", "p", "g", "c", "sym", "o", "r", "sie", "say", "second", "si", "es", "x", "S", "sn", "sb", "l", "ses", "u", "sg", "js", "f", "sup", "sa", "sync", "ns", "ws", "seconds", "us", "su", "os", "abs", "b", "sing", "string", "t", "ls", "e", "asi", "ds", "an"]}}
{"code": "n, k = map(int,input().split())\\ni = 1\\nx = k\\nwhile True:\\n  if (x > n):\\n    print(i)\\n    break\\n  else:\\n    i = i + 1\\n    x = x*k\\n", "target": "719", "substitutes": {"n": ["ner", "p", "na", "nd", "g", "c", "y", "o", "nc", "num", "r", "size", "ne", "nu", "z", "fn", "nan", "sn", "w", "zn", "l", "cn", "d", "u", "nn", "ln", "network", "m", "ns", "ni", "v", "np", "e", "N", "nb", "an", "nor"], "k": ["km", "p", "g", "c", "dk", "K", "y", "o", "r", "num", "kk", "h", "ks", "size", "z", "mk", "w", "ko", "l", "ok", "u", "d", "max", "q", "f", "sk", "j", "m", "ku", "kick", "v", "b", "ck", "e", "kr", "ik"], "i": ["gi", "int", "qi", "p", "phi", "c", "y", "o", "ix", "ini", "iu", "z", "si", "index", "yi", "start", "I", "it", "l", "u", "pi", "j", "f", "io", "m", "xi", "input", "di", "ci", "v", "key", "b", "e", "t", "id", "step", "li", "ii"], "x": ["dx", "int", "python", "X", "p", "tx", "xs", "c", "xx", "width", "y", "number", "rx", "px", "ix", "h", "num", "z", "ex", "index", "xxx", "w", "cross", "l", "wx", "u", "pi", "d", "max", "q", "one", "j", "f", "ax", "m", "xi", "check", "ct", "v", "b", "e", "t", "xy", "id", "step", "xc"]}}
{"code": "s = input()\\nans = s\\nif len(s) == 3:\\n    ans = ''\\n    for i in range(3):\\n        ans += s[2-i]\\nprint(ans)", "target": "528", "substitutes": {"s": ["sq", "strings", "a", "south", "spec", "str", "span", "ins", "words", "states", "p", "g", "xs", "c", "ions", "sed", "sets", "sym", "o", "h", "y", "speech", "sign", "conf", "es", "params", "S", "sb", "args", "parts", "services", "ses", "l", "lines", "d", "sg", "f", "sa", "cs", "m", "ns", "input", "os", "b", "string", "space", "e", "ls", "t", "source", "an", "sum", "n"], "ans": ["a", "ents", "lan", "span", "ras", "amps", "atan", "na", "xs", "ats", "anas", "AN", "ANS", "anes", "ks", "asts", "ann", "anon", "anc", "ays", "ana", "x", "params", " means", "S", "can", "ars", "anned", "cross", "args", "aned", "chan", "ons", "aus", "leans", "cs", "ens", "ants", "ns", "scan", "os", "reads", "an", "plan", "ds", " Ans", "ast", "ins"], "i": ["gi", "ih", "k", "a", "ei", "int", "p", "phi", "ai", "c", "y", "r", "ix", "ini", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", "m", "xi", "di", "ri", "v", "b", "e", "id", "li", "ii", "n", "bi", "ip"]}}
{"code": "S = input()\\n\\nif S == ('ABC'):\\n    print('ARC')\\nelif S == ('ARC'):\\n    print('ABC')\\nelse:\\n    print('\u5165\u529b\u306b\u8aa4\u308a\u304c\u3042\u308a\u307e\u3059\u3002ABC\u307e\u305f\u306fARC\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002')\\n", "target": "510", "substitutes": {"S": ["F", "s", "L", "IS", "V", "H", "SC", "AS", "Q", " s", "SE", "SF", "Sample", "NS", "ASS", "INS", "SEC", "TS", "SH", "Source", "SI", "O", "OSS", "P", "T", "C", "B", "D", "SA", "A", "I", "ESS", "SS", "OS", "CS", "U", "R", "M", "MS", "String", "Sign", "N", "SN", "G", "SU"]}}
{"code": "h,w=map(int,input().split())\\nG=[input() for _ in range(h)]\\n\\nfrom collections import deque\\nmove=[(0,1),(0,-1),(1,0),(-1,0)]\\n\\nque=deque([])\\n\\nfor i in range(h):\\n    for j in range(w):\\n        if G[i][j]=='#':\\n            que.append((i,j,0))\\n\\nc=0\\nvisit=[[0]*w for _ in range(h)]\\nwhile len(que)>0:\\n    ni,nj,c=que.popleft()\\n    for di,dj in move:\\n        mi,mj=ni+di,nj+dj\\n        if 0<=mi<h and 0<=mj<w and G[mi][mj]=='.' and visit[mi][mj]==0:\\n            visit[mi][mj]=1\\n            que.append((mi,mj,c+1))\\nprint(c)\\n", "target": "657", "substitutes": {"h": ["rh", "ih", "hs", "k", "loc", "s", "sh", "wa", "hz", "H", "p", "phi", "g", "oh", "y", "o", "ht", "r", "wh", "ph", "z", "ch", "x", "ah", "hh", "l", "u", "d", "pi", "q", "f", "m", "hd", "hi", "b", "v", "e", "t", "hm", "cl", "n"], "w": ["s", "k", "wa", "wt", "wp", "win", "p", "g", "width", "rw", "y", "r", "fw", "we", "wh", "wb", "weight", "z", "x", "W", "kw", "l", "wx", "u", "d", "max", "q", "f", "m", "nw", "sw", "ww", "ws", "wl", "wd", "v", "b", "t", "e", "word", "n"], "G": ["F", "GM", "GA", "E", "RG", "group", "L", "GE", "IG", "V", "H", "X", "g", "Ge", "P", "B", "C", "GD", "D", "T", "grid", "GI", "FG", "GU", "S", "GC", "GP", "W", "I", "GR", "GH", "GF", "CG", "U", "R", "graph", "GB", "M", "GS", "gs", "J", "GN", "MG", "N", "LG", "GV", "Gu", "Group"], "_": ["s", "__", "non", "p", "r", "of", "un", "x", "l", "len", "t", "flow", "all", "val", "block"], "move": ["new", "mode", "group", " shift", " position", "change", "random", " group", " movement", "roll", "ge", " motion", " merge", "Move", "case", " stretch", "slice", "push", " sequence", "run", "edge", "index", " manage", "route", " moves", "gram", " slide", "position", " jump", " mov", "addr", "frame", "live", " change", "M", " history", "path", " Move", " guard", "order", "motion", "play", "grade", " command", " expand", "parse", "range", "next", "guard", "draw", "update"], "que": ["prom", "scene", "cur", "change", "code", "vel", "Queue", "queue", "qu", "Q", "gru", "p", "gui", "qa", "ge", "g", "event", "hide", "lock", "log", "slice", "la", "lc", "cle", "edge", "ques", "cache", "file", "gate", "stack", "bug", "con", "vre", "buffer", "quad", "q", "cli", "core", "ue", "query", "co", "list", "live", "quit", "hi", "complete", "fl", "me", "e", "pe", "ha", "sem", "le", "seq", "progress", "cl", "loop", "contin", "Que", "lo"], "i": ["ji", "ih", "k", "ui", "a", "ie", "wi", "int", "p", "ai", "g", "y", "ini", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "f", "m", "xi", "ip", "hi", "ci", "v", "b", "li", "ii", "n"], "j": ["ji", "k", "ie", "ja", " z", "p", "g", "y", "jj", "o", " k", "jl", "z", "si", "index", "x", "yi", "ind", "obj", "l", "u", "d", "uj", "f", "jp", "m", "xi", "J", "v", "b", " ii", "li", "ii", " l", "n"], "c": ["cur", "k", "loc", "cycle", "code", "p", "g", "y", "nc", "ec", "o", "C", "coll", "lc", "uc", "z", "ce", "x", "cy", "cu", "cb", "con", "l", "u", "d", "cn", "f", "ca", "cs", "m", "ac", "jc", "cin", "dc", "co", "ci", "ct", "v", "b", "cf", "e", "cr", "count", "cc", "col", "mc", "xc", "abc", "n"], "visit": ["returnitor", "visits", "returnIT", "Visitor", "VisIT", "Visit", "visite", "visited", "positor", "circits", "posits", "visitor", "circitor", " visIT", "visIT", " visited", "VISit", "posit", "circIT", "Visite", "VISite", "posite", "Visits", "posIT", "VISIT", "returnits", "Visited", "returnit", "circit", "VISited", " visite", "circite"], "ni": ["ji", "ui", "nie", "ei", "wi", "na", "ai", "nm", "NI", "nc", "ini", "ne", "nu", "mini", "si", "eni", "yi", "ny", "pi", "ati", "ki", "Ni", "ogi", "oni", "xi", "hi", "ci", "nis", "zi", "py", "li", "ii", "n", "bi", "ti"], "nj": ["snz", "snb", "nji", " nz", "Nz", "mb", "sni", "mz", " nb", "nz", "mji", " nji", "Nj", "Nb", "Nji", "nb", "snj"], "di": ["ji", "vi", "ui", "ei", "chi", "qi", "ai", "ini", "mini", "si", "eni", "da", "yi", "cu", "idi", "pi", "d", "Di", "ki", "adi", "oni", "xi", "cin", "dc", "ci", "zi", "li", "ii", "dn", "DI", "bi", "ti"], "dj": ["dx", "ji", "dy", "mn", "dom", "dat", "nc", "nu", "ani", "z", "dem", "da", "dm", "de", "d", "mis", "nn", "nz", "dt", "jp", "dq", "m", "du", "dr", "jc", "dc", "ci", "DJ", "cf", "fr", "mm", "py", "ds", "kj", "dn", "mie"], "mi": ["gi", "ji", "ui", "vi", "omi", "wi", "chi", "me", "mia", "qi", "MI", "ai", "phi", "nm", "umi", "ini", "pm", "mini", "si", "eni", "yi", "imi", "mu", "uri", "fi", "pi", "mis", "ki", "m", "xi", "ci", "Mi", "my", "mm", "zi", "li", "ii", "bi", "ti"], "mj": [" mq", "cmJ", "ymz", "cmj", "mah", "ymj", " maj", "Mah", "dje", "nji", "ymaj", " mji", "pmji", "ymji", "ymbr", " mJ", "naj", " muj", "maj", "mje", "vji", "pmJ", "mz", "muj", "ymJ", "dji", "nz", "Mj", "vj", "dq", "Muj", "mbr", "ymuj", "nah", " mah", "nJ", "pmj", "vje", "mji", "cmji", "nbr", "mq", "Maj", "nuj", " mje", " mz", "mJ", "nje", "ymje", " mbr", "vq"]}}
{"code": "import queue\\nn=int(input())\\ne=[[] for _ in range(n+1)]\\nfor _ in range(n-1):\\n  a,b=map(int,input().split())\\n  e[a]+=[b]\\n  e[b]+=[a]\\nq=queue.Queue()\\nq.put(1)\\nvif=[-1]*n\\nvif[0]=0\\nwhile not q.empty():\\n  now=q.get()\\n  for to in e[now]:\\n    if vif[to-1]==-1:\\n      q.put(to)\\n      vif[to-1]=vif[now-1]+1\\nq.put(n)\\nvis=[-1]*(n+1)\\nvis[n-1]=0\\nwhile not q.empty():\\n  now=q.get()\\n  for to in e[now]:\\n    if vis[to-1]==-1:\\n      q.put(to)\\n      vis[to-1]=vis[now-1]+1\\nans=0\\nfor i in range(n):\\n  if vif[i]<=vis[i]:ans+=1\\nprint(['Snuke','Fennec'][ans>n//2])", "target": "435", "substitutes": {"n": [" N", "s", "k", "new", "min", "p", "na", "g", "c", "o", "number", "nc", "en", "r", "num", "y", "h", "un", "net", "size", "nu", "ne", "z", "x", "nan", "sn", "w", "node", "l", "u", "d", "nt", "max", "cn", "out", "nn", "f", "j", "network", "m", "ns", "no", "v", "len", "N", "count", "t", "all", "pn", "nb", "an"], "e": ["s", "E", "ie", "line", "ner", "et", "ele", "p", "ke", "est", "g", "c", "element", "ate", "o", "r", "ec", "en", "y", "ception", "el", "fe", "ne", "z", "oe", "que", "es", "ce", "x", "ode", "l", "u", "d", "ee", "one", "f", "m", "te", "ae", "v", "ea", "pe", "ev", "er"], "_": ["k", "non", "p", "g", "o", " seq", " time", "x", " un", "out", "f", " non", " mem", " sub"], "a": ["aa", "s", "k", "va", "p", "ai", "c", "y", "o", "r", "ba", "ab", "da", "x", "A", "ar", "af", "w", "u", "d", "f", "sa", "ca", "ac", "j", "ae", "oa", "ea", "all", "an", "offset"], "b": ["s", "k", "aa", "auto", "p", "bs", "g", "c", "y", "r", "o", "h", "mb", "both", "B", "ba", "ab", "x", "w", "sb", "body", "l", "bf", "d", "rb", "u", "f", "j", "bd", "v", "nb"], "q": ["k", "ack", "sq", "sh", "qs", "queue", "qu", "qi", "Q", "pub", "p", "qa", "event", "g", "c", "load", "o", "y", "h", "lock", "work", "bird", "iq", "client", "force", "conf", "z", "que", "ch", "cache", "x", "w", "bug", "get", "l", "u", "d", "req", "f", "dq", "requ", "ue", "self", "query", "co", "list", "check", "question", "qt", "v", "view", "ck", "t", "flow", "id", "qq", "cl", "quick", "pg"], "vif": ["qiff", "V1", "videoify", "vof", "vef", "lIf", "vifi", " vib", "quif", "tvIf", "nviff", "svif", "qIf", "Viff", "quof", "jib", "videoaf", "kif", " vifi", "videoif", "jif", "videoifer", "qifi", "nvifi", "vinf", "Vifi", "svof", "qufeed", "Vdf", "vfor", "Vaf", "kaf", "tvdf", "nvaf", "tv1", "vIf", "qfor", "vib", "vdf", " vfeed", " vIf", "kify", "jifi", " vaf", " vify", "vifer", "qib", "svfeed", "kifer", " vinf", "vaf", "jef", "Vif", "vify", " vfor", "VIf", " vef", "quinf", "qif", "v1", "qef", " viff", " vof", "lif", " v1", "viff", "svinf", "vfeed", " vifer", " vdf", "liff", "lfor", "nvif", "tvif"], "now": ["new", "then", "wa", "last", "auto", "wp", "NOW", "default", "plus", "currently", "gh", "post", "low", "ready", "load", "always", "result", "since", "we", "wh", "this", "left", "first", "size", "force", "ng", "source", "x", "node", "w", "kw", "current", "obj", "ok", "before", "hand", "max", "once", "wait", "found", "ww", "self", "old", "small", "quick", "parent", "no", "day", "Now", "length", "today", "ow", "order", "id", "near", "skip", "after", "where", "next", "pg", "here", "when", "info"], "to": ["min", "name", "loc", "until", "non", "pre", "x", "current", "user", "l", "before", "f", "co", "list", "ct", "type", "li", "lo", "new", "change", "auto", "at", "To", "since", "left", "TO", "ne", "server", "same", "node", "do", "page", "site", "old", "v", "source", "next", "be", "vi", "soon", "p", "always", "by", "ver", "size", "can", "put", "so", "get", "t", "on", "too", "me", "top", "c", "o", "osp", "nt", "no", "after", "range"], "vis": ["gi", "wa", "spec", "cas", "win", "p", "qa", "visible", "nav", "na", "stat", "access", "host", "miss", "serv", "circ", "travel", "views", "comment", "pos", "switch", "vid", "rib", "ph", "iter", "sign", "sp", "conf", "VIS", "mini", "z", "cache", "x", "image", "Vis", "sim", "av", "cross", "bug", "virt", "tri", "wait", "vert", "see", "scan", "act", "shape", "spin", "path", "v", "view", "limit", "complex", "ha", "visual", "id", "keep", "skip", "trip", "sum", "block", "ref"], "ans": ["s", "ents", "lan", "nas", "span", "amps", "eps", "p", "na", "ps", "ms", "ai", "ats", "Ann", "anas", "AN", "ANS", "anes", "ks", "ann", "anc", "ani", "cus", "ana", "es", "annot", "can", " means", "nan", "An", "ars", "aned", "ons", "ens", "ants", " spans", "ns", "os", "san", "ls", "ips", "cons", "ians", "ds", "an", "ins"], "i": ["s", "k", "ui", "int", "qi", "p", "ai", "c", " I", "o", "y", "ini", " x", "iq", "iu", "api", "ti", "z", "si", "x", "ind", "I", "l", "u", "pi", "ki", "j", "f", "io", " j", "xi", "di", "ni", "ci", "v", "id", "li", "ii", "ip"]}}
{"code": "N=int(input())\\nans=\"\"\\ncheck=\"abcdefghijklmnopqrstuvwxyz\"\\n\\nwhile N!=0:\\n\tN-=1\\n\tans+=check[N%26]\\n\tN=N//26\\n\\nprint(ans[::-1])\\n\"\"\"\\nwhile N>0:\\n\tN-=1\\n\tans+=chr(ord(\"a\")+ N%26)\\n\tN//=26\\nprint(ans[::-1])\\n\"\"\"\\n\\n\\n", "target": "639", "substitutes": {"N": ["F", "MN", "E", "Number", "L", "NO", "V", "NN", "Q", "X", "Y", "Size", "Num", "NS", "NE", "K", "Na", "AN", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "A", "SIZE", "I", "NT", "OS", "NG", "Ni", "Z", "Ns", "R", "M", "J", "GN", " n", "G", "NA", "n"], "ans": ["s", "checks", "cks", "cas", "span", "atan", "na", "std", "NS", "Ann", "case", "AN", "CNN", "ANS", "ks", "sign", "ann", "anon", "anc", "errors", "ays", "can", " means", "A", "An", "S", "clean", "nan", "ars", "cross", " scans", "aned", "nn", "ons", "ign", "anne", "ens", "sk", "cs", "leans", "ln", "ants", "Ns", "ns", "scan", "san", "Cons", "cons", "Scan", "ANN", "an", "n", "ins"], "check": ["error", "call", "checks", "aff", "end", "op", "name", " Check", "fix", "feed", "Check", "correct", "NC", "work", "comment", "cp", "checked", "warn", "index", "x", "clean", "valid", "cross", "con", "ok", "ace", "max", "ign", "cat", "sync", "core", "scan", "ct", "match", "ck", "count", "add", "id", "CHECK", "cl", "test", "block"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\n\\nxor=0#\uff10\u306a\u3089OK -> \u5b9f\u969b\u8a08\u7b97\u3059\u308b\u3068\u304d\u308c\u3044\u306b0\u306b\u306a\u308b\\n\\nfor i in range(n):\\n    xor=xor^a[i]\\nif xor==0:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")\\n", "target": "216", "substitutes": {"n": ["s", "k", "p", "na", "g", "c", "i", "o", "r", "num", "ne", "z", "x", "l", "nn", "f", "j", "m", "ns", "ni", "nr", "v", "b", "e", "N", "nb", "an"], "a": ["aa", "span", "ma", "p", "ai", "c", "o", "ab", "z", "array", "x", "A", "w", "aaa", "ca", "f", "sa", "ac", "ga", "m", "area", "aj", "am", "alpha", "b", "an", "ad"], "xor": ["Xand", "Xors", " xnor", " xors", "axand", "axor", " xand", "axors", "axnor", "xnor", "xand", "Xor", "Xnor", "xors"]}}
{"code": "t, x = map(int, input().split())\\nans = '{:.6f}'.format(t/x)\\nprint(ans)", "target": "317", "substitutes": {"t": ["name", "int", "tick", "tt", "p", "c", "i", "y", "tp", "ot", "txt", "pt", "T", "tf", "temp", "z", "time", "start", "tax", "l", "d", "ta", "dt", "f", "trans", "m", "te", "ct", "ts", "v", "e", "task", "test", "tc", "total", "n"], "x": ["dx", "int", "X", "p", "tx", "xs", "c", "i", "xx", "fx", "y", "number", "ix", "px", "z", "xt", "ex", "xxx", "index", "time", "cross", "d", "max", "q", "f", "ax", "xi", "v", "b", "e", "xy", "step", "xc", "cl", "val", "n"], "ans": ["ents", "lan", "nas", "sex", "ras", "eps", "atan", "na", "ats", "aning", "anas", "AN", "ANS", "anes", "ks", "mean", "ann", "anc", "errors", "ana", "nan", " means", "ars", "cross", "anus", "aned", "ons", "aus", "ens", "leans", "cs", "trans", "ns", "scan", "ran", "san", "plan", "an", "comments"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nb = [0] * n\\nfor i in range(n):\\n    count = 0\\n    multi = 1\\n    if n - i == 0:\\n        count = sum(b)\\n    else:\\n        while (n - i) * multi <= n:\\n            count += b[(n - i) * multi - 1]\\n            multi += 1\\n    if count % 2 != a[n - i - 1]:\\n        b[n - i - 1] += 1\\nprint(sum(b))\\nif sum(b) == 0:\\n    exit()\\nfor i in range(n):\\n    if b[i] == 1:\\n        print(i + 1, end=' ')", "target": "568", "substitutes": {"n": ["min", "s", "k", "span", "non", "p", "g", "c", "o", "y", "nc", "r", "num", "en", "un", "number", "net", "size", "ne", "nu", "z", "x", "nan", "sn", "w", "conn", "l", "nin", "u", "d", "cn", "nn", "nt", "f", "j", "m", "none", "network", "ns", "no", "ni", "v", "len", "t", "N", "e", "nb", "an", "sum"], "a": ["aa", "s", "auto", "p", "na", "ai", "c", "y", "o", "ba", "ab", "array", "A", "l", "u", "f", "sa", "ac", "m", "ga", "area", "am", "alpha", "e", "all", "an", "ad"], "b": ["s", "be", "aa", "auto", "ib", "fb", "p", "bs", "bp", "g", "c", "pb", "y", "o", "number", "r", "h", "wb", "B", "split", "ba", "ab", "z", "array", "x", "body", "sb", "w", "l", "bh", "u", "d", "bb", "rb", "f", "bd", "eb", "m", "function", "xb", "db", "binary", "gb", "v", "base", "e", "bc", "nb"], "i": ["gi", "k", "ui", "end", "int", "qi", "mi", "p", "ai", "c", "oi", "y", "o", "h", "ini", "iq", "iu", "ti", "z", "mini", "si", "eni", "index", "x", "yi", "ind", "w", "start", "I", "l", "u", "pi", "d", "one", "f", "j", "m", "xi", "di", "ski", "ni", "ci", "ip", "length", "v", "e", "t", "id", "zi", "li", "ii", "bi"], "count": ["multiple", "call", "group", "common", "code", "total", "cond", "p", "c", "number", "num", "weight", "coll", "size", "conf", "counter", "z", "div", "index", "start", "current", "l", "child", "f", "m", "depth", "list", "no", "length", "len", "key", "base", "limit", "e", "id", "col", "skip", "part", "sum", "Count"], "multi": [" multiple", "multiple", "ui", "auto", "common", "chi", "mi", "umi", "mult", " mono", "num", "repeat", "split", "coll", "many", "mini", "index", "mu", "partial", "current", "uri", "cm", "pi", "tri", "nt", "uni", "ignore", "m", "cli", "single", "di", "list", "ni", "ci", "batch", "Multi", "micro", "every", "mix", "li", "ii", "double", "nb", "bi", "total", "lo"]}}
{"code": "from collections import Counter\\nn = int(input())\\nx = []\\nfor i in range(n):\\n    s = input()\\n    t = Counter(s)\\n    x.append(t)\\nans = \"\"\\nfor i in \"abcdefghijklmnopqrstuvwxyz\":\\n    tmp = []\\n    for j in x:\\n        tmp.append(j[i])\\n    ans += i*min(tmp)\\nprint(ans)", "target": "220", "substitutes": {"n": [" N", "min", "k", "p", "c", "y", "number", "o", "num", "en", "nc", "h", "ne", "z", "index", "nan", "w", "l", "u", "cn", "nt", "f", "m", "Ns", "ns", "no", "len", "b", "N", "count", "nb", "an"], "x": ["X", "p", "tx", "xf", "g", "xs", "c", "xx", "plus", "h", "y", "lex", "ix", "px", "rx", " tx", "xa", "nex", "ks", "temp", "z", "array", "xt", "ex", "index", " xx", "st", "cross", "w", "l", "u", "q", "f", "ax", "m", "xi", "ux", "ns", "list", "ct", "v", "b", "e", "xes", "xy", "xc", "test"], "i": ["ji", "k", "ui", "ie", "int", "chi", "mi", "p", "phi", "ai", "c", " I", "y", " v", "ix", " c", "ini", "iu", "ti", "z", "si", "index", "yi", "ind", "I", "u", "pi", "d", "io", "f", "m", "xi", "di", "ni", "ip", "ij", "ci", "v", " ii", "id", "li", "ii"], "s": ["ss", "sq", "sc", "p", "g", "c", "y", "o", "r", "sp", "size", "z", "si", "S", "sn", "w", "sb", "services", "u", "d", "ses", "sup", "f", "m", "ns", "gs", "v", "b", "e", "ls", "ds", "sv"], "t": ["tm", "tt", "p", "g", "c", "y", "r", "tp", "tn", "o", "T", "tf", "temp", "z", "w", "l", " T", "u", "d", "q", "ta", "f", "dt", "m", "ts", "v", "b", "e"], "ans": ["a", "ents", "lan", "cas", "nas", "amps", "eps", "ras", "p", "na", "ai", "ats", "aning", "cases", "anas", "AN", "ANS", "anes", "ks", "mean", "aces", "ann", "anc", "ani", "ays", "ana", "can", "params", " means", "nan", "An", "ars", "cross", "anus", "aned", "nn", "ons", "aus", "ln", "sk", "cs", "ens", "ants", "ns", "scan", "an", "ls", "cons", "ians", "ds", " Ans", "ins"], "tmp": ["wp", "tt", "p", "bp", "xs", "storage", "tp", "kk", "cp", "buf", "txt", "slice", "tf", "sp", "temp", "mp", "z", "array", "xt", "cro", "xxx", "cache", "params", "sb", "cb", "buff", "obj", "wx", "ctx", "nt", "ignore", "m", "copy", "nw", "yy", "shape", "data", "stuff", "vt", "v", "foo", "np", "cpp", "mm", "py", "nb", "test", "tc"], "j": ["ji", "k", "ja", " z", "p", "ai", "_", "o", " v", "jj", "y", "r", "jit", "jl", "z", "jet", "ind", "adj", "obj", "l", "q", "js", "jp", " _", "f", "m", "oj", "job", "xi", "ij", "J", "v", "b", " ii", "e", "ii", " jo", " d"]}}
{"code": "#W, H, x, y, r = map(int, input().split())\\ndef main():\\n    a, b, c, x, y = map(int, input().split())\\n\\n    min_sum = 100000 * 5000 + 100000 * 5000 + 200000 * 5000\\n\\n    if a == c and b == c :\\n        min_sum = a * x + b * y\\n    elif a  < c and b < c  or a  == c and b  < c or a < c and b  == c :\\n        min_sum = a * x + b * y\\n    elif a  > c and b  > c or a  == c and b  > c or a  > c and b  == c  :\\n        if x >= y :\\n            min_sum = y * 2 * c\\n            if a > c * 2:\\n                min_sum = min_sum + (x - y) * c * 2\\n            else:\\n                min_sum = min_sum + (x - y ) * a\\n        else:\\n            min_sum = x * 2 * c\\n            if b > c * 2:\\n                min_sum = min_sum + (y - x) * c * 2\\n            else:\\n                min_sum = min_sum + (y - x ) * b\\n    elif a < c and b > c:\\n        if c - a > b - c : #\u3080\u3060\\n            min_sum = a * x + b * y\\n        else:\\n            if x >= y :\\n                min_sum = (x-y)* a + y * c * 2\\n            else:\\n                min_sum = (y-x)* b + x * c * 2\\n    elif a > c and b < c:\\n        if c - b > a - c   : #\u3080\u3060\\n            min_sum = a * x + b * y\\n        else:\\n            if x >= y :\\n                min_sum = (x-y)* a + y * c * 2\\n            else:\\n                min_sum = (y-x)* b + x * c * 2\\n\\n\\n    else:\\n        for i in range(0, x+1):\\n            for j in range(0, y+1):\\n                if min_sum > a * i + b * j + max(x-i, y-j) * c * 2:\\n                    min_sum =a * i + b * j + max(x-i, y-j) * c * 2\\n\\n    print(min_sum)\\nmain()\\n# if a >= c and b <= c :\\n#     sum = x * c * 2\\n#     if x <= y :\\n#         sum = sum + ( y - x ) * b\\n# else:\\n#     sum = y * c * 2\\n#     if x >= y :\\n#         sum = sum + ( x - y ) * a\\n\\n\\n# if b > c * 2 :\\n    #     b_price = c\\n    #\\n    # input_array_list = []\\n    #\\n    # while True:\\n    #     input_array = input().split()\\n    #     if input_array[0] == \"0\" and input_array[1] == \"0\":\\n    #         break\\n    #     else:\\n    #         input_array_list.append(input_array)\\n    #\\n    # for item in input_array_list:\\n    #     n = int(item[0])\\n    #     k_sum = int(item[1])\\n    #\\n    #     count = 0\\n    #     for i in range(1,n + 1- 2):\\n    #         for j in range(i+1, n + 1 - 1):\\n    #             for k in range (j+1, n+ 1):\\n    #                 if i + j + k == k_sum :\\n    #                     count = count + 1\\n    #     print(count)\\n\\n    #\\n    # for item in input_array_list:\\n    #     if item[1] == \"+\":\\n    #         print(str(int(item[0])+int(item[2])))\\n    #     elif item[1] ==\"-\":\\n    #         print(str(int(item[0])-int(item[2])))\\n    #     elif item[1] == \"/\":\\n    #         print(str(int(item[0])//int(item[2])))\\n    #     elif item[1] == \"*\":\\n    #         print(str(int(item[0])*int(item[2])))\\n    #\\n\\n# import sympy as sp\\n\\n# input_list = []\\n# a,b,c = map(int, input().split())\\n# divisors = sp.divisors(c)\\n#\\n# count = 0\\n#\\n# for divisor in divisors:\\n#     if a <= divisor and divisor <= b:\\n#         count = count + 1\\n# print(count)\\n#\\n# while True:\\n#     pair_str = input().split()\\n#     pair_int = [int(s) for s in pair_str]\\n#     if pair_int[0] == 0 and pair_int[1] == 0 :\\n#         break\\n#     else:\\n#         input_list.append(pair_int)\\n#\\n# for pair_int in input_list:\\n#     if pair_int[0] <= pair_int[1]:\\n#         print(\"{} {}\".format(pair_int[0], pair_int[1]))\\n#     else:\\n#         print(\"{} {}\".format(pair_int[1], pair_int[0]))\\n\\n#for i in range(10000):\\n#    print(\"Hello World\")\\n#a = input().split()\\n#a_int = [int(s) for s in a]\\n#a_sorted = sorted(a_int)\\n#print(' '.join(map(str, a_sorted)))\\n", "target": "430", "substitutes": {}}
{"code": "import sys\\nsys.setrecursionlimit(10**9)\\n\\nH, W = map(int, input().split())\\nS = [input() for i in range(H)]\\n\\nvisited = set()\\ndef dfs(x, y, c, white, black):\\n  global visited\\n  for dx, dy in [[1, 0], [0, 1], [-1, 0], [0, -1]]:\\n    xx = x + dx; yy = y + dy\\n    if 0<=xx<H and 0<=yy<W and (xx, yy) not in visited and S[xx][yy]!=c:\\n      cc = S[xx][yy]\\n      if cc == '.':\\n        white += 1\\n      else:\\n        black += 1\\n      visited.add((xx, yy))\\n      white, black = dfs(xx, yy, cc, white, black)\\n  return white, black\\n\\nans = 0\\nfor x in range(H):\\n  for y in range(W):\\n    if (x, y) not in visited:\\n      visited.add((x, y))\\n      c = S[x][y]\\n      if c == '.':\\n        white = 1; black = 0\\n      else:\\n        white = 0; black = 1\\n      white, black = dfs(x, y, c, white, black)\\n      ans += white * black\\n\\nprint(ans)", "target": "431", "substitutes": {"H": ["F", "Hi", "E", "OH", "L", "V", "Q", "X", "DH", "Y", "XX", "K", "h", "SH", "Ha", "AH", "O", "P", "T", "C", "B", "D", "WH", "NH", "A", "He", "Oh", "EH", "hh", "His", "I", "HK", "GH", "HD", "Do", "Z", "HH", "CL", "HI", "U", "R", "Han", "M", "J", "N", "G", "HA", "CH"], "W": ["F", "YY", "E", "L", "V", "Q", "X", "XX", "Y", "WP", "K", "WR", "SW", "GW", "BW", "wh", "O", "P", "B", "C", "T", "D", "WC", "WH", "w", "I", "We", "wx", "DW", "d", "TW", "Z", "WI", "ww", "WA", "WB", "WF", "ws", "U", "R", "M", "EW", "N", "VW", "G", "CW", "Wh", "FW"], "S": ["F", "s", "VS", "L", "Cs", "DS", "V", "SC", "X", "LS", "NS", "Si", "Os", "TS", "PS", "IDS", "Files", "O", "P", "T", "C", "B", "D", "Session", "States", "A", "SL", "Service", "RS", "I", "services", "SS", "Services", "Z", "WS", "Ns", "Set", "CS", "U", "R", "M", "GS", "SP", "N", "SN", "G", "System", "Ins", "SU"], "i": ["gi", "k", "ie", "code", "p", " I", "ix", "iu", "index", "ind", "I", "d", "q", "j", "xi", "iy", "ci", "ij", "key", " ii", "iw", "id", "ii", "n", "ip"], "visited": ["hostITED", "visit", "ventitted", "ventited", " Visitted", "visiting", "Visitor", "Visiting", "Visit", "VisITED", "VISiting", "visualited", "visized", "visated", "circiter", "VISITED", "visitor", "circitor", "visualended", "Visitted", "ventit", " Visended", "iterit", "circited", "VISit", "visualitted", "visended", "Visized", " Visiting", "missiting", "visualit", "missited", "hostated", "visiter", " Visit", "circitted", "visITED", "visualized", "visitted", "missit", "Visiter", "hostit", "VISated", "visualiting", "iterited", "missitted", "iteritted", "Visited", "ventiter", "circit", "iteritor", "VISited", " Visited", "Visended", " Visized", "visualITED", "Visated", "hostited"], "x": ["yd", "k", "a", "int", "code", "sex", "X", "p", "tx", "XX", "ic", "xs", "g", "yx", "fx", "h", "rx", "px", "ix", "yn", "ym", "wh", "ph", "z", "xt", "xxx", "ex", "index", "xxxx", "image", "w", "cross", "www", "u", "d", "q", "one", "f", "ax", "j", "xi", "ci", "b", "v", "yl", "xml", "e", "my", "key", "xy", "event", "id", "xc", "test", "ey"], "y": ["yr", "s", "yd", "a", "ys", "ye", "p", "Y", "yx", "yu", "yn", "h", "o", "ym", "ay", "year", "z", "zy", "ch", "xxx", "yi", "yo", "cy", "ty", "uy", "w", "ny", "yt", "u", "d", "f", "j", "sy", "ky", "yan", "ya", "oy", "iy", "type", "v", "b", "yl", "t", "e", "xy", "yp", "py", "vy", "isy", "ry", "ey", "n"], "c": ["s", "k", "a", "sc", "code", "p", "ic", "g", "cca", "h", "nc", "css", "C", "coll", "lc", "anc", "z", "cus", "fc", "ch", "ce", "unc", "can", "cy", "cu", "uc", "w", "con", "l", "ctx", "u", "d", "cn", "f", "ca", "cs", "ac", "cin", "dc", "co", "vc", "ci", "b", "v", "CC", "cf", "e", "cr", "cell", "mc", "xc", "tc", "n"], "white": ["zero", "false", "en", "slice", "empty", "ane", "scale", "female", "f", "sk", "lace", "core", "private", "grey", "comments", "trace", "common", "green", "general", "css", "fe", "left", "une", "ne", " Caucasian", "clean", "flat", "burn", "de", "u", "score", "note", "small", "breaks", "ci", "brown", "equal", "e", "ice", "White", "all", "source", "important", "yellow", "width", "extra", "crop", "size", "tan", "stack", "blank", "ace", "frac", "ffe", "none", "mate", "gray", "complete", "alpha", "screen", " WHITE", "random", " White", "orange", "border", "wh", "ani", "cost", "ce", "w", "six", "style", "color", "han", "outside", "race", "what", "standard", "ii", "fine", "sum", "n"], "black": ["zero", "sh", "comment", "slice", "scale", "rac", "nan", "clear", "pack", "bb", "gg", "right", "sk", "trans", "ac", "private", "bin", "who", "grey", "fill", " blacks", "comments", "ady", "lay", "acks", "green", "dark", "clean", "buff", "zz", "mask", "brown", "mac", "an", "ack", "gar", "raw", "Black", "acc", "hack", "link", "square", "har", "tan", "kw", "blank", "ace", "none", "back", "rank", "gray", "alpha", "rock", "qq", "where", "k", "a", "missing", "g", "border", "wh", "blue", "cost", "shared", "valid", "w", "star", "style", "color", "han", "null", "xb", "ray", "check", "ck", "red", "cell", "sum"], "dx": ["yd", "sq", "dd", "DX", "X", "zx", "dist", "xs", "fx", "rx", "dj", "px", "ix", "wh", "xxx", "da", "ind", "wx", "src", "d", "xd", "ax", "dq", "ww", "xi", "dc", "cd", "di", "ci", "xe", "xp", "cpp", "xy", "ds", "xc"], "dy": ["yd", "dd", "ady", "hy", "gy", " Dy", "dj", "z", "zy", "fy", "idy", "wy", "ny", "d", "nn", "sy", "du", "den", "di", "iy", "hi", "wd", "db", "xy", "py", "ds", "vy", "dn", "ii", "eddy"], "xx": ["ss", "dd", "company", "code", "fix", "oo", "XX", "X", "zx", "xs", "something", "plus", "yx", "host", "fx", "h", "jj", "ix", "px", "kk", "rx", "z", "xxx", "xxxx", "index", "cy", "cross", "ny", "wx", "d", "xd", "nn", "f", "ax", "zz", "pp", "ww", "j", "xi", "ux", "ct", "foo", "ck", "e", "cf", "xy", "xc", "prefix", "abc", "n", "xxxxxxxx"], "yy": ["ss", "yr", "YY", "dd", "gy", "oo", "XX", "zx", "service", "Y", "something", "yx", "yn", "eeee", "ym", "z", "ty", "zy", "xxx", "uy", "wy", "cy", "xxxx", "fy", "now", "ah", "ny", "next", "user", " py", "ee", "nn", "aaa", "sy", "zz", "j", "ya", "oy", "foo", "b", "my", "key", "e", "yl", "xy", "py", "vy", "ii", "uu", "ry", "ey", "xxxxxxxx"], "cc": ["k", "sc", "code", "acc", "ic", "cca", "nc", "ec", "kk", "cp", "oc", "C", "lc", "uc", "cus", "fc", "ce", "xxx", "cy", "cu", "cm", "cn", "ca", "f", "rc", "cs", "ac", "co", "vc", "cd", "ci", "ct", "CC", "b", "cf", "ck", "bc", "cell", "xc", "cl", "cci", "tc"], "ans": ["ss", "s", "ents", "ates", "acks", "lan", "cas", "nas", "ends", "cks", "ams", "na", "gan", "cases", "anas", "AN", "photos", "ANS", "rules", "ks", "asts", "wh", "ane", "aces", "ann", "anc", "ana", "ays", "errors", "can", " sins", " means", "nan", "tan", "ars", "ands", "anks", "runs", "aned", "ace", "ons", "works", "leans", "sk", "cs", " spans", "ns", "acs", "rates", "reads", "powers", "ls", "cons", "plan", "banks", "an", " blacks", "comments"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\n#----------\\nH,W = list(map(int, input().rstrip().split()))\\nh,w = list(map(int, input().rstrip().split()))\\n#----------\\nprint( (H-h)*(W-w) )", "target": "458", "substitutes": {}}
{"code": "if 2 in list(map(int,input().split())):\\n    print('No')\\nelse:\\n    print('Yes')\\n", "target": "356", "substitutes": {}}
{"code": "N = int(input())\\nL = [list(map(int,input().split())) for k in range(N-1)]\\nc = sorted(list(map(int,input().split())))\\na = sum(c) - c[-1]\\nT = [[] for k in range(N)]\\nfor e in L:\\n    T[e[0]-1].append(e[1]-1)\\n    T[e[1]-1].append(e[0]-1)\\n\\nkyori = [-1 for k in range(N)]\\nque = [L[0][0]]\\nkyori[L[0][0]] = c.pop()\\n\\nwhile len(que) > 0:\\n    now = que.pop()\\n    for tsugi in T[now]:\\n        if kyori[tsugi] == -1:\\n            kyori[tsugi] = c.pop()\\n            que.append(tsugi)\\nprint(a)\\nprint(*kyori, sep=\" \")\\n", "target": "364", "substitutes": {"N": ["F", "Length", "E", "V", "H", "Q", "X", "Y", "Size", "NS", "NE", "Num", "K", "O", "P", "C", "B", "D", "Len", "Ne", "S", "A", "W", "I", "No", "NT", "Z", "Ns", "U", "R", "M", " n", "NA", "n"], "L": ["F", "E", "V", "LT", "CI", "TL", "NL", "Q", "X", "Y", "LA", "K", "LP", "Lu", "LU", "O", "P", "C", "B", "D", "LM", "S", "A", "W", "SL", "LC", "I", "l", "LR", "LE", "Z", "El", "CL", "U", "R", "List", "M", "t", "G", "LL", " l", "n"], "k": ["km", "kil", "kid", "p", "kh", "g", "K", "o", "work", "kk", "un", "ks", "kn", "ch", "x", "ork", "mk", "kw", "kin", "ka", "w", "ko", "ak", "it", "l", "ok", "u", "unk", "q", "f", "sk", "ky", "ek", "kt", "kat", "ku", "kick", "tk", "v", "ck", "id", "n"], "c": ["s", "E", "loc", "CI", "p", "g", "i", "y", "h", "o", "r", "ec", "P", "C", "lc", "z", "ch", "ce", "x", "cache", "cu", "w", "con", "l", "u", "d", "q", "f", "cs", "ac", "m", "U", "ci", "v", "b", "t", "count", "xc", "config", "n"], "a": ["aa", "wa", "auto", "at", "code", "ao", "p", "na", "qa", "ai", "g", "fa", "y", "Na", "ba", "ab", "au", "array", "aura", "da", "pa", "ar", "A", "ata", "aaa", "ca", "sa", " A", "asa", "ga", "ac", "area", "aj", "am", "ae", "alpha", "b", "ea", "an", "n"], "T": ["F", "E", "Table", "V", "LT", "TL", "H", "Q", "X", "p", "Y", "TA", "K", "o", "TN", "TS", "XT", "Tu", "O", "P", "C", "B", "D", "z", "S", "A", "W", "I", "TE", "Z", "TT", "TC", "U", "R", "Time", "M", "Te", "t", "Token", "G"], "e": ["E", "end", "ei", "ie", "ze", "code", "ese", "ade", "\u00eb", "p", "ele", "g", "element", "i", "entity", "o", "y", "ec", "en", "r", "h", "el", "une", "z", "edge", "je", "oe", "x", "w", "l", "ee", "u", "d", "one", "f", "j", "m", "ae", "you", "v", "b", "ea", "t", "ice", "er", "n", "eu"], "kyori": ["gyori", "gyor", "skyor", "kyora", "cheore", "ghor", "gyore", "yor", "kyore", "cheori", "skyui", "ghora", "hawora", "kyui", "gyobi", "cheoro", "hawore", "cheui", "hawor", "kyobi", "skyori", "hawobi", "kyor", "yora", "skyora", "skyoro", "skyobi", "ghori", "hawori", "cheobi", "ghobi", "haworo", "skyore", "kyoro", "cheora", "cheor", "yori", "gyui", "yobi"], "que": ["cur", "loc", "cycle", "sh", "line", "ie", "sc", "code", "me", "Queue", "queue", "qu", "Q", "qa", "hide", "h", "case", "log", "fe", "slice", "la", "done", "lc", "cle", "ch", "ques", "cache", "stack", "bug", "con", "req", "u", "q", "f", "sync", "core", "ue", "sequence", "hi", "ci", "ae", "complete", "quit", "foo", "fl", "pe", "ice", "sem", "count", "t", "seq", "ha", "cl", "next", "loop", "Que"], "now": ["new", "name", "cur", "handle", "cycle", "auto", "NOW", "event", "default", "currently", "low", "always", "future", "since", "tmp", "wh", "seed", "size", "force", "node", "current", "connection", "max", "shift", "wait", "once", "found", "old", "self", "Now", "day", "key", "today", "order", "mm", "after", "next", "front", "when", "where"], "tsugi": ["ssuri", "stsugi", "atsuna", "ssu", "atsinia", "atsushi", "ksushi", "idsuit", "stsug", "idsugi", " tsuna", "stsuit", "ssug", "etsinia", "idsagi", "stsu", "idsug", "stsuri", "atsugi", "etsugi", "tsuna", "hsuit", "atsagi", "etsuna", "tsuit", "ssugi", "tsu", "ksu", "tsinia", "stsushi", "atsuit", "atsug", "ksugi", "hsugi", "ssuit", "tsagi", "hsu", " tsinia", "ksug", "tsushi", "ssagi", "hsuri", "tsuri", "atsu", " tsagi", "tsug", "etsagi"]}}
{"code": "# ???????????????????????\u00a2??\u00b0\\ndef eval(m, f, r):\\n    if m == -1 or f == -1:\\n        return \"F\"\\n    elif m + f >= 80:\\n        return \"A\"\\n    elif 65 <= m + f < 80:\\n        return \"B\"\\n    elif 50 <= m + f < 65:\\n        return \"C\"\\n    elif 30 <= m + f < 50:\\n        if r >= 50:\\n            return \"C\"\\n        else:\\n            return \"D\"\\n    elif m + f < 30:\\n        return \"F\"\\n\\n\\nwhile 1:\\n    mfr = input().split()\\n    m = int(mfr[0])\\n    f = int(mfr[1])\\n    r = int(mfr[2])\\n\\n    if m == -1 and f == -1 and r == -1:\\n        break\\n    else:\\n        print(eval(m, f, r))", "target": "410", "substitutes": {}}
{"code": "n = int(input())\\nprint(0)\\nl = input()\\nif l == \"Vacant\":\\n    exit()\\nprint(n-1)\\nr = input()\\nif r == \"Vacant\":\\n    exit()\\ns = \"none\"\\nl_n = 0\\nr_n = n-1\\nwhile True:\\n    s_n = (l_n+r_n)//2\\n    print(s_n)\\n    diff = s_n - l_n\\n    s = input()\\n    if s == \"Vacant\":\\n        exit()\\n    elif s == \"Male\" and diff % 2 == 0:\\n        if l == \"Male\":\\n            l_n = s_n\\n        else:\\n            r = \"Male\"\\n            r_n = s_n\\n    elif s == \"Male\" and diff % 2 == 1:\\n        if l == \"Male\":\\n            r = \"Male\"\\n            r_n = s_n\\n        else:\\n            l = \"Male\"\\n            l_n = s_n\\n    elif s == \"Female\" and diff % 2 == 0:\\n        if l == \"Female\":\\n            l_n = s_n\\n        else:\\n            r = \"Female\"\\n            r_n = s_n\\n    elif s == \"Female\" and diff % 2 == 1:\\n        if l == \"Female\":\\n            r = \"Female\"\\n            r_n = s_n\\n        else:\\n            l = \"Female\"\\n            l_n = s_n\\n\\n", "target": "344", "substitutes": {"n": ["k", "name", "ner", "non", "p", "na", "c", "i", "o", "nc", "en", "num", "y", "un", "ne", "z", "x", "sn", "d", "nn", "nt", "f", "network", "j", "m", "ns", "no", "ni", "nl", "len", "v", "np", "t", "N", "e", "nor"], "l": ["lp", "ol", "L", "line", "ur", "p", "al", "g", "c", "ly", "i", "err", "h", "sl", "o", "el", "la", "lv", "lc", "kl", "ar", "pl", "d", "u", "ll", "ln", "f", "dl", "m", "acl", "rl", "rel", "nl", "lit", "fl", "lu", "v", "ell", "b", "hl", "t", "ls", "all", "il", "le", "e", "li", "ul", "er"], "r": ["rh", "rr", "k", "mr", "ner", "ur", "p", "rar", "g", "c", "err", "i", "h", "pr", "rf", "re", "lr", "lc", "z", "x", "ar", "w", "u", "d", "rb", "f", "sr", "m", "ir", "dr", "rl", "rg", "rt", "br", "R", "nr", "v", "b", "e", "t", "fr", "ler", "ru", "er", "nor"], "s": ["ss", "strings", "sets", "y", "ims", "si", " ss", "blocks", "ar", "parts", "erences", "js", "f", "ments", " sample", "gs", "b", "er", "changes", "comments", "new", "settings", "states", "ats", "i", "h", "ers", "sf", "lc", " changes", "u", "sg", "cs", "sync", "sections", "old", "os", "v", "e", "olds", "sq", "spec", "ur", "p", "ps", "sys", " differences", "size", "es", "params", "S", "lines", "ses", "less", "d", "stats", " comments", "m", "ils", "ns", "ts", "t", "ls", "a", "qs", "groups", "al", "side", "g", "c", "sym", "ists", "o", "sl", " errors", "als", "args", "sr", "ssl", " samples", "ws", "su", " ls", "ds", "its", "sv", "rs"], "l_n": ["l_e", "lofn", "l2n", "slofn", " l_o", " l_nt", "slofno", "R_nt", "slofin", "l__n", "ul_pn", "ol_on", "l_ne", "lazyne", "s_c", "l95in", "l_o", "l__ne", "l25rn", "l_ns", "R_en", "l_in", "l_nu", "l_c", "l95no", "ul25cn", "l__nt", "l___in", "l2none", "lJon", "sl_in", "l_on", "l_d", " l_d", "l95nu", "ol_rn", "l_cn", "l95ns", " l_ne", "R_n", "lJn", "slofe", "l_rn", "ul_cn", "ol_n", "l___n", "l25on", "l25ne", "sl_no", "lofno", "lazyn", "l95d", "ul25n", "lacN", "lJpn", "lacn", "sl_e", "l95n", "sl_n", "l_en", "l_no", "lazyo", "l2N", "R_ne", " l_nu", "l___no", "l2c", "lacc", "l___e", "lacnone", "ul25on", "l25pn", "ul25pn", "l_N", "s_none", "lofe", "s_N", "lofin", "lJcn", " l_ns", "l95e", "ul_on", "l25n", "l__en", "lazynt", "l25cn", "ol_ne", "l_pn", "l_nt", "ul_n", "l_none"], "r_n": [" r_ne", "r_c", " r_un", "n_n", "r___un", "r___n", "pr___un", "r_un", "rvalc", "r_o", "pr_nit", "rvalnt", "pr_c", " r_pn", "rFc", "rvalo", "n_conn", "rlogun", " r_nt", "rFun", "pr___n", "r_conn", " r_N", "r_pn", "rlogn", "r_N", "r___c", "rvalconn", "rlogc", "nvalconn", "n_o", "rvalnit", "pr_un", "pr___c", "r_ne", "nvalnit", "rFn", "rvalne", "n_nit", " r_c", "rlogconn", "r_nt", "pr_n", "nvaln", "r___nit", "nvalo", "rvaln", "pr___nit", "rFconn", " r_conn", "r_nit"], "s_n": ["s05ne", "s_nin", "svalN", "s00n", " s_an", "sxcn", "s_c", "svalnr", "s___on", "ls_n", "sxen", "lsJk", " s_num", "s___k", " s_dn", "s_conn", "site_un", "s_un", "s_ne", "s_nt", "s_nb", "s6non", " s_non", "s6rn", "s05na", "s_l", " s_en", "l_c", "s05un", "s_nw", "site_en", " s__na", "ls_k", "s_sn", " s_cn", " s_on", "s6nb", "sxn", "s_cn", "sxin", "s__n", "s_an", "sJon", "ls_on", "s_k", "s05num", "s_num", "s_in", " s_nt", " s_ne", "s_non", "s6n", "s__na", " s__num", "sJk", "s05cn", " s_rn", "s__cn", "s00ne", "s05sn", "s05nin", "s05an", " s_sn", "site_n", "s14n", "s00on", "s_nr", "sJnw", "lsJon", "s00un", "s14cn", " s_na", "s05dn", "l_nr", "s_rn", "s05conn", " s_un", "s_on", "s_en", "lsJn", "lsJnw", " s_nb", "s__num", "l_N", "site_c", "ls_nw", "s14en", "s_dn", "s05n", "s_na", "s_N", "s05en", "s14in", " s_conn", "svaln", " s__cn", "svalc", "s05nt", "sJn", " s_nin", "l_l", "s___n", " s__n", "s___nw"], "diff": ["error", "field", "change", "cmp", "end", "part", "missing", "default", "dist", "ge", "where", "err", "sect", "low", "adv", "comment", "pos", "log", " difference", "desc", "conf", "config", "div", "scale", "comp", "iff", "only", "bug", "patch", "d", "show", "Diff", "shift", "frac", "f", "ignore", "different", "found", "old", "fail", "no", "check", "list", "match", "ange", "equal", "add", "id", "mix", "range", "changes", "test", "draw", "update", "ref", "info"]}}
{"code": "import heapq\\nt = 1\\ndef max(a,b):\\n\tif a > b:\\n\t\treturn a\\n\treturn b\\ndef min(a,b):\\n\tif a < b:\\n\t\treturn a\\n\treturn b\\n\\nwhile t > 0:\\n\tt -= 1\\n\t# a,b = map(int,input().split())\\n\tn = int(input())\\n\tans = (n-1)*(n)//2\\n\tprint(ans)\\n\t# v = list(map(int,input().strip().split()))[0:n]\\n\t# i = 0\\n\t# ans = 0\\n\t# while i < n:\\n\t# \tj = i\\n\t# \twhile j+1 < n and v[j+1] <= v[j]:\\n\t# \t\tj += 1\\n\t# \tl = j-i+1\\n\t# \tans = max(ans,l)\\n\t# \ti = j+1\\n\t# print(ans-1)", "target": "574", "substitutes": {"t": ["s", "int", "at", "wt", "tt", "et", "p", "g", "c", "tim", "i", "y", "tn", "tp", "ot", "r", "o", "h", "pt", "T", "tf", "temp", "z", "xt", "time", "x", "it", "yt", " T", "l", "d", "nt", "ert", "ta", "out", "dt", "f", "m", "rt", "ct", "qt", "ts", "type", "v", "e", "lt", "step", "test", "n"], "a": ["aa", "auto", "va", "at", "ma", "p", "na", "ai", "ama", "c", "fa", "eta", "i", "y", "api", "ba", "ab", "au", "ana", "da", "pa", "A", "ah", "ar", "arta", "ia", "ak", "u", "d", "ach", "ta", "ca", "sa", "f", "ac", "ga", "asa", "area", "aux", "am", "aj", "ae", "alpha", "ea", "e", "ada", "an", "ast", "ad"], "b": ["aa", "be", "ib", "fb", "p", "bs", "arb", "pb", "c", "g", "i", " B", "y", "r", "o", "emb", "wb", "beta", "mb", "B", "ba", "ab", "http", "sb", "l", "ob", "rb", "bb", "d", "bh", "bf", "abb", "hub", "ub", "f", "eb", "bd", "erb", "amb", "db", "gb", "v", "bar", "base", "e", "abe", "nb", "lb", "bi", "ad", "bis"]}}
{"code": "N, M = map(int, input().split())\\n\\nif N <= 1: a = 0\\nelse: a = N*(N-1) // 2\\n\\nif M <= 1: b = 0\\nelse: b = M*(M-1) // 2\\n  \\nprint(a+b)", "target": "150", "substitutes": {"N": ["F", "MN", "E", "Number", "L", "V", "NN", "X", "Y", "Size", "NC", "Num", "NS", "NE", "NI", "K", "NM", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "A", "No", "NT", "Node", "Ni", "Z", "Ns", "U", "Part", "NB", " n", "G", "NA", "Mo", "Count", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "MA", "Y", "MI", "Mo", "DM", "PM", "K", "MX", "MP", "NM", "AM", "JM", "O", "P", "LM", "B", "T", "D", "C", "MD", "Many", "S", "A", "W", "CM", "OM", "I", "FM", "MB", "Z", "m", "VM", "MC", "U", "R", "MF", "MM", "G", "MO", "n", "RM"], "a": ["aa", "auto", "va", "qa", "ai", "aw", "c", "fa", "ama", "y", "ba", "mA", "ab", "au", "ana", "da", "A", "af", "ia", "d", "aaa", "ca", "sa", "angle", "ac", "asa", "ga", "m", "area", "aj", "am", "ae", "alpha", "ea", "aaaa", "e", "ada", "abc", "an", "ad", "n"], "b": ["aa", "be", "ib", "fb", "p", "bs", "g", "c", "i", "y", "o", "wb", "mb", "ba", "B", "ab", "z", "x", "A", "sb", "l", "bb", "d", "u", "rb", "bf", "f", "eb", "ae", "db", "v", "e", "nb", "lb", "bi", "n"]}}
{"code": "def func(n) :\\n    i = 1\\n    b = n\\n    while i*i <= n :\\n        if n % i == 0 :\\n            if max(len(str(i)), len(str(n//i))) < b :\\n                b = max(len(str(i)), len(str(n//i)))\\n        \\n        \\n        i += 1\\n    \\n    return print(b)        \\n\\nn = int(input())\\nfunc(n)", "target": "184", "substitutes": {"n": ["min", "s", "k", "a", "non", "p", "g", "c", "o", "y", "r", "num", "en", "nc", "net", "un", "bn", "ne", "z", "fn", "x", "nan", "sn", "node", "w", "l", "u", "d", "nn", "nt", "max", "cn", "j", "f", "m", "ln", "network", "ns", "no", "ni", "v", "len", "t", "N", "e", "count", "nb"], "i": ["gi", "s", "k", "ui", "int", "qi", "mi", "p", "phi", "ai", "c", "oi", "y", "o", "ini", "ix", "iu", "ti", "z", "mini", "si", "eni", "index", "x", "yi", "I", "l", "u", "pi", "d", "j", "f", "io", "m", "xi", "ori", "ri", "di", "ni", "ci", "isi", "v", "t", "e", "zi", "id", "multi", "li", "ii", "nb", "bi"], "b": ["k", "be", "a", "ib", "boot", "p", "bs", "bp", "g", "c", "bound", "pb", "y", "r", "h", "o", "wb", "mb", "B", "ba", "ab", "z", "x", "w", "sb", "body", "l", "ob", "u", "pi", "rb", "bb", "d", "bf", "f", "j", "bd", "m", "db", "binary", "v", "base", "t", "e", "count", "nb", "lb", "bi"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport re\\nimport numpy as np\\nimport sys\\nfrom collections import deque\\nfrom collections import defaultdict\\nimport heapq\\nimport collections\\nimport itertools\\nimport bisect\\n\\nsys.setrecursionlimit(10**6)\\n\\n\\ndef zz():\\n    return list(map(int, sys.stdin.readline().split()))\\n\\n\\ndef z():\\n    return int(sys.stdin.readline())\\n\\n\\ndef S():\\n    return sys.stdin.readline()[:-1]\\n\\n\\ndef C(line):\\n    return [sys.stdin.readline() for _ in range(line)]\\n\\n\\ndef is_match(a, b):\\n    for _a, _b in zip(a, b):\\n        if (_a == _b or _a == '?'):\\n            continue\\n        else:\\n            return False\\n    return True\\n\\n\\ns = S()\\nt = S()\\n\\n# s = s.replace('?', '.')\\n# pattern =   ''\\n\\nif (t in s):\\n    print(s.replace('?', 'a'))\\n    exit()\\nif (len(s) < len(t)):\\n    print('UNRESTORABLE')\\n    exit()\\n\\n\\nif (is_match(s[-len(t):], t)):\\n    ans = s[:-len(t)] + t\\n    ans = ans.replace('?', 'a')\\n    print(ans)\\n    exit()\\ni = 0\\n\\nfor _s in reversed(s[len(t)-1:-1]):\\n    i += 1\\n    if (_s == t[-1] or _s == '?'):\\n        if (is_match(s[-i - len(t): - i], t)):\\n            ans = s[:-i - len(t)] + t + s[-i:]\\n            ans = ans.replace('?', 'a')\\n            print(ans)\\n            exit()\\n\\n\\nprint('UNRESTORABLE')\\n", "target": "312", "substitutes": {}}
{"code": "N=int(input())\\na=list(map(int,input().split()))\\na=sorted(a)\\na_set=sorted(list(set(a)))\\n\\nflag=False\\nif sum(a)==0:\\n    flag=True\\nelif N%3==0:\\n    if len(a_set)==2:\\n        x,y=a_set\\n        if x==0 and a.count(x)*3==N:\\n            flag=True\\n    elif len(a_set)==3:\\n        x,y,z=a_set\\n        if x^y^z==0 and a.count(x)==a.count(y) and a.count(y)==a.count(z):\\n            flag=True\\n\\nprint('Yes' if flag else 'No')", "target": "216", "substitutes": {"N": ["F", "Number", "L", "V", "H", "Q", "X", "Y", "Size", "Num", "NS", "NE", "K", "number", "O", "P", "B", "T", "C", "D", "Ne", "S", "A", "W", "I", "No", "NT", "Ni", "Z", "Ns", "R", "M", "J", " n", "G", "NA", "Count", "n"], "a": ["aa", "s", "wa", "auto", "at", "va", "missing", "ma", "ans", "p", "na", "ai", "aw", "c", "i", "ama", "o", "analysis", "la", "ba", "array", "ana", "au", "da", "ar", "A", "w", "ia", "ata", "args", "u", "aaa", "f", "ca", "sa", "ac", "ga", "asa", "m", "area", "aux", "am", "aj", "input", "ae", "data", "alpha", "ya", "b", "ea", "e", "za", "an", "ast", "ad", "n"], "a_set": ["na_get", "as_size", "a_part", "a_group", "as_dist", "as_set", " a_sort", "a_sort", "an_sum", "a_Set", " a_group", " a_split", "a_sets", "a_size", "an_set", "as_group", "na_part", " a_list", "a_get", "na_set", "an_sets", "a_dist", "a_split", "a_list", "an_Set", " a_size", "a_sum"], "flag": ["bad", "error", "field", "maybe", "date", "zag", "sil", "alt", "int", "code", "enable", "die", "ag", "event", "default", "arg", "init", "use", "comment", "log", "leaf", "like", "tag", "sign", "wave", "force", "long", "store", "valid", "af", "start", "bug", "ask", "wait", "f", "lag", "status", "sort", "style", "flags", "fun", "FLAG", "sync", "mask", "no", "type", "key", "len", "debug", "count", "add", "standard", "id", "fill", "bit", "filter", "skip", "inline", "big", "Flag", "offset"], "x": ["dx", "int", "X", "p", "ic", "xs", "c", "i", "xx", "o", "h", "ix", "rx", "ay", "xt", "on", "ex", "index", "time", "xxx", "w", "l", "u", "d", "one", "f", "ax", "j", "m", "ww", "xi", "no", "data", "v", "b", "an", "t", "e", "xy", "xc", "xa", "n"], "y": ["yd", "s", "ady", "dy", "ys", "int", "ye", "X", "p", "Y", "c", "i", "yn", "o", "ix", "ym", "ay", "zy", "yi", "wy", "cy", "w", "ny", "yz", "yt", "l", "d", "sy", "j", "f", "yy", "ya", "oy", "iy", "b", "v", "e", "t", "xy", "py", "vy", "ry", "ey", "ies", "n"], "z": ["iz", "oz", "ze", "gy", "X", "p", "c", "zone", "i", "h", "o", "ix", "cz", "zy", "yi", "cy", "w", "ny", "l", "u", "d", "q", "j", "Z", "zz", "f", "ya", "v", "b", "zip", "e", "ez", "count", "t", "zi", "vy", "gz", "tz", "za", "n"]}}
{"code": "import math\\n\\na=int(input())\\nb=int(input())\\nans=2*b-a\\nprint(ans)", "target": "524", "substitutes": {"a": ["aa", "va", "span", "ma", "p", "na", "qa", "c", "fa", "i", "y", "ba", "mA", "ab", "pa", "x", "da", " af", "A", "index", "af", "w", "ia", "aaa", "ca", "sa", " A", "ac", "ga", " sa", "area", "aj", "ae", "alpha", "e", "an", "ad", "n"], "b": ["aa", "s", "fb", "p", "bs", "c", "i", "y", "r", "wb", "beta", "B", "ba", "ab", "A", "sb", "cb", "l", "bb", "d", "rb", "abb", "f", "m", "xb", "v", "an", "e", "bc", "abc", "nb", "lb", "ad", "Bs", "n"], "ans": ["ano", "aid", "anna", "lan", "ras", "nas", "cas", "atan", "na", "aning", "anas", "AN", "ANS", "anes", "ane", "ann", "anon", "anc", "ab", "annot", "ana", "ays", "can", "nan", "ars", "anus", "aned", "aus", "anan", "anne", "leans", "cs", "ns", "man", "ians", "ds", "an", "bay", "ins"]}}
{"code": "from collections import deque\\nn,q=map(int,input().split())\\ntree=[[] for _ in range(n)]\\nfor i in range(n-1):\\n    a,b=map(int,input().split())\\n    a-=1\\n    b-=1\\n    tree[a].append(b)\\n    tree[b].append(a)\\ncnt=[0]*n\\nfor i in range(q):\\n    p,x=map(int,input().split())\\n    cnt[p-1]+=x\\n\\nstack=deque([[0,0,-1]]) # \u73fe\u5728\u5730\u3001\u305d\u306e\u4f4d\u7f6e\u3067\u5f15\u304d\u7d99\u3044\u3067\u304d\u305fcount\u3001\u524d\u306e\u4f4d\u7f6e\\n\\nwhile stack:\\n    num,count,preb = stack.pop()\\n    cnt[num]+=count\\n    for i in tree[num]:\\n        if i == preb:\\n            continue\\n        stack.append([i,cnt[num],num])\\n\\nprint(*cnt)", "target": "644", "substitutes": {"n": [" N", "k", " sort", " w", "c", "y", " v", "o", "num", " c", "r", "h", "nc", " query", "ne", "z", " fn", "w", " delta", "l", " np", " root", "u", "d", "nt", "max", "f", "j", "network", "m", " count", "ns", " self", "v", " node", " nest", " ii", "e", "N", "t", "count", " index", " l", "nb", " len"], "q": ["k", "sq", "cycle", "qs", "qu", "qi", "Q", "qa", "g", "c", "y", "h", "o", "num", "z", "w", "window", "l", "u", "d", "f", "j", "dq", "m", "query", "depth", "qt", "v", "e", "order", "count", "t", "qq"], "tree": ["cycle", "Tree", "token", "random", "table", "code", "wt", "int", "tail", "level", "arr", "forest", "ree", "y", "o", "leaf", "slice", "split", "seed", "ite", "z", "div", "index", "cache", "store", "node", "body", "flat", "root", "nt", "j", "m", "note", "sequence", "parent", "list", "data", "zip", "v", "t", "e", "order", " trees", "reen"], "_": ["int", "num", "I", "l", "f", " int", "len", "t", "all"], "i": [" bi", "int", "ai", "c", " I", "iq", "iu", "ti", "z", "ind", "I", "it", "l", "u", "d", "f", "j", " j", "di", "ci", "id", "li", "ii", "ip"], "a": ["aa", "k", "s", "va", "ai", "c", "fa", "y", "o", "r", "ba", "ab", "au", "da", "pa", "A", "w", "l", "u", "d", "aaa", "f", "sa", "ca", "ac", "m", "j", "aj", "am", "ae", "alpha", "e", "an", "ad"], "b": ["s", "k", "aa", "bs", "bp", "g", "c", "y", "r", "o", "h", "beta", "mb", "B", "ba", "ab", "z", "A", "w", "sb", "l", "u", "d", "bb", "rb", "bf", "abb", "f", "j", "eb", "bd", "v", "e", "nb", "lb", "bi"], "cnt": ["cNT", " ccount", "Ccount", "CNT", "Cwd", "fnt", " cNT", " cct", " cwd", "cct", "ccount", "fct", "fount", "Cnt", "fwd", "lccount", " count", "lcnt", "count", "Cct", "lcNT", "cwd", "Count", "lcount"], "p": ["k", "pid", "ps", "c", "fp", "y", "o", "tp", "per", "cp", "ap", "P", "po", "z", "pa", "l", "u", "pi", "j", "f", "point", "m", "pp", "ip", "v", "np", "t", "pe", "e", "col", "py", "pc"], "x": ["dx", "int", "X", "xf", "tx", "exp", "xs", "c", "g", "xx", "y", "h", "rx", "ix", "z", "xt", "ex", "xxx", "index", "w", "u", "d", "f", "ax", "xi", "ci", "xp", "v", "e", "t", "xes", "xy", "xc", "abc"], "stack": ["cycle", "str", "pop", "queue", "arr", "Stack", "pos", "chain", "slice", "size", "z", "array", "index", "cache", "store", "node", "sequence", "parent", "list", "data", "len", "count", "seq", " index"]}}
{"code": "H, W, K = map(int, input().split()) \\nsl = []\\nfor _ in range(H):\\n    sl.append(list(input()))\\n\\n\\nans = 10**8\\nfor i in range(2 ** (H-1)):\\n    fail_flag = False\\n    comb = []\\n    for j in range(H-1):\\n        if ((i >> j) & 1): \\n            comb.append(j)\\n    comb.append(H-1)\\n    # print(comb)\\n    sections = []\\n    for k in range(0,len(comb)):\\n        if k == 0:\\n            sections.append( sl[0:comb[0]+1] )\\n        else:\\n            sections.append( sl[comb[k-1]+1:comb[k]+1] )\\n    # print(sections)\\n\\n    partition_cnt = 0\\n    sections_w_cnts = [0]*len(sections)\\n    for w in range(W):\\n        sections_curr_w_cnts = [0]*len(sections)\\n        partition_flag = False\\n        for i, sec in enumerate(sections):\\n            for row in sec:\\n                if row[w] == '1':\\n                    sections_curr_w_cnts[i] += 1\\n                    sections_w_cnts[i] += 1\\n                    if sections_curr_w_cnts[i] > K:\\n                        fail_flag = True\\n                        break\\n                    if sections_w_cnts[i] > K:\\n                        partition_flag = True\\n\\n            if fail_flag: break\\n        if fail_flag: break\\n\\n        if partition_flag:\\n            sections_w_cnts = [v for v in sections_curr_w_cnts]\\n            # sections_w_cnts[:] = sections_curr_w_cnts[:]\\n            partition_cnt += 1\\n        \\n\\n    if not fail_flag:\\n        ans = min(len(comb)-1+partition_cnt, ans)\\n\\nprint(ans)", "target": "329", "substitutes": {"H": ["F", "k", " h", "E", "Length", "OH", "L", "V", "Q", "X", "Y", "h", "Ha", "HC", "O", "P", "T", "C", "B", "CH", "WH", "NH", "S", "HE", "w", "EH", "I", "HK", "Ch", "GH", "Z", "HH", "MH", "CL", "HI", "U", "R", "M", "J", "FH", "N", "G", "Wh", "RH", "Work"], "W": ["F", "E", "Sw", "V", "Q", "X", "Y", "WE", "WR", "SW", "SH", "O", "P", "T", "C", "B", "WC", "w", "Z", "U", "R", "M", "N", "VW", "G", "Wh", "FW"], "K": ["F", "k", "E", "V", "Q", "X", "DH", "Y", "SH", "O", "P", "T", "C", "B", "SK", "KS", "S", "w", "HK", "Z", "KR", "U", "R", "J", "M", "N", "G"], "sl": ["isl", "s", "loc", "sh", "L", "shell", "sc", "p", "h", "el", "slice", "split", "lc", "z", "bl", "sn", "SL", "w", "Sl", "l", "isol", "sol", "sk", "sel", "ssl", "sa", "sw", "fl", "ls", "il", "se", "li", "cl", "val", "sil"], "_": ["k", "int", "g", "h", "of", " x", " k", "x", "f", "all", "ip"], "ans": ["ji", "s", "a", "chi", "p", "ai", "Na", "AN", "ann", "ani", "Sa", "ch", "S", "A", "Jac", "adj", " J", " A", "ac", "aj", "ni", "ij", "CC", "all", "cl", "an", "n"], "i": ["ji", "k", "ui", "a", "ie", "int", "chi", "p", "ai", "c", " I", "h", "jj", "iu", "z", "si", "x", "ind", "I", "it", "l", "u", "d", "pi", "f", "m", "xi", "hi", "ci", "ij", "J", "b", "v", "li", "ii", "n", "bi", "ip"], "fail_flag": ["failpflag", "fail_lag", "fail_bit", "miss_bit", "fail__status", "miss_status", "miss__bit", "fail__flag", "miss_flag", "miss__lag", "miss__status", "failpstatus", "fail__lag", "fail__bit", "failplag", "fail_status", "miss_lag", "miss__flag", "failpbit"], "comb": ["rh", "loc", "sh", "code", "com", "tw", "go", "acc", "Comb", "jo", "h", "case", "JO", "bo", "chain", "wei", "coll", "children", "conf", "uc", "div", "array", "hang", "z", "search", "two", "each", "comp", "w", "sb", "exec", "pack", "lam", "union", "he", "gro", "mo", "join", "ac", "java", "wo", "jam", "batch", "match", "zip", "LO", "cr", "jac", "mac", "ha", "multi", "mix", "ul", "cl", "loop", "block", "lo"], "j": ["ji", "k", " p", "ie", "ja", " z", " g", "p", "g", " dj", "jo", " I", "c", "h", " v", "jj", "o", " c", " x", "r", "jl", "z", "ch", "index", "x", "ind", "w", "I", "it", "l", "u", " J", "q", "jp", "f", "m", "aj", "ij", "J", "v", "b", "li", "ii", " jo", " b", "n"]}}
{"code": "N = int(input().strip())\\na_list = list(map(int, input().rstrip().split()))\\n\\na_list.sort()\\n\\nprint(a_list[-1] - a_list[0])", "target": "447", "substitutes": {"N": ["name", "L", "V", "Num", "i", "K", "number", "num", "axis", "P", "T", "C", "B", "S", "A", "I", "Array", "no", "R", "List", "M", " n", "NA", "nb", "NUM", "Count", "n"], "a_list": ["a_l", "a9len", "aux_pair", " a_set", "auxJlist", "a9list", "a2tail", "aux_int", "a__list", "a__pair", "A2set", "a_queue", "aqlist", "a__set", "a__List", " a_stack", "aJint", " a_case", "a__len", "aqqueue", "A_tail", "A2list", "a67tail", "a2set", "a67set", "a_tail", "A_set", "a_set", "aqtail", "auxJpair", "a2list", "A2tail", "a_int", "a67queue", "A_list", "aqset", "aux_list", " a_l", "a_stack", "a9List", "a9set", "a_case", "aJpair", "a_List", "A_queue", "A2queue", "a_pair", "a__int", "a67list", "auxJint", "aJlist", "a_len", "a2queue", " a_List", " a_len"]}}
{"code": "import sys\\nimport numpy as np\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nN, K = map(int, readline().split())\\nA = np.array(read().split(), np.int32)\\n\\ng = np.gcd.reduce(A)\\ncond = (K % g == 0) and (K <= A.max())\\nprint('POSSIBLE' if cond else 'IMPOSSIBLE')", "target": "603", "substitutes": {"read": ["call", "raw", " data", "end", "align", " READ", "reader", " write", "method", "stream", "stat", "dat", "load", "r", "cess", "rec", "rx", "Read", " copy", "head", "work", "content", "connect", "oke", "write", "long", "READ", "run", "search", "x", "each", "index", " stream", "current", " reading", "readable", "report", "f", "right", "walk", "eval", " reads", "scan", "input", "check", "reads", "data", "find", "bind", "play", "reading", "add", " Read", " reader", "fill", "filter", "config", "feed"], "readline": ["readinglist", "readinglines", "loadlist", "loadlines", "READline", "readingpass", "READwrite", " readpass", "readbyte", "rawline", "rawLINE", "loadpass", "Readwrite", "Readline", " readlist", "readlist", "loadline", "readpass", "readwrite", "READLINE", "Readlines", "readingline", " readLINE", "readLINE", " readwrite", "rawlines", "rawbyte", "rawwrite", "READlines", " readbyte", "Readbyte"], "readlines": ["readerbytes", "loadlist", "loadlines", "headlist", "readvalues", "headvalues", "headlines", "readerlines", "drawline", "readlist", "loadline", " readnames", " readbytes", " Readline", "readernames", "readerline", " Readlines", "drawlines", "drawlist", "readbytes", "readnames", " Readnames", "loadvalues", "headline", "drawvalues", " Readbytes"], "N": ["F", "E", "Number", "L", "V", "H", "Q", "Num", " I", "O", "P", "T", "B", "C", "D", " C", "S", "I", "Output", "Z", "R", "M", "Name", " n", "G", "n"], "K": ["F", "k", "E", "KK", "L", "V", "H", "Q", "X", "Y", "O", " k", "P", "ks", "C", "B", "D", "T", "SK", "KS", "S", "W", "kw", "KC", "I", "Z", "KR", "U", "R", "OK", "J", "M", "G", "KA"], "A": ["F", "GA", "Access", "a", "L", "At", "H", "AS", "p", "Y", "AP", "Adam", "LA", "Ha", "P", "B", "C", "T", "D", "As", "AC", "mA", "Ar", "array", "AA", "au", "Alpha", "S", "W", "I", "Average", "Array", "CA", "AF", "Input", "alpha", "M", "Wa", "G", "Am", "Ang", "KA", "HA", "An"], "g": ["gi", "GA", "growth", "group", "gy", "go", "ge", "c", "gh", "gc", "gam", "gu", "ig", "gp", "ng", "gn", "w", "gd", "cm", "d", "gg", "sg", " G", "gain", "j", "mg", "gt", "m", "ga", "GG", "ac", "rg", "gs", "gb", "eg", "e", "gen", "Ga", "cc", "gm", "G", "mc", "pg", "n"], "cond": ["unit", "cmp", "int", "code", "thread", "c", "condition", "low", "case", "nc", "gc", "cont", "pos", "log", "bool", "lc", "force", "diff", "comp", "ind", "obj", "sec", "nt", "lf", "resp", "fail", "no", "check", "ct", "fl", "bc", "count", "Cond", "col", "filter", "part", "reason"]}}
{"code": "import sys\\nimport math\\nfrom collections import defaultdict, deque, Counter\\nfrom copy import deepcopy\\nfrom bisect import bisect, bisect_right, bisect_left\\nfrom heapq import heapify, heappop, heappush\\n    \\ninput = sys.stdin.readline\\ndef RD(): return input().rstrip()\\ndef F(): return float(input().rstrip())\\ndef I(): return int(input().rstrip())\\ndef MI(): return map(int, input().split())\\ndef MF(): return map(float,input().split())\\ndef LI(): return list(map(int, input().split()))\\ndef TI(): return tuple(map(int, input().split()))\\ndef LF(): return list(map(float,input().split()))\\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\\n    \\n    \\ndef main():\\n    X, Y = MI()\\n    \\n    exist = False\\n    for x1 in range(0, X+1):\\n        y1 = Y - 2 * x1\\n        if x1 + 2 * y1 == X:\\n            exist = True\\n            break\\n    if not exist:\\n        print(0)\\n        sys.exit()\\n\\n    def cmb(n, r, mod):\\n        if ( r<0 or r>n ):\\n            return 0\\n        r = min(r, n-r)\\n        return g1[n] * g2[r] * g2[n-r] % mod\\n\\n    #\u51fa\u529b\u306e\u5236\u9650\\n    mod = 1000000007\\n    N = 10**6\\n    g1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\\n    g2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\\n    inverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\\n\\n    for i in range( 2, N + 1 ):\\n        g1.append( ( g1[-1] * i ) % mod )\\n        inverse.append( ( -inverse[mod % i] * (mod//i) ) % mod )\\n        g2.append( (g2[-1] * inverse[-1]) % mod )\\n\\n    a = cmb(x1+y1,y1,mod)\\n    print(a)\\n    \\nif __name__ == \"__main__\":\\n    main()", "target": "759", "substitutes": {"input": ["error", "RAW", "IN", "raw", "text", " output", "value", "reader", "request", "method", "argument", "qa", "ity", "enter", "command", "inside", "element", "entity", "load", "resource", "unknown", "context", "format", "interface", " inputs", "result", "comment", "speech", "instance", "inf", "empty", "array", "enum", "expression", "response", "image", "file", "current", "I", "exec", "child", "accept", "buffer", "ll", "row", "object", "initial", " Input", "json", "pull", "address", "output", "entry", "single", "data", "Input", "type", "xml", "select", "session", "keep", "inner", "submit", "filter", "source", "config", "form", "feed"], "H": ["F", "L", "V", "Q", "K", "h", "HC", "O", "P", "T", "C", "B", "D", "WH", "NH", "S", "A", "HE", "I", "Z", "HM", "CL", "HI", "U", "R", "M", "J", "N", "G", "RH", "NUM"], "W": ["F", "L", "V", "Q", "Width", "WE", "WR", "K", "SH", "O", "P", "T", "C", "B", "D", "WH", "Weight", "A", "w", "I", "We", "WS", "HI", "U", "R", "M", "N", "VW", "G", "Wh"], "num": ["min", "name", "unit", "loc", "code", " NUM", "init", "nm", "Num", "umi", "mem", "mon", "number", "nc", "im", "orig", "NM", "un", "NUM", "temp", "size", "nu", "index", "x", "norm", "mu", "w", "inc", "max", "uni", "m", "no", "dim", "np", "N", "gen", "id", "nb", "sum", "um", "offset"], "i": ["ib", "int", "mi", "p", "ai", "c", "h", "im", "z", "ind", "w", "I", "l", "u", "pi", "f", "io", "m", "xi", "ni", "ip", "v", "b", "il", "id", "li", "ii", "ti"], "j": ["gi", "ji", "ih", "k", "hn", "ai", "Num", " dj", " ni", "h", "y", "jj", "im", " vi", "jl", "z", "it", "d", " J", "jp", "jc", "xi", "ni", "ij", "J", "hm", "iw", "id"], "X": ["F", "PI", "ID", "YY", "E", "L", "V", "XM", "Q", "XX", "Width", "XP", "EX", "K", "ZX", "O", "P", "T", "C", "D", "IP", "WH", "ONE", "x", "A", "IX", "I", "IM", "TX", "Z", "U", "R", "M", "J", "XL", "N", "Xi", "G", "RH"], "Y": ["F", "YY", "L", "V", "Q", "MI", "y", " y", "O", "P", "T", "B", "C", "D", "x", "S", "A", "I", "IM", "MY", "Z", "IO", "HI", "U", "R", "J", "M", "N", "G"], "exist": ["loc", "missing", "sit", "integ", "create", "success", "lat", "destruct", "condition", "present", "sect", "circ", "cont", "left", "support", "zon", "size", "ex", "index", "diff", "ind", "inc", " existence", "accept", "concept", "object", "purpose", "ist", "null", "set", "fail", "existence", "dit", "match", "sequ", "include", "yet", "pot", "keep", "feat", "form", "existent", "existing", "front"], "x1": ["xone", "xOne", "XOne", " x2", "X0", " x0", "yOne", " xone", "w1", "wone", "x0", "x2", "X2", "y0", "X1", "yone", "cy1", "cyOne", "y2"], "y1": ["xOne", "xn", "zOne", " y2", "Y1", "yOne", "yn", "Y0", " yOne", "x0", "x2", " y0", "z1", "z2", "y0", "Yn", "Y2", " yn", "y2"], "n": ["min", "k", "a", "non", "p", "g", "c", "y", "o", "number", "pr", "h", "un", "rn", "ne", "z", "x", "w", "l", "u", "d", "max", "f", "m", "no", "R", "nr", "b", "v", "e", "N", "t"], "r": ["rh", "yr", "rr", "s", "a", "mr", "ur", "p", "rar", "g", "c", "err", "o", "h", "rd", "pr", "re", "rn", "hr", "z", "x", "ar", "w", "l", "rb", "d", "u", "q", "f", "sr", "m", "right", "rs", "rt", "br", "R", "nr", "b", "v", "e", "cr", "fr", "t", "ru", "er", "range", "nor"], "mod": ["min", "mode", "MOD", "rm", "method", "perm", "p", "im", "rep", "tr", "re", "cum", "reg", "temp", " Mod", "rand", "scale", "run", "od", "x", "comp", "module", "grad", "d", "max", "q", "row", "m", "comb", "fun", "rem", "mods", "debug", "order", "complex", "step", "rad", "Mod"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\n\\n\\ndef main():\\n    S = input()\\n    ans = 0\\n    for c in S:\\n        if c == '+': ans += 1\\n        else: ans -= 1\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "166", "substitutes": {"S": ["F", "ss", "s", "E", "L", "V", "H", "ins", "Q", "X", " s", "NS", "Si", "K", "SI", "ANS", "O", "SA", "P", "T", "C", "B", "D", "Sa", "A", "Sl", "I", "SS", "Z", "cs", "input", "U", "R", "Input", "M", "String", "N", "G", "System", "n"], "ans": ["ano", "s", "amp", "ents", "lan", "nas", "cas", "amps", "eps", "ams", "atan", "na", "ats", "aning", "anas", "AN", "ads", "ANS", "anes", "ane", "aces", "ann", "anon", "anc", "ani", "annot", "ays", "ana", "can", "nan", " means", "An", "ars", "args", "aned", "ace", "ons", "aus", "cs", "ants", "ns", "parser", "os", "reads", "san", "ANN", "ds", "ops", "an"], "c": ["s", "k", "spec", "a", "sc", "code", " comment", "g", "i", " ac", "o", "r", "nc", " i", "chain", "C", "lc", "uc", " C", "z", "unc", "w", "d", "ace", "f", "cs", "ac", "m", "dc", "ae", "ci", "ct", "space", "e", "bc", "cc", " n", "word", "cl", "abc", "enc", "n"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nS = readline().decode().rstrip()\\nN = len(S)\\nx,y = map(int,readline().split())\\nt_cnt = 0\\ncnt_x1 = 0\\ncnt_x2 = 0\\ncnt_y = 0\\nX = []\\nY = []\\nfor i in range(N):\\n    if S[i] == 'F':\\n        if t_cnt == 0:\\n            cnt_x1 += 1\\n        else:\\n            if t_cnt % 2 == 0:\\n                cnt_x2 += 1\\n            else:\\n                cnt_y += 1\\n    else:\\n        t_cnt += 1\\n        if cnt_x2 != 0:\\n            X.append(cnt_x2)\\n            cnt_x2 = 0\\n        if cnt_y != 0:\\n            Y.append(cnt_y)\\n            cnt_y = 0\\n            \\nif cnt_x2 != 0:\\n    X.append(cnt_x2)\\n    cnt_x2 = 0\\nif cnt_y != 0:\\n    Y.append(cnt_y)\\n    cnt_y = 0\\n\\nxN = len(X)\\nyN = len(Y)    \\nsumX = sum(X)\\nsumY = sum(Y)\\nx -= cnt_x1\\n\\nif sumX - x < 0 or (sumX - x) % 2 != 0:\\n    print('No')\\n    sys.exit()\\nelse:  \\n    xx = (sumX - x) // 2\\nif sumY - y < 0 or (sumY - y) % 2 != 0:\\n    print('No')\\n    sys.exit()\\nelse:  \\n    yy = (sumY - y) // 2\\n    \\ndp_x = [0]*(xx+1) \\ndp_x[0] = 1\\nfor i in range(xN):\\n    w = X[i]\\n    for j in range(xx,w-1,-1):\\n        dp_x[j] = dp_x[j] or dp_x[j-w]\\n        \\ndp_y = [0]*(yy+1) \\ndp_y[0] = 1\\nfor i in range(yN):\\n    w = Y[i]\\n    for j in range(yy,w-1,-1):\\n        dp_y[j] = dp_y[j] or dp_y[j-w]\\n\\nif dp_x[xx] and dp_y[yy]:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "753", "substitutes": {}}
{"code": "import math\\nX=int(input())\\n\\ndef is_prime(x):\\n    n = math.floor(math.sqrt(x))\\n    for i in range(2, n+1):\\n        if x % i == 0:\\n            return False\\n    return True\\n\\ni = X\\nwhile True:\\n    if is_prime(i):\\n        print(i)\\n        break\\n    i += 1", "target": "609", "substitutes": {"X": ["F", "L", "XXXX", "V", "H", "Q", "XX", "Y", "xx", "K", "O", "P", "T", "C", "Int", "S", "A", "now", "XXX", "I", "max", "Z", "Array", "xi", "XY", "U", "R", "M", "N", "G"], "x": ["s", "int", "python", "p", "xxxxxxxx", "exp", "tx", "xs", "c", "plus", "xx", "fx", "y", "rx", "h", "number", "px", "ix", "xa", "any", "z", "xt", "ex", "index", "xxxx", "xxx", "w", "cross", "u", "d", "q", "f", "ax", "m", "xi", "mx", "input", "data", "xp", "xml", "t", "e", "xy", "xc", "test"], "n": [" N", "k", "p", "g", "c", "y", "o", "nc", "num", "h", "r", "size", "nu", "ne", "z", "nan", "sn", "w", "conn", "l", "u", "d", "nt", "f", "j", "m", "ns", "b", "e", "N", "t", "nb"], "i": ["gi", "ji", "ui", "a", "ie", "int", "ei", "chi", "qi", "p", "phi", "ai", "init", "c", " I", "oi", "y", "o", "ix", "ini", "iu", "slice", "ti", "z", "si", "index", "yi", "ind", "start", "I", "it", "l", "u", "pi", "d", "uri", "fi", "j", "f", "io", "m", "xi", "ri", "di", "ci", "ij", "ip", "v", "b", "e", "t", "info", "zi", "id", "multi", "li", "ii", "bi"]}}
{"code": "from subprocess import *\\ncall(('pypy3','-c',\"\"\"\\nimport sys\\ndef input(): return sys.stdin.readline().rstrip()\\nfrom collections import deque\\ndef main():\\n    h,w=map(int,input().split())\\n    B=[[-1]*w for _ in range(h)]\\n    ans=0\\n    que=deque()\\n    for i in range(h):\\n        s=input()\\n        for j,ss in enumerate(s):\\n            if ss==\"#\":\\n                que.append((i,j))\\n                B[i][j]=0\\n    while que:\\n        qr,qc=que.popleft()\\n        for r,c in ((qr+1,qc),(qr-1,qc),(qr,qc+1),(qr,qc-1)):\\n            if r>=0 and r<=h-1 and c>=0 and c<=w-1 and B[r][c]==-1:\\n                B[r][c]=B[qr][qc]+1\\n                que.append((r,c))\\n    print(max([max(b) for b in B]))\\n\\nif __name__=='__main__':\\n    main()\\n\"\"\"))", "target": "657", "substitutes": {}}
{"code": "n, m = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nmaxnum = [-1] * (n+1)\\ncost = [0,2,5,5,4,5,6,3,7,6]\\nmaxnum[0] = 0\\nfor i in range(n+1):\\n    for num in a:\\n        if ( i+cost[num] < n+1 ):\\n            maxnum[i+cost[num]] = max(maxnum[i+cost[num]], num + maxnum[i]*10)\\n\\nprint(maxnum[n])", "target": "712", "substitutes": {"n": ["k", "mn", "p", "g", "c", "o", "y", "nc", "net", "un", "size", "ne", "nu", "z", "x", "sn", "w", "l", "u", "d", "nn", "cn", "f", "j", "network", "ns", "ni", "nr", "b", "v", "len", "e", "N", "t", "pn", "nb"], "m": ["k", "mi", "p", "g", "c", "mult", "o", "y", "r", "number", "h", "z", "mu", "w", "l", "u", "d", "f", "man", "am", "M", "v", "b", "e", "mm", "mc", "month", "um"], "a": ["aa", "s", "sta", "at", "ma", "p", "na", "qa", "ai", "c", "ama", "la", "mA", "ab", "array", "ana", "da", "A", "ia", "u", "d", "aaa", "f", "sa", "ac", "ga", "area", "aj", "am", "ae", "oa", "alpha", "b", "ea", "an", "ad"], "maxnum": ["sumnumber", "catsum", "maxn", "minnum", "sumn", "catn", "axname", "catchnumber", "MaxNum", "catchNum", "Maxnum", "limitno", "lastnumber", "maximumnumber", "lastn", "limitnumber", "firstnum", "Maxno", " maxnu", "firstname", "axn", "limitnum", " maxnumber", "lastnum", "catnumber", "minnu", "sumnu", "maximumnu", "axnum", "lastsum", "catchcon", "catnum", "maximumnum", "maxnumber", "minnumber", "catchnu", "catchn", " maxname", "sumnum", "maxNum", "maxcon", " maxsum", "Maxnumber", "maxsum", "catchnum", " maxcon", " maxNum", " maxn", "maxno", "maxname", "firstnumber", "firstn", "limitn", "maxnu", "maximumcon", " maxno", "minn", "axnumber", "Maxn"], "cost": ["min", "aa", "k", "ack", "end", "call", "value", "loc", "risk", "code", "product", "level", "power", "g", "c", "price", "r", "number", "use", "weight", "C", "div", "time", "rule", "x", "Cost", "clean", "start", "tax", "child", "CO", "ace", "max", "doc", "f", "position", "ac", "style", "dc", "co", "rank", "shape", "fee", "data", "length", "key", "order", "count", "cc", "grade", "id", "cover", "contact", "sum", "ad"], "i": ["gi", "k", "ui", "ie", "int", "qi", "p", "ai", "c", "oi", "y", "o", "gu", "ini", "ix", "iu", "nu", "ani", "z", "mini", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "fi", "u", "d", "pi", "ki", "j", "f", "io", "xi", "di", "ni", "ip", "ci", "b", "inn", "e", "il", "info", "zi", "id", "multi", "li", "ii", "bi", "ti"], "num": ["gi", "unit", "ui", "individual", "int", "mn", "dom", "ten", "non", "mi", "p", "init", " number", "Num", "nm", "umi", "c", "o", "number", "nc", "instance", "un", "temp", "nu", "nom", " fu", "index", "x", "ident", "fn", "mu", "ind", " il", "om", "con", "iti", "u", "tri", "max", "uni", "f", "nam", "comb", "du", "tu", "um", "parent", "su", "no", "b", " ii", "np", "bc", "off", "family", "N", "multi", "id", "hom", "inner", "ii", "ul", "uu", "nb", "NUM", "abi"]}}
{"code": "def resolve():\\n    BTC = 380000.0\\n    N = int(input())\\n    sumA = 0\\n    for _ in range(N):\\n        x, u = input().split()\\n        if u == \"JPY\":\\n            sumA += int(x)\\n        else:\\n            sumA += float(x) * BTC\\n    print(sumA)\\n\\n\\nresolve()\\n", "target": "270", "substitutes": {"BTC": ["PUT", "Q", "X", "Num", "DC", "UN", "Bitcoin", "ST", "FF", "P", "T", "Balance", "Amount", "tc", "NY", "MIN", "NT", "HK", "NG", "UT", "TX", "Ni", "TW", "ETF", "BIT", "UTC", "CL", "TC", "U", "NZ", "CC", "TF", "OUT", "USD", "FFFF", "NUM"], "N": ["F", "MN", "L", "NO", "V", "Q", "X", "Y", "Size", "NE", "K", "NM", "O", "P", "T", "C", "B", "D", "Ne", "S", "W", "NY", "I", "No", "Ni", "Z", "Ns", "U", "R", "M", "NB", " n", "G", "KN", "NA", "n"], "sumA": ["missP", "missa", "sumAn", "cumA", " sumAn", "SumB", "meanX", "cumAn", "missX", "sumP", "meanA", "fata", "splita", "Suma", " sumAr", "cuma", "cumB", " sumP", "suma", "meanP", " sumX", "splitA", "missA", "missAr", "missB", "splitB", "SumA", "fatAn", "fatA", "meanB", "sumAr", "sumB", " sumB", "sumX", "groupA", "groupa", "fatB", " suma", "groupAr"], "_": [" data", " block", " function", " g", " z", " ip", " time", " __", " new", " un", " q", " the", " mem", " j", " we", " self"], "x": ["k", "a", "int", "sex", "X", "p", "tx", "na", "xs", "c", "g", "i", "xx", "fx", "y", "h", "rx", "ix", "px", "number", "z", "ex", "index", "xxx", "w", "l", "d", "f", "m", "xi", "data", "xe", "v", "b", "e", "t", "xes", "test", "n"], "u": ["s", "ui", "a", "uv", "p", "g", "c", "i", "y", "o", "r", "h", "un", "Lu", "iu", "uid", "nu", "uc", "cu", "w", "l", "d", "q", "uni", "f", "m", "up", "tu", "uit", "us", "U", "su", "lu", "v", "b", "e", "ul", "ru", "uu", "n"]}}
{"code": "import heapq\\n\\nN, M = [int(x) for x in input().split()]\\nA = [-int(x) for x in input().split()]\\n\\nheapq.heapify(A)\\n\\nfor i in range(M):\\n    a = heapq.heappop(A)\\n    heapq.heappush(A, -((-a)//2))\\n\\nans = -sum(A)\\n\\nprint(ans)", "target": "72", "substitutes": {"N": [" Q", "L", " L", "H", " O", " I", " B", "Na", "O", "P", "B", "C", " C", " H", "I", " NA", " E", "Array", " self", " n", " Ne", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "MA", "Y", "MI", "K", "MX", "DM", "O", "MON", "P", "B", "T", "LM", "D", "C", "MD", "I", "MB", "Ma", "MH", "m", "U", "R", "MS", "MF", "MU", "G", "MO"], "x": ["dx", "k", "full", "int", "sex", "X", "p", "na", "xs", "c", "xx", "fx", "y", "rx", "h", "ix", "px", "num", "work", "any", "z", "xt", "ex", "index", "xxxx", "w", "u", "max", "hex", "q", "page", "f", "ax", "xi", "ux", "input", "oint", "xp", "string", "e", "t", "xes", "xy", "pe", "id", "word", "bit", "draw", "n"], "A": ["GA", "E", "Ca", "L", "At", "New", "V", "All", "H", "Q", "X", "MA", "Y", "AS", "AP", "IA", "LA", "EA", "K", "Na", "Ha", "AN", "AH", "AM", "AB", "P", "B", "AU", "C", "As", "D", "Ar", "mA", "API", "au", "AA", "Empty", "AC", "Alpha", "S", "OA", "W", "I", "Ab", "Ma", "Array", "CA", "U", "AF", "alpha", "an", "Am", "Ang", "An", "App"], "i": ["p", "ai", "c", " I", "y", "h", "ix", "ime", "iu", "z", "ind", "I", "u", "d", "ace", "io", "j", "f", "ac", "xi", "ni", "ip", " ii", "e", "id", "bit", "ii", "ti"], "a": ["aa", "ao", "va", "ma", "p", "ai", "aw", "fa", "AN", "la", "ba", "mA", "au", "AA", "ana", "pa", "ar", "af", "args", "aaa", "ca", "f", "sa", "ac", "ga", "m", "area", "aux", "aj", "am", "ae", "alpha", "b", "all", "an"], "ans": ["ents", "lan", "cas", "nas", "ras", "atan", "ai", "Ann", "fa", "aning", "anas", "AN", "ANS", "ane", "aces", "ann", "anon", "ani", "anc", "au", "ays", "ana", "can", "outs", "An", "af", "anch", "anus", "aned", "nn", "ons", "aus", "anan", "sk", "ants", "ns", "ran", "plan", "an", "ins"]}}
{"code": "while True:\\n    h, w = map(int, input().split())\\n    if h==w==0:\\n        break\\n\\n    for y in range(h):\\n        for x in range(w):\\n            print('#.'[(x+y)%2], end='')\\n        print()\\n    print()\\n", "target": "451", "substitutes": {"h": ["rh", "hs", "ih", "k", "end", "sh", "H", "p", "g", "c", "i", "oh", "gh", "r", "o", "num", "ht", "ph", "z", "ah", "hh", "l", "u", "d", "q", "f", "m", "hi", "b", "v", "t", "e", "ha", "uh", "hm", "n"], "w": ["s", "k", "wa", "end", "sh", "wt", "win", "p", "g", "c", "aw", "i", "width", "o", "num", "we", "wh", "wb", "weight", "z", "ew", "W", "kw", "l", "wx", "u", "d", "max", "q", "nw", "sw", "ww", "ws", "wl", "wd", "b", "v", "ow", "e", "t", "iw", "n"], "y": ["yd", "ady", "dy", "ye", "gy", "p", "Y", "c", "i", "xx", "o", "year", "z", "yo", "yi", "cy", "wy", "ny", "yt", "u", "d", "j", "sy", "m", "yy", "ya", "oy", "yl", "v", "b", "e", "t", "xy", "col", "id", "vy", "py", "ey", "n"], "x": ["dx", "k", "ye", "X", "p", "Y", "c", "yx", "xx", "i", "rx", "ix", "pos", "num", "z", "ex", "index", "xxx", "wx", "u", "q", "j", "f", "ax", "m", "xi", "yy", "ya", "oy", "hi", "yl", "v", "e", "xy", "col", "xc", "n"]}}
{"code": "n = int(input())\\nnum = n\\ntotal_num = 0\\n\\nwhile num != 0:\\n    total_num += num % 10\\n    num = num // 10\\n\\nif n % total_num == 0:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "161", "substitutes": {"n": ["s", "k", "a", "p", "na", "g", "c", "nm", "i", "o", "number", "nc", "r", "net", "y", "un", "en", "ne", "z", "fn", "x", "sn", "l", "u", "d", "nn", "q", "nt", "f", "j", "ln", "m", "ns", "no", "ni", "b", "t", "N", "e", "nit", "nb", "nor"], "num": ["k", "unit", "loc", "end", "digit", "mn", "p", "na", "nm", "Num", "i", "mult", "c", "mon", "number", "result", "pos", "NUM", "iter", "split", "temp", "nom", "nu", "div", "index", "fn", "mu", "inc", "start", "om", "con", "u", "d", "nn", "uni", "out", "f", "page", "m", "nam", "term", "no", "bin", "dim", "b", "count", "off", "col", "multi", "month", "ctr", "nb", "sum", "um", "total"], "total_num": [" total_number", "total_sum", " total_count", "total_mon", "total64num", " total_mon", "total64number", "total_n", "total64sum", " total_sum", "total64count", "total_count", " total_n", "total_number"]}}
{"code": "import math\\na, b, h, m = map(int, input().split())\\nang_a = (360 * h / 12) + (0.5 * m)\\nang_b = 360 * m / 60\\nang = abs(ang_a - ang_b if ang_a > ang_b else ang_b - ang_a)\\nans = math.sqrt((a ** 2 + b ** 2) - (2*a*b*math.cos(math.radians(ang))))\\nprint(ans)\\n", "target": "290", "substitutes": {"a": ["aa", "s", "wa", "va", "ma", "p", "ai", "g", "aw", "c", "i", "r", "y", "ay", "la", "ba", "ab", "au", "da", "A", "ar", "w", "ia", "l", "u", "d", "f", "ax", "sa", "ac", "ga", "asa", "age", "am", "ae", "oa", "alpha", "e", "an", "ad", "n"], "b": ["aa", "be", "fb", "p", "bs", "g", "c", "i", "y", "o", "r", "mb", "B", "ba", "ab", "sb", "l", "bh", "bb", "bf", "d", "rb", "u", "bd", "f", "j", "br", "db", "v", "e", "nb", "lb", "bi", "n"], "h": ["rh", "k", "sh", "H", "p", "g", "c", "i", "gh", "y", "o", "ph", "z", "x", "w", "hh", "l", "bh", "u", "d", "q", "f", "hi", "v", "ha", "t", "e", "hm", "n"], "m": ["s", "k", "p", "ms", "g", "c", "i", "y", "r", "o", "md", "z", "x", "mu", "w", "cm", "l", "u", "d", "f", "j", "bm", "M", "v", "e", "mm", "hm", "n"], "ang_a": ["ang_asa", "ang_la", "angular05ad", "ang05asa", "angular_asa", "ang0b", "ang0a", "lang_ai", "ang05ad", "lang_ab", "angular05a", "ang9au", "ang0la", "lang_b", "ang00a", "ang0ab", "ang9ai", "ang00b", "lang_la", "ang05a", "ang_au", "ang_ad", "angular_a", "ang00ai", "ang05b", "ang_ai", "angular_ad", "ang9a", "ang_p", "ang_auto", "angular05asa", "angular_b", "lang_a", "lang_au", "angular05b", "lang_p", "ang9b", "lang_auto", "ang00au", "ang_ab"], "ang_b": ["ang_aa", "ang11a", "ang00b", "lang_bar", "ang11aa", "ang00h", "ang6aa", "ang6b", "ang_c", "ang_h", "lang_ab", "ang_ad", "ang_ab", "ang00ad", "ang2bar", "ang11l", "lang_b", "lang_c", "lang_ad", "ang00a", "lang_n", "ang1ab", "ang2b", "ang11b", "ang1a", "ang6l", "ang2c", "lang_h", "ang_bar", "ang1n", "lang_aa", "ang_n", "ang1b", "ang6a", "lang_l", "lang_a", "ang2a", "ang_l"], "ang": ["angular", "rh", "s", "amp", "mad", " Ang", "ma", "ag", "eng", "atan", "na", "ai", "g", "var", "ann", "ani", "ng", "hang", "au", "tan", "lang", "anch", "ia", "ANG", "lon", "bb", "mag", "yang", "sin", "angle", "ac", "ga", "ns", "am", "alpha", "complex", "Ang", "range", "angs", "ad", "rad"], "ans": ["lan", "ras", "nas", "cas", "ams", "atan", "na", "ai", "gan", "ats", "regular", "aning", "anas", "AN", "ANS", "anes", "ann", "ani", "anc", "ana", "can", " means", "nan", "An", "ars", "lang", "ros", "anus", "aned", "nn", "aus", "anan", "ln", "sk", "ants", "ns", "san", "ls", "plan", "angs", "an"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nmod=10**9+7\\ncnt=[0]*60\\nfor elem in a:\\n    for i in range(60):\\n        cnt[i]+=(elem>>i)%2\\nans=0\\nfor i in range(60):\\n    ans+=((cnt[i]*(n-cnt[i]))<<i)%mod\\nprint(ans%mod)", "target": "353", "substitutes": {"n": ["s", "k", "p", "na", "ai", "c", "g", "o", "y", "nc", "en", "num", "r", "ne", "z", "fn", "x", "nan", "w", "l", "u", "d", "nn", "j", "f", "m", "ac", "ns", "nl", "nr", "b", "len", "e", "N", "count", "nb", "an"], "a": ["aa", "s", "ma", "p", "na", "ai", "c", "fa", "ab", "au", "array", "ana", "index", "A", "ar", "af", "ia", "aaa", "ca", "sa", " A", "m", "ac", "area", "am", "aj", "ae", "alpha", "b", "ea", "e", "an", "ad"], "mod": ["min", "mode", "change", "mad", "arm", "dig", "MOD", "perm", "cond", "exp", "ai", "ms", "c", "mult", "post", "loop", "ver", "md", "cum", "reg", "rot", " Mod", "div", "od", "scale", "asm", "sim", "aug", "comp", "module", "oct", "run", "bug", "cm", "patch", "max", "row", "m", "fun", "man", "aj", "am", "check", "bin", "mods", "ow", "complex", "mac", "sem", "add", "multi", "step", "form", "ang", "ad", "rad", "Mod"], "cnt": ["cNT", "scrt", "hrt", " cpt", "cpt", "CNT", "hno", "cnc", "lcpt", "scNT", " crt", " cNT", " cct", "cct", "crt", "rcnt", " cnc", "acnt", "Cnt", " cno", "ecnn", "hnt", "scno", "cgt", "scgt", "ecnt", "acNT", " cgt", "scnt", "rcrt", "hgt", "ecpt", "lcnn", "Cnn", "scnc", "cno", "rcNT", "acnc", "lcnt", "lcct", "Crt", "cnn", "ecct", "rcnn", "acrt", " cnn"], "elem": ["eelements", " eighth", "eelement", "elements", " elems", "ielems", "ielem", "Elev", " elev", " eelement", " elelements", "elev", "elems", "ieighth", "Eighth", "Elems", " elements", "eeelement", " elelem", " elelev", "ielev", "eelev", "eighth", "Elem", " eleelement", "eelem"], "i": ["gi", "s", "ui", "vi", "ei", "int", "ie", "qi", "mi", "p", "go", "ai", "c", "oi", "o", "y", "ini", "ix", "iq", "iu", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", "io", "m", "xi", "ori", "di", "ri", "ci", "ij", "v", "b", "e", "info", "id", "li", "ii", "bi", "ip"], "ans": ["ano", "aid", "ents", "lan", "nas", "ras", "amps", "na", "ai", "gan", "ats", "ions", "aning", "anas", "AN", "ANS", "any", "aces", "ann", "anon", "ani", "anc", "ana", "ays", "ania", "can", "nan", "An", "ars", "ia", "aned", "anz", "ace", "ons", "aus", "anne", "sa", "ants", "ns", "ran", "ians", "an", "ins"]}}
{"code": "n = int(input())\\nprint('ACL' * n)\\n", "target": "533", "substitutes": {"n": ["name", "s", "span", "p", "init", "g", "c", "i", "o", "number", "num", "log", "sign", "ne", "z", "fn", "x", "node", "adj", "l", "d", "nt", "j", "network", "f", "m", "none", "ns", "no", "b", "v", "len", "e", "N", "nb"]}}
{"code": "import sys\\ntarget = input()\\ndata = sys.stdin.read()\\n\\nprint(\"%d\" %(data.lower().split().count(target.lower())))\\n", "target": "142", "substitutes": {"target": ["error", "name", "unit", "value", "token", "int", "python", "pointer", "prop", "event", "arg", "method", "host", "result", "tag", "iter", "proc", "component", "array", "arget", "index", "module", "action", " Target", "current", "version", "buffer", "label", "cmd", "object", "proxy", "function", "option", "output", "input", "parent", "list", "match", "path", "type", "key", "project", "source", "Target", "update"], "data": ["error", "name", "raw", "text", "value", "str", "reader", "success", "dat", "result", "results", "DATA", "content", "empty", "array", "response", "image", "memory", "file", "body", "window", "start", "exec", "ata", "args", "connection", "buffer", "Data", "json", "output", "input", "bin", "message", "source", "next", "feed", "info"]}}
{"code": "N=int(input())\\nA=list(map(int,input().split()))\\nB=list(map(int,input().split()))\\nans=min(A[0],B[0])\\nB[0]-=ans\\nfor i in range(N-1):\\n    score=min(A[i+1],B[i]+B[i+1])\\n    ans+=score\\n    B[i+1]-=max(0,score-B[i])\\nprint(ans+min(B[N-1],A[N]))", "target": "530", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "Num", "NS", "NE", "K", "O", "P", "C", "T", "D", "Len", "Ne", "S", "W", "I", "No", "NT", "Node", "Ni", "Z", "Ns", "U", "R", "M", "J", "NB", " n", "NA", "n"], "A": ["F", "AD", "GA", "a", "L", "Az", "AI", "X", "AS", "Y", "MA", "AP", "IA", "LA", "AR", "EA", "AST", "Av", "AM", "O", "AH", "P", "C", "T", "AC", "As", "D", "Ar", "API", "AU", "AA", "S", "I", "Ab", "PA", "Auth", "AB", "CA", "Art", "U", "AF", "R", "M", "G", "HA"], "B": ["F", "E", "EB", "L", "LB", "V", "H", "Q", "X", "Y", "UB", "AP", "IB", "DB", "BA", "AB", "O", "P", "C", "T", "D", "SB", " Y", "Bal", "BB", "BC", "BI", "S", "TB", "BF", "W", "BD", "I", "RB", "MB", "BE", "Z", "BL", "OB", "WB", "Beta", "U", "GB", "R", "M", "J", "b", "NB", "QB", "Other", "G", "BS", " b", "Bs"], "ans": ["ss", "s", "a", "ents", "Score", "lan", "NN", "span", "offs", "cas", "amps", "eps", "na", "nas", "ai", "ats", "Na", "anas", "AN", "CNN", "ANS", "ks", "sign", "mean", "ann", "es", "ani", "anc", "abilities", "au", "ana", "errors", "can", "x", " means", "An", "S", "nan", "outs", "anks", "aned", "ches", "ons", "ids", "sk", "cs", "ants", "ns", "man", "rank", "scan", "ases", "os", "ls", "all", "cons", "ds", "NA", "oss", "an", "n", "best", "ad", "ins"], "i": ["gi", "ji", "k", "ui", "a", "ie", "int", "qi", "mi", "p", "init", "ai", "c", "h", "y", "ix", "ini", "iq", "iu", "ti", "z", "si", "eni", "index", "x", "ind", "I", "uri", "l", "u", "d", "pi", "q", "ki", "j", "io", "f", "m", "xi", "ori", "di", "ri", "ni", "ci", "v", "b", "e", "multi", "id", "li", "ii", "n", "bi", "ip"], "score": ["error", "name", "value", "sc", "nice", "Score", "span", "p", "rate", "y", "case", "number", "en", "sd", "beta", "weight", "une", "mean", "size", "z", "cost", "si", "scale", "winner", "start", " scores", "f", "ignore", "style", "core", "rank", "scoring", "length", "match", "len", "feature", "base", "confidence", "count", "grade", "zi", "sum"]}}
{"code": "import sys\\nimport collections\\n\\n\\ndef solve():\\n    readline = sys.stdin.buffer.readline\\n    mod = 10 ** 9 + 7\\n    n = int(readline())\\n    a = list(map(int, readline().split()))\\n    d = collections.defaultdict(int)\\n    d[-1] = 3\\n    mt = 1\\n    for v in a:\\n        mt *= d[v-1]\\n        mt %= mod\\n        d[v-1] -= 1\\n        d[v] += 1\\n    print(mt)\\n\\n\\nif __name__ == '__main__':\\n    solve()\\n", "target": "560", "substitutes": {"readline": ["playlines", "readinglist", "readingLINE", "readinglines", "loadlist", "loadlines", "readlink", " readpass", "ReadLine", "readerlines", "loadLine", "readLine", " readfile", "Readline", "readlist", "Readfile", "loadline", "readpass", "readlines", "loadfile", "writepass", "writelines", "Readlines", "readingline", "readerline", "Readlist", "readerpass", "writeline", "readerlink", "readingfile", " readLINE", "readLINE", " readlines", "writelink", "playline", " readlink", " readLine", "readfile", "ReadLINE", "playLine", "readingLine"], "mod": [" MOD", "mode", "spec", "str", "MOD", "ed", "ms", "c", "r", " mode", "im", "pos", "size", " Mod", "time", "module", "max", "f", "m", "function", " module", "pad", "type", "string", "mods", "len", "count", "info", "val", " magic", "Mod"], "n": [" N", "s", "mn", "p", "g", "nm", "i", " ni", "o", "nc", "en", " c", " nm", "z", " fn", "l", " np", "nt", " m", "m", "ns", "nl", " ns", "N", " l", "nb", " na"], "a": ["aa", "s", "sta", "at", "va", "ma", "p", "na", "ai", "c", "i", "eta", "o", "this", "au", "array", "da", "index", "A", "af", "w", "args", "f", "sa", " A", "m", "ga", "area", "am", "data", "alpha", "b", "ea", "t", "ha", "all", "e", "ada", "an", "ad"], "d": ["s", " p", " data", "dd", "mad", " df", " da", "ed", "fd", "p", "nd", "std", "c", "i", "dat", "o", "dict", "r", "y", "sd", "md", "ded", "D", "z", " dd", "od", "da", "dm", " done", " db", " delta", "daily", "l", "u", "do", " sd", " std", " prod", "dt", "f", "j", "m", " od", "dc", "di", "data", "db", "dim", "b", "ld", "t", "e", "pd", "ds", " D", " do", "ad"], "mt": ["mode", "dd", "mad", "mr", "int", "mn", "wt", "ma", "tt", "mi", "p", "ms", "i", "mult", "tp", "format", "tr", "md", "mb", "td", "pt", "mp", "time", "fm", "module", "dm", "mu", "mk", "phase", "cm", "meta", "nt", "dt", "mg", "lag", "gt", "m", "sm", "data", "ct", "M", "vt", "len", "wd", "t", "lt", "mm", "MT", "count", "pd", "mot", "frequency", "offset", "pc"], "v": ["s", "k", "vi", "value", "int", "uv", "code", "V", "p", "g", "c", "i", "var", "o", "h", "ver", "lv", "vs", "z", "vp", "x", "nv", "av", "w", "version", "l", "u", "q", "page", "f", "j", "m", "vv", "self", "vt", "b", "t", "e", "val", "sv", "vd"]}}
{"code": "answer = 0\\nfor candy in range(int(input()) + 1):\\n    answer += candy\\nprint(answer)", "target": "56", "substitutes": {"answer": ["text", "value", "eden", "token", "python", "code", " answers", "reply", "margin", "number", "music", "result", "evidence", "username", "oodle", "content", "empty", "size", "ani", "array", "eni", "cost", "response", "cache", "equ", "ew", "cash", "ee", "accept", "ace", "score", "address", "output", "amount", "duration", "input", "data", "average", "alpha", "audio", "answered", "question", "fruit", "ell", "message", "grade", "energy", "word", "next", "activity", "draw", "Answer", "offset"], "candy": ["cuzzle", " coodle", "ucuzzle", "lcoodle", "lcummy", "calls", "ciancel", "ciuzzle", "caddy", "ucandy", "Candy", "mancel", "cancel", "malls", "muzzle", "Coodle", "cummy", "Cummy", "lcandy", "lcaddy", "Caddy", "ucalls", "ucancel", "cialls", " caddy", "ciandy", "mandy", " cummy", "coodle"]}}
{"code": "from sys import stdin\\nrs = lambda : stdin.readline().strip()\\nri = lambda : int(rs())\\nril = lambda : list(map(int, rs().split()))\\n\\ndef main():\\n    N = ri()\\n    a = ril()\\n    print(max(a) - min(a))\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "447", "substitutes": {"rs": ["rh", "rr", "ris", "Rs", "spec", "mr", "ras", " repl", " rc", "RC", "arr", "repl", "xs", "rows", "rings", " ris", " pars", "r", "rd", "rx", "RR", " RS", " hrs", " rm", " sr", "ring", " ir", "ars", "ros", "RS", " Rs", "runs", "src", "rb", " rows", "ra", "rip", "yrs", "rc", "sr", "dr", "rl", "rt", " ins", "R", "rss", "ls", "ruby", "rys", "res", "ins"], "ri": ["RI", "ris", "iri", "mi", "ai", "stri", "i", "rx", "rd", "ini", "lo", "ro", "ti", "ani", "rid", "si", "rob", "ar", "atri", "uri", "tri", "ari", "ra", "ki", "io", "ir", "rl", "xi", "rin", "rt", "di", "ni", "ci", "hi", "nr", "zi", "udi", "li", "rio", "ori"], "ril": ["rh", "roman", "iri", "arin", "lor", "ila", "ur", "rir", "roc", "rd", "cue", "r", "rf", "eor", "rn", "rise", "rill", "irc", "rocal", "rid", "aug", "rob", "rb", "isol", "rils", "nir", "iron", "ill", "ir", "dr", "rl", "rin", "igl", "rg", "rt", "vale", "lore", "rock", "fr", "rio", "rom"], "N": ["F", "RI", "L", "X", "na", "Num", "o", "number", "Na", "num", "O", "B", "C", "D", "ro", "nu", "ne", "S", "A", "ar", "I", "nn", "no", "R", "ni", "M", " n", "n"], "a": ["min", "aa", "s", "int", "va", "p", "ai", "c", "i", "fa", "o", "y", "r", "la", "ba", "mA", "au", "array", "ana", "da", "x", "A", "ar", "af", "w", "ata", "args", "u", "d", "max", "f", "sa", "m", "ac", "area", "aux", "am", "aj", "ae", "data", "alpha", "abs", "b", "ea", "an", "n"]}}
{"code": "n, m = map(int, input().split())\\nK = [0]*m\\nS = [[] for _ in range(m)]\\nfor i in range(m):\\n    K[i], *S[i] = map(lambda x:int(x)-1, input().split())\\n    K[i] += 1\\nP = list(map(int, input().split()))\\n\\nans = 0\\nfor i in range(pow(2,n)):\\n    B = bin(i)[2:].zfill(n)\\n    D = {j:True if b=='1' else False for j,b in enumerate(B)}\\n    _P = []\\n    for j,s in enumerate(S):\\n        _P.append(sum(D[_s] for _s in s)%2 == P[j])\\n    if all(_P):\\n        ans += 1\\nprint(ans)", "target": "546", "substitutes": {"n": ["k", "mn", "p", "g", "c", "nm", "y", "o", "r", "nc", "num", "net", "size", "z", "x", "nan", "sn", "l", "u", "d", "nn", "f", "Ns", "ns", "ni", "M", "v", "len", "t", "N", "e", "nb"], "m": ["min", "k", "mn", "p", "ms", "g", "c", "y", "o", "r", "h", "num", "z", "mini", "x", "mu", "w", "l", "d", "max", "f", "M", "v", "dim", "e", "t", "mm", "hm", "mc", "range"], "K": ["F", "Power", "k", "Ke", "L", "V", "Max", "H", "Q", "X", "Y", "KE", "Sk", " k", "T", "C", "SK", "KS", "KC", "Ch", "Z", "KR", "PK", "Mask", "U", "M", "J", "N", "G", "Work", "Key"], "S": ["F", "E", "L", "V", "H", "Es", "Q", "X", "SE", "SR", "NS", "Si", "PS", "SH", "SI", "Su", "O", "T", "C", "Ps", "A", "W", "Sl", "I", "SS", "Z", "Ns", "POS", "U", "R", "M", "MS", "J", "SP", "N", "G", "SU"], "_": ["k", " p", "p", "num", "x", "all"], "i": ["gi", "k", "ui", "a", "int", "qi", "mi", "p", "c", "o", "y", "h", "im", "iu", "z", "si", "index", "x", "w", "ind", "I", "l", "u", "d", "pi", "f", "io", "xi", "di", "ni", "ip", "ci", "v", "e", "t", "id", "li", "ii", "bi"], "P": ["F", " p", "E", "TP", "L", "V", "H", "Q", "X", "p", "Y", "PS", "LP", "O", "T", "C", "NP", "Ps", "A", "I", "PA", "PK", "U", "R", "M", "J", "SP", "N", "G"], "ans": ["a", "ents", "lan", "span", "nas", "cas", "eps", "amps", "ams", "na", "offs", "ai", "AN", "ANS", "anes", "ks", "asts", "mean", "ann", "ani", "anc", "ays", "ana", "can", "nan", "A", "ars", "args", "aned", "nn", "ons", "ids", "aus", "leans", "sk", "cs", "ens", "ants", "ns", "ases", "no", "os", "ni", "actions", "cons", "ds", "oss", "an", "ins"], "B": ["F", "E", "EB", "L", "V", "X", "PB", "DB", "BA", "O", "C", "T", "SB", "BG", "BB", "BC", "BI", "A", "W", "I", "OB", "WB", "R", "M", "J", "NB", "N", "G", "BF", "Bs"], "D": ["E", "DS", "L", "V", "Q", "DH", "X", "DC", "DM", "DE", "DO", "DB", "O", "C", "T", "MD", "DD", "PD", "JD", "LD", "Dou", "DT", "A", "BD", "I", "CD", "Ds", "d", "Do", "DP", "DF", "Dist", "M", "J", "N", "DL", "G", "DI", "DN"], "j": ["ji", "name", "k", "a", "ie", "ja", "p", "jen", "ai", " dj", "jo", "o", "r", "y", "jj", "dj", "el", "jl", "z", "je", "si", "on", "jet", "x", "ind", "adj", "obj", "l", "u", "d", "uj", "q", "js", "jp", "f", "jc", "note", "aj", "ij", "J", "key", "v", "bj", "e", "kj", "li"], "b": ["k", "a", "ib", "p", "bp", "bs", "g", "c", "y", "r", "h", "num", "beta", "ba", "ab", "z", "bl", "w", "sb", "l", "u", "d", "f", "br", "bin", "v", "e", "abc", "nb", "bi"], "_P": [" _V", "JK", "_V", "Jp", "JE", "_E", " _p", "_K", " _M", " _D", "_p", " _K", "JD", "PoolP", " _E", "PoolD", "_M", "Poolp", "JV", "_D", "PoolE", "JP"], "s": ["ss", "k", "sh", "a", "ed", "p", "ps", "g", "c", "ions", "y", "sl", "h", "r", "ks", "sp", "z", "si", "sn", "w", "obj", "l", "lines", "u", "d", "ches", "f", "sk", "sa", "ns", "v", "e", "t", "id", "sv"], "_s": ["childu", "_g", " _c", "_u", "childd", " _g", "childS", "_f", "_c", "childs", "_S", " _d", " _u", " _f", " _S", "_d"]}}
{"code": "#c = [[0 for i in range(3)] for i in range[3]];\\nc = [[0,0,0],[0,0,0],[0,0,0]];\\nc[0] = [int(x) for x in input().split()];\\nc[1] = [int(x) for x in input().split()];\\nc[2] = [int(x) for x in input().split()];\\n\\nans = 'true';\\n\\nfor i in range(1,3) :\\n    hdiff =  c[0][i] - c[0][i-1];\\n    for j in range(1,3) :\\n        if  c[j][i] - c[j][i-1] != hdiff :\\n            ans = 'false';\\n            break;\\n\\nfor i in range(1,3) :\\n    vdiff =  c[i][0] - c[i-1][0];\\n    for j in range(1,3) :\\n        if  c[i][j] - c[i-1][j] != vdiff :\\n            ans = 'false';\\n            break;            \\n\\nif(ans == 'true') :\\n    print('Yes');\\nelse :\\n    print('No');", "target": "297", "substitutes": {}}
{"code": "N = int(input())\\nA = [-1*int(input()) for _ in range(N)]\\n\\n\\ndef LIS(seq: list) -> int:\\n    \"\"\"param: seq\\n    return:LIS\u306e\u9577\u3055\uff08a_i =< a_j\uff09\\n    \"\"\"\\n    from bisect import bisect_right\\n    N = len(seq)\\n    L = [seq[0]]\\n    for i in range(1, N):\\n        if seq[i] > L[-1]:\\n            L.append(seq[i])\\n        else:\\n            idx = bisect_right(L, seq[i])\\n            if idx == len(L):\\n                L.append(None)  # avoid Out-of-Index-Error\\n            L[idx] = seq[i]\\n    return len(L)\\n\\n\\nprint(LIS(A))\\n", "target": "245", "substitutes": {"N": ["F", "Length", "E", " M", "V", "Q", "X", "Y", "Size", "NC", " O", "Num", "NS", "NE", "K", "Na", "NM", "O", "P", "T", "C", "B", "D", "Len", " C", "Ne", "S", "W", "I", "No", "NT", "Ni", "Z", "Ns", "R", "M", "J", " n", "G", " Ne", "NA", "n"], "A": ["F", "E", "a", "V", "H", "p", "na", "LA", "K", "P", "B", "C", "T", "D", "Ar", "Alpha", "S", "I", "Z", "Array", "CA", "U", "R", "alpha", "M", "b", "G", "NA"], "_": [" p", "k", " block", "__", "___", " row", " ip", " time", " __", " k", "x", " un", "f", " j", " col", "id"], "L": ["F", "E", "LB", "V", "LT", "IL", "NL", "FL", "Q", "LS", "AL", "LA", "dL", "LP", "Lu", "LU", "Left", "O", "P", "B", "T", "LM", "D", "C", "LD", "PL", "S", "SL", "Body", "I", "l", "EL", "LR", "Li", "LE", "BL", "RL", "Lo", "CL", "II", "U", "R", "List", "M", "LO", "LI", "DL", "LL", "G", "ML", "Long", "UL"], "i": ["gi", " p", "ui", "qi", "p", "ai", "c", " I", " id", "ix", " ip", " c", "ini", "iu", "ti", "z", "si", "index", "x", " ir", "ind", "start", " il", "I", "uri", "l", "u", "pi", "j", "f", "io", "ac", " j", "xi", "ori", "ri", "di", "ni", "ci", "b", " ii", "e", "info", "id", "li", " u", "ii", "n", "bi", "ip"], "idx": ["Idindex", "Idxs", "Idc", "midz", "Idx", " idindex", "idindex", "indz", "idc", "midindex", " idxs", "midxs", "Idz", "indxs", " idz", " idc", "midx", "idz", "indc", "idxs", "indx"]}}
{"code": "import math\\nn,m = map(int, input().split())\\n\\nans = 0\\n\\ntime = (n-m) * 100 + m * 1900\\nfor i in range(1, 1000000):\\n  ans += pow(1-pow(0.5,m),i-1) * pow(0.5,m) * time * i\\n\\ntemp = math.ceil(ans)\\nif str(temp)[-1] == \"1\":\\n  print(temp - 1)\\nelif str(temp)[-1] == \"9\":\\n  print(temp + 1)\\nelse:\\n  print(temp)", "target": "308", "substitutes": {"n": ["min", "name", "k", "mn", "p", "na", "ic", " number", "nm", "g", "c", " network", " nano", "y", "number", "o", "num", " c", "en", "z", "x", "nan", " fn", "sn", "w", "l", "nn", "j", "f", "ns", " ns", "M", "N", "e", " num", "nb", " nan"], "m": ["mass", "min", "s", " M", "a", "mn", "tm", "p", "ms", "g", "c", "mon", "y", "o", "r", "num", "h", "ym", "z", "fm", "x", "mu", "w", "cm", "l", "u", "d", "pi", "f", "j", "minute", "M", "v", "b", "e", "t", "mm", "month"], "ans": ["s", "ents", "offs", "cas", "lan", "amps", "eps", "ams", "atan", "na", "ats", "anas", "AN", "ads", "ANS", "ks", "aces", "vs", "ann", "ani", "ays", "es", "ana", "outs", " means", "nan", "aned", "ace", "atts", "ons", "aus", "ens", "sk", "cs", "ants", "acs", "forces", "han", "reads", "acts", "ls", "ians", "ds", "an", "ins"], "time": ["TIME", "date", "cycle", " times", "sleep", "p", "ic", "inter", "c", "tim", "rate", "h", "y", "im", "times", "year", "ime", "z", "x", "w", " Time", "q", "f", "clock", "etime", "mic", "age", "minute", "am", "day", "Time", "type", "v", "timeout", "money", "t", "complex", "mod", "month", "frequency", "ip"], "i": ["gi", "s", "ui", "a", "int", "mi", "p", "ai", "c", "o", "y", "ix", "ini", "im", "ime", "iu", "z", "mini", "si", "index", "x", "mu", "ind", "start", "I", "it", "l", "u", "d", "pi", "j", "f", "xi", "ci", "ip", "v", "e", "t", "id", "li", "ii", "ti"], "temp": ["loc", "zero", "int", "span", "var", " spacing", "cum", "empty", "perature", "x", " tmp", "current", "mod", "fake", "test", "full", "stable", "sex", "ic", "vent", "tmp", "year", "pt", "lc", "div", "clean", "flat", "fact", "note", " Temp", "wl", "cel", "atom", " spin", "source", "form", "tc", "float", "magic", "str", "tt", "p", "tim", "iter", "size", "index", "cache", "now", " temporary", "get", "wait", "input", "stuff", "t", " temperature", "word", "c", "emp", "seed", "mini", "valid", "w", "tem", "warm", "term", "Temp", "single", "base", " const", "eff", "draw"]}}
{"code": "X,Y = (int(T) for T in input().split())\\nCount = 0\\nfor T in range(61):\\n    if X*(2**T)<=Y:\\n        Count += 1\\n    else:\\n        print(Count)\\n        break", "target": "631", "substitutes": {"X": ["F", "Length", "E", "Point", "L", "V", "H", "DX", "Q", "XX", "XP", "Width", "K", "O", "P", "C", "Int", "D", "x", "A", "W", "Position", "I", "TX", "Z", "Offset", "XY", "U", "R", "Time", "M", "N", "Location", "Index", "Co"], "Y": ["F", "YY", "E", "V", "Python", "Mine", "Q", "XX", "y", " y", "O", "YA", "P", "B", "C", "D", "IP", "Year", "S", "W", "I", "TY", "Country", "MY", "Z", "IO", "Zone", "XY", "Py", "Height", "R", "Time", "M", "J", "N", "Co", "My"], "T": ["F", "Length", "Tx", "E", "Point", "L", "V", " t", "LT", "Ti", "H", "Times", "Text", "K", "TS", "TN", "TH", "Tu", "O", "P", "C", "B", "D", "Int", "S", "A", "TB", "W", "Dim", "I", "Type", "NT", "Tr", "TW", "Z", "TT", "U", "R", "Part", "Total", "M", "Time", "t", "N", "WT", "Ts", "G", "Unit"], "Count": ["Length", "Number", "Match", "Tag", "Start", "Ptr", "Size", "Num", "Delta", "Low", "Break", "Text", "Force", "Current", "Str", "Counter", "Shift", "Len", "C", "Thread", "Default", "Short", "Weight", "Id", "Position", "Depth", "Type", "Tr", "Offset", "Code", " count", "Duration", "Now", "Value", "Part", "Time", "List", "Ct", "count", "Sum", "Name", "Index", "Loop", "Last", "Group", "Flag", "Long", "Key", "Container"]}}
{"code": "\\nr,g,b = map(int,input().split())\\na = r *100+g*10+b\\nif a % 4 == 0:\\n    print('YES')\\nelse:\\n    print('NO')", "target": "392", "substitutes": {"r": ["s", "k", "p", "c", "i", "y", "h", "o", "ro", "z", "x", "w", "l", "u", "d", "q", "ra", "f", "sr", "m", "R", "alpha", "nr", "v", "e", "t", "n"], "g": ["s", "k", "group", "p", "c", "i", "gh", "y", "h", "ig", "size", "x", "gn", "w", "cm", "l", "u", "d", "q", "f", "m", "ga", "ac", "v", "e", "G", "col", "pg", "n"], "b": ["s", "fb", "p", "bs", "c", "i", "y", "h", "wb", "beta", "mb", "B", "ab", "z", "x", "w", "sb", "l", "bf", "d", "bb", "rb", "f", "eb", "m", "db", "bin", "gb", "v", "e", "bi", "n"], "a": ["aa", "va", "ma", "p", "c", "aw", "i", "fa", "ba", "mA", "ab", "z", "da", "pa", "A", "w", "l", "u", "d", "ta", "aaa", "ca", "f", "sa", " A", "ac", "ga", "m", "j", "area", "ae", "alpha", "ea", "an", "ad", "n"]}}
{"code": "from collections import deque\\ns = [deque(input()) for _ in range(3)]\\nd = {\"a\":0, \"b\":1, \"c\":2}\\nD = {0:\"A\", 1:\"B\", 2:\"C\"}\\nplayer = 0\\nfor _ in range(301):\\n    x = s[player].popleft()\\n    player = d[x]\\n    if not s[player]:\\n        print(D[player])\\n        exit()", "target": "34", "substitutes": {"s": ["ss", "groups", "p", "ps", "states", "g", "c", "i", "ing", "h", "o", "sd", "z", "ays", "es", "events", "S", "plays", "w", "tests", "l", "services", "parts", "ses", "u", "ches", "js", "f", "details", "m", "sync", "self", "objects", "eds", "os", "data", "v", "b", " parts", "e", "ls", "t", "players", "ds", "n", "ins"], "_": ["k", " block", "__", "non", "p", "g", "i", "ing", " ip", " q", "l", "q", "out", "f", "j", "ac", "ip", "b", "t", "id", "n"], "d": ["a", "p", "g", "c", "i", "dat", "o", "dict", "sd", "ded", "z", "w", "l", "Ds", "u", "do", "q", "f", "dl", "m", "dc", "data", "db", "b", "v", "ld", "t", "e", "pd", "players", "ds", "n"], "D": ["F", "E", "L", "DS", "V", "Q", "X", "Y", "DC", "DM", "DB", "O", "P", "B", "C", "T", "LD", "DD", "S", "A", "W", "I", "CD", "Ds", "Do", "Z", "R", "M", "N", "DL", "G"], "player": ["adder", "layer", "name", "field", "change", "driver", "league", "channel", "actor", "worker", "event", "p", "host", "handler", "number", "client", "party", "game", "server", "index", "winner", "video", "file", "artist", "user", " Player", "patch", "owner", "aker", "f", "position", "core", "self", "live", "data", "match", "type", "dim", "key", "v", "e", "order", "play", "players", "episode", "Player", "move", "id", "step", "er", "part", "test", "played", "voice", "n"], "x": ["dx", "name", "layer", "k", "change", "X", "p", "worker", "event", "g", "c", "host", "i", "xx", "fx", "y", "h", "pos", "client", "lc", "z", "ex", "index", "xxx", "w", "l", "patch", "f", "m", "self", "addr", "v", "key", "e", "id", "xc", "n"]}}
{"code": "from itertools import permutations\\n\\n\\ndef main():\\n    n, c = map(int, input().split())\\n    d = [[int(x) for x in input().split()] for _ in range(c)]\\n    g = [[int(x) - 1 for x in input().split()] for _ in range(n)]\\n    count = [{}, {}, {}]\\n    for i in range(n):\\n        for j in range(n):\\n            now = g[i][j]\\n            index = (i + j + 2) % 3\\n            if now in count[index % 3]:\\n                count[index % 3][now] += 1\\n            else:\\n                count[index % 3][now] = 1\\n    answer = float(\"inf\")\\n    for color in permutations([i for i in range(c)], 3):\\n        now_answer = 0\\n        for i in range(3):\\n            for before_color, num in count[i].items():\\n                now_answer += d[before_color][color[i]] * num\\n        answer = min(answer, now_answer)\\n    print(answer)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n\\n", "target": "516", "substitutes": {"n": ["s", "k", "a", "p", "o", "y", "nc", "r", "en", "size", "nu", "z", "w", "l", "u", "cn", "q", "f", "m", "ns", "v", "b", "t", "N", "e", "nb"], "c": ["s", "k", "cycle", "p", "o", "y", "nc", "r", "h", "C", "lc", "size", "z", "w", "con", "cm", "l", "u", "cn", "max", "f", "cs", "m", "ac", "dc", "ci", "b", "v", "e", "cc", "col", "xc"], "d": ["s", "dd", "dh", "p", "dat", "y", "D", "z", "da", "daily", "l", "do", "xd", "f", "dt", "m", "dc", "df", "di", "data", "db", "b", "v", "dim", "dp", "t", "pd", "e", "ds", "ad"], "x": ["dx", "k", "int", "sex", "X", "p", "xf", "xs", "xx", "yx", "fx", "y", "rx", "lex", "ix", "px", "work", "z", "xt", "ex", "xxx", "xxxx", "w", "cross", "q", "hex", "f", "ax", "xi", "v", "xp", "t", "e", "xes", "xy", "id", "xc"], "_": ["k", "__", "al", "p", "place", "ning", "un", "ay", "out", "all", "block"], "g": ["gi", "k", "group", "groups", "p", "go", "gh", "y", "gc", "gu", "r", "h", "ng", "z", "w", "gener", "l", "u", "sg", "gg", "q", "f", "m", "ga", "graph", "gs", "v", "b", "gb", "e", "gm", "G", "pg", "vg"], "count": ["call", "cycle", "group", "code", "total", "cond", "p", "ge", "y", "number", "h", "case", "comment", "weight", "size", "conf", "z", "ch", "cache", "memory", "ind", "w", "current", "l", "child", "max", "q", "f", "m", "found", "core", "cat", "cd", "age", "flag", "length", "match", "v", "b", "base", "e", "order", "cc", "play", "cell", "id", "progress", "nb", "sum", "Count"], "i": ["gi", "ji", "k", "ui", "ie", "int", "ei", "qi", "p", "phi", "ai", "y", "o", "h", "ix", "r", "im", "ini", "iq", "iu", "ti", "z", "si", "eni", "yi", "ind", "w", "I", "it", "l", "u", "pi", "q", "io", "f", "m", "xi", "di", "ni", "ci", "v", "b", "e", "t", "id", "li", "ii", "ip"], "j": ["ion", "ji", "k", "end", "ie", "int", "p", "y", "o", "r", "ix", "pos", "h", "jj", "size", "jl", "z", "ind", "w", "adj", "l", "f", "jp", "m", "jc", "xi", "ij", "J", "b", "v", "e", "col", "ii"], "now": ["new", "zero", "cycle", "code", "NOW", "p", "default", "where", "post", "number", "ix", "always", "result", "since", "we", "weight", "seed", "size", "force", "edge", "array", "search", "w", "ind", "current", "obj", "before", "max", "row", "shift", "wait", "f", "found", "sw", "self", "old", "null", "age", "Now", "parent", "length", "stuff", "way", "zip", "ow", "cf", "order", "id", "word", "after", "range", "next", "draw", "here", "info"], "index": ["new", "ji", "loc", "end", "digit", "cycle", "ie", "int", "fix", "qi", "element", "number", "ix", "axis", "pos", "slice", "weight", "size", "original", "z", "div", "si", "edge", "search", "ind", "inc", "action", "current", "draw", "max", "page", "f", "position", "jc", "xi", "old", "input", "length", "type", "key", "order", "Index", "id", "inner", "update", "active", "info"], "answer": ["new", "example", "field", "value", "ze", "align", "fix", " answers", "reply", "err", "margin", "number", "result", "results", " answered", "evidence", "knowledge", "equality", "analysis", "support", "say", "size", "array", "cost", "response", "expression", "image", "search", "integer", "ace", "score", "Answer", " result", "term", "back", "option", "address", "area", "output", "fee", "entry", "duration", "data", "average", "complete", "question", "answered", "string", "fruit", "ell", " Answer", "alpha", "message", "grade", "energy", "word", "after", "next", "update", "offset"], "color": ["gi", "ion", "character", "k", "cycle", "a", "ie", "COLOR", "o", "number", "y", "ix", "result", "item", "im", "r", "blue", "size", "colour", "white", "source", "ind", "f", "position", "char", "core", "option", "term", "Color", "bin", "alpha", "gb", "b", "pixel", "feature", "type", "order", "col", "id", "word", "li", "ii", "range"], "now_answer": ["now5fee", "today_blank", "today67blank", "now_order", "now67answer", "today67order", "now_margin", "today67answer", "before5margin", "before5fee", "today_answer", "now5result", "now_color", "now_value", "now_blank", "now_result", "now5answer", "before_margin", "now67value", "now67blank", "now_fee", " now_color", "before_result", "today_color", "now5margin", " now_value", "before5answer", "today_order", "now67order", "today67color", "before5result", "before_fee", "now67color", "before_answer"], "before_color": [" before_colour", "before\u00b7white", "before\u00b7state", "before_colour", "before_token", " before_state", " before_white", "before_white", "after_token", "before\u00b7color", "before_colored", "before_state", "after_colored", "after_color", "before\u00b7colour"], "num": ["loc", "unit", "text", "img", "Num", "umi", "number", "en", "un", "result", "NUM", "nu", "nom", "coord", "ng", "norm", "w", "con", "draw", "max", "nn", "uni", "f", "m", "bin", "dim", "b", "np", "gen", "col", "id", "multi", "nb", "form", "sum", "um"]}}
{"code": "a, b, c, k = map(int, input().split())\\n\\nans = b - a if k % 2 == 1 else a - b\\n\\nprint(ans if ans <= 10**18 else \"Unfair\")\\n", "target": "669", "substitutes": {"a": ["aa", "s", "ma", "p", "na", "aw", "i", "fa", "y", "r", "h", "ba", "ab", "au", "da", "x", "pa", "A", "ia", "u", "d", "sha", "aaa", "f", "sa", " A", "ac", "m", "ca", "area", "aj", "ae", "alpha", "e", "abc", "an", "ad", "n"], "b": ["aa", "s", "fb", "p", "bs", "g", "i", "y", "r", "h", "wb", "beta", "B", "ba", "ab", "x", "A", "sb", "cb", "l", "bb", "d", "rb", "u", "bf", "abb", "f", "ca", "eb", "ac", "alpha", "v", "bar", "e", "bc", "abc", "ad", "n"], "c": ["p", "y", "nc", "C", "lc", "z", "ce", "x", "cy", "cb", "cm", "d", "ca", "f", "cs", "ac", "m", "dc", "ci", "e", "bc", "cr", "cc", "col", "mc", "xc", "ad", "n"], "k": ["p", "g", "i", "dk", "K", "o", "y", "r", "kk", "ks", "z", "ch", "x", "kw", "w", "ak", "ok", "d", "unk", "max", "q", "j", "sk", "f", "cs", "m", "ac", "ky", "v", "ck", "e", "cc", "mc", "ad", "n"], "ans": ["lan", "span", "amps", "atan", "na", "ats", "aning", "anas", "AN", "ANS", "anes", "ks", "sign", "ane", "ann", "anon", "ani", "anc", "cus", "ana", "ne", "ania", "can", "nan", " means", "An", "clean", "anch", "ant", "aned", "ass", "chan", "nn", "ons", "aus", "ign", "ens", "sk", "cs", "leans", "ants", "ns", "han", "man", "scan", "ls", "cons", "ds", "an", "ins"]}}
{"code": "import math\\nimport numpy as np\\nimport numba\\nfrom numba import njit, b1, i4, i8, f8\\nfrom numba import jit\\nimport collections\\nimport bisect\\nfrom collections import deque\\nfrom copy import copy, deepcopy\\nimport time\\n \\ndef main():\\n    N,X,T = map(int,input().split())\\n    print(math.ceil(N/X) * T)\\n\\nif __name__ == '__main__':\\n    main()", "target": "105", "substitutes": {"N": ["F", "E", "Number", "L", "V", "H", "Q", "Y", "Num", "NS", "K", "O", "P", "C", "B", "D", "S", "A", "W", "I", "NT", "NG", "Node", "Z", "Ns", "CL", "U", "R", "M", "J", "GN", "G", "NA", "n"], "X": ["F", "E", "L", "V", "H", "Q", "Y", "Size", "NS", "K", "Test", "O", "P", "C", "D", "IP", "x", "S", "A", "W", "I", "TX", "Z", "INT", "CL", "U", "Time", "J", "M", "XL", "G"], "T": ["F", "E", "L", "V", "Q", "Y", "K", "TS", "TN", "TH", "O", "P", "C", "B", "D", "S", "DT", "A", "W", "I", "NT", "UT", "TX", "TE", "Z", "TT", "TC", "U", "Time", "M", "t", "WT", "PT"]}}
{"code": "s = int(input())\\nmod = 10 ** 9 + 7\\n\\nfact = [1] * s\\ninv = [1] * s\\ninvf = [1] * s\\nfor i in range(2, s):\\n  fact[i] = fact[i-1] * i % mod\\n  inv[i] = -(mod // i) * inv[mod % i] % mod\\n  invf[i] = invf[i-1] * inv[i] % mod\\n\\ncount = 0\\nrest = s\\nfor n in range(1, s // 3 + 1):\\n  rest -= 3\\n  count = (count + fact[rest + n - 1] * invf[rest] * invf[n - 1]) % mod\\nprint(count)", "target": "235", "substitutes": {"s": ["ss", "min", "k", "sq", "a", "spec", "sc", "sid", "span", "ins", "states", "p", "ps", "g", "c", "stat", "sym", "h", "r", "y", "sd", "sign", "size", "z", "si", "es", "x", "sim", "S", "w", "start", "sites", "l", "parts", "ses", "d", "less", "u", "sec", "sin", "f", "sy", "sort", "cs", "m", "j", "ns", "site", "ws", "su", "os", "ts", "b", "v", "string", "space", "t", "e", "ls", "ds", "sub", "se", "an", "sum"], "mod": ["min", "loc", "cond", "ms", "_", "sect", "ix", "im", "re", "cum", "sign", "x", "module", "pack", "j", "ac", "fun", "ctr", "part", "mode", "common", "mad", "ie", "dom", "MOD", "mi", "section", "temp", "div", "component", "ment", "comp", "cm", "sec", "lib", "ci", "complex", "add", "id", "step", "form", "rad", "Mod", "spec", "dig", "dist", "mult", "lex", "ver", "md", "reg", " Mod", "index", "unc", "oct", "ind", "inc", "mag", "max", "sin", "row", "sup", "sort", "m", "dim", "ow", "mix", "block", "um", "perm", "exp", "post", "circ", "num", "lock", "un", "od", "fit", "sim", "diff", "om", "term", "check", "mods", "draw"], "fact": ["min", "Fact", "sh", "change", "part", "vel", " factor", "cond", "actor", "event", "ft", "condition", "mult", "sect", "work", "pm", " Fact", "weight", "sign", "fam", "facts", "conf", "force", "factor", "fn", "time", "inc", "ind", " part", "con", "fac", "ign", "q", "ac", "function", "pull", "core", "man", "act", "shape", "ct", "func", "feature", "col", "mix", "filter", "feat", "cl", "config", "form", "block", "ref"], "inv": ["aff", "loc", "sq", "Inv", "align", "chi", "com", "p", "nav", "c", "invest", "mult", "unique", "work", "ine", "im", "pos", "log", "iq", "el", "sign", "fam", "vs", "temp", "conf", "rev", "grid", "array", "asm", "inc", "mu", "w", "adj", "inventory", "tri", "conv", "q", "ln", "f", "vol", "model", "comb", "ns", "lim", "rel", "map", "nr", "v", "dev", "seq", "mix", "eff", "ii", "cl", "block", "form", "bi", "ref", "info"], "invf": ["iqc", "navp", "invF", "navd", "invp", "alignu", " invn", " invd", " Invc", " InvF", "Invc", " invb", "alignb", "Invu", "iqfs", "invc", "invu", "Invb", "navb", "invb", "invd", " invu", "navc", "iqf", " invc", "Invf", "invn", "Invp", "navf", " invF", " invp", " Invf", " invfs", "alignc", "alignf", "repeatc", "repeatn", "Invn", "Invd", " Invfs", "InvF", "iqF", "repeatf", "invfs", "repeatF"], "i": ["gi", "k", "ui", "a", "ie", "ib", "int", "ei", "qi", "mi", "p", "phi", "ai", "g", "c", "isin", "oi", "y", "o", "r", "ini", "ix", "iu", "inf", "z", "mini", "si", "index", "x", "yi", "ind", "start", "I", "it", "l", "u", "pi", "d", "uri", "j", "f", "io", "ir", "m", "xi", "di", "ip", "ci", "b", "v", "e", "t", "id", "li", "ii", "bi", "abi", "ti"], "count": ["error", "group", "a", "const", "last", "code", "p", " Count", "dist", "est", "c", "err", "case", "num", "weight", "support", "coll", "force", "size", "counter", "z", "conf", "index", "cache", "ind", "start", "current", "child", "patch", "nt", "max", "offset", "shift", "ast", "f", "found", "core", "pull", "old", "depth", "age", "flag", "list", "length", "len", "limit", "base", "id", "keep", "part", "test", "sum", "ref", "Count"], "rest": ["cur", "end", "const", "int", "span", "tail", "est", "dist", "nd", "err", "ore", "work", "number", "rec", "prev", "blast", "use", "chain", "head", "ab", "Rest", "rev", "ch", "index", "dest", "x", "store", "art", "st", "start", "con", "patch", "src", "nt", "max", "shift", "ust", "ist", "core", "pull", "fold", "sync", "none", "old", "us", "no", "list", "length", "nr", "feature", "cr", "fr", "keep", "feat", "range", "part", "test", "ast"], "n": ["min", "k", "int", "non", "p", "nd", "c", "r", "o", "num", "en", "un", "rn", "natural", "ne", "z", "x", "sn", "w", "l", "cn", "d", "pi", "nn", "nt", "u", "f", "j", "m", "ns", "v", "b", "t", "N", "pn", "e", "id", "all", "nb"]}}
{"code": "N = int(input())\\ns = list(input())\\nr, b = 0, 0\\nfor i in s:\\n    if i == \"R\":\\n        r += 1\\n    else:\\n        b += 1\\nif r > b:\\n    print('Yes')\\nelse:\\n    print(\"No\")", "target": "160", "substitutes": {"N": ["F", "NR", "L", "V", " R", "Q", "NI", " I", " B", "number", "Na", "O", "P", "B", "C", "S", "A", "I", "RN", "Z", "Ns", "R", "M", "NB", " n", "G", "nb", "n"], "s": ["ss", "a", "ins", "p", "states", "g", "c", "xs", "rows", "sets", "o", "si", "es", "x", "blocks", "S", "events", "sb", "tests", "args", "sites", "l", "lines", "ses", "d", "u", "f", "ns", "ws", "abs", "gs", "e", "ls", "scripts", "rs", "comments", "n"], "r": ["rr", "k", "end", "a", "ur", "p", "g", "c", "o", "h", "y", "pr", "x", "ar", "w", "l", "u", "d", "rb", "q", "f", "sr", "j", "m", "ir", "rt", "R", "nr", "v", "e", "t", "er", "rs", "n"], "b": ["k", "a", "p", "bp", "bs", "g", "c", "pb", "y", "h", "o", "beta", "B", "ab", "z", "x", "w", "sb", "l", "ob", "rb", "d", "u", "ok", "bb", "f", "j", "m", "R", "v", "bar", "base", "e", "t", "nb", "n"], "i": ["gi", "ji", "ui", "a", "ie", "int", "ei", "p", "phi", "ai", "c", "o", "ini", "iu", "ti", "si", "ind", "I", "it", "l", "u", "pi", "d", "f", "iii", "xi", "di", "ri", "ni", "ci", "v", "t", "e", "id", "li", "ii", "bi", "n"]}}
{"code": "list = list(input())\\nprint(list.count('+')-list.count('-'))", "target": "166", "substitutes": {"list": ["lp", "name", "value", "int", "code", "table", "queue", "top", "p", "default", "input", "g", "i", "low", "LIST", "result", "log", "iter", "left", "split", "this", "coll", "temp", "lc", "long", "array", "index", "x", "diff", "module", "current", "l", "max", "out", "sort", "status", "cli", "option", "self", "null", "set", "entry", "data", "map", "List", "batch", "type", "v", "parent", "string", "base", "bin", "len", "count", "key", "pair", "e", "test", "word", "filter", "li", "cl", "range", "part", "parse", "lists", "n"]}}
{"code": "\\nS=input()\\ncnt=0\\ncnt = cnt + S.count('+')-S.count('-')\\nprint(cnt)", "target": "166", "substitutes": {"S": ["F", "s", "L", "DS", "IS", "V", "ITS", "Q", "X", "Sample", "NS", "Stars", "INS", "TS", "PS", "CSS", "SI", "O", "SA", "P", "T", "C", "B", "D", "OSS", "Pres", "A", "RS", "I", "LESS", "FS", "SS", "ISS", "US", "Single", "POS", "CS", "U", "R", "Input", "SIGN", "M", "GS", "String", "letters", "N", "SN", "G", "SU", "Socket"], "cnt": ["cNT", " cpt", "cpt", "acount", "CNT", "acounter", "Cpt", " cNT", " cct", "ncnt", "cct", "crt", "acnt", "lcrt", "Cnt", "Counter", "counter", "ncct", "acNT", "acpt", " counter", "ncrt", " count", "lcnt", "lcct", "Crt", "count", "Cct", "lcNT", "ncNT", "Count", "lcount"]}}
{"code": "r = int(input())\\nprint(2*r*3.14159)", "target": "552", "substitutes": {"r": ["rh", "rr", "s", "mr", "p", "arr", "c", "i", "h", "radius", "result", "rf", "pr", "re", "z", "x", "l", "rb", "d", "u", "q", "f", "range", "rc", "right", "m", "rank", "br", "R", "nr", "b", "v", "t", "e", "kr", "rs", "n"]}}
{"code": "k,n=[int(x) for x in input().split()]\\na=[int(x) for x in input().split()]\\nb=0\\nfor i in range(n-1):\\n  d=a[i+1]-a[i]\\n  b=max(b,d)\\nd=a[0]-(a[n-1]-k)\\nb=max(d,b)\\nprint(k-b)", "target": "33", "substitutes": {"k": ["s", "ke", "p", "g", "c", "dk", "K", "y", "o", "r", "h", "kk", "ks", "z", "mk", "w", "ak", "l", "ok", "u", "bb", "q", "f", "sk", "j", "m", "v", "e", "N", "id", "ik"], "n": ["non", "p", "na", "nd", "g", "c", "o", "y", "nc", "num", "h", "r", "en", "ne", "nu", "z", "w", "l", "u", "nt", "nn", "f", "j", "network", "m", "ns", "no", "ni", "v", "np", "t", "N", "all", "e", "nb", "an", "ad"], "x": ["int", "str", "code", "sex", "X", "p", "na", "exp", "opt", "xs", "c", "_", "xx", "width", "y", "rx", "h", "ix", "num", "px", "lex", "vent", "z", "xt", "ex", "index", "ch", "w", "u", "max", "hex", "q", "f", "ax", "xi", "ux", "input", "check", "v", "t", "e", "xes", "xy", "id", "xc", "bit"], "a": ["aa", "s", "wa", "auto", "sta", "va", "ma", "ans", "p", "ai", "c", "y", "o", "ba", "ab", "z", "array", "da", "A", "w", "l", "u", "f", "ca", "sa", "ac", "ga", "m", "area", "am", "input", "ae", "oa", "alpha", "v", "e", "an", "ad"], "b": ["s", "be", "p", "bs", "g", "c", "y", "r", "h", "o", "wb", "beta", "mb", "B", "ba", "ab", "z", "w", "sb", "cb", "l", "u", "rb", "bf", "bb", "f", "j", "bd", "m", "eb", "db", "gb", "v", "base", "e", "t", "nb", "lb", "ad"], "i": ["gi", "ui", "end", "ie", "int", "qi", "p", "ai", "c", "o", "y", "h", "ix", "r", "ini", "iu", "z", "mini", "si", "index", "ind", "start", "w", "I", "l", "u", "pi", "j", "f", "m", "xi", "di", "ni", "ci", "v", "e", "id", "li", "ii", "bi"], "d": ["dx", "s", "dd", "dy", "dh", "p", "g", "c", "y", "r", "o", "h", "sd", "D", "z", "da", "w", "l", "u", "do", "f", "j", "dt", "bd", "m", "df", "db", "v", "e", "t", "ds", "ad"]}}
{"code": "n, m = map(int, input().split())\\n\\ndp = [[10**10 for _ in range(2**n)] for j in range(m)]\\ndp[0][0] = 0\\na, b = map(int, input().split())\\nc = list(map(int, input().split()))\\nidx = 0\\nfor cc in c:\\n  idx += 2**(cc-1)\\nfor j in range(1, 2**n):\\n  if ~idx & j == 0:\\n    dp[0][j] = a\\n\\nfor i in range(1, m):\\n  a, b = map(int, input().split())\\n  c = list(map(int, input().split()))\\n  idx = 0\\n  for cc in c:\\n    idx += 2**(cc-1)\\n  for j in range(2**n):\\n    dp[i][j] = min(dp[i-1][j], dp[i-1][(j|idx)^idx]+a)\\n\\nif dp[-1][-1] != 10**10:\\n  print(dp[-1][-1])\\nelse:\\n  print(-1)", "target": "772", "substitutes": {"n": ["s", "k", "p", "g", "o", "y", "nc", "r", "num", "un", "C", "size", "ne", "z", "x", "sn", "l", "u", "d", "cn", "nn", "nt", "f", "ns", "v", "e", "N", "t", "nb"], "m": ["s", "k", "mn", "p", "g", "y", "h", "r", "o", "num", "md", "size", "z", "x", "mu", "w", "cm", "l", "u", "d", "f", "bm", "am", "M", "v", "e", "mm", "hm", "mc"], "dp": ["lp", "loc", "password", "wp", "p", "dist", "ps", "pb", "xs", "fp", "dat", "projects", "sl", "tp", "result", "cp", "pos", "rep", "tmp", "gp", "dep", "dB", "sp", "mp", "vp", "params", "dm", "pi", "d", "do", "DP", "dt", "jp", "dl", "pp", "deb", "port", "dr", "ga", "dc", "address", "df", "pkg", "resp", "data", "db", "pipe", "adr", "dim", "zip", "np", "pair", "e", "imp", "pd", "project", "ds", "dos", "hp", "pg", "direction", "ip"], "_": ["int", "p", "x", "l", "u", "q", "f", "ac", "J", "ip"], "j": ["ji", "k", "int", "code", "ja", "p", "g", "jo", "y", "r", "jj", "o", "un", "h", "jl", "z", "index", "x", "ind", "obj", "it", "l", "u", "uj", "d", "q", "jp", "f", "jc", "oj", "aj", "ij", "J", "ct", "v", "cf", "e", "t", "kj", "li", "ii", "part"], "a": ["aa", "va", "ma", "p", "na", "ai", "aw", "g", "o", "r", "y", "ba", "ab", "au", "da", "x", "index", "A", "ia", "l", "u", "d", "ca", "sa", "ac", "f", "area", "am", "ae", "ci", "alpha", "e", "all", "abc", "an", "ad", "offset"], "b": ["aa", "fb", "p", "bs", "g", "y", "r", "mb", "ba", "B", "ab", "z", "x", "bl", "sb", "l", "bf", "d", "u", "f", "eb", "ac", "v", "e", "bc"], "c": ["k", "code", "p", "ic", "arc", "case", "nc", "ec", "r", "C", "coll", "lc", "uc", "z", "cil", "ce", "x", "cent", "unc", "cy", "cb", "con", "cm", "l", "u", "d", "cn", "f", "ca", "cs", "ac", "core", "cd", "act", "ci", "ct", "v", "cf", "e", "count", "cl"], "idx": ["iden", "idw", " idxe", "idj", "pidz", "startxc", "Idxs", " idg", "Idx", " idf", " idw", " idn", "ing", "pidj", "indX", "startx", "startX", "ipx", "indz", "indxe", "indw", "idef", "idX", "idg", "idc", "ipX", "pidxc", "inX", "idex", "inc", "Idj", " idxs", "ipg", "Idz", " idc", " idz", "idez", "idf", "ideX", "IdX", "idxc", "idn", "idxe", "Idxc", "startj", " idj", "inx", "pidx", "idec", "idz", "ipn", "inn", "indf", " idxc", " idX", "pidxs", "idexe", "idxs", "idew", "indx"], "cc": ["km", "ucc", "k", "loc", "sc", "code", "p", "acc", "cca", "arc", "ec", "oc", "lc", "uc", "anc", "fc", "ce", "x", "cent", "cv", "inc", "con", "cm", "cn", "max", "ign", "q", "ll", "ca", "rc", "cs", "jc", "ac", "f", "dc", "co", "vc", "ci", "ct", "CC", "cf", "ck", "bc", "count", "mc", "xc", "cl", "pc"], "i": ["gi", "ji", "k", "ui", "ie", "ib", "int", "qi", "mi", "p", "ai", "g", "ic", "h", "r", "o", "y", "iq", "iu", "z", "si", "index", "x", "ind", "I", "it", "l", "u", "pi", "d", "f", "io", "ac", "xi", "di", "ci", "ij", "v", "e", "t", "id", "li", "ii", "bi", "ip"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\nimport math\\nfrom bisect import bisect_right as br\\nfrom bisect import bisect_left as bl\\nsys.setrecursionlimit(2147483647)\\nfrom heapq import heappush, heappop,heappushpop\\nfrom collections import defaultdict\\nfrom itertools import accumulate\\nfrom collections import Counter\\nfrom collections import deque\\nfrom operator import itemgetter\\nfrom itertools import permutations\\nmod = 10**9 + 7\\ninf = float('inf')\\ndef I(): return int(sys.stdin.readline())\\ndef LI(): return list(map(int,sys.stdin.readline().split()))\\n\\nh, w = LI()\\na = [list(input()) for _ in range(h)]\\ndx,dy = [1,0],[0,1]\\nflag = True\\nfor i in range(h):\\n    for j in range(w):\\n        if a[i][j] == '#':\\n            que = deque()\\n            que.append((i,j))\\n            a[i][j] = '.'\\n            while que:\\n                y,x = que.popleft()\\n                for k in range(2):\\n                    ny, nx = y + dy[k], x + dx[k]\\n                    if 0 <= ny < h and 0 <= nx < w:\\n                        if a[ny][nx] == '#':\\n                            que.append((ny,nx))\\n                            a[ny][nx] = '.'\\n                            break\\n            flag = False\\n            break\\n    if not flag:\\n        break\\n\\n\\nfor i in range(h):\\n    for j in range(w):\\n        if a[i][j] == '#':\\n            print('Impossible')\\n            quit()\\nprint('Possible')", "target": "243", "substitutes": {}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\nans = 0\\nfor i in range(60):\\n    cnt1 = 0\\n    for j in range(N):\\n        cnt1 += (A[j]>>i)&1\\n    ans += cnt1 * (N-cnt1) * 2**i\\n    ans %= 10**9+7\\n\\nprint(ans)", "target": "353", "substitutes": {"N": ["F", "E", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "NS", "NE", "K", "O", "P", "B", "C", "T", "D", "Ne", "S", "I", "NT", "Ni", "Z", "Ns", "R", "J", "M", " n", "G", "n"], "A": ["a", "L", "At", "V", "H", "AI", "AS", "MA", "Y", "AP", "LA", "AR", "K", "AN", "AM", "P", "B", "C", "T", "As", "D", "Ar", "AC", "API", "mA", "AA", "Alpha", "S", "I", "Average", "CA", "U", "AF", "alpha", "M", "J", "G", "Am", "NA"], "ans": ["ss", "ano", "s", "a", "ents", "lan", "cas", "span", " answers", "amps", "nas", "atan", "na", "ms", "ai", "ats", "ions", "aning", "activation", "anas", "AN", "ANS", "anes", " news", "ann", "ani", "anc", "ana", "can", "nan", " means", "An", "anned", "ia", " scans", "aned", "nn", "ons", "ens", "sk", "cs", "leans", "ants", "ns", "man", "scan", "os", "ls", "cons", "ians", "plan", "an", "ins"], "i": ["gi", "ji", "k", "a", "ie", "int", "chi", "qi", "p", "ai", "g", "c", "o", "y", "im", "iu", "z", "si", "x", "ind", "I", "it", "l", "u", "pi", "d", "q", "io", "f", "m", "xi", "di", "ni", "ci", "J", "v", "b", "e", "id", "li", "ii", "n", "bi", "ip"], "cnt1": ["cnd1", " cnt0", " cnt2", "cnc9", "Cnt9", "cptn", "CNT9", "crt2", "cnt9", "cnd2", "cpt1", " crtOne", "CNT1", " crtn", "CNT0", "crtn", "cnt3", "crtN", "count0", "cnd9", " cnt3", "cnc1", " cnd9", "cctOne", "crt0", "cNTp", "cpt2", "CNTN", "cnt2", "cntN", "cptOne", " crt2", "cntn", "Cntp", "CNT2", " crt1", "Cnt1", "cNTN", "Cnt2", "count1", "cnd3", "cnd0", " cntOne", "cct1", "count2", "CntN", " cnt9", "cntp", " cnd3", "cct2", "crtOne", "count3", "CNTp", "cNT9", "cNT1", "cnc3", "cntOne", "crt1", "cptN", "cpt0", "cctn", "cNT2", "cnt0", "Cnt0", " cntn", "countp", "cndp", " cnd0", " cnd1", "cnc0", "count9", "cNT0"], "j": ["ji", "k", "a", "ie", "ja", "p", "ai", "g", "c", "jo", "y", "o", "jj", "ix", "pos", "jl", "z", "si", "x", "ind", "I", "l", "uj", "q", "f", "jp", "m", "oj", "aj", "ip", "ij", "J", "v", "b", "li", "kj", "ii", "n"]}}
{"code": "Q, H, S, D = map(int, input().split())\\nN = int(input())\\na = N // 2\\nb = N % 2\\n\\nmoney = a * min(8*Q, 4*H, 2*S, D) \\\\n        + b * min(4*Q, 2*H, S)\\n\\nprint(money)\\n", "target": "404", "substitutes": {"Q": ["F", "Hi", "E", "L", "V", "X", "Y", "Size", "Query", "K", "O", "P", "T", "C", "EC", "B", "MQ", "Question", "A", "W", "IX", "QL", "q", "Z", "U", "R", "J", "M", "Price", "G"], "H": ["F", "Hi", "E", "L", "V", "HS", "X", "DH", "Y", "Size", "K", "h", "Sh", "SH", "Ha", "TH", "P", "T", "C", "NH", "He", "A", "W", "EH", "His", "HK", "Z", "HM", "HH", "HI", "U", "R", "M", "HT", "G", "RH"], "S": ["F", "s", "E", "DS", "IS", "L", "V", "Es", "X", " s", "Y", "SE", "AS", "NS", "K", "Sh", "Si", "PS", "SH", "SI", "O", "P", "T", "C", "Sa", "A", "SL", "W", "Ds", "SS", "Z", "Ns", "CS", "U", "R", "M", "SU"], "D": ["s", "AD", "E", "L", "DS", "V", "DX", "X", "DH", "Y", "DM", "DE", "DIR", "DB", "O", "P", "B", "C", "T", "MD", "DD", "DT", "Ds", "d", "Do", "Des", "Z", "DF", "U", "R", "M", "G", "DI"], "N": ["F", "E", "L", "V", "NN", "X", "Y", "NS", "K", "O", "P", "B", "C", "T", "Ne", "A", "W", "NY", "Ni", "Z", "Ns", "U", "R", "M", "J", "Sum", " n", "G", "n"], "a": ["aa", "aff", "va", "p", "ai", "c", "aw", "fa", "i", "h", "o", "beta", "ba", "ab", "AA", "da", "A", "ar", "af", "w", "d", "f", "ca", "sa", " A", "ac", "m", "area", "amount", "am", "ae", "alpha", "ea", "e", "an", "ad", "n"], "b": ["s", "aa", "p", "bs", "g", "c", "i", " B", "h", "y", "o", "r", "B", "ba", "ab", "z", "A", "w", "sb", "cb", "l", "bb", "d", "f", "bd", "db", "bin", "v", "base", "e", "nb", "lb", "bi", "ad", "Bs", "n"], "money": ["coin", "cycle", "auto", "value", "fortune", "company", "chi", "currency", "ONEY", "margin", "price", "music", "how", "interest", "blue", "weight", "paid", "yahoo", "Money", "expensive", "mini", "div", "budget", "time", "cost", "buy", "payment", "machine", "q", "euro", "style", "fee", "cow", "amount", "lot", "base", "custom", "count", "fine", "dollar", "volume"]}}
{"code": "N = int(input())\\n\\nDP = [0 for _ in range(N + 1)]\\nDP[0] = 1\\nDP[1] = 1\\n\\nfor i in range(2, N + 1):\\n    DP[i] = DP[i - 1] + DP[i - 2]\\n\\nprint(DP[N])\\n\\n", "target": "152", "substitutes": {"N": ["F", "Length", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "Num", "NS", "K", "NM", "O", "P", "B", "C", "T", "D", "Len", "Ne", "S", "W", "I", "NT", "NG", "Ni", "Z", "Ns", "U", "R", "M", "J", "NB", " n", "G", "n"], "DP": ["Department", "TP", "Document", "DA", "DS", "NN", " UDP", "Q", "Push", "DC", "WP", "DM", "DE", "MP", "LP", "DO", "DATA", "DB", "P", "dB", "D", "NP", "IP", "DD", "PD", "LD", "DT", "GP", "PP", "W", "Address", "Dim", "DR", "NG", "PC", "Do", "DF", "AMP", "Data", "Dep", "BP", "CP", "DJ", "FP", "DK", "dp", "DL", "EP", "VP"], "_": ["k", "p", " I", " id", "num", " ip", " x", " seq", " time", " __", " line", "x", "ind", "I", "j", "len", "id"], "i": ["gi", "min", "k", "ui", "ei", "int", "p", "phi", "ai", "g", "c", " I", " id", "h", "ini", " ip", "iu", "P", "T", "D", "z", "si", "index", "x", "ind", "I", "uri", "l", "u", "d", "pi", "j", "f", "m", "II", "xi", "di", "ni", "ip", "ci", "v", "b", "id", "ii", "bi", "n"]}}
{"code": "import sys\\nsys.setrecursionlimit(1000000000)\\nimport math\\nfrom math import gcd\\ndef lcm(a, b): return a * b // gcd(a, b)\\nfrom itertools import count, permutations, chain\\nfrom functools import lru_cache\\nfrom collections import deque, defaultdict\\nfrom pprint import pprint\\nii = lambda: int(input())\\nmis = lambda: map(int, input().split())\\nlmis = lambda: list(mis())\\nINF = float('inf')\\nN1097 = 10**9 + 7\\n\\ndef meg(f, ok, ng):\\n    while abs(ok-ng)>1:\\n        mid = (ok+ng)//2\\n        if f(mid):\\n            ok=mid\\n        else:\\n            ng=mid\\n    return ok\\n\\ndef get_inv(n, modp):\\n    return pow(n, modp-2, modp)\\n\\ndef factorials_list(n, modp):    # 10**6\\n    fs = [1]\\n    for i in range(1, n+1):\\n        fs.append(fs[-1] * i % modp)\\n    return fs\\n\\ndef invs_list(n, fs, modp):     # 10**6\\n    invs = [get_inv(fs[-1], modp)]\\n    for i in range(n, 1-1, -1):\\n        invs.append(invs[-1] * i % modp)\\n    invs.reverse()\\n    return invs\\n\\ndef comb(n, k, modp):\\n    num = 1\\n    for i in range(n, n-k, -1):\\n        num = num * i % modp\\n    den = 1\\n    for i in range(2, k+1):\\n        den = den * i % modp\\n    return num * get_inv(den, modp) % modp\\n\\ndef comb_from_list(n, k, modp, fs, invs):   \\n    return fs[n] * invs[n-k] * invs[k] % modp\\n\\n#\\n\\nclass UnionFindEx:\\n    def __init__(self, size):\\n        #\u6b63\u306a\u3089\u6839\u306e\u756a\u53f7\u3001\u8ca0\u306a\u3089\u30b0\u30eb\u30fc\u30d7\u30b5\u30a4\u30ba\\n        self.roots = [-1] * size\\n    def getRootID(self, i):\\n        r = self.roots[i]\\n        if r < 0:   #\u8ca0\u306a\u3089\u6839\\n            return i\\n        else:\\n            r = self.getRootID(r)\\n            self.roots[i] = r\\n            return r\\n    def getGroupSize(self, i):\\n        return -self.roots[self.getRootID(i)]\\n    def connect(self, i, j):\\n        r1, r2 = self.getRootID(i), self.getRootID(j)\\n        if r1 == r2:\\n            return False\\n        if self.getGroupSize(r1) < self.getGroupSize(r2):\\n            r1, r2 = r2, r1\\n        self.roots[r1] += self.roots[r2]    #\u30b5\u30a4\u30ba\u66f4\u65b0\\n        self.roots[r2] = r1\\n        return True\\n\\nYes = 'Yes'\\nNo = 'No'\\n\\n\\ndef main():\\n    from fractions import Fraction\\n    N=ii()\\n    zero = 0\\n    d = defaultdict(lambda : [0, 0])\\n    for _ in range(N):\\n        x, y = mis()\\n        if x == y == 0:\\n            zero += 1\\n            continue\\n        if y < 0 or (y==0 and x < 0):\\n            x, y = -x, -y\\n        g = gcd(x, y)\\n        x //= g\\n        y //= g\\n        if x<=0:\\n            rot = True\\n            c = (y, -x)\\n        else:\\n            rot = False\\n            c = (x, y)\\n        d[c][rot] += 1\\n    #\\n    N -= zero\\n    ans = 1\\n    for (q1, q2) in d.values():\\n        ans *= (pow(2, q1, N1097) - 1) + (pow(2, q2, N1097) - 1) + 1\\n        ans %= N1097\\n    ans -= 1\\n    ans %= N1097\\n    print(ans + zero)\\n\\n\\n\\n\\n\\n\\nmain()\\n\\n", "target": "86", "substitutes": {"a": ["aa", "s", "auto", "va", "ma", "p", "ai", "c", "ama", "fa", "y", "la", "ba", "mA", "ab", "au", "da", "x", "pa", "A", "af", "ia", "d", "aaa", "sa", "ca", "m", "ac", " A", " fa", "ga", "aux", "am", "aj", "ae", "alpha", "ea", "an", "ad"], "b": ["s", "be", "ib", "fb", "p", "bs", "bp", "g", "c", "i", "y", "r", "wb", "beta", "B", "ba", "ab", "x", "sb", "bh", "bb", "d", "bf", "ob", "rb", "abb", "bd", "eb", "xb", "v", "base", "e", "bc", "abc", "lb", "bi"], "ii": ["ie", "qi", "init", "ai", "img", "phi", "i", "ix", "iq", "iu", "inf", "z", "si", "index", "I", "js", "iv", "iii", "II", "di", "ci", "iw", "zi", "li", "bi", "abi", "ti"], "mis": ["ris", "spec", "mn", "chi", "cas", "mits", "vec", "ma", "prop", "mi", "mor", "study", "phi", "ms", "vis", "isin", "miss", "ims", "mas", "inf", "sim", "mes", "phys", "mu", "tis", "voc", "sin", "phis", "mat", "scan", "Mi", "bin", "loss", "mm", "mc", "mix", "Mis", "sis", "feat", "mit"], "lmis": [" lmi", "Lmis", "lcmis", "Lmi", "lcMis", " lMis", "lMis", "lcmi", "lcms", "Lms", "lms", "LMis", " lms", "lmi"], "INF": ["INV", "inN", "inInf", "inV", "inF", "InV", "INN", "InF", " INN", " INV", "INInf", "InInf", "InN", " INInf"], "N1097": ["N1057", "N11096", "N15067", "N15057", "N1067", "N11097", "N15097", " N1067", " N1096", "N11057", " N1057", "N1096", "N11067", "N15096"], "f": ["F", "k", "p", "g", "c", "i", "o", "h", "rf", "fe", "inf", "fs", "z", "fc", "fn", "fm", "af", "w", "l", "d", "bf", "q", "j", "m", "fun", "self", "fen", "function", "func", "v", "e", "ref", "info"], "ok": ["error", "k", "loc", "mn", "org", "poly", "nd", "_", "ms", "ong", "c", "i", "o", "log", "md", "Ok", "inf", "oc", "ro", "nor", "w", "ind", "ko", "bug", "ak", "d", "nt", "q", "nz", "max", "mo", "bd", "og", "yes", "ku", "ori", "no", "OK", "ow", "ck", "my", "good", "all", "info", "id", "big", "next", "off"], "ng": ["new", "min", "gov", "wn", "loc", "sq", "mn", "dom", "eng", "win", "ong", "nd", "g", "ms", "ai", "low", "nc", "num", "king", "log", "went", "md", "rn", "inf", "great", "long", "nic", "rand", "nor", "aug", "index", "ring", "dm", "lang", "ind", "inc", "rog", "conn", "NG", "max", "nz", "nt", "gg", "gram", "ping", "lim", "no", "hi", "nr", "xp", "my", "bi", "micro", "mm", "big", "next", "ang", "org"], "mid": ["min", "mode", "middle", "loc", "end", "domain", "mr", "mn", "pid", "dom", "mor", "mi", "nd", "ms", "success", "nm", "exp", "low", "medium", "main", "pos", "md", "large", "broad", "mini", "rand", "bid", "ind", "start", "next", "d", "max", "nt", "mo", "cmd", "range", "m", "mate", "lim", "co", "no", "hi", "med", "way", "key", "dim", "mod", "good", "mm", "multi", "id", "sub", "Mid", "mc", "big", "feat", "micro"], "n": ["k", "p", "init", "g", "c", "i", "o", "y", "r", "num", "nc", "net", "ne", "z", "nu", "x", "gn", "sn", "node", "w", "l", "u", "d", "cn", "nt", "q", "nn", "j", "network", "m", "ns", "self", "no", "v", "np", "e", "N", "dn", "nb"], "modp": ["idm", "idp", "modP", "demP", "modping", "modm", "ModP", " modpa", "Modm", "Modping", "regP", " modP", "dempa", "demping", " modm", "regpa", "Modpa", "idP", " modping", "demp", "Modp", "regp", "modpa"]}}
{"code": "c = input()\\nalph = 'abcdefghijklmnopqrstuvwxyz'\\nprint(alph[alph.index(c) + 1 ])", "target": "501", "substitutes": {"c": ["a", "sc", "p", "g", "arc", "h", "case", "nc", "r", "C", "lc", "ce", "x", "cent", "cy", "cu", "w", "l", "ctx", "u", "d", "f", "ca", "cs", "ac", "cat", "icc", "cd", "dc", "input", "ci", "alpha", "b", "cf", "e", "cr", "bc", "cc", "xc", "abc", "n"], "alph": ["isl", "cur", "utf", "sc", "pha", "font", "al", "acc", "ele", "append", "auth", "alg", "result", "orig", "ph", "both", "oph", "uc", "anc", "cil", "ch", "x", "oct", " alphabet", "oper", "ah", "af", "ass", "cal", "hex", "sup", "cat", "char", "acs", "mask", "alpha", "path", "alias", "arch", "asc", "cf", "bc", "order", "cc", "hom", "eff", "ctr", "tch", "abc", "transform", "feed"]}}
{"code": "N = int(input())\\ns = [sorted(input()) for i in range(N)]\\ns.sort()\\nans = 0\\nfor i in range(N-1):\\n    if s[i] == s[i+1]:\\n        start = i\\n        end = N-1\\n        while start != end:\\n            center = (start + end) // 2\\n            if s[center] == s[i]:\\n                if s[center+1] == s[i]:\\n                    start = center+1\\n                else:\\n                    start = end = center\\n            else:\\n                end = center\\n        ans += start - i\\nprint(ans)", "target": "84", "substitutes": {"N": ["F", "MN", "Network", "Length", "L", "V", "NN", "H", "Q", "X", "Y", "NC", "Size", "Num", "NS", "NE", "NI", "K", "NM", "CNN", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "I", "No", "NT", "Ni", "Z", "Ns", "ns", "ND", "R", "M", "J", "SN", " n", "NA", "n"], "s": ["ss", "a", "strings", "south", "qs", "ins", "words", "p", "states", "ps", "g", "c", "xs", "ions", "sets", "o", "y", "ks", "resses", "si", "es", "als", "blocks", "outs", "S", "ands", "w", "sites", "l", "parts", "u", "ses", "d", "erences", "services", "js", "f", "m", "sync", "ments", "ns", "ws", "features", "os", "abs", "ts", "b", "v", "gs", "e", "ls", "t", "ips", "ds", "n"], "i": ["ih", "k", "ui", "a", "ei", "int", "ie", "qi", "p", "init", "ai", "c", "o", "y", "ix", "ini", "iu", "api", "ani", "mini", "si", "eni", "index", "x", "ind", "I", "uri", "l", "u", "pi", "d", "io", "j", "f", "m", "xi", "ori", "di", "ni", "ip", "ci", "v", "b", "limit", "e", "t", "multi", "id", "zi", "li", "ii", "source", "anti", "n", "ti"], "ans": ["ano", "ents", "lan", "span", "nas", "amps", "offs", "na", "ai", "ats", "ions", "aning", " starts", "activation", "AN", "ANS", "anes", "ks", "asts", "mean", "annels", "vs", "ann", "anse", "ani", "anc", "ays", "can", "nan", " means", "ars", " scans", "args", "lines", "aned", "ations", "ids", "ons", "aus", "ens", "sk", "leans", "ants", " spans", "ns", "scan", "shape", "ases", "ni", "os", "cons", "ls", "ians", "ds", "an", "ins"], "start": ["min", "middle", "last", "rest", "line", "int", "part", "Start", "p", "init", "case", "use", "ix", "pos", "like", "size", "scale", "art", "index", "source", "st", "begin", "ind", "u", "max", "shift", "style", "core", "stop", "set", "ci", "length", "type", "len", "space", "origin", "count", "starting", "id", "send", "step", "skip", "range", "next", "mid", "ad", "offset", "n"], "end": ["ion", "k", "middle", "last", "rest", "End", "open", "ends", "est", "nd", "c", "append", "case", "en", "pos", "size", "z", "edge", "index", "begin", "ind", "u", "d", "max", "vert", "range", "position", "END", "core", "stop", "ension", "ended", "set", "length", "ize", "len", "limit", "e", "origin", "ice", "order", "id", "inner", "after", "ending", "ad", "offset", "n"], "center": ["centered", "middle", "ance", "south", " centre", "enter", "init", "location", "c", "context", "ix", "instance", "head", "iter", "left", "size", "central", "starter", "edge", "scale", "eni", "index", "ce", "cent", "x", "winner", "begin", "anch", "Center", "u", "max", "shift", "f", "point", "none", "core", "half", "ci", "ide", "limit", "cf", "origin", "ice", "id", "inner", "here", "anti", "mid", "offset", "n"]}}
{"code": "import sys\\nsys.setrecursionlimit(1000000)\\n\\nclass UnionFind():\\n    def __init__(self, n):\\n        self.n = n\\n        self.parents = [-1] * n\\n        # \u89aa\u306e\u756a\u53f7 \u6839\u306a\u3089\u8981\u7d20\u6570(\u8ca0\u306e\u6570)\\n\\n    def find(self, x):\\n        \"\"\"\u6728\u306e\u6839\u3092\u6c42\u3081\u308b\"\"\"\\n        if self.parents[x] < 0:\\n            return x\\n        else:\\n            self.parents[x] = self.find(self.parents[x])\\n            return self.parents[x]\\n\\n    def unite(self, x, y):\\n        \"\"\"x\u3068y\u306e\u5c5e\u3059\u308b\u96c6\u5408\u3092\u4f75\u5408\"\"\"\\n        x = self.find(x)\\n        y = self.find(y)\\n        if x == y:\\n            return\\n        if self.parents[x] > self.parents[y]:\\n            x, y = y, x\\n        self.parents[x] += self.parents[y]\\n        self.parents[y] = x\\n\\n    def same(self, x, y):\\n        \"\"\"x\u3068y\u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u5426\u304b\"\"\"\\n        return self.find(x) == self.find(y)\\n\\n    def size(self, x):\\n        \"\"\"\u30b0\u30eb\u30fc\u30d7\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3059\"\"\"\\n        return -self.parents[self.find(x)]\\n\\nN , M = map(int, input().split())\\np = list(map(int, input().split()))\\nxy = [list(map(int, input().split())) for _ in range(M)]\\nuf = UnionFind(N)\\nfor x, y in xy:\\n    uf.unite(x - 1, y - 1)\\nans = 0\\n\\nfor i in range(N):\\n    if uf.same(i, p[i] - 1):\\n        ans += 1\\n\\nprint(ans)\\n", "target": "367", "substitutes": {"self": ["name", "k", "Self", "full", "other", "part", "me", "method", "p", "event", "ps", "worker", "g", "host", "c", "plus", "context", "h", "r", "work", "instance", "this", "wrapper", "x", "now", "node", "w", "only", "user", "obj", "d", "f", "object", "m", "man", "parent", "func", "v", "b", "e", "t", "add", "cl", "er", "home", "ref"], "n": [" N", "min", "s", "k", "name", "span", "p", "init", "g", "c", "i", "o", "number", "nc", "num", "r", "rn", "names", "nu", "ne", "z", "index", "x", "fn", "nan", "sn", "node", "nat", "l", "u", "d", "cn", "nt", "nn", "root", "j", "f", "network", "m", "Ns", "ns", "parent", "no", "nr", "b", "v", "np", "t", "N", "all", "pn", "e", "nb"], "parents": ["levels", "pid", "members", "p", "kids", "c", "tips", "relations", "children", "names", "Parents", "blocks", "params", "stack", "args", "lines", "root", "ids", "depth", "parent", "list", "features", "data", "tree", "path", "keys", "config"]}}
{"code": "s = list(map(str, input()))\\n\\nif len(s) == len(set(s)):\\n    print('yes')\\nelse:\\n    print('no')\\n", "target": "642", "substitutes": {"s": ["strings", "a", "str", "groups", "words", "p", "states", "xs", "c", "g", "i", "sym", "sets", "o", "r", "results", "es", "params", "blocks", "S", "sb", "args", "parts", "lines", "ses", "d", "items", "services", "l", "u", "f", "ssl", "m", "input", "gs", "b", "string", "v", "letters", "e", "ls", "t", "ds", "source", "comments", "n"]}}
{"code": "import sys\\n\\ndef input():\\n    return sys.stdin.readline()[:-1]\\n\\ndef mi():\\n    return map(int, input().split())\\n\\ndef ii():\\n    return int(input())\\n\\n\\ndef main():\\n    N, M = mi()\\n    X = list(mi())\\n    X.sort()\\n    if N >= M:\\n        print(0)\\n        return\\n    dif = [(X[i+1]-X[i], i) for i in range(M-1)]\\n    dif.sort(reverse=True)\\n    koma = [-1]+[dif[i][1] for i in range(N-1)]+[M-1]\\n    print(sum(X[koma[i+1]]-X[koma[i]+1] for i in range(N)))\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "9", "substitutes": {"N": ["F", "MN", "E", "L", "NO", "V", "H", "NL", "Q", "Y", "MI", "Size", "Num", "NS", "NE", "K", "Na", "NM", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "A", "W", "I", "No", "Node", "Ni", "Z", "Ns", "U", "R", "Mi", "J", "NB", "G", " n", "NA", "Mo", "n"], "M": ["F", "MN", "E", "L", "V", "ME", "H", "Q", "Y", "K", "DM", "NM", "O", "P", "T", "B", "C", "D", "MD", "S", "W", "CM", "I", "MB", "IM", "Z", "m", "MC", "U", "R", "Mi", "J", "MS", "Multi", "MF", "MM", "MU", "G", "Mo", "n"], "X": ["F", "ID", "E", "CE", "L", "V", "XM", "IF", "H", "DX", "Q", "XX", "Y", "Check", "Mine", "Fe", "XP", "Sample", "Form", "K", "MX", "Test", "ZX", "FF", "P", "T", "Int", "D", "IP", "Sync", "x", "PE", "S", "Zip", "W", "IX", "XXX", "File", "I", "Model", "Matrix", "Do", "TX", "Z", "Data", "Code", "Array", "Value", "U", "UX", "Time", "List", "J", "XL", "G", "Ex", "Co", "ML", "Work", "Cross", "Control"], "dif": ["Dif", "xIF", "diw", "xif", "xdim", "sdif", "dift", "dIF", "sdIF", "sdiw", "dsii", "xim", " dIF", "xdif", "diff", "xdIF", "xift", "dtif", "Dim", "dsif", "Dtif", "fif", " diw", "DIF", "fiw", "xtif", "dii", "dsIF", "Dii", "dstif", "xii", "fIF", "dim", " diff", "xdift", "sdiff", "Dift", "fiff"], "i": ["gi", "ji", "name", "k", "ui", "a", "ie", "int", "chi", "qi", "mi", "p", "phi", "ai", "c", "oi", "y", "o", "ini", "iu", "api", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "I", "it", "l", "u", "pi", "d", "fi", "uri", "f", "j", "io", "m", "cli", "xi", "di", "ni", "ci", "ip", "v", "b", "e", "t", "info", "zi", "id", "li", "ii", "n"], "koma": ["keomi", "ikkomas", "workomi", "ikroma", "dkoma", "komas", "keroma", "Koma", "dkomi", "Karma", "ikoma", " kama", "workroma", "dkroma", "workoma", "kama", "karma", "ikuma", "ikomas", "Komas", "komi", "keomas", "ikkuma", "ikama", "kroma", " kroma", " karma", "ikkroma", "Kroma", "ikkoma", "keoma", "ikarma", "kuma", "Kuma", "workomas", "Kama", "dkomas"]}}
{"code": "a,b,c =  input().split()\\nA = int(a)\\nC = int(c)\\nif b == \"+\":\\n    x = A + C\\n    print(x)\\nelse:\\n    y = A - C\\n    print(y)", "target": "543", "substitutes": {"a": ["aa", "va", "p", "ai", "g", "i", "r", "api", "ab", "ana", "da", "w", "u", "d", "f", "sa", "ac", "asa", "m", "ca", "am", "ae", "alpha", "v", "ea", "e", "an", "ad", "n"], "b": ["aa", "be", "fb", "p", "bs", "g", "i", "r", "wb", "B", "ba", "ab", "cy", "sb", "cb", "bb", "d", "rb", "u", "abb", "f", "eb", "m", "v", "base", "e", "bc", "abc", "nb", "bi", "ad", "n"], "c": ["s", "k", "cur", "p", "g", "center", "r", "h", "z", "ch", "ce", "cy", "cu", "con", "u", "d", "cn", "f", "ca", "cs", "ac", "ci", "ct", "cf", "e", "cr", "count", "cc", "col", "n"], "A": ["F", "At", "Az", "Area", "X", "Y", "AP", "Adam", "LA", "EA", "Yes", "Exactly", "FA", "AB", "P", "B", "T", "As", "D", "Ar", "AU", "API", "AC", "AA", "Alpha", "W", "Application", "I", "Ab", "ca", "Average", "Code", "Array", "CA", "U", "AF", "M", "N", "Auto", "G", "Am", "NA", "Ang", "Ac", "App"], "C": ["F", "E", "L", "FC", "V", "CI", "Cu", "H", "OC", "CU", "X", "Q", "Y", "NC", "DC", "K", "O", "P", "B", "T", "D", "AC", "EC", "S", "GC", "W", "LC", "CM", "KC", "I", "VC", "PC", "Sc", "Z", "CA", "MC", "U", "R", "JC", "M", "CC", "N", "G"], "x": ["dx", "int", "code", "X", "p", "xs", "i", "yx", "width", "xx", "h", "rx", "ix", "px", "pos", "z", "ex", "w", "cross", "l", "u", "d", "f", "ax", "point", "m", "xi", "data", "v", "e", "xy", "xc", "n"], "y": ["s", "cycle", "dy", "code", "p", "Y", "i", "yx", "o", "ay", "year", "z", "index", "cy", "w", "ny", "d", "sy", "f", "m", "ac", "yy", "ya", "type", "v", "e", "t", "xy", "py", "vy", "ry", "ey", "sky", "n"]}}
{"code": "s = input()\\nl = len(s)\\na = s[0:(l-1)//2]\\nb = len(a)\\nprint(\"Yes\" if s == s[::-1] and a == a[::-1] else \"No\")", "target": "420", "substitutes": {"s": ["ss", "sq", "strings", "south", "ans", "p", "states", "ps", "g", "c", "xs", "i", "sets", "o", "h", "sl", "y", "sf", "si", "es", "search", "S", "w", "cells", "sb", "tests", "args", "services", "ses", "d", "parts", "less", "sg", "u", "f", "rs", "sa", "ssl", "m", "cs", "ns", "self", "input", "su", "data", "gs", "v", "ts", "e", "ls", "t", "ds", "se", "sv", "source", "n"], "l": ["lp", "k", "ol", "L", "p", "g", "c", "i", "o", "sl", "h", "el", "la", "lc", "kl", "z", "u", "ll", "f", "dl", "ln", "m", "nl", "length", "fl", "len", "v", "e", "ls", "li", "ul", "cl", "lb", "n"], "a": ["aa", "va", "another", "missing", "p", "g", "c", "i", "y", "h", "asha", "ba", "ab", "array", "pa", "da", "x", "A", "ar", "w", "args", "u", "d", "aaa", "f", "ca", "sa", "ac", "asa", "ga", "area", "am", "aj", "input", "ae", "ya", "alpha", "ea", "e", "abc", "an", "ad", "n"], "b": ["p", "bp", "c", "y", "beta", "B", "ba", "ab", "z", "A", "body", "sb", "w", "bb", "d", "bf", "f", "j", "m", "v", "e", "abc", "nb", "n"]}}
{"code": "A, B, C = map(int,input().split())\\n(A, B) = (B, A)\\n(A, C) = (C, A)\\nprint(A, B, C)", "target": "499", "substitutes": {"A": ["F", "AT", "AD", "Access", "E", "Ca", "Act", "a", "L", "At", "All", "Az", "H", "AS", "X", "AI", "Y", "Area", "AP", "Adam", "LA", "EA", "Na", "Ha", "AN", "AB", "AM", "O", "P", "AU", "As", "D", "Ar", "mA", "AC", "T", "AA", "API", "And", "Alpha", "S", "W", "What", "AH", "I", "SA", "Average", "Data", "Offset", "ac", "Auth", "Array", "CA", "U", "AF", "Input", "R", "M", "AY", "Add", "N", "Am", "Ang", "The", "AW", "Ac", "An", "App"], "B": ["F", "E", "Br", "L", "LB", "CU", "X", "CB", "Bi", "Core", "DB", "BA", "AB", "FB", "O", "P", "T", "D", "BB", "BC", "BI", "But", "TB", "Tab", "W", "File", "I", "MB", "Ab", "Class", "BE", "Two", "OB", "Big", "WB", "Pl", "Beta", "U", "Blue", "R", "GB", "M", "Sub", "b", "Part", "QB", "N", "G", "BF", " b", "Bs"], "C": ["F", "E", "Ca", "L", "Cs", "New", "V", "Cu", "H", "CU", "SC", "Q", "Y", "c", "UC", "DC", "K", "Core", "P", "T", "D", "Cy", "EC", "AC", "BC", "S", "W", "Can", "CM", "I", "Class", "Ch", "Sc", "Con", "Code", "Cos", "CL", "CA", "Cl", "U", "R", "M", "CC", "CN", "Cons", "N", "Chain", "Case", "G", "Co", "CR", "Category", "Count"]}}
{"code": "import bisect\\n\\n\\ndef main():\\n    INF = 10 ** 10\\n    N = int(input())\\n    A = [int(input()) for _ in range(N)]\\n    A.reverse()\\n    B = [INF for _ in range(N)]\\n    for a in A:\\n        index = bisect.bisect_right(B, a)\\n        B[index] = a\\n    ans = 0\\n    for b in B:\\n        if b == INF:\\n            break\\n        ans += 1\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "245", "substitutes": {"INF": ["inV", " INf", " INFF", "INV", "inInf", "PINF", "inf", "InV", "InF", "inFER", " inF", "INf", "INInf", "InInf", "Inf", " inInf", " INInf", "InFER", "PINFF", " INV", " INFER", "INFF", "INFER", " inFF", "inF", "PINInf"], "N": ["F", "E", "Number", "L", "V", "H", "Q", "X", "Y", "Size", "Num", "NS", "K", "Na", "AN", "O", "P", "C", "Len", "D", "T", "S", "W", "I", "Z", "Ns", "R", "Part", "M", " n", "G", " Ne", "NA", " NI", "NUM", "n"], "A": ["F", "GA", "Ca", "At", "Az", "AS", "Y", "AP", "ai", "Af", "LA", "AR", "Ay", "Na", "BA", "AB", "AM", "P", "C", "AU", "As", "AC", "D", "Ar", "API", "au", "AA", "mA", "Alpha", "S", "I", "Ab", "Ma", "Average", "Array", "CA", "AF", "alpha", "G", "Am", "NA", "Ac", "An", "App"], "_": [" p", " block", "code", "non", "p", "i", "r", "num", " x", " seq", " time", " __", "long", "x", "d", "q", "out", "f", "lib", " dev", "ac", " non", "id", "val", "block", "ip"], "B": ["F", "E", "EB", "L", "LB", "V", "X", "Y", "K", "Bi", "DB", "BA", "AB", "O", "Bu", "P", "T", "C", "D", "SB", "BB", "BC", "BI", "S", "TB", "W", "I", "MB", "Ab", "BE", "Z", "BL", "OB", "WB", "Beta", "U", "GB", "R", "M", "NB", "Both", "Other", "G", "BF", "Bs"], "a": ["aa", "auto", "va", "span", "ma", "p", "na", "qa", "ai", "c", "i", "fa", "r", "ba", "mA", "ab", "z", "da", "x", "pa", "af", "w", "l", "ach", "sha", "aaa", "ca", "f", "sa", "ac", "ga", "area", "ae", "alpha", "ea", "an", "ad", "n"], "index": ["ion", "name", "aa", "loc", "int", "span", "na", "ai", "c", "element", "i", "append", "number", "num", "ini", "axis", "pos", "instance", "slice", "array", "x", "ind", "inc", "body", "nn", "f", "position", "address", "shape", "length", "bin", "type", "key", "base", "bi", "count", "Index", "id", "part", "block", "active", "offset", "n"], "ans": ["s", "offs", "span", "cas", "ins", "lan", "ends", "na", "ai", "ats", "ions", "AN", "ANS", "aces", "ann", "anon", "ani", "anc", "ana", "errors", "blocks", "can", "nan", "An", "anned", "ars", "af", " scans", "args", "aned", "ace", "nn", "ons", "aus", "ids", "ln", "ants", " spans", "ns", "scan", "ases", "bin", "ls", "ANN", "ops", "NA", " cases", "an"], "b": ["s", "k", "be", "aa", "ib", "p", "bs", "bp", "c", "i", "y", "number", " i", "ba", "ab", "z", "x", "ind", "sb", "bb", "d", "abb", "f", "eb", "abs", "e", "bc", "count", "nb", "lb", "bi", "ad", "offset", "n"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\n\\nn = int(input())\\na = list( map(int, input().split()))\\n\\nfrom itertools import accumulate\\nacc = a\\nacc = list(accumulate(acc))\\n\\ndef dfs(ind,prev,tmp,ans):\\n    if ind == n:\\n        return ans\\n    now = acc[ind]\\n\\n    if prev > 0:\\n        if now + tmp >= 0:\\n            ans +=abs(now + tmp +1)\\n            tmp += -(now + tmp +1)\\n    elif prev < 0:\\n        if now + tmp <= 0:\\n            ans +=abs(now + tmp -1)\\n            tmp += -(now + tmp -1)\\n\\n    return dfs(ind+1, now+tmp,tmp,ans)\\n\\nansM = dfs(0,-1,0,0)\\nansP = dfs(0,+1,0,0)\\n\\nprint(min(ansM,ansP))\\n", "target": "178", "substitutes": {"input": ["error", "call", "amp", "raw", " output", "until", "int", "reader", "request", "method", "p", "enter", "c", "element", "i", "target", "result", "comment", "iter", "empty", "temp", "uc", "config", "index", "expression", "url", "current", "exec", "accept", "buffer", "out", "wait", "f", "pull", "output", "parent", "list", "data", "Input", "length", "type", "view", "select", "help", "print", "submit", "source", "param", "form", "feed", "ref"], "n": [" N", "s", "k", "span", "p", "na", "c", "i", " ni", "o", "y", "nc", "num", "net", "ne", "z", "fn", "nan", "sn", "l", "u", "d", "nt", "nn", "max", "j", "m", "Ns", "ns", "ni", " ns", "nr", "b", "np", "N", " num", "nb", " na"], "a": ["aa", "s", "ma", "p", "access", "ai", "na", "c", "aw", "i", "instance", "ba", "ab", "au", "array", "da", "A", "ata", "args", "account", "aaa", "ca", "sa", " A", "ac", "ga", "aux", "am", "aj", "data", "alpha", "b", "t", "e", "all", "an", "ad"], "acc": ["aa", "call", "raw", "ack", "amp", "cmp", "Acc", "sc", "method", "arr", "access", "na", "ai", "process", "c", "rec", "result", "instance", "app", "ACC", "inf", "attr", "ann", "ab", "anc", "uc", "array", "att", "index", "cache", "A", "inc", "account", "fac", "ac", "agg", "comb", "aux", "ait", "scan", "ae", "batch", "alpha", "CC", "asc", "order", "cc", "seq", "abc", "config", "test", "feed"], "ind": ["loc", "end", "wind", "ie", "int", "cycle", "dir", "pre", "nd", "img", "init", "i", "ix", "pos", "app", "md", "year", "inf", "ord", "ann", "opp", "index", "Ind", "inc", "start", "pred", "adj", "obj", "d", "nt", "ff", "j", "inst", "old", "kind", "inn", "order", "count", "id", "IND", "inner", "ii", "keep", "next", "front"], "prev": ["new", "cur", "loc", "cmp", "last", "wp", "p", "pre", "init", "var", "over", "post", "past", "app", "first", "vs", "mp", "rev", "start", "pred", "current", "adj", "obj", "before", "nt", "iv", "jp", "inst", "old", "nr", "v", "np", "Prev", "vious", "skip", "after", "next", "info"], "tmp": ["ott", "cur", "amp", "pre", "ai", "cp", "current", "ff", "etc", "pad", "np", "fake", "order", "part", "new", "cmp", "img", "pos", "api", "done", "temp", "proc", "mp", "page", "jp", "pp", "old", "yy", "duration", "ppa", "fast", "next", "offset", "wp", "p", "tp", "buf", "sp", "ann", "time", "cache", "start", "cb", "sup", "area", "pkg", "oa", "stuff", "py", "treatment", "front", "post", "kk", "txt", "diff", "rb", "nt", "nn", "aaa", "aux", "aj", "vt", "mm", "after", "nb", "test"], "ans": ["news", "ss", "s", "amp", "ano", "auto", "cmp", "ents", "span", "amps", "nas", "ams", "cas", "na", "eps", "ai", "xs", "ats", "ions", "aps", "anas", "ads", "ANS", "ks", "vs", "ann", "aces", "ani", "au", "ana", "ays", "params", "x", "nan", "outs", "args", "lines", "aned", "ations", "items", "d", "allows", "ons", "aus", "stats", "atts", "trans", "sk", "cs", "none", "ants", "acs", "ns", "df", "scan", "aux", "data", "abs", "acts", "ls", "all", "ds", "an", "ad", "ins"], "now": ["new", "amp", "auto", "last", "company", "NOW", "default", "aw", "night", "currently", "post", "ready", "low", "always", "orig", "never", "since", "wh", "this", "md", "ord", " NOW", "size", "array", "current", " already", "obj", "home", "before", "max", "nn", "nt", "own", "aaa", "once", "sup", "hand", "nw", "inst", "found", "self", "old", "age", "Now", "no", "length", "stuff", " cur", "aaaa", "ow", "today", "count", "info", "after", "next", "front", "off", "where"], "ansM": ["rasM", "nsU", "adsP", "ksI", "nesM", "nsm", "adsm", "rasS", "ansm", "ansI", "naP", "ksm", "naU", "ansU", "ksS", "adsM", "nsP", "adsU", "nam", "nesm", "naM", "ksM", "nsM", "rasm", "ansS", "rasI", "nesI", "nesS"], "ansP": ["anEP", "annP", "anS", "amsM", "anesM", "ansp", "lanP", "amsTP", "amsA", "ansEP", "anesTP", "anesP", "anP", "annA", "lanS", "anp", "annTP", "ansA", "lanp", " ansEP", " ansp", "annM", "lanEP", "ansTP", "ansS", "amsP", " ansS", "anesA"]}}
{"code": "length = int(input())\\neles = [int(l) for l in input().split()]\\ntimes = 0\\n\\nfor i in range(length-1):\\n    _min = i\\n    for j in range(i, length):\\n        if eles[j] < eles[_min]:\\n            _min = j\\n    if i != _min:\\n        eles[i], eles[_min] = eles[_min], eles[i]\\n        times += 1\\n\\nprint(*eles)\\nprint(times)", "target": "666", "substitutes": {"length": ["Length", "loc", "k", "line", "vel", "level", "p", "distance", "rows", "width", "delay", "h", "case", "number", "section", "slice", "split", "size", "long", "z", "square", "time", "index", "x", "lines", "angle", "f", "position", "sequence", "depth", "shape", "duration", "type", "len", "limit", "b", "path", "e", "count", "id", "ength", "range", "total", "n"], "eles": [" els", " elites", " elis", "ylES", "Elines", "ellches", "ylists", "elions", "ele", "celes", "ellses", "elizes", "eleES", "eltes", "elches", "ellines", "elses", "elsES", "elES", "yles", "elss", "eleses", "elists", " elions", "ylites", "eleists", "ElES", "eleions", "elites", "eleizes", "ellis", "els", "ylines", "ellES", "elee", " ele", "elle", "Elists", "elsites", "eleines", "celches", "cels", "ellists", "elees", "elsists", "elte", "elles", " elches", "Eles", " elines", "ells", "elis", "ylses", "elts", "celES", "elsines", "elines", " elists", " elES", " elizes", "Elizes", "elsions", "eltis"], "l": ["lp", "s", "k", "loc", "L", "ie", "p", "g", "c", "o", "sl", "r", "lr", "el", "la", "left", "lo", "lc", "kl", "z", "bl", "u", "d", "ll", "f", "ln", "m", "list", "lit", "len", "b", "v", "ell", "e", "ls", "il", "li", "ul", "lin", "n"], "times": ["imes", "s", "ths", "checks", "shows", "eps", "Times", "pages", "hours", "rows", "ms", "steps", "xs", "cases", "tips", "values", "ks", "aces", "ones", "errors", "time", "months", "blocks", "events", "history", " Times", "cells", "tests", "runs", "lines", "js", "cs", "forces", "days", "types", "tracks", "dates", "features", "ts", "acts", "ls", "its", "icks", "places", "ins"], "i": ["ji", "k", "ui", "a", "ie", "int", "line", "p", "phi", "ai", "c", "o", "y", "r", "ix", "iu", "z", "si", "time", "index", "x", "ind", "start", "I", "u", "pi", "d", "f", "io", "m", "xi", "ni", "ip", "ci", "ij", "v", "b", "e", "t", "id", "li", "ii", "bi", "n"], "_min": [" _mins", "_max", "jid", "_id", " _Min", " _id", "jstart", " _start", "mpos", " _pos", " _index", "fullmax", "mmax", "premax", "_mins", "mmins", " _diff", "_index", "premin", "fullstart", "jMIN", "fullMIN", " _max", "Jmins", "jmax", "jmins", "Jmin", "fullmin", " _in", "preindex", "preMin", "jindex", "_Min", "mmin", "_pos", "_start", "jMin", "_in", "_diff", "_MIN", "jmin", " _MIN", "Jdiff", "jin", "jpos", "JMIN"], "j": ["ji", "k", "end", "a", "ie", "int", "p", "_", "c", "y", "o", "jj", "ix", "im", "h", "el", "jl", "z", "si", "index", "x", "ind", "start", "I", "it", "u", "d", "max", "q", "js", "f", "jp", "m", "ni", "ij", "J", "v", "b", "e", "li", "ii", "n"]}}
{"code": "def main():\\n    n, k = map(int, input().split())\\n    print(k*((k-1)**(n-1)))\\n\\nif __name__ == '__main__':\\n    main()", "target": "582", "substitutes": {"n": ["name", "p", "c", "i", "o", "y", "nc", "num", "h", "pos", "ne", "z", "index", "x", "fn", "nan", "w", "l", "u", "d", "cn", "nn", "q", "f", "j", "network", "m", "ns", "no", "v", "b", "N", "pn", "nb", "an"], "k": ["kid", "ke", "p", "g", "c", "i", "K", "y", "o", "number", "num", "kk", "h", "ks", "kn", "z", "x", "mk", "kw", "ko", "ak", "l", "ok", "u", "d", "q", "j", "sk", "f", "m", "kick", "length", "b", "key", "v", "ck", "N", "count", "id"]}}
{"code": "n, k = map(int, input().split())\\n\\nanswer = k*((k-1)**(n-1))\\nprint(answer)\\n", "target": "582", "substitutes": {"n": ["name", "p", "g", "c", "i", "o", "number", "y", "num", "net", "un", "size", "kn", "z", "fn", "x", "l", "u", "d", "q", "f", "network", "j", "m", "ns", "nl", "v", "b", "t", "N", "e", "nb"], "k": ["s", "kid", "p", "g", "c", "i", "dk", "K", "y", "o", "h", "num", "kk", "ks", "size", "kn", "z", "x", "ka", "ko", "ak", "l", "ok", "u", "d", "q", "j", "sk", "f", "m", "ku", "kick", "b", "key", "v", "e", "N", "ik"], "answer": ["sen", "value", " answers", "reply", "p", "number", "result", "results", "knowledge", "z", "array", "search", "response", "cache", "ask", "q", "score", "f", "term", "option", "address", "rank", "output", "area", "entry", "fee", "data", "average", "question", "answered", "ell", "order", "grade", "energy", "word", "Answer", "offset"]}}
{"code": "from collections import deque\\nn, m = map(int, input().split())\\nedges = [[] for _ in range(n)]\\nfor _ in range(m):\\n    u, v = map(int, input().split())\\n    u -= 1\\n    v -= 1\\n    edges[u].append(v)\\n\\ns, t = map(int, input().split())\\ns -= 1\\nt -= 1\\n#dfs\\nfrom_s = [[-1]*3 for _ in range(n)]\\nd_s = deque()\\nd_s.append((s, 0))\\nfrom_s[s][0] = 0\\nwhile d_s:\\n    p, count = d_s.popleft()\\n    next_count = (count + 1) % 3\\n    for c in edges[p]:\\n        if from_s[c][next_count] != -1:\\n            continue\\n        from_s[c][next_count] = from_s[p][count] + 1\\n        d_s.append((c, next_count))\\nif from_s[t] == -1:\\n    print(-1)\\nelse:\\n    print(from_s[t][0]//3)\\n", "target": "795", "substitutes": {"n": [" N", "k", "p", " w", " number", "c", "i", " ni", "h", "o", "num", " i", " c", "r", "y", "ne", "z", " ne", "x", "sn", "node", "w", "l", "d", "ln", "j", "f", "network", "ns", " ns", "M", "b", "e", "N", "id", " l", "nb"], "m": ["middle", "mn", "tm", "rm", "p", "ms", "g", "c", "i", "y", "o", "r", "h", "im", "ym", "md", "z", "mini", "x", "dm", "mu", "w", "cm", "l", "d", "f", "imm", "bm", "M", "b", "e", "mm", "hm"], "edges": ["endedices", "indices", "indge", "pedge", "Edges", "edices", "edries", "adges", "endedGES", "edwards", "Edge", "pedges", "pedices", "ledGES", "edge", "Edries", "adGES", "edGES", "Edices", "endedwards", "ledices", "ledwards", "pedries", "adwards", "ledges", "endedges", "indges", "adices", "indries"], "_": [" lines", " arg", " block", "__", " local", " function", " get", " row", " ip", " seq", " time", " line", "x", " un", " q", " the", "f", " o", " non", " sub", " self", " all"], "u": ["k", "ui", "a", "uv", "ur", "p", "g", "c", "i", "o", "y", "r", "un", "iu", "nu", "uid", "z", "ou", "uc", "x", "cu", "mu", "w", "l", "d", "q", "f", "eu", "ue", "up", "tu", "us", "U", "su", "lu", "b", "e", "id", "ul", "ru", "uu"], "v": ["k", "vi", "ui", "ve", "uv", "V", "va", "p", "g", "c", "i", "y", "o", "r", "en", "lv", "vs", "vin", "z", "vp", "x", "nv", "w", "l", "d", "q", "j", "f", "vol", "vv", "b", "e", "vy", "sv", "ul", "vd"], "s": ["ss", "ys", "sh", "ends", "p", "ps", "ms", "c", "sym", "i", "sets", "o", "y", "r", "ves", "sie", "ks", "fs", "si", "es", "x", "S", "l", "d", "cs", "ns", "ws", "us", "os", "ts", "b", "gs", "e", "ls", "ds", "se", "its", "sv", "ies"], "t": ["k", "at", "tt", "p", "g", "c", "i", "y", "o", "r", "ot", "tp", "h", "tom", "pt", "T", "tf", "unt", "z", "ty", "w", "ant", "l", "d", "q", "ta", "f", "j", "dt", "tu", "ts", "b", "type", "e", "tz", "ti"]}}
{"code": "# O(N)\\ndef is_not_empty(A):\\n    for x in A:\\n        if x:\\n            return True\\n    return False\\n\\ndef main():\\n    import sys\\n    input = sys.stdin.readline\\n    from collections import deque\\n\\n    N = int(input())\\n    # 1-indexed\\n    A = [deque() for _ in range(N+1)]\\n    # O(N^2)\\n    for i in range(1,N+1):\\n        for j in input().split():\\n            A[i].append(int(j))\\n\\n    # \u5f53\u65e5\u306e\u53c2\u52a0\u8005\\n    today = set()\\n    # \u521d\u65e5\\n    for i in range(1,N+1):\\n        # \u65e2\u306b\u53c2\u52a0\u3057\u305f\u4eba\u306f\u30c0\u30e1\\n        if i in today:\\n            continue\\n        enemy = A[i].popleft()\\n        ME = A[enemy].popleft()\\n        if ME == i and not(enemy in today):\\n            today.add(ME)\\n            today.add(enemy)\\n        else:\\n            A[i].appendleft(enemy)\\n            A[enemy].appendleft(ME)\\n    # \u521d\u65e5\u306b\u8ab0\u3082\u8a66\u5408\u3067\u304d\u306a\u304b\u3063\u305f\u3068\u304d\\n    if not today:\\n        print(-1)\\n        exit()\\n\\n    # \u524d\u65e5\u306e\u53c2\u52a0\u8005\\n    yesterday = today\\n    # \u65e5\u6570\\n    answer = 1\\n    while is_not_empty(A):\\n        today = set()\\n        # \u524d\u65e5\u306b\u8a66\u5408\u3057\u305f\u4eba\u306f\u5fc5\u305a\u6b21\u306e\u65e5\u306b\u8a66\u5408\u3059\u308b\\n        for i in yesterday:\\n            if not A[i]:\\n                continue\\n            if i in today:\\n                continue\\n            enemy = A[i].popleft()\\n            ME = A[enemy].popleft()\\n            if ME == i and not(enemy in today):\\n                today.add(ME)\\n                today.add(enemy)\\n            else:\\n                A[i].appendleft(enemy)\\n                A[enemy].appendleft(ME)\\n        if not today:\\n            print(-1)\\n            exit()\\n        answer += 1\\n        yesterday = today\\n\\n    print(answer)\\n\\nif __name__ == '__main__':\\n    main()", "target": "782", "substitutes": {}}
{"code": "s=0\\nfor x in input():s+=x<'T'or-(s>0)\\nprint(2*s)", "target": "713", "substitutes": {"s": ["ss", "sq", "a", "strings", "words", "states", "p", "xs", "c", "g", "sym", "steps", "i", "sets", "ats", "y", "o", "sie", "size", "si", "es", "S", "sb", "lines", "ses", "u", "d", "fts", "sg", "sec", "f", "m", "sync", "ns", "days", "ws", "seconds", "input", "su", "os", "features", "abs", "gs", "string", "v", "signed", "ts", "t", "e", "ls", "ds", "rs", "an", "n"], "x": ["a", "python", "sex", "X", "p", "xf", "xs", "c", "i", "xx", "y", "o", " e", "ix", "h", " i", "rx", "sp", "z", "ex", "index", "xxx", "xxxx", "w", "wx", "u", "d", "f", "xi", " X", "xp", "v", "t", "e", "xes", "xy", "step", "xc", "xa", "n"]}}
{"code": "w = input()\\nw_set = set(w)\\nd = {}\\nfor i in w_set:\\n    d[i] = 0\\nfor i in w:\\n    d[i] += 1\\n\\nfor i in d.values():\\n    if i % 2 != 0:\\n        print(\"No\")\\n        exit()\\nprint(\"Yes\")", "target": "337", "substitutes": {"w": ["k", "wa", "a", "wi", "wt", "wp", "words", "widget", "p", "g", "c", "aw", "y", "r", "fw", "h", "work", "we", "wb", "wh", "weight", "z", "x", "ew", "W", "l", "u", "q", "f", "m", "sw", "ws", "data", "wl", "wd", " W", "b", "v", "ow", "way", "t", "wu", "e", "word", "wall", "n"], "w_set": ["w_SET", "w_et", "w_Set", "wa_write", "wa_match", "wa_Set", "w_match", "wa_set", "wa_et", "w_write", "wa_SET"], "d": ["s", "k", "dd", "a", "p", "g", "c", "dat", "o", "dict", "r", "h", "sd", "y", "D", "z", "x", "l", "u", "do", "q", "f", "dt", "j", "m", "set", "data", "db", "v", "b", "dim", "t", "e", "ds", "id", "dn", "ad", "n"], "i": ["gi", "ih", "k", "ui", "a", "iri", "ei", "int", "ib", "chi", "qi", "p", "phi", "ai", "c", "oi", "y", "o", "r", "ini", "ix", "num", "iq", "iu", "split", "ti", "z", "si", "index", "yi", "x", "ind", "start", "I", "it", "l", "fi", "u", "pi", "ati", "io", "j", "f", "m", "xi", "ait", "di", "ni", "ci", "v", "key", "b", "t", "e", "iw", "zi", "id", "li", "ii", "n", "ip"]}}
{"code": "n = int(input())\\nxy = []\\nfor _ in range(n):\\n    x, y = map(int, input().split())\\n    xy.append((x, y))\\ndxdy = {}\\nif n==1:\\n    print(1)\\n    exit()\\nfor i in range(n-1):\\n    for j in range(i+1, n):\\n        dx = xy[i][0] - xy[j][0]\\n        dy = xy[i][1] - xy[j][1]\\n        if dx<0:\\n            dx, dy = -dx, -dy\\n        elif dx==0:\\n            dx, dy = dx, abs(dy)\\n        if (dx, dy) in dxdy:\\n            dxdy[(dx, dy)] += 1\\n        else:\\n            dxdy[(dx, dy)] = 1\\nprint(n-max(dxdy.values()))", "target": "698", "substitutes": {"n": ["s", "k", "span", "p", "c", "o", "nc", "r", "num", "en", "h", "nu", "ne", "z", "fn", "sn", "w", "l", "u", "d", "pi", "nn", "max", "nt", "f", "network", "m", "ln", "ns", "no", "ni", "b", "len", "np", "v", "t", "N", "e", "nit", "count", "pn", "nb"], "xy": ["loc", "date", "ie", "code", "dom", "p", "zx", "poly", "phi", "lat", "plus", "ge", "xx", "hide", "dat", "px", "num", "pos", "tmp", "html", "split", "la", "fo", "temp", "coord", "z", "zy", "time", "index", "xxx", "xxxx", "orient", "cross", "flat", "home", "d", "show", "quad", "f", "pie", "xi", "XY", "yy", "co", "no", "data", "hi", "chart", "gb", "dim", "zip", "np", "e", "py", "id", "multi", "part", "phy", "info"], "_": ["k", " id", "num", "ind", "id", " l", "ip"], "x": ["min", "k", "int", "X", "p", "xs", "c", "lat", "xx", "width", "h", "rx", "ix", "px", "pos", "z", "ex", "index", "w", "l", "u", "d", "max", "f", "hi", "data", "b", "t", "e", "xc"], "y": ["int", "ye", "Y", "height", "ym", "z", "zy", "yo", "yi", "cy", "ny", "yt", "l", "d", "sy", "yy", "ya", "oy", "type", "b", "v", "e", "py", "vy", "isy", "ry", "ey"], "dxdy": ["xdi", "dhdy", "dxd", " dxy", "dtdl", "dxdl", "dtxy", "cddy", "dimy", "dxphy", " dxd", "workdx", "workdl", "dtyd", "dydi", " dxdl", "dxyd", " dxphy", "dhzy", "dimyd", "cdphy", "xdy", "dhdm", "dydx", "dimxy", "worky", "dxy", "cdy", "xdm", "dyzy", "dyphy", "xyzy", "dxxy", "dyy", "xyphy", "workdy", "dimdy", " dxyd", "dhdi", "cdd", "xyd", "dxzy", "dydm", "dtdy", "xzy", " dxzy", "dydy", "dxdx", "dydl", "dxdi", "dyd", "dimdl", " dxxy", "dimdx", "xydy", "dxdm"], "i": ["gi", "ji", "ih", "k", "ui", "a", "ie", "int", "p", "phi", "ai", "c", "h", "o", "ix", "num", "r", "ini", "iu", "z", "si", "index", "ind", "start", "I", "it", "l", "u", "d", "pi", "f", "io", "m", "xi", "ori", "ri", "hi", "ci", "b", "e", "li", "ii", "ik", "ip"], "j": ["ji", "s", "k", "end", "a", "ja", "p", " dj", "jo", "c", "dj", "jj", "o", "h", "r", "z", "je", "index", "ind", "w", "obj", "it", "l", "u", "uj", "d", "q", "js", "jp", "f", "m", "oj", "jc", "ni", "ij", "J", "v", "b", "e", "kj", "ii"], "dx": ["loc", "dd", "rx", "ix", "dc", "xe", "xp", "np", "dn", "feat", "axy", "ady", "ie", "dom", "zx", "tx", "xs", "xx", "dat", "cod", "pos", "cross", "do", "nw", "cd", "hi", "wd", "id", "dh", "p", "dist", " Dy", "width", "dj", "lex", "z", "zy", "fy", "req", "d", "du", "ww", "orce", "dim", "foo", "cpp", "zi", "eddy", "die", "ud", "fx", "px", "wh", "po", "xxx", "diff", "w", "patch", "wx", "xd", "dt", "ax", "dq", "xi", "di", "ld", "ck", "ds", "xa", "phy"], "dy": ["ji", "yd", "did", "dd", "ady", "ie", "dh", "dies", "dom", "hy", "die", "gy", "ye", " Dy", "dist", "zx", "distance", "fx", "yu", "dj", "delay", "tie", "ded", "mini", " dd", "zy", "idy", "xxx", "fy", "yi", "thin", "dm", "wx", "d", "pi", "nn", "xd", "do", "ish", "sy", "dt", "dl", "dq", "du", "nw", "ww", "xi", "yy", "di", "hi", "db", "ni", "dim", "py", "ds", "vy", "li", "dn", "zi", "eddy", "part", "ii", "ey", "phy"]}}
{"code": "N, K = map(int,input().split())\\np = list(map(int,input().split()))\\n\\nli = [0] * N\\nfor i in range(N): li[i] = sum(range(1, p[i]+1)) / p[i]\\n\\nans, total = sum(li[:K]), sum(li[:K])\\nif N != K:\\n  for i in range(1, N - K + 1):\\n    total = total - li[i-1] + li[i-1+K]\\n    ans = max(ans, total)\\n  print(ans)\\nelse: print(ans)", "target": "87", "substitutes": {"N": ["F", "MN", "k", "E", "L", "V", "NN", "H", "Q", "X", "Y", "NC", "Size", "NS", "NE", "NI", "Num", "O", "P", "T", "C", "B", "D", "Len", "NP", "Ne", "S", "A", "I", "NT", "Ni", "Z", "Ns", "U", "R", "M", "J", " n", "G", "NA", "n"], "K": ["F", "k", "E", "KK", "Ke", "L", "KI", "V", "Max", "H", "Ak", "Q", "X", "Y", "KE", "O", "Sk", "P", "T", "C", "B", "D", "SK", "NK", "KS", "KB", "S", "A", "W", "I", "HK", "Z", "UK", "KR", "PK", "U", "R", "J", "M", "G", "KN", "KA", "Ku", "Key", "n"], "p": ["lp", "s", "k", "pre", "ps", "bp", "c", "fp", "y", "o", "tp", "cp", "P", "sp", "z", "pa", "I", "l", "u", "pi", "q", "f", "j", "m", "pp", "v", "b", "np", "t", "pe", "e", "py", " P", "n", "pc"], "li": ["lp", "PI", "loc", "ol", "L", "ie", "chi", "qi", "pre", "ai", "lie", "sl", "ini", "lis", "Lu", "la", "lv", "lc", "ani", "mini", "kl", "si", "pa", "l", "pl", "Li", "pi", "ki", "ln", "dl", "lf", "cli", "ori", "list", "ni", "Pi", "ci", "Mi", "lu", "len", "di", "LI", "ls", "lt", "le", "py", "zi", "ii", "lb", "bi", "lo"], "i": ["gi", "ji", "k", "ui", "a", "ei", "int", "chi", "qi", "mi", "phi", "ai", "c", " I", "oi", "o", "ini", "iu", " k", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "I", "uri", "l", "u", "pi", "d", "ki", "io", "j", "f", "m", " j", "xi", "di", "ni", "ci", "isi", "v", "b", "e", "t", "multi", "zi", "ii", "id", "bi", "n"], "ans": ["ss", "s", "a", "ates", "lan", "span", "cas", "nas", "ras", "groups", "atan", "na", "ai", "ps", "regular", "anas", "AN", "ANS", "posts", " stats", "la", "ks", "mean", "ann", "ani", "au", "anc", "si", "es", "ana", "can", "params", " means", "nan", "annot", "ia", "lines", "parts", "aned", "aus", "stats", "ki", "ln", "sk", "cs", "trans", " spans", "ns", "scan", "lists", "ski", "ni", "os", "features", "list", "ls", "all", "plan", "ops", "an", "ins"], "total": ["ss", "full", "last", "value", "ma", "normal", "na", "general", "otal", "translation", "ph", "this", "la", "fo", "mean", "size", "mini", "final", "scale", "cost", "pa", "au", "valid", "partial", "flat", "meta", "pi", "max", "nt", "ta", "f", "trans", "fat", "null", "di", "parent", "Total", "complete", "alpha", "no", "t", "all", "count", "percent", "part", "sum", "n"]}}
{"code": "s=str(input())\\nprint(s.swapcase())\\n", "target": "643", "substitutes": {"s": ["ss", "new", "strings", "service", "p", "states", "g", "c", "sym", "i", "o", "h", "r", "S", "sb", "lines", "services", "ses", "d", "u", "js", "f", "ssl", "m", "sync", "ws", "input", "ts", "string", "b", "v", "e", "submit", "sv", "source", "your", "comments", "n"]}}
{"code": "N = int(input())\\nfor h in range(1,3501):\\n    for n in range(1,3501):\\n        d = 4*h*n-N*h-N*n\\n        if d == 0 or N*h*n%d != 0: continue\\n        w = N*h*n//d\\n        if w < 0: continue\\n        print(h,n,w)\\n        exit()", "target": "29", "substitutes": {"N": ["F", "E", "L", "V", "H", "Q", "X", "p", "Y", "Num", "K", "number", "Na", "O", "P", "T", "C", "B", "D", "Ne", "S", "A", "W", "I", "NT", "Ni", "Z", "Ns", "ns", "U", "R", "M", " W", "v", "J", "G"], "h": ["hw", "s", "k", "sh", "a", "H", "p", "g", "c", "i", "o", "y", "num", "r", "hr", "z", "x", "W", " H", "hh", "l", "bh", "u", "max", "q", "he", "f", "j", "m", "hd", "hi", "v", "b", "e", "t", "count", "hm", "id", "hp"], "n": ["name", "k", "s", "a", "H", "p", "na", "nd", "g", "nm", "c", "i", "yn", "nc", "num", "o", "un", "y", "r", "ne", "ng", "z", "nu", "fn", "x", "l", "u", "nn", "f", "ln", "j", "m", "ns", "no", "ni", "v", "b", "np", "t", "pn", "e", "dn"], "d": ["dx", "s", "k", "dd", "dy", "dh", "p", "nd", "g", "c", "i", "dat", "y", "r", "o", "sd", "D", "z", "x", "start", "ind", "l", "u", "do", "xd", "max", "f", "dt", "j", "m", "cd", "di", "b", "v", "e", "t", "ds", " D", "dn", "ad"], "w": ["wn", "k", "wa", "won", "wt", "win", "p", "g", "aw", "width", "rw", "o", "y", "fw", "num", "wh", "wb", "weight", "wave", "z", "x", "ew", "W", "window", "l", "wx", "q", "nw", "m", "sw", "ww", "ws", "wl", "wd", " W", "v", "ow", "wu", "iw"]}}
{"code": "S = input()\\nmod = 13\\nmp = 10**9+7\\nn = len(S)\\ndp = [[0]*13 for i in range(n+1)]\\ndp[-1][0] = 1\\nd = 1\\nfor i in range(n):\\n    s = S[-i-1]\\n    if s==\"?\":\\n        for k in range(10):\\n            for j in range(13):\\n                l = (k*d + j)%mod\\n                if dp[i-1][j] !=0:\\n                    dp[i][l] +=dp[i-1][j]\\n                    dp[i][l] %=mp\\n    else:\\n        for j in range(13):\\n            l = (int(s)*d + j)%mod\\n            if dp[i-1][j] !=0:\\n                dp[i][l] = dp[i-1][j]\\n    d = d*10 %mod\\nprint(dp[n-1][5])\\n", "target": "798", "substitutes": {"S": ["F", "L", "DS", "V", "H", "Q", "X", "p", "Y", "SE", "NS", "Si", "SH", "SI", "P", "T", "B", "C", "D", "SB", "Ps", "Sa", "A", "SL", "W", "Sl", "I", "SS", "R", "Input", "M", "SM", "SP", "N", "SN", "G", "SU"], "mod": ["min", "mode", "zero", "mn", "dig", "MOD", "perm", "cond", "exp", "mult", "dot", "r", "lex", "pm", "cp", "comment", "log", "ver", "section", "md", "cum", "lo", "reg", "Mod", "long", " Mod", "div", "od", "ment", "dem", "diff", "oct", "comp", "module", "x", "ind", "pack", "bug", "cm", "sec", "max", " m", "row", "m", "pp", "none", "comb", "option", "man", "dc", "ep", "no", "check", "rem", "ld", "mods", "dev", "dec", "complex", "add", "step", "id", "mix", "form", "loop", "ip"], "mp": ["ss", "dd", "mn", "p", "ps", "ms", "MP", "pm", "cp", "ap", "mb", "md", "sp", "dm", "cm", "q", "jp", "m", "pp", "up", "ep", "np", "mm", "mc", "ip"], "n": [" N", "name", "mn", "p", "g", "c", "nm", "o", "r", "nc", "y", "num", "h", "net", "un", "en", "size", "ne", "z", "x", "sn", "w", "u", "nt", "q", "cn", "f", "network", "m", "ns", "b", "v", "np", "t", "N", "e", "dn", "nb", "an"], "dp": ["lp", "loc", "sh", "wp", "p", "dist", "ps", "pb", "fp", "dat", "sl", "tp", "pos", "cp", "rep", "tmp", "gp", "api", "P", "ph", "sp", "dep", "dB", "drop", "div", "vp", "params", "dm", "grad", "cm", "bb", "pi", "do", "DP", "sup", "dt", "dl", "jp", "pp", "deb", "dr", "dc", "address", "df", "pkg", "di", "list", "data", "db", "prep", "wd", "iper", "dim", "np", "pair", "e", "pd", "imp", "ds", "dos", "hp", "config", "pg", "direction", "ip"], "i": ["gi", "ji", "ui", "a", "ei", "int", "ie", "qi", "mi", "p", "ai", "ic", "c", "oi", "o", "h", "y", "ini", "ix", "iu", "api", "z", "si", "x", "ind", "I", "it", "u", "pi", "ili", "f", "io", "iv", "m", "cli", "ir", "xi", "ori", "di", "ni", "ip", "ci", "v", "b", "e", "info", "id", "li", "ii", "ik", "bi", "ti"], "d": ["dx", "dd", "dy", "dh", "p", "g", "c", "h", "r", "y", "sd", "D", "z", " dd", "da", "x", "dm", "w", "u", "q", "f", "dl", "dt", "m", "dc", "b", "v", "e", "pd", "t", "ds", " D", "ad"], "s": ["ss", "a", "sid", "p", "ps", "g", "c", "sym", "xs", "o", "sl", "y", "r", "sd", "h", "sf", "sp", "z", "si", "w", "sb", "ses", "u", "sg", "f", "m", "ns", "ws", "os", "v", "b", "sing", "space", "t", "e", "ls", "ds", "sv"], "k": ["km", "ke", "p", "g", "c", "dk", "K", "h", "y", "r", "o", "kk", "kg", "ks", "z", "kl", "x", "kw", "w", "ak", "ok", "u", "q", "f", "m", "b", "v", "ck", "e", "uk"], "j": ["ji", "ie", "int", "ja", "qi", "p", "g", "c", "jo", "y", "h", "jj", "r", "o", "el", "jl", "z", "kl", "je", "ch", "jet", "x", "w", "ind", "adj", "obj", "u", "uj", "q", "js", "jp", "f", "m", "oj", "job", "dt", "aj", "ij", "J", "io", "v", "b", "e", "t", "fr", "cell", "li", "ii", "er"], "l": ["lp", "ol", "L", "ie", "lin", "p", "g", "c", "ql", "ly", "o", "sl", "el", "left", "la", "lc", "kl", "z", "w", "u", "ll", "dl", "f", "ln", "m", "nl", "fl", "lu", "v", "b", "ell", "e", "ls", "il", "li", "ul", "lb"]}}
{"code": "MAX_A = 10**6 + 1\\nMAX_P = MAX_A // 2\\nis_prim = [i%2==1 for i in range(MAX_P)]\\nis_prim[1] = False; is_prim[2] = True\\nfor i in range(3, MAX_P):\\n    if not is_prim[i]: continue\\n    for j in range(i+i, MAX_P, i): is_prim[j] = False\\n\\ndef solve():\\n    C = [0] * MAX_A\\n    for a in A: C[a] += 1\\n    pairwise = True\\n    for p in [i for i in range(MAX_P) if is_prim[i]]:\\n        if sum(C[p::p]) > 1: pairwise = False\\n    if pairwise: return 'pairwise'\\n    from math import gcd\\n    g = 0\\n    for a in A: g = gcd(g, a)\\n    if g == 1: return 'setwise'\\n    return 'not'\\n\\nn = int(input())\\nA = [*map(int, input().split())]\\nprint(solve(), 'coprime')\\n", "target": "405", "substitutes": {"MAX_A": ["MAXIPS", "MAX_M", "Max2C", "MAXNA", "MAXNP", " MAX_S", "Max_P", "MAX_S", "MAXIPA", "MAX2C", "MAXJS", "MAXJA", "MAXIPC", "MAX__M", "Max_S", "MAXIPP", "MAXJP", "MAX__P", "Max_C", "Max_M", "MAX__C", "MAXNC", "MAXNM", "Max2P", "MAX2P", "Max_A", " MAX_C", "Max2A", "MAX2M", "MAX__A", "Max2M", "MAX2A", "MAX_C"], "MAX_P": ["MAXAMp", "MAXJPOS", " MAX2C", "NUMJPOS", "MAX_Q", "Max_P", "MAXJA", "MAXAMM", "MAXAMP", "MAXKM", "MAXKA", "NUMJp", "MAXKP", "MAXJP", " MAX2P", "MAX_C", "MAX2C", "MaxAMA", "MAX2N", "MAXKp", " MAX2N", "NUM_A", "Max_p", "MAX__N", "MAXJp", " MAX2F", "MAX_F", "MAX__C", "MAXJM", "NUM_p", "NUMJA", "MAX2F", "NUM_POS", "MAXLineA", "MAXLinePOS", "MAXLineP", " MAX_F", "MAX_N", "MAX__Q", "MAX__F", " MAX_Q", "MAX2Q", "Max_M", "MAX2P", "MAX__A", "NUMJP", "MAXLinep", "MAX_M", "MaxAMp", " MAX_N", " MAX2Q", "MAX_p", "MaxAMP", "MAXAMC", "MAX_POS", "MAXAMA", " MAX2A", "MaxAMM", "MAX__P", "NUM_P", "Max_C", " MAX_C", "Max_A", "MAXAMQ", "MAX2A"], "is_prim": ["as__prime", "is_pos", "is__pos", "iss__prom", "is__comp", "is__Prim", "isjprime", "Is_prime", "iss__prim", "is_zero", "Is_zero", "is_pen", "is_prime", "as_pen", " is_Prim", "isjzero", "IS_pos", "as__pen", "is__prime", "Is_prim", "is__orig", "is_perm", "IS_orig", "Is_perm", "IS__pos", "is_primary", "is2orig", " is_norm", "IS__primary", "iss_prom", " is_prime", "as_Prim", " is_primary", " is_comp", "is__prom", "as_prime", "IS_primary", "is_comp", "IS__prim", "is_Prim", "as_prim", "is_prom", "is2primary", "IS_prim", "is2prim", "iss_prime", "isjperm", "iss__prime", "is__pen", "IS__orig", "as__prim", "is_orig", "is_norm", "iss_prim", "is__prim", "is__primary", "as__Prim", "is2pos", "isjprim"], "i": ["gi", "ji", "k", "ui", "ie", "int", "ei", "chi", "qi", "phi", "ai", "c", "y", "o", "h", "ix", "r", "iu", "api", "ti", "z", "si", "index", "x", "yi", "ind", "start", "w", "I", "it", "l", "u", "pi", "d", "q", "f", "io", "m", "xi", "di", "hi", "ci", "ip", "b", "v", "e", "t", "zi", "id", "li", "ii", "bi"], "j": ["gi", "ji", "k", "ib", "c", "h", "o", "jj", "num", "r", "iq", "jl", "z", "index", "x", "ind", "I", "it", "l", "u", "d", "pi", "q", "jp", "f", "m", "xi", "ij", "J", "b", "v", "e", "t", "py", "li", "ii", "ip"], "C": ["F", "E", "Ca", "Cs", "L", "V", "CI", "Cu", "H", "CU", "X", "c", "DC", "K", " c", "O", "P", "T", "B", "D", "S", "W", "CM", "I", "Ch", "VC", "Sc", "CA", "U", "R", "M", "CC", "Cons", "N", "G"], "a": ["aa", "s", "wa", "ma", "na", "go", "ai", "c", "eta", "o", "y", "ap", "api", "la", "ba", "P", "mA", "ab", "au", "array", "pa", "x", "w", "ka", "ia", "u", "pi", "d", "ach", "sha", "ta", "ca", "f", "sa", "ac", "ga", "cha", "m", "aux", "am", "aj", "ait", "ae", "alpha", "b", "v", "\u00e4", "e", "t", "all", "ha", "pai", "za", "an"], "pairwise": [" pairless", "pairness", "airpacking", "aircle", "purwise", "purless", "aritywise", "pairwh", " pairness", "airwise", "parenwise", "parenbreaking", "airless", "parenwh", "parenhew", " pairwh", "phasebreaking", "purwh", " pairpacking", "phasehew", "pairhew", "pairpacking", "airwh", "pairless", " paircle", " pairhew", "pairbreaking", " pairbreaking", "phasewise", "paircle", "phasewh", "aritycle", "aritypacking", "purness", "airness"], "p": ["lp", "s", "op", "amp", "k", "bp", "img", "c", "y", "r", "h", "o", "tp", "pr", "cp", "ph", "P", "sp", "z", "pa", "x", "comp", "w", "par", "l", "u", "pi", "d", "q", "f", "jp", "m", "pp", "point", "br", "b", "v", "np", "t", "e", "py", "pc", "ip"], "g": ["gi", "s", "gy", "ge", "go", "c", "gh", "h", "gc", "gu", "gam", "cfg", "ig", "gp", "gn", "w", "erg", "l", "u", "d", "gas", "sg", "gg", " G", "q", "f", "mg", "gain", "m", "ga", "ac", "agg", "age", "rg", "gs", "b", "gb", " mg", "e", "gen", "bg", "gm", "G", "pg"], "n": [" N", "s", "k", "na", "Num", "y", "Na", "nc", "num", "h", "ig", "nu", "ng", "index", "x", "nan", "adj", "it", "l", " ng", "d", "f", "m", "N", "gen", "nb", " b"], "A": ["L", "At", "Az", "H", "Y", "arg", "Adam", "c", "This", "K", "num", "Ha", "SA", "P", "B", "T", "As", "D", "Ar", "Bu", "au", "API", "array", "Alpha", "S", "ar", "I", "args", "Ma", "Z", "sa", "ac", "function", "Array", "CA", "U", "Input", "alpha", "M", "b", "N", "gen", "G", "Ang", "Ac"]}}
{"code": "n, m = map(int, input().split())\\nal = []\\nbl = []\\nfor i in range(n):\\n    a, b = map(int, input().split())\\n    al.append([a, b])\\nfor j in range(m):\\n    c, d = map(int, input().split())\\n    bl.append([c,d])\\n\\ndef check(a,b):\\n    x = a[0] - b[0]\\n    y = a[1] - b[1]\\n    if x < 0:\\n        x = -x\\n    if y < 0:\\n        y = -y\\n    return x + y\\n\\nfor a in al:\\n    min = 1000000000\\n    cnt = 1\\n    for b in bl:\\n        tmp = check(a,b)\\n        if tmp < min:\\n            ans = cnt\\n            min = tmp\\n        cnt += 1\\n    print(ans)", "target": "3", "substitutes": {"n": ["s", "k", "p", "na", "o", "nc", "num", "r", "net", "ne", "nu", "z", "w", "ny", "l", "u", "nn", "nt", "f", "network", "ns", "e", "N", "nb", "an"], "m": ["s", "k", "mn", "p", "ms", "g", "nm", "r", "o", "h", "num", "ym", "md", "z", "dm", "cm", "l", "f", "man", "M", "v", "e", "mm", "hm", "mc", "an"], "al": ["aa", "gal", "align", "ali", "Al", "pal", "arr", "ai", "hal", "ay", "el", "ml", "ala", "la", "ab", "phal", "wal", "als", "ar", "af", "isal", "atal", "dal", "l", "cal", "ll", "mal", "aaa", "ill", "lace", "stal", "am", "bal", "aj", "ae", "ell", "all", "il", "alph", "ul", "val", "an", "ad"], "bl": ["lp", "loc", "ol", "align", "ib", "lab", "roll", "arr", "bs", "sl", "syn", "ocl", "ml", "el", "la", "pt", "obl", "ab", "kl", "Bl", "z", "bt", "l", "ob", "pl", "ll", "dl", "ill", "BL", "lf", "bsp", "br", "abl", "list", "nl", "wl", "fl", "yl", "ell", "il", "val", "cl", "ble", "blast", "lb", "block", "gl"], "i": ["k", " bi", "ie", "ib", "p", "ai", "r", "im", "iu", "ab", "ind", " il", "I", "ia", "it", "u", "ac", "am", "ci", "il", "id", "li", "ii", "ad", "ip"], "a": ["aa", "s", "k", "wa", "ack", "auto", "int", "at", "ja", "ma", "p", "na", "ai", "g", "aw", "ama", "o", "r", "api", "la", "ba", "ab", "anc", "au", "z", "art", "da", "A", "af", "w", "ka", "ia", "ak", "u", "ca", "f", "sa", "ac", "asa", "ax", "ga", "area", "am", "ae", "oa", "alpha", "ea", "v", "e", "an", "ad"], "b": ["s", "be", "aa", "k", "ib", "part", "fb", "p", "bs", "ai", "pb", "g", "r", "h", "o", "wb", "mb", "B", "ba", "ab", "z", "body", "sb", "cb", "w", "bt", "l", "bf", "ben", "bb", "rb", "u", "ach", "abb", "f", "eb", "bd", "ac", "db", "v", "an", "e", "bc", "base", "nb", "lb", "bi", "ad"], "j": ["k", " p", " z", "o", " e", "num", "ym", " k", "z", "je", "ind", " o", " am", " el", "oj", "ci", "ct", " me", "e", " num", "id", " l"], "c": ["s", "k", "p", "cod", "r", "cp", "C", "uc", "ce", "cy", "cu", "w", "l", "u", "f", "ca", "cs", "ac", "dc", "cd", "ci", "ct", "v", "cf", "e", "cc"], "d": ["s", "k", "dd", "dy", "fd", "p", "nd", "g", "r", "D", "z", "da", "w", "l", "de", "do", "f", "bd", "dt", "du", "dc", "di", "db", "v", "e", "t", "dp", "ds"], "x": ["dx", "ox", "int", "X", "p", "tx", "xs", "width", "xx", "yx", "h", "rx", "ix", "px", "pos", "ay", "o", "size", "z", "on", "ex", " xx", "wy", "cy", "w", "l", "wx", "u", "f", "ax", "xi", "ya", "v", "e", "t", "xy", "id", "xc", "an", "ey"], "y": ["yd", "ys", "dy", "ye", "p", "Y", "yn", "o", "h", "ym", "ay", "z", "zy", "ty", "yi", "wy", "cy", "yo", "w", "ny", "yz", "yt", "f", "ky", "sy", "yy", "ya", "oy", "iy", "type", "e", "t", "xy", "vy", "ry", "ey", "ies"], "min": ["ss", "s", "ain", "int", "arm", "span", "p", "pre", "init", "ai", "na", "pri", "ms", "r", "main", "pos", "mean", "ann", "size", "ng", "mini", "rand", "pa", "diff", "ind", "sun", "start", "MIN", "only", "cm", "Min", "max", "ax", "sa", "small", "minimum", "old", "area", "minute", "act", "amin", "no", "ran", "oa", "mins", "len", "count", " mini", "skip", "part", "an"], "cnt": ["cNT", "uncann", " ccount", "Ccount", "CNT", " cNT", "ccount", "Cnt", " cno", "uncNT", "pcount", "Cno", " cnd", "lcnn", "cann", "Cnn", "lccount", "Cann", "pcnt", " count", "cno", "pcno", "lcnt", " cann", "pcNT", "count", "cnn", "lcNT", "uncnt", "uncnd", "cnd", "Cnd", "Count", " cnn"], "tmp": ["cmp", "const", "span", "sample", "p", "pre", "ai", "number", "tp", "px", "result", "pos", "cp", "buf", "txt", "attr", "temp", "mp", "config", "mini", "array", "pa", "params", "cache", "sn", "now", "start", "cb", "obj", "cm", "nb", "nn", "nt", "ff", "pp", "ignore", "area", "co", "amount", "yy", "data", "stuff", "np", "count", "mm", "abc", "part", "test", "offset"], "ans": ["ano", "ain", "lan", "ras", "span", "cas", "eps", "amps", "na", "ai", "gan", "ms", "AN", "ANS", "ann", "anon", "anc", "ani", "annot", "ana", "au", "can", "nan", "sn", "aned", "nn", "aus", "sk", "ants", "ns", "man", "scan", "oa", "cons", "ls", "an", "ins"]}}
{"code": "import sys\\n\\n\\n# \\n\\ndef input():\\n    return sys.stdin.readline().rstrip()\\n\\n\\ndef main():\\n\\n    X =int(input())\\n    if X==1:\\n        print(\"NO\")\\n        exit()\\n    if 105 % X ==0:\\n        print(\"YES\")\\n    else:\\n        print(\"NO\")\\n\\n\\n\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "474", "substitutes": {}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\n\\nDEBUG = False\\n\\ndef read(t):\\n    return t(sys.stdin.readline().rstrip())\\n\\n\\ndef read_list(t, sep = \" \"):\\n    return [t(s) for s in sys.stdin.readline().rstrip().split(sep)]\\n\\n\\ndef dprint(*args, **kwargs):\\n    if DEBUG:\\n        print(*args, **kwargs)\\n    return\\n\\n\\ndef main():\\n    a, b = read_list(int)\\n    print(max([a + b, a - b, a * b]))\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "175", "substitutes": {}}
{"code": "n, m, d = map(int, input().split())\\nif d >= n:\\n  print(0)\\nelif d == 0:\\n  print((n * (m - 1) * 10000000 / (n ** 2)) / 10000000)\\nelse:\\n  print((2 * (n - d) * (m - 1) * 10000000 / (n ** 2)) / 10000000)\\n", "target": "572", "substitutes": {"n": ["s", "k", "mn", "p", "g", "c", "i", "o", "r", "y", "num", "nc", "number", "un", "net", "size", "ne", "z", "x", "nan", "sn", "w", "l", "u", "nn", "nt", "f", "j", "network", "ns", "no", "M", "b", "v", "np", "t", "N", "e", "nb"], "m": ["min", "s", "k", "a", "mn", "p", "g", "c", "i", "y", "o", "r", "h", "ym", "md", "mean", "z", "x", "dm", "mu", "w", "cm", "l", "machine", "u", "f", "j", "M", "v", "b", "e", "N", "mm", "mc", "an"], "d": ["s", "dd", "dy", "dh", "fd", "p", "nd", "g", "c", "i", "dat", "y", "o", "h", "sd", "md", "D", "z", "x", "dm", "ind", "w", "l", "u", "do", "f", "dt", "dl", "j", "dc", "di", "b", "ld", "v", "e", "t", "ds", "dn", "ad"]}}
{"code": "n, k = map(int, input().split())\\n\\nans = 0\\nif k == 0:\\n  print (n**2)\\n  exit()\\nfor i in range(1,n+1):\\n  if i <= k:\\n    continue\\n  ans += max(i-k,0)*(n//i) + max(n%i-(k-1),0)\\nprint (ans)", "target": "671", "substitutes": {"n": ["min", "a", "mn", "p", "g", "c", "o", "number", "nc", "num", "y", "net", "ne", "kn", "z", "nu", "fn", "x", "nan", "sn", "w", "l", "u", "d", "cn", "nn", "nt", "max", "q", "j", "ln", "f", "m", "network", "ns", "ni", "v", "b", "np", "e", "N", "t", "dn", "nb", "an"], "k": ["km", "ke", "p", "c", "K", "o", "y", "h", "kk", "ks", "size", "kn", "z", "x", "mk", "kw", "w", "ko", "ak", "ask", "l", "ok", "u", "d", "unk", "max", "q", "ki", "j", "sk", "f", "m", "ku", "kick", "v", "b", "ck", "e", "N", "kr", "ik"], "ans": ["ss", "s", "ents", "lan", "span", "cas", "nas", "offs", "atan", "na", "ai", "ats", "anas", "AN", "ANS", "anes", "ks", "ane", "annels", "ann", "ani", "anc", "ana", "ania", "can", "nan", " means", "ars", "ines", "aned", "nn", "ons", "aus", "anne", "ens", "leans", "cs", "works", "ants", "ns", "man", "scan", "ases", "os", "reads", "ni", "ls", "ians", "ds", "plan", "an", "ins"], "i": ["gi", "ih", "ui", "a", "int", "qi", "mi", "p", "init", "ai", "phi", "c", "oi", "h", "o", "y", "ini", "iu", "ti", "z", "si", "eni", "index", "x", "ind", "start", "I", "l", "u", "d", "pi", "ki", "j", "f", "m", "xi", "ni", "ci", "v", "b", "e", "zi", "id", "li", "ii", "ik", "nb", "bi"]}}
{"code": "import sys\\ns2nn = lambda s: [int(c) for c in s.split(' ')]\\nss2nn = lambda ss: [int(s) for s in ss]\\nss2nnn = lambda ss: [s2nn(s) for s in ss]\\ni2s = lambda: sys.stdin.readline().rstrip()\\ni2n = lambda: int(i2s())\\ni2nn = lambda: s2nn(i2s())\\nii2ss = lambda n: [sys.stdin.readline().rstrip() for _ in range(n)]\\nii2sss = lambda n: [list(sys.stdin.readline().rstrip()) for _ in range(n)]\\nii2nn = lambda n: ss2nn(ii2ss(n))\\nii2nnn = lambda n: ss2nnn(ii2ss(n))\\n\\nMOD = int(1e+9) + 7\\n\\ndef comb(n, k):\\n    r = 1\\n    for i in range(n, max(n-k, k), -1):\\n        r *= i\\n    for i in range(1, min(n-k, k) + 1, 1):\\n        r //= i\\n    return r\\n\\nclass Comb:\\n    def __init__(self, MAX, MOD):\\n        MAX += 1\\n        fac = [0] * MAX\\n        finv = [0] * MAX\\n        inv = [0] * MAX\\n        fac[0] = fac[1] = 1\\n        finv[0] = finv[1] = 1\\n        inv[1] = 1\\n        for i in range(2, MAX):\\n            fac[i] = fac[i - 1] * i % MOD\\n            inv[i] = MOD - inv[MOD%i] * (MOD // i) % MOD\\n            finv[i] = finv[i - 1] * inv[i] % MOD\\n        self.fac = fac\\n        self.finv = finv\\n        self.MOD = MOD\\n    \\n    def comb(self, n, k):\\n        fac = self.fac\\n        finv = self.finv\\n        MOD = self.MOD\\n        if (n < k):\\n            return 0\\n        if (n < 0 or k < 0):\\n            return 0\\n        return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD\\n\\ndef main():\\n    # \u884c\u6570, \u5217\u6570, \u99d2\u6570\\n    N, M, K = i2nn()\\n    # \u914d\u7f6e\u30b3\u30b9\u30c8\u306e\u7dcf\u548c % MOD\\n\\n    # \u4f8b\uff09N, M, K = 2, 2, 2\\n    # \u99d2\u304c\u7f6e\u3051\u308b\u5834\u6240\u306f4\u7b87\u6240: N * M\\n    # \u99d2\u306e\u914d\u7f6e\u306f6\u901a\u308a: comb(4, 2) = comb(N*M, K)\\n    # K=2 \u306e\u5834\u5408\u306e\u30b3\u30b9\u30c8\\n    xcost = 0\\n    for i in range(1, M):\\n        # i\u3092x\u5ea7\u6a19\u306e\u5dee\u3068\u3059\u308b\\n        # x\u5ea7\u6a19\u306e\u307f\u306b\u6ce8\u76ee\u3057\u305f\u5834\u5408\u3001\u5dee\u304ci\u3068\u306a\u308b\u306e\u306f(M-i)\u901a\u308a\\n        #   M=4, i=1, => (1,2), (2,3), (3,4) = 3\u901a\u308a\\n        #   M=4, i=2, => (1,3), (2,4) = 2\u901a\u308a\\n        #   M=4, i=3, => (1,4) = 1\u901a\u308a\\n        # \u3055\u3089\u306by\u5ea7\u6a19\u306e\u7d44\u307f\u5408\u308f\u305b\u306f, \u5de6\u5074\u304cN\u901a\u308a, \u53f3\u5074\u304cN\u901a\u308a\\n        #   (1,2) \u306b\u3064\u3044\u3066 M=2 \u306e\u5834\u5408 ((1,1), (2,1)), ((1,1), (2,2)), ((1,2), (2,1)), ((1,2), (2,2))\\n        xcost = (xcost + i * (M-i) * (N*N)) % MOD\\n    ycost = 0\\n    for i in range(1, N):\\n        ycost = (ycost + i * (N-i) * (M*M)) % MOD\\n    cost = (xcost + ycost) % MOD\\n    # K=3 \u306e\u5834\u5408\u3001K=2 \u306e\u5834\u5408\u306e\u30b3\u30b9\u30c8\u3092 NM-2 \u500d\u3059\u308c\u3070\u3088\u3044\\n    # \u6c4e\u7528\u7684\u306b\u8003\u3048\u308b\u3068\u3001 K=2 \u306e\u5834\u5408\u306e\u30b3\u30b9\u30c8\u3092 comb(MN-2, K-2) \u500d\u3059\u308c\u3070\u3088\u3044\\n    #cost = (cost * comb(M*N-2, K-2)) % MOD\\n    cost = (cost * Comb(N*M-2, MOD).comb(N*M-2, K-2)) % MOD\\n    print(cost)\\n\\nmain()\\n", "target": "341", "substitutes": {"s2nn": ["s2kn", "s82nn", " s1nn", "s2ss", " s4n", "s1n", "s1ss", " s3sn", " s2ss", " s1ss", "si4nr", "si2sn", "s8nr", "si4sn", "s4nr", "si2n", "s_nn", "s2ds", " s2kn", "s2n", "s_sn", "si2nr", " s4sn", "s_ds", "s82ds", "s_n", "s2nr", " s82ss", "s1sn", "s2sn", " s2sn", "s_kn", " s3ss", " s2ds", "s4n", "s82ss", " s3n", " s82nn", "s_nr", " s82ds", " s4ss", " s82kn", "s8sn", "s4nn", "si2nn", "s8n", " s2n", "si4n", "s1nn", "s82kn", " s1n", " s4nn", "s_ss", "s8nn", " s3nn", "si4nn", " s1sn", "s4sn"], "c": ["a", "sc", "aic", "p", "ic", "g", "y", "h", "nc", "ec", "css", "C", "lc", "usc", "uc", "z", "cus", "ch", "cy", "cb", "cm", "cn", "d", "sec", "f", "cs", "cat", "m", "ac", "cos", "dc", "co", "ae", "ci", "ct", "b", "cf", "e", "cr", "bc", "cc", "col", "cl"], "ss2nn": ["ss4ln", "ss4pn", "ss1ln", "s2ss", "s1ss", "s1n", "s1pn", "s2pn", "ss4n", "ss4NN", "s2n", "s1NN", "ss5nn", "ss2NN", "ss5NN", "ss02pn", "ss2ln", "ss2ss", "s1sn", "ss02ss", "ss5n", "s2sn", "ss5ln", "ss1n", "ss2sn", "ss02nn", "ss4ss", "ss4sn", "ss4nn", "s1ln", "ss1ss", "ss2n", "ss1NN", "s2ln", "s1nn", "s2NN", "ss1nn", "ss1pn", "ss1sn", "ss2pn", "ss02sn"], "s": ["ss", "name", "ys", "a", "sc", "sit", "ans", "bs", "ps", "g", "sys", "p", "sym", "ms", "xs", "o", "sl", "css", "y", "h", "sf", "sie", "ks", "sp", "z", " ss", "si", "es", "x", "S", "sn", "w", "sb", "ges", "l", "cn", "d", "u", "ses", "sg", "f", "sa", "cs", "m", "sw", "Ns", "ns", "ws", "us", "su", "os", "gs", "string", "ts", "b", "v", "t", "ls", "ds", "se", "sv", "rs", "ins"], "ss2nnn": ["ss4knnn", "ss1NNc", "ss1nnp", "ss1nnn", "ss1NNn", "ss2nnp", "ss2NNne", "ss2knc", "ss4nnne", "ss2knne", "ss2NNn", "ss2nnc", "ss2ennne", "ss2knns", "ss2knl", "ss4knn", "ss2lnn", "ss2ennns", "ss1NNl", "ss2nnne", "ss1NNp", "ss2knn", "ss1nnl", "ss2lnc", "ss2ennnn", "ss2NNl", "ss2NNns", "ss4knne", "ss2lnp", "ss2NNp", "ss4nnn", "ss2ennn", "ss4knns", "ss2knp", "ss2NNnn", "ss2knnn", "ss2lnl", "ss4nnnn", "ss2nnnn", "ss4nnns", "ss1nnc", "ss2NNc", "ss2nnl", "ss2nnns"], "i2s": ["i4si", "ii2ns", "si4s", "i02n", "ii1nn", "i5s", "i5nn", "si2n", "ii1sn", "i3n", "i02si", "si4ns", "si2s", "i4ns", "ii1si", "i5n", "i3sn", "i2si", "i2sn", "ii2si", "ii1n", "ii2sn", "i02nn", "i1ns", "ii2s", "i1s", "i5sn", "i4s", "i1n", "i3s", "si2nn", "ii1ns", "i3nn", "si4n", "i4n", "si2ns", "ii2n", "i4nn", "i1sn", "ii1s", "i2ns", "i02s", "i02ns", "i1si", "si4nn", "i1nn"], "i2n": ["ii2na", "ii1nn", "ii1na", "ii1n", "i2na", "ii2s", "i1s", "i4s", "i1n", "i4n", "ii2n", "i4na", "i4nn", "ii1s", "i1na", "i1nn"], "i2nn": ["i4ss", "i5kn", "ii2ns", "ii1ss", "ii1nn", "i5nn", "i4ns", "i1ss", "i2kn", "i1kn", "i1ns", "ii2kn", "ii1ns", "i4nn", "i5ss", "i2ss", "i4kn", "ii1kn", "i2ns", "i5ns", "i1nn"], "ii2ss": ["ii2ns", "ii1ss", "ii1nn", "ii1ks", "ii82ks", "ii4ns", "i2rss", "i2nw", "ii4ss", "ii82ss", "ii3nn", "ii82ns", "i1ks", "i1nw", "ii82s", "ii82nn", "i1ss", "i1ds", "i2ds", "ii5nw", "ii4s", "ii5rss", "ii2rss", "i1ns", "ii3ss", "i2ks", "i1s", "ii2s", "ii82nw", "ii1rss", "ii1ns", "ii3ds", "ii1nw", "ii1ds", "ii82rss", "i2ss", "ii1s", "ii2nw", "i1rss", "i2ns", "ii2ds", "ii3s", "ii4ks", "ii5nn", "ii2ks", "i1nn", "ii5ss"], "_": ["name", "a", "__", "non", "p", "al", "ing", "of", "un", "ay", "x", "d", "q", "out", "f", "m", "am", "all", "val", "block", "ip"], "ii2sss": ["ii2rssn", "ii2sns", "ii4sss", "ii2ssns", "ii2rssns", "ii2rsss", "ii2snls", "ii2snn", "ii2ssls", "ii4ssns", "ii2nnns", "ii4rssns", "ii4rsss", "ii2ssn", "ii4rssn", "ii2nns", "ii4ssn", "ii4ssls", "ii2nnls", "ii4rssls", "ii2rssls", "ii2snns"], "ii2nn": ["i4ss", "ii1ss", "i4nw", "ii1nn", "i2nw", "ii4ss", "ii1n", "ii4nn", "i4n", "ii2n", "ii1nw", "i4nn", "ii4n", "i2ss", "ii2nw", "ii4nw"], "ii2nnn": ["ii5pnl", "ii2nnb", "ii5pnb", "ii5nnns", "ii2NNl", "ii2NNns", "ii2pnns", "ii2nnl", "ii2knl", "ii2nnns", "ii2NNn", "ii5nnb", "ii5pnns", "ii5nnn", "ii2pnl", "ii2pnn", "ii2NNb", "ii2knns", "ii2knb", "ii5pnn", "ii2pnb", "ii2knn", "ii5nnl"], "MOD": ["MA", "FE", "LOC", "K", "ROM", "RE", "LOD", "PL", "Module", "module", "PR", "OD", "CM", "MIN", "Mods", "MODE", "MC", "mod", "RAM", "INTER", "RA", "CR", "IC", "Length", "L", "H", "RC", "X", "MAG", "Comb", "Num", "SPEC", "WR", "IUM", "REL", "LIB", "SH", "ACC", "FORM", "Mult", "IX", "ARM", "function", "U", "J", "REG", "N", "all", "add", "MER", "RH", "IR", "NUM", "UL", "Mod", "RM", "ID", "PUT", "COM", "mult", "MR", "FUN", "DEV", "COR", "C", "TR", "MD", " Mod", "MAC", "DR", "d", "Z", "R", "FD", "M", "MS", "func", "MM", "F", "IN", "REM", "ME", "Max", "VER", "MED", "JO", "UN", "OR", " mod", "RR", "P", "D", "DIV", "W", "SIZE", "I", "IM", "DEC", "ION", "LOG", "Mi", "CC"], "n": [" N", "min", "name", "a", "mn", "p", "na", "nd", "init", "g", "o", "yn", "nc", "en", "num", "net", "un", "y", "rn", "ne", "ng", "z", "nu", "on", "kn", "fn", "x", "nan", "gn", "sn", "w", "node", "conn", "l", "cn", "d", "u", "nt", "nn", "max", "ln", "j", "f", "network", "m", "none", "ns", "no", "nl", "b", "inn", "np", "v", "t", "N", "pn", "e", "mod", "dn", "nb", "an"], "k": ["km", "ke", "p", "dk", "g", "K", "y", "h", "o", "kk", "ks", "kn", "z", "ch", "x", "mk", "kw", "w", "kin", " K", "ko", "ak", "l", "ok", "u", "d", "max", "q", "ki", "j", "sk", "f", "m", "ku", "tk", "v", "b", "ck", "e", "N", "mod", "kr", "ik"], "r": ["rh", "a", "mr", " R", "ur", "p", "rar", "g", "h", "result", "rf", "re", "gr", "hr", "z", "ar", "res", "w", "it", "rb", "d", "u", "max", "q", "f", "range", "sr", "rc", "m", "ir", "j", "rg", "br", "R", "nr", "b", "v", "mod", "e", "cr", "fr", "t", "ru", "er", "rs", "rad"], "i": ["gi", "PI", "ui", "a", "ei", "int", "ie", "chi", "qi", "mi", "p", "phi", "ai", "oi", "o", "y", "h", "im", "ini", "ix", "iu", "inf", "ti", "z", "mini", "si", "x", "yi", "ind", "I", "it", "l", "u", "pi", "d", "uri", "ik", "f", "j", "io", "m", "cli", "xi", "di", "ri", "ni", "ci", "ij", "M", "v", "b", "e", "t", "zi", "multi", "id", "li", "ii", "range", "bi", "ip"], "self": ["Self", "sh", "event", "plus", "per", "this", "wrapper", "x", "user", "ctx", "q", "f", "j", "proxy", "co", "private", "data", "mod", "er", "part", "new", "full", "worker", "host", "h", "public", "pos", "tmp", "year", "proc", "comp", "node", "u", "hand", "cs", "function", "e", "all", "res", "spec", "p", "instance", "result", "conf", "cache", "lf", "m", "resp", "parent", "func", "also", "config", "me", "g", "context", "work", "results", "app", "master", "w", "object", "output", "cl", "parse", "ref"], "MAX": ["min", "IN", "NR", "REM", "AK", "Max", "VER", "X", "MA", "MAG", "ALL", "PER", "AP", "DC", "MR", "MED", "WR", "K", "MAP", "MW", "SPEC", "HEAD", "ACE", "RE", "C", "TR", "EST", "AC", "Mod", "MAC", "WORK", "FORM", "W", "AX", "SIZE", "MAT", "MIN", "IM", "DEC", "ION", "max", "Z", "RES", "comb", "CL", "U", "R", "TER", "M", "CC", "mod", "N", "GEN", "REC", " max", "RA", "range", "CR", "IR", "NUM", "RM"], "fac": ["cool", "cur", "com", "method", "ft", "var", "alg", "cum", "factor", "rac", "pack", "cert", "ff", "f", "ac", "fen", "Fac", "co", "priv", "data", "mod", "gen", "feat", "ctr", "abc", "date", "rap", "dat", "fe", "fam", "temp", "att", "con", "fact", "man", "br", "mask", "complex", "aut", "form", "aff", "ctrl", "bag", "typ", "prop", "p", "acc", "access", "mult", "result", "ver", "attr", "conf", "uc", "fc", "av", "inc", "fi", "pl", "mag", "max", "ace", "frac", "vol", "fat", "act", "dim", "cons", "config", "front", "perm", "circ", "auc", "AC", "car", "aug", "sim", "obj", "chem", "cap", "real", "agg", "short", "feature", "cf", "eff"], "finv": [" finf", "fenw", "venf", " finb", "rinV", "finz", " finvi", " fink", "lench", " finver", "Finv", "fatw", "venv", "fink", "Finm", "finvi", "fatv", "finc", "fenk", "finq", "rinf", "funV", "fenf", "frv", "fenver", " finvs", "finu", "fenvi", "lenq", "nver", "funv", "Finz", "venz", "fenz", "Finx", "finm", "fenvs", "funu", "FINb", "frc", "FINf", "Finc", "nw", "fenq", "FinV", "fenV", "fenb", "finw", "fenov", "FINv", "fench", "fenv", "fenx", "finx", "frev", "nv", " finV", "rinb", "finov", "frec", "fref", "finch", "rinv", "fatV", "lenv", "frm", " finov", "Finvi", "Finf", "Finu", "finV", "lenvs", "finf", " finch", "Finov", " finq", "Finw", "frem", "Finb", "nV", "finver", "FINV", "funf", "fatk", "finb", "finvs", " finu", " finw", "frf", "venx", "FINov"], "inv": ["min", "loc", "sq", "Inv", "V", "com", "p", "power", "init", "img", "nav", "err", "fin", "mult", "var", "extra", "im", "pos", "log", "iq", "fam", "vs", "temp", "conf", "reg", "rev", "z", "nov", "av", "mu", "inc", "intern", "pack", "adj", "obj", "inventory", "mag", "conv", "max", "ov", "eq", "ln", "vol", "real", "f", "model", "fun", "rel", " cov", "data", "NV", "nr", "util", "dev", "v", "mod", " Inv", "fr", "env", "cl", "ev", "ru", "sum", "info"]}}
{"code": "def main():\\n  s = input()\\n  if len(s)%2==0:\\n    s=s[:len(s)-2]\\n  else:\\n    s=s[:len(s)-1]\\n  while True:\\n    if(s[0:int(len(s)/2)]==s[int(len(s)/2):len(s)]):\\n      print(len(s))\\n      break\\n    s=s[:len(s)-2]\\n\\nmain()", "target": "696", "substitutes": {"s": ["ss", "new", "a", "strings", "south", "ins", "p", "states", "g", "c", "xs", "i", "state", "sys", "sets", "sym", "o", "sl", "r", "y", "sie", "say", "second", "ows", "si", "es", "events", "S", "now", "w", "sb", "args", "l", "services", "ses", "d", "u", "less", "sg", "parts", "lines", "js", "f", "status", "ssl", "m", "self", "ns", "ws", "input", "seconds", "su", "os", "abs", "gs", "b", "v", "string", "e", "t", "session", "opens", "ls", "ds", "its", "your", "n"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nN, K = [int(item) for item in input().split()]\\nA = [int(item) for item in input().split()]\\n\\n\\ndef make_divisors(n):\\n    divisors = []\\n    for i in range(1, int(n**0.5) + 1):\\n        if n % i == 0:\\n            divisors.append(i)\\n            if i != n // i:\\n                divisors.append(n // i)\\n\\n    # divisors.sort()\\n    return divisors\\n\\n\\nd_cand = make_divisors(sum(A))\\nd_cand.sort()\\nd_cand.reverse()\\n\\nfor d in d_cand:\\n    r = [a % d for a in A]\\n    rp_sum = sum(r)\\n    rm_sum = 0\\n    if rp_sum % d != 0:\\n        continue\\n    r.sort()\\n\\n    for i in range(N):\\n        # index i \u307e\u3067 r-, i+1\u304b\u3089 r+\\n        rp_sum -= r[i]\\n        rm_sum += r[i]\\n\\n        n_min = max(0, -(rm_sum + rp_sum) / d + (N - i - 1))\\n        n_max = (K - rm_sum) / d\\n        if n_min <= n_max and (n_min % 1 == 0 or n_max % 1 == 0 or int(n_min) != int(n_max)):\\n            print(d)\\n            break\\n    else:\\n        continue\\n    break\\n", "target": "764", "substitutes": {"input": ["name", "error", "text", "raw", "IN", " output", "unit", "int", "str", "line", "reader", "request", "PUT", "enter", "enum", "stream", "c", "element", "num", " inputs", "comment", "filename", "empty", "first", "array", "fn", "file", "action", "current", "accept", "out", "f", "initial", "param", " Input", "output", "entry", "parent", "data", "Input", "U", "question", "type", "string", "view", "select", "space", "session", "submit", "progress", "source", "config", "form", "active"], "N": ["F", "L", "V", "X", "NC", " number", " I", "NI", "O", "P", "B", "C", "D", "S", "I", "Ni", "Z", "Ns", "U", "R", "M", "NA", " NI", "NUM"], "K": ["F", "k", "E", "V", "H", "Q", "X", "Y", "AN", "O", " k", "P", "T", "C", "B", "S", "W", "I", "Z", "U", "R", "M", "KA", "G", "NA", "NUM"], "item": ["name", "other", "text", "amp", "letter", "op", "value", "reader", "feed", "aic", "arg", "where", "element", "extra", "load", "insert", "gu", "num", "instance", "app", "number", "iter", "empty", "container", "temp", "index", "Item", "user", "album", "it", "get", "items", "member", "row", "hop", "page", "object", "option", "ait", "entry", "data", "oy", "you", "bar", "anything", "key", "atom", "id", "step", "val", "inner", "li", "keep", "param", "block", "offset", "ip"], "A": ["F", "a", "V", "X", "Y", "LA", " I", "Na", "AN", "O", "P", "B", "C", "T", "D", "S", "W", "I", "Z", "Array", "U", "alpha", "M", "J", "G", "NA"], "n": ["min", "s", "k", "a", "non", "p", "g", "c", "y", "o", "nc", "num", "number", "un", "en", "net", "ne", "nu", "z", "on", "fn", "x", "nan", "sn", "w", "l", "u", "d", "cn", "nn", "nt", "j", "f", "ln", "m", "Ns", "ns", "no", "ni", "b", "v", "np", "e", "pn", "nb", "an"], "divisors": ["multiplisora", "dividons", "multiplistora", "divicora", "dividograms", "multiplisions", "divumores", "multiplistors", "divorores", "divistora", " divistons", "multiplistions", "divistations", "divistions", "divistors", "divizons", "multiplistores", "divisores", "dividors", "dividor", " divisations", " divistor", "divisora", "dividations", "divizors", " divisons", "divistons", "divicograms", "multiplisograms", " divisor", "divisograms", "divistor", "multiplisors", "divisons", "dividores", "dividions", "divistores", "divisations", "divicors", "divumions", "divumors", " divistors", "divisor", "divisions", "divizations", "multiplistograms", "divorora", "divorograms", "divistograms", " divistations", "multiplisores", "divizor", "divicores", "divumograms", "divorors"], "i": ["gi", "ui", "a", "int", "chi", "qi", "p", "phi", "ai", "c", "oi", "o", "ix", "ini", "iu", "z", "mini", "si", "index", "x", "yi", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", "xi", "ori", "di", "ni", "ci", "v", "b", "e", "t", "zi", "id", "li", "ii", "bi", "ti"]}}
{"code": "a, b = map(str, input().split())\\nans = \"No\"\\nkey = int(a+b)\\nfor i in range(1000):\\n    if i**2 == key:\\n        ans =\"Yes\"\\n        break\\nprint(ans)", "target": "271", "substitutes": {"a": ["s", "aa", "k", "wa", "int", "va", "p", "na", "qa", "c", "y", "la", "ab", "da", "x", "pa", "A", "l", "u", "d", "one", "f", "sa", " A", "asa", "ac", "ca", "area", "input", "aj", "ae", "alpha", "e", "an", "n"], "b": ["s", "k", "ib", "fb", "p", "bs", "bp", "pb", "c", "y", "r", "number", "wb", "mb", "beta", "bis", "B", "ba", "ab", "x", "w", "sb", "cb", "l", "u", "d", "bb", "rb", "abb", "f", "m", "v", "e", "bc", "count", "nb", "lb", "bi", "n"], "ans": ["s", "ents", "lan", "nas", "ras", "eps", "atan", "na", "ats", "aning", "anas", "AN", "ads", "ANS", "anes", "ks", "asts", "ane", "annels", "aces", "ann", "vs", "anc", "ays", "es", "ana", "can", " means", "nan", "ars", "anus", "anks", "aned", "ons", "ids", "aus", "works", "leans", "ens", "sk", "cs", "ants", "ns", "ases", "ean", "oss", "an", "ins"], "key": ["aa", "k", "value", "ie", "int", "p", "c", "y", "case", "o", "ay", "switch", "any", "index", "x", "cy", "ak", "ask", "ok", "sec", "ee", "ace", "q", "shift", "j", "ac", "m", "char", "co", "type", "mac", "order", "e", "keys", "bc", "count", "step", "val", "next", "bi", "Key"], "i": ["k", "int", "p", "ai", "c", "y", "h", "r", "ti", "z", "si", "index", "x", "ind", "start", "I", "it", "l", "u", "d", "pi", "j", "f", "ac", "m", "xi", "ip", "v", "e", "id", "li", "val", "bi", "n"]}}
{"code": "# from math import factorial\\nfrom sys import exit\\nn,m,k = map(int, input().split())\\nif m == 1:\\n    if k == n-1:\\n        print(1)\\n    else:\\n        print(0)\\n    exit()\\nMOD = 998244353\\n\\nans = tmp = (m * (m-1) ** (n-1)) % MOD\\n\\nfor i in range(k):\\n    tmp *= (n-1-i)\\n    tmp %= MOD\\n    tmp *= pow((m-1) * (i+1), -1, MOD)\\n    ans += tmp\\n    ans %= MOD\\n\\nprint(ans)", "target": "375", "substitutes": {}}
{"code": "import sys\\ninput = sys.stdin.buffer.readline\\nsys.setrecursionlimit(10 ** 7)\\n\\nN, M = map(int, input().split())\\ncnt = [0] * (N + 1)\\nfor _ in range(M):\\n    a, b = map(int, input().split())\\n    cnt[a] ^= 1\\n    cnt[b] ^= 1\\n\\nif all(x == 0 for x in cnt):\\n    print(\"YES\")\\nelse:\\n    print(\"NO\")", "target": "486", "substitutes": {"input": ["error", "call", "raw", "op", "until", "int", "python", "str", "reader", "PUT", "request", "method", "enter", "plus", "element", "i", "load", "insert", " inputs", "instance", "comment", "result", "inf", "empty", "proc", "temp", "hidden", "search", "expression", "image", "save", " python", "exec", "current", "accept", "buffer", "ll", "out", "f", " Input", "copy", "pull", "output", "parent", "list", "data", "Input", "type", "util", "help", "select", "view", "space", "session", "print", "submit", "source", "param", "form", "feed"], "N": ["F", "MN", "E", "L", "V", "NN", "H", "X", "Y", "NS", "NE", "Num", "K", "Na", "NM", "O", "P", "B", "C", "T", "D", "Ne", "S", "A", "W", "NT", "Ni", "Ns", "U", "R", "NA", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "K", "MX", "DM", "RM", "NM", "O", "P", "B", "T", "C", "D", "LM", "MD", "S", "W", "CM", "MB", "Z", "m", "MC", "U", "R", "J", "G", "n"], "cnt": ["cNT", "fcnn", "fcny", "crnt", "cpt", " cpt", "fcpt", "lcpt", "crct", "crrt", "fcount", " crt", "Cwd", " cNT", " cn", " cct", "cct", "crt", " cwd", "fcNT", "acnt", "Cnt", "fcn", "cny", "fcct", "fcnt", " cny", "acNT", "Cny", "cn", "lcnn", "fcwd", "acn", " count", "lcnt", "Cn", "fcrt", "crn", "Crt", "count", "Cct", "cnn", "lcount", "cwd", "acrt", " cnn"], "_": ["p", "g", "num", " seq", " time", " __", "f", " rec", " loop"], "a": ["aa", "s", "auto", "int", "va", "p", "ai", "c", "i", "y", "o", "B", "ba", "AA", "da", "A", "ar", "w", "ia", "ak", "l", "u", "d", "f", "sa", " A", "m", "ac", "asa", "ae", "e", "an", "n"], "b": ["s", "k", "aa", "p", "bs", "c", "i", " B", "y", "r", "h", "o", "mb", "B", "ba", "ab", "A", "w", "sb", "l", "u", "d", "j", "f", "eb", "m", "bd", "xb", "db", "v", "e", "bc", "nb", "bi", "n"], "x": ["s", "k", "int", "code", "X", "p", "na", "xs", "c", "i", "xx", "y", "number", "h", "num", "ix", " i", " f", "z", "ex", "index", "w", "l", "wx", "u", "d", "nt", "f", "ax", "m", "xi", "xb", "data", "batch", " X", "v", "xp", "e", "t", "id", "xc", "n"]}}
{"code": "N , K = map(int , input().split())\\nans = 0\\nif K == 0:\\n    print(N * N)\\n    exit(0)\\nfor b in range(1, N + 1):\\n    ans += int(N / b) * max(0,b - K) + max(N % b - K + 1 ,0)\\nprint(ans)", "target": "671", "substitutes": {"N": ["F", "k", "E", "NR", "L", "V", "NN", "H", "NL", "Q", "X", "Y", "Size", "Num", "NS", "NE", " B", "Na", "NM", "CNN", "O", "P", "B", "C", "Len", "D", "T", "Ne", "S", "A", "W", "I", "NT", "Ni", "Z", "Ns", "U", "R", "M", "J", " n", "G", "NA", "n"], "K": ["F", "k", "KK", "E", "Ke", "L", "V", "H", "Q", "X", "Y", "KE", "Sk", " k", "P", "O", "C", "B", "SK", "D", "T", "NK", "KS", "KB", "S", "A", "W", "I", "q", "Z", "KR", "PK", "U", "R", "J", "M", "KN", "G", "Ku", "n"], "ans": ["ss", "s", "ents", "lan", "nas", "ras", "amps", "eps", "offs", "atan", "na", "ats", "anas", "AN", "ANS", "anes", "ks", "asts", "annels", "ane", "ann", "anon", "ani", "anc", "ana", "can", " means", "nan", "ars", "aned", "nn", "ons", "aus", "atts", "ens", "sk", "cs", "leans", "ants", "ns", "man", "os", "plan", "ds", "ANN", "an", "ins"], "b": [" kb", "k", " Mb", " bi", "a", "ib", "fb", "p", "bp", "bs", "pb", "c", "i", " B", "o", "r", "Bi", "bat", "bn", "wb", "beta", "mb", "B", "C", "ab", " bc", "z", "BB", "BC", " eb", " Bi", "w", "sb", "cb", "l", "bb", "bf", "d", "u", "rb", "kB", "bd", "j", "f", "eb", " ib", "br", "bin", "v", "NB", "base", "bc", "bg", "nb", "lb", "bi", "Bs", "n"]}}
{"code": "# E - Colorful Hats 2\\nMOD = 10**9+7\\nN = int(input())\\nA = list(map(int,input().split()))\\ncount = [0]*N+[3]\\nused = [0]*(N+1)\\nans = 1\\nfor x in A:\\n    ans = (ans*(count[x-1]-used[x-1]))%MOD\\n    count[x] += 1\\n    used[x-1] += 1\\nprint(ans)", "target": "560", "substitutes": {}}
{"code": "def main():\\n    n = int(input())\\n    a_list = list(map(int, input().split()))\\n    num_list = [0] * n  # \u5404\u756a\u53f7\u304c\u66f8\u304b\u308c\u305f\u30dc\u30fc\u30eb\u304c\u4f55\u500b\u3042\u308b\u304b\\n    method_list = [0] * n  # \u540c\u3058\u756a\u53f7\u304c\u66f8\u304b\u308c\u305f\u7570\u306a\u308b2\u3064\u306e\u30dc\u30fc\u30eb\u3092\u9078\u3076\u65b9\u6cd5\\n\\n    for a in a_list:\\n        num_list[a - 1] += 1\\n\\n    for i in range(n):\\n        b = num_list[i]\\n        if b >= 2:\\n            method_list[i] = b * (b - 1) // 2\\n\\n    total_method = sum(method_list)\\n\\n    for k in range(n):\\n        c = a_list[k]  # k\u756a\u76ee\u306e\u30dc\u30fc\u30eb\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u6570\u5b57\\n        ans = total_method - method_list[c - 1]\\n        d = num_list[c - 1]\\n        if d >= 3:\\n            e = (d - 1) * (d - 2) // 2\\n        else:\\n            e = 0\\n        ans += e\\n        print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "247", "substitutes": {"n": ["s", "k", "name", "a", "p", "init", "g", "c", "i", "o", "number", "num", "names", "size", "z", "fn", "x", "l", "u", "d", "f", "j", "ln", "network", "m", "ns", "b", "len", "v", "t", "N", "e", "nb"], "a_list": ["an_list", "an1list", "a1list", "a4block", "an_block", "a1array", "a_block", "a4count", "an1count", "a1count", "an1block", "a4list", "an_count", "an1array", "a1block", "a_array", "a4array", "an_array", "a_count"], "num_list": ["numoutList", "num_LIST", "numoutcard", "numoutLIST", " num_card", " num_List", "numoutlist", " num_LIST", "num_card", "num_List"]}}
{"code": "import sys\\nread = sys.stdin.read\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\n\\ndef main():\\n    N = int(readline())\\n\\n    K = 0\\n    for i in range(1,10**3):\\n        if i * (i-1) // 2 == N:\\n            K = i\\n            break\\n\\n    if K == 0:\\n        print(\"No\")\\n        exit()\\n    \\n    S = [[0] * (K-1) for _ in range(K-1)]\\n\\n    a = 1\\n    for i in range(K-1):\\n        for j in range(i+1):\\n            S[i][j] = a\\n            S[j][i] = a\\n            a += 1\\n\\n    ans = []\\n    for s in S:\\n        ans.append(\"{} {}\".format(K-1, \" \".join(map(str, s))))\\n\\n\\n    tri = [S[i][i] for i in range(K-1)]\\n    ans.append(\"{} {}\".format(K-1, \" \".join(map(str, tri))))\\n\\n    print(\"Yes\")\\n    print(K)\\n\\n    print(\"\\n\".join(ans))\\n\\n    \\nif __name__ == \"__main__\":\\n    main()\\n", "target": "502", "substitutes": {"read": ["new", "raw", "seek", "end", "open", " READ", "reader", " write", "stream", "g", " connect", "host", " readers", " get", "load", "work", "r", "Read", " seek", "connect", "write", "long", " parse", "READ", "run", "x", "each", " stream", " send", " reading", "current", "get", "hand", "readable", " reads", "input", "check", "reads", "data", "bind", "play", "reading", "add", " reader", " Read", "ast", "feed"], "readline": ["writeLine", " readlin", "loadlines", "loglines", "writeblock", "loadblock", "addlin", "loadLine", "readLine", "loadline", "loadlog", " readlog", "addlines", "writelines", " Readlin", " Readline", "addentry", "readblock", " Readlines", "logLine", "writeline", "logline", "logblock", " readentry", " readLine", " Readentry", "writelog", "readlog", "readlin", "readentry", "addline"], "readlines": [" readelines", "loadlist", "loadlines", "Readelines", " readines", "Readline", " readlist", "readlist", "loadline", "writeines", "workines", "worklines", "writelines", "loadelines", "readines", "Readlines", "Readlist", "workline", "writeline", "writespace", " readspace", "readspace", "workspace", "readelines"], "N": ["F", "E", "L", "V", "NN", "Q", "X", "Y", "NC", "NS", "NE", "O", "P", "T", "C", "B", "D", "Ne", "A", "W", "I", "NT", "Z", "Ns", "R", "M", "J", "G", "NA", "n"], "K": ["F", "Power", "k", "E", "ID", "KK", "Ke", "L", "KO", "KI", "V", "AK", "H", "Ak", "Q", "X", "Y", "IK", "KE", "O", "Sk", "P", "T", "C", "B", "D", "SK", "KS", "Kent", "A", "W", "KC", "I", "HK", "Z", "UK", "KR", "Context", "PK", "U", "Mask", "J", "M", "G", "KN", "KA", "Ka", "Ku", "Work", "Key", "n"], "i": ["ji", "k", "ui", "L", "ie", "int", "qi", "p", "phi", "ai", "c", "init", " I", "oi", "y", "o", "h", "ini", "iu", "P", "api", "lo", "C", "ti", "z", "si", "index", "x", "ind", "I", "it", "l", "u", "pi", "d", "q", "ki", "io", "f", "m", "xi", "di", "ni", "ci", "ij", "J", "b", "key", "v", "e", "id", "li", "ii", "n", "bi", "ip"], "S": ["ss", "L", "IS", "V", "H", "AS", "SC", "X", "SE", "LS", "SR", "NS", "Series", "Y", "Si", "TS", "PS", "SH", "Sol", "SI", "ANS", "O", "SA", "P", "T", "C", "St", "SK", "B", "D", "Ps", "KS", "Sa", "States", "A", " SS", "Su", "Service", "RS", "Sl", "I", "Sing", "SS", "OS", "Sc", "WS", "So", "Ns", "Set", "CS", "U", "R", "Sub", "M", "GS", "SM", "Sin", "Sign", "SN", "G", "System", "SO", "BS", "SU", "ES"], "_": ["p", "ai", "h", "o", "of", "ix", "x", "l", "f", "J", "e", "an"], "a": ["aa", "wa", "sta", "va", "ma", "p", "na", "qa", "ai", "aw", "c", "o", "la", "ba", "mA", "ab", "au", "ana", "da", "pa", "A", "af", "ka", "ia", "l", "sha", "ca", "sa", "ac", "asa", "ga", "f", "area", "aj", "am", "ae", "oa", "alpha", "b", "ea", "e", "an", "ad", "n"], "j": ["ion", "ji", "k", "ie", "ja", "p", "ai", "jo", "o", "y", "jj", "r", "iu", "jl", "z", "si", "x", "ind", "I", "l", "u", "d", "jp", "ax", "f", "m", "aj", "jam", "J", "b", "v", "e", "li", "ii", "bi", "n"], "ans": ["ss", "ents", "offs", "span", "nas", "ras", "eps", "ams", "amps", "na", "ps", "xs", "ions", "cases", "AN", "ads", "aos", "ANS", "times", "ks", "vs", "ann", "anon", "ani", "can", "params", "ars", "args", "lines", "aned", "parts", "ons", "ens", "sk", "cs", "trans", "ants", "ns", "types", "man", "os", "san", "ls", "cons", "ians", "plan", "ds", "sv", "oss", "an", "n", "ins"], "s": ["ss", "k", "sq", "sc", "ins", "sit", "p", "ai", "xs", "c", "ps", "sets", "Si", "o", "ks", "z", "si", "Sa", "ind", "l", "ses", "d", "u", "js", "sk", "sa", "sw", "ns", "age", "os", "b", "e", "ds", "se", "an", "n"], "tri": ["sc", "str", "chi", "cor", "rup", "tx", "stri", "sect", "circ", "tr", "iq", "TR", "coord", "ou", "rev", "cu", "cross", "rou", "Tri", "quad", "tre", "ra", "rect", "sr", "tra", "tu", "rt", "mat", "ri", "ski", "di", "hi", "dim", "pair", " Tri", "ii", "ctr", "trip", "test", "trial", "poly"]}}
{"code": "import numpy as np\\n\\nn = int(input())\\nps = list(map(float, input().split()))\\n\\ndp = [np.zeros(n + 1) for _ in range(n)]\\n\\nfor i, p in enumerate(ps):\\n    if i == 0:\\n        dp[i][0] = 1-p\\n        dp[i][1] = p\\n    else:\\n        dp[i][0] = dp[i-1][0] * (1-p)\\n        dp[i][1:i+1] = dp[i-1][:i] * p + dp[i-1][1:i+1] * (1-p)\\n        dp[i][i+1] = dp[i-1][i] * p\\n\\nl = dp[-1]\\n\\nprint(l[len(l)//2:].sum())\\n", "target": "437", "substitutes": {"n": [" N", "s", "k", "c", "o", "y", "nc", "num", "en", "net", "pos", "r", "size", "z", "fn", "x", "nan", "sn", "w", "ny", " ng", "d", "pi", "nn", "f", "network", "j", "m", "ns", "nl", "b", "np", "t", "N", "pn", "e", "nb"], "ps": ["points", "s", "amps", "eps", "xs", "tp", "PS", "pm", "pr", "pos", "cp", "pes", "posts", "P", "sp", "Ps", "pa", "params", "par", "bps", "pi", "d", "ports", "pp", "ns", "ppa", "os", "np", "pe", "pn", "ips", "pps", "pd", "ds", "ops", "hp", "ip"], "dp": ["lp", "loc", "density", "dh", "pid", "wp", "prop", "fd", "default", "pb", "fp", "dat", "tp", "cp", "pos", "gp", "api", "P", "sp", " dd", "vp", "params", "dm", "patch", "pi", "d", "do", "DP", "dl", "dt", "point", "pp", "deb", "dr", "port", "dc", "drop", "df", "pkg", "address", "list", "data", "db", "adr", "wd", "di", "dim", "np", "e", "pd", "ds", "dos", "dn", "hp", "config", "pg", "direction", " df", "ip"], "_": [" times", "num", " ip", " seq", " time", " __", " f", " un", " ell", " q", " non", " col"], "i": ["gi", "ui", "a", "pid", "int", "ie", "chi", "ei", "ami", "qi", "phi", "ai", "ic", "c", "oi", "o", "y", "ini", "ix", "iu", "api", "mini", "z", "si", "eni", "index", "yi", "x", "time", "ind", "I", "uri", "u", "pi", "d", "ki", "j", "io", "iv", "f", "m", "cli", "xi", "ori", "di", "ri", "ni", "ci", "ip", "isi", "v", "b", "e", "t", "info", "zi", "id", "multi", "li", "ii", "ik", "anti", "bi", "ti"], "p": ["lp", "s", "k", "a", "wp", "pre", "g", "c", "fp", "y", "h", "tp", "r", "pm", "cp", "per", "o", "P", "sp", "z", "pa", "x", "w", "u", "d", "pi", "q", "j", "f", "m", "point", "pp", "jp", "v", "b", "np", "t", "pe", "e", "py", "pc"], "l": ["lp", "s", "ol", "L", "line", "g", "c", "o", "sl", "r", "el", "ml", "lr", "la", "lc", "kl", "pl", "d", "u", "ll", "ln", "dl", "m", "rl", "list", " ls", "nl", "fl", "v", "b", "e", "ls", "t", "li", "ul", "cl", "lb"]}}
{"code": "X = input()\\n\\nprint('YES' if X in '753' else 'NO')", "target": "474", "substitutes": {"X": ["F", "ID", "E", "L", "XXXX", "V", "XM", "FC", "H", "Q", "XX", "Y", "Check", "XP", "K", "Test", "XT", " x", "O", "P", "T", "C", "B", "x", "S", "A", "W", "XXX", "TX", "ZZ", "Z", "R", "J", "M", "String", "XL", "N", "G"]}}
{"code": "s = input()\\nw = int(input())\\nans = ''\\nfor i in range(0 ,len(s) , w):\\n  ans += s[i:i+w][0]\\n\\nprint(ans)", "target": "313", "substitutes": {"s": ["new", "sq", "a", "sh", "south", "strings", "ins", "words", "p", "states", "xs", "c", "o", "si", "es", "S", "l", "services", "ses", "aws", "lines", "d", "less", "u", "f", "sa", "cs", "m", "input", "os", "b", "string", "letters", "e", "ls", "ops", "an", "n"], "w": ["wn", "wa", "wt", "wp", "tw", "win", "g", "aw", "width", "rw", "h", "fw", "we", "wb", "wh", "weight", "wave", "wal", "x", "wy", "ew", "W", "kw", "wed", "We", "wx", "d", "max", "m", "ww", "sw", "man", "ws", "wan", "wl", "wd", " W", "way", "v", "ow", "wu", "iw", "wid", "wall", "n"], "ans": ["ano", "a", "ents", "lan", "ras", "nas", "amps", "cas", "ams", "atan", "na", "span", "gan", "ats", "ions", "aning", "anas", "AN", "ads", "ANS", "anes", "ks", "ane", "ann", "anse", "anc", "anon", "ana", "es", "ays", "can", "ania", "nan", "ars", "anks", "aned", "ons", "aus", "anne", "ens", "leans", "ants", "ns", "scan", "os", "an", "ds", " Ans", "ast", "ins"], "i": ["ih", "k", "end", "a", "ie", "qi", "mi", "p", "ai", "c", "o", "y", "h", "ix", "ini", "pos", "iu", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "j", "io", "f", "m", "xi", "ri", "di", "ci", "v", "e", "zi", "id", "li", "ii", "bi", "n"]}}
{"code": "def main():\\n    s = input()\\n\\n    if len(set(s)) == 3:\\n        print('Yes')\\n    else:\\n        print('No')\\n\\nif __name__ == '__main__':\\n    main()", "target": "777", "substitutes": {"s": ["ss", "a", "strings", "p", "states", "g", "c", "i", "o", "r", "si", "S", "w", "sb", "args", "l", "parts", "u", "d", "ses", "sg", "f", "ssl", "m", "input", "data", "b", "v", "space", "e", "t", "opens", "ds", "submit", "n"]}}
{"code": "n, k = map(int, input().split())\\nX = list(map(int, input().split()))\\nans = pow(10,9)+7\\nfor i in range(n-k+1):\\n    ans = min(ans, min(abs(X[i])+abs(X[i+k-1]-X[i]), abs(X[i+k-1])+abs(X[i]-X[i+k-1])))\\nprint(ans)", "target": "651", "substitutes": {"n": ["s", "p", "c", "o", "r", "nc", "en", "num", "net", "h", "y", "un", "ne", "z", "x", "w", "l", "u", "d", "nt", "q", "f", "network", "ln", "j", "m", "ns", "v", "b", "np", "e", "N", "nb"], "k": ["km", "ke", "p", "c", "dk", "K", "y", "o", "h", "kg", "ks", "kn", "z", "x", "mk", "kw", "w", "ko", "ak", "l", "u", "d", "q", "ki", "j", "sk", "f", "m", "ky", "ku", "kick", "v", "b", "ck", "e", "t", "ik"], "X": ["F", "Length", "E", "ID", "Point", "CE", "L", "V", "XM", "Max", "H", "DX", "Q", "XX", "Y", "Times", "One", "xs", "XP", "Forward", "Form", "K", "Test", "ZX", "FF", "Project", "Day", "P", "T", "C", "Int", "IP", "Work", "x", "PE", "S", "A", "Zip", "W", "XXX", "I", "Model", "Do", "TX", "Sc", "Z", "Data", "WS", "Array", "XY", "PH", "shape", "U", "R", "Shape", "List", "M", "J", "UX", "Time", "XL", "N", "Location", "Sex", "G", "Index", "Ex", "ML", "Cross"], "ans": ["s", "a", "ents", "lan", "span", "nas", "ras", "amps", "cas", "p", "atan", "na", "ai", "gan", "ats", "aning", "anas", "AN", "ANS", "asts", "anes", "mean", "ane", "aces", "ann", "anon", "ani", "anc", "ana", "es", "ays", "x", "can", "nan", " means", "ars", "cross", "anus", "aned", "ace", "ons", "aus", "ens", "sk", "cs", "leans", "ants", "man", "scan", "os", "san", "ls", "plan", "an", "ins"], "i": ["gi", "ji", "s", "ui", "end", "ie", "qi", "mi", "p", "phi", "ai", "init", "c", "y", "h", "o", "ix", "ini", "iu", "api", "z", "mini", "si", "eni", "index", "x", "yi", "ind", "start", "I", "uri", "l", "u", "d", "pi", "j", "io", "f", " j", "xi", "di", "ri", "hi", "ip", "ci", "isi", "b", "my", "e", "info", "zi", "id", "multi", "li", "ii", "bi", "ti"]}}
{"code": "from bisect import bisect_left\\nimport sys\\ninput = sys.stdin.readline\\nclass UnionFind():\\n    def __init__(self, n):\\n        self.n = n\\n        self.parents = [-1] * n\\n    def find(self, x):\\n        if self.parents[x] < 0:\\n            return x\\n        else:\\n            self.parents[x] = self.find(self.parents[x])\\n            return self.parents[x]\\n    def union(self, x, y):\\n        x = self.find(x)\\n        y = self.find(y)\\n        if x == y:\\n            return\\n        if self.parents[x] > self.parents[y]:\\n            x, y = y, x\\n        self.parents[x] += self.parents[y]\\n        self.parents[y] = x\\n    def same(self, x, y):\\n        return self.find(x) == self.find(y)\\ndef main():\\n    N, Q = map(int, input().split())\\n    kouji = [list(map(int, input().split())) for _ in range(N)]\\n    D = [int(input()) for _ in range(Q)]\\n    ans = [-1]*Q\\n    nxt = [i+1 for i in range(Q)]\\n    uf = UnionFind(Q)\\n    kouji.sort(key=lambda x: x[2])\\n    for i in range(N):\\n        S, T, X = kouji[i]\\n        L = S-X\\n        R = T-X-1\\n        L_idx = bisect_left(D, L)\\n        R_idx = bisect_left(D, R+1)\\n        p = L_idx\\n        while p < R_idx:\\n            if ans[p] == -1:\\n                ans[p] = X\\n                uf.union(L_idx, p)\\n                nxt[p] = R_idx\\n                p += 1\\n            else:\\n                par = uf.find(p)\\n                p = nxt[par]\\n                uf.union(L_idx, par)\\n                par = uf.find(par)\\n                if nxt[par] < R_idx:\\n                    nxt[par] = R_idx\\n                if nxt[par] < p:\\n                    nxt[par] = p\\n    for i in range(Q):\\n        print(ans[i])\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "338", "substitutes": {"input": ["error", "call", "text", "IN", "raw", "int", "reader", "request", "method", "stream", "enter", "argument", "element", "load", "target", "format", " inputs", "but", "comment", "lower", "empty", "temp", "array", "hidden", "search", "expression", "index", "utils", "clean", "file", "valid", "image", "version", "current", "get", "child", "accept", "q", "out", "rc", " Input", "sel", "param", "pull", "null", "output", "parent", "list", "data", "Input", " int", "single", "type", "string", "path", "select", "reset", "keep", "inner", "filter", "source", "config", "form", "feed"], "self": ["s", "Self", "false", "event", "plus", "gh", "per", "this", "wrapper", "events", "user", "l", "ctx", "q", "f", "right", "co", "us", "data", "b", "er", "part", "manager", "new", "full", "auto", "cmp", "worker", "host", "load", "h", "pos", "client", "mp", "ng", "comp", "utils", "node", "hand", "page", "cs", "function", "old", "os", "e", "all", "form", "ack", "raw", "spec", "default", "sys", "instance", "es", "cache", "now", "only", "max", "m", "ns", "resp", "parent", "func", "view", "t", "config", "block", "on", "k", "other", "end", "a", "pop", "me", "missing", "na", "g", "c", "err", "context", "work", "results", "app", "we", "master", "w", "args", "ok", "one", "object", "ws", "no", "base", "cl", "parse", "home", "test", "ref"], "n": ["name", "k", "s", "span", "g", "c", "number", "nc", "num", "r", "net", "o", "names", "nu", "ne", "z", "nan", "sn", "node", "it", "l", "cn", "d", "u", "nn", "nt", "max", "q", "j", "f", "network", "m", "Ns", "ns", "no", "ni", "v", "b", "np", "t", "all", "nit", "e", "nb"], "parents": ["levels", "makers", "modules", "mates", "groups", "settings", "members", "dist", "states", "kids", "projects", "tips", "leaders", "results", "ims", "times", "relations", "values", "rules", "changes", "children", "names", "Parents", "codes", "events", "source", "devices", "stack", "pieces", "reverse", "tests", "holders", "parts", "runners", "father", "ports", "files", "ids", "headers", "drivers", "pins", "types", "docs", "depth", "requisites", "shape", "parent", "dates", "features", "data", "tree", "resources", "path", "plugins", "images", "masters", "rates", "origin", "girls", "keys", "roots", "grow", "its", "family", "config", "chains", "ins"], "x": ["name", "int", "rx", "ix", "xt", " xx", "l", "q", "f", "j", "ux", "ya", "xe", "b", "xp", "xy", "full", "code", "sex", "tx", "ic", "xs", "host", "xx", "yx", "h", "xxxx", "cross", "u", "v", "key", "e", "id", "xc", "xxxxxxxx", "wa", "python", "rex", "r", "lex", "z", "ex", "index", "cy", "d", "m", "ww", "my", "t", "xes", "py", "dx", "ox", "a", "xf", "Y", "g", "c", "o", "work", "px", "xxx", "w", "wx", "xd", "one", "ax", "xi", "xb", "xml", "pe", "xa"], "y": ["yr", "s", "ady", "dy", "ye", "hy", "gy", "Y", "c", "xx", "o", "h", "asy", "ym", "ay", "z", "ty", "ch", "zy", "yi", "yo", "cy", "w", "ny", "yt", "l", "d", "ish", "q", "j", "f", "sy", "yan", "xi", "yy", "ya", "oy", "iy", "type", "v", "b", "t", "e", "xy", "py", "vy", "ry", "ey"], "N": ["F", "E", "V", "H", "Y", "NS", "NE", "K", "Na", "NM", "CNN", "O", "P", "C", "B", "Ne", "A", "W", "I", "Z", "Ns", "U", "M", "J", "G"], "Q": ["F", "QU", "CT", "ID", "E", "V", "H", "Y", "Query", "K", "O", "P", "C", "B", "IQ", "EC", "IP", "MQ", "A", "W", "I", "q", "Z", "CL", "U", "J", "M", "OU", "Qu", "G"], "kouji": ["kouiji", "kounija", "kOUoji", " koubi", "kouniji", "Kauoji", " kokoiji", "kokoiji", "koupiji", " kaoji", "kounji", "kauji", "kOUja", "koubi", "kokozy", " kouchio", "koupji", "kauchio", "kOUzy", "kokoija", "kouzy", "koupija", "kauoji", "kaoja", "kouja", "kokooji", " kokobi", "kauja", "kouija", "kOUji", "kaochio", " kouoji", "kauzy", " kaooji", "kounbi", "kuchio", "kouoji", "Kouzy", " kokoji", "kuoji", " kouiji", "kokobi", "kaoji", "Kauja", "kouchio", "koupbi", " kouija", "kaooji", " kouja", "Kouja", " kokoija", "Kouoji", "Kauji", "kokoja", "kuji", " kaochio", "kokoji", "kuja", " kaoja", "Kauzy", "Kouji"], "_": ["k", "__", " local", "non", "of", "ay", "ime", " pool", "ac", "flow", "val", "ip"], "D": ["E", "DA", "DS", "V", "DH", "Y", "DC", "K", "DE", "DB", "O", "P", "C", "B", "LD", "DD", "PD", "MD", "Dou", "Dr", "Ds", "d", "DR", "Do", "Di", "DP", "DF", "Z", "Data", "CL", "ND", "U", "M", "DL", "DI", "DN"], "ans": ["s", "IN", "ents", "nas", "ras", "amps", "eps", "AS", "ams", "na", "ps", "ai", "xs", "ats", "NS", "Ann", "ions", "arts", "Na", "anas", "AN", "ANS", "ks", "As", "ann", "Ps", "anon", "anc", "ani", "ana", "es", "ands", "can", "atan", "ays", "A", "An", "ars", "cus", "params", "anks", " scans", "aned", "parts", "Ds", "ons", "aus", "trans", "cs", "ants", "Ns", "ns", "acs", "man", "cons", "plan", "ds", "ops", "NA", "span", "oss", "an", "ins"], "nxt": [" npt", "Next", "Nxt", "ninxt", "ntxt", "ninbsp", "cnXT", "inext", "ynXT", "NXT", "cnxt", " nx", "nx", "enext", "ynext", "enxt", "yntxt", " ntxt", " nct", "intxt", "Npt", "nct", "cnext", "inXT", "Ntxt", " next", "netxt", "Nbsp", "pnxt", "ynct", "pnext", "enXT", "npt", "pntxt", "ynx", "ynxt", "nbsp", "Nx", "entxt", "neext", "pnpt", "cnct", "ninXT", "nXT", " nXT", " nbsp", "neXT", "inxt", "nintxt", "next"], "i": ["gi", "ji", "s", "k", "ui", "a", "int", "chi", "qi", "mi", "phi", "ai", "c", "r", "h", "ini", "iq", "iu", "api", "ti", "z", "mini", "si", "index", "yi", "ind", "start", "I", "it", "l", "u", "pi", "d", "uri", "q", "j", "io", "f", "m", "xi", "di", "ri", "ni", "ci", "hi", "type", "v", "b", "e", "info", "id", "li", "ii", "bi", "abi", "ip"], "uf": ["NF", "ui", "utf", "Lib", "uber", "ur", "pb", "fp", " buf", "auc", "FF", "buf", "ph", "gp", "tf", "lv", "uff", "ab", "uc", "fs", "que", "au", "prot", "utils", "cv", "af", "cb", "buff", "fi", "FS", "bf", "ub", "buffer", "conv", "upp", "ff", "sup", "DF", "ki", "lf", "du", "lib", "ux", "parser", "df", "aux", "su", "UFF", "pkg", "gb", "util", "lu", "raf", "TF", "PU", "FH", "uh", "FP", "np", "Ul", "UF", "ul", "uu", "SU", "um", "UL"], "S": ["F", "s", "E", "V", "H", "Y", "SE", "NS", "K", "O", "P", "C", "B", "A", "W", "SL", "I", "SS", "Z", "U", "M", "J", "G", "SU"], "T": ["F", "E", "V", "H", "Y", "TA", "K", "TS", "TN", "O", "P", "C", "B", "A", "DT", "W", "I", "TX", "Z", "TT", "U", "M", "J", "t", "G"], "X": ["F", "E", "V", "Max", "H", "DX", "XX", "Y", "XP", "EX", "K", "O", "P", "C", "B", "A", "W", "XXX", "I", "TX", "Z", "MAX", "U", "J", "M", "XL", "G", "Ex", "Ad"], "L": ["E", "LB", "V", "LT", "TL", "NL", "Y", "K", "Lu", "O", "P", "B", "LM", "LD", "PL", "W", "SL", "I", "l", "EL", "LR", "Z", "RL", "U", "J", "M", "XL", "DL", "LL", "G"], "R": ["F", "E", "Rs", "NR", "V", "H", "Y", "SR", " r", "AR", "r", "RR", "RO", "P", "B", "C", "A", "W", "I", "Right", "GR", "DR", "Z", "RL", "RP", "Ra", "U", "M", "J", "G", "RA", "CR", "RH", "IR", "RM"], "L_idx": ["L_idg", "L_idex", "L_Idz", "L_idsz", "L_IDb", "L_ideex", "L_mainw", "L_idxe", "L_Idxe", "L_ideg", "L_idxf", "L_idy", "L_idxc", "L_idw", "L_IDxs", "L_idexf", "L_IDx", "L_Idxc", "L_Idx", "L_IdX", "L_mainxf", "L_mainex", "L_idsx", "L_ideb", "L_idsw", "L_idsex", "L_idsxc", "L_Idy", "L_Idxs", "L_mainx", "L_IDX", "L_IDxe", "L_idX", "L_idsxf", "L_idxs", "L_idew", "L_idexs", "L_Idb", "L_IDg", "L_IDz", "L_Idg", "L_idsy", "L_idz", "L_idb"], "R_idx": ["R_searchj", "R_aidxs", "RJidx", "ROxsearchz", "R_Idj", "R_pidxc", "R_inxc", "R_idxes", "R_idj", "R_aidz", "R_idX", "R_Idxes", "R_startex", "R_IDxx", "R_inxes", "R_idxx", "R_initex", "R_IDxc", "R_inz", "R_idxc", "R_startx", "R_idsxc", "ROxidj", "R_searchxs", "R_IDx", "ROxsearchxs", "RJinitX", "ROxsearchx", "ROxidz", "R_idex", "R_Idxc", "R_Idxx", "RJidX", "R_idxs", "R_startX", "R_IDz", "R_Idz", "RJinitex", "R_startxe", "RJinitxe", "R_Idxe", "RJidex", "R_idsx", "R_idsxes", "R_searchz", "R_aidj", "ROxidxs", "R_IDxs", "R_IdX", "ROxsearchj", "R_initx", "R_aidx", "R_Idex", "ROxidx", "R_idxe", "RJinitx", "R_pidxx", "R_IDX", "R_idsz", "R_initxe", "R_idz", "RJidxe", "R_Idx", "R_pidx", "R_pidxs", "R_inx", "R_searchx", "R_Idxs", "R_initX"], "p": ["lp", "s", "a", "at", "wp", "pat", "pre", "ps", "bp", "c", "fp", "post", "r", "tp", "per", "o", "pr", "cp", "h", "ap", "api", "P", "sp", "NP", "po", "z", "pa", "ar", "l", "patch", "u", "d", "pi", "q", "j", "jp", "param", "m", "pp", "point", "f", "parent", "ip", "v", "b", "np", "t", "pe", "e", "py", "pc", "part", " P"], "par": ["aa", "op", "loc", "cur", "war", "pid", "part", "pat", "pre", "arg", "ps", "c", "arr", "pol", "var", "post", "r", "per", "pr", "pos", "cp", "ap", "ph", "api", "P", "la", "sp", "mp", "pa", "params", "comp", "ar", "patch", "pi", "q", "star", "j", "ax", "cat", "pp", "dr", "rel", "parent", "Par", "prep", "bar", "pas", "pe", "mm", "fr", "col", "parse", "param", "ip"]}}
{"code": "N=int(input())\\ncoins = [100,101,102,103,104,105]\\ndp = [int(i%coins[0]==0) for i in range(N+1)]\\nfor coin in coins[1:]:\\n  for i in range(coin,N+1):\\n    dp[i] += dp[i - coin]\\nif dp[-1] != 0:\\n  print(1)\\nelse:\\n  print(0)", "target": "513", "substitutes": {"N": ["F", "Network", "L", "V", "H", "X", "Y", "NC", "Size", "Num", "NS", "NI", "K", "number", "NW", "NM", "Coin", "O", "P", "B", "C", "Len", "D", "NP", "T", "IP", "Ne", "S", "NY", "I", "NG", "Node", "Ni", "IO", "Ns", "ns", "R", "M", "GN", " n", "G", "fine", "Count", "n"], "coins": ["points", "checks", " networks", "cycle", "groups", "authors", "pages", "xs", "css", "charges", "Bitcoin", " Coins", " spins", "Coin", " Bitcoin", "chain", "values", "wei", "cycles", "codes", "votes", " chains", "blocks", "tails", "inv", "pieces", "quarters", "links", "items", "files", "ails", "bitcoin", "ains", "works", " cookies", "ns", "pins", "iques", " bitcoins", " Bitcoins", "BTC", "flows", "money", "cons", "ips", "cdn", "keys", "fine", "config", "lbs", "chains", "n", "ins"], "dp": ["lp", "pid", "wp", "eps", "fd", "p", "ps", "xs", "number", "tp", "cp", "pos", "rep", "gp", "P", "wei", "sp", "vs", "params", "dm", "d", "do", "DP", "dt", "dl", "pp", "deb", "proxy", "dr", "pins", "address", "dc", "df", "pkg", "di", "drop", "data", "db", "iper", "ep", "np", "pair", "e", "ips", "ds", "dos", "hp", "nb", "cdn", "direction", "ip"], "i": ["ih", "k", "a", "ie", "int", "chi", "qi", "p", "ai", "c", "oi", "o", "y", "h", "ini", "num", "iq", "iu", "mini", "z", "si", "eni", "index", "x", "ind", "I", "u", "pi", "d", "j", "io", "f", "m", "xi", "di", "ni", "ci", "ip", "\u0438", "v", "b", "e", "bi", "zi", "id", "li", "ii", "n", "block", "ti"], "coin": ["IN", "unit", "cycle", "int", "channel", "qi", "currency", "balance", "init", "c", "mon", " bitcoin", "y", "number", "nc", "num", " c", "circ", "chain", "Coin", "year", "interest", "wei", "C", "div", "cost", "x", "quarter", "ind", "I", "fi", "bitcoin", "pin", "network", "self", "fen", "fee", "co", "cos", "ci", "bin", "foo", "money", "e", "qq", "prefix", "config", "n", "block", "ip"]}}
{"code": "from scipy.special import comb\\na,b=map(int,input().split())\\nprint(int(comb(a,2)+comb(b,2)))", "target": "150", "substitutes": {"a": ["aa", "ack", "p", "ai", "c", "ama", "i", "h", "y", "app", "la", "ba", "ab", "da", "x", "A", "l", "d", "ca", "sa", "f", "ac", "ga", "m", "area", "am", "aj", "ae", "alpha", "e", "count", "an", "ad", "n"], "b": ["s", "k", "fb", "p", "bs", "c", "i", "y", "emb", "wb", "beta", "mb", "B", "ba", "ab", "x", "sb", "cb", "l", "bb", "d", "rb", "abb", "eb", "f", "j", "xb", "db", "binary", "bin", "gb", "v", "bar", "base", "e", "bc", "nb", "bi"]}}
{"code": "import sys\\ninput = lambda : sys.stdin.readline().rstrip()\\nsys.setrecursionlimit(max(1000, 10**9))\\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\\n\\nimport decimal\\na,b,c = map(int, input().split())\\nval = (c-a-b)**2 - 4*a*b\\nif c-a-b<0:\\n    print(\"No\")\\nelse:\\n    if val>0:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")", "target": "195", "substitutes": {"input": ["error", "raw", "until", "text", " output", "reader", "request", "feed", "method", "enter", "init", "load", "read", "insert", "format", "work", " inputs", "instance", "inf", "temp", "forward", "run", "file", "exec", "out", "wait", " Input", "pull", "output", " int", "data", "Input", "help", "select", "include", "quiet", "reset", "keep", "source", "config", "form", "update"], "write": ["written", "replace", "call", "line", "feed", "create", "export", "process", "append", "load", "read", "insert", "format", "lock", "log", "connect", "push", "edit", "writer", "put", "w", "save", "flush", "apply", "Write", "out", "sync", "copy", "output", "set", "writ", "data", "pipe", "writing", "dump", "print", "add", "send", "parse", "inline", "update"], "a": ["aa", "int", "va", "ma", "p", "fa", "i", "y", "ba", "ab", "z", "da", "ce", "x", "A", "w", "l", "d", "u", "ca", "f", "sa", " A", "ac", "ga", "m", "area", "aj", "am", "ae", "alpha", "v", "e", "bc", "t", "abc", "an", "ad", "n"], "b": ["aa", "s", "ib", "p", "bs", "g", "bp", "i", "y", "r", "wb", "beta", "B", "ba", "ab", "z", "x", "w", "sb", "cb", "l", "bb", "d", "u", "rb", "bf", "f", "ca", "m", "bd", "j", "db", "v", "e", "bc", "t", "bi", "ad", "n"], "c": ["s", "k", "int", "p", "g", "i", "y", "r", "nc", "ec", "C", "lc", "uc", "z", "fc", "x", "unc", "cy", "cu", "con", "cm", "l", "u", "d", "f", "ca", "cs", "m", "ac", "dc", "ci", "v", "e", "dec", "count", "cc", "cr", "col", "pc", "n"], "val": ["loc", "ol", "value", "int", "code", "vals", "cond", "al", "arg", "na", "sl", "ot", "el", "Val", "fe", "la", "pt", "split", "ana", "valid", "ind", "grad", "l", "sec", "doc", "cal", "ee", "vol", "eval", "fail", "ct", "alpha", "len", "v", "base", "col", "VAL", "aval"]}}
{"code": "\\ndef main():\\n   a,b = map(int,input().split())\\n   if a <= 8 and b<= 8:\\n       print('Yay!')\\n   else:\\n       print(':(')\\nmain()", "target": "322", "substitutes": {"a": ["aa", "va", "ma", "p", "ai", "aw", "c", "i", "ama", "y", "la", "ba", "ab", "au", "index", "x", "pa", "A", "af", "u", "d", "aaa", "f", "sa", "ac", "m", "aj", "am", "ae", "oa", "alpha", "an", "ad", "n"], "b": ["aa", "k", "ib", "fb", "p", "bs", "pb", "c", "i", " B", "y", "r", "wb", "mb", "B", "ba", "ab", "A", "sb", "l", "bb", "d", "bf", "abb", "f", "eb", "j", "bd", "amb", "db", "v", "e", "nb", "bi", "n"]}}
{"code": "num_of_sheep, num_of_wolf = map(int, input().split())\\n\\nif num_of_sheep > num_of_wolf:\\n    print('safe')\\nelse:\\n        print('unsafe')", "target": "585", "substitutes": {"num_of_sheep": ["num_of_heak", "num_of_heake", "num_of_scheip", "num_of_clepp", "num_of_Sheak", "num_of_cleep", "num_of_peip", "num_of_cleake", "num_of_Sheep", "num_of_sheip", "num_of_hepp", "num_of_pepp", "num_of_sheppy", "num_of_heep", "num_of_shepp", "num_of_schepp", "num_of_Shepp", "num_of_scheep", "num_of_peppy", "num_of_Sheake", "num_of_scheppy", "num_of_heip", "num_of_sheak", "num_of_sheake", "num_of_heppy", "num_of_peep", "num_of_cleak"], "num_of_wolf": ["num_of_wolves", "num_of_wife", "num_ofallwolves", "num_of1wolves", "num_of_female", "num_of1female", "num_of_mouth", "num_ofallwife", "num_of1mouth", "num_of_flow", "num_ofallwolf", "num_ofallflow", "num_of1wolf"]}}
{"code": "from collections import deque\\nn = deque(list(input()))\\ndigit = n.popleft()\\ncnt = 1\\nwhile n:\\n    if cnt == 3:\\n        break\\n    d = n.popleft()\\n    if d == digit:\\n        cnt += 1\\n    else:\\n        digit = d\\n        cnt = 1\\n\\nif cnt == 3:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "600", "substitutes": {"n": ["s", "a", "non", "normal", "p", "na", "init", "nd", "g", "c", "i", "o", "r", "number", "nc", " c", "un", "en", "ne", "ng", "z", "on", "fn", "x", "gn", "sn", "node", "ind", "w", "tun", "l", "u", "nn", "nt", "out", "ln", "f", "j", "network", "nw", "m", "ns", "no", "nl", "nr", "v", "b", "e", "N", "t", "print", "dn", "inner", "nb"], "digit": ["character", "float", "letter", "date", "text", "dd", "magic", "token", "int", "driver", "dig", "event", "argument", "latest", "strip", "element", "figure", "number", "format", "num", "year", "central", "pattern", "dot", "div", "factor", "ident", "winner", "oct", "index", "xxx", "inc", "version", "integer", "operator", "creator", "char", "data", "alpha", "dimension", "package", "standard", "id", "month", "odd", "part"], "cnt": ["ecrt", "dcnc", "cNT", "dcNT", " cpt", "cpt", "recent", "dcnt", "cnc", "cint", "fcent", "fcnc", "Cpt", " cNT", " cct", "ncnt", "cct", "lcnc", "crt", "dcct", " cnc", "ncnd", "pnd", "Cnt", "scant", "dcount", "ecent", "ncct", "recrt", "fcnt", "ecnt", "cent", "pant", " cnd", "scnt", "recnc", " cint", "scint", "recnt", " count", "scpt", "lcnt", "fcrt", "lcct", "pnt", "pount", "cant", "Cant", "scnd", "count", "ecnc", "dcnd", "Cint", "cnd", "ncNT", "scount", "Cnd", "Count", "lcount"], "d": ["new", "s", "dd", "dom", "fd", "p", "nd", "g", "c", "i", "o", "r", "h", "sd", "md", "D", "z", "od", "da", "x", "der", "l", "de", "u", "do", "q", "f", "dt", "dr", "back", "dc", "cd", "di", "b", "v", "e", "t", "dp", "ds", "id", "dn", "ad"]}}
{"code": "import math, sys\\nfrom bisect import bisect_left, bisect_right\\nfrom collections import Counter, defaultdict, deque\\nfrom copy import deepcopy\\nfrom functools import lru_cache\\nfrom heapq import heapify, heappop, heappush\\nfrom itertools import accumulate, combinations, permutations\\ninput = sys.stdin.readline\\nmod = 10**9 + 7\\nns = lambda: input().strip()\\nni = lambda: int(input().strip())\\nnm = lambda: map(int, input().split())\\nnl = lambda: list(map(int, input().split()))\\n\\ndef main():\\n    n = ni()\\n\\n    e = [0] * (n + 1)\\n\\n    def num(m):\\n        return len(list(filter(lambda x: x>= m-1, e)))\\n\\n    for i in range(2, n+1):\\n        cur = i\\n        for j in range(2, i+1):\\n            while cur % j == 0:\\n                e[j] += 1\\n                cur //= j\\n    \\n    print(num(75) + num(25)*(num(3) - 1) + num(15)*(num(5) - 1)\\n        + num(5)*(num(5) - 1)*(num(3) - 2) // 2)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "145", "substitutes": {"input": ["name", "error", "raw", "call", "text", "int", "reader", "request", "method", "p", "qa", "argument", "init", "element", "inside", "command", "load", "target", "format", " inputs", "comment", "result", "inf", "empty", "temp", "array", "expression", "index", "image", "action", "exec", "current", "child", "accept", "buffer", "ll", "out", "f", " Input", "acl", "pull", "null", "output", "single", "list", "data", "Input", "bin", "parent", "alpha", "string", "xml", "include", "inner", "submit", "filter", "source", "param", "form"], "mod": ["name", "mode", "magic", "spec", "str", "access", "num", "pos", "time", "cache", "module", "sec", "d", "function", "fun", "option", "pad", "set", "func", "type", "string", "mods", "order", "prefix", "loop", "offset", "Mod"], "ns": ["ss", " lines", "s", " ms", "na", " sig", "nc", " rand", "ne", "ng", " net", " cs", "si", " ne", " Xi", "lines", "nn", "Ni", " si", "Ns", " ls", "ci", "ls", "N", " spin", " na", "bi"], "ni": ["chi", "mi", "init", "NI", "ini", "nai", "nu", "ti", "ani", "ne", "eni", "si", "mini", "nan", "nil", "ny", "nin", "pi", "nn", "nt", "Ni", "ln", "network", "oni", "di", "ci", "nis", "nr", "np", "li", "ii", "nb", "bi"], "nm": ["ji", "mn", "mi", "nc", "ini", "pm", "num", "nom", "ne", "ng", "nu", "eni", "ani", "mini", "si", "mu", "ny", "cm", "nn", "nt", "Ni", "nw", "nr", "np", "mm", "ii", "nb", "nor"], "nl": ["isl", "loc", "ol", "ie", "NL", "nc", "el", "iu", "la", "jl", "ne", "kl", "ng", "si", "bl", "sn", "l", "nn", "ll", "nt", "ln", "nr", "np", "ls", "il", "li", "ii", "nb"], "n": ["s", "k", "mn", "p", "g", "c", "o", "y", "nc", "num", "net", "ne", "nu", "z", "x", "w", "ny", "l", "u", "d", "nn", "f", "network", "b", "v", "N", "t", "nb"], "e": ["em", "s", "E", "ei", "ze", "ie", "me", "ke", "ele", "p", "ed", "g", "c", "element", "y", "o", "en", "r", "ec", "el", "fe", "esi", "size", "ne", "z", "oe", "es", "x", "l", "ee", "d", "u", "f", "eu", "note", "ae", "b", "v", "ea", "pe", "se", "ev", "er"], "m": ["s", "k", "mn", "mi", "p", "g", "c", "y", "o", "h", "num", "r", "im", "ym", "z", "x", "dm", "mu", "w", "l", "u", "d", "f", "M", "v", "b", "mm", "mc", "range"], "i": ["k", "ui", "a", "ie", "int", "mi", "p", "ai", "c", "y", "o", "h", "ini", "iu", "ti", "z", "mini", "si", "x", "sn", "ind", "start", "I", "l", "u", "pi", "d", "f", "xi", "ori", "di", "ci", "hi", "v", "b", "id", "li", "ii", "nb", "bi"], "cur": ["ji", "k", "loc", "ie", "sc", "const", "cor", "ur", "p", "pri", "inter", "c", "r", " cursor", "pr", "tr", "iq", "ver", "iter", "oc", "uc", "ch", "der", "ah", "ind", "con", "th", "child", "sur", "q", "ser", "jp", "rc", "Cur", " Cur", "char", "dr", "sr", "br", "su", "length", "cr", "dec", "fr", " prev", "se", "ul", "ctr", "pg"], "j": ["ji", "k", "unit", "line", "p", "_", "c", "g", "y", "h", "o", "num", "un", "im", "r", "jj", "jl", "z", "ch", "x", "ind", "adj", "I", "it", "l", "u", "d", "pi", "cm", "q", " J", "f", "jp", "jc", "aj", "ij", "J", "v", "b", "t", "li", " l", "next"]}}
{"code": "def d(x,c):\\n if x%2!=0: return c\\n return d(x/2, c+1)\\n\\ninput()\\nprint(sum(d(i,0) for i in map(int,input().split())))", "target": "121", "substitutes": {"x": ["dx", "k", "int", "code", "X", "p", "tx", "ic", "xs", "xx", "fx", "y", "rx", "h", "ix", "px", "z", "xt", "ex", "index", "xxx", "cy", "cross", "u", "d", "max", "f", "m", "xi", "ci", "ct", "v", "xp", "t", "e", "xy", "xc", "xa", "n"], "c": ["k", "a", "code", "p", "g", "h", "r", "ec", "y", "C", "lc", "z", "fc", "ce", "cu", "w", "cb", "con", "cm", "l", "u", "d", "max", "f", "cs", "m", "ac", "function", "dc", "cd", "ci", "ct", "b", "v", "cf", "cr", "e", "count", "cc", "mc", "xc", "pc", "n"], "i": ["k", "ui", "a", "int", "chi", "p", "phi", "ai", "ix", "iu", "slice", "ti", "z", "si", "index", "mu", "ind", "start", "I", "u", "d", "pi", "j", "f", "m", "xi", "ri", "di", "ci", "v", "t", "e", "id", "val", "ii", "li", "bi", "n"]}}
{"code": "N = int(input())\\nS, T = map(str, input().split())\\n\\nS = list(S)\\nT = list(T)\\nANS = []\\n\\nfor i in range(N):\\n    ANS.append(S[i])\\n    ANS.append(T[i])\\n    \\nANS = ''.join(ANS) \\n    \\n    \\nprint(ANS)", "target": "673", "substitutes": {"N": ["F", "E", "Number", "L", "NO", "V", "NL", "X", "Y", "Size", "NC", "NS", "K", "CNN", "O", "P", "C", "B", "D", "NAT", "Len", "Ne", "SIZE", "I", "NT", "OS", "Z", "Ns", "R", "M", "J", "GN", "CN", "NB", "n"], "S": ["F", "s", "ID", "L", "STR", "DS", "V", "AS", "LS", "X", "Y", "SE", "NS", "INS", "Si", "K", "TS", "PS", "SH", "Source", "ST", "SI", "O", "P", "C", "B", "SK", "D", "A", "SL", "RS", "Sl", "I", "ESS", "SS", "OS", "US", "Ns", "U", "R", "List", "M", "Sign", "Sin", "SN", "G", "SO", "SU"], "T": ["AT", "F", "CT", "E", "L", "V", "LT", "TL", "Q", "X", "Y", "TA", "Test", "TS", "TN", "TH", "O", "P", "B", "TO", "D", "Trans", "TG", "TB", "DT", "Tab", "W", "A", "ET", "UT", "NT", "TX", "TE", "TM", "Tr", "Z", "TW", "TT", "TEXT", "TC", "U", "R", "Total", "M", "TF", "t", "WT", "G", "PT"], "ANS": ["ASH", "RAW", "ARS", "IN", "EN", "PASS", "AS", "ans", "LS", "ATIONS", "NS", "LA", "INS", "ENA", "AST", "ANK", "TS", "AND", "FA", "AN", "DATA", "IDS", "LAN", "OSS", "IONS", "SA", "NAT", "NER", "ANT", "ADS", "ONE", "ISH", "A", "ANA", "IAN", "ANG", "ERS", "ON", "NAS", "OS", "NULL", "ENTS", "NAME", "ATS", "ANGE", "ANC", "AMP", "AUT", "CON", "NEW", "ANY", "SAN", "LET", "ANI", "AF", "AY", "CAN", "ADD", "ATES", "SON", "ANN", "KA", "LES", "NA", "ONS", "URN", "an", "ENS"], "i": ["gi", "ji", "k", "ui", "vi", "end", "ie", "int", "qi", "mi", "p", "ai", "c", "y", "h", "ini", "ix", "pos", "slice", "lc", "ti", "mini", "eni", "si", "index", "yi", "ind", "start", "I", "uri", "l", "fi", "u", "d", "pi", "q", "f", "j", "xi", "ri", "di", "ip", "ci", "e", "info", "id", "li", "ii", "n", "bi", "on"]}}
{"code": "n = list(map(str,input()))\\nfn = 0\\nfor i in range(len(n)):\\n  fn += int(n[i])\\nprint(\"Yes\" if int(\"\".join(n))%fn == 0 else \"No\")", "target": "161", "substitutes": {"n": ["s", "k", "name", "p", "init", "c", "o", "y", "nc", "number", "num", "names", "ne", "z", "x", "nan", "gn", "sn", "node", "adj", "args", "l", "u", "d", "cn", "nn", "nt", "f", "ln", "j", "m", "none", "nw", "ns", "input", "nl", "b", "v", "np", "byn", "t", "N", "e", "dn", "nb"], "fn": ["wn", "won", "token", "mn", "wt", "hn", "fd", "fin", "nm", "fp", "width", "tn", "fw", "num", "syn", "bn", "filename", "kn", "fc", "fm", "sn", "gn", "node", "FN", "cn", "bf", "nn", "ln", "f", "fat", "function", "ns", "fun", "fee", "han", "fen", "wl", "fl", "len", "byn", "timeout", "col", "dn", "feat", "cdn"], "i": ["gi", "k", "vi", "ui", "end", "int", "qi", "mi", "p", "ai", "c", "h", "y", "ini", "ix", "iu", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "f", "j", "xi", "ri", "di", "ip", "ci", "v", "e", "id", "li", "ii", "val", "bi", "ti"]}}
{"code": "x, y = [int(s) for s in input().split()]\\nans = 0\\ntemp = x\\nwhile temp <= y:\\n    ans += 1\\n    temp *= 2\\nprint(ans)", "target": "631", "substitutes": {"x": ["dx", "min", "loc", "int", "X", "tx", "p", "xs", "c", "i", "xx", "width", "rx", "h", "px", "ix", "pos", "z", "xxx", "index", "w", "l", "wx", "d", "max", "f", "ax", "xi", "input", "v", "xy", "step", "an", "n"], "y": ["yr", "min", "ady", "dy", "p", "Y", "i", "xx", "o", "ym", "ay", "year", "z", "uy", "ty", "yi", "cy", "w", "start", "ny", "yt", "d", "out", "m", "area", "yy", "ya", "type", "v", "b", "t", "xy", "py", "vy", "isy", "ry", "ey", "n"], "s": ["ss", "sq", "a", "south", "str", "sed", "p", "g", "c", "sym", "i", "o", " i", "pos", "sie", "si", "S", "sb", "start", "ses", "u", "sec", "sin", "f", "sy", "m", " S", "ns", "ws", "single", "su", "b", "v", "string", "e", "t", "sv", "source", "an", "n"], "ans": ["amp", "a", "ents", "span", "cas", "amps", "ras", "ams", "atan", "na", "std", "eps", "antis", "anas", "AN", "ANS", "anes", "mean", "aces", "ann", "cycles", "ani", "anc", "ana", "can", "nan", "clean", " means", "cross", "ant", "aned", "chan", "acer", "ons", "aus", "ens", "ants", "ns", "stuff", "san", "fan", "ians", "acers", "an", "n"], "temp": ["min", "amp", "const", "span", "p", "tx", "c", "i", "var", "stant", "case", "sat", "pos", "tmp", "iter", "pt", "emp", "size", "ani", "z", "index", "clean", "now", "w", "current", "ant", "flat", "ee", "acer", "tem", "max", "ace", "warm", "point", "Temp", "old", "area", " Temp", "padding", "t", "fan", " temperature", " fan", "col", "an", "sum", "tc", "n"]}}
{"code": "from _collections import deque\\nh,w,k=map(int,input().split())\\nS=[input() for _ in range(h)]\\nA=deque([])\\ncnt=1\\n\\ndef func(X):\\n    global cnt\\n    ANS=[]\\n    c=X.count('#')\\n    a=0\\n    for x in X:\\n        ANS.append(cnt)\\n        if x=='#':\\n            cnt+=1\\n            a+=1\\n            if a==c:\\n                for _ in range(w-len(ANS)):\\n                    ANS.append(cnt-1)\\n                break\\n    A.append(ANS)\\n\\n\\n\\nfor i in range(h):\\n    if S[i].count('#')==0 and i!=0 and len(A)!=0:\\n        A.append(A[-1])\\n    elif S[i].count('#')!=0:\\n        func(S[i])\\n\\nif len(A)!=h:\\n    for _ in range(h-len(A)):\\n        A.appendleft(A[0])\\n\\nfor ans in A:\\n    print(*ans)", "target": "165", "substitutes": {"h": ["rh", "hs", "ih", "s", "end", "sh", "H", "p", "g", "host", "work", "r", "ht", "o", "y", "en", "z", "ch", "history", "W", " H", "hh", "l", "bh", "u", "d", "th", "max", "q", "f", "m", "hi", "v", "b", "e", "t", "count", "all", "hm", "ha", "n"], "w": ["hw", "s", "wa", "wt", "H", "win", "p", "g", "width", "y", "o", "r", "num", "we", "wh", "weight", "z", "W", "kw", "l", "th", "u", "d", "q", "f", "m", "sw", "ws", "wd", " W", "v", "b", "e", "n"], "k": ["end", "ke", "p", "g", "K", "o", "work", "r", "num", "kk", "y", "ks", "z", "ch", "kw", "th", "l", "u", "max", "q", "j", "sk", "m", "v", "e", "N", "n"], "S": ["F", "s", "VS", "L", "V", "HS", "H", "Es", "AS", "LS", "SC", "SE", "NS", "JS", "AST", "Si", "TS", "PS", "SH", "Parts", "ST", "SI", "O", "Files", "P", "T", "C", "B", "St", "OSS", "Ps", "ADS", "Settings", "As", "W", "RS", "Sl", "IDS", "Sing", "SS", "Sc", "Ns", "CS", "U", "R", "M", "GS", "N", "SN", "G", "SO", "BS", "SU"], "_": ["code", "__", "non", " local", "p", "g", "ing", " un", " over", "out", "f", " non", "len", " full", "all", "n"], "A": ["F", "AD", "GA", "E", "ACK", "L", "At", "All", "H", "AS", "AL", "Y", "AP", "MA", "LA", "AR", "ASC", "EA", "AST", "Parts", "Ha", "AN", "AM", "O", "P", "B", "C", "T", "As", "D", "AU", "ADS", "API", "AC", "AA", "Args", "AV", "Alpha", "Ar", "W", "I", "SA", "PA", "Anne", "Ma", "ANC", "Average", "Auth", "AB", "Array", "CA", "U", "AF", "AY", "M", "N", "Ast", "G", "Am", "The", "NA", "AW", "RA", "HA", "Ac", "An"], "cnt": ["cNT", "COUNT", " cOUNT", " ccount", "Ccount", "CNT", "cnc", "cOUNT", " cNT", "fnt", " cct", "cct", "ccount", "lcnc", " cnc", "fct", "fount", "Cnt", " cno", "Cnc", "Cno", "fNT", "lccount", "lcOUNT", " count", "cno", "lcnt", "lcct", "lcno", "count", "Cct", "lcNT", "Count", "lcount"], "X": ["F", "Tx", "L", "Sw", "V", "H", "DX", "Q", "XX", "Y", "XP", "Width", "EX", "K", "XT", "ZX", "FF", "O", "P", "T", "C", "D", "W", "XXX", "HTTP", "TX", "Z", "Data", "FX", "Array", "U", "R", "M", "Sax", "XL", "N", "G", "Path", "Ex", "OX"], "ANS": ["AT", "IN", "EN", "NN", "AS", "XX", "LS", "NS", "LA", "EX", "AST", "SH", "Parts", "FA", "AN", "DATA", "ZX", "IDS", "SA", "P", "AU", "ASC", "AC", "ann", "anon", "ADS", "ANT", "ONE", "AA", "An", "ANA", "W", "ANG", "ON", "NAS", "OS", "NULL", "ANC", "CON", "II", "Array", "WA", "SAN", "CA", "ANI", "AF", "CC", "\u03b1", "KA", "ANN", "HA", "NA", "ONS", "OX", "an", "ENS", "YS"], "c": ["s", "aa", "p", "g", "y", "o", "nc", "r", "C", "lc", "unc", "l", "u", "d", "f", "ca", "cs", "ac", "m", "ci", "b", "v", "t", "e", "count", "cc", "col", "pc", "xc", "n"], "a": ["aa", "wa", "at", "va", "p", "ai", "aw", "fa", "y", "o", "ba", "au", "ana", "af", "ia", "ata", "u", "d", "aaa", "ca", "f", "sa", "ac", "m", "asa", "area", "am", "aj", "ae", "oa", "alpha", "b", "e", "count", "an", "ad", "n"], "x": ["s", " p", "int", "p", "xs", " func", "xx", "y", "rx", "ix", "o", "r", "xt", "array", " xx", "index", "ex", "xxx", "wx", "u", "d", "f", "ax", " ax", "m", "sw", "xi", "ct", "xp", "v", " cx", "an", "b", "xc", "xa", "n"], "i": ["gi", "ih", "ui", "ie", "int", "qi", "p", "phi", "ai", "y", "o", "ix", "iu", "ti", "z", "mini", "si", "index", "yi", "ind", "I", "uri", "l", "u", "pi", "d", "ki", "j", "iii", "f", "io", "ir", "xi", "di", "ri", "hi", "ci", "ni", "v", "b", "e", "multi", "id", "li", "ii", "ik", "n", "bi", "ad", "ip"], "ans": ["ss", "s", "amp", "lan", "span", "cas", "amps", "AS", "ams", "na", "ai", "gan", "LA", "AN", "ay", "aos", "ASC", "annels", "As", "ann", "anon", "anc", "au", "ADS", "ays", "ana", "can", "nan", "An", "lang", "args", "aned", "ass", "ons", "ants", "ns", "ds", "NA", "an", "ins"]}}
{"code": "h, w, k = map(int, input().split())\\ns = [list(map(int, list(input()))) for _ in range(h)]\\nresult = []\\nif h*w<=k:\\n    result.append(0)\\nelse:\\n    for i in range(2**(h-1)):\\n        checker, num, p = 0, i ,[0]\\n        for _ in range(h):\\n            p.append(p[-1]+num%2)\\n            checker += num%2\\n            num >>= 1\\n        x = 0\\n        c = [0 for _ in range(checker+1)]\\n        for j in range(w):\\n            num = i\\n            nex = [0 for _ in range(checker+1)]\\n            for m in range(h):\\n                nex[p[m]] += s[m][j]\\n            if max(nex) > k:\\n                x = float('inf')\\n                break            \\n            \\n            if all(nex[m]+c[m] <= k for m in range(checker+1)):\\n                c = [c[I]+nex[I] for I in range(checker+1)]\\n            else:\\n                x += 1\\n                c = nex\\n        result.append(checker+x)\\nprint(min(result))", "target": "329", "substitutes": {"h": ["rh", "ih", "hs", "end", "sh", "wa", "H", "g", "oh", "gh", "y", "o", "r", "ht", "ph", "z", "ah", "hh", "l", "th", "u", "d", "q", "f", "hi", "v", "b", "e", "t", "count", "hm", "id", "n"], "w": ["wn", "wa", "wt", "g", "aw", "width", "y", "fw", "r", "we", "wb", "wh", "z", "wal", "W", "kw", "wk", "l", "wx", "u", "d", "q", "f", "ww", "sw", "ws", "wl", "wd", "v", "b", "e", "t", "n"], "k": ["km", "ke", "g", "K", "y", "o", "r", "kk", "ks", "size", "z", "ch", "mk", "kw", "l", "u", "d", "max", "q", "sk", "f", "v", "b", "e", "n"], "s": ["ss", "sq", "spec", "strings", "sc", "qs", "ins", "ps", "xs", "g", "y", "results", "ks", " results", "z", "si", "es", "params", "S", "sites", "l", "services", "ses", "items", "stats", "f", "sa", "cs", "sync", "sw", "ns", "ws", "features", "os", "v", "b", "ls", "ips", "n"], "_": ["line", "__", "code", "non", "place", "al", "g", "ing", "of", "un", "ay", " time", "long", "user", "l", "q", "out", "f", "ac", "self", "up", "am", "all", " n", "val", "block"], "result": ["ner", "total", "default", "success", "err", "Results", "extra", "r", "number", "results", "dict", "case", "ver", "counter", "div", "array", "final", "search", "response", "cache", "Result", "source", "diff", "master", "current", "answer", "root", "score", "report", "compl", "f", "page", "sr", "status", "found", "position", "sequence", "br", "output", "df", "parent", "list", "data", "features", "match", "complete", "summary", "pair", "e", "package", "order", "message", "ret", "range", "config", "manager", "test", "sum", "res", "info"], "i": ["ie", "int", "mi", "init", "ai", "o", "y", "im", "r", "iu", "z", "si", "index", "ind", "it", "l", "u", "pi", "d", "q", "f", "xi", "ni", "ci", "v", "b", "t", "e", "id", "li", "ii", "n", "ip"], "checker": ["lookner", "calleri", "checkter", "checkher", "looker", "linkER", "ckers", "checkener", "checkerer", "callers", " checkerer", "lookerer", "walker", "ckter", "checkder", "linkher", "caller", " checkher", "viewaser", "cleaners", "lookr", "checkner", "linker", "Checkr", " checkener", "checkingaser", "viewer", "viewers", "cker", " checkder", " checkaser", "cleaneri", " checkner", " checkeri", " checkers", "Checkner", "testener", "checkeri", "cleanener", "Checkter", "walkener", "Checkher", "CheckER", "checkinger", "ckner", "checkingers", "tester", "checkingener", "checkaser", " checkter", "checkers", "cleanner", "Checkers", "Checker", "Checkerer", "cleaner", " checkER", "viewener", "checkr", "testder", "walkner", "checkER", " checkr", "cleander", "walkder", "callner", "linkers", "testner"], "num": ["min", "loc", "unit", " dim", "int", "mn", "dom", "na", "init", "g", "Num", " number", "umi", "number", "o", "im", "un", "pos", "NUM", "nu", "nom", "div", "coord", "uc", "index", "mu", "inc", "om", "con", "u", "d", " nu", "max", "uni", "one", "f", "nam", "am", "no", "bin", "dim", "np", "count", "col", "id", " n", "hom", "nb", "form", "sum", " Num", "um", "offset", "n"], "p": ["lp", "a", "ps", "g", "fp", "y", "tp", "r", "pr", "pos", "cp", "o", "P", "sp", "z", "po", "params", "l", "patch", "u", "pi", "d", "q", "f", "pp", "b", "v", "np", "t", "pe", "pn", "e", "part", "n", "pc"], "x": ["dx", "int", "sex", "rex", "X", "xf", "exp", "tx", "xs", "xx", "fx", "y", "rx", "ix", "nc", "number", "px", "z", "xt", "ex", "index", "xxx", "cross", "wx", "u", "ctx", "q", "f", "ax", "xi", "check", "xe", "xp", "v", "e", "t", "xes", "xy", "xc", "n", "pc"], "c": ["a", "g", "y", "r", "nc", "ec", "o", "C", "lc", "z", "fc", "ch", "ce", "cu", "con", "cm", "l", "u", "d", "cn", "q", "f", "rc", "cs", "ac", "dc", "ci", "ct", "b", "v", "cf", "e", "bc", "cc", "pc", "xc", "mc", "n"], "j": ["ji", "ie", "ib", "g", "y", "o", "r", "jj", "im", "jl", "z", "ch", "l", "u", "d", "uj", "q", "jp", "f", "jc", "xi", "am", "ij", "J", "v", "b", "e", "kj", "li", "ii", "n"], "nex": ["ss", "dd", "super", "rx", "ix", "cp", "pex", "adj", "ess", "xp", "nexus", "nox", "sex", "XX", "ans", "xs", "xx", "ne", "cross", "flex", "nz", "hex", "cs", "sync", "string", "ez", "nec", "xc", "xxxxxxxx", "ross", "python", "rex", "zes", "lex", "ose", "syn", "el", "z", "eni", "ex", "es", "oct", "none", "ns", "ski", "cons", "xes", "pn", "zi", "config", "n", "ices", "zer", "na", "cess", "nc", "px", "nes", "txt", "kn", "ce", "nn", "xd", "six", "null", "oss", "xa", "bis"], "m": ["km", "min", "a", "L", "mn", "mi", "g", "y", "o", "im", "un", "pm", "ym", "r", "P", "z", "cm", "l", "u", "d", "q", "f", "U", "M", "v", "b", "e", "N", "mm", "mc", "an", "n"], "I": ["F", "E", "L", "V", "H", "qi", "Q", "X", "Y", "MI", "K", "im", "O", "P", "B", "C", "Im", "D", "IJ", "T", "z", "A", "W", "mu", "IM", "u", "Z", "II", "xi", "Me", "U", "Mi", "R", "J", "M", "v", "N", "G", "li", "ii"]}}
{"code": "import math\\n\\ndef solve(y, z):\\n  res = 0\\n  for i in range(len(y)):\\n    res += (y[i]-z[i])**2\\n  return math.sqrt(res)\\n\\nn, d = map(int, input().split())\\nx = [list(map(int, input().split())) for _ in range(n)]\\nans = 0\\nfor i in range(n-1):\\n  for j in range(i+1, n):\\n    dist = solve(x[i], x[j])\\n    if int(dist) == dist: ans += 1\\nprint(ans)", "target": "182", "substitutes": {"y": ["yr", "s", "a", "ys", "dy", "ye", "p", "Y", "phi", "c", "h", "o", "ym", "zy", "yi", "cy", "ny", "yt", "l", "q", "f", "sy", "m", "yy", "ya", "oy", "v", "b", "t", "e", "xy", "py", "vy", "ey", "sky"], "z": ["iz", "ze", "p", "g", "c", "o", "h", "ix", "inf", "zh", "zy", "w", "l", "u", "q", "Z", "f", "m", "zen", "v", "b", "e", "t", "ez", "zi", "vy", "ii"], "res": ["rh", "ras", "cor", "vals", "eps", "arr", "ps", "ms", "err", "our", "rate", "rx", "r", "css", "results", "result", "pres", "re", "gr", "reg", "ares", "rev", "es", "blocks", "Res", "max", "ons", "resolution", "ids", "RES", "range", "sr", "cs", "ns", "resh", "resp", "rates", "os", "rem", "ress", "nos", "powers", "ret", "rs"], "i": ["ih", "ji", "k", "ui", "vi", "a", "ei", "int", "ie", "mi", "p", "phi", "ai", "c", "o", "ini", "iu", "si", "index", "yi", "ind", "start", "I", "l", "u", "pi", "io", "f", "m", "xi", "ci", "v", "b", "e", "zi", "id", "li", "ii", "ti"], "n": ["s", "k", "a", "mn", "p", "nd", "g", "c", "o", "nc", "num", "r", "h", "en", "D", "w", "l", "u", "nn", "nt", "max", "f", "m", "ns", "ni", "v", "b", "len", "e", "N", "t", "dn", "nb"], "d": ["dd", "dy", "p", "nd", "g", "c", "r", "sd", "D", "dot", "div", "da", "diff", "w", "ind", "u", "dt", "f", "m", "dc", "di", "data", "dim", "e", "ds", "id", "dn"], "x": ["s", "k", "a", "int", "python", "X", "p", "xs", "c", "g", "xx", "rx", "o", "ix", "h", "xt", " xx", "ex", "es", "index", "xxx", "w", "cross", "l", "u", "q", "one", "f", "ax", "m", "xi", "input", "list", "data", "xp", "v", "e", "t", "xes", "xy", "xc"], "_": ["k", "p", "g", " ip", " time", "f", "len", " length", " nan"], "ans": ["ss", "s", "a", "lan", "span", "nas", "ins", "ras", "p", "na", "xs", "ions", "ours", "activation", "AN", "ANS", "anes", "ks", "annels", "ann", "ares", "anc", "ani", "ays", "nan", "ars", "lines", "aned", "nn", "ons", "ids", "ens", "sk", "cs", "rs", "ants", "ns", "rank", "rates", "os", "len", "ls", "cons", "ds", "rss", "an"], "j": ["ji", "k", "a", "dy", "ie", "p", " dj", "jo", "c", "dj", "jj", "o", "h", "jl", "je", "ind", "obj", "l", "u", "uj", " J", "q", "js", "jp", "f", "oj", "xi", "aj", "jam", "ij", "J", "bj", "b", " ii", "v", "e", "kj", "li", "ii"], "dist": ["dx", " distance", "cmp", "rest", "dy", "span", "cor", "effect", "p", "distance", "std", "nd", "err", " Dist", "dj", "radius", "sd", "Distance", "pos", "rep", "md", "support", "sp", "desc", "nu", "ne", "deep", "da", "diff", "ind", "pred", "conn", "src", "req", "dis", "shift", "sup", "sort", "cs", "ist", "dr", "core", "Dist", "rank", "depth", "cd", "check", "dev", "np", "det", "ds", "feat", "test"]}}
{"code": "import sys, itertools\\nprint(len(set(itertools.islice(sys.stdin.buffer, 1, None))))", "target": "326", "substitutes": {}}
{"code": "\\ns = input()\\nn = int(input())\\n\\nhanten=0\\ns1=\"\"\\ns2=\"\"\\nfor i in range(n):\\n    Q = input()\\n    if int(Q[0])==1:\\n        hanten+=1 \\n    elif int(Q[0])==2 :\\n        if hanten%2 == int(Q[2])-1 :\\n            s1= s1+Q[4]\\n        else:\\n            s2= s2+Q[4]\\n\\ns1 = s1[::-1]\\ns = s1+s+s2\\n\\nif hanten%2 :\\n    s = s[::-1]\\nprint(s)        \\n\\n\\n\\n", "target": "292", "substitutes": {"s": ["ss", "new", "a", "strings", "south", "qs", "str", "ins", "p", "ps", "states", "g", "c", "y", "r", "o", "h", "sl", "bis", "fs", "z", "si", "es", "x", "params", "S", "w", "sb", "l", "services", "ses", "u", "parts", "q", "sg", "f", "sa", "cs", "m", "ns", "ws", "input", "su", "features", "gs", "b", "v", "string", "t", "ls", "e"], "n": ["k", "p", "g", "c", "o", "h", "nc", "num", "y", "number", "r", "size", "ne", "z", "x", "l", "d", "q", "j", "f", "network", "m", "ns", "no", "v", "b", "np", "t", "N", "count", "nb"], "hanten": ["hancener", "hantlen", "ihantedlen", " handen", " handsen", "hantsens", "handsens", " hantening", "hANTens", " handhen", " handening", "hantens", "handener", "hancen", " hantens", "hancsen", " handens", "hantsening", "ihantener", " hantener", "hantedsten", "handsen", "handenn", "handsenn", "handhen", " hantsens", "hancening", "ihantlen", "hantingsten", "handens", "hANTener", "hantedener", "ihanten", "hantedenn", "hanthen", " hantsening", "ihantedsten", " hantsen", " hantsener", " handener", " hantenn", "hantsener", "hantedhen", "ihanteden", "hantinglen", "handen", " hanthen", "hantssten", "hantedlen", "hantedening", "hantssen", "handening", "hANTening", "hantsen", "hantening", "hantener", "hanteden", "handshen", "hantenn", "hantsten", "ihantsten", "hantedens", "hantingener", "hantingen", "hantslen", "ihantedener", " handenn", "hANTen"], "s1": ["Sone", " s11", "ses0", "p81", "pb", "ps2", "p3", "ss3", "S3", "p11", " s81", "ss81", "s81", "S2", "s11", "S1", "p0", "pone", "ses1", "sb", "Sb", "ss1", "sone", "ps1", "ssone", "p1", "p2", " s3", " sone", "s0", "ps11", "ses2", "s3", " s0", "ss2", " sb"], "s2": [" s82", " s02", "s002", "q0", "h4", "p4", "p02", " s4", "q4", "sSecond", "q2", "strings002", "h1", "q002", "S2", "s4", " sSecond", "qSecond", "s82", "h02", "S4", "strings82", "p1", " s002", "S0", "p2", "strings2", "ss4", "s0", "q82", "ss0", "SSecond", "h2", "s02", " s0", "ss2"], "i": ["gi", "k", "ie", "ib", "p", "c", "isin", "y", "gu", "num", "iu", "sp", "z", "si", "index", "x", "ind", "start", "I", "u", "d", "j", "e", "t", "id", "li", "bit", "ip"], "Q": ["F", "QU", "E", "L", "V", "Queue", "H", "X", "Y", "Check", "NC", "Sample", "Query", "K", "Test", "IT", "SH", "O", "P", "T", "C", "B", "D", "Int", "EC", "IQ", "IP", "Sync", "Question", "MQ", "S", "A", "W", "IX", "I", "Config", "Ch", "Do", "q", "Z", "CL", "Py", "U", "R", "IV", "J", "M", "Qu", "N", "G", "HQ", "Long"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\ncnt = 0\\nfor i in range(3**N):\\n    ii = i\\n    res = 1\\n    for j in range(N):\\n        k = ii % 3\\n        ii = ii // 3\\n        res *= (A[j]-1+k)\\n    if res % 2 == 0:\\n        cnt += 1\\nprint(cnt)", "target": "282", "substitutes": {"N": ["F", "L", "V", "NN", "H", "Q", "X", "Y", "NC", "Num", "NS", "NE", "K", "CNN", "O", "P", "B", "C", "T", "D", "Ne", "S", "I", "NT", "Ni", "Z", "Ns", "ns", "R", "J", "M", " n", "G", "n"], "A": ["F", "E", "a", "L", "At", "V", "H", "Q", "AS", "Y", "AP", "IA", "LA", "AR", "K", "P", "B", "C", "T", "D", "mA", "Ar", "As", "API", "AA", "Alpha", "S", "I", "Z", "Array", "CA", "R", "alpha", "M", "J", "G", "NA"], "cnt": ["pcrt", "dcnc", "cNT", "pcant", "CNT", "dcnt", "cnc", "fcno", "dcrt", " crt", " cNT", " cct", "cct", "crt", "dcct", "fcNT", " cant", " cnc", "Cnt", " cno", "fcnt", "Cnc", "Cno", "pcnt", "cno", "fcrt", "cant", "Crt", "Cant", "pcNT", "Cct"], "i": ["ih", "a", "ie", "int", "p", "ai", "g", "c", "y", "iu", "si", "x", "ind", "I", "l", "u", "pi", "d", "q", "f", "io", "m", "xi", "ni", "ci", "ip", "v", "e", "li", "n"], "ii": ["gi", "ji", "aff", "ie", "int", "ei", "chi", "qi", "p", "init", "c", "y", "inf", "ani", "z", "mini", "si", "index", "inv", "ind", "I", "fi", "pi", "q", "Ni", "f", "iii", "agi", "m", "II", "xi", "di", "ni", "ci", "alpha", "Mi", "v", "b", "ice", "info", "zi", "li", "sum", "n"], "res": ["ices", "Rs", "qs", "vec", "eps", "ins", "arr", "ps", "ms", "rows", "err", " Res", "r", "results", "re", "gr", "ks", "rez", "ares", "rev", "grid", "es", "Res", "cells", "req", "ids", "row", "resolution", "js", "RES", "ons", "nz", "cs", "ns", "resh", "R", "os", "nr", "ress", "acts", "powers", "nos", "id", "rs", "ries", "ES"], "j": ["ji", "end", "a", "ie", "ja", "p", "g", "c", "y", "r", "jj", "ijk", "jl", "z", "si", "x", "ind", "w", "I", "adj", "l", "d", "uj", "q", "f", "jp", "m", "jc", "aj", "ij", "J", "v", "b", "e", "kj", "li", "n"], "k": ["qi", "p", "g", "c", "K", "y", "o", "r", "ks", "kn", "z", "x", "w", "u", "d", "q", "ki", "sk", "f", "m", "ci", "v", "b", "e", "range", "n"]}}
{"code": "#\u5168\u4f53\u7684\u306a\u65b9\u91dd\\n#\u6d45\u3044\u307b\u3046\u304b\u3089\u8caa\u6b32\u306b\u9802\u70b9\u3092\u500d\u5316\u3057\u3066\u3044\u304f\\n#\u73fe\u5728\u898b\u3066\u3044\u308b\u6bb5\u306e\u9802\u70b9\u6570\u304c\u305d\u308c\u3088\u308a\u6df1\u3044\u6bb5\u306e\u8449\u306e\u6570\u3092\u8d85\u3048\u308b\u3068\u4f59\u3063\u3066\u3057\u307e\u3046\\n#\u3088\u3063\u3066\u3001min\u3067\u62bc\u3055\u3048\u3064\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b(\u7d2f\u7a4d\u548c\u3067\u9ad8\u901f\u5316\u304c\u5fc5\u8981)\\n\\n\\n#\u7d2f\u7a4d\u548c\u306e\u5b9a\u7fa9\\ndef Csum(a):\\n    b,c=[],0\\n    for i in range(len(a)):\\n        c+=a[i]\\n        b.append(c)\\n    return b\\n\\n#n:\u4e8c\u5206\u6728\u306e\u6df1\u3055\\n#a:\u305d\u308c\u305e\u308c\u306e\u6bb5\u6570\u306e\u8449\u306e\u6570\\n#s:a\u306e\u7d2f\u7a4d\u548c\u3092\u3068\u3063\u305f\u3082\u306e(\u305d\u306e\u6df1\u3055\u3088\u308a\u3082\u6d45\u3044\u8449\u306e\u6570)\\n#su:a\u306e\u7dcf\u548c(\u5168\u4f53\u306e\u8449\u306e\u6570)\\n#b:\u73fe\u5728\u306e\u6df1\u3055\u306e\u9802\u70b9\u6570\\n#c:\u73fe\u5728\u307e\u3067\u306e\u9802\u70b9\u6570\\n\\nn=int(input())\\na=list(map(int,input().split()))\\ns,su,b,c=Csum(a),sum(a),1,0\\nfor i in range(n+1):\\n    #\u9802\u70b9\u6570\u30ab\u30a6\u30f3\u30c8\u306b\u73fe\u5728\u306e\u6bb5\u3092\u52a0\u7b97\\n    #\u8449\u306e\u6570\u3060\u3051\u89aa\u306e\u5019\u88dc\u3092\u6e1b\u3089\u3057\u3066\u304a\u304f\\n    c+=b\\n    b-=a[i]\\n    #\u6700\u5f8c\u307e\u3067\u9802\u70b9\u3092\u4f7f\u3044\u5207\u3063\u305f\u306a\u3089c\u3092\u51fa\u529b\\n    #\u9014\u4e2d\u3067\u9802\u70b9\u304c\u8db3\u308a\u306a\u304f\u306a\u3063\u305f\u3089-1\u3092\u51fa\u529b\\n    if b<=0:\\n        if i==n and b==0:\\n            print(c)\\n        else:\\n            print(-1)\\n        break\\n    #\u6b21\u306e\u6bb5\u306e\u9802\u70b9\u6570\u306e\u66f4\u65b0\\n    #i\u3088\u308a\u6df1\u3044\u8449\u306e\u6570(su-s[i])\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\\n    b=min(b*2,su-s[i])", "target": "625", "substitutes": {}}
{"code": "n = int(input())\\njisho = {}\\ns = list(input())\\nfor w in s:\\n    if w in jisho:\\n        jisho[w] += 1\\n    else:\\n        jisho[w] = 1\\n\\nfor _ in range(n - 1):\\n    s = list(input())\\n    temp = {}\\n    for w in s:\\n        if w in temp:\\n            temp[w] += 1\\n        else:\\n            temp[w] = 1\\n    for key, val in jisho.items():\\n        if key in temp:\\n            jisho[key] = min(jisho[key], temp[key])\\n        else:\\n            jisho[key] = 0\\nkouho = []\\nstart = ord(\"a\")\\nfor i in range(start, start + 26):\\n    w = chr(i)\\n    if w in jisho:\\n        kouho += str(w) * jisho[w]\\n    else:\\n        continue\\nprint(*kouho, sep=\"\")\\n", "target": "220", "substitutes": {"n": ["k", "p", "g", "c", "o", "h", "nc", "num", "net", "ne", "z", "x", "nan", "sn", "ny", "l", "d", "nt", "nn", "f", "network", "j", "m", "Ns", "ns", "nr", "v", "b", "np", "t", "N", "nb", "nor"], "jisho": ["kicho", "jikod", "jishoa", " jishoko", "jishos", "jishoko", " jishO", "nishos", "jizzoo", "jichos", "jistoi", "jashos", "kishoi", " jashoa", "jishoff", "jiko", " jishoa", " jashoi", "jshoff", " jantoo", "nichos", "jeshoi", "jashi", " jashoo", "jikoi", " jishoo", "jishingi", "jismoa", "kichoi", "jihoo", "jistoko", "jasha", "jishingoo", "jichoi", "jishingos", "jeshos", "nishoi", "jishingod", "jashod", "jismo", "jishot", " jistoa", "jantoa", "jishod", "jamishingo", "jamishop", "jistos", "jizzo", " jishot", " jantO", "jishop", "jinyoff", "kisho", "jamishingop", "jeshoa", "kishos", "jesho", "jantO", "jantoi", " jisha", " jashos", "janto", "jizzoi", " jistos", " jisto", " jishi", "jishoi", "jinyos", " jishod", "nicho", "jishi", "jishingoff", "nishoo", "jshop", "jihos", "jantos", " jantoko", "jiho", "jasho", "jamisho", " jashod", "jantoko", "nichoo", "jichoo", "jshos", "jista", "jistoa", "nichoi", "jashoo", "jamishos", "jihoi", "jishingO", "janta", "jamishingos", "jikot", "jistoo", "nisho", "jizzot", "jistO", "jisto", " jishoi", "jshoi", "jikoo", " jashot", "jamishingoff", "jashoa", "jiki", "jishoo", "jishingo", "kichos", "jismoi", "jashoi", " jishos", "jishingop", "jishO", "jisha", " jasha", " jashi", " jasho", "jsho", "jishingoko", "jismos", "jikos", "kichoo", "jichoa", "jshoo", "jamishoff", "jashot", "jinyo", "kishoo", "jicho", "jinyop", " jistoi", " janto", "jantoo"], "s": ["ss", "k", "qs", "ins", "p", "ps", "g", "c", "y", "o", "h", "ks", "z", "si", "es", "params", "S", "args", "l", "services", "u", "items", "ses", "d", "f", "ssl", "m", "cs", "ns", "self", "ws", "single", "os", "v", "ings", "b", "space", "t", "e", "ls", "ds", "source"], "w": ["hw", "k", "wn", "wa", "name", "a", "value", "wer", "wt", "ye", "wp", "words", "win", "p", "tw", "g", "aw", "c", "width", "var", "rw", "h", "y", "fw", "work", "o", "r", "how", "we", "wh", "wb", "weight", "wave", "z", "week", "wal", "x", "ew", "kw", "W", "l", "wx", "u", "d", "max", "q", "wr", "f", "nw", "m", "ww", "sw", "ws", "wo", "wan", "no", "wd", "way", "v", "ow", "b", "t", "e", "yp", "iw", "col", "word"], "_": ["k", "p", "g", "h", "un", " x", " k", "time", "l", "out", "j", "f", " j", "len", "ow", "all"], "temp": ["ss", "min", "const", "pre", "y", "slice", "empty", "si", "x", "current", "adj", "j", "f", "ac", "private", "data", "zip", "fake", "new", "stable", "tmp", "pt", "final", "flat", "u", "sw", "small", "mins", "v", "e", "keys", "source", "form", "tc", "total", "unit", "wa", "str", "p", "default", "case", "tp", "iter", "sp", "z", "index", "cache", "now", "get", "sol", "wait", "frac", "m", "input", "t", "k", "value", "static", "c", "o", "txt", "emp", "local", "cook", "diff", "valid", "tem", "Temp", "ws", "output", "base", "test"], "key": ["name", "k", "change", "a", "value", "ie", "int", "str", "code", "ye", "p", "go", "exp", "c", "g", "var", "y", "net", "switch", "ay", "ver", "year", "any", "ry", "sign", "lc", "week", "rule", "time", "index", "x", "kw", "wife", "KEY", "ak", "wk", "q", "row", "hop", "j", "point", "char", "ac", "ek", "co", "parent", "no", "type", "v", "ow", "pair", "e", "order", "keys", "col", "id", "step", "word", "part", "Key", "ip"], "val": ["value", "vals", "al", "tx", "aw", "var", "item", "buf", "pt", "index", " value", "bl", "valid", "ind", "obj", "ee", "doc", "out", "sol", "sel", "eval", "old", "v", "len", "dev", "col", "uu"], "kouho": ["koulho", " koulko", "kouhao", "koupko", "kouso", " koulhao", "khouhao", "keehao", "kouyo", "koudhao", " koulso", "kouko", " koullo", "kouplo", "khouyo", "keeho", "koufso", "khoulo", "koudho", "kauhao", " koupo", " kauho", "koupso", "k\u00f3lo", "koulso", "k\u00f3hao", "koulhao", "koullo", "kauho", "koulyo", "koudpo", "koupo", " kouso", "koupho", "k\u00f3ho", "kouflo", " koulo", "k\u00f3yo", "keepo", "koufko", " koulyo", " kouhao", "koulko", " kaupo", "koulo", " kouko", "khouho", " kauhao", "kaupo", "koufho", " kouyo", " koulho"], "start": ["min", "k", "end", "a", "rest", "int", "open", "Start", "p", "init", "c", "y", "r", "use", "pos", "seed", "first", "z", "scale", "index", "x", "source", "st", "next", "ind", "get", "l", "shift", "stop", "set", "check", "type", "space", "starting", "add", "id", "step", "parse", "range", "part", "ad", "offset"], "i": ["ih", "k", "vi", "end", "a", "qi", "p", "phi", "ai", "c", "h", "y", "r", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "I", "l", "u", "pi", "q", "j", "m", "xi", "ri", "hi", "b", "v", "e", "li", "ii", "ip"]}}
{"code": "n = int(input())\\ninp = list(map(int,input().split()))\\ninp.reverse()\\nfor i in range(n-1):\\n\tprint(inp[i],\" \",sep=\"\",end=\"\")\\nprint(inp[n-1])", "target": "248", "substitutes": {"n": ["s", "k", "span", "non", "p", "c", "o", "r", "nc", "number", "num", "net", "y", "h", "size", "ne", "nu", "z", "fn", "x", "sn", "w", "adj", "l", "d", "nt", "nn", "f", "j", "network", "m", "ns", "no", "nl", "length", "b", "len", "v", "t", "N", "e", "count", "pn", "nb", "nor"], "inp": ["inni", "innp", "Inv", "pev", "INpr", " inv", "insp", "Inp", "enp", "ini", "inps", "peps", "incp", "insps", "pepr", "insv", "inq", " inb", "inv", " incp", "pep", "insi", "INps", " ini", "inb", "Inps", "Inpr", "incps", "INcp", " inq", "Incp", "incb", "inpr", "innv", " inps", "innps", "enb", "incq", "INv", "INp", "enq", "enps"], "i": ["gi", "ih", "k", "ui", "end", "ie", "int", "qi", "mi", "p", "ai", "g", "c", " I", "h", "y", "ini", "pos", "sp", "ti", "z", "si", "eni", "index", "x", "ind", "start", "I", "l", "u", "d", "j", "f", "ri", "ni", "ip", "ci", "b", "e", "id", "li", "ii"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees#, log2, log\\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left, insort, insort_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\nfrom decimal import Decimal\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10**9 + 7\\nfrom decimal import *\\n\\na, b = MAP()\\n\\nif a*b <= 0:\\n\tprint(\"Zero\")\\nelif (b-a+1)%2 and b < 0:\\n\tprint(\"Negative\")\\nelse:\\n\tprint(\"Positive\")", "target": "725", "substitutes": {}}
{"code": "n = int(input())\\n\\nlst = [2, 1]\\nfor i in range(100):\\n    lst.append(lst[-1]+lst[-2])\\nprint(lst[n])", "target": "50", "substitutes": {"n": ["name", "k", "a", "code", "p", "g", "c", "o", "r", "number", "nc", "y", "num", "h", "net", "left", "ne", "z", "fn", "x", "l", "u", "d", "nt", "f", "j", "m", "ns", "nl", "b", "v", "len", "t", "N", "count", "all", "nb"], "lst": ["Lbl", "plset", "plST", "ilint", "ilst", "klST", "llST", "nsts", "ilsts", "plst", "lsp", " lsp", "nst", "lint", "llbl", " lset", " lsts", "klstr", " lint", "elST", " lstr", " lbl", "lstr", "nST", "LST", "nset", "ilST", " lST", "plsts", "lST", "Lst", "elbl", "llst", "klsts", "klst", "elsts", "plint", "llsp", "lbl", "elstr", "lsts", "elst", "Lstr", "lset", "elsp"], "i": ["gi", "k", "ie", "p", "c", "h", "ix", "iu", "z", "index", "ind", "I", "l", "u", "d", "q", "j", "io", "f", "inn", "e", "t", "il", "col", "id", "li", "inner"]}}
{"code": "S = str(input())\\nweek = ['SAT','FRI','THU','WED','TUE','MON','SUN']\\n\\nfor i in range(7):\\n  if S == week[i]:\\n    print(i+1)", "target": "471", "substitutes": {"S": ["F", "s", "L", "IS", "V", "H", "Y", "SE", "NS", "TS", "SH", "ST", "SI", "O", "P", "T", "C", "B", "SK", "D", "SB", "A", "W", "SS", "WS", "U", "R", "M", "SP", "N", "SN", "G", "SO", "SU"], "week": ["name", "letter", "date", "field", "unit", "season", "hour", "work", "year", "section", "seed", "game", "weekly", "Week", "rule", "time", "months", "index", "wife", "w", "window", "wk", " Week", "row", "EEK", "eight", "f", " weekday", " weeks", "day", "key", "DAY", "word", "month", "part", " WEEK"], "i": ["ji", "k", "end", "a", "int", "reci", "qi", "mi", "p", "phi", "ai", "c", "h", "num", "ini", "pos", "iu", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", "io", "xi", "di", "ski", "ni", "ci", "type", "b", "my", "e", "multi", "id", "step", "li", "ii", "bi", "n"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nN, K = map(int, input().split())\\nA = list(map(int, input().split()))\\nL = 50\\ndp = [[-float('inf')]*2 for _ in range(L+1)]\\ndp[0][0] = 0\\n\\nfor i in range(L):\\n    Ki = (K>>(L-1-i))&1\\n    \\n    for j in range(2):\\n        for k in range(2 if j else Ki+1):\\n            add = 0\\n            \\n            for Ai in A:\\n                add += k^((Ai>>(L-1-i))&1)\\n            \\n            dp[i+1][j|(k<Ki)] = max(dp[i+1][j|(k<Ki)], dp[i][j]+add*2**(L-1-i))\\n            \\nprint(max(dp[L]))", "target": "262", "substitutes": {"input": ["error", " p", "raw", "op", "a", " output", "call", "int", "reader", "PUT", "request", "p", "enter", "command", "load", "h", " inputs", "comment", "empty", "conf", "array", "expression", " H", "save", "exec", "I", "current", "l", "out", "f", "IO", " Input", "pull", "output", "parent", " int", "data", "Input", "U", "single", "string", "help", "view", "select", "space", " IN", "print", "echo", "multi", "submit", "source", "param", "form", "feed", "n"], "N": ["F", "E", " M", "V", "NL", " O", " I", "O", "P", "B", "C", "D", " C", "S", " E", " J", "Z", "Ns", "U", "R", "J", "M", " Z", " n", " ND", " P", "n"], "K": ["F", "E", "V", "H", "Q", "X", "Y", "O", "P", "T", "C", "B", "SK", "D", "IP", "Sk", "NK", "S", "W", "I", "Z", "PK", "U", "R", "J", "M", "G", "KA", "Ka", "Ku"], "A": ["F", "E", "a", "V", "H", "Y", "AP", "ai", "LA", "P", "B", "C", "T", "D", "As", "Ar", "AA", "Alpha", "S", "I", "Z", "CA", "U", "AF", "alpha", "M", "J", "KA", "Am", "G", "NA"], "L": ["F", "E", "LB", "V", "LT", "IL", "H", "NL", "Q", "X", "FL", "Y", "LA", "dL", "LP", "Lu", "LU", "O", "P", "B", "C", "T", "D", "Len", "LM", "LD", "S", "SL", "W", "I", "l", "Li", "LR", "EL", "LE", "Line", "OL", "Z", "Lo", "LV", "CL", "U", "List", "M", "J", "LO", "LI", "DL", "LL", "G"], "dp": ["lp", " p", "amp", " tcp", "wp", "eps", "prop", "p", "dist", "ps", "pb", "fp", "DC", "tp", "cp", "pos", "rep", "gp", "P", "dB", "sp", "dep", "mp", "div", "array", "vp", "params", "dm", "bb", "pi", "d", "DP", "dl", "dt", "pp", "deb", "dr", "docs", "address", "dc", "df", "pkg", "di", "resp", "data", "db", "ip", "CP", "ep", "dim", "np", " cp", "pd", "imp", "e", "ds", "dos", "hp", "direction", " DP"], "_": ["p", "x", "l", "q", "f", "list", "J", "len", "all", "val", "lin"], "i": ["gi", "ji", "s", "ui", "a", "ie", "int", "qi", "p", "phi", "ai", "init", "c", "y", "o", "ini", "ix", "iu", "slice", "api", "z", "mini", "si", "index", "x", "I", "uri", "l", "u", "pi", "d", "ki", "io", "f", "m", "one", "cli", "xi", "di", "ni", "ci", "ij", "J", "v", "b", "t", "e", "info", "multi", "zi", "li", "ii", "inner", "ik", "part", "bi", "n"], "Ki": ["Kj", "Semi", "Qdi", "KI", "Qsi", "Yi", "kI", "Yj", "Keyj", " Kiu", "Keyi", "FI", " Kz", "kiu", "Qi", "Keyd", "Fsi", "Yp", "Ydi", "Kd", "Jdi", " KI", "ki", "Semj", "Qp", " Ksi", "kd", "kp", "Keyiu", "Fi", "Kiu", "kdi", " Kdi", "Kp", "Kdi", "Fz", "Semd", "Ksi", "ksi", "kz", "Jiu", "kj", "Qj", "Qiu", "Semiu", "Ji", "Jsi", "Kz"], "j": ["ji", "a", "ie", "int", "ja", "p", "g", "c", "jo", "y", "o", "jj", "r", "jl", "z", "jan", "ch", "index", "x", "ind", "w", "adj", "I", "obj", "l", "u", "uj", "d", "q", "jp", "f", "m", "oj", "note", "aj", "ij", "J", "v", "key", "b", "e", "kj", "li", "ik", "n"], "k": ["km", "a", "kid", "ke", "p", "g", "c", "o", "y", "h", "kk", "ijk", "ks", "kl", "z", "x", "mk", "kw", "w", "ka", "ko", "ak", "l", "ok", "u", "d", "unk", "q", "ky", "sk", "f", "m", "ku", "kick", "alpha", "key", "v", "ck", "id", "ik", "n"], "add": ["new", "ack", "end", "a", "dd", "init", "g", "plus", "c", "append", "extra", "r", "en", "ix", "num", "push", "z", "div", "remove", "x", "inc", "start", "ass", "d", "apply", "added", "q", "f", "ac", "kick", "aj", "Add", "ADD", "mod", "id", "mix", "an", "feed", "ad", "n"], "Ai": ["PI", "AI", "ai", "NI", "Na", "Aio", "Pio", "aio", "Aiu", " Aio", " AI", "Da", "Di", "Ni", "Pa", "aJ", "PJ", "aI", " AJ", "Diu", "Piu", "Pi", "Niu", "Aa", "AJ", "DI"]}}
{"code": "n,m = map(int, input().split())\\n\\nanswer= (n-1)*(m-1)\\n\\nprint(answer)", "target": "192", "substitutes": {"n": ["name", "k", "s", "loc", "mn", "p", "g", "c", "i", "y", "number", "r", "num", "en", "o", "h", "net", "z", "fn", "x", "l", "u", "d", "nn", "q", "f", "network", "j", "ns", "b", "len", "e", "N", "nb", "an"], "m": ["s", "k", "a", "mn", "p", "c", "i", "y", "o", "r", "num", "h", "z", "x", "dm", "mu", "w", "cm", "l", "u", "d", "q", "f", "j", "M", "v", "b", "dim", "mod", "e", "mm"], "answer": ["field", "value", "code", " answers", "reply", "y", "number", "result", "username", "z", "array", "search", "response", "sn", "q", "score", "one", "sort", "term", "option", "address", "rank", "output", "area", "entry", "fee", "data", "average", "question", "answered", "order", "grade", "word", "exit", "next", "Answer"]}}
{"code": "a,b=map(int,input().split())\\nd=[(a+b),(a-b),(a*b)]\\nprint(max(d))", "target": "175", "substitutes": {"a": ["aa", "auto", "ma", "p", "qa", "ai", "aw", "c", "i", "fa", "y", "api", "la", "ba", "mA", "ab", "au", "z", "da", "x", "pa", "A", "af", "w", "ia", "u", "sup", "f", "sa", "ca", "asa", "ac", "m", "ga", "j", "area", "aj", "am", "ae", "alpha", "ea", "e", "an", "ad", "n"], "b": ["aa", "be", "k", "end", "ib", "fb", "p", "bs", "pb", "c", "g", "i", "y", "r", "h", "beta", "mb", "inf", "B", "ba", "ab", "z", "x", "A", "w", "sb", "cb", "l", "bb", "u", "abb", "one", "f", "m", "ac", "v", "an", "e", "count", "nb", "lb", "n"], "d": ["s", "dd", "dy", "fd", "p", "g", "c", "i", "dat", "r", "dict", "sd", "td", "ord", "D", "z", "da", "x", "l", "de", "u", "f", "bd", "dl", "m", "dc", "cd", "data", "db", "dim", "e", "pd", "ds", "id", " D", "ad", "n"]}}
{"code": "S = list(input())\\n\\nans = \"No\"\\n\\nif len(set(S)) == 2:\\n    if S.count(S[0]) == 2:\\n        ans = \"Yes\"\\n\\nprint(ans)", "target": "103", "substitutes": {"S": ["F", "s", "VS", "E", "L", "V", "H", "SC", " s", "X", "SE", "Q", "SR", "NS", "ASS", "INS", "TS", "PS", "SH", "SI", "ANS", "O", "SA", "P", "T", "C", "ASC", "D", "B", "A", "I", "SS", "OS", "SAN", "Set", "CS", "input", "POS", "R", "Input", "U", "M", "Send", "SM", "String", "N", "G", "SO", "SU", "ES"], "ans": ["ss", "ano", "s", "news", "ents", "assy", "lan", "ras", "cas", "nas", "atan", "na", "ats", "aning", "anas", "AN", "ANS", "anes", "any", "ks", "ane", "ann", "anon", "anc", "ays", "ana", "can", "nan", " means", "ars", "anus", "ant", "aned", "ass", "ons", "leans", "cs", "sa", "yes", "ants", "ns", "no", "os", "san", "ean", "plan", "ds", "an", "ins"]}}
{"code": "n = int(input())\\nx = input().split()\\ny = input().split()\\nimport math\\nfor i in range(4):\\n    D = 0\\n    for j in range(n):\\n        if i != 3:\\n            D = D + math.pow(math.fabs(int(x[j]) - int(y[j])),i+1)\\n        else:\\n            compare = math.fabs(int(x[j]) - int(y[j]))\\n            if D < compare:\\n                D = compare\\n    if i != 3:\\n        print('{0:.6f}'.format(math.pow(D,1/(i+1))))\\n    else:\\n        print('{0:.6f}'.format(D))\\n", "target": "325", "substitutes": {"n": ["s", "k", "a", "span", "p", "g", "c", "o", "nc", "num", "r", "ne", "z", "sn", "w", "ny", "l", "d", "pi", "q", "f", "m", "ns", "no", "ni", "b", "v", "t", "N", "e", "nb"], "x": ["s", "k", "a", "int", "X", "p", "xs", "c", "g", "xx", "h", "o", "rx", "ix", "pos", "z", "ex", "w", "l", "u", "d", "q", "one", "f", "ax", "m", "xi", "data", "v", "b", "e", "xy", "zi"], "y": ["s", "k", "a", "dy", "int", "ye", "p", "Y", "phi", "g", "c", "o", "z", "w", "ny", "l", "u", "d", "q", "m", "yy", "ya", "oy", "b", "v", "t", "e", "vy", "ey"], "i": ["gi", "k", "ui", "a", "ie", "ei", " it", "chi", "int", "qi", " z", "p", "phi", "ai", "c", " I", " v", "o", "ini", " ip", " c", "iu", "z", "si", "index", "ind", " il", "I", "uri", "l", "u", "pi", "d", "f", "xi", "di", "ri", "ni", "ip", "ij", "ci", "v", "b", " ii", "e", "info", "zi", "id", "li", "ii", " index", "anti", "bi", "abi", "ti"], "D": ["F", "Date", "ID", "E", "DA", "L", "DS", "Daniel", "V", "H", "DX", "Q", "X", "DH", "Y", "Delta", "DC", "Compare", "K", "DM", "DE", "Distance", "DO", "DB", "DATA", "O", "P", "T", "C", "B", "MD", "DD", "JD", "Default", "DT", "S", "Double", "Dim", "I", "CD", "Ds", "d", "Do", "Di", "DF", "Z", "Data", "Dist", "R", "M", "J", "N", "DL", "G", "DI", "Diff"], "j": ["ji", "ui", " bi", "dy", "ie", "part", "ja", "qi", " inj", " z", "p", "jen", "g", " dj", "jo", " v", "jj", "dj", " ip", "ix", "o", " k", "jit", "jl", "z", "je", "si", "jan", "jet", " il", "adj", "obj", "l", "u", "uj", " J", "js", "jp", "job", "f", "oj", "jc", "note", "br", "aj", "di", "jam", "ij", "J", "bj", "key", " ii", "v", "e", "jon", "fr", "kj", "li", " jo"], "compare": ["collares", "Comparing", "compari", "collaring", "pari", "collared", "comact", "compact", "Compare", " comparing", "compares", "comparing", "collact", "refact", " compares", "Compared", "collare", "comaring", "comared", "Compari", "pare", "Compares", "paring", "comares", "refare", "refares", "refaring", "compared", "comare", " compari", "pares"]}}
{"code": "# coding: UTF-8\\nimport sys\\nimport numpy as np\\nimport math\\n\\n\\nn = int(input())\\naList = list(map(int, input().split()))\\ngcdListLeft = [0 for i in range(n)]\\ngcdListRight = [0 for i in range(n)]\\n\\ntmp = aList[0]\\nfor i in range(n):\\n\ttmp = gcdListLeft[i] = math.gcd(tmp, aList[i])\\n\\ntmp = aList[n-1]\\nfor i in range(n-1, -1, -1):\\n\ttmp = gcdListRight[i] = math.gcd(tmp,aList[i])\\n\\nans = gcdListRight[1]\\nfor i in range(1,n-1):\\n\tans = max(ans, math.gcd(gcdListLeft[i-1], gcdListRight[i+1]))\\nans = max(ans, gcdListLeft[n-2])\\nprint(ans)", "target": "94", "substitutes": {}}
{"code": "n = int(input())\\nif n == 0:\\n    print(0)\\n    exit()\\nans = []\\nwhile abs(n) > 0:\\n    ans.append(n%2)\\n    n = (n - (n % 2)) // -2\\nprint(''.join(map(str, ans[::-1])))\\n", "target": "24", "substitutes": {"n": ["s", "k", "a", "non", "p", "na", "g", "c", "i", "o", "r", "nc", "num", "number", "un", "net", "pos", "y", "ne", "nu", "z", "fn", "x", "norm", "nan", "gn", "sn", "node", "conn", "adj", "l", "cn", "d", "u", "nn", "nt", "max", "f", "ln", "j", "m", "none", "nw", "ns", "no", "nl", "ni", "b", "len", "v", "np", "t", "N", "pn", "e", "nb", "an"], "ans": ["ents", "lan", "offs", "nas", "amps", "ras", "eps", "atan", "na", "ps", "ats", "ions", " ads", "anas", "AN", "ANS", "ks", "vs", "names", "ann", "anon", "outs", "nan", " means", " sins", "ars", " scans", "args", "aned", "lines", "ons", "aus", "leans", "ln", "cs", "ants", "ns", "anners", "os", "reads", "ls", "olds", "ians", "an", "ins"]}}
{"code": "a,b,c = map(int, input().split())\\nif a*c<=b: print(c)\\nelse: print(b//a)", "target": "64", "substitutes": {"a": ["aa", "sta", "int", "va", "p", "ai", "i", "fa", "y", "r", "ba", "ab", "au", "da", "x", "pa", "ce", "A", "l", "u", "d", "bb", "aaa", "f", "sa", "ca", "m", "asa", "ac", "ga", "am", "ae", "alpha", "ea", "e", "an", "ad", "n"], "b": ["bad", "aa", "be", "s", "k", "ib", "fb", "p", "bs", "g", "i", "y", "r", "wb", "beta", "B", "ba", "ab", "x", "A", "cy", "sb", "cb", "bb", "d", "rb", "u", "abb", "f", "eb", "ca", "m", "ac", "db", "alpha", "batch", "v", "base", "e", "bc", "big", "nb", "bi", "n"], "c": ["s", "k", "cycle", "const", "p", "g", "i", "y", "h", "ec", "C", "z", "fc", "ce", "x", "cy", "cu", "w", "con", "cm", "l", "u", "d", "cn", "f", "ca", "cs", "m", "ac", "cat", "dc", "ci", "ct", "alpha", "cf", "e", "cr", "count", "cc", "col", "abc", "ad", "n"]}}
{"code": "from math import sin, cos, pi\\n\\n\\nclass Point:\\n\\n    def __init__(self, x, y):\\n        self.x = x\\n        self.y = y\\n\\n    def __str__(self):\\n        return f\"{self.x:.8f} {self.y:.8f}\"\\n\\n\\ndef kock(n, p1: Point, p2: Point):\\n    if n == 0:\\n        return\\n    s = Point(\\n        x=(2*p1.x + p2.x)/3,\\n        y=(2*p1.y + p2.y)/3\\n    )\\n    t = Point(\\n        x=(p1.x + 2*p2.x)/3,\\n        y=(p1.y + 2*p2.y)/3\\n    )\\n    u = Point(\\n        x=(t.x - s.x) * cos(pi / 3) - (t.y - s.y) * sin(pi / 3) + s.x,\\n        y=(t.x - s.x) * sin(pi / 3) + (t.y - s.y) * cos(pi / 3) + s.y\\n    )\\n    kock(n - 1, p1, s)\\n    print(s)\\n    kock(n - 1, s, u)\\n    print(u)\\n    kock(n - 1, u, t)\\n    print(t)\\n    kock(n - 1, t, p2)\\n\\n\\ndef main():\\n    n = int(input())\\n    p1 = Point(0.0, 0.0)\\n    p2 = Point(100.0, 0.0)\\n    print(p1)\\n    kock(n, p1, p2)\\n    print(p2)\\n\\nmain()\\n", "target": "280", "substitutes": {"self": ["Self", "other", "k", "me", "event", "p", "ps", "g", "host", "plus", "_", "context", "h", "work", "r", "public", "instance", "app", "pos", "this", "wrapper", "proc", "time", "cache", "now", "node", "w", "user", "ctx", "wx", "hand", "world", "max", "q", "object", "f", "m", "ns", "ws", "resp", "parent", "data", "func", "base", "e", "all", "py", "parse", "home", "your"], "x": ["min", "name", "int", "fixed", "phi", "ext", "rx", "height", "ix", "this", "any", "xt", "f", "right", "ux", "ya", "data", "length", "ct", "xe", "b", "xp", "xy", "ry", "mass", "ady", "X", "tx", "lat", "i", "xx", "yx", "h", "year", "north", "cross", "shape", "v", "key", "e", "id", "xc", "ey", "dy", "ye", "p", "width", "size", "z", "ex", "index", "time", "image", "cy", "d", "max", "point", "m", "my", "py", "vy", "dx", "east", "value", "xf", "Y", "c", "fx", "px", "ph", "wy", "w", "wx", "xd", "one", "ax", "xi", "pe"], "y": ["yr", "yd", "ys", "ady", "dy", "ye", "gy", "p", "Y", "lat", "c", "i", "yx", "yu", "height", "asy", "ix", "ym", "ay", "o", "year", " Y", "z", "zy", "ty", "north", "yi", "wy", "cy", "yo", "iny", "ch", "ny", "yt", "uy", "sy", "ky", "yan", "yy", "ya", "oy", "iy", "ery", "type", "b", "yl", "bar", "key", "e", "v", "xy", "py", "vy", "isy", "ry", "ey", "ies", "sky"], "n": [" N", "k", "ner", "non", "p", "na", "init", "g", "c", "i", "o", "nc", "num", "number", "un", "en", "net", "r", "pos", "ne", "nu", "ng", "z", "on", "fn", "sn", "w", "ny", "conn", "l", "cn", "d", "nn", "nt", "f", "j", "network", "m", "sync", "none", "ln", "ns", "no", "v", "b", "len", "np", "N", "pn", "e", "nit", "nb", "an", "nor"], "s": ["ss", " p", "sh", "en", "fs", " ss", "si", "l", "js", "f", "sy", " S", "us", "abs", "gs", "b", "se", "ans", "xs", "i", "ing", " c", "ish", " objects", "cs", "site", "os", "v", "e", "an", "sq", "p", "ps", "sys", "r", "sp", "z", "es", "S", "ses", "d", "less", "sin", "sup", "m", "ns", "ts", "ls", "k", "a", "south", "ed", "side", "g", "c", "o", " points", "sie", "outs", "w", " samples", "ws", "su", "ds", "its"], "t": ["the", "k", "a", "int", "at", "wt", "tt", "p", "g", "c", "i", "r", "o", "h", "ot", "tr", "this", "pt", "T", "tf", "z", "ty", "st", "w", "bt", "it", "l", "d", "nt", "ta", "out", "f", "ut", "dt", "j", "m", "tu", "rt", "te", "ct", "ts", "v", "b", "type", "e", "test", "tc"], "u": ["k", "a", "ur", "p", "g", "c", "i", "o", "h", "nu", "z", "ou", "cu", "w", "l", "d", "q", "f", "ut", "m", "up", "tu", "us", "U", "su", "os", "lu", "v", "b", "e", "ul"], "p1": [" pone", "t01", "q1", "P2", "s01", "n81", "c81", "pfirst", "point3", " p3", "n1", "p81", "lpfirst", "q0", "p3", "Pfirst", "cpone", "c01", "p11", "P3", "q2", "P0", "cp11", "s1", "n3", "point1", "t2", "p0", " pfirst", "point2", " p01", "pone", "n2", " p0", "c1", "sone", " p11", "P1", "t1", "n0", "Pone", "P01", "p01", "lp2", "cp1", " p81", "lp1", "q3", "c2", "tone", "t3", "P81", "s11", "cp01"], "p2": ["pi2", "P2", "jp2", "palt", "p0", "e72", "pe32", "pe1", "pe3", "jpTwo", "p72", "opalt", "c2", "op4", " p3", "p32", "cp4", "P3", "e4", " palt", "pi1", "optwo", "t2", "P42", "pe4", "pe2", "aptwo", " p0", " p72", "cp0", "t1", "Psecond", "pe42", "cp1", "ttwo", "ap2", "etwo", " p32", "ptwo", "ip2", "c3", " pTwo", "t0", "pisecond", "p4", "p3", "pealt", "P0", "tsecond", "P32", "pe72", "jp4", "iptwo", "P1", "e2", "psecond", "tTwo", "ap42", "cp2", "Ptwo", "pi0", "pTwo", "ap1", "jptwo", "c0", "p42", "P4", " ptwo", " p4", "t4", "ip4", "ip1", "op2", "petwo", "c1"]}}
{"code": "import statistics\\nn = int(input())\\na = []\\nfor i,j in enumerate(map(int,input().split())):\\n  a.append(j-i-1)\\nb,s = statistics.median(a),0\\nfor i in a:\\n  s+=abs(i-b)\\nprint(int(s))", "target": "463", "substitutes": {"n": [" N", " p", " output", " span", "p", " r", " ni", " c", " na", " f", "z", " fn", " np", " log", "d", "f", "N", " num", " l", "nb", " d"], "a": ["aa", "wa", "sta", "va", "ma", "ans", "p", "na", "ai", "ama", "aw", "fa", "eta", "la", "ba", "mA", "ab", "au", "array", "da", "A", "af", "ka", "ia", "ata", "u", "aaa", "ca", "f", "sa", "ac", "m", "ga", "area", "am", "aj", "ae", "alpha", "abs", "ea", "ha", "an", "ad"], "i": ["ji", "k", "ui", "ei", "int", "ib", "qi", "p", "ai", "c", "o", "y", "ini", "iu", "z", "si", "index", "yi", "x", "ind", "I", "ia", "l", "fi", "u", "pi", "d", "f", "io", "m", "xi", "di", "ri", "ni", "ci", "ij", "v", "e", "t", "zi", "id", "li", "ii", "bi", "ip"], "j": ["ji", "k", "ja", "p", "g", "jo", "y", "o", "r", "h", "jj", "dj", "pos", "jit", "jl", "z", "si", "index", "x", "ind", "adj", "obj", "l", "d", "uj", "jp", "f", "jc", "xi", "jump", "aj", "ij", "J", "v", "e", "bi"], "b": ["k", "aa", "ib", "p", "bs", "g", "c", "pb", "y", "r", "o", "B", "ba", "ab", "x", "sb", "l", "bb", "d", "bf", "f", "eb", "m", "db", "binary", "abs", "v", "base", "e", "nb", "lb", "bi"], "s": ["ss", "k", "strings", "south", "p", "bs", "g", "c", "y", "r", "o", "sl", "sd", "sf", "ab", "z", "si", "S", "sb", "l", "services", "u", "d", "sec", "ses", "stats", "f", "sa", "m", "ws", "su", "os", "abs", "v", "string", "t", "e", "ls", "ds", "se", "sv", "sum"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\n\\n\\ndef main():\\n    a, b, c = map(int, input().split())\\n    ans = \"No\"\\n    if a == b + c:\\n        ans = \"Yes\"\\n    if b == c + a:\\n        ans = \"Yes\"\\n    if c == a + b:\\n        ans = \"Yes\"\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "332", "substitutes": {"input": ["error", "text", "magic", "int", "python", "str", "reader", "request", "method", "i", "format", "num", " inputs", "comment", "connect", "temp", "config", "array", "exec", "l", "accept", "out", "f", " Input", "header", "pull", "option", "output", "parent", " int", "data", "Input", "bin", "type", "string", "select", "print", "echo", "keep", "submit", "source", "param", "feed", "n"], "a": ["aa", "s", "k", "auto", "p", "ai", "g", "aw", "i", "fa", "y", "o", "ba", "ab", "au", "z", "art", "da", "pa", "x", "ce", "A", "w", "ak", "l", "u", "d", "ach", "f", "ca", "sa", "ac", "asa", "j", "am", "aj", "ae", "alpha", "v", "e", "an", "ad", "n"], "b": ["aa", "be", "s", "k", "auto", "ib", "fb", "p", "bs", "g", "i", "y", "r", "o", "wb", "B", "ba", "ab", "z", "x", "cy", "w", "sb", "cb", "l", "rb", "d", "bf", "bb", "u", "abb", "f", "ca", "j", "ac", "ae", "db", "v", "e", "bc", "t", "nb", "bi", "ad", "n"], "c": ["s", "k", "be", "p", "g", "i", "y", "r", "nc", "o", "h", "ec", "C", "z", "ch", "ce", "x", "can", "cy", "cu", "w", "l", "u", "d", "f", "ca", "j", "cs", "ac", "m", "cat", "cin", "ci", "ct", "v", "cf", "e", "cr", "cc", "xc", "ad", "n"], "ans": ["ano", "s", "ain", "ents", "lan", "nas", "ras", "eps", "ams", "atan", "na", "aning", "anas", "AN", "aos", "ads", "ANS", "anes", "any", "ks", "ane", "aces", "annels", "ann", "anon", "anc", "ani", "annot", "ays", "ana", "can", " means", "nan", "ars", "ant", "aned", "ace", "nn", "ons", "aus", "atts", "leans", "ln", "cs", "sa", "yes", "ants", "sk", "ns", "san", "type", "ls", "ean", "ians", "sam", "oss", "an"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().rstrip()\\n\\nN = int(input())\\nac = 0\\nwa = 0\\ntle = 0\\nre = 0\\n\\nfor i in range(N):\\n    s = input()\\n    if s == \"AC\":\\n        ac += 1\\n    elif s == \"WA\":\\n        wa += 1\\n    elif s == \"TLE\":\\n        tle += 1\\n    else:\\n        re += 1\\n\\nprint(\"AC x \" + str(ac))\\nprint(\"WA x \" + str(wa))\\nprint(\"TLE x \" + str(tle))\\nprint(\"RE x \" + str(re))\\n\\n", "target": "531", "substitutes": {"N": ["F", "E", "L", "NO", "NL", "Q", "Y", "NC", "Size", "Num", "NS", "NI", "K", "Na", "O", "Len", "T", "C", "P", "B", "Ne", "S", "A", "W", "I", "RN", "No", "NT", "Ni", "Z", "Ns", "R", "M", "J", "GN", "SN", " n", "NA", "n"], "ac": ["k", "ain", "a", "ag", "acc", "ai", "ic", "aw", "c", "ay", "oc", "ba", "AC", "ab", "anc", "au", "uc", "ar", "af", "w", "aca", "sac", "ak", "ass", "ace", "ach", "pac", "ca", "ax", "sa", "acl", "asa", "acs", "act", "am", "ae", "asc", "mac", "jac", "Ac", "aci", "ad"], "wa": ["aa", "a", "wi", "va", "wt", "ma", "win", "na", "qa", "aw", "fa", "awa", "ba", "wave", "au", "wal", "pa", "da", "ew", "af", "w", "aws", "wx", "ra", "ta", "wait", "ca", "sa", "asa", "sw", "WA", "ww", "area", "ws", "wo", "ae", "oa", "wan", "ema", "ha", "wu", "Wa", "le", "cl", "xa"], "tle": ["be", "loc", "arel", "robe", "les", "sole", "ele", "pole", "lla", "ole", "tl", "wake", "tie", "el", "une", "ase", "ale", "ro", "tile", "bre", "tan", "l", "ee", "ace", "LE", "ta", "sol", "yle", "rl", "bole", "rice", "fee", "te", "nl", "wl", "lease", "spe", "su", "thro", "llo", "ea", "pe", "le", "cale", "sle", "ul", "ile", "ule", "tc"], "re": ["replace", "be", "change", "ur", "al", "pre", "r", "rec", "rew", "we", "cre", "RE", "reg", "ro", "ale", "gre", "rev", "run", "x", "bre", "ar", "are", "Re", "he", "ra", "gro", "fore", "real", "f", "sr", "rl", "rice", "rel", "su", "spe", "ref", "race", "e", "pe", "le", "sle", "se", "ru", "range", "res", "n"], "i": ["gi", "k", "ie", "ib", " z", "c", " I", "y", "r", "ime", "iu", "z", "si", "ind", "I", " il", "it", "u", "j", " j", "ip", " ii", "e", "il", "id", "ti"], "s": ["ss", "sq", "spec", "a", "sc", "ans", "p", "states", "ps", "g", "c", "ats", "sets", "y", "sl", "o", "r", "h", "sf", "sie", "conf", "si", "es", "S", "sb", "ses", "u", "d", "sg", "sy", "f", "sa", "sr", "m", "ments", "su", "os", "gs", "b", "ts", "space", "e", "t", "ls", "se", "its", "sum", "ins"]}}
{"code": "N,K = map(int, input().split())\\nA = [int(a) for a in input().split()]\\n\\ndp = [False]*(K+1)\\n\\nfor i in range(K+1):\\n    f = False\\n    for j in range(N):\\n        if A[j] > i:\\n            break\\n        if dp[i-A[j]]:\\n            continue\\n        f = True\\n    dp[i] = f\\n    \\nif dp[K]:\\n    ans = \"First\"\\nelse:\\n    ans = \"Second\"\\n        \\nprint(ans)", "target": "93", "substitutes": {"N": ["F", "E", "L", "V", "H", "Q", "X", "Y", "NC", "Size", "NS", "NE", "NM", "O", "P", "T", "C", "B", "D", "Ne", "S", "W", "I", "Z", "Ns", "U", "R", "J", "M", " n", "G", "n"], "K": ["F", "k", "KK", "E", "L", "KI", "V", "Max", "H", "Ak", "Q", "X", "Y", "KE", "Sk", "O", "P", "T", "C", "B", "SK", "D", " k", "ks", "NK", "KB", "KS", "S", "W", "KC", "I", "HK", "Z", "KR", "PK", "U", "J", "M", "KN", "G", "Ku", "n"], "A": ["F", "GA", "First", "L", "At", "V", "All", "H", "AI", "p", "Y", "X", "AP", "ai", "LA", "EA", "Na", "AB", "SA", "P", "AU", "C", "B", "As", "T", "Ar", "AV", "array", "AA", "Alpha", "S", "I", "Ab", "PA", "Array", "CA", "U", "AF", "alpha", "M", "Am", "NA"], "a": ["aa", "wa", "at", "va", "ma", "p", "na", "qa", "ai", "c", "fa", "lla", "asha", "la", "ba", "mA", "ana", "pa", "da", "x", "ar", "ia", "ata", "aaa", "ca", "sa", "asa", "ac", "area", "am", "ya", "aj", "ae", "oa", "alpha", "b", "ea", "an", "ad", "n"], "dp": ["lp", " disp", " dst", " tcp", " UDP", "wp", "p", "std", "xs", "fp", "DC", "dat", " DP", "dict", "tp", "pos", "cp", "rep", "gp", "P", "dB", "sp", "D", "NP", " dc", "array", "params", "comp", "dm", "af", " delta", " dup", " subp", "d", "DP", "dl", "dt", "DF", "eb", "pp", "deb", "dr", " DF", "ga", "dc", "df", "pkg", "di", "ep", "data", "db", "CP", " di", "dim", "np", "e", "imp", " cp", "ds", "hp", "config", " df", " d", "ip"], "i": ["F", "ji", "k", "ui", "ie", "int", "p", "phi", "ai", "c", "oi", "y", "h", "ix", "iq", "iu", "P", "inf", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "d", "pi", "q", "io", "jp", "m", "xi", "di", "ni", "ci", "ij", "J", "v", "b", "e", "id", "li", "ii", "ik", "n", "bi", "ip"], "f": ["F", "s", "k", " p", "aff", "fd", "p", "fb", "fin", "g", "c", "fp", "fa", "h", "r", "fw", "o", "rf", "sf", "fe", "inf", "tf", "fs", "conf", "z", "fc", "af", "w", "I", "l", "u", "d", "fi", " F", "ff", "m", "found", "fen", "fg", "df", "v", "b", "cf", "t", "e", "fr", "info", "feed", " df", "n"], "j": ["ji", " p", "k", "ie", "ja", "qi", "p", "c", "y", "o", "jj", "ix", "h", "iq", "ijk", "z", "si", "index", "x", "ind", "w", "I", "l", "u", "d", "q", "ki", "jp", "m", "ni", "ij", "J", "v", "b", " ii", "e", "id", "li", "ii", "ik", " b", "n", "bi", " d", "ip"], "ans": ["lp", "aff", "aid", "dd", "ents", "lan", "ras", "offs", "cas", "eps", "vals", "na", "ai", "xs", "fp", "fa", "aning", "AN", "ads", "ANS", "anes", "ks", "vs", "names", "ann", "anon", "anc", "ani", "fs", "ana", "params", " means", "af", "aned", "atts", "ids", "aus", "leans", "sk", "ants", "forces", "ns", "lists", "pkg", "os", "features", "actions", "ls", "ds", "ops", "banks", "an", "ins"]}}
{"code": "n=int(input())\\nS=[]\\nT=[]\\ndata=set()\\nfor i in range(n):\\n  s=input()\\n  S.append(s)\\n  data.add(s)\\nm=int(input())\\nfor i in range(m):\\n  t=input()\\n  T.append(t)\\n  data.add(t)\\nans=0\\nfor i in data:\\n  ans=max(ans,S.count(i)-T.count(i))\\nprint(ans)", "target": "118", "substitutes": {"n": ["k", "p", "c", "o", "y", "nc", "num", "h", "net", "ne", "nu", "z", "x", "nan", "w", "ny", "l", "d", "nt", "nn", "max", "f", "ns", "no", "b", "np", "N", "nit", "nb", "an"], "S": ["F", "L", "V", "H", "AS", "X", "SE", "NS", "Si", "TS", "PS", "SH", "ST", "Su", "SI", "O", "P", "B", "C", "D", "Sa", "A", "SL", "Sl", "I", "SS", "OS", "Single", "Z", "Data", "Ns", "Set", "U", "R", "M", "N", "G", "SU"], "T": ["AT", "F", "CT", "E", "L", "V", "LT", "Q", "X", "Y", "TA", "TS", "XT", "TN", "Tu", "P", "TR", "B", "D", "TG", "TB", "DT", "Tab", "A", "W", "I", "NT", "UT", "ET", "TE", "TX", "TM", "Z", "Data", "TT", "U", "R", "M", "TF", "WT", "N", "G", "PT", "Tools"], "data": ["a", "table", "int", "sample", "p", "na", "g", "dat", "o", "format", "pos", "DATA", "slice", "temp", "z", "array", "frame", "time", "index", "x", "div", "series", "w", "window", "start", "next", "ata", "u", "d", "f", "Data", "script", "sequence", "pad", "shape", "parent", "list", "batch", "alpha", "input", "set", "tree", "type", "complete", "an", "e", "session", "space", "multi", "source", "config", "test"], "i": ["k", "ui", "a", "ei", "int", "qi", "p", "phi", "ai", "ic", "c", "oi", "o", "h", "ini", "im", "iq", "ime", "iu", "si", "x", "ind", "I", "it", "l", "u", "pi", "idi", "d", "io", "f", "j", "xi", "di", "ni", "ip", "ci", "v", "b", "e", "multi", "id", "li", "ii", "ti"], "s": ["ss", "a", "sample", "ins", "p", "g", "c", "o", "y", "z", "si", "x", "w", "l", "u", "ses", "d", "sin", "f", "j", "ns", "site", "su", "os", "b", "v", "e", "ls", "ds", "se", "an"], "m": ["min", "k", "mn", "ma", "mi", "p", "ms", "g", "c", "nm", "y", "r", "h", "o", "num", "pm", "z", "x", "dm", "cm", "l", "u", "d", "f", "j", "M", "b", "v", "mm", "mc"], "t": ["k", "a", "at", "wt", "tt", "p", "c", "y", "o", "tp", "ot", "pt", "z", "ty", "x", "l", "u", "d", "nt", "ta", "j", "dt", "f", "ts", "v", "b", "e", "test"], "ans": ["ano", "a", "ents", "lan", "nas", "atan", "na", "ats", "aning", "anas", "AN", "ANS", "anes", "any", "ane", "ann", "anon", "ani", "anc", "many", "ana", "ays", "annot", "can", "ania", " means", "nan", "sn", "anned", "ant", "anus", "anks", "aned", "ines", "max", "aus", "anan", "au", "leans", "sk", "cs", "none", "ants", "ns", "man", "no", "os", "ls", "asi", "ds", "an", "ins"]}}
{"code": "N=int(input())\\nX=list(map(int, input().split()))\\n\\nans=float('inf')\\nfor i in range(101):\\n  tmp=0\\n  for j in range(N):\\n    tmp+=(X[j]-i)**2\\n  ans=min(ans,tmp)\\nprint(ans)", "target": "46", "substitutes": {"N": ["F", "MN", "L", "NO", "V", "NN", "H", "Q", "Sn", "Y", "Size", "NC", "Num", "NS", "NE", "K", "CNN", "O", "P", "T", "C", "B", "D", "Ne", "S", "A", "I", "Z", "Ns", "M", "J", "SN", "KN", "NA", "n"], "X": ["F", "PI", "E", "L", "V", "CI", "H", "Q", "XX", "Y", "XP", "K", "FF", "P", "T", "C", "IP", "x", "S", "A", "W", "XXX", "IX", "I", "TX", "Z", "XY", "U", "J", "M", "XL", "Xi", "G"], "ans": ["ano", "s", "tta", "a", "ents", "lan", "span", "cas", "nas", "offs", "eps", "atan", "na", "amps", "ams", "xs", "ats", "Ann", "anas", "AN", "CNN", "aos", "ANS", "anes", "atten", "ks", "asts", "mean", "vs", "ras", "ann", "anon", "ani", "ana", "errors", "x", "outs", " means", "A", "An", "nan", "ars", "anus", "args", "aned", "ace", "nn", "ons", "atts", "aus", "anne", "ln", "sk", "ens", "trans", "ants", "ns", "features", "alpha", "ANN", "ds", "ops", "NA", "an"], "i": ["ih", "ji", "ie", "p", "phi", "ai", "jo", "h", "y", "ini", "im", "iq", "ti", "z", "si", "eni", "index", "x", "ind", "I", "l", "u", "pi", "d", "io", "f", "ir", "m", "xi", "ni", "ci", "ij", "v", "inn", "b", "e", "t", "id", "li", "ii", "ip"], "tmp": ["amp", "const", "part", "sample", "p", "pre", "ai", "nm", "extra", "tp", "kk", "cp", "pos", "beta", "txt", "sp", "emp", "temp", "mp", "mini", "array", "xt", "TB", "now", "start", "obj", "rb", "sup", "aaa", "ignore", "pp", "Temp", "area", "yy", "output", "data", "stuff", "alpha", "len", "foo", "np", "space", "nb", "test", "tc", "offset"], "j": ["ji", "k", "a", "ja", "p", "ai", "jo", "y", "o", "h", "jj", "dj", "pos", "ijk", "jl", "z", "je", "si", "eni", "x", "ind", "adj", "obj", "l", "d", "uj", "q", "f", "jp", "jc", "xi", "aj", "ni", "ij", "J", "v", "e", "kj", "li", "ii", "n"]}}
{"code": "x = int(input())\\n\\nif x >= 30:\\n  ans = 'Yes'\\nelse:\\n  ans = 'No'\\nprint(ans)", "target": "371", "substitutes": {"x": ["s", "ady", "int", "code", "X", "event", "p", "tx", "na", "xs", "c", "xxxxxxxx", "xx", "some", "rx", "y", "px", "z", "xt", "ex", " xx", "xxx", "index", "w", "wx", "ctx", "f", "ax", "m", "ww", "xi", "ux", "check", "ct", "xe", "v", "b", "xp", "t", "val", "xc", "cl", "n"], "ans": ["ano", "aid", "ain", "ents", "lan", "ras", "cas", "ams", "atan", "na", "aning", "anas", "AN", "ANS", "any", "ane", "ann", "anon", "anc", "ani", "ana", "can", "nan", "tan", "ars", "cross", "ant", "anus", "aned", "ace", "ons", "aus", "anne", "leans", "sk", "ants", "ns", "scan", "act", "os", "san", "ean", "plan", "ang", "an"]}}
{"code": "P=list(map(int,input().split()))\\nprint(sum(P)-max(P))", "target": "298", "substitutes": {"P": ["F", "TP", "PI", "E", "PO", "L", "V", "H", "PUT", "Q", "X", "p", "K", "LP", "O", "T", "C", "B", "D", "NP", "Ps", "IP", "S", "PP", "A", "PA", "DP", "BP", "R", "U", "PIN", "M", "CP", "FP", "N", "G", "PT"]}}
{"code": "#!/usr/bin/env python3\\n# from collections import Counter\\ns = list(str(input()))\\nt = list(str(input()))\\n\\ndict_ = {}\\nfor i in range(len(s)):\\n    if s[i] in dict_:\\n        dict_[s[i]].append(i)\\n    else:\\n        dict_[s[i]] = [i]\\nfor key, value in dict_.items():\\n    a = set([])\\n    for i in value:\\n        a.add(t[i])\\n    # print(a)\\n    if len(set(a)) != 1:\\n        print(\"No\")\\n        exit()\\n\\ns, t = t, s\\ndict_ = {}\\nfor i in range(len(s)):\\n    if s[i] in dict_:\\n        dict_[s[i]].append(i)\\n    else:\\n        dict_[s[i]] = [i]\\nfor key, value in dict_.items():\\n    a = set([])\\n    for i in value:\\n        a.add(t[i])\\n    # print(a)\\n    if len(set(a)) != 1:\\n        print(\"No\")\\n        exit()\\nprint(\"Yes\")\\n", "target": "490", "substitutes": {}}
{"code": "from collections import defaultdict\\nimport math\\nn = int(input())\\ndef is_prime(n):\\n  if n == 1:\\n    return False\\n  \\n  for k in range(2, int(math.sqrt(n)) + 1):\\n    if n%k == 0:\\n      return False\\n  return True\\n\\nd = defaultdict(int)\\n\\np = []\\nfor i in range(2,n+1):\\n  if is_prime(i):\\n    d[i] = 1\\n    p.append(i)\\n    continue\\n  x = i\\n  for j in p:\\n    while x%j == 0:\\n      x //= j\\n      d[j] += 1\\n\\n#75\\nc = 0\\nfor i in d.values():\\n  if i >= 74:\\n    c += 1\\nans = c\\n\\n#25 * 3\\nc,e = 0,0\\nfor i in d.values():\\n  if i >= 24:\\n    c += 1\\n  if i >= 2:\\n    e += 1\\nans += c*(e-1)\\n\\n#15 * 5\\nc, e = 0, 0\\nfor i in d.values():\\n  if i >= 14:\\n    c += 1\\n  if i >= 4:\\n    e += 1\\nans += c*(e-1)\\n\\n#5 * 5 * 3\\nc,e = 0,0\\nfor i in d.values():\\n  if i >= 4:\\n    c += 1\\n  if i >= 2:\\n    e += 1\\nans += (c*(c-1)//2)*(e-2)\\n\\nprint (ans)\\n\\n", "target": "145", "substitutes": {"n": [" N", " output", "mn", "na", "nd", " number", "c", "g", " network", "o", " v", "y", "num", " c", "nc", "net", "r", "number", "en", "size", "ne", " f", "z", "nu", "nan", " fn", "sn", "w", " np", "l", "u", " nu", "nt", "q", " m", "nn", "cn", "f", "network", "ln", "m", "ns", "no", "ni", " ns", "b", "v", "np", "t", "N", "e", "pn", " num", " l", "nb", " len", "an"], "k": ["km", "g", "c", "K", "y", "r", "h", "num", "kk", "o", "ks", "kn", "z", "ch", "mk", "kw", "ind", "w", "l", "ok", "u", "unk", "q", "sk", "f", "m", "v", "b", "ck", "e", "id", "ik"], "d": ["s", "dd", "dh", "g", "c", "dat", "o", "dict", "y", "sd", "ded", "D", "z", "div", " dd", "ind", "w", "l", "u", "pi", "do", "q", "f", "dt", "m", "xi", "dc", "df", "di", "data", "b", "v", "dp", "t", "pd", "e", "ds", "id", "dn", "ad"], "p": ["lp", "a", "code", "python", "pre", "ps", "g", "c", "o", "r", "y", "tp", "pm", "pr", "ap", "api", "P", "sp", "z", "array", "po", " pi", "w", "l", "u", "pi", "q", "f", "jp", "m", "point", "data", "ip", "v", "b", "np", "t", "e", "py", "pc", "part", " P"], "i": ["ji", "ih", "a", "ie", "int", "ai", "c", "y", "o", "jj", "ix", "ini", "im", "iu", "ti", "z", "si", "index", "yi", "ind", "start", "I", "it", "l", "u", "pi", "q", "f", "io", "m", "xi", "di", "ij", "v", "b", " ii", "t", "e", "id", "li", "ii", "ik", "ip"], "x": ["dx", "X", "xf", "tx", " z", "xs", " w", "ic", "xx", "c", " dx", "rx", "y", "jj", "work", "ix", "o", "h", " tx", "px", "z", "xt", "ex", "xxx", " xx", "index", "w", "wx", "u", "ax", "xi", "xb", "xe", " X", "xp", "v", "b", "e", "t", "xy", "step", "xc", " xp", "xa"], "j": ["ion", "ji", "dx", "ie", "int", "_", "c", "process", "y", "o", "jj", "num", "im", "pr", "ix", "ijk", "r", "section", "result", "jl", "z", "ch", "index", "ind", "next", "current", "adj", "obj", "it", "l", "u", "uj", "pi", "max", "jp", "f", "point", "jc", "m", "xi", "oj", "br", "jump", "aj", "ij", "J", "v", "b", "t", "e", "h", "part"]}}
{"code": "K = int(input())\\na=''\\nfor i in range(K):\\n  a = a + 'ACL'\\nprint(a)", "target": "533", "substitutes": {"K": ["F", "Power", "k", "KK", "E", "Length", "KO", "AK", "Max", "Ak", "H", "Q", "X", "Y", "Sk", " k", "ks", "B", "P", "C", "SK", "O", "EC", "BB", "KB", "KS", "S", "A", "HK", "Z", "KR", "PK", "Mask", "OK", "M", "N", "KA", "G", "Ka", "Work"], "a": ["aa", "s", "k", "sta", "code", "va", "ma", "p", "ai", "c", "fa", "r", "xa", "la", "mA", "ab", "z", "ana", "da", "pa", "A", "ar", "w", "ka", "action", "ia", "ata", "args", "l", "ak", "u", "d", "aaa", "f", "ca", "sa", " A", "m", "ac", "cha", "ga", "area", "ya", "am", "input", "data", "alpha", "b", "ea", "e", "ha", "za", "an", "ad", "n"], "i": ["gi", "ei", "p", "ai", "c", " I", "o", "h", "ix", " ip", "iu", "z", "x", "ind", "I", "it", "l", "u", "f", "j", "ac", "ip", "e", "bc", "id", "bit", "n"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\nk = 1000\\ns = 0\\nfor i in range(n-1):\\n    if s == 0:\\n        if a[i] < a[i+1]:\\n            s = k // a[i]\\n            k -= s * a[i]\\n    else:\\n        if a[i] > a[i+1]:\\n            k += s * a[i]\\n            s = 0\\nprint(k + s * a[-1])", "target": "67", "substitutes": {"n": ["span", "p", "c", "o", "r", "nc", "num", "h", "net", "y", "nu", "ne", "z", "sn", "w", "l", "d", "nn", "q", "f", "j", "m", "ns", "no", "ni", "b", "v", "np", "t", "N", "nb", "an"], "a": ["aa", "wa", "auto", "va", "ma", "active", "ans", "p", "aw", "c", "fa", "eta", "ama", "o", "y", "h", "la", "ba", "ab", "au", "array", "z", "da", "x", "pa", "A", "args", "ata", "l", "u", "aaa", "f", "ca", "sa", "ac", "ga", "m", "area", "aux", "am", "input", "aj", "ae", "data", "alpha", "b", "ea", "e", "all", "za", "an", "ad"], "k": ["km", "sh", "ke", "p", "g", "c", "dk", "K", "y", "o", "r", "h", "kk", "ks", "z", "x", "mk", "kw", "w", "ko", "ak", "l", "ok", "u", "d", "q", "ki", "j", "sk", "f", "ky", "m", "ku", "v", "t", "e", "ik", "an", "uk"], "s": ["ss", "spec", "south", "strings", "ins", "ans", "p", "states", "ms", "g", "c", "xs", "ps", "sym", "sets", "steps", "o", "r", "y", "h", "ks", "size", "z", "si", "es", "blocks", "S", "w", "cells", "l", "services", "u", "ses", "d", "parts", "f", "sk", "j", "cs", "m", "ns", "small", "ws", "seconds", "su", "os", "gs", "b", "v", "e", "ls", "t", "se", "rs", "an", "sum"], "i": ["gi", "ji", "ui", "ie", "qi", "p", "phi", "ai", "g", "c", "y", "h", "r", "o", "ini", "ix", "iu", "z", "si", "index", "x", "yi", "ind", "start", "I", "uri", "l", "u", "d", "pi", "ki", "j", "f", "io", "xi", "di", "ri", "ip", "ci", "b", "v", "e", "t", "multi", "id", "li", "ii", "part", "bi", "ti"]}}
{"code": "n, x = map(int, input().split())\\nL = list(map(int, input().split()))\\nD = [0]\\nfor i in range(n):\\n    D += [L[i] + D[i]]\\nans = 0\\nfor d in D:\\n    if d <= x:\\n        ans += 1\\n    else:\\n        break\\nprint(ans)\\n", "target": "444", "substitutes": {"n": ["name", "k", "p", "g", "c", "y", "number", "o", "num", "h", "z", "index", "w", "l", "u", "nt", "f", "j", "m", "ns", "no", "v", "b", "t", "N", "count", "e", "nb", "an"], "x": ["dx", "k", "int", "X", "p", "g", "c", "xs", "xx", "y", "h", "o", "ix", "z", "ex", "index", "xxx", "w", "l", "u", "q", "f", "j", "m", "xi", "v", "b", "e", "N", "t", "xes"], "L": ["F", "E", "V", "LT", "IL", "NL", "X", "Y", "LA", "dL", "Lu", "O", "B", "LM", "T", "LD", "DD", "SL", "I", "l", "Ds", "Z", "CL", "U", "R", "M", "XL", "N", "LI", "DL", "G", "LL", "ML"], "D": ["F", "E", "DA", "DS", "V", "Q", "X", "Y", "DH", "dL", "K", "DM", "DO", "DB", "O", "P", "T", "C", "MD", "DD", "PD", "LD", "JD", "S", "A", "DT", "I", "CD", "Ds", "Do", "DF", "Z", "ND", "U", "R", "FD", "M", "N", "DL", "G", "DI"], "i": ["gi", "k", "vi", "ui", "end", "int", "qi", "mi", "p", "phi", "ai", "c", "y", "h", "num", "ini", "pos", "iu", "ti", "z", "si", "eni", "index", "ind", "start", "I", "l", "u", "pi", "q", "j", "io", "m", "xi", "ori", "di", "ri", "ni", "b", "e", "t", "id", "li", "ii", "bi", "ad", "ip"], "ans": ["s", "dd", "ents", "lan", "span", "nas", "cas", "eps", "atan", "na", "ats", "ions", "anas", "AN", "ANS", "anes", "ks", "annels", "ann", "anon", "anc", "ani", "ones", "errors", "ays", "ana", "can", "nan", "ars", "anks", "aned", "nn", "ons", "ids", "leans", "sk", "ants", "ns", "scan", "os", "features", "actions", "ls", "cons", "plan", "ds", "an", "ins"], "d": ["name", "dd", "dy", "fd", "p", "nd", "c", "y", "o", "sd", "md", "z", " dd", "od", "ind", "l", "u", "xd", "dl", "f", "j", "m", "dc", "cd", "di", "day", "dim", "ld", "b", "e", "ds", "id", "dos", " do", "ad"]}}
{"code": "S = input()\\nK = int(input())\\n\\nans = 1\\nfor i in S:\\n\tif i != '1':\\n\t\tans = i\\n\t\tbreak\\n\tif K==1:\\n\t\tans = i\\n\t\tbreak\\n\tK-=1\\nprint(ans)", "target": "119", "substitutes": {"S": ["F", "ss", "s", "E", "L", "V", " s", "SE", "NS", "Si", "TS", "PS", "SH", "SI", "Su", "O", "SA", "P", "T", "C", "B", "D", "SK", "Section", "Sa", "A", "Sl", "I", "SS", "Single", "Sc", "Set", "CS", "U", "R", "M", "SP", "N", "SN", "G", "SO", "SU", "ES"], "K": ["F", "k", "E", "ID", "KK", "L", "KI", "AK", "V", "H", "Q", "X", "Y", "IK", "ANK", "AN", "ANS", "Sk", " k", "P", "ks", "C", "O", "SK", "B", "D", "AC", "NK", "KS", "A", "W", "I", "Kat", "HK", "Z", "U", "Mask", "OK", "M", "CAN", "N", "G", "KA"], "ans": ["ano", "s", "k", "aid", "a", "ents", "lan", "ras", "nas", "amps", "atan", "na", "ats", "aning", "anas", "AN", "ANS", "anes", "ks", "ane", "annels", "ann", "anon", "anc", "ani", "ana", "ania", "can", "nan", " means", "A", "An", "ars", "anned", "kin", "anus", "aned", "aus", "ki", "leans", "ens", "sk", "cs", "anne", "ants", "ns", "scan", "ases", "os", "ANN", "ds", "an", "ins"], "i": ["gi", "ji", "s", "k", "a", "auto", "ei", "int", "chi", "p", "phi", "ai", "inter", "c", "ic", " I", "o", "ini", "iu", "C", "ani", "z", "si", "x", "ind", "start", "I", "it", "u", "pi", "d", "io", "iii", "j", "f", "II", "xi", "di", "no", "ni", "ci", "ip", "e", "id", "li", "ii", "ik", "n", "bi", "ti"]}}
{"code": "n = int(input())\\nA = list(map(int, input().split()))\\nq = int(input())\\nm = list(map(int, input().split()))\\n\\n\"\"\"\\ndef exhaustive_search(m, i):\\n    if i == n:\\n        return 0\\n    if m < 0:\\n        return 0\\n    if m == A[i]:\\n        return 1\\n    return max(exhaustive_search(m, i + 1), exhaustive_search(m - A[i], i + 1))\\n\"\"\"\\n\\ndef dp_search(m):\\n    dp = [[1] + [0] * m for _ in range(n + 1)] # dp[i][j] i\u756a\u76ee\u307e\u3067\u3067j\u3092\u4f5c\u308c\u308b\u304b\\n    for i in range(1, n+1):\\n        for j in range(1, m+1):\\n            if j >= A[i-1]:\\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j - A[i-1]])\\n            else:\\n                dp[i][j] = dp[i-1][j]\\n    return dp[n][m]\\n\\nfor mi in m:\\n    if dp_search(mi):\\n        print(\"yes\")\\n    else:\\n        print(\"no\")\\n", "target": "279", "substitutes": {"n": ["k", "p", "g", "c", "i", "o", "y", "nc", "num", "h", "net", "r", "ne", "z", "x", "sn", "w", "ny", "l", "cn", "u", "d", "nn", "nt", "f", "j", "ns", "nr", "v", "b", "np", "e", "N", "t", "nb"], "A": ["aa", "a", "H", "Q", "na", "ai", "K", "ap", "P", "B", "C", "mA", "D", "au", "da", "Alpha", "S", "I", "ga", "am", "ae", "alpha", "M", "N", "G", "Am", "an", "ad"], "q": ["k", "sq", "qs", "qu", "Q", "p", "qa", "g", "c", "h", "y", "r", "o", "iq", "P", "z", "ch", "x", "w", "u", "f", "dq", "query", "qt", "v", "e", "count", "qq"], "m": ["s", "k", "a", "p", "ms", "g", "c", "i", "h", "o", "r", "y", "pm", "num", "md", "z", "x", "params", "source", "dm", "mu", "w", "cm", "l", "u", "d", "f", "j", "sm", "bm", "am", "M", "v", "b", "dim", "e", "t", "mm", "hm", "range", "param"], "dp": ["lp", " p", "wp", "eps", "p", "dist", "tp", "pm", "cp", "gp", "params", "comp", "dm", "mu", "cm", "bb", "DP", "dl", "dt", "pp", "dr", "dc", "pkg", "ep", "db", "mm", "ds", "hp", "ip"], "_": ["s", "p", "g", "i", "r", "num", "x", "l", "d", "f", "j", "len", "t"]}}
{"code": "import sys\\nfrom sys import exit\\nfrom collections import deque\\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right #func(\u30ea\u30b9\u30c8,\u5024)\\nfrom heapq import heapify, heappop, heappush\\nfrom math import *\\n\\nsys.setrecursionlimit(10**6)\\nINF = 10**20\\neps = 1.0e-20\\nMOD = 10**9+7\\n\\ndef mint():\\n    return map(int,input().split())\\ndef lint():\\n    return list(map(int,input().split()))\\ndef judge(x, l=['Yes', 'No']):\\n    print(l[0] if x else l[1])\\ndef lprint(l, sep='\\n'):\\n    for x in l:\\n        print(x, end=sep)\\n\\nn,a,b = mint()\\nif (n==1 and a!=b) or a>b:\\n    print(0)\\nelse:\\n    print(b*(n-1)+a-(a*(n-1)+b)+1)", "target": "395", "substitutes": {}}
{"code": "print('YES' if input() == input()[::-1] else 'NO')\\n", "target": "275", "substitutes": {}}
{"code": "def answer(n: int, p: []) -> int:\\n    p.append(p.pop(p.index(max(p))) // 2)\\n    return sum(p)\\n\\n\\ndef main():\\n    n = int(input())\\n    p = list(int(input()) for _ in range(n))\\n    print(answer(n, p))\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "259", "substitutes": {"n": ["min", "name", "k", "g", "c", "i", "o", "number", "nc", "y", "num", "net", "pos", "nu", "ne", "z", "index", "x", "sn", "node", "w", "l", "u", "d", "nn", "nt", "j", "f", "m", "ns", "no", "ni", "v", "np", "t", "N", "pn", "count", "dn", "nb"], "p": ["lp", "s", "op", "k", "a", "pre", "ps", "bp", "g", "c", "fp", "i", "y", "r", "tp", "o", "h", "pr", "cp", "pos", "ap", "api", "P", "sp", "temp", "po", "array", "pa", "x", "cache", "params", "w", "args", "l", "u", "pi", "d", "q", "f", "j", "jp", "m", "pp", "list", "data", "ip", "v", "b", "np", "t", "e", "part"], "_": ["__", " time", " __", "x", " un", "len", "all", " all"]}}
{"code": "W,a,b=map(int,input().split())\\nthre =0 \\nres =0\\nif a<=b:\\n  thre = a+W\\n  if thre >= b:\\n    res = 0\\n  else:\\n    res = b-thre\\nelse:\\n  thre=b+W\\n  if thre >= a:\\n    res = 0\\n  else:\\n    res = a-thre\\nprint(res)", "target": "547", "substitutes": {"W": ["F", "E", "wa", "L", "Sw", "V", "Writer", "Max", "H", "Q", "X", " w", "Y", "_", "aw", "c", "Width", "MW", "r", "SW", "GW", "we", "Div", "P", "B", "C", "S", "A", "Weight", "w", "Res", "Word", "I", "We", "DW", "f", "Ws", " A", "WA", "U", "R", "M", "ow", "base", "N", "Wa", "G", "CW", "Wh", "FW", "BW", "n"], "a": ["aa", "s", "wa", "va", "ma", "p", "ai", "g", "c", "aw", "fa", "i", "y", "r", "ba", "mA", "B", "ab", "au", "art", "da", "pa", "x", "A", "w", "ia", "bb", "d", "u", "f", "ca", "sa", " A", "ac", "m", "asa", "ga", "area", "am", "ae", "alpha", "e", "an", "ad", "n"], "b": ["aa", "be", "s", "k", "fb", "p", "bs", "g", "c", "i", " B", "y", "r", "h", "wb", "beta", "api", "B", "ba", "ab", "x", "A", "w", "sb", "l", "bb", "d", "rb", "u", "abb", "f", "ac", "ae", "v", "an", "e", "base", "abc", "nb", "bi", "ad", "n"], "thre": ["thRE", "sthrace", "othore", "sthree", "sthresh", "ithrace", "thore", " thren", " thr", "Thre", "thren", "ithree", "ethre", "Thres", "othru", " thrace", "ethree", "ethn", "othresh", "threb", "THbre", "ithre", " thresh", "thru", "THre", "ythRE", "othres", "othr", " thres", "THru", "thyree", "THren", " thro", "Thru", "than", "thrace", " thore", "thyn", "ythre", "thyreb", " thRE", "shresh", "sthre", "thare", "tharee", "ythresh", "THresh", "othRE", "three", "ethro", "ethreb", "thn", "othren", "thyre", " three", "othro", "shRE", "thresh", "thres", "shbre", "shre", "ithresh", "thro", "thbre", " thbre", "ethru", " thru", "ethr", "thareb", "thr", "ythore", "ThRE", "othre", "THRE"], "res": ["rh", "error", "Rs", "rest", "mr", "rus", "ras", "mer", "rup", "ps", "ms", "err", " Res", "Results", "r", "results", "result", "pres", "rep", "re", "gr", "reg", "rez", "grid", "rev", "errors", "blocks", "response", "x", "params", "Res", "w", "req", "resolution", "out", "sol", "RES", "right", "details", "real", "resh", "resp", "breaks", "os", "features", "rem", "cr", "reset", "rys", "rs"]}}
{"code": "n = int(input())\\nxy_array = [list(map(int, input().split())) for _ in range(n)]\\n\\nth = pow(10, 9)\\nright_up_max = -th\\nleft_down_min = th\\nleft_up_max = -th\\nright_down_min = th\\n\\nfor x, y in xy_array:\\n    right_up_max = max(x + y, right_up_max)\\n    left_down_min = min(x + y, left_down_min)\\n    left_up_max = max(x - y, left_up_max)\\n    right_down_min = min(x - y, right_down_min)\\n\\nans = max(right_up_max - left_down_min, left_up_max - right_down_min)\\nprint(ans)", "target": "399", "substitutes": {"n": ["s", "k", "span", "p", "c", "i", "number", "nc", "num", "r", "net", "o", "nu", "z", "nan", "w", "ny", "l", "d", "nn", "max", "f", "network", "m", "ns", "no", "b", "len", "t", "N", "count", "nb", "nor"], "xy_array": ["xy2analysis", "xy2array", "py_array", "xypyform", "py_analysis", "xy_form", "xy_arr", "xypyarray", "xypyarr", "xy2area", "xypyanalysis", "xy_analysis", "xypyarea", "py_form", "py_area", "py_arr", "xy2arr", "xy_area"], "_": ["__", " __", " k", "f", "all", " col"], "th": ["rh", "the", "ih", "ths", "k", "then", "sh", "oth", "third", "tw", "top", "tha", "kh", "ft", "std", "gh", "auth", "h", "ht", "tp", "num", "TH", "how", "tr", "wh", "ph", "td", "eth", "uth", "ty", "ch", "xxx", "oct", "sth", "thin", " Th", "kw", "w", "ith", "sec", "thy", "nt", "max", "hist", "right", "f", "Th", "gt", "ust", "han", "hi", "t", "through", "arth", "alth", "se"], "right_up_max": ["right_up_min", "right_up_range", "right_down_range", "right_up_ax", "right_down_max", "right_down_ax"], "left_down_min": ["left_up_min", "left_down_in", "left_down1max", "left_up_Min", "left_down1min", "left_down_mins", "left_up_mins", "left_down_Min", "left_up_span", "left_down_conf", "left_up_conf", "left_up_in", "left_down_span", "left_down1span", "left_down_max"], "left_up_max": ["left_up_min", "left_down_mod", "left_up67max", "left_up_range", "left_upfmax", "left_upfmin", "left_down_ax", "left_up\u00b7list", "left_up_mod", "left_down_div", "left_down_range", "left_up67mod", "left_up_sum", "left_up_ax", "left_up67min", "left_up\u00b7range", "left_down_sum", "left_up67div", "left_down_list", "left_up\u00b7max", "left_upfmod", "left_upfdiv", "left_up\u00b7min", "left_up_list", "left_down_max", "left_up_div"], "right_down_min": ["right_down67min", "right_down67limit", "right_up_min", "right_up_mins", "right_downkmax", "right_down_sum", "right_down_mins", "right_down67max", "right_up_sum", "right_up_limit", "right_down_max", "right_downkmin", "right_down_spec", "right_downkspec", "right_up_spec", "right_down_limit"], "x": ["dx", "min", "name", "wa", "a", "python", "sex", "X", "win", " w", "tx", "xs", "plus", "lat", "i", "xx", "yx", "rx", "yn", "ix", "px", "h", "work", "lex", "case", "ph", "z", "on", "ex", "ch", " xx", "wy", "time", "index", "cy", "w", "cross", "image", "wx", "u", "ctx", "d", "max", "one", "right", "ax", " ax", "xi", "ux", "xb", "co", "data", "ci", " X", "xe", "v", "xp", "e", "id", "mix", "xc"], "y": ["yr", "yd", "ys", "dy", "ye", "hy", "Y", "c", "sys", "i", "xx", "yx", "yu", "yn", "asy", "ym", "ay", "z", "zy", "ch", "yi", "yo", "cy", "w", "ny", "yt", "yang", "j", "ky", "sy", "yan", "yy", "ya", "oy", "iy", "ci", "yl", "my", "e", "t", "xy", "py", "col", "vy", "ry", "ey", "ies", "sky"], "ans": ["ain", "lan", "ras", "cas", "nas", "atan", "na", "ai", "gan", "ats", "aning", "anas", "AN", "anny", "ANS", "anes", "ane", "ann", "anon", "anc", "annot", "ana", "can", "asin", "nan", "An", "anned", "anus", "aned", "chan", "anan", "aus", "\u00e1n", "ns", "no", "ran", "san", "ean", "an", "ins"]}}
{"code": "def gcd(a,b):\\n  if b == 0:\\n    return a\\n  else:\\n    return gcd(b,a%b)    \\n\\nn,ans=int(input()),1\\nA=list(map(int,input().split()))\\ngcd_l,gcd_r=[],[]\\nl,r=A[0],A[n-1]\\n\\nfor i in range(n-1):\\n  l,r=gcd(l,A[i]),gcd(r,A[n-i-1])\\n  gcd_l.append(l)\\n  gcd_r.append(r)\\n\\nfor i in range(n-2):\\n  v=gcd(gcd_l[i],gcd_r[n-3-i])\\n  if v > ans:\\n    ans = v\\n\\nif gcd_l[n-2] > ans:\\n  ans=gcd_l[n-2]\\nif gcd_r[n-2] > ans:\\n  ans=gcd_r[n-2]\\n  \\nprint(ans)", "target": "94", "substitutes": {"a": ["new", "s", "aa", "wa", "va", "ma", "p", "na", "ai", "g", "c", "fa", "y", "result", "ba", "mA", "ab", "da", "x", "pa", "ar", "w", "d", "aaa", "f", "sa", "m", "ac", "ca", "ga", "area", "am", "ae", "alpha", "e", "an", "ad"], "b": ["s", "be", "aa", "k", "ib", "fb", "p", "bs", "g", "c", "y", "number", "h", "wb", "mb", "beta", "B", "ba", "split", "ab", "z", "x", "w", "sb", "rb", "d", "bb", "bf", "u", "abb", "f", "eb", "ga", "null", "xb", "base", "e", "nb", "lb", "bi", "offset"], "n": ["name", "k", "s", "mn", "part", "non", "p", "na", "init", "g", "c", "o", "y", "nc", "en", "num", "net", "un", "number", "h", "el", "syn", "rn", "size", "ne", "ng", "z", "on", "x", "can", "nan", "sn", "w", "node", "version", "adj", "u", "d", "cn", "nt", "nn", "j", "f", "network", "m", "none", "ns", "no", "len", "inn", "e", "N", "t", "nb", "an", "nor"], "ans": ["s", "ents", "lan", "span", "nas", "amps", "ras", "ams", "atan", "na", "cas", "ai", "anges", "ats", "gan", "aning", "anas", "AN", "ads", "aos", "ANS", "anes", "ks", "annels", "vs", "aces", "ann", "anon", "ani", "anc", "ones", "ays", "ana", "es", "params", "can", "nan", " means", "sn", "ars", "lang", "eps", "anus", "ia", "args", "aned", "chan", "ations", "nn", "ons", "aus", "anan", "ens", "sk", "leans", "ants", "ns", "scan", "no", "os", "san", "cons", "ls", "ians", "ds", "plan", "an", "ins"], "A": ["F", "GA", "E", "L", "At", "New", "V", "Any", "All", "H", "Az", "AS", "X", "p", "Y", "AP", "Adam", "Num", "LA", " B", "K", "Ha", "AM", "P", "B", "mA", "C", "T", "As", "Ar", "D", " C", "array", "AA", "API", "Args", "Alpha", "au", "S", "W", "I", "Ma", "Data", "Array", "CA", "am", "U", "R", "AF", "alpha", "M", "Input", "N", "G", "Am", "NA", "An"], "gcd_l": ["gcr_la", "gcd_ll", "gcd__l", "gCD_b", "gcdsla", "gCD2r", "gcd5l", "gcd__ll", "gcr_b", "gcr_L", "gCD_r", "gcd2d", "gcd_u", "gcd5L", "gdc_r", "gcdsh", "gCD_d", "gcr_r", "gCD2l", "gcd2r", "gcd2l", "gcdsb", "gde_u", "gCD_l", "gcd_L", "gde_L", "gcr_l", "gcd5lc", "gcd_la", "gdc_h", "gcd_b", "gCD2b", "gcd2b", "gde_lc", "gcd__r", "gdc_ll", "gcdsl", "gcd5u", "gCD2d", "gde_l", "gcd_h", "gcd2L", "gdc_l", "gcr_h", "gcd2lc", "gcd_lc", "gcd__h", "gcd2u", "gcd_d"], "gcd_r": ["gxd_l", "gde2i", "gld_r", "gcd_p", "gcr_R", "gde2b", "gld_b", "gcr_v", "gde_r", "gcdableb", "gcd2i", "gcr_b", "gde_i", "gcd_rb", "gcd_c", "gld_v", "gcr_r", "gde_b", "gcd_i", "gcd2r", "gxd2b", "gcd2l", "gde2r", "gcd1p", "gcd1r", "gcr_c", "gcd2R", "gcd2rw", "gxd2r", "gxd_rw", "gxd2rw", "gde_R", "gcd_rw", "gcd_b", "gcd2b", "gcd1v", "gxd_r", "gxd2l", "gld_rb", "gde2R", "gcd_v", "gcdabler", "gcdablel", "gcd1R", "gcd2c", "gcr_p", "gxd_b", "gcdablerw", "gcd_R"], "l": ["lp", "s", "ol", "L", "p", "al", "g", "c", "ly", "o", "sl", "el", "la", "lo", "lc", "kl", "u", "d", "pl", "ll", "dl", "ln", "f", "lf", "rl", "nl", "lu", "ell", "e", "ls", "il", "li", "ul", "lb"], "r": ["rh", "rr", "s", "mr", "ur", "p", "g", "c", "err", "rw", "h", "rd", "pr", "usr", "rf", "tr", "re", "lr", "hr", "ar", "w", "vr", "u", "d", "rb", "ra", "f", "right", "sr", "rc", "m", "j", "ir", "rg", "rt", "ri", "R", "adr", "nr", "e", "fr", "ru", "er", "rs", "nor"], "i": ["gi", "ih", "s", "k", "ui", "ie", "int", "ei", "qi", "mi", "p", "phi", "ai", "c", "o", "y", "ini", "ix", "h", "iu", "ti", "z", "mini", "si", "eni", "x", "yi", "ind", "I", "uri", "u", "pi", "d", "f", "j", "io", "m", "xi", "di", "ri", "ni", "ci", "ip", "e", "t", "multi", "li", "ii", "bi"], "v": ["s", "vi", "ve", "uv", "V", "va", "vo", "p", "g", "c", "o", "h", "y", "lv", "vs", "z", "vp", "x", "nv", "av", "w", "u", "d", "f", "vol", "j", "m", "vv", "os", "e", "sv", "ev", "ul", "val", "an", "vd"]}}
{"code": "s = int(input())\\ndp = [0]*(2001)\\ndp[3] = 1\\nmod = 10**9+7\\nfor i in range(4,s+1):\\n    dp[i] = (dp[i-1] + dp[i-3]) % mod\\nprint(dp[s])", "target": "235", "substitutes": {"s": ["ss", "sq", "spec", "p", "states", "xs", "c", "g", "sym", "sets", "h", "r", "sf", "second", "si", "es", "params", "S", "w", "sb", "sites", "parts", "l", "lines", "d", "sec", "u", "ses", "js", "f", "sup", "cs", "m", "sync", "ns", "days", "site", "ws", "us", "su", "abs", "b", "string", "space", "t", "ls", "e", "ds", "se", "sv", "n"], "dp": ["lp", "amp", "wp", "p", "dist", "pb", "fp", "dat", "var", "tp", "result", "cp", "pos", "rep", "gp", "dep", "dB", "params", "dm", "grad", "cm", "patch", "bb", "d", "pi", "DP", "dl", "dt", "pp", "deb", "dr", "port", "dc", "address", "drop", "pkg", "di", "rank", "data", "db", "alpha", "df", "ep", "dim", "pair", "e", "pd", "dump", "grade", "ds", "dos", "dn", "hp", "config", "direction", "ip"], "mod": ["min", "k", "int", "dig", "MOD", "perm", "p", "exp", "ai", "g", "c", "mult", "r", "pm", "log", " Mod", "div", "scale", "od", "x", "oct", "comp", "cm", "sec", "pi", "d", "mag", "q", "j", "f", "lib", "m", "ac", "dc", "mods", "n", "Mod"], "i": ["gi", "k", "ui", "int", "mi", "p", "phi", "ai", "c", "oi", "o", "y", "h", "ini", "iu", "ti", "z", "mini", "si", "index", "x", "ind", "start", "I", "uri", "l", "u", "pi", "d", "j", "f", "io", "m", " j", "xi", "di", "ni", "ci", "v", "b", "e", "t", "id", "li", "ii", "n", "bi", "ip"]}}
{"code": "import collections\\nimport sys\\nsys.setrecursionlimit(10 ** 8)\\n\\ndef Z(): return int(input())\\ndef ZZ(): return [int(_) for _ in input().split()]\\n\\nclass edge:\\n    def __init__(self, to, id): self.to, self.id = to, id\\n\\ndef main():\\n    N = Z()\\n    col = [0] * (N-1)\\n    G = collections.defaultdict(list)\\n    for i in range(N-1):\\n        a, b = ZZ()\\n        G[a].append(edge(b, i))\\n        G[b].append(edge(a, i))\\n    numCol = 0\\n    for i in range(1, N+1): numCol = max(numCol, len(G[i]))\\n\\n    def dfs(v):\\n        colSet = set()\\n        for ed in G[v]:\\n            if col[ed.id] != 0: colSet.add(col[ed.id])\\n        c = 1\\n        for ed in G[v]:\\n            if col[ed.id] != 0: continue\\n            while c in colSet: c += 1\\n            col[ed.id] = c\\n            c += 1\\n            dfs(ed.to)\\n\\n    dfs(1)\\n    print(numCol)\\n    for i in range(N-1): print(col[i])\\n\\n    return\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "157", "substitutes": {"_": ["field", "loc", "ie", "pid", "line", "__", " other", "vec", "X", "err", "___", "h", "ix", "en", " seq", "like", " __", " time", "inf", "link", "seed", " ell", "Id", "obj", "row", " dev", " doc", "len", "xy", "li", "er", "ip"], "self": ["k", "Self", "other", "me", "p", "worker", "g", "host", "plus", "h", "work", "instance", "pos", "client", "this", "server", "z", "edge", "x", "now", "w", "node", "user", "obj", "connection", "peer", "d", "q", "one", "object", "point", "proxy", "parent", "data", "wd", "dev", "e", "er", "test", "ref"], "to": ["name", "loc", "did", "pid", "token", "toc", "reply", "et", "go", "To", "tz", "location", "related", "target", "o", "by", "client", "api", "TO", "link", "fo", "ne", "od", "index", "dest", "ped", "node", "Id", "user", "peer", "do", "d", "doc", "member", "ted", "f", "proxy", "site", "address", "co", "su", "os", "ip", "type", "project", "t", "source", "next", "test", "ref", "on"], "id": ["iden", "min", "name", "ID", "aid", "end", "value", "pid", "sid", "code", "did", "kid", "p", "where", "target", "h", "case", "number", "orig", "iq", "vid", "iter", "oid", "link", "rid", "index", "ident", "bid", "x", "url", "start", "Id", "it", "d", "root", "ids", "one", "f", "du", "null", "cd", "parent", "no", "data", "ide", "ci", "length", "path", "key", "type", "hid", "source", "mid", "ip"], "N": ["F", "Length", "MN", "IN", "L", "NO", "V", "NN", "H", "Q", "X", "Sn", "Y", "Size", "NC", "Num", "NS", "NE", "NI", "K", "O", "P", "T", "C", "B", "D", "Len", "NP", "Ne", "S", "A", "I", "No", "NT", "OS", "Node", "Ni", "Z", "network", "IO", "Ns", "ND", "U", "R", "M", "J", "GN", " n", "KN", "Wh", "n"], "col": ["field", "loc", "ol", "cycle", "group", "collection", "int", "cond", "win", "p", "ge", "g", "sect", "nc", "num", "cp", "chain", "oc", "contract", "C", "coll", "COL", "fc", "ch", "index", "x", "ce", "cy", "ind", "Coll", "conn", "con", "cm", "l", "fact", "cop", "cal", "ll", "row", "ill", "lib", "point", "core", "old", "co", "ct", "zip", "ell", "key", "cf", "gen", "il", "count", "cell", "Col", "val", "cl", "enc", "word", "city", "column", "block"], "G": ["F", "GM", "GA", "E", "PG", "group", "L", "IG", "GE", "V", "Grid", "H", "Q", "X", "Y", "Gs", "g", "K", "Ge", "GW", "P", "B", "C", "GD", "T", "FG", "GU", "S", "GP", "GC", "A", "W", "I", "GR", "GH", "GF", "Z", "CG", "GG", "Graph", "U", "GB", "R", "M", "GS", "J", "GN", "LG", "Col", "Gu", "GV", "Group", "GT"], "i": ["gi", "ih", "s", "k", "ji", "ui", "ie", "ei", "ib", "int", "qi", "p", "ai", "g", "ic", "oi", "o", "y", "r", "ini", "iq", "iu", "ti", "z", "si", "index", "x", "ind", "I", "it", "l", "u", "pi", "d", "io", "f", "j", "m", "cli", " j", "xi", "ri", "ni", "ci", "ip", "e", "ice", "zi", "li", "ii", "bi", "n"], "a": ["aa", "s", "k", "va", "p", "ai", "g", "y", "ba", "ab", "z", "au", "da", "x", "A", "ah", "af", "w", "ak", "l", "u", "d", "aaa", "f", "ca", "sa", "ac", "am", "ae", "alpha", "ea", "e", "an", "ad", "n"], "b": ["s", "k", "aa", "be", "end", "ib", "fb", "p", "bs", "bp", "g", "y", "r", "h", "app", "mb", "both", "B", "ba", "ab", "x", "url", "body", "sb", "l", "rb", "d", "bb", "f", "j", "bd", "br", "abs", "e", "bc", "nb", "lb", "bi", "n"], "numCol": ["NUMCOL", "NUMCol", "NUMColumn", "sumColl", "sumcol", "numberLen", "numColumn", " numCOL", " numLen", "Numcol", "NumCol", "sumColumn", "numCo", "NumColl", "numberCol", " numCo", "nColumn", "numbercol", " numColl", "nCo", " numcol", "nCol", " numColumn", "NumCo", "NumLen", "numberColl", "NumCOL", "sumCol", "NumColumn", "numColl", "NUMcol", "numcol", "numLen", "ncol", "numCOL"], "v": ["s", "k", "vi", "ve", "uv", "V", "p", "g", "o", "h", "y", "vid", "lv", "vs", "vin", "z", "x", "nv", "cv", "w", "l", "u", "d", "q", "ov", "f", "j", "vol", "iv", "m", "vv", "e", "sv", "ev", "vd", "n"], "colSet": ["cSet", "collAdd", "contractSet", "contractBase", "colList", " colset", "contractAdd", " colSite", "COLset", "ColChan", "collset", "collList", "colChan", "colAdd", "Colset", " colChan", "ColSet", "cBase", "colset", "COLChan", "collSite", "collSet", "colSite", "cAdd", "COLSite", " colList", "contractList", "collBase", "colBase", "COLList", "cList", "COLSet"], "ed": ["ized", "rod", "end", "dd", "ored", "line", "sent", "sed", "hed", "ic", "ec", "en", "sd", "ied", "ded", "ged", "linked", "ned", "iced", "od", "es", "oned", "x", "ened", "ind", "pred", "wed", "aned", "ED", "ee", "d", "fed", "added", "ted", "eled", "Ed", "eed", "ced", "led", "ended", "eds", "defined", "med", "edd", "aed", "e", " Ed", "red", "eff", "eded", "ined", "ad", "zed", "ped"], "c": ["cur", "k", "s", "sc", "p", "g", "y", "o", "nc", "ec", "r", "h", "C", "coll", "lc", "size", "uc", "fc", "ce", "x", "unc", "cy", "cu", "l", "u", "d", "f", "cs", "m", "ac", "dc", "cd", "co", "ci", "ct", "cf", "t", "e", "count", "cc", "bc", "cr", "mc", "xc", "abc", "n", "tc", "pc"]}}
{"code": "from _collections import deque\\nn,m,k=map(int,input().split())\\n\\nfre=[[] for _ in range(n+1)]\\nbro=[[] for _ in range(n+1)]\\n\\nfor i in range(m):\\n    a,b=map(int,input().split())\\n    fre[a].append(b)\\n    fre[b].append(a)\\n\\nfor i in range(k):\\n    a, b = map(int, input().split())\\n    bro[a].append(b)\\n    bro[b].append(a)\\n\\nans=[]\\n\\nx=[-1]*(n+1)\\n\\nfor i in range(1,n+1):\\n    if x[i]==-1:\\n        x[i]=i\\n        data=deque([i])\\n        while len(data)>0:\\n            p=data.popleft()\\n            for j in fre[p]:\\n                if x[j]==-1:\\n                    x[j]=i\\n                    data.append(j)\\ng=[0]*(n+1)\\nfor i in range(1,n+1):\\n    g[x[i]]+=1\\nfor i in range(1,n+1):\\n    g[i]=g[x[i]]\\n\\nfor i in range(1,n+1):\\n    aa=g[i]-1\\n    aa-=len(fre[i])\\n    for j in bro[i]:\\n        if x[i]==x[j]:\\n            aa-=1\\n    ans.append(str(aa))\\nprint(\" \".join(ans))\\n\\n", "target": "368", "substitutes": {"n": [" N", "s", " info", "mn", "ic", " number", "c", " iter", " r", " network", "o", "y", "nc", "num", " c", "un", "net", "en", "ne", " f", "z", "on", "fn", " fn", "sn", "w", " cycle", "l", " np", "u", "d", "cn", "nt", "nn", "f", "ln", "network", "ns", " init", "no", "nr", "v", "e", "N", "t", " l", "nb", " len"], "m": ["km", "s", "mn", "ma", "mi", "c", "o", "r", "y", "h", "num", "z", "dm", "w", "l", "u", "d", "q", "f", "M", "v", "e", "mc"], "k": ["km", "ke", "c", "K", "y", "o", "h", "r", "ks", "kn", "z", "ch", "l", "u", "d", "q", "sk", "f", "M", "v", "e"], "fre": ["min", "train", "phi", "fin", "reb", "rf", "re", "la", "rule", "fle", "q", "f", "fun", "fen", "co", "ran", "fr", "li", "info", "auto", "arr", "fe", "rot", "fn", "bre", "flat", "allow", "con", "rel", "hi", "fast", "len", "e", "Fre", "aff", "rike", "dist", "r", "reg", "conf", "ares", "grid", "fm", "mu", "fi", "ra", "frac", "ln", "fl", "obi", "foo", "le", "family", "cycle", "ma", "xf", "afi", "fa", "o", "rep", "wave", "gre", "mini", "norm", "aaa", "fee", "free", "no", "base", "pe", "share", "fine", "range", "ori"], "_": ["s", " block", "__", " local", " __", " line", " time", "q", "out", "f", "len", "t", "val", "block", "ip"], "bro": ["loc", "cycle", "mr", "vo", "ke", "c", " Bro", "oro", "o", "bo", "el", "bn", "rn", "lo", "coll", "ro", "cro", "mini", "cho", "pro", "bre", "iro", "ko", "bol", "bel", "bug", "ok", "bb", "gro", "ra", "fore", "BR", "bd", "bridge", "none", "br", "frame", "no", "bone", "bin", "map", "gb", "Bro", "bra", "base", "bi", "fr", "fine", "range", "nb", "oline", "block"], "i": ["gi", "ji", "s", "ui", "ie", "int", "ei", "qi", "mi", "phi", "ai", "c", "o", "y", "ine", "ini", "im", "ix", "iu", "api", "z", "mini", "on", "si", "index", "yi", "ind", "I", "it", "l", "u", "pi", "d", "uri", "q", "io", "f", "ir", "xi", "ori", "ri", "di", "ni", "ci", "ip", "v", "e", "info", "id", "li", "ii", "ik", "bi", "ti"], "a": ["s", "wa", "auto", "va", "ma", "qa", "na", "ai", "c", "aw", "fa", "o", "y", "h", "r", "api", "la", "ba", "ab", "au", "z", "da", "A", "ar", "af", "w", "action", "ia", "ak", "l", "u", "d", "aaa", "f", "sa", "ac", "ca", "ga", "area", "am", "aj", "ae", "alpha", "ea", "e", "ha", "an", "ad"], "b": ["be", "s", "ib", "bur", "fb", "bs", "c", "y", "o", "h", "r", "wb", "mb", "both", "ba", "B", "ab", "w", "sb", "body", "cb", "l", "ob", "bf", "d", "u", "rb", "bh", "abb", "bb", "f", "eb", "bd", "ga", "db", "v", "base", "e", "bc", "big", "nb", "lb"], "ans": ["s", "ents", "groups", "les", "ras", "span", "lan", "ams", "eps", "na", "ps", "ms", "xs", "ats", "arts", "anas", "AN", "ads", "ANS", "anes", "ks", "vs", "ann", "ani", "es", "ands", "can", "ars", "args", "parts", "aned", "ons", "ids", "aus", "ens", "sk", "cs", "ants", "ns", "ases", "breaks", "os", "ls", "ds", "an", "ins"], "x": ["s", "group", "int", "sex", "X", "na", "ic", "xs", "c", "xx", "xf", "plus", "y", "rx", "h", "ix", "case", "o", "xa", "work", "r", "z", "xt", "on", "ex", "index", "xxx", "w", "cross", "l", "wx", "u", "d", "q", "f", "ax", "sync", "xi", "xe", "v", "xp", "e", "pe", "xes", "xy", "id", "xc", "an"], "data": ["new", "raw", "change", "ui", "group", "dd", "open", "chi", "mi", "arr", "na", "aw", "dat", "o", "results", "pos", "DATA", " Data", "api", "la", "empty", "div", "array", "index", "cache", "da", "blocks", "valid", "mu", "body", "w", "block", "ata", "u", "d", "pi", "Data", "di", "no", "batch", "alpha", "list", "breaks", "actions", "all", "multi", "li", "next", "bi", "ad"], "p": ["s", "pid", "c", "fp", "y", "o", "tp", "pr", "cp", "ap", "pt", "P", "z", "pa", "l", "u", "d", "f", "jp", "pp", "point", "ip", "v", "e", "t", "pe", "py", "part"], "j": ["ji", "s", "ie", "ja", "c", "jo", "o", "y", "dj", "r", "jj", "jl", "z", "je", "si", "ind", "l", "u", "uj", "d", "q", "jp", "f", "io", "point", "note", "br", "aj", "ij", "J", "v", "key", "t", "e", "id", "li", "ii", "ip"], "g": ["gi", "s", "group", "groups", "gy", "ge", "go", "c", "gh", "h", "r", "gu", "gam", "y", "o", "gae", "ig", "gr", "game", "gre", "z", "gn", "w", "l", "u", "d", "gas", "gg", "q", "sg", "f", "ga", "rg", "graph", "gs", "v", "gb", "e", "gm", "G", "vg"], "aa": ["wa", "va", "ma", "pha", "ja", "arr", "na", "qa", "ai", "c", "fa", "gap", "lla", "acc", "dat", "Na", "gae", "beta", "la", "ba", "AA", "si", "pa", "da", "av", "af", "adj", "ee", "nn", "sha", "aaa", "ca", "sa", "ac", "area", "ae", "ni", "alpha", "ea", "aaaa", "ha", "abc", "xa"]}}
{"code": "n,m,k=map(int,input().split())\\nmod1,mod2=10**9+7,998244353\\nmod=mod2\\nMAX=n-1\\nfact=[1]*(MAX+1)\\ninv=[1]*(MAX+1)\\nfor i in range(2,MAX+1):\\n    fact[i]=i*fact[i-1]%mod\\ninv[-1]=pow(fact[-1],mod-2,mod)\\nfor i in range(MAX,1,-1):\\n    inv[i-1]=inv[i]*i%mod\\ndef comb(x,y):return fact[x]*inv[y]%mod*inv[x-y]%mod if x>=y>=0 else 0\\nans=0\\ncor=pow(m-1,n-1-k,mod)\\nfor i in range(k,-1,-1):\\n    ans=(ans+comb(n-1,i)*cor)%mod\\n    cor=cor*(m-1)%mod\\n\\nprint(m*ans%mod)", "target": "375", "substitutes": {"n": ["min", "a", "mn", "p", "c", "o", "h", "nc", "num", "net", "number", "un", "en", "ne", "z", "sn", "w", "l", "u", "d", "cn", "max", "nt", "j", "f", "network", "ln", "ns", "no", "M", "nr", "v", "b", "t", "N", "count", "e", "nb"], "m": ["s", "a", "mn", "mi", "p", "ms", "g", "c", "h", "r", "o", "im", "un", "z", "module", "dm", "mu", "cm", "l", "machine", "u", "d", "q", "f", "j", "sm", "bm", "man", "am", "M", "v", "b", "e", "mm"], "k": ["km", "p", "g", "c", "K", "h", "o", "r", "kk", "ks", "kn", "z", "ch", "mk", "kw", "w", "ko", "ak", "ok", "u", "d", "max", "q", "j", "sk", "f", "M", "v", "b", "mc"], "mod1": ["mod01", "dim2", "dim01", "mode1", "dim1", " mod01", "dimone", "modeone", "modone", "mode01", "mode2", " modone"], "mod2": ["MOD2", "modB", "MOD1", "Mod2", "max02", "Mod4", "mod02", "MODB", "max4", "mod4", " modB", "max2", "Mod1", "ModB", "MOD4", "MOD02", "Mod02"], "mod": [" MOD", "min", "int", "com", "cond", "im", "orig", "comment", "re", "cum", "sign", "rule", "scale", "module", "version", "pack", "root", "j", "ac", "model", "fun", "bin", "order", "part", "loop", "mode", "mad", "common", "dom", "MOD", "section", "div", "component", "comp", "cm", "sec", "lib", "function", "ci", "rem", "mac", "dec", "complex", "add", "step", "id", "form", "rad", "Mod", "spec", "dig", "p", "dist", "mult", "lex", "log", "tr", "md", "reg", " Mod", "inc", "ind", "d", "mag", "max", "row", "du", "comb", "rank", "func", "dim", "ow", "mix", "block", "um", "modified", "perm", "exp", "c", "num", "pm", "lock", "od", "norm", "grad", "bug", "fre", "pin", "trade", "option", "query", "check", "mods", "month", "draw"], "MAX": [" MOD", "F", "MN", "ID", "IN", " IR", "IG", "IS", "AK", "Max", "MOD", "Q", "X", "MA", "MAG", "ORD", "ALL", "Y", "KER", "DC", "SPEC", "MW", "K", "HEAD", "UN", "DIR", "COR", "INC", "IGN", "IP", "WORK", "VERSION", "MAC", "FORM", "EXT", "SIZE", "IX", "MIN", "POST", "I", " MIN", "Min", "IM", "MODE", "max", "ION", "DR", "DEC", "Z", "LINE", "U", "R", "CLASS", "M", "OUT", "N", "GEN", "IR", "NUM", "Mod"], "fact": ["aff", "loc", "Fact", "sh", "cas", " factor", "cond", "actor", "place", "event", "mult", "work", "pm", "orig", " Fact", "wh", "fam", "reg", "facts", "ann", "conf", "config", "factor", "fn", "ind", "inc", "w", " part", "con", "cm", "max", "ign", "q", "ff", "f", "ac", "core", "function", "self", "man", "co", "act", "shape", "mat", "ct", "feature", "count", "col", "mix", "filter", "feat", "cl", "part", "form", "block", "ref"], "inv": ["min", "s", "loc", "sh", "Inv", "align", "com", " array", "p", "rup", "nav", "init", " inverse", "c", "mult", "extra", "var", "work", "im", "orig", "pos", "log", "iq", "el", "sign", "fam", "wave", "temp", "conf", "rev", "index", "mu", "intern", "inc", "reverse", "pack", " incl", "w", "ind", "inventory", "u", "adj", "mag", "max", "ign", "conv", "vol", "ln", "f", "model", "comb", "impl", "up", "rel", " cov", "nr", "v", " Inv", "order", "mix", "qq", "cl", "eff", "filter", "form", "sum", "block", "info"], "i": ["min", "ui", "a", "ie", "int", "qi", "mi", "p", "ai", "c", "o", "h", "ix", "ini", "iu", "ti", "z", "si", "yi", "ind", "I", "ia", "it", "l", "u", "pi", "d", "max", "q", "io", "j", "f", "xi", "di", "ni", "ci", "ip", "ij", "v", "b", "e", "t", "li", "ii", "bi"], "x": ["dx", "s", "a", "int", "X", "p", "Y", "tx", "xs", "c", "xx", "h", "rx", "ix", "px", "z", "xt", "on", "ex", "xxx", "w", "l", "u", "d", "f", "ax", "j", "xi", "ya", "v", "b", "xp", "e", "xy", "xc"], "y": ["s", "ys", "a", "dy", "ye", "p", "Y", "c", "xx", "h", "o", "ix", "z", "xxx", "yi", "wy", "cy", "yo", "w", "yt", "u", "d", "q", "j", "sy", "f", "ky", "yy", "ya", "oy", "iy", "b", "v", "t", "e", "xy", "py", "vy", "ry", "ey", "ies"], "ans": ["s", "a", "ents", "lan", "nas", "ras", "arms", "cas", "p", "na", "ps", "ai", "ms", "amps", "ions", "AN", "ANS", "ks", "aces", "ann", "anc", "cus", "ays", "es", "can", " means", "ars", "aned", "chan", "ons", "ens", "sk", "cs", "ns", "cos", "man", "co", "no", "os", "ci", "cons", "ls", "ds", "an", "ins"], "cor": ["cur", "rr", "loc", "cmp", "sc", "com", "cas", "ner", "mor", "ur", "c", "err", "COR", "coll", "ann", "car", "anc", "cro", "lc", "cus", "ch", "cy", "cb", "cm", "chan", "cop", "ace", "max", "rc", "cs", "char", "core", "cos", "co", "scan", "ci", "cer", " Cor", "Cor", "cr", "ror", "an", "nor", "bor"]}}
{"code": "# abc057_b.py\\ndef calc(p1, p2):\\n    return abs(p1[0]-p2[0])+abs(p1[1]-p2[1])\\n\\n\\nN, M = map(int, input().split())\\nab = [list(map(int, input().split())) for i in range(N)]\\ncd = [list(map(int, input().split())) for i in range(M)]\\nfor i in range(N):\\n    dist = 10**9\\n    ans = 0\\n    for j in range(M):\\n        now_dist = calc(ab[i], cd[j])\\n        if dist > now_dist:\\n            dist = now_dist\\n            ans = j+1\\n    print(ans)\\n", "target": "3", "substitutes": {}}
{"code": "A = list(map(int, input().split()))\\n\\ns = sum(A)\\n\\nif s >= 22:\\n  print(\"bust\")\\n  \\nelse:\\n  print(\"win\")", "target": "443", "substitutes": {"A": ["F", "GA", "E", "a", "L", "Cs", "V", "All", "H", "AS", "X", "LA", "EA", "K", "AB", "AM", "SA", "P", "B", "C", "mA", "As", "D", "T", "API", "AA", "Alpha", "S", "W", "I", "Action", "CA", "alpha", "M", "N", "G", "Am", "NA", "An"], "s": ["ss", "acks", "ans", "states", "p", "ps", "g", "xs", "i", "ions", "alls", "sets", "ays", "es", "als", "S", " signs", "ses", "d", "aus", "ains", "f", "cs", "ments", "sections", "ns", "abs", "gs", "b", "ages", "ts", "e", "ls", "ds", "ops", "sum", "ies", "ins"]}}
{"code": "k=int(input())\\n\\nif k<=9:\\n    print(k)\\n    exit(0)\\n\\nans=[1,2,3,4,5,6,7,8,9]\\n\\ni=0\\nwhile len(ans)<k:\\n    v=str(ans[i])\\n    n=len(v)\\n    #\u6700\u5f8c\u306e\u6841\\n    v_last=int(v[-1])\\n\\n    if v_last==0:\\n        ans.append(int(v+'0'))\\n        ans.append(int(v+'1'))\\n    elif v_last==9:\\n        ans.append(int(v+'8'))\\n        ans.append(int(v+'9'))\\n    else:\\n        ans.append(int(v+str(v_last-1)))\\n        ans.append(int(v+str(v_last)))\\n        ans.append(int(v+str(v_last+1)))\\n    i+=1\\n\\nprint(ans[k-1])\\n\\n\\n\\n\\n\\n", "target": "339", "substitutes": {"k": ["km", "s", "end", "kid", "code", "ke", "p", "g", "c", "K", "o", "number", "num", "kk", "ks", "kn", "z", "x", "kw", "ko", "ak", "ask", "ok", "u", "d", "unk", "max", "q", "ki", "f", "sk", "j", "m", "ek", "kick", "kind", "check", "b", "key", "ck", "e", "cc", "ik"], "ans": ["s", "a", "ents", "lan", "nas", "span", "ins", "amps", "p", "na", "atan", "ms", "ions", "aning", "AN", "aos", "ANS", "ks", "vs", "names", "ann", "anon", "anc", "ani", "x", "params", "nan", "sn", "ars", "args", "lines", "aned", "parts", "nn", "ids", "ons", "ln", "sk", "leans", "cs", "ants", "ens", "ns", "scan", "list", "os", "ds", "ops", "an"], "i": ["vi", "qi", "p", "ai", "c", "y", "o", "ini", "ti", "z", "si", "eni", "index", "x", "start", "I", "l", "u", "pi", "ki", "j", "f", "io", "m", "xi", "di", "ri", "ni", "ci", "b", "t", "e", "id", "li", "ii", "bi"], "v": ["s", "vi", "value", "uv", "V", "va", "vo", "p", "g", "c", "o", "r", "vid", "lv", "vs", "vor", "z", "vp", "nv", "w", "l", "u", "q", "j", "f", "iv", "m", "vv", "van", "b", "sv", "val", "an", "vd"], "n": ["p", "g", "c", " ni", "y", "o", "nc", "num", "r", "ne", "z", "nan", "w", "l", "d", "nt", "q", "j", "f", "ln", "m", "ns", "ni", "e", "N", "t", "nb"]}}
{"code": "n=int(input())\\np=int(n/15)\\n\\nprint(int(n*800-p*200))\\n", "target": "492", "substitutes": {"n": ["s", "k", "na", "init", "g", "c", "i", "o", "number", "nc", "num", "y", "net", "pos", "h", "ne", "z", "fn", "x", "sn", "w", "l", "u", "d", "nn", "nt", "f", "network", "j", "m", "none", "ns", "no", "b", "v", "np", "t", "N", "e", "count", "pn", "nb"], "p": ["pre", "bp", "c", "i", "y", "o", "tp", "h", "r", "cp", "pos", "ap", "P", "z", "x", "l", "u", "d", "q", "j", "f", "jp", "m", "pp", "up", "pad", "ip", "b", "np", "t", "e", "pc", " P"]}}
{"code": "N = int(input())\\nnum,a = 0,0\\nl = []\\nfor i in range(N):\\n    num += 1\\n    a += num\\n    l += num,\\n    if a >= N:\\n        minus = a - N\\n        break\\n\\nfor i in l:\\n    if i != minus:\\n        print(i)", "target": "389", "substitutes": {"N": ["F", "Length", "L", "NO", "V", "NN", "H", "Q", "X", "Y", "Num", "NS", "NE", "K", "Na", "O", "P", "T", "C", "B", "D", "Len", "Ne", "Inf", "S", "A", "W", "I", "NT", "Ni", "Z", "Ns", "Mu", "U", "R", "M", " n", "G", "NA", "NUM", "n"], "num": ["new", "zero", "text", "loc", "span", "p", "na", "una", "init", "nm", "Num", "umi", "mon", "mult", "c", "o", "number", "en", "un", "NUM", "beta", "split", "temp", "nu", "div", "index", "x", "norm", "A", "valid", "inc", "w", "u", "uni", "one", "f", "m", "term", "am", "no", "alpha", "bin", "b", "dim", "np", "true", "multi", "form", "sum", "um", "n"], "a": ["aa", "wa", "va", "span", "ma", "p", "qa", "na", "ai", "c", "Num", "fa", "y", "Na", "la", "ba", "mA", "ab", "ana", "da", "x", "A", "ar", "ia", "ata", "u", "d", "ta", "f", "ca", "sa", "asa", "ac", "ga", "m", "area", "am", "aj", "ae", "alpha", "b", " n", "NA", "an", "active", "n"], "l": ["lp", "s", "k", "ol", "L", " L", "p", "al", "g", "c", "o", "r", "y", "h", "lr", "el", "left", "lc", "kl", "z", "u", "d", "ll", "j", "ln", "f", "dl", "m", "nl", "fl", "lu", "v", "b", "e", "ls", "il", "Ul", "li", "ul", "lb", "n"], "i": ["gi", "ji", "s", "ui", "ei", "int", "p", "ai", "g", "c", "ic", " I", "o", "y", "number", "ini", "iq", "iu", "slice", "z", "si", "index", "x", "yi", "ind", "I", "it", "u", "pi", "d", "ati", "f", "j", "io", "adi", "m", "xi", "ait", "input", "di", "ni", "ci", "alpha", "b", "e", "zi", "id", "li", "ii", "n", "bi", "ti"], "minus": ["min", "zero", "digit", "ie", "una", "na", "plus", "negative", "extra", "ini", "beta", "inf", "Zero", "sign", "gone", "ne", "Neg", "mini", "si", "z", "diff", "mu", "mega", "prime", "de", "nin", "d", "sin", "shift", "sup", "one", "sa", "none", "small", "neg", "alpha", "signed", "nos", "n"]}}
{"code": "str = input()\\nx = int(str)\\nprint(x*x*x)", "target": "115", "substitutes": {"str": ["name", "text", "digit", "STR", "int", "code", "arr", "ext", "exp", "stri", "err", "strip", "read", "r", "ix", "Str", "txt", "hr", "temp", "z", "div", "oct", "st", "exec", "d", "hex", "char", "dr", "br", "input", "data", "string", "v", "expr", "inner", "ctr", "n"], "x": ["dx", "s", "text", "change", "int", "code", "fix", "X", "p", "tx", "xf", "xs", "c", "i", "xx", "width", "fx", "y", "rx", "h", "ix", "num", "pos", "number", "px", "z", "xt", "ex", "xxx", "index", " xx", "time", "w", "patch", "d", "f", "j", "m", "xi", "data", "check", " X", "string", "v", "t", "xy", "step", "word", "val", "xa", "n"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**8)\\ndef line_to_int(): return int(sys.stdin.readline())\\ndef line_to_each_int(): return map(int, sys.stdin.readline().split())\\ndef line_to_list(): return list(map(int, sys.stdin.readline().split()))\\ndef line_to_list_in_iteration(N): return [list(map(int, sys.stdin.readline().split())) for i in range(N)]\\n# def dp(init, i, j): return [[init]*i for i2 in range(j)]\\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\\n#from collections import Counter # a = Counter(A).most_common()\\n# from itertools import accumulate #A = [0]+list(accumulate(A))\\n# import bisect #bisect.bisect_left(B, a), bisect.bisect_right(B,a)\\n\\na, b = line_to_each_int()\\nprint(a*b)", "target": "111", "substitutes": {"N": ["F", "Number", "L", "NO", "V", "H", "X", "Y", "NC", "Num", "NS", "NI", "K", "number", "O", "P", "T", "C", "B", "D", "S", "I", "NT", "Ni", "Z", "Ns", "R", "M", "J", "G", "NUM", "n"], "i": ["gi", "p", "c", " I", "y", "r", "ix", "num", "pos", "iu", "z", "index", "x", "ind", "I", "it", "l", "u", "d", "j", "f", "xi", "ip", "b", "id", "li", "bit", "val", "ti"]}}
{"code": "r = int(input())\\n\\nprint(r * 2 * 3.1415926535897932384626433)", "target": "552", "substitutes": {"r": ["rh", "rr", "k", "str", "p", "g", "c", "i", "var", "o", "h", "result", "re", "z", "x", "ar", "answer", "l", "u", "d", "rb", "q", "f", "right", "sr", "rc", "m", "dr", "rg", "br", "R", "nr", "b", "v", "t", "e", "kr", "range", "n"]}}
{"code": "# \u5199\u7d4cAC\\nfrom collections import defaultdict\\n\\nN = int(input())\\nA = [int(i) for i in input().split()]\\n\\n# dp[(i, x, flag)]:= i\u756a\u76ee\u307e\u3067\u3067x\u500b\u9078\u3093\u3067\u3044\u308b\u6642\u306e\u6700\u5927\u5024\\n# flag: i\u756a\u76ee\u3092\u3068\u308b\u30d5\u30e9\u30b0\\ndp = defaultdict(lambda: -float(\"inf\"))\\n\\n# \u521d\u671f\u6761\u4ef6\\ndp[(0, 0, 0)] = 0\\n\\n# \u8cb0\u3046DP\\nfor i, a in enumerate(A, 1):\\n    # i\u756a\u76ee\u307e\u3067\u3067\u9078\u3076\u500b\u6570\\n    for x in range((i // 2) - 1, (i + 1) // 2 + 1):\\n        dp[(i, x, 0)] = max(dp[(i - 1, x, 0)], dp[(i - 1, x, 1)])\\n        dp[(i, x, 1)] = dp[(i - 1, x - 1, 0)] + a\\n\\nprint(max(dp[(N, N // 2, 0)], dp[(N, N // 2, 1)]))", "target": "583", "substitutes": {}}
{"code": "N = int(input())\\np = [0] + list(map(int, input().split()))\\ncount = 0\\nfor i in range(1, N):\\n    if p[i] == i:\\n        p[i], p[i + 1] = p[i + 1], p[i]\\n        count += 1\\nif p[N] == N:\\n    print(count + 1)\\nelse:\\n    print(count)", "target": "77", "substitutes": {"N": ["F", "E", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "Num", "NS", "NE", "K", "number", "NM", "O", "P", "T", "C", "B", "D", "NP", "size", "Ne", "S", "A", "W", "I", "NT", "Ni", "Z", "Ns", "U", "R", "length", "M", "J", " n", "G", "NA", "Count", "n"], "p": ["lp", "s", "op", "k", "a", "int", "python", "ps", "bp", "g", "c", "o", "r", "tp", "y", "pr", "pos", "cp", "ap", "api", "P", "split", "sp", "z", "array", "po", "x", "start", "l", "u", "pi", "d", "q", "f", "j", "m", "point", "pp", "list", "data", "length", "ip", "b", "v", "np", "t", "e", "pe", "part", "n"], "count": ["error", "name", "int", "code", "span", "total", "c", "number", "num", "case", "weight", "split", "size", "force", "counter", "index", "cache", "next", "start", "bug", "nb", "child", "patch", "catch", "q", "max", "f", "found", "depth", "act", "parent", "list", "check", "length", "match", "type", "len", "key", "limit", "base", "id", "keep", "progress", "part", "test", "sum", "Count", "n"], "i": ["gi", "k", "ui", "a", "ie", "int", "chi", "qi", "phi", "ai", "init", "c", "oi", "h", "y", "ini", "ix", "pos", "iu", "P", "api", "ti", "z", "si", "eni", "index", "x", "ind", "start", "I", "uri", "l", "u", "pi", "d", "uni", "j", "f", "io", "m", "xi", "ori", "di", "ni", "ci", "v", "b", "my", "e", "info", "id", "li", "ii", "bi", "n"]}}
{"code": "from fractions import gcd\\n\\nN,ma,mb=map(int,input().split())\\nmed=[]\\nfor i in range(0,N):\\n    a,b,c=map(int,input().split())\\n    med.append((a,b,c))\\n\\ndp=[[[float(\"inf\") for i in range(0,401)] for j in range(0,401)] for k in range(0,N)]\\n\\nfor i in range(0,401):\\n    for j in range(0,401):\\n        if not (i==0 and j==0):\\n            g=gcd(i,j)\\n            I=i//g\\n            J=j//g\\n            if I==ma and J==mb:\\n                dp[0][i][j]=0\\n            else:\\n                g=gcd(i+med[0][0],j+med[0][1])\\n                I=(i+med[0][0])//g\\n                J=(j+med[0][1])//g\\n                if I==ma and J==mb:\\n                    dp[0][i][j]=med[0][2]\\n\\nfor i in range(1,N):\\n    a,b,c=med[i]\\n    for j in range(0,401):\\n        for k in range(0,401):\\n            if 400>=j+a and 400>=k+b:\\n                dp[i][j][k]=min(dp[i-1][j][k],c+dp[i-1][j+a][k+b])\\n            else:\\n                dp[i][j][k]=dp[i-1][j][k]\\n\\nif dp[N-1][0][0]==float(\"inf\"):\\n    print(-1)\\nelse:\\n    print(dp[N-1][0][0])\\n", "target": "578", "substitutes": {"N": ["F", "MN", "E", " M", "L", "V", "NN", "H", "Q", "X", "Y", "NC", "Size", "Num", "NS", "NI", "K", "Na", "NM", "O", "P", "B", "C", "T", "D", "Ne", "S", "A", "W", "No", "NT", "Node", "Ni", "Z", "Ns", "U", "R", "Mi", "M", "NB", " n", "G", "NA", "n"], "ma": ["gi", "wa", "mad", "ja", "aea", "MA", "na", "ms", "ama", "sha", "md", "mas", "ph", "la", "mp", "si", "pa", "da", "mu", "ka", "ia", "meta", "mma", "ra", "Ma", "mo", "mar", "sa", "media", "m", "ga", "ta", "f", "ya", "ema", "alpha", "ea", "mac", "mm", "big", "mc", "li"], "mb": ["km", "gov", "amp", "ib", "mn", "fb", "pg", "ms", "pb", "mt", "ym", "cp", "emb", "md", "ph", "mp", "vm", "sb", "gd", "cm", "MB", "bb", "bf", "rb", "eb", "m", "sm", "bm", "mx", "amb", "db", "gb", "bc", "mm", "bg", "mc", "nb", "kb"], "med": ["min", "s", "rod", "sh", "mer", "themed", "hed", "pre", "ms", "var", "im", "made", "ded", "linked", "pred", "q", "mand", "lim", "led", "pad", "list", "data", " trimmed", "signed", "mod", "skip", "sam", "manager", "ad", "named", "loaded", "mad", "managed", "h", "aged", "temp", "mp", "original", "array", "cm", "aved", "ced", "shape", "v", "pg", "mid", "rad", "aid", "rest", "marked", "p", "ps", "marg", "dict", "omed", "md", "sp", "Med", "vard", "pard", "d", "mag", "dim", "used", "modified", "me", "ed", "stated", "ph", "ned", "master", "par", "kept", "ordered", "ended", "df", "prep", "db", "mm", "ped"], "i": ["gi", "ji", "ui", "vi", "ie", "int", "ami", "qi", "mi", "p", "ai", "ic", "o", "y", "ini", "im", "ix", "iu", "api", "ani", "z", "si", "yi", "x", "mu", "ind", "ia", "uri", "l", "fi", "u", "pi", "d", "it", "ki", "io", "f", "m", "ir", "xi", "ori", "di", "ri", "ni", "ci", "ip", "v", "e", "id", "li", "ii", "ik", "anti", "n", "bi", "ti"], "a": ["aa", "va", "p", "ai", "ama", "y", "o", "h", "ba", "ab", "au", "z", "da", "x", "A", "af", "w", "ia", "ak", "l", "u", "d", "f", "sa", "ca", "ac", "m", "asa", "area", "am", "aj", "ae", "oa", "alpha", "e", "an", "ad", "n"], "b": ["aa", "s", "be", "ib", "fb", "p", "bs", "y", "h", "r", "o", "wb", "B", "ba", "ab", "z", "x", "sb", "cb", "l", "bb", "d", "rb", "bf", "ub", "u", "q", "f", "bd", "db", "v", "e", "bc", "lb", "bi", "n"], "c": ["s", "p", "y", "h", "r", "C", "z", "ch", "ce", "x", "can", "cy", "cu", "w", "cb", "l", "u", "d", "cn", "q", "f", "ca", "cs", "m", "ac", "cin", "dc", "ci", "v", "cf", "e", "bc", "cc", "col", "n"], "dp": ["lp", "sh", "dh", "wp", "eps", "p", "dist", "ps", "pb", "fp", "dat", "tp", "cp", "gp", "ph", "P", "dB", "dep", "sp", "api", "vs", "mp", "hr", "vp", "params", "comp", "dm", "grad", "bb", "pi", "d", "cop", "DP", "upp", "sup", "dt", "dl", "dq", "ga", "deb", "pp", "dr", "port", "dc", "drop", "df", "pkg", "di", "iper", "data", "db", "adr", "csv", "prep", "wd", "np", "pd", "mm", "imp", "yp", "py", "ds", "dump", "dos", "docs", "hp", "pg", "cdn", "ip"], "j": ["ji", "vi", "ie", "ja", "qi", "p", "jo", "y", "h", "jj", "dj", "o", "ijk", "api", "iu", "jl", "z", "si", "ch", "jet", "x", "ah", "ia", "it", "l", "u", "uj", "d", "q", "job", "jp", "f", "js", "m", "oj", "jc", "io", "xi", "br", "aj", "jam", "ij", "v", "bj", "key", "e", "jon", "fr", "kj", "li", "ii", "er", "ik", "n"], "k": ["s", "kid", "ke", "p", "dk", "K", "y", "h", "r", "o", "kk", "ijk", "kg", "ks", "kn", "z", "x", "kin", "w", "ka", "kw", "ko", "ak", "l", "ok", "u", "d", "unk", "ark", "q", "ki", "sk", "ky", "f", "m", "ac", "ku", "kick", "key", "v", "ck", "e", "kr", "id", "ik", "an", "uk", "n"], "g": ["gi", "group", "gy", "p", "ge", "go", "h", "y", "gu", "r", "gam", "ig", "gr", "gp", "reg", "grid", "ch", "gn", "w", "gener", "l", "u", "d", "gas", "q", "sg", "gg", "ll", "f", "mg", "m", "ga", "gs", "v", "eg", "gb", "e", "t", "gen", "bg", "gm", "G", "gl", "vg", "n"], "I": ["F", "IC", "PI", "E", "L", "IG", "KI", "V", "CI", "H", "Q", "X", "AI", "Y", "IA", "NI", "Si", "K", "IE", "SI", "O", "P", "B", "C", "D", "IJ", "IP", "API", "si", "A", "Id", "pi", "II", "U", "Fi", "Pi", "ci", "M", "LI", "G", "My"], "J": ["Js", "ji", "JJ", "L", "V", "MJ", "ja", "Q", "X", "Y", "JA", "_", "jo", "JS", "K", "JO", "jj", "JSON", "NJ", "JM", "Ja", "P", "B", "O", "IJ", "IP", "JD", "Jim", "uj", "Job", "Z", "jp", "JV", "JC", "M", "DJ", "JR", "G", "Java", "JP"]}}
{"code": "n,x,y=map(int,input().split())\\nanslist = [0]*(n)\\ntemp = 0\\nfor i in range(1,n):\\n    for j in range(i+1,n+1):\\n        temp = min(abs(j-i),(abs(x-i)+1+abs(y-j)),(abs(y-i)+1+abs(x-j)))\\n        anslist[temp] += 1\\n\\nanslist.pop(0)\\n\\nfor i in anslist:\\n    print(i)", "target": "22", "substitutes": {"n": ["min", "k", "p", "c", "o", "number", "num", "r", "nc", "net", "en", "h", "size", "ne", "z", "sn", "w", "ny", "l", "u", "d", "nn", "f", "m", "network", "ns", "ni", "v", "b", "len", "e", "N", "t", "count", "pn", "ii"], "x": ["min", "s", "k", "ji", "a", "int", "X", "p", "g", "c", "xs", "xx", "h", "rx", "ix", "o", "px", "z", "index", "w", "l", "u", "d", "q", "f", "ax", "m", "xi", "ya", "v", "b", "e", "xy"], "y": ["ji", "s", "k", "a", "dy", "ja", "p", "Y", "g", "c", "o", "z", "zy", "yi", "yo", "cy", "w", "ny", "l", "yt", "u", "d", "f", "sy", "m", "xi", "yy", "ya", "oy", "v", "b", "t", "e", "col", "py", "vy", "ii", "ey"], "anslist": ["ANSlist", "annLIST", "atanLIST", "scancode", "annlist", "ampsLIST", "ANScode", "anlist", "scanl", "scanlist", "ansLIST", "ANSl", "scanList", "ANSList", "annset", "anscode", "atanList", "atanset", "annList", "ampsList", "ansset", "ampsset", "annl", "atanlist", "ampslist", "ansl", "anl", "anList", "ansList", "ancode"], "temp": ["new", "unit", "loc", "cut", "const", "elt", "stable", "static", "cond", "tt", "pre", "init", "c", "nm", "extra", "num", "cp", "tmp", "iter", "pt", "emp", "z", "div", "time", "index", "cache", "diff", "clean", "partial", "w", "now", "current", "adj", "flat", "get", "cm", "pi", "tem", "max", "m", "Temp", "aj", " Temp", "length", "key", "v", "zip", "fake", "t", "count", "col", "test", "tc"], "i": ["gi", "ji", "k", "ui", "vi", "a", "ie", "int", "qi", "p", "phi", "ai", "init", "c", "o", "h", "r", "ix", "ini", "iu", "ti", "z", "si", "index", "yi", "ind", "w", "start", "I", "l", "fi", "u", "pi", "d", "q", "io", "f", "m", "xi", "area", "input", "ci", "ij", "v", "b", "key", "e", "t", "info", "id", "li", "ii"], "j": ["ji", "k", "a", "dy", "ja", "p", " dj", "jo", "c", "o", "jj", "ix", "h", "jl", "z", "index", "yi", "ind", "w", "adj", "l", "u", "uj", "pi", "d", "q", "js", "jp", "f", "m", "oj", "jc", "xi", "yy", "aj", "ij", "J", "v", "b", " ii", "e", "t", "py", "ii"]}}
{"code": "# encoding:utf-8\\nimport copy\\nimport random\\nimport bisect #bisect_left\u3000\u3053\u308c\u3067\u4e8c\u90e8\u63a2\u7d22\u306e\u5927\u5c0f\u691c\u7d22\u304c\u884c\u3048\u308b\\nimport fractions #\u6700\u5c0f\u516c\u500d\u6570\u306a\u3069\u306f\u3053\u3063\u3061\\nimport math\\nimport sys\\nimport collections\\n \\nmod = 10**9+7\\nsys.setrecursionlimit(mod) # \u518d\u5e30\u56de\u6570\u4e0a\u9650\u306f\u3067default1000\\n \\nd = collections.deque()\\ndef LI(): return list(map(int, sys.stdin.readline().split()))\\n \\nN, K = LI()\\nA = LI()\\n \\nif K > 50:\\n    print(\" \".join([str(N) for i in range(N)]))\\n    sys.exit()\\n \\nfor i in range(K):\\n    A_new = [0 for i in range(N)]\\n    imos_table = [0 for i in range(N)]\\n \\n    for j in range(N): # \u3053\u3053\u3067\u4e00\u5ea6\u72b6\u614b\u306e\u5dee\u5206\u306b\u3064\u3044\u3066\u3092imos_table\u306b\u4fdd\u5b58\\n        left = max(0, j - A[j])\\n        right = j + A[j] + 1\\n        imos_table[left] += 1\\n        if right >= N:\\n            pass\\n        else:\\n            imos_table[right] -= 1\\n    \\n    # tmp \u3092\u4f7f\u3063\u3066\u524d\u304b\u3089\u9806\u306b\u72b6\u614b\u3092\u8a08\u7b97\u3057\u3066\u3044\u304f\\n    tmp = 0\\n    for j in range(N):\\n        tmp += imos_table[j]\\n        A_new[j] += tmp\\n \\n    A = copy.deepcopy(A_new)\\n \\nprint(\" \".join(map(str, A)))", "target": "377", "substitutes": {}}
{"code": "\\nans = float(\"inf\")\\n\\n\\ndef solve():\\n\\n    N, K = map(int, input().split())\\n\\n    if N % K:\\n        print(1)\\n    else:\\n        print(0)\\n\\n\\nif __name__ == \"__main__\":\\n    solve()\\n", "target": "626", "substitutes": {"ans": ["s", "V", "span", "NN", "p", "XX", "_", "i", "Error", "Na", "AN", "ANS", "P", "C", "unc", "nan", "A", "S", "I", "q", "U", "bin", "dim", "NA", "an", "ins"], "N": ["F", "MN", "L", "V", "NN", "NL", "Q", "X", "Y", "Size", "Num", "NS", "NE", "NI", "Na", "NM", "CNN", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "A", "I", "Ni", "Z", "Ns", "ND", "R", "M", "J", " n", "G", "NA", "n"], "K": ["F", "k", "KK", "L", "AK", "V", "Max", "H", "Q", "X", "Y", "IK", "ANK", "O", " k", "P", "T", "C", "B", "D", "SK", "Sk", "NK", "KS", "KB", "S", "A", "W", "VK", "KC", "HK", "unk", "Z", "KR", "U", "R", "Mask", "M", "J", "G", "KN"]}}
{"code": "import bisect\\n\\nn,m=map(int,input().split())\\n\\nans=[]\\n\\nre=[[] for _ in range(n)]\\n\\n\\n\\nfor _ in range(m):\\n  a=list(map(int,input().split()))\\n  re[a[0]-1].append(a[1])\\n  ans.append(a)\\n  \\nd=[]\\nfor f in re:\\n  sor=[]\\n  \\n  new=sorted(list(set(f)))\\n  \\n  for i in f:\\n    c=bisect.bisect_left(new,i)\\n    sor.append(c+1)\\n    \\n  d.append(sor)\\n    \\n  \\nfor x in ans:\\n  p=x[0]\\n  q=d[p-1].pop(0)\\n  print(str('{:0=6}'.format(p))+str('{:0=6}'.format(q)))\\n  \\n\\n", "target": "225", "substitutes": {"n": ["s", "k", "ic", " number", " r", " network", " ni", "o", "r", " e", "num", " v", "y", "h", "en", " net", "z", " ne", " fn", " ir", "sn", "w", " ar", "l", " ng", "u", " o", "ns", " init", " self", "b", "v", "t", "N", "e", " num", " index", " l", "nb", " na"], "m": ["k", "middle", "end", "ms", "g", "y", "o", "r", "num", "im", "h", "z", "time", "mu", "w", "cm", "l", "u", "j", "M", "v", "b", "dim", "e", "mm", "range"], "ans": ["s", "ents", "ras", "na", "ai", "xs", "ats", "rows", "ions", "r", "ores", "ads", "ANS", "rules", "aces", "names", "ann", "anc", "array", "ana", "es", "ays", "can", "A", "ar", "ars", "args", "con", "aned", "lines", "ons", "ids", "works", "ens", "cs", "ns", "old", "ases", "breaks", "list", "ae", "features", "ls", "all", "cons", "ds", "an", "res", "ins"], "re": ["arr", "pre", "g", "reb", "ore", "fa", "o", "r", "rec", "rew", "cre", "RE", "une", "reg", "ro", "rev", "array", "ana", "ar", "bre", "are", "Re", "con", "he", "ra", "real", "ray", "scan", "ref", "ae", "ran", "b", "e", "cr", "fr", "ru", "range", "ren", "an", "res"], "_": [" block", "__", "non", " function", "ing", " seq", " time", " k", " un", "out", " non", " all"], "a": ["aa", "s", "auto", "va", "access", "ai", "fa", "y", "r", "o", "result", "la", "ba", "ab", "au", "array", "ana", "da", "pa", "A", "ar", "ia", "u", "sha", "aaa", "ca", "sup", "sa", "ac", "ga", "area", "aj", "am", "ae", "ara", "alpha", "b", "ea", "e", "ha", "all", "an", "ad"], "d": ["s", "dd", "nd", "dat", "o", "r", "dict", "y", "D", "z", "da", "l", "do", "dl", "j", "du", "dc", "cd", "di", "db", "v", "b", "e", "t", "ds", "an", "ad"], "f": ["F", "k", "int", "fd", "g", "fa", "h", "r", "o", "rf", "fe", "inf", "fo", "fs", "z", "fc", "ch", "fn", "index", "af", "ind", "w", "l", "u", "j", "fun", "fen", "v", "b", "feature", "cf", "e", "t", "fr", "id", "form", "ref"], "sor": ["ssio", " sore", "bsnor", "bsorp", "spor", " spor", "lsors", " sorp", "lsOR", "ssnor", "ssorp", "sOR", "psio", " sol", "lsor", "sspor", "ssol", "psore", "sol", "psor", " sOR", " sors", "sore", "bsor", "sors", "bspor", "psors", "sio", "ssors", "lsol", "snor", " snor", "ssor", "ssore", "sorp", " sio", "ssOR"], "new": ["s", "other", "loc", "New", "g", "existing", "plus", "o", "r", "ix", "iq", "ng", "div", "array", "index", "diff", "now", "inc", "w", "l", "u", "j", "ac", "old", "self", "small", "df", "data", "v", "b", "e", "big", "next", "ip"], "i": ["gi", "k", "ie", "int", "ic", "ai", "o", "r", " v", "ini", "iu", "z", "index", "ind", "I", "it", "l", "u", "pi", "j", "io", "ac", "xi", "ci", "v", "b", "e", "id", "li", " u", "ii", "bi", "ip"], "c": ["s", "k", "cycle", "ic", "o", "r", "ec", "chain", "C", "lc", "uc", "z", "ch", "ce", "cu", "w", "l", "u", "cs", "ac", "dc", "co", "ci", "v", "b", "e", "cr", "bc", "col", "xc"], "x": ["s", "k", "sex", "X", "na", "xs", "y", "h", "o", "ix", "r", "z", "ex", "index", "w", "l", "wx", "u", "j", "ax", "xi", "data", "xp", "v", "b", "e", "pe", "xy", "id", "xc"], "p": ["lp", "s", "k", "int", "pre", "y", "h", "tp", "per", "r", "o", "pos", "cp", "P", "z", "po", "pa", "w", "par", "l", "u", "pi", "j", "point", "pp", "v", "b", "np", "t", "pe", "e", "py", "pc", "ip"], "q": ["k", "sq", "qs", "qu", "qi", "Q", "qa", "y", "r", "h", "ix", "z", "ch", "w", "u", "j", "dq", "query", "qt", "v", "b", "qq"]}}
{"code": "l=list(map(int,input().split()));print(list(x for x in l if l.count(x)==1)[0])", "target": "665", "substitutes": {"l": ["lp", "ol", "L", "et", "p", "g", "c", "ly", "i", "ql", "o", "sl", "el", "ml", "la", "lo", "lc", "kl", "u", "d", "ll", "ln", "f", "lace", "lib", "m", "dl", "rl", "list", "nl", "lit", "fl", "v", "yl", "ell", "b", "t", "ls", "le", "il", "li", "ols", "lin", "n"], "x": ["text", "int", "sex", "X", "p", "opt", "xs", "c", "i", "xx", "rx", "number", "h", "y", "work", "im", "ph", "z", "xt", "ex", "index", "xxx", "cross", "w", "wx", "u", "ctx", "max", "q", "f", "ax", "m", "xi", "input", "check", "data", "match", " X", "xp", "v", "b", "t", "e", "xy", "id", "xc", "test", "n"]}}
{"code": "N,K=map(int,input().split())\\nmod=10**9+7\\n\\nfactorial=[1 for i in range(N+1)]\\nfor i in range(1,N+1):\\n    if i==1:factorial[i]=1\\n    else:factorial[i] = factorial[i-1]*i % mod\\n\\ndef comb(n,k):\\n    return factorial[n]*pow(factorial[n-k]*factorial[k], -1, mod)\\n\\nfor i in range(1,K+1):\\n  if i > N-K+1:print(0)\\n  else:print(comb(K-1,i-1)*comb(N-K+1,i)%mod)", "target": "366", "substitutes": {"N": ["F", "MN", "Length", "Nat", "Network", "Number", "L", "V", "NN", "H", "Q", "X", "One", "Y", "NC", "Size", "NS", "Num", "NE", "Na", "CNN", "P", "Len", "C", "T", "D", "SK", "B", "Ne", "S", "A", "I", "No", "NT", "Node", "Ni", "Z", "Ns", "U", "R", "Part", "M", "J", "CN", "KN", "G", "NA", "Wh"], "K": ["F", "KK", "Ke", "E", "L", "KI", "V", "Max", "H", "Ak", "Q", "X", "One", "Y", "IK", "KE", "Sk", "P", "B", "C", "T", "SK", "D", "NK", "KS", "KB", "Kent", "S", "KC", "I", "HK", "Z", "UK", "KR", "PK", "U", "R", "OK", "J", "M", "KN", "G", "CH", "Ku", "Key"], "mod": ["Power", " MOD", "PI", "loc", "mode", "min", "rod", "int", "com", "dig", "MOD", "perm", "p", "exp", "c", "mult", "o", "lex", "pm", "im", "log", "round", "cum", "reg", "lo", " Mod", "div", "scale", "od", "x", "comp", "module", "ind", "inc", "bug", "cm", "lam", "pi", "d", "max", "mag", "row", "sup", "j", "m", "comb", "fun", "rem", "dim", "mods", "ow", "dev", "dec", "complex", "step", "mix", "odd", "form", "rad", "Mod"], "factorial": [" factporal", "Factored", "motor", " factored", "ctories", "factporal", "motorial", " factor", "facticle", "actor", " factory", "factors", "factsored", "factsorial", "factorm", "actored", "Factractor", "factoror", "actorial", "factsors", "facory", "actorm", "floor", "ctors", "floorial", "factor", "facored", "floories", "factory", "actporal", "floporal", "actors", "factsor", "ctored", " factorm", " factories", "actractor", "actories", "motories", "factorories", "factored", "cticle", " factractor", "factractor", "motorm", "facor", "factororial", "factoricle", " facticle", "Factors", "Factories", "facorial", " factors", "ctor", "Factor", "Factory", "ctorial", "factories", "Factorial"], "i": ["gi", "ui", "a", "ei", "int", "ie", "chi", "qi", "mi", "p", "phi", "ai", "c", "o", "y", "ix", "ini", "im", "iu", "ti", "z", "mini", "si", "index", "x", "yi", "ind", "I", "it", "l", "u", "pi", "d", "ki", "j", "io", "f", "m", "xi", "di", "ni", "ci", "ij", "b", "v", "e", "info", "zi", "id", "li", "ii", "ik", "bi", "ip"], "n": ["a", "p", "na", "c", "y", "o", "nc", "num", "un", "rn", "ne", "nu", "z", "fn", "x", "nan", "sn", "w", "node", "l", "u", "cn", "nt", "q", "nn", "j", "network", "f", "m", "ln", "Ns", "ns", "b", "v", "t", "e", "dn", "ii", "nb", "an"], "k": ["km", "ke", "p", "g", "c", "dk", "y", "r", "h", "o", "ks", "kn", "z", "x", "mk", "kw", "w", "ko", "ak", "ok", "u", "d", "unk", "q", "ki", "j", "sk", "f", "m", "ku", "kind", "b", "key", "v", "e", "ik", "uk"]}}
{"code": "n,x=map(int,input().split())\\na=list(map(int,input().split()))\\nsum=0\\nans=1\\nfor i in range(n) :\\n    sum+=a[i]\\n    if sum <= x :\\n        ans+=1\\nprint(ans)", "target": "444", "substitutes": {"n": ["min", "s", "k", "p", "c", "y", "number", "o", "num", "h", "r", "size", "ne", "z", "nan", "w", "l", "u", "d", "nt", "max", "f", "network", "m", "ns", "b", "v", "e", "N", "t", "count", "an"], "x": ["s", "k", "X", "p", "g", "c", "xs", "xx", "y", "number", "h", "o", "ix", "num", "size", "z", "xxx", "index", "w", "l", "u", "d", "f", "ax", "m", "xi", "v", "b", "e", "t", "xes", "count", "xc"], "a": ["aa", "wa", "va", "p", "na", "ai", "c", "y", "ba", "mA", "ab", "au", "array", "ana", "A", "ar", "ia", "aaa", "ca", "sa", "ac", "asa", "m", "area", "am", "ae", "alpha", "b", "ea", "an", "ad"], "sum": ["ums", "ss", "aa", "mass", "sh", "span", "na", "otal", "gam", "num", "cum", "weight", "mean", "ann", "size", "si", "scale", "index", "can", "cost", "tan", "av", "ass", "max", "sk", "sa", "fat", "ac", "am", "shape", "amount", "su", "average", "alpha", "bin", "us", "count", "Sum", "add", "ul", "sam", "oss", "an", "um", "total"], "ans": ["ums", "s", "lan", "cas", "nas", "offs", "ras", "ams", "atan", "na", "ms", "anas", "AN", "ANS", "anes", "ks", "mean", "vs", "ann", "anon", "ani", "ays", "ana", "can", " means", "nan", "ars", "anus", "aned", "ons", "aus", "works", "leans", "cs", "sk", "ants", "ns", "ism", "acts", "len", " Ans", "ls", "ians", "ds", "oss", "an", "ins"], "i": ["gi", "k", "end", "qi", "p", "ai", "c", "y", "ix", "ini", "pos", "z", "si", "eni", "index", "yi", "ind", "start", "I", "l", "u", "d", "pi", "q", "j", "f", "m", "xi", "ni", "ip", "ci", "v", "b", "e", "col", "id", "zi", "li", "ii", "ti"]}}
{"code": "import math\\ns = input().split(\" \")\\nn = list(map(float,s))\\nd = math.sqrt((n[0]-n[2])**2 + (n[1]-n[3])**2)\\nprint(d)", "target": "196", "substitutes": {"s": ["ss", " p", "a", "strings", "python", "p", "ps", "ms", "g", "sys", "c", "i", " args", "sym", "o", "r", " x", "es", "S", "w", " signs", "l", "f", " functions", "m", "ns", " ns", " self", "gs", "b", " a", " parts", "ts", "e", "ls", " symbols", "se", "parse", " b"], "n": ["new", "min", "k", "non", "p", "na", "g", "c", "nm", "i", "o", "r", "y", "num", "number", "en", "names", "nu", "ne", "z", "fn", "x", "nan", "w", "node", "args", "l", "u", "nt", "nn", "max", "one", "f", "ln", "j", "m", "none", "ns", "no", "v", "b", "np", "t", "N", "e", "an", "nor"], "d": ["dd", "dy", "dh", "fd", "p", "nd", "g", "c", "i", "dat", "y", "r", "dict", "sd", "md", "D", "z", "da", "x", "dm", "gd", "l", "do", "f", "dl", "dt", "j", "m", "cd", "data", "b", "v", "e", "t", "pd", "ds", "dn", "vd"]}}
{"code": "n,x,y=map(int,input().split())\\nx,y=x-1,y-1\\nadj=[[float(\"inf\")]*n for i in range(n)]\\nadj[x][y]=adj[y][x]=1\\nfor i in range(n):\\n    for j in range(n):\\n        adj[i][j]=min(abs(i-j),abs(i-x)+1+abs(y-j),abs(i-y)+1+abs(y-j))\\nans=[0 for i in range(n)]\\nfor i in range(n-1):\\n    for j in range(i+1,n):\\n        ans[adj[i][j]]+=1\\nfor i in range(1,n):\\n    print(ans[i])", "target": "22", "substitutes": {"n": ["s", "k", "a", "p", "g", "c", "o", "r", "num", "h", "en", "nc", "net", "size", "nu", "ne", "z", "nan", "sn", "w", "ny", "l", "u", "d", "nt", "q", "nn", "f", "m", "network", "ns", "no", "ni", "v", "b", "t", "N", "e", "ii", "nb", "an"], "x": ["dx", "min", "k", "a", "int", "X", "p", "ic", "g", "c", "xs", "xx", "width", "h", "o", "ix", "left", "size", "z", "ex", "index", "w", "l", "u", "d", "pi", "one", "f", "ax", "m", "xi", "ya", "ci", "v", "b", "t", "e", "xy", "id", "ii"], "y": ["min", "s", "k", "a", "dy", "int", "ye", "p", "Y", "phi", "g", "c", "h", "yn", "o", "ay", "year", "z", "zy", "yi", "cy", "w", "ny", "l", "yt", "u", "d", "q", "f", "sy", "m", "ky", "yy", "ya", "oy", "type", "v", "b", "t", "e", "col", "py", "vy", "ii", "ry", "ey"], "adj": ["align", "part", "span", " span", "arr", "p", "nav", "ai", "acc", "pre", "bp", "gap", "dat", "adv", "prev", "app", "pos", "ads", " ass", "ijk", "ap", "attr", " gn", "ann", "conf", "ani", "z", "config", "div", "rev", "index", "diff", "ab", "bl", "gn", "inv", "ind", "w", "obj", "patch", "bb", "nn", "network", "ax", "jp", "ac", "ns", "pad", "aj", "breaks", "ni", "np", "order", "atom", "py", "prefix", "aug", "nb", "bi", "ad", "ins"], "i": ["gi", "ji", "k", "ui", "a", "ie", "int", "qi", "mi", "p", "phi", "ai", "c", "o", "ini", "ix", "iu", "api", "ti", "z", "si", "eni", "index", "yi", "image", "mu", "w", "ind", "I", "it", "l", "fi", "u", "pi", "d", "uri", "f", "io", "m", "xi", "ori", "di", "ni", "ci", "ip", "ij", "isi", "v", "b", "\u0438", "e", "t", "info", "zi", "id", "li", "ii", "bi"], "j": ["gi", "ji", "k", "a", "ie", "int", "ja", "p", "g", "c", "jo", "h", "jj", "o", "r", "ix", "jl", "z", "je", "yi", "ind", "start", "w", "l", "u", "uj", "d", "q", "one", "jp", "f", "m", "js", "job", "xi", "oj", "jc", "aj", "jam", "ij", "J", "v", "b", "e", "t", "py", "kj", "ii", "on"], "ans": ["s", "a", "ents", "span", "nas", "amps", "eps", "atan", "na", "ai", "xs", "ats", "Ann", "ions", "aps", "anas", "ads", "AN", "aos", "ANS", "ann", "anon", "ani", "anc", "ana", "can", " means", "nan", "An", "aned", "anz", "ons", "aus", "ens", "ants", " spans", "ns", "acs", "idents", "breaks", "os", "ls", "ang", "an", "ad", "ins"]}}
{"code": "from functools import reduce\\n\\nN = int(input())\\nA_list = list(map(int, input().split()))\\n\\nsums = [A_list[0]]\\n\\nfor i in range(1, N):\\n    sums.append(sums[i-1] + A_list[i])\\n\\nresult = 0\\nfor i in range(1, N):\\n    result += sums[i-1] * A_list[i]\\n\\nresult %= 10**9 + 7\\n\\nprint(result)\\n", "target": "198", "substitutes": {"N": ["F", "MN", "L", "V", "NN", "Q", "X", "Y", "Size", "NC", "Num", "NS", "NE", "NI", "K", "num", "O", "P", "T", "C", "B", "D", "Ne", "S", "A", "W", "I", " NS", "NT", "Z", "Ns", "U", " SN", "R", "M", " W", "NB", " Z", " n", " Ne", " ND", "NA", " D", " NI", " size", "n"], "A_list": ["A_type", "A_chain", "Mathppl", " A_source", "AXlist", "Mathpplists", " A_List", "AXint", "AJtype", "A2source", "A_source", "Applist", "AXdefault", "Appchain", "AJlist", "AJl", " A_int", "A_l", "Math_lists", "A_default", "A2list", "AXtype", "AEnlist", "Math_list", " A_l", " A_default", "AJpair", "Applists", "A2l", "Mathpplist", "A_pair", " AJpair", "A2List", "A_List", "Math_l", "AJint", "Mathppchain", "A_lists", " A_str", "Appl", "A_int", " A_pair", "AJdefault", " AJlist", "AJstr", " AJl", "AEnl", " A_type", "AEnList", " AJstr", "A_str", "AEnsource", "Math_chain"], "sums": ["ssum", " summies", "summies", "sumages", "Sims", " sqs", " sims", "samples", "subs", "sages", "ansals", " sum", " sages", "Samples", "seums", "sals", " sUM", "ansums", "sls", "seubs", "sesubs", "Sals", "sesUM", " sls", "sumamples", " sals", "Sums", "ansims", "sesums", "sUM", "Sages", "ansamples", "ssages", "seummies", " samples", "sqs", "ssqs", "ssums", "Sqs", " subs", "sesummies", "sims", "Sls", "Sum", "sumums", "sumls", "seUM", "sum"], "i": ["gi", "k", "ui", "a", "end", "ie", "int", "mi", "p", "ai", "c", "o", "y", "h", "ini", "ix", "iu", "ti", "z", "mini", "si", "index", "x", "ind", "start", "I", "uri", "l", "u", "pi", "d", "it", "j", "io", "f", "m", "xi", "di", "ci", "v", "b", "e", "info", "multi", "id", "li", "ii", "n", "bi", "ip"], "result": ["error", "cur", "value", "code", "ner", "cup", "default", "acc", "success", "err", "rate", "goal", "r", "number", "num", "instance", "results", "case", "knowledge", "size", "counter", "final", "array", "search", "diff", "winner", "Result", "runner", "math", "current", "answer", "catch", "max", "score", "row", "page", "f", "report", "function", "term", "mate", "rank", "output", "df", "data", "average", "match", "length", "alpha", "feature", "true", "count", "message", "grade", "range", "test", "sum"]}}
{"code": "n = int(input())\\nh = [int(x) for x in input().split()]\\ndp = [0]*n\\ndp[n-2] = abs(h[n-1]-h[n-2])\\n\\nfor i in range(n-3,-1,-1):\\n  dp[i] = min(dp[i+1]+abs(h[i]-h[i+1]),dp[i+2]+abs(h[i]-h[i+2]))\\n  \\nprint(dp[0])", "target": "5", "substitutes": {"n": ["min", "s", "k", "non", "p", "na", "c", "o", "nc", "num", "r", "net", "number", "y", "un", "en", "ne", "nu", "z", "fn", "sn", "w", "adj", "l", "cn", "d", "u", "nn", "nt", "max", "f", "j", "network", "m", "ns", "no", "ni", "b", "v", "np", "t", "N", "e", "pn", "all", "dn", "nb", "an", "nor"], "h": ["rh", "ih", "s", "hs", "k", "sh", "a", "H", "p", "g", "c", "host", "plus", "oh", "o", "y", "r", "ht", "ph", "hr", "html", "z", "ah", " H", "w", "body", "hh", "l", "bh", "u", "d", "q", "f", "j", "header", "m", "hd", "hi", "v", "b", "t", "e", "count", "hm", "hp"], "x": ["dx", "name", "int", "X", "p", "tx", "xs", "c", "xx", "fx", "y", "px", "ix", "z", "ex", "index", " xx", "xxx", "w", "cross", "l", "u", "d", "f", "ax", "m", "xi", "v", "key", "xp", "t", "e", "id"], "dp": ["lp", " p", "sh", "density", "dh", "uv", " tcp", "wp", "fd", "p", "dist", "ps", "distance", "pb", "fp", " DHCP", "DC", "gap", " DP", "sl", "tp", "pos", "cp", "gp", "P", "dep", "dB", "sp", "vp", "params", "video", "dm", "grad", "par", " subp", "d", "pi", "DP", "sup", "dl", "dt", "dq", "pp", "deb", "port", "dr", "dc", "df", "pkg", "di", "data", "db", "wd", "dim", "np", "pair", " cp", "pd", "ds", "dn", "hp", "direction", " df", "ip"], "i": ["gi", "ji", "s", "k", "ui", "end", "a", "ie", "int", "qi", "mi", "p", "phi", "ai", "init", "c", "oi", "y", "o", "ix", "ini", "iu", "ti", "z", "mini", "si", "index", "yi", "ind", "start", "I", "uri", "l", "fi", "u", "pi", "d", "it", "q", "j", "f", "io", "xi", "di", "ri", "ni", "ci", "hi", "v", "b", "my", "e", "info", "multi", "id", "li", "ii", "bi"]}}
{"code": "N = input()\\nfor n in N:\\n  if int(n) == 7:\\n    print('Yes')\\n    exit()\\nprint('No')", "target": "327", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "H", "Q", "Num", "NS", "NI", "K", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "A", "I", "No", "NT", "Ni", "Z", "Ns", "U", "R", "M", "J", "G", "NA"], "n": ["k", "int", "non", "p", "nd", "g", "c", "i", "y", "nc", "num", "o", "un", "pos", "number", "ne", "ng", "z", "index", "x", "sn", "ind", "node", "l", "u", "d", "nt", "nn", "j", "f", "m", "ns", "input", "no", "len", "b", "e", "all", "t", "id", "nb"]}}
{"code": "import sys\\n\\ndef solve():\\n    input = sys.stdin.readline\\n    N = int(input())\\n    seat =  0\\n    for _ in range(N):\\n        l, r = map(int, input().split())\\n        seat += r - l + 1\\n    print(seat)\\n        \\n\\n    return 0\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "720", "substitutes": {"input": ["error", "call", "int", "table", "reader", "request", "argument", "c", "element", "host", "socket", "load", "target", "result", "inf", "connect", "temp", "array", "index", "expression", "image", "exec", "everything", "accept", "out", "param", "eval", "sel", "output", "shape", "parent", "data", "Input", "single", "list", "view", "select", "session", "ul", "inner", "source", "config", "form", "feed", "n"], "N": ["F", "E", "NR", "L", "V", "NN", "NL", "X", "Y", "Size", "Num", "NI", "K", "O", "P", "T", "C", "B", "D", "S", "A", "W", "I", "NT", "Ni", "Z", "Ns", "R", "M", " n", "G", " Ne", " NI", "n"], "seat": ["ss", "ride", "escape", "value", "cas", "sex", "season", "service", "sed", "SE", "sl", "layout", "result", "section", "ape", "slice", "la", "split", "seed", "fare", "eat", "array", "scale", "ticket", "index", "route", "ee", "ace", "nn", "slave", "port", "half", "address", "area", "stop", "shape", "su", "data", "length", "match", "entry", "sea", "string", "fruit", "race", "ice", "se", "test", "offset"], "_": [" lines", " p", " arg", " block", " function", " get", " time", " __", "x", " loop", " mem", " lin"], "l": ["s", "k", "L", "line", " L", "p", "c", "i", "o", "sl", "el", "lr", "lc", "w", "u", "d", "pl", "ll", "ln", "f", "j", "lf", "m", "rl", "nl", "fl", "v", "b", "len", "e", "ls", "li", "lb", "n"], "r": ["s", "k", " R", "p", "g", "c", "i", "h", "o", "z", "x", "w", "u", "d", "q", "f", "right", "sr", "j", "m", "range", "rl", "ri", "R", "nr", "v", "b", "e", "ul", "rs", "n"]}}
{"code": "li = set(map(int,input().split()))\\nprint(len(li))", "target": "32", "substitutes": {"li": ["lp", "ol", "ie", "chi", "qi", "ai", "lie", "i", "sl", "lis", "la", "split", "lc", "jl", "ani", "kl", "si", "uli", "l", "Li", "ln", "dl", "sel", "lib", "cli", "di", "ni", "list", "lit", "ci", "lu", "len", "LI", "ls", "le", "py", "zi", "ii", "ul", "lists", "lo"]}}
{"code": "N = int(input())\\narr = list(map(int, input().split()))\\ncount = sum([ 1 for x in arr[::2] if x % 2 == 1])\\nprint(count)", "target": "126", "substitutes": {"N": ["F", "L", "X", "Y", "Num", "number", "nc", "O", "P", "B", "C", "D", "A", "I", "nn", "Node", "nt", "Ns", "Array", "no", "R", "M", " n", "G", "Index", "nb", "Count", "n"], "arr": ["int", "str", "err", "arc", "pr", "app", "rep", "iter", "attr", "coll", "ann", "div", "array", "att", "bl", "ar", "ind", "stack", "adj", "obj", "nt", "frac", "cat", "Array", "br", "resp", "list", "data", "batch", "py", "val", "feat", "abc", "ctr", "part", "test", "n"], "count": ["error", "call", "level", "cond", "c", "i", "number", "num", "app", "weight", "size", "array", "index", "cache", "ind", "nt", "catch", "found", "depth", "area", "list", "data", "length", "match", "type", "len", "base", "order", "add", "col", "id", "val", "test", "sum", "Count", "n"], "x": ["ox", "int", "code", "X", "p", "tx", "_", "c", "xs", "i", "xx", "g", "y", "rx", "px", " y", "ix", " tx", "z", "xt", "ex", "index", " xx", "w", "d", "nt", "j", "ax", " ax", "xi", "ct", " X", "xp", " cx", "xy", "xc", " index", "abc", "xa", "n"]}}
{"code": "l = [int(x) for x in raw_input().split()]\\nprint \"Yes\" if l[0] + l[1] >= l[2] else \"No\"", "target": "618", "substitutes": {"l": ["lp", "s", "ol", "L", "lin", "p", "g", "c", "ly", "i", "o", "r", "sl", "el", "ml", "lr", "la", "left", "lv", "lo", "lc", "long", "z", "kl", "u", "d", "pl", "ll", "ln", "dl", "f", "m", "rl", "list", "nl", "fl", "b", "v", "ell", "yl", "t", "ls", "e", "il", "li", "cl", "lb", "n"], "x": ["k", "int", "X", "p", "xs", "c", "i", "xx", "width", "y", "h", " text", "ix", "px", " y", " e", " i", " c", " v", " line", "z", " f", "ex", "index", " xx", "w", "wx", "u", " m", "f", " _", "ww", "input", " int", " X", "v", "e", "t", " n", "val", "xc", " u", "n"]}}
{"code": "N, T = map(int,input().split())\\nt = list(map(int,input().split()))\\nans = 0\\ns, e = 0, T\\nfor k in range(1,N):\\n    if e < t[k]:\\n        ans += e-s\\n        s = t[k]\\n        e = t[k] + T\\n    else:\\n        e = t[k] + T\\nans += e-s\\nprint(ans)\\n", "target": "355", "substitutes": {"N": ["F", "E", "L", "V", "Q", "X", "Y", "NS", "NE", "NI", "K", "o", "O", "P", "C", "B", "D", "Ne", "S", "I", "No", "NT", "Ni", "Z", "Ns", "ns", "R", "M", "J", " n", " Ne", "n"], "T": ["F", "E", "L", "V", "H", "Q", "X", "Y", "TA", "K", "IT", "TS", "TN", "TH", "O", "P", "B", "C", "D", "S", "A", "W", "Sl", "I", "NT", "TE", "TM", "Z", "TT", "U", "R", "M", "TF", "Ts", "G", "n"], "t": ["E", "a", "token", "table", "at", "int", "python", "tt", "to", "p", "g", "c", "i", "target", "y", "o", "tp", "r", "ot", "pt", "unt", "temp", "z", "x", "S", "l", "u", "d", "ta", "out", "dt", "f", "j", "m", "M", "ts", "v", "b", "type", "test", "n"], "ans": ["ss", "ees", "E", " es", "a", "ents", "les", "cas", "ins", "Es", "eps", "p", "na", "unes", "g", "zes", "o", "AN", "ANS", "anes", "ks", "asts", "ras", "ane", "esi", "aces", "ann", "ase", "ones", "si", "es", "x", "S", "A", " means", "asses", "aned", "ace", "ons", "ta", "aus", "ens", "cs", "ants", "acs", "ns", "types", "eds", "ases", "ae", "os", "ts", "ls", "ds", "ces", "oss", "an", "ies", "n"], "s": ["ss", "E", "sq", "a", "span", "p", "states", "g", "c", "sym", "i", "o", "y", "r", "h", "en", "sf", "inf", "z", "si", "es", "x", "S", "w", "start", "l", "u", "d", "ses", "q", "f", "sy", "sk", "m", "ns", "su", "os", "v", "b", "se", "an", "n"], "e": ["E", "end", "ie", "ze", "ei", "ed", "ke", "p", "est", "g", "c", "element", "i", "o", "r", "en", "y", "h", "ec", "el", "esi", "ne", "z", "edge", "oe", "es", "ce", "x", "l", "ee", "d", "u", "ace", "f", "j", "m", "te", "ae", "v", "b", "pe", "se", "er", "n"], "k": ["E", "kid", "ke", " z", " g", "p", "kh", "c", "i", " r", "g", "K", "o", "r", "y", "work", " c", "ijk", "ks", " f", "z", "kl", "x", "kw", " q", "kin", " K", "ko", "l", "u", "d", " E", "q", " m", "j", "sk", "f", " o", "m", "sync", " j", "ku", "kick", "kind", "tk", "v", "key", "b", "ck", "id", " u", "ik", " sk", "uk", "n"]}}
{"code": "n,k=map(int,input().split())\\nif n>2*k-2:\\n  print('YES')\\nelse:\\n  print('NO')\\n", "target": "624", "substitutes": {"n": [" N", "name", "p", "na", "c", "i", "o", "number", "nc", "num", "en", "net", "un", "ne", "z", "x", "l", "u", "d", "cn", "nn", "network", "f", "m", "none", "j", "ln", "ns", "v", "b", "len", "e", "N"], "k": ["km", "s", "p", "g", "c", "i", "dk", "K", "o", "num", "kk", "ks", "z", "x", "mk", "kw", "w", "ko", "l", "d", "unk", "max", "q", "j", "sk", "f", "m", "kick", "v", "b", "ck", "e", "N"]}}
{"code": "tochi=input()\\ns=[]\\nI=[]\\n\\nsum=0\\nn=len(tochi)\\nfor i in range(n):\\n    if tochi[i] == \"\\\\\":\\n        s.append(i)\\n    elif tochi[i] == \"/\" and s:\\n        j = s.pop()\\n        a = i - j\\n        sum += a\\n\t\\n        while I and I[-1][0] > j:\\n            a += I.pop()[1]\\n        I.append([j, a])\\n\\nprint(sum)\\nprint(len(I), *(a for j, a in I))\\n    \\n\\n", "target": "394", "substitutes": {"tochi": ["TOyi", "oichi", "toichi", "Tochi", " tolli", "toyi", "otochi", "toqi", " tocha", " toichi", "tocha", " toci", "toci", "TOqi", "TOlli", " toyi", " toch", "otolli", "atochi", "oqi", "och", "mocha", "atocha", "TOchi", "Toch", "otoch", "ochi", "toch", "tolli", "Toichi", "moci", "TOch", "mochi", "otoyi", "moqi", "atoqi", "atoci", " toqi", "Toqi", "otoqi"], "s": ["ss", "strings", "sh", "ins", "p", "ps", "g", "c", "xs", "ions", "sym", "sets", "Si", "o", "sl", "ims", "SI", "Su", "sp", "si", "es", "S", "w", "sb", "l", "parts", "u", "d", "services", "js", "f", "sa", " S", "ns", "ws", "os", "abs", "gs", "b", "v", "sing", "ings", "e", "t", "ls", "se", "ops"], "I": ["F", "PI", "E", "L", "ie", "It", "CI", "V", "chi", "Q", "X", "Is", "Y", "AI", "Si", "SI", "O", "P", "T", "B", "C", "D", "IJ", "IP", "API", "If", "si", "S", "A", "W", "Info", "Id", "Li", "IO", "Z", "II", "xi", "U", "Fi", "Pi", "J", "M", "LI", "N", "Xi", "G", "UI", "VI", "DI"], "sum": ["ss", "sh", " summ", "span", "chi", "p", "na", "ai", "ash", "h", "num", "sign", "mean", "size", "si", "scale", "index", "sim", "cost", "A", "av", "ass", "sha", "sa", "sort", "ac", " count", "am", "length", "alpha", "average", "summary", "v", "count", "Sum", "all", "add", "info", "se", "li", "sam", "parse", "um", "total"], "n": [" N", "k", " span", "p", "init", "g", "c", "o", "y", "nc", "num", "r", "h", "size", "ne", "z", "x", "nan", "w", "l", "d", "nn", "f", "m", "Ns", "ns", "ni", "nl", "spin", "len", "b", "t", "N", "count", "e", " spin", "nb"], "i": ["ji", "k", "ui", "ie", "int", "chi", "qi", "mi", "p", "ai", "c", "y", "ini", "iu", "z", "si", "index", "x", "ind", "l", "u", "d", "pi", "f", "m", "xi", "di", "hi", "ci", "ni", "b", "v", "e", "id", "li", "ii"], "j": ["ji", "k", "aa", "ie", "int", "ja", "qi", "p", "ai", "c", "jo", "y", "o", "jj", "r", "ijk", "jl", "z", "je", "si", "ch", "pa", "x", "ah", "ind", "start", "adj", "obj", "l", "u", "d", "uj", "q", "js", "jp", "f", "m", "sa", "oj", "job", "xi", "br", "aj", "length", "ij", "J", "b", "v", "key", "t", "e", "part"], "a": ["aa", "wa", "va", "ma", "ja", "p", "na", "ai", "c", "aw", "fa", "y", "la", "ba", "mA", "ab", "z", "au", "ana", "da", "pa", "A", "ah", "ar", "ia", "ak", "u", "sha", "ta", "aaa", "sa", "ca", "ac", "ga", "f", "area", "am", "aj", "ae", "oa", "alpha", "b", "ea", "e", "an", "ad"]}}
{"code": "s = input()+\"2\"\\nk = int(input())\\n\\nfor i,j in enumerate(s):\\n    if j != \"1\":\\n        now = i\\n        break\\n\\nif s == \"1\"*len(s):\\n    print(1)\\nelse:\\n    if k-1 < now:\\n        print(1)\\n    else:\\n        print(s[now])", "target": "119", "substitutes": {"s": ["new", "sq", "strings", "a", "south", "ins", "words", "ans", "states", "p", "ps", "xs", "c", "sets", "y", "o", "ks", "si", "es", "S", "sb", "cells", "tests", "args", "l", "lines", "parts", "ses", "d", "services", "sg", "items", "js", "f", "cs", "m", "ns", "input", "seconds", "os", "data", "features", "gs", "b", "v", "string", "letters", "e", "ls", "keys", "ds", "sv", "banks", "n"], "k": ["p", "g", "c", "K", "y", "r", "o", "kk", "kg", "ks", "kn", "z", "x", "mk", "w", "ak", "ok", "u", "d", "unk", "q", "ki", "sk", "f", "yk", "m", "ek", "self", "v", "b", "key", "e", "ik", "uk", "n"], "i": ["ji", "int", "p", "ai", "c", "o", "y", "iu", "si", "index", "yi", "x", "ind", "start", "I", "it", "l", "u", "pi", "d", "ki", "f", "m", "xi", "di", "ci", "ij", "ip", "v", "key", "e", "info", "id", "li", "ii", "bi", "n"], "j": ["ji", "sh", "ie", "ja", "p", "g", "c", "y", "r", "dj", "o", "im", "jj", "z", "je", "si", "x", "ind", "obj", "l", "u", "q", "jp", "f", "m", "oj", "sw", " si", "ij", "J", "ct", "v", "b", "bj", " ii", "e", "kj", "li", "n"], "now": ["new", "ie", "NOW", "low", "hack", "since", "iq", "wh", "tmp", "this", "we", "kg", "link", "force", "size", "x", "node", "kw", "w", "current", "ko", "get", "pack", "ok", "max", "shift", "wait", "nw", "sw", "old", "self", "age", "kick", "Now", "ski", "check", "day", "stuff", "no", "key", "ow", "today", "ck", "order", "count", "mm", "step", "where", "next", "draw", "here", "info"]}}
{"code": "def resolve():\\n    inp = input()\\n\\n    c0 = inp.count('0')\\n    c1 = inp.count('1')\\n\\n    print(min(c0, c1)*2)\\n\\nresolve()", "target": "40", "substitutes": {"inp": ["Inc", "axP", "conP", "linc", "Inp", " inc", " inl", "inps", "conl", "InP", "Inlp", "axl", " inP", "inc", "axc", "inl", "inP", "Inps", "inlp", "linP", " inps", "conp", "axp", "linp", "linlp", " inlp", "conps", "axps"], "c0": [" c6", "C0", "lc1", "C6", "c5", "C5", "lc5", "dc1", "dc6", "C00", "C1", "c00", " c5", "dc0", " c00", "lc0", "c6", "dc00", "lc00"], "c1": ["C81", "fOne", "C0", "c81", "p81", "f2", " c2", "cOne", "p0", "COne", "C1", "p1", "C2", "p2", " c81", "f1", " cOne", "c2", "f0"]}}
{"code": "i=0\\nwhile True:\\n    N=int(input())\\n    if N==0:\\n        break\\n    else:\\n        a = list(map(float,input().split()))\\n        m=sum(a)/N\\n        #print(m)\\n        for i in range(N):\\n            a[i]=(float)(a[i]-m)**2\\n            #print(a[i])\\n            i+=1\\n        \\n        A=(sum(a)/N)**(1/2)\\n        print(A)\\n        \\n", "target": "683", "substitutes": {"i": ["chi", "mi", "p", "init", "ai", "c", "o", "r", "ini", "num", "si", "mu", "I", "it", "u", "pi", "j", "io", "f", "ri", "ni", "e", "info", "multi", "li", "inner", "bi", "ti"], "N": ["F", "Nin", "MN", "E", "Number", "L", "V", "NL", "Q", "X", "Sn", "Y", "Size", "NC", "Num", "NS", "K", "NM", "O", "P", "Len", "C", "B", "D", "T", "Ne", "S", "A", "W", "I", "No", "NT", "Ni", "Ns", "ND", "U", "R", "Mi", "M", "J", "NB", "Sum", "SN", "G", " n", "NA", "Mo", "n"], "a": ["aa", "wa", "va", "ma", "p", "ai", "c", "ama", "fa", "o", "Na", "y", "mA", "ab", "au", "array", "ana", "da", "x", "A", "w", "ia", "f", "ca", "sa", "ac", "area", "aux", "am", "input", "ae", "data", "alpha", "b", "ea", "all", "an", "sum", "n"], "m": ["mass", " M", "ma", "mi", "p", "ms", "g", "c", "mult", "y", "r", "o", "h", "mA", "z", "mu", "w", "cm", "l", "d", "f", "am", "M", "b", "e", "mm", "Am", "mc"]}}
{"code": "h,w=map(int,input().split())\\nhw=[[]]\\nans=[]\\nfor i in range(h):\\n    ht=[0]+list(map(int,input().split()))\\n    hw.append(ht)\\nfor i in range(1,h+1):\\n    for j in range(1,w):\\n        if hw[i][j]%2==1:\\n            ans.append([i,j,i,j+1])\\n            hw[i][j+1]+=1\\n\\nfor k in range(1,h):\\n    \\n    if hw[k][-1]%2==1:\\n        ans.append([k,w,k+1,w])\\n        hw[k+1][-1]+=1\\nprint(len(ans))\\nfor i in ans:\\n    for j in range(len(i)):\\n        i[j]=str(i[j])\\n    print(\" \".join(i))", "target": "605", "substitutes": {"h": ["rh", "hs", "s", "end", "sh", "H", "p", "c", "host", "oh", "gh", "y", "o", "r", "wh", "ph", "z", "x", "hh", "l", "bh", "u", "th", "q", "hop", "f", "m", "ww", "sw", "hd", "hi", "v", "b", "t", "e", "hm", "hp", "n"], "w": ["s", "wa", "a", "wt", "p", "c", "width", "rw", "y", "fw", "we", "wb", "wh", "z", "x", "ew", "W", "l", "wx", "u", "d", "max", "q", "f", "m", "nw", "sw", "ww", "ws", "wan", "wl", "wd", "v", "b", "e", "wall", "n"], "hw": ["rh", "holes", "wn", "web", "wa", "wp", "wcs", "rw", "gh", "fw", "work", "hard", "esh", "how", "we", "wb", "wei", "lv", "grid", "gpu", " HW", "zh", "yi", "wy", "ew", "nv", "history", "kw", "witz", "igh", "inventory", "wx", "hhh", "www", "u", "HH", "nw", "sw", "ww", "wire", "haw", "ws", "wo", "wl", "wd", "v", "ow", "uh", "wu", "hm", "iw", "wm", "qq", "ii", "hp", "vg", "wk"], "ans": ["s", "a", "lan", "span", "nas", "eps", "p", "na", "ai", "xs", "ms", "ats", "aning", "AN", "ANS", "anes", "ks", "ane", "vs", "ann", "anon", "anc", "ani", "ase", "ana", "ays", "can", "x", "aned", "chan", "lines", "nn", "ons", "aus", "atts", "anne", "ln", "sk", "cs", "ki", "ens", "acs", "ns", "ws", "ases", "os", "actions", "ls", "olds", "cons", "ians", "ds", "oss", "an", "ins"], "i": ["gi", "ji", "s", "ui", "a", "ie", "int", "ei", "chi", "qi", "p", "phi", "ai", "ic", "c", "o", "y", "ini", "im", "iu", "api", "z", "si", "index", "yi", "x", "ind", "I", "ia", "it", "l", "uri", "u", "pi", "d", "ki", "io", "f", "ir", "xi", "di", "hi", "ci", "ij", "ni", "v", "b", "e", "info", "iw", "id", "li", "ii", "ik", "n", "bi", "ip"], "ht": ["rh", "hs", "ih", "hart", "aff", "sh", "hy", "gh", "fw", "hard", "bn", "wh", "gp", "cz", "kn", "att", "zh", "hat", "conn", "bh", "cn", "ctx", "nn", "gt", "nw", "hd", "kt", "haw", "ich", "hi", "wd", "hl", "uh", "ha", "hm", "iw", "det", "mot", "hp"], "j": ["ji", "name", "vi", "ui", "jing", "a", "sh", "ie", "ja", "qi", "p", "jen", "c", "jo", "y", "jj", "o", "ix", "im", "dj", "ijk", "el", "jit", "jl", "z", "si", "ch", "index", "x", "jet", "ah", "ind", "adj", "obj", "l", "u", "uj", "d", "q", "js", "jp", "f", "m", "jc", "oj", "job", "aj", "di", "ij", "J", "v", "b", "key", "bj", "e", "id", "kj", "li", "ii", "part", "n"], "k": ["s", "kil", "sh", "ke", "p", "g", "c", "K", "work", "y", "o", "kk", "kg", "ks", "ph", "kn", "z", "ch", "x", "mk", "kw", "kin", "ak", "l", "ok", "u", "d", "th", "q", "ki", "sk", "f", "ky", "kick", "v", "key", "b", "ck", "e", "kr", "ik", "n", "uk", "wk"]}}
{"code": "import sys\\ndef input():\\n    return sys.stdin.readline()[:-1]\\nN,M=map(int,input().split())\\nsys.setrecursionlimit(200000)\\nb=[tuple(map(lambda x: int(x)-1, input().split())) for i in range(M)]\\nclass uf:\\n    def __init__(self,n):\\n        self.n=n\\n        self.l=[-1]*n\\n    def ro(self,n):         #root\\n        if self.l[n]<0:\\n            return n\\n        r=self.ro(self.l[n])\\n        self.l[n]=r\\n        return r\\n    def me(self,a,b):       #merge\\n        ra=self.ro(a)\\n        rb=self.ro(b)\\n        if self.l[ra]>self.l[rb]:\\n            ra,rb=rb,ra\\n        if ra!=rb:\\n            self.l[ra]+=self.l[rb]\\n            self.l[rb]=ra\\n    def size(self,n):\\n        return -self.l[self.ro(n)]\\n    def sa(self,a,b):       #same\\n        return self.ro(a)==self.ro(b)\\n    def rl(self):           #roots list\\n        return [i for i,v in enumerate(self.l) if v<0]\\n    \\n    def len(self):          #len(roots)\\n        return len(self.rl())\\n    def ul(self):\\n        d={n:i for i,n in enumerate(self.rl())}\\n        m=[[]for i in range(self.len())]\\n        for i in range(self.n):\\n            m[d[self.ro(i)]].append(i)\\n        return m\\n    def __str__(self):\\n        return f\"{self.ul()}\"\\nl=[0]*M\\ns=uf(N)\\nh=N*(N-1)//2\\nfor i in range(M-1,-1,-1):\\n    l[i]=h\\n    if s.ro(b[i][0])!=s.ro(b[i][1]):\\n        h-=s.size(b[i][0])*s.size(b[i][1])\\n        s.me(b[i][0],b[i][1])\\nprint(*l,sep=\"\\n\")", "target": "287", "substitutes": {"N": ["F", "E", "L", "V", "X", "Y", "Num", "NS", "K", "NM", "O", "P", "T", "C", "B", "D", "S", "A", "I", "Ni", "m", "Ns", "R", "J", "G"], "M": ["F", "MN", "E", "L", "V", "Q", "X", "Y", "MI", "K", "DM", "RM", "NM", "O", "P", "T", "C", "B", "D", "LM", "S", "W", "I", "MB", "Z", "m", "MC", "U", "R", "J", "MF", "MT", "G", "MO"], "b": ["a", "ib", "p", "bs", "g", "c", " B", "r", "B", "ba", "ab", "body", "sb", "cb", "nb", "ob", "bb", "rb", "buffer", "binary", "func", "base", "e", "bc", "t", "block", "bi"], "i": ["gi", "k", "X", "p", "c", " I", "o", "y", "ix", "num", "z", "index", "ind", " il", "I", "u", "d", "io", "j", "f", "xi", " ii", "e", "id", "bit", "ip"], "self": ["s", "k", "Self", "full", "error", "name", "part", "method", "p", "_", "c", "g", "plus", "sys", "o", "r", "h", "work", "instance", "pos", "client", "this", "config", "z", "ng", "cost", "misc", "x", "w", "node", "user", "obj", "args", "ctx", "u", "ok", "max", "q", "f", "object", "j", "none", "resp", "parent", "no", "data", "os", "func", "np", "e", "t", "all", "cl", "er", "home"], "n": ["s", "k", "name", "L", "ner", "p", "init", "g", "c", "y", "o", "nc", "num", "r", "un", "net", "log", "rn", "size", "nu", "ne", "z", "fn", "x", "sn", "w", "node", "u", "d", "nt", "nn", "max", "j", "ln", "f", "m", "Ns", "ns", "no", "ni", "v", "len", "np", "t", "e", "nb"], "l": ["lp", "ol", "L", "p", "g", "c", "o", "r", "left", "la", "z", "u", "d", "ll", "q", "f", "j", "m", "nl", "length", "v", "len", "e", "ls", "li"]}}
{"code": "r, g, b, n = map(int, input().split())\\ncnt = 0\\n\\nfor i in range(n + 1):\\n    for j in range(n + 1):\\n        tmp = n - i * r  - j * g\\n        if 0 <= tmp and tmp % b == 0:\\n            cnt += 1\\nprint(cnt)", "target": "315", "substitutes": {"r": ["s", "k", "a", "ur", "p", "c", "y", "h", "o", "z", "x", "w", "l", "u", "d", "rb", "q", "f", "sr", "m", "ir", "rg", "R", "v", "e", "t", "ru", "rs"], "g": ["s", "k", "group", "a", "p", "arg", "c", "gh", "y", "h", "gr", "ig", "z", "x", "gn", "w", "l", "u", "d", "q", "gg", "f", "m", "ga", "rg", "gs", "v", "e", "G"], "b": ["k", "a", "ib", "fb", "p", "bs", "c", "y", "o", "h", "wb", "bis", "beta", "B", "ab", "z", "x", "w", "sb", "l", "ob", "rb", "d", "u", "bb", "f", "m", "v", "e", "bc", "nb", "bi"], "n": ["s", "k", "p", "c", "y", "nc", "num", "o", "net", "h", "number", "size", "ne", "z", "x", "sn", "w", "node", "l", "u", "d", "nt", "f", "network", "m", "ns", "nr", "v", "t", "N", "e", "nb"], "cnt": ["cNT", "dcNT", "dcno", "CNT", "dcnt", " crt", "fnt", " cNT", " cct", "cct", "crt", "fct", "fount", "Cnt", " cno", "nct", "dcount", "Cno", "nrt", "nount", "nnt", "cno", " count", "Crt", "count", "Cct", "fno", "Count"], "i": ["k", "a", "int", "p", "ai", "c", "o", "y", "h", "ini", "ig", "z", "si", "x", "ind", "I", "l", "u", "d", "pi", "q", "f", "io", "m", "ir", "ci", "v", "e", "id", "li", "ii", "bi"], "j": ["ji", "k", "a", "ja", "p", " dj", "c", "h", "jj", "o", "y", "jl", "z", "je", "x", "w", "l", "u", "d", "q", "jp", "f", "m", "jc", "jam", "ij", "J", "v", " ii", "e", "t"], "tmp": ["amp", "cmp", "a", "const", "int", "elt", "fb", "p", "pre", "bp", "img", "c", "nm", "kk", "cp", "wb", "beta", "txt", "sp", "emp", "temp", "proc", "mp", "nom", "now", "sb", "cb", "start", "buff", "bt", "obj", "nb", "ob", "bb", "rb", "nn", "abb", "ff", "sup", "m", "pp", "Temp", "pad", "data", "stuff", "v", "np", "fake", "t", "pot", "mm", "bg", "config", "test"]}}
{"code": "n = input()\\nprint \"\",\\nfor i in range(1,n+1):\\n\tif i % 3 ==0:\\n\t\tprint str(i),\\n\telse:\\n\t\tj = i\\n\t\twhile(j > 0):\\n\t\t\tif(j%10==3):\\n\t\t\t\tprint str(i),\\n\t\t\t\tbreak;\\n\t\t\tj = j/10", "target": "514", "substitutes": {"n": ["k", "p", "g", "c", "o", "number", "y", "num", "nc", "h", "r", "ne", "nu", "z", "fn", "x", "w", "adj", "l", "u", "d", "nt", "f", "network", "m", "ns", "ni", "b", "e", "N", "t", "nb"], "i": ["ji", "k", "ui", "a", "ie", "int", "p", "phi", "ai", "c", "oi", "o", "y", "jj", "ini", "iu", "ti", "z", "mini", "si", "index", "x", "yi", "ind", "start", "I", "uri", "l", "u", "pi", "d", "f", "jp", "m", "xi", "input", "di", "ni", "ci", "ip", "b", "v", "e", "id", "li", "ii", "bi"], "j": ["ji", "k", "jing", "dy", "ie", "ja", "qi", "p", "c", "jo", "y", "o", "jj", "dj", "jl", "z", "jet", "index", "ind", "adj", "obj", "l", "d", "uj", "q", "job", "jp", "f", "js", "m", "jc", "note", "json", "oj", "aj", "length", "ij", "J", "b", "v", "e", "t", "jon", "kj", "li", "next"]}}
{"code": "#! /usr/local/bin/python3\\n# coding: utf-8\\n\\ndef insertion_sort(a):\\n    for i in range(1, len(a)):\\n        print(\" \".join(map(str, a)))\\n        w = a[i]\\n        j = i - 1\\n        while j >= 0 and w < a[j]:\\n            a[j + 1] = a[j]\\n            j -= 1\\n        a[j + 1] = w\\n\\nn = int(input())\\na = [int(i) for i in input().split()]\\ninsertion_sort(a)\\nprint(\" \".join(map(str, a)))\\n", "target": "217", "substitutes": {}}
{"code": "def resolve():\\n\ts = input()\\n\tprint('Yes' if s[0] == s[-1] else 'No')\\nresolve()", "target": "289", "substitutes": {"s": ["ss", "a", "strings", "qs", "ins", "ans", "p", "states", "ps", "g", "c", "xs", "i", "sym", "sets", "o", "r", "results", "ads", "si", "es", "params", "S", "sb", "tests", "args", "l", "parts", "ses", "d", "u", "lines", "sg", "services", "f", "m", "su", "abs", "ts", "b", "v", "string", "e", "t", "ls", "ds", "sv", "n"]}}
{"code": "def main():\\n    n,k=map(int,input().split())\\n    x=k-1\\n    for i in range(1,n):\\n        k*=x\\n    print(k)\\n    \\nmain()\\n", "target": "582", "substitutes": {"n": ["min", "p", "g", "c", "y", "o", "nc", "num", "z", "index", "w", "l", "u", "d", "nn", "max", "q", "f", "j", "network", "m", "ns", "v", "b", "np", "e", "N", "t"], "k": ["km", "ke", "X", "p", "g", "c", "K", "y", "o", "num", "kk", "ks", "kn", "z", "index", "mk", "kw", "w", "kin", "ko", "l", "ok", "d", "max", "q", "unk", "f", "sk", "j", "m", "ku", "kick", "check", "v", "key", "ck", "e", "id", "ik"], "x": ["dx", "a", "int", "X", "p", "xs", "c", "xx", "y", "rx", "ix", "px", "z", "ex", "index", "xxx", "w", "l", "u", "d", "max", "q", "f", "ax", "m", "xi", "check", "v", "xp", "e", "xy", "id", "xc"], "i": ["gi", "c", "o", "y", "h", "ix", "r", "iu", "z", "index", "ind", "w", "I", "it", "u", "d", "q", "j", "f", "xi", "v", "xp", "e", "col", "id", "ik", "ip"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nMOD = 10 ** 9 + 7\\nINF = float('INF')\\nsys.setrecursionlimit(10 ** 5)\\n\\n\\ndef main():\\n    a, b = map(int, readline().split())\\n\\n    print(str(min(a, b)) * max(a, b))\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "69", "substitutes": {"readline": ["playlines", "READLine", "READline", "readlink", "ReadLine", "Readlink", "loadstring", "readingspace", "loadLine", "readLine", "Readwrite", "Readline", "playlog", "loadline", "readlines", " readlog", "readwrite", "readingline", "READlog", "readingstring", "readstring", "loadwrite", " readstring", " readlines", " readwrite", "playline", " readlink", " readLine", "loadspace", "READlines", "readlog", "loadlink", " readspace", "playLine", "readspace", "readingLine"], "MOD": ["F", " M", " L", " LOG", " function", " func", " buffer", " mod", " format", " CR", " f", " C", " options", "SIZE", "MIN", " log", "MAX", " MAX", " module", "func", " fix", " INT", "mod", " const", " magic", " default", "Mod"], "INF": ["CONI", "ACFER", "INFER", " INFER", "INI", "INMF", "CONFER", "ACMF", "CONF", " INMF", "ACI", " INI", "CONMF", "ACF"], "a": ["aa", "s", "auto", "sta", "int", "va", "p", "qa", "aka", "aw", "c", "i", "ama", "fa", "y", "r", "la", "ba", "ab", "au", "da", "x", "A", "w", "l", "u", "d", "f", "ca", "sa", "ac", "ga", "area", "aux", "input", "am", "aj", "data", "ae", "oa", "ea", "e", "an", "ad", "n"], "b": ["s", "aa", "be", "ib", "fb", "p", "bs", "c", "i", " B", "y", "r", "h", "wb", "B", "ba", "ab", "A", "w", "sb", "l", "bb", "d", "bf", "rb", "abb", "f", "eb", "br", "data", "db", "batch", "v", "base", "e", "nb", "lb", "bi", "n"]}}
{"code": "N,M = map(int,input().split())\\n\\nglaf = [[] for i in range(N)]\\n\\nfor i in range(M):\\n    a,b = map(int,input().split())\\n    a=a-1\\n    b=b-1\\n    glaf[a].append(b)\\n    glaf[b].append(a)\\n    \\nfor i in glaf:\\n    cnt =0\\n    for j in i:\\n        cnt+=1\\n    \\n    print(cnt)", "target": "180", "substitutes": {"N": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "Size", "Num", "NS", "K", "O", "P", "B", "T", "C", "D", "Len", "Ne", "S", "A", "W", "I", "NT", "Z", "Ns", "U", "R", " n", "NA", "Mo", "NUM", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "MO", "K", "NM", "Multiple", "O", "P", "B", "T", "C", "D", "LM", "MD", "MQ", "S", "A", "W", "I", "Ma", "Z", "m", "U", "R", "MU", "G", "Mo"], "glaf": [" glaff", " glaw", "blaff", "galaf", "GLaf", "GLab", "Glaf", "gaff", "gap", "Glaff", "flap", "blaf", "flaff", " glab", "glab", " glah", "galfa", "GLaff", "GlAF", "flab", "Glac", "glAF", "glfa", " glAF", "GLah", "glaff", "Glab", "galaw", "galaff", " glac", " glap", "blAF", "Glaw", "gab", "gaf", "glah", "glac", "flaf", "glap", "Glah", "blac", "glaw", "Glfa", " glfa"], "i": ["gi", "ji", "ui", "ie", "ei", "ib", "int", "qi", "p", "ai", "ic", "c", " I", "oi", "o", "gu", "ini", "iq", "iu", "ti", "z", "si", "x", "ind", "I", "it", "l", "u", "pi", "io", "f", "xi", "di", "ni", "iy", "ij", "ci", "v", "e", "id", "li", "ii", "ik", "n", "bi", "ip"], "a": ["aa", "s", "int", "va", "p", "ai", "c", "aw", "ama", "fa", "y", "r", "o", "api", "ba", "ab", "au", "AA", "da", "x", "A", "af", "w", "ak", "l", "u", "d", "aaa", "f", "sa", "ca", "ac", "ga", "asa", "m", "am", "aj", "ae", "oa", "alpha", "e", "an", "ad", "n"], "b": ["s", "aa", "be", "k", "bur", "fb", "p", "bs", "c", "y", "r", "o", "wb", "mb", "beta", "bis", "B", "ba", "ab", "z", "x", "A", "w", "sb", "l", "bh", "bb", "d", "bf", "u", "rb", "ben", "abb", "f", "eb", "m", "bot", "db", "v", "base", "e", "nb", "lb", "bi", "n"], "cnt": ["ecrt", "currt", "acount", "conount", "Ccount", "cnc", "acnd", " crt", " cct", "cct", "crt", "ccount", "lcnc", "connt", "lcrt", "acnt", "curnd", "Cnt", "curnt", "ecount", "Cnc", "ecnt", "account", "curount", "lccount", " count", "lcnt", "acnc", "ecnd", "lcct", "acct", "conrt", "conct", "count", "Cct", "cnd", "acrt", "lcount"], "j": ["gi", "ji", "k", "ib", "p", "ai", "g", "jo", "r", "num", "im", "of", "iq", "gr", "el", "z", "x", "ind", "uj", "oj", "ait", "ij", "ct", "id", "li", "ii", " d", "ip"]}}
{"code": "marks='SHCD'\\nn=input()\\ncard=[raw_input().split() for _ in range(n)]\\nm={}\\nfor mk,rk in card:\\n    m.setdefault(mk,[0]*14)\\n    m[mk][int(rk)]=1\\nfor i in range(len(m)):\\n    k=marks[i]\\n    v=m[k]\\n    for j in range(1,14):\\n        if not v[j]: print k,j", "target": "628", "substitutes": {"marks": ["points", "magic", " markings", "strings", "mn", "marked", "settings", "groups", "shows", "na", "pages", "ms", "papers", "rows", "bands", "sets", "cases", "times", "md", "values", "ks", "vs", "names", "measures", "params", "orders", "history", "series", "apes", "tags", "arks", "lines", "metadata", "flags", "ns", "anners", "types", "days", "shape", "mask", "breaks", "features", "reads", "rem", "actions", "notes", "mark", "ips", "changes", "comments"], "n": ["p", "g", "nm", "c", "o", "number", "nc", "r", "num", "y", "rn", "ne", "z", "x", "w", "l", "cn", "d", "nn", "f", "ns", "M", "b", "np", "e", "N", "nb", "nor"], "card": [" cards", "end", "group", "cycle", "c", "arc", "center", "number", "nc", "num", "cards", "comment", "cont", "coll", "central", "cle", "array", "board", "index", "can", "x", "ard", "node", "cart", "cm", "member", "core", "man", "cd", "sequence", "Card", "shape", "day", "list", "custom", "mark", "cell", "id"], "_": [" id", " seq", " time", " name", "x", " un", "out", "f", "all", "ip"], "m": ["s", "a", "mr", "rm", "mi", "p", "ms", "g", "c", "o", "r", "h", "y", "pm", "ym", "md", "mas", "mean", "fm", "x", "module", "dm", "w", "cm", "l", "machine", "u", "d", "mand", "f", "sm", "bm", "man", "M", "b", "e", "mark", "mm", "gm", "hm", "mc", "wm", "an"], "mk": ["km", "mr", "ink", "kid", "mn", "ikk", "ke", "c", "dk", "kk", "cp", "ijk", "md", "rik", "rn", "kg", "kn", "ak", "ask", "ok", "u", "make", "unk", "ark", "mand", "ki", "sk", "ky", "pp", "ek", "kt", "ku", "kick", "tk", "key", "ck", "ike", "mark", "kr", "mot", "mc", "ik", "uk", "sky", "wk"], "rk": ["rck", " rck", "pck", "pk", "rkr", " rkk", "Rks", "Rkk", "rrks", "pks", "rrk", "Rku", "rku", "rks", "srks", "srkk", "pkr", " rks", "Rk", " rkr", "srku", " rku", "srk", "rrkr", "rrck", "rkk"], "int": ["float", "min", "digit", "str", "inter", "ints", "number", "num", "iter", "Int", "index", "oct", "ind", "uint", "integer", "max", "nt", "object", "set", "list", "bin", "key", "count", "inet", "id", "double", "range", "next"], "i": ["ji", "a", "ie", "qi", "p", "ai", "c", "r", "jj", "ix", "ini", "ijk", "iq", "jl", "z", "si", "x", "ind", "I", "l", "u", "d", "pi", "q", "ki", "jp", "f", "ir", "xi", "ni", "ci", "ij", "key", "b", "id", "kj", "qq", "ii", "li", "ik", "ip"], "k": ["km", "kid", "ke", "p", "g", "c", "dk", "K", "y", "o", "h", "kk", "ijk", "kg", "ks", "kn", "z", "x", "w", "ko", "ak", "ok", "u", "d", "q", "ki", "sk", "f", "ky", "ek", "ku", "kick", "tk", "key", "b", "ck", "e", "kr", "id", "ik", "uk"], "v": ["vi", "uv", "V", "va", "p", "g", "c", "y", "o", "r", "h", "lv", "vs", "z", "nv", "vm", "cv", "w", "l", "u", "vert", "f", "vv", "b", "t", "sv", "val", "ev", "ii", "vd"], "j": ["ji", "ja", "p", "h", "r", "jj", "y", "o", "dj", "ijk", "jl", "z", "jan", "rev", "ch", "x", "ind", "obj", "l", "u", "uj", "d", "q", "jp", "f", "oj", "jam", "ij", "J", "bj", "b", "key", "e", "kj", "li", "ii", " l"]}}
{"code": "a,b=input().split()\\na=int(a)\\nb=int(b)\\nprint(int(a+b/2))", "target": "668", "substitutes": {"a": ["aa", "s", "auto", "va", "p", "na", "ai", "aka", "aw", "c", "ama", "i", "fa", "y", "api", "la", "ba", "mA", "ab", "au", "art", "da", "x", "pa", "A", "ia", "l", "d", "aaa", "ca", "sa", "f", "asa", "ac", " A", "ga", "area", "aj", "am", "input", "ae", "alpha", "ea", "e", "abc", "an", "ad", "n"], "b": ["aa", "s", "k", "ib", "fb", "p", "bs", "pb", "c", "i", "y", "r", "emb", "wb", "mb", "zb", "beta", "B", "ba", "bis", "ab", "x", "w", "sb", "cb", "l", "ob", "bb", "d", "rb", "bf", "abb", "f", "eb", "bd", "xb", "db", "v", "base", "e", "bc", "nb", "lb", "bi", "n"]}}
{"code": "N = int(input())\\nseat = ['?' for _ in range(N+1)]\\nleft = 0\\nright = N\\nfor i in range(20):\\n  if i == 0:\\n    output = 0\\n  elif i == 1:\\n    output = (N-1)//2\\n  else:\\n    output = (right + left)//2\\n  print(output)\\n    \\n  s = input()\\n  if s == 'Vacant':\\n    exit()\\n  seat[output] = s\\n  if i == 0:\\n    seat[N] = s\\n  #print(seat)\\n  if ((right + output) % 2 == 0 and seat[right] != seat[output]) or ((right + output) % 2 == 1 and seat[right] == seat[output]):\\n    left = output\\n  else:\\n    right = output\\n", "target": "344", "substitutes": {"N": ["F", "Network", "E", "L", "V", "NN", "NL", "H", "Q", "X", "Y", "Size", "NS", "NE", "NI", "K", "NW", "O", "P", "T", "C", "B", "Len", "D", "Ne", "S", "A", "I", "Right", "Output", "No", "NT", "RN", "Node", "Ni", "Z", "network", "Ns", "II", "R", "M", "NB", "OUT", " n", "G", "NA", "n"], "seat": ["trip", "letter", "group", "company", "driver", "sex", "service", "event", "season", "study", "socket", "sl", "layout", "case", "result", "future", "office", "section", "split", "seed", "facebook", "fare", "server", "ticket", "index", "route", "child", "row", "slave", "report", "page", "network", "ssl", "port", "stop", "address", "input", "shape", "su", "data", "suit", "nel", "se", "exit", "config", "test", "feed"], "_": ["int", "ing", "en", "x", "l", "v", "e", "an"], "left": ["L", "leave", "line", "NL", "low", "o", "Left", "write", "ne", "second", "index", "ind", "l", "pl", "out", "ln", "j", "old", "nl", "length", "ell", "lt", "all", "cell", "inner", "inline", "next", "offset", "n"], "right": ["rh", "k", "end", "rights", "third", "X", "correct", "r", "work", "case", "results", "office", "ng", "cost", "x", "reverse", "Right", "d", "row", "out", "wrong", "three", "one", "self", "input", " Right", "R", "inner", "n"], "i": ["ui", "a", "ie", "int", "at", "chi", "qi", "p", "ai", "g", "c", " I", "oi", "o", "y", "ini", "iq", "iu", "ti", "z", "si", "x", "ind", "I", "it", "l", "uri", "d", "pi", "ati", "q", "io", "f", "j", "oni", "cli", "xi", "ori", "di", "ri", "ni", "ci", "v", "e", "t", "id", "li", "ii", "n", "bi", "ip"], "output": ["letter", "unit", "text", "end", "name", "line", "IL", "NL", "width", "o", "number", "result", "office", "section", "O", "write", "hidden", "ana", "information", "index", "response", "two", "expression", "fn", "stage", "run", "current", "Output", "control", "NAME", "out", "outer", "network", "position", "sort", "style", "operation", "END", "stop", "LINE", "address", "four", "input", "data", "length", "display", "summary", "foo", "string", "e", "OU", "key", "double", "production", "exit", "config", "n"], "s": ["ss", "spec", "strings", "a", "sh", "sil", "settings", "south", "service", "p", "states", "g", "c", "o", "r", "sl", "y", "sf", "sie", "sp", "z", "si", "es", "x", "S", "sn", "w", "sb", "l", "services", "u", "sg", "out", "f", "sort", "ssl", "sync", "sw", "site", "ns", "ws", "su", "os", "b", "string", "v", "e", "t", "ls", "sv", "https", "source", "n"]}}
{"code": "S=input()\\na=int(S[:2])\\nb=int(S[2:])\\nif 0<a<=12 and b==0 or 0<a<=12 and b>12:\\n  print(\"MMYY\")\\nelif 0<a<=12 and 0<b<=12:\\n  print(\"AMBIGUOUS\")\\nelif 0<b<=12 and a==0 or 0<b<=12 and a>12:\\n  print(\"YYMM\")\\nelse:\\n  print(\"NA\")", "target": "17", "substitutes": {"S": ["F", "s", "L", "V", "H", "SC", "Q", "X", "Y", "SE", "Sample", "NS", "TS", "SH", "ST", "DATA", "Source", "SI", "O", "SA", "P", "T", "C", "B", "D", "Session", "A", "W", "RS", "I", "SS", "U", "R", "Input", "M", "SM", "SP", "String", "N", "SN", "G", "SSL", "SO", "SU", "Socket"], "a": ["s", "aa", "va", "ma", "p", "ai", "g", "c", "ama", "fa", "aw", "i", "y", "h", "ap", "ba", "ab", "au", "z", "da", "x", "A", "af", "w", "ak", "l", "u", "d", "aaa", "f", "ca", "sa", "ac", "m", "ga", "area", "am", "aj", "ae", "oa", "alpha", "e", "ada", "an", "ad", "n"], "b": ["aa", "s", "be", "k", "ib", "fb", "p", "bs", "g", "c", "i", "y", "h", "o", "B", "ba", "ab", "z", "x", "A", "body", "sb", "l", "bf", "d", "rb", "bb", "u", "f", "eb", "j", "bd", "ac", "m", "sa", "bot", "ae", "db", "v", "base", "e", "t", "bi", "ad", "n"]}}
{"code": "from collections import defaultdict\\nimport itertools \\n\\nn = int(input())\\n\\nd = defaultdict(int)\\n\\nfor i in range(n):\\n    s = input()\\n    d[s[0]] += 1\\n\\nl = [\"M\", \"A\", \"R\", \"C\", \"H\"]\\n\\nc = itertools.combinations(l, 3)\\n\\ns = 0\\n\\nfor x in c:\\n    s += d[x[0]] * d[x[1]] * d[x[2]]\\n\\nprint(s)\\n", "target": "760", "substitutes": {"n": [" N", " p", "k", "p", "init", "o", "y", "h", "r", "num", "z", "index", "nan", " fn", "w", " ng", "ln", "f", "j", "network", "m", "ns", "nl", "ize", " self", " order", "b", "e", "N", "t", "count", "nb"], "d": ["k", "a", "dh", "p", "g", "dat", "o", "dict", "h", "y", "sd", "r", "ded", "D", "z", "dds", "da", "diff", "w", "u", "do", "q", "f", "dl", "dt", "j", "m", "self", "dc", "data", "db", "v", "b", "t", "e", "ds", "id"], "i": ["k", "p", " I", "h", "y", "r", "ix", "ti", "z", "index", "ind", "I", "u", "q", "io", "f", "j", "xi", "v", "e", "t", "col", "id", "ii", "ip"], "s": ["ss", "a", "strings", "sc", "p", "ps", "states", "g", "xs", "sets", "y", "r", "h", "o", "sl", "z", "si", "S", "w", "start", "args", "services", "u", "ses", "sg", "f", "j", "cs", "m", "sections", "self", "ns", "ws", "seconds", "os", "gs", "b", "v", "t", "e", "ls", "ds"], "l": ["lp", "ol", "a", "L", " L", "p", "g", "y", "r", "o", "sl", "h", "lc", "kl", "u", "ll", "ln", "dl", "f", "m", "list", "wl", "v", "b", "t", "ls", "e", "li"], "c": ["k", "a", "p", "g", "y", "r", "h", "nc", "o", "cont", "ec", "C", "lc", "z", "fc", "unc", "cu", "con", "cm", "f", "rc", "cs", "m", "dc", "cd", "ci", "ct", "b", "v", "e", "t", "bc", "cc", "col", "pc", "xc"], "x": ["k", "a", "int", "code", "python", "sex", "X", "p", "ic", "xs", "plus", "xx", "y", "h", "r", "ix", "case", "any", "z", "ex", "index", "es", "w", "cross", "ctx", "u", "f", "ax", "m", "xi", "self", "input", "data", "ct", "v", "b", "xp", "key", "t", "e", "xes", "id", "xc"]}}
{"code": "N = int(input())\\nflag = 0\\nfor i in range(1,10):\\n    if N%i == 0:\\n        if N/i <= 9:\\n            flag = 1\\n            print(\"Yes\")\\n            break\\nif flag == 0:\\n    print(\"No\")", "target": "654", "substitutes": {"N": ["F", "Number", "L", "NO", "V", "NL", "H", "Q", "X", "Y", "NC", "Size", "Num", "NS", "NI", "K", "O", "P", "T", "C", "B", "D", "NP", "Len", "S", "I", "No", "NT", "NG", "Ni", "Z", "Ns", "M", "J", "Sum", "SN", " n", "G", "NA", "n"], "flag": ["bad", "character", "error", "letter", "group", "const", "code", "ag", "event", "arg", "al", "state", "err", "use", "log", "tag", "sign", "say", "force", "long", "store", "ind", "start", "bug", "nb", "star", "f", "lag", "status", "sort", "style", "flags", "close", "FLAG", "option", "char", "age", "kind", "type", "key", "count", "all", "id", "bit", "part", "test", "Flag", "offset"], "i": ["s", "a", "ei", "int", "qi", "p", "phi", "ai", "c", "o", "y", "ix", "ini", "iu", "ti", "z", "si", "index", "x", "ind", "I", "l", "u", "pi", "d", "j", "f", "xi", "di", "ri", "ni", "ci", "v", "b", "e", "zi", "li", "ii", "bi", "n"]}}
{"code": "n,x=map(int,input().split())\\nl=list(map(int,input().split()))\\n\\nd=0\\ncnt=1\\n\\nfor i in range(1,n+1):\\n    d=d+l[i-1]\\n    if d<=x:\\n        cnt+=1\\n\\nprint(cnt)\\n", "target": "444", "substitutes": {"n": ["name", "k", "s", "p", "g", "c", "y", "o", "r", "num", "h", "nc", "size", "z", "w", "ny", "u", "f", "network", "j", "m", "ln", "ns", "no", "v", "b", "e", "N", "t", "nb"], "x": ["dx", "k", "X", "p", "xs", "c", "xx", "y", "number", "h", "ix", "size", "z", "ex", "index", "xxx", "w", "max", "q", "f", "ax", "j", "m", "xi", "v", "b", "xp", "e", "t", "xes", "xc"], "l": ["lp", "s", "k", "ol", "L", "p", "g", "c", "o", "sl", "r", "left", "lc", "kl", "z", "u", "ll", "ln", "dl", "f", "m", "j", "rl", "list", "nl", "wl", "fl", "v", "b", "e", "ls", "li"], "d": ["dx", "s", "k", "dd", "a", "dy", "dh", "fd", "p", "nd", "g", "c", "o", "y", "r", "sd", "md", "D", "z", " dd", "od", "da", "ind", "start", "w", "u", "xd", "dt", "f", "j", "dl", "m", "bd", "dc", "cd", "ld", "b", "v", "e", "t", "pd", "ds", "dn", "ad"], "cnt": ["dcnc", "cNT", "cpt", "acount", "CNT", "dcnt", "cnc", " cNT", "Cpt", " cct", "cct", " cnc", "acnt", "Cnt", " cno", "nnc", "Cnc", "Cno", "ucount", "acNT", "nnt", "npt", "acno", "cno", " count", "ucnt", "ucct", "count", "Cct", "dcnd", "cnd", "nnd", "dcpt", "Cnd", "Count", "ucnc"], "i": ["gi", "k", "ui", "end", "a", "ie", "p", "ai", "c", "y", "h", "ix", "ini", "pos", "slice", "ti", "z", "index", "ind", "start", "w", "I", "u", "pi", "q", "j", "f", "m", "ir", "xi", "di", "ri", "ci", "v", "b", "e", "id", "li", "ii", "bi", "ip"]}}
{"code": "N = int(input())\\nA = list(map(int,input().split()))\\nM = 1000\\nS = 0\\n\\nfor i in range(0, N):\\n  if i != N-1 and A[i] < A[i+1]:\\n    if S == 0:\\n      S = M // A[i]\\n      M = M % A[i]\\n  elif i == N-1 or A[i] > A[i+1]:\\n    if S > 0:\\n      M += S * A[i]\\n      S = 0  \\nprint(M)", "target": "67", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "NL", "Q", "X", "Y", "NC", "Size", "Num", "NS", "NE", "K", "Na", "NM", "O", "P", "B", "C", "T", "D", "Len", "Ne", "I", "No", "NT", "Ni", "Z", "Ns", "ND", "J", "NA", "n"], "A": ["F", "GA", "Act", "a", "L", "At", "V", "All", "H", "Az", "Q", "X", "MA", "Y", "AP", "IA", "Adam", "LA", "TA", "This", "EA", "AST", "K", "FA", "Ha", "AM", "AH", "SA", "P", "B", "C", "mA", "As", "D", "T", "Ar", "API", "If", "AA", "Args", "AC", "Alpha", "I", "Ab", "Ma", "Average", "Data", "Action", "In", "Auth", "Array", "CA", "U", "Part", "Input", "alpha", "Wa", "Order", "G", "NA", "An", "App"], "M": ["F", "MN", "E", "L", "V", "ME", "H", "Q", "X", "MA", "Y", "MI", "SE", "Num", "K", "DM", "NM", "AM", "O", "P", "T", "B", "C", "D", "LM", "MD", "W", "CM", "SIZE", "MIN", "I", "MAL", "MB", "Matrix", "Z", "m", "U", "R", "Mi", "Part", "J", "SM", "MS", "MF", "MM", "MT", "G", "MO"], "S": ["F", "s", "E", "L", "DS", "V", "H", "Q", "X", "Y", "SE", "Size", "Sample", "NS", "Si", "K", "PS", "SH", "SI", "O", "SA", "P", "B", "C", "T", "D", "oS", "Shift", "Sa", "SL", "SIZE", "RS", "Sl", "I", "SS", "m", "Ns", "Send", "U", "R", "MS", "SM", "Sum", "SN", "G", "SU"], "i": ["gi", "ji", "s", "k", "ui", "a", "ie", "int", "chi", "qi", "p", "phi", "ai", "g", "c", "init", " I", "y", "o", "num", "ini", "ix", "iu", "slice", "api", "z", "si", "index", "x", "yi", "module", "ind", "start", "I", "uri", "l", "u", "d", "pi", "j", "f", "io", "m", "cli", "xi", "ori", "di", "ri", "ni", "ip", "ci", "b", "v", "t", "e", "info", "multi", "id", "li", "ii", "source", "DI", "n", "bi", "ti"]}}
{"code": "n = int(input())\\ncheck = 0\\nkeep = []\\n\\ndef q(n, check):\\n    if n in keep:\\n        return check\\n    else:\\n        keep.append(n)\\n    if n % 2 == 0:\\n        n = n // 2\\n    else:\\n        n = 3 * n + 1\\n    return q(n, check+1)\\nprint(q(n,check)+1)\\n", "target": "551", "substitutes": {"n": ["min", "name", "k", "call", "a", "non", "p", "na", "nd", "c", "i", "g", "o", "r", "nc", "number", "num", "net", "un", "rn", "size", "ne", "nu", "z", "fn", "x", "index", "sn", "w", "node", "conn", "l", "cn", "d", "nn", "q", "nt", "f", "j", "y", "m", "nw", "none", "network", "ns", "no", "ni", "v", "b", "np", "len", "t", "N", "pn", "nit", "e", "dn", "nb", "an"], "check": ["name", "call", "k", "checks", "change", "end", "nice", " Check", "fix", "feed", "Check", "c", "click", "y", "read", "work", "num", "comment", "checked", "index", "x", "clean", "valid", "ind", "start", "w", "it", "ok", "d", "max", "q", "wait", "update", "ignore", "walk", "sync", " count", "close", "pull", "scan", "match", "key", "ck", "count", "all", "add", "id", "qq", "cl", "test", "draw", "block"], "keep": ["name", "int", "vis", "strip", " Keep", "carry", "hack", "circ", "rec", "cont", "comment", "lock", "iq", "sign", "Keep", "coll", "container", "cook", "remove", "norm", "store", "clean", "avoid", "cross", "allow", "kept", "accept", "q", "card", "keeper", "rc", "ignore", "close", "stop", "null", "shape", "list", "key", "add", "id", "skip", "month", "param", "draw", "block"]}}
{"code": "a,b,c,k = map(int,input().split())\\n \\nif k < a:\\n  print(str(k))\\nelif k < (a + b):\\n  print(str(a))\\nelse:\\n  print(str(2*a + b - k))", "target": "174", "substitutes": {"a": ["aa", "auto", "int", "va", "p", "na", "ai", "i", "y", "ba", "ab", "au", "z", "da", "x", "A", "ar", "af", "w", "ka", "ak", "u", "d", "aaa", "f", "sa", "ca", "asa", "ac", "m", "ga", "j", "area", "input", "am", "ae", "aj", "alpha", "e", "an", "ad", "offset", "n"], "b": ["aa", "fb", "p", "bs", "g", "pb", "i", "y", "r", "o", "beta", "B", "ba", "ab", "z", "x", "w", "sb", "cb", "l", "bb", "d", "u", "f", "j", "m", "v", "e", "nb", "lb", "ad", "n"], "c": ["end", "p", "g", "y", "C", "lc", "uc", "z", "ch", "ce", "x", "cy", "cb", "cm", "u", "d", "ca", "f", "cs", "ac", "m", "dc", "e", "cr", "cc", "mc", "ad", "n"], "k": ["km", "s", "ke", "p", "g", "i", "K", "y", "o", "r", "num", "kk", "ks", "kn", "z", "x", "mk", "kw", "w", "ka", "ak", "ok", "u", "d", "bb", "q", "ki", "f", "sk", "j", "ky", "m", "ac", "ek", "alpha", "v", "key", "ck", "e", "id", "ik", "ad", "n"]}}
{"code": "n = int(input())\\n\\ng = [[] for _ in range(n)]\\n\\nfor i in range(n):\\n    a = int(input())\\n    for j in range(a):\\n        x, y = map(int, input().split())\\n        x -= 1\\n        g[i].append((x, y))\\n\\nans = 0\\nfor i in range(2**n):\\n    temp = [-1]*n\\n    for j in range(n):\\n        if (i >> j) & 1:\\n            temp[j] = 1\\n        else:\\n            temp[j] = 0\\n    flag = True\\n    for j in range(n):\\n        if temp[j] == 1:\\n            for x, y in g[j]:\\n                if temp[x] != y:\\n                    flag = False\\n    if flag:\\n        ans = max(ans, sum(temp))\\nprint(ans)\\n", "target": "52", "substitutes": {"n": ["s", "k", "p", "na", "c", "o", "nc", "num", "h", "r", "ne", "z", "nan", "w", "ny", "l", "u", "d", "nn", "f", "m", "ns", "b", "v", "np", "t", "N", "e", "nb", "an"], "g": ["gi", "k", "group", "groups", "gy", "p", "go", "gui", "c", "gh", "h", "gc", "gam", "gu", "cfg", "ig", "gp", "reg", "gn", "w", "l", "u", "q", "sg", "gg", "f", "mg", "gt", "m", "ga", "got", "graph", "gs", "v", "b", "gb", "e", "gen", "bg", "gm", "G", "gz", "pg", "vg"], "_": ["p", "l", "q", "f", "J", "an", "ip"], "i": ["gi", "ji", "k", "ui", "ei", "ie", "int", "p", "ai", "c", "o", "h", "ini", "ix", "iu", "z", "si", "index", "yi", "ind", "I", "l", "u", "d", "pi", "f", "m", "xi", "di", "ni", "ci", "ij", "ip", "b", "v", "e", "id", "li", "ii", "bi", "on"], "a": ["aa", "s", "span", "ja", "active", "p", "na", "ai", "c", "o", "ba", "ann", "ab", "ani", "au", "ana", "art", "da", "ar", "A", "now", "w", "ia", "adj", "f", "sa", "ac", "ga", "area", "am", "aj", "alpha", "b", "e", "an", "ad"], "j": ["gi", "ji", "s", "k", "ie", "int", "ja", "p", "c", "jo", "r", "jj", "o", "num", "un", "jl", "z", "je", "index", "yi", "jet", "ind", "w", "l", "u", "uj", "d", "q", "js", "jp", "f", "job", "m", "oj", "jc", "aj", "ij", "J", "b", "bj", "v", "e", "t", "ii", "part", "bi"], "x": ["dx", "min", "s", "k", "int", "X", "p", "na", "xs", "c", "xx", "o", "rx", "ix", "px", "pos", "h", "z", "on", "ex", " xx", "index", "xxx", "w", "cross", "l", "u", "d", "max", "q", "f", "ax", "m", "xi", "v", "b", "e", "t", "xy", "xc", "an"], "y": ["yd", "k", "s", "dy", "int", "ye", "p", "Y", "c", "o", "ay", "z", "zy", "yi", "cy", "w", "ny", "yt", "l", "u", "d", "sy", "m", "yy", "ya", "oy", "b", "v", "yl", "e", "t", "py", "id", "vy", "ey"], "ans": ["ss", "ano", "s", "ents", "lan", "span", "nas", "ras", "eps", "ams", "na", "ai", "ats", "ags", "activation", "anas", "AN", "ads", "ANS", "anes", "ks", "mean", "ane", "ann", "anon", "ani", "anc", "ays", "ana", "can", "outs", "nan", " means", "ars", "anus", "aned", "lines", "ass", "ace", "sg", "ons", "aus", "ln", "sk", "cs", "leans", "flags", "ants", "ns", "acs", "shape", "no", "os", "san", "ls", "cons", "ds", "oss", "an", "ins"], "temp": ["gi", "new", "example", "group", "p", "pre", "init", "ic", "c", "gap", "dat", "gc", "case", "num", "tmp", "txt", "iter", "emp", "size", "lc", "ani", "z", "mini", "grid", "index", "unc", "clean", "valid", "now", "w", "flat", "adj", "gener", "current", "mag", "js", "wait", "m", "ac", "note", "sync", "Temp", "style", "aj", "input", "v", "zip", "fake", "t", "order", "atom", "gen", "py", "col", "source", "part", "test", "sum"], "flag": ["bad", "field", "agn", "group", "line", "code", "span", "ag", "agged", "arg", "std", "neutral", "gc", "like", "sign", "force", "long", "ani", "cost", "ar", "af", "start", "hat", "bug", "args", " flags", "ace", "band", "sg", "card", "lag", "status", "cat", "style", "flags", "FLAG", "back", "age", "kind", "mask", "type", "string", "debug", " Flag", "count", "standard", "id", "bit", "filter", "part", "Flag", "ad", "offset", "info"]}}
{"code": "n=int(input())\\nans=0\\nif n%2==0:\\n    for i in range(1,26):\\n        ans+=(n//(2*5**i))\\nprint(ans)", "target": "211", "substitutes": {"n": ["s", "k", "a", "mn", "p", "na", "c", "o", "number", "nc", "num", "r", "en", "y", "ne", "fn", "x", "nan", "ny", "l", "cn", "d", "nn", "nt", "j", "ln", "f", "m", "network", "Ns", "ns", "ni", "b", "len", "v", "e", "N", "pn", "nit", "dn", "nb", "an"], "ans": ["s", "ents", "lan", "nas", "offs", "cas", "atan", "na", "ps", "ats", "anas", "AN", "ANS", "anes", "ks", "mean", "ane", "ann", "ares", "ani", "anc", "errors", "es", "ana", " means", "nan", "ars", "aned", "nn", "ons", "aus", "anne", "ens", "sk", "cs", "leans", "ants", "ns", "scan", "os", "ls", "cons", "ds", "ops", "an", "comments", "ins"], "i": ["gi", "k", "vi", "ui", "a", "ei", "int", "ie", "chi", "qi", "p", "phi", "ai", "c", "z", "si", "x", "ind", "I", "l", "pi", "d", "q", "j", "f", "m", "xi", "ri", "di", "ni", "ci", "v", "e", "zi", "id", "li", "ii", "bi", "ti"]}}
{"code": "import fractions\\n\\nN=int(input())\\nS=[]\\nfor i in range(N):\\n    S.append(int(input()))\\n\\n\\ndef koubaisu(a,b):\\n    return a*b//fractions.gcd(a,b)\\n\\nans=1\\n\\nif N==1:\\n    print(S[0])\\n    exit()\\nelif N==2:\\n    ans=koubaisu(S[0],S[1])\\n    print(ans)\\n    exit()\\nelif N>2:\\n    ans=koubaisu(S[0],S[1])\\n    for i in range(N-2):\\n        ans=koubaisu(ans,S[i+2])\\n\\nprint(ans)", "target": "186", "substitutes": {"N": ["F", "Nat", "E", "L", "V", "NN", "NL", "H", "Q", "X", "Sn", "Y", "Size", "NC", "NS", "NE", "Num", "K", "Na", "NM", "CNN", "O", "P", "T", "C", "B", "D", "Len", " C", "Ne", "A", "NY", "I", "NT", "Node", "Ni", "TW", "Z", "Ns", "II", "R", "Part", "M", "J", "NB", "SN", " n", "G", " Ne", "NA", "State", " NI", "n"], "S": ["F", "s", "L", "IS", "DS", "V", "Es", "Q", "X", "AS", "SC", "SE", "Y", " s", "SR", "NS", "INS", "Si", "K", "Os", "TS", "PS", "SH", "Parts", "ST", "Source", "SI", "Su", "O", "OSS", "P", "T", "B", "C", "SK", "D", "Settings", "Ps", "St", "Session", "A", "Service", "RS", "Sl", "I", "Sing", "services", "Ds", "SS", "OS", "Services", "US", "Single", "WS", "Ns", "Set", "U", "R", "M", "GS", "Sign", "Sin", "String", "SN", "G", "SO", "BS", "SU", "Socket"], "i": ["ion", "gi", "k", "ui", "ie", "int", "qi", "mi", "p", "phi", "ai", "c", "y", "o", "iu", "ti", "z", "mini", "si", "on", "index", "x", "eni", "ind", "I", "l", "u", "pi", "io", "f", "j", "m", "xi", "di", "ni", "ci", "v", "e", "id", "li", "ii", "n", "bi", "ip"], "a": ["aa", "s", "va", "ma", "p", "na", "ai", "c", "fa", "y", "la", "ba", "ab", "au", "da", "x", "pa", "A", "ar", "af", "ah", "ia", "u", "d", "aaa", "f", "sa", "ca", "ac", " A", "ga", "asa", "area", "am", "aj", "ae", "alpha", "e", "an", "ad", "n"], "b": ["s", "be", "k", "aa", "fb", "p", "bs", "c", " B", "y", "r", "wb", "beta", "mb", "B", "ba", "ab", "x", "sb", "bel", "bf", "d", "bb", "rb", "ben", "f", "eb", "xb", "v", "e", "nb", "lb", "bi", "n"], "ans": ["s", "lan", "nas", "ras", "amps", "offs", "ams", "atan", "na", "cas", "gan", "ats", "Ann", "ions", "aning", "Na", "antis", "anas", "AN", "aos", "ads", "ANS", "anes", "ks", "ane", "aces", "ann", "anon", "anc", "ani", "au", "ays", "ana", "ais", "can", "cus", "nan", "A", "An", "ars", "ant", "anus", "aned", "nn", "ons", "aus", "anan", "anne", "ens", "sk", "sa", "ants", "ns", "us", "os", "san", "ls", "ean", "cons", "plan", "ds", "NA", "oss", "an", "ins"]}}
{"code": "def main():\\n    s = input()\\n\\n    print(s[:3])\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "775", "substitutes": {"s": ["ss", "sq", "a", "sample", "p", "g", "c", "o", "r", "si", "S", "w", "sb", "tests", "args", "l", "ses", "u", "d", "sg", "js", "f", "ssl", "m", "sync", "ws", "input", "data", "gs", "b", "v", "t", "e", "sub", "sv", "submit", "n"]}}
{"code": "import math\\nimport statistics\\na=int(input())\\n#b=int(input())\\n# c=[]\\n# for i in b:\\n#     c.append(i)\\n# e1,e2 = map(int,input().split())\\nf = list(map(int,input().split()))\\n#j = [input() for _ in range(3)]\\n# h = []\\n# for i in range(e1):\\n#     h.append(list(map(int,input().split())))\\nf.sort()\\ntyu = statistics.median(f)\\nif f[len(f)//2]==f[len(f)//2-1]:\\n    print(0)\\nelse:\\n    print(f[len(f)//2]-f[len(f)//2-1])", "target": "415", "substitutes": {"a": ["aa", "s", "p", "c", "ama", "i", "y", "ab", "z", "array", "x", "A", "u", "d", "ca", "f", "sa", " A", "m", "area", "ae", "data", "alpha", "b", "e", "all", "n"]}}
{"code": "#!/usr/bin/env python\\n\\nimport sys\\n#from sympy import isprime\\n\\nclass bigint:\\n    primeset = set()\\n    def __init__(self,n,mod):\\n        if not mod in bigint.primeset:\\n            assert mod**2 < sys.maxsize, \"modulo is too large\"\\n            #assert isprime(mod), \"modulo should be a prime number\"\\n            bigint.primeset.add(mod)\\n        #\\n        self.n = n % mod\\n        self.mod = mod\\n        return\\n    #\\n    def __str__(self):\\n        return str(self.n)\\n    #\\n    def __add__(self,other):\\n        assert self.mod==other.mod, \"modulos of the two not match\"\\n        return bigint(self.n+other.n,self.mod)\\n    #\\n    def __sub__(self,other):\\n        assert self.mod==other.mod, \"modulos of the two not match\"\\n        return bigint(self.n-other.n,self.mod)\\n    #\\n    def __mul__(self,other):\\n        assert self.mod==other.mod, \"modulos of the two not match\"\\n        return bigint(self.n*other.n,self.mod)\\n    #\\n    def __pow__(self,other):\\n        assert type(other)==int, \"power should be integer\"\\n        #\\n        if other<0: return self ** ( other % ( self.mod-1 ) )\\n        elif other==0: return 1\\n        elif other==1: return self\\n        elif other%2==0:\\n            tmp= self ** (other//2)\\n            return bigint( ( tmp.n**2 ) % self.mod,self.mod )\\n        else:\\n            tmp= self ** (other//2)\\n            return bigint( ( tmp.n**2 * self.n ) % self.mod,self.mod )\\n    #\\n    def __truediv__(self,other):\\n        assert self.mod==other.mod, \"modulos of the two not match\"\\n        return self * ( other ** (other.mod-2) )\\n#\\n#::::::::::::::::::::::::::::::::::::::::::::::::::\\nmod= 10**9 + 7\\n\\ndef combination(n,m):\\n    global mod\\n    assert type(n)==type(m)==int, \"type error\"\\n    #\\n    mm= min(m,n-m)\\n    if mm==0: return bigint(1,mod)\\n    elif mm>0:\\n        a = bigint(n,mod)\\n        b = bigint(1,mod)\\n        for i in range(1,mm):\\n            a = a * bigint(n-i,mod)\\n            b = b * bigint(i+1,mod)\\n        return a / b\\n    #\\n    raise ValueError\\n#\\nn,m,k = [ int(x) for x in sys.stdin.readline().split() ]\\n#\\n# const.\\nnn= n * n\\nmm= m * m\\ncc= combination(n*m-2,k-2)\\n\\n# initialize\\nscore=bigint(0,mod)\\n\\n# scan over horizontal direction\\nfor i in range(1,n):\\n    score= score + bigint(i * mm * (n-i),mod) * cc\\n\\n# scan over vertical direction\\nfor i in range(1,m):\\n    score= score + bigint(i * nn * (m-i),mod) * cc\\n#\\nprint( score )\\n", "target": "341", "substitutes": {}}
{"code": "#!/usr/bin/env python3\\n# Generated by https://github.com/kyuridenamida/atcoder-tools\\nfrom typing import *\\nimport collections\\nimport functools as fts\\nimport itertools as its\\nimport math\\nimport sys\\n\\nINF = float('inf')\\n\\n\\ndef solve(N: int, d: \"List[int]\"):\\n    return sum(x * y for x, y in its.combinations(d, 2))\\n\\n\\ndef main():\\n\\n    sys.setrecursionlimit(10 ** 6)\\n\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    d = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\\n    print(f'{solve(N, d)}')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "434", "substitutes": {}}
{"code": "n=int(input())\\ns=input()\\ncnt=0\\ndef judge(n):\\n    pos=0\\n    pos=s.find(n[0],pos)\\n    if pos==-1:\\n        return 0\\n    pos=s.find(n[1],pos+1)\\n    if pos==-1:\\n        return 0\\n    pos=s.find(n[2],pos+1)\\n    if pos==-1:\\n        return 0\\n    return 1\\nfor i in range(1000):\\n    p=str(i).rjust(3,'0')\\n    if judge(p):\\n        cnt+=1\\nprint(cnt)", "target": "756", "substitutes": {"n": ["k", "a", "non", "g", "c", "o", "r", "nc", "en", "number", "net", "un", "num", "ne", "z", "on", "fn", "x", "sn", "node", "w", "current", "conn", "l", "u", "pi", "d", "nt", "nn", "f", "j", "network", "m", "none", "ns", "v", "len", "np", "b", "t", "N", "pn", "e", "nb", "an"], "s": ["ss", "strings", "a", "south", "spec", "qs", "groups", "ps", "states", "g", "c", "xs", "sys", "sets", "o", "r", "sf", "bis", "sp", "fs", "si", "es", "events", "S", "w", "sb", "tests", "sites", "l", "aws", "u", "ses", "services", "sg", "js", "f", "ssl", "m", "sync", "ns", "input", "su", "os", "abs", "gs", "b", "string", "ts", "t", "ls", "e", "opens", "session", "ds", "ops", "rs"], "cnt": ["gnt", "icnt", "grt", "cpt", "acount", "dcno", "dcnt", "dcrt", "ccat", " cct", "cct", "crt", "iccat", "ccount", "gnn", "icount", "acnt", "lcrt", "brt", "rrt", "bnt", "rnt", "account", "dccount", "icct", "rpt", "lccount", "rnn", "bnn", " ccat", "acno", " count", "cno", "bpt", "lcnt", "acct", "accat", "lcno", "count", "cnn", "gpt", "acrt"], "pos": ["min", "loc", "unit", "end", "pid", "line", "int", "at", "pointer", "sit", "prop", "ps", "lat", "c", "vis", "o", "px", "pres", "axis", "slot", "num", "slice", "pt", "sp", "size", "po", "on", "index", "x", "body", "start", "l", "patch", "d", "doc", "nt", "f", "position", "point", "ac", "cos", "resp", "Pos", "POS", "no", "os", "act", "neg", "pick", "type", "len", "rel", "nos", "all", "count", "col", "id", "pc", "val", "pose", "part", "block", "ref", "offset"], "i": ["a", "ie", "int", "qi", "phi", "ai", "c", "y", "h", "ix", "ini", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "q", "j", "f", "position", "m", "pp", " j", "ci", "v", " ii", "e", "t", "il", "id", "li", "ii", "bi", "ip"], "p": ["lp", "a", "pid", "pointer", "pre", "g", "c", "o", "r", "tp", "h", "pr", "P", "po", "l", "u", "d", "q", "f", "j", "jp", "param", "point", "m", "pp", "ip", "b", "v", "t", "e", "pc", "part"]}}
{"code": "S = list(input().split())\\nprint(S[0][0].upper() + S[1][0].upper() + S[2][0].upper())", "target": "222", "substitutes": {"S": ["F", "s", "L", "DS", "V", "H", "SC", "X", "Q", "Y", "SE", "SR", "NS", "JS", "TS", "PS", "SH", "CSS", "Source", "SI", "O", "SA", "P", "T", "C", "B", "D", "Sync", "Session", "A", "SL", "Service", "RS", "I", "SS", "Single", "WS", "TEXT", "Set", "CS", "U", "R", "Input", "SIGN", "M", "Part", "String", "SP", "SM", "N", "G", "SO", "SU", "Socket"]}}
{"code": "n = int(input())\\nhs = list(map(int,input().split()))\\nans = 0\\nm = 0\\nfor h in hs:\\n  if m <= h:\\n    ans += 1\\n  m = max(m, h)\\n \\nprint(ans)\\n", "target": "26", "substitutes": {"n": ["k", "mn", "p", "na", "g", "c", "i", "o", "r", "num", "en", "z", "x", "sn", "w", "l", "d", "nn", "ln", "f", "ns", "no", "ni", "b", "N", "nb"], "hs": ["ums", "rh", "holes", "sh", "HS", "H", "hess", "na", "ps", "ms", "xs", "hea", "host", "cases", "ims", "his", "wh", "scl", "asts", "obs", "hh", "asses", "heads", "lines", "bh", "hes", "he", "ens", "ns", "han", "ws", "hops", "hi", " ls", "gs", "ha", "ls", "cons", "hm", "las", "hp", "rs", "ins"], "ans": ["ums", "s", "aid", "a", "int", "lan", "nas", "span", "amps", "ras", "ams", "atan", "na", "ai", "ms", "gan", "aning", "en", "AN", "ANS", "anes", "ks", "mean", "ann", "ani", "anc", "ays", "ana", "x", "can", " means", "ars", "aned", "nn", "ons", "aus", "anne", "sk", "ln", "ens", "ns", "ism", "han", "am", "os", "len", "ds", "rs", "an", "ins"], "m": ["mass", "min", "s", "a", " M", "mn", "p", "ms", "g", "c", "i", "o", "r", "y", "im", "ym", "Ms", "num", "mean", "x", "dm", "mu", "w", "om", "cm", "l", "d", "max", "f", "bm", "mx", "am", "M", "v", "b", "dim", "e", "mm", "hm", "an"], "h": ["rh", "s", "k", "a", "sh", "H", "hn", "p", "g", "c", "i", "oh", "gh", "o", "r", "y", "im", "num", "ph", "hr", "z", "x", "ah", " H", "w", "hh", "l", "bh", "u", "d", "ach", "he", "q", "max", "f", "hd", "han", " hp", "hi", "v", "b", "ha", "e", "count", "hm", "id", "hp", "um"]}}
{"code": "N, K = map(int, input().split())\\nR, S, P = map(int, input().split())\\nT = input()\\n\\ndp = [[0]*3 for _ in range(N+1)]\\nfor i in range(1, N+1):\\n    if i <= K:\\n        dp[i][0] = int(T[i-1]=='s') * R\\n        dp[i][1] = int(T[i-1]=='p') * S\\n        dp[i][2] = int(T[i-1]=='r') * P\\n    else:\\n        dp[i][0] = max(dp[i-K][1], dp[i-K][2]) + int(T[i-1]=='s') * R\\n        dp[i][1] = max(dp[i-K][0], dp[i-K][2]) + int(T[i-1]=='p') * S\\n        dp[i][2] = max(dp[i-K][0], dp[i-K][1]) + int(T[i-1]=='r') * P\\n\\nans = 0\\nfor d in dp[-K:]:\\n    ans += max(d)\\nprint(ans)", "target": "383", "substitutes": {"N": ["F", "E", "NR", "L", "V", "H", "Q", "X", "Y", "Size", "Num", "NS", "NM", "O", "C", "Len", "D", "Ne", "W", "I", "RN", "No", "NT", "Ni", "Z", "Ns", "ND", "M", "J", " n", "G", "n"], "K": ["F", "Power", "k", "KK", "E", "Ke", "L", "KI", "V", "AK", "Max", "H", "Ak", "Q", "X", "Y", "IK", "KE", "Read", "Sk", "O", "B", "C", "SK", "D", "NK", "KS", "A", "W", "VK", "KC", "I", "Kat", "HK", "Z", "UK", "KR", "CL", "PK", "U", "King", "J", "M", "DK", "KN", "G", "CH", "Ku", "Key"], "R": ["F", "E", "Rs", "NR", "L", "V", "H", "Q", "X", "AS", "Y", "SR", "AR", "r", "RR", "B", "C", "D", "A", "W", "Res", "RS", "I", "Rh", "RN", "DR", "KR", "RP", "U", "M", "J", "JR", "G", "RA", "RH", "RM"], "S": ["F", "s", "E", "Rs", "L", "V", "Q", "X", "Y", "SE", "NS", "Si", "Os", "PS", "SH", "O", "C", "B", "D", "SK", "Ps", "As", "A", "W", "SL", "RS", "I", "Sing", "SS", "Sc", "Send", "U", "Sub", "M", "SP", "G", "SU"], "P": ["F", "Power", "TP", " p", "E", "PO", "L", "V", "H", "Q", "X", "p", "Y", "AP", "O", "C", "B", "D", "NP", "Ps", "IP", "A", "W", "PR", "I", "DP", "RP", "Py", "U", "Par", "M", "J", "G", "PF", "PT"], "T": ["F", "AT", "TP", "CT", "E", "L", "Port", "It", "V", "LT", "H", "Q", "X", "p", "Y", "Template", "Taylor", "TA", "Text", "Test", "This", "TS", "ST", "Tu", "O", "C", "B", "D", "Trans", "Ep", "St", "TG", "A", "TB", "W", "Tab", "Not", "I", "Type", "Tw", "NT", "Tri", "Config", "Transform", "Z", "TW", "Th", "TT", "Dist", "TC", "Post", "Total", "Time", "M", "Cont", "TF", "t", "WT", "Ts", "G", "Unit", "Target", "VT", "PT"], "dp": [" p", "loc", "amp", "dd", "DC", "cp", "deep", "dm", " dup", "src", "bb", "DP", "address", "pad", "dc", "data", "CP", "np", " cp", "pd", "dos", "hp", " DP", "cmp", "channel", "dk", "dat", "pos", "api", "dB", "dep", "desc", "mp", "vp", "dest", "comp", "vm", " dep", "do", "pp", "wd", "direct", "source", "pg", "cdn", "ip", "wp", "prop", "p", "dist", "default", "tp", "gp", "sp", "params", "upp", "sup", "bsp", "dr", "port", "rank", "pkg", "ep", "adr", "dim", "imp", "yp", "config", "direction", "lp", "TP", "pb", "fp", "sl", "pm", "rep", "push", "D", "umpy", "grad", " prod", "dl", "dt", "deb", "df", "di", "isp", "db", "prep", "dra", "pair", "ds"], "_": ["k", "p", "g", "r", "num", "x", "I", "l", "q", "f", "j", "m", " j", "len", "t", "all", "val"], "i": ["ui", "int", "qi", "phi", "ai", "y", "ix", "si", "x", "yi", "uli", "l", "j", "f", "us", "b", "li", "ik", "info", "gi", "ie", "mi", "ic", "ini", "api", "u", "pi", "site", "ni", "ci", "e", "asi", "multi", "id", "source", "ti", "ip", "ami", "chi", "p", "oi", "iu", "z", "index", "ind", "start", "it", "sup", "io", "m", "ski", "isi", "my", "t", "zi", "anti", "n", "k", "c", "o", "esi", "mini", "I", "uri", "ki", "cli", "xi", "di", "ri", "ii", "bi", "ori"], "ans": ["aid", "dd", "lan", "nas", "ras", "amps", "eps", "span", "atan", "na", "ps", "gan", "ats", "ions", "dan", "anas", "AN", "ads", "ANS", "anes", "ks", "ane", "mean", "annels", "ann", "ani", "anc", " dd", "ays", "ana", "pa", "can", " means", "nan", "tan", "ars", "anus", "aned", "ons", "aus", "ids", "rans", "cs", "ants", "ns", "ases", "os", "ds", "an", "ad", "ins"], "d": ["s", "dd", "a", "fd", "p", "nd", "std", "g", "c", "dat", "sd", "D", "dot", " dd", "da", "x", "dm", "ind", "w", "grad", "gd", "l", "de", "Ds", "do", "dad", "dt", "dl", "du", "m", "dc", "cd", "df", "di", "data", "db", "dim", "e", "pd", "ds", "id", " D", "ad"]}}
{"code": "N = int(input())\\nA = [0]+list(map(int,input().split()))+[0]\\nB = [abs(a-b) for a,b in zip(A,A[1:])]\\nC = sum(B)\\n\\nfor n in range(N):\\n  print(C+abs(A[n]-A[n+2])-(B[n]+B[n+1]))", "target": "527", "substitutes": {"N": ["F", "E", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "NC", "NS", "NE", "K", "CNN", "O", "P", "T", "D", "Ne", "S", "W", "I", "No", "NT", "Ni", "Z", "Ns", "R", "M", "J", "GN", "NB", "G", "NA"], "A": ["F", "First", "Ca", "L", "At", "New", "V", "All", "Az", "AS", "X", "MA", "Y", "AP", "IA", "LA", "TA", "EA", "This", "Ha", "SA", "P", "mA", "As", "AC", "D", "T", "API", "Bu", "AA", "Ar", "And", "Alpha", "S", "W", "AU", "PA", "Ma", "Average", "Auth", "Array", "CA", "U", "AF", "Input", "alpha", "M", "G", "NA", "App"], "B": ["F", "E", "EB", "L", "LB", "V", "H", "Q", "X", "Y", "UB", "PB", "IB", "DB", "BA", "AB", "O", "P", "T", "D", "SB", "BB", "BC", "BF", "I", "Ab", "BE", "Two", "BR", "OB", "WB", "Beta", "U", "GB", "R", "M", "NB", "QB", "VB", "Other", "G", "BS", "Bs"], "a": ["aa", "wa", "va", "p", "ai", " la", "c", "ama", "fa", "i", "la", "ba", "ab", "pa", "x", "da", "af", "l", "u", "f", "ca", "sa", "ac", " fa", "area", "aux", "ae", "oa", "alpha", "abs", "ea", "e", "an", "ad"], "b": ["aa", "s", "ib", "fb", "p", "bs", "c", "i", "y", "beta", "ba", "ab", "z", "x", "sb", "cb", "obj", "l", "u", "d", "rb", "bb", "abb", "f", "eb", "abs", "v", "base", "e", "sub", "nb", "lb", "bi"], "C": ["F", "E", "Ca", "L", "V", "Cu", "H", "Y", "c", "DC", "K", " c", "O", "P", "T", "D", "AC", "S", "GC", "W", "CM", "CF", "CL", "CA", "U", "R", "M", "CC", "CN", "G"], "n": ["name", "k", "mn", "p", "na", "nd", "init", "g", "c", "nm", "i", "o", "nc", "num", "en", "un", "net", "el", "rn", "ne", "nu", "ng", "z", "fn", "x", "sn", "ind", "node", "conn", "nat", "adj", "l", "u", "d", "cn", "nt", "nn", "j", "f", "network", "none", "ns", "no", "ni", "nr", "v", "e", "all", "pn", "dn", "nb", "an", "nor"]}}
{"code": "n,c=map(int,input().split())\\nxy=[list(map(int,input().split())) for i in range(n)]\\ndata=[0]*(n+1)\\nfor i in range(n):\\n    x,y=xy[i]\\n    data[i+1]=data[i]+y\\ndata1=[0]*(n+1)\\ndata2=[0]*(n+1)\\nfor i in range(n):\\n    x,y=xy[i]\\n    data1[i+1]=data[i+1]-x\\n    data2[i+1]=data[i+1]-2*x\\ndata=[0]*(n+1)\\nfor i in range(n):\\n    x,y=xy[n-1-i]\\n    data[i+1]=data[i]+y\\ndata3=[0]*(n+1)\\ndata4=[0]*(n+1)\\nfor i in range(n):\\n    x,y=xy[n-1-i]\\n    data3[i+1]=data[i+1]-(c-x)\\n    data4[i+1]=data[i+1]-2*(c-x)\\nfor i in range(1,n+1):\\n    data1[i]=max(data1[i],data1[i-1])\\n    data2[i]=max(data2[i],data2[i-1])\\n    data3[i]=max(data3[i],data3[i-1])\\n    data4[i]=max(data4[i],data4[i-1])\\nans=-float(\"inf\")\\nfor i in range(0,n+1):\\n    a=data2[i]+data3[n-i]\\n    b=data4[i]+data1[n-i]\\n    ans=max(ans,a,b)\\nprint(ans)", "target": "127", "substitutes": {"n": ["min", "s", "k", "name", "mn", "non", "p", "na", "g", "o", "nc", "num", "en", "net", "un", "size", "ne", "ng", "z", "nan", "sn", "w", "conn", "con", "l", "nin", "u", "d", "cn", "nn", "q", "nt", "f", "j", "network", "m", "none", "ns", "no", "v", "inn", "t", "N", "e", "count", "nb", "an", "nor"], "c": ["s", "k", "cycle", "p", "g", "h", "r", "o", "nc", "C", "size", "z", "ch", "cy", "w", "con", "cm", "l", "u", "d", "cn", "q", "f", "cs", "m", "ac", "cin", "co", "ci", "v", "e", "t", "count", "cc", "col", "xc"], "xy": ["loc", "density", "line", "code", "dy", "ie", "p", "poly", "phi", "lat", "xx", "dat", "px", "num", "pos", "slice", "html", "split", "coord", "z", "array", "grid", "index", "xxx", "image", "flat", "bug", "lines", "show", "quad", "pie", "sync", "XY", "yy", "frame", "no", "live", "chart", "zip", "pixel", "np", "dim", "e", "py", "multi", "info"], "i": ["s", "name", "ui", "ei", "int", "qi", "phi", "ai", "ix", "im", "slice", "si", "yi", "l", "uni", "j", "f", "li", "info", "gi", "ie", "mi", "init", "ic", "ini", "api", "u", "pi", "site", "ni", "ci", "v", "key", "e", "multi", "id", "source", "ti", "ip", "ami", "chi", "p", "oi", "iu", "z", "eni", "index", "ind", "it", "d", "io", "iv", "m", "my", "t", "anti", "k", "g", "o", "mini", "I", "uri", "ki", "one", "cli", "xi", "di", "ri", "ii", "bi", "ori"], "data": ["zero", "int", "content", "slice", "la", "scale", "series", "current", "ata", "f", "model", "list", "batch", "bin", "type", "zip", "space", "ad", "info", "mass", "date", "change", "code", "sample", "arr", "xx", "dat", "axis", "pos", "DATA", "split", "div", "array", "video", "pi", "Data", "function", "breaks", "all", "multi", "next", "density", "p", "default", "extra", "number", "layout", "case", "result", "size", "z", "index", "da", "cache", "image", "mu", "window", "mega", "meta", "lines", "d", "max", "m", "area", "frame", "map", "alpha", "view", "block", "off", "value", "variable", "missing", "na", "g", "o", "results", " Data", "first", "xxx", "w", "one", "style", "di", "no", "draw"], "x": ["dx", "s", "k", "int", "code", "X", "p", "Y", "ic", "xx", "o", "r", "px", "h", "rx", "ix", "z", "on", "ex", "index", "w", "cross", "l", "wx", "u", "d", "max", "q", "one", "f", "j", "m", "xi", "v", "pixel", "t", "e", "id", "xc"], "y": ["s", "k", "dy", "gy", "p", "Y", "xx", "ay", "z", "ty", "on", "ch", "yo", "yi", "cy", "wy", "w", "ny", "l", "yt", "u", "d", "q", "j", "sy", "f", "m", "yy", "ya", "v", "t", "e", "py", "vy", "ry", "ey", "sky"], "data1": ["dat6", "dat3", "dataOne", "seriesOne", "codeAP", "Data4", " data6", "Data2", "code6", "code1", "data10", "data64", "Data3", "code3", "datAP", "dat4", "DataOne", "data_", "dat41", "Data6", "value10", "Data1", "data41", "dat64", "Data_", "dat2", "value1", "value41", "dataAP", " data64", " dataAP", "data6", "Data64", "series3", " dataOne", "dat_", "dat10", " data10", "series1", "series2", "dat1", " data_", " data41", "value2"], "data2": ["dat6", "a1", "dat3", "data72", "Data4", "Data72", "Data2", " data6", " data72", "a3", "Data52", "Data3", "dat4", "dat52", " data0", "data52", "Data6", "Data1", "data0", " data52", "dat2", "index4", "datB", "dat72", "dataB", "data6", "a2", "index2", "Data0", "indexB", " dataB", "a4", "dat1", "index1", "dat0"], "data3": ["Data13", "dat3", " data13", "Data4", " data5", "Data23", "data03", " data9", "Data3", "ata3", "Data9", "dat4", " Data5", " data23", "dat13", " data03", "ata1", "Data1", " Data1", " data7", "dat23", "dat03", "data5", "dat7", "data7", "Data03", " Data3", "data9", "data23", "ata5", "Data7", "dat9", "data13", "dat1"], "data4": [" data8", "show1", "dat6", "dat3", "data40", "view8", "Data4", " data6", "Data2", "xy4", "datfour", "Data3", "view3", "show04", "dat4", "show4", " datafour", "Data6", "Data1", " data04", "xy7", " data40", "dat2", "dat40", "Data04", " data7", "view4", "show2", "dat7", "data6", "data04", "data7", "xyfour", "Data8", "datafour", "data8", "xy1", "Data40", "view2", "dat1"], "ans": ["s", "auto", "lan", "span", "offs", "nas", "amps", "atan", "na", "ms", "ats", "ions", "aning", "anas", "AN", "ANS", "anes", "ks", "asts", "mean", "ane", "vs", "ann", "anon", "ani", "anc", "ays", "ana", "ands", "can", "errors", "nan", " means", "An", "ars", "anus", "aned", "ons", "aus", "ens", "sk", "cs", "leans", "ants", "ns", "man", "os", "san", "plan", "ds", "oss", "an", "ins"], "a": ["aa", "s", "at", "va", "p", "na", "qa", "ai", "fa", "la", "ab", "z", "au", "pa", "da", "A", "af", "ia", "l", "u", "f", "sa", "ca", "ac", "asa", "area", "am", "aj", "ae", "alpha", "ea", "an"], "b": ["aa", "be", "ib", "fb", "p", "bs", "bp", "g", "r", "mb", "B", "ab", "body", "sb", "l", "ob", "bb", "d", "ub", "bf", "rb", "abb", "f", "eb", "bd", "xb", "db", "binary", "e", "bc", "abc", "lb"]}}
{"code": "import itertools\\nimport sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\n\\ndef score(A):\\n    res = 0\\n    for a, b, c, d in abcd:\\n        if A[b - 1] - A[a - 1] == c:\\n            res += d\\n    return res\\n\\n  \\ndef main(n, m, abcd):\\n    p = itertools.combinations_with_replacement(range(1, m+1), n)\\n    L = list(p)\\n    ans = 0\\n    for A in L:\\n        ans = max(ans, score(list(A)))\\n    return ans\\n\\n\\nn, m, q = map(int, readline().split())\\nabcd = [list(map(int, readline().split())) for _ in range(q)]\\n\\nprint(main(n, m, abcd))", "target": "0", "substitutes": {"read": ["new", "call", "text", "raw", "open", "str", "reader", " write", "method", "stream", "access", "g", "load", "lex", "r", "rec", "rx", "Read", "content", "connect", "write", "long", "array", "run", "READ", "x", "each", "put", "current", "get", "readable", "reach", "f", "right", "walk", "copy", "scan", "input", "check", "reads", "data", "select", "play", "reading", "print", "add", "feed"], "readline": ["loadme", "readinglist", "readinglines", "loadlines", "READline", "readingme", "loadpage", "inputline", "readerlines", " readfile", " readlist", "readlist", "loadline", "readl", "inputstring", "writelines", "loadfile", "READLINE", "readerpage", " readl", "readingline", "readerline", "inputl", "readerfile", "writeline", "readingstring", "readstring", "readingfile", " readstring", " readLINE", "readLINE", "inputlist", " readpage", "writelist", " readme", "READlines", "readme", "readingl", "READlist", "readpage", "readfile", "writeLINE"], "readlines": ["Readpoints", "readstrings", "readframes", "readinglines", "workpoints", "iterline", "Readstrings", "Readline", "writeframes", "worklines", "writelines", "Readlines", "iterframes", "readingline", "workline", "writeline", "writestrings", "workstrings", "iterstrings", " readpoints", " readstrings", "iterlines", "readingframes", "readingstrings", "readpoints"], "A": ["F", "All", "Max", "H", "X", "Y", "na", "AP", "LA", "K", "LP", "analysis", "O", "ap", "P", "B", "C", "mA", "D", "T", "Ar", "As", "API", "array", "AA", "au", "art", "Alpha", "S", "An", "I", "ac", "Array", "CA", "am", "Analysis", "U", "R", "alpha", "M", "N", "G", "Am", "NA", "ad", "an", "App"], "res": ["Rs", "ras", "vals", "eps", "arr", "ps", "ms", "rows", "err", " Res", "grades", "Results", "des", "rx", "r", "results", "result", "pres", "rep", "re", "gr", "reg", "rez", " results", "Res", "runs", "max", "ons", "resolution", "RES", "rc", "cs", "details", "ns", "resp", "os", "features", "cons", "ds", "ret", "rs", "sum"], "a": ["aa", "s", "na", "ai", "aw", "i", "y", "r", "ba", "B", "ab", "au", "z", "da", "x", "w", "l", "u", "ca", "f", "sa", "ac", "j", "am", "ae", "alpha", "e", "an", "ad"], "b": ["s", "k", "aa", "bs", "g", "i", "y", "r", "o", "h", "wb", "B", "ba", "ab", "z", "x", "w", "sb", "l", "u", "rb", "f", "j", "db", "v", "e", "bc", "nb"], "c": ["s", "k", "g", "i", "y", "r", "h", "C", "lc", "z", "x", "cy", "w", "l", "u", "f", "ca", "ac", "dc", "cd", "ci", "cf", "e", "cr", "cc", "col", "abc"], "d": ["dx", "dd", "dy", "g", "i", "dat", "r", "D", "z", "da", "dm", "w", "l", "de", "u", "do", "f", "dt", "bd", "du", "dc", "cd", "df", "di", "e", "dp", "ds", "ad"], "n": [" N", "s", "k", "name", "mn", "i", "y", "r", "o", "en", "num", "nc", "number", " i", " na", "un", "ne", "z", "on", "x", "ar", "sn", "w", "conn", "l", "u", "cn", "max", "nt", "f", "j", "ln", "ns", "no", "v", "np", "e", "N", "t", "nb", "an"], "m": ["s", "k", "mn", "ms", "g", "nm", "i", "y", "o", "r", "h", "ym", "mean", "z", "x", "fm", "dm", "mu", "w", "cm", "l", "u", "f", "j", "sm", "M", "v", "e", "mm", "hm", "mc"], "abcd": ["abcdn", "rabcz", "abdd", "abcb", "abcz", " Absc", "abccdn", " Abdd", " abcb", " abcz", "abccc", " Abcd", " abdd", "abd", "ABcd", "habcz", " abcdn", "rabcd", "abcc", "habcc", " AbCD", "habCD", "abcdc", "apsd", "ABsc", "habcd", "ABCD", "abdc", "ABdd", "apsdc", "abccd", " abd", " absc", " abdc", " abcc", "apscd", "apscdn", "habcb", "habdc", "abcCD", "rabcb", "abCD", "rabCD", " abCD", "absc"], "p": ["lp", "s", "op", "pre", "ps", "g", "fp", "i", "o", "r", "h", "cp", "ap", "P", "ar", "l", "u", "pi", "f", "j", "pp", "list", "np", "t", "e", "pe", "pot", "part", " P", "pc"], "L": ["F", "lp", "E", "line", "LB", "V", "LT", "IL", "NL", "Q", "LA", "LP", "Lu", "O", "P", "B", "C", "LM", "D", "LD", "S", "I", "l", "Li", "LR", "EL", "CL", "Cl", "list", "U", "List", "M", "LO", "LI", "N", "LL", "Ul", "cl", " l"], "ans": ["ss", "s", "ents", "lan", "nas", "ras", "span", "vals", "na", "ps", "ms", "ats", "ions", "es", "results", "AN", "ANS", "ann", "anon", "ani", "anc", " results", "ays", "ana", "x", "can", " means", "An", "S", "nan", "ars", "aned", "lines", "max", "ons", "ids", "ens", "leans", "cs", "ants", "ns", "rank", "scan", "list", "os", "reads", "ings", "N", "ls", "gen", "plan", "seq", "an", "ins"], "q": ["k", "sq", "int", "qs", "qu", "qi", "Q", "qa", "g", "i", "y", "h", "iq", "z", "ch", "quality", "x", "w", "l", "u", "max", "f", "dq", "query", "qt", "v", "e", "count", "id", "qq"], "_": [" seq", " time", " __", " the", "all"]}}
{"code": "while(1):\\n H,W=map(int,input().split());\\n if H==0 and W==0 :\\n   break\\n else: \\n    print(('#'*W+'\\n')*H)", "target": "296", "substitutes": {"H": ["F", "HL", "Length", "OH", "L", "V", "HS", "RH", "Q", "X", "HB", "Y", "DH", "K", "h", "IT", "SH", "Ha", "HC", "AH", "P", "B", "T", "C", "WH", "NH", "He", "HE", "EH", "HHHH", "I", "HD", "Ch", "MH", "HH", "CL", "HI", "M", "J", "FH", "HT", "N", "Wh", "FW", "ML", "CH", "HY"], "W": ["F", "E", "L", "V", "Q", "X", "Y", "WD", "WE", "Width", "WR", "WP", "K", "SW", "SH", "NW", "GW", "AW", "P", "B", "C", "T", "D", "WH", "w", "EH", "Word", "We", "DW", "Web", "WI", "WS", "WB", "WA", "WF", "M", "J", "EW", "N", "Wa", "VW", "G", "Wh", "FW", "BW"]}}
{"code": "def Find(x, par, diff_weight):\\n    if par[x] < 0:\\n        return x\\n    else:\\n        px = Find(par[x], par, diff_weight)\\n        diff_weight[x] += diff_weight[par[x]]\\n        par[x] = px\\n        return px\\n\\ndef Unite(x, y, par, rank, diff_weight, w):\\n    w += diff_weight[x] - diff_weight[y]\\n    x = Find(x, par, diff_weight)\\n    y = Find(y, par, diff_weight)\\n\\n    if x != y:\\n        if rank[x] < rank[y]:\\n            x, y =  y, x\\n            w = -w\\n        if rank[x] == rank[y]:\\n            rank[x] += 1\\n        par[x] += par[y]\\n        par[y] = x\\n        diff_weight[y] = w\\n\\ndef Same(x, y, par, diff_weight):\\n    return Find(x, par,diff_weight) == Find(y, par, diff_weight)\\n\\ndef Size(x, par, diff_weight):\\n    return -par[Find(x, par, diff_weight)]\\n\\ndef Weight(x, par, diff_weight):\\n    Find(x, par, diff_weight)\\n    return diff_weight[x]\\n\\ndef Diff(x, y, par, diff_weight):\\n    return Weight(y, par, diff_weight)  - Weight(x, par, diff_weight)\\n\\nimport sys\\ninput = sys.stdin.buffer.readline\\nn, m = map(int, input().split())\\n\\npar = [-1]*n\\nrank = [0]*n\\ndiff_weight = [0]*n\\n\\nfor i in range(m):\\n    l, r, d = map(int, input().split())\\n    l, r = l-1, r-1\\n    if not Same(l, r, par, diff_weight):\\n        Unite(l, r, par, rank, diff_weight, d)\\n    else:\\n        if Diff(l, r, par, diff_weight) != d:\\n            print('No')\\n            exit()\\nelse:\\n    print('Yes')\\n", "target": "672", "substitutes": {"x": ["name", "s", "int", "com", "create", "rx", "per", "ix", "content", "any", "l", "q", "f", "j", "ya", "data", "xe", "xp", "b", "xy", " xp", "example", "full", "code", "sex", "X", "tx", "ic", "xs", "host", "xx", "yx", "h", "pos", "cross", "u", "pp", "sw", "ci", "v", "key", "e", "id", "xc", "python", "p", "width", "r", "lex", "el", "z", "ex", "index", "es", "image", "d", "max", "ww", "mx", "pixel", "my", "t", "yp", "dx", "k", "a", "Y", "g", "c", "fx", "o", "work", "ph", "search", "wx", "one", "ax", "xi", "xml", "pe"], "par": ["name", "com", "pre", "var", "arc", "rec", "per", "pr", "cp", "re", "scale", "ar", "peer", "l", "q", "cat", "list", "type", "bar", "b", "order", "er", "part", "arr", "arg", "rar", "h", "axis", "pos", "proc", "mp", "array", "comp", "ars", "pi", "jp", "pp", "shape", "rel", "v", "dp", "e", "source", "vari", "ip", "pc", "op", "war", "spec", "cor", "p", "ps", "inter", "r", "like", "sp", "har", "pa", "params", "index", "d", "row", "dr", "scan", "parent", "ep", "dim", "pixel", "param", "k", "pal", "c", "plot", "app", "ph", "P", "car", "cook", "search", "patch", "php", "star", "ax", "sr", "PAR", "query", "Par", "pair", "pe", "mm", "parse"], "diff_weight": ["diffurelink", "different_Weight", "ifferweight", "difflycost", " diff2weight", "difflytime", "differentPw", "differwidth", "differentPsize", " diff_model", "diffPmean", "iffershape", "diff_shape", "diff_type", "diff___mask", "diff2dimension", " diff_w", "diffingcost", "test_type", "current\u00b7key", "diff_width", "diffsmodel", "diff_quality", "difftmask", "difftw", "add_money", "diff_count", "diffurestrength", "iff_rank", "diffxsize", "diff_lock", "differenttstrength", "diff_time", "diff_w", "differweight", "diffsweight", "diff2rank", " diff2scale", "difflylayer", "diffablebase", "difftweights", "diff_mask", "iffurelink", "rawurecase", "different_mask", "differtype", "iff_force", "change_size", "diffetcase", "testlyweight", "diffPweight", "diff2weights", "diffureforce", "difftweight", "rawureweight", "test_layer", "current_weights", "differentPweight", "differenttWeight", "diff2width", " diff_size", "diffxw", "diffswidth", "differentPmean", "different_strength", "diff2weight", " diff_time", "diff2mean", " diff_dimension", "difflylock", "diff_level", "difftWeight", "diff_layer", "differstrength", "diffurecase", "diffureweight", "diffingweight", "diff2mask", "current\u00b7weights", "diffablestrength", "diff2w", "rawurestrength", "diff_rank", "diffPw", "iffurerank", "differenttweight", "rawurelevel", "ifferrank", "iffureweight", "diff_weights", "testlylayer", "diff2strength", "different_mean", "diffxweight", "difflystrength", " diff_rank", "change_w", " diff2mask", "same_cost", "difftsort", " diff_depth", "current_key", "same_weight", "diff_money", "diffablescale", "diff_scale", "change_weight", "different_w", "raw_case", "change_large", "diffxmean", "diff_link", "raw_weight", " diff_sort", "diff2size", "differshape", "difflywidth", "diff\u00b7strength", "iffureforce", "add_mass", "diffsweights", "difflytype", "difftstrength", "same_time", "different_size", "current_weight", "differrank", " diff2rank", "diff\u00b7weights", "diff_rating", "diff_Weight", "diff_mean", "testlytype", "diff_force", "current\u00b7count", " diff_strength", "diffableweight", "differlayer", " diff_key", " diff_mask", " diff_rating", "diff\u00b7weight", "diff_size", "difflyshape", "change_quality", " differences2width", "diffetstrength", "current_count", "diffablelength", "diff_length", "diffingtime", "same_shape", "iff_shape", "diff_cost", " diff_weights", "different_base", "differenttmask", " differences_scale", "diff___strength", "current\u00b7weight", "diff\u00b7mask", "diffurerank", "ifferstrength", "diff_member", "change_width", "diffxkey", "test_weight", "diff2count", "diffurelevel", "diff_base", "difflyweight", "diffalshape", " differences_weight", " differences2weight", "diff_sort", "diffablequality", "diff_large", "iff_strength", "diff2key", " differences_width", "diffalrating", " diff_width", "diff_model", "iff_weight", "different_scale", "add_time", "diff_strength", "add_weight", "diff___Weight", "diffPsize", "diff___weight", "diff\u00b7key", "diffablesize", " diff_lock", "diffetlevel", "diffetweight", "diffxcount", "testlywidth", "test_width", " diff_scale", "diffxweights", "diffingshape", "diff2scale", " differences2scale", "difflymember", "different_weight", "diff_dimension", "diffalsize", "raw_strength", "diff_depth", "diff_case", " diff_shape", "diff_mass", " diff_member", " diff2weights", "diffalweight", "iff_link", "diff_key", "diff\u00b7count", " diff2strength", "change_length", "raw_level"], "px": ["ss", "Pixel", "dd", "wp", "X", "p", "ps", "xs", "yx", "xx", "fx", "rx", "css", "ix", "pm", "pos", "png", "cp", " pixel", "ph", "pt", "P", "sp", "pa", "image", "pex", "wx", "php", "pi", "ax", "cs", "pp", "kit", "xi", "mx", " pixels", "ws", "XY", "xp", "pixel", "padding", "np", "pdf", "pn", "xy", "yp", "py", "sky", "pc"], "y": ["yr", "s", "yi", "ny", "l", "yt", "q", "j", "f", "sy", "ky", "ya", "type", "b", "yl", "xy", "ry", "ies", "ie", "code", "X", "ic", "xx", "yx", "h", "ay", "yo", "u", "ish", "yy", "oy", "ci", "v", "key", "e", "ey", "sky", "ys", "dy", "python", "ye", "p", "sys", "r", "z", "ch", "cy", "d", "io", "t", "yp", "py", "vy", "k", "a", "gy", "Y", "g", "c", "o", "yn", "ym", "ty", "xi"], "rank": ["level", "ranked", "var", "arc", "height", "rec", "comment", "re", "scale", "Rank", "ar", "root", "right", "pull", "type", "bar", "dev", "order", "er", "error", "win", "div", "comp", "score", "ank", "pp", "depth", "v", "pc", "rr", "ack", "war", "spec", "p", "dist", "strip", "r", "weight", "index", "d", "max", "row", "sort", "dr", "ow", "rock", "count", "grade", "param", "ranking", "k", "sc", "c", "err", " r", "work", "cost", "diff", "patch", "star", "rc", "ax", "query", "review", "check", "nr", "cr", "parse", "range"], "w": ["s", "wa", "wi", "wt", "wp", "tw", "win", "p", "g", "aw", "c", "width", "rw", "h", "r", "fw", "work", "we", "wb", "wh", "weight", "z", "ew", "W", "kw", "wx", "u", "d", "max", "f", "nw", "ww", "sw", "ws", "wl", "wd", " W", "v", "b", "ow", "wu", "iw"], "input": ["error", "call", "text", "raw", "op", "line", "int", "str", "reader", "request", "sample", "method", "enter", "process", "element", "resource", "load", "but", "comment", "iter", "empty", "expression", "file", "hit", "action", "next", "current", "buffer", "out", "f", "position", " Input", "note", "pull", "output", "entry", "got", "data", "Input", "parent", "type", "string", "help", "select", "session", "print", "step", "submit", "source", "param", "form", "ref"], "n": [" N", "min", "s", "k", "part", "p", "na", "g", "c", " ni", "o", "number", "nc", "en", "num", "r", " c", "pos", "net", "ne", "z", "sn", "l", "d", "nt", "nn", "max", "q", "ln", "f", "j", "ns", "no", "nl", "nr", "v", "b", "np", "e", "N", "t", "pn", " num", "nb"], "m": ["s", "mn", "rm", "mi", "p", "ms", "g", "c", "nm", "o", "r", "h", "num", "number", "nc", "mean", "size", "z", "mini", "dm", "om", "l", "d", "f", "position", "bm", "man", "M", "v", "b", "e", "N", "mm", "nb"], "i": ["k", " bi", " it", " z", "p", "c", " I", " ni", "r", " iP", "ine", " ind", " e", " k", "z", "ind", " q", " il", "I", " dummy", "it", "j", " j", " ii", "e", "li"]}}
{"code": "# https://atcoder.jp/contests/abc123/tasks/abc123_c\\nimport sys\\n# sys.setrecursionlimit(100000)\\n\\n\\ndef input():\\n    return sys.stdin.readline().strip()\\n\\n\\ndef input_int():\\n    return int(input())\\n\\n\\ndef input_int_list():\\n    return [int(i) for i in input().split()]\\n\\n\\ndef main():\\n    n = input_int()\\n    a = input_int()\\n    b = input_int()\\n    c = input_int()\\n    d = input_int()\\n    e = input_int()\\n    _min = min(a, b, c, d, e)\\n    ans = (n // _min) - 1 + 5\\n    if n % _min > 0:\\n        ans += 1\\n    print(ans)\\n\\n    return\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "784", "substitutes": {}}
{"code": "#!/usr/bin/env python3\\nt, s = map(int, input().split())\\nprint(t/s)\\n", "target": "317", "substitutes": {}}
{"code": "def main():\\n    n,k = map(int, input().split())\\n\\n    c = 0\\n    while True:\\n        if n >= k ** c:\\n            c += 1\\n        else:\\n            break\\n    \\n    print(c)\\n    return\\nmain()\\n", "target": "719", "substitutes": {"n": [" N", "p", "g", "i", "o", "y", "nc", "r", "nu", "ne", "x", "l", "u", "d", "cn", "max", "nt", "nn", "j", "f", "m", "ac", "ns", "ni", "ci", "nr", "v", "b", "t", "N", "e", "nb"], "k": ["km", "ke", "p", "g", "i", "dk", "K", "o", "r", "num", "kk", "ks", "size", "kn", "z", "x", "mk", "kw", "w", "ko", "u", "d", "max", "q", "j", "sk", "f", "m", "ku", "kick", "v", "key", "ck", "e", "kr"], "c": ["cur", "loc", "call", "cycle", "code", "p", "g", "i", "o", "r", "h", "nc", "y", "C", "lc", "uc", "z", "fc", "ch", "ce", "x", "unc", "cy", "cu", "current", "con", "l", "u", "d", "f", "cs", "m", "dc", "co", "ci", "ct", "v", "b", "cf", "e", "t", "count", "cc", "cr", "col", "pc", "enc", "abc"]}}
{"code": "def collatz(n):\\n    return 3*n+1 if n%2 else n//2\\na,n=[],int(input())\\nwhile len(set(a))==len(a):\\n    a.append(n)\\n    n=collatz(n)\\nprint(len(a))", "target": "551", "substitutes": {"n": ["min", "name", "k", "s", "p", "na", "nd", "g", "c", "nm", "i", "o", "y", "nc", "num", "number", "r", "un", "h", "bn", "rn", "ne", "nu", "z", "fn", "x", "nan", "gn", "A", "sn", "node", "w", "body", "adj", "args", "l", "cn", "d", "u", "nn", "nt", "j", "f", "ln", "m", "none", "ns", "no", "ni", "data", "len", "v", "b", "e", "N", "pn", "t", "dn", "nb", "an"], "a": ["aa", "s", "va", "p", "na", "ai", "c", "aw", "i", "fa", "o", "y", "ba", "ab", "z", "array", "au", "index", "x", "da", "A", "w", "args", "u", "f", "sa", " A", "ac", "ga", "ca", "area", "aux", "input", "am", "aj", "data", "ae", "alpha", "b", "ea", "t", "an"]}}
{"code": "from queue import Queue\\nN = int(input())\\nG = [[] for _ in range(N)]\\nC = [[] for _ in range(N)]\\nfor _ in range(N-1):\\n    a, b, w = map(int, input().split())\\n    a -= 1\\n    b -= 1\\n    G[a].append(b)\\n    C[a].append(w)\\n    G[b].append(a)\\n    C[b].append(w)\\nans = [-1] * N\\nans[0] = 0\\nque = Queue()\\nque.put(0)\\nwhile not que.empty():\\n    v = que.get()\\n    l = len(G[v])\\n    for i in range(l):\\n        u = G[v][i]\\n        w = C[v][i]\\n        if ans[u] != -1:\\n            continue\\n        ans[u] = (ans[v] + w) % 2\\n        que.put(u)\\nprint(*ans, sep='\\n')", "target": "300", "substitutes": {"N": ["F", "E", "Number", "L", "V", " L", "NN", "NL", "H", "Q", "X", "Y", "NC", "Size", "Num", "NS", "NE", "K", "Na", "NM", "O", "P", "B", "T", "D", "Len", "Ne", "S", "A", "W", "I", "No", "NT", "NG", "Z", "Ns", "Cl", "R", "M", "NB", " n", " Ne", "NA", " NI", "An", "n"], "G": ["GM", "GA", "E", "L", "GE", "IG", "V", "Q", "Gs", "Y", "g", "c", "Ge", "GW", "P", "B", "GD", "Gr", "D", "FG", "Gen", "GU", "GC", "GP", "Go", "A", "W", "Can", "S", "GR", "GH", "GF", "Sc", "CG", "GG", "U", "GB", "R", "M", "GS", "GN", "LG", "Ga", "Gu", "GV", "Group", "GT"], "_": ["s", "k", " block", "__", "non", "place", "p", "ing", "lex", "en", "un", " x", " seq", " time", "long", "x", " un", " q", "d", "q", "out", "f", " non", " j", "ip", " self", "t", "all", "id", "val", "block", "n"], "C": ["CT", "E", "CE", "L", "V", "CI", "Cu", "CU", "SC", "NC", "c", "DC", "K", "CNN", "P", "B", "EC", "Cache", "AC", "T", "BC", "GU", "GC", "A", "W", "Can", "CM", "KC", "CD", "Ch", "VC", "Sc", "CG", "CL", "CA", "MC", "CS", "U", "R", "CP", "CC", "Custom", "CR"], "a": ["aa", "s", "wa", "va", "ma", "p", "ai", "g", "aw", "c", "y", "r", "ba", "ab", "au", "da", "x", "A", "ak", "d", "f", "sa", " A", "ac", "ca", "ga", "aj", "am", "ae", "alpha", "e", "all", "an", "ad", "n"], "b": ["s", "aa", "k", "be", "ib", "p", "bs", "g", "c", "y", "r", "h", "o", "wb", "B", "ba", "ab", "z", "x", "A", "sb", "d", "bb", "rb", "f", "j", "eb", "m", "e", "nb", "n"], "w": ["s", "k", "wa", "wi", "wt", "win", "p", "g", "c", "aw", "rw", "y", "r", "h", "o", "fw", "how", "wh", "we", "ab", "z", "wal", "x", "ew", "W", "kw", "wed", "wx", "d", "q", "f", "m", "sw", "ww", "ws", "wo", "wan", "wd", " W", "ow", "e", "t", "wu", "iw", "n"], "ans": ["s", "ents", "nas", "span", "ai", "anas", "ks", "ane", "names", "ands", "x", "nan", " plans", "ons", "sk", "ants", "ings", "plan", "ins", "amps", "ats", "AN", "ads", "ANS", "aces", "au", "ana", "ars", "cs", "Ns", "os", "ANN", "an", "lan", "cas", "ams", "gan", "ions", "aning", "Na", "anes", "annels", "ann", "ones", "es", "can", "A", "lang", "ns", "anners", "scan", "ases", "actions", "ls", "cons", "An", "ano", "eps", "na", "aos", "vs", "anon", "ani", "anc", "annot", "ays", "als", "outs", " means", "args", "aned", "ations", "aus", "ens", "han", "n"], "que": ["prom", "cur", "wa", "pool", "sh", "line", "sc", "vel", "queue", "qu", "Queue", "Q", "p", "qa", "ge", "ai", "c", " queue", "en", "log", "onge", "fe", "la", "qv", "lc", "cle", "po", "au", "ou", "ques", "cache", " q", "con", "de", "req", "q", "he", "job", "f", "che", "sync", "core", "ue", "live", "hi", "db", "quit", "ae", "lu", "complete", "bar", "e", "sem", "bc", "pe", "ha", "le", "py", "li", "cl", "uu", "loop", "Que", "lo"], "v": ["s", "k", "vi", "ui", "ve", "uv", "V", "va", "p", "g", "c", "vu", "o", "r", "h", "gu", "ver", "lv", "vs", "vin", "ou", "vp", "x", "nv", "av", "vm", "vr", "d", "q", "f", "j", "iv", "m", "vv", "vc", "U", "vt", "e", "sv", "ii", "ev", "n"], "l": ["s", "k", "ol", "L", " L", "p", "al", "g", "c", "o", "h", "sl", "el", "lc", "kl", "z", "d", "ll", "f", "ln", "dl", "lf", "j", "length", "len", "e", "ls", "il", "ul", "li", "n"], "i": ["gi", "s", "k", "ui", "qi", "p", "ai", "g", "c", " I", "y", "o", "gu", "r", "h", "iu", "api", "z", "si", "x", "ind", " il", "I", "d", "j", "f", "io", "m", " j", "ip", "e", "t", "li", "ii", "n"], "u": ["s", "k", "ui", "chu", "ur", "p", "g", "c", "o", "y", "h", "r", "un", "nu", "uc", "ou", "uid", "x", "cu", "ug", "d", "q", "uni", "bu", "f", "ut", "eu", "ue", "up", "tu", "us", "U", "su", "lu", "e", "ul", "ru", "uu", "uk", "n"]}}
{"code": "def readinput():\\n    n=int(input())\\n    return n\\n\\ndef main(n):\\n    x7=int(n/1.07)+1\\n    x9=int(n/1.09)-1\\n    n100=n*100\\n    for x in range(max(1,x9),x7+1):\\n        xx=x*108//100\\n        #print(x,xx)\\n        if xx==n:\\n            print(x)\\n            break\\n    else:\\n        print(':(')\\n\\n        \\n\\nif __name__=='__main__':\\n    n=readinput()\\n    main(n)\\n", "target": "194", "substitutes": {"n": [" N", "k", "p", "na", "nd", "init", "g", "c", "i", "o", "y", "nc", "num", "r", "net", "en", " c", "number", "nu", "ne", "z", "fn", "sn", "w", "node", "l", "u", "d", "nn", "nt", "max", "f", "j", "m", "nw", "network", "ns", "v", "b", "np", "len", "t", "N", "e", "nb"], "x7": ["X9", "X6", " x770", "ix7", "X7", "x6", "x770", "ix770", "y770", "y9", "y6", "y7", " x6"], "x9": ["X9", "X6", " x09", "n9", "n8", "p7", "p6", "X7", "x6", "x8", "x09", "p8", " x8", "n99", "X09", "p9", "x99", " x6", " x99", "X99", "n09", "X8"], "n100": ["l401", "N150", " n401", "l360", "l150", "n401", " n360", "n150", " n150", "N360", "l100", "n360", "N100", "N401"], "x": ["change", "int", "fix", "X", "p", "c", "i", "y", "number", "h", "num", "ix", "el", "z", "xt", "ex", "index", "xxx", "w", "l", "u", "d", "max", "q", "f", "j", "ax", "v", "t", "e", "xy", "id", "xc"], "xx": ["ss", "aa", "XXXX", "fix", "XX", "X", "px", "xxx", "xxxx", "XXX", "hh", "nn", "zz", "pp", "xi", "vv", "yy", "ck", "mm", "xc", "abc", "xxxxxxxx"]}}
{"code": "S = input()\\nf = int(S[0]+S[1])\\nb = int(S[2]+S[3])\\n\\ndef judge(int):\\n    if 1 <= int <= 12:\\n        return 0\\n    else:\\n        return 1\\nref = [judge(f), judge(b)]\\n\\nif ref == [1, 1]:\\n    print(\"NA\")\\nelif ref == [0, 1]:\\n    print(\"MMYY\")\\nelif ref == [1, 0]:\\n    print(\"YYMM\")\\nelse:\\n    print(\"AMBIGUOUS\")\\n", "target": "17", "substitutes": {"S": ["F", "s", "E", "L", "STR", "IS", "V", "DS", "H", "SC", "Q", "SF", "Y", "X", "SE", "Sample", "NS", "Si", "Test", "SEC", "TS", "PS", "SH", "ST", "Source", "SAM", "SI", "O", "SA", "P", "T", "B", "C", "D", "SB", "Sa", "A", "W", "SL", "RS", "I", "SS", "input", "U", "R", "Input", "M", "String", "SP", "Sin", "N", "SN", "G", "SU"], "f": ["F", "s", "k", "a", "fb", "p", "g", "c", "i", "h", "y", "r", "fe", "inf", "fs", "z", "fc", "x", "af", "l", "u", "d", "bf", "j", "m", "df", "v", "e", "t", "n"], "b": ["s", "k", "a", "ib", "fb", "p", "bs", "g", "c", "i", "y", "r", "emb", "mb", "B", "ab", "x", "sb", "bel", "l", "bb", "d", "abb", "j", "bot", "v", "lb", "e", "bas", "nb", "n", "ad", "bis"], "int": ["float", "min", "digit", "struct", "const", "code", "str", "void", "win", "arg", "p", "inter", "Integer", "element", "i", "c", "ints", "number", "iter", "Int", "long", "index", "x", "inc", "start", "ind", "integer", "uint", "sec", "u", "max", "object", "point", "INT", "pad", "input", "set", "list", "alpha", "string", "limit", "v", "count", "id", "step", "double", "val", "inner", "n"], "ref": ["aff", "REF", "end", "alt", " references", "p", "c", "i", "arc", "num", "pos", "re", "inf", "conf", "ab", "index", "diff", "x", "crit", "cache", "af", "ind", " reference", "ob", "bf", "req", "page", "object", "one", "Reference", "null", "br", "rel", "type", "string", "reference", "count", "all", " Ref", "col", "id", "Ref", "val", "cl", "word", "source", "ror", "block"]}}
{"code": "import math\\nn = int(input())\\nfor i in range(1,50001):\\n    if math.floor(i * 1.08) == n:\\n        print(i)\\n        break\\nelse:\\n    print(\":(\")", "target": "194", "substitutes": {"n": [" N", "k", "p", "g", "c", "o", "number", "nc", "num", "r", "y", "nu", "ng", "fn", "x", "index", "nan", " fn", "sn", "l", "nin", "cn", "nn", "nt", "f", "ln", "j", "m", "ns", "nr", "b", "e", "N", "pn", "inner", "nb", "an"], "i": ["k", "a", "iri", "int", "chi", "p", "phi", "ai", "c", "y", "r", "ini", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "q", "j", "f", "m", "xi", "input", "di", "ri", "hi", "ci", "v", "b", "e", "count", "id", "li", "ii", "bi"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nN = [0] * (n+1)\\nfor i in range(1, n+1):\\n    N[i] += N[i-1] + a[i-1]\\n\\nMax = N[-1]\\nans = float(\"INF\")\\nfor i in range(1, n):\\n    if abs(N[i] - (Max-N[i])) < ans:\\n        ans =  abs(N[i] - (Max-N[i]))\\nprint(ans)", "target": "424", "substitutes": {"n": ["s", "k", "mn", "span", "p", "c", "o", "Na", "nc", "en", "y", "num", "h", "size", "ne", "z", "x", "nan", "A", "w", "l", "u", "d", "max", "nt", "nn", "f", "j", "m", "network", "Ns", "ns", "no", "ni", "b", "e", "t", "nb", "an"], "a": ["aa", "s", "auto", "active", "p", "na", "ai", "c", "y", "Na", "r", "ab", "au", "array", "ana", "da", "Alpha", "x", "A", "w", "args", "l", "f", "sa", "asa", "ac", "m", "area", "aj", "alpha", "b", "all", "NA", "an", "ad"], "N": ["F", "Network", "NF", "L", "Number", "V", "NN", "One", "X", "Q", "Y", "Size", "NC", "Num", "NE", "K", "Na", "NW", "NM", "AN", "CNN", "O", "P", "T", "C", "B", "D", "Len", "NP", "NH", "Ne", "S", "A", "W", "I", "RN", "No", "NT", "NG", "max", "Node", "Ni", "Z", "Data", "Net", "Ns", "Array", "ND", "U", "R", "M", "GN", "CN", "Name", "SN", "G", "NA", "Wh", "Norm"], "i": ["gi", "ih", "k", "ui", "ie", "int", "ami", "ei", "qi", "p", "init", "ai", "c", "oi", "o", "y", "ini", "num", "ix", "iu", "api", "ti", "z", "si", "eni", "index", "x", "yi", "on", "ind", "start", "uli", "I", "uri", "l", "u", "pi", "d", "fi", "it", "ki", "io", "j", "f", "m", "cli", "xi", "di", "ri", "ni", "ci", "ip", "v", "b", "e", "t", "info", "multi", "id", "zi", "li", "ii", "bi"], "Max": ["Power", "Next", "Length", "First", "Limit", "Az", "X", "nd", "Size", "Num", "K", "Prime", "Range", "Rest", "Most", "And", "Ne", "Inf", "Head", "Major", "Can", "Res", "Id", "Rh", "We", "No", "Min", "max", "Node", "MAX", "ax", "Ax", "Dec", "Big", "Array", "Ra", "Sum", " max", "Wh", "Ang", "Mid", "Last", "Block", "Plus", "An", "Conf", "Ex", "Ad"], "ans": ["ano", "s", "auto", "ents", "cas", "lan", "ras", "nas", "amps", "ins", "ams", "atan", "na", "offs", "ai", "ms", "ats", "gan", "Ann", "aning", "anas", "AN", "ANS", "ann", "anon", "ani", "anc", "ays", "ania", "x", " means", "A", "An", "ars", "nan", "eps", "anus", "aned", "ations", "max", "ons", "aus", "anan", "ens", "leans", "ants", "ns", "os", "ians", "oss", "an"]}}
{"code": "# https://atcoder.jp/contests/agc008/tasks/agc008_a\\nx, y = map(int, input().split())\\n\\nans = float('inf')\\nfor i in range(4):\\n    t = 0\\n    if i == 0:\\n        tx = -1 * x\\n        ty = y\\n        t += 1\\n    elif i == 1:\\n        tx = x\\n        ty = -1 * y\\n        t += 1\\n    elif i == 2:\\n        tx = -1 * x\\n        ty = -1 * y\\n        t += 2\\n    else:\\n        tx = x\\n        ty = y\\n    if tx <= ty:\\n        t += ty - tx\\n        ans = min(ans, t)\\n\\nprint(ans)", "target": "15", "substitutes": {}}
{"code": "import math\\nn = int(input())\\nprint(int(2 * n / math.gcd(2, n)))", "target": "762", "substitutes": {"n": [" N", " p", "k", "a", "p", "g", "c", "i", "y", "number", "nc", "num", " c", "net", "o", "nu", " f", "z", "fn", "x", "norm", "nan", " fn", "node", "l", "u", "d", "nn", "nt", " m", "ln", "f", "j", "m", "none", "ns", "no", "nl", "b", "v", "e", "N", "count", "t", " l", "nb", " b"]}}
{"code": "A_word = str(input().rstrip())\\nB_word=  str(input().rstrip())\\n\\ncounter=0\\nfor i in range(len(A_word)):\\n    if A_word[i]!=B_word[i]:\\n        counter+=1\\nprint(counter)", "target": "123", "substitutes": {"A_word": ["AParwords", "AParword", "B_part", "A_words", "A_letter", "A_w", "B_letter", "B_w", "AParterm", "APardirection", "B_direction", "A_term", "A_direction", "B_words", "A_part", "B_term"], "B_word": ["BParmatch", "A_words", "A_match", "A_letter", "B_letter", "BParstring", "A_token", "B_words", "A_string", "BParwords", "B_token", "B_match", "B_string", "BParword"], "counter": ["name", "field", "int", "code", "ner", "inter", "c", "number", "instance", "result", "num", "Counter", "lr", "iter", "starter", "second", "phrase", "time", "index", "x", "master", "current", "offset", "score", "outer", "stop", "amount", "entry", "parent", "no", "batch", "match", "type", "key", "nr", "race", "count", "reference", "ter", "step", "timer", "inner", "skip", "loop"], "i": ["gi", "k", "ui", "a", "int", "qi", "mi", "p", "ai", "c", "h", "gu", "ix", "iu", "slice", "ti", "si", "eni", "index", "x", "yi", "ind", "start", "I", "uri", "l", "fi", "u", "d", "pi", "uni", "j", "f", "io", "xi", "ri", "di", "ci", "b", "e", "multi", "id", "li", "ii", "inner", "bi", "n"]}}
{"code": "# coding: utf-8\\n# Your code here!\\nn=int(input())\\na=[0]*n\\nb=[0]*n\\nca=0\\nans=0\\nfor i in range(n):\\n    a[i],b[i]=map(int,input().split())\\nfor j in range(n):\\n    if a[j]>ca:\\n        ca=a[j]\\n        ans=a[j]+b[j]\\nprint(ans)", "target": "266", "substitutes": {}}
{"code": "n, a, b = map(int, input().split())\\n\\nans = 0\\ncnt = 0\\nfor i in range(a, n+1):\\n    res = 0\\n    num = i\\n    while num > 0:\\n        res += num % 10\\n        num //= 10\\n\\n    if res >= a and res <= b:\\n        ans += i\\n\\nprint(ans)", "target": "704", "substitutes": {"n": ["s", "k", "p", "g", "c", "o", "number", "r", "nc", "y", "net", "z", "x", "w", "l", "u", "d", "nt", "f", "j", "m", "ns", "np", "e", "N", "nb", "an"], "a": ["min", "aa", "s", "int", "p", "na", "qa", "ai", "c", "aw", "y", "ba", "ab", "au", "da", "x", "A", "w", "ia", "u", "d", "f", "ca", "sa", "ac", "asa", "area", "am", "oa", "alpha", "ea", "e", "an", "ad", "offset"], "b": ["k", "fb", "p", "bs", "g", "c", "bound", "y", "r", "number", "o", "wb", "beta", "B", "ba", "ab", "z", "x", "sb", "cb", "l", "rb", "d", "bb", "u", "f", "j", "eb", "m", "v", "limit", "e", "nb", "bi"], "ans": ["ents", "int", "lan", "nas", "ras", "amps", "cas", "eps", "vals", "na", "ms", "anges", "ats", "xs", "ions", "activation", "results", "pres", "AN", "urs", "ANS", "ks", "ann", "ares", "anc", "oss", "rand", "errors", "blocks", "ays", "outs", "ars", "runs", "args", "lines", "aned", "ons", "ids", "ens", "cs", "ants", "ns", "rates", "os", "reads", "features", "acts", "rss", "ls", "ds", "rs", "an", "ins"], "cnt": ["cNT", "ncnc", "ncNT", "Cnt", " cnc", "ncno", " cno", "CNT", "cnc", "cno", "Cnc", "Cno", " cNT", "ncnt"], "i": ["s", "int", "p", "init", "ai", "c", "y", "r", "o", "ini", "ti", "z", "mini", "si", "index", "x", "ind", "start", "I", "u", "pi", "d", "j", "f", "xi", "ni", "ci", "e", "t", "info", "multi", "id", "li", "ii", "range"], "res": ["Rs", "ras", "arr", "na", "init", "err", "our", "ions", "r", "ores", "nc", "results", "result", "pres", "net", "re", "pos", "ver", "reg", "rez", "conf", " results", "uns", "rand", "x", "blocks", "ros", "Res", "cells", "runs", "con", "max", "ons", "resolution", "out", "ids", "RES", "ns", "resp", "us", "ran", "os", "rons", "rem", "ress", "rss", "nos", "cons", "seq", "id", "ret", "rs", "sum"], "num": ["min", "unit", "loc", "mn", "int", "p", "na", "init", "success", "Num", "mon", "umi", "c", "mult", "number", "r", "result", "net", "un", "ver", "nu", "anc", "nom", "ab", "index", "inc", "con", "u", " nu", "nt", "max", "nn", "uni", "out", "one", "term", "ns", "um", "no", "su", "bin", "alpha", "nr", "len", "byn", "np", "bc", "off", "col", "id", "range", "nb", "sum", "NUM"]}}
{"code": "N=int(input())\\nd=input().split()\\nD=[list(s) for s in d]\\nans=\"\"\\nfor i in range(N):\\n    ans+=d[0][i]+d[1][i]\\nprint(ans)", "target": "673", "substitutes": {"N": ["F", "L", "V", "NN", "NL", "H", "X", "Y", "NC", "NS", "K", "CNN", "O", "P", "T", "C", "B", "Len", "Ne", "S", "A", "I", "NT", "Ni", "Z", "Ns", "R", "M", "J", " n", "G", "NA", "n"], "d": ["dd", "a", "dh", "dom", "p", "nd", "std", "g", "c", "dat", "o", "dict", "sd", "ded", "done", "z", "x", "l", "Ds", "do", "xd", "f", "dt", "dl", "m", "dc", "cd", "di", "data", "b", "ld", "dim", "e", "t", "pd", "ds", "dos", "id", "ad", "n"], "D": ["dd", "DS", "L", "X", "AN", "ANS", "P", "T", "C", "B", "DD", "S", "A", "I", "CD", "Ds", "Di", "Z", " S", "ND", "M", "ds", " ND", "DI"], "s": ["ss", "k", "strings", "a", "spec", "sid", "span", "ins", "p", "states", "stat", "g", "c", "o", "r", "pos", "si", "x", "S", "w", "ind", "l", "ses", "sin", "f", "m", " S", "ns", "seconds", "abs", "b", "sing", "space", "t", "e", "id", "sv", "an", "n"], "ans": ["a", "lan", "nas", "amps", "eps", "atan", "na", "Ann", "anas", "AN", "ANS", "anes", "ks", "annels", "ann", "anon", "ani", "ays", "ana", "ania", "can", "nan", "A", "An", "ars", "S", " means", "anus", "anks", "lines", "aned", "nn", "ons", "ids", "aus", "leans", "ants", "ns", "os", " Ans", "ds", "an", "n", "ins"], "i": ["k", "name", "a", "ei", "int", "qi", "p", "ai", "c", "o", "y", "h", "r", "ini", "iu", "sp", "z", "si", "index", "x", "ind", "I", "l", "u", "pi", "j", "f", "xi", "di", "ni", "ci", "b", "v", "e", "t", "id", "li", "ii", "bi", "n"]}}
{"code": "s=input()+'T'\\nx,y=map(int,input().split())\\nif 'T' in s:\\n  pos=s.index('T')\\n  x-=pos\\n  s=s[pos+1:]\\narr=s.split('T')\\nxarr=[]\\nyarr=[]\\nfor i in range(len(arr)):\\n  l=len(arr[i])\\n  if l==0:\\n    continue\\n  if i%2==0:\\n    yarr.append(l)\\n  else:\\n    xarr.append(l)\\nx+=sum(xarr)\\ny+=sum(yarr)\\nif x%2==1 or y%2==1:\\n  print('No')\\nelse:\\n  #DP for xarr,yarr\\n  xdp=[0]*8005\\n  xdp[0]=1\\n  for val in xarr:\\n    for i in range(8004,-1,-1):\\n      if i-val<0:\\n        break\\n      if xdp[i-val]==1:\\n        xdp[i]=1\\n  ydp=[0]*8005\\n  ydp[0]=1\\n  for val in yarr:\\n    for i in range(8004,-1,-1):\\n      if i-val<0:\\n        break\\n      if ydp[i-val]==1:\\n        ydp[i]=1\\n  if xdp[x//2]==0:\\n    print('No')\\n  else:\\n    if ydp[y//2]==0:\\n      print('No')\\n    else:\\n      print('Yes')", "target": "753", "substitutes": {"s": ["ss", " p", "strings", " spaces", "sets", " js", "ims", "si", " ss", " slices", "sb", "parts", "f", "ments", " S", " self", "gs", "b", "ings", "space", "ops", "ins", "new", " lines", "sample", "states", "xs", "second", "array", "sg", "os", "string", "e", "source", "ys", "spec", "str", "p", "r", "es", "S", "lines", "services", "ses", "d", " sd", " ts", "m", "ns", "input", "ts", " parts", "t", "ls", " es", "a", "south", "words", "g", "c", "sym", "o", "sl", " asc", " cs", "w", "ches", "ssl", "ws", "single", "su", " ls", "ds", "n"], "x": ["dx", "a", "int", "sex", "X", "p", "tx", "ic", "xs", "c", "g", "xx", "width", "h", "rx", "ix", "o", "axis", "ay", "size", "z", "xt", "ex", "index", "xxx", "w", "cross", "u", "d", "max", "q", "f", "j", "ax", "m", "xi", "data", "v", "t", "e", "xy", "col", "n"], "y": ["a", "dy", "int", "ye", "p", "Y", "g", "c", "o", "ay", "ym", "size", "z", "zy", "idy", "yi", "cy", "w", "ny", "yt", "d", "pi", "j", "sy", "m", "xi", "yy", "ya", "oy", "iy", "b", "v", "yl", "t", "e", "xy", "py", "vy", "ey", "n"], "pos": ["min", "loc", "int", "str", "p", "default", "ps", "c", "exp", "pres", "axis", "pt", "size", "po", "z", "index", "diff", "ind", "start", "ass", "pi", "j", "position", "cos", "neg", "POS", "Pos", "no", "os", "len", "nos", "t", "add", "col", "eff", "val", "pose", "part", "n"], "arr": ["a", "align", "str", "int", "p", "ext", "pre", "g", "err", "c", "lat", "dat", "arc", "plot", "r", "prev", "app", "rep", "el", "attr", "Ar", "ab", "z", "array", "att", "au", "ar", "bl", "w", "ind", "adj", "u", "f", "j", "frac", "dr", "br", "ray", "list", "data", "b", "v", "dim", "t", "order", "fr", "abc", "part", "n"], "xarr": ["pbr", "xarch", " xarray", "y1", "parr", "x1", " yarray", " x2", " xattr", " yattr", "ylist", " x1", "yarray", "axarr", "x2", "ybr", "axarray", " y1", "yattr", "xarray", "plist", "parray", " xlist", "axarch", " xarch", "ax2", "xlist", "yarch", "y2", "xattr", " xbr", "xbr"], "yarr": ["Yarr", "Ybr", "xarch", "xplot", " yarray", "nplot", "zbar", "narch", "zar", " yfr", "ybar", "yarray", "Yfr", "zarr", " yaa", "narray", "yplot", "xbar", "ybr", "yar", " yarch", " yar", "xarray", "zarray", " ybr", "Yaa", " ybar", "yfr", "xaa", "xar", " yplot", "yaa", "xfr", "yarch", "narr", "xbr"], "i": ["loc", "end", "a", "L", "int", "qi", "p", "phi", "ai", "c", "o", "r", "ini", "iu", "ti", "z", "si", "index", "yi", "ind", "start", "I", "u", "pi", "j", "f", "xi", "ip", "v", "b", "e", "t", "col", "li", "ii", "n"], "l": ["lp", "loc", "ol", "L", "lin", "p", "g", "c", "ly", "sl", "r", "o", "el", "left", "split", "la", "lc", "kl", "z", "u", "ll", "ln", "dl", "j", "m", "nl", "length", "lit", "fl", "lu", "len", "b", "v", "t", "ls", "le", "li", "lb", "n"]}}
{"code": "X, Y = map(int, input().split())\\nif X % Y == 0:\\n  ans = -1\\nelif Y % X == 0:\\n  ans = X * (Y//X + 1)\\nelse:\\n  ans = X\\nif ans > 10**18:\\n  ans = -1\\nif X == 1 and Y != 1:\\n  ans = Y + 1\\nprint(ans)", "target": "396", "substitutes": {"X": ["F", "Length", "E", "YY", "ID", "L", "V", "XM", "H", "Mine", "Q", "XX", "Size", "XP", "Width", "K", "y", "TH", "AN", "FF", "O", "P", "T", "C", "Int", "D", "WH", "ONE", "x", "PE", "S", "A", "W", "XXX", "IX", "I", "max", "TX", "Line", "Z", "MAX", "CL", "XY", "Value", "U", "R", "Time", "M", "J", "CC", "XL", "N"], "Y": ["F", "YY", "E", "L", "V", "H", "Q", "XX", "AP", "IA", "YC", "OY", "y", " y", "ay", "O", "YA", "Cy", "B", "P", "T", "D", "C", "IP", "Year", "x", "S", "A", "W", "NY", "EY", "XXX", "I", "Type", "TY", "SY", "MY", "Z", "YE", "IO", "XY", "Py", "Value", "U", "AY", "Height", "M", "J", "N", "G", "Col", "CH", "HY", "My"], "ans": ["ano", "s", "aid", "ain", "a", "ents", "lan", "ras", "nas", "span", "eps", "cas", "atan", "na", "ai", "xs", "ats", "NS", "Ann", "rows", "aning", "Na", "activation", "anas", "AN", "ay", "ANS", "ane", "mean", "ann", "anon", "anc", "ani", "cus", "ana", "ays", "can", "x", " means", "nan", "An", "ars", "A", "lang", "anus", "aned", "lines", "ace", "ons", "aus", "sk", "ants", "Ns", "ns", "han", "CS", "no", "os", "san", "ls", "ANN", "plan", "sam", "an", "ad", "ins"]}}
{"code": "a=int(input())\\nprint(a/2/a if a%2 == 0 else ((a-1)/2+1)/a)", "target": "197", "substitutes": {"a": ["aa", "s", "wa", "va", "ma", "p", "access", "qa", "ai", "c", "aw", "i", "fa", "na", "y", "la", "ba", "mA", "ab", "div", "au", "pa", "x", "da", "index", "A", "action", "l", "u", "d", "ta", "ca", "f", "sa", "m", "ga", "ac", "area", "aux", "aj", "input", "ae", "data", "alpha", "am", "b", "ea", "e", "all", "count", "an", "n"]}}
{"code": "N,T = map(int,input().split())\\nt = list(map(int,input().split()))\\ncnt = 0\\nfor i in range(1,N):\\n    emp_time=(t[i]-t[i-1])-T\\n    if emp_time >= 0:\\n        cnt += T\\n    else:\\n        cnt += t[i]-t[i-1]\\nprint(cnt+T)", "target": "355", "substitutes": {"N": ["F", "E", "L", "NO", "V", "Q", "X", "Y", "NS", "NE", "NI", "K", "TN", "CNN", "O", "P", "C", "B", "D", "Ne", "S", "I", "No", "NT", "Z", "Ns", "M", "J", "NB", " n", "NUM", "n"], "T": ["F", "TIME", "E", "L", "V", "LT", "H", "Q", "X", "Y", "TA", "K", "TN", "TS", "TH", "TV", "KT", "O", "P", "C", "B", "D", "S", "DT", "W", "I", "NT", "UT", "TE", "TX", "TM", "Z", "TW", "TT", "TC", "U", "R", "Time", "TI", "M", "TF", "WT", "MT", "G", "VT", "NUM", "n"], "t": ["the", "E", "a", "L", "int", "at", "table", "tt", "to", "p", "c", "y", "o", "tp", "h", "pt", "unt", "temp", "time", "x", "tower", "I", "l", "u", "d", "template", "ta", "dt", "f", "j", "m", "TT", "tree", "M", "type", "v", "b", "e", "trial", "all", "tz", "test", "total", "n"], "cnt": ["cNT", " cpt", "cpt", "acount", "Ccount", "CNT", " ccount", "Cwd", "Cpt", " cNT", " cwd", "cct", "ccount", "acnt", "Cnt", "acNT", "acpt", "acwd", "account", " count", "lcnt", "acct", "lcct", "count", "Cct", "lcNT", "cwd", "Count", "lcount"], "i": ["gi", "k", "ui", "a", "ie", "int", "qi", "mi", "p", "phi", "ai", "c", "y", "o", "ini", "ix", "iu", "slice", "temp", "z", "mini", "si", "eni", "index", "x", "ind", "start", "I", "fi", "l", "u", "d", "pi", "j", "f", "io", "m", "xi", "di", "ip", "ci", "v", "e", "info", "multi", "id", "li", "ii", "n", "bi", "ti"], "emp_time": ["empjdepth", "temp_rate", "temp_depth", "empjtimes", "emp\u00b7depth", "empjtime", "emp\u00b7space", "emp\u00b7time", "emp_times", "temp_times", "emp_rate", "emp_space", "temp_time", "emp_depth", "emp\u00b7times", "empjspace", "temp_space"]}}
{"code": "N,M = map(int,input().split())\\nH = list(map(int,input().split()))\\nbad = []\\nfor i in range(M):\\n    A,B = map(int,input().split())\\n    if H[A-1] > H[B-1]:\\n        bad.append(B-1)\\n    elif H[A-1] < H[B-1]:\\n        bad.append(A-1)\\n    else:\\n        bad.append(A-1)\\n        bad.append(B-1)\\nprint(N-len(set(bad)))", "target": "291", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "NL", "Q", "X", "Y", "NS", "K", "NM", "O", "P", "C", "T", "D", "Ne", "S", "W", "I", "Ni", "Z", "Ns", "R", "NB", " n", "G", "n"], "M": ["F", "MN", "E", "L", "V", "Q", "X", "Y", "MI", "K", "DM", "NM", "O", "P", "C", "T", "D", "LM", "MD", "S", "W", "I", "MB", "Z", "m", "MC", "U", "R", "J", "MS", "MF", "MU", "G", "MO"], "H": ["F", "Hi", "E", " h", "OH", "L", "V", "HS", "RH", "DH", "X", "HB", "Y", "Q", "HP", "K", "h", "SH", "Ha", "HC", "AH", "O", "P", "C", "T", "D", "BB", "NH", "S", "W", "EH", "HD", "GH", "Ch", "Host", "HK", "Z", "HH", "HM", "CL", "HI", "U", "HT", "FH", "G", "HA", "CH"], "bad": ["error", "mad", "a", "best", "missing", "fix", "lab", "non", "p", "default", "err", "hide", "unknown", "post", "h", "guard", "comment", "log", "tag", "sign", "warn", "ab", "errors", "disabled", "diff", "worst", "dead", "clean", "valid", "body", "failed", "bug", "patch", "better", "d", "dis", "hand", "wrong", "ignore", "Bad", "null", "neg", "fail", "scan", "no", "data", "check", "b", "bar", "help", "base", "good", "all", "add", "big", "warning", "broken", "block", "ad", "n"], "i": ["gi", "ih", "a", "ib", "p", "ai", "c", " I", "y", "gu", "iu", "z", "index", "x", "ind", "I", "u", "d", "j", " j", "b", "il", "col", "id", "li", "ii", "ip"], "A": ["F", "AD", "E", "Ca", "a", "L", "At", "AI", "X", "AL", "Y", "AP", "IA", "LA", "AR", "EA", "Na", "Ha", "AN", "BA", "AB", "O", "AH", "P", "C", "mA", "D", "AC", "T", "SA", "API", "Ar", "AA", "As", "Alpha", "W", "I", "Ab", "AU", "PA", "Ma", "CA", "U", "Part", "b", "Am", "HA", "NA", "Fa", "AM"], "B": ["F", "E", "L", "LB", "V", "Q", "X", "Y", "UB", "AP", "CB", "Bi", "DB", "BA", "AB", "O", "Bu", "P", "C", "T", "D", "BB", "BC", "BI", "BD", "W", "I", "MB", "Ab", "BE", "BL", "OB", "Big", "WB", "U", "GB", "Be", "Part", "J", "b", "NB", "R", "QB", "Both", "Other", "G", "BF", "Bs"]}}
{"code": "N = int(input())\\n\\ndic = {(i,j):set([]) for i in range(1,N+1) for j in range(2)}\\n\\nfor i in range(1,N+1):\\n  a = int(input())\\n  for _ in range(a):\\n    x,y = map(int, input().split())\\n    dic[(i,y)].add(x)\\n    \\np = 2**N\\nrlt = 0\\n\\nfor b in range(p):\\n  s0 = set([])\\n  s1 = set([])\\n  for i in range(N):\\n    if b&(1<<i):\\n      s1.add(i+1)\\n    else:\\n      s0.add(i+1)\\n  f = 1\\n  for i in s1:\\n    for k in dic[(i,1)]:\\n      if k in s0:\\n        f = 0\\n        break\\n    for k in dic[(i,0)]:\\n      if k in s1:\\n        f = 0\\n        break\\n    if f == 0:\\n      break\\n  if f == 1:\\n    rlt = max(len(s1),rlt)\\n    \\nprint(rlt)", "target": "52", "substitutes": {"N": ["F", "Nat", "L", "V", "H", "Q", "X", "Y", "Num", "NS", "K", "num", "O", "P", "B", "C", "T", "D", "Ne", "S", "A", "W", "I", "No", "NT", "Ni", "Z", "Ns", "R", "J", "M", "NB", " n", "G", "NA", "n"], "dic": ["dican", "nice", "lic", "lice", "Dac", "bict", "odictionary", "dict", "dac", "dictionary", "indic", "diac", "dsac", "Dics", "Dic", " dict", "nic", "bic", "dics", "odic", "dsic", "Diac", "Dict", "indictionary", "dsict", "dice", " dac", "indice", " dice", "odice", "indics", "nics", "dsics", "lics", "biac", " diac", " dics", " dictionary", "odics", "odican", "nican", "lican", "bac"], "i": ["ji", "s", "ui", "ie", "int", "qi", "phi", "ai", "c", "o", "r", "ix", "ini", "iu", "inf", "ti", "z", "si", "eni", "index", "yi", "ind", "w", "I", "uri", "l", "u", "d", "pi", "it", "io", "m", "xi", "di", "ni", "ip", "ij", "ci", "isi", "v", "e", "id", "li", "ii", "bi", "n"], "j": ["ji", "ie", " it", "g", "c", "o", "r", "jj", "h", "z", "je", "ch", "index", "ind", "I", "adj", "it", "l", "d", "q", "jp", "m", "ij", "J", "v", "bj", "e", "ii", " l", "bi", "ip"], "a": ["aa", "s", "span", "na", "ai", "c", "fa", "ba", "ab", "au", "z", "ana", "da", "A", "w", "ia", "u", "d", "aaa", "sa", "ca", "ac", "ga", "area", "aj", "am", "ae", "alpha", "e", "all", "an", "n"], "_": ["ai", "g", "h", "o", "ap", "I", "l", "q", "m", "J", "an", "block", "ip"], "x": ["dx", "int", "X", "xs", "c", "xx", "o", "r", "ix", "z", "index", "w", "l", "u", "d", "q", "xi", "v", "t", "e", "xy", "n"], "y": ["s", "dy", "ye", "Y", "g", "c", "o", "ym", "z", "yi", "cy", "w", "ny", "l", "yt", "d", "sy", "m", "yy", "ya", "v", "e", "t", "py", "vy", "ey", "n"], "p": ["lp", "bp", "c", "fp", "r", "o", "tp", "pr", "P", "split", "z", "A", "w", "l", "u", "pi", "d", "q", "jp", "m", "pp", "ip", "np", "t", "e", "pe", "pc", "n"], "rlt": [" relt", "rrlt", "rlet", "rrelt", " rgt", "srgt", "rgt", "Relt", "srlt", "Rgt", "frlet", "frlt", "relt", "Rlen", "rlen", " rlen", "srelt", "rrgt", "srlet", "rrlen", "Rlt", "frgt", " rlet", "frelt"], "b": ["s", "ib", "bp", "bs", "g", "c", "h", "r", "num", "B", "ab", "w", "sb", "l", "u", "d", "bb", "ga", "br", "v", "base", "e", "bc", "nb", "bi", "n"], "s0": ["p4", "f2", " s4", "s2", "ns1", "cs2", "s6", "S2", "s4", "S1", "p6", "p0", "cs1", "S4", " s2", "ns6", "p1", "ns2", "S0", "p2", "cs0", "f1", "cs6", "f0", "ns0"], "s1": ["Sone", "ionsone", "ions2", "s01", "ses0", "pb", "ions01", "p4", "f2", " s4", "s2", "ns1", "S2", "s4", "S1", "p0", "pone", "ses1", "sb", "Sb", "sone", "S4", " s2", "ches2", "p1", "ns2", "S0", "p2", "p01", "ches1", "f1", " sone", "ions1", "ses2", "f0", "ches01", "ns0", "sesb", " sb", "chesone"], "f": ["F", "float", "s", "fb", "g", "c", "fp", "fa", "h", "o", "r", "rf", "sf", "of", "tf", "fs", "z", "fc", "fn", "w", "l", "bf", "d", "u", "q", "ff", "m", "fold", "function", "fen", "v", "limit", "flow", "e", "t", "family", "form", "ef", "feed", "n"], "k": ["km", "s", "kid", "ke", "ked", "g", "c", "gh", "K", "work", "kk", "kg", "ks", "kn", "z", "ch", "kw", "w", "kin", "ko", "l", "ok", "d", "q", "ki", "sk", "ky", "m", "kt", "tk", "v", "key", "ck", "kr", "id", "ik", "che", "n"]}}
{"code": "#2 Kleene Inversion\\nn,k=map(int,input().split())\\na=list(map(int,input().split()))\\nmod=10**9+7\\n\\na_out = [sum(bb > aa for bb in a ) for aa in a]\\na_in = [sum(a[i] > a[j] for i in range(n) if i<j) for j in range(n)]\\n\\nprint( (sum(a_out)*k*(k-1)//2 + sum(a_in)*k)%mod )", "target": "542", "substitutes": {}}
{"code": "w = input()\\nfor i in range(len(w)):\\n    if w.count(w[i])%2==0:\\n        continue\\n    else:\\n        print('No')\\n        exit()\\nprint('Yes')", "target": "337", "substitutes": {"w": ["new", "hw", "wa", "wt", "wp", "widget", "tw", "p", "words", "c", "aw", "width", "rw", "y", "r", "work", "fw", "o", "h", "we", "wb", "wave", "temp", "x", "ew", "W", "now", "window", "current", "l", "wx", "u", "q", "f", "m", "sw", "ww", "self", "ws", "input", "data", "wl", " W", "way", "v", "b", "ow", "t", "wu", "e", "iw", "word", "wall"], "i": ["gi", "ih", "ji", "k", "a", "p", "phi", "ai", "c", "h", "r", "y", "num", "iu", "lo", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", "m", "xi", "ci", "v", "b", "e", "t", "col", "id", "li", "ii", "val", "bi", "n"]}}
{"code": "n,m = list(map(int, input(\"\").split()))\\nh = list(map(int, input(\"\").split()))\\n\\np = [1] * n\\n\\nfor i in range(m):\\n  a,b = map(int, input().split())\\n  if h[a-1] <= h[b-1]:\\n    p[a-1]=0\\n\\n  if h[a-1] >= h[b-1]:\\n    p[b-1]=0\\n\\nprint(sum(p))", "target": "291", "substitutes": {"n": ["k", "na", "g", "c", "o", "nc", "number", "num", "r", "ne", "z", "fn", "x", "sn", "w", "l", "cn", "d", "u", "nn", "nt", "ln", "f", "j", "ns", "no", "v", "np", "e", "N", "t", "dn", "nb", "an"], "m": ["s", "k", "mn", "ms", "g", "c", "y", "o", "r", "num", "md", "z", "x", "dm", "mu", "w", "cm", "l", "u", "d", "f", "j", "M", "v", "e", "N", "mm", "mc"], "h": ["rh", "hs", "s", "k", "sh", "H", "g", "c", "oh", "y", "r", "o", "num", "ht", "ap", "ph", "z", "x", "ah", "w", "l", "bh", "u", "d", "q", "he", "f", "ac", "v", "t", "e", "hm", "um"], "p": ["lp", "s", "k", "op", "pre", "g", "c", "y", "r", "tp", "per", "pr", "o", "pos", "ap", "api", "P", "z", "array", "po", "pa", "x", "w", "l", "u", "d", "pi", "q", "f", "j", "data", "v", "np", "t", "e", "py", "pc"], "i": ["int", "ai", "c", " I", "o", "y", "num", "iu", "z", "index", "x", "ind", "I", "u", "d", "j", "f", " j", "ni", "v", "e", "N", "id", "li", "ii", "ip"], "a": ["aa", "s", "auto", "int", "va", "ma", "ai", "g", "c", "fa", "o", "y", "la", "ba", "ab", "au", "da", "x", "pa", "A", "ar", "af", "w", "l", "u", "d", "f", "ca", "sa", "ac", "am", "aj", "ae", "alpha", "e", "part", "an", "ad"], "b": ["s", "aa", "be", "ib", "bs", "g", "c", "pb", "y", "r", "o", "B", "ba", "ab", "z", "x", "w", "sb", "l", "bh", "bf", "d", "u", "rb", "f", "j", "ac", "binary", "v", "an", "e", "base", "nb", "bi"]}}
{"code": "from sys import stdin\\ndef main():\\n    #\u5165\u529b\\n    readline=stdin.readline\\n    s=readline().strip()\\n    K=int(readline())\\n\\n    N=len(s)\\n    words=[]\\n    for i in range(N):\\n        words.append(s[i])\\n    for i in range(N-1):\\n        words.append(s[i:i+2])\\n    for i in range(N-2):\\n        words.append(s[i:i+3])\\n    for i in range(N-3):\\n        words.append(s[i:i+4])\\n    for i in range(N-4):\\n        words.append(s[i:i+5])\\n    words=set(words)\\n    words=list(words)\\n    words.sort()\\n    print(words[K-1])\\n    \\nif __name__==\"__main__\":\\n    main()", "target": "246", "substitutes": {}}
{"code": "n = int(input())\\ns = input()\\nans = 0\\nfor i in range(1,n):\\n    x = s[:i]\\n    y = s[i:]\\n    ans = max(ans, len(list(set(x) & set(y))))\\n    \\nprint(ans)", "target": "575", "substitutes": {"n": ["min", "k", "p", "c", "number", "nc", "o", "num", "net", "names", "z", "nan", "w", "ny", "l", "d", "nn", "nt", "f", "j", "ln", "m", "Ns", "ns", "len", "b", "np", "t", "N", "nit", "nb"], "s": ["sq", "a", "strings", "qs", "p", "states", "g", "xs", "c", "sets", "o", "names", "z", "si", "es", "S", "sb", "l", "services", "u", "d", "ses", "sg", "f", "sk", "m", "ns", "os", "b", "v", "e", "ls", "t", "se", "sv", "an"], "ans": ["ss", "ano", "ents", "lan", "nas", "span", "atan", "na", "xs", "ats", "aning", "anas", "AN", "ANS", "anes", "mean", "annels", "ane", "ann", "anse", "ani", "anc", "anon", "ana", "ania", "can", " means", "nan", "anned", "aned", "max", "ons", "aus", "anan", "nn", "ens", "leans", "sk", "ln", "ants", "atches", "ns", "scan", "os", "san", "ls", "ds", "oss", "an", "ins"], "i": ["k", "ui", "a", "int", "p", "ai", "c", "h", "ix", "ini", "iu", "ti", "z", "si", "index", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", "xi", "di", "ni", "ci", "ip", "v", "b", "e", "id", "li", "ii"], "x": ["dx", "k", "a", "X", "p", "xs", "c", "xx", "h", "o", "px", "rx", "pos", "z", "ex", "w", "l", "u", "d", "f", "ax", "m", "xi", "shape", "data", "v", "b", "e", "t", "xy", "an"], "y": ["k", "ys", "a", "dy", "ye", "p", "Y", "c", "z", "zy", "yi", "cy", "w", "ny", "l", "sy", "j", "m", "yan", "yy", "ya", "oy", "type", "v", "b", "t", "xy", "vy", "ey", "ies", "sky"]}}
{"code": "from collections import defaultdict\\nfrom itertools import permutations\\n\\nn, c = map(int, input().split())\\nd = [list(map(int, input().split())) for _ in range(c)]\\ncmat = [list(map(int, input().split())) for _ in range(n)]\\n\\ndcnt = [defaultdict(int) for _ in range(3)]\\nfor i, ci in enumerate(cmat, 1):\\n    for j, cij in enumerate(ci, 1):\\n        mod = (i + j) % 3\\n        dcnt[mod][cij - 1] += 1\\n\\nans = 1000 * n ** 2\\nfor color in permutations(range(c), 3):\\n    tmp = 0\\n    for i, cnt in enumerate(dcnt):\\n        tmp += sum(d[k][color[i]] * cnt[k] for k in cnt)\\n    ans = min(ans, tmp)\\nprint(ans)\\n", "target": "516", "substitutes": {"n": [" N", "s", "p", "ic", "g", " ni", "o", "r", "nc", "num", "y", "C", "z", "x", "nan", "sn", "w", "con", "l", "cn", " ng", "pi", "u", "nt", "f", "network", "cs", "ac", "m", "ns", "cin", "co", "v", "b", "np", "t", "N", "nb"], "c": ["s", "p", "o", "r", "nc", "C", "size", "lc", "z", "ce", "x", "cy", "cu", "con", "l", "cn", "u", "f", "cs", "m", "ac", "cin", "dc", "b", "cf", "e", "count", "cc", "col", "xc"], "d": ["s", "did", "dd", "dh", "p", "g", "DC", "dat", "o", "dict", "nc", "td", "ded", "D", "z", "cu", "l", "do", "f", "dt", "bd", "cs", "m", "dc", "cd", "df", "di", "data", "ct", "db", "b", "v", "t", "e", "pd", "ds", "ad"], "_": ["__", "non", "place", "p", "ing", "___", " time", "oc", "x", "Id", "out", "f", "all", "block", "ip"], "cmat": ["cort", " cort", "lccat", "ncmat", "cdtable", "ccat", "ncmt", "ncort", " cmt", "cdmat", "cformat", "cna", "fcat", "nctable", "lcformat", "cmt", "cdort", "fmat", " ccat", "lcmat", "cdmt", " cformat", " ctable", "ctable", "lcna", "fformat", "fna", " cna"], "dcnt": ["dcnc", " dcn", " dcpt", "incont", "ecn", " dcnc", "ecat", "dcont", "ncnt", "dcn", "dcct", "econt", "DCpt", "acnt", " dcont", "DCont", "incnt", "ncont", "ecnt", "DCn", "acpt", "incpt", "acont", "DCnt", "ecpt", "ncat", "ncpt", "acct", "dcat", "DCnc", "ecnc", "DCct", " dcct", "dcpt", "incat"], "i": ["gi", "ji", "ui", "ie", "int", "qi", "mi", "p", "phi", "ai", "ic", "oi", "o", "y", "ini", "ix", "iu", "aci", "z", "si", "eni", "index", "yi", "x", "ind", "ia", "I", "l", "u", "pi", "ki", "io", "f", "m", "xi", "ri", "ij", "b", "zi", "li", "ii", "ik", "bi", "ip"], "ci": ["loc", "int", "CI", "chi", "ic", "ai", "nc", "ini", "C", "lc", "anc", "si", "ce", "cu", "ind", "cm", "cia", "pi", "cli", "cat", "xi", "cin", "dc", "co", "cit", "cd", "di", "icc", "ct", "cf", "cc", "col", "li", "ii", "cci"], "j": ["ji", "ie", "ja", "p", "y", "o", "jj", "jl", "z", "si", "ch", "x", "ind", "ia", "l", "u", "uj", "js", "jp", "m", "oj", "jc", "aj", "ij", "J", "v", "b", "e", "ii"], "cij": ["cijs", "cini", "citja", "cii", "cbj", "cj", "aija", "cjs", "cinjs", "aii", "citq", "citi", "cq", "cigbj", "cigj", "cigi", "cinbj", "aij", "cigjs", "citj", "ciq", "cija", "cibj", "cinj", "aiq", "cja"], "mod": ["min", "mode", "cycle", "spec", "com", "cor", "MOD", "perm", "exp", "circ", "num", "pm", "comment", "ix", "iq", "reg", "div", "comp", "module", "grad", "ind", "inc", "cm", "mag", "max", "row", "m", "rank", "mods", "order", "col", "id", "ctr", "um", "rad", "Mod"], "ans": ["ano", "s", "ents", "lan", "nas", "offs", "amps", "eps", "ams", "atan", "na", "ras", "ms", "xs", "ats", "anas", "AN", "ads", "ANS", "anes", "ks", "asts", "aces", "vs", "ann", "ani", "anc", "ana", "can", " means", "nan", "ars", "anus", "aned", "ons", "aus", "ens", "leans", "cs", "sk", "trans", "ants", "ns", "os", "acts", "cons", "ls", "ians", "ds", "span", "an", "ins"], "color": ["character", "cycle", "digit", "token", "random", "int", "span", "cor", "channel", "actor", "number", "r", "num", "result", "attr", "C", " colors", "size", "colour", "white", "x", "chrom", "ac", "cat", "char", "function", "option", "Color", " colour", "term", "style", "core", "parent", "bin", "category", "pixel", "feature", "count", "atom", "cell", "col", "id", "source"], "tmp": ["amp", "cmp", "const", "span", "total", "perm", "tt", "p", "pre", "var", "tp", "kk", "app", "pos", "beta", "cum", "txt", "attr", "emp", "temp", "mp", "config", "mini", "cache", "diff", "params", "par", "nb", "sup", "etc", "copy", "pad", "co", "duration", "alpha", "stuff", "vt", "np", "race", "space", "fake", "mm", "part", "test", "tc", "offset"], "cnt": [" cpt", "cpt", "cnc", "lcpt", "ncmat", "fcnc", "pcnd", "ncnt", " cct", "cct", "lcnc", " cnc", "fcmat", "ucnc", "ncct", "fcct", "fcnt", "pcpt", " cnd", "lcnd", "lcnn", "ucmat", "pcnt", "lcnt", "lcmat", "ucnt", "pcnn", "ncnc", "lcct", "ucct", "cnn", "cnd", " cnn"], "k": ["km", "cycle", "int", "ke", "p", "g", "K", "o", "y", "kk", "kg", "ks", "ch", "x", "kw", "w", "ko", "u", "unk", "q", "ki", "sk", "ky", "f", "m", "ac", "co", "key", "v", "ck", "kr", "col", "id", "ik"]}}
{"code": "N = int(input())\\na = list(map(int,input().split()))\\nn = 1\\nans = 0\\nfor i in a:\\n    if i != n:\\n        ans += 1\\n    else:\\n        n +=1\\nif n == 1:\\n    print(\"-1\")\\nelse:\\n    print(ans)", "target": "749", "substitutes": {"N": ["L", "NN", "na", "Num", "NI", "K", " ni", "Na", "number", "AN", "O", "P", "B", "C", "S", "A", "I", "No", "Ns", "ns", "II", "no", "R", "M", "NA", "nb"], "a": ["aa", "s", "at", "span", "p", "na", "ai", "c", "fa", "Na", "en", "mA", "ab", "array", "ana", "index", "da", "A", "af", "w", "args", "aaa", "sa", " A", "asa", "ac", "area", "act", "am", "oa", "alpha", "b", "ea", "NA", "an", "ad"], "n": ["s", "k", "p", "na", "ai", "g", "c", "y", "o", "nc", "num", "number", "net", "ann", "ne", "z", "x", "nan", "l", "nin", "u", "d", "nt", "nn", "j", "f", "m", "Ns", "ns", "no", "ni", "b", "e", "pn", "nb", "an"], "ans": ["s", "int", "lan", "nas", "span", "p", "na", "atan", "ai", "ions", "aning", "Na", "anas", "AN", "ANS", "ann", "anon", "ne", "annot", "ana", "x", "can", "nan", "A", "An", "ars", "sn", "aned", "nn", "ons", "ln", "cs", "ants", "ns", "scan", "os", "reads", "ians", "an", "ins"], "i": ["gi", "ih", "s", "k", " bi", "ei", "int", "p", "ai", "ic", "c", "o", "ini", "ti", "ab", "z", "si", "x", "ind", "I", "it", "l", "pi", "d", "j", "io", "f", "ac", "m", "xi", "ait", "ni", "ci", "b", " ii", "e", "id", "li", "ii", "bi", "abi", "ip"]}}
{"code": "import heapq\\nN = int(input())\\nAB = []\\nfor i in range(N):\\n    ab = list(map(int, input().split()))\\n    AB.append([-ab[0] - ab[1], -ab[0], -ab[1]])\\n\\nAB.sort(reverse=True)\\n\\nheapq.heapify(AB)\\nans = 0\\nfor i in range(N):\\n    q = heapq.heappop(AB)\\n    if i % 2 == 0:\\n        ans += - q[1]\\n    else: ans += q[2]\\nprint(ans)", "target": "794", "substitutes": {"N": ["F", "E", "Number", "L", "V", "NN", "Q", "X", "Y", "Size", "NS", "NE", " I", " B", "K", "AN", "CNN", "O", "Len", "B", "C", "P", "T", "D", " C", "S", "A", "I", "NT", "Z", "Ns", "R", "M", "J", " n", "G", "NA", " NI", "Count", "n"], "AB": ["AT", "AD", "AK", "Q", "AI", "AL", "AS", "UB", "AP", "AR", "AST", "IB", "PB", "DB", "FF", "BA", "AM", "IGN", "AW", "B", "AE", "AV", "AC", "SB", "BB", "AA", "A", "Tab", "AH", "ABC", "Ab", "BL", "OB", "Array", "CA", "PH", "AF", "abs", "NB", "BM", "ACH", "AG", "APP", "BF", "App", "APS"], "i": ["s", "k", "ui", "a", "ie", "int", "qi", "p", "ai", "c", " I", "h", "o", "r", "iu", "z", "si", "index", "x", "yi", "ind", "I", "it", "l", "u", "pi", "d", "io", "f", "j", "m", "xi", "di", "ni", "ip", "ci", "v", "b", "li", "ii", "n", "ti"], "ab": ["k", "a", "ib", "lab", "al", "p", "ai", "pb", "fab", "app", "ap", "el", "ba", "hab", "BB", "array", "AA", "pa", "x", "av", "af", "Tab", "ah", "ABC", "ob", "Ab", "ub", "bb", "abb", "eb", "f", "ac", "acl", "core", "um", "am", "ref", "AF", "ae", "db", "abs", "b", "lb", "base", "abc", "an", "ast", "ad", "abi", "n"], "ans": ["s", "aid", "a", "ents", "lan", "ras", "cas", "nas", "ins", "amps", "span", "na", "eps", "Ann", "aning", "anas", "AN", "ads", "ANS", "ks", "mean", "aces", "annels", "ann", "anon", "ani", "anc", "cus", "ais", "ays", "es", "can", "ana", "nan", "A", " means", "ars", "outs", "anch", "anus", "aned", "aus", "ons", "ki", "sk", "ens", "ants", "ns", "os", "ips", "offs", "ops", "an", "n"], "q": ["k", "aff", "sq", "sh", "qs", "qu", "qi", "Q", "p", "qa", "ic", "g", "c", "h", "case", "y", "o", "iq", "ph", "conf", "z", "ch", "x", "w", "l", "u", "d", "eq", "f", "dq", "cs", "ac", "core", "ue", "query", "qt", "aq", "v", "cf", "e", "quant", "id", "qq", "cl", "ad"]}}
{"code": "n,x=map(int, input().split())\\na=[int(x) for x in input().split()]\\n\\nd=0\\nans=0\\nfor i in a:\\n    d+=i\\n    if d<=x:ans+=1\\nprint(ans+1)", "target": "444", "substitutes": {"n": ["k", "span", "p", "na", "ic", "g", "c", "o", "Na", "nc", "ini", "num", "ann", "ne", "z", "w", "nn", "m", "ns", "ni", "b", "inn", "N", "nb", "an", "ad"], "x": ["dx", "dd", "int", "X", "p", "xxxxxxxx", "tx", "g", "c", "xs", "xx", "exp", "fx", "y", "h", "rx", "ix", "number", "pos", "px", "rax", "z", "ex", "index", "xxx", " xx", "w", "wx", "u", "q", "f", "ax", "m", "xi", "mx", "xb", "xe", "v", "b", "xp", "e", "t", "xes", "xy", "id", "xc", "an", "ad"], "a": ["aa", "va", "p", "na", "ai", "c", "y", " c", "ba", "z", "array", "da", "A", "ar", "af", "w", "ia", "aaa", "ca", "sa", " A", "m", "asa", "area", "data", "ae", "alpha", "b", "an", "ad"], "d": ["s", "dd", "dy", "ins", "fd", "p", "nd", "ai", "c", "dat", "o", "y", "h", "sd", "D", "z", " dd", "da", "ind", "u", "do", "xd", "f", "dt", "m", "dc", "cd", "b", "dim", "e", "pd", "ds", "id", "an", "ad"], "ans": ["s", "aid", "dd", "ents", "lan", "span", "nas", "ins", "p", "na", "atan", "ai", "ats", "ions", "dan", "anas", "AN", "ads", "ANS", "anes", "ks", "annels", "ann", "ani", " dd", "ays", "can", " means", "A", "nan", "ars", "anus", "aned", "anz", "ons", "ids", "ens", "leans", "cs", "ants", "ns", "os", "ians", "ds", "an", "ad"], "i": ["s", "ei", "int", "p", "ai", "y", "o", "ix", "ini", "iq", "ti", "z", "si", "index", "ind", "I", "it", "u", "pi", "j", "io", "f", "m", "xi", "di", "ni", "ci", "v", "b", "e", "t", "id", "li", "ii", "ip"]}}
{"code": "import math\\n\\n\\ndef calc_distance(Y, Z):\\n    temp = 0\\n    for y, z in zip(Y, Z):\\n        temp += (y-z)**2\\n    return temp\\n\\n\\ndef is_integer(num):\\n    for k in range(1, num+1):\\n        if k*k == num:\\n            return True\\n    else:\\n        return False\\n\\n\\nN, D = map(int, input().split())\\nX = [list(map(int, input().split())) for _ in range(N)]\\ncnt = 0\\nfor i in range(len(X)-1):\\n    for j in range(i, len(X)):\\n        distance = calc_distance(X[i], X[j])\\n        if is_integer(distance):\\n            cnt += 1\\nprint(cnt)\\n", "target": "182", "substitutes": {"Y": ["F", "YY", "E", "L", "V", "H", "Az", "Q", "Ky", "Ay", "O", "P", "T", "C", "B", "Cy", "IP", "Year", "Ry", "x", "S", "A", "Zip", "I", "Ni", "Temp", "XY", "Py", "Pi", "Time", "M", "G", "Co"], "Z": ["F", "L", "V", "H", "Az", "Q", "K", "ZX", "Zero", "T", "IP", "Zip", "S", "IZ", "Zen", "W", "ZZ", "Data", "Temp", "Zone", "Time", "M", "ZI", "zip", "ZE", "ZA"], "temp": ["wa", "cut", "total", "p", "c", "tmp", "this", "pt", "T", "emp", "empty", "time", "cache", "unc", "wrap", "clean", "cu", "now", "w", "current", "cm", "Temperature", "get", "tem", "Tem", "f", "m", "Temp", "output", "input", "v", "cel", "t", "fake", "test", "sum", "tc", "offset", "n"], "y": ["yr", "yd", "ys", "a", "dy", "ye", "p", "phi", "c", "ym", "zy", "x", "yi", "cy", "ny", "yt", "l", "sy", "ky", "m", "yy", "ya", "oy", "zip", "b", "t", "xy", "py", "vy", "isy", "ey", "n"], "z": ["iz", "ze", "zer", "p", "phi", "c", "zone", "h", "zon", "zo", "az", "zh", "zy", "x", "ind", "w", "yz", "l", "u", "d", "q", "f", "m", "zen", "v", "zip", "ez", "t", "zi", "tz", "n"], "num": ["loc", "unit", "mn", "p", "init", "c", "Num", "K", "o", "number", "nu", "nom", "x", "kw", "mu", "w", "inc", "con", "u", "d", "max", "uni", "f", "m", "no", "b", "dim", "key", "all", "count", "multi", "nb", "sum", "NUM", "n"], "k": ["km", "s", "p", "g", "c", "K", "h", "o", "kk", "r", "ks", "kl", "x", "w", " K", "l", "ok", "u", "d", "unk", "max", "q", "sk", "f", "m", "b", "v", "ck", "t", "e", " n", "id", "nb", "n"], "N": ["F", "MN", "E", "L", "V", "Q", "NC", "Size", "Num", "NS", "DC", "NI", "K", "DM", "P", "T", "C", "Ne", "S", "A", "W", "I", "d", "Ns", "ND", "U", "R", "M", "J", " n", "G", "n"], "D": ["F", "E", "L", "DS", "V", "Q", "DH", "DM", "DE", "K", "O", "P", "B", "C", "T", "DD", "JD", "I", "Ds", "d", "Do", "dc", "U", "M", "DI"], "X": ["F", "E", "Point", "CE", "L", "V", "CI", "XM", "H", "DX", "Q", "XX", "Check", "XP", "Form", "EX", "K", "Test", "MX", "ZX", "P", "T", "C", "IP", "Sync", "x", "Zip", "S", "A", "Weight", "W", "IX", "I", "Model", "Matrix", "Do", "TX", "Data", "Code", "CL", "Array", "U", "R", "Time", "List", "M", "J", "String", "XL", "Location", "G", "Index", "Ex", "Co", "Work", "Cross"], "_": ["code", "p", "g", " seq", " time", " __", "x", "f", "all"], "cnt": ["kount", "dcnn", " ccount", "conount", "cret", "dcnt", "acnd", " cct", "cct", "ccount", "dcct", "connt", "acnt", "nct", "tct", "knt", "cout", "tcent", "dccent", "kout", "ncount", "conout", " cnd", "account", "nnt", "ccent", " ccent", " count", "tnt", "tnn", "acct", "cnd", "count", "conret", " cout", "cnn", "kret", "nnd", " cret", " cnn"], "i": ["ji", "a", "ie", "int", "p", "phi", "ai", "c", "o", "ini", "im", "ix", "iu", "si", "index", "x", "yi", "ind", "I", "l", "u", "pi", "d", "io", "f", "m", "xi", "ri", "ni", "ci", "ij", "v", "b", "e", "zi", "id", "li", "ii", "n", "ip"], "j": ["ji", "a", "ja", "p", "jo", "h", "jj", "o", "ix", "dj", "jl", "je", "x", "ind", "obj", "l", "u", "uj", "d", "js", "jp", "f", "m", "jc", "aj", "ij", "J", "v", "b", " ii", "kj", "li", "ii", "n"], "distance": ["dx", "ance", "dy", "density", "pointer", "dist", "ge", "c", "gap", "width", "center", "Distance", "radius", "result", "weight", "size", "coord", "edge", "cost", "diff", "relation", "degree", "score", "shift", " distances", "position", "point", "rank", "depth", "address", "duration", "length", "match", "division", "path", "feature", "pair", "grade", "range", "direction"]}}
{"code": "A,B,C,D=map(int,input().split())\\n#a,b\u306e\u6700\u5927\u516c\u7d04\u6570\\ndef gcd(a, b):\\n    while b:\\n        a, b = b, a % b\\n    return a\\n\\n#a,b\u306e\u6700\u5c0f\u516c\u500d\u6570\\ndef lcm(a, b):\\n    return a * b // gcd (a, b)\\n\\nlcm_=lcm(C,D)\\nanswer=B-A+1-(B//C-A//C)-(B//D-A//D)+(B//lcm_-A//lcm_)\\nif A%C==0:\\n    answer-=1\\nif A%D==0:\\n    answer-=1\\nif answer<=-1:\\n    print(0)\\nelse:\\n    if A%C==0 and A%D==0:\\n        print(answer+1)\\n    else:\\n        print(answer)\\n", "target": "31", "substitutes": {"A": ["F", "AD", "a", "L", "V", "AS", "X", "Y", "LA", "K", "AM", "P", "T", "AC", "Ar", "AA", "Alpha", "S", "I", "Ab", "AF", "R", "M", "N", "G", "An"], "B": ["L", "Y", "IB", "DB", "BA", "AB", "O", "P", "T", "BB", "BC", "BI", "BD", "TB", "BBC", "MB", "OB", "WB", "Beta", "R", "M", "b", "NB", "QB", "VB", "BF", " b", "Bs"], "C": ["F", "E", "Cs", "FC", "H", "X", "Y", "c", "YC", "O", "P", "T", "EC", "AC", "BC", "S", "W", "CM", "Z", "Con", "CA", "U", "R", "M", "CC", "N", "G"], "D": ["F", "AD", "E", "DA", "L", "V", "H", "Q", "X", "DH", "Y", "K", "O", "P", "T", "DD", "S", "W", "I", "d", "Z", "U", "R", "M", "N", "G"]}}
{"code": "N, K = map(int, input().split())\\ncnt = (N - 1) * (N - 2) // 2\\nif cnt < K:\\n    print(-1)\\n    exit()\\n\\nedges = [[] for _ in range(N)]\\nfor i in range(1, N):\\n    edges[0].append(i)\\n\\nef, et = 1, 2\\nfor i in range(cnt - K):\\n    edges[ef].append(et)\\n    et += 1\\n    if et == ef:\\n        et += 1\\n    if et == N:\\n        ef += 1\\n        et = ef + 1\\n\\nM = sum([len(edge) for edge in edges])\\nprint(M)\\nfor u in range(N):\\n    for v in edges[u]:\\n        print(u + 1, v + 1)", "target": "621", "substitutes": {"N": ["F", "MN", "E", "Network", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "NC", "Num", "NS", "NE", "Na", "NM", "CNN", "O", "P", "T", "C", "Len", "D", "B", "Ne", "S", "A", "W", "I", "NT", "NG", "Node", "Z", "Net", "Ns", "ND", "U", "R", "NV", "J", "GN", " n", "G", " Ne", "KN", "NA", "n"], "K": ["F", "k", "E", "KK", "L", "KI", "V", "H", "Q", "X", "Y", "NE", "KE", "KT", "Sk", "P", "T", "C", "SK", "D", "NK", "KS", "KB", "Kent", "S", "W", "HK", "Z", "KR", "PK", "U", "R", "J", "DK", "KN", "G", "n"], "cnt": ["cNT", "acount", "CNT", "cnc", "Ccent", " cNT", " cct", "cct", "lcnc", " cnc", "acnt", "Cnt", "unccent", "nNT", "uncNT", "Cnc", "acNT", "nount", " cnd", "nnt", "ccent", " count", "lcnt", "lcct", "uncount", "count", "Cct", "lcNT", "uncnt", "accent", "cnd", "nnd", "Cnd", "Count"], "edges": ["gedge", "tedges", "hedices", "indices", "edodes", "gedgments", "indles", "tedge", "hedles", "hedgments", "Edges", "edices", " edices", "adgments", "tedgments", "adges", "pedgments", "edger", "edwards", "Edge", "pedges", "pedices", "tedger", "indwards", " edodes", "edgments", "Edgments", "ledgments", "gedges", "indodes", "Edices", "ledices", "adge", "ledwards", "hedges", " edgments", "indgments", "ledges", "Edodes", "Edger", "edles", "gedger", "indges", "pedles", "adices", "adodes", "hedwards"], "_": ["k", "p", "o", "ix", " x", "oc", "x", "ind", "I", "l", "q", "f", "j", "e", "id", "ip"], "i": ["k", "ui", "ei", "int", "ie", "qi", "p", "ai", "ic", "c", "oi", "r", "ini", "iu", "ti", "si", "x", "ind", "I", "it", "uri", "pi", "l", "io", "j", "f", "di", "ni", "ip", "ci", "e", "info", "iw", "zi", "id", "li", "ii", "ik", "n"], "ef": ["F", "NF", "loc", "E", "end", "ie", "vel", "ed", "ext", "ven", "FE", "c", "eve", "NE", "ec", "en", "of", "net", "nc", "FF", "el", "fe", "inf", "ception", "ne", "oe", "ce", "equ", "fi", "ee", "nt", "upp", "ff", "eq", "f", "eb", "lf", "ffe", "core", "null", "DEF", "set", "ep", "ect", "ell", "ea", "cf", "e", "inet", "all", "ez", "id", "EF", "eff", "feat", "ev", "ref", "n"], "et": ["E", "end", "int", "at", "ed", "p", "c", "eve", "ec", "ot", "ets", "en", "iot", "net", "el", "pt", "ett", "ne", "on", "ce", "x", "ew", "ent", "ant", "ET", "ee", "nt", "NT", "eq", "ut", "dt", "vert", "fat", "f", "Net", "core", "kt", "act", "set", "Set", "ep", "ct", "ect", "len", "ell", "pet", "e", "t", "inet", "mot", "EF", "offset", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "MA", "Y", "NM", "Ms", "O", "P", "LM", "C", "T", "D", "B", "MD", "S", "W", "CM", "I", "FM", "m", "MC", "U", "Mi", "R", "MS", "MF", "MT", "G"], "edge": ["ride", "k", "end", "ve", "line", "GE", "ie", "ei", "event", "ge", "use", " e", " line", "une", "link", "ite", "Edge", "oe", "x", "node", "ind", "\u00e9e", "connection", "ee", "d", "ace", "member", "f", "network", "point", "nw", "core", "du", "ue", "age", "entry", "ep", "ide", " Edge", "pe", "ice", "id", "source", "ip"], "u": ["k", "ui", "uv", "ur", "p", "ge", "ud", "c", "yu", "o", "y", "h", "r", "un", "iu", " su", "nu", "uid", "ou", "x", "cu", "mu", "w", "l", "d", "q", "f", "eu", "m", "ue", "up", "U", "lu", "b", "e", "id", "ul", "ru", "uu", "n"], "v": ["k", "vi", "end", "change", "V", "p", "g", "c", "vu", "h", "vs", "qv", "z", "x", "nv", "vm", "w", "l", "d", "q", "vert", "f", "j", "iv", "m", "vv", "age", "b", "e", "id", "ul", "sv", "vd", "vg", "n"]}}
{"code": "def main():\\n\\n    N, P = map(int, input().split())\\n    S = input()\\n\\n    if P == 2 or P == 5:\\n        ans = 0\\n        for i in range(N):\\n            if int(S[i]) % P == 0:\\n                ans += (i + 1)\\n        print(ans)\\n        exit()\\n\\n    sum_rem = [0] * N\\n    sum_rem[0] = int(S[N - 1]) % P\\n    ten = 10\\n    for i in range(1, N):\\n        a = (int(S[N - 1 - i]) * ten) % P\\n        sum_rem[i] = (a + sum_rem[i - 1]) % P\\n        ten = (ten * 10) % P\\n\\n    ans = 0\\n    count = [0] * P\\n    count[0] = 1\\n    for i in range(N):\\n        ans += count[sum_rem[i]]\\n        count[sum_rem[i]] += 1\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "448", "substitutes": {"N": ["F", "E", "L", "V", "H", "Q", "X", "p", "Y", "Size", "NS", "NE", "Num", "NI", "K", "O", "T", "C", "B", "D", "Len", "IP", "Ne", "A", "W", "I", "No", "NT", "Node", "Ni", "Z", "Ns", "U", "R", "Ten", "M", "J", "G", "NA", "Count", "n"], "P": ["F", "TP", " p", "PI", "E", "Power", "PO", "L", "Port", "Point", "V", "Pay", "H", "Q", "X", "p", "Y", "AP", "_", "IPP", "Pro", "K", "PN", "PS", "O", "T", "C", "B", "D", "NP", "Ps", "IP", "PE", "A", "PP", "W", "I", "PC", "PA", "DP", "Page", "RP", "Py", "U", "R", "Part", "PIN", "M", "CP", "J", "G", "PF", "PT"], "S": ["F", "s", "L", "V", "H", "SC", "X", "Q", "Y", "SE", "NS", "Si", "K", "TS", "ST", "SI", "Su", "O", "T", "B", "C", "SK", "D", "Sa", "Session", "A", "W", "Sl", "I", "Sing", "SS", "OS", "Single", "Sc", "Z", "Ns", "U", "R", "M", "SN", "G", "SU", "Socket", "n"], "ans": ["s", "ain", "cas", "offs", "nas", "span", "amps", "lan", "part", "p", "na", "ps", "ai", "cond", "ats", "eps", "Ann", "aning", "cases", "en", "results", "anas", "AN", "ANS", "ks", "ras", "mean", "vs", "ann", "anon", "ani", "anc", "cus", "ana", "ays", "es", "can", "params", "nan", "A", "sn", "ars", "errors", "anus", "args", "aned", "ons", "aus", "au", "ens", "sk", "cs", "ln", "fat", "ants", "leans", "ns", "act", "am", "ases", "os", "len", "ls", "cons", "plan", "ds", " counts", "an", "n", "ins"], "i": ["gi", "s", "k", "ui", "ie", "int", "chi", "qi", "mi", "p", "phi", "ai", "c", "oi", "y", "h", "o", "num", "ini", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "it", "l", "u", "pi", "d", "ki", "io", "j", "f", "m", "II", "xi", "ori", "di", "ni", "ci", "b", "v", "e", "t", "id", "li", "ii", "n", "bi", "ip"], "sum_rem": ["sumallrec", "process_rem", "processlexrm", "sumpRem", " sum_rec", "sign1default", "sumJre", "sign_keep", "sumprange", " sum_REM", "sumJdefault", "sumuplast", "sum_default", "sum_range", "sum2REM", "sumallrem", "sumallbase", "sign1keep", "sumPREM", "sum_Rem", " sum_Rem", "process_rm", "sum_rec", "sum_re", "sumlexrm", "sign_rem", " sum_range", "sum1default", "processlexres", "process_Rem", "sum1keep", "sumpREM", "sum2last", "sumJkeep", "sum_res", " sum_res", " sum_base", "sign1rem", "sumlexres", "processlexRem", "sumlexrem", "sumPrem", "sum_last", "sum2rem", "sumprem", "sumuprem", "sum2res", "sumJrem", "sum_rm", "sum2Rem", "sum_keep", "sum1re", "sum2rm", " sum_last", "sumlexRem", "sumupREM", "sum1rem", "processlexrem", "sumallres", "sum_REM", "sumupres", "sign_default", "sign_re", "sign1re", "sumPres", "process_res", "sum_base"], "ten": ["end", "const", "p", "ven", "fort", "center", "number", "en", "num", "main", "five", "atten", "even", "fe", "teen", "T", "rent", "ne", "aren", "au", "eni", "two", "x", "tan", "ant", "prime", "tun", "d", "nt", "ta", "vert", "f", "fat", "den", "fen", "Ten", "b", "t", "een", "n"], "a": ["aa", "va", "span", "p", "qa", "ai", "c", "fa", "y", "la", "ba", "ab", "z", "au", "ana", "da", "A", "af", "ia", "u", "d", "aaa", "ca", "f", "sa", "ac", "m", "ga", "area", "aj", "am", "ae", "oa", "alpha", "b", "ea", "ada", "an", "ad", "n"], "count": ["name", "call", "error", "group", "last", "common", "code", "part", "span", "total", "p", "c", "process", "y", "number", "case", "en", "num", "ph", "weight", "mean", "ann", "long", "config", "counter", "size", "ch", "index", "cache", "clean", "only", "start", "current", "l", "child", "max", "f", "cat", "depth", "act", "age", "parent", "list", "check", "length", "match", "type", "len", "base", "all", "add", "id", "skip", " counts", "sum", "Count", "n"]}}
{"code": "n = int(input())\\nl = list(map(int, input().split()))\\n\\ni = 0\\nans = 0\\nwhile i < n:\\n    j = i\\n    while j < n-1 and l[j] >= l[j+1]:\\n        j += 1\\n    k = i\\n    while k < n-1 and l[k] <= l[k+1]:\\n        k += 1\\n    i = max(j, k) + 1\\n    ans += 1\\n    #print(j, k)\\n\\nprint(ans)", "target": "226", "substitutes": {"n": ["s", "mn", "non", "p", "na", "init", "c", "o", "nc", "num", "net", "un", "ne", "z", "fn", "x", "nan", "sn", "w", "ny", "zn", "u", "d", "nn", "nt", "max", "f", "ln", "m", "none", "network", "ns", "no", "ni", "v", "b", "len", "t", "N", "e", "nit", "pn", "nb", "an"], "l": ["lp", "s", "loc", "ol", "L", "p", "al", "g", "c", "o", "sl", "ml", "el", "la", "left", "lv", "lo", "lc", "jl", "kl", "z", "u", "d", "ll", "ln", "dl", "f", "m", "list", "nl", "fl", "lu", "v", "b", "ell", "len", "e", "ls", "t", "li", "ul", "lin"], "i": ["ji", "ui", "a", "ie", "int", "qi", "mi", "p", "ai", "c", "o", "y", "ini", "iu", "z", "si", "yi", "x", "ind", "I", "ia", "u", "pi", "d", "ki", "f", "m", "xi", "di", "ni", "ci", "ip", "v", "b", "e", "id", "li", "ii", "ik", "bi"], "ans": ["s", "ami", "lan", "span", "na", "ai", "ms", "Na", "ANS", "anes", "ks", "ane", "ann", "ani", "anc", "ana", "nan", "kin", "chan", "aned", "nn", "ids", "ki", "sk", "cs", "ns", "ism", "man", "ski", "os", "ci", "ni", "inn", "ian", "asi", "ians", "an", "ins"], "j": ["ji", "ie", "ja", "p", "jen", "vision", "ai", "jo", "y", "o", "jj", "dj", " vi", "ijk", "jl", "z", "je", "si", "jan", "jet", "x", "ind", "adj", "obj", "u", "pi", "uj", "d", "q", "ki", "jp", "f", "ik", "m", "jc", "oj", " ju", "aj", "ci", "ij", "J", "v", "b", " ii", "bj", "e", "jon", "kj", "li", "ii", " jo"], "k": ["kid", "ke", "p", "kh", "c", "dk", "K", "y", "o", "r", "kk", "ijk", "ks", "kn", "z", "ch", "x", "mk", "kin", "w", "ka", "kw", "ko", "ak", "ok", "u", "unk", "q", "ki", "sk", "ky", "f", "ek", "ku", "ci", "v", "b", "e", "kr", "kj", "ik", "uk"]}}
{"code": "K = int(input())\\nS = input()\\n\\nans = S\\n\\nif len(S) > K:\\n    ans = S[:K] + '...'\\n\\nprint(ans)", "target": "797", "substitutes": {"K": ["F", "k", "KK", "Ke", "L", "KO", "KI", "Max", "Ak", "H", "Q", "X", "Y", "IK", "ANK", "KE", "Sk", " k", "ks", "P", "C", "T", "SK", "B", "D", "O", "NK", "KS", "Sch", "KC", "HK", "Z", "KR", "PK", "M", "J", "N", "KA", "KN", "Ka", "Ku", "Work"], "S": ["F", "ss", "s", "sq", "sh", "L", "V", "H", "Stan", "Q", "X", "Y", "SE", "AS", "NS", "Si", "TS", "AN", "SI", "ANS", "O", "SA", "P", "T", "C", "B", "SK", "Ps", "Sa", "Sch", "A", "I", "Sing", "SS", "SAN", "shape", "R", "M", "String", "SP", "Sin", "N", "G", "SO", "SU", "n"], "ans": ["ano", "s", "ents", "lan", "nas", "ras", "atan", "na", "ats", "Ann", "aning", "AN", "ANS", "ks", "ane", "mean", "ann", "anon", "anc", "ana", "can", " means", "nan", "An", "ars", "anus", "aned", "ons", "aus", "ens", "leans", "cs", "ants", "ns", "scan", "os", "san", "an", "ean", "ANN", " Ans", "ins"]}}
{"code": "import math\\n\\nN = int(input())\\n\\np = 1\\nfor i in range(2, N+1):\\n  p *= i\\n  p = p % (1000000000 + 7)\\n  \\nprint(p)\\n", "target": "204", "substitutes": {"N": ["F", "E", "L", "V", "Limit", "H", "Q", "X", "Y", "Size", "Num", "NS", "K", "PN", "O", "P", "T", "C", "B", "D", "S", "A", "I", "Output", "NT", "Ni", "Z", "Ns", "U", "R", "M", "J", " n", "G", " P", "n"], "p": ["lp", "k", "op", "a", "pid", "pre", "ps", "bp", "g", "c", "pb", "y", "r", "tp", "o", "h", "pr", "pos", "cp", "ap", "api", "P", "sp", "po", "x", " pi", "l", "patch", "u", "pi", "d", "q", "f", "j", "jp", "m", "pp", "point", "ep", "data", "ip", "v", "b", "np", "t", "e", "py", "pc", " P", "n"], "i": ["PI", "a", "int", "ai", "g", "c", "y", "o", "h", "ix", "r", "pos", "iu", "z", "si", "index", "x", "ind", "I", "u", "pi", "d", "j", "f", "m", "pp", "xi", "di", "ri", "ci", "v", "e", "id", "li", "ii", "n", "ip"]}}
{"code": "K, X = map(int, input().split())\\nK *= 500\\nif K >= X:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")\\n", "target": "299", "substitutes": {"K": ["Power", "F", "k", "KK", "Ke", "E", "L", "AK", "V", "Max", "H", "Q", "Y", "Check", "IK", "O", " k", "P", "T", "C", "B", "SK", "D", "AC", "NK", "KS", "VK", "I", "HK", "Z", "UK", "KR", "CL", "Mask", "U", "R", "OK", "J", "M", "N", "G", "Ka", "Work"], "X": ["F", "E", "L", "V", "H", "Q", "XX", "Y", "XP", "FF", "O", "P", "T", "C", "D", "x", "PE", "A", "W", "XXX", "IX", "I", "TX", "Z", "MAX", "ANY", "CL", "U", "R", "OK", "M", "XL", "N", "G", "CR", "Cross"]}}
{"code": "import numpy as np\\nn,k = map(int,input().split())\\nh = np.array(list(map(int,input().split())))\\n\\nprint(len(h[k<=h]))", "target": "494", "substitutes": {"n": [" N", "s", "g", "c", "i", " network", "y", "r", "ne", "z", "x", " fn", "l", "u", "d", "f", "j", "m", " self", "b", "t", "N"], "k": ["km", "sh", "p", "kh", "c", "i", "K", "y", "o", "num", "kk", "ph", "ks", "kn", "kl", "ch", "x", "mk", "kw", "w", "ko", "l", "ok", "u", "d", "q", "f", "sk", "j", "m", "v", "b", "e", "kr"], "h": ["rh", "ih", "s", "hs", "sh", "dh", "H", "hn", "p", "g", "c", "i", "oh", "gh", "ht", "hash", "o", "head", "eh", "ph", "hr", "z", "x", "history", "ah", " H", "w", "body", "hh", "l", "bh", "hhh", "q", "he", "f", "j", "header", "m", "han", "input", "hi", "hl", "v", "e", "t", "count", "ha", "hm", "id", "hp"]}}
{"code": "s = list(input())\\nans = 0\\ncnta = 0\\nflagb = 0\\nflabc= 0\\nfor i in range(len(s)):\\n  if s[i]==\"A\":\\n    if flagb==0:\\n      cnta+=1\\n    else:\\n      cnta=1\\n      flagb=0\\n  if s[i]==\"B\":\\n    if flagb==0 and cnta:\\n      flagb=1\\n    else:\\n      flagb=0\\n      cnta=0\\n  if s[i]==\"C\":\\n    if flagb and cnta:\\n      ans+= cnta\\n      flagb=0\\n    else:\\n      cnta=0\\n      flagb=0\\nprint(ans)\\n", "target": "305", "substitutes": {"s": ["ss", "frames", "a", "strings", "south", "spec", "qs", "groups", "shows", "words", "p", "states", "g", "c", "xs", "steps", "sets", "uploads", "results", "speech", "es", "blocks", "outs", "S", "events", "w", "cells", "tests", "args", "sites", "l", "parts", "services", "d", "ses", "erences", "f", "cs", "ns", "objects", "types", "ws", "input", "features", "gs", "v", "b", "plugins", "letters", "e", "ls", "images", "scripts", "ds", "submit", "comments", "n"], "ans": ["ents", "groups", "nas", "span", "amps", "eps", "states", "na", "ai", "ats", "ags", "ions", "cases", "anas", "AN", "ANS", "anes", "aces", "ann", "anon", "anc", "cus", "ays", "es", "errors", "can", "ars", "anus", "aves", "aned", "ons", "aus", "ids", "ens", "sk", "cs", "leans", "ants", "acs", "ns", "flags", "scan", "ases", "features", "reads", "powers", "ls", "cons", "an", "ins"], "cnta": ["cnotar", "cNTar", "cnyas", "cnyo", "cnyc", "cctb", "cnysa", "cNTaa", "cNTi", "cnotan", "acntaa", " cnya", "acNTb", "cptb", "crta", "cctA", "acntA", "cnota", " counta", "cptA", "counto", "acNTa", " cNTa", "cnnb", "counta", "cnedb", "acntan", " cnti", "cNTl", " cnyo", " countb", "cntas", " cnyas", "ccta", "cntsa", "cntb", " cntc", " cnyb", "cnti", " cntl", "cnotb", " cntA", "cneda", "cntA", "cnyi", "cnnar", "cnotc", "cptc", "crto", " cNTb", "cnto", " cnyc", "cnotaa", "cntl", "acNTA", " countaa", "cnya", "cctc", " cNTar", " cnto", "crtA", "cNTa", "cntaa", " cntar", " countl", "cnedan", "cntc", " cNTi", "cnyb", "cNTan", "acNTsa", "cctsa", "acNTaa", "cNTA", "acntb", "cptl", "acNTan", "countaa", "cnna", "cnnc", " cntas", "acnta", "cnyA", "cntar", "acntsa", " cntb", "cpta", "cNTsa", "cNTo", "countas", "cNTc", "cNTas", "countb", "cNTb", "cnedaa", " cntaa", " cNTc", "cptaa", "countl", "ccti", " cnyA", "cntan", "crtb"], "flagb": ["flagbe", "flagsba", "FlagB", "argbe", "buga", "offsetbi", " flagbi", "lagbe", "flagbb", " flagf", "flagk", "laga", "lagb", "counta", "Flagbs", "FLAGf", "countB", "flagsB", "offsetb", "bugb", "FLAGbs", "featurea", "bugf", "FLAGb", "flagsbb", "countb", "featurebi", "lagbb", "Flaga", "flagsb", "fieldb", "argb", "arga", "Flagbe", "featurec", " flagbs", "lagba", "flagsa", "flagc", "flagsbe", "FLAGa", "fielda", "flagf", " flagc", "offseta", "flaga", " flagbe", "Flagc", "argB", "flagB", "flagbs", " flagbb", "flagbi", "bugB", "Flagf", " flagB", "Flagbi", "argf", " flagba", "countc", "fieldbi", "featureb", "Flagb", " flagk", "lagB", "fieldk", "offsetk", " flaga", "flagba"], "flabc": ["Flbg", "Flabc", "llabe", "llabc", "flabe", "colabe", "llabb", "flabb", "Flabb", "colbg", "llbg", "colabc", "flbg", "Flabe", "colabb"], "i": ["gi", "name", "ui", "a", "end", "ie", "int", "qi", "mi", "p", "ai", "c", "y", "o", "ix", "ini", "iu", "slice", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "uri", "l", "u", "d", "pi", "j", "f", "io", "xi", "di", "ip", "ci", "b", "e", "t", "info", "col", "id", "multi", "li", "ii", "source", "bi", "n"]}}
{"code": "N = int(input())\\n\\ndef f(n):\\n    print(n, flush = True)\\n    S = input()\\n    if S == 'Vacant':\\n        exit()\\n    return S\\n\\nl = 0\\nr = N\\nS = f(l)\\nfor i in range(20):\\n    mid = (l + r) // 2\\n    U = f(mid)\\n    len = mid - l + 1\\n    if (len % 2 == 0 and S != U) or (len % 2 and S == U):\\n        l = mid\\n        S = U\\n    else:\\n        r = mid\\n", "target": "344", "substitutes": {"N": ["F", "NR", "L", "V", " L", " R", "NN", "NL", "Q", "X", "Y", "NS", "NI", "K", "Na", "O", "P", "B", "C", "T", "Len", "D", "Ne", "A", "NT", "Ni", "Z", "Ns", "ND", "R", "M", "G", "NA"], "n": ["s", "k", "name", "p", "g", "c", "o", "y", "num", "nc", "number", "ne", "z", "fn", "x", "sn", "w", "node", "u", "d", "nn", "q", "f", "j", "m", "ns", "input", "v", "t", "e"], "S": ["F", "ss", "s", "E", " M", "L", "V", " L", " R", "H", "Q", "X", " s", "SC", "Y", "Is", "SE", "NS", "Si", "K", "PS", "SH", "SI", "Su", "O", "SA", "P", "T", "C", "B", "D", "OSS", "SK", "As", " C", "A", " SS", "W", "SL", "Res", "RS", "Sl", "I", "SS", "US", "Ns", "CS", "R", " SN", "M", "String", "Sum", "SN", "G", "SU"], "l": ["s", "k", "ol", "L", "ur", "p", "g", "c", "y", "sl", "o", "h", "el", "left", "lc", "kl", "z", "w", "u", "d", "ll", "ln", "dl", "f", "j", "m", "lf", "rl", "nl", "v", "b", "ell", "e", "ls", "le", "t", "li", "ul", "lin"], "r": ["rh", "yr", "rr", "s", "k", "Rs", "NR", " R", "ur", "p", "g", "c", "SR", "h", "rd", "RR", "re", "lr", "P", "hr", "ro", "z", "ar", "w", "Rh", "u", "rb", "d", "j", "right", "sr", "range", "ir", "m", "f", "R", "nr", "b", "v", "e", "t", "fr", "ru", "er", "rs"], "i": ["end", "ie", "ib", "p", "pri", "ai", "c", "h", "num", "iu", "lo", "ti", "x", "ind", "start", "I", "d", "j", "ir", " j", "ni", "LI", "id", "li", "ii", "ip"], "mid": ["min", "s", "middle", "loc", "end", "mad", "field", "pid", "line", "mr", "mer", "mi", "nd", "ms", "low", "medium", "pos", "lower", "md", "la", "grid", "mini", "rand", "scale", "x", "sim", "master", "ind", "start", "next", "u", "d", "max", "shift", "f", "m", "small", "lim", "hi", "med", "dim", "limit", "high", "le", "mm", "seq", "id", "sub", "Mid", "li", "month", "range", "part", "lo"], "U": ["F", "L", "V", " L", "URI", "H", "PUT", "Q", "ur", "CU", "X", "Y", "UC", "FU", "UN", "LU", "UP", "O", "P", "T", "C", "D", "W", "UD", "I", "UV", "u", "UT", "ut", "UR", "Us", "R", "M", "OU", "MU", "UI", "G", "Ul", "ul", " u", "SU", "UL"], "len": ["min", "loc", "L", "dy", "ie", "span", "non", "p", "c", "sl", "en", "num", "un", "pos", "el", "Len", "split", "lo", "lc", "z", "rev", "w", "ind", "u", "d", "ln", "f", "dl", "m", "lim", "length", "v", "limit", "base", "count", "le", "id", "li", "val", "lin"]}}
{"code": "#!/usr/bin/env python3\\nfrom collections import deque, Counter\\nfrom heapq import heappop, heappush\\nfrom bisect import bisect_right\\n\\ndef main():\\n    N = int(input())\\n    C = [None] * N\\n    ans = 0\\n    for i in range(N):\\n        a, b = map(int, input().split())\\n        C[i] = a+b\\n        ans -= b\\n    C.sort(reverse=True)\\n    print(ans + sum(C[::2]))\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "794", "substitutes": {}}
{"code": "import numpy as np\\n\\nH, N = map(int, input().split())\\nA = []\\nB = []\\n\\nfor i in range(N):\\n  a, b = map(int, input().split())\\n  A.append(a)\\n  B.append(b)\\n  \\nA = np.array(A)\\nB = np.array(B)\\nDP = np.zeros(H + 1)\\n\\nfor i in range(1, H + 1):\\n  DP[i] = np.amin(DP[np.maximum(i - A, 0)] + B)\\n\\nprint(int(DP[-1]))\\n\\n", "target": "41", "substitutes": {"H": ["F", "Length", " h", "E", "L", "V", "Q", "X", "DH", "Y", "K", "h", "O", "P", "T", "C", "D", "NH", "S", "W", "I", "HD", "Host", "Z", "HH", "HI", "U", "R", "M", "G", "RH", "n"], "N": ["F", "Length", "E", "L", "V", "NN", "Q", "X", "Y", "Size", "NS", "NE", "K", "O", "P", "C", "T", "D", "Ne", "S", "W", "I", "No", "Z", "Ns", "U", "R", "M", "J", "NB", " n", "KN", "n"], "A": ["F", "GA", "E", "Ca", "T", "L", "At", "Az", "X", "Y", "AP", "IA", "LA", "AR", "EA", "K", "Na", "Ha", "AM", "AB", "AW", "P", "C", "AE", "As", "D", "Ar", "AC", "API", "AAA", "AA", "AV", "And", "Alpha", "da", "S", "Inf", "AH", "I", "Ab", "AU", "Ma", "CA", "U", "AF", "alpha", "M", "G", "Am", "The", "Ac", "An"], "B": ["F", "E", "EB", "L", "LB", "V", "HB", "Q", "Y", "UB", "AP", "CB", "Bi", "DB", "BA", "AB", "FB", "P", "C", "T", "D", "SB", "BB", "BC", "BI", "TB", "W", "I", "MB", "Ab", "BE", "Two", "BR", "BL", "OB", "WB", "Pl", "U", "GB", "BS", "Blue", "M", "NB", "Both", "QB", "VB", "Other", "G", "BER", "BF", "Bs"], "i": ["gi", "k", "end", "int", "qi", "p", "phi", "ai", "c", " I", "oi", "h", "ini", "axis", "iu", "z", "si", "eni", "index", "x", "ind", "I", "it", "l", "u", "d", "pi", "io", "f", "j", "m", " j", "xi", "ri", "ni", "ip", "ci", "ij", "alpha", "v", "e", "zi", "id", "li", "ii", "n", "bi", "ti"], "a": ["aa", "va", "p", "ai", "c", "Na", "api", "ba", "mA", "ab", "au", "array", "AA", "da", "Alpha", "x", "u", "d", "one", "ca", "sa", "ac", "ga", "asa", "f", "area", "am", "ae", "alpha", "ea", "an", "ad", "n"], "b": ["aa", "be", "boot", "p", "bs", "c", "y", "h", "o", "wb", "ab", "BB", "body", "sb", "l", "ob", "rb", "d", "bb", "u", "bf", "abb", "f", "eb", "j", "xb", "db", "base", "e", "bc", "nb", "lb", "n"], "DP": ["TP", "PI", "DA", "DS", "DH", "Q", "DC", "WP", "DM", "MP", "LP", "DO", "DB", "APD", "P", "dB", "D", "NP", "IP", "DD", "PD", "LD", "API", "GP", "PP", "DR", "PC", "PA", "DF", "AMP", "DI", "BP", "CP", "DJ", "FP", "SP", "DK", "dp", "DL", "EP", "VP"]}}
{"code": "N = int(input())\\nA = list(map(int,input().split()))\\nflag = True\\nans = 0\\nwhile flag:\\n    flag = False\\n    for j in range(N-1,0,-1):\\n        if A[j] < A[j-1]:\\n            A[j],A[j-1] = A[j-1],A[j]\\n            flag = True\\n            ans += 1\\nprint(*A)\\nprint(ans)\\n\\n", "target": "561", "substitutes": {"N": ["F", "E", "L", "V", "NL", "H", "Sn", "X", "Q", "Y", "NC", "Size", "Num", "NS", "K", "AN", "O", "P", "B", "C", "T", "D", "S", "I", "No", "NT", "Z", "Ns", "ND", "R", "M", "J", " n", "NA", "n"], "A": ["F", "AD", "E", "First", "T", "a", "L", "At", "V", "All", "H", "AS", "X", "MA", "Y", "AP", "LA", "AR", "K", "AST", "AM", "O", "AW", "P", "B", "SA", "C", "As", "D", "mA", "AC", "API", "Ar", "AA", "If", "au", "Alpha", "array", "S", "I", "Ab", "AU", "PA", "Average", "AB", "Array", "CA", "U", "AF", "M", "J", "G", "The", "NA", "An", "App"], "flag": ["bad", "error", "agn", "a", "int", "span", "ag", "reply", "arg", "init", "ai", "iet", "leaf", "ig", "year", "sign", "force", "long", "ann", "disabled", "store", "ar", "af", "ind", "start", "anch", "action", "ant", "bug", "child", "ish", "member", "wait", "lag", "sort", "status", "style", "flags", "close", "FLAG", "agg", "sa", "age", "kind", "cat", "list", "type", " Flag", "debug", "count", "all", "big", "id", "bit", "ret", "inline", "part", "an", "Flag", "ad", "offset"], "ans": ["ano", "s", "a", "int", "offs", "cas", "lan", "span", "atan", "na", "ai", "ms", "ats", "ions", "cats", "years", "anas", "AN", "ANS", "anes", "annels", "ann", "anon", "anc", "ani", "annot", "ays", "ana", "x", "nan", "ars", "ant", "aned", " flags", "nn", "ons", "ids", "aus", "leans", "sk", "flags", "ants", "ns", "os", "len", " Ans", "cons", "ls", "ds", "ops", "NA", "an", "n"], "j": ["ji", "k", "a", "last", "ja", "p", "ai", "g", "c", "jo", "i", "dj", "y", "jj", "num", " i", "o", "jl", "z", "ch", "jet", "x", "ind", "next", "adj", "obj", "l", "u", "uj", "d", " J", "q", "job", "jp", "f", "m", "oj", "jc", "note", "br", "aj", "ij", "J", "v", "b", "key", "bj", "e", "kj", "li", "ii", " l", "part", "n"]}}
{"code": "#n=int(input())\\nh,w=map(int,input().split())\\n#l=list(map(int,input().split()))\\nl=[list(input()) for i in range(h)]\\n\\n# \u307e\u305a\u306f\u884c\u306b\u3064\u3044\u3066\u78ba\u8a8d\u3059\u308b\\nrow_compare=['.' for i in range(w)]\\nsave_rows=[]\\nfor row in range(h):\\n    if not l[row]==row_compare:\\n        save_rows.append(row)\\n\\nnewl=[l[row] for row in save_rows]\\n\\nh=len(newl)\\n#\u6b21\u306f\u5217\\nsave_col=[]\\ncol_compare=[\".\" for i in range(h)]\\nfor col in range(w):\\n    temp=[]\\n    for row in range(h):\\n        temp.append(newl[row][col])\\n    if not temp==col_compare:\\n        save_col.append(col)\\n\\nansl=[]\\nfor row in range(h):\\n    temp=[]\\n    for col in range(w):\\n        if col in save_col:\\n            temp.append(newl[row][col])\\n    ansl.append(temp)\\n\\nfor row in ansl:\\n    print(*row,sep=\"\")", "target": "413", "substitutes": {}}
{"code": "s = input()\\nt = input()\\n \\nflag = True\\nfor i in range(len(s)):\\n  if s[i] != t[i]:\\n    flag = False\\nif flag == True:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")\\n", "target": "472", "substitutes": {"s": ["a", "strings", "south", "ys", "ins", "ans", "states", "ps", "p", "g", "c", "sym", "xs", "sets", "o", "ks", "si", "es", "als", "S", "cells", "sb", "args", "l", "services", "lines", "ses", "u", "parts", "d", "stats", "f", "sa", "cs", "ssl", "sync", "ments", "sections", "ns", "ws", "input", "os", "ts", "gs", "b", "e", "ls", "ips", "ds", "submit", "ies", "n"], "t": ["a", "at", "tt", "tool", "p", "g", "c", "target", "y", "o", "h", "tp", "pt", "T", "tf", "temp", "z", "x", "w", "l", "u", "d", "ta", "out", "dt", "f", "j", "m", "ts", "b", "v", "e", "test", "n"], "flag": ["name", "field", "group", "alt", "line", "int", "sid", "ag", "fd", "arg", "state", "log", "leaf", "tag", "weight", "sign", "force", "long", "store", "af", "ind", "start", "bug", "band", "f", "lag", "sort", "lf", "style", "flags", "FLAG", "age", "spin", "type", "key", "limit", "len", "count", "standard", "id", "filter", "bit", "skip", "inline", "part", "Flag", "offset", "info"], "i": ["gi", "k", "ui", "ie", "int", "qi", "mi", "p", "ai", "c", "h", "y", "ix", "ini", "iu", "ti", "z", "mini", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "fi", "u", "d", "pi", "uni", "j", "f", "io", "xi", "ri", "di", "ni", "ci", "b", "e", "id", "li", "ii", "val", "bi", "n"]}}
{"code": "N, K = [int(_c) for _c in input().split(\" \")]\\nS_orig = input()\\npoint_list = []\\nfor target, non_target in zip([\"L\", \"R\"], [\"R\", \"L\"]):\\n    S = list(S_orig)\\n\\n    start_idx_list = []\\n    before_char = None\\n    for i, c in enumerate(S):\\n        if i == 0:\\n            start_idx_list.append(i)\\n            before_char = c\\n        else:\\n            if before_char == non_target and c == target:\\n                start_idx_list.append(i)\\n            before_char = c\\n    start_idx_list.append(len(start_idx_list) - 1)\\n    if len(start_idx_list) - 1 <= K:\\n        point_list.append(len(S) - 1)\\n        continue\\n\\n    longest = 0\\n    start_idx = -1\\n    end_idx = -1\\n    for i in range(len(start_idx_list) - K):\\n        cur_length = start_idx_list[i + K] - start_idx_list[i] + 1\\n        if cur_length > longest:\\n            start_idx = start_idx_list[i]\\n            end_idx = start_idx_list[i + K]\\n            longest = cur_length\\n\\n    for _idx in range(start_idx, end_idx):\\n        S[_idx] = target\\n    S = [\"N\"] + S + [\"N\"]\\n\\n    point = 0\\n    for idx in range(1, N + 1):\\n        if S[idx] == \"L\":\\n            if S[idx + 1] == \"L\":\\n                point += 1\\n        if S[idx] == \"R\":\\n            if S[idx - 1] == \"R\":\\n                point += 1\\n\\n    point_list.append(point)\\n\\nprint(max(point_list))", "target": "164", "substitutes": {"N": ["F", "E", "L", "V", "NN", "H", "Q", "X", "Y", "NS", "Num", "O", "P", "T", "C", "B", "D", "Len", "Ne", "A", "I", "No", "NT", "Node", "Ni", "Z", "Ns", "ND", "R", "M", " n", "G", "NA", "n"], "K": ["F", "k", "E", "KK", "Ke", "L", "KI", "V", "AK", "H", "Q", "X", "Y", "IK", "SPEC", "KE", "TH", "O", "P", "T", "C", "B", "SK", "D", "EC", "NK", "KS", "KB", "A", "W", "KC", "I", "HK", "Z", "UK", "KR", "PK", "U", "R", "M", "J", "DK", "KN", "G", "CH", "Ku"], "_c": ["_C", "_s", "_cf", "_t", "_count", "_ci"], "S_orig": ["S_Orig", "s_Orig", "S__orig", "S__original", "s_original", "s_orig", "s__orig", "s__original", "S_original", "S_comb", "S__comb", "S__Orig", "S_rev", "s_comb", "s__Orig", "s__comb", "s_rev"], "point_list": ["point2set", "pointinglist", " point_l", "element6set", "step_list", "point2List", "pointingList", "point_bl", "point_set", "point6set", "Point_out", "Point2out", "Point2list", " point_type", "point2l", "step_table", "element_set", "point__list", "point2type", "Point2List", "point_out", "point__LIST", "point2bl", "pointingbl", "Point_List", "point_List", "Point_bl", "point2table", "point__listed", "Point_list", "element_LIST", "point_listed", "pointedcollection", "element_listed", "point6LIST", "pointingout", "pointedtable", "point__set", "element6list", " point_set", "point_LIST", "element6LIST", "pointedlist", "point_collection", "point_type", "point6listed", "element6listed", "point2collection", "step_collection", "point2out", "point_table", "element_list", "point6list", "point2list", "point_l", "Point2bl"], "target": ["new", "character", "the", "cut", "a", "int", "pointer", "to", "default", "arc", "rec", "net", "chain", "this", "T", "C", "pattern", "component", "arget", "ce", "source", "cross", " Target", "next", "current", "ctx", "external", "remote", "nt", "f", "object", "cat", "short", "core", "join", "address", "sequence", "null", "input", "parent", "match", "type", "path", "string", "v", "b", "t", "e", "reference", "cf", "base", "range", "config", "Target", "n"], "non_target": ["non_gap", "not_token", "non_random", "non_source", "non_blank", "not_source", " non_random", " non_source", "not_target", " non_blank", "not_gap", "non_token"], "S": ["s", "VS", "DS", "V", "Start", "SC", "AS", "Series", "SE", "SR", "Os", "Su", "RS", "OS", "Points", "Site", "WS", "Set", "G", "SO", "Target", "Socket", "L", "H", "X", "NS", "SH", "Source", "ST", "Ps", "Service", "Sl", "U", "Part", "GS", "String", "System", "Solution", "IS", "HS", " s", "TS", "PS", "O", "SA", "B", "C", "A", "SL", "SS", "Single", "Z", "CS", "R", "M", "MS", "SP", "F", "E", "Y", "Sample", "Si", "SEC", "SAM", "SI", "OSS", "P", "T", "D", "I", "SN", "BS", "SU"], "start_idx_list": ["start_idxingbase", "start_idxs_queue", "start_idx2set", "start_idx_cl", "start_idx_lc", "start_idX_cl", "start_idx2l", "start_idxes_string", "start_idxes_list", "start_idy_type", "start_idxinglist", "start_idz_list", "start_idx_l", "start_idx2chain", "start_idxingstring", "start_idz_base", "start_idxs_base", "start_idx_i", "start_idx_queue", "start_idx_chain", "start_idxes_List", "start_idz_chain", "start_idy_l", "start_idxingtype", "start_idxs_list", "start_idx_type", "start_idxingqueue", "start_idz_string", "start_idy_list", "start_idx2List", "start_idx_List", "start_idxes_l", "start_idx_string", "start_idxingl", "start_idz_set", "start_idxinglc", "start_idx_base", "start_idX_list", "start_idx_set", "start_idz_i", "start_idz_l", "start_idxes_lc", "start_idz_List", "start_idx2list", "start_idX_List"], "before_char": ["after_character", "after_chain", "before_component", "before_character", "after_ctr", "after_component", "after_chip", "after_char", "before_chip", "before_ctr", "before_chain", "after_ch", "before_ch", "before_channel", "after_channel"], "i": ["s", "ui", "ei", "int", "qi", "ai", "y", "ix", "slice", "si", "x", "yi", "current", "l", "j", "f", "b", "li", "inner", "info", "gi", "ie", "mi", "ic", "h", "ini", "u", "pi", "ni", "ci", "e", "ice", "multi", "id", "ip", "ti", "chi", "p", " I", "oi", "r", "iu", "z", "eni", "ch", "index", "ind", "start", "it", "fi", "d", "io", "m", " j", "t", "zi", "n", "ih", "k", "end", "a", "g", "o", "iq", "mini", "I", "uri", "xi", "ri", "di", "ii", "bi", "ori"], "c": ["cur", "s", "k", "end", "a", "p", "arc", "center", "h", "r", "nc", "cp", "C", "coll", "lc", "z", "ch", "ce", "unc", "cy", "cb", "con", "cm", "l", "ctx", "u", "d", "f", "rc", "cs", "cat", "m", "dc", "cd", "ci", "ct", "v", "b", "cf", "cr", "e", "t", "cc", "col", "mc", "n"], "longest": ["longlargest", " longcest", " longhest", " longEST", "linelargest", "shorthest", "Longhest", "longhest", "bigested", "Longlargest", "lineest", "longested", "longgest", "Longest", "Longgest", "Longcest", "Longested", "longEST", "shortest", "LongEST", "shortEST", "linehest", "shortcest", "lineested", " longgest", " longested", "longeness", "bigest", "Longeness", " longeness", "biggest", "longcest", " longlargest", "bigeness"], "start_idx": ["start_Idv", "start_idsv", "start_idis", "start_idsz", "start_idsis", "start_indv", "start_idsxb", "start_idux", "start_Idxb", "start_timexs", "start_timex", "start_ridux", "start_idz", "start_indz", "start_Idy", "start_idsy", "start_Idux", "start_idsx", "start_timeX", "start_indx", "start_idxb", "start_ridx", "start_indy", "start_Idz", "start_idsX", "start_timeis", "start_idsxs", "start_ridxb", "start_idv", "start_idy", "start_ridz", "start_Idx", "start_idsux", "start_idX", "start_idxs"], "end_idx": ["end_idnex", "end_intx", "end_idy", "end_idX", "end_Idz", "end_intX", "end_idexc", "end_idex", "end_idxs", "end_intnex", "end_idz", "end_IdX", "end_idxc", "end_ideX", "end_Idxc", "end_Idnex", "end_endx", "end_Idxs", "end_idexs", "end_Idy", "end_endy", "end_endX", "end_inty", "end_Idx", "end_endz"], "cur_length": ["cur_count", " cur_size", "cur64Length", "cur_len", "cur_distance", "char_count", "cur_diff", "cur_size", " cur_distance", " cur_len", "cur64len", "curaclen", "curaclength", "cur_Length", "cur64length", "char_len", "cur__size", "cur__length", "char_length", "cur64diff", "cur__len", "cur__distance", " cur_Length", "curaccount", " cur_diff"], "_idx": ["_sidxes", "_inxs", "byidxs", "byidxe", "_inxes", "bysidxe", "_sidxe", "_Idxs", "_idxe", "_idexs", "_idxf", "_ideX", "_sidx", "byidx", "_aidxs", "_sidxs", "_IdX", "_latex", "_aidxf", "bysidx", "_idX", "_aidx", "bysidxs", "_inx", "_latexe", "byidxes", "_latexs", "_latexes", "_Idxf", "_idxs", "_idexf", "_idex", "_aidX", "bysidxes", "_inxe", "_Idx", "_idxes"], "point": ["float", "error", "letter", "unit", "Point", "change", "cut", "line", "end", "value", "pointer", "stroke", "event", "p", "distance", "inter", "location", "zone", "gap", "number", "section", "slice", "pt", "P", "edge", "time", "index", "cross", "start", "node", "connection", "patch", "out", "one", "position", "style", "close", "address", "set", "day", "length", "path", "type", "key", "pair", "mark", "step", "move", "double", "month", "range", "part", "draw", "block", "offset"], "idx": ["idxt", "idexi", "atxes", "Idxs", " idy", "Idx", "Idxes", "adx", "idxes", "indX", "idxi", "indz", "atxs", "adxs", "idX", "idy", "atX", " idxt", "idex", " idxi", "Idz", "idey", " idz", "adxes", "idez", "IdX", "ideX", "indxi", "indy", "Idxt", "atx", "idz", "adX", "Idy", " idX", "indxt", "idxs", "indx"]}}
{"code": "s = list(input())\\nans = 0\\ncnt_w = 0\\nfor i, ss in enumerate(s):\\n    if ss == 'W':\\n        ans += i - cnt_w\\n        cnt_w += 1\\n\\nprint(ans)        \\n", "target": "587", "substitutes": {"s": ["a", "strings", "south", "groups", "ins", "p", "states", "sed", "g", "c", "h", "r", "es", "params", "S", "w", "sb", "tests", "lines", "services", "ses", "sg", "sup", "f", "ssl", "sections", "ns", "input", "os", "gs", "b", "v", "e", "ls", "comments", "n"], "ans": ["ross", "ents", "lan", "cas", "nas", "amps", "ams", "na", "xs", "ats", "aning", "anas", "AN", "atten", "ANS", "wh", "ks", "anes", "annels", "ann", "anse", "ani", "oss", "vers", "ays", "es", "ana", "can", " means", "w", "anus", "asses", "aves", "aned", "ass", "ons", "aus", "works", "ens", "leans", "ants", "atches", "ns", "ism", "scan", "os", "reads", "ls", "ians", "ds", "rss", "an", "ins"], "cnt_w": ["cnt5W", "cnt5wa", "cNTPw", "cnt2wa", "cnt_wa", "cnt2sw", "cNTPW", "cst2ws", "cntPws", "cst_ws", "cst2W", "cst_sw", "cNT_w", "cnt64ws", "cnt_ws", "cst_W", "cNT_wa", "cNT_sw", "cnt2w", "cst_w", "cNTPws", "cst2w", "cntPW", "cnt2ws", "cnt_W", "cnt2W", "cNT_ws", "cnt_sw", "cntPwa", "cNT_W", "cntPw", "cst2sw", "cnt64wa", "cnt64W", "cNTPwa", "cnt64w", "cnt5w", "cnt5ws"], "i": ["a", "ei", "int", "p", "phi", "ai", "c", "y", "ini", "iu", "z", "si", "index", "x", "start", "I", "pi", "d", "j", "io", "f", "m", "xi", "di", "ri", "ni", "ci", "v", "e", "t", "zi", "li", "ii", "n", "bi", "ti"], "ss": ["sq", "ross", "sc", "str", "uss", "hess", "est", "ps", "sit", "xx", " iss", "sl", "css", "pos", "switch", "oss", "ng", "es", "si", "x", "mes", "asses", "ass", "SS", "\u00df", " ess", "sw", "style", "ess", "iss", "ws", "us", "su", "os", "rss", "ress", "ds", "se", "sv", "rs", "test"]}}
{"code": "#abcdef\\n#a*b,a*c,a*d,a*e,a*f\\n#b*c,b*d,b*e,b*f\\n#c*d,c*e,c*f\\n#d*e,d*f\\n#e*f\\n\\nn = int(input())\\nl = list(map(int,input().split()))\\n\\nmod = 10**9 + 7\\nall_l = 0\\nfor i in range(n):\\n    all_l += l[i]\\n    all_l %= mod\\n\\nans = 0\\nfor i in range(n-1):\\n    all_l = (all_l-l[i])%mod\\n    ans += (l[i]*all_l)%mod\\n    ans %= mod\\n\\nprint(ans)\\n", "target": "198", "substitutes": {}}
{"code": "import sys\\ndef rs(): return sys.stdin.readline().rstrip()\\ndef ri(): return int(sys.stdin.readline())\\ndef ria(): return list(map(int, sys.stdin.readline().split()))\\ndef ws(s): sys.stdout.write(s); sys.stdout.write('\\n')\\ndef wi(n): sys.stdout.write(str(n)); sys.stdout.write('\\n')\\ndef wia(a, sep=' '): sys.stdout.write(sep.join([str(x) for x in a])); sys.stdout.write('\\n')\\n\\n\\ndef main():\\n    n = ri()\\n    x = rs()\\n\\n    k = int(x, 2)\\n    d = x.count('1')\\n    \\n    if d > 1:\\n        k0 = k % (d-1)\\n    k1 = k % (d+1)\\n\\n    f = [0] * (n + 1)\\n    for i in range(1, n+1):\\n        f[i] = f[i % bin(i).count('1')] + 1\\n\\n    for i in range(n):\\n        cnt = 0\\n        if x[i] == '1' and d - 1 > 0:\\n            cnt += f[(k0 - pow(2, n - i - 1, d - 1)) % (d - 1)] + 1\\n        elif x[i] == '0':\\n            cnt += f[(k1 + pow(2, n - i - 1, d + 1)) % (d + 1)] + 1\\n        wi(cnt)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "690", "substitutes": {"s": ["spec", "str", "sample", "p", "c", "y", "sl", "r", "o", "z", "si", "S", "sn", "w", "sb", "l", "u", "j", "sa", "ws", "input", "su", "string", "v", "b", "t", "e", "ls", "sv", "source"], "n": ["name", "mn", "p", "na", "nd", "g", "c", "y", "o", "nc", "r", "num", "net", "un", "en", "ot", "ne", "z", "on", "sn", "w", "ny", "l", "u", "nn", "q", "nt", "j", "m", "ln", "ns", "no", "ni", "v", "b", "t", "N", "e", "dn", "nb", "an", "nor"], "a": ["aa", "va", "ma", "p", "na", "qa", "c", "ama", "fa", "y", "r", "la", "ba", "ab", "z", "au", "ana", "pa", "A", "ar", "w", "aaa", "ca", "sa", "ac", "ga", "area", "ya", "ae", "alpha", "b", "ea", "za", "an"], "sep": [" seap", "peg", "pev", "peap", " seps", " selp", "seg", "seap", "cev", " sev", " seg", "peps", "pelp", "selp", "ceg", "ceap", "cep", "pep", "ceps", "sev", "seps", "celp"], "x": ["X", "p", "na", "xf", "tx", "xs", "c", "g", "xx", "ic", "y", "rx", "r", "ix", "h", "o", "case", "any", "rax", "z", "xt", "ex", "xxx", "index", "xxxx", "w", "cross", "l", "wx", "u", "ctx", "q", "j", "ax", "m", "ww", "xi", "ux", "xb", "ray", "data", " X", "xe", "xp", "v", "t", "e", "xes", "xy", "id", "xc", "za", "xa", "xxxxxxxx"], "k": ["kid", "p", "g", "c", "K", "y", "o", "r", "h", "ks", "kn", "z", "mk", "kw", "w", "ok", "u", "q", "j", "sk", "m", "v", "b", "ck", "e", "id", "ik"], "d": ["dx", "dd", "dy", "dom", "fd", "p", "dist", "nd", "g", "c", "dat", "y", "r", "o", "h", "sd", "md", "ded", "D", "z", "da", "diff", "dm", "ind", "w", "l", "u", "do", "q", "dl", "dt", "m", "du", "j", "dc", "di", "day", "data", "ld", "dim", "b", "v", "e", "t", "pd", "ds", "dos", "dn", "id", "ad"], "k0": ["ck00", "k8", "k4", "p4", " k2", "c8", " k00", "c0", "k00", "sk0", "p0", "ck8", "c00", " k4", "sk8", "sk4", "k2", "k6", "sk6", "c2", " k6", "ck2", "ck0", "p8", "p6", " k8"], "k1": ["k8", "x1", "xOne", "k4", "K2", "q1", "q0", "K1", "p3", "ok1", "q2", "K3", "ok4", " kOne", "p0", "x8", " k4", "ok8", "k2", "p1", "K0", "p2", "q3", "k3", "x4", "okOne", " k8", "kOne"], "f": ["F", "fb", "p", "g", "c", "fp", "h", "r", "y", "o", "rf", "sf", "fe", "inf", "tf", "fs", "z", "fc", "w", "l", "u", "q", "j", "m", "fen", "self", "v", "b", "t", "e", "fr", "form", "info"], "i": ["ui", "ie", "int", "ei", "qi", "p", "phi", "ai", "ic", "c", "y", "o", "r", "ini", "ix", "iu", "z", "mini", "si", "index", "yi", "ind", "I", "uri", "l", "u", "pi", "io", "j", "m", "xi", "di", "ni", "ci", "ip", "isi", "v", "b", "key", "t", "e", "info", "zi", "id", "li", "ii", "bi", "ti"], "cnt": ["cNT", " cpt", "cpt", "acount", "CNT", "cnc", "acnd", "pNT", " cNT", " cwd", " cnc", " cant", "acnt", "Cnt", "scwd", "Cnc", "ecnt", "pant", "acNT", " cnd", "scnt", "ecpt", "scnot", " count", "scpt", "Cnd", "Cnot", "cnot", "pnt", "cant", "ecwd", "Cant", "ecnot", "count", " cnot", "pnot", "cnd", "cwd", "pnc", "Count"]}}
{"code": "import sys\\na,b=map(int, input().split())\\ns=[a,b,a+b]\\nfor si in s:\\n  if si%3==0:\\n    print('Possible')\\n    sys.exit()\\n\\nprint('Impossible')\\n", "target": "635", "substitutes": {"a": ["aa", "sta", "int", "va", "ma", " da", "p", "qa", "ity", " ta", "ai", "c", " ca", "i", "ama", "fa", "ua", "y", " c", "la", "ba", " ra", "ab", "au", "da", "x", "index", "pa", "A", " alpha", "ia", " ar", "d", "aaa", "f", "sa", "ca", "ac", " fa", "asa", "ga", " sa", " an", "area", "aj", "ae", "oa", "alpha", "ea", "an", "n"], "b": ["aa", "ib", "fb", "p", "bs", "g", "c", "pb", "i", "y", "r", "h", "wb", "beta", "mb", "zb", "B", "ba", "ab", "z", "x", "sb", "cb", "l", "bb", "d", "rb", "u", "abb", "f", "db", "v", "base", "e", "count", "abc", "nb", "lb", "Bs", "n"], "s": ["ss", "hs", "strings", "acks", "groups", "p", "ps", "states", "g", "ms", "sym", "i", "steps", "rows", "sets", "sys", "xs", "sd", "sie", "ows", "es", "events", "S", "sb", "tests", "args", "parts", "services", "ses", "lines", "sa", "cs", "ns", "abs", "gs", "ts", "ls", "scripts", "ins"], "si": ["gi", "ss", "aa", " bi", "sta", "ma", "ity", "ai", " sc", " sv", "i", "Si", " sig", "ini", " i", "sd", "sie", " vi", "SI", "sp", "ti", " ss", "yi", " sr", " pi", " sec", " spe", "sb", "so", " SI", " sy", "pi", " sd", "sa", "agi", " psi", "xi", " sa", "su", "ni", "ci", " sp", " ape", "li", " sid", "ii", "sum", "bi", " sat"]}}
{"code": "x = lambda: int(input())\\nprint(((x()+x())*x())//2)", "target": "319", "substitutes": {"x": ["name", "field", "text", "value", "int", "code", "python", "X", "p", "tx", "xs", "c", "plus", "i", "xx", "y", "number", "work", "px", "ix", "rx", "temp", "z", " xx", "xxx", "index", "ex", "image", "cent", "exec", "wx", "max", "f", "ax", "point", "ww", "function", "xi", "output", "input", "data", "alpha", " X", "func", "b", "string", "view", "e", "t", "xy", "print", "test", "step", "xc", "word", "abc", "bit", "val", "xa", "n"]}}
{"code": "string = input()\\n \\nif string[-1] != 's':\\n  new_string = string[0:] + 's'\\nif string[-1] == 's':\\n  new_string = string[0:] +'es'\\n \\nprint(new_string)", "target": "746", "substitutes": {"string": ["new", "name", "letter", "text", "field", "unit", "strings", "value", "sound", "int", "str", "escape", "service", "strip", "element", "resource", "number", "comment", "lower", "section", "filename", "slice", "array", "ident", "ring", "valid", "start", "version", "answer", "operator", "object", "char", "function", "old", "null", "area", "pad", "single", "input", "address", "data", "length", "list", "complete", "type", "String", "space", "pair", "word", "double", "prefix", "source"], "new_string": ["old_string", "new5strip", "newingdata", "same_data", "new__strings", "new5space", "new__string", "newingstring", " new_space", "sameingdouble", " new__string", "newbadword", "same_string", " new__sequence", "new_double", "old_strings", "newbadvalue", "new_space", "newbadstrings", "new_strip", " new_sequence", " new__space", "newingdouble", " new_strip", "new_word", "old_word", "new__sequence", "new_data", "new_strings", "sameingdata", "same_number", "same_double", "sameingnumber", "new__strip", "newingnumber", "new__value", "new_number", "new5string", "sameingstring", "new_value", "new__word", "newbadstring", "new__space", "old_value", "new5sequence", " new__strip", "new_sequence"]}}
{"code": "N = int(input())\\nprint(N // 2 - 1 + (N % 2))\\n", "target": "522", "substitutes": {"N": ["F", "MN", "Length", "E", "L", "V", "NN", "H", "Q", "X", "Y", "NS", "K", "NM", "CNN", "O", "P", "T", "C", "B", "D", "NP", "NH", "S", "A", "I", "NT", "Z", "Ns", "R", "M", "J", "G", "NUM", "n"]}}
{"code": "D,N=map(int,input().split())\\n\\nB=100**D\\nI=0\\nA=0\\nwhile I<N:\\n    A+=B\\n    if (A//B)%100:\\n        I+=1\\nprint(A)\\n", "target": "781", "substitutes": {"D": ["F", "AD", "E", "L", "DS", "H", "Q", "Y", "DC", "DM", "K", "DE", "DB", "O", "P", "C", "T", "DD", "S", "BD", "W", "CD", "Ds", "d", "DF", "Z", "R", "M", "G", "DI", " d"], "N": ["F", "E", "L", "V", "NN", "H", "Q", "X", "Y", "NS", "K", "NM", "O", "P", "C", "T", "Ne", "S", "BD", "W", "Ni", "Z", "Ns", "U", "R", "M", "J", "G", "n"], "B": ["F", "Base", "E", "Number", "L", "LB", "V", "H", "BT", "Q", "X", "Y", "CB", "K", "DB", "AB", "O", "P", "C", "T", "BB", "BI", "S", "BD", "W", "MB", "OB", "WB", "U", "R", "M", "b", "NB", "G", "BF", "Bs"], "I": ["F", "PI", "E", "L", "V", "H", "Q", "X", "Is", "Y", "AI", "IA", "i", "K", " i", "SI", "O", "P", "C", "T", "S", "W", "Id", "IO", "II", "U", "R", "Fi", "Pi", "J", "M", "LI", "Index", "G", "DI", "My"], "A": ["F", "AD", "GA", "E", "a", "L", "V", "Area", "H", "AI", "X", "Y", "AP", "IA", "LA", "AR", "This", "K", "Ha", "AM", "AB", "AH", "P", "C", "mA", "AC", "T", "API", "AA", "Alpha", "S", "W", "Ab", "PA", "Ma", "Average", "Offset", "Array", "CA", "U", "AF", "M", "AMI", "G", "Am", "Index", "Ang"]}}
{"code": "def main():\\n    import sys\\n    input = sys.stdin.buffer.readline\\n    H, W, D = (int(i) for i in input().split())\\n    A = [[int(i) for i in input().split()] for j in range(H)]\\n    Q = int(input())\\n    LR = [[int(i) for i in input().split()] for j in range(Q)]\\n\\n    B = [0]*(H*W+1)\\n    pos = {A[i][j]: (i+1, j+1) for i in range(H) for j in range(W)}\\n\\n    for i in range(D+1, H*W+1):\\n        y, x = pos[i - D]\\n        ny, nx = pos[i]\\n        power = abs(nx - x) + abs(ny - y)\\n        B[i] = B[i - D] + power\\n\\n    for le, ri in LR:\\n        print(B[ri] - B[le])\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "254", "substitutes": {"input": ["error", "call", "IN", "text", "a", "line", "int", "str", "table", "reader", "PUT", "request", "method", "stream", "state", "c", "r", "format", " inputs", "but", "connect", "empty", "first", "forward", " C", "array", "search", "index", "image", "version", "current", "I", "l", "buffer", "q", "out", "f", "initial", " Input", "param", "range", "pull", "output", "frame", "U", "data", "Input", " int", "list", "type", "string", "parent", "select", "space", "flow", "session", " IN", "reset", "filter", "source", "config", "form", "feed", "active", "n"], "H": ["F", "Hi", "E", "L", "V", "HS", "X", "DH", "Y", "K", "h", "SH", "TH", "Ha", "HC", "AH", "O", "P", "C", "T", "WH", "NH", "S", "EH", "I", "GH", "HD", "HK", "Z", "HH", "HM", "HI", "U", "R", "M", "J", "N", "G", "Wh", "RH"], "W": ["F", "E", "L", "V", "X", "Y", "Width", "K", "SW", "SH", "GW", "O", "P", "C", "T", "WH", "S", "Weight", "w", "I", "We", "DW", "Z", "Web", "WS", "WB", "WA", "WF", "U", "R", "J", "M", "N", "VW", "G", "Wh", "FW"], "D": ["F", "AD", "E", "DA", "L", "V", "DX", "X", "DH", "Y", "DC", "DM", "DE", "TH", "DB", "DO", "O", "P", "C", "T", "LD", "DD", "JD", "MD", "S", "DT", "I", "DW", "Ds", "d", "Do", "DF", "Z", "ND", "U", "R", "M", "J", "N", "G"], "i": ["gi", "ji", "s", "k", "ui", "a", "ie", "int", "ei", "chi", "qi", "mi", "p", "phi", "ai", "c", "oi", "h", "o", "ini", "ix", "ig", "iu", "ti", "z", "si", "on", "index", "yi", "ind", "w", "I", "it", "l", "u", "d", "pi", "ish", "q", "uri", "f", "io", "m", "cli", "xi", "di", "ni", "ci", "ip", "hi", "isi", "b", "v", "e", "t", "il", "iw", "zi", "id", "li", "ii", "anti", "bi", "n"], "A": ["F", "AD", "a", "L", "At", "AS", "X", "Y", "AP", "LA", "AR", "BA", "AM", "SA", "P", "T", "C", "AC", "As", "AU", "Ar", "AA", "Alpha", "S", "I", "Array", "CA", "U", "AF", "Input", "M", "N", "Am", "HA", "NA", "RA"], "j": ["ion", "ji", "k", "jing", "ie", "int", "ja", "p", "ai", "_", "g", "h", "r", "jj", "ix", "o", "jl", "z", "je", "si", "index", "ind", "w", "adj", "I", "it", "l", "u", "uj", "d", "q", "js", "jp", "f", "jc", "oj", "xi", "aj", "jam", "ci", "ij", "J", "ni", "b", "v", "bj", "kj", "li", "ii", "n", "on"], "Q": ["QU", "F", "E", "L", "V", "X", "Y", "Query", "K", "P", "C", "T", "IQ", "IP", "MQ", "S", "QL", "I", "q", "Z", "U", "R", "J", "M", "Qu", "N", "G", "CH"], "LR": ["NR", "L", "LB", "LT", "TL", "NL", "LS", "LA", "MR", "LP", "Lu", "LU", "RR", "lr", "Len", "LM", "IJ", "LD", "lc", "RF", "LC", "HR", "RB", "RN", "l", "LE", "BR", "ln", "RL", "LV", "RP", "GB", "XL", "LI", "LG", "DL", "JR", "LL", "Ul", "RM"], "B": ["F", "E", "L", "LB", "V", "X", "Y", "LA", "PB", "K", "LP", "O", "P", "T", "C", "SB", "PL", "BB", "S", "Position", "I", "BE", "BR", "BL", "OB", "WB", "U", "R", "BS", "M", "J", "b", "NB", "N", "QB", "G", "BF", "Bs"], "pos": ["min", "PI", "loc", "L", "V", "NL", "X", "p", "Y", "ps", "phi", "o", "P", " positions", "pt", "sp", "po", "z", "PD", "index", "Position", "l", "pi", "d", "OS", "position", "point", "area", "neg", "Pos", "POS", "os", "data", "v", "N", "pose", "part", "block", "n"], "y": ["dy", "ye", "p", "Y", "xx", "o", "h", "ix", "ay", "ne", "z", "zy", "ty", "yi", "cy", "w", "u", "q", "sy", "ky", "xi", "yy", "ya", "b", "e", "xy", "col", "vy", "ry", "ey", "n"], "x": ["dx", "loc", "dy", "X", "p", "na", "Y", "yx", "xx", "rx", "h", "px", "ix", "z", "ex", "yi", "wy", "cy", "w", "l", "wx", "u", "d", "q", "ax", "xi", "ya", "xy", "xc", "n"], "ny": ["loc", "dy", "na", "nm", "yx", "xx", "nc", "px", "ix", "net", "sp", "ne", "nu", "z", "si", "zy", "wy", "cy", "sn", "NY", "adj", "nn", "Ni", "ky", "nw", "ns", "xi", "yy", "ni", "xy", "py", "vy", "nb", "n"], "nx": ["NX", " nw", " nz", "px", "Nz", "pX", " nX", "pz", "Nw", "nz", "pw", "nw", "Nx", "nX", "py", "Ny"], "power": ["Power", "k", "value", "span", "p", "distance", "width", "efficiency", "law", "ph", "charge", "weight", "P", "mean", "force", "pen", "cost", "scale", "w", "adj", " Power", "strength", "q", "pp", "rank", "age", "length", "alpha", "capacity", "powers", "space", "pe", "powered", "grade", "energy", "step"], "le": ["gi", "ie", "line", "les", "ye", "ke", "ele", "p", "ge", "mi", "Le", "ole", "lex", "ine", "el", "ig", "fe", "la", "lc", "ne", "nu", "l", "u", "Li", "ll", "LE", "ky", "xi", "ni", "lu", "len", "ld", "e", "LI", "ice", "sle", "se", "li", "ile", "lo"], "ri": ["gi", "ji", "PI", "RI", "vi", "ris", "rh", "wi", "qi", "mi", "pri", "phi", "rd", "ini", "rib", "la", "lo", "ani", "rid", "eni", "si", "uri", "pi", "Li", "ki", "io", "Ni", "adi", "xi", "co", "di", "ni", "ci", "ij", "ip", "lu", "LI", "zi", "li", "rio", "bi", "ti"]}}
{"code": "def main():\\n    N,K = map(int,input().split())\\n    syo = N//K\\n    amari = N%K\\n    N = abs(amari-K)\\n    ans = min(N,amari)\\n    return ans\\n    \\n\\nprint(main())\\n", "target": "63", "substitutes": {"N": ["F", "MN", "E", "L", "NO", "V", "NN", "H", "Q", "X", "Y", "NS", "NE", "Na", "NM", "AN", "O", "P", "T", "C", "B", "D", "North", "Ne", "S", "A", "W", "I", "NT", "NG", "Node", "Z", "Ns", "U", "R", "M", "J", "CN", "G", " n", "NA", "n"], "K": ["F", "km", "k", "E", "ID", "KK", "L", "V", "H", "Ak", "Q", "X", "Y", "IK", "AN", "O", " k", "P", "Sk", "C", "Uk", "D", "T", "SK", "B", "NK", "KS", "Kin", "S", "A", "W", "Kn", "VK", "Kat", "I", "Ko", "Z", "Ax", "KR", "Kh", "U", "R", "M", "J", "CC", "G", "KA", "Ka", "Ku"], "syo": [" yos", "syos", "asyoid", " astO", "asyo", " astoid", " asto", "syO", "asyos", " yo", " astos", " yO", "asyO", " yoid", "syoid"], "amari": ["umari", "amagi", "Amar", "umagi", "Amani", " amar", "anara", " amarian", "umara", "anari", "Amari", "acari", "Amarian", "anagi", " amani", "mani", "mar", "Amara", "acani", "lamari", "anani", "amani", "mari", "Amagi", "acagi", "amar", "umani", "lamarian", "lamani", "amarian", "lamar", "amara", "magi", "acar"], "ans": ["ss", "s", "a", "NN", "span", "ins", "atan", "na", "p", "ai", "_", "Ann", "Na", "en", "AN", "ANS", "ks", "As", "ann", "ani", "anc", "au", "ana", "es", "can", "x", "nan", "A", "An", "args", "nn", "ki", "ln", "sk", "ens", "Ns", "ns", "man", "os", "Han", "\u03b1", "NA", "an", "n"]}}
{"code": "N=int(input())\\n*A,=map(int,input().split())\\nS=sum(A)\\n\\ncount=[[]for _ in range(N-1)]\\ncount[0]=[A[0],S-A[0]]\\ni=1\\nwhile i<N-1:\\n    count[i]=[A[i]+count[i-1][0],S-(A[i]+count[i-1][0])]\\n    i+=1\\n\\nprint(min(abs(l-r) for l,r in count))", "target": "424", "substitutes": {"N": ["F", "PI", "Length", "E", "L", "V", "NL", "Sn", "X", "Q", "Y", "Size", "Num", "NS", "K", "O", "P", "B", "C", "T", "D", "Len", "Ne", "I", "No", "NT", "Ni", "Z", "Ns", "U", "R", "M", "J", "NB", " n", "NA", "Count", "n"], "A": ["F", "E", "First", "a", "L", "At", "V", "All", "AS", "X", "Y", "AP", "Adam", "LA", "EA", "Na", "Ha", "AM", "SA", "P", "B", "C", "T", "AC", "As", "Ar", "ASC", "API", "array", "AA", "If", "au", "Alpha", "I", "AU", "Average", "Array", "CA", "U", "R", "AF", "alpha", "M", "Input", "mA", "Sum", "Am", "NA", "App", "Count"], "S": ["F", "s", "L", "IS", "V", "Q", "X", " s", "Y", "SE", "AS", "NS", "Si", "Na", "SI", "SA", "P", "B", "C", "T", "D", "SK", "si", "Sa", "SL", "Sl", "I", "SS", "Sc", "Ns", "U", "R", "M", "Sum", "G", "SU"], "count": ["span", "y", "content", "support", "coll", "si", "current", "q", "f", "cat", "found", "core", "age", "list", "data", "length", "b", "order", "fr", "info", "error", "L", "code", "lc", "array", "child", "depth", "len", "e", "all", "seq", "id", "last", "p", "default", "case", "log", "weight", "C", "conf", "size", "time", "index", "cache", "now", "ind", "start", "only", "max", "parent", "match", "limit", "cc", "col", "a", "line", "c", "err", "process", "app", "first", "account", "nt", "check", "race", "base", "val", "test", "sum", "Count", "n"], "_": ["s", " p", "g", "ing", " x", " time", " k", "x", "d", "len", " length"], "i": ["gi", "s", "k", "ui", "a", "ie", "int", "chi", "qi", "mi", "p", "phi", "ai", "init", "c", "oi", "y", "o", "ini", "ix", "iu", "api", "slice", "ti", "z", "si", "index", "x", "yi", "start", "I", "uri", "u", "pi", "j", "f", "io", "xi", "ori", "ri", "di", "hi", "ci", "ni", "isi", "b", "v", "key", "e", "t", "info", "zi", "id", "multi", "li", "ii", "anti", "bi", "n"], "l": ["s", "loc", "a", "L", " L", "p", "al", "c", "sl", "lr", "el", "la", "lc", "z", "u", "Li", "ll", "q", "ln", "f", "j", "lf", "m", "range", "rl", "list", "R", "length", "len", "b", "v", "e", "ls", "all", "li", "ul", "n"], "r": ["Rs", "L", "str", " R", "ur", "p", "g", "c", "h", "rf", "lr", "lc", "z", "x", "ar", "w", "u", "d", "q", "f", "j", "sr", "rc", "m", "ir", "range", "rl", "rank", "R", "alpha", "nr", "b", "t", "e", "fr", "id", "ru", "rs", "n"]}}
{"code": "\\nfrom math import gcd\\nfrom functools import reduce\\n\\n\\ndef resolve():\\n    N, K = map(int, input().split())\\n    A = list(map(int, input().split()))\\n\\n    _max = max(A)\\n    g = reduce(gcd, A)\\n\\n    if K <= _max and K % g == 0:\\n        print(\"POSSIBLE\")\\n    else:\\n        print(\"IMPOSSIBLE\")\\n\\n\\nif __name__ == \"__main__\":\\n    resolve()", "target": "603", "substitutes": {"N": ["F", "E", "L", "V", "NN", "H", "Q", "X", "Y", "O", "P", "B", "C", "T", "D", "S", "W", "I", "Ni", "Z", "U", "R", "M", "J", " n", "G", "NA", "n"], "K": ["F", "k", "KK", "E", "L", "GE", "V", "Max", "H", "Q", "X", "Y", "KE", "Sk", " k", "P", "T", "C", "B", "SK", "D", "AC", "KS", "S", "W", "I", "max", "Z", "KR", "U", "R", "OK", "J", "M", "G", "Ka", "Ku", "n"], "A": ["F", "GA", "a", "At", "All", "AS", "X", "Y", "AP", "LA", "AST", "Na", "AN", "AM", "AW", "P", "B", "C", "mA", "As", "D", "T", "AC", "AV", "array", "AA", "au", "API", "Alpha", "S", "Average", "ac", "ga", "CA", "U", "AF", "alpha", "M", "G", "HA", "NA", "Ang"], "_max": ["_total", "pMax", "pk", "ptotal", " _cat", " _k", "_gen", "_Max", "_k", " _gen", "pmax", " _total", " _Max", "_cat"], "g": ["gi", "k", "GA", "growth", "group", "p", "arg", "c", "gh", "gc", "gam", "ig", "gp", "ng", "GC", "w", "gd", "u", "d", "gg", "sg", " G", "mg", "j", "gt", "m", "ga", "GG", "GS", "gs", "gb", "eg", "gen", "gm", "G", "pg", "n"]}}
{"code": "def main():\\n    n = int(input())\\n    dp = [[0 for i in range(10)] for i in range(10)]\\n    for i in range(1,n+1):\\n        h,t = int(str(i)[0]), int(str(i)[-1])\\n        dp[h][t] += 1\\n    ans = 0\\n    for i in range(10):\\n        for j in range(10):\\n            ans += dp[i][j] * dp[j][i]\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "168", "substitutes": {"n": ["k", "p", "g", "c", "o", "nc", "num", "en", "r", "y", "z", "x", "sn", "w", "l", "u", "d", "nt", "nn", "q", "f", "m", "ns", "v", "b", "len", "N", "e", "pn", "nb"], "dp": ["lp", "const", "channel", "wp", "p", "dist", "ps", "phi", "pb", "fp", "gap", "dat", "var", "tp", "pos", "cp", "tmp", "gp", "P", "sp", "vp", "params", "diff", "dm", "cm", "patch", "bb", "pi", "d", "do", "DP", "dl", "dt", "jp", "pp", "deb", "port", "dc", "rank", "address", "pkg", "di", "ep", "data", "db", "shape", "wd", "dim", "np", "pair", "pd", "imp", "py", "ds", "wm", "dn", "nb", "direction", "ip"], "i": ["ji", "s", "k", "ui", "a", "ei", "int", "str", "ie", "qi", "p", "ai", "c", "oi", "o", "r", "ini", "im", "y", "iq", "iu", "ti", "z", "on", "si", "index", "x", "image", "ind", "start", "w", "I", "it", "l", "u", "pi", "d", "io", "f", "m", "xi", "input", "di", "ip", "ci", "v", "b", "e", "iw", "id", "li", "ii"], "h": ["hs", "k", "end", "sh", "H", "p", "g", "c", "o", "r", "y", "en", "ht", "ph", "hr", "z", "x", "w", "l", "u", "d", "q", "he", "f", "m", "hi", "v", "b", "e", "hm", "id"], "t": ["the", "s", "k", "a", "at", "wt", "tt", "p", "g", "c", "y", "o", "ot", "ht", "tp", "pt", "T", "tf", "ti", "z", "x", "w", "l", "th", "u", "d", "ta", "f", "dt", "m", "ts", "v", "b", "e", "test"], "ans": ["s", "a", "ents", "lan", "nas", "ras", "ins", "p", "na", "atan", "ai", "ats", "aning", "en", "AN", "ANS", "ks", "mean", "ann", "anon", "ani", "anc", "ays", "ana", "pa", "x", "can", " means", "nan", "anus", "ia", "aned", "nn", "ons", "aus", "ens", "cs", "ants", "ns", "os", "san", "len", "ls", "plan", "ds", "an"], "j": ["ji", "k", "end", "a", "ja", "p", "ai", "_", "c", "oi", "y", "r", "o", "jl", "z", "je", "x", "ind", "w", "it", "l", "u", "d", "q", "f", "jp", "dt", "m", "aj", "J", "v", "b", "e", "all", "ii"]}}
{"code": "import sys\\nn, a  = [int(i) for i in sys.stdin.readline().split()]\\nx_ls = [int(i) - a for i in sys.stdin.readline().split()]\\n#memo_ls[i][j] : i\u756a\u76ee\u307e\u3067\u3067j - 50*50\u304c\u3067\u304d\u308b\u901a\u308a\u6570\\nmemo_ls = [[0 for i in range(2 * 50 * 50 + 1)] for j in range(n+1)]\\nmemo_ls[0][50*50] = 1\\nfor i, x in enumerate(x_ls, 1):\\n    for j in range(2*50*50+1):\\n        memo_ls[i][j] =  memo_ls[i-1][j]\\n        if 0 <= j - x <= 2*50*50:\\n            memo_ls[i][j] += memo_ls[i - 1][j - x]\\nprint(memo_ls[-1][50*50] - 1)", "target": "610", "substitutes": {"n": ["s", "name", "code", "p", "na", "g", "c", "r", "en", "num", "net", "names", "ne", "z", "x", " fn", "l", "d", "nt", "f", "m", "ns", "nl", "v", "b", "N", "an"], "a": ["aa", "s", "span", "ma", "p", "ai", "c", "fa", "o", "y", "h", "la", "au", "array", "index", "x", "A", "w", "l", "u", "ca", "f", "sa", "m", "ga", "ac", "parser", "area", "aux", "am", "data", "alpha", "b", "t", "e", "all", "an"], "i": ["gi", "ui", "iri", "ie", "int", "ei", "line", "qi", "sit", "p", "gui", "init", "phi", "ai", "c", "ini", "ix", "inf", "iu", "ti", "z", "si", "index", "x", "yi", "start", "igraph", "I", "it", "l", "fi", "pi", "j", "f", "io", "cli", "xi", "input", "ci", "t", "e", "iw", "multi", "id", "zi", "li", "ii", "sci", "ip"], "x_ls": ["x_la", " x_la", " x_l", "x_l", " x_xx", "x_xx"]}}
{"code": "n = int(input())\\nfor i in range(1, n+1):\\n    if i % 3 == 0:\\n        print(' '+str(i), end = '')\\n    elif i % 10 ==3:\\n        print(' '+str(i), end = '')\\n    else:\\n        x = i\\n        while x != 0:\\n            x = x // 10\\n            if x % 10 == 3:\\n                print(' '+str(i), end = '')\\n                break\\nprint('')", "target": "514", "substitutes": {"n": ["s", "k", "p", "g", "c", "o", "y", "nc", "num", "r", "h", "ne", "z", "fn", "w", "l", "u", "pi", "d", "nt", "f", "j", "m", "ns", "no", "ni", "len", "b", "t", "N", "e", "nb", "nor"], "i": ["k", "ui", "a", "ie", "int", "chi", "qi", "p", "phi", "ai", "c", "y", "o", "ix", "ini", "iu", "slice", "ti", "z", "si", "index", "yi", "ind", "start", "I", "l", "u", "pi", "d", "q", "j", "f", "io", "m", "xi", "input", "di", "ri", "hi", "ci", "ip", "v", "b", "e", "t", "zi", "id", "li", "ii"], "x": ["dx", "min", "k", "a", "value", "int", "X", "p", "ic", "xs", "c", "xx", "y", "rx", "number", "ix", "num", "pos", "temp", "z", "xt", "ex", "index", "xxx", "w", "cross", "l", "wx", "u", "d", "max", "q", "j", "f", "ax", "ww", "xi", "alpha", "xe", "xp", "v", "t", "e", "xy", "id", "xc"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\n\\n\\ndef solve(N: int, K: int):\\n    ans = 1\\n    for _ in range(N):\\n        ans = min(ans * 2, ans + K)\\n    print(ans)\\n\\n\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    K = int(next(tokens))  # type: int\\n    solve(N, K)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "441", "substitutes": {}}
{"code": "a = list(map(int,input().split()));\\n\\na[0],a[1] = a[1],a[0]\\na[0],a[2] = a[2],a[0]\\n\\nfor i in range(3):\\n    print(a[i],end=' ');", "target": "499", "substitutes": {"a": ["aa", "s", "k", "auto", "int", "at", "span", "ma", "p", "na", "g", "c", "aw", "something", "y", "h", "r", "o", "work", "app", "api", "ba", "ab", "au", "array", "ana", "div", "da", "x", "index", "A", "ar", "now", "w", "action", "l", "u", "d", "aaa", "f", "ca", "sa", "asa", "ga", "ac", "m", "area", "aj", "am", "input", "data", "ae", "alpha", "b", "v", "e", "t", "all", "part", "an", "ad", "n"], "i": ["gi", "k", "ui", "int", "qi", "p", "ai", "c", "h", "gu", "iu", "ti", "z", "si", "x", "yi", "ind", "w", "start", "I", "u", "d", "pi", "q", "j", "f", "io", "xi", "ri", "di", "ni", "ci", "key", "v", "col", "id", "zi", "li", "ii", "n", "bi", "ip"]}}
{"code": "n = int(input())\\nh = [int(x) for x in input().split()]\\n\\ncnt = 1\\n\\nfor i in range(1,n):\\n    for j in range(i):\\n        if(h[i]<h[j]):\\n            break\\n        if(j==(i-1)):\\n            cnt += 1\\n\\nprint(cnt)", "target": "26", "substitutes": {"n": ["s", "k", "p", "c", "o", "y", "nc", "num", "r", "net", "ne", "z", "fn", "sn", "w", "l", "u", "d", "nn", "f", "m", "ns", "ni", "b", "v", "t", "N", "e", "nb"], "h": ["hs", "s", "k", "loc", "a", "H", "p", "g", "c", "host", "oh", "o", "y", "r", "hash", "head", "ph", "z", "ch", "w", "l", "bh", "u", "d", "q", "f", "m", "v", "b", "t", "e", "count", "hm"], "x": ["dx", "k", "int", "X", "p", "tx", "xs", "c", "xx", "fx", "y", "rx", "ix", "lex", "z", "ex", "index", " xx", "xxx", "w", "cross", "l", "u", "d", "f", "ax", "m", "xi", "xe", "key", "xp", "v", "t", "e", "id"], "cnt": ["cNT", "ccnt", "acount", "dcno", "cret", "ctret", "CNT", "dcnt", "dcrt", "ctct", "ccno", "Cwd", " cNT", " cct", "ctnt", "cct", "ctount", "Cret", " cwd", "crt", "dcct", "acnt", "Cnt", "ccrt", "Cno", "acNT", "acwd", "ccct", " count", "cno", "Crt", "count", "Cct", "cwd", " cret", "Count"], "i": ["gi", "ih", "ji", "k", "ui", "a", "ie", "int", "chi", "p", "phi", "ai", "c", "y", "o", "jj", "ini", "iu", "z", "si", "index", "ind", "start", "w", "I", "l", "u", "pi", "d", "q", "f", "m", "xi", "ci", "ij", "J", "v", "b", "e", "id", "li", "ii", "ip"], "j": ["ji", "k", "a", "ja", "p", "c", "jo", " dj", "y", "jj", "ix", "o", "jl", "z", "je", "si", "index", "ind", "w", "start", "adj", "l", "u", "d", "q", "jp", "ax", "f", "m", "xi", "ni", "J", "v", "b", " ii", "key", "e", "li", "ii", "part"]}}
{"code": "import sys\\ninput = sys.stdin.buffer.readline\\n\\nn, m = map(int, input().split())\\nAB = []\\nfor i in range(n):\\n    a, b = map(int, input().split())\\n    AB.append((a, b))\\n#AB.sort(key = lambda x:(-x[0], -x[1]))\\nAB.sort(reverse=True)\\n#print(AB)\\n\\nh = []\\nimport heapq\\nheapq.heapify(h)\\nans = 0\\nfor i in reversed(range(m)):\\n    while AB:\\n        a, b = AB.pop()\\n        if i+a > m:\\n            AB.append((a, b))\\n            break\\n        else:\\n            heapq.heappush(h, (-b, a))\\n    #print(i, h)\\n    if h:\\n        b, a = heapq.heappop(h)\\n        b = b*(-1)\\n        ans += b\\nprint(ans)\\n", "target": "576", "substitutes": {"input": ["error", "call", "text", "raw", "IN", " output", "int", "reader", "request", "method", "element", "r", "format", " inputs", "comment", "inf", "connect", "temp", "array", "hidden", "fn", "expression", "url", "image", "search", "exec", "current", "accept", "buffer", "f", " Input", "acl", "eval", "pull", "output", "parent", "data", "Input", "binary", "bin", "type", "alpha", "help", "select", "space", "session", "print", "submit", "source", "param", "form", "feed"], "n": [" N", "k", "span", "p", "ic", "g", "c", "h", "o", "nc", "num", "y", "r", "number", "size", "ne", "z", "x", "sn", "body", "w", "l", "u", "d", "f", "network", "ns", "M", "e", "N", "count", "nb"], "m": ["k", " M", "mn", "mi", "p", "ms", "g", "c", "nm", "o", "r", "y", "h", "mA", "fm", "mu", "w", "cm", "l", "d", "f", "bm", "am", "M", "v", "e", "mm", "mc"], "AB": ["AT", "ALL", "AL", "FE", "AR", "TA", "CB", "AST", "LIST", "BA", "AM", "IGN", "B", "AE", "AV", "AC", "SB", "ab", "BB", "AA", "BI", "Tab", "ABC", "MB", "Ab", "abb", "BR", "BL", "OB", "Array", "RAY", "AF", "NB", "BM", "tab", "QB", "NA", "BF"], "i": ["k", "ib", " it", "p", "c", " I", "h", "r", " iP", " ip", "ime", "iu", "index", "x", "ind", " il", "I", "it", "u", "j", "ci", " ii", "e", "il", "id", "ip"], "a": ["aa", "k", "auto", "int", "va", "p", "c", "fa", "y", "ba", "B", "ab", "da", "x", "index", "A", "w", "ia", "l", "u", "bb", "d", "f", "ca", "sa", "ae", "alpha", "e", "abc", "an", "ad", "offset"], "b": ["s", "k", "aa", "be", "ib", "fb", "p", "bs", "c", "y", "r", "number", "o", "wb", "mb", "B", "ba", "ab", "x", "A", "l", "bb", "d", "rb", "bf", "f", "eb", "j", "length", "db", "v", "e", "bc", "abc", "nb", "lb", "bi"]}}
{"code": "n = int(input())\\ncheck = []\\nans = 0\\nfor _ in range(n):\\n    n1, n2 = map(int, input().split())\\n    if n1 == n2:\\n        check.append(1)\\n    else:\\n        check.append(0)\\n\\nfor i in range(n-1):\\n    if sum(check[i:i+3])==3:\\n        ans = 1\\n        break\\nif ans:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "709", "substitutes": {"n": ["s", "k", "p", "c", "o", "number", "nc", "num", "en", "y", "ne", "z", "index", "x", "nan", "sn", "l", "d", "nn", "nt", "f", "j", "network", "m", "ns", "no", "ni", "b", "np", "t", "N", "e", "count", "nb"], "check": ["name", "call", "checks", "end", "nice", "int", "code", "fix", "Check", "plus", "c", "read", "work", "case", "num", "comment", "sign", "checked", "search", "x", "index", "clean", "valid", "cross", "start", "checking", "bug", "ok", "update", "ignore", "sync", "pull", "dc", "scan", "list", "match", "type", "key", "ck", "count", "add", "id", "keep", "cl", "test", "block", "info"], "ans": ["ents", "lan", "ras", "amps", "ams", "atan", "na", "ai", "anges", "ions", "aning", "auth", "anas", "AN", "ANS", "anes", "any", "mean", "ane", "ann", "anon", "ani", "anc", "annot", "ana", "ays", "ania", "can", " means", "nan", "ars", "cross", "anned", "anch", "ant", "anks", " scans", "aves", "aned", "nn", "ons", "leans", "sk", "cs", "yes", "ants", "acs", "ns", "scan", "ases", "no", "ni", "antes", "san", "orts", "ean", "ops", "an", "ins"], "_": [" p", "k", "num", " x", " time", " __", "x", "ind", "out", "j", "f", "len", " l", "ip"], "n1": ["c3", " n0", " n3", "ns1", "n8", "c0", "n3", "nsone", "N8", " n8", "N2", "ns2", " none", "n0", "none", "N0", "ns8", "c2", "N1", "N3", "c1"], "n2": [" n02", "N02", "i02", "iTwo", "i1", "N2", "n02", "nTwo", "N1", "i2", "NTwo", " nTwo"], "i": ["ih", "k", "ie", "int", "qi", "p", "phi", "ai", "c", " I", "h", "y", "o", "ix", "num", "ini", "slice", "z", "si", "eni", "index", "x", "ind", "start", "I", "l", "fi", "d", "pi", "j", "ki", "f", "xi", "di", "ri", "ni", "ip", "ci", "b", "v", "e", "id", "li", "ii", "ik"]}}
{"code": "S=input()\\nT=input()\\nprint(\"Yes\" if S in T*2 else \"No\")", "target": "721", "substitutes": {"S": ["F", "ss", "s", "E", "L", "V", "AS", "X", "Y", "NS", "Si", "TS", "PS", "SH", "SI", "Su", "O", "P", "B", "C", "D", "Sa", "A", "Sl", "I", "SS", "Z", "R", "M", "J", "Sign", "SP", "N", "Sum", "SN", "G", "Index", "SU"], "T": ["F", "CT", "E", "L", "V", "Ti", "H", "Q", "X", "Y", "Taylor", "TS", "TN", "ST", "O", "P", "C", "B", "D", "TG", "DT", "TB", "NT", "UT", "SS", "TX", "TE", "TM", "Z", "TT", "R", "M", "TF", "t", "N", "WT", "G", "VT", "PT"]}}
{"code": "a, b = input().split()\\na, b = int(a), int(b)\\n\\nprint(int(a+(b/2)))", "target": "668", "substitutes": {"a": ["aa", "s", "auto", "va", "p", "na", "ai", "aka", "c", "aw", "ama", "i", "fa", "y", "api", "la", "ba", "mA", "ab", "au", "art", "da", "pa", "x", "A", "ia", "u", "d", "aaa", "ca", "sa", "f", "asa", "ac", "ga", "area", "am", "input", "aj", "ae", "alpha", "ea", "e", "abc", "an", "ad"], "b": ["aa", "fb", "p", "bs", "pb", "c", "bound", "i", "y", "emb", "wb", "mb", "bis", "beta", "B", "ab", "x", "sb", "cb", "l", "ob", "bb", "d", "rb", "bf", "abb", "f", "eb", "lib", "j", "bd", "xb", "db", "binary", "v", "base", "e", "bc", "count", "bas", "nb", "lb", "n"]}}
{"code": "import sys\\nimport math  # noqa\\nimport bisect  # noqa\\nimport queue  # noqa\\n\\n\\ndef input():\\n    return sys.stdin.readline().rstrip()\\n\\n\\ndef main():\\n    N = int(input())\\n    G = [[] for _ in range(N)]\\n    for _ in range(N - 1):\\n        a, b, c = map(int, input().split())\\n        a -= 1\\n        b -= 1\\n        G[a].append((b, c))\\n        G[b].append((a, c))\\n    Q, K = map(int, input().split())\\n    K -= 1\\n    X = []\\n    Y = []\\n    for _ in range(Q):\\n        x, y = map(int, input().split())\\n        x -= 1\\n        y -= 1\\n        X.append(x)\\n        Y.append(y)\\n\\n    que = queue.Queue()\\n    INF = 10 ** (25)\\n    dist = [INF for _ in range(N)]\\n    dist[K] = 0\\n    que.put(K)\\n    while not que.empty():\\n        cn = que.get()\\n        for nn, c in G[cn]:\\n            if dist[nn] > dist[cn] + c:\\n                dist[nn] = dist[cn] + c\\n                que.put(nn)\\n\\n    for x, y in zip(X, Y):\\n        print(dist[x] + dist[y])\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "360", "substitutes": {}}
{"code": "from collections import defaultdict\\n\\nA = input()\\nN = len(A)\\ndp = [0] * N\\ndp[0] = 1\\nd = defaultdict(int)\\nd[A[0]] = 1\\n\\nfor i in range(1, N):\\n  a = A[i]\\n  dp[i] = dp[i-1]\\n  dp[i] += i - d[a]\\n  d[a] += 1\\n\\nprint(dp[-1])", "target": "351", "substitutes": {"A": ["F", "AD", " AA", "E", "L", "At", "V", "H", "X", "MA", "p", "Y", "LA", " B", "K", "AB", "AM", "P", "B", "C", "mA", "D", "As", "T", "Ar", "API", "array", "AA", "Args", "Alpha", "S", "I", "PA", "DP", "Array", "CA", "U", "Input", "alpha", "M", "G", "Am", "The", " D", "NA", " P"], "N": ["F", "Nat", "E", "L", "V", "NN", "Q", "X", "Y", "NC", "Num", "NS", "NE", "NI", "K", "NM", "O", "P", "T", "C", "B", "D", "NH", "Ne", "S", "I", "No", "NT", "NG", "Node", "Ni", "Z", "Ns", "ND", "R", "M", "J", "NB", " n", "G", "NA", "n"], "dp": [" p", "amp", "dd", "pid", "int", "fd", "p", "default", "dist", "pb", "c", "dat", "number", "tp", "sd", "pos", "cp", "rep", "DB", "gp", "api", "P", "dB", "D", "array", "index", "da", "params", "dm", "grad", "pi", "do", "DP", "dt", "dl", "dr", "deb", "address", "dc", "df", "di", "ep", "data", "db", "length", "alpha", "ip", "dim", "b", "np", "e", "pd", "ds", "dn", "ad", "n"], "d": ["s", " p", "dd", "dy", "dh", "fd", "p", "c", "dat", "dict", "sd", "P", "D", "z", " dd", "da", "x", "dm", "l", "u", "DP", "f", "dl", "dt", "j", "m", "dc", "df", "di", "data", "db", "b", "e", "pd", "t", "ds", " D", "dn", "ad", "n"], "i": ["s", "k", "ui", "aa", "end", "ie", "int", "p", "ai", "c", " I", "y", "h", "r", "ini", "o", "iu", "api", "z", "si", "index", "x", "ind", "I", "ia", "it", "l", "u", "pi", "j", "f", "m", "di", "ni", "ci", "alpha", "v", "b", "e", "t", "id", "li", "ii", "bi", "ad", "n"], "a": ["aa", "k", "at", "va", "p", "ai", "c", "y", "o", "api", "ana", "da", "x", "index", "ar", "af", "w", "ia", "u", "j", "f", "sa", "m", "ga", "ac", "ca", "area", "am", "aj", "ae", "alpha", "b", "an", "ad", "n"]}}
{"code": "t = list(input())\\ntl = len(t)\\n\\nfor i in range(tl):\\n    if t[i] != '?':\\n        continue\\n\\n    if tl == 1:\\n        t[i] = 'D'\\n    elif i == tl - 1:\\n        t[i] = 'D'\\n    elif t[i-1] == 'P':\\n        t[i] = 'D'\\n    elif t[i+1] == '?':\\n        t[i] = 'P'\\n    elif t[i+1] == 'D':\\n        t[i] = 'P'\\n    else:\\n        t[i] = 'D'\\n\\nprint(''.join(t))\\n", "target": "678", "substitutes": {"t": ["s", "k", "a", "token", "int", "at", "table", "python", "wt", "tm", "tt", "tw", "p", "g", "c", "o", "y", "tp", "ot", "h", "ht", "r", "tr", "txt", "this", "pt", "tf", "T", "unt", "temp", "z", "x", "st", "bt", "it", "l", "yt", "u", "d", "nt", "template", "ta", "ert", "dt", "f", "title", "m", "rt", "tip", "input", "set", "list", "te", "ct", "tree", "ts", "b", "v", "qt", "type", "e", "test", "tc", "total", "n"], "tl": ["ol", "late", "TL", "tail", "level", "tt", "lat", "oi", "delay", "dL", "sl", "tp", "lr", "td", "iter", "pt", "tf", "el", "lv", "temp", "lc", "lo", "bl", "l", "pl", "ll", "ta", "dl", "dt", "f", "lvl", "ill", "cli", "sr", "rl", "list", "nl", "wl", "fl", "length", "ts", "len", "hl", "timeout", "ls", "lt", "il", "LL", "ul", "li", "ii", "tz", "cl", "tc", "n"], "i": ["gi", "s", "k", "ui", "a", "ei", "int", "ie", "at", "qi", "p", "phi", "ai", "init", "c", "g", "oi", "h", "y", "o", "ix", "ini", "iu", "api", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "it", "l", "uri", "u", "d", "pi", "fi", "f", "j", "io", "m", "cli", "xi", "di", "ri", "ni", "ip", "ci", "b", "v", "e", "info", "multi", "id", "li", "ii", "bi", "n"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nN, K = map(int, input().split())\\nsushi = [None] * N\\nfor i in range(N):\\n    t, d = map(int, input().split())\\n    sushi[i] = (d, t)\\nsushi.sort(reverse=True)\\n\\ntypes = set()\\ncand = []\\ns = x = 0\\n\\nfor d, t in sushi[:K]:\\n    if t in types:\\n        cand.append(d)\\n    else:\\n        types.add(t)\\n        x += 1\\n    s += d\\ncand.sort(reverse=True)\\n\\nans = s + x*x\\nfor d, t in sushi[K:]:\\n    if t in types:\\n        continue\\n    if not cand:\\n        break\\n    dr = cand.pop()\\n    s += d - dr\\n    types.add(t)\\n    x += 1\\n    ans = max(ans, s + x*x)\\nprint(ans)", "target": "466", "substitutes": {"input": ["error", "call", "text", " data", "IN", "raw", " output", "int", "str", "until", "line", "reader", "request", "argument", "enter", "load", " inputs", "comment", "inf", "empty", "array", "expression", "url", " H", "exec", "I", "current", "accept", "out", "wait", "f", "IO", " Input", "INT", "pull", "output", "parent", " int", "data", "Input", "type", "string", "help", "select", "view", "space", " IN", "down", "print", " inside", "submit", "source", "param", "form", "feed"], "N": ["F", "k", "E", "L", "V", "H", "Q", "X", "Y", "Size", "NS", "Na", "NM", "O", "P", "T", "C", "B", "D", "Ne", "S", "A", "W", "I", "NT", "Z", "Ns", "U", "R", "M", "J", " n", "G", " Ne", "KN", " NI", "n"], "K": ["F", "k", "E", "L", "KI", "V", "H", "Ak", "Q", "X", "Y", "O", " k", "P", "T", "C", "B", "D", "Sk", "SK", "KS", "S", "W", "I", "Z", "KR", "PK", "U", "R", "M", "J", "G", "Ku", "n"], "sushi": ["setta", "southeast", "ysulin", "mentsulu", "suti", "tsulin", "esuti", "insoutheast", " suti", "ysushi", "psuch", "Sugi", "ysuti", "salsa", "sulin", "rsugi", "nsulin", "osushi", "statesulu", " southeast", "psetta", "mentsetta", "insalsa", "rsusha", "nsuti", "psushi", "suli", "mentsushi", "esuli", "statesushi", "esshi", "osshi", "nsuli", "statesuch", "osuti", "insushi", "tsshi", " salsa", " sugi", "such", "mentsuch", "rsuti", "insugi", "tsushi", "nsushi", "sugi", "susha", "tsuli", "esushi", "Susha", "psulu", "tsuti", "rsushi", "sulu", "sshi", "ysuli", "Sushi", "osuli", "statesetta", " susha", "Suti"], "i": ["gi", "ui", "a", "int", "p", "c", " I", "o", "r", "y", "im", "iu", "ti", "z", "si", "index", "ind", "I", "it", "u", "pi", "j", "dt", "f", "m", "xi", "di", "ci", "ij", "v", "b", "e", "iw", "id", "ii", "n", "ip"], "t": ["the", "int", "tool", "y", "tor", "ont", "ent", "l", "ta", "out", "f", "j", "utt", "tu", "type", "b", "qt", "lt", "ort", "ret", "tz", "part", "at", "to", "et", "h", "pt", "unt", "temp", "u", "ert", "te", "tree", "v", "e", "total", "ti", "tt", "p", "fort", "tim", "ot", "tr", "z", "art", " T", "ut", "m", "rt", "ts", "k", "a", "alt", "tw", "opt", "g", "c", "o", "mt", "tif", "T", "D", "ty", "st", "w", "ant", "I", "tri", "nt", "dt", "lit", "test", "n"], "d": ["dx", "min", "k", "did", "dd", "dy", "int", "dom", "p", "dist", "nd", "std", "g", "c", "dat", "y", "sd", "md", "ded", "done", "D", "z", "da", "w", "ind", "start", "l", "de", "u", "do", "xd", "j", "dt", "f", "m", "du", "none", "dc", "cd", "di", "data", "b", "v", "ld", "dim", "e", "ds", "id", "dn", "dos", "ad", "n"], "types": ["balls", "points", "strings", "styles", "groups", "span", " tests", "states", "ters", "ps", "xs", "rows", "apps", "arts", "casts", "c", "ints", "rings", "ats", "ypes", "y", "cats", "cases", "astics", " anchors", "times", "relations", "ks", "pes", "fs", "conf", "ty", "events", "orders", "versions", " stations", "cross", "links", "pack", "tests", "args", "parts", "lines", "services", "ches", "ports", "ids", "js", " type", "cs", "cat", "style", "stars", "cast", "rots", "kind", "idates", "features", "type", "ts", "arch", "forms", "itives", "test", "ops", "Types", "ces", "lists"], "cand": ["cur", "cmp", "Cand", "cas", "cor", "span", "init", " char", "c", "err", "kids", "var", "cats", "case", " kids", "app", "cp", "pos", " coord", "push", " rand", "conf", "car", "div", "fy", "ch", "ce", "clean", "valid", "ind", "anch", "start", "cart", "bug", "args", "doc", "ace", "max", "ca", "cs", "cat", "char", "core", "cast", "cd", "pad", "scan", "kind", "list", "data", "ci", "co", "type", "dev", "tab", "cf", "count", "col", "ctr", "part", "front", "test", "sky"], "s": ["ss", "sq", "a", "strings", "ys", "south", "p", "ps", "g", "c", "xs", "sets", "y", "o", "r", "sd", "z", "si", "es", "ays", "S", "ar", "w", "cross", "l", "parts", "u", "ses", "sg", "sy", "f", "cs", "m", "ns", "ws", "su", "os", "ts", "v", "b", "e", "ls", "ds", "rs", "an", "sum", "ies", "n"], "x": ["dx", "ss", "k", "int", "sex", "X", "p", "tx", "xs", "c", "xx", "yx", "fx", "y", "lex", "h", "ix", "rx", "r", "px", "z", "xt", "es", "ex", "xxx", "index", "w", "cross", "l", "u", "max", "q", "f", "ax", "cs", "xi", "day", "v", "xp", "e", "xes", "xy", "xc", "an", "n"], "ans": ["a", "ys", "styles", "les", "nas", "amps", "span", "ams", "p", "na", "ps", "ushes", "xs", "ats", "ads", "ANS", "asts", "ks", "ras", "aces", "ann", "anc", "ays", "es", "ands", " means", "ars", "args", "aned", "ches", "ids", "ons", "aus", "works", "ca", "cs", "sa", "ens", "ants", "ns", "os", "ts", "ls", "ds", "rs", "an", "ad", "ins"], "dr": ["cur", "str", "dom", "arr", "dist", "err", "arc", "r", "cp", "ver", "gr", "pt", "hr", "car", "div", "ch", "da", "Dr", "ar", "der", "ars", "st", "par", "ant", "cart", "de", "DR", "disc", "ll", "dt", "cs", "cat", "ist", "char", "du", "dq", "dc", "br", "df", "di", "cr", "dp", "fr", "ds", "er", "rs"]}}
{"code": "s = input()\\n\\nans = 0\\nfor si in s:\\n  if si == \"o\":\\n    ans += 1\\n\\nprint(700+100*ans)", "target": "231", "substitutes": {"s": ["ss", "ins", "words", "states", "p", "ms", "g", "c", "i", "sym", "fs", "es", "S", "lines", "l", "ses", "d", "f", "cs", "m", "ns", "os", "gs", "b", "v", "e", "ls", "ips", "ds", "ops", "n"], "ans": ["aid", "ents", "lan", "nas", "ras", "amps", "missions", "ams", "atan", "na", "les", "ms", "ats", "anas", "AN", "ANS", "anes", "ks", "mean", "aces", "annels", "ann", "anc", "ani", "ays", "can", " means", "ars", "lang", "aves", "args", "aned", "lines", "ass", "ons", "aus", "leans", "cs", "ants", "ns", "scan", "ases", "reads", "ds", "an", "comments", "ins"], "si": ["gi", "ss", "a", "ei", "sta", "chi", "ma", "ai", "ic", "i", "Si", " ni", "ini", "sd", "SI", " vi", "sp", "aci", " ti", "eni", "edi", " mi", " pi", " SI", "ati", " sd", "io", "sa", " psi", "xi", "ism", "sea", "di", "ni", "os", "ci", " di", "asi", "zi", "se", "li", "ii", "sil", "bi", "ti"]}}
{"code": "S = input()\\ncompanies = {company for company in S}\\nif len(companies) > 1:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "234", "substitutes": {"S": ["F", "s", "E", "L", "DS", "IS", "V", "H", "SC", "Q", " s", "Y", "SE", "NS", "Si", "TS", "PS", "SI", "O", "P", "T", "C", "B", "D", "A", "RS", "Sl", "SS", "OS", "Set", "CS", "R", "M", "GS", "N", "G", "SU"], "companies": ["companles", "companicles", "communicles", "communys", "carys", "companyies", "collies", "studhips", "contacthips", "collles", "collhips", "studies", "communhips", "studys", "companyys", "companys", "contactles", "studicles", "companyhips", "caries", "carhips", "contactys", "communies", "carles", "companhips", "collys", "companyicles", "contacties"], "company": ["house", "contact", "name", "profit", "group", "change", "cmp", "compan", "code", "com", "sample", "service", "Company", "price", "number", "conference", "comment", "contract", "party", "email", "coll", "component", "cost", "comp", "cart", "account", "cop", "label", "member", "hop", "seller", "address", "co", "type", "key", "project", "custom", "order", "city", "country"]}}
{"code": "n=int(input())\\naa=list(map(int,input().split()))\\naa.sort()\\nd=0\\nfor i in range(1,len(aa)):\\n  d+=abs(aa[i]-aa[i-1])\\nprint(d)", "target": "447", "substitutes": {"n": ["name", "k", "na", "init", "g", "c", "_", "nc", "num", "ne", "fn", "adj", "l", "pi", "nn", "j", "f", "m", "ns", "no", "ni", "nr", "N", "nb"], "aa": ["a", "va", "pha", "ma", "arr", "na", "acc", "ai", "qa", "c", "fa", "dat", "cca", "h", "la", "ba", "au", "array", "AA", "da", "index", "ah", "af", "inc", "args", "aaa", "sa", "ac", "asa", "acl", "area", "ave", "ya", "list", "ae", "data", "alpha", "oa", "b", "aaaa", "ea", "abc"], "d": ["dx", "s", "did", "dd", "a", "dy", "dh", "fd", "p", "nd", "g", "c", "dat", "r", "sd", "dB", "D", "z", "da", "x", "dm", "ind", "gd", "l", "u", "dad", "f", "dt", "dl", "j", "m", "bd", "dc", "cd", "data", "db", "b", "ld", "dim", "e", "t", "pd", "ds", "vd", "ad"], "i": ["gi", "k", "ui", "end", "a", "int", "qi", "mi", "p", "ai", "c", "h", "y", "r", "ini", "ix", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "j", "f", "m", "xi", "di", "ri", "ci", "b", "v", "e", "t", "id", "li", "ii", "bi", "ad", "ip"]}}
{"code": "def main():\\n    n = int(input())\\n    hs = list(map(int, input().split()))\\n\\n    INF = 10 ** 12\\n    dp = [INF] * n\\n    dp[0] = 0\\n    dp[1] = abs(hs[1] - hs[0])\\n\\n    for i in range(2, n):\\n        dp[i] = min(dp[i], dp[i - 1] + abs(hs[i] - hs[i - 1]))\\n        dp[i] = min(dp[i], dp[i - 2] + abs(hs[i] - hs[i - 2]))\\n\\n    print(dp[-1])\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "5", "substitutes": {"n": ["s", "k", "p", "g", "c", "h", "o", "nc", "num", "y", "net", "r", "size", "ne", "z", "x", "sn", "l", "u", "d", "pi", "nn", "f", "j", "network", "m", "ns", "ni", "len", "b", "v", "t", "N", "e", "nb"], "hs": ["rh", "s", "hw", "loc", "sh", "qs", "shows", "HS", "H", "wp", "hess", "na", "ps", "includes", "xs", "host", "bs", "gh", "cases", "h", "tp", "cp", "his", "wh", "ph", "ks", "inf", "vs", "http", "params", "events", "hat", "hh", "heads", "ges", "lines", "ctx", "bh", "src", "hes", "files", "ids", "sites", "th", "hist", "cs", "ns", "docs", " hp", "ws", "hops", "us", "hi", "gs", "hl", "cf", "ha", "ls", "hm", "pps", "ds", "ops", "hp", "rs", "ref", "quarters"], "INF": ["UNInf", "inV", "INFD", "ENV", " INDF", "MNF", "INV", "MNDEF", "INInf", "ENF", " INInf", "UNV", "UNF", "INDF", "inFD", "inDF", "MNInf", "UNDEF", "INDEF", " INV", " INDEF", "MNV", "ENFD", " INFD", "inF", "ENDF"], "dp": ["lp", " p", "amp", "dd", "density", "dh", "pid", " tcp", " UDP", "wp", "eps", "p", "pre", "pb", "fp", "dat", " DP", "tp", "pm", "cp", "pos", "gp", "api", "P", "push", "sp", " dd", "vp", "params", "dm", "pi", "d", "DP", "dl", "dt", "dq", "pp", "deb", "port", "ns", "dr", "address", "dc", "df", "pkg", "di", "drop", "data", "db", "cd", "wd", "dim", "np", "pd", "imp", "py", "ds", "pc", "dos", "hp", "nb", "pg", "direction", " df", " d", "ip"], "i": ["gi", "min", "ji", "ui", "a", "ei", "int", "ie", "ami", "qi", "mi", "p", "phi", "ai", "c", "oi", "h", "y", "o", "num", "ini", "ix", "iu", "api", "ti", "z", "mini", "si", "index", "x", "yi", "ind", "start", "I", "it", "l", "uri", "u", "d", "pi", "fi", "j", "io", "f", "m", "cli", "xi", "di", "ri", "ni", "ci", "hi", "isi", "v", "b", "e", "t", "multi", "id", "zi", "li", "ii", "bi"]}}
{"code": "n = input()\\nS = map(int, raw_input().split())\\nq = input()\\nT = map(int, raw_input().split())\\n\\ncount = 0\\n\\nfor i in range(q):\\n    Search = T[i]\\n    for j in range(n):\\n        if S[j] == Search:\\n            count = count + 1\\n            break\\n\\nprint count", "target": "316", "substitutes": {"n": [" N", "s", "k", "p", "c", "o", "number", "y", "num", "nc", "r", "C", "ne", "z", "x", "sn", "w", "ny", "l", "u", "d", "nt", "nn", "m", "Ns", "ns", "ni", "v", "b", "t", "N", "e", "nb"], "S": ["F", "s", "L", "DS", "V", "Q", "Sn", " s", "Y", "SE", "Size", "NS", "Si", "TS", "PS", "SH", "SI", "O", "P", "C", "D", "SK", "Ps", "Sa", "A", "SL", "I", "SS", "OS", "Ns", "CS", "U", "M", "GS", "N", "SN", "G", "SU"], "q": ["k", "sq", "qs", "qu", "qi", "Q", "p", "qa", "g", "c", "y", "h", "o", "num", "z", "search", "x", "w", "l", "u", "d", "f", "dq", "m", "query", "qt", "v", "t", "N", "qq"], "T": ["F", "CT", "E", "L", "V", "LT", "H", "Q", "X", "Y", "K", "TS", "TN", "TH", "O", "P", "C", "B", "D", "TG", "A", "TB", "W", "UT", "Z", "TT", "U", "R", "J", "M", "TF", "t", "N", "WT", "G"], "count": ["new", "name", "call", "other", "code", "p", "c", "process", "number", "num", "case", "this", "weight", "C", "size", "z", "time", "index", "cache", "search", "ind", "start", "current", "l", "child", "max", "nt", "f", "found", "self", "depth", "list", "length", "match", "find", "type", "key", "base", "more", "every", "col", "id", "skip", "test", "sum", "Count"], "i": ["ji", "k", "ie", "int", "p", "ai", "c", "o", "y", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "io", "f", "m", "ni", "ci", "v", "inn", "b", "e", "id", "li", "ii", "ip"], "Search": ["Page", "ID", "First", "Number", "Match", "Sort", "Child", "Entry", "Q", "X", "Exp", "Size", "Num", "Query", "Test", "r", "section", "St", "Section", "search", "Find", "Result", "Like", "Sp", "Sc", "Job", "Code", "Array", "Sub", "J", "Scan", "Index", " search", "Count", "Select"], "j": ["ji", "k", "a", "ja", "p", "y", "o", "jj", " k", "jl", "z", "je", "si", "ind", "adj", "obj", "l", "u", "d", "uj", " J", "job", "jp", "m", "oj", "ij", "J", "v", "b", " ii", "e", "kj", "ii", " l", " jo", " b"]}}
{"code": "k = int(input())\\na,b = map(int,input().split())\\nn = range(k,1001,k)\\nif any(a <= i and i <= b for i in n):\\n    print('OK')\\nelse:\\n    print('NG')\\n", "target": "78", "substitutes": {"k": ["km", "ke", "p", "c", "K", "o", "work", "kk", "ks", "z", "x", "mk", "kw", "w", "ka", "ko", "ak", "ask", "ok", "d", "unk", "q", "max", "ki", "f", "sk", "j", "m", "ku", "kick", "key", "ck", "t", "id", "ik"], "a": ["aa", "ans", "p", "ai", "g", "c", "y", "o", "ba", "ab", "z", "au", "x", "A", "ar", "af", "w", "ak", "l", "u", "f", "ca", "sa", "j", "ac", "asa", "m", "ga", "area", "am", "ae", "alpha", "an", "ad"], "b": ["s", "be", "ib", "fb", "p", "bs", "g", "c", "y", "r", "o", "h", "B", "ab", "z", "x", "w", "sb", "l", "bb", "d", "u", "rb", "abb", "j", "f", "m", "bin", "v", "bar", "e", "sub", "nb", "lb", "bi"], "n": ["p", "g", "c", "o", "r", "nc", "net", "bn", "ne", "ng", "z", "on", "x", "nan", "ny", "l", "nin", "d", "u", "nn", "nt", "f", "j", "m", "ac", "ns", "ni", "v", "e", "N", "nb", "an", "bi"], "i": ["s", "ie", "int", "ib", "qi", "p", "ai", "ic", "c", "g", "o", "r", "ini", "im", "inf", "z", "si", "x", "I", "ia", "it", "l", "u", "pi", "q", "io", "f", "j", "xi", "ri", "ni", "v", "e", "t", "li", "ii", "bi", "ip"]}}
{"code": "N = int(input())\\nA = list(input())\\nB = list(input())\\nC = list(input())\\n\\ncount = 0 \\n\\nfor i in range(N):\\n\tif A[i] == B[i] and A[i] == C[i]:\\n\t\tcontinue\\n\telif A[i] == B[i] or A[i] == C[i] or B[i] == C[i]:\\n\t\tcount +=1\\n\telse:\\n\t\tcount +=2\\nprint(count)", "target": "648", "substitutes": {"N": ["F", "E", "L", "NO", "V", "NL", "Q", "X", "Y", "NC", "NS", "NE", "K", "O", "P", "T", "D", "NP", "Ne", "S", "I", "No", "NT", "Z", "Ns", "R", "Part", "M", "J", "NB", " n", "G", "NA", "NUM", "Count", "n"], "A": ["F", "AD", "E", "a", "L", "Area", "Y", "AP", "LA", "AR", "BA", "AM", "AB", "SA", "P", "AW", "As", "AC", "D", "Ar", "T", "BB", "AA", "API", "If", "Alpha", "S", "I", "Ab", "Array", "CA", "Ant", "U", "AF", "Input", "mA", " a", "G", "Am", "HA", "NA", "Ac", "An", "Ad"], "B": ["F", "E", "L", "LB", "V", "H", "Q", "X", "Y", "CB", "IB", "DB", "BA", "AB", "O", "P", "T", "D", "BB", "BC", "AA", "BI", "S", "BD", "BF", "W", "I", "Ab", "BE", "BL", "OB", "WB", "CA", "U", "R", "Be", "M", "b", "NB", "QB", "G", "BER", "BS", " b", "Bs"], "C": ["F", "E", "L", "Cs", "V", "H", "CU", "X", "Q", "Y", "c", "DC", "K", "O", "P", "T", "D", "AC", "EC", "BC", "S", "GC", "W", "CF", "CM", "KC", "I", "Ch", "VC", "Sc", "Z", "CL", "CA", "CS", "Cl", "U", "R", "M", "CC", "G", "CR"], "count": ["error", "call", "name", "group", "last", "code", "total", "level", "c", "number", "case", "num", "log", "weight", "size", "counter", "index", "cache", "now", "start", "child", "catch", "member", "found", "core", "depth", "no", "check", "length", "match", "list", "type", "key", "base", "more", "all", "every", "add", "id", "part", "loop", "test", "sum", "Count", "n"], "i": ["gi", "ji", "s", "ui", "a", "ie", "int", "ei", "qi", "p", "init", "ai", "c", "oi", "h", "y", "o", "ix", "num", "ini", "iu", "api", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "uri", "fi", "u", "d", "pi", "uni", "ki", "j", "f", "io", "cli", "xi", "ori", "ri", "di", "ni", "ci", "b", "key", "v", "e", "bi", "t", "info", "multi", "id", "li", "ii", "source", "n", "block", "abi", "ip"]}}
{"code": "import sys\\nw = sys.stdin.readline().strip().lower()\\nt = sys.stdin.read().lower().split()[:-1]\\nprint(t.count(w))", "target": "142", "substitutes": {"w": ["hw", "wn", "wa", "wt", "wp", "win", "worker", "p", "sys", "aw", "c", "rw", "y", "fw", "how", "we", "wb", "weight", "temp", "writer", "x", "ew", "kw", "W", "window", "wx", "f", " dw", "nw", "ww", "sw", "ws", "wan", "wl", "wd", "v", "ow", "e", "wu", "iw", "word", "n"], "t": ["table", "wt", "tt", "p", "g", "c", "i", "y", "o", "r", "number", "tr", "txt", "T", "tf", "tty", "temp", "z", "time", "x", "st", "window", "it", "l", " T", "d", "template", "dt", "f", "m", "input", "data", "Total", "tree", "type", "v", "b", "qt", "e", "task", "total", "n"]}}
{"code": "n = int(input())\\ns = input()\\ncnt_r = 0\\ncnt_b = 0\\nfor i in range(len(s)):\\n    if s[i] == 'R':\\n        cnt_r+=1\\n    elif s[i] == 'B':\\n        cnt_b +=1\\nif cnt_r > cnt_b:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "160", "substitutes": {"n": ["name", "ner", "p", "na", "c", "o", "r", "nc", "number", "z", "sn", "l", "nn", "f", "j", "m", "ns", "no", "nr", "b", "v", "t", "N", "e", "nb", "nor"], "s": ["ss", "a", "strings", "qs", "words", "states", "p", "ps", "xs", "g", "c", "steps", "sets", "o", "r", "y", "si", "es", "blocks", "S", "w", "sb", "tests", "args", "sites", "parts", "lines", "ses", "u", "l", "d", "sg", "services", "f", "m", "sections", "ns", "ws", "abs", "ts", "b", "v", "ings", "gs", "e", "ls", "t"], "cnt_r": ["cst_r", "cst_R", "cnt2rb", "cst2r", "cnt_p", "cnt_n", "cnt2n", "count_r", "cnt_R", "count_rb", "cnt2R", "count_b", "cnt2p", "cnt2r", "cnt_rh", "cnt_rb", "count_n", "cst_c", "count_p", "cnt67r", "cst2R", "cnt67rb", "cnt2c", "cst2c", "cnt67b", "cnt67rh", "count_rh", "cnt_c", "cst2b", "cst_b", "cnt2b"], "cnt_b": ["cnd_p", "cnd_z", "cnt_p", "cwd_r", "cct_l", "cwd_rb", "cnt1p", "cct_r", "cnt__r", "cnd1b", "cnt1b", "cnd1p", "cnt__l", "cnt__b", "cnt_rb", "cnt1z", "cnd_b", "cwd_b", "cnt_z", "cct_p", "cnt_a", "cnt__p", "cwd_a", "cnt_l", "cnd1z", "cct_b"], "i": ["gi", "k", "ui", "end", "qi", "mi", "p", "ai", "c", "y", "h", "r", "ix", "ini", "pos", "iu", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "j", "f", "m", "xi", "di", "ci", "b", "e", "id", "li", "ii", "val", "bi", "ti"]}}
{"code": "x, y = map(int, input().split())\\ngroup = {\\n    1:1,\\n    3:1,\\n    5:1,\\n    7:1,\\n    8:1,\\n    10:1,\\n    12:1,\\n    4:2,\\n    6:2,\\n    9:2,\\n    11:2,\\n    2:3\\n}\\nif group[x] == group[y]:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "206", "substitutes": {"x": ["dx", "k", "a", "int", "X", "p", "xs", "c", "g", "i", "xx", "h", "ix", "px", "size", "z", "on", "index", "w", "u", "d", "q", "f", "j", "m", "key", "b", "v", "e", "xy", "col", "id", "n"], "y": ["s", "dy", "ye", "gy", "p", "Y", "g", "c", "i", "ix", "ym", "ay", "z", "yi", "cy", "w", "ny", "yt", "j", "sy", "m", "yy", "ya", "iy", "type", "b", "v", "key", "col", "vy", "ey", "n"], "group": ["name", "panel", "error", "int", "groups", "event", "p", "g", "c", "gap", "number", "result", "comment", "GROUP", "div", "array", "index", "clean", "valid", "bb", "max", "label", "row", "object", "sort", "agg", "close", "back", "co", "shape", "input", "list", "flag", "map", "match", "check", "type", "key", "string", "v", "pair", "batch", "order", "count", "cell", "id", "filter", "range", "part", "Group", "sum", "block"]}}
{"code": "import re\\n\\nS = input()\\npat = r'A?KIHA?BA?RA?$'\\nprint('YES' if re.match(pat, S) else 'NO')", "target": "796", "substitutes": {"S": ["F", "s", "Pattern", "L", "V", "H", "Q", "X", " s", "SE", "Sample", "NS", "Source", "ST", "O", "SA", "P", "B", "C", "T", "D", "A", "W", "RS", "I", "SS", "R", "Sub", "Part", "M", "Sign", "String", "SP", "N", "G", "SU"], "pat": ["AT", "letter", "Pattern", "rest", "at", "p", "arg", "stat", "format", "pr", "pos", "rep", "re", "bat", " Pat", "tag", "P", "reg", "sp", "pattern", "dot", "att", "apt", "patch", "nt", "cat", "script", "pad", "mat", "act", "match", "Pat", "expr", "key", " pattern", "sub", "filter", "feat", "parse", "prefix", "part"]}}
{"code": "N,T=map(int,input().split())\\nt=[int(i) for i in input().split()]+[10**15]\\nans=0\\nfor i in range(N):\\n    ans+=min(t[i+1]-t[i],T)\\nprint(ans)\\n", "target": "355", "substitutes": {"N": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "Size", "NS", "NE", "K", "NM", "O", "P", "C", "B", "D", "Len", "Ne", "S", "I", "No", "NT", "Z", "Ns", "R", "M", "J", "KN", "NA", "n"], "T": ["F", "E", "L", "V", "LT", "H", "Q", "X", "Y", "TA", "K", "TS", "TN", "TH", "Tu", "O", "P", "B", "D", "S", "TB", "A", "W", "I", "NT", "UT", "Z", "TT", "U", "R", "M", "WT", "n"], "t": ["s", "a", "token", "int", "table", "wt", "at", "tt", "p", "c", "target", "y", "o", "tp", "pt", "tf", "temp", "ti", "z", "time", "x", "l", "u", "d", "ta", "f", "dt", "ut", "m", "tu", "ts", "v", "b", "type", "e", "tz", "test", "total", "n"], "i": ["gi", "ji", "k", "ui", "a", "ei", "int", "ie", "qi", "mi", "p", "phi", "ai", "c", "o", "y", "ini", "ix", "pos", "iu", "ti", "z", "mini", "si", "index", "x", "ind", "start", "I", "l", "u", "d", "pi", "j", "f", "io", "m", "xi", "di", "ri", "ni", "ci", "key", "v", "b", "e", "zi", "id", "li", "ii", "n", "bi", "ip"], "ans": ["s", "a", "ents", "lan", "span", "cas", "ins", "nas", "ras", "atan", "na", "std", "ai", "ats", "aning", "anas", "AN", "ANS", "anes", "ks", "mean", "ane", "ann", "anon", "ani", "anc", "ana", "can", "S", "nan", "An", " means", "anus", "aned", "ons", "aus", "ens", "trans", "sk", "rans", "ants", "ns", "ran", "os", "len", "oss", "an", "n"]}}
{"code": "a,b=map(int,input().split())\\nprint(b+100*max(10-a,0))\\n", "target": "250", "substitutes": {"a": ["aa", "auto", "va", "p", "c", "i", "y", "ba", "ab", "z", "au", "da", "x", "A", "l", "bb", "d", "aaa", "f", "sa", "ca", "m", "ac", "area", "aj", "ae", "alpha", "an", "e", "count", "abc", "ad", "n"], "b": ["aa", "s", "fb", "p", "bs", "bp", "c", "i", "y", "r", "wb", "beta", "B", "ba", "ab", "x", "A", "sb", "l", "bb", "d", "rb", "bf", "abb", "f", "bd", "xb", "br", "bot", "abs", "v", "base", "e", "abc", "nb", "n"]}}
{"code": "# 34\\nA = int(input())\\nB = int(input())\\nC = int(input())\\nX = int(input())\\n\\nans = 0\\nfor a in range(0, A + 1):\\n    if 500 * a > X: continue\\n    for b in range(0, B + 1):\\n        if 500 * a + 100 * b > X: continue\\n        for c in range(0, C + 1):\\n            if 500 * a + 100 * b + 50 * c == X: ans +=1\\n\\nprint(ans)", "target": "439", "substitutes": {}}
{"code": "print(3-sum(i!=j for i,j in zip(*open(0))))", "target": "773", "substitutes": {"i": ["ji", "a", "ie", "int", "chi", "p", "phi", "ai", "c", "o", "r", "slice", "iu", "z", "si", "index", "x", "yi", "start", "I", "l", "u", "pi", "f", "jp", "xi", "di", "ij", "b", "ii", "bi", "abi", "info"], "j": ["new", "ji", "k", "ja", "p", "jo", "dj", "y", "jj", "im", "iq", "jl", "z", "dot", "index", "x", "ind", "adj", "obj", "l", "uj", "d", "q", "out", "js", "jp", "f", "aj", "ij", "J", "v", "b", "li", "next", "n"]}}
{"code": "#!/usr/bin/env python3\\nimport math\\n\\nn = int(input())\\nx = {}\\n\\nfor i in range(1, 50001):\\n    x.setdefault(math.floor(i * 1.08), i)\\n\\n\\ntry:\\n    print(x[n])\\nexcept:\\n    print(\":(\")\\n", "target": "194", "substitutes": {}}
{"code": "n = int(input())*2\\narr = list(map(int, input().split()))\\narr = sorted(arr)\\nsum = 0\\nfor i in range(0,n,2):\\n  sum += arr[i]\\nprint(sum)", "target": "215", "substitutes": {"n": ["s", "k", "span", "p", "c", "o", "r", "nc", "num", "y", "size", "ne", "z", "x", "w", "l", "u", "d", "nn", "nt", "f", "j", "m", "ns", "ni", "b", "len", "t", "N", "count", "e", "nb", "nor"], "arr": ["a", "int", "str", "align", "p", "na", "img", "arg", "err", "ai", "dat", "arc", "plot", "r", "result", "app", "tr", "iq", "air", "iter", "attr", "z", "array", "div", "att", "x", "cache", "ar", "stack", "par", "flat", "adj", "obj", "args", "l", "nt", "frac", "cat", "Array", "br", "ray", "list", "data", "len", "dim", "b", "order", "count", "all", "fr", "atom", "parse", "abc", "test"], "sum": ["mass", "error", "sh", "acc", "c", "hash", "num", "result", "weight", "mean", "empty", "size", "conf", "array", "cost", "scale", "si", "diff", "ass", "cal", "max", "score", "out", "gram", "frac", "sa", "sort", "ac", "fee", "am", "amount", "data", "average", "match", "alpha", "bin", "len", "count", "Sum", "all", "add", "parse", "um", "total"], "i": ["ih", "k", "a", "qi", "p", "phi", "ai", "c", "h", "y", "ix", "ini", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "d", "pi", "q", "j", "f", "m", "xi", "ri", "v", "b", "key", "e", "col", "id", "li", "ii", "bi", "ip"]}}
{"code": "a, b, c, k = map(int, input().split())\\nans = a - b\\nif abs(ans) > 1e18 :\\n    print(\"Unfair\")\\nelif k % 2 == 0 :\\n    print(ans)\\nelse :\\n    print(-ans)\\n", "target": "669", "substitutes": {"a": ["aa", "s", "sta", "va", "p", "na", "ai", "aw", "i", "y", "r", "la", "ba", "ab", "z", "au", "da", "x", "pa", "A", "w", "u", "f", "sa", "ca", "ac", "m", "area", "aj", "am", "ae", "oa", "alpha", "abs", "ada", "an", "ad", "n"], "b": ["aa", "fb", "p", "bs", "bp", "g", "i", "y", "r", "h", "beta", "B", "ba", "ab", "z", "x", "w", "sb", "cb", "l", "bb", "d", "rb", "f", "eb", "j", "v", "bar", "e", "bc", "ad", "n"], "c": ["p", "g", "y", "nc", "C", "uc", "z", "ce", "x", "cy", "con", "u", "d", "ca", "f", "cs", "ac", "dc", "ci", "ct", "e", "bc", "cc", "mc", "xc", "ad", "n"], "k": ["km", "ke", "p", "g", "i", "K", "o", "y", "r", "kk", "ks", "z", "x", "kw", "w", "ko", "ak", "ask", "ok", "d", "max", "q", "f", "sk", "j", "cs", "m", "ac", "v", "e", "kr", "cc", "ad", "n"], "ans": ["ano", "s", "nas", "eps", "atan", "na", "ats", "anas", "AN", "aos", "ANS", "anes", "ks", "any", "asts", "mean", "ann", "anon", "anc", "ani", "au", "ana", "ays", "x", "can", "nan", "A", "ars", "anned", "kin", "args", "aned", "ons", "aus", "anne", "sk", "cs", "leans", "ens", "ants", "acs", "ns", "scan", "os", "ls", "ds", "an", "ad", "ins"]}}
{"code": "import math\\nwhile True:\\n    a=0\\n    A=0\\n    b=0\\n    n=int(input())\\n    if n==0:\\n        break\\n    s=list(map(int,input().split()))\\n    S=sum(s)\\n    m=S/n\\n    for i in range(n):\\n        b=(s[i]-m)**2\\n        a=a+b\\n    A=a/n\\n    C=math.sqrt(A)\\n    print(C)\\n", "target": "683", "substitutes": {"a": ["aa", "va", "ma", "p", "na", "ai", "c", "aw", "y", "r", "ba", "B", "ab", "au", "AA", "da", "x", "u", "d", "f", "ca", "sa", "ac", "area", "aj", "am", "ae", "alpha", "N", "an", "ad"], "A": ["F", " N", " AA", "aa", "L", "At", "V", "p", "Y", "IA", "c", " B", "Na", " c", "SA", "P", "B", "D", "As", "AC", "array", "AA", "Alpha", " alpha", " BA", "I", "d", "f", "sa", "ac", "Average", "CA", "am", "alpha", "M", "N", "G", "an"], "b": ["aa", "k", "ib", "fb", "p", "bp", "bs", "g", "c", " B", "y", "r", "h", "AB", "beta", "B", "ba", "ab", "z", "x", "sb", "cb", "l", "bb", "d", "bf", "u", "rb", "abb", "j", "f", "sa", "eb", "ae", "v", "an", "e", "bc", "N", "nb", "bi", "ad"], "n": [" N", "k", "p", "na", "g", "c", "y", "o", "nc", "num", "r", "un", "B", "size", "ne", "z", "fn", "x", "nan", "sn", "w", "nat", "l", "nin", "u", "d", "nt", "nn", "f", "j", "Ns", "ns", "no", "ni", "bin", "v", "len", "an", "e", "N", "t", "all", "nb"], "s": ["ss", " lines", "strings", "south", "ed", "words", "p", "states", "g", "c", "ms", "sym", "ing", "sets", "steps", "o", "r", "split", "si", "es", "blocks", "w", "sb", "ps", "lines", "l", "u", "d", "parts", "services", "ses", "f", "sa", "ments", "Ns", "ns", "input", "breaks", "gs", "ings", "sum", "space", "e", "ls", "v", "ins"], "S": ["F", "L", "V", "H", "sample", "p", "Size", "g", "Num", "Si", "Na", "SI", "SA", "P", "B", "D", "Sa", "W", "I", "u", "SS", "f", "sa", "Ns", "ns", "small", "U", "M", "N", "Sum", "G", "sum"], "m": [" M", "mad", "ma", "mi", "p", "ms", "g", "nm", "c", "y", "o", "h", "Ms", "ym", "B", "mean", "z", "fm", "mu", "w", "cm", "l", "u", "d", "f", "j", "sm", "bm", "am", "M", "v", "e", "N", "mm", "Am", "an"], "i": ["gi", "k", "ui", "ie", "qi", "mi", "p", "ai", "c", " I", "y", "h", "num", "ini", "pos", "iu", "ti", "z", "si", "eni", "index", "x", "ind", "start", "I", "l", "u", "d", "pi", "j", "xi", "ni", "ci", "e", "id", "li", "ii", "bi"], "C": ["F", "E", "Ca", "Cs", "L", "V", "CI", "H", "CU", "Y", "c", "DC", "K", " c", "CNN", "O", "P", "T", "B", "D", "AC", "BC", "W", "CF", "CM", "VC", "ac", "CG", "CA", "U", "R", "M", "CC", "N", "G", "CR"]}}
{"code": "S = input()\\n\\nresult = (15 - len(S) + S.count(\"o\")) >= 8\\n\\nif result:\\n    print(\"YES\")\\nelse:\\n    print(\"NO\")\\n", "target": "656", "substitutes": {"S": ["F", "s", "E", "L", "IS", "DS", "V", "H", "Q", "X", "SE", "SR", "NS", "Si", "TS", "SH", "SI", "O", "SA", "P", "T", "C", "B", "D", "SK", "A", "RS", "I", "SS", "OS", "U", "R", "Input", "Part", "M", "String", "N", "G", "SO", "BS", "SU", "ES", "Socket"], "result": ["new", "error", "ge", "success", "err", "case", "number", "results", "sp", "final", "search", "response", "diff", "Result", "valid", "start", "answer", "page", "f", "status", "rc", "found", "function", "mate", "output", "entry", "complete", "match", "alpha", "feature", "order", "count", "message", "grade", "ret", "source", "test"]}}
{"code": "n=int(input())\\nl=[list(map(int,input().split())) for _ in range(n)]\\ndp=[[0]*3 for _ in range(n)]\\ndp[0]=l[0]\\nfor i in range(n-1):\\n    for j in range(3):\\n        dp[i+1][j]=max(dp[i][(j+1)%3],dp[i][(j+2)%3])+l[i+1][j]\\nprint(max(dp[n-1]))", "target": "555", "substitutes": {"n": ["s", "k", "mn", "p", "c", "o", "y", "nc", "num", "number", "h", "r", "en", "net", "un", "rn", "ne", "nu", "z", "fn", "x", "sn", "w", "u", "d", "cn", "nn", "nt", "q", "f", "m", "ln", "network", "ns", "no", "nl", "len", "b", "np", "v", "t", "N", "count", "pn", "dn", "nb", "an"], "l": ["lp", "s", "k", "ol", "L", "p", "g", "c", "dL", "o", "r", "sl", "el", "lc", "jl", "u", "d", "ll", "f", "ln", "dl", "m", "list", "nl", "fl", "v", "b", "t", "ls", "e", "li", "lb"], "_": ["s", "k", " p", "__", "p", "g", " x", " time", " line", " k", "x", " un", "out", "f"], "dp": ["lp", " p", "amp", "loc", "density", "wp", "p", "dist", "g", "c", "fp", "DC", "pb", "dat", "sl", "tp", "pos", "cp", "gp", "ph", "P", "dep", "dB", "lc", "diff", "params", "dm", "bb", "d", "pi", "DP", "sup", "dl", "dt", "pp", "deb", "dr", "dc", "address", "df", "pkg", "ep", "data", "db", "length", "wd", "b", "dim", "np", "pair", "e", "pd", " cp", "ds", "dos", "li", "hp", "direction", "ip"], "i": ["gi", "ji", "s", "k", "ui", "a", "ie", "ei", "qi", "mi", "p", "ai", "g", "c", "oi", "h", "y", "o", "ini", "ix", "iu", "api", "z", "si", "x", "ind", "I", "u", "d", "pi", "f", "io", "m", "xi", "di", "ci", "ij", "J", "v", "b", " ii", "e", "id", "li", "ii", "ik", "ip"], "j": ["ji", "k", "ui", "a", "ja", "p", "c", "jo", "y", "h", "jj", "o", "jit", "jl", "z", "x", "ind", "I", "u", "d", "uj", " J", "q", "f", "jp", "m", "oj", "aj", "ip", "ij", "J", "v", "b", " ii", "e", "li", "ii"]}}
{"code": "N = int(input())\\nif N % 2 == 0:\\n    answer = 0\\n    N //= 2\\n    for i in range(100):\\n        answer += N // 5\\n        N //= 5\\n    print(answer)\\nelse:\\n    print('0')", "target": "211", "substitutes": {"N": ["F", "Length", "E", "Number", "L", "NO", "V", "NN", "NL", "H", "Q", "X", "Y", "Size", "NS", "NE", "Num", "K", "NM", "O", "P", "T", "C", "B", "D", "S", "A", "W", "I", "NT", "Z", "Ns", "R", "M", "J", " n", "G", "NA", " NK", "n"], "answer": ["offer", "value", "NN", " answers", "reply", "number", "num", "result", "une", "say", "size", "ani", "array", "eni", "search", "response", "equ", "sn", "account", "nn", "score", "page", "network", "update", "option", "address", "query", "output", "input", "average", "question", "answered", "audio", "ell", "order", "grade", "energy", "word", "next", "Answer", "offset", "n"], "i": ["k", "a", "ie", "int", "p", "c", " I", " iP", " ip", "iq", "iu", " k", "x", "ind", "I", " il", "get", "q", "j", " j", "id", "n", "ip"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\n\\n\\ndef solve(s: str, K: int):\\n    n = len(s)\\n    ss = {\\n        s[i:j]\\n        for i in range(n)\\n        for j in range(i + 1, min(n + 1, i + K + 1))\\n    }\\n    print(sorted(ss)[K - 1])\\n \\n\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    s = next(tokens)  # type: str\\n    K = int(next(tokens))  # type: int\\n    solve(s, K)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "246", "substitutes": {}}
{"code": "a=list(map(int,input().split()))\\n\\nb=a[0]*a[1]\\nc=a[2]*a[3]\\n\\nif b-c>0:\\n  print(b)\\n\\nelse:\\n  print(c)", "target": "754", "substitutes": {"a": ["aa", "s", "auto", "int", "va", "at", "span", "p", "na", "access", "i", "fa", "eta", "app", "ba", "ab", "array", "pa", "da", "A", "l", "d", "ca", "f", "sa", "ac", "ga", "m", "area", "aux", "input", "am", "aj", "ae", "oa", "alpha", "ea", "e", "mac", "ha", "all", "add", "abc", "an", "ad", "n"], "b": ["aa", "k", "be", "auto", "fb", "p", "bs", "g", "i", "y", "h", "r", "wb", "B", "ba", "ab", "x", "A", "sb", "cb", "l", "bb", "d", "u", "bf", "rb", "abb", "f", "ca", "bd", "ac", "db", "binary", "v", "base", "e", "bc", "abc", "nb", "lb", "bi", "ad", "n"], "c": ["k", "p", "g", "i", "y", "h", "r", "cp", "C", "z", "ce", "x", "cy", "cu", "w", "cb", "cm", "l", "u", "d", "bb", "f", "ca", "cs", "ac", "m", "cin", "ci", "v", "cf", "e", "cr", "bc", "cc", "count", "abc", "ad", "n"]}}
{"code": "n = int(input())\\nb = list(map(int, input().split()))\\nprocedure = [-1] * n\\ntmp_n = n\\nfor m in range(n-1, -1, -1):\\n    for i in range(tmp_n-1, -1, -1):\\n        if b[i] == i+1:\\n            procedure[m] = i + 1\\n            del b[i]\\n            tmp_n -= 1\\n            break\\n    else:\\n        print(-1)\\n        exit()\\nfor i in range(n):\\n    print(procedure[i])\\n", "target": "593", "substitutes": {"n": ["s", "name", "k", "p", "init", "g", "c", "o", "y", "nc", "r", "num", "h", "net", "number", "ne", "nu", "z", "x", "sn", "node", "w", "l", "u", "d", "nt", "nn", "max", "f", "j", "network", "ns", "no", "ni", "nr", "v", "t", "N", "e", "nb"], "b": ["s", "be", "k", "a", "ib", "fb", "p", "bs", "pb", "c", "h", "r", "o", "zb", "B", "ab", "sb", "cb", "ation", "l", "ob", "rb", "bb", "d", "buffer", "ub", "f", "eb", "bd", "db", "binary", "v", "base", "e", "bc", "nb", "bi"], "procedure": ["Proction", "prostructuration", "proecURE", "proceduration", "precure", "proctURE", "proecure", "Procedion", "procedures", "proocolure", "proocoluration", "prceduration", "proocolur", "prcedur", "proexecures", "prostructures", "precur", "profures", "procedURE", "precures", "Proocolure", "ProocolURE", "proecures", "ProcedURE", "prcedure", "Procture", "prostructur", "procedur", "Proctures", "proecuration", "proexecion", "Proceduration", "procture", "Proocolion", "proecur", "proexecuration", "Procedures", "procturation", "proctures", "Procturation", "prostructure", "proocolion", "procedion", "prcedures", "Proocoluration", "proocolURE", "proexecure", "Procedure", "proecion", "proction", "profion", "proocolures", "profure", "profuration", "precuration"], "tmp_n": ["tmp_ns", " tmp_p", " tmp_ns", "tmp_p", " tmp_N", "tmp_N"], "m": ["min", "mode", "a", "mn", "me", "ma", "mi", "p", "ai", "g", "c", "nm", "o", "h", "r", "num", "im", "ym", "mini", "module", "dm", "mu", "ind", " mi", "cm", "machine", "u", "pi", "member", "uni", "mo", "j", "f", " j", "M", " me", "v", "e", "mac", "mm", "mc", "li", "month", "an", "bi"], "i": ["gi", "k", "ui", "a", "ie", "int", "qi", "mi", "p", "ai", "c", "o", "y", "r", "ini", "im", "iu", "ti", "z", "si", "eni", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "io", "j", "f", " j", "xi", "di", "ni", "ci", "ip", "v", "e", "li", "ii", "bi"]}}
{"code": "n=int(input())\\nl=[list(map(int,input().split())) for i in range(n)]\\n\\nfor x in range(101):\\n    for y in range(101):\\n        k=set(e+abs(x-q)+abs(w-y)  for q,w,e in l if e)\\n        for pre in k:\\n            for a,s ,d in l:\\n\\n                if d!=max(0,pre-abs(x-a)-abs(s-y)):break\\n            else:print(x,y,pre);exit()", "target": "114", "substitutes": {"n": ["p", "c", "o", "nc", "num", "ne", "z", "sn", "ny", "u", "nn", "f", "j", "m", "ns", "no", "len", "v", "b", "N", "t", "nb"], "l": ["lp", "ol", "L", "line", " L", "p", "g", "c", "o", "r", "like", "el", "la", "lo", "lc", "kl", "z", "u", "ll", "f", "ln", "j", "dl", "m", "list", "nl", "fl", "v", "b", "len", "t", "ls", "le", "li", "lin"], "i": ["ie", "qi", "p", "ai", "c", "o", "h", "ix", "im", "iq", "iu", "z", "index", "ind", "I", "u", "j", "xi", "iy", "ci", "b", " ii", "iw", "id", "li", "ii", "ip"], "x": ["dx", "wa", "int", "X", "p", "xs", "c", "xx", "fx", "h", "yn", "ix", "r", "rx", "px", "z", "xt", "on", "ex", "wx", "u", "max", "f", "ax", "m", "xi", "ya", "data", "v", "b", "t", "xy", "step", "xc"], "y": ["yr", "yd", "ys", "dy", "ye", " z", "p", "Y", "g", "c", "o", "h", "ym", "ay", "year", "z", "yi", "cy", "ny", "yt", "u", "j", "f", "m", "yy", "ya", "oy", "iy", "yl", "v", "b", "t", "xy", "yp", "py", "vy", "ey"], "k": ["p", "g", "c", "K", "o", "r", "h", "kk", "work", "pos", "ijk", "ks", "kn", "z", "kl", "ch", "ok", "u", "ll", "j", "sk", "f", "m", "check", "v", "key", "t", "ik"], "e": ["E", "end", "ie", "ze", "ye", "p", "g", "c", "element", "o", "r", "h", "en", "el", "fe", "ne", "z", "oe", "es", "ee", "u", "f", "j", "m", "ep", "ae", "v", "b", "pe", "t", "se", "er"], "q": [" p", "sq", "cycle", "qs", "qu", "Q", " z", "p", "qa", "g", "c", "h", "o", "r", "ix", "el", "z", "ch", "ce", "ew", "u", "max", "eq", "f", "j", "m", "ac", "v", "t", "id", "qq"], "w": ["wn", "wa", "win", "p", "g", "c", "h", "r", "o", "we", "wh", "weight", "z", "ew", "W", "wx", "u", "f", "m", "sw", "ww", "ws", "wo", " W", "v", "b", "t"], "pre": [" p", "int", "wp", "cond", "p", "ps", "pri", "_", "c", "g", "post", "o", "prev", "per", "r", "pos", "re", "we", "sp", "temp", "ne", "z", "po", "Pre", "now", "inc", "start", "next", "before", "pi", "j", "f", "sk", "m", "pp", "model", "null", "pad", "v", "b", "t", "pe", "py", "step", "li", "pse", "prefix", "block", "ad"], "a": ["aa", "wa", "ma", "p", "na", "ai", "c", "ay", "ba", "z", "au", "A", "ia", "u", "ca", "f", "sa", "j", "ac", "m", "ya", "am", "ae", "alpha", "b", "v", "t", "an", "ad"], "s": ["ys", "sh", "p", "ps", "g", "c", "xs", "o", "r", "ks", "sp", "z", "si", "es", "S", "u", "j", "f", "sa", "m", "ns", "ws", "v", "b", "t", "ls", "ds", "sv"], "d": [" p", "dd", "dy", "p", "nd", "c", "dat", "o", "sd", "D", "z", "da", "ind", "de", "u", "do", "j", "f", "m", "dc", "di", "v", "b", "dp", "pd", "t", "ds", "ad"]}}
{"code": "#harshad number \\nn = int(input()) \\nflag = 0 \\nn_str = str(n) \\nn_len = len(n_str) \\nn_digit = 0 \\nfor i in range(n_len):\\n    n_digit += int(n_str[i]) \\n\\nif n % n_digit == 0: \\n    flag = 1\\n\\n\\n\\nif flag:\\n    print('Yes') \\nelse:\\n    print('No')\\n", "target": "161", "substitutes": {}}
{"code": "N, K = map(int, input().split())\\n\\nif K == 1:\\n  print(0)\\n  exit()\\n\\nif N > K:\\n  print(N - K)\\nelse:\\n  print(0)", "target": "739", "substitutes": {"N": ["F", "MN", "E", "L", "NO", "V", "NN", "NL", "H", "Q", "X", "Y", "Size", "NC", "NS", "Na", "NM", "O", "P", "B", "C", "D", "Ne", "S", "A", "NY", "I", "No", "NT", "NG", "Node", "Z", "Ns", "ND", "M", "NB", "SN", " n", "G", "KN", "NA", "n"], "K": ["F", "Power", "k", "KK", "E", "ID", "L", "AK", "V", "Max", "H", "Q", "X", "Y", "IK", "Flow", "ANK", "KE", "Sk", "O", "P", "B", "C", "T", "SK", "D", "NK", "KS", "S", "W", "KC", "I", "HK", "Z", "KR", "PK", "U", "Mask", "R", "OK", "J", "M", "KN", "G", "Key", "n"]}}
{"code": "S = sorted(input())\\nT = sorted(input())[::-1]\\nprint(\"Yes\" if S<T else \"No\")", "target": "260", "substitutes": {"S": ["F", "s", "E", "L", "V", "AS", "Q", " s", "Y", "SE", "X", "NS", "Si", "Test", "TS", "PS", "SH", "SI", "OSS", "P", "C", "B", "SK", "SA", "A", "SL", "RS", "SS", "Z", "U", "R", "M", "SP", "N", "SN", "G"], "T": ["F", "E", "L", "V", "LT", "H", "Q", "X", "Y", "K", "TS", "TN", "O", "P", "B", "C", "D", "TG", "TB", "A", "W", "UT", "TX", "TM", "TW", "Z", "TT", "U", "R", "M", "J", "TF", "t", "N", "G"]}}
{"code": "x = int(input())\\nD = []\\nfor i in range(x):\\n    d = int(input())\\n    D.append(d)\\nk = []\\ncount = 1\\nd = max(D)\\nk.append(d)\\nD.remove(d)\\nfor j in range(x-1):\\n    c = max(D)\\n    if c < d:\\n        k.append(c)\\n        d = c\\n        count += 1\\n    D.remove(c)\\n\\nprint(count)", "target": "347", "substitutes": {"x": ["dx", "dd", "a", "code", "sex", "X", "p", "xs", "xx", "width", "y", "rx", "h", "ix", "z", "ex", "xxx", "index", "time", "cross", "w", "max", "f", "ax", "m", "xi", "day", "v", "t", "e", "xy", "xes", "id", "xc", "n"], "D": ["F", "E", "DA", "L", "DS", "V", "DX", "Q", "X", "DH", "Y", "DC", "K", "DM", "DE", "DO", "DB", "O", "Day", "P", "T", "C", "B", "MD", "DD", "LD", " C", "Dou", "S", "A", "DT", "W", " K", "I", "CD", "Ds", "Do", "Di", "DF", "Z", "Dist", "U", "R", "M", "N", "DL", "G", "DI"], "i": ["ih", "a", "ie", "p", "ai", "y", "h", "nc", "ix", "iu", "ind", " il", "I", "u", "q", "xi", "ip", "ci", "b", " ii", "e", "il", "col", "id", "li", "ii", "n"], "d": ["dx", "dd", "dy", "dh", "dom", "fd", "p", "g", "y", "o", "r", "sd", "size", "z", " dd", "w", "start", "l", "u", "do", "max", "q", "f", "bd", "m", "du", "none", "dt", "dc", "cd", "depth", "data", "db", "v", "b", "ld", "e", "t", "pd", " n", "ds", "id", "dos", " do", "n"], "k": ["ke", "p", "g", "dk", "K", "y", "o", "r", "ks", "C", "z", "w", "l", "ok", "u", "unk", "q", "f", "sk", "m", "self", "v", "b", "key", "e", "id", "n"], "count": ["call", "last", "code", "cond", "p", "default", "err", "h", "case", "weight", "C", "size", "force", "z", "div", "time", "cache", "diff", "ount", "ind", "now", "current", "child", "q", "f", "found", "depth", "cd", "parent", "data", "length", "check", "type", "len", "key", "base", "cc", "col", "id", "add", "sum", "Count", "n"], "j": ["ji", "dy", "p", "ai", " dj", "jo", "y", "dj", "jj", "ix", "h", " y", "o", "z", "je", "cy", "l", "q", "ax", "m", "oj", "jc", "ij", "J", "b", " ii", "e", "li"], "c": ["s", "a", "ed", "p", "g", "y", "o", "r", "ec", "nc", "case", "cp", "C", "lc", "anc", "z", "div", "ce", "cy", "cu", "w", "cm", "l", "u", "cn", "max", "q", "f", "rc", "cs", "m", "ac", "self", "dc", "cd", "ci", "ct", "b", "v", "cf", "e", "cr", "t", "col", "mc", "n"]}}
{"code": "x,y=map(int,input().split())\\nif x%y:\\n  print(x*(y-1))\\nelse:\\n  print(-1)", "target": "396", "substitutes": {"x": ["dx", "k", "loc", "gal", "a", "dy", "int", "X", "p", "tx", "xs", "c", "i", "xx", "width", "fx", "rx", "number", "px", "ix", "height", "h", "slice", "left", "size", "z", "ex", "index", "xxx", "image", "cy", "time", "w", "l", "d", "max", "f", "ax", "m", "point", "xi", "v", "b", "key", "pixel", "t", "e", "xy", "col", "step", "val", "n"], "y": ["yd", "ys", "a", "dy", "int", "ye", "p", "Y", "c", "i", "xx", "yx", "height", "ix", "ym", "ay", "year", "size", "z", "zy", "ty", "index", "yi", "yo", "cy", "wy", "ny", "yt", "lon", "j", "sy", "angle", "m", "yy", "ya", "oy", "iy", "day", "b", "yl", "t", "xy", "col", "vy", "ry", "ey", "n"]}}
{"code": "n=int(input())\\nd=[int(x) for x in input().split()]\\nif n%2==1:\\n    print(0)\\n    exit()\\nd.sort()\\nprint(d[n//2]-d[n//2-1])", "target": "415", "substitutes": {"n": ["s", "k", "a", "p", "na", "c", "i", "o", "number", "nc", "num", "y", "net", "h", "r", "ne", "z", "fn", "sn", "w", "adj", "zn", "l", "cn", "u", "nn", "nt", "j", "f", "ln", "m", "ns", "no", "v", "b", "len", "t", "N", "pn", "e", "count", "dn", "nb", "nor"], "d": ["s", "dd", "a", "dh", "fd", "p", "nd", "g", "c", "i", "dat", "o", "r", "dict", "sd", "split", "done", "ded", "D", "z", "diff", "l", "u", "do", "f", "j", "dt", "dl", "m", "bd", "data", "db", "b", "v", "ld", "dim", "t", "e", "ds", "dn", "ad"], "x": ["dx", "k", "int", "X", "p", "tx", "xf", "xs", "c", "i", "xx", "fx", "y", "number", "rx", "px", "ix", "num", "z", "ex", "index", " xx", "w", "cross", "wx", "q", "f", "ax", "xi", "data", "xp", "t", "e", "xy", "id", "val", "xc"]}}
{"code": "o=input()\\ne=input()\\npw=\"\"\\nfor i in range(len(o)+len(e)):\\n  if i%2==0:\\n    pw=pw+o[i//2]\\n  else:\\n    pw=pw+e[i//2]\\nprint(pw)", "target": "102", "substitutes": {"o": ["s", "k", "op", "a", "auto", "oo", "p", "c", "oi", "y", "ot", "bo", "O", "po", "oe", "od", "ou", "w", "so", "l", "u", "d", "do", "mo", "f", "io", "one", "m", "os", "oa", "b", "v", "ow", "t", "off", "n"], "e": ["em", "E", "ie", "ei", "ze", "ed", "ele", "p", "g", "c", "eve", "element", "y", "ec", "en", "el", "oe", "edge", "es", "x", "w", "l", "ee", "d", "u", "q", "f", "n", "m", "ae", "v", "b", "ea", "pe", "er", "ey", "eu"], "pw": [" pws", "epwh", "tpws", "epws", "cpwh", "fwa", " pwh", "ppwh", " pwa", "spw", "epwm", "Pwd", "tpwa", "Pws", "fw", "ppwa", "pwb", "Pwm", "cpw", "tpw", "pwa", "pwd", " pwb", "cpws", "fwd", "Pwh", "epw", " pwm", "Pwb", "cpwd", "cpwb", "fow", "Pw", "spwa", "ppws", "tpwd", "Pwa", "pwh", "spwd", "ppw", "spow", " pow", " pwd", "pow", "ppwd", "pwm", "pws", "cpwa"], "i": ["gi", "k", "ui", "a", "ei", "int", "ie", "p", "phi", "c", "oi", "y", "iu", "ti", "z", "si", "eni", "index", "x", "ind", "start", "w", "I", "uri", "l", "u", "pi", "d", "j", "f", "io", "xi", "ri", "di", "ci", "v", "b", "my", "t", "info", "multi", "id", "li", "ii", "bi", "n"]}}
{"code": "import sys\\nimport re\\nimport math\\nimport collections\\nimport bisect\\nimport itertools\\nimport fractions\\nimport functools\\nimport copy\\nimport heapq\\nimport decimal\\nimport statistics\\nimport queue\\n\\n# import numpy as np\\n\\nsys.setrecursionlimit(10 ** 9)\\nINF = 10 ** 16\\nMOD = 10 ** 9 + 7\\n# MOD = 998244353\\n\\nni = lambda: int(sys.stdin.readline())\\nns = lambda: map(int, sys.stdin.readline().split())\\nna = lambda: list(map(int, sys.stdin.readline().split()))\\nna1 = lambda: list(map(lambda x: int(x) - 1, sys.stdin.readline().split()))\\n\\n\\n# ===CODE===\\n\\n\\n\\ndef main():\\n    a, b, q = ns()\\n    s = [ni() for _ in range(a)]\\n    t = [ni() for _ in range(b)]\\n\\n    def disLR(a, idx):\\n        small = a[max(0, idx - 1)]\\n        large = a[min(len(a) - 1, idx)]\\n        return [small, large]\\n\\n    for _ in range(q):\\n        ans = INF\\n\\n        x = ni()\\n\\n        idxs = bisect.bisect_left(s, x)\\n        a1 = disLR(s, idxs)\\n\\n        idxt = bisect.bisect_left(t, x)\\n        a2 = disLR(t, idxt)\\n\\n        for ta1 in a1:\\n            for ta2 in a2:\\n                tmp1 = abs(x - ta1) + abs(ta2 - ta1)\\n                tmp2 = abs(x - ta2) + abs(ta1 - ta2)\\n                ans = min(ans, tmp1, tmp2)\\n\\n        print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "487", "substitutes": {}}
{"code": "a, b = input().split()\\nab = a*int(b)\\nba = b*int(a)\\nif ab <= ba:\\n  print(ab)\\nelse:\\n  print(ba)", "target": "69", "substitutes": {"a": ["aa", "s", "va", "p", "ai", "c", "i", "fa", "y", "au", "da", "pa", "x", "A", "ar", "af", "l", "bb", "d", "u", "aaa", "f", "sa", "ca", "ac", "ga", "asa", "m", "area", "am", "aj", "ae", "alpha", "ea", "e", "abc", "an", "ad", "n"], "b": ["aa", "s", "part", "fb", "p", "bs", "c", "i", "y", "app", "wb", "mb", "B", "x", "A", "sb", "ob", "bb", "d", "bf", "rb", "u", "abb", "bu", "f", "eb", "xb", "binary", "abs", "v", "base", "e", "bc", "abe", "bas", "abc", "nb", "lb", "bi", "ad", "n"], "ab": ["aa", "ib", "lab", "bs", "ai", "fab", "BA", "AB", "la", "hab", "az", "au", "pa", "A", "af", "sb", "ob", "bb", "Ab", "ub", "abb", "aba", "ca", "eb", "sa", "ac", "am", "abl", "ae", "abs", "bar", "bc", "abe", "ada", "abc", "bas", "ad", "abi"], "ba": ["aa", "Ba", "va", "lab", "bs", "ai", "fa", "bo", "BA", "la", "hab", "au", "az", "pa", "da", "af", "ka", "bon", "sb", "cb", "ia", "bb", "ta", "abb", "aaa", "ca", "aba", "sa", "eb", "ac", "asa", "area", "xb", "ae", "oa", "abs", "bar", "ea", "ha", "bc", "abe", "bas", "ada", "abc", "xa", "bi"]}}
{"code": "def k(n):\\n  return n**2\\na=int(input())\\nL=list(map(int,input().split()))\\nc=sum(L)\\nc=c**2\\nL=list(map(k,L))\\nd=sum(L)\\nprint((c-d)//2)", "target": "434", "substitutes": {"n": [" N", "k", "p", "na", "g", "i", "o", "y", "nc", "num", "net", "C", "size", "ne", "nu", "z", "fn", "x", "sn", "w", "l", "u", "cn", "nn", "nt", "j", "f", "m", "ns", "v", "b", "t", "N", "e", "nb"], "a": ["aa", " p", "s", "p", "na", "i", "y", "Na", "P", "z", " C", "AA", "da", "x", "ar", "A", "pi", "j", "sa", " A", "ac", "m", "alpha", "b", "e", "count", "abc", " b"], "L": ["F", "k", "E", "V", "LT", "H", "NL", "Q", "X", "Y", "LA", "dL", "K", "LP", "Lu", "O", "P", "T", "C", "B", "D", "LM", "lc", "z", "kl", "S", "A", "W", "SL", "LC", "I", "l", "ln", "Z", "U", "R", "list", "List", "M", "J", "v", "LI", "N", "DL", "G", "LL", "cl", " l", "Long"], "c": ["s", "k", "p", "g", "i", "y", "r", "h", "nc", "ec", "C", "D", "lc", "uc", "z", "ce", "x", "cu", "w", "l", "u", "cn", "f", "cs", "m", "ac", "dc", "cd", "ci", "v", "b", "cf", "t", "e", "count", "cc", "pc", "cl", "sum"], "d": ["dx", "s", "dd", "dy", "dh", "fd", "p", "g", "i", "h", "r", "sd", "C", "D", "z", "da", "x", "w", "l", "u", "q", "f", "dt", "j", "m", "dc", "cd", "b", "ld", "e", "t", "ds", "ad"]}}
{"code": "import sys\\n\\nn = int(sys.stdin.readline())\\nborrowing = 100000\\n\\nfor i in range(0, n):\\n    borrowing *= 1.05\\n    borrowing = int((borrowing+999) / 1000) * 1000\\n\\nprint(borrowing)", "target": "569", "substitutes": {"n": [" N", "s", "k", " it", "p", "init", " number", "c", " nano", " ni", "y", "r", "nc", "number", " c", "num", "o", "size", "z", "fn", " encoding", "x", "nan", " fn", "sn", "l", "d", "nn", "nt", "ln", "f", "m", " count", "ns", " ns", "nr", "b", "len", "t", "N", "nb", " b"], "borrowing": ["borrown", "bourunning", "barrow", "rowrown", "bourring", "baroing", "bourrow", "borunning", "farunning", "borring", "burrolling", "barwriting", "bourathering", "rowunning", "burrow", "rowrolling", "bourrolling", "burrown", "garrowing", "burwriting", "barrown", "bourrown", "barring", "borrolling", "garrow", "rowrowing", "buroing", "farrown", "bourrowing", "barunning", "burathering", "borwriting", "farrow", "garrown", "garathering", "burunning", "burrowing", "bourwriting", "farrowing", "borrow", "barrowing", "burring", "borathering", "bouroing", "boroing"], "i": ["gi", "k", " it", "p", "_", "c", " I", "r", " iP", " ip", " inf", "x", " ir", "ind", " il", "I", "l", "j", " j", "ip", " key", " ii", "il", "id"]}}
{"code": "boin = ['a','e','i','o','u']\\nif input() in boin:\\n    print(\"vowel\")\\nelse:\\n    print(\"consonant\")", "target": "120", "substitutes": {"boin": ["voIN", "Bobin", "bobin", "boins", "voin", "joi", "Boins", "Boin", "joIN", "Boi", "voi", "BoIN", "boIN", "vobin", "voins", "boi", "join", "joins", "jobin"]}}
{"code": "def f(k):\\n    import itertools\\n\\n    N = [[str(i) for i in range(10)]]\\n    n = 0\\n    while n < k:\\n        T = []\\n        U = [n[0] for n in N[-1]]\\n        anchor = 0\\n        for i in range(len(U) - 1):\\n            if U[i] != U[i + 1]:\\n                T.append((anchor, i + 1))\\n                anchor = i + 1\\n        else:\\n            T.append((anchor, len(U)))\\n        M = []\\n        for i in range(10):\\n            for d in (-1, 0, 1):\\n                if 0 <= i + d < len(T):\\n                    for j in range(*T[i + d]):\\n                        M.append(\"{}{}\".format(i, N[-1][j]))\\n        N[-1] = [n for n in N[-1] if not n.startswith(\"0\")]\\n        n += len(N[-1])\\n        N.append(M)\\n    N = list(itertools.chain.from_iterable(N))\\n    return N[k - 1]\\n\\n\\nK = int(input())\\nprint(f(K))\\n", "target": "339", "substitutes": {"k": ["km", "s", "ke", "p", "c", "o", "r", "num", "kk", "ks", "P", "kn", "z", "x", "mk", "kw", "ak", "ok", "u", "unk", "q", "max", "sk", "f", "m", "kick", "key", "v", "b", "id", "ik"], "N": ["F", "MN", "Network", "NF", "E", "L", "New", "V", "NN", "NL", "Q", "X", "Y", "NC", "Num", "NS", "NE", "TN", "NM", "Local", "CNN", "O", "P", "C", "B", "D", "NER", "NP", "Ne", "S", "W", "Not", "Body", "I", "RN", "No", "NT", "OS", "NG", "Node", "Ni", "Z", "IO", "Data", "Ns", "Temp", "ND", "R", "List", "J", "NB", "Other", "G", "NA", "Wh", "Mo"], "i": ["gi", "ji", "ui", "vi", "a", "ie", "int", "ei", "qi", "mi", "p", "phi", "ai", "c", "oi", "o", "y", "ini", "ix", "iu", "ti", "z", "mini", "si", "eni", "index", "x", "yi", "ind", "start", "I", "uri", "l", "u", "pi", "uni", "f", "io", "m", "xi", "ori", "di", "ri", "ni", "ci", "b", "len", "v", "e", "info", "zi", "id", "li", "ii", "anti", "bi", "ip"], "n": ["min", "s", "name", "a", "span", "p", "na", "nd", "g", "c", "Num", "y", "o", "number", "en", "un", "nc", "num", "rn", "size", "ne", "nu", "z", "on", "fn", "x", "sn", "w", "node", "adj", "it", "l", "u", "cn", "nn", "nt", "f", "ln", "m", "ns", "null", "no", "ni", "v", "b", "np", "t", "e", "all", "inner", "li", "ii", "nb", "an"], "T": ["F", "E", "Tan", "L", "V", "LT", "H", "Q", "X", "Y", "Tokens", "TA", "TS", "TN", "ST", "Tu", "O", "P", "B", "C", "D", "S", "A", "DT", "W", "I", "NT", "UT", "FT", "TX", "Tr", "TW", "Z", "TM", "TT", "R", "Total", "J", "OUT", "t", "Token", "MT", "WT", "G"], "U": ["F", "L", "Up", "V", "URI", "PUT", "CU", "X", "Q", "Y", "UC", "UN", "LU", "Su", "UP", "O", "Tu", "P", "C", "D", "API", "GU", "S", "UD", "I", "UV", "u", "UT", "US", "UR", "IO", "R", "OU", "PU", "UU", "MU", "UI", "Ul", "Unit", "SU", "UL"], "anchor": ["ancion", "colore", "crossori", "anchcor", "colo", "candors", "animore", "anccor", "ignor", "ancho", "candoring", " anchors", "ancors", "crossion", "ancor", "igncor", "anchoring", "candion", "collore", "anchator", "anchors", "anchion", "ignors", "ancoring", "ancator", "angor", "coloring", "animoring", "color", " anchator", "anchore", "animor", " anchcor", "ancori", "animo", "angoring", "colloring", "collion", "collo", "crossoring", "ignator", "collor", "angion", "crossor", "anchori", "candor", "collori", "angors"], "M": ["F", "MN", "E", "L", "V", "Y", "MI", "MO", "Mor", "DM", "MX", "Man", "NM", "AM", "JM", "O", "P", "LM", "Map", "D", "B", "MD", "C", "S", "CM", "OM", "I", "IM", "Matrix", "TM", "m", "MC", "Me", "R", "J", "MS", "MF", "MT", "MU", "G", "Mo"], "d": ["dx", "name", "s", "did", "a", "digit", "dy", "code", "p", "go", "nd", "c", "o", "h", "r", "num", "sd", "ym", "D", "div", "z", "x", "ind", "w", "cm", "l", "u", "do", "isd", "f", "dt", "m", "days", "cd", "di", "day", "b", "v", "e", "t", "ds", "id", "dn", "ii", "iod", "ad"], "j": ["ion", "ji", "end", "a", "dy", "ie", "p", "o", "y", "jj", "r", "jl", "z", "x", "ind", "adj", "l", "uj", "jp", "m", "jc", "xi", "di", "ni", "ij", "J", "nr", "v", "key", "b", "e", "kj", "li", "ii", "ang"], "K": ["F", "ID", "KK", "KO", "V", "H", "Q", "X", "Y", "Sk", "P", "C", "B", "D", "SK", "O", "NK", "KS", "S", "A", "I", "Z", "KR", "Code", "PK", "R", "J", "G", "CH", "Work", "Key"]}}
{"code": "n,m=map(int,input().split())\\ns=list(map(int,input().split()))\\nt=list(map(int,input().split()))\\ndp=[[0]*(m+1) for _ in range(n+1)]\\nfor i in range(n+1):\\n  dp[i][0]=1\\nfor i in range(m+1):\\n  dp[0][i]=1\\nmod=pow(10,9)+7\\nfor i in range(n):\\n  for j in range(m):\\n    dp[i+1][j+1]=sum((dp[i][j+1],dp[i+1][j],-dp[i][j]))%mod\\n    if s[i]==t[j]:dp[i+1][j+1]+=dp[i][j]\\n    dp[i+1][j+1]%=mod\\nprint(dp[-1][-1])\\n#print(dp)", "target": "505", "substitutes": {"n": ["k", "a", "mn", "p", "c", "y", "o", "nc", "num", "en", "net", "un", "r", "h", "z", "x", "w", "l", "u", "d", "nn", "q", "cn", "f", "network", "ns", "M", "b", "v", "N", "e", "ii", "nb"], "m": ["k", "mn", "tm", "p", "ms", "g", "c", "y", "h", "r", "o", "num", "im", "z", "x", "mu", "w", "cm", "l", "u", "d", "q", "f", "M", "b", "v", "e", "N", "mm", "hm", "mc"], "s": ["ss", "ys", "eps", "ans", "p", "ps", "ms", "g", "states", "xs", "ions", "y", "o", "tp", "ims", "si", "es", "als", "S", "l", "ses", "d", "ations", "f", "ens", "ns", "ws", "os", "abs", "ts", "v", "b", "ls", "ips", "ds", "ies", "ins"], "t": ["k", "at", "tm", "tt", "p", "g", "c", "y", "tn", "tp", "ot", "h", "o", "r", "T", "tf", "temp", "ti", "z", "time", "st", "w", "l", "u", "d", "q", "ta", "f", "dt", "rt", "ts", "v", "b", "e", "tc"], "dp": ["lp", " p", "dd", "wp", "p", "dist", "phi", "default", "pb", "xs", "fp", "dat", "projects", "sl", "tp", "pm", "pos", "cp", "tmp", "gp", "api", "P", "dep", "dB", "vs", "mp", "vp", "params", "comp", "dm", "grad", "d", "pi", "DP", "dl", "dt", "point", "pp", "deb", "dr", "port", "up", "dc", "address", "df", "pkg", "di", "drop", "data", "db", "alpha", "wd", "cd", "dim", "zip", "project", "pair", "direct", "pd", "imp", "ds", "dos", "dn", "hp", "pg", "direction", " df", "ip"], "_": ["k", "p", "g", "o", "h", "ix", "ime", "x", "I", "f", "J", "all", "il", "id", "li", "ip"], "i": ["gi", "ji", "k", "ui", "a", "ei", "int", "ie", "qi", "p", "ai", "c", "y", "o", "ini", "im", "ix", "iu", "api", "ti", "z", "si", "x", "yi", "mu", "ind", "start", "I", "it", "l", "u", "pi", "d", "q", "f", "io", "xi", "ori", "di", "ni", "ci", "ij", "ip", "v", "b", "e", "info", "id", "li", "ii", "ik", "bi"], "mod": ["min", "mode", "int", "MOD", "perm", "p", "exp", "c", "mult", "r", "tr", "tmp", "beta", "sign", "reg", "temp", " Mod", "div", "scale", "time", "diff", "x", "comp", "module", "oct", "mu", "cm", "sec", "d", "max", "q", "f", "term", "pad", "dim", "mods", "b", "dev", "add", "step", "form", "rad", "Mod"], "j": ["gi", "ji", "k", "ui", "a", "ie", "ja", "qi", "p", "g", "c", "jo", "y", "h", "jj", "r", "ix", "o", "el", "iu", "jl", "z", "si", "jet", "x", "ind", "adj", "l", "u", "d", "uj", "q", "js", "jp", "f", "jc", "job", "xi", "br", "aj", "ij", "J", "b", "v", "key", "e", "li", "ii"]}}
{"code": "\\nn=int(input())\\nn //= 3\\nprint(n)", "target": "584", "substitutes": {"n": [" N", "name", "s", "p", "na", "init", "nd", "g", "c", "nm", "i", "o", "number", "r", "num", " c", "nc", " i", "h", "y", "pos", "ne", "ng", "z", "fn", "x", "index", "sn", "node", "l", "u", "d", " ng", "nn", "f", "network", "j", "m", "ns", "nr", "b", "v", "len", "t", "N", "e", "count", "nb"]}}
{"code": "n, k = map(int, input().split())\\nlength = list(map(int, input().split()))\\n\\nlength.sort(reverse=True)\\ntotal = 0\\nfor i in range(k):\\n  total += length[i]\\n\\nprint(total)", "target": "433", "substitutes": {"n": [" N", "name", "span", "p", "c", "o", "nc", "net", "ne", "sn", "l", "nn", "nt", "ln", "network", "f", "j", "m", "ns", "ni", "nl", "v", "len", "N", "pn", "nb"], "k": ["p", "g", "c", "dk", "K", "h", "o", "y", "r", "kk", "num", "ks", "size", "kn", "z", "kw", "w", "ko", "ak", "u", "d", "max", "q", "j", "sk", "f", "m", "ku", "kick", "v", "b", "e", "count"], "length": ["Length", "value", "code", "level", "p", "distance", "element", "width", "number", "result", "section", "split", "size", "long", "array", "search", "l", "q", "row", "position", "point", "address", "output", "shape", "input", "list", "match", "type", "v", "path", "len", "string", "key", "count", "order", "id", "word", "range", "form", "test", "block"], "total": ["error", "cur", "full", "value", "token", "p", "c", "otal", "number", "always", "result", "translation", "ph", "gross", "done", "temp", "size", "local", "basic", "checked", "final", "scale", "cost", "valid", "partial", "now", "next", "current", "max", "nt", " Total", "expected", "right", "found", "json", "null", "no", "Total", "complete", "key", "base", "t", "all", "count", "percent", "part", "sum"], "i": ["gi", "ih", "ui", "a", "qi", "mi", "p", "pri", "ai", "c", "h", "ix", "ini", "pos", "iu", "ti", "z", "mini", "si", "eni", "index", "x", "yi", "ind", "I", "l", "u", "d", "pi", "q", "j", "f", "m", "xi", "di", "ci", "key", "b", "e", "id", "li", "ii", "bi", "ip"]}}
{"code": "s = input()\\na_number = 0\\nz_number = 0\\n\\nfor i in range(len(s)):\\n    if s[i] == 'A':\\n        a_number = i\\n        break\\n\\nfor j in reversed(range(len(s))):\\n    if s[j] == 'Z':\\n        z_number = j\\n        break\\n\\nprint(z_number - a_number + 1)", "target": "365", "substitutes": {"s": ["ss", "strings", "a", "south", "qs", "groups", "sample", "states", "p", "ps", "xs", "c", "steps", "sets", "o", "ks", "aces", "si", "es", "blocks", "events", "S", "series", "cells", "sb", "tests", "args", "sites", "parts", "services", "lines", "ses", "erences", "d", "sg", "ids", "sup", "f", "cs", "m", "sections", "ments", "ns", "ws", "seconds", "input", "os", "features", "abs", "gs", "string", "b", "ts", "letters", "t", "ls", "e", "ips", "opens", "ds", "scripts", "ins"], "a_number": ["z_amount", "a_size", "a_no", "a6amount", "a__message", "z_no", "a__num", "A_size", "A_numbered", "a6number", "a6version", "z_count", "z_message", "z_version", "a__count", "a_message", "A_number", "z_num", "a6no", "a_count", "a_amount", "a_version", "A_num", "a__number", "a_numbered", "a_num"], "z_number": ["z_letter", "a_nr", "zh_num", "zajdata", "z_address", "zajdigit", "zh_number", "zajnumber", "zh_address", "a_digit", "z_nr", "a_data", "z_num", "z_span", "z_data", "zajnum", "a_span", "z_digit", "zh_letter", "a_num"], "i": ["ji", "k", "a", "p", "phi", "ai", "ic", "c", "y", "ini", "im", "iu", "z", "si", "x", "yi", "ind", "start", "ia", "I", "l", "u", "pi", "d", "io", "m", "xi", "di", "ni", "ip", "ci", "v", "b", "e", "zi", "id", "li", "ii", "n", "bi", "ti"], "j": ["ji", "k", "end", "ie", "ja", "p", "g", "c", "jo", "o", "y", "jj", "r", "un", "h", "jl", "z", "je", "jet", "x", "ind", "l", "d", "uj", "q", "job", "jp", "f", "m", "oj", "jc", "aj", "ij", "J", "v", "b", "bj", "kj", "li", "ii", "n"]}}
{"code": "n, a, b, c, d = map(int, input().split())\\ns = input()\\nif '##' in s[a:max(c, d)] or (d < c and '...' not in s[b-2:d+1]):\\n  print('No')\\nelse:\\n  print('Yes')", "target": "478", "substitutes": {"n": ["k", "p", "g", "i", "o", "r", "nc", "y", "C", "ne", "z", "x", "w", "l", "nn", "f", "m", "ns", "v", "t", "N", "e", "dn", "nb", "an"], "a": ["aa", "p", "na", "ai", "g", "i", "y", "r", "o", "ba", "ab", "da", "x", "A", "af", "w", "f", "ca", "sa", "ac", "m", "area", "am", "ae", "alpha", "e", "an", "ad"], "b": ["k", "dy", "p", "g", "i", "y", "r", "o", "h", "beta", "B", "ba", "ab", "z", "x", "w", "body", "l", "bb", "f", "j", "m", "db", "v", "base", "e", "bc", "abc", "nb", "ad"], "c": ["k", "p", "g", "i", "y", "r", "h", "nc", "C", "lc", "z", "x", "cy", "w", "cb", "l", "u", "cn", "max", "f", "ca", "cs", "ac", "m", "j", "dc", "cd", "ci", "ct", "v", "cf", "e", "count", "col", "abc"], "d": ["dx", "min", "dd", "end", "dy", "fd", "p", "nd", "g", "i", "y", "r", "h", "sd", "D", "z", "da", "x", "diff", "w", "l", "u", "do", "f", "j", "dt", "m", "dc", "cd", "db", "v", "e", "t", "ds", "id", "dn", "ad"], "s": ["ss", "hs", "strings", "ys", "states", "p", "ps", "g", "xs", "sym", "rows", "sets", "sd", "ads", "posts", "si", "es", "blocks", "S", "sb", "ges", "l", "lines", "ses", "services", "aws", "ches", "js", "f", "sa", "cs", "m", "sw", "ments", "ns", "ws", "abs", "gs", "string", "v", "ings", "e", "ls", "ips", "ds", "sv", "comments", "ins"]}}
{"code": "s = list(str(input()))\\nt = list('AKIHABARA')\\ns.reverse()\\nt.reverse()\\nfor i in range(len(t)):\\n    c = t.pop()\\n    if s:\\n        if c == s[-1]:\\n            s.pop()\\n        else:\\n            if c == 'A':\\n                continue\\n            else:\\n                break\\n    else:\\n        if c != 'A':\\n            print('NO')\\n            exit()\\n        else:\\n            continue\\nif not s:\\n    print('YES')\\nelse:\\n    print('NO')\\n", "target": "796", "substitutes": {"s": ["ss", "strings", "a", "p", "ps", "xs", "g", "rows", "ing", "sets", "sym", "o", "y", "sl", "r", "h", "ks", "z", "si", "es", "blocks", "S", "w", "sb", "tests", "args", "l", "services", "ses", "d", "fts", "u", "sg", "lines", "f", "cs", "m", "sync", "ns", "types", "self", "ws", "set", "os", "abs", "ts", "b", "v", "gs", "ings", "ls", "e", "ips", "ds", "ops", "sv", "n"], "t": ["a", "table", "python", "p", "g", "y", "r", "tp", "h", "o", "T", "tf", "temp", "z", "x", "l", "u", "d", "ta", "f", "dt", "j", "m", "input", "list", "ts", "v", "b", "type", "e", "tz", "test", "total", "n"], "i": ["gi", "k", "p", "ai", "g", "y", "h", "iu", "ti", "z", "si", "index", "ind", "I", "l", "d", "f", "j", "ci", "ip", "e", "col", "id", "li", "ii", "n", "lo"], "c": ["k", "a", "sc", "p", "g", "y", "r", "ec", "o", "nc", "oc", "C", "lc", "uc", "ce", "unc", "cy", "cu", "l", "u", "d", "f", "rc", "cs", "m", "ac", "dc", "vc", "ci", "ct", "b", "cf", "e", "cr", "cc", "pc", "xc", "enc", "cl", "tc", "n"]}}
{"code": "n,k = map(int, input().split())\\nma = n//k + n%k\\nmi = n//k\\nprint(ma -mi)", "target": "739", "substitutes": {"n": ["min", "name", "s", "a", "p", "g", "c", "nm", "i", "o", "y", "number", "num", "en", "net", "r", "h", "size", "ne", "z", "mini", "fn", "x", "nan", "w", "node", "l", "u", "d", "nn", "q", "f", "j", "m", "none", "network", "ns", "b", "v", "np", "e", "N", "t", "nb"], "k": ["km", "a", "ke", "p", "kh", "g", "c", "i", "dk", "K", "y", "o", "work", "h", "kk", "ks", "kn", "z", "ch", "x", "mk", "kw", "w", "ka", "ko", "ak", "l", "ok", "u", "d", "max", "q", "ki", "j", "sk", "f", "m", "ku", "kick", "alpha", "b", "v", "key", "ck", "e", "mm", "ik", "che"], "ma": ["aa", "wa", "mad", "a", "mia", "MA", "na", "eta", "fa", "ima", "mas", "la", "si", "da", "pa", "mu", "ka", "ia", "mma", "ta", "Ma", "ra", "ca", "sa", "m", "ga", "area", "ema", "alpha", "ea", "mm", "mc"], "mi": ["vi", "ami", "wi", "mia", "chi", "MI", "ai", "phi", "nm", "i", "umi", "ini", " i", "mini", "si", "imi", "pi", "mis", "ki", "m", " si", "xi", "mic", "ri", "di", "Mi", "ci", "ni", "mm", "li", "ii", "bi", "ti"]}}
{"code": "def main():\\n    H, W, M = map(int, input().split())\\n    bomb_row = [0 for _ in range(H)]  # \u7206\u5f3e\u304c\u4f55\u884c\u76ee\u306b\u4f55\u500b\u3042\u308b\u304b\\n    bomb_column = [0 for _ in range(W)]  # \u7206\u5f3e\u304c\u4f55\u5217\u76ee\u306b\u4f55\u500b\u3042\u308b\u304b\\n    bomb_map = set()  # \u7206\u5f3e\u304c\u3069\u3053\u306b\u3042\u308b\u304b\\n\\n    for _ in range(M):\\n        r, c = map(int, input().split())\\n        bomb_row[r - 1] += 1\\n        bomb_column[c - 1] += 1\\n        bomb_map.add((r - 1, c - 1))\\n\\n    max_row = max(bomb_row)  # \u884c\u3054\u3068\u306b\u898b\u3066\u6700\u3082\u591a\u3044\u7206\u5f3e\u306e\u500b\u6570\\n    max_column = max(bomb_column)  # \u5217\u3054\u3068\u306b\u898b\u3066\u6700\u3082\u591a\u3044\u7206\u5f3e\u306e\u500b\u6570\\n    ans = max_row + max_column\\n\\n    bomb_max_row = []  # \u7206\u5f3e\u304cmax_row\u500b\u3042\u308b\u884c\\n    bomb_max_column = []  # \u7206\u5f3e\u304cmax_column\u500b\u3042\u308b\u5217\\n\\n    for i in range(H):\\n        if bomb_row[i] == max_row:\\n            bomb_max_row.append(i)\\n    for i in range(W):\\n        if bomb_column[i] == max_column:\\n            bomb_max_column.append(i)\\n\\n    for r in bomb_max_row:\\n        for c in bomb_max_column:\\n            if (r, c) not in bomb_map:  # \u6700\u591a\u884c\u3068\u6700\u591a\u5217\u306e\u4ea4\u70b9\u306b\u7206\u5f3e\u304c\u7121\u3051\u308c\u3070\u7d42\u4e86\\n                print(ans)\\n                return\\n\\n    print(ans - 1)  # \u6700\u591a\u884c\u3068\u6700\u591a\u5217\u306e\u4ea4\u70b9\u306b\u7206\u5f3e\u304c\u3042\u308c\u3070ans - 1\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "694", "substitutes": {"H": ["F", " N", " h", "L", "V", "Q", "X", "Y", "K", "h", "SH", "O", "P", "T", "C", "B", "D", "CH", "S", "A", "w", "Z", "HH", "MH", "HI", "U", "R", "J", "N", "G", "RH"], "W": ["F", "L", "V", "Q", "X", "Y", "WD", "WR", "K", "SW", "GW", "P", "B", "C", "T", "S", "w", "We", "Z", "WM", "U", "R", "N", "VW", "G", "Wh"], "M": ["F", "MN", "E", "V", "Q", "X", "Y", "MW", "K", "O", "P", "B", "T", "C", "D", "S", "Z", "MH", "m", "MC", "U", "R", "J", "N", "MM", "G", "RM"], "bomb_row": [" next_rows", " first2block", " next_block", " next_col", " first2rows", " next1block", " first_rows", " first2row", " first0rows", " first1block", " next1col", " first1rows", " first1col", " first0col", " first_block", " next_row", " next1row", " first0row", " first_col", " next1rows", " first0block", " first1row", " first2col", " first_row"], "_": [" block", "i", " I", " id", "h", " time", " __", "x", "d", "row", "f", "m", " j", " col", "id", "val"]}}
{"code": "import sys\\nreadline = sys.stdin.readline\\nreadline()\\nbits = 1\\nfor a in map(int, readline().split()): bits |= bits << a\\nreadline()\\nsys.stdout.write(\"\\n\".join(\"yes\"*((bits >> q) & 1)or\"no\" for q in map(int, readline().split())))\\nsys.stdout.write(\"\\n\")", "target": "279", "substitutes": {"readline": ["playlines", " ReadLine", "loadlines", "READline", "Readblock", "readlink", "loadblock", " Readstring", "ReadLine", "Readstring", "playfile", "loadLine", "readLine", " readfile", "Readline", " readpoint", "loadline", "loadpoint", "playblock", "readlines", "writelines", "loadfile", "READLINE", " Readline", "Readlines", "readblock", " Readlines", "writeline", "writestring", "readstring", "scanline", " readLINE", " readstring", "readLINE", " readlines", "READblock", "writelink", "scanlines", "READlink", "playstring", "scanLine", "playline", " readlink", " readLine", "readpoint", "READlines", "scanpoint", "READstring", "readfile", "playLine", "ReadLINE", " readblock"], "bits": ["lins", "frames", "checks", "bytes", "limits", "settings", "vals", "words", "ps", "hours", "bs", "rows", "ints", "fixes", "options", "nets", "cycles", "codes", "blocks", "fps", "locks", "pieces", "parts", "lines", "bugs", "ids", "works", "details", "cs", "flags", "ns", "pins", "mask", "dates", "features", "reads", "abs", "ips", "big", "its", "ops", "bit", "changes", "ins"], "a": ["s", "ma", "p", "na", "qa", "ai", "c", "i", "mult", "o", "en", "la", "ba", "x", "ar", "A", "w", "l", "u", "ta", "f", "sa", " A", "ac", "ga", "m", "ait", "am", "alpha", "b", "t", "e", "le", "an", "ast", "ad", "n"], "q": ["k", "sq", "int", "qs", "code", "qu", "Q", "p", "qa", "ai", "g", "c", "i", "mult", "h", "r", "y", "o", "iq", "ks", "z", "x", "A", "ar", "w", "u", "eq", "f", "dq", "m", "query", "mask", "qt", "b", "aq", "e", "t", "quant", "seq", "qq", "block", "n"]}}
{"code": "import math\\n\\nn,k = map(int,input().split())\\nprint(n-k+1)\\n", "target": "459", "substitutes": {"n": [" N", " p", " h", " data", " output", "p", " number", "c", "i", "h", " v", "y", "num", " c", " i", "o", "nc", "nu", " f", "z", "kn", "fn", "x", "nan", " fn", " log", "l", " ng", "u", "q", " m", "ln", "j", "m", " kn", " j", "ns", " init", "nl", " ns", " self", "v", "b", "N", " index", " l", "nb", " b"], "k": ["km", "kid", "ke", "p", "c", "i", "dk", "K", "o", "work", "num", "kk", "ks", "kn", "z", "x", "mk", "kw", " K", "ko", "ak", "l", "ok", "u", "d", "unk", "max", "q", "j", "sk", "m", "kat", "v", "b", "ck", "kr", "ik", "kb", "uk"]}}
{"code": "d, n = map(int, input().split())\\nif n == 100:\\n    n += 1\\nprint(n if d==0 else 100*n if d==1 else (100**2)*n)\\n", "target": "781", "substitutes": {"d": ["dx", "did", "dd", "dy", "dh", "dom", "ed", "fd", "p", "nd", "std", "c", "o", "sd", "md", "ded", "done", "D", "z", "od", "da", "x", "ind", "l", "de", "do", "xd", "bd", "dt", "f", "m", "old", "dc", "cd", "di", "ct", "ld", "dim", "e", "t", "ds", "id", " D", "dn", "ad"], "n": ["name", "k", "non", "p", "na", "g", "c", "i", "mult", "y", "o", "nc", "num", "number", "pos", "en", "un", "don", "size", "ne", "nu", "z", "fn", "x", "nan", "sn", "w", "con", "l", "nin", "cn", "nn", "nt", "f", "j", "ln", "m", "none", "ns", "no", "v", "b", "np", "len", "e", "N", "pn", "t", "inn", "dn", "inner", "nb", "an", "nor"]}}
{"code": "for i in range(1,10):\\n\tfor j in range(1,10):\\n\t\tmultiply = i * j\\n\t\tprint('{0}x{1}={2}'.format(i,j,multiply))", "target": "789", "substitutes": {"i": ["ji", "k", "ui", "a", "ie", "int", "chi", "p", "phi", "ai", "c", "o", "y", "ini", "ix", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "io", "f", "m", "xi", "ri", "di", "ci", "alpha", "v", "b", "id", "li", "ii", "n", "bi", "ip"], "j": ["ji", "k", "a", "ie", "ja", "p", "c", "jo", "y", "r", "jj", "h", "dj", "jl", "z", "je", "index", "x", "adj", "obj", "I", "l", "u", "uj", "band", "q", "js", "jp", "ax", "m", "jc", "oj", "xi", "f", "aj", "ij", "J", "v", "bj", "b", "key", "xy", "eff", "ii", "n"], "multiply": ["MultIPple", "multipll", "multipply", "multitl", "multitly", "Multiply", "Multipple", " multipy", " multipl", " multipply", "multitply", "multipy", "multifl", " multiplly", "Multipx", "multiplply", "multIPl", "multipple", "multiplx", " multipll", "multippx", "multifply", "multiplple", "MultIPx", " multiplply", "MultIPly", "multipx", "multiplly", "multIPx", "Multipl", "multIPly", "multipl", "multifly", "multippl", "multippple", "multity", "multIPple", "MultIPl", "multify"]}}
{"code": "a,b=input().split()\\nnum = int(a+b)\\n\\nans = \"No\"\\n\\nfor i in range(320):\\n    if i**2 != num:\\n        continue\\n    else:\\n        ans = \"Yes\"\\n        break\\nprint(ans)", "target": "271", "substitutes": {"a": ["aa", "s", "wa", "p", "ai", "c", "aw", "ama", "fa", "y", "la", "ba", "ab", "da", "x", "pa", "A", "l", "u", "d", "ca", "sa", "f", "ac", "ga", "asa", "aj", "am", "ae", "alpha", "an", "ad", "n"], "b": ["k", "ib", "fb", "p", "bs", "bp", "g", "c", "pb", "y", "r", "h", "wb", "beta", "mb", "B", "ba", "ab", "x", "sb", "cb", "l", "bb", "d", "rb", "bf", "abb", "f", "v", "e", "count", "nb", "lb", "n"], "num": ["unit", "end", "Num", "mon", "umi", "mult", "number", "en", "un", "pos", "split", "conf", "nu", "index", "norm", "valid", "inc", "con", "u", "nn", "max", "uni", "f", "lim", "um", "am", "bin", "len", "dim", "bc", "count", "multi", "nb", "sum", "NUM", "offset", "n"], "ans": ["ano", "ents", "lan", "nas", "offs", "eps", "ams", "atan", "na", "ats", "ions", "anas", "AN", "ads", "ANS", "anes", "ks", "ane", "annels", "ann", "ani", "ays", "ana", "ands", "can", " means", "nan", "ars", "anus", "lines", "aned", "ons", "aus", "ens", "leans", "ants", "ns", "os", "acts", "actions", "ls", "cons", "ians", "ds", "plan", "ops", "an", "comments", "ins"], "i": ["gi", "end", "ie", "int", "chi", "qi", "p", "phi", "ai", "c", "o", "r", "ti", "z", "si", "index", "x", "ind", "I", "l", "u", "d", "pi", "j", "f", "m", "xi", "ni", "ci", "e", "count", "id", "li", "ii", "val", "bi", "n"]}}
{"code": "# \u554f\u984c\u304c\u5c11\u3057\u308f\u304b\u308a\u305a\u3089\u3044\u3002\\nn = int(input())\\nw = list(map(int, input().split()))\\na = 10**19\\nfor i in range(1, n-1):\\n  \t# \u91cd\u308a\u3092\u4e8c\u3064\u306b\u5206\u3051\u3001\u5dee\u7570\u306e\u6700\u5c0f\u5024\u3092\u5224\u5b9a\u3059\u308b\u3002\\n    a = min(abs(sum(w[:i+1]) - sum(w[i+1:])), a)\\nprint(a)\\n", "target": "8", "substitutes": {}}
{"code": "#!/usr/bin/env python3\\nimport itertools\\n\\n\\ndef main():\\n    N = int(input())\\n    S = [input() for i in range(N)]\\n    S_cnt = [0]*5\\n    E = [\"M\", \"A\", \"R\", \"C\", \"H\"]\\n    for s in S:\\n        for i in range(5):\\n            if s[0] ==E[i]:\\n                S_cnt[i] += 1\\n    E_list = list(itertools.combinations(E, 3))\\n    tmp = 1\\n    ans = 0\\n    for e in E_list:\\n        for i in range(3):\\n            for j in range(5):\\n                if e[i] == E[j]:\\n                    tmp *= S_cnt[j]\\n        ans += tmp\\n        tmp = 1\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "760", "substitutes": {}}
{"code": "# ABC_054_C_One_Stroke_Path.py\\n\\nfrom itertools import permutations\\nN, M = list(map(int, input().split()))\\nL=[]\\nfor _ in range(M):\\n    L.append(list(map(int, input().split())))\\n# print(L)\\n\\nP = list(permutations(range(1,N+1)))\\n# print(P)\\nct = 0\\nfor i in P:\\n    if i[0]==1 and \\\\n    all((sorted([i[j], i[j+1]]) in L) for j in range(N-1)):\\n        ct += 1\\nprint(ct)", "target": "143", "substitutes": {}}
{"code": "from collections import Counter,defaultdict,deque\\nfrom heapq import heappop,heappush,heapify\\nimport sys,bisect,math,itertools,fractions,pprint\\nsys.setrecursionlimit(10**8)\\nmod = 10**9+7\\nINF = float('inf')\\ndef inp(): return int(sys.stdin.readline())\\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\\n\\nn = inp()\\nA = [inp() for i in range(n)]\\nrem = 0\\nres = 0\\nfor i,a in enumerate(A):\\n    res += (a+rem)//2\\n    if a != 0:\\n        rem = (a+rem)%2\\n    else:\\n        rem = 0\\nprint(res)", "target": "455", "substitutes": {"mod": ["mode", "unit", "spec", "MOD", "exp", " exp", "mult", "circ", "im", "reg", " Mod", "scale", "sim", "comp", "module", "mu", "ind", "cm", "sec", "fun", "dim", "mods", "debug", "complex", "imp", "dec", "step", "Mod"], "INF": ["inN", "inInf", "Inf", "inF", "inf", "INN", "InF", " inf", " inF", " inN", "INf", "INInf", "InInf", "InN", " inInf"], "n": [" N", "k", "p", "na", "g", "c", "o", "r", "y", "num", "number", "en", "rn", "ne", "z", "x", "ar", "sn", "w", "l", "u", "d", "nn", "nt", "j", "f", "m", "ns", "no", "nr", "b", "v", "np", "t", "N", "e", "nb", "an"], "i": ["k", "ie", "int", "at", "p", "ai", "c", "o", "r", "h", "iu", "lo", "z", "index", "x", "ar", "ind", "I", "ia", "it", "l", "u", "pi", "d", "j", "io", "f", "m", "xi", "di", "ri", "hi", "ip", "ci", "b", "e", "il", "id", "li", "ii", "an", "ti"], "A": ["Act", "At", "New", "X", "p", "AP", "ai", "LA", "This", "K", "Na", "AM", "P", "B", "C", "mA", "As", "Ar", "API", "array", "AA", "Alpha", "S", "I", "args", "Ab", "Array", "CA", "area", "am", "alpha", "M", "an", "N", "G", "Am", "NA", "An"], "rem": ["prom", "min", "redo", "REM", "rest", "arm", "recent", "rm", "default", "pre", "p", "pres", "exp", "nm", "err", "our", "r", "rec", "Rem", "num", "result", "prev", "rep", "re", "cum", "RE", "hr", "gr", "reg", "ne", "original", "dem", "rev", "ana", "index", "x", " Rem", "cm", "remote", "max", "j", "right", "m", "core", "irm", "resh", "resp", "N", "keep", "ret", "progress", "range", "rom", "ref"], "res": ["Rs", "rest", "mr", "ras", "rm", "p", "arr", "ps", "rows", "err", "r", "num", "result", "results", "pres", "rep", "re", "prev", "gr", "RE", "reg", "ares", "rev", "es", "x", "Res", "runs", "remote", "ons", "resolution", "RES", "right", "range", "ns", "resh", "resp", "breaks", "R", "os", "ress", "reset", "ret", "progress", "rs"], "a": ["aa", "ack", "wa", "va", "ma", "ans", "arg", "na", "p", "ai", "qa", "c", "fa", "y", "r", "la", "ba", "ab", "au", "ana", "art", "da", "x", "pa", "ar", "w", "ia", "ata", "u", "ra", "aaa", "ca", "sa", "ac", "m", "ga", "area", "am", "aj", "ae", "alpha", "b", "ea", "e", "all", "pai", "an"]}}
{"code": "from math import floor, sqrt\\nfrom collections import defaultdict\\nN,M = map(int,input().split())\\nd = defaultdict(int)\\nfor i in range(2, floor(sqrt(M))+1):\\n    while M % i == 0:\\n        d[i] += 1\\n        M //= i\\nif M != 1:\\n    d[M] += 1\\ndef comb(n,k):\\n    if k == 0:\\n        return 1\\n    return comb(n-1,k-1) * n // k\\nans = 1\\nfor e in d.values():\\n    ans *= comb(N+e-1, e)\\nprint(ans % (10**9+7))", "target": "473", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "H", "Q", "X", "Y", "NS", "K", "NM", "O", "P", "T", "C", "B", "D", "Ne", "S", "A", "I", "NT", "Z", "Ns", "U", "R", "CN", "G"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "K", "DM", "PM", "RM", "NM", "O", "JM", "P", "T", "LM", "B", "D", "C", "MD", "S", "A", "CM", "I", "FM", "cm", "MB", " m", "Z", "m", "MC", "U", "R", "Mi", "J", "MF", "MM", "MT", "G"], "d": ["s", "dd", "a", "dy", "dom", "p", "nd", "g", "c", "dat", "o", "dict", "ded", "done", "D", "z", " dd", "div", "da", "x", "dm", "ind", "w", "l", "u", "do", "Do", "q", "f", "j", "dl", "m", "dt", "bd", "dc", "cd", "di", "data", "b", "v", "dim", "t", "pd", "ds", "dos", " D", "ad"], "i": ["s", "a", "int", "mi", "p", "phi", "ai", "c", "oi", "o", "y", "pos", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "it", "l", "u", "pi", "max", "j", "f", "m", "xi", "di", "ci", "v", "b", "multi", "id", "li", "ii"], "n": ["s", "p", "g", "c", "y", "o", "h", "num", "C", "z", "x", "nan", "w", "l", "u", "cn", "q", "f", "j", "m", "Ns", "ns", "v", "b", "nb", "an"], "k": ["km", "s", "ke", "p", "g", "c", "dk", "_", "K", "y", "o", "r", "num", "kk", "h", "ks", "kn", "z", "ch", "x", "mk", "kw", "w", "ak", "l", "ok", "u", "max", "q", "j", "sk", "f", "m", "ac", "kick", "v", "b", "id", "ik"], "ans": ["s", "a", "ents", "lan", "nas", "ras", "p", "na", "ai", "ions", "AN", " na", "ANS", "ks", "mean", "ann", "anon", "anc", "cus", "ana", "es", "ays", "x", "can", " means", "A", "nan", "ars", "aned", "ons", "aus", "ids", "ens", "sk", "cs", "ns", "os", "an", "cons", "ds", "oss", " Ans", "ins"], "e": ["s", "E", "end", "a", "ie", "ei", "ze", "ke", "p", "c", "element", "o", "eeee", "en", "ec", "y", "h", "r", "el", "fe", "ne", "z", "oe", "es", "x", "l", "u", "ee", " E", "f", "m", "ae", "b", "v", "t"]}}
{"code": "a,b,c=map(int,input().split())\\nif a**2+b**2==c**2:\\n  print(a*b//2)\\nelif a**2+c**2==b**2:\\n  print(a*c//2)\\nelse:\\n  print(b*c//2)", "target": "637", "substitutes": {"a": ["aa", "s", "auto", "int", "va", "p", "qa", "ai", "aw", "i", "ama", "fa", "y", "ba", "ab", "au", "da", "pa", "x", "A", "ia", "l", "u", "d", "f", "sa", "ca", "asa", "ac", "ga", "area", "aj", "am", "ae", "alpha", "ea", "e", "an", "ad", "n"], "b": ["aa", "be", "s", "auto", "ib", "fb", "p", "bs", "g", "i", "y", "r", "o", "h", "wb", "B", "ba", "ab", "x", "A", "sb", "cb", "l", "bb", "d", "rb", "u", "f", "ca", "eb", "m", "ac", "j", "ae", "db", "v", "e", "bc", "t", "abc", "ad", "n"], "c": ["s", "k", "p", "g", "i", "y", "r", "h", "ec", "C", "lc", "z", "ce", "x", "cy", "cu", "w", "cb", "l", "u", "d", "bb", "q", "f", "ca", "cs", "m", "ac", "ci", "ct", "v", "cf", "e", "bc", "cc", "col", "n"]}}
{"code": "import collections\\nN = int(input())\\na = list(map(int,input().split()))\\nans = 0\\nc = collections.Counter(a)\\n\\nkey = list(c.keys())\\n\\n\\nfor i in key:\\n  if i > c[i]:\\n    ans += c[i]\\n  elif i < c[i]:\\n    ans += c[i] - i\\nprint(ans)", "target": "536", "substitutes": {"N": ["k", " M", "NC", " O", "Num", "NS", " I", "K", " ni", " k", "B", "C", " C", "x", "S", "A", " K", "I", " NA", " NC", " no", "Ns", "no", " n", " P", "Key", "n"], "a": ["aa", "k", "wa", "va", "p", "access", "na", "ai", "fa", "y", "mA", "ab", "au", "array", "ana", "da", "x", "ar", "A", "ia", "ata", "args", "ak", "ace", "aaa", "ca", "sa", "ac", "m", "ants", "area", "am", "ae", "alpha", "b", "ea", "an", "n"], "ans": ["s", "k", "lan", "nas", "amps", "vals", "na", "ai", "aning", "anas", "AN", "ANS", "anes", "ks", "mean", "aces", "names", "ann", "anon", "ani", "anc", "annot", "ays", "es", "ana", "can", "array", "nan", "ane", " means", "ars", "anus", "ia", "aned", "cn", "ace", "ons", "aus", "ids", "anne", "leans", "sk", "cs", "sa", "ants", "atches", "ns", "ases", "san", "actions", "ls", "keys", "ds", "an", "ins"], "c": ["s", "k", "collection", "code", "p", "g", "o", "y", "nc", "h", "r", "cp", "ec", "C", "lc", "fc", "ce", "x", "cache", "index", "cy", "cu", "w", "l", "ctx", "u", "d", "f", "ca", "cs", "m", "ac", "self", "dc", "co", "ci", "ct", "b", "v", "cf", "e", "cr", "count", "col", "mc", "pc", "xc", "abc", "config", "n"], "key": ["k", "ack", "ie", "int", "code", "ke", "p", "y", "case", "ay", "section", "oc", "ane", "array", "index", "x", "cy", "w", "ak", "ace", "q", "row", "ax", "ac", "char", "point", "list", "no", "check", "match", "type", "e", "mac", "count", "keys", "order", "ice", "col", "id", "Key", "n"], "i": ["gi", "ji", "s", "k", "ui", "end", "ie", "int", "chi", "qi", "p", "qa", "init", "ai", "o", "y", "r", "ix", "ini", "iu", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", "m", "xi", "di", "ni", "ci", "ij", "alpha", "v", "b", "e", "col", "id", "multi", "li", "ii", "part", "n", "bi", "ip"]}}
{"code": "N, P = map(int, input().split())\\nS = input()\\n\\nans = 0\\nif P == 2 or P == 5 :\\n    for i in range(N) :\\n        if int(S[i])%P == 0 :\\n            ans += i+1\\n    print(ans)\\n    exit()\\n\\nmodP = [0 for _ in range(P)]\\nmodP[0] = 1\\nnow = 0\\nt = 1\\nfor i in range(N) :\\n    now += int(S[-1-i]) * t\\n    now %= P\\n    modP[now] += 1\\n    t = t * 10 % P\\n\\nfor r in modP :\\n    ans += r*(r-1)//2\\n\\nprint(ans)\\n", "target": "448", "substitutes": {"N": ["F", "E", "NR", "L", "V", "NN", "H", "Q", "X", "p", "Y", "NS", "NE", "K", "O", "T", "C", "B", "D", "Ne", "W", "I", "NT", "Z", "Ns", "U", "R", "M", "J", " n", "n"], "P": ["F", "TP", " p", "PI", "E", "PO", "L", "V", "H", "PUT", "Q", "X", "p", "Y", "K", "PN", "O", "T", "B", "C", "D", "NP", "Ps", "PP", "A", "W", "PR", "I", "PA", "DP", "RP", "Py", "BP", "U", "R", "PIN", "M", "CP", "J", "G", "PF", "PT"], "S": ["F", "s", "L", "V", "Q", "X", "p", "SC", "SE", "Y", "Sample", "NS", "INS", "Si", "K", "TS", "PS", "SH", "ST", "SI", "O", "T", "C", "B", "D", "Ps", "Sa", "Session", "A", "Sl", "I", "SS", "OS", "Ns", "U", "R", "M", "Sign", "SP", "G", "BS", "SU", "Socket", "n"], "ans": ["ano", "s", "a", "at", "lan", "ras", "nas", "offs", "amps", "cas", "p", "na", "ps", "eps", "xs", "ats", "Ann", "arts", "aps", "AN", "ANS", "ks", "ann", "ares", "ani", "annot", "ays", "es", "errors", "params", "can", "art", "A", "ar", "An", "ars", "anus", "args", "parts", "aned", "ons", "aus", "ens", "sk", "trans", "cs", "ants", "ns", "ran", "features", "os", "ls", "plan", "ds", "span", "rs", "an", "n", "ins"], "i": ["gi", "k", "a", "ei", "int", "ie", "qi", "mi", "p", "phi", "ai", "c", " I", "y", "o", "ini", "iu", "ti", "z", "si", "eni", "index", "x", "ind", "start", "I", "it", "l", "u", "pi", "d", "j", "f", "m", "xi", "ori", "di", "ri", "ni", "ci", "ip", "v", "b", "e", "id", "li", "ii", "n"], "modP": ["ModQ", "modN", "MODP", "ModP", "ModT", "MODN", "MODT", " modN", "modQ", "MODp", "modT", "permp", " modQ", "ModN", "Modp", "permT", "permP", " modp", "permN", " modT", "MODQ", "modp"], "_": ["int", " time", "x", "I", " j", "all", "n"], "now": ["new", "cur", "then", "a", "last", "auto", "int", "at", "NOW", "tt", "p", "c", "low", "ready", "since", "tmp", "this", "T", "seed", " today", "size", " NOW", "z", "time", "x", "st", "w", "start", "current", " current", "u", "d", "nt", "max", "row", "shift", "ww", "old", "self", "Now", "day", "ct", "type", "today", "ow", "order", "id", "step", "after", "next", "test", "n"], "t": ["s", "a", "int", "at", "tt", "p", "c", "y", "tp", "ot", "o", "tmp", "T", "pt", "ti", "z", "time", "art", "x", "w", "start", "ant", "l", " T", "u", "d", "nt", "ta", "f", "dt", "m", "rt", "ts", "v", "b", "type", "e", "n"], "r": ["s", "k", "a", "Rs", "int", "at", "ner", " R", "p", "RT", "c", "rate", "o", "rd", "rf", "T", "z", "time", "x", "ar", "w", "it", "u", "d", "pi", "q", "rs", "sr", "f", "ir", "m", "self", "rt", "R", "nr", "b", "pair", "e", "order", "id", "range", "n"]}}
{"code": "from collections import Counter\\nn = int(input())\\na = [int(input()) for i in range(n)]\\nc = Counter(a).values()\\nans = 0\\nfor i in c:\\n    if i % 2 == 1:\\n        ans += 1\\nprint(ans)", "target": "707", "substitutes": {"n": ["k", "p", "o", "number", "nc", "num", "r", "y", " na", "h", "C", "ne", "z", "index", "x", "nan", "w", "l", "d", "nt", "nn", "f", "m", "Ns", "ns", "b", "e", "N", "count", "t", "nb", "an"], "a": ["aa", "at", "p", "ai", "aw", "ab", "au", "array", "da", "ar", "A", "af", "args", "ace", "aaa", "ca", "f", "sa", "ac", "m", "area", "am", "input", "ae", "alpha", "b", "ea", "t", "an", "ad"], "i": ["gi", "ei", "int", "chi", "qi", "p", "phi", "ai", "ic", "oi", "o", "r", "iu", "z", "si", "index", "x", "ind", "start", "I", "it", "l", "u", "pi", "d", "f", "j", "io", "m", "xi", "di", "ni", "ci", "b", "e", "zi", "id", "li", "ii", "bi", "ti"], "c": ["sc", "collection", "code", "p", "nc", "C", "coll", "lc", "anc", "fc", "unc", "cu", "cv", "con", "cm", "ca", "f", "rc", "cs", "ac", "m", "dc", "co", "cd", "ci", "ct", "b", "cf", "e", "bc", "cr", "cc", "count", "col", "mc", "xc", "pc", "abc"], "ans": ["s", "lan", "span", "nas", "offs", "atan", "na", "ai", "aning", "anas", "AN", "ANS", "anes", "ks", "mean", "annels", "ann", "anon", "anc", "ani", "ays", "ana", "can", "nan", "ars", "anus", "aned", "nn", "ids", "ons", "aus", "ens", "sk", "cs", "leans", "ants", "ns", "os", "ni", "reads", "cons", "ians", "ds", "an", "ins"]}}
{"code": "# 2019-11-14 20:54:46(JST)\\nimport sys\\n# import collections\\n# import math\\n# from string import ascii_lowercase, ascii_uppercase, digits\\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\\nimport itertools\\n# from functools import reduce\\n# import operator as op\\n# from scipy.misc import comb # float\\n# import numpy as np \\n\\ndef main():\\n    n, k = [int(x) for x in sys.stdin.readline().split()]\\n    # \u3042\u308b\uff11\u5730\u70b9\u3092\u7d4c\u7531\u3057\u3066\u305d\u308c\u4ee5\u5916\u306e\u5168\u3066\u306b\u3044\u304f\u306e\u304c\u6700\u3082\u591a\u304f\\n    # \u3053\u308c\u306f (n - 1) * (n - 2) // 2\u3000\u901a\u308a\\n    # k\u304c\u3053\u308c\u3088\u308a\u5927\u304d\u3044\u3068\u304d\u306b\u306f\u5b58\u5728\u305b\u305a\u3001\u305d\u308c\u4ee5\u4e0b\u306e\u6642\u306f\u7406\u8ad6\u4e0a\u5b58\u5728\u3059\u308b\\n    if k > (n - 1) * (n - 2) // 2:\\n        print(-1)\\n        sys.exit()\\n        \\n    all_uv = list(itertools.combinations(range(1, n+1), 2))\\n\\n    m = n * (n - 1) // 2 - k\\n    print(m)\\n    # 1\u3092\u4e2d\u592e\u3068\u3057\u3066\u8003\u3048\u3066\u3001\u6700\u4f4e\u96501\u4ee5\u5916\u306en-1\u500b\u306e\u9802\u70b9\u306f1\u3068\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\\n    for u, v in all_uv[:n*(n-1)//2-k]: # k\u306e\u5236\u7d04\u304b\u3089\u3001i\u306e\u6700\u5927\u5024\u306f\u6700\u5c0f\u3067(n-1)-1\u307e\u3067\\n        print(u, v)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "621", "substitutes": {}}
{"code": "n,x = map(int, input().split())\\na = list(map(int, input().split()))\\nans = 0\\nfor i in range(n-1):\\n    if a[i] <= x:\\n        if a[i]+a[i+1] <= x: continue\\n        else:\\n            ans += (a[i]+a[i+1])-x\\n            a[i+1] -= (a[i]+a[i+1])-x\\n    else:\\n        ans += a[i]-x + a[i+1]\\n        a[i], a[i+1] = x, 0\\nif a[-1] > x: ans += a[-1]-x\\nprint(ans)", "target": "76", "substitutes": {"n": ["name", "k", "p", "na", "c", "y", "h", "nc", "num", "en", "net", "o", "ne", "nu", "z", "w", "ny", "l", "u", "nt", "q", "f", "j", "network", "m", "ns", "no", "b", "v", "e", "N", "t", "nb", "an"], "x": ["dx", "s", "wa", "int", "python", "X", "p", "xf", "na", "xs", "c", "g", "xx", "yx", "y", "number", "rx", "ix", "px", "xa", "h", "o", "any", "z", "xt", "ex", "index", "xxxx", "xxx", "w", "cross", "wx", "u", "d", "q", "f", "ax", "m", "none", "ww", "xi", "mx", "null", "v", "b", "xp", "e", "t", "xes", "xy", "xc", "an"], "a": ["aa", "s", "wa", "auto", "sta", "ao", "va", "at", "ma", "code", "active", "p", "na", "ai", "c", "ama", "fa", "aw", "y", "o", "work", "app", "la", "ba", "ab", "au", "array", "ana", "z", "pa", "da", "A", "ar", "w", "ia", "ata", "l", "u", "ace", "sup", "ca", "aaa", "sa", "f", "ac", "ga", "asa", "m", " fa", "area", "aux", "am", "aj", "input", "ae", "data", "alpha", "b", "ea", "v", "e", "ha", "all", "aaaa", "za", "an", "ad"], "ans": ["s", "aid", "ents", "lan", "ras", "cas", "amps", "nas", "ams", "ends", "na", "eps", "ai", "atan", "ats", "gan", "arts", "cases", "results", "anas", "AN", "ads", "aos", "ANS", "anes", "any", "ks", "aces", "ann", "ares", "ani", "ays", "ana", "es", "can", "errors", "ands", " means", "ars", "anned", "anus", "aned", "ations", "ace", "ons", "aus", "works", "ens", "sk", "leans", "anne", "ants", "acs", "ns", "man", "an", "ins"], "i": ["gi", "ih", "s", "k", "ui", "ie", "ei", "int", "ami", "qi", "p", "phi", "ai", "c", "y", "h", "o", "ix", "ini", "iu", "api", "z", "mini", "si", "eni", "index", "yi", "ind", "start", "I", "uri", "l", "it", "u", "d", "pi", "fi", "ki", "j", "io", "f", "m", "cli", "xi", "ori", "di", "ri", "ni", "ci", "isi", "b", "v", "e", "info", "multi", "id", "li", "ii", "source", "anti", "bi", "ti"]}}
{"code": "N = int(input())\\nA = [list(map(int,input().split())) for _ in range(N)]\\nprint(sorted(A)[-1][0] + sorted(A)[-1][1])", "target": "266", "substitutes": {"N": ["F", "Number", "L", "NO", "V", "NN", "Max", "H", "X", "Y", "NC", "NS", "K", "NM", "CNN", "O", "P", "B", "C", "T", "Len", "NP", "D", "Ne", "S", "I", "NT", "Ni", "Z", "Ns", "R", "M", "J", " n", "NA", "n"], "A": ["F", "a", "L", "H", "AS", "X", "Y", "AP", "LA", "AR", "TA", "K", "AN", "AM", "P", "B", "C", "T", "As", "D", "Ar", "AC", "API", "array", "AA", "ASC", "Alpha", "S", "W", "I", "Array", "CA", "U", "R", "Input", "AF", "M", "alpha", "G", "NA"], "_": ["k", "__", "p", "g", " __", "x", "f"]}}
{"code": "s = input()\\n\\nfor i in range(len(s)):\\n    if s[i] == 'A':\\n        st = i\\n        break\\nfor i in range(len(s)-1, -1, -1):\\n    if s[i] == 'Z':\\n        en = i\\n        break\\nprint(en-st+1)", "target": "365", "substitutes": {"s": ["ss", "sq", "strings", "a", "south", "qs", "groups", "ins", "ans", "p", "states", "g", "c", "xs", "steps", "sets", "o", "sl", "r", "ks", "aces", "second", "ows", "si", "es", "search", "blocks", "S", "w", "start", "sb", "tests", "lines", "services", "ses", "parts", "d", "l", "sg", "f", "rs", "sa", "ssl", "m", "cs", "ns", "input", "os", "gs", "b", "v", "string", "ts", "e", "t", "ls", "ips", "ings", "ds", "se", "source", "n"], "i": ["ji", "k", "ui", "a", "ie", "int", "ei", "qi", "p", "phi", "ai", "ic", "c", "oi", "h", "y", "ini", "im", "iu", "lo", "ti", "z", "si", "index", "x", "yi", "image", "ind", "start", "I", "ia", "it", "l", "fi", "u", "pi", "d", "io", "j", "f", "xi", "input", "di", "ci", "v", "b", "e", "t", "iw", "id", "li", "ii", "n", "sky", "ip"], "st": ["ss", "end", "rest", "sc", "sta", "str", "ie", "const", "est", "std", "sl", "sd", "ST", "fe", "sp", "St", "sten", "sth", "ste", "sn", "ind", "start", "sb", "put", "stage", "bl", "src", "sur", "sy", "sa", "sr", "inst", "sw", "ist", "stop", "set", "isi", "ld", "e", "se", "enc", "ast"], "en": ["ss", "sen", "end", "enn", "eden", "EN", "int", "span", "eng", "et", "p", "fin", "hen", "sl", "En", "ine", "net", "ende", "atten", "el", "sten", "z", "eni", "es", "he", "ens", "sw", "fen", "zen", "ess", "set", "isen", "wen", "len", "ian", "e", "enc", "een", "an", "n"]}}
{"code": "N = int(input())\\n\\nans = 0\\nList = []\\nfor i in range(N):\\n    A = int(input())\\n    List.append(A)\\n    \\ndef func(a, b):\\n    ret = 0\\n    for i in range(a, b + 1):\\n        ret += List[i] // 2\\n        if List[i] % 2 and i != b:\\n            List[i + 1] -= 1\\n            ret += 1\\n    return ret\\n\\nleft = 0\\nfor right in range(N):\\n    if List[right] == 0:\\n        ans += func(left, right - 1)\\n        left = right + 1\\n    \\nans += func(left, N - 1)\\n\\nprint(ans)", "target": "455", "substitutes": {"N": ["F", "L", "V", "NN", "H", "NL", "X", "Y", "Size", "Num", "NS", "K", "Na", "Left", "O", "P", "B", "C", "T", "D", "Len", "Ne", "S", "W", "I", "Right", "No", "NT", "Node", "Ni", "Z", "network", "Ns", "R", "M", "J", "NB", " n", "G", "NA", "n"], "ans": ["ano", "s", "int", "lan", "span", "ras", "ins", "nas", "na", "ai", "ats", "Ann", "arts", "activation", "Parts", "anas", "AN", "ANS", "ann", "anon", "anc", "ani", "ana", "art", "es", "can", "outs", "S", "An", "ars", "cross", " means", "args", "aned", "parts", "ons", "ens", "ln", "ants", "ns", "scan", "list", "os", "nl", "len", " Ans", "Scan", "ls", "cons", "plan", "NA", "oss", "part", "an", "n"], "List": ["Out", "Base", "Library", "Table", "Tree", "L", "Layout", "Contents", "Queue", "Obj", "Stack", "Num", "Copy", "Results", "LIST", "Os", "Parts", "Left", "Ring", "Range", "Len", "Int", "St", "Args", " list", "Pool", "lists", "Result", "Layer", "Sl", "Right", "Output", "History", "Li", "Node", "Line", "Data", "Ns", "Array", "Lo", "Set", "Return", "Sel", "list", "Part", "Input", "Cont", "Multi", "Iter", "String", "Win", "Hist", "Scan", "Chain", "Order", "Split", "Index", "Loop", "Ex", "Group", "Long", "Ret"], "i": ["gi", "s", "k", "ui", "end", "int", "ib", "qi", "p", "ai", "c", " I", "y", "o", "r", "ini", "iu", "B", "ti", "z", "si", "index", "x", "ind", "start", "I", "it", "l", "u", "pi", "d", "io", "f", "j", "m", " j", "xi", "ni", "ip", "ci", "v", "e", "id", "li", "ii", "range", "bi", "n"], "A": ["Act", "Ca", "L", "At", "Max", "Num", "Adam", "LA", "Na", "Ha", "AB", "P", "B", "C", "T", "mA", "As", "Ar", "API", "array", "AA", "Alpha", "S", "I", "Ab", "ac", "Array", "CA", "Part", "Input", "alpha", "AF", "M", "G", "Ang", "NA", "an", "ad"], "a": ["aa", "s", "va", "p", "na", "ai", "c", "y", "r", "la", "ba", "ab", "au", "da", "x", "af", "ak", "u", "f", "ca", "sa", "ac", "aj", "am", "ae", "alpha", "an", "n"], "b": ["s", "k", "aa", "be", "ib", "fb", "p", "bs", "bp", "c", "y", "r", "beta", "B", "ba", "ab", "x", "body", "sb", "cb", "l", "u", "d", "bf", "rb", "j", "f", "bd", "null", "abs", "v", "bar", "base", "e", "bc", "nb", "lb", "bi", "n"], "ret": ["alt", "int", " Ret", "arg", "p", "ft", "RT", "success", "al", "err", "opt", "r", "num", "result", "re", "iter", "reg", "ann", "rev", "att", "art", "fit", "x", "rets", "it", "l", "nt", "offset", "j", "f", "sr", "cat", "fun", "back", "Ret", "rt", "len", "t", "det", "id", "val", "feat", "exit", "part", "bit", "RET", "ref", "res", "n"], "left": ["min", "s", "loc", "end", "rest", "L", "leave", "ner", "span", "p", "plus", "c", "o", "pos", "Left", "lo", "split", "x", "partial", "start", "Right", "obj", "l", "d", "max", "ln", "f", "one", "j", "ax", "function", "old", "small", "half", "list", "nl", "len", "all", "le", "inner", "part", "n", "offset"], "right": ["rh", "s", "ack", "k", "middle", "end", "rest", "rights", "third", "X", "argument", "correct", "p", "c", "r", "rew", "first", "ro", "bottom", "art", "index", "x", "w", "start", "reverse", "Right", "obj", "I", "u", "d", "root", "max", "row", "wrong", "j", "ax", "one", "self", "back", "rank", "R", "length", "down", "inner", "range", "next", "n"]}}
{"code": "N, X, Y = map(int, input().split())\\nlst = [0 for i in range(N-1)]\\nfor i in range(1, N+1):\\n    for j in range(i+1, N+1):\\n        k = min(abs(j-i), abs(X-i) + abs(Y-j) + 1)\\n        lst[k-1] += 1\\nfor i in lst:\\n    print(i)", "target": "22", "substitutes": {"N": ["F", "MN", "Nat", "L", "V", "NN", "H", "Q", "Size", "Num", "NS", "NE", "K", "P", "Len", "C", "T", "D", "z", "Ne", "S", "W", "I", "No", "NT", "Node", "Ni", "Z", "Ns", "ND", "R", "J", "M", "NB", " n", "KN", "NA", "n"], "X": ["F", "E", "L", "V", "H", "Q", "XX", "Width", "K", "O", "P", "B", "C", "D", "x", "S", "A", "W", "AX", "I", "TX", "Z", "Data", "XY", "U", "R", "J", "M", "DJ", "G"], "Y": ["F", "YY", "E", "L", "V", "H", "Q", "YC", "K", "y", "O", "P", "B", "C", "T", "D", "x", "S", "A", "W", "NY", "I", "Z", "XY", "Py", "U", "R", "J", "M", "G"], "lst": ["Lbl", "llsts", "llST", "elSt", "llbl", " lsts", "mlstr", "LSt", "elST", " lstr", " lbl", "lstr", "LST", " lST", "lST", " lSt", "mlst", "Lst", "elbl", "llst", "llstr", "lbl", "lSt", "mlsts", "elstr", "mlST", "elst", "lsts"], "i": ["gi", "ji", "ui", "ie", "int", "chi", "qi", "mi", "p", "init", "ai", "c", "y", "r", "h", "o", "iu", "IJ", "z", "si", "eni", "index", "x", "yi", "ind", "I", "uri", "l", "it", "u", "pi", "d", "q", "ki", "io", "f", "m", "xi", "ri", "di", "ni", "ci", "ij", "J", "ip", "v", "b", "key", "e", "zi", "id", "li", "ii", "ik", "n", "bi", "ti"], "j": ["ji", "a", "ie", "ja", "qi", "p", "g", "c", "y", "o", "jj", "ix", "r", "h", "NJ", "IJ", "jl", "JD", "z", "index", "x", "ind", "adj", "I", "l", "u", "uj", "d", "q", "js", "jp", "ax", "Job", "m", "f", "XY", "aj", "ij", "J", "DJ", "v", "b", "JC", "e", "JR", "Index", "li", "ik", "JP", "n"], "k": ["km", "kid", "ke", "p", "g", "c", "K", "o", "r", "y", "h", "ijk", "ks", "kn", "kl", "z", "x", "kw", "ko", "l", "ok", "u", "d", "q", "ki", "sk", "f", "m", "ku", "v", "key", "b", "e", "id", "ik", "n"]}}
{"code": "from collections import defaultdict\\nimport sys\\ninput = sys.stdin.readline\\n\\nN, M = [int(x) for x in input().split()]\\nA = [0] + [int(x) % M for x in input().split()]\\n\\n# \u7d2f\u7a4d\u548c(mod M)\u306b\u5909\u3048\u308b\\nfor i in range(1, N + 1):\\n    A[i] += A[i - 1]\\n    A[i] %= M\\n\\ncandy = defaultdict(int) # default value is 0\\nfor i in range(N + 1):\\n    candy[A[i]] += 1\\n\\nans = 0\\nfor n in candy.values():\\n    ans += n * (n - 1) // 2\\n\\nprint(ans)", "target": "23", "substitutes": {"input": ["error", "call", "raw", "text", "IN", "a", "int", "reader", "request", "method", "enter", "stream", "plus", "enum", "process", "context", "dict", "format", "num", " inputs", "but", "inf", "empty", "temp", "pattern", "array", "image", "current", "initial", "param", " Input", "pull", "null", "output", "parent", "entry", "data", "Input", "bin", "type", "string", "path", "view", "select", "submit", "progress", "source", "config", "form", "draw", "active"], "N": ["F", "E", "L", "V", " O", " number", "Num", " I", " B", "O", "P", "B", "C", "T", "D", " C", "S", "I", "No", "Z", "R", " n", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "MA", "Y", "DM", "K", "number", "NM", "Ms", "O", "MON", "P", "B", "T", "C", "D", "LM", "MD", "S", "W", "I", "Z", "m", "MC", "U", "R", "MS", "MF", "MM", "MT"], "x": ["dx", "full", "ys", "int", "python", "code", "sex", "X", "p", "xxxxxxxx", "tx", "na", "xs", "c", "ext", "i", "xx", "yx", "fx", "y", "number", "lex", "px", "work", "ix", "rx", "h", "nex", "xa", "inf", "z", "xt", "ex", "index", "xxx", "w", "cross", "wx", "u", "d", "hex", "f", "ax", "sw", "ww", "ux", "xi", "xf", "data", "ct", "xp", "v", "t", "e", "xes", "xy", "xc", "bit", "test", "draw", "n"], "A": ["F", "E", "a", "L", "V", "X", "Y", "AR", "K", "O", "P", "B", "C", "T", "D", "mA", "S", "W", "I", "Z", "Array", "U", "R", "alpha", "G"]}}
{"code": "S = input()\\nN = len(S)\\ni = 0\\nwhile N-i >4:\\n    if S[N-i-5:N-i] == \"dream\":\\n        i+=5\\n    elif N-i>6 and S[N-i-7:N-i]==\"dreamer\":\\n        i+=7\\n    elif S[N-i-5:N-i] == \"erase\":\\n        i += 5\\n    elif N-i>5 and S[N-i-6:N-i] ==\"eraser\":\\n        i+=6\\n    else:\\n        break\\n\\nif N == i:\\n    print(\"YES\")\\nelse:\\n    print(\"NO\")", "target": "151", "substitutes": {"S": ["F", "You", "s", "L", "DS", "V", "H", "Q", "X", "SC", "Y", "SE", "Sample", "NS", "SR", "INS", "JS", "K", "Si", "TS", "SH", "ST", "Source", "SI", "Su", "O", "OSS", "P", "T", "B", "C", "D", "SK", "Settings", "Sync", "Session", "A", "W", "Service", "RS", "Sl", "I", "SS", "OS", "Ns", "Set", "Send", "U", "R", "M", "Sign", "String", "SP", "Sin", "SN", "G", "SU", "Socket"], "N": ["F", "MN", "Length", "E", "IN", "L", "End", "V", "All", "Max", "NL", "H", "Q", "X", "Sn", "Y", "Size", "Num", "NS", "NI", " I", "K", "NM", "O", "P", "T", "C", "B", "D", "Len", "Ne", "A", "W", "I", "No", "NT", "Class", "NG", "Min", "Node", "Do", "Line", "Ni", "Z", "In", "Ns", "U", "R", "Part", "Win", "M", "J", "Mon", "Name", "SN", " n", "G", "State", "Wh", "n"], "i": ["gi", "s", "k", "ui", "ie", "int", "chi", "qi", "mi", "p", "phi", "ai", "ic", "c", "init", "oi", "y", "o", "ini", "iu", "api", "mini", "z", "eni", "si", "index", "yi", "x", "mu", "start", "I", "uri", "l", "it", "u", "pi", "j", "io", "adi", "f", "m", "cli", "xi", "di", "ri", "ni", "ci", "isi", "b", "v", "e", "t", "info", "zi", "multi", "id", "li", "ii", "n", "bi", "abi", "ti"]}}
{"code": "from collections import Counter,defaultdict,deque\\nfrom heapq import heappop,heappush,heapify\\nfrom bisect import bisect_left,bisect_right \\nimport sys,math,itertools,fractions,pprint\\nsys.setrecursionlimit(10**8)\\nmod = 10**9+7\\nINF = float('inf')\\ndef inp(): return int(sys.stdin.readline())\\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\\n\\nclass UnionFind():\\n    def __init__(self, n):\\n        self.n = n\\n        self.parents = [-1] * n\\n\\n    def find(self, x):\\n        if self.parents[x] < 0:\\n            return x\\n        else:\\n            self.parents[x] = self.find(self.parents[x])\\n            return self.parents[x]\\n\\n    def union(self, x, y):\\n        x = self.find(x)\\n        y = self.find(y)\\n\\n        if x == y:\\n            return\\n\\n        if self.parents[x] > self.parents[y]:\\n            x, y = y, x\\n\\n        self.parents[x] += self.parents[y]\\n        self.parents[y] = x\\n\\n    def size(self, x):\\n        return -self.parents[self.find(x)]\\n\\n    def same(self, x, y):\\n        return self.find(x) == self.find(y)\\n\\n    def members(self, x):\\n        root = self.find(x)\\n        return [i for i in range(self.n) if self.find(i) == root]\\n        \\n    def roots(self):\\n        return [i for i, x in enumerate(self.parents) if x < 0]\\n\\n    def group_count(self):\\n        return len(self.roots())\\n    \\n    def all_group_members(self):\\n        return {r: self.members(r) for r in self.roots()}\\n\\nn,m = inpl()\\nuf = UnionFind(n)\\ned = [inpl() for _ in range(m)]\\nres = [n*(n-1)//2]\\nfor i in range(1,m)[::-1]:\\n    a,b = ed[i]\\n    a,b = a-1, b-1\\n    if uf.same(a,b):\\n        res.append(res[-1])\\n        continue\\n    res.append(res[-1] - uf.size(a)*uf.size(b))\\n    uf.union(a,b)\\nprint(*res[::-1])", "target": "287", "substitutes": {"mod": ["mode", "magic", "unit", "MOD", "exp", "ms", "mult", "round", "ver", " Mod", "scale", "sim", "module", "mu", "inc", "ind", "cm", "sec", "mag", "fun", "dim", "mods", "util", "complex", "debug", "dec", "xp", "Mod"], "INF": [" INE", " INTE", " INTF", "INP", "inN", "inF", "inP", "INN", " INTN", "inE", " INTP", " INN", " INP", "INE"], "self": ["s", "Self", "false", "event", "plus", "gh", "per", "this", "wrapper", "current", "user", "l", "ctx", "peer", "q", "f", "right", "yes", "co", "us", "private", "data", "type", "dev", "high", "er", "part", "manager", "new", "error", "call", "full", "auto", "cmp", "worker", "go", "host", "load", "h", "public", "pos", "client", "proc", "mp", "ng", "utils", "comp", "node", "child", "hand", "page", "function", "os", "v", "e", "all", "form", "ack", "raw", "spec", "request", "p", "default", "case", "instance", "time", "cache", "now", "only", "ko", "d", "max", "lf", "none", "ns", "resp", "parent", "map", "complete", "graph", "func", "view", "my", "also", "config", "block", "k", "other", "line", "pop", "me", "missing", "g", "c", "err", "context", "work", "results", "app", "we", "game", "shared", "master", "w", "bug", "ok", "remote", "one", "object", "rc", "ws", "no", "base", "filter", "cl", "parse", "home", "ref"], "n": ["name", "k", "s", "mn", "span", "p", "init", "g", "c", "number", "nc", "num", "o", "h", "net", "size", "nu", "ne", "z", "nan", "sn", "node", "w", "l", "u", "d", "cn", "nn", "nt", "max", "j", "network", "f", "ns", "no", "nr", "v", "np", "len", "t", "N", "all", "e", "nit", "dn", "nb", "an"], "parents": ["modules", "strings", "rows", "relations", "children", "names", "Parents", "events", "parts", "ids", "files", "drivers", "docs", "types", "fields", "data", "resources", "origin", "grow", "changes", "comments", "ins", "makers", "settings", "states", "xs", "apps", "projects", "tips", "users", "terms", "position", "depth", "shape", "dates", "tree", "masters", "keys", "stores", "places", "members", "p", "ps", "rules", "values", "codes", "cache", "stack", "properties", "parent", "graph", "plugins", "family", "devices", "levels", "mates", "groups", "workers", "exp", "kids", "results", "models", "history", "tests", "holders", "runners", "ports", "pins", "rates", "features", "roots", "chains", "owners", "test"], "x": ["s", "name", "loc", "int", "com", "rx", "ix", "content", "xt", "l", "ctx", "q", "f", "j", "ux", "ya", "xe", " X", "xp", "xy", "example", "full", "code", "sex", "X", "tx", "ic", "xs", "host", "xx", "yx", "h", "xxxx", "node", "cross", "u", "v", "key", "e", "true", "id", "xc", "python", "p", "z", "ex", "index", "d", "ww", "my", "t", "xes", "on", "dx", "k", "xf", "Y", "g", "c", "o", "work", "px", "num", "xxx", "search", "wy", "w", "wx", "php", "one", "ax", "xi", "xb", "xml", "pe", "xa"], "y": ["yr", "s", "dy", "ie", "ye", "hy", "gy", "X", "p", "Y", "c", "xx", "yx", "o", "ix", "ym", "ay", "z", "ty", "ch", "yi", "yo", "cy", "wy", "w", "ny", "yt", "l", "d", "ish", "q", "j", "io", "sy", "ky", "yes", "xi", "yy", "ya", "oy", "iy", "type", "v", "key", "t", "e", "xy", "py", "vy", "ry", "ey"], "root": ["k", "loc", "end", "p", "g", "err", "c", "h", "rec", "o", "result", "rew", "number", "leaf", "div", "Root", "index", "nil", "node", "child", "nt", "j", "right", "rc", "f", "null", "depth", "parent", "data", "key", "e", "roots", "id", "abc"], "i": ["gi", "ji", "ie", "int", "ei", "qi", "p", "phi", "ai", "ic", "c", "o", "ix", "im", "h", "iq", "iu", "ti", "ab", "z", "si", "index", "yi", "ind", "I", "ia", "l", "u", "pi", "d", "j", "io", "f", "xi", "di", "ri", "ci", "ij", "alpha", "v", "e", "t", "zi", "id", "li", "ii", "bi", "ip"], "r": ["rh", "rr", "k", "mr", "role", " R", "ur", "p", "g", "c", "err", "resource", "rw", "o", "h", "rd", "result", "pr", "re", "lr", "gr", "ro", "w", "l", "rb", "d", "u", "q", "ra", "row", "j", "f", "sr", "rs", "ir", "rc", "rl", "rg", "br", "ri", "R", "v", "pair", "e", "fr", "id", "ru", "er", "range", "nor"], "m": ["s", "mn", "tm", "mi", "p", "ms", "g", "c", "nm", "o", "h", "num", "pm", "md", "z", "mini", "dm", "mu", "w", "om", "cm", "l", "d", "j", "f", "sm", "bm", "M", "v", "dim", "e", "mm", "hm", "mc", "an"], "uf": [" sup", " rc", "mult", "buf", "uc", "au", "oe", "cv", "cb", " succ", "ub", "box", "sup", "job", " ans", "rc", "du", "lib", "fun", "ue", "tu", "aux", "su", "isf", " unions", "util", "ul", " u", "um"], "ed": ["dd", "et", "hed", "ated", "ared", "ions", "ing", "en", "ded", "ged", "linked", "ned", "oned", "es", "reed", "l", "ED", "uned", "d", "fed", "ted", "Ed", "found", "led", "ended", "eds", "rated", "edd", "aed", "e", "red", "er", "eded", "ined", "ad", "ped"], "_": ["k", "p", "g", "h", "num", "l", "f", "list", "t", "all"], "res": ["ans", "arr", "ps", "exp", "rows", "err", "results", "result", "re", "ne", "rev", "ch", "es", "Res", "obj", "max", "ids", "nz", "rc", "us", "os", "data", "rem", "ret", "rs", "sum"], "a": ["aa", "va", "at", "p", "na", "c", "fa", "la", "ba", "ab", "z", "da", "pa", "A", "w", "action", "u", "d", "aaa", "f", "ca", "sa", "ac", "j", "am", "ae", "alpha", "e", "part", "an", "ad"], "b": ["aa", "s", "k", "be", "p", "bs", "g", "c", "beta", "B", "ba", "ab", "z", "A", "sb", "l", "rb", "d", "u", "abb", "f", "j", "v", "e"]}}
{"code": "A, B, C = map(int, input().split())\\n\\nif A<B:\\n    a = A\\n    b = B\\nelse:\\n    a = B\\n    b = A\\n\\n\\nprint('Yes') if a<=C<=b else print('No')\\n", "target": "780", "substitutes": {"A": ["F", "AD", "E", "Ca", "At", "V", "H", "X", "MA", "Y", "AP", "IA", "LA", "AR", "TA", "EA", "K", "BA", "AB", "AM", "AW", "P", "T", "As", "D", "Ar", "AC", "AV", "AA", "S", "AH", "I", "Ab", "PA", "Ma", "CA", "Ant", "U", "AF", "M", "N", "G", "Am", "Ac", "Ad"], "B": ["F", "AD", "E", "EB", "L", "V", "H", "Q", "X", "Y", "UB", "DB", "BA", "AB", "O", "Bu", "P", "T", "D", "SB", "BB", "BC", "AA", "BI", "W", "I", "Ab", "BE", "Z", "OB", "WB", "U", "R", "BS", "M", "BM", "NB", "N", "QB", "G", "BF", "Bs"], "C": ["F", "E", "L", "Cs", "V", "H", "CU", "X", "Q", "Y", "c", "K", "O", "P", "T", "D", "AC", "BC", "S", "W", "CM", "I", "Sc", "Con", "CA", "U", "R", "M", "N", "G", "Ac"], "a": ["aa", "va", "at", "p", "na", "ai", "aw", "c", "fa", "i", "y", "mA", "ba", "ab", "au", "AA", "pa", "da", "x", "ar", "af", "u", "ace", "ca", "sa", "asa", "ga", "ac", "area", "aj", "am", "ae", "alpha", "ada", "an", "ad"], "b": ["s", "k", "be", "aa", "fb", "p", "bs", "bp", "g", "c", "i", "y", "h", "r", "beta", "ba", "ab", "z", "x", "w", "sb", "l", "bh", "bb", "d", "u", "rb", "f", "m", "ac", "bin", "v", "e", "bc", "big", "nb", "bi", "ad", "n"]}}
{"code": "def main():\\n    N = int(input())\\n    p_list = [list(map(int, input().split())) for i in range(N)]\\n\\n    z_list = []\\n    w_list = []\\n    for i in range(N):\\n        x = p_list[i][0]\\n        y = p_list[i][1]\\n        z_list.append(x + y)\\n        w_list.append(x - y)\\n    ans = max(max(z_list) - min(z_list), max(w_list) - min(w_list))\\n    print(ans)\\n    return\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "399", "substitutes": {"N": ["F", "MN", "L", "V", "NN", "H", "Q", "X", "Y", "NC", "Num", "NS", "K", "NM", "CNN", "O", "P", "T", "C", "Len", "D", "B", "Ne", "S", "A", "W", "I", "NT", "Ni", "Z", "Ns", "U", "R", "M", "J", "NA", "n"], "p_list": ["sh_list", "p_size", "pointocl", "po_tree", "pacstr", "pacl", "po_parent", "pointoclist", "pactree", "p_str", "point_list", "pacsize", "po_list", "po_map", "pIPparent", "pocl", "pacparent", "sh_queue", "sh_parent", "p_l", "pIPmin", "p_min", "pIPqueue", "p_map", "pointocsize", "point_str", "sh_min", "p_parent", "poclist", "paclist", "point_size", "point_l", "p_tree", "pocstr", "p_queue", "pacmap", "pointocstr", "pocsize", "pIPlist"], "i": ["gi", "k", "ui", "ie", "int", "qi", "mi", "p", "ai", "c", "ini", "ix", "pos", "iu", "ti", "z", "si", "eni", "index", "yi", "ind", "start", "w", "I", "uri", "l", "u", "pi", "d", "io", "f", "j", "xi", "di", "ni", "ci", "ip", "v", "e", "id", "li", "ii", "n"], "z_list": ["z_l", "zPlists", "zIPlists", "p_group", "ziplists", "zi_list", "zPlist", "z_test", "z_cont", "Z_test", "jPblock", "jPl", "z_base", "Z_list", "zi_lists", "j_lists", "ziplist", "zipmap", "j_block", "j_l", "zPl", "p_l", "z_block", "zIPl", "zi_cont", "zipcont", "z_table", "zIPblock", "z_lists", "zIPlist", "Z_table", "jPlists", "jPlist", "zPblock", "zi_map", "j_list", "z_group", "z_map", "p_base"], "w_list": ["tempenlist", "wacpair", "w_table", "w8base", "ws_test", "w_stack", "tempenstack", "temp_load", "ws_path", "we_queue", "wenload", "w_tree", "we_group", "wenlist", "tempentree", "w9group", "w8list", "tempenload", "w_group", " w_index", "w8group", "w8index", "w_index", "w9list", "w_path", "wentree", "w9index", "w_load", "wenstack", "w_queue", "w_test", "ws_list", "w_pair", "we_table", "temp_tree", "w9base", "w_base", "temp_stack", "wacpath", "temp_list", "waclist", "ws_pair", "we_list", " w_group", "wactest", " w_base"], "x": ["dx", "min", "k", "a", "int", "X", "p", "c", "xx", "yx", "o", "h", "ix", "px", "pos", "rx", "z", "ex", "index", "xxx", "w", "l", "u", "max", "j", "ax", "f", "point", "xi", "data", "v", "b", "t", "e", "xy", "xc", "n"], "y": ["ys", "dy", "ye", "p", "Y", "c", "xx", "o", "h", "z", "zy", "yi", "yo", "cy", "w", "ny", "l", "yt", "u", "d", "q", "yer", "sy", "j", "ky", "m", "yy", "ya", "oy", "yl", "b", "v", "e", "t", "xy", "vy", "isy", "ey", "n"], "ans": ["lan", "ras", "nas", "atan", "na", "gan", "aning", "anas", "AN", "ANS", "anes", "ane", "ann", "anon", "ani", "anc", "annot", "ana", "can", "nan", "An", "anned", "anus", "aned", "chan", "ons", "anan", "aus", "anne", "leans", "sk", "ants", "han", "man", "scan", "ran", "san", "ANN", "an"]}}
{"code": "from itertools import groupby\\n\\n\\ns = input()\\ng = list(groupby(s))\\nprint(len(g) - 1)", "target": "655", "substitutes": {"s": ["strings", "a", "groups", "p", "c", " groups", "i", "sym", "ing", "o", "r", "secondary", "split", "es", "params", "S", "sb", "args", "sites", "l", "lines", "parts", "d", "items", "ses", "sg", "services", "f", "ssl", "m", "sections", "ns", "fields", "gs", "b", "e", "ls", "n"], "g": ["gi", "k", "group", "groups", "msg", "ag", "p", "c", "i", "h", "gc", "gu", "cfg", "ig", "ng", "l", "u", "d", "sg", "gg", "f", "j", "mg", "m", "agg", "ga", "rg", "gs", "b", "gb", "v", "e", "bg", "gm", "G", "n"]}}
{"code": "N,M=map(int,input().split())\\nB=[0]*(N+1)\\nfor _ in range(M):\\n    u,v=map(int,input().split())\\n    B[u]+=1\\n    B[v]+=1\\n\\nfor a in range(1,N+1):\\n    print(B[a])\\n", "target": "180", "substitutes": {"N": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "Size", "Num", "NS", "K", "NM", "O", "P", "C", "T", "D", "Ne", "S", "A", "W", "I", "NT", "Node", "Z", "Ns", "ND", "U", "R", "J", " n", "G", "Mo", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "K", "DM", "RM", "O", "P", "T", "C", "D", "LM", "MD", "S", "W", "I", "MB", "Z", "m", "U", "R", "Mi", "J", "Multi", "G", "Mo", "n"], "B": ["F", "E", "EB", "Number", "L", "LB", "V", "H", "BT", "Q", "X", "Y", "K", "DB", "AB", "O", "P", "T", "C", "D", "BG", "BB", "BI", "S", "A", "W", "I", "Z", "BL", "OB", "WB", "U", "R", "J", "b", "Band", "NB", "VB", "G", "BER", "Block", "Bs"], "_": ["k", " p", "g", " I", "num", " __", " k", "x", "I", "j", " j", "b", " b"], "u": ["k", "ui", "int", "uv", "ur", "p", "c", "i", "o", "y", "un", "iu", "nu", "ou", "x", "A", "cu", "mu", "w", "l", "d", "q", "f", "ut", "m", "up", "us", "U", "su", "lu", "b", "e", "ul", "ru", "uu", "n"], "v": ["s", "k", "ve", "uv", "V", "p", "c", "i", "y", "h", "r", "P", "T", "vs", "z", "x", "w", "l", "d", "q", "f", "j", "iv", "m", "vv", "U", "vt", "b", "tv", "e", "sv", "ii", "vd", "n"], "a": ["aa", " ab", "va", "at", " z", "p", "ai", "c", "i", " ac", "ua", " e", " c", " y", " al", "la", "ba", "ab", "au", "ana", "da", "x", "pa", " af", "A", " ar", " av", " o", " A", "ac", " am", " j", "sa", " an", " sub", "am", "aj", "oa", "alpha", " acc", "ea", "b", " ad", " l", "an", "ad", " d"]}}
{"code": "# input\\nsection = raw_input()\\n\\n# map the height of the section\\nheight = 0\\nheights = [0]\\nfor p in xrange( len(section) ):\\n    if   section[p] == '/':\\n        height += 1\\n    elif section[p] == '\\\\':\\n        height -= 1\\n    heights.append(height)\\n\\n# search the pools\\npools = []\\nwater = []\\np = 0\\nwhile p < len(section):\\n    if section[p] == '\\\\':\\n        try:\\n            pr = heights[p+1:].index( heights[p] )\\n            pools.append([p, p+1+pr])\\n            p = p+1+pr\\n        except:\\n            p+=1\\n    else:\\n        p+=1\\n\\n# count\\nfor pool in pools:\\n    tp = section[pool[0]:pool[1]]\\n    depth = 0\\n    s = 0\\n    for p in xrange( len(tp) ):\\n        if   tp[p] == '/':\\n            depth -= 1\\n        elif tp[p] == '\\\\':\\n            depth += 1\\n            s += 2*(depth-1)+1\\n        else:\\n            s += depth\\n    water.append(s)\\n\\n# print\\nprint sum(water)\\nif len(water) == 0:\\n    print len(water)\\nelse:\\n    print len(water), \" \".join(map(str, water))", "target": "394", "substitutes": {}}
{"code": "import math\\nN,X=map(int,input().split())\\nL=list(map(int,input().split()))\\nL.append(X)\\nL=sorted(L)\\nm=L[1]-L[0]\\nfor i in range(N):\\n  m=math.gcd(m,L[i+1]-L[i])\\nprint(m)", "target": "586", "substitutes": {"N": ["F", "E", "V", "H", "NL", "Q", "Y", "Size", "NE", "K", "O", "Len", "T", "C", "B", "D", "P", "Ne", "S", "A", "W", "I", "Ni", "Z", "U", "R", "M", "J", " n", "G", "Count", "n"], "X": ["F", "E", "V", "H", "Q", "XX", "Y", "XP", "K", "MX", "P", "T", "D", "IP", "x", "PE", "S", "W", "IX", "XXX", "EL", "TX", "Z", "CL", "XY", "U", "R", "M", "J", "XL", "G", "LL", "ML"], "L": ["F", "E", "LB", "V", "LT", "IL", "ML", "NL", "FL", "LS", "Q", "Y", "LA", "dL", "LP", "Lu", "LU", "Local", "O", "P", "LM", "T", "B", "D", "C", "LD", "S", "SL", "W", "I", "l", "EL", "LR", "Li", "LE", "Line", "BL", "RL", "Lo", "CL", "U", "R", "List", "M", "XL", "LI", "DL", "LL", "G", " l", "Long", "UL"], "m": ["s", "k", "mr", "int", "rm", "p", "ms", "g", "c", "nm", "y", "r", "o", "h", "im", "pm", "md", "P", "mean", "z", "x", "fm", "dm", "mu", "w", "cm", "l", "machine", "u", "d", "f", "j", "model", "sm", "bm", "M", "v", "b", "e", "mm", "gm", "hm", "n"], "i": ["gi", "ih", "k", "ui", "int", "ib", "qi", "mi", "p", "phi", "ai", "c", " I", "h", "y", " iP", "ix", "ini", "iu", "ti", "z", "mini", "eni", "si", "index", "x", "ind", "start", " il", "I", "l", "u", "d", "pi", "j", "xi", "di", "ip", "ci", "v", "b", " ii", "e", "il", "multi", "id", "zi", "li", "ii", "part", "bi", "n"]}}
{"code": "n=int(input())\\nc=list(input())\\n\\ncntr=c.count('R')\\n\\ncnt=0\\nfor i in range(0,cntr):\\n  if c[i]=='W':\\n    cnt+=1\\n\\nprint(cnt)", "target": "714", "substitutes": {"n": [" N", "name", "ner", "_", "o", "r", "nc", "net", "ne", "nu", "sn", "conn", "l", "nn", "ln", "j", "ns", "no", "ni", "R", "nr", "t", "N", "pn", "nb"], "c": ["k", "const", "sc", "p", "g", "h", "r", "nc", "ec", "C", "lc", "z", "x", "cache", "cu", "w", "l", "u", "d", "cn", "f", "rc", "cs", "m", "ac", "dc", "ci", "ct", "v", "b", "cf", "t", "e", "count", "cc", "cr", "col", "pc", "xc", "enc"], "cntr": [" countr", "crtr", " cntrs", "countar", "cntar", "contc", " crtrs", "crtar", "contr", "cntrt", "center", "cctc", "crtrs", " countR", "crtrt", "cntrs", " countar", "centr", "countr", "counter", " cntar", "centR", "cntc", " crtc", "crter", "cntR", "crtR", " crtrt", " cntc", "crtc", "cctr", "cctrt", "contrs", " cntR", "contrt", " cntrt", " crtr", "countR", "centar", "cctrs", "cnter", " cnter", " counter"], "cnt": ["ecrt", " cpt", "cpt", "acount", "Ccount", " ccount", "eccount", "ecn", " crt", "Cwd", "Cpt", " cwd", " cct", "cct", "crt", "ccount", " cn", "acnt", "Cnt", "ecnt", "acpt", "cn", " count", "Cn", "acct", "Crt", "ecwd", "count", "Cct", "ecct", "cwd", "Count"], "i": ["gi", "k", "ui", "end", "a", "p", "g", "y", "r", "h", "z", "si", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "f", "io", "j", "xi", "ri", "ci", "v", "e", "col", "id", "li", "ii", "bi", "ti"]}}
{"code": "N = int(input())\\ndic = {}\\nfor i in range(N):\\n    s = str(input())\\n    if s in dic:\\n        dic[s] += 1\\n    else:\\n        dic[s] = 1\\n\\nS = sorted(dic.values())\\nt = S[-1]\\n\\nX = []\\nfor key in dic:\\n    if dic[key] == t:\\n        X.append(key)\\nx = sorted(X)\\n\\nfor i in range(len(X)):\\n    print(x[i])", "target": "750", "substitutes": {"N": ["F", "L", "NO", "V", "H", "Q", "Sn", "Y", "NC", "NS", "K", "Na", "O", "P", "T", "C", "B", "D", "Ne", "I", "NT", "Ni", "Z", "Ns", "R", "M", "J", " n", "G", "NA", "n"], "dic": ["idict", "domict", "dedic", "fIC", "dedics", "Dac", "bict", "ndics", "siac", "ldIC", "dict", "dac", "dedik", "diac", "Dics", "idiac", "Dic", " dict", "datac", "ldict", "ldic", "dik", "dics", "bic", "domics", "idik", "Dict", "Dice", " dIC", "domik", "dice", " dice", "idic", "fict", " dac", "datik", "datic", "fics", "sict", "ndik", "ldics", "dIC", "sics", "fic", "Dik", "dedac", "ndic", " dics", " diac", "bics", "datict", "ndac", "sic", "sik", " dik", "ldice", "bac", "domic"], "i": ["k", "ie", "int", "ei", "chi", "qi", "mi", "p", "ai", "c", "o", "h", "y", "ini", "iu", "z", "si", "eni", "index", "yi", "ind", "start", "I", "l", "u", "d", "pi", "io", "f", "j", "xi", "ri", "ni", "ci", "v", "e", "col", "li", "ii", "bi", "ti"], "s": ["ss", "k", "name", "sq", "spec", "value", "sid", "p", "ps", "g", "c", "sym", "y", "o", "r", "num", "sl", "secondary", "times", "sign", "second", "si", "es", "sn", "w", "sb", "start", "ind", "u", "d", "ses", "sg", "f", "object", "sort", "m", "ns", "single", "v", "sing", "string", "e", "b", "space", "ds", "n"], "S": ["F", "E", "L", "V", "SC", "Y", "Q", "SE", "NS", "K", "Si", "TS", "SH", "SI", "O", "P", "T", "C", "B", "D", "SK", "A", "Sl", "I", "SS", "Z", "Set", "U", "R", "M", "SN", "SU"], "t": ["k", "a", "value", "token", "wt", "tt", "p", "c", "target", "y", "o", "tp", "T", "temp", "ti", "z", "ty", "st", " T", "u", "d", "f", "j", "m", "tip", "M", "ts", "v", "type", "e", "total", "n"], "X": ["F", "ID", "E", "L", "V", "XM", "H", "Q", "XX", "Y", "XP", "EX", "K", "MX", "XT", "ZX", "P", "T", "D", "IP", "PE", "W", "XXX", "IX", "I", "Model", "TX", "Z", "Data", "WS", "Array", "XY", "U", "R", "List", "Content", "Take", "XL", "Location", "Ex", "OX", "Cross", "Key"], "key": ["name", "k", "value", "ie", "str", " string", "ke", "p", "ate", "c", "y", "case", "o", "ix", " c", "item", "section", " k", "sign", "T", "ti", "index", "ind", "w", "KEY", "u", "ace", "root", "q", "shift", "j", "sk", "f", "set", "list", "type", "string", "v", "e", "ice", "keys", " keys", "id", "word", "n", "Key", "ip"], "x": ["k", "L", "p", "Y", "XX", "tx", "xs", "c", "xx", "y", "ix", "T", "z", "array", "ex", "index", "xxx", "w", "cross", "l", "u", "d", "TX", "f", "Z", "ax", "xi", "list", "data", "v", "xml", "e", "xy", "test", "n"]}}
{"code": "class UnionFind:\\n    def __init__(self, num):\\n        self.parent = [-1] * num\\n\\n    def find(self, node):\\n        if self.parent[node] < 0:\\n            return node\\n        self.parent[node] = self.find(self.parent[node])\\n        return self.parent[node]\\n\\n    def union(self, node1, node2):\\n        node1 = self.find(node1)\\n        node2 = self.find(node2)\\n        if node1 == node2:\\n            return\\n        if self.parent[node1] > self.parent[node2]:\\n            node1, node2 = node2, node1\\n        self.parent[node1] += self.parent[node2]\\n        self.parent[node2] = node1\\n        return\\n\\n    def same(self, node1, node2):\\n        return self.find(node1) == self.find(node2)\\n\\n    def size(self, x):\\n        return -self.parent[self.find(x)]\\n\\n    def roots(self):\\n        return [i for i, x in enumerate(self.parent) if x < 0]\\n\\n    def group_count(self):\\n        return len(self.roots())\\n\\n\\nn, m = map(int, input().split())\\n\\nuf = UnionFind(n)\\n\\nfor i in range(m):\\n    a, b = map(int, input().split())\\n    a -= 1\\n    b -= 1\\n    uf.union(a, b)\\n\\nprint(uf.group_count() - 1)\\n\\n", "target": "354", "substitutes": {"self": ["ss", "name", "Self", "s", "false", "driver", "event", "method", "plus", "gh", "per", "this", "eth", "events", "user", "l", "ctx", "root", "q", "ff", "f", "right", "co", "data", "type", "dev", "er", "part", "manager", "new", "error", "full", "worker", "go", "host", "load", "h", "pos", "client", "proc", "ng", "child", "page", "cs", "function", "man", "os", "e", "all", "next", "form", "ang", "raw", "spec", "p", "sys", "r", "case", "instance", "result", "uc", "time", "ch", "cache", "es", "can", "now", "d", "max", "owner", "ns", "resp", "act", "func", "view", "config", "block", "on", "other", "k", "end", "me", "g", "c", "err", "context", "work", "results", "app", "game", "master", "w", "args", "ok", "remote", "one", "object", "ws", "base", "cl", "parse", "home", "org"], "num": ["name", "loc", "end", "common", "dom", "p", "na", "init", "Num", "mon", "umi", "mem", "c", "number", "NUM", "size", "nom", "nu", "coord", "index", "norm", "om", "con", "max", "f", "rank", "lim", "no", "len", "dim", "np", "gen", "count", "multi", "id", "nb", "sum", "um", "offset"], "parent": ["new", "name", "unit", "pool", "value", "line", "device", "static", "level", "school", "host", "element", "target", "instance", "parents", "Parent", "main", "chain", "result", "content", "comment", "client", "seed", "children", "size", "central", "server", "index", "fork", "cache", "memory", "module", "valid", "master", "search", "current", "mother", "connection", "home", "child", "remote", "root", "member", "page", "right", "position", "sort", "point", "model", "port", "function", "null", "depth", "parser", "shape", "list", "option", "graph", "tree", "type", "path", "origin", "source", "part", "block", "family"], "node": ["name", "then", "edge", "anch", "root", "core", "path", "when", "new", "layer", "call", "cmp", "dom", "host", "load", "leaf", "ne", "child", "degree", "member", "nw", "function", "site", "shape", "tree", "key", "all", "id", "source", "default", "link", "index", "ode", "now", "route", "ko", "max", "network", "none", "day", "live", "word", "value", "line", "ed", "location", "post", "seed", "od", "connection", "remote", "nn", "Node", "slave", "one", "object", "null", "no", "home"], "node1": ["route2", "source2", "dayone", "nn01", "stageone", "ode91", "routeone", "stage2", "Node2", "route5", "Node91", " node5", "edge61", "tree61", "stageb", "Node1", "line2", "nnone", "shapeone", "edgeb", "name1", "node3", " node61", "day1", " node0", "nodeb", "ode2", " node3", "ode1", "objectone", "n5", "edge1", "n2", "nameone", "site1", " nodeOne", " nodeone", "NodeOne", " node91", "siteOne", "stage1", "tree3", "Node3", "indexone", "tree1", "day2", "n1", "route1", "object3", "line1", "nn5", "edge3", "node91", "node5", "day5", "name01", "site2", "shape01", "node01", "edgeone", "nn2", "nodeOne", "none", "index3", "name2", "nn1", "object2", "sourceone", "source1", "nodeone", " node01", "routeb", "Nodeone", "shape1", "node0", "edge2", "lineone", "tree2", "index2", "site0", "node61", "object1", "line01", "Node0", "ode3", "index1", "shape2"], "node2": ["connection1", "shapeb", "node256", "core72", " nodeSub", "Node2", " node5", "connection2", "ode256", "versionsecond", "nodeless", "core1", "Node1", "line2", "index256", "seed1", "edge72", "remote2", "versiontwo", "odetwo", "node4", "name1", "ne1", " node0", "Nodeb", " node256", "Nodeless", " nodeless", "node72", "remoteb", "nodeb", "Node4", "ode2", "ode1", "name4", "shape5", "n5", "nodetwo", "edge1", "n2", "nb", " nodeb", "edge82", "indextwo", "NodeSub", "remotetwo", "odeSub", "ode82", "tree72", "tree1", "n1", " nodetwo", "nodeSub", "seed2", "line1", "tree82", "odeless", "node5", "Node82", "seedtwo", "netwo", "shape0", "nodesecond", "name2", "remote1", "ne2", "version2", "seedsecond", " node82", "connectionb", "core82", " nodesecond", "lineb", "shape1", "node0", "node82", "edge2", " node4", "core2", "neb", "tree2", "index2", "ode4", "Node0", "version1", "index1", "shape2"], "x": ["dx", "k", "int", "sex", "rex", "X", "p", "tx", "xf", "xs", "c", "xx", "expl", "y", "lex", "rx", "ix", "px", "z", "xt", "ex", "index", "xxxx", "xxx", "w", "cross", "l", "ctx", "u", "d", "wx", "q", "f", "j", "ax", "xi", "ux", "xb", "xe", "v", "xp", "e", "xes", "xy", "id", "xc", "xa"], "i": ["gi", "ji", "k", "ie", "int", "ei", "p", "phi", "ai", "ic", "c", "o", "y", "ix", "im", "iu", "ti", "z", "si", "index", "ind", "I", "ia", "u", "pi", "d", "j", "io", "f", "ir", " j", "xi", "di", "ri", "ci", "ij", "v", "e", "ice", "count", "zi", "id", "li", "ii", "ip"], "n": ["k", "span", "p", "g", "c", "y", "o", "r", "en", "pos", "size", "nu", "ne", "z", "conn", "l", "u", "d", "nn", "f", "j", "network", "ns", "ni", "v", "e", "N", "nb"], "m": ["s", "mode", "mn", "rm", "mi", "p", "ms", "g", "c", "nm", "y", "r", "o", "h", "pm", "mini", "dm", "l", "d", "mo", "f", "j", "bm", "man", "am", "M", "v", "dim", "e", "mm", "wm", "mc", "um"], "uf": ["NF", " surf", "uber", "ur", "ffff", "fb", "fff", "pb", "fp", " buf", "sf", "cp", "FF", "buf", "tf", "uff", "ab", "uc", "utils", " fed", "af", "cv", "cb", "buff", "obj", "fi", "rb", "ub", "bf", "fed", "GF", "buffer", "ff", "sup", "f", "DF", "rc", "lf", "du", "df", "aux", "ref", "gb", "zip", "raf", "TF", "cf", "UF", "ul", "former", "front", " buff", "ef", "feed", "uffy"], "a": ["aa", "s", "va", "ma", "p", "ai", "c", "ama", "fa", "o", "r", "api", "la", "ba", "ab", "ana", "da", "pa", "A", "ia", "u", "d", "ca", "sa", "f", "ac", "ga", "asa", "area", "am", "aj", "ae", "alpha", "ea", "e", "an", "ad"], "b": ["s", "k", "ib", "p", "bs", "g", "c", "pb", "y", "o", "r", "wb", "mb", "api", "bis", "B", "ba", "ab", "sb", "cb", "bug", "l", "ob", "bb", "d", "bf", "rb", "u", "ub", "f", "j", "db", "v", "e", "bc", "nb", "lb", "bi"]}}
{"code": "N, A, B = map(int, input().split())\\nS = input()\\n\\nac_count = 0\\nac_b_count = 0\\nfor s in S:\\n    if ac_count < A + B:\\n        if s == 'a':\\n            print('Yes')\\n            ac_count += 1\\n\\n        elif s == 'b' and ac_b_count < B:\\n            print('Yes')\\n            ac_count += 1\\n            ac_b_count += 1\\n\\n        else:\\n            print('No')\\n    else:\\n        print('No')", "target": "724", "substitutes": {"N": ["F", "E", "L", "V", "NN", "Y", "NS", "K", "AN", "O", "P", "T", "C", "D", "W", "I", "No", "Z", "Ns", "R", "M", "J", " n", "G", "NA", "n"], "A": ["F", "E", "a", "L", "V", "H", "AS", "AI", "X", "Y", "Q", "LA", "AR", "K", "AN", "AB", "O", "AH", "P", "C", "ASC", "AC", "As", "D", "mA", "AA", "W", "I", "CA", "U", "M", "G", "NA", "Ac", "An"], "B": ["F", "E", "L", "V", "BT", "Q", "X", "Y", "UB", "CB", "PB", "DB", "BA", "AB", "O", "P", "C", "T", "D", "SB", "BB", "W", "I", "Z", "WB", "U", "R", "BS", "GB", "M", "b", "G", "BF", "Bs", "n"], "S": ["F", "E", "L", "Cs", "V", "H", "SC", "SF", "SE", "SR", "NS", "Si", "K", "TS", "SH", "SI", "O", "P", "T", "C", "D", "SB", "W", "I", "SS", "Sc", "Z", "Ns", "CS", "U", "R", "Input", "M", "SM", "SN", "G"], "ac_count": ["ac8type", "ac2num", "ac_f", "ac6list", "acc_f", "ac2type", " ac_length", "ac8check", "acc_key", "ac____sum", "ac_check", "acc_number", "ac_size", "ac_list", " ac_type", "acfsum", " ac_num", "ac2list", "acc_size", "ac2check", "ac6check", "ac2length", "ac_sum", "acfcount", "ac____f", "acacnumber", "ac2count", "ac6type", " ac2count", "ac2sum", "acfkey", "ac____count", " ac2type", "ac_key", " ac_check", "ac_length", "acff", "acaccount", "ac_number", "ac____key", " ac2list", "acacsum", "acacsize", "ac8count", "ac8list", " ac2check", "acc_count", " ac_list", "ac_type", "acc_sum", "ac_num", " ac_sum", "ac6count"], "ac_b_count": ["ac_f_col", "ac_b64sum", "ac_b__c", "ac_a_base", "ac_b_col", "ac_b_c", "ac_f_sum", "ac_b64size", "ac_b_base", "ac_b_num", "ac_b_sum", "ac_a_count", "ac_b64col", "ac_a_sum", "ac_f_size", "ac_f_count", "ac_b__num", "ac_a_c", "ac_a_num", "ac_b_size", "ac_b__sum", "ac_b__count", "ac_b64count"], "s": ["ss", "name", "sq", "a", "sid", "groups", "ans", "states", "ps", "side", "p", "c", "sys", "sym", "ats", "g", "sets", "o", "sl", "case", "sd", "sf", "fs", "conf", "size", "si", "sb", "sites", "args", " signs", "ses", "u", "sg", "f", "sy", "sa", "sw", "ns", "ments", "site", "ws", "sch", "su", "os", "features", "gs", "b", "ts", "ings", "t", "ops", "its", "n"]}}
{"code": "import sys, bisect, math, itertools, heapq, collections\\nfrom operator import itemgetter\\n# a.sort(key=itemgetter(i)) # i\u756a\u76ee\u8981\u7d20\u3067sort\\nfrom functools import lru_cache\\n# @lru_cache(maxsize=None)\\nsys.setrecursionlimit(10**8)\\ninput = sys.stdin.readline\\nINF = float('inf')\\nmod = 10**9 + 7\\neps = 10**-7\\n\\n\\ndef inp():\\n    '''\\n    \u4e00\u3064\u306e\u6574\u6570\\n    '''\\n    return int(input())\\n\\n\\ndef inpl():\\n    '''\\n    \u4e00\u884c\u306b\u8907\u6570\u306e\u6574\u6570\\n    '''\\n    return list(map(int, input().split()))\\n\\n\\nclass combination():\\n    def __init__(self, mod):\\n        '''\\n        mod\u3092\u6307\u5b9a\u3057\u3066\u521d\u671f\u5316\\n        '''\\n        self.mod = mod\\n        self.fac = [1, 1]  # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\\n        self.ifac = [1, 1]  # \u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\\n        self.inv = [0, 1]  # \u9006\u5143\u8a08\u7b97\u7528\\n\\n    def calc(self, n, k):\\n        '''\\n        nCk%mod\u3092\u8a08\u7b97\u3059\u308b\\n        '''\\n        if k < 0 or n < k:\\n            return 0\\n        self.make_tables(n)  # \u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\\n        k = min(k, n - k)\\n        return self.fac[n] * (self.ifac[k] * self.ifac[n - k] %\\n                              self.mod) % self.mod\\n\\n    def make_tables(self, n):\\n        '''\\n        \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u30fb\u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\\n        '''\\n        for i in range(len(self.fac), n + 1):\\n            self.fac.append((self.fac[-1] * i) % self.mod)\\n            self.inv.append(\\n                (-self.inv[self.mod % i] * (self.mod // i)) % self.mod)\\n            self.ifac.append((self.ifac[-1] * self.inv[-1]) % self.mod)\\n\\n\\nmod = 998244353\\ncomb = combination(mod)\\nn, m, k = inpl()\\nif m == 1:\\n    if k >= n - 1:\\n        print(1)\\n        exit()\\n    else:\\n        print(0)\\n        exit()\\nans = 0\\nfor i in range(min(n, k + 1)):\\n    ans += m * pow(m - 1, n - 1 - i, mod) * comb.calc(n - 1, i) % mod\\n    ans %= mod\\nprint(ans)\\n", "target": "375", "substitutes": {}}
{"code": "w = input().lower()\\ntext = ''\\nwhile True:\\n    t = input()\\n    if t == 'END_OF_TEXT':\\n        break\\n    text += t.lower() + ' '\\nprint(len([t for t in text.split(' ') if t == w]))", "target": "142", "substitutes": {"w": ["wn", "wa", "wt", "wp", "tw", "win", "words", "p", "width", "rw", "o", "y", "r", "we", "wb", "wh", "temp", "week", "wal", "x", "ew", "kw", "W", "wx", "u", "q", "nw", "sw", "ww", "ws", "wl", " W", "v", "wu", "iw", "word", "n"], "text": ["name", "letter", "end", "cut", "int", "code", "ext", "opt", "c", "i", "width", " TEXT", "Text", "sect", "cont", "log", "section", "txt", "left", "T", "contract", "temp", "pattern", "xt", "x", "st", "current", "it", " T", "nt", "label", "out", "ut", "TEXT", " Text", "input", "check", "length", "ct", "complete", "path", "string", "ect", "word", "inner", "prefix", "config", "form", "test"], "t": ["ott", "name", "letter", "token", "int", "at", "wt", "typ", "str", "tt", "tw", "p", "et", "g", "c", "i", "tim", "y", "o", "h", "r", "ot", "txt", "pt", "T", "tf", "temp", "ti", "xt", "art", "x", "ont", "ent", "l", " T", "u", "d", "nt", "ta", "out", "f", "dt", "j", "title", "m", "ut", "input", "te", "ct", "type", "v", "b", "ts", "qt", "e", "letters", "lt", "word", "test", "total", "n"]}}
{"code": "N = int(input())\\nl = [2,1]\\nif N  == 1 :\\n    print(l[1])\\n    exit()\\nfor i in range(2,N+1) :\\n    l.append(l[i-2] + l[i-1])\\nprint(l[-1])", "target": "50", "substitutes": {"N": ["F", "E", "Number", "L", "V", "NL", "H", "Sn", "X", "Q", "Y", "NC", "Size", "Num", "NS", "NE", "NI", "K", "Na", "O", "P", "T", "C", "B", "D", "Len", "NH", "Ne", "S", "I", "NT", "Ni", "Z", "Ns", "R", "M", "J", "NB", " n", "G", "NA", "Count", "n"], "l": ["lp", "s", "layer", "loc", "k", "ol", "L", "p", "g", "c", "ly", "o", "r", "sl", "log", "like", "el", "left", "la", "lo", "lc", "kl", "x", "u", "ll", "dl", "ln", "f", "j", "m", "rl", "list", "nl", "fl", "b", "v", "t", "ls", "e", "le", "il", "li", "ul", "n"], "i": ["gi", "k", "end", "a", "int", "qi", "p", "phi", "ai", "c", "y", "r", "ini", "iu", "ti", "z", "mini", "si", "index", "x", "ind", "start", "I", "u", "d", "pi", "q", "f", "j", "m", "xi", "ri", "di", "ip", "ci", "v", "b", "e", "id", "li", "ii", "part", "bi", "n"]}}
{"code": "a,b = map(int,input().split())\\nprint(['P','Imp'][all([a%3>0,b%3>0,(a+b)%3>0])]+'ossible')", "target": "635", "substitutes": {"a": ["s", "k", "aa", "int", "p", "qa", "ai", "c", "i", "y", "la", "ba", "mA", "ab", "z", "au", "art", "da", "x", "index", "pa", "A", "af", "w", "l", "u", "d", "sup", "f", "sa", "ca", "asa", "ac", "m", "j", "area", "aux", "aj", "am", "ae", "alpha", "e", "abc", "an", "ad", "n"], "b": ["s", "k", "ib", "fb", "p", "bs", "bp", "g", "c", "i", "y", "h", "r", "beta", "B", "ba", "ab", "z", "x", "sb", "l", "bb", "d", "rb", "u", "f", "j", "eb", "m", "db", "v", "base", "e", "bc", "abc", "nb", "lb", "bi", "n"]}}
{"code": "N = int(input())\\nT = list(map(int, input().split()))\\nM = int(input())\\n\\nAns = []\\n\\nfor _ in range(M):\\n    P,X = map(int, input().split())\\n    Ans.append(sum(T) - T[P-1] + X)\\n\\nfor ans in Ans:\\n    print(ans)", "target": "730", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "Q", "Y", "NC", "NS", "NI", "K", "O", "B", "C", "D", "NP", "S", "NT", "Z", "Ns", "R", "J", " n", "G", "NA", "n"], "T": ["F", "TP", "E", "L", "V", "LT", "H", "Q", "Y", "TA", "K", "Test", "TS", "TN", "O", "C", "B", "D", "TR", "TG", "S", "DT", "A", "W", "I", "NT", "UT", "TX", "TM", "Z", "TT", "U", "R", "t", "WT", "MT", "Ts", "G", "PT", "GT"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "Y", "MI", "K", "DM", "MX", "O", "MON", "C", "B", "D", "LM", "S", "W", "CM", "I", "Z", "m", "U", "R", "J", "MM", "G", "MO"], "Ans": ["annp", "AnS", "annt", "Enp", " Anv", " Anp", "ANv", "Annp", " Ands", " Anos", "Ars", "Anos", "Aros", "Ent", "Annv", "ArS", "ANns", "Anv", " Anc", "Arc", "anns", "Annos", "Annns", "Anns", " AnS", "Anp", "ANs", "Ens", " Ant", "Ant", "ANp", "Ends", "AnnS", " Anns", "annds", "Ands", "Anc", "Annc"], "_": [" I", " row", " time", " __", " line", " k", " q", "I", " count", " j", " col"], "P": ["F", "TP", "PI", "E", "PO", "L", "V", "H", "Q", "p", "Y", "K", "PM", "O", "C", "B", "D", "NP", "S", "A", "PP", "W", "I", "PA", "PK", "U", "R", "CP", "J", "G"], "X": ["F", "E", "L", "V", "XM", "H", "Q", "XX", "Y", "XP", "K", "XT", "O", "C", "D", "x", "S", "A", "W", "IX", "I", "TX", "Z", "U", "R", "J", "XL", "G"], "ans": [" ants", "int", "annis", "nas", "ras", "amps", " span", " aval", " sc", " ann", "ats", " ac", " seq", "AN", "urs", "ANS", "asts", "ks", " al", "ann", "anc", "annot", "x", "asin", " af", " sk", "ind", " il", "rams", " ar", "aned", "ace", "nt", "ons", "aus", "ens", " A", " ax", "cs", "ants", "atches", "acs", " aid", " acc", "ls", "olds", "ds", "oss", "an", "ins"]}}
{"code": "li = list(map(int,input().split()))\\nsu = sum(li)\\nma = max(li)\\n\\nif su%2 == ma%2:print(int((ma*2-(su-ma))/2))\\nelse:print(int(((ma+1)*2-(su-ma)+1)/2))", "target": "107", "substitutes": {"li": ["lp", "loc", "vi", "elt", "chi", "lic", "ai", "lie", "ly", "i", "lla", "sl", "lis", "ini", "el", "la", "lc", "ti", "mini", "si", "l", "pl", "Li", "ili", "pi", "dl", "cli", "di", "ni", "list", "ci", "lu", "len", "LI", "ls", "lt", "le", "ii", "ul", "lin", "bi", "lo"], "su": ["ss", "s", "ui", "wa", "sq", "spec", "sta", "sc", "me", "na", "fa", "sl", "use", "sie", "Su", "ima", "mas", "la", "nu", "au", "si", "pa", "ho", "ste", "cu", "so", " Su", "u", " se", "ta", "ra", "sup", "pu", "sa", "sel", "asa", "ess", "tu", " sa", "up", "lu", "sing", "suit", "sem", "pe", "se", "sv", "ru", "SU", "sum", "eu"], "ma": ["ss", "min", "wa", "mad", "a", "sta", "va", "me", "MA", "na", "qa", "ms", "ama", "fa", "sd", "ima", "mas", "md", "la", "mp", "au", "si", "pa", "da", "ia", "meta", "ee", "max", "mma", "ta", "Ma", "ra", "ca", "sa", "asa", "ga", "m", " sa", "area", "ema", "ci", "alpha", "ea", "ha", "pe", "mm", "se", "mc", "ada"]}}
{"code": "X,Y = map(int,input().split())\\nif  X == Y:\\n  print(-1)\\n  exit()\\nif X > Y and X % Y == 0:\\n  print(-1)\\n  exit()\\nfor x in range(X,10**18+1,X):\\n  if x % Y != 0:\\n    print(x)\\n    exit()", "target": "396", "substitutes": {"X": ["F", "PI", "Length", "E", "ID", "Tx", "YY", "L", "CE", "XXXX", "V", "XM", "H", "DX", "Q", "XX", "XP", "K", "y", "MX", "ZX", "FF", "P", "T", "C", "Int", "D", "IP", "PE", "A", "W", "XXX", "IX", "I", "TX", "Z", "MAX", "WS", "XY", "U", "Time", "M", "XL", "N", "G", "Ex"], "Y": ["yr", "F", "YY", "E", "L", "dy", "V", "Python", "YES", "Q", "XX", "Size", "YN", "ey", "YC", "Ay", "y", " y", "Yes", "YA", "Cy", "B", "P", "C", "T", "IP", "D", "Yu", "Ray", "Year", "YR", "cy", "A", "W", "NY", "XXX", "EY", "I", "TY", "MY", "Z", "YE", "OW", "YP", "XY", "Py", "U", "AY", "Time", "oy", "J", "M", "N", "Col", "HY", "Long", "Count"], "x": ["dx", "Tx", "a", "int", "xf", "tx", "event", "xs", "XP", "p", "i", "xx", "c", "fx", "y", "rx", "num", "px", "ix", "XX", "z", "xt", " xx", "xxx", "index", "ex", "w", "wx", "u", "max", "f", "ax", "xi", "xp", "v", "pair", "XL", "e", "xy", "xc", "n", "xxxxxxxx"]}}
{"code": "a=list(map(int,input().split()))\\na=sorted(a)\\nd=str(a[2])+str(a[1])\\nprint(int(d)+a[0])", "target": "627", "substitutes": {"a": ["aa", "s", "auto", "int", "va", "span", "ma", "ans", "p", "na", "ai", "g", "aw", "c", "i", "ama", "fa", "eta", "y", "z", "array", "div", "da", "pa", "x", "ce", "A", "ar", "now", "action", "args", "l", "u", "aaa", "f", "ca", "sa", "ac", "ga", "m", "area", "aux", "input", "aj", "am", "ae", "data", "alpha", "b", "v", "ea", "e", "ha", "za", "an", "ad", "n"], "d": ["dx", "name", "dd", "dy", "dh", "fd", "p", "c", "i", "dat", "y", "sd", "D", "z", "da", "diff", "daily", "l", "u", "do", "f", "j", "dt", "bd", "m", "dc", "day", "data", "db", "v", "b", "e", "t", "ds", "id", "dn", "ad", "n"]}}
{"code": "def LI():\\n    return list(map(int, input().split()))\\n\\n\\nN, M = LI()\\nx = M//N\\nfor i in range(x, 0, -1):\\n    if M % i != 0:\\n        continue\\n    ans = i\\n    break\\nprint(ans)", "target": "163", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "H", "Q", "X", "Y", "NS", "K", "AN", "O", "P", "B", "C", "T", "D", "S", "A", "W", "I", "Z", "m", "Ns", "U", "R", "J", " n", "G", "n"], "M": ["F", "MN", "E", "L", "V", "Q", "X", "MA", "Y", "K", "MX", "NM", "O", "P", "T", "LM", "B", "D", "C", "MD", "S", "W", "I", "Z", "m", "MC", "U", "R", "Mi", "J", "MS", "MF", "MM", "MT", "G", "n"], "x": ["int", "X", "p", "Y", "xs", "c", "xx", "y", "h", "number", "ix", "num", "pos", "rx", "size", "z", "ex", "index", "xxx", "w", "d", "max", "f", "Z", "ax", "j", "m", "shape", "no", " X", "e", "xes", "every", "n"], "i": ["gi", "a", "ei", "int", "chi", "p", "phi", "ai", "init", "c", " I", "oi", "y", "h", "o", "ini", "iu", "iter", "lo", "ti", "z", "mini", "si", "index", "ind", "start", "I", "l", "d", "pi", "j", "f", "io", "IO", "m", "ignore", "II", "xi", "di", "ip", "ci", "v", "b", "e", "LI", "multi", "id", "li", "ii", "n"], "ans": [" lines", "ents", "lan", "cas", "eps", "na", "ms", "ions", "anas", "AN", "ANS", "ks", "la", "aces", "ann", " errors", "anc", "cycles", "annot", "ana", "can", "outs", " means", "nan", "ars", " scans", "aned", "ons", "ids", "works", "cs", "ants", "ns", "man", "ases", "ls", "cons", "plan", "ops", " cases", "an", "ins"]}}
{"code": "input_str = input() # ARC or ABC\\nif input_str == 'ARC':\\n  print('ABC')\\nelse:\\n  print('ARC')", "target": "510", "substitutes": {"input_str": ["input_arr", "empty_br", "input_br", "empty_arr", "empty_str"]}}
{"code": "import math\\nfrom functools import reduce\\n\\nn, x = map(int, input().split())\\na = list(map(int, input().split()))\\na.append(x)\\na.sort()\\n\\nl = []\\nfor i in range(n):\\n    l.append(a[i+1] - a[i])\\n\\ndef gcd_list(numbers):\\n    return reduce(math.gcd, numbers)\\n\\nprint(gcd_list(l))\\n\\n", "target": "586", "substitutes": {"n": [" N", "k", "p", "na", "g", "c", "y", "r", "o", "num", " c", "axis", "h", "nc", "number", "size", "z", "index", "nan", "sn", "w", " ng", "d", "u", "j", "m", "ns", "v", "b", "t", "N", "count", "e", "nb"], "x": ["dx", "int", "X", "p", "xs", "c", "xx", "y", "rx", "ix", "z", "array", "ex", "xxx", "index", "w", "u", "d", "q", "f", "m", "xi", "input", "v", "xp", "b", "e", "t", "xes", "xy", "xc"], "a": ["aa", "s", "wa", "sta", "va", "at", "ma", "ans", "p", "na", "g", "c", "aw", "y", "o", "la", "ba", "ab", "au", "array", "da", "ar", "A", "args", "ata", "u", "aaa", "ca", "f", "sa", "ac", "m", "area", "aj", "am", "input", "list", "oa", "alpha", "ae", "b", "ea", "e", "an", "ad"], "l": ["lp", "ol", "L", "p", "al", "g", "c", "o", "sl", "y", "el", "la", "lc", "kl", "z", "array", "lines", "u", "pl", "d", "ll", "dl", "ln", "f", "rl", "list", "nl", "wl", "fl", "b", "v", "e", "ls", "t", "ul", "li"], "i": ["gi", "ji", "k", "ui", "end", "int", "qi", "mi", "p", "ai", "c", "y", "num", "ix", "ini", "iu", "ti", "z", "si", "index", "yi", "ind", "start", "I", "u", "pi", "d", "j", "f", "xi", "di", "ni", "v", "b", "t", "e", "multi", "id", "li", "ii"], "numbers": ["cumbers", "Nums", "tels", "godes", "dumbers", "nels", "tumbers", "nums", "Numbers", "tums", "codes", "dels", "dumeric", "numeric", "Numeric", "gums", "cels", "tumeric", "gumeric", "cums", "Nodes", "nodes", "gumbers", "dums", "cumeric"]}}
{"code": "print(int(input())+1>>1)", "target": "748", "substitutes": {}}
{"code": "s = list(input())\\nif len(s) < 4:\\n    print('No')\\n    exit()\\n\\nif s[0] == 'Y' and s[1] == 'A' and s[2] == 'K' and s[3] == 'I':\\n    print('Yes')\\nelse:\\n    print('No')", "target": "27", "substitutes": {"s": ["k", "a", "strings", "qs", "groups", "ins", "p", "states", "ps", "g", "c", "sym", "i", "steps", "xs", "sets", "o", "y", "ks", "sign", "ows", "es", "blocks", "S", "w", "sb", "tests", "args", "sites", "parts", "services", "l", "d", "lines", "ses", "sg", "js", "f", "ssl", "m", "ns", "ws", "input", "os", "abs", "gs", "b", "ts", "string", "v", "e", "ls", "t", "comments", "n"]}}
{"code": "X, Y, Z = map(int, input().split())\\n\\nsum = 0\\n\\nfor i in range(1,X):\\n    if sum > X:\\n        ans = i-2\\n        break\\n    if sum == X:\\n        ans = i-1\\n        break\\n    else:\\n        sum = Y*i+Z*(i+1)\\n\\nprint(ans)\\n", "target": "101", "substitutes": {"X": ["F", "PI", "CT", "CE", "L", "XXXX", "V", "H", "Q", "XX", "XP", "xx", "K", "FF", "Zero", "P", "T", "C", "IP", "x", "PE", "S", "A", "W", "SIZE", "IX", "XXX", "I", "max", "TX", "MAX", "WS", "U", "R", "length", "OK", "M", "CC", "XL", "N", "Xi", "CR"], "Y": ["YY", "E", "L", "V", "Python", "Q", "XX", "YC", "K", "y", "O", "YA", "Cy", "T", "C", "B", "D", "P", "Zip", "S", "A", "W", "NY", "I", "TY", "MY", "XY", "Py", "U", "J", "M", "N", "G"], "Z": ["F", "YY", "L", "V", "H", "Q", "XX", "K", "ZX", "FF", "Zero", "P", "T", "B", "C", "D", "z", "S", "IZ", "Zen", "W", "A", "I", "ZZ", "Zone", "XY", "U", "R", "M", "ZI", "J", "N", "G", "ZE", "ZA"], "sum": ["mass", "min", "ss", "unit", "chi", "use", "num", "comment", "SI", "weight", "sign", "mean", "size", "ann", "scale", "si", "index", "sim", "can", "cost", "ind", "pack", "ass", "u", "cal", "max", "sup", "sk", "sort", "fat", "sa", "mask", "shape", "am", "su", "average", "alpha", "match", "bin", "summary", "us", "count", "Sum", "all", "add", "mix", "skip", "val", "ul", "parse", "SU", "an", "um", "total"], "i": ["gi", "s", "a", "int", "chi", "p", "phi", "ai", "c", "y", "num", "ini", "ix", "iu", "ti", "z", "mini", "si", "index", "x", "sim", "mu", "ind", "start", "I", "u", "pi", "j", "io", "f", "m", "xi", "di", "ni", "ci", "alpha", "hi", "v", "zi", "id", "li", "ii", "bi", "n"], "ans": ["ss", "ums", "ain", "lan", "span", "nas", "cas", "eps", "ras", "atan", "na", "offs", "ai", "anas", "AN", "ANS", "ann", "anse", "ani", "cus", "errors", "ana", "can", "sim", "nan", "ars", "anus", "aned", "atts", "gram", "sk", "cs", "trans", "acs", "ns", "man", "scan", "us", "ran", "os", "san", "ls", "add", "plan", "ops", "sam", "oss", "an", "ins"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\na1, a2 = [],[]\\nfor index, i in enumerate(a, start=1):\\n  if index % 2 == 0:\\n    a2.append(i)\\n  else:\\n    a1.append(i)\\n\\nans = []\\nif n % 2 == 0:\\n  ans = a2[::-1] + a1\\nelse:\\n  ans = a1[::-1] + a2\\n\\nprint(\" \".join(str(i) for i in ans))", "target": "601", "substitutes": {"n": ["s", "k", "span", "p", "na", "c", "o", "number", "nc", "en", "y", "un", "size", "ne", "z", "on", "fn", "sn", "l", "nn", "nt", "f", "j", "m", "ns", "no", "ni", "b", "e", "N", "pn", "nb", "an"], "a": ["s", "aa", "span", "p", "na", "ai", "c", "la", "ab", "array", "ana", "x", "ar", "A", "af", "w", "args", "l", "parts", "d", "ca", "sa", "m", "ga", "ants", "ac", "area", "am", "ae", "alpha", "b", "e", "an", "ad"], "a1": ["alpha11", "A5", "A1", " a0", "p3", " aone", "aone", "an5", "p11", "a11", "a9", "an0", "alpha1", "p0", "an1", "an2", "A0", "A2", "alpha3", "pone", "a0", "p1", " a5", " a3", "p2", "alpha9", "a5", "anone", " a9", "alphaone", "p9", "a3", " a11", "alpha2"], "a2": ["a32", "am2", "A1", " a0", "an02", "gaall", "an5", "am5", " a02", "alpha32", "ga1", "an0", "an32", " aall", "alpha1", "aall", "gatwo", "an1", "A2", "an2", "Aall", "alpha0", " atwo", "a0", "ga2", "atwo", "a5", "alpha5", "am1", " a32", "am0", "alpha02", "Atwo", "a02", "alpha2"], "index": ["ion", "name", "value", "int", "level", "element", "number", "ini", "num", "item", "axis", "pos", "ix", "section", "iter", "size", "si", "x", "image", "ind", "start", "action", "f", "position", "point", "xi", "length", "alpha", "key", "len", "count", "Index", "id", "offset"], "i": ["gi", "ji", "k", "ui", "ie", "int", " it", "ali", "p", "ai", "c", " I", "y", "o", " iP", "ini", "ix", "iu", "slice", "ti", "ani", "z", "si", "eni", "x", "yi", "ind", "start", " il", "I", "it", "l", "u", "pi", "j", "f", "io", " j", "xi", "di", "ri", "ip", "ij", "isi", "key", "v", "b", "e", "il", "id", "li", "ii", "an", "bi", "info"], "ans": ["s", "ents", "lan", "span", "nas", "ras", "amps", "ams", "cas", "na", "ai", "xs", "ats", "aning", "anas", "aos", "AN", "ANS", "anes", "any", "ks", "aces", "names", "ann", "anon", "ani", "anc", "vs", "ana", "es", "can", "nan", " means", "A", "ars", "anned", " scans", "aned", "lines", "ons", "leans", "cs", "ants", "ns", "ases", "acts", "actions", "ls", "an", "ins"]}}
{"code": "N,M = map(int,input().split())\\n\\npath = [[] for i in range(N)]\\n\\nfor _ in range(M):\\n\ta,b = map(int,input().split())\\n\tpath[a-1].append(b-1)\\n\tpath[b-1].append(a-1)\\nvis = [0 for i in range(N)]\\ncnt = 0\\n\\ndef dfs(now,depth):\\n\tglobal cnt\\n\tif depth == N: cnt+=1\\n\tfor new in path[now]:\\n\t\tif vis[new] == 0:\\n\t\t\tvis[new] = 1\\n\t\t\tdfs(new,depth+1)\\n\t\t\tvis[new] = 0\\n\\nvis[0] = 1\\ndfs(0,1)\\nprint(cnt)\\n", "target": "143", "substitutes": {"N": ["F", "MN", "E", "L", "New", "V", "NO", "NN", "H", "Q", "X", "Y", "Size", "NC", "Num", "NS", "NE", "K", "Na", "NM", "O", "P", "B", "C", "T", "D", "Ne", "S", "A", "W", "I", "No", "NT", "Z", "Ns", "U", "R", " n", "G", "NA", "NUM", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "K", "NM", "O", "MON", "P", "B", "T", "C", "D", "LM", "S", "W", "CM", "I", "MB", "Z", "m", "U", "R", "J", "MU", "Mo", "n"], "path": ["scene", "text", "end", "open", "dir", "track", "method", "p", "where", "c", "condition", "context", "case", "dict", "prev", "pos", "log", "head", "ph", "this", "sign", "link", "first", "time", "diff", "history", "image", "clean", "node", "w", "next", "cross", "child", "PATH", "patch", "root", "position", "walk", "scan", "document", "parent", "list", "graph", "tree", "key", "view", "order", "add", "test", "Path", "move", "inner", "keep", "skip", "config", "transform", "n"], "i": ["gi", "ui", " bi", "ei", "int", "ie", "ai", "c", " I", "o", "r", "ini", "im", "iu", "ti", "x", "yi", "ind", "I", "it", "l", "u", "f", "di", "ni", "ip", "ij", "e", "il", "id", "li", "ii", "abi", "n"], "_": ["k", "g", "o", " time", "x", "I", "l", "j", "f", "ac", "an", "ip"], "a": ["aa", "s", "ma", "p", "ai", "aw", "ama", "c", "y", "api", "ba", "ab", "z", "da", "x", "A", "af", "w", "l", "u", "d", "ca", "f", "sa", "ac", "ga", "m", "j", "area", "am", "ae", "alpha", "e", "next", "an", "ad", "n"], "b": ["s", "aa", "fb", "p", "bs", "c", "y", "r", "o", "wb", "mb", "B", "ba", "ab", "x", "A", "w", "sb", "body", "l", "ob", "bb", "d", "rb", "f", "j", "eb", "bd", "m", "br", "v", "base", "e", "next", "bi", "n"], "vis": ["ss", "shadow", "int", "cas", "dir", "visible", "stat", "nav", "host", "c", "guide", "travel", "prev", "views", "comment", "pos", "switch", "circ", "vid", "css", "iter", "sign", "conf", "design", "index", "cache", "diff", "image", "Vis", "w", "next", "cross", "current", "bug", "it", "doc", "show", "vert", "position", "walk", "ignore", "self", "see", "dc", "scan", "shape", "parent", "list", "graph", "di", "v", "view", "feature", " visitor", "visual", "move", "keep", "skip", "config", " visitors", "ref", "info"], "cnt": ["cNT", "bcnd", "dcNT", "ccnt", "dcno", "CNT", "dcnt", "cnc", "dcrt", " crt", " cNT", " cct", "ncnt", "cct", "lcnc", "crt", "ncnd", " cnc", "Cnt", " cno", "mcrt", "ccnd", "ncct", "Cnc", "Cno", " cnd", "ccnc", "ncrt", "bcrt", "cno", "lcnt", "mcnt", "bcct", "lcct", "Crt", "mcno", "lcno", "bcnt", "mcNT", "Cct", "cnd", "ccNT", "Cnd"], "now": ["name", "cycle", "last", "NOW", "context", "load", "low", "hack", "since", "tmp", "this", "size", "time", "node", "stack", "w", "window", "current", "home", "doc", "max", "once", "nw", "found", "self", "old", "Now", "today", "ow", "gen", "step", "source", "next", "loop", "draw", "here", "info"], "depth": ["mode", "int", "level", "dir", "p", "dist", "init", "exp", "c", "context", "this", "push", "dep", "seed", "deep", "time", "diff", "history", "stack", "node", "w", "version", "Depth", "current", "d", "before", "max", "root", "rc", "up", "rank", "parent", "ursion", "length", "dim", "feature", "debug", "order", "count", "id", "progress", "next", "info"], "new": ["name", "other", "raw", "New", "open", "recent", "missing", "dir", "create", "p", "latest", "g", "existing", "c", "low", "known", "r", "first", "deep", "array", " next", "time", "diff", "x", "node", "w", "start", "current", "child", "doc", "d", "root", "one", "f", "j", "NEW", "found", "nw", "m", "self", "old", "rank", "null", "parent", "no", " self", "v", "view", "feature", "gen", "add", "source", "next", "front", "n"]}}
{"code": "import sys\\nimport math\\nimport itertools\\nimport collections\\nimport heapq\\nimport re\\nimport numpy as np\\n\\nrr = lambda: sys.stdin.readline().rstrip()\\nrs = lambda: sys.stdin.buffer.readline().split()\\nri = lambda: int(sys.stdin.readline())\\nrm = lambda: map(int, sys.stdin.buffer.readline().split())\\nrl = lambda: list(map(int, sys.stdin.readline().split()))\\ninf = float('inf')\\nmod = 10**9 + 7\\n\\nprint('red' if ri()<3200 else rr())\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "target": "90", "substitutes": {"rr": ["rh", "error", "mr", "arm", "ner", "reader", "arr", "rar", "inter", "err", "orr", "rx", "r", "rd", "pr", "RR", "gr", "lr", "ise", "attr", "force", "ar", "par", "req", "ra", "rc", "ir", "pp", "dr", "rt", "R", "ress", "cr", "order", "fr", "kr", "print", "ror", "er", "IR", "res"], "rs": ["rh", "spec", "mr", "ras", "ps", "xs", "rw", "rx", "rd", "rep", "ro", "ring", "ros", "ars", "RS", "runs", "rb", "sr", "rc", "cs", "ns", "rg", "ran", "rss", "ls", "repl", "res"], "ri": ["RI", "ris", "iri", "mi", " rob", "ai", "stri", "phi", "i", "rx", "rd", "ini", "rf", "lo", "ro", "rid", "si", "rob", "uri", "rb", "ari", "ki", "io", "sr", "rin", "xi", "ori", "rt", "di", "ni", "ci", "hi", "ski", "nr", " di", "li", "rio", "ry", "bi", "ti"], "rm": ["replace", "mr", "arm", "reply", "rar", "nm", "rpm", "rx", "pm", "lr", "md", "rn", "reg", "rb", "rc", "ignore", "ram", "irm", "rg", "rem", "nr", "cr", "mc", "repl", "rom", "ref", "RM"], "rl": ["lp", "rh", "ol", "mr", "rw", "tl", "rx", "lr", "el", "la", "lv", "lc", "ril", "pl", "rb", "LR", "ll", "dl", "rc", "rg", "rt", "nl", "ld", "ls", "lt", "il", "repl", "lb"], "inf": ["int", "std", "init", "phi", "rec", "rf", "iter", "nu", "z", "Inf", "inc", "ind", "pl", "nz", "ll", "frac", "f", "rc", "pp", "xi", "lim", "ci", "cl", "abc", "ref", "info"], "mod": ["mode", "unit", "spec", "MOD", "perm", "exp", "ms", "im", "pm", "reg", " Mod", "scale", "sim", "comp", "module", "crit", "inc", "mag", "fun", "mods", "complex", "deg", "dec", "cc", "step", "ctr", "rad", "Mod"]}}
{"code": "num = map(int, raw_input().split())\\n\\nflg=1\\nwhile flg==1:\\n    flg=0\\n    for i in range(2):\\n        if num[i]>num[i+1]:\\n            box = num[i]\\n            num[i]=num[i+1]\\n            num[i+1]=box\\n            flg=1\\n\\nprint \"%d %d %d\" % (num[0],num[1],num[2])", "target": "117", "substitutes": {"num": ["name", "loc", "int", "mon", "im", "comment", "nu", "x", "begin", "uni", "mat", "bin", "np", "mod", "hom", "info", "new", "call", "date", "dom", "init", "Num", "net", "pos", "temp", "coord", "ng", "final", "node", "con", "nb", "moon", "sum", "multi", "id", "form", "update", "NUM", "unit", "digit", " number", "number", "result", "size", "nom", "grid", "index", "image", "cal", "max", "mom", "row", "sort", "rank", "input", "parent", "day", "dim", "word", "block", "um", "cube", "text", "norm", "valid", "nn", "one", "nam", "no", "byn", "month", "range", "home", "draw", "n"], "flg": ["svg", "flq", "FLga", " flw", "FLgs", " flG", "FLsg", "flw", "dlgs", "Flq", " flbg", "llg", "llgs", "svge", "FLw", "FlG", " flq", "flgs", "flge", "Flga", "dlq", "llw", " flrg", "Flgs", " flsg", "flbg", "svrg", "FLbg", "flga", "dlg", "Flg", "llbg", "flG", "llge", " flgs", "FLg", "svgs", "flrg", "Flsg", "flsg", "dlG", " flga", "llrg", " flge"], "i": ["gi", "k", "ui", "a", "ie", "int", "qi", "p", "phi", "ai", "c", "oi", "y", "o", "ix", "ini", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "uri", "l", "fi", "u", "d", "pi", "it", "j", "io", "f", "m", "xi", "di", "ni", "ci", "b", "v", "t", "e", "info", "zi", "id", "li", "ii", "inner", "source", "bi", "n"], "box": ["new", "cube", "ox", "Box", "unit", "boxes", "exp", "zone", "number", "ix", "border", "iq", "weight", "boxing", "size", "div", "index", "x", "node", "world", "root", "label", "row", "max", "q", "ax", "comb", "self", "rank", "area", "shape", "parent", "check", "zip", "id", "BOX", "form", "sum", "block"]}}
{"code": "H,W=map(int,input().split())\\nans='Impossible'\\nj=0\\n\\nfor i in range(H):\\n  A=[x for x in input()]\\n  count=A.count('#')\\n  if i==0 and A[0]=='.':\\n    break\\n  try:\\n    if i>0 and '#' in A[:j]:\\n      break\\n    else:\\n      if i==0:\\n        if count!=A[:count].count('#'):\\n        \tbreak\\n      elif count!=A[j:j+count].count('#'):\\n        break\\n  except:\\n    j+=(count-1)\\n    pass\\n  j+=(count-1)\\nelse:\\n  ans='Possible'\\nprint(ans)", "target": "243", "substitutes": {"H": ["F", " h", "E", "L", "V", "Q", "X", "DH", "Y", "K", "h", "SH", "HC", "P", "B", "C", "T", "D", "S", "He", "EH", "I", "Ch", "Z", "HH", "HI", "U", "R", "J", "M", "FH", "N", "G", "HA", "CH"], "W": ["F", "E", "wa", "L", "V", "Q", "X", " w", "Y", "K", "SW", "we", "P", "B", "C", "D", "w", "TW", "Z", "U", "R", "M", "J", "N", "Wa", "G", "CW", "Wh"], "ans": ["s", "ents", "lan", "nas", "ras", "amps", "eps", "ams", "atan", "na", "span", "gan", "ats", "anas", "AN", "ANS", "anes", "ks", "asts", "ane", "aces", "ann", "anc", "ays", "es", "ana", "can", " means", "nan", "ars", "anned", "aned", "ons", "aus", "ens", "sk", "leans", "ants", "ns", "ases", "ran", "os", "san", "plan", "an", "ins"], "j": ["ji", "k", "end", "a", "pop", "span", "ja", "p", "c", "jo", "y", "o", "jj", "h", "left", "jit", "size", "jl", "z", "si", "ch", "index", "x", "ind", "start", "w", "I", "adj", "obj", "l", "d", "uj", "job", "jp", "f", "m", "jc", "oj", "jump", "aj", "ci", "ij", "J", "v", "b", "key", "e", "count", "li", "next", "n"], "i": ["ji", "ui", "a", "int", "chi", "qi", "p", "phi", "ai", "c", "y", "h", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "f", "io", "xi", "di", "hi", "ci", "ij", "ni", "b", "v", "e", "count", "id", "li", "ii", "n", "bi", "ti"]}}
{"code": "n,a,b = map(int,input().split())\\nmodnum = 10**9+7\\nans = pow(2,n,modnum)-1\\n\\ndef modinv(a, mod=10**9+7):\\n    return pow(a, mod-2, mod)\\ndef combination(n, r, mod=10**9+7):\\n    r = min(r, n-r)\\n    res = 1\\n    for i in range(r):\\n        res = res * (n - i) * modinv(i+1, mod) % mod\\n    return res\\nans -= combination(n, a, modnum)\\nans -= combination(n, b, modnum)\\nans %= modnum\\nprint(ans)", "target": "580", "substitutes": {"n": ["min", "s", "k", "mn", "p", "na", "g", "c", "o", "y", "nc", "num", "net", "un", "h", "rn", "ne", "nu", "z", "fn", "x", "ar", "sn", "w", "l", "u", "d", "cn", "nt", "q", "max", "nn", "f", "j", "m", "ac", "ln", "ns", "no", "nr", "v", "e", "N", "t", "nb", "an"], "a": ["aa", "s", "auto", "p", "na", "ai", "c", "aw", "y", "o", "ba", "ab", "au", "array", "da", "x", "ar", "A", "w", "l", "u", "d", "f", "ca", "sa", "ac", "m", "aj", "ae", "alpha", "e", "an", "ad"], "b": ["s", "aa", "k", "p", "bs", "g", "c", "y", "o", "h", "num", "B", "ba", "ab", "x", "w", "l", "rb", "d", "u", "f", "j", "m", "ac", "v", "e"], "modnum": [" modsu", "cumen", "modsum", "domsu", "modnumber", "Modn", "MODnum", " modul", "modulenom", "modulenum", "Modnumber", "modNum", "modul", "Modsum", "Modnum", "moduleen", "cumn", "moduleNum", "modsu", "modulen", "cumnom", "cumnum", " modsum", "verul", "Modsu", "modulesum", "ModNum", "moden", "modn", " modnom", "moduleul", " modnumber", " moden", " modn", "domnum", "vernum", "modnom", "domn", " modNum", "MODnumber", "verNum", "MODn"], "ans": ["ss", "s", "ris", "ross", "lan", "span", " answers", "ras", "nas", "ams", "amps", "na", "anges", "ms", "ions", "ours", "ores", "results", "activation", "AN", " na", "ANS", " news", "ann", " results", "anc", "uns", "ares", "ays", "ands", "x", "can", "nan", "A", " means", "ars", "errors", "ros", "aned", "max", "ons", "ids", "works", "ens", "cs", "ns", "man", "ran", "os", "no", "rates", "nos", "cons", "opens", "plan", " rs", "rs", "an", "ins"], "mod": ["min", "mode", "spec", "int", "dom", "MOD", "rm", "method", "exp", "mult", "post", "num", "pm", "rep", "re", "round", "md", "cum", "ver", "reg", "rom", "amd", "ro", " Mod", "rid", "od", "aug", "rand", "div", "comp", "module", "bug", "cm", "max", "root", "row", "sup", "sort", "ac", "m", "comb", "fun", "man", "rank", "rt", "am", "no", "R", "bin", "rem", "mods", "ow", "complex", "order", "dec", "step", "sub", "ru", "range", "part", "form", "um", "rad", "Mod"], "r": ["rh", "min", "rr", "k", "mr", "rm", "p", "c", "h", "o", "radius", "rd", "re", "rn", "z", "x", "ar", "w", "l", "rb", "d", "u", "q", "j", "range", "sr", "right", "m", "f", "ir", "rt", "rg", "ri", "R", "nr", "v", "e", "cr", "ru", "er", "rs", "nor"], "res": ["rh", "min", "ris", "Rs", "rest", "mr", "ras", "arr", "p", "na", "ms", "ps", "err", "rows", " Res", "result", "results", "pres", "rep", "re", "gr", "reg", " results", "rev", "rand", "es", "ros", "Res", "runs", "max", "ons", "resolution", "RES", "range", "right", "sr", "cs", "ac", "resh", "resp", "R", "os", "rem", "rss", "ress", "nos", "powers", "ret", "rs", "sum"], "i": ["gi", "ui", "end", "ie", "int", "qi", "mi", "p", "ai", "c", " I", "o", "ix", "ini", "iu", "ti", "z", "si", "index", "x", "ind", "I", "uri", "l", "u", "d", "pi", "q", "j", "f", "right", "m", "xi", "ri", "ip", "ci", "v", "e", "t", "id", "bit", "ii", "li", "range"]}}
{"code": "import sys\\n\\nread = sys.stdin.read\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\nsys.setrecursionlimit(10 ** 9)\\nINF = 1 << 60\\n\\n\\nN = int(readline())\\nB = list(map(int, readline().split()))\\n\\n\\ndef main():\\n    ans = []\\n    while B:\\n        for i in range(len(B), 0, -1):\\n            if i == B[i - 1]:\\n                ans.append(B.pop(i - 1))\\n                break\\n        else:\\n            print(-1)\\n            return\\n    print(*reversed(ans), sep='\\n')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "593", "substitutes": {"read": ["raw", " data", "end", "open", " READ", "reader", "feed", " write", "stream", " get", "load", "r", " buffer", "rec", "Read", " copy", "lex", "work", "content", "wake", "connect", "write", " parse", "READ", "run", "x", "each", " stream", " send", "current", " use", "hand", "readable", " analyse", " reads", "input", "set", "data", "reads", " listen", "bind", " load", "play", "reading", "add", " reader", " Read", " readers"], "readline": ["writefile", "Readlined", "newlined", "runlines", "loadlines", "readlink", "writeln", "getlines", "runln", "loadstring", " readlined", "newlines", "Readline", "loadline", "getfile", "readwrite", "writelines", "loadfile", "Readln", "newline", " readln", "Readlines", "readln", "writeline", "writestring", "readstring", "getline", " readstring", "writelink", " readwrite", "getstring", "newln", " readlink", "readlined", "runwrite", "loadlink", "readfile", "writewrite", "runline"], "readlines": ["readstrings", "readinglines", "readingLINE", "writeLine", "readLine", "readingtypes", "Readline", "writelines", "Readlines", "readingline", "writeline", "writestrings", " readLINE", "readLINE", "Readtypes", " readstrings", " readLine", "readingstrings", "readtypes", "ReadLINE", "readingLine", " readtypes"], "INF": ["ANI", "INM", " INM", "ANFs", "INI", "inF", "inFs", "ANF", "ANM", "inI", "inM", " INFs", " INI", "INFs"], "N": ["F", " M", "NR", " L", "NL", "Num", "NS", " I", "K", "NM", "P", "D", " C", "S", "I", "NT", "Z", " S", "Ns", "R", " SN", "M", "SN", " n", " ND", " D", " NI", "n"], "B": ["F", "E", "EB", "L", "LB", "V", "H", "Y", "UB", "K", "PB", "Bi", "DB", "BA", "AB", "O", "FB", "P", "C", "T", "D", "SB", "BB", "BC", "BI", "S", "A", "BBC", "W", "Bank", "BF", "BD", "I", "RB", "MB", "Ab", "BE", "BR", "BL", " A", "OB", "WB", "U", "R", "GB", "M", "Band", "b", "NB", "BM", "QB", "VB", "G", "Block", "BS", " b", "Bs"], "ans": ["amp", "a", "ents", "lan", "ras", "nas", "amps", "eps", "ams", "atan", "na", "ai", "Ann", "ions", "aning", "anas", "AN", "aos", "ads", "ANS", "ann", "anon", "ani", "anc", "annot", "ays", "ana", "can", "A", "ars", "aned", "ons", "aus", "leans", "ants", "ns", "os", "olds", "ANN", "angs", "an", "ins"], "i": ["gi", "ui", "a", "int", "chi", "qi", "mi", "p", "phi", "ai", "c", " I", "o", "r", "gu", "num", "number", "ini", "ix", "iu", "ti", "z", "si", "index", "x", "ind", "I", "l", "u", "pi", "d", "fi", "j", "f", "io", "m", " j", "xi", "di", "ri", "ni", "ci", "b", "multi", "id", "li", "ii", "inner", "zi", "n", "bi", "ip"]}}
{"code": "\\na, b, c, x, y = list(map(int, input().split()))\\n\\nans = x*a + y*b # normal\\n\\nans = min(ans, 2*c*max(x, y)) # all from c\\n\\n\\nif max(x, y) == x: \\n    A = True\\nelse:\\n    A = False\\nleft = (max(x, y) - min(x, y))*(a if A else b)\\nans = min(ans, 2*c*min(x, y) + left)\\n\\nprint(ans)", "target": "430", "substitutes": {"a": ["aa", "s", "p", "ai", "aw", "i", "h", "ab", "z", "da", "A", "w", "l", "d", "f", "sa", "m", "asa", "ac", "area", "aj", "am", "ae", "alpha", "e", "abc", "ad", "n"], "b": ["aa", "be", "p", "bs", "g", "i", "r", "wb", "B", "ab", "z", "cy", "sb", "cb", "l", "bb", "d", "rb", "f", "eb", "j", "m", "db", "v", "e", "bc", "big", "bi", "ad", "n"], "c": ["k", "end", "p", "i", "h", "r", "C", "lc", "uc", "z", "cy", "cm", "l", "d", "ca", "f", "ac", "m", "dc", "cd", "ci", "e", "dec", "cr", "cc", "col", "xc", "n"], "x": ["wa", "int", "X", "p", "tx", "g", "plus", "i", "xx", "yx", "width", "h", "number", "ix", "px", "z", "ex", "index", "w", "l", "u", "d", "max", "f", "ax", "ww", "xi", "ct", "v", "e", "xy", "ad", "n"], "y": ["yr", "ady", "dy", "ye", "p", "Y", "i", "o", "h", "ay", "z", "ty", "zy", "yi", "cy", "w", "ny", "yt", "d", "j", "f", "sy", "m", "yy", "ya", "oy", "v", "e", "t", "col", "py", "vy", "ey", "n"], "ans": ["ano", "s", " data", "span", " s", " ang", " ac", " cs", "ana", " means", " o", "ac", "m", "co", " an", " acc", "an", "cons", " cp", " co", " n", " ad", " na", "ad", "n"]}}
{"code": "n = input()\\ns = \"ABC\"\\n\\nprint(s + n)", "target": "429", "substitutes": {"n": [" N", "name", "a", "p", "init", "g", "c", "i", "o", "number", "y", "num", "nc", "names", "z", "fn", "x", "adj", "args", "l", "cn", "nn", "j", "network", "f", "ln", "m", "ns", "nr", "v", "len", "b", "t", "N", "e", "nb"], "s": ["a", "strings", "words", "p", "states", "g", "c", "i", "sets", "o", "r", "number", "h", "ims", "times", "long", "x", "blocks", "S", "sn", "start", "tests", "args", "sites", "lines", "u", "d", "f", "status", "m", "small", "ns", "site", "us", "seconds", "ts", "b", "string", "e", "t", "submit", "an", "sum", "comments"]}}
{"code": "n,k=map(int,input().split())\\nh=list(map(int,input().strip().split()))[:n]\\nh.sort()\\nif(k>=n):\\n    print(0)\\n\\nelif(k==0):\\n    b=sum(h)\\n    print(b)\\nelif(k<n):\\n    b=sum(h[:-k])\\n    print(b)", "target": "744", "substitutes": {"n": ["s", "a", "p", "c", "i", "o", "number", "y", "num", "nc", "size", "ne", "kn", "z", "x", "nan", "w", "ny", "l", "nin", "u", "d", "nt", "nn", "q", "f", "ln", "j", "m", "ns", "no", "v", "t", "N", "e", "pn", "nb"], "k": ["km", "s", "a", "ke", "p", "g", "c", "i", "dk", "K", "y", "o", "kk", "ijk", "ks", "kn", "z", "x", "mk", "kw", "w", "ko", "l", "ok", "u", "d", "unk", "q", "ki", "j", "sk", "f", "m", "ky", "ku", "kick", "v", "ck", "e", "id", "ik"], "h": ["rh", "hs", "s", "ih", "sh", "a", "H", "p", "g", "c", "i", "r", "y", "o", "hash", "ph", "z", "http", "x", "body", "w", "l", "bh", "u", "d", "q", "he", "f", "j", "m", "hi", "v", "t", "e", "count", "hm"], "b": ["s", "a", "p", "bs", "g", "c", "i", "y", "r", "o", "num", "bis", "beta", "B", "ab", "z", "x", "w", "sb", "l", "bh", "u", "d", "bb", "rb", "f", "j", "m", "db", "v", "base", "e", "count", "nb", "lb"]}}
{"code": "a,b = map(int,input().split())\\nprint(a*b if a<=9 and b<=9 else -1)", "target": "181", "substitutes": {"a": ["aa", "s", "sta", "int", "va", "ma", "p", "na", "qa", "c", "ama", "i", "y", "la", "ab", "pa", "x", "da", "A", "af", "ia", "l", "u", "d", "aaa", "f", "sa", " A", "asa", "m", "ca", "ac", "area", "aux", "aj", "ae", "alpha", "ea", "e", "ha", "an", "n"], "b": ["s", "aa", "k", "ib", "fb", "p", "bs", "c", "i", "y", "emb", "wb", "beta", "mb", "zb", "B", "ba", "bis", "ab", "z", "sb", "cb", "l", "ob", "bb", "d", "bf", "rb", "abb", "f", "eb", "bd", "ac", "xb", "db", "bin", "abs", "v", "bar", "e", "nb", "lb", "bi", "ad", "n"]}}
{"code": "b = input()\\nbp_dict = {'A': 'T', 'C': 'G'}\\nif b == 'A':\\n    print('T')\\nif b == 'T':\\n    print('A')\\nif b == 'C':\\n    print('G')\\nif b == 'G':\\n    print('C')", "target": "562", "substitutes": {"b": ["s", "be", "k", "a", "ib", "fb", "p", "bp", "bs", "g", "c", "i", "orb", "y", "r", "o", "h", "emb", "B", "ab", "x", "w", "sb", "body", "bt", "obj", "l", "ob", "u", "d", "bb", "bh", "hub", "abb", "f", "eb", "lib", "ga", "db", "bin", "v", "base", "t", "e", "bg", "lb", "n"], "bp_dict": ["gp_db", "bp_dat", "bp_db", "bp5list", "gp__db", "gp_list", "bp_list", "bp__dict", "gp__list", "bp5dat", "gp_dat", "bp__db", "gp__dat", "bp__dat", "bp5dict", "bp__list", "gp_dict", "gp__dict", "bp5db"]}}
{"code": "n, a, b = map(int, input().split())\\nprint(max(0, a + (n-1)*b - (n-1)*a - b + 1))", "target": "395", "substitutes": {"n": ["min", "name", "k", "s", "non", "p", "g", "c", "i", "o", "number", "nc", "y", "num", "net", "size", "ne", "z", "fn", "x", "w", "l", "u", "d", "max", "nt", "f", "j", "network", "m", "ns", "no", "v", "e", "N", "t", "nb", "an"], "a": ["min", "aa", "k", "p", "na", "ai", "g", "c", "i", "fa", "y", "h", "ba", "ab", "z", "da", "x", "A", "w", "ak", "l", "u", "d", "aaa", "f", "sa", "ca", "ac", "m", "ga", "j", "area", "am", "aj", "ae", "alpha", "e", "an", "ad"], "b": ["s", "k", "aa", "p", "bs", "g", "c", "i", "y", "r", "h", "num", "beta", "B", "ba", "ab", "z", "x", "A", "w", "sb", "cb", "l", "bf", "d", "u", "bb", "rb", "f", "j", "m", "v", "e", "nb", "lb"]}}
{"code": "inf =  1100000\\ndef main():\\n  N =  int(input())\\n  a = list(map(int, input().split()))\\n  a.sort()\\n  detect = [0] *inf\\n  for x in a:\\n    if detect[x] != 0:\\n      detect[x] = 2\\n      continue\\n    for i in range(x, inf, x):\\n      detect[i] += 1\\n  ans = 0\\n  for i in range(N):\\n    if detect[a[i]] == 1:\\n      ans += 1\\n  print(ans)\\n  \\nif __name__ == \"__main__\":\\n  main()", "target": "268", "substitutes": {"inf": ["aff", "int", "X", "ffff", " Inf", "init", "ai", "std", "inter", "phi", "xx", "y", "ine", "ini", "ix", "fe", "iter", "conf", "z", "xxx", "Inf", "nan", "diff", "index", "inc", "ind", "w", "I", "bug", "u", "nt", "nz", "max", "frac", "Z", "f", "ignore", "xi", "input", "features", "alpha", "appa", "info", "id", "ii", "abc", "n"], "N": ["F", "L", "V", "NN", "Q", "X", "Y", "NS", "Num", "NE", "K", "number", "O", "P", "T", "C", "B", "D", "size", "Ne", "Inf", "S", "A", "W", "I", "NT", "Ni", "Z", "Ns", "R", "M", "NB", "G", "n"], "a": ["aa", "s", "auto", "int", "at", "p", "na", "ai", "c", "aw", "fa", "y", "atten", "ab", "au", "array", "da", "ar", "A", "af", "l", "u", "d", "f", "sa", " A", "ac", "ga", "aux", "input", "am", "ae", "alpha", "b", "ea", "t", "e", "an", "ad", "n"], "detect": ["detector", " detection", "detign", "diffection", "ondection", "Detsect", "dedector", "Detect", "sectector", " detract", "disect", "sectection", "ondect", "detDetect", "Detector", "ifection", "ifign", "sectign", "Detection", "identsect", "dedection", "disDetect", "matDetect", "identection", "diffDetect", "diffector", " detsect", "dedract", "matector", "disection", "disector", "condect", "identector", "partect", "ondsect", "partsect", "matect", "condector", " detector", " detign", "ondector", "detection", "partection", "ifect", "condection", "diffect", "ifector", "identect", "dedect", "matection", "partector", "detsect", "detract", "condract", "ifsect", "sectect"], "x": ["min", "s", "k", "int", "code", "X", "xf", "p", "ic", "c", "xs", "xx", "y", "work", "h", "ix", "num", "rx", "z", "xt", "ex", "index", "xxx", " xx", "w", "inc", "u", "d", "max", "q", "f", "ax", "j", "xi", "input", "ct", "alpha", "xp", "b", "e", "t", "xes", "id", "xc", "ii", "n"], "i": ["ie", "int", "p", "ai", "ic", "c", "y", "ine", "ini", "ix", "iu", "ti", "z", "si", "index", "ind", "I", "it", "l", "u", "pi", "q", "io", "j", "f", "xi", "di", "ci", "b", "v", "e", "t", "il", "id", "li", "ii", "n", "bi", "ip"], "ans": ["s", "int", "lan", "span", "nas", "amps", "cas", "eps", "na", "ai", "xs", "ats", "Ann", "ions", "activation", "antis", "anas", "AN", "ANS", "ks", "aces", "names", "ann", "ani", "anc", "ana", " means", "nan", "ars", "anus", " scans", "lines", "aned", "ons", "ids", "aus", "ens", "ln", "cs", "ants", "ns", "os", "ls", "ians", "an", "n", "ins"]}}
{"code": "import bisect\\nn = int(input())\\nA = list(map(int,input().split()))\\nA.sort()\\nif n == 2:\\n  ans = [A[1],A[0]]\\n  print(*ans)\\n  exit()\\nMAX = A[-1]\\ntarget = MAX//2\\nok = 0\\nng = n\\nwhile abs(ok-ng)>1:\\n  mid = (ok+ng)//2\\n  if A[mid] <= target:\\n    ok = mid\\n  else:\\n    ng = mid\\nans = [MAX,A[ok]]\\n\\nnxt = ok+1\\n#print(A[nxt])\\nif nxt < n:\\n  dif0 = min(MAX-A[ok],A[ok])\\n  dif1 = min(MAX-A[nxt],A[nxt])\\n  if dif0 < dif1:\\n    ans[1] = A[nxt]\\nprint(*ans)", "target": "207", "substitutes": {"n": [" N", "s", "k", "a", "span", "p", "na", "g", "c", "i", "o", "r", "nc", "en", "num", "y", " na", "rn", "ann", "anon", "ne", "z", "fn", "x", "nan", " fn", "ar", "sn", "w", "nat", "l", "d", "cn", "nt", "nn", "q", "f", "ln", "network", "m", "ns", "nl", "ni", "nr", "b", "np", "t", "N", "pn", "e", "nb", "an", "on"], "A": ["AD", "GA", "a", "Acc", "All", "AS", "X", "Y", "MA", "AP", "ALL", "ai", "IA", "LA", "Adam", "AST", "Na", "FA", "Ha", "AN", "AM", "O", "AW", "P", "B", "C", "T", "As", "mA", "D", "Ar", "API", "Empty", "AA", "ASC", "AC", "Alpha", "au", "S", "array", "Args", "I", "AU", "PA", "ANC", "Average", "Data", "Auth", "Action", "Array", "CA", "AF", "alpha", "M", "N", "AI", "KA", "G", "Ang", "NA", "HA", "An", "App"], "ans": [" ants", "a", "lan", "span", " answers", "ins", "amps", "AS", "na", "ai", "Ann", "ions", "aning", "AN", "ANS", "mean", "annels", "As", "ann", "anon", "au", "ani", "ana", "anc", "can", "nan", "An", "lang", "anned", "ars", " means", "args", "nn", "ids", "ons", "works", "ens", "ants", "ances", "ns", " spans", "scan", "ran", "gen", "ANN", "ds", "NA", "an"], "MAX": ["RAW", "IN", "NR", "AK", "NO", "NN", "Max", "Q", "X", "ORD", "NC", "MAG", "NS", "FAULT", "ANK", "HEAD", "NW", "AN", "EST", "NER", "ANT", "VERSION", "EXT", "AX", "SIZE", "MIN", "PATH", "NT", "NG", "max", "ANC", "ax", "END", "ND", "NV", "N", "gen", "GEN", "ARGET", "NA", "Target", "an", "NUM"], "target": ["mode", "end", "int", "top", "arg", "success", "goal", "net", "iter", "weight", "size", "scale", "arget", "dest", "master", "current", "phase", "NT", "NG", "max", "nt", "gt", "shape", "parent", "mask", "match", "limit", "np", "gen", "all", "ARGET", "range", "next", "Target", "total"], "ok": ["loc", "pid", "int", "tick", "miss", "read", "orig", "ick", "ak", "NG", "dev", "gen", "order", "info", "error", "nice", "code", "win", "load", "ready", "pos", "Ok", "ro", "allow", "nz", "sync", "oy", "os", "key", "good", "id", "next", "ang", "ack", "raw", "arm", "nd", "md", "iter", "index", "lang", "ind", "now", "ko", "req", "max", "row", "cmd", "scan", "kind", "OK", "off", "k", "opt", "err", "nc", "num", "valid", "bug", "ask", "nt", "fail", "no", "check", "nr", "ck", "big", "progress", "org"], "ng": ["min", "wn", "loc", "sq", "mode", "mn", "org", "channel", "arg", "na", "ong", "ms", "pg", "nd", "exp", "low", "nc", "num", "pos", "md", "inf", "ann", "ne", "z", "size", "rand", "nor", "index", "x", "scale", "dm", "lang", "w", "ind", "gd", "nin", "NG", "max", "nz", "nn", "nt", "mag", "gt", "nw", "ns", "lim", "no", "ni", "nr", "gen", "big", "range", "next", "ang"], "mid": ["min", "mode", "loc", "middle", "end", "mad", "pid", "int", "msg", "nd", "init", "ms", "nm", "i", "mult", "miss", "low", "medium", "num", "orig", "pos", "md", "mini", "rand", "scale", "dest", "cand", "master", "ind", "start", "phase", "doc", "max", "nz", "nt", "lim", "kind", "hi", "ni", "nr", "dim", "key", "gen", "high", "seq", "id", "sub", "Mid", "qq", "multi", "range", "next", "ang"], "nxt": ["pnx", "pnxt", "nxc", "pnxc", " nxc", "pnext", "dnxc", " nx", "dnx", "nx", " next", "next", "dnxt", "dnext"]}}
{"code": "N, K = map(int, input().split())\\nfruit = input().split()\\n#print(fruit)\\nfruit = [int(x) for x in fruit]\\n#print(fruit)\\nfruit.sort()\\n#print(fruit)\\nprint(sum(fruit[:K]))", "target": "124", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "Q", "X", "NS", "CNN", "O", "P", "T", "C", "B", "D", "NP", "S", "W", "I", "Z", "Ns", "R", "M", "J", " n", "n"], "K": ["F", "k", "E", "V", "H", "Q", "X", "Y", "O", "P", "B", "C", "T", "SK", "D", "NK", "KS", "S", "W", "I", "Z", "KR", "U", "R", "J", "M", "KN", "G"], "fruit": ["s", "end", "X", " I", " B", "P", " Y", " C", "S", "A", "I", " T", " J", " F", " U", " E", "j", "Z", " A", " S", " NP", " X", "v", "J", " P"]}}
{"code": "def main():\\n  N = int(input())\\n  S = str(input())\\n  ans = 0\\n  for i in range(N - 2):\\n      if S[i] == 'A' and S[i + 1] == 'B' and S[i + 2] == 'C':\\n        ans += 1\\n  print(ans)\\nmain()", "target": "369", "substitutes": {"N": ["F", "L", "V", "NN", "H", "Sn", "X", "Y", "Size", "Num", "NS", "NE", "NI", "K", "O", "P", "T", "C", "B", "D", "Len", "NH", "Ne", "A", "I", "No", "Z", "Ns", "M", "NB", "SN", " n", "Wh", "NA", "n"], "S": ["F", "s", "VS", "E", "L", "IS", "V", "H", "SC", "X", " s", "Y", "SE", "Sample", "NS", "INS", "JS", "Si", "K", "PS", "SH", "SI", "SA", "P", "T", "B", "C", "D", "SK", "Ps", "A", "W", "RS", "Sl", "I", "Sing", "SS", "OS", "WS", "Ns", "II", "CS", "U", "R", "M", "GS", "SN", "G", "SO", "BS", "SU", "Socket"], "ans": ["ss", "ano", "s", "a", "ents", "offs", "span", "nas", "amps", "ends", "ins", "atan", "na", "ai", "ats", "Ann", "aning", "anas", "AN", "ANS", "anes", "ks", "mean", "aces", "ann", "anon", "ani", "ays", "ana", "can", "nan", "A", "An", "ars", "anus", "args", "aned", "ons", "aus", "leans", "ens", "cs", "ants", "ns", "os", "san", "ls", "ANN", "ds", "NA", "an", "n"], "i": ["gi", "s", "ui", "a", "ei", "ie", "qi", "mi", "p", "init", "ai", "c", "oi", "h", "ini", "ix", "iu", "lc", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "uri", "l", "fi", "u", "d", "pi", "j", "io", "xi", "di", "ni", "ci", "b", "key", "e", "info", "multi", "id", "li", "ii", "bi", "n"]}}
{"code": "n, m = list(map(int, input().split()))\\ncnt = [1] * n\\nhas_red = [False] * n\\nhas_red[0] = True\\nfor i in range(m):\\n    a, b = list(map(int, input().split()))\\n    has_red[b - 1] = has_red[b - 1] or has_red[a - 1]\\n    if cnt[a - 1] == 1:\\n        has_red[a - 1] = False\\n    cnt[a - 1] -= 1\\n    cnt[b - 1] += 1\\nprint(has_red.count(True))\\n", "target": "311", "substitutes": {"n": ["s", "k", "p", "na", "g", "c", "o", "r", "nc", "number", "num", "y", "h", "C", "ne", "z", "x", "sn", "w", "l", "cn", "d", "u", "nn", "nt", "max", "f", "ns", "ni", "v", "np", "t", "N", "e", "nb", "an"], "m": ["k", "mr", "tm", "mi", "p", "g", "c", "y", "h", "r", "o", "z", "mini", "x", "fm", "dm", "w", "om", "cm", "l", "u", "d", "f", "j", "sm", "bm", "M", "v", "e", "N", "mm", "hm", "mc", "nb"], "cnt": ["cNT", "acount", "CNT", "scnn", "scNT", "lcount", "acnd", " crt", "cfNT", " cNT", " cct", "cct", "crt", "acnt", " cannot", "Cnt", "bount", "bient", "krt", "bnt", "cfannot", "acNT", "knt", " cnd", "scnt", "cfnt", "lcnd", "Cnn", " count", "scct", "Cient", "cient", "lcnt", "cannot", "kannot", "cfrt", " cient", "kNT", "bct", "count", "cnn", "Cct", "lcNT", "cnd", "Count", " cnn"], "has_red": ["has_redo", "hasAnyfield", "has___gray", "has2cond", "hasOrod", "has_rod", " has_field", "has_field", "has___Red", "has_true", " has2gray", "has2colored", "has_cond", "has1rod", "hasOcond", "has2Red", " has2red", " has_redd", "hasOpred", "has_redd", "has___red", "has5orig", " has_rod", "has_gray", " has_pred", "has_orig", "has_yellow", "has2pred", "has_Red", " has_orig", " has_yellow", " has_colored", "has1red", "has1cond", "has_colored", "hasAnyyellow", "has___colored", "hasAnypred", " has_blue", "has1true", "has5red", " has_Red", " has_redo", " has2Red", "has_pred", "has2rod", "hasOred", "hasAnyred", "has_old", "has2red", " has_true", "has2gray", "has_blue", " has_cond", " has_gray", " has_old", "has5redo", "has5pred", " has2colored"], "i": ["gi", "k", "ib", "qi", "p", "ai", " I", "h", "y", "num", "iu", "z", "index", "x", "ind", "I", "u", "d", "j", "ni", "e", "id", "li", "ii", "bi", "ip"], "a": ["aa", "s", "int", "va", "p", "na", "ai", "c", "aw", "fa", "o", "y", "h", "la", "ba", "ab", "z", "da", "x", "A", "w", "l", "u", "d", "ca", "f", "sa", "ac", "ga", "j", "am", "ae", "alpha", "v", "e", "t", "next", "an", "ad"], "b": ["s", "k", "aa", "be", "ib", "p", "bs", "g", "c", "pb", "y", "r", "o", "h", "wb", "B", "ba", "ab", "z", "x", "w", "sb", "next", "body", "l", "bh", "bf", "d", "u", "rb", "f", "j", "bd", "br", "v", "an", "e", "t", "base", "nb", "lb"]}}
{"code": "h = int(input())\\ncnt = 1\\nwhile 1 < h:\\n    cnt += 1\\n    h //= 2\\n    #print(h)\\n#print(cnt)\\n\\nres = 0\\n\\nfor v in range(cnt):\\n    res += 2**v\\nprint(res)", "target": "153", "substitutes": {"h": ["rh", "hs", "ih", "s", "k", "end", "sh", "H", "p", "g", "c", "i", "oh", "o", "y", "height", "r", "head", "hr", "z", "ch", "x", "w", " H", "hh", "l", "bh", "u", "q", "f", "m", "hd", "depth", "hi", " hr", "b", "v", "t", "ha", "count", "uh", "hm", "id", "hp", "n"], "cnt": ["cNT", " cpt", "cpt", "acount", "CNT", "Cwd", "Cpt", " cNT", " cwd", "acnt", "Cnt", "acNT", "acpt", " count", "lcnt", "lcwd", "count", "lcNT", "cwd", "Count", "lcount"]}}
{"code": "n,m,x = map(int,input().split())\\na = list(map(int,input().split()))\\ni = 0\\nj = 0\\nfor k in a:\\n    if k>x:\\n        i += 1\\n    elif k<x:\\n        j += 1\\nprint(min(i,j))", "target": "660", "substitutes": {"n": ["p", "g", "c", "nm", "o", "r", "nc", "y", "ne", "nu", "z", "w", "ny", "l", "u", "nn", "f", "ns", "ni", "v", "b", "np", "e", "N", "nb"], "m": ["mass", "mn", "mi", "p", "ms", "g", "c", "y", "h", "r", "o", "im", "pm", "md", "mu", "w", "l", "d", "mo", "f", "M", "v", "b", "e", "t", "mm", "mc"], "x": ["min", "int", "X", "p", "g", "c", "xs", "xx", "y", "h", "o", "ix", "z", "ex", "xxx", "w", "l", "u", "d", "max", "q", "f", "ax", "v", "b", "key", "e", "t", "xes", "xy", "xc"], "a": ["aa", "code", "ma", "ans", "p", "na", "ai", "c", "fa", "y", "ba", "mA", "array", "ana", "index", "da", "A", "af", "ka", "ia", "ak", "args", "ta", "f", "sa", " A", "ac", "ga", "area", "am", "aj", "ae", "alpha", "b", "ea", "an", "ad"], "i": ["ji", "min", "int", "chi", "mi", "p", "phi", "ai", "c", "y", "o", "ini", "ix", "iu", "z", "si", "index", "start", "I", "l", "u", "d", "pi", "f", "xi", "ci", "v", "b", "e", "t", "id", "li", "ii"], "j": ["ji", "min", "ie", "dy", "ja", "p", "c", "jo", "y", "dj", "jj", "o", "h", "jl", "z", "index", "I", "adj", "l", "d", "uj", "max", "f", "jp", "aj", "ni", "ij", "J", "v", "b", "t", "e", "li", "ii"], "k": ["p", "g", "_", "c", "K", "o", "y", "h", "kk", "ks", "z", "mk", "w", "ak", "it", "ok", "u", "d", "unk", "max", "q", "sk", "f", "ax", "ky", "v", "b", "ck", "e", "ik", " sk", "ad"]}}
{"code": "# Aizu Problem ITP_1_8_A: Toggling Cases\\n#\\nimport sys, math, os\\n\\n# read input:\\nPYDEV = os.environ.get('PYDEV')\\nif PYDEV==\"True\":\\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\\n\\n\\nout = \"\"\\nfor char in input().strip():\\n    o = ord(char)\\n    if 65 <= o <= 90:\\n        out += chr(o + 32)\\n    elif 97 <= o <= 122:\\n        out += chr(o - 32)\\n    else:\\n        out += char\\nprint(out)", "target": "643", "substitutes": {}}
{"code": "n = int(input())\\nA = list(map(int,input().split()))\\nans = 0\\nfor i in range(n-1):\\n    if A[i] >= A[i+1]:\\n        ans += A[i]-A[i+1]\\n        A[i+1] = A[i]\\nprint(ans)\\n", "target": "680", "substitutes": {"n": [" N", "s", "k", "a", "span", "non", "p", "c", "o", "h", "nc", "num", "y", "net", "C", "nu", "ne", "z", "x", "nan", "sn", "w", "l", "d", "nt", "nn", "f", "j", "network", "m", "Ns", "ns", "no", "b", "len", "np", "N", "NA", "nb"], "A": ["F", "E", "a", "L", "At", "Any", "V", "All", "H", "Az", "X", "Y", "AP", "LA", "K", "Parts", "AM", "O", "P", "B", "T", "C", "D", "As", "Ar", "mA", "API", "au", "AA", "AC", "And", "Alpha", "Args", "S", "W", "Address", "I", "Ab", "Each", "Average", "Data", "Array", "CA", "U", "Part", "Input", "alpha", "M", "N", "G", "Am", "Ang", "NA", "Ac", "An", "Answer", "App"], "ans": ["ano", "s", "a", "ents", "lan", "span", "cas", "nas", "amps", "eps", "atan", "na", "ai", "ats", "ions", "anas", "AN", "ANS", "anes", "asts", "mean", "aces", "ann", "anon", "ani", "au", "ays", "es", "ana", "can", "errors", "nan", " means", "ars", "aned", "nn", "ons", "leans", "sk", "ens", "ants", "atches", "ns", "scan", "ases", "os", "reads", "features", "an", "ins"], "i": ["gi", "ji", "name", "k", "ui", "end", "a", "ie", "int", "qi", "p", "phi", "ai", "init", "c", "oi", "y", "h", "ini", "ix", "iu", "api", "lc", "z", "si", "eni", "index", "x", "ind", "start", "I", "uri", "l", "u", "d", "pi", "j", "f", "io", "adi", "xi", "ori", "di", "ci", "b", "v", "my", "e", "info", "multi", "id", "li", "ii", "source", "bi", "ti"]}}
{"code": "n,ma,mb=map(int,input().split())\\ndp=[[[9999]*401for _ in range(401)]for _ in range(n+1)];dp[0][0][0]=0\\nsa=sb=0\\nfor i in range(1,n+1):\\n  a,b,c=map(int,input().split())\\n  sa+=a;sb+=b\\n  for j in range(401):\\n    for k in range(401):\\n      if j>=a and k>=b:dp[i][j][k]=min(dp[i-1][j-a][k-b]+c,dp[i-1][j][k])\\n      else:dp[i][j][k]=dp[i-1][j][k]\\na=9999\\nfor i in range(1,min(sa//ma,sb//mb)+1):\\n  if dp[n][ma*i][mb*i]!=9999:a=min(a,dp[n][ma*i][mb*i])\\nprint(-1if a==9999else a)", "target": "578", "substitutes": {"n": ["s", "p", "g", "o", "y", "r", "num", "nc", "net", "h", "en", "un", "ne", "z", "si", "on", "da", "x", "sn", "node", "w", "l", "u", "d", "nt", "f", "m", "network", "ln", "ns", "ni", "nl", "v", "e", "N", "t", "nb", "an"], "ma": ["aa", "wa", "mad", "sta", "sh", "va", "p", "MA", "qa", "na", "ama", "fa", "ima", "mas", "md", "la", "si", "pa", "da", "ia", "d", "sha", "ta", "Ma", "media", "f", "m", "ga", "am", "ya", "ema", "alpha", "ea", "e", "mm", "mc"], "mb": ["em", "km", "amp", "ib", "mn", "fb", "bp", "ms", "pb", "nm", "meg", "ym", "emb", "md", "ph", "mp", "ab", "kb", "vm", "cb", "cm", "MB", "bf", "bb", "rb", "eb", "m", "sm", "bm", "amb", "db", "gb", "bc", "mm", "big", "mc", "nb", "pg", "lb"], "dp": ["lp", "loc", "wp", "p", "ps", "pb", "fp", "dat", "sl", "tp", "pm", "cp", "pos", "tmp", "gp", "dep", "dB", "sp", "vs", "mp", "vp", "dm", "decl", "grad", "src", "bb", "pi", "d", "DP", "dl", "dt", "dq", "pp", "deb", "port", "proxy", "dr", "dc", "address", "df", "pkg", "di", "resp", "data", "db", "adr", "wd", "prep", "dim", "zip", "np", "pd", "imp", "yp", "py", "ds", "dos", "hp", "pg", "ip"], "_": [" p", "p", "g", " seq", " time", "x", " un", "l", "q", "f", "m", "J", "all", "ip"], "sa": ["aa", "s", "wa", "sc", "sta", "va", "ja", "na", "ai", "ama", "xa", "sd", "mas", "SA", "la", "ba", " cs", "si", "Sa", "pa", "da", "sn", "ia", " SA", " Sa", "sha", "ta", "ra", "aaa", "ca", "sk", "asa", " si", "ga", "oa", "alpha", "asi", "sam", "za", " na", "pc"], "sb": ["s", "ib", "fb", "bp", "ai", "pb", "bs", "ama", "sd", "sf", "wb", "ba", "sp", "SB", "ab", "si", "pa", "sn", "cb", "cm", "bb", "rb", "bf", "sg", "sha", "ga", "sm", "bm", "db", "gb", "bc", "sam", "nb", "lb", "bi"], "i": ["gi", "s", "ui", "ie", "int", "qi", "mi", "p", "ai", "ic", "y", "o", "ini", "ix", "iu", "api", "z", "si", "x", "ind", "I", "ia", "l", "u", "pi", "d", "q", "ki", "f", "io", "m", "xi", "ori", "di", "ni", "ip", "ci", "v", "e", "t", "info", "multi", "id", "li", "ii", "ik", "bi", "ti"], "a": ["aa", "s", "wa", "tta", "sta", "va", "at", "p", "na", "qa", "ai", "ama", "fa", "aw", "eta", "y", "r", "xa", "la", "ba", "mA", "ab", "au", "z", "ana", "da", "pa", "A", "ar", "af", "w", "ka", "ia", "ak", "ata", "u", "d", "q", "ta", "sha", "aaa", "ca", "f", "ac", "asa", "m", "ga", "area", "aj", "am", "ae", "alpha", "ea", "e", "ha", "an", "ad"], "b": ["s", "aa", "p", "bs", "g", "y", "r", "h", "o", "wb", "ba", "B", "ab", "z", "x", "w", "cb", "l", "bb", "d", "rb", "u", "bf", "f", "eb", "m", "ga", "xb", "db", "v", "e", "nb", "lb"], "c": ["s", "p", "g", "h", "o", "y", "r", "C", "z", "ch", "cy", "cb", "cm", "l", "u", "d", "cn", "ca", "f", "cs", "ac", "m", "dc", "ci", "v", "e", "bc", "xc"], "j": ["ji", "sh", "ie", "ib", "ja", "p", "g", "jo", "y", "r", "jj", "o", "h", "iq", "jl", "z", "jan", "ch", "x", "ind", "I", "ak", "l", "u", "d", "uj", "q", "f", "jp", "m", "aj", "J", "v", "bj", "e", "li", "ii", "ik"], "k": ["km", "s", " p", "kid", "ke", "p", "kh", "g", "dk", "K", "y", " v", "o", "h", "kk", "ijk", "kg", "ks", "kn", "z", "x", "kw", "w", "kin", " K", "ko", "ak", "l", "ok", "u", "d", "q", "ki", "f", "ky", "sk", "ac", "m", "ga", "ku", "kick", "v", "key", "ck", "e", "id", " u", "ik", "uk", "ad"]}}
{"code": "S = sorted(input())\\n\\nif len(set(S)) == 2 and S.count(S[0]) == S.count(S[-1]):\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "103", "substitutes": {"S": ["F", "s", "VS", "E", "L", "DS", "V", "H", "Q", "X", "SE", "SR", "NS", "Sample", "INS", "Si", "TS", "PS", "SH", "Source", "DATA", "ST", "SI", "O", "SA", "P", "T", "C", "B", "D", "SB", "ASC", "OSS", "Session", "A", "Service", "RS", "DES", "Sing", "SS", "OS", "US", "Single", "SAN", "Set", "CS", "POS", "U", "R", "M", "GS", "SM", "SP", "String", "SHA", "N", "G", "SO", "BS", "SU", "ES", "Socket"]}}
{"code": "import numpy as np\\n\\nclass UnionFind:\\n    def __init__(self, sz: int):\\n        self._par: np.array = np.full(sz + 1, -1)\\n\\n    def root(self, a: int):\\n        if self._par[a] < 0:\\n            return a\\n        self._par[a] = self.root(self._par[a])\\n        return self._par[a]\\n    \\n    def size(self, a: int):\\n        return -self._par[self.root(a)]\\n    \\n    def unite(self, a, b):\\n        a = self.root(a)\\n        b = self.root(b)\\n        if a != b:\\n            if self.size(a) < self.size(b):\\n                a, b = b, a\\n            self._par[a] += self._par[b]\\n            self._par[b] = a\\n    \\nif __name__ == '__main__':\\n    N, M = map(int, input().split())\\n    uf = UnionFind(N + 1)\\n    for i in range(M):\\n        a, b = map(int, input().split())\\n        uf.unite(a, b)\\n    ans = 1\\n    for i in range(1, N + 1):\\n        ans = max(ans, uf.size(i))\\n    print(ans)", "target": "602", "substitutes": {"self": ["s", "Self", "false", "_", "plus", "gh", "per", "orig", "this", "http", "x", "user", "l", "ctx", "q", "f", "right", "ac", "proxy", "co", "private", "data", "type", "dev", "np", "gen", "er", "part", "manager", "new", "error", "layer", "full", "auto", "worker", "host", "load", "h", "pos", "client", "api", "mp", "ng", "comp", "utils", "node", "old", "man", "os", "e", "all", "next", "ang", "form", "ack", "raw", "spec", "default", "p", "r", "case", "instance", "result", "es", "cache", "now", "get", "max", "resp", "parent", "map", "graph", "func", "view", "config", "block", "other", "k", "pop", "g", "c", "context", "work", "results", "app", "wh", "math", "master", "w", "shared", "args", "ok", "one", "object", "ws", "no", "cl", "parse", "home", "ref", "n"], "_par": ["xPar", "existingparent", " _Par", "placepar", "_arc", "_param", "_var", "_dr", "placeparent", "_parent", "xpar", "placear", "builtroot", "_parse", " _arc", "_dep", "existingarc", "hotar", " _root", "hotpar", "_cat", "builtvar", "hotparam", "allpar", " _ar", "placeparam", " _var", "placepol", "existingdep", "builtparse", "existingparse", "placePar", "existingvar", "placearc", "xparam", "prodep", "existingper", "placepair", "_Par", "existingpar", "placecat", "_pol", "propar", " _cat", " _dr", "hotper", "allvar", "_pair", " _dep", "xpair", "placevar", "proper", " _param", "proparse", " _per", "_ar", "_per", "allparse", "placeper", " _parse", "placeparse", "_root", "builtpar", "allroot", " _pol"], "a": ["s", "sta", "int", "ai", "y", "any", "la", "x", "ar", "ah", "ak", "l", "bb", "j", "f", " A", "ac", "abs", "ea", "abc", "ad", "aa", "auto", "va", "h", "api", "au", "array", "ia", "u", "ca", "sa", "ga", "ae", "e", "all", "add", "an", "ao", "p", "qa", "access", "aw", "art", "pa", "index", "da", "A", "af", "action", "d", "m", "area", "am", "parent", "alpha", "off", "ma", "na", "c", "ama", "fa", "o", "app", "ba", "ab", "w", "aaa", "asa", "aj", "active", "n"], "b": ["aa", "be", "other", "s", "ub", "bur", "fb", "p", "bs", "pb", "c", "y", "o", "r", "wb", "mb", "api", "B", "ba", "ab", "z", "x", "bl", "w", "sb", "cb", "body", "l", "bh", "bb", "d", "u", "rb", "nb", "abb", "root", "bf", "f", "j", "eb", "m", "xb", "db", "v", "base", "e", "an", "bc", "part", "lb", "bi", "n"], "N": ["F", "MN", "E", "L", "NO", "V", "NN", "H", "Q", "X", "Y", "Size", "Num", "NS", "K", "Na", "NM", "CNN", "O", "P", "T", "B", "C", "D", "Len", "Ne", "S", "A", "No", "NT", "Ni", "Z", "Ns", "ND", "U", "R", " n", "NA", "Wh", "Mo", "NUM", "n"], "M": ["F", "MN", "E", "L", "V", "ME", "H", "X", "Y", "MO", "K", "DM", "RM", "NM", "O", "P", "T", "B", "C", "D", "LM", "MD", "S", "CM", "OM", "MB", "Z", "m", "MC", "U", "R", "Mi", "MS", "J", "MM", "MT", "Mo", "NUM", "n"], "uf": ["uber", "ffff", "ud", "pb", "fp", " buf", "cp", "FF", "buf", "ph", "ume", "uff", "ab", "uc", "utils", "ubs", "af", "cv", "now", "cb", "buff", "rub", "ctx", "bf", "ub", "fed", "buffer", "rb", "ff", "ki", "f", "lf", "du", "parser", "um", "aux", "df", "uk", "lu", "gb", "util", "raf", "TF", "PU", "cf", "uno", "Ul", "UF", "ul", "feed", "uffy", "UL"], "i": ["ih", "ui", "ie", "int", "ei", "qi", "p", "ai", "g", "c", "o", "y", "r", "ini", "iu", "z", "si", "index", "x", "ind", "I", "l", "u", "pi", "d", "io", "j", "f", "m", "xi", "di", "ni", "ip", "ci", "v", "e", "id", "li", "ii", "n", "bi", "ti"], "ans": ["s", "offs", "span", "nas", "amps", "lan", "ams", "atan", "na", "gan", "ats", "aning", "anas", "AN", "ANS", "anes", "ks", "la", "mean", "ane", "aces", "ann", "anon", "ani", "anc", "au", "ays", "es", "ana", "can", "nan", " means", "An", "A", "anned", "anks", "aned", "max", "ons", "aus", "ids", "anne", "leans", "cs", "ants", "ns", "ases", "os", "ds", "ops", "an", "ins"]}}
{"code": "n=int(input())\\na=sorted(list(map(int,input().split())))\\nai=a[-1]\\naa=ai/2\\nans=float(\"inf\")\\nfor i in range(n-1):\\n    tmp=abs(a[i]-aa)\\n    if tmp<ans:\\n        ans=tmp\\n        aj=a[i]\\nprint(ai,aj)", "target": "207", "substitutes": {"n": ["s", "k", "span", "non", "p", "na", "c", "o", "r", "nc", "num", "h", "y", "net", "ne", "nu", "z", "x", "nan", "l", "d", "nt", "nn", "f", "j", "network", "m", "ns", "no", "b", "t", "N", "nb"], "a": ["s", "wa", "sta", "va", "at", "p", "na", "c", "aw", "fa", "y", "la", "ba", "mA", "ab", "au", "array", "ar", "A", "w", "u", "aaa", "ca", "f", "sa", "asa", "ga", "ac", "m", "area", "aux", "am", "input", "ae", "oa", "alpha", "b", "aaaa", "ea", "e", "an", "ad"], "ai": ["wa", "ami", "AI", "na", "qa", "fa", "aii", "ay", "ba", "ann", "au", "AA", "ais", "si", "A", "af", "ari", "aaa", "ca", "sa", "agi", "ac", "asa", "adi", "area", "ait", "am", "ae", "oa", "alpha", "ci", "ni", "asi", "ii", "an", "bi", "ad"], "aa": ["wa", "va", "qa", "na", "fa", "ay", "ba", "au", "AA", "ana", "pa", "A", "ah", "af", "ak", "aaa", "ca", "sa", "asa", "ac", "area", "am", "ae", "oa", "alpha", "aaaa", "ea", "asi", "apa"], "ans": ["s", "auto", "ao", "amps", "eps", "ams", "atan", "na", "ms", "ats", "anas", "AN", "aos", "ay", "ANS", "mean", "ann", "anon", "ani", "au", "annot", "pa", " means", "nan", "An", "A", "aned", "ons", "aus", "sk", "sa", "asa", "ants", "ns", "os", "oa", "abs", "ls", "asi", "sam", "an", "ad"], "i": ["gi", "ih", "k", "ui", "ie", "int", "qi", "mi", "p", "c", " I", "h", "y", " iP", "ini", "ix", "iu", "ti", "z", "eni", "si", "index", "x", "yi", "ind", "start", " il", "I", "l", "u", "d", "pi", "q", "j", "io", "f", "m", "xi", "ri", "di", "ci", "v", "b", " ii", "my", "e", "id", "li", "ii", "bi", "ad", "ip"], "tmp": ["ott", "amp", "cmp", "const", "int", "span", "p", "acc", "bp", "img", "nm", "tp", "result", "app", "cp", "beta", "txt", "attr", "emp", "sp", "temp", "mp", "au", "diff", "now", "start", "next", "current", "adj", "obj", "bt", "nb", "rb", "nt", "nn", "aaa", "anne", "angle", "param", "agi", "area", "amount", "ppa", "alpha", "stuff", "foo", "np", "aaaa", "part", "test", "tc", "offset"], "aj": ["ami", "anna", " maj", "aka", "aja", "asha", "ay", "ann", "ab", "ani", "az", "au", "z", "AA", "ah", "af", "av", "hat", "adj", "apt", "ra", "aaa", "j", "anne", "sa", "ax", "asa", "area", "ait", "am", "ae", "oa", "ij", "ara", "aq", "aut", "ad", "apa"]}}
{"code": "n = int(input())\\nans = n\\nL = [list(map(int, input().split())) for _ in range(n)]\\npq = []\\nfor i in range(n):\\n    for j in range(i+1, n):\\n        pq.append([L[j][0] - L[i][0], L[j][1] - L[i][1]])\\nfor p, q in pq:\\n    cost = n\\n    for x, y in L:\\n        if [x-p, y-q] in L:\\n            cost -=1\\n    ans = min(ans, cost)\\nprint(ans)\\n", "target": "698", "substitutes": {"n": ["s", "k", "span", "c", "o", "nc", "num", "number", "net", "pos", "r", "h", "size", "ne", "z", "nan", "sn", "w", "l", "u", "d", "max", "nn", "nt", "f", "network", "m", "ln", "ns", "no", "ni", "len", "b", "v", "np", "e", "N", "count", "t", "pn", "nb", "an"], "ans": ["s", "aid", "int", "lan", "span", "cas", "nas", "offs", "ends", "na", "ps", "ai", "gan", " ads", "AN", "ads", "ANS", "asts", "ks", " pays", "mean", "ann", "anon", "anc", "ares", "cus", "ana", "errors", "params", " means", "can", "sn", " costs", "ays", "facts", "aned", "nn", "ids", "ons", "abilities", "works", "ln", "ens", "cs", "sk", "ants", " spans", "ns", "rank", "man", "co", "os", "features", "ls", "cons", "plan", "oss", "an", "ins"], "L": ["F", "E", "LB", "V", "LT", "IL", "NL", "ML", "Q", "X", "FL", "LA", "dL", "LP", "Lu", "LU", "O", "P", "T", "C", "B", "LM", "D", "LD", "PL", "S", "A", "SL", "W", "Layer", "I", "l", "Li", "LR", "EL", "LE", "Line", "ln", "Z", "BL", "RL", "CL", "U", "List", "M", "J", "LO", "LI", "N", "XL", "DL", "LG", "LL", "G", "cl", " l", "VL", "Long", "UL"], "_": ["k", "g", " __", " k", "I", "l", "f", "m", "ac", "J", "len", "all", "id", "val", " all"], "pq": ["Pq", "ppqs", "pque", "preQ", "pqu", "lpqs", "preqs", "ppque", "ppQ", "lpq", "ppq", "Pque", "PQ", " pque", "pqs", "pQ", " pqs", " pQ", "prqs", "Pqu", "preq", "prequ", "Pqs", "prqu", "prQ", "prq", "lpQ"], "i": ["ji", "k", "a", "ie", "int", "phi", "ai", "c", "jo", "o", "r", "ix", "ini", "iu", "jl", "z", "je", "si", "index", "ind", "start", "I", "it", "l", "u", "d", "pi", "f", "io", "m", "oj", "di", "ni", "ci", "ij", "b", "v", "e", "id", "li", "ii", "bi", "ip"], "j": ["ji", "k", "a", "ja", "c", "jo", "o", "jj", "jl", "z", "si", "index", "ind", "w", "I", "obj", "l", "u", "d", " J", "jp", "f", "m", "oj", "ij", "J", "v", "b", " ii", "key", "e", "t", "kj", "li", "ii", " l"], "p": ["lp", "k", "a", "c", "o", "h", "per", "pm", "pr", "cp", "ap", "P", "po", "z", "pa", "w", "l", "pl", "pi", "u", "d", "jp", "f", "m", "pp", "xi", "ip", "v", "b", "np", "pair", "e", "pe", "pn", "t", "py", " xp", "pc"], "q": ["k", "sq", "sh", "qs", "qu", "qi", "Q", "qa", "g", "c", "h", "o", "iq", "ph", "P", "z", "ch", "w", "u", "d", "max", "eq", "f", "dq", "m", "pp", "qt", "v", "aq", "t", "e", "quant", "id", "qq"], "cost": ["k", "risk", "value", "sc", "span", "c", "resource", "price", " Cost", "pos", "gross", "weight", "mean", "paid", "coll", "z", "scale", " costs", "Cost", "st", "tax", "d", "ace", "CO", "score", "f", "sk", "cs", "ac", "pp", "cos", "rank", "co", "fee", "depth", "shape", "man", "length", "loss", "cons", "cc", "grade", "step", "id", "eff", "oss", "sum"], "x": ["s", "k", "a", "int", "X", "xs", "c", "xx", "h", "rx", "px", "ix", "o", "z", "xt", "ex", "index", "w", "l", "u", "d", "f", "ax", "m", "pp", "xi", "ci", "xp", "v", "b", "t", "pe", "e", " xp", "pc"], "y": ["yr", "s", "k", "a", "ye", "Y", "c", "h", "o", "yn", "ym", "z", "ch", "yi", "cy", "w", "ny", "yt", "l", "u", "d", "f", "m", "yy", "v", "yl", "b", "t", "e", "py", "vy"]}}
{"code": "n=int(input())\\nres=0\\nfor _ in range(n):\\n  a,b=map(int,input().split())\\n  res+=(abs(a-b)+1)\\nprint(res)", "target": "720", "substitutes": {"n": ["s", "k", "span", "p", "g", "c", "i", "o", "r", "nc", "num", "number", "h", "y", "nu", "ne", "z", "fn", "x", "nan", "sn", "w", "l", "u", "d", "f", "j", "m", "ns", "no", "len", "nos", "e", "N", "count", "nb", "nor"], "res": ["rh", "s", "rest", "rus", "p", "na", "exp", "ms", "arr", "err", "our", "c", "i", "rate", "r", "work", "prev", "result", "results", "rep", "re", "gr", "rez", "rev", "grid", "blocks", "x", "clean", "Res", "vre", "u", "req", "resolution", "out", "sol", "RES", "real", "ns", "resh", "resp", "data", "os", "rem", "abs", "nr", "ress", "base", "e", "reset", "id", "ret", "range"], "_": ["__", " g", "g", "of", " time", " __", " line", " un", "f"], "a": ["aa", "s", "auto", "va", "p", "na", "aw", "c", "i", "o", "y", "h", "num", "r", "la", "ba", "ab", "au", "da", "x", "A", "w", "l", "u", "f", "sa", "ac", "ga", "area", "am", "aj", "oa", "alpha", "abs", "an", "ad"], "b": ["aa", "s", "p", "bs", "bp", "c", "i", " B", "y", "r", "beta", "B", "ba", "ab", "z", "A", "sb", "l", "bf", "d", "u", "bb", "rb", "j", "f", "eb", "m", "abs", "v", "base", "e", "nb", "lb"]}}
{"code": "import bisect\\n\\nMOD=10**9+7\\nN=int(input())\\n\\nclist=[]\\nfor i in range(N):\\n  c=int(input())\\n  clist.append(c)  \\n#print(clist)\\n\\nc2list=clist[:1]\\nfor i in range(1,N):\\n  if clist[i]!=c2list[-1]:\\n    c2list.append(clist[i])\\n#print(c2list)\\nN2=len(c2list)\\n\\ncldic={}\\ndp=[0]*(N2-1)+[1]\\nfor i in range(N2):\\n  c=c2list[i]\\n  dp[i]=dp[i-1]\\n  if c in cldic:\\n    dp[i]+=dp[cldic[c]]      \\n  cldic[c]=i\\n    \\n#print(dp)\\nprint(dp[-1]%MOD)", "target": "708", "substitutes": {"MOD": [" M", "L", "NC", " O", "K", " mode", " mod", "P", "C", "D", " Mod", " C", "S", "A", "I", " J", "Z", " S", " module", "R", "M", "CN", "mod", " Z", " ND", " P", "NUM", "Mod"], "N": ["F", "E", "L", "V", "NL", "X", "Y", "Size", "NE", "K", "Na", "NW", "NM", "O", "P", "T", "C", "B", "D", "Ne", "S", "W", "I", "Ni", "Z", "Ns", "CL", "R", "M", "J", "GN", "CN", "NB", "SN", " n", "G", "KN", "NA", "n"], "clist": ["Lest", "clists", "Clist", "cllist", "Clists", "clite", "CLlist", " cllist", "LIST", " clest", "Cllist", "clIST", "ClIST", "Clst", "clest", " clst", "Clest", "Lst", "clst", "CLists", "Clite", "List", "CList", "CLite", " clite", " clIST", " clists"], "i": ["gi", "ie", "ib", "p", "ic", " I", "y", "h", "r", "nc", "iu", "z", "index", "ind", "I", " ic", "l", "d", "q", "j", "f", "ac", "ct", "e", "col", "id", "n", "ip"], "c": ["k", "a", "int", "p", "g", "o", "r", "nc", "C", "lc", "uc", "ce", "cy", "cu", "l", "u", "d", "f", "rc", "cs", "ac", "char", "dc", "cd", "ci", "b", "cf", "e", "t", "cr", "cc", "cell", "xc", "n"]}}
{"code": "def main():\\n  n,m,k = map(int, input().split())\\n  f = [1]\\n  p = 998244353\\n  for i in range(1, n):\\n    f.append(f[-1] * i % p)\\n\\n  ans = 0\\n  def nCk(n,k):\\n    return f[n] * pow(f[n-k], p-2, p) * pow(f[k], p-2, p) % p\\n\\n  for i in range(k+1):\\n    ans += (m * nCk(n-1, i) * pow(m-1, n-1-i, p)) % p\\n  print(ans % p)\\n\\nif __name__ == '__main__':\\n  main()", "target": "375", "substitutes": {"n": ["s", "a", "mn", "c", "o", "r", "y", "num", "nc", "net", "un", "pos", "en", "rn", "ne", "nu", "z", "on", "x", "sn", "w", "l", "u", "d", "pi", "nn", "q", "nt", "cn", "j", "ln", "network", "ns", "no", "v", "b", "np", "t", "N", "e", "pn", "inn", "dn", "nb", "an"], "m": ["s", "a", "mn", "mi", "ms", "g", "c", "y", "o", "r", "num", "pm", "h", "z", "x", "mu", "w", "cm", "l", "u", "d", "pi", "q", "j", "M", "v", "b", "e", "N", "t", "gm", "mc", "an"], "k": ["s", "ke", "g", "c", "K", "y", "o", "h", "r", "kk", "ks", "kn", "z", "x", "mk", "kw", "w", "kin", "ko", "ak", "it", "l", "ok", "u", "d", "q", "ki", "sk", "j", "ku", "kick", "v", "b", "key", "e", "t"], "f": ["F", "s", "a", "fd", "fb", "g", "c", "fp", "h", "o", "r", "y", "sf", "fe", "inf", "tf", "fs", "z", "fc", "fn", "x", "fm", "file", "w", "l", "u", "d", "q", "j", "function", "fen", "self", "df", "input", "fl", "func", "b", "v", "cf", "t", "e", "info", "form"], "p": ["lp", "s", "op", "a", "pid", "int", "pre", "bp", "ps", "c", "fp", "y", "r", "tp", "h", "o", "cp", "pr", "pm", "ap", "P", "sp", "pt", "z", "pa", "x", "w", "l", "u", "pi", "d", "pl", "q", "j", "pu", "pp", "point", "port", "jp", "ip", "v", "b", "np", "t", "e", "pn", "pd", "dp", "py", "param", "pc"], "i": ["ui", "a", "ei", "int", "ie", "qi", "mi", "phi", "ai", "ic", "c", "g", "o", "h", "r", "y", "ini", "iu", "ti", "z", "si", "index", "x", "yi", "ind", "I", "l", "u", "pi", "d", "ki", "j", "io", "xi", "di", "ni", "ip", "ci", "v", "b", "e", "t", "li", "ii", "ik", "bi"], "ans": ["s", "ents", "lan", "cas", "span", "amps", "eps", "ams", "ras", "na", "ps", "ats", "anas", "AN", "ANS", "ks", "aces", "ann", "anon", "anc", "ays", "es", "ana", "params", "can", "nan", " means", "ars", "aned", "ons", "aus", "ens", "sk", "cs", "ants", "acs", "ns", "ls", "ips", "cons", "ds", "an", "ins"]}}
{"code": "S=str(input())\\nans=S.replace(\",\" , \" \")\\nprint(ans)", "target": "588", "substitutes": {"S": ["F", "s", "L", "V", "H", "X", "NS", "Si", "K", "TS", "SH", "AN", "SI", "ANS", "SA", "P", "T", "C", "B", "D", "SK", "A", "RS", "I", "SS", "OS", "Single", "CS", "R", "Input", "M", "N", "SN", "G", "SO", "SU"], "ans": ["s", "ents", "annis", "lan", "nas", "atan", "na", "side", "xs", "aning", "AN", "ANS", "any", "ann", "anse", "anc", "ani", "anon", "ana", "can", "asin", "nan", "sn", "cross", "aned", "ass", "meaning", "trans", "man", "scan", "input", "san", "ds", "sv", "sam", "an", "ast", "ins"]}}
{"code": "import re\\nimport sys\\nimport math\\nimport itertools\\nimport bisect\\nfrom copy import copy\\nfrom collections import deque,Counter\\nfrom decimal import Decimal\\nimport functools\\ndef v(): return input()\\ndef k(): return int(input())\\ndef S(): return input().split()\\ndef I(): return map(int,input().split())\\ndef X(): return list(input())\\ndef L(): return list(input().split())\\ndef l(): return list(map(int,input().split()))\\ndef lcm(a,b): return a*b//math.gcd(a,b)\\nsys.setrecursionlimit(10 ** 6)\\nmod = 10**9+7\\ncnt = 0\\nans = 0\\ninf = float(\"inf\")\\nal = \"abcdefghijklmnopqrstuvwxyz\"\\nAL = al.upper()\\n\\nH, W = I()\\n\\npad_s = ['.'*(W+2)]\\nfor h in range(H):\\n  pad_s.append('.' + input() + '.')\\npad_s.append('.'*(W+2))\\n\\nfor i,ss in enumerate(pad_s):\\n  for j,s in enumerate(ss):\\n    if s == '#'\\\\n      and pad_s[i][j+1] == '.'\\\\n      and pad_s[i][j-1] == '.'\\\\n      and pad_s[i+1][j] == '.'\\\\n      and pad_s[i-1][j] == '.':\\n      print('No')\\n      exit()\\n\\nprint('Yes')\\n", "target": "559", "substitutes": {"a": ["aa", "ack", "auto", "va", "ma", "p", "access", "g", "c", "ama", "fa", "aka", "y", "la", "ba", "ab", "au", "da", "x", "A", "u", "aaa", "f", "sa", "ca", "ac", "ga", " A", "area", "aux", "aj", "am", "ae", "alpha", "ea", "ha", "an", "ad", "n"], "b": ["aa", "be", "ib", "fb", "p", "bs", "bp", "pb", "c", "y", "r", "wb", "mb", "beta", "B", "ba", "ab", "x", "A", "sb", "l", "bh", "bf", "rb", "bb", "d", "u", "abb", "ob", "f", "bd", "v", "base", "e", "bc", "nb", "lb", "bi", "n"], "mod": ["mode", "MOD", "acc", "exp", " exp", "mult", "mem", "rec", "num", "round", "temp", " Mod", "scale", "aug", "crit", "comp", "inc", "ind", "sec", "ac", "fun", "depth", "dim", "mods", "dec", "step", "ctr", "Mod"], "cnt": ["cNT", "acct", "acnt", "Cnt", "acount", "CNT", "count", "Cct", "cct", " count", " cNT", " cct", "acNT", "Count"], "ans": [" skip", " mag", " ms", " rc", " sum", " exp", " sig", " bits", " codes", " errors", " tries", " iterations", " means", " pc", " log", " error", " pin", " flags", " no", " si", " ins", " init", " ns", " acc", " na", " flag", " nan"], "inf": [" imp", " info", " z", "p", " Inf", "phi", "acc", " inc", "z", " infinite", "Inf", "nan", " pi", "inc", " nu", "frac", "f", "pp", " INF", " init", " acc", " inst", " infinity", " perf", " warnings", "info"], "al": ["aa", "gal", "Alt", "alt", "align", "Al", "ali", "pal", "ag", "aled", "hal", "fal", "alg", "sal", "el", "aler", "ale", "ab", "AA", "als", "ar", "af", "isal", "dal", "l", "ass", "cal", "mal", "ae", "alpha", "ell", "alias", "ad"], "AL": [" AA", " ab", "Al", " where", " IL", " trans", " letters", " ass", " final", " ASS", " AX", "AA", " Al", " ar", " letter", " AP", " A", " ax", " am", " aid", " alt", " acc", " alias", " AS", " HAL"], "H": ["F", "E", "L", "V", "Q", "X", "Y", "K", "SH", "TH", "AH", "P", "B", "T", "C", "D", "WH", "S", "EH", "I", "GH", "HK", "Z", "HH", "HI", "U", "R", "J", "M", "N", "G", "HA"], "W": ["E", "wa", "L", "V", "Q", "X", "Y", "WD", "WE", "Width", "MW", "SW", "SH", "NW", "GW", "P", "B", "T", "C", "WC", "D", "WH", "Weight", "w", "I", "We", "Tw", "DW", "TW", "WS", "WB", "WF", "U", "M", "EW", "N", "VW", "G", "Wh"], "pad_s": ["pad_p", " pad_p", "input_d", "padIPsets", "pad_sets", "pad_ses", "ad_s", " pad_ses", "padIPs", "pad_d", "ad_e", "ad_in", "padIPd", "pad_sum", "padIPin", "pad_string", " pad_t", "padIPi", " pad_es", "pad_in", " pad_e", "input_sets", "padding_s", "padIPe", "pad_es", "padIPsum", "pad_i", "padding_e", "ad_p", "input_s", " pad_lines", "pad_t", "pad_lines", "padding_p", "ad_i", "pad_e", "padding_string", "input_sum"], "h": ["hs", "ih", "hw", "hy", "p", "kh", "oh", "gh", "ht", "im", "hr", "ch", "ho", "ah", "hh", "bh", "he", "HH", "hi", "hl", "uh", "ha", "hm", " he", "hu", "hp"], "i": ["gi", "ji", "k", "ui", "vi", "ih", "ie", "int", "qi", "p", "ai", "y", "ini", "ix", "iu", "z", "eni", "si", "x", "yi", "w", "I", "it", "l", "u", "pi", "io", "f", "xi", "di", "ni", "ci", "v", "e", "id", "li", "ii", "ik", "n", "bi", "ip"], "ss": ["sq", "dd", "sh", "styles", "sc", "ross", "eps", "hess", "ps", "bs", "tz", "css", "pos", "sf", "sp", "vs", "z", "si", "sn", "sites", "ass", "SS", "\u00df", "nn", "sr", "ssl", "sw", "ns", "ess", "iss", "ws", "us", "su", "rss", "ls", "mm", "ds", "sv", "oss", "pg", "n"], "j": ["gi", "ji", "k", "ie", "ja", "qi", "p", "c", "jo", "y", "o", "jj", "ix", "dj", "pos", "el", "jl", "z", "je", "ch", "index", "x", "jet", "ah", "ind", "w", "adj", "obj", "l", "uj", "d", "q", "js", "jp", "f", "job", "jc", "oj", "note", "br", "aj", "di", "ij", "J", "v", "key", "e", "fr", "kj", "li", "ii", "n"], "s": ["hs", "sq", "sh", "sc", "sid", "groups", "words", "p", "ps", "states", "rows", "c", "sym", "sets", "o", "sl", "ims", "sf", "sp", "si", "es", "sim", "S", "sn", "sb", " signs", "ses", "d", "sg", "sin", "f", "sa", "ssl", "m", "sw", "ments", "ns", "ws", "su", "ts", "v", "gs", "e", "ls", "ds", "sv"]}}
{"code": "N,K=map(int,input().split())\\nA=[0]+list(map(int,input().split()))+[0]\\np=50\\n\\nif K<=p:    \\n    for i in range(K):\\n        B=[0]+[0]*N+[0]\\n        for j in range(1,N+1):\\n            left  = max(0,j-A[j])\\n            right = min(N+1,j+A[j]+1)\\n            B[left]  += 1\\n            B[right] -= 1\\n        A[0]=B[0]\\n        for k in range(1,N+1):\\n            A[k]=A[k-1]+B[k]\\nelse:\\n    A=[N]*(N+2)\\nprint(*A[1:N+1])", "target": "377", "substitutes": {"N": ["F", "Power", "E", "Nat", "Network", "L", "V", "NN", "Max", "H", "Q", "X", "Y", "Size", "Num", "NS", "CNN", "O", "P", "C", "T", "D", "NP", "Len", "Ne", "S", "W", "I", "No", "NT", "Node", "Ni", "Z", "Ns", "U", "R", "J", "M", " n", "G", "KN", "Wh", "NA", "n"], "K": ["F", "Power", "KK", "E", "KI", "V", "H", "Ak", "Q", "X", "Y", "O", "P", "C", "Sk", "SK", "D", "NK", "KS", "KB", "S", "W", "I", "Z", "KR", "PK", "U", "R", "Mask", "J", "M", "G", "KN", "Ku", "n"], "A": ["F", "AD", "GA", "E", "First", "a", "L", "At", "New", "V", "All", "Any", "H", "Az", "Q", "X", "One", "Y", "MA", "AP", "JA", "Adam", "LA", "AST", "This", "AB", "AM", "SA", "P", "C", "T", "D", "As", "Ar", "AC", "API", "mA", "AA", "And", "Alpha", "S", "I", "Ab", "PA", "Ma", "Z", "Average", "Array", "CA", "U", "Part", "alpha", "M", "J", "b", " a", "G", "Am", "HA", "NA", "Ang", "AW", "App"], "p": ["lp", "s", "a", "power", "bp", "c", "h", "r", "tp", "cp", "P", "C", "NP", "w", "l", "pi", "q", "f", "jp", "m", "pp", "BP", "alpha", "b", "np", "t", " P", "n"], "i": ["gi", "ji", "ie", "ai", "g", "c", "isin", "num", "ijk", "iu", "z", "x", "ind", "I", "it", "l", "u", "pi", "d", "q", "f", "jp", "ij", "id", "ik", "ip"], "B": ["F", "E", "L", "V", "H", "Q", "X", "Y", "UB", "PB", "DB", "Left", "BA", "AB", "O", "Bu", "P", "C", "T", "D", "SB", " C", "BB", "Bl", "BI", "S", "TB", " BA", "I", "MB", "Ab", "BE", "OB", "WB", "Beta", "U", "GB", "R", "Part", "J", "M", "b", "NB", "Band", "Both", "G", "Normal", "Block", " b", "Bs"], "j": ["ji", "a", "L", "ja", "g", "c", "y", "o", "jj", "r", "h", "ijk", "P", "jl", "z", "ch", "x", "ind", "w", "adj", "I", "l", "u", "d", "q", "job", "f", "jp", "m", "aj", "ij", "J", "v", "b", "key", "ck", "e", "n"], "left": ["min", "full", "last", "L", "jo", "c", "low", "r", "Left", "z", "bottom", "x", "Right", "l", "child", "d", "max", "one", "small", "old", "self", "nl", "length", "J", "b", "e", "inner", "cl", "offset", "n"], "right": ["rh", "middle", "ack", "end", "raw", "rest", "rights", "third", "X", "correct", "plus", "rw", "r", "work", "bottom", "x", "cross", "w", "Right", "wx", "u", "d", "max", "row", "one", "ax", "half", " Right", "inner", "quick", "n"], "k": ["km", "s", "a", "kid", "ke", "_", "c", "o", "r", "y", "num", "kk", "ks", "kl", "z", "x", "w", "ko", "l", "ok", "u", "d", "unk", "max", "q", "ki", "ky", "f", "sk", "kick", "v", "b", "key", "ck", "e", "id", "ik", "n"]}}
{"code": "S = input()\\n\\nA = []\\n\\nok = 1\\nans = 0\\ncnt = 0\\nfor i in range(len(S)):\\n    if ok == 1 and i < len(S)-1 and S[i] == 'B' and S[i+1] == 'C':\\n        A.append('B')\\n        ans += cnt\\n    elif S[i] == 'A':\\n        A.append('A')\\n        cnt += 1\\n        ok = 1\\n    elif ok == 1 and i > 0 and S[i-1] == 'B' and S[i] == 'C':\\n        continue\\n    else:\\n        A = []\\n        cnt = 0\\n        ok = 0\\n\\nprint(ans)", "target": "305", "substitutes": {"S": ["F", "You", "s", "L", "DS", "Sort", "V", "IS", "H", "Es", "AS", "Q", "X", "Y", "SE", "SC", "Sample", "NS", "INS", "K", "Test", "Si", "TS", "SH", "Parts", "SAM", "Source", "SI", "Su", "O", "SA", "P", "T", "B", "C", "D", "SB", "Files", "Settings", "Session", "W", "Service", "RS", "Sl", "I", "SS", "OS", "Single", "Site", "WS", "Ns", "Set", "CS", "Send", "R", "Input", "Part", "M", "Sign", "String", "GS", "N", "SN", "G", "System", "SO", "BS", "SU", "Socket"], "A": ["AD", "GA", "a", "L", "New", "AI", "X", "AS", "Y", "AP", "Adam", "LA", "AR", "AST", "Parts", "AN", "ANS", "AM", "AB", "P", "B", "T", "C", "As", "AC", "Ar", "AU", "API", "AV", "AA", "Alpha", "I", "Ab", "Anne", "Auth", "Array", "CA", "AF", "M", "N", "G", "Am", "ACC", "An", "App"], "ok": ["bad", "ih", "error", "k", "loc", "ack", "ol", "oks", "_", "err", "c", "oh", "oi", "o", "syn", "log", "Ok", "iter", "oc", "ick", "ann", "anc", "od", "clean", "valid", "ind", "ko", "ak", "bug", " error", "nt", "og", "ac", "sync", "kit", " OK", "scan", "fail", "no", "os", "check", "OK", "oko", "ci", "ck", "good", "count", "all", "id", "ik", "ori"], "ans": ["s", "error", "a", "auto", "lan", "ins", "AS", "oks", "na", "ai", "ms", "ats", "arts", "Ann", "AN", "aos", "ANS", "oc", "aces", "As", "ann", "anon", "anc", "ADS", "annot", "ays", "art", "ana", "can", "errors", "Args", "An", "ars", "args", "aned", "ons", "ens", "sk", "cs", "ants", "acs", "ns", "Ns", "scan", "no", "os", "reads", "CAN", "ls", "Scan", "ops", "an", "n"], "cnt": ["pcrt", "tnd", "cNT", "Cannot", "pcant", "CNT", "acannot", "cnc", " crt", " cNT", "ccount", "crt", " cnc", "acnt", " cannot", "Cnt", " cno", "seccount", " cant", "Cnc", "Cno", "tcount", "ecnt", "acNT", "sccount", "scnt", "secount", "tount", "ecannot", "acno", "pcnt", "cno", "secnt", "cannot", "tnt", "secnd", "scnd", "cant", "Crt", "Cant", "pcNT", "count", "ecnc", "ecNT", "cnd", "scount"], "i": ["gi", "ih", "s", "k", "ui", "end", "a", "ei", "ie", "qi", "p", "init", "ai", "phi", "c", "g", " I", "oi", "o", "y", "ix", "ini", "iu", "slice", "ti", "z", "mini", "si", "eni", "index", "x", "yi", "ind", "start", "I", "uri", "l", "u", "d", "pi", "ki", "j", "io", "f", "xi", "ori", "di", "ni", "ip", "ci", "isi", "b", "v", "e", "count", "info", "multi", "id", "li", "ii", "bi", "n"]}}
{"code": "def g(s):\\n    a, b, c = list(map(int, s.split()))\\n    for i in range(a, b+1):\\n        if c % i == 0:\\n            yield 1\\n\\nprint(sum(g(input())))", "target": "630", "substitutes": {"s": ["ss", "sq", "strings", "spec", "sample", "p", "g", "sym", "sets", "speech", "sf", "si", "es", "expression", "S", "series", "sb", "services", "ses", "d", "sg", "sup", "f", "sync", "ns", "ws", "input", "single", "su", "string", "space", "e", "sv", "source", "n"], "a": ["aa", "p", "ai", "g", "aw", "y", "la", "ab", "da", "x", "A", "l", "u", "d", "f", "sa", "ca", "ac", "asa", "area", "am", "aj", "ae", "alpha", "e", "an", "ad", "offset", "n"], "b": ["aa", "k", "p", "bs", "g", "y", "r", "h", "wb", "bis", "mb", "B", "ba", "ab", "z", "x", "w", "body", "l", "bb", "d", "u", "f", "j", "m", "v", "base", "e", "count", "sub", "nb", "ad", "n"], "c": ["k", "p", "y", "r", "h", "num", "C", "lc", "size", "z", "fc", "x", "cy", "cu", "w", "l", "u", "d", "max", "ca", "f", "rc", "cs", "ac", "m", "dc", "ci", "v", "e", "bc", "count", "cc", "col", "xc", "abc", "n"], "i": ["gi", "k", "int", "p", "phi", "ai", "oi", "y", "h", "o", "ti", "z", "si", "index", "x", "ind", "w", "I", "l", "u", "pi", "d", "f", "j", "xi", "ci", "v", "e", "t", "id", "li", "ii", "bi", "n"]}}
{"code": "N, M = map(int, input().split())\\nA = [0]*N\\nfor _ in range(M):\\n    x, y = map(int, input().split())\\n    x, y = x-1, y-1\\n    A[x]+=1\\n    A[y]+=1\\nfor a in A:\\n    if a%2:\\n        print(\"NO\")\\n        exit()\\nprint(\"YES\")", "target": "486", "substitutes": {"N": ["F", "MN", "E", "L", "NO", "V", "H", "Q", "X", "Y", "NS", "K", "O", "P", "B", "C", "T", "D", "S", "W", "I", "NT", "Z", "Ns", "U", "R", "J", " n", "G", "NA", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "K", "DM", "O", "P", "B", "T", "C", "D", "MD", "S", "W", "CM", "Z", "m", "U", "R", "Mi", "J", "MS", "G", "n"], "A": ["F", "GA", "E", "L", "V", "H", "Q", "X", "Y", "LA", "K", "Na", "AH", "O", "AM", "P", "B", "C", "T", "D", "As", "SA", "Ar", "API", "AA", "Alpha", "S", "W", "I", "Ma", "Z", "Average", "Array", "CA", "U", "b", "G", "Am", "NA", "An"], "_": [" p", "p", "i", " time", "d", "j", "f", " n", "an", "n"], "x": ["dx", "k", "int", "X", "p", "Y", "xs", "c", "g", "i", "width", "xx", "yx", "rx", "h", "px", "o", "ix", "z", "on", "ex", "index", "w", "l", "u", "d", "one", "f", "ax", "j", "m", "xi", "no", "b", "v", "e", "xy", "n"], "y": ["yr", "min", "dy", "X", "p", "Y", "c", "i", "o", "ym", "ay", " Y", "z", "yi", "cy", "w", "start", "ny", "l", "yt", "u", "d", "j", "sy", "f", "m", "yy", "ya", "oy", "b", "v", "e", "t", "py", "vy", "ey", "n"], "a": ["aa", "s", "va", "ma", "p", "na", "Y", "ai", "c", "i", "fa", "Na", "mA", "au", "ar", "ia", "ata", "ta", "sa", "m", "ac", "ga", "no", "ae", "alpha", "b", "ea", "count", " n", "an", "n"]}}
{"code": "n = int(input())\\nl = [0]*101\\ni = 2\\nfor i in range(2,n+1):\\n    j = 2\\n    while i >= 2:\\n        while i % j == 0:\\n            i = i//j\\n            l[j] += 1\\n        j += 1\\n\\nans = sum(x >= 74 for x in l)\\n\\na = sum(x >= 2 for x in l)\\nb = sum(x >= 24 for x in l)\\nans += b*(a-1)\\n\\na = sum(x >= 4 for x in l)\\nb = sum(x >= 14 for x in l)\\nans += b*(a-1)\\n\\na = sum(x >= 2 for x in l)\\nb = sum(x >= 4 for x in l)\\nans += b*(b-1)*(a-2)//2\\n\\nprint(ans)", "target": "145", "substitutes": {"n": ["s", "k", "p", "c", "o", "r", "nc", "en", "num", "y", "ne", "z", "w", "u", "d", "nn", "nt", "f", "m", "ns", "ni", "v", "len", "t", "N", "e", "nb", "nor"], "l": ["lp", "s", "k", "ol", "L", "line", "late", "ze", " L", "p", "al", "g", "c", "ly", "o", "r", "h", "lis", "y", "sl", "like", "el", "left", "lc", "jl", "kl", "z", "ch", "w", "u", "Li", "d", "pl", "ll", "q", "ln", "f", "dl", "m", "rl", "list", "nl", "ci", "lu", "v", "ell", "e", "ls", "all", "t", "le", "il", "li", "ul", "lin"], "i": ["ji", "s", "k", "ui", " bi", "ie", "ei", "p", "phi", "ai", "g", "c", "oi", "o", "y", "h", "ini", "r", " vi", "iu", "ti", " ti", "z", "si", "index", "yi", " pi", " mi", "I", "it", "u", "pi", "d", "q", "f", "m", " si", "xi", "ni", "ip", "v", " ii", "e", "zi", "id", " mini", "li", "ii", "bi"], "j": ["new", "ji", "s", "k", "dy", "ie", "ja", "p", "c", "y", "o", "jj", "r", "h", "log", "z", "si", "ch", "start", "u", "d", "uj", "q", "job", "jp", "f", "m", "jc", "xi", "br", "list", "ij", "J", "v", "e", "fr", "se", "li", "ii", "next"], "ans": ["ums", "s", "auto", "groups", "cas", "nas", "amps", "ends", "ams", "na", "span", "ai", "ats", "ions", "anas", "ads", "photos", "ANS", "ks", "la", "ras", "aces", "ann", "ani", "au", "ays", "ana", "als", "can", " means", "A", "es", "ars", "errors", "ands", "outs", "aves", "args", "runs", "lines", "aned", "ations", "ons", "aus", "ln", "ens", "cs", "sk", "ca", "leans", "ns", "old", "os", "len", "alias", "ls", "olds", "offs", "ds", "li", "an", "ad"], "x": ["dx", "s", "k", "full", "ys", "python", "rex", "X", "p", "tx", "ext", "exp", "xs", "c", "g", "yx", "xx", "fx", "y", "work", "lex", "ix", "yn", "h", "px", "nex", "ph", "rax", "z", "xt", "ex", "index", "es", "xxx", "cross", "w", "php", "u", "wx", "one", "f", "ax", "plex", "ww", "ux", "xi", "data", "ct", "xe", "v", "xml", "xp", "e", "t", "xes", "xy", "my", "id", "word", "bit", "rx", "lin"], "a": ["aa", "auto", "va", "at", "ma", "p", "ai", "aw", "c", "ama", "fa", "y", "o", "api", "la", "ba", "ab", "z", "ana", "da", "A", "ar", "ah", "w", "af", "u", "d", "aaa", "f", "sa", "ca", "asa", "ac", "m", "area", "am", "aj", "ae", "alpha", "v", "e", "an", "ad"], "b": ["aa", "be", "s", "k", "ib", "fb", "p", "bs", "g", "c", "y", "o", "r", "h", "app", "wb", "ba", "B", "ab", "z", "A", "w", "sb", "cb", "body", "ob", "rb", "d", "u", "bb", "f", "bd", "ca", "m", "br", "ae", "abs", "gb", "v", "bar", "base", "e", "bc", "an", "lb", "bi", "ad"]}}
{"code": "s= input()\\nk = sorted(s)\\nS = ''\\nfor i in k:\\n  S += i\\nif S == 'abc':\\n    print('Yes')\\nelse:\\n    print('No')", "target": "777", "substitutes": {"s": ["ss", "a", "strings", "south", "p", "xs", "c", "o", "r", "ks", "es", "search", "w", "l", "services", "lines", "d", "f", "j", "cs", "m", "sync", "ssl", "ns", "self", "sections", "input", "b", "v", "e", "source", "sci", "n", "ins"], "k": ["km", "spec", "ke", "p", "c", "K", "o", "work", "kk", "king", "ijk", "Sk", "ks", "C", "SK", "kn", "kl", "KS", "kin", "w", " K", "ak", "ok", "u", "q", "j", "sk", "ky", "cs", "ek", "ku", "kind", "key", "v", "ck", "e", "kr", "id", "ik", " sk", "n"], "S": ["F", "E", "L", "V", "H", "Q", "X", "SE", "K", "Si", "Su", "SI", "O", "P", "T", "C", "B", "D", "Sa", "A", "W", "I", "SS", "Z", "U", "R", "M", "Sign", "String", "N", "G"], "i": ["gi", "ji", "ui", "a", "ei", "int", "ie", "chi", "p", "ai", "o", "ini", "iu", "slice", "ti", "z", "si", "x", "I", "it", "l", "u", "ki", "io", "f", "j", "xi", "di", "ni", "ci", "ip", "v", "e", "multi", "id", "li", "ii", "ik", "n"]}}
{"code": "a,b = map(int,input().split())\\nc = a\\n\\nfor i in range(b):\\n    if c % b == 0:\\n        break\\n    c += a\\n\\nprint(c)", "target": "209", "substitutes": {"a": ["aa", "s", "wa", "auto", "int", "va", "ma", "na", "ai", "aw", "y", "o", "ba", "ab", "au", "da", "x", "A", "ar", "w", "action", "start", "l", "aaa", "f", "sa", "ca", "ac", "m", "ga", "cha", "area", "input", "am", "ae", "alpha", "ea", "e", "an", "ad", "n"], "b": ["aa", "s", "k", "end", "ib", "fb", "p", "bs", "g", "bound", "y", "r", "o", "wb", "beta", "mb", "B", "split", "ab", "x", "w", "sb", "next", "l", "ob", "bb", "d", "rb", "u", "bf", "abb", "f", "m", "length", "func", "v", "bar", "base", "e", "nb", "lb", "bi", "n"], "c": ["s", "k", "cur", "cycle", "int", "p", "ic", "g", "arc", "y", "o", "r", "ec", "h", "case", "cp", "oc", "C", "lc", "uc", "z", "anc", "x", "unc", "cy", "cu", "w", "l", "u", "d", "f", "ca", "cs", "ac", "m", "rc", "dc", "ci", "alpha", "ct", "v", "e", "bc", "count", "cc", "cr", "pc", "xc", "mc", "abc", "ad", "n"], "i": ["k", "ie", "ib", "p", "ai", "ic", " I", "arc", "h", "r", "iu", "ab", "anc", "index", "x", "ind", "I", "u", "d", "ace", "f", "j", "ip", "e", "bc", "id", "li", "n"]}}
{"code": "from itertools import combinations\\nn,m,x = map(int, input().split())\\nca = [list(map(int, input().split())) for _ in range(n)]\\n\\nans = float(\"inf\")\\nfor i in range(1,n+1):\\n  for j in combinations(ca,i):\\n    l = [0]*(m+1)\\n    for k in j:\\n      for i2 in range(m+1):\\n        l[i2] += k[i2]\\n    if all(l[num] >= x for num in range(1,m+1)):\\n      ans = min(ans, l[0])\\nif ans == float(\"inf\"): print(-1)\\nelse: print(ans)", "target": "112", "substitutes": {"n": [" N", "s", "name", "mn", "p", "g", "c", "nm", "y", "number", "o", " c", "nc", "r", "net", "size", "ne", "z", "index", "w", "cn", "d", "nn", "ln", "network", "f", "ns", "nl", "M", "b", "v", "t", "N", "nb"], "m": ["s", "mn", "mi", "p", "g", "c", "nm", "y", "r", "o", "h", "ym", "pm", "mean", "z", "fm", "mu", "w", "cm", "u", "d", "f", "sm", "bm", "am", "M", "v", "b", "e", "mm", "hm", "mc", "range"], "x": ["dx", "int", "X", "p", "xs", "c", "g", "xx", "y", "o", "number", "ix", "h", "im", "rx", "z", "ex", "index", "xxx", "w", "u", "d", "max", "q", "f", "ax", "xi", "mx", "v", "b", "xp", "e", "xc"], "ca": ["min", "Ca", "wa", "a", "sc", "cas", "na", "c", "cca", "center", "cp", " Ca", "la", "ba", "ab", "uc", "da", "pa", "ce", "can", "uca", "cu", "ka", "cb", "ia", "con", "cm", "ace", "ta", "sa", "acl", "ga", "ac", "CA", "ci", "cf", "cr", "bc", "ha", "cc", "ces", "mc", "pc"], "_": [" id", " seq", " time", " __", " line", " un", "ip", " col", "id", " nan"], "ans": ["ano", "s", "a", "ents", "lan", "nas", "ras", "ins", "amps", "ams", "atan", "na", "ai", "xs", "ions", "aning", "anas", "AN", "ANS", "anes", "ks", "mean", "ane", "aces", "ann", "anon", "anc", "ani", "ana", "es", "ays", "can", " means", "nan", "asin", "ars", "lang", "anus", "aned", "chan", "ations", "ons", "anne", "leans", "cs", "sk", "ants", "ns", "scan", "os", "san", "ls", "ean", "plan", "ds", "ians", "las", "oss", "an"], "i": ["a", "ie", "int", "mi", "p", "ai", "c", "o", "y", "ix", "ini", "im", "iu", "index", "ind", "I", "u", "pi", "d", "io", "f", "xi", "ni", "ci", "ij", "v", "e", "id", "li", "ii", "ik", "bi", "ip"], "j": ["ion", "ji", " p", "str", "ja", " inj", " z", "p", "c", "jo", " id", "y", " v", "r", " c", " ind", "h", "section", "ks", "z", "ch", "ind", "obj", "d", "uj", "q", "js", "jp", "f", " ki", "ci", "ij", "J", "b", "v", "key", " index", " jo", " d"], "l": ["lp", "loc", "ol", "L", "p", "al", "g", "c", "o", "r", "sl", "el", "ml", "la", "lc", "z", "kl", "u", "pl", "ll", "ln", "dl", "f", "list", "nl", "lu", "v", "b", "t", "ls", "e", "il", "li", "ul", "lb"], "k": ["km", "ke", "p", "g", "c", "K", "y", "o", "kk", "ijk", "ks", "kn", "z", "kl", "ch", "kw", "w", "it", "ok", "u", "d", "q", "ki", "f", "sk", "ky", "ac", "self", "ku", "v", "b", "e", "id", "ik"], "i2": [" i1", "k4", "p5", "j1", "p4", "i0", "k5", "l4", "l2", "j5", "l0", " i0", " i4", " i5", "j0", "i1", "k2", "p1", "i5", "p2", "i4", "l1", "j2", "j4", "k1", "l5"], "num": ["min", "name", "unit", "loc", "end", "int", "code", "p", "na", "ai", "c", "umi", "mult", "number", "nc", "im", "un", "nom", "uc", "index", "mu", "ind", "om", "con", "u", "d", "max", "nn", "uni", "f", "comb", "rank", "nr", "dim", "b", "col", "id", "nb", "an", "mid", "um"]}}
{"code": "w, a, b = map(int, input().split())\\nprint(max(0, b - a - w, a - b - w))", "target": "547", "substitutes": {"w": ["wa", "wt", "win", "p", "g", "aw", "c", "i", "width", "y", "h", "o", "fw", "r", "wb", "wh", "weight", "wave", "z", "week", "x", "ew", "A", "W", "window", "l", "u", "d", "max", "q", "f", "m", "ww", "sw", "ws", "wd", "v", "e", "t", "word", "n"], "a": ["min", "aa", "wa", "sta", "va", "p", "g", "c", "i", "fa", "y", "r", "la", "ba", "ab", "z", "au", "pa", "x", "da", "A", "l", "bb", "d", "max", "f", "ca", "sa", "ac", "ga", "m", "area", "am", "ae", "alpha", "an", "ad", "n"], "b": ["aa", "k", "s", "end", "fb", "p", "bs", "g", "c", "i", "y", "r", "h", "wb", "beta", "B", "ba", "ab", "z", "x", "bl", "sb", "l", "bb", "d", "u", "rb", "f", "m", "xb", "alpha", "v", "base", "e", "t", "nb", "lb", "n"]}}
{"code": "N = int(input())\\na,b = [], []\\nfor i in range(N):\\n  x,y = map(int, input().split())\\n  a.append(x-y)\\n  b.append(x+y)\\na.sort()\\nb.sort()\\nans = max(a[-1] - a[0], b[-1] - b[0])\\nprint(ans)", "target": "399", "substitutes": {"N": ["F", "L", "NO", "V", "NN", "NL", "Sn", "X", "Y", "NC", "Size", "Num", "NS", "NI", "K", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "I", "No", "NT", "OS", "Ni", "Z", "Ns", "R", "M", "SN", " n", "NA", "n"], "a": ["aa", "s", "wa", "auto", "sta", "va", "ao", "ma", "p", "ai", "g", "c", "aw", "ama", "ba", "ab", "au", "array", "art", "da", "pa", "A", "af", "w", "ia", "ak", "u", "aaa", "ca", "sa", "f", "ac", "ga", "asa", "up", "area", "am", "aj", "ae", "ea", "e", "an", "ad", "n"], "b": ["be", "ib", "fb", "p", "bs", "pb", "c", "orb", "hide", "o", "r", "emb", "wb", "mb", "bis", "B", "ba", "ab", "sb", "cb", "l", "ob", "rb", "bb", "d", "u", "abb", "f", "eb", "bd", "j", "xb", "db", "binary", "gb", "v", "base", "e", "nb", "lb", "n"], "i": ["k", "ie", "p", "c", " I", "h", "ix", "iu", "z", "index", "ind", "start", " il", "I", "u", "d", "io", "j", "e", "il", "col", "id", "li", "ip"], "x": ["dx", "min", "k", "int", "python", "sex", "X", "p", "xs", "c", "width", "xx", "rx", "h", "ix", "px", "pos", "z", "ex", "index", "w", "l", "u", "d", "max", "one", "f", "ax", "m", "xi", "v", "e", "xy", "id", "n"], "y": ["s", "dy", "ye", "gy", "X", "p", "Y", "c", "o", "ay", "z", "zy", "yi", "wy", "cy", "w", "ny", "yt", "d", "q", "j", "f", "ky", "m", "yy", "ya", "oy", "e", "xy", "py", "vy", "ey", "n"], "ans": ["ents", "lan", "cas", "ras", "nas", "offs", "na", "gan", "aning", "anas", "AN", "ANS", "anes", "ann", "anon", "anc", "ani", "ana", "can", " means", "nan", "An", "kin", "ros", "anus", "aned", "ons", "aus", "anan", "anne", "leans", "sk", "cs", "ants", "man", "ran", "san", "an", "ins"]}}
{"code": "N = int(input())\\n\\nR = [list(map(int, input().split())) for _ in range(N)]\\nB = [list(map(int, input().split())) for _ in range(N)]\\n\\nR = sorted(R, key=lambda x: -x[1])  # \u8d64\u3044\u70b9\u306fy\u5ea7\u6a19\u304c\u5927\u304d\u3044\u9806\u306b\u3059\u308b\\nB = sorted(B, key=lambda x: x[0])  # \u9752\u3044\u70b9\u306fx\u5ea7\u6a19\u304c\u5c0f\u3055\u3044\u9806\u306b\u3059\u308b\\n\\nfor a, b in B:  # \u9752\u3044\u70b9, x\u5ea7\u6a19\u304c\u5c0f\u3055\u3044\u9806\u306b\u306a\u3063\u3066\u3044\u308b\\n    for c, d in R:  # \u8d64\u3044\u70b9, y\u5ea7\u6a19\u304c\u5927\u304d\u3044\u9806\u306b\u306a\u3063\u3066\u3044\u308b\\n        if a > c and b > d:  # \u9752\u3044\u70b9\u306ex\u5ea7\u6a19\u3088\u308a\u8d64\u3044\u70b9\u306ex\u5ea7\u6a19\u304c\u5c0f\u3055\u304f, \u9752\u3044\u70b9\u306ey\u5ea7\u6a19\u3088\u308a\u8d64\u3044\u70b9\u306ey\u5ea7\u6a19\u304c\u5c0f\u3055\u3051\u308c\u3070\u30da\u30a2\u306b\u3059\u308b\\n            R.remove([c, d])\\n            break\\n\\nprint(N - len(R))\\n", "target": "591", "substitutes": {"N": ["F", "E", "NR", "L", "Number", "V", "H", "Q", "X", "Y", "Size", "Num", "NS", "K", "NM", "O", "P", "C", "T", "D", "Len", "Ne", "S", "A", "W", "RN", "NT", "Node", "Ni", "Z", "Ns", "Part", "M", "J", " n", "G", "NA", "Norm", "n"], "R": ["F", "E", "Rs", "NR", "L", "V", "H", "Q", "X", "Y", "SR", "K", "r", "RR", "O", "P", "T", "C", "D", "S", "A", "Result", "W", "Response", "RN", "Z", "Array", "U", "M", "J", "G", "RA"], "_": ["k", " block", "__", "non", " local", "g", "___", "un", " content", " time", "x", " un", " the", "out", "f", "ac", "n"], "B": ["F", "E", "L", "V", "Y", "AR", "CB", "K", "O", "P", "C", "T", "D", "BG", "BB", "BC", "S", "A", "W", "I", "RB", "WB", "M", "b", "NB", "Both", "G", "BF"]}}
{"code": "A, B= input().split()\\nif A==B:\\n    print('H')\\nelse:\\n    print('D')", "target": "264", "substitutes": {"A": ["F", "E", "a", "L", "V", "H", "X", "MA", "Y", "LA", "AB", "O", "SA", "P", "C", "T", "mA", "D", "AC", "As", "AA", "S", "W", "I", "Ma", "CA", "U", "M", "N", "G", "NA"], "B": ["F", "E", "EB", "L", "LB", "V", "Y", "UB", "IB", "DB", "BA", "AB", "O", "Bu", "P", "C", "T", "D", "SB", "BB", "BC", "S", "BD", "W", "TB", "I", "ABC", "Ab", "BE", "Z", "OB", "WB", "Blue", "GB", "BS", "b", "NB", "QB", "BER", "BF", "Ub", " b", "Bs"]}}
{"code": "#4\\nimport sys\\nN = int(input())\\nx,y,k = 0,0,0\\n\\nif N == 1:\\n    print(1)\\n    sys.exit()\\nelif N <= 12:\\n    print(N)\\n    sys.exit()\\nx = int(0.8*N)\\n\\nfor i in range(x,N):\\n    k = str(i*108)\\n    if int(k[0:-2]) == N:\\n        print(i)\\n        y +=1\\n        break\\n\\nif y !=1:\\n    print(\":(\")\\n", "target": "194", "substitutes": {}}
{"code": "def triangle(dataset):\\n    a, b, c = dataset\\n    if a*a + b*b == c*c:\\n        return 1\\n    return 0\\n\\nN = int(input())\\nfor _ in range(N):\\n    dataset = sorted(map(int, input().split()))\\n    flag = triangle(dataset)\\n    print([\"NO\", \"YES\"][flag])", "target": "199", "substitutes": {"dataset": ["datrasET", "dataassets", "Datosette", "datrasets", "datraset", "datarsette", "Datarsset", "datosET", "datassset", "DatasET", "datastset", "datrasset", "dataseet", "dataseets", "datosset", "datastET", "datosets", "Datasette", "DataseET", "Dataseset", "datasets", "Datoset", "dataasset", "Dataseet", "datasET", "dataasette", "datosette", "Dataset", "dataassette", "Datarset", "datassette", "datoset", "datasset", "datrasette", "Datasets", "DatarsET", "datarset", "DatosET", "dataseset", "datasette", "dataasets", "dataseET", "datassET", "datarsET", "datastets", "datastet", "datarsets", "Dataseets", "dataaset", "dataassset", "datassets", "Datosets", "datarsset", "Datasset", "Datarsets"], "a": ["aa", "s", "p", "na", "ai", "g", "aw", "i", "y", "ba", "ab", "da", "x", "pa", "A", "w", "ia", "u", "d", "f", "sa", "ca", "ac", "asa", " A", "m", "am", "ae", "alpha", "e", "an", "ad", "n"], "b": ["aa", "k", "ib", "fb", "p", "bs", "g", "i", "y", "r", "h", "B", "ba", "ab", "x", "sb", "cb", "l", "bb", "d", "rb", "u", "f", "j", "ac", "db", "v", "e", "bc", "abc", "lb", "bi", "n"], "c": ["s", "k", "p", "g", "y", "r", "nc", "ec", "h", "o", "C", "lc", "z", "fc", "ce", "x", "cy", "cu", "cb", "con", "cm", "cn", "d", "u", "ca", "f", "cs", "ac", "dc", "ci", "cf", "e", "cr", "bc", "cc", "col", "abc", "n"], "N": ["F", "L", "V", "NN", "NL", "X", "Y", "Size", "Num", "NS", "NE", "K", "O", "P", "B", "C", "T", "D", " C", "Ne", "S", "A", "I", "NT", "Ni", "Z", "Ns", "U", "R", "M", "SN", " n", "NA", " NI", "NUM", "n"], "_": [" arg", " times", " block", " seq", " time", " __", " k", " un", " the", " loop", " j", " col", "n"], "flag": ["bad", "error", "maybe", "date", "ie", "code", "arg", "log", "ig", "bool", "weight", "sign", "long", "local", "valid", "ind", "bug", "ish", "f", "status", "lag", "sort", "style", "flags", "sync", "FLAG", "fun", "rank", "kind", "mask", "neg", "bin", "spin", "type", "len", "key", "count", "id", "bit", "feat", "Flag", "offset"]}}
{"code": "import numpy as np\\n\\nn, x = map(int, input().split())\\nL = list(map(int, input().split()))\\n\\nCS_L = np.cumsum(L).tolist()\\nans = len([l for l in CS_L if l <= x])\\nprint(ans + 1)", "target": "444", "substitutes": {"n": [" N", "s", " p", " data", "na", "g", "c", " network", "y", " v", " y", " net", "z", " ne", " np", "u", "d", " nu", "nn", "ns", "nl", "b", "t", "N"], "x": ["dx", "s", "k", "int", "X", "p", "XX", "xs", "c", "i", "xx", "y", "number", "ix", "px", "pos", "size", "lc", "z", "ex", "index", "xxx", "w", "f", "ax", "xi", "v", "e", "xes", "xc", "cl", "an"], "L": ["F", "E", "LB", "V", "LT", "IL", "NL", "FL", "X", "LS", "LA", "dL", "LP", "Lu", "LU", "P", "T", "B", "LM", "D", "SL", "EL", "LR", "Li", "LE", "ln", "CL", "U", "M", "XL", "N", "LI", "DL", "LG", "LL", "G", "ML", "UL"], "CS_L": [" CS_XL", "CS_G", "CSDataG", " CS_G", "CS_SL", " CS_Sl", "CS_XL", "CS_Sl", "cs_L", "CS_l", "cs_l", "CSDataSl", "cs_SL", "CSDataXL", "CSDataL"], "ans": ["ss", "dd", "lan", "cas", "sex", "nas", "les", "amps", "ats", "anas", "AN", "nes", "ANS", "anes", "ks", "ann", "anon", "es", "can", "ars", "asses", "aned", "nn", "ons", "aus", "ens", "sk", "leans", "cs", "ants", "ns", "os", "acts", "cons", "ls", "ANN", "ds", "ces", "oss", "an", "ins"], "l": ["lp", "s", "k", "ol", "int", "p", "_", "c", "g", "i", "dL", "h", "like", "el", "la", "lc", "long", "kl", "u", "d", "ll", "ln", "f", "dl", "m", "rl", "list", "nl", "lit", "lu", "len", "v", "ell", "b", "t", "ls", "all", "il", "le", "lt", "li", "lin"]}}
{"code": "n=int(input())\\na=input();b=input();c=input()\\nx=0\\nfor i in range(n):\\n  x+=len(list(set([a[i],b[i],c[i]])))-1\\nprint(x)", "target": "648", "substitutes": {"n": ["s", "k", "p", "g", "o", "r", "nc", "num", "y", "h", "number", "nu", "z", "sn", "w", "l", "u", "d", "nn", "max", "f", "j", "m", "ns", "length", "v", "np", "len", "t", "N", "e", "count", "nb"], "a": ["aa", "k", "s", "p", "ai", "g", "aw", "ba", "ab", "array", "art", "da", "ar", "A", "af", "w", "l", "u", "d", "f", "sa", "ca", "ac", "asa", "area", "am", "ae", "alpha", "an", "ad"], "b": ["aa", "s", "k", "fb", "p", "bs", "g", "pb", "y", "o", "r", "h", "wb", "B", "ba", "ab", "sb", "cb", "bt", "l", "bb", "d", "bf", "rb", "ub", "f", "eb", "db", "v", "e", "bc", "bas", "abc", "lb", "ad"], "c": ["s", "k", "p", "g", "y", "h", "r", "C", "z", "cy", "cu", "w", "con", "l", "u", "d", "out", "f", "ca", "cs", "ac", "m", "ci", "v", "cf", "e", "col", "abc"], "x": ["dx", "s", "int", "code", "fix", "X", "p", "xf", "xxxxxxxx", "xs", "g", "xx", "y", "h", "rx", "ix", "number", "fe", "z", "xt", "ex", "index", "xxx", "xxxx", "w", "wx", "u", "max", "xd", "f", "ax", "ww", "xi", "xb", "check", "ct", "xe", "xp", "v", "t", "e", "xes", "xy", "test", "xc", "xa"], "i": ["gi", "k", "ui", "vi", "ei", "int", "ie", "qi", "mi", "p", "phi", "ai", "y", "h", "ix", "ini", "iu", "lc", "ti", "z", "si", "eni", "index", "yi", "ind", "start", "I", "uri", "fi", "l", "u", "d", "pi", "q", "ki", "j", "f", "io", "xi", "ri", "di", "ci", "v", "e", "col", "id", "zi", "li", "ii", "bi", "ip"]}}
{"code": "print(sum(s!=t for s,t in zip(input(),input())))", "target": "123", "substitutes": {"s": ["strings", "a", "words", "p", "states", "ps", "g", "c", "sym", "i", "xs", "sets", "ints", "tp", "secondary", "si", "als", "S", "sb", "tests", "args", "lines", "services", "u", "less", "d", "terms", "ses", "stats", "f", "cs", "sections", "ns", "input", "seconds", "os", "ts", "b", "gs", "e", "ds", "n"], "t": ["new", "to", "p", "c", "tim", "i", "target", "tp", "ot", "iter", "pt", "T", "tf", "tor", "temp", "ty", "time", "st", "w", "l", " T", "ta", "out", "f", "trans", "dt", "ut", "m", "term", "list", "ts", "v", "b", "type", "e", "test", "tc", "total", "n"]}}
{"code": "def count_section_by_zero(data):\\n  count = 0\\n  flg = False\\n  start = 0\\n  for i, d in enumerate(data):\\n    if flg is False and d != 0:\\n      count += 1\\n      flg = True\\n      \\n    if d == 0:\\n      flg = False\\n  return count\\n\\ndef input_list():\\n  return list(map(int, input().split()))\\n\\ndef input_list_str():\\n  return map(str, input().split())\\n\\ndef lcm_base(x, y):\\n    return (x * y) // fractions.gcd(x, y)\\n\\ndef lcm_list(numbers):\\n    return reduce(lcm_base, numbers, 1)\\n\\ndef gcd(*numbers):\\n    return reduce(fractions.gcd, numbers)\\n\\ndef gcd_list(numbers):\\n    return reduce(fractions.gcd, numbers)\\n\\n# 2\u3067\u5272\u308a\u5207\u308c\u308b\u56de\u6570\\ndef divide_two(arg):\\n  c = 0\\n  while True:\\n    if c >= 2:\\n      break\\n    if arg % 2 != 0:\\n      break\\n    arg //= 2\\n    c += 1\\n  return c\\n\\n# \u7d20\u56e0\u6570\u5206\u89e3\\ndef prime_factorize(n):\\n    a = []\\n    while n % 2 == 0:\\n        a.append(2)\\n        n //= 2\\n    f = 3\\n    while f * f <= n:\\n        if n % f == 0:\\n            a.append(f)\\n            n //= f\\n        else:\\n            f += 2\\n    if n != 1:\\n        a.append(n)\\n    return a\\n\\ndef main():\\n  k, a, b = input_list()\\n  ans = 1\\n  lf = max(0, k - a+1)\\n  lf1 = lf//2\\n  if lf:\\n    ans = a + lf1 * (b - a) + lf%2\\n  else:\\n    ans +k\\n  print(max(ans, k+1))\\n  \\n  \\nimport math\\nimport fractions\\nimport collections\\nfrom functools import reduce\\nmain()", "target": "293", "substitutes": {"data": ["example", "end", "a", "missing", "sample", "reader", "p", "c", "dat", "o", "read", "number", "results", "result", "DATA", "empty", "array", "da", "cache", "index", "valid", "series", "window", "lines", "f", "Data", "model", "df", "database", "input", "list", "record", "multi", "config", "draw", "feed", "n"], "count": ["call", "group", "a", "code", "false", "total", "cond", "p", "default", "g", "c", "dict", "format", "num", "weight", "first", "C", "size", "z", "div", "time", "index", "diff", "ind", "child", "do", "max", "f", "cat", "found", "depth", "cd", "length", "db", "e", "order", "all", "true", "id", "sum", "Count", "n"], "flg": ["Flgg", "cfga", "slgg", "FLga", "FLgs", " flG", "slgs", "FLG", " flgu", " flgg", "cfg", "cfgi", "FlG", "cfgs", "flgs", "Flga", "Flgs", "flga", "Flg", "slg", "flG", "slgi", " flgs", "FLgg", "Flgu", "FLg", "FLgu", "flgu", "Flgi", " flgi", " flga", "flgg", "flgi"], "start": ["s", " p", " end", "end", "Start", "p", "std", "c", "r", " c", "D", " stop", " dd", "time", "index", "st", "ind", "l", "stop", "df", "length", "debug", " Start", "id", " do"], "i": ["gi", "a", "ei", "ie", "init", "ai", "c", "ini", "im", "iu", "z", "I", "pi", "j", "f", "xi", "di", "iy", "ci", "ip", "e", "zi", "li", "ii", "bi", "ti"], "d": ["s", "did", "dd", "digit", "a", "dy", "fd", "p", "nd", "g", "c", "dat", "dict", "sd", "desc", "D", "z", "da", "dm", "l", "de", "do", "dt", "f", "dq", "m", "dc", "cd", "df", "di", "v", "dim", "b", "e", "dec", "t", "ds", "id", "ad", "n"], "x": ["dx", "k", "line", "int", "code", "X", "p", "lat", "c", "xs", "xx", "yx", "h", "work", "ix", "rx", "px", "z", "ex", "time", "index", "xxx", "w", "cross", "l", "u", "q", "one", "f", "ax", "m", "xi", "v", "b", "e", "t", "xy", "id", "xc", "n"], "y": ["yr", "yd", "ys", "dy", "ye", "p", "Y", "c", "yn", "ym", "ay", "z", "zy", "ty", "yo", "yi", "cy", "wy", "w", "ny", "yt", "sy", "ky", "yy", "ya", "oy", "b", "py", "vy", "ry", "ey", "ies"], "numbers": ["incodes", "cumbers", "Nums", "Number", "culas", "lumber", "bynums", "generounters", " number", "Numer", "nounters", "lumbers", " numbered", " nulas", "number", "incumbers", "numer", "nums", "Numbers", "bynumber", "cumber", "generumbers", "counters", "bynumbered", "codes", "nulas", " nodes", "generumeric", "lumer", "numbered", "numeric", "incumeric", "incounters", "Nulas", "bynumbers", "Numbered", "cums", "bynumer", "Nodes", "generodes", "bynodes", "nodes", "lums", " nums", "cumeric"]}}
{"code": "n1 = int(input())\\n\\nr1 = n1 * n1\\n\\nprint(r1)\\n", "target": "787", "substitutes": {"n1": ["nrOne", "mOne", " n3", "r2", "nr2", "nrone", "cone", "n3", "mone", "cOne", "n2", "N2", " none", "none", "nOne", " nOne", "r3", "NOne", "nr1", "m1", "N1", "N3", " n2", "c1"], "r1": ["ar1", "ROne", "R2", "nrOne", "rone", "r2", "R1", "nr2", "cone", "rOne", "cOne", "arone", "n2", "Rone", "arOne", "nOne", "nr1", "c1"]}}
{"code": "N = int(input())\\nA_list = list(map(int, input().split()))\\nB_list = list(map(int, input().split()))\\nC_list = list(map(int, input().split()))\\n\\ntotal = 0\\nfor a in A_list:\\n    total += B_list[a-1]\\n\\nfor i in range(N-1):\\n    if A_list[i] + 1 == A_list[i + 1]:\\n        total += C_list[A_list[i]-1]\\n\\nprint(total)", "target": "731", "substitutes": {"N": ["F", "E", "L", "V", "H", "Q", "X", "Y", "NS", "NE", "NI", "K", "O", "P", "B", "C", "T", "D", "Ne", "S", "A", "I", "No", "NT", "Ni", "Z", "Ns", "U", "R", "M", "J", "NB", " n", "NA", "n"], "A_list": ["C_l", "A_chain", " A_List", "B_head", "C_base", " A_batch", "B_l", "B_index", "A_l", " A_l", "A_set", "Aplists", "A_part", "Aplist", "A_List", "A_index", " a_list", "A_head", " a_l", "A_lists", "A_view", "C_view", "Aphead", "B_set", "A_batch", " a_part", " a_chain", "B_lists", "A_base"], "B_list": ["B_range", "B_l", "B_listed", " B_set", "B_cl", "Xinglist", "B_set", "Bingl", "Xinglisted", "Xingl", "Xingrange", "X_l", "X_range", "Bingrange", "X_list", "Binglisted", " B_cl", "X_listed", "Binglist", "B_str", " B_str"], "C_list": ["C6int", "B_default", "B_int", "C_diff", "C6default", "B_block", "C6list", " C_parent", "C_int", "C_lists", " C_diff", "C6block", "C_default", "C_block", " C_lists", "C_parent"], "total": ["error", "zero", "full", "last", "c", "otal", "number", "result", "net", "translation", "gross", "done", "paid", "temp", "size", "basic", "final", "cost", "scale", "shared", "partial", "now", "valid", "lost", "max", "trans", "found", "json", "null", "fee", "database", "private", "Total", "average", "alpha", "complete", "type", "length", "no", "base", "t", "all", "quant", "count", "multi", "percent", "part", "sum", "info"], "a": ["aa", "aid", "va", "at", "na", "qa", "ai", "c", "ba", "ab", "au", "\u00e0", "index", "da", "x", "A", "ar", "ia", "u", "ace", "ach", "aaa", "ca", "sa", "ac", "area", "am", "ae", "ip", "alpha", "b", "ea", "\u00e4", "an", "ad", "n"], "i": ["gi", "k", "ui", "ei", "int", "ie", "qi", "p", "ai", "c", "oi", "h", "y", "ini", "ix", "iq", "iu", "ti", "z", "on", "eni", "si", "x", "yi", "index", "ind", "I", "uri", "fi", "u", "d", "ace", "pi", "j", "f", "io", "ac", "xi", "ri", "di", "ci", "b", "e", "multi", "id", "li", "ii", "n", "bi", "ad", "ip"]}}
{"code": "from fractions import gcd\\n\\ndef mi():\\n    return map(int, input().split())\\n\\ndef main():\\n    N, X = mi()\\n    x = list(mi())\\n    y = [abs(x[i]-X) for i in range(N)]\\n    t = y[0]\\n    for i in range(N):\\n        t = gcd(t, y[i])\\n    print(t)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "586", "substitutes": {"N": ["F", "E", "L", "V", "H", "Q", "Y", "Size", "NC", "Num", "NS", "K", "Na", "NM", "O", "P", "T", "C", "B", "D", "Len", "S", "A", "W", "I", "NT", "Z", "Ns", "U", "R", "Part", "M", "J", "GN", "NB", "G", "NA", "n"], "X": ["F", "PI", "YY", "E", "L", "V", "XM", "H", "Q", "XX", "Y", "XP", "K", "O", "P", "T", "C", "B", "D", "Int", "S", "A", "W", "XXX", "I", "TX", "Z", "U", "M", "J", "XL", "G", "n"], "x": ["s", "int", "p", "Y", "xs", "c", "xx", "o", "h", "rx", "px", "T", "z", "ex", "index", "w", "l", "u", "d", "q", "f", "m", "xi", "input", "data", "v", "e", "xes", "xy", "xc", "n"], "y": ["dy", "ye", "tick", "p", "Y", "g", "c", "yx", "o", "ym", "ay", " Y", "z", "ty", "yi", "cy", "ny", "yt", "l", "d", "j", "m", "yy", "ya", "type", "v", "e", "xy", "py", "vy", "ey", "ies", "n"], "i": ["k", "ui", "vi", "ei", "int", "qi", "p", "ai", "c", "oi", "o", "ini", "ix", "iu", "z", "si", "eni", "index", "yi", "ind", "I", "l", "u", "pi", "ki", "j", "io", "m", " j", "xi", "di", "ni", "ci", "ip", "\u0438", "v", "b", "e", "id", "li", "ii", "n", "bi", "ti"], "t": ["s", "k", "int", "wt", "tt", "p", "g", "c", "o", "r", "tp", "ot", "pt", "T", "tf", "temp", "z", "ty", "w", "l", " T", "u", "d", "yt", "ta", "j", "f", "dt", "m", "type", "v", "b", "ts", "e", "test", "n"]}}
{"code": "import sys\\nsys.setrecursionlimit(4100000)\\nimport math\\nINF = 10**9\\n\\ndef main():\\n    n = int(input())\\n    a = int(input())\\n\\n    if n%500 <= a:\\n        print('Yes')\\n    else:\\n        print('No')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "144", "substitutes": {"INF": ["INV", "IIFF", "INFF", "inV", "inF", "ANV", "inf", "ANF", "inFF", "IIV", "INf", "ANFF", "ANf", "IIf", "IIF"], "n": ["min", "k", "p", "na", "nm", "c", "i", "o", "y", "nc", "net", "rn", "ne", "z", "x", "nan", "sn", "ny", "l", "nin", "cn", "d", "nn", "nt", "f", "j", "m", "ns", "no", "ni", "v", "b", "e", "N", "t", "pn", "dn", "nb", "an"], "a": ["aa", "s", "va", "active", "ans", "p", "access", "na", "ai", "c", "aw", "i", "y", "ba", "ab", "au", "da", "index", "A", "w", "u", "d", "aaa", "ca", "f", "sa", "j", "ac", "asa", "area", "aj", "am", "ae", "alpha", "b", "ea", "all", "an", "ad"]}}
{"code": "from collections import Counter\\n\\nn = map(int, input().split())\\n\\nA = list(map(int, input().split()))\\n\\ndef f(): \\n    for i, a in enumerate(A, 1):\\n        if i < a:\\n            yield i, a\\n        else:\\n            yield a, i\\n\\nc = Counter(f())\\nprint(len([k for k, v in c.items() if v == 2]))", "target": "397", "substitutes": {"n": [" N", " p", " output", " s", "na", " w", " Fn", "Num", " number", " ni", "y", "Na", " fn", " b", " NB", "Ns", " init", " ns", "N", " Ni", " num", " Number", "NA", "nb", " na", " Num"], "A": ["F", "L", "At", "V", "All", "H", "X", "p", "Y", "K", "P", "B", "C", "T", "D", "As", "API", "array", "Alpha", "S", "W", "I", "Output", "Array", "CA", "U", "AF", "Input", "alpha", "M", "N", "G"], "i": ["ie", "int", "ib", "p", "phi", "ai", "ic", "init", "inter", "oi", "y", "o", "iu", "api", "ti", "z", "si", "index", "x", "ind", "I", "ia", "it", "l", "u", "d", "pi", "ta", "f", "j", "io", "m", "ir", "ac", "xi", "ri", "ni", "ci", "ip", "b", "e", "bi", "t", "iw", "id", "li", "ii", "ik", "anti", "aci"], "a": ["s", "aa", "wa", "auto", "va", "at", "active", "p", "na", "qa", "ai", "aw", "fa", "y", "o", "ba", "ab", "ana", "x", "af", "w", "ation", "l", "u", "d", "pi", "ta", "aaa", "f", "ca", "sa", "ax", "ac", "asa", "j", "area", "ae", "alpha", "b", "e", "an", "ad"], "c": ["toc", "p", "ic", "o", "h", "nc", "ec", "oc", "C", "lc", "fc", "unc", "x", "cu", "l", "u", "q", "f", "rc", "cs", "ac", "m", "dc", "vc", "ci", "ct", "b", "e", "cr", "cc", "col", "mc", "xc", "pc"], "k": ["ke", "p", "g", "_", "K", "h", "y", "r", "kk", "ks", "kn", "z", "ch", "x", "kw", "w", "ka", "ak", "l", "ok", "u", "d", "q", "row", "j", "sk", "iv", "m", "kt", "key", "b", "ck", "e", "id", "ik"], "v": ["s", "vi", "value", "V", "p", "g", "var", "o", "r", "h", "lv", "vs", "qv", "z", "x", "nv", "av", "w", "l", "u", "d", "q", "iv", "j", "f", "m", "vv", "b", "e", "t", "val", "ev", "li"]}}
{"code": "import numpy as np\\n\\nN = int(input())\\n\\nans = 0\\nfor i in range(1, N + 1):\\n    if ((i % 3) != 0) & ((i % 5) != 0):\\n        ans += i\\n\\nprint(ans)", "target": "167", "substitutes": {"N": ["F", " M", "L", "V", "NN", "H", "X", "Y", "Size", "NS", " I", " ni", "K", "number", "num", "O", "P", "T", "C", "Len", "D", "B", " C", "Ne", "S", "A", "I", "NT", "Ni", "Z", "Ns", "ns", "R", "M", "J", " n", " Ne", " D", "NA", " NI", "n"], "ans": ["s", "ents", "offs", "lan", "nas", "amps", "span", "atan", "na", "ps", "ats", "ions", "AN", "ANS", "anes", "ks", "asts", "mean", "ann", "ani", "errors", "ana", "x", "can", "S", " means", "nan", "ars", "anus", "aned", "nn", "ons", "aus", "ens", "sk", "leans", "cs", "ants", "atches", "ns", "types", "scan", "os", "reads", "features", "ips", "ians", "ds", "ops", "an", "n", "ins"], "i": ["gi", "s", "k", "a", "int", "chi", "qi", "p", "phi", "ai", "init", "c", "o", "ini", "axis", "iu", "z", "mini", "si", "index", "x", "ind", "start", "I", "l", "idi", "u", "pi", "d", "j", "f", "m", "xi", "input", "di", "v", "b", "e", "zi", "id", "li", "ii", "bi", "abi", "n"]}}
{"code": "import decimal\\n\\na, b = input().split()\\nx, y = decimal.Decimal(a), decimal.Decimal(b)\\nprint(int(x * y))", "target": "44", "substitutes": {"a": ["aa", "s", "va", "ma", "p", "ai", "c", " ca", "aw", "i", " c", "la", "ba", " ra", "ab", "au", "art", "da", "pa", "A", "ar", "d", "f", "ax", " A", " ax", "ca", "ac", "sa", "asa", " sa", "aj", "ae", "oa", "alpha", "e", "an"], "b": ["be", "other", "ib", "bur", "fb", "p", "bs", "pb", "i", "emb", "wb", "beta", "mb", "B", "ba", "ab", "sb", "cb", "bb", "rb", "d", "abb", "f", "eb", "xb", "db", "bin", "v", "base", "e", "bc", "abc", "nb", "lb", "bi", "bis"], "x": ["dx", "int", "X", "p", "xs", "c", "g", "i", "xx", "width", "fx", "rx", "height", "ix", "px", "number", "size", "z", "ex", "time", "w", "l", "wx", "u", "d", "row", "f", "ax", "m", "xi", "shape", "day", "data", "length", "alpha", "v", "pixel", "e", "xy", "col", "val", "n"], "y": ["ys", "dy", "ye", "gy", "p", "Y", "c", "i", "xx", "o", "year", "z", "zy", "cy", "w", "ny", "l", "yt", "bb", "d", "j", "f", "sy", "m", "yy", "ya", "oy", "type", "v", "e", "t", "xy", "vy", "ry", "ey", "n"]}}
{"code": "N = int(input())\\nS = input()\\nT = input()\\n\\nans = 2 * N\\nfor i in range(1, N + 1):\\n    if S[-i:] == T[:i]:\\n        ans = 2 * N - i\\nprint(ans)\\n", "target": "693", "substitutes": {"N": ["F", "E", "L", "V", "NN", "NL", "H", "Q", "X", "Y", "NC", "Size", "Num", "NS", "NE", "K", "NM", "O", "P", "C", "B", "D", "Ne", "W", "I", "RN", "NT", "Node", "Ni", "Z", "Ns", "ns", "ND", "R", "M", "J", " n", "G", "NA", "n"], "S": ["F", "s", "L", "V", "H", "AS", "X", "NS", "Si", "TS", "Su", "SI", "O", "P", "C", "B", "D", "Sa", "A", "SL", "W", "I", "SS", "Z", "Ns", "CS", "U", "R", "M", "SN", "G", "SU"], "T": ["F", "E", "L", "V", "H", "Q", "X", "Y", "TA", "K", "TS", "O", "P", "B", "C", "D", "TB", "A", "W", "I", "NT", "TX", "Z", "TT", "TC", "U", "R", "M", "TF", "t", "G", "PT"], "ans": ["ano", "s", "a", "lan", "nas", "ras", "ins", "cas", "span", "atan", "na", "ai", "ats", "Ann", "Na", "anas", "AN", "ANS", "anes", "ks", "ane", "ann", "anon", "ani", "anc", "annot", "ana", "can", "asin", "nan", " means", "An", "A", "ars", "anus", "args", "aned", "nn", "ons", "anan", "leans", "ants", "ns", "os", "san", "ls", "ANN", "ds", "an", "n"], "i": ["gi", "s", "a", "ei", "int", "qi", "p", "phi", "ai", "init", "c", " I", "o", "ini", "axis", "iu", "inf", "ti", "z", "si", "index", "x", "ind", "w", "I", "it", "l", "u", "d", "pi", "shift", "j", "io", "f", "m", "II", "xi", "di", "ni", "ci", "b", "v", "e", "t", "multi", "id", "li", "ii", "n", "bi", "ip"]}}
{"code": "n = int(input())\\n\\nprime_1 = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\\nprime_2 = [4,9,25,49]\\nprime_3 = [8,27]\\nprime_4 = [16,81]\\n\\ndp = [0]*15\\n\\nfor i in range(15):\\n    dp[i] += n // prime_1[i]\\n\\nfor j in range(4):\\n    dp[j] += n // prime_2[j]\\n    \\nfor k in range(2):\\n    dp[k] += n // prime_3[k]\\n\\nfor l in range(2):\\n    dp[l] += n // prime_4[l]\\n\\ndp[0] += n // 32\\ndp[0] += n // 64\\n\\nn2 = sum(x>1 for x in dp) \\nn4 =sum(x>3 for x in dp)\\nn14=sum(x>13 for x in dp)\\nn24=sum(x>23 for x in dp)\\nn74=sum(x>73 for x in dp)\\n\\np553 = (n2-n4) * (n4*(n4-1) //2 ) + ((n4*(n4-1)*(n4-2))//2)\\np144 = (n4-n14) * n14 + (n14*(n14-1))\\np242 = (n2-n24) * n24 + (n24*(n24-1))\\np750 = n74\\n\\nprint(p553+p144+p242+p750)", "target": "145", "substitutes": {"n": [" N", "s", "p", "na", "c", "o", "number", "nc", "y", "r", "net", "en", "num", "un", "ne", "fn", "sn", "u", "d", "nn", "network", "f", "m", "none", "ns", "no", "ni", "nl", "b", "v", "np", "t", "N", "e", "h", "nb", "an"], "prime_1": ["Prime_p", "prime_13", "prime_7", "Prime_3", "prime_p", "Prime_7", "Prime_13", "Prime_1", "Prime_2"], "prime_2": ["prime__4", "prime__20", " prime_7", "prime_7", "prime_20", " prime_20", "prime__2", "prime__1"], "prime_3": [" prime_5", "prime_5"], "prime_4": ["Prime_3", "Prime_04", "Prime_1", "Prime_4", "prime_04", "Prime_2"], "dp": ["lp", "pid", "dh", "wp", "fd", "p", "pb", "fp", "dat", "sl", "tp", "pm", "net", "cp", "gp", "ph", "P", "sp", "dep", "api", "dB", "mp", "proc", "vp", "vm", "dm", "pad", "cm", "patch", "d", "pi", "do", "DP", "page", "dl", "dt", "dq", "point", "pp", "deb", "dr", "proxy", "port", "dc", "address", "df", "pkg", "di", "ep", "data", "db", "ip", "pipe", "adr", "dim", "pixel", "np", "pair", "pd", "imp", "zip", "grade", "py", "ds", "dos", "pport", "hp"], "i": ["ui", "a", "ie", "int", "qi", "mi", "p", "ai", "g", "c", "o", "r", "h", "y", "ix", "ini", "iu", "z", "si", "ind", "I", "it", "u", "pi", "d", "q", "f", "io", "m", "xi", "di", "ni", "ci", "v", "b", "e", "id", "li", "ii", "ik", "bi", "ip"], "j": ["ji", "ie", "int", "ja", "p", "c", "y", "r", "h", "jj", "o", "im", "jl", "z", "si", "ch", "u", "d", "q", "jp", "f", "m", "ni", "ij", "J", "v", "b", "key", "e", "t", "id", "li", "ii"], "k": ["km", "s", "p", "g", "c", "K", "y", "r", "h", "o", "kk", "ijk", "ks", "kn", "z", "kl", "ch", "w", "ko", "ak", "u", "d", "q", "ki", "f", "sk", "m", "v", "key", "b", "ck", "e", "id", "ik", "uk"], "l": ["lp", "s", "L", "p", "g", "c", "h", "r", "o", "sl", "el", "ml", "lv", "lc", "jl", "kl", "z", "u", "d", "ll", "q", "ln", "f", "lf", "m", "nl", "v", "b", "ld", "ls", "e", "il", "le", "li", "lin"], "n2": [" n02", "ne62", "j62", "N42", "N20", "N5", "N02", " n5", "ne02", "n20", "ne12", "ne5", " n12", "n62", "n5", "N4", "N2", "N12", "n02", "jTwo", "nn2", "n12", "n42", "nTwo", "nn42", " n62", "ne2", "neTwo", "j2", "nn4", "nn20", " n20", " nTwo", " n42"], "x": ["dx", "dd", "int", "sex", "rex", "X", "p", "tx", "exp", "ext", "xs", "c", "plus", "xx", "yx", "fx", "y", "number", "lex", "num", "en", "rx", "h", "work", "px", "ix", "ph", "by", "orig", "rax", "z", "xt", "ty", "ex", "index", "xxx", "image", "w", "cross", "hyp", "php", "ctx", "d", "wx", "f", "ax", "m", "plex", "ux", "xi", "xf", "xb", "data", "alpha", "ct", "xe", "v", "b", "xp", "xml", "e", "t", "pe", "xes", "xy", "id", "xc", "abc", "ip"], "n4": ["N74", "n84", "ne4", "m24", "N6", "num64", " n6", "c4", "m4", "pFour", "num24", "p4", "p04", "dn4", "ne6", "ne12", "c14", "num6", "p12", "num2", "N4", "num14", " n84", "n04", "c24", "dn74", "dn2", "n64", "N2", "N12", "p74", "p2", "n12", "ne24", "nFour", "c2", "num4", "N04", "ne2", "N64", "ne14", "n6", "num04", "m14", "NFour", "dnFour", "ne64", "c6", "ne84", "N14", "p14", "N24", "m84", "p24"], "n14": ["N16", "n13", "ne149", "N54", "ne4", "p16", "ng12", "ng74", "p54", "c12", "N13", "n149", "c4", " n149", "p4", " n54", " n13", "ng44", "ne12", "nb44", "nb14", "c14", "nb12", "ng14", "n44", "n16", " n12", "n54", "N4", "c24", "N149", "N12", "n12", "nb74", "ne14", "p13", "N14", "N24", " n44", "p14", "p24", " n16"], "n24": ["ln74", "N16", "N74", "N25", "p25", "p16", "num64", "n25", "c12", "c4", "num24", "p4", "p64", " n25", "c14", "c64", " n64", "p12", "n16", " n12", "N4", "num12", "num14", "c24", "n64", "N12", "ln24", "n12", "ln4", "N64", "ln14", "N14", "N24", "p24", " n16"], "n74": ["rn74", "N74", "N54", "n73", "p54", "rn54", " n54", " n73", "n54", " n443", "p74", "n443", "N443", "rn24", "p73", "N73", "N24", "rn443", "p24"], "p553": ["n483", "n553", "t53", " p53", "t551", "p483", " p663", "p53", "t483", "cop483", "p663", "cop53", "cop663", "n53", "n663", "p551", " p551", "n551", " p483", "t553", "cop553"], "p144": ["private204", "p514", " p24", "P124", "P514", "private474", "cop124", "P24", "point24", "x204", "x474", "cop144", "p204", "p474", "P144", " p514", "point124", "point514", "x124", "p124", "private144", "x144", "cop474", "cop204", " p124", "point144", "p24", "private124"], "p242": ["ap252", " p243", "ap241", "n246", "ap244", " p246", "n244", " p244", "n242", "p246", "ap246", " p241", "p252", "p241", "par242", "par241", " p252", "p243", "p244", "n252", "ap243", "par244", "ap242", "par243"], "p750": ["P250", "sp250", "P750", "p748", " p714", "np250", "P748", " p760", "cp760", "sp748", "n714", "p760", "np750", "sp750", "p74", "cp250", "np74", "p714", "cp750", " p250", "n760", "n250", "n750", "np748", "cp714", "P74", "p250", "sp74"]}}
{"code": "N,C = map(int,input().split())\\nST = []\\nfor _ in range(N):\\n  s,t,c = map(int,input().split())\\n  ST.append([s,0,c])\\n  ST.append([t,1,c])\\nST.sort(key=lambda x:x[0])\\nST.sort(key=lambda x:x[2])\\nfor i in range(len(ST)-1):\\n  if ST[i][2]==ST[i+1][2] and ST[i][0]==ST[i+1][0]:\\n    ST[i][1]=2\\n    ST[i+1][1]=2\\n\\nST.sort(key=lambda x:x[1])\\nST.sort(key=lambda x:x[0])\\n\\nans =[0]\\nfor st in ST:\\n  if st[1]==0:\\n    ans.append(ans[-1]+1)\\n  elif st[1]==1:\\n    ans.append(ans[-1]-1)\\nprint(max(ans))\\n\\n", "target": "632", "substitutes": {"N": ["F", "E", "L", "V", "H", "Q", "X", "Sn", "Y", "NC", "Size", "NS", "Num", "K", "CNN", "O", "P", "T", "B", "D", "Ne", "S", "W", "I", "NT", "Z", "Ns", "CL", "U", "R", "M", " n", "Count", "n"], "C": ["F", "E", "L", "V", "CI", "X", "Y", "NC", "Size", "DC", "K", "O", "P", "T", "B", "D", "S", "A", "W", "I", "Z", "U", "R", "ci", "M"], "ST": ["sta", "Stage", "SC", "FE", "SE", "SR", "ost", " St", "SW", "St", "LD", "Rest", "RS", "ESS", "LE", "BL", "Stream", "Station", "LL", "ast", "LT", "X", "LS", "est", "SH", "TH", "ANS", "EST", "POST", "Step", " STR", "UT", "TX", "U", "String", "SM", "string", "OST", "ID", "rest", "str", "PUT", "Stack", "sts", " STEP", "TS", "AND", "ACT", "FF", "GROUP", "SA", "TR", "SK", "STD", "S", "SL", "put", "IST", "SS", "Z", "END", "INT", "SP", "CT", "STR", "EN", "FR", "Y", "STAR", "AST", "Str", "USE", "P", "T", "GET", "STRUCT", "NT", "SET", " SW", "ust", "TEXT", "TT", "UST", "ENT"], "_": ["k", "num", " time", " __", " k", " q", "ind", "I", "d", "j", " j"], "s": ["ss", "a", "sc", "p", "g", "xs", "sets", "y", "r", "o", "z", "si", "x", "S", "w", "l", "u", "d", "f", "cs", "ns", "su", "os", "ts", "b", "v", "e", "ls", "ds", "se", "sv", "n"], "t": ["k", "int", "tt", "p", "y", "r", "tp", "T", "tf", "z", "x", "w", "l", "u", "d", "ta", "f", "dt", "m", "tu", "ts", "v", "b", "e", "tz", "n"], "c": ["k", "p", "y", "r", "cp", "lc", "z", "ce", "x", "cy", "cu", "con", "l", "u", "d", "cn", "q", "f", "ca", "cs", "ci", "ct", "b", "v", "cf", "e", "cr", "cc", "col", "n"], "i": ["gi", "k", "ui", "end", "ie", "int", "qi", "p", "ai", "oi", "h", "r", "y", "ini", "ix", "o", "iu", "api", "lc", "ti", "z", "mini", "si", "eni", "index", "x", "source", "ind", "start", "I", "uri", "l", "u", "d", "pi", "j", "f", "io", "cli", "iii", "xi", "di", "ri", "ni", "ip", "ci", "b", "key", "my", "e", "info", "col", "id", "multi", "li", "ii", "ik", "bi", "n"], "ans": ["anc", "ents", "groups", "span", "lan", "amps", "nas", "ams", "ras", "cas", "ps", "na", "xs", "ats", "gan", "ions", "aning", "sts", "antis", "anas", "AN", "aos", "options", "ANS", "anes", "ks", "any", "asts", "aces", "names", "ann", "anon", "ani", "vers", "cus", "ana", "ays", "es", "params", "can", " means", "x", "anus", "args", "parts", "aned", "ations", "sex", "ons", "ids", "stats", "anne", "leans", "ens", "sk", "cs", "ants", "ns", "types", "shape", "features", "os", "san", "olds", "ds", "an", "ast", "ins"], "st": ["ss", "amp", "rest", "sta", "int", "str", "sc", "const", "est", "std", "nd", "ft", "ost", "sts", "case", "nc", "St", "sp", "station", "x", "store", "ste", "sn", "put", "start", "ind", "l", "src", "d", "ace", "nt", "ist", "inst", "sw", "stop", "ess", "set", "ct", "string", "cr", "step", "ast"]}}
{"code": "import sys,queue,math,copy,itertools,bisect,collections,heapq\\n\\ndef main():\\n    sys.setrecursionlimit(10**7)\\n    INF = 10**18\\n    MOD = 10**9 + 7\\n    LI = lambda : [int(x) for x in sys.stdin.readline().split()]\\n    NI = lambda : int(sys.stdin.readline())\\n\\n    N = NI()\\n\\n    N0 = 2**(N.bit_length())\\n    st = [0] * (N0*2)\\n\\n    def gindex(l, r):\\n        L = l + N0; R = r + N0\\n        lm = (L // (L & -L)) // 2\\n        rm = (R // (R & -R)) // 2\\n        while L < R:\\n            if R <= rm:\\n                yield R - 1\\n            if L <= lm:\\n                yield L - 1\\n            L //= 2; R //= 2\\n        while L > 0:\\n            yield L - 1\\n            L //= 2\\n\\n    def update(i,s):\\n        x = 2 ** (ord(s) - ord('a'))\\n        i += N0-1\\n        st[i] = x\\n        while i > 0:\\n            i = (i-1) // 2\\n            st[i] = st[i*2+1] | st[i*2+2]\\n\\n    def query(l,r):\\n        l += N0\\n        r += N0\\n        ret = 0\\n\\n        while l < r:\\n            if l % 2:\\n                ret |= st[l-1]\\n                l += 1\\n            if r % 2:\\n                r -= 1\\n                ret |= st[r-1]\\n            l //= 2 ; r //= 2\\n\\n        return ret\\n\\n\\n    for i,s in enumerate(sys.stdin.readline().rstrip()):\\n        update(i+1,s)\\n    Q = NI()\\n    for _ in range(Q):\\n        c,a,b = sys.stdin.readline().split()\\n        if c == '1':\\n            update(int(a),b)\\n        else:\\n            ret = query(int(a),int(b)+1)\\n            cnt = 0\\n            b = 1\\n            for i in range(26):\\n                cnt += (b & ret) > 0\\n                b <<= 1\\n            print(cnt)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "779", "substitutes": {"INF": ["CONI", "CONFE", " INI", "INI", " INFE", "CONF", "InF", "InFE", " INFs", "CONFs", "InI", "INFs", "InFs", "INFE"], "MOD": ["MI", " exp", " MB", " QR", "LIB", " mod", "RR", "P", "Mod", " EXP", " Mod", " C", " LIB", "MQ", "SIZE", "MB", " U", "MAX", "Z", " MAX", "Mi", "GB", "mod", "REG", " Z", " CP", "G", "RM"], "LI": [" IR", " Qi", " MX", " Fn", " MI", " II", " Fi", " QR", " CI", " Mini", " LR", " PI", " NL", " RN", " Bi", " Net", " mi", " RI", " Xi", "I", " NS", " Qin", " NP", " ND", " Yi", " RX", " MRI", " Line"], "x": ["dx", "int", "X", "p", "xs", "xx", " I", "rx", "y", "ix", "h", " f", "z", "ex", "index", "xxxx", "xxx", " xx", "w", "I", "wx", "u", "d", "max", "q", "f", "m", "xi", " int", "ci", "xe", " X", "xp", "v", "foo", "e", "t", "xy", "xc", "xa", "n", "xxxxxxxx"], "NI": ["MN", "Network", "NF", "RI", "NR", "CI", "NN", "NPR", "AI", "qi", "MI", "NS", "NE", "MRI", "MX", "ini", "NM", "FI", "FIN", "SI", "NP", "NH", "GI", "NY", "NT", "Ni", "network", "Net", "Ns", "II", "VM", "ANI", "Fi", "ni", "NV", "TI", "nis", "ZI", "GN", "VI", "NA", "DI", "DN", "DNA"], "N": ["Nat", "NF", "NR", "V", "NN", "NL", "X", "Sn", "Y", "NC", "NS", "NE", "Na", "NM", "O", "P", "C", "D", "Ne", "S", "W", "I", "RN", "NT", "Ni", "Nic", "Z", "Ns", "ND", "NV", "M", "NB", "G", "NA", "n"], "N0": ["V1", "O4", "N00", "M0", "F0", "R1", "N4", "C00", "C1", "Len192", "I00", "R000", "O0", "M5", "Ck", "NE5", "Ne00", "F6", " N000", "n00", "M00", " N6", " N00", "N1", "O1", "R00", " N1", " N4", "L0", "NE00", "N6", "Nk", "N192", "n1", "C6", "Cfe", "V000", "Len0", "C192", "Ne5", "nk", "V0", "NE1", " N192", "I0", "Len00", "M1", "C0", "F1", "Nfe", "V4", "nfe", "N5", "V00", "NE0", "Ne1", "n0", "Lfe", "Lk", "Ne0", "I1", "R0", "N000"], "st": ["ss", "stand", "sh", "rest", "const", "sta", "STR", "sc", "int", "str", "stable", "struct", "est", "p", "nd", "std", "ft", "stri", "ost", " St", "sts", "rd", "sl", "ST", "td", "fe", "pt", " ST", "St", "sp", "first", "z", "Sa", "sth", "ste", "sn", "stack", "sb", "put", "start", "stage", "now", "SS", "d", "nt", "ut", "sa", "ust", "inst", "ist", "sw", "spect", "set", "ct", "ld", "string", "cr", "t", "ast"], "l": ["lp", "k", "ol", "line", "ur", "p", "al", "g", "h", "sl", "o", "y", "el", "lr", "la", "lo", "lc", "z", "kl", "ar", "w", "u", "d", "ll", "q", "dl", "f", "ln", "j", "m", "ir", "rl", "nl", "v", "e", "t", "ls", "le", "il", "li", "ul", "lb", "n"], "r": ["yr", "rh", "rr", "k", "Rs", "mr", "ur", "p", "g", "err", "h", "rd", "pr", "RR", "re", "lr", "ro", "rev", "ar", "w", "u", "d", "rb", "q", "ra", "j", "range", "sr", "f", "m", "ir", "dr", "rl", "right", "br", "rt", "rg", "rel", "ri", "nr", "v", "e", "t", "fr", "kr", "cr", "ru", "er", "rs", "n"], "L": ["F", "E", "LB", "V", "LT", "IL", "NL", "X", "TL", "Y", "FL", "LA", "dL", "LP", "Lu", "O", "P", "B", "T", "LM", "D", "C", "PL", "S", "A", "W", "SL", "Sl", "I", "EL", "LR", "Li", "Line", "OL", "Z", "Fl", "RL", "El", "U", "M", "XL", "DL", "G", "LL", "ML", "UL"], "R": ["F", "E", "Rs", "NR", "V", "H", "X", "Y", "RT", "SR", "MR", "RR", "RO", "RE", "P", "T", "B", "C", "D", "S", "A", "W", "Res", "RS", "I", "GR", "Rh", "RN", "DR", "LR", "RL", "U", "M", "J", "G", "RA", "RH", "RM"], "lm": ["rr", "Lm", "Ld", "Lr", "rM", "lmr", "lr", "LM", "olm", "Lmr", "Lcm", " lcm", " lM", "rcm", " lr", "old", "olM", " lmr", "lM", "ld", "olmr", " ld", "lcm"], "rm": ["km", "rr", "mr", "mn", "rar", "nm", "Mr", "MR", "rx", "rd", "pm", "rf", "RR", "lr", "md", "rn", "LM", "lc", "fm", "vm", "dm", "RB", "RN", "MB", "rb", "LR", "sr", "m", "rl", "mx", "bm", "RP", "rt", "hm", " RM", "nor", "RM"], "i": ["gi", "k", "ui", "vi", "ie", "int", "qi", "p", "phi", "ai", "g", " I", "y", "o", "ix", "ini", "iu", "api", "lo", "ti", "z", "mini", "si", "index", "yi", "ind", "I", "uri", "u", "d", "pi", "q", "j", "f", "io", "m", " j", "xi", "ri", "ni", "ci", "hi", "ip", "v", "my", "e", "t", "multi", "id", "zi", "li", "ii", "seq", "bi", "n"], "s": ["ss", "sq", "sh", "sc", "p", "ps", "xs", "g", "rows", "sys", "y", "o", "sl", "sf", "sp", "z", "si", "es", "S", "sb", "u", "sec", "sg", "f", "j", "sa", "sr", "m", "ns", "us", "su", "os", "gs", "v", "string", "t", "ls", "e", "ds", "se", "sv", "sub", "rs", "n"], "ret": ["rr", "alt", "int", "reply", "repl", "ur", "p", " Ret", "ft", "arr", "success", "err", "g", "en", "result", "num", "rep", "re", "bis", "reg", "rev", "xt", "z", "d", "nt", "q", "out", "j", "f", "rc", "gt", "cat", "rl", "fun", "rt", "Ret", "resp", "br", "ref", "data", "match", "len", "v", "t", "all", "count", "det", "seq", "id", "val", "bit", "rs", "ry", "RET", "rets", "res", "n"], "Q": ["QU", "F", "V", "H", "X", "Y", "Num", "Query", "K", "P", "B", "C", "T", "D", "z", "MQ", "S", "A", "W", " q", "I", "q", "Z", "U", "J", "M", "Qu", "G"], "_": [" p", "al", "p", " time", " __", "q", " j", "all", " num", "ip"], "c": ["k", "sc", "p", "arc", "y", "h", "o", "ec", "C", "lc", "ab", "uc", "z", "ce", "cy", "w", "cb", "con", "u", "d", "q", "f", "ca", "rc", "ac", "m", "dc", "ci", "ct", "v", "cf", "e", "cr", "count", "cc", "bc", "xc", "enc", "abc", "ad", "n"], "a": ["aa", "name", "sta", "va", "p", "na", "ai", "aw", "y", "o", "la", "ba", "ab", "au", "da", "pa", "A", "af", "w", "u", "d", "aaa", "f", "sa", "ca", "m", "ac", "ga", "area", "am", "ae", "ea", "e", "an", "n"], "b": ["be", "k", "ib", "fb", "p", "bs", "g", "y", "h", "emb", "wb", "mb", "B", "ba", "ab", "w", "sb", "body", "ob", "bb", "d", "rb", "bf", "abb", "f", "bd", "eb", "lib", "j", "db", "v", "e", "bc", "t", "count", "bas", "nb", "lb", "bi", "n"], "cnt": ["cval", "cNT", "CNT", "cret", "uncnum", "pNT", " cNT", "Cret", "cnum", "acnt", "Cnt", " cno", "Cval", "uncNT", "Cno", "acnum", "acNT", "uncno", "acno", " count", "cno", " cval", "Cnum", "pnt", "pount", "acret", "count", "uncnt", "pval", " cret", "Count"]}}
{"code": "import numpy as np\\nimport sys\\ndef sinput(): return sys.stdin.readline()\\ndef iinput(): return int(sinput())\\ndef imap(): return map(int, sinput().split())\\ndef fmap(): return map(float, sinput().split())\\ndef iarr(): return list(imap())\\ndef farr(): return list(fmap())\\ndef sarr(): return sinput().split()\\n\\ns = input()\\nans = 1\\ntmp = s[0]\\nfor i in s:\\n    if i != tmp:\\n        ans += 1\\n        tmp = i\\nprint(ans-1)", "target": "655", "substitutes": {"s": ["ss", "strings", "a", "south", "p", "ps", "xs", "c", "sets", "r", "sie", "sp", "si", "es", "S", "st", "sb", "l", "lines", "ses", "d", "sg", "f", "sa", "cs", "m", "ns", "input", "os", "b", "v", "t", "ls", "ips", "sub", "ops", "sv", "sis", "comments", "n"], "ans": ["ss", "lins", "a", "ents", "offs", "nas", "amps", "ams", "na", "ai", "xs", "ats", "ms", "anas", "aos", "ads", "ANS", "ks", "annels", "ann", "ays", " means", "ars", "args", "aned", "faces", "ons", "aus", "ens", "cs", "ants", "ns", "types", "os", "acts", "cons", "ips", "asi", "ians", "ds", "an", "ins"], "tmp": ["ano", "amp", "cmp", "a", "fd", "p", "img", "xs", "tp", "px", "kk", "pos", "buf", "txt", "sp", "temp", "mp", "array", "si", "xt", "x", "st", "now", "sb", "start", "obj", "nb", "src", "pi", "nt", "nn", "kB", "sup", "j", "m", "pp", "inst", "appy", "mmm", "yy", "input", "su", "ppa", "stuff", "vt", "v", "np", "t", "py", "qq", "part", "test"], "i": ["ji", "k", "a", "ie", "int", "at", "p", "ai", "c", "oi", "o", "y", "ini", "iq", "iu", "slice", "ti", "z", "mini", "si", "I", "ia", "it", "l", "pi", "j", "io", "m", "xi", "input", "ni", "ci", "v", "b", "t", "e", "info", "iw", "asi", "multi", "ii", "n", "bi", "ip"]}}
{"code": "N,M = map(int,input().rstrip().split(\" \"))\\nA = []\\nB = []\\nans = False\\nfor i in range(N):\\n    A.append(list(input()))\\nfor i in range(M):\\n    B.append(list(input()))\\nfor i in range(N - M + 1):\\n    for i2 in range(N - M + 1):\\n        for i3 in range(M):\\n            if A[i3 + i][i2:i2 + M] != B[i3]:\\n                break\\n            if i3 == M -1:\\n                ans = True\\nif ans:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "483", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "NC", "Num", "NS", "NE", "K", "NM", "CNN", "O", "P", "C", "T", "D", "Ne", "S", "W", "I", "No", "Z", "Ns", "U", "R", "NB", "G", "KN", "NA", "Wh", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "Num", "DM", "MX", "K", "RM", "NM", "O", "JM", "P", "LM", "T", "D", "C", "MD", "S", "W", "CM", "I", "FM", "Z", "MH", "m", "U", "R", "Mi", "J", "MS", "MF", "MM", "MU", "G", "Mo", "n"], "A": ["F", "AD", "GA", "a", "L", "Az", "AS", "Y", "AP", "Adam", "LA", "AR", "EA", "AN", "BA", "AM", "AH", "AB", "P", "AU", "SA", "AC", "As", "Ar", "C", "API", "AA", "Alpha", "I", "ABC", "Ab", "CA", "U", "AF", "Am", "NA", "An", "Answer", "App"], "B": ["F", "E", "EB", "L", "LB", "V", "Y", "UB", "AP", "CB", "PB", "Bi", "BA", "AB", "O", "P", "D", "SB", "BG", "BB", "BC", "BI", "TB", "BF", "RB", "MB", "Ab", "BE", "Two", "BR", "BL", "OB", "II", "WB", "U", "GB", "R", "b", "NB", "Both", "QB", "VB", "Other", "BER", "BS", "Bs"], "ans": ["ain", "a", "ents", "lan", "nas", "ras", "amps", "atan", "ai", "Ann", "aning", "anas", "AN", "ANS", "anes", "ks", "ane", "aces", "annels", "ann", "anon", "ani", "anc", "annot", "ays", "ana", "can", "nan", " means", "An", "ars", "anned", "anch", "ant", "anks", "args", "ations", "ons", "leans", "sk", "ants", "ns", "scan", "ases", "os", "san", "powers", "ds", "an", "ins"], "i": ["k", "ui", "a", "ie", "int", "qi", "p", "phi", "ai", "c", "o", "y", "h", "r", "iu", "ti", "z", "si", "on", "index", "x", "mu", "ind", "I", "ia", "it", "l", "u", "pi", "d", "io", "f", "j", "m", "xi", "di", "ni", "ci", "ip", "v", "b", "e", "id", "li", "ii", "n"], "i2": ["qi20", "i6", "qi2", "I6", "si0", "si82", "qi4", "p3", "p4", "a62", "i0", " i62", "i82", " i0", " i4", "si62", "p12", " i6", " i12", "i12", "I2", "i20", "p20", "a0", "a2", "p2", " i20", " i82", "si2", "i4", "I3", "a82", "i62", "qi3", "p6", "I12"], "i3": [" i1", "pi2", "i512", " i9", "si30", "si3", "pi5", "j1", "j5", "i9", "i30", "pi1", "I512", "pi3", "si9", "iu3", "j512", " i5", "I2", "i1", "I03", "qi30", "iu2", "i5", " i30", "j3", "I3", "j03", "j2", "qi9", "i03", "I1", "iu03", "qi3", "iu512", " i03"]}}
{"code": "a = raw_input().split()\\nb = []\\nb.append(int(a[0]))\\nb.append(int(a[1]))\\nb.append(int(a[2]))\\nb.sort()\\nprint b[0], b[1], b[2]", "target": "117", "substitutes": {"a": ["aa", "s", "auto", "int", "p", "na", "c", "aw", "i", "fa", "y", "r", "la", "ba", "ab", "array", "da", "x", "pa", "A", "l", "u", "d", "f", "ca", "sa", "asa", "ga", "ac", "m", "area", "aj", "input", "am", "data", "alpha", "ea", "e", "abc", "part", "za", "an", "ast", "ad", "n"], "b": ["s", "be", "ib", "boot", "fb", "p", "bs", "bp", "g", "c", "pb", "i", "y", "r", "o", "wb", "library", "bis", "api", "B", "split", "ba", "mb", "ab", "array", "body", "sb", "cb", "book", "obj", "bug", "l", "ob", "bb", "d", "nb", "bf", "rb", "abb", "f", "object", "eb", "bd", "xb", "br", "data", "db", "binary", "batch", "bin", "v", "gb", "base", "e", "t", "an", "bi", "part", "lb", "block", "ad", "n"]}}
{"code": "s = input()\\nprint(1 - int(s))", "target": "497", "substitutes": {"s": ["sid", "sample", "words", "states", "p", "g", "c", "steps", "i", "h", "secondary", "suff", "second", "time", "index", "blocks", "S", "w", "start", "sb", "args", "parts", "services", "d", "sg", "f", "status", "sort", "m", "sync", "ssl", "ns", "site", "seconds", "abs", "string", "b", "e", "ls", "session", "ops", "submit", "comments", "n"]}}
{"code": "import bisect\\n\\nn = int(input())\\nX = list(map(int, input().split()))\\n\\nsorted_x = sorted(X)\\n\\nl, r = sorted_x[n//2], sorted_x[n//2-1]\\n\\nfor x in X:\\n    if bisect.bisect_left(sorted_x, x) < n // 2:\\n        print(l)\\n    else:\\n        print(r)", "target": "16", "substitutes": {"n": [" N", "s", "k", " p", "L", "p", " s", " number", "c", "i", "y", "o", "num", " c", " i", "nc", "un", "en", "number", " line", " k", "left", "ne", " f", "z", "fn", " fn", "w", " Xi", "nin", "u", "d", "nn", "nt", "ln", "j", "f", "network", "m", " j", "ns", "no", "nl", "b", "v", "nr", "t", "N", "e", "count", " Ne", "h", "nb", " len", " b"], "X": ["F", "L", "V", "XM", "H", "Q", "XX", "Y", "xs", "XP", "K", "Parts", "JSON", "O", "P", "T", "C", "D", "S", "A", "W", "XXX", "IX", "I", "TX", "Z", "Array", "XY", "U", "R", "List", "M", "J", "XL", "N", "G", "Cross"], "sorted_x": ["sort_index", "sort_xx", "sort_x", "sorted_p", "sorted_xx", "sorted_X", "sorting_x", "sort_y", "sorted_y", "sorted_index", "sorting_p", "sorting_y", "sorted_xy", "sort_xy", "sort_X", "sort_p", "sorting_X"], "l": ["k", "loc", "L", "p", "c", "i", "o", "sl", "lr", "el", "left", "lc", "z", "kl", "w", "u", "d", "ll", "f", "j", "ln", "m", "dl", "rl", "list", "nl", "b", "v", "len", "e", "ls", "li"], "r": ["rh", "s", "k", "rr", "a", "ner", "ur", "p", "g", "c", "i", "h", "pr", "lr", "z", "w", "u", "d", "q", "f", "right", "j", "sr", "m", "R", "nr", "b", "v", "e", "er", "rs"], "x": ["dx", "int", "xf", "tx", "p", "xs", "plus", "xx", "rx", "y", "ix", "nex", "z", "ex", "xxx", "xxxx", "index", "w", "wx", "xd", "ax", "sw", "xi", "self", "xb", "xe", "string", "xp", "v", "e", "xes", "xy", "xc", "xa", "xxxxxxxx"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nS = input()\\n\\ncount = 0\\nfor i, s in enumerate(S):\\n    if i % 2 and s == S[0]:\\n        count += 1\\n    if i % 2 == 0 and s != S[0]:\\n        count += 1\\n\\nif count > len(S):\\n    count = len(S) - count\\n\\nprint(count)\\n\\n", "target": "495", "substitutes": {}}
{"code": "def make_prime_table(n):\\n    sieve = list(range(n + 1))\\n    sieve[0] = -1\\n    sieve[1] = -1\\n    for i in range(4, n + 1, 2):\\n        sieve[i] = 2\\n    for i in range(3, int(n ** 0.5) + 1, 2):\\n        if sieve[i] != i:\\n            continue\\n        for j in range(i * i, n + 1, i * 2):\\n            if sieve[j] == j:\\n                sieve[j] = i\\n    return sieve\\n\\n\\ndef prime_factorize(n):\\n    result = []\\n    while n != 1:\\n        p = prime_table[n]\\n        e = 0\\n        while n % p == 0:\\n            n //= p\\n            e += 1\\n        result.append((p, e))\\n    return result\\n\\n\\nN = int(input())\\n\\nprime_table = make_prime_table(N)\\nd = {}\\nfor i in range(2, N + 1):\\n    for p, e in prime_factorize(i):\\n        d.setdefault(p, 0)\\n        d[p] += e\\n\\n# 75 = 5 * 5 * 3\\n#    = 15 * 5\\n#    = 25 * 3\\n#    = 75\\nn74 = 0\\nn24 = 0\\nn14 = 0\\nn4 = 0\\nn2 = 0\\nfor k in d:\\n    if d[k] >= 74:\\n        n74 += 1\\n    if d[k] >= 24:\\n        n24 += 1\\n    if d[k] >= 14:\\n        n14 += 1\\n    if d[k] >= 4:\\n        n4 += 1\\n    if d[k] >= 2:\\n        n2 += 1\\n\\nresult = 0\\n# x ^ 4 * y ^ 4 * z ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\\nresult += n4 * (n4 - 1) // 2 * (n2 - 2)\\n# x ^ 14 * y ^ 4 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\\nresult += n14 * (n4 - 1)\\n# x ^ 24 * y ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\\nresult += n24 * (n2 - 1)\\n# x ^ 74 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\\nresult += n74\\nprint(result)\\n", "target": "145", "substitutes": {"n": ["s", "k", "a", "mn", "c", "g", "o", "r", "y", "num", "nc", "net", "un", "en", "rn", "ne", "nu", "z", "ng", "on", "x", "nan", "sn", "w", "node", "l", "u", "nt", "pi", "nn", "cn", "network", "m", "f", "ns", "number", "no", "ni", "v", "b", "np", "t", "pn", "dn", "nb", "an"], "sieve": ["nsieve", "Sieving", "gsvine", " sieving", "gcess", "giever", "sift", " sieved", "osiever", "sig", "ssift", "sieved", "ssiever", "sink", "gsieving", "sile", "osieving", "dsink", "opensift", "timesieved", "opensile", " sive", "Sieve", "ensig", "gift", "opensieve", "ensiever", "nsift", "timesiever", " sig", "siever", "sive", "gieve", "esieving", "dsipe", "dsift", "scess", "gsile", "opensink", "ensieve", "lsieving", "pscess", "lsvine", "eive", "unsieving", "timesig", "unsift", "unsieve", "osieve", "esift", "psieve", "gsift", "nsieving", "unsiever", "Sift", "nsiever", "dsieve", "ssieve", " scess", "lsieve", "ssieving", " sipe", "psift", "gsieve", "esiever", "sieving", "svine", "ensieving", "psiever", "insieve", "Siever", "Sile", "insieving", "timesieve", "eiever", "insift", "ensieved", "opensipe", "osive", " siever", "lsiever", "eieving", " sink", " sift", "esieve", "sipe", "gsiever", "insiever", "eieve", "opensiever", "ensvine"], "i": ["gi", "ji", "s", "k", "ui", "a", "ei", "ie", "int", "qi", "phi", "ai", "g", "c", "o", "y", "h", "ini", "r", "ine", "iu", "z", "si", "index", "x", "yi", "ind", "I", "it", "l", "u", "pi", "io", "f", "jp", "m", "xi", "di", "ni", "ip", "ci", "v", "b", "t", "id", "li", "ii", "bi", "ti"], "j": ["ji", "s", "k", "ie", "c", "jo", "y", "o", "jj", "h", "ix", "r", "iu", "jl", "z", "si", "index", "x", "ind", "I", "l", "u", "pi", "jp", "f", "m", "xi", "ij", "J", "v", "b", "li", "ii"], "result": ["new", "value", "false", "total", "default", "err", "Results", "r", "use", "dict", "results", "future", "number", "num", "case", "section", "div", "array", "final", "search", "response", "cache", "Result", "diff", "master", "current", "answer", "prime", "root", "member", "score", "row", "page", "position", "core", "output", "parent", "list", "data", "length", "match", "pair", "package", "order", "true", "all", "ret", "range", "test", "sum", "res"], "p": ["lp", "s", "k", "op", "a", "pid", "pre", "ps", "bp", "g", "c", "y", "o", "tp", "per", "h", "pr", "cp", "r", "pm", "ap", "gp", "P", "api", "z", "po", "pa", "x", "vp", "w", "current", "l", "u", "pi", "q", "f", "jp", "param", "point", "pp", "m", "port", "parent", "ep", "ip", "b", "v", "np", "t", "pe", "pn", "py", "pc", "part", "pg"], "e": ["E", "end", "a", "ve", "ie", "line", "ei", "ze", "ed", "ele", "g", "c", "element", " pe", "eve", "y", "o", "r", "en", "ine", "ec", "eeee", "el", "fe", "ne", "z", "oe", "edge", "es", "ce", "x", "l", "ee", "u", "f", "eu", "eed", "m", "ep", "ae", "data", "xe", "v", "b", "ea", "pe", "ice", "t", "er"], "N": ["F", "E", "L", "V", " R", "H", "Q", "X", "Y", "NC", "Size", "Num", "NI", "K", "Na", "num", "O", "P", "T", "C", "B", "D", " C", "Ne", "S", "A", "I", "NT", "NG", "Ni", "Z", "Ns", "II", "U", "R", "M", "J", "G", " P"], "prime_table": [" prime_TABLE", "prime_TABLE", "prime2TABLE", " prime_form", "primefform", " prime_point", "prime_tree", "prime_point", " prime_tree", " prime_list", "prime2tree", "prime2table", "prime_list", "primefTABLE", "primeftree", "prime_form", "primeftable", "prime2form"], "d": ["s", "k", "dd", "a", "dy", "dh", "g", "c", "dat", "o", "dict", "r", "sd", "ded", "D", "z", "da", "l", "u", "do", "f", "dt", "dl", "m", "dc", "di", "data", "db", "v", "b", "t", "pd", "ds", "ad"]}}
{"code": "from collections import deque\\n\\n\\nclass UnionFindWeighted:\\n    \"\"\"\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u4ed8\u304dUnionFind\"\"\"\\n    def __init__(self, n):\\n        self.parent = [-1] * n\\n        self.weight = [0] * n\\n        self.cnt = n\\n        self.INF = 10 ** 18\\n\\n    def root(self, x):\\n        \"\"\"\u9802\u70b9x\u306e\u6839\u3092\u6c42\u3081\u308b\"\"\"\\n        if self.parent[x] < 0:\\n            return x\\n        rt = self.root(self.parent[x])\\n        self.weight[x] += self.weight[self.parent[x]]\\n        self.parent[x] = rt\\n        return rt\\n\\n    def merge(self, x, y, weight):\\n        \"\"\"\u9802\u70b9x\u3092\u542b\u3080\u96c6\u5408\u3068\u9802\u70b9y\u542b\u3080\u96c6\u5408\u3092\u7d50\u5408\u3059\u308b\\n        weight: \u9802\u70b9y\u306b\u5bfe\u3059\u308b\u9802\u70b9x\u306e\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb(\u9802\u70b9x\u306e\u65b9\u304cweight\u9ad8\u3044)\\n        \"\"\"\\n        root_x = self.root(x)\\n        root_y = self.root(y)\\n        if root_x == root_y:\\n            return\\n        if self.parent[root_x] < self.parent[root_y]:\\n            self.parent[root_x] += self.parent[root_y]\\n            self.parent[root_y] = root_x\\n            self.weight[root_y] = -weight + self.weight[x] - self.weight[y]\\n        else:\\n            self.parent[root_y] += self.parent[root_x]\\n            self.parent[root_x] = root_y\\n            self.weight[root_x] = weight - self.weight[x] + self.weight[y]\\n        self.cnt -= 1\\n\\n    def is_same(self, x, y):\\n        \"\"\"\u9802\u70b9x, y\u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059\"\"\"\\n        return self.root(x) == self.root(y)\\n\\n    def diff(self, x, y):\\n        \"\"\"\u9802\u70b9y\u306b\u5bfe\u3059\u308b\u9802\u70b9x\u306e\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u3092\u6c42\u3081\u308b\\n        \u305f\u3060\u3057\u3001\u9802\u70b9x,y\u9593\u306b\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f INF \u3092\u8fd4\u3059\\n        \"\"\"\\n        if not self.is_same(x, y):\\n            return self.INF\\n        return self.weight[x] - self.weight[y]\\n\\n    def get_size(self, x):\\n        \"\"\"\u9802\u70b9x\u3092\u542b\u3080\u96c6\u5408\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\"\"\"\\n        return -self.parent[self.root(x)]\\n\\n    def get_cnt(self):\\n        \"\"\"\u96c6\u5408\u306e\u500b\u6570\u3092\u8fd4\u3059\"\"\"\\n        return self.cnt\\n\\n\\nn = int(input())\\ninfo = [list(map(int, input().split())) for i in range(n - 1)]\\nqq, k = map(int, input().split())\\nquery = [list(map(int, input().split())) for i in range(qq)]\\nk -= 1\\n\\ntree = [[] for i in range(n)]\\nfor a, b, cost in info:\\n    a -= 1\\n    b -= 1\\n    tree[a].append((b, cost))\\n    tree[b].append((a, cost))\\n\\nuf = UnionFindWeighted(n)\\nroot = k\\npar = {root: -1}\\nq = deque([root])\\nwhile q:\\n    v = q.pop()\\n    for nxt_v, cost in tree[v]:\\n        if nxt_v in par:\\n            continue\\n        else:\\n            par[nxt_v] = v\\n            uf.merge(nxt_v, par[nxt_v], cost)\\n            q.append(nxt_v)\\n\\nfor a, b in query:\\n    a -= 1\\n    b -= 1\\n    print(uf.diff(a, k) + uf.diff(b, k))", "target": "360", "substitutes": {"self": ["s", "Self", "name", "group", "false", "event", "plus", "gh", "per", "this", "wrapper", "support", "http", "events", "module", "user", "l", "ctx", "f", "right", "elf", "co", "private", "data", "type", "dev", "high", "gen", "ops", "part", "manager", "new", "error", "layer", "full", "change", "auto", "cmp", "worker", "host", "load", "h", "pos", "tmp", "client", "temp", "proc", "ng", "utils", "comp", "node", "cross", "www", "items", "function", "os", "e", "all", "source", "form", "raw", "spec", "members", "request", "p", "default", "ps", "sys", "case", "r", "result", "instance", "ch", "time", "cache", "now", "req", "d", "max", "m", "point", "ns", "resp", "map", "graph", "complete", "func", "view", "config", "block", "other", "me", "top", "g", "c", "err", "context", "work", "results", "app", "shared", "master", "w", "args", "ok", "object", "null", "ws", "no", "system", "base", "cl", "parse", "home", "ref"], "n": [" N", "name", "p", "g", "c", "number", "nc", "num", "r", "net", "o", "h", "size", "ne", "z", "nan", "sn", "w", "node", "nat", "l", "u", "d", "cn", "nn", "nt", "max", "j", "f", "network", "m", "ns", "nr", "np", "t", "N", "pn", "e", "all", "nit", "nb"], "parent": ["plant", "layer", "unit", "pool", "value", "device", "host", "condition", "element", "resource", "context", "target", "known", "instance", "parents", "Parent", "main", "comment", "content", "client", "large", "children", "container", "central", "server", "search", "index", "fork", "image", "memory", "module", "master", "node", "dest", "current", "mother", "connection", "child", "remote", "father", "member", "page", "right", "position", "fat", "point", "author", "port", "function", "proxy", "null", "depth", "term", "shape", "option", "list", "type", "path", "pair", "base", "cover", "profile", "source", "home", "test", "block", "family"], "weight": ["name", "pool", "group", "int", "wt", "level", "rating", "use", "sign", "support", "force", "scale", "user", "model", "core", "age", "gender", "length", "dimension", "type", "order", "mass", "layer", "weights", "sex", "power", "distance", "gravity", "load", "mean", "quality", "Weight", "box", "position", "function", "depth", "shape", "wl", "wd", "key", "capacity", "update", "unit", "default", "dist", "p", "condition", "width", "rate", "number", "link", "size", "time", "index", "lang", "draw", "network", "point", "port", "rank", "speed", "alpha", "count", "grade", "family", "config", "wn", "vote", "value", "work", "large", "wave", "w", "body", "strength", "rc", "style", "option", "mount", " Weight", "base", "filter", "sum"], "cnt": ["cNT", "CNT", "cnc", "lcount", " crt", " cNT", "crt", "rcnt", " cnc", "Cnt", "Counter", "ucrt", "counter", "cgt", "Cnc", "ucount", " cgt", " cnd", " counter", "rcnd", " count", "rcNT", "lcnt", "rcgt", "ucnt", "Crt", "lcounter", "Cgt", "count", "lcNT", "cnd", "Cnd", "Count", "ucnc"], "INF": ["NF", "INFD", "NN", " INDF", "CONDF", " INFF", "ADFF", "CONN", "Nf", "inf", "ADDF", "INf", "CONFD", "INInf", "CONFF", " INInf", "INDF", "inN", "inFD", "CONf", "ADF", "INFF", "inF", "INN", "CONF", "ADInf", "NFD", "CONInf"], "x": ["name", "s", "int", "event", "rx", "ix", "content", "any", "this", "xt", "l", "ctx", "f", "j", "ux", "ya", "data", " X", "xe", "xp", "type", "xy", "change", "code", "sex", "X", "tx", "ic", "xs", "host", "xx", "yx", "h", "ng", "cross", "u", "key", "e", "id", "xc", "python", "p", "r", "lex", "z", "ex", "index", "image", "d", "max", "m", "my", "t", "xes", "on", "dx", "xf", "Y", "exp", "c", "fx", "work", "px", "ph", "xxx", "w", "wx", "ax", "xi", "check", "xml", "pe", "xa"], "rt": ["rh", "rr", "sq", "at", "wt", "tt", "tx", "ft", "RT", " RT", "opt", "dist", " r", "lat", "rx", "r", "rd", "ot", " rat", "rn", "rot", "att", "grad", "vr", "gd", "bt", "ant", "it", "yt", "wx", "NT", "tri", "flat", "nt", "quad", "rect", "ut", "rc", "gt", "cat", "ac", "mat", "ct", "wd", "qt", "t", "lt", "all", "val", "feat", "rs"], "y": ["yr", "ys", "dy", "ie", "ady", "code", "ye", "hy", "gy", "X", "p", "Y", "g", "c", "yn", "o", "h", "ym", "ay", "year", "z", "ty", "ch", "yi", "yo", "cy", "wy", "w", "ny", "yt", "l", "ish", "j", "f", "sy", "m", "yan", "yy", "ya", "oy", "iy", "yl", "t", "e", "xy", "py", "vy", "ry", "ey"], "root_x": ["root_xs", "root_ey", "root00ya", "root67y", "root67ci", "root_ya", "parent_ey", " root_X", " root_xd", "rootpyy", " root_rx", "rootpyx", "root67x", "rootpyya", "rootpyxd", "box_x", "root_yy", " root_xi", " root_ya", "parent_x", "root_xi", "root00x", " root_ci", "box_yy", "rootpyrx", "root_rx", "root_z", "root_xd", "root_ci", "root67xi", " root_z", "root00ax", "parent_ya", "root_ax", "parent_y", "root00y", " root_ey", " root_xs", "box_ya", "root_X", "parent_ax", "rootpyyy", "box_y"], "root_y": ["parent_z", "rootJdy", "root_ey", "root2x", "root2Y", "parent_ey", "root_vy", "root_cy", "parent_u", " root_dy", "parent_ny", "root2y", "root_dy", "parent_cy", "root_ye", "rootJY", "parent_x", " root_cy", "rootJx", " root_i", "rootJy", "root_u", "root_z", "root2dy", "root_i", "parent_vy", " root_Y", "root_ny", "parent_y", "root_Y", " root_ye"], "info": ["error", "chi", "qi", "qa", "init", "result", "inf", "slice", "array", "information", "si", "index", "diff", "edge", "image", "comp", "series", "node", "action", "Info", "start", "flat", "prime", "get", "quad", "f", "check", "data", "type", "alias", "feature", "INFO", "id", "bit", "filter", "source", "part", "block"], "i": ["ui", "chi", "qi", "p", "ai", "c", "o", "iq", "iu", "si", "on", "index", "yi", "ind", "I", "uli", "l", "u", "pi", "io", "j", "xi", "di", "ri", "ni", "hi", "ci", "ip", "\u0438", "zi", "id", "li", "ii", "bi", "ti"], "qq": ["km", "sq", "qs", "qu", "qi", "qa", "nd", "num", "kk", "iq", "qv", "z", "square", "ch", "diff", "cv", "ask", "u", "quad", "qua", "nn", "eq", "f", "nz", "dq", "ku", "depth", "mask", "batch", "squ", "qt", "np", "cf", "ck", "quant", "ii", "nb", "sum"], "k": ["km", "p", "g", "c", "dk", "K", "h", "work", "num", "kk", "ks", "kn", "z", "ch", "kw", "w", "l", "ok", "u", "d", "max", "j", "sk", "f", "m", "key", "ck"], "query": ["error", "name", "sc", "ie", "qs", "num", "result", "iq", "search", "index", "stack", "node", "quad", "sort", "fun", "function", "rank", "data", "type", "alias", "limit", "id", "filter", "parse", "range", "sum"], "tree": [" graph", " help", "Tree", " Tree", " output", " table", " rule", " sum", " branch", " edges", " score", " quad", " nodes", " arr", "Info", " rank", " stack", " j", " code", " node", " ii", "order", " response", " trees", " structure"], "a": ["aa", "va", "ma", "p", "ai", "c", "ama", "fa", "la", "ba", "ab", "au", "ana", "da", "A", "ia", "u", "d", "ach", "aaa", "ca", "sa", "f", "ac", "ga", "area", "am", "aj", "ae", "alpha", "ea", "e", "an", "ad"], "b": ["aa", "s", "ib", "fb", "p", "bs", "g", "c", " B", "r", "emb", "wb", "beta", "B", "ba", "ab", "sb", "l", "bb", "d", "u", "rb", "abb", "aaa", "j", "f", "eb", "ae", "e", "sub", "lb", "bi"], "cost": ["end", "sc", "chi", "qi", "price", "nc", "C", "desc", "uc", "cv", "nz", "score", "ff", "eq", "rc", "cs", "ac", "pp", "rank", "co", "df", "su", "data", "ct", "cf", "bc", "cc", "eff"], "root": ["replace", "adder", "zero", "token", "random", "fix", "top", "forest", "host", "target", "server", "result", "rew", "main", "head", "leaf", "round", "search", "seed", "first", "support", "background", "central", "component", "bottom", "scale", "rand", "Root", "index", "norm", "winner", "fork", "writer", "master", "node", "intern", "reverse", "start", "module", "iterator", "child", "box", "owner", "outer", "right", "author", "option", "wire", "rank", "depth", "null", "average", "alpha", "path", "key", "bin", "base", "order", "loader", "roots", "cover", "filter", "parse", "source", "transform"]}}
{"code": "n, x = map(int, input().split())\\nA = list(map(int, input().split()))\\n\\nA.sort()\\nans = 0\\nfor a in A:\\n    x -= a\\n    if x < 0:\\n        break\\n    else:\\n        ans += 1\\nif 0 < x:\\n    ans -= 1\\n\\nprint(max(ans, 0))\\n", "target": "100", "substitutes": {"n": [" N", "k", "span", "p", "na", "g", "c", "o", "r", "nc", "num", "ann", "ne", "ar", "sn", "w", "l", "nn", "m", "Ns", "ns", "no", "ni", "v", "b", "t", "N", "nb"], "x": ["zero", "int", "X", "p", "tx", "na", "g", "xs", "c", "i", "xx", "y", "h", "xa", "px", "ix", "pos", "axis", "aces", "ann", "z", "ex", "index", "es", "w", "cross", "u", "d", "max", "q", "f", "j", "ax", "ac", "xi", "data", "alpha", "v", "b", "xp", "anything", "e", "xes", "xc", "an"], "A": ["F", "E", "L", "At", "New", "V", "H", "X", "Y", "LA", "K", "Na", "AM", "SA", "P", "B", "C", "T", "D", "As", "mA", "Ar", "AA", "Alpha", "S", "W", "I", "Z", "Array", "CA", "U", "M", "b", "N", "G", "Am", "KA", "NA", "Ac", "An"], "ans": ["ents", "lan", "span", "cas", "nas", "eps", "ams", "na", "ps", "xs", "ats", "aning", "AN", "ANS", "anes", "ks", "annels", "aces", "names", "ann", "anon", "anc", "ani", "ays", "es", "ana", "can", "nan", " means", "ars", "cross", "anus", "args", "aned", "ons", "aus", "works", "ens", "sk", "leans", "cs", "anne", "ants", "ns", "os", "features", "plan", "ds", "an", "ins"], "a": ["aa", "s", "wa", "int", "p", "na", "ai", "aw", "c", "i", "y", "xa", "au", "z", "ana", "index", "af", "w", "d", "max", "ta", "ca", "sa", "ax", "ac", "area", "am", "ae", "alpha", "b", "ea", "e", "ada", "an", "ad"]}}
{"code": "import sys\\n\\n\\nQ = int(input())\\npair = []\\n\\nMAX = 0\\nfor i in range(Q):\\n    l, r = map(int, input().split())\\n    MAX = max(MAX, l, r)\\n    pair.append((l, r))\\n\\nN = 101010\\nN = 25\\nN = MAX + 1\\nis_prime = [1 for i in range(N)]\\n\\nis_prime[0] = is_prime[1] = 0\\n\\n# sieve\\nfor i in range(2, N):\\n    if not is_prime[i]:\\n        # 0, 1, 4, 6, 9, ...\\n        continue\\n    for j in range(i*2, N, i):\\n        #print(j)\\n        is_prime[j] = 0\\n#print('sieve')\\n#print(is_prime)\\n\\n# 2017-like\\na = [0 for i in range(N)]\\nfor i in range(N):\\n    if i % 2 == 0:\\n        continue\\n    if is_prime[i] and is_prime[(i+1) // 2]:\\n        a[i] = 1\\n#print('2017')\\n#print(a)\\n\\n# accum\\ns = [0]\\nfor i, n in enumerate(a):\\n    s.append(s[i] + n)\\ns.pop(0)\\n#print('accum')\\n#print(s)\\n\\n# Query\\n#print(pair)\\n#print('ANS')\\nfor l, r in pair:\\n    print(s[r] - s[l-1])\\n\\n", "target": "617", "substitutes": {"Q": ["QU", "F", "L", "V", " R", "Max", "H", "X", "Y", "Query", "K", "O", "P", "T", "C", "B", "D", "IQ", "quality", "MQ", "S", "W", " q", "IX", "I", "q", "UE", "Z", "U", "R", "M", " X", "J", "Qu", " P"], "pair": ["replace", "ID", "p", "inter", "AR", "number", "chain", "air", "section", "slice", "P", "Range", "array", "square", "are", "stack", "par", "tri", " Pair", "position", "function", "Array", "ARE", "address", "transfer", "set", "parent", "list", "map", "R", "match", "Part", "type", "key", "List", "PART", "order", "reference", "Order", "range", "part", "IR", "test"], "MAX": ["F", "RAW", "Length", "IN", "ID", "L", "NO", "IL", "Max", "ALL", "X", "Y", "Size", "maximum", "WR", "K", "NW", "OR", "AND", "DIR", "RR", "Range", "P", "TR", "C", "D", "EST", "IP", "EXT", "W", "AX", "SIZE", "MIN", "ION", "NG", "max", "Node", "Z", "LINE", "INT", "CL", "Maximum", "Array", "U", "R", "M", "ER", "OUT", "BER", "RA", "CR", "NUM"], "i": ["k", "a", "int", "p", "ai", "c", " I", "ix", "im", "iq", "iu", "inf", "ti", "z", "x", "ar", "ind", "I", "it", "u", "d", "pi", "f", "j", "ip", "e", "il", "id", "ii", "n"], "l": ["s", "k", "loc", "ol", "L", "int", " L", "p", "g", "c", "dL", "o", "sl", "el", "left", "la", "lc", "z", "kl", "x", "w", "u", "d", "max", "ll", "q", "dl", "ln", "j", "f", "m", "rl", "nl", "b", "lb", "v", "ell", "e", "ls", "li", "lin", "n"], "r": ["rh", "rr", "k", " R", "ur", "p", "c", "h", "pr", "rf", "RR", "re", "P", "x", "ar", "w", "u", "d", "rb", "max", "q", "row", "f", "sr", "right", "m", "ir", "R", "nr", "b", "v", "e", "ru", "er", "rs", "n"], "N": ["F", "MN", "E", "NR", "L", "V", " L", "NN", "Max", "X", "Y", "Size", "NS", "NE", "K", "NM", "CNN", "O", "P", "T", "C", "B", "D", "Ne", "S", "A", "W", "I", "NT", "max", "Node", "Z", "Ns", "U", "R", "M", "J", "CN", " n", "G", " Ne", "n"], "is_prime": ["ispreprime", " is2range", " is2prime", " is2length", " is_range", "is\u00b7component", "isprerange", "is\u00b7prime", "isadpart", "isadlength", " is_component", "is2prime", "is\u00b7part", "ispprime", "is_part", "is_range", "isadcomponent", "is2range", "is_Prime", "isadprime", "is_length", "isprange", "is\u00b7length", " is_Prime", " is_length", "is2length", " is_part", "is_component", "isplength", "isprelength"]}}
{"code": "mod = 10**9+7\\nh,w = map(int,input().split())\\ngrid = [[l == \"#\" for l in list(input())] for _ in range(h)]\\ndp = [[0]*w for _ in range(h)]\\ndp[0][0] = 1\\nfor s in range(1,h+w):\\n  for i in range(max(0,s-w+1),min(h,s+1)):\\n    j = s-i\\n    if grid[i][j]:\\n      continue\\n    if i == 0:\\n      dp[i][j] = dp[i][j-1]\\n    elif j == 0:\\n      dp[i][j] = dp[i-1][j]\\n    else:\\n      dp[i][j] = (dp[i][j-1]+dp[i-1][j])%mod\\nprint(dp[-1][-1]%mod)", "target": "273", "substitutes": {"mod": ["min", "mode", "wa", "cycle", "MOD", "perm", "dir", "exp", "g", "c", "im", "ver", "md", "kg", "cum", "reg", "temp", "div", " Mod", "scale", "time", "od", "x", "oct", "comp", "module", "grad", "cm", "sec", "pi", "mag", "max", "q", "row", "shift", "m", "comb", "sm", "fun", "wd", "dim", "mods", "ow", "dev", "dec", "bar", "mm", "complex", "step", "id", "month", "form", "Mod"], "h": ["hs", "min", "k", "sh", "wa", "H", "p", "g", "c", "ht", "y", "en", "sl", "r", "num", "o", "height", "hr", "z", "div", "ch", "x", " H", "bh", "u", "d", "ish", "max", "q", "f", "m", "hi", "v", "b", "t", "e", "hm", "id", "n"], "w": ["hw", "k", "wa", "wi", "wt", "win", "p", "g", "c", "width", "rw", "y", "r", "num", "fw", "wh", "weight", "z", "x", "W", "window", "wx", "u", "d", "max", "q", "f", "m", "sw", "ws", "wl", "wd", " W", "v", "b", "e", "t", "iw", "n"], "grid": ["dd", "group", "line", "density", "Grid", "p", "dist", "ge", "distance", "g", "gap", "dict", "layout", "gp", "array", "edge", "div", "gpu", "dm", "window", "row", "f", "dq", "model", "point", "df", "input", "list", "db", "graph", "ange", "data", "dim", "zip", "id", "range", "draw", "block", "ip"], "l": ["lp", " lines", "letter", "a", "L", "line", "p", " la", "g", "c", "o", "sl", "r", "el", "la", "lv", "lc", "kl", "z", "x", "lines", "u", "d", "Li", "ll", "f", "ln", "m", "rl", " ls", "lit", "v", "b", "e", "ls", "li", "lin", "n"], "_": ["k", " block", "non", "p", "ing", " x", " seq", "ay", " time", "x", " un", "out", "f", "ac", "all", "block"], "dp": ["lp", "loc", "password", "density", "wp", "eps", "p", "dist", "ps", "distance", "g", "pb", "fp", "gap", "dat", "projects", "tp", "pos", "cp", "gp", "slice", "P", "api", "dB", "array", "vp", "params", "diff", "comp", "source", "dm", "par", "d", "pi", "xd", "DP", "mand", "sup", "dt", "dl", "dq", "point", "pp", "dr", "port", "proxy", "deb", "address", "dc", "df", "pkg", "ga", "di", "data", "db", "adr", "drop", "zip", "project", "np", "pair", "e", "imp", "pd", "dim", "ds", "dos", "qq", "hp", "range", "direction", "ip"], "s": ["ss", "min", "k", "hs", "wa", "a", "sh", "p", "g", "c", "xs", "sl", "y", "r", "sd", "sf", "size", "z", "si", "x", "S", "start", "u", "d", "f", "m", "sw", "ws", "v", "b", "e", "ls", "t", "se", "rs", "n"], "i": ["gi", "ji", "k", "ui", "vi", "a", "ie", "int", "qi", "p", "phi", "ai", "c", "ic", " I", "oi", "y", "o", "ix", "ini", "iu", "api", "z", "mini", "si", "eni", "x", "yi", "ind", "start", "I", "uri", "it", "u", "pi", "d", "fi", "f", "io", "iv", "xi", "ori", "di", "hi", "ci", "ni", "ij", "v", "b", "e", "info", "zi", "id", "li", "ii", "ik", "bi", "n"], "j": ["ji", "k", "ui", "dy", "ie", "int", "ja", "qi", "p", "g", "c", "jo", "y", "o", "jj", "ix", "iu", "jit", "jl", "z", "je", "si", "jet", "x", "ind", "adj", "u", "d", "uj", "js", "jp", "f", "io", "job", "jc", "note", "m", "oj", "ax", "br", "aj", "ij", "J", "b", "v", "bj", "e", "t", "li", "ii", "part", "n"]}}
{"code": "MM = input().split()\\nX = int(MM[0])\\nY = int(MM[1])\\nZ = int(MM[2])\\nx = 0\\nwhile True:\\n  if x*(Y+Z)+Z >X:\\n    break\\n  else:\\n    x +=1\\nprint(x-1)", "target": "101", "substitutes": {"MM": ["GM", "MN", "MIC", "XM", "AME", "MA", "MI", "MW", "DM", "MX", "MP", "AM", "JM", "LM", "MD", "DD", "MAC", "MK", "MQ", "Zip", "BBC", "OM", "Word", "FM", "MB", "Matrix", "IM", "TM", "HM", "MH", "WM", "VM", "MC", " mm", "Hmm", "M", "Mc", "SM", "BM", "MS", "MF", "mm", "ML", "Mo"], "X": ["F", "YY", "E", "L", "V", "XM", "H", "DX", "Q", "XX", "XP", "xx", "EX", "K", "ZX", "Day", "P", "T", "C", "D", "IP", "W", "XXX", "IX", "TX", "Offset", "MAX", "XY", "MC", "U", "R", "M", "XL", "N"], "Y": ["Hi", "YY", "E", "PI", "L", "V", "Q", "Size", "YC", "y", "IE", "YA", "Cy", "T", "B", "D", "IP", "Year", "Zip", "S", "A", "W", "NY", "EY", "OD", "I", "MY", "Data", "Offset", "HI", "XY", "Py", "Height", "M", "J", "N", "G", "My"], "Z": ["F", "YY", "E", "L", "V", "Az", "FL", "Q", "H", "Size", "XX", "K", "SH", "ZX", "TH", "Zero", "T", "B", "C", "D", "DD", "z", "Zip", "IZ", "SL", "W", "I", "SS", "ZZ", "TW", "Zone", "XY", "NZ", "M", "ZI", "J", "N", "G", "ZE", "ZA"], "x": ["dx", "change", "a", "int", "sex", "p", "event", "tx", "XX", "xs", "c", "i", "xx", "width", "fx", "y", "h", "xa", "ix", "rx", "pos", "number", "z", "xt", "ex", "index", "xxx", "w", "cross", "l", "u", "d", "max", "f", "ax", "m", "xi", "ct", "v", "xp", "t", "e", "xy", "step", "id", "xc", "test", "n"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\nans = int(1e18)\\nfor i in range(101):\\n    cnt = 0\\n    for j in range(n):\\n        cnt += (a[j]-i)**2\\n    ans = min(ans,cnt)\\n    cnt = 0\\n    for j in range(n):\\n        cnt += (a[j]+i) **2\\n    ans = min(ans,cnt)\\nprint(ans)\\n", "target": "548", "substitutes": {"n": ["s", "k", "span", "p", "c", "o", "y", "nc", "num", "ne", "z", "fn", "x", "nan", "sn", "w", "ny", "l", "u", "d", "nn", "nt", "f", "m", "ns", "b", "len", "t", "N", "nb", "an"], "a": ["min", "aa", "s", "va", "p", "na", "ai", "aw", "c", "o", "y", "ab", "au", "array", "ana", "z", "x", "ar", "A", "w", "ia", "args", "u", "ca", "sa", "f", "ac", "m", "asa", "ants", "ga", "area", "aj", "am", "alpha", "b", "e", "an", "ad"], "ans": ["ano", "s", "lan", "nas", "cas", "amps", "atan", "na", "ai", "xs", "ats", "ions", "aning", "anas", "AN", "aos", "ads", "ANS", "anes", "ks", "ann", "anon", "ani", "anc", "annot", "ana", "es", "ania", "x", "can", "nan", " means", "sn", "ars", "anus", "ia", "aned", "ations", "nn", "ons", "aus", "anne", "sk", "ens", "cs", "ants", "atches", "ns", "os", "oa", "san", "actions", "ls", "ians", "ds", "an", "ins"], "i": ["gi", "ji", "ui", "vi", "ie", "ib", "int", "ja", "qi", "p", "ai", "c", "jo", "o", "y", "ini", "iq", "iu", "jit", "IJ", "jl", "ti", "z", "je", "si", "index", "x", "ind", "I", "l", "u", "uj", "pi", "d", "f", "m", "xi", "ni", "ci", "ij", "v", "b", "e", "id", "li", "ii", "ip"], "cnt": ["cNT", "ecno", " cpt", "cpt", "CNT", "cnc", "lcpt", "Cwd", " crt", "Cpt", " cNT", " cct", " cwd", "cct", "ncnt", "crt", "lcnc", " cnc", "acnt", "lcrt", "Cnt", " cno", "Cnc", "Cno", "ecnt", "acNT", "acpt", "ncrt", "acno", "cno", "ncpt", "acnc", "lcnt", "ucpt", "ucnt", "ncnc", "ecwd", "ucct", "Cct", "ecNT", "cwd", "ucnc"], "j": ["ji", "s", "k", "end", "int", "ja", "p", "jen", "ai", "_", "c", "g", "r", "jj", "num", "of", "y", "o", "h", "el", "jl", "z", "je", "si", "jan", "jet", "x", "ind", "it", "l", "u", "d", "q", "job", "jp", "f", "aj", "ni", "ij", "J", "b", "v", "e", "kj", "li", "ii"]}}
{"code": "N=int(input())\\n*D,=map(int,input().split())\\nM=max(D)\\nfrom collections import*\\nC=Counter(D)\\n\\nans=1\\nnow=C[1]\\nfor i in range(2,M+1):\\n    ans*=pow(now,C[i],998244353)\\n    ans%=998244353\\n    now=C[i]\\n\\nif D[0]!=0:\\n    ans=0\\nif 0 in D[1:]:\\n    ans=0\\nprint(ans)", "target": "480", "substitutes": {"N": ["F", "L", "V", "Y", "NC", "Num", "NS", "K", "number", "O", "P", "B", "T", "S", "A", "I", "NT", "Z", "Ns", "ns", "R", " n", "G", "NA", "nb", "n"], "D": ["F", "AD", "E", "DA", "L", "DS", "V", "Q", "X", "DH", "Y", "DC", "DM", "DE", "K", "DO", "DB", "O", "P", "B", "T", "LD", "DD", "JD", "MD", "Dou", "DT", "S", "W", "I", "CD", "Ds", "d", "Do", "Di", "DF", "ND", "FD", "G", "DI"], "M": ["F", "MN", "E", "L", "V", "Q", "X", "Y", "MI", "Mo", "K", "DM", "O", "P", "T", "B", "MD", "S", "W", "CM", "I", "MB", "Z", "m", "MC", "U", "R", "Mi", "J", "MM", "G", "MO"], "C": ["F", "CV", "CT", "E", "Cs", "L", "CI", "V", "H", "CU", "Q", "X", "Y", "NC", "c", "DC", "K", "CNN", "O", "P", "T", "B", "ASC", "EC", "WC", "S", "GC", "A", "CM", "CF", "KC", "I", "CD", "CO", "Ch", "CG", "Code", "CL", "CA", "MC", "CCC", "U", "R", "JC", "CP", "CC", "G", "Co", "CR"], "ans": ["ss", "ano", "s", "aid", "ents", "lan", "nas", "offs", "amps", "eps", "span", "na", "rows", "ats", "ions", "aning", "antis", "anas", "AN", "ANS", "any", "ks", "mean", "aces", "annels", "ann", "ani", "anc", "ones", "ays", "ana", "errors", "can", "cus", " means", "nan", "ars", "runs", "aned", "nn", "ons", "aus", "sk", "cs", "ens", "leans", "ants", "ns", "os", "ls", "ds", "an", "ins"], "now": ["new", "amp", "cycle", "cmp", "auto", "dd", "NOW", "ms", "c", "night", "case", "nc", " Now", "md", "wh", "mean", " NOW", "size", "time", "node", "start", "current", "d", "max", "wait", "pp", "self", "old", "age", "minute", "Now", "day", "today", "ow", "count", "mm", "id", "month", "next"], "i": ["gi", "k", "ui", "end", "ie", "int", "qi", "mi", "p", "ai", "g", "c", " I", "h", "y", "r", "num", "ini", "iu", "ti", "z", "on", "si", "index", "x", "ind", "start", "I", "l", "u", "d", "j", "f", "m", "xi", "di", "ni", "ci", "b", "v", "e", "col", "id", "multi", "li", "ii", "n", "bi", "ip"]}}
{"code": "x1,y1,x2,y2 = map(int,input().split())\\nx3 = x2 - (y2-y1)\\ny3 = y2 + (x2-x1)\\nx4 = x1 - (y2-y1)\\ny4 = y1 + (x2-x1)\\nprint(x3,y3,x4,y4)", "target": "62", "substitutes": {"x1": ["y15", "x15", "x101", "wp", "x10", "z101", "z4", "X0", " x10", "X15", "w2", "w1", "y10", "x0", "z1", "ey64", "X2", "ey2", "y0", "X1", "ey1", "z2", " x64", "y101", "x64", "y64", "ey10", "ey101", "xp", "w3", "ey4", "yp", " xp", "ey0", "ey15"], "y1": ["sy1", "ey01", "xOne", "dy4", "Y3", "ya1", "cy5", "y5", "Y1", "yOne", "x01", "Y0", "sy2", "dy5", "sy01", "ya01", "x0", "ey5", "ey2", "y0", "cy3", "ey1", "dy1", " y01", "ya3", "cy0", "eyOne", "y01", "ya2", "syOne", "cy1", "dy2", "Y2", "ey4", "cy2", "cy4"], "x2": [" xtwo", " x62", "z02", "xtwo", "x62", "y62", "sex1", "w1", "y02", "X02", "z1", "X2", "z2", "X1", "x02", "w02", " x02", "ytwo", "sex2", "sextwo", "X4", "w2", "sex62"], "y2": ["sy1", "eyTwo", "y12", "ya1", "ky1", "sy2", "ey12", "sy72", "x82", "y72", "xTwo", " y12", " y8", "x8", "ey8", " yTwo", "yTwo", "ky2", "ey2", "ey1", "y8", "x72", "y82", "cy72", "ya2", "ya82", "cy1", "ky82", "ey4", "cy2", "x12"], "x3": ["ax43", "dythree", " x30", "dy4", " x43", "y30", "ax30", "ythree", "x30", "xthree", "y43", "ax1", "x43", "ax3", "dy3", " xthree"], "y3": ["cy23", "y15", " y23", "cy5", "y5", " y5", " y53", "ady15", "vy5", " y15", "vy53", "vy3", "ey5", "ady3", "ady5", "ey2", "cy3", "ady53", "vy15", "ey23", "ey3", "cy2", "y53", "y23"], "x4": ["xi2", "xifour", "z4", "yfour", "xi1", "zfour", "x8", "z2", "z8", "y8", " x8", "xfour", " xfour", "xi4"], "y4": ["asyFour", "yfour", "eyfour", "asy04", "y04", " yfour", "eyFour", "yFour", "asy1", "ey2", "ey1", "xfour", " yFour", " y04", "ey4", "ey04", "asy4"]}}
{"code": "MOD = 10**9 + 7\\n\\ns = input()\\nn = len(s)\\n\\ndp = [[0]* 13 for i in range(n+1)]\\ndp[0][0] = 1\\n\\nfor i in range(n):\\n    if s[i] != '?':\\n        for j in range(13):\\n            a = s[i]\\n            a = int(a)\\n            keta = (j*10 + a) % 13\\n            dp[i+1][keta] += dp[i][j]\\n            dp[i+1][keta] %= MOD\\n    else:\\n        for j in range(13):\\n            for k in range(10):\\n                keta = (j*10 + k) % 13\\n                dp[i+1][keta] += dp[i][j]\\n                dp[i+1][keta] %= MOD\\n                \\nprint(dp[n][5] % MOD)", "target": "798", "substitutes": {"MOD": ["mode", "ID", "spec", "REM", "PUT", "MA", "ORD", "SE", "LOC", "MAG", "COM", "UPDATE", "Y", "mult", "MED", "SPEC", "PM", "K", "RM", "UN", " mod", "METHOD", "OR", "DIR", "ROM", "LM", "LOD", "MD", "DD", "MAC", "DIV", "FORM", "module", "OD", "MAT", "MIN", "POST", "Mods", "SIZE", "MODE", "DR", "DEC", "LOG", "MAX", "LAB", "ARM", "m", "PAR", "fun", "FD", "M", "MS", "SM", "mods", "CC", "mod", "REG", "NOR", "RH", "ERROR", "UL", "Mod"], "s": ["ss", " p", "strings", "p", "ps", "states", "g", "c", "h", "sl", "tp", "r", "sd", "o", "y", "P", "sp", "si", "params", "S", "w", "sb", "l", "services", "u", "d", "src", " sd", "ses", "js", "f", "ssl", "m", "sync", " S", "cs", "ns", "ws", "input", "os", "v", "b", "space", "e", "ls", "ds", "sv", "source", " d"], "n": ["name", "p", "c", "g", "o", "r", "h", "num", "nc", "y", "net", "ne", "z", "x", "w", "l", "u", "d", "cn", "f", "network", "m", "ns", "len", "b", "v", "t", "N", "e", "all", "nb"], "dp": ["lp", "dd", "sh", "dh", "wp", "p", "ps", "bp", "pb", "fp", "dat", "sl", "tp", "cp", "rep", "pos", "gp", "ph", "P", "dB", "sp", "api", "dep", "mp", "pa", "params", "vp", "dm", "bb", "d", "pi", "DP", "sup", "dl", "dt", "pp", "deb", "dr", "port", "address", "dc", "iper", "pkg", "drop", "df", "data", "db", "pipe", "wd", "dim", "np", "pair", "e", "pd", "imp", "py", "ds", "hp", "ip"], "i": ["gi", "ji", "ui", "ie", "int", "qi", "mi", "p", "ai", "ic", "c", "init", "o", "y", "r", "ini", "ix", "im", "iu", "api", "inf", "z", "si", "index", "x", "I", "it", "l", "u", "pi", "d", "q", "io", "f", "m", "xi", "ori", "di", "ni", "ci", "ip", "b", "v", "my", "e", "info", "multi", "id", "li", "ii", "inner", "ik", "bi", "ti"], "j": ["ji", "ui", "ie", "ja", "p", "g", "c", "jo", "y", "o", "jj", "h", "r", "un", "ijk", "jl", "job", "z", "jet", "x", "it", "l", "u", "uj", "d", "q", "js", "jp", "f", "ax", "m", "oj", "jc", "aj", "J", "v", "b", "e", "li", "ii"], "a": ["aa", "va", "span", "ma", "p", "na", "ai", "c", "y", "ba", "ab", "z", "au", "pa", "x", "A", "ar", "af", "w", "ka", "ia", "ak", "l", "u", "d", "aaa", "ca", "f", "sa", "ac", "ga", "m", "area", "aj", "am", "alpha", "b", "ea", "an", "ad"], "keta": ["kenan", "cheana", "koan", "quep", "skka", "kena", "kinga", "kea", "demaa", "ketoa", "wifeai", "kob", "kuna", "kuno", "koas", "pena", "wifeaa", "ketka", "keb", "wifeb", "wifeas", "wifean", "ketas", "skc", "kenas", "wifec", "penoa", "ketan", "cheoa", "dema", "cheka", "ketaa", "kingai", "penka", "queaa", "koaa", "kingp", "deman", "kelo", "ska", "chea", "ketp", "skoa", "kunana", "chec", "koa", "demai", "wifea", "kean", "kenc", "kelb", "kingaa", "quea", "quean", "koc", "keto", "kelana", "ketai", "kop", "cheo", "ketana", "ketb", "keas", "penc", "kingan", "ketc", "cheb", "kunb", "kela"], "k": ["km", "ack", "ke", "p", "g", "c", "K", "y", "h", "r", "o", "kk", "ijk", "kg", "ks", "z", "x", "w", "ko", "ak", "ok", "u", "d", "q", "ki", "sk", "ky", "f", "ac", "m", "ku", "v", "b", "ck", "e", "t", "id", "ik"]}}
{"code": "n = int(input())\\na, b = map(int, input().split())\\np = [int(_) for _ in input().split()]\\n\\nnum1, num2, num3 = 0, 0, 0\\nfor i in p:\\n    if i <= a:\\n        num1 += 1\\n    elif b+1 <= i:\\n        num3 += 1\\n    else:\\n        num2 += 1\\nprint(min(num1, num2, num3))", "target": "372", "substitutes": {"n": ["k", "na", "init", "c", " ni", "o", "r", "num", "ot", "ne", "z", "x", "l", "d", "f", "j", "m", "ni", "np", "e", "N", "pn", "nb"], "a": ["aa", "s", "va", "na", "ai", "c", "y", "ba", "ab", "x", "A", "w", "ia", "u", "d", "f", "sa", "ca", "ac", "asa", "m", "am", "ae", "alpha", "e", "an", "ad"], "b": ["s", "k", "ib", "g", "c", "y", "o", "r", "h", "B", "ab", "z", "x", "sb", "l", "u", "d", "bb", "pi", "f", "j", "m", "v", "base", "e", "bc", "nb", "ad"], "p": ["op", "python", "pre", "ps", "g", "c", "fp", "y", "r", "o", "h", "tp", "pr", "cp", "ap", "P", "sp", "z", "pa", "x", "l", "patch", "u", "pi", "d", "q", "j", "f", "jp", "m", "pp", "point", "ip", "v", "np", "e", "t", "pn", "py", "pc", "part"], "_": ["article", "name", "_____", "pid", "__", "arg", "pri", "g", " ___", "o", "r", "ix", "result", " ip", " __", "long", "x", "file", "I", "obj", "l", "out", "j", "self", " self", "id", "word", "val", "prefix", "lin", "ip"], "num1": ["numb", "um1", "namOne", " num8", "um8", " numOne", "numOne", "NUM1", "um2", " num01", "num8", " numone", "num01", "valid1", "um3", "umone", " numb", "umOne", "valid2", "nam3", "NUM01", "umb", "nam1", "numone", "um01", "NUMb", "NUM2", "valid8", "validone"], "num2": ["numberb", " num02", "numb", " num4", "num5", "um02", " numtwo", "nam2", "nam5", "namb", "number2", "NUM1", "um2", "numbertwo", "num02", "n3", "um3", " numb", " num5", "number1", "n2", "nam3", "umb", "n4", "numtwo", "n02", "um4", "NUMtwo", "NUMb", "num4", "NUM2", "um5"], "num3": ["umthree", " num4", "numberThree", "um1", "num5", "destthree", " numThree", "domthree", "numthree", "umThree", "number2", "numThree", "um2", "um3", "dest1", " num5", "number3", "dom4", "dom3", "dom2", "um4", "dest3", "num4", "number5", " numthree", "um5"], "i": ["gi", "k", "ib", "int", "ai", "c", "o", "y", "num", "r", "z", "index", "x", "ind", "I", "it", "l", "u", "d", "pi", "f", "j", "m", "ni", "ci", "v", "e", "id", "li", "ii", "nb", "bi", "ip"]}}
{"code": "n,k = [int(i) for i in input().split()]\\ntd = [[int(i) for i in input().split()] for _ in range(n)]\\n\\n###d\u304c\u5927\u304d\u3044\u9806\u306b\u30bd\u30fc\u30c8\\ntd.sort(key = lambda x: x[1],reverse=True)\\n\\n###\u5404t\u3067d\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u683c\u7d0d\\nfix_eated_d=[]\\n###\u5404t\u3067d\u304c\u6700\u5927\u3067\u306a\u3044\u3082\u306e\u3092\u683c\u7d0d\u3002t\u306e\u7a2e\u985e\u3092\u5897\u3084\u3059\u969b\u306e\u524a\u9664\u5019\u88dc\\nchange_eated_d=[]\\n\\neated_t = set()\\nd_point = 0\\n\\n###\u307e\u305ad\u3092\u6700\u5927\u5316\\nfor t,d in td[:k]:\\n  \\n  ###\u3059\u3067\u306bt\u304c\u9078\u3070\u308c\u3066\u3044\u308b\u306a\u3089\u6700\u5927\u306ed\u3067\u306f\u306a\u3044\u306e\u3067change\u3078\\n  if t in eated_t:\\n    change_eated_d.append(d)\\n    \\n  ###\u307e\u3060t\u304c\u9078\u3070\u308c\u3066\u3044\u306a\u3044\u306a\u3089\u6700\u5927\u306ed\u3060\u304b\u3089fix\u3078\\n  else:\\n    fix_eated_d.append(d)\\n    eated_t.add(t)\\n    \\n  d_point += d\\n  \\npoint = len(eated_t)**2 + d_point\\n\\n###t\u306e\u7a2e\u985e\u3092\u5897\u3084\u3059\\nfor t,d in td[k:]:\\n  ###\u524a\u9664\u5019\u88dc\u304c\u306a\u304f\u306a\u308c\u3070\u7d42\u4e86\\n  if not change_eated_d:\\n    break\\n  \\n  ###\u3059\u3067\u306bt\u304c\u9078\u3070\u308c\u3066\u3044\u308b\u306a\u3089skip\\n  if t in eated_t:\\n    continue\\n    \\n  ###\u307e\u3060t\u304c\u9078\u3070\u308c\u3066\u3044\u306a\u3044\u306a\u3089\u8ffd\u52a0\u3001change\u4e2dd\u304c\u6700\u5c0f\u306e\u3082\u306e\u3092\u524a\u9664\\n  eated_t.add(t)\\n  d_point += d - change_eated_d.pop()\\n  point = max(point, len(eated_t)**2 + d_point)\\n  \\nprint(point)\\n\\n\\n", "target": "466", "substitutes": {"n": ["p", "c", "o", "number", "h", "num", "y", "r", "pos", "size", "ne", "kn", "z", "x", "w", "l", "u", "d", "nt", "nn", "f", "network", "m", "j", "ns", "v", "b", "t", "N", "e", "nb"], "k": ["s", "p", "c", "K", "o", "kk", "ks", "kn", "z", "kl", "kw", "w", "u", "d", "unk", "q", "j", "sk", "f", "m", "tk", "v", "t", "e"], "i": ["gi", "ji", "ui", "a", "ie", "int", "p", "ai", "c", "o", "ix", "pos", "iu", "z", "on", "index", "x", "ind", "start", "I", "it", "u", "pi", "q", "j", "f", "m", "input", "di", "ci", "ip", "key", "v", "b", "e", "t", "il", "zi", "id", "li", "ii", "bi"], "td": ["text", "dd", "table", " t", "span", " cells", " style", "tr", "kn", "div", "z", "TD", "cells", "th", "lines", "d", "ff", "f", "style", "tk", "t", "cell", "col", "nb", " d"], "_": [" out", "__", "g", " time", "x", "I", "out", "f", "j", "id", "ip"]}}
{"code": "s = input()\\n\\nfor i in range(len(s)-1):\\n    if s[i:i+2] == 'AC':\\n        print('Yes')\\n        exit()\\n\\nprint('No')\\n\\n", "target": "384", "substitutes": {"s": ["strings", "a", "qs", "groups", "shows", "words", "ans", "states", "sed", "p", "xs", "c", "g", "ps", "rows", "sets", "sts", "o", "r", "ads", "ows", "si", "es", "blocks", "events", "S", "w", "cells", "sb", "tests", "args", "parts", "services", "lines", "l", "ses", "d", "sg", "ains", "f", "cs", "m", "ssl", "ns", "ws", "input", "acts", "gs", "b", "v", "letters", "e", "ls", "t", "opens", "ips", "scripts", "ds", "submit", "comments", "ins"], "i": ["gi", "k", "end", "a", "ei", "int", "ie", "p", "phi", "ai", "c", "h", "o", "num", "ini", "pos", "iu", "slice", "z", "si", "index", "x", "ind", "start", "I", "uri", "l", "u", "d", "pi", "j", "f", "m", "xi", "hi", "ci", "v", "b", "key", "e", "id", "li", "ii", "n"]}}
{"code": "x = int(input())\\nreached, ans = 0, 0\\nwhile reached < x:\\n    reached += ans\\n    if reached >= x:\\n        break\\n    ans += 1\\n    # print(reached, ans)\\nprint(ans)", "target": "350", "substitutes": {"x": ["change", "a", "int", "python", "X", "event", "p", "tx", "xs", "c", "xx", "y", "rx", "xa", "ix", "h", "z", "xt", "ex", "xxx", "index", " xx", "w", "cross", "wx", "u", "max", "f", "sync", "xi", "self", "act", "input", "no", " X", "xp", "an", "t", "e", "xes", "step", "xc", "test", "n"], "reached": [" reapped", "reaching", "reapped", "recachable", " reachable", "Reapped", " unrejected", "recaching", "recach", " unreached", "REachable", "forejected", " unreach", "renached", "foreach", "Rejected", "foreaching", "Reach", "Reachable", "REach", "renaching", " reaching", "reach", " unreaching", "recapped", "recached", "Reaching", " reach", "foreached", "rejected", "renachable", "renach", "REaching", "REached", "reachable", "Reached"], "ans": ["ano", "s", "a", "lan", "span", "cas", "atan", "na", "p", "X", "ats", "c", "pan", "mult", "aning", "un", "anas", "AN", "ANS", "anes", "any", "ane", "aces", "ann", "anc", "ana", "ays", "ex", "can", "nan", "An", "ars", "anned", "anch", "aned", "chan", "ations", "u", "max", "ons", "aus", "leans", "ants", " spans", "ns", "man", " an", "scan", "ran", "no", "plan", "an", "n", "ins"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\\nfrom itertools import permutations, combinations, product, accumulate\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom fractions import gcd\\n\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\n\\nN, M = MAP()\\nS = LIST()\\nT = LIST()\\n\\ndp = []\\nfor i in range(N+1):\\n\tdp.append([0]*(M+1))\\n# print(dp)\\n\\nfor i in range(1, N+1):\\n\tfor j in range(1, M+1):\\n\t\tif S[i-1] == T[j-1]:\\n\t\t\tdp[i][j] = (1 + dp[i-1][j] + dp[i][j-1]) % mod\\n\t\telse:\\n\t\t\tdp[i][j] = (dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]) % mod\\nans = (dp[-1][-1] + 1) % mod\\nprint(ans)\\n", "target": "505", "substitutes": {"INF": ["INV", "INFF", "inV", " INI", "INI", "inF", "InFF", "InV", " INV", "InF", "inFF", "inI", " INFF", "InI"], "mod": [" MOD", "min", "Max", "MOD", "MA", "MAG", "Num", "mult", "PM", "num", "inf", "Int", "Mod", " Mod", "mu", "SIZE", "MIN", "cm", "DEC", "d", "max", "MAX", "Mi", "MS", "NA", "NUM", "RM"], "N": ["F", "MN", "IN", "L", "V", " L", "NL", "H", "Q", "X", "MOD", "Y", "Size", "Num", "NI", "K", "NM", "O", "P", "C", "D", "Mod", "Ne", "W", "I", "Ni", "Z", "Ns", "ND", "R", "J", "SN", " n", "G", "n"], "M": ["F", "MN", "E", "L", "V", "H", "MOD", "Q", "X", "MA", "Y", "MAP", "K", "MX", "MP", "NM", "O", "JM", "P", "B", "C", "D", "Map", "A", "CM", "I", "m", "U", "R", "J", "MF", "G", "Mod"], "S": ["F", "s", "E", "IN", "L", "V", "SF", "Y", "SE", "NS", "INS", "PS", "P", "B", "C", "D", "A", "SL", "R", "List", "J", "SM", "SP", "SN", "G"], "T": ["F", "TP", "E", "L", "V", "TL", "Y", "TA", "TS", "O", "P", "B", "C", "D", "TG", "TB", "W", "I", "TT", "U", "R", "t", "WT", "MT", "PT"], "dp": ["lp", "wp", "eps", "p", "dist", "ps", "phi", "xs", "dat", "tp", "pm", "cp", "rep", "tmp", "gp", "dep", "sp", "mp", "params", "comp", "PP", "dm", "par", "d", "DP", "dt", "dl", "pp", "dc", "df", "pkg", "iper", "ep", "data", "db", "CP", "np", "mm", "ds", "ip"], "i": ["gi", "k", "ie", "ib", "me", "ins", "ai", "c", "isin", " I", "o", "ine", "num", "im", "ime", "iu", "dm", "ind", "I", "d", "j", "m", "inn", "il", "id", "li", "ii", "ip"]}}
{"code": "N = int(input())\\nmy_list = []\\nfor i in range(1,N+1):\\n    l = list((input().split()))\\n    l.append(i)\\n    my_list.append(l)\\n \\nmy_list2 = sorted(my_list, key=lambda x:(x[0],-int(x[1])))\\nfor i in my_list2:\\n  print(i[2])\\n", "target": "185", "substitutes": {"N": ["F", "MN", "L", "V", "NN", "H", "Q", "X", "Y", "NC", "Size", "Num", "NS", "NI", "K", "Na", "O", "P", "B", "C", "T", "D", "NH", "Ne", "S", "I", "NT", "Ni", "Z", "Ns", "R", "M", "J", " n", "NA", "n"], "my_list": ["my2batch", "my__list", " my_table", " my_l", " my__list", "my5l", " my2list", "my__List", "my2list", " my2l", " my__l", "my_word", " my__word", "my5set", " my_batch", "my2l", "my2code", " my_code", " my__List", "my__word", "my__l", " my_word", "my_code", " my_set", "my5table", "my_List", "my_table", " my2code", "my_l", " my_List", " my2batch", "my5list", "my_set", "my_batch"], "i": ["gi", "a", "ie", "int", "chi", "qi", "p", "ai", "ic", "c", "y", "r", "ini", "iq", "iu", "slice", "z", "si", "index", "x", "ind", "I", "uri", "u", "pi", "d", "io", "j", "f", "m", "ir", "cli", "xi", "input", "ri", "list", "di", "ip", "ci", "v", "b", "e", "info", "id", "li", "ii", "n", "bi", "ti"], "l": ["lp", "s", "ol", "L", "p", "c", "o", "sl", "lis", "el", "la", "left", "lo", "lv", "lc", "kl", "z", "x", "bl", "u", "d", "Li", "pl", "ll", "dl", "f", "ln", "lf", "m", "rl", "list", "nl", "wl", "fl", "lu", "b", "v", "t", "ls", "e", "il", "LI", "le", "li", "ul", "lb", "n"], "my_list2": ["my_List1", "my2ListB", "my_list4", "my2listB", "my_l4", "my_List2", "my2List2", "my_list3", "my_List3", "my_lB", "my_l1", "my_ListB", "my2list4", "my_list1", "my2list2", "my2List4", "my_List4", "my2list1", "my_l2", "my_l3", "my2List1", "my_listB"]}}
{"code": "def mapt(fn, *args):\\n    return tuple(map(fn, *args))\\n\\n\\ndef Input():\\n    return mapt(int, input().split(\" \"))\\n\\n\\ndef main():\\n    a, b = Input()\\n    towers = [1] * 999\\n    for i in range(1, 999):\\n        towers[i] = towers[i-1] + i + 1\\n    n = b - a\\n    ans = 0\\n    for i in range(998):\\n        if towers[i+1] - towers[i] == n:\\n            ans = towers[i] - a\\n    print(ans)\\n\\n\\nmain()", "target": "653", "substitutes": {"fn": ["name", "Function", "fd", "method", "p", "nm", "fp", "syn", "bn", "filename", "native", "fs", "kn", "fc", "fm", "FN", "cn", "f", "ln", "m", "sync", "fun", "function", "ns", "output", "input", "wl", "fl", "func", "callback", "dn", "feat", "prefix", "filter"], "a": ["aa", "s", "wa", "va", "span", "ma", "p", "na", "ai", "aw", "c", "eta", "o", "r", "ba", "ab", "au", "z", "da", "index", "A", "af", "w", "ia", "u", "ta", "ca", "sa", "ac", "ga", "area", "am", "input", "ae", "ci", "alpha", "ea", "e", "an", "ad"], "b": ["s", "k", "aa", "p", "bs", "bp", "g", "c", "y", "r", "number", "o", "beta", "B", "ba", "ab", "z", "x", "A", "w", "sb", "l", "bb", "d", "u", "f", "j", "m", "v", "e", "nb"], "towers": ["pasks", "Towers", "sower", "pens", "basks", "bower", "Tapers", "lasks", "power", "iresses", "papers", "iowers", "tOWER", "Tickets", "btens", "Tower", "bickets", "Ticks", "tens", "btower", "lower", "Tens", "picks", "ticks", "bicks", "topower", "tapers", "tower", " tapers", "Tresses", "presses", "tows", "btapers", "tresses", "bens", "tasks", " tens", "topens", "pOWER", "topowers", " tows", "iower", "pows", "sowers", "btowers", "topows", "powers", "lens", "iapers", "sresses", "tickets", "sOWER", "lowers", "bowers", "pickets", " tower", "TOWER"], "i": ["gi", "s", "k", "ui", "ie", "int", "qi", "p", "ai", "c", "y", "o", "r", "num", "ini", "im", "ix", "iu", "api", "inf", "z", "si", "eni", "index", "x", "ind", "I", "uri", "l", "u", "pi", "d", "j", "f", "io", "m", "xi", "di", "ni", "ip", "ci", "v", "e", "t", "info", "iw", "multi", "id", "li", "ii", "bi", "abi", "ti"], "n": [" N", "k", "p", "ai", "g", "c", "o", "yn", "nc", "r", "y", "en", "num", "number", "ne", "z", "x", "nan", "w", "l", "u", "d", "nn", "nt", "j", "f", "m", "ns", "ni", "inn", "t", "N", "e", "nb", "an"], "ans": ["ano", "s", "annis", "anna", "lan", "span", "nas", "ins", "atan", "na", "ai", "ats", "aning", "Na", "anas", "AN", "aos", "ANS", "ane", "ann", "anon", "ani", "anc", "annot", "ana", "ania", "can", "asin", " means", "nan", "A", "af", "anus", "ia", "aned", "chan", "nn", "aus", "anan", "ants", "ns", "arn", "anza", "ian", "ds", "an", " nan"]}}
{"code": "n = int(input())\\nx,y,z = 0,0,0\\nans = 0\\nfor _ in range(n):\\n    s = input()\\n    for i in range(len(s)-1):\\n        if s[i] == 'A' and s[i+1] == 'B':\\n            ans += 1\\n    if s[0] == 'B' and s[-1] == 'A':\\n        x += 1\\n    elif s[0] == 'B':\\n        y += 1\\n    elif s[-1] == 'A':\\n        z += 1\\n    else:\\n        pass\\nif x == 0:\\n    print(ans+min(y,z))\\nelse:\\n    if y + z > 0:\\n        print(ans + x + min(y,z))\\n    else:\\n        print(ans + x - 1)", "target": "456", "substitutes": {"n": ["k", "span", "p", "na", "g", "c", "o", "r", "nc", "num", "number", "h", "ne", "nan", "sn", "w", "ny", "l", "d", "nn", "f", "j", "network", "m", "Ns", "ns", "no", "b", "np", "t", "N", "e", "nb"], "x": ["dx", "min", "k", "a", "dy", "python", "sex", "X", "p", "XX", "na", "g", "c", "xs", "xx", "yx", "o", "h", "ix", "px", "rx", "ay", "number", "any", "xt", "on", "ex", "index", "wy", "xxx", "w", "cross", "l", "wx", "u", "d", "f", "ax", "j", "m", "xi", "ya", "b", "v", "xp", "e", "xy", "an", "ey"], "y": ["yr", "min", "ys", "a", "dy", "ye", "p", "Y", "c", "o", "yn", "h", "ym", "ay", "zy", "ty", "yi", "cy", "w", "ny", "l", "yt", "d", "j", "f", "sy", "ky", "m", "yy", "ya", "oy", "iy", "b", "t", "e", "xy", "py", "vy", "ry", "ey", "ies"], "z": ["iz", "a", "oz", "ze", "dy", "p", "zx", "X", "tz", "c", "zone", "h", "cz", "zo", "size", "zy", "zh", "time", "yi", "cy", "w", "ny", "yz", "l", "u", "d", "j", "Z", "f", "zz", "m", "zen", "b", "zip", "v", "t", "e", "zi", "gz", "za"], "ans": ["ss", "ano", "anc", "ys", "a", "lan", "span", "cas", "amps", "nas", "eps", "p", "na", "atan", "ai", "xs", "ats", "xx", "case", "AN", "ay", "ANS", "anes", "ks", "aces", "ann", "anon", "ani", "ays", "es", "ania", "can", "nan", "A", "errors", "ars", "cus", "cross", "ny", "asin", "anus", "args", "lines", "chan", "aned", "acer", "ace", "nn", "ons", "aus", "anne", "sk", "cs", "leans", "yes", "ants", "ns", "man", "scan", "os", "san", "ls", "cons", "ds", "an", "ies", "ad", "ins"], "_": ["k", " p", " I", " c", " time", " __", " k", " f", "j", "f", " j", " self", " l", " b"], "s": ["ss", "strings", "a", "south", "ys", "qs", "groups", "words", "p", "states", "g", "c", "sys", "steps", "xs", "sets", "o", "r", "sl", "sf", "ks", "aces", "ows", "si", "es", "als", "blocks", "S", "w", "sb", "tests", "args", "sites", "l", "parts", "ses", "d", "lines", "u", "sg", "f", "sa", "ssl", "m", "ments", "ns", "ws", "os", "abs", "gs", "b", "string", "ings", "e", "ls", "t", "ips", "ds", "its", "sv", "ops", "rs", "ins"], "i": ["gi", "ui", "end", "ie", "int", "mi", "p", "ai", "c", " I", "h", "o", "ix", "ini", "iu", "ti", "si", "eni", "index", "yi", "ind", "start", "I", "l", "u", "d", "pi", "j", "f", "io", "m", " j", "xi", "ni", "ip", "ci", "b", "v", "e", "id", "li", "ii", "bi"]}}
{"code": "import itertools\\n\\n\\ndef read():\\n    N, T = list(map(int, input().strip().split()))\\n    A = list()\\n    B = list()\\n    for i in range(N):\\n        a, b = list(map(int, input().strip().split()))\\n        A.append(a)\\n        B.append(b)\\n    return N, T, A, B\\n\\n\\ndef solve(N, T, A, B):\\n    dp1 = [[0 for j in range(T)] for i in range(N+2)]\\n    dp2 = [[0 for j in range(T)] for i in range(N+2)]\\n    for i, t in itertools.product(range(N), range(T)):\\n        u = t - A[i]\\n        if u >= 0:\\n            dp1[i+1][t] = max(dp1[i][u] + B[i], dp1[i][t])\\n        else:\\n            dp1[i+1][t] = dp1[i][t]\\n        u = t - A[N-1-i]\\n        if u >= 0:\\n            dp2[N-i][t] = max(dp2[N+1-i][u] + B[N-1-i], dp2[N+1-i][t])\\n        else:\\n            dp2[N-i][t] = dp2[N+1-i][t]\\n    v = 0\\n    for i, t in itertools.product(range(N), range(T)):\\n        v = max(v, dp1[i][t] + dp2[i+2][(T-1) - t] + B[i])\\n    return v\\n\\n\\nif __name__ == '__main__':\\n    inputs = read()\\n    print(\"%s\" % solve(*inputs))\\n", "target": "200", "substitutes": {"N": ["Out", "V", "Start", "Sn", "NE", "K", "OS", "NG", "Line", "Ni", "G", "Wh", "Key", "Ton", "You", "Length", "L", "H", "Q", "X", "NC", "Num", "NS", "Len", "Not", "IX", "Ns", "U", "Part", "J", " n", "NA", "Group", "Nat", "Network", "All", "One", "Is", "This", "Na", "O", "C", "S", "Type", "No", "Z", "R", "M", "CN", "Order", "Last", "F", "E", "IN", "New", "Max", "Y", "Size", "TN", "Core", "CNN", "Non", "P", "D", "Ne", "W", "Can", "I", "NT", "Node", "Net", "In", "NB", "Name", "Count", "n"], "T": ["F", "AT", "CT", "Nat", "E", "L", "V", "LT", "Ti", "H", "Q", "X", "Y", "Taylor", "Num", "TA", "K", "Test", "TS", "TN", "TH", "Tu", "O", "P", "C", "D", "S", "TB", "DT", "Type", "I", "Tw", "NT", "UT", "ET", "Tr", "TW", "Z", "Th", "TT", "Temp", "U", "Ta", "Total", "R", "M", "J", "TF", "WT", "MT", "Ts", "PT"], "A": ["F", "E", "Ca", "L", "At", "All", "H", "AS", "X", "AI", "Y", "AP", "LA", "AR", "TA", "This", "Na", "AN", "BA", "AM", "AB", "SA", "P", "mA", "As", "C", "Ar", "AC", "API", "D", "AA", "au", "And", "Alpha", "S", "W", "I", "Ab", "PA", "Ma", "CA", "U", "AF", "O", "alpha", "M", "G", "Am", "HA", "NA", "An"], "B": ["F", "E", "EB", "L", "LB", "V", "Q", "X", "Y", "UB", "AP", "CB", "IB", "PB", "Bi", "BA", "AB", "O", "FB", "P", "C", "D", "SB", "Bal", "BB", "BC", "AA", "BI", "TB", "W", "Tab", "I", "MB", "Ab", "BE", "Two", "Z", "BL", "OB", "WB", "Pl", "U", "R", "BS", "GB", "M", "J", "NB", "QB", "Both", "VB", "Other", "G", "BER", "Block", "BF", "Bs"], "i": ["ui", "int", "qi", "phi", "ai", "y", "ix", "im", "si", "x", "yi", "l", "f", "il", "li", "ik", "info", "gi", "ie", "at", "ic", "ini", "api", "pi", "ish", "ni", "ci", "ij", "hi", "e", "multi", "id", "ip", "ti", "vi", "p", "oi", "iu", "z", "index", "ind", "it", "d", "io", "m", "zi", "anti", "n", "k", "ib", "c", "o", "iq", "I", "uri", "ki", "one", "adi", "cli", "xi", "di", "ii", "bi", "ori"], "a": ["aa", "at", "p", "ai", "aw", "c", "fa", "y", "ba", "ab", "au", "da", "ar", "ia", "l", "d", "ca", "f", "sa", "ac", "area", "aj", "am", "ae", "alpha", "ea", "an", "ad", "n"], "b": ["aa", "be", "other", "fb", "bs", "c", "y", "r", "o", "wb", "both", "ba", "ab", "BB", "sb", "cb", "bel", "l", "rb", "d", "bf", "ben", "abb", "f", "eb", "bd", "xb", "db", "e", "nb", "lb", "n"], "dp1": ["deb1", "p100", "tp1", "apiA", "DP2", "deb81", "cp001", "dp001", "dp11", "cp9", "p001", "np1", "dp100", "cp2", "dpone", "DP81", "dt3", "dc3", "p3", "tpone", "tp2", "p11", "dpA", "npA", "dp3", "DP1", "npOne", "cp11", "dt2", "dp9", "DPone", "dep2", "dt001", "dc1", "pone", "dep9", "deb100", "DPOne", "p1", "DPA", "api2", "deb2", "deb01", "dep1", "p2", "cp81", "cp100", "cp1", "dp81", "dc11", "dt1", "pA", "tpA", "deb3", "cp3", "api9", "DP01", "cpA", "dp01", "dpOne", "cpOne", "dc2", "np2", "depA", "cp01", "api1"], "j": ["ji", "k", "int", "ja", "p", "g", "_", "jo", "c", "r", "im", "jl", "z", "x", "ind", "adj", "it", "get", "l", "q", "js", "jp", "f", "ip", "ij", "J", "id", "n"], "dp2": ["cp20", "DP2", "pkg2", "lpb", "dm2", "npB", "pkg96", "cp2", "dp02", "vp62", "dp4", "cp62", "dpB", "cpb", "DP5", "p4", "lpB", "p3", "vp1", "dp5", "cp4", "dp3", "DP02", "DP1", "cptwo", "dr2", "dm20", "dp96", "dep5", "DPB", "dr1", "dp0", "pkg5", "locb", "dptwo", "dep2", "loctwo", "DP4", "dm1", "DP0", "DPb", "cp96", "cp0", "p1", "np02", "drtwo", "dep1", "p2", "npb", "lp2", "cp1", "DP96", "dep3", "vp2", "dpb", "DP3", "loc2", "pkgtwo", "drb", "cp3", "dp20", "pkg1", "cp5", "lp02", "loc1", "np2", "vp0", "DP62", "dmtwo", "pkg20", "dp62"], "t": ["the", "s", "int", "wt", "y", "xt", "x", "tun", "yt", "l", "ta", "out", "f", "tu", "private", "qt", "type", "tel", "ter", "ret", "new", "at", "to", "dat", "h", "pt", "tf", "unt", "temp", "cart", "te", "sequ", "e", "id", "total", "ti", "token", "str", "tt", "p", "let", "tim", "r", "tp", "ot", "cont", "tr", "z", "time", "d", "ut", "m", "requ", "rt", "ts", "tw", "g", "c", "o", "tif", "ty", "tin", "st", "w", "ant", "nt", "dt", "mut", "test", "n"], "u": ["k", "ui", "auto", "ie", "uv", "ur", "p", "g", "c", "yu", "y", "o", "un", "iu", "nu", "uid", "ou", "z", "uc", "x", "cu", "w", "uri", "l", "d", "q", "uni", "f", "ut", "eu", "pu", "m", "ue", "up", "tu", "us", "U", "su", "lu", "e", "id", "ul", "ru", "uu", "n"], "v": ["s", "k", "vi", "end", "ve", "value", "uv", "V", "p", "g", "c", "var", "h", "y", "r", "result", "en", "ver", "values", "lv", "vs", "vin", "z", "vp", "x", "diff", "nv", "av", "cv", "w", "l", "d", "conv", "q", "max", "ov", "f", "iv", "vol", "m", "vv", "tv", "e", "all", "val", "sv", "ev", "volume", "n"], "inputs": ["inclines", " inputlines", "inputn", "Inputn", "pulls", "Inputments", "Inputs", "Inputd", "outputs", "inputments", "inputd", "outputlines", "outputn", " inputments", "incd", "Inputlines", "incs", "inputlines", "incn", "outputd", "pullments", "pulllines"]}}
{"code": "import sys\\nn,m = map(int, input().split())\\n\\n# it watches only end of union\\n# for i in range(m):\\n#     l,r,d = map(int, input().split())\\n#     if ml[l] == -1 and ml[r] == -1:\\n#         ml[l] = 0\\n#         ml[r] = d\\n#     elif ml[l] != -1 and ml[r] == -1:\\n#         ml[r] = d + ml[l]\\n#         if ml[r] > n:\\n#             print('R', i, ml[l], ml[r], flush=True)\\n#             print('No', flush=True)\\n#             sys.exit()\\n#     elif ml[l] == -1 and ml[r] != -1:\\n#         ml[l] = ml[r] - d\\n#         if ml[l] < 1:\\n#             print('L', i, ml[l], ml[r], flush=True)\\n#             print('No', flush=True)\\n#             sys.exit()\\n#     else:\\n#         if ml[r] - ml[l] != d:\\n#             print('B', i, l, ml[l], r, ml[r], d, flush=True)\\n#             print('No', flush=True)\\n#             sys.exit()\\n# print('Yes', flush=True)\\n\\nclass UnionfindWithWeight():\\n    def __init__(self,n):\\n        self.parents=[-1]*n\\n        self.ranks=[0]*n\\n        self.dist=[0]*n\\n    def find(self,x):\\n        if self.parents[x]<0:\\n            return self.dist[x],x\\n        else:\\n            tmp=self.find(self.parents[x])\\n            self.dist[x]+=tmp[0]\\n            self.parents[x]=tmp[1]\\n            return self.dist[x],self.parents[x]\\n    def union(self,x,y,d):\\n        rx=self.find(x)[-1]\\n        ry=self.find(y)[-1]\\n        diff=d+self.dist[x]-self.dist[y]\\n        if rx==ry:\\n            if diff!=0:\\n                return True\\n            return False\\n        if self.ranks[ry]>self.ranks[rx]:\\n            rx,ry=ry,rx\\n            diff=-diff\\n        self.parents[ry]=rx\\n        self.dist[ry]=diff\\n        if self.ranks[ry]==self.ranks[rx]:\\n            self.ranks[rx]+=1\\n        return False\\nlrd = []\\nfor i in range(m):\\n    l,r,d = list(map(int, input().split()))\\n    lrd.append([l,r,d])\\nv=UnionfindWithWeight(n)\\nfor i in lrd:\\n    l, r, d = i\\n    if v.union(l-1,r-1,d):\\n        print('No')\\n        import sys\\n        sys.exit()\\nprint('Yes')\\n", "target": "672", "substitutes": {"n": ["k", "ner", "p", "na", "nd", "g", "c", "yn", "nc", "net", "un", "nu", "ne", "ng", "x", "nan", "l", "d", "nt", "nn", "f", "ns", "ni", "nl", "b", "N", "an", "on"], "m": [" M", "p", "ms", "c", "i", "o", "r", "h", "im", "ym", "time", "fm", "module", "w", "cm", "l", "machine", "d", "f", "model", "M", "v", "b", "e", "mm", "source", "param"]}}
{"code": "N, A, B = map(int, input().split())\\n\\nans = A * (N // (A + B))\\nif N % (A + B) > A:\\n    ans += A\\nelse:\\n    ans += N % (A + B)\\n\\nprint(ans)\\n", "target": "716", "substitutes": {"N": ["F", "E", "Number", "L", "EN", "NO", "V", "NN", "H", "Q", "X", "Y", "Size", "Num", "NS", "K", "Na", "AN", "O", "P", "C", "T", "D", "Len", "Ne", "S", "I", "OS", "Node", "Z", "IO", "Ns", "U", "R", "M", "CN", "Sum", " n", "G", "NA", "n"], "A": ["F", "AD", "GA", "Ca", "DA", "a", "L", "Any", "Act", "Az", "H", "AI", "X", "AS", "Y", "MA", "AP", "IA", "Adam", "JA", "LA", "AR", "Q", "EA", "K", "Na", "FA", "Ha", "AN", "AH", "AB", "AM", "P", "C", "AU", "D", "mA", "AC", "AW", "T", "API", "AA", "Alpha", "S", "I", "SA", "PA", "Ma", "Average", "Array", "CA", "Java", "U", "AY", "AF", "O", "M", "\u03b1", "G", "KA", "HA", "NA", "Ac", "An", "App"], "B": ["F", "E", "L", "LB", "V", "Q", "X", "Y", "AP", "PB", "DB", "BA", "AB", "O", "FB", "P", "C", "T", "D", "SB", "BB", "BI", "TB", "W", "I", "MB", "Ab", "Z", "OB", "WB", "U", "R", "GB", "BS", "M", "Band", "b", "NB", "G", "BF", "Bs"], "ans": ["s", "a", "ents", "lan", "ras", "cas", "amps", "eps", "nas", "atan", "na", "offs", "span", "ats", "anas", "AN", "ads", "ANS", "anes", "ks", "asts", "mean", "ane", "annels", "ann", "anc", "ays", "ana", "can", "nan", " means", "An", "ars", "aves", "aned", "atts", "ons", "aus", "works", "ens", "sk", "leans", "cs", "ants", "ns", "scan", "ases", "os", "ds", "an", "ins"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 5 + 10)\\ndef input(): return sys.stdin.readline().strip()\\n\\ndef resolve():\\n    \\n    x,y=map(int,input().split())\\n    print(x if x%y!=0 else -1)\\n    \\nresolve()", "target": "396", "substitutes": {"x": ["dx", "min", "k", "a", "dy", "int", "code", "X", "p", "xs", "c", "g", "i", "xx", "rx", "h", "ix", "pos", "size", "z", "ex", "index", "xxx", " xx", "w", "l", "u", "d", "max", "f", "m", "xi", "data", "v", "key", "xp", "b", "t", "xy", "col", "id", "val", "n"], "y": ["yd", "a", "ys", "dy", "int", "ye", "p", "Y", "c", "i", "xx", "yx", "o", "ix", "ym", "z", "zy", "index", "yi", "cy", "ny", "yz", "yt", "d", "j", "sy", "m", "yy", "ya", "oy", "iy", "b", "yl", "my", "t", "e", "xy", "py", "vy", "ey", "n"]}}
{"code": "import sys\\nimport itertools\\nfrom math import ceil\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\n\\nin_n = lambda: int(readline())\\nin_nn = lambda: map(int, readline().split())\\nin_nl = lambda: list(map(int, readline().split()))\\nin_na = lambda: map(int, read().split())\\nin_s = lambda: readline().rstrip().decode('utf-8')\\n\\n\\ndef main():\\n    D, G = in_nn()\\n    p = [0] * D\\n    c = [0] * D\\n    for i in range(D):\\n        a, b = in_nn()\\n        p[i] = a\\n        c[i] = b\\n\\n    comb = itertools.product([0, 1], repeat=D)\\n    ans = 10**9 + 7\\n\\n    for com in comb:\\n        score = 0\\n        prob = 0\\n        for i, x in enumerate(com):\\n            if x == 1:\\n                prob += p[i]\\n                score += c[i] + p[i] * 100 * (i + 1)\\n\\n        for i in range(D - 1, -1, -1):\\n            if score >= G:\\n                break\\n            if com[i] == 0:\\n                pt = ceil((G - score) / (100 * (i + 1)))\\n                pt = min(pt, p[i] - 1)\\n                score += pt * 100 * (i + 1)\\n                prob += pt\\n\\n        if score >= G:\\n            ans = min(ans, prob)\\n\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "125", "substitutes": {"read": ["call", "raw", "end", "line", "int", "str", "open", "align", "reader", " write", " apply", "stream", " draw", " connect", "load", "r", "Read", " copy", " format", "head", " scan", " check", "iter", "connect", "write", "link", "long", " parse", "run", "READ", "each", "file", "w", " run", " stream", "get", " log", "d", "buffer", "gram", " find", "walk", "sync", "function", " reads", "scan", "input", "check", "length", "reads", "find", " load", "play", " reader", " Read", "word", "send", "filter", "parse", "block", "feed"], "readline": ["playlines", "scanlin", " ReadLine", "runlines", " readlin", "loadlines", "loadblock", "getlines", "readbyte", "readerlines", "loadstring", "playfile", "playbyte", "loadLine", "readLine", "scanbyte", " readfile", "runLine", " readlist", "rowLine", "readlist", "loadline", " readpoint", "loadpoint", "runstring", "loadlin", "readlines", "readwrite", "readerpage", "rowline", " Readline", "readerline", "rowwrite", "readblock", "runlin", "scanline", "getpage", "rowlist", "readstring", "getline", " readstring", " readlines", " Readwrite", " readwrite", "scanlines", "scanLine", " readpage", "readerspace", "playline", " Readlist", " readLine", "readpoint", "getspace", "scanpoint", " readbyte", "playlin", "scanfile", "readlin", "readpage", "readfile", "playLine", "readspace", " readspace", " readblock", "runblock", "runline"], "in_n": ["in_ns", " in_ns"], "in_nn": [" in_NN", "in_cdn", "in67nn", "in67dn", "in_dn", "in_NN", " in_nc", "in67NN", "in67cdn", "in_nc", "in__na", "in__nc", "in__dn", " in_dn", "in__nn", " in_cdn"], "in_nl": [" in_nr", "in_nr", " in_kn", "in_kn"], "in_na": ["in_su", " in_su", " in_nc", "in_ne", "in_nc", " in_ne"], "in_s": ["In_sa", "in_si", "In_na", "In_s", "In_si", "in_sa"], "D": ["F", "E", "L", "DS", "V", "H", "Python", "Q", "X", "Y", "DC", "K", "DM", "DO", "DB", "Dir", "O", "P", "B", "C", "T", "DD", "S", "A", "DT", "W", "I", "CD", "Ds", "d", "Do", "DP", "Z", "U", "R", "Part", "M", "Dom", "N", "DI"], "G": ["F", "GM", "GA", "E", "L", "GE", "V", "H", "Q", "X", "Y", "Gs", "g", "K", "Ge", "GW", "O", "P", "B", "C", "GD", "FG", "GU", "S", "GC", "GP", "W", "I", "GR", "GH", "GF", "GG", "U", "R", "GB", "J", "M", "GS", "N", "LG", "GV", "Group", "GT"], "p": ["lp", "s", "pre", "ps", "g", "fp", "o", "r", "tp", "per", "h", "y", "cp", "P", "sp", "z", "po", "pa", "comp", "l", "u", "d", "pi", "cop", "q", "f", "j", "m", "pp", "point", "v", "np", "t", "e", "pe", "py", "an", "n", "pc"], "c": ["s", "k", "sc", "g", "arc", "y", "r", "nc", "o", "cp", "P", "C", "lc", "z", "ch", "comp", "cy", "cu", "w", "l", "u", "d", "cn", "q", "f", "ca", "cs", "m", "ac", "dc", "cd", "co", "ci", "ct", "cf", "e", "bc", "cc", "pc", "xc", "n"], "i": ["s", "ui", "ei", "int", "qi", "phi", "ai", "y", "ix", "si", "yi", "l", "f", "j", "li", "info", "gi", "ie", "mi", "ic", "ini", "api", "u", "pi", "ga", "ni", "ci", "ij", "v", "e", "id", "source", "ti", "ip", "vi", "chi", "oi", "iu", "attr", "z", "eni", "index", "ind", "it", "d", "io", "m", "isi", "zi", "anti", "n", "ji", "g", "o", "mini", "I", "uri", "idi", "ki", "cli", "xi", "di", "ri", "ii", "inline", "bi", "ori"], "a": ["aa", "aff", "auto", "ma", "arg", "ai", "g", "o", "r", "ba", "da", "A", "w", "l", "u", "d", "f", "ca", "sa", "ac", "m", "ga", "ape", "area", "ae", "alpha", "e", "ha", "an", "ad", "n"], "b": ["s", "k", "fb", "bs", "bp", "g", "y", "r", "o", "h", "wb", "B", "ba", "ab", "z", "sb", "cb", "l", "u", "d", "q", "abb", "f", "j", "bd", "m", "xb", "db", "v", "e", "nb", "bi", "n"], "comb": ["cube", "code", "chi", "dom", "acc", "exp", "Comb", "COM", "jo", " composite", "pm", "cp", "bo", "cum", "coll", "conf", "uc", "div", "cho", " combine", "comp", " combination", "cb", "con", "cm", "lam", "union", " combo", "Com", " combinations", "moon", " composition", "core", " COM", "omp", "clair", "cr", " cl", "cc", "cl", "loop"], "ans": ["ano", "s", "points", "lan", "nas", "ras", "cas", "eps", "ams", "amps", "na", "ps", "ms", "ats", "gan", "anas", "AN", "pos", "CNN", "ANS", "asts", "anes", "mean", "aces", "vs", "ann", "ani", "anc", "errors", "ays", "ana", "can", "es", " means", "sn", "aned", "sex", "leans", "sk", "cs", "ns", "rank", "rates", "os", "san", "ls", "ean", "cons", "ds", "span", "oss", "an", "ins"], "com": ["loc", "common", "cmp", "sc", "company", "code", "dom", "qu", "cor", "prop", "go", "Comb", "COM", "jo", "mem", "num", "im", "log", "wh", "ph", "cum", "ap", "coll", "coord", "uc", "mp", "ex", "ch", "pro", "comp", "crit", "chrom", "om", "con", "cm", "Com", "row", "core", "lim", "co", "am", "omp", "match", "complex", "bc", "imp", "pe", "atom", "col", "cl", "rom"], "score": ["orer", "error", "cmp", "sc", "nice", "Score", "code", "span", "cor", "go", "pre", "err", "ore", "width", "rate", "price", "cod", "case", "ores", "en", "sd", "result", "pos", "gc", "log", "player", "weight", "une", "mean", "size", "cost", "scale", "fit", "pro", "winner", "comp", "si", "pred", "cross", "ny", " scoring", "ace", " scores", "sr", "style", "core", "color", "rank", "speed", "scan", "scoring", "su", "cer", "match", "ize", "type", "sum", "dev", "loss", "cr", "confidence", "count", "order", "grade", "py", "rat", "test"], "prob": ["peb", "prox", "perx", " prox", "prop", "probs", " prop", "Probs", "proc", "prebs", "pec", "prol", "preb", "pex", "Prob", "Prop", " prol", "prex", "Proc", " proc", "prec", "prep", "Prox", "Prol", "perl", "perc", "perb", "pebs"], "x": ["dx", "X", "ic", "xs", "xx", "rx", "y", "h", "px", "ix", "pos", "pm", "o", "z", "ex", "index", "wx", "u", "f", "j", "ax", "xi", "ci", "ct", "xe", "xp", "v", "e", "pe", "xy", "xc", "abc", "xa"], "pt": ["points", "line", "int", "str", "span", "pre", "ps", "tx", "post", "px", "pm", "pr", "pos", "ot", "round", "cp", "ph", "sp", "temp", "mp", "z", "po", "pa", "ind", "obj", "pl", "ptr", "mag", "nt", "j", "point", "pp", "port", "pad", "depth", "br", "set", "bot", "ep", "ct", "type", "dev", "np", "t", "pn", "pot", " pos", "py", "col", "pc", "val", "step", "pg", "test", "sum", "PT", "offset", "poly"]}}
{"code": "S,T=open(0).read().split()\\nprint(sum([S[i]==T[i] for i in range(3)]))", "target": "773", "substitutes": {"S": ["F", "s", "L", "V", "H", "Q", "X", "Y", "NS", "Si", "K", "TS", "PS", "SH", "Su", "O", "SA", "P", "C", "B", "D", "A", "SL", "I", "SS", "Z", "U", "R", "M", "SP", "N", "G", "SO", "SU"], "T": ["F", "E", "L", "V", "LT", "H", "Q", "X", "Y", "TA", "TS", "TN", "TV", "KT", "O", "P", "B", "C", "D", "DT", "TB", "A", "ET", "UT", "NT", "TX", "Z", "TT", "U", "R", "M", "TF", "t", "N", "Ts", "G", "VT", "PT"], "i": ["gi", "ji", "k", "vi", "a", "qi", "mi", "p", "phi", "ai", "c", "oi", "h", "ini", "ix", "iu", "ti", "z", "eni", "si", "index", "x", "ind", "I", "fi", "l", "u", "pi", "d", "q", "j", "io", "f", "xi", "ri", "di", "hi", "ci", "ij", "ip", "b", "v", "e", "zi", "id", "ii", "bi", "abi", "n"]}}
{"code": "import math\\nimport sys\\n\\nn = int(sys.stdin.readline().rstrip())\\n\\nif n == 1:\\n    print(1)\\n    sys.exit()\\nelif n == 2:\\n    print(2)\\n    sys.exit()\\n\\nm = 1\\ns = 0\\nwhile (s <= n):\\n    s += m\\n    m += 1\\n# print(m)\\nfor i in range(1, m):\\n    if i == s - n:\\n        continue\\n    else:\\n        print(i)", "target": "389", "substitutes": {"n": [" N", "k", "a", "mn", "p", "na", "g", "c", "nm", "i", "o", "y", "nc", "h", "en", "num", "r", "rn", "ne", "z", "fn", "x", "norm", "nan", "sn", "conn", "nat", "it", "l", "nin", "u", "d", "cn", "nn", "nt", "ln", "f", "nw", "none", "ns", "no", "ni", "b", "v", "np", "len", "e", "N", "pn", "t", "nb", "an"], "m": ["mode", "a", " M", "mn", " ms", "span", "mi", "p", "ms", "c", "sym", "i", "nm", "y", "o", "r", "h", "pm", "ym", "md", "z", "dm", "mu", " cm", "start", "cm", "l", "u", "d", "f", "sm", "am", " mm", "M", "v", "b", "t", "e", "mm", "gm", "hm"], "s": ["ss", "min", "a", "ans", "p", "states", "ms", "g", "c", "sym", "i", "y", "o", "r", "size", "z", "si", "es", "x", "S", "w", "sb", "l", "lines", "ses", "d", "u", "f", "sm", "ns", "seconds", "os", "M", "gs", "b", "mins", "ts", "t", "e", "ds"]}}
{"code": "N=int(input())\\n\\na=N//11\\nb=N%11\\n\\n\\ncount=0\\ncount+=2*a\\nif 0<b and b<=6:\\n    count+=1\\nelif 6<b:\\n    count+=2\\n\\nprint(count)", "target": "241", "substitutes": {"N": ["F", "E", "L", "NO", "V", "NN", "H", "X", "Y", "NC", "Num", "NS", " B", "K", "number", "Na", "O", "P", "B", "C", "T", "D", "Ne", "S", "A", "W", "I", "NT", "Ns", "R", "M", " n", "G", "NA", "Count", "n"], "a": ["aa", "span", "p", "na", "c", "i", "fa", "y", "Na", "ba", "B", "C", "ab", "AA", "A", "bb", "offset", "aaa", "f", "ac", "area", "ae", "alpha", "ea", "an", "e", "ad", "Count", "n"], "b": ["aa", "s", "end", "int", "boot", "fb", "p", "bs", "c", "i", "y", "number", "o", "r", "wb", "beta", "B", "ba", "ab", "z", "x", "A", "body", "sb", "w", "cb", "l", "account", "bb", "d", "rb", "bf", "u", "f", "eb", "db", "bin", "v", "base", "e", "bc", "abc", "nb", "bi", "ad", "n"], "count": ["error", "name", "int", "code", "part", "cond", "p", "c", "y", "number", "case", "num", "weight", "B", "C", "size", "ab", "array", "index", "cache", "A", "start", "current", "bug", "bb", "nt", "offset", "f", "ac", "amount", "data", "length", "bin", "batch", "type", "key", "base", "e", "id", "nb", "test", "sum", "Count", "n"]}}
{"code": "def print_ans():\\n    for i in field:\\n        print(\"\".join(i))\\n    exit()\\n        \\nh,w,a,b=map(int,input().split())\\n\\nfield=[[\"0\"]*w for i in range(h)]\\n\\nif a==0:\\n    if b==0:\\n        print_ans()\\n    else:\\n        for i in range(b):\\n            field[i]=[\"1\"]*w\\n        print_ans()\\nif b==0:\\n    for i in range(h):\\n        for j in range(a):\\n            field[i][j]=\"1\"\\n    print_ans()\\n    \\nfor i in range(h):\\n    for j in range(w):\\n        if i<b and j<a:\\n            field[i][j]=\"1\"\\n        if i>=b and j>=a:\\n            field[i][j]=\"1\"\\nprint_ans()", "target": "509", "substitutes": {"i": ["ui", "ei", "int", "qi", "phi", "ai", "y", "ix", "slice", "si", "yi", "x", "l", "f", "ir", "ori", "data", "iy", "li", "ik", "aci", "info", "gi", "ie", "ini", "api", "ia", "u", "pi", "ni", "ci", "hi", "v", "e", "id", "ip", "ti", "vi", "chi", "p", "oi", "r", "iu", "grid", "z", "eni", "it", "d", "io", "m", "zi", "abi", "ji", "k", "line", "ib", "g", "c", "o", "ani", "I", "uri", "idi", "cli", "xi", "di", "ri", "iw", "ii", "bi", "n"], "h": ["rh", "hs", "k", "wa", "H", "p", "g", "c", "y", "o", "r", "ht", "head", "ph", "z", "ch", "x", "ah", "W", "l", "u", "d", "q", "f", "m", "hi", "v", "e", "t", "ha", "id", "n"], "w": ["s", "k", "wa", "wt", "win", "p", "g", "c", "aw", "width", "y", "r", "o", "we", "wb", "wave", "z", "x", "ew", "W", "l", "wx", "u", "d", "max", "q", "f", "m", "ww", "sw", "ws", "wl", "wd", "v", "t", "e", "word", "n"], "a": ["aa", "s", "wa", "va", "p", "ai", "aw", "c", "fa", "y", "r", "o", "ba", "ab", "z", "da", "x", "A", "ah", "ak", "l", "u", "d", "ach", "f", "sa", "ac", "m", "ca", "area", "aj", "am", "ae", "alpha", "e", "an", "ad", "n"], "b": ["s", "k", "aa", "ib", "fb", "p", "bs", "g", "c", "reb", "y", "o", "r", "wb", "mb", "B", "ba", "ab", "z", "ch", "x", "bl", "sb", "l", "bh", "bb", "d", "rb", "u", "bf", "ob", "f", "eb", "m", "ga", "lib", "br", "db", "abs", "v", "bar", "base", "e", "t", "bc", "nb", "lb", "bi", "n"], "field": ["match", "layer", "FIELD", "group", "end", "wa", "line", "change", "str", "value", "fix", "table", "p", "input", "g", "Field", "format", "work", "number", "slice", "player", "force", "z", "array", "rule", "parent", "index", "source", "file", "user", "machine", "q", "row", "label", "f", "object", "m", "model", "term", "wire", "man", "rank", "frame", "fields", "list", "set", "length", "data", "type", "string", "len", "v", "space", "record", "order", "count", "play", "e", "key", "message", "id", "word", "form", "range", "part", "loop", "block"], "j": ["ji", "k", "jing", "end", "ie", "ja", "p", "jen", "ai", "g", "c", "jo", "jer", "o", "y", "jj", "dj", "jas", "ijk", "jit", "jl", "z", "je", "jan", "x", "ah", "ind", "ia", "l", "u", "uj", "d", "job", "jp", "f", "ir", "oj", "js", "xi", "br", "aj", "jam", "J", "bj", "v", "e", "jon", "all", "ju", "id", "kj", "li", "ii", "n"]}}
{"code": "import sys\\nimport numpy as np\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n# ----------------------------------------------\\naa = str(input())\\n#print(aa)\\ntar = ord(aa)\\nif (tar <= 91):\\n    print('A')\\nelse:\\n    print('a')\\n", "target": "251", "substitutes": {"read": ["ride", "new", "call", "ack", "raw", "seek", "open", "reader", " write", "create", "stream", "default", "access", "g", "host", "have", "load", "work", "r", "Read", "wake", "content", "connect", "write", "run", "READ", "fit", "each", "current", "buff", "hand", "buffer", "readable", "f", "walk", "old", "input", "writ", "data", "reads", "check", "find", "view", "bind", "play", "reading", "add", "config"], "readline": ["writeLine", "READline", "ReadLine", " readlined", "readLine", "Readline", "backline", "buildspace", "backlined", "readframe", "buildLine", "readl", "buildline", "writelines", "Readlines", " readl", "writeline", "backframe", " readframe", "buildlines", "backl", "writespace", "Readspace", "READframe", "readlined", "READlined", "readspace", "READl"], "readlines": ["readstrings", "worklists", "Readines", "Readelines", " Readines", " Readlists", "READlining", "Readstrings", "workines", "worklines", "Readlining", "findlines", "readines", "Readlines", "readlining", " Readlines", " Readstrings", "readlists", "workstrings", "findelines", "Readlists", "findlining", "READlines", "readelines", "READelines"]}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\n\\ndef resolve():\\n    n = int(input())\\n    N = n * 2\\n    for i in range(1, int(pow(N, 0.5)) + 1):\\n        if N % i == 0 and abs(N // i - i) == 1:\\n            x, y = i, N // i\\n            print(\"Yes\")\\n            print(y)\\n            break\\n    else:\\n        print(\"No\")\\n        exit()\\n\\n    res = [[0] * x for _ in range(y)]\\n    num = 1\\n    left = 0\\n    while left < y:\\n        for i in range(left, x):\\n            res[left][i] = num\\n            res[i + 1][left] = num\\n            num += 1\\n        left += 1\\n\\n    for i in res:\\n        print(x, *i)\\n\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "502", "substitutes": {"input": ["error", "call", "amp", "raw", "int", "open", "reader", "request", "exit", "method", "p", "stream", "enter", "sleep", "c", "process", "init", "result", "inf", "temp", "forward", "run", "inc", "exec", "current", "accept", "buffer", "out", "f", "eval", "pull", "output", "data", "Input", "help", "select", "session", "reset", "print", "source", "block", "feed", "ref"], "f_inf": ["f_Inf", " f_Inf", " f_iter", "f_iter", "f_f", " f_f"], "mod": ["mode", "MOD", "exp", "init", "mult", "circ", "ix", "temp", " Mod", "div", "scale", "mu", "ind", "inc", "cm", "sec", "pi", "d", "shift", "j", "m", "dim", "step", "mix", "progress", "Mod"], "n": ["min", "s", "k", "p", "g", "c", "y", "o", "r", "en", "net", "z", "x", "w", "ny", "l", "u", "d", "max", "nt", "f", "j", "m", "Ns", "ns", "len", "b", "np", "e", "t"], "N": ["F", "E", "L", "NO", "V", "NL", "H", "Q", "X", "p", "Y", "NC", "Size", "Num", "NS", "NI", "K", "y", "number", "Na", "O", "P", "B", "C", "Len", "D", "T", "nu", "NH", "x", "Ne", "S", "A", "W", "I", "No", "NT", "NG", "Ni", "Z", "Ns", "U", "R", "length", "M", "NB", "G", "NA", "NUM"], "i": ["ui", "ei", "int", "qi", "phi", "ai", "y", "ix", "si", "x", "l", "f", "j", "right", "b", "li", "info", "gi", "ie", "init", "h", "ini", "u", "pi", "ni", "ci", "hi", "v", "e", "id", "ti", "ip", "p", " I", "r", "iu", "z", "index", "mu", "ind", "start", "it", "d", "io", "m", "t", "abi", "k", "a", "c", "o", "mini", "w", "I", "xi", "di", "ii", "range", "bi"], "res": ["ris", "Rs", "ras", "vals", "arr", "p", "ps", "bs", "ms", "err", " Res", "rows", "Results", "y", "r", "result", "results", "pos", "re", "ver", "gr", "values", "reg", "vs", " results", "grid", "es", "als", "x", "response", "blocks", "Res", "obj", "runs", "lines", "max", "ids", "resolution", "out", "works", "RES", "right", "details", "cs", "m", "ons", "js", "ns", "resp", "breaks", "os", "rem", "cons", "ret", "val", "rs", "ries", "ins"], "_": ["s", "int", "p", "y", "h", " x", "x", "f"], "num": ["new", "min", "name", "unit", "text", "end", "loc", "int", "part", "missing", "dom", "na", "init", "Num", "mon", "number", "r", "result", "net", "pos", "orig", "NUM", "temp", "nu", "long", "ng", "index", "x", "inc", "con", "u", " nu", "nt", "max", "uni", "out", "f", "right", "one", "m", "no", "dim", "byn", "np", "len", "count", "gen", "col", "id", "nb", "sum", "um"], "left": ["min", "loc", "full", "end", "L", "int", "p", "init", "nd", "c", "width", "o", "low", "y", "ix", "pos", "Left", "ini", "inf", "lo", "size", "ne", "lc", "z", "index", "x", "two", "ind", "start", "w", "Right", "l", "d", "row", "uni", "one", "ln", "right", "ax", "j", "out", "found", "f", "cli", "xi", "small", "m", "no", "len", "limit", "nc", "byn", "all", "le", "id", "inner", "li", "ii", "next", "offset"]}}
{"code": "s=int(input())\\nif s<=999:\\n    print('ABC')\\nelse:\\n    print('ABD')", "target": "636", "substitutes": {"s": ["ss", "irms", "qs", "ans", "states", "ps", "ms", "g", "xs", "sets", "ims", "uns", "si", "es", "als", "outs", "S", "sb", "lines", "services", "ses", "ches", "fts", "ains", "cs", "ments", "ns", "ws", "seconds", "os", "abs", "gs", "ts", "b", "ls", "ds", "ops", "ins"]}}
{"code": "MOD = 10 ** 9 + 7\\nINF = 10 ** 11\\nimport sys\\nsys.setrecursionlimit(100000000)\\n\\ndef main():\\n    N,i = map(int,input().split())\\n    print(N - i + 1)\\nif __name__ == '__main__':\\n    main()\\n", "target": "664", "substitutes": {"MOD": ["PI", " M", "AME", "ULE", "FE", " EXT", "AR", "SPEC", "IT", "FIG", "FF", "DIR", "TR", "IP", "FORM", "EXT", "W", "IX", "OM", "MIN", "MODE", " F", "Py", "FD", "M", "CC", "G", "ENT"], "INF": ["PINFF", "INFF", " INI", "INI", " INFE", "PINF", "InFF", "PINFE", "InF", "InFE", "PINI", " INFF", "InI", "INFE"], "N": ["F", "MN", "L", "V", "Limit", "H", "NL", "Q", "X", "Y", "Size", "Num", "NS", "NI", "K", "Na", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "A", "W", "I", "NT", "NG", "Z", "Ns", "U", "R", "M", "J", "G", " n", "n"], "i": ["s", "vi", "int", "p", "ai", "c", " I", "oi", "ini", "iu", "D", "ti", "z", "si", "index", "x", "I", "l", "u", "d", "pi", "j", "f", "io", "m", "ori", "ri", "ni", "ci", "J", "b", "e", "id", "li", "ii", "bi", "n"]}}
{"code": "from sys import stdin\\nimport sys\\nimport math\\nfrom functools import reduce\\nimport functools\\nimport itertools\\nfrom collections import deque,Counter,defaultdict\\nfrom operator import mul\\nimport copy\\n# ! /usr/bin/env python\\n# -*- coding: utf-8 -*-\\nimport heapq\\nsys.setrecursionlimit(10**6)\\nINF =  float(\"inf\")\\nimport bisect\\n\\nN, M = list(map(int, input().split()))\\nS = input()\\n\\nm = N\\nrecord = []\\nwhile True:\\n    for i in range(M,-1,-1):\\n        if i == 0:\\n            print(-1)\\n            sys.exit()\\n        if m-i < 0: continue\\n        if S[m-i] == \"0\":\\n            m = m - i\\n            record.append(str(i))\\n            if m == 0:\\n                print(\" \".join(reversed(record)))\\n                sys.exit()\\n            break\\n\\n\\n", "target": "677", "substitutes": {}}
{"code": "from collections import Counter\\nN = int(input())\\nP = []\\nQ = []\\nfor L in range(1, N+1):\\n    L = str(L)\\n    a = int(L[0])\\n    b = int(L[-1])\\n    if a == 0 or b == 0:\\n        continue\\n    P.append((a, b))\\nC = Counter(P)\\n\\nans = 0\\nfor i in range(len(P)):\\n    q = (P[i][-1], P[i][0])\\n    ans += C[q]\\n\\nprint(ans)", "target": "168", "substitutes": {"N": ["F", "V", "NL", "H", "X", "Y", "NC", "Size", "Num", "NS", "NE", "NI", "K", "O", "Len", "T", "D", "Ne", "S", "A", "I", "No", "NT", "Ni", "Z", "Ns", "R", "M", " n", " Ne", "NA", " D", " NI", "n"], "P": ["F", "Power", "TP", " p", "E", "PI", "Point", "PO", "V", "PUT", "X", "p", "Y", "K", "PS", "LP", "O", "T", "B", "D", "NP", "Ps", "IP", "PD", "API", "PE", "S", "PP", "A", "GP", "PA", "DP", "RP", "Py", "BP", "U", "R", "Part", "M", "CP", "J", "FP", "Case", "EP", "PF", "PT"], "Q": ["F", "E", "V", "H", "X", "Y", "NC", "K", "O", "T", "B", "D", "NP", "IP", "Ps", "S", "A", "W", "I", "Z", "CL", "U", "M", "J", "Qu", "G"], "L": ["F", "E", "LB", "V", "LT", "NL", "X", "LA", "dL", "K", "LP", "Lu", " Li", "O", "B", "T", "D", "lc", "LM", "PL", "LD", "LIN", "S", "A", "W", "SL", "I", "l", "Li", "LR", "EL", "ll", "Line", "ln", "Z", "BL", "RL", "Lo", "CL", "U", "R", "List", "M", "LO", "LI", "LG", "DL", "XL", "G", "LL", "li", " l", "UL"], "a": ["aa", "wa", "va", "ao", "ma", "p", "ai", "c", "fa", "y", "la", "ba", "ab", "au", "art", "da", "pa", "x", "A", "af", "l", "d", "aaa", "ca", "sa", "asa", "ac", "area", "am", "ae", "oa", "alpha", "ea", "e", "an", "ad", "n"], "b": ["aa", "be", "s", "fb", "p", "bs", "bp", "c", "y", "o", "emb", "wb", "mb", "B", "ba", "ab", "x", "A", "sb", "cb", "l", "bb", "d", "rb", "u", "bf", "abb", "eb", "j", "f", "bd", "amb", "db", "v", "e", "nb", "lb", "bi", "n"], "C": ["CV", "CT", "E", "CE", "FC", "CI", "V", "Cu", "Y", "NC", "c", "DC", "K", " c", "O", "T", "D", "AC", "S", "A", "GC", "CF", "I", "Sc", "CL", "CA", "CCC", "CS", "U", "R", "JC", "M", "CC", "CN", "G", "CW", "CR"], "ans": ["s", "ents", "qs", "lan", "span", "ras", "nas", "eps", "na", "ai", "aning", "AN", "ANS", "anes", "any", "ks", "asts", "mean", "ane", "aces", "ann", "ase", "ani", "anc", "ays", "es", "can", " means", "A", "An", "ars", "aned", "ches", "ons", "aus", "ens", "sk", "cs", "leans", "ants", "ns", "os", "ls", "an", "n", "ins"], "i": ["gi", "k", "ui", "ie", "int", "IL", "qi", "mi", "p", "phi", "ai", "c", " I", "oi", "y", "ix", "ini", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "d", "pi", "ki", "j", "f", "xi", "ri", "ni", "ci", "e", "LI", "id", "li", "ii", "qq", "n", "ip"], "q": ["k", "sq", "sh", "qs", "qu", "qi", "p", "qa", "c", "y", "h", "iq", "z", "ch", "x", "w", "u", "d", "eq", "f", "dq", "query", "question", "qt", "v", "aq", "ck", "t", "key", "count", "quant", "col", "id", "qq", "n"]}}
{"code": "import sys\\n\\ninput = sys.stdin.buffer.readline\\nin_n = lambda: int(input())\\nin_nn = lambda: map(int, input().split())\\nin_s = lambda: input().rstrip().decode('utf-8')\\nin_map = lambda: [s == ord('.') for s in input() if s != ord('\\n')]\\n\\nMOD = 10**9 + 7\\nINF = 8 * 10**18\\n\\n\\ndef main():\\n\\n    N = in_n()\\n    S = in_s()\\n\\n    ans = 0\\n    for i in range(1, N - 1):\\n        v1 = set(S[:i])\\n        v2 = set(S[i:])\\n        ans = max(ans, len(v1 & v2))\\n\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "575", "substitutes": {"input": ["error", "call", "raw", "IN", "until", " output", "password", "int", "str", "python", "text", "reader", "request", "method", "argument", "enter", "init", "command", "element", "default", "inside", "stream", "load", "format", " inputs", "instance", "inf", "connect", "empty", " inf", "temp", "array", "index", "expression", "image", "file", "version", "exec", "current", "answer", "block", "accept", "buffer", "out", "param", " Input", "function", "pull", "null", "output", "parent", "list", "data", "Input", "string", "help", "select", "view", "include", "print", "keep", "filter", "source", "config", "form", "sum", "feed", "radio"], "in_n": ["in_ns", "inLn", "in64nn", "inLnn", "in_N", "in64n", " in_nb", " in64n", "IN_N", "in_nb", "IN_p", " in64nb", "in64nb", " in64N", " in64nn", "inLnb", "in64N", " in_N", "in_p", "IN_n", "IN_ns", "inLN"], "in_nn": [" in_ss", "in_ns", "in_ss", " in64s", "in__s", "in64nn", "in64ss", " in64ss", "in64ns", " in_ns", "in__ns", "in64s", " in64nn", " in64ns", "in__ss", "in__nn"], "in_s": [" in_ss", "in_ss", "in__s", "in_sq", " in_sq", " in__sq", " in__s", " in__ss", " in__n", "in__n", "in_south", "in__sq", "in__ss", " in_south"], "in_map": ["in_ns", "in_maps", "IN_map", "infmap", "in2maps", "in2map", "infns", "IN_maps", "in2ns", "infs", "IN_s", "in2s", "IN_ns", "infmaps"], "s": ["ss", "name", "spec", "a", "sid", "str", "words", "p", "side", "ps", "c", "sym", "o", "sl", "r", "ads", "sp", "si", "search", "x", "blocks", "w", "sb", "start", "tests", "u", "ses", "d", "sg", "f", "sa", "ssl", "sw", "ns", "ws", "abs", "string", "v", "b", "e", "session", "ls", "ds", "se", "ops", "source", "an", "comments", "n"], "MOD": ["PI", "NO", "XX", "MAG", "MI", "AP", "DC", "SPEC", "PM", "DIR", "Mod", "EXT", "SIZE", "MIN", "MB", "NT", "MAX", "ARM", "WARN", "LINE", "Mi", "MS", "CC", "mod", "NUM", "RM"], "INF": [" INFF", "INFF", "INf", " INf", "ANf", "InFF", "ANF", "InF", "ANFF", "Inf"], "N": ["F", "L", "V", "NN", "H", "X", "Size", "Num", "NS", "K", "NM", "AN", "O", "P", "T", "C", "B", "D", "Len", "Ne", "A", "I", "NT", "NG", "Ni", "Z", "Ns", "ND", "R", "M", "CN", " n", "NA", "n"], "S": ["ss", "F", "L", "IS", "V", "AS", "X", "SE", "NS", "K", "Si", "TS", "PS", "AN", "ANS", "P", "T", "C", "B", "D", "SK", "A", "I", "SS", "OS", "WS", "Ns", "ns", "Array", "Set", "CS", "U", "R", "M", "GS", "String", "Sin", "Sign", "SN", "G", "SU", "ES"], "ans": ["ss", "ents", "lan", "nas", "les", "amps", "ends", "offs", "atan", "na", "ras", "gan", "ats", "Ann", "aning", "Na", "anas", "AN", "ANS", "anes", "asts", "mean", "aces", "vs", "ann", "anse", "anon", "ani", "anc", "ays", "ana", "annot", " means", "A", "An", "nan", "anned", "ars", "aned", "ons", "aus", "leans", "sk", "ants", "ns", "ases", "os", "san", "ls", "ANN", "ds", "NA", "an", "ins"], "i": ["gi", "k", "a", "ei", "ie", "int", "qi", "p", "ai", "c", " I", "o", "r", "h", "ix", " c", "ini", "iu", "z", "si", "index", "x", "ind", "start", " il", "I", "l", "u", "d", "j", "f", " j", "ri", "ni", "ip", "v", "b", "e", "zi", "id", "li", "ii", "n", "ti"], "v1": ["V1", "V2", "fb", "f2", "lv2", "lv8", "vb", "V8", "lv1", " vb", "f3", "V0", "v0", "f1", "lv0", "V3", " v8", "v3", " v0", "v8", "Vb", " v3"], "v2": ["V1", "V2", "V5", " v5", "V4", "v4", " vtwo", "sv1", "sv4", "sv2", "vtwo", " v4", "V8", "av1", "av2", "Vtwo", "svtwo", " v8", "av5", "v8", "v5", "av8"]}}
{"code": "N,M = map(int,input().split())\\nli = []\\nfor _ in range(M):\\n  li += input().split()\\nfor i in range(1,N+1):\\n  print(li.count(str(i)))\\n", "target": "180", "substitutes": {"N": ["F", "E", "L", "V", "H", "Q", "X", "Y", "Size", "Num", "NS", "K", "NM", "CNN", "O", "P", "T", "C", "B", "D", "S", "W", "I", "Node", "Z", "Ns", "U", "R", "J", " n", "G", "NUM", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "MI", "K", "MX", "DM", "RM", "NM", "O", "P", "LM", "B", "C", "D", "T", "MD", "S", "CM", "I", "Z", "m", "MC", "U", "R", "Mi", "J", "G", "n"], "li": ["lp", "loc", "L", "ie", "chi", "mi", "eli", "lie", "sl", "ini", "Lu", "el", "lli", "iter", "la", "split", "lo", "lc", "ani", "kl", "mini", "si", "l", "pl", "Li", "pi", "ln", "lib", "cli", "ignore", "ori", "list", "di", "ci", "ni", "hi", "lu", "len", "LI", "ls", "lt", "le", "py", "multi", "zi", "ii", "nb", "bi", "n"], "_": ["k", " g", " I", " ip", " __", " line", " k", "x", "I", "j", " o", "ac", " j", " sub", "ip", " nan"], "i": ["gi", "k", "int", "__", "p", "ai", "c", " I", " id", "oi", "h", " iP", "ix", "iu", "ti", "z", "si", "x", "ind", "start", "I", "l", "d", "pi", "q", "j", "f", "m", "xi", "ori", "ri", "key", "b", "e", "id", "ii", "n", "bi", "ip"]}}
{"code": "H, W = map(int, input().split())\\nS = [input() for i in range(H)]\\n\\nfor h in range(H):\\n    new_s = ''\\n    for w in range(W):\\n        if S[h][w] == '#': \\n            new_s += '#'\\n            continue\\n        count = 0\\n        ary = [-1, 0, 1]\\n        for i in ary:\\n            for j in ary:\\n                if h+i < 0 or h+i >= H or w+j < 0 or w+j >=W: continue\\n                if S[h+i][w+j] == '#':\\n                    count += 1\\n        new_s += str(count)\\n    \\n    S[h] = new_s\\n\\nfor s in S:\\n    print(s)", "target": "615", "substitutes": {"H": ["F", "E", "L", "V", "Q", "X", "DH", "Y", "K", "SH", "Ha", "HC", "O", "P", "B", "C", "T", "D", "WH", "NH", "A", "EH", "I", "HK", "Z", "HH", "HI", "U", "R", "M", "J", "N", "G", "RH"], "W": ["F", "E", "wa", "L", "V", "Q", "X", "Y", "WE", "MW", "WP", "WR", "SW", "GW", "O", "P", "B", "C", "WC", "WH", "I", "We", "DW", "TW", "Web", "Z", "WS", "WB", "WA", "U", "M", "N", "Wa", "VW", "G", "CW", "Wh", "FW", "BW"], "S": ["F", "VS", "L", "DS", "New", "V", "Es", "SC", "X", "Series", "SE", "Y", "Q", "NS", "INS", "Si", "K", "TS", "PS", "SH", "IDS", "SI", "Files", "Su", "P", "T", "C", "B", "D", "oS", "Ps", "St", "Session", "A", "SL", "Sl", "I", "Changes", "SS", "OS", "Services", "Z", "Ns", "Array", "Set", "CS", "U", "R", "O", "M", "GS", "String", "N", "G", "SSL", "BS", "SU"], "i": ["ih", "ji", "k", "vi", "ui", "a", "ie", "int", "ib", "qi", "p", "phi", "ai", "c", "oi", "o", "y", "r", "ini", "ix", "iu", "ti", "z", "si", "eni", "x", "yi", "ind", "I", "it", "l", "u", "pi", "ish", "d", "iv", "f", "m", "xi", "di", "ri", "hi", "ci", "ij", "b", "v", "e", "iw", "zi", "id", "li", "ii", "n", "ip"], "h": ["rh", "hs", "ih", "k", "wa", "end", "a", "sh", "p", "phi", "g", "c", "host", "oh", "gh", "ht", "y", "work", "o", "r", "head", "his", "wh", "ph", "hr", "z", "div", "x", "ho", "history", "ah", "hh", "l", "bh", "u", "d", "q", "shift", "f", "m", "hd", "han", "hi", "hl", "v", "b", "ha", "t", "e", "uh", "hm", "id", "home", "n"], "new_s": [" new_ts", "new05n", "newDocs", " new_t", "new_slice", "newptd", "new_d", "new_e", "newDocseries", " new_slice", "new_seconds", "new_S", "newDocS", "new_series", "new05s", "new_n", " new_seconds", " new_d", " new_e", "new_i", "newpte", "new_t", "newpts", "newptt", "new_ts", " new_series", " new_n", " new_S", "new05ts", "new05slice", "newDoci", " new_i"], "w": ["hw", "wn", "k", "wa", "a", "wi", "wt", "wp", "win", "p", "g", "aw", "c", "width", "rw", "y", "work", "fw", "o", "we", "wb", "wh", "z", "week", "wal", "x", "ew", "l", "wx", "u", "d", "q", "f", "m", "ww", "sw", "ws", "wo", "wan", "wl", "wd", "way", "v", "b", "ow", "wu", "iw", "wid", "word", "n", "wk"], "count": ["new", "error", "call", "name", "group", "a", "code", "cond", "p", "c", "case", "num", "number", "y", "work", "use", "weight", "coll", "force", "size", "counter", "z", "index", "cache", "ind", "start", "current", "child", "max", "found", "old", "depth", "list", "length", "match", "len", "base", "all", "add", "col", "id", "part", "sum", "Count", "n"], "ary": ["F", " days", "aries", "arity", "ory", "ical", " z", "ario", "aire", "ial", "ai", "ore", "inter", "arc", "arial", "itary", "num", "ix", " seq", "ay", "iary", "air", "ison", "C", " Y", "counter", " C", " sequence", "etric", "art", "A", "ar", "are", "ith", "ard", "I", " status", " switch", "ere", "ari", "Z", "status", " loop", " A", "arate", "ir", "days", "arian", "arn", "ray", "ARY", "R", "ery", "N", " Z", "skip", " index", "ry", "rict", " counter"], "j": ["ji", "k", "vi", "a", "sh", "ie", "ja", "p", "g", "c", "jo", "y", "o", "jj", "jl", "z", "je", "ch", "x", "l", "u", "uj", "d", "q", "js", "jp", "f", "m", "oj", "note", "jc", "xi", "aj", "ij", "J", "v", "b", "bj", "e", "t", "li", "ii", "bi", "n"], "s": ["ss", "hs", "new", "ys", "sh", "spec", "str", "words", "p", "bs", "ps", "rows", "c", "sets", "o", "r", "si", "es", "params", "sb", "parts", "services", "ses", "lines", "sg", "js", "f", "cs", "m", "sw", "ess", "ws", "us", "os", "ts", "v", "t", "ls", "ds", "se", "ins"]}}
{"code": "n=int(input())\\n\\nnum=0\\nfor i in range(1,10**3):\\n    if i*(i-1)//2==n:\\n        num=i\\n        break\\n\\nif num==0:print(\"No\");exit()\\nlength=num-1\\nA,cnt=[],1\\nfor i in range(1,num):\\n    B=[]\\n    cnt +=i-1\\n    for j in range(i):B.append(cnt+j)\\n    for j in range(i,length):B.append(B[-1]+j)\\n    A.append(B)\\nA.append([i*(i+1)//2 for i in range(1,length+1)])\\n\\nprint(\"Yes\")\\nprint(length+1)\\nfor i in A:\\n    print(length,*i)", "target": "502", "substitutes": {"n": ["k", "a", "p", "c", "o", "number", "nc", "y", "ne", "nu", "z", "x", "nan", "w", "l", "u", "d", "nn", "max", "f", "m", "ns", "no", "ni", "b", "len", "np", "t", "N", "e", "nb"], "num": ["loc", "unit", "p", "Num", "nm", "umi", "mult", "c", "o", "number", "nc", "un", "NUM", "bn", "iter", "split", "temp", "nu", "nom", "div", "index", "x", "valid", "om", "con", "u", "nn", "nt", "uni", "f", "m", "no", "len", "dim", "b", "np", "byn", "count", "limit", "id", "ul", "nb", "sum", "um", "total"], "i": ["gi", "ji", "k", "ui", "a", "ie", "int", "ei", "qi", "p", "phi", "ai", "c", "oi", "o", "y", "im", "ini", "iu", "z", "si", "index", "x", "yi", "ind", "start", "I", "uri", "l", "fi", "u", "pi", "d", "q", "io", "f", "m", "xi", "di", "ni", "ip", "ci", "ij", "b", "v", "e", "t", "zi", "id", "li", "ii", "bi", "ti"], "length": ["Length", "loc", "k", "end", "L", "collection", "code", "span", "total", "p", "distance", "c", "width", "h", "number", "section", "split", "size", "long", "index", "w", "l", "th", "pi", "d", "position", "f", "shape", "duration", "path", "len", "limit", "b", "type", "e", "count", "id", "range", "nb", "form"], "A": [" N", "F", "Length", "E", "a", "L", "New", "All", "H", "Q", "p", "Y", "AP", "Num", "LA", " I", "This", "BA", "AB", "O", "AM", "P", "C", "T", "D", "As", "Ar", "API", "array", "AA", "And", "Alpha", "S", "W", "I", "Ab", "Array", "CA", "U", "Part", "alpha", "J", "M", " a", "b", "N", "G", "Am", "HA", "NA", "App", "Count"], "cnt": ["cNT", " ccount", "Ccount", "CNT", "acount", "encount", "Cwd", " cNT", " cct", " cwd", "cct", "ccount", "crt", "acnt", "Cnt", " cno", "hnt", "hwd", "Cno", "encnt", "acNT", " cnd", "account", "acno", "cno", "encNT", "cnd", "Crt", "count", "Cct", "hnd", "hct", "cwd", "Cnd", "acrt", "Count", "encrt"], "B": ["F", "Base", "E", "EB", "L", "LB", "V", "H", "X", "Y", "CB", "Bar", "Bi", "BA", "O", "P", "T", "C", "D", "BB", "BC", "BI", "TB", "W", "Tab", "I", "Bytes", "Ab", "BE", "BR", "BL", "OB", "WB", "Blocks", "U", "GB", "R", "Beta", "M", "J", "b", "NB", "N", "G", "Block", "BF", "Bs"], "j": ["ji", "k", "end", "a", "ie", "int", "ja", "p", "_", "c", "g", "h", "y", "jj", "r", "o", "iu", "jl", "z", "ch", "index", "x", "ind", "I", "obj", "it", "l", "u", "uj", "d", "q", "js", "jp", "f", "m", "jc", "jam", "ci", "ij", "J", "b", "v", "t", "li", "ii"]}}
{"code": "N = int(input())\\nlst = input().split()\\n\\nfor i in range(N):\\n   lst[i] = int(lst[i])\\nlst.sort(reverse=True)\\n\\nAlice = 0\\nBob = 0\\n\\nfor i in range(N // 2):\\n   Alice += lst[2 * i]\\n   Bob += lst[(2 * i) + 1]\\n\\nif N % 2 == 1:\\n   Alice += lst[-1]\\n\\nprint(Alice - Bob)", "target": "452", "substitutes": {"N": ["F", "MN", "Length", "E", "Number", "L", "V", "NN", "NL", "H", "Q", "X", "Y", "Size", "Num", "NS", "NE", "K", "NM", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "NY", "I", "NT", "Node", "Two", "Ni", "Z", "Ns", "R", "M", "J", "NB", "G", "NA", "n"], "lst": ["Lbl", "plset", "plST", " lrest", "ilst", "llST", "dst", "slst", "plst", "Lsts", "dbl", "llbl", "lrest", "dlset", "dsts", " lsts", " lset", "elST", " lstr", "dlST", " list", " lbl", "lstr", "elrest", "LST", "plbl", "dST", " lST", "llset", "lST", "ilist", "Lst", "slbl", "lct", "dlst", "slct", "ilstr", "llst", "Lct", "elbl", "elset", "llstr", "list", "List", "slsts", "lbl", "elstr", "lsts", "elst", "llrest", "lset", "Lstr", "ilbl", "dlstr", " lct"], "i": ["gi", "ih", "k", "ui", "vi", "a", "ie", "int", "ei", "qi", "mi", "p", "phi", "ai", "c", "o", "r", "h", "ini", "iu", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "pi", "d", "j", "io", "f", "m", "xi", "ori", "di", "ri", "ni", "ci", "ip", "v", "b", "e", "t", "zi", "id", "li", "ii", "n", "bi", "ti"], "Alice": ["Interest", "Welcome", "Care", "Henry", "Community", "ICE", "Anyone", "Chat", "Robin", "Austin", "Nick", "Stack", "Emily", "Notice", "Experience", "Jack", "Witness", "Chicago", "Bitcoin", "Snake", "Alex", "Silver", "Eye", "Everyone", "Albert", "Alpha", "Pretty", "Service", "Stone", "Faith", "ABC", "America", "Ice", "Anne", "Orange", "Andrew", "Allen", "Alien", "London", "Shape", "String", "Phoenix", "Jane", "Diamond", "Charlie", "Bear", "ice", "White", "Larry", "Mini", "Walker", "Jessica", "William", "Queen", "Everything", "Answer", "Square"], "Bob": ["Birth", "Boy", "Blake", "Care", "Lib", "Elizabeth", "Rob", "Child", "Human", "Bah", "Bernie", "Adam", "CB", "Robert", "Bar", "Jack", "Rub", "Jerry", "Scar", " bob", "BB", "Dou", "BI", "Tab", "Chris", "Tom", "ob", "Ab", "Brian", "Job", "Andrew", "Bug", "Hub", "Bill", "Lou", "Maybe", "Blue", "Sub", "David", "Jane", "Ever", "John", "Bear", "Ruby", "While", "Larry", "Nice", "Baby", "Jeff", "Diamond", "Square", "Joe"]}}
{"code": "a=int(input())\\nb=int(input())\\nans=6-a-b\\nprint(ans)", "target": "752", "substitutes": {"a": ["aa", "va", "p", "qa", "c", "fa", "xa", "ba", "ab", "z", "da", "x", "A", "af", "d", "aaa", "ca", "sa", "f", "asa", "ga", "ac", "m", "area", "aj", "ae", "alpha", "ea", "e", "abc", "an", "ad", "n"], "b": ["aa", "k", "fb", "p", "bs", "bp", "g", "c", "pb", "i", "fa", "y", "wb", "mb", "beta", "bis", "B", "ba", "ab", "body", "sb", "l", "bb", "rb", "d", "bf", "abb", "aaa", "f", "ca", "v", "e", "bc", "abc", "lb", "ad", "n"], "ans": ["ss", "ents", "lan", "span", "nas", "atan", "na", "ats", "aning", "anas", "AN", "times", "ANS", "anes", "ane", "ann", "anon", "anc", "ana", "es", "pa", "can", "nan", "An", "anned", "ars", "anus", "aned", "chan", "aus", "anan", "anne", "leans", "sk", "cs", "ns", "san", "ls", "cons", "bc", "ean", "ds", "an", "ins"]}}
{"code": "S = str(input())\\nif S[0] == S[1] == S[2]:\\n  print('No')\\nelse:\\n  print('Yes')", "target": "234", "substitutes": {"S": ["F", "s", "E", "L", "DS", "V", "H", "SC", "Q", "X", "SE", "SR", "NS", "Si", "TS", "PS", "SH", "ST", "Source", "SI", "O", "SA", "P", "T", "C", "B", "D", "SB", "A", "RS", "I", "SS", "OS", "WS", "SAN", "CS", "POS", "U", "R", "Part", "M", "GS", "SM", "SP", "String", "N", "SN", "G", "SO", "SU"]}}
{"code": "def resolve():\\n    (H, W) = list(map(int, input().split(\" \")))\\n    S = [list(input()) for i in range(H)]\\n    L = [[0 for _ in range(W)] for _ in range(H)]\\n    R = [[0 for _ in range(W)] for _ in range(H)]\\n    U = [[0 for _ in range(W)] for _ in range(H)]\\n    D = [[0 for _ in range(W)] for _ in range(H)]\\n    for i in range(H):\\n        for j in range(W):\\n            if S[i][j] == \"#\":\\n                continue\\n            L[i][j] = L[i][j-1]+1 if j > 0 else 1\\n    for i in range(H-1, -1, -1):\\n        for j in range(W-1, -1 ,-1):\\n            if S[i][j] == \"#\":\\n                continue\\n            R[i][j] = R[i][j+1]+1 if j < W-1 else 1\\n    for i in range(H-1, -1, -1):\\n        for j in range(W):\\n            if S[i][j] == \"#\":\\n                continue\\n            D[i][j] = D[i+1][j]+1 if i < H-1 else 1\\n    for i in range(H):\\n        for j in range(W-1, -1 ,-1):\\n            if S[i][j] == \"#\":\\n                continue\\n            U[i][j] = U[i-1][j]+1 if i > 0 else 1\\n    ans = 0\\n    for i in range(H):\\n        for j in range(W):\\n            ans = max(ans, L[i][j]+R[i][j]+U[i][j]+D[i][j]-3)\\n\\n    print(ans)\\n\\nif '__main__' == __name__:\\n    resolve()", "target": "391", "substitutes": {"H": ["F", "E", "Sw", "V", "HS", "Q", "X", "HB", "Y", "HP", "K", "h", "IT", "SH", "TH", "Ha", "HC", "O", "P", "T", "C", "B", "CH", "WH", "NH", "A", "HE", "w", "EH", "HTTP", "I", "Rh", "HK", "GH", "Ch", "Z", "HH", "Web", "Ho", "CL", "HI", "HER", "PH", "Han", "M", "J", "HT", "FH", "N", "G", "HA", "Wh", "RH"], "W": ["F", "E", "Sw", "V", "Q", "X", "Y", "WD", "WE", "DC", "Width", "WR", "WP", "K", "NW", "SH", "SW", "GW", "TH", "O", "P", "B", "T", "C", "WC", "WH", "A", "Weight", "w", "I", "Rh", "We", "Tw", "DW", "OW", "Web", "TW", "Z", "WS", "WA", "WB", "WF", "M", "J", "N", "Wa", "VW", "G", "CW", "Wh", "Block", "FW", "RH", "Work", "BW"], "S": ["F", "s", "E", "IS", "V", "Es", "Q", "X", " s", "Y", "SE", "AS", "LS", "SR", "NS", "Si", "K", "PS", "SH", "ST", "P", "T", "C", "B", "A", "SL", "RS", "Sl", "I", "SS", "OS", "Single", "Sc", "Z", "WS", "CS", "M", "N", "SN", "G", "BS", "SU", "ES"], "i": ["ui", "ei", "int", "qi", "ai", "y", "ix", "si", "x", "yi", "l", "ili", "f", "ir", "b", "li", "ik", "info", "gi", "ie", "mi", "h", "ini", "api", "ia", "u", "pi", "ni", "ci", "ij", "J", "hi", "v", "key", "e", "id", "ip", "ti", "vi", "ami", "chi", "p", "oi", "iu", "z", "eni", "index", "ind", "it", "fi", "io", "iv", "m", "\u0438", "isi", "my", "zi", "anti", "n", "ji", "k", "a", "c", "o", "ani", "mini", "w", "I", "uri", "idi", "ki", "cli", "xi", "di", "ri", "ii", "bi", "ori"], "L": ["F", "E", "IL", "V", "NL", "Q", "LS", "X", "Y", "AL", "LA", "Lu", "O", "P", "LM", "T", "B", "PL", "SL", "Sl", "I", "l", "Li", "LR", "EL", "LE", "OL", "RL", "Lo", "CL", "List", "J", "M", "XL", "LI", "N", "DL", "LL", "G", "ML", "UL"], "_": ["k", "__", "code", "non", "place", "al", "p", "ing", "ning", "___", "lex", "of", "app", "un", "ay", "x", "d", "q", "out", "f", "am", "b", "t", "all", "id", "val", "word", "block", "ip"], "R": ["F", "E", "Rs", "NR", "V", "Q", "X", "Y", "SR", "AR", "r", "OR", "SH", "RW", "RR", "Range", "O", "RE", "P", "B", "C", "T", "RO", "A", "RS", "I", "GR", "DR", "UR", "RL", "J", "M", "ER", "N", "G", "RA"], "U": ["F", "You", "E", "Up", "V", "UID", "Q", "X", "CU", "Y", "UC", "UN", "Su", "UP", "O", "UM", "P", "T", "C", "GU", "A", "UD", "I", "UV", "u", "UT", "US", "UE", "UR", "Z", "User", "M", "OU", "UU", "N", "MU", "UI", "G", "UL"], "D": ["F", "E", "DA", "DS", "V", "DH", "Q", "X", "Y", "DC", "DM", "K", "DE", "DO", "O", "P", "T", "C", "B", "MD", "DD", "PD", "DT", "A", "UD", "I", "Ds", "d", "Do", "DF", "Z", "M", "J", "N", "G", "DN"], "j": ["ion", "name", "ui", "int", "qi", "y", "ix", "im", "si", "x", "ah", "adj", "l", "uj", "q", "js", "f", "json", "b", "fr", "li", "er", "part", "ie", "code", "jo", "h", "jj", "section", "jl", "je", "jet", "u", "jp", "note", "br", "ni", "ci", "ij", "J", "v", "key", "e", "id", "next", "op", "last", "dy", "str", "ja", "p", "dj", "r", "el", "iu", "jit", "z", "ch", "ind", "it", "d", "io", "m", "jc", "bj", "ji", "k", "ib", "jen", "g", "c", "err", "o", "jan", "w", "I", "obj", "job", "oj", "xi", "aj", "di", "jam", "jon", "kj", "ii", "bi", "n"], "ans": ["s", "ents", "lan", "nas", "offs", "amps", "ends", "ams", "atan", "na", "eps", "ms", "anges", "ats", "ions", "AN", "ANS", "anes", "ks", "ras", "aces", "ann", "anc", "ays", "es", "ands", "can", "ana", " means", "ars", "aned", "ids", "ons", "aus", "ens", "leans", "cs", "sk", "ants", "ns", "scan", "os", "san", "ls", "olds", "cons", "ians", "ds", "span", "an", "ad", "ins"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\ndef main():\\n    N = int(input())\\n    A = list(map(int, input().split()))\\n    com_left = [0] * (N+1)\\n    com_right = [0] * (N+1)\\n    total = sum(A)\\n    for i in range(N):\\n        com_left[i+1] = com_left[i] + A[i]\\n        com_right[i] = total - com_left[i]\\n    ans = 2020202020\\n    for i in range(N):\\n        diff = abs(com_left[i] - com_right[i])\\n        ans = min(ans, diff)\\n    print(ans)\\nif __name__ == \"__main__\":\\n    main()", "target": "728", "substitutes": {"input": ["error", "call", "raw", "IN", "text", " output", "until", "int", "python", "str", "reader", "sample", "request", "method", "argument", "enter", "init", "element", "load", "format", " inputs", "analysis", "inf", "empty", "array", "search", "expression", "image", "exec", "accept", "out", "wait", " Input", "pull", "output", "parent", "list", "data", "Input", " int", "type", "util", "help", "select", "view", "reset", "print", "keep", "submit", "filter", "source", "param", "feed", "n"], "N": ["F", "E", "L", "NO", "V", "NN", "X", "Y", "NC", "Size", "Num", "NS", "NI", "NE", "K", "Na", "NM", "CNN", "P", "T", "C", "B", "D", "NH", "Ne", "S", "NY", "I", "No", "NT", "NG", "Node", "Ni", "network", "Z", "Ns", "II", "ND", "U", "R", "M", "GN", "NB", "NA", "n"], "A": ["a", "V", "All", "AI", "AS", "ALL", "Y", "X", "AP", "IA", "Adam", "LA", "AR", "AST", "AN", "AM", "AB", "ACC", "P", "B", "C", "T", "AC", "As", "D", "ASC", "API", "array", "AA", "Alpha", "S", "I", "PA", "Array", "CA", "U", "AF", "alpha", "M", "G", "AW", "An"], "com_left": ["comp_last", "compleft", "Com_left", " com_log", "comxleft", "com1left", "com1right", "com_low", "com_last", "com1and", "com_ell", "comp_left", "Com_low", "com_list", "comp_right", "comp_all", "complist", "comxright", "comxlast", "Com_right", "Com_list", "com_log", "compright", "com_all", "com1ell", "complow", "com_and", "comp_and", "comp_ell"], "com_right": ["com_plus", "com_both", "comp_left", "com_end", "comp_down", "com_down", " com_both", "co_right", "com_hand", "co_end", "comp_right", "co_left", " com_plus", "comp_hand", "co_hand"], "total": ["full", "auto", "a", "non", "normal", "na", "TA", "otal", "net", "gross", "size", "final", "scale", "shared", "partial", "valid", "ass", "max", "nt", " Total", "f", "trans", "fat", "null", "no", "Total", "complete", "alpha", "ni", "summary", "lit", "t", "count", "quant", "percent", "part", "sum", "info"], "i": ["gi", "ji", "s", "ui", "a", "ie", "ei", "int", "chi", "qi", "p", "ai", "c", "oi", "h", "y", "o", "ini", "iu", "api", "lc", "ti", "mini", "si", "eni", "index", "x", "yi", "ind", "I", "uri", "l", "u", "pi", "d", "io", "j", "ki", "f", "cli", "xi", "ori", "di", "ri", "ni", "ip", "ci", "isi", "v", "b", "e", "info", "multi", "id", "li", "ii", "bi", "n"], "ans": ["s", "a", "lan", "span", "nas", "amps", "ras", "offs", "atan", "na", "ai", "anas", "AN", "ANS", "anes", "ks", "mean", "ane", "ann", "anon", "ani", "anc", "oss", "errors", "ana", "can", "nan", "cross", "parts", "lines", "aned", "stats", "ens", "trans", "cs", "sk", "leans", "ants", "ns", "scan", "os", "reads", "features", "san", "len", "ls", "plan", "ds", "NA", "artifacts", "changes", "an", "ins"], "diff": ["bad", "error", "change", "a", "cmp", "part", "missing", "dist", " differences", "err", "adv", "comment", "pos", "switch", " difference", "conf", "edit", "div", " Diff", "iff", "bug", "frac", "ignore", "different", "none", "fail", "data", "dev", "changed", "range", "changes", "test", "Diff", "ref", "info"]}}
{"code": "#import re\\nx=input()\\nans=0\\nns=0\\nnt=0\\nfor i in range(len(x)):\\n  if x[i]=='S':\\n    ns+=1\\n  elif ns>0 and x[i]=='T':\\n    ns-=1\\n  else:\\n    ans+=1\\nprint(ans+ns)\\n", "target": "713", "substitutes": {}}
{"code": "from math import ceil\\nn = int(input())\\nans = 0\\nfor i in range(1, n):\\n    for j in range(1, n // i + 1):\\n        if i * j != n:\\n            #print(i, j, n - i * j)\\n            ans += 1\\nprint(ans)", "target": "589", "substitutes": {"n": [" N", "k", "a", "span", "p", "na", "g", "c", "o", "number", "nc", "num", "en", "net", "un", "ne", "z", "x", "nan", " fn", "sn", "w", "ny", "l", "nin", "d", "nn", "ln", "network", "m", "f", "ns", "nl", "ni", "nr", "b", "v", "len", "t", "N", "pn", "e", "dn", "nb", "an"], "ans": ["ano", "s", "a", "span", "na", "init", "ine", "nc", "en", "AN", "ann", "ne", "annot", "nan", "nn", "ign", "ln", "ns", "scan", "no", "ni", "bin", "inn", "all", "an", "ins"], "i": ["ji", "k", "ui", "a", "ie", "int", "p", "phi", "ai", "c", "oi", "o", "h", "r", "ix", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "io", "f", "m", "xi", "di", "ri", "ni", "ci", "v", "b", "e", "zi", "id", "li", "ii", "bi"], "j": ["ji", "k", "a", "ja", "p", "g", "jo", "y", "o", "jj", "jl", "z", "x", "ind", "I", "adj", "l", "u", "uj", "q", "jp", "m", "xi", "aj", "ni", "ij", "J", "v", "bj", " ii", "b", "e", "jon", "ii", " l"]}}
{"code": "n, l = list(map(int, input().split()))\\n\\nc = ((l) + (l+n-1)) * n // 2\\n\\nif 0 < l:\\n    c -= l\\nelif l <= 0 <= l + n - 1:\\n    pass\\nelse:\\n    c -= (l+n-1)\\n\\nprint(c)", "target": "302", "substitutes": {"n": ["k", "ol", "L", "p", "g", "i", "o", "y", "nc", "en", "num", "net", "un", "C", "lc", "ne", "size", "z", "fn", "x", "sn", "conn", "cn", "d", "u", "nn", "ll", "ln", "f", "j", "m", "ns", "no", "nl", "len", "b", "v", "e", "N", "t", "pn", "li"], "l": ["lp", "k", "loc", "ol", "L", "line", "p", "g", "i", "o", "sl", "r", "h", "el", "left", "lc", "kl", "z", "x", "u", "d", "Li", "pl", "ll", "ln", "f", "dl", "j", "m", "nl", "b", "v", "len", "ell", "e", "ls", "t", "le", "li", "ul", "cl", "lin"], "c": ["s", "k", "call", "cycle", "a", "L", "code", "p", "g", "i", "y", "r", "o", "h", "ec", "nc", "cp", "C", "lc", "z", "kl", "ch", "ce", "x", "cache", "cy", "con", "cm", "u", "d", "cn", "f", "ln", "cs", "m", "ac", "cin", "co", "ci", "ct", "b", "v", "cf", "t", "e", "count", "cr", "cell", "col", "pc", "cl", "abc"]}}
{"code": "def abc():\\n    n, a, b = map(int, input().split())\\n    plan1 = n * a\\n    plan2 = b\\n    print(min(plan1, plan2))\\n\\n\\nabc()\\n", "target": "751", "substitutes": {"n": [" N", "min", "s", "k", "p", "na", "g", "c", "i", "y", "o", "nc", "num", "number", "bn", "ab", "ne", "z", "x", "nan", "A", "l", "u", "d", "nn", "f", "j", "m", "ns", "alpha", "e", "N", "nb", "an"], "a": ["aa", "s", "ma", "p", "na", "ai", "g", "c", "i", "y", "o", "h", "ba", "z", "au", "da", "x", "A", "w", "u", "d", "f", "sa", "j", "ac", "m", "ae", "alpha", "e", "abc", "an", "ad"], "b": ["s", "k", "aa", "end", "fb", "p", "bs", "c", "i", " B", "y", "r", "number", "h", "wb", "beta", "B", "ba", "ab", "x", "A", "w", "sb", "l", "bb", "d", "bf", "abb", "f", "bd", "eb", "m", "xb", "db", "v", "bar", "e", "abc", "bi"], "plan1": ["Plana", "plana", " Plan1", "Plann", " plann", " plana", "an1", "an2", " Plana", "Plan3", "Plan1", " Plann", " plan3", "Plan2", "plan3", "an3", " Plan2", "plann"], "plan2": ["Planb", "catb", "lan1", "cat4", "lan2", "cat2", "plan4", "lanb", "cat1", "Plan3", " planb", "Plan1", " plan4", "lan3", " plan3", "Plan2", "Plan4", "plan3", "planb"]}}
{"code": "n = int(input())\\nS = input()\\n\\nsapp = [[0] * n for _ in range(10)]\\nfor idx, s in enumerate(S):\\n    sapp[int(s)][idx] = 1\\n\\nfrom itertools import accumulate\\nsacc = [list(accumulate(sa)) for sa in sapp]\\n\\npins = set()\\nfor i in range(1, n-1):\\n    for lnum in range(10):\\n        if sacc[lnum][i-1] == 0:\\n            continue\\n        for rnum in range(10):\\n            # i+1\u304b\u3089\u6700\u5f8c\u307e\u3067\u3067\u51fa\u73fe\u3059\u308b\u304b\\n            rnumc = sacc[rnum][-1] - sacc[rnum][i]\\n            if rnumc > 0:\\n                pins.add(100*lnum + 10*int(S[i]) + rnum)\\n\\nprint(len(pins))\\n", "target": "756", "substitutes": {"n": ["k", "p", "c", "o", "r", "nc", "num", "number", "net", "h", "rn", "ne", "z", "fn", "x", "sn", "w", "ny", "l", "cn", "d", "nt", "nn", "q", "f", "network", "j", "m", "Ns", "ns", "ni", "nr", "b", "v", "np", "t", "N", "e", "pn", "nb"], "S": ["F", "L", "V", "H", "Q", "X", "p", "SE", "NS", "Si", "ST", "Su", "SI", "P", "T", "C", "B", "Sa", "A", "RS", "I", "SS", "OS", "WS", "Ns", "ns", "U", "R", "M", "GS", "N", "SN", "G", "SU", "Socket"], "sapp": ["ssacc", " sipp", " sapps", "sallow", "Sapps", "sapps", "sipp", "ssapp", "ssallow", "Spp", "napp", " sallow", "sstest", "Sipp", "ntest", "Sacc", "spp", "opensacc", " stest", "Sallow", "stest", "opensapp", "Sapp", "opensipp", " spp", "napps", "nacc", "ssapps", "opensapps", "sspp"], "_": ["k", "non", "p", "al", "c", "o", "un", "run", "x", "nan", "ar", "u", "f", "ac", "m", "len", "b", "seq", "id", "val", "an", "ip"], "idx": ["Iddx", "Idx", "indz", "inxx", "idX", "inX", "Idz", " idz", "IdX", "Idxx", "idxc", "inddx", "Idxc", " idxx", "idxx", "inx", "inxc", "idz", " iddx", " idxc", "indxc", "iddx", " idX", "indx"], "s": ["ss", "sq", "a", "sc", "south", "p", "xs", "c", "sym", "y", "sl", "o", "sd", "sf", "sp", "z", "si", "x", "sn", "sb", "l", "services", "ses", "d", "sec", "less", "sg", "sol", "f", "m", "ns", "b", "sing", "e", "ls", "ds", "se", "sv"], "int": ["float", "min", "digit", "const", "str", "pointer", "init", "ext", "inter", "ints", "number", "num", "net", "iter", "Int", "long", "index", "oct", "ind", "inc", "uint", "integer", "nt", "max", "out", "object", "point", "INT", "pad", "list", "string", "count", "inet", "id", "double"], "sacc": ["ssacc", " sac", "sescc", "Sac", "sscomb", "Satt", " scomb", "sesacc", "sesatt", "sac", "satt", "Sacc", "Scc", "scomb", "Sapp", "ssac", " scc", "sscc", "sesapp", " satt", "Scomb", "scc"], "sa": ["ss", "aa", "a", "sta", "va", "na", "ai", "fa", "Si", "sd", "isa", "sie", "SA", "ba", "si", "Sa", "pa", "da", "sn", "sb", "sac", " SA", "account", "ses", "asa", " si", "ns", "su", "ae", "ita", "session", "asi", "zi", "sam", "pse", "za", "an"], "pins": ["PI", "pid", "p", "ps", "isin", " I", " Pin", "P", "Pin", " pi", "I", " pin", "pi", "pin", "Ni", "jp", "inst", "xi", "Pi", "PIN", "spin", "bin", "e", "li", "ii", "abi", "ins"], "i": ["ui", "a", "mi", "p", "ai", "c", "isin", "o", "y", "ini", "im", "iu", "ti", "si", "index", "ind", "I", "it", "l", "u", "pi", "d", "uni", "j", "f", "ir", "m", "xi", "di", "ni", "ci", "v", "b", "t", "id", "li", "ii", "bi", "ip"], "lnum": ["fnumb", "olnumer", "knum", "gnum", "rnUM", "nnum", "lnumer", "lnums", "nnUM", "lnUM", "gnums", "lnumb", "nnumer", "rnumber", "knumb", "gnuc", "nnumber", "lnuc", "fnum", "olnumber", "olnUM", "lnumber", "knums", "knuc", "rnumer", "fnuc", "gnumb", "olnum", "fnums"], "rnum": ["rlna", "rrna", "rrno", "Rna", "rno", "rlnum", "Rno", "rlno", "Rnum", "rrnum", "rna"]}}
{"code": "n,k,*a=map(int,open(0).read().split())\\na.sort()\\np=a.pop\\ns=b=~k%2or p()\\ni=0\\nfor _ in k//2*'_':\\n x=a[i]*a[i+1]\\n if x*b>a[-1]*a[-2]*b:s*=x;i+=2\\n else:s*=p()*p()\\n s%=10**9+7\\nprint(s)", "target": "606", "substitutes": {"n": [" N", "na", "g", "c", "o", "r", "y", "ot", "ne", "z", "l", "pi", "f", "j", "network", "m", "ns", "v", "np", "t", "N", "e", "nb", "an"], "k": ["ke", "g", "c", "K", "o", "y", "r", "h", "kk", "ks", "kn", "z", "ch", "cent", "kw", "w", "ko", "it", "l", "ok", "u", "d", "max", "q", "j", "f", "ky", "cs", "m", "ku", "v", "key", "e", "t", "cc", "mc"], "a": ["aa", "wa", "sta", "int", "at", "ma", "ai", "ama", "c", "aw", "y", "o", "app", "ba", "ab", "z", "array", "A", "ar", "w", "args", "l", "u", "d", "f", "sa", "ac", "m", "area", "am", "data", "ae", "alpha", "v", "t", "e", "all", "abc", "an", "ad"], "p": ["lp", "op", "cmp", "code", "pop", "power", "ps", "g", "c", "fp", "y", "r", "tp", "h", "o", "cp", "rep", "P", "split", "proc", "z", "w", "l", "patch", "u", "pi", "d", "q", "f", "j", "m", "pp", "point", "type", "v", "np", "pair", "t", "e", "pc"], "s": ["ss", "sq", "sh", "south", "strings", "ans", "ps", "g", "c", "xs", " args", "y", "o", "r", " c", " pairs", " params", "sp", "z", "si", "es", "S", "w", "sb", " signs", "l", "parts", "u", "d", "ses", "sg", "f", "j", "sa", "cs", "m", " S", "ns", "ws", " ls", "features", "os", " self", "ts", "v", " parts", "abs", "t", "e", "ls", "se", " bins"], "b": ["bs", "g", "c", "y", "r", "o", "h", "wb", "B", "split", "ab", "z", "w", "sb", "l", "rb", "d", "u", "bb", "f", "j", "m", "v", "e", "t", "nb", "bi"], "i": ["gi", "ui", "qi", "mi", "ai", "g", "c", "y", "o", "r", "ini", "ix", "iu", "split", "z", "si", "index", "I", "l", "u", "pi", "d", "j", "f", "m", "xi", "di", "ni", "ci", "hi", "v", "t", "e", "info", "zi", "li", "ii", "bi"], "_": [" g", "g", " r", "r", " v", " c", "f", "j", "ac", " j", " self"], "x": ["dx", "int", "X", "xs", "c", "xx", "y", "o", "h", "ix", "rx", "px", "z", "xt", "ex", "xxx", "w", "cross", "l", "u", "d", "q", "f", "j", "ax", "m", "xi", "v", "xp", "e", "t", "xy", "xc", "xa"]}}
{"code": "import sys\\nreadline = sys.stdin.readline\\nMOD = 10**9+7\\ndef frac(limit):\\n    frac = [1]*limit\\n    for i in range(2,limit):\\n        frac[i] = i * frac[i-1]%MOD\\n    fraci = [None]*limit\\n    fraci[-1] = pow(frac[-1], MOD -2, MOD)\\n    for i in range(-2, -limit-1, -1):\\n        fraci[i] = fraci[i+1] * (limit + i + 1) % MOD\\n    return frac, fraci\\n\\nfrac, fraci = frac(2341398)\\ndef cmb(a, b):\\n    if not a >= b >= 0:\\n        return 0\\n    return frac[a]*fraci[b]*fraci[a-b]%MOD\\n\\nK, = map(int, input().split())\\nt = len(input().strip())\\n\\nR = 0\\nfor x in range(K+1):\\n    R += cmb(K+t-x-1, t-1)*pow(25, K-x, MOD)*pow(26, x, MOD)%MOD\\n    R %= MOD\\nprint(R)\\n", "target": "539", "substitutes": {"readline": ["writefile", "writeLine", " readup", "ReadLine", "readin", "Readin", "loadLine", "readLine", "Readup", "Readline", " readin", "loadline", "Readfile", "loadfile", "writeline", "readLINE", "loadLINE", " readLine", "loadin", "readup", "readfile", "ReadLINE", "loadup", "writeLINE"], "MOD": ["Limit", "FE", "LOC", "ROM", "RE", "LOD", "Module", "EXT", "OD", "MIN", "Mods", "MODE", "LR", "TM", " LIM", "mod", " Z", "RAM", "MT", "DEBUG", "mode", "Length", "L", "LT", "RC", "X", "SPEC", "LIB", "WR", "LP", "DIR", "LM", "FORM", "MAX", "ARM", "OF", "U", "REG", "N", "MER", "NUM", "UL", "Mod", "RM", "ID", " M", "PUT", " LOG", "COM", "DM", "FUN", "COR", "C", "TR", "MD", " Mod", "MAC", "FM", "TW", "Z", "UTC", "CL", "FD", "OK", "M", "JR", "MM", "F", "PI", "REM", "Y", "JUST", "UN", "OR", " mod", "HEAD", "RW", "RR", "P", "T", "SIZE", "MAT", "I", "IM", "ION", "LOG", "UR", "OW", " module", "CC", "Fixed"], "limit": ["min", "PI", "unit", "end", "limits", "spec", "line", "L", "Limit", "tail", "level", "condition", "IT", "format", "lock", "ini", "LP", "limited", "pos", "iter", "inf", "large", "size", "lc", "scale", "url", "file", "it", "l", "pi", "max", "page", "f", "position", "ignore", "model", "join", "site", "lim", "length", "spin", "match", "path", "len", "base", "custom", "count", "id", "filter", "li", "range", "lin", "feed", "offset", "lo"], "frac": ["min", "int", " fr", "fb", "arc", "rf", "scale", "rac", "factor", "ff", " fraction", "f", "ac", "abs", "raf", "space", "fr", "prefix", "abc", "cmp", "rup", "init", "margin", "fe", "split", "lc", "div", "comp", "flat", "fact", "fac", "pi", "cos", "spin", "len", "form", "offset", "float", "ctrl", "p", "rate", "format", "fc", "index", "fm", "inc", "fi", "none", "area", "alpha", "count", "front", "abi", "cube", "field", "exp", "err", "fp", "fx", "circ", "inf", "first", "rand", "diff", "bf", "rc", "df", "base", "cf", "fine", "ref"], "i": ["gi", "k", "ui", "ie", "int", "qi", "mi", "p", "phi", "ai", "c", "y", "r", "ini", "ix", "iu", "inf", "iter", "api", "ti", "z", "si", "index", "ind", "inc", "I", "it", "l", "u", "pi", "d", "uri", "fi", "f", "j", "m", "cli", "io", "xi", "di", "ni", "ci", "alpha", "v", "e", "multi", "id", "li", "ii", "range", "n", "bi", "abi", "ip"], "fraci": ["complii", "compliu", "quante", "quantai", "repsi", " fractionif", "fraciu", "ince", "repui", "fracui", "infi", "feI", "feii", "racip", "fracqi", " fractionqi", " fractioniu", "fracI", "fei", "ffii", "inti", "fracu", "inci", "frqi", "quantu", "feiu", "infii", "refui", " fractionb", "refiu", "arcif", "intii", "refsi", "quantii", "fri", "infb", "fracii", "infu", "racif", "arci", "quantb", "racb", "ffi", "intI", "complb", "frace", "repiu", "raci", "frI", "fru", "frii", "ffu", "fracb", "compI", "compli", "arcb", "complai", "repi", "arcip", " fractionsi", "refI", "ffe", "compqi", "incii", "intsi", "feu", " fractionip", "fracai", "fracsi", "infai", " fractionui", "compii", "fracip", " fractionii", "incu", "repii", "fracif", "frsi", "refi", "repu", " fractioni", "refii", "infI", "quanti", "complu", "compi", " fractionI"], "a": ["aa", "s", "k", "va", "ma", "p", "ai", "c", "ama", "fa", "y", "o", "la", "ba", "ab", "ana", "da", "A", "af", "w", "ata", "l", "u", "d", "aaa", "f", "ca", "sa", "ac", "ga", "area", "aux", "am", "aj", "ae", "alpha", "e", "an", "ad", "n"], "b": ["s", "be", "aa", "k", "fb", "p", "bs", "c", "y", "r", "o", "wb", "mb", "B", "ba", "ab", "z", "A", "w", "sb", "l", "bf", "d", "rb", "bb", "u", "f", "eb", "j", "m", "xb", "v", "an", "e", "abc", "bi", "n"], "K": [" N", "F", "k", "KK", "E", "L", "V", "H", "Q", "X", "Y", "IK", "KT", "O", " k", "P", "T", "C", "B", "SK", "D", "Sk", "KS", "KB", "S", "A", "W", "w", "KC", "I", "Z", "KR", "PK", "U", "M", "N", "G", "Ka"], "t": ["k", "L", "int", "at", "tt", "p", "tx", "c", "y", "o", "tp", "TS", "h", "r", "tn", "P", "T", "pt", "tf", "z", "xt", "ty", "w", "l", " T", "u", "d", "nt", "ta", "j", "f", "dt", "m", "kt", "M", "type", "v", "ts", "N", "e", "tz", "n"], "R": ["F", "E", "RG", "Rs", "NR", "L", "V", "H", "Q", "RC", "X", "RT", "SR", " r", "r", "RW", "RR", "Range", "RO", "RE", "P", "B", "C", "T", "D", "O", "S", "Result", "W", "Res", "HR", "RS", "Right", "Response", "DR", "LR", "BR", "RP", "Return", "U", "M", "J", "N", "G", "RA", "CR", "RH", "RM"], "x": ["dx", "s", "k", "int", "X", "p", "tx", "Y", "XX", "c", "xx", "y", "rx", "h", "r", "ix", "px", "T", "z", "xt", "time", "xxx", "index", "ex", "w", "cross", "l", "wx", "u", "d", "f", "ax", "m", "xi", "xp", "v", "e", "xes", "xc", "xa", "n"]}}
{"code": "string = input()\\nk = int(input())\\nans = list(string)\\n\\nalpha = \"abcdefghijklmnopqrstuvwxyz\"\\nalpha_to_num = {}\\nfor i in range(26):\\n    alpha_to_num[alpha[i]] = i\\n    \\nfor i, s in enumerate(ans):\\n    if s == \"a\":\\n        continue\\n    pos = alpha_to_num[s]\\n    kk = 26 - pos\\n    if kk > k:\\n        continue\\n    k -= kk\\n    ans[i] = \"a\"\\n    \\npos = alpha_to_num[ans[-1]]\\nnew_pos = (k + pos) % 26\\nans[-1] = alpha[new_pos]\\nprint(\"\".join(ans))", "target": "171", "substitutes": {"string": ["name", "letter", "text", "date", "strings", "line", "int", "str", "p", "strip", "number", "result", "section", "slice", "support", "array", "ident", "ring", "series", "version", "object", "f", "char", "null", "address", "area", "set", "shape", "list", "data", "complete", "input", "single", "String", "alias", "space", "word", "source"], "k": ["km", "a", "kid", "ke", "p", "g", "c", "dk", "_", "K", "o", "ks", "kn", "z", "ch", "x", "mk", "kw", "ka", "ko", "ak", "ok", "u", "unk", "q", "ki", "j", "sk", "ky", "m", "ku", "kt", "kind", "kick", "key", "ck", "e", "kr", "kj", "ik", "uk", "n"], "ans": ["strings", "ents", "nas", " answers", "span", "antis", "anas", " pairs", "ks", "names", "x", " chars", "ons", "sk", "trans", "ants", "list", "plan", "ops", "ins", "amps", "atan", "xs", "ats", "AN", "ANS", " news", "aces", "ana", "ars", "cs", "eds", "os", "alias", "ians", "an", "aks", "species", "lan", "cas", "ams", "p", "ions", "aning", " ads", "ann", "params", "can", "A", " stations", "leans", "ns", "scan", "ases", "ls", "cons", " cases", "ano", "a", "ras", "eps", "na", "activation", "results", "aos", "anon", "anc", "ani", " scans", "args", "aned", "anne", "ens", "han", "ds", "oss"], "alpha": ["aa", "amp", "a", "auto", "pha", "ma", "p", "acc", "na", "atan", "beta", "la", "ani", "array", "scale", "si", "index", "Alpha", "params", "ana", "A", "sha", "ta", "star", "sa", "ac", "acl", "area", "list", "data", "average", "alias", "asc", "alph", "\u03b1", "ahead", "source", "an"], "alpha_to_num": ["alpha_from_sum", "alpha_to_dim", "alpha_toalsum", "alpha_to_nb", "alpha_to_n", "alpha_to_name", "alpha_toalnum", "alpha_toalcat", "alpha_from_num", "alpha_to_cat", "alpha_2_sum", "alpha_2_num", "alpha_from_n", "alpha_from_number", "alpha_2_dim", "alpha_2_name", "alpha_toaln", "alpha_to_sum", "alpha_from_nb", "alpha_2_n", "alpha_from_cat", "alpha_to_number", "alpha_2_number"], "i": ["ji", "ui", "a", "ie", "int", "qi", "p", "ai", "c", "y", "o", "ini", "ix", "iu", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "l", "u", "pi", "d", "j", "io", "f", "m", "xi", "di", "ni", "hi", "ci", "b", "v", "e", "info", "id", "li", "ii", "bi", "n"], "s": ["ss", "species", "a", "spec", "south", "span", "p", "g", "c", "sym", "sets", "o", "r", "z", "si", "es", "S", "sb", "l", "u", "ses", "sg", "sin", "j", "sk", "sa", "f", " si", "ns", "us", "os", "v", "b", "space", "e", "ls", "sing", "sv", "n"], "pos": ["ss", "points", "loc", "unit", "end", " position", "line", "at", "span", "p", "location", "c", "plus", "o", "num", "axis", "pt", " positions", "size", "coord", "lc", "po", "z", "index", "x", "diff", "inc", "start", "Position", "l", "ff", "j", "f", "position", "point", "cos", "rank", "neg", "POS", "Pos", "no", "os", "day", "ref", "len", "space", "dec", "eff", "val", "pose", "ang", "block", "offset", "n"], "kk": ["km", "ss", "KK", "kid", "ikk", "qa", "aka", "oi", "K", "cp", "ijk", "ks", "kn", "kin", "kw", "ka", "ko", "ok", "ctx", "nn", "ki", "lvl", "sk", "ky", "pp", "kt", "ku", "kick", "kind", "ck", "cpp", "cc", " sidx", "kr", "kj", "ik", "uk"], "new_pos": ["new_pose", " new_position", "new_loc", " new_pose", "new_position", " new_loc", " new_val", "new_val"]}}
{"code": "import collections\\nimport math\\n\\nn=int(input())\\na=list(map(int,input().split()))\\nev=[a[2*i] for i in range(n//2)]\\nod=[a[2*i+1] for i in range(n//2)]\\n\\nccev=collections.Counter(ev)\\nccod=collections.Counter(od)\\n\\nmcev=ccev.most_common()\\nmcod=ccod.most_common()\\n\\nif mcev[0][0]!=mcod[0][0]:\\n    print(n-mcev[0][1]-mcod[0][1])\\n    exit()\\nelif len(mcev)==1 and len(mcod)==1:\\n    print(n-mcev[0][1])\\n    exit()\\nelif len(mcev)==1:\\n    print(n-mcod[1][1])\\n    exit()\\nelif len(mcod)==1:\\n    print(n-mcev[1][1])\\n    exit()\\nelse:\\n    tt=max(mcev[1][1],mcod[1][1])\\n    print(n-mcev[0][1]-tt)\\n    exit()\\n", "target": "498", "substitutes": {"n": [" N", "s", " p", "k", "name", "non", " s", "na", "p", "g", "c", " r", "o", "y", "nc", "num", " c", "en", "un", "number", "size", "nu", " f", "z", "ne", "x", " fn", " pi", "w", " np", "l", "u", "d", "cn", "nt", "j", "f", " no", "network", "ac", "m", "ln", "ns", "no", " ns", "b", "v", "an", "t", "N", "count", "e", "len", " l", "nb", " b", " d"], "a": ["aa", "s", "auto", "va", "ma", "p", "ai", "aw", "c", "y", "app", "ba", "ab", "au", "array", "index", "x", "A", "ar", "w", "ia", "args", "u", "aaa", "f", "sa", "ca", "asa", "ga", "ac", "m", "area", "aj", "am", "input", "ae", "alpha", "b", "ea", "e", "all", "an", "ad"], "ev": ["gov", "rr", "error", "hw", "erv", "iev", "uv", "ie", "eva", "Ev", "event", "eve", "our", "adv", "ec", "iq", "emb", "lv", "ever", "ann", "rev", "nov", "ew", "nv", "av", "cv", "iov", "voc", "ak", "ee", "own", "ov", "iv", "eb", "eed", " dev", "ek", "vv", "ep", "oy", "eg", "v", "dev", "tv", "ell", "volt", "enc", "lev", "ef"], "i": ["gi", "k", "ui", "int", "qi", "p", "ai", "c", "o", "h", "iu", "mini", "z", "si", "index", "x", "ind", "I", "it", "l", "u", "pi", "d", "j", "f", "io", "m", "xi", "di", "ip", "ci", "v", "b", "e", "id", "li", "ii", "bi", "ti"], "od": ["ott", "odi", "rod", "yd", "ove", "dd", "end", "ed", "ud", "ore", "ost", "cod", "o", "sd", "md", "lov", "idd", "opp", "ocr", "rob", "ogg", "OD", "ok", "ob", "d", "nt", "own", "ov", "bd", "pod", "cd", "oy", "oa", "ld", "dev", "ods", "oda", "ow", "id", "odd", "an", "ad"], "ccev": ["ccevs", "ckevs", "ccelx", "cadef", "mkec", "ccef", "mcCEvent", "mccef", "ccesf", "mkevs", "mcCEv", "mccevent", "cadevs", "mcCEx", "ccesvs", "mcCEf", "ccelv", "ckev", "mccex", "cCEx", "ccex", "ccesv", "mkev", "mcef", "mcec", "ckef", "mcevs", "mkef", "cCEv", "ckex", "ccesc", "ccelvent", "ckec", "ccec", "ccevent", "ccelf", "cadec", "cadev", "cCEf", "ckevent", "cCEvent", "mccev"], "ccod": ["ccarob", "ucod", "ucrob", "cfcod", " ccrod", "ccorp", "cod", "ccaoder", "crod", "ccoder", "ccaod", "acorp", "cfoder", " cccod", "ccrob", "ccrod", "cccod", "ccacod", "cfrob", "acrod", "ucoder", "uccod", " ccorp", "corp", "accod", "acod", "cfod"], "mcev": ["ckevs", "fcevs", "mcesv", "mkec", "mrcesf", "mceva", "mcep", "mkevs", "mcese", "mcee", "mchec", "mpev", "mchevs", "ckev", "fcef", "mpef", "mgev", "mrCEx", "mpex", "mrcex", "mcec", "cmcev", "mcevs", "ckex", "mrcef", "ckevert", "mcevin", "fcep", "mceb", "mcesvin", "lCEc", "mcuevert", "mCEv", "mrCEv", "muceb", "mcevideo", "ckeve", "mcedv", "musef", "mrcec", "ckep", "mcedx", "ckeva", "mgef", "mcapef", "mrcee", "mcevers", "mtef", "fchev", "lCEv", "cceva", "mrcesv", "musec", "mcedve", "mucev", "lCEvin", "muceva", "fchef", "mCEf", "cmcef", "mkeve", "mcedc", "ckeb", "mcueb", "mcueva", "mquec", "mcef", "mkevert", "mtep", "mkevideo", "mcesc", "ckec", "fcev", "mpeve", "ccec", "musecv", "mkevers", "ccep", "cmcec", "mcex", "mrcescv", "fchep", "ccevs", "cceb", "mchef", "ccef", "mceve", "mCEx", "mCEc", "cmpevers", "mcesvs", "mcevert", "mpevers", "mnep", "mchev", "fchevs", "cmcevers", "mcedvin", "cmpev", "mrCEc", "musev", "ccex", "mcapep", "mcesf", "ckef", "mkef", "mrcesc", "mrcecv", "ccevert", "mnevs", "mtev", "mquef", "mcesx", "mpec", "mcapevideo", "mcescv", "cmpec", "mcedf", "mkex", "mkeb", "lcev", "lcef", "mnef", "mgecv", "ccevideo", "lCEf", "mrCEe", "mquev", "mchep", "mcuev", "mcapev", "mucevert", "mCEvin", "mcecv", "lcevin", "mquevers", "cmpef", "mCEe", "mkev", "mkeva", "cceve", "lcec", "ckevideo", "mnev", "mkep", "mtevideo", "mpee", "mgec", "mrcev"], "mcod": ["mced", "ncode", "vcel", "pcod", "mcode", "ncod", "mcop", "cod", "vcod", " mcoll", "nod", " mod", " mcop", "ccel", "vod", "vCod", "mcoll", "mce", "Mcod", "pcoll", "mci", "mcot", "lcel", "lCod", "lcod", "Mcop", " mci", "mCod", "mcel", "lcode", " mcot", "ccop", "nCod", "lci", " mce", " mcode", " mced", "ccoll", " mcel", "pod", "vcode", "cce", "cCod", "ccode", "pce", "ccot", "lced", "mod", "vcot", "Mcode", "cci", "cced", " mCod", "vced", "Mod"], "tt": ["ott", "text", "tick", "ft", "mt", "tp", "tr", "vent", "td", "txt", "tag", "ph", "tf", "tty", "att", "ty", "time", "sett", "gd", "tax", "bb", "nt", "ta", "ted", "dt", "style", "TT", "kt", "rt", "yy", "lit", "ts", "qt", "tv", "t", "tz", "test", "tc"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\n\\nnum1, num2, num4 = 0, 0, 0\\nfor i in a:\\n    if i % 4 == 0:\\n        num4 += 1\\n    elif i % 2 == 0:\\n        num2 += 1\\n    else:\\n        num1 += 1\\n\\nif num1 <= num4:\\n    print('Yes')\\nelif num1 == num4 + 1 and num2 == 0:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "612", "substitutes": {"n": ["s", "ain", "p", "na", "c", "Num", "o", "r", "nc", "num", "net", "z", "x", "l", "d", "pi", "f", "j", "ns", "b", "N", "nb"], "a": ["aa", "int", "span", "p", "na", "ai", "c", "fa", "y", "o", "en", "ab", "z", "array", "ana", "art", "au", "A", "ar", "af", "args", "ca", "sa", "f", "m", "ga", "ac", "area", "aj", "am", "data", "ae", "alpha", "b", "v", "e", "an"], "num1": [" numn", "numn", "numb", "um1", " num0", " numi", "nam2", "umi", "nomb", "nom2", "nomn", "sum0", "um2", "num0", "um0", "umone", " numb", "numi", "umn", "sum4", "locone", "num10", "umb", "sum1", "sum10", "loc4", "um4", "nam1", "Numi", "numone", "namone", " num10", "nom1", "loc2", "um10", "Num2", "loc1", "Num1", "Num0", "nam4"], "num2": ["numb", "um1", " num8", "um8", "n8", "um2", "num8", " numb", "sum4", "n2", "sum2", "umb", "n4", "sum1", "Num4", "sum8", "um4", "Numb", "Num8", "Num2", "nb", "sumb"], "num4": ["form4", "umifour", "nom8", " numfour", "um1", "numfour", "n1", " num8", " num04", "formFour", "umi4", "um8", "nom2", "umFour", "um2", "num8", "numFour", "um04", "nnum", " numFour", " numnum", "umi04", "numnum", "n2", "nomfour", "form04", "n4", "umfour", "um4", "nom4", "num04", "umnum", "umi1", "form1"], "i": ["s", "k", "int", "p", "init", "ic", "ai", "c", "g", "o", "y", "ini", "iu", "z", "si", "x", "yi", "I", "ia", "it", "l", "u", "pi", "d", "io", "f", "j", "m", "ci", "v", "b", "e", "t", "iw", "multi", "id", "ii", "ik", "bi", "abi", "ip"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\nimport math\\nfrom bisect import bisect_right as br\\nfrom bisect import bisect_left as bl\\nsys.setrecursionlimit(2147483647)\\nfrom heapq import heappush, heappop,heappushpop\\nfrom collections import defaultdict\\nfrom itertools import accumulate\\nfrom collections import Counter\\nfrom collections import deque\\nfrom operator import itemgetter\\nfrom itertools import permutations\\nmod = 10**9 + 7\\ninf = float('inf')\\ndef I(): return int(sys.stdin.readline())\\ndef LI(): return list(map(int,sys.stdin.readline().split()))\\n\\na, b, t = LI()\\nans = 0\\ni = 1\\nwhile i*a <= t:\\n    ans += b\\n    i += 1\\nprint(ans)", "target": "13", "substitutes": {}}
{"code": "n,s= map(int,input().split())\\nmin = s-n+1\\nmax =s+n\\nif(s-n<-1000000): min = -1000000\\nif((s+n)>1000001): max = 1000001\\nfor i in range(min,max):\\n  print(i,end=\" \")", "target": "688", "substitutes": {"n": ["k", "p", "g", "c", "o", "r", "y", "num", "nc", "en", "size", "ne", "nu", "z", "x", "sn", "w", "ny", "l", "u", "d", "cn", "nn", "f", "j", "ln", "m", "ns", "ni", "b", "v", "e", "N", "t", "nb", "an"], "s": ["ss", "spec", "south", "p", "states", "ps", "g", "c", "sym", "y", "r", "h", "sd", "size", "z", "si", "es", "blocks", "S", "sn", "start", "sb", "sites", "l", "lines", "u", "d", "ses", "sg", "sin", "sec", "f", "sa", "cs", "m", "sync", "sections", "ns", "small", "ws", "seconds", "su", "features", "mins", "b", "space", "e", "ls", "ds", "se"], "min": ["ss", "name", "int", "span", "sample", "p", "pre", "init", "r", "sd", "pos", "lower", "section", "sign", "mean", "size", "mini", "scale", "si", "x", "diff", "start", "MIN", "Min", "sec", "d", "sol", "sa", "sort", "m", "small", "minute", "mins", "len", "e", "skip", "range", "part"], "max": ["k", "end", "last", "sh", "Max", "est", "p", "std", "nd", "init", "c", "h", "r", "temp", "size", "conf", "div", "z", "scale", "rand", "index", "az", "x", "now", "w", "start", "sec", "d", "q", "ca", "MAX", "ax", " Max", "limit", "mod", "cr", "count", "id", "step", "cl", "range", "part", "sum", "ad", "total"], "i": ["gi", "k", "a", "ie", "int", "qi", "p", "ai", "c", "h", "r", "number", "ini", "ix", "ti", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "d", "pi", "j", "xi", "hi", "e", "id", "li", "ii", "range", "bi", "ip"]}}
{"code": "import math\\nn=int(input())\\nn_=int(math.sqrt(n))\\n\\nlist_ans=[]\\nfor i in range(2,n_+1):\\n  if n%i==0:\\n    ans=i+(n//i)-2\\n    list_ans.append(ans)\\n    \\n  \\nif not list_ans:\\n  print(n-1)\\n  exit()\\nprint(min(list_ans))", "target": "523", "substitutes": {"n": ["min", "s", " p", "k", "a", "mn", "p", "na", " span", "init", " number", "c", "g", " nat", "o", "number", "y", "num", " c", " x", "nc", "en", "net", "r", " nan", " name", " can", " gn", "ann", "size", "ne", "z", "fn", " ne", "x", "nan", " fn", "sn", "w", " scans", "l", "cn", "d", "u", "nn", "nt", "f", "network", "j", "ln", "m", "ns", " an", "no", "nl", " a", "b", "len", "t", "N", " names", "pn", " num", "nb", " len", "an", " all"], "n_": [" n0", "k0", "i_", "N_", "k_", "n0", "N0"], "list_ans": ["List_ans", "List_ann", "list__ans", "list_an", "list_na", "List_nan", "List_an", "List_ANS", "List_na", "list_ann", "list__an", "list_ANS", "list__nan", "list__ANS", "list_nan"], "i": ["ih", "min", "a", "int", "qi", "p", "phi", "ai", "init", "c", " I", "oi", "h", "y", "o", "number", "ini", "iu", "ti", "z", "si", "on", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "max", "f", "j", " j", "xi", "di", "ni", "ci", "hi", "v", "b", "e", "zi", "id", "li", "ii", "multi", "bi"], "ans": ["ano", "lan", "span", "nas", "eps", "atan", "na", "ai", "aning", "AN", "ANS", "mean", "ane", "ann", "anon", "ani", "anc", "annot", "ana", "ania", "can", "nan", "anch", "aned", "nn", "ons", "anan", "ki", "ln", "sk", "anne", "ants", "ns", "scan", "os", "ls", "plan", "oss", "an", "ins"]}}
{"code": "n = int(input())\\ns = list(input().split())\\nP = s.count(\"P\")\\nW = s.count(\"W\")\\nG = s.count(\"G\")\\nprint(\"Three\" if n==P+W+G else \"Four\")", "target": "229", "substitutes": {"n": [" N", "k", "a", "span", "p", "na", "g", "c", "i", "o", "r", "nc", "ot", "net", "ne", "on", "sn", "conn", "adj", "l", "d", "nt", "f", "network", "j", "m", "nw", "Ns", "ns", "no", "ni", "b", "np", "e", "N", "pn", "nb"], "s": ["strings", "styles", "south", "qs", "groups", "shows", "ans", "p", "ps", "bs", "xs", "c", "i", "sets", "o", "results", "ves", "sf", "ks", "split", "si", "es", "S", "sb", "tests", "l", "lines", "u", "d", "less", "parts", "ses", "ids", "services", "js", "f", "m", "sync", "ns", "os", "features", "abs", "gs", "b", "ts", "string", "e", "ls", "t", "ds", "ops", "rs"], "P": ["F", "PI", "TP", "E", "PO", "L", "V", "H", "Q", "X", "p", "Y", "WP", "K", "PN", "PS", "T", "C", "B", "D", "Ps", "PE", "S", "A", "PP", "DP", "PA", "Py", "U", "R", "M", "J", "PU", "N", "PF"], "W": ["F", "E", "L", "V", "H", "Q", "X", "Y", "Width", "WE", "WP", "K", "Wi", "SW", "GW", "B", "T", "C", "D", "S", "w", "We", "TW", "Web", "WI", "WF", "U", "R", "M", "EW", "N", "Wa", "VW", "Wh", "BW"], "G": ["F", "GA", "E", "GL", "L", "V", "H", "Q", "X", "Y", "g", "K", "Ge", "GW", "B", "C", "T", "D", "S", "GC", "GR", "We", "CG", "U", "R", "GB", "M", "J", "N", "LG", "Gu", "GV", "Group"]}}
{"code": "def main():\\n    X, Y = map(int, input().split())\\n\\n    if X % Y == 0:\\n        print(\"-1\")\\n    else:\\n        print(X)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "396", "substitutes": {"X": ["F", "Length", "ID", "Pixel", "L", "XXXX", "V", "Max", "H", "Q", "XX", "Check", "XP", "K", "MX", " x", "ZX", "JSON", "DATA", "P", "T", "C", "Int", "D", "IP", "FORM", "x", "W", "XXX", "I", "NAME", "TX", "Z", "INT", "XY", "U", "M", "J", "XL", "N", "Index", "G", "VALUE"], "Y": ["F", "YY", "E", "L", "dy", "V", "Python", "Q", "YN", "YC", "i", "y", " y", "YA", "Cy", "T", "C", "P", "D", "IP", "B", "Year", "x", "S", "A", "W", "NY", "I", "TY", "SY", "MY", "Z", "XY", "Py", "yy", "U", "AY", "J", "M", "G", "Col", "HY"]}}
{"code": "n = int(input())\\n\\nfrom collections import defaultdict\\nd = {0:2,1:1}\\n\\ndef calc(n):\\n    if n not in d:\\n        d[n] = calc(n-1) + calc(n-2)\\n    return d[n]\\n\\nfor i in range(n):\\n    calc(i)\\n\\nprint(calc(n))", "target": "50", "substitutes": {"n": ["min", "name", "k", "s", "a", "non", "p", "na", "g", "c", "o", "number", "nc", "y", "num", "r", "net", "un", "rn", "ne", "nu", "z", "fn", "x", "index", "nan", "sn", "w", "conn", "l", "u", "cn", "nt", "nn", "f", "j", "ln", "m", "network", "none", "ns", "no", "nl", "ni", "nr", "b", "v", "np", "len", "t", "N", "e", "nit", "pn", "dn", "nb", "nor"], "d": ["s", "dd", "a", "dh", "fd", "p", "nd", "g", "c", "dat", "o", "dict", "r", "sd", "D", " dict", "z", " dd", "x", "diff", "w", "l", "u", "do", "f", "dt", "bd", "m", "function", "dc", "cd", "df", "defined", "di", "data", "db", " self", "b", "v", "ld", "t", "e", " dictionary", "pd", "ds", " D", " do", "ad"], "i": ["gi", "k", "a", "int", "qi", "p", "ai", "c", "y", "h", "o", "ini", "r", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "q", "j", "f", "m", "ni", "ip", "ij", "v", "b", "e", "col", "id", "li", "ii", "bi", "ti"]}}
{"code": "a, b, c, d = (int(i) for i in input().split())\\nl = [0] * 101\\n\\nfor i in range(a, b+1):\\n    l[i] += 1\\n    \\nfor i in range(c, d+1):\\n    l[i] += 1\\nans = 0\\nfor i in l:\\n    if i == 2: ans += 1\\nprint(max(ans-1, 0))\\n", "target": "146", "substitutes": {"a": ["s", "k", "aa", "va", "p", "ai", "y", "r", "ab", "da", "x", "A", "ar", "af", "w", "u", "f", "sa", "ca", "ac", "m", "asa", "am", "ae", "e", "an", "n"], "b": ["k", "ib", "fb", "p", "bs", "g", "pb", "y", "r", "o", "B", "ba", "ab", "x", "w", "sb", "cb", "bb", "rb", "bf", "f", "eb", "bd", "j", "db", "v", "e", "bc", "nb", "lb", "n"], "c": ["s", "k", "p", "g", "y", "r", "h", "C", "z", "x", "w", "u", "f", "ca", "j", "m", "ac", "dc", "cd", "ci", "v", "cf", "e", "n"], "d": ["dx", "s", "k", "dd", "dy", "dh", "fd", "p", "nd", "g", "dat", "h", "r", "D", "z", "da", "x", "w", "u", "f", "j", "bd", "dt", "m", "du", "dc", "cd", "df", "v", "ld", "e", "ds", "dos", "ad", "n"], "i": ["gi", "ji", "s", "k", "ui", "ei", "int", "ie", "chi", "span", "qi", "mi", "p", "phi", "ai", "ic", "oi", "o", "r", "y", "ini", "ix", "axis", "iu", "ti", "z", "si", "index", "x", "yi", "start", "I", "it", "u", "pi", "j", "f", "iii", "io", "m", "xi", "di", "ni", "ci", "ip", "v", "e", "t", "zi", "id", "li", "ii", "bi", "n"], "l": ["lp", "s", "k", "ol", "L", " L", "p", "g", "o", "r", "y", "sl", "el", "la", "split", "left", "lc", "kl", "z", "w", "u", "Li", "ll", "f", "ln", "dl", "j", "m", "rl", "list", "nl", "length", "v", "len", "t", "ls", "e", "il", "li", "lin", "n"], "ans": ["lins", "ents", "lan", "les", "span", "cas", "eps", "nas", "amps", "na", "ai", "xs", "ats", "ions", "anas", "ANS", "anes", "ks", "annels", "vs", "ann", "anon", "ani", "ays", "ana", "can", " means", "ars", "lines", "aned", "ons", "ids", "leans", "sk", "cs", "ens", "ln", "ants", "ns", "types", "man", "os", "ls", "ians", "ds", "ops", "an", "n", "ins"]}}
{"code": "a,b,c = map(int,raw_input().split())\\ncount = 0\\nfor i in range(a,b+1):\\n\tif c%i == 0:\\n\t\tcount += 1\\nprint str(count)", "target": "630", "substitutes": {"a": ["aa", "s", "int", "p", "y", "la", "ab", "da", "x", "A", "w", "start", "l", "u", "d", "f", "sa", "ca", "ac", "asa", "m", "area", "input", "ae", "alpha", "e", "abc", "an", "offset", "n"], "b": ["k", "end", "fb", "p", "bs", "g", "y", "r", "num", "wb", "B", "ab", "z", "x", "body", "cb", "l", "bb", "d", "rb", "f", "ca", "m", "bin", "v", "base", "e", "bc", "nb", "ad", "n"], "c": ["k", "p", "o", "r", "nc", "h", "C", "lc", "size", "z", "fc", "ce", "x", "w", "cb", "con", "l", "u", "d", "max", "f", "ca", "cs", "ac", "m", "dc", "ci", "ct", "cf", "e", "bc", "cc", "col", "ad", "n"], "count": ["error", "call", "group", "int", "code", "table", "total", "cond", "p", "number", "num", "weight", "empty", "forced", "size", "counter", "time", "index", "cache", "ind", "start", "current", "max", "f", "found", "depth", "list", "data", "length", "match", "check", "type", "len", "key", "base", "e", "order", "cc", "col", "id", "test", "sum", "Count", "n"], "i": ["gi", "ei", "int", "p", "phi", "ai", "oi", "h", "y", "r", "o", "number", "iu", "ti", "z", "si", "index", "x", "ind", "I", "l", "u", "d", "pi", "f", "j", "ac", "xi", "ci", "v", "e", "t", "id", "li", "ii", "n", "bi", "ip"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\n\\nl = a[:]\\nwhile len(l) > 1:\\n    midx = l.index(min(l))\\n    r = []\\n    for i in range(len(l)):\\n        if i != midx:\\n            l[i] = l[i] % l[midx]\\n        if l[i] != 0:\\n            r.append(l[i])\\n    l = r[:]\\nprint(l[0])", "target": "534", "substitutes": {"n": ["ol", "L", "g", "c", "o", "nc", "el", "ne", "z", "sn", "f", "j", "ln", "m", "ns", "no", "ni", "b", "len", "v", "t", "N", "nb"], "a": ["aa", "s", "va", "ans", "al", "p", "c", "aw", "fa", "y", "la", "ab", "au", "array", "ar", "A", "w", "args", "aaa", "f", "ca", "sa", "acl", "ga", "m", "area", "am", "alpha", "b", "ea", "t", "an", "ad"], "l": ["lp", "s", "loc", "ol", "L", "p", "al", "g", "c", "o", "sl", "y", "log", "el", "ml", "lr", "la", "left", "lo", "lu", "lc", "z", "kl", "x", "los", "u", "d", "pl", "ll", "f", "dl", "ln", "j", "m", "rl", "list", "nl", "fl", "hl", "v", "b", "len", "ell", "t", "e", "ls", "le", "il", "li", "ul", "lb"], "midx": ["midy", " midX", "midz", " midy", "indX", "Midx", "indz", "indi", "idX", "idy", "MidX", "midX", "idi", "Midy", "Midz", " midi", "idx", " midz", "idz", "Midi", "indx", "midi"], "r": ["rh", "rr", "k", "mr", "rus", "ur", "p", "arr", "c", "o", "rd", "result", "pr", "hr", "z", "array", "x", "ar", "w", "rb", "u", "d", "f", "right", "sr", "range", "ir", "dr", "rt", "R", "nr", "v", "b", "t", "e", "fr", "ul", "ru", "er", "rs"], "i": ["gi", "min", "ji", "k", "ui", "int", "qi", "p", "phi", "ai", "c", "oi", "y", "h", "o", "ini", "ix", "iu", "lc", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "u", "d", "pi", "j", "f", "io", "xi", "ori", "di", "ri", "ni", "ci", "v", "b", "e", "t", "zi", "id", "li", "ii", "bi"]}}
{"code": "import sys\\na, b, c = map(int, sys.stdin.readline().rstrip().split())\\nprint(a * b // 2)", "target": "637", "substitutes": {"a": ["aa", "va", "p", "na", "qa", "ama", "aw", "y", "la", "ba", "ab", "div", "da", "ce", "x", "pa", "A", "ia", "u", "ca", "f", "sa", " A", "ac", "ga", "m", "area", "aj", "ae", "alpha", "ea", "cf", "abc", "an", "n"], "b": ["s", "aa", "k", "line", "ib", "code", "fb", "p", "bs", "g", "i", "y", "r", "num", "wb", "B", "ab", "x", "w", "sb", "cb", "l", "bb", "d", "rb", "f", "eb", "v", "base", "e", "bc", "count", "cc", "nb", "n"], "c": ["cycle", "code", "p", "y", "o", "nc", "C", "z", "x", "cb", "cm", "l", "d", "ca", "f", "m", "ac", "dc", "ci", "ct", "e", "bc", "count", "cc", "col", "xc", "ad", "n"]}}
{"code": "N = int(input())\\nV = list(map(int, input().split()))\\nC = list(map(int, input().split()))\\n\\ntoku = 0\\ntotal = 0\\n\\nfor i in range(N):\\n  toku = V[i] - C[i]\\n  if toku > 0:\\n    total += toku\\nprint(total)", "target": "74", "substitutes": {"N": ["F", "E", "L", "NO", "NN", "NL", "X", "Y", "Size", "NS", "NE", "K", "CNN", "O", "P", "T", "B", "D", "NK", "Ne", "S", "A", "W", "I", "NT", "Z", "Ns", "R", "M", "J", "NB", "SN", "NA", "n"], "V": ["F", "CV", "E", "L", "H", "Q", "X", "Y", "K", "TV", "O", "P", "T", "D", "S", "A", "Vol", "W", "I", "UV", "VC", "VD", "VM", "U", "NV", "R", "M", "J", "v", "VB", "G", "VL", "VT"], "C": ["F", "E", "L", "Cs", "H", "Q", "X", "CU", "Y", "c", "K", "O", "P", "T", "B", "D", "EC", "GU", "S", "A", "W", "I", "CD", "VC", "Z", "CS", "U", "R", "JC", "M", "CC", "G"], "toku": ["poku", "untoku", "fru", " tku", "taoku", " toko", " toki", "tyogo", "Toka", "tku", "pogo", " tru", "Toko", "untku", "Tku", "taka", "foko", "untyo", " togo", "toki", "tyoki", "Taka", "fortoki", "Tru", "fortaka", "taoka", "pyo", "tru", "fku", "Toku", "untoka", "togo", "tyyo", "tyoku", " tyo", "taku", "fortku", "Toki", "fortoku", "foku", "tyo", "toka", "poki", "tayo", "Tyo", "toko", " taka"], "total": [" TOTAL", "error", "zero", "full", "token", " tot", "c", "otal", "number", "result", "gross", "done", "temp", "size", "basic", "dot", "final", "scale", "cost", "ho", "cu", "now", "mu", "partial", "lost", "mega", "current", "ok", "nt", "max", "ta", " Total", "n", "right", "fee", "di", "no", "Total", "length", "complete", "average", "key", "base", "t", "count", "all", "multi", "step", "percent", "sum", "info"], "i": ["gi", "ji", "k", "ui", "vi", "int", "qi", "mi", "p", "pri", "ai", "c", " I", "oi", "h", "ini", "iu", "ti", "z", "si", "eni", "x", "yi", "ind", "start", "I", "uri", "fi", "u", "d", "pi", "ki", "j", "f", "io", "xi", "di", "ni", "ci", "v", "zi", "id", "li", "ii", "n", "bi", "ip"]}}
{"code": "from sys import stdin, stdout\\n\\n\\ndef solve():\\n    n = int(input())\\n    A = [float(i) for i in stdin.readline().split()]\\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\\n    dp[0][0] = 1\\n    for i in range(1, n+1):\\n        for j in range(0, i+1):\\n            if j == 0: dp[i][j] = (1 - A[i-1]) * dp[i-1][j]\\n            else: dp[i][j] = (A[i-1] * dp[i-1][j-1]) + ((1 - A[i-1]) * dp[i-1][j])\\n    ans = 0\\n    for i in range((n+1)//2, n+1):\\n        ans += dp[-1][i]\\n    return ans\\n\\nprint(solve())\\n\\n", "target": "437", "substitutes": {"n": [" N", "name", "k", "s", "a", "mn", "non", "p", "c", "o", "y", "nc", "num", "en", "h", "net", "un", "ne", "nu", "z", "x", "nan", "sn", "w", "l", "u", "d", "cn", "nt", "max", "nn", "f", "network", "m", "none", "ns", "no", "b", "v", "np", "t", "N", "e", "pn", "dn", "nb", "nor"], "A": ["F", "aa", "AD", "E", "a", "L", "At", "V", "All", "H", "X", "p", "Y", "ai", "AP", "LA", "K", "Na", "AM", "P", "B", "C", "T", "As", "D", "AU", "Ar", "API", "array", "AA", "Alpha", "S", "W", "I", "Ab", "Ma", "Auth", "ga", "Array", "CA", "am", "U", "AF", "Input", "alpha", "M", " a", "b", "N", "G", "Am", "Ang", "an", "ad"], "i": ["s", "ui", "ei", "int", "qi", "phi", "ai", "y", "ix", "im", "si", "x", "yi", "l", "f", "b", "li", "ik", "info", "gi", "ie", "h", "ini", " c", "api", "u", "pi", "jp", "ni", "ci", "ij", "v", "e", "id", "an", "ip", "ami", "p", " I", "oi", "r", "iu", "z", "index", "ind", "start", "it", "d", "io", "m", "isi", "anti", "ji", "k", "a", "g", "c", "o", "inf", "I", "uri", "cli", "xi", "di", "ii", "bi", "ori"], "dp": ["lp", "amp", "a", "pid", "wp", "eps", "p", "dist", "ps", "pb", "fp", "DC", "gap", "dat", "tp", "pm", "cp", "ap", "gp", "api", "P", "dB", "sp", "D", "NP", "mp", "pa", "params", "vp", "dm", "d", "pi", "DP", "dl", "dt", "pp", "deb", "port", "dr", "dc", "address", "drop", "df", "data", "db", "adr", "wd", "alpha", "b", "dim", "np", "pair", "yp", "py", "ds", "hp", "direction", "ip"], "_": ["int", "non", "p", "o", "ix", "num", " time", "x", "I", "l", "out", "self", " self", "all", "block", "ip"], "j": ["gi", "ji", "k", "ui", " bi", "a", "ie", "ib", "ja", "qi", "p", "ai", "g", "err", "jo", " I", "c", "y", "h", "jj", "ix", " ip", "num", "o", " k", "iu", "jit", "jl", "z", "si", "ch", "index", "x", "ind", "I", "adj", "obj", "l", "u", "uj", " J", "q", "js", "f", "jp", "io", "m", "jc", "xi", "note", "oj", "aj", "ni", "ci", "ij", "J", "bj", "b", " ii", "v", "e", "key", "kj", "li", "ii", " l", " jo", "ip"], "ans": ["ss", "s", "a", "ents", "cas", "lan", "span", "nas", "amps", "eps", "ras", "atan", "na", "ps", "ai", "ends", "ats", "ams", "anas", "AN", "ads", "ANS", "ks", "aces", "ann", "anon", "anc", "ays", "ana", "es", "can", "outs", "nan", "x", "An", "als", "args", "aned", "lines", "ons", "aus", "ens", "sk", "leans", "ants", "ns", "os", "ings", "ls", "ds", "an", "ins"]}}
{"code": "def bisect_right_rev(lst, x):\\n    if lst[0] < x:\\n        return 0\\n    if x <= lst[-1]:\\n        return len(lst)\\n\\n    a = 0\\n    b = len(lst) - 1\\n\\n    while abs(b - a) > 1:\\n        c = (a + b) // 2\\n\\n        if lst[c] < x:\\n            b = c\\n        else:\\n            a = c\\n    \\n    return b\\n\\nN = int(input())\\nA = [int(input()) for _ in range(N)]\\nseq = []\\n\\nfor i in range(N):\\n    if len(seq) == 0:\\n        seq.append(A[i])\\n    else:\\n        ind = bisect_right_rev(seq, A[i])\\n        if ind == len(seq):\\n            seq.append(A[i])\\n        else:\\n            seq[ind] = A[i]\\n\\nprint(len(seq))", "target": "245", "substitutes": {"lst": ["llsts", "alstr", "Lbl", "Lest", "llST", "dlbl", "llest", "llbl", "alsts", " lset", " lsts", " lsc", " lstr", "dlST", " list", "lsc", "alsc", "lstr", " lbl", "LST", "alest", " lST", "llset", "lST", "llsc", "Lst", "dlst", "Lset", "llst", "alset", "llstr", "lest", "list", "List", "alst", "lbl", "lsts", "lset", "Lstr", "llist", "dlstr"], "x": ["int", "code", "rex", "X", "xf", "p", "tx", "na", "xs", "g", "xx", "exp", "y", "rx", "h", "ix", "xa", "z", "xt", "ex", "xxx", "index", "w", "wx", "u", "max", "q", "f", "ax", "m", "xi", "ux", "input", "check", "xe", "v", "xp", "e", "t", "xes", "xy", "xc", "test", "n", "xxxxxxxx"], "a": ["aa", "s", "va", "p", "ai", "aw", "fa", "y", "r", "ba", "ab", "au", "da", "pa", "af", "w", "ak", "l", "u", "d", "aaa", "ca", "f", "sa", "ac", "ga", "area", "am", "aj", "ae", "alpha", "e", "an", "ad", "n"], "b": ["aa", "k", "s", "be", "p", "bs", "g", "y", "h", "r", "o", "B", "ba", "ab", "z", "w", "sb", "cb", "l", "bb", "d", "rb", "u", "abb", "f", "j", "m", "ac", "br", "ae", "db", "length", "v", "base", "e", "bc", "abc", "nb", "lb", "ad", "n"], "c": ["s", "k", "cur", "code", "p", "g", "y", "o", "nc", "r", "C", "lc", "z", "ce", "unc", "cy", "cu", "w", "con", "cm", "l", "u", "d", "cn", "f", "ca", "cs", "ac", "ci", "v", "cf", "e", "bc", "cr", "cc", "ad", "n"], "N": ["F", "Length", "E", "L", "V", "Q", "X", "Y", "Size", "Num", " I", " B", "K", "number", "Na", "O", "P", "B", "C", "T", "D", "Len", " C", "Ne", "S", "W", "I", "No", "Z", "Ns", "R", "M", "J", " n", "G", " Ne", " NI", "Count", "n"], "A": ["E", "Ca", "L", "At", "New", "V", "Any", "All", "H", "Az", "AS", "X", "Q", "AP", "Adam", "LA", "Ay", "AW", "P", "B", "C", "T", "AC", "As", "Ar", "Map", "API", "array", "AA", "Args", "If", "Alpha", "S", "I", "Ma", "Sequ", "Data", "Auth", "Code", "Array", "CA", "U", "AF", "alpha", "M", "Ast", "G", "The", "NA", "Ac", "An", "Answer", "App"], "_": [" block", " id", " time", "f", " code", "len", " col"], "seq": ["loc", "sq", "struct", "align", "code", "int", "cas", "vec", "feed", "p", "na", "qa", "acc", "result", "pos", "iq", "buf", "section", "iter", "slice", "la", "ase", "config", "uc", " sequence", "array", "rev", "comp", "ah", "inc", "flat", "ctx", "req", "sec", "q", "Sequ", "f", "sci", "sequence", "input", "shape", "list", "data", "length", "batch", "fast", "frame", "len", "sequ", "zip", "sem", "order", "id", "sub", "val", "cl", "next", "test", "block", "ref", "n"], "i": ["gi", "s", "ui", "ie", "ib", "int", "qi", "p", "ai", " I", " id", "o", "ix", " ip", "ini", "iu", " k", "lc", "ti", "z", "si", "index", " il", "I", "uri", "l", "it", "u", "pi", "q", "j", "f", "io", " j", "xi", "ri", "di", "ci", "type", "v", " ii", "e", "id", "li", "ii", "n", "bi", "ip"], "ind": ["loc", "end", "ie", "int", "qi", "nd", "init", "err", "append", "ini", "ix", "pos", "iq", "rib", "inf", "sign", "ord", "ann", "z", "index", "Ind", "start", "inc", "adj", "d", "nn", "j", "ignore", "pp", "inst", "old", "set", "di", "length", "ci", "find", "len", "ld", "inn", "order", "count", "id", "IND", "ii", "sci", "mid", "ad", "info"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\n\\n\\nans = 0\\nfor i in range(N):\\n    while True:\\n        if A[i]%2 == 0:\\n            ans += 1\\n            A[i] = A[i] // 2\\n        else:\\n            break\\n\\nprint(ans)", "target": "121", "substitutes": {"N": ["F", "E", "Number", "L", "NO", "V", "Max", "X", "Y", "Size", "Num", "NS", "K", "Na", "AN", "CNN", "O", "P", "B", "C", "T", "D", "Len", "NH", "Ne", "S", "I", "No", "NT", "OS", "Z", "Ns", "R", "M", "G", "NA", "n"], "A": ["F", "AD", "GA", "a", "L", "At", "All", "AS", "AI", "X", "Y", "MA", "AP", "LA", "AR", "AN", "AM", "AB", "O", "P", "B", "T", "C", "As", "D", "Ar", "mA", "API", "Args", "AA", "AC", "array", "Alpha", "S", "I", "Average", "Array", "CA", "U", "AF", "Input", "alpha", "M", "Wa", "G", "KA", "NA", "An"], "ans": ["ano", "s", "a", "ents", "lan", "span", "nas", "ends", "amps", "eps", "atan", "na", "ai", "ats", "aning", "Na", "anas", "AN", "ANS", "anes", "ks", "mean", "aces", "ane", "ann", "anon", "ani", "annels", "annot", "ana", "errors", "can", "nan", "ars", "aned", "nn", "ons", "aus", "leans", "sk", "ens", "ants", "ns", "os", "ls", "ANN", "ds", "ops", "an", "ins"], "i": ["gi", "k", "vi", "ui", "end", "a", "int", "qi", "mi", "p", "phi", "ai", "c", " I", "h", "r", "y", "ix", "o", "iu", "z", "eni", "si", "index", "x", "yi", "ind", "start", "I", "uri", "l", "u", "d", "pi", "j", "f", "io", "m", "xi", "di", "ci", "b", "v", "e", "t", "id", "li", "ii", "n", "bi", "ti"]}}
{"code": "n = int(input())\\n\\nc = n//2\\nif(n%2 == 0):c-=1\\nprint(c)\\n", "target": "522", "substitutes": {"n": ["s", "k", "p", "g", "i", "o", "number", "nc", "r", "num", "y", "C", "ne", "z", "x", "node", "l", "cn", "d", "nt", "nn", "f", "j", "m", "ns", "b", "v", "t", "N", "e", "count", "nb"], "c": ["cur", "k", "cycle", "const", "code", "p", "i", "y", "r", "nc", "h", "num", "number", "C", "size", "lc", "z", "fc", "ce", "x", "cy", "con", "l", "u", "cn", "d", "max", "f", "rc", "cs", "m", "dc", "co", "cd", "ci", "ct", "b", "v", "t", "e", "count", "cc", "cr", "cell", "col", "pc", "abc"]}}
{"code": "N,K=[int(s) for s in input().split()]\\nA=[int(s) for s in input().split()]\\nF=[int(s) for s in input().split()]\\nA.sort()\\nF.sort(reverse=1)\\n\\n\\ndef success(x):\\n  suc_sum=0\\n  for i in range(N):\\n    a=x//F[i]\\n    if A[i]>a:\\n      suc_sum+=A[i]-a\\n  if suc_sum<=K:\\n    return True\\n  else:\\n    return False\\n\\ndef bisearch():\\n  bi_max=10**12\\n  bi_a=0\\n  bi_b=bi_max\\n  while bi_b-bi_a>1:\\n    c=(bi_a+bi_b)//2\\n    if success(c):\\n      bi_a,bi_b=[bi_a,c]\\n    else:\\n      bi_a,bi_b=[c,bi_b]\\n  return [bi_a,bi_b]\\n\\na,b=bisearch()\\nif success(a):\\n  print(a)\\nelse:\\n  print(b)", "target": "633", "substitutes": {"N": ["E", "L", "V", "H", "Q", "X", "Y", "Num", "NS", "NE", "NI", "Na", "O", "P", "T", "C", "B", "D", "Ne", "S", "W", "I", "NT", "Z", "Ns", "U", "R", "M", "J", "NB", " n", "G", "NA", "n"], "K": ["k", "E", "L", "V", "Max", "H", "Q", "X", "Y", "NE", "KE", "O", "P", "T", "C", "B", "SK", "D", "KS", "S", "W", "KC", "I", "HK", "Z", "KR", "U", "R", "J", "M", "G", "KA", "CH"], "s": ["ss", "sq", "spec", "south", "strings", "uss", "ans", "p", "ps", "stat", "g", "sym", "r", "num", "sf", "inf", "sign", "sp", "si", "es", "search", "S", "w", "sb", "l", "u", "less", "ses", "d", "sg", "sec", "sin", "f", "ssl", "m", "sync", "small", "self", "address", "iss", "ws", "seconds", "input", "single", "su", "os", "us", "gs", "string", "signed", "sing", "e", "t", "ls", "multi", "se", "enc", "n", "ins"], "A": ["GA", "L", "At", "All", "Az", "AS", "X", "MA", "Y", "AP", "IA", "LA", "TA", "FA", "AM", "AW", "P", "B", "SA", "mA", "As", "AC", "Ar", "C", "API", "AA", "Alpha", "S", "W", "I", "Ab", "Average", "Array", "CA", "U", "AF", "alpha", "KA", "Am", "HA", "The", "Ac", "App"], "F": ["E", "L", "V", "ELF", "IF", "H", "Q", "X", "Y", "FE", "FF", "FB", "O", "P", "B", "C", "T", "D", "S", "W", "CF", "I", "FM", "We", "GF", "f", "DF", "Z", "OF", "Fs", "WF", "U", "FD", "AF", "M", "J", "FH", "MF", "G", "EF", "PF"], "x": ["int", "X", "p", "na", "xs", "g", "xx", "y", "rx", "h", "ix", "z", "array", "ex", "index", "search", "xxx", "w", "u", "d", "f", "ax", "xi", "input", "data", "foo", "v", "e", "xes", "xc", "xa", "n"], "suc_sum": ["sUC_num", "suc_total", "sUC_size", "suc_mean", "sauc_num", "sucscount", "sauc_count", "sauc_mean", "suc1len", "sauc_sum", "suc_size", "suc_num", "suc2count", "suc1num", "suc_count", "suc_len", "suc2num", "sucipnum", "suc1size", "suciplen", "sucipsize", "sucipsum", "sUC_sum", "sucsnum", "suc2total", "suc2sum", "suc1sum", "sauc_total", "sUC_len", "sucsmean", "sucssum"], "i": ["gi", "ji", "k", "ui", "ie", "int", "qi", "mi", "p", "ai", " I", "h", "y", "ix", "ini", "pos", "iu", "sp", "ti", "z", "si", "index", "yi", "ind", "start", "I", "l", "u", "d", "pi", "j", "f", "m", "xi", "ci", "v", "e", "t", "id", "ii", "n", "bi", "ip"], "a": ["aa", "wa", "va", "another", "at", "ma", "p", "na", "ai", "aw", "fa", "ama", "y", "o", "api", "la", "ba", "ab", "z", "array", "au", "ana", "da", "ce", "pa", "af", "w", "action", "ia", "ak", "l", "u", "aaa", "f", "j", "sa", "ca", "ac", "ga", "asa", "area", "aux", "am", "ae", "alpha", "e", "ha", "za", "an", "ad", "n"], "bi_max": ["bi__max", "b__base", "si_3", "bi__sum", "bi2b", "bi_p", "bi_sum", "bi__p", "b__p", "b__sum", "b_sum", "bi2min", "b__max", "bi_min", "si2max", "si_min", "b_p", "bi23", "bi_base", "si_b", "si2min", "si2b", "b_max", "bi__base", "bi2max", "si_max", "si23", "bi_3", "b_base"], "bi_a": ["ai_as", "bi_an", "bi__c", "bi___at", "si_au", "bi___b", "abi_u", " bi_c", "abi_sa", "gi_b", "si_a", "gi_a", "ci_b", "ai_a", "bi_ae", "ci_an", "bi__as", "bi_au", "si_u", "si_i", "bi_as", "si_s", "bi__a", "gi_c", "bi_s", "bi_i", "bi_at", "abi_a", "abi_b", "ci_as", "bi__b", "bi___c", "ai_b", " bi_at", "bi_u", "ai_ae", "bi_c", "bi_sa", "gi_as", "si_b", "ci_a", "bi___a"], "bi_b": ["bi_bs", "bi0bs", "bi___s", "bi00r", "bi_wb", "fi_bs", "biqab", "bi_r", " bi_bi", "bi0b", "ali_b", "bi___b", "bi___h", "bi25B", "bi_base", "bi_aa", "ali_aa", "Bi___b", " bi_c", "biqa", "biqb", "Bi_bs", "bi67bs", "bi_h", "bi25bi", "bi_B", "bi___bs", "bi67wb", "bi___aa", "bi__ab", "bi_bi", "ali_h", " bi_ab", "Bi___wb", "bi0i", "bi__a", " bi_d", " bi_B", "ali_s", "bi0B", "fi_B", "bi_d", "bi_s", "bi_i", " bi_base", "bi25b", "fi_b", "bi_ab", "Bi_wb", "bi00b", "fi_i", "bi__b", "Bi___bs", "bi00ab", "bi__r", "bi___wb", "Bi_b", " bi_r", "bi_c", "bi00a", "bi67b", "bi25max", "biqmax"], "c": ["k", "code", "p", "ic", "g", "y", "nc", "ec", "cp", "C", "lc", "uc", "ch", "ce", "unc", "cy", "cu", "con", "cm", "l", "cn", "d", "u", "ca", "f", "cs", "ac", "cat", "dc", "co", "ci", "ct", "v", "cf", "e", "bc", "count", "cc", "pc", "xc", "n"], "b": ["k", "be", "other", "ib", "fb", "p", "bs", "g", "y", "o", "B", "ab", "two", "w", "sb", "cb", "l", "bb", "d", "u", "abb", "f", "j", "m", "db", "v", "e", "bc", "nb", "lb", "bi", "n"]}}
{"code": "N = int(input())\\na = list(map(int, input().split()))\\n\\nmaxa = max(a)\\nmina = min(a)\\nadd = None\\nif abs(maxa) > abs(mina):\\n    add = maxa\\nelse:\\n    add = mina\\n\\nindex = a.index(add)\\nans = [(index, i) for i in range(N) if i != index]\\nif add > 0:\\n    ans += [(i, i+1) for i in range(N-1)]\\nelse:\\n    ans += [(i, i-1) for i in range(N-1, 0, -1)]\\n\\nans = list(map(lambda x: (x[0]+1, x[1]+1), ans))\\nprint(len(ans))\\nprint('\\n'.join(map(lambda x: '%d %d' % x, ans)))\\n", "target": "412", "substitutes": {"N": ["F", "MN", "Network", "L", "V", "NN", "Max", "H", "X", "Y", "Size", "Num", "NS", "NE", "K", "number", "Na", "CNN", "O", "P", "T", "B", "C", "D", "size", "Len", "Ne", "S", "A", "W", "I", "No", "NT", "Node", "Ni", "Z", "Ns", "ns", "R", "M", "Multi", "G", "Index", "NA", "Count", "n"], "a": ["aa", "aff", "s", "wa", "auto", "sta", "ao", "va", "missing", "active", "p", "na", "ai", "c", "fa", "la", "ba", "ab", "au", "array", "ana", "x", "A", "af", "ata", "l", "d", "aaa", "sa", "asa", "ac", "ga", "area", "aux", "am", "input", "ae", "alpha", "b", "ea", "e", "all", "an", "ad", "n"], "maxa": ["Maxb", "axA", "maxb", "MaxA", "axi", "minA", "axalpha", "postA", "mini", "maxalpha", " maxA", "postan", "minb", "maxA", " maxalpha", "minan", "maxan", "Maxa", "maxi", " maxi", "minalpha", " maxb", "axa", "axan", "posta"], "mina": ["Mina", "onlyA", "minas", "maxadd", " minb", "smallb", "minadd", " minas", "maxas", "minA", "smalli", "mini", "Minas", "onlyadd", "minb", "maxA", "smallA", "smalla", "onlya", " minA", "onlyi", " minadd", "maxi", "MinA", " mini", "maxb"], "add": ["new", "ack", "end", "dd", "int", "fix", "init", "nd", "plus", "append", "extra", "ix", "en", "pos", "push", "sign", "ani", "div", "edit", "remove", "diff", "x", "inc", "start", "ind", "show", "do", "apply", "added", "d", "ace", "nn", "ac", "back", "adding", "pad", "addr", "address", "find", "ress", "Add", "ADD", "mod", "include", "id", "mix", "skip", "next", "an", "update", "ad", "rad"], "index": ["new", "min", "loc", "end", "value", "int", "fix", "span", "default", "ai", "plus", "append", "unique", "number", "insert", "num", "ini", "axis", "pos", "ix", "slice", "weight", " Index", "array", "si", "search", "diff", "x", "inc", "ind", "start", "I", "u", "d", "max", "f", "j", "position", "sort", "old", "rank", "input", "list", "data", "length", "alpha", "find", "match", "type", "key", "exist", "e", "count", "all", "Index", "id", "multi", "li", "ii", "where", "column", "update", "n"], "ans": ["ss", "s", "aid", "ents", "cas", "offs", "span", "ras", "amps", "eps", "ams", "atan", "na", "nas", "ai", "anges", "ats", "xs", "ions", "aning", "results", "pos", "AN", "ads", "anas", "ANS", "aos", "ks", "anes", "aces", "names", "ann", "anon", "ani", "anc", "vs", "ays", "es", "x", "can", "nan", "ands", "ana", "ars", "aned", "lines", "ations", "parts", "ons", "works", "ens", "sk", "leans", "ants", "ns", "man", "list", "os", "acts", "ls", "olds", "plan", "ds", "ians", "lan", "part", "an", "ins"], "i": ["s", "k", "ui", "ie", "int", "chi", "qi", "p", "phi", "ai", "c", "oi", "o", "y", "ix", "ini", "axis", "iu", "ti", "z", "si", "x", "yi", "ind", "start", "I", "uri", "l", "u", "d", "pi", "j", "f", "io", "xi", "ori", "di", "ni", "ip", "ci", "e", "info", "zi", "id", "Index", "li", "ii", "part", "bi", "n"]}}
{"code": "from collections import defaultdict\\ndef main():\\n    n = int(input())\\n    s =defaultdict(lambda:0)\\n    for i in range(n):\\n        s[input()] += 1\\n    max_s = max(s.values())\\n    for key, value in sorted(s.items()):\\n        if value == max_s:\\n            print(key)\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "750", "substitutes": {"n": ["min", "k", "span", "p", "c", "o", "number", "nc", "num", "y", "size", "nu", "ne", "z", "x", "nan", "sn", "w", "conn", "l", "u", "pi", "d", "max", "f", "j", "m", "ns", "no", "ni", "len", "b", "np", "t", "N", "e", "count", "nb", "nor"], "s": ["ss", "sq", "a", "spec", "south", "service", "p", "ps", "g", "c", "sym", "sets", "o", "storage", "si", "es", "S", "sb", "tests", "args", "l", "services", "ses", "d", "items", "u", "sg", "f", "sa", "ssl", "m", "sync", "ns", "su", "os", "gs", "ts", "v", "b", "e", "ls", "t", "keys", "ds", "ops", "sv", "rs"], "i": ["gi", "k", "ie", "p", " I", "y", "h", "ix", "pos", "iu", "ti", "z", "si", "index", "x", "ind", "I", "it", "u", "d", "f", "j", " ii", "e", "id", "li", "ip"], "input": ["error", "call", "raw", "table", "python", "sleep", "request", "argument", "visible", "element", "condition", "target", "temp", "background", "config", "hidden", "array", "index", "valid", "version", "exec", "current", "eval", "model", "output", "parent", "ref", "data", "Input", "select", "filter", "submit", "param", "form", "active"], "max_s": ["alwaysIdn", "maxIdS", "always_s", "alwaysIdd", "alwaysIds", "always_S", "maxIdd", "max_n", "Max_f", "max_f", "maxJi", "maxJs", "maxIdn", "always_d", "max_S", "max_d", "alwaysIdS", "maxJe", "Max_s", "max_i", "Max_i", "Max_e", "max_e", "maxIds", "always_n", "maxJf"], "key": ["name", "k", "field", "text", "a", "int", "str", "element", "y", "case", "item", "section", "index", "x", "search", "ind", "start", "KEY", "ee", "q", "row", "shift", "j", "f", "option", "entry", "data", "ip", "type", "v", "string", "pair", "order", "keys", "id", "step", "val", "part", "Key"], "value": ["min", "name", "k", "a", "default", "element", "number", "num", "item", "content", "values", "weight", "size", "index", "valid", "w", "version", "child", "d", "max", "object", "m", "function", "option", "null", "entry", "Value", "data", "type", "v", "flow", "val", "range", "VALUE", "total"]}}
{"code": "def insertionSort(A, n, g):\\n\tglobal cnt\\n\\n\tfor i in range(g, n):\\n\t\tv = A[i]\\n\t\tj = i - g\\n\t\twhile j >= 0 and A[j] > v:\\n\t\t\tA[j + g] = A[j]\\n\t\t\tj = j - g\\n\t\t\tcnt = cnt + 1\\n\t\tA[j + g] = v\\n\\ndef shellSort(A, n):\\n\tglobal m\\n\tglobal G\\n\\n\th = 1\\n\twhile (True):\\n\t\tif h > n:\\n\t\t\tbreak\\n\t\tG.append(h)\\n\t\th = 3 * h + 1\\n\\n\tm = len(G)\\n\tG.reverse()\\n\\n\tfor i in range(m):\\n\t\tinsertionSort(A, n, G[i])\\n\\nif __name__ == '__main__':\\n\tN = int(input())\\n\tR = [int(input()) for i in range(N)]\\n\\n\tcnt = 0\\n\tG = []\\n\tm = 0\\n\\n\tshellSort(R, N)\\n\\n\tprint(m)\\n\tprint(\" \".join(map(str, G)))\\n\tprint(cnt)\\n\tfor i in range(N):\\n\t\tprint(R[i])", "target": "622", "substitutes": {"A": ["F", "GA", "E", "a", "L", "At", "V", "All", "H", "Q", "X", "MA", "Y", "p", "AP", "LA", "K", "AM", "Bu", "P", "B", "C", "T", "D", "As", "Ar", "AU", "API", "mA", "AA", "au", "Alpha", "Gen", "S", "W", "Go", "I", "Ma", "Array", "CA", "U", "M", "J", "Am", "NA", "An", "App"], "n": ["name", "k", "s", "a", "p", "c", "r", "o", "en", "y", "nc", "num", "C", "ne", "z", "x", "nan", "sn", "w", "l", "u", "d", "nt", "f", "Ns", "ns", "M", "b", "t", "e", "all", "nb"], "g": ["gi", "s", "k", "group", "a", "gy", "p", "ge", "go", "c", "arg", "gh", "y", "r", "num", "gam", "gu", "cfg", "ig", "gp", "z", "x", "gn", "w", "l", "u", "d", "sg", "q", "gg", "f", "mg", "ga", "gs", "b", "gb", "eg", "t", "e", "bg", "gm", "gz", "vg"], "i": ["gi", "ji", "ih", "k", "ui", "a", "ie", "int", "ei", "qi", "p", "ai", "c", "y", "o", "r", "iu", "ti", "z", "mini", "si", "yi", "x", "ind", "I", "l", "u", "pi", "d", "io", "f", "xi", "di", "ri", "hi", "ci", "ip", "J", "ni", "b", "e", "iw", "id", "li", "ii", "bi"], "v": ["s", "k", "vi", "a", "ve", "uv", "V", "p", "c", "r", "y", "gu", "lv", "vs", "z", "x", "nv", "w", "version", "l", "u", "d", "f", "vol", "vv", "U", "J", "b", "e", "sv", "GV", "ev", "vd"], "j": ["ji", "s", "k", " p", "a", "ja", "p", " je", "c", "jo", "r", "y", "jj", "o", "jl", "z", "je", "si", "jan", "jet", "x", "w", "l", "u", "d", "uj", " J", "q", "js", "jp", "f", "aj", "hi", "J", "b", " ii", "key", "t", "e", "li", " index", " l", " b"], "cnt": ["cNT", " cpt", "ccnt", " ccount", "cpt", "CNT", "lcpt", " crt", "Cpt", " cNT", "ncnt", " cct", "cct", "ccount", "crt", "connd", "ncnd", "connt", "pnd", "Cnt", "lcrt", " cno", "ccrt", "ccnd", "ncct", "Cno", "prt", "concount", " cnd", "cccount", "lcnd", "ncrt", " count", "cno", "lcnt", "lcct", "pnt", "conrt", "lcno", "count", "Cct", "lcNT", "pct", "cnd", "ncNT", "Cnd", "Count", "lcount"], "h": ["rh", "hs", "s", "hw", "k", "end", "sh", "dh", "H", "p", "c", "gh", "y", "ht", "o", "r", "hr", "z", "ch", "x", "ho", "ah", "w", "hh", "l", "bh", "u", "d", "pi", "q", "f", "hd", "hi", "b", "e", "uh", "count", "t", "hm"], "m": ["s", "group", " M", "mr", "mn", "V", "L", "a", "H", "mi", "p", "ms", "c", "r", "y", "o", "num", "im", "md", "z", "x", "dm", "mu", "w", "cm", "l", "u", "d", "f", "bm", "man", "M", "b", "mod", "e", "all", "mm", "gm", "hm", "mc", "range"], "N": ["F", "L", "V", "H", "Q", "X", "Y", "Size", "NS", "K", "Na", "NM", "O", "P", "T", "C", "B", "D", "Ne", "S", "W", "I", "NT", "NG", "Z", "Ns", "U", "M", "J"], "R": ["F", "E", "RG", "Rs", "L", "V", "H", "Q", "X", "Y", "SR", "MR", "K", "r", "RR", "RO", "RE", "P", "T", "C", "B", "D", "S", "W", "Res", "RS", "I", "GR", "Rh", "RN", "Right", "DR", "BR", "RP", "U", "M", "J", "RA", "RM"], "G": ["F", "GM", "GA", "E", "RG", "L", "GE", "IG", "V", "H", "Q", "X", "Y", "Gs", "K", "Ge", "GW", "O", "P", "B", "T", "C", "D", "GU", "S", "GP", "W", "Go", "GC", "I", "GR", "GH", "GF", "Z", "CG", "GG", "U", "GB", "J", "M", "GS", "MG", "GN", "LG", "Gu", "GV", "Group"]}}
{"code": "R=int(input())\\nprint(\"A\"+[\"GR\"[R<2800],\"B\"][R<1200]+\"C\")", "target": "738", "substitutes": {"R": ["F", "E", "RG", "Rs", "L", "NR", "V", "H", "Q", "X", "Y", "SR", " r", "r", "RR", "Range", "O", "RO", "P", "T", "C", "B", "D", "Rank", "S", "A", "W", "Red", "Position", "Right", "GR", "Row", "Z", "RP", "U", "M", "ER", "J", "N", "G", "RA", "CR", "RH", "RM"]}}
{"code": "def gcd(a, b):\\n    if b == 0: return a\\n    return gcd(b, a % b)\\n\\n\\nalllist = list(map(int, input().split()))\\nalllist = sorted(alllist, reverse=True)\\n\\n\\nresult = gcd(alllist[0], alllist[1])\\nprint(result)\\n\\n", "target": "1", "substitutes": {"a": ["aa", "wa", "va", "p", "na", "qa", "g", "c", "aw", "i", "fa", "r", "la", "ba", "mA", "ab", "au", "da", "x", "pa", "A", "w", "l", "d", "aaa", "f", "sa", "ca", "ac", "m", "ga", " A", "area", "am", "ae", "alpha", "ea", "e", "an", "ad", "n"], "b": ["s", "be", "aa", "ib", "fb", "p", "bs", "g", "c", "i", "y", "number", "r", "wb", "beta", "B", "ba", "ab", "x", "A", "w", "sb", "l", "bb", "d", "rb", "u", "abb", "f", "eb", "ga", "null", "xb", "length", "binary", "v", "base", "e", "count", "abc", "nb", "lb", "bi", "offset", "n"], "alllist": ["alcllist", "almlist", "alldind", "calldest", "alplest", "albllist", "callllist", "alblist", "alflists", "alllind", "calclest", " alllest", "calldst", "almlind", "almlst", "alldest", " alllft", "alldst", "alblest", "alllst", "alblft", "alcelist", "alldist", "alblisted", "calldists", "alclists", " alllift", "alllists", "alflift", " alblist", "alcelIST", "calllist", "alplind", "allfift", "alldlist", "alfllist", "alblift", "alflest", " alllIST", "calcllist", "alplist", "calllists", "alflisted", " alblft", "alldists", "calllind", "calllest", "calclist", "almllist", "alclest", "calclists", "alllIST", "alclIST", "alclft", "calldlist", "alcelft", "allist", " alblisted", "calldist", "calldind", "allists", "allfest", "alllift", "alllft", "allfist", "alclist", "alplists", "alcelest", " alblift", " alllisted", "alllisted", "alllest", "allest", " alblest", "alplst", "allfisted", "alblists", "alflist", " alblIST", "alblIST", "allllist", "alpllist", "calllst"], "result": ["error", "end", "code", "method", "arr", "ge", "acc", "success", "err", "r", "comment", "results", "ver", "sign", "coll", "final", "search", "response", "diff", "Result", "comp", "math", "url", "valid", "cache", "obj", "score", "report", "angle", "status", "output", "entry", "list", "data", "db", "match", "func", "feature", "grade", "ret", "exit", "test", "res"]}}
{"code": "import sys\\nwhile True:\\n    s = input()\\n    if s == '-':\\n        sys.exit()\\n    m = int(input())\\n    for _ in range(m):\\n        h = int(input())\\n        s = s[h:] + s[:h]\\n    print(s)\\n", "target": "715", "substitutes": {"s": ["ss", "hs", "a", "strings", "sh", "qs", "ins", "words", "p", "ps", "states", "g", "c", "sys", "xs", "sym", "sets", "y", "o", "sl", "r", "sf", "si", "es", "x", "S", "w", "sb", "args", "l", "parts", "u", "d", "ses", "fts", "sg", "services", "f", "sa", "ssl", "ns", "ws", "input", "data", "os", "gs", "b", "v", "string", "ts", "t", "e", "ls", "ds", "sv", "rs", "n"], "m": ["k", "p", "ms", "g", "c", "i", "y", "o", "r", "num", "ym", "z", "dm", "mu", "w", "cm", "l", "machine", "u", "d", "f", "sm", "M", "v", "b", "mod", "e", "t", "more", "mm", "gm", "hm", "n"], "_": [" block", "g", " I", " ip", " time", " __", " k", " q", " loop"], "h": ["rh", "hs", "ih", "k", "end", "sh", "H", "p", "g", "c", "err", "oh", "y", "o", "r", "ht", "head", "ph", "hr", "z", "x", "w", "l", "bh", "u", "d", "q", "f", "j", "hd", "hi", "v", "b", "e", "t", "ha", "hm", "hp", "n"]}}
{"code": "n,m=map(int,input().split())\\nx=list(map(int, input().split()))\\n\\nif n >= m:\\n  print('0')\\n  exit(0)\\n\\nx_sorted = sorted(x)\\ndx = [abs(x_sorted[i+1]-x_sorted[i]) for i in range(m-1)]\\ndx_sorted = sorted(dx,reverse=True)\\n\\nresult = sum(dx_sorted)\\nfor i in range(n-1):\\n  result -= dx_sorted[i]\\nprint(result)", "target": "9", "substitutes": {"n": ["name", "k", "s", "mn", "p", "nd", "g", "c", "o", "y", "nc", "en", "num", "r", "net", "un", "number", "h", "ne", "z", "sn", "w", "l", "u", "d", "cn", "nn", "nt", "q", "f", "j", "ns", "no", "M", "b", "v", "e", "N", "nb", "an"], "m": ["km", "k", "mn", "me", "mi", "p", "ms", "g", "c", "nm", "y", "o", "r", "h", "num", "pm", "md", "z", "dm", "w", "cm", "l", "u", "d", "q", "j", "f", "M", "b", "v", "e", "N", "t", "mm", "hm", "mc"], "x": ["s", "sex", "X", "p", "xf", "xs", "c", "xx", "y", "ix", "z", "array", "ex", "index", "xxx", "w", "cross", "l", "wx", "d", "f", "ax", "xi", "list", "data", "xe", "v", "xp", "foo", "e", "t", "xy", "xc", "test"], "x_sorted": ["x_Sorting", "x_unsorted", "x_Soved", "x_Sorter", "x_psorting", "x_Sorts", "x_psorted", "x_insorted", "x_insoved", "x_sorter", "x_assort", "x_Sorted", "x_ported", "x_insort", "x_porter", "x_porting", "x_soved", "x_assorting", "x_unsorting", "x_setsort", "x_setsoved", "x_sort", "x_setsorter", "x_assorts", "x_setsorted", "x_port", "x_psorts", "x_sorting", "x_sorts", "x_assorted", "x_psort", "x_insorter", "x_Sort", "x_unsort", "x_unsorter"], "dx": ["loc", "sq", "cmp", "dy", "DX", "X", "p", "dist", "distance", "xs", "xx", "fx", "y", "ix", "split", "spread", "scale", "ex", "diff", "cross", "wx", "patch", "d", "xd", "ax", "cs", "du", "dq", "xi", "su", "data", "match", "xp", "foo", "np", "dim", "xy", "ds", "feat", "sum"], "i": ["gi", "ji", "ih", "k", "ui", "a", "ami", "int", "ei", "ie", "qi", "p", "phi", "ai", "c", "oi", "o", "r", "ini", "iq", "iu", "ti", "eni", "si", "index", "yi", "ind", "start", "uli", "I", "uri", "l", "u", "pi", "d", "j", "f", "io", "xi", "di", "ri", "ni", "ci", "ip", "v", "b", "e", "zi", "id", "li", "ii", "bi"], "dx_sorted": ["dx_Sored", "dx_pired", "dx_sorting", "dx_insorting", "dx_asorter", "dx_sesort", "dx_insorted", "dx_sored", "dx_sesorted", "dx_asort", "dx_sitesort", "dx_ported", "dx_sesordered", "dx_sitesorting", "dx_satted", "dx_sort", "dx_sorter", "dx_sitesired", "dx_patted", "dx_Sorted", "dx_asorted", "dx_insatted", "dx_insired", "dx_sordered", "dx_sesored", "dx_sired", "dx_porting", "dx_sitesorted", "dx_insorter", "dx_Sordered", "dx_Sort", "dx_porter", "dx_port", "dx_insort", "dx_asatted"], "result": ["error", "value", "code", "effect", "dist", "distance", "ge", "success", "err", "acc", "goal", "number", "r", "results", "knowledge", "weight", "attr", "done", "desc", "div", "final", "search", "diff", "response", "Result", "current", "score", "page", "status", "term", "xi", "rank", "df", "data", "average", "match", "length", "alpha", "db", "feature", "grade", "range", "test", "sum", "direction", "res"]}}
{"code": "\"\"\"\\n\u56db\u9685\u306b\u4eee\u60f3\u306e\u539f\u70b9\u3092\u3064\u304f\u308a\u3001\u5404\u5ea7\u6a19\u304b\u3089\u305d\u306e\u539f\u70b9\u3078\u306e\u30de\u30f3\u30cf\u30c3\u30bf\u30f3\u8ddd\u96e2\u3092\u8a08\u6e2c\u3059\u308b\u3002\\n\"\"\"\\n\\nN = int(input())\\nXY = [list(map(int,input().split())) for _ in range(N)]\\n\\ndef measure(originX,originY):\\n    origin = [originX,originY]\\n    XY.sort(key=lambda x: abs(x[0]-origin[0])+abs(x[1]-origin[1]))\\n    return abs(XY[-1][0]-origin[0])+abs(XY[-1][1]-origin[1])-(abs(XY[0][0]-origin[0])+abs(XY[0][1]-origin[1]))\\n\\nans = 0\\nans = max(ans,measure(1,1))\\nans = max(ans,measure(1,10**9))\\nprint(ans)", "target": "399", "substitutes": {"N": ["F", "MN", "Number", "L", "V", "Max", "X", "Y", "Size", "NS", "NI", "K", "number", "NM", "Origin", "O", "P", "T", "C", "Len", "D", "B", "Ne", "S", "SIZE", "I", "RN", "No", "OS", "Ni", "Z", "Ns", "R", "M", "NB", "SN", "NA", "NUM", "n"], "XY": ["Page", "Domain", "Ro", "orig", "x", "EY", "Layer", "CO", "Proxy", "Frame", "Line", "Site", "proxy", "xy", "China", "Socket", "Pixel", "Es", "X", "XX", "YN", "Ge", "IE", "Parts", "Origin", "Ray", "Tile", "IP", "Sync", "XXX", "IO", "Data", "Array", "Cos", "Py", "Ros", "Room", "Image", "Location", "Xi", "Index", "Co", "ES", "XXXX", "Python", "RT", "Clock", "Pie", "ZX", " coordinates", "O", "Zip", "Zone", "Fit", "PI", "E", "Bot", "Y", "Bone", "JO", "JSON", "Info", "Position", "I", "Job", "POS", "Rot", "Scene", "Top", "List", "RGB", "Remote", "Tube", "Tex"], "_": ["__", " seq", " time", " __", "x", "f", "all", " col"], "originX": ["edgeY", "originx", " originN", " originx", "OriginZ", "originZ", "offsetN", "edgex", "offsetZ", "Originx", "OriginX", "OriginY", "offsetY", "edgeN", "OriginN", "edgeX", " originZ", "offsetX", "originN"], "originY": [" origin1", "sourceX", "original1", "originalY", "originy", " originXY", "OriginYY", "sourceYY", "originalX", "originXY", "Originy", " originYY", "sourceY", "originYY", "originaly", "OriginX", "OriginY", "Origin1", "origin1", " originy", "OriginXY", "sourceXY"], "origin": ["min", "nexus", " Origin", "unit", "end", "domain", "line", "span", "top", "X", "Y", "side", "location", "host", "gravity", "plus", "margin", "extra", " origins", "center", "y", "height", "target", "radius", "border", "orig", "Origin", "axis", "pos", "icon", "container", "size", "coord", "original", "central", "edge", "scale", "index", "x", "source", "image", "start", "reverse", "Orig", "cart", "Original", "fact", "src", "remote", "root", "star", "position", "point", "none", "ac", "proxy", "cos", "depth", "alpha", "feature", "order", "all", "xy", "reference", "id", "plane", "range", "front"], "ans": ["ss", "ano", "s", "ents", "lan", "span", "ras", "nas", "amps", "atan", "na", "gan", "ats", "aning", "anas", "AN", "like", "ANS", "asts", "any", "anes", "mean", "aces", "ane", "ann", "anse", "ani", "anc", "ays", "obs", "ana", "can", "outs", " means", "nan", "ania", "ars", "kin", "anned", "anus", " scans", "aned", "ace", "nn", "ons", "aus", "anne", "leans", "sk", "cs", "none", " spans", "ns", "ases", "os", "ls", "cons", "ops", "an", "ins"]}}
{"code": "def main():\\n    # n=int(input())\\n    n,k= map(int, input().split())\\n    p=n-2*k\\n    print(p) if p>0 else print(0)\\n    return\\nmain()", "target": "520", "substitutes": {}}
{"code": "n,u,v = map(int,input().split())\\nu -= 1\\nv -= 1\\npeer = [[] for _ in range(n)]\\nfor _ in range(n-1):\\n  a,b = map(int,input().split())\\n  a -= 1\\n  b -= 1\\n  peer[a].append(b)\\n  peer[b].append(a)\\nrank = [10**6 for _ in range(n)]\\nseen = [0 for _ in range(n)]\\npre = [10**6 for _ in range(n)]\\npst = [[] for _ in range(n)]\\nseen[v] = 1\\nrank[v] = 0\\nnow = [v]\\nwhile now:\\n  last = now\\n  now = []\\n  for x in last:\\n    for y in peer[x]:\\n      if seen[y] == 0:\\n        seen[y] += 1\\n        rank[y] = rank[x] + 1\\n        now.append(y)\\n        pre[y] = x\\n        pst[x].append(y)\\n#print(rank)\\nback = (rank[u]-1) // 2\\ntar = u\\nfor _ in range(back):\\n  tar = pre[tar]\\ndepth = -1\\nnow = [tar]\\nwhile now:\\n  depth += 1\\n  last = now\\n  now = []\\n  for x in last:\\n    now += pst[x]\\n#print(tar,depth,last)\\nif rank[u] % 2 == 1:\\n  print(back + depth)\\nelse:\\n  print(back + depth + 1)", "target": "309", "substitutes": {"n": ["s", "k", "p", "g", "c", "i", "o", "r", "num", "h", "net", "en", "size", "ne", "nu", "z", "nan", "sn", "w", "l", "d", "nt", "nn", "f", "j", "network", "m", "ns", "no", "nr", "len", "e", "N", "t", "nb"], "u": ["s", "k", "uv", "p", "g", "c", "i", "o", "r", "h", "un", "nu", "z", "cu", "w", "l", "d", "q", "f", "ut", "m", "tu", "us", "U", "t", "e"], "v": ["s", "k", "vi", "ve", "uv", "va", "V", "p", "g", "c", "i", "r", "h", "en", "o", "prev", "z", "nv", "w", "l", "d", "q", "f", "j", "m", "vc", "e", "t", "vy", "sv"], "peer": ["layer", "random", "queue", "reader", "channel", "request", "p", "worker", "online", "inter", "price", "post", "prev", "per", "ger", "instance", "chain", "ver", "client", "player", "party", "seed", "central", "server", "edge", "node", "master", "vr", "user", "phase", "ee", "root", "owner", "star", "point", "pp", "author", "address", "iper", "parent", " Peer", "live", "cer", "tree", "list", "pair", "e", "pe", "order", "base", "grade", "inner", "er", "source", "next", "parse", "block", "pc"], "_": ["s", " p", "non", "en", "of", "l", "out", "f", "j", "ac", "ad", "ning", "ing", "ay", " un", " int", " full", "all", "ip", "__", "p", "lex", "long", "d", " post", "m", " non", "am", "t", "block", "k", "line", "al", " time", " over", " long", "val"], "a": ["aa", "k", "s", "va", "p", "ai", "c", "i", "r", "o", "ap", "ba", "ab", "au", "pa", "A", "ar", "af", "w", "l", "d", "f", "ca", "sa", "ac", "ga", "area", "am", "ae", "oa", "alpha", "e", "an", "ad"], "b": ["aa", "s", "k", "be", "ib", "fb", "p", "bs", "bp", "g", "c", "i", "r", "o", "h", "wb", "beta", "B", "ba", "ab", "z", "w", "sb", "l", "ob", "d", "bf", "bb", "q", "abb", "rb", "f", "eb", "bd", "j", "m", "db", "base", "e"], "rank": ["ranking", "error", "sc", "above", "p", "pri", "dist", "c", "ranked", "rate", "height", "r", "prev", "sd", "num", "year", "weight", "seed", "cost", "scale", "index", "winner", "Rank", "history", "cache", "node", "start", "reverse", "par", "inc", "root", "max", "score", "star", "sort", "rc", "ordered", "depth", "shape", "average", "alpha", "asc", "order", "count", "grade", "id", "parse", "an", "sum"], "seen": ["standing", "written", "finished", "sc", "served", "sent", "sex", "p", "visible", "shown", "est", "ranked", "known", "case", "prev", "en", "num", "since", "given", "received", "iter", "first", "seed", "done", "size", "edge", "si", "index", "saw", "shared", "only", "node", "master", "st", "kept", "inc", "sha", "expected", "sa", "ordered", "ced", "see", "set", "no", "alpha", "len", "signed", "asc", "used", "started", "seq", "next", "generated"], "pre": ["min", "p", "pri", "inter", "sys", "post", "PRE", "prev", "per", "pres", "pos", "sp", "server", "po", "si", "Pre", "cache", "master", "par", "patch", "before", "sync", "parent", "list", "no", "ci", "tree", "pair", "base", "order", "pe", "py", "after", "prefix", "parse", "pc"], "pst": ["Psts", "vpsp", "vprest", "ppst", "lpsp", "Pste", " psts", "lpste", "vpst", "pste", "lpsts", "psc", "pss", "ppsp", "ppsc", "prest", " pss", "Pst", "pprest", "lpsc", "lpst", " pste", "psts", "lprest", "lpss", "Pss", "psp", "vpsc"], "now": ["cur", "then", "name", "force", "edge", "current", "pack", "before", "once", "found", "age", " self", "order", "when", "new", "maybe", "worker", "low", "ready", "since", "tmp", "client", "node", "old", "step", "id", "next", "NOW", "case", "prev", "always", "never", " NOW", "long", "time", "start", " current", "max", "own", "row", "wait", "ww", "self", "see", "parent", "day", "today", "ow", "on", "where", "cycle", "post", "wh", "first", "seed", " next", "par", "nt", "one", "Now", " cur", " node", "pe", "after", "range", "draw"], "last": ["name", "then", "cycle", "end", "line", "change", "code", "recent", "static", "latest", "est", "prev", "any", "this", "first", "size", "final", "cost", "cache", "quote", "later", "next", "node", "start", "child", "max", "q", "expected", "style", "sync", "self", "parent", "live", "order", "all", "id", "vious", "Last", "range", "after", "best", "total"], "x": ["new", "s", "k", "int", "code", "com", "ye", "ey", "X", "p", "Y", "tx", "xs", "c", "ync", "i", "xx", "yx", "host", "yn", "o", "r", "h", "ix", "rx", "P", "z", "on", "ex", "index", "xxx", "w", "cross", "l", "d", "max", "q", "j", "f", "ax", "one", "m", "point", "xi", "ya", "ci", "xe", "xp", "key", "t", "e", "xes", "pair", "pe", "view", "event", "id", "word", "xc", "ip"], "y": ["yr", "yd", "k", "s", "dy", "ie", "code", "ye", "ey", "p", "Y", "c", "i", "xx", "yu", "yn", "o", "r", "ym", "ay", "year", "z", "zy", "ch", "yo", "yi", "cy", "wy", "w", "ny", "l", "yt", "d", "ish", "q", "j", "f", "sy", "yk", "m", "ky", "yan", "yy", "ya", "oy", "yl", " you", "t", "e", "yp", "py", "id", "vy", "ry", " ye", "ip"]}}
{"code": "a, b = map(int, input().split())\\n\\nimport math\\naS = math.ceil(a / 0.08)\\nal = math.floor((a + 1) / 0.08)\\nbs = math.ceil(b / 0.10)\\nbl = math.floor((b + 1) / 0.10)\\n\\nflag = True\\nfor i in range(10000):\\n    if aS <= i < al and bs <= i < bl:\\n        print(i)\\n        flag = False\\n        break\\nif flag:\\n    print(-1)\\n", "target": "418", "substitutes": {"a": ["aa", "s", "va", "ao", "ma", "p", "qa", "ai", "aw", "c", "ama", "fa", "api", "la", "ba", "ab", "au", "ana", "art", "da", "A", "af", "sup", "f", "ca", "sa", " A", "asa", "ac", "m", "area", "aux", "am", "ae", "alpha", "ea", "e", "ada", "an", "ad", "n"], "b": ["s", "boot", "bur", "fb", "p", "arb", "c", "bound", "y", "wb", "mb", "B", "ba", "ab", "x", "body", "sb", "cb", "buff", "l", "ob", "bb", "d", "rb", "bf", "u", "abb", "ben", "f", "j", "eb", "br", "bot", "db", "v", "e", "bc", "bas", "nb", "lb", "n"], "aS": ["aL", "eaSu", "aSu", "aA", "anaN", "anaU", "eaN", " aL", "anaL", " aU", " aN", "laU", "aN", " aA", " aSu", "anaS", "saS", "laS", "saSu", "laL", "aU", "eaS", "laN", "eaA", "saN", "saA"], "al": ["ol", "alt", "ali", "Al", "pal", "AL", "fa", "ala", "el", "ap", "la", "sal", "ab", "au", "art", "als", "ar", "af", "isal", "atal", "dal", "l", "ass", "cal", "ll", "mal", "f", "ax", "bal", "am", "abl", "alpha", "ea", "all", "il", "ul", "an", "aval"], "bs": ["s", "ib", "ps", "pb", "alls", "ba", "B", "obl", "ab", "Bl", "als", "blocks", "sb", "bles", "bel", "l", "bb", "ll", "eb", "ils", "bal", "abl", "nl", "ls", "bc", "its", "BS", "lbs", "lb", "ins"], "bl": ["lp", "loc", "ib", "pal", "lab", "sl", "lock", "el", "ba", "obl", "ab", "kl", "Bl", "z", "sb", "bel", "l", "bb", "bf", "pl", "ll", "dl", "eb", "BL", "br", "abl", "nl", "fl", "bc", "il", "cl", "ble", "lb"], "flag": ["field", "alt", "line", "int", "code", "enable", "die", "ag", "fd", "arg", "gui", "init", "ext", "fb", "ground", "delay", "log", "leaf", "bool", "split", "force", "long", "store", "file", "af", "ind", "start", "bug", "band", "lag", "status", "sort", "style", "flags", "fun", "FLAG", "back", "char", "disable", "live", "spin", "binary", "type", "len", "util", "debug", " Flag", "count", "print", "id", "bit", "filter", "ret", "inline", "part", "Flag", "offset"], "i": ["gi", "ui", "ie", "int", "ib", "ali", "qi", "p", "ai", "h", "o", "r", "ix", "ini", "iu", "slice", "z", "mini", "si", "index", "x", "ind", "start", "I", "ia", "uri", "l", "it", "u", "pi", "d", "j", "f", "xi", "di", "ri", "ni", "ip", "ci", "v", "e", "info", "col", "id", "zi", "li", "ii", "n", "bi", "ti"]}}
{"code": "from collections import Counter\\nH,W=map(int,input().split())\\nA=[]\\nfor _ in range(H):\\n    A+=list(input())\\n\\n#\u57fa\u672c\u7684\u306b4\u500b\u305a\u3064\u306a\u3044\u3068\u30c0\u30e1\\n#\u884c\u6570\u30fb\u5217\u6570\u304c\u5947\u6570\u306e\u5834\u5408\u3001\u771f\u3093\u4e2d\u306e\u884c\u30fb\u5217\u306f2\u500b\u305a\u3064\u3067\u3088\u3044\\n#\u884c\u6570\u30fb\u5217\u6570\u304c\u4e21\u65b9\u3068\u3082\u5947\u6570\u306e\u5834\u5408\u3001\u5168\u4f53\u306e\u4e2d\u5fc3\u306f1\u500b\u3067\u3088\u3044\\n\\nC=Counter(A)\\ng4=0\\ng2=0\\ng1=0\\nfor n in C.values():\\n    g4+=n//4\\n    g2+=(n%4)//2\\n    g1+=(n%4)%2\\n\\nans='No'\\nif (g1==1 and H&1 and W&1) or g1==0:\\n    if g4 >= (H//2)*(W//2):\\n        if (g2 + (g4 - (H//2)*(W//2))*2) == (H//2 if W&1 else 0) + (W//2 if H&1 else 0):\\n            ans='Yes'\\nprint(ans)", "target": "188", "substitutes": {"H": [" N", "F", "Hi", " h", "OH", "L", "V", "HS", "RH", "DH", "X", "Y", "K", "h", "HF", "Ha", "HC", "AH", "O", "P", "B", "C", "T", "D", "NH", "EH", "I", "Z", "HH", "MH", "HI", "U", "R", "M", "N", "G", "HA", "CH"], "W": ["F", "E", "V", "Q", "X", " w", "Y", "MW", "K", "O", "AW", "P", "B", "C", "D", "Weight", "w", "TW", "Z", "WA", "WB", "U", "M", "N", "G", "CW", "Wh"], "A": ["F", "a", "L", "All", "X", "MA", "AP", "LA", "AR", "TA", "Na", "FA", "Ha", "AH", "AM", "SA", "P", "B", "C", "AW", "As", "API", "AA", "Alpha", "S", "I", "Average", "Array", "CA", "U", "AF", "alpha", "M", "N", "Wa", "G", "NA", "RA"], "_": [" block", " function", " w", " I", " time", " __", " line", " q", " rec", " loop", " we", " col", " all"]}}
{"code": "from math import radians, cos, sin, sqrt\\n\\na, b, c = map(float, input().split())\\n\\nc = radians(c)\\nh = b * sin(c)\\ns = a * h * 1 / 2\\n\\nd = sqrt(a ** 2 + b ** 2 - 2 * a * b * cos(c))\\nl = a + b + d\\n\\nprint(s)\\nprint(l)\\nprint(h)\\n", "target": "221", "substitutes": {"a": ["aa", "va", "ma", "p", "ai", "g", "aw", "i", "y", "r", "o", "ba", "ab", "au", "ana", "da", "x", "A", "ah", "w", "ia", "u", "aaa", "ca", "f", "sa", " A", "asa", "ac", "ga", "m", "area", "am", "aj", "ae", "alpha", "an", "e", "ada", "abc", "ad", "n"], "b": ["be", "k", "dy", "fb", "p", "bs", "pb", "g", "i", "y", "r", "o", "wb", "ba", "B", "ab", "z", "x", "w", "sb", "bt", "bh", "rb", "bf", "u", "bb", "q", "f", "ca", "j", "m", "ac", "db", "v", "base", "e", "nb", "lb", "n"], "c": ["k", "cor", "p", "ic", "g", "i", "y", "nc", "o", "r", "ec", "C", "lc", "uc", "z", "fc", "ch", "ce", "x", "cy", "cu", "w", "cm", "u", "f", "ca", "cs", "ac", "m", "cos", "dc", "cd", "ci", "ct", "alpha", "v", "cf", "e", "bc", "count", "cc", "cr", "t", "ad", "n"], "h": ["rh", "hs", "k", "sh", "dy", "dh", "H", "p", "g", "y", "r", "o", "sl", "ph", "z", "x", "ho", "w", "u", "bb", "q", "f", "j", "m", "hd", "han", "length", "v", "e", "t", "ha", "hm", "ad", "n"], "s": ["ss", "sq", "sh", "p", "g", "y", "r", "sl", "o", "z", "si", "x", "S", "w", "sb", "u", "sin", "f", "sa", "cs", "m", "ns", "su", "v", "e", "ls", "ds", "an", "n"], "d": ["k", "dd", "dy", "p", "g", "i", "y", "r", "o", "sd", "md", "D", "z", " dd", "da", "x", "w", "u", "q", "f", "j", "m", "dc", "di", "db", "v", "e", "t", "pd", "ds", "ad", "n"], "l": ["lp", "k", "L", "p", "al", "g", "i", "y", "sl", "o", "r", "lc", "kl", "x", "bl", "w", "u", "ll", "f", "dl", "ln", "j", "m", "nl", "fl", "v", "e", "ls", "t", "li", "n"]}}
{"code": "import math\\nfrom decimal import Decimal\\nA, B, H, M = map(int, input().split())\\ntheta = abs(11/2*M - 30*H)\\nrad = math.radians(theta)\\ncos = Decimal(math.cos(rad))\\nans = math.sqrt(A**2 + B**2 - 2 * A * B * cos)\\nprint(\"{:.020f}\".format(ans))", "target": "290", "substitutes": {"A": [" N", "F", "AD", " AA", "DA", "a", "L", "V", "AS", "X", "MA", "Y", "IA", "LA", "AR", "K", "Na", "AN", "BA", "AH", "AM", "SA", "AB", "mA", "P", "AC", "T", "C", "D", " C", "AU", "AA", "S", "W", "PA", "Ma", "CA", "U", "AY", "AF", "O", " a", "N", "G", "HA", "NA"], "B": ["F", "E", "L", "LB", "V", "BT", "Q", "X", "Y", "K", "O", "P", "T", "C", "D", "BB", "BC", "S", "W", "I", "MB", "Z", "WB", "U", "R", "GB", "J", "b", "BM", "N", "G", "BF", "Bs"], "H": ["F", "E", "L", "V", "Q", "X", "DH", "Y", "K", "h", "TH", "AH", "P", "T", "C", "D", "S", "W", "EH", "HH", "MH", "HI", "U", "R", "J", "N", "G", "RH"], "M": ["F", "MN", "E", "L", "V", "Q", "X", "Y", "K", "PM", "O", "P", "T", "C", "D", "S", "W", "CM", "I", "MB", "Z", "m", "HI", "U", "R", "J", "N", "G"], "theta": [" theda", "theda", " thetta", "Theti", " theti", "theirda", "syta", "Thea", "theirtta", "sya", "Theta", "theira", " thea", "Thetta", "syti", "thetta", "theirta", "syda", "Theda", "theti", "thea"], "rad": ["rh", "mad", "Rad", "c", "var", "r", "radius", "pos", "md", "sign", "mean", "ann", "div", "norm", "d", "mag", "max", "band", "ra", "sin", "star", "angle", "trans", "ax", "ac", "pad", "co", "data", "alpha", "len", "mod", "dec", "mm", "range", "ang", "an", "sum", "ad"], "cos": ["ss", "min", "spec", "mos", "chi", "atan", "phi", " sin", "exp", "plus", "c", "xx", " Cos", "circ", "Na", "radius", "axis", "pos", "conf", "rot", "dot", "cus", "div", "x", "norm", "asin", "cross", "con", "lon", "OS", "max", "sin", "frac", "cs", "ac", "none", "ns", "Cos", "co", "neg", "Pos", "cin", "os", "alpha", "bin", "Sin", "nos", "cons", "dec", "ds", "mc", "Co", "oss", "ang", "sky"], "ans": ["lan", "ras", "cas", "nas", "atan", "na", "aning", "anas", "AN", "nes", "ANS", "anes", "mean", "ann", "anse", "anc", "ani", "cus", "ana", "anon", "can", "asin", " means", "nan", "ars", "anus", "aned", "ons", "aus", "leans", "sk", "ens", "ants", "ns", "man", "san", "ls", "cons", "ds", "oss", "an"]}}
{"code": "s_in = input()\\ns_out = s_in.replace(\",\", \" \", 2)\\nprint(s_out)", "target": "588", "substitutes": {"s_in": ["s2ins", "s__in", "your_out", "s_inc", "s__out", "s_nin", " s__out", "s_IN", "s__ins", " s__ins", "your_in", " s__in", "s2in", "s2IN", " s_IN", "s_ins", " s_ins", "s2out", "your_nin", "s__IN", "your_inc", " s__IN"], "s_out": [" s_output", "sessinner", "s_output", "sessoutput", "s_inner", "s_gen", "sessout", " s_inner", "sessin", "s_Out", " s_gen", " s_Out"]}}
{"code": "s = input ()\\nwhile len(s) != 0:\\n  s = s[:-2]\\n  le = round (len(s)/2)\\n  if s[:le] == s[le:len(s)]:\\n    print (len(s))\\n    break", "target": "696", "substitutes": {"s": ["ss", "new", "strings", "a", "south", "sample", "ins", "ans", "p", "ps", "states", "xs", "c", "g", "i", "rows", "steps", "sym", "sets", "o", "sl", "r", "results", "ves", "sf", "si", "es", "sers", "S", "quarters", "cells", "sb", "start", "tests", "l", "parts", "ses", "d", "lines", "less", "sg", "u", "services", "items", "f", "ssl", "m", "ments", "ns", "ws", "input", "seconds", "su", "data", "os", "complete", "gs", "b", "string", "signed", "space", "t", "ls", "e", "ings", "ips", "ds", "sv", "n"], "le": ["min", "be", "middle", "ve", "ie", "line", "leave", "les", "ke", "ele", "lead", "ge", "Le", "ole", "sl", "ine", "lex", "el", "la", "sp", "ne", "ale", "si", "scale", "ce", "lee", "lde", " LE", "w", "l", "LE", "lf", "yle", "half", "led", "lu", "len", "ell", "cel", "e", "pe", "sle", "se", "ler", "cl", "li", "ling", "ile", "ble", "lo"]}}
{"code": "#import time\\ncount=0\\ndef merge(A,left,mid,right):\\n    global count\\n    L=A[left:mid]+[2**30]\\n    R=A[mid:right]+[2**30]\\n\\n    i=0\\n    j=0\\n    for k in range(left,right):\\n        count+=1\\n        if L[i]<=R[j]:\\n            A[k]=L[i]\\n            i+=1\\n        else:\\n            A[k]=R[j]\\n            j+=1\\n\\n\\ndef mergeSort(A,left,right):\\n    if left+1 < right:\\n        mid = int((left+right)/2)\\n        mergeSort(A,left,mid)\\n        mergeSort(A,mid,right)\\n        merge(A,left,mid,right)\\n\\n\\n#start = time.time()\\n\\nn=int(input())\\ns=list(map(int,input().split()))\\ncount=0\\nmergeSort(s,0,n)\\n\\nprint(s[0],end='',sep='')\\nfor i in range(1,n):\\n    print(\" \",s[i],end='',sep='')\\nprint()\\n\\nprint(count)\\n\\n#end=time.time()-start\\n#end*=1000\\n#print (\"Time:{0}\".format(end) + \"[m_sec]\")\\n\\n", "target": "201", "substitutes": {}}
{"code": "from collections import Counter\\n\\nn = int(input())\\na = map(int, input().split())\\n\\nc = Counter(a)\\nr = 1 if n % 2 == 0 else 0\\nfor k, v in c.items():\\n    if r == 0 and k == 0 and v == 1:\\n        continue\\n    if k != 0 and k % 2 == r and v == 2:\\n        continue\\n    print(0)\\n    break\\nelse:\\n    print(2**(n//2) % (10**9+7))\\n", "target": "73", "substitutes": {"n": ["p", "na", "i", "y", "nc", "num", "number", "en", "o", "h", "rn", "ne", "z", "x", "sn", "w", "l", "u", "d", "nt", "nn", "q", "f", "j", "network", "m", "ns", "no", "nl", "nr", "b", "t", "N", "count", "e", "nb"], "a": ["aa", "int", "at", "va", "ans", "p", "na", "access", "ai", "aw", "y", "ba", "ab", "au", "array", "art", "da", "ar", "A", "af", "args", "aaa", "ca", "f", "sa", "ac", "area", "am", "ae", "alpha", "b", "ea", "e", "an", "ad"], "c": ["s", "cur", "sc", "ctrl", "p", "o", "nc", "cp", "C", "coll", "lc", "cache", "cu", "cv", "cb", "con", "cm", "l", "ctx", "d", "f", "rc", "cs", "m", "ac", "cat", "co", "ci", "ct", "b", "cf", "e", "bc", "t", "cc", "cr", "col", "mc", "xc", "abc"], "r": ["rh", "rr", "ner", "p", "i", "o", "h", "y", "pr", "lr", "hr", "z", "run", "x", "ar", "w", "l", "rb", "d", "u", "q", "j", "range", "sr", "f", "m", "rc", "rl", "rg", "br", "R", "nr", "b", "e", "cr", "t", "ru", "er", "rs", "nor"], "k": ["ke", "p", "i", "dk", "K", "o", "y", "kk", "ks", "kn", "ch", "x", "w", "ko", "ak", "l", "ok", "u", "d", "q", "row", "j", "sk", "ky", "f", "iv", "ek", "key", "b", "ck", "e", "kr", "id", "ik"], "v": ["s", "vi", "ve", "value", "uv", "V", "va", "p", "vu", "i", "y", "o", "ver", "values", "lv", "qv", "vs", "rev", "z", "x", "cv", "w", "version", "l", "u", "q", "ov", "iv", "j", "f", "m", "vv", "vt", "b", "e", "val", "sv", "vd"]}}
{"code": "from bisect import bisect_left\\nn = int(input())\\nL = list(map(int, input().split()))\\nL.sort()\\nans = 0\\n\\nfor i in range(n):\\n    for j in range(i+1, n):\\n        ans += bisect_left(L, L[i]+L[j])-j-1\\nprint(ans)\\n", "target": "518", "substitutes": {"n": [" N", "s", "k", "p", "c", " ni", "o", "r", "nc", "number", "num", "h", "net", "y", "ne", "nu", "z", "fn", "x", "sn", "w", "l", "u", "d", "nt", "nn", "ln", "f", "m", "Ns", "ns", "no", "nl", "ni", "nr", "len", "b", "limit", "t", "N", "count", "e", " l", "nb"], "L": ["F", "E", "LB", "V", "LT", "IL", "NL", "FL", "Q", "LS", "X", "Y", "LA", "dL", "LP", "Lu", "LU", "O", "P", "LM", "T", "B", "D", "C", "LD", "S", "SL", "W", "Layer", "I", "l", "EL", "LR", "Li", "LE", "BL", "Lo", "CL", "LV", "U", "R", "List", "M", "J", "LI", "N", "LG", "DL", "XL", "LL", " l", "Long", "UL"], "ans": ["s", "ents", "lan", "span", "cas", "les", "nas", "ras", "atan", "na", "ats", "Ann", "aning", "anas", "AN", "ANS", "anes", "asts", "ks", "mean", "ane", "ann", "anse", "ani", "anc", "anon", "ana", "ania", "can", "nan", "ars", "anus", "aned", "anz", "nn", "ons", "aus", "leans", "sk", "cs", "ants", "ns", "os", "plan", "ds", "an"], "i": ["ji", "k", "ui", "a", "ie", "int", "mi", "p", "ai", "c", "y", "h", "ini", "axis", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "io", "f", "ir", "m", "xi", "ri", "ni", "ci", "ij", "b", "v", "e", "id", "li", "ii", "bi"], "j": ["ji", "k", "other", "a", "ja", "qi", "p", "g", "c", "jo", "o", "y", "jj", "r", "h", "syn", "pos", "jl", "ne", "z", "je", "index", "x", "jet", "ind", "start", "adj", "obj", "l", "u", "d", " J", "job", "jp", "f", "m", "jc", "jam", "ni", "ij", "J", "v", "b", " ii", "kj", "li", "ii"]}}
{"code": "import collections, math, bisect\\n\\nlocal = False\\nif local:\\n    file = open(\"input.txt\", \"r\")\\n    import time\\n\\ndef inp():\\n    if local:\\n        return file.readline().rstrip()\\n    else:\\n        return input().rstrip()\\n\\ndef ints():\\n    return [int(_) for _ in inp().split()]\\n\\n\\nif local:\\n    start=time.time()\\n\\nN,M = ints()\\n\\nconnection = [dict() for i in range(N)]\\n\\nfor i in range(1, M+1):\\n    x,y,z = ints()\\n\\n    connection[x-1][y-1] = True\\n    connection[y-1][x-1] = True\\n\\nans = 0\\nvisited = set()\\n\\nfor i in range(N):\\n    if i in visited:\\n        continue\\n\\n    ans+=1\\n    stck = [i]\\n    visited.add(i)\\n\\n    while len(stck)>0:\\n        vertex = stck.pop(-1)\\n\\n        for nextVertex in connection[vertex]:\\n            if nextVertex not in visited:\\n                visited.add(nextVertex)\\n                stck.append(nextVertex)\\n\\nprint(ans)\\n\\n\\nif local:\\n    fin = (time.time()-start)*1000\\n    print(\"{:.2f}\".format(fin) + \"ms\")\\n", "target": "147", "substitutes": {"local": ["loc", "auto", "level", "request", "default", "state", "process", "present", "personal", "post", "case", "lock", "light", "instance", "public", "Local", "log", "result", "client", "tag", " locals", "central", "ale", "final", "http", "da", "cache", "shared", "partial", "lang", "window", "same", "so", "pack", "remote", "external", "before", "mental", "lib", "close", "back", "script", "self", "input", "parent", "private", "land", "binary", "match", "path", "util", " Local", "base", "session", "count", "internal", "print", "standard", "quiet", "parse", "loop", "serial", "where"], "file": ["pool", "line", "table", "fp", " File", "resource", "socket", "un", "log", "FILE", "filename", "time", "cache", "image", "File", "l", "buffer", "files", "page", "f", "angle", "object", "function", "output", "input", "data", "db", "check", "path", "b", "base", "pe", "message", "profile", "parse", "source", "ile", "document"], "_": ["km", "name", "ID", "pid", " block", "__", "X", "p", "g", "___", "h", "ix", " ip", "like", " time", " __", "P", " f", "I", "j", "f", " dev", " lib", "self", "J", " self", "key", " code", "all", "prefix", " all"], "start": ["date", "end", "ie", "enable", "Start", "tick", "create", "p", "init", "ic", "stat", "load", "use", "like", "year", "first", "sp", "run", "time", "diff", "st", "get", "it", "ish", "clock", "stop", "check", "ize", "v", "started", "starting", " Start", "id", "send", "se", "parse", "source", "offset", "info"], "N": ["F", "MN", "E", "L", "NO", "V", "H", "Q", "X", "Y", "Size", "NC", "NS", "NE", "Num", "K", "NM", "CNN", "O", "P", "B", "C", "T", "D", "Ne", "S", "A", "W", "I", "No", "NT", "Ni", "Z", "Ns", "U", "R", " n", "G", "NA", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "K", "DM", "NM", "O", "P", "T", "B", "C", "D", "S", "W", "I", "Z", "m", "MC", "U", "R", "MS", "J", "G", "Mo", "n"], "connection": ["ion", "character", "contact", "loc", "collection", "communication", "service", "location", "c", "condition", "context", "number", "interface", "section", "client", "connect", "Connection", "support", "choice", "edge", "index", "source", "image", "action", "relation", "version", "conn", "degree", "union", "control", "network", "position", "operation", "function", "sequence", "database", "shape", "connected", "graph", "entry", "session", "reference", "application", "config", "direction"], "i": ["ji", "k", "ui", "a", "ei", "int", "ie", "qi", "p", "init", "ai", "c", "o", "ine", "ini", "iq", "iu", "ani", "si", "eni", "index", "yi", "ind", "I", "it", "l", "u", "pi", "d", "io", "j", "f", "m", "xi", "di", "ni", "ip", "ci", "\u0438", "v", "b", "info", "zi", "id", "multi", "li", "ii", "n", "ti"], "x": ["dx", "min", "s", "k", "a", "int", "X", "p", "Y", "plus", "c", "xs", "xx", "o", "h", "ix", "any", "ex", "index", "time", "image", "w", "l", "u", "d", "one", "f", "j", "m", "point", "ip", "v", "b", "pixel", "e", "xy", "id", "n"], "y": ["s", "k", "a", "dy", "ye", "X", "p", "Y", "c", "o", "h", "ix", "year", "index", "yi", "cy", "w", "ny", "l", "u", "d", "j", "f", "ky", "sy", "m", "xi", "yy", "ya", "v", "b", "e", "xy", "id", "vy", "ii", "ey", "n"], "z": ["ji", "s", "iz", "end", "ze", "p", "tz", "c", "zy", "w", "yz", "l", "u", "d", "q", "nz", "j", "Z", "f", "zz", "v", "e", "t", "xy", "zi", "ii", "gz"], "ans": ["ss", "ents", "lan", "span", "cas", "amps", "eps", "ras", "atan", "na", "nas", "ai", "ats", "ions", "anas", "AN", "ANS", "anes", "ks", "aces", "vs", "ann", "ani", "anc", "au", "ana", "es", "nan", " means", "ars", " scans", "ia", "aned", "ations", "ons", "ids", "aus", "cs", "ants", " spans", "ns", "acs", "os", "ci", "ni", "san", "ls", "plan", "ds", "ians", "oss", "an", "ies", "comments", "ins"], "visited": ["visit", "maniter", "versitable", "visitable", "sentit", "seenited", "navitted", "versiting", "sentited", "visiting", "manited", "seenient", "seenitted", "Visiting", "manored", "Visitable", "Visit", "VISiting", "navient", "VisITED", "visored", "Visored", "versitted", "guiter", "Visitted", "guitted", "vitted", "versited", "invitted", "vited", "guiting", "seeniting", "vitable", "navited", "visient", "seenit", "visiter", "viting", "visITED", "manitted", "visitted", "Visiter", "guited", "invored", "sentITED", "Visited", "VISiter", "VISited", "VISitted", "invited", "navit", "Visient", "sentiting", "seenITED", "inviter"], "stck": ["ctke", "ntck", " stcking", " stcl", "estk", "ntke", "stscl", "stsck", "Stcks", " stkk", "Stck", "astck", "stscking", "astcking", "stk", "astkk", "stkk", "stcking", "ntk", "STcking", "estcks", " stcc", "STcl", " stcks", "STck", "ctck", "estck", "STcks", "Stkk", "Stcc", "ntcks", "Stcking", "stcl", "Strc", "stscks", "strc", "stke", "ctk", " strc", "STcc", "stcks", "STrc", "ctcks", "stcc", "astcks", "estke"], "vertex": ["vertedge", " Verridge", " verge", "vertte", "verge", "verplex", "vertplex", "verttex", "interplex", "verte", "identner", "everplex", "identtex", "identridge", " verner", " Verge", " Verner", "verridge", "everedge", " verridge", "evertex", "interedge", "verner", "intertex", "everte", "veredge", "identge", " Vertex", "interte"], "nextVertex": ["nextVerse", "nextGetex", "nextVERx", " nextvernex", "nextVERoutine", "nextveroutine", "nextVerx", "nextVERte", " nextVernex", "nextVERnex", "nextGese", " nextVerx", "nextVerttex", " nextVeroutine", "nextVertoutine", " nextveroutine", " nextVerse", "nextVernex", "nextVeredge", " nextvertex", "nextVeroutine", "nextVERedge", "nextverse", "nextverx", "nextvernex", "nextGex", "nextverte", "nextVertnex", " nextVeredge", "nextvertex", "nextveredge", "nextVERtex", "nextVerte", " nextVerte", " nextverse", " nextverx"], "fin": ["prem", "min", "finished", "spec", "sent", "die", "span", "tick", "fd", "win", "init", "serv", "des", "en", "FIN", "conf", "nu", "div", "final", "nan", "thin", "tun", "cap", "report", "frac", "fat", "commit", "fun", "fen", "han", "rin", "close", "fu", "su", "lit", "len", "dev", "raf", "lif", "sil", "Fin", "lin", "info"]}}
{"code": "from collections import Counter\\n\\nN, K = map(int, input().split())\\n*A, = map(int, input().split())\\nMOD = 10**9+7\\nS = [0]*(N+1)\\nc = Counter()\\nc[0] = 1\\nans = 0\\n\\nfor i in range(N):\\n    S[i+1] = (S[i]+A[i]-1)%K\\n    if i+1-K>=0:\\n        c[S[i+1-K]] -= 1\\n    ans += c[S[i+1]]\\n    c[S[i+1]] += 1\\n\\nprint(ans)\\n", "target": "596", "substitutes": {"N": ["F", "E", "L", "V", "H", "Q", "X", "Y", "NC", "NS", "NE", "NI", "O", "P", "B", "C", "T", "D", " C", "NK", "Ne", "I", "NT", "Ni", "Z", "Ns", "U", "R", "M", "J", " n", "G", " Ne", " D", "KN", " NI", "n"], "K": ["F", "k", "E", "Ke", "L", "AK", "V", "Max", "H", "Q", "X", "Y", "IK", "KE", "AN", "O", " k", "P", "T", "C", "B", "D", "Sk", "SK", "NK", "KS", "Sch", "Kent", "W", "KC", "I", "HK", "Z", "UK", "KR", "U", "R", "J", "M", "CC", "G", "KN", "CH", "Mod"], "A": ["F", "AD", "a", "V", "All", "AS", "X", "Q", "Y", "AP", "IA", "LA", "AR", "AN", "AM", "O", "SA", "P", "B", "C", "AC", "D", "As", "API", "AA", "Alpha", "I", "CA", "U", "AF", "alpha", "M", "G", "HA"], "MOD": [" M", "sc", " L", "Max", "X", "Size", " B", "P", "B", "SK", "D", " C", "ak", "max", " U", "Sc", "Z", "m", "U", "Mi", "R", "M", "mod", " D", " P", " NK", "Mod"], "S": ["F", "s", "E", " M", "L", "Cs", "Rs", "V", " L", "H", "Es", "Q", "SC", " s", "X", "SE", "AS", "Y", "Size", "NS", "Si", "Os", "TS", "PS", "SH", "Source", "AN", "SI", "O", "SA", "P", "T", "C", "B", "D", "SK", "As", "ASC", " C", "St", "KS", "Sa", "W", "RS", "I", "Sing", "SS", "OS", "Sc", "Z", "Ns", "Set", "CS", "U", "R", "Part", "M", "GS", "String", "Start", "Sum", "G", "SU", "Socket"], "c": ["s", "k", "a", "Cs", "code", "p", "ic", "g", "arc", "h", "r", "o", "y", "ec", "case", "C", "lc", "z", " C", "ch", "ce", "x", "cache", "ar", "cu", "w", "con", "l", "u", "d", "cn", "q", "f", "ca", "cs", "m", "ac", "core", "co", "ci", "ct", "b", "v", "CC", "e", "count", "cc", "pc", "n"], "ans": ["s", "a", "lan", "cas", "nas", "ins", "amps", "AS", "p", "span", "na", "ai", "Ann", "arts", "aning", "activation", "anas", "AN", "ANS", "ks", "P", " can", "C", "ann", "ani", "cus", "ays", "anc", "x", "can", "An", " means", "outs", "ars", "asin", "anus", "I", "aned", "chan", "ons", "aus", "ens", "cs", "ants", "Ns", "ns", "acs", "scan", " Ans", "cons", "plan", "ces", "ops", "an", "n"], "i": ["gi", "ih", "ji", "k", "ui", "s", "end", "a", "name", "ie", "int", "chi", "qi", "p", "phi", "ai", "init", " I", "oi", "h", "y", "ix", "ini", "iu", "api", "ti", "z", "mini", "si", "index", "x", "source", "module", "ind", "start", "I", "uri", "l", "u", "d", "pi", "ki", "j", "f", "io", "cli", "xi", "di", "ni", "ci", "b", "v", "key", "e", "info", "zi", "id", "multi", "li", "ii", "ik", "n", "bi", "ip"]}}
{"code": "#!/usr/bin/env python\\n# -*- coding:utf-8 -*-\\nfrom __future__ import print_function,division\\nfrom itertools import combinations\\nimport time\\nimport sys\\nimport io\\nimport re\\nimport math\\nstart = time.clock()\\ni = 0\\ndef enum_sum_numbers(sets, s_range, r):\\n    for cmb in combinations(sets,r):\\n        yield sum(cmb)\\n    if r <=s_range:\\n        for s in enum_sum_numbers(sets,s_range, r+1):\\n            yield s\\n\\nsys.stdin.readline()\\na=[int(s) for s in sys.stdin.readline().split()]\\nsys.stdin.readline()\\nms=[int(s) for s in sys.stdin.readline().split()]\\nsets={s for s in enum_sum_numbers(a,len(a),1)}\\nfor m in ms:\\n    print('yes' if m in sets else 'no')", "target": "279", "substitutes": {}}
{"code": "H, N = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nif sum(a) >= H:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "314", "substitutes": {"H": ["F", " h", "OH", "L", "V", "Q", "X", "DH", "Y", "K", "h", "SH", "O", "P", "B", "C", "T", "D", "NH", "S", "A", "W", "EH", "GH", "Z", "HH", "MH", "HI", "U", "R", "M", "J", "FH", "G", "HA"], "N": ["F", "E", "NR", "L", "V", "NN", "X", "Y", "Num", "NS", "K", "O", "P", "B", "C", "T", "D", "S", "W", "I", "Z", "Ns", "U", "R", "M", "G", "NA", "n"], "a": ["aa", "s", "ack", "va", "p", "na", "c", "i", "o", "y", "asha", "h", "mA", "C", "ab", "au", "AA", "ana", "x", "A", "w", "args", "l", "u", "f", "sa", " A", "ac", "m", "asa", "area", "aux", "aj", "am", "alpha", "b", "ea", "NA", "an", "n"]}}
{"code": "n = input()\\nxs = map(float, input().split())\\nys = map(float, input().split())\\nabs_d = [abs(x - y) for (x, y) in zip(xs, ys)]\\nd = [sum([i ** p for i in abs_d]) ** (1 / p) for p in range(1, 4)]\\nd.append(max(abs_d))\\n\\nprint(*d, sep='\\n')\\n", "target": "325", "substitutes": {"n": ["name", "k", "g", "c", "o", "r", "ot", "pos", "nan", "w", "adj", "l", "pi", "nn", "j", "f", "m", "ns", "v", "b", "np", "t", "N", "pn", "e", "dn", "nb"], "xs": ["dx", "ss", "s", "points", "ps", "ms", "yx", "width", "xx", "ints", "fx", "rx", "px", "ims", "pos", "es", "xxx", "yi", "lines", "wx", "inches", "cs", "xi", "ns", "ws", "ts", "xp", "ls", "xes", "xy", "ds", "icks", "rs", "ins"], "ys": ["ss", "s", "ps", "bs", "sys", "ms", "yx", "xx", "yn", "px", "ims", "vs", "z", "ays", "yi", "mys", "ny", "yt", "ids", "yrs", "ns", "ws", "yy", "ya", "ts", "yl", "ls", "ips", "xy", "rys", "py", "ds", "icks", "ii", "ies", "YS"], "abs_d": ["abs2p", " abs_D", " abs_s", " abs_p", "abs_p", "abs_ds", "abs2ds", "abs2d", "abs2D", "abs_D", "absolute_ds", "abs_n", "absolute_p", " abs_n", "absolute_l", "abs2l", "abs_s", "abs_l", "absolute_d"], "x": ["dx", "s", "k", "int", "X", "lat", "c", "xx", "width", "h", "o", "ix", "px", "pos", "rx", "z", "ex", "xxx", "index", "w", "l", "u", "f", "m", "xi", "data", "v", "pixel", "b", "t", "e", "xy"], "y": ["yd", "s", "dy", "ye", "gy", "Y", "c", "o", "z", "zy", "w", "ny", "yt", "u", "j", "sy", "f", "m", "yy", "ya", "b", "t", "e", "xy", "vy", "ii", "ey"], "d": ["s", "dd", "dy", "dh", "density", "fd", "dist", "g", "c", "dat", "o", "dict", "sd", "ded", "D", "z", "body", "w", "daily", "l", "do", "f", "dl", "dt", "bd", "m", "dc", "di", "data", "db", "b", "v", "dim", "t", "e", "pd", "ds", "ad"], "i": ["s", "k", "a", "int", "chi", "qi", "phi", "ai", "c", "ix", "iu", "z", "si", "index", "mu", "ind", "I", "u", "pi", "q", "j", "f", "m", "pp", "xi", "di", "ci", "alpha", "ip", "v", "b", "e", "id", "li", "ii", "bi", "ti"], "p": ["s", "k", "a", "int", "pre", "ps", "power", "bp", "c", "r", "tp", "h", "pr", "pos", "P", "pt", "z", "w", "I", "l", "u", "pi", "max", "f", "j", "m", "pp", "point", "ip", "alpha", "b", "v", "np", "pixel", "t", "pn", "pc"]}}
{"code": "N = int(input())\\na = list(map(int, input().split()))\\ncount = 1\\nbk = 0\\nfor i in a:\\n    if i == count:\\n        count += 1\\n    else:\\n        bk += 1\\nif bk == N:\\n    ans = -1\\nelse:\\n    ans = bk\\nprint(ans)\\n", "target": "749", "substitutes": {"N": ["F", "L", "V", "NN", "X", "Y", "Num", "NS", "NI", "K", "number", "Na", "num", "O", "P", "B", "C", "T", "D", "Ne", "S", "A", "I", "NT", "Ni", "Z", "Ns", "ns", "M", "b", " n", "NA", "Count", "n"], "a": ["aa", "s", "tta", "span", "p", "na", "ai", "c", "fa", "ba", "ab", "array", "AA", "da", "index", "A", "af", "args", "ta", "aaa", "ca", "sa", " A", "ac", "area", "data", "alpha", "b", "ea", " n", "an", "ad", "Count", "n"], "count": ["k", "int", "code", "span", "p", "na", "c", "y", "number", "num", "case", "weight", "C", "first", "size", "ann", "index", "A", "ind", "start", "w", "ak", "l", "f", "ac", "length", "alpha", "b", "CC", "base", "e", "all", "id", "an", "sum", "ad", "Count", "n"], "bk": [" bks", "BK", " bak", " bn", "bak", "Bks", "pkk", "bbk", "cbkk", "Bkk", "bbks", "pk", "bb0", "cbks", "abks", "bn", "abak", "pks", "fk", "bbK", "fn", " b0", " bK", " bkk", "bks", "b0", "cbn", "Bak", "bbn", "bkk", "Bk", "abk", "cbk", "f0", "pn", "bK", "fK", "abkk"], "i": ["gi", "s", "k", "ei", "int", "chi", "qi", "p", "ai", "ic", "c", "o", "y", "iu", "z", "si", "x", "I", "it", "l", "pi", "ki", "j", "iii", "f", "m", "xi", "di", "ni", "ci", "ij", "b", "e", "zi", "id", "li", "ii", "ik", "n", "bi", "ti"], "ans": ["lan", "span", "nas", "ras", "cas", "na", "aning", "anas", "AN", "atten", "ANS", "ks", "mean", "annels", "ann", "anon", "anc", "ays", "ana", "can", "nan", " means", "anus", "aned", "ace", "nn", "aus", "anne", "sk", "leans", "cs", "ac", "ln", "ants", "atches", "ns", "rank", "no", "acts", "an", "n", "ad", "ins"]}}
{"code": "n = int(input())\\nL = [list(map(int,input().split())) for _ in range(n)]\\nL.sort(key=lambda x:x[0]+x[1])\\nseen=-10**10\\ncnt=0\\nfor i in range(n):\\n    if seen<=L[i][0]-L[i][1]:\\n        seen=L[i][0]+L[i][1]\\n        cnt+=1\\nprint(cnt)", "target": "109", "substitutes": {"n": ["name", "s", "k", "a", "p", "c", "o", "number", "nc", "num", "y", "size", "z", "fn", "x", "nan", "sn", "l", "u", "d", "nt", "f", "ln", "j", "m", "Ns", "ns", "len", "b", "v", "e", "N", "count", "t", "nb"], "L": ["F", "E", "LB", "V", "LT", "IL", "NL", "FL", "Q", "LS", "X", "Y", "ML", "LA", "dL", "K", "LP", "Lu", "LU", "O", "P", "T", "B", "C", "LM", "D", "S", "W", "LC", "SL", "Layer", "I", "l", "Li", "LR", "EL", "Line", "ln", "Z", "BL", "LV", "CL", "list", "R", "U", "List", "M", "J", "LI", "N", "LG", "XL", "DL", "G", "LL", " l", "Long"], "_": ["k", " w", "ix", " seq", " time", " __", " line", " k", "x", " un", "out", " j", "val"], "seen": ["written", "name", "loc", "shadow", "finished", "last", "sc", "int", "served", "total", " observed", "est", "visible", "shown", "c", "ranked", "known", "nc", "en", "num", " c", "specified", "iq", "received", "Len", "weight", "done", "C", "lc", "size", "config", "hidden", "si", "index", " unseen", "selected", " ignored", "expected", " size", "rc", "sa", "found", "ordered", "see", "set", "no", "len", "signed", "changed", "seq", "zi", "se", "source", "next", " len", "ern", "offset"], "cnt": ["cNT", " cpt", "cpt", "acount", "CNT", "cnc", "lcpt", "cint", "Cwd", " cNT", " cwd", " cct", "cct", "lcnc", "rcnt", " cnc", "acnt", "Cnt", "rcint", "Cnc", "rcct", "acNT", "acwd", " cint", "lcint", " count", "lcnt", "lcct", "lcwd", "count", "cwd", "rcpt", "Count", "lcount"], "i": ["gi", "ui", "ie", "qi", "p", "phi", "ai", "init", "c", "g", " I", " id", "oi", "y", "o", " iP", "ix", " ip", "gu", " ind", "ini", "iq", "ig", "iu", "ti", "z", "si", "index", "yi", "x", " ir", "ind", "start", " il", "I", " ic", "it", "l", "uri", "u", "pi", "d", "j", "io", "iii", " j", "xi", "di", " ig", "ci", "b", " ii", "e", "t", "info", "multi", "id", "li", "ii", " u", "bi", "ip"]}}
{"code": "# coding: utf-8\\n# Your code here!\\nimport math\\n\\nwhile True:\\n    n = int(input())\\n    if n == 0:\\n        break\\n    s = list(map(int,input().split()))\\n    \\n    sum = 0\\n    for i in range(len(s)):\\n        sum += s[i]\\n    m = sum/len(s)\\n    \\n    a = 0\\n    for i in range(len(s)):\\n        a += s[i]*s[i]\\n    a = a/len(s)\\n    \\n    print(\"{0:.8f}\".format(math.sqrt(a-m*m)))\\n", "target": "683", "substitutes": {}}
{"code": "import math\\nS = int(input())\\nv = 10**9\\nx3 = (v-S%v)%v\\ny3 = (S+x3)//v\\nprint(\"0 0 %d 1 %d %d\"%(10**9, x3, y3))", "target": "638", "substitutes": {"S": ["F", "ss", "s", "VS", "E", "L", "V", "H", "Q", "X", " s", "Y", "SE", "NS", "K", "Si", "TS", "SI", "O", "SA", "P", "B", "C", "T", "D", " C", "A", "W", "Sl", "I", "SS", "Z", "Ns", "U", "R", "M", "J", "MS", " V", "N", "G", "sv"], "v": ["s", "k", "vi", "value", "uv", "V", "p", "g", "c", "_", "i", "y", "h", "r", "P", "lv", "vs", "z", "vp", "x", "nv", "w", "version", "l", "u", "d", "max", "q", "f", "j", "m", "vv", "U", "M", "vt", "b", "t", "e", "sv", "val", "ev", "n"], "x3": [" x23", "xthird", "y1", "x1", "y03", "v23", "ythird", "x93", " x1", " x93", " x03", " y03", "X3", "v93", "X23", " xthird", "X1", " y1", "X93", " ythird", "X03", "x03", "v3", "v1", "y23", "x23"], "y3": ["y15", "y03", "Y23", "y23", "Y3", " y23", " y15", "dy23", "vy23", " y03", "dy03", "vy3", "vy15", " y6", "y6", "dy6", "Y15", "vy6", "vy03", "dy3"]}}
{"code": "# encoding:utf-8\\n\\ninput = map(int, raw_input().split())\\na, b = input\\n\\nd = a / b\\nr = a % b\\nf = float(a) / b\\n\\nprint(d),\\nprint(r),\\nprint(('%03.9f' % f))", "target": "301", "substitutes": {}}
{"code": "from collections import deque\\nimport sys\\ninput = sys.stdin.readline\\ninf = pow(10, 10)\\n\\nn, m = map(int, input().split())\\na = [inf] * n\\n\\nedge = [[] for i in range(n)]\\n\\nfor i in range(m):\\n    l, r, d = map(int, input().split())\\n    l-=1;r-=1\\n    edge[l].append((r, d))\\n    edge[r].append((l, -d))\\n\\nflag = True\\ndist = [inf] * n\\nfor i in range(n):\\n    if not flag: break\\n    if dist[i] == inf:\\n        dist[i] = 0\\n        dq = deque([i])\\n        while dq:\\n            now = dq.popleft()\\n            for e in edge[now]:\\n                nnode, d = e\\n                if dist[nnode] == inf:\\n                    dist[nnode] = dist[now] + d\\n                    dq.append(nnode)\\n                else:\\n                    if dist[nnode] != dist[now] + d:\\n                        flag = False\\n                        break\\nif flag:\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "672", "substitutes": {"input": ["error", "call", "raw", "text", "int", "reader", "request", "method", "argument", "stream", "element", "format", " inputs", "comment", "iter", "empty", "temp", "array", "expression", "diff", "index", "image", "inc", "exec", "current", "block", "accept", "out", "f", "param", " Input", "pull", "null", "output", "parent", " int", "data", "Input", "list", "alpha", "util", "string", "select", "help", "flow", "session", "space", "print", "submit", "filter", "source", "config", "form", "feed"], "inf": ["s", "aff", "raw", "zero", "auto", "int", "lab", " z", "p", "init", "img", "std", "exp", "h", "y", "ini", "ix", "rf", "ipl", "limited", "confirmed", "iter", "local", "z", " infinite", "index", "diff", "Inf", "x", "nan", "inc", "ind", "w", "integer", " np", "fi", "u", "q", "sup", "f", "frac", "ill", "pp", "self", "small", "xi", "alpha", "limit", " infinity", "id", "qq", "ii", "abc", "config", "feed", "ref", "info"], "n": ["s", "k", "p", "g", "c", "o", "y", "num", "nc", "h", "ne", "z", "x", "w", "u", "nn", "q", "f", "j", "ns", "no", "b", "v", "N", "t", "dn", "nb", "an"], "m": ["s", "k", "mn", "tm", "p", "ms", "g", "c", "nm", "y", "o", "h", "z", "x", "dm", "w", "u", "j", "f", "M", "b", "v", "hm", "mc", "an"], "a": ["aa", "p", "distance", "ai", "g", "c", "weight", "au", "array", "da", "A", "w", "u", "aaa", "f", "sup", "sa", "ac", "xi", "area", "aj", "data", "alpha", "b", "all", "abc", "next", "an", "ad"], "edge": ["end", "dd", "line", "dy", "ie", "ink", "int", "issue", "ge", "distance", "g", "en", "weight", "une", "link", "ord", "Edge", "grid", "div", "index", "diff", "node", "w", "cross", "ind", "route", "adj", "connection", "ee", "q", "one", "point", "age", "graph", "data", "ide", " Edge", "ange", "pe", "order", "ice", "flow", "grade", "id", "progress", "range", "next", "update"], "i": ["ji", "s", "k", "ui", "ei", "ie", "int", "qi", "p", "ai", "c", "y", "o", "h", "ini", "iu", "api", "z", "si", "index", "x", "yi", "ind", "I", "it", "u", "pi", "q", "j", "f", "io", "xi", "di", "ni", "ci", "ip", "\u0438", "b", "v", "il", "zi", "id", "li", "ii", "ti"], "l": ["s", "k", "ol", "L", "ur", "p", "g", "c", "o", "h", "y", "sl", "el", "left", "lc", "kl", "x", "w", "u", "ll", "q", "f", "ln", "j", "dl", "nl", "b", "v", "t", "ls", "li", "ul"], "r": ["rh", "s", "k", "rr", "ur", "p", "g", "c", "h", "rd", "o", "pr", "z", "x", "ar", "w", "u", "rb", "q", "f", "j", "sr", "right", "ir", "rc", "dr", "R", "nr", "b", "v", "t", "fr", "cr", "ru", "er"], "d": ["dx", "new", "s", "k", "did", "dd", "dy", "dh", "dom", "p", "nd", "g", "c", "rd", "sd", "md", "ded", "D", "z", "da", "x", "diff", "w", "u", "do", "xd", "q", "j", "f", "bd", "dt", "dr", "du", "dc", "cd", "di", "db", "b", "v", "ld", "t", "pd", "ds", "dn", "vd", "ad"], "flag": ["bad", "error", "field", "group", "domain", "code", "die", "ag", "event", "arg", "gui", "init", "ai", "ground", "delay", "use", "log", "leaf", "ig", "weight", "sign", "force", "long", "store", "af", "ind", "bug", "band", "wait", "f", "frac", "lag", "agg", "sync", "flags", "fun", "FLAG", "char", "pad", "free", "age", "fail", "kind", "close", "type", "key", "debug", "count", "play", "big", "id", "bit", "ret", "inline", "part", "Flag", "offset", "info"], "dist": ["loc", "dd", "sh", "int", "support", "force", "deep", "dm", "dis", "q", "core", "Dist", "dc", "data", "dev", "np", "info", "error", "ie", "est", "distance", "fe", "done", "desc", "div", "dest", "store", "de", "ga", "depth", "ide", "wd", "id", "next", "form", "rest", "dy", "p", "nd", "ge", "md", "da", "ind", "req", "point", "du", "ist", "dr", "inst", "rank", "dim", "grade", "front", " distance", "domain", "err", " Dist", "sd", "diff", "nt", "df", "di", "feature", "det", "progress", "range", "draw"], "dq": ["dx", "rr", "sq", "dd", "dy", "qs", "queue", "qi", "Q", "p", "qa", "gui", "c", "gh", "ay", "iq", "iu", "idd", "lc", "grid", "que", "diff", "dm", "req", "xd", "q", "quad", "nt", "eq", "dt", "f", "dl", "du", "nw", "ue", "dc", "cd", "df", "aj", "data", "qt", "dim", "flow", "pd", "iw", "seq", "ds", "id", "qq", "dn", "next", "vd"], "now": ["new", "cur", "name", "dd", "ie", "NOW", "event", "c", "gh", "currently", "post", "low", "ready", "always", "result", "since", "wh", "md", "we", "ph", "ord", "both", "size", "force", "node", "w", "kw", "current", "ok", "max", "q", "row", "page", "j", "self", "old", "co", "Now", "parent", "day", "way", "ow", "today", "cf", "mm", "id", "after", "source", "next", "form", "here", "when", "where"], "e": ["name", "E", "end", "ei", "ie", "ed", "p", "ge", "nd", "g", "c", "element", "y", "h", "en", "ec", "el", "ne", "z", "es", "x", "diff", "ind", "ee", "u", "j", "f", "terday", "nw", "ae", "ea", "id", "range", "an"], "nnode": [" nlocation", "nlocation", "nnself", "snlive", "nnw", "Nlive", "ledge", " nlive", "llive", "Nnode", "snnode", "synlocation", "lnode", " ncomponent", "nNode", "nself", "pnnw", "nnnode", "node", "nlive", "pnode", "Node", "ncomponent", "synself", "nnsource", "ldist", "nnparent", "synnode", "pnlive", "synsource", "ndist", "snself", "nnlocation", "Nnw", "NNode", "lNode", " nsource", "nedge", " ndist", "lself", " node", "nncomponent", " nself", "Nedge", "Nparent", "nparent", "Ncomponent", " nnw", " nedge", "nsource", " nNode", "pnnode", " nparent", "sndist"]}}
{"code": "#!/usr/bin/env python3\\nfrom collections import defaultdict, Counter\\nfrom itertools import product, groupby, count, permutations, combinations\\nfrom math import pi, sqrt\\nfrom collections import deque\\nfrom bisect import bisect, bisect_left, bisect_right\\nfrom string import ascii_lowercase\\nfrom functools import lru_cache\\nimport sys\\nsys.setrecursionlimit(10000)\\nINF = float(\"inf\")\\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\\n\\n\\ndef inside(y, x, H, W):\\n    return 0 <= y < H and 0 <= x < W\\n\\n\\ndef ceil(a, b):\\n    return (a + b - 1) // b\\n\\n\\ndef sum_of_arithmetic_progression(s, d, n):\\n    return n * (2 * s + (n - 1) * d) // 2\\n\\n\\ndef gcd(a, b):\\n    if b == 0:\\n        return a\\n    return gcd(b, a % b)\\n\\n\\ndef lcm(a, b):\\n    g = gcd(a, b)\\n    return a / g * b\\n\\n\\n\\ndef solve():\\n    N = int(input())\\n    P = list(map(int, input().split()))\\n    Q = list(map(int, input().split()))\\n\\n    p = 0\\n    q = 0\\n    for i, v in enumerate(permutations(range(1, N + 1)), start=1):\\n        p_ok = True\\n        q_ok = True\\n        for j in range(N):\\n            p_ok &= v[j] == P[j]\\n            q_ok &= v[j] == Q[j]\\n\\n        if p_ok:\\n            p = i\\n        if q_ok:\\n            q = i\\n\\n    print(abs(p - q))\\n\\n\\ndef main():\\n    solve()\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "436", "substitutes": {}}
{"code": "S=list(input().split())\\nans=\"\"\\nfor i in range(3):\\n    ans+=chr(ord(S[i][0])-32)\\nprint(ans)", "target": "222", "substitutes": {"S": ["F", "s", "E", "L", "V", "H", "SC", "Q", "X", "SE", "Sample", "NS", "SR", "Si", "SAM", "SI", "ANS", "O", "SA", "P", "T", "C", "B", "D", "A", "W", "I", "SS", "OS", "U", "R", "SIGN", "M", "SP", "N", "SN", "G", "SO", "SU"], "ans": ["ss", "s", "ents", "lan", "cas", "nas", "span", "ras", "atan", "na", "std", "ats", "aning", "anas", "AN", "ANS", "anes", "ane", "mean", "ann", "anon", "anc", "ani", "anse", "ays", "ana", "can", "An", "ars", "aned", "lines", "chan", "ons", "anan", "aus", "anne", "leans", "ens", "cs", "ants", "ns", "os", "san", " Ans", "gen", "ANN", "ds", "plan", "an", "ins"], "i": ["k", "vi", "a", "ie", "p", "ai", "c", "h", "num", "ini", "ix", "iu", "sp", "lc", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "j", "f", "xi", "ori", "ri", "ci", "key", "v", "b", "e", "zi", "id", "li", "ii", "bi", "ti"]}}
{"code": "N=int(input())\\nA=int(input())\\n\\nAmari=N%500\\n\\nif A>=Amari:\\n    print('Yes')\\n\\nelif A<Amari:\\n    print('No')", "target": "144", "substitutes": {"N": ["F", "E", "L", "NO", "V", "NN", "Q", "X", "Y", "NS", "NE", "K", "NM", "O", "P", "B", "C", "T", "D", "Ne", "S", "I", "NT", "NG", "Z", "Ns", "M", "J", " n", "G", "NA", "n"], "A": ["F", "Ca", "a", "At", "V", "Area", "Y", "AP", "IA", "LA", "K", "Yes", "BA", "AM", "AH", "SA", "P", "B", "C", "T", "As", "D", "Ar", "API", "AA", "Alpha", "S", "I", "No", "Ab", "Ma", "Average", "Array", "CA", "alpha", "Sum", "G", "Am", "Ang", "NA", "Ac"], "Amari": ["AMARI", "Tamaru", "amace", " Amace", "AMar", "Amarin", "Tamarin", "AMari", "SamARI", "AmARI", "Amar", "amari", " Amarin", "Amani", "Samari", "Amace", "Tamari", "amaru", " Amar", "amarin", "Samarin", " Amani", "amani", "amar", "Tamani", "AMarin", "Amaru", "AMace", " Amaru", "amARI", "Samar"]}}
{"code": "n, y = map(int,input().split())\\ny = y / 1000\\nf = 0\\nfor i in range(n+1):\\n    for j in range(n-i+1):\\n        #print(i)\\n        if 10 * i + 5 * j + 1 * (n - i - j) == y:\\n            print(i)\\n            print(j)\\n            print(n - i - j)\\n            f = 1\\n            break\\n    if f == 1:\\n        break\\nif f != 1:\\n    print(-1)\\n    print(-1)\\n    print(-1)", "target": "465", "substitutes": {"n": ["name", "k", "p", "init", "g", "c", "o", "nc", "num", "h", "ne", "nu", "z", "x", "sn", "w", "ny", "l", "u", "d", "nn", "q", "network", "m", "ns", "ni", "b", "v", "np", "byn", "e", "N", "dn", "ii", "nb"], "y": ["k", "a", "ys", "dy", " z", "p", "Y", "c", "o", "ix", " c", " x", "ay", "ym", "year", " Y", "z", "zy", "yi", "x", "cy", "ny", "yt", "l", "d", " dy", "sy", "m", "yy", "oy", "v", "b", "t", "e", "xy", "col", "vy", "ey"], "f": ["F", "s", "k", "a", "p", "c", "h", " e", "o", "r", "fs", "z", "fc", "af", "w", "l", "u", "d", " F", "m", "b", "v", "e", "t"], "i": ["k", "ie", "int", "p", "ai", "c", "o", "ini", "im", "iu", "z", "si", "x", "yi", "ind", "I", "it", "l", "u", "pi", "d", "ir", "m", "xi", "di", "ni", "ip", "ci", "ij", "v", "b", "e", "t", "id", "li", "ii", "bi"], "j": ["ji", "k", "p", "c", "jo", "h", "o", "r", "year", "z", "je", "l", "u", "uj", "d", "q", "out", "jp", "m", "oy", "ij", "J", "b", "v", "e", "id"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 6)\\ninput = sys.stdin.readline\\n\\ndef dfs(d, v, p):\\n    if (d & 1):\\n        C[v] = 1\\n    for w, u in E[v]:\\n        if u == p:\\n            continue\\n        dfs(d ^ w, u, v)\\n\\nN = int(input())\\nC = [0] * N\\nE = [[] for _ in range(N)]\\nfor i in range(N-1):\\n    u, v, w = map(int, input().split())\\n    u -= 1\\n    v -= 1\\n    E[u].append((w % 2, v))\\n    E[v].append((w % 2, u))\\ndfs(0, 0, -1)\\nprint(*C, sep='\\n')", "target": "300", "substitutes": {"input": ["error", "call", "IN", "raw", "text", "line", "int", "reader", "PUT", "request", "argument", "enter", "element", "socket", "unknown", "target", "format", "result", "comment", "analysis", "inf", "connect", "empty", "temp", "forward", "run", "expression", "response", "image", "file", "current", "exec", "out", "dl", "param", "pull", "output", "parent", "data", "Input", "string", "view", "select", "include", "help", "session", "count", "print", "filter", "source", "config", "form", "feed"], "d": ["s", "k", "did", "dd", "a", "dh", "dom", "g", "c", "dat", "h", "D", "z", "da", "l", "de", "do", "q", "f", "j", "dl", "m", "du", "bd", "dt", "dc", "cd", "data", "b", "e", "t", "pd", "ds", "dos", "dn", "n"], "v": ["s", "k", "vi", "ui", "wa", "a", "value", "ve", "uv", "V", "va", "g", "c", "vu", "h", "y", "r", "o", "ver", "lv", "vs", "vin", "z", "ou", "si", "vp", "x", "nv", "W", "l", "q", "ov", "f", "j", "m", "vv", "vc", "U", "vt", "b", "tv", "e", "t", "all", "sv", "li", "ii", "n"], "p": ["k", "a", "ps", "c", "fp", "y", "o", "tp", "r", "pos", "P", "pa", "vp", "l", "pi", "q", "f", "j", "m", "pp", "up", "b", "np", "e", "t", "pe", "py", "n", "pc"], "C": ["F", "CV", "L", "Cs", "V", "CI", "H", "Q", "X", "CU", "Y", "Size", "c", "K", "O", "P", "B", "T", "D", "EC", "S", "A", "W", "I", "Ch", "VC", "Z", "CG", "Code", "CL", "U", "R", "Input", "M", "CC", "G", "n"], "w": ["hw", "s", "k", "wa", "a", "wt", "win", "g", "c", "aw", "width", "rw", "y", "r", "fw", "h", "we", "wb", "wh", "nu", "z", "wal", "x", "ew", "W", "l", "q", "f", "nw", "m", "sw", "ww", "ws", "U", "wan", "wl", "wd", " W", "b", "e", "wu", "iw", "id", "word", "n"], "u": ["s", "k", "ui", "wa", "a", "uv", "ur", "g", "c", "yu", "o", "y", "r", "h", "un", "Lu", " pu", "iu", "P", "nu", "uid", "uc", "ou", "x", "cu", "mu", "W", "l", "q", " U", "uni", "f", "du", "m", "ue", "up", "tu", "ws", "us", "U", "su", "lu", "b", "e", "t", "ul", "ru", "uu", "n", "eu"], "N": ["F", "Length", "L", "NO", "V", "NN", "H", "Q", "X", "Y", "Size", "NC", "Num", "NS", "K", "Na", "O", "P", "Len", "T", "D", "B", "Ne", "S", "A", "W", "No", "NT", "NG", "Node", "Ni", "Z", "Ns", "ND", "R", "M", "NB", " n", "Wh", "n"], "E": ["F", "CE", "L", "End", "V", "EE", "H", "Es", "Ev", "X", "Q", "Y", "SE", "Entry", "NE", "EA", "K", " e", "IE", "EU", "O", "P", "B", "EC", "D", "Edge", "PE", "S", "W", "I", "OE", "ee", "Ed", "El", "U", "R", "M", "e", "G", "ES"], "_": ["__", " id", " x", " time", "x", "q", "f", " j", "all"], "i": ["k", " it", " z", "c", " I", " id", " ip", "iu", " f", "x", "ind", " q", " il", "I", "j", " j", " ii", "ip"]}}
{"code": "N,M,K=map(int, input().split())\\n\\n\\n#\u96a3\u308a\u5408\u3046\u30d6\u30ed\u30c3\u30afN-1\\ndef cmb(n, r, p):\\n  if (r < 0) or (n < r):\\n    return 0\\n  r = min(r, n - r)\\n  return fact[n] * factinv[r] * factinv[n-r] % p\\n\\np=998244353\\nn = 10 ** 6  # N \u306f\u5fc5\u8981\u5206\u3060\u3051\u7528\u610f\u3059\u308b\\nfact = [1, 1]  # fact[n] = (n! mod p) \u968e\u4e57\u306emod\\nfactinv = [1, 1]  # factinv[n] = ((n!)^(-1) mod p)\\ninv = [0, 1]  # factinv \u8a08\u7b97\u7528\\n\\nfor i in range(2, n + 1):\\n    fact.append((fact[-1] * i) % p)\\n    inv.append((-inv[p % i] * (p // i)) % p)\\n    factinv.append((factinv[-1] * inv[-1]) % p)\\nans=0\\n\\nfor i in range(K+1):\\n    if i==0:\\n        ans+=(M*pow(M-1,N-1,p)%p)\\n        ans%=p\\n    else:\\n        ans+=cmb(N-1,i,p)*(M*pow(M-1,N-1-i,p)%p)\\n        ans%=p\\nprint(ans)", "target": "375", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "Q", "X", "NS", "NM", "CNN", "O", "P", "T", "C", "B", "D", "NP", "S", "W", "I", "Z", "R", " n", "G", "n"], "M": ["F", "MN", "V", "ME", "Q", "X", "Y", "O", "P", "T", "B", "D", "MK", "MD", "S", "W", "CM", "MH", "m", "MC", "U", "R", "J", "SM", "MM", "RM"], "K": ["F", "k", "E", "V", "H", "Q", "X", "Y", "O", "P", "T", "C", "B", "SK", "NK", "KS", "S", "A", "W", "I", "Z", "KR", "U", "R", "J", "G"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\n# import time\\n# import math\\n# import numpy as np\\n# import scipy.sparse.csgraph as cs            # csgraph_from_dense(ndarray, null_value=inf), bellman_ford(G, return_predecessors=True), dijkstra, floyd_warshall\\n# import random                                # random, uniform, randint, randrange, shuffle, sample\\n# import string                                # ascii_lowercase, ascii_uppercase, ascii_letters, digits, hexdigits\\n# import re                                    # re.compile(pattern) => ptn obj; p.search(s), p.match(s), p.finditer(s) => match obj; p.sub(after, s)\\n# from bisect import bisect_left, bisect_right # bisect_left(a, x, lo=0, hi=len(a)) returns i such that all(val<x for val in a[lo:i]) and all(val>-=x for val in a[i:hi]).\\n# from collections import deque                # deque class. deque(L): dq.append(x), dq.appendleft(x), dq.pop(), dq.popleft(), dq.rotate()\\n# from collections import defaultdict          # subclass of dict. defaultdict(facroty)\\n# from collections import Counter              # subclass of dict. Counter(iter): c.elements(), c.most_common(n), c.subtract(iter)\\n# from datetime import date, datetime          # date.today(), date(year,month,day) => date obj; datetime.now(), datetime(year,month,day,hour,second,microsecond) => datetime obj; subtraction => timedelta obj\\n# from datetime.datetime import strptime       # strptime('2019/01/01 10:05:20', '%Y/%m/%d/ %H:%M:%S') returns datetime obj\\n# from datetime import timedelta               # td.days, td.seconds, td.microseconds, td.total_seconds(). abs function is also available.\\n# from copy import copy, deepcopy              # use deepcopy to copy multi-dimentional matrix without reference\\n# from functools import reduce                 # reduce(f, iter[, init])\\n# from functools import lru_cache              # @lrucache ...arguments of functions should be able to be keys of dict (e.g. list is not allowed)\\n# from heapq import heapify, heappush, heappop # built-in list. heapify(L) changes list in-place to min-heap in O(n), heappush(heapL, x) and heappop(heapL) in O(lgn).\\n# from heapq import nlargest, nsmallest        # nlargest(n, iter[, key]) returns k-largest-list in O(n+klgn).\\n# from itertools import count, cycle, repeat   # count(start[,step]), cycle(iter), repeat(elm[,n])\\n# from itertools import groupby                # [(k, list(g)) for k, g in groupby('000112')] returns [('0',['0','0','0']), ('1',['1','1']), ('2',['2'])]\\n# from itertools import starmap                # starmap(pow, [[2,5], [3,2]]) returns [32, 9]\\n# from itertools import product, permutations  # product(iter, repeat=n), permutations(iter[,r])\\n# from itertools import combinations, combinations_with_replacement\\nfrom itertools import accumulate             # accumulate(iter[, f])\\n# from operator import itemgetter              # itemgetter(1), itemgetter('key')\\n# from fractions import gcd                    # for Python 3.4 (previous contest @AtCoder)\\n\\n\\n\\ndef main():\\n    mod = 1000000007                # 10^9+7\\n    inf = float('inf')              # sys.float_info.max = 1.79...e+308\\n    # inf = 2 ** 64 - 1             # (for fast JIT compile in PyPy) 1.84...e+19\\n    sys.setrecursionlimit(10**6)    # 1000 -> 1000000\\n    def input(): return sys.stdin.readline().rstrip()\\n    def ii():    return int(input())\\n    def mi():    return map(int, input().split())\\n    def mi_0():  return map(lambda x: int(x)-1, input().split())\\n    def lmi():   return list(map(int, input().split()))\\n    def lmi_0(): return list(map(lambda x: int(x)-1, input().split()))\\n    def li():    return list(input())\\n    \\n    n, w = mi()\\n    L = [lmi() for _ in range(n)]\\n    w1 = L[0][0]\\n    if n * (w1 + 3) <= w:\\n        print(sum(map(lambda x: x[1], L)))\\n    elif n * w <= 10**6:\\n        # \u666e\u901a\u306e dp \u6226\u7565\\n        dp = [0 for _ in range(w+1)]\\n        for i in range(n):\\n            weight, value = L[i]\\n            for j in range(w, 0, -1):\\n                if j - weight >= 0:\\n                    dp[j] = max(dp[j], dp[j - weight] + value)\\n        print(dp[w])\\n    else:\\n        group_by_weight = [[] for _ in range(4)]\\n        for weight, value in L:\\n            group_by_weight[weight - w1].append(value)\\n        w1_0 = sorted(group_by_weight[0], reverse=True)\\n        w1_1 = sorted(group_by_weight[1], reverse=True)\\n        w1_2 = sorted(group_by_weight[2], reverse=True)\\n        w1_3 = sorted(group_by_weight[3], reverse=True)\\n        accum_0, accum_1, accum_2, accum_3 = map(lambda x: [0] + list(accumulate(x)), [w1_0, w1_1, w1_2, w1_3])\\n        ans = -1\\n        for i in range(len(w1_0)+1):\\n            for j in range(len(w1_1)+1):\\n                for k in range(len(w1_2)+1):\\n                    for l in range(len(w1_3)+1):\\n                        if (i+j+k+l)*w1 + j + 2*k + 3*l <= w:\\n                            ans = max(ans, accum_0[i] + accum_1[j] + accum_2[k] + accum_3[l])\\n        print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "512", "substitutes": {}}
{"code": "import heapq\\n\\nn, c = map(int, input().split())\\nd = [list(map(int, input().split())) for _ in range(c)]\\ngrid = [list(map(int, input().split())) for _ in range(n)]\\n\\nMAXN = 500\\nMAXC = 30\\n\\ns = [[0 for _ in range(MAXC)] for _ in range(3)]\\nfor i in range(3):\\n    for co in range(c):\\n        for x in range(n):\\n            for y in range(n):\\n                if (x+y)%3 == i:\\n                    s[i][co] += d[grid[x][y]-1][co]\\n\\nans = 10**10\\nfor c0 in range(c):\\n    for c1 in range(c):\\n        if c0 == c1:\\n            continue\\n        for c2 in range(c):\\n            if c0 == c2 or c1 == c2:\\n                continue\\n            ans = min(ans, s[0][c0]+s[1][c1]+s[2][c2])\\nprint(ans)\\n", "target": "516", "substitutes": {"n": ["k", "p", "na", "ic", "g", "number", "nc", "o", "r", "net", "en", "C", "ne", "ng", "z", "sn", "w", "con", "l", "cn", "u", "nn", "q", "f", "network", "j", "m", "ac", "ns", "no", "ni", "nr", "b", "v", "t", "N", "e", "nb"], "c": ["k", "cycle", "code", "p", "g", "r", "o", "h", "C", "coll", "size", "lc", "z", "ch", "ce", "cache", "cy", "cu", "w", "con", "l", "u", "q", "f", "m", "ac", "ci", "b", "v", "e", "t", "count", "cc", "col", "xc", "cl"], "d": ["k", "dd", "p", "g", "dat", "dict", "r", "o", "h", "D", "z", "w", "l", "u", "q", "f", "j", "cs", "m", "cd", "di", "data", "db", "ci", "b", "dim", "v", "e", "ds", "ad"], "_": ["__", "code", "non", "place", "p", "___", " __", " un", "j", "f", "J", "all", "val", "block"], "grid": ["house", "cube", "k", "dd", "line", "Grid", "ic", "g", "h", "gu", "chain", "div", "z", "edge", "cu", "w", "cells", "flat", "cm", "lines", "u", "cal", "q", "row", "f", "m", "ci", "dim", "v", "order", "cell", "id", "ii", "ad", "range", "draw", "sky"], "MAXN": ["maxT", " MAXn", "maxn", "MaxC", " MAXT", "MaxN", "MAXT", "maxC", "maxN", "MAXn", "MaxT", "Maxn"], "MAXC": ["Maximumc", "MaxK", "MAXD", "maxc", "maxC", "maxN", "MAXK", "MAXI", "Maxc", "MINC", "MaxN", "MINI", "maxD", "MaximumD", "MaxC", "MaximumN", "MINK", "MINN", "MAXc", "MaxD", "MaxI", "maxI", "MaximumC", "maxK"], "s": ["ss", " days", " lines", "sq", "a", "strings", "south", " cells", "words", "states", "p", "ps", "g", "sets", "storage", "o", "r", "sd", "h", "ks", "conf", "z", "si", "es", "S", " years", "series", "w", "cells", " stations", "tests", "lines", "l", "u", "services", "parts", "sg", "f", "cs", "m", "ns", "ws", "gs", "b", "v", " parts", " states", "e", " steps", "ls", "t", "ds", "its", "ops", "comments"], "i": ["k", "int", "p", "ic", "ai", "g", "o", "r", "ix", "ini", "iu", "z", "index", "cu", "ind", "w", "I", "l", "u", "pi", "q", "io", "j", "f", "m", "xi", "di", "ci", "b", "v", "e", "t", "ice", "id", "ii", "ip"], "co": ["k", "loc", "cycle", "line", "code", "mi", "go", "o", "oc", "coll", "coord", "local", "po", "cost", "index", "can", "cy", "cu", "ind", "cross", "ko", "con", "CO", "j", "f", "ca", "cs", "ac", "m", "cos", "di", "no", "ci", "cf", "ice", "cell", "xy", "e", "col", "cc", "pc", "xc", "ii", "Co", "li", "lo"], "x": ["k", "int", "code", "X", "p", "ic", "xs", "g", "xx", "yx", "h", "o", "ix", "r", "z", "ex", "w", "cross", "l", "u", "q", "f", "j", "ax", "ac", "m", "xi", "ci", "v", "b", "e", "xy", "col", "id", "xc", "on"], "y": ["yr", "k", "a", "dy", "ye", "gy", "p", "Y", "g", "yn", "o", "h", "year", "z", "zy", "cy", "w", "l", "u", "q", "j", "sy", "f", "m", "yy", "ya", "oy", "iy", "yl", "b", "v", "e", "t", "ice", "col", "py", "vy", "ii", "ey", "sky"], "ans": ["ents", "lan", "nas", "ras", "amps", "eps", "span", "atan", "na", "gan", "ats", "ions", "aning", "anas", "AN", "ANS", "anes", "ks", "aces", "ann", "anse", "ani", "ares", "anc", "ays", "ana", "can", "outs", " means", "ars", "lines", "aned", "ons", "aus", "leans", "sk", "cs", "ants", " spans", "ns", "man", "scan", "os", "san", "ls", "cons", "ians", "ds", "plan", "an", "ins"], "c0": ["x50", " c3", "c3", "dc8", "C0", "lc1", "x3", " c50", "c8", "dc1", "x0", "x2", "c50", "C00", "C1", "c00", " c8", "C2", "dc0", " c00", "C50", "lc0", "lc50", "lc8", "lc3", "lc2", "dc2", "lc00"], "c1": [" c3", "c3", "a1", " c9", "ac0", "cf8", "c81", "lc1", "C0", "c01", "c8", "cf01", "a9", "dc100", "C3", "lc01", "cOne", "cf1", "ac3", "cf2", "dcOne", "dc1", "lc81", "C1", "c100", " c8", "c9", "C2", "cf81", " c81", "lc8", "aOne", " cOne", "lc3", "C01", "cf3", "lc2", "ac1", "ac2", "a100", " c100", "dc9"], "c2": [" c3", "c3", "ec2", "ac4", "C0", "lc1", "c4", "p4", "c82", "f2", "f4", "e4", "e1", "ecSecond", "ac3", "p0", "C4", "e3", "lc4", "C1", "f82", "p1", "cSecond", "C2", "p2", " c82", "ec1", "lc0", "f1", " c4", "fSecond", " cSecond", "ec82", "e2", "f0", "lc2", "ac1", "ac2"]}}
{"code": "def si(p):\\n  if p == 0:\\n    return \"-\"\\n  else:\\n    return \"+\"\\nN = int(input())\\nX = [N // 1000, (N % 1000) // 100, (N % 100) // 10, N % 10]\\nf = 0\\nfor i in range(2):\\n  for j in range(2):\\n    for k in range(2):\\n      x = X[0] + (2 * i - 1) * X[1] + (2 * j - 1) * X[2] + (2 * k - 1) * X[3]\\n      if x == 7:\\n        print(str(X[0]) + si(i) + str(X[1]) + si(j) + str(X[2]) + si(k) + str(X[3]) + \"=7\")\\n        f = 1\\n        break\\n    if f == 1:\\n      break\\n  if f == 1:\\n    break", "target": "504", "substitutes": {"p": ["pid", "python", "ps", "c", "fp", "o", "y", "tp", "r", "h", "pr", "cp", "P", "sp", "proc", "pi", "q", "jp", "m", "pp", "v", "b", "np", "padding", "t", "e", "pn", "py", "pc", "param", "n"], "N": ["F", "E", "Number", "L", "NO", "V", "H", "Q", "Y", "Size", "Num", "NS", "K", "Na", "NM", "O", "P", "T", "C", "B", "D", "Ne", "S", "A", "W", "NY", "I", "NT", "NG", "Ni", "Z", "Ns", "U", "R", "M", "J", "G", " n", "Wh", "NA", "n"], "X": ["Tx", "V", "XM", "SC", "Check", "SE", "XP", "K", "Left", "WH", "Word", "Do", "Line", "WS", "Context", "Post", "Value", "CP", "G", "Ex", "L", "H", "Q", "XX", "EX", "IX", "POST", "TX", "Rex", "Code", "Array", "PH", "U", "J", "String", "Sax", "Location", "Sex", "Co", "Feature", "Group", "Cross", "CE", "Exp", "Text", "ZX", "FF", "B", "C", "Section", "Zip", "S", "A", "HTTP", "US", "Z", "CL", "UX", "R", "M", "Phoenix", "XL", "ML", "Work", "F", "E", "Max", "DX", "Y", "Forward", "Form", "MX", "Test", "JSON", "Day", "P", "T", "D", "PE", "W", "File", "I", "Sc", "XY", "Now", "Time", "CC"], "f": ["F", "s", "fd", "xf", "g", "c", "fp", "fx", "h", "y", "o", "rf", "fe", "inf", "tf", "fs", "z", "fc", "fit", "fn", "fm", "diff", "af", "w", "l", "bf", "d", "fact", " F", "q", "u", "ff", "m", "fun", "function", "fen", "fl", "b", "v", "cf", "t", "e", "flow", "fine", "form", "feed", "frequency", "n"], "i": ["ji", "ui", "a", "ie", "int", "qi", "mi", "phi", "ai", "c", "y", "o", "ini", "ix", "iu", "z", "si", "yi", "ind", "w", "I", "l", "u", "pi", "io", "m", "xi", "ori", "di", "ni", "ci", "ip", "v", "b", "zi", "id", "li", "ii", "ik", "n"], "j": ["ji", "ja", "g", "c", "jo", "y", "o", "jj", "h", "r", "ijk", "z", "si", "w", "l", "u", "d", "q", "job", "jp", "m", "xi", "aj", "ij", "J", "v", "b", "key", "e", "li", "ii", "n"], "k": ["km", "kid", "ke", "g", "c", "dk", "K", "y", "h", "o", "r", "kk", "ijk", "ks", "z", "ch", "kw", "w", "ak", "l", "ok", "u", "unk", "q", "ki", "sk", "m", "ku", "v", "b", "key", "ik", "uk", "n"], "x": ["c", "xs", "xx", "fx", "y", "h", "r", "ix", "rx", "work", "z", "ex", "index", "w", "cross", "l", "wx", "u", "q", "ax", "m", "ww", "xi", "xb", "data", "ct", "v", "b", "xp", "e", "t", "xes", "xc", "xa", "n"]}}
{"code": "n=int(input())\\nl=[]\\nwhile n!=1 and n!=0:\\n  l.append(abs(n)%2)\\n  if n>0:\\n    n=-n\\n    n//=(-2)\\n    n=-n\\n  elif n<0:\\n    n=abs(n)\\n    n//=(-2)\\n    n=-n\\nl.append(n)\\nl=l[::-1]\\nans=str()\\nfor i in l:\\n  ans+=str(i)\\nprint(ans)\\n", "target": "24", "substitutes": {"n": ["s", "k", "part", "non", "p", "na", "nd", "g", "c", "o", "r", "nc", "en", "num", "un", "number", "y", "net", "rn", "ne", "nu", "z", "local", "long", "ng", "fn", "x", "nan", "sn", "node", "ny", "nat", "cn", "d", "u", "nt", "nn", "f", "ln", "j", "m", "network", "none", "nw", "ns", "no", "ni", "nl", "nr", "len", "b", "v", "t", "N", "pn", "nit", "e", "all", "dn", "nb", "an", "nor"], "l": ["lp", "isl", "ol", "L", "line", " L", "p", "g", "c", "ql", "o", "r", "sl", "el", "ml", "la", "left", "lo", "lv", "lc", "kl", "z", "bl", "lines", "u", "d", "Li", "ll", "ln", "dl", "f", "j", "m", "lf", "acl", "rl", "list", "nl", "wl", "fl", "live", "lu", "b", "v", "len", "ell", "t", "ls", "e", "il", "li", "ul"], "ans": ["aid", "a", "ents", "lan", "span", "nas", "ras", "atan", "na", "p", "ats", "ions", "aning", "anas", "AN", "ANS", "ks", "mean", "ane", "ann", "anon", "ani", "anc", "ana", "can", "nan", "sn", "lang", "ant", "anus", "aned", "anz", "ons", "aus", "ens", "leans", "ants", "ns", "nl", "san", "ean", "plan", "an", "ins"], "i": ["gi", "k", "ie", "int", "p", "ai", "c", " I", "h", "r", "o", "ini", "iu", "iter", "z", "si", "x", "ind", "I", "u", "d", "pi", "j", "f", "io", "m", "xi", "ni", "b", "v", "e", "id", "li", "ii", "bi", "ip"]}}
{"code": "s = list(input())\\nn = len(s)\\nans = 10**19\\n# \u9023\u7d9a\u3059\u308b\uff13\u3064\u306e\u6570\u5b57\u3068\u6bd4\u8f03\u3059\u308b\u3002\\nfor i in range(1, n-1):\\n    a = int(\"\".join([s[i-1], s[i], s[i+1]]))\\n    ans = min(abs(753-a), ans)\\nprint(ans)\\n", "target": "122", "substitutes": {"s": ["strings", "a", "south", "ins", "words", "states", "p", "g", "c", "sym", "i", "o", "r", "speech", "S", "w", "tests", "args", "parts", "services", "u", "d", "lines", "less", "f", "m", "sync", "ns", "gs", "b", "ts", "v", "string", "e", "ls", "t", "source", "comments"], "n": [" N", "k", "p", "c", "i", " ni", "o", "nc", "num", "en", "size", "z", "sn", "l", "d", "nn", "q", "nt", "f", "j", "m", "ns", "len", "b", "e", "N", "count", "nb"], "ans": ["ss", " p", "int", "span", " span", "ai", "r", "en", " c", " x", "size", "z", "x", " chars", "A", "max", "q", " m", "ns", " an", " len", "an"]}}
{"code": "N = int(input())\\nL = list(\"abcdefghijklmnopqrstuvwxyz\")\\na = 1\\nwhile N > 26**a:\\n    N = N - 26**a\\n    a += 1\\n \\npre = []\\nfor i in reversed(range(1,a)):\\n    r = (N-1) // 26**i\\n    pre.append(r)\\n    N = int(N%(26**i))\\n \\nans = ''\\nfor i in pre:\\n    ans += L[i]\\nprint(ans+L[N-1])", "target": "639", "substitutes": {"N": ["F", "E", "Length", "MN", "NR", "V", "NN", "NL", "H", "Q", "X", "Sn", "Y", "NC", "Size", "Num", "NS", "NE", "NI", "K", "Na", "O", "P", "T", "C", "B", "D", "Len", "NP", "Ne", "S", "A", "W", "I", "RN", "No", "NT", "NG", "Node", "Ni", "Z", "Ns", "ns", "R", "M", " n", "G", "NA", "An", "n"], "L": ["F", "E", "V", "LT", "NL", "H", "Q", "LS", "p", "X", "LA", "PRE", "LP", "Lu", "O", "P", "T", "C", "B", "D", "LM", "S", "SL", "W", "I", "l", "Li", "LR", "LE", "ln", "list", "R", "M", "J", "LI", "LL", "G"], "a": ["aa", "s", "wa", "va", "span", "active", "p", "na", "access", "ai", "aw", "c", "y", "o", "api", "ba", "mA", "ab", "z", "array", "AA", "ana", "index", "A", "ar", "af", "w", "ia", "l", "u", "pi", "d", "aaa", "ca", "f", "sa", "j", "asa", "ac", "m", "area", "aj", "am", "ae", "alpha", "b", "e", "all", "an", "ad", "offset", "n"], "pre": ["lp", "min", "cond", "p", "arr", "pri", "inter", "post", "PRE", "prev", "per", "pr", "pos", "re", "round", "P", "array", "index", "Pre", "ar", "PR", "par", "start", "pred", "block", "l", "patch", "before", "arp", " post", "j", "ori", "pad", "list", "prep", "base", "pair", "order", " prep", " pref", "pret", "py", " Pre", "plan", "li", "prefix", "part", "n", " PRE", "pc"], "i": ["aa", "k", " p", "int", "p", "ai", "c", "y", "rec", "ini", "o", "h", "iu", "z", "si", "index", "x", "ar", "ind", "w", "I", "it", "l", "u", "d", "pi", "f", "j", "io", "m", "xi", "ori", "di", "ri", "list", "ip", "ci", "ni", "alpha", "b", "v", "e", "multi", "id", "li", "ii", "bi", "n"], "r": ["rh", "rr", "k", "p", "rar", "rup", "c", "o", "pr", "rf", "re", "lr", "rn", "P", "x", "ar", "u", "d", "rb", "ra", "j", "f", "sr", "range", "m", "ir", "rl", "rt", "R", "adr", "nr", "b", "e", "fr", "ru", "er", "rs", "n"], "ans": ["s", "lan", "span", "ras", "amps", "nas", "eps", "p", "na", "ps", "ai", "Ann", "AN", "ANS", "aces", "ann", "ani", "anc", "annot", "ana", "x", "can", "S", "A", "An", "ars", "ar", "kin", "cross", "anus", "aned", "ace", "nn", "ons", "anne", "ln", "sk", "cs", "ants", "ns", "scan", "os", "features", "ips", "plan", "NA", "an", "n", "ins"]}}
{"code": "W,H,x,y,r=map(int,input().split())\\nprint(\"Yes\"*(r<=x<=W-r)*(r<=y<=H-r)or\"No\")\\n", "target": "563", "substitutes": {"W": ["F", "Length", "E", "L", "V", "Q", "X", " w", "Y", "Size", "Width", "WP", "K", "h", "SW", "SH", "RW", "O", "P", "B", "C", "T", "WC", "A", "w", "WM", "U", "R", "M", "N", "VW", "G", "Wh", "FW", "Work", "BW"], "H": ["F", "rh", "Hi", " h", "E", "L", "V", "RH", "Q", "X", "Y", "Width", "K", "h", "SH", "P", "T", "C", "B", "NH", "w", "EH", "Z", "HH", "U", "R", "Height", "M", "FH", "N", "G", "CH"], "x": ["dx", "a", "L", "int", "X", "p", "Y", "phi", "c", "i", "xx", "width", "h", "rx", "px", "T", "C", "z", "ex", "wy", "image", "w", "l", "u", "d", "f", "ax", "m", "xi", "R", "v", "b", "xy", "n"], "y": ["dy", "X", "p", "Y", "phi", "c", "i", "h", "o", "height", "z", "ty", "yi", "yo", "cy", "w", "yt", "l", "u", "j", "f", "m", "yy", "ya", "oy", "R", "v", "b", "t", "e", "py", "vy", "ry", "ey", "n"], "r": ["rh", "rr", "k", "mr", " R", "p", "g", "c", "err", "i", "h", "o", "result", "pr", "rf", "rd", "rx", "lr", "hr", "ar", "w", "Rh", "l", "rb", "d", "q", "ra", "f", "rs", "sr", "rc", "m", "right", "dr", "rl", "ir", "rg", "br", "R", "nr", "v", "b", "e", "cr", "fr", "kr", "t", "er", "range", "n"]}}
{"code": "n, a, b = list(map(int, input().split()))\\nans = 0\\n\\n\\ndef dsum(n):\\n    wa = 0\\n    while n > 0:\\n        wa += n % 10\\n        n //= 10\\n    return wa\\n\\n\\nfor i in range(1, n + 1):\\n    res = i\\n    if a <= dsum(i) <= b:\\n        ans += i\\n\\nprint(ans)\\n", "target": "704", "substitutes": {"n": ["s", "k", "p", "na", "g", "c", "o", "y", "nc", "r", "num", "net", "un", "ne", "z", "fn", "x", "nan", "w", "l", "u", "d", "cn", "nn", "nt", "f", "j", "m", "ns", "ni", "v", "e", "N", "t", "pn", "nb", "an"], "a": ["aa", "va", "ma", "p", "na", "ai", "c", "aw", "fa", "y", "ba", "da", "x", "pa", "A", "w", "ata", "u", "d", "ra", "ta", "f", "sa", "ca", "ac", "asa", "am", "alpha", "ha", "an", "ad"], "b": ["s", "be", "k", "fb", "p", "bs", "g", "c", "y", "o", "r", "wb", "beta", "B", "ba", "ab", "x", "w", "sb", "l", "bh", "bf", "d", "bb", "u", "rb", "abb", "f", "v", "e", "nb", "lb", "bi"], "ans": ["s", "aid", "lan", "nas", "ras", "eps", "na", "ai", "aw", "fa", "Na", "activation", "anas", "AN", "ANS", "vs", "ann", "ani", "au", "anc", "ays", "ana", "x", "can", "nan", "w", "ia", "aned", "nn", "ons", "aus", "anne", "sk", "sa", "ants", "ns", "ran", "os", "wan", "actions", "an", "ls", "Wa", "NA", "sam", " na", "was"], "wa": ["aa", " Wa", "va", "wt", "ma", " da", "na", "ai", "qa", "aw", " w", "fa", " ca", "Na", "xa", "awa", " na", "la", "ba", "wave", "ann", "au", "wal", "pa", "da", "w", "ia", "ta", "ra", "wat", "ca", "sa", " fa", "sw", "WA", "ws", "oa", "alpha", "ea", "ha", "Wa", "an"], "i": ["k", "int", "p", "phi", "ai", "init", "c", "y", "r", "o", "ini", "iu", "z", "si", "index", "x", "ind", "start", "w", "I", "ia", "it", "l", "u", "pi", "d", "j", "io", "f", "m", "xi", "di", "ri", "ni", "ip", "ci", "v", "e", "id", "li", "ii", "bi", "ti"], "res": ["ss", "aid", "cas", "win", "na", "fa", "r", "Na", "nc", "results", "ANS", "ann", "ne", "ani", "ana", "pa", "ar", "A", "ia", "nz", "ra", "q", "ran", "os", "wan", "alpha", "ea", "NA", "ii"]}}
{"code": "from collections import deque\\ns = deque(list(input()))\\nt = deque(list(input()))\\n\\nfor i in range(len(s)+1):\\n  if s == t:\\n    print(\"Yes\")\\n    exit()\\n  p = s.pop()\\n  s.appendleft(p)\\nprint(\"No\")", "target": "721", "substitutes": {"s": ["ss", "a", "strings", "ins", "ps", "xs", "g", "c", "sets", "o", "sl", "y", "r", "sp", "temp", "si", "es", "search", "als", "x", "S", "w", "sb", "tests", "args", "l", "lines", "ses", "d", "u", "services", "items", "files", "f", "cs", "ssl", "m", "sections", "sync", "ns", "self", "ws", "os", "ts", "b", "ings", "v", "gs", "e", "ls", "ips", "ds", "se", "n"], "t": ["the", "python", "tm", "g", "c", "y", "o", "tp", "h", "tmp", "tf", "T", "temp", "z", "ty", "es", "x", "w", "it", "l", "u", "d", "ta", "f", "j", "m", "ts", "v", "b", "e", "test", "tc", "n"], "i": ["ih", "k", "c", "h", "y", "iu", "lo", "ti", "z", "si", "index", "ind", "start", "I", "it", "l", "u", "f", "e", "il", "id", "li", "ii", "n", "ip"], "p": ["lp", "op", "python", "ps", "g", "c", "fp", "y", "r", "tp", "o", "pos", "P", "pt", "sp", "z", "po", "l", "u", "d", "q", "f", "j", "jp", "m", "pp", "input", "b", "v", "np", "e", "n", "pc"]}}
{"code": "part = set()\\nS = input()\\nK = int(input())\\n\\npart.add(S)\\nfor i in range(len(S)):\\n  for j in range(i,i+K):\\n    part.add(S[i:j+1])\\n    \\npart = list(part)\\npart.sort()\\nprint(part[K-1])\\n", "target": "246", "substitutes": {"part": ["error", "letter", "name", "s", "group", "change", "span", "p", "place", "state", "element", "number", "case", "per", "result", "but", "pos", "section", "slice", "P", "split", "party", "sp", "chapter", "component", "array", "art", "diff", "start", "parts", "patch", " Part", "object", "position", "sort", "point", "join", "parent", "list", "Part", "data", "type", "key", "PART", "pair", "base", "space", "order", "step", "inner", "block"], "S": ["F", "s", "L", "DS", "Sort", "V", "H", "X", "SF", "SE", "SR", "Si", "PS", "SH", "Parts", "ST", "SI", "OSS", "P", "T", "C", "B", "SK", "D", "Space", "A", "SL", "I", "SS", "Single", "U", "R", "Part", "M", "PART", "SP", "N", "G", "SU"], "K": ["F", "k", "KK", "E", "Length", "L", "KI", "V", "H", "Q", "X", "Y", "IK", "KE", "Sk", "O", "P", "T", "C", "B", "SK", "D", "KS", "KB", "Kent", "W", "KC", "I", "Z", "KR", "PK", "U", "J", "M", "N", "G", "KN", "CH", "Ku"], "i": ["ih", "s", "k", "ji", "ui", "a", "ie", "int", "mi", "p", "phi", "ai", "c", "h", "y", "ini", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "f", "m", "xi", "ci", "ij", "v", "b", "e", "id", "li", "ii", "n"], "j": ["ji", "k", "a", "ie", "ali", "p", "jo", "h", "o", "y", "jj", "dj", "ijk", "iq", "jl", "z", "je", "index", "x", "ind", "adj", "obj", "l", "u", "d", "uj", "jp", "f", "jc", "aj", "ij", "J", "b", "ld", " ii", "v", "kj", "li", "ii", "n"]}}
{"code": "from collections import deque\\nn=int(input())\\narr=[[] for _ in range(n)]\\nfor i in range(n-1):\\n    a,b=map(int,input().split())\\n    arr[a-1].append([b-1,i])\\n    arr[b-1].append([a-1,i])\\n\\nque=deque([0])\\nans=[0]*(n-1)\\npar=[0]*n\\npar[0]=-1\\nwhile que:\\n    x=que.popleft()\\n    p=par[x]\\n    color=1\\n    for tup in arr[x]:\\n        if p==color:\\n            color+=1\\n        if ans[tup[1]]==0:\\n            ans[tup[1]]=color\\n            par[tup[0]]=color\\n            color+=1\\n            que.append(tup[0])\\nprint(max(ans))\\nprint(*ans,sep='\\n')", "target": "157", "substitutes": {"n": [" N", "min", "s", "k", " nin", "span", " span", "na", " number", "c", "o", "r", "number", "num", " c", "y", "net", "en", "h", "nc", " rand", "ne", "z", "nan", "ar", "sn", "w", " ar", "con", "l", " np", "u", "d", "f", "j", "network", "m", "ns", " init", "v", "len", "t", "N", "e", "pn", "id", " l", "nb", " len", " size"], "arr": ["aa", "amp", "int", "str", "pre", "img", "ai", "dat", "arc", "plot", "r", "prev", "app", "pr", "rep", "orig", "air", "ap", "iter", "attr", "coll", "ann", "Ar", "ab", "array", "att", "ch", "ar", "series", "stack", "cart", "bb", "q", "arp", "aaa", "cat", "Array", "pad", "br", "list", "batch", "arch", "bar", "asc", "fr", "enc", "abc", "parse", "ang", "res"], "_": [" id", " time", " q", "l", "q", "f", " int", "len"], "i": ["s", "k", " bi", "ib", "int", "ai", "c", " I", " id", "y", " v", " iP", "ix", " ip", " c", "r", "h", "o", "z", "si", "index", "ind", "I", "l", "u", "pi", "d", "j", "f", "m", " j", "ci", "v", " ii", "e", "t", "id", "li", "ii", "bi", "ip"], "a": ["aa", "s", "k", "va", "na", "ai", "c", "y", "o", "h", "ba", "ab", "z", "da", "ar", "A", "af", "w", "l", "u", "d", "f", "ca", "sa", "ac", "asa", "aj", "ae", "alpha", "e", "an", "ad"], "b": ["s", "aa", "ib", "fb", "bs", "g", "c", "y", "r", "o", "beta", "B", "ba", "ab", "z", "pa", "w", "sb", "body", "l", "u", "d", "bb", "j", "f", "db", "v", "base", "e", "bas", "nb", "lb"], "que": ["cur", "layer", "change", "cycle", "line", "pool", "code", "sh", "vel", "queue", "qu", "qa", "ai", "c", " queue", "h", "lock", "en", "pos", "log", "iq", "buf", "fe", "ph", "la", "lc", "cle", "au", "array", "pen", "ques", "cache", "pa", "ar", "file", "stack", "conn", "bug", "con", "l", "patch", "req", "pl", "buffer", "q", "out", "cli", "sync", "core", "pull", "ue", "list", "hi", "db", "fl", "e", "pe", "ha", "sem", "seq", "py", "cl", "Que"], "ans": ["s", "auto", "ents", "lan", "cas", "ras", "amps", "nas", "ams", "na", "ps", "ai", "xs", "ats", "atan", "ions", "var", "anas", "ads", "ANS", "ks", "mean", "aces", "ann", "anon", "anc", "ani", "array", "ays", "ana", "annot", "params", "can", "nan", "eps", "ars", "ar", "anus", "args", "aned", "parts", "ons", "aus", "sk", "ens", "cs", "trans", "ants", "ns", "os", "powers", "plan", "ians", "ds", "ops", "span", "ang", "an", "ins"], "par": ["pid", "pal", "pat", "ps", "pre", "arg", "pol", "var", "arc", "r", "rec", "per", "prev", "pr", "pos", "like", "ph", "sp", "proc", "po", "array", "pa", "params", "comp", "ar", "ars", "patch", "pi", "arp", "star", "pic", "param", "ax", "cat", "rel", "parent", "Par", "prep", "pair", "pe", "parse", "part", "pc"], "x": ["dx", "X", "event", "xf", "xs", "c", "xx", "yx", "y", "rx", "h", "ix", "px", "ph", "z", "xt", "ex", "index", "xxxx", "w", "cross", "l", "ctx", "u", "q", "f", "j", "ax", "xi", "xe", "v", "xp", "e", "t", "pe", "xy", "id", "xc", "xa"], "p": ["lp", "op", "part", "ps", "c", "y", "o", "r", "per", "h", "pr", "cp", "ap", "P", "sp", "pa", "ar", "l", "j", "f", "m", "pp", "point", "up", "parent", "type", "v", "np", "e", "pe", "t", "col", "pc", "param", "an"], "color": ["k", "shadow", "cycle", "auto", "line", "olor", "COLOR", "span", "cor", "stroke", "pal", "prop", "font", "g", "c", "our", "resource", "arc", "orange", "center", "y", "r", "o", "light", "number", "border", "pos", "comment", "like", "blue", "attr", "coll", "size", "background", "colour", "edge", "white", "index", "url", "image", "w", "l", "max", "star", "rc", "ac", "style", "char", "none", "Color", "co", "parent", "gray", "alpha", "black", "type", "pixel", "key", "pair", "space", "theme", "bg", "col", "fill", "source"], "tup": ["ctup", "dup", "Tup", "ptup", "atups", "ptups", "ptupp", "cupp", "cup", "eup", " tups", "ptuple", "ptump", "Tupid", "cups", "nump", "tupid", "atupp", "pups", "ctupp", "nup", "atup", "tump", "tmp", "Tups", "eupp", "pupp", "dups", "eump", "ctups", "ptmp", "pump", "Tmp", "dmp", " tupp", "tuple", "Tupp", "eups", "stuple", "stupp", "nuple", "atupid", "nups", "ctump", "stup", "tupp", "stups", "cump", "Tump", " tupid", "pup", "dump", "tups", "nupp"]}}
{"code": "n=int(input())\\n*a,=map(int,input().split())\\nmod=10**9+7\\ncol=[0]*(n+1)\\ncol[0]=3\\n\\nans=1\\n\\nfor i in range(n):\\n    ans*=col[a[i]]\\n    col[a[i]]-=1\\n    col[a[i]+1]+=1\\n    ans%=mod\\n\\nprint(ans%mod)\\n", "target": "560", "substitutes": {"n": ["s", "k", "p", "g", "c", "o", "r", "nc", "num", "y", "net", "ne", "z", "x", "w", "l", "u", "d", "f", "j", "m", "ns", "b", "e", "N", "count", "t", "nb", "an"], "a": ["s", "aa", "auto", "int", "ao", "va", "ma", "p", "qa", "ai", "c", "aw", "fa", "y", "o", "app", "array", "da", "x", "index", "ar", "A", "w", "args", "ata", "u", "ca", "f", "sa", "ac", "ga", "area", "am", "aj", "ae", "alpha", "b", "ea", "all", "add", "an", "ad"], "mod": ["min", "mode", "dig", "MOD", "perm", "ai", "mult", "sect", "post", "num", "im", "cum", "reg", "size", "rot", " Mod", "div", "scale", "od", "run", "oct", "comp", "module", "ind", "bug", "cm", "sec", "d", "max", "row", "j", "sort", "m", "ac", "comb", "check", "bin", "dim", "ow", "dec", "add", "step", "month", "part", "an", "ad", "rad", "Mod"], "col": ["k", "loc", "ol", "group", "int", "table", "cond", "p", "na", "rows", "c", "sect", "y", "num", "cont", "cp", "year", "coll", "ann", "COL", "ana", "index", "x", "cross", "anch", "con", "cm", "l", "patch", "child", "cal", "icol", "ign", "row", "ll", "ca", "cs", "ac", "cat", " column", "co", "act", "parent", "ct", "ell", "cf", "count", "cell", "il", "Col", "val", "part", "column", "sum", "block", "ref"], "ans": ["ano", "s", "ain", "ents", "lan", "span", "cas", " answers", "amps", "nas", "p", "na", "ras", "ai", "ats", "ions", "aning", " ads", "AN", "ANS", "anes", " news", "ann", "anon", "anc", "ani", " cs", "ana", "es", "ays", "x", "can", "nan", "A", " means", "ars", " sins", " chars", " scans", "aned", "chan", "ace", " rows", "ons", "sk", "cs", "ac", "ca", "ants", " spans", "ns", "leans", "no", "os", "ran", "len", "an", "ians", "part", " na", "ad", "ins"], "i": ["gi", "ji", "s", "k", "ui", "ie", "mi", "p", "ai", "c", " I", "oi", "h", "y", "o", "ix", "ini", "iu", "ti", "z", "si", "index", "x", "yi", "ind", " il", "I", "uri", "l", "fi", "u", "d", "pi", "q", "j", "io", "f", "ac", " j", "xi", "ori", "ri", "di", "ci", "b", "v", "e", "il", "id", "li", "ii", "bi", "ad", "abi", "ip"]}}
{"code": "while True:\\n\ttry:\\n\t\tlist = [int(item) for item in raw_input().split()]\\n\t\tlist.sort()\\n\t\tif list[0] ** 2 + list[1] ** 2 == list[2] ** 2 :\\n\t\t\tprint 'YES'\\n\t\telse :\\n\t\t\tprint 'NO'\\n\texcept EOFError:\\n\t\tbreak\\n\texcept IndexError:\\n\t\tcontinue", "target": "199", "substitutes": {"list": ["name", "listed", "group", "int", "table", "code", "queue", "lat", "i", "load", "LIST", "dict", "case", "result", "chain", "like", "iter", "this", "lc", "array", "index", "x", "diff", "stack", "current", "l", "out", "sort", "join", "ist", "json", "sequence", "null", "set", "parent", "data", "entry", "List", "tree", "type", "key", "batch", "check", "pair", "all", "test", "word", "id", "cl", "part", "lists", "block"], "item": ["name", "other", "unit", "layer", "value", "arg", "opt", "element", "i", "num", "result", "instance", "container", "temp", "art", "index", "x", "url", "image", "Item", "obj", "items", "row", "hop", "page", "entry", "data", "key", "order", "step", "word", "val", "id", "active", "offset", "ip"]}}
{"code": "a=input()\\nb=set(a[:-1]);c=set(a[1:])\\n\\nif len(b)==1 or len(c)==1:\\n  print('Yes')\\nelse:\\n  print('No')\\n", "target": "600", "substitutes": {"a": ["aa", "s", "auto", "p", "aw", "fa", "ama", "i", "y", "ab", "array", "da", "x", "A", "w", "current", "args", "l", "u", "d", "ca", "f", "sa", "asa", "ac", "ga", "m", "area", "aux", "aj", "input", "am", "ae", "data", "alpha", "e", "abc", "form", "an", "ad", "n"], "b": ["aa", "k", "s", "fb", "p", "bs", "g", "i", "y", "o", "r", "B", "ba", "ab", "z", "x", "sb", "cb", "l", "ob", "bb", "d", "u", "rb", "f", "ca", "bd", "ae", "db", "v", "base", "e", "nb", "bi", "ad", "n"], "c": ["s", "k", "sc", "p", "g", "i", "y", "o", "ec", "h", "r", "cp", "C", "z", "x", "cy", "cu", "w", "con", "cm", "l", "u", "d", "cn", "f", "ca", "cs", "ac", "m", "cin", "cd", "ci", "ct", "v", "cf", "e", "cr", "cc", "n"]}}
{"code": "m, d = map(int,input().split())\\nn, e = map(int,input().split())\\nprint(int(n >= 2 and e == 1))", "target": "571", "substitutes": {"m": ["k", "mn", "mi", "p", "ms", "g", "c", "nm", "o", "h", "y", "r", "pm", "md", "z", "dm", "w", "cm", "l", "f", "am", "M", "v", "b", "mm", "mc", "month", "an"], "d": ["dd", "dy", "p", "nd", "g", "c", "i", "y", "o", "h", "md", "D", "z", "x", "dm", "w", "de", "u", "q", "f", "dc", "b", "v", "t", "ds", "ad"], "n": ["s", "k", "a", "mn", "p", "g", "c", "nm", "i", "o", "h", "nc", "en", "number", "z", "mini", "x", "w", "l", "u", "cn", "nn", "f", "j", "ns", "v", "b", "N", "t", "dn", "nb", "an"], "e": ["s", "E", "end", "ed", "p", "nd", "g", "c", "i", "y", "o", "ec", "r", "h", "ne", "z", "oe", "es", "x", "w", "l", "de", "u", "ee", "f", "j", "ae", "v", "b", "pe"]}}
{"code": "a = int(input())\\nif a == 1:\\n  print(\"Hello World\")\\nelse:\\n  b = int(input())\\n  c = int(input())\\n  print(int(b + c))", "target": "691", "substitutes": {"a": ["aa", "auto", "va", "ma", "p", "na", "qa", "ai", "aw", "ama", "la", "ba", "ab", "au", "pa", "da", "A", "af", "aaa", "ca", "sa", "asa", "ga", "ac", "cha", "area", "aux", "aj", "am", "ae", "oa", "alpha", "ea", "e", "ha", "abc", "an", "ad"], "b": ["aa", "k", "s", "ib", "boot", "fb", "p", "bs", "i", "y", "o", "mb", "B", "ba", "ab", "bub", "sb", "cb", "l", "ob", "bb", "u", "d", "rb", "aaa", "bd", "f", "eb", "ae", "db", "v", "bar", "base", "e", "info", "abc", "nb", "bi", "n"], "c": ["k", "p", "i", "y", "o", "h", "ec", "C", "uc", "z", "ce", "x", "unc", "cy", "cu", "cb", "cm", "l", "u", "d", "f", "ca", "cs", "ac", "dc", "cd", "ae", "ci", "ct", "v", "cf", "e", "bc", "cr", "cc", "n"]}}
{"code": "import sys\\n\\na, b, c, d = [int(input()) for _ in range(4)]\\n\\nprint(min(a,b) + min(c,d))", "target": "553", "substitutes": {"a": ["aa", "s", "k", "p", "ai", "ama", "la", "ba", "ab", "div", "au", "da", "index", "x", "A", "bb", "f", "sa", " A", "ac", "ga", "asa", "ca", "back", "area", "aux", "aj", "ae", "alpha", "ea", "e", "abc", "an", "ad", "n"], "b": ["aa", "be", "ib", "boot", "fb", "p", "bs", "pb", "i", "y", "r", "emb", "wb", "ba", "B", "ab", "x", "sb", "cb", "bt", "bb", "bf", "rb", "f", "eb", "bd", "db", "v", "e", "bc", "abc", "nb", "lb", "ad", "n"], "c": ["s", "k", "p", "g", "i", "y", "r", "ec", "h", "cp", "C", "z", "ce", "x", "cy", "w", "cb", "con", "l", "u", "f", "ca", "cs", "ac", "m", "dc", "cd", "cf", "e", "cr", "count", "cc", "col", "n"], "d": ["dx", "s", "dd", "dy", "fd", "p", "nd", "g", "i", "dat", "r", "rd", "D", "z", "da", "x", "l", "u", "do", "dad", "f", "dt", "j", "bd", "m", "dr", "cd", "df", "data", "ld", "e", "dec", "ds", "dos", "ad", "n"], "_": ["__", "g", " ip", " seq", " time", " __", "x", "out", "f", "n"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nL,R,d= map(int, readline().split())\\n\\nprint(R//d-(L-1)//d)", "target": "156", "substitutes": {"read": ["new", "raw", " data", "end", " decode", "reader", " write", "method", "g", "load", "r", "lex", "per", "Read", "RW", "connect", "write", "first", "ro", "run", "READ", "od", "each", "ind", "w", "start", " stream", " send", "exec", "get", " find", "f", " loop", " reads", "df", "input", "writ", "reads", "bind", "play", "reading", "add", " reader", " Read", "feed"], "readline": ["READLine", "readinglines", "loadlines", "READline", "readlink", "loaddata", "ReadLine", "Readlink", "readname", "loadLine", "readLine", "readingdata", "Readline", "Readname", "loadline", "loadinline", "readlines", " readname", " readinline", "READobject", "readingline", "READinline", "loadname", "readdata", " readlines", "loadobject", " readdata", " readlink", "readobject", " readLine", "readinline", "loadlink", " readobject", "readingLine"], "L": ["F", "Length", "E", "V", "NL", "H", "Q", "X", "dL", "O", "Len", "B", "C", "P", "D", "T", "LD", "S", "W", "SL", "I", "l", "LR", "Line", "Z", "RL", "CL", "length", "M", "N", "DL", "G", " D", " l", "RH", "n"], "R": ["F", "E", "RG", "Rs", "RD", "V", "Rad", "Q", "X", "p", "Y", " r", "K", "r", "RR", "O", "P", "B", "C", "T", "D", "S", "W", "I", "Rh", "Right", "l", "DR", "Z", "U", "M", "N", "G"], "d": ["s", "did", "dd", "dy", "fd", "p", "nd", "g", "c", "i", "dat", "dL", "o", "r", "rd", "h", "sd", "md", "D", "z", "da", "x", "l", "Ds", "do", "dl", "f", "j", "m", "depth", "cd", "data", "length", "b", "dim", "v", "ld", "e", "pd", "ds", "dos", " D", "vd", "ad", "n"]}}
{"code": "import sys\\n\\nclass UFT: #Union-find tree class\\n    def __init__(self, N): \\n        self.tree = [int(i) for i in range(N)] \\n        self.rank = [0 for i in range(N)]\\n        self.size = [1] * N\\n\\n    def find(self, a):\\n        if self.tree[a] == a: return a\\n        else:\\n            self.tree[a] = self.find(self.tree[a])\\n            return self.tree[a]\\n\\n    def findSize(self, a):\\n        self.tree[a] = self.find(a)\\n        self.size[a] = self.size[self.tree[a]]\\n        return self.size[a]\\n\\n    def unite(self, a, b):\\n        a = self.find(a)\\n        b = self.find(b)\\n        asize = self.size[a]\\n        bsize = self.size[b]\\n        if a == b: return\\n        if self.rank[a] < self.rank[b]: \\n            self.tree[a] = b\\n            self.size[b] += asize\\n        else:\\n            self.tree[b] = a\\n            self.size[a] += bsize\\n            if self.rank[a] == self.rank[b]: self.rank[a] += 1\\n\\n\\n\\ndef solve():\\n    input = sys.stdin.readline\\n    N, M = map(int, input().split())\\n    B = [[int(a) - 1 for a in input().split()] for _ in range(M)]\\n    parent = UFT(N)\\n\\n    Ans = [N * (N - 1) // 2] * M\\n    for i in reversed(range(1, M)):\\n        x, y = B[i]\\n        if parent.find(x) != parent.find(y):\\n            xsize = parent.findSize(x)\\n            ysize = parent.findSize(y)\\n            parent.unite(x, y)\\n            Ans[i - 1] = Ans[i] - (xsize * ysize)\\n        else:\\n            Ans[i-1] = Ans[i]\\n    print(\"\\n\".join(map(str, Ans)))\\n\\n    return 0\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "287", "substitutes": {}}
{"code": "def main():\\n    n = int(input())\\n    s = input()\\n    t = input()\\n\\n    for i in range(n):\\n        if s[i:] == t[:n - i]:\\n            print(n + i)\\n            break\\n    else:\\n        print(2 * n)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "693", "substitutes": {"n": ["k", "name", "p", "g", "c", "o", "y", "number", "num", "nc", "net", "size", "ne", "nu", "z", "fn", "x", "sn", "w", "ny", "l", "u", "d", "cn", "nt", "nn", "f", "j", "ln", "m", "network", "ns", "no", "b", "v", "len", "np", "N", "e", "count", "ii", "nb"], "s": ["ss", "a", "qs", "ans", "p", "ps", "g", "xs", "ats", "sets", "y", "o", "ks", "sp", "si", "es", "S", "sb", "args", "l", "u", "f", "cs", "m", "ns", "types", "ws", "os", "abs", "ts", "gs", "b", "e", "ls", "ips", "ds", "sv", "rs", "ins"], "t": ["a", "at", "tt", "p", "g", "c", "y", "o", "tp", "h", "pt", "T", "tf", "temp", "z", "w", "l", " T", "u", "d", "ta", "out", "f", "j", "dt", "m", "ts", "v", "b", "e", "test"], "i": ["gi", "k", "a", "int", "qi", "p", "phi", "ai", "c", " I", "h", "r", "y", "ini", "z", "si", "eni", "index", "x", "ind", "start", "w", "I", "l", "u", "d", "pi", "one", "j", "f", "m", "xi", "ri", "ni", "v", "b", "e", "id", "li", "ii", "ti"]}}
{"code": "#\u4e8b\u524d\u306b\u968e\u4e57\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f maxim\u306bn\u306e\u6700\u5927\u5024\u3092\u3044\u308c\u308b\\nmaxim = 10**6+1\\n\\nMOD = 10**9+7\\nkaijou = [1]*(maxim)\\nfor i in range(1,maxim):\\n    kaijou[i]=(kaijou[i-1]*i)%MOD\\n\\n#nCr\\ndef nCr(n,r):\\n    return ((kaijou[n]*pow(kaijou[r],MOD-2,MOD))%MOD*pow(kaijou[n-r],MOD-2,MOD))%MOD\\n\\n#nHr\\ndef nHr(n,r):\\n    return ((kaijou[n+r-1]*pow(kaijou[n],MOD-2,MOD))%MOD*pow(kaijou[r-1],MOD-2,MOD))%MOD\\n\\n\\nN = int(input())\\n\\nans = 1 if N >=3 else 0\\nfor i in range(2,(N//3)+1):\\n    tmp = nHr(N-3*i,i)\\n    ans = (ans+tmp)%MOD\\n\\nprint(ans)", "target": "235", "substitutes": {}}
{"code": "n,m=map(int,input().split())\\na=n/m\\n\\nprint(round(a,10))", "target": "317", "substitutes": {"n": ["s", "name", "k", "mn", "p", "na", "g", "c", "i", "o", "number", "y", "num", "r", "size", "ne", "z", "fn", "x", "nan", "l", "nin", "u", "d", "f", "ns", "b", "v", "e", "N", "nb", "an"], "m": ["min", "s", "mn", "ma", "tm", "p", "ms", "g", "c", "i", "y", "o", "r", "h", "pm", "num", "z", "fm", "x", "dm", "mu", "cm", "l", "u", "d", "max", "f", "j", "sm", "bm", "M", "v", "b", "e", "mm"], "a": ["aa", "k", "wa", "va", "missing", "ma", "p", "na", "ai", "c", "i", "y", "la", "ba", "mA", "ab", "au", "ana", "da", "x", "index", "A", "w", "action", "ia", "aaa", "ca", "sa", "ga", "ac", "area", "aj", "am", "ae", "alpha", "b", "ea", "an"]}}
{"code": "from collections import Counter, defaultdict\\nimport sys\\nsys.setrecursionlimit(10 ** 5 + 10)\\n# input = sys.stdin.readline\\nfrom math import factorial\\nimport heapq, bisect\\nimport math\\nimport itertools\\nimport queue\\nfrom collections import deque\\nfrom fractions import Fraction\\n\\n\\n\\ndef main():\\n    num = int(input())\\n    data = list(map(int, input().split()))\\n\\n    now_ind = 1\\n    break_num = 0\\n\\n    for i in range(num):\\n        if data[i] == now_ind:\\n            now_ind += 1\\n        else:\\n            break_num += 1\\n\\n    if break_num == num:\\n        print(-1)\\n    else:\\n        print(break_num)\\n\\n\\n\\nif __name__ == '__main__':\\n    main()\\n\\n", "target": "749", "substitutes": {}}
{"code": "print(str((lambda x:x**3)(int(input()))))", "target": "115", "substitutes": {}}
{"code": "MOD = 10**9+7\\nh, w = map(int, input().split())\\nS = [input() for _ in range(h)]\\nL = [[0]*w for _ in range(h)]\\nR = [[0]*w for _ in range(h)]\\nU = [[0]*w for _ in range(h)]\\nD = [[0]*w for _ in range(h)]\\nfor i in range(h):\\n  for j in range(w):\\n    if j > 0:\\n      if S[i][j-1] == \".\":\\n        L[i][j] = L[i][j-1]+1\\n      if S[i][w-j] == \".\":\\n        R[i][w-1-j] = R[i][w-j]+1\\n    if i > 0:\\n      if S[i-1][j] == \".\":\\n        U[i][j] = U[i-1][j]+1\\n      if S[h-i][j] == \".\":\\n        D[h-1-i][j] = D[h-i][j]+1\\nans = 0\\nfor i in range(h):\\n  for j in range(w):\\n    if S[i][j] == \".\":\\n      temp = L[i][j]+R[i][j]+U[i][j]+D[i][j]+1\\n      ans = max(ans, temp)\\nprint(ans)", "target": "391", "substitutes": {"MOD": ["F", "min", " N", "sh", "a", "p", "g", "c", "K", "SH", "AN", "wh", "P", "B", "C", "T", "ho", "A", "W", " H", "pi", "max", "q", "Z", "m", "shape", "M", "dim", "G", " n"], "h": ["rh", "hs", "s", "k", "wa", "end", "sh", "code", "H", "p", "g", "c", "err", "host", "oh", "gh", "y", "r", "o", "work", "ht", "hash", "wh", "ph", "hr", "z", "ch", "time", "x", "history", "ah", " H", "l", "bh", "u", "d", "th", "q", "he", "f", "m", "hi", "v", "b", "t", "e", "ha", "uh", "hm", "id", "home", "n"], "w": ["rh", "s", "k", "wa", "a", "sh", "wt", "H", "wp", "win", "p", "g", "c", "aw", "width", "rw", "y", "r", "work", "fw", "we", "wh", "wb", "weight", "wave", "z", "week", "wal", "ex", "time", "x", "ew", "W", "kw", "now", "wk", "l", "wx", "u", "d", "max", "q", "f", "m", "nw", "sw", "ww", "ws", "wan", "wl", "wd", " W", "v", "ow", "t", "word", "wall", "n"], "S": ["F", "s", "V", "H", "Es", "Q", "X", " s", "SE", "Y", "SC", "SR", "NS", "AS", "LS", "Si", "Sh", "Os", "TS", "PS", "SH", "ST", "SI", "Files", "OSS", "P", "T", "C", "B", "St", "oS", "Ps", "Settings", "Sync", "Session", "States", "A", "W", "SL", "Service", "RS", "Sl", "I", "SS", "OS", "US", "Single", "Sc", "Z", "Ns", "Set", "CS", "M", "GS", "J", "Sign", "N", "SN", "G", "System", "Ins", "BS", "SU", "ES"], "_": ["s", "k", "a", "__", "non", "place", "al", "ing", "o", "un", "ay", "long", "x", "l", "d", "q", "out", "f", "m", "am", "e", "all", "mm", "word", "val", "lin", "block", "n"], "L": ["F", "E", "LB", "IL", "V", "NL", "H", "FL", "LS", "X", "LA", "LP", "Lu", "P", "LM", "T", "PL", "Bl", "LIN", "W", "SL", "Sl", "I", "l", "EL", "LR", "Li", "OL", "Z", "RL", "Lo", "El", "CL", "List", "J", "M", "XL", "LI", "N", "DL", "G", "LL", "UL"], "R": ["F", "E", "RG", "Rs", "NR", "V", "H", "Q", "X", "Y", "SR", "AR", "K", "r", "OR", "RR", "Range", "O", "RO", "P", "B", "T", "C", "A", "W", "RS", "I", "GR", "RB", "DR", "BR", "UR", "RL", "RP", "J", "M", "N", "G", "RA"], "U": ["F", "Up", "V", "URI", "H", "Q", "X", "CU", "Y", "UB", "UC", "UN", "LU", "Su", "Tu", "O", "UP", "P", "T", "GU", "W", "UD", "I", "UV", "u", "UT", "US", "UE", "UR", "User", "Un", "M", "OU", "UU", "N", "PU", "UI", "G", "UL"], "D": ["F", "AD", "E", "DA", "DS", "V", "H", "DX", "DH", "Q", "X", "Y", "DC", "DM", "SH", "DO", "DB", "O", "P", "T", "C", "MD", "DD", "GU", "DT", "W", "I", "Ds", "d", "DR", "Do", "Di", "DF", "Z", "DER", "M", "J", "N", "G", "DI"], "i": ["gi", "ji", "s", "ui", "vi", "a", "ie", "int", "ei", "ami", "ali", "qi", "mi", "p", "phi", "ai", "ic", "c", "oi", "y", "o", "ini", "im", "ix", "iu", "api", "ani", "z", "mini", "si", "eni", "x", "yi", "I", "ia", "it", "l", "fi", "u", "pi", "d", "uri", "ki", "io", "f", "inline", "ir", "cli", "xi", "ori", "di", "ri", "ni", "ci", "ij", "b", "v", "e", "t", "info", "zi", "id", "li", "ii", "ik", "n", "bi", "ip"], "j": ["ui", "qi", "y", "ix", "im", "x", "ah", "adj", "l", "uj", "q", "js", "f", "json", "b", "fr", "li", "er", "gi", "ie", "jo", "jj", "jl", "je", "jet", "u", "jp", "note", "br", "ci", "ij", "J", "v", "key", "e", "next", "em", "dy", "ja", "p", "dj", "r", "el", "iu", "jit", "z", "ch", "ind", "it", "d", "io", "m", "jc", "ji", "k", "a", "jen", "g", "err", "o", "jan", "obj", "job", "oj", "aj", "di", "iw", "kj", "ii", "bi", "n"], "ans": ["ano", "ents", "lan", "offs", "cas", "nas", "ras", "ams", "atan", "na", "sex", "span", "ats", "antis", "anas", "AN", "ANS", "ks", "ann", "ani", "anc", "ana", "es", "can", "outs", " means", "nan", "ars", "ant", "anus", "aned", "nn", "ons", "aus", "leans", "sk", "cs", "ens", "ants", "ns", "os", "san", "ls", "plan", "ds", "ians", "oss", "an", "ad"], "temp": ["new", "min", "cut", "level", "p", "pre", "there", "c", "extra", "tmp", "iter", "pt", "emp", "mini", "z", "adjust", "wrap", "clean", "now", "hyp", "current", "flat", "adj", "get", "tem", "max", "sol", "Temp", "yy", " Temp", "fake", "base", "cel", "keep", "test", "tc", "offset", "n"]}}
{"code": "def main():\\n    n = int(input())\\n    alis = list(map(int, input().split()))\\n    blis = list(map(int, input().split()))\\n    ans = 0\\n\\n    for i in range(n-1, -1, -1):\\n        if blis[i] <= alis[i+1]:\\n            ans += blis[i]\\n        elif blis[i] < alis[i+1] + alis[i]:\\n            ans += blis[i]\\n            alis[i] = alis[i] - (blis[i] - alis[i+1]) \\n        elif blis[i] >= alis[i+1] + alis[i]:\\n            ans += alis[i] + alis[i+1]\\n            alis[i] = 0\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "530", "substitutes": {"n": ["s", "k", "mn", "span", "p", "g", "c", "o", "h", "nc", "num", "ot", "ne", "nu", "z", "x", "sn", "w", "ny", "l", "cn", "d", "nt", "nn", "f", "j", "network", "m", "Ns", "ns", "nl", "ni", "nr", "b", "t", "N", "pn", "nit", "nb"], "alis": ["holes", "s", "lins", "ui", "ris", "ales", "ubis", "olor", "lor", "nas", "ali", "pal", "al", "bos", "lla", "alls", "lis", "antis", "aos", "ios", "alli", "mas", "alist", "esi", "alities", "abus", "lol", "ais", "si", "als", "yi", "asin", "atis", "asia", "los", "alian", "isal", "tis", "alus", "els", "isol", "mis", "alien", "alia", "details", "ils", "phis", "acs", "itis", "olis", "atches", "abis", "alos", "nis", "allas", "ls", "il", "asi", "illas", "las", "ii", "sil", "anti", "bas", "eas", "abi", "bis"], "blis": [" blits", "flois", " bls", "blists", "eliss", " blists", "beli", "belit", "eli", "belis", " blit", "pls", " bli", "Blis", "Blits", "pliss", "plas", "flis", "llis", "blois", "lli", "blits", "fli", "llists", "Blit", "bli", "blas", "belas", "plois", "Bls", "blit", "flas", "Blos", " blas", " blos", "bliss", "pli", "bls", "llas", "elas", "blos", "llos", "plis", "elis", "plists", "Bli", " bliss", " blois", "Blas", "llits"], "ans": ["ano", "s", "ents", "lan", "nas", "ras", "amps", "cas", "ams", "les", "na", "offs", "ai", "ats", "activation", "antis", "anas", "aos", "AN", "ANS", "anes", "any", "ks", "asts", "aces", "ann", "anc", "ani", "annot", "ays", "ais", "ana", "can", "ands", " means", "asin", "ars", "aves", "args", "anus", "aned", "lines", "aus", "leans", "sk", "ants", "acs", "ns", "atches", "ases", "san", "acts", "ls", "las", "oss", "an", "ins"], "i": ["s", "name", "ui", "ei", "int", "qi", "ai", "y", "ix", "si", "x", "yi", "l", "j", "f", "ir", "b", "il", "li", "info", "gi", "ie", "h", " iP", "ini", "api", "lc", " il", "u", "pi", "site", "ni", "ci", "hi", "key", "v", " ii", "e", "multi", "id", "source", "ti", "ip", "p", "oi", "iu", "z", "index", "ind", "it", "fi", "d", "io", "iv", "m", "isi", "t", "ih", "ji", "a", "g", "c", "o", "I", "uri", "ki", "cli", "xi", "di", "ri", "ii", "bi", "ori"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport sys\\nfrom sys import stdin\\n\\nstrN = stdin.readline().rstrip()\\nN = int(strN)\\nstrLen = len(strN)\\n\\nodd_count1 = 0\\nfor i in range(1, strLen + 1):\\n    if i % 2 == 0:\\n        if i == strLen:\\n            print(odd_count1)\\n            sys.exit(0)\\n    else:\\n        if i == strLen:\\n            t1 = '1'\\n            t1 += '0' * (i - 1)\\n            t3 = N - int(t1) + 1\\n            odd_count1 += t3\\n            print(odd_count1)\\n            sys.exit(0)\\n        else:\\n            t1 = '1' + '0' * (i - 1)\\n            t2 = '9' * i\\n            odd_count1 += (int(t2) - int(t1)+1)\\n", "target": "469", "substitutes": {}}
{"code": "#!/usr/bin/env python\\n# coding: utf-8\\n\\n# In[10]:\\n\\n\\nN, A, B = map(int, input().split())\\n\\n\\n# In[17]:\\n\\n\\nif (B-A)%2 == 0:\\n    ans = (B-A)//2\\nelse:\\n    ans = min(A-1, N-B) + 1 + (B-A-1)//2\\nprint(ans)\\n\\n\\n# In[ ]:\\n\\n\\n\\n\\n", "target": "594", "substitutes": {}}
{"code": "import math\\n\\ndef kock(n,p1x,p1y,p2x,p2y):\\n    if(n==0):\\n        return\\n\\n    sx = (2*p1x+p2x)/3.0\\n    sy = (2*p1y+p2y)/3.0\\n    tx = (p1x+2*p2x)/3.0\\n    ty = (p1y+2*p2y)/3.0\\n\\n    ux = (tx-sx)*math.cos(math.radians(60)) - (ty-sy)*math.sin(math.radians(60)) + sx\\n    uy = (tx-sx)*math.sin(math.radians(60)) + (ty-sy)*math.cos(math.radians(60)) + sy\\n\\n    kock(n-1,p1x,p1y,sx,sy)\\n    print(sx,sy)\\n    kock(n-1,sx,sy,ux,uy)\\n    print(ux,uy)\\n    kock(n-1,ux,uy,tx,ty)\\n    print(tx,ty)\\n    kock(n-1,tx,ty,p2x,p2y)\\n\\n\\nn = int(input())\\nprint(0,0)\\nkock(n,0,0,100,0)\\nprint(100,0)\\n", "target": "280", "substitutes": {"n": ["s", "k", "non", "p", "na", "init", "g", "c", "i", "o", "number", "nc", "num", "y", "net", "en", "un", "don", "rn", "sign", "ne", "nu", "z", "ng", "on", "fn", "x", "norm", "nan", "sn", "node", "w", "conn", "zn", "l", "u", "d", "nt", "q", "r", "j", "f", "network", "m", "none", "ln", "nw", "self", "ns", "no", "b", "len", "np", "v", "t", "N", "all", "nit", "e", "an", "nor"], "p1x": ["P1d", "p0w", "P1ex", "p3cross", "p01x", "p0z", "p0d", "p2w", "P2cross", "p2cross", "P1cross", "p2ex", "P2z", "p3d", "p3xy", "p2d", "paddedx", "p0x", "p3x", "p3ex", "p01ex", "p2z", "p1z", "P2d", "p01y", "p1xy", "P1z", "paddedcross", "P2w", "P2y", "p1cross", "P2ex", "P1xy", "P1y", "P1w", "P2xy", "p3w", "p1d", "P1x", "p01xy", "p3y", "p1w", "P2x", "p1ex", "paddedxy", "p0y", "p2xy", "paddedy"], "p1y": ["p3z", " p3z", "p2oy", "p1ey", "p0xy", "p01x", "p01ey", "p1oy", "p101oy", "p0z", " p1ey", "P1ey", "p2ey", "P2z", "P1oy", " p1z", "P2oy", " p3ey", "p0x", "p3x", "p11z", "p2z", "p1z", "p01y", "p1xy", "P1z", "P2y", " p3y", "P1xy", "P1y", "p11y", "p101y", "P2xy", "P1x", "p01z", "p3y", "p101x", "p11x", " p3x", "P2x", "p101z", "p3oy", "P2ey", "p0y", "p2xy", "p11ey", "p3ey"], "p2x": ["p1X", "p2X", "P1d", "P2px", "p3z", "p6d", "p6x", "p4t", "ptwot", "p3px", "ptwopx", "p1t", "p2w", "p2t", "ptwoxy", "ptwox", "P2z", "P2t", "p3d", "p2d", "p1px", "p3x", "ptwoy", "p4w", "p2z", "p1z", "P2d", "P1t", "ptwoz", "p1xy", "p6w", "P1z", "P2w", "P2y", "p4x", "P1xy", "P1y", "p2px", "P1px", "p6y", "P1w", "P2xy", "P1x", "P1X", "p1d", "p3X", "p3y", "P2x", "P2X", "p6X", "p1w", "p4y", "p2xy", "p4X", "p4xy"], "p2y": ["psecondzy", "p3z", "p1ey", "p0xy", "p21z", "p0z", "P1ey", "p2ery", "p3ya", "p21y", "P2zy", "P2ery", "p2ey", "p1zy", "p0ya", "p1ery", "P2z", "p2ya", "p0x", "P1zy", "p0y", "p3x", "p21ery", "p2z", "p1z", "p02x", "p4ey", "p21x", "p1xy", "P1z", "P2y", "psecondy", "p02zy", "p4x", "P1y", "psecondya", "P1xy", "p2zy", "P2xy", "P1x", "p0ey", "p1ya", "p3y", "P2ya", "P1ya", "P2x", "p02ya", "p4y", "p3ery", "psecondx", "P2ey", "P1ery", "p2xy", "p4xy", "p02y"], "sx": ["spx", "ssys", " sz", "psy", "Sw", "psw", " Sy", "psz", " spx", "sz", "csx", "sys", "ssxs", "psX", "fx", " SX", "fw", "fX", "px", "sspx", "psys", "usx", "csX", "asx", "SX", "ssxc", "sxs", "pX", "fy", "ssz", "asz", "gsx", "ssx", "sxc", "aspx", " sX", "gsX", "psx", " sw", "usX", "pw", "gsz", "sX", "sw", "asxs", " Sx", " sxc", "Sy", "Sx", "csz", "ssX", "asX", "usxc", "py", "usy", "gsys", "ssw", "csxs", "ssy"], "sy": ["ss", "sq", "ys", "sh", "dy", "south", "psy", "ety", "lyn", "side", "dist", "lat", "sys", "sym", "ly", "y", "rx", "sat", "asy", "sd", "ym", "lex", "syn", "iet", "yn", "tf", "sp", "ony", "size", "dot", "soft", "fy", "si", "x", "zy", "square", "cy", "idy", "ny", "yt", "SY", "ish", "sin", "sty", "sol", "ky", "sk", "sa", "style", "yy", "Sy", "ery", "icy", "type", "my", "space", "py", "vy", "se", "lly", "sil", "ry", "ey", "sky"], "tx": ["ss", "dx", "Tx", "sq", "ox", "loc", "text", "dy", "south", "cas", "tt", "zx", "na", "xs", "hea", "lat", "xx", "west", "context", "fx", "rx", "lex", "y", "ix", "px", "txt", "pt", "tty", "xt", "ex", "x", "tan", "pex", "cross", "ctx", "wx", "TX", "ta", "trans", "ax", "cs", "ww", "cos", "mx", "rt", "yy", "test", "ds", "sv", "tz", "xa", "tc"], "ty": ["sq", "ys", "dy", "ety", "gy", "tt", "poly", "lat", "sys", "sym", "fx", "y", "lex", "asy", "px", "ix", "rx", "Ty", "txt", "tif", "eth", "tty", "pt", "ph", "fy", "idy", "x", "sth", "thin", "tan", "zy", "tiny", "TY", "yt", "ctx", "tem", "sty", "sin", "ta", "ky", "ww", "types", "rt", "yy", "oy", "ski", "te", "type", "vt", "py", "sv", "sil", "ry", "sky", "ties"], "ux": ["dx", "ss", "ox", "sq", "cas", "sex", "gy", "zx", "xs", "plus", "uz", "xx", "fx", "rx", "lex", "ix", "px", "times", "txt", "pt", "uid", "uc", "ex", " xx", "x", "xxx", "fy", "ctx", "wx", "req", "linux", "ax", "ww", "xi", "cos", "lux", "aux", "yy", "ue", "UX", "inx", "su", "xp", "foo", "ck", "id", "qq", "dollar"], "uy": ["pay", "ui", "sq", "dy", "gy", "ur", "ud", "uz", "sym", "yu", "y", " oy", "ay", "uff", "uid", "uc", "ou", "fy", "zy", "wy", "iny", "cy", "ury", "ny", "yt", "wx", "u", "sty", "upp", "ky", "ue", "up", "pty", "yy", "oy", "hi", "icy", "iy", "lu", "oxy", "my", "py", "vy", "qq", "ru", "uu", "ry"]}}
{"code": "N, K, X, Y = map(int, open(0).read().split())\\nprint(X*min(N, K)+Y*max(N-K, 0))\\n", "target": "71", "substitutes": {"N": ["F", "Power", "MN", "L", "V", "H", "Q", "Size", "NC", "NS", "Num", "NM", "CNN", "O", "P", "Len", "C", "D", "NK", "Ne", "S", "A", "W", "IX", "I", "No", "NT", "NG", "Node", "Z", "Ns", "U", "R", "M", "J", "GN", "NB", "NA", "n"], "K": ["k", "KK", "Ke", "L", "KI", "AK", "V", "Max", "Ak", "H", "Q", "IK", "KE", "Sk", "P", "T", "C", "SK", "D", "NK", "KS", "KB", "W", "VK", "I", "HK", "Z", "KR", "PK", "U", "R", "OK", "J", "M", "DK", "KN", "G", "Ku"], "X": ["F", "Length", "E", "L", "V", "Max", "H", "DX", "Q", "XX", "XP", "Width", "ZX", "FF", "O", "P", "T", "Int", "C", "D", "x", "A", "IX", "I", "TX", "Z", "XY", "U", "Value", "R", "M", "XL", "Location"], "Y": ["F", "YY", "E", "L", "V", "H", "Q", "Size", "YN", "y", "YA", "P", "T", "C", "B", "Cy", "A", "W", "NY", "I", "TX", "Z", "Offset", "Py", "Value", "Height", "R", "J", "M"]}}
{"code": "# -*- coding: utf-8 -*-\\nN = int(input())\\ng = N // 2\\nk = ( N + 1 ) // 2\\nif N % 2 == 0:\\n    print(g)\\nelse:\\n    print(k)", "target": "748", "substitutes": {}}
{"code": "# abc103_b.py\\n# https://atcoder.jp/contests/abc103/tasks/abc103_b\\n\\n# B - String Rotation /\\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec / \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\\n# \u914d\u70b9 : 200\u70b9\\n\\n# \u554f\u984c\u6587\\n# \u82f1\u5c0f\u6587\u5b57\u304b\u3089\u306a\u308b\u6587\u5b57\u5217 S, T\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\\n# S\u3092\u56de\u8ee2\u3055\u305b\u3066 T\u306b\u4e00\u81f4\u3055\u305b\u3089\u308c\u308b\u304b\u5224\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n# \u3059\u306a\u308f\u3061\u3001\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u4efb\u610f\u306e\u56de\u6570\u7e70\u308a\u8fd4\u3057\u3066 S\u3092 T\u306b\u4e00\u81f4\u3055\u305b\u3089\u308c\u308b\u304b\u5224\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\\n# \u64cd\u4f5c: S=S1S2...S|S|\u306e\u3068\u304d\u3001S \u3092 S|S|S1S2...S|S|\u22121\u306b\u5909\u66f4\u3059\u308b\\n# \u3053\u3053\u3067\u3001|X|\u306f\u6587\u5b57\u5217 X\u306e\u9577\u3055\u3092\u8868\u3057\u307e\u3059\u3002\\n\\n# \u5236\u7d04\\n#     2\u2264|S|\u2264100\\n#     |S|=|T|S, T\u306f\u82f1\u5c0f\u6587\u5b57\u304b\u3089\u306a\u308b\\n\\n# \u5165\u529b\\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\\n# S\\n# T\\n\\n# \u51fa\u529b\\n# S\u3092\u56de\u8ee2\u3055\u305b\u3066 T\u306b\u4e00\u81f4\u3055\u305b\u3089\u308c\u308b\u5834\u5408\u306f Yes\u3001\u4e00\u81f4\u3055\u305b\u3089\u308c\u306a\u3044\u5834\u5408\u306f No \u3092\u51fa\u529b\u305b\u3088\u3002\\n\\n# \u5165\u529b\u4f8b 1\\n# kyoto\\n# tokyo\\n\\n# \u51fa\u529b\u4f8b 1\\n# Yes\\n#     1\u56de\u76ee\u306e\u64cd\u4f5c\u3067 kyoto \u304c okyot \u306b\u306a\u308a\u307e\u3059\\n#     2\u56de\u76ee\u306e\u64cd\u4f5c\u3067 okyot \u304c tokyo \u306b\u306a\u308a\u307e\u3059\\n\\n# \u5165\u529b\u4f8b 2\\n# abc\\n# arc\\n\\n# \u51fa\u529b\u4f8b 2\\n# No\\n\\n# \u4f55\u5ea6\u64cd\u4f5c\u3092\u884c\u3063\u3066\u3082 abc \u3068 arc \u3092\u4e00\u81f4\u3055\u305b\u3089\u308c\u307e\u305b\u3093\u3002\\n\\n# \u5165\u529b\u4f8b 3\\n# aaaaaaaaaaaaaaab\\n# aaaaaaaaaaaaaaab\\n\\n# \u51fa\u529b\u4f8b 3\\n# Yes\\n\\n\\ndef calculation(lines):\\n    la = lines[0]\\n    lb = lines[1]\\n    flag = False\\n    for _ in range(len(la)):\\n        la = la[1:] + la[:1]\\n        if la == lb:\\n            return ['Yes']\\n    return ['No']\\n\\n\\n# \u5f15\u6570\u3092\u53d6\u5f97\\ndef get_input_lines(lines_count):\\n    lines = list()\\n    for _ in range(lines_count):\\n        lines.append(input())\\n    return lines\\n\\n\\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\\ndef get_testdata(pattern):\\n    if pattern == 1:\\n        lines_input = ['kyoto', 'tokyo']\\n        lines_export = ['Yes']\\n    if pattern == 2:\\n        lines_input = ['abc', 'arc']\\n        lines_export = ['No']\\n    if pattern == 3:\\n        lines_input = ['aaaaaaaaaaaaaaab', 'aaaaaaaaaaaaaaab']\\n        lines_export = ['Yes']\\n    return lines_input, lines_export\\n\\n\\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\\ndef get_mode():\\n    import sys\\n    args = sys.argv\\n    if len(args) == 1:\\n        mode = 0\\n    else:\\n        mode = int(args[1])\\n    return mode\\n\\n\\n# \u4e3b\u51e6\u7406\\ndef main():\\n    mode = get_mode()\\n    if mode == 0:\\n        lines_input = get_input_lines(2)\\n    else:\\n        lines_input, lines_export = get_testdata(mode)\\n\\n    lines_result = calculation(lines_input)\\n\\n    for line_result in lines_result:\\n        print(line_result)\\n\\n    # if mode > 0:\\n    #     print(f'lines_input=[{lines_input}]')\\n    #     print(f'lines_export=[{lines_export}]')\\n    #     print(f'lines_result=[{lines_result}]')\\n    #     if lines_result == lines_export:\\n    #         print('OK')\\n    #     else:\\n    #         print('NG')\\n\\n\\n# \u8d77\u52d5\u51e6\u7406\\nif __name__ == '__main__':\\n    main()\\n", "target": "721", "substitutes": {}}
{"code": "# \u3067\u3064oO(YOU PLAY WITH THE CARDS YOU'RE DEALT..)\\nimport sys\\ndef main(N, A):\\n    idx = [0] * N\\n    D = [[-1] * (N) for _ in range(N)]\\n    for j in range(N):\\n        D[j][0] = 0\\n    while True:\\n        f = True\\n        for i in range(N):\\n            if idx[i] >= N - 1: continue\\n            m = A[i][idx[i]]\\n            if A[m][idx[m]] == i:\\n                d = max(D[i][idx[i]], D[m][idx[m]])\\n                idx[i] += 1\\n                idx[m] += 1\\n                D[i][idx[i]] = d + 1\\n                D[m][idx[m]] = d + 1\\n                f = False\\n        if f: break\\n    ans = -1\\n    for i in range(N):\\n        ans = max(ans, D[i][N - 1])\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    input = sys.stdin.readline\\n    N = int(input())\\n    A = [list(map(lambda x:int(x) - 1, input().split())) for _ in range(N)]\\n    main(N, A)\\n", "target": "782", "substitutes": {}}
{"code": "import math\\na,b,x=map(int,input().split())\\nc=b-(x/(a*a))\\nk=math.sqrt(c**2+(a*a/4))\\nif x<=a*a*b/2:\\n  o=(x*2/b)/a\\n  k=math.sqrt(o**2+b*b)\\n  print(math.degrees(math.acos(o/k)))\\nelse:\\n  print(math.degrees(math.acos(a/(2*k))))", "target": "619", "substitutes": {"a": ["aa", "s", "auto", "ma", "p", "na", "aw", "i", "fa", "y", "h", "la", "ba", "ab", "z", "au", "da", "index", "A", "w", "ka", "ak", "l", "u", "d", "ca", "sa", "ax", "ac", " A", "f", "m", "j", "ga", "area", "am", "ae", "oa", "alpha", "v", "e", "all", "an", "ad", "n"], "b": ["aa", "fb", "p", "bs", "g", "i", "y", "r", "h", "B", "ba", "ab", "z", "A", "w", "l", "bb", "d", "u", "bf", "q", "f", "j", "m", "ac", "db", "v", "an", "e", "bc", "ad", "n"], "x": ["s", "X", "p", "g", "xs", "i", "xx", "y", "h", "r", "ix", "xa", "z", "ex", "index", "w", "l", "u", "d", "q", "f", "ca", "ax", "m", "ac", "j", "ci", "v", "e", "t", "xc", "an", "n"], "c": ["s", "p", "g", "i", "y", "h", "C", "z", "w", "con", "l", "u", "d", "cn", "max", "q", "f", "ca", "ac", "m", "ga", "co", "ci", "v", "e", "count", "ad", "n"], "k": ["ke", "p", "g", "i", "K", "y", "r", "h", "kk", "work", "ks", "z", "kw", "w", "ka", "ko", "ak", "l", "ok", "u", "d", "bb", "q", "f", "j", "sk", "ky", "m", "ac", "alpha", "v", "ck", "e", "ad", "n"], "o": ["op", "ol", "auto", "oo", "p", "go", "i", "oi", "y", "ot", "bo", "O", "ino", "po", "od", "w", "so", "ko", "l", "ob", "u", "do", "ok", "mo", "io", "object", "f", "oy", "os", "oa", "no", "e", "off", "n"]}}
{"code": "# import numpy as np\\n\\nA_init = 500\\nB_init = 100\\nC_init = 50\\n\\nA_n = int(input())\\nB_n = int(input())\\nC_n = int(input())\\n\\nX = int(input())\\n\\ncnt = 0\\nfor a in range(A_n+1):\\n    if A_init * a <= X:\\n        for b in range(B_n+1):\\n            if (A_init * a + B_init * b) <= X:\\n                for c in range(C_n+1):\\n                    if (A_init * a + B_init * b + C_init * c) == X: cnt += 1\\n            else:\\n                break\\n    else:\\n        break\\n# print(np.count_nonzero([k+[i for i in All_list] == X for k in All_list]))\\nprint(cnt)", "target": "439", "substitutes": {}}
{"code": "import sys\\n\\ndef LS2(): \\n    return list(sys.stdin.readline().rstrip())  #\u7a7a\u767d\u306a\u3057\\n\\nn = LS2()\\n\\nfor i in range(3):\\n    if n[i] == '1':\\n        n[i] = '9'\\n    else:\\n        n[i] = '1'\\n\\nprint(''.join(n))", "target": "370", "substitutes": {}}
{"code": "import sys\\n\\n\\ndef main():\\n    n = int(sys.stdin.readline())\\n\\n    if n < 105:\\n        print(0)\\n        exit()\\n\\n    dp = [0] * 201\\n    ans = 0\\n\\n    for i in range(1, n + 1):\\n        for j in range(105, n + 1):\\n            if j % i == 0:\\n                dp[j] += 1\\n\\n    for i in range(105, n + 1, 2):\\n        if dp[i] >= 8:\\n            ans += 1\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "288", "substitutes": {"n": ["s", "k", "mn", "p", "c", "nm", "o", "number", "nc", "num", "en", "net", "y", "ne", "nu", "z", "fn", "x", "norm", "nan", "sn", "w", "conn", "nat", "l", "d", "nn", "nt", "f", "ln", "network", "m", "ns", "no", "ni", "len", "b", "np", "v", "e", "N", "pn", "t", "inn", "dn", "nb", "nor"], "dp": ["lp", "wp", "eps", "p", "ps", "ai", "pb", "fp", "dat", "tp", "pm", "cp", "pos", "rep", "gp", "P", "sp", "mp", "pa", "params", "dm", "cm", "pi", "d", "DP", "dl", "dt", "pp", "deb", "dr", "dc", "address", "df", "pkg", "di", "data", "db", "dim", "np", "pd", "ds", "hp", "nb", "ip"], "ans": ["s", "a", "ents", "int", "lan", "span", "nas", "cas", "eps", "amps", "p", "na", "atan", "ai", "ps", "ions", "anas", "AN", "ANS", "la", "vs", "ann", "anon", "ani", "au", "ana", "x", "params", "nan", "sn", "ia", "args", "aned", "lines", "nn", "aus", "ants", "ns", "os", "reads", "ls", "ips", "cons", "ians", "ds", "rss", "an", "ins"], "i": ["ji", "k", "ui", "a", "ie", "int", "qi", "p", "ai", "c", "o", "y", "iu", "ti", "z", "si", "index", "x", "yi", "ind", "I", "l", "u", "pi", "d", "io", "f", "m", "xi", "ni", "ci", "b", "v", "e", "id", "li", "ii", "bi"], "j": ["ji", " p", "k", " bi", "ja", "p", "ai", "g", " ni", "o", "r", "jj", "num", " ip", "y", " k", "jit", "jl", "z", "si", "index", "x", "ind", "I", "l", "u", "uj", " J", "jp", "f", "m", "jc", "ni", "ij", "J", "bj", "b", " ii", "v", " num", "kj", "li", "ii", " l", " jo"]}}
{"code": "import itertools\\n\\ndef main():\\n    n, m, q = map(int, input().split())\\n    r = list(map(int, input().split()))\\n    dist = [[10**18 for _ in range(n)] for _ in range(n)]\\n    for i in range(m):\\n        a, b, c = map(int, input().split())\\n        dist[a-1][b-1] = c\\n        dist[b-1][a-1] = c\\n\\n    for k in range(n):\\n        for i in range(n):\\n            for j in range(n):\\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\\n\\n    ans = 10 ** 18\\n    for p in itertools.permutations(r):\\n        total = 0\\n        for i in range(q-1):\\n            total += dist[p[i]-1][p[i+1]-1]\\n        ans = min(ans, total)\\n\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "450", "substitutes": {"n": ["s", "g", "o", "y", "num", "en", "net", "un", "ne", "z", "x", "w", "l", "u", "d", "nn", "f", "ns", "v", "t", "e", "N", "nb", "an"], "m": ["mn", "ms", "g", "nm", "y", "o", "h", "z", "x", "w", "cm", "l", "u", "d", "f", "M", "v", "t", "e", "mc", "range", "an"], "q": ["sq", "qs", "qu", "qi", "Q", "qa", "g", "y", "h", "iq", "charge", "z", "ch", "x", "w", "l", "u", "d", "f", "dq", "query", "depth", "qt", "v", "e", "count", "id", "qq", "cl"], "r": ["s", "g", "o", "h", "re", "P", "x", "w", "l", "u", "d", "pi", "f", "rs", "sr", "right", "ir", "R", "nr", "v", "t", "e", "cr", "ru", "er", "range", "res"], "dist": ["dd", "sh", "int", "y", "rec", "cp", "support", "pred", "dis", "shift", "f", "Dist", "data", "dev", "np", "order", "feat", "part", "info", "cmp", "distance", "pos", "desc", "div", "dest", "comp", "u", "cd", "wd", "project", "e", "form", "rest", "chi", "nd", "default", "md", "size", "ch", "index", "ind", "IST", "d", "ist", "dr", "inst", "rank", "map", "dim", "t", "grade", "mix", "config", "front", " distance", "ists", "num", "sd", "rep", "diff", "par", "nt", "df", "di", "pair", "progress", "range", "test", "draw"], "_": ["s", " local", "o", " x", "x", " un", "I", "f", " self", "all", "an", "block"], "i": ["gi", "ji", "ui", "ie", "int", "qi", "mi", "ai", "o", "y", "ini", "h", "iq", "iu", "ti", "z", "si", "x", "yi", "w", "ind", "I", "it", "l", "u", "pi", "d", "ki", "io", "f", "xi", "di", "ci", "ip", "v", "e", "t", "id", "li", "ii", "ik"], "a": ["aa", "s", "int", "ai", "g", "fa", "y", "o", "ba", "ab", "au", "z", "da", "x", "ar", "A", "af", "w", "ak", "l", "u", "d", "f", "ca", "sa", "ac", "am", "ae", "alpha", "e", "an", "ad"], "b": ["s", "aa", "g", "y", "o", "ba", "B", "ab", "z", "x", "w", "cb", "l", "u", "d", "bb", "f", "v", "e", "bc"], "c": ["s", "g", "arc", "y", "h", "o", "C", "lc", "z", "ch", "x", "cy", "cu", "w", "l", "u", "d", "max", "f", "ca", "cs", "ac", "dc", "ci", "v", "e", "cr", "t", "cc"], "k": ["km", "ji", "ke", "g", "K", "o", "y", "h", "kk", "ijk", "ks", "z", "ch", "x", "w", "ko", "ak", "it", "l", "u", "d", "ki", "f", "ky", "sk", "ku", "v", "e", "id", "ik", "an"], "j": ["km", "ji", "s", "ie", "ja", "ai", "g", "jo", "y", "h", "o", "jj", "ijk", "jl", "z", "ch", "x", "ind", "w", "l", "u", "uj", "d", "jp", "f", "range", "aj", "ij", "J", "v", "e", "ii", "ik", "bi"], "ans": ["ss", "s", "aid", "lan", "span", "nas", "ras", "offs", "ams", "atan", "ps", "na", "ai", "gan", "general", "regular", "AN", "aos", "ANS", "anes", "ks", "P", "mean", "ann", "ani", "anc", "ana", "ays", "can", "nan", "tan", "lang", "cross", "aned", "chan", "ons", "aus", "sk", "trans", "ants", "ns", "types", "rank", "ran", "os", "san", "ls", "cons", "plan", "ds", "oss", "part", "an", "ins"], "p": ["lp", "s", "op", "g", "fp", "mult", "h", "y", "o", "tp", "pr", "cp", "pos", "ap", "P", "sp", "w", "osp", "gener", "l", "patch", "u", "cop", "pi", "d", "f", "pp", "port", "v", "sequ", "np", "t", "e", "pe", "py", "pc", " P", "ip"], "total": ["min", "error", "full", "sh", "common", "non", "normal", "general", "otal", "wh", "ph", "gross", "size", "mini", "final", "scale", "pa", "valid", "partial", "max", "offset", "ta", "nt", " Total", "trans", "fat", "none", "null", "no", "Total", "complete", "alpha", "private", "t", "all", "quant", "percent", "part", "an", "sum"]}}
{"code": "a,b = map(int,input().split())\\nif a > b :\\n    print('a > b')\\nif a < b :\\n    print('a < b')\\nif a == b :\\n    print('a == b')\\n", "target": "598", "substitutes": {"a": ["aa", "auto", "int", "va", "ma", "na", "qa", "ai", "c", "aw", "fa", "la", "ba", "ab", "au", "ana", "art", "da", "pa", "A", "ah", "ia", "l", "d", "f", "sa", "ca", "asa", "ac", "ga", "area", "aux", "aj", "am", "ae", "oa", "alpha", "ea", "ada", "an", "ad", "n"], "b": ["aa", "be", "ib", "fb", "p", "bs", "g", "c", "i", "y", "o", "r", "wb", "mb", "bis", "B", "ab", "x", "w", "sb", "l", "bh", "bb", "d", "rb", "bf", "u", "abb", "ub", "ob", "f", "eb", "bu", "xb", "db", "v", "bar", "e", "abe", "nb", "lb", "n"]}}
{"code": "n, m = map(int, input().split())\\nnum = [\"A\"] * n\\nfor i in range(m):\\n    s, c = map(int, input().split())\\n    if n>1 and s == 1 and c == 0:\\n        print(-1)\\n        exit()\\n    elif num[s - 1] != \"A\" and num[s - 1] != c:\\n        print(-1)\\n        exit()\\n    num[s - 1] = c\\n\\nfor j in range(n):\\n    if num[j] == \"A\":\\n        num[j] = 0\\n    if n>1 and num[0] == 0:\\n        num[0] = 1\\nprint(int(\"\".join(map(str, num))))\\n", "target": "285", "substitutes": {"n": ["k", "name", "a", "mn", "p", "na", "g", "o", "r", "nc", "y", "net", "un", "en", "ne", "nu", "z", "fn", "x", "sn", "w", "ny", "l", "u", "d", "cn", "nn", "nt", "f", "ln", "ns", "ni", "b", "v", "len", "np", "t", "N", "e", "pn", "nb", "an"], "m": ["k", "mn", "p", "ms", "g", "y", "o", "r", "h", "ym", "z", "x", "w", "l", "u", "d", "f", "bm", "M", "b", "v", "e", "N", "mm", "mc", "range"], "num": ["name", "unit", "loc", "digit", "mn", "int", "p", "na", "init", "g", "Num", "mon", "umi", "mult", "number", "un", "NUM", "split", "sign", "temp", "nom", "nu", "div", "index", "x", "norm", "valid", "sn", "node", "inc", "mu", "con", "u", "d", "cal", "nn", "max", "mom", "uni", "one", "f", "initial", "sort", "nam", "none", "note", "rank", "no", "bin", "b", "dim", "np", "N", "multi", "form", "sum", "block", "um", "mun"], "i": ["k", "a", "ie", "ib", "p", "ix", "iq", "iu", "z", "ind", "I", "cm", "l", "it", "u", "d", "f", "ni", "b", " ii", "e", "bc", "id", "li", "ii", " b"], "s": ["ss", "k", "a", "south", "ans", "p", "ps", "states", "xs", "g", "y", "o", "r", "sd", "h", "size", "z", "si", "es", "x", "S", "sn", "sb", "sites", "l", "ses", "d", "cn", "u", "sin", "f", "cs", "Ns", "ns", "ws", "su", "os", "gs", "b", "v", "e", "ls", "ds", "se", "an", "ins"], "c": ["k", "a", "p", "y", "r", "o", "ec", "h", "C", "lc", "z", "ce", "x", "cy", "cu", "con", "cm", "l", "cn", "d", "u", "max", "q", "f", "cs", "ac", "ci", "ct", "b", "v", "cf", "e", "t", "cr", "cc"], "j": ["ji", " p", "k", "ie", "ja", " z", " g", "p", "jo", " r", " id", "y", " v", "jj", " ind", " y", " x", "ix", "o", "r", " k", "jit", "jl", " f", "z", "jan", "index", "x", " ir", "ind", " il", "adj", "obj", "l", "u", "uj", "d", "nn", "q", "js", "jp", " o", "f", "jc", "br", "ni", "ij", "J", "bj", "v", " ii", "b", " col", "fr", "kj", "li", " index", " u", " l", "ii", " b", " d"]}}
{"code": "N = int(input())\\n\\nA_list = list(map(int, input().split()))\\nA_list_min = sorted(A_list)\\n\\nfor i in range(len(A_list)-1):\\n    if A_list_min[i] == A_list_min[i+1]:\\n        print(\"NO\")\\n        exit()\\nprint(\"YES\")", "target": "135", "substitutes": {"N": ["F", "name", "unit", "L", "V", "Max", "Q", "Num", "NI", "K", "number", "P", "T", "C", "B", "D", "S", "A", "I", "no", "R", "M", " n", "NA", "nb", "n"], "A_list": ["AJstream", "A_LIST", "A7list", "AJdefault", " A_range", "A_map", "A7default", "Ackl", "A_l", "AJmin", " A_cl", "A7map", "Ackmin", "A_default", "AIPLIST", "alpha_List", "A_min", "Acklist", "A_List", "Altcklist", "Altckstream", "alphaJList", "A_range", "Alt_list", "Alt_stream", "A_stream", "Ackstream", "AJList", "AJmap", "A_cl", "alphaJlist", "AJlist", "A6LIST", "Alt_l", "AIPrange", "alpha_default", "A7List", "Alt_min", "Altckl", "alpha_map", "alpha_list", "alphaJdefault", " A_LIST", "AIPlist", "AJl", "A6range", "A6cl", "AIPcl", "A6list", "Altckmin", "alphaJmap"], "A_list_min": ["A_list_mini", "A_list_list", "A_l_mini", "A_list_dec", "A_l_min", "A_list_diff", "A_l_list", "A_list_Min", "A_list_max", "A_l_max", "A_l_Min"], "i": ["gi", "k", "ui", "vi", "end", "ie", "int", "me", "qi", "mi", "p", "ai", "c", "h", "y", "ix", "ini", "iu", "ti", "z", "on", "eni", "index", "x", "si", "yi", "ind", "start", "I", "l", "fi", "u", "d", "pi", "j", "f", "io", "xi", "ri", "di", "ip", "ci", "my", "e", "id", "li", "ii", "bi", "n"]}}
{"code": "l = sorted(map(int, input().split()))[:2]\\nprint(sum(l))", "target": "298", "substitutes": {"l": ["lp", "s", "k", "loc", "ol", "L", "p", "g", "c", "i", "o", "r", "sl", "h", "el", "left", "split", "la", "lc", "kl", "u", "Li", "d", "ll", "ln", "f", "m", "list", "nl", "lit", "b", "v", "t", "ls", "e", "li", "lb", "n"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nz = sum(a)\\nln = []\\nx = 0\\nfor i in range(n - 1):\\n    x += a[i]\\n    ln.append(abs(z - 2 * x))\\nprint(min(ln))", "target": "424", "substitutes": {"n": ["min", "s", "k", "p", "c", "o", "r", "nc", "y", "h", "num", "ne", "nu", "w", "ny", "l", "u", "d", "nt", "f", "j", "m", "ns", "nl", "b", "v", "len", "t", "N", "e", "nb"], "a": ["aa", "s", "sta", "va", "ma", "ans", "p", "na", "ai", "c", "fa", "y", "la", "ba", "ab", "au", "array", "da", "ar", "A", "af", "w", "l", "f", "sa", "asa", "ga", "ac", "area", "aux", "aj", "am", "ae", "alpha", "b", "za", "an", "ad"], "z": ["k", "iz", "ze", "p", "tz", "c", "y", "h", "cz", "zh", "w", "zn", "l", "u", "d", "q", "nz", "f", "Z", "j", "m", "zen", "v", "zip", "b", "t", "e", "count", "ez", "zi", "gz", "za"], "ln": ["lp", "lins", "loc", "ol", "L", "NL", "ini", "log", "lli", "lr", "zon", "lv", "vin", "lc", "kn", "kl", "fn", "tan", "inv", "oln", "l", "lon", "nn", "ll", "sol", "dl", "lf", "rl", "zen", "nl", "wl", "fl", "lu", "len", "lb", "ld", "zip", "ls", "lt", "ii", "lin"], "x": ["dx", "int", "X", "p", "tx", "xs", "width", "xx", "fx", "y", "h", "lex", "ix", "rx", "pos", "px", "xt", "ex", "index", " xx", "w", "cross", "l", "wx", "u", "max", "j", "f", "ax", "ww", "xi", "data", "v", "xp", "t", "e", "xy", "zi", "step", "xc", "gz"], "i": ["k", "qi", "p", "phi", "c", "y", "o", "h", "ix", "iu", "si", "index", "yi", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", "m", "xi", "di", "ci", "v", "b", "e", "t", "zi", "id", "li", "ii", "bi"]}}
{"code": "from sys import stdin\\ndef main():\\n    #\u5165\u529b\\n    readline=stdin.readline\\n    a,b,c=map(int,readline().split())\\n\\n    li=[a,b,c]\\n    li.sort(reverse=True)\\n    if li[0]==li[1]+li[2]:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\nif __name__==\"__main__\":\\n    main()", "target": "332", "substitutes": {}}
{"code": "n=int(input())\\ns=input()\\nans=n\\nfor i in range(len(s)-1):\\n    if s[i]==s[i+1]:\\n        ans-=1\\nprint(ans)", "target": "717", "substitutes": {"n": [" N", "span", "p", "na", "c", "o", "r", "nc", "num", "net", "ne", "z", "nan", "sn", "ny", "zn", "l", "cn", "d", "nt", "nn", "max", "network", "f", "m", "Ns", "ns", "no", "ni", "nr", "b", "e", "N", "t", "nb", "an"], "s": ["ss", "a", "strings", "south", "groups", "p", "states", "ps", "g", "c", "xs", "rows", "sets", "sts", "o", "y", "r", "ows", "si", "es", "blocks", "x", "S", "sn", "sb", "tests", "args", "l", "lines", "services", "d", "ses", "f", "cs", "m", "ns", "ws", "input", "features", "os", "abs", "gs", "b", "v", "e", "ls", "ips", "an", "ins"], "ans": ["ano", "a", "ents", "int", "annis", "lan", "span", "p", "na", "ps", "atan", "ats", "aning", "antis", "anas", "AN", "ANS", "anes", "vs", "ann", "anon", "ani", "anc", "ares", "ana", "can", "params", "nan", "sn", "ars", "anned", "anus", "args", "aned", "chan", "nn", "ons", "ids", "aus", "anne", "leans", "cs", "ens", "ants", "ns", "scan", "os", "san", "ls", "ds", "an", "ins"], "i": ["gi", "k", "ui", "end", "a", "mi", "p", "ai", "c", "o", "h", "y", "num", "ini", "ix", "r", "iu", "slice", "z", "mini", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "j", "f", "m", "di", "ci", "v", "b", "e", "col", "id", "li", "ii", "bi", "ip"]}}
{"code": "import math\\nn=int(input())\\n\\ndef add_v(l1,l2):\\n    n=len(l1)\\n    l=[0]*n\\n    for i in range(n):\\n        l[i]=l1[i]+l2[i]\\n    return l\\n\\ndef scar_multiple_v(scalar,l):\\n    n=len(l)\\n    ans=[0]*n\\n    for i in range(n):\\n        ans[i]=l[i]*scalar\\n    return ans\\n\\ndef mat_multi_v(mat,l):\\n    n=len(l)\\n    ans=[0]*n\\n    for i in range(n):\\n        for j in range(n):\\n            ans[i]+=mat[i][j]*l[j]\\n    return ans\\n\\ndef make_points(tail,head):\\n    ans=[[0]*2 for _ in range(5)]\\n    ans[0]=tuple(tail)\\n    ans[1]=tuple(add_v(tail,scar_multiple_v(1/3,add_v(head,scar_multiple_v(-1,tail)))))\\n\\n    v=scar_multiple_v(1/3,add_v(head,scar_multiple_v(-1,tail)))\\n    mat=[[1+math.cos(math.radians(60)),-math.sin(math.radians(60))],\\\\n         [math.sin(math.radians(60))  ,1+math.cos(math.radians(60))]]\\n    ans[2]=tuple(add_v(tail,mat_multi_v(mat,v)))\\n    ans[3]=tuple(add_v(tail,scar_multiple_v(2/3,add_v(head,scar_multiple_v(-1,tail)))))\\n    ans[4]=tuple(head)\\n    return tuple(ans)\\n\\ndef make_1_coch_curve(iter,tail,head):\\n    points=make_points(tail,head)\\n    if iter == n-1:\\n        for i in range(len(points)-1):\\n            print(\"{} {}\".format(points[i][0],points[i][1]))\\n            \\n    else:\\n        for i in range(4):\\n            make_1_coch_curve(iter+1,points[i],points[i+1])\\n            \\nif n == 0:\\n    print(\"{} {}\\n{} {}\".format(0,0,100,0))\\nelse:\\n    make_1_coch_curve(0,[0,0],[100,0])\\n    print(\"{} {}\".format(100,0))\\n        \\n\\n", "target": "280", "substitutes": {"n": ["min", "s", " p", "name", "span", "non", "y", "en", " name", "nu", "x", "nan", "conn", "f", " ns", "b", " num", "dn", " N", "h", " c", "net", "ne", "ng", "fn", " fn", "con", "u", "nw", " count", "ni", "len", "e", "N", "an", "p", " number", " network", " nat", "r", "log", "el", " f", "z", "sn", "d", "max", "ln", "m", "none", "ns", "t", " length", "pn", "count", " size", "k", "a", " span", "na", "g", "c", "o", "nc", "num", "un", " k", "w", "cn", "nn", "nt", " m", "no", "nl", "nr", "nb", " len"], "l1": ["L0", "v2", "L2", "el1", "L1", "L01", "ll1", "lOne", "l0", "ll01", "h1", "hb", "el2", "LOne", "ll2", "el0", "l01", "v0", " lb", "llOne", "Lb", "v1", " l01", "h2", "lb", " lOne"], "l2": ["L0", "L5", "Lsecond", "L2", " l0", "L1", "ll0", "li1", "ll1", " l5", "lsecond", " l82", "l0", "lisecond", "ll5", "L82", " lsecond", "li82", "ll2", "l82", "li2", "l5"], "l": ["lp", "s", "k", "ol", "a", "L", "p", "al", "g", "c", "o", "r", "sl", "en", "h", "el", "ml", "la", "lc", "jl", "kl", "x", "los", "u", "ll", "ln", "f", "dl", "m", "lists", "list", "nl", "wl", "fl", "lu", "len", "b", "lb", "t", "ls", "all", "il", "e", "ul", "li", "an", "lin"], "i": ["gi", "ji", "ui", "vi", "a", "ei", "int", "ie", "qi", "mi", "p", "ai", "c", "oi", "o", "y", "h", "ini", "ix", "iu", "lc", "z", "si", "eni", "index", "x", "yi", "on", "ind", "start", "I", "uri", "it", "u", "pi", "fi", "io", "f", "m", "xi", "ori", "di", "ri", "ni", "ci", "ip", "b", "e", "t", "info", "iw", "multi", "id", "zi", "li", "ii", "inner", "bi", "ti"], "scalar": ["scalesar", "scalesal", "scallar", "scariat", "scalara", "sccalar", " scalal", "scalsar", "scallAR", "scalesAR", "sccalal", "scalsat", " scallAR", "scalsars", " Scalat", " Scalsars", " scallas", "scariar", "scalat", "sccalat", " Scalsar", "scalesas", "scalal", "scallas", "sccalara", " Scalara", "scalAR", " scalAR", " scallal", "scariars", " scalas", "scallal", " Scalars", "scalas", " scallar", " Scalsara", "sccalars", " Scalar", "scalsara", " Scalsat", "scalars", "sccalas", "scariara", "sccalAR"], "ans": ["ss", "s", "ents", "offs", "span", "nas", "ai", "alls", "sets", "en", "ks", "la", "names", "ands", "x", "ons", "ll", "sk", "trans", "ants", "list", "ings", "il", "plan", "ops", "li", "ins", "L", "les", "amps", "atan", "ats", "ads", "ANS", "aces", "au", "ars", "cs", "man", "ni", "os", "all", "olds", "an", "lan", "cas", "vals", "ams", "p", "ps", "ions", "el", "rules", "ann", "es", "can", "sn", "lang", "lines", "faces", "ln", "ns", "scan", "lu", "ls", "cons", "ul", "lists", "a", "groups", "eps", "na", "results", "vs", "anon", "ani", "ays", "als", "outs", "ant", "args", "aned", "nn", "aus", "ens", "nl", "features", "ds", "oss"], "mat": ["layer", "loc", "a", "at", "vel", "ma", "vec", " Mat", "wt", "pat", "al", "arr", "p", "na", "lat", "c", "mon", "g", "mult", "var", "h", "r", "format", "o", "mt", "Mat", "log", "ver", "mas", "el", "la", "lc", "dot", "array", "att", "fn", "x", "mol", "math", "mu", "hat", "flat", "pl", "u", "d", "mag", "q", "ov", "vert", "f", "ln", "ut", "m", "cat", "map", "match", "lu", "b", "mac", "mm", "mot", "sv", "feat", "lin"], "j": ["ji", "k", "a", "ja", "p", "ai", "g", "c", "jo", "y", "o", "jj", "ix", "dj", "h", "r", "jl", "z", "je", "si", "x", "u", "uj", "ark", "d", "js", "jp", "f", "m", "jc", "oj", "xi", "aj", "ni", "ij", "J", "b", " ii", "e", "li", "ii", "ik", "ang"], "tail": ["name", "loc", "tick", "slice", "coll", "conn", "ill", "pull", "lim", "length", "batch", "knife", "zip", "feat", "prefix", "document", "shell", "h", "subject", "left", "lc", "ne", "pattern", "header", "sync", "tip", "wl", "spin", "len", "id", "lin", "unit", "spec", "rest", "collection", "p", "size", "long", "index", "nil", "tails", "sn", "start", "heads", "fat", "port", "stop", "live", "match", "limit", "col", "config", "front", "lp", "cycle", "end", "line", "thread", "lead", "foot", "lock", "HEAD", "tag", "local", "body", "nt", "term", "null", "det", "test"], "head": ["name", "then", "ack", "k", "end", "rest", "thread", "go", "plus", "foot", "condition", "stick", "load", "post", "h", "case", "HEAD", "comment", "subject", "client", "link", "local", "run", "index", "clean", "Head", "kin", "body", "start", "anch", "conn", "heads", "du", "patch", "before", "root", "right", "header", "point", "style", "none", "port", "pull", "back", "man", "depth", "kick", "set", "self", "input", "check", "length", "view", "ck", "origin", "id", "keep", "feat", "wall", "form", "front", "block", "ad"], "_": ["s", "int", "p", "h", "x", "q", "f", "len", "all", "an"], "v": ["s", "k", "vi", "ve", "uv", "V", "va", "p", "nav", "g", "c", "h", "vs", "rev", "x", "vm", "av", "cv", "w", "u", "d", "conv", "ov", "vert", "f", "m", "vv", "vt", "tv", "b", "t", "vy", "sv", "ul", "vd"], "iter": ["loc", "end", "spec", "int", "ner", "init", "inter", "number", "num", "orig", "pos", "axis", "ver", "el", "ite", "temp", "size", "index", "iterator", "it", "shift", "col", "outer", "length", "ip", "batch", "len", "limit", "Iter", "order", "count", "seq", "id", "keep", "inner", "li", "er", "its", "skip", "loop", "test", "trial"], "points": ["holes", "balls", "frames", "groups", "offs", "amps", "vals", "words", "p", "ps", "pages", "steps", "arts", "sets", "cases", "results", "pos", "ads", "charges", "posts", "ks", "pt", "cycles", "params", "events", "pieces", "cells", " point", "lines", "parts", "faces", "items", "ports", "ons", "Points", "works", "point", "ants", "tops", "objects", "pins", "products", "dates", "breaks", "features", "images", "ts", "opens", "pps", "pointers", "changes", "places", "ins"]}}
{"code": "n,k=map(int,input().split())\\nif n==1:\\n  print(k)\\nelse:\\n  print(k*(k-1)**(n-1))", "target": "582", "substitutes": {"n": ["name", "s", "p", "na", "c", "i", "o", "number", "nc", "num", "net", "y", "r", "ne", "kn", "z", "fn", "x", "w", "l", "u", "d", "nt", "nn", "q", "f", "network", "j", "m", "none", "ln", "ns", "no", "nl", "ni", "len", "v", "b", "e", "N", "pn", "nb"], "k": ["ke", "p", "c", "i", "K", "y", "o", "r", "num", "kk", "number", "h", "ks", "size", "kn", "z", "kl", "x", "mk", "w", "ak", "ask", "l", "ok", "u", "d", "q", "ki", "j", "sk", "f", "m", "ku", "kick", "check", "length", "v", "b", "key", "e", "N", "id", "ik"]}}
{"code": "n=int(input())\\ns=input()\\nl=0\\nr=n\\nwhile r-l>1:\\n  mid=(r+l)//2\\n  dic={}\\n  flag=False\\n  for i in range(n-mid+1):\\n    tmp=s[i:i+mid]\\n    if tmp not in dic:\\n      dic[tmp]=i+mid\\n    else:\\n      if dic[tmp]<=i:\\n        flag=True\\n        break\\n  if flag:\\n    l=mid\\n  else:\\n    r=mid\\nprint(l)", "target": "521", "substitutes": {"n": ["k", "p", "c", "nm", "o", "nc", "num", "y", "h", "net", "z", "x", "sn", "w", "u", "d", "nt", "q", "f", "ln", "network", "m", "j", "ns", "nl", "nr", "len", "b", "t", "N", "e", "nb", "nor"], "s": ["ss", "strings", "spec", "south", "a", "p", "states", "g", "c", "xs", "sym", "y", "sl", "sp", "z", "si", "S", "w", "sb", "services", "u", "d", "ses", "sg", "js", "f", "sa", "m", "sync", "sections", "ns", "b", "v", "space", "t", "ls", "e", "ds", "rs"], "l": ["lp", "k", "L", "p", "g", "c", "o", "sl", "h", "el", "lr", "la", "left", "lo", "lc", "z", "kl", "url", "w", "u", "d", "pl", "ll", "j", "f", "ln", "dl", "m", "lf", "rl", "nl", "fl", "v", "b", "len", "t", "e", "ls", "lt", "li", "ii"], "r": ["rh", "rr", "k", "ur", "p", "g", "c", "h", "o", "rn", "z", "nor", "x", " sr", "ar", " ir", "w", "u", "rb", "d", "q", "j", "sr", "f", "m", "ir", "right", "rl", "rg", "rt", "ri", "R", "nr", "b", "e", "t", "fr", "er", "rs", "rad"], "mid": ["rh", "min", "field", "middle", "mode", "end", "mad", "pid", "int", "line", "mr", "mi", "dist", "nd", "err", "nm", "mult", "low", "medium", "pos", "md", "grid", "div", "rand", "mini", "rid", "diff", "begin", "master", "ind", "start", "phase", "d", "tri", "max", "nt", "ra", "shift", "m", "lim", "pad", "hi", "len", "limit", "dim", "ld", "key", "e", "le", "mm", "multi", "id", "sub", "Mid", "cl", "li", "range", "part", "sum", "ref", "rad"], "dic": ["indik", "dedic", "lica", "lic", "dedics", "Dac", "ndics", "indac", "pdic", "adiac", "dication", "ndication", "ndice", "dict", "dac", "indic", "diac", "Dics", "Dic", "Dica", "dik", "adic", "dics", "dica", "pdica", "adics", "Dict", "pdict", "dice", " dice", " dac", "pdics", "ndik", " dication", "indics", "Dik", "lics", "adik", "ndic", " dics", " diac", "lict", "dedice", "ndiac", " dik", "dedication"], "flag": ["field", "group", "line", "pid", "int", "code", "ag", "prop", "fd", "arg", "init", "stat", "err", "log", "like", "tag", "force", "long", "ar", "ind", "only", "bug", "fi", "pin", "f", "lag", "sort", "status", "sync", "flags", "fun", "style", "back", "kind", "bin", "type", "len", "key", "debug", "count", "id", "bit", "filter", "part", "Flag", "offset", "info"], "i": ["k", "a", "end", "int", "p", "phi", "ai", "c", "o", "y", "ini", "iu", "ti", "z", "mini", "si", "index", "x", "ind", "start", "I", "u", "pi", "d", "j", "f", "m", "xi", "ni", "ci", "b", "v", "e", "t", "id", "li", "ii"], "tmp": ["loc", "cmp", "ie", "int", "elt", "const", "tt", "p", "c", "err", "kk", "cont", "pos", "md", "beta", "slice", "txt", "td", "sp", "done", "temp", "attr", "mp", "config", "mini", "z", "si", "xt", "dest", "diff", "image", "st", "start", "ind", "next", "obj", "meta", "nb", "rb", "d", "ace", "nt", "ptr", "sup", "f", "j", "position", "ignore", "m", "term", "data", "stuff", "nr", "v", "np", "t", "id", "li", "inner", "source", "part", "test"]}}
{"code": "def main():\\n    A, B, C, D = list(input())\\n    for i in ['+','-']: \\n        for j in ['+','-']:\\n            for k in ['+','-']:\\n                tmp = A + i + B + j + C + k + D\\n                if eval(tmp) == 7:\\n                    print(tmp+'=7')\\n                    exit()\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "504", "substitutes": {"A": ["AD", "a", "At", "H", "X", "Y", "AP", "LA", "K", "Na", "AB", "O", "Bu", "P", "T", "AC", "Ar", "mA", "As", "AA", "S", "W", "I", "Ab", "Art", "CA", "U", "AF", "M", "N", "G", "Am", "Ac"], "B": ["F", "E", "L", "H", "Q", "Y", "K", "DB", "BA", "AB", "O", "P", "T", "BB", "BC", "BD", "W", "TB", "I", "Ab", "BE", "Z", "R", "GB", "M", "J", "b", "N", "G", "BF", " b", "Bs"], "C": ["F", "E", "L", "Cs", "FC", "Q", "X", "Y", "c", "YC", "K", "O", "P", "T", "AC", "BC", "S", "W", "CM", "CF", "I", "cm", "Z", "CA", "R", "JC", "M", "CC", "N", "G"], "D": ["F", "E", "L", "V", "Q", "Y", "c", "dL", "K", "DE", "md", "O", "P", "T", "dB", "DD", "z", "S", "W", "w", "I", "CD", "d", "Do", "Z", "Data", "sk", "du", "dc", "M", "J", "e", "N", "G", "ds", " d"], "i": ["gi", "ji", "a", "chi", "qi", "p", "ai", "g", "c", "y", "r", "o", "h", "im", "iu", "z", "x", "ind", "I", "it", "l", "u", "d", "pi", "q", "f", "ir", "m", "ac", "ci", "v", "b", "e", "id", "ii", "ik", "n", "ip"], "j": ["gi", "ji", "a", "ja", "p", "g", "c", "jo", "y", "h", "r", "o", "im", "jl", "z", "je", "x", "w", "l", "d", "q", "job", "jp", "f", "m", "oj", "jam", "ij", "J", "v", "b", "key", "e", "kj", "n"], "k": ["E", "p", "g", "c", "dk", "K", "o", "y", "h", "r", "kk", "ks", "P", "z", "x", "kw", "w", "l", "ok", "u", "d", "q", "ki", "sk", "ky", "f", "m", "v", "b", "ck", "e", "ik", " d", "n"], "tmp": ["text", "dd", "tt", "fb", "p", "pre", "fd", "c", "tp", "jj", "result", "td", "txt", "beta", "md", "T", "sp", "seed", "temp", "mp", "diff", "cache", "sb", "obj", "ff", "Temp", "vv", "pad", "yy", "input", "data", "db", "stuff", "vt", "v", "fake", "t", "py", "treatment", "nb", "test", "tc"]}}
{"code": "n, k = map(int, input().split())\\n\\nif k == 1:\\n    print(0)\\n    exit()\\nn -= k\\nprint (n)", "target": "739", "substitutes": {"n": ["min", "name", "s", "int", "code", "p", "na", "init", "c", "i", "o", "number", "y", "num", "nc", "net", "pos", "left", "temp", "nu", "kn", "z", "fn", "index", "x", "nan", "l", "d", "nn", "max", "network", "f", "j", "m", "none", "ns", "no", "nl", "v", "b", "e", "N", "count"], "k": ["ke", "p", "g", "c", "i", "K", "o", "y", "r", "kk", "ks", "kn", "z", "kl", "ch", "x", "mk", "kw", "ko", "ak", "l", "ok", "u", "d", "unk", "q", "j", "sk", "f", "m", "kick", "v", "b", "key", "ck", "e", "kr", "ik"]}}
{"code": "s = str.upper(input())\\n\\nfor i in range(len(s)):\\n    if s[i] == 'A':\\n        a = i\\n        break\\n\\n\\nfor i in range(1,len(s)):\\n    if s[-i] == 'Z':\\n        b = len(s) + 1 - i\\n        break\\nprint(b-a)", "target": "365", "substitutes": {"s": ["ss", "strings", "bytes", "south", "str", "qs", "states", "p", "ps", "g", "xs", "c", "steps", "sym", "sets", "o", "r", "y", "speech", "sf", "ads", "lower", "bis", "ks", "aces", "second", "si", "es", "blocks", "S", "w", "sb", "parts", "services", "ses", "lines", "d", "l", "sg", "u", "f", "cs", "m", "ssl", "ns", "ws", "seconds", "input", "su", "os", "gs", "signed", "string", "space", "t", "ls", "e", "ings", "ts", "ips", "letters", "ds", "sv", "comments", "n"], "i": ["k", "ui", "ie", "int", "mi", "p", "phi", "ai", "inter", "c", "ic", "oi", "o", "y", "r", "ini", "im", "iu", "lo", "ti", "z", "mini", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "idi", "io", "j", "f", "m", "cli", "xi", "di", "ni", "ci", "v", "e", "multi", "id", "li", "ii", "n", "bi", "sky", "ip"], "a": ["aa", "tta", "auto", "va", "span", "p", "na", "ai", "g", "c", "fa", "y", "ba", "ab", "z", "da", "x", "A", "ia", "aaa", "ca", "f", "sa", "ac", "ga", "area", "ae", "alpha", "abs", "ea", "an", "e", "ad", "n"], "b": ["aa", "be", "auto", "ib", "fb", "p", "bs", "bp", "g", "c", "y", "r", "bis", "beta", "B", "ba", "ab", "z", "body", "sb", "l", "rb", "d", "bb", "bf", "abb", "ca", "f", "bd", "e", "bc", "nb", "lb", "bi", "ad", "n"]}}
{"code": "import re\\nimport sys\\nimport math\\nimport itertools\\nimport bisect\\nfrom copy import copy\\nfrom collections import deque,Counter\\nfrom decimal import Decimal\\nimport functools\\ndef v(): return input()\\ndef k(): return int(input())\\ndef S(): return input().split()\\ndef I(): return map(int,input().split())\\ndef X(): return list(input())\\ndef L(): return list(input().split())\\ndef l(): return list(map(int,input().split()))\\ndef lcm(a,b): return a*b//math.gcd(a,b)\\nsys.setrecursionlimit(10 ** 6)\\nmod = 10**9+7\\ncnt = 0\\nans = 0\\ninf = float(\"inf\")\\nal = \"abcdefghijklmnopqrstuvwxyz\"\\nAL = al.upper()\\n\\nn,m,k = I()\\n\\nfor i in range(n+1):\\n    for j in range(m+1):\\n        if i*(m-j)+j*(n-i) == k:\\n            print(\"Yes\")\\n            exit()\\n\\nprint(\"No\")\\n", "target": "92", "substitutes": {"a": ["s", "aa", "ack", "auto", "va", "ma", "p", "g", "c", "ama", "fa", "y", "la", "ba", "ab", "au", "da", "x", "A", "u", "d", "aaa", "f", "ca", "sa", "ac", "ga", " A", "aux", "aj", "am", "ae", "alpha", "ea", "an", "ad"], "b": ["s", "aa", "ib", "fb", "p", "bs", "bp", "pb", "c", "y", "r", "h", "wb", "mb", "B", "ba", "ab", "x", "A", "sb", "l", "bh", "bf", "rb", "bb", "d", "u", "abb", "ob", "f", "bd", "v", "base", "e", "bc", "abc", "nb", "lb", "bi"], "mod": ["mode", "MOD", "acc", "exp", "mult", "mem", "delay", "circ", "num", "reg", "aug", "sim", "comp", "module", "crit", "grad", "inc", "sec", "ac", "fun", "dim", "mods", "debug", "dec", "step", "ctr", "rad", "Mod"], "cnt": ["cNT", "acnt", " counter", "Cnt", "Counter", "acount", "count", "CNT", "counter", "acounter", " count", " cNT", "acNT", "Count"], "ans": [" skip", "s", " dim", " mag", " ms", " success", " rc", " sum", " exp", " ind", " c", " bits", " codes", " errors", " tries", " mask", " iterations", " pc", " log", " error", " flags", " si", " ins", " init", " ns", " acc", " steps", " na"], "inf": [" Infinity", " imp", "int", " expl", " z", "p", " Inf", "phi", "acc", " inc", "iter", " iterations", "z", " infinite", "Inf", "nan", " pi", "inc", " nu", "ll", "frac", "pp", " INF", " init", "alpha", " infinity", "id", "info"], "al": ["aa", "gal", "alt", "align", "Al", "ali", "pal", "ag", "aled", "tal", "hal", "alg", "el", "sal", "aler", "ap", "ale", "AA", "als", "ar", "af", "dal", "l", "ass", "cal", "ll", "mal", "bal", "ae", "alpha", "ell", "alias", "all", "il"], "AL": [" inter", " AA", "Al", " id", " IL", " seq", " ass", " name", " cal", " ident", " f", " Al", " ar", " letter", " axis", " J", " A", " ax", " am", " el", " sa", " op", " acc", " steps", " AK", " alias"], "n": ["s", "mn", "p", "g", "c", "o", "r", "y", "num", "en", "nc", "un", "h", "z", "x", "w", "conn", "l", "u", "d", "cn", "nn", "q", "nt", "f", "network", "ln", "ns", "v", "e", "N", "t", "nb"], "m": ["mn", "mi", "p", "g", "c", "nm", "o", "r", "y", "h", "num", "ym", "mean", "z", "x", "mu", "w", "om", "cm", "l", "machine", "u", "d", "pi", "f", "sm", "bm", "man", "M", "v", "e", "mm", "hm", "mc", "an", "um"], "k": ["km", "E", "ke", "p", "_", "c", "g", "dk", "K", "o", "y", "kk", "ks", "P", "SK", "kn", "z", "x", "kw", "w", " K", "ak", "l", "ok", "u", "d", "q", "sk", "f", "v", "key", "e", "ik"], "i": ["ih", "ji", "ui", "int", "p", "ai", "c", "o", "y", "r", "im", "iu", "ti", "z", "si", "x", "ind", "I", "l", "u", "pi", "d", "q", "io", "f", "xi", "ni", "ci", "v", "t", "e", "li", "ii"], "j": ["ji", "ja", "p", "g", "c", "y", "h", "o", "r", "jl", "z", "x", "w", "l", "u", "d", "q", "f", "jp", "ij", "J", "v", "t", "e", "kj", "li", "ii", " l"]}}
{"code": "def main():\\n    import sys\\n    ikimasu = sys.stdin.buffer.readline\\n    ini = lambda: int(ins())\\n    ina = lambda: list(map(int, ikimasu().split()))\\n    ins = lambda: ikimasu().strip()\\n    \\n    n = ini()\\n    rick = 0\\n    import math\\n    for i in range(1,n+1):\\n        rick+=math.floor((n-1)/i)\\n    print(rick)\\n        \\n\\n\\n    \\n        \\n\\n\\n        \\n\\n\\n    \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "589", "substitutes": {"ikimasu": ["ikimpasu", "ikeimasi", "iksimada", "ikimssa", "ikimmasi", "iksimasu", "ikimsami", "ikemucci", "ikimsasi", "ykImami", "ikImasi", "ikimucci", "icemasu", "ykimsa", "ykImasi", "ikemasi", "ikimpasa", "ikeimami", "ykimasu", "ikigasu", "ikigaux", "ikimasi", "ikimsa", "ikimmasu", "ikimami", "ikImasu", "ykImasu", "ikymasi", "icemucci", "icemasa", "icimasu", "ikeimasu", "ikmami", "ikymsa", "ykimami", "ikeimada", "ikmasu", "icimasa", "ikmasi", "iksimami", "ikimmada", "ikimmami", "ikemasa", "ikimsasu", "ikymami", "icimaux", "ikemasu", "ykImsa", "ikigucci", "ikemaux", "ikimasa", "ikImsa", "ykimasi", "ikImami", "icemaux", "ikigasa", "ikymasu", "icimucci", "ikemami", "ikemada", "ikmada", "ikimada", "iksimasi", "ikimpaux", "ikimaux", "ikimpucci"], "ini": ["lins", "arin", "int", "mi", "init", "fin", "ai", "INS", "ine", "inf", "ino", "ani", "mini", "si", "index", "inc", "ind", "iner", "lines", "ines", "inos", "cli", "xi", "cin", "di", "ni", "ci", "bin", "inn", "inet", "zi", "li", "ii", "inner", "config", "lin", "bi", "abi"], "ina": ["ma", "mi", "na", "ai", "INS", "iners", "ine", "ino", "mini", "inc", "ind", "iner", "ia", "ines", "ra", "inos", "uni", "cin", "di", "ni", "ci", "inn", "ice", "zi", "inas", "ii", "cci", "abi"], "ins": ["lins", "s", "IN", "strings", "int", "includes", "ints", "INS", "login", "values", "ino", "outs", "kin", "inc", "ind", "iner", "runs", "ines", "lines", "sin", "pin", "inos", "pins", "ns", "bin", "plugins", "mins", "inn", "include", "ls", "ips", "inas", "inner", "bits", "Ins", " bins", "lin"], "n": ["min", "s", "k", "non", "p", "na", "c", "o", "y", "nc", "num", "h", "en", "ne", "z", "mini", "x", "ind", "conn", "l", "u", "d", "pi", "nn", "nt", "j", "network", "f", "m", "ns", "ni", "nr", "len", "b", "inn", "t", "N", "pn", "nb"], "rick": ["ici", "ox", "ris", "risk", "spec", "omi", "nox", "jack", "die", "tick", "rike", "init", "cake", "wine", "rx", "roc", "circ", "ix", "ricks", "orig", "hack", "gin", "ig", "lli", "coll", "ick", "ridge", "board", "kin", "osi", "args", "bug", "rix", "rip", "wired", "rc", "ill", "cin", "fee", "kick", "ri", "data", "ci", "pick", "ck", "rock", "id", "icks", "inner", "fine", "ican"], "i": ["gi", "k", "ie", "int", "qi", "mi", "p", "ic", "ai", "c", " I", "h", " iP", "ix", "iu", "z", "si", "index", "x", "ind", "I", "it", "l", "u", "d", "pi", "j", "f", "xi", "di", "ni", "ip", "ci", "e", "zi", "id", "ii", "bi", "ti"]}}
{"code": "S = input()[:: -1]\\nmod = 10 ** 9 + 7\\ndp = [[0 for _ in range(13)] for _ in range(len(S) + 1)]\\n\\nif S[0] == \"?\":\\n    for k in range(10):\\n        dp[1][k % 13] += 1\\nelse:\\n    dp[1][int(S[0]) % 13] += 1\\n\\ntmp = 1\\nfor i in range(2, len(S) + 1):\\n    tmp *= 10\\n    tmp %= 13\\n    for j in range(13):\\n        if dp[i - 1][j] > 0:\\n            if S[i - 1] == \"?\":\\n                for k in range(10):\\n                    dp[i][(tmp * k + j) % 13] += dp[i - 1][j] % mod\\n            else:\\n                dp[i][(tmp * int(S[i - 1]) + j) % 13] += dp[i - 1][j] % mod\\n\\nprint(dp[len(S)][5] % mod)", "target": "798", "substitutes": {"S": ["F", "s", "VS", "Rs", "L", "DS", "Sort", "V", "H", "Es", "Q", "X", "SF", "Y", "SE", "SC", " s", "SR", "NS", "JS", "Si", "K", "TS", "PS", "SH", "Source", "ST", "SAM", "SI", "Files", "P", "T", "B", "C", "D", "SK", "Sa", "A", "SL", "Service", "RS", "Sl", "I", "Ds", "SS", "Points", "WS", "Ns", "CS", "U", "R", "M", "GS", "SM", "SP", "N", "SN", "G", "ds", "SSL", "BS", "SU", "Socket"], "mod": ["min", "mode", "dig", "MOD", "exp", "c", "mult", "post", "lex", "rec", "loop", "im", "pm", "log", "tr", "section", "md", "cum", "reg", "temp", " Mod", "div", "od", "scale", "x", "oct", "comp", "module", "ind", "grad", "pack", "Mods", "cm", "sec", "max", "row", "m", "comb", "option", "check", "rem", "mods", "tab", "cr", "order", "dec", "mm", "dev", "step", "month", "ru", "form", "Mod"], "dp": ["s", " disp", " p", "DS", " UDP", "DC", "cp", "dm", " subp", "src", "DP", "dc", "address", "pipe", "CP", "zip", "np", " cp", "pd", "dos", "hp", " DP", "password", "xs", " iP", "MP", "api", "dB", "NP", "mp", "IP", " dd", "vp", "Sl", " dep", "pi", "do", "pp", "wd", "csv", "pg", "ip", " tcp", "wp", "p", "ps", "tp", "DB", "gp", "sp", "params", "decl", "d", "dr", "port", "pkg", "ep", "adr", "dim", "SP", "imp", "direction", "lp", "TP", "pb", "WP", "sl", "pm", "rep", "P", "D", "dt", "dl", "deb", "df", "di", "db", "ds", "sv", "nb"], "_": [" p", "__", "code", "p", "g", " x", " time", " __", "x", "l", "q", "out", "f", "ac", "all", " n", "val", "block", "ip"], "k": ["km", "ke", "p", "ked", "g", "c", "K", "o", "r", "kk", "un", "ks", "z", "ch", "x", "mk", "kw", "w", "ko", "ak", "l", "ok", "u", "d", "q", "sk", "f", "ky", "m", "uk", "v", "b", "key", "ck", "e", "id", "ik", "block", "n"], "int": ["float", "min", "text", "end", "digit", "code", "str", "ext", "inter", "c", "ints", "number", "num", "Int", "index", "x", "oct", "ind", "inc", "integer", "nt", "max", "point", "short", "INT", "char", "set", "list", "dec", "count", "id", "bit", "enc", "part", "ip"], "tmp": ["a", "cmp", "part", "tt", "perm", "p", "pre", "bp", "c", "tp", "kk", "cp", "beta", "api", "sp", "tf", "temp", "mp", "xxx", "x", "st", "now", "cm", "rb", "pi", "bb", "nt", "sup", "jp", "f", "m", "pp", "term", "pad", "alpha", "v", "b", "np", "t", "fake", "mm", "nb", "test", "offset"], "i": ["gi", "ji", "s", "ui", "vi", "a", "ie", "qi", "p", "ai", "g", "c", "ic", "oi", "h", "r", "y", "ini", "o", "ix", "iu", "api", "ti", "z", "si", "x", "yi", "ind", "I", "uri", "l", "u", "d", "pi", "it", "q", "f", "io", "m", "cli", "xi", "di", "ci", "b", "v", "e", "t", "multi", "id", "li", "ii", "source", "n", "bi", "ip"], "j": ["km", "ji", "s", "ie", "ja", "p", "g", "c", "jo", "h", "y", "r", "o", "jj", "jl", "z", "ch", "x", "l", "u", "d", "uj", "q", "js", "jp", "f", "m", "jc", "aj", "ip", "ij", "J", "v", "b", "key", "t", "kj", "li", "ii", "n"]}}
{"code": "N,M = map(int, input().split())\\nL = [[int(u) for u in input().split()] for i in range(M)]\\nS,T = map(int, input().split())\\n\\nedge = [[] for i in range(N+1)]\\nfor i in range(M):\\n    edge[L[i][0]].append(L[i][1])\\n    \\nq = [S]\\nINF = 10**9\\nvisited = [[INF+1, INF+1, INF+1] for i in range(N+1)]\\nvisited[S][0] = 0\\ncnt = 1\\nwhile len(q) > 0:\\n    length = len(q)\\n    for j in range(length):\\n        temp = q.pop(0)\\n        for i in range(len(edge[temp])):\\n            if visited[edge[temp][i]][cnt%3] > INF:\\n                q.append(edge[temp][i])\\n                visited[edge[temp][i]][cnt%3] = cnt\\n    cnt += 1\\n    \\nif visited[T][0] < INF:\\n    print(visited[T][0]//3)\\nelse:\\n    print(-1)", "target": "795", "substitutes": {"N": ["F", "Length", "E", "V", "NL", "H", "Q", "X", "Y", "NC", "Size", "Num", "NS", "K", "Na", "NM", "O", "P", "C", "B", "D", "Len", "Ne", "W", "I", "No", "Z", "Ns", "U", "R", "J", "CN", " n", "n"], "M": ["F", "MN", "E", "V", "H", "Q", "X", "Y", "K", "DM", "NM", "O", "P", "B", "C", "D", "LM", "MD", "W", "CM", "I", "Z", "m", "MC", "U", "R", "J", "MS", "MF", "MM", "MU", "G", "Mo", "n"], "L": ["F", "E", "LB", "V", "LT", "CI", "IL", "NL", "Q", "X", "LS", "Y", "Link", "LA", "dL", "LP", "Lu", "LU", "Left", "O", "P", "C", "B", "LM", "LD", "SL", "Layer", "I", "l", "Li", "LR", "CL", "U", "List", "LO", "LI", "LG", "DL", "G", "LL"], "u": ["gi", "k", "ui", "a", "uv", "p", "c", "yu", "o", "gu", "un", "iu", "uid", "nu", "ou", "uy", "x", "cu", "uli", "uri", "l", "d", "uni", "f", "pu", "ut", "du", "ue", "tu", "U", "su", "lu", "v", "t", "hu", "id", "uu"], "i": ["gi", "ji", "s", "k", "ui", "a", "ei", "int", "ie", "qi", "mi", "p", "ai", "g", "c", "isin", "oi", "o", "y", "ini", "iq", "iu", "api", "z", "si", "index", "x", "yi", "ind", "I", "it", "l", "pi", "d", "uri", "f", "io", "cli", "m", "xi", "ori", "di", "ni", "ci", "ip", "\u0438", "key", "v", "b", "type", "t", "e", "il", "info", "multi", "id", "li", "ii", "source", "n", "ti"], "S": ["F", "s", "E", "V", "H", "Q", "X", "Y", "SE", "SR", "NS", "K", "Si", "O", "P", "C", "B", "D", "Sa", "A", "SL", "W", "Sl", "I", "SS", "Z", "Ns", "U", "R", "J", "SN", "G"], "T": ["F", "E", "V", "TL", "H", "Q", "X", "Y", "TA", "K", "TS", "TN", "TH", "O", "P", "C", "B", "D", "TG", "TB", "A", "W", "Tab", "I", "Z", "TT", "Temp", "CL", "U", "R", "J", "t", "G", "test", "PT"], "edge": ["end", "GE", "line", "ie", "open", "issue", "event", "ge", "distance", "lead", "element", "entity", "case", "layout", "evidence", "office", "slice", "iter", "une", "link", "ite", "Edge", "ne", "index", "diff", "ce", "node", "ind", "route", "connection", "degree", "remote", "ace", "he", "network", "position", "range", "style", "close", "address", "age", "shape", "graph", "ide", " Edge", "fake", "e", "pe", "ice", "grade", "id", "environment", "source", "draw", "update"], "q": ["s", "k", "sq", "a", "sh", "qs", "queue", "qu", "qi", "Q", "request", "p", "qa", "g", "c", "y", "h", "o", "iq", "charge", "z", "que", "x", "w", "l", "d", "quad", "f", "dq", "m", "query", "question", "qt", "v", "b", "t", "e", "id", "qq", "n"], "INF": ["IRFS", "IRf", "INTF", " INf", "IOTF", "INFD", "OUTFF", "INSFF", "IOf", " INFs", "MNF", "OUTf", " INFF", "inOF", "IOEF", "INEF", "INPF", "INV", "OUTV", "CONFE", "inInf", " INOF", "INSF", "InF", "IOF", "IRF", " inF", "INf", " INPF", "ENF", "INInf", "InInf", "inFE", " INInf", "INOF", "IREF", " INTF", "IRFs", " INFE", "INFS", "IRTF", "InFE", " inN", "INSf", " INV", "ENf", "IRN", "MNPF", "MNFD", "ENFD", " INFS", " INFD", "INFE", "InEF", "INFF", "CONOF", " inFS", " inFs", "inF", "INN", "CONF", "OUTF", " INEF", "CONEF", " INN", "ENPF", "MNf", "INSV", "INFs", "CONInf"], "visited": ["visit", "travelized", "accessitted", "writtenit", "visitable", "visiting", "inviting", "signended", "invaged", "hostiting", "servited", "Visiting", "Visitable", "Visit", "servit", "visized", "circitized", "writtenited", "visatted", "signited", "visaged", "signit", "Vised", "comended", "travelited", "circited", "vised", "visitized", "VISit", "hostaged", "writtenitized", "comit", "comatted", "Visatted", "visended", "Visized", " Visiting", "accessitized", "navited", "writtenitted", "comited", " Vised", "continited", "serviting", " Visit", "circitted", "traveled", "travelit", "visitted", "hostit", "signatted", "navitable", "Visitized", "continit", "Visited", "circit", "VISited", " Visited", "navit", "accessit", "contined", "continitized", " Visized", "invited", "Visended", "naviting", "invit", " Visitable", "VISed", "VISitized", "servaged", "accessited", "hostited"], "cnt": ["cNT", "lcid", " ccount", "dcnt", "CNT", "cnc", "ucNT", "scNT", " cNT", " cct", "cct", "lcnc", "ccount", "dcct", " cnc", "Cnt", " cno", "ucnc", "scny", "cny", "Cnc", "Cno", " cny", "ucount", "knt", " cnd", "scnt", "knd", "kct", "kcount", "dccount", "cid", " count", "cno", "scct", "lcnt", "ucnt", "lcct", "lcno", " cid", "Cid", "count", "lcny", "lcNT", "dcnd", "cnd", "Count", "lcount"], "length": ["s", "k", "Length", "code", "tail", "level", "p", "distance", "width", "number", "section", "slice", "size", "long", "l", "f", "position", "HH", "angle", "sequence", "shape", "duration", "type", "len", "limit", "zip", "count", "id", "range", "total", "n"], "j": ["gi", "ji", "k", "ei", "code", "p", "go", "ge", "ai", "g", "jo", "gu", "ime", "iu", "ti", "z", "je", "time", "d", "ta", "js", "xi", "ci", "ij", "J", " ii", "li", "lo"], "temp": ["gi", "cur", "example", "k", "cycle", "ui", "unit", "level", "p", "init", "c", "extra", "case", "num", "item", "cp", "tmp", "iter", "api", "emp", "empty", "size", "lc", "local", "mini", "index", "cache", "dest", "now", "partial", "flat", "adj", "current", "cm", "pi", "tem", "f", "point", "style", "note", "term", "Temp", "ci", "path", "key", "v", "zip", "fake", "base", "cel", "atom", "cell", "id", "form", "test", "tc", "n"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\n\\n\\ndef main():\\n    N, M = map(int, input().split())\\n    A = [0] * M\\n    C = [0] * M\\n    for i in range(M):\\n        A[i], _ = map(int, input().split())\\n        C[i] = sum(2 ** (int(c) - 1) for c in input().split())\\n\\n    INF = 10 ** 18\\n    dp = [INF] * (2 ** N)\\n    dp[0] = 0\\n    for a, c in zip(A, C):\\n        for s in range(2 ** N):\\n            dp[s | c] = min(dp[s | c], dp[s] + a)\\n\\n    ans = dp[-1] if dp[-1] != INF else -1\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "772", "substitutes": {"input": ["error", "call", "raw", "IN", " output", "line", "int", "str", "reader", "request", "sample", "method", "p", "enter", "stream", "PUT", "load", "unknown", "format", "num", " inputs", "main", "comment", "inf", "empty", "config", "array", "hidden", "expression", "image", "memory", "file", "exec", "current", "accept", "out", "f", " Input", "model", "header", "pull", "output", "parent", "list", "data", "Input", "bin", "frame", "type", "string", "view", "select", "help", "path", "session", " IN", "count", "submit", "filter", "source", "param", "form", "feed", "n"], "N": ["F", "E", "L", "V", "H", "Q", "X", "Y", "NC", "NS", "NE", "K", "NM", "CNN", "O", "P", "T", "B", "D", "Ne", "S", "W", "I", "NT", "Z", "m", "Ns", "U", "R", "J", "NB", " n", "G", "NA", "n"], "M": ["F", "MN", "E", "L", "V", "ME", "H", "Q", "X", "Y", "Num", "K", "DM", "NM", "O", "P", "B", "T", "D", "LM", "S", "W", "CM", "I", "Z", "m", "MC", "U", "R", "Mi", "J", "MM", "G", "Mo", "n"], "A": ["F", "AD", "GA", "L", "At", "V", "AS", "X", "Y", "AP", "IA", "LA", "AR", "Na", "AN", "AM", "AH", "AB", "P", "B", "AU", "As", "AC", "D", "Ar", "API", "AV", "AA", "Alpha", "S", "I", "Ab", "CA", "U", "AF", "Am", "NA", "Ac"], "C": ["F", "E", "Ca", "Cs", "L", "CI", "V", "Cu", "Q", "X", "CU", "Y", "NC", "YC", "DC", "K", "O", "P", "B", "EC", "D", "AC", "T", "S", "W", "CM", "CF", "I", "CD", "VC", "Z", "CL", "CA", "U", "CP", "CC", "G", "CR"], "i": ["gi", "k", "ui", "qi", "mi", "p", "ai", "ic", " I", "arc", "y", "o", "nc", "oc", "iu", "lc", "anc", "z", "si", "index", "unc", "x", "ind", "I", "cm", "l", "u", "d", "pi", "j", "f", "ac", "m", "xi", "di", "ni", "ci", "b", "v", "e", "bc", "col", "id", "pc", "li", "ii", "n"], "_": ["H", "X", "p", "Y", "ic", "h", "y", "o", "en", "cp", "Na", "O", "oc", "uc", "x", "j", "ac", "data", "J", "bc", "col", "Col"], "c": ["k", "E", "int", "code", "p", "g", "arc", "o", "r", "nc", "h", "y", "cp", "ec", "chain", "lc", "z", "x", "unc", "cu", "w", "cm", "l", "u", "d", "cn", "q", "f", "ca", "cs", "m", "ac", "dc", "ci", "b", "v", "cf", "e", "cr", "t", "cc", "col", "mc", "pc", "n"], "INF": ["ACV", "inV", " INf", "InFF", "InFIN", "CONFIN", " INFF", "INEF", "INV", "inInf", "inf", "InF", "INf", "INInf", "InInf", "ACF", "InN", "Inf", " INInf", "CONFF", " INFIN", "inN", "ACf", " INV", "InEF", "INFF", "inF", "INN", "CONF", "CONEF", " INEF", " INN", "INFIN"], "dp": ["lp", "amp", "pid", "int", "wp", "eps", "p", "qa", "pre", "fd", "xs", "pb", "DC", "fp", "tp", "pm", "cp", "pos", "gp", "P", "sp", "dep", "D", "vs", "mp", "DD", "pa", "dm", "cm", "bb", "d", "DP", "dl", "dt", "pp", "deb", "dr", "dc", "null", "df", "pkg", "di", "data", "db", "ip", "CP", "alpha", "wd", "pd", "mm", "imp", "py", "ds", "dos", "hp", "csv", "ad", " DP"], "a": ["aa", "va", "p", "na", "ai", "aw", "ab", "au", "pa", "da", "x", "ar", "af", "ia", "d", "ca", "f", "sa", "ac", "m", "ga", "area", "am", "aj", "ae", "alpha", "b", "ea", "e", "an", "ad", "offset", "n"], "s": ["ss", "min", "k", "p", "g", "y", "o", "r", "num", "h", "size", "z", "si", "x", "S", "w", "l", "ses", "d", "u", "q", "f", "j", "sa", "cs", "ac", "m", "ns", "us", "os", "b", "v", "e", "t", "ls", "ds", "an", "n"], "ans": ["lan", "nas", "amps", "eps", "atan", "na", "ps", "ai", "Ann", "aning", "anas", "AN", "CNN", "ads", "ANS", "anes", "ann", "ani", "au", "ana", "ays", "can", "nan", "An", "anus", "aned", "nn", "aus", "sk", "ants", "ns", "os", "san", "ls", "plan", "ds", "ANN", "an", "ad"]}}
{"code": "import copy\\n\\nh, w, k = map(int, input().split())\\nc = [list(input()) for _ in range(h)]\\nans = 0\\n\\nfor i in range(1 << (h + w)):\\n    l = copy.deepcopy(c)\\n    for p in range(h):\\n        if i >> p & 1:\\n            l[p] = ['r'] * w\\n    for m in range(w):\\n        if i >> (m + h) & 1:\\n            for o in range(h):\\n                l[o][m] = 'r'\\n    s = ''\\n    for i in range(h):\\n        s += ''.join(l[i])\\n    if s.count('#') == k:\\n        ans += 1\\nprint(ans)", "target": "65", "substitutes": {"h": ["rh", "hs", "ih", "hw", "wa", "sh", "a", "H", "g", "oh", "r", "y", "ht", "wh", "ph", "hr", "z", "x", "ah", " H", "hh", "th", "u", "d", "q", "he", "f", "j", "han", "hi", "M", "hl", "v", "b", "e", "t", "hm", "n"], "w": ["wa", "sh", "wt", "tw", "win", "g", "width", "rw", "y", "r", "we", "wh", "wb", "z", "x", "ew", "W", "u", "d", "max", "q", "f", "sw", "ww", "ws", "wan", "wl", "wd", "v", "b", "ow", "e", "t", "wall", "n"], "k": ["km", "ke", "g", "K", "y", "num", "work", "kk", "ks", "z", "x", "kw", "ok", "u", "d", "max", "q", "j", "sk", "f", "v", "b", "e", "n"], "c": ["nc", "C", "lc", "z", "ch", "ce", "x", "cache", "cy", "cu", "con", "u", "d", "f", "ca", "cs", "ac", "cd", "ci", "v", "b", "cf", "e", "cr", "cc", "col", "xc", "cl", "n"], "_": ["line", "g", "num", " time", "x", "f", "ac", "len", "all", "id", " all", "ip"], "ans": ["aid", "a", "lan", "nas", "span", "eps", "ams", "na", "ions", "anas", "AN", "ANS", "anes", "ks", "asts", "mean", "aces", "ann", "ani", "anc", "ays", "es", "can", "params", " means", "ars", "lines", "aned", "ches", "ons", "aus", "ens", "leans", "cs", "sk", "ants", "ns", "scan", "ases", "no", "os", "ls", "ds", "oss", "an", "n", "ins"], "i": ["gi", "ji", "ui", "a", "ie", "int", "ei", "chi", "ma", "qi", "phi", "ai", "g", "oi", "y", "r", "ini", "ph", "iu", "si", "x", "yi", "I", "it", "u", "pi", "ati", "d", "f", "j", "io", "cli", "xi", "di", "ri", "ni", "ci", "hi", "ip", "v", "b", "e", "t", "multi", "id", "li", "ii", "n", "bi", "ti"], "l": ["lp", "ol", "L", "r", "sl", "y", "el", "left", "lo", "lc", "kl", "pl", "u", "ll", "ln", "dl", "f", "rl", "list", "nl", "b", "v", "e", "ls", "t", "le", "li", "ul", "n"], "p": ["op", "a", "fp", "y", "r", "pm", "pr", "pos", "P", "po", "z", "pa", "x", "u", "pi", "d", "q", "j", "f", "pp", "xi", "ip", "v", "b", "e", "t", "pc", "n"], "m": ["wa", "a", "g", "r", "y", "ym", "im", "z", "x", "mu", "om", "cm", "u", "d", "pi", "q", "f", "j", "bm", "M", "v", "b", "e", "t", "hm", "an", "n"], "o": ["op", "a", "ma", "oo", "go", "g", " mo", "oi", "y", "O", "oc", "po", "z", "x", "yo", "so", "om", "u", "q", "out", "mo", "f", "j", "wo", "os", "oa", "no", "v", "b", "e", "t", "n"], "s": ["ss", "a", "strings", "ps", "ms", "g", "sym", "ions", "y", "r", "resses", "si", "es", "x", "S", "sb", "so", "u", "d", "ses", "sg", "f", "cs", "sync", "ns", "os", "abs", "b", "v", "string", "e", "ls", "ops", "sv", "rs", "n"]}}
{"code": "s = list(input())\\nk = int(input())\\nfor i in range(len(s)):\\n  dp = 26-ord(s[i])+97\\n  if k >= dp and s[i] != \"a\":\\n    k-=dp\\n    s[i] = \"a\"\\n    if k == 0:\\n      break\\nelse:\\n  s[-1] = chr((ord(s[-1])-97+k)%26+97)\\nprint(*s,sep=\"\")", "target": "171", "substitutes": {"s": ["ss", "strings", "ues", "sets", "slice", " ss", "si", "sb", "l", "parts", "js", "f", "gs", "b", "ings", "space", "ops", "ins", "states", " scripts", "xs", "cases", "ads", "split", " changes", " signs", "u", "cs", " sets", "os", "string", "v", "letters", "e", "ips", "scripts", "submit", "ys", "p", "ps", " ads", "es", "params", "S", "lines", "services", "ses", "d", "stats", "m", "ns", "input", "t", "ls", " es", "a", "qs", "groups", "g", "c", "sym", "o", "results", " cs", "tests", "args", "ssl", " ls", "features", "opens", "ds", "sv", "n"], "k": ["km", "kid", "ke", "p", "g", "c", "dk", "K", "o", "r", "y", "kk", "cp", "kg", "ks", "x", "mk", "kw", "ka", "ko", "ak", "ask", "ok", "u", "d", "unk", "q", "ki", "j", "sk", "f", "ky", "m", "pp", "ek", "ku", "kick", "b", "ck", "e", "dp", "ik", "n"], "i": ["gi", "ui", "end", "ie", "int", "qi", "mi", "p", "ai", "g", "c", "h", "r", "ini", "ix", "iu", "z", "si", "index", "x", "yi", "ind", "start", "I", "uri", "l", "u", "d", "pi", "j", "f", "io", "m", "xi", "ri", "di", "ni", "ip", "ci", "key", "b", "e", "info", "multi", "id", "li", "ii", "inner", "bi", "n"]}}
{"code": "#!/usr/bin/env python3\\nimport sys, math, itertools, collections, bisect\\ninput = lambda: sys.stdin.buffer.readline().rstrip().decode('utf-8')\\ninf = float('inf') ;mod = 10**9+7\\nmans = inf ;ans = 0 ;count = 0 ;pro = 1\\n\\nn = int(input())\\nA = list(map(int,input().split()))\\nfor i in range(n): A[i] -= 1\\nfor i in range(n):\\n  if not A[i] > i:continue\\n  else:\\n    if A[A[i]] == i:ans += 1\\nprint(ans)", "target": "397", "substitutes": {}}
{"code": "x,y,a,b,c=map(int,input().split())\\nR=sorted(map(int,input().split()),reverse=True)\\nG=sorted(map(int,input().split()),reverse=True)\\nN=sorted(map(int,input().split()),reverse=True)\\nL=sorted(R[:x]+G[:y]+N[:(x+y)],reverse=True)\\nprint(sum(L[:(x+y)]))\\n", "target": "104", "substitutes": {"x": ["dx", "s", "k", "gal", "int", "sex", "X", "p", "XX", "g", "xs", "i", "xx", "width", "yx", "fx", "r", "h", "px", "rx", "work", "ix", "lex", "ph", "z", "xt", "ex", "index", "wy", "cy", "w", "cross", "ctx", "u", "d", "wx", "q", "hex", "f", "ax", "m", "ww", "xi", "ux", "v", "e", "xy", "zi", "xc", "draw", "n"], "y": ["yr", "yd", "ys", "dy", "int", "ye", "hy", "gy", "p", "Y", "g", "i", "h", "yn", "z", "zy", "ty", "wy", "yi", "cy", "yo", "w", "ny", "l", "yt", "u", "d", "f", "j", "sy", "m", "yy", "ya", "oy", "iy", "v", "yl", "t", "e", "py", "vy", "ry", "ey", "ies", "n"], "a": ["aa", "s", "int", "p", "ai", "i", "r", "z", "da", "A", "w", "d", "f", "j", "ax", "ca", "ac", "m", "ae", "alpha", "e", "abc", "ad", "n"], "b": ["fb", "p", "bs", "g", "i", "r", "h", "beta", "B", "ba", "ab", "z", "cy", "l", "bb", "d", "rb", "f", "j", "eb", "v", "e", "bc", "n"], "c": ["s", "k", "end", "p", "i", "h", "nc", "C", "z", "cy", "cm", "l", "u", "d", "q", "f", "ca", "ac", "m", "dc", "ct", "v", "e", "cc", "n"], "R": ["F", "E", "RG", "Rs", "V", "RC", "X", "Q", "Y", "SR", " r", "AR", "r", "RR", "Range", "RO", "P", "B", "C", "T", "D", "Rank", "S", "A", "W", "Res", "Red", "Re", "Rh", "GR", "DR", "LR", "RL", "RP", "Ra", "U", "M", "ER", "JR", "RA", "RH"], "G": ["GM", "GA", "PG", "E", "IG", "V", "Q", "X", "Y", "Gs", "SG", "g", "Ge", "GW", "P", "Gr", "C", "GD", "B", "GC", "GP", "GR", "GH", "NG", "GF", "CG", "GG", "Graph", "GB", "GS", "M", "GN", "LG", "Ga", "Gi", "GV", "Group"], "N": ["F", "E", "EN", "V", "NN", "NL", "X", "Y", "Size", "NS", "K", "AN", "O", "P", "T", "C", "B", "D", "S", "A", "W", "NG", "Node", "Z", "Ns", "U", "NV", "J", "M", "CN", "NB", "KN", "NA", "n"], "L": ["E", "IL", "V", "NL", "FL", "X", "AL", "Y", "LP", "LU", "O", "P", "T", "C", "B", "D", "Bl", "S", "SL", "W", "Sl", "I", "l", "EL", "LR", "LE", "OL", "CL", "List", "M", "LI", "XL", "DL", "LG", "LL", "ML", "VL"]}}
{"code": "#float\u578b\u3092\u8a31\u3059\u306a\\n#numpy\u306fpython\u3067\\nimport sys\\ninput = sys.stdin.readline\\nsys.setrecursionlimit(10**7)\\nfrom collections import Counter, deque\\nfrom collections import defaultdict\\nfrom itertools import combinations, permutations, accumulate, groupby, product\\nfrom bisect import bisect_left,bisect_right\\nfrom heapq import heapify, heappop, heappush\\nfrom math import floor, ceil,pi,factorial\\nfrom operator import itemgetter\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\ndef LI2(): return [int(input()) for i in range(n)]\\ndef MXI(): return [[LI()]for i in range(n)]\\ndef SI(): return input().rstrip()\\ndef printns(x): print('\\n'.join(x))\\ndef printni(x): print('\\n'.join(list(map(str,x))))\\ninf = 10**17\\nmod = 10**9 + 7\\n\\nr,g,b,n=MI()\\ncount=0\\nfor i in range(n//r+1):\\n    for j in range((n-r*i)//g+1):\\n        #print(i,j,n-r*i-g*j)\\n        if n-r*i-g*j>=0 and (n-r*i-g*j)%b==0:\\n            count+=1\\nprint(count)", "target": "315", "substitutes": {}}
{"code": "import sys\\ninput = sys.stdin.readline\\nins = lambda: input().rstrip()\\nini = lambda: int(input().rstrip())\\ninm = lambda: map(int, input().split())\\ninl = lambda: list(map(int, input().split()))\\nout = lambda x: print('\\n'.join(map(str, x)))\\n\\nx, y, z = inm()\\nprint(z, x, y)", "target": "499", "substitutes": {"input": [" inspect", "error", "call", "IN", "raw", " output", "int", "reader", "request", "argument", "default", "init", "plus", "element", "i", "command", "socket", "format", " inputs", "instance", "comment", "inf", "ino", "connect", "empty", " inf", "temp", "array", "index", "expression", "image", "file", "inc", "version", "exec", "current", "accept", "param", " Input", "join", "json", "pull", "output", "single", "list", "data", "Input", "ci", "bin", "string", "view", "select", "include", "help", "all", "print", "inner", "submit", "filter", "source", "config", "form", "feed"], "ins": ["s", "IN", "int", " nin", "i", "ints", "INS", " inc", "inf", "ino", " inf", "outs", "I", "lines", "In", "ci", "bin", "din", " IN", "id", " inside", "Ins", " bins", "lin"], "ini": ["mi", "init", "phi", "ai", "i", "ine", "inf", "ino", "slice", "ani", "mini", "si", "inc", "pi", "ignore", "cli", "xi", "cin", "di", "ni", "ci", "hi", "inn", "ina", "zi", "inner", "ii", "bi"], "inm": ["INM", "insln", "INm", "insm", "INln", "insn", "inM", "insmm", "inmm", " inn", "insl", "insM", " inmm", "INl", " inln", "incn", "inn", "incmm", "incm", "inln", " inM", "incl"], "inl": ["Inp", "iniml", "inml", " inp", "inn", " inml", "Inml", "inip", "inin", " inn", "inp", "inil", "Inl", "Inn"], "out": ["Out", " output", "line", "init", "err", "i", "o", "this", "write", "pretty", "dot", "index", "outs", "w", "inc", "io", "cli", "copy", "output", "no", "data", "bin", "OUT", "inner", "exit", "update", "n"], "x": ["dx", "k", "a", "int", "python", "X", "p", "xxxxxxxx", "xf", "g", "xs", "c", "i", "xx", "h", "rx", "ix", "px", "xt", " xx", "xxx", "ex", "index", "time", "w", "l", "ctx", "u", "wx", "d", "q", "f", "j", "m", "xi", "ya", "data", "v", "xp", "b", "t", "e", "xy", "xc", "abc", "n"], "y": ["yd", "k", "iz", "ys", "dy", "int", "ye", "p", "Y", "i", "xx", "ym", "zy", "yo", "cy", "w", "ny", "yz", "l", "yt", "u", "d", "j", "sy", "m", "yy", "ya", "oy", "hi", "b", "yl", "t", "e", "xy", "vy", "ry", "ey", "n"], "z": ["iz", "ze", "zer", "code", "p", "tz", "c", "i", "ix", "pos", "slice", "zo", "az", "zh", "zy", "index", "yi", "w", "l", "u", "d", "q", "j", "Z", "f", "m", "zen", "data", "hi", "b", "v", "zip", "t", "xy", "zi", "gz", "za", "n"]}}
{"code": "\\nfrom collections import defaultdict,deque\\nimport sys,heapq,bisect,math,itertools,string,queue,copy,time\\nsys.setrecursionlimit(10**8)\\nINF = float('inf')\\nmod = 10**9+7\\neps = 10**-7\\ndef inp(): return int(sys.stdin.readline())\\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\\ndef inpl_str(): return list(sys.stdin.readline().split())\\n\\nN,A,B = inpl()\\n\\nMAX = min(A,B)\\nMIN = max(0,A+B-N)\\nprint(MAX,MIN)\\n", "target": "362", "substitutes": {"INF": ["inN", "inInf", " INI", "INI", "inF", "INN", "InF", "inI", " INN", "INInf", "InI", "InInf", "InN", " INInf"], "mod": ["mode", "dig", "MOD", "exp", "mult", "delay", "round", "ver", " Mod", "scale", "sim", "comp", "ind", "inc", "cm", "sec", "fun", "depth", "dim", "mods", "dev", "debug", "complex", "dec", " pow", "grade", "progress", "Mod"], "eps": ["PI", " mag", " ms", " sleep", " pm", " sup", " digits", "ps", " exp", " comp", "PS", " bits", " dd", "scale", " sec", " EPS", " power", " pip", " debug", "pp", " pp", "ep", " fix", " steps", " grade", " pow", " dig", " P"], "N": ["F", "E", "L", "NO", "V", "NN", "Max", "Q", "X", "Y", "Num", "NE", "K", "AN", "CNN", "O", "P", "C", "D", "S", "W", "I", "No", "Min", "NG", "Z", "Ns", "U", "R", "M", "J", " n", "G", "NA", "An", "n"], "A": ["F", "AD", "a", "L", "At", "Max", "Ak", "H", "AS", "Q", "X", "Y", "AP", "Num", "LA", "Na", "AN", "AM", "AB", "AW", "P", "C", "As", "D", "AC", "API", "AA", "S", "W", "I", "Min", "PA", "Ma", "CA", "U", "M", "G", "NA", "RA", "An"], "B": ["Base", "E", "L", "V", "H", "Q", "X", "Y", "UB", "Num", "DB", "BA", "FB", "AB", "O", "P", "T", "C", "D", "SB", "BB", "BC", "AA", "BD", "W", "Tab", "I", "Ab", "BE", "OB", "Big", "WB", "U", "R", "GB", "M", "Band", "b", "NB", "QB", "G", "Block", "BF", "Bs"], "MAX": ["F", "min", "AD", "IN", "NO", "V", "AK", "Max", "MOD", "Q", "X", "ORD", "AP", "AST", "HEAD", "NW", "AN", "INC", "P", "EXT", "W", "AX", "SIZE", "Min", "NG", "max", "DER", "ND", "Maximum", "U", "R", " max", "NA", "BER", "RA", "CR", "NUM"], "MIN": ["min", "MN", "IN", "REM", "STR", "NO", "Max", "X", "MAG", "NE", "NI", "MR", "STAT", "PM", "UN", "AN", "AM", "SA", "ONE", " min", "PR", "SIZE", "NY", "Min", "MB", "EL", "max", "TX", "AMP", "PIN", "M", "Minimum", "BER", "Mini", "NA", "RA"]}}
{"code": "\\n# B Magic2\\nA, B, C = map(int, input().split())\\nK = int(input())\\nfor i in range(K + 1):  # range()\u306f0\u304b\u3089\u306a\u306e\u3067+1\\n    for j in range(K + 1):\\n        for k in range(K + 1):\\n            if i + j + k <= K:  # K\u56de\u4ee5\u5185\\n                if A * (2 ** i) < B * (2 ** j):\\n                    if B * (2 ** j) < C * (2 ** k):\\n                        print(\"Yes\")\\n                        exit()\\nprint(\"No\")\\n", "target": "508", "substitutes": {}}
{"code": "from collections import deque\\nN = int(input())\\nque = deque(['a'])\\n\\nwhile len(que) > 0:\\n    s = que.popleft()\\n    if len(s) == N:\\n        print(s)\\n    else:\\n        for i in range(ord(sorted(s)[-1]) - 95):\\n            que.append(s + chr(97 + i))", "target": "427", "substitutes": {"N": ["F", "L", "Limit", "V", "H", "Q", "X", "Y", "Size", "NC", "Num", "NS", "NI", " I", "K", "O", "Len", "P", "C", "B", "D", " C", "Ne", "S", "A", "I", "Ni", "Z", "Ns", " SN", "M", "J", "SN", " n", " Ne", " D", " NI", "Count", "n"], "que": ["prom", "cur", "sq", "pool", "sh", "code", "vel", "queue", "qu", "Q", "p", "qa", "c", "lock", "en", "pos", "log", "fe", "slice", "la", "lc", "conf", "cache", "quote", "bl", "stack", "buff", "l", "req", "buffer", "q", "f", "cli", "sync", "core", "ping", "ue", "list", "live", "quit", "fl", "complete", "foo", "ck", "e", "pe", "sem", "bc", "le", "seq", "qq", "cl", "loop", "Que", "lo"], "s": ["ss", "sq", "a", "strings", "spec", "sid", "str", "sample", "p", "states", "g", "c", "sym", "o", "sl", "r", "sf", "lower", "slice", "say", "si", "es", "S", "w", "sb", "l", "parts", "u", "d", "ses", "services", "sg", "q", "js", "f", "sup", "ssl", "m", "address", "input", "su", "os", "gs", "b", "string", "sing", "v", "e", "ls", "submit", "sv", "source", "n"], "i": ["gi", "k", "a", "ib", "qi", "mi", "p", "phi", "ai", "c", "h", "r", "y", "ix", "ti", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", "m", "xi", "ri", "v", "b", "e", "col", "id", "li", "ii", "bi", "n"]}}
{"code": "H = int(input())\\nW = int(input())\\nN = int(input())\\n\\na = max(H,W)\\n\\nif N%a == 0:\\n    print(N//a)\\nelse:\\n    print(N//a+1)\\n", "target": "592", "substitutes": {"H": ["F", "OH", "L", "V", "HS", "Q", "X", "DH", "Y", "HP", "K", "h", "SH", "HC", "AH", "O", "P", "B", "C", "T", "D", "He", "A", "HE", "S", "EH", "HD", "HH", "MH", "HI", "U", "R", "Han", "M", "G", "RH", "HQ"], "W": ["F", "E", "L", "V", "Q", "X", "Y", "Width", "WD", "WE", "K", "SH", "P", "B", "C", "T", "WH", "S", "Weight", "A", "w", "Z", "WS", "WA", "R", "M", "J", "Wa", "VW", "G", "Wh", "FW"], "N": ["F", "E", "L", "V", "NN", "Max", "Q", "X", "Y", "Size", "NS", "NE", "K", "Na", "NM", "O", "P", "B", "C", "Len", "D", "T", "Ne", "S", "A", "No", "NG", "Ni", "Z", "Ns", "R", "M", "J", "G", " n", "NA", "Wh", "n"], "a": ["aa", "wa", "va", "span", "p", "na", "access", "ai", "qa", "aw", "c", "xa", "la", "ba", "mA", "ab", "au", "ana", "AA", "da", "index", "A", "w", "action", "u", "aaa", "ca", "sa", " A", "asa", "ac", "ga", "area", "aj", "am", "ae", "alpha", "b", "ea", "e", "count", "NA", "an", "ad", "n"]}}
{"code": "import collections\\nK = int(input())\\n\\nif K < 10:\\n    print(K)\\n    exit()\\n\\nq = collections.deque()\\nfor i in range(1, 10):\\n    q.append(i)\\ni = 9\\nwhile True:\\n    x = q.popleft()\\n    lsk = x % 10\\n    shifted = x * 10\\n    if lsk != 0:\\n        q.append(shifted + lsk - 1)\\n        i += 1\\n        if i == K:\\n            print(shifted + lsk - 1)\\n            break\\n    q.append(shifted + lsk)\\n    i += 1\\n    if i == K:\\n        print(shifted + lsk)\\n        break\\n    if lsk != 9:\\n        q.append(shifted + lsk + 1)\\n        i += 1\\n        if i == K:\\n            print(shifted + lsk + 1)\\n            break\\n", "target": "339", "substitutes": {"K": [" N", "F", "k", "KK", "E", "L", "KO", "KI", "AK", "V", "H", "Q", "X", "Y", "KE", "KT", "O", " k", "P", "T", "C", "B", "SK", "D", "Sk", "NK", "KB", "KS", "S", "W", "KC", "I", "HK", "UK", "Z", "KR", "PK", "U", "R", "M", "J", "CP", "N", "KN", "Ku"], "q": ["cur", "k", "ack", "sq", "qs", "queue", "qu", "qi", "Q", "p", "qa", "c", "y", "o", "h", "bird", "iq", "qv", "z", "que", "array", "ch", "cache", "w", "window", "buff", "bug", "req", "u", "d", "quad", "max", "row", "f", "dq", "requ", "ue", "self", "query", "back", "list", "check", "quit", "batch", "question", "qt", "v", "view", "cf", "t", "e", "print", "id", "qq", "cl", "quick", "pg"], "i": ["gi", "k", "ui", "a", "ei", "ie", "int", "chi", "qi", "p", "phi", "ai", "init", "c", "oi", "y", "r", "o", "ini", "ix", "iu", "api", "z", "mini", "si", "index", "yi", "ind", "I", "uri", "l", "fi", "u", "pi", "d", "it", "ki", "j", "f", "adi", "io", "cli", "xi", "di", "ri", "ni", "ci", "v", "e", "t", "info", "zi", "id", "multi", "li", "ii", "inner", "ik", "n", "bi", "abi", "ti"], "x": ["dx", "k", "int", "X", "p", "xs", "c", "xx", "fx", "y", "rx", "ix", "px", "z", "xt", "ex", "index", "xxx", "l", "wx", "u", "f", "ax", "xi", "xb", "data", "xe", "v", "xp", "pair", "e", "t", "xes", "xy", "xc", "xa", "n"], "lsk": ["lssk", "mesk", "sske", "msk", "linesq", "csks", "elssk", "vske", "lesk", "lesky", "listssk", "olsk", "lsky", "LSkid", "mssk", "nsk", "ssky", "LSks", "messk", "lesssk", "insky", "nskick", "inssk", "listske", "nssk", "nsq", "llK", "meski", "elsk", "elsku", "psky", "elskid", "linesK", "psK", "lask", "llsk", "lakick", "lesku", "csK", "lsku", "leske", "slku", "llky", "slk", "lessky", "llkick", "elsK", "lsq", "insk", "lsK", "vsku", "csk", "lsks", "lski", "lessK", "dsq", "olski", "slke", "listsK", "lessk", "linesk", "lskick", "sssk", "lineske", "slky", "dsk", "lake", "dske", "lskg", "olssk", "nsK", "leskg", "elsks", "llk", "psk", "lske", "cskid", "lskid", "lesske", "ssk", "msku", "mesky", "slkg", "pssk", "LSk", "vsk", "nske", "elsky", "lak", "llke", "inske", "lesski", "LSK", "slK", "pske", "olsky", "msky", "listsk", "dsK", "vskg"], "shifted": ["shipped", " shift", "sshift", " shaped", "Shifted", "schipped", "slritten", "scifted", "sift", "scushed", "sharted", "skifting", "scift", "shift", "sshifted", "sifted", "shraped", "clicked", "skifted", " Shifted", "sicked", "schifted", "sqipped", "shushed", "sitched", "sshipped", "clifted", "slifted", "sqifting", " shushed", "slitched", "shritten", "Shitched", "shanged", "slift", "slicked", " sharted", " shitched", " shifting", "schift", "skitched", "clift", "skicked", " shritten", "Shanged", "skraped", "swifted", "swifting", " reshifted", "sqifted", " reshipped", " shraped", "swaped", "schifting", "slarted", "Shipped", "skarted", "shicked", "sqift", "scitched", " reshanged", "skaped", "slushed", "skritten", " Shitched", " shicked", "sshifting", " Shanged", "shifting", "switched", "slraped", " Shipped", "shaped", "shitched", "clitched", "slaped", " reshitched"]}}
{"code": "from collections import deque\\n\\nn = int(input())\\n\\nl = deque()\\nfor _ in range(n):\\n    command = input().split()\\n    if command[0] == \"insert\":\\n        l.appendleft(command[1])\\n    elif command[0] == \"delete\":\\n        try:\\n            ind = l.remove(command[1])\\n        except ValueError:\\n            pass\\n    elif command[0] == \"deleteFirst\":\\n        l.popleft()\\n    elif command[0] == \"deleteLast\":\\n        l.pop()\\n        \\nprint (\" \".join(l))", "target": "232", "substitutes": {"n": ["s", "k", "p", "c", "i", "o", "r", "number", "num", "nc", "y", "size", "z", "index", "x", "fn", "sn", "u", "d", "nt", "ln", "f", "j", "network", "m", "ns", "no", "nl", "len", "limit", "b", "t", "N", "count", "e", "nb"], "l": ["lp", "ol", "L", "line", "lic", "p", "c", "ql", "i", "o", "sl", "r", "log", "like", "el", "lr", "left", "la", "lv", "lo", "lc", "kl", "pl", "ll", "ln", "dl", "f", "lf", "m", "rl", "list", "nl", "wl", "fl", "live", "lu", "v", "b", "ld", "t", "ls", "e", "le", "li", "ul", "cl", "lb"], "_": ["__", " time", " __", " k", " q", "out", " o", " count"], "command": ["error", "mode", "password", "communication", "code", "dom", "request", "event", "argument", "power", "method", "handler", "c", "process", "element", "resource", "comment", "content", "delete", "game", "pattern", "component", "directory", "array", "history", "module", "node", "action", "connection", "attribute", "child", "one", "cmd", "position", "comm", "model", "m", "operation", "function", "script", "point", "sequence", "query", "option", "input", "entry", "database", "term", "system", "program", "category", "key", "project", "string", "Command", "three", "package", "message", "move", "word", "config", "button", "direction", "document"], "ind": ["loc", "end", "individual", "msg", "cond", "location", "err", "jo", "i", "var", "pos", "ident", "index", "inc", "start", "it", "d", "j", "model", "found", "ci", "length", "ld", "bind", "count", "cell", "id"]}}
{"code": "import math\\nimport sys\\nreadline = sys.stdin.readline\\n\\n\\ndef main():\\n    n = int(readline().rstrip())\\n\\n    for i in range(50001):\\n        k = math.floor(i * 1.08)\\n        if n == k:\\n            print(i)\\n            return\\n    print(':(')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "194", "substitutes": {"readline": ["writefile", "writeLine", "readinglines", "loadlines", "ReadLine", "loadLine", "readLine", "Readwrite", "runLine", "Readline", " readfile", "loadline", "Readel", "readlines", "readwrite", " readel", "readel", "loadfile", "writelines", "readingline", "writeline", "readingfile", " readlines", " readwrite", "loadtime", "readtime", " readtime", " readLine", "runel", "runwrite", "readfile", "readingLine", "writetime", "runline"], "n": ["s", "p", "c", "o", "number", "nc", "num", "ne", "nu", "x", "nan", "sn", "l", "u", "d", "nn", "nt", "f", "j", "sk", "m", "ns", "no", "ni", "nl", "v", "b", "np", "e", "N", "t", "nit", "nb", "an"], "i": ["ih", "a", "line", "int", "qi", "p", "phi", "ai", "c", "h", "o", "ini", "iu", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "l", "pi", "d", "j", "f", "m", "xi", "input", "di", "ri", "hi", "ci", "ip", "data", "v", "key", "e", "id", "li", "ii", "bi"], "k": ["ke", "p", "c", "dk", "K", "y", "r", "kk", "ks", "kn", "z", "x", "kw", "w", "ko", "ak", "l", "ok", "u", "d", "q", "ki", "j", "sk", "f", "m", "tk", "v", "key", "ck", "e", "N", "ik"]}}
{"code": "n = int(input())\\nt = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nmod = 10 ** 9 + 7\\n\\nfor ti, ai in zip(t, a):\\n    if ti == ai == t[-1] == a[0]:\\n        break\\nelse:\\n    print(0)\\n    exit()\\n\\nans, frag = 1, 0\\nfor i in range(n):\\n    if t[i] == a[i] == t[-1] == a[0]:\\n        frag = 1\\n    if 0 < i < n - 1 and t[i - 1] == t[i] and a[i] == a[i + 1]:\\n        ans = ans * min(t[i], a[i]) % mod\\nprint(ans if frag == 1 else 0)\\n", "target": "321", "substitutes": {"n": ["s", "k", "span", "p", "na", "c", "o", "r", "nc", "num", "ot", "y", "h", "ne", "nu", "z", "x", "sn", "w", "l", "u", "d", "nt", "f", "j", "network", "m", "ns", "ni", "b", "np", "N", "e", "nb"], "t": ["the", "s", "token", "int", "at", "table", "tt", "et", "p", "g", "c", "y", "o", "tp", "ot", "r", "this", "pt", "T", "tf", "temp", "z", "ty", "time", "x", "st", "w", "ant", "it", "l", "u", "d", "nt", "template", "ta", "out", "dt", "f", "ut", "j", "m", "tu", "rt", "te", "tree", "ts", "b", "v", "qt", "e", "an", "type", "tab", "test", "tc"], "a": ["aa", "wa", "sta", "ao", "va", "at", "ma", "p", "c", "ama", "y", "o", "app", "ap", "api", "ba", "ab", "au", "array", "z", "art", "da", "pa", "x", "ar", "A", "ia", "u", "ta", "ca", "f", "sa", "ac", "ga", "asa", "area", "am", "aj", "ae", "alpha", "b", "ea", "e", "all", "an", "ast", "ad"], "mod": ["min", "mode", "spec", "dig", "MOD", "exp", "ms", "g", "mult", "num", "im", "section", "reg", " Mod", "div", "scale", "ment", "aug", "sim", "x", "comp", "module", "bug", "cm", "sec", "d", "mag", "max", "row", "j", "m", "comb", "man", "aj", "mods", "add", "step", "Mod"], "ti": ["ui", "chi", "qi", "mi", "phi", " ta", " ni", "ini", "aci", "si", "tin", "yi", " mi", "iti", "pi", "ta", "ki", " si", "xi", "tu", "di", "te", "ni", "TI", "ci", "ita", "tti", "asi", "zi", "ii", "bi"], "ai": ["aa", "wa", "iri", "ei", "ao", "chi", "qi", "AI", "mi", "na", "fa", "aii", "ini", "ay", "ba", "au", "si", "ais", "da", "yi", "oci", "hai", "ia", "pi", "ati", "ta", "aaa", "ca", "sa", "adi", "agi", "xi", "tu", "ait", "ni", "ci", "ita", "bi", "asi", "ii", "an", "aci"], "ans": ["aid", "ents", "lan", "nas", "ras", "amps", "span", "atan", "na", "xs", "ats", "activation", "anas", "AN", "ANS", "any", "la", "mean", "aces", "ann", "anon", "ani", "anc", "au", "ays", "ana", "can", "x", "nan", "ars", "anus", "ia", "aned", "ace", "ons", "aus", "sk", "cs", "ants", "ns", "ran", "features", "os", "ls", "cons", "ds", "oss", "an", "ins"], "frag": [" frage", " frags", "fags", "frags", " frig", " fragged", "arrac", "fig", "relage", " frac", "drage", "fag", "brag", "arrag", "drags", "relago", "drig", "arrago", "drag", "bragged", "fage", "relag", "frac", "frig", "brage", "relac", "frago", "dragged", "frage", "arrage", " frago", "brags", "fragged"], "i": ["gi", "ji", "s", "ui", "vi", "end", "ei", "ie", "at", "int", "qi", "p", "phi", "c", "oi", "y", "o", "ix", "ini", "iu", "api", "z", "si", "eni", "x", "ind", "start", "I", "ia", "uri", "l", "fi", "u", "d", "ati", "ace", "pi", "ki", "j", "f", "io", "m", "cli", "xi", "ori", "ri", "di", "ni", "ci", "hi", "b", "v", "e", "id", "li", "ii", "bi", "ip"]}}
{"code": "from collections import Counter\\nn = int(input())\\na = list(map(int, input().split()))\\nb = Counter(a)\\nans = 0\\nfor i in set(a):\\n    if b[i] < i:\\n        ans += b[i]\\n    else:\\n        ans += b[i]-i\\nprint(ans)", "target": "536", "substitutes": {"n": [" N", "s", " p", " bi", "span", " span", " s", "na", " number", "Num", " ni", "Na", " c", " f", "x", " fn", " np", "Ns", "ns", " init", "ni", " ns", "an", "N", "NA", " l", "nb", " na"], "a": ["aa", "s", "va", "p", "ai", "c", "ama", "aw", "fa", "y", "ba", "ab", "au", "array", "art", "pa", "da", "x", "A", "ar", "af", "w", "args", "d", "aaa", "ca", "f", "sa", "ac", "m", "ga", "area", "am", "ae", "oa", "alpha", "ea", "an", "ad"], "b": ["s", "k", "auto", "ib", "fb", "p", "bs", "g", "c", "pb", "y", "o", "r", "app", "wb", "B", "ba", "ab", "w", "sb", "l", "ob", "bb", "d", "rb", "u", "f", "eb", "bd", "m", "db", "bin", "v", "an", "e", "base", "big", "nb", "lb", "bi", "ad"], "ans": ["s", "ents", "lan", "nas", "cas", "amps", "ras", "eps", "atan", "na", "ats", "aning", "anas", "AN", "ANS", "anes", "ks", "mean", "ann", "anon", "ani", "ares", "au", "ays", "ana", "ania", "can", "anc", " means", "nan", "ars", "aned", "ons", "aus", "anne", "sk", "leans", "ens", "cs", "ants", "ns", "ases", "os", "ls", "ians", "ds", "an", "ins"], "i": ["gi", "ji", "k", "ui", "ie", "int", "ei", "qi", "mi", "p", "ai", "c", "o", "y", "ini", "iu", "inf", "ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "uri", "l", "u", "pi", "d", "j", "f", "io", "m", "xi", "ori", "di", "ni", "ci", "alpha", "v", "e", "multi", "id", "li", "ii", "bi", "ip"]}}
{"code": "import collections\\nN = int(input())\\n*A, = map(int, input().split())\\nprint(max(collections.Counter(A + [a-1 for a in A] + [a+1 for a in A]).values()))", "target": "42", "substitutes": {"N": ["L", "V", " array", "Num", "NS", " I", " B", "K", "Na", "O", "P", "B", "C", " C", "AA", "S", "I", "Ns", "Array", "R", "M", " n", "NA", "Count", "n"], "A": ["E", "Point", "L", "All", "H", "One", "X", "MA", "Y", "LA", "TA", "K", "Na", "Zero", "SA", "P", "B", "C", "T", "As", "D", "Ar", "ASC", "API", "Args", "AA", "au", "Alpha", "S", "I", "Type", "PA", "Array", "CA", "U", "Part", "Input", "alpha", "M", "Name", "G", "NA", "An", "Count"], "a": ["aa", "k", "auto", "int", "va", "ma", "p", "na", "c", "i", "eta", "fa", "y", "o", "num", "la", "mA", "au", "array", "z", "da", "x", "index", "pa", "ar", "w", "ka", "action", "u", "ta", "f", "sa", "ca", "asa", "ac", "ga", "area", "ait", "aux", "entry", "ae", "alpha", "b", "ha", "count", "e", "za", "an", "n"]}}
{"code": "if __name__ == '__main__':\\n\tn = int(input())\\n\\n\ttmp = n // 2\\n\tprint(tmp * (n - tmp))", "target": "402", "substitutes": {"n": ["s", "p", "init", "c", "i", "o", "number", "y", "num", "nc", "net", "pos", "temp", "nu", "z", "fn", "x", "nan", "node", "l", "u", "d", "nn", "nt", "f", "j", "network", "m", "ns", "input", "v", "b", "len", "t", "N", "count", "e", "all", "nb", "sum"], "tmp": [" temp", "sq", "a", "p", "img", "nm", "c", "number", "tp", "num", "meg", "cp", "pos", "txt", "seed", "sp", "temp", "size", "mp", "nom", "mini", "dest", "now", "node", "next", "current", "nn", "nt", "shift", "sup", "m", "ignore", "small", "Temp", "yy", "shape", "input", "data", "stuff", "b", "np", "timeout", "t", "space", "count", "mm", "qq", "treatment", "nb", "test", "sum"]}}
{"code": "h, w = map(int, input().split())\\na = [list(map(str, list(input()))) for i in range(h)]\\nl1 = [\".\" for i in range(w)]\\nl2 = [\".\" for i in range(h)]\\nfor i in range(h):\\n  if \"#\" in a[i]:\\n    l2[i] = \"#\"\\nfor i in range(w):\\n  if \"#\" in [a[j][i] for j in range(h)]:\\n    l1[i] = \"#\"\\nfor i in range(h):\\n  l = []\\n  for j in range(w):\\n    if l1[j] == \"#\" and l2[i] == \"#\":\\n      l.append(a[i][j])\\n  if len(l) != 0:\\n    print(\"\".join(l))", "target": "413", "substitutes": {"h": ["rh", "hs", "s", "k", "wa", "sh", "H", "p", "g", "c", "host", "oh", "y", "r", "o", "ht", "en", "head", "wh", "ph", "hr", "z", "time", "x", "W", "th", "u", "d", "q", "f", "m", "sw", "han", "hi", "b", "v", "t", "e", "hm", "id", "home", "n"], "w": ["s", "k", "wa", "sh", "wt", "H", "win", "p", "g", "c", "width", "y", "fw", "r", "we", "wh", "z", "x", "ew", "W", "u", "d", "q", "f", "m", "sw", "ww", "ws", "wd", "v", "b", "t", "e", "wall", "n"], "a": ["aa", "s", "va", "ao", "ma", "ans", "p", "qa", "ai", "c", "ama", "o", "y", "app", "la", "ba", "au", "array", "z", "x", "ar", "A", "af", "args", "u", "ca", "f", "sa", "m", "ga", "ac", "area", "aux", "am", "input", "ae", "data", "alpha", "b", "e", "ha", "all", "an", "n"], "i": ["gi", "ji", "k", "ui", "vi", "ei", "ie", "int", "qi", "p", "ai", "g", "c", "oi", "o", "y", "ini", "ix", "iu", "z", "si", "yi", "x", "ia", "I", "it", "u", "pi", "d", "io", "f", "ir", "m", "xi", "ori", "ri", "di", "ni", "ci", "ij", "ip", "b", "v", "e", "t", "info", "zi", "id", "li", "ii", "n", "bi", "ti"], "l1": ["L5", "lc1", "p5", "L2", "L01", "L1", "p3", " lone", "ll1", " l5", "Lone", "lcone", "ll01", "ll3", "L3", "p1", "l01", "p2", "l3", "lone", " l3", "lc3", " l01", "lc2", "llone", "l5"], "l2": [" ltwo", "L0", "Ltwo", "el3", "L2", "eltwo", " l0", "usecond", "u2", "L1", "lsecond", "u0", "utwo", "l0", "u1", "elb", "p0", "el2", "ll3", "lltwo", " lsecond", "ll2", "p1", "ltwo", "p2", "l3", " lb", "llb", " l3", "psecond", "lb"], "j": ["ji", "k", "ie", "ja", "p", "ai", "g", "c", "y", "dj", "o", "jj", "r", "ijk", "jl", "z", "je", "si", "x", "adj", "u", "uj", "d", "q", "js", "jp", "f", "job", "ir", "xi", "aj", "J", "v", "b", "e", "t", "li", "ii", "n"], "l": ["lp", "ol", "L", "p", "g", "c", "o", "sl", "r", "el", "left", "lo", "lc", "kl", "z", "u", "d", "ll", "ln", "dl", "f", "m", "rl", "list", "nl", "fl", "b", "v", "e", "ls", "t", "il", "le", "ul", "li", "lb", "n"]}}
{"code": "n = int(input())\\ns = input()\\ncount = 0\\nr = s.count('R')\\ng = s.count('G')\\nb = s.count('B')\\nfor i in range(0,n-2):\\n    for j in range(i+1,n-1):\\n        if j < 2*j -i <= n-1 and sorted([s[i],s[j],s[2*j-i]]) == ['B','G','R']:\\n            count += 1\\nprint(r*g*b - count)", "target": "294", "substitutes": {"n": ["k", "non", "p", "c", "o", "nc", "num", "h", "net", "y", "size", "ne", "nu", "z", "x", "sn", "w", "l", "u", "d", "nn", "nt", "f", "network", "m", "ns", "ni", "nl", "len", "v", "t", "N", "e", "nb", "nor"], "s": ["ss", "sq", "a", "spec", "strings", "south", "qs", "groups", "ins", "ans", "p", "states", "ps", "xs", "c", "sets", "o", "sl", "y", "z", "si", "es", "search", "events", "S", "w", "sb", "tests", "parts", "services", "ses", "u", "d", "l", "sg", "stats", "js", "f", "sort", "m", "sync", "ns", "input", "os", "gs", "ts", "string", "v", "e", "ls", "t", "ds", "sv", "bis"], "count": ["min", "handle", "collect", "last", "group", "code", "cond", "p", "lead", "default", "c", "err", "h", "number", "num", "lower", "weight", "first", "delete", "mean", "size", "coll", "deep", "z", "index", "x", "cache", "comp", "ount", "ind", "start", "l", "show", "nt", "catch", "max", "label", "f", "cat", "found", "close", "old", "drop", "depth", "cd", "list", "length", "match", "find", "type", "len", "v", "limit", "e", "order", "all", "base", "add", "multi", "id", "word", "col", "percent", "cc", "val", "test", "sum", "Count"], "r": ["k", "a", " R", "p", "c", "h", "y", "o", "x", "w", "l", "u", "d", "rb", "f", "range", "sr", "m", "rg", "br", "R", "v", "e", "cr", "order", "er", "rs"], "g": ["gi", "k", "group", "a", "p", "ge", "go", "c", "y", "h", "gam", "ig", "z", "x", "gn", "w", "l", "u", "d", "gg", "sg", "f", "m", "ga", "rg", "gb", "v", "gs", "e", "G"], "b": ["k", "be", "a", "fb", "p", "bs", "c", "y", "h", "o", "wb", "B", "ab", "z", "x", "bl", "w", "sb", "l", "u", "d", "rb", "bb", "f", "eb", "m", "db", "v", "e", "bc", "t"], "i": ["gi", "ji", "k", "ui", "a", "ie", "p", "ai", "c", "y", "h", "jj", "o", "ini", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "f", "m", "ci", "v", "e", "t", "id", "li", "ii", "bi"], "j": ["ji", "k", "end", "a", "ie", "part", "ja", "p", "c", "jo", "o", "jj", "y", "h", "z", "si", "index", "x", "jet", "ind", "obj", "l", "u", "uj", "d", "job", "jp", "f", "m", "aj", "ci", "ij", "J", "v", " ii", "e", "t", "li", "ii", "next", "on"]}}
{"code": "def main():\\n    n = int(input())\\n    s = input()\\n    left = 0\\n    right = 0\\n    for i in range(n):\\n        if s[i] == '(':\\n            right += 1\\n        else:\\n            if right == 0:\\n                left += 1\\n            else:\\n                right -= 1\\n    print('('*left+s+')'*right)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "790", "substitutes": {"n": ["k", "p", "g", "c", "o", "r", "y", "num", "h", "net", "number", "size", "z", "x", "sn", "w", "l", "u", "d", "j", "f", "m", "ns", "b", "np", "t", "N", "e", "count", "nb"], "s": ["ss", "a", "south", "qs", "ans", "p", "ps", "states", "g", "c", "xs", "side", "sets", "o", "r", "sl", "y", "h", "sp", "size", "ows", "si", "S", "w", "sb", "start", "args", "l", "lines", "u", "parts", "d", "services", "stats", "f", "m", "ns", "small", "self", "ws", "os", "abs", "gs", "b", "ls", "ds", "rs", "ins"], "left": ["min", "full", "last", "L", "value", "level", "p", "side", "plus", "c", "width", "o", "r", "Left", "both", "lo", "size", "z", "bottom", "index", "x", "diff", "w", "start", "cross", "l", "d", "j", "m", "none", "small", "self", "list", "nl", "length", "b", "byn", "le", "inner", "cl", "next", "offset"], "right": ["rh", "error", "k", "raw", "end", "a", "rest", "value", "ack", "rights", "third", "method", "p", "correct", "success", "c", "plus", "width", "h", "r", "rx", "o", "rec", "rew", "round", "ro", "bottom", "index", "x", "w", "cross", "start", "Right", "obj", "th", "child", "patch", "d", "max", "row", "one", "three", "ax", "sw", "self", " Right", "length", "id", "inner", "cl"], "i": ["gi", "k", "int", "p", "ai", "g", "c", " I", "h", "r", "y", "pos", "ti", "z", "si", "index", "x", "ind", "start", "w", "I", "l", "u", "d", "pi", "j", "f", "m", " j", "xi", "ri", "di", "ci", "b", "e", "id", "li", "ii", "bi", "ip"]}}
{"code": "n = int(input())\\nans = 0\\nsum = 0\\nfor _ in range(n):\\n  a = int(input())\\n  if a == 0:\\n    ans += sum//2\\n    sum = 0\\n    continue\\n  sum += a\\nans += sum // 2\\nprint(ans)", "target": "455", "substitutes": {"n": ["s", "k", "span", "p", "na", "c", "i", "o", "r", "h", "num", "nc", "y", "number", "ne", "z", "x", "nan", "A", "sn", "ny", "l", "u", "d", "nn", "f", "m", "ns", "ni", "b", "e", "N", "count", "nb", "an"], "ans": ["ums", "ss", "s", "ents", "lan", "nas", "cas", "ras", "eps", "ams", "uss", "na", "ms", "ai", "ats", "anas", "ads", "ANS", "ks", "mean", "annels", "vs", "ann", "anon", "ana", "can", "outs", " means", "ars", "anus", "asses", "args", "aned", "ass", "lines", "ations", "ons", "aus", "works", "sk", "cs", "sa", "atches", "leans", "ns", "acs", "scan", "rates", "os", "reads", "alpha", "acts", "ls", "cons", "ops", "oss", "an", "ad", "ins"], "sum": ["mass", "ums", "min", "s", "ss", "sh", " summ", " sums", "span", "na", "ash", "c", "gam", "num", "comment", "ay", "SI", "cum", "weight", "sign", "mean", "seed", "ann", "size", "cost", "scale", "index", "si", "S", "A", "av", "ass", "u", "max", "offset", "gram", "out", "sk", "sa", "fat", "ac", "m", "um", "am", "amount", "us", "average", "alpha", "summary", "space", "count", "Sum", "all", "sam", "part", "an", "ad", "total"], "_": ["al", "g", " I", "of", "ay", "out", "f", " loop", " j", " we"], "a": ["aa", "wa", "auto", "va", "p", "na", "ai", "aw", "c", "i", "fa", "Na", "ba", "ann", "ab", "au", "ana", "da", "pa", "ar", "A", "u", "ta", "aaa", "ca", "sa", "ac", "asa", "ga", "area", "aux", "aj", "am", "ae", "alpha", "b", "ea", "an", "ad"]}}
{"code": "n, m, l = [int(i) for i in input().split()]\\n\\nA = []\\nB = []\\nC = []\\nfor ni in range(n):\\n    A.append([int(i) for i in input().split()])\\n\\nfor mi in range(m):\\n    B.append([int(i) for i in input().split()])\\n\\nfor i in range(n):\\n    C.append([])\\n    for j in range(l):\\n        C[i].append(0)\\n        for k in range(m):\\n            C[i][j] += A[i][k] * B[k][j]\\n\\nfor li in range(n):\\n    print(\" \".join([str(s) for s in C[li]]))", "target": "684", "substitutes": {"n": ["a", "p", "g", "c", "o", "r", "y", "en", "un", "ne", "z", "x", "sn", "w", "u", "d", "nt", "q", "f", "ln", "ns", "b", "v", "t", "N", "e", "nb", "an"], "m": ["mn", "p", "g", "c", "y", "r", "o", "h", "ym", "md", "z", "x", "mu", "w", "u", "d", "f", "sm", "M", "v", "b", "e", "mc", "range", "an"], "l": ["ol", "L", "p", "al", "g", "c", "o", "sl", "r", "h", "y", "el", "lc", "kl", "z", "u", "d", "ll", "f", "ln", "nl", "b", "v", "t", "e", "ls"], "i": ["ji", "ui", "a", "ie", "ei", "int", "qi", "p", "ai", "c", "oi", "o", "y", "ini", "iu", "z", "si", "yi", "x", "I", "it", "u", "pi", "d", "f", "io", "ir", "xi", "di", "ci", "ip", "b", "v", "e", "t", "il", "zi", "id", "ii", "ik", "bi", "ti"], "A": ["AD", "E", "Ca", "a", "L", "At", "Al", "Az", "AI", "X", "MA", "Y", "AL", "AP", "LA", "AR", "K", "Na", "AM", "AH", "AB", "P", "As", "D", "Ar", "API", "AA", "Alpha", "Ne", "S", "I", "Ab", "Ma", "Array", "CA", "U", "AF", "AY", "M", "N", "Both", "G", "Am", "The", "NA", "HA", "Ac", "An"], "B": ["F", "E", "EB", "L", "LB", "V", "Q", "Y", "UB", "CB", "Bar", "Bi", "DB", "BA", "AB", "O", "P", "D", "SB", "BG", "BB", "BC", "BI", "TB", "BD", "BF", "MB", "Ab", "BE", "BL", "OB", "WB", "Beta", "U", "GB", "R", "M", "J", "b", "NB", "Both", "N", "Other", "G", "BS", " b", "Bs"], "C": ["F", "E", "Ca", "L", "Cs", "Cr", "V", "CI", "Cu", "CU", "Q", "X", "c", "DC", "K", "CNN", "P", "T", "D", "EC", "S", "GC", "Can", "CM", "KC", "I", "Ch", "VC", "Sc", "Con", "CL", "CA", "CS", "Cl", "U", "R", "JC", "M", "CC", "N", "G", "Col"], "ni": ["ui", "omi", "ie", "wi", "chi", "qi", "ai", "nm", "isin", "ini", "iu", "ne", "ani", "eni", "si", "yi", "ny", "ia", "iti", "ati", "nn", "xi", "di", "\u0438", "il", "zi", "ii", "bi", "ti"], "mi": ["gi", "ih", "ui", "omi", "wi", "mn", "chi", "ib", "ma", "ai", "nm", "isin", "ima", "iu", "mini", "yi", "mu", "ia", "pi", "igi", "agi", "ir", "mic", "di", "ij", "il", "ii", "bi", "ti"], "j": ["ji", "ie", "ja", "p", "g", "_", "c", "o", "y", "h", "jj", "r", "jl", "z", "je", "si", "x", "ind", "u", "d", "uj", "q", "js", "f", "jp", "J", "b", "v", "key", "e", "kj", "ii", "ik"], "k": ["km", "ji", "ke", "p", "g", "c", "K", "y", "o", "r", "kk", "kg", "ks", "kn", "z", "x", "kin", "w", "ak", "ok", "u", "d", "unk", "q", "ki", "sk", "f", "b", "key", "v", "e", "ik"], "li": ["ji", "ie", "ali", "qi", "ai", "sl", "iu", "la", "lc", "ti", "jl", "kl", "si", "yi", "bl", "uli", "pl", "ili", "Li", "ki", "cli", " si", "xi", "di", "ci", "ri", "lu", "LI", "il", "le", "zi", "ii", "lin", "bi", "lo"], "s": ["ss", "gi", "isl", "spec", "a", "span", "p", "bs", "g", "sym", "o", "sl", "r", "h", "lis", "sf", "sie", "slice", "kl", "si", "sb", "u", "d", "ses", "f", "sk", "sync", "xi", "us", "su", "ski", "v", "sing", "b", "e", "ls", "le", "ul", "bi", "ins"]}}
{"code": "import sys\\nfrom heapq import heappush, heappop\\n\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\n\\ndef resolve():\\n    n, m = map(int, input().split())\\n    B = [[] for _ in range(m)]\\n    for _ in range(n):\\n        a, b = map(int, input().split())\\n        if m - a >= 0:\\n            B[m - a].append(b)\\n\\n    que = []\\n    res = 0\\n    for i in reversed(range(m)):\\n        for b in B[i]:\\n            heappush(que, -b)\\n        if que:\\n            res += heappop(que) * (-1)\\n    print(res)\\n\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "576", "substitutes": {"input": ["error", "call", "amp", "raw", "until", "int", "reader", "request", "argument", "enter", "c", "load", "socket", "iter", "inf", "connect", "empty", "temp", "array", "hidden", "expression", "index", "image", "inc", "current", "exec", "get", "accept", "buffer", "out", "range", "param", "sel", "pull", "output", "data", "Input", "string", "help", "select", "session", "progress", "submit", "filter", "source", "config", "form", "feed"], "f_inf": ["f_abs", "f_Inf", " f_Inf", "f_info", " f0inf", " f_info", " f_abs", " f0Inf", " f0info", " f0abs"], "mod": ["mode", "dig", "MOD", "exp", "mult", "num", "im", "ver", "reg", " Mod", "div", "scale", "sim", "comp", "module", "inc", "mag", "fun", "dim", "mods", "debug", "complex", "dec", "add", "step", "progress", "cl", "Mod"], "n": ["s", "k", "p", "c", "o", "h", "y", "num", "r", "en", "ne", "z", "x", "w", "l", "u", "d", "q", "f", "j", "ns", "M", "v", "e", "N", "nb", "an"], "m": ["name", "s", "k", "mn", "ma", "p", "ms", "g", "c", "nm", "y", "o", "h", "num", "r", "ym", "z", "x", "A", "dm", "mu", "w", "module", "om", "cm", "l", "u", "d", "f", "j", "am", "M", "v", "e", "mm", "dn", "range", "an"], "B": ["F", "E", "L", "V", "H", "Q", "X", "Y", "K", "Bi", "BA", "O", "P", "T", "C", "D", "BB", "Bl", "BC", "BI", "S", "A", "BD", "W", "I", "BE", "BL", "OB", "U", "R", "M", "J", "BM", "NB", "Buffer", "N", "G", "Block", "BS", "Bs"], "_": ["s", " block", "__", "non", "ing", "un", " time", "x", " un", "f", " non", "all", "val"], "a": ["aa", "s", "wa", "va", "ma", "p", "na", "ai", "c", "fa", "y", "la", "ba", "ab", "da", "x", "pa", "A", "w", "ia", "l", "u", "d", "aaa", "ca", "sa", "ac", "ga", "area", "am", "aj", "ae", "e", "an", "ad"], "b": ["s", "aa", "ib", "code", "int", "p", "bs", "c", "y", "o", "r", "h", "num", "ba", "ab", "z", "x", "bid", "A", "bl", "ind", "sb", "l", "u", "d", "bb", "rb", "q", "abb", "j", "bd", "f", "br", "bin", "v", "an", "e", "base", "id", "bas", "nb", "lb", "bi"], "que": ["cur", "change", "line", "const", "qs", "code", "vel", "queue", "qu", "Queue", "Q", "me", "qa", "ge", "c", "hide", "h", "case", "en", "num", "pos", "log", "iq", "fe", "la", "done", "empty", "obs", "ques", "quote", "cb", "con", "rub", "ob", "req", "q", "eq", "f", "core", "close", "ue", "hou", "co", "hi", "quit", "fl", "ide", "complete", "lu", "len", "live", "e", "sem", "pe", "ha", "cr", "quire", "seq", "id", "qq", "contin", "Que"], "res": ["Rs", "qs", "ras", "rm", "arr", "ps", "ms", "err", "resource", "rx", "r", "results", "result", "pres", "rep", "re", "gr", "reg", "vs", "rez", "grid", "rev", "cache", "blocks", "ros", "Res", "runs", "con", "remote", "req", "q", "resolution", "sol", "RES", "real", "resh", "resp", "os", "rem", "powers", "cons", "reset", "id", "ret", "progress", "rs", "sum"], "i": ["k", "int", "p", "ai", "c", " I", "y", "o", "ini", "im", "r", "iu", "si", "x", "ind", "I", "ia", "l", "u", "d", "pi", "j", "f", " j", "list", "ni", "ip", "ci", "v", "e", "all", "id", "li", "ii", "bi"]}}
{"code": "mozi = 'abcdefghijklmnopqrstuvwxyz'\\nC = input()\\nprint(mozi[mozi.index(C)+1])", "target": "501", "substitutes": {"mozi": ["fozy", "mozy", "lozin", "mozilla", " mozilla", "MOzie", "moszi", " mozy", "chozie", "moszos", "moza", "mmmzi", "foza", "mozos", "choZI", "fozi", "moszin", "lozie", " mozie", "MOzilla", " moZI", "chozilla", "moZI", "lozos", "fozie", "loza", "mozin", "mmmzin", "mmmzos", "chozi", " moza", "lozi", "mmmzie", "MOZI", "MOzi", "mozie", "lozy", "moszie"], "C": ["F", "E", "Cs", "L", "V", "CI", "Cu", "H", "X", "NC", "c", "YC", "DC", "UC", "K", "CNN", "O", "P", "T", "B", "D", "S", "A", "W", "CM", "CF", "KC", "CO", "VC", "Z", "CL", "CCC", "U", "R", "JC", "M", "CC", "N", "G"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\ndef mapint(): return map(int, input().split())\\nsys.setrecursionlimit(10**9)\\n\\nS = str(input())\\nT = str(input())\\nans = 0\\nfor i in range(3):\\n    if S[i]==T[i]:\\n        ans += 1\\nprint(ans)", "target": "773", "substitutes": {"S": ["F", "s", "L", "V", "SC", "AS", "SF", "SE", "NS", "INS", "Si", "TS", "SH", "SI", "ANS", "Su", "SA", "P", "Space", "SK", "A", "SL", "I", "SS", "US", "WS", "CS", "U", "R", "M", "SP", "N", "SN", "G", "SO", "SU"], "T": ["F", "E", "L", "V", "LT", "H", "Q", "X", "Y", "TS", "XT", "TN", "TH", "O", "P", "C", "B", "D", "TG", "DT", "NT", "UT", "TX", "TE", "Z", "TT", "TC", "U", "R", "M", "TF", "t", "N", "WT", "G", "RET", "PT"], "ans": ["s", "aid", "a", "ents", "int", "lan", "nas", "cas", "amps", "missions", "ams", "offs", "na", "ai", "ms", "ats", "Ann", "aning", "activation", "anas", "AN", "ads", "ANS", "anes", "asts", "ks", "mean", "aces", "ann", "anse", "ani", "anon", "ares", "ana", "anc", "ania", "nan", "ars", "anus", "args", "aned", "ations", "ids", "ons", "aus", "sk", "ens", "cs", "leans", "ants", "ns", "os", "ds", "an", "ins"], "i": ["gi", "ji", "ui", "end", "a", "ie", "qi", "mi", "p", "ai", "inter", "c", " I", "y", "h", "r", "ix", "ini", "ti", "ani", "si", "eni", "index", "x", "yi", "ind", "start", "I", "uri", "d", "ace", "pi", "q", "uni", "ki", "j", "io", "f", "xi", "ri", "di", "ni", "ci", "e", "id", "li", "ii", "n", "bi", "ip"]}}
{"code": "if ''.join(sorted(input()))==\"abc\":\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")\\n", "target": "777", "substitutes": {}}
{"code": "# -*- coding: utf-8 -*-\\n\"\"\"\\nCreated on Tue May 12 14:59:02 2020\\n\\n@author: shinba\\n\"\"\"\\n\\nn = input()\\n\\nprint(\"ABC\"+n)\\n", "target": "429", "substitutes": {}}
{"code": "import sys\\nfrom itertools import accumulate\\n\\ninput = sys.stdin.readline\\n\\n\\ndef main():\\n    N = int(input())\\n    A = list(map(int, input().split()))\\n\\n    cumsum_A = list(accumulate(A))\\n    sum_A = sum(A)\\n\\n    ans = float(\"inf\")\\n    for i in range(N - 1):\\n        # cost = abs((sum_A - cumsum_A[i]) - cumsum_A[i])\\n        cost = abs(sum_A - 2 * cumsum_A[i])\\n        if cost < ans:\\n            ans = cost\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "728", "substitutes": {"input": ["error", "call", "raw", "a", "int", "str", "method", "argument", "enter", "init", "plus", "c", "target", "case", "format", "num", "result", "comment", "analysis", "empty", "temp", "conf", "array", "expression", "url", "exec", "I", "current", "get", "accept", "out", "param", " Input", "acl", "eval", "pull", "null", "output", "parent", "list", "data", "Input", "ae", "single", "type", "util", "select", "space", "count", "print", "keep", "filter", "submit", "source", "config", "form", "feed"], "N": ["F", "MN", "E", "L", "V", "NN", "H", "Q", "X", "Sn", "Y", "Size", "NC", "Num", "NS", "K", "NM", "CNN", "O", "P", "B", "C", "T", "D", "Len", "Ne", "W", "I", "Z", "Ns", "ND", "R", "M", "J", "G", "NA", "n"], "A": ["F", "a", "L", "At", "V", "All", "AI", "AS", "X", "Y", "AP", "LA", "AR", "AST", "AN", "AM", "P", "B", "C", "mA", "As", "AC", "Ar", "T", "API", "array", "AA", "au", "D", "Alpha", "S", "I", "Average", "Array", "CA", "U", "AF", "Input", "alpha", "M", "NA"], "cumsum_A": ["cumsum_a", "cumssum_a", "cumsum_T", "cumssum_T", "cumsum_Array", "cumssum_Array", "cumssum_A"], "sum_A": ["sum_a", " sum_B", "sum_B", "sum_N", " sum_a", " sum_N"], "ans": ["ano", "lan", "atan", "na", "Ann", "inity", "AN", "ANS", "mean", "ane", "ann", "ani", "asin", "nan", " means", "An", "tan", "aus", "sin", "ens", "ns", "no", "os", "cons", "ds", "an", "ad", " nan"], "i": ["gi", "k", "ib", "p", "pri", "c", "h", "y", "iu", "z", "index", "ind", "I", "it", "l", "u", "d", "q", "j", "ci", "ip", "e", "t", "il", "col", "id", "li", "ti"]}}
{"code": "# A - \u9ad8\u6a4b\u541b\u3068\u30db\u30c6\u30eb\u30a4\u30fc\u30b8\u30fc\\n# https://atcoder.jp/contests/abc044/tasks/abc044_a\\n\\nN = int(input())\\nK = int(input())\\nX = int(input())\\nY = int(input())\\n\\nresult = 0\\n\\nfor i in range(N):\\n    if i < K:\\n        result += X\\n    else:\\n        result += Y\\n\\nprint(result)\\n", "target": "71", "substitutes": {}}
{"code": "n = int(input())\\nas_ = list(int(i) for i in input().split())\\n\\n\\ndef output_history(history):\\n    print(len(history))\\n    for h in history:\\n        print('{0} {1}'.format(h[0], h[1]))\\n\\n\\ndef distribute(list_, hstr, x, y):\\n    list_[y] += list_[x]\\n    hstr.append((x + 1, y + 1))  # Fortran\u5f0f\\n    return list_, hstr\\n\\n\\nhistory = []\\n\\n# \u6b63\u8ca0\u3069\u3061\u3089\u304b\u306b\u5bc4\u305b\u308b\\n# MaxMin\u5927\u304d\u304f\u5916\u308c\u3066\u3044\u308b\u65b9\u306b\u5bc4\u305b\u308b\\nif abs(max(as_)) > abs(min(as_)):\\n    # \u6b63\u306b\u5bc4\u305b\u308b\\n    # \u6b63\u306eMax\u3092\u8ca0\u306e\u8981\u7d20\u306b\u7e70\u308a\u8fd4\u3057\u5206\u914d\\n    x = as_.index(max(as_))\\n    while not all([a >= 0 for a in as_]):\\n        for y, a in enumerate(as_):\\n            if a < 0:\\n                as_, history = distribute(as_, history, x, y)\\n\\n    # \u524d\u304b\u3089\u9806\u306b\u8d70\u67fb\u3057\u53cd\u8ee2\u7b87\u6240\u3067\u524d\u306e\u8981\u7d20\u3092\u5f8c\u308d\u306e\u8981\u7d20\u306b\u8db3\u3057\u5408\u308f\u305b\u308b\\n    for x in range(len(as_) - 1):\\n        # \u53cd\u8ee2\u7b87\u6240\u3067\\n        if as_[x + 1] - as_[x] < 0:\\n            as_, history = distribute(as_, history, x, x + 1)\\n\\nelse:\\n    # \u8ca0\u306b\u5bc4\u305b\u308b\\n    # \u8ca0\u306eMax\u3092\u6b63\u306e\u8981\u7d20\u306b\u7e70\u308a\u8fd4\u3057\u5206\u914d\\n    x = as_.index(min(as_))\\n    while not all([a <= 0 for a in as_]):\\n        for y, a in enumerate(as_):\\n            if a > 0:\\n                as_, history = distribute(as_, history, x, y)\\n\\n    # \u5f8c\u308d\u304b\u3089\u9806\u306b\u8d70\u67fb\u3057\u53cd\u8ee2\u7b87\u6240\u3067\u5f8c\u308d\u306e\u8981\u7d20\u3092\u524d\u306e\u8981\u7d20\u306b\u8db3\u3057\u5408\u308f\u305b\u308b\\n    for x in reversed(range(len(as_) - 1)):\\n        # \u53cd\u8ee2\u7b87\u6240\u3067\\n        if as_[x + 1] - as_[x] < 0:\\n            as_, history = distribute(as_, history, x + 1, x)\\n\\noutput_history(history)\\n", "target": "412", "substitutes": {"n": ["s", "p", "arr", "g", "c", "o", "r", "rec", "num", "log", "fn", "norm", "w", "l", "d", "f", "j", "m", "br", "list", "nr", "b", "v", "path", "N", "count", "nb"], "as_": [" array_", "listN", "logN", "log_", " arrayN", " asN"], "i": ["gi", "k", " p", "a", "qi", "p", "ai", "c", " I", "ini", "ix", " c", "iu", "ti", "z", "si", "index", "ind", "I", "l", "idi", "u", "pi", "d", "q", "j", "f", "iii", "m", " j", "xi", "ri", "b", "key", " ii", "e", "id", "li", "ii", "bi", "ip"], "history": ["rh", "code", "queue", "H", "event", "p", "ash", "command", "r", "hash", "rec", "prev", "item", "dict", "log", "original", "rev", "array", "index", "cache", "events", "stack", "reverse", "History", "buffer", "row", "hist", "archive", "header", "sequence", "input", "list", "data", "batch", "graph", "program", "path", "record", "Hist", "loop", "document"], "h": ["rh", "hs", "ih", "s", "a", "code", "H", "p", "g", "c", "host", "dict", "rec", "hash", "prev", "r", "log", "his", "hr", "html", "ch", "index", "events", "w", "body", "hh", " H", "l", "d", "History", "q", "hist", "f", "header", "m", "hd", "input", "graph", "v", "b", "path", "help", "ha", "hm", "id", "hp"], "list_": ["p_", "lists1", "key1", " list1", "p__", " list__", "list1", "List1", "array__", "array_", "list__", "key__", "List_", "lists__", "lists_", "key_", "List__"], "hstr": ["vdiv", "parr", "sharr", " hlist", "lStr", " harr", "shStr", "pstr", "larr", "harr", "lstr", "varr", "hlist", " hdiv", "hdiv", "lst", "shstr", "shst", "plist", " hst", "vlist", "hst", "vstr", "pdiv", " hStr", "hStr"], "x": ["dx", "name", "k", "int", "code", "X", "p", "xs", "c", "xx", "rx", "ix", "pos", "z", "ex", "index", "xxx", "w", "ind", "l", "u", "d", "q", "j", "f", "ax", "m", "data", "v", "key", "b", "t", "e", "xy", "col", "step", "id"], "y": ["yr", "s", "yd", "dy", "ye", "hy", "p", "Y", "c", "xx", "height", "ix", "ym", "ay", "yn", "year", "z", "zy", "index", "yi", "yo", "w", "ind", "yt", "q", "j", "m", "yy", "ya", "oy", "type", "v", "b", "key", "yl", "t", "e", "xy", "py", "id", "vy", "ry", "ey"]}}
{"code": "if input().find(\"AC\") != -1:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "384", "substitutes": {}}
{"code": "_ = input()\\na = [int(i) for i in input().split()]\\na.sort()\\na.reverse()\\nprint(sum(a[::2]) - sum(a[1::2]))", "target": "452", "substitutes": {"_": ["name", " p", "p", "tmp", "x", "A", "obj", "j", "self", "data", " self", "t", "all", " b", "n"], "a": ["s", "aa", "int", "missing", "ans", "p", "ai", "c", "aw", "fa", "y", "o", "app", "la", "ba", "ab", "au", "array", "index", "x", "pa", "A", "w", "args", "l", "u", "d", "f", "sa", "ca", "ac", "ga", "m", "area", "aux", "input", "am", "data", "ae", "alpha", "b", "ea", "e", "t", "an", "n"], "i": ["gi", "k", "int", "p", "phi", "ai", "c", " I", "ini", "ix", "iu", "z", "si", "x", "ind", "I", "uri", "l", "u", "pi", "d", "q", "j", "f", "iii", "xi", "ri", "ci", "ip", "v", "key", "e", "id", "li", "ii", "bi", "n"]}}
{"code": "N,K=map(int,input().split())\\nH=[int(h) for h in input().split()]\\nH=sorted(H)\\ncnt=0\\nfor i in range(1,len(H)+1):\\n    if H[-i]>=K:\\n        cnt+=1\\n    else:\\n        print(cnt)\\n        exit()\\nprint(cnt)\\n", "target": "494", "substitutes": {"N": ["F", "MN", "E", "L", "V", "NN", "Q", "X", "Y", "NE", "NI", "O", "P", "T", "C", "B", "D", "Ne", "W", "Z", "Ns", "M", "J", " n", "G", "NA", "n"], "K": ["F", "k", "KK", "E", "L", "V", "Q", "X", "Y", "KE", "Sk", "P", "T", "C", "B", "SK", "D", "NK", "KS", "S", "W", "KC", "I", "HK", "Z", "KR", "PK", "U", "R", "J", "M", "KN", "G", "Ku"], "H": ["F", "ID", "E", "OH", "L", "V", "HS", "Q", "X", "HB", "Y", "SH", "HC", "O", "P", "T", "C", "B", "D", "CH", "S", "A", "W", "HR", "EH", "HTTP", "Host", "HD", "GH", "HK", "Z", "MH", "HH", "HM", "HI", "U", "R", "Input", "M", "G", "HA", "RH", "HQ"], "h": ["rh", "hs", "k", "loc", "end", "sh", "p", "kh", "c", "o", "r", "head", "his", "hr", "ch", "index", "x", "ah", "w", "hh", "l", "bh", "d", "q", "hex", "f", "HH", "m", "hd", "ich", "hi", "v", "e", "uh", "ha", "hm", "id", " inh", "hp", "n"], "cnt": ["cNT", " cpt", "cpt", "acount", "CNT", "lcpt", "Cpt", " cNT", " cct", "cct", "acnt", "Cnt", "acNT", "acpt", " count", "lcnt", "acct", "count", "Cct", "lcNT", "Count", "lcount"], "i": ["gi", "ih", "k", "end", "a", "qi", "p", "ai", "c", "y", "r", "iu", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "j", "io", "f", "xi", "hi", "ip", "ci", "ij", "b", "v", "e", "id", "li", "ii", "n", "ti"]}}
{"code": "n = int(input())\\nA = [int(i) for i in input().split(\" \")]\\n\\navg=[]\\nfor i in range(len(A)):\\n    avg.append(A[i]-(i+1))\\navg.sort()\\nb=avg[int(n/2)]\\n\\nsum = 0\\nfor j in range(len(A)):\\n    sum += abs(A[j]-(b+j+1))\\n\\nprint(sum)\\n", "target": "463", "substitutes": {"n": ["s", "k", "a", "span", "p", "g", "c", "o", "h", "y", "num", "net", "ne", "nu", "z", "x", "l", "u", "d", "nt", "f", "network", "m", "Ns", "ns", "no", "ni", "v", "np", "len", "t", "N", "count", "nb", "an"], "A": ["F", "GA", "E", "a", "L", "At", "New", "V", "All", "H", "X", "Y", "ai", "Num", "LA", "This", "Ay", "AM", "P", "B", "C", "mA", "As", "T", "Ar", "D", "au", "array", "AA", "Args", "API", "Alpha", "S", "W", "Avg", "I", "Ab", "Data", "Action", "ga", "Array", "CA", "am", "U", "Part", "Input", "alpha", "R", "M", "N", "G", "Am", "The", "Ang", "NA", "App"], "i": ["gi", "k", "ui", "a", "ei", "int", "ie", "chi", "qi", "mi", "p", "phi", "ai", "c", "o", "y", "ini", "ix", "iu", "slice", "z", "mini", "si", "index", "x", "yi", "ind", "I", "l", "u", "d", "pi", "f", "io", "m", "xi", "ri", "di", "ni", "ci", "v", "e", "zi", "id", "li", "ii", "bi", "ip"], "avg": ["averig", "AVgs", "afgs", " avgs", "auG", "avm", "AVm", "arrg", "afg", " avgz", "auig", "avgz", "aug", "arrG", " avng", "arrm", "AVg", "averg", "auge", "AVng", " avge", "afge", "arrgs", "avergz", "avng", "averge", "AVge", "avG", "AVG", "avig", "avgs", "afm", "avge", " avig", "augz", "afng", "augs", "afG"], "b": ["s", "a", "fb", "p", "bs", "bp", "g", "c", "pb", " B", "y", "r", "h", "num", "wb", "beta", "mb", "bis", "B", "ab", "sb", "l", "ob", "u", "d", "rb", "bh", "bb", "f", "area", "binary", "abs", "v", "lb", "base", "count", "nb", "bi"], "sum": ["min", "error", "a", "sh", "p", "acc", "g", "c", "r", "hash", "num", "beta", "weight", "mean", "size", "conf", "scale", "cost", "si", "diff", "av", "w", "ass", "u", "cal", "max", "out", "gram", "f", "sa", "agg", "am", "average", "alpha", "bin", "v", "summary", "loss", "count", "Sum", "se", "um", "total"], "j": ["ji", "k", "a", "ie", "ja", "p", "g", "c", "y", "h", "jj", "o", "jl", "z", "si", "x", "ind", "adj", "obj", "l", "u", "d", "uj", "q", "out", "job", "jp", "f", "m", "jc", "aj", "jam", "ij", "J", "v", "bj", "key", "e", "li", "ii", "bi"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nn=int(input())\\nL=list(map(int,input().split()))\\n\\nans = 0\\nfor i in range(n):\\n    for j in range(i+1,n):\\n        ans += L[i]*L[j]\\nprint(ans)\\n\\n", "target": "434", "substitutes": {"input": ["error", "call", "raw", "text", " output", "until", "int", "python", "reader", "PUT", "request", "method", "argument", "enter", "element", "load", "format", " inputs", "result", "inf", "temp", "config", "array", "hidden", "fn", "expression", "exec", "accept", "out", "f", " Input", "lib", "eval", "pull", "output", "parent", "list", "data", "Input", " int", "type", "util", "help", "select", "view", "reset", "print", "keep", "submit", "source", "param", "form", "feed"], "n": [" N", "s", "k", "span", "p", "c", "o", "number", "nc", "num", "en", "y", "pos", "h", "ne", "z", "x", "nan", "w", "l", "lines", "d", "nt", "nn", "ln", "f", "network", "m", "Ns", "ns", "nl", "ni", "nr", "len", "b", "e", "N", "t", "nb"], "L": ["F", "E", "LB", "V", "LT", "IL", "NL", "Q", "X", "LS", "LA", "K", "LP", "Lu", "O", "P", "T", "C", "B", "D", "LM", "LIN", "S", "A", "W", "SL", "I", "l", "EL", "LR", "LE", "ln", "Z", "list", "R", "U", "List", "M", "J", "LI", "N", "ls", "DL", "XL", "LL", "G", " l"], "ans": ["s", "ents", "lan", "nas", "cas", "les", "na", "aning", "anas", "AN", "ANS", "anes", "ks", "asts", "la", "mean", "ane", "ann", "anon", "ani", "anc", "ana", "can", "outs", " means", "nan", "ars", "lines", "aned", "nn", "ons", "aus", "ens", "sk", "ln", "leans", "ants", "ns", "reads", "an", "ls", "ds", " Ans", "ins"], "i": ["ji", "k", "ui", "a", "ie", "int", "p", "phi", "ai", "c", "y", "h", "ini", "z", "si", "index", "x", "ind", "start", "I", "l", "u", "pi", "d", "f", "io", "m", "xi", "ni", "ci", "ip", "ij", "b", "v", "e", "id", "li", "ii", "bi"], "j": ["ji", "k", "a", "ja", "p", "jo", "o", "y", "jj", "dj", "pos", "jl", "z", "je", "x", "ind", "adj", "obj", "l", "uj", " J", "q", "job", "jp", "jc", "oj", "aj", "jam", "ij", "J", "v", "b", " ii", "e", "kj", "li", "ii", "offset"]}}
{"code": "import heapq\\nn,m, = map(int,input().split())\\nE = [[] for i in range(n)]\\nfor i in range(m):\\n    a,b,c = map(int,input().split())\\n    a -= 1\\n    b -= 1\\n    E[a].append((c,b))\\n    E[b].append((c,a))\\n\\n\\ndef dijkstra(x):\\n    dis = [float(\"inf\")]*n\\n    dis[x] = 0\\n    q = []\\n    heapq.heappush(q,(0,x))\\n    \\n    while q:\\n        cost,bef = heapq.heappop(q)\\n\\n        if dis[bef] < cost:\\n            continue\\n\\n        for ncost,nex in E[bef]:\\n            dist = ncost+cost\\n\\n            if dist < dis[nex]:\\n                dis[nex] = dist\\n                heapq.heappush(q,(dist,nex))\\n    return dis\\n\\nshort = []\\nfor i in range(n):\\n    short.append(dijkstra(i))\\ncount = 0\\nfor i in range(n):\\n    for dist,nex in E[i]:\\n        if short[i][nex] < dist:\\n            count += 1\\nprint(count//2)\\n\\n", "target": "755", "substitutes": {"n": [" N", "min", "s", "k", "mn", "p", "g", "o", "y", "nc", "en", "h", "r", " e", "num", "net", "el", "un", "ne", "nu", "z", "w", "l", "u", "d", "f", "j", "ns", "nl", "M", "v", "e", "N", "t", "nb"], "m": ["k", "mn", "p", "ms", "g", "y", "r", "o", "h", "num", "ym", "im", "en", "pm", "z", "time", "dm", "w", "cm", "l", "u", "d", "f", "j", "sm", "M", "v", "e", "mm", "mc", "month", "range"], "E": ["F", "Base", "L", "GE", "End", "V", "EE", "ME", "H", "Es", "Q", "X", "Y", "NE", "EA", "K", " e", "Ge", "IE", "EU", "O", "P", "T", "C", "B", "D", "EC", "AE", "Edge", "PE", "Ne", "S", "A", "W", "I", "Li", "Est", "Line", "Single", "Z", "Ed", " EE", "EO", "El", "CL", "Me", "U", "R", "M", "e", "N", "Order", "Other", "G", "EF", "ES"], "i": ["gi", "ji", "s", "k", "ui", "ie", "ei", "int", "qi", "p", "ai", "h", "o", "y", "ini", "im", "r", "iu", "api", "ti", "z", "si", "eni", "yi", "I", "uli", "it", "l", "u", "d", "ish", "pi", "uri", "f", "j", "io", "adi", "xi", "ori", "di", "ri", "ni", "ci", "ip", "v", "e", "zi", "id", "li", "ii", "bi", "on"], "a": ["aa", "k", "s", "va", "p", "ai", "fa", "y", "r", "o", "ba", "ab", "au", "da", "A", "ar", "af", "w", "ia", "l", "u", "d", "f", "ca", "sa", "ac", "am", "ae", "e", "an"], "b": ["aa", "k", "s", "ib", "fb", "p", "bs", "g", "y", "r", "h", "o", "wb", "B", "ba", "ab", "z", "w", "sb", "cb", "l", "bb", "d", "u", "rb", "abb", "f", "j", "eb", "ca", "ac", "db", "v", "e", "bi", "ad"], "c": ["s", "k", "int", "p", "g", "y", "r", "h", "o", "ec", "C", "z", "cu", "w", "l", "u", "d", "cn", "f", "ca", "cs", "ac", "ci", "v", "e", "cr", "col", "ad"], "x": ["s", "k", "X", "p", "tx", "xs", "g", "xx", "plus", "fx", "y", "o", "h", "ix", "rx", "z", "xt", "ex", "xxx", "index", "w", "cross", "l", "u", "d", "f", "ax", "xi", "xp", "e", "xes", "xc", "xa"], "dis": ["bad", "ui", "course", "dd", "court", "com", "non", "cond", "SE", "des", "re", "nu", "l", " Dis", "disc", "Dist", "neg", "data", "dev", "se", "nexus", "normal", "est", "distance", "pos", "hard", "une", "ne", "pro", "comp", "de", "pi", " DIS", "wd", "e", "loss", "all", "poly", "pay", "density", "device", "chi", "cor", "service", "p", "DE", "es", "params", "d", "ignore", "Dis", "DIS", " es", "exp", "sd", "pm", "un", "chain", "D", "diff", "par", "ee", "nt", "nn", "fre", "details", "fee", "free", "di", "no", "det", "fine", "range"], "q": ["s", "k", " p", "sq", "sh", "qs", "queue", "qu", "qi", "Q", "p", "qa", "g", "h", "y", "r", "o", "iq", "z", "ch", "w", "l", "u", "d", "req", "eq", "f", "dq", "requ", "query", " self", "v", "e", "quant", "id", "qq", " d"], "cost": ["contact", "risk", "sc", "product", "distance", "price", "work", "gross", "charge", "weight", "coll", "expensive", "coord", "div", "ce", " costs", "Cost", "comp", "clean", "cross", "d", "ace", "CO", "score", "nz", "f", "frac", "core", "fee", "co", "dc", "supp", "rank", "cd", "data", "df", "length", "dev", "feature", "cf", "loss", "cc", "step", "eff", "draw"], "bef": ["bootaf", " baf", " biff", "wbec", " balf", "bEF", "balf", "cood", "wbalf", "bec", "dEF", "bdef", "biff", "bootef", "cef", " befined", " bEF", "bootiff", "falf", "baf", "calf", "wbef", "food", "wbEF", "fef", "faf", "bootefined", "bood", "dec", "fefined", "befined", "fdef", " bood", " bec", " bdef", "cdef", "dalf", "fiff"], "ncost": ["nmomp", "pnoy", "ncomp", "nlost", "nlomp", "NCose", "unnose", "NCop", "pnomp", "nmrost", "ncrost", "nmost", "unnop", "nloy", "NCoss", "pnrost", "unnost", "pnost", "ncoss", "nmoy", "NCost", "unnoss", "nlrost", "ngop", "ncop", "ngoss", "ngost", "ncose", "ngose", "ncoy"], "nex": ["ss", "zero", "dd", "non", "ext", "des", "rx", "ix", "pex", "xff", "neg", "nette", "nexus", "tex", "nox", "sex", "est", "tx", "distance", "ravel", "yx", "xx", "expl", "occup", "ne", "cross", "de", "flex", "rix", "nz", "hex", "nw", "sw", "ez", "nec", "step", "xxxxxxxx", "ross", "rex", "lex", "syn", "eni", "ex", "nil", "du", "none", "rice", "isen", "express", "zi", "mix", "egal", "dx", "wn", "na", "fx", "nc", "px", "nes", "kn", "design", "obj", "wx", "xd", "nt", "nn", "six", "fee", "su", "eff", "oss", "xa"], "dist": ["dd", "int", "y", "rec", "nu", "deep", "dm", "pred", "disc", "core", "Dist", "dc", "supp", "dev", "feat", "distance", "fe", "interest", "ord", "done", "desc", "div", "dot", "dest", "pro", "comp", "store", "de", "score", "cd", "ide", "wd", "rem", "loss", "add", "und", "form", "rest", "density", "chi", "default", "pri", "nd", "dj", "depend", "start", "req", "d", "sup", "du", "ist", "dr", "transfer", "grade", " distance", "exp", "sd", "diff", "ward", "nt", "fee", "df", "check", "feature", "eff", "progress", "range", "draw"], "short": ["float", "min", "error", "raw", "full", "int", "channel", "est", "exp", "inter", "regular", "gap", "low", "y", "dep", "ord", "desc", "long", "div", "array", "component", "att", "Short", "uint", "flat", "chan", "external", "tri", "out", "right", "close", "small", "co", "private", "data", "dim", "string", "all", "quant", "ort", "id", "inner", "double", "sub", "quick", "form", "test"], "count": ["name", "call", "group", "last", "code", "span", "total", "cond", "p", "low", "case", "num", "number", "weight", "size", "counter", "time", "index", "cache", "diff", "ind", "start", "current", "max", "catch", "f", "old", "depth", "list", "check", "length", "match", "type", "len", "key", "base", "id", "part", "loop", "test", "sum", "Count"]}}
{"code": "X, K, D = map(int,input().split())\\nX = abs(X)\\n\\nif X > K*D:\\n    print( X - K*D )\\nelse:\\n    a = X//D\\n    K -= a\\n    X -= D*a\\n    if K%2 == 0:\\n        print(X)\\n    else:\\n        print(abs(X-D))", "target": "66", "substitutes": {"X": ["F", "Length", "E", "ID", "DA", "L", "V", "H", "DX", "Q", "XX", "Y", "Check", "IK", "XP", "Width", "DC", "xx", "Form", "Text", "Test", " x", "ZX", "FF", "DATA", "O", "P", "T", "C", "B", "Int", "AC", "WH", "DD", "x", "PE", "A", "Weight", "W", "AX", "IX", "XXX", "I", "CD", "Do", "TX", "Z", "Data", "ax", "Ax", "II", "CL", "XY", "PH", "U", "Value", "R", "Content", "M", "CC", "XL", "N", "G", "Work", "Cross"], "K": ["F", "Power", "AD", "k", "KK", "E", "Ke", "ID", "L", "DA", "AK", "V", "H", "Ak", "Q", "Y", "IK", "UC", "KE", "Sk", " k", "P", "T", "C", "O", "SK", "AC", "DD", "B", "NK", "KS", "A", "W", "VK", "KC", "CD", "NG", "Z", "UK", "KR", "PK", "U", "J", "M", "DK", "N", "G", "Work"], "D": ["F", "AD", "E", "DA", "L", "DS", "V", "DX", "Q", "Y", "DC", "DM", "DO", "DB", "O", "Day", "P", "B", "C", "T", "LD", "DD", "De", "PD", "MD", "S", "A", "W", "I", "CD", "Ds", "d", "Do", "Di", "DF", "Z", "Data", "ND", "U", "R", "M", "N", "G", "DI", " d"], "a": ["aa", "AD", "k", "auto", "va", "p", "ai", "c", "aw", "i", "fa", "y", "Na", "AB", "ba", "mA", "ab", "z", "au", "AA", "da", "Alpha", "x", "A", "af", "w", "d", "ca", "Z", "sa", " A", "f", "ga", "m", "ac", "ax", "CA", "area", "am", "ae", "alpha", "b", "e", "Fa", "an", "ad", "n"]}}
{"code": "from fractions import gcd\\ndef main():\\n    x, y = map(int, input().split())\\n    if x % y == 0:\\n        print(\"-1\")\\n    else:\\n        print(x)\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "396", "substitutes": {"x": ["dx", "k", "a", "int", "python", "code", "X", "p", "tx", "xs", "c", "i", "xx", "width", "fx", "h", "number", "ix", "px", "pos", "ay", "rx", "z", "xt", "ex", "index", "xxx", "xxxx", "w", "args", "l", "wx", "u", "d", "f", "m", "xi", "input", "data", "v", "b", "xp", "foo", "t", "xy", "val", "xc", "test", "n"], "y": ["yd", "a", "ys", "dy", "p", "Y", "c", "i", "xx", "o", "ym", "ay", " Y", "z", "yi", "cy", "yz", "yt", "d", "j", "f", "sy", "m", "yy", "ya", "oy", "iy", "b", "yl", "t", "xy", "col", "py", "vy", "ey", "ies", "n"]}}
{"code": "from collections import defaultdict\\nN = int(input())\\nprm = defaultdict(int)\\nfor n in range(2, N+1):\\n    for p in range(2, int(n**0.5)+2):\\n        while n % p == 0:\\n            prm[p] += 1\\n            n //= p\\n        if n == 1:\\n            break\\n    else:\\n        prm[n] += 1\\nC = [2, 4, 14, 24, 74]\\ncnt = [0]*5\\nfor p, x in prm.items():\\n    for i, c in enumerate(C):\\n        if x >= c:\\n            cnt[i] += 1\\nc2, c4, c14, c24, c74 = cnt\\n\\nans = c4*(c4-1)//2*(c2-2) if c2 > 2 else 0\\nans += max(0, c24*(c2-1))\\nans += max(0, c14*(c4-1))\\nans += c74\\nprint(ans)\\n", "target": "145", "substitutes": {"N": ["F", " M", "L", "V", " L", "Q", "X", "Size", "NC", "Num", "NS", "NI", "K", "num", "O", "Len", "P", "T", "D", "B", "NP", "S", "I", "NT", "Ni", "Ns", "ns", "R", "M", " D", " P", " Num", "Count"], "prm": [" prf", "Prm", "trms", "ppm", "ppp", "grm", "grf", "ppn", " prms", "crms", "crm", "frp", "cram", "Prcm", "pm", "Prms", "prms", "prcm", " pram", "prn", "trm", " prp", "crp", " prn", "pms", "pcm", "pram", "grp", "frms", " prM", " prpm", "fram", "grn", "Prpm", "trcm", "ppf", "prp", "trM", "prf", "frm", "PrM", "prpm", "prM", " prcm"], "n": ["s", "k", "a", "pid", "na", "g", " network", " v", "yn", "nc", "num", "un", "net", "pos", "r", "P", "ne", "on", "fn", " fn", "o", " pi", "w", "nat", "l", "u", "d", "pi", "nt", "nn", "q", "f", "j", "y", "network", "m", "nw", "Ns", "ns", " j", "no", "v", "b", "np", "e", "pn", "t", "nb"], "p": ["s", "a", "pid", "int", "pre", "ps", "bp", "g", "fp", "y", "r", "o", "h", "pm", "pr", "pos", "cp", "num", "tp", "ap", "P", "pt", "proc", "w", "start", "l", "u", "pi", "d", "max", "q", "f", "j", "jp", "point", "pp", "m", "parent", "ip", "v", "b", "np", "e", "pe", "pn", "t", "count", "py", "pc"], "C": ["F", "E", "Cs", "L", "FC", "V", "CI", "Cu", "Q", "CU", "X", "NC", "DC", "K", "nc", "O", "P", "T", "B", "D", "EC", "S", "A", "CM", "CF", "I", "cm", "Ch", "cs", "CL", "U", "R", "M", "CC", "G"], "cnt": ["cNT", " cmax", "C0", "CNT", "cnc", "csnn", " cNT", " cnc", "Cnt", "nmax", " cno", "c0", "Cnc", "Cno", "nnt", "nno", "lcnn", "Cnn", "lc0", "cno", "csNT", "lcnt", " c0", "Cmax", "cmax", "csnt", "cnn", "lcNT", "nnn", "csnc", " cnn"], "x": ["X", "ic", "xs", "xx", "rx", "y", "h", "ix", "px", "uc", "z", "ex", "index", "w", "wx", "ctx", "pi", "xd", "q", "ax", "xi", "co", "ci", "xp", "v", "e", "pe", "xy", "xc", "cl", " xp", "xa", "pc"], "i": ["ie", "int", "phi", "ai", "o", "r", "y", "h", "ix", "iu", "sp", "si", "index", "I", "l", "ctx", "u", "pi", "d", "f", "j", "io", "m", "xi", "ri", "ci", "ip", "b", "v", "e", "li", "ii", "pc"], "c": ["s", "k", "y", "h", "nc", "r", "lc", "ce", "cu", "con", "cm", "l", "u", "d", "q", "f", "ca", "cs", "m", "ac", "dc", "co", "ci", "ct", "v", "b", "cf", "e", "cc", "col", "pc", "xc"], "c2": ["C0", "lc1", "sc2", "rc2", "sc5", "c5", "c0", "C5", "rc1", "C4", "lc4", "sc4", "C14", "C1", " c5", "rc4", "rc14", "C2", "lc0", " c0", "lc14", "lc2", " c1", "c1"], "c4": ["ac4", "h4", "p4", "f2", "f4", "h24", "h14", "lc24", "C4", "lc4", "ac24", "C14", "f14", "C2", "f24", "p2", "C24", "p24", "lc14", "lc2", "ac2", "p14", "h2", "ac14"], "c14": ["f11", " c29", "c12", "f29", "ac74", "uc14", "uc74", "c29", "uc24", "uc12", " c11", "ac24", "f14", " c12", "f12", "uc29", "c16", "uc11", "uc16", " c16", "c11", "ac16", "ac14"], "c24": ["ac4", "p16", "uc4", "p4", "C64", "uc64", "uc24", "c64", " c64", "C16", "C4", "ac24", "C14", "C1", "C24", "p24", "uc1", "c16", "p14", "ac16", "c1", " c1", "ac14"], "c74": ["C94", "C74", "ac74", " c94", " c54", "ac94", "C16", "C54", "C14", "ac54", "c94", "c16", " c16", "c54", "ac16", "ac14"], "ans": ["ss", "s", "aid", "ents", "lan", "cas", "span", "amps", "eps", "nas", "na", "ras", "atan", "gan", "ions", "aning", "anon", "anas", "AN", "ads", "ANS", "anes", "ks", "ane", "aces", "annels", "ann", "anse", "anc", "ares", "cus", "ana", "es", "ania", "can", "ays", " means", "outs", "ars", "lang", "anus", "lines", "aned", "ations", "ons", "anan", "works", "leans", "sk", "cs", "ants", "ns", "scan", "os", "san", "ls", "cons", "ean", "ians", "plan", "ops", "an", "ins"]}}
{"code": "n, *l = (int(input()) for _ in range(6))\\nprint((n - 1) // min(l) + 5)", "target": "784", "substitutes": {"n": ["min", "s", "k", "loc", "p", "g", "c", "i", "y", "r", "o", "h", "en", "net", "num", "z", "x", "u", "d", "max", "f", "ln", "j", "m", "ns", "nl", "b", "len", "v", "t", "N", "nb"], "l": ["lp", "k", "loc", "L", "p", "g", "c", "i", "o", "y", "h", "sl", "left", "lc", "z", "kl", "u", "d", "ll", "f", "j", "ln", "dl", "m", "nl", "length", "fl", "v", "b", "len", "e", "ls", "li", "cl"], "_": ["s", "k", "__", "p", " g", "g", "___", " f", "out", "f", " j", "len", " b"]}}
{"code": "inputList = []\\nwhile True:\\n    try:\\n        num = int(input())\\n    except EOFError:\\n        break\\n    inputList.append(num)\\n\\ninputList.sort()\\nlength = len(inputList)\\nfor i in range(3):\\n    print(inputList[length - i - 1])", "target": "550", "substitutes": {"inputList": [" InputQueue", "outputQueue", "inputStack", "listMap", " InputSt", "selectList", "selectArray", " inputQueue", "inputArray", "InputSt", "InputMap", "inputMap", "selectObj", "outputL", "inputObj", " InputL", "outputArray", "InputQueue", "outputList", "outputSet", "InputStack", "InputSet", "listList", "selectQueue", " inputObj", "inputSet", " InputList", " inputArray", "inputQueue", "inputSt", " inputSet", " inputSt", "InputObj", " inputL", "listSt", " inputStack", "inputL", "InputL", " inputMap", "InputList", "listStack", "outputObj"], "num": ["min", "name", "loc", "end", "dom", "init", "Num", "umi", "number", "result", "pos", "NUM", "iter", "temp", "nu", "coord", "div", "index", "ident", "fn", "mu", "inc", "con", "uni", "du", "nam", "lim", "input", "fail", "dim", "len", "count", "col", "id", "nb", "loop", "sum", "um", "n"], "length": ["character", "Length", "loc", "full", "end", "sh", "span", "sleep", "p", "distance", "width", "height", "number", "section", "ph", "slice", "split", "temp", "size", "long", "time", "index", "l", "max", "row", "angle", "position", "sequence", "depth", "shape", "duration", "type", "len", "zip", "limit", "count", "ength", "n"], "i": ["gi", "k", "end", "ie", "qi", "p", "ai", "c", "h", "y", "ix", "iu", "iter", "ti", "index", "x", "ind", "start", "I", "l", "d", "pi", "q", "j", "f", "io", "xi", "di", "ip", "ci", "b", "v", "e", "multi", "id", "li", "ii", "n"]}}
{"code": "s = input()\\nt = input()\\nls = len(s)\\nlt = len(t)\\ndp = [[0 for j in range(lt+1)] for i in range(ls+1)]\\nfor i in range(1, ls+1):\\n  for j in range(1, lt+1):\\n    if s[i-1] == t[j-1]:\\n      dp[i][j] = dp[i-1][j-1] + 1\\n    else:\\n      dp[i][j] = max(dp[i-1][j], dp[i][j-1])\\nans = \"\"\\nlength = dp[ls][lt]\\ni = ls\\nj = lt\\nwhile length > 0:\\n  if s[ls-1] == t[lt-1]:\\n    ans = s[ls-1] + ans\\n    ls -= 1\\n    lt -= 1\\n    length -= 1\\n  elif dp[ls-1][lt] == length:\\n    ls -= 1\\n  else:\\n    lt -= 1\\nprint(ans)", "target": "129", "substitutes": {"s": ["ss", "a", "ys", "strings", "p", "bs", "ps", "g", "c", "states", "ions", "sets", "sts", "h", "sl", "o", "y", "r", "ks", "si", "es", "als", "S", "w", "sb", "l", "lines", "u", "d", "ses", "services", "sg", "f", "sa", "cs", "m", "ns", "self", "types", "os", "ts", "b", "gs", "ings", "string", "e", "v", "ds", "se", "test", "ies", "n"], "t": ["k", "a", "at", "tm", "tt", "tw", "p", "top", "to", "g", "c", "y", "h", "tp", "ot", "r", "pt", "T", "tf", "z", "x", "st", "flat", "l", "u", "d", "nt", "ta", "dt", "f", "ut", "m", "port", "rt", "ts", "b", "v", "qt", "type", "e", "tz", "test", "n"], "ls": ["lp", "ss", "lins", "loc", "strings", "elt", "LT", "les", "lin", "LS", "p", "bs", "ps", "xs", "lite", "ly", "tl", "sl", "lis", "el", "lr", "ks", "la", "lv", "vs", "lc", "long", "kl", "es", "los", "els", "l", "lines", "less", "ll", "sol", "ln", "dl", "cs", "lf", "ils", "n", "rl", "ns", "js", "nl", "lit", "wl", "ts", "len", "ld", "gs", "os", "le", "sql", "ds", "ols", "li", "ler", "rs", "lb", "lus", "sels"], "lt": ["lp", "min", "loc", "alt", "elt", "int", "ie", "LT", "les", "tail", "LS", "let", "lat", "lite", "tl", "sl", "lex", "lis", "lr", "el", "ml", "Len", "left", "lv", "la", "lc", "long", "kl", "url", "bl", "els", "l", "less", "nt", "ll", "dt", "dl", "lvl", "lf", "gt", "ln", "rl", "ns", "lit", "wl", "fl", "ts", "len", "ld", "lu", "lb", "lig", "le", "il", "col", "ilt", "li", "lin"], "dp": ["lp", " p", "dd", "pid", "dh", "python", "wp", "p", "dist", "ps", "pb", "xs", "fp", "dat", " DP", "tp", "pm", "cp", "gp", "api", "dep", "sp", "pa", "vp", "params", "dm", "d", "pi", "xd", "DP", "dl", "dt", "dq", "pp", "deb", "dr", "dc", "df", "pkg", "di", "data", "db", "wd", "dim", "np", "pd", "ds", "dos", "hp", "pg", " d", "ip"], "j": ["ji", "k", "ui", "a", "last", "ie", "int", "ja", "p", "_", "g", "jo", "c", "o", "r", "y", "h", "im", "jj", "el", "iu", "jl", "z", "je", "si", "jet", "x", "index", "ind", "adj", "l", "u", "uj", "d", "q", "js", "f", "jp", "m", "oj", "jc", "xi", "br", "aj", "ni", "ci", "ij", "J", "bj", "v", " ii", "b", "e", "ld", "zi", "id", "li", "ii", " l", "next", "n"], "i": ["gi", "ji", "ui", "a", "ie", "int", "mi", "p", "ai", "c", "oi", "o", "y", "ini", "im", "ix", "el", "iu", "lc", "z", "si", "x", "ind", "start", "I", "it", "l", "u", "pi", "d", "io", "f", "iv", "m", "xi", "ori", "di", "ri", "ni", "ci", "ij", "ip", "b", "v", "e", "il", "id", "li", "ii", "n", "ti"], "ans": ["lp", "ss", "then", "nas", "strings", "a", "ents", "lan", "ras", "span", "amps", "eps", "cas", "p", "na", "ps", "ai", "ed", "ats", "ams", "ions", "aning", "en", "anas", "ads", "ANS", "any", "ks", "mean", "aces", "ann", "anse", "anc", "au", "ays", "es", "ands", "params", "can", " means", "A", "ars", "args", "aned", "max", "ids", "aus", "ons", "leans", "sk", "cs", "rans", "ants", "ns", "os", "len", "plan", "ds", "sam", "an", "ad", "ins"], "length": ["lp", "Length", "layer", "full", "loc", "a", "L", "line", "elt", "span", "tail", "al", "p", "distance", "width", "o", "number", "case", "sl", "h", "log", "el", "section", "ml", "lr", "lv", "size", "long", "lc", "kl", "array", "url", "partial", "l", "th", "d", "ll", "meaning", "job", "angle", "position", "ln", "short", "rl", "sequence", "depth", "null", "shape", "duration", "wl", "type", "len", "string", "padding", "path", "hl", "count", "le", "seq", "id", "ength", "li", "se", "e", "range", "n"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\nsys.setrecursionlimit(10 ** 9)\\nMOD = 10 ** 9 + 7\\n\\nfrom fractions import gcd\\n\\nA, B = map(int, input().split())\\n\\nprint (A * B // gcd(A, B))", "target": "209", "substitutes": {"input": ["error", "raw", "magic", "unit", " output", "int", "python", "reader", "request", "PUT", "method", "enter", "host", "insert", "format", " inputs", "instance", "client", "inf", "conf", "config", "array", "version", "exec", "accept", "buffer", "out", " Input", "eval", "pull", "option", "output", "entry", "data", "Input", "util", "help", "select", "echo", "keep", "submit", "source", "param", "ref"], "MOD": [" N", "error", " output", "default", "append", "format", " mod", "beta", "C", " C", "array", "I", "buffer", "MAX", "function", "option", "output", "data", "Input", "bin", "R", "alpha", "debug", "mod", "callback", "base", "step", "exit"], "A": ["F", "E", "Ca", "a", "L", "V", "H", "X", "MA", "Y", "AP", "IA", "Adam", "LA", "AR", "EA", "Bar", "This", "AM", "O", "AB", "P", "C", "T", "D", "AU", "AAA", "AC", "API", "As", "AA", "Alpha", "S", "W", "AH", "I", "CA", "U", "AY", "AF", "M", "N", "G", "Am", "HA", "NA", "RA", "Java"], "B": ["F", "E", "L", "LB", "V", "Q", "X", "Y", "UB", "PB", "Bar", "IB", "Bi", "DB", "BA", "AB", "O", "P", "T", "C", "D", "SB", "BB", "BI", "S", "BD", "W", "TB", "I", "BE", "BL", "OB", "WB", "Beta", "U", "R", "GB", "M", "b", "N", "QB", "VB", "G", "BER", "BS", "Bs"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 5 + 10)\\ndef input(): return sys.stdin.readline().strip()\\n\\ndef resolve():\\n    \\n    class UnionFind(object):\\n        def __init__(self, n=1):\\n            # \u6728\u306e\u89aa\u8981\u7d20\u3092\u7ba1\u7406\u3059\u308b\u30ea\u30b9\u30c8par\u3092\u3064\u304f\u308a\u307e\u3059\u3002\\n            # par[x] == x\u306e\u5834\u5408\u306b\u306f\u3001\u305d\u306e\u30ce\u30fc\u30c9\u304c\u6839\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\\n            # \u521d\u671f\u72b6\u614b\u3067\u306f\u4e00\u5207\u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3059\u3079\u3066\u306e\u30ce\u30fc\u30c9\u304c\u6839\u306b\u306a\u308a\u307e\u3059\u306d\u3002\\n            self.par = [i for i in range(n)]\\n            # \u6728\u306e\u9ad8\u3055\u3092\u6301\u3063\u3066\u304a\u304d\u3001\u3042\u3068\u3067\u4f4e\u3044\u65b9\u3092\u9ad8\u3044\u65b9\u306b\u3064\u306a\u3052\u308b\u3002\u521d\u671f\u72b6\u614b\u306f0\\n            self.rank = [0 for _ in range(n)]\\n            self.size = [1 for _ in range(n)]\\n    \\n        def find(self, x):\\n            \"\"\"\\n            x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u63a2\u7d22\uff1a\\n            \u3042\u308b\uff12\u3064\u306e\u8981\u7d20\u304c\u5c5e\u3059\u308b\u6728\u306e\u6839\u304c\u540c\u3058\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308c\u3070\u3088\u3044\u3002\\n            \u3064\u307e\u308a\u3001\u89aa\u306e\u89aa\u306e\u89aa\u306e\u30fb\u30fb\u30fb\u3068\u6839\u306b\u305f\u3069\u308a\u7740\u304f\u307e\u3067\u8d70\u67fb\u3059\u308c\u3070\u3088\u3044\u3002\\n            \u518d\u5e30\u3002\\n            \"\"\"\\n            # \u6839\u306a\u3089\u305d\u306e\u756a\u53f7\u3092\u8fd4\u3059\\n            if self.par[x] == x:\\n                return x\\n            # \u6839\u3067\u306a\u3044\u306a\u3089\u3001\u89aa\u306e\u8981\u7d20\u3067\u518d\u691c\u7d22\\n            else:\\n                # \u4e00\u5ea6\u898b\u305f\u5024\u306b\u3064\u3044\u3066\u306f\u6839\u306b\u76f4\u63a5\u7e4b\u3044\u3067\u7d4c\u8def\u5727\u7e2e\\n                # \u89aa\u3092\u66f8\u304d\u63db\u3048\u308b\u3068\u3044\u3046\u3053\u3068\\n                self.par[x] = self.find(self.par[x])\\n                return self.par[x]\\n    \\n        def union(self, x, y):\\n            \"\"\"\\n            x \u3068 y \u306e\u30b0\u30eb\u30fc\u30d7\u3092\u7d50\u5408\\n            \"\"\"\\n            # \u6839\u3092\u63a2\u3059\\n            x = self.find(x)\\n            y = self.find(y)\\n            # \u5c0f\u3055\u3044\u6728\u306b\u7d50\u5408\u3057\u3066\u7d4c\u8def\u5727\u7e2e\\n            if x != y:\\n                if self.rank[x] < self.rank[y]:\\n                    x, y = y, x\\n                # \u540c\u3058\u9577\u3055\u306e\u5834\u5408rank\u304c1\u5897\u3048\u308b\\n                if self.rank[x] == self.rank[y]:\\n                    self.rank[x] += 1\\n                # \u4f4e\u3044\u65b9\u306e\u6728\u306e\u6839\u3092\u9ad8\u3044\u65b9\u306e\u6839\u3068\u3059\u308b\\n                self.par[y] = x\\n                self.size[x] += self.size[y]\\n    \\n        def is_same(self, x, y):\\n            \"\"\"\\n            x \u3068 y \u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304b\u5426\u304b\\n            \"\"\"\\n            return self.find(x) == self.find(y)\\n    \\n        def get_size(self, x):\\n            \"\"\"\\n            x \u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u6570\\n            \"\"\"\\n            x = self.find(x)\\n            return self.size[x]\\n    \\n    N,M,K=map(int,input().split())\\n    uf = UnionFind(N)  # \u30ce\u30fc\u30c9\u6570N\u3067\u30af\u30e9\u30b9\u7d99\u627f\\n    friends_cnt=[0]*N\\n    for i in range(M):\\n        # A,B\u306f\u30ce\u30fc\u30c9\\n        A, B = map(int, input().split())\\n        A-=1\\n        B-=1\\n        friends_cnt[A]+=1\\n        friends_cnt[B]+=1\\n    \\n        # \u9023\u7d50\u30af\u30a8\u30ea union\\n        uf.union(A, B)\\n    \\n    blocks=[[] * N for i in range(N)]\\n    for i in range(K):\\n        x, y = map(int, input().split())\\n        x, y = x - 1, y - 1\\n        blocks[x].append(y)\\n        blocks[y].append(x) # \u6709\u5411\u306a\u3089\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\\n    \\n    for i in range(N):\\n        ans=uf.get_size(i)-friends_cnt[i]-1\\n        for j in blocks[i]:\\n            if uf.is_same(i,j):\\n                ans-=1\\n        print(ans,end=' ')\\n    print()\\n\\n    \\n    \\n\\n    \\n\\nresolve()", "target": "368", "substitutes": {"self": ["k", "Self", "p", "worker", "_", "g", "host", "c", "o", "r", "h", "instance", "this", "x", "w", "node", "obj", "q", "f", "object", "resp", "func", "v", "e"], "n": ["k", "p", "g", "c", "i", "o", "r", "nc", "num", "ne", "nu", "z", "fn", "index", "node", "w", "l", "u", "d", "j", "f", "m", "ns", "b", "t", "N", "count", "nb"]}}
{"code": "import sys\\n\\n\\ndef input():\\n    return sys.stdin.readline().strip()\\n\\n\\nsys.setrecursionlimit(20000000)\\n\\n\\ndef main():\\n    N, M = map(int, input().split())\\n    S = []\\n\\n    d = [[float(\"inf\")] * N for _ in range(N)]\\n    L = []\\n    for i in range(M):\\n        a, b, c = map(int, input().split())\\n        d[a - 1][b - 1] = c\\n        d[b - 1][a - 1] = c\\n        if a < b:\\n            L.append((a - 1, b - 1))\\n        else:\\n            L.append((b - 1, a - 1))\\n    for i in range(N):\\n        d[i][i] = 0\\n    L = set(L)\\n\\n    def warshall_floyd(d):\\n        # d[i][j]: i\u304b\u3089j\u3078\u306e\u6700\u77ed\u8ddd\u96e2\\n        for k in range(N):\\n            for i in range(N):\\n                for j in range(N):\\n                    if d[i][j] > d[i][k] + d[k][j]:\\n                        d[i][j] = d[i][k] + d[k][j]\\n                        if i < j:\\n                            if (i, j) in L:\\n                                S.append((i, j))\\n                        else:\\n                            if (j, i) in L:\\n                                S.append((j, i))\\n        return d\\n\\n    warshall_floyd(d)\\n    print(len(set(S)))\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "755", "substitutes": {"N": ["F", "E", "V", "H", "Q", "X", "Y", "Size", "NS", "NE", "K", "Na", "NM", "CNN", "O", "P", "B", "C", "T", "D", "Len", "Ne", "A", "W", "I", "No", "NT", "Z", "Ns", "U", "R", "J", "G", " n", "n"], "M": ["F", "MN", "E", "V", "H", "Q", "X", "Y", "MI", "Num", "K", "NM", "O", "P", "B", "C", "T", "D", "LM", "MD", "W", "I", "MB", "Z", "m", "MC", "R", "Mi", "J", "MU", "G", "Mo", "n"], "S": ["F", "ss", "s", "E", "V", "H", "p", "SE", "SI", "O", "P", "B", "T", "C", "D", "array", "A", "SL", "W", "Sl", "I", "SS", "Z", "R", "string", "G"], "d": ["s", "k", "dd", "dy", "dh", "p", "fd", "nd", "g", "dat", "y", "dict", "r", "o", "sd", "dB", "ded", "D", "z", " dd", "da", "x", "w", "l", "Ds", "u", "Do", "xd", " sd", "f", "dt", "dl", "bd", "m", "j", "dc", "cd", "data", "db", "v", "ld", "t", "e", "pd", "ds", " D", " do", "ad", "n"], "_": ["of", "inf", "x", "I", "f", "m", "len", "all", "n"], "L": ["F", "s", "E", "V", "IL", "LT", "NL", "ML", "Q", "X", "dL", "LP", "Lu", "O", "P", "B", "T", "LM", "D", "C", "PL", "Bl", "A", "W", "SL", "Sl", "I", "l", "Li", "LR", "EL", "Z", "BL", "Lo", "CL", "U", "R", "List", "LI", "DL", "G", "LL", " l", "VL", "UL"], "i": ["k", "ie", "int", "ei", "qi", "p", "ai", "isin", "o", "r", "y", "ini", "h", "iu", "ti", "z", "si", "index", "x", "ind", "I", "it", "l", "u", "pi", "q", "f", "io", "j", "m", "xi", "di", "ci", "ip", "alpha", "v", "e", "id", "li", "ii", "n"], "a": ["aa", "int", "ma", "p", "ai", "aw", "fa", "o", "r", "y", "la", "ba", "ab", "z", "au", "da", "x", "A", "af", "w", "ia", "ak", "l", "u", "aaa", "f", "ca", "sa", "ac", "ga", "m", "am", "aj", "ae", "ci", "alpha", "e", "bc", "abc", "an", "ad", "n"], "b": ["aa", "s", "k", "p", "bs", "g", "y", "r", "o", "h", "wb", "mb", "B", "ba", "ab", "x", "A", "w", "sb", "cb", "bt", "l", "bb", "rb", "u", "bf", "abb", "aba", "f", "j", "ca", "ac", "m", "eb", "bd", "xb", "db", "v", "base", "e", "bc", "nb", "lb", "bi", "ad", "n"], "c": ["aa", "k", "s", "p", "g", "y", "r", "o", "h", "B", "C", "lc", "ab", "z", "ce", "x", "cy", "cu", "w", "cb", "l", "u", "cn", "ca", "f", "cs", "ac", "m", "cat", "dc", "ci", "v", "cf", "e", "cc", "ad", "n"]}}
{"code": "n,k=map(int,input().split())\\na=list(map(int,input().split()))\\nn=[0]*200000\\nx=[]\\nfor i in a:\\n    n[i-1]+=1\\nfor i in n:\\n    if i!=0:\\n        x+=[i]\\ny=len(x)\\nz=y-k\\nif z<=0:\\n    print(0)\\nelse:\\n    x.sort()\\n    print(sum(x[:z]))", "target": "257", "substitutes": {"n": [" N", "p", "na", "g", "c", "o", "nc", "r", "num", "en", "ne", "on", "nan", "w", "ny", "l", "u", "d", "nt", "nn", "f", "j", "m", "ns", "ni", "v", "b", "np", "e", "N", "t", "nb", "an"], "k": ["km", "s", "ke", "p", "g", "c", "K", "o", "r", "num", "h", "ks", "ch", "w", "ko", "ak", "l", "ok", "u", "max", "q", "j", "sk", "f", "ky", "m", "alpha", "v", "key", "b", "e", "t", "ik"], "a": ["aa", "s", "va", "span", "ans", "p", "na", "ai", "c", "fa", "o", "ba", "array", "da", "A", "ar", "af", "ka", "ak", "ata", "ta", "f", "ca", "sa", "ac", "ga", "m", "am", "ae", "alpha", "b", "e", "t", "an", "ad"], "x": ["int", "X", "p", "na", "xs", "c", "plus", "xx", "o", "h", "ix", "rx", "size", "array", "on", "ex", "index", "w", "cross", "l", "u", "d", "q", "f", "j", "ax", "m", "xi", "data", "v", "b", "e", "t", "xy"], "i": ["ji", "ei", "int", "qi", "p", "phi", "ai", "g", "c", "h", "r", "o", "axis", "iq", "iu", "ti", "si", "index", "yi", "ind", "w", "I", "it", "l", "u", "pi", "d", "q", "j", "f", "io", "m", "xi", "di", "ni", "ci", "v", "b", "e", "t", "id", "li", "ii", "ip"], "y": ["dy", "int", "p", "Y", "c", "h", "o", "ym", "zy", "yi", "cy", "w", "ny", "l", "d", "q", "j", "f", "ky", "sy", "m", "yy", "oy", "v", "b", "t", "e", "py", "vy"], "z": ["iz", "ze", "p", "tz", "c", "zone", "h", "cz", "size", "zo", "zy", "zh", "index", "yi", "w", "ind", "zn", "l", "u", "d", "q", "nz", "j", "Z", "f", "zz", "m", "zen", "xi", "v", "zip", "b", "e", "t", "zi", "ii", "gz"]}}
{"code": "C=list(map(int,input().split()))\\nC=set(C)\\nprint(len(C))", "target": "32", "substitutes": {"C": ["F", "CT", "E", "L", "Cs", "CI", "V", "H", "Q", "X", "CU", "Y", "c", "Copy", "K", " c", "O", "P", "T", "B", "D", "AC", "EC", "Cache", "S", "W", "CM", "CF", "I", "CD", "CO", "CL", "MC", "U", "R", "Input", "JC", "M", "CC", "N", "G", "Count"]}}
{"code": "def solve():\\n    ret = 1\\n    cur_num = X\\n    while cur_num * 2 <= Y:\\n        cur_num *= 2\\n        ret += 1\\n    print(ret)\\n\\nif __name__ == \"__main__\":\\n    X, Y = map(int, input().split())\\n    solve()", "target": "631", "substitutes": {"ret": ["CT", "alt", "const", "int", " Ret", "arg", "ft", "let", "RT", "success", "opt", "mem", "num", "result", "re", "Len", "reg", "rev", "att", "xt", "fit", "x", "rets", " RET", "obj", "nt", "out", "cat", "fun", "Return", "flag", "ref", "match", "Ct", "len", "red", "count", "det", "py", "id", "val", "bit", "part", "RET", "Ret", "res"], "cur_num": ["cur__off", " cur_dim", "cur__sum", " cur_off", " cur_index", "curjloc", "curjnum", "cur_index", "cur_n", "cur__dim", "cur_dim", " cur_sum", " cur_loc", "cur_loc", "cur_sum", "cur__index", "cur__num", "cur__n", "curjdim", " cur_n", "cur_off", "curjsum"], "X": ["F", "L", "V", "H", "Q", "XX", "XP", "K", "P", "T", "C", "B", "D", "x", "S", "A", "W", "XXX", "I", "TX", "Z", "MAX", "U", "R", "M", "J", "N", "G"], "Y": ["F", "YY", "E", "L", "V", "Q", "MI", "y", " y", "O", "YA", "P", "T", "B", "C", "D", "IP", "S", "W", "NY", "SIZE", "I", "TY", "MY", "Z", "XY", "Py", "U", "GB", "M", "J", "N", "G", "CH"]}}
{"code": "N = int(input())\\ns = []\\nfor i in range(N):\\n  tmp = list(input())\\n  tmp.sort()\\n  s.append(\"\".join(tmp))\\n\\ns.sort()\\nm = {}\\nfor i in range(len(s)):\\n  if s[i] in m.keys():\\n    m[s[i]] += 1\\n  else:\\n    m[s[i]] = 1\\n\\nv = [int(x * (x-1) / 2) for x in list(m.values())]\\nprint(sum(v))\\n", "target": "84", "substitutes": {"N": ["F", "L", "NO", "V", "H", "Q", "X", "Sn", "Y", "NS", "NE", "K", "O", "P", "T", "C", "B", "D", "Len", "Ne", "S", "W", "I", "No", "Ni", "Z", "Ns", "R", "M", "J", "SN", " n", "NA", "n"], "s": ["ss", "k", "sh", "strings", "a", "p", "ps", "ms", "g", "c", "xs", "sets", "o", "sl", "r", "y", "h", "temp", "fs", "z", "si", "es", "S", "sb", "args", "l", "ses", "d", "u", "items", "f", "j", "copy", "sm", "ns", "small", "os", "ts", "b", "gs", "t", "ls", "e", "keys", "hm", "ds", "n"], "i": ["gi", "ji", "k", "ui", "a", "ie", "int", "qi", "p", "ai", "c", "o", "y", "ix", "iu", "z", "si", "eni", "index", "yi", "ind", "uli", "I", "uri", "l", "u", "pi", "d", "io", "j", "f", "iii", "xi", "ri", "di", "ni", "ip", "ci", "e", "t", "info", "multi", "li", "ii", "n", "bi", "ti"], "tmp": ["sh", "p", "xs", "c", "tp", "cp", "buf", "txt", "emp", "sp", "temp", "mp", "array", "st", "now", "sb", "so", "stack", "flat", "obj", "rb", "ses", "sup", "j", "sort", "copy", "Temp", "small", "ns", "su", "data", "list", "stuff", "vt", "b", "np", "t", "nb", "tc", "n"], "m": ["mr", "mos", "tm", "p", "ms", "g", "c", "sym", "y", "sl", "o", "r", "pm", "ym", "im", "h", "md", "mp", "z", "models", "fm", "mol", "dm", "mu", "w", "cm", "l", "u", "d", "f", "j", "sm", "bm", "data", "M", "b", "t", "e", "mm", "gm", "hm", "sum", "n"], "v": ["k", "vi", "ve", "value", "V", "vals", "p", "g", "c", "vd", "y", "r", "values", "lv", "vs", "z", "vp", "inv", "w", "l", "u", "d", "conv", "q", "f", "j", "iv", "vt", "b", "t", "val", "sv", "sum", "n"], "x": ["dx", "k", "int", "X", "p", "exp", "xs", "c", "xx", "y", "h", "rx", "ix", "px", "num", "z", "xt", "ex", "index", "xxx", " xx", "w", "cross", "l", "u", "d", "f", "j", "ax", "xi", "xp", "t", "e", "xy", "id", "xc", "val", "xa", "n"]}}
{"code": "from bisect import *\\nn = int(input())\\na = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\nc = list(map(int,input().split()))\\n\\na.sort()\\nc.sort()\\nres = 0\\nfor i in b:\\n    temp_a = bisect_left(a, i)\\n    temp_c = n - bisect_right(c, i)\\n    res += temp_a*temp_c\\nprint(res)", "target": "37", "substitutes": {"n": ["s", "k", "p", "g", "o", "number", "nc", "h", "size", "ne", "nu", "z", "fn", "x", "sn", "adj", "l", "d", "nn", "f", "network", "j", "m", "ns", "nr", "v", "np", "len", "e", "N", "nb", "an"], "a": ["aa", "va", "at", "p", "ai", "aw", "ama", "api", "la", "ba", "ab", "au", "array", "da", "ar", "A", "af", "w", "ak", "l", "u", "aaa", "f", "ca", "sa", "asa", "ac", "area", "am", "ae", "alpha", "e", "an", "ad"], "b": ["aa", "be", "ib", "p", "bs", "ai", "g", "bound", "fa", "y", "o", "app", "ba", "B", "ab", "w", "sb", "cb", "l", "bh", "bb", "d", "rb", "f", "ca", "eb", "ac", "m", "ci", "db", "gb", "base", "e", "bc", "nb", "bi", "ad"], "c": ["s", "p", "g", "arc", "y", "ec", "nc", "C", "lc", "ab", "z", "ch", "ce", "can", "x", "cy", "cu", "cb", "con", "cm", "l", "u", "d", "q", "ca", "f", "cs", "ac", "cat", "m", "cin", "dc", "ci", "ct", "v", "cf", "e", "cr", "bc", "col", "pc"], "res": ["rh", "rest", "mr", "rus", "ras", "rex", "vals", "p", "ps", "ms", "err", " Res", "Results", "rate", "r", "results", "result", "pres", "re", "gr", "cum", "rez", "rev", "rand", "es", "Res", "req", "max", "ons", "resolution", "out", "sol", "RES", "range", "rc", "cs", "details", "resh", "resp", "breaks", "rates", "data", "os", "rem", "ress", "powers", "base", "complex", "reset", "ret", "rs", "sum", "ES"], "i": ["gi", "k", "ei", "int", "ib", "ins", "qi", "p", "ic", "ai", " I", "isin", " iP", "ini", "ix", "iu", "z", "si", "index", "x", "ind", "I", "it", "l", "u", "d", "pi", "j", "iii", "rc", "f", "ac", "m", "ci", "ij", "v", "e", "iw", "col", "id", "li", "ii", "inner", "bi", "abi", "ip"], "temp_a": ["tempJa", " temp_af", "tempJb", " temp_b", "temp_b", " temp_A", "temp_an", "tempJan", "tempJaf", "temp_A", "temp_af", " temp_an"], "temp_c": ["temp2c", "temppyC", "fake_C", "fake_a", "temp2b", "temppyc", "temp2i", "temp_ch", " temp_b", "fake_ch", "temp_i", "fake_c", "temp_C", "temp_b", "temppya", "temp2a", "temppych", " temp_i"]}}
{"code": "a,b,c = map(int,input().split())\\nif b >= c:\\n    print(c+b)\\nelif b < c and c <= a + b:\\n    print(b+c)\\nelif a+b < c:\\n    print(b + b + a + 1)\\n", "target": "176", "substitutes": {"a": ["aa", "k", "p", "ai", "g", "aw", "i", "fa", "y", "r", "o", "h", "ba", "ab", "au", "z", "da", "x", "A", "ar", "af", "w", "ak", "l", "bb", "d", "u", "aaa", "f", "sa", "ca", "asa", "ac", "j", "area", "am", "aj", "ae", "alpha", "v", "cf", "e", "an", "ad", "n"], "b": ["aa", "be", "k", "ib", "fb", "p", "bs", "g", "i", "fa", "y", "h", "r", "o", "wb", "B", "ba", "ab", "z", "x", "cy", "A", "w", "sb", "cb", "l", "bb", "d", "rb", "u", "bf", "abb", "f", "eb", "ca", "bd", "m", "ac", "j", "ae", "db", "ci", "v", "base", "e", "bc", "t", "nb", "bi", "ad", "n"], "c": ["s", "k", "cur", "end", "sc", "p", "g", "i", "y", "h", "ec", "r", "cp", "C", "lc", "ab", "uc", "z", "fc", "ch", "ce", "x", "unc", "cy", "cu", "w", "cb", "con", "l", "u", "d", "cn", "f", "ca", "cs", "m", "ac", "dc", "cd", "ci", "ct", "v", "cf", "e", "cr", "cc", "xc", "ad", "n"]}}
{"code": "s=[]\\np=[]\\ns=input()\\ns+=s\\np=input()\\n\\nif (p in s)==True:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")\\n\\n", "target": "661", "substitutes": {"s": ["ss", "a", "south", "ins", "ed", "ans", "ps", "g", "c", "xs", "i", "ing", "o", "r", "tp", "y", "P", "sign", "sp", "z", "es", "x", "S", "w", "args", "l", "lines", "u", "ses", "d", "ish", "f", "sa", "cs", "m", "self", "ns", "single", "os", "ts", "b", "v", "string", "space", "t", "e", "ls", "ips", "ds", "ops", "se", "n"], "p": ["lp", "op", "a", "wp", "ps", "bp", "g", "c", "i", "pre", "o", "y", "tp", "h", "cp", "ap", "P", "sp", "z", "vp", "x", "pa", "w", "l", "u", "d", "pi", "q", "j", "jp", "f", "m", "pp", "ep", "ip", "v", "b", "np", "t", "pc", "n"]}}
{"code": "n = int(input())\\ns = [int(input()) for _ in range(n)]\\ns.sort(reverse=True)\\nsm = sum(s)\\nans = 0\\nwhile (sm - ans)%10==0 and s:\\n    now = s.pop()\\n    ans += now\\n    if(sm - now)%10!=0:\\n        ans = now\\n        break\\n\\nprint(sm - ans)\\n\\n", "target": "741", "substitutes": {"n": ["min", "k", "p", "g", "c", "i", "o", "y", "nc", "num", "en", "number", "r", "names", "nu", "z", "x", "nan", "w", "ny", "l", "d", "nn", "nt", "m", "Ns", "ns", "len", "b", "np", "t", "N", "nb", "an"], "s": ["ss", "new", "a", "strings", "south", "ples", "groups", "ins", "p", "ps", "states", "g", "c", "xs", "i", "sym", "sets", "h", "o", "results", "times", "ks", "si", "es", "blocks", "S", "w", "sb", "start", "tests", "l", "services", "u", "d", "ses", "less", "f", "cs", "m", "sync", "ments", "ns", " samples", "small", "ws", "su", "os", "features", "gs", "b", "v", "ings", "e", "ls", "ips", "ds", "ops", "sv", "an", "sum"], "_": ["p", " ip", " seq", " time", " __", "f", "all"], "sm": ["em", "amp", "sq", "auto", "sh", "south", "chi", "non", "na", "ms", "nm", "sym", "sl", "sd", "syn", "sf", "md", "sp", "mean", "ann", "ani", "mini", "si", "sim", "sn", "dm", "sb", "om", "cm", "nn", "ons", "sk", "sa", "m", "nw", "sw", "ism", "ess", "am", "SM", "mm", "hm", "sv", "sam", "Sm", "sum", "sky"], "ans": ["ano", "lan", "nas", "ras", "amps", "eps", "ams", "na", "ms", "ai", "ats", "xs", "aning", "anas", "AN", "aos", "ads", "ANS", "asts", "ks", "any", "mean", "ane", "vs", "ann", "anon", "ani", "names", "ays", "es", " means", "nan", "sn", "ars", "args", "aned", "nn", "ons", "aus", "ens", "leans", "ln", "cs", "sk", "ants", "ns", "scan", "os", "san", "ls", "ds", "rs", "an", "ins"], "now": ["new", "cur", "then", "loc", "auto", "cmp", "south", "NOW", "default", "plus", "low", "ready", " Now", "result", "app", "always", "tmp", "md", "wh", "this", "first", "force", " NOW", "size", "long", "so", "current", "max", "shift", "wait", "once", "found", "small", "old", "self", "age", "Now", "parent", "day", "oa", "stuff", "length", "fast", "key", "today", "aaaa", "off", "mm", "count", "step", "source", "next", "when", "info"]}}
{"code": "import sys\\nX,Y = map(int,input().split())\\nif (X+Y)%3 != 0:\\n    print(0)\\n    sys.exit()\\nA = Y - (X+Y)//3\\nB = X - (X+Y)//3\\nif A<0 or B<0:\\n    print(0)\\n    sys.exit()\\nN = A+B\\ndef cmb(n, r, mod):\\n    inv = [0,1]\\n    for i in range(2, N + 1):\\n        inv.append((-inv[mod % i] * (mod // i)) % mod)\\n    cmd = 1\\n    for i in range(1,min(r,n-r)+1):\\n        cmd = (cmd*(N-i+1)*inv[i])%mod\\n    return cmd\\n    \\na = cmb(N,A,10**9+7)\\nprint(a)", "target": "759", "substitutes": {"X": ["F", "ID", "E", "L", "V", "XM", "Max", "H", "DX", "Q", "XX", "Check", "XP", "EX", "K", "ZX", "O", "P", "Int", "C", "T", "D", "IP", "WH", "x", "PE", "S", "W", "XXX", "IX", "I", "Right", "TX", "Z", "Unix", "ANY", "XY", "PH", "U", "R", "Time", "UX", "M", "XL", "Xi", "G", "Index", "Ex"], "Y": ["F", "PI", "YY", "E", "L", "V", "H", "Python", "Q", "AP", "IA", "YC", "y", "O", "YA", "P", "C", "T", "D", "Cy", "API", "Year", "YR", "S", "cy", "W", "NY", "OD", "EY", "I", "TY", "SY", "YD", "MY", "Z", "YE", "XY", "Py", "U", "AY", "R", "J", "M", "RY", "CH", "HY"], "A": ["AD", "GA", "E", "Ca", "Az", "AP", "IA", "c", "LA", "AR", "EA", "K", "Na", "AN", "BA", "AH", "AM", "O", "P", "C", "AW", "AC", "AB", "Ar", "SA", "API", "AU", "AA", "D", "Cmd", "S", "w", "I", "Ab", "ac", "CA", "Art", "am", "U", "AF", "AY", "R", "M", "alpha", "Command", "G", "Am", "HA", "NA", "Ac", "An", "Ad"], "B": ["F", "E", "EB", "L", "LB", "V", "H", "Q", "CB", "K", "IB", "DB", "BA", "AB", "O", "P", "C", "T", "D", "SB", "BG", "BI", "S", "W", "I", "MB", "Ab", "BE", "BR", "Z", "WB", "U", "R", "GB", "M", "J", "b", "BM", "NB", "QB", "VB", "G", "BF", " b", "Bs"], "N": ["F", "MN", "E", "NR", "L", "V", "H", "Q", "Size", "NC", "Num", "NE", "c", "K", "NM", "CNN", "O", "P", "C", "T", "D", "Ne", "x", "S", "W", "I", "Rh", "RN", "NT", "d", "max", "NG", "Ni", "Z", "Ns", "R", "M", "J", "NB", "CN", "G"], "n": ["min", "k", "p", "c", "y", "nc", "num", "h", "o", "rn", "nu", "x", "w", "l", "u", "d", "nt", "f", "ln", "m", "ns", "R", "nr", "b", "v", "e", "nb"], "r": ["rh", "k", "rm", "p", "c", "rw", "h", "rx", "rd", "rf", "rn", "z", "x", "w", "l", "u", "d", "rb", "ra", "j", "f", "sr", "range", "m", "rc", "ir", "R", "nr", "b", "v", "e", "ru", "rs"], "mod": ["min", "mode", "common", "spec", "dig", "com", "dom", "MOD", "dir", "p", "poly", "rar", "init", "c", "command", "mult", "post", "o", "rec", "num", "im", "orig", "log", "tr", "lex", "md", "rib", "cum", "ver", "ord", "reg", "amd", " Mod", "div", "run", "od", "comp", "module", "ind", "inc", "w", "node", "grad", "user", "pack", "req", "d", "tri", "max", "root", "row", "mag", "sec", "j", "comm", "m", "dr", "comb", "option", "rank", "no", "ip", "rem", "mods", "dev", "mac", "order", "id", "form", "rad", "Mod"], "inv": ["min", "Inv", "align", "rup", "init", "nav", "img", "err", "extra", "adv", "im", "orig", "pos", "log", "iq", "rn", "sign", "vs", "temp", "nu", "ng", "rev", "array", "index", "blocks", "av", "mu", "inc", "w", "adj", "inventory", "u", "tri", "mag", "conv", "q", "root", "eq", "ln", "comm", "fun", "ns", "aux", "ip", "bin", "alpha", "nr", "v", "dev", " Inv", "order", "ru", "ev", "sum", "block"], "i": ["gi", "min", "s", "k", "ui", "ei", "ie", "int", "qi", "p", "phi", "ai", "g", "c", "oi", "o", "h", "ini", "y", "iu", "z", "si", "index", "x", "yi", "module", "ind", "w", "I", "l", "fi", "u", "pi", "d", "q", "io", "j", "f", "m", " j", "xi", "di", "ri", "ip", "ci", "nr", "v", "b", "e", "zi", "id", "li", "ii", "bi", "ti"], "cmd": ["mode", "call", "ctrl", "code", "com", "msg", "arg", "acc", "init", "nd", "g", "c", "command", "opt", "rec", "num", "adv", "cp", "orig", "cfg", "un", "md", "head", "log", "Cmd", "ord", "C", "MD", "x", "module", "cy", "ind", "grad", "conn", "cm", "req", "d", "u", "nt", "max", "ll", "j", "comm", "m", "ac", "cd", "output", "input", "ct", "string", "cf", "cc", "byte", "id", "qq", "cl", "ctr", "ad"], "a": ["s", "aa", "code", "p", "na", "access", "c", "command", "aw", "md", "la", "ba", "div", "z", "ana", "da", "valid", "ata", "l", "aaa", "f", "sa", "ac", "ga", "ax", "ca", "aux", "aj", "breaks", "am", "ae", "alpha", "b", "ea", "e", "count", "an", "ad"]}}
{"code": "from collections import Counter\\nn,k=list(map(int,input().split()))\\na=list(map(int,input().split()))\\ncou=Counter(a).most_common()\\nrem=len(cou)-k\\ni=-1\\nans=0\\nwhile rem>0:\\n    ans+=cou[i][1]\\n    i-=1\\n    rem-=1;\\nprint(ans)", "target": "257", "substitutes": {"n": [" N", " it", "ner", "p", " number", "c", "Num", " r", " ni", "r", " c", "Counter", "C", " fn", " self", "b", "N", "er", "nb"], "k": ["km", "ack", "end", "ke", "p", "_", "c", "K", "o", "y", "r", "num", "kk", "iq", "ks", "C", "kn", "x", "w", " K", "u", "d", "unk", "q", "ki", "j", "sk", "f", "m", "pp", "ck", "e", "keep"], "a": ["aa", "ao", "ma", "p", "ai", "c", "y", "ba", "ab", "array", "ana", "art", "x", "A", "ar", "ka", "ia", "args", "l", "ca", "f", "sa", "ac", "ga", "m", "area", "am", "ae", "alpha", "b", "e", "an", "ad"], "cou": ["Cose", "Couch", " couri", " cose", "ciose", "kau", "Cau", "ciouri", "Couf", "ccou", "Cou", "kouf", "Couri", "couf", "cose", " cau", "cau", "couch", " couf", " coun", "kou", "koun", "Coun", "kouch", "ccau", "couri", "ccoun", "ccouch", " couch", "cioun", "coun", "ciou"], "rem": ["em", "prem", "min", "when", "end", "REM", "rest", "mn", "arm", "pop", "span", "rm", "p", "pri", "ore", "mem", "r", "rec", "Rem", "prev", "im", "num", "pres", "pm", "ini", "ix", "re", "reg", "kn", "ani", "dem", "remove", " Rem", "ind", "I", "kept", "cm", "fi", "ki", "j", "jp", "m", "ism", "man", "ri", "no", "nr", "inn", "mod", "keep", "rom", "um", "res", "ori"], "i": ["ji", "ei", "int", "p", "init", "ai", "c", "o", "r", "ini", "iu", "si", "index", "yi", "x", "I", "ia", "it", "l", "u", "pi", "d", "ki", "j", "f", "m", "ori", "di", "ri", "ni", "ci", "ij", "b", "e", "multi", "id", "li", "ii", "anti", "bi"], "ans": ["s", "aid", "ents", "lan", "span", "ras", "nas", "arms", "amps", "eps", "na", "ai", "gan", "aning", "anas", "AN", "ANS", "anes", "ks", "aces", "ann", "anse", "ani", "anc", "ana", "es", "ania", "ands", " means", "ars", "ia", "anus", "aned", "ons", "aus", "works", "ens", "sk", "cs", "leans", "anne", "ants", "ns", "ism", "os", "acts", "ian", "ls", "cons", "ians", "ds", "icks", "rs", "an", "res", "ins"]}}
{"code": "def ext_euclid(a, b):\\n    # return (x, y, gcd(a, b)) such that a * x + b * y = gcd(a, b)\\n    if b == 0:\\n        return 1, 0, a\\n    y, x, v = ext_euclid(b, a % b)\\n    y -= (a // b) * x\\n    return x, y, v\\n\\n\\ndef mod_inv(a, mod):\\n    x, _, _ = ext_euclid(a, mod)\\n    return x % mod\\n\\n\\ndef comb_list_1(H, W, A, B, mod, modinv_list):\\n    # (h+B-1)_C_(B-1)  (h in {0, ..., H-A-1})\\n    ret = [0 for _ in range(H - A)]\\n    c = 1\\n    for h in range(H - A):\\n        ret[h] = c\\n        c *= h + B\\n        c *= modinv_list[h + 1]\\n        c %= mod\\n    return ret\\n\\n\\ndef comb_list_2(H, W, A, B, mod, modinv_list):\\n    # (-h+H+W-B-2)_C_(W-B-1)  (h in {0, ..., H-A-1})\\n    ret = [0 for _ in range(H - A)]\\n    # initial value -> (A+W-B-1)_C_(W-B-1)  (h = H-A-1)\\n    c = 1\\n    for a in range(1, A + 1):\\n        c *= (a + W - B - 1)\\n        c *= modinv_list[a]\\n        c %= mod\\n    # fill elements of result list from the back\\n    for h in range(H - A - 1, -1, -1):\\n        ret[h] = c\\n        c *= H - h + W - B - 1\\n        c *= modinv_list[H - h]\\n        c %= mod\\n    return ret\\n\\n\\ndef main():\\n    MOD = 10 ** 9 + 7\\n    H, W, A, B = list(map(int, input().split(' ')))\\n    modinv_list = [None] + [mod_inv(h, MOD) for h in range(1, H + 1)]  # modinv doesn't exist on h = 0\\n    combs_1 = comb_list_1(H, W, A, B, MOD, modinv_list)\\n    combs_2 = comb_list_2(H, W, A, B, MOD, modinv_list)\\n    ans = 0\\n    for c1, c2 in zip(combs_1, combs_2):\\n        ans += c1 * c2\\n        ans %= MOD\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "567", "substitutes": {"a": ["aa", "p", "access", "ama", "c", "cca", "da", "x", "A", "aaa", "ca", "f", "sa", "ac", "ga", "area", "aux", "parent", "ae", "alpha", "an", "mac", "e", "abc"], "b": ["ib", "fb", "p", "bs", "pb", "c", " B", "y", "emb", "wb", "zb", "B", "ba", "ab", "x", "sb", "bb", "d", "abb", "xb", "bin", "bar", "base", "e", "abc", "nb"]}}
{"code": "from math import pi\\nr=input()\\nprint\"%.8f %.8f\"%(pi*r*r,2*pi*r)", "target": "758", "substitutes": {"r": ["rh", "s", "k", "a", "str", "ur", "p", "arr", "c", "i", "rate", "h", "rx", "radius", "pr", "rf", "lr", "z", "x", "ar", "w", "l", "rb", "d", "u", "pi", "f", "rc", "sr", "m", "range", "function", "rt", "rg", "R", "alpha", "nr", "b", "v", "pair", "e", "t", "fr", "cr", "er", "rs", "n"]}}
{"code": "tms=int(input())\\nstrlist=sorted(list(map(int,input().split())))\\nans=sum(strlist[tms::][::2])\\nprint(ans)", "target": "438", "substitutes": {"tms": ["Tms", " tMS", "tks", " tks", "dtoms", "tns", "ttMS", " tns", "ttns", "dtks", "ttks", "Tcs", "Tns", "dtms", "ttoms", " toms", " tcs", "ttms", "toms", "dtcs", "ttcs", "TMS", "tcs", "tMS"], "strlist": ["iterList", " strList", "iterset", "iterlist", "strfilter", "intlist", "charfilter", "inttype", "itercount", "intset", "charlist", " strcount", "iterfilter", "itertype", " strset", "charbase", " strtype", " strfilter", "strList", "intcount", "strset", " strbase", "iterbase", "charList", "strtype", "strcount", "strbase"], "ans": ["lan", "ras", "cas", "amps", "nas", "atan", "na", "gan", "ats", "aning", "anas", "AN", "ANS", "anes", "ann", "anon", "anc", "ani", "anse", "ana", "can", "nan", " means", "ars", "anus", "aned", "ons", "anan", "aus", "leans", "ants", "ns", "types", "ran", "san", "cons", "ean", "an", "ins"]}}
{"code": "# -*- coding: utf-8 -*-\\n\"\"\"\\nCreated on Sun Apr 29 18:04:22 2018\\nALDS1_3b_r \u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u306b\u3088\u308b\u5b9f\u88c5\\n@author: maezawa\\n\"\"\"\\n\\ndef fifo_enque(data):\\n    global tail\\n    global fifo\\n    fifo[tail] = data\\n    tail = (tail+1)%fifo_size\\n    \\ndef fifo_deque():\\n    global head\\n    global fifo\\n    data = fifo[head]\\n    head = (head+1)%fifo_size\\n    return data\\n\\nfifo_size = 100000\\nfifo = [0 for _ in range(fifo_size)]\\nhead = 0\\ntail = 0\\n\\nn, q = list(map(int, input().split()))\\nfor i in range(n):\\n    s = input().split()\\n    data = [s[0], int(s[1])]\\n    fifo_enque(data)\\n    \\ncurrent_time = 0\\nfinished = []\\nfin_time = []\\n\\nwhile True:\\n    data = fifo_deque()\\n    if data[1] > q:\\n        current_time += q\\n        data[1] -= q\\n        fifo_enque(data)\\n    else:\\n        current_time += data[1]\\n        finished.append(data[0])\\n        fin_time.append(current_time)\\n    if head == tail:\\n        break\\n\\nfor i in range(n):\\n    print(\"{} {}\".format(finished[i], fin_time[i]))\\n        \\n\\n\\n", "target": "745", "substitutes": {}}
{"code": "from collections import defaultdict\\n\\nN = int(input())\\n\\ndef factorize(N):\\n    factors = defaultdict(int)\\n    i = 2\\n    while i * i <= N:\\n        factor = 0\\n        while N % i == 0:\\n            N //= i\\n            factor += 1\\n        if factor > 0:\\n            factors[i] = factor\\n        i += 1\\n    if N > 1:\\n        factors[N] = 1\\n    return factors\\n\\ndef to_cnt(n):\\n    i = 0\\n    while n >= i+1:\\n        n-=(i+1)\\n        i += 1\\n    return i\\n\\nans = 0\\nfor _, n in factorize(N).items():\\n    ans += to_cnt(n)\\nprint(ans)", "target": "454", "substitutes": {"N": ["F", "NF", "NR", "L", "NO", "V", "NN", "H", "X", "Y", "Size", "NC", " number", "Num", "NS", "NE", " I", " network", "K", "number", "Na", "num", "NM", "O", "P", "T", "C", "B", "D", "size", "nu", " C", "Ne", "Inf", "S", "A", "W", "I", "Factor", "fact", "RN", "NT", "NG", "Node", "Ni", "Z", "network", "Ns", "U", "R", "ni", "M", "J", "CN", "G", "NA", " NI", "frequency"], "factors": ["colore", "condores", "colores", "actor", " factore", "condlections", "colors", "condors", "actlections", "colories", "actors", " factions", "Factore", " factories", "factores", "actories", "factions", "actores", " factores", "collections", "color", "condor", "actions", "Factors", "colions", "Factores", "factore", "Factor", "factlections", "factories"], "i": ["gi", "s", "k", "ui", "a", "ei", "int", "ie", "chi", "qi", "mi", "p", "phi", "ai", "init", "c", " I", "y", "r", "o", "ini", "ix", "iu", "iter", "z", "mini", "si", "index", "x", "eni", "ind", "I", "it", "l", "fi", "u", "pi", "d", "uri", "ki", "j", "f", "io", "m", "xi", "ori", "di", "ri", "ni", "ci", "b", "v", "feature", "t", "e", "info", "zi", "multi", "id", "li", "ii", "bi", "abi", "ti"], "factor": ["character", "float", "layer", "digit", "int", "span", "actor", "fd", "power", "init", "xf", "X", "c", "fa", "mult", "number", "num", "result", "iter", "weight", "size", "mini", "div", "fc", "index", "x", "si", "scale", "cost", "final", "version", "I", "fact", "fi", "u", "operator", "nn", "f", "ln", "frac", "multipl", "function", "xi", "length", "dimension", "b", "feature", "complex", "ii", "Factor", "part", "form", "frequency"], "n": ["s", "k", "a", "mn", "p", "na", "g", "c", " ni", "o", "number", "nc", "num", "ini", "net", "en", "CNN", "rn", "nu", "ne", "z", "eni", "fn", "x", "nan", "sn", "l", "u", "cn", "d", "nt", "nn", "Ni", "f", "j", "ln", "network", "m", "Ns", "ns", "ni", "ci", "nr", "b", "np", "ii", "nb", "an"], "ans": [" cores", " ants", "lan", "nas", "ras", "ins", "span", "atan", "na", "ai", "ats", "aning", "Na", "activation", "AN", " na", " pairs", "ANS", "atten", "annels", "ann", "anon", "ani", "anc", "ana", "ania", "can", " means", "nan", "ars", "kin", "anus", "aned", "nn", "ons", "aus", "anan", "anne", "ants", "Ns", "ns", " samples", "ran", "fan", "ians", "plan", "NA", " cases", "an", " nan"], "_": ["name", "k", "span", "actor", "ic", "Num", "g", "Na", "ix", " __", "oc", "ann", "A", "I", "chan", "out", "j", "ac", " self", "all", "id"]}}
{"code": "line = input()\\na, b, c = [int(n) for n in line.split()]\\nk = int(input())\\nnumbers = [a, b, c]\\nnumbers.sort(reverse=True)\\nnumbers[0] *= 2 ** k\\nprint(sum(numbers))\\n", "target": "674", "substitutes": {"line": ["name", "letter", "text", "unit", "ze", "code", "ner", "str", "umber", "number", "ine", "case", "pos", "ne", "lined", "board", "on", "time", "ode", "file", "lines", "l", "row", "Line", "page", "eline", "LINE", "frame", "entry", "no", "list", "nl", "string", "liner", "len", "le", "cell", "word", "parse", "lin", "block"], "a": ["aa", "int", "p", "ama", "i", "o", "y", "la", "ba", "ab", "da", "x", "A", "ar", "w", "l", "u", "d", "f", "sa", "ca", "ac", "m", "asa", "area", "am", "ae", "e", "an", "ad"], "b": ["s", "be", "aa", "fb", "p", "bs", "g", "i", "y", "r", "o", "number", "wb", "B", "ba", "ab", "x", "w", "sb", "cb", "l", "bb", "d", "rb", "f", "bd", "j", "db", "v", "e", "bc", "lb"], "c": ["s", "p", "g", "i", "h", "y", "C", "lc", "z", "x", "cy", "cu", "cb", "con", "l", "u", "d", "cn", "f", "ca", "cs", "m", "ac", "v", "cf", "e", "cr", "count", "cc", "col"], "n": [" N", "name", "p", "nd", "g", "i", "o", "r", "nc", "num", "net", "z", "x", "nan", "sn", "w", "node", "it", "l", "cn", "d", "nt", "nn", "f", "ln", "j", "m", "ns", "no", "v", "t", "N", "e", "all", "nb"], "k": ["s", "p", "g", "i", "K", "y", "r", "number", "kk", "ks", "kn", "z", "x", "mk", "kw", "w", "l", "ok", "u", "d", "unk", "max", "q", "f", "sk", "j", "m", "ku", "key", "v", "e"], "numbers": ["cumbers", "Nums", "monodes", "Nations", "bynums", "nounters", "monations", "continounters", " nounters", "nums", "Numbers", "Nups", "minounters", "counters", "codes", " nodes", "monums", "cations", "bynurers", "continumbers", "minumbers", "nations", "monumbers", "minums", "continodes", "nurers", "minurers", "neumbers", " nups", "neups", "neums", "neounters", "nups", "bynumbers", "bynounters", "neodes", "cums", "continums", "Nodes", "nodes", " nurers", " nums"]}}
{"code": "#S, L, h\\nimport math\\na, b, C = map(int, input().split())\\n\\nS = a*b*math.sin(C*math.pi/180)*(1/2)\\nL = a+b+math.sqrt(a*a+b*b-2*a*b*math.cos(C*math.pi/180))\\nh = 2*S/a\\n\\nprint('%.4f'% S)\\nprint('%.4f'% L)\\nprint('%.4f'% h)", "target": "221", "substitutes": {}}
{"code": "import sys\\ninput = sys.stdin.readline\\ns = input().rstrip()\\nl = len(s)\\nk = int(input())\\nchk = set()\\nfor i in range(26):\\n  for j in range(l):\\n    if s[j] == chr(i+97):\\n      for m in range(min(5,l-j)):\\n        chk.add(s[j:j+1+m])\\n  if len(chk) >= k:\\n    break\\n    \\nchk = sorted(list(chk))\\nprint(chk[k-1])", "target": "246", "substitutes": {"input": ["error", "raw", "call", " output", "text", "int", "str", "table", "reader", "request", "radio", "p", "argument", "init", "host", "process", " inputs", "comment", "inf", "connect", "empty", "temp", "conf", " f", "config", "run", "fn", "expression", " source", "w", "version", "next", "current", "exec", "get", "accept", "out", "f", " Input", "eval", "pull", "query", "output", "data", "Input", "bin", "type", "util", "string", "select", "help", "reset", "multi", "submit", "cl", "filter", "source", "param", "form", "feed", "ins"], "s": ["ss", "strings", "qs", "ins", "p", "states", "ps", "g", "c", "xs", "sym", "sets", "o", "r", " inputs", "speech", "sf", "ows", "si", "es", "obs", "S", "w", "sb", "cells", "tests", "sites", "lines", "ses", "d", "u", "services", "items", "parts", "f", "ssl", "cs", "sections", "ns", "ws", "su", " ls", "abs", "gs", "b", "v", "string", "space", "e", "ls", "t", "ips", "letters", "opens", "ds", "its", "sv", "source", "comments", "n"], "l": ["ol", "L", "p", "c", "o", "sl", "h", "r", "el", "lc", "size", "kl", "z", "u", "d", "ll", "ln", "f", "dl", "list", "nl", "length", "v", "len", "b", "e", "ls", "li", "n"], "k": ["km", "ke", "p", "c", "K", "y", "kk", "ks", "kn", "z", "kl", "ch", "x", "mk", "kw", "ko", "ak", "ok", "u", "d", "q", "sk", "f", "ku", "kt", "kick", "length", "b", "v", "key", "ck", "ik", "n"], "chk": ["echk", "Chf", " chK", "Chok", "csk", "achk", "cheke", "bugkg", "cok", "chsk", "cpok", "Chks", "verks", "chok", " chkg", "Chcheck", "bugke", "chf", "corcheck", "verk", "verok", " chke", " chc", "achck", "bugsk", "echck", " chck", "schk", "casesk", "bugkn", "achc", "chck", "chesk", "chc", " chcheck", "chke", "chkn", "verK", "bugko", "schko", "cpke", "cke", "chek", "corks", "chK", "cheunk", "schsk", "cheok", "achks", "chks", "cork", "caseko", " chks", "Chk", "chko", "casekn", "cpsk", "chcheck", "corf", "cpk", "bugunk", "chekg", "echks", "schkn", "ck", " chunk", "casek", " chok", "chkg", " chf", "ChK", "chunk", "echc", "bugk"], "i": ["ji", "ui", "a", "ie", "p", "ai", "c", "o", "r", "iu", "z", "mini", "si", "index", "x", "ind", "I", "u", "pi", "f", "io", "ri", "ni", "v", "b", "e", "id", "li", "ii", "bi", "n"], "j": ["ji", "end", "ja", "p", "g", "c", "jo", "y", "o", "r", "h", "jj", "left", "jit", "jl", "z", "si", "ch", "index", "x", "ind", "u", "d", "q", "f", " _", "jp", "aj", "ij", "J", "v", "b", " ii", "key", "e", "t", "jon", "li", " jo", "n"], "m": ["mass", "km", "a", " ms", "mn", "ma", "mi", "p", "ms", "g", "c", "y", "h", "o", "r", "ym", "z", "x", "fm", "dm", "mu", " mi", "w", "cm", "u", "d", "mo", "f", " am", "man", "am", "ij", "M", "v", "b", "mod", "e", "mm", "li", "month", "n"]}}
{"code": "# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\\n# import sys\\n# sys.setrecursionlimit(10 ** 6)\\n# import bisect\\n# from collections import deque\\n# from decorator import stop_watch\\n#\\n#\\n# @stop_watch\\ndef solve(S, K):\\n    ans = ''\\n    for i in range(len(S)):\\n        if i + 1 == K:\\n            ans = S[i]\\n            break\\n        if S[i] != '1':\\n            ans = S[i]\\n            break\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    S = input()\\n    K = int(input())\\n    # N, M = map(int, input().split())\\n    # A = [int(i) for i in input().split()]\\n    # B = [int(i) for i in input().split()]\\n    # AB = [[int(i) for i in input().split()] for _ in range(N)]\\n    solve(S, K)\\n\\n    # # test\\n    # from random import randint\\n    # from func import random_str\\n    # solve()\\n", "target": "119", "substitutes": {}}
{"code": "N = [int(_) for _ in input().split()][0]\\nif N>=1000:\\n    print('ABD')\\nelse:\\n    print('ABC')", "target": "636", "substitutes": {"N": ["F", "NR", "L", "Number", "NO", "V", "NL", "X", "NC", "NS", "NI", "K", "NM", "CNN", "O", "P", "T", "C", "B", "D", "NP", "Ne", "S", "I", "NT", "Node", "Ni", "Ns", "ND", "R", "M", "J", "NB", " n", "G", "NA", "NUM", "n"], "_": ["name", " p", "s", "k", "digit", "line", "random", "__", "NN", "NL", "XX", "arg", "X", "p", "Num", " get", " __", "B", "C", " f", "x", "A", "I", "obj", "u", "j", "f", "self", "data", "R", "J", "key", "len", "all", "id", "val", "prefix", " l", "nb", " read", " d"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n \\ndef main():\\n    n = int(readline())\\n    #f(x):=x\u4ee5\u4e0b\u306e\u7d20\u6570\u3092\u5217\u6319\u3059\u308b\u95a2\u6570\\n    #int -> list\\n    def f(x):\\n        if x < 2:\\n            return [] \\n        res = [2]\\n        for i in range(2, x+1):\\n            f = True\\n            for j in res:\\n                if i%j == 0:\\n                    f = False\\n            if f:\\n                res.append(i)\\n        return res\\n    primes = f(n)\\n    numOfPrime = []\\n    for p in primes:\\n        #2^10=1024\u3060\u304b\u308910\u307e\u3067\u3067\u5341\u5206\\n        numOfDiv = 0\\n        for k in range(1, 11):\\n            numOfDiv += n//(p**k)\\n        numOfPrime.append((p, numOfDiv))\\n    P = int(1e9)+7\\n    ans = 1\\n    for i, j in numOfPrime: \\n        ans *= (j+1)\\n        ans %= P\\n    print(ans) \\nif __name__ == '__main__':\\n    main()\\n", "target": "658", "substitutes": {"read": ["new", "raw", " data", "end", "open", "reader", "feed", " write", "win", "stream", "method", "create", " get", "load", "lex", "insert", "en", "Read", " copy", "connect", "iter", "write", "ro", "run", "READ", "each", "build", " stream", " send", "current", "php", "buffer", "readable", "update", " reads", "input", "data", "reads", "bind", "play", "reading", "add", " reader", " Read", "parse", " readers"], "readline": [" ReadLine", "readinglines", "readingLINE", "loadlines", "READline", "loadstring", "loadLine", "readLine", "Readline", "loadline", "Readfile", "READLINE", " Readword", " Readline", "Readlines", "READfile", "readingline", "loadword", "readword", " readword", "readingstring", "readstring", "readingfile", " readstring", " readLINE", "readLINE", "loadLINE", " readLine", "READlines", "readfile", "ReadLINE"], "readlines": ["readinglines", " readlins", "readlins", "readerlines", "readertypes", "readableLINE", " Readtypes", "readableline", "readingtypes", "Readline", "readinginline", "Readlines", " Readlines", "readerinline", " readLINE", "readLINE", "readablelins", "Readlins", " Readinline", "readinline", " Readlined", "readablelines", "readlined", "readtypes", "readerlined", "ReadLINE", "readinglined"], "n": [" N", "name", "s", "p", "g", "c", "i", "o", "number", "r", "num", "write", "ne", "index", "sn", "w", "l", "u", "d", "f", "j", "m", "ns", "b", "e", "N", "t", "count"]}}
{"code": "def ALDS1_3B():\\n    n, q = map(int, input().split())\\n    PQ = [[l[0], int(l[1])] for l in  [input().split() for i in range(n)]  ]\\n    times = 0\\n    while PQ:\\n        p = PQ.pop(0)\\n        if p[1] <= q:\\n            times += p[1]\\n            print('%s %d' %(p[0], times))\\n        else:\\n            times += q\\n            PQ.append([p[0], p[1]-q])\\n\\n\\nif __name__ == '__main__':\\n    ALDS1_3B()", "target": "745", "substitutes": {"n": ["k", "c", "o", "y", "nc", "num", "h", "size", "z", "x", "w", "u", "d", "nt", "nn", "j", "f", "m", "ns", "length", "v", "b", "len", "t", "N", "e", "count", "nb"], "q": ["k", "sq", "qs", "qu", "qi", "Q", "qa", "g", "c", "y", "h", "r", "iq", "z", "time", "quality", "x", "w", "u", "d", "max", "eq", "f", "one", "dq", "m", "query", "depth", "check", "length", "qt", "v", "t", "e", "count", "quant", "id", "qq", "quick"], "PQ": ["NQ", "pP", " pU", "ARPQL", " PMQ", "PILL", "ARPU", "RPMQ", "PMQ", " pq", " PILL", " Pq", "RPq", "pFC", "NP", " PFC", "ARPQ", "pU", "RPQ", "PP", " PP", "pQ", " PQL", "pILL", "NQL", " PU", " pQ", " pFC", "pMQ", "NU", "PFC", "PU", "PQL", " pP", "ARPP", "RPP", " pILL", "pq", "Pq"], "l": ["s", "k", "loc", "L", " L", "c", "o", "sl", "pos", "el", "la", "lc", "kl", "z", "x", " il", "u", "d", "pl", "Li", "ll", "f", "dl", "ln", "j", "m", " li", "nl", "fl", "v", "b", "t", "e", "li", "lin"], "i": ["loc", "qi", "c", "o", "h", "iu", "lc", "jl", "z", "x", "ind", " il", "I", "u", "d", "ll", "j", "f", "m", "xi", "v", "e", "id", "li", "ii", "lo"], "times": ["imes", "points", "s", "checks", "ups", "qs", "shows", "eps", "Times", "ps", "hours", "rows", "xs", "steps", "comments", "exp", "c", "cases", "tips", "values", "ks", "z", "ones", "time", "blocks", "events", "x", "places", " Times", "tests", "runs", "lines", "cs", "forces", "days", "types", "depth", "iques", "shape", "check", "reads", "length", "ts", "ips", "its", "quick", "itions", "ins"], "p": ["lp", "s", "k", "op", "a", "at", "pop", "python", "pre", "ps", "bp", "c", "post", "y", "o", "tp", "per", "case", "pos", "cp", "ap", "P", "sp", "po", "pa", "x", "patch", "u", "pi", "d", "j", "jp", "f", "m", "pp", "point", "ping", "ip", "v", "b", "np", "pair", "t", "pe", "e", "part"]}}
{"code": "N=int(input())\\nK=[int(n) for n in input().split()]\\nS=sum(K)\\ntotal=0\\nfor i in range(N):\\n  S-=K[i]\\n  total+=K[i]*S\\nprint(total %(10**9+7))", "target": "198", "substitutes": {"N": ["F", "E", "L", "NO", "V", "H", "Q", "X", "Y", "NC", "Size", "Num", "NS", "Na", "CNN", "O", "P", "T", "C", "B", "D", "Ne", "A", "I", "NT", "Z", "Ns", "ns", "R", "M", "J", "Sum", "NA"], "K": ["F", "Power", "k", "KK", "Ke", "E", "L", "V", "H", "Q", "X", "Y", "IK", "KE", "Sk", "O", "P", "T", "C", "B", "SK", "D", "NK", "KS", "Kent", "VK", "HK", "Z", "KR", "PK", "U", "R", "Mask", "OK", "M", "J", "Sign", "DK", "Sum", "G", "Key"], "n": ["s", "k", "name", "a", "p", "na", "nd", "c", "nc", "num", "un", "nu", "ne", "z", "fn", "x", "nan", "sn", "node", "l", "cn", "d", "u", "nn", "nt", " ng", "f", "ln", "j", "m", "nw", "ns", "no", "ni", "b", "t", "pn", "nb"], "S": ["F", "s", "L", "DS", "V", "H", "Q", "X", "SE", "NS", "Si", "TS", "SH", "SI", "O", "P", "T", "C", "B", "D", "SK", "Sa", "A", "W", "I", "SS", "OS", "Z", "WS", "Ns", "U", "R", "Total", "M", "MS", "Sum", "SN", "G", "SU", "sum"], "total": ["ss", " TOTAL", "s", "full", "a", "sh", "ALL", " summed", " sum", "TA", "otal", "net", "confirmed", "SI", "gross", "temp", "size", "local", "basic", "final", "scale", "si", "cost", " SS", "valid", "partial", "shared", "ass", "max", " Total", "Total", "average", "alpha", "complete", "MS", "summary", "length", "t", "all", "Sum", "count", "percent", "oss", "sum"], "i": ["gi", "k", "ui", "vi", "qi", "mi", "p", "ai", "c", "y", "h", "r", "ini", "o", "pos", "ix", "iu", "z", "si", "eni", "index", "x", "ind", "start", "I", "uri", "l", "fi", "u", "d", "pi", "q", "j", "f", "io", "m", "xi", "di", "ip", "ci", "v", "b", "e", "id", "li", "ii", "bi", "ti"]}}
{"code": "def ss_reverse(ss,a,b):\\n    rev = ss[a:b+1]\\n    rev = rev[::-1]\\n    edited = ss[:a] + rev + ss[b+1:]\\n    return edited\\n\\ndef ss_replace(ss,a,b,word):\\n    edited = ss\\n    edited= ss[:a] + word + ss[b+1:]\\n    return edited\\n\\ndef print_result(ss,a,b):\\n    print(ss[a:b+1])\\n\\nss = input()\\nn = int(input())\\n\\nfor i in range(n):\\n    I = input().split()\\n    if len(I) == 4:\\n        ss = ss_replace(ss,int(I[1]),int(I[2]),I[3])\\n    \\n    if I[0] == \"reverse\" :\\n        ss = ss_reverse(ss,int(I[1]),int(I[2]))\\n\\n    if I[0] == \"print\" :\\n        print_result(ss,int(I[1]),int(I[2]))\\n    \\n\\n", "target": "110", "substitutes": {"ss": ["s", "struct", "sh", "uss", "ks", "si", "ff", "js", "sk", "ssh", "WS", "ess", "iss", "us", "icks", "se", "dos", "rss", "feed", "ins", "settings", "sed", "est", "bs", "xs", "xx", "css", "pos", "sf", "wordpress", "ng", "mes", "ass", "cs", "sw", "site", "sch", "os", "e", "pps", "pg", "news", "sq", "spec", "styles", "str", "wp", "ese", "sit", "hess", "tt", "ps", "html", "oss", "es", "sn", "sites", "ses", "SS", "less", "sup", "ns", "stuff", "ts", "ls", "text", "sc", "eps", "na", "sl", "seed", "vs", "search", "st", "master", "tests", "ssl", "style", "ws", "su", "select", "ds", "eff", "parse", "rs", "test", "best", "fts"], "a": ["aa", "auto", "at", "va", "ma", "p", "na", "ai", "c", "ama", "aw", "fa", "y", "api", "la", "ba", "ab", "au", "art", "da", "pa", "A", "ah", "ar", "current", "ia", "ak", "d", "aaa", "f", "sa", "ca", "ac", "m", "ga", "area", "aj", "am", "parent", "ae", "oa", "alpha", "ea", "e", "ada", "part", "an", "ad"], "b": ["aa", "be", "ib", "part", "fb", "p", "bs", "bp", "pb", "c", "g", "fa", "y", "r", "app", "wb", "mb", "beta", "bis", "ba", "B", "ab", "w", "sb", "cb", "body", "l", "bh", "bb", "d", "u", "bf", "rb", "abb", "ob", "f", "eb", "j", "m", "bd", "bot", "db", "bin", "v", "bar", "base", "e", "bc", "bas", "nb", "lb", "bi"], "rev": ["cur", "text", "loc", "change", "cmp", "rest", "ie", "end", "code", "ed", "pre", "Rev", "adapt", "c", "rec", "prev", "r", "orig", "re", "iter", "vs", "desc", "temp", "coll", "edit", "diff", "clean", "inv", "w", "reverse", "version", "editor", "adj", "vert", "iv", "rc", "neg", "rel", "ref", "review", "alpha", "path", "v", "cr", "order", "sub", "ev", "ren", "ad", "res"], "edited": [" updated", "written", "text", "reviewed", " modified", "modified", "ie", " rewritten", "false", " improved", "ed", " original", "c", " moved", " editor", "orig", "pos", "assembled", " formatted", "temp", "checked", " inserted", "original", "edit", "z", "es", "index", "x", "Edited", " reversed", "selected", "w", " accepted", "editor", "it", "lines", "packed", " reverted", "ritten", " altered", " edits", "rc", "worked", "none", "ac", " adjusted", "broken", "Edit", "null", "ended", "updated", " edit", "alpha", "wrote", " changed", " stripped", " copied", "changed", " escaped", " cleaned", "id", "eff", "seq", "config", " adapted", "best", "ad"], "word": ["new", "name", "letter", "text", "change", "int", "code", "sex", "words", "p", " w", "r", "work", "prev", "pos", "wh", "year", "tag", "weight", "wal", "search", "x", "diff", "w", "Word", "patch", "doc", "style", "sw", "term", "ww", "char", "ws", "alpha", "wd", "string", "v", "col", "move", "prefix", "ad"], "n": ["k", "ner", "p", "g", "c", "o", "number", "nc", "num", "en", "y", "r", "z", "x", "sn", "w", "l", "u", "d", "nn", "nt", "j", "network", "f", "m", "nw", "ns", "ni", "nl", "t", "N", "e", "nb"], "i": ["gi", "k", "int", "p", "ai", "c", "h", "y", "number", "num", "pos", "index", "x", "ind", "l", "u", "d", "f", "j", "no", "ci", "inn", "id", "li", "ii", "ip"], "I": ["KI", "V", "K", "IJ", "API", "Line", "LI", "UI", "G", "VI", "DI", "IC", "You", "Base", "L", "It", "ie", "Q", "X", "MI", "IE", "Parts", "IP", "GI", "Li", "IO", "Edit", "U", "J", "Image", "N", "Xi", "Index", "Gi", "ID", "IS", "CI", "All", "IL", "AI", "Is", "NI", "B", "S", "Id", "We", "Fi", "R", "Pi", "TI", "M", "F", "PI", "E", "URI", "Vi", "Y", "Si", "SI", "P", "T", "D", "If", "BI", "W", "Info", "In", "II", "Ian", "HI", "Me", "Fixed", "My"]}}
{"code": "def main():\\n\tN = int(input())\\n\tA = [int(a) for a in input().split(\" \")]\\n\tA.sort()\\n\tcnt = []\\n\tc = 0\\n\ta = 0\\n\tfor i in range(len(A)):\\n\t\tif i == 0:\\n\t\t\ta = A[i]\\n\t\t\tc += 1\\n\t\telse:\\n\t\t\tif A[i] == a:\\n\t\t\t\tc += 1\\n\t\t\telif A[i] != a:\\n\t\t\t\tcnt.append(c)\\n\t\t\t\tc = 1\\n\t\t\t\ta = A[i]\\n\telse:\\n\t\tcnt.append(c)\\n\\n\tcnt = list(map(lambda ct: (2 - (ct % 2)), cnt))\\n\tevens = cnt.count(2)\\n\tif evens % 2 == 0:\\n\t\tprint(len(cnt))\\n\telse:\\n\t\tprint(len(cnt) - 1)\\n\\nmain()", "target": "224", "substitutes": {"N": ["F", "L", "H", "X", "NC", "Num", "O", "P", "T", "C", "B", "D", "S", "I", "NT", "Ni", "Z", "Ns", "U", "R", "Input", "M", " n", "G", "NA", "Count", "n"], "A": ["F", "GA", "E", "First", "L", "At", "New", "V", "All", "H", "AS", "X", "Y", "AP", "Adam", "LA", "AST", "Na", "Math", "Ha", "AM", "P", "B", "C", "T", "As", "D", "Ar", "AC", "API", "mA", "AA", "ASC", "And", "Alpha", "S", "W", "Address", "I", "Ma", "Average", "Data", "Action", "Array", "CA", "U", "Input", "alpha", "M", "G", "NA", "An", "App"], "a": ["aa", "s", "tta", "sta", "int", "va", "at", "ma", "p", "access", "qa", "ai", "na", "aw", "fa", "lla", "o", "y", "xa", "r", "la", "ba", "mA", "C", "ab", "z", "ana", "pa", "da", "x", "index", "ar", "af", "w", "now", "ia", "ata", "u", "d", "aaa", "ca", "f", "sa", "asa", "ac", "j", "area", "am", "aj", "ae", "oa", "alpha", "ci", "b", "ea", "e", "an", "ad", "n"], "cnt": ["ecrt", " call", "ecall", "cint", "fcNT", "fcat", "fcnt", " cont", " cint", "lcnn", "Cnot", "lcat", "Cont", "Crt", "ncnn", "ecnot", "lnt", "lcNT", "ecNT", "cnd", "cNT", "call", "cnc", "fcpt", " crt", "fnt", "lcont", "nont", "ncont", "cout", "nnt", "ecpt", "cront", "cnn", " cnot", "Cint", "dcNT", " cpt", "cpt", "dcno", "CNT", "dcnt", " cNT", "Ccat", "ncnt", "crt", "cont", " cno", "fcont", "nNT", "crint", "Cnc", "cno", "nout", "lcnt", "fnc", " cout", "Cout", "ncNT", "lnc", "crnt", "crrt", "ccat", "dcont", "Cnt", "crNT", "Cno", "ecnt", "fNT", " cnd", "Cnn", "fcrt", "ecnd", "cnot", "lNT", "fcall", "Cnd"], "c": ["aa", "k", "s", "p", "ic", "g", "y", "r", "nc", "o", "h", "C", "lc", "anc", "z", "ch", "ce", "x", "unc", "ar", "cu", "cy", "inc", "l", "u", "d", "cn", "f", "ca", "cs", "ac", "m", "cin", "ci", "ct", "b", "cf", "t", "e", "count", "col", "mc", "ad", "n"], "i": ["gi", "ih", "ji", "ui", "ie", "ei", "int", "qi", "p", "phi", "ai", "oi", "y", "o", "ix", "ini", "iu", "lc", "ti", "z", "si", "eni", "index", "x", "ind", "I", "l", "u", "pi", "d", "io", "j", "f", "m", "xi", "ori", "di", "ri", "ni", "iy", "ci", "alpha", "b", "v", "e", "t", "iw", "id", "li", "ii", "n", "bi", "ip"], "evens": ["evenances", " oddances", " odds", "Evenances", " evensd", "greats", " evenments", "evenments", " evend", "evenes", "greatsd", "greatments", "evensd", " evenes", " evenances", "Evens", " oddd", "Evenes", " oddes", "Evend", " oddments", " oddsd", "evend"]}}
{"code": "A,x,C = input ().split ()\\nn = x[:1]\\nprint ('A'+n+'C')", "target": "324", "substitutes": {"A": [" N", "F", "a", "L", "V", "H", "X", "Y", "P", "B", "T", "D", "Ar", "AA", "Alpha", "S", "W", "I", "CA", "U", "M", " a", "N", "G"], "x": ["dx", "a", "int", "X", "p", "Y", "XX", "na", "xs", "c", "xx", "y", "rx", "number", " c", "z", "array", "ex", "xxx", "index", "xxxx", "wx", "d", "f", "Z", "ax", "xi", "data", " X", "xp", "v", "N", "xes", "xc", "xa"], "C": ["F", "E", "L", "CI", "X", "Y", "NC", "c", "DC", " c", "O", "P", "B", "T", "D", "unc", "S", "W", "I", "Z", "Code", "U", "R", "CC", "N", "G", "CR"], "n": [" N", "name", "k", "a", "p", "g", "c", "i", "o", "number", "r", "num", " c", "y", "ne", "ng", "z", "fn", "index", "sn", "l", "cn", "d", "nn", "f", "ln", "m", "Ns", "ns", "ni", "nr", "b", "len", "e", "N", "count", "nb"]}}
{"code": "from heapq import heappush, heappop\\nfrom bisect import bisect_left, bisect_right\\nfrom collections import deque, defaultdict\\nfrom itertools import combinations, permutations, combinations_with_replacement\\nfrom itertools import accumulate\\nfrom math import ceil, sqrt, pi\\n\\nMOD = 10 ** 9 + 7\\nSIZE = 10 ** 6\\n\\nN, P = map(int, input().split())\\nS = input()\\n\\nanswer = 0\\nif P == 2 or P == 5:\\n    for i, s in enumerate(S):\\n        if int(s) % P == 0:\\n            answer += i + 1\\nelse:\\n    S = S[::-1]\\n    cnt = defaultdict(int)\\n    tmp = 0\\n    for i, s in enumerate(S):\\n        tmp += int(s) * pow(10, i, P)\\n        if tmp % P == 0:\\n            answer += 1\\n        answer += cnt[tmp % P]\\n        cnt[tmp % P] += 1\\n\\nprint(answer)", "target": "448", "substitutes": {"MOD": ["Power", "F", "ID", "Max", "Fun", "RT", "Num", "JO", " mod", "RE", "Mod", "FORM", "Rank", "Mult", "PR", "Mods", "MODE", "MAX", "Mode", "fun", "UG", "FD", "R", "J", "M", "EW", "mod", "NUM", "RM"], "SIZE": ["PI", "GE", "ES", "Size", "IZE", "SH", "ACE", "DATA", "CNN", "KT", "NUM", "size", "BY", "NP", "KB", "FORM", "NG", "MAX", "Z", "II", "CCC", "ize", "GN", "ENSE", "INFO", "EXP", "VALUE", " size"], "N": ["F", "E", "NR", "L", "EN", "V", "H", "Q", "NS", "K", "O", "T", "C", "B", "D", "A", "W", "I", "Z", "U", "R", "M", "J", "NB", "G", "n"], "P": ["F", "Power", "TP", " p", "E", "PI", "Point", "PO", "L", "Port", "Page", "V", "H", "Python", "Q", "X", "p", "power", "Y", "AP", "IPP", "WP", "K", "PM", "PN", "LP", "O", "T", "C", "D", "NP", "IP", "B", "PE", "PP", "A", "W", "I", "Type", "PA", "DP", "RP", "PK", "Py", "U", "BP", "Part", "PIN", "M", "CP", "J", "JP", "R", "PU", "Po", "G", "PF", "PT"], "S": ["F", "ss", "E", "sq", "L", "V", "H", "Es", "X", "p", "SE", "Size", "SR", "Si", "SH", "ST", "SAM", "SI", "Su", "O", "T", "C", "B", "SK", "size", "Sa", "Session", "A", "SL", "Service", "Sl", "I", "services", "ses", "SS", "WS", "U", "R", "M", "SM", "SN", "G", "SSL", "South", "SU", "Answer", "Socket", "n"], "answer": ["error", "ami", "code", "fix", " answers", "issue", "reply", "request", "sample", "p", "number", "result", "results", "knowledge", "evidence", "username", "paper", "done", "esi", "temp", "size", "array", "eni", "cache", "response", "image", "memory", "ee", "do", "ace", "score", "page", " result", "option", "address", "area", "output", "duration", "ae", "average", "data", "audio", "question", "answered", "stuff", " Answer", "fake", "order", "message", "grade", "zi", "cover", "after", "exit", "next", "practice", "test", "Answer", "offset"], "i": ["gi", "ji", "PI", "ui", "a", "ei", "ie", "int", "chi", "qi", "p", "phi", "ai", "c", "o", "y", "ix", "im", "iu", "esi", "mini", "si", "eni", "yi", "x", "I", "ia", "l", "u", "pi", "d", "q", "j", "f", "m", "xi", "di", "ip", "ci", "v", "e", "t", "ice", "zi", "li", "ii", "n", "bi", "ti"], "s": ["ss", "sq", "sh", "south", "sit", "p", "ps", "xs", "c", "g", "sets", "h", "y", "r", "en", "sl", "results", "sf", "un", "o", "inf", "sp", "si", "es", "now", "w", "sb", "sites", "l", "services", "u", "d", "ses", "q", "sin", "f", "m", "ns", "site", "us", "su", "os", "b", "v", "sum", "t", "ls", "ips", "se", "SU", "an", "n", "ins"], "cnt": ["cNT", "acount", "CNT", "ctNT", " cNT", "ctnt", " cct", "cct", "ctount", "acnt", " cant", "Cnt", "cont", "ctont", "acNT", "cout", " cont", "acont", "acant", " count", "acct", "cant", "Cant", "count", " cout", "Cout", "Cct", "acout"], "tmp": ["amp", "cmp", "a", "const", "company", "int", "part", "sample", "fb", "p", "pre", "img", "extra", "number", "tp", "kk", "result", "cp", "txt", "T", "emp", "sp", "temp", "proc", "mp", "attr", "size", "array", "config", "opp", "xt", "params", "cache", "source", "vm", "st", " temporary", "sb", "diff", "current", "obj", "bt", "nt", "sup", "page", "m", "pp", "copy", "small", "Temp", "address", "area", "pty", "aj", "duration", "su", "stuff", "v", "zip", "np", "fake", "t", "order", "project", "treatment", "nb", "test", "offset"]}}
{"code": "from collections import deque\\nn=int(input())\\na=[]\\nfor i in range(n):\\n    a.append(int(input()))\\na.sort()\\na=deque(a)\\nans=0\\n\\nbig=a.pop()\\nsmall=a.popleft()\\nans+=big-small\\n#print(ans,a,big,small)\\npre_big=big\\npre_small=small\\nchecked_a=deque([small,big])\\nwhile(len(a)>1):\\n    big=a.pop()\\n    small=a.popleft()\\n    ans+=pre_big-small\\n    ans+=big-pre_small\\n#    print(ans,a,big,small,pre_big,pre_small)\\n    pre_big=big\\n    pre_small=small\\n\\nif(len(a)==1):\\n    last_a=a.pop()\\n    ans+=max(pre_big-last_a,last_a-pre_small)\\n\\nprint(ans)\\n\\n", "target": "310", "substitutes": {"n": ["s", "aa", "k", "p", "na", " number", "c", "o", "number", "y", "num", "nc", "size", "ne", "z", "array", "x", "nan", "ar", "w", "nat", "l", "d", "nn", "nt", "f", "sa", "network", "m", "ns", "area", "no", "alpha", "b", "N", "count", " l", "nb", "an", " size"], "a": ["aa", "auto", "ao", "va", "ma", "p", "aw", "ama", "c", "o", "app", "la", "ba", "ab", "au", "array", "da", "A", "af", "args", "l", "u", "aaa", "ca", "f", "sa", "ac", "asa", "m", "ga", "area", "aux", "am", "input", "aj", "ae", "alpha", "b", "v", "e", "t", "an", "ast", "ad"], "i": ["gi", "k", "p", "g", "c", " I", "gu", "num", "z", "index", "x", "ind", "I", " il", "it", "l", "u", "d", "q", "f", "j", "you", "il", "id", "li", "bit", "ip"], "ans": ["ups", "ents", "nas", "amps", "eps", "xs", "ats", "Ann", "Na", "anas", "AN", "ANS", "ks", "aces", "ann", "anon", "ani", "au", "errors", "ays", "ana", "can", "outs", " means", "nan", "ands", "aned", "anz", "ches", "ons", "leans", "ens", "sk", "ants", "ns", "stuff", "powers", "an", "ins"], "big": ["bad", "significant", "full", " mega", " biggest", "g", "c", "regular", "medium", "year", " bigger", "little", "sign", "large", "size", "long", "ng", "mini", "div", "z", "now", "tiny", "gd", " huge", "d", "max", "real", " Big", "short", "Big", "self", "area", "stuff", "alpha", "gb", "b", "micro", "good", "id", "near", "sized", " large", "huge"], "small": ["significant", "sh", "south", "nice", "recent", "medium", "low", "little", "large", "size", "great", "ng", "mini", "tiny", "young", " huge", "short", "Big", "self", "area", "quick", "arrow", "hi", "ci", " tiny", "Small", "good", " mini", "near", "larg", "sized", " large", "huge"]}}
{"code": "x = int(input())\\nyokin = 100\\nans = 0\\nwhile yokin < (x):\\n  yokin = (yokin*100 +yokin)//100 \\n  ans += 1\\nprint(ans)", "target": "359", "substitutes": {"x": ["dx", "min", "sex", "X", "na", "p", "tx", "xs", "c", "plus", "i", "xx", "y", "rx", "px", "ix", "z", " xx", "xxx", "index", "ex", "cross", "w", "wx", "u", "max", "f", "ww", "xi", "input", "check", "ci", "alpha", "xp", "my", "an", "count", "xy", "mix", "xc", "xa", "n"], "yokin": [" yoka", "syok", "eyosen", "Yoka", "kyokin", "yarin", "zyrock", " yoton", "yeilton", "nyoin", "ayoka", "Yoko", "yok", "zyokin", "yeosen", "eyito", " yofi", "yoko", "oyolin", "eyilton", "eyoka", "ayarin", "yoin", "nyoton", "eyarin", "yeolin", "kyilton", "yeoko", "syoko", "syokin", "nyrock", "oyokin", "yito", "ayokin", " yoko", "yeito", "oyoka", "eyofi", " yarin", "yosen", "kyito", "yeokin", "zyoton", " yok", "kyosen", " yoin", "yrock", "Yokin", "oyoko", "syoka", "ayofi", "yofi", "nyokin", "eyokin", "zyoin", "yeoka", "yolin", " yrock", "yoka", "yilton", " yolin", "yoton", "Yok"], "ans": ["s", "k", "a", "ents", "lan", "nas", "span", "amps", "ras", "ams", "X", "na", " cats", "ms", "xs", "atan", "aning", "cats", "activation", "anas", "AN", "ANS", "ks", "mean", "aces", "ann", "annels", "ani", "anc", "anon", "can", " means", "nan", "ars", "anch", "args", "aned", "ons", "aus", "anne", "ens", "yes", "ants", "ns", "scan", "ases", "os", "fan", "an", "n", "ins"]}}
{"code": "\\nimport operator\\nclass SegmentTree:\\n    def __init__(self, size, fn=operator.add, default=None, initial_values=None):\\n        \"\"\"\\n        :param int size:\\n        :param callable fn: \u533a\u9593\u306b\u9069\u7528\u3059\u308b\u95a2\u6570\u3002\u5f15\u6570\u3092 2 \u3064\u53d6\u308b\u3002min, max, operator.xor \u306a\u3069\\n        :param default:\\n        :param list initial_values:\\n        \"\"\"\\n        default = default or 0\\n\\n        # size \u4ee5\u4e0a\u3067\u3042\u308b\u6700\u5c0f\u306e 2 \u51aa\u3092 size \u3068\u3059\u308b\\n        n = 1\\n        while n < size:\\n            n *= 2\\n        self._size = n\\n        self._fn = fn\\n\\n        self._tree = [default] * (self._size * 2 - 1)\\n        if initial_values:\\n            i = self._size - 1\\n            for v in initial_values:\\n                self._tree[i] = v\\n                i += 1\\n            i = self._size - 2\\n            while i >= 0:\\n                self._tree[i] = self._fn(self._tree[i * 2 + 1], self._tree[i * 2 + 2])\\n                i -= 1\\n\\n    def set(self, i, value):\\n        \"\"\"\\n        i \u756a\u76ee\u306b value \u3092\u8a2d\u5b9a\\n        :param int i:\\n        :param value:\\n        :return:\\n        \"\"\"\\n        x = self._size - 1 + i\\n        self._tree[x] = value\\n\\n        while x > 0:\\n            x = (x - 1) // 2\\n            self._tree[x] = self._fn(self._tree[x * 2 + 1], self._tree[x * 2 + 2])\\n\\n    def add(self, i, value):\\n        \"\"\"\\n        \u3082\u3068\u306e i \u756a\u76ee\u3068 value \u306b fn \u3092\u9069\u7528\u3057\u305f\u3082\u306e\u3092 i \u756a\u76ee\u306b\u8a2d\u5b9a\\n        :param int i:\\n        :param value:\\n        :return:\\n        \"\"\"\\n        x = self._size - 1 + i\\n        self.set(i, self._fn(self._tree[x], value))\\n\\n    def get(self, from_i, to_i=None, k=0, L=None, r=None):\\n        \"\"\"\\n        [from_i, to_i) \u306b fn \u3092\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059\\n        :param int from_i:\\n        :param int to_i:\\n        :param int k: self._tree[k] \u304c\u3001[L, r) \u306b fn \u3092\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u6301\u3064\\n        :param int L:\\n        :param int r:\\n        :return:\\n        \"\"\"\\n        if to_i is None:\\n            return self._tree[self._size - 1 + from_i]\\n\\n        L = 0 if L is None else L\\n        r = self._size if r is None else r\\n\\n        if from_i <= L and r <= to_i:\\n            return self._tree[k]\\n\\n        if to_i <= L or r <= from_i:\\n            return None\\n\\n        ret_L = self.get(from_i, to_i, k * 2 + 1, L, (L + r) // 2)\\n        ret_r = self.get(from_i, to_i, k * 2 + 2, (L + r) // 2, r)\\n        if ret_L is None:\\n            return ret_r\\n        if ret_r is None:\\n            return ret_L\\n        return self._fn(ret_L, ret_r)\\n\\n    def __len__(self):\\n        return self._size\\n\\ndef resolve():\\n    N = int(input())\\n    S = input()\\n    Q = int(input())\\n\\n    seg = SegmentTree(N, fn=operator.or_)\\n    for i in range(N):\\n        s = 2 ** (ord(S[i]) - ord('a'))\\n        seg.set(i, s)\\n\\n    for _ in range(Q):\\n        act, q1, q2 = input().split()\\n        if act == \"1\":\\n            # \u6587\u5b57\u5909\u66f4\\n            idx = int(q1) - 1\\n            s_bin = 1 << (ord(q2) - ord('a'))\\n            seg.set(idx, s_bin)\\n        else:\\n            # L,R\u533a\u9593\u306e\u6587\u5b57\u7a2e\u3092\u51fa\u529b\\n            l = int(q1)-1\\n            r = int(q2)\\n            x = bin(seg.get(l, r))\\n            print(x.count(\"1\"))\\n\\n\\nif __name__ == \"__main__\":\\n    resolve()\\n", "target": "779", "substitutes": {"self": ["Self", "worker", "p", "g", "c", "_", "context", "h", "instance", "this", "tag", "node", "w", "obj", "object", "parser", "shape", "parent", "func", "type", "mod", "e", "base", "test"], "size": ["name", "mode", "value", "Size", "g", "num", "weight", "empty", "ng", "scale", "norm", "SIZE", "sec", "max", "member", "six", "term", "small", "function", "shape", "data", "length", "ize", "len", "big", "n"], "fn": ["Function", "value", " function", "fd", "method", "nm", "fp", " func", "native", "fs", "fc", "unc", "node", "cb", "FN", "obj", "cn", "f", "ln", "fun", "function", "func", "expr", "cf", "callback", "val", "n"], "default": ["new", "example", "name", "call", "description", "zero", "value", "end", "field", "_", "DC", " defaults", "post", " Default", "number", "result", "empty", "desc", "index", "Default", "diff", " value", "current", "initial", "none", "function", "option", "null", "df", "data", "length", "func", "type", "custom", "dec", "val", "FAULT", "offset"], "initial_values": [" initial_vals", " initial_value", "initial_limits", "initial_vals", "initial_value", " initial_limits"]}}
{"code": "N,M = map(int,input().split())\\nL = sorted(map(int,input().split()),reverse=True)\\n\\nsum = 0\\nfor i in range(M):\\n    sum += L[i]\\n\\n    \\nprint(sum)", "target": "433", "substitutes": {"N": ["F", "E", "V", "NN", "Q", "X", "Y", "NS", "NI", "K", "O", "P", "T", "C", "B", "D", "S", "I", "NT", "Z", "Ns", "R", "J", " n", "G", "NA", "n"], "M": ["F", "MN", "E", "V", "H", "Q", "X", "Y", "K", "DM", "NM", "O", "MON", "P", "T", "B", "C", "D", "LM", "MD", "JM", "W", "CM", "OM", "I", "MB", "Z", "m", "MC", "U", "R", "J", "MF", "G", "Mo", "n"], "L": ["F", "E", "LB", "V", "LT", "NL", "H", "Q", "LS", "LA", "LP", "Lu", "O", "P", "LM", "T", "C", "B", "D", "LD", "S", "SL", "W", "I", "l", "Li", "LR", "LE", "U", "R", "LI", "DL", "G", "LL", "ML"], "sum": ["mass", "error", "sh", "missing", "success", "c", "num", "result", "beta", "cum", "weight", "mean", "spread", "size", "temp", "dot", "cost", "scale", "si", "sim", "diff", "ass", "u", "cal", "max", "score", "gram", "sort", "style", "fee", "output", "amount", "data", "average", "alpha", "match", "length", "summary", "key", "loss", "count", "Sum", "parse", "um", "total", "n"], "i": ["k", "a", "ie", "qi", "mi", "p", "phi", "c", "o", "h", "y", "gu", "ti", "z", "si", "eni", "index", "x", "yi", "mu", "ind", "start", "I", "l", "u", "d", "pi", "q", "j", "f", "m", "xi", "ci", "v", "b", "e", "col", "id", "li", "ii", "n", "bi", "ip"]}}
{"code": "s = list(input())\\nt = input()\\nfor i in range(len(s)):\\n    rotate_s = s.pop()\\n    s.insert(0, rotate_s)\\n    if \"\".join(s) == t:\\n        print(\"Yes\")\\n        exit()\\nprint(\"No\")\\n", "target": "721", "substitutes": {"s": ["ss", "strings", "a", "south", "p", "states", "ps", "g", "c", "xs", "rows", "sets", "o", "r", "y", "times", "si", "es", "search", "S", "w", "sb", "tests", "args", "parts", "services", "l", "d", "lines", "ses", "js", "f", "ssl", "m", "ns", "types", "input", "os", "ts", "b", "gs", "v", "letters", "ls", "e", "ips", "ds", "sv", "n"], "t": ["text", "a", "at", "wt", "tt", "p", "g", "c", "o", "y", "tp", "r", "h", "tn", "ot", "T", "temp", "z", "st", "w", "l", "u", "d", "q", "ta", "f", "j", "title", "m", "stop", "ts", "v", "b", "qt", "type", "e", "test", "n"], "i": ["gi", "p", "ai", "c", " I", "h", "num", "pos", "iu", "lo", "ti", "si", "index", "x", "ind", "I", "l", "d", "f", "j", "count", "col", "id", "li", "n", "ip"], "rotate_s": ["rotateIPe", "rotate__space", "rotateIPp", "rotate__p", "rotate_space", "rotate__e", "rotateIPs", "rotate_e", "rotateIPspace", "rotate_p", "rotate_string", "rotate__s"]}}
{"code": "n, m = map(int,input().split())\\nadj = [[0]*(n+1) for i in range(n+1)]\\nedges = []\\nfor i in range(m):\\n    a, b = map(int, input().split())\\n    edges.append((a, b))\\n    adj[a][b] = 1\\n    adj[b][a] = 1\\n\\n\\nvisited = [False] * (n+1)\\nparents = [None] * (n+1)\\ncycles = set()\\ncount = 0\\ndef dfs(u):\\n    for v in range(n+1):\\n        if adj[u][v]:\\n            if parents[u] == v:\\n                continue\\n            #print (u, v)\\n            #print (parents)\\n            adj[u][v], adj[v][u] = 0, 0\\n            if parents[v] is not None:\\n                #print (\"Isn't None\", u, v, parents[u])\\n                cycles.add(u)\\n                cycles.add(v)\\n                w = parents[u]\\n                while w != v:\\n                    cycles.add(w)\\n                    w = parents[w]\\n                \\n            if parents[v] == None: \\n                parents[v] = u\\n                dfs(v)\\nparents[1] = 0\\ndfs(1)\\nans = m\\n#print (parents)\\nfor i in range(m):\\n    a, b = edges[i]\\n    if a in cycles and b in cycles:\\n        ans -= 1\\nprint (ans)", "target": "634", "substitutes": {"n": ["name", "k", "s", "mn", "p", "na", "c", "nm", "y", "o", "nc", "num", "h", "net", "un", "r", "size", "ne", "nu", "z", "x", "nan", "sn", "node", "w", "ny", "l", "d", "nn", "nt", "network", "f", "j", "ns", "no", "t", "N", "e", "nb", "an"], "m": ["s", "k", "mn", "mi", "p", "ms", "g", "c", "o", "r", "y", "h", "im", "ym", "pm", "md", "z", "dm", "l", "d", "f", "j", "sm", "bm", "man", "M", "e", "mm", "gm", "mc", "an"], "adj": ["cycle", "cmp", "span", "p", "arr", "nav", "acc", "g", "bp", "gap", "adv", "prev", "pos", "app", "ap", "attr", "temp", "ann", "ani", "z", "edge", "div", "index", "diff", "x", "cache", "ind", "next", "obj", "d", "js", "j", "network", "ax", "note", "ns", "aj", "breaks", "data", "graph", "map", "dev", "np", "order", "all", "prefix", "nb", "cdn", "ad"], "i": ["ui", "ie", "ei", "qi", "ai", "c", "o", "iq", "iu", "ti", "si", "index", "x", "ind", "I", "pi", "j", "f", "xi", "di", "ni", "ci", "\u0438", "e", "zi", "id", "li", "ii", "bi", "ip"], "edges": ["indices", "indge", "Edges", "pedge", "edices", " edices", "adgments", "adges", "pedgments", "Edge", "pedges", "pedices", "edge", "pedences", "adhips", "edgments", "edences", "Edices", " edhips", "Edences", "indences", " edgments", "pedhips", "edhips", "indges", "adices"], "a": ["aa", "int", "va", "p", "ai", "c", "o", "y", "r", "api", "ba", "ab", "da", "x", "A", "ar", "af", "w", "ia", "d", "f", "sa", "j", "ac", "ca", "aj", "ae", "alpha", "ea", "e", "all", "an"], "b": ["s", "k", "be", "aa", "fb", "p", "bs", "g", "c", "y", "r", "o", "h", "mb", "B", "ba", "ab", "x", "w", "sb", "l", "d", "bf", "bb", "j", "f", "eb", "bd", "xb", "db", "base", "e", "nb", "lb"], "visited": ["posits", "posalled", "visalled", "posited", "signed", "posed", "signited", "signalled", "visits", "accessited", "signits", "accessits", "vised", "accessalled", "accessed"], "parents": [" parent", "prop", "states", "p", "dist", "g", "kids", "Parent", "pos", "relations", "changes", "children", "names", "Parents", "index", "cache", "blocks", "params", "args", "obj", "ctx", "ports", "ids", "stats", "files", "ains", "status", "none", "ns", "parent", "dates", "data", "graph", "origin", "ips", "ians", "ds", "ops", "prefix", "config", "comments", "ins"], "cycles": ["modules", "frames", "points", "cycle", "weights", "eps", "issues", "steps", "bands", "chain", "rules", "blocks", "outs", "locks", " cycle", "cells", "links", "phase", "lines", "ids", "sections", "ns", "breaks", "dates", "flows", "notes", "roots", "chains"], "count": ["error", "cycle", "code", "c", "case", "num", "weight", "force", "size", "counter", "cache", "start", "child", "nt", "found", "depth", "length", "len", "base", "order", "every", "id", "Count", "nb", "loop", "sum", "offset"], "u": ["s", "k", "ui", "uv", "ur", "p", "c", "o", "h", "y", "r", "un", "iu", "nu", "uid", "ou", "x", "cu", "w", "l", "d", "q", "bu", "f", "ut", "ue", "up", "tu", "uit", "us", "U", "su", "lu", "e", "hu", "ul", "ru", "uu", "eu"], "v": ["s", "k", "vi", "ve", "uv", "V", "va", "p", "g", "c", "vu", "h", "gu", "y", "o", "r", " vi", "vid", "lv", "vs", "vin", "ou", "vp", "x", "nv", "w", "l", "d", "q", "j", "f", "iv", "vv", "U", "view", "e", "sv", "ii", "uu", "vd"]}}
{"code": "x=int(input())\\nans,k,i=0,1,0\\nwhile 1:\\n    ans+=k\\n    if ans>=x:\\n        break\\n    k+=1\\nprint(k)", "target": "350", "substitutes": {"x": ["int", "X", "p", "na", "xxxxxxxx", "xs", "c", "xx", "y", "rx", "h", "ix", "z", "ex", "xxx", "index", "xxxx", "cross", "w", "l", "wx", "max", "one", "f", "m", "xi", "v", "b", "xp", "e", "xes", "xy", "xc", "an", "n"], "ans": ["aid", "a", "lan", "cas", "unks", "na", "ai", "xs", "ats", "aning", "anas", "AN", "ANS", "anes", "ks", "ane", "aces", "annels", "ann", "anon", "anc", "ani", "ana", "es", "can", " means", "A", "kin", "anch", " scans", "ak", "aned", "chan", "ons", "ki", "ens", "sk", "leans", "atches", "ants", "ns", "ances", "man", "scan", "ases", "ski", "ck", "ds", "ops", "an", "n", "ad", "ins"], "k": ["km", "end", "spec", "kid", "ke", "p", "c", "K", "y", "o", "work", "kk", "ijk", "ks", "kn", "anc", "z", "fork", "can", "mk", "kw", "w", "kin", "ko", "ak", "ask", "ok", "u", "unk", "max", "q", "ki", "j", "sk", "f", "ky", "m", "ac", "ku", "kat", "co", "kick", "scan", "ep", "key", "v", "b", "ck", "e", "kr", "ik", "an", "n"], "i": ["p", "init", "c", "o", "ini", "im", "index", "I", "it", "pi", "d", "ki", "j", "f", "m", "di", "ci", "v", "b", "info", "id", "inner", "ii", "bi", "n"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport sys\\nsys.setrecursionlimit(10**9)\\nINF=10**18\\nMOD=10**9+7\\ninput=lambda: sys.stdin.readline().rstrip()\\nYesNo=lambda b: bool([print('Yes')] if b else print('No'))\\nYESNO=lambda b: bool([print('YES')] if b else print('NO'))\\nint1=lambda x:int(x)-1\\n\\ndef main():\\n    s=list(input())+['T']\\n    x,y=map(int,input().split())\\n    x+=16000\\n    y+=16000\\n    ud=[]\\n    lr=[]\\n    f=0\\n    f2=0\\n    c=0\\n    for t in s:\\n        if t=='F':\\n            if not f:\\n                x-=1\\n            else:\\n                c+=1\\n        else:\\n            f=1\\n            if c:\\n                if f2:\\n                    ud.append(c)\\n                else:\\n                    lr.append(c)\\n            c=0\\n            f2=not f2\\n    for l,z in [(ud,y),(lr,x)]:\\n        N=len(l)\\n        dp=[0]*(N+1)\\n        dp[0]=1<<16000\\n        for i in range(N):\\n            dp[i+1]|=dp[i]<<l[i]|dp[i]>>l[i]\\n        if not (dp[-1]>>z)&1:\\n            print('No')\\n            break\\n    else:\\n        print('Yes')\\n        \\n    \\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "753", "substitutes": {}}
{"code": "import sys\\nimport math  # noqa\\nimport bisect  # noqa\\nimport queue  # noqa\\n\\n\\ndef input():\\n    return sys.stdin.readline().rstrip()\\n\\n\\ndef main():\\n    _ = int(input())\\n    A = list(map(int, input().split()))\\n    B = list(map(int, input().split()))\\n\\n    cnt = 0\\n    for a, b in zip(A, B):\\n        if a < b:\\n            cnt += (b - a) // 2\\n        else:\\n            cnt -= a - b\\n\\n    if cnt < 0:\\n        print(\"No\")\\n    else:\\n        print(\"Yes\")\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "778", "substitutes": {}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians#, log2\\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy, copy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left, insort, insort_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\n#import numpy as np\\n#from decimal import *\\n\\nN = INT()\\na = LIST()\\n\\nA = Counter(a)\\n#print(A)\\nans = 0\\nfor key, value in A.items():\\n\tif key > value:\\n\t\tans += value\\n\telse:\\n\t\tans += value - key\\n\\nprint(ans)\\n\\n", "target": "536", "substitutes": {}}
{"code": "n = int(input())\\napple = list(map(int, input().split()))\\nprint(sum(apple) - n)", "target": "519", "substitutes": {"n": ["s", "a", "p", "g", "c", "i", "y", "number", "num", "un", "ne", "z", "fn", "x", "index", "nan", "node", "l", "u", "d", "nn", "f", "network", "m", "none", "ns", "no", "ni", "nr", "b", "np", "e", "N", "pn", "count", "nb"], "apple": ["ss", "wheel", "ack", "arin", "python", "device", "pal", "issue", "win", "event", "app", "un", "une", "android", "yahoo", "Apple", " Apple", "pattern", "au", "node", "iOS", "bug", "google", "egg", "ee", "install", "iron", "vine", "six", "pie", "ns", "release", "data", "bin", "fruit", "feature", "package", " apples", "parse", "pine"]}}
{"code": "S = input()\\na = b = 0\\nfor i in range(len(S)):\\n  if S[i]== 'B':\\n    b += 1\\n  else:\\n    a += b\\nprint(a)", "target": "587", "substitutes": {"S": ["F", "s", "L", "V", "H", "SC", "X", "Q", "SE", "NS", "Si", "SH", "SI", "O", "SA", "P", "B", "C", "T", "D", "SB", "ASC", "Session", "A", "W", "Sl", "I", "SS", "U", "R", "Input", "Part", "M", "N", "G", "SO", "BS", "SU", "Socket"], "a": ["s", "aa", "va", "code", "active", "p", "ai", "g", "c", "aw", "fa", "y", "r", "api", "B", "ba", "ab", "z", "array", "AA", "da", "x", "pa", "index", "A", "af", "action", "args", "l", "bb", "aaa", "f", "sa", "ca", "m", "ac", "ga", "asa", "area", "am", "ae", "alpha", "abs", "ea", "an", "ad", "n"], "b": ["s", "k", "aa", "p", "bs", "g", "c", "pb", "y", "r", "o", "wb", "B", "ab", "x", "A", "sb", "l", "ob", "rb", "d", "bb", "f", "m", "ae", "v", "bar", "base", "t", "e", "count", "nb", "lb", "ad", "n"], "i": ["gi", "ji", "k", "end", "int", "p", "phi", "c", "h", "y", "r", "ix", "ini", "iu", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "d", "pi", "f", "j", "xi", "di", "ri", "ci", "v", "e", "col", "zi", "li", "ii", "bi", "lo"]}}
{"code": "def makes( r,l ):\\n    s=\"\"\\n    for i in range(r-1):\\n        s+=\"0 \"\\n    rl=r+l\\n    rl2=rl//2\\n    if rl%2==0:\\n        s+=str(rl2)+\" \"\\n        s+=str(rl2)+\" \"\\n    else:\\n        if r%2==1 :\\n            s+=str(rl2+1)+\" \"\\n            s+=str(rl2)+\" \"\\n        if l%2==1 :\\n            s+=str(rl2)+\" \"\\n            s+=str(rl2+1)+\" \"\\n    for i in range(l-1):\\n        s+=\"0 \"\\n    return s\\n\\n\\ns = input()\\nrc=lc=0\\nans=\"\"\\nfor i in range(len(s)):\\n    if s[i]==\"R\":\\n        if rc!=0 and lc!=0 :\\n            ans += makes(rc,lc)\\n            rc=0\\n            lc=0\\n        rc+=1\\n    else:\\n        lc+=1\\nif rc!=0 and lc!=0 :\\n    ans += makes(rc,lc)\\nprint(ans)", "target": "722", "substitutes": {"r": ["rh", "rr", "ur", "p", "g", "c", "h", "rd", "rx", "sl", "pr", "lr", "rn", "ro", "z", "x", "ar", "w", "rb", "u", "d", "ra", "f", "range", "sr", "m", "ir", "dr", "rg", "rt", "br", "R", "nr", "b", "v", "e", "ru", "rs", "n"], "l": ["lp", "ol", "L", "p", "g", "c", "h", "sl", "lr", "el", "lv", "kl", "x", "u", "d", "ll", "dl", "ln", "j", "f", "m", "nl", "fl", "hl", "b", "v", "len", "ell", "e", "ls", "lt", "il", "t", "ul", "li", "lb", "n"], "s": ["ss", "hs", "strings", "rows", "_", "sets", "y", "fs", "uns", "si", "blocks", "sb", "parts", "src", "js", "f", "status", " S", "types", "us", "fields", "abs", "gs", "b", " self", "ops", "er", "feed", "comments", "ins", "L", "states", "xs", "ing", "h", "u", "sg", "cs", "lib", "sections", "os", "string", "v", "e", "all", "ys", "__", "p", "ps", "sys", "sts", "log", "z", "es", "S", "sites", "lines", "ses", "d", "m", "ns", "seconds", "input", "ts", "t", "ls", "count", "n", "a", "south", "qs", "ed", "g", "c", "sym", "o", "sl", "times", "args", "ssl", "ws", "su", "features", " ls", "rates", "ds", "its", "sv", "rs", " d", "fts"], "i": ["gi", "ui", "a", "ie", "int", "p", "ai", "g", "c", "ic", "o", "ini", "iu", "lo", "ti", "z", "si", "x", "ind", "I", "uri", "u", "pi", "d", "io", "f", "j", "m", "ga", "xi", "di", "ri", "ci", "v", "b", "e", "zi", "id", "multi", "li", "ii", "n", "bi", "ip"], "rl": ["rh", "lp", "rr", "loc", "ol", "L", "rol", "rx", "sl", "pr", "lr", "el", "la", "lv", "fc", "src", "rb", "pl", "LR", "ll", "dl", "ln", "sr", "lf", "RL", "rg", "rt", "nl", "wl", "hl", "b", "cr", "ls", "lt", "il", "ul", "cl", "ru", "rs", "lb"], "rl2": ["rl0", "lr5", "nl2", "hll", "rl02", "lrtwo", "rg2", "sl7", "rl3", "rgl", "nl3", "hl02", "hl3", "l4", "sl3", "lr3", "l2", "l8", "nl5", "rltwo", "l0", "sl1", "ll5", "rg1", "hl8", "rll", "rl8", "lrl", "rl5", "rl7", "ll3", "rl1", "lr1", "rg02", "nl4", "ll2", "ll", "ltwo", "hl1", "l3", "hl2", "rg4", "lr8", "lr2", "lr4", "rl4", "ll4", "l1", "lr0", "lr02", "l7", "rg3", "lr7", "hl0", "sl2", "rgtwo"], "rc": ["rr", "cur", "loc", "ack", "sc", "ras", "RC", "init", "ic", "c", "arc", "rx", "rec", "roc", "nc", "erc", "lr", "rn", "irc", "uc", "anc", "fc", "rac", "lang", "LC", "src", "rb", "ra", "sr", "cs", "ac", "dr", "core", "irm", "dc", "vc", "ci", "hl", "clus", "asc", "cr", "bc", "ck", "cc", "xc", "ru", "abc", "rs", "cl", "tc", "pc"], "lc": ["lp", "loc", "sc", "ctrl", "lan", "lic", "c", "ync", "arc", "nc", "ec", "gc", "lr", "la", "lv", "uci", "uc", "fc", "lang", "LC", "src", "rb", "ctx", "ll", "ln", "cs", "acl", "ac", "dc", "icc", "ci", "lu", "len", "hl", "cr", "bc", "ls", "cc", "xc", "cl", "ru", "lb", "tc", "pc"], "ans": ["ss", "a", "ents", "lan", "cas", "nas", "amps", "eps", "ams", "p", "na", "arms", "ai", "ats", "ions", "aning", "anas", "ads", "ANS", "rules", "ks", "la", "ras", "aces", "ann", "anon", "anc", "cus", "ays", "ana", "x", "can", "lang", "ars", "anus", " scans", "args", "aned", "ons", "aus", "ln", "sk", "cs", "leans", "ants", "acs", "ns", "ens", "ac", "eds", "os", "ci", "ls", "cons", "acers", "ds", "rs", "angs", "an", "ins"]}}
{"code": "import math\\nwhile True:\\n    n=int(input())\\n    if n==0:\\n        break\\n    else:\\n        a=list(map(int,input().split()))\\n        m=sum(a)/n\\n        l=0\\n        for i in range(n):\\n            l+=(a[i]-m)**2\\n        b=math.sqrt(l/n)\\n        print(\"{:.8f}\".format(b))\\n", "target": "683", "substitutes": {"n": ["s", "k", "L", "mn", "p", "g", "c", "y", "o", "r", "num", "nc", "un", "net", "size", "ne", "z", "fn", "x", "sn", "w", "u", "d", "nn", "nt", "ll", "f", "j", "ln", "dl", "ns", "no", "ni", "nl", "v", "len", "e", "N", "pn", "t", "all", "count", "nb", "an"], "a": ["aa", "s", "auto", "sta", "va", "ma", "p", "ai", "c", "ama", "aw", "o", "y", "r", "la", "ba", "mA", "ab", "array", "da", "x", "A", "w", "ia", "args", "u", "d", "aaa", "f", "sa", "ac", "ga", "area", "am", "ae", "alpha", "ea", "e", "an", "ad"], "m": ["k", "mn", "ma", "p", "ms", "g", "nm", "c", "y", "r", "o", "h", "ym", "md", "z", "x", "fm", "mu", "w", "cm", "u", "d", "ln", "f", "j", "sm", "M", "v", "e", "an"], "l": ["lp", "s", "k", "L", "line", " L", "p", "al", "g", "c", "y", "o", "r", "log", "el", "la", "lc", "z", "kl", "u", "d", "Li", "ll", "ln", "f", "dl", "j", "nl", "length", "len", "v", "limit", "e", "lb", "ls", "li", "lin"], "i": ["gi", "k", "ui", "ie", "int", "qi", "p", "phi", "ai", "c", "h", "y", "ini", "iu", "z", "si", "eni", "x", "yi", "ind", "start", "I", "u", "d", "pi", "j", "f", " j", "xi", "ri", "ni", "ip", "ci", "v", "e", "id", "li", "ii", "bi", "ti"], "b": ["s", "k", "fb", "p", "bs", "g", "c", "y", "r", "emb", "beta", "mb", "zb", "B", "ba", "z", "x", "bl", "sb", "cb", "ob", "bf", "d", "bb", "rb", "ll", "abb", "ok", "f", "bd", "lib", "xb", "length", "gb", "v", "base", "e", "val", "abc", "nb", "lb"]}}
{"code": "s=input()\\nif int(s[:2])<=12 and int(s[:2])>0:\\n    if int(s[2:4])<=12 and int(s[2:4])>0:\\n        print(\"AMBIGUOUS\")\\n    else:\\n        print(\"MMYY\")\\nelif int(s[2:4])<=12 and int(s[2:4])>0:\\n    print(\"YYMM\")\\nelse:\\n    print(\"NA\")", "target": "17", "substitutes": {"s": ["strings", "a", "sound", "spec", "ins", "request", "sample", "p", "states", "g", "c", "i", "y", "sl", "o", "r", "sign", "fs", "es", "search", "x", "S", "w", "sb", "tests", "parts", "services", "ses", "d", "l", "lines", "sg", "f", "sk", "details", "ssl", "m", "sync", "ns", "input", "su", "data", "gs", "b", "ts", "string", "space", "t", "ls", "e", "session", "ds", "submit", "source", "your", "n"]}}
{"code": "n = int(input())\\nc = 0\\n\\ndef devisor(n):\\n    if n == 2:\\n        return 1\\n    else:\\n        if n < 2 or n % 2 == 0:\\n            return 0\\n        elif pow(2,n-1,n) == 1:\\n            return 1\\n        else: return 0\\n\\nfor i in range(n):\\n    x = int(input())\\n    c += devisor(x)\\n\\nprint(c)", "target": "735", "substitutes": {"n": ["k", "p", "na", "g", "o", "r", "nc", "y", "un", "num", "number", "net", "ot", "rn", "size", "ne", "nu", "z", "fn", "nan", "sn", "w", "conn", "l", "cn", "d", "u", "nn", "nt", "f", "j", "ln", "m", "network", "ns", "no", "v", "b", "len", "t", "N", "e", "pn", "count", "dn", "nb", "an"], "c": ["s", "k", "cur", "code", "p", "init", "g", "y", "r", "h", "o", "nc", "ec", "C", "lc", "z", "ce", "unc", "cent", "cache", "cu", "cv", "con", "cm", "l", "cn", "d", "u", "f", "cs", "m", "ac", "ci", "v", "b", "t", "e", "count", "cr", "pc", "xc", "enc"], "i": ["gi", "k", "ai", "g", "isin", "y", "h", "nc", "ix", "num", "iu", "z", "ind", "I", "it", "u", "d", "j", "f", "xi", "ci", "e", "id", "li", "ii", "bit", "ip"], "x": ["dx", "k", "int", "X", "p", "xs", "xx", "y", "o", "rx", "ix", "px", "z", "xt", "ex", "index", "xxx", "w", "cross", "l", "u", "d", "q", "f", "xi", "input", "v", "e", "t", "xes", "xc"]}}
{"code": "import sys\\ndef I(): return int(sys.stdin.readline().rstrip())\\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #\u7a7a\u767d\u3042\u308a\\n\\n\\nN = I()\\nA = LI()\\nmod = 10**9+7\\ns = sum(A)\\ns %= mod\\n\\na = s**2-sum(A[i]**2 for i in range(N))\\na %= mod\\na *= pow(2,mod-2,mod)\\na %= mod\\n\\nprint(a)\\n", "target": "198", "substitutes": {}}
{"code": "n = int(input())\\nHXY = []\\nfor i in range(n):\\n    x, y, h = map(int, input().split())\\n    HXY.append((h, x, y))\\n\\nHXY.sort(reverse=True)\\n\\nfor i in range(101):\\n    for j in range(101):\\n        H = -1\\n        for k in range(n):\\n            h, x, y = HXY[k]\\n            if h > 0:\\n                temp = h + abs(x-i) + abs(y-j)\\n                if H > 0:\\n                    if H != temp:\\n                        break\\n                else:\\n                    H = temp\\n            else:\\n                if H - abs(x-i) - abs(y-j) > 0:\\n                    break\\n        else:\\n            if H > 0:\\n                print(i, j, H)\\n", "target": "114", "substitutes": {"n": [" N", "s", "a", "p", "c", "o", "nc", "num", "r", "ne", "z", "nan", "sn", "w", "l", "u", "cn", "d", "nn", "nt", "f", "network", "m", "Ns", "ns", "b", "v", "np", "t", "N", "nb"], "HXY": ["hScene", "hProxy", "HLP", "HXX", "FXX", "Vxy", " HScene", "FXY", "HScene", " HProxy", " HIE", "WXY", "FAPI", "HRT", "Hxy", " HAPI", "HProxy", "VXY", "HMAPI", "Fxy", " HLP", " HRT", "HHXY", "hxy", "hIE", "HIE", "VXi", "HHIE", "hXi", "HXi", "HHLP", "hLP", " HXi", "HMXY", "Wxy", "WProxy", "HMxy", "WScene", "VRT", "HMXX", "HHXi", "hXY", "HAPI", " HXX", "hRT", " Hxy"], "i": ["gi", "ih", "ji", "vi", "a", "sh", "ie", "int", "chi", "qi", "p", "phi", "ai", "c", "o", "ix", "ini", "iu", "z", "si", "index", "yi", "ind", "w", "I", "l", "fi", "u", "pi", "d", "ki", "io", "f", "m", "xi", "ni", "hi", "ci", "v", "b", "e", "zi", "id", "li", "ii", "ip"], "x": ["dx", "s", "wa", "a", "int", "X", "p", "work", "ic", "c", "xx", "yx", "o", "ix", "px", "pos", "rx", "el", "temp", "z", "on", "ex", "index", "image", "w", "cross", "l", "u", "d", "f", "ax", "m", "xi", "hi", "data", "ci", "b", "v", "t", "e", "xy", "zi", "id"], "y": ["a", "dy", "ye", "p", "Y", "c", "ay", "temp", "z", "zy", "yi", "wy", "cy", "yo", "w", "ny", "l", "u", "d", "sy", "ky", "m", "yy", "ya", "oy", "hi", "b", "v", "t", "e", "xy", "py", "vy", "ii", "ry", "ey"], "h": ["rh", "hs", "s", "ih", "sh", "p", "kh", "g", "c", "oh", "gh", "r", "num", "o", "ht", "eh", "ph", "temp", "z", "index", "ho", "w", "hh", "l", "bh", "u", "d", "q", "he", "f", "m", "han", "hi", "v", "b", "t", "e", "ha", "hm", "id"], "j": ["km", "ji", "a", "sh", "ie", "code", "ja", "p", "g", " dj", "c", "K", "jj", "o", "kk", "ix", "ijk", "kn", "z", "je", "kl", "si", "jet", "yi", "l", "ok", "u", "uj", "ark", "d", "q", "js", "f", "jp", " ki", "jc", "xi", "aj", "ij", "J", "key", "v", " ii", "ck", "b", "t", "e", "py", "kj", "li", "ii", "ik"], "H": ["F", "rh", "Hi", "E", "OH", "L", "V", "HS", "Q", "X", "p", "Y", "HB", "oh", "HP", "K", "ht", "SH", "Ha", "HC", "AH", "O", "P", "T", "C", "B", "temp", "WH", "NH", "ho", "A", "HE", "W", "He", "EH", "HTTP", "I", "His", "HK", "GH", "HD", "he", "Z", "HH", "HM", "MH", "Temp", "HI", "PH", "U", "R", "J", "M", "v", "HT", "FH", "N", "G", "HA", "RH"], "k": ["ih", "p", "kh", "g", "c", "K", "o", "r", "kk", "ijk", "ks", "kn", "z", "kw", "w", "l", "ok", "u", "d", "q", "ki", "sk", "ky", "f", "m", "ku", "v", "key", " ii", "ck", "e", "b", "ik"]}}
{"code": "#http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_1_A&lang=jp\\n#?????\\????????????????\u00a3?\\n#?\u00a8?????????????????????????????????\u00b1?????????\\ndef insertion_sort(target_list, n_list):\\n    \\n    for focus_index in range(1, n_list):\\n        print(*target_list)\\n        target = target_list[focus_index]\\n        if target < target_list[focus_index - 1]:#?????\u00a3?????\u00b0??????????????\u00a7??????\\n            compare_index = focus_index\\n\\n            while compare_index > 0 and target_list[compare_index - 1] > target:\\n                target_list[compare_index] = target_list[compare_index - 1]\\n                compare_index -= 1;\\n\\n            target_list[compare_index] = target\\n    \\n    return target_list\\n\\ndef main():\\n    n_list = int(input())\\n    target_list = [int(a) for a in input().split()]\\n    print(*insertion_sort(target_list, n_list))\\nif __name__ == \"__main__\":\\n    main()", "target": "217", "substitutes": {}}
{"code": "n,t = map(int,input().split())\\nx = list(map(int,input().split()))\\nm = 0\\n\\nfor i in range(1,n):\\n    if x[i] - t <= x[i - 1]:\\n        m += x[i] - x[i - 1]\\n    else:\\n        m += t\\n    \\n\\nprint(m + t)", "target": "355", "substitutes": {"n": ["s", "k", "p", "c", "y", "number", "nc", "num", "o", "net", "h", "size", "ne", "z", "fn", "w", "nat", "l", "u", "d", "nt", "f", "network", "j", "ns", "len", "b", "np", "v", "N", "e", "nb"], "t": ["s", "k", "a", "at", "wt", "tm", "tt", "to", "p", "g", "c", "y", "o", "tp", "ot", "r", "h", "tn", "pt", "T", "temp", "ti", "z", "st", "w", "l", "u", "d", "max", "ta", "dt", "f", "j", "te", "ts", "v", "b", "e"], "x": ["s", "a", "int", "python", "X", "p", "tx", "exp", "ic", "xs", "c", "g", "xx", "na", "plus", "y", "rx", "o", "ix", "h", "number", "any", "T", "temp", "z", "xt", "on", "ex", "index", "w", "cross", "l", "u", "d", "max", "q", "one", "f", "ax", "xi", "data", "v", "xp", "e", "xes", "xy", "xc", "test"], "m": ["s", "a", "int", "span", "tm", "p", "g", "c", "y", "o", "h", "r", "im", "ym", "num", "T", "z", "time", "om", "cm", "l", "u", "d", "j", "f", "am", "M", "v", "dim", "b", "e", "mm", "gm", "mc", "wm", "an", "um"], "i": ["gi", "ji", "k", "ui", "a", "ie", "int", "qi", "p", "ai", "c", "y", "h", "o", "ini", "ix", "iu", "ti", "z", "si", "eni", "index", "ind", "start", "I", "l", "fi", "u", "d", "pi", "j", "f", "io", "xi", "ori", "di", "ci", "v", "b", "my", "e", "multi", "id", "li", "ii", "bi"]}}
{"code": "n = int(input())\\na_l1 = list(map(int, input().split()))\\na_l2 = list(map(int, input().split()))\\nc = 0\\nm_a_l1 = []\\nfor i in a_l1:\\n    c += i\\n    m_a_l1.append(c)\\nc = 0\\nm_a_l2 = [0] * n\\nfor i,j in enumerate(reversed(a_l2)):\\n    c += j\\n    m_a_l2[-1-i] = c\\n\\nans = 0\\nfor i,j in zip(m_a_l1, m_a_l2):\\n    ans = max(i+j, ans)\\nprint(ans)", "target": "476", "substitutes": {"n": ["s", "k", "p", "g", "o", "r", "nc", "num", "h", "net", "y", "nu", "ne", "z", "x", "sn", "w", "ny", "l", "u", "pi", "d", "nn", "nt", "q", "f", "m", "ns", "b", "t", "N", "e", "li", "nb"], "a_l1": ["a_ln", "a_lan", "a_l4", "a_lone", "a_lc3", "a_L2", "a_lc1", "a_l3", "a_lc2", "a_lc4", "a_la1", "a_p3", "a_laone", "a_L3", "a_p2", "a_la2", "a_Lone", "a_L4", "a_L1", "a_Ln", "a_p4", "a_p1"], "a_l2": ["a_lc0", "a_c4", "a_l4", "a_ctwo", "a_lc3", "a_ll1", "a_ll2", "a_L2", "a_c2", "a_lc1", "a_l3", "a_l0", "a_lc2", "a_latwo", "a_la1", "a_L3", "a_c1", "a_la2", "a_ll3", "a_ll0", "a_ltwo", "a_L4", "a_la4", "a_L1", "a_L0", "a_Ltwo"], "c": ["s", "k", "a", "p", "init", "g", "y", "r", "o", "h", "nc", "ec", "cp", "C", "lc", "uc", "z", "cus", "fc", "ch", "ce", "x", "can", "cy", "cu", "w", "con", "cm", "l", "u", "d", "cn", "max", "f", "ca", "cs", "m", "ac", "cin", "dc", "cit", "ci", "ct", "b", "cf", "e", "cr", "count", "cc", "an"], "m_a_l1": ["m_a_d9", "m_a_lc2", "m_a_p9", "m_a_la3", "m_a_lc3", "m_a_d2", "m_a_L3", "m_a_la2", "m_a_l8", "m_a_d1", "m_a_d3", "m_a_v3", "m_a_l9", "m_a_v8", "m_a_v2", "m_a_la9", "m_a_p2", "m_a_lc8", "m_a_L8", "m_a_L2", "m_a_la1", "m_a_p1", "m_a_p8", "m_a_p3", "m_a_l3", "m_a_lc1", "m_a_v1", "m_a_L1"], "i": ["gi", "ih", "ji", "k", "ui", "a", "ie", "ei", "ib", "int", "chi", "qi", "mi", "p", "ic", "ai", "g", "phi", "y", "r", "o", "ini", "im", "h", "iq", "iu", "ti", "z", "si", "x", "yi", "ind", "I", "ia", "it", "l", "u", "d", "pi", "io", "f", "m", "xi", "di", "ni", "ci", "ij", "v", "b", "bc", "ice", "il", "e", "iw", "zi", "id", "li", "ii", "ik", "bi", "ip"], "m_a_l2": ["m_a_la0", "m_a_m2", "m_a_p4", "m_a_lb", "m_a_b4", "m_a_bb", "m_a_la2", "m_a_Lb", "m_a_m0", "m_a_l8", "m_a_L4", "m_a_m4", "m_a_v8", "m_a_l0", "m_a_v2", "m_a_b2", "m_a_p2", "m_a_la4", "m_a_L8", "m_a_L2", "m_a_la1", "m_a_b1", "m_a_p1", "m_a_la8", "m_a_v4", "m_a_v1", "m_a_m1", "m_a_L1", "m_a_lab", "m_a_l4", "m_a_p0"], "j": ["ji", "k", "ie", "int", "str", "ja", "p", "g", "h", "r", "y", "jj", "dj", "un", "o", "el", "jl", "z", "ch", "x", "ind", "adj", "it", "l", "u", "d", "uj", "q", "job", "f", "jp", "cs", "m", "jc", "br", "aj", "ip", "ij", "J", "ci", "v", "b", "e", "fr", "se", "li", "ii", "er"], "ans": ["s", "a", "lan", "span", "nas", "cas", "ras", "na", "ai", "gan", "aning", "anas", "AN", "CNN", "ANS", "anes", "ks", "asts", "annels", "ane", "ann", "anc", " cs", "cus", "ana", "ania", "x", "can", "nan", "ars", "kin", "anus", "con", "aned", "cn", "ace", "ons", "aus", "ens", "ca", "cs", "leans", "ns", "scan", "ci", "ls", "cons", "ces", "an", "ins"]}}
{"code": "from math import floor \\nfrom fractions import Fraction\\n\\nA, B = input().split()\\nA = int(A)\\nB = Fraction(B)\\nprint(floor(A*B))", "target": "44", "substitutes": {"A": ["F", " AA", "E", "Access", "Ca", "a", "L", "All", "Az", "Area", "H", "X", "MA", "Y", "AP", "Adam", "LA", "EA", "This", "Math", "BA", "AB", "P", "AU", "C", "As", "mA", "D", "T", "ICA", "API", "AA", " C", "Alpha", "S", "W", "File", "I", "ABC", "Average", "Array", "CA", "Java", "U", "AY", "Part", "Input", "M", "alpha", " a", "N", "G", "Am", "NA", "An"], "B": ["F", "E", "EB", "Number", "L", "LB", "V", "Q", "Bah", "Y", "UB", "PB", "Bar", "Bi", "DB", "BA", "AB", "FB", "P", "T", "C", "D", "SB", "BB", "BC", "BI", "Bur", "TB", "I", "MB", "Ab", "BE", "BR", "OB", "Big", "WB", "GB", "BS", "M", "J", "b", "NB", "Business", "QB", "N", "Other", "G", "BER", "Block", "BF", "Ub", "Bs"]}}
{"code": "N = int(input())\\nA = sorted(list(map(int,input().split())))\\n\\nans_list = []\\np = []\\nn = []\\n\\n# \u6700\u5927\u306b\u30d7\u30e9\u30b9\u3001\u6700\u5c0f\u306b\u30de\u30a4\u30ca\u30b9\u3092\u5272\u308a\u5f53\u3066\u308b\\np.append(A[-1])\\nn.append(A[0])\\n\\n# \u6b63\u306a\u3089\u30d7\u30e9\u30b9\u3092\u8ca0\u306a\u3089\u30de\u30a4\u30ca\u30b9\u3092\u5272\u308a\u5f53\u3066\u308b\\nfor a in A[1:-1]:\\n    if a >= 0:\\n        p.append(a)\\n    elif a < 0:\\n        n.append(a)\\n\\n# \u30d7\u30e9\u30b9\u304c\uff11\u3064\u306b\u306a\u308b\u307e\u3067\u6d88\u3059\\nres = n[0]\\nfor ep in p[1:]:\\n    ans_list.append((res, ep))\\n    res -= ep\\nn[0] = res\\np = [p[0]]\\n\\n# \u30de\u30a4\u30ca\u30b9\u304c\u306a\u304f\u306a\u308b\u307e\u3067\u6d88\u3059\\nres = p[0]\\nfor en in n:\\n    ans_list.append((res, en))\\n    res -= en\\n\\n# \u6b8b\u3063\u305f\u3082\u306e\u304c\u6700\u5927\u5024\\nM = res\\nprint(M)\\nfor x, y in ans_list:\\n    print(x, y)", "target": "18", "substitutes": {"N": ["F", "L", "V", "Q", "X", "Y", "Num", "K", "O", "P", "B", "C", "T", "D", "NP", "S", "I", "Ni", "Z", "Ns", "R", "M", "G", "NA"], "A": ["a", "L", "H", "K", "O", "P", "B", "C", "D", "Ar", "Alpha", "S", "ar", "I", "args", "Array", "R", "Pi", "alpha", "b", "an", "all", "G", "NA", "part", "An"], "ans_list": ["an_list", "an2list", "ans2string", "ans_string", "ansoutl", "ans2name", "an2string", "an2name", "ans_l", "ans1list", "an_name", "ans1name", "an_l", "ans2l", "ans1string", "ansoutname", "ans_name", "an_string", "ansoutlist", "ans2list", "ansoutstring", "an2l", "ans1l"], "p": ["s", "ps", "g", "c", "o", "r", "y", "tp", "pos", "P", "z", "ar", "par", "l", "pi", "q", "f", "j", "m", "pp", "v", "b", "np", "t", "e", "part", " P"], "n": ["k", "a", "c", "i", "o", "num", "en", "ne", "nu", "z", "nan", "sn", "l", "cn", "nn", "nt", "m", "ns", "ni", "nr", "v", "np", "t", "pn", "nb", "an"]}}
{"code": "S = input()\\nT = input()\\n\\ndp = [[0 for j in range(len(T) + 1)] for i in range(len(S) + 1)]\\n\\nfor i in range(len(S)):\\n    for j in range(len(T)):\\n        if S[i] == T[j]:\\n            dp[i + 1][j + 1] = max(dp[i][j] + 1, dp[i + 1][j], dp[i][j + 1])\\n        else:\\n            dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])\\n\\nres = []\\nstack = [(len(S), len(T))]\\n\\nwhile stack:\\n    x, y = stack.pop()\\n    if dp[x][y] == 0:\\n        break\\n    if x - 1 >= 0 and dp[x][y] == dp[x - 1][y]:\\n        stack.append((x - 1, y))\\n    elif y - 1 >= 0 and dp[x][y] == dp[x][y - 1]:\\n        stack.append((x, y - 1))\\n    else:\\n        res.append(S[x - 1])\\n        stack.append((x - 1, y - 1))\\n\\nprint(''.join(res[::-1]))", "target": "129", "substitutes": {"S": ["F", "s", "TP", "E", "L", "DS", "V", "H", "Q", "X", "SF", "Y", "SE", "p", "NS", "Si", "TS", "PS", "SH", "ST", "SI", "O", "SA", "P", "B", "C", "D", "St", "Ps", "A", "SL", "W", "RS", "Sl", "I", "Ds", "SS", "DP", "Single", "Set", "CS", "U", "R", "M", "SM", "SP", "N", "G", "SSL", "SU"], "T": ["F", "TP", "CT", "E", "L", "V", "LT", "H", "Q", "X", "Y", "TA", "Test", "TS", "TN", "TH", "O", "P", "B", "C", "D", "TG", "TB", "DT", "A", "Tab", "Sl", "NT", "UT", "ET", "TX", "Z", "TT", "TC", "U", "R", "Total", "M", "J", "TF", "t", "N", "WT", "G", "VT"], "dp": ["s", "dd", "sh", "DC", "cp", "dm", "DP", "proxy", "dc", "address", "data", "CP", "np", "pd", "hp", "cmp", "channel", "distance", "xs", "dat", "projects", "pos", "api", "dep", "dB", "NP", "mp", "vp", "pp", "wd", "direct", "pg", "ip", "density", "dh", "wp", "p", "dist", "ps", "tp", "gp", "sp", "params", "d", "point", "dr", "resp", "pkg", "iper", "alpha", "dim", "imp", "yp", "config", "direction", "lp", "TP", "Pg", "pb", "fp", "pm", "rep", "P", "vs", "D", "grad", "xd", "dl", "dt", "deb", "df", "di", "db", "ds"], "j": ["ji", "k", "ui", "a", "ie", "int", "ja", "p", "_", "c", "jo", "o", "jj", "r", "im", "dj", "ix", "el", "jit", "jl", "z", "index", "jet", "ind", "I", "l", "u", "uj", "d", "q", "js", "jp", "f", "m", "oj", "jc", "io", "aj", "length", "ij", "J", "v", "b", "key", "t", "e", "id", "li", "ii", "h", "n", "ip"], "i": ["gi", "ji", "s", "k", "ui", "a", "ie", "int", "ei", "qi", "p", "phi", "ai", "c", "oi", "o", "ini", "im", "ix", "iu", "ti", "z", "si", "index", "ind", "I", "it", "l", "u", "pi", "d", "ki", "io", "f", "m", "xi", "ori", "di", "ni", "ci", "ij", "ip", "v", "b", "e", "info", "id", "li", "ii", "ik", "bi", "n"], "res": ["ack", "Rs", "rest", "rus", "ras", "pop", "vals", "p", "arr", "ps", "rows", "Results", "rx", "r", "results", "result", "pres", "pos", "re", "vs", "grid", "rev", "params", "response", "cache", "Res", "remote", "req", "q", "resolution", "js", "RES", "range", "details", "right", "resp", "list", "data", "os", "complete", "rem", "ress", "ret", "rs"], "stack": ["new", "layer", "ack", "cycle", "change", "rest", "line", "int", "sc", "pop", "queue", "roll", "arr", "stream", "Stack", "context", "cases", "sl", "pos", "switch", "chain", "ST", "slice", "wrapper", "left", "push", "scroll", "force", "forward", "lc", "grid", "array", "que", "index", "cache", "wrap", "stage", "st", "scope", "reverse", "ind", "pack", "l", "box", "out", "function", "self", "pull", "sequence", "console", "depth", "set", "wire", "list", "check", "complete", "fl", "ws", "v", "view", "cr", "all", "count", "fr", "play", "cl", "range", "loop", "tc"], "x": ["dx", "name", "k", "int", "code", "python", "X", "p", "tx", "event", "xs", "c", "host", "xx", "yx", "fx", "h", "rx", "ix", "px", "pos", "o", "el", "any", "z", "xt", "on", "ex", "index", "wy", "image", "cy", "w", "cross", "l", "patch", "u", "d", "wx", "q", "one", "f", "ax", "sync", "xi", "ya", "data", "ip", "xe", "v", "b", "key", "xp", "t", "pe", "e", "xy", "my", "id", "xc", "n"], "y": ["yr", "s", "name", "ys", "a", "dy", "ye", "hy", "p", "Y", "c", "yx", "yn", "o", "ix", "ym", "ay", "any", "z", "zy", "ty", "ch", "yi", "yo", "cy", "wy", "ny", "l", "yt", "u", "d", "q", "sy", "f", "ky", "io", "yy", "ya", "oy", "iy", "type", "b", "v", "key", "yl", "e", "my", "t", "xy", "py", "id", "vy", "col", "ry", "ey", "n"]}}
{"code": "import sys\\n\\nl = []\\nresult = []\\nfor i in sys.stdin:\\n    l.append(i)\\n\\nfor i in range(0,len(l)):\\n    l[i] = l[i].split()\\n    for j in range(0,len(l[i])):\\n        l[i][j] = int(l[i][j])\\n\\nfor i in range(1,l[0][0]+1):\\n    a = []\\n    for j in range(0,l[0][1]):\\n        a.append(l[i][j] * l[j+l[0][0]+1][0])\\n    result.append(sum(a))\\n\\nfor data in result:\\n    print(data)\\n", "target": "614", "substitutes": {"l": ["lp", "s", "loc", "ol", "L", "line", "shell", "p", "al", "g", "c", "h", "sl", "r", "o", "log", "like", "el", "iter", "left", "split", "la", "lo", "lc", "kl", "array", "z", "x", "url", "u", "d", "pl", "ll", "ln", "f", "dl", "lib", "m", "rl", "list", "fl", "b", "v", "ell", "e", "ls", "t", "le", "il", "all", "li", "ul", "cl", "n"], "result": ["lp", "end", "product", "arr", "success", "err", "extra", "load", "dict", "r", "results", "ult", "section", "coll", "array", "final", "ch", "search", "cache", "response", "Result", "diff", "master", "reverse", "root", "report", "page", "status", "rc", "found", "area", "output", "df", "parent", "list", "db", "match", "average", "true", "order", "e", "all", "message", "ret", "source", "test", "res", "info"], "i": ["gi", "ji", "ui", "ie", "int", "p", "ai", "g", "c", "oi", "o", "r", "y", "ini", "im", "ix", "iu", "api", "lo", "ani", "z", "si", "eni", "index", "yi", "x", "ind", "start", "I", "ia", "it", "u", "d", "uri", "pi", "ki", "f", "io", "m", "cli", "xi", "ori", "ri", "di", "ci", "ip", "ni", "v", "b", "e", "il", "info", "zi", "id", "li", "ii", "n", "bi", "ti"], "j": ["ji", "k", "ie", "int", "ja", "p", "g", "c", "jo", "dj", "y", "jj", "o", "r", "h", "iu", "jit", "jl", "z", "je", "si", "index", "x", "ind", "start", "obj", "u", "uj", "d", "q", "js", "jp", "f", "m", "jc", "oj", "xi", "aj", "ci", "ij", "J", "v", "b", "key", "e", "kj", "li", "ii", "n"], "a": ["aa", "ma", "p", "ai", "c", "ama", "fa", "aw", "r", "api", "ba", "au", "array", "ana", "da", "x", "A", "ar", "ata", "u", "d", "ta", "aaa", "f", "sa", "ac", "ga", "area", "am", "aj", "ae", "alpha", "b", "ea", "e", "an", "ad", "n"], "data": ["gi", "ji", "aa", "new", "ei", "code", "arr", "na", "p", "dat", "r", "DATA", "section", "la", "z", "array", "div", "da", "response", "obj", "ata", "u", "d", "row", "f", "Data", "function", "df", "database", "entry", "di", "list", "alpha", "input", "output", "v", "e", "id", "ul", "li", "source", "ad", " d"]}}
{"code": "import sys\\ninput = lambda: sys.stdin.readline().rstrip()\\n\\ndef main():\\n    o = input()\\n    e = input()\\n    ans = []\\n    for i in range(max(len(o), len(e))):\\n        if i < len(o):\\n            ans.append(o[i])\\n        if i < len(e):\\n            ans.append(e[i])\\n    print(''.join(ans))\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "102", "substitutes": {"input": [" inspect", "name", "text", "raw", " output", "line", "int", "python", "table", "open", "reader", "method", " function", "enter", "stream", "plus", "inside", "element", "format", " inputs", "main", "comment", "connect", "search", " python", "accept", "out", " Input", "header", "join", "close", "script", "pull", "option", "output", "parent", " int", "data", "Input", "single", "type", "util", "string", "view", "select", "help", "print", "keep", "filter", "submit", "source", "param", "form", "ins"], "o": ["s", "k", "ol", "a", "auto", "vo", "oo", "p", "go", "to", "oi", "y", "bo", "O", "fo", "ou", "oe", "od", "po", "yo", "w", "so", "ko", "l", "u", "d", "do", "mo", "f", "io", "one", "m", "iso", "no", "os", "oa", "b", "v", "ow", "t", "an", "off", "n"], "e": ["em", "s", "other", "E", "be", "ve", "a", "ie", "ze", "ed", "ele", "p", "ede", "c", "element", "eve", "h", "ec", "en", "y", "ine", "r", "el", "ite", "ne", "oe", "es", "ce", "x", "w", "l", "ee", "d", "u", "one", "f", "eu", "eb", "m", "ffe", "ue", "ae", "xe", "ell", "v", "ea", "b", "pe", "ev", "er", "ey", "n"], "ans": ["a", "ents", "lan", "nas", "ras", "amps", "eps", "ams", "atan", "na", "ps", "cas", "ats", "ions", "results", "anas", "AN", "aos", "photos", "ANS", "asts", "rules", "ks", "anes", "aces", "ann", "anon", "ani", "ays", "ana", "ands", "params", " means", "ars", "args", "aned", "parts", "fts", "atts", "ons", "aus", "ens", "sk", "ils", "ants", "ns", "list", "os", "ings", "ls", "cons", "olds", "opens", "ds", "an", "ins"], "i": ["gi", "ji", "k", "ui", "vi", "a", "ie", "int", "chi", "qi", "mi", "p", "ai", "c", "oi", "y", "ix", "ini", "iu", "slice", "z", "si", "eni", "index", "x", "yi", "mu", "ind", "start", "I", "uri", "l", "fi", "u", "pi", "d", "j", "f", "io", "xi", "di", "ri", "hi", "ip", "ci", "ni", "info", "zi", "id", "multi", "li", "ii", "n", "bi", "ti"]}}
{"code": "from sys import stdin\\ndata = stdin.readline().rstrip()\\n\\na = int(data.split()[0])\\nb = int(data.split()[1])\\n\\nprint(a * b)", "target": "111", "substitutes": {"data": ["s", "name", "raw", "text", "value", "line", "code", "reader", "p", "i", "dat", "r", "format", "result", "DATA", "content", "empty", "server", "response", "file", "body", "ata", "connection", "l", "lines", "d", "buffer", "out", "f", "Data", "status", "function", "bang", "json", "output", "input", "database", "type", "string", "message", "inner", "source", "feed", "n"], "a": ["aa", "p", "aw", "c", "ama", "y", "la", "ba", "ab", "au", "da", "A", "af", "ia", "l", "bb", "d", "aaa", "f", "sa", "ax", "asa", "ac", "area", "aj", "am", "ae", "alpha", "ea", "e", "an"], "b": ["s", "be", "aa", "k", "ib", "fb", "bs", "bp", "g", "c", "i", " B", "y", "o", "emb", "mb", "beta", "B", "ba", "ab", "sb", "cb", "l", "ob", "bb", "d", "u", "rb", "f", "eb", "j", "bot", "db", "v", "base", "e", "nb", "bi", "n"]}}
{"code": "import sys\\nfrom itertools import permutations\\n\\nread = sys.stdin.read\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\nsys.setrecursionlimit(10 ** 9)\\nINF = 1 << 60\\nMOD = 1000000007\\n\\n\\ndef main():\\n    N, M, *AB = map(int, read().split())\\n    G = [[] for _ in range(N)]\\n    for a, b in zip(*[iter(AB)] * 2):\\n        G[a - 1].append(b - 1)\\n        G[b - 1].append(a - 1)\\n\\n    def dfs(v, seen):\\n        if len(seen) == N:\\n            return 1\\n\\n        ans = 0\\n        for nv in G[v]:\\n            if nv not in seen:\\n                seen.add(nv)\\n                ans += dfs(nv, seen)\\n                seen.remove(nv)\\n\\n        return ans\\n\\n    print(dfs(0, {0}))\\n    return\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "143", "substitutes": {"read": ["new", "mode", "raw", "align", "open", " READ", "reader", "feed", " write", "stream", "stat", " get", "load", "resource", "lex", "cess", " mode", "work", "Read", "rec", "r", "rx", "re", "content", "connect", "write", " parse", "run", "READ", "search", "x", "memory", "file", "start", " stream", "current", " reading", "exec", "get", "php", "readable", " find", "update", "walk", " access", " reads", "scan", "input", "data", "reads", "check", "find", "select", "include", "play", "reading", "print", " Read", " reader", "loop", " readers"], "readline": [" readlimit", " readlen", "READline", "breakline", "READwrite", "writelimit", "breaklen", "breaklimit", "readlen", " readfile", "writelen", "readwrite", "writelines", "READfile", "readingline", "writeline", "readingstring", "readstring", "readingfile", " readstring", "readingwrite", " readwrite", "readlimit", "READstring", "readfile", "breaklines"], "readlines": ["readstrings", "readinglines", "ReadLine", "inputline", "readfiles", "readLine", " readfiles", "Readstrings", "Readline", " readbytes", "writelines", "Readlines", "readingline", "inputbytes", "writeline", "writefiles", "readbytes", " readstrings", "writebytes", " readLine", "inputlines", "inputfiles", "readingstrings", "readingLine"], "INF": [" INAF", "INFF", "INAF", " inFF", "INI", " inAF", "inF", "inFF", "inI", " inF", " inI", " INFF", " INI", "inAF"], "MOD": [" CRC", " LOG", "MAG", " PHP", "mem", " mod", " LR", "RR", "ACC", "Mod", " EXP", " Mod", " TIME", " MEM", " CC", "MODE", "LOG", "MAX", "Z", " mem", "R", "CC", "mod", "REG", " Mem", " Z", " CP", "RM"], "N": ["F", "E", "L", "V", "H", "Q", "X", "Y", "NS", "NE", "K", "NM", "O", "P", "B", "C", "T", "D", "Ne", "S", "A", "W", "I", "NT", "Z", "Ns", "U", "R", "NV", "J", "NA", "n"], "M": ["F", "E", "L", "V", "H", "Q", "Y", "K", "NM", "AN", "O", "P", "B", "T", "C", "D", "S", "A", "I", "MB", "Z", "m", "U", "R", "J", "NA"], "AB": ["AD", "EB", "AK", "AI", "UB", "AP", "AR", "TA", "ACA", "AST", "IB", "AN", "BA", "AM", "AH", "ACC", "B", "AV", "AC", "SB", "ab", "BB", "AA", "A", "Tab", "ABC", "ANG", "Ab", "ANC", "LAB", "OB", "CA", "AF", "NB", "AAF", "AG", "APP", "APS"], "G": ["F", "GM", "GA", "E", "group", "L", "IG", "GE", "V", "Gl", "VG", "H", "Q", "Y", "Gs", "g", "Ge", "GROUP", "P", "B", "C", "FG", "GU", "A", "GC", "W", "GP", "I", "GR", "GH", "GF", "CG", "GG", "Graph", "U", "GB", "graph", "R", "GS", "J", "gs", "GN", "LG", "Ga", "AG", "GV", "Group"], "_": ["s", "__", "p", " time", " __", "x", "f", "all", "n"], "a": ["aa", "s", "va", "ma", "p", "ai", "g", "aw", "c", "y", "la", "ba", "ab", "au", "z", "pa", "da", "x", "A", "af", "w", "ia", "ak", "u", "ach", "aaa", "ca", "sa", "f", "asa", "ac", "ga", "m", "area", "aj", "ae", "alpha", "ea", "an", "e", "ad", "n"], "b": ["s", "aa", "ib", "fb", "p", "bs", "g", "c", "i", "y", "r", "o", "wb", "ba", "B", "ab", "z", "x", "A", "sb", "l", "ob", "bb", "d", "bf", "rb", "bh", "j", "eb", "f", "m", "bd", "br", "e", "bc", "nb", "lb", "bi", "n"], "v": ["s", "k", "vi", "uv", "V", "vo", "p", "ven", "nav", "g", "c", "h", "gu", "vid", "lv", "vs", "vin", "rev", "vp", "nov", "vm", "cv", "l", "u", "f", "iv", "vv", "vc", "van", "NV", "tv", "sv", "ev", "vd", "vg", "n"], "seen": ["served", "sent", "online", "ranked", "en", "confirmed", "received", "lv", "thought", "found", "NV", "data", "changed", "se", "cluded", "new", "sex", "known", "given", "section", "lc", "original", " unseen", "cv", "aved", "nw", "bidden", "defined", "sequ", "id", "closed", "next", "broken", "an", "vae", "finished", "matched", "shown", "gan", "result", "views", "rev", "saw", "expected", "see", "set", "view", "used", "sav", "config", "written", "sc", " observed", "again", "visible", "enum", "c", "nc", "photos", "iq", "registered", "hidden", "valid", "selected", "opened", "kept", "aned", "ordered", "connected", "sv", "generated", "n"], "ans": ["ees", "s", "ents", "lan", "nas", "amps", "ends", "ams", "eps", "na", "ats", "ions", "anas", "AN", "photos", "ads", "ANS", "ks", "aces", "vs", "ann", "anon", "uns", "anc", "ana", "ays", "als", "can", "outs", " means", "es", "An", "ars", " scans", "aned", "lines", "ations", "ons", "ens", "ants", "ns", "ases", "reads", "ings", "an", "opens", "ds", "angs", " Ans"], "nv": ["uv", "vo", "NL", "chev", "ven", "sov", "nm", "c", "vu", "nc", "vid", " vi", "rn", " vend", "lv", "vs", "vin", "ne", "eni", "nov", "vp", "nil", "sn", "inv", "cv", "vr", "ant", "nn", "nt", "nz", "ov", "anne", "iv", "nw", "ns", "vv", "vc", "NV", " NV", "nl", "ni", "nr", "np", "pn", " n", "sv", "enc", "dn", "ev", "nb", "vd", "vg", "n"]}}
{"code": "s = list(str(input()))\\nl = set(s)\\nfor i in range(26):\\n    c = chr(ord('a')+i)\\n    if c not in l:\\n        print(c)\\n        exit()\\nelse:\\n    print('None')\\n", "target": "767", "substitutes": {"s": ["a", "strings", "south", "p", "states", "g", "c", "xs", "sym", "o", "sl", "r", "split", "si", "S", "sb", "services", "ses", "d", "lines", "f", "sa", "cs", "m", "ssl", "sections", "ns", "os", "b", "letters", "t", "ls", "e", "ds", "source", "n"], "l": ["lp", "loc", "ol", "L", " L", "p", "g", "c", "o", "sl", "r", " c", "el", "left", "la", "lv", "lc", "kl", "ll", "ln", "f", "dl", "acl", "rl", "list", "nl", " ls", "ci", "b", "v", "lb", "e", "ls", "le", "li", "cl", "val", "n", "lo"], "i": ["k", "a", "ie", "int", "p", "phi", "inter", "c", "h", "y", "r", "ix", "pos", "iu", "z", "si", "index", "x", "ind", "start", "I", "u", "d", "pi", "f", "j", "m", "xi", "ip", "ci", "v", "b", "e", "id", "li", "ii", "n", "ti"]}}
{"code": "int1 = lambda x: int(x) - 1\\n\\nN, M = map(int, input().split())\\n\\nred = [True] + [False] * (N-1)\\nn_ball = [1] * N\\n\\nfor _ in range(M):\\n    x,y = map(int1, input().split())\\n    if red[x]:\\n        red[y] = True\\n        n_ball[x] -= 1\\n        n_ball[y] += 1\\n        if n_ball[x] == 0:\\n            red[x] = False\\n    else:\\n        n_ball[x] -= 1\\n        n_ball[y] += 1\\n\\nprint(sum(red))", "target": "311", "substitutes": {"int1": ["int7", "ints7", "Intn", "float64", "int5", "int2", "int64", "intsn", "float1", "val64", " intn", "ints1", "val6", "float2", "int6", "integer64", "integer6", "float6", "integer1", " int7", "val1", "ints5", "Int7", " int5", "Int1", "val2", "Int5", "integer2", "intn"], "N": ["F", "MN", "E", "L", "V", "NN", "H", "Q", "X", "Y", "NC", "Num", "NS", "K", "NM", "CNN", "O", "P", "T", "C", "B", "D", "S", "W", "I", "Ni", "Z", "Ns", "ND", "U", "R", "J", "CN", " n", "G", " Ne", "n"], "M": ["F", "MN", "E", "L", "V", "H", "Q", "X", "Y", "K", "DM", "RM", "NM", "O", "P", "B", "T", "LM", "D", "C", "MD", "S", "W", "CM", "I", "Z", "m", "U", "R", "J", "MF", "G", "n"], "red": ["bad", "error", "redo", "rod", "cut", "a", "rest", "ored", "int", "ed", "yellow", "p", "cond", "pre", "success", "c", "i", "colored", "case", "r", "hard", "log", "re", "blue", "ded", "sign", "rot", "ned", "original", "white", "ring", "res", "ind", "Red", "pred", "failed", "cart", "bug", "redd", "frac", "trans", "none", "pad", "data", "RED", "alpha", "match", "black", "len", "space", "count", "reset", "id", "front", "broken", "rad"], "n_ball": ["npyhall", "n__square", "npyleague", "n__slice", "npyball", "nocangle", "nocballs", "n_square", "nJline", "nFball", "n_Ball", "n_balls", "nFballs", "N_balls", "n__line", " n_hall", "nFline", " n_line", "n_angle", "nFslice", " n_sum", " n_angle", "n_line", "nachall", "nJball", "N_line", "N_square", "n_hall", "N_key", "n_slice", " n_slice", "nocsum", "n_league", "npyballs", "N_ball", "n__balls", "nacball", "n__ball", "n__Ball", "nacballs", " n_balls", "nJballs", "N_Ball", "n_sum", " n_league", "n_key", "n__hall", "nocball", "nJkey", "nacline"], "_": [" p", "p", " r", " time", " k", "l", "f", "m", " j", "len", "ip"], "x": ["dx", "name", "k", "int", "code", "ye", "sex", "X", "p", "tx", "xxxxxxxx", "Y", "xs", "c", "g", "i", "xx", "host", "work", "h", "ix", "px", "rx", "z", "xt", "ex", "xxx", "xxxx", "index", "w", "cross", "l", "ctx", "u", "d", "j", "f", "ax", "m", "xi", "ux", "ya", "ci", "ct", " X", "xe", "xp", "v", "key", "e", "t", "b", "xy", "true", "id", "xc", "xa", "n"], "y": ["s", "a", "dy", "int", "ye", "X", "p", "Y", "c", "i", "xx", "o", "year", "z", "zy", "ch", "index", "yi", "cy", "ind", "w", "ny", "l", "yt", "u", "d", "q", "j", "f", "sy", "m", "yy", "ya", "oy", "type", "v", "b", "t", "e", "xy", "col", "vy", "ey", "n"]}}
{"code": "a, b, c = map(int,input().split())\\n\\nif (a+c)==2*b:print('YES')\\nelse:print('NO')", "target": "172", "substitutes": {"a": ["s", "aa", "int", "p", "aw", "i", "ama", "y", "r", "ab", "z", "da", "x", "A", "w", "l", "u", "d", "f", "sa", "ca", "ac", "asa", "m", "am", "aj", "ae", "alpha", "e", "an", "n"], "b": ["aa", "be", "fb", "p", "bs", "bp", "g", "pb", "i", "y", "r", "wb", "bis", "B", "ba", "ab", "sb", "cb", "l", "bb", "d", "rb", "u", "bf", "abb", "f", "j", "bd", "m", "ac", "v", "base", "e", "bc", "count", "nb", "n"], "c": ["s", "k", "sc", "p", "i", "y", "ec", "cp", "C", "z", "ce", "x", "unc", "cy", "cu", "w", "cb", "con", "cm", "l", "u", "d", "cn", "f", "ca", "cs", "ac", "m", "ci", "ct", "cf", "e", "cr", "count", "cc", "col", "n"]}}
{"code": "n = int(input())\\narr = [int(x) for x in input().split()]\\nq = int(input())\\n\\ndictA = {}\\nfor i in arr:\\n    if dictA.get(i): dictA[i] += 1\\n    else: dictA[i] = 1\\n\\nsumm = sum(arr)\\n\\nfor i in range(q):\\n    b, c = list(map(int, input().split()))\\n    if dictA.get(b):\\n        summ = summ - (dictA[b]*b) + (dictA[b]*c)\\n        if dictA.get(c): dictA[c] += dictA[b]\\n        else: dictA[c] = dictA[b]\\n        del dictA[b]\\n    print(summ)\\n", "target": "411", "substitutes": {"n": ["k", "ner", "p", "na", " ni", "r", "nc", "ini", "ne", "z", "I", "l", "pi", "j", "f", "m", "ni", "nr", "N", "nb", "an"], "arr": ["rr", "a", "int", "str", "vec", "p", "ai", "img", "err", "arc", "plot", "r", "nc", "prev", "app", "iq", "air", "iter", "coll", "ab", "z", "array", "index", "cache", "ar", "bl", "stack", "par", "w", "l", "f", "frac", "Array", "br", "list", "batch", "order", "fr", "all", "seq", "enc", "abc"], "x": ["dx", "k", "int", "X", "p", "tx", "xf", "xs", "xx", "yx", "y", "rx", "ix", "px", "z", "xt", " xx", "xxx", "xxxx", "index", "ex", "w", "l", "u", "d", "f", "ax", "xi", "xb", "e", "t", "xy", "id", "xc"], "q": ["k", "sq", "qs", "qu", "Q", "p", "qa", "g", "y", "h", "num", "z", "ch", "time", "w", "l", "u", "d", "max", "f", "j", "m", "query", "depth", "v", "t", "count", "quant", "id"], "dictA": ["condInfo", "deca", "defA", "listArray", "conditionApart", "pairA", "strC", " dictApart", "codeAs", "condA", "initC", "conditionA", "postAs", "parentAs", "objecta", "pairArray", "modelAs", "suma", "datArray", "pathA", "initB", "listAs", "signA", "decAuth", "data", "listB", "dictB", " dictC", "posta", "confAs", "objectA", "ictA", "sumA", "inita", "conda", "dictInfo", "pathAuth", "listA", "decA", "sumAs", "postB", "datAs", "initA", "sumInfo", "modelArray", "confa", "parenta", "parentA", "codeA", "postArray", "ictB", "codea", "strB", "dictAuth", " dictAs", "conditionB", "icta", " dictAuth", "defAs", "strA", "dictApart", "dictArray", "postA", "confA", "objectArray", "datB", "defa", "conditiona", "sumB", "pathB", " dictB", "codeB", "modelApart", "stra", "signa", "defArray", "patha", " dicta", "ictC", "parentB", " dictArray", "dictC", "paira", "signC", "ictArray", "modelA", "confArray", "modelB", "lista", "dicta", "modela", "dictAs", "sumC", "decB", "datA", " dictInfo", "objectAs"], "i": ["k", "ui", "a", "end", "ei", "int", "ie", "qi", "p", "ai", "o", "r", "y", "ix", "ini", "h", "iu", "z", "si", "eni", "index", "yi", "ind", "start", "I", "uri", "l", "u", "d", "pi", "io", "j", "f", " j", "xi", "ori", "ri", "list", "ni", "ci", "di", "v", "e", "zi", "id", "li", "ii", "bi", "ti"], "summ": ["gcum", "ssum", "dcum", "summies", "somnia", "fsum", " samp", "fum", "Samp", "scum", "pussion", " sum", "gummies", "gsummies", "Summ", " scum", "pumm", "pum", "fumm", "dumm", "summer", "Ssum", "wsumm", "Somnia", "dummer", "gumm", "samp", "gum", "gsumm", "Scum", "sussion", "fcum", "Summer", " summer", "gsussion", "gsum", "dum", " somnia", "Sum", "gussion", "wsomnia", "pummies", "sum", "wsamp", "wsum"], "b": ["s", "k", "be", "a", "ib", "code", "part", "fb", "p", "bs", "g", "y", "r", "o", "h", "wb", "mb", "B", "ba", "lc", "ab", "ch", "w", "sb", "cb", "l", "ob", "u", "d", "bb", "bf", "rb", "f", "eb", "j", "m", "ca", "xb", "db", "gb", "v", "base", "e", "bc", "nb", "lb"], "c": ["s", "k", "be", "cur", "end", "a", "code", "p", "g", "y", "r", "ec", "o", "C", "lc", "ab", "uc", "z", "fc", "ce", "cy", "cu", "w", "con", "l", "u", "d", "cn", "j", "f", "ca", "cs", "m", "ac", "ci", "ct", "v", "cf", "e", "bc", "count", "col", "cl"]}}
{"code": "# ABC068 B - Break Number\\nN = int(input())\\n\\nfor i in range(7):\\n    if N >= 2**i:\\n        M = 2**i\\nprint(M)", "target": "733", "substitutes": {}}
{"code": "# -*- coding: utf-8 -*-\\nmoji=[]\\nmoji.append(\"eraser\")\\nmoji.append(\"erase\")\\nmoji.append(\"dreamer\")\\nmoji.append(\"dream\")\\nuser = \"erasedream\"\\nuser = int(input())\\nresult = user\\ncount = 1\\n\\nwhile result != 0:\\n    result += user\\n    result %= 360\\n    count += 1\\nprint(count,end=\"\")\\n", "target": "11", "substitutes": {}}
{"code": "a, b, c = input().split()\\n\\nif a == b and a == c:\\n    print(\"Yes\")\\n\\nelse:\\n    print(\"No\")\\n", "target": "649", "substitutes": {"a": ["aa", "s", "k", "sta", "va", "p", " ta", "i", "fa", "y", "r", "o", "ba", "ab", "ana", "da", "x", "pa", "A", "ar", "u", "d", "aaa", "f", "sa", " A", "ac", "ca", "asa", "ga", "ya", "ae", "alpha", "ea", "an", "e", "ad", "n"], "b": ["aa", "fb", "p", "bs", "g", "pb", "i", "reb", "y", "wb", "beta", "zb", "B", "ba", "ab", "z", "x", "comp", "sb", "cb", "l", "ob", "bb", "d", "u", "rb", "abb", "f", "m", "xb", "bot", "db", "abs", "v", "bar", "e", "abc", "bi", "ad", "n"], "c": ["k", "p", "y", "ec", "C", "z", "ce", "x", "cy", "cu", "w", "con", "u", "d", "cn", "f", "ca", "cs", "ac", "dc", "ci", "ct", "cf", "e", "bc", "cr", "cc", "col", "xc", "ad", "n"]}}
{"code": "n,k = map(int, input().split())\\n\\ndef Base_10_to_n(X, n):\\n    if (int(X/n)):\\n        return Base_10_to_n(int(X/n), n)+str(X%n)\\n    return str(X%n)\\ns = Base_10_to_n(n, k)\\nprint(len(s))", "target": "719", "substitutes": {"n": [" N", "min", "name", "p", "na", "g", "c", "i", "o", "number", "nc", "en", "num", "net", "y", "un", "size", "ne", "nu", "z", "x", "nan", "sn", "w", "zn", "l", "u", "d", "cn", "nn", "network", "ln", "f", "m", "j", "Ns", "ns", "no", "v", "inn", "np", "b", "e", "N", "t", "pn", "all", "nb", "an"], "k": ["ke", "p", "g", "c", "i", "K", "y", "o", "r", "ks", "kn", "z", "x", "mk", "ko", "ak", "l", "u", "d", "unk", "q", "j", "sk", "f", "m", "v", "b", "e", "N", "ik"], "X": ["F", "Power", "Length", "Pixel", "Number", "L", "CE", "V", "XM", "H", "DX", "Q", "XX", "Y", "Size", "Num", "NS", "XP", "Width", "Form", "EX", "K", "ZX", "FF", "O", "P", "T", "Int", "C", "D", "x", "PE", "S", "A", "Weight", "XXX", "IX", "I", "Model", "TX", "Rex", "Z", "Ns", "U", "M", "XL", "N", "Ex", "OX", "Fixed", "Work", "Cross"], "s": ["ss", "sq", "strings", "bytes", "str", "span", "p", "ps", "g", "c", "sym", "y", "r", "o", "sf", "sign", "si", "x", "S", "sb", "args", "l", "parts", "ses", "d", "sg", "js", "f", "m", "ns", "ws", "os", "string", "v", "e", "ls", "t", "rs", "sum"]}}
{"code": "\\ndef main():\\n    s = input()\\n    t = input()\\n    if s == t[:-1]:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "472", "substitutes": {"s": ["ss", "sh", "sc", "p", "ps", "g", "c", "xs", "ats", "sets", "y", "sl", "o", "sf", "si", "es", "als", "S", "sb", "tests", "l", "ses", "d", "u", "sg", "f", "sa", "m", "ns", "os", "ts", "b", "v", "gs", "space", "e", "ls", "ds", "se", "n"], "t": ["at", "p", "g", "c", "i", "y", "o", "h", "tp", "r", "ot", "pt", "T", "tf", "temp", "z", "x", "w", "l", " T", "u", "d", "q", "ta", "f", "dt", "j", "m", "ts", "v", "b", "e", "test", "n"]}}
{"code": "a = [int(s) for s in input().split()]\\nmax_id = a.index(max(a[0], a[1], a[2]))\\nmin_id = a.index(min(a[0], a[1], a[2]))\\nsum = 0\\nsum += abs(a[0] - a[1])\\nsum += abs(a[1] - a[2])\\nsum += abs(a[2] - a[0])\\nsum -= abs(a[max_id] - a[min_id])\\nprint(sum)", "target": "793", "substitutes": {"a": ["sta", "span", "y", "la", "empty", "x", "ata", "l", "f", "ac", "list", "data", "b", "ea", "ast", "ad", "aa", "auto", "at", "img", "working", "i", "au", "array", "div", "u", "sa", "ga", "ae", "e", "all", "za", "an", "wa", "p", "aw", "eta", "z", "da", "index", "pa", "A", "d", "sup", "m", "area", "input", "am", "alpha", "t", "missing", "ma", "na", "c", "ama", "fa", "o", "work", "app", "ba", "ab", "valid", "args", "asa", "aux", "aj", "audio", "base", "active", "n"], "s": ["ss", "sq", "sid", "str", "p", "g", "c", "sym", "i", "o", "r", " i", "sie", "suff", "second", "si", "x", "S", "sb", "ses", "sec", "u", "d", "f", "sa", "m", " S", "ns", "single", "su", "b", "string", "v", "t", "e", "sv", "n"], "max_id": ["min_num", "max_ip", " max_num", "max67index", "min_index", "max67num", " max_Id", "max_Id", "max_index", "max67id", "max_num", "maxuunum", "min_ip", "maxuuid", "max67ip", "maxuuId"], "min_id": ["min_length", "minaclength", "min___Id", "minerage", "minerindex", "min_aid", "min___index", "max_age", "min_index", "min_Id", "min___id", "minacindex", "max_Id", "minerid", "max_aid", "max_index", "min_age", "minerId", "minacaid", "max_length", "minacid", "min___age"], "sum": ["mass", "min", "error", "ss", "zero", "sh", "missing", "acc", "plus", "miss", "use", "gam", "result", "hash", "num", "cum", "weight", "mean", "empty", "spread", "size", "conf", "scale", "si", "cost", "sim", "diff", "index", "cache", "av", "ass", "cal", "max", "offset", "gram", "sa", "fat", "ac", "up", "us", "su", "average", "alpha", "match", "summary", "loss", "count", "Sum", "all", "add", "fill", "ul", "ad", "parse", "also", "skip", "um", "total"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\nfrom collections import defaultdict\\nN,M = map(int,input().split())\\nabc = [list(map(int,input().split())) for i in range(M)]\\n\\ng = defaultdict(list)\\nrg = defaultdict(list)\\nfor a,b,c in abc:\\n    g[a].append((b,c))\\n    rg[b].append(a)\\n\\ninf = 10**20\\nscore = [-inf]*(N+1)\\nscore[1] = 0\\n\\nfor i in range(N-1):\\n    for v in range(1,N+1):\\n        for nv, c in g[v]:\\n            if score[v] + c > score[nv]:\\n                score[nv] = score[v] + c\\n\\nupdate = [False]*(N+1)\\nfor v in range(1,N+1):\\n    for nv, c in g[v]:\\n        if score[v] + c > score[nv]:\\n            score[nv] = score[v] + c\\n            update[v] = True\\n\\nvisited = [False]*(N+1)\\nl = [N]\\nwhile l:\\n    v = l.pop()\\n    visited[v] = True\\n    for nv in rg[v]:\\n        if not visited[nv]:\\n            l.append(nv)\\nfor u,v in zip(update, visited):\\n    if u and v:\\n        print('inf')\\n        exit()\\n\\nprint(score[N])\\n", "target": "258", "substitutes": {"input": ["error", "call", "text", "raw", " output", "int", "str", "reader", "PUT", "request", "method", "enter", "init", "load", "dict", "format", " inputs", "result", "empty", "temp", "array", "fn", "expression", "url", "search", "hit", "save", "current", "accept", "out", "f", "rc", " Input", "pull", "output", "entry", "list", "data", "Input", "parent", "path", "util", "type", "select", "help", "view", "space", "submit", "source", "param", "form", "feed"], "N": ["F", "MN", "Network", "L", "V", "NN", "H", "Q", "X", "Y", "Size", "NC", "Num", "NS", "NE", "K", "Na", "NM", "CNN", "O", "P", "T", "C", "B", "D", "Len", " C", "Ne", "S", "A", "W", "I", "No", "NT", "Node", "Ni", "Z", "Ns", "ND", "U", "R", "NV", "J", "NB", " n", "G", " Ne", "Wh", "NA", "KN", " NI", "n"], "M": ["F", "MN", "E", "L", "V", "Q", "X", "Y", "MI", "DM", "K", "NM", "O", "P", "LM", "C", "T", "D", "B", "MD", "S", "W", "CM", "I", "MB", "Z", "m", "MC", "U", "Mi", "R", "MS", "J", "MU", "n"], "abc": ["collection", "fb", "enum", "arc", "nc", "auc", "alg", "rec", "ig", "ba", "coll", "lc", "ab", "anc", "az", "array", "fc", "misc", "af", "cb", "ABC", "occ", "rb", "bb", "abb", "frac", "etc", "rc", "acl", "ac", "lib", " ABC", "dc", "aux", "abs", "tab", "asc", "bc", "mc", "config"], "i": ["gi", "k", "ui", "vi", "ie", "int", "ei", "qi", "p", "ai", "ic", "h", "o", "im", "iq", "iu", "si", "index", "ind", "I", "it", "pi", "f", "j", "io", "iv", "ir", "xi", "di", "ni", "ci", "id", "li", "ii", "bi", "ip"], "g": ["gi", "k", "group", "greg", "ag", "p", "gh", "h", "gc", "r", "alg", "gu", "gam", "cfg", "gin", "ig", "gr", "gp", "gre", "z", "x", "gn", "w", "erg", "gener", "d", "sg", "q", "gg", "og", "f", "m", "ga", "ac", "core", "graph", "gs", "gb", "gen", "bg", "gm", "G", "gl", "pg", "vg", "n"], "rg": ["rh", "rr", "RG", "greg", "rm", "gru", "arc", "r", "gc", "alg", "gra", "cfg", "gin", "gr", "ig", "rn", "lr", "reg", "ro", "gre", "gor", "gn", "erg", "rb", "sg", "gro", "gg", "rc", "agg", "ga", "rl", "fg", "graph", "gb", "nr", "gs", "bg", "mc", "gl", "rs", "pg", "vg", "org"], "a": ["aa", "s", "va", "p", "na", "ai", "fa", "o", "r", "ba", "ab", "au", "x", "A", "ar", "af", "w", "ia", "d", "aaa", "ca", "f", "sa", "ac", "ga", "area", "aj", "am", "ae", "an", "ad", "n"], "b": ["s", "k", "aa", "fb", "p", "bs", "y", "r", "h", "o", "wb", "B", "ba", "ab", "x", "w", "sb", "cb", "d", "rb", "bb", "bf", "f", "j", "eb", "db", "e", "nb", "lb", "n"], "c": ["s", "k", "sc", "p", "arc", "y", "r", "h", "nc", "ec", "cp", "o", "chain", "C", "lc", "ab", "uc", "z", "conf", "ch", "ce", "x", "can", "cy", "cu", "w", "cb", "d", "cn", "q", "f", "ca", "cs", "m", "ac", "cat", "core", "dc", "co", "ci", "ct", "cf", "e", "t", "cr", "cc", "col", "pc", "xc", "mc", "tc", "n"], "inf": ["error", "sc", " Inf", "init", "acc", "exp", "biased", "rec", "num", "iter", "conf", "z", "diff", "Inf", "crit", "inc", "ind", "bug", "nz", "frac", "Z", "ill", "ignore", "f", "Bug", "core", "ci", "limit", "gen", "count", "fine", "n", "ref", "info"], "score": ["orer", "error", "risk", "value", "sc", "nice", "Score", "ner", "code", "level", "mor", "ge", "distance", "ore", "err", "hide", "rate", "price", "y", "case", "ores", "goal", "result", "sd", "en", "rage", "log", "ise", "beta", "une", "player", "ite", "game", "weight", "size", "z", "cost", "scale", "winner", "draw", "stats", "status", "style", "core", "sync", "color", "mate", "rank", "fee", "note", "scoring", "live", "complete", "match", "ize", "key", "feature", "loss", "order", "count", "play", "message", "grade", "zi", "fine", "sum", "info"], "v": ["s", "k", "vi", "ve", "value", "uv", "V", "va", "vo", "p", "vu", "y", "r", "o", "h", "ver", "vid", "lv", "vs", "vin", "qv", "z", "vp", "x", "av", "cv", "w", "vm", "vr", "d", "conv", "q", "ov", "vert", "iv", "f", "j", "m", "vv", "vc", "van", "vt", "tv", "e", "t", "vy", "sv", "ev", "ul", "vari", "vd", "vg", "n"], "nv": ["hw", "loc", "vi", "cmp", "dy", "uv", "vo", "hn", "chev", "nav", "init", "nm", "vu", "ync", "nc", "adv", "lov", "lv", "vs", "vin", "qv", "nu", "gpu", "div", "eni", "nov", "vp", "nil", "cu", "cv", "oven", "ny", "vr", "cb", "nt", "nn", "ov", "liv", "iv", "vert", "anne", "f", "nw", "ky", "j", "vv", "vc", "NV", "ni", "gb", "vt", "np", "cf", "qt", "nec", "cdn", "sv", "dn", "ev", "enc", "qq", "csv", "vd", "vg", "n"], "update": ["new", "replace", "date", "unit", "change", "op", "value", "end", "open", "enable", "Update", "init", "plus", "append", "use", "num", "adv", "item", "write", "ite", "forward", "edit", "index", "remove", "diff", "build", "save", "version", "w", "current", "bug", "apply", "member", "q", "range", "position", "ignore", "status", "sync", "ill", "core", "up", "updated", "database", "check", "live", "view", "info", "grade", "add", "fill", "source", "draw", "where"], "visited": ["visit", "visitable", "navitted", " Visitted", "visiting", "Visiting", "Visit", "VisITED", "positted", "Visitable", "accessiting", "VISITED", "posited", "Visitted", "Vised", "circited", "VISit", "posit", "accessed", "missiting", "missited", "navited", " Visit", "visITED", "visitted", "missit", "missed", " VisITED", "circitable", "navitable", "Visited", "circit", "VISited", "VISitted", " Visited", "accessit", "navit", "positing", "naviting", "vised", "circiting", "accessited"], "l": ["lp", "ol", "L", " L", "p", "ql", "o", "r", "sl", "el", "left", "lo", "lv", "lc", "kl", "d", "ll", "ln", "dl", "f", "j", "m", "rl", "list", "nl", "fl", "lu", "lb", "e", "ls", "all", "il", "li", "ul", "lin", "n"], "u": ["ui", "uv", "ur", "ua", "yu", "o", "gu", "un", "iu", "nu", "uc", "ou", "uid", "uy", "cu", "mu", "uni", "bu", "ut", "f", "pu", "ue", "up", "us", "U", "su", "lu", "e", "hu", "itu", "ul", "uu", "n", "eu"]}}
{"code": "a = []\\nfor i in range(5):\\n    a.append(int(input()))\\nk = int(input())\\n\\nfor i in range(5):\\n    for j in range(i, 5):\\n        if a[j] - a[i] > k:\\n            print(':(')\\n            exit()\\nprint('Yay!')", "target": "208", "substitutes": {"a": ["aa", "s", "wa", "va", "ma", "ans", "p", "ama", "aw", "c", "o", "y", "app", "ba", "ab", "au", "array", "ana", "z", "x", "A", "w", "args", "l", "u", "d", "f", "sa", "ca", "ac", "ga", "area", "am", "input", "aj", "data", "ae", "alpha", "b", "e", "an", "ad", "n"], "i": ["ji", "ie", "int", "qi", "p", "phi", "ai", "c", "y", "o", "h", "r", "iu", "z", "si", "index", "x", "yi", "ind", "start", "I", "l", "u", "pi", "d", "io", "f", "m", "xi", "di", "ni", "ci", "v", "b", "key", "e", "id", "li", "ii", "n", "ip"], "k": ["km", "ke", "p", "g", "c", "K", "y", "o", "kk", "ks", "kn", "z", "x", "kw", "ko", "ak", "ok", "u", "d", "max", "q", "ki", "sk", "f", "ky", "m", "ku", "v", "key", "b", "e", "ik", "n"], "j": ["ji", "ie", "ja", "p", "y", "o", "jj", "jl", "z", "je", "si", "index", "x", "ind", "l", "uj", "jp", "f", "m", "oj", "aj", "jam", "ij", "J", "v", "bj", " ii", "b", "e", " n", "kj", "li", "ii", " l", " b", "n"]}}
{"code": "import sys\\nimport numpy as np\\nfrom numba import njit, void, i8\\ninput = sys.stdin.buffer.readline\\n\\ndef main():\\n    R, C, K = map(int, input().split())\\n    cell = np.full((R+1, C+1), 0, dtype=np.int64)\\n    for i in range(K):\\n        x, y, c = map(int, input().split())\\n        cell[x-1, y-1] = c\\n    print(calc(cell, R, C))\\n\\n@njit(i8(i8[:,:],i8,i8))\\ndef calc(cell, R, C):\\n    L_INF = int(1e17)\\n    dp = np.full((R+1, C+1, 4), -L_INF, dtype=np.int64)\\n    dp[0, 1, 0] = dp[1, 0, 0] = 0\\n    for i in range(1, R + 1):\\n        for j in range(1, C + 1):\\n            for k in range(4):\\n                dp[i, j, k] = max(dp[i, j, k], dp[i, j-1, k])\\n                if k > 0:\\n                    dp[i, j, k] = max(dp[i, j, k], dp[i, j, k-1])\\n                    dp[i, j, k] = max(dp[i, j, k], dp[i, j-1, k-1] + cell[i-1, j-1])\\n                if k == 1:\\n                    dp[i, j, 1] = max(dp[i, j, 1], dp[i-1, j, 3] + cell[i-1, j-1])\\n    return dp[R, C, 3]\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "113", "substitutes": {"input": ["error", "call", "until", "PUT", "request", "reader", "method", "sample", "enter", "enum", "context", "load", "unknown", "insert", "format", "instance", "result", "main", "inf", "iter", "connect", "temp", "array", "expression", "response", "image", "exec", "current", "accept", "buffer", "out", "position", " Input", "header", "json", "pull", "sequence", "output", "entry", "data", "Input", "view", "help", "select", "step", "keep", "filter", "source", "config", "form", "feed"], "R": ["F", "E", "RG", "Rs", "L", "NR", "V", "H", "RC", "X", "Q", "Y", "RT", "SR", " r", "WR", "r", "RW", "RR", "Range", "RO", "O", "P", "T", "B", "D", "S", "A", "W", "RS", "I", "Rh", "Right", "GR", "RN", "DR", "Row", "Ra", "U", "M", "J", "JR", "N", "G", "RA", "CR", "RH", "IR", "RM"], "C": ["F", "CV", "E", "CE", "L", "Cs", "V", "Cu", "CI", "H", "SC", "X", "CU", "Y", "NC", "Q", "YC", "DC", "r", "P", "T", "B", "D", "EC", "S", "A", "W", "CM", "CF", "I", "Ch", "VC", "Sc", "Z", "CL", "CA", "CS", "U", "JC", "CP", "CC", "CN", "N", "G", "CW", "CR", "Count"], "K": ["F", "Ke", "E", "L", "KI", "V", "H", "Q", "X", "Y", "DC", "KE", "Sk", "P", "T", "B", "SK", "D", "KS", "S", "A", "W", "KC", "I", "Z", "KR", "PK", "U", "J", "M", "N", "G", "CR"], "cell": ["ion", "group", "cp", "slice", "edge", "book", "l", "bb", "q", "f", "cat", "model", "pod", "pad", "co", "chart", "column", "ad", "call", "layer", "auto", "align", "code", "client", "lc", "cil", "array", "comp", "child", "page", "shape", "ci", "v", "cel", "ice", "csv", "ip", "device", "p", "case", "container", "cache", "cy", "cal", "row", "point", "port", "cin", "scan", "pick", "ell", "pixel", "count", "cc", "col", "Cell", "field", "line", "table", "app", "ph", "charge", "cle", "ce", "cells", "nn", "label", "style", "entry", "cer", "ck", "base", "cl", "range"], "i": ["ji", "s", "ui", "vi", "a", "ie", "int", "ei", "qi", "p", "ai", "ic", "r", "o", "ini", "im", "ix", "iu", "api", "z", "si", "eni", "yi", "ind", "I", "ia", "it", "l", "u", "pi", "d", "ki", "f", "io", "xi", "ori", "ni", "ci", "ip", "v", "b", "e", "info", "id", "li", "ii", "ik", "bi", "n"], "x": ["dx", "a", "int", "X", "p", "xs", "xx", "r", "o", "ix", "px", "rx", "h", "z", "ex", "w", "l", "wx", "u", "d", "max", "q", "f", "ax", "xi", "ct", "b", "v", "e", "t", "xy", "col", "n"], "y": ["s", "a", "dy", "int", "p", "Y", "r", "o", "h", "yn", "z", "ch", "yi", "cy", "w", "l", "u", "d", "f", "yy", "ya", "v", "b", "e", "t", "xy", "col", "vy", "ey", "n"], "c": ["a", "p", "g", "center", "h", "r", "nc", "size", "z", "ch", "ce", "cy", "cu", "l", "u", "d", "max", "q", "ca", "m", "ci", "v", "b", "cf", "e", "t", "count", "cc", "col", "xc", "n"], "L_INF": ["L_INTF", "L_INf", "L__InFE", "L_InFE", "L_INDV", "L_InB", "L__INFE", "L_CONf", "L_InV", "L_CONFF", "L_WINF", "L__InF", "L_INDB", "L_INFF", "L_WINFE", "L_CONFE", "L_INFE", "L_InF", "L_WINf", "L_INTFE", "L_InFF", "L_WINFF", "L__INB", "L_INB", "L_INTV", "L_CONF", "L_INTB", "L__InV", "L__InB", "L_INV", "L_Inf", "L__INV", "L_INDF", "L__INF", "L_INDFE"], "dp": ["loc", "dd", "sh", "bp", "cp", "dm", "bb", "DP", "pod", "dc", "data", "np", "pd", "hp", "cmp", "gap", "dat", "api", "dep", "mp", "vp", "comp", "cm", "pi", "do", "pp", "cd", "wd", "xc", "csv", "pg", "ip", "pc", "density", "dh", "wp", "p", "dist", "tp", "gp", "d", "sup", "point", "dr", "port", "resp", "pkg", "pick", "dim", "pixel", "imp", "lp", "line", "pb", "fp", "sl", "px", "pm", "ph", "diff", "par", "xd", "cap", "dt", "dl", "dq", "deb", "drop", "df", "di", "db", "prep", "mm", "dump", "ds", "sv"], "j": ["ji", "a", "ie", "ja", "p", "g", "jo", "h", "jj", "r", "o", "jl", "z", "je", "on", "ch", "jet", "ak", "it", "l", "u", "uj", "d", "q", "js", "jp", "f", "m", "jc", "oj", "aj", "ij", "J", "v", "b", "key", "e", "jon", "all", "li", "ii", "n"], "k": ["km", "s", "kid", "ke", "p", "kh", "g", "dk", "gh", "h", "r", "o", "kk", "ijk", "ks", "kn", "kl", "z", "ch", "mk", "kw", "w", "ka", "ko", "ak", "l", "ok", "u", "d", "q", "ki", "sk", "f", "m", "ky", "ek", "ku", "kt", "tk", "v", "key", "b", "ck", "e", "kr", "id", "ik", "uk", "n"]}}
{"code": "a = input()\\nb = input()\\n\\nc = 0\\nfor i, j in zip(a, b):\\n    if i != j:\\n        c += 1\\nprint(c)", "target": "123", "substitutes": {"a": ["aa", "s", "sta", "p", "ai", "ama", "y", "o", "r", "ba", "ab", "z", "art", "da", "x", "A", "af", "ak", "l", "u", "d", "f", "sa", "ac", "ca", "asa", "aj", "am", "ae", "alpha", "e", "an", "ad", "n"], "b": ["aa", "s", "k", "ib", "boot", "fb", "p", "bs", "arb", "g", "pb", "y", "o", "emb", "B", "ba", "ab", "x", "sb", "cb", "l", "bb", "d", "rb", "f", "db", "v", "e", "lb", "n"], "c": ["cur", "k", "cycle", "code", "p", "g", "arc", "y", "r", "h", "ec", "o", "C", "lc", "z", "ce", "x", "cache", "cy", "cu", "cm", "l", "u", "f", "cs", "ac", "cat", "jc", "dc", "cd", "cit", "ci", "ct", "v", "cf", "t", "e", "count", "cc", "cr", "col", "pc", "xc", "abc", "csv", "n"], "i": ["ji", "vi", "ui", "ie", "ei", "ami", "p", "ai", "oi", "o", "ini", "iu", "z", "si", "yi", "I", "l", "u", "pi", "f", "xi", "ri", "di", "ci", "v", "e", "zi", "li", "ii", "bi"], "j": ["ji", "k", "dy", "ja", "p", "g", "jo", "y", "o", "r", "jj", "jl", "z", "je", "si", "index", "x", "adj", "obj", "l", "uj", "jp", "m", "jc", "xi", "aj", "ij", "J", "v", "bj", "e", "bi", "n"]}}
{"code": "def main():\\n    H1,M1,H2,M2,K = [int(x) for x in input().split()]\\n    if M2 >= M1:\\n        diff = (H2-H1)*60 + M2-M1\\n    else:\\n        diff = (H2-H1)*60 + 60-M1+M2 -60\\n    if diff <= 0:\\n        print(0)\\n    else:\\n        print(diff - K)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "281", "substitutes": {"H1": ["H01", " H31", "h91", "P2", "h8", "h7", "M01", " H8", "H8", " H7", "H31", "h1", "M31", " H01", "P31", "HH01", "P1", "P01", "M8", "H91", "M7", "HH91", "H7", "HH1", "h2", "M91", "h01", "HH2"], "M1": [" M31", "V1", "m2", "V2", "P2", "H22", "M3", "H001", "M4", "M22", "m31", "M101", "M0", "N22", "H0", "P0", "H31", "M31", " M12", "P001", "M001", "N4", " M4", " M101", "N2", "H12", "P1", " M22", "H101", " M3", "m0", "V3", "m001", "H4", "m1", "N1", "M12", "V12", "m101", "H3"], "H2": ["V1", "V2", "Hii", "M0", "Y1", "H0", "X0", " Hii", "Y6", "M6", "Mii", "h6", "h1", "Vii", "X2", "X1", " H0", "Y2", "H6", "h2"], "M2": ["H02", "NPL", "m2", "M3", " Hsecond", "M4", "L2", "M02", "L1", "Hsecond", "N02", "M6", "L4", "M182", "HPL", " M6", " M182", "N4", " HSecond", "H182", " Msecond", "L02", "N2", " MPL", " M3", " MSecond", "H4", "m6", "m1", "H6", "m182", "HSecond", "N1", "N3", "MPL", "MSecond", "Msecond", "H3"], "K": ["F", "Power", "k", "E", "KK", "ID", "V", "Max", "H", "Q", "X", "Y", "Delta", "DC", "O", " k", "P", "T", "C", "B", "SK", "D", "IP", "KS", "KB", "S", "W", "I", "Z", "PK", "Mask", "U", "M", "N", "G", "Diff"], "x": ["dx", "k", "X", "p", "xs", "c", "i", "xx", "fx", "expl", "h", "rx", "y", "r", " y", " i", "z", "ex", " xx", "xxxx", "xxx", "wx", "d", "xd", "ww", "xi", "xb", "xe", "v", "xp", "e", "t", "xy", "id", "xc", "xa", "n", "xxxxxxxx"], "diff": ["new", "error", "k", "change", "cmp", "value", "missing", "dist", "distance", "qa", "err", " differences", "i", "Delta", "DC", "low", "erence", "comment", " difference", "split", "conf", "config", "div", "API", "iff", "same", "bug", "l", "d", "Diff", "shift", "different", "old", "null", "fail", "no", "data", "length", "between", "help", "e", "count", "changed", "message", "add", "mix", "range", "part", "update", "ref", "info"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\ntry:\\n    from typing import List\\nexcept ImportError:\\n    pass\\n\\n\\ndef solve(N: int, K: int, l: \"List[int]\"):\\n    l.sort(reverse=True)\\n    print(sum(l[:K]))\\n\\n\\ndef main():\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    K = int(next(tokens))  # type: int\\n    l = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\\n    solve(N, K, l)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "433", "substitutes": {}}
{"code": "n = int(input())\\nassert n <= 20 and n >= 3,\"input error(3 <= n <= 20)\"\\np = list(map(int,input().split()))\\nres = 0\\nfor i in range(1,n-1,1):\\n    if (p[i-1] < p[i] and p[i] < p[i+1]) or (p[i-1] > p[i] and p[i] > p[i+1]):\\n        res +=1\\n\\nprint(res)", "target": "318", "substitutes": {"n": [" N", "s", "k", "init", "g", "c", "o", "number", "nc", "num", "en", "net", "ot", "nu", "ne", "ng", "z", "fn", "x", "norm", "sn", "node", "w", "conn", "l", "u", "d", "cn", "nt", "nn", "pi", "f", "j", "m", "none", "ns", "no", "ni", "nr", "b", "v", "np", "len", "t", "N", "e", "pn", "nit", "nb", "nor"], "p": ["lp", "s", "op", "k", "a", "int", "python", "at", "wp", "pre", "ps", "g", "c", " r", "post", "y", "r", "o", "h", "app", "pos", "cp", "tp", "ap", "pr", "api", "P", "sp", "local", "z", "array", "po", "pa", "x", "vp", " pi", "w", "current", "l", "patch", "u", "pi", "d", "q", "page", "f", "j", "m", "pp", "point", "list", "data", "ip", "b", "v", "np", "t", "e", "py", "part", " P"], "res": ["rh", "rest", "int", "ras", "eps", "vals", "arr", "ps", "ms", "exp", "err", " Res", "r", "num", "result", "pres", "results", "pos", "re", "rep", "gr", "prev", "reg", "rev", "es", "Res", "req", "max", "ons", "resolution", "out", "sol", "RES", "j", "resh", "resp", "os", "nr", "len", "ress", "rss", "nos", "powers", "cons", "count", "reset", "id", "ret", "val", "rs", "part"], "i": ["gi", "k", "ui", "a", "ie", "int", "ei", "ami", "qi", "mi", "pri", "ai", "phi", "c", "init", "oi", "h", "r", "gu", "ini", "o", "ix", "y", "iu", "api", "z", "si", "index", "x", "yi", "ind", "I", "uri", "l", "it", "u", "pi", "d", "fi", "j", "f", "io", "pp", "xi", "ori", "us", "di", "ri", "ni", "ip", "ci", "isi", "b", "v", "t", "e", "info", "multi", "id", "li", "ii", "bi", "ti"]}}
{"code": "k = int(input())\\nalst = list(map(int, input().split()))[::-1]\\nl = 2\\nr = 2\\n\\ndef check(l, r, a):\\n    if l % a == 0:\\n        return True\\n    elif r // a == l // a:\\n        return False\\n    else:\\n        return True\\n\\nfor a in alst:\\n    if not check(l, r, a):\\n        print(-1)\\n        exit()\\n    l = (l + a - 1) // a * a\\n    r = r // a * a + (a - 1)\\nprint(l, r)", "target": "423", "substitutes": {"k": ["p", "g", "c", "_", "i", "K", "ks", "z", "x", "ar", "w", "ka", "ak", "it", "ok", "q", "ac", "m", "v", "ck", "kr", " n", "id", "ik", "ad", "n"], "alst": ["llsts", "alSt", "llST", " alsts", "allST", "alsts", "alist", "elST", "fST", "calSt", "calst", "allSt", "fsts", "allst", "elist", "llst", "calST", "fSt", "elsts", " alist", "alST", "calsts", " alST", "elst", "allsts", "fst", "llist"], "l": ["s", "ol", "L", "p", "al", "g", "c", "i", "o", "sl", "y", "h", "el", "la", "left", "lc", "z", "kl", "x", "w", "u", "d", "pl", "ll", "f", "ln", "dl", "j", "m", "rl", "nl", "length", "lu", "b", "v", "len", "t", "ls", "e", "le", "li", "ul", "lb", "n"], "r": ["rh", "rr", "mr", "ur", "p", "arr", "g", "c", "err", "i", "h", "o", "y", "rd", "pr", "rf", "re", "lr", "el", "hr", "z", "rev", "x", "ar", "w", "vr", "u", "rb", "d", "q", "ra", "f", "j", "sr", "m", "ir", "rt", "R", "alpha", "nr", "b", "v", "e", "t", "fr", "cr", "ru", "er", "range", "n"], "a": ["aa", "s", "va", "at", "ma", "p", "na", "ai", "c", "aw", "i", "fa", "y", "h", "la", "ba", "ab", "z", "array", "au", "art", "da", "x", "pa", "ar", "A", "af", "w", "ia", "u", "d", "ta", "aaa", "f", "sa", "ca", "ac", "ga", "m", "area", "am", "aj", "ae", "alpha", "b", "v", "e", "t", "all", "an", "ast", "ad", "n"]}}
{"code": "from statistics import median\\n#import collections\\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\\nfrom fractions import gcd\\nfrom itertools import combinations # (string,3) 3\u56de\\nfrom collections import deque\\nfrom collections import defaultdict\\nimport bisect\\n#\\n#    d = m - k[i] - k[j]\\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\\n#\\n#\\n#\\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\\n#\\n#\\n\\nimport sys\\nsys.setrecursionlimit(10000000)\\nmod = 10**9 + 7\\n\\ndef readInts():\\n  return list(map(int,input().split()))\\ndef main():\\n    a,b,c,k = readInts()\\n    a_ = b + c\\n    b_ = a + c\\n    ab = a_ - b_\\n    k = k % 2\\n    if ab >= 10**18:\\n        print(\"Unfair\")\\n    else:\\n        if k == 0:\\n            print(a-b)\\n        else:\\n            print(ab*(-1)**(k+1))\\n\\nif __name__ == '__main__':\\n  main()\\n", "target": "669", "substitutes": {}}
{"code": "import array\\nfrom functools import reduce\\nfrom operator import xor\\n\\nN = int(input())\\nA = array.array(\"L\", map(int, input().split()))\\n\\nQ = array.array(\"L\", [0]) * N\\n\\nR = reduce(xor, A)\\nfor i in range(N):\\n    print(R^A[i])\\n", "target": "453", "substitutes": {"N": ["F", "E", "NR", "L", "V", "NN", "H", "X", "Y", "Size", "NS", "NE", "NI", "K", "NM", "O", "P", "Len", "C", "B", "D", "T", " C", "Ne", "S", "W", "I", "RN", "No", "Ni", "Z", "Ns", "M", "J", " n", "NA", "n"], "A": ["F", "AD", "GA", "a", "L", "At", "AS", "X", "Y", "AP", "LA", "AR", "TA", "K", "AM", "AB", "SA", "P", "B", "C", "T", "AC", "As", "Ar", "D", "au", "array", "AA", "API", "S", "I", "Array", "CA", "U", "AF", "alpha", "M", " a", "G", "Am", "HA", "NA", "RA", "An"], "Q": ["F", "E", "V", "Max", "H", "X", "Y", "AR", "Query", "K", "O", "P", "B", "C", "T", "D", "S", "W", "I", "q", "Z", "Array", "Py", "U", "J", "M", "G"], "R": ["F", "E", "RG", "Rs", "NR", "L", "V", "H", "X", "Y", "SR", " r", "AR", "K", "r", "OR", "RR", "Range", "O", "RO", "P", "B", "C", "D", "S", "W", "I", "Rh", "GR", "RN", "DR", "BR", "KR", "Array", "RP", "M", "J", "ER", "JR", "G", "RA", "Role"], "i": ["gi", "ih", "k", "vi", "int", "ib", "mi", "p", "ai", "c", " I", "h", "y", "ix", "iu", "ti", "si", "eni", "index", "x", "yi", "ind", "I", "l", "u", "d", "pi", "q", "f", "j", "xi", "ri", "ci", "ip", "v", "key", "il", "col", "id", "zi", "li", "ii", "bi", "n"]}}
{"code": "n, k = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nd = dict()\\nfor v in a:\\n    if v not in d:\\n        d[v] = 1\\n    else:\\n        d[v] += 1\\n\\nl = []\\nfor v in d.values():\\n    l.append(v)\\nl.sort()\\n\\nprint(sum(l[:len(l)-k]))", "target": "257", "substitutes": {"n": ["name", "p", "na", "c", "i", "o", "nc", "num", "ne", "z", "sn", "ny", "nn", "f", "network", "m", "ns", "nl", "b", "np", "e", "N", "pn", "nb", "an"], "k": ["km", "ke", "p", "g", "c", "i", "K", "y", "o", "h", "r", "kk", "ijk", "ks", "size", "kn", "z", "x", "kw", "w", "ak", "ok", "u", "unk", "q", "j", "sk", "f", "m", "ku", "b", "e", "ik"], "a": ["aa", "va", "at", "ma", "ans", "p", "na", "c", "fa", "y", "ab", "au", "array", "da", "ar", "A", "ak", "aaa", "f", "sa", "m", "ga", "ac", "area", "am", "alpha", "b", "ea", "ds", "ada", "an", "ad"], "d": ["s", "dd", "p", "nd", "g", "c", "i", "dat", "o", "dict", "r", "sd", "md", "ded", "D", "z", " dd", "od", "da", "x", "u", "do", "f", "j", "dl", "bd", "m", "dt", "dc", "cd", "data", "db", "b", "ld", "e", "t", "pd", "ds", "part", "vd", "ad"], "v": ["s", "vi", "ve", "value", "int", "V", "uv", "p", "g", "c", "i", "var", "h", "y", "r", "o", "pos", "vid", "ver", "lv", "vs", "z", "x", "nv", "w", "u", "q", "ov", "j", "vol", "f", "iv", "m", "vv", "b", "e", "t", "sv", "val", "ev", "vd"], "l": ["lp", "s", "ol", "L", "p", "g", "c", "i", "y", "sl", "r", "o", "h", "el", "la", "split", "left", "lc", "kl", "lines", "pl", "u", "ll", "ln", "dl", "f", "j", "m", "list", "nl", "wl", "fl", "b", "ld", "e", "ls", "t", "li", "cl", "ul"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\nimport sys\\nimport os\\nimport math\\n\\ndef distance(v0, v1, p):\\n    n = len(v0)\\n    s = 0\\n    for i in range(n):\\n        diff = abs(v0[i] - v1[i])\\n        s += diff ** p\\n    return s ** (1/p)\\n\\ndef chebyshev(v0, v1):\\n    n = len(v0)\\n    ret = 0\\n    for i in range(n):\\n        diff = abs(v0[i] - v1[i])\\n        if diff > ret:\\n            ret = diff\\n    return ret\\n\\nn = int(input())\\nv0 = list(map(float, input().split()))\\nv1 = list(map(float, input().split()))\\n\\nprint(distance(v0, v1, 1))\\nprint(distance(v0, v1, 2))\\nprint(distance(v0, v1, 3))\\nprint(chebyshev(v0, v1))", "target": "325", "substitutes": {}}
{"code": "from collections import deque\\ndef MI(): return map(int, input().split())\\nN,Q=MI()\\ngraph=[[] for i in range(N)]\\nPoint=[0]*N\\nfor i in range(N-1):\\n  a,b=MI()\\n  graph[a-1].append(b-1)\\n  graph[b-1].append(a-1)\\nfor i in range(Q):\\n  p,x=MI()\\n  Point[p-1]+=x\\nque=deque([])\\nque.append(0)\\ncheck=[0]*N\\nwhile que:\\n  v=que.pop()\\n  check[v]=1\\n  for u in graph[v]:\\n    if check[u]!=1:\\n      #continue\\n      Point[u]+=Point[v]\\n      que.append(u)\\nprint(*Point)", "target": "644", "substitutes": {"N": ["F", "E", "L", "V", "H", "X", "Y", "Size", "NC", "Num", "NS", "NI", "K", "Na", "O", "P", "B", "C", "T", "D", "Len", "Ne", "S", "A", "W", "I", "No", "NG", "Node", "Ni", "Z", "Ns", "ND", "U", "R", "M", "J", "G", "NA", "Wh", "n"], "Q": ["F", "E", "L", "V", "H", "X", "Y", "NE", "Query", "K", "O", "P", "B", "T", "C", "D", "S", "W", "I", "q", "Z", "U", "R", "J", "M", "Qu", "G", "CH", "Que", "Count", "n"], "graph": ["group", "closure", "queue", "feed", "gru", "ge", "g", "condition", "gap", "o", "layout", "chain", "ph", "connect", "P", "sign", "central", "pattern", "dot", "edge", "array", "grid", "index", "gpu", "image", "history", "node", "igraph", "connection", "degree", "q", "network", "position", "model", "point", "shape", "Graph", "parent", "data", "raph", "tree", "path", "connected", "complex", "G", "config", "pg", "draw", "block", "vg", "n"], "i": ["ui", "ei", "int", "ie", "chi", "qi", "ai", "c", "o", "r", "iq", "iu", "si", "ind", "I", "it", "pi", "d", "q", "io", "j", "f", "xi", "di", "ri", "ni", "ci", "ip", "\u0438", "e", "il", "id", "li", "ii", "bi", "ti"], "Point": ["Base", "line", "X", "Check", "Y", "P", "C", "D", "Edge", "A", "Position", " point", "I", "Node", "Points", "Line", "Data", "position", "point", "Array", "Set", "Graph", "U", "Shape", "List", "Location", "Chain", "G", "Index", "Path", "Block", "Group"], "a": ["aa", "k", "s", "ai", "g", "c", "y", "o", "r", "ba", "ab", "z", "A", "w", "l", "d", "q", "f", "j", "sa", "ac", "ae", "alpha", "e", "an", "n"], "b": ["s", "k", "be", "bp", "bs", "g", "c", "y", "o", "r", "h", "B", "ba", "ab", "z", "w", "sb", "l", "nb", "d", "q", "j", "f", "m", "base", "e", "part", "n"], "p": ["k", "int", "ps", "g", "c", "y", "h", "o", "tp", "pr", "cp", "ap", "ph", "P", "z", "pa", "w", "l", "q", "f", "j", "point", "m", "pp", "ip", "t", "pe", "e", "py", "n"], "x": ["k", "X", "g", "c", "xs", "y", "h", "ph", "P", "z", "ex", "index", "w", "l", "d", "max", "q", "f", "j", "ax", "point", "xi", "xp", "pair", "e", "t", "pe", "xy", "xc"], "que": ["cube", "cur", "pool", "change", "line", "group", "code", "me", "queue", "Queue", "qu", "qa", "ge", "g", "c", " queue", "use", "lock", "en", "pos", "log", "ig", "fe", "qv", "grid", "ques", "cache", "file", "gate", "stack", "exec", "bug", "l", "req", "q", "he", "f", "update", "core", "ue", "iss", "set", "flag", "list", "ae", "tree", "hi", "quit", "view", "complete", "e", "pe", "sem", "ha", "seq", "id", "cl", "closed", "Que", "block"], "check": ["call", "checks", "k", "end", "change", "value", "code", "Check", "qa", "c", "work", "case", "comment", "checked", "index", "clean", "valid", "w", "node", "checking", "ok", "q", "out", "status", "ignore", "sync", "style", "core", "back", "see", "rank", "no", "complete", "match", "key", "view", "ck", "count", "id", "qq", "cl", "block", "test", "update", "info"], "v": ["s", "k", "vi", "ve", "value", "uv", "V", "va", "g", "c", "vu", "y", "r", "o", "h", "ver", "vs", "vp", "w", "l", "d", "q", "ov", "f", "j", "iv", "m", "vv", "vc", "U", "e", "vy", "sv", "ul", "n"], "u": ["k", "ui", "uv", "g", "c", "vu", "y", "o", "num", "un", "iq", "iu", "nu", "ou", "cu", "w", "it", "l", "d", "q", "f", "ue", "up", "back", "U", "lu", "e", "id", "ul", "uu", "n"]}}
{"code": "n, d = map(int,input().split())\\n\\ntotal = []\\nfor i in range(n):\\n    x = list(map(int,input().split()))\\n    total.append(x)\\n\\nans = 0\\nfor i in range(n):\\n    for j in range(i+1,n):\\n        temp = 0\\n        for y,z in zip(range(d),range(d)):\\n            temp += (total[i][y] - total[j][z])**2\\n        if temp**0.5 == int(temp**0.5):\\n            ans += 1\\n\\nprint(ans)", "target": "182", "substitutes": {"n": ["s", "k", "a", "p", "g", "c", "o", "nc", "num", "en", "size", "ne", "w", "l", "u", "nn", "nt", "f", "m", "ns", "no", "ni", "v", "b", "t", "N", "e", "count", "dn", "nb", "an"], "d": ["dx", "k", "dy", "p", "g", "c", "dat", "o", "h", "sd", "D", "da", "w", "l", "u", "do", "dt", "f", "dl", "m", "dc", "di", "data", "b", "dim", "ld", "v", "e", "t", "ds", "dn"], "total": ["zero", "full", "stable", "normal", "tt", "non", "p", "dat", "otal", "tp", "translation", "we", "dot", "final", "scale", "si", "mini", "da", "index", "valid", "partial", "mu", "shared", "start", "current", "flat", "less", "nt", "max", "ta", " Total", "trans", "note", "tu", "scan", "parent", "no", "Total", "data", "complete", "ski", "private", "list", "alpha", "base", "t", "order", "all", "info", "multi", "dos", "part", "sum"], "i": ["ji", "k", "ie", "int", "qi", "p", "ai", "c", "o", "ini", "im", "iu", "si", "index", "yi", "ind", "w", "I", "it", "l", "u", "pi", "q", "io", "f", "m", "xi", "di", "ni", "ip", "ci", "v", "b", "t", "e", "li", "ii", "ti"], "x": ["s", "k", "int", "X", "p", "xs", "c", "xx", "number", "ix", "px", "size", "ex", "index", "w", "cross", "l", "u", "max", "q", "f", "m", "xi", "data", "v", "b", "t", "e", "id"], "ans": ["ss", "s", "a", "ents", "lan", "cas", "offs", "nas", "eps", "ams", "p", "na", "span", "activation", "anas", "AN", "ANS", "anes", "ks", "mean", "ann", "facts", "ani", "ana", "es", "can", " means", "nan", "outs", "cross", "args", "aned", "parts", "nn", "atts", "aus", "ens", "sk", "leans", "ants", "ns", "types", "no", "os", "san", "ls", "cons", "plan", "oss", "an", "sum", "ad", "ins"], "j": ["ji", "k", "dy", "p", "g", " dj", "jo", "c", "dj", "jj", "ix", "o", "h", "r", "je", "ind", "w", "l", "u", "uj", "q", "f", "jp", "m", "oj", "xi", "aj", "di", "ij", "J", "v", "b", " ii", "e", "t", "zi", "li", "ii"], "temp": ["min", "magic", "wa", "a", "stable", "non", "tt", "tw", "p", "pre", "c", "dat", "tp", "pos", "tmp", "iter", "pt", "this", "sp", "emp", "size", "lc", "perature", "diff", "valid", "w", "adj", "Temperature", "pi", "tem", "Temp", "dc", "ci", "ct", "v", "zip", "limit", "fake", "t", "col", "eff", "test", "sum", "tc", "offset"], "y": ["yr", "yd", "s", "a", "dy", "p", "Y", "c", "h", "o", "ay", "year", "zy", "yi", "cy", "w", "ny", "yt", "u", "q", "f", "yy", "ya", "oy", "v", "b", "e", "zi", "py", "vy", "ii", "ey"], "z": ["ji", "k", "iz", "p", "c", "zone", "h", "o", "pos", "cz", "zh", "yi", "w", "l", "u", "nz", "q", "Z", "zz", "f", "m", "zen", "v", "zip", "b", "e", "t", "xy", "zi", "id", "tz"]}}
{"code": "s = input()\\nn = len(s)\\n\\nans = 0\\nif s[1:] == '9' * (n - 1):\\n  ans = int(s[0]) + 9 * (n - 1)\\nelif n != 1:\\n  ans = int(s[0]) + 9 * (n - 1) - 1\\nelse:\\n  ans = int(s[0])\\n\\nprint(ans)\\n", "target": "2", "substitutes": {"s": ["ss", "strings", "a", "south", "spec", "p", "states", "ps", "g", "c", "xs", "i", "sets", "y", "r", "o", "speech", "times", "bis", "ks", "si", "es", "search", "S", "w", "sb", "tests", "args", "parts", "services", "ses", "d", "l", "less", "sg", "lines", "f", "cs", "m", "ns", "input", "os", "ts", "b", "gs", "v", "space", "e", "ls", "t", "string", "letters", "sv", "source", "comments"], "n": [" N", "k", "name", "a", "mn", "p", "c", "i", "o", "y", "nc", "num", "en", "net", "ne", "z", "x", "sn", "w", "conn", "l", "cn", "d", "u", "nn", "nt", "q", "f", "j", "ln", "m", "ns", "no", "ni", "nl", "nr", "len", "b", "np", "v", "t", "N", "e", "nb", "nor"], "ans": ["ss", "ents", "lan", "nas", "ras", "amps", "cas", "ams", "atan", "na", "offs", "span", "ats", "aning", "anas", "AN", "ANS", "anes", "ks", "mean", "annels", "ane", "ann", "anse", "anc", "ani", "aces", "ays", "ana", "ares", "anon", "cus", " means", "nan", "ars", "anus", "aned", "ations", "ons", "aus", "ens", "leans", "sk", "ln", "ants", "ns", "scan", "os", "san", "ls", "plan", "ds", "an", "ins"]}}
{"code": "s = str(input())\\nfor i in range(len(s)):\\n    s=s[:-2]\\n    if s[:len(s)//2] ==s[len(s)//2:]:\\n        print(len(s))\\n        break", "target": "696", "substitutes": {"s": ["new", "ss", "hs", "strings", "a", "south", "qs", "str", "ins", "words", "p", "ps", "xs", "c", "g", "rows", "sets", "uploads", "o", "r", "sl", "y", "slice", "say", "second", "si", "es", "params", "x", "S", "w", "sb", "args", "lines", "parts", "ses", "d", "l", "less", "sg", "f", "rs", "ssl", "m", "ns", "self", "input", "single", "seconds", "os", "ts", "b", "gs", "string", "v", "e", "ls", "t", "space", "ips", "ds", "ops", "sv", "source", "your", "n"], "i": ["gi", "end", "p", "c", "h", "r", "num", "iu", "lo", "z", "si", "index", "x", "ind", "I", "l", "u", "d", "f", "j", " j", "ip", "e", "col", "id", "li", "ii", "n"]}}
{"code": "S = str(input())\\nN = len(S)\\nD = [0,0] #B,W\\nans = 0; prev = S[0]\\nfor i in range(N):\\n  if S[i] == \"B\":\\n    D[0] += 1\\n  else:\\n    D[1] += 1\\n  if i >= 1:\\n    if S[i] == prev:\\n      continue\\n    else:\\n      ans += 1\\n      prev = S[i]\\nif D[0] == 0: #\u3059\u3079\u3066W\\n  print(0); exit()\\nelif D[1] == 0:\\n  print(0); exit()\\nprint(ans)\\n", "target": "655", "substitutes": {"S": ["F", "s", "L", "DS", "V", "URI", "H", "Q", "X", "Y", "NS", "K", "Si", "Test", "SH", "ST", "SI", "O", "P", "T", "C", "B", "A", "W", "I", "SS", "Z", "CS", "U", "R", "M", "SP", "SN", "G"], "N": ["F", "E", "L", "V", "NN", "Q", "X", "Y", "NS", "K", "O", "P", "B", "C", "T", "Ne", "I", "NT", "Z", "Ns", "R", "M", "J", "G", "NA", "n"], "D": ["F", "E", "L", "DS", "V", "Q", "X", "Y", "K", "O", "P", "B", "C", "T", "MD", "DD", "W", "I", "CD", "Ds", "d", "Z", "ND", "U", "R", "M"]}}
{"code": "s = list(map(int, input().split()))\\nfor i in range(1,s[0]+1):\\n    a=i*(i+1)/2\\n    if a>=s[0]:\\n        print(i)\\n        break", "target": "350", "substitutes": {"s": ["ss", "strings", "qs", "states", "p", "ps", "xs", "c", "g", "sets", "o", "y", "results", "size", "si", "es", "x", "S", "w", "cells", "sb", "start", "args", "l", "parts", "lines", "d", "services", "u", "ses", "f", "m", "ns", "seconds", "os", "gs", "b", "v", "e", "ls", "t", "sv", "n"], "i": ["ji", "k", "ie", "int", "chi", "p", "phi", "ai", "c", "y", "ini", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "uri", "l", "u", "pi", "d", "j", "f", "m", "xi", "hi", "ci", "alpha", "ip", "data", "b", "v", "e", "id", "li", "ii", "bi", "n"], "a": ["aa", "va", "ma", "p", "na", "qa", "ai", "g", "c", "fa", "o", "y", "la", "ba", "ab", "au", "ana", "pa", "A", "af", "ia", "l", "u", "f", "ca", "sa", "ac", "ga", "area", "aj", "am", "ae", "alpha", "b", "ea", "e", "an", "n"]}}
{"code": "n = int(input())\\npoints = list(map(int, input().split()))\\n\\nsum = 0\\nfor i in points:\\n  sum += i\\n\\nmean = sum/len(points)\\nif mean%2 != 0:\\n    mean = int(round(mean,0))\\n\\nans = 0\\nfor i in points:\\n  ans += (i - mean)**2\\n\\nprint(ans)", "target": "46", "substitutes": {"n": ["s", "k", "span", "p", "na", "g", "nm", "c", " ni", "o", "nc", "num", "ot", "net", "ne", "ny", "l", "pi", "nt", "nn", "m", "ns", "no", "ni", "b", "N", "nb"], "points": ["holes", "s", "frames", "groups", "amps", "words", "p", "poly", "ps", "ms", "rows", "steps", "results", "pos", "ads", "times", "posts", "pt", "weight", "cycles", "marks", "index", "params", "blocks", " means", "cells", "args", "lines", "faces", "items", "ports", "ids", "Points", "ons", "stats", "works", "planes", "cs", "point", "ants", "ns", "objects", "breaks", "data", "features", "shots", "path", "images", "angles", "ages", "count", "elines", "part", "ins"], "sum": ["mass", "min", "p", "na", "ms", "miss", "num", "weight", "sign", "spread", "size", "ann", "scale", "si", "index", "sim", "diff", "start", "cal", "max", "gram", "out", "sk", "sa", "am", "average", "alpha", "summary", "count", "Sum", "fill", "part", "an", "um", "total"], "i": ["s", "a", "ie", "int", "chi", "qi", "mi", "p", "phi", "ai", "g", "c", "init", "y", "gu", "ini", "im", "iq", "sp", "ani", "z", "mini", "si", "x", "yi", "mu", "ind", "start", "w", "I", "it", "l", "u", "pi", "d", "io", "f", "j", "m", "xi", "di", "ni", "ci", "v", "b", "e", "t", "id", "li", "ii", "anti", "bi", "ip"], "mean": ["mass", "min", "error", "mad", "a", "line", "group", "span", "ma", "me", "sample", "p", "na", "std", "ms", "state", "var", "miss", "pos", "ay", "md", "mas", "weight", "ane", "spread", "ann", "size", "ani", "au", "scale", "si", "diff", "sim", " means", "start", "lines", "mag", "nn", "max", "mand", "sk", "m", "rank", "age", "am", "ni", "average", "data", "alpha", "med", "summary", "count", "grade", "sav", "an", "um"], "ans": ["s", "lan", "nas", "span", "amps", "eps", "ams", "na", "ps", "ms", "std", "AN", "mas", "ANS", "any", "ks", "ann", "ani", "anc", "ays", "ana", " means", "nan", "asses", "aned", "ons", "aus", "ens", "sk", "cs", "ants", "ns", "ls", "ians", "ds", "plan", "sam", "an", "ins"]}}
{"code": "n = int(input())\\nA = list(map(int, input().split()))\\nA2 = A[:]\\nRAW = A[:]\\n\\n# +-\u306b\u3059\u308b\u3068\u304d\\nsu = 0\\nfor i, a in enumerate(A):\\n    su += a\\n    if i % 2 == 0:\\n        if su <= 0:\\n            # a[i] \u3092\u5897\u3084\u3059\\n            t = (-su + 1)\\n            A[i] += t\\n            su += t\\n    else:\\n        if su >= 0:\\n            # a[i] \u3092\u3078\u3089\u3059\\n            t = (su + 1)\\n            A[i] -= t\\n            su -= t\\n\\n# -+\u306b\u3059\u308b\u3068\u304d\\nsu = 0\\nfor i, a in enumerate(A2):\\n    su += a\\n    t = 0\\n    if i % 2 ==0:\\n        if su >= 0:\\n            # a[i]\u3092\u3078\u3089\u3059\\n            t = (su + 1)\\n            A2[i] -= t\\n            su -= t\\n    else:\\n        if su <= 0:\\n            # a[i]\u3092\u3075\u3084\u3059\\n            t = (-su + 1)\\n            A2[i] += t\\n            su += t\\n# print(A)\\n# print(A2)\\n\\nans1 = sum([abs(a-b) for a,b in zip(A, RAW)])\\nans2 = sum([abs(a-b) for a,b in zip(A2, RAW)])\\nprint(min(ans1, ans2))", "target": "178", "substitutes": {"n": [" N", "s", "k", "L", "p", "na", "g", "c", "i", "o", "r", "Na", "P", "C", "z", "ar", "l", "pi", "d", "nn", "Node", "Ni", "j", "m", "M", "N", "NA", "nb"], "A": ["F", "AD", "GA", "a", "L", "At", "New", "V", "H", "Q", "Y", "LA", "K", "AM", "O", "P", "B", "C", "T", "D", "As", "API", "Args", "AA", "Default", "Alpha", "S", "W", "I", "Array", "CA", "U", "Part", "Input", "AF", "M", "N", "Wa", "G", "Am", "HA"], "A2": ["N4", "PB", "NB", "P2", "AB", "N1", "N2", " A4", "P1", "A4", "A1", " AB", " A1", "P4"], "RAW": ["raw", "H", "Q", "X", "Y", "P", "Ar", "AA", "S", "W", "w", "Ni", "Array", "input", "R", "Input", "alpha", "M", "N", "NA"]}}
{"code": "a=[list(map(int,input().split())) for _ in [0]*3]\\nn=int(input())\\nb=[int(input()) for _ in range(n)]\\n\\nimport numpy as np\\n\\nfor i in range(3):\\n  a[i]=[1 if x in b else 0 for x in a[i]]   \\n\\ns_1=max(np.sum(a,axis=0))\\ns_2=max(np.sum(a,axis=1))\\ns_3=a[0][0]+a[1][1]+a[2][2]\\ns_4=a[0][2]+a[1][1]+a[2][0]\\n\\nif max(s_1,s_2,s_3,s_4)==3:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "464", "substitutes": {"a": ["aa", "s", "k", "wa", "auto", "int", "va", "ma", "active", "p", "na", "ai", "c", "ama", "fa", "y", "o", "work", "app", "ba", "ab", "au", "array", "z", "da", "pa", "A", "w", "l", "u", "d", "aaa", "ca", "f", "sa", "ac", "ga", "m", "asa", "j", "area", "aj", "am", "input", "ae", "data", "alpha", "t", "e", "all", "off", "an", "ast", "ad"], "_": [" p", "__", " g", "p", "al", "g", " seq", "ay", " time", " m", "f", " j", "len", "all", " num", "val", " all", "block"], "n": ["s", "k", "p", "g", "c", "y", "r", "nc", "num", "o", "h", "number", "ne", "z", "w", "l", "u", "d", "nn", "max", "f", "j", "m", "ns", "v", "t", "N", "nb", "an"], "b": ["s", "aa", "k", "ib", "p", "bs", "g", "c", "y", "r", "B", "ba", "ab", "w", "sb", "l", "u", "d", "bb", "f", "j", "eb", "m", "ac", "ga", "xb", "binary", "v", "e", "bc", "nb", "bi", "ad"], "i": ["k", "ui", " bi", "int", " it", " z", "p", "ai", "c", " I", "y", "o", " e", "ix", " c", "r", "z", "si", "index", "ind", " q", "I", "l", "u", "d", "pi", "q", "j", "f", "m", " j", "xi", "ci", "v", " ii", "e", "t", "id", "bit", "ii", "li", "ip"], "x": ["k", "int", "X", "p", "na", "xx", "y", "ix", "z", "ex", "index", "xxx", "w", "u", "d", "max", "f", "ax", "m", "xi", "no", "ci", "xp", "v", "t", "all", "xy", "xc", "an"], "s_1": [" s_one", " s_One", "s_One", " s_0", "s_5", " s_5", "s_one", "s_0"], "s_2": ["s218", "sx5", "s_22", "its_5", "sx18", "its_22", "s_two", "s22", "s_18", " s_18", "sx4", "s2two", "s_14", " s_two", "s_5", "sx14", "sx22", "s24", "sxtwo", "sx2", "its_14", "its_2"], "s_3": ["s___23", "s___3", " s_223", "s___third", "s___223", "s_23", " s_23", "s_43", "s_third", "s_three", " s_third", "u_2", "u_3", "u_three", "s_223", "u_43"], "s_4": ["s23", "ws_0", "s20", "s_22", "ws_2", "sLog443", "ws_4", "sLog4", "ss_4", "s22", "sLog22", "s_443", "sLog2", "s24", "ws_3", "s_0", "ss_22", "ss_2", "ss_443"]}}
{"code": "#!/usr/bin/env python3\\n\\nR, G, B, N = map(int, input().split())\\n\\nans = 0\\ncnt = 0\\ncnt2 = 0\\nfor i in range(N+1):\\n    cnt = R * i\\n    for j in range(N+1):\\n        cnt2 = cnt + G * j\\n        if cnt2 == N:\\n            ans += 1\\n            continue\\n        if cnt2 > N:\\n            continue\\n        else:\\n            nokori = N - cnt2\\n            if nokori % B == 0:\\n                ans += 1\\nprint(ans)\\n", "target": "315", "substitutes": {}}
{"code": "import collections\\n\\nN = int(input())\\nS_list = []\\nfor n in range(N):\\n  S_list.append(input())\\n\\nc = collections.Counter(S_list)\\nmax_list = []\\n_max_value = 0\\nfor idx, value in enumerate(c.most_common()):\\n  if idx == 0:\\n    max_list.append(value[0])\\n    _max = value[1]\\n    continue\\n  if _max == value[1]:\\n    max_list.append(value[0])\\n  else:\\n    break\\n\\nfor answer in sorted(max_list):\\n  print(answer)", "target": "750", "substitutes": {"N": ["F", "Length", "Number", "L", "NR", "V", "NN", "Sn", "X", "Y", "Size", "Num", "NS", "NE", "K", "NW", "CNN", "O", "P", "T", "C", "B", "D", "Ne", "S", "Ni", "Z", "Ns", "R", "M", " Ne", "NA"], "S_list": ["SS_LIST", "SIXLIST", "SIXlist", "S2list", "S_range", "SS_List", "S2List", "SS_base", "Si_list", "S_LIST", "SiIPstring", "s_List", "SIPstring", "SiIPLIST", "s2List", "SIPLIST", "Si_LIST", "SiIPlist", "s2list", "s_LIST", "Si_range", "SIPlist", "S_List", "s2LIST", "S2LIST", "SIPrange", "S_string", "SIXrange", "Si_string", "SiIPrange", "s_list", "SS_list", "SIXstring", "S_base"], "n": ["min", "name", "k", "na", "number", "nc", "num", "net", "un", "rn", "nu", "ne", "x", "sn", "l", "nn", "nt", "nz", "network", "ns", "nl", "ni", "pn", "nb", "nor"], "c": ["s", "cur", "cycle", "p", "y", "nc", "cp", "C", "coll", "lc", "counter", "ce", "cache", "cu", "con", "cm", "l", "ctx", "u", "d", "cn", "f", "cs", "m", "ac", "co", "ci", "ct", "v", "b", "cr", "t", "count", "cc", "e", "col", "mc", "cl", "abc"], "max_list": ["maxJindex", "extraFl", "max2index", " max2index", "extra_lists", "full_list", "maxJvalue", "maxxlist", " max2list", "maxFlist", "extraFlisted", "full_la", "max_lists", " max_value", "max_len", "max5list", "extra_l", "extra_listed", "extra_list", "max_table", "max_value", " max2listed", " max_len", " max_listed", "max5table", "max2listed", "maxxindex", "maxxvalue", "full_listed", "maxJlisted", " max_index", "maxFlisted", "max_index", "extraFlists", "max_set", "max_la", "full_table", " max2value", "max2list", "maxxlisted", "maxJlist", "max_listed", "max2value", "max5listed", "maxFl", "maxFlists", "extraFlist", "max5la", "max_l", " max_set"], "_max_value": ["_max_max", "_last_val", "_last_key", "_max_key", "_max_val", "_last_max", "_max2val", "_max2max", "_max2key", "_last_value", "_max2value"], "idx": ["idj", " idy", "Idx", " idindex", "casey", "casex", "idindex", "caseindex", "indz", "idy", "Idj", "casexs", " idxs", "Idz", " idz", "indy", " idj", "pidx", "idz", "Idy", "indj", "pidindex", "idxs", "pidxs", "pidy", "indx"], "value": ["name", "letter", "example", "unit", "end", "change", "vote", "zero", "python", "variable", "default", "element", "number", "result", "item", "comment", "section", "content", "values", "size", "server", "search", "response", "image", "index", "expression", "current", "child", "max", "member", "object", "position", "function", "option", "null", "address", "entry", "Value", "data", "list", "parent", "match", "type", "key", "v", "feature", "pair", "message", "word", "val", "test", "VALUE", "document"], "_max": ["_total", "_co", "lengthco", "longtotal", "longlast", "longparse", " _min", "lengthparse", "longMax", "_parse", "_Max", "lengthMax", "longmax", "longco", "_min", "lengthmax", " _total", " _last", "_last", "longmin"], "answer": ["name", "example", "vote", "text", "token", " answers", "reply", "p", "element", "result", "choice", "array", "search", "response", "cache", "sn", "blank", "score", "page", "object", "sort", "option", "rank", "address", "query", "entry", "list", "data", "average", "question", "answered", "string", "key", "order", "grade", "word", "val", "prefix", "next", "Answer"]}}
{"code": "s = int(input())\\nh = s // 3600\\nm = s % 3600 // 60\\ns = s % 60\\nprint(h, ':', m, ':', s, sep='')\\n\\n", "target": "276", "substitutes": {"s": ["ss", "new", "min", "sh", "a", "south", "shows", "words", "p", "states", "ms", "xs", "c", "g", "i", "sym", "ps", "sets", "hours", "o", "r", "y", "sd", "sl", "sf", "times", "size", "si", "es", "blocks", "x", "S", "w", "sb", "sites", "l", "lines", "sec", "d", "js", "f", "j", "cs", "sm", "ns", "ws", "seconds", "abs", "mins", "b", "v", "gs", "space", "e", "ls", "t", "session", "string", "ds", "its", "se", "rs", "changes", "sum", "n"], "h": ["rh", "ih", "hs", "end", "sh", "H", "p", "hour", "hours", "g", "c", "i", "oh", "gh", "r", "y", "o", "hr", "z", "time", "x", "w", "hh", "l", "u", "d", "q", "f", "HH", "hi", "v", "b", "t", "e", "hm", "n"], "m": ["em", "min", "mr", "tm", "mi", "p", "ms", "g", "c", "nm", "i", "r", "o", "y", "im", "pm", "ym", "md", "time", "dm", "cm", "l", "u", "d", "f", "j", "sm", "am", "M", "v", "b", "mod", "t", "e", "mm", "hm", "month", "n"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\nns = lambda: readline().rstrip() # input string\\nni = lambda: int(readline().rstrip()) # input int\\nnm = lambda: map(int, readline().split()) # input multiple int \\nnl = lambda: list(map(int, readline().split())) # input multiple int to list\\n\\nn = ni()\\na = nl()\\n\\nsa = set(a)\\nl = len(sa)\\n\\nif l == 1:\\n    if a[0] == 0:\\n        print('Yes')\\n    else:\\n        print('No')\\nelif len(a) % 3 == 0:\\n    if l == 2:\\n        if a.count(0) == n // 3:\\n            print('Yes')\\n        else:\\n            print('No')\\n    elif l == 3:\\n        if all([a.count(ele) == n // 3 for ele in sa]):\\n            li = list(sa)\\n            if li[0] ^ li[1] ^ li[2] == 0:\\n                print('Yes')\\n            else:\\n                print('No')\\n        else:\\n            print('No')\\n    else:\\n        print('No')\\nelse:\\n    print('No')\\n", "target": "216", "substitutes": {"readline": ["playlines", "writefile", "runlines", "writeLine", "readle", "worklin", "readerlines", "readLine", "writelin", " readfile", "readerLine", "worklines", "readwrite", "writelines", "writele", " readlining", "runlining", "readerline", "readlining", "readerfile", "playlining", "workline", "writeline", "playwrite", " readwrite", "playle", "playline", "workle", " readLine", "runwrite", "playlin", "readlin", "readfile", "runline"], "readlines": ["runlines", "worklining", "readlins", "rawline", "rawlins", "runliner", "readableline", "Readline", " readliner", "worklines", "Readlining", "worklins", "Readlines", "readlining", "readliners", "workline", "readableliners", "readliner", "Readlins", "rawlining", "rawlines", "readablelines", " readliners", "readableliner", "runliners", "runline"], "ns": ["name", "paces", " prefix", " func", "NS", " text", " codes", " fmt", " indent", " name", "names", " nm", " NL", "fn", " encoding", " fn", " NS", " namespace", "Ns", " init", " ls", "pace", " rewrite", " symbols", " names", " n", " mapping", "n"]}}
{"code": "a,b,c=map(int,input().split())\\nx=max(a,b,c)\\nprint(a+b+c-x)", "target": "298", "substitutes": {"a": ["aa", "wa", "auto", "int", "va", "p", "ama", "aw", "y", "api", "la", "ab", "au", "da", "A", "u", "d", "f", "sa", "ca", "asa", "ac", "ax", "area", "aux", "aj", "am", "ae", "alpha", "ea", "e", "add", "an", "ad"], "b": ["bad", "aa", "be", "ib", "fb", "bs", "obb", "i", "y", "r", "h", "wb", "B", "ba", "ab", "sb", "cb", "l", "bb", "d", "rb", "ub", "f", "bd", "eb", "db", "gb", "v", "e", "bc", "bas", "nb", "lb", "bi", "ad", "n"], "c": ["s", "k", "cur", "p", "i", "y", "h", "cp", "C", "z", "ce", "cy", "cu", "w", "cb", "con", "cm", "l", "u", "d", "max", "f", "ca", "cs", "m", "ac", "ci", "ct", "v", "cf", "e", "cr", "count", "col", "cl", "n"], "x": ["dx", "s", "X", "p", "na", "g", "xs", "i", "xx", "fx", "y", "h", "rx", "ix", "size", "z", "xt", "ex", "xxx", " xx", "index", "w", "cross", "u", "d", "max", "f", "ax", "m", "ww", "xi", "v", "e", "xy", "xc", "an", "n"]}}
{"code": "S = input()\\n\\nnum_0 = S.count('0')\\nnum_1 = S.count('1')\\n\\nprint(min(num_0, num_1)*2)", "target": "40", "substitutes": {"S": ["F", "s", "RAW", "L", "V", "URI", "H", "ITS", "Q", "SR", "NS", "Sample", "INS", "SEC", "TS", "Source", "DATA", "SI", "Socket", "O", "SA", "P", "T", "C", "B", "D", "API", "Session", "A", "Submit", "FS", "SS", "ISS", "TEXT", "input", "POS", "U", "R", "Input", "SIGN", "M", "GS", "String", "N", "session", "SN", "G", "SU", "ES", "DES"], "num_0": [" num_02", "col_de", "col_50", "num___02", "num_2", "num_de", " num_k", " num_2", "num_00", "num_k", "col_00", "col_0", "num_02", "num___0", "num___k", "num___2", "num_50"], "num_1": [" num_251", "num051", "num_01", "num0501", "num_251", "num05251", " num_001", "num_2", "num052", " num_2", " num_01", "num_001"]}}
{"code": "n=int(input())\\nc=[int(input()) for _ in range(n)]\\nmod=10**9+7\\n\\ndp=[0]*(n+1)\\n\\ndp[0]=1\\nlast=[-1]*(2*10**5+1)\\nlast[c[0]]=0\\n\\nfor i in range(1,n):\\n    if c[i]==c[i-1] or last[c[i]]==-1:\\n        dp[i]=dp[i-1]\\n    else:\\n        dp[i]=(dp[i-1]+dp[last[c[i]]])%mod\\n    last[c[i]]=i\\n\\nprint(dp[n-1])\\n", "target": "708", "substitutes": {"n": ["s", "k", "a", "p", "o", "r", "nc", "num", "y", "number", "h", "net", "en", "un", "v", "rn", "ne", "z", "x", "sn", "w", "adj", "l", "cn", "d", "u", "nn", "j", "f", "m", "network", "ln", "ns", "ni", "b", "len", "np", "t", "N", "e", "count", "pn", "nb", "an"], "c": ["s", "k", "loc", "a", "sc", "code", "p", "ic", "g", "h", "r", "nc", "ec", "o", "y", "cp", "C", "lc", "conf", "z", "fc", "ch", "ce", "x", "cu", "w", "l", "u", "d", "cn", "q", "f", "j", "cs", "m", "ac", "dc", "cd", "ci", "ct", "b", "v", "cf", "e", "count", "cc", "t", "col", "mc"], "_": ["__", "p", "g", " time", "x", " un", "f", "len"], "mod": ["min", "mode", "spec", "dig", "MOD", "exp", "mult", "rec", "num", "pm", "cum", " Mod", "div", "scale", "od", "ment", "x", "oct", "comp", "module", "ind", "grad", "cm", "sec", "d", "max", "row", "sort", "m", "dr", "man", "rem", "mods", "complex", "debug", "dec", "add", "step", "ctr", "Mod"], "dp": ["lp", " p", "loc", "pid", "wp", "p", "dist", "pre", "pb", "dat", "tp", "pm", "cp", "pos", "rep", "cd", "gp", "P", "dep", "dot", " dd", "diff", "params", "comp", "dm", "grad", " delta", "cm", "d", "pi", "DP", "dl", "dt", "pp", "deb", "port", "dr", "dc", "drop", "address", "pkg", "di", "df", "data", "db", "ip", "wd", "alpha", "dim", "b", "ep", "pair", " cp", "pd", "e", "cr", "ds", "dos", "dn", "direction", " d"], "last": ["full", "end", "cycle", "sh", "code", "recent", "latest", "default", "p", "nd", "dist", "est", "extra", "use", "prev", "cp", "never", "this", "push", "any", "first", "size", "original", "rev", "final", "index", "cache", "later", "st", "start", "reverse", "current", "child", "show", "max", "one", "range", "sort", "sync", "core", "old", "self", "parent", "e", "count", "all", "col", "id", "li", "Last", "after", "next", "total"], "i": ["s", "ui", "ei", "int", "qi", "phi", "ai", "y", "ix", "si", "x", "yi", "l", "j", "f", "b", "li", "gi", "ie", "h", "ini", "u", "pi", "ni", "ci", "hi", "v", "e", "multi", "id", "ti", "ip", "p", " I", "oi", "r", "iu", "z", "index", "ind", "start", "it", "fi", "d", "max", "io", "m", "none", " j", "ji", "k", "end", "a", "o", "mini", "I", "uri", "ki", "xi", "di", "ri", "ii", "bi"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**7)\\n\\nN,Q=map(int,input().split())\\npar=[i for i in range(N+1)]\\ndef find(x):\\n    if par[x] ==x:\\n        return x\\n    else:\\n        par[x] = find(par[x])\\n        return par[x]\\ndef same(x,y):\\n    return find(x) == find(y)\\ndef unite(x,y):\\n    x = find(x)\\n    y = find(y)\\n    if x == y:\\n        return 0\\n    par[x]=y\\nfor i in range(Q):\\n    a,b=map(int,input().split())\\n    unite(a,b)\\nans=dict()\\nfor i in par:\\n    tmp=find(i)\\n    if tmp in ans:\\n        ans[tmp]+=1\\n    else:\\n        ans[tmp]=1\\nprint(max(ans.values()))", "target": "602", "substitutes": {"N": ["F", "E", "L", "V", "H", "X", "Y", "Size", "Num", "K", "Na", "O", "P", "B", "C", "T", "D", "Len", "Ne", "S", "A", "W", "I", "q", "Z", "Py", "R", "M", "J", "Qu", "G", "Wh", "n"], "Q": ["F", "QU", "E", "L", "V", "H", "X", "Y", "K", "O", "P", "T", "C", "B", "D", "IP", "MQ", "S", "A", "W", "I", "q", "Z", "U", "R", "M", "J", "Qu", "G"], "par": ["op", "loc", "int", "na", "p", "arr", "pre", "phi", "ps", "arg", "pol", "c", "var", "arc", "xx", " pars", "inter", "r", "per", "prev", "pr", "pos", "app", "rep", "like", "air", "ph", "P", "sp", "proc", "mp", "car", "array", "pa", "params", "comp", "ar", "ars", "patch", "pi", "q", "star", "param", "ax", "cat", "pp", "xi", "scan", "parent", "Par", "prep", "bar", "pair", "pe", " var", "py", "parse", "part", "pc"], "i": ["k", "ie", "int", "ei", "p", "phi", "ai", "c", "o", "r", "ini", "ix", "iq", "iu", "ti", "z", "si", "on", "index", "yi", "ind", "start", "I", "it", "l", "u", "d", "pi", "q", "ta", "out", "j", "f", "io", "m", "xi", "ori", "di", "ci", "ip", "v", "e", "t", "il", "py", "id", "zi", "li", "ii", "n"], "x": ["dx", "name", "k", "full", "int", "python", "code", "sex", "X", "p", "na", "tx", "xs", "c", "host", "xx", "yx", "rx", "work", "ix", "px", "h", "o", "ay", "ph", "any", "z", "array", "on", "ex", "index", "xxx", "xt", "w", "cross", "l", "php", "u", "wx", "d", "q", "one", "f", "ax", "j", "m", "xi", "ux", "ya", "xe", "v", "xp", "my", "key", "e", "t", "xes", "xy", "pe", "id", "xc", "n"], "y": ["yr", "yd", "ys", "dy", "ye", "p", "Y", "c", "sys", "xx", "o", "asy", "ym", "ay", "z", "fy", "ty", "yi", "wy", "cy", "yo", "w", "start", "ny", "yt", "u", "d", "q", "j", "sy", "ky", "xi", "yy", "ya", "oy", "type", "v", "t", "e", "xy", "py", "vy", "ry", "ey", "n"], "a": ["s", "aa", "va", "p", "ai", "c", "ama", "fa", "o", "api", "la", "ba", "ab", "au", "da", "pa", "ar", "A", "w", "u", "d", "f", "sa", "ac", "asa", "am", "aj", "ae", "e", "za", "an", "n"], "b": ["s", "k", "be", "p", "bs", "c", "r", "o", "h", "wb", "mb", "B", "ba", "ab", "z", "w", "sb", "l", "u", "d", "bf", "bb", "rb", "bu", "f", "j", "v", "e", "nb", "bi", "n"], "ans": ["news", "ents", "cas", "lan", "nas", "span", "amps", "ras", "ams", "p", "na", "ps", "ai", "xs", "ats", "ions", "aps", "antis", "anas", "ads", "photos", "ANS", "aces", "names", "ann", "anon", "ani", "anc", "ones", "ana", "ays", "annot", "params", "ands", "ars", "args", "aned", "ctx", "atts", "ons", "ens", "trans", "cs", "ants", "ns", "anners", "ases", "list", "os", "cons", "plan", "ians", "ops", "an", "ins"], "tmp": ["cmp", "const", "int", "wp", "tt", "fb", "p", "pre", "mi", "img", "period", "c", "fp", "var", "number", "tp", "kk", "pos", "cp", "txt", "api", "attr", "sp", "emp", "temp", "proc", "mp", "nom", "po", "opp", "xt", "st", "now", "start", "obj", "nb", "wx", "bb", "tri", "rb", "nt", "ta", "page", "f", "j", "sup", "ignore", "m", "nw", "copy", "area", "addr", "rt", "vt", "foo", "v", "np", "t", "py", "qq", "source", "part", "test", "ip"]}}
{"code": "import sys\\nfrom collections import deque\\n\\nN = int(input())\\nA = list(map(int, sys.stdin.readline().rsplit()))\\n\\nres = deque()\\nt = (N + 1) % 2\\n\\nfor i in range(N):\\n    if i % 2 == t:\\n        res.appendleft(A[i])\\n    else:\\n        res.append(A[i])\\n\\nprint(*res)\\n", "target": "601", "substitutes": {"N": ["F", "Nat", "E", "Number", "L", "NO", "V", "Q", "X", "Y", "Size", "NC", "Num", "NS", "NE", "K", "NM", "O", "Len", "T", "C", "P", "D", "B", "Ne", "S", "W", "I", "No", "NT", "Z", "Ns", "R", "M", " n", "Count", "n"], "A": ["F", "a", "L", "ACK", "At", "V", "Acc", "H", "AS", "X", "Q", "Y", "AP", "LA", "AR", "AST", "AW", "P", "B", "C", "mA", "As", "T", "Ar", "AC", "API", "array", "AA", "Args", "D", "Alpha", "S", "W", "Res", "Rap", "I", "args", "Data", "Array", "CA", "R", "AF", "alpha", "G", "Abs", "NA", "Answer", "App"], "res": ["rest", "rus", "ras", "vals", "p", "arr", "rap", "ps", "ms", " Res", "err", "ours", "Results", "our", "rows", "rx", "r", "result", "results", "pres", "rep", "re", "gr", "rez", "es", "response", "Result", "clean", "ros", "Res", "obj", "args", "ons", "resolution", "out", "js", "RES", "cs", "resh", "rt", "resp", "R", "data", "rem", "ress", "rss", "reset", "ret", "rs"], "t": ["k", "int", "tt", "p", "y", "tn", "tp", "ot", "o", "pt", "T", "tf", "temp", "ty", "x", "st", "start", "l", " T", "d", "nt", "ta", "dt", "f", "j", "m", "te", "ts", "v", "e", "test", "n", "total", "ti"], "i": ["gi", "ui", "a", "ie", "int", "qi", "p", "ai", "c", " I", "h", "y", "r", "o", "num", "lc", "ti", " ti", "z", "si", "index", "x", "yi", "ind", "start", "I", "it", "l", "u", "d", "pi", "nt", "tri", "ta", "j", "f", "dt", "m", " j", "ori", "ri", "di", "ni", "ci", "v", "b", "e", "id", "li", "ii", "n"]}}
{"code": "import math\\nA, P = input().split()\\nA = int(A)\\nP = int(P)\\n\\nprint(math.floor((3*A+P)/2))", "target": "428", "substitutes": {"A": ["F", "GA", "E", "a", "L", "V", "All", "Az", "Area", "H", "X", "MA", "Y", "AP", "LA", "AR", "TA", "EA", "AST", "AM", "SA", "B", "T", "C", "As", "D", "API", "AA", "Alpha", "S", "W", "I", "PA", "Ma", "Average", "Array", "CA", "U", "alpha", "M", " a", "N", "G", "Am", "NA", "Ac"], "P": ["F", "TP", " p", "E", "PI", "Point", "PO", "L", "Port", "V", "Q", "X", "p", "Y", "AP", "Pro", "K", "LP", "O", "T", "C", "B", "D", "NP", "Ps", "IP", "PE", "S", "PP", "W", "I", "PA", "DP", "Py", "U", "R", "PIN", "J", "M", "N", "G", "PT"]}}
{"code": "import math, collections\\nn, a, b = map(int, input().split())\\nlist_v = [int(v) for v in input().split()]\\nlist_v.sort(reverse=True)\\nlist_ave = []\\nlist_num = []\\nfor i in range(a, b+1):\\n  temp_ave = sum(list_v[:i]) / len(list_v[:i])\\n  list_ave.append(temp_ave)\\n  list_num.append(i)\\nmax_ave = max(list_ave)\\nprint(max_ave)\\n\\nlist_target = [list_num[i] for i, v in enumerate(list_ave) if v == max_ave]\\ncount = collections.Counter(list_v)\\nsort_count = sorted(count.items(), reverse=True)\\nres = 0\\nfor one_num in list_target:\\n  r = one_num\\n  for o in sort_count:\\n    temp = r - o[1]\\n    if temp <= 0:\\n      res += math.factorial(o[1]) // (math.factorial(o[1]-r) * math.factorial(r))\\n      break\\n    else:\\n      r -= o[1]\\nprint(res)", "target": "345", "substitutes": {"n": [" N", "s", " p", " h", " output", "p", " io", " number", "c", " c", "O", " f", " fn", "l", " np", "os", " code", " order", "N", " co", " index", " l", " do"], "a": ["s", "aa", "k", "wa", "va", "p", "ai", "c", "y", "num", "la", "ba", "ab", "da", "x", "A", "w", "l", "u", "f", "sa", "ac", "am", "aj", "oa", "alpha", "e", "an", "ad"], "b": ["k", "fb", "p", "bs", "c", "y", "h", "num", "wb", "mb", "bis", "B", "ab", "z", "x", "w", "sb", "body", "l", "bf", "d", "f", "j", "m", "length", "limit", "base", "e", "bc", "nb"], "list_v": ["list64vs", "list64count", "list_a", "listallv", "maxallo", "max_vs", "part_a", " list_a", "listLh", " list_ve", "listWh", "list_vv", "maxallvs", "listWsize", "list_vs", "listLv", " list_list", "list_list", "list_h", "max_v", " list_f", "listalcount", "listWv", "list_ve", "listalvs", "part_ve", "listalv", "listallo", "list_size", "list64v", "maxallv", " list_vv", " list_h", "part_v", "listalo", "listWlist", "listLsize", "list_count", "max_o", "listallvs", "list_o", "list64o", "listallcount", "listLlist", " list_size", "maxallcount", "max_count", "list_f"], "v": ["k", "vi", "value", "ve", "uv", "V", "int", "va", "p", "c", "var", "h", "num", "vid", "ver", "lv", "qv", "vs", "z", "si", "vp", "x", "nv", "av", "w", "version", "l", "u", "d", "q", "ov", "f", "j", "iv", "vol", "m", "vv", "e", "t", "val", "sv", "ev"], "list_ave": ["word_av", "word__aved", "word_aves", "word_ave", " list_aving", "max_num", "list_aving", "word__ave", "list__av", "list_aves", "list_aved", "word__av", "word_aved", " list_aved", "max_have", "list__ave", "list_ale", "list_av", "word__aves", "max_av", "list_have", " list_av", "list__aves", "list__aved", " list_ale"], "list_num": ["list5source", "list64number", "list_number", " list_member", " list_valid", "list64ave", "list5valid", " list_sum", " list_av", "list_source", "list_member", "list_av", "list64av", "list5num", "list64num", " list_temp", "list5sum", "list_temp", " list_source", " list_number", "list_valid", "list_sum"], "i": ["gi", "k", "ui", "vi", "ie", "int", "qi", "mi", "p", "ai", "c", "oi", "ini", "iu", "split", "ti", "z", "si", "eni", "index", "x", "yi", "ind", "start", "I", "l", "u", "pi", "d", "j", "f", "io", "m", "xi", "di", "ri", "ci", "ip", "e", "t", "col", "id", "li", "ii"], "temp_ave": ["temp_sav", "temp1avi", "used_ave", "tempallave", "temp_aved", " temp_aved", "usedallhave", "tempallhave", "tempallva", "used_va", " temp_av", "temp1aved", "tempkva", "tempacva", "tempacave", "tempkave", "temp_avi", "usedallva", "temp1ave", "usedallsav", "used_sav", "tempksav", "used_have", "tempkhave", "tempachave", "temp_av", "temp1av", "temp_va", "temp_have", " temp_avi", "usedallave", "tempacsav", "tempallsav"], "max_ave": ["max64aver", "max_aver", "max67au", " max_au", "maxallAV", "max64ape", "max_au", "maxallave", "maxallaves", "max_aved", " max_saving", "maxfAV", " max_AV", "max64ave", "max67aving", "max67aved", "maxallsaving", "max_AV", "maxfave", "max64aves", "max_ape", " max_ape", "max_saving", "max67ave", " max_aved", "maxfaves", " max_aving", "maxfsaving", "max_aving", "max_aves", " max_aves", " max_aver"], "list_target": ["listMarget", " list_count", "list1target", "list2Target", "listMobject", " list_arget", "list2source", "list_object", "list1source", "listnobject", "list_Target", "listntarget", "list_source", "list_count", "list_arget", "listMnum", "list1Target", "list2target", "list2count", "list1count", " list_source", "listMtarget", " list_object", "listnarget", " list_Target", "listnnum"], "count": ["call", "group", "collection", "code", "total", "p", "c", "carry", "number", "num", "coll", "force", "size", "counter", "array", "index", "cache", "child", "nt", "q", "max", "offset", "f", "cat", "core", "depth", "list", "check", "length", "base", "cr", "order", "col", "id", "sum", "Count"], "sort_count": ["sort1Count", "sort1num", "split_count", " sort_counter", "sort2count", "sortalcount", "sort1counter", "split_size", " sort_num", "sort_Count", "sort_num", " sort_Count", "split_len", "sort_size", "sort1count", "sort_len", "sort2len", "sort2size", "split2len", "split2count", "sortallen", "sort_counter", "split2size", "sortalsize"], "res": ["rh", "mass", "rest", "mr", "ras", "rex", "rm", "rup", "ps", "err", "resource", "rate", "rx", "result", "results", "pres", "re", "gr", "reg", "rez", "rev", "final", "es", "response", "Res", "req", "max", "q", "resolution", "sol", "RES", "right", "rc", "range", "resh", "resp", "rates", "os", "rem", "red", "cons", "reset", "ret", "rs", "sum"], "one_num": [" one_umi", " one_sum", " one_con", " one_number", "one___sum", "one_sum", "one_number", "one_con", "one___umi", "one___number", "one_umi", "one___num", "one_n", " one_n"], "r": ["rh", "rr", "cur", "mr", "ur", "p", "c", "err", "var", "rate", "number", "radius", "result", "pr", "rf", "h", "tr", "re", "lr", "rev", "x", "w", "l", "u", "rb", "d", "q", "f", "right", "sr", "rc", "m", "range", "ir", "j", "rl", "br", "rel", "R", "nr", "pair", "t", "cr", "e", "ru", "er", "rs", "nor"], "o": ["new", "s", "other", "k", "op", "ol", "to", "p", "c", "number", "of", "num", "y", "h", "O", "oc", "po", "index", "x", "norm", "w", "so", "obj", "l", "u", "d", "out", "f", "object", "iso", "m", "age", "co", "output", "no", "os", "length", "oa", "t", "all", "e", "order", "id", "range", "off"], "temp": ["rh", "ctrl", "p", "pre", "rap", "err", "c", "var", "tr", "tmp", "iter", "pt", "emp", "C", "z", "diff", "wrap", "w", "current", "u", "q", "wr", "frac", "f", "sr", "m", "Temp", "br", "R", "rem", "t", "cr", "e", "eff", "ctr", "tc"]}}
{"code": "import math\\na = list(map(int, input().split()))\\nif sum(list(map(lambda x:x%2, a))) == 3:\\n    b = a.pop(a.index(max(a)))\\n    print(a[0]*a[1]*(math.ceil(b/2) - math.floor(b/2)))\\nelse:\\n    print(0)", "target": "333", "substitutes": {"a": ["aa", "s", "zero", "auto", "at", "missing", "ma", "p", "na", "g", "aw", "c", "ama", "y", "o", "app", "any", "la", "ab", "div", "array", "da", "x", "search", "A", "valid", "now", "w", "action", "args", "ata", "l", "u", "d", "ca", "f", "sa", "ac", "ga", "m", "area", "aux", "input", "am", "list", "ae", "alpha", "ea", "e", "t", "all", "abc", "an", "ast", "ad", "n"], "b": ["s", "k", "ib", "p", "bs", "g", "c", "i", "y", "r", "number", "B", "ab", "x", "body", "sb", "cb", "l", "ob", "bb", "d", "u", "bf", "rb", "f", "lib", "br", "db", "bin", "binary", "gb", "v", "abs", "base", "e", "big", "nb", "lb", "n"]}}
{"code": "import random\\nimport time\\nimport copy\\n\\ndef down_score(d, c, last_d, score):\\n    sum = 0\\n    for i in range(26):\\n        sum = sum + c[i]*(d-last_d[i])\\n        \\n    return int(score - sum)\\n\\n\\ndef main():\\n    D = int(input())\\n\\n    c = list(map(int, input().split()))\\n\\n    s = [list(map(int, input().split())) for i in range(D)]\\n\\n    start = time.time()\\n    \\n    last_d = [0 for i in range(26)]\\n    ans = []    \\n    score1 = 0\\n    \\n    for i in range(D):\\n        max = 0\\n        idx = 0\\n        for j in range(26):\\n            if max < (s[i][j] + c[j] * (i-last_d[j])*(i-last_d[j]+1)/2) and c[j] != 0:\\n                max = s[i][j] + c[j] * (i-last_d[j])*(i-last_d[j]+1)/2\\n                idx = j\\n            elif max == (s[i][j] + c[j] * (i-last_d[j])*(i-last_d[j]+1)/2) and c[j] * (i-last_d[j])*(i-last_d[j]+1)/2 > c[idx]* (i-last_d[idx])*(i-last_d[idx]+1)/2 and c[j] != 0:\\n                idx = j\\n            \\n        last_d[idx] = i+1\\n        score1 += s[i][idx]\\n        score1 = down_score(i+1,c,last_d,score1)\\n        \\n        ans.append(idx)\\n        \\n    random.seed(10)\\n    while time.time() - start < 1.9:\\n        cp = ans.copy()\\n        last_d = [0 for i in range(26)]\\n        score2 = 0  \\n        \\n        idx1 = random.randint(0,25)\\n        idx2 = random.randint(0,25)\\n        if random.randint(0,1):\\n            d1 = random.randint(0,D-1) \\n            d2 = random.randint(0,D-1)\\n            if idx1 == idx2:\\n                continue\\n            if random.randint(0,1):\\n                ans[d1] = idx1\\n            else:\\n                ans[d1] = idx1\\n                ans[d2] = idx2\\n             \\n        #2\u5024\u5165\u308c\u66ff\u3048\\n        elif random.randint(0,1):           \\n            d1 = random.randint(0,D-15) \\n            d2 = random.randint(d1+1,d1+14)\\n            tmp1 = ans[d1]\\n            tmp2 = ans[d2]\\n            if random.randint(0,1):\\n                ans[d1] = tmp2\\n                ans[d2] = tmp1\\n            \\n        #3\u5024\u5165\u308c\u66ff\u3048          \\n        else:\\n            d1 = random.randint(0,D-15) \\n            d2 = random.randint(d1+1,d1+7)\\n            d3 = random.randint(d2+1,d2+7) \\n            tmp1 = ans[d1]\\n            tmp2 = ans[d2]\\n            tmp3 = ans[d3]\\n            if random.randint(0,1):\\n                ans[d1] = tmp2\\n                ans[d2] = tmp3\\n                ans[d3] = tmp1\\n            else:\\n                ans[d1] = tmp3\\n                ans[d2] = tmp1\\n                ans[d3] = tmp2\\n            \\n        for i in range(D):\\n            score2 += s[i][ans[i]]\\n            last_d[ans[i]] = i+1\\n            score2 = down_score(i+1, c, last_d, score2)\\n        \\n        if score1 > score2:\\n            ans = cp.copy()\\n        else:\\n            score1 = score2\\n    \\n    for i in range(D):\\n        print(ans[i]+1)  \\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "272", "substitutes": {"d": ["k", "dd", "p", "g", "dat", "h", "y", "o", "sd", "z", "da", "w", "l", "u", "f", "m", "du", "dc", "cd", "depth", "di", "data", "b", "v", "e", "t", "id", "ii", "ad", "n"], "c": ["k", "a", "sc", "p", "ic", "g", "DC", "y", "r", "ec", "nc", "case", "o", "chain", "C", "lc", "size", "z", "ch", "ce", "unc", "x", "cy", "cu", "con", "cm", "l", "u", "cn", "f", "ca", "rc", "cs", "m", "ac", "cat", "dc", "cd", "co", "ci", "ct", "b", "v", "cf", "e", "t", "count", "cc", "col", "mc", "pc", "xc", "cl", "config", "csv", "n"], "last_d": ["each9d", " last_c", "lastCdt", "LastJds", "lastLogc", "lastProd", "next_dy", "lastNc", "last_D", "last_data", "last_r", "each_did", "last128dx", "lastUd", "lastLd", "dist33d", "last2D", "last_dx", "last33dom", "past67dc", "last33db", "lastOr", "latest__ds", "last2d", "last36dn", "dist33n", "last_dc", "dist_d", "lastLdy", "firstNc", "past67d", "last_b", "last33d", "LastJdn", "lastUdy", "each9dn", "last67sd", "LastJc", "last67dn", "lastUdc", "last67data", "last__di", "first_c", "last67dy", "last9did", "last9dn", "firstNd", "latest_ds", "latest__d", "next_d", "past_dy", "lastupf", "last33dn", "past_d", "LastJd", "lastjad", "lastupds", "lastupdn", "worst_db", "lastNdt", "lastCc", "lastJds", "lastOd", " last_dx", "last_ds", "LastJf", "last__dn", " last_D", "past_dc", " last_f", "last36d", "lastOdb", "last9d", "last_f", "last_dy", "Last_c", "latest__dn", "last67f", "last128d", "last_dl", "lastNds", "latest__f", "last_c", "last_sd", "each9did", "Last_D", "last_di", "firstNdt", "latest_f", "each_dn", "lastJdt", "last_dn", "code_ds", "last2c", "last67d", "Last_d", "last36di", "lastLogd", "lastJdn", "dist_n", "dist_dn", "code36d", "lastjd", "each9b", "latest_d", "first_r", "lastProds", "first_d", "lastupd", "last__d", "lastLogdl", "last__f", "LastJD", "last__ds", "code_d", "next_dc", "lastjdb", "lastJc", "first_D", "last36ds", "past67f", "last_db", "lastCd", "next_f", "worst_ad", "Last_dn", "last128c", "dist33dn", "lastJf", "code36ds", "code_dn", "worst_dom", "next_sd", "lastLf", "each_b", "lastLogD", "lastCds", "last_dt", "lastProD", "last67n", "last33n", "dist_data", "lastjdom", "latest_dn", "last33data", "lastJd", "next_c", "past_f", "last9b", "last67dc", "lastLc", "past67dy", "Last_ds", "last_n", "last_did", "first_f", "lastUf", "last_ad", "first_db", "last2dl", "firstNds", "code36dn", "first_ds", "code_di", "last67c", "last128f", "lastProdn", "Last_f", " last_dl", "worst_d", "lastNd", "lastOf", "first_dt", "last_dom", "last33ad", "each_d", "dist33data", "code36di", "lastJD"], "score": ["orer", "error", "min", "sc", "Score", "ner", "chi", "est", "go", "err", "y", "gc", "num", "result", "sd", "weight", "mean", "size", "cost", "scale", "si", "winner", "cache", " Score", "clean", " scores", "gram", "f", "core", "rank", "fee", "scan", "scoring", "cer", "match", "average", "summary", "cr", "e", "count", " scorer", "loss", "grade", "um"], "sum": ["mass", "min", "sh", "value", "sc", "mem", "miss", "h", "gam", "num", "hash", "weight", "sign", "mean", "spread", "size", "scale", "cost", "sim", "u", "cal", "gram", "f", "vol", "rank", "us", "average", "match", "alpha", "summary", "loss", "count", "Sum", "all", "fill", "ul", "um", "total", "n"], "i": ["ui", "ei", "int", "qi", "phi", "ai", "y", "ix", "im", "si", "yi", "x", "l", "q", "f", "ir", "b", "li", "ik", "info", "gi", "ie", "mi", "ic", "ini", "api", "u", "pi", "ish", "ni", "ci", "ij", "v", "e", "multi", "id", "ip", "ti", "vi", "ami", "chi", "p", "oi", "iu", "z", "eni", "index", "mu", "ind", "it", "fi", "io", "iv", "m", "isi", "t", "anti", "n", "ji", "ih", "k", "a", "g", "o", "iq", "esi", "mini", "I", "uri", "ki", "cli", "xi", "di", "ri", "ii", "bi", "ori"], "D": ["F", "DA", "L", "DS", "V", "H", "Q", "X", "Y", "DC", "K", "DM", "DE", "DB", "O", "P", "T", "C", "B", "DD", "JD", "S", "DT", "A", "W", "I", "CD", "Do", "Z", "U", "R", "FD", "M", "N", "G", "DI"], "s": ["ss", "a", "strings", "south", "sc", "qs", "p", "ps", "states", "g", "sets", "cases", "y", "r", "h", "o", "z", "si", "S", "w", "tests", "l", "lines", "u", "services", "ses", "js", "f", "sk", "cs", "m", "ns", "ws", "rates", "os", "gs", "b", "v", "powers", "t", "ls", "e", "opens", "ds", "ies", "comments", "n"], "start": ["min", "cur", "date", "end", "last", "ie", "sh", "Start", "p", "init", "fin", "load", "y", "use", "first", "sp", "z", "time", "st", "ind", "w", "get", "it", "ish", "m", "stop", "set", "t", "started", "starting", "grade", "id", "source", "next", "offset"], "ans": ["ss", "a", "ents", "lan", "nas", "cas", "amps", "span", "ams", "p", "na", "ps", "ras", "xs", "ats", "ions", "sets", "AN", "ANS", "asts", "ks", "vs", "ann", "ani", "es", "can", "params", "args", "aned", "ches", "ons", "aus", "ids", "ens", "sk", "cs", "ants", "acs", "ns", "atches", "man", "scan", "os", "ls", "ips", "cons", "ds", "oss", "an", "ins"], "score1": ["grade2", " scoreone", "rank1", "rank2", "scoring3", "sumOne", "rankOne", "gradeone", "score3", "grade0", " scoreOne", "grade3", "scoringone", "rankone", "sum2", "sum1", "core2", " score0", "coreOne", "rank0", "scoreone", "scoring2", "sumone", "scoring1", "scoreOne", "core0", "grade1", "core1", "coreone", "gradeOne", "score0", " score3"], "max": ["min", "k", "end", "last", "auto", "code", "Max", "default", "est", "p", "h", "case", "num", "orig", "chain", "cum", "conf", "size", "div", "final", "scale", "cost", "az", "cache", "z", "cu", "res", "w", "con", "q", "ca", "MAX", "ax", "right", "cat", "m", "core", "comb", "rank", "co", "parent", "no", " Max", "key", "mod", "cr", "count", "step", "id", "cl", "parse", "range", "total"], "idx": ["idej", "idsz", "aidx", "aidz", "idj", "idl", " idl", "indl", "Idindex", "catz", "ridx", "ridz", "catX", "idsf", "Idbl", " idy", "Idx", " idindex", "ridy", "Idxes", "ridX", "idxes", "idindex", " idxes", "indz", "aidX", "idef", "idsx", "idX", "idy", "idc", "midindex", "Idl", "idex", "Idj", "midX", "midxc", "Idz", "catx", " idz", "idsc", "catxes", "indbl", "idf", "IdX", "indy", "itex", "itef", "itec", "midx", "idxc", "Idxc", " idj", "aidy", "idec", "idz", "Idy", " idxc", "idsj", " idX", "idbl", " idbl", "idsy", "indx", "itej"], "j": ["name", "ui", "false", "qi", "_", "y", "ix", "im", "x", "current", "adj", "l", "uj", "q", "js", "f", "b", "li", "er", "ie", "jo", "h", "jj", "jl", "je", "jet", "u", "jp", "note", "old", "br", "ij", "J", "v", "key", "e", "all", "last", "ja", "p", "dj", "r", "el", "z", "ch", "index", "ind", "it", "m", "bj", "ji", "k", "end", "g", "o", "I", "obj", "job", "oj", "aj", "kj", "ii", "n"], "cp": ["ss", "cycle", "cmp", "line", "cpu", "cas", "span", "eps", "ps", "case", "cum", "mp", "clean", "cb", "lines", "cop", "job", "cat", "pp", "core", "scan", "reads", "CP", "cr", "keep", "ops", "csv"], "score2": ["core4", " score4", "score3", "core1", "core2", "rank2", "rank3", "core3", "rank1", "rank4", " score3", "score4"], "idx1": [" idz1", " idz2", "idxc2", "idz2", "idf2", "idz1", "idf1", "idxc1"], "idx2": [" idx62", "idX62", " idX2", "idindex62", "idX1", "idf62", " idX1", "idf2", "idindex1", "idf1", "idx62", " idX62", "idX2", "idindex2"]}}
{"code": "a, b = [int(input()) for _ in range(2)]\\nc = [1, 2, 3]\\nc.remove(a)\\nc.remove(b)\\nprint(*c)", "target": "752", "substitutes": {"a": ["aa", "k", "s", "p", "i", "y", "ab", "art", "da", "x", "A", "w", "l", "u", "d", "f", "ca", "sa", "ac", "asa", "m", "area", "input", "ae", "alpha", "audio", "v", "e", "an", "ad", "n"], "b": ["aa", "be", "k", "ib", "fb", "bs", "i", "y", "wb", "mb", "B", "ba", "ab", "x", "sb", "cb", "ob", "rb", "bb", "d", "abb", "job", "f", "eb", "bd", "xb", "db", "binary", "v", "base", "e", "bc", "bas", "bi", "bis"], "_": ["s", "__", "non", "p", "ing", "___", "x", "l", "q", "f", "ip", "len", "t", "n"], "c": ["k", "cycle", "p", "g", "i", "ec", "nc", "oc", "C", "coll", "lc", "uc", "fc", "ce", "x", "cache", "cy", "cu", "cv", "cb", "cm", "l", "u", "d", "f", "cs", "ac", "m", "self", "dc", "co", "cd", "ci", "ct", "v", "cf", "e", "cr", "bc", "cc", "col", "xc", "n"]}}
{"code": "import sys\\nimport math\\nimport itertools as it\\ndef I():return int(sys.stdin.readline().replace(\"\\n\",\"\"))\\ndef I2():return map(int,sys.stdin.readline().replace(\"\\n\",\"\").split())\\ndef S():return str(sys.stdin.readline().replace(\"\\n\",\"\"))\\ndef L():return list(sys.stdin.readline().replace(\"\\n\",\"\"))\\ndef Intl():return [int(k) for k in sys.stdin.readline().replace(\"\\n\",\"\").split()]\\ndef Lx(k):return list(map(lambda x:int(x)*-k,sys.stdin.readline().replace(\"\\n\",\"\").split()))\\n\\nif __name__ == \"__main__\":\\n    h,w = I2()\\n    s = [S() for _ in range(h)]\\n    for i in range(1,h-1):\\n        for j in range(1,w-1):\\n            if(s[i][j] == \"#\" and s[i][j-1]!=\"#\" and s[i][j+1]!=\"#\" and s[i-1][j]!=\"#\" and s[i+1][j] != \"#\"):\\n                print(\"No\")\\n                exit()\\n    print(\"Yes\")", "target": "559", "substitutes": {"k": ["spec", "int", "kid", "ke", "p", "kh", "g", "c", "K", "r", "y", "o", "kk", "ks", "kn", "kl", "z", "x", "mk", "kw", "kin", "ka", " K", "ko", "ok", "u", "d", "q", "ki", "sk", "ky", "f", "m", " int", "tk", "key", "v", "b", "ck", "t", "e", "kr", "id", "ik", " sk", "n"], "h": ["rh", "hs", "a", "H", "p", "g", "c", "y", "r", "num", "o", "ht", "ph", "hr", "z", "x", "l", "u", "d", "max", "q", "f", "m", "hi", "b", "v", "t", "ha", "e", "hm", "n"], "w": ["wa", "sh", "wt", "win", "p", "g", "c", "width", "y", "o", "r", "wh", "ph", "weight", "z", "x", "W", "l", "u", "d", "max", "q", "f", "m", "sw", "ws", "wl", "wd", " W", "v", "b", "n"], "s": ["a", "strings", "ys", "qs", "groups", "ins", "ans", "p", "ps", "states", "g", "c", "sym", "sets", "o", "r", "y", "posts", "ks", "split", "z", "ows", "es", "als", "blocks", "events", "S", "tests", "sites", "l", "lines", "parts", "u", "services", "d", "ses", "f", "m", "ns", "os", "gs", "v", "b", "string", "ings", "t", "e", "ls", "ds", "comments", "n"], "_": ["__", "p", "m"], "i": ["gi", "ji", "ui", "vi", "ie", "ib", "int", "qi", "p", "ai", "c", "y", "ini", "im", "ix", "iu", "api", "z", "si", "eni", "x", "yi", "ind", "I", "ia", "l", "u", "pi", "d", "io", "f", "ir", "xi", "di", "ni", "ci", "b", "v", "e", "il", "iw", "id", "li", "ii", "ik", "n", "bi", "ip"], "j": ["ji", "sh", "ie", "ja", "qi", "p", "g", "c", "jo", "y", "jj", "r", "o", "ix", "jl", "z", "je", "ch", "index", "x", "ind", "I", "l", "u", "d", "q", "js", "f", "jp", "m", "jc", "br", "aj", "ij", "J", "v", "b", "e", "t", "fr", "id", "li", "ii", "n"]}}
{"code": "import math\\nA,B,C,X,Y = map(int,input().split())\\nans = A * X + B * Y\\nfor c in range(2 * 10 ** 5 + 1):\\n    a = math.ceil(X - c * 0.5)\\n    b = math.ceil(Y - c * 0.5)\\n    if a < 0:\\n        a = 0\\n    if b < 0:\\n        b = 0\\n    mny = a * A + b * B + c * C\\n    if mny < ans:\\n        ans = mny\\nprint(ans)", "target": "430", "substitutes": {"A": ["F", "AD", " AA", "L", "At", "V", "H", "Q", "IA", "LA", "AR", "EA", "K", "BA", "AM", "AH", "SA", "P", "AU", "AC", "D", "Ar", "As", "T", "BB", "AA", "S", "W", "I", "AB", "CA", "U", "AY", "AF", "N", "G", "Am", "HA", "Ac", "An"], "B": ["F", "E", "L", "V", "H", "Q", "CB", "BA", "O", "P", "T", "D", "SB", "ab", "BB", "BC", "BI", "TB", "W", "I", "BE", "Z", "OB", "WB", "U", "R", "GB", "M", "NB", "N", "G", "BF", "Bs"], "C": ["F", "E", "CE", "L", "Cs", "CI", "Cu", "H", "Q", "CU", "YC", "CB", "K", "O", "P", "T", "D", "AC", "BC", "S", "W", "CM", "CF", "I", "Z", "CA", "U", "R", "M", "CC", "N", "G"], "X": ["F", "Length", "E", "ID", "CE", "L", "V", "H", "Q", "XX", "Width", "K", "TH", "FF", "ZX", "P", "T", "D", "AC", "BB", "x", "PE", "W", "IX", "I", "TX", "Z", "CL", "XY", "U", "R", "M", "CC", "XL", "N", "Xi", "G", "Col", "CH"], "Y": ["F", "YY", "E", "L", "V", "H", "Q", "YC", "y", "O", "P", "T", "D", "Cy", "IP", "S", "cy", "W", "NY", "I", "Ch", "Z", "XY", "Py", "U", "GB", "J", "M", "N", "G", "Col", "CH"], "ans": ["s", "aid", "ents", "lan", "nas", "amps", "eps", "ams", "atan", "na", "gan", "Ann", "aning", "anas", "AN", "ANS", "anes", "ks", "mean", "ane", "ann", "ab", "ani", "anon", "annot", "ays", "ana", "can", "x", " means", "nan", "An", "ars", "S", "anus", "args", "aned", "chan", "bb", "ons", "aus", "ca", "sk", "cs", "leans", "ants", "ns", "scan", "no", "os", "ls", "cons", "an", "bay", "ad", "ins"], "c": ["cur", "k", "s", "p", " cy", "g", "i", "y", "h", "nc", " y", "cp", "oc", "lc", "ab", " f", " bc", "z", "ce", "unc", "x", "cy", "cu", "w", "cb", "con", "cm", "l", "u", "d", "f", "cs", "ac", "m", "ca", "dc", "cd", "ci", "ct", " cur", "v", "cf", "e", " co", "bc", "count", "cc", "col", " cc", "ad", " d", "n"], "a": ["aa", "va", "ma", "p", "ai", "ama", "i", "aw", "y", "ba", "ab", "au", "ana", "art", "pa", "x", "da", "ah", "af", "ar", "ia", "ak", "d", "aaa", "f", "sa", "asa", "ac", "ax", "area", "am", "aj", "ae", "oa", "alpha", "e", "ada", "an", "ad", "n"], "b": ["aa", "s", "be", "k", "ib", "p", "obb", "g", "pb", "i", "y", "o", "h", "r", "mb", "ba", "ab", "z", "BB", "x", "sb", "cb", "l", "rb", "d", "u", "ub", "bb", "abb", "bf", "f", "bd", "ca", "j", "ac", "eb", "v", "NB", "an", "e", "bc", "nb", "lb", "bi", "ad", "Bs", "n"], "mny": ["fne", "hmny", "mnn", "mn", "Mni", "Mny", "hmni", "mrne", " mgy", "cgy", " mne", "Mnn", "mne", " mni", "cny", "Mn", "cni", "mrgy", "hmn", "mni", "mrni", " mnn", "fny", "fgy", "cne", "mgy", "hmnn", "mrny", "fni", " mn"]}}
{"code": "while True:\\n    x = raw_input()\\n    if x == \"0\":\\n        break\\n    print(\"%d\" % (sum(map(int, x)), ))\\n", "target": "491", "substitutes": {"x": ["dx", "int", "X", "p", "tx", "exp", "xs", "c", "g", "i", "xx", "fx", "y", "h", "rx", "ix", "number", "num", "xa", "z", "xt", "ex", "index", "xxx", "xxxx", " xx", "w", "wx", "u", "d", "f", "m", "xi", "input", "data", "ct", "xe", "v", "xp", "b", "t", "id", "xc", "test", "n"]}}
{"code": "N = int(input())\\na = list(input())\\ncount = 1\\nfor i in range(N):\\n  if i>0:\\n    if a[i-1]==a[i]:\\n      pass\\n    elif a[i-1]!=a[i]:\\n      count+=1\\n      \\nprint(count)", "target": "717", "substitutes": {"N": ["F", "Length", "L", "NO", "V", "X", "Y", "NC", "Size", "NS", "NE", "NI", "K", "number", "Na", "O", "P", "T", "C", "B", "D", "Ne", "S", "A", "I", "No", "NT", "Ni", "Z", "Ns", "R", "M", " n", "NA", "Count", "n"], "a": ["s", "aa", "wa", "auto", "at", "va", "code", "ma", "p", "qa", "ai", "g", "c", "fa", "o", "la", "ba", "array", "ana", "index", "x", "da", "A", "w", "action", "args", "ata", "l", "u", "f", "sa", "ca", "ac", "ga", "m", "area", "aj", "am", "input", "ae", "data", "alpha", "list", "b", "ea", "e", "all", "an", "ad", "n"], "count": ["call", "int", "code", "p", "c", "number", "case", "num", "weight", "size", "counter", "index", "cache", "now", "ind", "start", "current", "nt", "catch", "f", "ac", "found", "old", "age", "list", "check", "length", "match", "type", "key", "b", "base", "all", "add", "id", "li", "test", "sum", "Count", "n"], "i": ["gi", "k", "ui", "int", "at", "chi", "qi", "p", "stat", "ai", "c", "h", "r", "y", "num", "o", "number", "ini", "iu", "ti", "z", "si", "index", "x", "ind", "start", "I", "l", "fi", "u", "d", "pi", "j", "f", "io", "xi", "di", "ri", "ni", "ip", "ci", "b", "v", "e", "info", "multi", "id", "li", "ii", "bi", "n"]}}
