{"code": "# C - Marks\\n\\n\\ndef marks(n, k, a):\\n    results = []\\n    for i in range(n - k):\\n        if a[i] < a[i + k]:\\n            results.append(\"Yes\")\\n        else:\\n            results.append(\"No\")\\n    return results\\n\\n\\nif __name__ == \"__main__\":\\n    n, k = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    results = marks(n, k, a)\\n    for i in results:\\n        print(i)\\n", "target": "320", "substitutes": {}}
{"code": "n, m = map(int, input().split())                    \\nroute_lists = [input().split() for i in range(m)]   \\nnew_lists = []                                      \\nfor i in route_lists:                               \\n  for j in range(2):                                \\n    new_lists.append(i[j])                          \\n                                                                                      \\nfor i in range(1, n+1, 1):                          \\n  print(new_lists.count(str(i)))", "target": "180", "substitutes": {"n": ["a", "N", "x", "nt", "ln", "d", "p", "ne", "cn", "g", "sn", "r", "w", "c", "ns", "o", "h", "num", "t", "nb", "no", "mn", "na", "v", "nc", "s", "nu", "nn", "q", "l", "np", "y"], "m": ["tm", "mi", "M", "mr", "dm", "d", "p", "mm", "mu", "r", "c", "ma", "man", "mas", "bm", "gm", "h", "ms", "b", "num", "mis", "t", "mc", "mn", "v", "sm", "s", "l", "k", "cm", "mt", "mk"], "route_lists": ["route_list", "route_lines", "route_sets", "new_lines", "routeablelists", "new_names", "route_maps", "route_names", "routexlists", "routexlines", "routexnames", " route_sets", "routeablenames", " route_maps", "routeablelines", " route_list"], "i": ["mi", "ki", "xi", "x", "ia", "uri", "ie", "ci", "gi", "ir", "p", "di", "ib", "ai", "I", "r", "c", "z", "yi", "qi", "ic", "o", "ip", "iri", "h", "f", "ri", "t", "io", "si", "li", "ii", "ji", "ei", "v", "int", "ti", "oi", "e", "list", "im", "it", "ini", "zi", "q", "l", "pi", "item", "id", "u", "y", "ik", "ij", "iu"], "new_lists": ["created___boxes", "new___lights", "new_cards", "new___boxes", "new_values", "local_naires", "created_lights", "created_boxes", "newlycards", "new___lists", "newptlists", "new_levels", "new_boxes", "created_values", "local_lists", "new___naires", "newmlvalues", "new_naires", " new_levels", "newlylevels", "local___naires", "newmlnaires", "newptlevels", "new___list", "local___list", "newlylists", " new_list", "newptlist", "created___lights", "new_list", "created___lists", "local___values", "newmllists", "local_values", "new___values", "newptcards", "created___values", " new_cards", "created_lists", "local_list", "new_lights", "newlylist", "newmllist", "local___lists"], "j": ["json", "uj", "ja", "aj", "d", "p", "jp", "kid", "job", "jc", "oj", "z", "c", "jj", "ju", "jl", "f", "b", "je", "jac", "J", "bj", "kj", "v", "ji", "obj", "xy", "jump", "q", "dj", "y", "k", "ij", "jam"]}}
{"code": "\\n\\ndef main():\\n\\n\\n   N,A,B = map(int,input().split())\\n   print(A*N) if A*N <= B else print(B)\\n\\n\\n\\nif __name__== \"__main__\":\\n    main() \\n\\n\\n\\n\\n", "target": "751", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NR", "NT", "NH", "H", "W", "V", "NUM", "S", "J", "Q", "G", "P", "Num", "NPR", "D", "NB", "Ni", "K", "F", "Z", "NG", "C"], "A": ["a", "GA", "M", "Ax", "Al", "An", "IA", "Alpha", "AH", "AU", "AT", "mA", "R", "ACC", "NA", "AL", "And", "AB", "AE", "H", "LA", "AA", "As", "V", "AR", "C", "AS", "Ah", "EA", "This", "HA", "P", "CA", "At", "JA", "AF", "AM", "SA", "AC", "F", "BA", "AN", "Array", "AP"], "B": ["Other", "M", "BI", "T", "RB", "BS", "Bs", "SB", "R", "I", "L", "IB", "AB", "H", "V", "b", "S", "BC", "BE", "J", "Q", "G", "WB", "P", "BB", "USB", "Ber", "BM", "Bern", "TB", "D", "NB", "EB", "Y", "BO", "DB", "F", "BA", "Z", "C"]}}
{"code": "n = int(input())\\ns = input()\\nrs = [0]*n\\ngs = [0]*n\\nbs = [0]*n\\nfor i in reversed(range(n)):\\n    if s[i] == 'R':\\n        rs[i] += 1\\n    elif s[i] == 'G':\\n        gs[i] += 1\\n    else:\\n        bs[i] += 1\\nfor i in reversed(range(n-1)):\\n    rs[i] += rs[i+1]\\n    gs[i] += gs[i+1]\\n    bs[i] += bs[i+1]\\nres = 0\\nfor i in range(n):\\n    for j in range(i+1,n-1):\\n        if s[i] == s[j]:\\n            continue\\n        if s[i]!='B' and s[j]!='B':\\n            res += bs[j+1]\\n            if j-i+j < n:\\n                if s[j-i+j] == 'B':\\n                    res -=1\\n        elif s[i]!='G' and s[j]!='G':\\n            res += gs[j+1]\\n            if j - i + j < n:\\n                if s[j-i+j] == 'G':\\n                    res -=1\\n        else:\\n            res += rs[j+1]\\n            if j - i + j < n:\\n                if s[j-i+j] == 'R':\\n                    res -= 1\\nprint(res)", "target": "294", "substitutes": {"n": ["a", "nr", "N", "x", "max", "net", "nt", "ni", "wn", "d", "p", "on", "en", "name", "names", "ne", "cn", "g", "dn", "r", "sn", "c", "m", "z", "ns", "o", "nl", "b", "num", "fn", "t", "nia", "nb", "no", "nor", "mn", "non", "na", "v", "an", "nc", "nm", "un", "nan", "new", "nu", "ln", "q", "l", "nn", "np", "pi", "ll", "ng", "k", "y", "network", "nd"], "s": ["a", "ats", "p", "ains", "r", "hs", "z", "ns", "ies", "ensions", "acts", "ss", "scripts", "ares", "ists", "ches", "sd", "se", "ubs", "bits", "rics", "sw", "services", "js", "asis", "g", "erences", "ers", "aces", "has", "ions", "sts", "rates", "cs", "stats", "ences", "obs", "keys", "ols", "mods", "d", "spec", "lines", "ses", "ties", "h", "parts", "ends", "tes", "eps", "xs", "ments", "es", "os", "ps", "sb", "ys", "ants", "ports", "fs", "ts", "ices", "tests", "ls", "b", "ations", "t", "S", "args", "conf", "steps", "ws", "ges", "sol", "itions", "ands", "y", "er", "ests", "qs", "ds"], "rs": ["arms", "ars", "rics", "mr", "ys", "ats", "js", "ues", "ows", "rc", "urs", "ros", "RS", "rx", "r", "hs", "rots", "fs", "ts", "rd", "ns", "Rs", "ins", "ras", "ers", "rys", "ls", "ires", "ths", "irs", "ris", "its", "dr", "rings", "ws", "ges", "rss", "xs", "rt", "vs", "ubs", "cs", "qs", "ds", "ps", "obs", "vers"], "gs": ["mes", "ys", "ogs", "mg", "ats", "js", "ains", "ues", "gers", "g", "outs", "uts", "rots", "hs", "sels", "us", "ts", "Gs", "igs", "ns", "gas", "mas", "ks", "gt", "gm", "ms", "bys", "GS", "ls", "gins", "ths", "ots", "gh", "gb", "args", "als", "its", "aps", "ws", "ges", "ists", "xs", "ugs", "gz", "ams", "ubs", "ads", "cs", "ags", "es", "groups", "qs", "ds", "ps", "obs", "olds", "bits"], "bs": ["bis", "mus", "ys", "ats", "js", "banks", "BS", "bos", "Bs", "outs", "uts", "fs", "rots", "sels", "us", "ts", "ns", "bi", "ks", "ms", "bytes", "bys", "ls", "b", "bas", "bc", "ss", "zb", "ris", "its", "ws", "xs", "bps", "bed", "nos", "bles", "aos", "bes", "vs", "ubs", "lbs", "cs", "os", "es", "ds", "ps", "obs", "bits"], "i": ["ki", "x", "p", "r", "ix", "ind", "ri", "exp", "v", "ti", "oi", "it", "ini", "\u0438", "phi", "id", "init", "ia", "uri", "g", "ib", "ai", "I", "iter", "pre", "m", "status", "iti", "ic", "o", "si", "iu", "key", "ei", "im", "zi", "l", "u", "ij", "chain", "ci", "gi", "ir", "ret", "ig", "ip", "io", "ii", "ui", "pi", "index", "ik", "mi", "xi", "ie", "ite", "ios", "cli", "name", "di", "iq", "bi", "ami", "yi", "info", "f", "b", "iv", "li", "ji", "ori", "int", "list", "iy", "ish", "ati", "item", "y", "iri", "hi"], "res": ["resolution", "conn", "max", "nt", "resh", "p", "ret", "reset", "rep", "hard", "re", "Res", "zero", "r", "chain", "pre", "ref", "vals", "rem", "expr", "full", "prefix", "RES", "ms", "val", "result", "num", "css", "rel", "vol", "pas", "ress", "cons", "resource", "ver", "conf", "pos", "out", "resp", "results", "exp", "des", "rss", "gr", "rest", "rez", "sol", "req", "clus", "pres", "yes", "mem", "rand", "respons", "vec", "reg", "comp", "pro", "ps", "sum"], "j": ["json", "x", "err", "p", "r", "z", "jj", "ju", "ix", "ind", "br", "je", "kj", "v", "exp", "obj", "it", "q", "k", "to", "js", "on", "g", "jp", "job", "pre", "jc", "m", "o", "jl", "fr", "jac", "si", "ion", "key", "dj", "u", "ij", "ja", "str", "aj", "oj", "og", "note", "h", "gh", "io", "dr", "jump", "jit", "th", "uj", "name", "di", "bi", "let", "f", "b", "sp", "t", "vol", "pt", "J", "bj", "li", "ji", "out", "adj", "tr", "y", "er"]}}
{"code": "n = int(input())\\nh = list(map(int,input().split()))\\nmaxi = 0\\ncount = 0\\nfor i in range(n):\\n  maxi = max(maxi,h[i])\\n  if maxi == h[i]:\\n    count += 1\\nprint(count)", "target": "26", "substitutes": {"n": ["N", "x", "net", "nt", "gn", "ln", "d", "p", "names", "norm", "ne", "cn", "sn", "r", "c", "m", "z", "ns", "nl", "num", "t", "nia", "nb", "mn", "na", "v", "nc", "nm", "nu", "nw", "nn", "q", "number", "np", "l", "j", "nd"], "h": ["history", "ht", "header", "sh", "th", "kh", "p", "g", "hz", "hal", "r", "hs", "c", "m", "ih", "rh", "hex", "H", "ah", "bh", "b", "uh", "hl", "hp", "hist", "oh", "ph", "hash", "ch", "it", "hw", "he", "here", "hd", "q", "hh", "pp", "hi", "hm"], "maxi": ["nextiu", "gtis", "axi", "mini", "Maxmi", "axe", "tope", "modi", "mine", "maxphi", "maximumi", "nextphi", " maxmi", "modI", "Maxu", "maxis", "axpi", "gti", " maxI", "maximumphi", "MaxI", "maximumis", " maxpi", " maxu", "Maxi", "gtiu", "minI", "maxint", "minint", "curu", "maxu", "curI", "maxiu", "maxpi", " maxe", "curmi", "maxI", "maximumiu", "maxe", "nextis", " maxint", "topI", "axI", "nexti", "topint", "curi", "gtphi", "maxmi", "modpi", "topi", "mode"], "count": ["history", "hold", "th", "max", "nt", "state", "always", "stat", "more", "child", "ct", "ount", "length", "c", "report", "current", "total", "const", "quiet", "cur", "result", "ctr", "num", "quit", "t", "multi", "nb", "force", "amount", "conf", "check", "add", "must", "list", "cache", "debug", "tf", "flag", "found", "group", "size", "counter", "number", "Count", "index", "temp", "last", "C", "sum"], "i": ["mi", "xi", "x", "uri", "ci", "gi", "g", "di", "ai", "I", "c", "m", "bi", "qi", "ic", "ix", "ip", "ind", "f", "b", "multi", "si", "li", "key", "ji", "v", "ori", "ii", "ti", "s", "im", "it", "zi", "ini", "ui", "\u0438", "q", "pi", "id", "j", "index", "k", "y", "ij"]}}
{"code": "n=int(input())\\nl=[]\\nfor i in range(n):\\n    p=int(input())\\n    l.append(p)\\nl=sorted(l)\\nmax_l=l[-1]\\nl.pop()\\nprint(max_l//2+sum(l))", "target": "259", "substitutes": {"n": ["nr", "N", "net", "nt", "gn", "ln", "d", "ne", "cn", "sn", "c", "m", "ns", "nl", "num", "t", "nia", "len", "nb", "no", "mn", "na", "v", "nc", "nan", "nu", "nw", "nn", "number", "np", "ng", "k", "j"], "l": ["lc", "kl", "ld", "ln", "lt", "left", "lb", "L", "long", "c", "ml", "m", "z", "dl", "el", "nl", "sl", "la", "log", "ls", "b", "hl", "t", "len", "lis", "rl", "lo", "lists", "fl", "li", "lp", "lam", "v", "list", "all", "al", "lv", "s", "lr", "ol", "lock", "pl", "le", "ll"], "i": ["a", "x", "um", "I", "iter", "__", "r", "c", "by", "ix", "ind", "f", "im", "it", "q", "id", "y", "k", "j"], "p": ["pkg", "perm", "port", "point", "mp", "pc", "g", "jp", "pre", "m", "pe", "par", "ip", "pa", "pr", "f", "sp", "part", "pt", "lp", "pos", "pid", "P", "int", "post", "cp", "ph", "per", "pl", "bp", "pi", "np", "op", "pp", "pro", "ps"], "max_l": ["max2nl", "maxeffkl", "real_L", "max___nl", "maxefffl", "realeffL", "max2l", "max___n", "maxcurrentkl", "max___p", "maxeffl", "max___l", "max2n", "max2p", "max_fl", "real_kl", "max_kl", "real_fl", "realefffl", "real_l", "realeffl", "max_p", "mad_p", "maxcurrentL", "mad_l", "mad___l", "maxcurrentfl", "mad___n", "mad___nl", "maxeffL", "realeffkl", "max_nl", "max_L", "maxcurrentl", "mad_n", "mad_nl", "max_n", "mad___p"]}}
{"code": "n,m = [int(i) for i in input().split()]\\n\\nA = [[int(i) for i in input().split()] for j in range(n)]\\nB = [int(input()) for i in range(m)]\\n\\nfor i in range(n):\\n    c = 0\\n    for j in range(m):\\n        c += A[i][j]*B[j]\\n    print(c)\\n", "target": "614", "substitutes": {"n": ["a", "nr", "N", "x", "nt", "ln", "d", "p", "ne", "r", "w", "sn", "ns", "o", "h", "num", "t", "nia", "nb", "mn", "na", "v", "an", "e", "nc", "nm", "s", "nu", "nn", "l", "q", "np", "pi", "y", "k", "nd"], "m": ["tm", "a", "mi", "M", "mr", "mod", "um", "dm", "d", "p", "mm", "mu", "g", "r", "ma", "em", "man", "mas", "bm", " M", "o", "gm", "h", "ms", "b", "mis", "t", "mc", "mn", "v", "e", "an", "nm", "sm", "im", "q", "l", "y", "cm", "mt"], "i": ["a", "mi", "ki", "xi", "x", "\u00ed", "ia", "ci", "gi", "ir", "d", "p", "di", "ib", "ai", "I", "ig", "bi", "yi", "iti", "ic", "ip", "b", "t", "ri", "io", "si", "ii", "li", "ji", "v", "e", "int", "ti", "oi", "ei", "im", "it", "zi", "ini", "\u0438", "q", "l", "pi", "ati", "il", "u", "id", "y", "k", "ij", "ik", "iu"], "A": ["a", "GA", "N", "Answer", "Ax", "Rap", "Al", "An", "Ar", "Alpha", "Abs", "Your", "X", "I", "Av", "R", "One", "AL", "AV", "AB", "App", "AE", "H", "AA", "As", "Add", "This", "HA", "P", "Ass", "Ant", "Ray", "CA", "At", "Open", "Acc", "D", "Java", "SA", "AC", "Array", "AP"], "j": ["x", "uj", "ja", "ie", "aj", "js", "p", "g", "di", "jp", "job", "r", "jc", "oj", "z", "jj", "bi", "ju", "o", "h", "ind", "jl", "f", "b", "je", "t", "J", "li", "bj", "ji", "v", "kj", "key", "obj", "im", "it", "q", "l", "pi", "dj", "y", "k", "ij"], "B": ["M", "N", "BI", "CB", "T", "RB", "VB", "BS", "Bs", "I", "L", "Two", "IB", "AB", "Be", "V", "C", "b", "S", "BC", "BE", "J", "GB", "G", "BR", "WB", "PB", "BB", "Bern", "TB", "D", "NB", "EB", "Y", "DB", "Bytes", "BA", "BY", "Blue"], "c": ["ec", "a", "ce", "lc", "con", "x", "cat", "gc", "cont", "Cr", "p", "cd", "ct", "rc", "complex", "tc", "fc", "cur", "cv", "count", "dc", "cum", "conf", "v", "cal", "cache", "cos", "crit", "cp", "cc", "com", "co", "cu", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"]}}
{"code": "X=int(input())\\nans=None\\n\\nif X>=30:\\n    ans=\"Yes\"\\nelse:\\n    ans=\"No\"\\n\\nprint(ans)", "target": "371", "substitutes": {"X": ["M", "N", "IX", "x", "T", "TX", "I", "R", "L", "MX", "UX", "OX", "AX", "ZX", "O", "V", "XP", "S", "DX", " x", "J", "Q", "G", "P", "A", "E", "XX", "D", "XT", "XXX", "Y", "K", "Z", "C"], "ans": ["arms", "ars", "ys", "ANS", "ants", "ats", "ean", "names", "name", "eds", "books", "aus", "ros", "lets", "us", "san", "ns", "ann", "rs", "leans", "utters", "ks", "ins", "offs", "ras", "said", "ons", "ms", "angs", "amps", "vers", "ents", "ens", "cons", "mn", "an", "posts", "anks", "aps", "terms", "s", "qual", "xs", "sv", "ams", "aos", "places", "yes", "vs", "caps", "ads", "cs", "arts", "es", "os", "lan", "ps", "olds"]}}
{"code": "a,b,c=list(map(int,input().split()))\\nflag=0\\nfor itr in range(1,100000):\\n    if (a*itr)%b==c: \\n        print('YES')\\n        flag=1\\n        break\\nif flag==0: print('NO')", "target": "358", "substitutes": {"a": ["n", "x", "ia", "to", "ae", "ab", "aff", "aj", "d", "era", "ach", "name", "ak", "r", "ma", "ga", "o", "admin", "aaa", "act", "ax", "f", "alpha", "da", "an", "e", "A", "al", "at", "af", "sa", "au", "aa", "l", "am", "ar", "area", "ba", "ac"], "b": ["bis", "n", "sb", "to", "ab", "d", "p", "db", "g", "ib", "i", "r", "z", "bi", "fb", "rb", "o", "h", "be", "ob", "br", "bc", "gb", "t", "nb", "B", "bb", "v", "e", "erb", "base", "cb", "l", "u", "y", "bs", "ba"], "c": ["ec", "ce", "lc", "n", "d", "p", "cd", "g", "ct", "r", "tc", "z", "fc", "h", "f", "bc", "t", "dc", "can", "e", "v", "cache", "cos", "cp", "s", "ch", "cc", "cb", "l", "u", "cs", "k", "cm", "cr", "cf", "ca", "C", "ac"], "flag": ["fd", "anch", "hold", "state", "ld", "ret", "cloud", "store", "kill", "used", "weight", "condition", "status", "bird", "FLAG", "window", "land", "lag", "nl", "bug", "ground", "log", "flags", "mask", "cmd", "level", "f", "sp", "tag", "bool", "count", "cond", "len", "no", "Flag", "force", "fl", "bit", "int", "lv", "debug", "lock", "l", "band", "enable", "id", "shell", "stay", "member", "sync", "field"], "itr": [" itsr", "ditsr", "itry", "itR", " itR", "itrl", "ditry", " itrin", "itcr", "Itrin", "itsr", "ustr", "ustsr", "Itcr", "ustrl", " itry", "ditr", " itrl", "ItR", "ditrl", "Itr", "sitr", "itrin", " itcr", "sitrin", "ustry", "sitcr", "sitR"]}}
{"code": "N = int(input())\\nL = list(map(int, input().split()))\\nL.sort()\\nans = sum([L[i] for i in range(N*2) if i % 2 == 0])\\nprint(ans)\\n", "target": "215", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "V", "TN", "NO", "S", "B", "J", "Q", "ND", "P", "Sn", "D", "NB", "MN", "Ni", "K", "Z", "C"], "L": ["LB", "M", "NL", "DL", "List", "All", "PL", "BL", "SL", "Log", "R", "I", "TL", "LA", "LU", "LD", "V", "S", "LT", "B", "J", "ML", "Li", "LI", "Long", "P", "LG", "Lu", "D", "Left", "l", "CL", "LL", "LE", "XL", "LM", "LS", "Body", "LP", "EL", "C"], "ans": ["ANS", "ants", "ats", "beans", "ana", "helps", "aus", "asks", "aned", " Ans", "ns", "ann", "ums", "mas", "rans", "anas", "leans", "ks", "vers", "ms", "amps", "ls", "ens", "cas", "uns", "ces", "can", "an", "iann", "anks", "anes", "ran", "nas", "aos", "ams", "arts", "os", "es", "lan", "AN"], "i": ["mi", "ki", "n", "xi", "x", "cli", "ci", "gi", "di", "ai", "I", "m", "bi", "qi", "ic", "ix", "ski", "ip", "f", "multi", "io", "si", "sim", "li", "ii", "ji", "ori", "v", "ti", "oi", "zi", "ui", "\u0438", "q", "l", "pi", "phi", "u", "id", "j", "y", "fi", "ij", "iri", "hi"]}}
{"code": "n, k = map(int, input().split())\\na = set()\\nfor i in range(k):\\n    d = int(input())\\n    a |= set(map(int, input().split()))\\nprint(len(set(range(1, n + 1)) - a))", "target": "252", "substitutes": {"n": ["N", "x", "net", "nt", "gn", "p", "ne", "cn", "sn", "w", "c", "m", "ns", "o", "nl", "h", "num", "t", "len", "nb", "no", "mn", "na", "v", "nc", "nu", "nn", "q", "l", "np", "j"], "k": ["ck", "km", "ki", "ek", "kn", "x", "kh", "kl", "p", "ak", "ke", "r", "m", "dk", "ks", "kw", "ko", "kb", "num", "kok", "kj", "ikk", "ku", "q", "wk", "kk", "j", "ka", "K", "ik", "sk", "mk", "unk"], "a": ["ia", "ae", "ac", "ab", "ta", "p", "xa", "c", "ma", "m", "set", "ata", "ga", "o", "ea", "h", "aaa", "pa", "la", "ada", "b", "t", "alpha", "da", "out", "na", "an", "e", "v", "all", "A", "al", "sa", "au", "aa", "l", "am", "u", "y", "data", "area", "ack", "ca"], "i": [" ii", "x", "me", "ci", "gi", "um", "p", " j", "di", "I", "iter", "c", "ind", "f", "li", "e", "im", "it", "q", "id", "y", "j"], "d": ["p", "g", "dh", "r", "w", "c", "m", "z", "o", "h", "dt", "f", "b", "t", "da", "de", "e", "v", "ad", "dx", "D", "q", "l", "dd", "id", "j", "y", "ds"]}}
{"code": "a = list(map(int, input().split()))\\nif a[0] % 3 == 0 or a[1] % 3 == 0 or sum(a[:2]) % 3 == 0:\\n    print(\"Possible\")\\nelse:\\n    print(\"Impossible\")\\n", "target": "635", "substitutes": {"a": ["n", "x", "to", "ae", "sta", "ac", "ab", "aff", "d", "p", "this", "i", "r", "w", "c", "ma", "z", "ata", "eas", "ga", "aux", "h", "aaa", "val", "f", "b", "abs", "t", "alpha", "parts", "da", "amount", "out", "na", "an", "att", "all", "A", "at", "sa", "ao", "app", "au", "oa", "aos", "div", "aa", "l", "am", "index", "data", "array", "area", "ba", "ca"]}}
{"code": "x = input()\\ns=0\\nans=0\\nfor i in x:\\n  if i == \"S\":\\n    s+=1\\n  else:\\n    if s==0:\\n      ans +=1\\n    else:\\n      s-=1\\nprint(ans+s)", "target": "713", "substitutes": {"x": ["n", "xi", "ex", "to", "xe", "p", "xes", "g", "xc", "X", "xa", "rx", "w", "c", "z", "m", "xt", "ctx", "xml", "ix", "o", "h", "tx", "f", "xd", "t", "v", "e", "exp", " xx", "fx", "xy", "xs", "mx", "xb", "xx", "y", "xp", "xf"], "s": ["a", "n", "ys", "ants", "ats", "d", "p", "ains", "g", "w", "hs", "c", "ts", "z", "m", "ns", "ies", "rs", "ses", "ins", "ties", "ons", "ms", "h", "ls", "b", "t", "S", "ss", "si", "ends", "tes", "v", "an", "gs", "e", "has", "ws", "sa", "xs", "ances", "ments", "sts", "vs", "sis", "cs", "arts", "es", "os", "ds", "ps"], "ans": ["ars", "ANS", "ants", "ats", "ians", "eds", "outs", "acs", "aus", "ros", "us", "ts", "ns", "ies", "ann", "rs", "mas", "anas", "ks", "leans", "ins", "ons", "ms", "angs", "amps", "ls", "ents", "ens", "ss", "an", "gs", "anks", "aces", "aps", "xs", "ams", "aos", "ads", "arts", "os", "es", "ds", "bs"], "i": [" ii", "\u00ed", "ki", "mi", "xi", "a", " Ai", "ni", "ci", "name", "di", " mi", "I", " si", "bi", " di", "o", " psi", " bi", "ri", "si", "iu", "ion", "ii", "li", "ei", "ti", "oi", "ini", "zi", "\u0438", " ti", "phi", "pi", "ati", "id", "ij", "iri", "hi", " Xi", "Xi"]}}
{"code": "N = int(input())\\n\\nres = 0\\nif N % 2 == 0:\\n    div = N // 2\\n    for i in range(1,30):\\n        res += div // 5**i\\n\\nprint(res)\\n", "target": "211", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "T", "GN", "Ns", "R", "I", "L", "NA", "NM", "Res", "NR", "NT", "RES", "NH", "H", "Length", "V", "NO", "Z", "NUM", "S", "B", "J", "Q", "G", "P", "Num", "A", "D", "NB", "Len", "Ni", "K", "F", "AN", "TN", "FN", "NG", "C"], "res": ["resolution", "max", "nt", "str", "resh", "p", "ret", "reset", "rep", "re", "Res", "r", "ref", "rem", "prefix", "prime", "RES", "ms", "pr", "result", "num", "rel", "pas", "cond", "vol", "ress", "cons", "resource", "dr", "results", "resp", "out", "pos", "red", "obj", "crit", "gr", "rest", "sol", "req", "pres", "stock", "progress", "rand", "reg", "pro", "ps", "sum"], "div": ["con", "n", "max", "str", "mod", "DIV", "comm", "sub", "ul", "mult", "sup", "Div", "pre", "scale", "inv", "dev", "dec", "min", "dom", "step", "shr", "num", "form", "iv", "dig", "exp", "final", "obj", "multipl", "gr", "division", "tr", "ch", "prov", "coll", "dim", "pro", "IV", "sum"], "i": ["\u00ed", "mi", "n", "x", "ia", "ite", "ci", "gi", "cli", "di", "ai", "I", "iter", "m", "bi", "prime", "ic", "ix", "t", "si", "ii", "li", "int", "ti", "im", "it", "ini", "zi", "size", "q", "l", "pi", "j", "k", "ij", "iu"]}}
{"code": "# first line > /dev/null\\ninput()\\nitems = sorted([int(i) for i in input().split(' ')])\\nprint(items[0], items[-1], sum(items))", "target": "61", "substitutes": {}}
{"code": "a,b,c=map(int,input().split())\\ndef f(n):\\n  if(n==2000):\\n    return(c);\\n  return(a*(f(n-1))-b)\\nfor i in range (2001,2011):\\n  print(f(i))", "target": "106", "substitutes": {"a": ["x", "ae", "ab", "d", "p", "g", "ai", "r", "w", "ma", "m", "o", "h", "f", "t", "alpha", "an", "e", "v", "A", "al", "at", "sa", "af", "au", "aa", "l", "ar", "j", "ba", "ca", "ac"], "b": ["bis", "x", "bf", "ab", "d", "p", "g", "ib", "r", "m", "z", "bi", "fb", "rb", "h", "f", "bc", "gb", "t", "B", "bb", "v", "e", "s", "eb", "cb", "l", "ub", "y", "bs", "ba"], "c": ["ce", "lc", "ab", "d", "p", "cd", "g", "ct", "cy", "r", "m", "z", "fc", "h", "f", "bc", "t", "can", "e", "v", "cc", "co", "cb", "l", "u", "cs", "y", "cr", "cf", "ca", "C", "ac"], "n": ["nr", "N", "net", "nt", "d", "p", "ne", "cn", "g", "sn", "r", "w", "m", "ns", "o", "h", "f", "num", "fn", "t", "len", "nb", "mn", "na", "v", "nc", "nm", "nu", "nn", "l", "pi", "np", "ll", "j"], "i": ["mi", "xi", "x", "ci", "gi", "d", " j", "di", "g", "ai", "I", "m", "bi", "ic", "ind", "f", "ri", "si", "ii", "li", "ji", "v", "int", "ti", "oi", "s", "zi", "ini", "q", "pi", "id", "j", "k", "index", "ij", "iu"]}}
{"code": "n = int(input())\\na = [int(i) for i in input().split()]\\nprint(min(a), max(a), sum(a))\\n\\n", "target": "61", "substitutes": {"n": ["N", "nt", "d", "p", "cn", "sn", "c", "m", "z", "ns", "o", "nl", "h", "f", "b", "num", "t", "nb", "mn", "na", "v", "nc", "nm", "nu", "nn", "l", "q", "j", "k"], "a": ["ia", "sta", "ae", "ab", "d", "p", "g", "va", "xa", "zero", "w", "c", "ma", "m", "ata", "eas", "ga", "o", "aux", "ea", "la", "aaa", "abs", "b", "t", "alpha", "da", "na", "an", "exp", "all", "A", "at", "sa", "s", "now", "ao", "au", "ed", "oa", "aa", "l", "am", "u", "y", "index", "data", "array", "ba", "ca"], "i": ["mi", "ki", "xi", "\u00ed", "x", "uri", "p", "di", "ai", "I", "iter", "m", "bi", "qi", "ip", "b", "ri", "si", "iu", "ii", "li", "ori", "v", "int", "ti", "oi", "zi", "ini", "ui", "q", "l", "pi", "u", "id", "j", "ij", "iri", "hi"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\nB = [a - i for i, a in enumerate(A, 1)]\\nsorted_B = sorted(B)\\nb = sorted_B[N // 2]\\nans = 0\\nfor i, a in enumerate(A, 1):\\n    ans += abs(a - (b + i))\\nprint(ans)\\n", "target": "463", "substitutes": {"N": ["n", "M", "NS", "T", "Ne", "GN", "NI", "Ns", "I", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "V", "No", "Z", "S", "J", "Q", "Num", "P", "E", "Sn", "D", "NB", "Ni", "K", "TN", "C"], "A": ["GA", "M", "T", "All", "An", "IA", "AU", "AT", "X", "I", "NA", "L", "AV", "AB", "AE", "RA", "H", "AA", "LA", "As", "V", "AR", "AS", "S", "EA", "G", "This", "AP", "P", "Input", "CA", "JA", "D", "AM", "Java", "SA", "U", "AC", "ACT", "The", "Array", "C"], "B": ["But", "M", "BI", "CB", "T", "RB", "VB", "BS", "BL", "Bs", "SB", "I", "L", "IB", "AB", "V", "S", "BC", "BE", "GB", "WB", "BR", "BB", "Bern", "TB", "D", "NB", "EB", "BO", "DB", "BA", "BY", "C"], "a": ["x", "ae", "ac", "ab", "ta", "p", "name", "g", "va", "ai", "xa", "c", "ma", "z", "m", "bi", "ga", "o", "ea", "pa", "la", "act", "f", "t", "art", "da", "wa", "na", "an", "e", "att", "all", "al", "at", "sa", "aka", "af", "s", "au", "aa", "l", "am", "ar", "u", "j", "y", "index", "data", "ka", "area", "ba", "ao"], "i": ["mi", "ki", "n", "xi", "x", "ia", "ci", "gi", "d", "p", "g", "di", "ai", "I", "r", "c", "m", "z", "bi", "yi", "ic", "o", "h", "ip", "iri", "f", "t", "si", "ii", "li", "ei", "e", "v", "ti", "iy", "im", "it", "zi", "ini", "q", "l", "pi", "phi", "j", "y", "asi", "ij", "index", "iu", "hi"], "sorted_B": ["sorted_N", "sorted_b", "sorter_N", "sorter_A", "sorter_S", "sorter_b", "sorter_B", "sorted_A", "sorted_S"], "b": ["bis", "n", "sb", "ab", "d", "p", "db", "beta", "ib", "r", "c", "m", "bi", "rb", "by", "o", "be", "br", "t", "gb", "nb", "bb", "v", "e", "s", "eb", "base", "cb", "l", "u", "j", "y", "bound", "bs", "ba"], "ans": ["ars", "ANS", "ants", "ats", "ians", " means", "acs", "aus", "ros", "us", "aned", " Ans", "ns", "vals", "ann", "rans", "rs", "man", "anas", "ks", "offs", "ras", "ons", "ms", "amps", "ls", "ents", "ens", "cas", "uns", "an", "posts", "iann", "aps", "anes", "oss", "terms", "s", "nan", "ran", "nas", "aos", "vs", "ads", "cs", "arts", "os", "es", "stats", "lan"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\\nfrom itertools import accumulate, permutations, combinations, product\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\n\\nA, B, C, K = MAP()\\n\\nprint((A-B)*(-1)**(K%2))\\n", "target": "669", "substitutes": {"n": ["nr", "N", "x", "nt", "d", "p", "g", "i", "r", "sn", "c", "m", "z", "ns", "o", "f", "b", "num", "t", "nb", "na", "v", "nc", "nu", "nn", "l", "q", "np", "u", "k", "j", "y"], "_": ["local", "__", "ate", "ix", "val", "of", "len", "an", "all", "un", "___", "line"], "INF": ["PINEF", "INN", "INEF", "INFF", " INFF", " INEF", "inFF", "PINF", "inEF", "inN", "PINN", "inF", " INN", "PINFF"], "mod": ["max", "MOD", " Mod", "mult", "Mod", "fun", "scale", "inv", "m", "round", "prime", "dec", "min", "step", "log", "grow", "fac", "dist", "add", " MOD", "tr", "base", "tmp", "var", "j", "cm", " pow", "sum"], "A": ["a", "GA", "N", "T", "Ax", "An", "AH", "AU", "AT", "R", "ACC", "mA", " AA", "ABC", "AB", "AE", "H", "AA", "LA", "As", "V", "AI", "AR", "AS", "S", "EA", "G", "P", "HA", "CA", "At", "D", "AF", "AM", "Y", "SA", "U", "AC", "BA", "Array"], "B": ["LB", "M", "BI", "N", "CB", "T", "MB", "RB", "BS", "Bs", "SB", "R", "I", "AB", "BER", "V", "BT", "b", "Bar", "BC", "S", "J", "BR", "G", "P", "BB", "E", "TB", "D", "Y", "Bi", "DB", "BA", "Z"], "C": ["M", "N", "CB", "T", "CM", "R", "X", "CE", "c", "CS", "YC", "CP", "V", "CT", "CD", "BC", "EC", "G", "DC", "P", "CR", "E", "D", "CC", "Y", "Z"], "K": ["M", "N", "T", "MOD", "KR", "MK", "X", "R", "I", "KK", "H", "W", "CP", "TH", "KS", "V", "PK", "KC", "S", "BC", "J", "Q", "G", "P", "HK", "CC", "Y", "k", "F", "KI", "Z", "KE", "KA"]}}
{"code": "n,m = map( int,input().split() )\\na = [ list(map(int,input().split())) for _ in range(n)]\\n\\na.sort()\\n\\nc = 0\\nfor i in range(n):\\n  x = min(m,a[i][1])\\n  c += x * a[i][0]\\n  m -= x\\n  if m == 0 :\\n    break\\n\\nprint(c)", "target": "692", "substitutes": {"n": ["nr", "N", "nt", "d", "p", "ne", "g", "sn", "r", "ns", "o", "h", "b", "num", "t", "len", "nb", "no", "mn", "na", "v", "nc", "nm", "s", "nu", "nn", "l", "q", "np", "pi", "j", "k"], "m": ["tm", "mi", "mr", "M", "dm", "d", "p", "mm", "mu", "g", "r", "ma", "z", "man", "min", "bm", "o", "gm", "h", "ms", "f", "b", "num", "t", "mc", "mn", "v", "sm", "vm", "im", "co", "l", "u", "j", "y", "k", "cm", "mt"], "a": ["ia", "sta", "ae", "ac", "ab", "ta", "p", "en", "w", "ma", "ata", "eas", "ga", "aux", "ea", "la", "aaa", "done", "go", "f", "b", "t", "parts", "da", "apa", "na", "an", "att", "all", "A", "at", "sa", "s", "ao", "app", "au", "ed", "aos", "oa", "aa", "am", "j", "array", "area", "ba", "ca"], "_": [" id", " val", " ind", " y", " the", "name", " j", " k", "I", " name", "ix", " row", " l", " __", " each", " mult", " index", " p", " un", " z"], "c": ["ctrl", "ce", "lc", "con", "ci", "gc", "d", "p", "pc", "cn", "ct", "tc", "fc", "cur", "cv", "f", "b", "t", "count", "mc", "close", "cum", "conf", "sc", "v", "cal", "cache", "cos", "cp", "cc", "com", "co", "toc", "cb", "cu", "u", "cs", "k", "y", "cm", "cr", "cf", "ca", "C", "ac"], "i": ["mi", "xi", "uri", "me", "gi", "p", "di", "I", "bi", "info", "ic", "ix", "ip", "ind", "f", "t", "ri", "io", "si", "li", "ii", "ji", "ori", "ti", "im", "it", "zi", "ui", "ini", "\u0438", "q", "l", "pi", "phi", "id", "j", "y", "k", "index", "ij", "iu", "init"], "x": ["wx", "xi", "ex", "ci", "xe", "p", "ux", "xc", "xa", "X", "rx", "w", "r", "ox", "z", "xt", "ix", "h", "tx", "ax", "f", "xd", "v", "fx", "cox", "xy", "xs", "mx", "xb", "dx", "xx", "l", "y", "px", "xp", "xf"]}}
{"code": "# input\\nn = int(input())\\na = [0 for i in range(n)]\\nb = [int(i) for i in input().split()]\\n\\n# main\\na[0] = b[0]\\nfor i in range(1, n-1):\\n  a[i] = min(b[i-1], b[i])\\na[n-1] = b[n-2]\\n\\n# output\\nprint(sum(a))\\n", "target": "768", "substitutes": {}}
{"code": "d,n = map(int,input().split())\\ncase = 100**d\\nif n < 100:\\n    print(case*n)\\nelse:\\n    print(101*case)", "target": "781", "substitutes": {"d": ["loc", "x", "p", "spread", "cd", "day", "dn", "i", "dh", "r", "c", "m", "z", "dom", "mind", "h", "f", "b", "days", "t", "dat", "pd", "v", "s", "dx", "D", "do", "dim", "q", "l", "dd", "sd", "did", "du", "y", "ds", "nd"], "n": ["nr", "N", "x", "nt", "ln", "p", "ne", "cn", "g", "dn", "i", "nat", "sn", "long", "c", "m", "ns", "o", "nl", "f", "b", "num", "fn", "t", "len", "nb", "no", "mn", "non", "v", "nc", "nm", "s", "nan", "nu", "nn", "l", "number", "np", "j", "nd"], "case": ["ce", "cmp", "x", "pair", "su", "space", "p", "Case", "ase", "name", "ne", "test", "code", "i", "length", "c", "m", "condition", "cho", "prefix", "make", "change", "power", "num", "bc", "count", "cond", "block", "force", "conf", "v", "switch", "cp", "ch", "dx", "D", "do", "cases", "then", "l", "lic", "dd", "du", "q", "number", "se", "np", "ASE", "use"]}}
{"code": "a, b, c, d = map(int, input().split())\\nif abs(a-c) <= d: ans = 'Yes'\\nelif abs(a-b) <= d and abs(b-c) <= d: ans = 'Yes'\\nelse: ans = 'No'\\nprint(ans)", "target": "378", "substitutes": {"a": ["x", "ia", "ae", "ab", "aj", "ta", "p", "ach", "ai", "ak", "i", "r", "\u00e1", "ma", "ga", "o", "ea", "aaa", "act", "ax", "t", "alpha", "da", "an", "e", "v", "A", "al", "at", "sa", "af", "app", "au", "oa", "aa", "l", "am", "ar", "j", "ba", "ca", "ac"], "b": ["n", "sb", "ab", "p", "db", "g", "ib", "i", "r", "m", "z", "bi", "fb", "rb", "o", "h", "be", "f", "abs", "bc", "t", "nb", "B", "bb", "v", "e", "s", "cb", "l", "u", "j", "y", "bs", "ba", "back"], "c": ["ec", "ce", "con", "n", "ci", "cd", "g", "ct", "i", "r", "tc", "z", "fc", "h", "be", "cv", "f", "bc", "t", "dc", "e", "v", "cp", "ch", "s", "cc", "cb", "q", "l", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["n", "p", "db", "dir", "g", "di", "i", "dh", "r", "w", "m", "z", "dev", "h", "dt", "done", "f", "t", "dc", "da", "dr", "pd", "v", "e", "de", "des", "s", "end", "dp", "D", "do", "q", "l", "dd", "sd", "dra", "j", "ds"], "ans": ["arms", "ars", "ys", "ANS", "ants", "ats", "ean", "eds", "acs", "outs", "books", "helps", "aus", "asks", "us", "san", "ns", "ann", "rans", "rs", "eas", "utters", "anas", "offs", "ins", "ks", "ras", "said", "ons", "vers", "amps", "angs", "rets", "act", "leans", "ens", "ots", "cons", "mn", "uns", "an", "jas", "anks", "posts", "oss", "aps", "pres", "ams", "aos", "ads", "arts", "ds", "olds"]}}
{"code": "high, width, y, x = map(int, input().split())\\n\\ndef nCr(n, r):\\n    return ((((fact[n]*finv[n-r])%mod)*finv[r])%mod)\\n\\nmod = 10**9 + 7\\ninv = mod - 2\\nmaxn = high + width - 2\\nfact = [0] * (maxn+1)\\nfinv = [0] * (maxn+1)\\nfact[0] = fact[1] = 1\\nfinv[0] = finv[1] = 1\\n\\n# \u968e\u4e57\u3092\u6c42\u3081\u308b\\nfor i in range(2, maxn+1):\\n    fact[i] = (fact[i-1] * i) % mod\\n\\n# \u968e\u4e57\u306e\u9006\u5143\u3092\u6c42\u3081\u308b\\nfor i in range(2, maxn+1):\\n    finv[i] = pow(fact[i], inv, mod)\\n\\nroute = 0\\nfor i in range(1, high-y+1):\\n        route += (nCr(x+i-2, i-1) * nCr(width+high-x-1-i, high-i)) % mod\\n        route = route % mod\\nprint(int(route))", "target": "567", "substitutes": {"high": ["history", "max", "mid", " High", "broad", "med", "long", "build", "well", "prom", "full", "higher", "low", "http", "H", "h", "igh", "hy", "level", "hl", "hist", "hop", "hub", "pop", "height", "up", "highest", "pper", "strong", "good", "High", "Hi", "big", "hyp", "hi"], "width": ["body", "max", "path", "wn", "method", "med", "left", "wy", "span", "w", "wt", "length", "weight", "radius", "z", "window", "format", "shape", "min", "sl", "h", "Width", "wl", "wid", "len", "win", "wa", "depth", "lon", "idth", "hop", "height", "size", "orth", "wide", "data"], "y": ["sy", "ys", "p", "i", "m", "z", "my", "ny", "vy", "o", "col", "h", "yr", "b", "dy", "t", "yl", "yn", "height", "iy", "xy", "yt", "Y", "yy", "l"], "x": ["xi", "ex", "p", "g", "left", "X", "i", "rx", "w", "z", "m", "ix", "o", "h", "ax", "f", "t", "v", "xy", "xs", "dx", "q", "l", "u", "px"], "n": ["a", "nr", "N", "nt", "d", "p", "on", "ne", "g", "cn", "dn", "i", "sn", "c", "m", "ns", "o", "h", "ren", "f", "b", "num", "fn", "t", "nb", "nor", "na", "v", "yn", "nm", "nu", "nw", "nn", "l", "ll", "np", "j", "rn"], "r": ["nr", "sr", "mr", "ro", "d", "p", "R", "rc", "i", "re", "w", "c", "radius", "m", "rs", "rb", "o", "h", "ren", "vr", "rar", "f", "b", "right", "ri", "t", "rel", "v", "e", "s", "rt", "lr", "q", "l", "ar", "k", "j", "er", "rn", "range", "rd"], "mod": ["rot", "max", "perm", "MOD", "mods", "lib", "d", "sign", " Mod", "dir", "sub", "mult", "Mod", "fun", "scale", "m", "set", "module", "od", "dev", "prime", "min", "ms", "log", "val", "term", "ind", "time", "fac", "cond", "len", "form", "dig", "tab", "ver", "bit", "add", "poly", "rank", "crit", "orig", "com", "div", "base", "mag", "var", "id", "reg", "lex", "pro", "mode"], "inv": [" ii", " recip", " inverse", "lim", "mult", " mul", "fun", " magnitude", "scale", "prime", " fu", "power", "eff", "log", "mix", "dy", " rev", "sq", "Inv", " mag", " exp", "mag", "ho", "var", " power", "init", " pow", "sum"], "maxn": ["MAXd", "superN", " maxmn", "MAXN", "maxd", "axN", " maxp", "supern", "Maxp", "supermn", "axp", "Maxn", "MAXn", "axn", "Maxd", "maxp", " maxN", "MAXp", "axmn", "maxN", "maxmn", "MaxN", " maxd"], "fact": ["fd", "loc", "con", "rust", "stat", "mult", "fol", "ct", "fun", "ox", "ref", "rat", "fc", "fab", "floor", "pert", "cor", "power", "eff", "fed", "term", "ind", "act", "feat", "f", "fn", "fac", "cond", "form", "sat", "fig", "wid", "Fact", "bit", "fl", "bn", "conf", "key", "fan", "fx", "acter", "flag", "facts", "factor", "est", "fam", "cast", "base", "var", "fg", "bin", "ft", "ac"], "finv": ["finver", "fdf", "finvs", "finr", "freversion", "fnv", "frvs", "denver", "frev", " finj", "denvs", "frv", "fdvp", "fnf", "resf", "fnversion", "resvert", "denv", "finvp", "denf", "finf", "finvert", "fv", "fr", "synf", "denj", "fnvs", "fnj", "synvert", "finversion", "conf", "ff", "fdv", "finvc", "conr", "denvp", "synr", "finj", " finvp", "frej", "fnver", "fdvc", "conv", "denve", "fdvert", "frver", "fref", "resv", "convs", "fdj", "finve", "synvc", "resvc", "fnve", "synv", "fvs", " finf", "frve", "synvs", " finversion"]}}
{"code": "s=input()\\nss=\"CODEFESTIVAL2016\"\\ncount=0\\nfor i in range(16):\\n    if s[i]!=ss[i]:\\n        count+=1\\n\\nprint(count)", "target": "237", "substitutes": {"s": ["a", "n", "ys", "ats", "js", "p", "ains", "g", "ows", "w", "r", "us", "c", "ts", "ns", "ies", "rs", "ses", "ess", "ins", "h", "ms", "ers", "ls", "abs", "b", "t", "S", "si", "its", "v", "gs", "all", "sa", "xs", "ands", "cs", "y", "os", "stats", "ps"], "ss": ["sy", "x", "ys", "uss", "SS", "test", "hs", "ts", "ns", "status", "rs", "ses", "ess", "ms", "ls", " SS", "ese", "css", "hess", "si", "\u00df", "ws", "rss", "tt", "sv", "vs", "xx", "sis", "sd", "cs", "tis", "se", "es", "ass", "ds", "ps", "bs", "sc"], "count": ["next", "find", "n", "th", "comment", "nt", "state", "stat", "p", "cd", "test", "code", "ct", "ount", "length", "c", "report", "current", "z", "process", "total", "success", "second", "result", "ind", "num", "t", "quit", "nb", "thread", "amount", "check", "v", "list", "ch", "tf", "flag", "found", "print", "counter", "l", "number", "Count", "j", "index", "temp", "C", "sum"], "i": ["\u00ed", "a", "mi", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "c", "m", "bi", "qi", "yi", "ic", "ix", "ip", "ind", "f", "b", "si", "li", "ii", "v", "int", "ti", "ch", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "id", "j", "y", "k", "ij", "index", "iu"]}}
{"code": "n, x, y = map(int, input().split())\\n\\nans = [0 for i in range(n-1)]\\n\\nfor i in range(1, n):\\n    for j in range(i+1, n+1):\\n        t = min(abs(j-i), abs(x-i)+1+abs(y-j))\\n        ans[t-1] += 1\\n\\nfor a in ans:\\n    print(a)\\n", "target": "22", "substitutes": {"n": ["nr", "N", "nt", "ln", "p", "d", "ne", "cn", "g", "sn", "w", "c", "m", "z", "ns", "o", "f", "b", "num", "nb", "no", "mn", "na", "v", "nc", "s", "nu", "nn", "l", "q", "np", "network", "k"], "x": ["wx", "xi", "ex", "xe", "p", "xc", "X", "xa", "rx", "w", "ox", "z", "m", "xt", "xml", "ix", "tx", "ax", "b", "zx", "v", "xy", "s", "xs", "dx", "q", "xx", "l", "yx", "px", "xf"], "y": ["sy", "ys", "ym", "cy", "r", "oy", "yo", "z", "ly", "m", "ies", "ny", "yi", "vy", "o", "py", "ye", "yr", "hy", "b", "yl", "uy", "v", "ey", "gy", "xy", "s", "yt", "Y", "yy", "ay", "ry"], "ans": ["ars", "tan", "ANS", "ians", "ats", "ants", " means", "ai", "xa", "aus", "aned", "mos", " Ans", "aves", "ates", "ns", "ann", "rans", "rs", "ums", "anas", "leans", "ks", "ins", "ons", "ms", "angs", "amps", "ls", "pan", "ents", "ens", "akens", "uns", "ces", " sans", "an", "posts", "anes", "oss", "ays", "s", "nan", "xs", "ran", "ams", "nas", "aos", "vs", "os", "AN", "ds"], "i": ["mi", "ki", "xi", "ia", "ie", "ci", "gi", "ir", "p", "di", "ai", "I", "m", "bi", "yi", "iti", "ic", "o", "ix", "ip", "ind", "ri", "io", "si", "li", "ii", "ji", "ei", "v", "e", "ti", "im", "it", "zi", "ini", "ui", "phi", "pi", "l", "id", "index", "ij", "iu", "hi"], "j": ["xi", "uj", "ja", "ie", "js", "aj", "p", "d", "g", "jp", "job", "r", "oj", "jc", "z", "m", "jj", "bi", "o", "ix", "h", "jl", "f", "b", "si", "J", "bj", "li", "ji", "kj", "v", "e", "ii", "obj", "xy", "it", "jump", "q", "l", "dj", "u", "ij"], "t": ["ty", "T", "ta", "p", "qt", "tw", "typ", "td", "tc", "wt", "tip", "ts", "m", "z", "type", "te", "o", "tp", "elt", "dt", "pt", "ot", "tu", "att", "e", "tn", "ti", "tt", "tf", "rt", " T", "kat", "q", "l", "kt", "k"], "a": ["aq", " ya", "ia", "sta", "ae", "ja", "aj", "ta", "p", "ana", "ach", "xa", "ai", " A", "ma", "z", "ita", "ann", "ga", "o", "aaa", " ra", "pan", "ax", "\u00e4", " ca", "alpha", " pa", "na", "an", " ja", "A", "ap", "sa", "s", "sha", "oa", "au", "aa", "am", "ka", "ca", " na", "ao"]}}
{"code": "n,m=map(int, input().split())\\nalist=[list(map(int, input().split())) for i in range(m)]\\nans=-1\\nif n==1:\\n  for i in range(9,-1,-1):\\n    x=True\\n    stri=str(i)\\n    for j in range(m):\\n      if stri[alist[j][0]-1]!=str(alist[j][1]):\\n        x=False\\n    if x:\\n      ans=i\\nelse:\\n  for i in range(10**n-1,10**(n-1)-1,-1):\\n    x=True\\n    stri=str(i)\\n    for j in range(m):\\n      if stri[alist[j][0]-1]!=str(alist[j][1]):\\n        x=False\\n    if x:\\n      ans=i\\nprint(ans)", "target": "285", "substitutes": {"n": ["N", "nt", "ni", "gn", "ln", "d", "p", "names", "norm", "ne", "cn", "g", "name", "sn", "r", "c", "z", "ns", "nl", "h", "f", "num", "t", "nia", "nb", "nor", "mn", "na", "v", "an", "nc", "nm", "s", "nan", "nu", "nn", "l", "q", "np", "pi", "network", "k"], "m": ["tm", "mi", "M", "mr", "dm", "d", "p", "mm", "g", "r", "c", "ma", "man", "bm", "o", "gm", "ms", "f", "b", "t", "mc", "mn", "v", "e", "an", "nm", "s", "l", "am", "y", "k", "md", "cm", "mt"], "alist": ["insula", "bis", "wx", "held", "ward", "lia", "um", "alis", "ais", "ul", "displayText", "fol", "aida", "dial", "xa", "ai", "aval", "aus", "atten", "wed", "mond", "pai", "edited", "mate", "cil", "ist", "alia", "wat", "addons", "la", "elist", "xd", "sel", "xp", "wid", "yout", "lis", "lists", "lie", "must", "hist", "list", "wikipedia", "al", "anse", "oard", "at", "ists", "arb", "lvl", "along", "listed", "ui", "clus", "kat", "l", "lat", "mat", "tml", "stack", "stal", "joined", "dit", "past", "avi"], "i": [" ii", "mi", "ki", "xi", "a", "Int", "ia", "ie", "ci", "gi", "p", "di", "ai", "I", "It", "Info", "ami", "yi", "iti", "ic", "ix", "o", "ip", "ind", "ri", "io", "si", "Li", "li", "ii", "ji", "ei", "v", "int", "ti", "Pi", "e", "Index", "list", "im", "it", "s", "none", "nan", "zi", "ini", "l", "pi", "ati", "phi", "u", "id", "y", "Ni", "ik", "ij", "Im", "iu", "hi", "Xi"], "ans": ["ars", "xi", "ANS", "ants", "ats", "ians", "ano", "eds", "ows", "xa", "aus", "ros", "us", "sn", " Ans", "ns", "ann", "rans", "rs", "mas", "anas", "ks", "offs", "ins", "vers", "ons", "ms", "angs", "amps", "pan", "sex", "ids", "ens", "cas", "ris", "si", "uns", "an", "posts", "iann", "anes", "s", "nan", "xs", "aos", "xx", "vs", "ads", "cs", "os", "es", "olds"], "x": ["wx", "con", "xi", "ex", "rex", "any", "xe", "p", "xes", "ux", "xc", "X", "rx", "w", "c", "ox", "z", "wait", "xt", "bo", "ic", "ix", "cross", "h", "mix", "tx", "sex", "ax", "xd", "time", "t", "exclusive", "force", "check", "na", "an", "v", " xx", "fx", "xy", "xs", "mx", "co", "dx", "inx", "xx", "yx", "lex", "y", "px", "xp", "sync", "xf"], "stri": ["udi", "xi", "sticks", "atri", "sta", "su", "str", "ste", " bru", "sn", " gri", "uti", "vil", "strike", "riz", " Stri", "stick", "ri", "osi", "oso", "strate", "ris", "si", "ress", "lie", "cin", "stra", "sie", "nz", "st", "sty", "nexus", "zi", "strip", "cu", "nex", "then", "dis", "uart", "sd", "asi", "rax", "rip", " strip", " sus", "reci"], "j": ["next", "json", "uj", "ja", "err", "str", "aj", "js", "p", "on", "g", "jp", "iaz", "r", "oj", "jc", "z", "jj", "og", "note", "res", "ah", "pr", "jl", "fr", "je", "b", "br", "rel", "jac", "f", "pt", "J", "ion", "bj", "key", "ji", "kj", "jas", "v", "obj", "adj", "at", "it", "jump", "jo", "q", "dj", "y", "er", "jit", "ij", "k", "ik"]}}
{"code": "mod = 10**9+7\\nH, W = map(int, input().split())\\nG = [input() for i in range(H)]\\ndp = [[0]*W for i in range(H)]\\ndp[0][0] = 1\\nfor i in range(H):\\n    for j in range(W):\\n        if G[i][j] == '.':\\n            if i - 1 >= 0:\\n                if j - 1 >= 0:\\n                    dp[i][j] = (dp[i-1][j] + dp[i][j-1])%mod\\n                else:\\n                    dp[i][j] = dp[i-1][j]\\n            elif j - 1 >= 0:\\n                dp[i][j] = dp[i][j-1]\\nprint(dp[H-1][W-1])", "target": "273", "substitutes": {"mod": ["max", "ex", "perm", "MOD", "modified", "sign", "mods", " Mod", "mp", "med", "mult", "Mod", "start", "pre", "cod", "m", "set", "od", "mut", "OD", "ident", "prime", "min", "step", "deg", "ms", "log", "grow", "dig", "sim", "ver", "add", "debug", "com", "ran", "div", "base", "mag", "good", "id", "reg", "lex", "comp", "temp", "sum"], "H": ["M", "N", "Eh", "CH", "T", "HD", "HS", "HL", "R", "I", "X", "L", "HO", "HI", "GH", " HH", "HTML", "NH", "h", "DH", "V", "TH", "HH", "S", "B", "J", "Q", "P", "HA", "A", "Head", "OH", "D", "HC", "MH", "Y", " h", "HB", "High", "U", "K", "F", "HT", "He", "C"], "W": ["WT", "WC", "M", "N", "T", "We", "WR", "MW", "WI", "CW", "WP", "R", "X", "L", "Wi", "w", "WW", "WH", "VW", "BW", "WA", "V", "Width", "S", "Wh", "SW", "Q", "B", "J", "P", "WD", "D", "WM", "Y", "FW", "DW", "EW", "K", "F", "HT", "WS"], "G": ["Graph", "GA", "M", "N", "VG", "Gu", "GN", "CG", "g", "R", "I", "Gr", "AG", "GH", "Group", "TG", "GE", "gp", "GR", "GV", "GG", "GS", "V", "S", "GF", "B", "J", "GB", "P", "gs", "IG", "A", "Gi", "E", "GP", "LG", "GI", "D", "FG", "Y", "GT", "F", "Ge", "Pg", "C"], "i": ["a", "mi", "ki", "xi", "x", "ia", "ni", "ci", "gi", "ir", "p", "di", "ai", "I", "aci", "iter", "bi", "info", "iti", "ic", "ix", "o", "h", "ip", "iri", "io", "si", "li", "ii", "ji", "ei", "ori", "int", "ti", "oi", "v", "at", "im", "it", "zi", "ini", "ui", "\u0438", "phi", "pi", "ati", "item", "id", "index", "y", "ij", "ik", "iu", "hi"], "dp": ["pkg", "dro", "dos", "pm", "dm", "d", "p", "db", "vp", "di", "dial", "jp", "td", "dh", "dl", "pb", "gp", "bsp", "wd", "tp", "pr", "dt", "df", "sp", "dep", "dc", "DP", "wp", "lp", "pd", "dr", "disc", "htt", "delay", "cp", "deb", "eps", "bps", "csv", "eb", "dq", "pipe", "dd", "du", "np", "pat", "pp", "ds", "ps", "adr"], "j": ["next", "json", "n", "x", "uj", "kh", "ja", "str", "aj", "js", "p", "on", "g", "di", "jp", "w", "jc", "oj", "z", "m", "jj", "bi", "el", "ju", "ix", "o", "h", "pr", "jl", "fr", "b", "sp", "br", "t", "io", "si", "pt", "J", "ion", "bj", "li", "kj", "ji", "v", "ii", "obj", "adj", "xy", "s", "it", "ch", "jump", "q", "dj", "y", "k", "index", "ij"]}}
{"code": "import sys\\nimport math\\nfrom collections import defaultdict\\n\\nsys.setrecursionlimit(10**7)\\ndef input():\\n    return sys.stdin.readline()[:-1]\\n\\nmod = 10**9 + 7\\n\\ndef I(): return int(input())\\ndef II(): return map(int, input().split())\\ndef III(): return list(map(int, input().split()))\\ndef Line(N,num):\\n    if N<=0:\\n        for _ in range(num): return []\\n    elif num==1:\\n        return [I() for _ in range(N)]\\n    else:\\n        read_all = [tuple(map(int, input().split())) for _ in range(N)]\\n        return map(list,zip(*read_all))\\n\\n#################\\n\\nfrom operator import itemgetter\\nfrom bisect import bisect_left\\n\\nN,Q = II()\\na = []\\nfor _ in range(N):\\n    s,t,x = II()\\n    a.append((x, s-x-0.5, t-x-0.5))\\na.sort(key=itemgetter(0))\\nD = Line(Q,1)\\n\\nans = [-1]*(Q+1)\\nright = [0]*Q\\nfor a0 in a:\\n    l = bisect_left(D,a0[1])\\n    r = bisect_left(D,a0[2])\\n    while l<r:\\n        while ans[l]!=-1:\\n            l = right[l]\\n            if l==N:\\n                break\\n        if l>=r:\\n            break\\n        ans[l] = a0[0]\\n        right[l] = r\\n        l += 1\\n\\nfor i in range(Q):\\n    print(ans[i])", "target": "338", "substitutes": {"mod": ["MOD", " scale", " Mod", "sub", "mult", "Mod", "fun", " lim", "scale", " base", "m", "pad", "floor", "round", "dec", "min", "mask", "fac", "add", " m", " mag", "orig", " mult", "base", "dim", "var", " power", " pow"], "N": ["SN", "n", "M", "NS", "T", "GN", "Ns", "R", "I", "X", "L", "NA", "NM", "Number", "NN", "NP", "NR", "CN", "NT", "NH", "H", "O", "V", "TN", "NO", "NUM", "S", "B", "Num", "P", "D", "nu", "NB", "MN", "Ni", "K", "F", "Z", "C"], "num": ["con", "n", "M", "max", "x", "um", "nom", "p", "g", "mult", "i", "iter", "Number", "zero", "uni", "m", "umi", "total", "f", "multi", "NUM", "t", "no", "nb", "mn", "na", "Num", "cal", "nc", "final", "nm", "un", "it", "new", "nu", "nn", "number", "mon", "np", "index", "draw", "sum"], "_": ["x", "local", " j", "__", "L", "ml", "z", "ix", "py", "val", "place", "____", "pt", "all", "E", " __", "D", "___", "k", " z"], "read_all": ["Read_All", "Read_ALL", "readableALL", "read_both", "Read_both", "readableboth", "readableAll", "readableall", "read2all", "read_All", "read2ALL", "Read_each", "read_ALL", "read_only", "Read_all", "read2All", "Read_only", "read2both", "read_each"]}}
{"code": "n = int(input())\\nA=[int(i)-1 for i in input().split()]\\nres = 0\\nfor i in range(n):\\n    if A[i]==i:\\n        continue\\n    else:\\n        res+=1\\nif(res < 3):print(\"YES\")\\nelse:print(\"NO\")\\n", "target": "267", "substitutes": {"n": ["a", "N", "net", "nt", "gn", "ln", "d", "p", "names", "ne", "cn", "sn", "r", "c", "m", "ns", "o", "nl", "num", "t", "nia", "nb", "no", "nor", "mn", "na", "v", "nc", "nu", "nw", "q", "number", "l", "np", "nn", "network", "j", "k"], "A": ["a", "GA", "M", "N", "T", "Ax", "An", "Ar", "Alpha", "AH", "AT", "R", "I", "X", "L", "mA", "Av", "AV", "That", "AB", "AA", "As", "V", "Given", "S", "B", "G", "P", "HA", "CA", "At", "JA", "D", "AM", "Y", "Alice", "SA", "AC", "Array", "C"], "i": ["\u00ed", "mi", "ki", "xi", "x", "ia", "a", "ie", "ci", "gi", "p", "di", "ai", "I", "r", "c", "z", "m", "bi", "qi", "ic", "o", "ix", "ip", "ind", "f", "b", "ri", "t", "si", "iu", "ii", "li", "key", "v", "ei", "e", "ti", "oi", "int", "iy", "im", "ini", "zi", "q", "l", "phi", "pi", "u", "id", "item", "j", "y", "k", "index", "ij", "ik", "iri"], "res": ["resolution", "nr", "nt", "resh", "mod", "p", "ret", "reset", "med", "re", "Res", "r", "ref", "rem", "prime", "RES", "success", "result", "mer", "num", "rel", "fac", "cond", "ress", "cons", "sim", "ver", "conf", "out", "resp", "exp", "red", "gr", "rest", "rez", "sol", "req", "pres", "clus", "q", "progress", "mem", "rand", "reg", "pers", "pro", "ps", "init", "chain"]}}
{"code": "mod = 1000000007\\neps = 10**-9\\n\\n\\ndef main():\\n    import sys\\n    from collections import deque\\n    input = sys.stdin.buffer.readline\\n\\n    N = int(input())\\n    adj = [[] for _ in range(N+1)]\\n    for _ in range(N-1):\\n        a, b, c = map(int, input().split())\\n        adj[a].append((b, c))\\n        adj[b].append((a, c))\\n    Q, root = map(int, input().split())\\n\\n    que = deque()\\n    que.append(root)\\n    seen = [-1] * (N+1)\\n    seen[root] = 0\\n    par = [0] * (N+1)\\n    child = [[] for _ in range(N+1)]\\n    seq = []\\n    while que:\\n        v = que.popleft()\\n        seq.append(v)\\n        for u, c in adj[v]:\\n            if seen[u] == -1:\\n                seen[u] = seen[v] + c\\n                par[u] = v\\n                child[v].append(u)\\n                que.append(u)\\n    seq.reverse()\\n\\n    for _ in range(Q):\\n        x, y = map(int, input().split())\\n        print(seen[x] + seen[y])\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "360", "substitutes": {"mod": ["rot", "MOD", "mods", "sign", "mult", "Mod", "fun", "m", "pad", "module", "prime", "round", "step", "ms", "log", "fix", "dig", "da", "ver", "pos", "add", "exp", "debug", "base", "var", "rand", "id", "big", "init"], "eps": [" times", "ep", " Ep", " fix", " omega", "fun", "PS", "pe", "ns", " seeds", "prime", " df", "step", " jumps", "mb", " sig", " delta", " iterations", " steps", "steps", "times", " exp", "dq", " EPS", " tries", "pp", "ps", " ep", " rounds"], "input": ["history", "next", "open", "load", "pattern", "str", "path", "select", "context", "util", "init", "get", "human", "shift", "image", "inc", "raw", "tip", "ref", "focus", "read", "prefix", "xml", "format", "sequence", "output", "cmd", "act", "fn", "config", "hidden", "form", "unknown", "feed", "out", "Input", "int", "sq", "stream", "interface", "it", "exec", "print", "dq", " Input", "q", "proc", "command", "sample", "np", "reader", "lat", "data", "text", "source"], "N": ["SN", "CNN", "Name", "n", "M", "NS", "New", "NC", "GN", "NI", "Ns", "R", "I", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "Node", "O", "V", "NO", "NUM", "S", "MAN", "NAME", "NE", "B", "ND", "Num", "A", "Network", "Sn", "D", "NOW", "NB", "Y", "MN", "Ni", "K", "TN", "Now", "C"], "adj": ["aq", "next", "n", "conn", "cmp", "perm", "nt", "prev", "gn", "aff", "aj", "depend", "en", "p", "mp", "cycle", "ang", "iq", "arr", "order", "jp", "rev", "acc", "apt", "pre", "inv", "map", "prefix", "alg", "ind", "ax", "adapt", "jac", "num", "config", "hess", "cond", "adv", "ord", "add", "att", "ad", "cache", "eq", "obj", "app", "atts", "div", "np", "dj", "agree", "j", "grad", "attr", "ij", "dict", "pred"], "_": [" the", "ing", "ct", "__", "ml", "ly", "ix", "py", "let", "val", "place", "Se", "____", "pt", "all", " __", "\u00e7", "___"], "a": ["n", "ia", "ae", "ac", "ab", "aff", "aj", "p", "xa", "ak", "i", "r", "w", "ma", "el", "ga", "ea", "admin", "aaa", "la", "pa", "abs", "alpha", "an", "e", "A", "at", "sa", "app", "au", "oa", "aa", "l", "am", "ar", "j", "area", "ba", "ca"], "b": ["bis", "bu", "n", "sb", "ab", "d", "p", "db", "g", "ib", "i", "r", "z", "bi", "fb", "bo", "rb", "o", "h", "be", "br", "f", "bc", "nb", "B", "bb", "e", "eb", "cb", "aa", "l", "j", "k", "bs", "ba", "back"], "c": ["ec", "ce", "lc", "con", "n", "gc", "d", "p", "unc", "cd", "g", "xc", "ct", "rc", "i", "cy", "r", "tc", "w", "z", "m", "fc", "o", "col", "h", "f", "bc", "t", "dc", "vc", "mc", "uc", "conf", "can", "e", "cin", "cos", "cp", "ch", "s", "com", "cc", "abc", "cb", "coll", "l", "cu", "cs", "k", "cm", "cr", "cf", "ca", "C", "ac"], "Q": ["Que", "M", "IX", "T", "MQ", "Queue", "X", "R", "I", "L", "W", "H", "Query", "V", "UE", "S", "J", "G", "P", "Num", "E", "D", "NB", "q", "Y", "Count", "Qu", "Len", "IQ", "K", "F", "Z", "QU"], "root": ["stop", "n", "th", "nt", "ro", "path", "p", "name", "head", "g", "i", "r", "zero", "start", "seed", "m", "sys", "w", "us", "z", "prefix", "prime", "parent", "res", "tree", "h", "vr", "right", "main", "bc", "ot", "oot", "ver", "depth", "key", "av", "null", "row", "s", "node", "first", "end", "rt", "roots", "base", "Root", "dot", "id", "j", "k", "chain"], "que": ["vel", "ck", "Que", "con", "Buff", "cle", "queue", "ae", "ro", "xe", "en", "comm", "cycle", "ched", "qu", "ue", "Queue", "aque", "iq", "aus", "we", "ext", "pe", "buffer", "ctx", "ques", "bo", "vre", "la", "rub", "cur", "ob", "inse", "buf", "equ", "animate", "je", "pri", "quit", "create", "sel", "eu", "sequ", "sq", "list", "loe", "qq", "eq", "qa", "compl", "com", "req", "ve", "desc", "dq", "cb", "q", "buff", "np", "quote", "lex", "fif", "qs", "stack", "sem", "quer"], "seen": ["reverse", "awaited", "me", "gu", "shadow", "stat", "ld", " unseen", "en", "seeing", "name", "given", "printed", "iq", "saw", "existing", "used", "zero", "seed", "recorded", "ordered", "set", "kept", "reen", "sed", "old", " observed", "since", "specified", "shape", "study", "graph", " Seen", "linked", "tree", "exist", "mean", "done", "sex", "sen", "meet", "tested", "num", "si", "written", "sequ", "parse", "served", "sa", "eared", "node", "average", "found", "pe", "new", "see", "ed", "established", "made", "pse", "mem", "met", "se", "index", "sent", "shown", "marked", "reported", "said"], "par": ["arg", "cmp", "perm", "prev", "cat", "err", "syn", "bar", "p", "mp", "rep", "arr", "jp", "ma", "pe", "Par", "param", "col", "rec", "pr", "pri", "rel", "ps", "parse", "row", "per", "proc", "ar", "var", "se", "op", "j", "pp", "pro", "comp", "prop"], "child": ["next", "comment", "label", "nt", "pattern", "Child", "name", "cycle", "job", "cell", "children", "parent", "col", "case", "ew", "count", "close", "block", "key", "list", "row", "model", "ch", "node", "found", "group", "new", "other", "desc", "base", "q", "item", "id", "member", "last"], "seq": ["next", "pkg", "queue", "str", "cycle", "iq", "jp", "ext", "txt", "sci", "comb", "pe", "sec", "sync", "cur", "zip", "buf", "equ", "sel", "sim", "sequ", "resp", "exp", "ence", "sq", "qq", "eq", "row", "qa", "msg", "rez", "gen", "req", "desc", "q", "pse", "pipe", "vec", "lex", "j", "ij", "sem", "sequence", "obs"], "v": ["qv", "n", "vd", "vv", "p", "vi", "vo", "tv", "vp", "va", "rev", "g", "i", "value", "w", "us", "uv", "r", "inv", "m", "z", "vis", "ev", "vy", "o", "h", "val", "V", "vr", "f", "vc", "t", "vol", "vu", "iv", "ver", "av", "nv", "lv", "vm", "s", "sv", "conv", "ve", "q", "vs", "l", "ov", "j", "vt"], "u": ["ut", "bu", "lu", "uj", "su", "um", "mu", "ue", "ul", "i", "uid", "uni", "us", "uv", "ju", "hu", "o", "pu", "uc", "ud", "tu", "eu", "ug", "ru", "un", "up", "fu", "ou", "ur", "ui", "uf", "nu", "au", "cu", "q", "uu", "U", "iu"], "x": ["wx", "xi", "ex", "xe", "p", "ux", "xc", "xa", "X", "i", "rx", "w", "r", "ox", "z", "xt", "xml", "ix", "h", "tx", "ax", "xd", "e", "fx", "www", " xx", "xy", "xs", "mx", "abc", "dx", "q", "l", "xx", "px", "xf"], "y": ["sy", "n", "ty", "ys", "yd", "yer", "i", "cy", "yo", "z", "ly", "ies", "ny", "vy", "o", "py", "ye", "yr", "sky", "hy", "yl", "ot", "uy", "yn", "ey", "gy", "iy", "xy", "ry", "fy", "yt", "yy", "Y", "j", "ya", "ay", "ym"]}}
{"code": "import sys\\nimport math\\nimport itertools\\nimport collections\\nimport heapq\\nimport re\\nimport numpy as np\\n\\nrr = lambda: sys.stdin.readline().rstrip()\\nrs = lambda: sys.stdin.readline().split()\\nri = lambda: int(sys.stdin.readline())\\nrm = lambda: map(int, sys.stdin.readline().split())\\nrl = lambda: list(map(int, sys.stdin.readline().split()))\\ninf = float('inf')\\nmod = 10**9 + 7\\n\\na, b, c, d = rm()\\nprint(max(a*b, c*d))\\n\\n\\n\\n\\n\\n\\n\\n", "target": "754", "substitutes": {"rr": ["rid", " hr", "err", "rg", "vd", "ln", "ld", " err", "rc", "iter", "r", "res", "pr", "ls", "fr", "dr", " RR", " dd", "rf", "gr", "rt", "lr", "req", "dd", "fg", "rn", "cr", "nd", "rd"], "rs": ["sr", "mr", "ro", "rc", "rx", "ros", "r", "rb", "ins", "res", "ras", "ms", "rys", "ls", "irs", "ris", "dr", "ws", "xs", "rt", "cs", "rows", "ds", "ps", "bs", "rd"], "ri": ["rid", "mi", "stri", "rio", "ro", "ci", "ra", "ir", "di", "ai", "rc", "i", "rx", "bi", "io", "si", "ris", "rit", "dr", "li", "rin", "ti", "ru", "im", "ini", "hi", "ry"], "rm": ["mr", "sr", "ro", "err", "mp", "re", "rx", "r", "adjust", "RM", "m", "rem", "imm", "wr", "rb", "res", "ras", "rub", "remove", "fn", "rol", "dr", "ru", "nm", "drm", "pop", "sm", "im", "mx", "rt", "lr", "wm", "dim", "tmp", "mem", "rn", "sync", "rd"], "rl": ["mr", "sr", "lf", "tl", "ro", "ln", "lb", "rc", "rx", "dl", "rb", "rw", "nl", "sl", "la", "ls", "hl", "lp", "fl", "ru", "rt", "lr", "ll", "l", "rn", "lin", "rd"], "inf": ["lim", "Inf", "i", "inc", "ipl", "inv", "info", "fff", "log", "imal", "ind", "f", "conf", "exp", "int", "star", "eq", "red", "nan", "abc", "pi", "bin", "pp", "init", "frac", "rad"], "mod": ["MOD", " Mod", "mult", "Mod", "fun", "inv", "od", "floor", "prime", "round", "min", "mix", "log", "grow", "fac", "conf", "add", "cal", "red", "debug", "div", "base", "rand", "reg", "big", "mode", "frac", "sum"], "a": ["aq", "ae", "ac", "ab", "aj", "acs", "ai", "i", "r", "ma", "z", "ga", "ea", "la", "aaa", "ax", "t", "da", "v", "an", "e", "A", "al", "at", "sa", "oa", "aa", "l", "am", "ar", "u", "y", "ba", "ca", "ao"], "b": ["n", "x", "ab", "p", "db", "g", "i", "r", "m", "bd", "bi", "wb", "fb", "rb", "bo", "abb", "f", "bc", "t", "gb", "B", "bb", "v", "e", "s", "eb", "cb", "l", "u", "y", "bs", "ba"], "c": ["lc", "cd", "g", "cn", "ct", "r", "tc", "m", "z", "fc", "col", "cur", "f", "bc", "dc", "uc", "e", "v", "cp", "ch", "cc", "co", "cb", "cu", "l", "u", "cs", "cm", "cf", "ca", "C", "ac"], "d": ["n", "x", "dos", "p", "db", "cd", "g", "r", "w", "m", "z", "bd", "h", "dt", "f", "df", "t", "dc", "da", "dr", "v", "e", "de", "ad", "D", "ed", "q", "l", "dd", "du", "u", "ds", "nd"]}}
{"code": "a,b=map(int, input().split())\\nA=str(a);B=str(b);\\nif a<=b:\\n    print(A*b)\\nelse :\\n    print(B*a)", "target": "69", "substitutes": {"a": ["n", "x", "ia", "sta", "ae", "ab", "d", "p", "ta", "g", "i", "c", "ma", "z", "o", "ea", "la", "aaa", "val", "pa", "h", "act", "abs", "f", "t", "alpha", "da", "na", "an", "e", "int", "al", "at", "sa", "af", "ao", "ity", "au", "oa", "aa", "l", "am", "ar", "u", "area", "ba", "ca", "ac"], "b": ["bis", "body", "n", "sb", "ben", "ab", "d", "p", "db", "beta", "sub", "g", "ib", "i", "r", "c", "m", "z", "bi", "wb", "fb", "rb", "by", "mb", "be", "ob", "bh", "bc", "t", "gb", "nb", "bb", "v", "bt", "eb", "base", "cb", "l", "bp", "bin", "j", "y", "bound", "bs"], "A": ["GA", "M", "T", "API", "IA", "Alpha", "AH", "AU", "AT", "X", "ACC", "ESS", "AL", "AV", "AB", "AE", "RA", "H", "AA", "LA", "As", "V", "AR", "AS", "Bar", "G", "P", "HA", "AP", "CA", "E", "AF", "TA", "AM", "Java", "SA", "AC", "BA", "AN", "EA", "C"], "B": ["M", "BI", "CB", "T", "MB", "RB", "VB", "Two", "IB", "AB", "BER", "V", "Bar", "BC", "BE", "J", "BR", "GB", "WB", "G", "P", "BB", "BM", "Bern", "TB", "D", "NB", "EB", "Y", "ON", "DB", "BA", "TN", "BY", "C"]}}
{"code": "a, b, c, d = map(int, input().split())\\n\\nif a > c:\\n    a, c = c, a\\nif b > d:\\n    b, d = d, b\\nans = b - c\\nif ans < 0:\\n    ans = 0\\n\\nprint(ans)", "target": "146", "substitutes": {"a": ["n", "x", "ae", "ab", "ra", "p", "aj", "ta", "ach", "ct", "ai", "i", "arc", "r", "w", "\u00e1", "ma", "ace", "z", "o", "ea", "col", "fa", "act", "ax", "f", "t", "alpha", "da", "wa", "an", "e", "v", "ad", "ain", "A", "al", "ap", "at", "ao", "af", "sa", "ch", "oa", "aa", "l", "am", "ar", "k", "ba", "ca", "ac"], "b": ["n", "sb", "ab", "p", "db", "g", "ib", "i", "r", "m", "bd", "z", "bi", "wb", "fb", "rb", "o", "h", "be", "ob", "f", "br", "bc", "t", "nb", "B", "bb", "v", "e", "A", "s", "bl", "cb", "l", "u", "j", "y", "bs", "ba"], "c": ["ec", "ctrl", "ce", "lc", "n", "x", "con", "ci", "p", "unc", "cd", "g", "cn", "ct", "rc", "r", "chain", "tc", "m", "z", "fc", "col", "h", "f", "bc", "t", "dc", "conf", "sc", "e", "v", "cin", "cp", "s", "ch", "cc", "co", "ed", "cb", "cu", "l", "u", "cs", "y", "cr", "cf", "ca", "C", "ac"], "d": ["n", "dos", "p", "db", "cd", "g", "di", "ct", "i", "td", "dh", "r", "m", "z", "bd", "h", "dt", "done", "f", "df", "t", "dc", "dat", "da", "dig", "dr", "v", "e", "de", "s", "D", "do", "q", "l", "dd", "du", "u", "dra", "did", "sd", "y", "dict", "ds", "rd"], "ans": ["ars", "con", "any", "ANS", "ants", "ats", "ains", " means", "eds", "outs", "was", "ows", "ros", "aus", "asks", "us", "san", "ns", "vals", "ann", "rans", "mas", "ks", "anas", "offs", "ins", "ses", "ons", "ms", "amps", "flags", "ls", "anned", "ents", "ids", "ens", "ots", "als", "uns", "can", "an", "anners", "anks", "rors", "gs", "anes", "oss", "na", "aps", "posts", "nan", "aos", "cs", "arts", "os", "es", "errors", "ds", "aults", "bs", "ca", "olds"]}}
{"code": "def CheckPalindrome(S, L):\\n    result = True\\n    for i in range((L+1)//2):\\n        if S[i] != S[-i-1]:\\n            result = False\\n            break\\n    return result\\n\\nresult = True\\nS = input()\\nL = len(S)\\n\\nresult = CheckPalindrome(S, L)\\n\\nif result:\\n    S2 = S[:(len(S)-1) // 2]\\n    L2 = len(S2)\\n    result = CheckPalindrome(S2, L2)\\n\\nif result:\\n    S3 = S[(L+3)//2-1:]\\n    L3 = len(S3)\\n    result = CheckPalindrome(S3, L3)\\n\\nif result:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "420", "substitutes": {"S": ["Single", "M", "N", "Source", "NS", "T", "SF", "SH", "ES", "Series", "BS", "SS", "HS", "SL", "SB", "R", "I", "JS", "X", "Sl", "Si", "RS", "SER", "SO", "VS", "SI", "CS", "TS", "PS", "RAW", "Set", "OS", "SM", "H", "As", "O", "V", "GS", "IS", "SAM", "INS", "Some", "SOURCE", "B", "Q", "G", "Sing", "P", "SSL", "SE", "A", "US", "s", "Is", "SU", "SP", "D", "DS", "Y", "SA", "WS", "String", "Z", "C"], "L": ["LB", "dL", "M", "N", "NL", "DL", "List", "LIN", "PL", "BL", "SL", "I", "LC", "TL", "LR", "Length", "H", "W", "LU", "LA", "V", "LO", "LT", "B", "J", "Li", "G", "P", "LI", "E", "Level", "LV", "LG", "VL", "D", "Lu", "GL", "Left", "l", "LL", "Len", "LE", "Lo", "LM", "LOC", "LS", "LP", "EL", "C"], "result": ["answer", "json", "void", "instance", "sign", "confirmed", "Result", "value", "true", "r", "set", "runner", "res", "either", "mask", "successfully", "part", "response", "end", "see", "purpose", "then", "relation", "same", "root", "trace", "request", "feature", "goal", "point", "match", "test", "rule", "iter", "length", "created", "section", "region", "full", "status", "mate", "output", "case", "description", "results", "also", "debug", "date", "group", "error", "join", "function", "source", "start", "chain", "next", "complete", "comment", "reason", "ret", "successful", "contact", "report", "process", "note", "make", "val", "term", "false", "duration", "bool", "record", "important", "search", "event", "rest", "req", "attr", "mode", "arg", "necessary", "name", "run", "method", "current", "diff", "type", "message", "success", "power", "done", "t", "out", "null", "int", "final", "row", "profile", "proc", "command", "mark", "sequence"], "i": ["mi", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "iter", "m", "bi", "qi", "ic", "ix", "ip", "ind", "b", "t", "si", "li", "ii", "ji", "v", "ori", "ti", "s", "im", "it", "zi", "ui", "q", "l", "pi", "id", "j", "y", "k", "ij", "iu"], "S2": ["sB", "s42", "s1", "Str1", "RTwo", "L1", "SB", "SUTwo", "Str2", "s52", "S52", " S52", "Slo", "SUlo", "StrB", "SU2", "S42", "Str42", "SSlo", " S1", " S42", "SSTwo", " SB", "STwo", "R3", "R2", "L52", "SS2", "S1", "Rlo", "SS3", "s2", "SU3"], "L2": ["LE2", "LSecond", "LE42", "LISecond", "LI2", "NSecond", " LTwo", "LI42", "N3", "LESecond", "LE3", "L42", "N2", " L4", "L4", "LE4", " LSecond", "LETwo", "LITwo", " L42", "LTwo", "N4"], "S3": ["SampleThree", " S6", "WSThree", " Sard", "Samplethird", "Siii", " SThree", "SThree", "SSThree", " Siii", "Liii", "SSthird", "Sampleard", "L4", "LThree", "S4", " S4", " Sthird", "L6", "S6", "WS3", "SS4", "SSard", "Sthird", "Sample3", "Sard", "WSiii", "WS6", "SS3"], "L3": [" Lthree", "PL3", "DL63", "Lard", "PLthree", "List21", " L21", " L80", "Len3", "DLthree", "L63", "Lenard", "DL80", " Lard", "List3", "Lenthree", "L80", "Lthree", "Len21", "DL3", "Listard", "PL80", "Listthree", " L63", "PL63", "L21"]}}
{"code": "MOD = 10**9 + 7\\nS = input()\\nres = 0\\ndp0 = 1 # ''\\ndp1 = 0 # 'a'\\ndp2 = 0 # 'ab'\\ndp3 = 0 # 'abc'\\n\\nfor c in S:\\n    if c == 'A':\\n        dp1 += dp0\\n    elif c == 'B':\\n        dp2 += dp1\\n    elif c == 'C':\\n        dp3 += dp2\\n    else:\\n        dp0,dp1,dp2,dp3 = dp0*3,dp1*3+dp0,dp2*3+dp1,dp3*3+dp2\\n    dp0 %= MOD\\n    dp1 %= MOD\\n    dp2 %= MOD\\n    dp3 %= MOD\\nprint(dp3)\\n", "target": "640", "substitutes": {"MOD": ["MAX", "VER", "OP", "mod", "MAT", "STEP", "DIR", "POS", "Mod", "CLASS", "RM", "OD", "DR", "MIN", "RES", "SIZE", "MD", "NUM", "MODE", "ID", "MS", "RC", "RO", "SPEC", "DEV", "MT", "FORM", "REM", "PAR"], "S": ["M", "N", "NS", "T", "SH", "SS", "SB", "R", "X", "I", "PS", "SI", "W", "H", "O", "V", "Q", "G", "P", "A", "MS", "SP", "D", "DS", "U", "K", "Z", "C"], "res": ["resolution", "ret", "reset", "rep", "VAL", "rc", "re", "Res", "RS", "r", "ref", "rs", "RE", "RES", "result", "mask", "rel", "ress", "resp", "exp", "red", "rss", "req", "pres", "mem", "grad", "ps", "sum"], "dp0": ["dp5", "tp5", "dp00", "DP5", "tp0", "d5", "DP00", "DP0", "d00", "tp00", "d0"]}}
{"code": "N = input()\\nS = list(map(str,input().split()))\\n\\nif \"Y\" in S:\\n    print(\"Four\")\\nelse:\\n    print(\"Three\")", "target": "229", "substitutes": {"N": ["CNN", "M", "n", "NS", "T", "NC", "Ns", "X", "I", "R", "NA", "NN", "NR", "H", "NF", "V", "TN", "B", "J", "Q", "P", "E", "D", "Ni", "F", "Z", "FN", "C"], "S": ["SN", "M", "NS", "T", "ANS", "SF", "SH", "SS", "SL", "X", "R", "I", "L", "RS", "VS", "SI", "TS", "CS", "SM", "H", "V", "INS", "B", "Q", "P", "A", "E", "s", "IES", "SP", "D", "DS", "Y", "U", "Z", "C"]}}
{"code": "print (input().replace('2017/','2018/'))\\n", "target": "49", "substitutes": {}}
{"code": "import bisect\\n\\ninf = 10**18\\n\\na,b,q = map(int,input().split())\\ns = [-inf]+[int(input()) for _ in range(a)]+[inf]\\nt = [-inf]+[int(input()) for _ in range(b)]+[inf]\\nx = [int(input()) for _ in range(q)]\\n\\nfor i in x:\\n    a1 = s[bisect.bisect_right(s,i)]\\n    b1 = t[bisect.bisect_right(t,i)]\\n    a2 = s[bisect.bisect_right(s,i)-1]\\n    b2 = t[bisect.bisect_right(t,i)-1]\\n    ans = inf\\n    for j in [a1,a2]:\\n        for k in [b1,b2]:\\n            ans = min(ans,abs(i-j)+abs(j-k),abs(i-k)+abs(k-j))\\n    print(ans)", "target": "487", "substitutes": {"inf": ["n", "err", "left", "z", "ix", "const", "log", "ind", "mask", "limit", "fin", "nan", "compl", "spin", "phys", "init", "frac", "ine", " Infinity", "aff", "edge", "Inf", "iter", "tip", "length", "expl", "ins", "limits", "fo", "eq", "inter", "xy", " Inf", "fixed", "deg", "lim", "ipl", "txt", "inv", "ref", "img", "limited", "hex", "mind", "io", "adv", "sil", " INF", " infinity", "erb", "pi", "pp", "\u03c0", " infinite", "ter", "sup", "inc", "diff", "info", "f", "df", "conf", "int", "rf", "adj", "fer", "ish", "orth", "fg", "tif", "hi", "xf"], "a": ["aq", "ia", "ae", "ac", "ab", "ta", "aj", "p", "ai", "r", "c", "eas", "o", "ea", "la", "alpha", "an", "A", "ap", "at", "sa", "oa", "aa", "am", "ar", "u", "area", "ba", "ca", "ao"], "b": ["n", "sb", "ab", "p", "db", "g", "ib", "lb", "r", "c", "m", "z", "bi", "fb", "rb", "o", "be", "bc", "nb", "B", "bb", "v", "cb", "u", "y", "bs", "ba", "back"], "q": ["qv", "n", "d", "p", "g", "qu", "qt", "r", "c", "z", "m", "qi", "query", "o", "f", "quit", "Q", "v", "e", "sq", "qq", "qa", "ch", "dq", "u", "y", "qs"], "s": ["n", "sb", "sw", "ys", "ats", "js", "p", "g", "fs", "r", "hs", "us", "c", "ts", "z", "south", "ns", "ies", "m", "rs", "ses", "o", "ins", "sl", "h", "ms", "ls", "S", "ss", "si", "its", "gs", "ws", "sa", "st", "xs", "sts", "l", "vs", "cs", "y", "os", "ds", "ps", "bs"], "_": ["T", "__", "Time", "Local", "let", "val", "place", "____", "B", "E", "___", "Un"], "t": ["tm", "ht", "n", "T", "to", "nt", "ta", "p", "table", "ret", "g", "test", "ct", "tw", "r", "tc", "wt", "txt", "ts", "z", "m", "w", "c", "gt", "o", "te", "tp", "tree", "tx", "dt", "tg", "pt", "ot", "tes", "tu", "its", "out", "v", "at", "tt", "it", "tr", "tf", "st", "rt", "l", "kt", "u", "mat", "vt", "y", "tz", "mt", "temp"], "x": ["wx", "n", "xi", "ex", "ci", "p", "xes", "ux", "xc", "ct", "xa", "X", "rx", "w", "z", "xt", "xml", "xxx", "ic", "ix", "tx", "ax", "xd", "v", "e", "int", "xy", "xs", "mx", "xb", "dx", "inx", "xx", "l", "y", "xp", "xf"], "i": [" ii", "\u00ed", "iii", "ki", "xi", "mi", "ia", "ie", "ci", "gi", "ir", "p", "name", "di", "ai", "I", "c", "m", "bi", "qi", "yi", "info", "ic", "o", "ix", " bi", "iri", "ip", "si", "ii", "li", "ji", "ei", "key", "int", "ti", "v", "e", "iy", "im", "it", "zi", "ini", "ui", "l", "pi", "phi", "u", "y", "ij", "ik", "iu", "hi", " Xi", "init"], "a1": ["bOne", "b001", "s0", "iName", "s1", "aOne", "aa1", "va0", "a0", "aa0", "a01", "b0", "aa01", "vaName", "aName", "i001", "a001", "va001", "b01", "bName", "i1", "i0", "va1", "sOne", "aaOne", "s01"], "b1": ["base001", "j2", "b001", "base1", "j1", "t2", "a0", "t1", "b91", "t91", "b0", " b001", "a001", "j91", "base0", "a91", " b0"], "a2": [" a02", "ba02", "sa02", "b4", " aTwo", "aTwo", "a02", "a3", " a4", "b02", "sa4", "a4", "ba2", "sa2", " a3", "b3", "ba3", "baTwo", "sa1", "bTwo"], "b2": ["j2", " b3", "ab", "bi2", "j1", "j3", "t2", "biTwo", "bi0", "a3", "b0", "bi52", "bb", "t0", "b52", " bTwo", "jb", "b3", " bb", " b52", "tTwo", " b0", "t52", "bTwo"], "ans": ["ANS", "ants", "ats", "ians", "ean", "ana", " means", "acs", "ai", "aus", "us", "iban", "san", "aned", "ns", "ann", "rans", "rs", "anas", "ks", "offs", "ins", "ras", "vers", "ons", "ms", "angs", "amps", "ls", "pan", "ents", "ens", "ations", "cas", "uns", "an", "jas", "gs", "iann", "posts", "oss", "aps", "anes", "nan", "xs", "ions", "nas", "ams", "aos", "ran", "yes", "rates", "arts", "os", "lan", "AN", "ps"], "j": ["aq", "json", "n", "uj", "ja", "ijk", "aj", "js", "p", "name", "g", "jp", "r", "jc", "oj", "z", "m", "c", "jj", "bi", "ix", "o", "h", "pr", "je", "si", "J", "bj", "ji", "v", "jas", "kj", "e", "obj", "it", "jump", "div", "l", "pi", "dj", "u", "y", "ij", "ik"], "k": ["ck", "ki", "kn", "uk", "ek", "kr", "kh", "kl", "p", "g", "kar", "ak", "ke", "kid", "r", "w", "c", "z", "m", "jj", "dk", "ks", "o", "kw", "h", "ko", "tk", "kj", "v", "e", "ku", "kt", "wk", "u", "kk", "ka", "K", "ik", "sk", "kg", "y", "mk"]}}
{"code": "#!/usr/bin/python\\n# -*- coding: utf-8 -*-\\n\\nS = input()\\n\\nif S == \"hi\":\\n    print('Yes')\\nelif S == \"hihi\":\\n    print('Yes')\\nelif S == \"hihihi\":\\n    print('Yes')\\nelif S == \"hihihihi\":\\n    print('Yes')\\nelif S == \"hihihihihi\":\\n    print('Yes')\\nelse:\\n    print(\"No\")\\n", "target": "535", "substitutes": {}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10 ** 7)\\ninput = sys.stdin.readline\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\n\\ndef resolve():\\n    n = int(input())\\n    B = list(map(int, input().split()))\\n\\n    res = []\\n    while B:\\n        for i in reversed(range(len(B))):\\n            if B[i] == i + 1:\\n                b = B.pop(i)\\n                res.append(b)\\n                break\\n        else:\\n            print(-1)\\n            exit()\\n    print(*res[::-1], sep=\"\\n\")\\n\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "593", "substitutes": {"input": ["next", "call", "pattern", "str", "select", "expression", "util", "view", "submit", "get", "reset", "eval", "shift", "inc", "raw", "txt", "c", "ref", "buffer", "focus", "read", "prefix", "format", "step", "output", "PUT", "cur", "val", "cmd", "f", "config", "parse", "feed", "out", "Input", "list", "int", "stream", "each", "until", "exec", "print", " Input", "q", "reader", "command", "sample", "data", "text", "source", "sum"], "f_inf": ["f2floor", "f2max", "F_err", "F_inf", "F_max", "f_floor", "F2inf", "F2floor", "F2max", "F2err", "F_floor", "f2err", "f2inf", "f_max", "f_err"], "mod": ["MOD", "sub", "mult", "Mod", "fun", "scale", "inv", "m", "pad", "floor", "circ", "round", "prime", "dec", "min", "ind", "grow", "fac", "cond", "tab", "da", "bit", "pos", "add", "exp", "debug", "base", "mode"], "n": ["nr", "N", "nt", "d", "p", "name", "sn", "c", "m", "z", "ns", "nl", "h", "num", "t", "count", "len", "nb", "na", "v", "nc", "nm", "nu", "size", "nn", "l", "k", "j"], "B": ["LB", "But", "M", "N", "BI", "CB", "T", "BL", "BS", "VB", "OB", "Bs", "SB", "R", "I", "L", "Box", "IB", "AB", "BG", "BER", "H", "W", "V", "Ch", "QB", "b", "BP", "BE", "BC", "S", "J", "BU", "BR", "G", "WB", "PB", "P", "BB", "A", "USB", "BM", "Blue", "TB", "Bern", "D", "NB", "EB", "BO", "Y", "DB", "Bytes", "BA", "Back", "BY", "C"], "res": ["rus", "resolution", "ret", "reset", "rev", "helps", "rx", "Res", "re", "r", "finals", "resources", "vals", "rem", "full", "rs", "RES", "vers", "ons", "ms", "rys", "pr", "result", "rel", "pas", "ress", "cons", "rek", "results", "resp", "out", "crit", "des", "gr", "rest", "rez", "sol", "pres", "clus", "req", "ours", "yes", "rates", "cs", "reg", "pers", "powers", "ps", "respons"], "i": ["a", "mi", "ki", "xi", "x", "ci", "gi", "d", "p", " j", "di", "ai", "I", "z", "m", "bi", "yi", "qi", "info", "ic", "ix", "o", "ip", "h", "ind", "b", "t", "si", "li", "ii", "v", "e", "int", "ti", "it", "zi", "ini", "q", "pi", "l", "id", "j", "index", "iat", "fi", "ik", "ij", "k", "iu", "hi", "y"]}}
{"code": "hen=set(list(map(int,input().split())))\\nif len(hen)==1:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "649", "substitutes": {"hen": ["han", "ende", "hent", "tern", "hou", "her", "xon", "hens", "oen", "en", "phen", "isen", "ldon", "kinson", "hest", "haven", "een", "hes", "sen", "ens", "ern", "agen", "hing", "hon", "enn", "hene", "enth", "he", "umen", "hern", "rown", "het", "chen", "onen", "zen", "jan", "hed", "wen", "heter", "erson"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nb=list(map(int,input().split()))\\nc=list(map(int,input().split()))\\na.sort()\\nb.sort()\\nc.sort()\\ni,j,k=0,0,0\\nm1=[]\\nwhile k<n and i<n:\\n  if b[i]>a[k]:\\n    j+=1\\n    k+=1\\n  else:\\n    m1.append(j)\\n    i+=1\\nfor t in range(len(m1),len(b)):\\n  m1.append(j)\\ni,j,k=0,0,0\\nm2=[]\\nwhile k<n and i<n:\\n  if c[i]>b[k]:\\n    j+=m1[k]\\n    k+=1\\n  else:\\n    m2.append(j)\\n    i+=1\\nfor t in range(len(m2),len(c)):\\n  m2.append(j)\\nprint(sum(m2))", "target": "37", "substitutes": {"n": ["N", "net", "conn", "nt", "gn", "ln", "d", "p", "on", "en", "names", "ne", "dn", "wh", "r", "sn", "w", "m", "z", "ns", "ny", "o", "nl", "nov", "ren", "num", "ens", "fn", "len", "nb", "no", "mn", "non", "nil", "na", "v", "an", "int", "nc", "nm", "ten", "st", "nan", "ch", "s", "nu", "size", "nn", "l", "q", "np", " N", "ng"], "a": ["ia", "ae", "ab", "aj", "ta", "p", "d", "ai", "r", "w", "ma", "m", "ga", "o", "ea", "la", "be", "aaa", "h", "bb", "av", "an", "v", "e", "A", "al", "ap", "at", "sa", "s", "oa", "aa", "l", "am", "ar", "u", "area", "ba", "ca", "ac"], "b": ["sb", "bf", "ab", "p", "db", "g", "ib", "lb", "r", "m", "bi", "wb", "pb", "fb", "rb", "bo", "o", "mb", "be", "aaa", "ob", "br", "f", "bc", "gb", "nb", "B", "bb", "v", "an", "e", "A", "s", "eb", "bl", "cb", "aa", "l", "bp", "u", "ub", "y", "bs", "ba", "ca"], "c": ["ec", "ctrl", "ce", "con", "lc", "x", "ci", "d", "p", "unc", "cd", "g", "ct", "rc", "r", "chain", "tc", "w", "m", "fc", "ic", "o", "h", "cur", "cv", "f", "bc", "mc", "can", "e", "v", "cin", "cache", "cos", "cp", "ch", "cc", "com", "co", "cu", "cb", "l", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "i": ["mi", "ki", "xi", "x", "ie", "ci", "gi", "cli", "p", "di", "ian", "ai", "I", "this", "Si", "m", "ami", "info", "iti", "ic", "o", "ix", "ski", "iri", "ip", "ri", "io", "si", "ii", "li", "ji", "ei", "e", "int", "ti", "oi", "v", "iy", "im", "it", "ini", "zi", "ui", "q", "l", "pi", "phi", "u", "id", "y", "ij", "ik", "iu", "hi", "init"], "j": ["json", "xi", "x", "uj", "ja", "ijk", "str", "js", "aj", "ret", "g", "di", "jp", "jc", "oj", "z", "m", "jj", "bi", "note", "ju", "bo", "pr", "jl", "fr", "br", "jac", "je", "io", "si", "J", "ot", "ion", "ii", "li", "ji", "kj", "jas", "v", "out", "obj", "it", "jump", "jo", "q", "yes", "l", "dj", "y", "jit", "ij"], "k": ["ck", "km", "ki", "ek", "uk", "kn", "kr", "kh", "kl", "ijk", "ac", "kin", "spec", "g", "ask", "jp", "ak", "ke", "kid", "z", "m", "set", "jj", "dk", "ks", "kw", "ko", "kind", "them", "tk", "sch", "kok", "gh", "key", "kj", "kick", "it", "ikk", "ku", "q", "kt", "wk", "tek", "kk", "id", "kan", "sk", "ik", "K", "y", "ka", "mk", "unk", "sc"], "m1": ["manta", "wm51", " marts", " m7", "mask1", "vm30", "vm1", "mpOne", "vm51", "M4", "tm1", "mask7", "tm8", "esmanta", "smars", "mOne", "vmanta", "m51", "i7", "esm51", "wm30", "m8", "sm1", "MOne", "mi1", "sm17", "marts", "wmanta", "mp2", "m4", "tm4", "mars", "esm1", " m4", " m17", "mp10", "M10", "maskarts", "tm2", "mp1", "i1", "m17", "iarts", "wm1", " m8", "m7", "M2", " m10", "mi17", "M1", " mOne", " mars", "miars", "m30", "esm30", "m10", "M8"], "t": ["th", "ter", "to", "nt", "lt", "p", "qt", "tw", "ct", "td", "w", "wt", "fort", "ts", "te", "ont", "let", "unt", "pt", "ot", "ti", "at", "st", "tt", "it", "rt", "et", "kt", "ent", "ft"], "m2": ["v182", "mi022", "v2", "arm8", "m022", "malt", "arm1", "dm4", "tm1", "dm2", " m5", "M02", "Malt", "M22", " malt", "M022", "tm5", "m8", "v5", " m02", "m22", "mi1", "m02", "mi22", "dm1", "m4", "m10", "dm02", " m4", "m5", " m182", "dm10", "dmalt", "M10", "tm2", " m22", "tm182", "v1", " m8", "m182", "M2", " m022", " m10", "arm2", "M1", "M8", "M4", "mi2"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nimport numpy as np\\n\\nMOD = 10**9 + 7\\n\\nN,M = map(int,readline().split())\\nS = list(map(int,readline().split()))\\nT = np.array(['0']+readline().split(),np.int32)\\n\\n# S\u306f\u5de6\u304b\u3089\u898b\u3066\u3044\u304f\u3002\\n# T\u306b\u3064\u3044\u3066\u3001\uff08\u6700\u5f8c\u306b\u4e00\u81f4\u3055\u305b\u305f\u6587\u5b57\u306e\u4f4d\u7f6e\u3001\u901a\u308a\u6570\uff09\u3092dp\u3067\u6301\u3064\\n\\ndp = np.zeros(M+1,dtype=np.int64)\\ndp[0] = 1\\n\\nfor i,s in enumerate(S,1):\\n    prev = dp\\n    prev_cum = prev.cumsum() % MOD\\n    equal = (s == T)\\n    dp[1:] += equal[1:] * prev_cum[:-1]\\n    dp[dp>=MOD] -= MOD\\n\\nanswer = dp.sum() % MOD\\nprint(answer)", "target": "505", "substitutes": {"read": ["rid", "open", "find", "hold", " readable", "load", "str", "select", "write", "run", "get", " receive", "readable", " send", " write", "take", "r", "length", "buffer", "input", "reads", "sync", "ead", "ready", " Read", "written", "parse", "std", "ad", "pop", "stream", " READ", "Read", "first", "print", "ed", "READ", "reader", "reading", "roll", "data", "seek", "text", " reads", "rd"], "readline": ["readliner", "readerlist", "getblock", "runmode", "loadrow", "readlist", "printblock", " readfile", "getline", " readrow", "readerlines", "Readlines", "printline", "readfunction", "readerle", "getrow", "holdline", "runblock", " readlist", "readmode", "readrow", "readfile", "readLine", "getmode", "readerfile", " readLine", "readerrow", "holdfunction", "holdlines", "runlines", "printmode", "Readle", "readblock", "readerLine", " readle", "getliner", "holdliner", "readerlin", "Readlist", "readerline", "runline", "printlines", " readlin", "getfunction", " readliner", "readle", "readlin", " readfunction", "Readline", "loadlin", "loadLine", "getfile", "getlines", "loadline"], "readlines": ["splitvalues", "Readstrings", "splitlines", "findvalues", "Readlines", "readableline", " readstrings", "findelines", "readstrings", "Readelines", "Readvalues", "readableelines", "splitelines", "readelines", " readelines", "readvalues", "splitline", "findlines", "readablestrings", "readablelines", "Readline", "findline"], "MOD": ["MAX", "max", " scale", "mod", " Mod", "R", "X", "Mod", "AD", "scale", "length", " MAX", "Length", "SIZE", "NUM", "DX", "J", "P", "ID", " mod", "D", " order", "Y", "Len", "K", " power", " Max", "Z"], "N": ["n", "NS", "Ns", "R", "I", "X", "L", "NT", "H", "O", "V", "B", "J", "Q", "P", "A", "E", "D", "Y", "Ni", "U", "K", "F", "Z", "C"], "M": ["X", "R", "I", "L", "m", "Ms", "H", "O", "V", "MC", "B", "J", "Q", "G", "P", "MS", "D", "TM", "Y", "AM", "U", "K", "F", "Z", "C"], "S": ["SN", "NS", "SS", "SL", "R", "X", "I", "L", "Si", "SI", "CS", "SM", "W", "V", "B", "J", "P", "E", "s", "SP", "Y", "SA", "SR", "Z", "C"], "T": ["TP", "R", "X", "I", "L", "TS", "W", "H", "V", "TN", "t", "B", "J", "Q", "G", "P", "E", "Ts", "TT", "D", "TM", "Y", "K", "F", "Z", "C"]}}
{"code": "# import sys\\n# readline = sys.stdin.readline\\n# generator = (readline().strip() for _ in range(N))\\n\\n# N, M = map(int, input().split())\\n# As = list(map(int, input().split()))\\n# queries = (input() for _ in range(N))\\n\\n\\ndef solve():\\n    N = int(input())\\n    As = list(map(int, input().split()))\\n\\n    if N > 0 and As[0] != 0:\\n        return -1\\n    if N == 0 and As[0] != 1:\\n        return -1        \\n\\n    vertices = [1] * (N+1)\\n    previous = 0\\n    for i, a in enumerate(As[:0:-1]):\\n        max_n_vert = a + previous\\n        previous = max_n_vert\\n        vertices[N-i] = max_n_vert\\n\\n    n_not_leaves_prev = 1\\n    for i, a in enumerate(As):\\n        if i == 0:\\n            continue\\n        # if n_not_leaves_prev == 0:\\n        #     return -1\\n\\n        max_n_vert = 2 * n_not_leaves_prev\\n        vertices[i] = min(vertices[i], max_n_vert)\\n        n_not_leaves_prev = vertices[i] - a\\n\\n        if max_n_vert < a:\\n            return -1\\n\\n    return sum(vertices)\\n\\n\\ndef main():\\n    print(solve())\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "625", "substitutes": {}}
{"code": "import math\\nX = int(input())\\nbeki = []\\nbeki.append(1)\\nXruto = math.sqrt(X)\\nXruto = math.floor(Xruto)\\nfor i in range(2, Xruto+1):\\n    for j in range(10):\\n        a = pow(i, j)\\n        if a <= X:\\n            beki.append(a)\\n        else:\\n            break\\nprint(max(beki))\\n", "target": "489", "substitutes": {"X": ["MAX", "IX", "x", "N", "T", "Max", "TX", "I", "EX", "L", "R", "MX", "OX", "UX", "AX", "H", "V", "Width", "XP", "S", "XM", "DX", "J", "Q", "G", "Tx", "P", "A", "E", "XX", "D", "XT", "XXX", "VALUE", "Y", "XL", "U", "K", "F", "Value", "Z", "C", "Xi"], "beki": ["bieki", "bedi", " bedi", " beden", "aeki", "rerek", "Bfee", "baeki", " bfee", " berek", "baemi", "reki", "Beki", "bieli", "Bedi", "aemi", "reden", "Berek", "bieden", "bifee", "baedi", " bheny", "biedly", "aedi", "biedi", " bheid", "Beli", "aheny", " beli", "bierek", "bfee", "baheny", " bemi", "Bedly", "bheid", "beden", "berek", "tedly", "rheid", "bedly", "terek", "biheid", "beli", "teki", "tedi", "bemi", "bheny"], "Xruto": ["Xruti", "Xcrutt", "Xarogun", " Xrut", "Xcruton", "XRuta", "Yrogun", "Xruta", "Xaruti", " Xrcotta", "Ycruton", " Xrcuto", "Xrruti", "XRuton", "Xsrutt", "Xrruto", "Yrato", "Xdrogun", "Yruton", "Yruti", "Yruto", "Xdruta", "Yaruto", "Yaruta", "Yaruti", " Xrotta", "Yruta", "XRuti", "Xsruti", "Yarogun", "Xarotta", "Ycruti", "Xrogun", "Xsrato", "Xaruto", "Xrcuto", " Xrcut", "XRuto", "Xcruto", "Xrotta", "Xrato", "Xcruti", "Ycruto", "Xruton", " Xrcuti", "Ycrato", "Xdrutt", "Ycruta", "Xrutt", "Xsruto", " Xruti", "Yrutt", "Xdruti", "Xaruta", "Xdruto", "Xrrogun", "Xrcotta", "Xsrut", "Xcrato", "Xrut", "Xcruta", "Xsrotta", "Xdrato", "Xdruton", "Xrruta", "Ycrutt", "Xrcut", "Xarut", "Xrcuti"], "i": ["\u00ed", "mi", "ki", "xi", "x", "ia", "n", "ci", "gi", "p", "di", "ai", "I", "c", "m", "bi", "ami", "yi", "ic", "b", "io", "si", "li", "ii", "v", "ti", "zi", "ini", "phi", "pi", "l", "y", "ij", "ik", "iu", "hi"], "j": ["json", "n", "x", "uj", "ja", "str", "js", "aj", "p", "d", "jp", "job", "jc", "oj", "z", "m", "c", "jj", "bi", "o", "jl", "b", "t", "J", "bj", "kj", "v", "ji", "obj", "q", "l", "dj", "k", "y", "ij"], "a": ["x", "sta", "ae", "to", "ac", "aff", "ta", "p", "ana", "xa", "ai", "\u00e1", "c", "ma", "m", "pai", "eas", "ga", "o", "ea", "pa", "aaa", "act", "b", "part", "alpha", "apa", "add", "na", "an", "all", "A", "sa", "sha", "au", "oa", "aa", "element", "am", "ar", "u", "ya", "area", "ba", "ca"]}}
{"code": "from collections import defaultdict\\n\\ndef readInt():\\n  return int(input())\\ndef readInts():\\n  return list(map(int, input().split()))\\ndef readChar():\\n  return input()\\ndef readChars():\\n  return input().split()\\n\\nh,w = readInts()\\ns = [list(input()) for i in range(h)]\\n\\nfor i in range(h):\\n  for j in range(w):\\n    if s[i][j]==\"#\":\\n      if i!=0:\\n        if j-1>=0:\\n          if s[i-1][j-1]==\".\":\\n            s[i-1][j-1] = 1\\n          elif s[i-1][j-1]!=\"#\":\\n            s[i-1][j-1]+=1\\n        if s[i-1][j]==\".\":\\n          s[i-1][j] = 1\\n        elif s[i-1][j]!=\"#\":\\n          s[i-1][j]+=1\\n        if j+1<=w-1:\\n          if s[i-1][j+1]==\".\":\\n            s[i-1][j+1] = 1\\n          elif s[i-1][j+1] != \"#\":\\n            s[i-1][j+1]+=1\\n      if j-1>=0:\\n        if s[i][j-1]==\".\":\\n          s[i][j-1] = 1\\n        elif s[i][j-1]!=\"#\":\\n          s[i][j-1]+=1\\n      if j+1<=w-1:\\n        if s[i][j+1]==\".\":\\n          s[i][j+1] = 1\\n        elif s[i][j+1] != \"#\":\\n          s[i][j+1]+=1\\n      if i+1<=h-1:\\n        if j-1>=0:\\n          if s[i+1][j-1]==\".\":\\n            s[i+1][j-1] = 1\\n          elif s[i+1][j-1]!=\"#\":\\n            s[i+1][j-1]+=1\\n        if s[i+1][j]==\".\":\\n          s[i+1][j] = 1\\n        elif s[i+1][j]!=\"#\":\\n          s[i+1][j]+=1\\n        if j+1<=w-1:\\n          if s[i+1][j+1]==\".\":\\n            s[i+1][j+1] = 1\\n          elif s[i+1][j+1] != \"#\":\\n            s[i+1][j+1]+=1\\n\\nfor i in s:\\n  for j in i:\\n    if j==\".\":\\n      print(\"0\",end=\"\")\\n    else:\\n      print(j,end=\"\")\\n  print()", "target": "615", "substitutes": {"h": ["ht", "n", "x", "sh", "kh", "p", "g", "hz", "html", "hal", "wh", "r", "hs", "c", "m", "z", "ih", "rh", "o", "H", "ah", "bh", "f", "hl", "hp", "dr", "v", "oh", "his", "hw", "ch", "ha", "ph", "he", "hr", "hd", "q", "phi", "l", "ho", "hh", "u", "y", "k", "hi", "hm"], "w": ["wx", "n", "sw", "ex", "x", "wn", "d", "g", "tw", "wy", "wh", "we", "wt", "r", "z", "m", "wb", "wr", "window", "iw", "rw", "W", "wd", "kw", "wo", "wal", "ew", "wl", "wid", "win", "wa", "wp", "fw", "v", "width", "ws", "hw", "he", "nw", "q", "words", "y"], "s": ["a", "n", "settings", "aws", "ats", "p", "ains", "hs", "ns", "ms", "ths", "ss", "states", "strings", "v", "ans", "ares", "ists", "ims", "uploads", "ches", "pers", "bs", "rics", "js", "g", "les", "erences", "ins", "ords", "objects", "less", "ries", "ers", "its", "results", "params", "aces", "sts", "l", "rates", "cs", "ags", "stats", "storage", "mods", "d", "locks", "lines", "sys", "ses", "ties", "parts", "ends", "tes", "terms", "ances", "ments", "csv", "xs", "bes", "es", "ps", "views", "bis", "sb", "ants", "ports", "fs", "ts", "details", "ices", "rs", "tests", "ls", "abs", "b", "ations", "t", "S", "gs", "ges", "itions", "sol", "ands", "ests", "qs", "ds"], "i": ["a", "mi", "ki", "iii", "xi", "x", "ia", "ni", "ie", "ci", "gi", "ir", "cli", "vi", "g", "di", "ai", "I", "this", "m", "bi", "ami", "yi", "info", "ic", "ix", "o", "ip", "iri", "f", "multi", "ri", "io", "si", "li", "ii", "ji", "v", "ori", "ei", "ti", "oi", "int", "e", "iy", "at", "im", "it", "ims", "ini", "zi", "ui", "\u0438", "phi", "pi", "ati", "u", "id", "y", "ij", "ik", "iu", "hi", "init"], "j": ["json", "n", "x", "err", "p", "r", "z", "jj", "el", "ix", "res", "br", "je", "ot", "kj", "v", "obj", "it", "q", "k", "to", "ni", "js", "on", "g", "jp", "jc", "m", "o", "jl", "fr", "jac", "ion", "key", "opt", "l", "user", "dj", "ij", "next", "ja", "str", "aj", "d", "ret", "jet", "oj", "og", "note", "pr", "off", "dr", "jump", "jit", "uj", "di", "bi", "by", "f", "b", "sp", "t", "pt", "J", "bj", "li", "ji", "out", "adj", "y", "er"]}}
{"code": "import string\\n\\nS = input()\\nans = len(S)*(len(S)-1)//2 + 1\\nfor i in string.ascii_lowercase:\\n  c = S.count(i)\\n  ans -= c*(c-1)//2\\nprint(ans)\\n", "target": "351", "substitutes": {"S": ["STR", "M", "N", "Source", "T", "SF", "SH", "BS", "SS", "SL", "SB", "R", "I", "X", "L", "JS", "Si", "SI", "CS", "TS", "Screen", "SAN", "SM", "H", "GS", "V", "SQL", "SAM", "B", "G", "Sing", "P", "Input", "SE", "A", "s", "SP", "SU", "D", "DS", "SA", "String", "C"], "ans": ["ars", "tan", "ANS", "ants", "ats", "ians", "ai", "aus", "ros", "us", "sn", "aned", "ates", "ns", "ann", "rans", "rs", "anas", "ks", "offs", "ins", "leans", "wan", "ons", "ms", "amps", "ls", "pan", "ens", "ss", "uns", " sans", "can", "an", "iann", "anks", "oss", "anes", "s", "nan", "ran", "nas", "aos", "cs", "es", "os", "lan"], "i": [" ii", " I", "\u00ed", "n", "xi", "x", "mi", "ci", "gi", "p", "di", "ai", "I", " si", "bi", "yi", "ic", "ix", " bi", "t", "si", "iu", "ion", "ii", "li", "v", "ti", "oi", "s", " vi", "ini", "zi", " it", "l", "ati", " str", "pi", "j", "iri", " mi"], "c": ["ce", "lc", "n", "con", "ci", "gc", "d", "p", "unc", "cd", "cn", "ct", "rc", "tc", "m", "cv", "f", "b", "bc", "count", "mc", "dc", "t", "cum", "uc", "sc", "v", "nc", "cp", "cc", "co", "cu", "cb", "l", "cs", "j", "cm", "cr", "cf", "C", "ac"]}}
{"code": "from math import floor\\na,b=input().split()\\na,b=int(a),int(b[0]+b[2]+b[3])\\nprint(a*b//100)", "target": "44", "substitutes": {"a": ["aq", "x", "ia", "sta", "ae", "ac", "ab", "era", "ta", "d", "p", "aj", "ach", "va", "ai", "i", "r", "c", "ma", " A", "m", "ga", "ea", "la", "aaa", "act", "f", "t", "alpha", "da", "eu", "an", "e", "v", "A", "al", "at", "sa", "s", "af", "sha", "oa", "au", "ed", "aa", "am", "ar", "ya", "area", "ba", "ca"], "b": ["bis", "body", "n", "sb", "bf", "ab", "bar", "d", "db", "g", "ib", "i", "c", "reb", "z", "bi", "wb", "fb", "rb", "by", "o", "mb", "be", "two", "bh", "f", "br", "bc", "gb", "t", "bool", "nb", "B", "bb", "v", "e", "obj", "it", "eb", "ed", "base", "cb", "l", "bp", "buff", "bin", "j", "y", "bs", "ba", "back"]}}
{"code": "a, b = map(str, input().split())\\nnum = int(a+b)\\nflag = False\\nfor i in range(1, 1001):\\n    if i*i > num:\\n        break\\n    elif i*i == num:\\n        print(\"Yes\")\\n        flag = True\\nif not flag:\\n    print(\"No\")", "target": "271", "substitutes": {"a": ["n", "x", "ia", "to", "ae", "ab", "aff", "aj", "d", "era", "aba", "ach", "ai", "r", "ma", "eas", "ea", "la", "admin", "aaa", "act", "ax", "f", "t", "da", "na", "an", "e", "al", "A", "at", "sa", "au", "oa", "aa", "l", "am", "ar", "u", "ba", "ca", "ac"], "b": ["bis", "n", "sb", "ab", "lib", "d", "db", "g", "ib", "r", "c", "bi", "fb", "rb", "by", "mb", "be", "ob", "f", "bas", "bc", "t", "gb", "nb", "B", "bb", "v", "s", "eb", "cb", "l", "j", "y", "ub", "bs"], "num": ["con", "n", "su", "nt", "um", "mod", "nom", "p", "on", "mu", "comm", "test", "zero", "m", "rem", "total", "f", "multi", "NUM", "len", "nb", "no", "valid", "mn", "cum", "off", "na", "Num", "cal", "final", "nm", "om", "orig", "gen", "nu", "number", "mon", "np", "mem", "id", "index", "sum"], "flag": ["hold", "state", "offset", "sign", "gui", "split", "cloud", "store", "long", "start", "weight", "leaf", "set", "wait", "condition", "status", "bird", "land", "lag", "nl", "ground", "func", "flags", "result", "mask", "log", "f", "limit", "sp", "bool", "quit", "count", "cond", "no", "Flag", "force", " Flag", "bit", "list", "hide", "switch", "button", "group", "lock", "command", "enable", "layout", "id", "sync", "field", "stop"], "i": ["mi", "ki", "n", "xi", "x", "ni", "ci", "gi", "di", "uli", "ai", "I", "m", "isi", "bi", "qi", "info", "ic", "ix", "ip", "mis", "multi", "t", "io", "si", "li", "ii", "v", "ei", "ori", "ti", "oi", "im", "zi", "ini", "ui", "\u0438", "q", "phi", "pi", "l", "id", "j", "y", "asi", "fi", "ik", "iu", "hi"]}}
{"code": "from math import floor\\nimport numpy as np\\n\\nN = int(input())\\nK = floor((N * 2) ** 0.5)\\nif K * (K + 1) // 2 != N:\\n    print('No')\\n    exit()\\nelse:\\n    print('Yes')\\n    print(K + 1)\\n\\ngrid = np.ones((K, K), np.int64)\\ngrid[1:, 0] = np.arange(1, K)\\ngrid[:, 0] = np.cumsum(grid[:, 0])\\ngrid = np.cumsum(grid, axis=1).astype(str)\\nanswer = []\\nk = str(K)\\nanswer.append([k] + np.diag(grid).tolist())\\nanswer.append([k] + grid[:, 0].tolist())\\nfor i in range(1, K):\\n    answer.append([k] + grid[i, :i].tolist() + grid[i:, i].tolist())\\n\\nprint('\\n'.join(map(' '.join, answer)))\\n", "target": "502", "substitutes": {"N": ["SN", "n", "NL", "NS", "M", "T", "Ne", "NV", "NC", "GN", "NI", "Ns", "I", "NA", "L", "NM", "NN", "NP", "CN", "NR", "NT", "NH", "V", "NO", "NUM", "S", "NE", "B", "J", "Q", "G", "P", "Num", "A", "Network", "D", "NB", "Size", "MN", "Ni", "F", "AN", "TN", "NG", "C"], "K": ["M", "T", "KN", "KY", "Key", "KR", "MK", "KEY", "R", "X", "I", "L", "KK", "Kind", "KT", "Disk", "H", "FK", "KING", "O", "V", "KS", "KC", "PK", "NK", "Kent", "S", "Z", "B", "J", "SK", "Q", "G", "P", "A", "HK", "Mask", "Han", "VK", "D", "Y", "OK", "UK", "U", "F", "KI", "TN", "KE", "KB", "C", "Can"], "grid": ["table", "manager", "gpu", "buffer", "window", "tree", "cur", "mask", "num", "gb", "block", "tile", "gray", "q", "layout", "id", "reg", "range", "data", "coord", "layer", "mg", "content", "fine", "net", "gate", "local", "util", "get", "g", "test", "weight", "input", "output", "lag", "lay", "jac", "raid", "key", "hash", "group", "gain", "dq", "div", "addr", "tmp", "line", "wire", "fixed", "stack", "array", "draw", "storage", "chain", "client", "queue", "load", "db", "cell", "age", "query", "ga", "graph", "box", "wd", "result", "form", "remote", "bridge", "cache", "height", "gr", "stock", "dim", "good", "back", "rid", "hold", "domain", "gc", "ma", "map", "gm", "gru", "list", "rank", "row", "qq", "work", "node", "lat", "mat", "Grid", "square", "sequence", "sum"], "answer": ["next", "environment", "rue", "complete", "Answer", "wer", "ave", "queue", "vote", "option", "gallery", "example", "write", "rep", "voice", "exit", "onse", "ira", "entry", "replace", "install", "evaluate", "query", "message", "sequence", "output", "remember", "anova", "equality", "result", "description", "word", " Answer", "response", "review", "memory", "swers", "search", "list", "cache", "archive", " unanswered", "question", "say", "ve", "see", "reply", "verse", "again", "array", "echo", "answered", "interpret", "said"], "k": ["ck", "km", "ek", "uk", "kr", "kh", "kl", "ijk", "g", "kar", "ak", "ke", "kid", "r", "c", "make", "ks", "kw", "ko", "h", "tk", "kok", "kj", "v", "kick", "work", "ikk", "kat", "kt", "wk", "q", "kg", "tek", "kk", "sk", "ka", "j", "ik", "kan", "root", "ack", "mk"], "i": ["a", "mi", "n", "xi", "x", "ci", "p", "di", "ai", "I", "z", "m", "bi", "ic", "o", "ip", "ind", "b", "ri", "t", "si", "li", "ii", "ji", "v", "e", "int", "ti", "it", "zi", "ui", "ini", "q", "phi", "pi", "l", "u", "id", "j", "index", "y", "ij", "fi", "iu", "hi"]}}
{"code": "import math\\nn, m = map(int, input().split())\\np = 10**9 + 7\\n\\n\\n\\nnf = math.factorial(n) % p\\nmf = math.factorial(m) % p\\n\\nif abs(n-m) > 1:\\n  ans = 0\\n\\nelif n == m:\\n  ans = nf * mf * 2\\n  \\nelse:\\n  ans = nf * mf\\n  \\nprint(ans % p)", "target": "162", "substitutes": {"n": ["a", "N", "x", "nt", "gn", "ln", "en", "on", "d", "ne", "cn", "g", "i", "sn", "r", "c", "ns", "o", "nl", "h", "f", "b", "fn", "t", "nb", "mn", "na", "v", "an", "nc", "nm", "s", "nu", "nw", "nn", "l", "np", "j", "y"], "m": ["tm", "mi", "M", "mr", "perm", "pm", "mod", "dm", "d", "mm", "mp", "g", "i", "r", "c", "ma", "man", "bm", "o", "gm", "h", "ms", "f", "b", "t", "mc", "mn", "v", "e", "nm", "sm", "vm", "s", "lem", "q", "l", "mem", "j", "y", "cm", "mt", "mk"], "p": ["a", "pkg", "self", "pm", "port", "d", "php", "pc", "g", "jp", "i", "r", "pre", "c", "fp", "pb", "par", "power", "o", "gp", "tp", "pa", "h", "ip", "f", "sp", "t", "part", "lp", "pd", "pun", "pid", "v", "P", "e", "ap", "post", "cp", "ping", "dp", "per", "q", "l", "pi", "np", "bp", "pl", "k", "op", "y", "pn", "pers", "pp", "ps", "pg"], "nf": ["nfac", "gnfac", "anfac", "nnum", "gnf", "ncf", "nnfm", "cnrf", " num", " nif", "Nif", "cnf", " nfm", "nnf", "mnfc", "gncf", "mfac", "NF", "nfc", "mfm", "anfc", "nfm", "num", "mum", "nrf", "gnfc", " nfac", "mncf", "nF", " nF", " nrf", "anf", "nif", "Nf", "cnF", "Nrf", "nnfac", "mnf", "mnfac", "cnif", "ancf"], "mf": ["pmx", "pmf", "mfb", " mfb", "pc", " mc", "cmc", "pmc", "mv", "pfa", "pf", "pv", " mv", " mx", "cmz", "mfi", "cmf", "mnc", "gmfi", "mfa", "mnx", " mfi", "gmx", "pfi", "mz", "mc", "nfa", "gmc", "nv", "pmz", "nfb", "mx", " mfa", "mnz", "gmf", "mnf", "pfb", "px", "cmx"], "ans": ["ars", "ANS", "ants", "ians", "ats", "names", "ano", " means", "eds", "acs", "outs", "aus", "ros", "asks", "lines", "lets", "aned", "iban", " Ans", "vals", "ns", "ann", "ums", "rans", "anas", "leans", "offs", "ins", "ks", "ons", "ms", "amps", "ents", "ens", "cas", "uns", "can", "an", "posts", "anks", "iann", "gs", "anes", "cus", "ran", "ams", "aos", "nas", "rates", "arts", "os", "lan", "olds", "vers"]}}
{"code": "mod=pow(10,9)+7\\nn,k=map(int,input().split())\\na=[0 for i in range(100000+1)]\\nans=0\\nfor i in range(k,0,-1):\\n    a[i]=k//i\\n    a[i]=pow(a[i],n,mod)\\n    j=2*i\\n    while j<=k:\\n        a[i]=(a[i]-a[j]+mod)%mod\\n        j += i\\n    ans=(ans+a[i]*i)%mod\\nprint(ans)", "target": "343", "substitutes": {"mod": ["century", "x", "perm", "sign", "modules", "p", "re", "r", "fre", "z", "set", "od", "man", "ident", "ix", "ms", "log", "ind", "sim", "check", "ran", "rand", "sd", "id", "reg", "lex", "cm", "seq", "max", " Mod", "g", "mult", "Mod", "scale", "pre", "m", "mut", "dec", "min", "step", "trans", "grow", "cond", "poly", "crit", "post", "div", "deg", "modified", "mods", "ci", "d", "fun", "complex", "ref", "pad", "mad", "dig", "add", "com", "mag", "may", "MOD", "sub", "put", "san", "prime", "tr", "mun", "comp", "temp", "ac"], "n": ["N", "net", "ni", "ln", "d", "p", "on", "cn", "g", "ai", "r", "sn", "w", "c", "m", "ns", "b", "num", "fn", "t", "nb", "mn", "ot", "na", "v", "nm", "nu", "nn", "l", "pi", "np", "q", " N", "ng", "y"], "k": ["ck", "km", "ki", "kn", "x", "ek", "kr", "kh", "kl", "p", "g", "kar", "ak", "ke", "kid", "r", "c", "m", "z", "dk", "ks", "o", "kw", "ko", "kb", "b", "tk", "num", "t", "mn", "kj", "v", "ok", "ikk", "ku", "q", "kk", "ka", "K", "ik", "sk", "mk"], "a": ["ia", "sta", "ae", "ab", "era", "ta", "p", "ana", "va", "xa", "ai", "aus", "w", "c", "ma", "z", "m", "eas", "ga", "o", "aux", "ea", "la", "aaa", "h", "result", "act", "go", "f", "b", "alpha", "form", "da", "wa", "apa", "out", "na", "an", "e", "all", "A", "ap", "at", "ao", "sa", "s", "app", "au", "oa", "aa", "pi", "am", "eta", "array", "area", "ba", "ca", "ac"], "i": ["ki", "json", "x", "p", "c", "z", "ix", "ri", "v", "exp", "ti", "it", "ini", "\u0438", "q", "phi", "id", "\u00ed", "ia", "ai", "I", "iter", "jp", "m", "status", "qi", "ic", "o", "si", "iu", "key", "ei", "im", "zi", "l", "u", "iat", "ij", "ci", "gi", "ir", "d", "ip", "io", "ii", "ui", "pi", "il", "index", "ik", "mi", "xi", "ios", "di", "yi", "info", "f", "b", "t", "li", "ji", "int", "list", "y", "iri", "hi"], "ans": ["ones", "ars", "ANS", "ians", "ats", "ants", "ana", "names", " means", "ai", "aus", "ros", "us", "mos", "ts", " Ans", "ates", "ns", "ies", "ann", "mas", "rs", "anas", "ks", "ins", "ras", "ons", "ms", "amps", "ls", "ids", "ens", "ations", "ots", "uns", "mn", "an", "jas", "gs", "oss", "anes", "s", "nan", "nas", "aos", "vs", "ias", "cs", "oes", "es", "os", "ds", "ps"], "j": ["json", "x", "uj", "ja", "js", "aj", "p", "d", "ian", "g", "jp", "r", "jc", "oj", "m", "z", "jj", "bi", "ju", "o", "ix", "gm", "pr", "ind", "jl", "fr", "b", "jac", "br", "t", "je", "si", "J", "bj", "li", "ji", "kj", "jas", "v", "out", "obj", "adj", "at", "it", "q", "l", "yes", "dj", "u", "jit", "y", "er", "ij"]}}
{"code": "import sys\\nfrom itertools import product\\n\\ninput = sys.stdin.readline\\n\\n\\ndef main():\\n    N, A, B, C = map(int, input().split())\\n    L = [0] * N\\n    for i in range(N):\\n        L[i] = int(input())\\n\\n    ans = float(\"inf\")\\n    for comb in product(range(4), repeat=N):\\n        mp = -30\\n        a = b = c = 0\\n        for i, j in enumerate(comb):\\n            if j == 0:\\n                continue\\n            elif j == 1:\\n                a += L[i]\\n            elif j == 2:\\n                b += L[i]\\n            elif j == 3:\\n                c += L[i]\\n            mp += 10\\n\\n        if min(a, b, c) == 0:\\n            continue\\n\\n        mp += abs(A - a) + abs(B - b) + abs(C - c)\\n        if mp < ans:\\n            ans = mp\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "256", "substitutes": {"input": ["load", "pattern", "str", "cat", "select", "context", "expression", "insert", "view", "spec", "get", "shift", "inc", "raw", "ref", "read", "prefix", "step", "output", "PUT", "val", "ze", "cmd", "config", "empty", "sel", "parse", "url", "feed", "out", "Input", "int", "cin", "each", "exec", "csv", "first", "gen", "print", " Input", "q", "reader", "sample", "command", "rand", "index", "join", "text", "source"], "N": ["CNN", "M", "n", "NS", "T", "NL", "NC", "GN", "NI", "Ns", "R", "I", "NA", "NM", "NP", "NR", "CN", "NT", "Length", "O", "V", "TN", "NO", "NUM", "S", "J", "Q", "G", "Num", "P", "D", "NB", "Size", "Len", "Ni", "K", "F", "AN", "Z"], "A": ["Al", "An", "IA", "AH", "AU", "AT", "Av", "AL", "AV", "AB", "App", "AE", "RA", "H", "AA", "LA", "As", "AI", "AR", "AS", "This", "CA", "AF", "AM", "SA", "AC", "BA", "Array", "AP"], "B": ["BI", "CB", "RB", "BL", "BS", "VB", "OB", "Bs", "SB", "IB", "AB", "BW", "BG", "Be", "BE", "BC", "BBC", "BU", "BR", "BD", "WB", "BB", "Ber", "USB", "BM", "Blue", "TB", "Bern", "NB", "BO", "Y", "Bi", "DB", "BA", "BY"], "C": ["M", "CH", "CB", "T", "Cu", "CM", "CW", "JC", "R", "CE", "CU", "CS", "YC", "CV", "CT", "CP", "V", "GC", "CCC", "BC", "S", "EC", "CD", "Co", "SC", "CO", "G", "DC", "CR", "CA", "E", "CON", "CC", "Y", "CL", "Z"], "L": ["dL", "M", "NL", "DL", "T", "List", "BL", "PL", "SL", "R", "I", "LC", "TL", "LR", "H", "LU", "LA", "O", "V", "S", "LT", "J", "ML", "G", "P", "LI", "Long", "E", "LG", "D", "Lu", "l", "CL", "LL", "LE", "XL", "LM", "LOC", "Lock", "LS", "F", "Z", "LP"], "i": ["mi", "json", "n", "xi", "x", "ie", "ci", "gi", "p", "di", "series", "ai", "I", "jp", "z", "m", "bi", "jj", "status", "qi", "info", "ic", "ix", "ip", "h", "ind", "f", "t", "io", "si", "li", "ii", "ji", "v", "key", "ti", "list", "iy", "im", "it", "zi", "ini", "ui", "l", "pi", "u", "id", "y", "k", "index", "ij", "ik", "iu"], "ans": ["arms", "ANS", "ants", "ats", "An", " means", "acs", "ai", "aus", "ros", "us", "san", "aned", "ns", "ann", "rans", "man", "rs", "anas", "ks", "offs", "ins", "ums", "ras", "ons", "ms", "amps", "ls", "mean", "ents", "ens", "auto", "anc", "cas", "cons", "mn", "can", "an", "rors", "anks", "Ann", "aps", "s", "nan", "xs", "eps", "ams", "aos", "cs", "arts", "os", "AN", "ps"], "comb": ["con", "Chain", "M", "pair", " combinations", "aug", "multiple", "cont", "column", "loop", "mult", "join", "tw", "complex", "batch", " Comb", " combine", "bo", " combination", "two", "mix", "Com", "product", "count", "multi", "LO", " recomb", "cons", "lo", "conf", "lam", "Comp", "both", "Comb", "each", "com", "jo", " combo", "pl", "cl", "comp", "coord", "JO", "jam", "chain"], "mp": ["tm", "cmp", "pm", "mph", "um", "p", "mm", "ep", "rep", "jp", "txt", "pre", "mom", "ma", "m", "map", "fp", "pb", "sam", "cap", "mb", "ip", "ms", "tp", "sp", "omp", "amp", "asp", "sim", "av", "tap", "aps", "ap", "MP", "emp", "up", "mop", "cp", "eps", "fast", "mx", "com", "rap", "yp", "ump", "pl", "tmp", "np", "q", "op", "mt", "pp", "comp", "ps", "Mp", "pg"], "a": ["aq", "n", "x", "ia", "sta", "ae", "ab", "ta", "aj", "p", "g", "ai", "ak", "r", "ata", "el", "eas", "ga", "o", "ea", "la", "aaa", "f", "t", "apa", "na", "an", "al", "at", "af", "sa", "ao", "s", "app", "oa", "au", "aa", "l", "am", "ar", "u", "y", "ba", "ca", "ac"], "b": ["bis", "n", "sb", "bf", "ab", "d", "p", "db", "g", "ib", "lb", "r", "m", "bi", "wb", "pb", "fb", "rb", "o", "be", "ob", "f", "br", "bc", "gb", "nb", "bb", "v", "e", "erb", "eb", "bl", "cb", "l", "u", "y", "bs", "ba"], "c": ["ce", "lc", "n", "con", "d", "p", "cd", "cn", "g", "ct", "rc", "r", "tc", "m", "z", "o", "cur", "f", "bc", "t", "dc", "uc", "e", "v", "cin", "cache", "cos", "cp", "ch", "cc", "com", "co", "cb", "q", "l", "cu", "u", "cs", "cm", "cr", "cf", "ca", "ac"], "j": ["n", "x", "uj", "ni", "ja", "ie", "err", "str", "js", "aj", "p", "d", "name", "g", "ct", "jp", "job", "r", "jc", "z", "oj", "ns", "jj", "bi", "note", "ju", "ix", "o", "ind", "jl", "f", "sp", "br", "J", "bj", "li", "ji", "kj", "v", "key", "obj", "adj", "ch", "it", "q", "dj", "k", "ij"]}}
{"code": "import math\\nwhile True:\\n    n = int(input())\\n    if n == 0:\\n        break\\n    s = [int(i) for i in input().split()]\\n    m = sum(s)/n\\n    a = [(s[i]-m)**2 for i in range(n)]\\n    v = sum(a)/n\\n    sb = math.sqrt(v)\\n    print(\"{:.5f}\".format(sb))", "target": "683", "substitutes": {"n": ["nr", "N", "x", "nt", "ni", "ln", "d", "p", "ne", "cn", "g", "ct", "sn", "r", "c", "z", "ns", "o", "nl", "h", "f", "b", "num", "nia", "t", "len", "nb", "no", "mn", "na", "int", "nc", "nm", "nan", "nu", "nn", "q", "l", "np", "network", "ng", "j", "k"], "s": ["ogs", "services", "ats", "js", "r", "items", "c", "ts", "ns", "ies", "rs", "ses", "ins", "sl", "h", "ms", "ls", "b", "t", "S", "ss", "its", "strings", "gs", "sa", "ims", "sv", "xs", "ashes", "sts", "vs", "sis", "cs", "y", "os", "ds", "bs"], "i": ["\u00ed", "mi", "ki", "xi", "uri", "cli", "ci", "gi", "di", "ai", "I", "iter", "ami", "bi", "qi", "info", "yi", "ic", "ix", "ip", "ind", "ri", "si", "iu", "ii", "li", "ji", "ei", "ori", "int", "ti", "oi", "it", "im", "zi", "ini", "ui", "phi", "pi", "l", "u", "id", "j", "ij", "iri", "hi"], "m": ["tm", "mi", "km", "M", "mr", "perm", "pm", "um", "dm", "mo", "mm", "mu", "p", "fm", "g", "r", "ma", "em", "man", "bm", "gm", "mb", "ms", "b", "t", "mc", "mac", "mn", "nm", "sm", "l", "am", "mem", "y", "md", "mt", "cm", "mk"], "a": ["ae", "ac", "ab", "ta", "d", "ana", "va", "xa", "ai", "c", "ma", "ata", "eas", "ga", "o", "ea", "la", "aaa", "pa", "b", "t", "alpha", "apa", "av", "an", "A", "al", "at", "sa", "ao", "oa", "aa", "am", "ar", "y", "area", "ba"], "v": ["qv", "x", "vd", "vi", "vp", "tv", "va", "vo", "value", "uv", "vector", "ev", "vr", "V", "f", "b", "vg", "vc", "nv", "lv", "vm", "sv", "conv", "ve", "vs", "ov", "u", "j", "vt", "y"], "sb": ["bis", "db", "ib", "SB", "lb", "sound", "sf", "sth", "bg", "SI", "bd", "pb", "orb", "rb", "sg", "sbm", "kb", "bh", "b", "obb", "gb", "nb", "zb", "bb", "GB", "bj", " SB", "stab", "sa", "ssl", "sv", "bps", "erb", "dB", "eb", "xb", "cb", "sd", "shell", "bs"]}}
{"code": "S = input()\\n\\nheads = int(S[:2])\\ntails = int(S[2:])\\n\\n\\ndef is_month(n):\\n    return n >= 1 and n <= 12\\n\\n\\nif is_month(heads) and (not is_month(tails)):\\n    print(\"MMYY\")\\nelif (not is_month(heads)) and (not is_month(tails)):\\n    print(\"NA\")\\nelif (not is_month(heads)) and is_month(tails):\\n    print(\"YYMM\")\\nelse:\\n    print(\"AMBIGUOUS\")\\n", "target": "17", "substitutes": {"S": ["SN", "STR", "M", "N", "NS", "T", "BS", "SS", "SB", "R", "I", "X", "L", "SER", "SO", "RS", "SI", "CS", "SAN", "ALL", "SM", "H", "W", "V", "SAM", "SOURCE", "B", "Q", "G", "P", "A", "s", "SU", "STDOUT", "D", "OUT", "DS", "ST", "Y", "SA", "F", "String", "C"], "heads": ["sticks", "opens", "olds", "gers", "locks", "tops", "outs", " Heads", "helps", "lights", "hs", "forces", "stocks", "ts", "hawks", "uds", "rs", "blocks", "reads", "aches", "ks", "checks", "balls", "gins", "masters", "hops", "hands", "ends", "its", "storms", "frames", "headed", "headers", "shots", "ups", "powers", "links", "atts", "aunts", "roots", "anches", "loads", "warts", "ads", "cles", "bots", "nuts", "leases"], "tails": ["bis", "angles", "nings", "dies", "bs", "ils", "locks", "outs", "tops", "helps", "fs", "rots", "lets", "forces", "igs", "uds", "reads", "chains", "tail", "ails", "ons", "balls", "rets", "ires", "weights", "bots", "its", "uns", "pillar", "shots", "issues", "links", "verts", "pants", "fits", "vs", "ads", "tailed", "boats", "ills", "pins", "ships", "eddy", "olds"], "n": ["a", "nr", "N", "x", "nt", "ln", "p", "ne", "cn", "g", "i", "long", "r", "sn", "c", "m", "z", "ns", "nl", "h", "f", "b", "num", "fn", "t", "nb", "nor", "mn", "na", "an", "tn", "nc", "nm", "s", "nan", "nu", "nn", "l", "np", "j", "y"]}}
{"code": "n = int(input())\\nmod = 10**9+7\\nans = 1\\nfor i in range(n):\\n    ans *= i+1\\n    ans = ans%mod\\nprint(ans)", "target": "204", "substitutes": {"n": ["a", "N", "x", "nt", "ln", "d", "p", "ne", "cn", "g", "sn", "r", "c", "m", "ns", "nl", "ms", "f", "num", "t", "nia", "len", "nb", "mn", "na", "v", "nc", "nan", "nu", "nw", "nn", "q", "l", "np"], "mod": ["max", "MOD", "ac", "mods", " Mod", "d", "sign", "util", "mp", "sub", "mult", "Mod", "fun", "scale", "m", "set", "module", "od", "dec", "min", "step", "log", "ind", "tag", "form", "dig", "ver", "add", "times", "ran", "div", "base", "id", "mt", "mode", "sum"], "ans": [" orphans", "ars", "ia", "ANS", "sum", "ians", "ants", "ats", "names", " means", "eds", "outs", "ai", "ames", "aus", "ros", "us", "aned", " Ans", "ns", "anus", "ann", "rans", "rs", "mas", "anas", "ks", "offs", "ins", "ix", "ras", "wan", "ons", "ms", "amps", "vers", "ls", "pan", "ents", "ids", "ens", "uns", "add", "an", "posts", "iann", "oss", "aps", "terms", "s", "nan", "ions", "ran", "au", "aos", "nas", "ias", "arts", "os", "es", "lan", "ds", "ones"], "i": ["a", "mi", "ki", "x", "ci", "gi", "p", "ai", "I", "us", "m", "yi", "ic", "ix", "ind", "si", "ii", "li", "v", "ori", "int", "ti", "im", "s", "it", "ini", "zi", "\u0438", "q", "pi", "u", "id", "k", "j", "index", "ij", "ik"]}}
{"code": "from collections import Counter\\nn=int(input())\\nd=Counter(list(map(int,input().split())))\\nm=int(input())\\nt=list(map(int,input().split()))\\nfor i in t:\\n if d[i]==0:print(\"NO\");exit()\\n else:d[i]-=1\\nprint(\"YES\")", "target": "210", "substitutes": {"n": ["nr", "N", "x", "nt", "ne", "cn", "sn", "c", "z", "ns", "o", "nl", "h", "b", "nb", "na", "v", "nc", "nm", "it", "nu", "nw", "nn", "q", "l", "j", "k"], "d": ["fd", "dm", "p", "db", "g", "di", "dn", "dh", "w", "r", "c", "z", "dl", "o", "dt", "df", "f", "dat", "da", "dr", "pd", "de", "v", "e", "s", "dx", "D", "do", "q", "l", "dd", "sd", "did", "j", "data", "dict", "ds", "nd"], "m": ["tm", "mi", "M", "dm", "p", "mm", "mu", "mo", "mp", "g", "ma", "em", "bm", "o", "gm", "ms", "mc", "mn", "v", "nm", "mx", "q", "l", "y", "mt", "cm"], "t": ["tm", "x", "T", "to", "ta", "p", "table", "g", "tw", "td", "w", "tc", "wt", "c", "ts", "set", "status", "type", "te", "o", "tp", "dt", "f", "pt", "tu", "out", "v", "e", "ti", "list", "tt", "tr", "it", "tf", "s", "q", "l", "j", "y", "k"], "i": ["\u00ed", " ii", "ki", "mi", "x", "xi", "uri", "ite", "ci", "gi", "di", "ai", "I", "__", "batch", "bi", "yi", "info", "ic", "ix", "ip", "ind", "f", "si", "iu", "ii", "li", "key", "ori", "v", "ei", "ti", "ini", "zi", "ui", "\u0438", " ti", "l", "pi", "phi", "id", "j", "index", "iri"]}}
{"code": "from collections import deque\\nN, C, K = map(int, input().split())\\ntimes = []\\nfor _ in range(N):\\n    time = int(input())\\n    times.append(time)\\ntimes.sort()\\ntimes = deque(times)\\nans = 0\\nbus_time = times[0] + K\\nhuman = 0\\nwhile times:\\n    if times[0] <= bus_time:\\n        times.popleft()\\n        human += 1\\n        if human == C:\\n            ans += 1\\n            human = 0\\n            if times:\\n               bus_time = times[0] + K\\n    else:\\n        human = 0\\n        ans += 1\\n        bus_time = times[0] + K\\nif human:\\n    print(ans + 1)\\nelse:\\n    print(ans)", "target": "432", "substitutes": {"N": ["CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "L", "NM", "NN", "CN", "NR", "NT", "NH", "O", "V", "Z", "S", "B", "J", "Q", "G", "P", "A", "E", "D", "NB", "Y", "MN", "F", "TN"], "C": ["CNN", "M", "T", "CM", "R", "I", "LC", "L", "c", "CI", "Car", "CS", "Cs", "TC", "H", "CP", "MC", "V", "CT", "O", "KC", "S", "EC", "B", "Co", "CO", "G", "DC", "P", "A", "CA", "E", "D", "CC", "Y", "Count", "F", "Z"], "K": ["M", "CH", "T", "Key", "KN", "KR", "MK", "Max", "X", "I", "L", "KK", "H", "W", "FK", "KER", "CP", "Ch", "KS", "TN", "V", "TH", "KC", "PK", "Kent", "S", "BC", "B", "J", "Q", "SK", "G", "P", "E", "HK", "Han", "Y", "OK", "UK", "k", "F", "KI", "Z", "KE", "KA", "KING"], "times": ["ops", "ats", "modules", "books", "us", "rices", "acts", "ms", "ths", "days", "videos", "shots", "aps", "scripts", "ims", "things", "ctions", "sets", "changes", "history", "months", "stocks", "casts", "runs", "ins", "Times", "maps", "ries", "dates", "its", "results", "works", "s", "places", "loads", "rates", "cs", "types", "etimes", "stats", "powers", "ones", "pages", "users", "keys", "events", "humans", "seconds", "uses", "mods", "ures", "series", "lines", "reports", "blocks", "checks", "ties", "values", "bytes", "cas", "parts", "tes", "ces", "terms", "cases", "thens", "hours", "ps", "ports", "imes", "xes", "actions", "outs", "windows", "ts", "versions", "rs", "ctors", "tests", "amps", "frames", " Times", "steps", "cycles", "caps", "groups", "ests", "qs", "nuts", "forms", "points"], "_": ["x", " j", "__", "___", "j", "ay"], "time": ["before", "instance", "port", "through", "test", "clock", "value", "etime", "long", "shift", "start", "length", "ts", "minute", "info", "type", "tim", "speed", "second", "case", "trans", "t", "transform", "int", "rank", "delay", "inter", "date", "now", "com", "hour", "year", "ime", "timeout", "task", "index", "month", "Time", "version", "TIME"], "ans": ["ars", "n", "apps", "ANS", "ops", "ants", "ats", "ians", "actions", "images", "names", "eds", "outs", "ai", "aus", "ros", "lines", "people", "ns", "ann", "rans", "rs", "mas", "anas", "ks", "reads", "ins", "offs", "ons", "ms", "amps", "annot", "ls", "mean", "ents", "ens", "ations", "news", "parts", "uns", "an", "posts", "anks", "aps", "des", "terms", "s", "nan", "ands", "aos", "cases", "cats", "arts", "cs", "types", "os", "es", "stats", "AN", "ds", "ones", "orts", "users"], "bus_time": ["bus_Time", "Bus_version", "Bus_size", "buslTime", "Bus_Time", "bus2time", "BUS_time", "bus_size", "mount_com", "busltimes", "mount_times", "bus_com", "BUS_times", "mount_speed", "bus2times", "bus_version", "BUS_Time", "BUS2Time", "busltime", "buslsize", "Bus_times", "BUS2times", "bus_speed", "Bus_time", "bus2Time", "mount_time", "Bus_name", "BUS2time", "bus_name", "bus_times"], "human": ["history", "Human", "aut", "json", "known", "client", "humans", "sh", "dirty", "similar", "born", "money", "always", " humans", "norm", "system", "readable", "short", "hard", "common", "complex", "long", "raw", "soft", "san", "people", "length", "m", "zero", "total", "nice", "visible", "annot", "capacity", "physical", "you", "stable", "pretty", "count", "friendly", "natural", "author", "sim", "hidden", "valid", "unknown", "tty", "an", "each", "normal", "easy", "fast", "public", "machine", "com", "person", "serial", "user", "recent", "responsive", "many", "simple", "good", "often", "shown", "stats", "big", "sudo", "reported", "users"]}}
{"code": "import sys\\nread = sys.stdin.read\\nreadlines = sys.stdin.readlines\\ndef main():\\n    s = tuple(input())\\n    r = 0\\n    s_len = len(s)\\n    for i1 in range(s_len):\\n        for i2 in range(i1 + 1, s_len + 1):\\n            if all([c in ('A', 'T', 'C', 'G') for c in s[i1:i2]]):\\n                r = max(r, i2 - i1)\\n    print(r)\\n\\nif __name__ == '__main__':\\n    main()", "target": "331", "substitutes": {"read": ["rid", "find", "hold", "load", "str", "printf", "insert", "write", "run", "get", "sub", "readable", " send", " write", "iter", "take", "replace", "txt", "length", "query", "input", "reads", "send", " find", "ead", " Read", "feed", "fill", "pop", "stream", "each", " READ", "Read", "print", "READ", "reader", "reading", "rand", "data", " pars", "text", " reads", "rd"], "readlines": ["findvalues", "Readlists", " readlists", "Readlines", "findgets", "readls", "readlists", " readgets", "readgets", "findlists", " readline", "Readvalues", "Readls", "readline", " readvalues", "readvalues", "findls", " readls", "findlines", "Readgets", "Readline", "findline"], "s": ["a", "n", "sb", "ys", "su", "ats", "js", "p", "g", "i", "fs", "w", "ts", "m", "rs", "ses", "less", "ins", "h", "ls", "f", "b", "sp", "abs", "t", "ss", "S", "parts", "its", "v", "gs", "sq", "ws", "st", "sv", "xs", "sts", "l", "sis", "sample", "y", "qs", "ds", "ps"], "r": ["nr", "n", "mr", "rr", "err", "ro", "d", "p", "ret", "g", "R", "rc", "i", "re", "w", "m", "rs", "rb", "res", "h", "result", "f", "b", "br", "right", "t", "rel", "dr", "v", "e", "rf", "rank", "rt", "lr", "rect", "q", "l", "u", "k", "er", "range", "j", "attr", "rate", "rd"], "s_len": ["es_lim", "es_len", "s_lim", "es_length", "S_length", "S_den", "s_pos", "S_pos", "s_den", "s_en", " s_en", " s_length", "S_len", "s_length"], "i1": ["pi1", " ione", "i11", "pi001", "ii1", "zi001", "cli1", "zi2", "pi0", "ic1", "ui1", "ii3", " i3", " i0", "ic2", " i11", "pi3", "cli2", "ii2", "iione", "ione", "i3", "i001", "ui11", "ic3", "cli001", "pi2", "pione", "pi11", "zi1", "pi01", "i0", "ui2", "i01", "cli01", "ui0", "zi01"], "i2": ["pi02", "ti1", "ei3", "pi1", " i02", " iTwo", "ii1", " itwo", "ic02", "ii4", "ti02", "ic1", "pitwo", "tiTwo", " i3", "i02", "pi4", "icTwo", "iTwo", "ic2", "iiTwo", "ei2", "pi3", "i4", "ti2", "ii2", "i3", "itwo", "piTwo", "pi2", "ei02", "eitwo", " i4"], "c": ["a", "con", "lc", "ac", "ci", "cont", "p", "unc", "cd", "pc", "g", "xc", "ct", "rc", "arc", "tc", "m", "ic", "kw", "col", "cur", "f", "b", "bc", "vc", "t", "dc", "mc", "can", "cin", "cp", "cc", "abc", "co", "cu", "u", "cs", "k", "cm", "cf", "C", "sc"]}}
{"code": "n = int(input())\\ns = input()\\nt = input()\\nans = s+t\\nfor i in range(n):\\n    if s[i] == t[0]:\\n        if s[i:] == t[:n-i]:\\n            ans = s[:i]+t\\n            break\\nprint(len(ans))", "target": "693", "substitutes": {"n": ["N", "x", "nt", "ln", "d", "p", "names", "ne", "cn", "sn", "w", "c", "m", "z", "ns", "total", "o", "nl", "f", "num", "nia", "len", "nb", "no", "mn", "na", "v", "an", "nc", "un", "nan", "size", "nn", "q", "l", "np", " N", "j", "k"], "s": ["a", " samples", "sb", "x", "ys", "ats", "js", "ains", "p", "fs", "us", "hs", "r", "c", "ts", "ates", "ns", "ies", "rs", "ses", "ess", "ins", " ts", "sl", "ons", "ms", "ers", "ords", "ls", "abs", "b", "sp", "ations", "ss", "S", "si", "als", "an", "v", "gs", "strings", "e", "ws", "aces", "sa", "xs", "sv", "ments", "itions", "ists", "st", "ands", "sts", "cs", "es", "os", "ests", "qs", "ences", "ds", "ps", " parts", "bs"], "t": ["tm", "a", "ut", "ht", "ty", "ter", "T", "nt", "ta", "p", "d", "g", "ct", "tw", "td", "r", "tc", "wt", "c", "ts", "m", "txt", "z", "type", "gt", "te", "o", "tp", "tree", "dt", "f", "b", "pt", "ot", "tes", "tu", "out", "v", "bt", "at", "tt", "tr", "it", "rt", "st", "tf", " T", "q", "l", "kt", "ent", "vt", "tz", "mt"], "ans": ["ars", "ANS", "ants", "ats", "ians", "names", "ames", "aus", "ros", "us", "aned", " Ans", "ts", "ates", "ns", "ann", "rans", "mas", "anas", "ks", "ins", "wan", "ons", "ms", "amps", "angs", "ls", "anned", "pan", "ents", "ens", "ations", "cons", "uns", "can", "an", "gs", "anks", "anes", "xs", "ions", "nas", "aos", "vs", "os", "AN"], "i": [" ii", "\u00ed", "mi", "xi", "x", "ci", "gi", "p", "vi", " j", "di", "ai", "I", "iter", "c", "m", "bi", "yi", "ic", "ix", "o", "iri", "ind", "f", "b", "ri", "si", "li", "ii", "ji", "v", "e", "ori", "ti", "im", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "id", "j", "y", "index", "ij", "iu", "hi"]}}
{"code": "import sys,math,collections,itertools\\ninput = sys.stdin.readline\\n\\nN,K=list(map(int,input().split()))\\nA = list(map(int,input().split()))\\n\\nfor i in range(K):\\n    imo = [0]*(N+1)\\n    flag = 1\\n    for j in range(N):\\n        imo[max(0,j-A[j])] += 1\\n        imo[min(N,j+A[j]+1)] -= 1\\n        if j-A[j]>0 or j+A[j]+1<N:\\n            flag = 0\\n    A = list(itertools.accumulate(imo))[:-1]\\n    if flag == 1:\\n        break\\nprint(*A)\\n", "target": "377", "substitutes": {"input": ["next", "cmp", "load", "pattern", "str", "select", "insert", "active", "get", "reset", "human", "qt", "shift", "inc", "raw", "ref", "read", "enum", "format", "output", "PUT", "cmd", "fn", "config", "source", "feed", "add", "pull", "out", "Input", "list", "int", "cin", "ou", "it", "exec", "csv", "gen", "new", "print", " Input", "q", "command", "sample", "rand", "data", "text", "init", "sum"], "N": ["SN", "n", "M", "NS", "T", "NV", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "CN", "NR", "NT", "NH", "H", "W", "O", "V", "NUM", "S", "B", "J", "Q", "G", "ND", "P", "NPR", "E", "D", "NB", "Y", "Size", "MN", "Ni", "U", "F", "AN", "Z", "C"], "K": ["M", "T", "KN", "KR", "X", "R", "I", "KK", "Kin", "O", "V", "KS", "PK", "NK", "KC", "S", "B", "J", "Q", "SK", "G", "P", "Mask", "D", "Y", "UK", "k", "F", "KI", "Z", "KE", "KA", "KING", "C"], "A": ["a", "GA", "M", "Ax", "All", "Am", "An", "Va", "IA", "AH", "ACE", "AU", "AT", "mA", "I", "xa", "NA", "One", "AL", "AV", "andre", "And", "ma", "What", "Ta", "AB", "AE", "Are", "AA", "LA", "PA", "As", "GS", "V", "AI", "C", "AR", "RAM", "O", "AS", "\u00e4", "S", "EA", "IFA", "B", "To", "ICA", "This", "P", "HA", "Address", "Action", "CA", "At", "MA", "You", "JA", "AF", "D", "Ma", "au", "Go", "AM", "Y", "SA", "AC", "The", "ACT", "AN", "Array", "AP", "Data"], "i": [" ii", "mi", "n", "x", "ia", "ie", "gi", "p", "I", "ic", "ip", "f", "si", "ii", "li", "v", "ti", "im", "it", "q", "l", "y", "k", "ik", "ij"], "imo": ["onto", "iva", "ista", "oice", "uto", "iom", "istor", "alis", "mo", "util", "atu", "ilo", "illet", "iman", "ira", "igi", "itud", "ima", "oman", "aido", "imum", "ato", "imi", "uti", "imet", "mill", "itime", "alia", "oin", "aim", "eme", "Imp", "\u00fc", "iro", "ule", "imate", "atus", "asu", "ismo", "iae", "icol", "ila", "imei", "ente", "imil", "imus", "im", "ippi", "mite", "ahi", "igan", "agi", "au", "imoto", "oto", "ime", "\u00ef", "ifa", "iu", "olson", "umo"], "flag": ["state", "option", "offset", "ret", "store", "weight", "set", "wait", "condition", "status", "FLAG", "save", "lag", "nl", "agged", "enabled", "ground", "log", "flags", "ind", "done", "tag", "limit", "f", "mask", "cmd", "bool", "count", "cond", "len", "no", "level", "valid", "Flag", "ord", " Flag", "bit", "int", "lv", "event", "group", "l", "command", "line", "error", "id", "member", "field", "start"], "j": ["next", "json", "n", "x", "uj", "state", "ja", "str", "ijk", "js", "aj", "name", "g", "jp", "job", "jc", "oj", "z", "m", "jj", "status", "note", "step", "o", "gm", "h", "ind", "jl", "f", "b", "je", "br", "fr", "t", "pt", "J", "bj", "key", "ji", "kj", "v", "exp", "gov", "obj", "adj", "tr", "Ja", "jump", "q", "l", "dj", "y", "k", "ij", "org"], "max": ["MAX", "ge", "mod", "Max", "edge", "sub", "med", "scale", "pad", "mean", "ax", "right", "add", "pop", "rest", "end", "first", "div", "dot", "rand", "range", "index", "upper", "last", "sum"], "min": ["next", "sum", "mod", "lt", "sub", "med", "Min", "pre", "only", "MIN", "mins", "sec", "tail", "mean", "rel", "part", "amin", "lower", "int", "rest", "first", "le", "last", "start"]}}
{"code": "n = int(input())\\ns = input()\\nk = int(input())\\nt = s[k - 1]\\nans = \"\"\\nfor si in s:\\n    if si == t:\\n        ans += si\\n    else:\\n        ans += \"*\"\\nprint(ans)\\n", "target": "652", "substitutes": {"n": ["N", "x", "nt", "d", "p", "i", "sn", "c", "m", "z", "ns", "o", "h", "f", "b", "nb", "mn", "na", "v", "nc", "nm", "nn", "q", "l", "j", "y"], "s": ["a", "sb", "ys", "ats", "js", "p", "g", "i", "w", "c", "ts", "m", "south", "ns", "z", "rs", "ks", "ses", "ins", "o", "sl", "h", "ms", "ls", "b", "sp", "ss", "S", "tes", "strings", "e", "gs", "v", "ws", "sa", "sv", "xs", "ims", "sts", "l", "sis", "q", "cs", "es", "stats", "ds"], "k": ["ck", "km", "ki", "kn", "ek", "kr", "kh", "kl", "p", "ak", "ke", "i", "kid", "c", "m", "z", "ks", "kw", "ko", "h", "b", "num", "kj", "v", "ch", "ku", "q", "kk", "j", "ka", "sk", "ik", "K", "kan", "mk"], "t": ["tm", "ty", "T", "ta", "p", "typ", "i", "td", "tc", "c", "ts", "m", "z", "type", "te", "o", "tp", "dt", "tg", "f", "b", "pt", "ot", "v", "e", "ti", "tt", "it", "st", "kt", "l", "tz", "j", "y"], "ans": ["ars", "ys", "ANS", "unes", "ants", "ats", "ians", "ean", "names", " means", "atan", "eds", "helps", "aus", "ros", "us", "san", "ts", " Ans", "ns", "ann", "rans", "rs", "mas", "ks", "anas", "offs", "ins", "ras", "wan", "ons", "ms", "angs", "amps", "ls", "pan", "annot", "ents", "ens", "anc", "an", "posts", "anks", "plan", "anes", "oss", "sv", "ran", "nas", "aos", "vs", "ads", "cs", "arts", "os", "lan", "ds", "said"], "si": ["mi", "eni", "ki", "xi", "su", "ci", "gi", "ta", "sic", "di", "ai", "i", "sf", " Si", "Si", "us", "sci", "SI", "isi", "bi", " di", "yi", "ski", " psi", "te", " i", "sim", "sil", "ii", "li", "tin", "ei", "ti", "sa", "sie", "iso", " vi", "zi", "ui", "ini", "ity", "sis", "sd", "asi", "index", "fi", "se", "iu", "sum"]}}
{"code": "N, M, *A = map(int, open(0).read().split())\\nls = [0]*10\\nls[1] = 2\\nls[2] = 5\\nls[3] = 5\\nls[4] = 4\\nls[5] = 5\\nls[6] = 6\\nls[7] = 3\\nls[8] = 7\\nls[9] = 6\\nA.sort(reverse=True)\\ncls = {ls[a] for a in A}\\ncls = sorted(list(cls))\\ndp = [-float('inf')]*(N+10)\\ndp[0] = 0\\nfor i in range(1,N+1):\\n  dp[i] = max(dp[i-c]+1 for c in cls)\\nans = 0\\nM = N\\nfor i in range(dp[N]):\\n  for a in A:\\n    c = ls[a]\\n    if dp[M-c]+1 == dp[M]:\\n      ans += a*10**(dp[N]-1-i)\\n      M -= c\\n      break\\nprint(ans)", "target": "712", "substitutes": {"N": ["SN", "CNN", "n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "W", "Node", "O", "V", "NO", "NUM", "S", "B", "J", "Q", "G", "Num", "P", "E", "D", "NB", "Y", "MN", "Ni", "K", "F", "AN", "Z", "C"], "M": ["MO", "T", "CM", "R", "I", "X", "L", "NM", "MX", "RM", "m", "Mi", "H", "MM", "O", "MC", "V", "MD", "S", "MAN", "B", "J", "Q", "G", "P", "MP", "E", "MS", "D", "Ma", "DM", "TM", "AM", "Y", "MN", "MI", "MT", "U", "K", "F", "LM", "Z", "PM", "C"], "A": ["GA", "T", "Ax", "All", "An", "Ar", "AH", "Alpha", "AU", "AT", "X", "I", "Av", "L", "La", "AL", "AST", "AD", "AB", "Cs", "App", "AE", "H", "W", "LA", "AA", "la", "As", "V", "AS", "t", "S", "alpha", "Some", "B", "Li", "G", "P", "AP", "HA", "CA", "At", "E", "Cache", "s", "D", "AF", "AM", "l", "Others", "cs", "SA", "ACT", "AC", "LS", "Array", "C", "ac"], "ls": ["lc", "LS", "ols", "els", "lf", "ys", "tl", "ats", "mods", "lt", "js", "classes", "lib", "ld", "ln", "cells", "outs", "workers", "books", "fs", "les", "lines", "sels", "lets", "ts", "ns", "dl", "rs", "files", "ks", "gt", "less", "sl", "maps", "ms", "amps", "la", "css", "irs", "lis", "lists", "levels", "parts", "its", "plays", "als", "lp", "rl", "gs", "aps", "ws", "cache", "lab", "ists", "s", "terms", "xs", "cp", "bps", "fits", "cases", "l", "lbs", "vs", "ads", "ll", "cs", "fields", "qs", "ds", "ps", "bs", "jobs", "olds"], "cls": ["ClS", "sccs", "ples", "clands", "scis", "clS", "lts", " clts", "plS", " clis", "ln", "Clts", "llcs", "Cls", "scers", "colcs", "plcs", "clers", "clts", "CLes", " cln", " clands", "pls", "llis", " cles", "CLands", "colts", " clS", "CLs", " clers", "llers", "cols", "Clands", "Cles", "scs", "CLts", "cln", "clcs", "coln", "cles", "Clcs", "lcs", "clis", " clcs", "lls"], "a": ["n", "x", "ia", "ae", "ac", "ab", "aff", "ta", "d", "p", "ana", "name", "ach", "va", "ai", "xa", "r", "ma", "m", "z", "aqu", "ata", "ga", "o", "ea", "pa", "la", "fa", "ada", "f", "b", "t", " ca", "alpha", "wa", "apa", "na", "an", "v", "cha", "e", "ap", "at", "s", "ao", "sa", "sha", "au", "oa", "aa", "l", "am", "ar", "ka", "area", "ba", "ca"], "dp": ["pkg", "osp", "dos", "dm", "d", "p", "db", "cd", "mp", "vp", "dial", "jp", "dl", "fp", "pb", "gp", "bsp", "wd", "tp", "dt", "df", "dc", "dep", "pas", "hp", "DP", "wp", "lp", "pd", "dr", "resp", "DC", "cp", "deb", "lip", "bps", "xs", "dq", "pipe", "bp", "dd", "np", "dj", "px", "grad", "pp", "ds", "ps", "adr"], "i": ["mi", "ki", "n", "x", "ia", "xi", "ie", "ci", "gi", "d", "p", "g", "di", "ai", "I", "r", "m", "z", "bi", "yi", "iti", "ic", "o", "ip", "ind", "f", "b", "t", "io", "si", "li", "ii", "v", "e", "int", "ti", "ei", "im", "it", "s", "zi", "ini", "phi", "pi", "il", "l", "u", "j", "y", "k", "ij", "Ni", "ik", "iu"], "c": ["lc", "n", "cation", "x", "ia", "ci", "gc", "d", "p", "unc", "cd", "g", "di", "cn", "ct", "ai", "r", "w", "chain", "ma", "m", "tc", "fc", "ic", "o", "col", "h", "ind", "f", "b", "t", "mc", "dc", "li", "e", "v", "nc", "an", "ti", "s", "it", "cp", "cc", "co", "au", "l", "pi", "u", "cs", "ka", "k", "cm", "ca", "C", "ac"], "ans": ["ANS", "ants", "ats", " means", "eds", "outs", "ros", "aus", "us", " Ans", "ns", "vals", "ann", "rans", "anas", "ks", "Ms", "ins", "offs", "ms", "amps", "ents", "ens", "mn", "uns", "an", "iann", "Ann", "gs", "aps", "anes", "terms", "xs", "MS", "nas", "ands", "aos", "vs", "ads", "cs", "arts", "es", "AN", "ds", "ps"]}}
{"code": "def shuffle(word, length):\\n\tli = list(word)\\n\tad = li[0:length]\\n\tli += ad\\n\tdel li[0:length]\\n\treturn ''.join(li)\\n\\nwhile True:\\n\tstr = input()\\n\tif str == '-':\\n\t\tbreak\\n\tnum = int(input())\\n\t\\n\tfor i in range(num):\\n\t\trn = int(input())\\n\t\tstr = shuffle(str, rn)\\n\t\t\\n\tprint(str)", "target": "715", "substitutes": {"word": ["token", "Word", "space", "name", "short", "wh", "w", "pad", "wic", "man", "prefix", "message", "query", "wd", "term", "tag", "sword", "piece", "part", "gram", "pos", "list", "string", "work", "phrase", "char", "letter", "base", "kt", "line", "item", "words", "doc", "sent", "text", "start"], "length": ["stop", "n", "ty", "phy", "space", "ength", "match", "component", "loop", "head", "long", "span", "position", "chain", "pad", "full", "total", "shape", "power", "Length", "angle", "ENGTH", "term", "level", "duration", "piece", "count", "time", "len", "form", "frequency", "width", "end", "size", "number", "l", "line", "index", "strength", "join", "root", "sequence", "last", "start"], "li": ["mi", "lu", "xi", "lig", "ni", "ci", "ln", "ld", "p", "lt", "ul", "di", "ma", "ml", "ly", " Li", "dl", "yi", "el", "nl", "sl", "la", "ls", "multi", "len", "lis", "si", "lists", "lo", "lie", "lp", "ii", "Li", "LI", "list", "alist", "sol", "zi", "ui", "avi", "bl", "l", "ll", "le", "pi", "pl", "lic", "link", "il", "ili"], "ad": ["a", "ld", "d", "ady", "ai", "aid", "td", "AD", "pad", "od", "dl", "el", "ic", "admin", "lay", "ada", "alpha", "adv", "ud", "ade", "add", "an", "aud", "att", "adi", "al", "adj", "ard", "ell", "au", "hd", "addr", "dd", "ads", "lad", "Ad", "id", "md", "ag", "adr", "nd", "ac"], "str": ["STR", "ocr", "stri", "n", "sta", "err", "Str", "cont", "name", "ret", "arr", "r", "txt", "status", "wr", "hex", "dec", "inst", "sec", "res", "cur", "elt", "result", "enc", "fr", "piece", "sp", "dat", "vol", "stable", "form", "sim", "inner", "dr", "pos", "out", "recomm", "exp", "int", "list", "string", "obj", "msg", "gr", "st", "s", "tr", "sol", "char", "req", "print", "oct", "conv", "div", "usr", "attr", "comp", "cr", "seq", "text"], "num": ["nr", "n", "alph", "um", "mod", "nom", "mu", "mult", "m", "sam", "umi", "total", "nam", "enum", "multi", "NUM", "count", "len", "umer", "nb", "sim", "mn", "no", "ord", "ver", "Num", "int", "cal", "nm", "un", "eng", "nu", "dim", "number", "mon", "np", "index", "sum"], "i": ["n", "x", "um", "gi", "p", "g", "I", "r", "c", "m", "z", "h", "ind", "f", "b", "e", "s", "ch", "it", "q", "l", "id", "k", "y", "j"], "rn": ["rid", "nr", "n", "mr", "sr", "kr", "rr", "ni", "ln", "cn", "dn", "rc", "r", "hn", "NR", "irm", "rh", "anne", "rb", "rm", "nl", "ryu", "cv", "rar", "RN", "rl", "mn", "rin", "nc", "rf", "nm", "rt", "nu", "nn", "rpm", "pn", "adr", "nd", "rd"]}}
{"code": "N,K=map(int,input().split())\\nA=N%K\\nprint(min(A,abs(A-K)))", "target": "63", "substitutes": {"N": ["M", "n", "NS", "T", "NC", "Ns", "R", "I", "X", "L", "NA", "NN", "NR", "NT", "H", "V", "S", "B", "J", "Q", "G", "P", "Num", "E", "D", "NB", "Y", "Ni", "F", "TN", "NG", "C"], "K": ["M", "T", "KN", "KY", "KR", "MK", "AK", "X", "R", "I", "L", "KK", "DK", "H", "W", "O", "V", "KS", "KC", "PK", "S", "B", "J", "Q", "SK", "G", "IK", "P", "HK", "VK", "D", "Y", "OK", "UK", "k", "U", "F", "AC", "KI", "Z", "KE", "KA", "KING", "C"], "A": ["a", "GA", "M", "All", "API", "An", "IA", "AU", "AT", "X", "R", "I", "L", "NA", "mA", "AV", "Area", "AB", "AE", "H", "AA", "LA", "As", "V", "B", "G", "P", "HA", "AP", "CA", "At", "MA", "JA", "AF", "AM", "SA", "AC", "BA", "AN", "Array", "Z", "ACT", "C"]}}
{"code": "n = int(input())\\ndiv = 0\\nfor i in str(n):\\n    num = int(i)\\n    div += num\\n\\nif div % 9 == 0:\\n    print(\"Yes\")\\nelse:\\n    print('No')", "target": "304", "substitutes": {"n": ["nr", "N", "x", "net", "nt", "gn", "ln", "d", "p", "ne", "cn", "g", "sn", "c", "m", "z", "ns", "o", "f", "b", "t", "len", "nb", "out", "na", "v", "s", "nan", "nu", "nn", "number", "l", "np", "ng", "j", "y"], "div": ["con", "max", "str", "mod", "d", "p", "dir", "sub", "comm", "mult", "di", "sup", "Div", "span", "zero", "pre", "scale", "diff", "dev", "total", "dec", "dom", "step", "pro", "ind", "result", "br", "dig", "ver", "conf", "add", "exp", "final", "multipl", "gr", "division", "tr", "debug", "ch", "group", "dim", "number", "j", "big", "DIV", "sum"], "i": ["iii", "\u00ed", "mi", "xi", "x", "ia", "gu", "gi", "p", "di", "I", "c", "m", "bi", "yi", "qi", "ic", "o", "ix", "ind", "f", "b", "ri", "t", "io", "si", "ii", "li", "ei", "e", "v", "ti", "oi", "int", "im", "ini", "ed", "l", "pi", "u", "j", "k"], "num": ["max", "um", "mod", "nom", "p", "name", "test", "value", "zero", "mom", "ma", "m", "unit", "dev", "digit", "nam", "col", "val", "f", "multi", "NUM", "alpha", "nb", "no", "sim", "Num", "cal", "int", "nm", "om", "conv", "nu", "dim", "number", "mon", "np", "mem", "index", "draw", "sum"]}}
{"code": "n = int(input())\\ns = [input() for _ in range(n)]\\ndic = {\"AC\": 0, \"WA\": 0, \"TLE\": 0, \"RE\":0}\\n\\nfor v in s:\\n  dic[v] += 1\\n\\nprint(\"AC x {}\".format(dic[\"AC\"]))\\nprint(\"WA x {}\".format(dic[\"WA\"]))\\nprint(\"TLE x {}\".format(dic[\"TLE\"]))\\nprint(\"RE x {}\".format(dic[\"RE\"]))\\n", "target": "531", "substitutes": {"n": ["nr", "N", "x", "nt", "d", "p", "ne", "i", "sn", "r", "c", "m", "ns", "nl", "f", "b", "num", "t", "len", "nb", "no", "mn", "na", "nc", "nan", "nu", "nn", "q", "l", "np", "k", "j"], "s": ["a", "ats", "js", "d", "p", "g", "i", "fs", "w", "c", "ts", "set", "ns", "rs", "ses", "ins", "ms", "ers", "ls", "abs", "b", "f", "ids", "t", "S", "ss", "args", "tes", "gs", "ans", "ws", "ims", "xs", "sv", "csv", "qs", "ds", "ps"], "_": ["ex", " j", "__", " int", " l", "all", "un", " __", "l"], "dic": ["daics", "dicc", "dicer", "Dics", "hdic", " dIC", "daIC", "defIC", "DIC", "deficer", "hdico", "doicc", "dics", "hdric", "nic", "deficc", "defgc", " dics", "daic", " dgc", "hdicer", "nIC", " dric", "defic", "dIC", "nics", "indicc", "Dict", "dgc", "daric", "Dgc", " doc", "defico", "Dic", " dicc", "Doc", "daoc", "hdicc", "doics", "defics", "indics", "dico", "doic", " dict", "indIC", "dric", "daicer", " dico", "doc", " dicer", "dict", "nict", "hdics", "doIC", "indic"], "v": ["qv", "x", "vv", "d", "p", "ach", "vo", "g", "i", "w", "r", "uv", "c", "m", "z", "vis", "ev", "ix", "o", "h", "val", "vr", "V", "cv", "f", "b", "vc", "t", "iv", "ver", "nv", "lv", "sv", " vi", "ve", "q", "l", "var", "u", "item", "ov", "k", "j", "index"]}}
{"code": "N,K=map(int,input().split())\\nt=[list(map(int,input().split())) for _ in range(N)]\\nt.sort(key=lambda x:-x[1])\\nans=0\\ndp=set()\\np=[]\\nfor i in range(K):\\n  ans+=t[i][1]\\n  if t[i][0] in dp:\\n    p.append(t[i][1])\\n  dp.add(t[i][0])\\nans+=len(dp)**2\\nwer=ans\\nwhile K<N and p:\\n  if t[K][0] not in dp:\\n    wer=wer+t[K][1]-p.pop()-len(dp)**2+(len(dp)+1)**2\\n    ans=max(ans,wer)\\n    dp.add(t[K][0])\\n  K+=1\\nprint(ans)", "target": "466", "substitutes": {"N": ["CNN", "M", "n", "NS", "T", "KN", "GN", "Ns", "I", "NA", "L", "NM", "NN", "NP", "NR", "NT", "NH", "W", "H", "NF", "V", "TN", "NO", "NK", "S", "PN", "J", "Q", "ND", "P", "Num", "A", "D", "NB", "Y", "MN", "Len", "Ni", "F", "AN", "Z", "NG", "C"], "K": ["KO", "Ak", "M", "T", "KN", "Key", "KR", "MK", "AK", "Max", "KEY", "R", "I", "Context", "X", "KK", "DK", "Kin", "W", "H", "FK", "CP", "V", "KS", "TH", "O", "TN", "KC", "PK", "Sk", "NK", "Kent", "S", "B", "J", "SK", "Q", "G", "IK", "This", "Scott", "P", "Ka", "A", "HK", "Han", "VK", "D", "Y", "Ku", "OK", "UK", "Count", "k", "U", "AC", "F", "KI", "AN", "Z", "KE", "KA", "KING", "C"], "t": ["tm", "ht", "n", "ty", "x", "T", "to", "nt", "ta", "d", "table", "lt", "g", "test", "ct", "tw", "qt", "td", "this", "template", "tc", "wt", "c", "ts", "m", "txt", "z", "info", "tools", "te", "ties", "tp", "tree", "h", "dt", "f", "b", "config", "tab", "pt", "ot", "tu", "tap", "out", "att", "v", "tn", "all", "bt", "obj", "at", "tt", "tr", "it", "tf", "rt", "st", "title", "q", "l", "tmp", "yt", "ent", "mat", "j", "vt", "y", "trace"], "_": ["x", "Key", " the", " j", "X", "I", " name", " X", "ix", "W", "val", " x", "key", "P", "Index", " __", "Y", "j", "U", "ik", " key"], "ans": ["ars", "n", "ANS", "ants", "ats", "ians", "ean", "An", "en", "anon", "names", "outs", "Ns", "ai", "aus", "ros", "lines", "us", " Ans", "ns", "vals", "ann", "rans", "rs", "anas", "ks", "offs", "ins", "nl", "leans", "wan", "ons", "ms", "amps", "angs", "ls", "ers", "ents", "ens", "anc", "mn", "uns", "ings", "can", "an", "anks", "aps", "anes", "oos", "oss", "s", "nan", "xs", "nas", "ams", "au", "aos", "oa", "yes", "vs", "ads", "arts", "os", "es", "lan", "AN", "ds", "ones"], "dp": ["pkg", "dm", "d", "db", "point", "pard", "vp", "di", "jp", "dh", "dl", "fp", "pb", "wd", "tp", "pa", "dt", "df", "sp", "dc", "dep", "hp", "pt", "da", "DP", "wp", "dr", "pd", "lp", "P", "delay", "deb", "cp", "csv", "dq", "dim", "pipe", "bp", "np", "dd", "pat", "data", "pn", "pp", "ds", "ps"], "p": ["n", "pkg", "d", "mp", "pc", "vp", "g", "jp", "r", "c", "m", "fp", "pb", "tp", "pa", "ip", "h", "pr", "f", "sp", "num", "pt", "wp", "lp", "pd", "pos", "P", "ap", "cp", "s", "it", "q", "pl", "pi", "np", "bp", "pat", "l", "k", "pers", " P", "pn", "j", "pp", "ps"], "i": ["mi", "n", "xi", "x", "gi", " j", "di", "ai", "I", "iter", "c", "m", "bi", "qi", "ic", "ix", "ip", "iri", "ind", "f", "ri", "io", "si", "li", "key", "ii", "ori", "v", "ji", "ti", "oi", "im", "it", "zi", "ini", "ui", "\u0438", "q", "phi", "pi", "l", "id", "k", "j", "y", "ij", "ik", "index", "iu"], "wer": ["answer", "nr", "mr", "ser", "ter", "WER", "ifer", "aren", "pair", "ln", "yer", "onder", "arr", "lear", "wy", "iter", "pen", "dar", "r", "irm", "phal", "wr", "iw", "outer", "war", "wan", "cher", "vet", "ner", "annot", "rer", "vre", "vr", "ew", "oe", "nor", "ver", "dr", "ear", "iper", "ier", "ler", "aler", "bet", "ker", "der", "usr", "ever", "uan", "ar", "there", "er", "ele", "aver", "ket", "adr", "wen", "quer"]}}
{"code": "from math import gcd\\nfrom functools import reduce\\ndef lcm_base(x, y):\\n    return (x * y) // gcd(x, y)\\ndef lcm(*numbers):\\n    return reduce(lcm_base, numbers, 1)\\ndef evencount(n):\\n  cnt=0\\n  while n%2==0:\\n    cnt+=1\\n    n//=2\\n  return cnt\\nn,m=map(int,input().split())\\na=list(map(int,input().split()))\\nfor i in range(n):\\n  a[i]//=2\\nif all(evencount(i) == evencount(a[0]) for i in a):\\n  d=lcm(*a)\\n  print((m+d)//2//d)\\nelse:print(0)", "target": "385", "substitutes": {"x": ["wx", "xi", "ex", "xe", "p", "ux", "g", "xc", "X", "xa", "rx", "r", "w", "c", "ox", "z", "xxxx", "xt", "ix", "tx", "ax", "f", "xd", "t", "v", "fx", " xx", "xy", "xs", "dx", "xx", "l", "yx", "px", "xp", "xf"], "y": ["ty", "ys", "yd", "yer", "ym", "g", "cy", "oy", "yz", "yo", "c", "z", "ies", "ny", "yi", "vy", "o", "ye", "py", "yr", "ery", "hy", "b", "t", "yl", "uy", "v", "ey", "gy", "iy", "xy", "ch", "yt", "Y", "yy", "fy", "xx", "hot", "j", "ay", "ry"], "n": ["N", "net", "nt", "ln", "p", "names", "name", "ne", "cn", "g", "long", "sn", "w", "c", "r", "z", "ns", "nl", "h", "b", "num", "count", "t", "nia", "len", "nb", "no", "nor", "mn", "na", "v", "tn", "nc", "all", "nm", "nan", "nu", "size", "nn", "l", "np", " N", "j", "k"], "cnt": ["dcount", "conct", "cnd", "CNT", "dnd", "Cpt", "account", "cNT", "cct", "acct", "ccount", "kct", "knt", "dct", "acNT", "Crt", "Ccount", "acnt", " cNT", " ccount", "krt", "connd", "crt", " cct", " crt", "Cct", "cpt", "concount", "Cnt", " cpt", "connt", " cnd", "dnt", "kpt"], "m": ["mi", "M", "pm", "dm", "p", "mm", "mp", "g", "r", "c", "ma", "bm", "o", "gm", "h", "ms", "f", "b", "num", "t", "mc", "mn", "v", "l", "am", "mem", "j", "cm", "mt"], "a": ["sta", "ae", "to", "ac", "ab", "ta", "p", "ana", "va", "ai", "xa", "w", "c", "ma", "ata", "eas", "ga", "o", "ea", "la", "aaa", "pa", "abs", "b", "t", "alpha", "da", "apa", "na", "an", "att", "e", "all", "A", "at", "sa", "s", "another", "oa", "au", "aos", "aa", "am", "area", "ba", "ca", "ao"], "i": ["mi", "ki", "xi", "uri", "ni", "ci", "gi", "p", "di", "ai", "I", "c", "z", "bi", "ami", "yi", "qi", "ic", "ix", "ip", "iri", "ind", "f", "b", "ri", "si", "li", "ii", "ji", "v", "ei", "ti", "oi", "im", "it", "s", "ini", "zi", "ui", "phi", "pi", "l", "u", "j", "k", "ij", "ik", "iu", "hi"], "d": ["fd", "dm", "p", "db", "ld", "di", "dn", "td", "dh", "r", "w", "c", "z", "diff", "dev", "dec", "o", "result", "dt", "df", "f", "b", "t", "da", "dig", "dist", "dr", "pd", "de", "e", "v", "des", "s", "dp", "dx", "D", "do", "dis", "l", "dd", "du", "sd", "dra", "dj", "u", "j", "md", "data", "ds", "nd"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 5 + 10)\\ndef input(): return sys.stdin.readline().strip()\\n\\ndef resolve():\\n    \\n    n=int(input())\\n    L=[list(map(int,input().split())) for i in range(n)]\\n    \\n    L=sorted(L, key=lambda x: x[0])\\n    print(L[-1][0]+L[-1][1])\\n\\n\\n    \\n    \\nresolve()", "target": "266", "substitutes": {"n": ["nr", "N", "net", "x", "nt", "ln", "d", "p", "en", "ne", "sn", "r", "m", "z", "ns", "o", "nl", "num", "t", "len", "nb", "no", "mn", "na", "v", "nc", "nu", "size", "nn", "number", "l", "np", "ll", "q", "k", "j"], "L": ["LB", "M", "N", "NL", "DL", "List", "T", "PL", "BL", "HL", "SL", "X", "I", "LC", "R", "TL", "LR", "LA", "LU", "LD", "V", "O", "S", "FL", "LT", "B", "J", "ML", "G", "Li", "LI", "P", "SSL", "Long", "RL", "LV", "VL", "LG", "Lu", "D", "QL", "CL", "l", "LL", "LE", "XL", "LM", "F", "LS", "LP", "EL"], "i": [" I", " ii", "x", "p", "name", "I", "iter", "__", "r", "z", "ix", "ip", "io", "key", " c", "ti", "iy", "im", "it", "q", "l", "id", "j", "y", "k"]}}
{"code": "n,m = map(int,input().split())\\nif n == 2 or m == 2:\\n  print(0)\\nelif n == 1:\\n  if m == 1:\\n    print(1)\\n  else:\\n    print(m-2)\\nelif m == 1:\\n  if n == 1:\\n    print(1)\\n  else:\\n    print(n-2)\\nelse:\\n  print((n-2)*(m-2))", "target": "238", "substitutes": {"n": ["a", "N", "x", "net", "nt", "gn", "d", "p", "on", "ln", "en", "name", "ne", "cn", "g", "dn", "i", "sn", "r", "c", "z", "ns", "note", "o", "h", "f", "b", "num", "fn", "t", "no", "nor", "nb", "mn", "na", "v", "an", "nc", "nm", "s", "nan", "nw", "nn", "l", "np", "j", "y"], "m": ["tm", "a", "mi", "M", "perm", "pm", "me", "dm", "d", "p", "mm", "mo", "mp", "g", "i", "r", "c", "ma", "z", "em", "man", "bm", "o", "gm", "h", "ms", "f", "b", "num", "mis", "t", "mc", "arm", "mac", "mn", "v", "an", "e", "sm", "vm", "s", "mx", "wm", "l", "mun", "am", "mem", "u", "j", "k", "y", "md", "cm", "mt", "mk"]}}
{"code": "def main():\\n    a, b, m = map(int, input().split())\\n    A = list(map(int, input().split()))\\n    B = list(map(int, input().split()))\\n    ans = min(A) + min(B)\\n    for _ in range(m):\\n        x, y, c = map(int, input().split())\\n        ans = min(ans, A[x - 1] + B[y - 1] - c)\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    main()", "target": "136", "substitutes": {"a": ["ab", "ta", "d", "p", "g", "r", "w", "o", "ax", "t", "art", "an", "e", "v", "al", "at", "sa", "au", "aa", "l", "am", "ar", "ba", "ca"], "b": ["n", "ab", "d", "p", "beta", "g", "i", "r", "bi", "o", "h", "br", "bc", "t", "bb", "v", "e", "l", "j", "k", "bs", "ba"], "m": ["tm", "mi", "km", "M", "n", "dm", "d", "p", "mm", "g", "i", "r", "man", "bm", "gm", "h", "ms", "f", "num", "mis", "t", "mc", "mn", "v", "sm", "l", "mon", "k", "j", "month", "cm"], "A": ["GA", "M", "Al", "An", "IA", "Ar", "AU", "AT", "X", "Av", "ACC", "L", "AL", "AV", "AB", "App", "AE", "Auth", "RA", "LA", "AA", "As", "AI", "AR", "AS", "This", "HA", "Ant", "CA", "At", "JA", "AF", "AM", "SA", "AC", "The", "AN", "BA", "AP"], "B": ["Other", "LB", "BI", "M", "CB", "MB", "RB", "VB", "BL", "BS", "OB", "Bs", "SB", "Big", "Two", "IB", "BER", "BT", "BP", "BE", "Bar", "BC", "BR", "GB", "WB", "PB", "BB", "Bu", "Blue", "TB", "Bern", "NB", "EB", "BO", "Y", "DB", "Bytes", "BA", "C"], "ans": ["ANS", "ants", "ats", "beans", "ean", "ines", " means", "acs", "aus", "ros", "lines", "aned", "mos", "ates", "ns", "vals", "ann", "rans", "mas", "anas", "ks", "offs", "ins", "ras", "vers", "ons", "ms", "amps", "pan", "ents", "ens", "ations", "anc", "cas", "cons", "mn", "uns", "ados", "an", "iann", "anes", "aps", "oss", "s", "ions", "nas", "ran", "aos", "arts", "lan", "AN", "olds"], "_": [" which", " e", " t", " j", " pre", " g", " __", " each", "___", " co", " un", " sub"], "x": ["wx", "n", "xi", "ex", "on", "ux", "xc", "xa", "X", "i", "rx", "w", "ox", "z", "xt", "ix", "h", "tx", "ax", "v", "fx", "row", "at", "xy", "xs", "dx", "l", "xx", "yx", "j", "px", "xp"], "y": ["sy", "n", "any", "ty", "ys", "ym", "i", "cy", "z", "ies", "my", "ny", "vy", "by", "o", "py", "ic", "h", "yr", "sky", "axy", "t", "yl", "ot", "v", "yn", "ey", "gy", "iy", "xy", "fy", "Y", "yy", "yt", "j", "hot", "ay", "ry"], "c": ["ec", "content", "ce", "lc", "n", "con", "ci", "gc", "d", "cd", "g", "ct", "rc", "cy", "i", "tc", "z", "ic", "t", "dc", "v", "e", "cin", "cache", "cos", "cp", "ch", "cc", "abc", "co", "cs", "cm", "cr", "cf", "C", "ac"]}}
{"code": "import math\\n\\n\\n# def calc(n, c, d):\\n#     return n-(math.floor(n / c) +\\n#               math.floor(n / d) - math.floor(n / (c * d / math.gcd(c, d))))\\ndef calc(n, c, d):\\n    return n-(n // c +\\n              n // d - n // (c * d // math.gcd(c, d)))\\n\\n\\ndef main():\\n    a, b, c, d = map(int, input().split())\\n\\n    print(calc(b, c, d)-calc(a-1, c, d))\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "31", "substitutes": {}}
{"code": "import sys\\nfrom operator import itemgetter\\ndef main():\\n\tinputs = sys.stdin.readline\\n\tN, Q= map(int,inputs().split())\\n\tE = [None]*2*N\\n\tfor n in range(N):\\n\t\ta,b,c = map(int,inputs().split())\\n\t\tE[2*n] = (a - c, 1, c)\\n\t\tE[2*n + 1] = (b - c, -1, c)\\n\tE.sort(key=itemgetter(0))\\n\ttuple(tuple(E))\\n\tmini = 1000000001\\n\tkouho = {1000000001}\\n\tmy_add = kouho.add\\n\tmy_discard = kouho.discard\\n\tq = 0\\n\td = int(inputs())\\n\tflag = False\\n\tcont = False\\n\tfor e in E:\\n\t\twhile e[0] > d:\\n\t\t\tif cont == True:\\n\t\t\t\tprint(mini-(mini//1000000001)*1000000002)\\n\t\t\telse:\\n\t\t\t\tmini = min(kouho)\\n\t\t\t\tprint(mini-(mini//1000000001)*1000000002)\\n\t\t\tcont = True\\n\t\t\tq = q + 1\\n\t\t\tif q > Q-1:\\n\t\t\t\tflag = True\\n\t\t\t\tbreak\\n\t\t\td = int(inputs())\\n\t\tif flag == True:\\n\t\t\tbreak\\n\t\tif e[1] == 1:\\n\t\t\tmy_add(e[2])\\n\t\t\tif mini > e[2]:\\n\t\t\t\tmini = e[2]\\n\t\telif e[1] == -1:\\n\t\t\tmy_discard(e[2])\\n\t\t\tif mini == e[2]:\\n\t\t\t\tcont = False\\n\tfor t in [None]*(Q-q):\\n\t\tprint(-1)\\nmain()", "target": "338", "substitutes": {"inputs": ["selectins", "selectls", "feedis", "outputqs", " inputports", "interences", "inputis", "ints", "inputqs", "feedn", "feederences", "inputes", "Inputes", "Inputins", "selectes", "execerences", "butports", "bututs", "inputins", "opensis", " inputss", "intensions", "outputd", "patternd", "execs", " inputsports", "outputerences", "feedesses", "intesses", "outputesses", "patternqs", "Inputs", "patterns", " inputsuts", "buts", "outputes", "outputs", "inputports", "inputesses", "Inputqs", "openss", "inputls", "feeds", "selects", "execn", "inputn", "inpututs", "Inputerences", "outputins", "execis", "opensn", "inputerences", "inputensions", "inputd", "Inputd", "openserences", " inpututs", "outputensions", "Inputls", "patternerences", "outputls", "feedensions"], "N": ["SN", "M", "NS", "T", "NC", "NI", "Ns", "X", "I", "R", "L", "NM", "CN", "NR", "NT", "NH", "O", "V", "NO", "Z", "S", "B", "J", "G", "ND", "P", "NPR", "A", "D", "NB", "Y", "Ni", "K", "F", "AN", "TN", "C"], "Q": ["Que", "M", "NS", "T", "MQ", "X", "I", "R", "L", "NM", "W", "H", "Query", "O", "V", "UE", "S", "B", "J", "G", "P", "Num", "qq", "D", "NB", "Y", "Qu", "IQ", "U", "K", "F", "Z", "QU", "C"], "E": ["Fe", "Ve", "Es", "EEEE", "M", "T", "EEE", "ERE", "EN", "ES", "Gene", "X", "I", "PE", "DE", "Element", "CE", "L", "R", "ENE", "IE", "AE", "FE", "GE", "EMA", "AME", "O", "APE", "EU", "EE", "UE", "NOTE", "V", "ER", "Entry", "S", "EF", "REE", "NE", "EC", "B", "ee", "G", "ZE", "P", "A", "ET", "You", "OE", "ED", "D", "EB", "Y", "LE", "TE", "Ge", "EO", "EA", "EL", "C"], "n": ["x", "nt", "p", "name", "g", "i", "r", "w", "z", "m", "ns", "o", "f", "num", "fn", "nb", "nor", "mn", "na", "an", "yn", "v", "nc", "nm", "s", "nan", "nu", "nn", "number", "np", "l", "u", "k", "j", "y", "nd"], "a": ["x", "ia", "ae", "ab", "aj", "p", "i", "r", "ma", "m", "ami", "ea", "la", "aaa", "h", "f", "apa", "an", "A", "al", "ap", "at", "sa", "au", "aa", "l", "am", "ar", "u", "j", "ba", "ca", "ac"], "b": ["ab", "p", "g", "ib", "i", "r", "z", "bi", "fb", "rb", "h", "be", "f", "bc", "nb", "B", "bb", "v", "eb", "cb", "l", "u", "k", "y", "j", "bs", "ba"], "c": ["ec", "ce", "lc", "con", "ci", "gc", "g", "ct", "rc", "i", "arc", "r", "tc", "z", "m", "fc", "ic", "col", "h", "f", "mc", "dc", "can", "v", "cin", "cos", "s", "cp", "cc", "co", "cu", "cb", "l", "u", "cs", "k", "y", "cm", "cf", "ca", "C", "ac"], "mini": ["mid", "mu", "mm", "mp", "i", "re", "z", "mass", "module", "total", "mobile", "format", "ms", "mis", "fin", "part", "cin", "iso", "spin", "serial", "mem", "big", "init", "frac", "fine", "me", "money", "rev", "iter", "blue", "pre", "m", "trade", "qi", "min", "shr", "mc", "mn", "margin", "debug", "virt", "mie", "MI", "magic", "next", "summary", "meta", "dm", "beta", "minute", "nice", "memory", "ii", "size", "dim", "pi", "sample", "doc", "Mini", "md", "micro", "mi", "reset", "di", "ami", "info", "prime", "mb", "li", "delay", "j", "temp", "sum"], "kouho": ["koupo", "Kouphi", "kourphi", "kouhat", "koudha", " kutho", "kaoho", "kourph", "koudrh", "kaoha", "koulhat", "Kouraha", "koudfo", "kourho", "kuho", "kourh", "kovho", "Kourphi", " kouhat", "Kouho", "koudaha", "koulpo", "kouphi", "kokurh", "Kouaha", "Kouph", "kuph", "kovfo", "kaorh", "kokourh", "kourfo", "kouraha", "kuaha", "kourhat", "kokouha", " kutpo", "koudph", "kutpo", "kurh", "kufo", "kuthat", "koudho", "Kourho", "koufo", "koulho", "kokuho", "kovpo", "kovphi", "kuha", " koupo", "kaoph", "kokuha", "Koufo", " kuthat", "Kourpo", "kouha", "koudpo", "kouph", "kokuph", "Kourph", "Kourfo", "kourpo", "kouaha", "kokouph", "Koupo", "kokouho", "koudphi", "kutho"], "my_add": ["me_pad", "myAppadd", "me_sub", "my_adder", "myOpadder", "my_pad", "member_add", "myobjadd", "member_update", "my_sub", "myAppsub", "myOpadd", "my_ad", "member_ad", "me_adder", "myAppadder", "myobjupdate", "myOpsub", "myOppad", "myApppad", "me_add", "myobjad", "my_update"], "my_discard": ["my2discards", "my2discment", "my_discart", "my_disards", "my_Discarded", "my2decarded", "my_iscard", "my_Discord", "my2decment", "my_decards", "my_discord", "my_Discart", "my_Discment", "my_iscart", "my_iscards", "my_disard", "my_Discards", "my_discarded", "my_discment", "my_decarded", "my2decard", "my_Discard", "my_iscord", "my_discards", "my_disart", "my2decards", "my_decard", "my_decment", "my_disord", "my2discard", "my2discarded"], "q": ["comment", "x", "p", "ue", "g", "qu", "iq", "qt", "quant", "quality", "i", "requ", "w", "r", "m", "z", "qi", "query", "h", "f", "count", "check", "v", "sq", "qq", "charge", "msg", "qa", "it", "qual", "end", "ch", "print", "dq", "ime", "u", "j", "k", "y", "qs"], "d": ["fd", "x", "dm", "p", "db", "g", "di", "i", "dh", "r", "w", "m", "z", "dt", "done", "dat", "da", "dr", "pd", "v", "de", "ad", "s", "date", "debug", "D", "ed", "do", "l", "dd", "sd", "id", "j", "md", "data", "ds", "ond", "nd", "start"], "flag": ["con", "critical", "state", "ld", "lead", "gc", "contin", "code", "car", "store", "set", "fc", "condition", "status", "type", "lag", "nl", "const", "bug", "flags", "ind", "tag", "f", "fin", "bool", "count", "cond", "Flag", "bit", "conf", "card", "int", "switch", "st", "debug", "compl", "char", "group", "co", "lock", "member", "ctl", "sync"], "cont": ["content", "aut", "con", "comment", "critical", "nt", "gc", "match", "contin", "ct", "code", "car", "cell", "contact", "current", "control", "status", "xt", "ont", "const", "cur", "ind", "CONT", "ctr", "config", "count", "close", "cond", "cons", "cut", "add", "check", "out", "cart", "int", "nc", "Cont", "st", "compl", "com", "co", "desc", "l", "cm", "sum"], "e": ["ec", "x", "ae", "me", "ite", "ie", "xe", "p", "edge", "en", "ase", "ep", "ue", "ne", "g", "i", "r", "ate", "m", "pe", "el", "note", "te", "ye", "ea", "o", "h", "be", "ze", "f", "oe", "ef", "eu", "ee", "ei", "de", "v", "eq", "event", "ame", "ode", "eg", "s", "ve", "ed", "eeee", "element", "l", "et", "le", "u", "ent", "se", "ele", "es", "er", "y", "entry"], "t": ["th", "ter", "to", "T", "nt", "ta", "g", "test", "ct", "tw", "td", "w", "wt", "ment", "ts", "xt", "te", "ont", "let", "ot", "ti", "at", "st", "tt", "s", "it", "ent", "ft"]}}
{"code": "import sys\\n\\ndef input(): return sys.stdin.readline().strip()\\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\\ndef ceil(x, y=1): return int(-(-x // y))\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\\ndef Yes(): print('Yes')\\ndef No(): print('No')\\ndef YES(): print('YES')\\ndef NO(): print('NO')\\nsys.setrecursionlimit(10 ** 9)\\nINF = 10 ** 19\\nMOD = 10 ** 9 + 7\\n\\nN = INT()\\nA = LIST()\\n\\nif N == 0:\\n    if A[0] == 1:\\n        print(1)\\n    else:\\n        print(-1)\\n    exit()\\n\\ncond1 = [0] * (N+1)\\ncond1[N] = A[N]\\nfor i in range(N-1, -1, -1):\\n    cond1[i] = cond1[i+1] + A[i]\\n\\nif min(cond1) <= 0:\\n    print(-1)\\n    exit()\\n\\ncond2 = [0] * (N+1)\\ncond2[0] = 1\\nfor i in range(1, N+1):\\n    cond2[i] = min(cond1[i], (cond2[i-1]-A[i-1]) * 2)\\n\\nif min(cond2) <= 0:\\n    print(-1)\\n    exit()\\n\\nif cond2[N] < A[N]:\\n    print(-1)\\n    exit()\\n\\nans = sum(cond2)\\nprint(ans)\\n", "target": "625", "substitutes": {"a": ["ia", "to", "ae", "sta", "ab", "era", "aj", "ta", "ach", "va", "this", "ak", "r", "w", "ma", "z", "ami", "ga", "o", "aux", "la", "aaa", "act", "go", "f", "br", "t", "da", "na", "an", "ap", "at", "sa", "access", "af", "app", "au", "oa", "aa", "l", "am", "ar", "u", "area", "ba", "ca", "ac"], "b": ["bu", "n", "sb", "ab", "p", "g", "ib", "r", "bg", "w", "m", "z", "bi", "wb", "fb", "bo", "rb", "o", "mb", "h", "be", "f", "br", "bc", "t", "gb", "nb", "bb", "v", "eb", "cb", "l", "u", "bs", "ba"], "c": ["ec", "ce", "lc", "con", "n", "cat", "ci", "p", "cd", "g", "ct", "rc", "r", "tc", "m", "z", "fc", "cor", "o", "col", "h", "f", "bc", "t", "dc", "uc", "conf", "sc", "v", "cin", "cos", "cp", "ch", "cus", "cc", "com", "co", "cu", "cb", "l", "u", "cs", "cm", "cr", "ca", "C", "ac"], "i": ["mi", "ki", "n", "xi", "ia", "ni", "ie", "ci", "gi", "ir", "p", "on", "cli", "di", "ai", "I", "iter", "m", "bi", "yi", "qi", "iti", "ic", "o", "ix", "ip", "t", "multi", "io", "si", "li", "ii", "ji", "ei", "int", "ti", "v", "im", "it", "ini", "zi", "ui", "q", "phi", "pi", "il", "ati", "u", "id", "l", "index", "ij", "iu", "hi"], "d": ["fd", "n", "dos", "p", "db", "cd", "g", "di", "dn", "td", "dh", "r", "w", "z", "bd", "m", "dev", "dec", "o", "h", "dt", "f", "df", "t", "dat", "dc", "da", "dr", "de", "v", "ad", "deb", "ed", "D", "do", "div", "q", "l", "dd", "du", "u", "md", "ds"], "j": ["uj", "ie", "ja", "ci", "gi", "ir", "js", "p", "aj", "on", "ian", "g", "ib", "ct", "ai", "ang", "jp", "di", "oj", "z", "jc", "jj", "bi", "ju", "o", "h", "pr", "ind", "jac", "si", "ion", "li", "ji", "im", "it", "ini", "zi", "fi", "ij", "ik"], "e": ["ec", "ce", "n", "ex", "ae", "ie", "en", "r", "pe", "ev", "el", "o", "eff", "ea", "be", "f", "oe", "ef", "t", "eu", "ee", "v", "de", "E", "eb", "ed", "et", "l", "u", "ent", "er"], "x": ["wx", "n", "xi", "ex", "p", "xc", "X", "xa", "rx", "w", "ox", "z", "m", "xt", "ix", "o", "h", "ax", "f", "t", "v", "int", "fx", "xy", "xs", "dx", "q", "l", "xx"], "y": ["sy", "n", "yd", "cy", "oy", "yz", "z", "m", "ies", "ny", "yi", "vy", "o", "py", "ye", "yr", "dy", "yl", "v", "ey", "gy", "iy", "xy", "yt", "Y", "yy", "fy", "l", "xx", "ay", "ry"], "N": ["SN", "INT", "n", "M", "NS", "T", "NL", "There", "Key", "All", "NC", "GN", "NI", "Na", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "Node", "O", "V", "SIZE", "No", "NO", "NOTE", "Z", "NUM", "S", "NE", "B", "J", "G", "ND", "Num", "P", "FN", "E", "D", "OUT", "NB", "Y", "Size", "Ni", "K", "F", "Any", "AN", "TN", "NG", "C"], "INF": ["INH", " INH", "INN", "INf", "InF", "PINF", "InN", " INf", "PINN", "PINf", "InH", "Inf", "PINH", " INN"], "MOD": ["ZI", "mod", "LIN", "ACC", "Mod", "LOG", "POS", "DE", "INC", "AD", "RM", "ERROR", "Mods", "MAC", "EXP", "MD", "CONT", "NUM", "MODE", "UL", "ID", "MS", " mod", "ADD", "SPEC", "OK", "DEC", "REM"], "A": ["GA", "M", "T", "All", "An", "IA", "AAA", "AU", "AT", "X", "ACC", "L", "NA", "AL", "AV", "One", "DATA", "AB", "AE", "ALL", "H", "LA", "AA", "V", "WA", "AR", "C", "AS", "S", "EA", "B", "G", "ICA", "P", "HA", "CA", "MA", "E", "JA", "AF", "TA", "ATA", "AM", "Y", "MAP", "SA", "AC", "BA", "AN", "Array", "AP"], "cond1": ["preded", "condition5", "ond5", "conditionOne", "conted", " cond01", "ondOne", " condOne", "condition2", "conditioned", "ond8", "cond0", "pred1", "condition3", " cond3", "condition1", " cond0", "condition8", "Cond2", " cond10", "condition0", " cond5", "conded", "Cond0", "ond3", "pred01", "cond8", "pred0", "cont1", "cont0", "ond1", "ond10", "cond3", "cond5", "ond2", "cond10", " cond8", "Cond1", "ond0", "cond01", "condition10", "cont01", "condOne", "condition01", "ond01"], "cond2": ["condition5", "con1", "ond5", "dict5", "con4", "condition2", "cond4", "Cond5", "Cond22", "comp10", "comp5", "comp3", "condition3", " cond3", "con3", "condition1", "Cond2", "Cond4", "dict4", "con2", "ond22", "Cond3", "cond22", "ond4", "comp1", " cond4", "ond1", "cond3", "conditionTwo", "cond5", "ond2", "cond10", "conTwo", "condition4", " condTwo", "Cond10", "Cond1", "comp22", "con5", "condTwo", "comp2", "dict2", "condition10"], "ans": ["ANS", "ants", "cn", "outs", "asks", "aus", "nets", "us", "ies", "ns", "ann", "rans", "anas", "ks", "offs", "ins", "aux", "ons", "ms", "ls", "ens", "cas", "hat", "cons", "uns", "pos", "an", "gs", "anes", "cos", "nan", "ran", "ands", "aos", "os", "es", "AN", "ds", "ones"]}}
{"code": "import re\\n\\nstr = input()\\n\\nm = re.match(\"^YAKI\",str)\\n\\nif m:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "27", "substitutes": {"str": ["STR", "n", "err", "Str", "p", "spec", "arr", "ct", "raw", "r", "txt", "w", "c", "status", "input", "res", "cert", "pr", "fr", "b", "sp", "t", "ss", "pos", "out", "int", "list", "string", "obj", "st", "s", "char", "print", "ent", "sent", "text", "chain"], "m": ["tm", "mi", "M", "n", "mr", "esm", "pm", "dm", "p", "mm", "mo", "fm", "i", "c", "asm", "mut", "em", "bm", "rm", "gm", "ms", "mask", "f", "mis", "t", "mc", "arm", "v", "nm", "sm", "mx", "managed", "colm", "wm", "lem", "l", "k", "y", "cm", "hm", "ym"]}}
{"code": "L=list(map(int,input().split()))\\nL=sorted(L)\\nA=[1,4,7,9]\\nif A==L:\\n\tprint(\"YES\")\\nelse:\\n\tprint(\"NO\")", "target": "307", "substitutes": {"L": ["LB", "M", "N", "List", "DL", "T", "NL", "LIN", "SL", "R", "X", "I", "LC", "AL", "TL", "LR", "H", "LA", "LU", "O", "V", "LD", "S", "LT", "B", "J", "G", "P", "LI", "E", "D", "l", "CL", "LL", "LE", "F", "LS", "Z", "LP", "EL", "C"], "A": ["GA", "M", "N", "Al", "An", "IA", "Alpha", "AT", "R", "I", "X", "NA", "AL", "AV", "ABC", "AB", "RA", "H", "LA", "AA", "As", "WA", "AS", "S", "B", "J", "G", "HA", "P", "CA", "MA", "E", "JA", "AF", "TA", "D", "SA", "AC", "BA", "AN", "Array", "C"]}}
{"code": "a,b,c,k = map(int,input().split())\\nsum = 0\\nif k%2==0:\\n  sum = a-b\\nelse:\\n  sum = b-a\\nif abs(sum)>=10**18:\\n  print(\"Unfair\")\\nelse:\\n  print(sum)", "target": "669", "substitutes": {"a": ["aq", "n", "x", "ae", "ab", "ta", "aj", "p", "ach", "i", "r", "w", "ma", "o", "h", "f", "abs", "t", "alpha", "an", "e", "v", "A", "al", "ap", "at", "sa", "af", "s", "au", "aa", "l", "am", "ar", "u", "area", "ba", "ca", "ac"], "b": ["n", "sb", "bf", "ab", "d", "db", "g", "ib", "i", "r", "m", "z", "bi", "fb", "rb", "bo", "h", "be", "f", "abs", "bc", "t", "nb", "B", "bb", "v", "e", "s", "ch", "eb", "cb", "l", "u", "y", "j", "bs", "ba", "ca"], "c": ["n", "x", "d", "p", "g", "r", "m", "z", "col", "h", "f", "bc", "t", "e", "v", "s", "cc", "abc", "cb", "l", "u", "cs", "y", "cm", "cr", "ca", "C", "ac"], "k": ["ck", "km", "n", "kn", "x", "max", "kh", "kl", "p", "ak", "ke", "i", "w", "r", "m", "z", "ks", "o", "kw", "ko", "kind", "f", "num", "kok", "t", "conf", "key", "kj", "v", "s", "ch", "ku", "q", "kk", "j", "sk", "K", "ik", "ka", "mk"], "sum": ["ut", "n", "master", "max", "comment", "summary", "su", "um", "match", "mm", "score", "ul", "sub", "med", "system", "test", "sup", "acc", "zero", "us", "sys", "m", "set", "process", "sam", "unit", "total", "bo", "tail", "mix", "result", "Sum", "mean", "num", "count", "fac", "vol", "sat", "si", "cum", "sim", "share", "ot", "conf", "tu", "out", "add", "must", "cal", "hist", "pop", "hum", "cos", "sa", "hash", "average", "cast", "size", "tmp", "user", "mem", "sample", "se", "sort", "square"]}}
{"code": "import sys\\n\\n\\ninint = lambda: int(sys.stdin.readline())\\ninintm = lambda: map(int, sys.stdin.readline().split())\\ninintl = lambda: list(inintm())\\ninstr = lambda: sys.stdin.readline()\\ninstrm = lambda: map(str, sys.stdin.readline().split())\\ninstrl = lambda: list(instrm())\\n\\nn = inint()\\nD = inintl()\\n\\nD.sort()\\n\\nprint(D[n//2] - D[n//2-1])", "target": "415", "substitutes": {"inint": ["outint", "cinints", "rstr", "outints", "rint", "cinind", "Inint", "inind", "cinfloat", " infloat", "rlin", " Inint", " inind", "inints", "outlin", " inints", "infloat", " Inind", " Inints", "inlin", "Inints", "cinint", " Infloat", "Instr", "Inlin", "rints", "outstr"], "inintm": [" inuintl", "inintsr", "inuintl", "ininstm", "inlistgm", "inmintm", " ininto", "ininsto", " inintsl", "inIntm", "inintr", "ininstl", " inuintn", " inintn", "inminto", "inlistl", "inuintn", " inintsr", "ininstr", "inIntl", " inuintm", " inintgm", "inlistm", "inIntgm", " inintso", "ininto", "inlistn", "inintso", " inintr", "inintgm", "inmintr", "inintsl", " inuintgm", "inmintl", "inuintm", "inintn", " inintsm", "inuintgm", "inintsm", "inIntn"], "inintl": ["outstrz", "inuintl", "instrL", "outstrL", "infloatl", "outintl", "indrawln", "inintL", "outintL", "indrawz", "outstrl", "inintz", "infloatz", "outuintl", "inuintL", "inuintz", "outuintm", "instructz", "instructl", "inintln", "instructm", "outstrm", "outintm", "indrawl", "instrz", "outuintln", "instructL", "inuintln", "outintln", "inuintm", "outintz", "indrawm", "infloatln", "infloatm", "outuintz"], "instr": ["Inbr", " instatic", "rinbr", "Inint", "instatic", "rinstatic", "Instatic", "rinstr", "inbr", "rinint", "Instr", " inbr"], "instrm": ["intstructm", "intstructcm", "intstrcm", "instructml", "instrml", "inintmn", "instructem", "instrem", "outintmt", "intstructem", "outintl", "instrmn", "innerem", "outstrl", "outintmn", "intstrml", "innerm", "inlistl", "instructcm", "instreamm", "inintmt", "inlistm", "intstrm", "instreamem", "instructm", "innerml", "inobjl", "outstrm", "outintm", "intstrem", "inobjmn", "instrmt", "instrcm", "outstrmt", "inlistmt", "inobjmt", "inlistmn", "instreamcm", "outstrmn", "instreamml", "intstructml", "inobjm", "innercm"], "instrl": ["inintle", "outstrle", "intrm", "innerlist", "outintl", "outstrl", "outintle", "innerm", "inintlist", "innerle", "instrle", "outintlist", "outstrm", "intrl", "outintm", "innerl", "intrle", "instrlist", "outstrlist", "intrlist"], "n": ["N", "missing", "nt", "ln", "d", "p", "names", "norm", "ne", "cn", "name", "g", "dn", "i", "sn", "c", "m", "ns", "total", "nl", "num", "count", "t", "len", "nb", "no", "mn", "na", "v", "nc", "nan", "nu", "size", "nn", "number", "l", "np", "j", "draw"], "D": ["DJ", "M", "N", "DL", "T", "New", "DOM", "d", "JD", "DOS", "DO", "R", "DE", "L", "Diff", "FD", "DR", "DI", "H", "O", "V", "LD", "MD", "DES", "Do", "DX", "DA", "B", "DP", "ND", "DD", "DC", "DN", "P", "VD", "Ds", "WD", "DS", "DM", "Y", "PD", "DF", "Don", "DEV", "DB", "DVD", "F", "Dialog", "Z", "C", "Data"]}}
{"code": "import math\\nx = int(input())\\nprint(360 // math.gcd(360, x))", "target": "11", "substitutes": {"x": ["wx", "n", "xi", "ex", "xe", "xc", "xa", "X", "rx", "w", "c", "ox", "z", "xt", "input", "ctx", "h", "tx", "act", "ax", "f", "xd", "t", "v", "int", " xx", "fx", "xy", "xs", "dx", "xx", "l", "number", "y", "px", "xp", "xf"]}}
{"code": "import math\\n#import numpy as np\\nimport queue\\nfrom collections import deque,defaultdict\\nimport heapq as hpq\\nfrom sys import stdin,setrecursionlimit\\n#from scipy.sparse.csgraph import dijkstra\\n#from scipy.sparse import csr_matrix\\nipt = stdin.readline\\nsetrecursionlimit(10**7)\\n\\ndef main():\\n    n = int(ipt())\\n    ans = \"\"\\n    if n == 0:\\n        print(0)\\n        exit()\\n    while n != 0:\\n        if n&1:\\n            ans += \"1\"\\n            n = -(n-1)//2\\n        else:\\n            ans += \"0\"\\n            n = -(n//2)\\n    print(ans[::-1])\\n    return\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "24", "substitutes": {}}
{"code": "from collections import Counter\\nfrom itertools import accumulate\\nN, M, *A = map(int, open(0).read().split())\\nB = [b%M for b in accumulate(A)]\\nC = Counter(B)\\nans = C[0]\\nans += sum(C[k]*(C[k]-1)//2 for k in C.keys())\\nprint(ans)", "target": "23", "substitutes": {"N": ["Name", "n", "NS", "T", "Many", "All", "R", "L", "NM", "Number", "NN", "NR", "V", "S", "P", "Num", "Long", "E", "D", "NB", "Y", "Size", "MN", "K", "F"], "M": ["T", "CM", "R", "I", "L", "RM", "m", "Mi", "H", "W", "MM", "O", "V", "MC", "S", "J", "G", "P", "E", "MS", "D", "MH", "DM", "TM", "MI", "MT", "U", "K", "F", "MF", "Z"], "A": ["a", "GA", "Ax", "An", "IA", "Ar", "AH", "Abs", "NA", "AL", "AV", "AST", "AB", "AA", "LA", "As", "WA", "AR", "AS", "This", "CA", "You", "AY", "JA", "AF", "AM", "SA", "ACT", "AC", "BA", "The", "EA", "AP"], "B": ["LB", "T", "RB", "BL", "BS", "Bs", "SB", "R", "L", "IB", "AB", "BER", "V", "BP", "S", "BC", "BE", "BR", "G", "WB", "GB", "BB", "Bern", "TB", "D", "EB", "BO", "Y", "DB", "K", "BA", "BY"], "b": ["a", "n", "bu", "ab", "bar", "d", "p", "db", "g", "i", "r", "c", "m", "bd", "bi", "wb", "rb", "bm", "mb", "be", "ob", "bh", "f", "bas", "bc", "t", "br", "nb", "bb", "bn", "v", "BM", "s", "eb", "base", "bl", "cb", "l", "bin", "u", "y", "bs", "ba"], "C": ["WC", "CB", "T", "Cu", "CM", "Mc", "NC", "JC", "CG", "R", "I", "LC", "L", "CU", "c", "CI", "CS", "Cs", "TC", "YC", "H", "CV", "CP", "CT", "V", "VC", "O", "GC", "KC", "S", "CD", "BC", "EC", "Co", "CO", "G", "DC", "P", "Cal", "CA", "CR", "E", "CON", "Cache", "OC", "D", "CC", "Count", "K", "F", "Can"], "ans": ["ars", "ANS", "ants", "ats", "ean", "ana", "names", " means", "aus", "us", "lets", "aned", "ts", "ns", "vals", "ann", "rans", "anas", "ks", "offs", "ins", "ms", "amps", "angs", "ls", "pan", "ents", "ens", "ps", "uns", "ends", "can", "an", "gs", "iann", "anks", "aps", "oss", "anes", "s", "nan", "xs", "idents", "ran", "ams", "nas", "vs", "ads", "arts", "os", "es", "ones"], "k": ["ck", "km", "ki", "n", "ek", "x", "kn", "kr", "kh", "kl", "ijk", "kin", "p", "g", "kar", "ak", "ke", "i", "kid", "c", "z", "m", "ks", "o", "kw", "ko", "kind", "ind", "them", "tk", "num", "t", "key", "kj", "v", "ok", "ku", "q", "l", "wk", "u", "kk", "ka", "j", "K", "ik", "y", "sk", "stud", "mk", "unk"]}}
{"code": "from sys import stdin, setrecursionlimit\\ninput = stdin.buffer.readline\\nsetrecursionlimit(10 ** 7)\\n\\nfrom heapq import heappush, heappop\\nfrom bisect import bisect_left, bisect_right\\nfrom collections import deque, defaultdict\\nfrom itertools import combinations, permutations, combinations_with_replacement\\nfrom itertools import accumulate\\nfrom math import ceil, sqrt, pi\\n\\nMOD = 10 ** 9 + 7\\nINF = 10 ** 18\\n\\nN, M = map(int, input().split())\\n\\narr = []\\nfor i in range(M):\\n    arr.append([1, i + 2])\\narr = arr[::-1]\\n#print(arr)\\n\\nmax_arr = -1\\nplus = 0\\nfor a, b in arr[::2]:\\n    print(a + plus, b + plus)\\n    max_arr = max(max_arr, b + plus)\\n    plus += 1\\n#print(max_arr)\\n\\nplus = 0\\nfor a, b in arr[1::2]:\\n    print(max_arr + a + plus, max_arr + b + plus)\\n    plus += 1", "target": "761", "substitutes": {"input": ["load", "pattern", "str", "context", "select", "insert", "table", "view", "put", "get", "file", "raw", "ref", "buffer", "unit", "read", "prefix", "accept", "format", "enum", "output", "PUT", "config", "empty", "feed", "out", "pull", "Input", "list", "int", "filter", "csv", "print", "new", " Input", "q", "command", "rand", "index", "sequence", "text", "source", "start"], "MOD": ["OM", "MAX", "Fun", "mod", "IN", "LOG", "Mod", "Div", "AD", "INC", "FD", "OD", "RE", "AX", "Exp", "AR", "AS", "GF", "J", "UL", "G", "REF", "XX", "MS", "ADD", "EW", "K", "Z", "UB"], "INF": ["INDF", "PINEF", "INEF", "INf", "PINDF", " INEF", "InF", "InEF", "PINF", "PINf", " INDF", "Inf", " INf", "InDF"], "N": ["MAX", "n", "NL", "NS", "T", "Max", "R", "L", "NM", "NT", "NO", "S", "B", "J", "G", "P", "A", "E", "D", "F", "Z", "C"], "M": ["Many", "T", "CM", "R", "X", "I", "L", "JM", "NM", "MX", "RM", "m", "Ms", "H", "MM", "MC", "V", "S", "MAN", "B", "J", "Q", "G", "P", "MP", "MA", "MS", "D", "DM", "TM", "Y", "MN", "MI", "MT", "MR", "K", "F", "LM", "PM", "C"], "arr": ["arg", "ck", "wx", "alph", "our", "load", "err", "str", "ab", "aug", "bar", "Ar", "mp", "rep", "ask", "iq", "series", "ang", "arc", "r", "map", "batch", "expr", "pad", "img", "par", "res", "ARR", "aaa", "cur", "val", "mask", "ax", "buf", "fr", "br", "days", "dat", "rel", "agg", "av", "hist", "list", "row", "adj", "gr", "unch", "dx", "Array", "au", "bl", "coll", "plot", "aa", "np", "ar", "pl", "attr", "ray", "dict", "array", "ack", "frac"], "i": ["a", "mi", "n", "xi", "x", "ci", "gi", "p", "di", "I", "r", "c", "m", "ip", "ind", "f", "b", "t", "si", "li", "ii", "key", "v", "ori", "ti", "s", "it", "zi", "ui", "q", "pi", "u", "id", "j", "y"]}}
{"code": "N = int(input())\\nc = list(input())\\n\\n\\nl1 = list()\\nfor i in range(N):\\n    if c[i] == 'R':\\n        l1.append(i)\\n        \\n\\n\\nnum = 0\\n\\ndef swap(i, j):\\n    a = c[i]\\n    c[i] = c[j]\\n    c[j] = a\\n    return\\n\\nif len(l1) >= 1:\\n    for i in range(N):\\n        if i > l1[-1]:\\n            break\\n        if c[i] == 'W':\\n             swap(i, l1.pop(-1))\\n             num += 1\\n        if len(l1) == 0:\\n            break\\nprint(num)\\n", "target": "714", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "T", "NC", "GN", "NI", "Na", "Ns", "R", "I", "L", "NA", "NM", "NN", "NR", "NT", "V", "TN", "No", "NO", "NUM", "S", "B", "J", "Num", "P", "Sn", "D", "NB", "MN", "Ni", "K", "AN", "Z", "C"], "c": ["ctrl", "ce", "lc", "n", "con", "ci", "gc", "cont", "p", "d", "unc", "cd", "xc", "ct", "rc", "r", "tc", "w", "current", "m", "fc", "ctx", "ic", "h", "cur", "case", "cv", "enc", "f", "b", "config", "vc", "t", "mc", "dc", "uc", "conf", "sc", "v", "e", "nc", "cin", "cache", "roc", "cp", "ch", "conv", "abc", "cc", "co", "com", "cu", "cb", "l", "etc", "cl", "u", "cs", "cats", "cm", "cr", "cf", "C", "ac"], "l1": ["lr2", "lapping", "lOne", "la1", "liapping", "L0", "LOne", "Liter", "la256", "ln", "rl2", "lenews", "fl1", " l256", "laOne", "flapping", "L1", "lsiter", "lr1", "ll1", "li0", " lapping", "linews", "ll5", "la2", "lav", "le1", "leins", "fl0", "l2", "li6", "ll6", " l6", "liter", "li2", "li5", " lOne", "l5", "rl1", "li1", "Ln", "l256", "ls1", "llav", "lnews", "lrOne", "rlOne", "le0", " l2", "liiter", "rl0", "liav", " l0", "L2", " lins", "lsn", "l0", " lnews", "ls2", "lr256", " l5", "lin", " lav", "l6", "lins", "liins"], "i": ["mi", "ki", "n", "xi", "x", "ia", "ni", "ie", "ci", "gi", "ir", "p", "name", "di", "ai", "I", "iter", "aci", "r", "bi", "ami", "yi", "qi", "iti", "ic", "ix", "o", "ski", "ip", "ind", "multi", "ri", "t", "io", "si", "iu", "ion", "li", "ii", "ji", "ei", "key", "int", "ti", "oi", "ori", "iy", "im", "it", "zi", "ini", "ui", "q", "l", "pi", "phi", "ati", "u", "id", "index", "y", "ij", "ik", "iri", "hi"], "num": ["con", "n", "net", "comment", "alph", "max", "nut", "nt", "um", "nom", "en", "name", "mult", "zero", "set", "rem", "note", "dev", "tim", "total", "dec", "success", "val", "result", "done", "count", "NUM", "multi", "nb", "cum", "sim", "no", "ver", "conf", "na", "Num", "cal", "int", "nm", "row", "msg", "conv", "node", "nu", "dim", "counter", "number", "mon", "np", "mem", "index", "coord", "temp", "sum"], "j": ["json", "n", "uj", "ja", "js", "aj", "g", "jp", "r", "z", "jj", "note", "o", "h", "jl", "fr", "b", "br", "rel", "t", "J", "bj", "ii", "ji", "kj", "v", "e", "obj", "it", "jump", "q", "l", "dj", "u", "y", "k", "ij"], "a": ["x", "ia", "ae", "ab", "aj", "p", "d", "g", "ai", "xa", "acc", "r", "w", "ma", "z", "m", "o", "ea", "pa", "f", "b", "t", "alpha", "an", "e", "A", "at", "sa", "s", "app", "au", "aa", "l", "ar", "u", "ba", "ca", "ac"]}}
{"code": "def resolve():\\n    n = int(input())\\n    x = [input().split() for i in range(n)]\\n    count = 0\\n    for i in x:\\n        if i[1] == 'BTC':\\n            count += float(i[0]) * 380000\\n        else:\\n            count += int(i[0])\\n    print(count)\\nresolve()", "target": "270", "substitutes": {"n": ["nr", "N", "nt", "gn", "ln", "d", "p", "ne", "cn", "sn", "r", "c", "m", "z", "ns", "nl", "b", "num", "t", "len", "nb", "nv", "na", "v", "nc", "nm", "size", "nn", "l", "np", "j"], "x": ["wx", "xi", "ex", "xe", "xes", "ux", "xc", "xa", "X", "rx", "w", "xxxx", "xt", "xxx", "xml", "ix", "tx", "pan", "xd", "t", "xxxxxxxx", " xx", "fx", "xy", "xs", "mx", "xb", "dx", "inx", "xx", "lex", "y", "px", "index", "xp", "xf"], "i": ["\u00ed", "iii", "ki", "xi", "a", "uri", "ci", "gi", "p", "di", "ai", "I", "c", "z", "m", "bi", "yi", "qi", "ic", "ix", "o", "ip", "h", "ind", "ri", "io", "si", "li", "ii", "ji", "v", "ei", "ori", "ti", "oi", "iy", "im", "it", "zi", "ini", "ui", "q", "l", "pi", "ati", "id", "y", "j", "k", "ik", "ij", "iu", "hi"], "count": ["hold", "th", "comment", "nt", "p", "more", "ct", "code", "iter", "long", "value", "ount", "zero", "length", "c", "weight", "report", "z", "current", "status", "total", "message", "quiet", "result", "ind", "limit", "num", "t", "time", "nb", "pt", "amount", "conf", "add", "key", "v", "must", "all", "cache", "debug", "now", "flag", "found", "group", "cast", "size", "counter", "q", "number", "Count", "id", "index", "cr", "rate", "sum"]}}
{"code": "a = input()\\nb = input()\\nans = '123'.replace(a,'').replace(b,'')\\nprint(ans)", "target": "752", "substitutes": {"a": ["ary", "x", "ae", "ac", "ab", "era", "ta", "d", "va", "ai", "apt", "c", "ma", "ata", "eas", "ga", "ea", "la", "aaa", "admin", "alpha", "da", "apa", "an", "e", "A", "ap", "at", "sa", "af", "ao", "aka", "au", "oa", "aa", "am", "ar", "area", "ba"], "b": ["bis", "sb", "ab", "lib", "d", "db", "beta", "ib", "blue", "c", "bi", "fb", "rb", "mb", "be", "ob", "bas", "bc", "gb", "nb", "B", "bb", "another", "erb", "eb", "abc", "base", "cb", "bp", "bin", "y", "bound", "bs", "ba", "back"], "ans": ["ars", "ANS", "ican", "ants", "ats", "ians", "ean", "ana", "ano", "aus", "oman", "san", "mos", "aned", "ann", "rans", "rs", "bird", "anas", "leans", "ks", "ons", "amps", "rets", "ls", "pan", "ens", " sans", "can", "an", "anks", "idents", "nan", "ams", "aos", "arts", "nes", "said", "vers"]}}
{"code": "s1 = input()\\n\\nprint(chr(ord(s1) + 1))", "target": "501", "substitutes": {"s1": [" s01", "s0", "S0", "ss01", " s3", "S01", "S3", "ss0", "S2", "s3", "ss1", "ss2", " s0", "S1", "s01", " s2", "s2"]}}
{"code": "s = input()\\n\\nans = 0\\nind = 0\\nwhile ind < len(s)-1:\\n    if s[ind:ind+2] in (\"01\", \"10\"):\\n        s = s[:ind]+s[ind+2:]\\n        ans += 1\\n        ind = max(0, ind-1)\\n\\n    else:\\n        ind += 1\\nprint(ans*2)\\n", "target": "40", "substitutes": {"s": ["a", "n", "sb", "x", "ys", "state", "str", "ats", "js", "p", "eds", "g", "i", "sql", "c", "ts", "m", "z", "ns", "ies", "rs", "input", "ins", "less", "sl", "h", "ers", "ms", "ls", "f", "b", "sp", "abs", "t", "S", "ss", "parts", "its", "als", "tes", "v", "gs", "ws", "string", "ares", "sa", "st", "sv", "xs", "sts", "l", "q", "cs", "se", "os", "y", "qs", "ds", "ps", "bs"], "ans": ["ars", "n", "ANS", "ants", "ats", "names", "eds", "outs", "aus", "ts", "ns", "ann", "rans", "rs", "reads", "ks", "offs", "ins", "ses", "ms", "amps", "ls", "ents", "ids", "ens", "ots", "anc", "cons", "uns", "can", "an", "rors", "iann", "aps", "terms", "xs", "sv", "idents", "ran", "ands", "vs", "ads", "cs", "os", "es", "stats", "lan", "ds", "sum"], "ind": ["fd", "n", "cmp", "err", "offset", "dir", "typ", "i", "cod", "z", "set", "old", "ctx", "ix", "kind", "count", "att", "butt", "obj", "end", "dx", "pl", "roll", "dd", "sd", "mem", "id", "pred", "init", "ld", "td", "iter", "ann", "bind", "cond", "mn", "pos", "IND", "debug", "dj", "iat", "nd", "start", "loc", "next", "nt", "state", "d", "dn", "ct", "ox", "pad", "round", "mind", "blind", "pr", "dat", "stick", "ord", "ill", "add", "rod", "req", "slice", "ent", "cand", "index", "md", "ond", "wind", "hold", "dial", "inc", "Ind", "cmd", "sp", "pt", "int", "ad", "adj", "ptr", "inn", "mun", "j", "ds"]}}
{"code": "s = input()\\ndeff = 1\\nfor i in range(len(s)):\\n  if (i % 2 == 0):\\n    if s[i] == 'L':\\n      deff = 0\\n  else:\\n    if s[i] == 'R':\\n      deff = 0\\nif deff == 1:\\n  print('Yes')\\nelse:\\n  print('No')", "target": "686", "substitutes": {"s": ["a", "n", "sb", "ys", "str", "ats", "mods", "js", "p", "ains", "g", "fs", "w", "r", "hs", "c", "ts", "z", "m", "ns", "ies", "erences", "rs", "ses", "tests", "less", "ins", "h", "ers", "ls", "f", "b", "gins", "abs", "t", "ids", "ss", "S", "parts", "args", "its", "tes", "v", "strings", "gs", "e", "aces", "string", "ws", "ares", "sv", "xs", "itions", "ments", "ands", "sts", "y", "ences", "qs", "ds", "ps", "bs"], "deff": ["Deshift", "veeff", "vept", " dept", " deq", " deeff", "DeFF", "Dept", "desFF", " deFF", "desff", "deFF", " deft", "veff", " deresh", "deseff", "deft", "feeFF", "desq", "deshift", "Deeff", "deq", "veft", "dept", "feeff", "Deft", "Deffe", "Deq", "Deff", "Deresh", "deeff", "deffe", "deresh", "desshift", " deffe", "feeffe", "feeresh", " deshift"], "i": ["mi", "ki", "xi", "x", "ia", "uri", "me", "ci", "gi", "p", "di", "ai", "I", "r", "m", "batch", "bi", "qi", "yi", "ic", "ski", "ix", "iri", "ip", "ind", "f", "b", "multi", "si", "ii", "li", "key", "v", "ji", "ei", "ti", "ori", "im", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "id", "j", "index", "ij", "iu", "hi"]}}
{"code": "import sys\\ndef MI(): return map(int,sys.stdin.readline().rstrip().split())\\n\\na,b = MI()\\nc = b-a\\nprint(c*(c+1)//2-b)\\n", "target": "653", "substitutes": {"a": ["n", "x", "ae", "ab", "ta", "p", "ai", "i", "acc", "r", "ma", "m", "z", "o", "ea", "f", "t", "alpha", "an", "e", "A", "al", "sa", "s", "au", "aa", "l", "am", "ar", "u", "area", "ba", "ca", "ac"], "b": ["n", "sb", "x", "bf", "ab", "d", "p", "db", "g", "i", "r", "m", "z", "bi", "fb", "rb", "be", "f", "bc", "t", "B", "bb", "v", "e", "s", "eb", "cb", "aa", "l", "u", "j", "y", "bs", "ba", "ca"], "c": ["ce", "lc", "n", "x", "ci", "d", "p", "unc", "cd", "g", "xc", "ct", "rc", "i", "r", "tc", "m", "z", "cur", "f", "bc", "t", "uc", "e", "v", "cc", "abc", "co", "cb", "cu", "l", "u", "cs", "k", "y", "cf", "ca", "C", "ac"]}}
{"code": "a, b = map(int, input().split())\\nprint('unsafe' if a <= b else 'safe')", "target": "585", "substitutes": {"a": ["aq", "n", "x", "sta", "ae", "ab", "aff", "aj", "p", "ta", "va", "i", "c", "ma", "ata", "ea", "la", "act", "t", "alpha", "da", "apa", "na", "an", "A", "at", "sa", "af", "s", "ao", "qa", "ity", "oa", "au", "aa", "l", "u", "j", "index", "area"], "b": ["n", "sb", "x", "ab", "d", "p", "db", "g", "i", "r", "c", "m", "z", "bi", "fb", "rb", "mb", "h", "val", "ob", "br", "abs", "bc", "t", "f", "gb", "nb", "B", "bb", "v", "s", "eb", "base", "cb", "l", "j", "bs"]}}
{"code": "n=int(input())\\nA=list(map(int,input().split()))\\nD = dict()\\nfor i in range(n):\\n  if A[i] not in D:\\n    D[A[i]] = 1\\n  else:\\n    D[A[i]] += 1\\nans = 0\\nfor i in D:\\n  if D[i]>=i:\\n    ans += D[i]-i\\n  else:\\n    ans += D[i]\\nprint(ans)", "target": "536", "substitutes": {"n": ["N", "x", "nt", "ni", "gn", "ln", "d", "p", "names", "norm", "ne", "cn", "g", "sn", "c", "m", "z", "ns", "nl", "b", "num", "t", "nia", "len", "nb", "no", "mn", "na", "v", "nc", "nu", "nn", "l", "number", "np", "q", "pi"], "A": ["a", "GA", "Ast", "M", "N", "All", "Al", "An", "Ar", "Alpha", "Abs", "AU", "AT", "X", "I", "Av", "L", "NA", "AL", "AD", "AV", "AST", "AB", "App", "AE", "Auth", "H", "AA", "As", "Att", "AR", "AS", "S", "B", "G", "This", "AP", "P", "Ant", "Action", "CA", "At", "AF", "AM", "Y", "System", "Art", "SA", "The", "AC", "ACT", "Array", "Ag", "C"], "D": ["M", "N", "DL", "Def", "New", "T", "Det", "d", "JD", "GO", "DO", "Dist", "Default", "X", "DE", "I", "L", "AD", "FD", "DK", "DI", "Del", "H", "LD", "O", "Make", "Done", "V", "Public", "S", "Do", "DX", "DA", "DP", "B", "Q", "J", "G", "ND", "DD", "Dir", "DC", "DN", "DEF", "P", "BD", "E", "Ds", "WD", "DS", "DM", "Y", "Dest", "PD", "DF", "Don", "DB", "F", "Z", "Does", "C"], "i": ["a", "mi", "ki", "xi", "x", "ia", "uri", "ci", "gi", "cli", "p", "name", "di", "ai", "I", "abi", "used", "m", "batch", "bi", "ami", "status", "info", "qi", "yi", "iti", "ic", "o", "ix", "ip", "ind", "b", "multi", "ri", "t", "io", "si", "iu", "li", "ii", "ji", "ei", "v", "ori", "ti", "list", "oi", "adi", "int", "im", "it", "zi", "ui", "ini", "\u0438", "q", "phi", "pi", "l", "u", "id", "j", "y", "index", "ik", "ij", "asi", "iri", "hi"], "ans": ["ars", "ys", "ANS", "ops", "ants", "ats", "ians", "names", "eds", "acs", "outs", "helps", "aus", "ros", "lets", "aned", "ns", "ann", "rans", "rs", "ums", "ks", "anas", "offs", "mas", "ins", "ras", "ons", "ms", "amps", "ls", "ents", "ids", "ens", "ations", "uns", "an", "posts", "anks", "aps", "anes", "terms", "s", "nas", "ands", "aos", "ads", "cs", "arts", "os", "lan", "ds", "olds"]}}
{"code": "n,m,x,y = map(int,input().split())\\nl = list(map(int,input().split()))\\nr = list(map(int,input().split()))\\n\\nfor i in range(-100,101):\\n  if x<i and i<=y and max(l)<i and min(r) >= i:\\n    print(\"No War\")\\n    exit()\\nprint(\"War\")", "target": "670", "substitutes": {"n": ["a", "N", "d", "p", "g", "w", "sn", "c", "z", "ns", "o", "h", "f", "b", "num", "t", "v", "e", "nm", "s", "nn", "q", "j", "k"], "m": ["mi", "M", "dm", "d", "p", "mm", "mu", "g", "w", "c", "o", "h", "f", "b", "t", "mc", "mn", "v", "e", "mx", "dim", "q", "k", "j", "cm"], "x": ["a", "wx", "xi", "ex", "d", "p", "g", "xc", "left", "X", "rx", "w", "c", "z", "o", "ix", "h", "tx", "f", "t", "v", "e", "xy", "xs", "dx", "q", "xx", "yx", "u", "j"], "y": ["a", "sy", "ys", "p", "g", "cy", "oy", "z", "ies", "ny", "vy", "o", "py", "ye", "yr", "yk", "b", "dy", "t", "yl", "uy", "v", "yn", "iy", "xy", "yt", "Y", "yy", "j", "k", "ya", "ay", "ym"], "l": ["lc", "lu", "los", "tl", "kl", "ld", "ln", "lt", "lb", "L", "ml", "dl", "el", "nl", "sl", "ls", "b", "wl", "hl", "lis", "lo", "lp", "li", "fl", "list", "al", "lr", "ol", "pl", "le", "ll", "j", "lin"], "r": ["a", "sr", "mr", "rr", "ro", "d", "p", "R", "rc", "rx", "re", "w", "c", "rs", "rb", "o", "h", "pr", "vr", "fr", "b", "rl", "dr", "s", "rt", "lr", "q", "ar", "u", "j", "er", "cr", "ry", "rd"], "i": ["mi", "ki", "xi", "ia", "ci", "gi", "p", "di", "ai", "I", "bi", "yi", "qi", "iti", "ic", "ix", "o", "ip", "h", "b", "multi", "ri", "t", "io", "si", "li", "ii", "v", "e", "int", "ti", "im", "s", "zi", "ini", "pi", "phi", "k", "j", "ik", "ij", "index", "iu", "hi"]}}
{"code": "import sys\\nimport math\\nimport itertools\\nimport collections\\nimport heapq\\nimport re\\nimport numpy as np\\nfrom functools import reduce\\n\\nrr = lambda: sys.stdin.readline().rstrip()\\nrs = lambda: sys.stdin.readline().split()\\nri = lambda: int(sys.stdin.readline())\\nrm = lambda: map(int, sys.stdin.readline().split())\\nrl = lambda: list(map(int, sys.stdin.readline().split()))\\ninf = float('inf')\\nmod = 10**9 + 7\\n\\ns = rr()\\nfor char in 'abcdefghijklmnopqrstuvwxyz':\\n    if char not in s:\\n        print(char)\\n        exit()\\nelse:\\n    print('None')\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "target": "767", "substitutes": {"rr": ["rid", "mr", "sr", "kr", "err", "rg", "printf", "ir", "arr", "rc", "rx", "r", "rint", "repl", "wr", "round", "rb", "res", "pr", "vr", "result", "rar", "fr", "dr", "raf", "gr", "rt", "lr", "hr", "RR", "req", "cb", "rn", "attr", "rd"], "rs": ["ars", "sr", "mr", "ro", "ra", "rc", "rx", "r", "ts", "ns", "rb", "res", "ins", "rys", "irs", "ris", "dr", "ws", "xs", "rt", "rows", "cs", "ds", "rd"], "ri": ["rid", "mi", "rio", "ro", "ci", "ra", "ir", "di", "ai", "i", "rx", "rint", "rob", "io", "si", "ris", "rit", "dr", "li", "rin", "ti", "ru", "im", "rt", "rand", "iri", "hi", "ry"], "rm": ["mi", "mr", "mor", "pm", "rom", "fm", "rep", "rx", "RM", "m", "rem", "rob", "rb", "mb", "rar", "rel", "ru", "nm", "sm", "mx", "rt", "lr", "ram", "rn", "md", "mt", "rpm", "reg"], "rl": ["rid", "mr", "sr", "tl", "ro", "ln", "lb", "rc", "rx", "repl", "dl", "rb", "nl", "sl", "rys", "ls", "hl", "rol", "lp", "ru", "rt", "lr", "ll", "rn", "lin", "rd"], "inf": ["imag", "lim", "Inf", "iter", "inc", "ipl", "ma", "inv", "floor", "info", "hex", "ins", "ix", "log", "ind", "conf", "exp", "int", "sin", "eq", "red", "it", "bin", "pp", "pred", "frac", "neg"], "mod": ["MOD", " Mod", "sub", "mult", "Mod", "fun", "inv", "set", "floor", "circ", "round", "dec", "min", "term", "ind", "tab", "form", "dig", "sim", "ver", "bit", "add", "div", "base", "var", "reg", "mode", "sum"], "s": ["a", "sym", "n", "sb", "str", "ats", "d", "p", "g", "i", "fs", "r", "c", "ts", "z", "m", "ns", "ins", "sg", "ls", "f", "b", "t", "S", "ss", "si", "e", "gs", "sq", "ims", "xs", "sv", "cs", "os", "es", "ds"], "char": ["arg", "pair", "ie", "str", "token", "cat", "match", "component", "cont", "name", "code", "car", "short", "kar", "cell", "ace", "digit", "cor", "Character", "const", "col", "cur", "case", "ind", "cmd", " charact", "word", "term", "ctr", "sch", "close", "CHAR", "character", "ord", "chrom", "key", "int", "string", "byte", "utf", "ch", "com", "oct", "print", "letter", "addr", " character", "letters", "var", "ar", "attr", "cf", "text", "Char"]}}
{"code": "from collections import deque\\nN = int(input())\\nadj = [[] for _ in range(N)]\\nfor i in range(N-1):\\n    a, b = map(int, input().split())\\n    adj[a-1].append((b, i))\\n    adj[b-1].append((a, i))\\n# print(adj)\\ncolor = [0]*N\\nvisited = [False]*N\\nvisited[0] = True\\nqueue = deque([1])\\nans = [0]*(N-1)\\nwhile queue:\\n    now = queue.popleft()\\n    cnt = 1\\n    for n, e in adj[now-1]:\\n        if visited[n-1]:\\n            continue\\n        if color[now-1] == cnt:\\n            cnt += 1\\n        color[n-1] = cnt\\n        visited[n-1] = True\\n        ans[e] = cnt\\n        cnt += 1\\n        queue.append(n)\\nprint(max(color))\\nprint(*ans, sep='\\n')", "target": "157", "substitutes": {"N": ["SN", "CNN", "IT", "n", "M", "NS", "NL", "Ne", "NV", "NC", "GN", "KEY", "NI", "Ns", "I", "NA", "L", "NM", "NN", "NP", "CN", "NR", "NT", "NH", "NF", "V", "SIZE", "No", "NO", "Z", "GEN", "NE", "B", "ND", "Num", "A", "Network", "NB", "MN", "Ni", "AN", "TN", "FN", "NG"], "adj": ["aq", "next", "n", "conn", "pkg", "perm", "nt", "err", "gn", "aj", "js", "comm", "arr", "rev", "jp", "acc", "apt", "inv", "map", "img", "dev", "alg", "ind", "ax", "jac", "days", "hess", "adv", "att", "ad", "gov", "obj", "gr", "now", "compl", "req", "app", "pres", "atts", "div", "addr", "tmp", "np", "dj", "inf", "j", "grad", "attr", "ij", "ag", "pp"], "_": ["x", " j", " k", " row", " l", " x", " c", " m", " __", "___", " index", " p", " col"], "i": ["mi", "n", "xi", "x", "ci", "p", " j", "di", "ai", "I", "c", "m", "bi", "ic", "o", "ip", "iri", "h", "ind", "f", "ri", "si", "ii", "li", "v", "e", "int", "ti", "im", "it", "zi", "ini", "q", "l", "pi", "u", "id", "j", "index", "ij", "iu", "hi"], "a": ["ia", "sta", "ae", "ac", "ab", "ra", "aj", "va", "ai", "ak", "\u00e1", "ma", "ami", "el", "ga", "ea", "la", "aaa", "pa", "be", "act", "ax", "alpha", "art", "da", "an", "ad", "A", "ap", "al", "at", "sa", "au", "aa", "am", "ar", "area", "ba", "ca"], "b": ["bis", "n", "sb", "ab", "bar", "db", "beta", "g", "ib", "blue", "c", "z", "bi", "wb", "fb", "rb", "mb", "h", "be", "ob", "bh", "br", "f", "bc", "gb", "nb", "B", "bb", "v", "e", "s", "eb", "bl", "cb", "base", "l", "bp", "j", "y", "bs", "ba"]}}
{"code": "S = input()\\nL = len(S)\\n\\nif(S == 'keyence'):\\n    print('YES')\\n    exit()\\n\\nfor i in range(L):\\n    count = 0\\n    for j in range(i, L):\\n        if (i == 0 and count == 0):\\n            s = S[1:]\\n        elif(i == L - 1):\\n            s = S[:i]\\n        else:\\n            s = S[:i] + S[i + count + 1:]\\n\\n        if (s == 'keyence'):\\n            print('YES')\\n            exit()\\n        else:\\n            count += 1\\n\\nprint('NO')\\n", "target": "641", "substitutes": {"S": ["Name", "M", "N", "NS", "T", "SH", "Series", "BS", "SS", "HS", "SL", "SB", "R", "X", "JS", "I", "RS", "PS", "VS", "SI", "CS", "TS", "SAN", "CSS", "Set", "H", "GS", "V", "Sample", "INS", "B", "Q", "G", "P", "SSL", "SE", "A", "Windows", "E", "Is", "Results", "SU", "SP", "D", "DS", "Y", "Bytes", "SA", "U", "F", "Z", "C", "Data"], "L": ["dL", "M", "N", "NL", "DL", "T", "LIN", "PL", "BL", "SL", "R", "I", "LC", "length", "TL", "Length", "W", "H", "LA", "LU", "V", "LO", "LT", "B", "J", "Li", "G", "LI", "P", "IL", "LV", "LG", "D", "GL", "l", "CL", "Size", "LL", "Len", "LE", "LM", "F", "K", "LS", "Z", "LP", "EL", "C"], "i": ["a", "mi", "n", "xi", "x", "ia", "uri", "ie", "ci", "gi", "p", "g", "di", "ai", "I", "iter", "c", "z", "m", "bi", "ic", "o", "ix", "ip", "f", "b", "t", "si", "li", "ii", "v", "ei", "int", "ti", "e", "im", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "phi", "u", "id", "y", "k", "ik", "ij", "index", "iu"], "count": ["next", "find", "hold", "n", "a", "comment", "call", "max", "nt", "state", "cont", "p", "child", "test", "code", "ct", "ount", "start", "length", "c", "current", "weight", "batch", "process", "status", "total", "lag", "ind", "f", "limit", "num", "ctr", "cond", "nb", "amount", "conf", "check", "key", "v", "list", "cache", "flag", "first", "found", "size", "counter", "number", "command", "Count", "id", "index", "C", "sum"], "j": ["n", "uj", "aj", "d", "p", "g", "ib", "left", "jc", "oj", "z", "c", "jj", "el", "o", "ix", "h", "ind", "jl", "f", "b", "J", "ji", "v", "kj", "q", "k", "ij"], "s": ["a", "bis", "sym", "n", "sb", "str", "ats", "space", "p", "spec", "g", "short", "hs", "c", "ts", "z", "set", "ns", "sam", "rs", "less", "h", "ls", "abs", "sp", "t", "ds", "ss", "v", "gs", "sq", "string", "st", "sv", "conv", "new", "sample", "cs", "os", "stats", "join", "ps", "bs", "source"]}}
{"code": "# coding: utf-8\\nimport sys\\nstdin = sys.stdin\\n\\nsr = lambda: stdin.readline().rstrip()\\nir = lambda: int(sr())\\nlr = lambda: list(map(int, sr().split()))\\n\\nN, M = lr()\\nAB = [lr() for _ in range(M)]\\nV = [x for x in range(N+1)]\\ntotal = N * (N-1) // 2\\n\\ndef find(A, x):\\n    parent = A[x]\\n    if parent == x: return x\\n    root = find(A, parent)\\n    A[x] = root\\n    return root\\n\\ndef union(A, x, y):\\n    root, second = find(A, x), find(A, y)\\n    if root > second:\\n        second, root = root, second\\n    A[second] = root\\n\\ndef merge(A, x, y):\\n    root_A = find(A, a); root_B = find(A, b)\\n    if root_A == root_B:\\n        return 0\\n    ret = group[root_A] * group[root_B]\\n    new_group = group[root_A] + group[root_B]\\n    group[root_A] = group[root_B] = new_group\\n    union(A, a, b)\\n    return ret\\n\\nconv = 0\\nanswer = []\\ngroup = [1] * (N+1)\\nfor a, b in AB[::-1]:\\n    answer.append(total - conv)\\n    conv += merge(V, a, b)\\n\\nfor x in answer[::-1]:\\n    print(x)\\n", "target": "287", "substitutes": {}}
{"code": "k=int(input())\\na,b = map(int,input().split())\\n\\nans=\"NG\"\\nfor i in range(1001):\\n    if a<=(i*k)<=b :\\n        ans = \"OK\"\\nprint(ans)", "target": "78", "substitutes": {"k": ["ck", "km", "kernel", "n", "ek", "x", "ki", "kr", "kh", "kl", "p", "ak", "ke", "m", "dk", "ks", "kw", "ko", "kb", "kok", "ok", "kick", " K", "aka", "ikk", "ku", "q", "kk", "ka", "sk", "K", "ik", "j", "ack", "mk"], "a": ["tta", "ia", "sta", "ae", "ac", "ab", "ta", "g", "va", "ai", "ak", " A", "ma", "ata", "ga", "ea", "la", "aaa", "act", "alpha", "art", "an", "A", "ap", "al", "at", "sa", "oa", "au", "aa", "am", "ar", "area", "ack", "ba", "ca", "ao"], "b": ["ben", "body", "n", "bf", "ab", "d", "p", "db", "g", "ib", "r", "c", "m", "bi", "fb", "rb", "bo", "mb", "be", "f", "bc", "gb", "nb", "B", "bb", "v", "e", "eb", "cb", "l", "bp", "j", "y", "bs", "ba"], "ans": ["arms", "ars", "ys", "ANS", "ants", "ats", "ians", " means", "eds", "outs", "helps", "aus", "ros", "asks", "aned", "ts", "ann", "rs", "eas", "ks", "utters", "anas", "offs", "ins", "ras", "cks", "ons", "ms", "amps", "angs", "wan", "rets", "ents", "ens", "orders", "uns", "an", "anks", "oss", "anes", "ays", "s", "ams", "aos", "ands", "ads", "arts", "lan", "olds"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "bi", "qi", "ic", "ix", "ri", "si", "li", "ii", "ji", "v", "ti", "s", "it", "zi", "ini", "ui", "q", "pi", "u", "id", "j", "y", "ij", "index", "hi"]}}
{"code": "#atcoder template\\ndef main():\\n    import sys\\n    imput = sys.stdin.readline\\n    #\u6587\u5b57\u5217\u5165\u529b\u306e\u6642\u306f\u4e0a\u8a18\u306ferror\u3068\u306a\u308b\u3002\\n    #\u3053\u3053\u306b\u30b3\u30fc\u30c9\\n    #input\\n    x = int(input())\\n\\n    # %%\\n    #output\\n    if x >= 30:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\n\\n    #N = 1\u306e\u3068\u304d\u306a\u3069corner case\u3092\u78ba\u8a8d\uff01\\nif __name__ == \"__main__\":\\n    main()", "target": "371", "substitutes": {}}
{"code": "import string\\nn = int(input())\\ns = input()\\n\\nl = string.ascii_uppercase\\nans = [l[(l.index(i) + n ) % len(l)] for i in s]\\nprint(''.join(ans))", "target": "39", "substitutes": {"n": ["a", "nr", "N", "x", "nt", "ni", "ln", "p", "ne", "cn", "dn", "sn", "r", "c", "m", "ns", "o", "nl", "f", "fn", "num", "t", "len", "nb", "nor", "mn", "na", "v", "an", "nan", "nu", "nw", "nn", "number", "np", "u", "j", "k"], "s": ["a", "sb", "ys", "ats", "js", "p", "w", "r", "ts", "m", "ns", "ies", "rs", "ses", "ins", "sl", "ms", "ls", "abs", "sp", "t", "ss", "S", "parts", "args", "its", "gs", "sq", "sa", "ims", "sv", "xs", "sts", "sis", "cs", "es", "stats", "qs", "ds", "bs"], "l": ["lc", "lu", "lf", "kl", "ql", "ln", "ld", "p", "g", "lb", "L", "r", "c", "ml", "m", "ly", "dl", "o", "nl", "sl", "la", "h", "ls", "b", "hl", "yl", "len", "lis", "rl", "lo", "lp", "li", "fl", "v", "list", "lv", "lang", "lr", "ol", "ll", "il", "le", "u", "pl"], "ans": ["arms", "ades", "ANS", "ians", "ats", "helps", "aus", "ros", "san", "mos", "aned", "ns", "ann", "rans", "mas", "rs", "anas", "leans", "ins", "ons", "ms", "amps", "angs", "ls", "pan", "ens", "uns", " sans", "ados", "an", "anks", "anes", "ays", "ran", "ams", "aos", "aints", "ads", "os", "AN", "ds"], "i": ["a", "mi", " ii", " pi", "xi", "x", "ci", "gi", "p", " k", "di", "ai", "I", " mi", " si", "c", "bi", " di", "ix", "iri", " bi", " ni", "ri", "t", "si", " li", "ii", "li", "ei", "ti", "oi", " vi", "ini", "zi", "\u0438", " ti", "pi", " ki", "id", "j", "k", "ij", "iu", " Xi"]}}
{"code": "n = int(input())\\nif n==1:\\n  ret=\"Hello World\"\\nelif n==2:\\n  a = int(input())\\n  b = int(input())\\n  ret=a+b\\n\\n\\n\\n  \\nprint(ret)", "target": "691", "substitutes": {"n": ["nr", "N", "nt", "gn", "d", "p", "on", "ln", "name", "norm", "ne", "cn", "i", "sn", "c", "z", "m", "ns", "note", "o", "nl", "fn", "nia", "t", "nb", "nor", "no", "mn", "don", "na", "an", "nc", "nm", "all", "nan", "none", "nn", "l", "np", "j", "rn"], "ret": ["alt", "net", "ter", "nt", "str", "lt", "g", "test", "jp", "re", "r", "txt", "sys", "z", "full", "xt", "gt", "res", "Ret", "val", "result", "rets", "cmd", "ft", "erey", "RET", "dt", "quit", "t", "grain", "out", "mont", "int", "det", "lv", "tr", "rest", "it", "rt", "print", "reply", "q", "l", "mem", "pret", "mt", "pro", "back", "ry"], "a": ["aq", "ia", "sta", "ae", "ac", "ja", "ab", "aff", "aj", "ta", "aba", "ach", "va", "ai", "\u00e1", "ma", "ga", "ea", "la", "\u00e4", "alpha", "art", "apa", "an", "A", "ap", "at", "sa", "af", "au", "oa", "aa", "am", "ar", "area", "ba", "ca"], "b": ["bis", "sb", "x", "bf", "ab", "bar", "d", "beta", "lb", "i", "r", "c", "m", "bd", "z", "bi", "fb", "rob", "rb", "f", "bc", "t", "nb", "B", "bb", "v", "e", "hub", "erb", "eb", "ed", "cb", "l", "u", "j", "y", "k", "bs", "ba"]}}
{"code": "x = input()\\nprint(x[0:3])", "target": "775", "substitutes": {"x": ["wx", "n", "xi", "ex", "foo", "p", "xc", "X", "xa", "rx", "w", "c", "ox", "z", "m", "input", "ctx", "tx", "f", "b", "t", "yout", "xxxxxxxx", "zx", "v", "fx", "xy", "s", "ch", "xs", "mx", "q", "xx", "l", "hello", "y", "px", "xf"]}}
{"code": "n = int(input())\\n\\nresult = 0\\nfor i in range(n):\\n    num = i*2\\n    if num > n:\\n        break\\n    hasndivisors = 0\\n    for divisor in range(n):\\n        # print(num+1, divisor+1)\\n        if (num+1)/(divisor+1) == (num+1)//(divisor+1):\\n            hasndivisors += 1\\n    # print(num+1, 'has', hasndivisors, 'divisors')\\n    if hasndivisors == 8:\\n        result += 1\\n\\nprint(result)", "target": "288", "substitutes": {"n": ["a", "nr", "N", "x", "nt", "d", "p", "ne", "g", "sn", "length", "c", "m", "z", "ns", "input", "o", "h", "f", "b", "t", "nia", "len", "nb", "no", "nil", "na", "v", "an", "nc", "nm", "s", "nan", "nu", "size", "nn", "number", "l", "np", "q", "k", "j"], "result": ["answer", "nr", "err", "mult", "test", "Result", "r", "length", "set", "diff", "status", "total", "change", "success", "res", "output", "power", "mask", "count", "integer", "results", "out", "number", "error", "index", "sum"], "i": ["a", "mi", "xi", "x", "p", "di", "ai", "I", "iter", "r", "c", "m", "bi", "ic", "ix", "ip", "ind", "f", "b", "t", "si", "li", "ii", "v", "int", "ti", "im", "it", "ini", "l", "pi", "id", "index", "j", "iu"], "num": ["con", "missing", "um", "mod", "nom", "mult", "test", "uni", "m", "set", "unit", "umi", "total", "nam", "exist", "multi", "NUM", "nb", "si", "valid", "sim", "no", "add", "Num", "final", "nm", "obj", "orig", "msg", "nu", "div", "dim", "number", "tmp", "mon", "index", "temp", "sum"], "hasndivisors": ["hasndiplisors", "hasndiplizors", "hasndiplizators", "hasndivisored", "hasndiplizored", "hasndivisators", "hasndiplisores", "hasndivotores", "hasndivensored", "hasndiplizores", "hasndiplisored", "hasndivensors", "hasndivizores", "hasndivizators", "hasndivensators", "hasndivensores", "hasndivizored", "hasndivotors", "hasndivisores", "hasndivotored", "hasndivizors", "hasndiplisators", "hasndivotators"], "divisor": ["Divissors", "divisioring", "Divisoring", "divissoring", "divissors", "diviscor", "divission", "Divission", "Divissoring", "diviscors", "Division", "divisiion", "divisior", "divisiors", "divisoring", "Divisor", "division", "Divissor", "divissor", "diviscoring", "divisors", "Divisors", "diviscion"]}}
{"code": "N, A, B = map(int,input().split())\\nH = [int(input()) for _ in range(N)]\\n\\ndef solve(k):\\n    cnt = 0\\n    for i in range(N):\\n        if H[i] > B * k:\\n            cnt += (H[i] - B * k - 1) // (A - B) + 1\\n    return cnt <= k\\n\\n\\nleft = 0\\nright = 10 ** 9 + 1\\n\\nwhile left + 1 < right:\\n    mid = (left + right) // 2\\n    if solve(mid):\\n        right = mid\\n    else:\\n        left = mid\\n\\nprint(right)", "target": "51", "substitutes": {"N": ["CNN", "n", "M", "NS", "T", "NI", "Ns", "R", "I", "X", "L", "NA", "NN", "NR", "NT", "V", "TN", "No", "S", "J", "Q", "G", "ND", "P", "Num", "D", "NB", "Y", "Ni", "K", "F", "Z", "C"], "A": ["a", "GA", "M", "T", "An", "IA", "AU", "AT", "R", "I", "X", "AL", "AV", "AB", "W", "AA", "V", "AR", "C", "AS", "S", "J", "Q", "G", "P", "HA", "CA", "E", "JA", "AF", "D", "AM", "Y", "SA", "U", "K", "AC", "BA", "F", "AP"], "B": ["M", "BI", "T", "RB", "BL", "Bs", "SB", "R", "I", "L", "IB", "AB", "BG", "W", "O", "V", "BT", "b", "S", "BC", "BE", "J", "GB", "G", "BR", "WB", "P", "BB", "BM", "E", "TB", "D", "NB", "Y", "DB", "K", "F", "BA", "C"], "H": ["M", "HD", "HM", "SH", "HP", "His", "GO", "HS", "HL", "HE", "RH", "HO", "HI", "GH", "HTML", "NH", "h", "HR", "DH", "V", "TH", "HH", "Q", "G", "History", "HF", "HA", "P", "Hash", "OH", "Han", "HC", "MH", "HB", "High", "K", "HT", "He"], "_": ["x", " e", " j", " pre", " name", " num", "ix", " row", " c", " m", " __", " each", "___", " index", " p", "j", " key", " un", " sub", " z"], "k": ["ck", "km", "ki", "n", "kn", "th", "max", "kr", "keys", "kh", "kl", "x", "p", "g", "ak", "ke", "r", "c", "m", "z", "kw", "ko", "kind", "kb", "f", "b", "num", "kok", "t", "conf", "key", "kj", "v", "kick", "ch", "work", "ku", "q", "wk", "l", "ack", "kk", "ka", "j", "K", "ik", "kan", "ket", "mk", "unk"], "cnt": ["CNT", "Cpt", "cNT", "acct", "cct", "rcnt", "ctpt", "ctNT", "rcpt", "Crt", "acnt", "count", " cNT", "ctrt", "crt", "acpt", " cct", "ctnt", "rcct", " crt", "Cct", "cpt", "acount", " count", "Cnt", " cpt", "Count", "rcount"], "i": ["mi", "n", "xi", "x", "uri", "ci", "gi", "p", "di", "I", "us", "c", "batch", "bi", "info", "ic", "ix", "ip", "ind", "f", "b", "t", "ri", "multi", "si", "sim", "li", "key", "ii", "ji", "ti", "it", "zi", "ini", "ui", "q", "l", "pi", "id", "index", "j", "y", "ik", "ij", "iu", "init"], "left": ["top", "open", "loc", "half", "self", "to", "label", "local", "path", "offset", "lt", "L", "long", "last", "current", "m", "full", "old", "only", "el", "low", "min", "nl", "internal", "ind", "place", "bottom", "level", "main", "len", "initial", "lower", "lo", "inner", "out", "both", "wrong", "list", "st", "new", "lock", "Left", "l", "pl", "le", "id", "index", "shell", "back", "start"], "right": ["over", "top", "next", "reverse", "complete", "max", "n", "before", "correct", "th", "ro", "random", "x", "to", "p", "through", "head", "self", "Right", "med", "short", "R", "rc", "rx", "last", "re", "r", "w", "down", "value", "rd", "full", "rem", "wall", "only", "gt", "res", "result", "bottom", "off", "inner", "remote", "out", "wrong", "all", "final", "width", "row", "rights", "tr", "rest", "end", "first", "ry", "rew", "recent", "rand", "range", "upper", "root", "back", "after", "start"], "mid": ["rid", "next", "mi", "fine", "n", "mr", "mit", "max", "lim", "middle", "mod", "mini", "mm", "sub", "cd", "med", "r", "m", "inv", "full", "mad", "low", "min", "tri", "ms", "val", "h", "dem", "mask", "mer", "main", "ind", "multi", "wid", "rel", "mn", "lo", "gray", "xy", "partial", "end", "none", "high", "ran", "pl", "l", "rand", "id", "Mid", "mt", "late", "hi", "nd", "start"]}}
{"code": "s = input()\\n\\ni = 1\\nans = ''\\nfor x in s:\\n    if i & 1:\\n        ans += x\\n    i += 1\\nprint(ans)", "target": "20", "substitutes": {"s": ["a", " self", "n", "ats", "p", "eds", "fs", "c", "ts", "m", "ns", "rs", "ks", "ses", "ins", "ix", "h", "ms", "ls", "b", "t", "ss", "S", "its", "tes", "v", "gs", "sa", "xs", "ims", "sts", "cs", "es", "os", "qs", "ds", "ps"], "i": ["a", "mi", "ki", "n", "xi", "ia", "ci", "p", " j", "di", "ai", "I", "m", "bi", "yi", "ic", "ix", "o", " bi", "ip", "t", "si", "iu", "ii", "li", "ei", "e", "v", "ti", "it", "ini", "zi", "inx", "pi", "ati", "asi", "j", "y", "ij", "iri", "hi", " Xi", "Xi"], "ans": ["ars", "n", "ANS", "ants", "ats", "ians", "eds", "outs", "aus", "us", "ts", "ates", "ns", "ies", "anus", "ann", "rs", "mas", "anas", "ks", "bian", "ins", "ras", "ons", "ms", "angs", "amps", "ls", "pan", "ents", "ens", "ss", "an", "anks", "anes", "xs", "sv", "ions", "ams", "aos", "ands", "ads", "arts", "os", "es", "ds"], "x": ["a", "xi", "ex", "sh", "sw", "max", "ci", "xe", "xes", "on", "ux", "xc", "xa", "X", "rx", "w", "ox", "z", " ax", "ix", "o", "tx", "pan", "ax", "xd", "yl", "ss", " dx", "Tx", "an", "v", "xy", "ch", "xs", "mx", "dx", "inx", "q", "xx", " cx", "lex", "y", "es", "xf"]}}
{"code": "count=0\\ns=input()\\ntemp = s[0]\\nfor i in range(1,len(s)):\\n    if s[i]!=temp:\\n        count+=1\\n    temp=s[i]\\n\\nif count==0 : print(0)\\nelse : print(count)", "target": "655", "substitutes": {"count": ["find", "hold", "n", "max", "nt", "state", "err", "stat", "d", "cont", "gc", "child", "test", "code", "iter", "value", "ount", "start", "length", "c", "current", "batch", "set", "process", "status", "total", "val", "result", "ind", "f", "num", "t", "multi", "cond", "nb", "valid", "amount", "conf", "list", "cache", "ch", "flag", "found", "size", "counter", "q", "number", "l", "Count", "index", "last", "C", "sum"], "s": ["a", "n", "sb", "ats", "mods", "js", "p", "ains", "eds", "g", "fs", "w", "r", "c", "ts", "m", "ns", "rs", "ses", "save", "ins", "less", "h", "ms", "ls", "f", "b", "abs", "t", "ss", "S", "parts", "its", "strings", "v", "gs", "sq", "e", "aps", "gets", "xs", "sv", "sts", "q", "l", "cs", "os", "stats", "qs", "ests", "ds", "ps", "bs", " inputs"], "temp": ["hold", "max", "p", "mp", "test", "iter", "dest", "w", "tc", "length", "c", "ts", "m", "current", "start", "total", "tim", "input", "min", "output", "cur", "result", "term", "level", "sp", "t", "dat", "pt", "stem", "cum", "out", "v", "Temp", "emp", "ptr", "orig", "tr", "fake", "now", "print", "new", "tmp", "index", "tem", "perature", "sum"], "i": ["mi", "xi", "x", "gi", "di", "ai", "I", "span", "m", "batch", "bi", "yi", "ic", "ski", "ix", "ip", "ind", "multi", "si", "ii", "li", "key", "ji", "v", "ori", "ti", "iy", "im", "it", "zi", "ini", "\u0438", "slice", "pi", "id", "j", "index", "ij", "ik", "iri"]}}
{"code": "import itertools\\nH, W, K = map(int,input().split())\\nS = [list(map(int,list(input()))) for _ in range(H)]\\ndef check(k):\\n    if k <= K:\\n        return(True)\\n    else:\\n        return(False)\\n        \\nnoans = 0\\ndef make_lst(i):\\n    global noans, lst, havelst\\n    temp = S[0][i]\\n    for h in range(H-1):\\n        if y[h]:\\n            lst.append(temp)\\n            temp = S[h+1][i]\\n        else:\\n            temp += S[h+1][i]\\n    lst.append(temp)\\n    if check(max(lst)):\\n        havelst = 1\\n    else:\\n        noans = 1\\n#    print(y,i,lst, \"makelst\")\\n               \\ndef nocut(i):\\n    global cutnum, lst, havelst, noans\\n    prelst = []\\n    temp = S[0][i]\\n    if i == W-1:\\n        if not check(temp):\\n            noans = 1\\n    j = 0\\n    for h in range(H-1):            \\n        if y[h]:\\n            lst[j] += temp\\n            prelst.append(temp)\\n            j += 1\\n            temp = S[h+1][i]\\n        else:\\n            temp += S[h+1][i]\\n        if i == W-1:\\n            if not check(temp):\\n                noans = 1\\n    prelst.append(temp)\\n    lst[-1] += temp\\n    if check(max(lst)):\\n#        print(y,i,lst,\"nocut\", \"cutnum = \",cutnum)\\n        return(True)\\n    else:\\n        cutnum += 1\\n        lst = prelst        \\n#        print(y,i,lst,\"cut\",\"cutnum =\",cutnum)\\n        \\n                 \\nans = float(\"inf\")    \\nfor y in itertools.product((0, 1), repeat=H-1):\\n    havelst = 0\\n    lst = []\\n    cutnum = sum(y)\\n    for x in range(W):\\n        if noans:\\n            break\\n        if havelst:\\n            nocut(x)\\n        else:\\n            make_lst(x)\\n#    print(y,cutnum)\\n    if noans:\\n        noans = 0\\n        continue\\n    else:\\n        ans = min(cutnum, ans)\\nprint(ans)\\n", "target": "329", "substitutes": {"H": ["M", "N", "Eh", "T", "HS", "HE", "X", "R", "I", "L", "HO", "HI", "GH", "TH", "V", "HH", "B", "J", "Wh", "Q", "G", "HA", "P", "A", "OH", "E", "HK", "HC", "MH", "Y", "HB", "F", "HT", "He", "C"], "W": ["WT", "WC", "M", "N", "T", "MW", "WI", "CW", "TW", "WP", "Wi", "w", "WH", "VW", "BW", "V", "WA", "Width", "Wh", "SW", "WB", "G", "P", "WF", "WM", "DW", "EW", "Weight"], "K": ["WC", "M", "N", "T", "We", "KN", "MW", "KR", "X", "R", "L", "KK", "WH", "V", "TN", "MC", "KS", "TH", "PK", "B", "J", "Q", "SK", "G", "P", "A", "E", "HK", "D", "Y", "Weight", "F", "Z", "KE", "C"], "S": ["M", "N", "List", "NS", "T", "SF", "SH", "Statistics", "BS", "SS", "SL", "SB", "R", "I", "X", "L", "RS", "PS", "Si", "SIM", "SI", "TS", "CS", "Set", "GES", "O", "V", "GS", "B", "Q", "G", "P", "SE", "A", "E", "s", "IES", "SP", "SU", "D", "DS", "SA", "SR", "WS", "LS", "String", "Z", "C"], "_": ["x", " the", " y", " j", "w", " length", " long", " x", " l", " time", " m", " w", " __", " each", " it", " p", " he", " key", " un", " z"], "k": ["ck", "km", "n", "kn", "x", "max", "kr", "kh", "kl", "p", "g", "ak", "ke", "zero", "w", "m", "ks", "kw", "ko", "Sk", "t", "kj", "v", "ku", "q", "kk", "ka", "j", "ik", "sk", "ket", "mk"], "noans": ["nons", "Noann", "Noons", "noaps", "woan", "koans", "woann", " noens", "noons", " noaps", " Noan", "kons", "Noaps", "noens", " Noaps", "Noan", "woans", "woens", "koons", "Nons", "Noens", "koan", " Noann", " nons", " noann", "noan", " noons", " Noans", "Noans", " noan", "noann"], "i": ["a", "mi", "n", "xi", "x", "gi", "p", "di", "ai", "I", "c", "m", "info", "ice", "ic", "ix", "o", "ip", "ind", "b", "t", "si", "ii", "li", "ji", "v", "int", "ti", "im", "it", "zi", "\u0438", "l", "pi", "id", "j", "index", "y", "ij", "iu", "hi"], "temp": ["tm", "alt", "stop", "T", "sum", "mod", "mini", "nom", "p", "mm", "maker", "test", "template", "dest", "w", "tc", "txt", "current", "pre", "buffer", "unit", "em", "total", "tim", "input", "make", "output", "cap", "tail", "term", "capacity", "level", "t", "dat", "fac", "pretty", "stem", "pt", "cum", "unt", "hum", "Temp", "emp", "ptr", "Temperature", "tr", "partial", "fake", "sol", "cu", "tmp", "pi", "mem", "relative", "cel", "strength", "cool", "tem", "perature", "deg"], "h": ["history", "ht", "n", "x", "sh", "kh", "p", "hz", "dh", "w", "hs", "c", "z", "m", "ih", "zh", "rh", "hex", "hu", "o", "bh", "go", "b", "num", "hl", "gh", "t", "hp", "v", "oh", "his", "ph", "ha", "ch", "it", "he", "hr", "hd", "q", "ho", "l", "pi", "hh", "id", "y", "j", "index", "hi", "hm"], "havelst": ["haVEList", "havlot", "hacloudot", "havey_", "havelot", "haVELsh", "HAVEList", "HAvelot", "havelno", "havelist", "haVELst", "HAVELot", "HAvelist", "hacloudst", "havlist", "havelsh", "haVEL_", " havelist", "havel_", "HAVELsh", " havelno", "hacloudist", "haVELot", " havel_", "HAvelsh", "haveyno", "havlsh", "haveyist", "hacloudsh", "HAVELst", "haVELno", "haveyst", "havlst", "HAvelst"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nma=max(a)\\nmi=min(a)\\nans=10**9\\n\\nfor i in range(mi,ma+1):\\n    tm=0\\n    for j in a:\\n        tm+=(j-i)**2\\n    else:\\n        ans=min(ans,tm)\\n\\nprint(ans)\\n\\n", "target": "548", "substitutes": {"n": ["N", "x", "ni", "nt", "d", "p", "cn", "sn", "c", "m", "z", "ns", "nl", "b", "num", "t", "nb", "mn", "na", "v", "e", "nc", "nm", "nu", "nn", "q", "l", "k"], "a": ["ia", "sta", "ae", "to", "ac", "ab", "ta", "aj", "p", "ai", "xa", "m", "ata", "eas", "ga", "ea", "la", "aaa", "pa", "b", "t", "apa", "na", "an", "e", "all", "A", "at", "sa", "ao", "ha", "oa", "au", "aa", "l", "am", "es", "area", "ba", "ca"], "ma": ["max", "ia", "me", "ta", "mo", "mm", "mu", "mp", "ama", "ai", "ima", "ema", "m", "ami", "my", "mas", "ga", "ea", "pa", "ms", "la", "fa", "mc", "si", "mma", "apa", "na", "MA", "sa", "ha", "mia", "Ma", "aa", "pi", "ka", "mt", "ca"], "mi": ["ki", "ni", "me", "mid", "mini", "mm", "mp", "ai", "ima", "m", "imi", "ami", "my", "mas", "min", "Mi", "wi", "pa", "mis", "mc", "si", "mn", "li", "ti", "mic", "sa", "ini", "mite", "mia", "mie", "pi", "MI", "mt", "hi"], "ans": ["ANS", "nt", "ants", "ats", "names", "eds", "cn", "acs", "outs", "ai", "xa", "ames", "aus", "nets", "us", "ts", " Ans", "ates", "ns", "vals", "asm", "ann", "ums", "rs", "mas", "anas", "ks", "offs", "ins", "rans", "ses", "ons", "ms", "amps", "ls", "pan", "ents", "ens", "mn", "uns", "na", "an", "posts", "oss", "aps", "anes", "xs", "ions", "ams", "aos", "ands", "am", "ads", "cs", "arts", "os", "es", "lan", "mt", "AN", "asms"], "i": ["xi", "x", "ia", "ie", "ci", "gi", "di", "ai", "I", "m", "bi", "imi", "ami", "info", "ic", "ix", "ip", "iri", "b", "si", "li", "ii", "ji", "ti", "im", "ini", "zi", "phi", "pi", "ij", "ik", "iu", "hi"], "tm": ["him", "ta", "mm", "mp", "fm", "amm", "tv", "hua", "tw", "tc", "txt", "ts", "m", "asm", "em", "tim", "te", "gm", "ms", "tk", "t", "pretty", "si", "htm", "tu", "tn", "ti", "sm", "vm", "tt", "im", "tf", "mx", "lem", "cu", "TM", "mt", "tif", "tem", "temp", "hm", "ym"], "j": ["aq", " ii", "uj", "ja", "js", "aj", "p", "g", "jp", "job", "iaz", "jc", "oj", "z", "m", "jj", "ju", "o", "jl", "f", "je", "b", "t", " Dj", "si", " J", "J", "ii", "ji", "kj", "jas", "v", " ja", "obj", "adj", "q", "l", "pi", "dj", "y", "k", "ij"]}}
{"code": "\\nnum = input().split()\\n \\na = int(num[0])\\nb = int(num[1])\\nc = int(num[2])\\n \\nif a <= b <= c :\\n  print(a,b,c);\\nelif a <= c <= b :\\n  print(a,c,b);\\nelif b <= a <= c:\\n  print(b,a,c)\\nelif b <= c <= a:\\n  print(b,c,a)\\nelif c <= a <= b:\\n  print(c,a,b)\\nelse:\\n  print(c,b,a)", "target": "117", "substitutes": {"num": ["con", "n", "alph", "th", "nt", "su", "um", "nom", "zero", "rat", "sam", "info", "note", "hex", "tim", "nam", "digit", "log", "go", "f", "sel", "t", "NUM", "dat", "form", "no", "part", "block", "ord", "tu", "bit", "check", "na", "Num", "cal", "nm", "al", "om", "prim", "orig", "nu", "div", "number", "mon", "mun", "np", "mat", "mem", "sum"], "a": ["aq", "aut", "n", "ia", "to", "ae", "sta", "ab", "ta", "d", "aj", "p", "ach", "asc", "g", "ai", "ak", "i", "acc", "r", "ma", "m", "el", "eas", "ga", "o", "ea", "la", "ah", "h", "be", "pa", "act", "aaa", "f", "\u00e4", "t", "abs", "alpha", "an", "e", "v", "ad", "A", "al", "ap", "at", "sa", "s", "ch", "app", "oa", "au", "ed", "aa", "l", "am", "ar", "u", "j", "area", "ba", "ca", "ac"], "b": ["n", "sb", "bf", "ab", "bar", "p", "db", "d", "g", "ib", "i", "r", "z", "bi", "wb", "ca", "fb", "bo", "rb", "o", "be", "ob", "go", "br", "f", "bc", "gb", "t", "nb", "B", "bb", "v", "e", "bt", "it", "ch", "cc", "eb", "app", "bl", "cb", "base", "l", "bp", "u", "j", "y", "bs", "ba", "back", "ac"], "c": ["ec", "ctrl", "ce", "con", "lc", "n", "ac", "cat", "ci", "ab", "d", "p", "unc", "cd", "g", "ct", "rc", "i", "arc", "r", "tc", "chain", "z", "m", "fc", "cor", "ic", "o", "col", "h", "cur", "f", "bc", "t", "dc", "mc", "uc", "conf", "disc", "e", "v", "cin", "cache", "cos", "cp", "ch", "s", "cc", "com", "co", "cb", "cu", "l", "u", "cs", "y", "cm", "cr", "cf", "ca", "C", "sc"]}}
{"code": "while 1:\\n    C = input()\\n    if C == \"-\":\\n        break\\n    N = int(input())\\n    for i in range(N):\\n        H = int(input())\\n        C = C[H:] + C[:H]\\n    print(C)\\n\\n", "target": "715", "substitutes": {"C": ["CNN", "WC", "Chain", "M", "CH", "CB", "T", "Cu", "Control", "IC", "CM", "NC", "JC", "CG", "Cow", "Cod", "X", "I", "LC", "L", "CE", "CU", "c", "CI", "CS", "CN", "Cs", "YC", "CV", "Change", "CT", "CP", "V", "VC", "MC", "Ch", "CCC", "BC", "CD", "Charlie", "S", "B", "EC", "Q", "CO", "G", "DC", "P", "A", "CR", "You", "CA", "E", "CON", "Cache", "D", "HC", "CC", "CL", "Y", "Craig", "U", "AC", "F", "COM", "Can"], "N": ["SN", "n", "M", "NS", "NC", "GN", "NI", "Ns", "I", "NA", "L", "NM", "NN", "NR", "CN", "NT", "NH", "V", "TN", "No", "NO", "NE", "B", "Q", "ND", "Num", "NPR", "Sn", "D", "NB", "Ni", "Z", "FN", "NG"], "i": ["n", "x", "ite", "p", "I", "iter", "__", "c", "m", "ix", "h", "ind", "f", "b", "li", "im", "it", "q", "l", "id", "j", "y", "k"], "H": ["M", "CH", "HD", "T", "His", "HS", "HL", "HE", "I", "RH", "L", "HO", "HI", "NH", "W", "h", "HR", "DH", "TH", "V", "Z", "HH", "B", "J", "HA", "P", "A", "Head", "OH", "Host", "Han", "HC", "MH", "HB", "High", "U", "K", "F", "HT", "Hi", "He"]}}
{"code": "N=int(input())\\n*A,=map(int,input().split())\\n\\nans=0\\ni=0\\nj=1\\nwhile i<N:\\n    if A[i]==j:\\n        j+=1\\n    else:\\n        ans+=1\\n    i+=1\\n\\nprint([-1,ans][1 in A])", "target": "749", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "T", "NC", "GN", "NI", "Na", "Ns", "X", "I", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "NF", "V", "TN", "No", "S", "B", "J", "Q", "G", "Num", "P", "Sn", "D", "NB", "Ni", "K", "F", "AN", "Z", "C"], "A": ["a", "GA", "M", "T", "Ax", "An", "AT", "X", "I", "mA", "NA", "L", "R", "AB", "H", "AA", "LA", "PA", "As", "O", "V", "S", "B", "J", "G", "P", "HA", "CA", "At", "E", "JA", "D", "AF", "AM", "Y", "SA", "U", "K", "Array", "Z", "C"], "ans": ["ars", "n", "x", "ANS", "ants", "ats", "ians", "gn", "An", "names", " means", "ai", "aus", "ros", "ts", " Ans", "ns", "ies", "ann", "rs", "anas", "ks", "ins", "nl", "ons", "ms", "ls", "ens", "uns", "can", "an", "gs", "aps", "s", "eps", "xs", "au", "aos", "vs", "yes", "ads", "cs", "os", "es", "AN", "ds", "ones", "ay"], "i": ["a", "mi", "n", "xi", "ci", "gi", "p", "di", "ai", "I", "aci", "m", "bi", "ami", "qi", "ic", "o", "ix", "ip", "b", "t", "multi", "si", "ii", "li", "ji", "v", "ei", "int", "ti", "im", "it", "ini", "zi", "ui", "\u0438", "phi", "pi", "l", "id", "y", "fi", "ij", "index", "iu", "hi"], "j": ["a", "json", "n", "uj", "ja", "js", "aj", "p", "d", "g", "di", "jp", "job", "jc", "m", "z", "jj", "bi", "o", "h", "jl", "f", "b", "br", "t", "si", "J", "bj", "li", "ji", "v", "kj", "s", "jump", "l", "dj", "y", "index", "ij"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nMOD = 10 ** 9 + 7\\nINF = float('INF')\\nsys.setrecursionlimit(10 ** 5)\\n\\n\\ndef main():\\n    s = input()\\n    x, y = map(int, readline().split())\\n    sx, sy = 0, 0\\n\\n    for i in range(len(s)):\\n        if s[i] == \"F\":\\n            sx += 1\\n        else:\\n            break\\n\\n    is_x = False\\n    cur = 0\\n\\n    x_list = []\\n    y_list = []\\n\\n    for i in range(sx + 1, len(s)):\\n        if s[i] == \"F\":\\n            cur += 1\\n        if s[i] == \"T\" or i == len(s) - 1:\\n            if is_x:\\n                x_list.append(cur)\\n            else:\\n                y_list.append(cur)\\n            cur = 0\\n            is_x = not is_x\\n\\n    x_possible = set()\\n    x_possible.add(0)\\n\\n    while x_list:\\n        x_possible_new = set()\\n        cx = x_list.pop()\\n        for px in x_possible:\\n            x_possible_new.add(px + cx)\\n            x_possible_new.add(px - cx)\\n        x_possible = x_possible_new\\n\\n    y_possible = set()\\n    y_possible.add(0)\\n\\n    while y_list:\\n        y_possible_new = set()\\n        cy = y_list.pop()\\n        for py in y_possible:\\n            y_possible_new.add(py + cy)\\n            y_possible_new.add(py - cy)\\n        y_possible = y_possible_new\\n\\n    nx = x - sx\\n    ny = y\\n\\n    if (nx in x_possible) and (ny in y_possible):\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\n\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "753", "substitutes": {"readline": ["writeLine", "printwrite", "writelin", "strlin", "Readstring", " readnl", "printstring", "Readlines", "Readwrite", "printline", " readlines", "readlines", "strLine", "qnl", "readLine", "writelines", " readLine", "writewrite", "strlines", "qLine", "strline", "readerLine", "readerlin", "writestring", "readerline", "printlines", " readlin", "readernl", "readnl", "writeline", "readstring", "readlin", "qline", "Readline", "qlin", "readwrite"], "MOD": ["MAX", "Fun", " scale", "mod", " err", " ALL", "Mod", " STR", " lim", "FD", " base", " LIM", "ALL", "Exp", "SIZE", " reg", "UL", " BASE", "Num", " EXP", " mod", " exp", " LINE", " ret", " SR", "Len", "Bytes", " LOG"], "INF": ["PINFT", "INN", "InFT", " INV", "PINV", "InF", "INFT", "InN", "InV", "PINN", "PINF", "INV", " INN", " INFT"], "s": ["a", "sb", "sw", "ys", "su", "str", "ats", "ports", "mods", "js", "p", "ains", "g", "r", "w", "sys", "c", "ts", "m", "ns", "sam", "rs", "ses", "tests", "less", "ins", "ties", "ords", "h", "ers", "ms", "ls", "f", "b", "sp", "t", "abs", "ss", "S", "parts", "its", "tes", "sc", "rings", "v", "strings", "gs", "sq", "bits", "aces", "ws", "scripts", "ares", "ashes", "sv", "xs", "ists", "sts", "l", "sis", "rates", "os", "es", "stats", "qs", "ds", "ps"], "x": ["wx", "n", "xi", "ex", "p", "ux", "xc", "X", "xa", "rx", "w", "r", "ox", "z", "m", "xt", "ix", "tx", "ax", "f", "t", "v", "e", "fx", "xy", "xs", "mx", "dx", "xx", "xp", "xf"], "y": ["sym", "n", "ty", "ys", "yd", "p", "wy", "sys", "yo", "m", "ies", "yi", "vy", "sky", "ery", "hy", "b", "t", "yl", "uy", "yn", "ey", "gy", "iy", "xy", "ry", "yt", "Y", "yy", "iny", "yx", "yu", "ym"], "sx": ["szx", "tsx", "nrx", "syX", "syxt", "isX", "ssrx", "nX", "ndx", "nsrx", "ssix", " sfx", "srx", "ssx", "sdx", "iswx", "nszx", " srx", "serx", "sX", "isx", "six", " sX", "nsdx", "sex", "sfx", "tsX", "isxt", "nsx", "nzx", " six", "nfx", "sywx", "syx", "cX", "ssfx", "cfx", "seix", "tsfx", " swx", "swx", "ssdx", " sxt", "sxt", "sefx", "sszx"], "sy": ["sym", "asy", "ty", "sh", "ys", "syn", "ury", "wy", "sys", "ky", "yo", "ly", "sky", "ery", "dy", "si", "uy", "sq", "ey", "gy", "ony", "sm", "sty", "fy", "yy", "ry"], "i": ["mi", "ki", "xi", "ia", "uri", "cli", "gi", "ci", "p", "di", "ib", "ai", "I", "c", "m", "bi", "ami", "info", "ic", "ix", "o", "ip", "iri", "t", "ri", "multi", "io", "si", "sim", "ion", "ii", "li", "ji", "ei", "ori", "int", "ti", "oi", "iy", "im", "it", "ini", "zi", "ui", "\u0438", "phi", "pi", "ati", "l", "index", "j", "ij", "iu"], "is_x": ["Is_xx", "Is_y", " is_y", "Is_X", " is_xs", " is_X", "is_xx", "Is_h", " is_ex", "is_y", "is_ex", "Is_x", "is_X", "is_xt", "is_h", " is_xt", "Is_ex", "is_xs"], "cur": ["ctrl", "con", "nr", "ser", "nt", "cat", "str", "ci", "sur", "gc", "cont", " Cur", "ret", "cycle", "ct", "car", "rc", "kar", "tc", "c", "current", "mut", "focus", "cor", "const", "ind", "cmd", "grow", "ctr", "pri", "num", "count", "fac", "tk", "sch", "quit", "ver", "dr", "cut", "Cur", "obj", "ptr", "ur", "tr", "ch", "gr", "char", "cp", "co", "compl", "desc", "div", "cu", "cs", "se", "cr", "pg", "sc"], "x_list": ["ex_lists", "x_left", "x_path", "x_LIST", "ex_chain", "x_log", "ex_List", "x_queue", "ex_log", "x2list", "ex_left", "x5path", "x2lists", "xtxlist", "ex_path", "y_listed", "x_listed", "x5chain", "ex_stream", "x_List", "xtxchain", "y_queue", "x_chain", "y_lists", "xtxpath", "x2List", "x2stream", "ex_list", "x_lists", "x_stream", "x5list", "ex_LIST"], "y_list": ["x_stack", "py_List", "y___set", "y2list", "y___stack", "y_level", "y2level", "y__set", "y___LIST", " y__queue", "y_stack", "y___queue", "y___del", "y__queue", " y_queue", "y___list", "y_del", " y_stack", "y_set", "py_list", "y_listed", "y2listed", "x_listed", " y_del", "y_List", "y2stack", " y__stack", "y_current", "y_LIST", "y_queue", " y__set", "py_current", " y_set", "py_LIST", "y__stack", " y_LIST", " y__list", "y__list", "x_level"], "x_possible": ["x_impused", "x67permaved", "x_Pcould", "x_tpcould", "x_upressed", "x_nairs", "x_preed", "x_pvalid", "x_permaved", "x_matossible", "x_peossible", "x_cpable", "x_pevalid", "x_cpairs", "x67permful", "x_cpadded", "x_perressed", "x_permossible", "x_persossible", "x_Pressed", "x_tpossibility", "x_psadded", "x_tpable", "x_pable", "x_impossible", "x_impressed", "x_spcould", "x_pacted", "x_nressed", "x67paved", "x_permful", "x_psvalid", "x_paved", "x_cpressed", "x_Pacted", "x_permreed", "x_peable", "x_pairs", "x_persreed", "x_Pable", "x_spossibility", "x_spable", "x_persaved", "x_pused", "x_cpvalid", "x_psossible", "x_perossible", "x_mataved", "x_cposed", "x_matful", "x_spossible", "x_psable", "x67permossible", "x_cpossible", "x_tpossible", "x_upused", "x_matreed", "x_Possible", "x_posed", "x67possible", "x67pful", "x_Pused", "x_possibility", "x_pressed", "x_pcould", "x_persful", "x67permreed", "x_pful", "x67preed", "x_peadded", "x_nossible", "x_perosed", "x_upossible", "x_impacted", "x_Possibility", "x_padded", "x_upacted", "x_perairs", "x_nosed"], "x_possible_new": ["x_possiblelyre", "x_possible2known", "x_possible_re", "x_paged_new", "x_paged_New", "x_possible_now", "x_pable_default", "x_possible_default", "x_paged_add", "x_possible2re", "x_possible2new", "x_possible_add", "x_possiblelynew", "x_pable_New", "x_possible_known", "x_pential_new", "x_pential_New", "x_pable_new", "x_possible_New", "x_possiblelyknown", "x_pential_add", "x_paged_now"], "cx": ["scx", "pex", "scxi", "lcpx", "mtx", "scox", "pcex", " cpx", "ptx", " cxml", "pxi", "mox", "pcx", "ccpx", "ctx", "pctx", "cpx", "ccrx", "crx", "lcx", "cex", " crx", "cxy", " cxy", "cxml", "pxml", "cox", " cex", "ccx", "mx", "sctx", "lcrx", "lcxy", "pcxml", " ctx", "cxi", "ccxy", "mxi", "pox"], "px": ["wx", "png", "pack", "pex", "php", "pc", "xc", "ox", "cam", "ctx", "crop", "ix", "pac", "tx", "pan", "ax", "pt", "pid", "pos", "pie", "pps", "fx", "cin", "pixel", "xy", "cp", "xs", "mx", "yp", "xx", "pic", "pi", "yx", "pat", "pot", "ps", "xp", "pdf"], "y_possible": ["y_Panned", "y_perossible", "y_peused", "y_Possible", "y_paausible", "y1possible", "y_Pressed", "y_peossibly", "y_possibly", "y_paike", "y_Pused", "y_peravailable", "y_pected", "y_compossibly", "y_repausible", "y_chaved", "y_upressed", "y_cossible", "y_paved", "y_perreported", "y_upossible", "y_repavailable", "y_chossible", "y_pathossible", "y_Piped", "y1perausible", "y1perreported", "y_paossibility", "y_apanned", "y1perossible", "y_paair", "y1preported", "y_pausible", "y_compossible", "y_peanned", "y_repreported", "y_pused", "y_expossible", "y_paavailable", "y_chected", "y1peravailable", "y_expossibility", "y_apused", "y_panned", "y_expike", "y_pair", "y_apossibly", "y_Pected", "y_paossible", "y_Paved", "y_chressed", "y_possibility", "y_perausible", "y_expair", "y_pavailable", "y_cike", "y_compressed", "y1pausible", "y_apossible", "y_upiped", "y_upossibly", "y_pathaved", "y_piped", "y_Possibly", "y_pike", "y_compiped", "y_cair", "y_repossible", "y_pathressed", "y_pressed", "y1pavailable", "y_cossibility", "y_peossible", "y_pathected", "y_pareported", "y_preported"], "y_possible_new": ["y_pcouldedno", "y_possibility_new", "y_possibleednum", "y_pused_add", "y_possibleedno", "y_pused_more", "y_possibleednext", "y_possible2New", "y_possible64new", "y_possible2new", "y_pused_new", "y_pcouldednew", "y_possibleednew", "y_pcould_next", "y_pcould_num", "y_pcouldednum", "y_possible2more", "y_possibility_next", "y_possible_New", "y_pcould_no", "y_possible_gen", "y_possible2no", "y_pused_old", "y_pcouldednext", "y_possible64num", "y_possible64next", "y_possible_no", "y_possible_again", "y_pused_gen", "y_possible_num", "y_possible64no", "y_possible_more", "y_possible_add", "y_possible2num", "y_possible2old", "y_possibility_again", "y_possible2next", "y_possible_next", "y_pcould_new", "y_pused_New", "y_possibility_add", "y_possible_old"], "cy": ["ce", "cle", "ty", "cro", "cue", "yang", "ci", "ady", "pty", "cow", "cycle", "wy", "ky", "my", "cry", "vy", "cor", "sky", "ery", "hy", "axy", "icy", "zy", "poly", "cin", "gy", "xy", "sty", "cu", "fy", "pse", "yy", "pic", "yx", "psy", "cr", "ry", "chu"], "py": ["mi", "pkg", "ys", "yd", "phy", "api", "pty", "apy", "wy", "Py", "ky", "sys", "pe", "ype", "module", "my", "type", "python", "sky", "axy", "icy", "zy", "poly", "gy", "xy", "ry", "umpy", "yp", "yt", "pse", "yy", "pi", "pic", "pat", "pot", "j", "psy", "ruby", "ym", "kit"], "nx": ["Nx", "nrx", " nix", "nsxd", "nrxd", "dox", " nxd", "nxx", "dxs", "nsx", "nrix", " nax", "dxx", "nsax", "Nxx", "Nxs", "nnxs", "nsix", "nnxx", "nnx", "nrax", "nxs", "dx", "nox", "nix", "nxd", "nax", "nnox", "Nox"], "ny": ["nr", "ty", "ys", "ni", "yer", "ady", "yne", "wy", "ky", "yz", "ns", "my", "vy", "sky", "ery", "axy", "nit", "ot", "uy", "na", " Ny", "gy", "xy", "yt", "nn", "yy", "nex", "fy", "yx", "yth", "psy", "NY", "ry"]}}
{"code": "\\nurl = \"https://atcoder.jp//contests/abc094/tasks/abc094_a\"\\n\\ndef main():\\n    t = list(map(int, input().split()))\\n    for i in range(t[1]):\\n        tmp = i + t[0]\\n        if tmp == t[2]:\\n            print('YES')\\n            exit()\\n    print('NO')\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "488", "substitutes": {"url": ["json", "str", "api", "file", "g", "server", "href", "html", "mail", "https", "email", "ref", "src", "dl", "xml", "http", "URL", "sl", "host", "f", "hl", "web", "feed", "Url", "www", "ssl", "ur", "base", "id"], "t": ["ut", "n", "ty", "ter", "T", "nt", "ta", "table", "p", "g", "test", "ct", "td", "txt", "ts", "z", "set", "m", "type", "total", "te", "ties", "tree", "tp", "term", "dt", "tg", "f", "pt", "ot", "tu", "tap", "list", "at", "tt", "tr", "it", "tf", "rt", "st", "title", "q", "l", "ent", "types", "j", "mint", "temp", "trace"], "i": ["a", "mi", "ki", "n", "x", "gi", "p", "di", "I", "r", "c", "m", "z", "bi", "qi", "yi", "ind", "f", "b", "num", "li", "ii", "v", "int", "s", "im", "it", "zi", "q", "l", "pi", "u", "id", "j", "index", "k", "ij"], "tmp": ["cmp", "perm", "nt", "prev", "nom", "mp", "test", "this", "txt", "unique", "m", "mut", "img", "old", "prefix", "prime", "mb", "aaa", "term", "num", "sp", "pretty", "nb", "temp", "conf", "important", "out", "cache", "qq", "obj", "emp", "tt", "needed", "np", "etc", "mk"]}}
{"code": "print(+(' 1\\n'in[*open(0)][1]))", "target": "571", "substitutes": {}}
{"code": "from sys import stdin\\ndef main():\\n    #\u5165\u529b\\n    readline=stdin.readline\\n    t=list(readline().strip())\\n    for i in range(len(t)):\\n        if t[i]==\"?\":\\n            t[i]=\"D\"\\n    \\n    print(\"\".join(t))\\n\\nif __name__==\"__main__\":\\n    main()", "target": "678", "substitutes": {}}
{"code": "def main():\\n    N, K = map(int, input().split())\\n    R, S, P = map(int, input().split())\\n    d = {'r': R, 's': S, 'p': P}\\n    T = input()\\n    scores = []\\n    for t in T:\\n        if t == 'r':\\n            scores.append('p')\\n        elif t == 's':\\n            scores.append('r')\\n        else:\\n            scores.append('s')\\n    for i in range(N-K):\\n        if scores[i] == scores[i+K]:\\n            scores[i+K] = 0\\n    print(sum([d[v] for v in scores if v in ['p', 'r', 's']]))\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "383", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "Ne", "NC", "GN", "NI", "I", "NA", "L", "NN", "NP", "NR", "NT", "NH", "V", "No", "NO", "G", "Num", "D", "NB", "MN", "Ni", "TN", "NG", "C"], "K": ["M", "KN", "Key", "KR", "MK", "AK", "Max", "KEY", "I", "X", "L", "Context", "One", "KK", "ANK", "KT", "WH", "TC", "H", "FK", "Used", "KING", "V", "KS", "KC", "PK", "Kent", "IK", "B", "Q", "SK", "J", "ICA", "G", "E", "Mask", "HK", "VK", "D", "UK", "k", "Java", "F", "AC", "KI", "Z", "KE", "KA", "KB", "C"], "R": ["M", "TR", "RG", "JR", "Right", "I", "L", "RS", "RI", "r", "RM", "Repl", "Rs", "RA", "RE", "GR", "V", "IR", "AR", "RT", "BR", "RL", "RR", "D", " r", "RO", "MR", "Dr", "Run", "Mr", "SR", "C"], "S": ["Source", "NS", "Socket", "SF", "SS", "SL", "SB", "SER", "Sl", "SO", "RS", "SIM", "Si", "Sel", "Su", "SI", "SAN", "Set", "SM", "OS", "GS", "Ins", "States", "SC", "SK", "Sing", "SSL", "SE", "s", "SU", "SP", "ST", "Sort", "South", "SR", "C", " s"], "P": ["PU", "p", "PL", "Power", "TP", "I", "Port", "PRE", "L", "PH", "PS", "NP", "Pl", "PT", "H", "PA", "PUT", "V", "C", "Pers", "Pro", "B", "Part", "A", "PP", "PF", "D", "PO", "Y", "PD", "Pod", "PR", "AP"], "d": ["fd", "n", "p", "db", "g", "di", "td", "dh", "r", "w", "c", "m", "bd", "z", "dl", "o", "h", "dt", "done", "f", "b", "df", "dat", "da", "pd", "de", "ad", "des", "s", "dx", "D", "do", "l", "dd", "sd", "did", "dict", "ds", "rd"], "T": ["WT", "M", "I", "X", "L", "FT", "TS", "PT", "VT", "TC", "H", "W", "V", "Z", "TV", "B", "G", "A", "E", "TT", "XT", "TA", "D", "TM", "Y", "GT", "F", "HT", "TN", "C"], "scores": ["ascors", " scodes", "SCales", "captores", " unscubes", "captors", "scards", "scidates", "SCores", "escores", " Scores", "scales", " scions", "captases", "Scales", " Scats", " Scards", "scodes", "scions", "scates", "captategories", "explales", "codes", " scats", " unscatters", "scors", "cales", "scases", " scatters", "explores", "escards", "scubes", "escors", "Scizes", "captatters", " unscores", "captards", "ascores", "SCors", "Scores", "Scors", "explates", " scases", " scates", "cabilities", "SCards", " scales", "Scategories", " scabilities", "ascases", "ascategories", "escions", "Scodes", "Scards", "scategories", " scors", "scizes", "Scates", " scubes", "escats", "scats", "scabilities", " scidates", "escatters", "categories", " scizes", " unscidates", " Scubes", " Scions", " scards", " scategories", " Scidates", "explizes", "Scabilities", "scatters", " Scatters", "cores"], "t": ["a", "alt", "n", "ter", "nt", "ta", "p", "on", "lt", "name", "test", "qt", "ct", "typ", "td", "r", "wt", "c", "ts", "type", "ant", "gt", "te", "o", "tp", "let", "dt", "pt", "ot", " ot", "ti", "at", "tt", "it", "s", "st", "rt", "title", "l", "lat", "y", "ft"], "i": ["mi", "ki", "n", "xi", "x", "me", "ci", "gi", "di", "ai", "I", "uni", "m", "batch", "bi", "info", "qi", "ic", "ix", "ip", "h", "ind", "f", "b", "multi", "si", "sim", "ii", "li", "ori", "int", "ti", "ei", "im", "it", "ini", "zi", "ui", "\u0438", "l", "pi", "phi", "item", "id", "j", "index", "y", "k", "ij", "fi", "iu", "hi", "chain"], "v": ["qv", "x", "ex", "gu", "vv", "vert", "p", "cont", "vi", "name", "vp", "tv", "g", "va", "vo", "qu", "value", "we", "test", "w", "uv", "c", "vector", "m", "z", "ev", "o", "h", "val", "V", "vr", "cv", "f", "b", "vc", "iv", "ver", "av", "nv", "e", "ti", "lv", "sv", "ve", "q", "l", "var", "u", "ov", "j", "vt", "y", "k"]}}
{"code": "data = int(input())\\narray = [int(i) for i in input().split()]\\ndiv2 = 0\\ndiv4 = 0\\nfor i in array:\\n  if i%4==0:\\n    div4 += 1\\n  elif i%2==0:\\n    div2 += 1\\nif data-max(div2-1,0) <= div4*2+1:\\n  print('Yes')\\nelse:\\n  print('No')", "target": "612", "substitutes": {"data": ["a", "n", "x", "to", "str", "d", "action", "name", "di", "image", "raw", "scale", "length", "ma", "batch", "DATA", "ata", "input", "window", "format", "total", "step", "default", "bytes", "num", "dat", "time", "auto", "len", "rel", "t", "no", "bool", "na", "xy", "div", "size", "id", "float", "index", "area", "Data"], "array": ["history", "a", "instance", "file", " Array", "arr", "series", "ai", "image", "r", "vector", "map", "section", "input", "window", "audio", "angular", "auto", "record", "grid", "v", "list", "string", "archive", "row", "each", "hash", "axis", "collection", "ar", "range", "index", "ray", "Array", "area", "rays"], "i": ["a", "mi", "ki", "n", "xi", "x", "\u00ed", "uri", " ii", "gu", "cli", "gi", "ci", "p", "di", "uli", "ai", "I", "c", "ami", " di", "yi", "iti", "ic", "o", "ip", " bi", "t", "ri", "multi", "io", "si", "iu", "ii", "li", "ji", "v", "e", "ei", "ti", "oi", "adi", "ori", "key", "iy", "ini", "zi", "ui", "\u0438", "l", "pi", "phi", "ati", "u", "id", "j", "index", "fi", "iat", "ij", "aii", "iri", "hi", " Xi", "Xi"], "div2": ["dev1", "dev3", "div3", "div5", "DIV5", "Div2", "Div4", "Div1", "DIV2", "div1", "dev4", "DIV1", "DIV4", " div1", "dev2", "dev5", " div3", "Div3", " div5"], "div4": ["dev1", "dev3", "dim3", "division1", "dev04", "div3", "dom32", "dev64", "div32", "DIV2", "dim4", "div1", "dom1", "dom2", "DIV1", "dev4", "division2", "DIV4", "dim04", " div1", " div32", "dev2", "div04", "dim2", "DIV32", "division64", " div04", " div3", "dom4", " div64", "division4", "div64"]}}
{"code": "Q, H ,S, D = map(int, input().split())\\nN = int(input())\\n\\ntmp = [Q*4, H*2, S]\\nm = min(tmp)\\n\\nif N == 1:\\n    print(m)\\nelse:\\n    print(min(m*2, D) * (N//2) + m*(N%2))", "target": "404", "substitutes": {"Q": ["Que", "M", "CH", "IX", "T", "MQ", "Queue", "X", "R", "L", "Qual", "Query", "V", "QB", "B", "J", "G", "P", "Question", "A", "E", "q", "Y", "Qu", "IQ", "K", "F", "Z", "QU", "C"], "H": ["M", "CH", "HQ", "T", "FH", "SH", "Al", "HP", "His", "HS", "HL", "HE", "HO", "HI", "GH", "NH", "h", "HR", "DH", "TH", "V", "HH", "G", "HA", "P", "Host", "OH", "Y", "HB", "High", "K", "HT", "Hi", "He"], "S": ["M", "NS", "T", "SS", "SL", "Sl", "SER", "R", "X", "SO", "L", "I", "Si", "SI", "OS", "V", "B", "SK", "G", "P", "A", "E", "s", "SU", "SP", "DS", "Y", "SA", "K", "SR", "Z", "C"], "D": ["M", "DL", "T", "d", "DO", "DIR", "R", "I", "DE", "L", "X", "DI", "W", "V", "Do", "DA", "B", "DP", "J", "G", "DD", "Dir", "DN", "P", "E", "Ds", "DS", "DM", "DF", "DB", "F", "Z", "C"], "N": ["SN", "M", "n", "NS", "NL", "T", "NV", "NC", "GN", "NI", "Ns", "X", "NA", "L", "NM", "Number", "NN", "NP", "NR", "CN", "NT", "NH", "W", "O", "V", "NO", "NUM", "NE", "Num", "Network", "NB", "Y", "Size", "MN", "Ni", "K", "TN", "C"], "tmp": ["stuff", "pkg", "cmp", "mint", "perm", "nt", "js", "p", "table", "mp", "txt", "pre", "map", "mut", "img", "mb", "cur", "cv", "buf", "abs", "sp", "t", "temp", "cache", "Temp", "MP", "emp", "obj", "terms", "cp", "tt", "fake", "csv", "buff", "etc", "np", "yy", "zip", "mk"], "m": ["tm", "mi", "M", "mr", "n", "me", "mod", "dm", "d", "p", "mm", "mu", "mo", "mp", "g", "i", "r", "c", "ma", "mut", "em", "min", "gm", "h", "ms", "mean", "f", "b", "t", "mc", "mn", "v", "int", "om", "sm", "msg", "lem", "q", "l", "j", "md", "mt", "cm", "mk", "ym"]}}
{"code": "n,k = [ int(x) for x in input().split() ]\\nif k==1: print( 0 )\\nelse: print( n-k )", "target": "739", "substitutes": {"n": ["N", "nt", "ln", "d", "p", "ne", "cn", "g", "i", "sn", "w", "c", "r", "m", "z", "ns", "o", "h", "f", "b", "num", "t", "nb", "mn", "na", "v", "nan", "nu", "nn", "q", "l", "np", "ll", "j"], "k": ["ck", "km", "ki", "ek", "max", "kr", "kh", "kl", "p", "ak", "i", "ke", "r", "c", "m", "dk", "ks", "kw", "ko", "kind", "kb", "kok", "mc", "t", "mn", "kj", "v", "ikk", "ku", "q", "kk", "ka", "j", "K", "ik", "sk", "mk", "unk"], "x": ["wx", "xi", "ex", "any", "xe", "p", "xes", "ux", "xc", "X", "xa", "i", "rx", "ox", "z", "xt", " ax", "ctx", "ix", "tx", "ax", "xd", "t", "v", "e", "fx", "xy", "xs", "mx", "xb", "dx", "xx", "y", "px", "xp", "xf"]}}
{"code": "s = int(input())\\n\\ny1 = int(1e9)\\nx2 = s//y1 + (0 if s == int(1e18) else 1)\\n\\nx1 = 1\\ny2 = x2*y1-s\\n\\nans = [0, 0, x1, y1, x2, y2]\\n\\nprint(\" \".join(map(str, ans)))", "target": "638", "substitutes": {"s": ["a", "n", "sb", "x", "sw", "str", "ats", "d", "p", "g", "i", "w", "r", "c", "ts", "m", "z", "ns", "south", "rs", "ins", "less", "h", "ls", "f", "b", "sp", "t", "S", "ss", "si", "its", "sc", "v", "e", "gs", "sq", "ws", "xs", "q", "l", "cs", "se", "y", "j", "ps"], "y1": [" y3", "ny0", " y0", "gyMap", "y3", "ny001", "ny1", "Y11", "ny01", "sky001", "gy1", "sky01", "sky1", "x0", " y11", "sky2", "Y3", "ny2", "y01", "yyMap", "Y2", "y001", "ny11", "yy1", " y01", "Y1", "Y0", "gy0", "yMap", "nyMap", "y11", "y0", "x3", " y001", "yy0", "gy001", "yy001"], "x2": ["ox256", "rx2", "z4", "x256", " x3", "rx4", "ix1", "ox2", "ix256", " x6", "rx1", "xy3", "z0", "z1", "xy1", "z2", " x4", "rx3", "x0", "xy4", "ix2", " x0", "ox6", "ix6", "ox1", "y4", "y0", "x3", "x4", " x256", "xy2", "x6"], "x1": ["dx01", "dxone", "ex2", "ex1", "dxOne", "xone", " xOne", "x01", "exone", " x01", " xone", "y01", "dx2", "xOne", "dx1", "exOne"], "y2": ["iy5", "oy32", "vy2", "ty22", "y32", " y5", "yv", "oy1", "oy22", "oy2", "vy4", "y5", " y4", "ty2", "vy5", " y32", "y22", "iy2", "y4", "ty1", "ty32", "vyv", "iyv", "iy4", " y22", " yv"], "ans": ["ars", "ys", "ANS", "ants", "ats", " means", "eds", "outs", "ai", "aus", "us", "aned", "ane", " Ans", "san", "ns", "ann", "rans", "ks", " spans", "anas", "ins", "ses", "ras", "ons", "ms", "ls", "ens", " sans", "uns", "can", "an", " sins", "anes", "ays", "nas", "aos", "os", "lan", "ds", "ps"]}}
{"code": "n = int(input())\\n\\nt = [0 for i in range(n)]\\na = [0 for i in range(n)]\\n\\nfor i in range(n):\\n    t[i],a[i] = map(int,input().split())\\n\\nt_num = t[0]\\na_num = a[0]\\n\\nfor i in range(1,n):\\n    k = max(-(-t_num//t[i]),-(-a_num//a[i]))\\n    #\u305d\u306e\u6bd4\u306b\u7968\u3092\u5408\u308f\u305b\u308b\\n    t_num,a_num = k*t[i],k*a[i]\\n\\nprint(t_num + a_num)\\n", "target": "128", "substitutes": {"n": ["nr", "N", "x", "nt", "ni", "ln", "d", "p", "ne", "cn", "g", "sn", "r", "c", "w", "m", "ns", "o", "nl", "num", "nia", "len", "nb", "no", "mn", "na", "v", "an", "nc", "nu", "nn", "l", "np", "j"], "t": ["ty", "T", "nt", "ta", "table", "g", "test", "ct", "td", "wt", "txt", "tc", "ts", "gt", "te", "tp", "tree", "trans", "dt", "tg", "f", "tab", "pt", "ot", "tu", "bt", "tn", "at", "tt", "tr", "tf", "rt", " T", "q", "kt", "tmp", "mat", "ent", "j", "vt"], "i": ["mi", "ki", "xi", "x", "ia", "uri", "me", "gu", "ci", "gi", "ir", "p", "di", "ai", "I", "iter", "this", "m", "batch", "ami", "bi", "yi", "info", "iti", "qi", "ic", "o", "ix", "ip", "iri", "f", "ri", "io", "si", "sim", "li", "ii", "ji", "ei", "e", "int", "ti", "ori", "im", "it", "zi", "ui", "ini", "slice", "phi", "pi", "il", "u", "id", "y", "j", "ik", "ij", "iu", "hi"], "a": ["ae", "ab", "ta", "p", "va", "ai", "w", "ma", "m", "ata", "eas", "ga", "o", "aux", "pa", "aaa", "la", "fa", "abs", "b", "f", "alpha", "da", "apa", "na", "an", "att", "all", "A", "ap", "at", "sa", "af", "ao", "s", "app", "au", "oa", "aa", "l", "am", "u", "es", "area", "ba", "ca", "ac"], "t_num": ["t9rat", "t_nb", " t2um", "t64rat", "t__hex", "t2num", "t64cum", " t_hex", " t_um", "ta64nb", "t_um", " t_gen", "t_rat", "t2hex", "t___num", "t_hex", "t___hex", "t_cum", "t9nb", "t_gen", "t___um", "ta_cum", "t__num", "t___gen", "t6cum", "t__gen", " t2hex", "t2gen", "t6nb", "t64nb", "ta64cum", "t9num", "t9cum", "ta_rat", "ta64num", "t6num", "t6rat", "ta_nb", "ta64rat", "t64num", "ta_num", "t__um", "t2um", " t2gen", " t2num"], "a_num": ["immbin", "i_bin", "ammnum", "ha_num", "ha_cal", "i_num", "a_cal", "a2bin", "a_np", "a2np", "a67Num", "i_Num", "ammnp", "a_cat", "a___cat", "a2num", "a_bin", "ammbin", "a67bin", "immNum", "a67num", "anetcat", "immnp", "a2Num", "a___num", "immnum", "a_Num", "i_np", "a___cal", "ammNum", "anetnum", "ha_na", "a___na", "a_na", "ha_cat", "anetna", "a67np", "anetcal"], "k": ["km", "kn", "kl", "p", "g", "w", "m", "z", "set", "kw", "ko", "f", "conf", "key", "kj", "v", "conv", "gain", "q", "l", "kk", "id", "ka", "j", "K", "ik", "ij", "loss"]}}
{"code": "n = int(input())\\na = n//11\\nprint(2*a if n%11==0 else 2*a+1 if n%11<=6 else 2*a+2)", "target": "241", "substitutes": {"n": ["N", "x", "nt", "gn", "ln", "d", "p", "on", "ne", "cn", "g", "dn", "i", "sn", "w", "c", "r", "m", "z", "ns", "note", "o", "h", "f", "b", "num", "t", "nb", "nor", "no", "mn", "non", "na", "v", "an", "nc", "s", "nan", "nu", "nw", "size", "nn", "l", "np", "j", "k", "rn"], "a": ["ce", "x", "ia", "sta", "ae", "ac", "ava", "ab", "aff", "ta", "p", "aba", "ach", "ai", "xa", "i", "w", "c", "ma", "m", "ga", "window", "o", "ea", "f", "b", "\u00e4", "t", "alpha", "da", "out", "na", "an", "A", "al", "ap", "at", "sa", "af", "au", "oa", "aa", "l", "am", "ar", "aw", "ast", "ya", "area", "ba", "ca"]}}
{"code": "def main():\\n    n = int(input())\\n    l = list(map(int, input().split()))\\n    l.sort(reverse=True)\\n    ans = 0\\n    for i in range(1, 2*n, 2):\\n        ans += l[i]\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "215", "substitutes": {"n": ["nr", "N", "net", "nt", "gn", "ln", "d", "ne", "cn", "sn", "c", "m", "ns", "nl", "num", "t", "len", "nb", "no", "mn", "non", "na", "nc", "nu", "nw", "nn", "ll", "np", "j", "nd"], "l": ["lc", "ln", "ld", "lt", "p", "g", "lb", "L", "lines", "c", "ml", "ly", "m", "dl", "el", "lit", "nl", "sl", "la", "ls", "b", "t", "lis", "rl", "lo", "lists", "lp", "li", "fl", "v", "list", "lv", "s", "lr", "bl", "pl", "ll", "le", "line"], "ans": ["ars", "ANS", "ants", "ats", "gn", "ean", "beans", "ana", "names", "ais", "eds", "acs", "ai", "aus", "ros", "aned", "ns", "ann", "rans", "ums", "anas", "ks", "offs", "ins", "ras", "vers", "ons", "ms", "amps", "mean", "pan", "ls", "ents", "ens", "cas", "can", "an", "posts", "anks", "oss", "anes", "nan", "ran", "nas", "aos", "ads", "arts", "lan", "AN", "sum"], "i": ["mi", "ki", "xi", "x", "ci", "gi", "vi", "di", "ai", "I", "m", "bi", "yi", "qi", "ic", "ip", "ind", "multi", "si", "li", "ii", "ji", "v", "ori", "ti", "s", "im", "zi", "ini", "ui", "pi", "id", "j", "k", "ij", "iri"]}}
{"code": "###template###\\nimport sys\\ndef input(): return sys.stdin.readline().rstrip()\\ndef mi(): return map(int, input().split())\\n###template###\\n\\nN = int(input())\\nA = input()\\nB = input()\\nC = input()\\n\\nans = 0\\nfor a, b, c in zip(A, B, C):\\n  ans += len(set((a,b,c)))-1\\n\\nprint(ans)\\n\\n", "target": "648", "substitutes": {}}
{"code": "import sys\\n\\n\\ndef solve(inp):\\n    A = list(map(int, inp.readline().strip().split(' ')))\\n\\n    if A[0] <= A[2] <= A[1]:\\n        return \"Yes\"\\n    else:\\n        return \"No\"\\n\\n\\ndef main():\\n    result = solve(sys.stdin)\\n    if result:\\n        print(result)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "706", "substitutes": {"inp": ["insp", " inps", "outf", " inh", "outp", "insP", "inv", "outh", " inP", "ginps", "insv", "inh", " Inp", "insf", "outv", " Inh", " Inv", "insh", "inP", "insps", " Inf", "inps", "ginh", "inf", "ginp", "ginP"], "A": ["a", "GA", "ETA", "M", "Answer", "An", "IA", "Alpha", "Abs", "AU", "AT", "X", "R", "mA", "NA", "L", "ACC", "AV", "What", "AB", "AE", "H", "AA", "LA", "As", "V", "WA", "C", "AS", "EA", "B", "G", "ACE", "HA", "P", "CA", "At", "AY", "JA", "AF", "TA", "au", "ATA", "AM", "SA", "AC", "ACT", "AN", "BA", "Array", "AP"], "result": ["answer", "our", "complete", "feature", "ter", "correct", "sign", "match", "ret", "score", "test", "successful", "Result", "re", "value", "r", "certain", "comb", "report", "evaluate", "runner", "diff", "status", "mate", "message", "cor", "success", "res", "output", "cert", "default", "either", "case", "successfully", "response", "valid", "memory", "results", "null", "search", "final", "cache", "row", "date", "public", "group", "error", "data", "relation"]}}
{"code": "n, p = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nlength = len(a)\\neven = len([i for i in a if i % 2 == 0])\\nodd = len([i for i in a if i % 2 == 1])\\n\\nif length == even and p == 1:\\n    print(0)\\nelif length == even:\\n    print(2 ** n)\\nelse:\\n    print(2 ** n // 2)", "target": "515", "substitutes": {"n": ["nr", "N", "x", "nt", "d", "cn", "g", "dn", "w", "sn", "c", "m", "ns", "o", "h", "b", "num", "t", "len", "nb", "nor", "mn", "non", "na", "v", "an", "nc", "s", "nu", "nn", "l", "number", "np", "j", "y", "k", "pn"], "p": ["d", "pc", "g", "jp", "r", "w", "c", "m", "par", "power", "o", "tp", "pa", "h", "b", "num", "t", "count", "lp", "v", "P", "cp", "q", "l", "pi", "np", "k", "j", "y", "pn", "pp", "ps"], "a": ["iii", "ia", "ae", "ac", "ja", "ab", "ta", "d", "ana", "va", "ai", "xa", "r", "w", "c", "ma", "m", "z", "ica", "ita", "ata", "ga", "o", "ea", "la", "aaa", "h", "fa", "ada", "f", "b", "t", "apa", "na", "an", "e", "ei", "all", "A", "iona", "qa", "sa", "s", "at", "au", "oa", "aa", "l", "pi", "am", "j", "ya", "array", "area", "ack", "ba", "ca"], "length": ["th", "half", "always", "ength", "d", "short", "L", "long", "position", "period", "z", "full", "type", "total", "shape", "Length", "angle", "ENGTH", "distance", "h", "capacity", "f", "level", "duration", "time", "count", "len", "amount", "lp", "li", "address", "width", "al", "height", "ngth", "partial", "size", "phi", "l", "pi", "number", "np", "pp", "square", "function"], "even": [" Even", "pair", "vert", "match", "put", " evenly", "own", "day", "regular", "ven", "left", "true", "zero", "pen", "long", "down", "daily", "certain", "section", "diff", "floor", "only", "Even", "two", "main", "double", "days", "close", "integer", "no", "lower", "null", "both", "ten", "up", "normal", "straight", "debug", "equal", "first", "high", "one", "pl", "number", "fixed", "zen"], "i": ["iki", "ki", "xi", "x", "ia", "ine", "ci", "gi", "cli", "ir", "name", "di", "ai", "I", "c", "m", "bi", "yi", "iti", "ic", "o", "ip", "ri", "t", "multi", "io", "si", "ii", "li", "ji", "v", "key", "ei", "ti", "oi", "adi", "im", "it", "zi", "ini", "ui", "phi", "pi", "ati", "id", "y", "iat", "fi", "ij", "ik", "iu", "hi", " Xi"], "odd": ["ie", "dds", "d", "own", "zero", "diff", "ind", "ew", "auto", "integer", "eight", "no", "off", "unknown", "int", "nd", "und", "equal", "other", "div", "dd", "error", "neutral", "fixed", "unk", "ow"]}}
{"code": "s=input()\\nprint('Heisei' if eval(s.replace('/','')+'<=20190430') else 'TBD')", "target": "545", "substitutes": {"s": ["n", "sb", "x", "str", "ats", "d", "p", "g", "i", "w", "r", "c", "ts", "z", "m", "rs", "input", "sl", "h", "f", "b", "t", "S", "ss", "v", "e", "sq", "gs", "string", "ashes", "sv", "st", "q", "l", "qs", "ds"]}}
{"code": "n, k = map(int, input().split())\\na = list(map(int, input().split()))\\ndp = [None]*(k+1)\\nind = 0\\nwhile ind<a[0]:\\n    dp[ind] = False\\n    ind += 1\\nfor i in range(ind, k+1):\\n    for j in a:\\n        if i-j<0:\\n            dp[i] = False\\n            break\\n        if not dp[i-j]:\\n            dp[i] = True\\n            break\\n    else:\\n        dp[i] = False\\nprint('First' if dp[k] else 'Second')\\n", "target": "93", "substitutes": {"n": ["nr", "N", "x", "nt", "ni", "d", "p", "cn", "g", "sn", "c", "m", "z", "ns", "o", "nl", "b", "num", "fn", "t", "nb", "mn", "na", "v", "nc", "nn", "l"], "k": ["ck", "km", "ki", "ek", "kn", "kr", "kh", "kl", "ijk", "p", "ak", "ke", "kid", "m", "dk", "ks", "kw", "ko", "kind", "num", "kok", "mn", "conf", "kj", "v", "ok", "it", "gain", "ku", "q", "kt", "u", "kk", "ka", "K", "ik", "sk", "kg", "kan", "ack", "mk", "unk"], "a": ["ia", "sta", "ae", "ac", "ab", "ta", "d", "p", "g", "va", "ai", "xa", "ma", "ata", "ga", "ea", "pa", "aaa", "b", "apa", "na", "an", "all", "A", "ap", "at", "sa", "s", "another", "au", "oa", "aa", "l", "am", "ar", "y", "ba", "ca"], "dp": ["pkg", "imp", "dm", "d", "p", "db", "broad", "cd", "vp", "di", "dial", "jp", "sup", "deep", "dh", "password", "dl", "fp", "pb", "dk", "iw", "gp", "bsp", "wd", "tp", "decl", "ip", "pa", "dt", "cmd", "df", "xd", "dc", "dep", "isp", "pas", "hp", "DP", "wp", "lp", "pd", "dr", "params", "DC", "delay", "deb", "cp", "eps", "csv", "dq", "yp", "bp", "dd", "dj", "du", "pp", "ds", "ps", "adr"], "ind": ["loc", "hold", "draw", "err", "mod", "ld", "d", "dir", "di", "typ", "iter", "inc", "cod", "set", "old", "make", "Ind", "pred", "inst", "mind", "ix", "ins", "send", "kind", "bind", "pr", "fr", "num", "sp", "count", "cond", "pt", "sim", "ord", "pos", "ff", "ill", "att", "add", "int", "ad", "ji", "IND", "butt", "red", "adj", "und", "it", "inn", "req", "roll", "buff", "ent", "id", "index", "ij", "md", "pp", "nd", "init", "wind", "start"], "i": ["mi", "ki", "xi", "x", "ia", "ni", "ci", "gi", "p", "di", "ai", "I", "m", "bi", "ami", "yi", "qi", "iti", "ic", "ix", "ip", "iri", "io", "si", "hi", "li", "ii", "v", "int", "ti", "im", "it", "ini", "zi", "ui", "pi", "u", "id", "y", "ik", "ij", "asi", "iu", "index", "fi"], "j": [" iii", " ii", " dj", "x", "uj", "ja", "ie", "js", "aj", "p", "g", "jp", "jc", "oj", "z", "jj", "bi", "ju", "o", "h", "jl", "f", "b", "t", " Dj", "si", "J", "bj", "li", "ji", "kj", "v", "jas", " vi", "q", "l", "dj", "y", "ij", "iu"]}}
{"code": "A,B,C = (int(T) for T in input().split())\\nprint(min(A+B,B+C,C+A))", "target": "269", "substitutes": {"A": ["a", "GA", "M", "N", "Am", "An", "Al", "IA", "Ar", "AH", "AU", "AT", "R", "I", "Av", "L", "AD", "AL", "AV", "AB", "App", "AE", "H", "AA", "As", "AI", "AR", "V", "AS", "S", "Q", "G", "HA", "P", "CA", "At", "E", "AF", "D", "AM", "SA", "U", "AC", "F", "BA", "AN", "Array", "AP"], "B": ["LB", "BI", "M", "CB", "MB", "RB", "VB", "BS", "OB", "Bs", "SB", "R", "I", "L", "IB", "AB", "Reb", "BG", "H", "V", "BT", "b", "Bar", "BC", "BBC", "BE", "BR", "WB", "G", "GB", "BB", "Blue", "Bern", "FB", "TB", "D", "NB", "BO", "Y", "DB", "BA", "BY"], "C": ["M", "N", "CB", "CM", "CW", "Cr", "R", "L", "CE", "CU", "c", "CI", "Cl", "CS", "CN", "Cs", "H", "CT", "CP", "V", "Ch", "KC", "S", "BC", "CD", "EC", "Co", "Q", "SC", "G", "CO", "DC", "J", "P", "CR", "CA", "E", "CON", "D", "CC", "AC", "F", "COM"], "T": ["WT", "M", "N", "All", "Th", "X", "R", "I", "L", "It", "Type", "H", "W", "O", "V", "TN", "t", "S", "J", "Q", "Co", "G", "Tx", "P", "Comb", "E", "TB", "TT", "D", "Y", "Len", "U", "K", "F", "GT", "Z", "Sp"]}}
{"code": "n = int(input())\\nprcnt = (n - n // 2) / n\\nprint(prcnt)", "target": "197", "substitutes": {"n": ["a", "N", "x", "nt", "gn", "ln", "d", "p", "name", "ne", "cn", "g", "ct", "i", "sn", "w", "c", "m", "z", "ns", "o", "nl", "h", "f", "b", "num", "t", "count", "len", "nb", "mn", "bn", "na", "v", "nc", "all", "nan", "nu", "size", "nn", "l", "q", "np", "number", "u", "j", "k"], "prcnt": ["prCnt", "wrCount", "prcount", "prrount", " prrrc", "wrCnc", "prcurct", "prrnt", "prctnt", "prcnc", "wrcount", "prctpt", "prcrc", "prrct", "prCct", "prctnd", "prpcpt", "prctrc", "prpcnt", "prrrc", "wrcnc", " prcnd", "prcct", "wrCct", "prrnc", "prCnc", "wrCnt", "prcurnc", "prcurount", " prcpt", "prpcnd", " prrnt", "prcurnt", "prcnd", "prpcrc", "prrpt", "prcpt", "prrnd", "wrcnt", " prrnd", " prrpt", "wrcct", " prcrc", "prCount"]}}
{"code": "from collections import Counter\\n\\nN = int(input())\\nD = list(map(int, input().split()))\\nM = int(input())\\nT = list(map(int, input().split()))\\n\\nc1 = Counter(D)\\nc2 = Counter(T)\\n\\nfor t in c2.keys():\\n    if c2[t] > c1[t]:\\n        print(\"NO\")\\n        exit()\\nprint(\"YES\")", "target": "210", "substitutes": {"N": ["n", "NS", "NC", "Ns", "X", "I", "R", "L", "NA", "NM", "NN", "CN", "NR", "NT", "NH", "O", "V", "S", "Q", "ND", "E", "K", "F", "Z", "C"], "D": ["DL", "DOM", "TD", "d", "DOS", "DIR", "R", "DE", "FD", "DR", "DI", "S", "Do", "DX", "DP", "B", "DD", "DC", "Dir", "DN", "DT", "A", "Ds", "WD", "DS", "DM", "PD", "DF", "Dr", "DEV", "DB", "F", "C"], "M": ["R", "I", "L", "m", "Ms", "MM", "O", "V", "MC", "S", "B", "J", "Q", "G", "P", "MA", "E", "MS", "DM", "TM", "Y", "MI", "MR", "MT", "F", "C"], "T": ["WT", "TR", "TP", "R", "X", "I", "L", "TY", "TS", "PT", "TC", "TG", "TL", "H", "O", "V", "TH", "TV", "Tu", "S", "B", "J", "TI", "P", "E", "TB", "TT", "TA", "TM", "Y", "MT", "MIT", "GT", "F", "TER", "TN", "C"], "c1": ["t2", "lc0", "t1", "C1", " c01", "C2", " c3", "lc3", "C0", " c0", "t0", "C3", "c01", "t01", "C01", "c3", "lc1", "c0"], "c2": ["rc2", "cachetwo", "cache6", "c6", "rc3", "lc1", "c256", "rc02", "cache2", "dc2", "C2", "C4", " c3", "cache02", " c4", " ctwo", " c256", " c6", "cache256", "dctwo", "c4", "cache1", "C3", "rc4", " c02", "lc02", "lc2", "c3", "C02", "c02", "ctwo", "lc6", "dc256"], "t": ["n", " thr", "x", "to", "nt", "token", "str", " y", "ta", "lt", "p", " j", " k", "test", "typ", "i", "tip", "txt", "ts", "c", "set", "ant", "te", "term", " tr", "f", " wit", "trace", "pt", " tid", "ot", " tx", " ta", "v", "int", "ti", " ot", " w", "at", " unt", "tt", "st", "tr", " ty", " it", " r", "title", " ft", "kt", "l", " tot", "ent", " v", "k", "vt", "y", " to", " tf", " z"]}}
{"code": "# Python3 (3.4.3)\\nimport sys\\ninput = sys.stdin.readline\\n\\n# -------------------------------------------------------------\\n# function\\n# -------------------------------------------------------------\\n\\n\\n# -------------------------------------------------------------\\n# main\\n# -------------------------------------------------------------\\nA = int(input())\\nS = input().rstrip()\\n \\nprint(S if A>=3200 else \"red\")", "target": "90", "substitutes": {}}
{"code": "h, a = map(int, input().split())\\namari = h % a\\nshou = h // a\\nif amari == 0:\\n    print(shou)\\nelse:\\n    print(shou +1)", "target": "496", "substitutes": {"h": ["n", "sh", "x", "p", "g", "i", "hal", "r", "hs", "c", "m", "ih", "hu", "o", "H", "ah", "bh", "f", "hl", "gh", "v", "e", "oh", "ha", "ch", "he", "hr", "hd", "ho", "l", "hh", "u", "y", "hi", "hm"], "a": ["n", "ia", "ae", "ac", "ta", "p", "ach", "va", "ama", "ai", "ak", "i", "c", "ma", "m", "z", "sam", "ica", "ga", "o", "ea", "la", "fa", "f", "b", "t", "ow", "alpha", "da", "wa", "an", "e", "A", "at", "sa", "ou", "ha", "sha", "new", "au", "oa", "aa", "am", "ar", "u", "y", "ba", "ca", "ao"], "amari": [" amild", " samalid", " amiri", "amarian", "aminarian", "amiri", "aminild", " amalid", " samrage", " amrage", " ramarian", " ramari", "Amiri", "amalid", "aminari", "Amarian", "amrage", " samarian", " samari", "Amari", "Amild", "amild", " ramalid", " amarian", " ramrage", "aminiri"], "shou": ["khari", " shour", "zhju", "zhari", "shoud", "shuti", "khoul", "shaoul", "Shou", " shoud", "Shari", "haou", "zhuti", "shju", "reshour", "reshoud", "shoo", " shari", "haari", "shauti", "shoul", " shoul", "haoul", "zhou", "shaou", "shaour", "khoo", "reshoul", "shour", "shaoud", "reshou", "Shoul", "shari", "haoo", "shaari", "khou", " shju", "Shoo", "shaju", " shuti"]}}
{"code": "def main():\\n    n = int(input())\\n    dp = [0 for _ in range(n + 1)]\\n    for i in range(n):\\n        p = int(input())\\n        dp[p] = dp[p - 1] + 1\\n    non_move = 0\\n    for i in range(n + 1):\\n        non_move = max(non_move, dp[i])\\n    print(n - non_move)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "525", "substitutes": {"n": ["nr", "N", "x", "net", "nt", "ni", "gn", "d", "en", "on", "names", "norm", "ne", "cn", "name", "dn", "long", "sn", "c", "current", "m", "ns", "nl", "num", "t", "nia", "len", "nb", "no", "mn", "na", "v", "an", "nc", "all", "nan", "new", "nu", "ln", "nw", "nn", "number", "l", "np", "network", "ng", "j"], "dp": ["dro", "dos", "dm", "d", "dds", "db", "cd", "vp", "dial", "jp", "dh", "dl", "drops", "pb", "fp", "gp", "bsp", "wd", "tp", "dt", "df", "dc", "dep", "DP", "wp", "dr", "pd", "lp", "deb", "cp", "bps", "dq", "dd", "dj", "np", "px", "pp", "ds", "ps"], "_": ["x", "ex", "ct", "I", "ate", "ox", "ip", "val", " int", "int", "all", "il"], "i": ["mi", "ki", "xi", "x", "ia", "gu", "ci", "gi", "d", "di", "ai", "I", "m", "z", "bi", "yi", "iti", "ic", "o", "ip", "ind", "b", "ri", "si", "ii", "li", "v", "ti", "im", "it", "zi", "ini", "l", "pi", "il", "u", "y", "j", "k", "ij", "ik", "iu"], "p": ["x", "port", "d", "pard", "point", "pc", "jp", "pre", "c", "m", "pai", "par", "tp", "pa", "ip", "pu", "f", "sp", "part", "pt", "lp", "pos", "P", "ap", "post", "at", "cp", "ph", "pl", "pi", "np", "pat", "u", "j", "y", "pn", "pp", "pro", "ps"], "non_move": ["non2remove", " non_change", "non0move", "won_change", "non_drop", "non_change", "nonjdelete", "non_copy", " non_up", "non2change", "nonjdrop", "non_remove", "nonfuldrop", "non_match", "non_delete", "nonjmove", "no_match", "non_use", "non_up", "non0use", "nonfulcopy", "non2use", "non0remove", "non2move", " non_copy", "non_jump", "no_change", "won_move", "nonjcopy", " non_delete", "no_jump", "nonfuldelete", "won_remove", "nonfulmove", "non0change", " non_drop", "won_use", "no_move"]}}
{"code": "from collections import Counter\\nN=int(input())\\nC=Counter(list(map(int, input().split())))\\n# print(C)\\nans=0\\nfor i in C:\\n  j=C[i]\\n  if j>=i:\\n    ans+=j-i\\n  else:\\n    ans+=j\\nprint(ans)", "target": "536", "substitutes": {"N": ["SN", "n", "M", "NS", "Ne", "NV", "NC", "Na", "Ns", "X", "NA", "NM", " n", "NN", "NP", "NR", "NT", "NH", "V", "NO", "S", "ND", "P", "NB", "MN", "K", "F", "FN"], "C": ["M", "T", "CM", "NC", "R", "X", "I", "L", "c", "CS", "O", "V", "CP", "S", "B", "G", "P", "A", "CR", "E", "D", "CC", "Count", "U", "K", "F", "Z"]}}
{"code": "D = int(input())\\nC = list(map(int, input().split()))\\nS = [list(map(int, input().split())) for _ in range(D)]\\nT = [int(input()) for _ in range(D)]\\nv = 0\\nlast = [0] * 26\\nfor d in range(D):\\n    # ct:current type\\n    ct= T[d] - 1\\n    last[ct] = d + 1\\n    # \u4eca\u56de\u306e\u6e80\u8db3\u5ea6\\n    v += S[d][ct]\\n    # \u4e0d\u6e80\u5ea6\u3092\u5f15\u304f\\n    v -= sum([C[t] * (d + 1 - last[t]) for t in range(26)])\\n    print(v)", "target": "506", "substitutes": {"D": ["M", "N", "DL", "JD", "R", "DE", "X", "L", "I", "FD", "DR", "DI", "Ind", "H", "O", "V", "Done", "Duration", "Do", "DP", "Q", "G", "DD", "DC", "DN", "P", "Dir", "ID", "E", "Display", "Ds", "DS", "Den", "DM", "PD", "DF", "Count", "Size", "DB", "K", "F", "Body", "Z"], "C": ["M", "N", "X", "R", "I", "L", "c", "CS", "Cs", "W", "CT", "V", "O", "VC", "CD", "B", "SC", "G", "DC", "P", "A", "E", "CC", "U", "F", "Z"], "S": ["M", "N", "NS", "R", "I", "X", "L", "VS", "TS", "CS", "W", "H", "O", "V", "B", "J", "Q", "G", "P", "E", "s", "SP", "Y", "K", "F", "Z"], "_": [" the", "ox", " long", "____", "pt", "non", " __", "___", "ay", " z"], "T": ["WT", "M", "N", "TR", "TP", "X", "R", "L", "TS", "W", "O", "V", "TN", "TV", "t", "B", "J", "Q", "G", "P", "E", "Ts", "TT", "Y", "GT", "F", "K", "Z"], "v": ["qv", "n", "p", "g", "tv", "i", "value", "w", "r", "c", "m", "z", "h", "values", "V", "f", "b", "t", "nv", "e", "sv", "q", "l", "u", "j", "vt", "k", "y"], "last": ["next", "a", "n", "p", "g", "rev", "w", "r", "uv", "Last", "c", "z", "NT", "o", "H", "h", "f", "b", "t", "final", "st", "end", "ST", "l", "j", "k"], "d": ["n", "x", "p", "name", "cd", "g", "day", "di", "__", "c", "z", "ind", "f", "dat", "de", "dx", "do", "q", "dd", "du", "j", "ds"]}}
{"code": "from collections import defaultdict\\n\\n\\ndef solve():\\n    N = int(input())\\n    D = list(map(int, input().split()))\\n    M = int(input())\\n    T = list(map(int, input().split()))\\n    cnt = defaultdict(int)\\n    for d in D:\\n        cnt[d] += 1\\n    for t in T:\\n        if cnt[t] <= 0:\\n            print('NO')\\n            return\\n        cnt[t] -= 1\\n    print('YES')\\n\\n\\nif __name__ == \"__main__\":\\n    solve()\\n", "target": "210", "substitutes": {"N": ["n", "NS", "NC", "Ns", "X", "R", "I", "L", "NA", " n", "NN", "NR", "NT", "V", "S", "B", "J", "ND", "P", "E", "Y", "Ni", "K", "TN", "C"], "D": ["DL", "DOM", "TD", "DO", "X", "DE", "L", "FD", "DK", "DR", "DI", "DH", "S", "DX", "DA", "DP", "ND", "DD", "DC", "DN", "Dir", "DT", "P", "Ds", "WD", "DS", "DM", "PD", "DF", "DB", "F", "Z", "C"], "M": ["MO", "OM", "MU", "R", "I", "L", "m", "Ms", "MM", "O", "V", "MC", "B", "J", "Q", "G", "P", "MA", "DM", "TM", "Y", "MI", "MT", "K", "Z", "MR"], "T": ["WT", "TR", "TP", "AT", "R", "X", "I", "L", "TS", "PT", "VT", "TC", "TG", "W", "H", "O", "V", "Z", "TV", "S", "TI", "J", "Q", "B", "G", "P", "E", "TB", "TT", "TA", "TM", "Y", "GT", "F", "OT", "TON", "TN", "C"], "cnt": ["CNT", "Cpt", "cNT", "cnc", "acct", "cct", "pcct", "pcounters", "rcNT", "rcnt", "acrt", "ncnc", "Crt", "acnt", "ncct", "Cnc", "pcnc", " cNT", "crt", "ncounters", " cct", "acpt", " cnc", "Counters", "rcnc", " crt", "rcct", "Cct", "cpt", "ncnt", "pcnt", "Cnt", " cpt", "counters"], "d": ["fd", "n", "self", "p", "db", "dir", "name", "cd", "di", "dn", "i", "dh", "c", "z", "bd", "m", "dl", "od", "iod", "ind", "dt", "done", "f", "xd", "dat", "da", "dr", "pd", "dx", "ed", "do", "dq", "dis", "q", "l", "dd", "du", "did", "id", "j", "ds", "nd"], "t": ["n", "ty", "nt", "token", "lt", "ta", "p", "name", "g", "test", "ct", "typ", "td", "r", "tc", "wt", "c", "ts", "m", "type", "total", "gt", "te", "o", "tp", "tree", "term", "dt", "tg", "pt", "ot", "tu", "tap", "v", " ot", "ti", "all", "at", "tt", "st", "it", "rt", " td", " ti", "l", "lat", "j", "y", "temp", "ft"]}}
{"code": "a,b,c,d=map(int,input().split())\\ne=max(a,c)\\nf=min(b,d)\\nif e<f:\\n  print(f-e)\\nelse:\\n  print(0)", "target": "146", "substitutes": {"a": ["x", "ae", "ab", "aff", "aj", "ach", "ak", "i", "r", "ma", "ace", "la", "h", "act", "ax", "da", "an", "A", "al", "ap", "at", "sa", "af", "ity", "app", "au", "oa", "aa", "l", "am", "ar", "ba", "ac"], "b": ["bis", "body", "sb", "ab", "db", "sub", "ib", "i", "r", "bot", "bi", "wb", "fb", "bo", "rb", "by", "mb", "be", "ob", "br", "bc", "gb", "nb", "bb", "eb", "cb", "l", "j", "bs", "ba"], "c": ["ec", "ce", "con", "lc", "p", "cd", "g", "ct", "rc", "cy", "r", "m", "fc", "bc", "dc", "v", "cp", "ch", "s", "cc", "co", "cb", "cu", "l", "etc", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["n", "db", "dir", "di", "i", "r", "w", "z", "m", "dec", "o", "dt", "df", "dat", "dc", "t", "da", "dr", "de", "v", "ad", "red", "s", "D", "ed", "do", "div", "l", "dd", "er", "dict", "ds", "nd"], "e": ["ec", "ce", "x", "ex", "ge", "ae", "ie", "me", "p", "en", "ue", "g", "i", "re", "r", "m", "pe", "el", "te", "o", "ea", "be", "elt", "oe", "ef", "t", "eu", "ee", "de", "ei", "E", "eb", "ed", "et", "eeee", "l", "element", "le", "u", "ent", "es", "er", "ele", "y", "east"], "f": ["fd", "n", "x", "bf", "p", "fm", "alf", "i", "sf", "r", "w", "z", "m", "fc", "fp", "full", "fb", "o", "h", "fa", "fr", "t", "df", "ef", "fe", "fo", "eu", "fl", "ff", "v", "rf", "tf", "end", "ed", "q", "l", "fee", "u", "j", "fi", "F", "cf"]}}
{"code": "s = input()\\nw = int(input())\\n\\nv = [s[i:i+w] for i in range(0, len(s), w)]\\n\\nfor x in v:\\n    print(x[0], end='')\\nprint('\\n')    \\n", "target": "313", "substitutes": {"s": ["a", "n", "sb", "self", "str", "ats", "js", "p", "r", "hs", "c", "ts", "z", "m", "ns", "sys", "rs", "ins", "sl", "h", "ms", "f", "b", "sp", "abs", "t", "S", "ss", "strings", "gs", "sq", "ws", "sa", "st", "sv", "q", "sts", "qs", "ds", "ps", "bs"], "w": ["wx", "n", "d", "p", "wh", "we", "wt", "r", "c", "weight", "m", "z", "wb", "wall", "wr", "window", "rw", "wi", "W", "wd", "kw", "h", "wal", "ew", "f", "word", "wl", "wid", "win", "wa", "wp", "width", "ws", "end", "wm", "nw", "q", "l", "widget", "aw", "k"], "v": ["a", "qv", "n", "vv", "p", "g", "vp", "va", "ved", "we", "r", "uv", "c", "m", "z", "vy", "o", "h", "values", "V", "cv", "f", "b", "vc", "t", "nv", "lv", "sv", "conv", "ve", "q", "vs", "l", "j", "vt"], "i": ["mi", "ki", "n", "xi", "uri", "ci", "gi", "cli", "p", "di", "ai", "I", "iter", "r", "c", "m", "yi", "qi", "ic", "ix", "ip", "ms", "ind", "f", "b", "si", "li", "ii", "ji", "ori", "ei", "pos", "ti", "oi", "e", "im", "it", "ims", "zi", "ini", "q", "phi", "pi", "l", "id", "j", "index", "y", "ij", "k", "iu"], "x": ["wx", "xi", "ex", "any", "xe", "xes", "ux", "xc", "xa", "X", "rx", "ox", "xt", "ctx", "ix", "tx", "act", "ax", "xd", "zx", " xx", "fx", "ey", "at", "xy", "xs", "mx", "dx", "xx", "u", "y", "px", "xp", "xf"]}}
{"code": "import math\\n\\ndef make_divisors(n):\\n    divisors = []\\n    for i in range(1, int(n**0.5)+1):\\n        if n % i == 0:\\n            divisors.append(i)\\n            if i != n // i:\\n                divisors.append(n//i)\\n\\n    # divisors.sort()\\n    return divisors\\n\\n\\ns = input()\\n#a = list(map(int, input().split()))\\n\\nmode=0\\nans=0\\nanum=0\\nbanum=0\\nfor i in range(len(s)):\\n    if(mode==0 and s[i]=='A'):\\n        anum+=1\\n    elif(mode==1 and s[i]=='A'):\\n        anum=1\\n        mode=0\\n    elif(mode==0 and s[i]=='B'):\\n        mode=1\\n    elif(mode==1 and s[i]=='B'):\\n        mode=0\\n        anum=0\\n    elif(mode==0 and s[i]=='C'):\\n        mode=0\\n        anum=0\\n    elif(mode==1 and s[i]=='C'):\\n        mode=0\\n        ans += anum\\n    #print(ans)\\n\\nprint(ans)\\n", "target": "305", "substitutes": {"n": ["N", "nt", "gn", "ln", "d", "p", "norm", "ne", "g", "cn", "dn", "r", "sn", "c", "m", "z", "ns", "o", "h", "f", "b", "num", "nia", "t", "fn", "nb", "nor", "mn", "bn", "na", "v", "an", "nc", "nm", "nan", "nu", "nw", "nn", "ll", "l", "np", "pi", "j", "k"], "divisors": ["divinitators", "divisORS", "divisctors", " divensORS", "divinitor", "digisctors", "divatisORS", "divilores", "digisators", "digesors", "divisor", "divitors", "divesors", "divatisions", " divisions", "divesorers", "divitators", "divesORS", "divitions", "divatisors", "divisorers", "divitor", "divesions", "digisor", "digesctors", "divusions", " divensions", "digesor", "divensions", "divesor", " divisorers", "divesators", "divitores", "divinitctors", "divusors", "divensORS", " divisores", "divisions", " divitors", "divusores", "divilor", "divisores", "divitctors", "divesctors", "divinitors", " divisor", "divatisorers", "digisors", "digesators", "divensors", " divensorers", "divensorers", " divisORS", " divensors", " divitor", "divusor", "divilions", "divisators", " divitions", " divitores", "divilors"], "i": ["mi", "ki", "xi", "x", "meg", "ni", "ci", "gi", "cli", "p", "di", "g", "ai", "I", "m", "z", "bi", "yi", "qi", "iti", "ic", "ix", "o", "iri", "b", "ri", "io", "si", "li", "ii", "v", "ei", "int", "ti", "oi", "im", "it", "ini", "zi", "\u0438", "q", "l", "pi", "phi", "j", "y", "k", "fi", "ik", "ij", "index", "iu", "asi", "Ni"]}}
{"code": "\\nimport sys\\nsys.setrecursionlimit(10**8)\\ninput = sys.stdin.readline\\nN = int(input())\\nA = [[] for _ in range(N)]\\nfor i in range(N):\\n    A[i] = [i-1 for i in map(int, input().split())]\\n\\n\\ndef pair(x,y):\\n    if x<y:\\n        return (x,y)\\n    else:\\n        return (y,x)\\n\\nto_index = dict()\\nto_pair = dict()\\nidx = 0\\nfor i in range(N):\\n    for j in range(i+1,N):\\n        to_index[(i,j)] = idx\\n        to_pair[idx] = (i,j)\\n        idx += 1\\n    \\nMAX_N = idx\\n# DAG TopoSort\\nin_count = [0]*MAX_N\\nedge = [[] for _ in range(MAX_N)]\\n\\nfor i in range(N):\\n    for j in range(N-2):\\n        vnum = to_index[pair(i,A[i][j+1])]\\n        pvnum = to_index[pair(i, A[i][j])]\\n        edge[pvnum].append(vnum)\\n\\nfor i in range(MAX_N):\\n    for v in edge[i]:\\n        in_count[v] += 1\\n\\nS = []\\nL = [] #Sort\u7d50\u679c\\nindex = [0]*MAX_N # \u9802\u70b9v\u306eL\u306b\u304a\u3051\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9index[v]\\nans = 0\\n\\nfor i in range(MAX_N):\\n    if in_count[i]==0: S.append(i)\\n\\nwhile S:\\n    ans += 1\\n    new = []\\n    for _ in range(len(S)):\\n        v = S.pop()\\n        index[v] = len(L)\\n        L.append(v)\\n        for nv in edge[v]:\\n            in_count[nv] -= 1\\n            if in_count[nv]==0:\\n                new.append(nv)\\n    S = []\\n    for n in new:\\n        S.append(n)\\n\\n\\nif len(L) != MAX_N:\\n    print(-1)\\n    exit()\\nprint(ans)", "target": "782", "substitutes": {"input": ["next", "pattern", "str", "context", "select", "expression", "view", "get", "human", "shift", "inc", "raw", "txt", "current", "ref", "focus", "read", "prefix", "output", "PUT", "result", "val", "cmd", "config", "fn", "hidden", "form", "feed", "out", "Input", "int", "cin", "stream", "list", "each", "interface", "exec", "csv", "gen", "print", "q", "command", "np", "sample", "enter", "index", "data", "text", "source"], "N": ["SN", "CNN", "n", "M", "NS", "T", "NC", "GN", "NI", "Ns", "X", "I", "R", "L", "NA", "NM", "NN", "NP", "CN", "NR", "NT", "NH", "O", "V", "TN", "No", "NO", "NOTE", "NUM", "S", "B", "J", "Q", "ND", "P", "Num", "E", "D", "NB", "Y", "Ni", "K", "AN", "Z", "C"], "A": ["a", "GA", "M", "T", "Each", "All", "An", "Ar", "AAA", "Alpha", "AT", "X", "I", "L", "NA", "AB", "H", "AA", "As", "O", "V", "S", "B", "G", "This", "P", "Address", "Ass", "You", "D", "AM", "Y", "K", "Array", "C"], "_": ["n", "nt", "ci", "ct", "I", "ml", "ny", "ix", "val", "pt", "non", "int"], "i": ["a", "mi", "ki", "n", "xi", "ia", "ie", "ci", "gi", "p", "g", "di", "ai", "I", "c", "m", "z", "bi", "ami", "my", "yi", "info", "ic", "ix", "o", "ip", "ind", "f", "b", "t", "si", "li", "ii", "ji", "v", "ei", "int", "ti", "e", "iy", "im", "it", "s", "zi", "ini", "ui", "phi", "pi", "l", "u", "id", "k", "index", "ij", "iu", "hi", "start"], "x": ["a", "wx", "n", "xi", "ex", "xe", "p", "ux", "xc", "X", "xa", "rx", "ox", "z", "xxxx", "xt", "el", "ix", "tx", "ax", "xd", "ay", "v", "www", "fx", " xx", "xy", "xs", "xb", "dx", "xx", "l", "yx", "px", "xp", "zx"], "y": ["sy", "n", "xi", "ty", "ys", "yer", "ym", "ady", "wy", "cy", "oy", "ky", "yo", "yz", "z", "ox", "ies", "ny", "yi", "vy", "ye", "py", "yr", "sky", "ery", "b", "t", "yl", "uy", "v", "yn", "e", "ey", "gy", "iy", "xy", "ch", "yt", "fy", "yy", "Y", "xx", "yx", "yu", "ya", "ij", "ay", "ry"], "to_index": ["To_index", "to_all", "tomodaddress", "to2ind", "To_address", "to_address", "tomodall", "To_ind", "TO_index", "toxkey", "toxind", "toxindex", "to_key", "to2address", "to2index", "TO_key", "to2all", "To_all", "tomodindex", "tomodind", "TO_ind", "to_ind"], "to_pair": ["TO_prefix", "TO2pair", "tojproperty", "TO2index", "to2pair", "to_name", "to_prefix", "TO_index", "to2air", "tockproperty", "to_property", "tockindex", "to2property", "tockair", "tockpair", "tojindex", "TO2air", "TO_air", "TO_name", "to2index", "TO_property", "to_air", "TO_pair", "tojair", "tojpair", "TO2property"], "idx": [" idy", "kidwx", "idz", "IDxc", "Idxs", "idy", "idxs", "kidix", "Idex", "indxc", "IDex", "kidx", "idn", "Idx", " idxs", " idix", "Idxc", " idwx", "IDz", " idz", "ridx", "Idy", "kidex", "uidwx", "idxc", "Idz", "Idn", "ridxc", "indix", "ideix", "uidex", "IDy", "ridn", "idexs", " idn", "idexc", "indx", "ridix", "idex", "idwx", "uidix", "uidx", "ridex", "IDx", " idxc", "idix", "ridxs", "IDix", " idex", "Idix", "indxs"], "j": ["n", "uj", "ja", "ie", "js", "aj", "p", "name", "g", "jp", "oj", "jc", "z", "m", "jj", "bi", "o", "h", "jl", "br", "b", "J", "ion", "bj", "key", "ji", "v", "li", "kj", "obj", "it", "jump", "q", "l", "dj", "k", "ij"], "MAX_N": ["MAX_NUM", " MAX__N", " MAX_NUM", "MAX_M", "MAX_NM", " MAX_NM", " MAX__NM", " MAX__M", "MAX__N", " MAX_M", " MAX__NUM", "MAX__M", "MAX__NUM", "MAX__NM"]}}
{"code": "import sys\\nfrom collections import defaultdict\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nMOD = 10**9 + 7\\nP = 2 ** 127 - 1\\n\\nN = int(readline())\\nm = map(int, read().split())\\nA, B = zip(*zip(m, m))\\n\\npow2 = [1] * (N + 10)\\nfor n in range(1, N + 10):\\n    pow2[n] = pow2[n - 1] * 2 % MOD\\n\\ndef mod_P(x):\\n    if x < 0:\\n        x += P\\n    high = x >> 127\\n    low = x & P\\n    x = low + high\\n    if x >= P:\\n        x -= P\\n    return x\\n\\ndef inv_mod(a):\\n    b = P\\n    u, v = 1, 0\\n    while a:\\n        q, r = divmod(b, a)\\n        a, b = r, a\\n        u, v = v - q * u, u\\n    if b < 0:\\n        v = -v\\n    if v < 0:\\n        v += P\\n    return v\\n\\npair_key = {0:-1, -1:0}\\n\\ndef to_key(a, b):\\n    if a == 0:\\n        return -1\\n    if b == 0:\\n        return 0\\n    \\n    x = mod_P(inv_mod(a) * abs(b))\\n    if b < 0:\\n        x = P - x\\n    y = P - mod_P(inv_mod(b) * abs(a))\\n    if a < 0:\\n        y = P - y\\n    pair_key[x] = y\\n    return x\\n\\n  \\ncounter = defaultdict(int)\\norigin = 0\\nfor a, b in zip(A, B):\\n    if a == b == 0:\\n        origin += 1\\n        continue\\n    key = to_key(a, b)\\n    counter[key] += 1\\n\\nanswer = origin\\nk = 1\\nfor key, cnt in counter.items():\\n    key1 = pair_key[key]\\n    if key1 not in counter:\\n        k *= pow2[cnt]\\n    elif key < key1:\\n        x, y = cnt, counter[key1]\\n        k *= pow2[x] + pow2[y] - 1\\n    k %= MOD\\nanswer += k - 1\\nanswer %= MOD\\nprint(answer)\\n", "target": "86", "substitutes": {"read": ["open", "find", "next", "reverse", "load", "str", "select", "write", "loop", "run", "get", "g", "readable", "iter", "rx", "re", "rd", "buffer", "query", "input", "reads", "sync", "scan", "send", "default", "log", "f", "create", " Read", "parse", "feed", "check", "stream", "each", "orig", "eng", "clear", "im", "end", "Read", "first", "print", "new", "READ", "pipe", "reader", "rand", "se", "seek", "text", "chain"], "readline": ["selectline", "READlin", "READlines", "writefile", "selectlin", "READnl", "Readstring", " readfile", "Readlines", "READLine", "readmode", "readfile", "readLine", "selectnl", " readLine", "READmode", " readmode", "writelines", "Readfile", "READline", "Readmode", "writestring", "selectLine", "readnl", "writeline", "readstring", "readlin", "loadnl", "Readline", "loadlin", "loadLine", " readstring", "ReadLine", "loadline"], "readlines": ["writeelines", "readerlines", "Readlines", " readcodes", "writecodes", "readercodes", "writelines", "Readcodes", "Readelines", "loadlines", "readerline", "readelines", " readelines", "loadelines", "writeline", "readcodes", "Readline", "readerelines", "loadcodes", "loadline"], "MOD": ["MAX", "DJ", "M", "SET", "ORD", "mod", "TR", "TD", "KEY", "MAT", "BOX", "X", "LOG", "Mod", "R", "L", "IME", "POS", "DE", "FD", "RM", "NR", "OD", "RE", "MIN", "Length", "ERROR", "OFF", "Mods", "PUT", "SIZE", "MD", "NOTE", "OR", "NUM", "MODE", "IDENT", "Q", "ID", "MP", "MED", "DEBUG", "MS", "ED", "D", "DM", "TM", "VALUE", "OK", "RO", "CC", "DEC", "MAP", "JUST", "ONES", "FM", "K", "F", "UN", "TER", "Z"], "P": ["M", "T", "PI", "p", "HP", "Max", "IP", "JP", "Power", "TP", "AU", "YP", "R", "I", "X", "L", "One", "Pl", "H", "PA", "PUT", "O", "V", "CP", "BP", "PK", "XP", "S", "Pro", "J", "Q", "DP", "G", "AP", "MP", "E", "PP", "D", "Y", "Pe", "PD", "PO", "U", "K", "F", "Z", "C"], "N": ["M", "NS", "T", "NL", "NC", "GN", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "Node", "V", "TN", "NO", "S", "J", "Q", "G", "ND", "Num", "D", "NB", "Y", "Len", "K", "AN", "Z", "C"], "m": ["mi", "M", "pm", "mod", "dm", "d", "p", "mm", "mp", "g", "i", "items", "w", "c", "ma", "z", "map", "bm", "o", "gm", "h", "ms", "f", "t", "mc", "nm", "s", "l", "cm", "mt"], "A": ["GA", "M", "T", "An", "AU", "X", "mA", "R", "L", "I", "AL", "ABC", "AB", "RA", "H", "AA", "LA", "As", "V", "AR", "C", "S", "G", "This", "D", "AM", "SA", "U", "BA", "AN", "AP"], "B": ["M", "T", "BL", "SB", "R", "X", "I", "L", "AB", "W", "V", "BT", "S", "BC", "J", "G", "WB", "BB", "BM", "E", "TB", "Bern", "D", "NB", "EB", "Y", "DB", "BA", "Z", "C"], "pow2": [" pow20", " power20", " poy4", " powers2", "posh2", " pow5", "powers4", "power3", "ponent2", "powe2", "npower1", "npower3", " powers25", "powers1", "pew2", " pow25", "pix3", "pow1", "poy3", " powers4", "pows2", "pix25", "power5", " power52", " pow3", "pow25", "powers25", "poy4", "power32", "pows20", "powe3", "pew1", "powers252", "pow20", " pow1", " powers3", " power3", "poy5", "pows52", "pix1", "pows1", "pow5", " poy5", "power20", "npow32", " powers252", "powers2", "pot4", "power1", "pix2", "pot1", "poy2", "power4", "pows4", " poy3", "powe1", " poy2", "pow4", "power25", "pot2", " power2", "npow3", " powers1", "power2", "pows252", "posh52", "pew3", "pot252", "power52", "powe32", "ponent5", "posh3", " pow52", "npower2", "npower32", "ponent4", "pot32", "pot3", "pow252", "pow32", "pow3", "ponent3", "posh20", " pow4", "powers3", "npow2", "pows3", "pow52", "npow1", " pow252"], "n": ["next", "nr", "nt", "gn", "ln", "p", "name", "ne", "cn", "g", "dn", "i", "sn", "c", "z", "ns", "o", "nl", "t", "nb", "nor", "mn", "na", "yn", "nc", "nm", "s", "nan", "node", "nu", "nn", "number", "l", "np", "ng", "j", "nd"], "x": ["wx", "xi", "ex", "Ax", "xe", "p", "xes", "name", "ux", "g", "xc", "X", "xa", "i", "rx", "value", "w", "c", "ox", "z", "xt", "xml", "ix", "o", "h", "tx", "act", "ax", "f", "xd", "t", "XP", "zx", "e", "fx", "xy", "ch", "xs", "mx", "dx", "xx", "l", "phi", "px", "lex", "xp", "xf"], "high": ["history", "top", "max", "lim", "mid", "p", "left", "hang", "X", "hard", "long", "zero", "z", "control", "HI", "prime", "change", "H", "h", "right", "close", "lo", "hop", "pop", "up", "height", "highest", "large", "phi", "High", "peak", "hot", "pro", "hi", "stop"], "low": ["light", "hold", "Low", "lim", "mid", "p", "left", "short", "L", "long", "zero", "down", "z", "floor", "old", "min", "flow", "ind", "level", "multi", "lower", "lo", "off", "li", "small", "up", "little", "slow", "div", "l", "phi", "le", "High", "lex", "range", "pro", "mode", "hi"], "a": ["p", "i", "c", "z", "el", "pa", "aaa", "admin", "fa", "na", "e", "sa", "app", "new", "ba", "ia", "ra", "ta", "g", "test", "ai", "eas", "o", "da", "aka", "sha", "oa", "l", "aq", "ce", "sta", "ae", "aj", "d", "xa", "ak", "ga", "h", "result", "alpha", "apa", "an", "ap", "al", "ao", "ed", "aa", "ar", "ab", "ach", "va", "w", "ace", "ma", "ea", "la", "ah", "act", "f", "t", "at", "au", "_", "am", "j", "er", "area", "ca", "ac"], "b": ["bis", "ben", "sb", "bu", "body", "bf", "ab", "d", "p", "db", "g", "ib", "i", "blue", "bg", "c", "reb", "z", "bd", "bi", "wb", "pb", "fb", "rb", "bo", "bm", "o", "h", "be", "ob", "bh", "br", "f", "bc", "t", "nb", "bb", "e", "it", "eb", "base", "cb", "bl", "l", "bp", "j", "bs", "ba", "back"], "u": ["ut", "bu", "uj", "su", "um", "d", "p", "ue", "g", "ul", "i", "w", "uv", "c", "us", "z", "bo", "o", "h", "pu", "f", "t", "uc", "tu", "e", "ru", "un", "up", "ou", "ur", "ui", "uf", "nu", "au", "cu", "l", "U", "iu"], "v": ["qv", "ter", "vv", "d", "p", "vi", "g", "vp", "va", "R", "i", "value", "w", "uv", "c", "z", "inv", "vector", "ev", "o", "h", "values", "val", "V", "vr", "f", "vc", "t", "vol", "ver", "e", "lv", "sv", "conv", "ve", "l", "var", "ov", "j", "vt", "version"], "q": ["qv", "d", "p", "ue", "g", "qu", "i", "re", "w", "c", "z", "qi", "o", "h", "f", "Q", "e", "ch", "au", "l", "j", "er", "iu"], "r": ["mr", "rr", "ro", "d", "p", "g", "R", "rc", "i", "re", "w", "c", "rb", "o", "h", "vr", "br", "f", "t", "e", "rt", "l", "ar", "j", "er", "rd"], "pair_key": ["pair2key", "pair2Key", " pair_link", "air_KEY", "pair_KEY", "air_key", "pair2KEY", " pair_order", " pair_Key", "pair_id", "pair2id", "pair2name", "pair_name", " pair_id", "pair_order", "air_Key", "pair_Key", " pair2id", " pair2Key", "pair_type", "pair2type", " pair_type", " pair2type", "air_name", " pair2key", "pair_link"], "y": ["sy", "ty", "ym", "p", "g", "wy", "i", "cy", "w", " Y", "c", "yo", "z", "ies", "ny", "vy", "o", "py", "ye", "h", "yr", "dy", "t", "ot", "uy", "e", "ey", "gy", "xy", "s", "ch", "Y", "yy", "xx", "j", "hot", "ay", "ry"], "counter": ["pointer", "nr", "master", "comment", "ter", "cmp", "queue", "loader", "critical", "currency", "table", "manager", "loop", "KEY", "order", "cycle", "ounter", "creator", "clock", "zero", "vector", "map", "created", "buffer", "prefix", "Counter", "page", "message", "outer", "finder", "second", "result", "magic", " Counter", "ctr", "count", "processor", "record", "memory", "ounters", "controller", "cache", "editor", "phrase", "wrapper", "here", "handler", "collection", "monitor", "number", "meter", "book", "usage", "index", "cm", "TER", "entry", "timer", "sequence", "walker", "writer"], "origin": ["Origin", "top", "race", "pole", "domain", "gate", "offset", "above", "head", "init", "euro", "i", "span", "position", "ation", "zone", "prefix", "ger", "species", "alias", "o", "result", "go", "limit", "inner", "remote", "margin", "ori", "star", "border", "original", "orig", "location", "axis", "it", "here", "base", "ator", "there", "copy", "index", "member", "magic", "entry", "trace"], "key": ["next", "ek", "ex", "Key", "pair", "any", "ie", "p", "KEY", "name", "child", "code", "ak", "i", "value", "entry", "ate", "c", "ace", "set", "prefix", "query", "type", "page", "ice", "o", "ip", "val", "tag", "ax", "t", "no", "ee", "e", "int", "ey", "row", "it", "char", "base", "rand", "item", "id", "link", "index", "er", "j", "ay", "ry", "ac"], "answer": ["over", "next", "mi", "ek", "comment", "Answer", "wer", "vote", "option", "area", "um", "offset", "example", "name", "order", "onse", "value", "zero", "ate", "report", "asm", "status", "query", "message", "output", "remember", "term", "result", "word", "response", "record", "results", "about", "rank", "cache", "question", "energy", "mx", "reply", "size", "error", "index", "issue", "cm", "entry", "root", "echo", "answered", "interpret", "version"], "k": ["ck", "km", "ek", "uk", "kr", "kh", "p", "g", "ak", "i", "ke", "w", "c", "z", "ks", "o", "kw", "ko", "f", "tk", "t", "kj", "e", "s", "ku", "l", "kk", "ka", "K", "j", "ik", "cm", "mk", "ac"], "cnt": ["fcNT", "CNT", "pnum", " cnum", "fcounter", "cNT", "cct", "acct", "ccount", "pcount", "cnum", "pnt", "Counter", "acNT", "acnt", "count", " cNT", " ccount", "ncnum", " cct", "acounter", "Cct", "ncnt", " count", "acount", "ncount", "pount", "nccount", "Cnt", "Count", "fcnt", "fcount"], "key1": ["kOne", "code0", "k_", "KEY3", "k2", "KEY2", "key0", "KEY01", " key3", " keyOne", " key0", "key2", "k3", "codeOne", "key01", "k0", "Key2", "Key1", "keyOne", " key_", "k01", "Key3", "key_", "Key0", "KEY1", "code1", "KEYOne", "Key_", "KeyOne", "code01", "k1", " key2", "KEY0", "key3"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nMOD = 10 ** 9 + 7\\nINF = float('INF')\\nsys.setrecursionlimit(10 ** 5)\\n\\n\\ndef main():\\n    n = int(readline())\\n    a = list(map(int, readline().split()))\\n\\n    i = 0\\n    ans = 0\\n\\n    while i < n:\\n        s = a[i]\\n        j = i\\n        k = i\\n        while j < n and s <= a[j]:\\n            s = a[j]\\n            j += 1\\n        while k < n and s >= a[k]:\\n            s = a[k]\\n            k += 1\\n        i = max(j, k)\\n        ans += 1\\n\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "226", "substitutes": {"readline": [" readpoint", "textstring", "loadpoint", "Readstring", "readerstring", "getline", "Readlines", "readerlines", "readerle", "readableline", " readlines", "readlines", "readpoint", "readfile", "readLine", "textlines", " readLine", "readablestring", "Readfile", "getpoint", "Readle", "readerLine", " readle", "textline", "readerpoint", "readerline", "Readpoint", "textfile", "readstring", "readle", "readablelines", "Readline", "loadstring", "loadLine", " readstring", "ReadLine", "getLine", "readablefile", "getlines", "loadline"], "MOD": ["MAX", " nm", "N", "mod", "Max", " nu", " err", "Mod", " lim", " DEBUG", " LIM", "ALL", " indent", "Exp", "bytes", "EXP", "SIZE", "S", " NUM", "exp", " EXP", "LINE", " mod", " exp", " WARNING", "Bytes", " LOG"], "INF": ["INN", " INV", "PINV", "INf", "InF", "PINF", "InN", "InV", "PINN", "PINf", "INV", "Inf", " INf", " INN"], "n": ["nr", "N", "x", "net", "nt", "resh", "gn", "ln", "d", "on", "ne", "cn", "g", "sn", "r", "c", "m", "z", "ns", "ny", "o", "nl", "nov", "num", "fn", "t", "len", "nb", "nor", "no", "mn", "na", "an", "v", "tn", "nc", "nm", "un", "nan", "nu", "nn", "l", "np", "ng"], "a": ["history", "sta", "ae", "ab", "era", "p", "ana", "arr", "va", "xa", "ai", "zero", "w", "c", "ma", "eas", "ga", "aux", "o", "ea", "la", "aaa", "act", "b", "t", "alpha", "wa", "apa", "out", "na", "an", "att", "all", "list", "A", "ap", "obj", "at", "sa", "ao", "app", "au", "oa", "aos", "aa", "am", "ar", "es", "changes", "area", "ba", "ca", "ac"], "i": ["mi", "ki", "xi", "x", "ia", "ie", "ci", "gi", "p", "di", "ai", "I", "iter", "r", "c", "m", "z", "set", "ami", "ic", "ins", "ix", "o", "ip", "t", "io", "si", "ii", "li", "out", "e", "int", "ti", "im", "it", "ini", "zi", "l", "pi", "u", "id", "y", "ij", "ik", "iu", "init"], "ans": ["ars", "ANS", "ians", "ats", "ants", "ints", "outs", "ai", "aus", "ros", "us", "ts", "ates", "ns", "ann", "rs", "ks", "anas", "ins", "nl", "ms", "amps", "ls", "ens", "ations", "ots", "mn", "an", "anks", "iann", "anes", "nan", "nz", "ams", "ands", "aos", "ads", "arts", "cs", "os", "es", "ds"], "s": ["js", "d", "p", "name", "g", "fs", "span", "r", "w", "erences", "c", "ts", "m", "z", "ns", "ies", "rs", "ks", "ins", "ries", "ms", "ers", "ls", "b", "t", "S", "ss", "si", "ress", "its", "ends", "v", "e", "gs", "sq", "ws", "string", "has", "ims", "sv", "ments", "itions", "times", "eps", "resses", "q", "sd", "u", "cs", "arts", "se", "os", "stats", "qs", "ds", "ps", "sort", "bs"], "j": ["json", "uj", "ja", "err", "aj", "js", "p", "on", "ret", "g", "jp", "job", "r", "oj", "jc", "z", "jj", "jing", "ju", "o", "res", "pr", "jl", "br", "b", "je", "f", "t", "fr", "jac", "pt", "J", "ion", "bj", "out", "ji", "kj", "v", "jas", "gov", "obj", "it", "jump", "q", "l", "dj", "y", "ij", "bs"], "k": ["ck", "km", "ki", "kn", "uk", "ek", "kr", "x", "kh", "kl", "ijk", "max", "p", "g", "ask", "jp", "ak", "ke", "kid", "c", "z", "m", "ks", "kw", "ko", "tk", "kok", "gh", "key", "kj", "v", "ok", "kick", "ikk", "ku", "q", "wk", "kt", "u", "kk", "ka", "K", "ik", "sk", "kg", "kan", "mk", "unk", "ac"]}}
{"code": "import sys\\nimport math\\nfrom collections import deque\\n\\nsys.setrecursionlimit(1000000)\\nMOD = 10 ** 9 + 7\\ninput = lambda: sys.stdin.readline().strip()\\nNI = lambda: int(input())\\nNMI = lambda: map(int, input().split())\\nNLI = lambda: list(NMI())\\nSI = lambda: input()\\n\\n\\ndef make_grid(h, w, num): return [[int(num)] * w for _ in range(h)]\\n\\n\\ndef main():\\n    H, W, K = NMI()\\n    dp = make_grid(H+1, W, 0)\\n    move = make_grid(W, W, 0)\\n\\n    dp[0][0] = 1\\n\\n    for case in range(2**(W-1)):\\n        bad_case = False\\n        prev_bit = -1\\n        for i in range(W-1):\\n            now_bit = (case >> i) & 1\\n            if now_bit == prev_bit == 1:\\n                bad_case = True\\n            prev_bit = now_bit\\n        if bad_case:\\n            continue\\n\\n        for b in range(W):\\n\\n            if b == 0:\\n                if (case >> 0) & 1:\\n                    move[0][1] += 1\\n                else:\\n                    move[0][0] += 1\\n\\n            elif b == W - 1:\\n                if (case >> b - 1) & 1:\\n                    move[b][b - 1] += 1\\n                else:\\n                    move[b][b] += 1\\n\\n            else:\\n                if (case >> b - 1) & 1:\\n                    move[b][b - 1] += 1\\n                elif (case >> b) & 1:\\n                    move[b][b + 1] += 1\\n                else:\\n                    move[b][b] += 1\\n\\n    for h in range(1, H+1):\\n        for w in range(W):\\n            for i in range(W):\\n                dp[h][w] += dp[h-1][i] * move[i][w]\\n\\n    print(dp[H][K-1]%MOD)\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "240", "substitutes": {"MOD": ["MAX", "M", "N", "SET", "UPDATE", "mod", "DIR", "R", "POS", "Mod", "FD", "RM", "OD", "MIN", "LOCK", "PUT", "MC", "TH", "MD", "RED", "NO", "SIZE", "NUM", "NAME", "MODE", "DX", "ID", "MS", "FIN", "RO", "OK", "DEV", "MT", "EW", "LOC", "UN", "OOL", "REM", "COM"], "input": ["history", "arg", "next", "n", "call", "str", "local", "select", "expression", "point", "active", "name", "view", "get", "eval", "short", "shift", "inc", "raw", "start", "length", "set", "ref", "read", "type", "format", "param", "step", "output", "ip", "PUT", "result", "cmd", "word", "config", "count", "alpha", "close", "source", "feed", "out", "std", "Input", "int", "each", "interface", "exec", "it", "csv", "char", "gen", "print", "q", "command", "sample", "lat", "error", "index", "data", "upper", "text", "init", "request", "sum"], "NI": ["UI", "ZI", "ni", "II", "WI", "LIN", "PI", "NV", "NW", "Ns", "NA", "RI", "NM", "NN", "NP", "CI", "NR", "IE", "DI", "wi", "NH", "AI", "IG", "GI", "NB", "PIN", "Ni", "IO"], "NMI": ["SNI", "CMi", "NMi", "LTI", "SMI", "DNI", "NNI", "LSI", "NTI", "LMI", "PNSI", "NMSI", "MSI", "MLI", "TLI", "NMTI", "MMI", "MNI", "DMI", "PNMI", "PNTI", "LNI", "TNI", "DLI", "NMMI", "PNLI", "TSI", "CLI", "SMi", "DMi", "TMI", "LLI", "CNI", "SLI", "CMI", "NSI", "NMLI"], "NLI": ["WLI", "RIF", "RLI", "RPI", "NPI", "SML", "WPI", "WIF", "RML", "SIF", "SLI", "SPI", "NIF", "WML", "NML"], "SI": ["SEC", "II", "ISA", "SD", "SH", "PI", "SL", "SB", "SER", "SO", "RI", "Si", "ISO", "SM", "IM", "IS", "si", "SG", "SC", "SE", "IG", "sa", "SP", "SU", "GI", "MI", "SA", "SR", "IO"], "h": ["history", "a", "ht", "n", "th", "sh", "x", "kh", "p", "head", "g", "hal", "dh", "hs", "r", "m", "ih", "zh", "rh", "http", "hu", "o", "host", "ah", "bh", "hl", "gh", "home", "v", "oh", "his", "ph", "ha", "hw", "ch", "he", "hr", "hd", "hour", "ho", "l", "hh", "u", "k", "Hi", "y", "j", "hi", "hm"], "w": ["a", "wx", "n", "sw", "x", "ex", "d", "p", "g", "tw", "wh", "we", "wt", "r", "weight", "c", "m", "z", "wb", "wr", "iw", "wat", "rw", "wi", "wd", "o", "ew", "f", "wl", "wid", "t", "word", "win", "wa", "wp", "v", "hop", "width", "ws", "row", "s", "work", "end", "nw", "dim", "q", "l", "aw", "u", "id", "k", "y"], "num": ["con", "n", "N", "max", "mot", "su", "um", "nom", "mu", "uni", "m", "unit", "nam", "enum", "NUM", "no", "nb", "win", "cum", "non", "valid", "tu", "na", "Num", "un", "node", "nu", "other", "one", "number", "mon", "np", "won", "k", "index", "sum"], "_": ["n", "th", "x", "d", "p", "mult", "__", "m", "val", "f", "of", "int", "all", "l", "k", "ow"], "H": ["M", "N", "CH", "T", "His", "HS", "HL", "HE", "R", "I", "X", "L", "HO", "HI", "GH", "WH", "DH", "O", "TH", "Ch", "V", "Height", "HH", "S", "Wh", "B", "J", "G", "HA", "P", "Host", "OH", "HK", "hr", "D", "HC", "MH", "Y", "phi", "High", "U", "F", "HT", "Hi", "He", "C"], "W": ["WT", "WC", "M", "N", "We", "T", "WR", "GW", "MW", "WI", "Win", "CW", "TW", "Ws", "OW", "WP", "NW", "X", "I", "R", "L", "RW", "Wi", "WH", "VW", "BW", "WA", "V", "TH", "Width", "Tw", "S", "Wh", "SW", "B", "Q", "WB", "G", "P", "Wa", "D", "WM", "Y", "FW", "WE", "DW", "EW", "Weight", "HT", "F", "Z"], "K": ["WC", "M", "N", "T", "CW", "KR", "TW", "X", "R", "I", "KK", "WH", "BW", "O", "V", "KS", "TH", "PK", "KC", "S", "B", "SW", "Q", "Wh", "G", "P", "Num", "HK", "NB", "Y", "OK", "DW", "k", "U", "Z", "KE", "C"], "dp": ["pkg", "pm", "dos", "dm", "p", "db", "cd", "vp", "dial", "jp", "dl", "fp", "pb", "gp", "wd", "tp", "dt", "df", "dc", "dep", "pas", "hp", "DP", "wp", "dr", "pd", "resp", "cp", "deb", "bet", "dq", "pipe", "dd", "dj", "np", "px", "grad", "pp", "ds", "ps", "adr"], "move": ["mod", "rm", "rain", "update", "new", "do", "mem", "package", "range", "rot", "fine", "mot", "gate", "vote", "port", "point", "rule", "transfer", "replace", "position", "m", "dl", "mut", "change", "step", "send", "delete", "route", "pos", "params", "model", "msg", "pose", "pro", "draw", "use", "transform", "loc", "next", "take", "shift", "ment", "query", "make", "remove", "dr", "remote", "cp", "jump", "dim", "op", "late", "ge", "path", "adjust", "rem", "Move", "param", "save", "mix", "cmd", "go", "create", "parse", "drop", "delay", "work", "ve", "command", "copy", "mat"], "case": ["ce", "client", "x", "ride", "me", "ab", "match", "p", "use", "Case", "name", "ase", "cycle", "exc", "test", "ib", "rule", "weight", "c", "ace", "set", "bi", "condition", "cho", "type", "change", "ice", "power", "ide", "catch", "be", "bug", "success", "bc", "cond", "witch", "cas", "block", "bus", "force", "li", "sc", "v", "switch", "cp", "ch", "it", "end", "co", "base", "one", "cases", "phi", "pi", "line", "then", "id", "ca", "chain"], "bad_case": ["bad_Case", "badxpair", "bad_pair", "good_condition", "badxcondition", "good_case", "good_sequence", "bad_cases", " bad_chance", "badxcase", "good_cases", "bad_block", "bad_condition", "bad_instance", "good_Case", "good_pair", "good_instance", "bad_sequence", "bad_chance", " bad_block", " bad_condition", "badxsequence"], "prev_bit": ["prev_bits", "vious___mask", "prev___byte", " prev_BIT", "prev_byte", " prev_bits", "vious___bits", "prev_short", "prev_mask", "prev_BIT", "this_bit", "this_bits", "vious___bit", "vious_mask", "prev___bits", " prev_pos", "vious_byte", "prev_pos", "prev___mask", "this_part", "vious_bits", "prev_part", "this_short", "prev___bit", "vious_bit", "vious___byte"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "ci", "gi", "d", "p", "di", "ib", "ai", "I", "c", "z", "m", "bi", "yi", "wi", "o", "ic", "ip", "f", "t", "si", "li", "ii", "v", "e", "int", "ti", "it", "zi", "phi", "pi", "l", "u", "id", "j", "y", "index", "ij", "k", "iu"], "now_bit": [" now_tag", "now_tag", " now_byte", "now_bug", "now_bits", "current_bits", "now1bit", "now1byte", "current_bit", "now1bits", "current_bug", " now_bits", "now_byte", "now1tag"], "b": ["a", "bis", "body", "bu", "sb", "x", "n", "ab", "d", "p", "db", "bar", "beta", "g", "ib", "lb", "r", "c", "bg", "z", "m", "bd", "bi", "wb", "fb", "rb", "bm", "be", "abb", "bh", "br", "f", "bc", "t", "gb", "nb", "B", "bb", "bus", "bit", "v", "bt", "e", "s", "ch", "eb", "base", "cb", "l", "bp", "u", "bin", "id", "j", "k", "y", "big", "bound", "bs", "ba", "back"]}}
{"code": "n = int(input())\\nh = [int(i) for i in input().split()]\\n# dp\u306e\u6700\u5c0f\u5024\u3092\u5909\u66f4\u3059\u308b\u95a2\u6570\\ndef chmin(a, b):\\n    if a > b:\\n        return b\\n    else:\\n        return a\\n    \\n# \u7121\u9650\u5927\u306e\u5024\\nf_inf = float('inf')\\n# DP \u30c6\u30fc\u30d6\u30eb\u3092\u521d\u671f\u5316\u3000(\u6700\u5c0f\u5316\u554f\u984c\u306a\u306e\u3067 INF \u306b\u521d\u671f\u5316)\\ndp = [f_inf] * (10**5+10)\\n# \u521d\u671f\u6761\u4ef6\\ndp[0] = 0\\n# \u8db3\u5834 i \u304b\u3089\u8db3\u5834 i+1 \u3078\u79fb\u52d5\u3059\u308b\u3002\u30b3\u30b9\u30c8\u306f|h[i]\u2212h[i+1]|\\n# \u8db3\u5834 i \u304b\u3089\u8db3\u5834 i+2 \u3078\u3068\u79fb\u52d5\u3059\u308b \u30b3\u30b9\u30c8\u306f |h[i]\u2212h[i+2]|\\nfor i in range(n-1):\\n    dp[i + 1] = chmin(dp[i + 1], dp[i] + abs(h[i] - h[i + 1]))\\n    # n-2\u306e\u6642\u306f2\u3064\u5148\u306f\u306a\u3044\\n    if i < n-2:\\n        dp[i + 2] = chmin(dp[i + 2], dp[i] + abs(h[i] - h[i + 2]))\\nprint(dp[n-1])", "target": "5", "substitutes": {"n": ["N", "x", "net", "nt", "d", "p", "w", "sn", "c", "m", "z", "ns", "o", "nl", "f", "b", "num", "t", "nb", "out", "na", "v", "nm", "s", "nn", "q", "l", "k", "j"], "h": ["sh", "x", "p", "g", "w", "r", "c", "m", "ih", "o", "H", "f", "b", "hl", "hp", "t", "v", "hash", "ch", "ph", "he", "hr", "q", "l", "j", "hi", "hm"], "i": ["mi", "ki", "xi", "x", "uri", "gi", "p", "di", "ai", "I", "iter", "m", "bi", "qi", "o", "ip", "ri", "si", "iu", "ii", "li", "v", "ti", "oi", "ini", "zi", "l", "pi", "phi", "u", "id", "j", "k", "ij", "iri", "hi"]}}
{"code": "N,M=input().split()\\nprint(\"Yes\" if N==M else \"No\")", "target": "54", "substitutes": {"N": ["SN", "CNN", "n", "NS", "T", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "NR", "NT", "H", "O", "V", "No", "NO", "S", "NE", "B", "J", "Q", "G", "P", "A", "E", "D", "Y", "Ni", "K", "F", "AN", "Z", "C"], "M": ["MO", "T", "R", "I", "L", "NM", "MAL", "m", "SM", "H", "MM", "V", "MC", "C", "MON", "IM", "S", "MAN", "B", "J", "G", "P", "MP", "E", "MS", "D", "DM", "TM", "Y", "MN", "MI", "MT", "FM", "LM", "F", "PM", "JM"]}}
{"code": "class UnionFind:\\n  def __init__(self, n):\\n    self.parent = [i for i in range(n)]\\n    self.height = [0 for i in range(n)]\\n        \\n  def get_root(self, i):\\n    if self.parent[i] == i:\\n      return i\\n    else:\\n      self.parent[i] = self.get_root(self.parent[i])\\n      return self.parent[i]\\n            \\n  def unite(self, i, j):\\n    root_i = self.get_root(i)\\n    root_j = self.get_root(j)\\n    if root_i != root_j:\\n      if self.height[root_i] < self.height[root_j]:\\n        self.parent[root_i] = root_j\\n      else:\\n        self.parent[root_j] = root_i\\n        if self.height[root_i] == self.height[root_j]:\\n          self.height[root_i] += 1\\n                \\n  def is_in_group(self, i, j):\\n    if self.get_root(i) == self.get_root(j):\\n      return True\\n    else:\\n      return False\\n    \\nN, M = map(int, input().split())\\ngraph = list()\\nans = 0\\nfor i in range(M):\\n  a, b = map(int, input().split())\\n  graph.append([a-1, b-1])\\nfor i in range(M):\\n  flag = 0\\n  uf = UnionFind(N)\\n  for j in range(M):\\n    if(i != j):\\n      uf.unite(graph[j][0], graph[j][1])\\n  for k in range(1, N):\\n    if uf.is_in_group(0, k) == False:\\n      flag = 1\\n  if(flag == 1):\\n    ans += 1\\nprint(ans)", "target": "634", "substitutes": {"self": ["json", "cmp", "instance", "context", "wn", "p", "table", "manager", "mp", "left", "old", "dev", "res", "default", "log", "config", "empty", "close", "response", "disk", "private", "e", "about", "obj", "compl", "wrapper", "app", "new", "q", "reader", "dd", "mem", "phys", "se", "lex", "changes", "data", "history", "pkg", "sw", "before", "conn", "to", "me", "local", "ln", "get", "own", "this", "pre", "sect", "full", "my", "prefix", "help", "shape", "change", "ins", "py", "results", "also", "params", "console", "soc", "s", "debug", "tmp", "cl", "user", "error", "python", "nd", "thus", "next", "ae", "nt", "attribute", "spec", "raw", "txt", "sys", "ref", "subject", "make", "xml", "h", "you", "form", "parts", "urn", "remote", "add", "resp", "metadata", "github", "all", "small", "cache", "partial", "public", "req", "der", "os", "pp", "Self", "views", "th", "name", "view", "method", "w", "what", "current", "expr", "rem", "details", "info", "rs", "diff", "by", "ren", "rec", "func", "ls", "rel", "news", "parse", "support", "ws", "rss", "links", "work", "first", "proc", "_", "comp", "errors"], "n": ["net", "nt", "ln", "p", "names", "ne", "cn", "g", "sn", "r", "c", "m", "ns", "o", "h", "num", "t", "len", "nb", "no", "mn", "na", "v", "nc", "nm", "s", "nan", "nu", "size", "nn", "number", "l", "np", "pi"], "parent": ["top", "master", "state", "instance", "path", "port", "point", "p", "table", "manager", "name", "child", "Parent", "head", "test", "family", "target", "server", "seed", "position", "tip", "map", "mother", "children", "unit", "type", "status", "tree", "pool", "default", "host", "ip", "limit", "part", "initial", "block", "depth", "pid", "out", "list", "cache", "up", "node", "peer", "size", "father", "timeout", "id", "index", "scope", "parents", "ps", "root", "last", "source", "chain"], "i": ["ki", "x", "p", "c", "z", "ix", "num", "ri", "nil", "v", "e", "ti", "oi", "it", "iso", "ini", "phi", "id", "root", "init", "ia", "g", "ai", "I", "this", "iter", "m", "status", "iti", "ic", "o", "si", "iu", "ei", "im", "s", "zi", "l", "u", "ij", "chain", "ci", "gi", "ir", "d", "ip", "io", "ii", "ui", "pi", "index", "ik", "mi", "xi", "ie", "name", "di", "ami", "bi", "info", "f", "t", "li", "ji", "null", "int", "iy", "one", "item", "y", "iri", "hi"], "height": ["history", "resolution", "hold", "header", "max", "sum", "head", "family", "shift", "length", "weight", "push", "buffer", "status", "shape", "window", "power", "input", "hei", "total", "pool", "h", "distance", "default", "capacity", "grow", "limit", "Height", "count", "alpha", "no", "block", "density", "depth", "volume", "style", "out", "hist", "all", "pop", "width", "rank", "balance", "gravity", "tower", "hash", "up", "cache", "high", "size", "div", "range", "index", "strength", "data", "parents", "stack", "root", "scope", "version", "chain"], "j": ["json", "x", "uj", "kh", "ja", "ie", "ijk", "js", "aj", "p", "d", "g", "jp", "r", "jc", "z", "m", "jj", "note", "o", "h", "jl", "br", "right", "je", "rel", "t", "pt", "si", "J", "bj", "key", "ji", "v", "kj", "li", "e", "obj", "s", "tr", "it", "jump", "other", "q", "l", "dj", "u", "y", "er", "ij", "ik"], "root_i": ["currentfuli", "root_ij", "rootableb", "rootfulb", "final_ij", "root_io", "root64ik", "root64gi", "current_b", "root64i", "rootptik", "rootswji", "final_i", "final_ic", "rootableis", "root_iu", "root_ci", "root_info", "root_ui", "final64ic", "mount_gi", "root_ic", "rootpti", " root_ji", "root_ir", "currentfulhi", "rootablehi", "root00i", "root_b", "rootptic", "root00gi", "rootptij", "current_hi", "root64ij", "root5i", "rootswy", "ot_ji", "rootableinfo", "rootablein", "rootfulhi", "root_hi", "rootlei", "mount_ic", "root00iu", "root_I", "rootablei", "final_ik", "final64ij", "rootlej", "mount_i", "root_is", "rootleir", "root5hi", "root5in", "ot_ui", "current_in", "rootfuli", "currentfulb", " root_I", "root64iu", "rootswui", "rootfulin", "mount_iu", "final64ik", "rootswi", "root5b", " root_ir", "root_gi", "ot_i", "boot_ci", "root_ik", "root_in", "rootableci", "boot_info", "root_y", "currentfulin", "boot_is", "root00ic", " root_io", "root64ic", "rootleji", "ot_y", "root_ji", "current_i", "boot_i", "final64i"], "root_j": ["root_ij", "chain_ji", " root_jp", "root_e", "rootjj", "root_jp", "chain_j", "host_ji", "rootjja", "root_js", "chain_e", "root_ja", "root_dj", "chain_t", "right_dj", "host_js", "root_t", "rootjij", "rootjjump", "child_ij", "child_j", "host_j", "rootjji", "root_u", "child_u", "right_y", "rootje", "child_o", "child_ja", "right_j", "host_jit", "child_jump", "root_y", "right_ja", "root_jump", "root_jit", "root_ji", "rootjt", "root_o"], "N": ["NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "NT", "H", "O", "V", "S", "NE", "J", "Q", "G", "ND", "P", "A", "D", "Y", "MN", "Ni", "K", "F", "AN", "TN", "C"], "M": ["MO", "T", "CM", "MU", "R", "I", "L", "NM", "MX", "m", "H", "MM", "MC", "V", "MD", "C", "S", "MAN", "B", "J", "G", "P", "A", "MP", "MA", "ME", "MS", "D", "DM", "TM", "MN", "MI", "MT", "K", "LM", "Man", "JM"], "graph": ["Graph", "history", "png", "conn", "json", "domain", "igraph", "services", "path", "ograph", "APH", "edge", "cycle", "g", "human", "raph", "image", "connect", "zero", "pen", "chain", "age", "closure", "map", "connection", "subject", "man", "window", "shape", "tree", "config", "memory", "feed", "bridge", "forest", "list", "github", "stream", " graphs", "register", "stra", "model", "adj", "cache", "node", "gen", "group", "cycles", "van", "handle", "collection", "widget", "np", "layout", "network", "groups", "stack", "connected", "draw", "pg", "storage"], "ans": ["ANS", "ants", "ats", "anon", "eds", "outs", "aus", "us", "aned", "ts", "ns", "ann", "rans", "rs", "ums", "anas", "ks", "mas", "ins", "ms", "amps", "flags", "ls", "mean", "angs", "ents", "ids", "ens", "cons", "uns", "an", "posts", "rors", "anks", "aps", "s", "ions", "ran", "ands", "vs", "cs", "ags", "os", "groups", "ps", "vers"], "a": ["ia", "sta", "ae", "ab", "aj", "va", "ai", "c", "ma", "m", "ga", "ea", "la", "aaa", "be", "\u00e4", "da", "apa", "an", "e", "A", "at", "sa", "app", "au", "oa", "aa", "am", "ar", "ack", "ba", "ca", "ac"], "b": ["sb", "ab", "d", "p", "db", "g", "ib", "r", "c", "m", "z", "bi", "fb", "rb", "h", "be", "f", "br", "bc", "gb", "B", "bb", "v", "e", "eb", "cb", "l", "u", "y", "bs", "ba"], "flag": ["fd", "state", "option", "ld", "loop", "cloud", "store", "true", "leg", "weight", "age", "wait", "condition", "status", "ann", "type", "step", "lag", "save", "bug", "ground", "log", "flags", "tag", "cmd", "f", "mask", "bool", "cond", "ord", "Flag", "ver", "off", "fl", "ff", "int", "st", "debug", "group", "stage", "command", "band", "line", "id", "lan", "member", "mode", "ctl", "sync", "field"], "uf": ["lu", "lf", "bf", "um", "uch", "ul", "fol", "aus", "us", "img", "pb", "bo", "ucc", "uff", "aim", "uph", "ull", "NF", "pu", "buf", "f", "df", "uh", "ef", "gb", "uc", "fo", "ud", "ffield", "aft", "ff", "gru", "hum", "raf", "utf", "gow", "tf", "ank", "ui", "xff", "auc", "buff", "hog", "fg", "u", "ub", "uu", "UF", "ume", "ow"], "k": ["ck", "ki", "kn", "uk", "kr", "kh", "kl", "ijk", "p", "jp", "ak", "ke", "kid", "r", "z", "m", "o", "kw", "ko", "kind", "tk", "t", "key", "kj", "v", "ok", "it", "ku", "kt", "q", "kk", "id", "sk", "ka", "K", "ik", "kg", "y", "mk", "unk"]}}
{"code": "S=list(input())\\n\\nif len(S)==2:\\n  print(\"\".join(S))\\nelse:\\n  S.reverse()\\n  print(\"\".join(S))", "target": "528", "substitutes": {"S": ["Save", "M", "NRS", "N", "NS", "T", "SH", "BS", "SS", "HS", "SL", "SB", "SER", "R", "JS", "L", "RS", "PS", "I", "VS", "SI", "CS", "TS", "SAN", "Set", "SM", "H", "GS", "V", "SAM", "INS", "B", "Q", "G", "P", "SE", "A", "s", "IES", "SU", "SP", "D", "ST", "DS", "SA", "F", "WS", "LS", "SR", "Z", "BY", "C"]}}
{"code": "s = input().strip()\\ndp = [[0]]\\nprint(len(s)//2-s.count('p'))\\n", "target": "149", "substitutes": {"s": ["a", "n", "sb", "sw", "str", "ats", "js", "p", "g", "i", "hs", "c", "ts", "ns", "rs", "input", "ins", "sl", "sg", "h", "f", "b", "sp", "t", "S", "ss", "strings", "gs", "sq", "string", "gets", "st", "sv", "ashes", "sts", "l", "words", "qs", "ds", "ps", "bs"], "dp": ["osp", "d", "db", "mp", "ep", "vp", "di", "dl", "fp", "pb", " pp", "tp", "dt", "dc", "DP", "lp", "pd", "dr", "cp", "eps", "D", "dq", "vs", "bp", "dd", "np", " d", "pp", "ds"]}}
{"code": "# coding: utf-8\\n\\nline = raw_input()\\nprint ''.join([((s.lower() if s.isupper() else s.upper()) if s.isalpha() else s) for s in line])", "target": "643", "substitutes": {}}
{"code": "n, a, b = map(int, input().split())\\n\\nans = 0\\nfor i in range(1, n+1):\\n    sum = 0\\n    tmp = i\\n    while tmp != 0:\\n        sum += tmp%10\\n        tmp = tmp//10\\n    if sum >= a and sum <= b:\\n        ans += i\\nprint(ans)", "target": "704", "substitutes": {"n": ["N", "x", "nt", "d", "p", "en", "ne", "cn", "sn", "c", "m", "ns", "f", "num", "t", "len", "nb", "no", "mn", "na", "v", "an", "nc", "nm", "nan", "nu", "nw", "nn", "l", "q", "np", "j", "k", "nd"], "a": ["sta", "ab", "ta", "ama", "va", "ai", "c", "ma", "ace", "ata", "ea", "la", "be", "act", "ax", "t", "alpha", "an", "A", "ap", "al", "at", "sa", "ao", "app", "au", "oa", "aa", "l", "am", "ar", "area", "ba", "ac"], "b": ["bis", "ben", "sb", "x", "ab", "d", "p", "db", "g", "ib", "lb", "r", "c", "m", "bi", "fb", "rb", "o", "h", "f", "bas", "bc", "t", "nb", "B", "bb", "v", "e", "eb", "l", "y", "bs", "ba"], "ans": ["ANS", "ants", "ats", " means", "acs", "outs", "ows", "ai", "aus", "us", " Ans", "ns", "vals", "ann", "rans", "rs", "ums", "anas", "ks", "offs", "ins", "mas", "ras", "ons", "ms", "amps", "mean", "ls", "pan", "ens", "sim", "uns", "an", "rors", "iann", "oss", "s", "nan", "ran", "ams", "nas", "vs", "cs", "es", "AN"], "i": ["mi", "xi", "x", "ia", "ci", "cli", "gi", "p", "di", "ai", "I", "iter", "c", "m", "z", "bi", "prime", "ic", "t", "multi", "io", "si", "sim", "li", "ii", "v", "e", "int", "ti", "im", "it", "ini", "zi", "ui", "q", "pi", "u", "y", "index", "j", "ij", "iu", "init"], "sum": ["sym", "net", "max", "cmp", "summary", "sta", "su", "sun", " summed", "sh", "um", "cont", " Sum", "sub", "med", "this", "sup", "acc", "dest", "set", "mut", "sam", "ums", "dev", "total", "ann", " cum", "snap", "result", "Sum", "mean", "num", " SUM", "count", "vol", "alpha", "si", "cum", "umm", "sim", "fac", "tu", "na", "an", "cos", "msg", "sa", "average", "size", "div", "pi", "mem", "u", "mitt", " sums"], "tmp": ["tm", "cmp", "max", "perm", "nt", "p", "mp", "sub", "test", "sup", "td", "tc", "txt", "pre", "m", "src", "diff", "mut", "sam", "img", "prefix", "prime", "ctx", "old", "gt", "tp", "snap", "term", "ind", "sp", "t", "temp", "nb", "cum", "ot", "out", "tn", "cache", "qq", "emp", "obj", "xy", "tt", "st", "msg", "tar", "new", "size", "cb", "addr", "buff", "np", "timeout", "etc", "hot", "data", "attr", "mint", "mk"]}}
{"code": "#coding:UTF-8\\n\\ndef gcd(x,y):\\n    r = x % y\\n\\n    if r==0: return y\\n    else: return gcd(y,r)\\n\\ndef lcm(x,y):\\n    return x * y / gcd(x,y)\\n\\nwhile True:\\n    try:\\n        n = map(int, raw_input().split())\\n\\n        print \"%d %d\"%(gcd(n[0],n[1]),lcm(n[0],n[1]))\\n\\n    except Exception:\\n        break;", "target": "604", "substitutes": {}}
{"code": "from collections import defaultdict\\nimport sys,heapq,bisect,math,itertools,string,queue,datetime\\nsys.setrecursionlimit(10**8)\\nINF = float('inf')\\nmod = 10**9+7\\neps = 10**-7\\ndef inpl(): return list(map(int, input().split()))\\ndef inpl_str(): return list(input().split())\\n\\nN,K = inpl()\\nprint(N-K+1)\\n", "target": "459", "substitutes": {"INF": ["PINFT", " INInf", " INV", "InFT", "PINV", "PINInf", "InInf", "InF", "INFT", "PINF", "InV", "INV", "INInf", " INFT"], "mod": ["MOD", " Mod", "mult", "Mod", "fun", "scale", "inv", "pad", "circ", "floor", "prime", "dec", "round", "fac", "dig", "bit", "pos", "add", "exp", "ran", "per", "div", "base", "mag", "var", "rand", " pow", "deg"], "eps": [" times", "err", "ep", "PS", " errors", "scale", "ns", "EP", "prime", "ms", "days", "levels", " iterations", "pos", "exp", "e", " steps", "steps", "eq", "s", "times", " EPS", "phi", "pi", "es", "pp", "errors", "ps", "bits"], "N": ["M", "n", "NS", "T", "NC", "GN", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "NT", "O", "V", "NUM", "S", "B", "J", "Q", "G", "ND", "P", "Num", "D", "NB", "Y", "MN", "Ni", "F", "TN", "FN", "NG", "C"], "K": ["M", "NS", "T", "KN", "KR", "X", "R", "L", "KK", "H", "FK", "O", "V", "KS", "PK", "KC", "NK", "S", "B", "J", "Q", "SK", "G", "P", "A", "HK", "Mask", "VK", "D", "Y", "MN", "k", "F", "KI", "Z", "KE", "KING", "C"]}}
{"code": "import sys\\n\\nread = sys.stdin.read\\nreadline = sys.stdin.buffer.readline\\nsys.setrecursionlimit(10 ** 8)\\nINF = float('inf')\\nMOD = 10 ** 9 + 7\\n\\n\\ndef main():\\n    X = int(readline())\\n    A = int(readline())\\n    B = int(readline())\\n    print((X-A)%B)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "98", "substitutes": {"read": ["rid", "hold", "pair", " readable", "load", "str", "select", "write", "run", " send", "readable", "R", " write", "take", "iter", "r", "txt", " peek", "buffer", "query", "input", "reads", " RN", " find", "ead", " Read", "parse", "std", "int", "pop", "stream", "each", "byte", " READ", " eat", "Read", "print", "READ", "reader", "reading", "rand", "RD", " pars", " reader", "text", " reads", "rd"], "readline": ["readme", " readpoint", " readme", "readlo", "readpixel", "loadout", " readpixel", "randLine", "randme", "Readlo", "Readme", "readlist", "Readstring", " readnl", "loadpixel", "printout", "loadlist", "printstring", "Readlines", "printpixel", "printline", " readlo", " readlines", "randline", "readlines", "readpoint", " readlist", "randstring", "readLine", "printlist", " readLine", "Readnl", "loadlines", "printpoint", "writestring", "writenl", "Readpoint", "printlines", "printme", "readout", "readnl", "writeline", "readstring", "writelo", "Readline", "loadstring", " readstring", "ReadLine", " readout", "loadme", "loadline"], "INF": ["INT", " INInf", "InFT", "InInf", "NT", "InF", "INFT", "NInf", " INT", "NFT", "NF", "INInf", "InT", " INFT"], "MOD": ["MB", "mod", "LIN", "LOG", "Mod", "POS", "AD", "INC", "FD", "MIN", "ERROR", "Mods", "LOCK", "MAC", "ASH", "REG", "EXP", "NUM", "MODE", "UL", "DEBUG", "RR", "ADD", "WARN", "DM", "RO", "OK", "BIT", "REM"], "X": ["M", "N", "IX", "x", "T", "TX", "R", "EX", "I", "L", "MX", "UX", "OX", "AB", "AX", "H", "ZX", "XY", "V", "AR", "Cross", "S", "XP", "DX", "XM", "J", "Q", "G", "P", "E", "XX", "XT", "XXX", "Y", "XL", "U", "F", "Z", "C", "Xi"], "A": ["GA", "M", "An", "IA", "AH", "AU", "I", "ACC", "AD", "AL", "AV", "AB", "App", "AE", "H", "AA", "LA", "As", "AI", "AR", "C", "AS", "G", "HA", "P", "CA", "E", "AF", "D", "AM", "Y", "SA", "U", "AC", "BA", "Array", "AP"], "B": ["LB", "M", "N", "CB", "T", "RB", "OB", "Bs", "SB", "R", "I", "L", "IB", "AB", "W", "O", "V", "b", "S", "BC", "Bar", "BE", "J", "G", "WB", "P", "BB", "BM", "E", "FB", "D", "EB", "NB", "Y", "BO", "BF", "DB", "BA", "Z", "C"]}}
{"code": "#!/usr/bin/env python3\\n\\ndef main():\\n    n, y = map(int, input().split())\\n\\n    for i in range(n + 1):\\n        for j in range(n + 1):\\n            if n - i - j >= 0 and 10000 * i + 5000 * j + 1000 * (n - i - j) == y:\\n                print(i, j, n - i - j)\\n                exit()\\n    else:\\n        print(\"-1 -1 -1\")\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "465", "substitutes": {}}
{"code": "n=int(input())\\ns=list(map(str,input()))\\nif n%2==0:\\n    num=int(n/2)\\n    Sx=s[0:num]\\n    Sy=s[num:n]\\n    if Sx==Sy:\\n      print(\"Yes\")\\n    else:\\n      print(\"No\")\\nelse:\\n  print(\"No\")", "target": "532", "substitutes": {"n": ["N", "x", "nt", "gn", "ln", "d", "p", "names", "norm", "ne", "cn", "g", "i", "long", "sn", "c", "m", "ns", "o", "nl", "f", "t", "nia", "len", "no", "nb", "nor", "mn", "na", "int", "nc", "all", "nm", "un", "al", "nan", "nu", "size", "nn", "number", "l", "np", "j", "y", "k"], "s": ["sb", "x", "ys", "str", "ats", "js", "p", "series", "i", "hs", "ts", "m", "south", "ns", "rs", "ses", "ins", "h", "ms", "ls", "b", "sp", "t", "ss", "S", "parts", "its", "strings", "v", "gs", "sq", "sa", "xs", "sv", "sts", "q", "l", "se", "stats", "qs", "ds", "bs"], "num": ["loc", "nr", "th", "x", "alph", "sym", "max", "um", "mod", "nom", "d", "p", "i", "zero", "m", "nam", "col", "val", "t", "NUM", "alpha", "no", "nb", "valid", "mn", "off", "out", "na", "Num", "int", "cal", "nm", "al", "none", "end", "dx", "nu", "number", "mon", "mun", "np", "j", "index", "sum"], "Sx": ["StX", "Stct", "Mx", " Sdx", "Sct", "Suct", "SX", "MX", "Mxi", " sxi", " sdx", " Sct", " sX", "SuX", " Sxs", "Sxs", "Mdx", "Sdx", "Suxs", "Sxi", " SX", " Sxi", "Sux", " sx", "Stx", "Stxs"], "Sy": ["sy", "Hy", "Rh", "Sh", "Dis", "Pr", "Ok", "Sys", "Str", "Sky", "My", "Yes", "Py", "Typ", "Sm", "Si", "Jr", "Sync", "Tr", "Ta", "Cs", "Gy", "Fi", "Year", "Sym", "As", "No", "Se", "Val", "Syn", "Is", "St", "Y", "Ky", "Ay", "yy", "y", "Style", "Ty", "SY", "Sp"]}}
{"code": "N=int(input())\\ns=[int(input()) for _ in range(N)]\\n\\ns = sorted(s)\\nSUM = sum(s)\\n\\nif SUM % 10 != 0:\\n  print(SUM)\\n  exit()\\n\\nfor i in range(N):\\n  if s[i] % 10 != 0:\\n    print(SUM - s[i])\\n    exit()\\n    \\nprint(0)", "target": "741", "substitutes": {"N": ["M", "n", "NS", "T", "GN", "NI", "Ns", "X", "I", "R", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "V", "TN", "NUM", "S", "B", "J", "Q", "G", "ND", "Num", "P", "Sn", "D", "NB", "Y", "MN", "Ni", "K", "F", "Z", "C"], "s": ["a", "n", "ats", "js", "d", "p", "eds", "tags", "r", "w", "c", "ts", "m", "ns", "reports", "rs", "ses", "tests", "ins", "ties", "h", "ms", "ls", "ids", "b", "f", "abs", "t", "S", "ss", "parts", "args", "its", "tes", "rings", "strings", "v", "gs", "sq", "gets", "sv", "xs", "sts", "rates", "y", "stats", "qs", "ds", "ps", "bs"], "_": [" e", " the", " j", " k", " name", " all", "ix", " long", " l", " x", " c", " m", " __", " each", " r", " index", " p", " some"], "SUM": ["SUED", "SSAV", "SRum", "RESum", "RESUM", "BSum", "sum", "sUB", "SRUM", "RESAV", "SSUS", " Sum", "SUUM", "SUum", "SNUM", "RESNUM", " SAV", "SRUB", "BSED", "SUL", "SSNUM", "SSum", "sUM", "DECUM", "BSUL", " SUL", "SUUL", "ESSum", "USum", " SNUM", "SUS", "USUM", "Sum", "DECSum", "SSUM", "USSum", " SED", "SUB", "ESUM", "DECUB", "SAV", "sUS", "ESUB", "DECum", "SED", "BSUM", "USUB", "SSUB", "SRUS", "ESum"], "i": ["mi", "n", "xi", "x", "uri", "me", "gi", "p", " j", "di", "ai", "I", "c", "batch", "bi", "qi", "yi", "ic", "ix", "ip", "ind", "f", "multi", "io", "si", "sim", "li", "ii", "ji", "ori", "v", "ti", "im", "it", "zi", "ui", "ini", "\u0438", "q", "pi", "id", "k", "j", "y", "ij", "index"]}}
{"code": "import math\\nA, B, H, M = map(int,input().split())\\nt = 60*H + M\\ntb = (6*t)%360\\nta = (360*t/(12*60))%360\\nc = math.sqrt(A**2 + B**2 - 2*A*B*math.cos(math.radians(ta-tb)))\\nprint(c)", "target": "290", "substitutes": {"A": ["a", "GA", "N", "T", "Ax", "API", "Am", "An", "IA", "Alpha", "AU", "R", "Av", "I", "L", "AL", "AST", "AV", "Area", "AB", "AE", "RA", "W", "AA", "As", "V", "AR", "AS", "S", "J", "G", "P", "HA", "AP", "CA", "D", "AF", "AM", "Y", "SA", "U", "K", "AC", "AN", "BA", "C"], "B": ["BI", "N", "T", "RB", "VB", "R", "I", "L", "IB", "AB", "BER", "W", "O", "V", "BT", "b", "S", "BC", "J", "BR", "G", "WB", "P", "BB", "BM", "E", "TB", "Bern", "D", "NB", "Y", "BO", "DB", "F", "BA", "BY", "C"], "H": ["N", "CH", "T", "HD", "HM", "SH", "HS", "HE", "X", "R", "I", "L", "HI", "GH", "NH", "W", "Hour", "HR", "h", "TH", "V", "HH", "J", "G", "P", "HA", "HC", "MH", "Hours", "Y", "HB", "K", "F", "HT", "He", "C"], "M": ["N", "T", "CM", "R", "I", "X", "L", "NM", "RM", "m", "W", "MM", "V", "MC", "TH", "S", "MAN", "J", "G", "P", "E", "MS", "D", "MH", "DM", "TM", "Y", "AM", "MI", "MT", "K", "F", "C"], "t": ["tm", "a", "n", "x", "T", "d", "p", "ct", "i", "td", "r", "tc", "w", "ts", "m", "z", "wt", "te", "o", "tp", "h", "term", "dt", "f", "b", "time", "pt", "ot", "tu", "v", "at", "tt", "s", "tr", "tf", "rt", "it", " T", "title", "l", "j", "y"], "tb": [" tbe", "tsb", "tdbe", "tdb", "tbe", " tbar", "tib", "tx", "ttbe", "ttib", "ttba", "tsib", " tx", "tsba", "Tx", "ttb", "tba", "Tbe", "tsbe", "tbar", "Tbar", "ttx", "tdib", "ttbar", "tdba", "Tb"], "ta": ["tm", "a", "tta", "T", "tan", "ra", "mu", "enta", "beta", "atan", "xa", "tc", "ma", "m", "ato", "Ta", "tera", "angle", "te", "pa", "tal", "tic", "b", "pha", "da", "uta", "wa", "tap", "ti", "ha", "tr", "au", "TA", "phi", "pi", "lat", "ara", "dra", "eta", "ca"], "c": ["a", "lc", "n", "gc", "cont", "p", "d", "g", "chart", "category", "r", "tc", "m", "fc", "h", "cv", "f", "b", "count", "dc", "cum", "conf", "comments", "v", "nc", "cache", "crit", "cos", "conv", "abc", "co", "cu", "l", "etc", "cs", "k", "cr", "ca", "C"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\ndef mapint(): return map(int, input().split())\\nsys.setrecursionlimit(10**9)\\n\\nN, M = mapint()\\nmod = 10**9+7\\n\\npos = {}\\nneg = {}\\nn = 1\\npos[0] = 1\\nneg[0] = 1\\nfor i in range(1, 500000):\\n    n *= i\\n    n %= mod\\n    pos[i] = n\\n    neg[i] = pow(n, mod-2, mod)\\n\\ndef prime_factorize(n):\\n    a = []\\n    while n % 2 == 0:\\n        a.append(2)\\n        n //= 2\\n    f = 3\\n    while f * f <= n:\\n        if n % f == 0:\\n            a.append(f)\\n            n //= f\\n        else:\\n            f += 2\\n    if n != 1:\\n        a.append(n)\\n    return a\\n\\nfrom collections import Counter\\nprimes = prime_factorize(M)\\nc = Counter(primes)\\nprimes = list(set(primes))\\nleng = len(primes)\\nans = 1\\nfor i in range(leng):\\n    p = primes[i]\\n    n = c[p]\\n    ans *= pos[N+n-1]*neg[n]*neg[N-1]\\n    ans %= mod\\n\\nprint(ans)\\n", "target": "473", "substitutes": {"N": ["SN", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "H", "O", "V", "NUM", "S", "PN", "J", "G", "P", "Num", "A", "Sn", "D", "Y", "MN", "Ni", "U", "K", "F", "AN", "TN", "FN", "C"], "M": ["MO", "T", "MOD", "CM", "R", "I", "Mod", "L", "NM", "RM", "m", "H", "MM", "V", "MC", "MD", "S", "MAN", "B", "G", "P", "MP", "E", "D", "TM", "AM", "MN", "MI", "MT", "U", "K", "F", "Z", "C"], "mod": ["rot", "con", "max", "perm", "MOD", "modified", "sum", "mods", " Mod", "d", "sign", "mm", "sub", "mult", "Mod", "fun", "scale", "pre", "m", "set", "z", "rem", "module", "od", "san", "man", "prime", "min", "step", "ms", "ind", "grow", "num", "t", "tab", "cond", "len", "sim", "ver", "bit", "add", "null", "un", "red", "im", "times", "com", "new", "ed", "div", "base", "pi", "rand", "reg", "j", "cm", "pro", "mode", "deg"], "pos": ["loc", "rot", "con", "pkg", "nt", "en", "on", "spec", "po", "POS", "us", "position", "ref", "ns", "Pos", "ins", "pr", "trans", "ens", "sp", "rel", "cond", "pt", "no", "prot", "pid", "out", "un", "obj", "cos", "at", "s", "eps", "pres", "opt", "pl", "l", "mon", "pose", "os", "index", "px", "late", "pro", "ps", "seq", "prop"], "neg": ["den", "loc", "rot", "Neg", "els", "nt", "serv", "minus", "en", "sub", "ne", "rev", "us", "inv", "ns", "dec", "Pos", "deg", "ins", "sl", "ko", "negative", "rec", "col", "ms", "trans", "mis", "ens", "ots", "rel", "agg", "len", "no", "num", "non", " Neg", "eros", "un", "alloc", "cos", "ois", "priv", "nos", "gen", "times", "desc", "dis", "vs", "mun", "mem", "cats", "vec", "obs"], "n": ["x", "net", "nt", "ni", "gn", "d", "en", "ln", "on", "names", "ne", "g", "cn", "norm", "dn", "name", "long", "r", "sn", "w", "m", "z", "ns", "note", "o", "nl", "h", "b", "num", "fn", "t", "len", "nb", "nor", "no", "mn", "out", "na", "v", "an", "yn", "nc", "e", "tn", "un", "nm", "s", "nan", "node", "nu", "size", "nn", "l", "number", "np", "pi", "u", "ng", "j", "k", "y", "rn", "pn", "ps"], "i": ["mi", "iii", "xi", "x", "ki", "ie", "ci", "gi", "d", "di", "ai", "I", "iter", "r", "m", "z", "bi", "info", "ic", "o", "ix", "ip", "h", "ind", "t", "io", "si", "li", "ii", "ji", "v", "e", "int", "ti", "ei", "im", "it", "s", "zi", "ini", "l", "pi", "phi", "u", "id", "y", "index", "j", "ij", "k", "pp", "iu"], "a": ["ia", "ae", "ac", "ab", "ta", "g", "ai", "xa", "w", "r", "ma", "m", "z", "ata", "eas", "ga", "power", "o", "aux", "ea", "la", "aaa", "h", "fa", "b", "t", "alpha", "apa", "add", "na", "an", "out", "e", "all", "A", "another", "sa", "at", "s", "ao", "app", "new", "au", "oa", "aos", "aa", "l", "ar", "os", "ya", "array", "area", "ca"], "f": ["fd", "x", "bf", "aff", "d", "fm", "g", "sf", "w", "fort", "r", "m", "z", "fc", "h", "two", "fa", "fr", "b", "t", "count", "fe", "fac", "fn", "num", "ff", "v", "e", "rf", "s", "tf", "q", "l", "fg", "u", "float", "y", "fi", "j", "F", "k", "cf", "ft", "frac"], "primes": ["Primes", "ptrimens", "rims", "replimes", "Primens", "Prtimes", "sprtimes", "trices", "crises", "Prime", "triments", "prims", "replims", "trensions", "trime", "ptrensions", "statizes", "repltimes", "replizes", " prices", "rimens", "prime", "crimens", "trimes", " prtimes", "trimens", "prices", "sprims", "primens", "prises", " prises", "sprices", "prizes", "priments", "replimens", "sprimes", " prensions", " prims", "trinces", "crims", "trtimes", "sprimens", "sprizes", "trises", "princes", "prensions", "statimes", " primens", " prime", "repliments", "sprises", "rimes", "crimes", "trims", "statims", "ptrimes", "prtimes", "rises", "stattimes", " princes", " priments", "ptrinces"], "c": ["lc", "d", "cn", "g", "ct", "rc", "r", "tc", "m", "h", "cur", "b", "t", "mc", "dc", "count", "v", "nc", "cp", "ch", "s", "cc", "co", "cu", "counter", "l", "cs", "k", "cm", "cr", "C"], "leng": ["alENG", "llENG", "dng", " lang", "lENG", "llen", "alenge", "deng", "dang", "elenge", "elENG", "mang", "alen", "mENG", "len", "elen", "lng", "eleng", " lENG", "meng", " lng", "aleng", "lang", "llenge", "mng", "dENG", "lleng", "lenge"], "ans": ["ANS", "ants", "ats", "ians", "actions", "eds", "outs", "ai", "aus", "us", "lines", "aned", "ns", "ann", "rans", "man", "anas", "ks", "offs", "ins", "ons", "ms", "amps", "angs", "ls", "ens", "ations", "ots", "anc", "sim", "mn", "uns", "na", "an", "anks", "oss", "aps", "s", "nan", "xs", "times", "ran", "ands", "aos", "cs", "arts", "os", "es", "stats", "ps", "sum"], "p": ["d", "mp", "pc", "g", "vp", "jp", "m", "fp", "par", "o", "tp", "pa", "ip", "pr", "t", "wp", "lp", "v", "P", "ap", "cp", "ping", "l", "pi", "bp", "u", "j", "k", "y", "pn", "pp", "ps"]}}
{"code": "# -*- coding: utf-8 -*-\\n\"\"\"\\nA - Discount Fare\\nhttps://atcoder.jp/contests/abc113/tasks/abc113_a\\n\\n\"\"\"\\nimport sys\\n\\n\\ndef solve(X, Y):\\n    return X + Y//2\\n\\n\\ndef main(args):\\n    X, Y = map(int, input().split())\\n    ans = solve(X, Y)\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main(sys.argv[1:])\\n", "target": "668", "substitutes": {}}
{"code": "inputted = input().split()\\nS = inputted[0] \\nT = inputted[1]\\n\\nanswer = T + S\\n\\nprint(answer)\\n", "target": "236", "substitutes": {"inputted": ["cilrated", "inputed", "latverted", "latted", "indexted", "configed", "cilured", "cilted", "configted", "indexting", "insertting", "lated", "inputrated", "acceptuted", "ciluted", "latuted", "indexverted", "acceptrated", "configting", "insertted", "indexed", "inputverted", "inserted", "Inputured", "cilting", "ciled", "inpututed", "Inputed", "accepted", "configured", "latting", "inputured", "Inputting", "inputting", "acceptted", "insertverted", "Inputted", "latrated"], "S": ["SN", "M", "N", "NS", "SH", "ES", "SS", "SB", "R", "I", "X", "L", "JS", "Si", "SI", "TS", "O", "V", "GS", "ss", "B", "J", "Q", "P", "SE", "A", "E", "s", "SP", "ST", "D", "SU", "Y", "SA", "U", "F", "Z", "C"], "T": ["WT", "M", "N", "TR", "TP", "R", "X", "I", "L", "TS", "PT", "VT", "TION", "TC", "TED", "H", "W", "O", "V", "TH", "TV", "t", "B", "TI", "Q", "P", "A", "TT", "D", "TA", "TM", "Y", "UT", "U", "GT", "TN", "C"], "answer": ["Answer", "wer", "option", "single", "example", "voice", "value", "array", "SAY", "status", "query", "input", "message", "audio", "output", "remember", "term", "result", "description", "word", "response", "record", "swers", "search", "support", "string", "archive", "question", "say", "reply", "q", "command", "entry", "echo", "text", "answered"]}}
{"code": "n,q = map(int,input().split())\\ns = input()\\ntable = [0]*n\\ntemp = s[0]\\nfor i in range(1,n):\\n  table[i] = table[i-1]\\n  if temp=='A' and s[i]=='C':\\n    table[i]+=1\\n  temp = s[i]\\nfor _ in range(q):\\n  l,r = map(int,input().split())\\n  print(table[r-1]-table[l-1])", "target": "155", "substitutes": {"n": ["a", "nr", "N", "x", "nt", "ln", "d", "p", "cn", "g", "dn", "length", "c", "sn", "m", "ns", "total", "o", "nl", "h", "f", "b", "num", "t", "nb", "no", "v", "an", "nc", "nu", "nn", "np", "number", "j", "k"], "q": ["x", "queue", "d", "p", "ue", "g", "qu", "iq", "qt", "quant", "w", "c", "z", "m", "qi", "query", "h", "f", "b", "quit", "nb", "Q", "e", "sq", "qq", "qa", "dq", "ll", "u", "k", "j", "y", "qs"], "s": ["a", "storage", "sb", "ys", "ats", "js", "p", "spec", "store", "w", "sys", "sql", "ts", "c", "south", "ns", "m", "rs", "input", "save", "ins", "less", "sl", "h", "ls", "f", "b", "sp", "t", "ss", "S", "si", "its", "tes", "states", "out", "strings", "e", "gs", "sq", "v", "sa", "terms", "sv", "csv", "sis", "simple", "cs", "j", "os", "es", "stats", "qs", "data", "ds", "single", "bs", "source"], "table": ["able", "body", "comment", "state", "ta", "database", "db", "p", "column", "system", "test", "td", "template", "journal", "map", "batch", "section", "buffer", "set", "total", "window", "page", "output", "tree", "display", "result", "term", "stable", "t", "tab", "Table", "count", "pretty", "time", "source", "TABLE", "out", "function", "e", "list", "cache", "console", "model", "tr", "qualified", "bl", "board", "size", "tmp", "index", "data", "binary", "dict", "array", "sequence", "trace", "sum"], "temp": ["T", "str", "nom", "p", "test", "typ", "td", "cell", "tc", "txt", "current", "ts", "w", "m", "condition", "unit", "em", "prefix", "wr", "tim", "type", "prime", "kw", "term", "level", "t", "dat", "unt", "count", "stem", "pt", " temperature", "key", "v", "Temp", "emp", "Temperature", "tr", " Temp", "tmp", "pi", "j", "index", "vt", "tem", "perature", "deg"], "i": ["mi", "xi", "x", "uri", "me", "cli", "gi", "ir", "p", " j", "di", "ai", "I", "iter", "m", "bi", "info", "qi", "ic", "ix", "ip", "ind", "f", "b", "t", "multi", "ri", "io", "si", " x", "iu", "sim", "li", "ii", "key", "ori", "ji", "int", "ti", "list", "oi", "exp", "im", "it", "ini", "zi", "ui", "\u0438", "pi", "id", "j", "index", "ij", "iri", "chain"], "_": ["x", " e", " the", " j", " k", "I", "ate", "ation", "place", " x", " m", " __", " each", " any", " it", " p", " sub"], "l": ["lc", "x", "ln", "d", "p", "ld", "lt", "g", "lb", "L", "c", "m", "o", "nl", "sl", "la", "ls", "f", "b", "t", "lo", "lp", "li", "v", "e", "lr", "ll", "le", "u", "j"], "r": ["mr", "sr", "rr", "ro", "d", "p", "g", "R", "rc", "re", "w", "c", "m", "rs", "rb", "h", "vr", "f", "b", "br", "right", "t", "ri", "fr", "rl", "dr", "v", "e", "rt", "lr", "ar", "u", "j", "er", "rn", "cr", "rd"]}}
{"code": "a,b,c,k=map(int,input().split())\\nif abs(b-a)>10**18:\\n    print(\"Unfair\")\\nelse:\\n    if k%2==0:\\n        print(a-b)\\n    else:\\n        print(b-a)", "target": "669", "substitutes": {"a": ["arg", "x", "ia", "ae", "ab", "ta", "aj", "p", "ach", "g", "i", "r", "ma", "eas", "ga", "o", "ea", "h", "aaa", "admin", "f", "abs", "t", "alpha", "art", "da", "an", "e", "ad", "A", "al", "at", "sa", "s", "ao", "app", "au", "oa", "aa", "l", "am", "ar", "ack", "ba", "ca", "ac"], "b": ["n", "sb", "bf", "ab", "d", "db", "g", "ib", "i", "r", "m", "z", "bi", "fb", "rb", "bo", "o", "h", "be", "ob", "f", "abs", "bc", "t", "br", "nb", "B", "bb", "v", "e", "s", "eb", "base", "cb", "l", "u", "y", "j", "bs", "ba", "ca"], "c": ["ce", "lc", "n", "x", "d", "p", "g", "r", "m", "z", "h", "f", "bc", "t", "e", "v", "cc", "abc", "cb", "l", "cs", "y", "cm", "cr", "ca", "C", "ac"], "k": ["ck", "km", "n", "x", "kr", "kh", "kl", "ijk", "p", "ak", "ke", "i", "m", "z", "dk", "ks", "kw", "ko", "kind", "tk", "kok", "t", "conf", "kj", "v", "ku", "q", "kk", "ka", "sk", "K", "ik", "j", "mk", "unk"]}}
{"code": "S=input()\\nprint(S[0]+S[1]+S[2])", "target": "775", "substitutes": {"S": ["M", "N", "NS", "T", "SF", "SH", "ES", "BS", "SS", "HS", "SL", "SB", "R", "I", "X", "L", "SER", "JS", "RS", "PS", "VS", "TS", "CS", "SI", "RAW", "SM", "OS", "H", "ASH", "V", "IS", "SAM", "SOURCE", "B", "FS", "Q", "G", "P", "SE", "A", "US", "s", "SU", "ST", "D", "SP", "DS", "Y", "SA", "F", "LS", "Z", "C"]}}
{"code": "s=input()\\nn=len(s)\\ndef f(s):\\n    m=len(s)\\n    for i in range(-(-m//2)):\\n        if s[i]!=s[-1-i]:\\n            return False\\n    return True\\n\\nif f(s) and f(s[:(n-1)//2]) and f(s[((n+3)//2)-1:]):\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "420", "substitutes": {"s": ["a", "sb", "sw", "self", "str", "ats", "js", "d", "p", "g", "fs", "r", "w", "sql", "c", "ts", "z", "ns", "south", "sam", "rs", "o", "ins", "less", "h", "ms", "ls", "f", "b", "sp", "abs", "t", "S", "ss", "its", "tes", "v", "e", "gs", "sq", "string", "ws", "gets", "ims", "sv", "xs", "q", "l", "sts", "cs", "se", "y", "os", "stats", "qs", "es", "ds", "ps", "bs"], "n": ["body", "N", "net", "nt", "gn", "d", "p", "en", "names", "norm", "ne", "g", "name", "dn", "r", "sn", "c", "ns", "note", "o", "nl", "h", "f", "b", "num", "t", "len", "nb", "mn", "na", "v", "nc", "nm", "nan", "nu", "nn", "l", "q", "ll", "np", "k", "j", "y"], "m": ["tm", "mi", "M", "mr", "dm", "d", "p", "mm", "mo", "g", "r", "c", "ma", "man", "bm", "o", "gm", "h", "ms", "f", "b", "t", "mc", "mn", "v", "e", "sm", "mx", "l", "mat", "j", "mt", "cm"], "i": ["mi", "xi", "x", "ni", "me", "ci", "gi", "p", "g", "di", "ai", "I", "iter", "bi", "yi", "ic", "ix", "ip", "ind", "f", "b", "si", "li", "ii", "ji", "v", "ori", "ti", "im", "ch", "it", "zi", "ini", "\u0438", "q", "l", "pi", "phi", "id", "j", "y", "k", "index", "ij", "iu"]}}
{"code": "chars = [chr(i) for i in range(ord('a'), ord('z') + 1)]\\n\\narr = []\\n\\nx = int(input())\\n\\n\\ndef get_len(n):\\n    length = 1\\n    t = 26\\n\\n    while True:\\n        if n <= t:\\n            return length\\n        t += 26 ** (length + 1)\\n        length += 1\\n\\n        if length > 1000000000000001:\\n            raise\\n\\n\\ndef get_ord(n):\\n    st = 1\\n    end = 26\\n    ind = 1\\n    while True:\\n        if st <= n <= end:\\n            return x - st\\n\\n        st = end + 1\\n        end += 26 ** (ind + 1)\\n        ind += 1\\n\\n\\nlength = get_len(x)\\norder = get_ord(x)\\n# print(length)\\n\\nfor i in range(length):\\n    s = order % 26\\n    order = order // 26\\n    arr.append(s)\\n\\n# print(arr)\\n\\nans = \"\"\\nfor ai in arr[::-1]:\\n    ans += chars[ai]\\nprint(ans)", "target": "639", "substitutes": {"chars": ["Chents", "Chars", "choents", "choacters", "choars", "chors", "chrs", "contents", "Chacters", "contrs", "contars", "Chrs", "contacters", "chents", "chacters"], "i": ["a", "\u00ed", "xi", "ci", "gi", "d", "p", "on", "di", "ai", "I", "r", "c", "m", "z", "bi", "o", "ix", "ip", "b", "si", "ii", "li", "ji", "v", "ei", "e", "ti", "oi", "zi", "q", "l", "pi", "j", "index", "y", "k", "ij"], "arr": ["ars", "alph", "load", "nt", "err", "str", "warn", " narr", "array", "r", "sys", "align", "inst", "save", "res", "ords", "are", "buf", "len", "ord", "pos", "row", "ays", "clear", "bl", "rows", "Array", "seq"], "x": ["wx", "xi", "ex", "xe", "p", "xes", "g", "xc", "ct", "X", "xa", "rx", "ext", "r", "w", "c", "ox", "z", "m", "xt", "input", "xml", "xxx", "ix", "tx", "ax", "f", "xd", "v", "e", "int", "xy", "xs", "xb", "dx", "nex", "l", "xx", "y", "index", "xp", "xf"], "n": ["N", "nt", "ln", "p", "on", "ne", "cn", "g", "sn", "r", "c", "z", "m", "ns", "o", "nl", "ner", "f", "num", "fn", "len", "nor", "mn", "na", "v", "an", "yn", "nc", "int", "nm", "e", "nu", "nw", "nn", "ll", "l", "np", "number", "ng", "j", "y", "k", "rn"], "length": ["th", "ty", "T", "load", "nt", "str", "ength", "d", "en", "match", "p", "test", "ct", "short", "value", "td", "long", "L", "ext", "position", "period", "pe", "z", "type", "shape", "Length", "tail", "h", "term", "capacity", "f", "duration", "time", "count", "len", "v", "all", "width", "obj", "tt", "rest", "tf", "enth", "size", "l", "number", "phi", "padding", "j", "y", "pp", "sequence", "text", "trace", "wind", "stop"], "t": ["top", "ty", "T", "nt", "token", "ta", "p", "d", "g", "ct", "r", "fort", "wt", "ts", "c", "m", "z", "type", "total", "te", "o", "tree", "tp", "term", "dt", "f", "time", "len", "pt", "ot", "out", "v", "at", "tt", "tr", "rt", "s", "l", "tmp", "ent", "j", "vt", "tz", "y", "start"], "st": ["ut", "th", "sw", "sta", "nt", "state", "str", "ld", "d", "stat", "ste", "td", "ust", "start", "z", "set", "ist", "inst", "step", "te", "const", "sp", "art", "pt", "ord", "std", "e", "int", "ost", "at", "tt", "est", "rest", "ST", "St", "stage", "s", "sts", "ent", "ast", "se", "index", "j", "nd", "stop"], "end": ["ut", "stop", "max", "nt", "offset", "ld", "d", "ender", "en", "p", "ending", "td", "ext", "z", "set", "rend", "pend", "len", "ord", "END", "ends", "ot", "out", "add", "v", "e", "int", "nd", "ad", "ost", "post", "ended", "est", "End", "hend", "rest", "ed", "l", "ent", "id", "ast", "se", "pat", "last", "after", "start"], "ind": ["loc", "nt", "state", "err", "ld", "d", "connect", "inc", "iter", "seed", "cod", "Ind", "pred", "inst", "ix", "bind", "ax", "pend", "stick", "cond", "ord", "pos", "att", "int", "ost", "IND", "ptr", "it", "inn", "roll", "ent", "id", "j", "index", "ond", "nd", "init", "wind", "start"], "order": ["over", "ser", "ter", "err", "name", "dir", "code", "iter", "Order", "position", "ordered", "type", "record", "orders", "ord", "address", "rank", "orient", "group", "desc", "der", "error", "id", "index", "sort", "er", "sequence"]}}
{"code": "L = list(map(int, input().split()))\\nif sum(L[:2]) == sum(L[2:]):\\n    print('Balanced' , flush=True)\\nelif sum(L[:2]) > sum(L[2:]):\\n    print('Left' , flush=True)\\nelse:\\n    print('Right' , flush=True)\\n\\n", "target": "132", "substitutes": {"L": ["LB", "dL", "M", "N", "List", "DL", "T", "NL", "BL", "PL", "LIST", "SL", "R", "I", "AL", "ALL", "TL", "LR", "W", "H", "LA", "LU", "GV", "O", "V", "LD", "OL", "S", "FL", "LT", "B", "J", "Li", "G", "P", "LI", "Long", "E", "IL", "LV", "LG", "VL", "D", "Lu", "GL", "Left", "CL", "l", "LL", "LE", "LM", "F", "LS", "Z", "LP", "C"]}}
{"code": "def sep():\\n    return map(int,input().strip().split(\" \"))\\ndef lis():\\n    return list(sep())\\nimport sys\\nsys.setrecursionlimit(10**6)\\n\\nn,k,c=sep()\\ns=input()\\nc1=[0]*(n+5)\\nc2=[0]*(n+5)\\nfor i in range(n):\\n    if s[i]==\"x\":\\n        c1[i]=c1[i-1]\\n    else:\\n        c1[i]=max(c1[i-1],c1[i-c-1]+1)\\nfor i in range(n-1,-1,-1):\\n    if s[i]==\"x\":\\n        c2[i]=c2[i+1]\\n    else:\\n        c2[i]=max(c2[i+1],c2[(i+c+1)%n]+1)\\nans=[]\\nif c2[1]==k-1 and s[0]==\"o\":\\n    ans.append(1)\\n\\nfor i in range(1,n-1):\\n    if s[i]==\"x\":\\n        continue\\n    if c1[i-1] + c2[i+1]==k-1:\\n        ans.append(i+1)\\n\\nif n!=1:\\n    if c1[n-2]==k-1 and s[0]==\"o\":\\n        ans.append(n)\\n\\nfor i in ans:\\n    print(i)\\n\\n\\n", "target": "647", "substitutes": {"n": ["a", "nr", "N", "net", "x", "nt", "ni", "ln", "p", "d", "on", "name", "ne", "cn", "g", "dn", "r", "sn", "w", "m", "z", "ns", "ic", "o", "h", "f", "b", "num", "fn", "t", "nia", "count", "len", "nb", "no", "mn", "na", "v", "an", "nc", "all", "nan", "none", "nu", "nn", "l", "number", "np", "u", "ng", "y", "j"], "k": ["ck", "km", "ki", "ek", "max", "kn", "kr", "x", "kh", "kl", "p", "g", "ke", "m", "z", "ks", "o", "kw", "ko", "kind", "tk", "t", "mc", "conf", "kj", "v", "ch", "co", "ku", "kat", "q", "kt", "u", "kk", "sk", "ka", "K", "ik", "j", "cm", "mk"], "c": ["a", "ce", "lc", "con", "ci", "gc", "p", "cd", "cn", "g", "ct", "rc", "r", "tc", "m", "col", "h", "f", "b", "bc", "count", "mc", "dc", "alpha", "t", "conf", "v", "e", "nc", "cin", "cp", "ch", "cc", "co", "cu", "l", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "s": ["ys", "ants", "ats", "ports", "mods", "js", "p", "ains", "names", "g", "ters", "fs", "us", "r", "lines", "ts", "ns", "ies", "rs", "ses", "tests", "ins", "ties", "ms", "ers", "ls", "t", "S", "ss", "args", "its", "conf", "comments", "strings", "v", "gs", "aces", "ws", "ares", "ists", "xs", "bes", "sts", "l", "sis", "cs", "ags", "os", "changes", "stats", "qs", "es", "ds", "ps", "ests", "bs"], "c1": ["cu001", "cu1", "ac51", "cachep", "ct5", "catOne", "ct6", "ct0", "ac91", "pc90", "cacheup", "cache2", "ctx", "ce6", " c51", "pcone", " cup", "pc1", " c90", "cache01", "ac10", "cache11", " ctx", "cone", "arc91", "cu2", "ce2", "cache8", " cA", "c91", "cache13", "c13", "cOne", "cuup", "pc3", " cone", "cacheOne", "cA", "co1", "cache1", "c51", "c3", "ac0", "cam01", "ct3", " c11", "c10", "c001", "ac3", "c6", "camp", "cacheone", "cat8", "cu11", "cam1", " c6", "cotx", "c8", "cutx", "cp", "arc51", " cp", "ac2", "arc10", "co11", "c11", "ce5", " c001", "co001", "cat1", " c01", "ac1", "c90", " c13", " cOne", " c3", "ct1", "c5", " c0", "ce1", "ct2", "cache90", " c10", "cat13", "c01", " c5", "cache3", "arc1", " c8", "cacheA", "camA", " c91", "cup", "c0"], "c2": ["vcgb", "rc2", "cu1", "C182", "ct5", "lc256", "ctto", "cttwo", "C1", "ct8", " c82", "C4", "cto", "xc2", "abc2", "c64", " c182", " c02", "lc2", "ntwo", "C52", "ctwo", "n4", "abc52", "cu2", "lctwo", "c52", " c102", "co256", "vc2", "xcto", "c82", " c64", "ct256", " ctwo", " c256", "abc1", " cto", "c4", "lc64", "C256", "rc4", "cgb", "ctgb", "c02", "co2", "xc8", "c182", "lc102", "c256", "cu5", "C2", " c52", "abctwo", "ct02", "c8", "cu82", "ct182", "n256", "n2", "Ctwo", "c102", "ct1", "lcgb", "c5", "rc256", "co102", "ct2", "ct64", " c5", "xc1", "rctwo", "ct82", "cotwo", " c8", "vc1", "C02", "vc256", "lc1"], "i": ["a", "ki", "x", "p", "us", "z", "ix", "ind", "multi", "ri", "v", "e", "ti", "oi", "it", "ini", "\u0438", "phi", "id", "ia", "ni", "me", "g", "ai", "this", "iter", "I", "m", "qi", "parent", "ic", "o", " bi", "si", "iu", "key", "ei", "im", "zi", "l", "ij", " ii", "ci", "gi", "ski", "ip", "io", "ii", "ui", "pi", "index", "ik", "Xi", "iii", "mi", "xi", "ios", "cli", "name", "di", "isi", "bi", "ami", "info", "yi", "t", "li", "ji", "int", "iy", "at", " ti", "ati", "j", "y", "iri", "hi"], "ans": ["arms", "ars", "ANS", "ants", "ats", "beans", "An", " means", "outs", "ows", "urs", "helps", "aus", "irms", "nets", "ros", "us", "aned", " Ans", "ates", "ns", "ann", "ums", "rans", "eas", "anas", "rs", "offs", "ins", "ons", "ms", "angs", "bys", "ls", "amps", "ents", "ens", "ations", "anc", "akens", "uns", "an", "anks", "gs", "anes", "works", "aps", "ays", "xs", "uploads", "nas", "ams", "roots", "yes", "arts", "os", "asms", "thens", "ds", "aints"]}}
{"code": "a,b,c = map(int,input().split())\\n\\nprint(int(0.5*a*b*c//max(a,b,c)))", "target": "637", "substitutes": {"a": ["aq", "x", "ia", "ae", "ac", "ab", "aff", "aj", "d", "ai", "i", "r", "ma", "ga", "ea", "la", "aaa", "act", "f", "da", "an", "e", "A", "al", "up", "ap", "at", "sa", "af", "aka", "ity", "au", "oa", "aa", "l", "am", "ar", "le", "ba"], "b": ["bu", "sb", "bf", "ab", "d", "db", "g", "ib", "i", "r", "m", "bi", "wb", "fb", "rb", "bo", "by", "be", "ob", "f", "br", "bc", "gb", "t", "nb", "B", "bb", "v", "erb", "eb", "bl", "cb", "l", "ub", "j", "bs", "ba", "bol"], "c": ["ec", "ce", "lc", "n", "con", "d", "unc", "cd", "g", "ct", "rc", "tc", "m", "fc", "h", "cur", "cv", "f", "bc", "t", "dc", "mc", "anc", "cum", "can", "v", "e", "cin", "cos", "cp", "cus", "cc", "com", "co", "cb", "cu", "l", "u", "cs", "cm", "cr", "cf", "C", "ac"]}}
{"code": "x=int(input())\\nprint(((x//500)*1000)+((x%500//5)*5))", "target": "599", "substitutes": {"x": ["a", "wx", "n", "xi", "ex", "rex", "xe", "p", "on", "xc", "X", "xa", "i", "rx", "w", "c", "ox", "z", "m", "xt", "hex", "ix", "h", "tx", "ax", "f", "b", "xd", "t", "exclusive", "xxxxxxxx", "v", "exp", "e", " xx", "fx", "xy", "s", "orig", "xs", "mx", "dx", "xx", "y", "px", "xp", "xf"]}}
{"code": "N,Y=map(int,input().split())\\nflag=False\\nfor i in range(0,N+1):\\n    for j in range(N-i+1):\\n        k=N-i-j\\n        if 10000*i+5000*j+1000*k==Y:\\n            print(i,j,k)\\n            flag=True\\n            break\\n    if flag:\\n        break\\nelse:\\n    print(-1,-1,-1)\\n", "target": "465", "substitutes": {"N": ["CNN", "n", "M", "NS", "T", "Ne", "NC", "GN", "NI", "Ns", "X", "I", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "W", "O", "V", "NO", "Z", "S", "NE", "B", "J", "ND", "Num", "P", "D", "NB", "MN", "Ni", "K", "F", "TN", "C"], "Y": ["M", "YD", "CH", "T", "KY", "X", "I", "Py", "TY", "YS", "MY", "YC", "Year", "H", "XY", "V", "TN", "S", "B", "J", "Q", "G", "P", "YN", "YY", "UK", "y", "K", "SY", "Z", "NY"], "flag": ["hold", "state", "ld", "gc", "run", "cloud", "ret", "save", "store", "kill", "long", "mail", "leaf", "set", "age", "wait", "condition", "status", "window", "FLAG", "land", "lag", "nl", "agged", "bug", "tail", "ground", "func", "flags", "log", "mask", "fail", "f", "level", "sp", "limit", "quit", "bool", "cond", "count", "Flag", "force", " Flag", "lv", "group", "print", "lock", "command", "neutral", "shell", "sync", "field"], "i": ["mi", "ki", "n", "xi", "x", "ia", "ie", "ci", "gi", "ir", "di", "ai", "I", "m", "bi", "ami", "yi", "info", "ic", "o", "ix", "ip", "ind", "ri", "si", "li", "ii", "ji", "v", "e", "int", "ti", "ani", "im", "it", "ini", "zi", "ui", "phi", "pi", "l", "u", "id", "j", "y", "k", "ik", "ij", "iu", "hi"]}}
{"code": "from sys import stdin\\nS = (stdin.readline().rstrip())\\nprint(S[:3])", "target": "775", "substitutes": {"S": ["M", "N", "NS", "T", "SH", "BS", "SS", "SL", "SB", "R", "SER", "I", "L", "RS", "PS", "Si", "SI", "CS", "TS", "SAN", "Screen", "SM", "H", "V", "B", "G", "P", "SE", "A", "s", "ST", "SP", "SU", "D", "DS", "SA", "U", "Z"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\\nfrom itertools import accumulate, permutations, combinations, product\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\n\\nH, W = MAP()\\na = [LIST() for _ in range(H)]\\n\\ncnt = 0\\nmove = []\\nfor i in range(H):\\n\tfor j in range(W):\\n\t\tif i == H-1 and j == W-1:\\n\t\t\tprint(cnt)\\n\t\t\tfor x in move:\\n\t\t\t\tprint(*x)\\n\t\t\texit()\\n\t\tif i%2 == 0:\\n\t\t\tif a[i][j]%2 == 1 and j == W-1:\\n\t\t\t\ta[i][j] -= 1\\n\t\t\t\ta[i+1][j] += 1\\n\t\t\t\tcnt += 1\\n\t\t\t\tmove.append((i+1, j+1, i+2, j+1))\\n\t\t\telif a[i][j]%2 == 1:\\n\t\t\t\ta[i][j] -= 1\\n\t\t\t\ta[i][j+1] += 1\\n\t\t\t\tcnt += 1\\n\t\t\t\tmove.append((i+1, j+1, i+1, j+2))\\n\t\telse:\\n\t\t\tif a[i][W-j-1]%2 == 1 and j == W-1:\\n\t\t\t\ta[i][W-j-1] -= 1\\n\t\t\t\ta[i+1][W-j-1] += 1\\n\t\t\t\tcnt += 1\\n\t\t\t\tmove.append((i+1, W-j, i+2, W-j))\\n\t\t\telif a[i][W-j-1]%2 == 1:\\n\t\t\t\ta[i][W-j-1] -= 1\\n\t\t\t\ta[i][W-j-2] += 1\\n\t\t\t\tcnt += 1\\n\t\t\t\tmove.append((i+1, W-j, i+1, W-j-1))\\n", "target": "605", "substitutes": {"n": ["nr", "N", "nt", "ln", "p", "g", "cn", "r", "sn", "c", "w", "z", "m", "ns", "o", "h", "b", "num", "t", "nb", "na", "v", "s", "nu", "nn", "l", "q", "np", "u", "ng", "k", "y"], "_": ["p", "get", "__", "let", "of", "t", "all", "un", "___", "line"], "INF": [" ING", " INInf", "inInf", "INN", "inG", "PINInf", "PINF", "PING", "inN", "PINN", "INInf", "inF", "ING", " INN"], "mod": ["MOD", "sign", " Mod", "mult", "Mod", "fun", "scale", "inv", "set", "rem", "floor", "round", "dec", "prime", "min", "step", "log", "mix", "grow", "fac", "add", " MOD", "exp", "orig", "tr", "ran", "temp", "deg"], "H": ["M", "N", "CH", "HD", "T", "SH", "His", "HL", "HS", "HE", "X", "I", "R", "L", "RH", "HO", "HI", "GH", "HTML", "NH", "HR", "h", "DH", "V", "TH", "HH", "B", "J", "Q", "G", "HF", "HA", "P", "A", "OH", "Host", "HK", "HC", "MH", "Y", "HTTP", " h", "HB", "High", "U", "K", "F", "HT", "Z", "He", "C"], "W": ["WT", "WC", "M", "N", "We", "WR", "GW", "MW", "WI", "Win", "WAR", "CW", "TW", "SH", "WP", "NW", "R", "I", "L", "RW", "w", "Wi", "WW", "WH", "VW", "BW", "HTML", "WA", "V", "Tw", "Width", "Wh", "J", "SW", "Q", "WB", "A", "Sw", "Wa", "WD", "WM", "Y", "FW", "WE", "EW", "DW", "F", "HT", "WS"], "a": ["history", "ia", "sta", "ae", "ac", "ab", "era", "p", "action", "ana", "g", "va", "xa", "ai", "w", "c", "ma", "m", "ata", "eas", "ga", "aux", "ea", "la", "aaa", "fa", "act", "isa", "b", "t", "alpha", "da", "apa", "pos", "na", "an", "att", "all", "A", "al", "another", "sa", "ao", "ha", "app", "au", "oa", "aa", "am", "ar", "changes", "data", "ya", "array", "area", "ba", "ca"], "cnt": ["Crc", "dcount", "cnd", "CNT", " crc", "mnt", "Cursor", "mto", "mre", "cNT", "cachent", "conust", "dcnt", "uncnt", "Cre", " cust", "mount", " ccrit", "acNT", "uncnd", "acnt", "ccrit", "occrit", "cust", "cre", "ocnt", "count", " cimport", " cNT", "mNT", "acursor", "Cimport", "connd", "cimport", " cto", "mimport", "crc", "dcNT", "ocNT", "cursor", "cachecrit", "cto", "acount", " count", "uncust", "Cnt", "Count", "dcursor", "connt", "cacheNT", "Cto", " cre", "mrc", " cnd"], "move": ["history", "next", "loc", "ge", "draw", "path", "p", "use", "frame", "order", "cycle", "take", "shift", "replace", "position", "adjust", "undo", "append", "m", "set", "batch", "diff", "down", "Move", "change", "save", "step", "log", "apply", "place", "remove", "delete", "transform", "activate", "begin", "pos", "add", "out", "update", "row", "jump", "group", "new", "do", "plot", "command", "line", "copy", "range", "late", "trace", "start"], "i": ["mi", "xi", "ia", "ie", "ci", "gi", "p", "di", "ib", "ai", "I", "aci", "iter", "this", "bi", "ami", "yi", "info", "ic", "o", "ix", "h", "ip", "iri", "ind", "ri", "io", "si", "li", "ii", "ji", "ei", "v", "int", "ti", "at", "im", "it", "ini", "zi", "ui", "\u0438", "phi", "pi", "ati", "id", "y", "index", "iat", "ij", "ik", "iu", "hi", "init"], "j": ["json", "p", "r", "bot", "z", "jj", "ju", "ix", "tree", "br", "ot", "kj", "v", "jas", "obj", "it", "q", "k", "to", "js", "on", "ne", "g", "test", "jp", "jc", "o", "py", "jl", "fr", "ion", "key", "xy", "s", "l", "dj", "ij", "ja", "str", "aj", "d", "oj", "col", "h", "off", "ch", "jump", "other", "jit", "uj", "di", "w", "bi", "f", "b", "rel", "t", "pt", "J", "bj", "li", "ji", "out", "adj", "at", "tr", "item", "y", "er"], "x": ["wx", "xi", "ex", "pair", "foo", "xe", "d", "p", "xes", "ux", "xc", "xa", "X", "rx", "c", "xt", "xxx", "ix", "tx", "ax", "t", "zx", "v", "e", "an", " xx", "ey", "fx", "xy", "xs", "mx", "xb", "\u00e7", "dx", "nex", "xx", "l", "yx", "y", "xf"]}}
{"code": "def main():\\n    N = int(input())\\n    P = []\\n    M = []\\n    for i in range(N):\\n        s = input()\\n        left = 0\\n        right = 0\\n        rightmax = 0\\n        for c in s:\\n            if c == \"(\":\\n                left += 1\\n            else:\\n                right += 1\\n            rightmax = max(rightmax, right - left)\\n        leftdiff = left-right\\n        if leftdiff >= 0:\\n            P.append((leftdiff, rightmax, 0, s))\\n            continue\\n            \\n        left = 0\\n        right = 0\\n        leftmax = 0\\n        for c in reversed(s):\\n            if c == \"(\":\\n                left += 1\\n            else:\\n                right += 1\\n            leftmax = max(leftmax, left - right)\\n        M.append((leftdiff, 0, leftmax, s))\\n\\n    R = []\\n    for e in sorted(P, key=lambda _e: _e[1]):\\n        R.append(e[3])\\n    for e in sorted(M, key=lambda _e: _e[2], reverse=True):\\n        R.append(e[3])\\n\\n    nleft = 0\\n    for c in \"\".join(R):\\n        if c == \"(\":\\n            nleft += 1\\n        else:\\n            nleft -= 1\\n        if nleft < 0:\\n            print(\"No\")\\n            return\\n        \\n    if nleft == 0:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\n\\n\\nmain()\\n", "target": "7", "substitutes": {"N": ["SN", "CNN", "n", "NS", "T", "NC", "GN", "NI", "Ns", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "V", "S", "J", "ND", "Num", "A", "D", "NB", "Y", "Ni", "K", "TN", "C"], "P": ["PU", "T", "p", "IP", "JP", "TP", "X", "L", "PS", "NP", "PT", "H", "PA", "CP", "LP", "FP", "BP", "Pers", "S", "XP", "DP", "J", "Q", "G", "PB", "AP", "A", "MP", "PP", "GP", "PF", "SP", "D", "Ps", "PO", "PD", "PR", "PM", "C"], "M": ["T", "HM", "CM", "MU", "X", "Men", "L", "Map", "NM", "MX", "RM", "m", "EM", "H", "W", "MM", "MC", "V", "MD", "C", "S", "MAN", "B", "Q", "G", "Multi", "MP", "MA", "E", "MS", "D", "TM", "AM", "Y", "MN", "MR", "MT", "MI", "LM", "F", "MF", "PM", "JM"], "i": [" ii", "a", "x", "ia", "ie", "ir", " j", "ai", "I", "iter", "r", "ic", "ix", "ind", "b", "si", "ion", "li", "ti", "it", "ini", "l", "id", "j", "k"], "s": ["a", "sym", "n", "sb", "sw", "str", "space", "single", "js", "p", "name", "spec", "g", "short", "span", "r", "sys", "ts", "m", "south", "z", "rs", "ins", "less", "second", "h", "ls", "b", "sp", "t", "S", "ss", "args", "gs", "sq", "string", "st", "sv", "xs", "sts", "l", "se", "os", "j", "es", "er", "ds", "ps"], "left": ["top", "n", "x", "lt", "p", "split", "r", "old", "low", "either", "main", "it", "range", "root", "last", "content", "open", "net", "max", "before", "to", "local", "cont", "L", "length", "m", "full", "min", "time", "ion", "wrong", "lock", "Left", "l", "field", "start", "loc", "d", "shift", "soft", "only", "nl", "lower", "lo", "inner", "off", "all", "rest", "back", "half", "path", "long", "w", "down", "current", "diff", "level", "t", "out", "both", "int", "list", "width", "row", "first", "le", "side", "after"], "right": ["over", "top", "open", "west", "reverse", "n", "max", "x", "before", "correct", "self", "ro", "load", "th", "field", "p", "child", "Right", "short", "shift", "re", "long", "raw", "r", "w", "down", "m", "forward", "full", "rem", "diff", "gt", "success", "cross", "outer", "ax", "t", "just", "record", "art", "inner", "off", "out", "wrong", "rights", "update", "row", "red", "third", "rest", "end", "rt", "first", "rew", "one", "then", "recent", "range", "upper", "root", "back", "after", "room", "start"], "rightmax": ["leftx", "rowax", "leftright", "rowMax", "rightMax", "rowright", "maxmin", " rightMax", "leftMax", "leftmin", " rightmin", "leftleft", "maxMax", "rightdiff", "roleft", "rightax", "maxx", "leftax", " rightdiff", " rightright", "rightleft", "rightx", "maxdiff", " rightax", "maxmax", "rightright", "maxright", "romax", "rightmin", "rowleft", "rowmax", "maxax", " rightx", "rowdiff", "roright"], "c": ["ec", "a", "ce", "lc", "n", "cation", "cmp", "ac", "ced", "ci", "gc", "p", "unc", "ach", "pc", "g", "qu", "xc", "ct", "rc", "arc", "r", "tc", "chain", "cod", "fc", "ic", "o", "pac", "f", "vc", "bc", "t", "icc", "mc", "anc", "uc", "sc", "v", "nc", "cin", "cp", "\u00e7", "abc", "co", "cc", "cu", "cb", "l", "cs", "oc", "cr", "cf", "C", "erc"], "leftdiff": ["leftdel", "rightdelete", "centerDiff", "leftdelete", "rightdel", "centerdiff", " leftchange", " leftdelete", "leftmin", "lmax", "rightdiff", "lockmax", "lockdel", "Leftchange", "LeftDiff", "lmin", " leftmin", "leftDiff", "rightchange", "Leftdiff", "centermax", "lockdiff", "rightDiff", "lDiff", " leftDiff", "centerdelete", "ldel", "lockDiff", "leftchange", "ldiff", "Leftmax", "rightmin"], "leftmax": ["lockctx", "leftright", "leftctx", "rightMax", "levelmean", "ltax", "ltmax", " leftax", "levelmax", "Leftright", "leftsize", "leftMax", "rightsize", "levelright", "rightdiff", "lockright", "lockmax", "lockMax", "rightmean", "ltright", " leftmean", " leftright", "leftmean", " leftsize", "Leftdiff", "rightax", "leftax", "rightctx", " leftctx", "Leftax", " leftMax", "leveldiff", "rightright", "Leftmax", "ltdiff", "Leftsize"], "R": ["Other", "T", "All", "RG", "JR", "Right", "Range", "L", "RS", "Res", "r", "RM", "NR", "Rs", "DR", "RA", "RE", "Br", "GR", "H", "HR", "V", "AR", "ER", "Returns", "S", "BR", "This", "Return", "RL", "CR", "You", "E", "Results", "RR", "RP", "D", "RO", "Y", "MR", "The", "SR", "RIP", "C"], "e": ["a", "ce", "x", "eur", "ae", "me", "ie", "ite", "xe", "edge", "en", "ase", "ue", "ne", "ate", "m", "pe", "el", "note", "te", "ye", "ea", "h", "be", "ese", "ze", "oe", "t", "fe", "eu", "ee", "ei", "de", "v", "event", "E", "eg", "ve", "ed", "see", "ree", "ffe", "et", "element", "eeee", "le", "se", "ele", "er", "es", "entry"], "nleft": [" nwrong", "nmin", "nonleft", "lright", "nright", " ndiff", "ndiff", "nonwrong", "lnl", "nno", "lnleft", "lnLeft", "nLeft", "NLeft", " nl", "Nlt", " nno", "nl", "Nlevel", " nright", "ncright", "Nleft", "Nl", " nmin", "lleft", "lnlt", "lnright", "ncmin", "nonright", " nLeft", "lLeft", "nlt", " nlt", "cnwrong", "cnleft", "lnno", "Nright", "nwrong", " nlevel", "ncleft", "llevel", "nlevel", "Nno", "cndiff", "cnright", "ncl", "nondiff", "Nmin"]}}
{"code": "N,A,B=input().split()\\nN=int(N)\\nA=int(A)\\nB=int(B)\\n\\ndef findSumOfDigits(n):\\n    k = 0\\n    sum = 0\\n    while n>0:\\n        k = n%10\\n        n = n//10\\n        sum = sum + k\\n    return sum\\n\\nsum=0\\nfor i in range(N+1):\\n    tmp = findSumOfDigits(i)\\n    if A<=tmp:\\n        if tmp<=B:\\n            sum = sum + i\\nprint(sum)\\n", "target": "704", "substitutes": {"N": ["SN", "CNN", "M", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "L", "NA", "NM", "NN", "NR", "CN", "NT", "NH", "H", "NF", "V", "NO", "NUM", "S", "J", "G", "ND", "Num", "P", "D", "NB", "K", "F", "AN", "TN", "FN", "C"], "A": ["a", "GA", "M", "Ax", "T", "API", "An", "IA", "AU", "AT", "mA", "ACC", "I", "L", "X", "AL", "AV", "AB", "RA", "H", "AA", "LA", "As", "O", "V", "AR", "C", "AS", "S", "Bar", "G", "This", "HA", "P", "CA", "At", "JA", "AF", "AM", "By", "SA", "K", "AC", "BA", "AN", "Array", "The", "AP"], "B": ["LB", "M", "BI", "CB", "T", "VB", "BS", "OB", "Bs", "SB", "R", "I", "L", "IB", "AB", "BER", "V", "BT", "b", "BE", "BC", "Bar", "S", "J", "BR", "GB", "G", "WB", "P", "BB", "USB", "Blue", "E", "TB", "Bern", "D", "EB", "ON", "Y", "BO", "By", "DB", "F", "BA", "BY", "C"], "n": ["a", "nr", "net", "x", "nt", "ln", "d", "p", "names", "norm", "ne", "cn", "name", "long", "sn", "r", "c", "w", "m", "z", "ns", "o", "h", "b", "num", "fn", "t", "count", "len", "nb", "no", "mn", "na", "v", "tn", "all", "nc", "nm", "nan", "it", "new", "nu", "size", "nn", "l", "ll", "np", "y", "j"], "k": ["ck", "km", "ek", "kn", "kr", "kh", "kl", "ijk", "p", "spec", "g", "ak", "ke", "c", "m", "ks", "kw", "ko", "kind", "num", "sch", "t", "fac", "tk", "key", "kick", "ku", "q", "wk", "kg", "kk", "ka", "kan", "K", "ik", "attr", "j", "mk", "unk"], "sum": ["us", "set", " num", "total", " cum", "Sum", "mean", "num", "count", "cum", "sim", "ot", "na", "v", "obj", "cos", "mem", "trace", "max", "um", "match", " Sum", "ul", "g", "test", "length", "weight", "scale", "m", "commit", "status", "prefix", "input", "output", "send", "mary", "fac", "share", "si", "hist", "hash", "s", "average", "div", "u", "function", " SUM", "next", "comment", "summary", "state", "d", "score", "report", " summ", "process", "tail", "result", "alpha", " summarize", "tu", "add", "cal", "all", "cache", "up", "com", "size", "dot", " tot", "index", "sort", "dict", "loss", "su", " summed", "acc", "zero", "diff", "success", "t", "vol", "sat", "out", "final", "j"], "i": ["a", "mi", "ki", "xi", "ci", "gi", "p", "di", "ai", "I", "iter", "m", "z", "bi", "yi", "ic", "ix", "o", "ip", "ind", "b", "t", "si", "li", "ii", "v", "int", "ti", "im", "it", "zi", "ini", "q", "l", "pi", "u", "id", "j", "index", "y", "ij", "iu", "init"], "tmp": ["a", "cmp", "x", "to", "perm", "nt", "T", "p", "mm", "mp", "test", "ct", "jp", "sup", "acc", "this", "tc", "txt", "m", "mut", "sam", "gm", "tp", "ip", "cur", "term", "cv", "elt", "sp", "t", "nb", "temp", "ot", "out", "v", "Temp", "emp", "MP", "obj", "cp", "tt", "it", "TT", "new", "np", "data", "meg", "mk"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\ns = input().rstrip()\\n\\nfrom collections import Counter\\n\\nc = Counter(s)\\n\\nif len(s) == 1:\\n    print(\"YES\")\\n    sys.exit()\\n\\nif len(c.keys()) == 1:\\n    print(\"NO\")\\n    sys.exit()\\n\\nvalues = list(c.values())\\nvalues.sort()\\n\\nif len(c.keys()) == 2:\\n    if values[0] == 1 and values[1] == 1:\\n        print(\"YES\")\\n    else:\\n        print(\"NO\")\\n    sys.exit()\\n\\nvalues[1] -= values[0]\\nvalues[2] -= values[0]\\n\\nif values[1] == 1 and values[2] == 1:\\n    print(\"YES\")\\nelif values[1] == 0 and values[2] == 1:\\n    print(\"YES\")\\nelif values[1] == 1 and values[2] == 0:\\n    print(\"YES\")\\nelif values[1] == 0 and values[2] == 0:\\n    print(\"YES\")\\nelse: \\n    print(\"NO\")\\nsys.exit()\\n\\n", "target": "265", "substitutes": {"input": ["cmp", "load", "str", "select", "util", "insert", "got", "submit", "get", "value", "raw", "password", "utils", "focus", "read", "format", "accept", "output", "quiet", "cmd", "config", "fn", "form", "initial", "feed", "pull", "Input", "list", "csv", "login", "print", " Input", "q", "command", "sample", "copy", "enter", "edit", "hit", "data", "paste", "sequence", "text", "source", "request"], "s": ["a", "n", "sb", "sw", "ats", "js", "p", "g", "i", "r", "txt", "lines", "ts", "sys", "w", "ns", "items", "rs", "reads", "ses", "ins", "ls", "f", "b", "t", "S", "ss", "parts", "its", "v", "strings", "sq", "gs", "string", "ashes", "sv", "xs", "sts", "cs", "y", "os", "qs", "ds", "ps"], "c": ["ec", "ctrl", "lc", "con", "cmp", "ac", "gc", "cont", "p", "cd", "g", "ct", "rc", "cy", "r", "tc", "m", "fc", "ctx", "ic", "h", "cur", "cv", "enc", "f", "b", "bc", "t", "mc", "dc", "count", "v", "nc", "cache", "cp", "cc", "co", "cu", "cb", "l", "counter", "cl", "coll", "cs", "cm", "cr", "ca", "C", "sc"], "values": ["settings", "modules", "images", "allows", "value", "lets", "boxes", "Values", "files", "ves", "days", "states", "v", "sites", "aps", "des", "ives", "words", "changes", "data", "options", "bs", "history", "ools", "we", " Values", "stores", "ins", "objects", "maps", "weights", "results", "places", "roots", "rows", "types", "sections", "stats", "pages", "olds", "users", "keys", "events", "measures", "seconds", "keep", "names", "lines", "items", "sels", "blocks", "checks", "reads", "val", "bytes", "docs", "units", "lists", "parts", "als", "terms", "times", "pres", "rules", "bes", "vs", "models", "fields", "es", "ps", "views", "ports", "styles", "actions", "where", "cells", "ters", "tags", "current", "versions", "vals", "details", "assets", "tests", "levels", "args", "frames", "these", "gs", "members", "groups", "pins", "errors", "parents", "forms", "points"]}}
{"code": "n=int(input())\\n\\na=[[int(i) for i in input().split()] for j in range(2)]\\n\\nsentou=[]\\nusiro=[]\\n\\nfor i in range(n):\\n    if i==0:\\n        sentou.append(a[0][0])\\n        usiro.append(a[1][-1])\\n    else:\\n        sentou.append(a[0][i]+sentou[-1])\\n        usiro.append(a[1][-i-1]+usiro[-1])\\n\\nusiro=usiro[::-1]\\nans=[]\\nfor i in range(n):\\n    ans.append(sentou[i]+usiro[i])\\nprint(max(ans))", "target": "476", "substitutes": {"n": ["nr", "N", "nt", "ln", "d", "p", "en", "ne", "cn", "g", "sn", "c", "m", "z", "ns", "nl", "num", "t", "nia", "nb", "no", "mn", "na", "v", "an", "nc", "s", "nan", "nu", "size", "nn", "l", "number", "np", "k"], "a": ["history", "ia", "sta", "ae", "ac", "ab", "era", "p", "test", "xa", "ai", "c", "ma", "ga", "aux", "ea", "la", "aaa", "act", "go", "b", "auto", "parts", "da", "apa", "att", "an", "all", "A", "al", "obj", "at", "sa", "ao", "app", "au", "oa", "aa", "am", "array", "area", "ba"], "i": ["mi", "ki", "\u00ed", "xi", "x", "ia", "iii", "ie", "gu", "ci", "gi", "d", "p", "di", "ai", "I", "c", "m", "z", "bi", "yi", "iti", "ic", "o", "ip", "h", "iri", "ind", "f", "b", "t", "ri", "io", "si", "ii", "li", "ji", "v", "e", "ei", "ti", "int", "im", "it", "ini", "zi", "ui", "\u0438", "l", "pi", "phi", "u", "id", "y", "k", "ij", "asi", "index", "iu", "hi", "fi", "ik"], "j": [" ii", "xi", "uj", "gu", "gi", "aj", "di", "jp", " si", "oj", "jj", "bi", "ix", "ind", "b", "si", "J", "ion", "li", "ji", "im", " vi", "zi", "q", "pi", "jit", "ij", "ik"], "sentou": [" sentous", "entou", "sentu", "Sentou", "sendiet", " sentour", "sentoin", "sedu", "cediet", "cedour", "sequou", " sentOU", "senten", "sequour", "sentir", "indOU", "sentous", "cedous", "senden", "Sentu", "sendari", "sequoun", "sendour", "sedout", " sentoin", "sentoul", "sentari", "indou", "sendous", "sendoun", "sendou", "sentiet", "Sentoul", "enten", " senten", "Sentout", "sentOU", "sedoul", "sentoun", "sequoul", " sentoun", "cedou", "sendoul", "indoin", "sequari", "sentout", "entoul", " sentari", "indour", " sentiet", "sentour", " sentir", "sequoin", "sequOU", "entir", " sentu", "sedou", " sentoul", "sendir", " sentout"], "usiro": ["usedira", "cusiro", " usrir", "ausirin", "ausir", "usensor", " usloe", "usesoes", "rusinho", "usrir", "uinho", "uira", "usesione", "cusione", "rusira", "rusloe", "ausrir", "usesira", "usir", "usesairo", "cusinho", " usir", "rusyon", "cusairo", "cusyon", "usloe", " usoes", "rusiro", " usione", "usairo", "usinho", "cusira", "usirin", "ausira", "ausairo", "uiro", "rusensor", "rusairo", "usyon", "usione", " usira", " usirin", "usesiro", "usediro", "cusirin", " usairo", "uirin", "uairo", "ausiro", "rusir", "usoes", "usiago", "usira", "usesiago", " usensor", "usedloe", "cusoes", "uiago", "rusrir", "cusiago", "rusirin", "usedensor", "uyon"], "ans": ["ars", "ANS", "ants", "ats", "books", "helps", "aus", "us", "ns", "ann", "ums", "rs", "rans", "anas", "ks", "ins", "ras", "vers", "ons", "ms", "amps", "angs", "ls", "ents", "ens", "uns", "an", "posts", "anks", "jas", "gs", "aps", "s", "xs", "ions", "nas", "ams", "aos", "ands", "ran", "yes", "ads", "arts", "es", "os", "asms", "said"]}}
{"code": "a, b, h = map(int, open(0).read().split())\\n\\ndef Trapezoids(a, b, h):\\n    return (a + b) * h // 2\\n\\nif __name__ == '__main__':\\n    print(Trapezoids(a, b, h))", "target": "319", "substitutes": {"a": ["aq", "x", "ia", "sta", "ae", "ac", "ab", "aff", "aj", "ai", "ak", "i", "r", "apt", "c", "ma", "\u00e1", "eas", "ga", "ea", "la", "aaa", "act", "ax", "f", "t", "alpha", "da", "na", "an", "e", "v", "ad", "A", "al", "ap", "at", "sa", "af", "aka", "ity", "au", "oa", "aa", "am", "ar", "j", "ba", "ca"], "b": ["bis", "n", "bu", "sb", "ab", "bar", "db", "g", "ib", "i", "r", "bg", "c", "reb", "bi", "wb", "pb", "fb", "rb", "by", "mb", "be", "ob", "bh", "br", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "ch", "erb", "eb", "bl", "base", "cb", "l", "bp", "ub", "y", "j", "bs", "ba"], "h": ["ht", "n", "th", "sh", "kh", "d", "p", "hz", "i", "r", "hs", "w", "c", "m", "z", "ih", "zh", "rh", "o", "H", "ah", "eh", "bh", "f", "uh", "t", "hl", "v", "e", "oh", "has", "s", "hash", "ch", "he", "hr", "hd", "q", "l", "ho", "hh", "j", "hi"]}}
{"code": "N, K = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\ns = sum(A)\\nflag = False\\ndef make_divisors(n):\\n    divisors = []\\n    for i in range(int(n**0.5), 0, -1):\\n        if n%i == 0:\\n            divisors.append(i)\\n            if i != n//i:\\n                divisors.append(n//i)\\n    return sorted(divisors, reverse=True)\\ndivs = make_divisors(s)\\nfor x in divs:\\n    if flag:\\n        break\\n    sortedA = sorted([a%x for a in A])\\n    sumA = sum(sortedA)\\n    index_len = len(sortedA)\\n    sump = 0\\n    for i, a in enumerate(sortedA):\\n        sump += a\\n        summ = x*(index_len - (i+1)) - (sumA - sump)\\n        if sump == summ and sump <= K:\\n            print(x)\\n            flag = True\\n            break\\n\\n", "target": "764", "substitutes": {"N": ["M", "NS", "T", "Ns", "X", "I", "R", "L", "NA", "NN", "NR", "H", "V", "S", "B", "J", "Q", "G", "P", "E", "D", "Y", "Ni", "F", "Z", "C"], "K": ["M", "T", "KN", "KR", "X", "R", "KK", "H", "W", "FK", "V", "KS", "PK", "KC", "NK", "S", "B", "J", "SK", "Q", "G", "P", "Ka", "E", "D", "Y", "UK", "k", "F", "KI", "Z", "KE", "KA", "C"], "A": ["GA", "M", "Ax", "T", "An", "IA", "Alpha", "Abs", "AT", "X", "I", "L", "AB", "Args", "H", "AA", "As", "V", "C", "AS", "S", "B", "To", "G", "This", "P", "Index", "CA", "At", "E", "D", "AM", "Y", "By", "_", "SA", "U", "AC", "The", "Array", "AP", "Data"], "s": ["sb", "ats", "p", "g", "w", "r", "c", "ts", "m", "z", "ns", "ies", "rs", "o", "h", "ls", "b", "t", "S", "ss", "an", "v", "gs", "e", "sa", "xs", "l", "j", "y", "es", "stats", "os"], "flag": ["fd", "hold", "label", "load", "state", "online", "goal", "offset", "run", "cloud", "code", "store", "weight", "leaf", "set", "wait", "status", "only", "window", "land", "lag", "warning", "bug", "enabled", "ground", "flags", "tag", "cmd", "limit", "level", "bool", "count", "close", "len", "cond", "Flag", "force", "switch", "free", "debug", "group", "stage", "lock", "command", "line", "neutral", "member", "sync", "field"], "n": ["net", "nt", "gn", "ln", "d", "p", "en", "on", "ne", "g", "cn", "ai", "r", "sn", "c", "m", "z", "ns", "o", "h", "f", "b", "num", "fn", "t", "len", "nb", "no", "mn", "na", "v", "e", "an", "nm", "nan", "nu", "size", "nn", "l", "q", "np", "u", "j", "y", "k"], "divisors": ["divisORS", "divisctors", " divesORS", "divilores", "divsores", " divisers", "divisor", "divesors", " divistor", "divesORS", " divisions", "divesions", " divistors", "divensORS", "divxores", "divilors", " divsions", "divensions", "divilORS", " divesctors", "divensores", " divilores", " divilORS", " divisctors", " divesores", "divusors", "divsORS", " divisores", "divxORS", "divisions", "divistores", " divsORS", "divusores", "divisores", "divesctors", "divsions", "divusers", " divisor", " divesors", "divilctors", "divensor", "divensors", "divistctors", "divxors", " divilors", "divistors", "divistORS", " divisORS", "divisers", " divisters", "divusor", "divxctors", "divistor", " divilctors", "divisters", "divesores", " divsors", " divsores", "divsctors", "divsors", "divensers", " divistores"], "i": ["mi", "ki", "xi", "ter", "ni", "me", "ci", "gi", "ir", "d", "p", "di", "ai", "I", "m", "bi", "yi", "info", "ic", "o", "ix", "ip", "h", "ind", "f", "b", "num", "t", "multi", "io", "si", "li", "ii", "ji", "v", "ei", "int", "ti", "oi", "e", "im", "it", "zi", "ini", "ui", "q", "phi", "pi", "l", "u", "id", "k", "y", "j", "index", "ik", "ij", "iu", "hi"], "divs": ["DivS", "splS", "DIVs", "splis", "divis", "Divis", "divors", " divens", "Divens", "divS", " divids", "DIVS", "divens", "DIVids", "splens", "spls", "divids", "Divors", "Divids", " divS", " divis", "DIVors", " divors", "Divs"], "x": ["wx", "xi", "ex", "ci", "xe", "d", "p", "xes", "name", "ach", "ux", "xc", "xa", "X", "rx", "w", "c", "ox", "z", "m", "xt", "xxx", "step", "ix", "o", "tx", "ax", "f", "xd", "b", "t", "key", "check", "v", "an", "e", "exp", "xy", "xs", "mx", "xb", "co", "dx", "au", "xx", "l", "u", "index", "y", "xp", "xf"], "sortedA": ["SorterA", "SortedB", " sortingS", "savedB", "sorterS", "sortA", "sortB", "savedG", "sortingG", "sortD", "srotA", "SorterB", " sortingX", "sortingA", "SorterD", "sortingAs", "sorterAs", "gsortedD", "srotX", "savedS", " sortingA", " sortingG", "sortedX", "gsortingD", "SortedA", "sortedB", "sortsD", "gsortingAs", "sortingB", "srotS", " sortedG", "savedA", "sortedD", "sortingX", "sortedG", "SortedS", "sorterD", "sortsAs", "sortedAs", "gsortedA", "sorterB", "sortingD", "sortingS", " sortedS", "savedX", "SorterS", "sortS", "sortsA", "gsortedAs", "srotG", "SortedD", "sortedS", "gsortingA", "sorterA", " sortedX"], "a": ["ia", "Ax", "ex", "ae", "ac", "ta", "p", "action", "ana", "name", "code", "xa", "ai", "w", "c", "ma", "z", "m", "ox", "ga", "o", "aux", "ea", "pa", "la", "aaa", "act", "ax", "f", "b", "t", "alpha", "na", "an", "e", "v", "at", "sa", "ao", "au", "oa", "aa", "am", "ar", "aw", "j", "y", "area", "ba", "ca"], "sumA": ["SumAA", " sumB", " sumAll", "SumAll", " sumAA", "sumAll", "umAA", "umB", "sumAA", "umA", "sumG", "SumA", "sumB", "umAll", "umG", "SumG", "SumB", " sumG"], "index_len": ["index_Len", " index_en", "index__Len", "index__len", "index_den", "index_lim", "index_en", "index_bl", "index__bl", " index_lim", "index__en", " index_bl", " index_Len", " index_den"], "sump": ["gump", "unsumps", "tsdump", "Sumped", "Sump", " sum", "Sdump", "Samp", "gumper", "psumm", " sumps", " sdump", " samp", "sumps", "unsump", "sumped", "gumm", "gamp", "sumper", "Sum", "gum", "Sumps", "Sumper", "sdump", "psum", "unsumm", "tsump", "tsumper", "unsumper", " sumped", "tsumm", "samp", "Summ", "psumps", "gumped", "psump", " sumper", "sum"], "summ": ["som", "Sump", " sum", "rsamm", "dumm", "dom", "damm", "Samm", "Sum", "samm", "dump", " som", "rsumm", "Som", "Summ", "rsum", " samm", "rsump", "sum"]}}
{"code": "n,m = list(map(int, input().split()))\\nL = [list(map(int, input().split())) for _ in range(m)]\\n\\nfrom collections import defaultdict\\nfrom collections import deque\\nd=defaultdict(list)\\nfor l in L:\\n    d[l[0]-1].append(l[1]-1)\\n    d[l[1]-1].append(l[0]-1)\\n\\n#print(d)\\n\\n# \u8fba\u3092\u5207\u65ad\u3057\u305f\u72b6\u614b\u3067\u5e45\u512a\u5148\u63a2\u7d22\u3092\u3057\u3066\u3059\u3079\u3066\u306e\u9802\u70b9\u306b\u884c\u3051\u308b\u304b\\ndef check_path(hen):\\n        \\n    visit=[False]*n\\n    q=deque([0])\\n    \\n#    print('L=',L)\\n#    print('hen=',hen)\\n    \\n    while q:\\n        node = q.popleft()\\n#        print('current->', node)\\n        visit[node]=True\\n        Nexts = d[node]\\n        for nxt in Nexts:\\n            if visit[nxt]:\\n#                print(nxt, ' is already visited.')\\n                continue\\n            \\n            if node+1 not in L[hen] or nxt+1 not in L[hen]:\\n#                print('next->', nxt)\\n                q.append(nxt)\\n    \\n#    print('visit=', visit)\\n    return all(visit)\\n    \\ncnt=0\\nfor i in range(m):\\n    if not check_path(i):\\n        cnt+=1\\n\\nprint(cnt)", "target": "634", "substitutes": {"n": ["N", "x", "p", "g", "i", "r", "w", "c", "z", "ns", "o", "nl", "h", "b", "num", "fn", "t", "nb", "mn", "na", "v", "s", "q", "j", "k", "y"], "m": ["a", "mi", "M", "mr", "N", "dm", "p", "mm", "g", "i", "r", "c", "man", "bm", " M", "o", "gm", "h", "ms", "f", "b", "num", "t", "mc", "mn", "v", "s", "q", "j", "y", "cm"], "L": ["dL", "M", "N", "NL", "DL", "T", "BL", "SL", "R", "I", "X", "TL", "H", "LA", "O", "V", "S", "LT", "B", "Q", "ML", "G", "P", "LI", "list", "RL", "E", "D", "Y", "CL", "LL", "LE", "U", "K", "LM", "LS", "Z", "EL"], "_": ["x", " e", " y", " j", " k", "z", "ix", " g", "val", "len", " x", "key", " c", " __", "___", " p", "j", " un", " z"], "d": ["fd", "ld", "p", "db", "g", "di", "td", "dh", "w", "r", "c", "bd", "z", "dl", "od", "o", "h", "dt", "done", "df", "b", "t", "dat", "da", "pd", "out", "de", "ad", "s", "end", "new", "D", "do", "dd", "sd", "did", "j", "md", "dict", "ds", "nd"], "l": ["lc", "x", "kl", "tl", "ld", "ln", "lt", "loop", "left", "lb", "i", "long", "z", "dl", "el", "lit", "o", "nl", "lag", "sl", "la", "lay", "ls", "jl", "hl", "bool", "lis", "rl", "lo", "url", "li", "fl", "lp", "list", "al", "lv", "sol", "ol", "q", "ll", "pl", "le", "line", "j", "shell", "layer"]}}
{"code": "N = int(input())\\nG = [[] for _ in range(N)]\\nque_f = [0]\\nque_s = [N-1]\\ndis_f = [-1]*N\\ndis_s = [-1]*N\\nfor i in range(N-1):\\n  a, b = map(int,input().split())\\n  a -= 1\\n  b -= 1\\n  G[a].append(b)\\n  G[b].append(a)\\n\\nvisited_f = [False]*N\\ndis_f[0] = 0\\nwhile que_f:\\n  pos = que_f.pop(0)\\n  for next_pos in G[pos]:\\n    if visited_f[next_pos] == True:\\n      continue\\n    que_f.append(next_pos)\\n    visited_f[pos] = True\\n    dis_f[next_pos] = dis_f[pos] + 1\\n\\nvisited_s = [False]*N\\ndis_s[N-1] = 0\\nwhile que_s:\\n  pos = que_s.pop(0)\\n  for next_pos in G[pos]:\\n    if visited_s[next_pos] == True:\\n      continue\\n    que_s.append(next_pos)\\n    visited_s[pos] = True\\n    dis_s[next_pos] = dis_s[pos] + 1\\n    \\nf = 0\\ns = 0\\nfor i in range(N):\\n  if dis_f[i] <= dis_s[i]:\\n    f += 1\\n  else:\\n    s += 1\\n\\nif f >s:\\n  print('Fennec')\\nelse:\\n  print('Snuke')", "target": "435", "substitutes": {"N": ["SN", "CNN", "Name", "M", "n", "NS", "T", "New", "NL", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "W", "Node", "O", "V", "SIZE", "No", "NOTE", "NO", "Z", "NUM", "S", "NE", "B", "J", "Q", "ND", "P", "Num", "A", "E", "D", "NB", "MN", "Len", "Ni", "K", "F", "AN", "UN", "TON", "TN", "FN", "NG", "C"], "G": ["Graph", "GA", "M", "T", "Gu", "GO", "GN", "RG", "GM", "g", "CG", "R", "I", "L", "Gr", "Gs", "AG", "GH", "Group", "TG", "GE", "W", "GR", "H", "GV", "GG", "GS", "V", "S", "GF", "Gate", "B", "J", "Q", "GB", "Game", "P", "A", "E", "GP", "PG", "GI", "D", "Gen", "FG", "Y", "GT", "F", "Ge", "GU", "Gre", "C"], "_": ["n", "x", " n", "ate", "ix", "val", " int", "pt", " x", "an", "int", "all"], "que_f": ["queablet", "queablep", "que_fm", "quellc", "aque_f", "cu67fb", "pe_t", "queableu", "que67c", "que_c", "que\u064edf", "cu67tf", "que_u", "quellflat", "que67flat", "que67f", "quellfm", "que\u064ec", "quellf", "que__tf", "que__s", "cu_fb", "que___f", "vre_f", "que_fb", "que___s", "aque_df", "cu_f", "que_tf", "que_p", "que67tf", "que__fb", "cu_tf", "que___fb", "que67s", "que\u064ef", "aque_c", "pe_f", "que__f", "que_t", "que\u064efb", "que_df", "aque_fb", "queablef", "cu_s", "que_flat", "vre_flat", "que___tf", "pe_u", "que67fm", "vre_c", "vre_fm", "pe_p", "cu67f", "que67fb", "cu67s"], "que_s": ["que_ds", "vel_str", "quells", "qu_f", "quellsi", "que67z", "ha_ds", "drive_sv", "que27s", "que_sl", "que_str", "que27south", "que67f", "que27sv", "ha_sl", "que67t", "que_south", "que_si", "qu_s", "vel_s", "que67s", "qu_t", "que_ns", "quellt", "que_t", "ha_s", "qu_z", "drive_s", "drive_south", "que27ns", "drive_ns", "quellstr", "vel_t", "vel_si", "que_sv", "que_z"], "dis_f": ["dis64u", "dis64log", "dis___log", "display_fn", "dislyfn", "display___f", "display___F", "dis64fi", "dis67fm", "dis___fi", "disJh", "display_F", "dist_u", "disptl", "display_s", "disc64f", "dis_h", "dislys", "dis67h", "dis_log", "display_f", "dis___u", "dis_fn", "disc_f", "display___fc", "dist___log", "disc_fg", "dis_cf", "mis_h", "dis_fi", "dist___u", "dist_log", "dis___fc", "dis64cf", "disptfg", "display_fc", "dis_fs", "mis67fd", "dis_fd", "mis67h", "dis_fg", "disJfm", "dislyf", "dist_fi", "disc64l", "disJfd", "dist___f", "dis64fg", "dist_f", "dis___F", "disptf", "dislyfs", "mis67f", "mis67fm", "disc_l", "dis64f", "dis_F", "disc64fg", "disc64cf", "dis67f", "dis___f", "dis_fc", "mis_fm", "dis64l", "disc_cf", "disptcf", "display_fs", "dis_fm", "dis_l", "dist___fi", "disJf", "mis_fd", "dis67fd", "dis_u", "mis_f"], "dis_s": ["dis_sub", "dis_ls", "disChsub", " dis_se", "disaphs", "shell_in", "chain_e", "Dis_sl", "shellointt", "shell_sys", "dis67out", "shellointin", "ris_out", "disChs", "dis_si", "disaphsub", "disptout", "dis___i", "dispts", "disChss", "disoints", "shell_t", "dis_i", "dis___se", "ris_s", "disaphsl", "shell_s", "chain_ls", "disChsl", "dis_t", "dis_out", "Dis_s", "disptsl", "dis_se", "ris_sl", "chain_s", "dis___si", "disptf", "Dis_ss", "disointt", "dis___s", "disaphss", "dis67sl", "dis_in", "dis67f", " dis_i", "disointin", "shelloints", "dis67s", "dis_e", "chain_f", "dis_sys", "disointsys", " dis_si", "dis67t", "dis67in", "dis67sys", "ris_f", "Dis_sub", "dis_sl", "shellointsys", "dis_ss"], "i": ["mi", "ki", "n", "xi", "x", "ni", "gu", "ci", "gi", "p", "di", "iq", "ai", "I", "iter", "r", "c", "m", "bi", "qi", "ic", "o", "ix", "ip", "ind", "iu", "li", "ii", "ji", "v", "e", "ori", "ti", "int", "im", "it", "zi", "ini", "ui", "q", "l", "pi", "u", "id", "k", "y", "j", "ij", "index", "iri"], "a": ["n", "x", "ia", "ae", "ab", "aj", "p", "ach", "g", "va", "ai", "ak", "r", "c", "ma", "ga", "o", "ea", "la", "aaa", "pa", "ax", "t", "alpha", "an", "e", "A", "al", "at", "sa", "af", "ao", "oa", "au", "aa", "l", "am", "ar", "u", "ba", "ca", "ac"], "b": ["bis", "n", "sb", "ab", "d", "p", "db", "bar", "g", "r", "w", "c", "m", "z", "bi", "fb", "rb", "o", "h", "be", "ob", "br", "bc", "t", "B", "bb", "v", "e", "erb", "eb", "cb", "aa", "l", "u", "j", "y", "bs", "ba"], "visited_f": ["visited_uf", "visined_file", "visited___fc", "visiedlyf", "visied_s", "visitedlys", "visitedfulf", "visined67l", "visitedpyframe", "visited67file", "visied_uf", "visited_fr", "visitedfulfile", "visitedfull", "visited67l", "visited64frame", "visited67fc", "visitorpyf", "visited___file", "visited_frame", "visined_fc", "visiedlyuf", "visitor_f", "visited___f", "visited64f", "visitorpyfr", "visitorpyframe", "visined67f", "visited_l", "visited64fr", "visined67file", "visined_f", "visitedlyf", "visitedlyuf", "visitor_fr", "visitedpyfr", "visined_l", "visited_fc", "visied_f", "visitedfulfc", "visited67f", "visitor_frame", "visiedlys", "visited_file", "visined67fc", "visitedpyf", "visited___l"], "pos": ["loc", "next", "body", "rot", "mit", "to", "perm", "state", "nt", "path", "id", "port", "point", "p", "init", "spec", "po", "POS", "position", "prefix", "slot", "Pos", "col", "val", "pr", "ind", "go", "num", "neg", "stick", "cond", "part", "pt", "no", "prot", "win", "off", "conf", "pid", "resp", "exp", "obj", "cos", "at", "ping", "sol", "pres", "lang", "pl", "yes", "pi", "pat", "pot", "mat", "pose", "index", "os", "doc", "tz", "pro", "ps", "prop", "start"], "next_pos": ["next_po", "nextopcomp", " next_post", "response_port", "nextptcomp", "next64pos", "response_name", "nextobjpose", "firstptPos", "next00pos", "next_pose", "prev_pos", "next_tag", "nextobjtag", "second_pose", "response00comp", "nextopname", " next2post", "second_po", "next_port", "firstptpos", "response_pos", "firstptos", "first_pt", "next64pose", " next_mot", "next_proc", "next3pos", "next_den", "response_comp", "first_prop", "nextptname", "next2loc", "next_prop", "next_post", "next_pt", "next3loc", "nextptos", "next_name", "new_proc", "next00port", "nextptPos", "nextptport", "next64neg", "firstptprop", "next64proc", "first_Pos", "next2post", " next2loc", "prev_mot", "nextobjpos", "prev_tag", "next_comp", "second_pos", "next_os", " next2pos", "next_index", "next_mot", "first_os", "next3mot", "response00pos", "nextrpos", "nextobjneg", " next_loc", "prev_po", "first_pos", "next3post", "response00name", "prev_neg", "nextrPos", "next_neg", "prev_pose", "next_Pos", "nextptpos", "first_index", "next00name", "nextoppos", "new_den", "next2mot", "nextopport", "new_pos", "next_loc", "next2pos", "nextptprop", " next2mot", "next64tag", "next64den", "nextros", "nextrprop", "new_pose", "next00comp", "response00port", "second_Pos"], "visited_s": ["visited___s", "visited___si", "visited____js", "visitinggrses", "visited______js", "visited____si", "visited______os", "visited_js", "visitedgrsd", "visited____ses", "visible_js", "visited67p", "visited67js", "visiting_ses", "visited____ps", "visitted_s", "visitinggrs", "visited_si", "visitedgrs", "visitted_si", "visiting_s", "visible_s", "visited_ps", "visitinggrsd", "visitted_ss", "visited_ses", "visited_p", "visible_p", "visited____ss", "visited____p", "visited______s", "visited67os", "visited_os", "visited_ss", "visited______p", "visitedgros", "visited67s", "visited___ps", "visiting_os", "visitinggros", "visiting_sd", "visible67os", "visible67p", "visible67js", "visitted_ps", "visitedgrses", "visible67s", "visited____os", "visited_sd", "visible_os", "visited____s", "visited___ss", "visited____sd"], "f": ["fd", "n", "x", "d", "p", "alf", "g", "fs", "w", "r", "fort", "c", "m", "z", "fc", "fp", "fb", "o", "h", "fa", "fr", "df", "t", "fac", "fe", "fo", "off", "ff", "v", "e", "all", "rf", "af", "conv", "tf", "uf", "l", " F", "u", "j", "y", "fi", "F", "cf"], "s": ["bis", "n", "sb", "ats", "d", "p", "g", "short", "fs", "w", "c", "ts", "z", "ns", "rs", "o", "ins", "h", "ms", "ls", "ss", "S", "si", "v", "e", "gs", "sq", "ws", "xs", "sv", "sol", "sd", "cs", "se", "os", "y", "stats", "ds", "ps"]}}
{"code": "n = int(input())\\nary = list(map(int, input().split()))\\n#print(n,ary)\\n\\nary_2 = [ary[0]]\\nfor i in range(1, n):\\n    ary_2.append(ary[i] + ary_2[i-1])\\nary_2 = [0] + ary_2\\n#print(ary_2)\\n\\nfrom collections import Counter\\nc = Counter(ary_2)\\nv = (c.values())\\n#print(v)\\n\\nfrom math import factorial\\ndef combinations_count(n, r):\\n    return factorial(n) // (factorial(n - r) * factorial(r))\\n\\nans = 0\\nfor j in v:\\n    if j >1:\\n        ans += combinations_count(j,2)\\n\\nprint(ans)", "target": "283", "substitutes": {"n": ["nr", "N", "d", "p", "name", "names", "i", "r", "sn", "c", "m", "z", "ns", "o", "f", "num", "t", "nb", "na", "v", "nm", "s", "size", "q", "l", "nn", "np", "k", "j"], "ary": [" seq", " id", " e", " cl", " np", " sl", "r", " ss", " cs", " rest", " fs", " f", " iv", " vec", " L", " pa", " c", " mp", " w", "s", " r", " arr", " p", " v", " ls", " parts", " ar", " res", " s"]}}
{"code": "S,W=map(int,input().split(\" \"))\\nif S>W:\\n  print(\"safe\")\\nelse:\\n  print(\"unsafe\")", "target": "585", "substitutes": {"S": ["M", "N", "T", "SF", "SH", "BS", "SS", "SB", "R", "SER", "I", "ESS", "RS", "PS", "Si", "VS", "SI", "CS", "TS", "H", "GS", "V", "FS", "J", "B", "G", "P", "SE", "s", "Is", "SU", "D", "DS", "SA", "F", "Z", "C"], "W": ["WT", "WC", "M", "N", "T", "WR", "MW", "WI", "WAR", "OW", "NW", "WP", "R", "L", "RW", "w", "VS", "WW", "WH", "VW", "BW", "H", "V", "WA", "Width", "SW", "Wh", "G", "P", "WM", "DW", "EW", "F", "WS"]}}
{"code": "N = int(input())\\nfrom collections import defaultdict\\narr = defaultdict(int)\\nfor i in range(2,N+1):\\n    temp = i\\n    f = True\\n    for j in range(2, int(-(-i**0.5//1))+1):\\n        if temp%j==0:\\n            cnt=0\\n            while temp%j==0:\\n                cnt+=1\\n                temp //= j\\n            f = False\\n            arr[j] += cnt\\n    if temp!=1:\\n        f = False\\n        arr[temp] += 1\\n    if f:\\n        arr[i] += 1\\nans = 1\\nfor i in arr.values():\\n    ans *= i+1\\n    ans %= 10**9 + 7\\nprint(ans)", "target": "658", "substitutes": {"N": ["M", "n", "NS", "T", "GN", "NI", "Ns", "R", "I", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "O", "V", "TN", "NUM", "B", "J", "Q", "ND", "Num", "P", "Sn", "D", "NB", "MN", "Len", "Ni", "K", "F", "Z", "C"], "arr": ["arg", "rot", "alph", "warn", "nt", "err", "str", "ab", "bar", " err", "db", "Ar", "ang", " narr", "array", "r", "map", "ref", "expr", "img", "ev", "par", "arp", "ict", "inst", "res", "ARR", "alg", "pr", "ind", "enc", "br", "dat", "vol", "rel", "agg", "args", "conf", "dr", "out", "att", "grid", "list", "ok", "obj", "adj", "arb", "gr", "compl", "app", "print", "bl", "coll", "addr", "pl", "tmp", "ar", "mat", "reg", "data", "attr", "dict", "ag", "Array"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "ie", "ci", "gi", "ir", "d", "p", "cli", "di", "ai", "I", "iter", "pre", "c", "m", "bi", "yi", "qi", "ic", "o", "ix", "ip", "ind", "t", "multi", "io", "si", "li", "ii", "ji", "v", "ei", "int", "ti", "oi", "inter", "im", "it", "ini", "zi", "phi", "pi", "l", "ati", "id", "y", "k", "ij", "ik", "index", "iu", "hi", "init"], "temp": ["tm", "n", "ter", "warm", "mod", "ta", "d", "p", "nom", "vi", "mp", "test", "jp", "typ", "td", "cold", "tc", "txt", "c", "ts", "m", "current", "pre", "condition", "position", "em", "status", "prime", "tim", "input", "output", "const", "term", "result", "capacity", "num", "t", "dat", "unt", "time", "pt", "cum", "v", "Temp", "emp", "adj", "ptr", "Temperature", "tr", "fake", "tar", "tmp", "pi", "there", "id", "index", "ij", "tem", "mint", "perature", "deg"], "f": ["fd", "bf", "d", "p", "file", "fm", "g", "alf", "fs", "sf", "w", "c", "m", "z", "full", "fc", "fp", "fb", "o", "h", "ground", "df", "b", "ef", "fac", "t", "form", "cond", "bool", "force", "fl", "conf", "ff", "v", "e", "af", "flag", "tf", "end", "uf", "fully", "l", "y", "fi", "F", "cf", "xf", "ft"], "j": ["json", "n", "x", "uj", "ja", "js", "aj", "p", "d", "g", "left", "test", "jp", "job", "r", "oj", "jc", "z", "c", "jj", "step", "o", "pr", "ind", "jl", "b", "t", "si", "J", "bj", "ii", "kj", "ji", "v", "obj", "xy", "ch", "jump", "q", "l", "dj", "u", "id", "y", "k", "index", "ij"], "cnt": ["conct", "cuant", "CNT", "Cpt", "cNT", "cct", "ccount", " cant", "conNT", " cctr", "Ccount", "Cant", "cant", "ncct", "cuctr", " cNT", " ccount", "Cctr", " cct", "conpt", "cunt", " cld", "Cct", "cpt", "ncnt", "cuNT", "cctr", "cld", "Cld", "nccount", "Cnt", " cpt", "connt", "ncld"], "ans": ["ars", "n", "ANS", "ants", "ats", "ians", "actions", " means", "ai", "aus", "ros", "us", "ts", "ates", "ns", "vals", "ann", "ums", "rans", "ks", "anas", "leans", "ins", "offs", "wan", "ons", "ms", "angs", "acts", "ls", "amps", "ids", "ents", "ens", "uns", "an", "posts", "gs", "anks", "iann", "aps", "terms", "s", "nan", "ands", "aos", "ads", "arts", "cs", "rows", "os", "es", "olds"]}}
{"code": "#!/usr/bin python3\\n# -*- coding: utf-8 -*-\\n\\ndef stds(n):\\n    if n == 1:\\n        return set(['a'])\\n    else:\\n        std = stds(n-1)\\n        ret = set([])\\n        for stdi in std:\\n            for x in range(ord('a'),max(map(ord,list(stdi))) + 2):\\n                ret.add(stdi + chr(x))\\n        return ret\\n\\ndef main():\\n    N = int(input())\\n    ret = list(stds(N))\\n    ret.sort()\\n    print('\\n'.join(ret))\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "427", "substitutes": {}}
{"code": "N, S = open(0).read().split()\\nS = list(map(int, list(S)))\\nN = int(N)\\n\\ncnt = 0\\nfor i in range(0, 10):\\n        for j in range(0, 10):\\n            for k in range(0, 10):\\n                try:\\n                    n = S.index(i)\\n                    m = S[n+1:].index(j)\\n                    o = S[n+m+2:].index(k)\\n                    cnt += 1\\n                except ValueError:\\n                    pass\\nprint(cnt)", "target": "756", "substitutes": {"N": ["SN", "M", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NR", "NT", "H", "NF", "O", "V", "Z", "B", "J", "G", "Num", "P", "A", "E", "D", "NB", "Y", "Ni", "U", "K", "F", "TN", "C"], "S": ["SN", "STR", "Save", "M", "Source", "NS", "T", "SF", "SH", "BS", "Sup", "SS", "SL", "SB", "R", "I", "JS", "L", "SO", "RS", "X", "PS", "VS", "SI", "CS", "TS", "OS", "H", "GS", "V", "O", "Ins", "IS", "INS", "B", "J", "Q", "G", "P", "SSL", "A", "Windows", "US", "E", "s", "SP", "SU", "D", "DS", "Y", "Bytes", "SA", "WS", "String", "Z", "In", "C"], "cnt": ["CNT", "curNT", "Cpt", "decnc", "cNT", "cct", "cnc", "decNT", "rcNT", "rcnt", "decct", "nst", "nNT", "nnt", "curnc", "Cnc", " cNT", "tcpt", " cct", "tcct", "decnt", "rcct", "Cct", "cpt", "cst", "tcNT", "rcst", "curct", "tcnt", "Cnt", " cpt", "curnt", " cst", "nct"], "i": ["\u00ed", "mi", "a", "xi", "ia", "ie", "ci", "gi", "ir", "di", "I", "ami", "bi", "yi", "iti", "ic", "ip", "ri", "si", "li", "ii", "ei", "ti", "im", "it", "ini", "zi", "pi", "id", "y", "ij", "ik", "iu", "hi"], "j": ["json", "uj", "ja", "ie", "js", "aj", "jp", "job", "jc", "oj", "z", "jj", "bi", "ju", "bo", "h", "jl", "f", "je", "b", "J", "bj", "li", "ji", "v", "kj", "obj", "jump", "q", "dj", "y", "ij"], "k": ["ck", "km", "ek", "uk", "x", "kr", "kh", "kl", "ijk", "p", "kar", "ak", "ke", "z", "ic", "kw", "ko", "h", "yk", "tk", "kok", "kj", "ok", "ikk", "ku", "ark", "wk", "kt", "kk", "sk", "ka", "ik", "mk"], "n": ["nr", "x", "net", "nt", "wn", "gn", "ln", "d", "p", "en", "on", "name", "ne", "cn", "dn", "sn", "r", "c", "z", "ns", "ny", "b", "fn", "t", "nb", "mn", "ot", "out", "na", "v", "yn", "an", "nc", "un", "at", "s", "nu", "nw", "nn", "l", "q", "np"], "m": ["tm", "a", "mi", "M", "mr", "x", "dm", "d", "p", "mo", "mm", "mp", "g", "r", "c", "z", "h", "ms", "f", "b", "t", "mc", "mn", "v", "e", "om", "sm", "s", "l", "u", "y", "mt", "mk"], "o": ["a", "d", "p", "po", "g", "bo", "ic", "h", "ko", "O", "ob", "f", "t", "ot", "out", "key", "v", "e", "ok", "al", "obj", "oa", "oo", "q", "l", "ar", "os"]}}
{"code": "n=int(input())\\na,b=map(int,input().split())\\nh=list(map(int,input().split()))\\nk=[0]*n\\nfor i in range(n):\\n  k[i]=b-(a-(0.006*h[i]))\\n  if k[i]<0:\\n    k[i]=-1*k[i]\\nprint(k.index(min(k))+1)", "target": "700", "substitutes": {"n": ["nr", "N", "x", "nt", "ln", "d", "ne", "cn", "g", "sn", "r", "c", "m", "ns", "ny", "o", "nl", "num", "t", "nia", "nb", "no", "mn", "na", "v", "an", "nc", "nu", "nn", "number", "l", "np", "y", "j", "nd"], "a": ["ia", "ae", "ab", "d", "p", "ach", "g", "ai", "xa", "r", "c", "ma", "m", "ga", "o", "ea", "la", "t", "alpha", "apa", "an", "A", "ap", "sa", "aka", "oa", "au", "aa", "l", "am", "ar", "u", "j", "y", "area", "ba", "ca", "ac"], "b": ["sb", "x", "bf", "ab", "d", "p", "db", "g", "r", "c", "m", "bi", "fb", "rb", "o", "be", "f", "br", "bc", "t", "gb", "nb", "B", "bb", "v", "eb", "cb", "l", "u", "j", "y", "bs", "ba", "back"], "h": ["history", "ht", "sh", "hz", "hs", "m", "ih", "rh", "help", "hex", "H", "ah", "bh", "uh", "hl", "hp", "gh", "dr", "oh", "his", "ph", "ha", "hw", "hash", "he", "hd", "ho", "hh", "pp", "hi", "hm"], "k": ["ck", "km", "ki", "ek", "kn", "uk", "kr", "keys", "kh", "kl", "ijk", "spec", "kar", "ak", "ke", "zero", "ky", "ks", "kw", "kil", "ko", "sky", "kind", "kb", "yk", "tk", "kok", "key", "kj", "params", "cal", "final", "ok", "kick", "cache", "work", "ikk", "ku", "kat", "wm", "q", "kt", "wk", "tek", "kk", "ka", "sk", "K", "ik", "pp", "ack", "mk"], "i": ["mi", "json", "xi", "x", "ter", "uri", "me", "cli", "gi", "g", "di", "series", "this", "I", "ai", "c", "batch", "bi", "ami", "yi", "qi", "info", "ic", "ip", "ind", "ri", "multi", "io", "si", "iu", "li", "ii", "ji", "v", "ori", "ei", "ti", "it", "zi", "ini", "ui", "spin", "\u0438", "slice", "l", "pi", "phi", "id", "j", "index", "y", "ij", "iri", "source", "chain"]}}
{"code": "n=int(input())\\nl=list(map(int,input().split()))\\nc=l[0]\\nans=0\\nfor i in range(1,n):\\n    if l[i]==c:\\n        ans+=1\\n        c=10001\\n    else:c=l[i]\\nprint(ans)", "target": "493", "substitutes": {"n": ["N", "x", "net", "nt", "ln", "d", "p", "en", "ne", "cn", "g", "sn", "w", "m", "z", "ns", "o", "nl", "f", "num", "t", "nia", "nb", "no", "mn", "na", "v", "nc", "s", "nu", "nn", "q", "np", "k", "nd"], "l": ["lc", "tl", "kl", "ln", "ld", "p", "lt", "g", "lb", "L", "r", "ml", "m", "dl", "nl", "sl", "la", "ls", "jl", "b", "t", "hl", "lis", "rl", "lo", "lists", "fl", "li", "lp", "v", "list", "lv", "s", "lr", "ol", "ll", "pl", "le"], "c": ["ec", "ck", "ce", "lc", "con", "a", "ctrl", "cat", "ci", "gc", "p", "unc", "cd", "g", "xc", "ct", "rc", "r", "m", "fc", "ic", "col", "h", "cur", "cv", "f", "b", "t", "mc", "dc", "uc", "sc", "v", "e", "nc", "cache", "cp", "ch", "cc", "com", "co", "abc", "cb", "cu", "cl", "u", "cs", "k", "cm", "cr", "cf", "ca", "C", "ac"], "ans": ["ars", "ANS", "ants", "ats", "beans", "eds", "outs", "urs", "aus", "ros", "nets", "us", "ts", " Ans", "ns", "ann", "rans", "rs", "ums", "anas", "ks", " spans", "ins", "ras", "ons", "ms", "angs", "amps", "ls", "ents", "ens", "ots", "uns", "an", "posts", "gs", "anks", "aps", "oss", "s", "aos", "ads", "cs", "arts", "os", "lan", "AN", "ds", "olds"], "i": ["mi", "xi", "x", "me", "ci", "gi", "vi", "di", "this", "I", "ai", "bi", "qi", "yi", "ic", "ix", "ip", "ind", "b", "num", "multi", "si", "li", "ii", "ji", "v", "ori", "ti", "im", "it", "zi", "ui", "ini", "\u0438", "q", "pi", "id", "j", "index", "ij", "hi"]}}
{"code": "X = int(input())\\n\\nans = 0\\nfor i in range(1,40):\\n    for j in range(2,10):\\n        if X >= i**j and i**j > ans:\\n            ans = i**j\\n\\nprint(ans)", "target": "489", "substitutes": {"X": ["M", "IX", "N", "x", "T", "TX", "R", "I", "L", "EX", "UX", "OX", "ZX", "XY", "V", "S", "DX", "J", "Q", "Co", "G", "P", "A", "E", "XX", "D", "XT", "XXX", "Y", "SA", "K", "Z", "C", "Xi"], "ans": ["ANS", "ants", "ats", "ians", " means", "outs", "irms", "aus", "ros", "san", "ane", " Ans", "ns", "anus", "ann", "rans", "rs", "man", "anas", "ks", "offs", "ins", "ons", "ms", "amps", "annot", "ls", "pan", "ents", "ens", "uns", "can", "an", "iann", "anks", "oss", "anes", "s", "nan", "xs", "idents", "ran", "aos", "arts", "asms", "os", "es", "lan", "AN", "aver"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "ni", "ie", "api", "ci", "gi", "p", "di", "ai", "I", "m", "bi", "yi", "iti", "ic", "ip", "b", "io", "si", "ii", "li", "ji", "ei", "v", "ti", "oi", "ani", "im", "it", "ini", "zi", "phi", "pi", "l", "y", "ik", "ij", "iu", "hi"], "j": ["json", "n", "x", "uj", "ja", "str", "him", "err", "js", "aj", "d", "p", "g", "di", "jp", "jc", "oj", "z", "m", "jj", "prime", "o", "h", "jl", "f", "b", "jac", "br", "t", "si", "J", "bj", "ji", "kj", "v", "jas", "obj", "xy", "im", "it", "jump", "q", "l", "dj", "u", "y", "k", "ij", "jam"]}}
{"code": "N,T=map(int,input().split())\\nct=[]\\nd=[]\\nfor i in range(N):\\n    ct.append(list(map(int,input().split())))\\nfor i in range(N):\\n    if ct[i][1]<=T:\\n        d.append(ct[i])\\nif len(d)==0:\\n    print('TLE')\\nelse:\\n    e=d[0]\\n    for i in range(len(d)):\\n        if e[0]>=d[i][0]:\\n            e=d[i]\\n    print(e[0])", "target": "28", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "NC", "GN", "NI", "Na", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "NR", "NT", "NH", "H", "V", "No", "NO", "NUM", "S", "J", "ND", "Num", "P", "E", "D", "NB", "Y", "MN", "Ni", "K", "F", "TN", "C"], "T": ["WT", "M", "TP", "R", "I", "L", "Type", "TS", "PT", "VT", "TG", "H", "V", "t", "S", "LT", "B", "J", "G", "This", "P", "E", "OT", "TB", "TT", "D", "TA", "XT", "TM", "Y", "GT", "F", "The", "K", "TN", "Tab", "C"], "ct": ["ck", "ut", "ce", "n", "con", "th", "Ct", "nt", "cat", "ld", "cont", "cd", "cn", "xc", "td", "apt", "c", "cod", "sect", "ctx", "CT", "cmd", "ect", "act", "dt", "ctr", "t", "cond", "pt", "ot", "cart", "att", "bt", "nc", "stab", "tt", "compl", "cc", "co", "capt", "et", "cu", "pl", "etc", "cl", "lat", "cr", "cent", "cf", "ctl", "ft"], "d": ["fd", "n", "dos", "dm", "ld", "db", "p", "g", "di", "dn", "td", "dh", "r", "w", "c", "m", "bd", "z", "dl", "o", "h", "dt", "done", "df", "b", "t", "dat", "dc", "da", "dr", "pd", "de", "v", "ad", "des", "s", "dp", "D", "do", "dq", "dis", "l", "dd", "sd", "j", "data", "dict", "ds", "nd"], "i": ["mi", "ki", "n", "xi", "x", "ia", "me", "gu", "ci", "gi", "cli", "p", "di", "iq", "ai", "I", "m", "bi", "qi", "yi", "iti", "info", "ic", "o", "ix", "ski", "ip", "ind", "multi", "ri", "io", "si", "iu", "li", "ii", "ji", "v", "ei", "ti", "int", "ori", "iy", "im", "it", "zi", "ini", "phi", "pi", "l", "item", "id", "y", "j", "k", "ij", "ik", "index", "iri"], "e": ["ec", "a", "ce", "n", "x", "eur", "ae", "ie", "err", "me", "xe", "p", "en", "ue", "ne", "g", "ke", "we", "r", "c", "m", "pe", "ev", "el", "te", "ye", "ea", "eff", "o", "be", "f", "oe", "t", "eu", "ee", "ei", "de", "v", "E", "eg", "end", "eb", "ed", "et", "eeee", "element", "l", "le", "ent", "u", "se", "er", "ele", "j", "east"]}}
{"code": "antena = [int(input()) for _ in range(5)]\\n\\nk = int(input())\\n\\nmax_dist = max(antena)\\nmin_dist = min(antena)\\n\\nl = max_dist - min_dist\\n\\nif l <= k:\\n    print(\"Yay!\")\\nelse:\\n    print(\":(\")\\n\\n", "target": "208", "substitutes": {"antena": ["antselia", " anteton", "antolan", " antea", "antryelia", "antsica", "antryheon", "anteton", "stantena", "vardica", "Antoa", "antsea", "Antena", "antryea", "antadena", "vardadena", "antea", "antelia", "stanteton", "ntadena", "antica", "Antolan", "ntenna", "antsadena", "stantolan", "antenna", "vardenna", "antryena", "stantoa", " antolan", "ntena", " antheon", "vardena", "antheon", "antsheon", "ntica", " antelia", "antsena", "Anteton", "antsenna", "antoa", " antoa"], "_": [" j", " example", "ix", " g", "val", " f", " m", " __", " each", " you", " code", " p", "j", " some", " un"], "k": ["ck", "km", "ki", "n", "ek", "kn", "kr", "kl", "p", "ak", "ke", "i", "m", "dk", "ks", "kw", "ko", "h", "kb", "kok", "kj", "v", "ok", "ikk", "ku", "q", "kk", "ka", "sk", "K", "ik", "j", "mk", "unk"], "max_dist": ["ax_lat", "end__distance", "max_des", "max__des", "max_distance", "end__rel", "end__dist", "ax_distance", "ax_dist", "end_dist", "max__rel", "max__dist", "end__des", "ax_Dist", "end_distance", "max__distance", "max_lat", "end_rel", "end_des", "max_Dist", "max_rel"], "min_dist": ["min_sum", "Min_err", "min___dist", "minlydist", "min___err", "minlysum", "min___distance", "max_distance", "minlyseq", "Min_distance", "min_err", "Min_dist", "minipseq", "minipdistance", "minipsum", "min_distance", "max_seq", "min_seq", "max_sum", "minlydistance", "minipdist"], "l": ["lc", "n", "tl", "kl", "ln", "lt", "p", "g", "lb", "i", "L", "r", "c", "m", "z", "dl", "el", "lit", "o", "nl", "sl", "la", "h", "ls", "t", "hl", "len", "lo", "lp", "li", "list", "q", "ll", "le", "j", "lin"]}}
{"code": "def main():\\n    n, a, b = map(int, input().split())\\n    print(0 if (n == 1 and a != b) or a > b else (b - a) * (n - 1) + a - b + 1)\\n    \\nif __name__ == '__main__':\\n    main()\\n", "target": "395", "substitutes": {"n": ["N", "net", "x", "nt", "d", "p", "name", "ne", "g", "i", "sn", "r", "c", "w", "m", "z", "ns", "o", "h", "num", "t", "len", "nb", "no", "mn", "na", "an", "v", "nc", "nan", "nu", "size", "q", "l", "number", "np", "ll", "nn", "ng", "j", "network"], "a": ["x", "ia", "sta", "ae", "to", "ab", "aff", "ta", "d", "p", "va", "ai", "ak", "i", "c", "ma", "m", "ata", "o", "ea", "act", "f", "\u00e4", "abs", "t", "alpha", "da", "na", "an", "e", "A", "al", "at", "sa", "ao", "ity", "au", "oa", "aa", "l", "am", "ar", "u", "area", "ba", "ca", "ac"], "b": ["bis", "sb", "x", "ab", "d", "p", "db", "g", "ib", "i", "r", "c", "m", "z", "bi", "fb", "rb", "o", "be", "f", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "s", "end", "eb", "base", "cb", "l", "u", "j", "y", "big", "bs", "ba"]}}
{"code": "N,M = map(int,input().split())\\nab = [list(map(int,input().split())) for i in range(M)]\\n\\n\\nab.sort(key=lambda x: x[1])\\nans = 1\\npre = ab[0][1]\\nfor ele in ab[1:]:\\n    if pre > ele[0]:\\n        continue\\n    pre = ele[1]\\n    ans += 1\\nprint(ans)\\n\\n\\n\\n\\n", "target": "219", "substitutes": {"N": ["n", "T", "NC", "Ns", "R", "X", "I", "L", "NM", "NN", "NR", "O", "V", "S", "B", "J", "Q", "G", "P", "E", "D", "Y", "MN", "Ni", "K", "F", "Z", "C"], "M": ["T", "CM", "R", "I", "JM", "L", "NM", "MX", "RM", "m", "MM", "V", "MC", "C", "S", "MAN", "B", "J", "Q", "G", "P", "A", "Multi", "MP", "MS", "D", "DM", "AM", "Y", "MN", "MT", "K", "F", "LM", "Man", "MR"], "ab": ["a", "abe", "sb", "ex", "um", " AB", "db", "abin", "hab", "ib", "abl", "ai", "abi", "aus", "fab", "AB", "pb", "eas", "rab", "rb", "Ab", "rub", "ob", "abb", "ada", "abs", "b", "abus", "pan", "tab", "bag", "bb", "av", " eb", "aps", "ap", "lab", "af", "abc", "eb", "com", "app", "bl", "am", "ub", "bs", "abis", "ac"], "i": [" ii", "a", "n", "x", "p", " j", "I", "iter", "r", "c", "m", "z", "ix", "ind", "li", "key", "v", "ti", "s", "ini", "q", "l", "pi", "id", "k", "y", "j"], "ans": ["ones", "ars", "ANS", "ants", "ats", "ians", "anon", "names", "outs", "aus", "ros", "ns", "vals", "ann", "rans", "rs", "man", "anas", "ks", "leans", "ins", "offs", "ons", "ms", "amps", "ls", "pan", "ids", "ents", "ens", "news", "orders", "cons", "uns", "an", "aps", "oss", "s", "pres", "nas", "yes", "cs", "arts", "os", "es", "lan", "ps"], "pre": ["before", "prev", "p", "db", " pret", "rep", "store", "re", "PRE", "ref", "par", "prefix", "prime", "min", "res", "Pre", "pa", "val", "pr", "ind", "pan", "pri", "sp", "rel", "begin", "ver", "li", "prep", "post", "inter", "gre", "pres", "ve", "mem", "pret", "pet", " prep", "pro", "pred"], "ele": ["lu", "eur", "Ele", "mel", "pal", "edge", "tele", " verte", "iter", " le", "die", "vals", "ale", "el", "alse", "mate", "tiny", "te", "ea", "vet", "val", "elt", "be", "ole", "oe", "sel", "ee", "nil", "li", "de", "tile", "e", "eq", "gre", "aler", "char", "ve", "lem", " cele", "element", "pse", "et", "tle", "ffe", "le", "pet", "horse", "ere", "ple"]}}
{"code": "s = input()\\nLS = len(s)\\nrs = s[::-1]\\nlc = []\\nrc = []\\nlx = 0\\nrx = 0\\nfor i in range(LS):\\n    if s[i] != 'x':\\n        lc.append(s[i])\\n    if rs[i] != 'x':\\n        rc.append(rs[i])\\ncnt = 0\\nif lc==rc or len(lc)+len(rc)==1:\\n    i = 0\\n    j = LS-1\\n    while j>i:\\n        if s[i]!=s[j]:\\n            if s[i]=='x':\\n                cnt+=1\\n                i +=1\\n            elif s[j]=='x':\\n                cnt+=1\\n                j -=1\\n        else:\\n            i +=1\\n            j -=1\\n    print(cnt)\\nelse:\\n    print(-1)", "target": "766", "substitutes": {"s": ["a", "ars", "n", "sb", "x", "ols", "ys", "sw", "str", "ats", "js", "p", "ains", "g", "fs", "r", "hs", "sys", "c", "ts", "m", "src", "ns", "ies", "ses", "ins", "res", "ras", "sl", "h", "ms", "ers", "ls", "f", "b", "abs", "t", "S", "ss", "irs", "parts", "its", "tes", "sc", "rings", "v", "e", "gs", "strings", "aces", "ws", "sa", "xs", "ments", "sv", "sts", "l", "cs", "os", "es", "y", " ls", "ds", "ps"], "LS": ["WC", "LB", "ITS", "NS", "DL", "ES", "ln", "JC", "BS", "GN", "SL", "PC", "LCS", "LC", "L", "RS", "JS", "VS", "TS", "CS", "SI", "Rs", "NT", "LR", "LA", "GS", "ls", "S", "LT", "LES", "FS", "J", "LI", "LV", "MS", "DS", "LL", "Len", "LOC", "LM", "LP"], "rs": ["ars", "rics", "acks", "sr", "mr", "rr", "ro", "ats", "js", "ues", "ows", "RS", "re", "r", "ros", "sys", "hs", "ts", "Rs", "res", "ras", "ms", "rys", "vr", "ls", "ss", "irs", "ris", "rl", "dr", "rings", "rors", "gs", "xs", "rt", "sts", "vs", "rates", "cs", "rows", "bs", "ubs", "rd"], "lc": ["ec", "loc", "lf", "tl", "kl", "ci", "ld", "gc", "ln", "pc", "xc", "lb", "LC", "tc", "c", "fc", "dl", "la", "ls", "bc", "vc", "mc", "icc", "len", "dc", "rl", "uc", "lp", "uci", "nc", "lv", "cc", "lr", "cu", "coll", "l", "ll", "cl", "lic", "cs", "cr", "ctl", "sc"], "rc": ["ec", "loc", "ck", "rr", "ro", "gc", "lib", "pc", "rac", "xc", "arc", "r", "tc", "c", "sys", "rd", "src", "fc", "rh", "rb", "res", "rm", "ras", "rec", "cur", "ls", "bc", "hl", "dc", "vc", "rl", "uc", "dr", "sc", "nc", "ok", "eq", "roc", "irc", "rt", "RC", "cc", "lr", "hr", "cu", "cs", "reg", "rn", "cr", "erc"], "lx": ["lix", "llax", "llx", "rlex", "llix", "rlax", "rlx", " lax", "rlix", "lax", "lex", " lex", " lix", "llex"], "rx": ["wx", "nr", "mr", "rio", "ex", "xi", "rr", "rex", "ux", "r", "ox", "rw", "rm", "tx", "ri", "rl", "Tx", "rin", "xy", "xs", "mx", "rt", "lr", "dx", "inx", "yx", "lex", "xp", "ry"], "i": ["a", "ki", "n", "x", "p", "r", "c", "jj", "ix", "ind", "multi", "ri", "v", "e", "ti", "oi", "it", "ini", "\u0438", "q", "phi", "id", "k", "init", "\u00ed", "ia", "uri", "ni", "me", "vi", "this", "I", "iter", "ai", "jp", "m", "ic", "si", "ei", "im", "zi", "l", "ij", "ci", "gi", "ir", "ip", "io", "ii", "ui", "pi", "index", "ik", "mi", "xi", "di", "bi", "ami", "info", "iri", "f", "b", "t", "li", "ji", "ori", "int", "y", "iu", "hi"], "cnt": ["cnd", "CNT", "cachect", " cnn", "account", "cot", "cNT", "cachent", "cct", "acct", "ccount", "Ctr", " cant", "csnt", "cachenn", "csNT", "acNT", "cacheot", "Ccount", "Cant", "cant", "acnt", "ccct", "ctr", "ccnd", " cNT", " ccount", " cct", "ccnt", "cnn", "Cnn", " cot", "Cct", "Cot", "Cnd", "cctr", "Cnt", " ctr", "csant", " cnd", "csnd"], "j": ["a", "json", "n", "x", "uj", "ja", "js", "d", "p", "aj", "g", "di", "jp", "r", "jc", "oj", "z", "c", "m", "jj", "bi", "el", "o", "jl", "br", "b", "jac", "fr", "t", "f", "si", "J", "bj", "kj", "v", "ji", "jas", "e", "it", "jump", "q", "l", "dj", "u", "y", "k", "index", "ij", "jit", "bs"]}}
{"code": "n = int(input())\\nmaximum = n * (n - 1) // 2\\nprint(maximum)", "target": "574", "substitutes": {"n": ["a", "N", "x", "max", "nt", "ln", "d", "p", "names", "norm", "ne", "cn", "g", "i", "sn", "c", "m", "z", "ns", "input", "min", "nl", "h", "f", "b", "num", "t", "len", "nb", "mn", "out", "na", "v", "nc", "s", "nw", "size", "nn", "l", "q", "np", "u", "ng", "j", "k"], "maximum": ["variable", "Maximum", "max", "necessary", "optional", "significant", "information", "provided", "value", "imum", "position", "length", "largest", "specified", "total", "message", "min", "output", "capacity", "physical", "limit", "termination", "integer", "initial", "frequency", "volume", "available", "directory", " Maximum", "highest", "reference", "average", "size", "number", "minimum", "document"]}}
{"code": "from collections import Counter\\nN = int(input())\\nA = list(map(int, input().split()))\\n \\nc = Counter(A)\\nkey = c.keys()\\ncomb = 0\\nfor i in key:\\n    comb += (c[i]) * (c[i]-1) // 2\\n \\nfor i in A:\\n    ans = comb - (c[i]-1)\\n    print(ans)\\n  \\n", "target": "247", "substitutes": {"N": [" I", "n", "M", "NS", "NC", "Na", "Ns", "X", " Ne", "I", " n", "NN", "NR", "NT", " M", "S", "B", " C", "Num", " K", "D", "Y", "Count", "Ni", "Names", "K", "F", "C"], "A": ["a", "GA", "M", "Ax", "T", "Key", "All", "An", "IA", "Alpha", "AT", "I", "NA", "L", "And", "AB", "AE", "LA", "AA", "As", "O", "V", "AI", "C", "S", "alpha", "B", "G", "P", "Value", "CA", "At", "E", "JA", "D", "TA", "AM", "Y", "SA", "U", "AC", "K", "AN", "The", "Array", "ca", "AP"], "c": ["ec", "a", "ce", "lc", "con", "n", "cmp", "keys", "ci", "gc", "cont", "p", "cd", "g", "xc", "ct", "rc", "tc", "chain", "m", "fc", "ctx", "col", "h", "cur", "cv", "f", "b", "config", "t", "mc", "dc", "count", "conf", "v", "e", "nc", "cache", "cos", "cp", "ch", "com", "cc", "co", "abc", "cu", "cb", "l", "cs", "k", "cm", "cr", "cf", "ca", "C", "ac"], "key": ["keys", "ki", "n", "x", "Key", "pair", "ie", "ac", "p", "KEY", "name", "air", "I", "chain", "set", "prefix", "input", "by", "ix", "kw", "col", "case", "count", "alpha", "li", "v", "e", "int", "list", "primary", "char", "new", "base", "et", "number", "pi", "id", "k", "index", "y", "j", "sum"], "comb": ["con", "burn", "sh", "cat", "consider", "aug", "mod", "ab", "multiple", "broad", "put", "coord", "integ", "mult", "ul", "join", "ai", "common", "acc", "wb", "cho", " Comb", " combine", "bo", "dom", "pac", "decl", "mix", "pan", "go", "num", "multi", "count", "fac", "cum", "uc", "cong", "dig", "conf", "tap", "lam", "add", "must", "Comb", "each", "multipl", "com", "factor", "fam", "jo", "div", "pl", "gam", "bin", "comp", "binary", "cr", "pack", "sum"], "i": ["a", "mi", " ii", "xi", "x", "uri", "cli", "gi", "ci", "p", "vi", "di", "ai", "I", "eri", "m", "bi", "yi", "qi", "iti", "ic", "ski", "h", " bi", "ip", "f", "b", "ri", "t", "si", "iu", "li", "ii", "ei", "v", "int", "ti", "oi", "adi", "iy", "im", "it", " vi", "zi", "ini", "ui", "\u0438", " ti", "phi", "pi", "ati", "l", "j", "index", "k", "y", "ij", "iri"], "ans": ["ars", "ANS", "ants", "ats", "ana", "eds", "aus", "asks", "ros", "iban", "aned", "ann", "rans", "anas", "ks", "offs", "ins", "wan", "ms", "amps", "angs", "ls", "annot", "ens", "uns", "can", "an", "gs", "iann", "anes", "aps", "oss", "des", "idents", "ran", "aos", "es", "lan", "ps"]}}
{"code": "A, B, C = map(int, input().split())\\nif A == B == C:\\n    print('No')\\nelif A == B or B == C or A == C:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "409", "substitutes": {"A": ["a", "GA", "T", "Ax", "Al", "An", "IA", "Ar", "AH", "AT", "R", "Av", "I", "L", "AD", "AL", "AV", "If", "Area", "And", "What", "AB", "H", "AA", "LA", "As", "AR", "AS", "Ah", "S", "G", "This", "P", "HA", "CA", "At", "AY", "E", "D", "AF", "Art", "SA", "AC", "AN", "Ag", "AP"], "B": ["Brian", "LB", "But", "BI", "N", "CB", "T", "MB", "Bob", "RB", "BL", "VB", "BS", "Bs", "Rob", "SB", "R", "L", "IB", "AB", "Reb", "BG", "H", "W", "Ab", "O", "V", "BT", "b", "BC", "BBC", "J", "WB", "BD", "G", "P", "BB", "USB", "Ber", "BM", "E", "Bern", "TB", "D", "NB", "EB", "BO", "Y", "BF", "DB", "U", "F", "BA", "Z", "BY"], "C": ["M", "N", "CB", "T", "Cu", "Yes", "R", "I", "LC", "L", "CE", "c", "CI", "CS", "Cs", "YC", "H", "W", "CP", "V", "CT", "VC", "O", "No", "S", "BC", "CD", "EC", "Co", "SC", "Q", "G", "CO", "DC", "P", "J", "CA", "E", "D", "CC", "Y", "U", "K", "F", "CF", "Z", "Can"]}}
{"code": "N,A,B = map(int,input().split())\\nl = list(input())\\nnum = 0\\ncount = 0\\nfor i in range(N):\\n  if l[i] == 'a' and A + B > num:\\n    print('Yes')\\n    num += 1\\n  elif l[i] == 'b' and (A + B > num):\\n    count += 1\\n    if count <= B:\\n      print('Yes')\\n      num += 1\\n    else:\\n      print('No')\\n  else:\\n    print('No')", "target": "724", "substitutes": {"N": ["CNN", "M", "n", "NS", "T", "GN", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NR", "NT", "H", "NF", "V", "No", "NUM", "S", "J", "G", "Num", "P", "D", "NB", "Y", "Count", "Ni", "K", "F", "Z", "C"], "A": ["a", " LA", "M", "T", "API", "An", "IA", "Alpha", "AU", "AT", "R", "I", "X", "L", "One", "NA", "And", "AB", "H", "AH", "AA", "LA", "V", "AR", "C", "S", "G", "This", "P", "Num", "CA", " a", "AF", "D", "Y", "Count", "SA", "U", "AC", "K", "BA", "Array", "AP", "AND"], "B": ["M", "BI", "T", "Max", "RB", "BL", "VB", "BS", "Bs", "SB", "R", "I", "Big", "L", "X", "Number", "IB", "AB", "BER", "H", "V", "BT", "b", "Bar", "BC", "S", "J", "Q", "GB", "G", "BR", "WB", "P", "BB", "Num", "USB", "E", "Bern", "TB", "FB", "D", "NB", "EB", "Y", "number", "Count", "DB", "K", "F", "BA", "Z", "BY", "C"], "l": ["a", "lc", "n", "kl", "ql", "ln", "p", "g", "lb", "L", "c", "m", "ml", "dl", "el", "nl", "sl", "ls", "jl", "f", "b", "t", "rl", "lo", "fl", "li", "lp", "v", "list", "lv", "s", "lr", "ol", "pl", "le", "ll", "isl"], "num": ["den", "nr", "n", "con", "x", "alph", "net", "nt", "um", "nom", "p", "mu", "en", "on", "test", "zero", "hom", "set", "total", "success", "result", "done", "NUM", "multi", "nb", "no", "cum", "mn", "ver", "pos", "out", "na", "Num", "cal", "nm", "up", "obj", "msg", "new", "nu", "one", "number", "mon", "np", "mem", "umber", "id", "index", "temp", "sum"], "count": ["a", "con", "n", "th", "max", "nt", "um", "cont", "p", "code", "ct", "long", "ount", "length", "c", "current", "z", "process", "total", "ind", "b", "multi", "cond", "len", "nb", "no", "conf", "check", "v", "list", "cache", "ch", "flag", "found", "size", "counter", "number", "Count", "index", "C", "sum"], "i": ["a", "mi", "n", "xi", "x", "ia", "uri", "ie", "me", "ci", "gi", "di", "g", "I", "r", "c", "m", "bi", "info", "yi", "ic", "ix", "ip", "ind", "f", "b", "io", "si", "li", "ii", "ji", "v", "ori", "ti", "s", "it", "im", "zi", "ini", "ui", "\u0438", "q", "pi", "id", "j", "y", "index", "ij", "iri"]}}
{"code": "d,t,s=map(int,input().split())\\nif(d<=t*s): print(\"Yes\")\\nelse: print(\"No\")", "target": "786", "substitutes": {"d": ["fd", "n", "dos", "dm", "ld", "p", "db", "di", "td", "i", "c", "dev", "dec", "dt", "done", "f", "b", "df", "dat", "da", "dr", "pd", "de", "red", "des", "dp", "dx", "D", "do", "div", "l", "dd", "du", "dra", "ds", "draw"], "t": ["tm", "top", "n", "ty", "T", "ta", "p", "test", "ct", "tw", "i", "tc", "tip", "wt", "ts", "set", "type", "total", "te", "tp", "dt", "f", "pt", "ot", "tu", "out", "at", "tt", "it", "tr", "rt", "tf", " T", "j", "mt"], "s": ["a", "n", "ys", "ats", "space", "p", "ows", "i", "fs", "r", "hs", "sys", "c", "ts", "m", "ns", "ies", "less", "sl", "ls", "b", "S", "ss", "si", "its", "gs", "sq", "sa", "sv", "l", "sd", "se", "qs", "ds", "ps", "bs"]}}
{"code": "N = int(input())\\n\\ndef make_divisors(n):\\n    divisors = []\\n    for i in range(1, int(n**0.5)+1):\\n        if n % i == 0:\\n            divisors.append(i)\\n            if i != n // i:\\n                divisors.append(n//i)\\n    return divisors\\n\\nans = 0\\ndivisors = make_divisors(N)[1:]\\nans += len(make_divisors(N-1))-1\\n\\nfor divisor in divisors:\\n        divided_N = N\\n        while 1:\\n            if divided_N%divisor!=0:\\n                break\\n            else:\\n                divided_N //=divisor\\n        if divided_N % divisor == 1:\\n            ans += 1\\nprint(ans)", "target": "462", "substitutes": {"N": ["SN", "CNN", "M", "NS", "T", "NC", "GN", "NI", "Ns", "X", "I", "BN", "NA", "L", "NM", "R", "NN", "NR", "CN", "NT", "NH", "H", "NF", "O", "V", "TN", "NUM", "S", "B", "J", "G", "P", "Num", "A", "D", "NB", "Y", "MN", "K", "F", "AN", "Z", "FN", "C"], "n": ["a", "net", "x", "nt", "gn", "d", "p", "on", "ln", "en", "ne", "g", "cn", "sn", "r", "c", "m", "z", "ns", "o", "h", "f", "b", "num", "t", "fn", "nb", "mn", "non", "na", "v", "an", "un", "s", "nan", "nu", "nn", "l", "pi", "np", "u", "j", "y", "k"], "divisors": ["divlisors", "divesors", "divisiions", "divisds", "divusds", "divisiORS", " divistors", "Divisores", "divesor", "divistored", "Divisctors", "divusors", "divisores", "digistions", "divinitORS", "decesORS", "divsers", "decistores", "divistORS", "divisiores", "divesners", "divusor", "digistor", "divistor", "divistions", "decisor", " divistorers", "divensored", "divlisores", "divesORS", "decistor", " divusORS", "decisores", "Divistores", "divisiners", "Divistors", "digisions", " divisores", "divisions", "divistores", " divusors", "divesctors", "divisiors", "divinitors", "divensor", "digisors", "divistctors", " divusor", "divistners", "divesores", "divisters", "decistored", "divsores", "divsors", "digisners", "divisORS", "digistners", "divistds", "divesions", "digisor", "decesctors", " divisorers", "divusORS", "DivistORS", " divisds", "divisners", "divilor", "divlisers", "decesores", "divsorers", "decisors", "decistors", " divusds", "Divistctors", " divisORS", "digistors", "Divisors", "divisictors", "divinitores", "decisored", "divilors", "divistorers", " divistores", "divisctors", "divilored", "divilores", " divisers", "divensds", "divisorers", "divensores", "divinitctors", "decisORS", "divensORS", "divisior", "divisored", "divensors", "divlisorers", "divistors", "decesors", "DivisORS", "divisers", " divisters", "decisctors"], "i": ["mi", "ki", "xi", "x", "ia", "ni", "ci", "cli", "gi", "d", "p", "g", "di", "ai", "I", "m", "bi", "yi", "iti", "ic", "ix", "o", "ip", "ind", "b", "t", "io", "si", "integer", "ion", "li", "ii", "v", "int", "ti", "oi", "im", "it", "ini", "zi", "ish", "q", "l", "pi", "phi", "u", "id", "j", "k", "y", "index", "ik", "ij", "iu", "hi"], "ans": [" orphans", "ANS", "ians", "ats", "ants", "ean", "names", " means", "eds", "outs", "ows", "aus", "ros", "aned", " Ans", "ates", "ns", "ann", "ums", "anas", " spans", "ks", "ins", "offs", "ons", "ms", "amps", "ls", "ents", "ids", "ens", "ations", "cons", " sans", "uns", "an", "posts", " sins", "iann", "anks", " ns", "eps", "s", " ann", "nan", "cus", "nas", "ands", "aos", "ams", "yes", "vs", "ads", "arts", "cs", "os", "anos", "lan", "AN", "ds", "olds"], "divisor": ["divlisOR", "divisioring", "divisiorer", "divisTOR", "divisorer", "divlisors", "divistoring", "divesors", "divisord", "divitsoring", "divesor", "formisor", "divissored", "divmisor", "divesored", "divitsor", "divisiOR", "divisiTOR", "divitsors", "divoisTOR", "divistor", "decisor", "divoisorman", "divisOR", "divoisors", "divistord", " divisored", "divissore", " divisiorer", "formisorman", "divlisorer", " divisiore", "divmisorman", "divisiors", "divisiore", "divisiored", "formoisors", "divissOR", " divisior", "formisTOR", "divisorman", " divisiors", "decisiors", "divisiord", "decisord", "decisioring", "formoisorman", "divisore", "decisoring", "divitsord", "divlisor", "divisoring", "decisors", "divesOR", "formoisTOR", "divmisors", "divmisTOR", " divisore", "formoisor", "decisior", "formisors", " divisiOR", "divesorer", " divisOR", "divisior", "divisored", "decisiord", "divisiorman", " divisorer", " divisiored", "divissor", "divistors", "divesore", "divoisor"], "divided_N": ["dividing_M", "divided___UN", "divided_M", "divide_M", "dividable_N", "divided__C", "dividable_NA", "divided_T", "dividable___NA", "divide_T", "divided_S", "divided___M", "divided_C", "divided__R", "divided____n", "divided_UN", "divide_S", "divided_R", "dividable___UN", "divided____FN", "divided___NA", "divided_NA", "divided__M", "divided_n", "divided_____Size", "divided__N", "dividing_C", "divided____Size", "divide_FN", "divided___N", "dividable_M", "divided_Size", "divided_____FN", "dividing_N", "divided_____n", "dividable_UN", "dividable___N", "divided____N", "divided_FN", "dividing_R", "divide_Size", "dividable___M", "divided_____N", "divide_N", "divide_n"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\n\\n\"\"\"\\n2X = ak * (2p+1)\\n\u57fa\u672c\u7684\u306b\u306f\u6700\u5c0f\u516c\u500d\u6570/2\u3092\u57fa\u672c\u3068\u3057\uff0c\u3053\u308c\u306e\u5947\u6570\u500d\u304b\uff0e\\n\\nX  = (ak//2) * (2p+1)\\n\u3068\u66f8\u3051\u308b\uff0e\u7b2c\u4e8c\u9805\u304c\u5947\u6570\u306a\u306e\u3067\uff0c\u5404ak\u304c2\u3067\u5272\u308a\u5207\u308c\u308c\u3046\u56de\u6570\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\\na=[2,4]\u3060\u3068\u7121\u7406\\n\"\"\"\\ndef main():\\n    from math import gcd\\n    N,M=MI()\\n    A=LI()\\n    \\n    def count(X):\\n        cnt=0\\n        while X%2==0:\\n            cnt+=1\\n            X=X//2\\n        return cnt\\n    \\n    C=count(A[0])\\n    for i in range(1,N):\\n        if count(A[i])!=C:\\n            print(0)\\n            exit()\\n            \\n    lca=1\\n    for i in range(N):\\n        g=gcd(lca,A[i])\\n        lca=(lca*A[i])//g\\n        \\n    lca2=lca//2\\n    ans=M//lca2 - M//lca\\n    \\n    print(ans)\\n    \\n            \\n    \\n\\nmain()\\n", "target": "385", "substitutes": {"input": ["history", "open", "arg", "next", "load", "pattern", "str", "select", "context", "util", "insert", "view", "spec", "get", "init", "shift", "iter", "image", "raw", "password", "align", "ref", "buffer", "focus", "read", "query", "xml", "format", "output", "PUT", "cmd", "fn", "config", "hidden", "parse", "feed", "inner", "out", "Input", "int", "string", "interface", "exec", "it", "csv", "print", " Input", "q", "reader", "sample", "enter", "index", "data", "sequence", "text", "source", "request"], "N": ["SN", "CNN", "n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "L", "NA", "NM", " n", "NN", "CN", "NR", "NT", "O", "V", " L", "S", "NE", "B", "J", "G", "P", "E", "D", "NB", "Y", "MN", "Ni", "F", "AN", "TN"], "M": ["T", "CM", "MU", "R", "I", "L", "NM", "m", "H", "MM", "O", "MC", "V", "MD", "S", "B", "J", "Q", "G", "P", "MA", "E", "MS", "D", "TM", "Y", "AM", "MI", "MN", "MT", "U", "K", "F", "AN"], "A": ["a", "GA", "T", "All", "An", "Abs", "AU", "AT", "mA", "I", "ACC", "L", "NA", "AB", "AE", "H", "AA", "LA", "As", "V", "AI", "AR", "AS", "S", "B", "G", "P", "CA", "MA", "At", "JA", "AF", "AM", "Y", "SA", "AC", "ACT", "BA", "AN", "Array", "AP"], "X": ["IX", "x", "T", "TX", "R", "I", "L", "EX", "Number", "MX", "UX", "Ex", "H", "ZX", "O", "V", "XP", "S", "DX", "XM", "J", "Q", "G", "Tx", "P", "ID", "E", "XX", "XT", "D", "Y", "Count", "XL", "U", "K", "F", "Value", "Z", "Xi"], "cnt": ["cnd", "rount", "CNT", "rnt", "tcnd", " cnn", "cNT", "cct", "kst", "Ctr", "icst", "knt", "ctx", "ictx", "icnn", "tctr", "ccct", "ctr", "count", "icnt", " cNT", "ccnd", "knn", " cct", "ccnt", "tcct", "cnn", "Cct", " count", "cst", "rNT", "Cnd", "cctr", "ktx", "tcnt", "Cnt", "Count", " cst", " ctx", "rct"], "C": ["T", "CM", "NC", "R", "LC", "I", "L", "c", "CI", "CS", "CN", "Cs", "W", "O", "V", "CT", "count", "S", "BC", "CD", "B", "G", "CO", "P", "CA", "E", "D", "CC", "Y", "Count", "K", "F", "Z"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "cli", "p", "di", "ai", "I", "m", "bi", "qi", "info", "yi", "ic", "ix", "ip", "h", "ind", "ri", "multi", "t", "si", "li", "ii", "ji", "v", "ei", "ti", "iy", "im", "it", "s", "ini", "zi", "ui", "\u0438", "phi", "pi", "l", "id", "j", "index", "y", "ij", "ik"], "lca": ["lbcca", "lna", "lccas", " lcca", " lci", "lci", "lbca", "lcur", "rlna", "rlcur", "llca", "lcae", " lCa", "alCa", "rlcas", "rlca", "gca", "llna", " laca", "lcas", "lbCA", "rlci", "lpa", "lcci", "alCA", "gCA", "rlaca", "Lpa", "lcpa", "llcur", "lcca", "LCA", "Lca", "lcCA", " lae", "rlae", "alpa", "LCa", "laca", " lpa", "lcsa", "rlCA", "alca", "gcca", "gaca", "lCa", "gna", " lna", "lCA", " lcur", " lCA", "lsa", "lae", "alsa", "Lsa", " lcas"], "g": ["gg", "n", "ge", "gn", " G", "gi", "gc", "p", "d", "ang", "gd", "r", "bg", "c", "m", "z", "ga", "gt", "gp", "gm", "go", "f", "b", "tg", "t", "gb", "G", "v", "gs", "msg", "eg", "gen", "l", "fg", "u", "j", "reg", "mg", "pg"], "lca2": ["lceB", "lpaB", " lca1", "lpa1", "lca3", "laeB", "lce2", "lca1", "lta2", " lce2", " lce1", "lCA2", "lpa3", "lta3", "lcaB", "lce3", " lae3", " lcaB", "lae2", "lce1", " lae2", "lae1", "lCA3", "lae3", " lce3", "lpa2", " lca3", " lceB"], "ans": ["ars", "n", "ANS", "ants", "ats", "gn", "gc", "An", "ana", "names", " means", "cn", "aus", "gd", "lines", " Ans", "ts", "ns", "ann", "ks", "gt", "ins", "ons", "ms", "ls", "ids", "cons", "mn", "can", "an", "gs", "terms", "xs", "sv", "gan", "cs", "ags", "os", "es", "AN", "ds"]}}
{"code": "n,k=map(int,input().split())\\ns=input()\\ns+=\"6\"\\nc=0\\nl=[]\\nzcnt=0\\nfor i in range(n):\\n  if s[i]!=s[i+1]:\\n    if s[i]==\"0\":zcnt+=1\\n    l.append((s[i],i+1-c))\\n    c=i+1\\nL=len(l)\\nsl=[0]*(L+1)\\nfor i in range(L):\\n    sl[i+1]=sl[i]+l[i][1]\\nif k>=zcnt:print(n);exit()\\nans=0\\nif s[0]==\"0\":\\n    for i in range(zcnt-k+1):\\n        ans=max(ans,sl[min(L,2*k+i*2)]-sl[max(0,i*2-1)])\\n    print(ans)\\nelse:\\n    for i in range(zcnt-k+1):\\n        ans=max(ans,sl[min(L,2*k+i*2+1)]-sl[i*2])\\n    print(ans)", "target": "340", "substitutes": {"n": ["a", "N", "x", "nt", "gn", "ln", "d", "p", "name", "ne", "g", "cn", "sn", "r", "w", "m", "z", "ns", "o", "nl", "h", "b", "num", "fn", "t", "nb", "out", "na", "v", "nc", "nan", "nu", "nn", "number", "np", "ng", "j", "y"], "k": ["ck", "km", "ki", "ek", "kn", "max", "kr", "uk", "kh", "kl", "ijk", "p", "spec", "kar", "ak", "ke", "kid", "r", "m", "z", "dk", "ks", "o", "kw", "ko", "kind", "h", "sch", "kok", "alpha", "kj", "v", "ok", " K", "kick", "work", "ikk", "ku", "q", "kt", "wk", "kk", "sk", "ka", "K", "ik", "j", "ack", "mk", "unk"], "s": ["a", "scl", "sb", "sw", "ys", "str", "ats", "js", "d", "p", "g", "r", "sn", "hs", "ts", "z", "m", "ns", "ies", "south", "rs", "ses", "sg", "ls", "b", "sp", "t", "S", "ss", "si", "ings", "tes", "its", "bits", "als", "v", "strings", "gs", "sq", "aces", "ws", "sa", "sv", "xs", "so", "sts", "cs", "y", "os", "stats", "ds", "ps"], "c": ["a", "ce", "lc", "con", "x", "ci", "gc", "d", "p", "g", "ct", "rc", "r", "tc", "m", "z", "ic", "col", "f", "b", "t", "count", "mc", "dc", "cum", "v", "nc", "cin", "cp", "cc", "co", "cu", "u", "cs", "cm", "cr", "ca", "C", "ac"], "l": ["lc", "kl", "tl", "ln", "ld", "p", "lt", "g", "left", "lb", "r", "ml", "z", "m", "dl", "el", "lit", "o", "nl", "la", "ls", "b", "hl", "t", "yl", "lis", "rl", "lo", "lp", "li", "fl", "v", "list", "lv", "lang", "lr", "ol", "ll", "le", "il", "pl", "cl", "isl"], "zcnt": [" zcurNT", "nzccount", "zncred", "zcres", "zncfg", "zrcNT", "zcrt", "zipgcnt", "zgcrc", "zcNT", "zcfg", "zipgcrc", "zctpt", "zipcnt", " zcurred", "zncNT", "zcurred", " zcurfg", "nzncOUNT", "ztctx", " zctrt", " zcred", "zcachered", "zipcnc", "zcint", "zcachent", "zycnt", "znpt", "ztcres", "ztcnt", "ztcpt", "zlcrc", "zgcnc", " zcurnt", "zrcrc", "zciript", "zycint", "zctrt", "ztcrt", "zlcpt", "zcuript", "nzcnt", "zcurcount", "znrt", "zlcnc", "zycres", "zcred", "zgcpt", "zcOUNT", "nzncnt", "zcript", "nzcOUNT", "zcurfg", "zctx", "ztcript", "zcurNT", "znccount", "zipcpt", "zycript", " zcttx", "nzncNT", "zlcnt", "zcrc", "zrcOUNT", "zcttx", "zcurnt", "zctnt", "zgcnt", "zycires", "zcachefg", "zcunt", " zcrt", "zcures", " zctx", "zyciript", "zcpt", "zrcnc", "zrcnt", " zctnt", "zipgcpt", " zcpt", " zcfg", "zcires", "zcurOUNT", " zcNT", " zctpt", "zccount", "znnt", "nzcNT", "zcacheNT", "zrccount", "zcnc", "zntx", "zipcrc", "zncOUNT", "zncnt", "zipgcnc", "zrcpt", "nznccount"], "i": ["ki", "x", "ix", "ind", "multi", "ri", "ti", "oi", "it", "ini", "\u0438", "q", "phi", "id", "\u00ed", "ia", "ni", "me", "vi", "ai", "I", "this", "m", "qi", "iti", "ic", "o", "si", "iu", "ei", "im", "zi", "u", "ij", "ci", "gi", "ski", "ip", "icate", "io", "ii", "ui", "pi", "index", "ik", "mi", "xi", "cli", "di", "iq", "bi", "ami", "yi", "info", "f", "t", "li", "ji", "ori", "int", "list", "adi", "iy", "at", "ati", "item", "j", "y", "iri", "hi"], "L": ["dL", "M", "N", "NL", "DL", "T", "LIN", "BL", "SL", "R", "I", "LC", "TL", "LR", "Length", "H", "W", "LU", "V", "S", "LO", "LT", "B", "Li", "P", "LI", "RL", "IL", "LV", "LG", "Lu", "D", "CL", "LL", "Len", "LE", "U", "K", "LM", "LS", "Z", "LP", "C"], "sl": ["scl", "sle", "sr", "sh", "sb", "pkg", "els", "su", "tl", "kl", "ln", "ld", "lib", "spl", "split", "spec", "ul", "Sl", "SL", "eval", "sn", "sels", "ml", "dl", "zh", "gl", "nl", "la", "sing", "ls", "vl", "sel", "hl", "rel", "len", "rl", "lo", "sil", "fl", "li", "chlor", "des", "sa", "ssl", "sv", "so", "sol", "lr", "bl", "pse", "ll", "pl", "il", "se", "pol", "isl"], "ans": ["ars", "ANS", "ants", "ats", "ians", "\u00e1n", "ados", " means", "eds", "acs", "aus", "ros", " Ans", "ates", "vals", "ns", "ann", "rans", "rs", "mas", "anas", "leans", "offs", "ins", "ums", "ras", "scan", "ons", "ms", "angs", "flags", "annot", "pan", "amps", "trans", "ens", "cas", "anc", "cons", "uns", "can", "an", "rors", "posts", "anks", "iann", "aps", "anes", "oss", "nan", "cus", "nas", "ams", "aos", "ands", "ran", "vs", "yes", "arts", "os", "lan", "ps"]}}
{"code": "H,W = map(int,input().split())\\nA=[]\\nfor i in range(H):\\n    A.append(list(input()))\\n\\nfor i in range(H):\\n    if A[i] == ['.'] * W:\\n        A[i] = ['-1'] * W\\nfor j in range(W):\\n    count = 0\\n    for i in range(H):\\n        if A[i][j] == '#':\\n            break\\n        count += 1\\n    if count == H:\\n        for i in range(H):\\n            A[i][j] = '-1'\\nfor a in A:\\n    if a == ['-1'] * W:\\n        continue\\n    ans = [ai for ai in a if not ai == '-1']\\n    print(''.join(ans))\\n\\n\\n", "target": "413", "substitutes": {"H": ["M", "N", "Eh", "CH", "HD", "T", "His", "HS", "HL", "HE", "X", "I", "R", "L", "Ha", "RH", "HO", "HI", "GH", "WH", "HTML", "NH", "h", "HR", "DH", "V", "TH", "Z", "HH", "S", "B", "J", "Q", "G", "History", "HA", "P", "Head", "OH", "Host", "E", "D", "HC", "MH", "Y", "HTTP", "HB", "High", "K", "F", "HT", "Hi", "He", "C"], "W": ["WT", "WC", "M", "N", "We", "T", "WR", "MW", "WI", "WAR", "CW", "Win", "TW", "NW", "WP", "X", "I", "R", "L", "Wi", "w", "WW", "WH", "VW", "BW", "WA", "V", "Width", "S", "Wh", "SW", "B", "J", "WB", "G", "P", "E", "Wa", "Y", "WE", "EW", "DW", "U", "Weight", "WS", "Writer", "F", "Z"], "A": ["GA", "N", "Answer", "T", "Each", "Ax", "All", "An", "Ar", "Abs", "AU", "AT", "Adam", "I", "mA", "NA", "One", "AL", "AV", "Next", "L", "And", "Map", "What", "Ha", "AB", "AE", "Args", "LA", "AA", "As", "O", "AI", "C", "RAM", "Z", "Ah", "S", "EA", "B", "G", "This", "HA", "P", "Address", "Action", "CA", "At", "MA", "You", "E", "JA", "Wa", "AF", "TA", "D", "ATA", "AM", "Y", "SA", "The", "AC", "Array", "Ag", "AP"], "i": [" ii", "mi", "ki", "xi", "x", "ia", "uri", "ie", "ci", "gi", "ir", "di", "I", "m", "bi", "yi", "qi", "iti", "info", "ju", "ic", "o", "ix", "ip", "h", " bi", "iri", "ind", "ri", "si", "li", "ii", "ji", "ei", "v", "int", "ti", "im", "it", "s", "ini", "zi", "ui", "\u0438", "phi", "pi", "ati", "l", "u", "id", "il", "y", "index", "ij", "ik", "iu"], "j": ["n", "x", "uj", "ja", "js", "aj", "p", "jp", "jc", "oj", "z", "c", "jj", "bi", "ix", "o", "h", "ind", "jl", "br", "b", "jac", "je", "f", "t", "J", "bj", "li", "ji", "kj", "v", "ii", "it", "jump", "q", "l", "dj", "u", "y", "k", "index", "ij", "ik"], "count": ["hold", "race", "n", "comment", "th", "nt", "state", "p", "loop", "child", "code", "ct", "this", "ount", "length", "c", "weight", "current", "z", "process", "status", "total", "second", "success", "const", "h", "result", "ind", "ctr", "num", "cond", "nb", "thread", "frequency", "amount", "conf", "check", "now", "flag", "found", "group", "counter", "size", "number", "Count", "index", "sum"], "a": ["aq", "n", "ia", "ae", "ja", "ta", "aj", "p", "ana", "xa", "w", "c", "ma", "ita", "ga", "o", "ea", "pa", "la", "fa", "b", "t", "alpha", "wa", "apa", "na", "an", "e", "at", "sa", "aka", "ha", "sha", "oa", "au", "aa", "l", "ka", "ba", "ca", "ao"], "ans": ["ANS", "ians", "ats", "ants", "beans", "An", "anon", "ana", "names", " means", "atan", "aus", "lines", "san", " Ans", "ns", "ann", "rans", "anas", " spans", "leans", "ins", "res", "ras", "ons", "ms", "angs", "ids", " sans", "anners", "an", "anks", "anes", "s", "ran", "aos", "ads", "arts", "os", "AN", "ds"], "ai": ["n", "ia", "ae", "ni", "ja", "ci", "ta", "ana", "ais", "name", "ano", "di", "air", "xa", "z", "bi", "ica", "ita", "ga", "pa", "fa", "AI", "ay", "io", "si", "wa", "li", "ii", "an", "ei", "ti", "ain", "al", "ani", "aste", "sa", "aka", "ha", "au", "oa", "aa", "ati", "ari", "ali", "ka", "aii", "hi", "ca", "ao"]}}
{"code": "X = int(input())\\nA = int(input())\\nB = int(input())\\n\\n# \u3067\u304d\u308b\u3060\u3051\u8cb7\u3048\u308b\u500b\u6570\\nn = (X - A) // B\\n\\nprint(X - A - B * n)\\n", "target": "98", "substitutes": {"X": ["M", "N", "x", "T", "R", "I", "L", "H", "W", "XY", "V", "AR", "S", "J", "Q", "G", "P", "ID", "E", "XX", "D", "Y", "U", "K", "F", "Z", "C"], "A": ["GA", "M", "N", "T", "An", "Alpha", "R", "I", "L", "AB", "AA", "V", "S", "Bar", "J", "G", "P", "HA", "CA", "E", "D", "Y", "AC", "Z", "C"], "B": ["M", "N", "T", "RB", "BS", "Bs", "R", "I", "L", "AB", "BG", "W", "O", "V", "S", "BC", "J", "G", "P", "BB", "E", "D", "Y", "BA", "Beta", "Z", "C"]}}
{"code": "import math\\n\\nr = float(raw_input())\\ns = r * r * math.pi\\nl = 2.0 * r * math.pi\\n\\nprint \"%f %f\" % (s, l)", "target": "758", "substitutes": {"r": ["a", "n", "sr", "mr", "x", "self", "rr", "rg", "d", "p", "g", "R", "rc", "i", "rx", "re", "w", "rad", "c", "m", "rs", "rb", "rw", "res", "o", "h", "f", "b", "t", "rl", "v", "e", "rf", "rt", "lr", "q", "pi", "ar", "u", "k", "y", "attr", "cr", "rd"], "s": ["a", "n", "sb", "sr", "ys", "su", "str", "d", "p", "g", "i", "c", "ts", "m", "ns", "rs", "sl", "h", "ls", "f", "b", "sp", "t", "ss", "S", "si", "gs", "sa", "st", "sv", "sd", "ds"], "l": ["dL", "lc", "n", "x", "lf", "tl", "ln", "d", "p", "ld", "g", "lb", "i", "L", "long", "c", "m", "z", "ly", "dl", "nl", "sl", "ls", "f", "b", "hl", "t", "len", "rl", "lp", "li", "v", "lr", "ll", "le"]}}
{"code": "h,w=map(int,input().split())\\nn=int(input())\\na=[0]+list(map(int,input().split()))\\nans=[[0]*w for i in range(h)]\\nx=0\\ny=0\\nfor i in range(1,n+1):\\n    for _ in range(a[i]):\\n        \\n        if y==w:\\n            x+=1\\n            y=0\\n            \\n        if x%2==0:\\n            ans[x][y]=i\\n            y+=1\\n        else:\\n            ans[x][w-1-y]=i\\n            y+=1\\nfor u in ans:\\n    print(*u)", "target": "380", "substitutes": {"h": ["ht", "sh", "kh", "p", "r", "hs", "c", "m", "zh", "hei", "H", "ah", "bh", "f", "b", "hl", "gh", "v", "oh", "height", "his", "hw", "ha", "ph", "ch", "he", "hr", "hd", "ho", "l", "hh", "k", "j", "hi"], "w": ["wx", "sw", "wn", "d", "p", "g", "wy", "wh", "we", "wt", "r", "weight", "m", "z", "wb", "man", "wr", "window", "iw", "rw", "wi", "W", "wd", "kw", "ew", "f", "wl", "wid", "t", "len", "win", "wa", "wp", "v", "width", "ws", "hw", "ww", "rew", "nw", "q", "l", "k"], "n": ["N", "nt", "ni", "ln", "d", "p", "on", "ne", "sn", "c", "m", "z", "ns", "o", "nl", "num", "t", "nb", "nor", "no", "mn", "na", "v", "nc", "nu", "nn", "l", "np", "j", "k"], "a": ["ars", "ae", "ac", "ab", "p", "ana", "va", "ai", "xa", "aus", "c", "ma", "m", "eas", "o", "aaa", "b", "apa", "an", "A", "at", "sa", "s", "ao", "au", "oa", "aos", "aa", "l", "am", "ba", "ca"], "ans": ["ANS", "ians", "ats", "ants", "ana", "ai", "xa", "missions", "aus", "asks", "us", " Ans", "ns", "ann", "ums", "rs", "eas", "anas", "rans", "ins", "ras", "vers", "ons", "ms", "angs", "amps", "ls", "pan", "ens", "ations", "mn", "uns", "na", "an", "gs", "anes", "aps", "aces", "sa", "s", "xs", "uploads", "ions", "au", "ands", "aos", "nas", "ams", "vs", "os", "AN", "ds", "orts", "olds"], "i": ["mi", "xi", "ci", "gi", "p", "di", "ai", "I", "iter", "z", "m", "bi", "yi", "ic", "ix", "o", "ip", "ind", "b", "f", "t", "ri", "si", "li", "ii", "ji", "v", "int", "ti", "iy", "im", "it", "s", "zi", "ini", "q", "phi", "pi", "l", "id", "j", "k", "ij", "iu", "hi"], "x": ["wx", "xi", "ex", "ci", "xe", "p", "xc", "left", "ct", "X", "rx", "ox", "m", "z", "xt", "ix", "o", "tx", "act", "ax", "sex", "xd", "f", "t", "key", "v", " xx", "width", "xy", "xs", "dx", "inx", "l", "pi", "xx", "lat", "yx", "id", "k", "index", "j", "px", "lex", "xp", "xf"], "y": ["sy", "ty", "ys", "yd", "ley", "aily", "yer", "on", "ai", "wy", "cy", "oy", "yo", "ly", "ies", "my", "ny", "yi", "vy", "ic", "o", "py", "ye", "yle", "yr", "sky", "hy", "b", "axy", "dy", "t", "yl", "zy", "uy", "isy", "v", "yn", "ey", "gy", "iy", "xy", "ry", "et", "yt", "Y", "yy", "fy", "iny", "yx", "j", "hot", "ya", "ay", "ym"], "_": ["ia", " the", " j", " k", "ai", "I", " mi", "ix", "ip", " l", "li", " m", " __", " each", " you", "il", " p", "j", "ik", "ij", "ay"], "u": ["ut", "bu", "lu", "su", "um", "util", "mu", "ue", "uid", "uni", "us", "uv", "z", "itu", "\u00fc", "pu", "you", "uc", "eu", "tu", "ud", "up", "un", "ou", "ur", "ui", "uf", "nu", "au", "cu", "q", "zu", "yu", "uu", "U", "iu", "chu"]}}
{"code": "from collections import deque\\nimport math\\n\\nn,m,p = map(int, input().split())\\ndist  = []\\nedge1 = [[] for _ in range(n)]\\nedge2 = [[] for _ in range(n)]  # rev_edge\\nfor _ in range(m):\\n    u,v,c = map(int, input().split())\\n    u -= 1\\n    v -= 1\\n    dist.append((u,v,(c-p)*-1))\\n    edge1[u].append(v)\\n    edge2[v].append(u)   \\n\\ndef dfs(edges, s):\\n    stack = deque([s])\\n    used  = {s}\\n    while stack:\\n        x = stack.pop()\\n        for y in edges[x]:\\n            if y not in used:\\n                used.add(y)\\n                stack.append(y)\\n    return used\\n\\n\\ndef bfs(edges, s):\\n    queue = deque([s])\\n    used  = {s}\\n    while queue:\\n        x = queue.popleft()\\n        for y in edges[x]:\\n            if y in used:\\n                continue\\n            used.add(y)\\n            queue.append(y)\\n    return used\\n    \\n\\ndef bellman(dist):  #\u8ca0\u8fba\u304c\u3042\u308b\u30b1\u30fc\u30b9\u3067\u306e\u3001\u30b9\u30bf\u30fc\u30c8\u304b\u3089\u30b4\u30fc\u30eb\u3078\u306e\u6700\u77ed\u8def\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u3002\\n    cost = [float(\"inf\")] * n\\n    cost[0] = 0\\n    for _ in range(n): #\u9802\u70b9\u306e\u500b\u6570\u306e\u5206\u3060\u3051\u56de\u308b\\n        updated = False\\n        for u,v,c in dist: #\u8fba\u306e\u500b\u6570\u306e\u5206\u3060\u3051\u56de\u308b\\n            if cost[u] + c < cost[v]:\\n                cost[v] = cost[u] + c\\n                updated = True                \\n    #\u53ce\u675f\u3057\u306a\u3044\u5834\u5408\u306f\u8ca0\u9589\u8def\u304c\u3042\u308b\u305f\u3081\u7121\u9650\u306b\u5c0f\u3055\u304f\u3067\u304d\u308b\u3002\\n    if updated==True:\\n        return -1\\n    else:\\n        return max(0, cost[n-1]*-1)     \\n    \\nuse = bfs(edge1, 0) & bfs(edge2, n-1)\\ndist2 = [(a,b,c) for a,b,c in dist if a in use and b in use]\\nprint(bellman(dist2))", "target": "88", "substitutes": {"n": ["nr", "N", "x", "nt", "gn", "d", "en", "ln", "ne", "g", "cn", "dn", "i", "r", "sn", "c", "w", "z", "ns", "o", "h", "b", "t", "nb", "mn", "v", "nc", "nu", "nn", "l", "q", "np", "pi", " N", "j", "k"], "m": ["tm", "mi", "M", "dm", "d", "mm", "mp", "g", "i", "r", "w", "c", "bm", "o", "h", "ms", "num", "t", "mc", "mn", "v", "nm", "l", "k", "j", "cm"], "p": ["x", "pm", "d", "g", "i", "w", "r", "c", "o", "tp", "pa", "h", "pr", "f", "t", "pt", "v", "P", "cp", "q", "l", "np", "k", "j", "pn", "pp", "ps"], "dist": ["conn", "err", "dir", "Dist", "di", "dest", "tip", "weight", "inv", "src", "diff", " distances", "wd", "distance", "ind", "rel", "dep", "weights", "dr", "pos", "exp", "star", "obj", "adj", "dx", "desc", "coord"], "edge1": [" edge0", "ge1", "edge01", "ge0", "link0", "edge0", "ge01", " edge01", "link1", "link01"], "_": [" the", "__", "L", "Local", "val", "place", "pt", "all", "D", "___"], "edge2": ["Edge1", "Edge3", "edge3", "node2", " edge3", "node3", "Edge2", "node1"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\n\\ndef main():\\n    mod=10**9+7\\n    K=I()\\n    print(\"ACL\"*K)\\n\\nmain()\\n", "target": "533", "substitutes": {"input": ["history", "open", "next", "load", "str", "select", "context", "insert", "util", "view", "init", "get", "human", "eval", "shift", "image", "inc", "raw", "password", "align", "ref", "focus", "read", "query", "prefix", "format", "output", "PUT", "cmd", "config", "fn", "empty", "hidden", "form", "inner", "feed", "out", "Input", "int", "list", "update", "interface", "exec", "print", "new", " Input", "q", "reader", "command", "sample", "enter", "paste", "data", "sequence", "text", "source", "request"], "mod": ["PU", "n", "max", "x", "M", "MOD", "d", "mult", "ak", "Mod", "fun", "AD", "m", "module", "Ko", "dec", "min", "mask", "UL", "add", "cal", "MA", "tr", "MS", "OK", "k"], "K": ["M", "N", "T", "KY", "MOD", "KR", "MK", "AK", "X", "R", "Mod", "L", "KK", "KT", "W", "V", "KS", "KC", "PK", "S", "B", "J", "Q", "G", "P", "A", "D", "Y", "k", "F", "KI", "Z", "KA", "C"]}}
{"code": "def main():\\n    A, B = map(int, input().split())\\n    if (A*B)%2 == 0:\\n        print('No')\\n    else:\\n        print('Yes')    \\nmain()", "target": "356", "substitutes": {"A": ["M", "There", "AGE", "An", "IA", "AH", "AU", "R", "I", "X", "L", "NA", "AL", "AV", "Area", "What", "AB", "H", "AA", "LA", "As", "AR", "AS", "USA", "Bar", "Some", "This", "HA", "AP", "At", "AY", "You", "D", "AF", "SA", "U", "ACT", "AC", "AN", "C"], "B": ["Other", "LB", "But", "M", "N", "BI", "T", "MB", "RB", "VB", "BS", "L", "IB", "BER", "V", "Bar", "BC", "BE", "J", "GB", "G", "WB", "BB", "USB", "E", "Is", "Bern", "TB", "D", "NB", "EB", "Y", "DB", "BA", "Z", "BY", "C"]}}
{"code": "N = int(input())\\n\\nprint(N*(N-1)//2-N//2)\\nif N%2 == 1:\\n    for i in range(1, N):\\n        for j in range(i+1, N+1):\\n            if i == N-j:\\n                continue\\n            print(i, j)\\nelse:\\n    for i in range(2, N):\\n        print(1, i)\\n        print(N, i)\\n    for i in range(2, N):\\n        for j in range(i+1, N):\\n            if i+j == N+1:\\n                continue\\n            print(i, j)", "target": "277", "substitutes": {"N": ["SN", "n", "M", "NS", "T", "NL", "Ne", "NV", "NC", "GN", "NI", "Na", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "NP", "CN", "NR", "NT", "NOR", "NH", "H", "ANY", "Node", "O", "V", "SIZE", "NO", "NOTE", "Z", "NUM", "S", "NE", "B", "J", "Q", "G", "ND", "P", "Num", "FN", "A", "E", "D", "NB", "Y", "Size", "MN", "Ni", "K", "F", "UN", "TN", "Note", "NG", "C"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "ni", "ie", "ci", "gi", "cli", "p", "di", "aci", "I", "ai", "bi", "ami", "iti", "ic", "ix", "o", "ip", "ri", "t", "si", "li", "ii", "ji", "ei", "v", "int", "ti", "oi", "adi", "ani", "im", "it", "zi", "ui", "ini", "\u0438", "phi", "pi", "ati", "l", "id", "index", "asi", "ij", "y", "ik", "iu", "hi", "fi"], "j": ["json", "n", "x", "uj", "ja", "ijk", "aj", "js", "p", "d", "g", "di", "jp", "r", "oj", "jc", "z", "jj", "bi", "ju", "o", "h", "pr", "jl", "f", "je", "jac", "b", "t", "br", "J", "bj", "li", "ji", "v", "kj", "e", "obj", "it", "jump", "jo", "q", "l", "dj", "y", "k", "er", "ij", "meg"]}}
{"code": "N = int(input())\\nS = []\\nT = []\\nfor i in range(N):\\n    s,t = input().split()\\n    S.append(s)\\n    T.append(int(t))\\n\\nX = str(input())\\nind = int(S.index(X))\\nprint(sum(T[ind+1:]))", "target": "538", "substitutes": {"N": ["CNN", "M", "n", "NS", "NC", "GN", "NI", "Ns", "I", "L", "NM", "NN", "NP", "NR", "NT", "NH", "V", "NO", "Z", "Q", "ND", "Num", "P", "D", "NB", "MN", "Ni", "K", "TN", "NG", "C"], "S": ["Save", "ITS", "NRS", "NS", "SF", "SH", "ES", "BS", "SS", "Sl", "SL", "I", "ESS", "SB", "SER", "PS", "Si", "RS", "L", "VS", "TS", "SI", "CS", "Set", "OS", "As", "GS", "Ins", "IS", "INS", "B", "Sing", "P", "US", "Is", "SP", "SU", "ST", "DS", "LS"], "T": ["WT", "Total", "IT", "M", "ITS", "TR", "TW", "AT", "I", "It", "TS", "PT", "VT", "NT", "TG", "TL", "As", "V", "TH", "BT", "Z", "TV", "Tu", "B", "J", "Q", "TI", "G", "This", "TF", "P", "TB", "TT", "XT", "D", "TA", "TM", "Y", "OTS", "UT", "GT", "HT", "OT", "TN"], "i": [" ii", "n", "x", "ite", "p", " j", "iq", "I", "iter", "r", "c", "ix", "go", "f", "no", "im", "it", "q", "id", "j", "y", "k"], "s": ["n", "sb", "su", "str", "ats", "sub", "spec", "g", "fs", "us", "ts", "src", "ns", "rs", "ins", "sl", "ls", "sp", "ss", "sq", "gs", "string", "ws", "sa", "st", "sv", "sts", "cs", "se", "os", "ds", "ps"], "t": ["n", "th", "x", "ty", "ter", "nt", "ta", "p", "test", "ct", "tc", "wt", "ts", "info", "type", "te", "term", "dt", "f", "part", "pt", "ot", "ti", "at", "st", "tr", "it", "tt", "rt", "kt", "tz", "y", "er"], "X": ["IX", "x", "Ax", "Key", "TX", "I", "EX", "CE", "MX", "ox", "UX", "OX", "Ex", "FE", "XXXX", "ZX", "XY", "V", "Cross", "XP", "DX", "J", "ML", "A", "E", "XX", "XT", "XXX", "Y", "XL", "K", "Z", "EL", "C"], "ind": ["fd", "loc", "find", "look", "sit", "brand", "ld", "d", "dir", "dial", "inc", "cod", "old", "ident", "Ind", "mind", "blind", "kind", "cmd", "stick", "count", "cond", "dig", "ord", "add", "int", "IND", "butt", "und", "inn", "dj", "good", "id", "cand", "index", "md", "pp", "nd", "wind"]}}
{"code": "import math\\nfrom math import gcd,pi,sqrt\\nINF = float(\"inf\")\\nMOD = 10**9 + 7\\n\\nimport sys\\nsys.setrecursionlimit(10**6)\\nimport itertools\\nimport bisect\\nfrom collections import Counter,deque\\ndef i_input(): return int(input())\\ndef i_map(): return map(int, input().split())\\ndef i_list(): return list(i_map())\\ndef i_row(N): return [i_input() for _ in range(N)]\\ndef i_row_list(N): return [i_list() for _ in range(N)]\\ndef s_input(): return input()\\ndef s_map(): return input().split()\\ndef s_list(): return list(s_map())\\ndef s_row(N): return [s_input for _ in range(N)]\\ndef s_row_str(N): return [s_list() for _ in range(N)]\\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\\n\\n\\ndef main():\\n    x,y = i_map()\\n    if (x+y)%3 != 0:\\n        print(0)\\n        exit()\\n\\n    n = (-x+2*y)//3\\n    m = (2*x-y)//3\\n\\n    if n < 0 or m < 0:\\n        print(0)\\n        exit()\\n\\n    def fur(n,r):\\n        p,q = 1, 1\\n        for i in range(r):\\n            p = p*(n-i)%MOD\\n            q = q*(i+1)%MOD\\n        return (p * pow(q,MOD-2,MOD)) % MOD\\n\\n    print(fur(n+m,n))\\n\\n\\n\\nif __name__==\"__main__\":\\n    main()\\n", "target": "759", "substitutes": {"INF": ["EXFIN", "InFIN", " INV", "INf", "InF", " INFIN", "InV", "EXF", "INV", "Inf", " INf", "EXf", "EXV", "INFIN"], "MOD": ["MAX", "M", "SET", "UPDATE", "VER", "T", "mod", "TR", "TD", "TW", "OW", "DIR", "R", "LOG", "Mod", "X", "AD", "L", "FD", "RM", "OD", "ROM", "DR", "RE", "MIN", "NOR", "FUN", "ERROR", "PUT", "SIZE", "MD", "RED", "NO", "IM", "RT", "OR", "NUM", "MODE", "DX", "B", "J", "Q", "P", "LIB", "ID", "IND", "ENT", "FILE", "DEBUG", "MS", "FIN", "CC", "TM", "RO", "SPEC", "OK", "LL", "DEC", "DEV", "JUST", "MT", "Y", "FM", "LOC", "UN", "Z", "OOL", "REM", "COM", "FR", "TIME"], "N": ["SN", "CNN", "Name", "M", "NS", "T", "EN", "NC", "GN", "NI", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "NR", "CN", "NT", "ALL", "NH", "H", "ANY", "Node", "V", "NO", "NOTE", "Z", "NUM", "NAME", "S", "NE", "ND", "Num", "P", "OUT", "NOW", "NB", "Y", "MN", "F", "AN", "TN", "Note", "NG", "C"], "_": ["on", "__", "w", "ly", "Local", "ix", "val", "f", "____", "pt", "an", "un", "\u00e7", "___"], "x": ["a", "wx", "xi", "ex", "xe", "ux", "xc", "X", "rx", "w", "ox", "z", "xt", "xml", "ix", "h", "tx", "ax", "f", "xd", "e", "xy", "xs", "dx", "l", "xx", "yx", "u", "j", "px", "xp", "xf"], "y": ["sy", "ys", "yer", "wy", "cy", "yo", "z", "ies", "my", "ny", "yi", "vy", "o", "py", "ye", "yr", "sky", "hy", "b", "axy", "yl", "v", "yn", "ey", "gy", "iy", "xy", "ry", "yt", "Y", "yy", "fy", "j", "ya", "ay", "ym"], "n": ["a", "nr", "nt", "gn", "ln", "d", "en", "on", "ne", "cn", "g", "sn", "c", "w", "z", "ns", "o", "nl", "h", "f", "num", "fn", "t", "nb", "no", "mn", "na", "an", "yn", "v", "nm", "un", "s", "nan", "nu", "nw", "nn", "l", "np", "u", "ng", "j", "rn"], "m": ["tm", "mi", "M", "mr", "pm", "mod", "dm", "d", "mm", "mu", "mo", "g", "w", "c", "ma", "z", "bm", "o", "gm", "h", "ms", "f", "b", "t", "mc", "mn", "v", "an", "sm", "mx", "l", "u", "j", "md", "cm", "mt"], "r": ["a", "nr", "mr", "sr", "ro", "d", "R", "rc", "re", "w", "c", "o", "res", "h", "rar", "fr", "b", "ri", "t", "v", "e", "ru", "it", "l", "ar", "u", "er", "j", "ry", "rd"], "p": ["a", "pkg", "d", "pc", "g", "vp", "jp", "c", "pe", "fp", "pb", "par", "power", "o", "tp", "h", "pa", "ip", "pr", "f", "b", "t", "pt", "lp", "v", "P", "ap", "cp", "ping", "l", "pi", "u", "k", "j", "pp", "pro", "ps", "pg"], "q": ["pkg", "d", "g", "qu", "iq", "qt", "quant", "w", "c", "ox", "z", " Q", "qi", "query", "o", "h", "ip", "f", "b", "t", "Q", "v", "sq", "qq", "qa", "ph", "cp", "qual", "dq", "l", "u", "j", "k", "qs", "pp", "ry"], "i": ["mi", "xi", "ia", "ci", "d", "di", "ai", "I", "c", "z", "bi", "ic", "o", "ix", "ip", "h", "ind", "f", "b", "t", "si", "li", "ii", "v", "e", "int", "ti", "im", "zi", "ini", "l", "pi", "u", "id", "j", "iu"]}}
{"code": "while True:\\n    H, W = map(int, raw_input().split())\\n    if (H+W) == 0:\\n        break\\n    cb1 = '#'\\n    cb2 = '.'\\n    for w in range(W-1):\\n        if (w % 2) == 0:\\n            cb1 += '.'\\n            cb2 += '#'\\n        else:\\n            cb1 += '#'\\n            cb2 += '.'\\n\\n    for h in range(H/2):\\n        print cb1\\n        print cb2\\n    if (H % 2) != 0:\\n        print cb1\\n    print \"\"", "target": "451", "substitutes": {"H": ["M", "CH", "N", "HQ", "HD", "T", "SH", "His", "AH", "HS", "HE", "HL", "R", "X", "RH", "I", "HO", "HI", "HTML", "NH", "HR", "DH", "TH", "V", "Height", "HH", "Wh", "B", "J", "Q", "G", "HA", "P", "OH", "D", "HC", "MH", "Y", "HB", "High", "K", "F", "HT", "Hi", "He", "C"], "W": ["WT", "WC", "M", "N", "We", "WR", "MW", "WI", "Win", "CW", "WAR", "OW", "WP", "NW", "X", "R", "L", "WW", "WH", "VW", "BW", "V", "WA", "TH", "Width", "SW", "Wh", "B", "WB", "WD", "D", "WM", "Y", "DW", "EW", "F", "HT", "Z"], "cb1": ["cv50", " kb11", "zeb51", "conn51", "CBOne", "bc30", "bc25", "coe1", "bcpre", "rb1", "zeb11", "conn30", "coeone", "bc1", "conn1", " kb41", "bc51", "cb25", "func1", "cbone", "cv1", "rb3", "cb50", "cb11", " lb41", "zeb1", "cbOne", "func30", "cv3", "CB01", "cb01", " lb11", " lb51", "rb2", " kb51", "wbone", "coe50", "CB1", "wb1", "cbpre", "func51", "cb3", "cv01", "rb01", "zeb41", "CB2", "cv2", "func25", " kb1", "cb30", "conn25", "cvone", "cb51", "bcone", "rbOne", "cvpre", "wb3", "cb41", "coepre", "rbone", " lb1", "cvOne", "wb2", "bc50"], "cb2": ["cmd012", "erb2", "erb42", " ebtwo", "CBTwo", " eb42", "erbtwo", "CB42", "rb10", "stabTwo", "stab02", "cb10", "cb42", "bcTwo", "stab2", "rb1", "bc3", "bc2", "cmd42", "cbtwo", "cbTwo", "bc1", "cfg2", "rb3", "wb10", "cvTwo", "cfg42", "cb02", "CB02", "rb2", "cb012", "cbball", "bcball", "wb1", "cfg02", "cfgTwo", "cb3", "cv42", "bc10", "CB2", "cv2", "cmd2", " eb2", "bc42", "cmdtwo", "cvball", "stabball", "erb012", "wb3", "stab42", "wb2", " eb012"], "w": ["wx", "n", "x", "wn", "d", "p", "g", "i", "wh", "wt", "r", "c", "m", "wb", "wr", "window", "iw", "wat", "wi", "rw", "wd", "kw", "wo", "wal", "word", "ew", "f", "wl", "wid", "t", "win", "wa", "wp", "v", "width", "ws", "ww", "nw", "wk", "q", "l", "aw", "u", "k"], "h": ["ht", "ith", "hang", "hal", "dh", "hs", "ih", "zh", "rh", "ah", "igh", "bh", "b", "hl", "oh", "hw", "ha", "he", "hr", "hd", "q", "ho", "hh", "y", "hi", "hm"]}}
{"code": "S=input()\\nli=[S.count(\"a\"),S.count(\"b\"),S.count(\"c\")]\\nprint(\"YES\" if max(li)-min(li)<=1 else \"NO\")\\n", "target": "265", "substitutes": {"S": ["M", "N", "NS", "T", "SF", "SH", "ES", "BS", "SS", "SL", "SB", "SER", "I", "X", "L", "JS", "PS", "RS", "POS", "VS", "SI", "CS", "TS", "OS", "H", "GES", "GS", "V", "TN", "IS", "Sample", "ss", "INS", "States", "B", "FS", "SOURCE", "G", "P", "SE", "A", "US", "s", "SU", "SP", "DS", "NEWS", "SA", "F", "SR", "LS", "Z", "C"], "li": ["mi", "liga", "n", "lu", "ki", "lig", "ni", "lim", "kl", "ci", "gi", "ln", "ld", "di", "i", "L", "SI", "ml", " Li", "bi", "dl", "ami", "sl", "ls", "len", "si", "lis", "lists", "lo", "lie", "Li", "pie", "ii", "LI", "list", "loe", "ti", "zi", "see", "bl", "l", "pl", "le", "pi", "line", "lic", "fi"]}}
{"code": "import sys, os, math, bisect, itertools, collections, heapq, queue\\n# from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\\nfrom decimal import Decimal\\nfrom collections import defaultdict, deque\\n\\nsys.setrecursionlimit(10000000)\\n\\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\\nfl = lambda: list(map(float, sys.stdin.buffer.readline().split()))\\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\\n\\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\\nsl = lambda: list(map(str, sys.stdin.buffer.readline().decode().split()))\\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\\n\\nlcm = lambda x, y: (x * y) // math.gcd(x, y)\\n\\nMOD = 10 ** 9 + 7\\nMAX = float('inf')\\n\\n\\ndef main():\\n    if os.getenv(\"LOCAL\"):\\n        sys.stdin = open(\"input.txt\", \"r\")\\n\\n    N, M = il()\\n    A = [iss() for _ in range(N)]\\n    B = [iss() for _ in range(M)]\\n\\n    for i in range(N - M + 1):\\n        for j in range(N - M + 1):\\n            t = i\\n            for b in B:\\n                if A[t][j:j + M] == b:\\n                    t += 1\\n                else:\\n                    break\\n            else:\\n                print('Yes')\\n                exit()\\n    else:\\n        print('No')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "483", "substitutes": {}}
{"code": "L = int(input())\\nans = (L/3) ** 3\\nprint(ans)", "target": "159", "substitutes": {"L": ["M", "N", "DL", "T", "LIN", "SL", "R", "I", "LC", "H", "LA", "LU", "O", "V", "S", "LT", "B", "J", "Li", "G", "ML", "P", "LV", "VL", "LG", "D", "LAN", "l", "LL", "Len", "LE", "LM", "F", "LS", "Z", "LP", "C"], "ans": ["tan", "ANS", "ants", "ians", "beans", "ints", "ana", "names", "cn", "aus", "lets", "san", "aned", "ns", "vals", "anus", "ann", "mas", "man", "anas", "leans", "ins", "wan", "ms", "amps", "ls", "ens", "cons", "mn", "can", "an", "gs", "iann", "nan", "xs", "ran", "aos", "ads", "os", "es", "lan", "AN", "ds"]}}
{"code": "n,m = map(int, input().split())\\n\\ns=[]\\nfor i in range(m):\\n    s.append(list(map(int, input().split())))\\nif n==1:\\n    kaisuu_start=0\\n    kaisuu_stop=10\\nelif n==2:\\n    kaisuu_start=10\\n    kaisuu_stop=100\\nelif n==3:\\n    kaisuu_start=100\\n    kaisuu_stop=1000\\n    \\nfor suuzi in range(kaisuu_start,kaisuu_stop):\\n    hantei=True\\n    suuzi=str(suuzi)\\n    for gyou in range(m):\\n        if suuzi[s[gyou][0]-1]!=str(s[gyou][1]):\\n            hantei=False\\n            continue\\n    if hantei:\\n        print(suuzi)\\n        exit()\\n\\nprint(-1)", "target": "285", "substitutes": {"n": ["N", "x", "net", "nt", "gn", "d", "p", "ln", "name", "norm", "g", "cn", "dn", "w", "sn", "r", "c", "ation", "ns", "note", "nl", "h", "num", "t", "nia", "nb", "nor", "no", "mn", "na", "v", "an", "nc", "nm", "all", "nan", "none", "size", "nw", "nn", "l", "sd", "k", "j", "y", "rn", "nd"], "m": ["tm", "mi", "M", "mr", "dm", "d", "p", "mm", "g", "r", "c", "z", "man", "bm", "o", "gm", "h", "ms", "b", "num", "t", "mc", "mn", "v", "nm", "sm", "q", "l", "k", "y", "j", "mt"], "s": ["a", "sb", "sw", "seconds", "aws", "services", "ports", "js", "d", "p", "spec", "eds", "g", "r", "w", "c", "ts", "south", "ns", "rs", "tests", "ins", "h", "ms", "ls", "abs", "b", "t", "ss", "S", "parts", "strings", "v", "gs", "e", "steps", "ws", "eps", "sv", "xs", "csv", "sts", "l", "vs", "cs", "os", "stats", "qs", "ds", "ps", "bs"], "i": ["mi", "ki", "xi", "ia", "ie", "ci", "gi", "di", "ai", "I", "ju", "o", "si", "li", "ii", "ji", "ti", "im", "it", "zi", "ini", "pi", "u", "y", "iu"], "kaisuu_start": ["kaiscu_end", "kaisuv_start", "kaisuu_pre", "kaisuv_end", "kaisuu_size", "kaiscu_origin", "kaisuu_origin", "kaiscu_group", "kaisuu8start", "kaiscu_start", "kaisuu8group", "kaiscu_stop", "kaisuu_end", "kaisuu_group", "kaiscu_pre", "kaisuu8pre", "kaiscu_part", "kaisuv_stop", "kaiscu_size", "kaisuu_part", "kaisuu_type", "kaisuv_type"], "kaisuu_stop": ["kaisuu_target", "kaisuu_key", "kaiscu_end", "kaiscu_limit", "kaisuu_skip", "kaiscu_target", "kaisuu__end", "kaiscu_start", "kaiscu_skip", "kaisuu__cut", "kaisuu__limit", "kaisuu_cut", "kaiscu_stop", "kaisuu__stop", "kaiscu_key", "kaisuu_end", "kaisuu_limit", "kaiscu_cut"], "suuzi": ["desuzli", "suuumii", "suuze", "suzesii", "Suozie", "fuuchini", "suuzie", "suuzini", "suuzli", "suuzpi", "suenzii", "fuuziu", "Suoziu", "suuchiu", "suzesiu", "suujI", "suuidi", "desuje", "Suuzii", "fuuzii", "suozpi", "desujli", "sutzi", "fuzesii", "suuidii", "suuidie", "sutzI", "desuze", "suenzini", "suudis", "fuuzini", "suuumiu", "fuuchii", "fuzesi", "suoziu", "suozi", "suujis", "suuumini", "fuuchi", "suzypi", "suenziu", "suzesi", "suzyi", "Suujis", "suuchi", "Suozii", "desuzi", "fuzesxi", "suzyli", "suuziu", "suucciu", "suenzi", "suucci", "Suuziu", "suuzI", "suozli", "suujli", "SuujI", "fuzesiu", "suuje", "Suozi", "sutzis", "suujpi", "suuzxi", "suuccxi", "desujpi", "Suuzpi", "SuuzI", "suenzie", "suuzii", "suoze", "suuchii", "desuzpi", "suozii", "Suujpi", "suuumi", "desuji", "Suuzi", "Suuji", "sutzpi", "fuuzxi", "suudI", "suuccii", "fuuzi", "suudi", "fuuchiu", "suudpi", "Suuzis", "suozxi", "suuchini", "suzye", "Suuzie", "suzesxi", "suuji", "suuidiu", "suuzis", "suozie"], "hantei": ["hiaguei", " hicitis", "hantu", "hrotepi", "handeu", "hanti", "hicitu", "handee", "hasee", "hanteo", " hicitu", "hagueli", "hrotei", "hroteis", " hanteo", "hantasi", "haseasi", " hantee", "hianteasi", "haserpi", "haguei", " hanteis", "hanteu", "hante", "hiantei", "hiagueasi", "hiantee", " hazeu", "hiagueli", " hazeo", " hantepi", "hicitpi", "haseris", "haguee", "hazei", "hantee", "haseli", "hantepi", "hanteli", "hanteasi", "hagueasi", " hazei", "hroteu", "hiaguee", "hazee", " hicitpi", "hicitis", " hanteu", " hazee", "hazeo", "handei", " hiciti", "haseri", "hiciti", "hazeu", "hianteli", "haseru", "hantli", "hanteis", "hanto", "hasei", "handeo"], "gyou": ["geroul", "uyoud", "gyove", " gyoud", "vyous", "kyui", "kyou", "uyou", "gyous", "gerous", "gyoo", "gyui", "Gyoo", "Gyoud", "fyoo", "ghui", "fyoul", "kyoul", "ghoul", "gerui", "ghou", "vyoo", "ghous", "vyoul", "fyou", "gyoul", "fyous", "kyous", "uyoul", " gyove", "gerou", "uyous", "Gyou", " gyoo", "Gyove", "uyoo", "uyove", "gyoud", "vyou"]}}
{"code": "def sep(Nf, Mf):\\n    mm = [[] for _ in range(9)]\\n    for m in range(len(Nf)):\\n        for i in range(9):\\n            if Nf[m] == i+1:\\n                mm[i].append(Mf[m])\\n    return mm\\n\\n\\ndef ssort(L, N, M):\\n    for i in range(len(N)-1):\\n        x = N[i+1:].index(min(N[i+1:])) + i + 1\\n        if N[i] > N[x]:\\n            L[i], L[x] = L[x], L[i]\\n            N[i], N[x] = N[x], N[i]\\n            M[i], M[x] = M[x], M[i]\\n\\n\\ndef bsort(L, N, M):\\n    for i in range(len(N)-1):\\n        for j in range(len(N)-1-i):\\n            if N[j] > N[j+1]:\\n                L[j], L[j+1] = L[j+1], L[j]\\n                N[j], N[j+1] = N[j+1], N[j]\\n                M[j], M[j+1] = M[j+1], M[j]\\n\\n\\nn = int(input())\\nL = list(input().split())\\nN = [int(i[1]) for i in L]\\nM = [i[0] for i in L]\\nmarks = ['S', 'H', 'C' ,'D']\\nLb, Nb, Mb = L[:], N[:], M[:]\\nbsort(Lb, Nb, Mb)\\nprint(' '.join(Lb))\\nif sep(N, M) == sep(Nb, Mb):\\n    print('Stable')\\nelse:\\n    print('Not stable')\\n\\nLs, Ns, Ms = L[:], N[:], M[:]\\nssort(Ls, Ns, Ms)\\nprint(' '.join(Ls))\\nif sep(N, M) == sep(Ns, Ms):\\n    print('Stable')\\nelse:\\n    print('Not stable')\\n", "target": "30", "substitutes": {"Nf": ["Fe", "JF", "Lf", "Nbf", "Ne", "Jm", "Mbf", "Lfm", "Mc", "Ff", "Me", "Jf", "NNF", " Nfc", " Ne", "Nfe", " Nbf", "NNf", "Lbf", "Nfm", "Fm", "Nfc", "Nc", "Nm", "NF", "LF", "NNm", " Nc", "Jfe", "Mm", "Mfc", "Ffc", " Nfm", "NNfe", " Nm", "Lc", "Lfe", "Mfm", "Lm"], "Mf": ["MNc", "Lf", "Mc", "Mfs", "MNm", "Pm", "Mv", "Nv", "Pf", "Nc", "Nm", " Mv", "Lfs", "MNb", "Pb", "Mm", " Mfs", "Pc", " Mm", "Lm", "Nfs", "Lv", "MNf"], "mm": ["tm", "mi", "json", "nt", "pm", "um", "dm", "mp", "fm", "mmm", "mos", "ma", "ml", "dl", "my", "mb", "ms", "MM", "df", "multi", "mc", "tab", "mn", "memory", "mma", "list", "MP", "mop", "mx", "mys", " MM", "pi", "dd", "mem", "mon", "tmp", "mat", "md", "mt", "cm", "pp", "mmmm"], "_": ["ex", "ct", "ate", "ation", "ml", "ange", "ix", "let", "val", "f", "pt", "an", "int", "all", "ity", "l"], "m": ["tm", "mi", "sym", "mr", "me", "mid", "um", "dm", "p", "fm", "ai", "c", "ma", "em", "bm", "o", "gm", "ms", "f", "b", "t", "mc", "mac", "mn", "li", "an", "v", "nm", "om", "sm", "vm", "im", "l", "mem", "id", "y", "md", "mt", "cm", "month", "ym"], "i": ["a", "json", "ki", "p", "c", "z", "Mi", "ix", "ind", "multi", "ri", "v", "e", "ti", "oi", "it", "ini", "\u0438", "phi", "id", "k", "init", "ia", "ni", "ai", "I", "iter", "my", "qi", "iti", "ic", "o", "si", "ion", "ei", "im", "s", "zi", "l", "u", "ij", "ci", "gi", "d", "imm", "ip", "h", "io", "ii", "ui", "pi", "il", "index", "ik", "mi", "xi", "ex", "ie", "ios", "cli", "di", "ma", "ami", "info", "f", "b", "t", "li", "ji", "ori", "int", "item", "y", "iu", "hi"], "L": ["dL", "NL", "DL", "List", "T", "LIN", "ln", "PL", "BL", "HL", "SL", "Sl", "R", "I", "LC", "Layout", "AL", "X", "TL", "LR", "H", "W", "LU", "LD", "V", "OL", "S", "FL", "LT", " l", "B", "J", "Li", "ML", "G", "LI", "Long", "P", "A", "RL", "LV", "LG", "Lu", "D", "GL", "Left", "l", "CL", "LL", "XL", "LE", "LM", "F", "Lock", "LS", "LP", "EL", "C"], "N": ["CNN", "NS", "Ne", "T", "NC", "X", "R", "NM", "CN", "NT", "NF", "V", "TN", "B", "Long", "D", "NB", "ON", "Y", "Names", "Note", "I", "Not", "W", "Node", "RN", "ND", "P", "NPR", "Net", "Nor", "Mon", "MN", "FN", "C", "NL", "NA", "NOR", "H", "O", "G", "DN", "Ren", "Sn", "F", "NG", "SN", "Name", "NRS", "NV", "GN", "NI", "Na", "NN", "And", "NP", "NR", "NH", "No", "NO", "S", "NE", "J", "NAT", "Num", "Network", "NJ", "Ni", "K", "AN", "UN", "Ex"], "M": ["OM", "T", "HM", "MB", "CM", "Mc", "Me", "GM", "R", "I", "X", "Map", "NM", "MX", "JM", "RM", "EM", "Memory", "Mi", "H", "MM", "MC", "V", "MD", "IM", "MG", "S", "MAN", "MODE", "B", "J", "ML", "G", "P", "Mac", "MP", "BM", "MA", "E", "ME", "MS", "D", "DM", "AM", "Y", "TM", "Mon", "MI", "MR", "MT", "MN", "FM", "Mem", "LM", "F", "MF", "Mom", "Man", "PM", "C"], "x": ["wx", "xi", "ex", "sw", "ci", "xe", "p", "ux", "xc", "test", "di", "X", "xa", "rx", "ext", "ai", "ox", "z", "full", "xt", "hex", "xxx", "ic", "ix", "ip", "h", "tx", "ax", "t", "io", "mac", "v", "at", "xy", "ph", "xs", "mx", "com", "co", "dx", "xx", "l", "pi", "lat", "yx", "id", "y", "index", "px", "lex", "xp", "xf"], "j": ["next", "json", "jack", "uj", "ja", "str", "aj", "js", "d", "p", "name", "ret", "g", "di", "jp", "job", "r", "oj", "jc", "z", "jj", "bi", "old", "note", "by", "o", "res", "h", "pr", "jl", "dt", "br", "b", "fr", "jac", "rel", "je", "pt", "J", "dr", "bj", "out", "ji", "kj", "v", "key", "exp", "jas", "row", "obj", "adj", "it", "jump", "hr", "boot", "q", "l", "user", "dj", "y", "jit", "er", "ij", "k", "last"], "n": ["a", "nt", "ln", "d", "p", "g", "c", "z", "ns", "o", "nl", "f", "b", "num", "fn", "t", "len", "nm", "s", "nu", "l", "u", "y"], "marks": ["keys", "lig", "label", "gc", "names", "di", "Di", "NP", "SI", "Mark", "kind", "ind", " markings", "si", " MARK", "e", "xs", "pres", "bl", "types", "k", "Names", "marked", "mark", "ds", "ps", "bs"], "Lb": ["Lbb", "Longbb", "Ldb", "Lbi", "LLb", " Lbi", "LLdb", "Nbi", " Ln", "Ndb", "Clnb", "LUn", "CLlb", "Clb", "Lnb", "Nn", "Nlb", "CLbl", "Clbl", "Cllb", "Llb", "LLlb", "Lbl", "Nbb", "Ln", "CLb", "Bnb", "LUcb", "LUbi", "Blb", "LLbb", " Lcb", "Bb", "Bbl", "Longlb", "Longb", "Lcb", "Ncb", "LUb", "Longdb", "CLnb"], "Nb": ["Lrb", "Ir", "MGb", " Nnb", " Nbl", " nGb", "NNrb", "NMbl", "Mwb", "Numb", "Mn", " nn", " NGb", " Nn", "Nbl", "Lr", "Ine", " Nwb", "Nn", "Numnb", "Nrb", "NGb", "Irb", "NNb", "Numbl", " nwb", "Ib", "Nnb", "Nwb", " nb", "NNne", "Nr", "Lne", " Nr", "NMr", "Nne", "NMnb", "Numr", "NMb", "NNr"], "Mb": ["Nbh", "Mancb", "Mnb", "Modb", " Mnb", " Mcb", "Mn", "Mann", "Nv", "Tcb", "Mg", "Nn", " Mv", "Nbb", "Mbb", "Manbh", "Nnb", " Mbb", "Manb", "Ng", "Modcb", "Mbh", "Tbb", "Tv", " Mg", " Mn", "Modg", "Ncb", " Mbh", "Mv", "Modnb", "Tb", "Mcb"], "Ls": [" Lns", "SLns", "LLs", "LLls", "LLb", "Longn", "Lls", "Clns", "Cls", "CLns", " Ln", "Lgs", "Longxs", "Nn", "Clls", "CLls", "CLgs", "Fls", "Clgs", "Ln", "CLs", "Nxs", "Lxs", "Longns", "SLls", "SLs", "Longs", "Nls", " Lxs", "SLb", "Nns", "LLns", "Fns", "Fs", "Lns", "Fgs"], "Ns": ["NRS", "NS", "Es", "Ne", "Win", "Sys", "His", "Ws", "Els", "Its", "Hundreds", "Gs", "ns", "Rs", "Cs", "Vs", "Works", "As", "GS", "Ins", "S", "Us", "Js", "Os", " ns", "Ts", "Is", "MS", "Ds", "Sn", "Mrs", "Ps", "Lens", "Ni", "Names", "LS", "Cos", "News"], "Ms": ["NS", "Mc", "His", "Em", "Ws", "Me", "Mu", "Men", "Mill", "Gs", "Sec", "ns", "Rs", "Cs", "mas", " ms", "Vs", "ms", "Magn", "Ins", "Mos", "Mas", "Maps", "S", "Des", "Us", "Mac", "Js", "Os", "MS", "Ds", "Mrs", "Mr", "Ni", "Meg", "LS", "Mp"]}}
{"code": "class union:\\n  def __init__(self, box):\\n    self.r = []\\n    for i in range(box):\\n      self.r.append(-1)\\n    \\n  def root(self, x):\\n    if self.r[x] < 0:\\n      return x\\n    self.r[x] = self.root(self.r[x])\\n    return self.r[x]\\n\\n  def add(self, a):\\n    a[0] -= 1\\n    a[1] -= 1\\n    a[0] = self.root(a[0])\\n    a[1] = self.root(a[1])\\n    if a[0] == a[1]:\\n      return False\\n    if self.r[a[0]] > self.r[a[1]]:\\n      a[0], a[1] = a[1], a[0]\\n    self.r[a[0]] += self.r[a[1]]\\n    self.r[a[1]] = a[0]\\n    return True\\n  \\n  def size(self, x):\\n    return -self.r[x]\\n\\nn, m = map(int, input().split())\\nuf = union(n)\\nans = 0\\nfor i in range(m):\\n  uf.add(list(map(int, input().split())))\\n\\nfor i in range(n):\\n  ans = max(ans, uf.size(i))\\nprint(ans)\\n", "target": "602", "substitutes": {"self": ["find", "body", "json", "cmp", "instance", "wn", "context", "p", "table", "mp", "left", "dev", "log", "ind", "config", "empty", "close", "private", "your", "obj", "compl", "wrapper", "app", "co", "new", "q", "book", "reader", "dd", "np", "se", "writer", "history", "pkg", "sw", "before", "sh", "me", "local", "ln", "util", "get", "own", "this", "deep", "replace", "pre", "closure", "sect", "full", "my", "prefix", "help", "parent", "shape", "py", "ral", "results", "also", "filter", "console", "builder", "s", "debug", "print", "handle", "patch", "tmp", "cl", "user", "error", "ng", "python", "nd", "thus", "next", "client", "complete", "nt", "lib", "db", "spec", "raw", "txt", "sys", "ref", "subject", "make", "round", "xml", "graph", "host", "h", "gh", "form", "remote", "all", "github", "small", "cache", "hw", "partial", "public", "so", "req", "high", "os", "fields", "pp", "Self", "th", "select", "view", "w", "rem", "diff", "details", "expr", "rs", "info", "ren", "rec", "ls", "df", "rel", "agg", "news", "bb", "parse", "pull", "support", "final", "ws", "row", "work", "au", "proc", "_", "network", "comp"], "box": ["hold", "max", "area", "loop", "BOX", "Box", "zero", "scale", "ox", "set", "boxes", "ico", "window", "bo", "shape", "ix", "boxing", "ip", "cv", "ax", "grid", "border", "row", "axis", "im", "co", "new", "rect", "div", "dim", "base", "ram", "bound", " Box", "root", "init"], "r": ["mr", "sr", "rr", "ro", "err", "rg", "d", "p", "g", "arr", "R", "rc", "re", "rx", "w", "radius", "c", "rd", "rh", "rs", "rb", "rw", "rm", "res", "o", "h", "rec", "result", "pr", "vr", "rar", "right", "b", "br", "f", "t", "term", "rl", "v", "e", "cache", "gr", "s", "rt", "rect", "q", "l", "ar", "u", "reg", "er", "y", "data", "attr", "range", "root", "rad"], "i": ["mi", "ki", "xi", "ia", "ci", "gi", "cli", "p", " j", "di", "ai", "I", "iter", "c", "bi", "ic", "o", "ix", "ip", "ind", "f", "b", "multi", "io", "si", "li", "ii", "v", "ei", "e", "ti", "im", "it", "ini", "zi", "ui", "l", "pi", "il", "k", "y", "j", "iu", "hi"], "x": ["wx", "any", "ex", "xi", "xe", "point", "p", "xes", "ux", "xc", "ct", "X", "__", "rx", "value", "ext", "c", "ox", "z", "batch", "xxxx", "el", "xt", "ctx", "hex", "xxx", "ix", "tx", "ax", "f", "xd", "t", "unknown", "key", "v", "e", "null", "fx", "row", "xy", "xs", "none", "co", "dx", "new", "one", "xx", "l", "cl", "yx", "lex", "y", "px", "index", "xp", "xf"], "a": ["era", "p", "c", "set", "el", "pa", "aaa", "fa", "br", "part", "na", "att", "e", "obj", "sa", "app", "data", "ba", "any", "ia", "to", "aff", "g", "ai", "ata", "eas", "o", "da", "another", "s", "sha", "oa", "u", "sta", "ae", "ac", "ga", "aux", "val", "alpha", "parts", "apa", "an", "all", "A", "ap", "ao", "ed", "aa", "ar", "es", "ab", "ach", "va", "acc", "zero", "w", "ma", "ea", "la", "act", "go", "f", "b", "t", "args", "out", "at", "au", "am", "j", "er", "area", "ca"], "n": ["nr", "N", "nt", "gn", "d", "p", "en", "ne", "g", "cn", "sn", "c", "ns", "o", "nl", "h", "ms", "b", "num", "t", "nb", "mn", "na", "an", "v", "nc", "nm", "un", "s", "nan", "nu", "nn", "l", "np", "u", "j", "k", "nd"], "m": ["tm", "mi", "km", "M", "mr", "mod", "d", "p", "mm", "g", "c", "mos", "ma", "man", "mas", "o", "gm", "h", "ms", "f", "b", "num", "mis", "t", "mc", "mn", "e", "s", "mx", "size", "l", "md", "mt", "cm"], "uf": ["ut", "lu", "lf", "bf", "um", "uch", "ux", "ul", "ue", "fol", "aus", "us", "pb", "upp", "ums", "bo", "uff", "ull", "uph", "\u00fc", "pu", "buf", "f", "uh", "ef", "gb", "uc", "mn", "fo", "ud", "eu", "ff", "rf", "fu", "utf", "af", "tf", "ui", "au", "cu", "buff", "fg", "u", "du", "ub", "ush", "urg", "UF"], "ans": ["ars", "ANS", "ants", "ats", "outs", "aus", "asks", "ros", "aned", "ates", "ns", "ann", "rans", "rs", "ums", "anas", "ks", "scan", "ins", "offs", "ons", "ms", "amps", "angs", "ls", "ents", "ens", "cas", "orders", "uns", "an", "posts", "anks", "aps", "oss", "anes", "ups", "s", "xs", "uploads", "ran", "aos", "arts", "os", "es", "stats", "lan", "aver", "orts"]}}
{"code": "import fractions\\nn=int(input())\\na=list(map(int, input().split()))\\nans=a[0]\\nfor i in range(1,n):\\n    ans = ans * a[i] // fractions.gcd(ans, a[i])\\ntmp=0\\nfor j in range(n):\\n  tmp+=(ans-1)%a[j]\\nprint(tmp)", "target": "519", "substitutes": {"n": ["N", "nt", "ni", "gn", "ln", "d", "p", "ne", "cn", "g", "sn", "r", "c", "w", "z", "m", "ns", "nl", " ng", "f", "num", "count", "t", "nia", "len", "nb", "no", "mn", "na", "an", "nc", "nm", "nan", "nu", "size", "nn", "l", "number", "np", " N", "k", "nd"], "a": ["history", "ia", "sta", "ae", "ac", "ab", "ta", "xa", "span", "c", "ma", "eas", "ga", "aux", "ea", "la", "aaa", "fa", "go", "f", "b", "abs", "isa", "auto", "alpha", "parts", "apa", "an", "att", "all", "list", "A", "obj", "at", "sa", "app", "au", "ed", "aos", "oa", "aa", "am", "es", "data", "array", "area", "ba", "ca", "ao"], "ans": ["ones", "ANS", "ops", "ants", "ians", "ats", "anon", "en", "outs", "ai", "aus", "us", "lines", "sys", "ates", "ns", "vals", "ann", "ums", "rans", "anas", "ks", "offs", "ins", "vers", "ons", "ms", "amps", "ls", "pan", "ents", "abs", "ens", "cas", "anc", "cons", "uns", "can", "an", "posts", "gs", "anes", "terms", "s", "eps", "xs", "cus", "ions", "times", "nas", "aos", "vs", "cs", "es", "os", "ps", "bs"], "i": ["mi", "ki", "xi", "x", "ia", "ci", "gi", "di", "ai", "I", "m", "bi", "ami", "yi", "ic", "ix", "o", "ip", "ind", "io", "si", "ii", "li", "ji", "v", "int", "ti", "im", "it", "ini", "zi", "q", "l", "pi", "index", "y", "ij", "iu", "hi"], "tmp": ["tm", "pkg", "cmp", "perm", "nt", "offset", "db", "beta", "mp", "ret", "test", "td", "tc", "pad", "mut", "prefix", "total", "ctx", "mb", "term", "buf", "t", "gb", "amp", "pretty", "nb", "temp", "out", "tn", "int", "qq", "obj", "emp", "xy", "tt", "cp", "inter", "tf", "tar", "cb", "np", "ott", "etc", "buff", "yy", "vt", "attr", "mk"], "j": ["json", "uj", "ja", "js", "d", "aj", "g", "jp", "job", "jc", "oj", "z", "jj", "note", "bo", "jl", "br", "b", "jac", "t", "J", "ion", "bj", "li", "ji", "kj", "v", "jas", "jump", "q", "dj", "jit", "y", "k", "ij"]}}
{"code": "n = int(input())\\na_l = [ int(input()) for _ in range(n)]\\n\\nl = []\\nr = []\\nl_max = 0\\nr_max = 0\\nfor i in range(n):\\n    l_max = max(l_max, a_l[i])\\n    r_max = max(r_max, a_l[-i-1])\\n    l.append(l_max)\\n    r.append(r_max)\\nfor i in range(n):\\n    if i == 0:\\n        t_l = 0\\n    else:\\n        t_l = l[i-1]\\n    if i == n-1:\\n        t_r = 0\\n    else:\\n        t_r = r[-i-2]\\n    print(max([t_l,t_r]))", "target": "484", "substitutes": {"n": ["a", "N", "x", "net", "nt", "ln", "d", "p", "ne", "g", "sn", "c", "w", "m", "z", "ns", "o", "h", "b", "num", "t", "nia", "len", "nb", "no", "mn", "na", "v", "nc", "s", "nan", "nu", "size", "nn", "number", "np", "pi", "network", "k", "j"], "a_l": ["agri", "z_i", "agrli", " a2g", "a_ll", " a_ll", "a___l", "a_g", " a2i", "a___i", "a___L", " a_ld", "a___g", "a2L", " a2L", "z_nl", "z_li", " a_i", "z_l", "a_li", " a2l", "a_ld", " a_L", "a_i", "a2l", " a_g", "a_L", "agrnl", "a2g", "a_nl", "a2i", "agrl"], "_": ["x", " data", " ind", " t", " the", " j", " k", "I", " name", " num", "ix", " int", " time", " m", " __", " index", " p"], "l": ["a", "lc", "tl", "kl", "ld", "ln", "left", "lb", "L", "ml", "m", "dl", "el", "nl", "sl", "la", "h", "ls", "t", "hl", "lis", "rl", "lo", "lp", "li", "fl", "al", "s", "ell", "lr", "ol", "lock", "ll", "le", "pl", "isl"], "r": ["mr", "sr", "rr", "ro", "err", "rg", "d", "p", "g", "arr", "R", "rc", "re", "rx", "w", "rad", "m", "rh", "rs", "rb", "res", "rm", "h", "pr", "vr", "fr", "b", "right", "t", "dr", "out", "v", "e", "ur", "tr", "rt", "lr", "ar", "u", "range", "cr", "rd"], "l_max": ["ltxbase", "l_cp", "li_key", "li_base", "l_base", " l_sum", "l_key", "li_max", "ltbase", "ltmaximum", "ltax", "ltmax", "l_hd", "le_max", "ltmed", "lb_maximum", "litxmax", "ltxkey", "le_cp", "ltxmax", "litxbase", "l_sum", "litxmed", "lb_hd", "lb_max", "l_med", "l_maximum", "l_min", "lthd", "l_limit", "le_med", "lb_ax", "ltkey", "litxkey", "l_ax", " l_limit", " l_min", "li_med", "ltxmed"], "r_max": ["lr_max", "fr_max", "r67range", "lr67top", "ruffymax", "r_box", "lr67dot", "lr_length", "r_range", "r_top", "fr_end", "r67max", "r_scale", "r_dot", "lr_dot", "lr67max", "r67full", "r5max", "ruffyrange", "fr_scale", "lr_range", "lr_box", "r67top", "r67scale", "ruffylength", "r_min", "r5rest", "fr67full", "fr67end", "rlmin", "l_med", "lr67length", "lr67list", "l_min", "fr_full", "r5med", "r_med", "r67length", "lr67range", "r67dot", "ruffybox", "r_length", "r67list", "rptmax", "r_rest", "lr67box", "r_end", "rlrest", "r5min", "rpttop", "lr_top", "l_rest", "r_list", "r67end", "rlmed", "fr67scale", "lr_list", "rptlist", "r_full", "rlmax", "rptdot", "fr67max", "r67box"], "i": ["a", "mi", "ki", "xi", "x", "ia", "to", "ni", "me", "ite", "ci", "gi", "cli", "on", "g", "di", "ai", "I", "jp", "m", "bi", "yi", "info", "ic", "ix", "o", "ip", "ind", "sp", "t", "ri", "multi", "si", "iu", "li", "ii", "ji", "ei", "e", "v", "ti", "key", "al", "iy", "im", "it", "zi", "ini", "\u0438", "hai", "pi", "ati", "ali", "phi", "id", "u", "j", "y", "index", "ij", "ik", "asi", "iri", "hi", "like"], "t_l": ["j_li", "t_li", "taoothl", "ta_lb", "tckline", "toothlb", "tmmlocal", "totli", "tTheline", "toothlocal", "tckl", "titlecktl", "totlc", "taoothll", "tcktl", "titleckl", "ta_l", "j_lc", "t12lc", "t64li", "title_l", "t_lc", "j_l", "ta_ll", "toothl", "tThel", "titlecklb", "j64la", "t_local", "totla", "tcklb", "t12li", "t64lb", "titleckline", "tmml", "t64line", "t12l", "toothll", "j64lc", "t64la", "j_la", "title_lb", "tThelb", "j64li", "t64tl", "t12la", "totl", "tmmll", "tThetl", "t_tl", "t64lc", "ta_local", "j64l", "t64l", "title_tl", "taoothlb", "taoothlocal", "t_line", "t_ll", "title_line", "t_la", "tmmlb", "t_lb"], "t_r": ["t64dr", "l_rr", "t2re", "t64rr", "t2r", "t__re", "t2n", "rt__n", "t_n", "t_rd", "ct64rd", "ct_r", "ct64r", "t_re", "rt__re", "rt__dr", "t64range", "t64rd", "t64re", "t___ro", "t__r", "t__n", "t_rr", "ct_rd", "l_l", "t_m", "rt_r", "t64n", "t___rd", "t__dr", "t64ro", "t64r", "t_ro", "l_m", "rt_dr", "ct64range", "t_dr", "t2dr", "ct_range", "t64l", "t_range", "t___range", "l_r", "rt_n", "rt__r", "t64m", "rt_re", "ct_ro", "ct64ro", "t___r"]}}
{"code": "A,B = map(int,input().split())\\nprint(0 if A<B else 10)", "target": "414", "substitutes": {"A": ["a", "GA", "M", "N", "There", "An", "IA", "AH", "X", "mA", "ESS", "L", "NA", "AL", "AV", "Area", "AB", "AA", "LA", "As", "V", "S", "Could", "Val", "This", "HA", "P", "AP", "CA", "At", "AY", "You", "D", "AF", "SA", "ACT", "AC", "BA", "C"], "B": ["M", "N", "BI", "T", "VB", "R", "I", "X", "L", "IB", "AB", "BER", "H", "V", "S", "BC", "J", "Q", "BR", "G", "P", "BB", "E", "Bern", "TB", "D", "NB", "Y", "BO", "BF", "DB", "F", "BA", "Z", "C"]}}
{"code": "a, b, n = [int(x) for x in input().split()]\\ndef f(x):\\n  return a*x//b - a *(x//b)\\nprint(f(min(b - 1, n)))\\n", "target": "407", "substitutes": {"a": ["ia", "sta", "ab", "aff", " an", "p", "va", "ai", "i", "w", "c", "ma", "m", " A", " na", " ax", "o", "pa", "f", "t", "auto", "alpha", " ba", "da", "an", " c", "A", "al", "at", "sa", "af", " fa", " alpha", "au", "aa", "l", "am", "ar", " p", "j", "y", "area", "ba", " at", "ac"], "b": ["bis", "body", "sb", "to", "ab", "d", "p", "db", "beta", "g", "ib", "i", "r", "w", "c", "m", "z", "bi", "fb", "rb", "o", "h", "f", "num", "bc", "gb", "t", "br", "nb", "B", "bb", "v", "e", "s", "eb", "base", "cb", "l", "bp", "j", "y", "bound", "bs", "ba"], "n": ["N", "nt", "ni", "ln", "d", "p", "cn", "g", "i", "sn", "r", "c", "w", "m", "z", "ns", "o", "nl", "h", "f", "num", "t", "nb", "no", "mn", "v", "nc", "nm", "nan", "nu", "nn", "l", "q", "j", "y", "k"], "x": ["wx", "xi", "ex", "xe", "p", "xes", "ux", "xc", "ct", "xa", "X", "i", "rx", "c", "ox", "z", "xt", " ax", "ctx", "ix", "tx", "ax", "f", "xd", "t", "xxxxxxxx", "check", "v", "e", "an", "fx", "xy", "xs", "mx", "xb", "dx", "inx", "xx", "u", "y", "px", "xp", "xf"]}}
{"code": "c=[0]*5\\nfor i in range(3):\\n  a,b=map(int,input().split())\\n  c[a]+=1\\n  c[b]+=1\\nif 3 in c:\\n  print(\"NO\")\\nelse:\\n  print(\"YES\")", "target": "662", "substitutes": {"c": ["ctrl", "ce", "lc", "n", "con", "x", "content", "err", "ci", "gc", "d", "p", "g", "xc", "ct", "rc", "arc", "w", "r", "chain", "tc", "m", "z", "ic", "o", "h", "case", "f", "config", "bc", "t", "dc", "mc", "count", "valid", "conf", "out", "v", "e", "nc", "all", "cache", "cos", "cp", "csv", "cc", "abc", "co", "cu", "cb", "l", "yes", "cs", "k", "y", "cm", "cr", "cf", "ca", "C", "ac"], "i": [" I", " ii", "iii", "n", "x", "ia", "\u00ed", "ci", "p", " j", " k", "I", "r", "ix", "li", "ii", "e", "ti", "it", "id", "j"], "a": ["x", "sta", "ae", "ac", "ab", "aj", "p", "d", "ach", "va", "ak", "r", "\u00e1", "ga", "o", "ea", "la", "admin", "f", "an", "e", "A", "at", "af", "sa", "ao", "s", "app", "aa", "l", "ar", "ka", "j", "ba", "ca"], "b": ["bis", "n", "sb", "x", "ab", "d", "p", "g", "ib", "r", "m", "z", "bi", "fb", "rb", "o", "mb", "be", "f", "bc", "t", "nb", "B", "bb", "v", "e", "l", "u", "j", "y", "bs", "ba"]}}
{"code": "A,B,X = map(int, input().split())\\nprint(\"YES\" if X-A<=B and A<=X else \"NO\")\\n", "target": "488", "substitutes": {"A": ["a", "GA", "N", "T", "An", "IA", "AH", "AU", "AT", "R", "I", "L", "NA", "AL", "ACC", "And", "AB", "AE", "H", "AA", "LA", "As", "V", "AR", "AS", "S", "G", "This", "P", "HA", "AP", "CA", "At", "E", "D", "AF", "Array", "Y", "SA", "K", "AC", "AN", "BA", "F", "C"], "B": ["BI", "M", "N", "CB", "T", "MB", "VB", "OB", "Bs", "Rob", "SB", "I", "L", "IB", "AB", "V", "QB", "b", "BE", "BC", "J", "Q", "GB", "WB", "G", "BB", "USB", "E", "Bern", "D", "NB", "EB", "Y", "BO", "BF", "DB", "F", "BA", "Z", "BY", "C"], "X": ["M", "IX", "N", "x", "T", "TX", "I", "EX", "L", "R", "UX", "OX", "H", "AA", "XY", "V", "XP", "S", "DX", "J", "Q", "G", "P", "E", "XX", "D", "XT", "XXX", "Y", "XL", "U", "K", "F", "Z", "C"]}}
{"code": "N, *SP = open(0).read().split()\\nsp = sorted((s, -int(p), i) for i, (s, p) in enumerate(zip(*[iter(SP)] * 2), 1))\\n[print(i) for _, _, i in sp]\\n", "target": "185", "substitutes": {"N": ["M", "n", "NS", "T", "NC", "Ns", "R", "I", "X", "L", "NP", "SI", "NR", "O", "V", "S", "B", "J", "P", "Num", "E", "Sn", "D", "Y", "Size", "Ni", "F", "Z", "C"], "SP": ["STR", "INT", "SF", "IN", "IP", "SS", "TP", "SL", "SB", "OSP", "SO", "CAP", "NP", "SI", "SM", "SPA", "SQL", "FP", "BP", "S", "SW", "DP", "SK", "SC", "P", "SE", "MP", "PP", "GP", "PF", "ST", "RIP", "SR", "LP", "Sp", "AP"], "sp": ["sw", "osp", "ipp", "space", "spl", "split", "mp", "jp", "sf", "span", "sn", "set", "xml", "bsp", "sl", "tp", "ip", "snap", "sch", "isp", "si", "args", "spe", "ap", "sm", "sv", "esp", "csv", "pl", "tmp", "se", "sk", "pol", "pp", "stack", "ps", "zip", "Sp"], "s": ["n", "sb", "su", "str", "ats", "space", "js", "g", "r", "sys", "c", "ts", "m", "z", "ns", "rs", "ins", "sl", "ls", "b", "t", "ss", "S", "si", "sc", "v", "gs", "sq", "string", "sa", "xs", "sv", "l", "cs", "os", "ds", "ps"], "p": ["n", "x", "d", "pc", "g", "vp", "jp", "r", "c", "m", "fp", "o", "tp", "pa", "ip", "f", "b", "t", "part", "pt", "lp", "pid", "v", "P", "e", "cp", "dp", "q", "l", "pi", "pl", "j", "pp", "ps"], "i": ["a", "mi", "n", "xi", "x", "ci", "g", "di", "ai", "I", "iter", "r", "c", "m", "z", "bi", "yi", "qi", "ic", "o", "ix", "ip", "f", "b", "t", "io", "si", "li", "ii", "v", "e", "int", "ti", "it", "zi", "l", "pi", "phi", "u", "id", "j", "index", "y", "ij", "iu"], "_": ["n", "x", "self", "T", "name", "I", "m", "z", "o", "ix", "tp", "ip", "h", "val", "t", "len", "key", "out", "P", "int", "v", "msg", "l", "id", "j", "k", "ik"]}}
{"code": "from operator import mul\\nfrom functools import reduce\\nfrom collections import Counter \\nfrom itertools import accumulate\\n\\ndef comb(n, r):\\n    r = min(r, n - r)\\n    numer = reduce(mul, range(n, n - r, -1), 1)\\n    denom = reduce(mul, range(1, r + 1), 1)\\n    return numer // denom\\n\\nn,a,b = map(int, input().split())\\nv = list(map(int, input().split()))\\nc = Counter(v)\\nkeys = sorted(c.keys(), reverse=True)\\nacc = [0] + list(accumulate([c[k] for k in keys]))\\ncosts = [0] + list(accumulate([c[k]*k for k in keys]))\\n\\nd = []\\nfor lim in range(a,b+1):\\n    for i,k in enumerate(keys):\\n        if acc[i+1] >= lim:\\n            d.append((costs[i] + (lim - acc[i]) * k, lim, comb(c[k], lim - acc[i])))\\n            break\\ne = sorted([[x[0] / x[1],x[2]] for x in d], reverse=True)\\ncnt = 0\\nmx = e[0][0]\\ni =0\\nwhile i < len(e) and mx <= e[i][0]:\\n    cnt += e[i][1]\\n    i += 1\\n\\nprint('{:.8f}'.format(mx))\\nprint(cnt)\\n", "target": "345", "substitutes": {"n": ["nr", "N", "max", "net", "nt", "p", "gn", "name", "ne", "cn", "g", "dn", "re", "w", "m", "ns", "min", "o", "h", "num", "t", "nb", "no", "nor", "mn", " l", "na", "nc", "s", "rt", "nu", "nn", "l", "number", "np", "ll", "q", "u", "j", "rn", "range", "y"], "r": ["rid", "nr", "mr", "sr", "rr", "ro", "rg", "p", "g", "R", "rc", "re", "rad", "w", "radius", "m", "rem", "rs", "rb", "res", "rm", "h", "rec", "rar", "right", "num", "t", "dr", "rt", "q", "l", "ar", "u", "reg", "range", "rn", "j", "cr", "rd"], "numer": ["numeric", "enom", "nom", "anumer", "cnumer", "cnum", "cnom", " num", "cnumeric", " number", "enumeric", " numeric", "num", "Numeric", "anumeric", "enumer", " nom", "Num", "Nom", "Numer", "enumber", "number", "anom", "anumber"], "denom": ["Denum", "monoms", "derom", "denoms", "denomin", "deromin", "denorm", "denum", "monom", "deroms", " denomin", "derot", " denoms", "Denomin", "denot", "Denom", "derorm", "monorm", " denum", " denot", "derum", " denorm", "Denot", "monum"], "a": ["ae", "ab", "ta", "p", "ai", "w", "m", "o", "pa", "aaa", "act", "ax", "t", "na", "an", "A", "al", "at", "s", "sa", "oa", "aa", "l", "am", "ar", "j", "y", "ba", "ac"], "b": ["ab", "p", "db", "g", "ib", "m", "z", "bi", "ble", "rb", "o", "h", "be", "f", "bc", "t", "nb", "B", "bb", "eb", "l", "j", "y", "bs", "ba"], "v": ["qv", "vv", "p", "vi", "g", "vp", "va", "w", "uv", "m", "z", "vals", "ev", "o", "values", "h", "vr", "V", "f", "vc", "t", "nv", "lv", "s", "sv", "q", "vs", "l", "u", "j", "vt", "y"], "c": ["ctrl", "ce", "lc", "con", "cmp", "ci", "gc", "p", "cd", "cn", "xc", "g", "ct", "rc", "chain", "m", "fc", "col", "cur", "cv", "enc", "config", "dc", "mc", "conf", "sc", "cache", "cos", "cp", "ch", "cc", "com", "co", "cu", "coll", "cb", "etc", "cl", "l", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "keys": ["kes", "apps", "ys", "ops", "ians", "ats", "actions", "ics", "codes", "names", "banks", "eds", "cells", "where", "mu", "workers", "tags", "ews", "lines", "items", "sels", "ts", "ates", "vals", "ns", "points", "rs", "ks", "files", "checks", "ties", "kw", "values", "ms", "amps", "inks", "ids", "days", "ps", "weights", "lists", "its", "key", "ites", "strings", "headers", "gs", "params", " Keys", "s", "xs", "times", "phis", "atts", "bes", "cases", "vs", "sets", "cats", "rows", "types", "sections", "fields", "groups", "stats", "qs", "es", "j", "bs", "Keys", "vers"], "acc": ["con", "conn", "cmp", "perm", "sum", "gc", "cont", "asc", "unc", "ang", "arr", "ACC", "iter", "inc", "cell", "inv", "sec", "eff", "rec", "ind", "abs", "ctr", "count", "agg", "fac", "mc", "cum", "cons", "ord", "conf", "sc", "att", "exp", "cache", "adj", "cc", "com", "Acc", "app", "gain", "cu", "cats", "reg", "attr", "comp", "cost", "ag", "ac"], "k": ["ck", "km", "ki", "ek", "uk", "th", "kr", "kh", "kl", "ijk", "perm", "kin", "p", "spec", "g", "kar", "ang", "ak", "ke", "w", "z", "m", "ks", "ic", "o", "kw", "ko", "kind", "h", "f", "tk", "t", "kok", "key", "kj", "ok", "s", "it", "cc", "ikk", "ku", "kat", "q", "kt", "wk", "u", "kk", "id", "sk", "kan", "K", "ik", "j", "kg", "ka", "stud", "mk", "unk", "ac"], "costs": ["Costes", " costsns", "conss", " costsps", "Costps", " costps", "passrs", "passcs", "Costcs", "conscs", "Costts", "Costrs", "Costns", "costes", " coststs", "costns", "costts", "passes", "costrs", "costcs", "conses", " costns", " costts", "Costs", "costps", " costss", "passs", "consrs"], "d": ["fd", "p", "dm", "dds", "db", "cd", "g", "di", "td", "gd", "dh", "w", "daily", "m", "bd", "z", "o", "h", "dt", "done", "f", "days", "t", "da", "pd", "de", "ad", "des", "s", "dp", "dx", "D", "dis", "l", "dd", "sd", "dict", "ds", "nd"], "lim": ["loc", "max", "cmp", "perm", "kl", "mid", "ac", "imp", "mu", "mm", "dir", "where", "ul", "g", "iter", "cell", "scale", "w", "Lim", "m", "inv", "limited", "Limit", "cap", "kw", "log", "val", "ind", "ax", "limit", "limits", "sp", "mc", "agg", "marg", "cond", "len", "uc", "lo", "li", "pos", "lam", "exp", "ap", "orig", "im", "mil", "co", "slice", "dis", "ll", "pl", "cl", "l", "mem", "rand", "range", "index", "bound", "attr", "sc"], "i": ["mi", "xi", "ci", "gi", "cli", "p", "di", "ai", "I", "iter", "m", "batch", "bi", "info", "qi", "ic", "ix", "o", "ski", "ip", "ind", "t", "ri", "multi", "io", "si", "sim", "li", "ii", "ji", "ti", "im", "it", "zi", "ini", "ui", "l", "pi", "phi", "u", "id", "index", "j", "y", "ij", "iu", "hi"], "e": ["ec", "ex", "ae", "me", "xe", "en", "ue", "m", "pe", "el", "o", "te", "ea", "be", "ze", "f", "oe", "t", "eu", "ee", "ei", "de", "exp", "E", "s", "eg", "eb", "ed", "et", "eeee", "l", "element", "le", "ent", "se", "es", "ele", "er", "y"], "x": ["wx", "xi", "ex", "xe", "xes", "ux", "xc", "xa", "X", "rx", "ox", "z", "xt", "xxx", "hex", "ctx", "ix", "tx", "ax", "xd", "fx", " xx", "xy", "xs", "dx", "q", "xx", "l", "yx", "lex", "px", "y", "xp", "xf"], "cnt": ["Cpt", "account", "cNT", "acct", "cct", "ccount", "crpt", "acNT", "acnt", "crcount", "count", " cNT", "crct", " ccount", "acpt", " cct", "Cct", "cpt", "crNT", "acount", "crnt", " count", "Cnt", " cpt", "Count", "crount"], "mx": ["tm", "mr", "xi", "ex", "cmp", "pm", "mg", "gc", "mm", "mp", "cn", "hz", "rx", "MX", "ox", "ml", "m", "ma", "ctx", "mind", "ix", "gm", "ms", "tx", "ax", "mc", "mac", "mn", "memory", "mic", "vm", "nz", "xy", "xs", "wm", "xx", "np", "mem", "yx", "px", "md", "mt", "bean", "mk"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 7)\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nN = int(input())\\n\\n\\n# n\u306e\u7d04\u6570\u5217\u6319\\ndef divisor(n):\\n    ass = []\\n    for i in range(1, int(n**0.5)+1):\\n        if n % i == 0:\\n            ass.append(i)\\n            if i**2 == n:\\n                continue\\n            ass.append(n//i)\\n    return ass  # sort\u3055\u308c\u3066\u3044\u306a\u3044\\n\\n\\ndiv_n = divisor(N)\\ndiv_n1 = divisor(N - 1)\\n\\nans = []\\nfor d in div_n:\\n    if d == 1:\\n        continue\\n    n = N\\n    while n % d == 0:\\n        n //= d\\n\\n    if n % d == 1 or n == 1:\\n        ans.append(d)\\n\\nfor d in div_n1:\\n    if d == 1:\\n        continue\\n    if N % d == 0:\\n        nd = N // d\\n        if nd % d == 1 or nd % d == 0:\\n            ans.append(d)\\n    else:\\n        ans.append(d)\\n\\n\\nans = list(set(ans))\\n# print(ans)\\nprint(len(ans))\\n", "target": "462", "substitutes": {"read": ["find", "hold", "load", "select", "d", "p", "write", "run", "get", "sub", "readable", "short", "connect", "iter", "re", "long", "r", "reads", "send", "default", "bind", "ind", "f", "dat", "create", "writ", " Read", "written", "feed", "check", "each", "gets", "orig", "Read", "first", "READ", "skip", "q", "l", "reader", "reading", "roll", "edit", "data", "seek", "text", "rd"], "readline": ["readerblock", "READnumber", "readnumber", "writeLine", "READlines", "writefile", "readerlines", "readernumber", "Readlines", " readblock", "readfile", "loadfile", "readLine", "writelines", "Readfile", "READline", " readnumber", "loadlines", "readblock", "readerline", "writeline", "Readline", "loadLine", "ReadLine", "READblock", "loadline"], "readlines": ["readableonly", "rdlines", "rdelines", "READlines", "scanvalues", "READvalues", "Readlines", "rdrows", "scanlines", "scanonly", "Readelines", "readonly", "readableelines", "rdline", "Readrows", "readelines", "READelines", " readelines", "READonly", "readvalues", " readrows", "scanelines", "readablelines", "Readline", "readrows", "readablevalues"], "N": ["M", "n", "NS", "T", "NL", "IN", "name", "R", "I", "L", "NR", "O", "V", "count", "S", "nb", "B", "Q", "P", "Input", "Num", "E", "Read", "D", "number", "K", "F", "C"]}}
{"code": "N , M = (int(a) for a in input().split())\\nA = list(map(int,input().split()))\\nBC = [[int(a) for a in input().split()] for l in range(M)]\\nA =sorted(A)\\nBC = sorted(BC , key = lambda x: - x[1])\\ns = 0\\n\\nfor i in range(N*M) :\\n    if A[i] < BC[s][1] :\\n        A[i] = BC[s][1]\\n    else : break\\n    BC[s][0] -= 1\\n    if BC [-1][0] == 0 or i == N-1 :\\n        break\\n    if BC[s][0] == 0 :\\n        s += 1\\n\\nprint(sum(A))\\n\\n\\n\\n", "target": "711", "substitutes": {"N": ["CNN", "n", "NS", "T", "NL", "NC", "NI", "NW", "Ns", "R", "I", "NA", "L", "NM", "NN", "NR", "NT", "H", "W", "V", "TN", "No", "NUM", "S", "NE", "B", "J", "P", "Num", "D", "NB", "MN", "Len", "Ni", "K", "F", "AN", "Z", "C"], "M": ["T", "CM", "MU", "R", "I", "JM", "L", "NM", "MX", "m", "Mi", "H", "MM", "O", "V", "MC", "IM", "S", "MAN", "B", "J", "Q", "G", "P", "Multi", "MP", "MS", "D", "MH", "DM", "TM", "Y", "MN", "MI", "MT", "K", "LM", "F", "PM", "C"], "a": ["n", "x", "ae", "ja", "ac", "ta", "p", "aj", "ach", "va", "ai", "xa", "w", "r", "c", "ma", "m", "z", "ata", "ga", "o", "ea", "pa", "la", "aaa", "ada", "f", "b", "t", "wa", "na", "an", "v", "e", "al", "sa", "af", "sha", "aka", "au", "oa", "aa", "am", "ar", "u", "aw", "j", "y", "index", "area", "ba", "ca", "ao"], "A": ["GA", "T", "All", "API", "An", "IA", "ACH", "Alpha", "AU", "AT", "X", "ACC", "I", "NA", "L", "AL", "AST", "AV", "ABC", "AMA", "AB", "AE", "RA", "AA", "LA", "As", "WA", "AI", "AR", "C", "AS", "S", "EA", "B", "G", "This", "P", "HA", "CA", "MA", "AY", "At", "JA", "AF", "AM", "Java", "SA", "AC", "The", "BA", "AN", "Array", "AP"], "BC": ["WC", "NS", "IC", "Bell", "NC", "BL", "BS", "JC", "RB", "PC", "BN", "LC", "IB", "ABC", "ANK", "CBC", "TC", "BG", "UC", "MC", "BT", "VC", "Bank", "GC", "NBC", "BBC", "EC", "B", "SC", "GB", "BR", "DC", "BB", "REC", "USB", "BM", "US", "CBS", "RC", "Bern", "HC", "CC", "NB", "BF", "CL", "BO", "LL", "AC", "FC", "BA", "WS", "NG", "C", "UB"], "l": ["lc", "n", "lu", "lt", "ln", "ul", "L", "ml", "el", "lit", "o", "nl", "la", "ls", "b", "yl", "len", "lis", "lo", "lp", "li", "ail", "an", "al", "ol", "il", "le", "lin"], "s": ["sym", "n", "sb", "sw", "ats", "js", "p", "spec", "g", "fs", "span", "us", "hs", "sys", "c", "ts", "m", "set", "ns", "status", "rs", "mins", "ins", "o", "h", "ms", "ls", "abs", "sp", "stable", "t", "S", "ss", "si", "sim", "its", "v", "gs", "sq", "ws", "ims", "sv", "sa", "sts", "cs", "se", "es", "os", "stats", "qs", "ds", "ps"], "i": ["mi", "n", "xi", "x", "ni", "gi", "p", "di", "I", "c", "m", "z", "bi", "yi", "ic", "o", "ip", "iri", "b", "ri", "t", "si", "li", "ii", "v", "e", "ti", "im", "it", "zi", "ui", "phi", "pi", "u", "id", "j", "y", "k", "index", "ij", "ik", "iu"]}}
{"code": "n = int(input())\\n\\nal = []\\nbl = []\\nfor i in range(n):\\n    a,b = [int(i) for i in input().split()]\\n    al.append(a)\\n    bl.append(b)\\n    \\nal = sorted(al)\\nbl = sorted(bl)\\n\\nmedian_a = al[n//2]if n % 2 else (al[n // 2] + al[n//2 - 1]) / 2 \\nmedian_b = bl[n//2]if n % 2 else (bl[n // 2] + bl[n//2 - 1]) / 2 \\n\\nif n % 2:\\n    print(int((median_b - median_a + 1)))\\nelse:\\n    print(int((median_b - median_a) * 2 + 1))", "target": "203", "substitutes": {"n": ["N", "net", "x", "any", "missing", "nt", "conn", "ni", "wn", "gn", "ln", "d", "p", "en", "on", "names", "norm", "ne", "cn", "g", "name", "dn", "ct", "sn", "c", "current", "m", "z", "ns", "note", "o", "nl", "ren", "f", "num", "fn", "t", "nia", "len", "nb", "no", "nor", "mn", "non", "nv", "na", "an", "v", "tn", "nc", "all", "nm", "un", "s", "nan", "nu", "nw", "nn", "l", "number", "np", "id", "ng", "j", "rn", "network", "pn"], "al": ["alt", "ial", "alph", "atal", "bal", "tl", "arial", "ab", "ald", "pal", "Al", "alis", "en", "alf", "ul", "hal", "sal", "AL", "ma", "ml", "isal", "el", "mal", "alg", "wal", "als", "att", "cal", "all", "ad", "ap", "aled", "aler", "alled", "ell", "alls", "af", "adal", "l", "pl", "am", "ali", "ar", "il", "ll", "dal", "ele", "ag", "ac"], "bl": ["sb", "lu", "lig", "bern", "els", "tl", "kl", "bf", "wn", "ln", "db", "BL", "abl", "ib", "lb", "bg", "Bl", "ml", "bd", "dl", "pb", "gl", "ble", "blocks", "blog", "bm", "bsp", "nl", "sl", "ob", "jl", "br", "fr", "bc", "sp", "rel", "yl", "sel", "pt", "block", "mn", "bb", "fl", "bj", "bn", "lp", "ill", "bt", "lam", "yn", "obl", "lr", "bell", "pl", "ll", "il", "cl", "lbs", "vs", "bs", "obs", "bel"], "i": ["\u00ed", "mi", "ki", "xi", "x", "gu", "ci", "gi", "p", "di", "ai", "I", "c", "m", "bi", "yi", "ic", "ip", "ind", "t", "ri", "si", "ii", "li", "v", "e", "ti", "oi", "im", "it", "ini", "zi", "l", "pi", "phi", "u", "id", "y", "j", "fi", "ik", "ij", "iu", "hi"], "a": ["ce", "ia", "sta", "ae", "ab", "aff", "ach", "ai", "\u00e1", " A", "ma", "el", "eas", "ant", "ea", "la", "aaa", "act", "alpha", "da", "apa", "ee", "an", "e", "A", "ap", "at", "sa", "ao", "app", "ed", "au", "aa", "am", "ar", "er", "area", "ba", "ca", "ac"], "b": ["bis", "body", "sb", "ab", "bar", "db", "g", "ib", "lb", "blue", "w", "bg", "z", "bi", "fb", "rb", "mb", "h", "be", "ob", "bh", "br", "f", "bc", "t", "nb", "bb", "v", "eb", "base", "cb", "l", "bp", "bin", "j", "y", "bs"], "median_a": ["median_aa", "media5at", "media5a", "medianP1", "median__an", "medias_aa", "medias__1", "median_1", "medias__an", "media_alpha", "median4ae", "median__a", "median4sta", "medistic_ae", "median_at", "median__1", "median_alpha", "medias_a", "median4a", "median__aa", "medistic_a", "medias_1", "media_an", "median5a", "median5an", "median4ao", "median_an", "median_ao", "medianPaa", "medias__aa", "median_ae", "medianPan", "media_at", "median5at", "median5alpha", "media_a", "medias_an", "medianPa", "media5an", "medistic_ao", "median_sta", "media5alpha", "medias__a", "medistic_sta"], "median_b": ["median_B", "median__b", "medmed_ab", "median___rb", "medor_b", "medo_rb", "median_ab", "median___be", "medor_u", "medo___b", "medo_be", "medor_or", "median_be", "medo_b", "medo___be", "medor_i", "medo___fb", "median___fb", "median_or", "median_bar", "median___b", "median__ab", "median__bar", "median_i", "medmed_b", "medmed_B", "median_rb", "median_u", "medmed_bar", "medo___rb", "median_fb", "median__B", "medo_fb"]}}
{"code": "# class UnionFind():\\n#     def __init__(self, n):\\n#         self.n = n\\n#         self.parents = [-1] * n\\n\\n#     def find(self, x):\\n#         if self.parents[x] < 0:\\n#             return x\\n#         else:\\n#             self.parents[x] = self.find(self.parents[x])\\n#             return self.parents[x]\\n\\n#     def union(self, x, y):\\n#         x = self.find(x)\\n#         y = self.find(y)\\n\\n#         if x == y:\\n#             return\\n\\n#         if self.parents[x] > self.parents[y]:\\n#             x, y = y, x\\n\\n#         self.parents[x] += self.parents[y]\\n#         self.parents[y] = x\\n\\n#     def size(self, x):\\n#         return -self.parents[self.find(x)]\\n\\n#     def same(self, x, y):\\n#         return self.find(x) == self.find(y)\\n\\n#     def members(self, x):\\n#         root = self.find(x)\\n#         return [i for i in range(self.n) if self.find(i) == root]\\n\\n#     def roots(self):\\n#         return [i for i, x in enumerate(self.parents) if x < 0]\\n\\n#     def group_count(self):\\n#         return len(self.roots())\\n\\n#     def all_group_members(self):\\n#         return {r: self.members(r) for r in self.roots()}\\n\\n#     def __str__(self):\\n#         return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\\n\\nclass UnionFind():\\n  par = []\\n  sizes = []\\n\\n  def __init__(self, N):\\n    self.par = [i for i in range(N)]\\n    self.sizes = [1 for _ in range(N)]\\n\\n  def root(self, x: int)-> int:\\n    if (self.par[x] == x):\\n      return x\\n    self.par[x] = self.root(self.par[x])\\n    return self.par[x]\\n\\n  def unite(self, x: int, y: int):\\n    rootX = self.root(x)\\n    rootY = self.root(y)\\n    if rootX == rootY:\\n      return\\n    self.par[rootX] = rootY\\n    self.sizes[rootY] += self.sizes[rootX]\\n\\n  def maxSize(self)-> int:\\n    return max(self.sizes)\\n\\ndef friends(N, As):\\n  uf = UnionFind(N)\\n  setAs = list(set(As))\\n  for val in setAs:\\n    uf.unite(val[0]-1, val[1]-1)\\n  # ans = 0\\n  ans = uf.maxSize()\\n  # for i in range(N):\\n  #   temp = uf.size(i)\\n  #   if ans < temp:\\n  #     ans = temp\\n  return ans\\n\\nif __name__ == \"__main__\":\\n  nm = list(map(int, input().split()))\\n  As =[tuple(map(int, input().split())) for _ in range(nm[1])]\\n  print(friends(nm[0], As))", "target": "602", "substitutes": {}}
{"code": "# coding: utf-8\\n# Your code here!\\nwhile(1):\\n    H,W=map(int,input().split(\" \"))\\n    if H==0 and W==0:\\n        break\\n    else:\\n        for i in range(H):\\n            for j in range(W):\\n                print(\"#\",end=\"\")\\n            print(\"\")\\n        print(\"\")\\n\\n\\n", "target": "296", "substitutes": {}}
{"code": "N = int(input())\\nW = list(map(int, input().split()))\\n\\nminw = sum(W)\\n\\nfor t in range(N):\\n    s1 = sum(W[:t])\\n    s2 = sum(W[t:])\\n    diff = abs(s1 - s2)\\n    minw = min(minw, diff)\\n\\nprint(minw)\\n", "target": "8", "substitutes": {"N": ["SN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "X", "R", "I", "NA", "L", "NM", "NN", "NR", "NT", "NH", "NF", "V", "No", "Z", "S", "B", "J", "Q", "ND", "Num", "P", "A", "D", "NB", "Len", "K", "F", "TN", "FN", "C"], "W": ["WT", "WC", "M", "New", "We", "T", "WR", "MW", "All", "WAR", "CW", "WI", "Watch", "Ws", "WP", "L", "RW", "w", "VS", "Witness", "VW", "BW", "H", "WA", "V", "S", "SW", "Wh", "B", "Week", "WB", "WF", "Windows", "Wa", "WD", "D", "AF", "WM", "Y", "WE", "EW", "DW", "Weight", "WS", "F", "Writer"], "minw": ["minsw", "minws", "minsws", "mainwa", "sumg", "smallwb", "smallw", "smallws", "mainw", " minew", "smallterm", "minsW", " ming", "solsw", "medv", "smallsw", "mainv", "MINg", "minwb", "medW", "medw", "MINew", "sumew", "MINW", "medwa", "mainW", "smallW", "solterm", " minwb", "minv", "sumW", "sumw", "sumv", "MINterm", "minswb", "sumwa", "minew", "solw", "MINw", "minwa", "solW", "MINsw", " minW", "minW", "minterm", "ming", " minws"], "t": ["a", "n", "ty", "x", "T", "to", "ta", "d", "p", "tw", "typ", "i", "td", "w", "r", "c", "ts", "z", "m", "total", " th", "te", "step", "o", "tp", " tr", "f", "time", "pt", " tid", "ot", "tu", "li", "v", "e", "ti", "tt", "it", "tr", "l", "k", "y", "j", "index"], "s1": [" sfirst", "space001", " s01", "spacefirst", "s0", "es1", "es2", "S0", "S01", "as001", "asfirst", "S2", "sfirst", "es0", " s0", "space1", "s001", " s001", "es01", "as1", "S1", "s01"], "s2": ["s42", "t3", " s42", "t2", "gs2", "t1", "t02", "s22", " s3", "S3", "S2", " s22", "s3", "ls22", "gs42", "ls2", "S02", " s02", "S1", "ls42", "gs22", "s02"], "diff": ["changed", "cmp", "missing", " difference", "d", "exc", "sub", "Diff", "dl", "dev", "change", "different", "distance", "Delta", "fail", " Diff", "rel", "adv", "dist", "dust", "IFF", "update", "adj", "deb", "dx", "iff", "div", "dis", "patch", "extra", "error", "comp", "same", "attr", "frac"]}}
{"code": "N = int(input())\\ntannis = [1]\\n\\ni = 1\\nwhile 6**i <= N:\\n    tannis.append(6**i)\\n    i += 1\\n\\ni = 1\\nwhile 9**i <= N:\\n    tannis.append(9**i)\\n    i += 1\\n\\ndp = [float('inf') for _ in range(N+1)]\\ndp[0] = 0\\n\\nfor i in range(1, N+1):\\n    for t in tannis:\\n        if i-t >= 0:\\n            dp[i] = min(dp[i], dp[i-t]+1)\\n\\n#print(dp)\\nprint(dp[N])\\n", "target": "460", "substitutes": {"N": ["SN", "CNN", "Name", "n", "M", "NS", "T", "NC", "GN", "NI", "Na", "Ns", "I", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "NF", "V", "No", "NO", "NOTE", "Z", "S", "B", "J", "Q", "ND", "P", "Num", "Sn", "D", "NB", "Y", "MN", "Len", "Ni", "K", "F", "AN", "TN", "Now", "C"], "tannis": ["Tds", "taos", "taeatures", "tobs", "trss", " tassembly", "tempnews", "teatures", "tni", " teatures", " Tassy", " Tobs", "tsassy", "stnews", "tempannis", " tds", "gans", "gds", " Tannis", "wteatures", " tiann", "tsannis", "stannis", " tnews", "tsrss", "tnews", "gannis", "tiann", "gobs", " taos", "wtannis", "tassembly", "tani", " tassy", "tassy", "tempiann", " tni", "tans", "wtni", " Trss", "wtassembly", "Tobs", " trss", "staos", "stiann", "tempaos", "taassembly", "Tannis", "Tans", " tans", "tds", "tsobs", "taannis", " tobs"], "i": ["a", "ki", "n", "x", "p", "r", "z", "ix", "ind", "v", "ti", "it", "ini", "\u0438", "then", "phi", "q", "id", "init", "\u00ed", " I", "ni", "me", "port", "g", "ai", "I", "m", "qi", "iti", "ic", "o", " bi", "si", "ei", "im", "s", "zi", "l", "u", "ij", " ii", "ci", "gi", "ip", "h", "io", "ii", "ui", "pi", "index", "fi", "ik", "mi", "xi", "cli", "di", "bi", "info", "yi", "iri", "f", "li", "ji", "int", "iy", " ti", "ati", "j", "y", "asi", "iu", "hi"], "dp": ["pkg", "dm", "d", "p", "db", "gc", "vp", "di", "dial", "jp", "td", "dh", "dl", "fp", "pb", "ga", "gp", "wd", "tp", "ip", "dt", "df", "sp", "dep", "dc", "isp", "hp", "DP", "wp", "lp", "pd", "dr", "tap", "deb", "cp", "dq", "bp", "dd", "dj", "np", "pn", "pp", "ds", "ps", "adr"], "_": ["x", " y", " the", " j", " k", "I", "ix", " g", " x", " l", " u", " c", " m", " __", " p", " un", " z"], "t": ["a", "n", "x", "T", "to", "ite", "ci", "ta", " wi", "p", "d", "g", "di", "ai", "tw", "r", "wt", "tc", "c", "ts", "m", "tip", "z", "iti", " th", "te", "ties", "let", "h", "tp", "tree", "dt", "f", "b", "pt", "ot", "tu", "e", "ti", " ot", "ten", "tt", "it", "tr", "tf", "s", " T", "nw", "l", "ati", "u", "id", "j", "y"]}}
{"code": "n = int(input())\\na = [int(i) for i in input().split()]\\n\\nc = 0\\n\\nfor i in range(1,n):\\n\tif a[i] == a[i-1]:\\n\t\ta[i] = 10001\\n\t\tc += 1\\n\\nprint(c)", "target": "493", "substitutes": {"n": ["N", "net", "nt", "gn", "ln", "p", "en", "ne", "cn", "sn", "w", "m", "z", "ns", "nl", "num", "t", "len", "nb", "no", "mn", "na", "v", "an", "nc", "nu", "nw", "nn", "l", "q", "np", "network", "k", "nd"], "a": ["sta", "ae", "ac", "ab", "ta", "va", "ai", "ma", "m", "set", "ata", "eas", "ga", "window", "change", "ea", "la", "aaa", "act", "go", "isa", "b", "alpha", "form", "da", "apa", "address", "na", "an", "all", "A", "at", "aaaa", "now", "sa", "aka", "qa", "another", "ao", "new", "au", "oa", "ch", "aa", "am", "data", "array", "area", "ack", "ca"], "i": ["\u00ed", "mi", "ki", "xi", "x", "uri", "ci", "gi", "di", "ai", "I", "z", "bi", "yi", "qi", "info", "ic", "ix", "ip", "ind", "b", "t", "multi", "ri", "si", "iu", "ii", "li", "ji", "v", "ei", "int", "ti", "oi", "im", "it", "ini", "zi", "ui", "q", "l", "pi", "phi", "id", "j", "index", "y", "ij", "ik", "fi", "iri", "hi"], "c": ["ce", "con", "lc", "x", "cat", "ci", "gc", "d", "p", "unc", "cd", "pc", "xc", "ct", "rc", "r", "tc", "m", "fc", "h", "cur", "cv", "f", "count", "dc", "t", "cum", "uc", "conf", "sc", "v", "nc", "cache", "cos", "cp", "co", "cb", "q", "cu", "cs", "k", "cm", "cr", "ca", "C", "ac"]}}
{"code": "S=input()\\nl=[]\\nn=[]\\nl.extend(S)\\na=set(l)\\nif len(a)==2:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "103", "substitutes": {"S": ["M", "N", "NS", "T", "BS", "SS", "Sl", "SL", "R", "X", "I", "L", "SB", "Si", "SI", "H", "W", "GS", "V", "B", "J", "Q", "G", "P", "A", "E", "s", "SU", "St", "D", "Y", "SA", "U", "F", "Z", "C"], "l": ["tl", "ln", "d", "p", "g", "i", "L", "c", "z", "m", "dl", "el", "lit", "o", "nl", "sl", "ls", "f", "b", "t", "yl", "len", "lis", "lo", "lp", "li", "v", "e", "list", "al", "s", "lr", "ol", "bl", "ll", "le", "pl", "j", "y"], "n": ["N", "nt", "ln", "d", "p", "ne", "i", "sn", "w", "c", "m", "z", "ns", "o", "nl", "t", "nb", "na", "v", "an", "tn", "nu", "nn", "q", "ll", "np", "j", "k"], "a": ["ia", "ac", "ab", "ta", "i", "c", "ma", "z", "ata", "el", "ea", "la", "h", "fa", "act", "abs", "b", "f", "t", "wa", "add", "na", "an", "all", "A", "al", "another", "sa", "ao", "at", "oa", "aa", "am", "j", "ba", "ca"]}}
{"code": "import sys\\nS = input()\\nT = input()\\n\\nif not ( 1 <= len(S) <= 2*10**5 ): sys.exit()\\nif not ( len(S) == len(T) ): sys.exit()\\nif not ( S.islower() and T.islower() ): sys.exit()\\n\\ncount = 0\\nfor I in range(len(S)):\\n    if S[I] != T[I]:\\n        count += 1 \\nprint(count)", "target": "123", "substitutes": {"S": ["M", "N", "Source", "NS", "SF", "SH", "BS", "SS", "HS", "SL", "SB", "R", "ESS", "JS", "RS", "SO", "Si", "L", "X", "SER", "VS", "SI", "CS", "TS", "Set", "SM", "H", "GS", "V", "IS", "INS", "B", "Q", "SK", "G", "Sing", "P", "SSL", "SE", "A", "US", "s", "SU", "SP", "ST", "D", "DS", "SA", "U", "LS", "C"], "T": ["WT", "IT", "M", "N", "TR", "TX", "AT", "R", "L", "Type", "TS", "PT", "VT", "NT", "TG", "TL", "H", "Maybe", "CT", "V", "O", "NOTE", "Z", "RT", "TV", "t", "LT", "B", "J", "G", "P", "TB", "TT", "XT", "TA", "D", "ST", "Test", "TM", "Y", "MT", "TO", "GT", "F", "HT", "OT", "TN", "C"], "count": ["hold", "find", "th", "call", "nt", "state", "consider", "stat", "cd", "test", "ct", "OUNT", "ount", "length", "c", "report", "weight", "current", "process", "total", "second", "track", "display", "result", "ind", "limit", "num", "t", "nb", "thread", "amount", "conf", "add", "list", "cache", "hash", "flag", "found", "group", "print", "counter", "number", "Count", "index", "trace", "C", "sum"], "I": ["IT", "M", "N", "IX", "Int", "VI", "IC", "II", "IJ", "PI", "FI", "IP", "NI", "X", "i", "L", "R", "RI", "Si", "CI", "SI", "IE", "HI", "DI", "Iter", "O", "V", "IM", "TI", "J", "Q", "G", "This", "P", "LI", "ID", "A", "Index", "IG", "You", "IL", "Is", "GI", "D", "Y", "MI", "U", "K", "Im", "F", "KI", "C", "Xi"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\n\\ndef maximum_profit(profits):\\n    max_v = profits[1] - profits[0]\\n    min_v = profits[0]\\n\\n    for j in range(1, len(profits)):\\n        max_v = max(max_v, profits[j]-min_v)\\n        min_v = min(min_v, profits[j])\\n\\n    print(max_v)\\n\\n\\ndef to_int(v):\\n    return int(v)\\n\\n\\nif __name__ == '__main__':\\n    l = to_int(input())\\n    profits = [to_int(input()) for i in range(l)]\\n\\n    maximum_profit(profits)", "target": "689", "substitutes": {}}
{"code": "n=int(input())\\n\\nt = list(map(int,input().split()))\\n\\ncount = 0\\n\\nfor i in t:\\n    if i%2==1:\\n        count += 1\\nif count%2==1:\\n    print('NO')\\nelse:\\n    print('YES')\\n", "target": "645", "substitutes": {"n": ["N", "x", "nt", "d", "p", "w", "sn", "c", "m", "z", "ns", "o", "nl", "f", "b", "num", "nb", "na", "v", "nc", "nm", "nn", "q", "l", "k", "j"], "t": ["a", "T", "nt", "ta", "p", "table", "d", "tw", "w", "tc", "txt", "wt", "ts", "m", "tip", "type", "total", "te", "o", "tp", "tree", "f", "ot", "tu", "tap", "v", "e", "list", "ti", "tt", "tr", "it", "tf", "s", " T", "l", "j"], "count": ["history", "next", "hold", "nt", "p", "ct", "code", "I", "long", "ount", "length", "c", "current", "status", "qi", "total", "ind", "f", "num", "cond", "multi", "nb", "pt", "conf", "add", "check", "v", "list", "nc", "ch", "found", "size", "counter", "l", "number", "Count", "phi", "j", "index", "C", "sum"], "i": ["a", " ii", "ki", "xi", "ni", "ite", "ci", "gi", "name", "di", "ai", "I", "c", "bi", " di", "yi", "ski", "o", "ind", "f", "si", "ii", "li", "ei", "v", "ti", "oi", "iy", "ini", "zi", " ti", "pi", "ati", "l", "id", "j", "y", "iu", "hi"]}}
{"code": "import sys\\nsys.setrecursionlimit(10 ** 6)\\n\\nD,G=map(int,input().split())\\npc=[list(map(int,input().split())) for _ in range(D)]\\n\\ndef solve(bit):\\n  if bit >= (1<<D):\\n    return 1000\\n  p_sum=0\\n  num=0\\n  \\n  for i in range(D):\\n    if bit & (1<<i):\\n      p_sum += pc[i][1] + pc[i][0] * 100*(i+1)\\n      num += pc[i][0]\\n  if p_sum >= G:\\n    return min(num,solve(bit+1))\\n  else:\\n    for i in reversed(range(D)):\\n      if bit & 1<<i:\\n        continue\\n      for j in range(pc[i][0]):\\n        if p_sum >= G:\\n          break\\n        p_sum += 100*(i+1)\\n        num += 1\\n      else:\\n        return solve(bit+1)\\n    return min(num,solve(bit+1))\\n\\nprint(solve(0))", "target": "125", "substitutes": {"D": ["M", "N", "T", "d", "TD", "DO", "DIR", "R", "I", "DE", "L", "X", "FD", "DR", "DI", "H", "O", "V", "Done", "S", "Do", "DP", "B", "Q", "Day", "DD", "DC", "DN", "P", "Dir", "A", "E", "Ds", "WD", "DS", "Den", "DM", "Y", "DF", "Date", "DB", "K", "F", "Z", "C"], "G": ["GA", "M", "N", "GO", "g", "CG", "I", "Big", "AG", "GH", "BG", "TG", "GE", "GR", "H", "GV", "GG", "GS", "V", "GRE", "Gate", "GF", "B", "J", "Q", "GB", "P", "IG", "E", "PG", "GP", "LG", "GI", "FG", "Y", "GT", "F", "Ge", "GU", "Gre", "C"], "pc": ["lc", "phy", "psc", "gc", "p", "asc", "mp", "vp", "xc", "PC", "rc", "arc", "tc", "c", "fc", "pb", "rs", "ctx", "ic", "tp", "pr", "ods", "bc", "vc", "mc", "icc", "pt", "anc", "chron", "lp", "pd", "nc", "soc", "roc", "cp", "ping", "cc", "cu", "proc", "pi", "pl", "pic", "cs", "px", "pn", "pp", "ps", "ctl", "sc"], "_": ["x", " the", " y", "name", "I", " name", "ix", " g", "ip", " x", " m", " w", " __", " each", " mult", " index", " some", " un"], "bit": ["rot", "ut", "th", "x", "ac", "cat", "bar", "point", "stat", "loop", "g", "day", "test", "ct", "short", "Bit", "long", "job", "bot", "batch", "bd", "bi", "status", "type", "slot", "bo", "digit", "lit", "bug", "tag", "cmd", "word", "b", "config", "bc", "bool", "t", "cond", "no", "block", "ion", "cut", "check", "bt", "int", "butt", "byte", "post", "at", "it", "flag", "char", "ong", "oct", "boot", "board", "base", "kt", "lock", "band", "lat", "bin", "id", "mat", "pat", "op", "BIT", "text", "back", "bits"], "p_sum": [" p_stat", "p__sum", "p2len", "postonmin", "p_min", " p2sum", "p_stat", "p2min", "p7cos", "p2sum", "polysh", " p2cos", "postonSum", " p_Sum", "p_mem", "p__num", "p2Sum", "g_sim", "postonstat", "p2num", "p_sh", " p_min", "p__Sum", "g_sum", "p_mat", "p7sum", "p_Sum", "p_cos", "g_mem", "p_sim", "p2stat", "p_num", "p__len", "p2cos", " p_cos", " p_mat", "polysum", " p2sh", "p_len", " p_sh", "postonsum", " p_num", "p7sh", " p2stat", "p2sh", " p2min", " p2Sum", "polycos", " p_len"], "num": ["den", "next", "con", "n", "th", "alph", "nt", "um", "nom", "p", "en", "mult", "common", "zero", "hom", "m", "unit", "ident", "tim", "bo", "nam", "snap", "result", "t", "NUM", "multi", "nb", "no", "sim", "mn", "bid", "ver", "off", "non", "out", "na", "mont", "Num", "cal", "cum", "home", "nm", "un", "om", "final", "msg", "valid", "node", "nu", "number", "mon", "np", "mem", "phys", "index", "pn", "coord", "text", "sum"], "i": ["mi", "ki", "n", "xi", "x", "ia", "ie", "ci", "gi", "d", "p", "name", "di", "ai", "I", "c", "m", "z", "bi", "status", "info", "yi", "qi", "tim", "ic", "o", "ix", "ip", "ind", "b", "t", "io", "si", "sim", "li", "ii", "ji", "v", "e", "int", "ti", "list", "oi", "im", "it", "s", "zi", "ini", "ui", "l", "pi", "phi", "id", "y", "index", "ik", "ij", "k", "iu", "chain"], "j": [" ii", "a", "n", "ite", "name", "g", "jp", "ai", "iaz", "oj", "z", "jj", "bi", "o", "h", "f", "b", "J", "ion", "ji", "kj", "zi", "q", "l", "y", "k", "ij", "ik"]}}
{"code": "k,t=map(int,input().split())\\na=list(map(int,input().split()))\\nsm=sum(a)\\nn=1\\nfor i in a:\\n    if i>sm//2:\\n        n=i-(sm-i)\\n        break\\nprint(n-1)\\n", "target": "549", "substitutes": {"k": ["km", "x", "kr", "kh", "p", "g", "ke", "w", "r", "c", "m", "z", "o", "h", "ko", "f", "b", "tk", "v", "e", "ch", "q", "j", "y", "K", "ka", "ik"], "t": ["T", "ta", "p", "d", "r", "tc", "w", "c", "ts", "m", "z", "o", "te", "dt", "f", "pt", "tu", "v", "e", "tt", "s", " T", "q", "l", "u", "j", "y"], "a": ["x", "ae", "ac", "ab", "ta", "d", "p", "ana", "va", "ai", "w", "c", "ma", "m", "set", "ata", "eas", "ga", "o", "aux", "ea", "la", "aaa", "b", "na", "an", "all", "A", "another", "sa", "s", "au", "oa", "aa", "l", "am", "index", "area", "ack", "ba", "ca", "ao"], "sm": ["tm", "sy", "sym", "ism", "sb", "sw", "sh", "esm", "sr", "sur", "dm", "mm", "Sm", "sf", "span", "sn", "m", "sam", "SM", "rm", "sl", "gm", "ms", "sbm", "sp", "si", "sim", "mn", "sq", "nm", "sa", "s", "sv", "wm", "sd", "mem", "se", "sk", "mt", "sum"], "n": ["next", "nr", "N", "conn", "nt", "ni", "d", "p", "ln", "name", "norm", "ne", "long", "r", "w", "sn", "c", "m", "ns", "min", "o", "nl", "h", "f", "b", "num", "fn", "nb", "mn", "na", "v", "an", "int", "nc", "nm", "nan", "nu", "q", "l", "nn", "number", "np", "network", "j", "y"], "i": ["mi", "iii", "ki", "xi", "x", "ni", "ci", "gi", "p", "di", "ai", "I", "m", "ami", "bi", "yi", "qi", "ic", "ix", "ip", "iri", "f", "b", "multi", "si", "ii", "li", "ei", "v", "int", "ti", "oi", "im", "s", "it", "zi", "ini", "\u0438", "phi", "pi", "ati", "l", "u", "id", "j", "index", "ij", "iu", "hi", " Xi"]}}
{"code": "N, K = map(int, input().split())\\nif K == 0:\\n  r = N*N\\n  print(r)\\n  exit()\\nr = 0\\nfor b in range(K+1, N+1):\\n  r0 = r\\n  r += (N//b)*(b-K)\\n  r1 = r\\n  r += max(0, N+1-(N//b*b+K))\\n  #for a in range(N//b*b+K, N+1):\\n    #if a%b >= K:\\n  #  r += 1\\n  #print(b, r-r0, r1-r0, r-r1)\\nprint(r)\\n", "target": "671", "substitutes": {"N": ["SN", "CNN", "Name", "n", "M", "NS", "T", "NC", "GN", "NI", "Na", "Ns", "R", "X", "I", "L", "NA", "NM", "BN", "NN", "NP", "NR", "CN", "NT", "NH", "H", "Node", "O", "V", "NO", "Z", "NUM", "S", "NE", "B", "J", "Q", "Wh", "BD", "ND", "G", "Num", "P", "A", "E", "D", "NB", "ON", "Y", "Size", "MN", "Ni", "F", "AN", "TN", "FN", "NG", "C"], "K": ["M", "T", "KN", "KR", "AK", "X", "R", "I", "L", "KK", "Kind", "H", "FK", "KING", "CP", "V", "KS", "O", "KC", "PK", "NK", "Z", "S", "BC", "B", "J", "SK", "Q", "G", "P", "A", "E", "HK", "Mask", "VK", "D", "Y", "OK", "UK", "k", "U", "F", "KI", "TN", "KE", "KA", "KB", "C"], "r": ["nr", "n", "mr", "sr", "x", "pair", "rr", "kr", "ro", "err", "rg", "d", "p", "ret", "g", "R", "rc", "i", "re", "w", "c", "m", "rs", "rb", "res", "rm", "h", "result", "pr", "term", "right", "f", "fr", "rel", "root", "art", "rl", "dr", "v", "e", "rf", "rank", "obj", "rt", "lr", "hr", "q", "l", "ar", "u", "k", "range", "er", "j", "attr", "cr", "rate", "adr", "rd"], "b": ["a", "bu", "sb", "n", "x", "BI", "bf", "ab", "d", "p", "beta", "g", "ib", "i", "w", "bg", "c", "z", "batch", "m", "bi", "wb", " B", "fb", "h", "be", "bh", "f", "num", "bc", "t", "br", "nb", "B", "bb", "bn", "v", "bt", "ch", "eb", "base", "cb", "q", "l", "bin", "u", "k", "y", "j", "bs"], "r0": [" r2", "rk", "crk", " rzero", "mr2", "mr0", "mrzero", "cr2", "rzero", "crzero", "cr0", " rk", "mrk", "r2"], "r1": ["Rn", "rc1", "r01", " r01", "rc0", "R1", " rn", "rn", "R01", "R0", "rc01", "rcn"]}}
{"code": "from collections import defaultdict,deque\\nimport math\\ndef main():\\n    n,h=map(int, input().split())\\n    ab = [list(map(int, input().split())) for i in range(n)]\\n    tmp = max([int(i[0]) for i in ab])\\n    bs = [int(i[1]) for i in ab]+[0]\\n    bs.sort(reverse = True)\\n    i = 0\\n    res = 0\\n    for i in bs:\\n        if i>=tmp:\\n            res+=1\\n            h-=i\\n            if(h<=0):\\n                break\\n        else:\\n            res += math.ceil(h/tmp)\\n            break\\n\\n    print(res)\\n\\n\\n\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "205", "substitutes": {"n": ["a", "nr", "N", "x", "nt", "d", "p", "ne", "r", "sn", "c", "m", "ns", "ny", "o", "b", "num", "t", "nb", "no", "mn", "na", "v", "nc", "nu", "nn", "q", "pi", "np", "l", "j", "y"], "h": ["history", "ht", "sh", "kh", "p", "mu", "head", "g", "hz", "html", "hal", "w", "hs", "r", "c", "m", "z", "ih", "rh", "hex", "http", "o", "H", "ah", "bh", "b", "hl", "hp", "t", "v", "oh", "hum", "height", "ph", "it", "hash", "ha", "he", "hr", "high", "hd", "ho", "phi", "hh", "k", "hi", "hm"], "ab": ["a", "asia", "abe", "able", "bank", " AB", "abin", "hab", "ib", "abl", "ai", "abi", "abet", "bi", "AB", "pb", "rab", "rb", "ic", "Ab", "mb", "ob", "abb", "ax", "abs", "b", "abus", "tab", "bag", "nb", "bb", "ap", "lab", "at", "af", "aka", "abc", "eb", "app", "aph", "ub", "ij", "ba", "abis", "ac"], "i": ["mi", "ki", "xi", "x", "ia", "ie", "ci", "gi", "p", "di", "ib", "ai", "I", "r", "c", "m", "bi", "yi", "iti", "ic", "ix", "o", "ip", "iri", " bi", "b", "t", "ri", "si", "li", "ii", "v", "ei", "int", "ti", "oi", "ori", "im", "it", "ini", "zi", "ui", "\u0438", "phi", "pi", "l", "il", "u", "id", "ati", "j", "index", "k", "ij", "ik", "y", "iu", "hi", "init"], "tmp": ["tm", "max", "cmp", "to", "perm", "nt", "mod", "offset", "p", "mm", "mp", "test", "pre", "m", "mut", "img", "ctx", "prime", "tp", "mb", "snap", "cur", "sp", "num", "t", "nb", "pos", "v", "cache", "emp", "obj", "mk", "tt", "xs", "tf", "rt", "size", "cb", "phi", "np", "pi", "timeout", "buff", "etc", "j", "attr", "temp", "start"], "bs": ["bis", "sb", "ats", "ios", "js", "BS", "bos", "ib", "outs", "fs", "aus", "ts", "ns", "bi", "vals", "obs", "ses", "ins", "ms", "bys", "ls", "abs", "b", "bc", "ris", "zb", "its", "ables", "gs", "aps", "ws", "s", "bps", "bles", "bl", "bes", "vs", "cs", "os", "ds", "ps", "ubs", "bits"], "res": ["resolution", "max", "x", "nt", "err", "ro", "resh", "ret", "reset", "re", "Res", "zero", "r", "us", "pre", "ref", "rem", "expr", "prime", "RES", "ins", "ms", "val", "result", "pr", "num", "rel", "fac", "vol", "ress", "sim", "cons", "pos", "out", "resp", "obj", "red", "crit", "gr", "rest", "rez", "sol", "pres", "conv", "new", "req", "yes", "progress", "rand", "mem", "vec", "j", "reg", "pro", "ps", "init", "frac", "sum"]}}
{"code": "n, k, c = map(int, input().split())\\ns = input()\\n\\nl = [0 for i in range(k+1)]\\nr = [0 for i in range(k+1)]\\n\\ncnt = 0\\nkaime = 1\\nfor i in range(n):\\n    if kaime > k: break\\n    if cnt > 0:\\n        cnt -= 1\\n    else:\\n        if s[i] == 'o':\\n            l[kaime] = i\\n            kaime += 1\\n            cnt = c\\n\\ncnt = 0\\nkaime = k\\nfor j in range(n):\\n    i = n-1 - j\\n    if kaime < 1: break\\n    if cnt > 0:\\n        cnt -= 1\\n    else:\\n        if s[i] == 'o':\\n            r[kaime] = i\\n            kaime -= 1\\n            cnt = c\\n\\nfor i in range(1, k+1):\\n    if l[i] == r[i]:\\n        print(l[i]+1)", "target": "647", "substitutes": {"n": ["N", "x", "net", "nt", "ln", "d", "p", "ne", "g", "w", "sn", "m", "z", "ns", "o", "h", "b", "num", "t", "nb", "no", "mn", "na", "v", "an", "nc", "nan", "nu", "nn", "q", "np", "y"], "k": ["ck", "km", "ki", "kn", "ek", "max", "kr", "kh", "kl", "p", "g", "ak", "ke", "m", "z", "dk", "ks", "o", "kw", "ko", "kind", "t", "kok", "kj", "v", "kick", "ku", "q", "kk", "sk", "K", "ik", "ka", "kan", "ket", "mk", "unk"], "c": ["a", "lc", "con", "x", "max", "err", "ci", "d", "p", "gc", "unc", "g", "ct", "rc", "w", "tc", "m", "z", "h", "f", "b", "count", "t", "mc", "dc", "v", "e", "nc", "un", "cp", "cc", "q", "u", "cs", "y", "cm", "cr", "C", "ac"], "s": ["a", "sb", "str", "js", "p", "ains", "w", "hs", "ts", "z", "m", "ies", "ns", "rs", "ses", "o", "h", "ers", "ms", "ls", "b", "sp", "t", "S", "ss", "si", "sc", "v", "e", "sq", "gs", "sv", "xs", "ments", "ands", "q", "sts", "cs", "y", "er", "os", "es", "ps"], "l": ["lc", "tl", "kl", "ln", "p", "ul", "g", "left", "lb", "L", "ml", "m", "z", "dl", "o", "nl", "sl", "ls", "jl", "b", "t", "yl", "lis", "rl", "lo", "lp", "li", "fl", "v", "list", "sol", "lr", "ol", "lock", "ll", "le", "pl"], "i": ["a", "\u00ed", "mi", "xi", "x", "ia", "ki", "uri", "ie", "ci", "gi", "cli", "p", "di", "ai", "I", "jp", "m", "z", "bi", "yi", "qi", "iti", "ic", "o", "ix", "ip", "iri", "ind", "f", "b", "t", "multi", "ri", "io", "si", "sim", "li", "ii", "ji", "ei", "v", "int", "ti", "oi", "e", "im", "it", "zi", "ini", "ui", "q", "pi", "il", "ati", "phi", "id", "u", "y", "index", "ik", "ij", "iu", "hi"], "r": ["sr", "mr", "rr", "ro", "rg", "p", "g", "R", "rc", "re", "rx", "w", "m", "rh", "rs", "rb", "rm", "o", "ren", "h", "pr", "vr", "fr", "b", "f", "t", "ri", "rl", "dr", "ru", "rt", "lr", "q", "u", "rn", "range", "er", "rd"], "cnt": ["xcct", "icount", " counter", "count", "Cnc", " cNT", "xcounter", " crt", "acount", "ncount", "counter", "tcnt", "Cnt", "lcct", "etcct", "cachect", "cont", "cNT", "cachent", "icnc", "tccount", "csnt", "rcNT", "rccount", "rcnt", "etcnc", "lcnt", "cscount", " cont", "ncnc", "ccrit", " cred", "lcont", "crt", " cct", " cnc", "lccrit", "cpt", "ncnt", "csnc", "Count", "cacheounter", "cnc", "ccount", "tcnc", "csred", "acnt", "cacheont", " ccount", "acnc", "rcnc", "ncNT", " count", "lccount", "Ccrit", "tcred", "cct", "xcount", "lcount", "etcnt", " ccrit", "acrt", "rcpt", "Crt", "etcont", "icnt", "xcont", "lcpt", "xcnt", "xcrt", "Cct", " cpt", "lcnc", "icrt", "rcount", "cred"], "kaime": ["KAime", "kaure", "koure", "Kaure", "unaime", "icaimet", "owaIME", "akaIME", "akaimei", "Kaimer", "Kaimet", " kaice", "unatime", "Kaime", "taice", "ghaime", "kasice", "KaIME", "icaIME", "ckiimei", "KAice", "unaimer", "akaile", "ekaimer", "kaim", "koice", "koile", "haice", "haimer", "kaIME", " kaimer", "qaimer", "koetime", "akaimer", "kaimet", "taimer", "kaitime", "haimet", "ckietime", "taim", "koimet", "ghaimer", "haIME", "akaetime", "koimer", "KAim", "owaimer", "qaure", "qaitime", "koimei", "ekaice", "kaetime", "taime", "kasimer", "owaimet", "katime", "ckiime", " katime", "akaimet", "kaile", "akaitime", "kaice", "ekatime", "ckiile", "ghaice", "hatime", "ekaime", "owaime", "unaice", "koitime", "KAimer", "akatime", "icaure", "koime", "kasime", "icaime", "kaimei", "akaure", "kasim", "akaice", "kaimer", "akaime", "kotime", "haime", "ghatime", "qaime"], "j": ["a", "uj", "ja", "ie", "p", "name", "g", "ai", "jp", "jc", "oj", "z", "jj", "ix", "o", "h", "ind", "f", "b", "jac", "t", "J", "ion", "li", "ji", "kj", "v", "ch", "it", "ed", "q", "_", "ij", "ik", "ket"]}}
{"code": "n,m = map(int,input().split())\\nif(n%2==1):\\n    for i in range(1,m+1):\\n        print(' '.join(map(str,[i,n+1-i])))\\n    exit()\\n\\nm1,m2 = (m+1)//2 ,m//2\\nsum1 = 1 + n//2\\nsum2 = (n//2+1) + (n-1)\\nfor i in range(m1):\\n    print(' '.join(map(str,[1+i,n//2 -i])))\\nfor i in range(m2):\\n    print(' '.join(map(str,[n//2+1+i,n-1-i])))", "target": "761", "substitutes": {"n": ["N", "x", "net", "nt", "gn", "ln", "d", "p", "en", "name", "names", "ne", "cn", "g", "norm", "dn", "long", "sn", "r", "c", "w", "z", "ns", "o", "h", "b", "num", "fn", "t", "len", "nb", "units", "mn", "non", "out", "na", "v", "an", "nc", "nm", "un", "all", "s", "nan", "nu", "size", "nn", "l", "ll", "np", "number", "ng", "j", "y"], "m": ["tm", "mi", "M", "mr", "perm", "pm", "mid", "mod", "um", "dm", "d", "p", "mm", "mo", "g", "r", "c", "ma", "man", "mas", "bm", "rm", "o", "gm", "h", "ms", "f", "b", "num", "t", "mc", "mn", "v", "nm", "om", "sm", "s", "im", "l", "mun", "np", "mem", "j", "y", "md", "cm", "mt", "mk"], "i": ["\u00ed", "mi", "ki", "xi", "x", "ia", "uri", "ie", "me", "gu", "ci", "gi", "cli", "p", "di", "iq", "ai", "I", "iter", "bi", "yi", "qi", "iti", "info", "ic", "ix", "o", "ip", "iri", "ind", "t", "ri", "io", "si", "li", "ii", "ji", "v", "ei", "int", "ti", "im", "it", "zi", "ini", "ui", "ed", "one", "q", "l", "pi", "phi", "ati", "u", "id", "ali", "j", "y", "index", "fi", "ik", "ij", "iu", "hi", "like"], "m1": ["v2", "n2", "m3", " m01", "mOne", "mi001", "v01", "sum3", "gm001", "mi1", "n1", "gm1", "gmOne", "sum001", "gm3", "sumOne", "n01", "v1", "m01", "mi3", "m001", "miOne"], "m2": ["m256", "sm2", "n2", " mb", "mtwo", "ib", "i2", " m256", "sm1", "mb", "n1", "nb", "itwo", "i1", "smtwo", "ntwo", "i256", "n256"], "sum1": ["sum01", "mean3", "sum3", " sum3", "index1", " sum0", "index3", "index0", "sum0", "mean1", " sum01", "index01", "mean01", "mean0"], "sum2": ["sum4", "um4", "um2", "sum3", " sum3", " sum4", "um1", "um3", "m3", "m4"]}}
{"code": "X = int(input())\\nans = X//500 * 1000\\nX %= 500\\nans += X//5 * 5\\nprint(ans)\\n", "target": "599", "substitutes": {"X": ["M", "N", "IX", "x", "T", "ANS", "An", "TX", "IP", "I", "R", "L", "EX", "UX", "OX", "Length", "ix", "CP", "V", "Cross", "IS", "S", "XP", "DX", " x", "XM", "Q", "Tx", "P", "AP", "ID", "A", "REDACTED", "Is", "XX", "D", "XXX", "VALUE", "Y", "Size", "U", "K", "F", "AN", "Z", "ENS", "C", "Xi"], "ans": ["ars", "x", "ANS", "ants", "ats", "ean", "names", " means", "eds", "xa", "aus", "ros", "us", "aned", "ns", "vals", "ann", "rans", "man", "ks", "anas", "offs", "ins", "res", "ons", "ms", "amps", "ls", "ents", "ens", "cas", "cons", "uns", "ces", "pos", "can", "an", "anks", "iann", "aces", "s", "xs", "aos", "vs", "ads", "cs", "arts", "os", "es", "lan", "AN", "ds"]}}
{"code": "k = int(input())\\nstr = \"ACL\" * k\\nprint(str)", "target": "533", "substitutes": {"k": ["km", "n", "kn", "x", "max", "kr", "kh", "kl", "p", "kar", "ak", "ke", "w", "c", "m", "z", "ks", "o", "kw", "kil", "ko", "kb", "f", "b", "num", "tk", "t", "anc", "kj", "v", "ikk", "gain", "ku", "q", "kt", "kk", "ka", "j", "K", "sk", "kan", "y"], "str": ["STR", "ocr", "n", "sta", "cat", "Str", "p", "name", "ret", "g", "arr", "r", "txt", "w", "m", "status", "hex", "format", "res", "enc", "fr", "br", "sp", "t", "key", "out", "int", "string", "obj", "msg", "st", "s", "tr", "char", "print", "new", "bl", "div", "usr", "j", "float", "text"]}}
{"code": "import functools\\n\\nn = int(input())\\nV = sorted(map(int, input().split()))\\nans = functools.reduce(lambda x, y: (x + y) / 2, V)\\nprint(ans)", "target": "747", "substitutes": {"n": ["N", " nm", "x", " Ai", " Nu", " CN", "NV", "Na", "NN", " AA", " Li", " num", " pid", " ns", " ND", " fn", " NP", " SN", "Ni", " numer", " total", " non", " inputs", " na", " Number"], "V": ["M", "N", "T", "VI", "Va", "NV", "VM", "X", "I", "L", "AV", "VS", "VW", "Vs", "W", "H", "CV", "UV", "GV", "VC", "S", "VA", "B", "Q", "v", "P", "VO", "A", "D", "Y", "Vector", "U", "Z", "C", "VD"], "ans": ["ANS", "ants", "ats", "ians", "beans", "ana", " means", "aus", "asks", "san", "aned", " Ans", "ns", "ann", "rans", "mas", "anas", "leans", "ses", "ms", "ls", "ens", "cas", "uns", "can", "an", "anks", "anes", "idents", "ran", "nas", "van", "aos", "ams", "vs", "os", "lan", "AN", "vers"]}}
{"code": "N = int(input())\\ns = input()\\nt = input()\\n\\nans = N*2\\nfor n in range(N):\\n    if s[n:] == t[:N-n]:\\n        ans -= len(s[n:])\\n        break\\n        \\nprint(ans)", "target": "693", "substitutes": {"N": ["SN", "CNN", "M", "NS", "T", "NC", "GN", "NI", "Na", "Ns", "R", "I", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "O", "V", "Z", "S", "B", "Q", "ND", "Num", "P", "A", "E", "Sn", "D", "NB", "Y", "MN", "Ni", "K", "F", "AN", "TN", "C"], "s": ["a", "sb", "sw", "ats", "js", "p", "ains", "eds", "hs", "c", "ts", "ns", "rs", "ess", "ins", "sl", "h", "ms", "ls", "abs", "b", "sp", "ss", "S", "si", "parts", "ings", "its", "als", "strings", "gs", "sa", "st", "sv", "xs", "sts", "l", "es", "qs", "ds", "ps", "bs"], "t": ["tm", "ty", "T", "nt", "str", "ta", "p", "ct", "i", "tc", "txt", "c", "ts", "wt", "m", "xt", "te", "tp", "tree", "term", "f", "b", "pt", "ot", "v", "at", "tt", "it", "tr", "rt", "st", "kt", "l", "tmp", "mat", "vt", "tz", "y"], "ans": ["ars", "ANS", "nt", "ants", "ats", "beans", "An", "ana", "cn", "Ns", "outs", "aus", "ros", "sn", "aned", " Ans", "ns", "ann", "rans", "mas", "anas", "ks", "offs", "ins", "wan", "ons", "ms", "amps", "mean", "ls", "pan", "anned", "ens", "cons", "uns", "na", "an", "anks", "iann", "anes", "nan", "nas", "ran", "aos", "nn", "ads", "cs", "os", "lan", "AN"], "n": ["a", "nr", "x", "net", "nt", "ni", "gn", "ln", "d", "p", "name", "ne", "g", "dn", "i", "sn", "c", "z", "m", "ns", "el", "o", "ind", "f", "b", "num", "fn", "nb", "nor", "no", "mn", "non", "na", "v", "yn", "an", "nc", "un", "nan", "it", "new", "nu", "nw", "nn", "l", "np", "j", "y", "k"]}}
{"code": "from math import ceil\\ndef f(x,hp):\\n  hp=[hh-(b*x) for hh in hp]\\n  c=0\\n  for p in hp:\\n    if p<=0:continue\\n    c+=ceil(p/(a-b))\\n  return c<=x\\n\\nn,a,b=map(int,input().split())\\nh=[int(input()) for i in range(n)]\\nng=0\\nok=10**9\\nwhile ok-ng>1:\\n  mid=(ok+ng)//2\\n  if f(mid,h):\\n    ok=mid\\n  else:\\n    ng=mid\\nprint(ok)\\n\\n\\n\\n\\n", "target": "51", "substitutes": {"x": ["wx", "xi", "ex", "max", "xe", "g", "xc", "xa", "X", "rx", "w", "ox", "z", "m", "xxxx", "xt", "ix", "ax", "f", "xd", "t", "check", "v", "e", "exp", "hop", "xy", "ph", "ch", "xs", "xff", "inx", "xx", "l", "k", "y", "px", "xp", "xf"], "hp": ["ht", "mph", "phy", "php", "HP", "hz", "html", "dh", "hs", "tip", "m", "ih", "pb", "rh", "phal", "http", "gp", "hap", "tp", "ip", "hyper", "phil", "bh", "hy", "hl", "eth", " xp", "hist", "oh", "hop", "htt", "his", "ph", "ha", "cp", "phis", "hd", "phi", "bp", "pi", "np", "phys", "pp", "hyp", "ps", "xp", "hm"], "hh": ["sh", "kh", "phy", "xe", "php", "mp", "hz", "dh", "hs", "hn", "ih", "rh", "gp", "hhhh", "H", "hap", "tp", "bh", "xp", "HH", "hl", "bc", "hat", "lp", "xy", "ph", "ha", "hw", "cp", "dp", "lr", "hr", "xff", "bps", "phi", "yy", "xx", "np", "bp", "pp", "hyp", "hi", "hhh"], "c": ["ce", "con", "lc", "ci", "d", "cd", "pc", "cn", "xc", "g", "ct", "rc", "r", "m", "z", "fc", "ic", "col", "cur", "f", "count", "dc", "t", "e", "nc", "cp", "ch", "cc", "com", "co", "l", "u", "cs", "k", "y", "cm", "cf", "ca", "C", "ac"], "p": ["perm", "d", "php", "ep", "pc", "mp", "jp", "pre", "m", "pb", "gp", "power", "tp", "ip", "pa", "f", "sp", "wp", "lp", "v", " xp", "P", "ap", "cp", "ping", "dp", " ap", "yp", "pl", "bp", "pi", "pat", "j", "op", "pp", "ps", "xp", "pg"], "n": ["N", "nt", "gn", "d", "g", "ct", "r", "w", "m", "ns", "o", "t", "nb", "mn", "na", "v", "yn", "an", "nc", "s", "nan", "new", "nn", "l", "np", " N", "j", "k"], "a": ["ae", "ab", "d", "ak", "w", "r", "m", "o", "la", "ax", "f", "t", "alpha", "an", "v", "A", "al", "ap", "at", "sa", "ao", "aa", "l", "am", "ar", "j", "y", "ba", "ca", "ac"], "b": ["sb", "ab", "d", "db", "g", "ib", "r", "m", "z", "bi", "wb", "fb", "rb", "bm", "gp", "be", "bh", "f", "bc", "t", "nb", "B", "bb", "v", "e", "eb", "base", "cb", "l", "bp", "y", "bs", "ba"], "h": ["history", "sh", "kh", "hz", "hal", "dh", "hs", "m", "ih", "rh", "hex", "o", "H", "ah", "bh", "f", "hl", "v", "hist", "oh", "ph", "ha", "hash", "he", "hr", "hd", "ho", "l", "phi", "hi", "hm"], "i": ["I", "iter", "r", "m", "ix", "ip", "ind", "io", "li", "ii", "e", "int", "ti", "im", "q", "l", "pi", "phi", "u", "id", "j", "y"], "ng": ["next", "nr", "sh", "sw", "wn", "gn", "resh", "ing", "ne", "ang", "g", "hang", "bg", "z", "ns", "sam", "og", "dev", "ny", "nl", "mb", "alg", "ms", "sing", "ind", "ss", "dig", "mn", "oth", "na", "hing", "nc", "gov", "nm", "ming", "nz", "eng", "neck", "ping", "nn", "np", "rand", "sd", "md", "bang", "meg", "mg", "nd", "NG", "pg", "sc"], "ok": ["ck", "loc", "ocr", "conn", "mot", "nr", "perm", "nt", "Ok", "always", "mod", "d", "mp", "comm", "ang", "ak", "typ", "r", "ih", "og", "sec", "scan", "res", "ko", "ms", "ob", "ind", "quick", "ready", "t", "auto", "valid", "ot", "off", "check", "oh", "msg", "exec", "ping", "ol", "ku", "yes", "OK", "rand", "good", "oc", "k", "j", "op", "md", "ik", "id", "org", "mk", "kit", "ow"], "mid": ["rid", "next", "mi", "km", "han", "mr", "mit", "max", "phy", "middle", "mod", "mini", "d", "mo", "mm", "mp", "sub", "med", "mmm", "r", "m", "od", "mad", "man", "min", "ms", "tri", "dem", "ind", "trans", "mer", "mask", "fin", "f", "multi", "wid", "mc", "just", "mn", "pid", "v", "gray", "int", "mil", "gen", "high", "new", "rand", "id", "Mid", "j", "md", "mt", "hyp", "hi", "mk", "nd", "start"]}}
{"code": "dice = map(int, raw_input().split())\\ninst = raw_input()\\n \\ndef rolling(inst, dice):\\n    if inst == 'E':\\n        dice[5], dice[2], dice[0], dice[3] = dice[2], dice[0], dice[3], dice[5]\\n    elif inst == 'W':\\n        dice[5], dice[3], dice[0], dice[2] = dice[3], dice[0], dice[2], dice[5]\\n    elif inst == 'N':\\n        dice[5], dice[4], dice[0], dice[1] = dice[4], dice[0], dice[1], dice[5]\\n    elif inst == 'S':\\n        dice[5], dice[1], dice[0], dice[4] = dice[1], dice[0], dice[4], dice[5]\\n \\nfor i in range(len(inst)):\\n    rolling(inst[i], dice)\\nprint dice[0]", "target": "401", "substitutes": {"dice": ["delouch", "dvice", "dbash", "dip", " deed", "ddote", "dalice", "drice", "domuffy", "odouse", "daote", " dicy", "ldote", "dock", "dominky", " dodge", "didicy", " drice", "draddy", "diace", "dluke", "dataice", "daek", "cdice", "tdice", "drouse", "sdicy", "udie", "fdicy", "ddiced", " delve", "udicing", "douch", "dirice", "diuxe", "domeed", "dhice", "domuke", "disouch", "sdaddy", "sdice", "drodge", "daock", "daoice", "datarice", "dictrice", "dauce", "disice", "didinky", "diouse", "dtice", "disrice", "duce", "sdouse", "domouse", "domgate", "odice", "fduke", "delelve", "Drice", "Dice", " day", "delrice", "dloice", "ldrice", "dienne", "dbinky", " dius", "dalinky", "daouch", "diip", "daluke", "dtius", " dence", "daice", "fdek", "deloice", " duce", "sdrice", "ddouch", "dladdy", "dhuxe", "ddoice", " dip", "Dace", " duffy", "hdock", "darice", " dvice", "oduce", " dICE", "dbouse", "dlice", "picer", "dictice", " douse", "dalicy", "dace", "dhouse", "dbuke", "tdouse", "ddice", "didicer", "dlrice", "die", "dinky", "diinky", "dash", "odelve", "didouse", " dote", "bdouse", "dday", " douch", "ddelve", "dek", " die", "bdice", "dhicing", "picing", "daelve", "daouse", " dash", "deed", "pie", "diice", "dhuke", "sdodge", "pdouse", " dickle", "didodge", "deladdy", "cdrice", "dlelve", "bdicing", "ododge", "duxe", "diduce", "disuke", "due", "domaddy", "ldice", "dapee", "dgate", "sduxe", "dbicy", "odue", "duffy", "dbouch", "didpee", "dlouse", "duicer", "dalek", " doice", "diuffy", "diced", "disek", "pdice", "dataICE", "didgate", "doice", "dalickle", "pdrice", "dicy", "dlicy", " dock", "dtoice", "drouch", " dpee", "disicer", "pdie", "delice", "dlicer", "daue", "duke", "sdek", "domodge", "daaddy", "disence", "pice", "dalrice", "fdence", "dpee", "diuce", "divice", "didrice", "udicer", "fdice", "delodge", "udice", "dhodge", "hdice", "fdicer", "domelve", "daiced", "dius", "dictence", "domius", "hdienne", "ldICE", " dek", "pdock", "domrice", "drek", "druke", "dlickle", "diouch", "hdaddy", "daienne", "diie", "dalouse", " duxe", "ddue", "dluxe", " dicer", "dauke", "udip", "diicing", "cdvice", "pdoice", "diiced", "dbek", "daodge", "dence", "dote", "diaddy", "daicy", "sdoice", "diduke", "duie", "pdiced", "dicer", "daay", "ddodge", "dickle", "pdeed", " dinky", "tdicer", "diodge", "diicy", "day", "Dicer", "dioice", "dticer", "drrice", "douse", "oduxe", "dalelve", "domice", "dbice", "digate", "didace", "dicing", "daddy", "cdodge", "dhaddy", "dlodge", "duicing", "duice", "daluxe", "dboice", "domicer", "dICE", "deluke", " duke", " dicing", "fdoice", "dalouch", "dictouch", "dodge", "diicer", "delve", "bduxe", "didice", "delence", "daloice", "diock", "domoice", "diuke", "tdek", "pduke", "dataote", " daddy", " diced", "diienne", "daicer", "diek", "dalash"], "inst": ["sym", "cmp", "instance", "err", "INST", "typ", "ust", "dev", "const", "ind", "sim", "att", "exp", "obj", "co", "pl", "reg", "se", "sc", "sh", "self", "cont", "arr", "test", "ist", "dom", "ins", "elt", "fr", "pop", "exec", "Inst", "div", "tmp", "iat", "nd", "loc", "sta", "nt", "str", "aug", "rep", "seed", "txt", "src", "img", "val", "enc", "stick", "ord", "off", "gr", "ch", "rest", "und", "hw", "req", "desc", "inf", "ent", "attr", "pp", "pack", "train", "di", "sup", "rc", "acc", "inc", "mom", "sing", "rec", "sp", "anc", "dist", "conf", "int", "adj", "ame", "st", "bl", "orth", "proc"], "i": ["mi", "ki", "n", "xi", "x", "gi", "d", "p", "di", "ai", "I", "m", "batch", "ami", "bi", "qi", "ix", "ind", "f", "b", "multi", "ri", "si", "sim", "ii", "li", "key", "v", "ji", "ti", "s", "ini", "zi", "q", "pi", "u", "id", "j", "index", "y", "ij"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nb0=[]\\nb1=[]\\nfor i in range(n):\\n  if i%2==0:\\n    b0.append(a[i])\\n  else:\\n    b1.append(a[i])\\nif n%2!=0:\\n  b0=list(reversed(b0))\\n  b=b0+b1\\n  print(' '.join(map(str, b)))\\nelse:\\n  b1=list(reversed(b1))\\n  b=b1+b0\\n  print(' '.join(map(str, b)))\\n", "target": "601", "substitutes": {"n": ["nr", "N", "x", "nt", "ni", "gn", "d", "p", "norm", "ne", "g", "sn", "r", "c", "m", "z", "ns", "o", "nl", "f", "num", "t", "nia", "nb", "no", "mn", "na", "v", "nc", "nm", "nu", "nn", "l", "number", "np", "q", "ng", "j", "k"], "a": ["ia", "sta", "ae", "ac", "ab", "p", "arr", "va", "r", "c", "ma", "ata", "input", "ga", "o", "ea", "la", "aaa", "act", "abs", "isa", "auto", "alpha", "da", "att", "an", "all", "A", "at", "sa", "app", "au", "oa", "aa", "am", "area", "ba", "ca"], "b0": ["b5", "b000", "rb5", "ba60", "bis1", "bt0", " b3", "bc0", "bb0", "v2", "fb0", "bzero", "b8", "bi60", " b06", "bis02", "bb02", "b2", "rb000", "rb1", "bZero", "btzero", "bc1", "bis8", "bi1", "bbzero", "b60", "bc000", "bi0", "fb2", "b10", " b2", "chzero", "rb0", "v10", "bt2", "ba1", "b02", "ch06", "fbZero", " b02", "bazero", "bis0", "bb60", "ba0", " bzero", "basezero", "bizero", "base3", "h10", "fbzero", "ch0", "base06", "btZero", "ch3", " b10", "base0", "b3", "v1", "h2", "h0", "bb8", "bb5", "b06", " b8", "h1", "bb1", "v0", "bb000", "bc5", " bZero"], "b1": ["bOne", "b001", "v2", " bOne", " b31", "bb0", "fb11", "fb0", "b4", "erb6", "b8", "fb8", "b2", "bi1", "vOne", " b6", "v0", "bodyb", "bb001", "bi4", "v01", "body0", "a01", " b11", "ob4", "a4", "erb1", "B2", " b001", "ob31", "erb001", "B0", "bodyOne", "beta8", "b11", "fbart", "fb4", "bb", "body1", "betaOne", "biart", "bart", "b01", "bb01", "beta1", " bart", "v8", " b01", "fb1", "bi11", "B01", "bbOne", "v1", "b6", " bb", "ob01", "bb6", "fbOne", "B1", "erb0", "a31", "a1", "b31", "bb1", "bb2", "beta0", "ob1", " b4", "bbb"], "i": ["mi", "xi", "x", "ni", "ci", "gi", " j", "di", "ai", "I", "m", "batch", "bi", "info", "note", "yi", "ic", "o", "ix", "ip", "ind", "f", "num", "io", "si", "li", "key", "ji", "v", "ii", "ori", "ti", "int", "im", "it", "zi", "ini", "ui", "l", "pi", "u", "id", "j", "k", "index", "ij", "iri"], "b": ["bis", "body", "sb", "ab", "bar", "d", "db", "p", "beta", "blue", "r", "m", "batch", "bi", "wb", "pb", "fb", "ga", "rb", "bo", "mb", "h", "be", "aaa", "ob", "bh", "f", "br", "bc", "gb", "t", "nb", "bb", "v", "bt", "xb", "eb", "base", "cb", "l", "u", "j", "bs", "back"]}}
{"code": "W,H,x,y=map(int,input().split())\\nprint(W*H/2,int(2*x==W and 2*y==H))\\n", "target": "607", "substitutes": {"W": ["WT", "Window", "WC", "M", "N", "We", "T", "Win", "Word", "CW", "Widget", "NW", "R", "X", "World", "L", "w", "WW", "VW", "BW", "HTML", "Length", "Wil", "V", "TH", "Width", "Height", "S", "Wh", "Week", "SW", "B", "G", "Q", "P", "A", "D", "WM", "Y", "DW", "F", "Weight", "WS", "C"], "H": ["M", "CH", "HQ", "T", "HD", "His", "HL", "AH", "HE", "HS", "X", "HO", "HI", "HTML", "NH", "h", "HR", "DH", "V", "TH", "Height", "HH", "B", "J", "HA", "P", "OH", "IL", "HK", "D", "HC", "MH", "Y", "HB", "High", "HT", "He", "C"], "x": ["a", "wx", "xi", "ex", "to", "xc", "left", "ct", "X", "i", "rx", "image", "w", "ox", "my", "xt", "ix", "h", "tx", "ax", "xd", "v", "fx", "width", "at", "xy", "im", "xs", "mx", "dx", "l", "xx", "lat", "px", "xp", "xf"], "y": ["sy", "n", "client", "ty", "ys", "i", "cy", "w", "oy", "sys", "yo", "z", "ly", "m", "ies", "my", "ny", "py", "ye", "h", "sky", "hy", "b", "t", "yout", "yl", "ot", "uy", "v", "yn", "gy", "iy", "xy", "yt", "Y", "yy", "fy", "j", "ay", "ym"]}}
{"code": "n=int(input())\\n\\ndef output(x):\\n\tprint(x,flush=True)\\n\tnxt=input()\\n\tif nxt==\"Vacant\":\\n\t\texit()\\n\treturn nxt==\"Male\"\\n\\nLgen=output(0)\\nRgen=output(n-1)\\n\\nl=0\\nr=n-1\\nwhile True:\\n\tm=(l+r)//2\\n\tgen=output(m)\\n\tif gen==Lgen:\\n\t\tif (m-l)%2:\\n\t\t\tr=m\\n\t\t\tRgen=gen\\n\t\telse:\\n\t\t\tl=m\\n\t\t\tLgen=gen\\n\telse:\\n\t\tif (m-l)%2:\\n\t\t\tl=m\\n\t\t\tLgen=gen\\n\t\telse:\\n\t\t\tr=m\\n\t\t\tRgen=gen", "target": "344", "substitutes": {"n": ["a", "N", "nt", "d", "p", "names", "ne", "g", "i", "w", "c", "sn", "z", "ns", "o", "h", "f", "b", "num", "t", "nb", "mn", "out", "na", "v", "e", "nc", "s", "size", "q", "np", "k", "j"], "x": ["wx", "xi", "ex", "xe", "p", "g", "xc", "X", "xa", "i", "rx", "c", "ox", "z", "xt", "input", "h", "tx", "f", "t", "v", "e", "int", "fx", "cox", "xy", "xs", "abc", "q", "xx", "y", "px", "xp", "xf"], "nxt": ["next", "cnxt", "cnixt", "nwXT", "cnext", " nich", "nwext", " next", "mnich", "dnext", "cnich", "mnxt", "nuxt", "neext", "mnct", "mnext", "nuXT", "neich", "nXT", "dnixt", "nwyt", "nich", "dnich", "nuyt", " nyt", "nwxt", "nyt", " nixt", " nXT", "nect", " nct", "nuext", "nct", "dnxt", "nixt"], "Lgen": ["Lprim", "LLGen", "LLlet", "Rgener", "TLmin", "Rmin", "Jprim", "lgener", "RLGen", "MGen", " LGen", "RLgen", "Llif", "Lgener", "TLgener", "Mgener", "RLgener", "RLprim", "Sgener", "LGen", "lmin", "Mprim", "Jgener", " Llet", "JGen", "Llet", "LLgener", "Lmin", "SGen", "Sprim", "llif", "Rprim", "Mgen", "LLgen", "Rlif", "Sgen", "TLlif", "Jgen", "TLgen", "Rlet", "RGen", "lgen", " Lgener"], "Rgen": ["Rgate", "REGen", "Rgener", "Frgener", "RLGen", "LGEN", "Rdig", "RLgen", "Lgener", "RLgener", "Frgen", "Ggener", "Ldig", "LGen", "Lgate", "Hgen", "HGen", "Ggen", "FrGen", "Gdig", "RGEN", "Hdig", "REgen", "REGEN", "GGEN", "Hgener", "RLgate", "RGen", "Frgate", "GGen", "REgener"], "l": ["a", "lc", "lu", "kl", "tl", "ln", "d", "p", "ld", "ul", "g", "lb", "i", "L", "w", "ml", "dl", "o", "nl", "sl", "h", "ls", "f", "b", "t", "len", "rl", "lo", "lp", "li", "fl", "v", "s", "lr", "ll", "pl", "le", "u", "j", "y"], "r": ["a", "nr", "mr", "sr", "rr", "err", "ro", "d", "p", "g", "R", "rc", "i", "re", "w", "c", "rs", "rb", "o", "h", "ren", "pr", "vr", "br", "b", "f", "t", "rl", "dr", "v", "e", "ur", "rt", "lr", "q", "ar", "u", "j", "k", "rn", "er", "y", "ry", "rd"], "m": ["tm", "mi", "M", "mr", "perm", "mod", "dm", "d", "p", "mo", "mm", "mu", "mp", "fm", "g", "i", "re", "c", "ma", "z", "mut", "man", "bm", "o", "rm", "gm", "h", "ms", "f", "b", "t", "mc", "arm", "mac", "mn", "v", "e", "sm", "model", "vm", "s", "im", "wm", "q", "u", "j", "y", "er", "mt", "cm", "mk", "hm"], "gen": ["call", "ge", "gate", "load", "pub", "serv", "gem", "kin", "gn", "gc", "en", "run", "ne", "g", "get", "test", "eval", "forge", "jp", "iter", "kill", "gd", " GEN", "build", "ma", "z", "set", "birth", "old", "man", "read", "make", "gt", "gp", "lit", "save", "send", "val", "trans", "cmd", "go", "gin", "grow", "num", "GEN", "feat", "create", "len", "dig", "feed", "chrom", "out", "update", "cos", "msg", "gre", "eng", "new", "handle", "Gen", "rand", "mem", "phys", "ng", "reg", "lat", "gener", "seq", "generation", "init", "pg"]}}
{"code": "s = input()\\nw = int(input())\\na = ''\\nif len(s)%w == 0:\\n  b = len(s)//w\\nelse:\\n  b = len(s)//w+1\\n\\nfor i in range(b):\\n  a += s[i*w]\\nprint(a)", "target": "313", "substitutes": {"s": ["n", "sb", "sw", "self", "str", "js", "p", "g", "r", "us", "c", "ts", "z", "sys", "ns", "m", "rs", "ins", "less", "sl", "h", "ms", "ls", "f", "sp", "abs", "t", "ss", "S", "its", "v", "strings", "gs", "sq", "al", "ws", "string", "sa", "sv", "ims", "q", "sts", "ar", "cs", "os", "qs", "ds", "ps", "bs"], "w": ["wx", "sw", "d", "p", "write", "g", "wh", "we", "wt", "wed", "weight", "z", "m", "wb", "wr", "window", "iw", "rw", "wi", "W", "wd", "kw", "wo", "h", "wcs", "wal", "ew", "word", "f", "wl", "wid", "t", "win", "wa", "wp", "v", "width", "ws", "hw", "ww", "wm", "nw", "wk", "l", "q", "widget", "aw", "k", "ow"], "a": ["aq", "ia", "sta", "ae", "ab", "ta", "p", "name", "ai", "xa", "r", "c", "ma", "ata", "eas", "ga", "aux", "ea", "la", "aaa", "pa", "t", "alpha", "da", "apa", "na", "an", "A", "obj", "qa", "sa", "at", "au", "oa", "aa", "l", "am", "ba", "ca", "ac"], "b": ["bis", "body", "n", "sb", "ab", "bar", "d", "db", "g", "ib", "r", "c", "m", "bi", "wb", "bo", "rb", "mb", "h", "be", "ob", "bh", "br", "f", "bc", "t", "gb", "nb", "B", "bb", "v", "obj", "eb", "base", "cb", "l", "bp", "j", "y", "bound", "bs", "back"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "r", "c", "z", "m", "bi", "yi", "qi", "ip", "ind", "f", "si", "ii", "li", "ji", "v", "ti", "im", "zi", "ini", "ui", "q", "l", "pi", "u", "id", "j", "y", "k", "ij"]}}
{"code": "import math\\nn = int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\ne = int(input())\\n\\nl = min([a,b,c,d,e])\\nprint(5 + math.ceil(n/l) - 1)\\n", "target": "784", "substitutes": {"n": ["N", "x", "nt", "ln", "p", "names", "ne", "cn", "dn", "i", "r", "sn", "m", "ns", "nl", "num", "t", "nia", "nb", "na", "v", "nc", "nan", "new", "nu", "nn", "number", "np", "u"], "a": ["aut", "ia", "ae", "ac", "ab", "aj", "ai", "i", "r", "ma", "ga", "ea", "la", "be", "act", "da", "an", "A", "al", "at", "sa", "af", "aa", "am", "ar", "ba", "ca", "ao"], "b": ["sb", "bf", "ab", "db", "ib", "lb", "bi", "ca", "fb", "bo", "rb", "be", "ob", "abb", "br", "bc", "gb", "nb", "B", "bb", "eb", "bl", "cb", "aa", "ub", "y", "bs", "ba", "back"], "c": ["ec", "ce", "lc", "ci", "cd", "cn", "ct", "rc", "cod", "z", "fc", "dec", "col", "be", "cv", "bc", "dc", "sc", "nc", "cp", "ch", "cc", "co", "cb", "etc", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["db", "cd", "g", "di", "dh", "r", "dl", "dec", "dt", "df", "days", "t", "dc", "dat", "da", "dr", "de", "ad", "red", "dp", "dx", "D", "dd", "du", "id", "data", "ds", "nd"], "e": ["ec", "ce", "ek", "ex", "ge", "ae", "ie", "me", "err", "en", "ue", "pe", "ev", "el", "ye", "ea", "be", "oe", "ef", "eu", "ee", "exp", "up", "E", "eg", "est", "eb", "ed", "et", "se", "er", "es", "east"], "l": ["lc", "lu", "kl", "ln", "left", "i", "L", "long", "ml", "ly", "m", "dl", "el", "lit", "nl", "sl", "la", "ls", "hl", "lo", "fl", "li", "lp", "al", "lv", "ol", "ll", "pl", "le", "il", "line", "j", "lin"]}}
{"code": "d,g = map(int,input().split())\\npc = []\\nfor i in range(d):\\n    p,c = map(int,input().split())\\n    pc.append((p,c))\\nminimum = 2000\\nfor i in range(2**d):\\n    count = 0\\n    remain = g\\n    for j in range(d):\\n        if i >> j & 1:\\n            count += pc[j][0]\\n            remain -= (j+1)*100*pc[j][0]\\n            remain -= pc[j][1]\\n    highest = d*100\\n    while remain > 0 and highest >= 100:\\n        if not i >> (highest//100-1) & 1:\\n            if highest * pc[highest//100-1][0] >= remain:\\n                count += -(-remain//highest)\\n                remain -= -(-remain//highest)*highest\\n            else:\\n                count += pc[highest//100-1][0]\\n                remain -= pc[highest//100-1][0]*highest\\n        highest -= 100\\n    if remain <= 0:\\n        minimum = min(minimum,count)\\nprint(minimum)", "target": "125", "substitutes": {"d": ["fd", "a", "n", "x", "dos", "dm", "db", "di", "gd", "r", "w", "m", "z", "dl", "min", "h", "ind", "dt", "done", "f", "b", "df", "t", "dc", "da", "pd", "v", "e", "s", "dp", "D", "do", "div", "dq", "q", "l", "dim", "dd", "sd", "data", "ds"], "g": ["gg", "n", "ge", "gi", "gc", "gn", "get", "gd", "r", "bg", "w", "m", "z", "gt", "gp", "gm", "h", "tg", "f", "go", "b", "gb", "t", "G", "v", "e", "gs", "s", "eg", "q", "l", "fg", "y", "pg"], "pc": ["lc", "conn", "phy", "psc", "pm", "gc", "asc", "mp", "peg", "PC", "acs", "xc", "rc", "fps", "vp", "arc", "tc", "sys", "fc", "pb", "sec", "tp", "amps", "pr", "func", "pan", "enc", "vc", "bc", "mc", "icc", "dc", "anc", "chron", "pt", "lp", "resp", "isc", "nc", "mic", "soc", "roc", "cp", "eps", "conv", "ping", "cc", "cu", "proc", "pic", "cs", "px", "pn", "qs", "pp", "ps", "xp", "sync", "sc"], "i": ["ki", "xi", "ia", "ni", "ie", "ci", "gi", "di", "ian", "ai", "I", "jp", "ation", "bi", "ico", "yi", "iti", "itude", "ic", "o", "ip", "ici", "ile", "b", "ri", "io", "si", "li", "ii", "ji", "ei", "v", "ti", "oi", "im", "it", "ini", "zi", "ity", "phi", "pi", "ati", "il", "l", "asi", "fi", "y", "ij", "ik", "iu"], "p": ["press", "pard", "vp", "jp", "r", "m", "pe", "pb", "par", "o", "ip", "pa", "h", "pr", "pan", "b", "part", "pt", "parse", "lp", "pid", "v", "P", "ap", "ph", "cp", "ping", "pl", "l", "np", "u", "pers", "er", "pn", "pp", "pro", "pg"], "c": ["ec", "ce", "con", "lc", "cat", "cd", "rc", "r", "tc", "m", "h", "b", "bc", "t", "dc", "can", "v", "cin", "cache", "cos", "cp", "ch", "com", "cc", "co", "cb", "l", "u", "cs", "cr", "cf", "C", "ac"], "minimum": ["variable", "Maximum", "summary", "expression", "information", "multiple", "requisite", "required", "method", " maximum", "reset", "Minimum", "common", "value", "approximately", "position", "length", "period", "m", "reshold", "minute", "total", "message", "min", "low", "second", "portion", "output", "negative", "result", "capacity", "limit", "termination", "integer", "initial", "frequency", "memory", "lower", "margin", "please", "width", "sufficient", "maximum", "directory", "average", "reference", "meter", "number", "range", "may", "document", "within"], "count": ["next", "hold", "find", "n", "complete", "call", "scroll", "summary", "consider", "um", "offset", "gc", "table", "cycle", "reset", "code", "common", "ount", "position", "length", "weight", "current", "full", "process", "total", "success", "val", "result", "ind", "core", "limit", "num", "time", "frequency", "force", "amount", "list", "cache", "now", "found", "group", "cast", "size", "counter", "number", "command", "Count", "collection", "index", "rate", "last", "sum"], "remain": [" remum", "resrain", "resaining", " remrain", "Remrain", "remum", "promaining", "respain", "Remena", "clearain", "remains", " remaintain", "reshaintain", "remained", "memains", " remaining", "memaining", "remaint", "remaintain", "promrain", "pmrain", "pmaining", "restain", "reshaining", "memaint", " remained", "promum", "reshrain", "REMain", " remail", "reshained", "memain", "respaint", "Remains", "Remain", " remena", "pmaint", "pmain", "clearrain", "REMrain", "REMaintain", "restena", "remaining", "promain", "REMail", "Remaint", " remains", "Remained", "restrain", "respaining", "remrain", "resprain", "resain", "restaint", "REMaining", "REMaint", "Remail", "remail", " remaint", "memrain", "remena", "REMained", "Remum", "reshain", "clearaining", "Remaining"], "j": ["json", "n", "x", "uj", "ja", "ijk", "js", "aj", "jp", "job", "iaz", "r", "jc", "oj", "z", "m", "jj", "ju", "o", "h", "jl", "fr", "b", "jac", "br", "t", "J", "bj", "kj", "ji", "v", "jas", "obj", "s", "jump", "q", "l", "dj", "u", "y", "jit", "ij"], "highest": ["top", "void", "hs", "hyper", "boost", "bid", "nil", "inished", "v", "older", "wrapper", "last", "history", "Maximum", "max", "Hig", "rise", "latest", "huge", "largest", "weak", "mother", "status", "higher", "hest", "parent", " Highest", "hl", "volume", "FINEST", "hist", "hop", "sufficient", "each", "hover", "ho", "peak", "historic", "single", "master", "fresh", "leader", "successful", "via", "worst", "graph", "hu", "that", "h", "gh", "alpha", "depth", "most", "hub", "height", "lvl", "high", "peer", "verified", "target", "highly", "hold", "reverse", "always", "effective", "above", "view", "prime", "http", "meet", "density", "final", "width", "majority", "maximum", "tt", "hend", "increasing", "strong", "best", "High", "strength", "upper", "Higher", "hi"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().strip()\\ndef mapint(): return map(int, input().split())\\nsys.setrecursionlimit(10**9)\\n\\nN = int(input())\\ns = set()\\nfor _ in range(N):\\n    s.add(int(input()))\\n\\nlis = list(s)\\nlis.sort()\\nprint(len(lis))", "target": "347", "substitutes": {"N": ["SN", "n", "M", "NS", "NV", "NC", "GN", "NI", "Na", "Ns", "R", "I", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "No", "NUM", "S", "NE", "B", "ND", "Num", "P", "Sn", "D", "NB", "Len", "Ni", "K", "TN"], "s": ["n", "sb", "ols", "ys", "services", "ats", "js", "eds", "fs", "i", "hs", "sels", "ts", "ns", "ies", "rs", "ks", "ses", "ins", "ms", "ls", "gins", "t", "ss", "its", "plays", "gs", "sq", "ws", "sa", "st", "xs", "sv", "aunts", "sts", "l", "sets", "vs", "cs", "qs", "ds", "bs"], "_": [" j", "__", " g", " l", " c", " __", " you", " p", "j", "k"], "lis": ["mes", "bis", "los", "ols", "els", "dos", "sit", "js", "lor", "alis", "xes", "ilings", "ils", "aus", "les", "lets", "sels", "hs", "mails", "isi", "dl", "yi", "nl", "leys", "ls", "jl", "ris", "lists", "iris", "als", "lp", "lus", "ti", "xs", "mx", "l", "sis", "lies", "tis", "alities", "lems", "ills", "qs", "pins", "LS", "lins"]}}
{"code": "from collections import defaultdict\\ndef build_tree(N, edges):\\n    root_list = [i for i in range(N)]\\n    for p, q in edges:\\n        p -= 1\\n        q -= 1\\n        root_p = get_root(root_list, p)\\n        root_q = get_root(root_list, q)\\n        root_now = min(root_p, root_q, p)\\n        root_list[p] = root_now\\n        root_list[q] = root_now\\n        root_list[root_p] = root_now\\n        root_list[root_q] = root_now\\n    return root_list\\n\\ndef get_root(root_list, city):\\n    if root_list[city] == city:\\n        return city\\n    else: \\n        root_list[city] = get_root(root_list, root_list[city])\\n        return root_list[city]\\n\\nif __name__ == '__main__':\\n    N, K, L = map(int, input().split())\\n    roads = [None]*K\\n    rails = [None]*L\\n    for k in range(K):\\n        roads[k] = list(map(int, input().split()))\\n    for l in range(L):\\n        rails[l] = list(map(int, input().split()))\\n    \\n    \\n    '''N = 2*10**5\\n    L = int(N/2)\\n    K = int(N/2)\\n    roads = [None]*K\\n    rails = [None]*L\\n    for i in range(L):\\n        roads[i] = [2*i, 2*i+1]\\n    for i in range(K):\\n        rails[i] = [2*i, 2*i+1]'''\\n    \\n    road_roots = build_tree(N, roads)\\n    rail_roots = build_tree(N, rails)\\n    \\n    railroads = defaultdict(int)\\n    RR = []\\n    for n in range(N):\\n        rr = (get_root(road_roots, n), get_root(rail_roots, n))\\n        RR.append(rr)\\n        railroads[rr] += 1\\n    answer = [railroads[key] for key in RR]\\n    print(' '.join(map(str, answer)))", "target": "21", "substitutes": {"N": ["SN", "CNN", "M", "NS", "T", "NL", "NC", "GN", "NI", "Ns", "R", "I", "X", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "V", "NO", "NOTE", "S", "NE", "Some", "B", "J", "Q", "Scott", "G", "Num", "P", "A", "D", "NB", "Y", "MN", "Names", "Ni", "AN", "TN", "Note", "NG", "C"], "edges": ["edsge", "Edgments", "sedge", "Edges", " edpes", "Edpes", "wedgments", "sedGES", "edgments", "edge", "edsGES", "Edge", "wedge", "sedgments", " edgments", "edpes", " edge", "wedpes", "edGES", "wedges", "EdGES", "edsges", "edsgments", "sedges"], "root_list": ["rootingspec", "rootlistlevel", "root__List", "rootmatlist", "oot_parent", "root2part", "rootlistlist", "root2lists", " root_pair", "root2log", "root09pair", "mount_log", "root_lists", "dot_lists", "mount_lists", "root___no", "root09number", "root_li", "rootingLIST", "mountwlists", "Root_list", "root___array", " root2list", "rootlylist", " root_listed", " root__array", "row09number", " root_LIST", "home_li", "roots_lists", "root_array", "home___list", "rootrenlists", "home_list", "rootwlists", " root_List", "Root_lists", "root___chain", "dot_LIST", "root67number", "Root_LIST", " root__list", "rootwpool", "mount_list", "rootlistinfo", "oot_list", " root2List", "rootmatli", " root2lists", "root_info", " root__List", "rootingList", "root_log", "rootrenlog", "root_chain", "rootinglist", "root7part", "root_l", "row_pair", "Root_def", "root_level", "rootmatno", "dotlyLIST", "root_pool", "row_list", "row_lists", "dot_List", "rootlistList", "mountwlist", "rootlistlisted", "dotlylist", "rootlyLIST", "root_spec", "root_def", "root_all", " root_def", "root__LIST", "root09list", "root67list", "root_number", "roots_List", "root___List", " root_info", "rootwlog", "root67lists", "root2list", "rootrenpool", "mountwlog", "roots_list", " root2def", "root_no", "root7list", "root67pair", "oot_all", "rootlyList", "row09list", "home___no", "home___chain", "home_chain", "root_listed", "root2List", "row_number", "oot_level", "root_List", "root___LIST", "mountwpart", "rootwpart", "dotlylists", " root__LIST", " root_spec", "home___li", " root_lists", "root_parent", "rootlistall", "root7log", "root09lists", "roots_log", "dot_list", "root__list", "root___list", "rootwlist", "roots_pool", "row09pair", " root_array", "root7lists", "home_no", "root_part", "root_LIST", "root2def", "row09lists", "mount_part", "root_pair", "dotlyList", "rootmatchain", "rootlylists", " root_l", "rootrenlist", "rootlistparent", "root___li", "root__array"], "i": ["a", "ki", "xi", "x", "ia", "ijk", "ci", "gi", "ir", "d", "g", "di", "ai", "I", "r", "c", "m", "iti", "ic", "o", "ip", "b", "t", "si", "li", "ii", "int", "ti", "iy", "im", "it", "zi", "ini", "pi", "phi", "il", "u", "id", "ati", "j", "y", "fi", "ij", "ik", "iu", "hi"], "p": ["a", "pkg", "x", "pair", "press", "path", "port", "point", "d", "ep", "pc", "g", "r", "pre", "c", "m", "pe", "pb", "o", "tp", "pa", "ip", "h", "pr", "pan", "b", "t", "part", "pt", "lp", "pid", "pos", "v", "P", "e", "up", "ap", "at", "cp", "s", "peer", "pi", "pl", "u", "j", "y", "pn", "pp", "pro", "ps", "pg"], "q": ["aq", "a", "ck", "qv", "ql", "ue", "g", "iq", "qu", "qt", "r", "w", "c", "z", "m", "pe", "qi", "query", "o", "h", "f", "b", "t", "Q", "v", "e", "sq", "qq", "eq", "qa", "s", "cp", "dq", "u", "y", "j", "quest", "qs", "ry", "pg"], "root_p": ["root_pid", " root2pro", " root2p", "rootfulsp", "rowxn", "row_n", "rootxp", " root_sp", "rank_pid", " root_pro", "root_up", "rank_l", "rootxq", "root_l", " root_up", "row_pair", "rootPpid", "rankPl", "rootfulup", "rankPu", "root2up", "rootPl", "root2p", "root_sp", "root_pro", "root2sp", "rankPp", "rowxpair", "rankPpid", "rank_p", "rootxpair", "root_pair", "rootxn", "rootPu", "rowxp", "row_p", "rowxq", "row_q", " root2up", "root_u", "rank_u", " root2sp", "rootfulp", "root2pro", "rootPp", "rootfulpro", "root_n"], "root_q": ["root_k", "rootjp", "parent_q", "parent_qq", "rootjqq", "stop_qs", " root_qq", "stop_k", "root_g", "stop_p", "rootjq", "rootjr", "parent_p", " root_g", "stop_q", "root_qq", "root_r", "parent_r", "root_qs"], "root_now": ["root_Now", "root__less", "root_time", "power_today", "root_down", " root_Now", "power_next", " root_full", "root__now", " root_here", "root_here", "Root_Now", "root_current", "Root_less", " root_time", "Root_time", "Root_now", " root_down", "root__Now", "root_full", "Root_current", "Root_here", "power_now", "root__time", "root_less", "root__current", "root_zone", "root_today", "root__here", "root_next", "power_zone"], "city": ["loc", "country", "lc", " CITY", "ce", "state", "local", "circle", "path", "area", "port", "point", "name", "capital", "code", "cy", "long", "City", "tc", "zone", "c", "south", "ox", "region", "unit", "connection", "section", "z", "prison", "parent", "box", "ic", "col", "pool", "core", "container", "root", "dc", "pt", "address", "division", "location", "co", "town", "collection", "size", "quote", "lat", "pot", "network", " cities", "weather", "citizens", "zip", " City"], "K": ["Ak", "M", "T", "KN", "KR", "R", "I", "X", "KK", "DK", "KT", "Ko", "Kin", "H", "W", "KER", "V", "KS", "PK", "Kent", "S", "B", "J", "Q", "SK", "G", "KB", "P", "VK", "NB", "King", "Y", "UK", "KI", "Z", "KE", "KA", "KING", "C"], "L": ["LB", "dL", "M", "NL", "DL", "T", "List", "LIN", "ln", "PL", "SL", "R", "I", "LC", "LR", "Length", "H", "W", "LA", "LU", "LD", "V", "S", "LT", "B", "J", "Q", "ML", "Li", "G", "LI", "Long", "P", "E", "LV", "LG", "Lu", "D", "LAN", "CL", "Y", "LL", "Len", "LE", "LM", "LS", "Z", "LP", "EL", "C"], "roads": ["pieces", "ways", "uments", "planes", "ards", "makers", "doors", "helps", "feet", "rones", "lines", "photos", "https", "uds", "marks", "boxes", "blocks", " Roads", "chains", "maps", "games", "ves", "grades", "yards", "hops", "orders", "plays", "storms", "results", "rings", "chairs", "posts", "houses", "shots", "steps", "tracks", "works", "holes", "ays", "eps", "craft", "ands", "places", "loads", "rows", "drivers", "ps", "nuts", "views", "road", "points"], "rails": ["raails", "hailes", "roiries", "haves", "taails", "rairies", "roails", "tails", "roves", "wrairies", "hails", "strail", "araves", "trails", "railes", "tail", "strails", "traails", "straves", "haicides", "tailes", "trail", "roil", "trailes", "trairies", "rail", "arails", "traves", "wraails", "araicides", "roils", "roiles", "wrail", "raves", "roicides", "raicides", "wrails", "straails", "arailes"], "k": ["ck", "km", "ki", "kn", "uk", "kr", "kh", "kl", "ijk", "kin", "kar", "ak", "ke", "kid", "m", "z", "dk", "ks", "h", "ko", "kok", "ok", "s", "it", "ikk", "ku", "ark", "kat", "kt", "u", "kk", "id", "sk", "ka", "ik", "j", "unk"], "l": ["loc", "lc", "lu", "lf", "kl", "ln", "ld", "lt", "g", "left", "lb", "long", "c", "ml", "ly", "m", "el", "o", "nl", "sl", "h", "la", "lay", "ls", "hl", "yl", "len", "lo", "lp", "li", "v", "lv", "ol", "ll", "il", "le", "line", "j", "lin"], "road_roots": [" roadpyboxes", " road_boxes", " road_rings", "rootpystones", "roadpynames", "road7rings", "root_ns", " roadpyroots", "roadpyrings", "road_banks", "road64ns", "root_banks", "road7boxes", "roadsroots", "road_rings", "roadpyboxes", "roadpyns", "road7names", "road7roots", "road_names", "road64banks", "road_boxes", "roadpystones", " road_names", "roadpyroots", "road_ns", "road64roots", "road_stones", " roadpyrings", "roadsstones", "road64stones", " roadpynames", "roadsbanks", "root_stones", "roadsns", "rootpyroots", "root_roots", "rootpybanks", "roadpybanks", "rootpyns"], "rail_roots": ["railpylines", "rain_roots", "alt_roots", "railMmods", "rail_stones", "alt_boxes", "rail_mods", "rain_stones", "rail_chains", "rail_values", "railMvalues", "rain_values", "rain_mods", "alt_lines", "railpychains", "railMstones", "alt_chains", "railpyroots", "railpyboxes", "rail_boxes", "railMroots", "rail_lines"], "railroads": ["playerroads", "consoleholes", "Railways", "goldholes", "railholes", "railtracks", "boltroads", "raingrades", "goldways", "consolerings", "playerrings", "railgrades", "railresults", "Railholes", "rainroads", "consoleroads", "goldrings", "playergrades", "goldroads", "rainresults", "consolegrades", "Railtracks", "raintracks", "boltrings", "bolttracks", "playerresults", "rainrings", "Railroads", "Railrings", "consoleresults", "boltgrades", "railways", "Railgrades", "railrings", "consoleways"], "RR": ["WER", "URN", "WR", "TR", "RB", "RG", "JR", "IOR", "R", "RS", "ATHER", "RW", "ANK", "RM", "NR", "ACK", "DR", "rs", "RA", "RAW", "RE", "LR", "ARR", "HR", "IR", "ARA", "AR", "ER", "BR", "DERR", "REL", "VR", "UR", "TRY", "RC", "RP", "WORK", "RO", "ROR", "SR", "RD", "MR"], "n": ["nr", "x", "ni", "nt", "ln", "on", "name", "ne", "dn", "sn", "r", "c", "m", "ns", "o", "nl", "fn", "num", "nb", "mn", "ot", "na", "an", "yn", "v", "nm", "nan", "node", "nu", "nn", "ng", "j", "y", "rn", "pn", "nd"], "rr": ["rid", "nr", "mr", "rio", "sr", "kr", "err", "rg", "ir", "ror", "ird", "rx", "r", "repl", "rh", "rs", "rb", "rm", "rer", "yr", "pr", "vr", "rar", "fr", "ri", "nder", "rl", "bb", "rol", "dr", "rack", "ier", "raf", "rt", "lr", "hr", "irt", "Mr", "rn", "rpm", "adr", "rd"], "answer": ["amber", "comment", "Answer", "pair", "wer", "option", "oval", "order", "value", "entry", "r", "input", "message", "output", "remember", "rain", "result", "description", "word", "rent", "response", "record", "review", "address", "search", "rack", "rank", "string", "row", "question", "ry", "adder", "reply", "error", "offer", "rn", "array", "root", "answered", "interpret", "request"], "key": ["keys", "x", "Key", "pair", "kr", "ro", "str", "KEY", "name", "order", "air", "value", "rx", "r", "ox", "res", "rm", "ip", "val", "vr", "right", "ri", "rl", "ey", "row", "rt", " r", "rand", "item", "id", "y", "j", "er", "attr", "ry", "ring"]}}
{"code": "class dice_2:\\n    def __init__(self,label):\\n        self.spots = label\\n\\n    def result(self,top,front):\\n        if self.spots.index(top)+1 == 1:\\n            self.order=[2,3,5,4,2]\\n        elif self.spots.index(top)+1 == 2:\\n            self.order=[6,3,1,4,6]\\n        elif self.spots.index(top)+1 == 3:\\n            self.order=[2,6,5,1,2]\\n        elif self.spots.index(top)+1 == 4:\\n            self.order=[2,1,5,6,2]\\n        elif self.spots.index(top)+1 == 5:\\n            self.order=[1,3,6,4,1]\\n        elif self.spots.index(top)+1 == 6:\\n            self.order=[2,4,5,3,2]\\n\\n        for i in range(4):\\n            if self.order[i] == self.spots.index(front)+1:\\n                self.right = self.order[i+1]\\n\\n    def output(self):\\n        print(self.spots[self.right-1])\\n\\nlabel = list(map(int,input().split()))\\ndice = dice_2(label)\\nfor i in range(int(input())):\\n    top,front = map(int,(input().split()))\\n    dice.result(top,front)\\n    dice.output()", "target": "667", "substitutes": {"self": ["body", "n", "json", "cmp", "x", "instance", "err", "context", "p", "mp", "left", "r", "dev", "config", "empty", "close", "private", "disk", "unknown", "e", "your", "obj", "compl", "app", "new", "q", "book", "pl", "np", "se", "history", "pkg", "sw", "any", "me", "local", "ln", "own", "test", "this", "wh", "object", "sql", "full", "my", "ann", "prefix", "parent", "shape", "ins", "py", "bind", "also", "console", "soc", "s", "tmp", "cl", "user", "ass", "python", "thus", "nt", "attribute", "db", "names", "spec", "raw", "txt", "sys", "ref", "subject", "asm", "make", "xml", "graph", "h", "you", "tk", "form", "parts", "review", "resp", "eth", "add", "all", "github", "cache", "terms", "ssl", "hw", "partial", "public", "high", "os", "attr", "Self", "views", "th", "name", "sub", "view", "rem", "details", "rs", "by", "ren", "rec", "ls", "tag", "rel", "agg", "ws", "links", "conv", "au", "proc"], "label": ["loc", "body", "comment", "els", "abel", "local", "str", "frame", "name", "left", "color", "value", "L", "cell", "position", "ox", "leaf", "module", "el", "prefix", "box", "col", "term", "ind", "tag", "place", "yl", "inner", "style", "key", "out", "list", "string", "lab", "model", "msg", "ell", "node", "group", "desc", "title", "l", "plot", "line", "layout", "LAB", "link", "Label", "data", "text", "field"], "spots": ["splhots", " sprots", "spliles", "espoots", "ispshots", "plrots", "scots", "splops", "sphots", "spaceoops", "shhots", "plshots", "splolars", "splaces", "shots", "spirts", "Spaces", "spiders", "slicks", "spacerots", " spshots", "esprots", "splicks", "spops", "spliders", "shices", "spotos", " spops", " spaces", "shshots", "splotos", "sporns", "scrots", "isprots", "places", " spoots", " spirts", "snapots", "espoops", "copshots", "expaces", "spaces", "copots", "spolars", "snapolars", "Sprots", "espots", "spaceorns", "spiles", "Spots", "cophots", "splirts", "sploops", "splots", "spaceots", "splrots", "expots", "splorns", "sploots", "snapotos", "spoops", "slots", "espotos", "splices", "expicks", "spices", "splshots", "sciders", "expiles", "snapirts", " spolars", "sliles", "snapoots", "slaces", "snaprots", "esporns", "spshots", "spoots", "scshots", "ispops", "sprots", "Spiders", "plots", "copices", "spicks", "ispots", "Spshots"], "top": ["client", "master", "x", "to", "onet", "path", "p", "on", "above", "frame", "table", "head", "left", "tops", "this", "test", "typ", "template", "html", "jp", "cell", "tip", "bot", "current", "TOP", "parent", "tp", "host", "bottom", "sp", "t", "hl", "part", "pt", "lower", "ot", "home", "null", "pop", "soc", "at", "Top", "st", "it", "node", "first", "tf", "high", "org", "ster", "toc", "title", "l", "user", "lat", "there", "best", "hot", "op", "prototype", "upper", "root", "back", "ft", "tool"], "front": ["Front", "fore", "next", "header", "body", "nt", "path", "vert", "lead", "cont", "frame", "head", "left", "forward", "foreign", "cell", "contact", "foot", "mobile", "outer", "face", "tail", "result", "f", "bottom", "fr", "br", "main", "lower", "ot", "off", "ff", "out", "cart", "forth", "int", "at", "st", "end", "first", "bill", "here", "boot", "ster", "origin", "index", "data", "upper", "back", "ft", "field", "start"], "order": ["history", "header", "before", "domain", "err", "random", "offset", "dir", "cycle", "where", "name", "score", "code", "rev", "Order", "iter", "zero", "seed", "position", "scale", "radius", "align", "ordered", "properties", "info", "only", "type", "shape", "graph", "priority", "default", "log", "description", "result", "trace", "orders", "ord", "depth", "force", "style", "address", "key", "grid", "rank", "cache", "row", "orient", "group", "desc", "direction", "dim", "enter", "error", "id", "index", "sort", "er", "side", "root", "sequence", "after", "field", "use"], "i": ["mi", "n", "xi", "x", "uri", "me", "ci", "gi", "cli", "p", "g", "di", "ai", "I", "r", "c", "z", "m", "bi", "yi", "qi", "ic", "ix", "o", "ip", "h", "f", "b", "multi", "si", "iu", "li", "ii", "ji", "v", "ori", "ei", "ti", "im", "it", "s", "ini", "zi", "ui", "phi", "pi", "l", "u", "id", "j", "index", "y", "ij", "iri", "hi"], "right": ["over", "reverse", "max", "before", "correct", "ro", "mid", "path", "middle", "local", "Right", "left", "R", "shift", "r", "full", "success", "res", "step", "outer", "result", "internal", "out", "rights", "rank", "row", "third", "width", "red", "clear", "end", "rt", "error", "id", "index", "ight", "upper", "root", "back"], "dice": ["cdICE", "dicer", "drice", "indICE", "indce", "pICE", " dICE", "deicer", "Dicer", "picer", "deice", " drice", "cdice", "pice", "dicing", " dote", "udicing", "udicer", "indice", "udice", "dICE", "derice", " dicing", "cdicing", "pce", "Dote", "indicer", " dce", "dce", "Drice", "Dice", "cdicer", " dicer", "udICE", "deote", "dote"]}}
{"code": "import sys\\n\\nn, *xyh = map(int, sys.stdin.read().split())\\nxyh = list(zip(*[iter(xyh)] * 3))\\n\\ndef contradict(cx, cy, ch, x, y, h):\\n    return max(ch - abs(x - cx) - abs(y - cy), 0) != h\\n\\ndef main():\\n    for x, y, h in xyh:\\n        if h: x0, y0, h0 = x, y, h; break\\n\\n    for cx in range(101):\\n        for cy in range(101):\\n            ch = h0 + abs(cx - x0) + abs(cy - y0)\\n            for x, y, h in xyh:\\n                if contradict(cx, cy, ch, x, y, h): break\\n            else:\\n                print(cx, cy, ch)\\n                return\\n\\nif __name__ ==  '__main__':\\n    main()", "target": "114", "substitutes": {"n": ["N", "net", " io", "d", " np", "name", "ct", "r", " go", "c", "ns", " number", "o", "num", "t", "io", "nb", " names", "na", " ne", " ns", "stock", "l", "np"], "xyh": ["oxyph", "wyx", "oxyz", "oxyg", "oxyhr", "xyz", "oxyx", "fooh", "fohr", "wyhl", "zxph", "wyg", "wyhe", "oxyha", "myv", "zxh", "wyph", "oxyH", "foH", "mieh", "myh", "oxyht", "oxyh", "xyph", "oxyoh", "foph", "wyH", "xyg", "fox", "xyha", "dimH", "fohe", "wyht", "oxyv", "xyhl", "dimoh", "xyH", "dimhr", "wyha", "oxyhl", "wyz", "mieg", "oxyhe", "dimh", "miehl", "xyht", "foh", "xyx", "zxv", "xyoh", "xyhr", "xyv", "xyhe", "foz", "foht", "wyh", "mieha", "myph"], "cx": [" cxx", "ncxf", "ctx", "lcX", "ccwx", "xcx", "Cxs", "ccxs", "cxi", "ncx", "cmX", "ncwx", "cxf", "ncxx", "cty", "cwx", " cX", "cxc", "icxc", "ccrx", "csrx", " cwx", "csx", "ccx", "lcwx", "lcrx", "ccxx", "cxs", " cxi", "cog", "curx", "Cfx", "rcx", "icv", "ccv", "lcxc", "cxe", "csxs", "cmxi", "cxx", "cX", "csv", " cxf", "lcfx", "Cy", "ccxf", "Cxc", "csxc", "cmog", "ctrx", "curxi", "CX", "ctwx", "rcwx", "ccy", "xcfx", "cv", "crx", "lcx", "curX", "xcxc", "cfx", "rcy", "ccxe", "lcy", "Cx", "xcX", " cog", "csxe", "Cxe", "icrx", "icx", "ccxc", "curog", "cmx", "rcrx", "csy"], "cy": ["sy", "ce", "cle", "ty", "ci", "ym", "cow", "cd", "euro", "ury", "xc", "cycle", "wy", "oy", "ky", "c", "ox", "ly", "ico", "my", "ny", "cry", "iw", "vy", "py", "ye", "col", "yr", "sky", "ery", "hy", "axy", "vc", "ocy", "icy", "yl", "uy", "coe", "yn", "cin", "gy", "xy", "cus", "sty", "cer", "cu", "yt", "fy", "yy", "yx", "yu", "cm", "cr", "ay", "ry"], "ch": ["history", "ht", "CH", "sh", "th", "kh", "che", "p", "ach", "ct", "ech", "i", "chi", "html", "wh", "cell", "c", "chid", "z", "ih", "zh", "cho", "och", "cor", "tch", "chan", "col", "pr", "Ch", "br", "b", "sch", "t", "cht", "conf", "v", "cha", "height", "ich", "hash", "ph", "cp", "char", "he", "chy", "q", "l", "cl", "chn", "k", "j", "cm", "cr", "mk", "chu"], "x": ["wx", "xi", "ex", "to", "any", "Ax", "d", "p", "xes", "example", "ux", "xc", "X", "xa", "i", "rx", "image", "w", "c", "ox", "z", "m", "xxxx", "Ex", "xt", "xml", " ax", "el", "ix", "o", "tx", "ax", "f", "xd", "t", " dx", "zx", "v", "e", "fx", "at", "xy", "im", "xs", "mx", "dx", "inx", "nex", "l", "xx", "yx", "lex", "px", "op", "xp", "xf"], "y": ["sy", "asy", "ty", "ys", "ci", "yer", "ym", "wy", "i", "oy", "ky", "c", "yo", "ly", "ies", "my", "ny", "vy", "hey", "o", "ye", "py", "by", "yr", "sky", "ery", "hy", "axy", "b", "yout", "yl", "ot", "uy", "yn", "ey", "gy", "iy", "xy", "ity", "yt", "fy", "yy", "ya", "ay", "ry"], "h": ["history", "ht", "th", "sh", "header", "ith", "kh", "p", " inh", "g", "i", "html", "wh", "w", "hs", "r", "c", "z", "m", "ih", "zh", "rh", "help", "http", "o", "H", "host", "ah", "pr", "eh", "bh", "f", "b", "uh", "hl", "t", "hp", "v", "e", " H", "hist", "oh", "has", "hash", "ha", "ph", "he", "hr", "high", "hd", "q", "ho", "l", "hh", "j", "k", "hi", "hm"], "x0": ["ex00", "x00", "xM", "xc0", "ex0", "xcM", " xM", "xxZero", "ix00", "oxM", "ix0", "xx00", "xx0", "exZero", "xZero", "ox0", "ixZero"], "y0": ["y1", "y2", "yZero", "myk", "ch1", "chZero", "my0", "h00", "cyZero", "hZero", "y00", "yk", "cyk", "x1", "my1", "cy1", "ch0", "cy00", "x2", "my2", "ch00", "h1", "xk", "cy0", "cy2"], "h0": ["y1", "hi2", "ah0", "ah8", " h00", "H2", "h00", " h1", "ah00", "y00", "ah1", " h2", "hnull", "hi1", "y8", " hnull", "hinull", "Hnull", "H0", "H1", " h8", "h2", "h1", "h8", "hi0"]}}
{"code": "a,b = map(int,input().split())\\nc=\"\u5165\u529b\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059\u3002\"\\nd=\"\u9db4\u304c\"\\ne=\"\u5339\u3067\u3001\u4e80\u304c\"\\nf=\"\u5339\u3067\u3059\u3002\"\\n \\nk=b//2-a\\nt=2*a-b//2\\nif k<0 or t<0 or b%2!=0:\\n    print('No')\\nelse:\\n    print('Yes')", "target": "190", "substitutes": {"a": ["n", "x", "ae", "ac", "ab", "p", "g", "i", "w", "r", "z", "m", "da", "an", "v", "A", "at", "s", "ao", "au", "oa", "div", "aa", "l", "am", "u", "y", "ba", "ca"], "b": ["n", "sb", "x", "bf", "ab", "p", "db", "g", "i", "r", "m", "z", " B", "bi", "bd", "fb", "rb", "o", "h", "be", "bc", "nb", "B", "bb", "v", "bt", "s", "cb", "l", "y", "j", "bs", "ba"], "c": ["n", "p", "cd", "g", "cn", "i", "r", "w", "m", "z", "o", "h", "bc", "dc", "v", "s", "cb", "l", "u", "y", "ca", "C", "ac"], "d": ["fd", "n", "x", "ie", "p", "g", "i", "r", "w", "m", "dt", "df", "dc", "da", "de", "v", "dp", "D", "l", "dd", "j", "y", "ds"], "e": ["ec", "n", "x", "ex", "ae", "ie", "p", "g", "i", "r", "em", "o", "ea", "\u00e9", "h", "ee", "de", "E", "ed", "et", "l", "er", "es", "y"], "f": ["fd", "n", "x", "g", "i", "w", "z", "m", "o", "h", "fa", "df", "fe", "fl", "ff", "v", "tf", "q", "l", "u", "j", "y", "F"], "k": ["ck", "ki", "n", "x", "kr", "p", "g", "ak", "i", "ke", "w", "r", "z", "m", "o", "kw", "ko", "kj", "v", "ok", "s", "ku", "q", "u", "kk", "j", "sk", "K", "y", "ik", "ka", "mk"], "t": ["n", "x", "ty", "T", "ta", "p", "g", "i", "w", "r", "tc", "ts", "m", "z", "o", "te", "tp", "h", "dt", "tg", "ot", "tu", "v", "bt", "at", "tt", "it", "s", "tf", "st", "tr", "l", "j", "y"]}}
{"code": "\\narr = map(int, raw_input().split())\\n\\nprint(\"%d %d\" % (arr[0] * arr[1], arr[0] * 2 + arr[1] * 2))", "target": "303", "substitutes": {"arr": ["arg", "alph", "err", "db", "ang", "hz", "txt", "sys", "vals", "img", "my", "inst", "gt", "ix", "upper", "aaa", "cur", "annot", "elt", "enc", "fr", "br", "gb", "dat", "agg", "args", "ord", "conf", "hist", "all", "list", "int", "obj", "adj", "arb", "gr", "unch", "hash", "abc", "app", "au", "bl", "div", "coll", "aa", "pl", "ll", "var", "good", "vec", "data", "attr", "ray", "dict", "array", "frac", "deg"]}}
{"code": "S = input()\\nN = len(S)\\n\\n# 0101...\u306b\u3059\u308b\u5834\u5408\\ncnt1 = 0\\nfor i in range(len(S)):\\n    if S[i] != str(i % 2):\\n        cnt1 += 1\\n\\n# 1010...\u306b\u3059\u308b\u5834\u5408\\ncnt2 = 0\\nfor i in range(len(S)):\\n    if S[i] != str((i + 1) % 2):\\n        cnt2 += 1\\n\\nprint(min(cnt1, cnt2))\\n", "target": "495", "substitutes": {"S": ["M", "NS", "T", "SH", "SS", "SL", "SB", "R", "X", "I", "L", "VS", "SI", "H", "W", "V", "B", "J", "Q", "G", "P", "A", "E", "SP", "SU", "D", "DS", "Y", "SA", "U", "F", "Z", "C"], "N": ["M", "n", "NS", "T", "NC", "R", "I", "L", "NR", "W", "H", "O", "V", "B", "J", "Q", "G", "P", "E", "D", "Ni", "U", "K", "F", "Z", "FN", "C"]}}
{"code": "H,W,N,*a = map(int, open(0).read().split())\\nans = [[0] * W for _ in range(H)]\\ncount = 0\\nusing = 0\\nfor i in range(H*W):\\n    dm = divmod(i,W)\\n    h = dm[0]\\n    if h % 2 == 0:\\n        w = dm[1]\\n    else:\\n        w = (dm[1]+1) * (-1)\\n    ans[h][w] = using + 1\\n    count += 1\\n    if count == a[using]:\\n        using += 1\\n        count = 0\\nfor x in ans:\\n    print(*x)", "target": "380", "substitutes": {"H": ["M", "Eh", "HD", "T", "His", "HS", "HL", "HE", "R", "X", "I", "L", "HO", "HI", "GH", "WH", "NH", "DH", "TH", "V", "HH", "S", "B", "J", "Q", "G", "HA", "P", "A", "OH", "E", "D", "HC", "MH", "Y", "HB", "K", "F", "HT", "He", "C"], "W": ["WT", "WC", "M", "We", "T", "WR", "MW", "WI", "CW", "Win", "WAR", "WP", "NW", "R", "X", "I", "L", "WW", "VW", "WH", "BW", "WA", "V", "Width", "S", "SW", "Wh", "B", "Q", "G", "P", "A", "Wa", "WD", "D", "WM", "Y", "WE", "DW", "EW", "K", "F", "Weight", "C"], "N": ["M", "n", "NS", "T", "Ns", "R", "X", "L", "NM", "NN", "NR", "NH", "O", "V", "TN", "S", "B", "Q", "G", "P", "E", "D", "Y", "Ni", "K", "F", "Z", "C"], "a": ["n", "ae", "ab", "p", "ana", "xa", "r", "c", "z", "ata", "o", "ea", "b", "t", "alpha", "wa", "v", "an", "e", "all", "A", "al", "at", "sa", "ao", "another", "s", "au", "aa", "l", "am", "y", "data", "ba", "ac"], "ans": ["ars", "ANS", "ians", "ats", "ants", "An", "names", " means", "outs", "ai", "urs", "ames", "aus", "aned", "mails", " Ans", "ates", "ns", "ann", "rans", "anas", "ins", "ras", "ons", "ms", "angs", "ents", "ens", " sans", "uns", "can", "an", "anes", "aces", "oss", "s", "xs", "nas", "ams", "aos", "vs", "ads", "os", "es", "AN", "ds"], "_": ["n", "ex", "I", "ml", "val", " int", "non", "int", "all", "un", "ow"], "count": ["con", "n", "max", "comment", "nt", "sum", "state", "stat", "cont", "on", "p", "ct", "code", "used", "ount", "length", "c", "weight", "current", "z", "status", "total", "ind", "f", "num", "ctr", "t", "time", "nb", "cum", "frequency", "cond", "amount", "conf", "out", "nc", "cache", "all", "now", "flag", "cc", "found", "counter", "number", "Count", "usage", "index", "C", "use"], "using": ["saving", "adding", "uses", "having", "ing", "ending", "loading", "Using", "used", "setting", "position", "us", "existing", "current", "leading", "running", "ordering", "status", "only", "heading", "by", "based", "starting", "ning", "writing", "rating", "being", "working", "users", "ling", "now", "sharing", "fully", "forcing", "binding", "user", "reading", "usage", "ng", "including", "basic", "use"], "i": [" I", "mi", "n", "xi", "d", "p", "g", "di", "ai", "I", "c", "m", "wi", "o", "ip", "f", "b", "t", "io", "si", "li", "ii", "v", "e", "ti", "im", "it", "ini", "q", "l", "pi", "u", "id", "j", "y", "ij", "iu", "hi"], "dm": ["tm", "dos", "pm", "d", "mm", "db", "fm", "di", "dn", "dh", "mom", "m", "dl", "irm", "asm", "dk", "dom", "mind", "rm", "gm", "dem", "dt", "dy", "dat", "arm", "mn", "resp", "mont", "omm", "drm", "vm", "dp", "DM", "dim", "iam", "dan", "dd", "tall", "sd", "mud", "md", "cm", "ds", "rpm", "adr", "hm", "ym"], "h": ["ht", "th", "sh", "kh", "d", "p", "hz", "html", "dh", "hs", "m", "ih", "zh", "rh", "hex", "hu", "ah", "bh", "go", "f", "hl", "t", "home", "v", "oh", "hw", "ha", "hash", "ph", "ch", "he", "hr", "high", "hd", "ho", "l", "hh", "k", "md", "hi", "hm"], "w": ["wx", "n", "ht", "sw", "d", "tw", "wh", "wt", "m", "z", "wb", "wall", "wr", "iw", "wat", "rw", "wi", "kw", "wd", "way", "wal", "ew", "word", "f", "b", "wl", "wid", "win", "wa", "wp", "fw", "v", "width", "ws", "nw", "wk", "widget", "aw"], "x": ["wx", "n", "xi", "ex", "xe", "p", "xes", "name", "xc", "ct", "xa", "X", "rx", "ox", "yi", "xt", "ctx", "xxx", "ix", "tx", "pan", "ax", "xd", "add", "e", "xy", "xs", "mx", "xb", "\u00e7", "au", "inx", "xx", "u", "y", "ross", "xp", "xf"]}}
{"code": "c=input()\\nif(c.isupper()==True):\\n  print('A')\\nelse:\\n  print('a')", "target": "251", "substitutes": {"c": ["ctrl", "a", "lc", "n", "cat", "d", "p", "g", "ct", "i", "r", "tc", "m", "h", "cur", "f", "b", "bc", "t", "dc", "conf", "v", "e", "cos", "ch", "cc", "\u00e7", "cu", "q", "l", "u", "cs", "k", "cm", "cr", "C", "ac"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\na.sort(reverse=True)\\n# \u4e0a\u4f4d 2/3\u3092\u53d6\u5f97\\naa=a[:2*n]\\n# \u4e0a\u4f4d\u304b\u30891,2..1,2 \u3068\u5272\u308a\u632f\u308b\u5834\u5408\u306e2\u4f4d\u306e\u96c6\u5408\u3092\u53d6\u5f97\\naaa=aa[1::2]\\n\\nprint(sum(aaa))", "target": "438", "substitutes": {"n": ["nr", "N", "x", "nt", "p", "i", "sn", "c", "m", "z", "ns", "nl", "h", "b", "num", "count", "t", "nb", "mn", "na", "v", "nc", "nm", "s", "nn", "l", "q", "j", "k"], "a": ["ava", "ab", "ta", "p", "va", "xa", "i", "r", "c", "ma", "m", "ata", "ga", "h", "la", "aaa", "f", "b", "t", "v", "an", "A", "sa", "ao", "au", "oa", "aa", "l", "am", "j", "array", "area", "ba", "ca"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\nINF = 10 ** 9\\nMOD = 10 ** 9 + 7\\nfrom collections import deque\\n\\ndef main(): \\n    n = int(input())\\n    a = [int(input()) for _ in range(n)]\\n    a.sort()\\n\\n    q = deque()\\n    q.append(a[0])\\n    l = 1\\n    r = n-1\\n    left = True\\n    high = True\\n    ans = 0\\n    while r - l > 0:\\n        if high:\\n            if left:\\n                ans += abs(a[r] - q[0])\\n                q.appendleft(a[r])\\n                r -= 1\\n                left = False\\n            else:\\n                ans += abs(a[r] - q[-1])\\n                q.append(a[r])\\n                r -= 1\\n                left = True\\n                high = False\\n        else:\\n            if left:\\n                ans += abs(a[l] - q[0])\\n                q.appendleft(a[l])\\n                l += 1\\n                left = False\\n            else:\\n                ans += abs(a[l] - q[-1])\\n                q.append(a[l])\\n                l += 1\\n                left = True\\n                high = True\\n    \\n    ans += max(abs(a[l] - q[0]), abs(a[l] - q[-1]))\\n    print(ans)\\n\\nif __name__=='__main__':\\n    main()\\n", "target": "310", "substitutes": {"input": ["history", "next", "str", "token", "select", "context", "util", "p", "active", "init", "view", "get", "reset", "spec", "shift", "inc", "raw", "txt", "align", "ref", "focus", "read", "format", "step", "output", "val", "fn", "config", "source", "feed", "out", "Input", "int", "stream", " inspect", "update", "eq", " read", "ch", "gen", "print", " Input", "reader", "line", "sample", "lat", "rand", "data", " inf", "text", " inputs", "request"], "INF": ["INFF", "InFD", "INf", " INFF", " OUTFD", "InF", " INFD", " OUTFF", " OUTf", "INFD", "Inf", " INf", "InFF", " OUTF"], "MOD": ["mod", "DIR", "LOG", "POS", "Mod", "AD", "INC", "RM", "MIN", "ERROR", "PUT", "EXP", "RT", "NUM", "MODE", "NET", " BASE", "DEBUG", " mod", "RC", "ADD", "DM", "SPEC", "RO", "DEC", "DEV", "REM", "COM"], "n": ["nr", "N", "x", "nt", "ln", "d", "p", "en", "ne", "i", "sn", "c", "m", "z", "ns", "o", "nl", "h", "num", "t", "len", "nb", "na", "an", "v", "nc", "un", "s", "nan", "nu", "ll", "np", "nn", "u", "j", "y"], "a": ["aq", "history", "sta", "ae", "to", "ac", "err", "ab", "era", "ta", "p", "g", "test", "ai", "i", "w", "c", "ma", "m", "eas", "ga", "o", "aux", "ea", "la", "aaa", "result", "act", "go", "f", "b", "abs", "t", "parts", "da", "args", "na", "an", "att", "v", "all", "exp", "A", "obj", "at", "sa", "ch", "now", "app", "au", "ed", "aos", "oa", "aa", "am", "ar", "u", "y", "es", "er", "area", "ba"], "_": ["name", " j", " k", "__", "ox", " name", "ix", " long", " g", "val", " c", " __", " each", "___", " p", "j"], "q": ["aq", "ck", "sh", "queue", "resh", "d", "p", "ues", "ing", "ue", "g", "qu", "iq", "qt", "mp", "ct", "i", "requ", "ox", "z", "m", "qi", "query", "ques", "ic", "o", "ix", "quick", "f", "t", "quit", "think", "form", "Q", "v", "exp", "sq", "fx", "qq", "eq", "qa", "s", "it", "question", "ch", "qual", "req", "ve", "dq", "lock", "que", "ll", "u", "quest", "y", "qs", "pp", "ry", "pg", "quer"], "l": ["loc", "lc", "lu", "tl", "kl", "ln", "lt", "p", "ld", "g", "lb", "i", "L", "long", "c", "m", "ly", "ml", "dl", "z", "el", "o", "nl", "sl", "h", "la", "log", "lay", "ls", "jl", "f", "b", "t", "hl", "yl", "len", "rl", "lo", "lp", "li", "v", "e", "list", "all", "lv", "s", "lang", "lr", "ol", "lock", "ll", "le", "pl", "u", "cl", "line", "j", "lin"], "r": ["nr", "sr", "mr", "x", "kr", "rr", "err", "ro", "rg", "d", "p", "g", "R", "rc", "i", "re", "rev", "rx", "w", "c", "z", "m", "rh", "rs", "rb", "o", "res", "h", "ren", "rec", "pr", "ls", "result", "rar", "right", "b", "br", "fr", "t", "rel", "rl", "dr", "v", "ru", "red", "s", "rt", "lr", "hr", "ll", "ar", "u", "rand", "j", "y", "er", "range", "cr", "ry", "rd"], "left": ["top", "x", "err", "lt", "broad", "required", "old", "low", "default", "enabled", "either", "log", "empty", "hidden", "end", "found", "text", "last", "content", "open", "net", "local", "ld", "cont", "L", "center", "length", "full", "url", "wrong", "none", "lock", "Left", "error", "shell", "entry", "kill", "start", "nt", "state", "d", "cell", "well", "control", "only", "nl", "term", "right", "lo", "inner", "all", "public", "size", "ll", "path", "name", "method", "legal", "long", "used", "down", "level", "bottom", "sp", "rel", "no", "bit", "out", "null", "list", "st", "slow", "j"], "high": ["history", "top", "hold", "open", "client", "max", "necessary", "hang", "human", "hard", "long", "well", "control", "full", "old", "help", "higher", "parent", "rend", "low", "graph", "power", "success", "h", "right", "level", "hl", "close", "cond", "lo", "hist", "pop", "hub", "height", "highest", "large", "public", "co", "strong", "best", "good", "High", "growth", "closed", "y", "bound", "big", "upper", "hi", "kill", "back", "like", "stop"], "ans": ["arms", "ars", "ANS", "ops", "ants", "ians", "ats", "ean", "names", "eds", " means", "acs", "outs", "ros", "aus", "asks", "lines", "san", "aned", "ns", "vals", "ann", "ums", "rs", "rans", "ks", "leans", "offs", "ins", "anas", "ras", "vers", "ons", "ms", "angs", "amps", "ls", "ents", "ens", "cas", "cons", "als", "uns", "an", "rors", "posts", "aps", "anes", "aces", "terms", "s", "eps", "xs", "ran", "ams", "aos", "ands", "vs", "ads", "arts", "cs", "es", "os", "errors"]}}
{"code": "x, a, b = map(int, input().split())\\ndis1 = abs(x-a)\\ndis2 = abs(x-b)\\nprint('A' if dis1<dis2 else 'B')", "target": "408", "substitutes": {"x": ["wx", "n", "xi", "ex", "d", "p", "xc", "ct", "xa", "X", "i", "rx", "w", "c", "z", "xt", "ctx", "xml", "hex", "ix", "h", "tx", "ax", "f", "abs", "check", "v", "e", "fx", "xy", "xs", "dx", "l", "xx", "yx", "lex", "y", "xp", "xf"], "a": ["sta", "ae", "ab", "aj", "ai", "i", "\u00e1", "c", "ma", "ate", " A", "eas", "ga", "o", "admin", "la", "abs", "alpha", "art", "da", "an", "A", "al", "at", "sa", "ao", "ity", "app", "aa", "am", "ar", "ba", "ca", "ac"], "b": ["bis", "body", "n", "sb", "ab", "d", "db", "g", "ib", "i", "blue", "r", "c", "bi", "fb", "rb", "mb", "be", "abs", "bc", "t", "nb", "B", "bb", "v", "e", "eb", "base", "cb", "l", "j", "y", "bs", "back"], "dis1": ["how_", "how1", "Dis2", " dis_", " dis81", "discOne", "howa", "disc1", "disOne", " disOne", "disc81", "disc2", " disa", "Dis81", "disa", "how2", "Disa", "DisOne", "Dis1", "dis_", "Dis_", "dis81"], "dis2": ["dis02", "mis02", "mis1", "Dis2", "Dis3", "Dis02", "lb", "dis3", "disTwo", "cond2", "condb", "Disb", "l2", "DIS2", "mis2", "l3", "disb", "cond3", "misTwo", "DIS1", "DISTwo", "Dis1", "DIS02", "cond1", "l1", "DisTwo"]}}
{"code": "A,B,N=map(int,input().split())\\nf=lambda x:(A*x)//B-A*(x//B)\\nprint(f(B-1 if B-1<=N else N))", "target": "407", "substitutes": {"A": ["a", "M", "T", "Al", "An", "AU", "AT", "R", "X", "I", "L", "AL", "Area", "AB", "App", "H", "AA", "As", "V", "AR", "C", "AS", "S", "alpha", "G", "This", "HA", "P", "CA", "At", "E", "AF", "D", "AM", "Y", "SA", "U", "AC", "F", "AN", "BA", "K", "AP"], "B": ["LB", "But", "BI", "M", "T", "MB", "RB", "BL", "VB", "BS", "Bs", "SB", "X", "R", "I", "L", "IB", "AB", "BW", "BG", "Length", "BER", "H", "O", "V", "BT", "b", "S", "BC", "J", "Q", "GB", "WB", "G", "P", "BB", "USB", "E", "TB", "Bern", "D", "NB", "EB", "BO", "Y", "BF", "DB", "K", "F", "BA", "Z", "BY", "C"], "N": ["n", "M", "NS", "T", "Ns", "X", "I", "R", "NA", "L", "NM", "NN", "NR", "NT", "H", "O", "V", "TN", "S", "J", "Q", "G", "P", "Num", "E", "D", "NB", "Y", "MN", "Ni", "K", "F", "Z", "C"], "f": ["fd", "a", "n", "x", "bf", "d", "p", "fm", "g", "fs", "sf", "fun", "w", "r", "c", "m", "fc", "fb", "o", "h", "df", "b", "t", "fn", "fr", "fac", "v", "fx", "rf", "s", "tf", "l", "F", "cf", "xf"]}}
{"code": "n=int(input())\\na=int(input())\\nx=n**2\\nprint(x-a)", "target": "379", "substitutes": {"n": ["N", "nt", "ln", "d", "p", "ne", "cn", "i", "sn", "w", "c", "m", "z", "ns", "o", "h", "f", "b", "num", "t", "nia", "nb", "na", "v", "nc", "nan", "nu", "q", "nn", "l", "j", "k"], "a": ["ia", "sta", "ae", "ac", "ab", "aff", "ta", "p", "va", "ai", "xa", "i", "c", "ma", "ga", "aux", "f", "b", "alpha", "apa", "an", "al", "A", "at", "sa", "abc", "au", "aa", "am", "j", "area", "ba", "ca", "ao"], "x": ["wx", "xi", "ex", "d", "p", "g", "xc", "xa", "X", "i", "rx", "w", "c", "ox", "z", "m", "xt", "ix", "h", "tx", "ax", "f", "b", "xd", "t", "v", "e", "int", "xy", "xs", "q", "xx", "l", "k", "y", "xp", "xf"]}}
{"code": "import math\\nx = int(input())\\nans = math.ceil((-1 + math.sqrt(8 * x + 1)) / 2)\\nprint(ans)", "target": "350", "substitutes": {"x": ["wx", "n", "xi", "ex", "xe", "p", "xes", "xc", "xa", "X", "i", "rx", "w", "ox", "m", "xt", "input", "ix", "tx", "act", "ax", "xd", "v", "fx", "xy", "xs", "mx", "dx", "inx", "xx", "lex", "y", "px", "xp", "xf"], "ans": ["arms", "ANS", "ants", "ats", "\u00e1n", "beans", "ean", "ano", "cn", "ai", "aus", "oman", "san", "aned", " Ans", "ann", "rans", "anas", "ks", "leans", "scan", "ons", "ms", "amps", "ls", "pan", "ens", "can", "an", "iann", "anks", "oss", "anes", "ran", "nas", "aos", "ams", "arts", "lan"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nMOD = 10 ** 9 + 7\\nINF = float('INF')\\nsys.setrecursionlimit(10 ** 5)\\n\\n\\nclass UnionFind:\\n    from typing import List, Set\\n\\n    def __init__(self, n):\\n        self.n = n\\n        self.parent = [-1] * n\\n\\n    def merge(self, x, y) -> int:\\n        x = self.leader(x)\\n        y = self.leader(y)\\n\\n        if x == y:\\n            return 0\\n\\n        if self.parent[x] > self.parent[y]:\\n            x, y = y, x\\n\\n        self.parent[x] += self.parent[y]\\n        self.parent[y] = x\\n\\n        return self.parent[x]\\n\\n    def same(self, x, y) -> bool:\\n        return self.leader(x) == self.leader(y)\\n\\n    def leader(self, x) -> int:\\n        if self.parent[x] < 0:\\n            return x\\n        else:\\n            self.parent[x] = self.leader(self.parent[x])\\n            return self.parent[x]\\n\\n    def size(self, x) -> int:\\n        return -self.parent[self.leader(x)]\\n\\n    def groups(self) -> List[Set[int]]:\\n        groups = dict()\\n\\n        for i in range(self.n):\\n            p = self.leader(i)\\n            if not groups.get(p):\\n                groups[p] = set()\\n            groups[p].add(i)\\n\\n        return list(groups.values())\\n\\n\\ndef main():\\n    N, M = map(int, input().split())\\n\\n    uf = UnionFind(N)\\n\\n    for _ in range(M):\\n        A, B = map(lambda x: int(x) - 1, input().split())\\n        uf.merge(A, B)\\n\\n    print(len(uf.groups()) - 1)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "354", "substitutes": {"readline": ["readln", " readln", "scanrange", "Readstring", "printstring", "readerlines", "Readlines", "printline", "scanstring", "printrange", " readlines", "scanlines", "readlines", "readLine", "Readln", " readLine", "readerln", "scanline", "readrange", "Readrange", "readerLine", "readerline", "printlines", "readstring", "Readline", "ReadLine"], "MOD": ["MAX", " CR", " multiplier", "mod", " Mod", "LOG", "Mod", " lim", "FD", " ERROR", "ALL", "EXP", "SIZE", " reg", "MODE", " BASE", " EXP", "LINE", " FD", " mod", " exp", " LINE", " WARNING", "VALUE", " LEVEL", " exponent", "Bytes", " LOG"], "INF": ["PINFT", "INN", "InFT", " INV", "PINV", "InF", "INFT", "InN", "InV", "PINN", "PINF", "INV", " INN", " INFT"], "self": ["json", "cmp", "instance", "err", "context", "wn", "table", "mp", "child", "left", "re", "r", "c", "dev", "ctx", "res", "log", "them", "empty", "config", "close", "disk", "private", "block", "unknown", "obj", "co", "new", "app", "q", "pl", "year", "then", "dd", "mem", "link", "se", "lex", "data", "history", "conn", "sw", "pkg", "before", "look", "me", "local", "own", "test", "this", "short", "wh", "deep", "replace", "object", "pre", "weak", "sect", "full", "my", "prefix", "help", "shape", "change", "py", "results", "also", "params", "console", "builder", "s", "debug", "handle", "tmp", "cl", "user", "error", "python", "thus", "next", "complete", "pair", "ae", "nt", "load", "spec", "series", "raw", "txt", "sys", "ref", "subject", "round", "make", "xml", "graph", "cert", "h", "right", "you", "form", "parts", "remote", "github", "all", "cache", "cp", "now", "partial", "public", "ssl", "req", "pi", "md", "attr", "pp", "Self", "back", "th", "select", "through", "view", "sub", "where", "w", "current", "rem", "diff", "details", "info", "rs", "expr", "ren", "rec", "func", "go", "rel", "t", "parse", "sq", "final", "ws", "when", "links", "first", "clean", "proc", "network", "comp"], "n": ["net", "nt", "d", "name", "ne", "cn", "g", "sn", "r", "c", "m", "z", "ns", "ny", "o", "h", "f", "num", "count", "t", "len", "nb", "no", "mn", "na", "v", "nc", "s", "nan", "nu", "size", "nn", "number", "l", "np", "q", "u", "pi", "k", "j"], "parent": ["top", "header", "cmp", "instance", "manager", "table", "static", "child", "Parent", "protected", "server", "children", "tree", "default", "limit", "num", "config", "part", "block", "owner", "new", "root", "last", "max", "port", "point", "file", "g", "test", "position", "tip", "m", "unit", "mother", "page", "pos", "pid", "key", "params", "tmp", "line", "holder", "scope", "chain", "client", "master", "leader", "pool", "host", "ip", "remote", "cache", "up", "public", "peer", "size", "index", "target", "known", "loader", "path", "current", "map", "type", "by", "out", "list", "node", "first", "father", "parents", "family"], "x": ["a", "xe", "left", "X", "r", "c", "z", "el", "ix", "v", "e", "exp", "fx", "co", "dx", "pl", "lex", "k", "xp", "wx", "point", "on", "g", "test", "m", "xxxx", "xt", "o", "tx", "time", "key", "xy", "l", "u", "example", "ux", "ct", "xa", "ox", "xml", "hex", "xxx", "h", "val", "xd", "xs", "mx", "xb", "ed", "index", "xi", "ex", "xes", "xc", "rx", "ext", "w", "expr", "act", "ax", "f", "t", "int", "at", "work", "xx", "lat", "yx", "edit", "px", "j", "xf"], "y": ["a", "sy", "ty", "ys", "yer", "ym", "on", "cy", "oy", "yo", "c", "z", "ly", "ies", "m", "my", "ny", "yi", "vy", "by", "o", "ye", "py", "yr", "sky", "h", "hy", "axy", "b", "t", "yl", "io", "uy", "key", "v", "yn", "e", "ey", "gy", "iy", "xy", "ch", "yt", "Y", "yy", "fy", "hot", "j", "ya", "yu", "ay", "ry"], "groups": ["modules", "images", "allows", "agents", "lets", "set", "boxes", "files", " Groups", "cards", "days", "suits", "orders", "states", "strings", "sites", "aps", "sets", "changes", "ways", "services", "classes", "packs", "features", "packages", "marks", "shape", "stores", "chains", "maps", "games", "balls", "ids", "limits", "weights", "results", "works", "gets", "roups", "group", "places", "types", "rows", "sections", "stats", "olds", "users", "keys", "uses", "names", "workers", "lines", "items", "reports", "blocks", "checks", "values", "units", "lists", "Users", "tracks", "holes", "rules", "models", "index", "fields", "ps", "views", "hold", "apps", "ports", "cells", "outs", "tags", "abilities", "tests", "abs", "masters", "ots", "levels", "comments", "frames", "gs", "members", "ages", "caps", "bags", "cats", "parents", "hips", "points"], "i": ["a", "mi", "xi", "d", "g", "di", "ai", "I", "r", "c", "m", "z", "bi", "ic", "o", "ix", "h", "ip", "f", "b", "t", "si", "li", "key", "v", "e", "int", "ti", "s", "it", "im", "q", "l", "pi", "u", "id", "j", "k", "index", "ij", "iu"], "p": ["pkg", "perm", "mp", "pc", "vp", "jp", "pre", "m", "fp", "pai", "tp", "pa", "ip", "br", "sp", "part", "pt", "lp", "pid", "exp", "P", "ap", "at", "cp", "ph", "it", "ping", "dp", "per", "peer", "pl", "pi", "np", "bp", "pat", "u", "pers", "op", "er", "pp", "comp", "ps", "pg"], "N": ["SN", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "L", "NA", "NM", "NN", "NR", "NT", "NOR", "NH", "H", "S", "J", "G", "P", "D", "NB", "Y", "MN", "AN", "NG", "C"], "M": ["T", "CM", "R", "I", "JM", "L", "NM", "MX", "m", "H", "W", "MM", "V", "MC", "S", "MAN", "J", "G", "P", "MP", "E", "MS", "D", "DM", "TM", "Mon", "MN", "MI", "MT", "U", "F", "Man", "C"], "uf": ["lu", "pkg", "lf", "bf", "um", "uch", "util", "ux", "ul", "ue", "alf", "fol", "aus", "us", "pb", "bo", "ucc", "uff", "aim", "ull", "uph", "aux", "buf", "df", "f", "uh", "ef", "uc", "fo", "aft", "ud", "ff", "eu", "uci", "gru", "ulf", "utf", "tf", "ui", "au", "xff", "buff", "du", "u", "fg", "ub", "uu", "UF", "cf", "ume"], "_": ["a", " ind", " j", "I", "m", " num", "ix", "ind", " __", "j"], "A": ["a", "GA", "Ax", "Am", "An", "Al", "IA", "Ar", "Abs", "AU", "Av", "I", "AV", "And", "AB", "App", "H", "LA", "AA", "As", "C", "Ah", "Bar", "HA", "P", "Ant", "CA", "At", "You", "AF", "SA", "AC", "The", "ACT", "AP"], "B": ["BI", "CB", "T", "RB", "VB", "BS", "Bs", "R", "L", "IB", "AB", "Reb", "Br", "V", "C", "Bar", "BC", "BE", "BR", "G", "WB", "GB", "P", "BB", "USB", "Ber", "BM", "Bern", "TB", "EB", "NB", "Y", "BF", "DB", "BA", "Blue"]}}
{"code": "N = int(input())\\n\\nans = 10**18\\n\\nfor i in range(1, int(N**0.5)+1):\\n    if N % i == 0:\\n        b = N//i\\n        ans = min(ans, max( len(str(i)),  len(str(b))))\\nprint(ans)", "target": "184", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "I", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "V", "NO", "Z", "S", "NE", "B", "Q", "G", "ND", "P", "Num", "A", "E", "Sn", "D", "NB", "Y", "Size", "MN", "Ni", "K", "F", "AN", "TN", "FN", "C"], "ans": ["n", "ANS", "nt", "ants", "ats", "ians", "beans", "ean", "names", " means", "cn", "Ns", "was", "ai", "aus", "ros", "sn", "aned", "mos", " Ans", "ates", "ns", "ann", "rans", "anas", " spans", "scan", "ins", "nl", "ANN", "ons", "ms", "angs", "anned", "pan", "ls", "wan", "amps", "ens", "ents", "cas", "mn", "uns", "na", "an", "can", "iann", "Ann", "posts", " scans", "anes", "oss", "s", "nan", "xs", "ions", "nas", "aos", "ads", "cs", "arts", "os", "es", "lan", "AN"], "i": ["mi", "ki", "n", "xi", "x", "ni", "ci", "gi", "p", "di", "g", "ib", "ai", "I", "c", "m", "bi", "yi", "ic", "o", "ix", "iri", "f", "t", "ri", "io", "si", "ii", "li", "v", "ei", "ti", "oi", "im", "s", "it", "ini", "ui", "zi", "q", "phi", "pi", "l", "j", "y", "k", "ik", "ij", "iu", "hi"], "b": ["a", "n", "BI", "x", "bf", "d", "p", "db", "g", "ib", "r", "c", "m", "batch", "z", "bi", "wb", "rb", "o", "ip", "be", "h", "f", "t", "nb", "B", "bb", "v", "e", "s", "base", "l", "bp", "bin", "j", "y", "bs"]}}
{"code": "class Dice:\\n  \\n  def __init__(self, input_dice):\\n    self.flow = [input_dice[3], input_dice[1], input_dice[0], input_dice[5], input_dice[2], input_dice[4]]\\n    self.dice = [i for i in range(6)]\\n  \\n  def setNumber(self, n0, n1, n2, n3, n4, n5):\\n    self.dice[0] = n0\\n    self.dice[1] = n1\\n    self.dice[2] = n2\\n    self.dice[3] = n3\\n    self.dice[4] = n4\\n    self.dice[5] = n5\\n    return self.dice\\n    \\n  def roll(self, dir):\\n    if dir == 'S':\\n      self.setNumber(self.flow[0], self.flow[2], self.flow[5], self.flow[1], self.flow[4], self.flow[3])\\n      self.flow = self.dice\\n      return self.dice\\n    if dir == 'N':\\n      self.setNumber(self.flow[0], self.flow[3], self.flow[1], self.flow[5], self.flow[4], self.flow[2])\\n      self.flow = self.dice\\n      return self.dice\\n    if dir == 'W':\\n      self.setNumber(self.flow[2], self.flow[1], self.flow[4], self.flow[0], self.flow[3], self.flow[5])\\n      self.flow = self.dice\\n      return self.dice\\n    if dir == 'E':\\n      self.setNumber(self.flow[3], self.flow[1], self.flow[0], self.flow[4], self.flow[2], self.flow[5])\\n      self.flow = self.dice\\n      return self.dice\\n\\ndice = list(map(int, input().split()))\\nd = Dice(dice)\\ndir = list(input())\\nfor i in range(len(dir)):\\n  d.roll(dir[i])\\nprint(d.dice[2])\\n", "target": "401", "substitutes": {"self": ["body", "n", "json", "cmp", "x", "ith", "err", "prev", "instance", "context", "sign", "p", "static", "mp", "html", "r", "old", "el", "dev", "res", "log", "them", "config", "empty", "close", "part", "response", "private", "disk", "block", "author", "unknown", "your", "obj", "compl", "co", "new", "app", "q", "pl", "book", "np", "phys", "lex", "se", "history", "ial", "pkg", "sw", "conn", "before", "me", "local", "get", "own", "test", "this", "short", "wh", "deep", "replace", "object", "sql", "sect", "full", "my", "ann", "help", "parent", "shape", "py", "objects", "tx", "results", "also", "params", "filter", "console", "each", "soc", "model", "s", "debug", "print", "tmp", "cl", "user", "error", "student", "ass", "python", "thus", "next", "complete", "pair", "load", "api", "attribute", "spec", "ct", "raw", "report", "ref", "subject", "asm", "blocks", "make", "xml", "graph", "h", "false", "right", "you", "gh", "form", "review", "remote", "eth", "resp", "urn", "all", "github", "cache", "terms", "hw", "ssl", "partial", "public", "com", "req", "other", "md", "attr", "dict", "Self", "selves", "views", "th", "space", "view", "name", "chart", "requ", "w", "rem", "diff", "details", "info", "rs", "by", "ren", "mix", "quick", "rec", "rel", "support", "final", "ws", "work", "au", "proc", "var", "item", "network", "comp", "errors"], "input_dice": ["input_delicing", "input_mdice", "input_bdue", "input_dictipe", "input_daice", "input_dictusc", "input_dusc", "inputpydelve", "input_lice", "input_dike", "input_lce", "inputpydrice", "inputpydsice", "input_nrice", "input_dicing", "input_lices", "inputpydsute", "input_disabbage", "input_domice", "inputpydice", "input_pdice", "input_mdute", "input_didike", "input_domoice", "input_disires", "input_drise", "input_delice", "input_pdipe", "input_delouse", "input_dauffy", "input2didices", "input_nice", "input_delices", "input_picer", "input_price", "input_didive", "input2dive", "input_nicing", "input2didive", "input_backonential", "input_dires", "input_dictice", "input_dictue", "input_backice", "input2didice", "input_delve", "input_domouse", "input_duffy", "input_live", "input_tice", "input_backabbage", "input_dise", "input_bdusc", "input_mdelve", "input_dotoc", "input_delive", "input_droc", "input_drice", "input_doice", "inputpydsrice", "input_domicing", "inputpydoc", "inputpydise", "input_didice", "input_dicer", "input_domonential", "input_noice", "input_tute", "input2dices", "input_backires", "input_licer", "input_dce", "input_daise", "input_deloice", "input_dabbage", "input2dice", "input_dotise", "input2dike", "input_lrice", "input_druffy", "input_trice", "input_bdipe", "input_nce", "input_daoc", "input_due", "inputpydrise", "input_like", "input_pdue", "input_dices", "input_dipe", "input_bdice", "input_dotice", "input_dsice", "inputpyduffy", "input_doc", "input_disonential", "input_dsrice", "input_nicer", "input_pce", "input_delike", "inputpydselve", "inputpydute", "input_telve", "input_disice", "input_didices", "input_domabbage", "input_mdrice", "input_douse", "inputpydroc", "input_dsute", "input_pdusc", "input_dute", "input_dive", "input_pice", "input_domires", "inputpydruffy", "input_nouse", "input_donential", "input_dselve", "input_dotuffy", "input2didike"], "flow": ["vert", "loop", "flat", "forge", "buffer", "window", "low", "hunt", "tab", "block", "plane", "grid", "lane", "tower", "machine", "roll", "layout", "link", "bolt", "fine", "conn", "ward", "port", "norm", "test", "transfer", "weight", "mill", "wall", "input", "page", "force", "stream", "switch", "free", "flows", "line", "float", "shell", "stack", "function", "load", "cycle", "age", "control", "process", "driver", "wave", "graph", "pool", "form", "folder", "feed", "fl", "bridge", "fly", "all", "Flow", "now", "board", "growth", "back", "wind", "hold", "blank", "frame", "run", "ext", "zero", "down", "plant", "eng", "gen", "pipe", "network", "zip", "sequence", "version"], "dice": ["dvice", "Dvice", "sices", "tuce", "Diced", "delly", "dnew", "drice", "tdices", " dicy", " ddef", "didoice", "didicy", " drice", "dbodge", "dense", "tdice", "backiced", "ldve", "sdiced", "udrice", "sdices", "ldicy", "dirice", "nence", "dinew", "lices", "sdice", "drodge", "Dices", "odicing", "dedrice", "duce", "sdouse", "ldoice", "odice", "Drice", "flrice", "Dice", "digicing", "xdote", "ndrice", " dence", "Dcall", "backice", " duce", "Duce", "sdrice", "digelly", "diICE", "flie", "xdense", "dzie", "indouse", "didzie", " dICE", "xdices", "didef", "indote", "Dicy", "tdouse", "die", "didicer", "ndices", "didouse", "mice", "indices", "bdice", "indice", " die", "flice", "ndouse", "didices", "Dout", "diice", "diduce", "nouse", "didodge", "bdicing", "lice", "dicall", "nicing", "diize", "indense", "ldice", "adie", "digice", " dcall", " dnew", "odicy", "diced", "doice", "sice", "lrice", "dicy", "indiced", "dcall", " dices", "nuce", "Dize", "dve", "dbicing", "nice", "diuce", "udicer", "nicer", "domicy", "bdiced", "ndicing", "droice", "udice", "drvice", "Dnew", "adrice", "Dike", "tices", "dike", "diout", "duize", "dricing", "dices", "ndice", "Dote", "licing", "mices", "dedice", "odoice", "diie", "Dzie", "backicing", " dicer", "diiced", "nelly", "digoice", "dence", "dote", "duie", "muce", "bdoice", "dicer", "didelly", "Dence", "Dicer", "drrice", "douse", "didicing", "domice", "dbice", "Dicing", "dedvice", "dicing", "adence", "duice", "dboice", "tice", "Die", "dICE", "ndelly", "durice", " dzie", "dout", "flike", "didence", "adice", "diike", "lie", "odelly", "dodge", "diicer", "Ddef", "udike", "dedie", "tdiced", "didice", "domoice", "sicing", "backoice", "drie", "micing", "srice", "DICE", " diced", "xdice", "domve", "dize", " dout", "odve", "ndie", "sdicing", "ticing", "Dense", "ddef", "odiced"], "i": ["\u00ed", "mi", "n", "xi", "x", "me", "ci", "gi", "p", "di", "iq", "ai", "I", "r", "c", "m", "bi", "qi", "ic", "ix", "ip", "ind", "f", "b", "t", "ri", "multi", "si", "ii", "li", "ji", "key", "e", "ei", "ti", "s", "im", "it", "zi", "ini", "ui", "q", "l", "pi", "phi", "u", "id", "k", "index", "y", "j", "ij", "hi"], "n0": [" n2000", "name1", "N1", "name50", "name4", "name0", " n00", " n50", "n2000", "N50", "m5", "na0", "na00", "n50", "m00", "m0", "n00", "na2000", "m2000", "N0", "na5", "N4"], "n1": ["nOne", "n9", " nOne", "name9", "name1", "N1", "N01", "N2", "NOne", "nn0", "N9", " n9", "nnOne", "n01", "nn1", "N0", "nn2", " n01", "name01", "nameOne"], "n2": [" n02", "nn5", " n8", "name02", "nn02", "name2", "nn4", "name4", "N2", "name8", "N8", "N02", "n8", "N5", "nn2", "N4", "n02"], "n3": [" nThree", "note3", "nThree", "n9", "nn5", "N3", "n03", "nn4", "note9", "N9", "N5", " n9", "noteThree", "nn3", "note03", "NThree", "nn03", "N4", "N03", " n03"], "n4": ["n9", "name9", "n44", "note44", "numFour", "n34", "name4", "nFour", "N2", "note9", "note34", " n34", " nFour", "num5", "name34", "name44", "N5", "num2", " n9", "num4", "NFour", " n44", "N4", "note4"], "n5": ["note25", "note7", "nn5", "note5", "N25", "N7", "N85", "N2", "nn7", "note85", " n7", "n25", " n25", "N5", "n85", " n85", "nn25", "nn2", "n7"], "dir": ["fd", "loc", "rot", "door", "dirty", "draft", "str", "path", "ir", "cont", "db", "order", "cycle", "file", "di", "DIR", "dial", "short", "iter", "rd", "diff", "driver", "old", "round", "window", "angle", "wd", "hor", "ind", "cmd", "trans", "dy", "rel", "dep", "vol", "folder", "dist", "disk", "dr", "url", "pos", "Dir", "det", "row", "normal", "directory", "tr", "drive", "orient", "rt", "direct", "rect", "desc", "der", "div", "direction", "dis", "orth", "addr", "dd", "dra", "range", "bound", "grad", "dict", "mode", "md", "rad"], "d": ["fd", "n", "dm", "p", "cd", "g", "di", "td", "dh", "r", "w", "c", "m", "z", "diff", "dl", "dom", "o", "h", "dt", "done", "f", "b", "t", "dat", "dep", "dig", "dist", "da", "dr", "pd", "v", "e", "de", "ad", "dx", "D", "der", "do", "div", "dis", "dot", "l", "dd", "du", "sd", "y", "md", "dict", "ds", "nd"]}}
{"code": "import collections\\nINF = 10**18\\nh,w = map(int,input().split())\\nli = [list(input()) for i in range(h)]\\nkoho = []\\nd = [[-1]*w for i in range(h)]\\nq = collections.deque([])\\nfor i in range(h):\\n    for j in range(w):\\n        if li[i][j] == \"#\":\\n            d[i][j] = 0\\n            q.append([i,j])\\ndx = [1,0,-1,0]\\ndy = [0,1,0,-1]\\nwhile q:\\n    p = q.popleft()\\n    y = p[0]\\n    x = p[1]\\n    for i in range(4):\\n        nx = x + dx[i]\\n        ny = y + dy[i]\\n        if 0<=nx<w and 0<=ny<h:\\n            if d[ny][nx] == -1:\\n                q.append([ny,nx])\\n                d[ny][nx] = d[y][x] + 1\\nans = -1\\nfor i in range(h):\\n    for j in range(w):\\n        ans = max(ans,d[i][j])\\nprint(ans)", "target": "657", "substitutes": {"INF": ["inP", "CONV", "CONP", "INN", "INP", " INV", "CONF", "inN", "CONN", "inV", "INV", "inF", " INP", " INN"], "h": ["history", "ht", "n", "sh", "kh", "g", "hz", "html", "wh", "hal", "r", "hs", "m", "z", "ih", "rh", "http", "o", "H", "ah", "bh", "hl", "t", "v", " H", "oh", "height", "his", "hw", "ha", "s", "ch", "ph", "he", "hr", "hd", "l", "ho", "hh", "k", "hi", "hm"], "w": ["wx", "n", "sw", "wn", "wy", "wh", "we", "wt", "r", "wed", "m", "z", "wb", "wall", "wr", "window", "iw", "rw", "wi", "W", "wd", "wo", "wcs", "wal", "ew", "wl", "wid", "win", "wa", "wp", "fw", "v", "width", "ws", "hw", "s", "work", "nw", "l", "aw", "words"], "li": ["mi", "ki", "n", "lu", "xi", "ci", "ln", "di", "ai", "L", "c", "ml", "m", " Li", "bi", "dl", "sl", "la", "ls", "b", "lis", "si", "lo", "Li", "lp", "ii", "LI", "list", "zi", "ol", "bl", "l", "pi", "il", "le", "pl", "hi"], "i": [" ii", "mi", "a", "n", "xi", "ia", "ie", "ci", "gi", "ir", "vi", "di", "ai", "I", "m", "z", "ami", "bi", "info", "iti", "ic", "o", "ix", "ip", "iri", "f", "t", "io", "si", "ii", "ji", "v", "e", "int", "ti", "oi", "iy", "im", "it", "zi", "ini", "ui", "phi", "pi", "ati", "l", "u", "id", "iat", "ij", "index", "ik", "iu", "hi"], "koho": ["kwen", "mkip", " kip", "mkwen", "mkdr", "ikdr", " kw", " kdr", "ikw", "kdr", "ikip", "kw", "ikwen", " kwen", "kip", "mkw"], "d": ["fd", "a", "n", "dos", "db", "dir", "g", "di", "dn", "td", "dh", "r", "c", "z", "bd", "m", "dl", "o", "dt", "done", "df", "b", "f", "dat", "t", "da", "dr", "pd", "de", "e", "v", "ad", "debug", "s", "D", "do", "l", "dd", "dj", "du", "dra", "did", "k", "dict", "ds", "nd"], "q": ["aq", "ck", "n", "queue", "ql", "resh", "ues", "ued", "ue", "g", "iq", "qu", "qt", "requ", "r", "c", "m", "pe", "qi", "query", "ques", "gm", "quick", "f", "ready", "quit", "t", "Q", "check", "v", "e", "sq", "list", "qq", "eq", "qa", "ch", "qual", "needed", "req", "dq", "que", "l", "ent", "qs", "sync", "ry", "like", "ow"], "j": ["a", "json", "n", "uj", "ja", "ie", "aj", "js", "g", "jp", "r", "oj", "jc", "z", "c", "m", "jj", "bi", "note", "ju", "o", "ix", "ip", "pr", "jl", "fr", "b", "je", "br", "t", "jac", "si", "pt", "J", "ion", "bj", "ji", "v", "kj", "obj", "im", "it", "jump", "l", "dj", "ij"], "dx": ["wx", "ex", "dir", "dial", "ox", "dl", "ix", "wd", "tx", "dt", "ax", "xd", "days", "wid", "DX", "dist", "dr", "fx", "des", "xy", "xs", "dq", "fy", "xx", "dj", "du", "sd", "px", "ds", "eddy", "nd"], "dy": ["sy", "ty", "idy", "phy", "jee", "dies", "ady", "dn", "wy", "addy", "uds", "die", "dl", "yi", "py", " Dy", "dt", " dys", "uy", "ded", "innie", "ey", "gy", "iy", "xy", "dq", "fy", "yy", "dd", "dj", "sd", "ds", "eddy"], "p": ["pkg", "pair", "perm", "press", "port", "point", "mp", "pc", "vp", "rep", "g", "jp", "c", "pb", "info", "tp", "pa", "ip", "sp", "part", "pt", "parse", "lp", "pos", "P", "pop", "cache", "ap", "post", "cp", "it", "ping", "app", "per", "pl", "progress", "bp", "np", "item", "er", "op", "pp", "comp", "ps", "pg"], "y": ["sy", "n", "ty", "ys", "wy", "cy", "oy", "ky", "yo", "z", "ies", "yi", "vy", "o", "py", "ye", "yr", "hy", "axy", "b", "yl", "zy", "uy", "yn", "ey", "gy", "iy", "xy", "ry", "yt", "Y", "yy", "iny", "hot", "yu", "ay", "ym"], "x": ["wx", "n", "xi", "ex", "path", "xe", "xc", "left", "X", "rx", "ox", "z", "m", "xxxx", "xt", "xml", "ix", "tx", "ax", "f", "xd", "v", "fx", "width", "xy", "xs", "nex", "xx", "l", "addr", "lat", "yx", "px", "index", "xp"], "nx": ["nxc", "any", "anw", " nxy", "dnw", " np", "ynx", "ndx", " nix", "mnw", "dnc", "dny", "eny", " ndx", "ync", "anix", "mnc", "mnx", "dndx", "dnx", "nnw", "ynfx", "dnp", "nsdx", "nnix", "enw", "dnxc", "nxe", "nnfx", "nsx", "nfx", "nsxe", "dnwx", " nw", "nnxy", "enx", "nc", "nny", "nxy", "enxc", "dnfx", "nnx", "dnxe", "nwx", "anx", " nfx", "mnfx", "nw", "mnxy", "nix", "np", " nxe", " nxc", "ynwx", "mnwx", "nsp"], "ny": ["sy", "sym", "n", "ty", "ni", "nt", "ja", "ady", "ne", "wy", "cy", "sn", "ky", "yo", "ox", "yz", "sys", "ns", "bi", "my", "yan", "vy", "py", "ye", "jl", "hy", "axy", "sat", "zy", "si", "nit", "ot", "uy", "na", "ey", " Ny", "gy", "ony", "iy", "xy", "nu", "yt", "nn", "yy", "hog", "dj", "xx", "iny", "hot", "ij", "NY", "ry"], "ans": ["ANS", "ants", "ats", "ians", "outs", "ows", "aus", "ros", "us", "aned", " Ans", "ates", "ns", "anus", "ann", "rans", "ums", "anas", " spans", "ks", "ins", "offs", "ons", "ms", "angs", "amps", "ls", "ents", "ens", "ations", "anc", "cas", "uns", "na", "an", "posts", "anks", "iann", "aps", "oss", "nan", "xs", "ions", "nas", "ands", "vs", "ads", "arts", "cs", "os", "asms", "lan", "ds", "ps"]}}
{"code": "n, m, x = map(int, input().split())\\na = [[] for _ in range(n)]\\nfor i in range(n):\\n    a[i] = list(map(int, input().split()))\\nans = 10000000000000\\nfor i in range(2 ** n):\\n    money = 0\\n    understand = [0] * m\\n    for j in range(n):\\n        if i >> j & 1:\\n            money += a[j][0]\\n            for k in range(1, m + 1):\\n                understand[k - 1] += a[j][k]\\n    if min(understand) >= x:\\n        ans = min(money, ans)\\nprint(ans if ans < 10000000000000 else -1)\\n", "target": "112", "substitutes": {"n": ["N", "nt", "ni", "d", "p", "ne", "g", "w", "r", "c", "sn", "z", "ns", "o", "h", "num", "t", "len", "no", "nb", "mn", "na", "v", "an", "int", "nc", "s", "nu", "nn", "q", "l", "np", "pi", "y"], "m": ["mi", "M", "pm", "dm", "d", "p", "mm", "g", "r", "w", "c", "ma", "z", "man", "o", "gm", "h", "ms", "f", "b", "num", "t", "mc", "mn", "v", "an", "sm", "l", "mon", "y", "cm", "mt"], "x": ["xi", "ex", "max", "xe", "p", "g", "xc", "xa", "X", "rx", "w", "ox", "z", "xt", "xxx", "man", "o", "h", "tx", "f", "t", "v", "e", "cox", "xy", "xs", "mx", "xx", "l", "y", "px", "xp", "xf"], "a": ["history", "ae", "ava", "ab", "era", "ta", "p", "ana", "va", "xa", "c", "ma", "ata", "eas", "ga", "o", "ea", "aaa", "b", "t", "alpha", "da", "apa", "na", "an", "v", "A", "at", "ao", "sa", "s", "app", "au", "oa", "aos", "aa", "l", "am", "y", "ba", "ac"], "_": ["ct", "ml", "ix", "val", " int", "ind", "pt", "int", "ac"], "i": ["mi", "ki", "xi", "ia", "ni", "ci", "gi", "p", "on", "ai", "I", "z", "bi", "yi", "ic", "o", "ip", "b", "t", "si", "li", "ii", "v", "int", "ti", "im", "it", "s", "zi", "ini", "l", "pi", "id", "y", "ij", "ik"], "ans": ["ars", "anti", "ANS", "ants", "ats", "ians", "sign", "actions", "unders", "ano", " means", "was", "eds", "aus", "ros", "iban", "san", "ates", "ns", "ann", "rans", "mas", "rs", "anas", "ks", "ant", "ins", "man", "ons", "ms", "amps", "tx", "ls", "pan", "mean", "ents", "trans", "ens", "nia", "no", "mn", "uns", "can", "an", "rors", "iann", "s", "nan", "xs", "ran", "aos", "rates", "arts", "os", "anos", "lan", "AN", "ds", "ones", "said"], "money": ["company", "oney", "fine", "currency", "mini", "very", "mo", "buy", "human", "ota", "value", "transfer", "iban", "weight", "ma", "total", "message", "payment", "uno", "ms", "mean", "trans", "multi", "price", "Money", "amount", "ONEY", "margin", "an", "dollar", "balance", "easy", "machine", "bill", "cast", "rice", "number", "mon", " Money", "coin", "cash", "data", "micro", "mint", "pay"], "understand": ["groundhold", "underStand", "Understand", "standmeet", "underhold", "foreStand", "undermeet", "understood", "groundstand", "standstand", "forestand", "groundstood", " undermeet", "Undermeet", "Underhold", " underStand", "headStand", "groundStand", "forehold", "headstood", "UnderStand", "Underground", " understood", "Understood", " underhold", "standhold", "standground", "headhold", "headstand", "underground", "forestood", " underground"], "j": ["json", "uj", "ja", "ijk", "aj", "d", "p", "js", "name", "g", "jp", "kid", "job", "r", "jc", "oj", "z", "c", "jj", "o", "h", "jl", "f", "b", "je", "jac", "t", "J", "bj", "key", "kj", "v", "ji", "obj", "jump", "q", "l", "dj", "u", "y", "ij"], "k": ["ck", "ki", "kn", "kr", "kh", "kl", "ijk", "p", "g", "kar", "ak", "ke", "kid", "c", "z", "ks", "o", "kw", "ko", "tk", "t", "key", "kj", "v", "ok", "ch", "ku", "wk", "kt", "q", "u", "kk", "ka", "K", "ik", "y", "kg", "mk", "unk"]}}
{"code": "from math import sqrt\\nx1, y1, x2, y2 = map(float, input().split())\\nr = sqrt((x2 - x1)**2 + (y2 - y1)**2)\\nprint(r)", "target": "196", "substitutes": {"x1": ["tx1", "rx2", " x3", "ix1", "ex1", "rx1", "tx0", "xone", "ex0", "rx01", "x01", " x01", "x0", "tx01", "ix2", " x0", " xone", "ixone", "ix01", "ex3", "tx3", "x3", "rxone", "ex01"], "y1": [" y3", " y0", "uy0", "y3", "ny1", " y101", "ery101", "ny01", "ery01", "uy001", "uy2", "ny3", "y01", "uy1", "Y2", "y001", "ny101", " y01", "Y1", "Y0", "ery1", "y0", "y101", " y001", "Y001", "ery3"], "x2": ["ix8", "xs8", "rx2", "xi256", "x256", "ex2", "ix1", "ix256", "rx256", "rx1", "xs2", "xs02", "ex8", "xi1", "x8", "rx3", "ex02", "xi2", "ix2", "x02", "ex3", "xi8", "rx02", "x3", "xs3", "rx8"], "y2": ["iy5", "oy42", "ay6", "iy6", "y42", "oy52", "oy5", "iy52", "y6", "y52", "yer2", " y52", " y5", "oy2", "ay2", "iyalt", "yer6", "yerTwo", "ayTwo", "y5", "iy42", "iyTwo", "ayalt", "yTwo", "iy2", "yalt", "yeralt", " y42"], "r": ["n", "mr", "sr", "kr", "ro", "rg", "p", "g", "R", "rc", "re", "complex", "radius", "m", "rd", "rh", "rs", "rb", "res", "h", "rec", "vr", "rar", "br", "b", "fr", "right", "t", "rel", "rating", "dr", "rank", "rt", "hr", "q", "l", "ar", "range", "attr", "rate", "rad"]}}
{"code": "N = int(input())\\n\\nl = []\\nfor i in range(N+1):\\n    if i % 5 == 0 or i % 3 == 0:\\n        l.append(0)\\n    else:\\n        l.append(i)\\n\\nprint(sum(l))", "target": "167", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "NV", "NC", "GN", "Ns", "R", "I", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "V", "S", "Wh", "B", "Q", "ND", "Num", "P", "Sn", "D", "NB", "Len", "Ni", "K", "F", "TN", "C"], "l": ["lc", "n", "kl", "ln", "lt", "p", "ld", "left", "lb", "L", "long", "r", "ml", "m", "dl", "el", "nl", "sl", "la", "log", "ls", "b", "hl", "len", "lis", "rl", "lo", "lists", "fl", "li", "lp", "lam", "v", "gs", "list", "lv", "lr", "bl", "pl", "ll", "like"], "i": ["mi", "ki", "n", "xi", "x", "bis", "ci", "gi", "p", "di", "ai", "I", "iter", "m", "bi", "yi", "qi", "ic", "ix", "ip", "f", "si", "ii", "li", "ji", "v", "ei", "int", "ti", "oi", "ori", "key", "im", "it", "zi", "ui", "\u0438", "q", "pi", "phi", "id", "j", "index", "ik", "ij", "iu", "hi"]}}
{"code": "#import numpy as np\\nimport sys, math\\nfrom itertools import permutations, combinations\\nfrom collections import defaultdict, Counter, deque\\nfrom math import factorial#, gcd\\nfrom bisect import bisect_left, bisect_right #bisect_left(list, value)\\nsys.setrecursionlimit(10**7)\\nenu = enumerate\\nMOD = 10**9+7\\ndef input(): return sys.stdin.readline()[:-1]\\npl = lambda x: print(*x, sep='\\n')\\n\\nS = input()\\nK = int(input())\\n\\nfor i, s in enu(S):\\n    if s != '1':\\n        print(s)\\n        exit()\\n    if i == K-1:\\n        print(s)\\n        exit()\\n", "target": "119", "substitutes": {}}
{"code": "s = str(input())\\nt = str(input())\\nN = len(s)\\nS = [0] * N\\nT = [0] * N\\n\\nfor i in range(N):\\n  S[i] = s[i]\\n  T[i] = t[i]\\n  \\nfor i in range(N):\\n  for j in range(N):\\n    if j == 0:\\n      x = S[j]\\n      S[j] = S[j + 1]\\n    elif 1 <= j < N - 1:\\n      S[j] = S[j + 1]\\n    else:\\n      S[j] = x\\n  #print(S)    \\n  if S == T:\\n    print(\"Yes\")\\n    quit()\\n    \\nprint(\"No\")    \\n      \\n      \\n", "target": "721", "substitutes": {"s": ["a", "n", "ys", "su", "str", "ats", "js", "p", "g", "us", "c", "ts", "z", "m", "ns", "rs", "ins", "sl", "h", "ms", "ls", "f", "b", "sp", "ss", "strings", "gs", "sq", "ws", "st", "sv", "xs", "sts", "q", "l", "se", "y", "os", "qs", "ds", "ps"], "t": ["tm", "a", "n", "ty", "ta", "p", "g", "qt", "tw", "r", "tc", "txt", "c", "ts", "m", "wt", "z", "gt", "te", "dt", "b", "pt", "ot", "v", "bt", "at", "tt", "tr", "tf", "it", "rt", "st", "q", "vt", "y"], "N": ["SN", "CNN", "M", "n", "NS", "NC", "GN", "NI", "Na", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "Node", "V", "No", "NO", "Z", "B", "J", "Q", "G", "ND", "P", "Num", "A", "Sn", "D", "NB", "Y", "MN", "Len", "Ni", "K", "F", "UN", "AN", "TN", "C"], "S": ["M", "List", "NS", "Session", "SH", "Statistics", "BS", "SS", "SL", "SB", "R", "I", "X", "L", "RS", "PS", "Si", "Sl", "VS", "SI", "CS", "TS", "Set", "H", "W", "Services", "GS", "V", "Ins", "Se", "B", "J", "Q", "G", "P", "SE", "A", "Windows", "US", "Results", "Sn", "SU", "SP", "D", "DS", "Y", "SA", "U", "F", "SR", "Z", "C"], "T": ["WT", "IT", "M", "TD", "AT", "X", "R", "I", "L", "TS", "PT", "NT", "TC", "TL", "H", "W", "V", "Z", "TV", "B", "J", "G", "P", "E", "Ts", "TT", "XT", "TA", "D", "TM", "Y", "GT", "OT", "TN", "C"], "i": ["iii", "mi", "ki", "n", "xi", "ia", "uri", "ie", "ci", "gi", "di", "ai", "I", "iter", "z", "bi", "info", "yi", "iti", "ic", "ix", "o", "ip", "iri", "ind", "io", "si", "li", "ii", "ji", "ori", "e", "int", "ti", "list", "im", "it", "zi", "ini", "ui", "pi", "item", "id", "y", "index", "ij", "k", "ik", "iu", "init"], "j": ["next", "json", "n", "uj", "ja", "js", "aj", "d", "p", "ret", "g", "jp", "job", "oj", "jc", "z", "jj", "bi", "el", "h", "jl", "br", "b", "jac", "fr", "pt", "J", "dr", "bj", "li", "ji", "kj", "v", "key", "ii", "obj", "it", "jump", "q", "l", "dj", "y", "k", "jit", "ij", "index"], "x": ["a", "wx", "xi", "ex", "xe", "p", "ux", "test", "ct", "X", "xa", "rx", "w", "c", "ox", "z", "xxxx", "xt", "hex", "ix", "tx", "xd", "jac", "zx", "v", "e", "na", " xx", "xy", "ch", "xs", "mx", "dx", "xx", "l", "y", "xp", "xf"]}}
{"code": "X, K, D = map(int, input().split())\\n\\nX = abs(X)\\nreach_or_before = X // D\\n\\n\\nif K <= reach_or_before:\\n    print(X - D * K)\\nelse:\\n    #remaining jump\\n    remain = K - reach_or_before\\n    before_dist = X - D * reach_or_before #(>0)\\n    after_dist = D * (reach_or_before + 1) - X\\n    if remain % 2 == 0:\\n        print(before_dist)\\n    else:\\n        print(after_dist)\\n", "target": "66", "substitutes": {"X": ["MAX", "INT", "M", "IX", "N", "x", "T", "Win", "TX", "R", "I", "L", "EX", "MX", "UX", "OX", "Ex", "H", "ZX", "XY", "V", "Cross", "PK", "S", "XP", "DX", "B", "J", "Q", "G", "P", "A", "E", "XX", "Y", "XL", "U", "F", "Z", "C", "Xi"], "K": ["M", "N", "T", "KR", "MK", "I", "R", "L", "KK", "DK", "Kin", "H", "W", "O", "V", "KS", "KC", "PK", "Kent", "S", "IK", "J", "Q", "SK", "B", "G", "P", "A", "E", "VK", "Y", "UK", "k", "U", "F", "KI", "Z", "KE", "KA", "KING", "C"], "D": ["M", "N", "DL", "T", "d", "R", "I", "L", "DE", "DI", "W", "H", "V", "S", "Do", "DX", "DA", "DP", "B", "Q", "J", "DD", "DC", "P", "A", "E", "Ds", "DS", "DM", "Y", "DF", "DB", "F", "Z", "C"], "reach_or_before": ["reach_nor_after", "reach_or_back", "reach_nor_Before", "reach_nor_back", "reach_ormayabove", "reach_ormayafter", "reach_nor_before", "reach_or_Before", "reach_or_above", "reach_ormayback", "reach_ormaybefore", "reach_nor_above", "reach_or_after", "reach_nor_catch", "reach_or_catch"]}}
{"code": "s = input()\\nsum = 700\\nfor i in range(3):\\n    if s[i] == \"o\":\\n        sum += 100\\nprint(sum)\\n", "target": "231", "substitutes": {"s": ["a", "n", "ys", "ials", "su", "js", "p", "ains", "g", "fs", "w", "r", "us", "c", "ts", "m", "hs", "ns", "ates", "rs", "input", "ses", "ins", "h", "ms", "amps", "ls", "f", "b", "abs", "t", "S", "ss", "ends", "v", "gs", "sq", "aps", "ares", "ances", "sv", "xs", "ments", "sts", "y", "qs", "ps", "bs"], "sum": ["n", "max", "summary", "nt", " summed", "um", "p", "med", "g", "sup", "zero", "us", "m", "SI", "sam", "total", "success", "tail", "h", "result", "Sum", "mean", "num", "count", "t", "ss", "fac", "si", "cum", "sim", "vol", "share", "add", "v", "hist", "cal", "hum", "sa", "sv", "average", "size", "dot", "mem", "se", "index", "cost", "ass", "temp"], "i": [" ii", "\u00ed", "mi", "n", "xi", "x", "ite", "gi", " j", " k", "uli", "ai", "I", "c", "m", "z", "yi", "qi", "ix", "iri", "ind", "b", "si", "ii", "li", "v", "ti", "oi", "iy", "im", "zi", "ini", "\u0438", "q", "l", "pi", "id", "j", "index", "k", "ij", "y", "iu"]}}
{"code": "s=list(input())\\nans=0\\nfor i in range(len(s)//2):\\n    if s[i]==s[len(s)-1-i]:\\n        continue\\n    ans+=1\\nprint(ans)", "target": "387", "substitutes": {"s": ["a", "bis", "n", "sb", "su", "str", "ats", "js", "p", "g", "hs", "c", "ts", "m", "ns", "ies", "rs", "input", "ess", "less", "ins", "h", "ms", "ls", "abs", "b", "sp", "ids", "t", "gins", "S", "ss", "parts", "f", "its", "als", "tes", "strings", "gs", "sq", "ws", "sa", "sv", "xs", "ims", "sts", "l", "cs", "os", "qs", "ds", "ps", "bs"], "ans": ["ANS", "ants", "ats", "ians", "eds", " means", "acs", "outs", "ai", "aus", "ros", "aned", "mos", "ns", "anus", "ann", "rans", "rs", "ums", "anas", "ks", "mas", "ons", "ms", "angs", "amps", "anned", "pan", "ids", "ents", "ens", "can", "an", "anks", "iann", "anes", "oss", "ays", "nan", "ran", "ams", "aos", "ads", "cs", "arts", "lan", "AN", "ds"], "i": ["mi", "ki", "n", "ogi", "x", "xi", "ci", "gi", "p", "on", "di", "ai", "I", "iter", "m", "qi", "yi", "ic", "ix", "iri", "ind", "b", "si", "li", "ii", "v", "ti", "im", "it", "ini", "zi", "ui", "\u0438", "ish", "q", "phi", "pi", "l", "id", "j", "y", "k", "ij", "index", "iu"]}}
{"code": "n = int(input())\\nH = list(map(int,input().split()))\\ndp = [0 for _ in range(n+1)]\\ndp[1] = abs(H[1] - H[0])\\nfor i in range(2,n):\\n    b1 = dp[i-1] + abs(H[i] - H[i-1])\\n    b2 = dp[i-2] + abs(H[i] - H[i-2])\\n    dp[i] = min(b1,b2)\\nprint(dp[-2])", "target": "5", "substitutes": {"n": ["N", "x", "nt", "gn", "ln", "d", "p", "ne", "g", "cn", "sn", "r", "c", "w", "m", "ns", "o", "nl", "h", "num", "t", "len", "nb", "no", "mn", "na", "v", "an", "nc", "un", "s", "nan", "nu", "nw", "nn", "q", "l", "np", "pi", "j", "k"], "H": ["Graph", "IT", "M", "N", "CH", "Eh", "HD", "HQ", "HM", "SH", "HP", "His", "GO", "HS", "HL", "HE", "Th", "X", "AH", "RH", "R", "AV", "HO", "HI", "GH", "WH", "HTML", "NH", "h", "HR", "DH", "O", "TH", "Ch", "V", "TN", "HH", "B", "History", "HF", "P", "HA", "Head", "OH", "HK", "IL", "D", "HC", "MH", "HTTP", "Hz", "HB", "F", "HT", "Hi", "He", "HHHH"], "dp": ["pkg", "dro", "dos", "imp", "dm", "d", "p", "db", "cd", "vp", "di", "dial", "jp", "dh", "dl", "fp", "pb", "dk", "gp", "bsp", "wd", "tp", "decl", "ip", "dt", "df", "xd", "dat", "dc", "dep", "pas", "isp", "ps", "DP", "wp", "lp", "pd", "dr", "params", "delay", "deb", "cp", "bps", "csv", "dx", "dq", "dd", "dj", "du", "np", "grad", "attr", "pp", "ds", "adr"], "_": ["x", "ex", " j", " k", " nan", "I", "ox", "ix", "val", "ind", " f", " x", " c", " m", " __", "___", " p", "j", "index", " un", " z"], "i": ["mi", "xi", "x", "me", "cli", "gi", "p", "on", "name", "di", "ai", "I", "this", "c", "m", "batch", "bi", "status", "info", "ic", "ix", "ip", "h", "ind", "f", "b", "multi", "ri", "io", "si", "ii", "li", "ji", "v", "e", "ori", "ti", "key", "s", "im", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "item", "id", "u", "j", "k", "index", "ij", "asi", "y", "iu", "hi"], "b1": ["bb0", "bb61", "b61", "bb10", "rb1", "b10", "lb1", "lb61", "b0", "ob10", "b01", "bb01", "bb51", "rb01", "b51", "rb61", " b01", " b10", "ob01", "rb51", "ob0", " b0", "bb1", "lb51", "ob1", "lb01"], "b2": ["cb2", "back52", "b62", "ib62", "ib8", "b8", "cblet", "base52", "bc2", "base22", "cb22", "back22", " b62", "cb52", "bc62", "base2", "blet", "back2", "b22", "b52", "baselet", "bc8", "bc52", "ib52", " b52", " b8", "ib2", "backlet"]}}
{"code": "sa = input()\\ns = list(sa)\\na = [chr(ord('a') + i) for i in range(26)]\\nif sa == \"zyxwvutsrqponmlkjihgfedcba\":\\n    print(-1)\\nelif len(s) != 26:\\n    for i in range(len(a)):\\n        if a[i] not in s:\\n            s.append(a[i])\\n            print(\"\".join(s))\\n            exit()\\nelse:\\n    used = [s[25]]\\n    for i in range(25, 0, -1):\\n        if a.index(s[i-1]) > a.index(s[i]):\\n            used.append(s[i-1])\\n        else:\\n            for j in range(a.index(s[i-1])+1, 26):\\n                if a[j] in used:\\n                    s[i-1] = a[j]\\n                    print(\"\".join(s[:i]))\\n                    exit()\\n\\n\\n\\n\\n", "target": "81", "substitutes": {"sa": ["sb", "sw", "sh", "sta", "ia", "ja", "ta", "ama", "va", "ai", " si", "ma", "sama", "sam", "osa", "rs", "ga", "te", "ea", "pa", "sg", "sea", " ba", "si", "da", "wa", "apa", "na", "ha", "so", "sha", "au", "oa", "aa", "sis", "ar", "asi", "SA", "se", "ds", "ca"], "s": ["n", "ats", "p", "us", "r", "c", "set", "ns", "ms", "ss", "states", "strings", "e", "string", "ims", "se", "bs", "sw", "js", "g", "ins", "less", "ids", "si", "its", "sv", "sts", "l", "cs", "stats", "str", "spec", "sys", "ses", "h", "parts", "tes", "xs", "so", "times", "sis", "ar", "es", "os", "ps", "bis", "sb", "space", "w", "ts", "rs", "ls", "abs", "b", "f", "t", "S", "gs", "sq", "steps", "ws", "st", "ashes", "y", "qs", "ds"], "a": ["n", "x", "sta", "ae", "to", "ab", "ta", "p", "ana", "ach", "g", "acs", "va", "ai", "ows", "xa", "r", "w", "c", "ma", "m", "ata", "eas", "ga", "o", "ea", "pa", "aaa", "la", "abs", "b", "f", "t", "wa", "apa", "na", "an", "v", "e", "all", "att", "A", "ap", "al", "aps", "at", "another", "au", "oa", "aos", "aa", "l", "am", "ar", "u", "area", "ca", "ared", "ac"], "i": ["mi", "\u00ed", "n", "xi", "x", "ki", "ni", "me", "ite", "ci", "gi", "ir", "d", "p", "cli", "di", "ai", "I", "jp", "c", "m", "z", "bi", "ami", "yi", "iti", "ic", "o", "ix", "ip", "ind", "f", "b", "t", "ri", "io", "si", "iu", "li", "ii", "ji", "v", "e", "ei", "ti", "oi", "ori", "int", "im", "it", "zi", "ini", "ui", "l", "pi", "phi", "id", "y", "k", "ij", "index", "ik", "iri", "hi"], "used": ["next", "ex", "missing", "necessary", " unused", "uses", "usable", "util", "p", "checked", "we", "us", "added", "seen", "set", "created", "specified", "z", "restricted", "using", "res", "Used", "ms", "failed", "f", "sp", "loaded", "v", "available", "users", "final", "reed", "free", "has", "ended", "shared", "needed", "found", "ed", "user", "usage", "u", "finished", "se", "os", "use"], "j": ["json", "n", "uj", "ja", "ijk", "js", "aj", "p", "di", "g", "jp", "oj", "jc", "z", "jj", "bi", "ju", "o", "h", "jl", "f", "b", "jac", "J", "bj", "key", "ji", "v", "jas", "kj", "it", "jump", "q", "l", "dj", "u", "y", "k", "jit", "ij"]}}
{"code": "N, W = map(int, input().split())\\n\\nw, v = map(int, input().split())\\n\\nvalues = [[] for _ in range(4)]\\n\\nvalues[0].append(v)\\n\\nfor _ in range(N-1):\\n    x, y = map(int, input().split())\\n    values[x-w].append(y)\\n\\nn = [0]*4\\nfor i in range(4):\\n    n[i] = len(values[i])\\n    values[i].sort(reverse=1)\\n\\nans = 0\\nans0 = 0\\nans1 = 0\\nans2 = 0\\nfor n0 in range(n[0]+1):\\n    if n0 > 0:\\n        ans0 += values[0][n0-1]\\n    if n0 * w > W:\\n        break\\n    for n1 in range(n[1]+1):\\n        if n1 > 0:\\n            ans1 += values[1][n1-1]\\n        else:\\n            ans1 = 0\\n        if n0 * w + n1 * (w+1) > W:\\n            break\\n        for n2 in range(n[2]+1):\\n            ww = n0 * w + n1 * (w+1) + n2 * (w+2)\\n            if n2 > 0:\\n                ans2 += values[2][n2-1]\\n            else:\\n                ans2 = 0\\n            if ww > W:\\n                break\\n            n3 = (W - ww) // (w+3)\\n            ans = max(ans, ans0+ans1+ans2+sum(values[3][:n3]))\\n\\nprint(ans)", "target": "512", "substitutes": {"N": ["SN", "CNN", "M", "NS", "T", "We", "NI", "NW", "R", "X", "I", "L", "NN", "NR", "NT", "NH", "H", "O", "V", "TN", "S", "Wh", "B", "P", "Num", "E", "D", "NB", "Y", "Ni", "U", "K", "F", "Z", "C"], "W": ["WT", "WC", "M", "We", "T", "WR", "GW", "MW", "WI", "CW", "WAR", "Word", "TW", "Win", "Ws", "WP", "NW", "X", "R", "L", "RW", "Wi", "WW", "VW", "WH", "BW", "H", "V", "WA", "S", "Wh", "SW", "Week", "WB", "G", "P", "WF", "Y", "WE", "DW", "U", "F", "WS", "Z"], "w": ["wx", "sw", "wn", "d", "p", "mm", "name", "g", "tw", "wh", "we", "wt", "r", "weight", "m", "z", "wb", "wall", "man", "wr", "window", "iw", "rw", "power", "wd", "kw", "h", "wal", "go", "ew", "b", "word", "f", "wl", "wid", "t", "win", "wa", "wp", "exp", "all", "width", "ws", "wig", "hw", "now", "nw", "wk", "l", "q", "aw", "k", "deg"], "v": ["p", "vi", "vo", "tv", "va", "g", "value", "r", "uv", "c", "m", "z", "o", "h", "V", "vr", "f", "b", "vc", "t", "lv", "s", "sv", "ve", "vs", "l", "var", "u", "k", "vt", "j"], "values": ["settings", "modules", "images", "value", "lets", "ns", "Values", "boxes", "rices", "days", "states", "videos", "aps", "sets", "words", "changes", "data", "options", "uments", "ools", "codes", "vi", "we", "stores", "objects", "maps", "weights", "dates", "its", "results", "flows", "s", "places", "rates", "rows", "types", "urations", "users", "measures", "seconds", "names", "lines", "items", "reports", "ums", "blocks", "years", "docs", "units", "lists", "terms", "times", "rules", "bes", "vs", "models", "fields", "ps", "views", "ports", "styles", "actions", "cells", "versions", "vals", "details", "tests", "frames", "members", "groups", "pins", "errors", "forms", "points"], "_": [" the", "ox", " example", "ix", "let", "val", " __", "\u00e7", " each"], "x": ["wx", "xi", "ex", "xe", "p", "ux", "xc", "ct", "X", "xa", "rx", "c", "ox", "z", "m", "xt", "ix", "tx", "ax", "xd", "t", "key", "e", " xx", "xy", "xf", "xs", "dx", "l", "xx", "yx", "u", "lex", "px", "zx"], "y": ["ty", "ys", "p", "wy", "cy", "oy", "sys", "ox", "z", "ies", "ny", "yi", "vy", "o", "py", "ye", "h", "yr", "b", "t", "yl", "yn", "ey", "xy", "s", "yt", "Y", "yy", "j", "ya", "ay", "ym"], "n": ["nr", "net", "nt", "p", "en", "on", "names", "norm", "ne", "cn", "name", "dn", "sn", "c", "r", "m", "z", "ns", "o", "nl", "ren", "br", "b", "num", "fn", "t", "len", "nb", "nor", "mn", "nv", "out", "na", "tn", "nc", "s", "nu", "size", "nn", "l", "number", "np", "j", "k"], "i": ["mi", "ki", "xi", "ci", "p", "di", "ai", "I", "iter", "r", "c", "m", "z", "ic", "ix", "ip", "ind", "t", "ri", "io", "si", "li", "ii", "ori", "int", "ti", "im", "s", "it", "zi", "ini", "q", "l", "pi", "id", "j", "index", "ij", "k", "iu"], "ans": ["ars", "sw", "ANS", "ants", "ats", "ians", "ean", "actions", "names", " means", "outs", "ows", "aus", "ros", "us", "aned", "ns", "vals", "ann", "rans", "rs", "ongs", "anas", "ks", "offs", "ins", "ras", "ons", "ms", "angs", "amps", "ls", "ents", "ids", "ens", "weights", "uns", "an", "posts", "anks", "aps", "anes", "ups", "s", "ams", "ands", "vs", "yes", "arts", "os", "es", "stats", "lan", "errors"], "ans0": ["ons0", "ans50", "ANS0", "ens0", "anszero", "ants5", "anzero", "ANS00", "easzer", "ens50", "edszer", "ansall", "eas0", "ans5", "easzero", "ons50", "ANS50", "eds1", " ans00", "edszero", "an0", "an1", "ants00", "anszer", " ans50", "anzer", " ans5", "ons00", "onsall", "eas1", "ans00", " ansall", "eds0", "ants50", "ens00", "ANS5", "ants0", "ensall"], "ans1": ["an3", " ans001", " means1", " meansn", "antsone", "ens0", "anon", "ens1", "ean1", "ansn", "ans3", " meanson", " ansert", "enson", "atsn", "antson", "ats3", "ats1", "eas0", "ann", "atson", "ensone", "anert", "an0", "an1", "anone", " means3", "easert", "an001", "eanone", "eas91", "ans001", "eas1", " ans91", "ansone", "ean0", "anson", "an91", " ansone", "ansert", "ans91", "ean001", "ants1", "ants0"], "ans2": ["an3", "ans22", "offs2", "offs22", "ann2", "anntwo", "ens1", " ans32", " ans22", "offs32", "an2", "ans10", "ens2", "aus0", "offstwo", "ants2", "ans3", "ats1", "anstwo", "atsTwo", "aus1", "an1", "an0", "aus3", " ans10", "aosTwo", "ants3", "an10", "aostwo", "ansTwo", "anTwo", "atstwo", "ann22", "aos2", "antwo", "aos1", "ats2", "ans32", "aus2", " anstwo", "ens10", "ann32", "ants1", "ants0"], "n0": [" n02", "unn0", "sn0", "snDefault", " n8", "nOK", "pn00", "name0", " n5", " n00", "nK", "name8", "an0", "conn0", "un00", "un0", "on7", "nan00", "pn13", "an8", "n7", "n80", " n30", "on8", "an3", "onK", "n13", "nan0", "name7", "pn30", "conn8", "n000", "connK", "an02", "anDefault", "unn13", "on000", "an08", "pn5", "on00", "anOK", "nameK", "nodeOK", "un000", "n5", "nodeDefault", "an5", "unn08", "node0", "n8", "node08", "on80", "n00", "unn00", " n13", "on0", "nan000", "n02", "sn08", "n30", "n08", "un80", "an30", "nan80", "gn0", "gn8", "pn0", "gn02", "gn3", "conn7", "nDefault", "snOK", " n08", "pn08"], "n1": ["nOne", "note91", "nan61", "an61", "nan_", " nOne", "nOnce", "n_", "nanONE", "numMap", "N1", "note0", "an2", "nONE", "cnONE", "N2", "n61", "ns91", "en01", "num_", "c2", "c1", "an1", "onOnce", "anone", "nat61", "nat1", "n91", "nan51", "on01", "num1", "numONE", "ns0", "nsOne", "note1", "onONE", "on1", "anONE", "ns1", "n51", " n91", "an_", "cn1", "none", "nanMap", "enOnce", "n01", "anMap", "an91", "en1", "nan91", "nMap", "N0", "an0", "nat91", "noteOne", "nan1", "cn01", "cnOnce", "an51", "nat51", "cone", "enONE", "c0"], "n2": ["j2", "an3", " n02", " n6", " n62", "an4", "N1", "N3", "n56", "an2", "n6", "yn2", "sn62", "conntwo", "on2", "N2", "yn3", "conn56", "j56", "sn3", "on62", "sn02", " n56", "sn20", "yn1", "yn56", " n20", "an20", "N56", "on6", "on02", "conn2", "sn6", "an56", "jtwo", "j4", "sntwo", "antwo", "sn2", " ntwo", "ntwo", "conn4", "n20", "n62", "n4", "n02"], "ww": ["wx", "ht", "sw", "wn", "tw", "wy", "xa", "wh", "we", "hard", "wed", "WW", "wow", "wb", "iw", "wat", "rw", "whe", "wd", "wal", "ax", "ew", "wl", "wid", "wa", "wp", "web", "fw", "www", "ws", "ch", "hw", "tf", "now", "lr", "rew", "nw", "nn", "wk", "aw", "wiki", "week", "sc"], "n3": ["an3", "n9", "w3", "w7", "N3", "N7", "an2", "N2", "an9", "w2", "nthree", "N9", " n7", " nthree", "wthree", "Nthree", "n7", " n9"]}}
{"code": "from __future__ import division, print_function\\nfrom sys import stdin\\nfrom math import radians, sin, cos, sqrt\\na, b, degree = (float(s) for s in stdin.readline().split())\\nh = b * sin(radians(degree))\\ns = a * h / 2.0\\nL = sqrt(a**2 + b**2 - 2.0*a*b*cos(radians(degree))) + a + b\\nprint('{:.4f}\\n{:.4f}\\n{:.4f}'.format(s, L, h))", "target": "221", "substitutes": {"a": ["aq", "ia", "sta", "ae", "ac", "ab", "ta", "aj", "p", "ach", "g", "ai", "i", "\u00e1", " A", "apt", "c", "ma", "m", "ga", "o", "ea", "la", "aaa", "f", "t", "alpha", "da", "an", "e", "A", "al", "ap", "at", "af", "sa", "oa", "au", "aa", "l", "am", "ar", "area", "ba", "ca", "ao"], "b": ["bis", "n", "sb", "bu", "bf", "ab", "lib", "d", "p", "db", "beta", "g", "ib", "lb", "i", "r", "bg", "c", "bot", "z", "bi", "wb", "fb", "rb", "by", "o", "be", "f", "br", "bc", "t", "gb", "bool", "nb", "B", "bb", "v", "e", "erb", "eb", "cb", "l", "u", "j", "y", "ub", "bs", "ba"], "degree": ["quarter", "n", "century", "order", "ne", "span", "approximately", "radius", "length", "scale", "m", "condition", "floor", "unit", "note", "prime", "dec", "shape", "angle", "tree", "display", "result", "ind", "dy", "duration", "len", "density", "depth", "directory", "eg", "division", "node", "dimension", "rew", "ed", "ree", "div", "direction", "dim", "year", "number", "govern", "phi", "tie", "le", "pi", "document", "mode", "deg"], "s": ["n", "sb", "x", "sw", "sh", "su", " S", "d", "p", "g", "i", "r", "w", "lines", "c", "m", "z", "ns", "rs", "ses", "ins", "sl", "sg", "ls", "f", "sp", "t", "S", "ss", "si", "v", "e", "sq", "sin", "gs", "string", "ssl", "sv", "sol", "q", "l", "sd", "ar", "se", "es", "os", "j", "ds", "ps", "bs"], "h": ["n", "sh", "kh", "HM", "d", "p", "i", "hal", "dh", "r", "hs", "w", "c", "m", "z", "ih", "HI", "rh", "o", "H", "bh", "f", "HH", "hl", "hp", "v", "e", " H", "oh", "height", "ha", "hash", "he", "hr", "hd", "q", "l", "ho", "phi", "hh", "y", "hi", "hm"], "L": ["LB", "dL", "M", "NL", "N", "DL", "T", "PL", "HL", "SL", "R", "I", "X", "Line", "TL", "H", "W", "LU", "O", "V", "OL", "S", "LT", "B", "J", "Li", "UL", "LI", "P", "A", "IL", "Lu", "l", "CL", "LL", "LE", "K", "F", "LS", "Z", "LP"]}}
{"code": "s = str(input())\\np = str(input())\\nif p[0] not in s:\\n\tprint(\"No\")\\nelif p in s:\\n\tprint(\"Yes\")\\nelse:\\n\tfor i in range(len(s)):\\n\t\ts = s[1:] + s[:1]\\n\t\tif p in s:\\n\t\t\tprint(\"Yes\")\\n\t\t\tbreak\\n\telse:\\n\t\tprint(\"No\")\\n", "target": "661", "substitutes": {"s": ["a", "n", "ats", "eds", "r", "hs", "c", "z", "set", "ns", "ies", "ms", "gins", "ss", "ings", "strings", "v", "string", "sa", "ims", "ches", "q", "se", "bs", "sc", "js", "g", "m", "ins", "sl", "ers", "si", "its", "sv", "sts", "l", "cs", "stats", "prints", "state", "str", "lines", "sys", "ses", "h", "parts", "als", "ces", "xs", "ments", "os", "ps", "sb", "ters", "w", "ts", "rs", "ls", "f", "b", "sp", "t", "S", "gs", "sq", "ws", "j", "y", "er", "ds"], "p": ["n", "pm", "d", "mp", "vp", "g", "jp", "r", "pre", "c", "m", "pe", "fp", "pb", "par", "ist", "tp", "ip", "pa", "pr", "h", "f", "b", "sp", "t", "part", "pt", "lp", "v", "P", "ap", "up", "cp", "ph", "q", "pl", "bp", "np", "l", "k", "pers", "op", "j", "y", "pp", "pn", "ps", "pol", "pun"], "i": [" ii", "n", "ite", "ci", "ir", "on", " j", "ior", "I", "iter", "ic", "ix", "ip", "ind", "f", "li", "e", "ti", "im", "it", "il", "id", "k", "j"]}}
{"code": "import sys\\nfrom copy import deepcopy\\n\\ndef main():\\n    INF = 10**18\\n    input = sys.stdin.readline\\n    N, M, L = [int(x) for x in input().split()]\\n    d = [set() for _ in range(N+1)]\\n    ds = [[INF] * (N+1) for _ in range(N+1)]\\n    bs = [[INF] * (N+1) for _ in range(N+1)]\\n    for _ in range(M):\\n        A, B, C = [int(x) for x in input().split()]\\n        A, B = sorted([A, B])\\n        d[A].add(B)\\n        if L >= C:\\n            ds[A][B] = C\\n\\n    nes = set()\\n    for k in range(1, N+1):\\n        for i in range(1, N+1):\\n            for j in range(i+1, N+1):\\n                ds[i][j] = min(ds[i][j], ds[min(i, k)][max(i, k)] + ds[min(k, j)][max(k, j)])\\n                if ds[i][j] <= L:\\n                    bs[i][j] = 1\\n\\n    for k in range(1, N+1):\\n        for i in range(1, N+1):\\n            for j in range(i+1, N+1):\\n                bs[i][j] = min(bs[i][j], bs[min(i, k)][max(i, k)] + bs[min(k, j)][max(k, j)])\\n\\n    Q, = [int(x) for x in input().split()]\\n    for _ in range(Q):\\n        s, t = sorted(int(x) for x in input().split())\\n        print(bs[s][t]-1 if bs[s][t] < INF else -1)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "467", "substitutes": {"INF": ["INFF", " INV", " INFF", "INI", "INV", "Inf", " INFER", "InFER", " ING", "ANFF", "inInf", "InInf", "ENG", "InV", " INI", "ANf", "ENF", "INInf", " INf", "InFF", "inF", "ENV", "INDF", "INH", " INH", "INf", "inDF", "inH", "ANF", "inFER", "ING", " INInf", "INFER", "InF", "inf", "InG", " INDF", "inV", "ENInf", "InI", "ANI", "InH", "InDF"], "input": ["next", "n", "mit", "load", "cat", "str", "pattern", "select", "context", "p", "active", "init", "put", "get", "child", "iter", "image", "raw", "current", "control", "set", "batch", "unit", "focus", "read", "xt", "format", "enum", "step", "output", "ip", "PUT", "cmd", "config", "fn", "hidden", "form", "initial", "feed", "url", "check", " u", "out", "pull", "Input", "int", "string", "it", "xs", "new", " Input", "q", "reader", "line", "command", "sample", "edit", "data", "sequence", "text", " inputs", "request"], "N": ["SN", "CNN", "Other", "Name", "n", "NS", "T", "New", "NL", "IN", "EN", "NC", "GN", "NI", "Ns", "X", "I", "R", "NA", "Number", "NM", "NN", "NP", "CN", "NR", "NT", "NOR", "NH", "H", "ANY", "Node", "O", "V", "TN", "NO", "S", "MAN", "J", "G", "ND", "P", "Num", "NPR", "Network", "D", "OUT", "NB", "Y", "MN", "Ni", "U", "K", "F", "AN", "UN", "Z", "Note", "FN", "NG"], "M": ["T", "CM", "MU", "R", "I", "NM", "m", "H", "MM", "MC", "V", "S", "MAN", "J", "ML", "G", "P", "MA", "E", "ME", "MS", "D", "DM", "Y", "Mon", "MN", "MI", "MT", "K", "F", "LM", "Z"], "L": ["LB", "dL", "NL", "DL", "T", "LIN", "X", "I", "LC", "TL", "W", "LA", "V", "S", "LO", "LT", "J", "Li", "G", "ML", "Le", "P", "LI", "E", "LG", "D", "Lu", "Left", "l", "Y", "CL", "LL", "LE", "K", "F", "LM", "LS", "LP"], "x": ["a", "wx", "n", "xi", "ex", "ci", "p", "on", "xes", "ux", "xc", "X", "xa", "rx", "w", "ox", "z", "m", "plex", "xt", "ctx", "xml", "hex", "ic", "ix", "h", "tx", "ax", "f", "word", "check", "v", "e", "fill", "fx", "int", "an", "xy", "xs", "mx", "upload", "\u00e7", "dx", "inx", "q", "l", "xx", "id", "y", "lex", "ross", "xf"], "d": ["fd", "n", "dos", "dds", "p", "db", "di", "dh", "c", "z", "bd", "m", "dl", "dt", "done", "df", "b", "days", "dat", "da", "dr", "pd", "de", "des", "dx", "D", "do", "l", "dd", "sd", "data", "dict"], "_": ["n", " the", "p", "__", "m", "w", "ml", "ly", "ix", "py", "W", "let", "set", "place", "f", "____", "pt", "non", "J", "un", " __", "\u00e7", "___"], "ds": ["iffs", "ys", "dos", "ats", "js", "dds", "db", "ients", "edes", "cd", "eds", "ld", "outs", "tops", "ows", "dh", "ts", "uds", "ns", "dl", "rs", "obs", "ks", "tests", "ords", "ls", "dt", "ods", "df", "ths", "days", "dat", "ss", "irs", "da", "dates", "lists", "its", "dr", "pd", "gs", "scripts", "ws", "des", "xs", "Ds", "ions", "desc", "ands", "DS", "hd", "dis", "loads", "sets", "rates", "dd", "sd", "sts", "cs", "ads", "devices", "vs", "md", "qs", "dict", "ubs", "rd"], "bs": ["bis", "apps", "ys", "ats", "js", "db", "banks", "BS", "bos", "outs", "uts", "hz", "fs", "aus", "irms", "rots", "lets", "sels", "stocks", "ts", "uds", "boxes", "ns", "bi", "rs", "blocks", "ks", "res", "cks", "ons", "ms", "bys", "amps", "ls", "abs", "b", "ths", "bas", "bc", "weights", "bots", "ris", "als", "its", "gs", "gets", "xs", "bps", "bles", "aos", "bl", "bes", "vs", "ubs", "lbs", "bp", "cs", "os", "qs", "obs", "bits"], "A": ["a", "GA", "Ax", "Am", "An", "Al", "IA", "Ar", "AU", "AT", "R", "I", "Av", "X", "AL", "AV", "And", "AB", "App", "RA", "H", "AA", "LA", "As", "AI", "AR", "AS", "S", "EA", "J", "G", "This", "P", "Ant", "CA", "At", "D", "AM", "Y", "Ac", "SA", "K", "AC", "AN", "Array", "Ag", "AP"], "B": ["LB", "BI", "CB", "T", "BL", "BS", "VB", "OB", "Bs", "SB", "R", "I", "IB", "AB", "Be", "O", "V", "BT", "b", "BP", "S", "BC", "Bar", "BE", "J", "BR", "G", "BD", "WB", "GB", "P", "BB", "Ber", "BM", "E", "Bern", "TB", "D", "Boot", "NB", "EB", "Y", "BO", "Bi", "DB", "F", "BA", "BY"], "C": ["CB", "T", "CM", "R", "I", "X", "CE", "c", "CS", "Cs", "YC", "H", "CP", "V", "CT", "S", "BC", "Co", "J", "G", "CO", "P", "CR", "CA", "E", "D", "CC", "CL", "Y", "K", "F"], "nes": [" ii", " jobs", " je", " vo", " e", "js", " ties", " si", "bi", " ib", " genes", " bi", " ni", "je", "J", "kj", " ne", " v", "es", " tmp", " boxes", "ij", " out", " res", " ge"], "k": ["ck", "km", "ki", "n", "ek", "uk", "kr", "th", "kh", "kl", "ijk", "max", "p", "spec", "g", "kar", "ak", "ke", "kid", "c", "m", "z", "isk", "dk", "ks", "ic", "kw", "ko", "kind", "tk", "key", "kj", "ok", "kick", "it", "ikk", "ku", "ark", "q", "kt", "kg", "u", "kk", "id", "sk", "ka", "ik", "K", "er", "mk", "unk"], "i": ["mi", "ki", "n", "xi", "ia", "ie", "ci", "gi", "p", "on", "di", "ai", "I", "iter", "r", "c", "z", "m", "ami", "bi", "info", "ic", "o", "ix", "ip", "iri", "ind", "f", "b", "ri", "io", "si", "li", "ii", "ji", "v", "ei", "int", "ti", "oi", "im", "it", "zi", "ini", "ui", "ed", "q", "l", "pi", "u", "id", "y", "ij", "ik", "er", "iu", "hi", "init"], "j": ["json", "n", "uj", "ja", "ijk", "err", "js", "aj", "on", "p", "g", "test", "jp", "job", "r", "oj", "jc", "z", "m", "c", "jj", "bi", "note", "o", "ip", "pr", "jl", "fr", "b", "br", "je", "sp", "right", "pt", "J", "off", "ion", "bj", "li", "ji", "v", "kj", "exp", "obj", "adj", "im", "it", "tr", "jump", "ch", "jo", "q", "l", "user", "dj", "y", "jit", "ij", "er"], "Q": ["Que", "T", "MQ", "Queue", "X", "I", "R", "W", "H", "Query", "O", "V", "QB", "S", "J", "G", "P", "E", "D", "q", "Y", "Qu", "IQ", "U", "K", "F", "Z", "QU"], "s": ["a", "n", "sb", "ats", "js", "p", "short", "fs", "r", "us", "sys", "ts", "m", "south", "ns", "ies", "rs", "tests", "ins", "ix", "ms", "ls", "b", "S", "ss", "si", "als", "tes", "its", "gs", "st", "ims", "sv", "xs", "sts", "cs", "os", "qs", "ps"], "t": ["n", "T", "ta", "p", "ret", "g", "test", "tw", "typ", "w", "r", "wt", "c", "ts", "m", "z", "tc", "txt", "total", "o", "te", "h", "dt", "f", "b", "pt", "ot", "out", "v", "e", "int", "ti", "at", "tt", "it", "tr", "rt", "st", " T", "title", "q", "l", "y"]}}
{"code": "n = int(input())\\nh = list(map(int, input().split()))\\nh[0] -= 1\\nfor i in range(1,n):\\n  if h[i] > h[i-1]:\\n    h[i] -= 1\\n  elif h[i] < h[i-1]:\\n    print(\"No\")\\n    break\\nelse:\\n  print(\"Yes\")", "target": "230", "substitutes": {"n": ["N", "x", "net", "nt", "gn", "ln", "d", "p", "en", "ne", "sn", "w", "c", "m", "ns", "o", "nl", "num", "t", "nb", "nor", "no", "mn", "na", "v", "nc", "nm", "nu", "nn", "l", "np", "ng", "j", "network", "k"], "h": ["history", "ht", "th", "sh", "kh", "p", "g", "hz", "hal", "r", "hs", "c", "m", "z", "ih", "rh", "help", "hex", "H", "ah", "pr", "bh", "go", "b", "uh", "f", "hl", "hp", "gh", "oh", "cache", "his", "hash", "ph", "ha", "it", "ch", "he", "hd", "q", "l", "ho", "phi", "hh", "j", "y", "hi", "hm"], "i": ["mi", "ki", "xi", "x", "uri", "ci", "gi", "cli", "di", "ai", "I", "m", "set", "bi", "qi", "ic", "ix", "ip", "ind", "multi", "io", "si", "li", "ii", "ji", "v", "ori", "ei", "ti", "oi", "int", "im", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "phi", "id", "j", "y", "k", "index", "ij", "iu", "hi"]}}
{"code": "N=int(input())\\nS,T=input().split()\\nans=S[0]+T[0]\\nfor i in range(1,N):\\n    ans=ans+S[i]+T[i]\\nprint(ans)", "target": "673", "substitutes": {"N": ["SN", "n", "M", "NS", "NC", "GN", "NI", "Ns", "R", "I", "NA", "L", "NM", "NN", "NR", "NT", "NH", "NF", "V", "No", "Z", "B", "Q", "G", "ND", "Num", "P", "A", "Sn", "D", "NB", "Y", "MN", "Ni", "K", "TN", "C"], "S": ["Sub", "Source", "NS", "SF", "SH", "BS", "SS", "Sl", "SL", "SB", "I", "JS", "RS", "PS", "Si", "Su", "VS", "SI", "CS", "Set", "SM", "As", "GS", "IS", "AS", "B", "Sing", "P", "A", "s", "Is", "IES", "SP", "SU", "St", "ST", "DS", "SA", "SR", "LS"], "T": ["WT", "M", "TR", "TP", "AT", "R", "I", "TS", "PT", "VT", "NT", "TG", "TL", "H", "CT", "V", "TH", "BT", "NOTE", "TV", "t", "Table", "LT", "B", "J", "Q", "G", "TF", "P", "A", "OT", "TB", "TT", "XT", "TM", "UT", "MT", "GT", "TER", "TN", "C"], "ans": ["umes", "ANS", "ants", "ats", "\u00e1n", "beans", "ean", "anon", "ana", " means", "acs", "ai", "ros", "aus", "lines", "aned", "mos", "ts", " Ans", "ns", "vals", "anus", "ann", "rans", "man", "mas", "anas", "offs", "ins", "ras", "vers", "ons", "ms", "amps", "angs", "ls", "pan", "wan", "pac", "ens", "anc", "cas", "ces", "can", "an", "ados", "anks", "iann", "oss", "plan", "aps", "anes", "ays", "s", "sv", "nas", "ams", "aos", "ads", "cs", "asms", "os", "es", "lan", "AN", "aver", "ps", "olds"], "i": ["mi", "n", "xi", "x", "uri", "me", "gi", "di", "I", "r", "c", "m", "batch", "bi", "qi", "ic", "ski", "ix", "ip", "ind", "num", "t", "multi", "io", "si", "li", "key", "ji", "v", "ori", "ii", "ti", "list", "all", "im", "s", "it", "zi", "ui", "ini", "\u0438", "q", "pi", "u", "id", "index", "ij", "iri", "chain"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\nINF = float(\"inf\")\\n\\n\\ndef main():\\n    M, K = map(int, input().split())\\n\\n    # \u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\\n    if M == 0:\\n        if K == 0:\\n            print(\"0 0\")\\n        else:\\n            print(\"-1\")\\n        return\\n    elif M == 1:\\n        if K == 0:\\n            print(\"0 0 1 1\")\\n        else:\\n            print(\"-1\")\\n        return\\n\\n    # \u4e00\u822c\\n    if K >= (1 << M):\\n        print(\"-1\")\\n        return\\n\\n    # \u5b9f\u73fe\u53ef\u80fd\u30b1\u30fc\u30b9\\n    ans = []\\n    for i in range(1 << M):\\n        if i == K:\\n            continue\\n        ans.append(i)\\n    ans = ans[::-1] + [K] + ans + [K]\\n    print(\" \".join(map(str, ans)))\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "97", "substitutes": {}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10 ** 7)\\nf_inf = float('inf')\\nmod = 10 ** 9 + 7\\n\\n\\ndef resolve():\\n    N = int(input())\\n\\n    for h in range(1, 3501):\\n        for n in range(1, 3501):\\n            if 4 * h * n - N * n - N * h > 0:\\n                w = (N * h * n) / (4 * h * n - N * n - N * h)\\n                if w.is_integer() and w > 0 and 4 * h * n * w == N * n * w + N * h * w + N * h * n:\\n                    print(h, n, int(w))\\n                    exit()\\n\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "29", "substitutes": {"f_inf": [" f_log", "fvalinf", "f_Inf", "fvallog", " f_Inf", " f__log", " f__inf", "f__Inf", "f__min", "f__log", " f__min", "f_log", "fvalInf", " f__Inf", "fvalmin", "f_min", " f_min", "f__inf"], "mod": ["MOD", "sign", " Mod", "sub", "mult", "Mod", "fun", "scale", "m", "pad", "od", "circ", "floor", "round", "dec", "min", "tab", "fac", "cond", "dig", "bit", "add", "debug", "ran", "base", "mag", "cm", "mode"], "N": ["SN", "M", "NS", "T", "NC", "GN", "NI", "Ns", "X", "I", "R", "L", "NA", "NM", "NN", "CN", "NR", "NT", "NOR", "H", "W", "Node", "O", "V", "TN", "No", "NO", "S", "NE", "B", "J", "Q", "G", "P", "Num", "D", "OUT", "NB", "Y", "Size", "MN", "Ni", "U", "K", "F", "AN", "Z", "NG", "C"], "h": ["ht", "sh", "x", "kh", "her", "p", "ach", "hz", "i", "wh", "hal", "html", "r", "dh", "hs", "c", "m", "ih", "zh", "rh", "hex", "hu", "o", "H", "ah", "igh", "bh", "f", "b", "hl", "gh", "hp", "t", "v", "oh", "ph", "ha", "ch", "hash", "hw", "he", "hr", "hd", "q", "ho", "l", "phi", "hh", "u", "k", "y", "hi", "hm"], "n": ["a", "x", "nt", "gn", "ln", "d", "p", "en", "on", "name", "ne", "g", "cn", "dn", "i", "r", "sn", "c", "z", "m", "ns", "o", "H", "f", "b", "num", "t", "no", "nor", "nb", "mn", "non", "out", "na", "v", "yn", "an", "nm", "un", "s", "nan", "nu", "nw", "nn", "q", "l", "np", "u", "j", "k", "y"], "w": ["a", "wx", "sw", "x", "d", " W", "tw", "wu", "wh", "we", "wt", "r", "weight", "z", "wb", "wr", "iw", "wat", "rw", "wi", "W", "wd", "kw", "wal", "word", "ew", "b", "f", "wl", "wid", "wa", "wp", "v", "width", "ws", "hw", "rew", "nw", "l", "widget", "aw", "y", "data", "writer"]}}
{"code": "x, y = map(int, input().split())\\nif x == - y:\\n  print(1)\\nelif x * y < 0:\\n  print(abs(abs(x) - abs(y)) + 1)\\nelif x < y:\\n  print(y - x)\\nelif x * y:\\n  print(abs(abs(x) - abs(y)) + 2)\\nelse:\\n  print(abs(abs(x) - abs(y)) + 1)\\n\\n", "target": "15", "substitutes": {"x": ["a", "wx", "n", "xi", "ex", "xe", "d", "p", "xc", "left", "g", "X", "xa", "i", "rx", "ct", "w", "c", "ox", "z", "m", "ace", "xxxx", "xt", "xml", "hex", "el", "ix", "o", "h", "ip", "tx", "ax", "f", "xd", "b", "t", "v", "e", "fx", "width", "xy", "xs", "dx", "l", "xx", "k", "px", "lex", "data", "j", "xp", "xf"], "y": ["a", "sy", "n", "ty", "ys", "yang", "yer", "p", "wy", "cy", "i", "yet", "sys", "yo", "ky", "z", "ly", "ies", "south", "m", "my", "ny", "yi", "vy", "o", "py", "ye", "yr", "sky", "h", "hy", "b", "axy", "num", "t", "yout", "yl", "io", "c", "uy", "out", "lon", "v", "e", "ey", "gy", "height", "iy", "xy", "ry", "yt", "Y", "yy", "fy", "l", "j", "er", "ya", "ay", "ym"]}}
{"code": "n=int(input())\\nt=1\\nwhile n>t:\\n    n-=t\\n    t+=1\\nrem=t-n\\nlas=t\\nfor i in range(1,las+1):\\n    if i!=rem:\\n        print(i)", "target": "389", "substitutes": {"n": ["a", "N", "x", "net", "T", "nt", "d", "p", "ne", "g", "cn", "nat", "sn", "w", "c", "r", "m", "z", "ns", "total", "o", "h", "f", "b", "num", "len", "nb", "no", "na", "v", "e", "tn", "nc", "nm", "at", "it", "nu", "size", "nn", "l", "np", "k", "j"], "t": ["tm", "a", "net", "ty", "T", "to", "nt", "ta", "p", "d", "g", "td", "r", "tc", "wt", "c", "ts", "m", "z", "w", "type", "total", "o", "te", "tp", "h", "term", "f", "num", "time", "len", "pt", "ot", "tu", "out", "v", "e", "all", "ten", "tt", "it", "rt", "new", "l", "_", "k", "j", "y", "vt"], "rem": ["tm", "mr", "max", " Rem", "nt", "mod", "resh", "syn", "p", "rx", "re", "r", "m", "ref", "em", "res", "rm", "pr", "dem", "remove", "right", "them", "num", "mn", "remote", "exp", "nm", "im", "tr", "ch", "pl", "REM", "mem", "k", "cm", "Rem", "temp"], "las": ["tm", "lc", "mr", "max", "x", "ta", "was", "typ", "us", "scale", "ma", "ts", "m", "bi", "mas", "lit", "res", "ins", "te", "ic", "ms", "tx", "ls", "ris", "sim", "lo", "out", "exp", "v", "miss", "ph", "st", "l", "pl", "best", "ias", "phys", "id", "ps", "hi", "init"], "i": ["\u00ed", " ii", "ki", "mi", "xi", "x", "a", " Ai", "gu", "ci", "gi", " j", "di", "ai", "I", "aci", "bi", " di", "qi", "yi", "ic", "ix", " bi", "iri", "multi", "ri", "si", "ii", "li", "ji", "ei", "ti", "oi", "im", "zi", "ini", "q", "pi", "j", "y", "k", "index", "ij", "aii", "iu", "hi"]}}
{"code": "N = int(input())\\nG2,G4 = [],[]\\ncnt2 = 0\\ncnt3 = 0\\nfor _ in range(N):\\n    S = input()\\n    MIN = 0\\n    cnt = 0\\n    for s in list(S):\\n        if s == '(':\\n            cnt += 1\\n        else:\\n            cnt -= 1\\n        MIN = min(MIN,cnt)\\n    if MIN == 0 and cnt >= 0:\\n        cnt2 += cnt\\n    if MIN < 0 and cnt >= 0:\\n        G2.append([MIN,cnt])\\n    if MIN == cnt and cnt < 0:\\n        cnt3 += cnt\\n    if MIN < cnt and cnt < 0:\\n        G4.append([MIN,cnt])\\n\\n\\nG2.sort(reverse=True)\\nfor L in G2:\\n    if cnt2 + L[0] < 0:\\n        print('No')\\n        exit()\\n    else:\\n        cnt2 += L[1]\\nfor L in G4:\\n    if cnt2 + L[0] < 0:\\n        print('No')\\n        exit()\\n    else:\\n        cnt2 += L[1]\\n\\ncnt2 += cnt3\\n\\nif cnt2 == 0:\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "7", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "NM", "NN", "NR", "NT", "NH", "V", "TN", "NUM", "NE", "B", "J", "Q", "G", "P", "D", "NB", "Y", "K", "F", "Z", "C"], "G2": ["AGtwo", "GO1", "GG2", "GG1", "TTwo", "Gtwo", "GGTwo", "GGAll", "G3", "Group1", "GO2", "S0", " G0", "T4", " G3", "AGTwo", "Group4", " G5", "GG0", "Group2", " GAll", "S2", "G0", " G1", "GG5", "LGAll", "S5", "Group3", "Ttwo", " GTwo", "GTwo", "T2", "AG4", "G1", "GG4", " Gtwo", "GO3", "LGTwo", "LG4", "LG2", "G5", "GAll", "GO4", "AG2", "S1"], "G4": ["GFour", "GG2", "G42", "Group5", "LG42", "LGFour", "GV4", "GVFour", "GE4", "Group4", "Group42", "GE8", "GE5", "GV42", "GG5", "GV2", "Group8", "GG4", " G42", "LG4", "LG2", "G5", "GG8", "G8", "GE42", "GGFour", "GG42", " GFour"], "cnt2": ["curont6", "cont2", "Cnt02", "mcnd2", "cpt6", "cst3", "rcant2", "curont1", "Cpt3", "cnt4", "counter1", "cpt2", "cct5", "mcndtwo", "mcnttwo", "cnc2", "rcant3", "Cnt7", "cpt1", "cent52", "crt2", "cust4", "cNT7", "cent3", "cont256", "cnc022", "rcant022", "cnt8", "count022", "Cnt6", "cnt022", "cgt2", "cct2", "Cnt4", "cnt22", "cNT6", "centtwo", "counter6", "cpt7", "cpt52", "Cnt3", "mcnd52", "cst4", "rcnt02", "cnttwo", "dcnt4", "cgt4", "cnt6", "cnc3", "rcnt022", "dcnt3", "Cnt2", "acct6", " cot8", "curont256", "cpt22", "cant8", "dcnc4", "cct3", "cnd2", "counter256", "cpttwo", " cnt8", "cst22", "cust2", "count3", "acct2", "cnc22", "cant02", "cant3", "mcnt2", "cpt4", "cont1", "curnt1", "crt7", "cot2", "crt3", "cot8", "dcnt2", "cnc6", "acnt6", "cgt02", "cNT3", "curnt6", "cpt3", "acnt5", "cst2", "rcnt3", "cct1", "cust3", "cnd52", "cpt8", "cent2", "acct5", "mcnd3", "acnt2", "crt6", "cct6", "cant1", "cNT5", "cndtwo", "curnt256", "cct02", "mcnt52", "dcnt22", "dcnc2", "Cct4", "cant2", " cot3", "mcnt3", "cct4", "cnt256", "cgt3", "cot1", "acnt3", "cnc5", "cnt52", "cnc4", " cnt1", "Cpt2", "cnt1", "rcant02", "curnt2", "counter2", "cnt7", "cust02", "Cpt7", "count02", "curont2", "cont6", "acct3", "Cpt6", "count2", "cnd3", "dcnc3", "cot3", "dcnc22", "rcnt2", "Cct3", "cct256", "Cct02", "Cct2", "cNT2", "cnt5", "cnc02", "cant022", " cot1", "cnt02", " cot2"], "cnt3": ["cot1", "cnc3", "cnc0", "cct1", "cnc5", "ctnc0", "cNT23", "ecnt23", " cnt1", "countr", "ecnc23", "cent1", "cnt1", "cctder", "ctnc3", "cct5", "cct3", "cnc2", "cent2", "count0", "ecnt3", "ctntr", "count3", "ecnc2", "cnc23", "crt0", "cent3", "cct23", "ecnt2", "cnt23", "cntr", "cot3", "cot2", "ctnt3", " cotder", "crt3", "cct2", " cntder", "crtr", "cNT5", "cotder", "cnt0", "cntder", "ecnc5", "cNT2", "cnt5", "cNT3", "ecnt5", "ctncr", " cot1", " cot3", "ecnc3", " cot2", "centder", "cncr", "ctnt0"], "_": ["n", "x", " j", "ix", "ind", "no", " l", "B", "J", " m", "un", "l", "j", "In", "C"], "S": ["Single", "M", "T", "SF", "SH", "SS", "SL", "SB", "R", "I", "Si", "SI", "TS", "SAN", "Set", "SM", "H", "W", "V", "B", "J", "Q", "G", "P", "SE", "A", "E", "Is", "ST", "SU", "D", "SA", "F", "SR", "C"], "MIN": ["STR", "MAX", "INT", "M", "SET", "VER", "MOD", "IN", "KEY", "LIST", "DIR", "Minimum", "LESS", "NULL", "Min", "VERSION", "MAL", "NR", "SAN", "BIL", "TOP", "min", "SM", "TOR", "SPA", "KER", "SIZE", "MER", "NO", "MON", "NOTE", "GEN", "Minor", "NUM", "NAME", "MODE", "NE", "GRE", "FREE", "REL", "NPR", "ID", "MED", "FIR", "MP", "IL", "MS", "STAT", "TYPE", "FAULT", "VALUE", "TM", "COLOR", "MN", "MI", "MIT", "PIN", "JUST", "minimum", "DEC", "LOC", "Mini", "UN", "TON", "TN", "JO", "REM", "NOT", "BY"], "cnt": ["CNT", "fckt", "nrt", "ecNT", "acct", "lcNT", "pckt", "csct", "count", "Cnc", " cNT", "cachert", "pcrt", " crt", "rcct", "acount", "cst", "pcnt", "pcant", "nount", "Cnt", "scount", " cst", " cnd", "scrt", "acant", "lcant", "hont", "ecnt", "fcont", "cont", "cNT", "cachent", "pcrent", "csnt", " cant", "hrt", "rcnt", "lcnt", "fcrt", "Crent", " cont", "hnt", "acNT", "dcst", "ncnc", "Cant", "cant", "ncnd", "scnt", " cred", "pNT", "lcont", "crt", " cct", "ncont", " cnc", "ckt", "currt", "cpt", "ncnt", "tnc", "csnc", "curant", "Count", "curnt", "nct", "scct", "cspt", "npt", "dcount", "csount", "xckt", "cnc", "dcnt", "Cred", "pnt", "nnt", "acnt", "cacheont", "acnc", "acpt", "pcont", "nnc", "pnc", "ncrent", "ncNT", " count", "pount", "fcnt", "cacheNT", "crent", "dcant", "pct", "cnd", "Cpt", "lcrent", "cct", "tont", "tnd", "pcount", "ecnc", "lcount", "acrt", "rcrt", "hNT", "tnt", "xcont", "xcnt", "xcrt", "Cct", "Cont", "ecred", "curct", " cpt", "rcant", "cred", "Cst"], "s": ["Single", "a", "scl", "sb", "x", "sw", "NS", "SF", "ats", "single", "ains", "Series", "Bs", "Sl", "SB", "X", "I", "i", "JS", "Si", "Sel", "Cl", "SI", "TS", " Li", "sl", "ls", "sel", "ss", "si", "States", "als", "Li", "gs", "xs", "SU", "DS", "sts", "l", "sets", "es", "WS", "LS", "String", " LS"], "L": ["M", "List", "NL", "DL", "T", "LIN", "mL", " mL", "BL", "SL", "Sl", "X", "I", "LC", "R", "Line", " Li", "Lay", "TL", "LR", "W", "H", "LD", "V", "O", "LO", "FL", " l", "LT", "B", "J", "Li", "G", "Le", "LI", "P", "IL", "E", "VL", "LG", "Lu", "D", "l", "CL", "LL", "XL", "LE", "K", "Led", "LOC", "LS", "LM", "Z", "LP", "EL", "F", "C"]}}
{"code": "from sys import stdin\\ndef main():\\n    #\u5165\u529b\\n    readline=stdin.readline\\n    N=int(readline())\\n    F=[]\\n    for i in range(N):\\n        f=list(map(int,readline().split()))\\n        F.append(f)\\n    P=[]\\n    for i in range(N):\\n        p=list(map(int,readline().split()))\\n        P.append(p)\\n    \\n    max_res=-float(\"inf\")\\n    for i in range(1<<10):\\n        if i==0:\\n            continue\\n        else:\\n            output=[]\\n            for j in range(10):\\n                if(i>>j)&1:\\n                    output.append(j)\\n\\n            oc=[0]*10  #open or close\\n            for j in output:\\n                oc[j]=1\\n            \\n            res=0\\n            for j in range(N):\\n                c=0\\n                for k in range(10):\\n                    if oc[k]==1 and F[j][k]==1:\\n                        c+=1\\n                res+=P[j][c]\\n            max_res=max(res,max_res)\\n\\n    print(max_res)\\n    \\nif __name__==\"__main__\":\\n    main()", "target": "629", "substitutes": {}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\ndef main():\\n    N, M = map(int, input().split())\\n    c = list(map(int, input().split()))\\n\\n    dp = [i+100 for i in range(N+1)]\\n    dp[0] = 0\\n\\n    for i in range(1, N+1):\\n        for t in c:\\n            if i - t >= 0:\\n                dp[i] = min(dp[i], dp[i-t] + 1)\\n    # print(dp)\\n    print(dp[N])\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "286", "substitutes": {"input": ["next", "arg", "n", "load", "pattern", "str", "select", "context", "cont", "p", "insert", "util", "init", "get", "reset", "shift", "inc", "raw", "start", "align", "ref", "focus", "read", "format", "step", "output", "cur", "cmd", "fn", "config", "hidden", "temp", "parse", "feed", "conf", "out", "pull", "Input", "int", "cin", "csv", "first", "dq", " Input", "q", "proc", "reader", "command", "sample", "data", "text", "source", "request", "sum"], "N": ["SN", "CNN", "Name", "n", "NS", "T", "Ne", "NC", "NI", "Ns", "X", "I", "R", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "Node", "V", "No", "NO", "S", "NE", "ND", "P", "Num", "Sn", "D", "NB", "Y", "MN", "Ni", "K", "Z", "C"], "M": ["T", "CM", "mu", "R", "I", "L", "NM", "m", "Mi", "MM", "O", "MC", "V", "B", "J", "P", "E", "D", "DM", "Y", "MN", "MI", "MT", "K", "F", "cm", "C"], "c": ["ec", "lc", "n", "ci", "gc", "d", "p", "cont", "unc", "cd", "xc", "ct", "rc", "r", "tc", "m", "fc", "f", "b", "config", "bc", "mc", "dc", "count", "e", "nc", "cin", "cp", "ch", "cc", "cu", "l", "cs", "k", "cm", "C", "sc"], "dp": ["dos", "pm", "dm", "d", "p", "db", "vp", "di", "dial", "jp", "deep", "dh", "dl", "fp", "pb", "dk", "gp", "bsp", "wd", "tp", "ip", "dt", "df", "xd", "dc", "dep", "hp", "DP", "wp", "dr", "pd", "lp", "delay", "deb", "cp", "bps", "dx", "dq", "bp", "dd", "dj", "np", "pp", "ds", "ps", "adr"], "i": ["a", "mi", " ii", "n", "xi", "x", "ia", "ni", "ci", "gi", "ir", "d", "p", "di", "uli", "ai", "I", "r", "m", "ami", "yi", "qi", "iti", "ic", "o", "ix", " psi", "ip", " bi", "iri", "ind", "f", "b", " Ti", "ri", "si", "ii", "li", "v", "int", "ti", "oi", "iy", "im", "it", "s", "zi", "ini", "ui", "\u0438", "l", "pi", "phi", "u", "id", "j", "index", "k", "y", "ij", "ik", "iu", "fi"], "t": ["tm", "n", "th", "x", "T", "to", "ite", "ta", "p", "d", "g", "di", "ct", "tw", "ai", "td", "r", "wt", "tc", "ts", "m", "z", "iti", " th", "o", "te", "tp", "h", "f", "b", "time", "pt", "ot", "tu", "itt", "v", "int", " ot", "ti", "ten", "at", "tt", "it", "tr", "s", "tf", " ti", "et", "q", "l", "u", "id", "j", "y"]}}
{"code": "l=list(map(int,input().split()))\\nl.sort()\\nprint(abs(l[1]-l[0])+abs(l[2]-l[1]))", "target": "793", "substitutes": {"l": ["lc", "n", "els", "tl", "ld", "ln", "p", "lt", "g", "lb", "i", "L", "long", "c", "m", "ml", "dl", "el", "lit", "nl", "sl", "la", "lay", "ls", "f", "b", "t", "hl", "lis", "lists", "lo", "als", "rl", "fl", "li", "lp", "v", "list", "all", "al", "lv", "it", "lr", "ll", "le", "pl"]}}
{"code": "import math\\nwhile(True):\\n    a,op,b=input().split()\\n    a = int(a)\\n    b = int(b)\\n    if (op == '+'):print(a + b)\\n    elif (op == '-'):print(a - b)\\n    elif (op == '*'):print(a * b)\\n    elif (op == '/'):print(int(a / b))\\n    elif (op == '?'):break", "target": "475", "substitutes": {"a": ["n", "ia", "sta", "ae", "ac", "ab", "era", "ta", "p", "g", "va", "ai", "xa", "i", "w", "c", "ma", "ami", "ata", "el", "eas", "ga", "o", "ea", "la", "aaa", "h", "act", "abs", "f", "t", "alpha", "art", "da", "apa", "out", "na", "an", "all", "A", "al", "obj", "at", "sa", "ao", "aka", "app", "au", "oa", "ed", "aa", "l", "am", "ar", "j", "er", "area", "ba", "ca"], "op": ["top", "loc", "cmp", "ops", "str", "OP", "mod", "cat", "um", "p", "name", "mp", "spec", "cop", "rep", "jp", "typ", "zero", "tip", "pre", "iop", "repl", "expr", "type", "lit", "o", "ip", "ob", "ind", "oper", "cmd", "vr", "sp", "ot", "ver", "bit", "pos", "exp", "hop", "pop", "ok", "up", "mop", "cp", "it", "Op", "co", "opt", "operator", "pl", "np", "pat", "comp", "xp", "pred", "init", "opp"], "b": ["bis", "n", "sb", "bf", "ab", "bar", "d", "p", "db", "beta", "g", "ib", "i", "value", "blue", "c", "z", "batch", "bi", "wb", "pb", "fb", "rb", "by", "o", "mb", "be", "ob", "f", "br", "bc", "t", "bool", "gb", "nb", "B", "bb", "v", "e", "obj", "ch", "erb", "eb", "xb", "ed", "bl", "cb", "base", "l", "bp", "j", "y", "bound", "bs"]}}
{"code": "S = input()\\nprint(S.replace(\"2017\",\"2018\"))", "target": "49", "substitutes": {"S": ["M", "N", "T", "SH", "BS", "SS", "SL", "SB", "R", "X", "SER", "L", "I", "SI", "CS", "SM", "H", "V", "B", "Q", "G", "P", "SE", "A", "E", "s", "SU", "SP", "D", "ST", "SA", "U", "F", "C"]}}
{"code": "s = input().rstrip()\\n\\nif s[0] != 'A':\\n    print('WA')\\n    exit(0)\\n\\nf = False\\nfor i in range(1, len(s)):\\n    if s[i] == 'C':\\n        if i < 2 or i >= len(s) - 1:\\n            print('WA')\\n            exit(0)\\n        if f:\\n            print('WA')\\n            exit(0)\\n        f = True\\n    elif not str.islower(s[i]):\\n        print('WA')\\n        exit(0)\\n\\nif f:\\n    print('AC')\\nelse:\\n    print(\"WA\")\\n", "target": "695", "substitutes": {"s": ["a", "sb", "ys", "str", "ats", "js", "p", "ains", "eds", "g", "fs", "r", "w", "hs", "c", "ts", "m", "ns", "rs", "ses", "less", "ins", "ords", "h", "ms", "ls", "b", "sp", "abs", "t", "ations", "S", "ss", "parts", "gins", "ends", "its", "tes", "ings", "bits", "v", "strings", "gs", "sq", "plays", "ws", "sv", "xs", "ches", "ments", "ands", "bes", "q", "sts", "cs", "os", "qs", "ds", "ps", "bs"], "f": ["fd", "a", "n", "x", "ter", "lf", "bf", "d", "p", "fm", "g", "alf", "w", "r", "c", "m", "z", "fc", "fb", "o", "h", "ground", "fa", "df", "fr", "t", "fac", "b", "force", "fl", "ff", "fw", "conf", "v", "e", "out", "tf", "fully", "q", "l", "fg", "u", "j", "y", "fi", "F", "cf", "xf"], "i": ["mi", "ki", "xi", "x", "ia", "ni", "ci", "gi", "cli", " j", "di", "ai", "I", "c", "m", "z", "bi", "yi", "qi", "ic", "ix", "ski", "o", "ip", "ind", "b", "multi", "ri", "si", "li", "ii", "ji", "ori", "ei", "ti", "oi", "im", "it", "zi", "ini", "ui", "\u0438", "q", "phi", "pi", "ati", "l", "u", "id", "j", "y", "index", "ij", "iu", "hi"]}}
{"code": "inp=list(map(int,input().split()))\\nn=inp[0]\\nk=inp[1]\\nq=inp[2]\\narr=[k-q]*n\\nfor i in range(q):\\n        x=int(input())\\n        arr[x-1]+=1\\nif q<k:\\n    for i in range(n):\\n        print ('Yes')\\nelse:\\n    z=[]\\n    for i in range(len(arr)):\\n        if arr[i]>0:\\n            print ('Yes')\\n        else:\\n            print ('No')", "target": "336", "substitutes": {"inp": ["insp", "perp", "inpect", "ainpect", "ainps", "convp", "callpect", "conq", "intp", "inpad", "palp", "perpost", "perpa", "callpad", "palpost", "calljp", "inpa", "ainpt", "ainp", "dinps", "inq", "injp", "palpa", "ainpad", "inspt", "pinp", "intpost", "inssp", "ainjp", "dinp", "INpect", "inpt", "palvp", "inpost", "pinpad", "intvp", "INpa", "conp", "invp", "palq", "perpect", "insps", "pinpect", "pinjp", "dinpt", "intq", "callp", "inps", "palpect", "INpost", "INp", "ainsp", "dinsp", "conpost"], "n": ["a", "nr", "N", "nt", "gn", "ln", "d", "p", "ne", "cn", "r", "sn", "m", "ns", "o", "nl", "num", "t", "len", "nb", "no", "mn", "na", "v", "nc", "nm", "nan", "nu", "nn", "l", "np", "u", "y", "j", "nd"], "k": ["km", "ki", "ek", "kn", "kr", "kh", "kl", "p", "ak", "ke", "r", "m", "ks", "o", "kw", "ko", "num", "tk", "kok", "kj", "v", "ok", "ikk", "ku", "kk", "sk", "y", "K", "ik", "j", "ka", "ket", "mk"], "q": ["aq", "d", "p", "g", "iq", "qu", "qt", "quant", "r", "w", "c", "m", "qi", "query", "h", "f", "b", "quit", "t", "nb", "Q", "v", "e", "sq", "qq", "ok", "qa", "qual", "ch", "dq", "l", "u", "y", "j", "qs"], "arr": ["arg", "alph", "rr", "nt", "err", "str", "load", "ab", "resh", "db", "Ar", "ang", "r", "map", "expr", "img", "res", "ix", "aaa", "val", "cur", "enc", "buf", "br", "fr", "b", "abs", "rel", "gb", "dat", "agg", "days", "av", "dr", "ply", "ear", "conf", "att", "list", "ok", "obj", "adj", "xy", "gr", "ch", "arb", "app", "au", "Array", "bl", "aa", "pl", "tmp", "ar", "j", "data", "ij", "ray", "attr", "array", "frac"], "i": ["a", "mi", "ki", "xi", "ci", "gi", "p", "di", "ai", "I", "r", "m", "bi", "yi", "qi", "iti", "ic", "o", "ip", "ind", "b", "t", "si", "li", "ii", "ji", "v", "e", "ei", "ti", "iy", "im", "it", "zi", "ini", "l", "pi", "il", "phi", "u", "y", "j", "ik", "ij", "index", "iu", "hi"], "x": ["a", "wx", "xi", "ex", "xe", "p", "xes", "ux", "xc", "X", "xa", "rx", "ox", "xt", "xxx", "ix", "o", "tx", "ax", "xd", "sat", "key", "v", "fx", "ey", "at", "xy", "xs", "mx", "xx", "lat", "j", "y", "px", "xp", "xf"], "z": ["d", "g", "hz", "zero", "iz", "zh", "res", "ez", "ze", "uz", "t", "fl", "pos", "v", "zer", "nz", "s", "rez", "zi", "gz", "zo", "az", "j", "tz", "zen", "ij", "Z", "zz"]}}
{"code": "n , m = map(int,input().split())\\nkagi = []\\nfor i in range(m):\\n    a , b = map(int,input().split())\\n    c = list(map(lambda x:int(x)-1,input().split()))\\n    k = 0\\n    for j in c:\\n        k += 2**j\\n    kagi.append((a,k))\\ndp = [[float(\"inf\") for i in range(2**n)] for j in range(m+1)]\\ndp[0][0] = 0\\nfor i in range(m):\\n    for j in range(2**n):\\n        dp[i+1][j] = min(dp[i][j],dp[i+1][j])\\n        dp[i+1][j | kagi[i][1]] = min(dp[i+1][j | kagi[i][1]],dp[i][j] + kagi[i][0])\\n\\nif dp[-1][-1] != float(\"inf\"):\\n    print(dp[-1][-1])\\nelse:\\n    print(-1)", "target": "772", "substitutes": {"n": ["nr", "N", "x", "nt", "ln", "d", "p", "on", "g", "r", "w", "ns", "o", "h", "pan", "num", "t", "nb", "nor", "mn", "na", "v", "e", "an", "nc", "nm", "s", "nu", "nn", "l", "np", "y"], "m": ["mi", "M", "mr", "x", "dm", "d", "p", "mm", "mo", "g", "r", "ma", "man", "bm", "min", "o", "mb", "h", "ms", "gm", "f", "num", "t", "mc", "mn", "v", "an", "s", "q", "l", "y", "mt"], "kagi": ["kami", "ikasi", " kogi", "skasi", " kami", "ikogi", " kagen", " kani", "kogi", "tkami", "akagen", "okagi", "ikigi", "ikagen", "okasaki", "kasi", "akugi", "akagi", "jatsuki", "okogi", "ckagen", "ikatsuki", "ckagi", "skagi", "ckami", "tkagen", " katsuki", "jogi", "kasaki", " kasaki", "katsuki", "skasaki", "skatsuki", "jigi", "kani", "jagi", " kugi", "tkogi", " kasi", " kigi", "akami", "skami", "skani", "kigi", "ikani", "tkagi", "skogi", "ckugi", "ikami", "kugi", "okami", "ikagi", "kagen"], "i": ["mi", "xi", "x", "ia", "ie", "ci", "gi", "ir", "p", "name", "di", "ai", "I", "iter", "this", "z", "ami", "bi", "status", "info", "iti", "ic", "o", "ix", "ip", "h", "iri", "ri", "multi", "t", "io", "si", "li", "ii", "v", "ei", "e", "ti", "int", "exp", "at", "im", "it", "s", "zi", "ini", "ui", "\u0438", "phi", "pi", "ati", "l", "u", "id", "y", "ik", "ij", "index", "iu", "hi"], "a": ["x", "ae", "ab", "aj", "d", "p", "ach", "va", "ai", "ak", "xa", "r", "ma", "o", "ea", "aaa", "t", "alpha", "na", "an", "e", "v", "A", "at", "sa", "oa", "aa", "l", "am", "ar", "u", "y", "ba", "ca", "ac"], "b": ["ab", "d", "p", "g", "ib", "r", "z", "bi", "o", "h", "f", "bc", "t", "nb", "B", "bb", "v", "e", "s", "l", "y", "bs", "ba"], "c": ["lc", "con", "x", "ci", "gc", "d", "p", "cont", "cd", "g", "xc", "arc", "r", "tc", "z", "fc", "ctx", "f", "bc", "mc", "dc", "sc", "e", "nc", "cin", "cp", "ch", "csv", "cc", "com", "cb", "l", "etc", "cs", "cm", "cf", "ca", "C", "ac"], "k": ["ck", "km", "ek", "kn", "x", "kr", "kh", "kl", "ijk", "p", "ak", "ke", "z", "ks", "kw", "ko", "kok", "kj", "ok", "kick", "ikk", "ku", "kat", "q", "kt", "u", "kk", "ka", "K", "ik", "kan", "sk", "mk", "unk"], "j": ["json", "x", "uj", "ja", "ijk", "str", "aj", "js", "p", "on", "d", "g", "jp", "job", "r", "oj", "jc", "z", "jj", "bi", "ig", "ju", "o", "h", "pr", "jl", "ax", "br", "je", "f", "t", "fr", "J", "bj", "key", "ji", "kj", "v", "li", "jas", "obj", "xy", "im", "ch", "it", "jump", "q", "l", "dj", "u", "y", "ij"], "dp": ["pkg", "pm", "dm", "d", "p", "db", "cd", "vp", "di", "dial", "jp", "sup", "deep", "dh", "push", "dl", "fp", "pb", "dk", "gp", "bsp", "wd", "tp", "decl", "dt", "df", "dc", "dep", "hp", "isp", "DP", "wp", "dr", "pd", "lp", "delay", "cp", "deb", "csv", "bps", "dq", "dim", "bp", "dd", "du", "dj", "np", "px", "pp", "ds", "ps", "adr"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\ncnt=0\\nif 1 not in a:\\n    print(-1)\\n    exit()\\nelse:\\n    num=1\\n    for i in range(n):\\n        if a[i]==num:\\n            num+=1\\n        else:\\n            cnt+=1\\nif cnt==n:\\n    print(-1)\\nelse:\\n    print(cnt)", "target": "749", "substitutes": {"n": ["N", "x", "nt", "d", "p", "ne", "cn", "sn", "r", "c", "m", "z", "ns", "o", "nl", "f", "b", "t", "nia", "count", "len", "nb", "no", "mn", "na", "v", "an", "nc", "nan", "nu", "q", "l", "number", "np", "nn", "j", "k"], "a": ["ia", "sta", "ae", "to", "ac", "ab", "ta", "p", "ana", "ai", "xa", "ma", "ata", "eas", "ga", "ea", "la", "aaa", "abs", "b", "t", "auto", "alpha", "wa", "apa", "na", "an", "gs", "all", "A", "obj", "at", "sa", "s", "another", "ao", "au", "oa", "aa", "am", "index", "data", "area", "ba", "ca"], "cnt": ["CNT", "Cpt", "cNT", "cnc", "cct", "acct", "cret", "ctnc", "ctpt", "ctNT", "ncret", "nnt", "acnt", "ncct", "count", "Cnc", " cNT", "ncpt", " cct", "tcct", " cnc", "ctnt", "ncNT", "Cct", "cpt", "ncnt", " count", "acount", "acret", "ncount", "tcount", "nount", "tcnt", "Cnt", " cpt", "Count", "nct", "tcret", "npt"], "num": ["next", "con", "alph", "th", "net", "nt", "um", "nom", "p", "en", "mult", "typ", "hom", "m", "unit", "sam", "old", "total", "col", "count", "NUM", "multi", "alpha", "nb", "cum", "sim", "mn", "ver", "check", "Num", "cal", "nm", "crit", "msg", "orig", "conv", "nu", "number", "mon", "np", "mem", "tmp", "id", "umber", "index", "coord", "temp", "sum"], "i": ["mi", "ki", "xi", "x", "gi", "p", "g", "di", "I", "r", "c", "m", "z", "bi", "qi", "yi", "ix", "ip", "ind", "f", "b", "multi", "ri", "si", "li", "ii", "ji", "v", "ori", "ti", "im", "zi", "ui", "l", "pi", "y", "j", "ij", "iri"]}}
{"code": "n = int(input())\\nc = input()\\n\\ncntR = c.count('R')\\n\\nprint(c[:cntR].count('W'))", "target": "714", "substitutes": {"n": ["nr", "N", "nt", "d", "p", "i", "r", "sn", "m", "z", "ns", "nl", "f", "b", "num", "t", "count", "nb", "na", "v", "nc", "nm", "nu", "nn", "l", "q", "k", "j"], "c": ["ctrl", "ce", "lc", "con", "ci", "d", "p", "cont", "cd", "ct", "rc", "r", "w", "m", "col", "h", "cur", "f", "b", "bc", "t", "mc", "dc", "vc", "v", "nc", "cin", "cos", "cp", "ch", "cc", "co", "cu", "cb", "l", "cl", "u", "cs", "y", "cm", "cr", "C", "ac"], "cntR": ["rntR", "contNTC", "contNTN", "cthP", "cntP", "cNTP", "rntC", "cctR", "cptR", "contntN", "cptr", "cNTC", "cntN", "cctP", "cNTr", "cntC", "rntr", "cptC", "cthN", "contntP", "rNTR", "cptN", "cntr", "cthC", "contNTP", "cNTN", "cthR", "contntC", "cctC", "rNTP", "contntR", "rNTr", "cctr", "rNTC", "contNTR", "rntP", "cNTR", "cptP"]}}
{"code": "from collections import defaultdict\\nn,m=map(int,input().split())\\nA=list(map(int,input().split()))\\nhon2=[1]\\nhon5=[2,3,5]\\nhon4=[4]\\nhon3=[7]\\nhon6=[6,9]\\nhon7=[8]\\nusenum=[]\\nusematch=defaultdict(int)\\nfor a in A:\\n    if a in hon2:\\n        usenum.append(2)\\n        usematch[2]=max(a, usematch[2])\\n    if a in hon5:\\n        usenum.append(5)\\n        usematch[5]=max(a, usematch[5])\\n    if a in hon4:\\n        usenum.append(4)\\n        usematch[4]=max(a, usematch[4])\\n    if a in hon3:\\n        usenum.append(3)\\n        usematch[3]=max(a, usematch[3])\\n    if a in hon6:\\n        usenum.append(6)\\n        usematch[6]=max(a, usematch[6])\\n    if a in hon7:\\n        usenum.append(7)\\n        usematch[7]=max(a, usematch[7])\\nusenum=list(set(usenum))\\nusenum.sort()\\ndp=[-1]*(n+11)\\ndp[0]=0\\nfor i in range(n+1):\\n    if dp[i]==-1:\\n        continue\\n    for num in usenum:\\n        dp[i+num]=max(10*dp[i]+usematch[num], dp[i+num])\\nprint(dp[n])", "target": "712", "substitutes": {"n": ["nr", "N", "x", "net", "nt", "ni", " len", "gn", "d", "p", " np", "en", "ne", "Na", "cn", "g", " net", "sn", "c", "ns", "o", "h", " ng", "fn", "t", "nb", " l", "no", "mn", "na", "an", "yn", "v", "nc", " ne", "nm", " ns", "s", "nan", "nu", "nn", " fn", "l", "np", " N", " p", "u", "j", " d", " na"], "m": ["tm", "mi", "M", "dm", "p", "mm", "mu", "mp", "fm", "r", "em", "bm", "rm", "o", "gm", "h", "t", "mc", "mn", "nm", "sm", "im", "l", "mon", "mem", "k", "cm"], "A": ["M", "N", "List", "Ax", "An", "ana", "AU", "AT", "mA", "L", "NA", "AB", "AE", "Set", "H", "AA", "As", "O", "AS", "S", "alpha", "B", "apa", "G", "an", "P", "AP", "CA", "At", "au", "D", "AF", "AM", "Y", "am", "AC", "AN", "Array", "C"], "hon2": ["won2", "won3", "wn2", "byn2", "byn5", "won5", "wn1", "aph4", "wn5", "aph5", "aph2", "ldon5", "chron1", "chron5", "byn3", "ldon3", "aph1", "ldon2", "won6", "wn4", "byn6", "hon1", "chron2", "ldon6", "chron4"], "hon5": ["oin75", "byn5", "yx4", "byn4", "yx5", "ldon5", "hon05", "ldon05", "ldon75", "oin5", "son05", "oin3", "ldon3", "bynFive", "son5", "hon75", "ldonFive", "son75", "oin05", "yxFive", "honFive", "ldon4", "son3"], "hon4": ["hom5", "ldon8", "thfour", "chronFour", "chronfour", "hom4", "aph3", "aph4", "phyfour", "honfour", "aph5", "phyFour", "phy4", "ldon5", "phy6", "th4", "thFour", "chron6", "ldon3", "th6", "hon8", "aph8", "ldon4", "hom8", "honFour", "chron4", "hom3"], "hon3": ["ldon8", "ointhree", "aph7", "ith6", "ithThree", "aph6", "oin6", "ahnThree", "aph3", "iron3", "iron8", "honthree", "ahn3", "iththree", "oinThree", "ith3", "ahnthree", "ldon3", "oin3", "hon8", "ahn6", "iron6", "aph8", "iron7", "honThree", "ldon7", "ldon6"], "hon6": ["hom5", "iron5", "olin16", "aph6", "hom9", "yn06", "hom6", "aph5", "yn6", "iron9", "iron8", "olin06", "yn9", "icol9", "icol6", "hon06", "hon16", "aph9", "icol06", "olin6", "hon8", "hon9", "olin9", "iron6", "aph8", "hom8", "yn16", "icol16"], "hon7": ["ith72", "ldon72", "uth4", "ldon14", "aph7", "uth72", "uth14", "hon14", "honseven", "aphseven", "olin87", "hon87", "etonseven", "eton87", "hon13", "aph13", "ith14", "eton13", "olin7", "ith7", "aph87", "olinseven", "ldon4", "hon72", "ldon7", "uth7", "olin13", "eton7", "ith4"], "usenum": ["uourse", "usent", "ausenum", "usnum", "cusnp", " usatile", "cusourse", "cusent", "busumerable", "busum", "useden", "uentity", "rusen", "usesenum", "uum", "usedume", "cusenum", "usedum", "useno", "usumerable", "cusum", " usumber", " usnum", "ruseno", "useng", "ausumerable", " usourse", "ueng", "buseno", "usourse", "ueno", "uumerable", "usumber", "rusourse", " usentity", "busnp", "usesum", "cusumer", "ausen", "usumer", "cusnum", "usesen", " usum", "usesumber", "uent", "rusumer", "usnp", "ausum", " useno", "cusentity", "busen", " useng", "cuseno", "busenum", "rusum", "cusume", " usume", "uumer", "usednum", "usen", "busumer", "uatile", "rusenum", "uenum", " usumer", "usatile", "ruseng", "cusatile", "cusumber", " usen", "cuseng", "usum", "unp", "usedenum", "cusumerable", "usume", "cusen", "usentity", "busent", "usedourse"], "usematch": ["piregem", "havematch", "storemat", "asemat", "sharematch", "usecase", "usedpatch", "userreplace", "usesearch", "utiltest", "definecall", "definepattern", "usefind", "usagetest", "ceivecache", "latetag", " usemate", " usecheck", " usefire", "usercomment", "definematch", "utilmatch", "usagecheck", "hidepattern", "havetest", "definefind", " usesearch", "usedmate", "vecomment", "arematch", "usagemat", "latematch", "storecase", "usageMatch", "atesearch", "usedgem", "usetag", " usecache", "atematch", "usemat", "vetag", "ceiveMatch", "posetag", "hidecall", "savetag", "asetest", "latecase", "havemat", "usermat", "usepattern", "atetag", "trymat", "activatemat", "usagefind", "usagegroup", "arecheck", "Usemate", "savetest", "havetag", " useMatch", "usedmatch", "trymate", "usermatch", " usepattern", "activatematch", "hidematch", "arecache", "posemat", "arepattern", " usetag", "posetest", "usepatch", "utiltag", "usagesearch", "usagegem", "vematch", "usetest", "usereplace", "usement", "usefire", "Usecache", "usagecall", "usagematch", "usagecache", "savereplace", "piretest", "usagemate", "ceivefire", "usertag", "activatecache", "usecall", "usagecase", "Usematch", "UseMatch", "usegem", "vepattern", "ceivematch", "usecache", "sharemat", "useMatch", "usecomment", "asepattern", "sharecomment", "usegroup", "sharetest", "userment", " usecase", "activatepattern", "pirematch", "sharetag", "usecheck", "usertest", "usedgroup", "usedmat", "storematch", "usagepattern", "usagement", "latement", " usemat", "atemat", "piregroup", "savematch", "userMatch", "usagetag", "utilreplace", "userfire", "usedtest", "usercase", "usercache", "trymatch", "asematch", " usepatch", "storeMatch", "posematch", "userpattern", "hidefind", "sharepattern", "trypatch", "usemate"], "a": ["x", "p", "ana", "c", "z", "pa", "fa", " ca", "wa", "na", "att", "sa", "af", "ha", "app", "ka", "data", "ba", "ia", "to", "ta", "g", "ai", "ata", "eas", "o", "ada", "\u00e4", "da", "aka", "s", "oa", "aq", "sta", "ae", "ja", "aj", "xa", "ga", "aux", "ew", "alpha", "apa", "an", "all", "ap", "ao", "now", "ed", "aa", "ar", "ab", "name", "va", "zero", "w", "ma", "ea", "la", "ah", "act", "b", "out", "ad", "at", "au", "am", "j", "ya", "area", "ca", "ac"], "dp": ["pkg", "pm", "dm", "d", "p", "db", "php", "vp", "jp", "dl", "fp", "pb", "dk", "gp", "wd", "tp", "pa", "ip", "dt", "df", "dc", "dep", "pas", "hp", "isp", "DP", "wp", "dr", "pd", "lp", "tap", "deb", "cp", "bps", "dq", "yp", "bp", "np", "dj", "dd", "px", "pp", "ds", "ps", "adr"], "i": ["mi", "ki", "xi", "x", "ite", "ci", "gi", "cli", "p", "g", "di", "ai", "I", "iter", "bi", "ami", "info", "ic", "ix", "o", "ip", "ind", "b", "multi", "si", "sim", "li", "ii", "ti", "im", "it", "ini", "zi", "pi", "u", "j", "y", "k", "index", "ij", "ik", "iu", "hi"], "num": ["con", "alph", "th", "x", "um", "mod", "nom", "p", "mu", "en", "name", "ul", "di", "iter", "uni", "hom", "hn", "unit", "ums", "umi", "dev", "hex", "nam", "enum", "hu", "ip", "val", "f", "uma", "NUM", "umer", "nb", "no", "mn", "ver", "na", "Num", "int", "cal", "nm", "al", "ten", "im", "atum", "it", "end", "nu", "dim", "cu", "number", "mon", "one", "np", "item", "umber", "u", "month", "UM", "sum"]}}
{"code": "X,A,B=map(int,input().split())\\n \\nif A>=B:\\n  print('delicious')\\nelse:\\n  if X>=B-A:\\n    print('safe')\\n  else:\\n    print('dangerous')", "target": "393", "substitutes": {"X": ["M", "IX", "N", "x", "T", "I", "R", "L", "UX", "H", "ZX", "W", "XY", "V", "S", "DX", " x", "J", "Q", "G", "P", "E", "XX", "D", "XT", "Y", "K", "F", "Z", "C", "Xi"], "A": ["a", "GA", "M", "N", "T", "An", "IA", "Alpha", "AU", "AT", "I", "L", "AL", "AV", "AB", "App", "AE", "H", "AA", "LA", "As", "V", "AI", "AR", "C", "AS", "S", "Q", "G", "This", "HA", "P", "CA", "At", "AY", "E", "AF", "D", "AM", "Y", "SA", "AC", "ACT", "BA", "AN", "Array", "AP"], "B": ["LB", "But", "BI", "M", "N", "T", "MB", "VB", "BL", "BS", "I", "L", "IB", "AB", "BG", "H", "V", "BT", "b", "S", "BC", "J", "GB", "G", "WB", "P", "BB", "E", "Bern", "TB", "D", "EB", "NB", "Y", "BO", "DB", "BA", "Z", "C"]}}
{"code": "x, a, b = map(int,input().split())\\nprint(\"AB\"[(x*2 > a+b)^(a>b)])", "target": "408", "substitutes": {"x": ["n", "xi", "ex", "xe", "d", "p", "xc", "xa", "X", "i", "rx", "w", "c", "ox", "z", "ix", "h", "tx", "ax", "f", "t", "v", "e", "xy", "xs", "dx", "xx", "l", "j", "y", "xf"], "a": ["n", "ia", "to", "ae", "ac", "ab", "aj", "ta", "p", "d", "g", "va", "ai", "i", "w", "c", "ma", "m", "la", "val", "act", "t", "alpha", "apa", "an", "e", "A", "al", "at", "sa", "s", "au", "oa", "aa", "l", "am", "ar", "j", "y", "ba", "ca", "ao"], "b": ["n", "sb", "ab", "d", "db", "g", "ib", "i", "r", "c", "m", "z", "bi", "fb", "rb", "h", "be", "ob", "f", "bc", "t", "nb", "B", "bb", "v", "e", "eb", "bl", "cb", "l", "j", "y", "bs", "ba"]}}
{"code": "#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n#\\n# Created: Jul, 13, 2020 04:40:02 by Nobody\\n# $Author$\\n# $Date$\\n# $URL$\\n__giturl__ = \"$URL$\"\\n\\n\\nfrom sys import stdin\\ninput = stdin.readline\\n\\n\\ndef main():\\n  N = int(input())\\n  AB = [tuple(map(int, input().split())) for _ in range(N)]\\n\\n  AB = sorted(AB, key=lambda x: x[1])\\n  time = 0\\n  for a, b in AB:\\n    time += a\\n    if time > b:\\n      print('No')\\n      return\\n  print('Yes')\\n\\n\\nif(__name__ == '__main__'):\\n  main()\\n", "target": "55", "substitutes": {}}
{"code": "def task(probs):\\n    n = len(probs)\\n    dp = [0] * (n + 1)\\n    dp[0] = 1\\n\\n    for i, p in enumerate(probs, start=1):\\n        state = 0\\n        for j in range(i + 1):\\n          #print(state, p, 1-p, dp[j])\\n          curr = dp[j]\\n          dp[j] = (curr * (1 - p)) + state\\n          state =  curr * p\\n\\n    return sum(dp[(n + 1) // 2:])\\n\\n\\nn = input()  # n\\nprobs = [float(x) for x in input().split()]\\nprint(task(probs))", "target": "437", "substitutes": {"probs": ["probles", "PROps", "preps", "Probs", "robes", " probes", "rebes", "Provs", "prebs", "reba", "rops", "prvs", "Probles", "Props", " probles", "prps", "rebs", "robs", "proba", " provs", "PROba", "prbs", "prebes", "props", "PRObes", "prbles", "reps", "preba", "provs", " props", "PRObs", "roba", " proba", "probes"], "n": ["nr", "N", "nt", "ni", "d", "en", "names", "name", "ne", "cn", "sn", "c", "m", "ns", "h", "num", "t", "len", "nb", "no", "na", "v", "nc", "nan", "nu", "nw", "q", "l", "nn", "np", "ng", "k", "network", "nd"], "dp": ["dm", "d", "db", "td", "dh", "ns", "dl", "pb", "wd", "tp", "dt", "df", "sp", "dat", "dep", "dc", "da", "DP", "dr", "pd", "lp", "delay", "cp", "bps", "dx", "dq", "np", "dj", "dd", "pp", "ds", "ps"], "i": ["mi", "ki", "xi", "x", "ci", "gi", "ir", "di", "ai", "I", "m", "bi", "yi", "ic", "ix", "ip", "ind", "multi", "si", "li", "ii", "v", "int", "ti", "im", "ini", "zi", "phi", "pi", "index", "y", "ij", "iu"], "p": ["pm", "d", "pc", "jp", "r", "c", "m", "pb", "gp", "tp", "pa", "ip", "pr", "f", "b", "sp", "t", "pd", "v", "P", "cp", "ph", "pl", "np", "pp", "pro", "ps"], "state": ["label", "stat", "port", "action", "name", "g", "r", "length", "effect", "State", "status", "type", "change", "ose", "STATE", "tag", "count", "ss", "conf", "states", "pos", "event", "ch", "size", "q", "progress", "fg", "stats"], "j": [" ii", " iii", " dj", " pos", " job", " k", "I", "jj", "ix", " q", " f", " J", "J", "pos", "kj", " c", " step", "it", "q", "l", " h", " v", "k", "y", "ij", "ket"]}}
{"code": "class UnionFind:\\n    def __init__(self, n):\\n        #\u89aa\u30ce\u30fc\u30c9\u306e\u756a\u53f7\u3092\u683c\u7d0d\\n        self.par = [i for i in range(n+1)]\\n        self.rank = [0] * (n+1)\\n        self.size = [1] * (n+1)\\n    def find(self, x):\\n        #\u6839\u306a\u3089\u305d\u306e\u756a\u53f7\u3092\u8fd4\u3059\\n        if self.par[x] == x:\\n            return x\\n        else:\\n            self.par[x] = self.find(self.par[x])\\n            return self.par[x]\\n    def same_check(self, x, y):\\n        #\u540c\u3058\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\\n        return self.find(x) == self.find(y)\\n    def union(self, x, y):\\n        #\u7d71\u5408\u3059\u308b\\n        x = self.find(x)\\n        y = self.find(y)\\n        if self.rank[x] < self.rank[y]:\\n            self.par[x] = y\\n            self.size[y] += self.size[x]\\n            self.size[x] = 0\\n        elif self.rank[x] > self.rank[y]:\\n            self.par[y] = x\\n            self.size[x] += self.size[y]\\n            self.size[y] = 0\\n        else:\\n            self.rank[x] += 1\\n            self.par[y] = x\\n            self.size[x] += self.size[y]\\n            self.size[y] = 0\\n    def getsize(self, x):\\n        p = self.find(x)\\n        return self.size[p]\\nn, m = map(int, input().split())\\np = list(map(int, input().split()))\\nG = UnionFind(n)\\nfor i in range(m):\\n    x,y = map(int, input().split())\\n    G.union(x,y)\\nans = 0\\nfor i in range(1,n+1):\\n    if G.same_check(p[i-1], i):\\n        ans += 1\\nprint(ans)", "target": "367", "substitutes": {"self": ["nt", "me", "local", "w", "c", "m", "ref", "my", "ins", "res", "h", "rel", "pos", "e", "obj", "s", "cl", "Self"], "n": ["nr", "N", "nt", "p", "names", "norm", "i", "r", "c", "m", "z", "ns", "ner", "num", "fn", "nb", "nor", "na", "nm", "node", "nu", "nn", "number", "l", "np", "ng", "j", "k"]}}
{"code": "N = int(input())\\nH = list(map(int, input().split()))\\nmax_h = H[0]\\nflag = 0\\n\\nfor i in range(1, N):\\n    max_h = max(max_h, H[i])\\n    if max_h - H[i] > 1:\\n        flag += 1\\n\\nif flag:\\n    print('No')\\nelse:\\n    print('Yes')\\n", "target": "230", "substitutes": {"N": ["SN", "M", "n", "NS", "T", "NC", "GN", "Ns", "X", "I", "R", "NA", "L", "NM", "NN", "NR", "NT", "NH", "V", "TN", "NE", "B", "J", "Q", "G", "ND", "Num", "P", "A", "D", "NB", "K", "F", "Z", "C"], "H": ["M", "CH", "HQ", "HD", "T", "SH", "HP", "His", "GO", "HS", "HL", "HE", "AH", "X", "HO", "HI", "GH", "Help", "HTML", "NH", "W", "h", "DH", "TH", "V", "HH", "B", "J", "HA", "P", "OH", "HC", "MH", "Y", "HTTP", "HB", "K", "F", "HT", "He"], "max_h": ["basemaxc", "basemaxphi", "ax_h", "max64c", "max_c", "basemaxh", "max_phi", " max_c", "ax_high", "maxmaxkh", "maxablephi", "max64high", "max_l", "maxmaxphi", "base_h", " max_p", "max_t", "max_high", "max_p", "maxablec", "maxablekh", "basemaxkh", "max_kh", " max_t", "base_c", "ax_c", "max64h", "max_v", "ax_p", "maxmaxh", " max_v", "base_kh", "maxableh", " max_l", "base_phi", "maxmaxc", "max64p"], "flag": ["hold", "state", "online", "sign", "ld", "ret", "cloud", "store", "true", "kill", "leaf", "set", "wait", "condition", "status", "bird", "xml", "FLAG", "window", "save", "lag", "nl", "agged", "bug", "flags", "tag", "mask", "limit", "level", "f", "bool", "quit", "cond", "Flag", "force", "bit", "don", "int", "list", "switch", "lv", "event", "debug", "group", "spin", "lock", "enable", "sav", "id", "again", "member", "join", "sync", "field", "stop"], "i": ["mi", "n", "xi", "x", "ia", "uri", "me", "ie", "gi", "di", "ai", "I", "z", "bi", "info", "ic", "ix", "ip", "ind", "b", "num", "multi", "si", "li", "key", "ji", "v", "ii", "ti", "s", "it", "zi", "ui", "ini", "q", "l", "pi", "id", "j", "index", "k", "ij", "hi"]}}
{"code": "n=int(input())\\ns=input()\\nres=s[0]\\nans=1\\nfor i in range(1,n):\\n  if s[i]==res:\\n    continue\\n  else:\\n    res=s[i]\\n    ans+=1\\nprint(ans)", "target": "717", "substitutes": {"n": ["N", "x", "net", "nt", "ln", "d", "p", "ne", "cn", "sn", "r", "c", "w", "m", "z", "ns", "nl", "b", "num", "t", "nb", "no", "mn", "na", "v", "nc", "nu", "nn", "l", "q", "np", "network", "j", "k"], "s": ["sb", "ys", "ats", "js", "p", "spec", "g", "fs", "r", "hs", "sys", "c", "ts", "m", "ns", "rs", "ess", "ins", "sl", "ms", "ls", "abs", "b", "sp", "t", "ss", "S", "its", "tes", "states", "v", "e", "gs", "sq", "sa", "xs", "sv", "sts", "q", "sis", "l", "cs", "se", "qs", "ds", "ps", "bs"], "res": ["next", "resolution", "max", "nt", "ro", "resh", "ret", "reset", "rep", "rc", "rx", "Res", "re", "r", "sys", "ref", "rem", "rs", "RES", "ms", "val", "result", "pr", "rel", "ress", "resource", "cons", "ver", "pos", "out", "resp", "gr", "rez", "sol", "pres", "req", "q", "mem", "reg", "range", "os", "cr", "init"], "ans": ["ars", "ANS", "ants", "ats", "actions", "outs", "urs", "irms", "aus", "ros", "ns", "vals", "ann", "rans", "rs", "mas", "anas", "ks", "offs", "ins", "ons", "ms", "amps", "angs", "ls", "ents", "ens", "cons", "uns", "an", "rors", "anks", "iann", "anes", "nan", "ran", "nas", "aos", "ads", "arts", "es", "os", "lan", "ones"], "i": ["a", "mi", "xi", "x", "uri", "ci", "gi", "di", "ai", "I", "batch", "bi", "qi", "yi", "ix", "ic", "ip", "ind", "b", "num", "ri", "multi", "si", "li", "key", "ji", "ori", "ii", "ti", "list", "im", "it", "zi", "ini", "ui", "\u0438", "q", "pi", "id", "j", "index", "k", "y", "ij", "iri"]}}
{"code": "N,D=map(int, input().split())\\nA = 0\\nfor i in range(N):\\n    X,Y=map(int, input().split())\\n    if (D*D) >= (X*X)+(Y*Y):\\n        A +=1 \\nprint(A)", "target": "131", "substitutes": {"N": ["CNN", "M", "n", "NS", "We", "T", "NC", "GN", "NI", "I", "R", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "V", "No", "NO", "NUM", "Wh", "G", "ND", "Num", "P", "NB", "MN", "K", "F", "TN", "C"], "D": ["M", "Def", "T", "d", "DE", "R", "L", "DR", "DI", "H", "DH", "V", "MD", "Do", "DX", "DA", "DP", "B", "Q", "G", "DD", "DC", "DN", "Dir", "P", "Ds", "WD", "DS", "DM", "DF", "DB", "F", "Z", "C", "Data"], "A": ["a", "GA", "Ax", "An", "Alpha", "AH", "AU", "R", "I", "ACC", "NA", "L", "AL", "AV", "AST", "AB", "AE", "H", "AA", "LA", "As", "AR", "C", "AS", "Ah", "S", "B", "G", "HA", "P", "Action", "CA", "At", "AY", "JA", "AF", "TA", "Array", "SA", "U", "AC", "ACT", "AN", "BA", "EA", "AP"], "i": ["a", "n", "x", "um", "gi", "p", "I", "r", "c", "ix", "ip", "ind", "f", "b", "li", "ii", "e", "im", "it", "q", "id", "k", "y", "j"], "X": ["INT", "IX", "x", "Ax", "T", "IC", "Win", "TX", "IP", "Right", "I", "EX", "L", "R", "MX", "UX", "OX", "H", "XY", "O", "V", "GRE", "XP", "DX", "Co", "Q", "ML", "J", "P", "XX", "XXX", "XL", "U", "Ex", "EL", "C", "Xi"], "Y": ["YD", "CH", "T", "YE", "IA", "EY", "My", "Board", "I", "Py", "TY", "YS", "MY", "HY", "Mouse", "IE", "YC", "Year", "H", "XY", "V", "TH", "YA", "B", "J", "Q", "Ray", "ET", "E", "YY", "FY", "LL", "DB", "y", "HT", "Z", "NY", "BY", "C"]}}
{"code": "import sys\\n\\nN = int(sys.stdin.readline())\\nA = list(map(int, sys.stdin.readline().split()))\\n\\nans = 0\\nfor i in range(N):\\n    if i % 2 == 0 and A[i] % 2 == 1:\\n        ans += 1\\n\\nprint(ans)", "target": "126", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "NL", "We", "T", "NC", "GN", "NI", "Ns", "I", "NA", "L", "NM", "NN", "CN", "NR", "NT", "NH", "V", "No", "NO", "S", "PN", "ND", "Num", "P", "D", "NB", "Y", "Mon", "Len", "AN", "TN", "FN"], "A": ["a", "GA", "But", "M", "There", "Answer", "An", "Ar", "Alpha", "Abs", "Adam", "AT", "I", "X", "NA", "L", "AL", "R", "AB", "AE", "Args", "AA", "LA", "As", "WA", "C", "B", "HA", "P", "At", "AY", "MA", "You", "JA", "Authorities", "D", "AF", "TA", "AM", "SA", "AC", "AN", "Array", "AP"], "ans": ["ANS", "ants", "ats", "ians", "ints", "ean", "anon", " means", "eds", "acs", "outs", "irms", "aus", "ros", "aned", " Ans", "ns", "anus", "ann", "rans", "rs", "ums", "anas", "ks", "offs", "ins", "mas", "wan", "ms", "amps", "mean", "anned", "pan", "ents", "grades", "ens", "ots", "an", "posts", "anks", "iann", "anes", "oss", "ran", "ams", "aos", "nas", "ads", "arts", "lan", "AN"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "p", "vi", "di", "I", "bi", "yi", "qi", "ic", "o", "ix", "ip", "ind", "f", "b", "io", "si", "ii", "li", "ji", "v", "ori", "ti", "oi", "im", "it", "ini", "zi", "ui", "\u0438", "q", "pi", "id", "j", "y", "k", "ij"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport math\\n\\n#\u5165\u529b\\n#S = str(input())\\na, b = map(int, input().split())\\n#N = int(input())\\n\\nif a <= b :\\n  print (a)\\nelse :\\n  print (a-1)\\n", "target": "35", "substitutes": {}}
{"code": "n = int(input())\\nd = list(map(int,input().split()))\\nm = int(input())\\nt = list(map(int,input().split()))\\nimport collections\\ncd = collections.Counter(t)\\nct = collections.Counter(d)\\n\\nans = 1\\nfor i in range(m):\\n    if ct[t[i]] < cd[t[i]]:\\n        ans = 0\\nif ans == 0:\\n    print(\"NO\")\\nelse:\\n    print(\"YES\")", "target": "210", "substitutes": {"n": ["N", "nt", "p", "dn", "sn", "c", "ns", "total", "o", "nl", "b", "num", "nb", "mn", "na", "v", "e", "nc", "nm", "nn", "l", "q", "np", "k", "j", "y"], "d": ["fd", "p", "db", "di", "dn", "td", "dh", "c", "dl", "o", "dt", "b", "dc", "dat", "da", "dr", "pd", "de", "ad", "des", "s", "D", "do", "l", "dd", "sd", "j", "data", "dict", "ds", "nd"], "m": ["tm", "mi", "M", "mod", "dm", "p", "mm", "mo", "mp", "g", "r", "c", "ma", "man", "mas", "bm", "o", "gm", "h", "ms", "b", "num", "mis", "mc", "mn", "v", "sm", "l", "k", "j", "mt", "cm"], "t": ["tm", "a", "ty", "T", "nt", "p", "ta", "g", "td", "tc", "wt", "c", "ts", "type", "o", "te", "tp", "dt", "f", "b", "tab", "pt", "ot", "tu", "v", "tn", "ti", "tt", "tr", "s", "it", "rt", "q", "l", "j", "y", "mt"], "cd": ["fd", "ck", "nt", "vd", "ld", "db", "dn", "td", "c", "bd", "dl", "od", "iced", "ctx", "kb", "dt", "cmd", "xd", "ctr", "dc", "cond", "CD", "pd", "de", "bt", "nc", "cc", "cb", "dd", "sd", "ecd", "cs", "did", "md", "cm", "cr", "ds", "cdn", "nd"], "ct": ["nt", "cat", "ci", "ld", "cont", "cn", "td", "tc", "c", "cod", "ctx", "CT", "tic", "dt", "act", "ctr", "dc", "count", "CD", "cz", "ot", "pd", "bt", "nc", "cp", "tt", "cc", "capt", "et", "cl", "ent", "cs", "cm", "cr", "cf", "ctl", "nd", "cit"], "ans": ["ones", "ars", "ANS", "ants", "ats", "ians", "actions", "eds", "outs", "ai", "aus", "aned", "ns", "ann", "rans", "rs", "ums", "anas", "ks", "ins", "ons", "ms", "acts", "flags", "ls", "ents", "ens", "cons", "uns", "an", "rors", "gs", "anes", "aces", "s", "nan", "xs", "nas", "aos", "vs", "cs", "arts", "os", "ds", "ps"], "i": ["a", "mi", "ki", "xi", "x", "ci", "gi", "p", "vi", "di", "ai", "I", "r", "c", "bi", "yi", "qi", "ic", "ix", "o", "ip", "ind", "f", "b", "ri", "io", "si", "li", "ii", "v", "ori", "ti", "s", "it", "zi", "ini", "ui", "q", "l", "pi", "u", "j", "y", "index"]}}
{"code": "import sys\\nimport os\\n\\nMOD = 10 ** 9 + 7\\n\\n\\ndef main():\\n    if os.getenv(\"LOCAL\"):\\n        sys.stdin = open(\"input.txt\", \"r\")\\n\\n    N = int(sys.stdin.buffer.readline().rstrip())\\n    print('Hello World') if N == 1 else print(sum(int(sys.stdin.buffer.readline().rstrip()) for _ in range(2)))\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "691", "substitutes": {"MOD": ["MAX", " RM", " CN", "mod", "KEY", "Mod", " CL", "FD", "MIN", "EXP", " REM", "SIZE", " LONG", "NUM", "MODE", "DX", " TEST", " MODULE", " EXP", "DEBUG", " mod", "OUT", " LEVEL", "REM", "DEV", " INT", " PROT", " LOG"], "sys": [" ps", " os", "nuts", "ys", "nt", "local", "sit", "str", "Sys", "lib", "util", "p", "system", " us", "fs", " python", "windows", "sql", "linux", "ns", "expr", "process", "details", " sy", "o", "py", "tp", "sky", "bytes", "ls", " fs", "win", " system", "std", "www", " math", "s", "hw", "xs", "iso", "rt", "req", "boot", "usr", "pse", "yes", "proc", "np", "yy", "System", "phys", "cs", "os", "y", "psy", "bs", "sync"], "stdin": ["ddin", " stdIn", "standardcin", "stin", "standardic", "standardre", "stdre", "stdout", "din", "standardin", "dIn", "cldin", "newsout", "standardout", "clIn", "stre", "stdIn", "dout", " stdic", "newsic", " stdre", "clin", "stddin", "newsin", "clout", "stdic", "stdcin", " stdout", "newscin", " stddin", " stdcin", "stout"], "N": ["SN", "M", "n", "NS", "T", "NV", "NC", "GN", "NI", "R", "I", "NA", "L", "NM", "NN", "NR", "NT", "H", "V", "NO", "NUM", "S", "B", "J", "G", "Num", "A", "D", "NB", "Y", "K", "F", "TN", "FN", "C"], "_": ["ex", " j", " k", "mult", "ix", " b", " g", "val", " f", " c", " m", "un", " __", "___", " p", " un", " z"]}}
{"code": "import sys\\ndef input(): return sys.stdin.readline().rstrip()\\ndef main():\\n    n, x, t = map(int,input().split())\\n    print(-t*(-n//x))\\n\\nif __name__=='__main__':\\n    main()", "target": "105", "substitutes": {"n": ["nr", "N", "nt", "d", "p", "ne", "i", "r", "w", "c", "m", "z", "ns", "ny", "o", "f", "num", "nb", "na", "v", "yn", "an", "nc", "s", "nan", "nu", "nn", "l", "np", "j", "y", "k"], "x": ["wx", "xi", "ex", "ux", "xc", "X", "xa", "i", "rx", "w", "ox", "z", "xt", "ix", "o", "tx", "ax", "f", "xd", "v", "e", "int", "fx", "xy", "xs", "dx", "xx", "l", "y", "px", "xp"], "t": ["tm", "a", "ty", "T", "ter", "d", "p", "ta", "i", "r", "wt", "w", "c", "ts", "m", "tc", "z", "type", "total", "o", "dt", "f", "b", "pt", "ot", "tu", "v", "tt", "tf", " T", "l", "j", "y", "tz"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nn, m = [int(x) for x in input().split()]\\ng = [[] for _ in range(n)]\\n\\nfor _ in range(m):\\n    l, r, d = [int(x) for x in input().split()]\\n    g[l - 1].append((r - 1, d))\\n    g[r - 1].append((l - 1, -d))\\n\\nd = [None] * n\\nvisited = [0] * n\\n\\nfor i in range(n):\\n    if visited[i] != 0:\\n        continue\\n    stack = [i]\\n    d[i] = 1\\n    while stack:\\n        u = stack.pop()\\n        visited[u] = 1\\n        for v, d_ in g[u] :\\n            if d[v] is None:\\n                d[v] = d[u] + d_\\n                stack.append(v)\\n            else:\\n                if d[v] != d[u] + d_ :\\n                    print(\"No\")\\n                    sys.exit()\\nprint(\"Yes\")\\n", "target": "672", "substitutes": {"input": ["history", "next", "draw", "cat", "str", "context", "select", "active", "init", "put", "get", "ct", "raw", "password", "control", "set", "read", "format", "enum", "step", "output", "val", "cmd", "config", "fn", "form", "initial", "feed", "url", "out", "Input", "int", "list", "stream", "update", "string", " read", "it", "csv", "first", "gen", "print", " Input", "q", "lat", "data", "text", " inputs", "request", " update"], "n": ["nr", "N", "nt", "gn", "ln", "p", "ne", "cn", "sn", "c", "w", "z", "ns", "o", "nl", "h", "ms", "b", "num", "t", "nb", "nor", "mn", "na", "an", "nc", "nm", "s", "nan", "nn", "ll", "np", "q", "j", "y", "k"], "m": ["tm", "mi", "km", "M", "mr", "dm", "p", "mm", "c", "ma", "z", "man", "mas", "bm", "o", "gm", "h", "ms", "num", "mis", "t", "mc", "mn", "nm", "sm", "np", "mem", "mat", "j", "y", "cm", "mt"], "x": ["wx", "xi", "ex", "ci", "xe", "p", "xes", "ux", "name", "xc", "X", "xa", "rx", "w", "c", "ox", "z", "xt", "ic", "ix", "o", "tx", "ax", "xd", "t", "zx", "e", "fx", "xy", "s", "xs", "mx", "xb", "dx", "inx", "q", "xx", "yx", "k", "y", "px", "ross", "xp", "xf"], "g": ["gg", "ge", "gu", "gn", "gi", "p", "gc", "gd", "w", "c", "cfg", "ig", "ger", "ga", "gt", "gp", "o", "graph", "gm", "h", "sg", "tg", "go", "f", "vg", "b", "t", "gb", "G", "e", "gs", "msg", "gr", "s", "gen", "erg", "group", "q", "fg", "j", "y", "groups", "reg", "mg", "pg"], "_": ["code", "I", "ation", "ox", "ml", "ix", "ic", "let", "val", " int", "ind", " time", " __", "___", "il", "y", "ac"], "l": ["lc", "ln", "ld", "p", "left", "lb", "L", "w", "c", "ly", "ml", "dl", "el", "o", "nl", "sl", "la", "h", "ls", "b", "hl", "t", "rl", "lo", "lp", "li", "s", "lr", "ll", "le", "pl", "line", "j", "lin"], "r": ["nr", "sr", "mr", "rr", "ro", "rg", "p", "R", "rc", "re", "w", "c", "z", "rh", "rs", "rb", "res", "o", "rm", "h", "br", "b", "ri", "rl", "dr", "rt", "lr", "ar", "j", "er", "cr", "rd"], "d": ["fd", "a", " D", "p", "ld", "db", "di", "dn", "td", "dh", "w", "c", "z", "dl", "dev", "o", "h", "dt", "done", "f", "b", "df", "t", "dat", "da", "dump", "dates", "pd", "out", "e", "de", "ad", "des", "s", "dx", "D", "ed", "do", "dq", "dd", "sd", "did", "j", "y", "data", "dict", "ds", "defined", "nd"], "visited": ["visitted", "limiting", "glited", "waiting", "aviting", "waited", "visated", "navits", "Visated", "VISitted", "visiting", "avited", "limited", "naviting", "avated", "waitable", "visitable", "limended", "limits", "gliting", "Visitted", "glitted", "VISits", "avitted", "Visitable", "VISended", "glitable", "Visiting", "visended", "waitted", "VISated", "VISited", "VISiting", "navended", "visits", "navited", "Visited"], "i": ["a", "mi", "xi", "uri", "ci", "gi", "p", "name", " j", "di", "ai", "I", "iter", "z", "bi", "ic", "o", "ip", "iri", "ind", "t", "ri", "si", "li", "ii", "e", "int", "ti", "iy", "im", "it", "zi", "ini", "ui", "q", "pi", "id", "j", "y", "index", "ij", "ik", "iu", "hi"], "stack": ["history", "alt", "hold", "acks", "storage", "complete", "race", "queue", "load", "str", "space", "p", "loop", "where", "frame", "cycle", "store", "current", "z", "set", "buffer", "wait", "status", "wall", "ist", "window", "step", "sl", "h", "track", "ind", "level", "sp", "empty", "cond", " Stack", "thread", "lo", "depth", "pos", "check", "out", "forest", "frames", "all", "pop", "list", "switch", "cache", "stream", "steps", "st", "now", "first", "print", "stage", "slice", "Stack", "play", "index", "paren", "upper", "pack", "ack", "back", "trace", "chain"], "u": ["ut", "bu", "lu", "uj", "uri", "su", "um", "p", "util", "mu", "ul", "ue", "uid", "uni", "us", "uv", "c", "ju", "hu", "o", "h", "pu", "uc", "ua", "eu", "tu", "ud", "uci", "ug", "ru", "un", "fu", "ou", "ur", "ui", "uf", "nu", "au", "cu", "user", "k", "uu", "U", "iu"], "v": ["qv", "lu", "vd", "vv", "p", "vi", "ue", "vo", "tv", "va", "vp", "rev", "value", "uid", "w", "uv", "ev", "vy", "o", "nov", "h", "V", "cv", "vr", "f", "b", "vc", "t", "iv", "ver", "av", "nv", "e", "lv", "vm", "sv", "conv", "ve", "q", "vs", "ov", "k", "vt", "y", "uu", "j"], "d_": ["dd_", "D_", "sd_", "dh_", "r_", "dx_"]}}
{"code": "import math\\na,b,x = map(int, input().split())\\n\\nif a*a*b == x:\\n    print(0)\\n    exit()\\n\\ntan = (a*a*a)/(2*(a*a*b-x))\\ntan_thre = a/b\\n\\nif tan > tan_thre:\\n    ans = math.degrees(math.atan(tan))\\n    print(90-ans)\\nelse:\\n    tan = 2*x/(a*b*b)\\n    ans = math.degrees(math.atan(tan))\\n    print(90-ans)", "target": "619", "substitutes": {"a": ["n", "ia", "sta", "ae", "ac", "ab", "ta", "aj", "p", "d", "g", "ai", "i", "r", "w", "c", "ma", "m", "z", "ga", "o", "ea", "aux", "la", "aaa", "pa", "h", "ax", "f", "t", "alpha", "bb", "an", "e", "all", "A", "al", "at", "sa", "app", "oa", "au", "aa", "l", "am", "ar", "u", "j", "y", "data", "area", "ba", "ca", "ao"], "b": ["bis", "n", "sb", "ab", "d", "p", "db", "g", "ib", "i", "r", "c", "z", "m", "bi", "wb", "fb", "rb", "o", "mb", "h", "be", "f", "bas", "bc", "t", "gb", "br", "nb", "B", "bb", "v", "e", "eb", "base", "cb", "l", "u", "bin", "j", "y", "bs", "ba", "back"], "x": ["n", "xi", "ex", "xe", "d", "p", "xc", "xa", "X", "i", "rx", "w", "c", "ox", "z", "m", "xt", "hex", "o", "h", "tx", "ax", "f", "t", "v", "e", "an", "xy", "xs", "xb", "xx", "l", "y", "px", "xf"], "tan": ["tm", "han", "rake", "zan", "torn", "kin", "ta", "ln", "broad", "atan", "flat", "td", "atten", "san", "ann", "tun", "mal", "rain", "wan", "tx", "tic", "trans", "t", "dat", "stan", "cum", "non", "tu", "tin", "don", "an", "fan", "sin", " Tan", "Tan", "ten", "cin", "tt", "nan", "rt", "tar", "istan", "ran", "dot", "tall", "vin", "lat", "mat", "lah", "lan", "late", "lin", "tem", "trace"], "tan_thre": ["tan_thru", "tan_phru", "tan_othry", "tan_thire", "tan_sthres", "tan_curru", "tan2thred", "tan2thry", "tan_othRE", "tan_curre", "tan_thry", "tan_sthre", "tan_curry", "tan_phry", "tan_Thre", "tan_thred", "tan2thru", "tan_Thres", "tan_othred", "tan2phre", "tan_thRE", "tan2phred", "tan_othire", "tan_ThRE", "tan_othru", "tan_phre", "tan2phry", "tan_sthire", "tan_Thire", "tan_othres", "tan_sthRE", "tan_othre", "tan_curred", "tan2phru", "tan_thres", "tan_phred", "tan2thre"], "ans": ["ars", "ANS", "ants", "ats", "ians", "beans", "names", " means", "eds", "aus", "asks", "span", "san", "people", "ns", "ann", "rans", "mas", "anas", "ks", "scan", "ins", "ras", "ons", "amps", "pan", "ents", "ids", "ens", "cas", "uns", "an", "jas", "posts", "anes", "ran", "ams", "aos", "nas", "roots", "sts", "rates", "ads", "asms", "lan", "said", "vers"]}}
{"code": "from collections import deque\\nN, M = map(int, input().split())\\n\\nh = [[]*N for _ in range(N)]\\nAB = []\\n\\nfor _ in range(M):\\n    a, b = list(map(int, input().split()))\\n    a -= 1\\n    b -= 1\\n    h[a].append(b)\\n    h[b].append(a)\\n    AB.append([a, b])\\n\\nans = 0\\n\\nfor i in range(M):\\n    a, b = AB[i]\\n    h[a].remove(b)\\n    h[b].remove(a)\\n    \\n    fl = [False]*N\\n\\n    q = deque([0])\\n    while q:\\n        t = q.popleft()\\n        if fl[t]:\\n            continue\\n        fl[t] = True\\n        for tt in h[t]:\\n            q.append(tt)\\n    \\n    if not all(fl):\\n        ans += 1\\n\\n    h[a].append(b)\\n    h[b].append(a)\\n\\nprint(ans)", "target": "634", "substitutes": {"N": ["SN", "CNN", "n", "NS", "T", "NL", "GN", "NI", "Na", "Ns", "R", "X", "I", "L", "NA", "NM", " n", "NN", "CN", "NR", "NT", "NH", "H", "O", "V", "TN", "No", "NO", "S", "B", "J", "Q", "G", "ND", "P", "Num", "NPR", "A", "D", "Y", "Size", "MN", "Len", "Ni", "K", "F", "AN", "Z", "C"], "M": ["MO", "T", "CM", "R", "I", "L", "NM", "MX", "m", "H", "MM", "MC", "V", "MD", "C", "MON", "IM", "S", "MAN", "B", "J", "Q", "P", "A", "Multi", "MP", "E", "MS", "D", "DM", "TM", "MN", "MI", "MT", "MR", "K", "LM", "F", "PM", "JM"], "h": ["ht", "n", "th", "sh", "kh", "ab", "p", " inh", "hz", "html", "hal", "dh", "r", "hs", "w", "c", "m", "ih", "zh", "rh", "http", "graph", "o", "H", "eh", "ah", "host", "bh", "go", "f", "HH", "hl", "hp", "dr", "v", "oh", "cache", "his", "ph", "ha", "hash", "he", "hr", "hd", "ho", "l", "phi", "hh", "pp", "hi", "hm"], "_": ["x", " the", "ing", "__", "I", "ation", " cpu", "val", " int", " x", " time", " __", "___"], "AB": ["LB", "ab", "RB", "BL", "BS", "OB", "AH", "ib", "AT", "SB", "BN", "L", "AD", "TY", "IB", "ABC", "Ba", "W", "Ab", "AA", "V", "BT", "AI", "QB", "BP", "B", "Q", "BR", "WB", "PB", "BB", "A", "BM", "FB", "AF", "EB", "NB", "AM", "HB", "LAB", "DB", "AC", "BA", "Tab", "UB"], "a": ["aq", "n", "ia", "sta", "ae", "ac", "ab", "aj", "p", "ach", "g", "va", "xa", "ai", "w", "c", "ma", "m", "ami", "el", "eas", "ga", "ant", "o", "ea", "la", "aaa", "pa", "act", "ada", "alpha", "art", "da", "apa", "na", "an", "e", "att", "anta", "A", "at", "sa", "af", "ao", "s", "sha", "app", "au", "oa", "aa", "l", "am", "ar", "ka", "j", "area", "ba", "ca"], "b": ["bis", "n", "sb", "ab", "bar", "p", "db", "beta", "g", "ib", "lb", "r", "bg", "c", "m", "bi", "wb", "pb", "fb", "rb", "o", "mb", "be", "ob", "br", "bc", "gb", "nb", "B", "bb", "v", "e", "bt", "eb", "base", "bl", "cb", "l", "bp", "bin", "u", "j", "y", "bs", "ba"], "ans": ["ANS", "ants", "ats", "names", "ows", "ai", "aus", "ros", "lines", "sn", "ts", "ns", "vals", "ann", "rans", "rs", "anas", "ks", "scan", "ins", "ons", "ms", "flags", "ls", "ens", "ends", "uns", "an", "rors", "oss", "anes", "nz", "nan", "xs", "ran", "aos", "vs", "yes", "cs", "arts", "es", "os", "lan", "errors", "ds", "ones", "vers"], "i": ["mi", "n", "xi", "x", "ia", "p", "di", "ai", "I", "c", "m", "bi", "ic", "ix", "ri", "si", "li", "ii", "v", "e", "int", "ti", "im", "it", "zi", "ini", "l", "pi", "id", "j", "k", "y", "ik", "ij", "iu"], "fl": ["fd", "vel", "con", "lu", "lf", "tl", "kl", "bf", "syn", "ln", "ul", "fol", "flo", "flat", "wt", "z", "fc", "nl", "sl", "flags", "ls", "fr", "f", " Fl", "Fl", "bool", "hl", "vl", "FL", "cond", "vol", "acl", "ff", "ill", "v", "all", "fil", "compl", "flag", "sol", "uf", "co", "bl", "l", "pl", "ll", "cl", "coll", "il", "lic", "que", "fi", "ush", "pol", "flush"], "q": ["aq", "ck", "qv", "pkg", "queue", "resh", "d", "p", "ues", "ue", "g", "iq", "qu", "qt", "ct", "Queue", "r", "w", "c", "ox", "z", "m", " Q", "qi", "query", "xt", "ic", "ms", "f", "quit", "pt", "Q", "out", "v", "e", "sq", "qq", "qa", "msg", "ch", "qual", "it", "dq", "que", "l", "cl", "quote", "u", "ll", "j", "k", "y", "quest", "qs", "ry"], "t": ["tm", "T", "to", "nt", "ta", "p", "lt", "g", "test", "ct", "td", "tc", "tip", "txt", "ts", "c", "ant", "te", "o", "tree", "term", "dt", "tg", "f", "pt", "ot", "tu", "ti", "at", "tr", "st", "tf", "rt", "it", "et", "kt", "l", "ent", "u", "k", "tz", "vt", "y", "mt", "temp"], "tt": ["tm", "ty", "tl", "tv", "qt", "ct", "td", "tc", "txt", "ox", "ts", "wt", "xt", "tim", "gt", "elt", "tx", " tv", "unt", "pt", "ot", "tu", " et", "itt", "att", "tn", "ti", "tr", "st", "rt", "TT", "irt", "yt", "tmp", "ott", "ati", "kt", "tz", "iat", "vt", "text", "ft"]}}
{"code": "import sys\\nfrom functools import lru_cache\\n\\n\\nsys.setrecursionlimit(500000)\\n\\n\\n@lru_cache(maxsize=None)\\ndef rec(n):\\n    if n == 0:\\n        return 0\\n    res = n\\n    i = 1\\n    while i <= n:\\n        res = min(res, rec(n - i) + 1)\\n        i *= 6\\n    i = 9\\n    while i <= n:\\n        res = min(res, rec(n - i) + 1)\\n        i *= 9\\n    return res\\n\\n\\nN = int(input())\\nprint(rec(N))\\n\\n\\n", "target": "460", "substitutes": {"n": ["a", "next", "net", "x", "nt", "ni", "ln", "d", "p", "en", "ne", "cn", "g", "dn", "sn", "r", "c", "w", "m", "z", "ns", "ic", "o", "nl", "h", "ren", "b", "num", "t", "len", "nb", "no", "nor", "mn", "out", "na", "an", "v", "nc", "nm", "s", "nan", "it", "nu", "size", "nn", "l", "ll", "np", "q", "ng", "k", "y", "j"], "res": ["resolution", "con", "resh", "fresh", "ret", "reset", "rep", "rev", "I", "re", "Res", "raw", "r", "zero", "resources", "ref", "rem", "expr", "prefix", "prime", "RES", "ins", "ms", "rec", "result", "tx", "act", "ri", "rel", "vol", "cond", "si", "ress", "cons", "resource", "off", "jiang", "results", "out", "resp", "grid", "exp", "red", "obj", "gr", "rest", "rez", "sol", "zi", "conv", "req", "pres", "rand", "id", "reg", "os", "index", "j", "comp", "ps", "init", "chain"], "i": [" ii", "mi", "ki", "xi", "x", "ia", "a", "ci", "gi", "p", "di", "reset", "ai", "I", "r", "c", "m", "bi", "qi", "info", "ic", "ix", " bi", "ip", " ni", "f", "multi", "t", "io", "si", "li", "ii", "v", "ori", "int", "ti", "ei", "at", "s", "it", "ini", "ui", "zi", "phi", "pi", "l", "u", "j", "index", "y", "ij", "iu", "hi"], "N": ["SN", "CNN", "M", "NS", "NL", "T", "NC", "GN", "NI", "Ns", "R", "I", "L", "NA", "NM", "NN", "NR", "CN", "NT", "NOR", "NH", "O", "V", "TN", "No", "S", "B", "J", "Q", "G", "D", "NB", "Y", "MN", "Ni", "K", "AN", "Z", "NG", "C"]}}
{"code": "A = list(map(int, input().split()))\\n\\nkey = 0\\nfor i,a in enumerate(A):\\n    if a == 0:\\n        key = i+1\\n        break\\nprint(key)\\n", "target": "727", "substitutes": {"A": ["GA", "M", "N", "T", "All", "An", "X", "I", "R", "L", "AL", "H", "AA", "PUT", "V", "WA", "C", "AS", "S", "B", "G", "This", "P", "CA", "AY", "E", "JA", "D", "AM", "Alice", "SA", "AC", "K", "ACT", "BA", "Array", "Z", "AP"], "key": ["keys", "next", "x", "max", "Key", "point", "KEY", "name", "leader", "ai", "ak", "ke", "value", "long", "shift", "position", "start", "zero", "set", "section", "type", "total", "window", "prime", "case", "result", "num", "count", "time", "nb", "important", "e", "int", "list", "ey", "row", "hash", "date", "char", "print", "lock", "counter", "year", "number", "id", "k", "index", "j", "y", "sum"], "i": ["mi", "n", "xi", "x", "ci", "g", "di", "ai", "I", "m", "yi", "ic", "ix", "ip", "ind", "f", "b", "si", "ii", "li", "v", "ori", "int", "ti", "e", "im", "it", "ini", "zi", "pi", "u", "index", "y", "j", "ij", "hi"], "a": ["ia", "sta", "ae", "ta", "p", "ach", "va", "ai", "xa", "ma", "m", "ata", "ea", "pa", "la", "fa", "isa", "b", "f", "art", "wa", "na", "an", "v", "all", "ap", "at", "ao", "sa", "au", "oa", "aa", "am", "ar", "aw", "j", "ba", "ac"]}}
{"code": "#encoding:utf-8\\n\\nab = raw_input().split()\\n\\na = int(ab[0])\\nb = int(ab[1])\\n\\nd = a / b\\nr = a % b\\nf = round(float(a) / float(b), 5)\\n\\nprint d, r, f", "target": "301", "substitutes": {}}
{"code": "n = int(input())\\nA = list(map(int,input().split()))\\nf = 1 \\nc = 0\\n\\nwhile f == 1:\\n    f = 0\\n    for j in range(n-1,0,-1):\\n        if A[j] < A[j-1]:\\n            inc = A[j]\\n            A[j] = A[j-1] \\n            A[j-1] = inc\\n            f = 1\\n            c += 1\\nprint(\" \".join(map(str,A)))\\nprint(c)", "target": "561", "substitutes": {"n": ["N", "x", "nt", "gn", "ln", "p", "name", "names", "ne", "cn", "i", "sn", "m", "z", "ns", "nl", "num", "t", "nia", "nb", "no", "mn", "na", "v", "nc", "nan", "nu", "nw", "size", "nn", "q", "l", "np", "network", "k"], "A": ["a", "GA", "M", "N", "Answer", "T", "All", "Rap", "Al", "An", "IA", "Ar", "Alpha", "Abs", "AT", "X", "Av", "mA", "L", "One", "AL", "AV", "I", "Map", "And", "NA", "AB", "App", "AE", "H", "AA", "LA", "PA", "As", "Ab", "WA", "V", "S", "B", "G", "This", "HA", "P", "AP", "Address", "Input", "CA", "At", "MA", "E", "JA", "AF", "D", "AM", "Y", "Alice", "Java", "SA", "U", "AC", "The", "ACT", "Array", "C"], "f": ["a", "lc", "con", "bf", "aff", "d", "p", "unc", "fm", "g", "i", "acc", "sf", "w", "m", "z", "set", "fc", "fp", "fb", "h", "fa", "fr", "b", "t", "fac", "cond", "count", "off", "conf", "ff", "fl", "out", "v", "e", "af", "conv", "tf", "fee", "l", "fg", "inf", "error", "float", "index", "F", "cf", "frac", "ac"], "c": ["a", "lc", "con", "x", "ci", "d", "p", "unc", "cd", "pc", "g", "ct", "i", "r", "tc", "m", "fc", "col", "h", "cur", "result", "done", "b", "num", "count", "t", "cum", "v", "e", "nc", "cc", "co", "cb", "cu", "l", "u", "cs", "k", "y", "cm", "cr", "cf", "C", "ac"], "j": ["json", "x", "uj", "ja", "err", "js", "aj", "p", "g", "jp", "i", "job", "r", "jc", "z", "m", "jj", "bi", "old", "note", "ix", "ind", "jl", "b", "num", "jac", "br", "sp", "fr", "pt", "J", "bj", "li", "kj", "v", "ji", "key", "exp", "obj", "it", "tr", "jump", "opt", "q", "l", "dj", "item", "k", "y", "jit", "ij"], "inc": ["lc", "con", "ine", "asc", "unc", "jp", "acc", "ext", "INC", "inv", "fc", " Inc", "incre", "dec", "ic", "ins", "rec", "ind", "enc", "fr", "fac", "cond", "alpha", "conf", "add", "out", "exp", "int", "update", "up", "adj", "conv", "cc", "Inc", "new", "gain", "inf", "init", "ac"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\ndef main():\\n    N, A, B = map(int, input().split())\\n    print(['Yes', 'No'] [N + A < B])\\n\\nif __name__ == '__main__':\\n    main()", "target": "618", "substitutes": {}}
{"code": "n ,m= list(map(int,input().split()))\\nkagi = [[]for _ in range(m)] \\n#a\u5186\u3000b\u7a2e\u985e\u958b\u3051\u3089\u308c\u308b\\nfor i in range(m):\\n    a,b =  list(map(int,input().split()))\\n    X =  list(map(int,input().split()))\\n    bit = 0\\n    for x in X:\\n        bit |= 2**(x-1)\\n    kagi[i] = [a,bit]\\n\\nok = 2**n-1#\u5168\u90e8\u7a7a\u3044\u305f\u3089\u3053\u308c\\nkagi.sort(key=lambda x: x[1])\\nzenkai = 2**n\\ndp = [float('inf')]*int(zenkai+1)\\ndp[0] = 0\\nfor i in range(2**n):\\n    if dp[i] == float('inf'):\\n        continue\\n    for j in range(m):\\n        s = i|kagi[j][1]\\n        # print(s)\\n        dp[s] = min(dp[s],dp[i] + kagi[j][0])\\n# print(dp)\\nif dp[zenkai-1] == float('inf'):\\n    print(-1)\\nelse:\\n    print(dp[zenkai-1])", "target": "772", "substitutes": {"n": ["N", "x", "nt", "d", "p", "i", "w", "sn", "c", "z", "ns", "o", "h", "f", "b", "num", "fn", "t", "nb", "mn", "na", "v", "nan", "nn", "l", "q", "j", "y"], "m": ["tm", "mi", "M", "mr", "N", "dm", "d", "p", "mm", "mu", "mo", "g", "i", "r", "c", "man", "bm", "o", "gm", "h", "ms", "f", "b", "num", "t", "mc", "mn", "v", "sm", "l", "k", "j", "cm"], "kagi": ["pati", "kzi", "Kzi", "Kagen", " kati", "pagen", "kati", "pzi", "Kati", " kzi", "pagi", " kagen", "Kagi", "kagen"], "_": [" e", " the", " j", " all", " cpu", " row", " g", " l", " new", " __", "___", " p", " d", " un"]}}
{"code": "a,b=map(int,input().split())\\nif a<=0 and b>=0:\\n  print('Zero')\\nelif a>0:\\n  print('Positive')\\nelif a<0 and b>0:\\n  if abs(a)%2==0:\\n    print('Positive')\\n  else:\\n    print('Negative')\\nelse:\\n  if (b-a)%2==0:\\n    print('Negative')\\n  else:\\n    print('Positive')", "target": "725", "substitutes": {"a": ["aq", "n", "x", "ia", "sta", "ae", "ac", "ab", "aff", "d", "p", "ta", "g", "ai", "i", "\u00e1", "c", "ma", "z", "m", "eas", "ga", "o", "ea", "la", "aaa", "pa", "f", "abs", "isa", "t", "alpha", "da", "apa", "an", "e", "v", "A", "al", "at", "sa", "ao", "ity", "app", "au", "oa", "aa", "l", "am", "ar", "j", "area", "ba", "ca"], "b": ["bis", "body", "n", "sb", "ab", "d", "p", "db", "g", "ib", "i", "bg", "c", "z", "m", "bi", "fb", "rb", "o", "mb", "h", "be", "ob", "f", "br", "bc", "t", "nb", "B", "bb", "v", "e", "it", "eb", "app", "base", "cb", "l", "bp", "bin", "j", "y", "bs", "ba"]}}
{"code": "def main():\\n    A, B, C = map(int, input().split())\\n    if B + C <= A:\\n        print(0)\\n    else:\\n        print((B+C)-A)\\nif __name__ == \"__main__\":\\n    main()", "target": "140", "substitutes": {"A": ["a", "GA", "M", "T", "Al", "An", "IA", "AH", "AU", "R", "I", "Av", "ACC", "AL", "AV", "AB", "AE", "H", "AA", "LA", "As", "V", "AR", "AS", "S", "G", "P", "CA", "At", "E", "AY", "D", "AF", "First", "SA", "AC", "The", "BA", "AN", "Array", "AP"], "B": ["LB", "BI", "CB", "T", "MB", "RB", "VB", "BS", "Bs", "SB", "Big", "L", "IB", "AB", "Reb", "BG", "BER", "V", "BT", "b", "BE", "BC", "BBC", "BU", "Q", "BR", "WB", "G", "GB", "BB", "Bern", "TB", "D", "NB", "BO", "BF", "Y", "DB", "F", "BA", "BY"], "C": ["CNN", "WC", "N", "CH", "CB", "T", "CAR", "CW", "CM", "JC", "LC", "L", "CE", "c", "CI", "CS", "CN", "Cs", "YC", "H", "CV", "CP", "V", "CT", "Ch", "VC", "CCC", "BC", "CD", "EC", "Q", "G", "CO", "DC", "CR", "You", "E", "CA", "CON", "D", "CC", "F", "CF", "FC", "Z"]}}
{"code": "a,b = [int(i) for i in input().split()]\\n\\nprint((1900*b + 100*(a-b)) * 2**b)", "target": "308", "substitutes": {"a": ["n", "x", "ia", "ae", "ab", "aff", "d", "p", "ai", "ak", "r", "w", "c", "ma", "m", "o", "ea", "h", "la", "aaa", "act", "f", "abs", "t", "na", "an", "e", "A", "ap", "at", "sa", "aka", "ena", "au", "oa", "aa", "l", "am", "area", "ca", "ac"], "b": ["bis", "n", "sb", "x", "bf", "ab", "d", "p", "db", "g", "ib", "c", "m", "z", "bi", "wb", "fb", "rb", "h", "be", "ob", "f", "bc", "t", "nb", "B", "bb", "v", "e", "A", "s", "eb", "base", "cb", "l", "j", "y", "bs", "ba", "ac"], "i": ["\u00ed", "ki", "n", "xi", "x", "gi", "p", "di", "ib", "ai", "I", "iter", "c", "bi", "qi", "ic", "ix", "ind", "f", "t", "ri", "si", "iu", "ii", "li", "v", "int", "ti", "oi", "ini", "zi", "q", "l", "pi", "id", "j", "k", "fi", "ij", "iri"]}}
{"code": "s = str(input())\\nif s[0] == 'A' and s[2:len(s)-1].count('C') == 1:\\n    j = s.index('C')\\n    w = s[1:j] + s[j+1:]\\n    if w.lower() == w:\\n        print('AC')\\n    else:\\n        print('WA')\\nelse:\\n    print('WA')", "target": "695", "substitutes": {"s": ["a", "n", "sb", "str", "ats", "js", "p", "ains", "g", "i", "hs", "sql", "c", "ts", "m", "ns", "ies", "rs", "ins", "less", "sl", "h", "ms", "ls", "f", "b", "sp", "abs", "t", "S", "ss", "parts", "its", "tes", "strings", "v", "gs", "sq", "ws", "string", "gets", "ims", "sv", "xs", "st", "sts", "q", "sis", "l", "words", "se", "os", "qs", "ds", "ps", "bs"], "j": ["json", "n", "x", "uj", "ja", "js", "aj", "p", "g", "di", "jp", "i", "job", "oj", "jc", "z", "m", "jj", "ju", "ix", "col", "pr", "ind", "jl", "br", "jac", "sp", "t", "J", "pos", "ji", "kj", "v", "obj", "it", "jump", "q", "l", "dj", "k", "index", "y", "ij", "bs"], "w": ["a", "wx", "n", "sw", "x", "d", "p", "wh", "we", "wt", "c", "z", "m", "wb", "wr", "window", "iw", "rw", "wi", "W", "wd", "kw", "wo", "h", "o", "wal", "ew", "word", "b", "f", "wl", "wid", "t", "win", "wa", "fw", "v", "e", "wig", "ws", "hw", "wm", "nw", "wk", "l", "aw", "u", "y", "ow"]}}
{"code": "K=int(input())\\nodd, even = (K+1)//2,K//2\\nprint(odd*even)", "target": "402", "substitutes": {"K": ["M", "N", "Int", "T", "KN", "KY", "KR", "MK", "GO", "Power", "KK", "Kind", "DK", "H", "FK", "DH", "CP", "Ch", "KS", "O", "TH", "V", "KC", "PK", "Kent", "S", "B", "J", "SK", "Q", "G", "P", "Ka", "HK", "Mask", "VK", "D", "NB", "Keep", "OK", "UK", "k", "KI", "Z", "KB", "C"], "odd": [" odds", "always", " Odd", "ld", "d", "own", "unk", "down", "diff", "od", "ant", "Even", "oint", "ind", "right", "ow", "rent", "ord", "night", "ded", "important", "rod", "row", "easy", "owner", "und", "division", "oct", "dx", "other", "adder", "three", "roll", "dd", "good", "neutral", "k", "nd", "draw", "opp"], "even": ["den", "pair", "correct", "sign", "vert", "lead", "ven", "day", "own", "regular", "inc", "zero", "position", "down", "diff", "floor", "plex", "only", "Even", "change", "dom", "second", "two", "ind", "main", "right", "part", "close", "character", "forth", "ded", "both", "wrong", "all", "ten", "up", "inter", "end", "four", "per", "other", "pl", "month", "rd"]}}
{"code": "n=int(input()) \\nc=list(map(int, input().split())) \\nans = 0\\n \\nif n == 1:\\n    print('Yes')\\n    exit()\\nif n == 2:\\n    if c[0] > c[1] + 1:\\n        print('No')\\n        exit()\\nif n >= 3:\\n    for i in range(n-1):\\n        if c[i] > c[i+1] +1:\\n            print('No')\\n            exit()\\n        if c[i] == c[i+1] +1:\\n            ans = max(ans,c[i])\\n            if c[i+1] + 1 < ans:\\n                print('No')\\n                exit()\\n\\n\\nprint('Yes')", "target": "230", "substitutes": {"n": ["a", "N", "x", "net", "nt", "ni", "gn", "ln", "d", "p", "on", "name", "norm", "ne", "cn", "g", "names", "sn", "m", "z", "ns", "o", "nl", "h", "f", "b", "num", "t", "nia", "len", "nb", "no", "nor", "na", "v", "an", "nc", "all", "un", "s", "nan", "none", "nu", "nw", "q", "l", "nn", "np", "j"], "c": ["ce", "lc", "con", "ci", "gc", "p", "unc", "cd", "pc", "g", "xc", "ct", "rc", "arc", "tc", "chain", "cod", "m", "fc", "ctx", "ic", "cur", "cv", "enc", "b", "vc", "bc", "mc", "dc", "anc", "conf", "e", "nc", "list", "cache", "cos", "cp", "ch", "csv", "cc", "com", "co", "cu", "cb", "l", "etc", "cl", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "ans": ["ars", "ANS", "ants", "ats", "ians", "names", "outs", "ai", "aus", "nets", "us", "ts", "ates", "ns", "ann", "rans", "rs", "man", "anas", "ks", "offs", "ins", "ras", "vers", "ons", "ms", "amps", "ls", "ents", "ens", "ps", "uns", "ings", "can", "an", "anks", "aps", "oss", "un", "s", "xs", "ions", "nas", "aos", "vs", "arts", "cs", "os", "ds", "ones", "orts", "said"], "i": ["a", "mi", "ki", "xi", "x", "ia", "uri", "ni", "me", "ci", "gi", "cli", "p", "on", "di", "ai", "I", "m", "bi", "ami", "info", "qi", "ic", "ix", "ip", "iri", "ind", "b", "ri", "si", "li", "ii", "ji", "ei", "ori", "v", "ti", "im", "it", "ini", "ui", "zi", "\u0438", "q", "l", "pi", "phi", "id", "j", "y", "index", "ij", "iu", "hi"]}}
{"code": "def solve():\\n    S = input()\\n    if S[0] != 'A':\\n        return 'WA'\\n    cnt = 0\\n    for i in range(2, len(S)-1):\\n        if S[i] == 'C':\\n            cnt += 1\\n            C = i\\n    if cnt != 1:\\n        return 'WA'\\n    T = S[:C] + S[C+1:]\\n    Tset = set(list(T[1:]))\\n    sletter = set(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\\n    if sletter.union(Tset) != sletter:\\n        return 'WA'\\n    return 'AC'\\n\\n\\ndef main():\\n    ans = solve()\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "695", "substitutes": {"S": ["Sl", "M", "N", "NRS", "NS", "SF", "SH", "Series", "BS", "SS", "Abs", "SL", "SB", "R", "X", "I", "L", "SER", "JS", "Si", "RS", "PS", "TS", "CS", "SI", "SAN", "Spe", "Set", "SM", "H", "W", "V", "ASC", "SAM", "INS", "B", "Q", "G", "Sing", "P", "A", "E", "s", "SU", "ST", "D", "DS", "Y", "SA", "U", "SR", "LS", "Z"], "cnt": ["cnd", "CNT", "tct", "cNT", "tCount", "cnc", "cct", "lcNT", "tnd", " cCount", "lcctr", "cCount", "lcnt", "CCount", " cctr", "tctr", "tnt", "Cnc", " cNT", " cct", " cnc", "Cct", "tnc", "Cnd", "cctr", "Cnt", "lcnc", " cnd", "lcct"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "p", "di", "I", "c", "m", "z", "bi", "ic", "ix", "col", "ip", "ind", "b", "t", "si", "li", "ii", "int", "ti", "im", "s", "it", "zi", "ini", "l", "pi", "id", "j", "index", "y", "ij", "k"], "C": ["WC", "M", "N", "CB", "Ct", "IC", "CM", "JC", "CG", "Cod", "R", "I", "X", "L", "c", "CI", "CS", "Col", "W", "H", "O", "V", "CT", "CP", "CCC", "B", "G", "P", "A", "E", "D", "CC", "Y", "Count", "U", "K", "F", "Z"], "T": ["WT", "M", "N", "TW", "TX", "R", "L", "TS", "VT", "TC", "TG", "TL", "TED", "W", "V", "TH", "Z", "TV", "t", "LT", "B", "J", "Q", "G", "P", "E", "TT", "D", "TA", "XT", "TM", "Y", "Trans", "GT", "F", "Time", "TN", "Tab"], "Tset": ["TTSET", "TTsets", "TSet", "Smatch", "Tlist", "Msets", "PSet", "Mset", "Mlist", "Sset", "Blist", "GSet", "Bset", "TSET", "Pmatch", "TTset", "BSET", "Glist", "Bsets", "Plist", "SSet", "MSET", "Pset", "TTlist", "Gset", "Tmatch", "Slist", "Gmatch", "Tsets"], "sletter": ["sLetter", "Sprint", "SLetter", " sLetter", " spart", " sletters", "tsletter", " sprint", " sword", "Sword", "tsLetter", "sword", "Spart", "sletters", "tsletters", "sprint", "spart", "tsprint", "Sletters", "Sletter"], "ans": ["ars", "ANS", "ants", "ats", "ians", "beans", "eds", "aus", "ros", "aned", " Ans", "mails", "ann", "ums", "rans", "anas", "ses", "mens", "ons", "amps", "annot", "ens", "ations", "anc", "uns", " sans", "an", "rors", "iann", "anks", "anes", "idents", "ran", "ands", "aos", "roots", "ams", "acers", "ads", "asms", "AN"]}}
{"code": "from math import pi\\nn=int(input())\\nprint(2*n*pi)", "target": "552", "substitutes": {"n": ["a", "nr", "N", "x", "nt", "ln", "d", "p", "name", "g", "i", "sn", "r", "c", "w", "m", "ns", "ic", "o", "nl", "h", "num", "t", "len", "nb", "mn", "na", "v", "nc", "nu", "nn", "l", "pi", "number", " N", "j", "k"]}}
{"code": "k, n = map(int, input().split())\\n\\na = list(map(int, input().split()))\\n\\nans = []\\n\\ndiss = []\\nsuma = 0\\n\\nfor i in range(len(a)-1):\\n    dis = a[i+1] - a[i]\\n    diss.append(dis)\\n\\n\\ndiss.append(k-a[-1]+a[0])\\ndiss.pop(diss.index(max(diss)))\\nprint(sum(diss))\\n", "target": "33", "substitutes": {"k": ["ck", "km", "kn", "kr", "kh", "kl", "ijk", "p", "ke", "r", "c", "m", "ks", "kw", "h", "ko", "kind", "f", "tk", "kok", "t", "kj", "ok", "kick", "ikk", "ku", "q", "kk", "sk", "ka", "K", "ik", "j", "kg", "mk"], "n": ["nr", "N", "nt", "ni", "d", "p", "sn", "r", "c", "w", "m", "ns", "nl", "h", "num", "t", "nb", "mn", "na", "v", "nc", "nm", "nu", "nn", "l", "q", "np", "j"], "a": ["history", "x", "ia", "sta", "ae", "ab", "era", "d", "p", "g", "va", "c", "ma", "m", "ata", "eas", "ga", "ea", "h", "aaa", "pa", "la", "abs", "b", "f", "t", "da", "apa", "na", "an", "att", "all", "A", "at", "sa", "s", "aka", "ao", "app", "au", "oa", "aos", "aa", "l", "am", "area", "ack", "ba", "ac"], "ans": ["den", "outs", "aus", "us", "sn", "sys", "ns", "ann", "cor", "scan", "ins", "ski", "ons", "chan", "ens", "uns", "esa", "an", "oss", "des", "nos", "pres", "aos", "sd", "cs", "es", "os"], "diss": ["doisc", "daoss", "dISS", "mditzerland", "Dis", "sdiss", " disp", "doiss", "sdisse", "disp", " disse", " dISS", "deiss", "pdisse", "DISS", "disse", "dais", "fdISS", "deisc", "dass", "Diss", "sdisp", "daass", "fdass", "mdass", "deitzerland", "fdiss", "Disc", "daisse", " dass", " doss", "doass", "fdis", "mdisc", "daiss", "sdass", " disc", "disc", "deass", "mdiss", "pdass", "daisp", "pdiss", "daitzerland", "ditzerland", "daISS", "pdisc", "fdisc", "doisp", "Disse", "doss", "daisc", "Disp", "fdisse", "sdisc", "sdISS", "sdoss"], "suma": ["daved", "duma", "psuma", "saved", "psaved", "psigma", "sigma", "digma", " sigma", " samin", "psamin", "damin", "samin", " saved"], "i": ["mi", "ki", "xi", "x", "uri", "ci", "gi", "di", "ai", "I", "c", "bi", "info", "ic", "ski", "ix", "ip", "ind", "b", "num", "multi", "ri", "io", "si", "li", "key", "ji", "v", "ii", "int", "ti", "im", "it", "zi", "ini", "\u0438", "phi", "pi", "id", "ij", "hi"], "dis": ["mi", "mor", "Dis", " Dis", "err", "di", "re", "san", "sys", "ly", "dl", "diff", "DIS", "el", "dev", "cor", "scan", "nl", "ez", "mis", "rel", "cond", "no", "dist", "ris", "non", "disc", "de", "det", "un", "des", "none", "com", "tar", "sd", "mat", "phys"]}}
{"code": "n, a, b = map(int, input().split())\\ntime = n * a\\nif time < b:\\n    print(time)\\nelse:\\n    print(b)", "target": "751", "substitutes": {"n": ["nr", "N", "x", "nt", "d", "p", "ne", "cn", "i", "sn", "c", "m", "z", "ns", "o", "h", "f", "num", "t", "nb", "na", "v", "an", "nc", "s", "nan", "nu", "size", "nn", "l", "k", "j"], "a": ["x", "ia", "ae", "ac", "ab", "aff", "ta", "p", "d", "ai", "i", "w", "c", "ma", "m", "ata", "o", "eff", "aaa", "f", "t", "part", "alpha", "an", "A", "al", "at", "sa", "s", "au", "aa", "l", "am", "ar", "y", "area", "ba"], "b": ["bis", "sb", "ab", "d", "p", "db", "g", "i", "value", "long", "r", "length", "c", "m", "z", "bi", "buffer", "fb", "bo", "mb", "be", "f", "duration", "bc", "t", "br", "nb", "B", "bb", "v", "e", "s", "eb", "base", "cb", "bes", "l", "number", "bin", "j", "y", "bs", "ba", "back"], "time": ["name", "clock", "test", "timer", "value", "etime", "r", "tc", "start", "length", "ts", "age", "m", "z", "type", "total", "tim", "message", "window", "step", "second", "runtime", "distance", "duration", "t", "frequency", "v", "delay", "inter", "tt", "now", "date", "times", "s", "ime", "timeout", "data", "mt", "Time", "rate", "sequence", "temp", "version", "TIME"]}}
{"code": "from bisect import bisect_left, bisect_right\\nfrom decimal import Decimal\\nfrom scipy.special import comb\\nn, a, b = map(int, input().split())\\nv = list(map(lambda x:-int(x), input().split()))\\nv.sort()\\nli = [[None]*2 for _ in range(n+1)]\\nfor k in range(a, b+1):\\n    li[k][0] = -sum(v[:k])\\n    li[k][1] = comb(bisect_right(v, v[k-1])-bisect_left(v, v[k-1]), k-bisect_left(v, v[k-1]), exact=True)\\nans = [Decimal(0), 0]\\nfor i in range(n+1):\\n    if li[i][0] is None:\\n        continue\\n    tmp = Decimal(li[i][0]) / Decimal(i)\\n    if ans[0]==tmp:\\n        ans[1] += li[i][1]\\n    elif ans[0]<tmp:\\n        ans[0] = tmp\\n        ans[1] = li[i][1]\\nprint(ans[0])\\nprint(ans[1])", "target": "345", "substitutes": {"n": ["N", "x", "nt", "gn", "d", "p", "ln", "ne", "g", "cn", "sn", "r", "c", "m", "ns", "note", "o", "nl", "h", "num", "t", "nb", "mn", "na", "yn", "an", "nc", "s", "nan", "nu", "nn", "l", " fn", " N", "network", "j"], "a": ["x", "ae", "ac", "ab", "ta", "p", "d", "ai", "ak", "r", "c", "m", "o", "ea", "pa", "aaa", "t", "da", "apa", "na", "an", "A", "at", "sa", "s", "oa", "aa", "l", "am", "ar", "y", "ba", "ao"], "b": ["sb", "x", "ab", "d", "p", "db", "ib", "r", "c", "z", "m", "bi", "rb", "by", "o", "be", "br", "bc", "t", "gb", "nb", "B", "bb", "eb", "cb", "l", "j", "y", "bs", "ba"], "v": ["qv", "x", "vd", "vv", "vert", "p", "mu", "vi", "vp", "vo", "tv", "va", "rev", "qu", "value", "w", "uv", "c", "m", "z", "vals", "inv", "ev", "o", "values", "h", "val", "V", "cv", "vr", "f", "vc", "t", "vol", "iv", "ver", "av", "nv", "lv", "s", "sv", "conv", "ve", "q", "vs", "l", "ov", "u", "vt", "j"], "li": ["mi", "ki", "lu", "lc", "lig", "ni", "lim", "ci", "cli", "ln", "pal", "lib", "ul", "di", "ai", "ml", " Li", "dl", "bi", "nl", "sl", "la", "ls", "multi", "lis", "lists", "si", "lo", "lie", "lp", "ii", "Li", "LI", "list", "ti", "lv", "sol", "ini", "zi", "ui", "l", "pl", "pi", "le", "line", "lic", "link", "lex", "lan", "pins"], "_": ["x", " val", " y", " an", "ox", " all", " num", "ix", "val", " x", " l", "key", " c", " m", " p", "ik", " un", "ay"], "k": ["ck", "km", "kn", "uk", "ek", "x", "kr", "kh", "kl", "ijk", "kin", "p", "spec", "g", "kar", "ak", "ke", "kid", "r", "w", "c", "z", "m", "dk", "ks", "kw", "ko", "kind", "tk", "kok", "gh", "key", "kj", "ok", "ku", "kat", "wk", "q", "l", "kt", "u", "kk", "id", "sk", "ka", "kan", "ik", "K", "j", "mk", "unk"], "ans": ["ars", "ANS", "ants", "ats", "ians", "beans", "actions", "ana", "names", "ais", " means", "eds", "outs", "ai", "aus", "us", "aned", "ns", "vals", "ann", "ums", "rs", "mas", "anas", " spans", "ks", "ins", "nl", "ras", "offs", "ons", "ms", "angs", "amps", "ls", "pan", "rans", "ents", "ens", "news", "lis", "uns", "an", "posts", "iann", "aps", "anes", "aces", "oss", "terms", "s", "plan", "xs", "uls", "co", "atts", "ams", "aos", "ands", "roots", "vs", "aints", "ads", "arts", "ags", "os", "eas", "lan", "ds", "orts"], "i": ["mi", "ki", "xi", "x", "ia", "ci", "gi", "cli", "d", "p", "di", "ai", "I", "r", "c", "m", "batch", "info", "ic", "ix", "o", "ip", "f", "ri", "t", "io", "si", "ii", "ji", "e", "int", "ti", "ei", "s", "im", "it", "ini", "zi", "ui", "l", "pi", "phi", "u", "id", "j", "y", "ik", "ij", "index", "iu", "init"], "tmp": ["tm", "ht", "pkg", "cmp", "max", "to", "perm", "nt", "p", "mm", "mp", "cop", "test", "jp", "td", "yet", "txt", "ppo", "diff", "mut", "unit", "prefix", "ctx", "prime", "gt", "pac", "tp", "cur", "elt", "term", "sp", "t", "trap", "out", "dust", "qq", "Temp", "MP", "emp", "adj", "obj", "cp", "tt", "mk", "xy", "tf", "rt", "new", "cb", "np", "etc", "vt", "attr", "temp"]}}
{"code": "import sys\\nfrom collections import deque\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nn = int(readline())\\nlst1 = list(map(int,readline().split()))\\nans = []\\nif abs(max(lst1)) > abs(min(lst1)):\\n    a = lst1.index(max(lst1)) + 1\\n    for i in range(n):\\n        ans.append([a,i+1])\\n    for i in range(n-1):\\n        ans.append([i+1,i+2])\\nelse:\\n    a = lst1.index(min(lst1)) + 1\\n    for i in range(n):\\n        ans.append([a,i+1])\\n    for i in range(n-1,0,-1):\\n        ans.append([i+1,i])\\nprint(len(ans))\\nfor i,j in ans:\\n    print(i,j)\\n", "target": "412", "substitutes": {"read": ["rid", "open", "find", "hold", "load", "str", "select", "ld", "en", "write", "run", "get", "readable", " write", "r", "map", "pe", "buffer", "reads", "sync", "df", "ead", " Read", "parse", "feed", "check", "ad", "pop", "stream", "each", "Read", "first", "print", "READ", "then", "q", "reader", "reading", "se", "rax", "md", "seek", " reader", "text", "nd", " reads", "rd"], "readline": [" readLINE", "readno", " readno", "loadrow", "Readstring", " readfile", " readrow", "getline", "Readlines", "readerlines", "getstring", "getlin", "readrow", "getlines", "readfile", "loadfile", "readerno", "Readfile", "loadlines", "readerline", " readlin", "readstring", "readlin", "Readrow", "Readline", "loadstring", "loadLINE", "loadlin", " readstring", "readLINE", "readerLINE", "loadline", "loadno"], "readlines": [" readlists", "printbytes", "readerlines", "printvalues", " readcodes", "parselists", "readercodes", " readbytes", "readlists", "loadlists", "loadlines", " readvalues", "readerline", "printlines", "readvalues", "parsebytes", "readerlists", "printlists", "parsevalues", "parselines", "readcodes", "readbytes", "loadcodes", "loadline"], "n": ["nr", "N", "net", "nt", "gn", "ln", "p", "en", "names", "name", "ne", "cn", "g", "dn", "long", "sn", "r", "c", "m", "z", "ns", "total", "o", "nl", "ren", "num", "fn", "count", "t", "nia", "len", "nb", "no", "mn", "out", "na", "an", "v", "int", "nc", "s", "nan", "nu", "size", "nn", "l", "number", "np", "ll", "network", "index", "y"], "lst1": ["lbl6", "lndn", "list1", "lsty0", "lstob", "islst2", " lst2", "lstr0", "lnd0", " lbl0", "lcl3", "list3", "lst6", "islsty1", "lnd2", "lsty1", "llstr1", " lbl3", "llst3", "list0", "lnd1", " lstr2", "lsting", "islst1", "lnding", " lstr1", "islsty2", "lstr1", "lstyn", "lost0", "lnd3", "lest01", "lstn", "flstn", "lblob", "lst2", "llstr3", "flst1", "lsst3", "lost1", "lscl3", "lsty3", "lld0", "lest2", "lstream30", "lstyob", "flostn", "lscl1", "lst30", "llst1", "flost1", " lstr3", "lst3", "lcl1", "lld1", " lst3", "lstream6", "lbl30", "lst01", "lsty01", "lscl6", " lbl1", "list2", "lsst30", "lstr3", "llstob", "llstr0", "islst01", "lstream3", "lbl3", "flosting", "lstying", "lest1", "lbl0", "lstr2", "lcl6", "lbl2", "lsty2", "lstrob", "lld2", "llstrob", "lsst1", "flst0", "lbl1", " lbl2", "lst0", "lcl30", "lscl30", "lsst6", " lst0", "lostn", "losting", " lstr0", "list01", "islsty01", "flsting", "llst0", "lstream1", "flost0"], "ans": ["arms", "ars", "ANS", "ants", "ats", "ians", "beans", "anon", "eds", "outs", "urs", "helps", "aus", "ros", "nets", "lines", "aned", " Ans", "ates", "ns", "vals", "ann", "ums", "rans", "rs", "anas", "leans", "offs", "ins", "ks", "ras", "vers", "ons", "ms", "angs", "amps", "anned", "ls", "ents", "ens", "ations", "akens", "cons", "uns", "ados", "an", "anks", "anes", "works", "s", "nan", "xs", "nas", "ams", "aos", "atts", "ands", "acers", "yes", "aints", "ran", "ads", "there", "arts", "asms", "ds", "said"], "a": ["sta", "to", "ac", "ab", "aj", "ta", "g", "va", "xa", "ai", "ma", "z", "set", "ga", "aux", "o", "ea", "pa", "aaa", "la", "h", "fa", "f", "b", "t", "alpha", "da", "wa", "apa", "eu", "add", "an", "A", "at", "sa", "ao", "ha", "qa", "oa", "au", "aa", "am", "ka", "index", "area", "ba", "ca"], "i": ["mi", "ki", "xi", "x", "ia", "ie", "ci", "gi", "cli", "p", "name", "g", "di", "ai", "I", "c", "z", "m", "bi", "ami", "qi", "yi", "ic", "ix", "o", "ip", "ind", "f", "multi", "t", "ri", "io", "si", "li", "ii", "ji", "ei", "v", "int", "ti", "e", "iy", "im", "it", "zi", "ini", "ui", "ed", "q", "phi", "pi", "l", "u", "id", "index", "y", "ij", "ik", "iu", "hi"], "j": ["json", "uj", "ja", "js", "aj", "d", "name", "g", "di", "jp", "job", "jc", "oj", "z", "jj", "jl", "br", "je", "jac", "b", "J", "bj", "key", "ji", "kj", "jas", "v", "it", "jump", "q", "l", "dj", "y", "k", "ij"]}}
{"code": "a, b, c, d = open(0).read().split()\\nprint(1 if a != c else 0)\\n", "target": "571", "substitutes": {"a": ["n", "x", "ab", "aj", "p", "ta", "ai", "i", "r", "ma", "z", "m", "o", "ea", "la", "f", "t", "alpha", "da", "an", "e", "v", "A", "al", "at", "sa", "af", "au", "oa", "aa", "j", "area", "ba", "ca", "ao"], "b": ["bf", "ab", "p", "db", "beta", "g", "ib", "r", "bg", "m", "bi", "fb", "rb", "h", "f", "bc", "nb", "B", "bb", "v", "bt", "eb", "cb", "l", "y", "bs", "ba"], "c": ["ec", "ce", "lc", "n", "x", "p", "cd", "g", "ct", "rc", "r", "m", "z", "fc", "f", "bc", "t", "dc", "e", "v", "cp", "s", "cc", "abc", "cb", "l", "cs", "k", "cr", "cf", "ca", "C", "ac"], "d": ["n", "p", "g", "i", "r", "z", "m", "o", "h", "dt", "f", "df", "t", "dc", "da", "dr", "de", "e", "v", "D", "dq", "q", "l", "dd", "j", "dict", "ds"]}}
{"code": "x = 1\\ny = 1\\nwhile x < 10:\\n    while y < 10:\\n        print('{}x{}={}'.format(x, y, x*y))\\n        y += 1\\n    x += 1\\n    y = 1", "target": "789", "substitutes": {"x": ["a", "wx", "n", "xi", "ex", "ty", "xe", "d", "xc", "left", "xa", "X", "i", "rx", "image", "w", "r", "ox", "z", "m", "my", "xt", "xxx", "ix", "tx", "ax", "f", "xd", "v", "fx", " xx", "width", "height", "xy", "xs", "xb", "dx", "inx", "size", "one", "xx", "l", "lat", "yx", "px", "xp", "xf"], "y": ["top", "sy", "a", "n", "ty", "yd", "yer", "d", "p", "cy", "i", "oy", "sys", "c", "z", "ly", "m", "my", "ny", "yi", "vy", "by", "o", "py", "ye", "col", "yr", "sky", "axy", "b", "dy", "t", "uy", "key", "v", "yn", "ey", "gy", "height", "iy", "xy", "ch", "ry", "ish", "yt", "Y", "yy", "year", "pi", "fy", "j", "ya", "ay", "ym"]}}
{"code": "from sys import exit\\nimport math\\nimport collections\\nii = lambda : int(input())\\nmi = lambda : map(int,input().split())\\nli = lambda : list(map(int,input().split()))\\n\\ns = input()\\n\\ncnt = 0\\nfor i in range(len(s)//2):\\n    if s[i] != s[-1-i]:\\n        cnt += 1\\nprint(cnt)", "target": "387", "substitutes": {"ii": [" iii", "iii", " pi", " fi", "ia", " Ai", "II", "ci", " im", "di", "ib", "ai", " si", " di", "qi", "ix", " ie", " ni", "\u012b", " iv", "si", "ei", "ti", " vi", " iso", "zi", "aa", "pi"], "mi": ["ia", "pm", "mid", "ci", "gi", "mo", "mm", "mu", "ib", "ma", "m", "imm", "my", "umi", "yi", "mas", "wi", "ms", "mc", "si", "ti", "im", "mx", "ini", "pi", "hi"], "li": ["xi", "lu", "ni", "ci", "ln", "ld", "di", "ly", "el", "la", "ls", "jl", "lis", "lo", "lv", "ini", "bl", "l", "pl", "il", "le", "fi", "lin", "hi", "isl"], "s": ["a", "bis", "n", "sb", "ys", "str", "ats", "js", "p", "g", "sf", "w", "hs", "sys", "c", "ts", "erences", "south", "ns", "ies", "m", "rs", "ins", "less", "sl", "h", "ms", "ls", "b", "sp", "t", "S", "ss", "si", "parts", "its", "tes", "sc", "bits", "v", "strings", "sq", "gs", "aces", "ws", "aps", "sm", "ares", "sa", "ists", "sv", "so", "ments", "xs", "sts", "l", "sis", "u", "cs", "os", "es", "ences", "ds"], "cnt": ["cnd", "CNT", "rnt", "Cpt", "cNT", "cct", "cnc", "ccount", "crnc", "crpt", "nNT", "nnt", "Cnc", " cNT", " ccount", "connd", " cct", "conpt", " cnc", "cpt", "crNT", "crnt", "ncount", "rNT", "concount", "Cnt", " cpt", "nct", "rpt", "connt", "rct", " cnd", "nnd", "npt"], "i": ["ki", "n", "xi", "x", "ogi", "ni", "ci", "gi", "cli", "p", "di", "ai", "I", "c", "m", "z", "bi", "ami", "ico", "yi", "qi", "ic", "ix", "ip", "ind", "f", "si", "iu", "key", "ji", "v", "ori", "ei", "ti", "im", "it", "zi", "ini", "ui", "\u0438", "q", "phi", "pi", "id", "j", "y", "index", "ij", "iri", "hi"]}}
{"code": "import sys\\nimport math\\n\\n#https://atcoder.jp/contests/agc008/submissions/15248942\\nsys.setrecursionlimit(10 ** 8)\\nini = lambda: int(sys.stdin.readline())\\ninm = lambda: map(int, sys.stdin.readline().split())\\ninl = lambda: list(inm())\\nins = lambda: sys.stdin.readline().rstrip()\\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\\n\\nA,B = inm()\\n\\nif A <= 8 and B <= 8:\\n    print(\"Yay!\")\\nelse:\\n    print(\":(\")", "target": "322", "substitutes": {}}
{"code": "n = int(input())\\na = [int(i) for i in input().split()]\\nprint(sum(ai % 2 == 1 for ai in a[::2]))", "target": "126", "substitutes": {"n": ["N", "ni", "nt", "d", "p", "w", "sn", "c", "m", "z", "ns", "total", "o", "h", "f", "b", "num", "t", "nb", "mn", "na", "nc", "nm", "nu", "nn", "q", "l", "j", "k"], "a": ["x", "ia", "sta", "ae", "ab", "ta", "p", "ana", "ais", "va", "xa", "c", "ma", "ga", "ea", "pa", "la", "fa", "b", "t", "apa", "an", "A", "ap", "al", "at", "sa", "s", "au", "oa", "aa", "aw", "area", "ba", "ca", "ao"], "i": ["mi", "ki", "\u00ed", "xi", "x", "ia", "gu", "ci", "di", "I", "bi", "qi", "yi", "ic", "ip", "f", "ri", "t", "si", "iu", "ii", "li", "ei", "ti", "oi", "im", "ini", "zi", "l", "ati", "pi", "id", "j", "ij", "iri", "hi"], "ai": ["mi", " ii", "ki", "ia", "ae", "ci", "gi", "ta", "ais", "di", "xa", "bi", " di", "ca", "yi", "pai", "pa", " bi", "fa", "AI", "aki", "ua", "ii", "li", "ei", "ti", "sa", "zi", "ini", "au", "aa", "ati", "ali", "aii", "ay", "ao"]}}
{"code": "try: n,a,b=[int(input()) for _ in range(3)];print(a+b)\\nexcept: print('Hello World')", "target": "691", "substitutes": {"n": ["N", "x", "d", "p", "ne", "g", "i", "r", "c", "m", "z", "ns", "o", "h", "f", "num", "t", "nb", "na", "v", "s", "nw", "nn", "l", "q", "j", "y", "k"], "a": ["ia", "sta", "ae", "ab", "aff", "ta", "aj", "d", "p", "va", "ai", "i", "r", "\u00e1", "c", "ma", "m", "el", "ea", "la", "act", "t", "alpha", "da", "na", "an", "A", "al", "at", "sa", "ao", "au", "aa", "l", "am", "ba", "ac"], "b": ["bis", "sb", "ab", "d", "p", "db", "g", "ib", "i", "r", "c", "m", "bi", "fb", "rb", "o", "be", "f", "bc", "t", "nb", "B", "bb", "v", "e", "an", "s", "eb", "cb", "l", "j", "y", "bs", "ba"], "_": [" e", " the", " ind", " j", " g", "val", "ind", " f", " l", " c", " m", "un", " p", " some", " un"]}}
{"code": "import sys\\nfrom io import StringIO\\nimport unittest\\n\\n\\ndef resolve():\\n    n = int(input())\\n    b = list(map(int, input().split()))\\n\\n    a = [0 for _ in range(n)]\\n\\n    for i in range(n - 1, -1, -1):\\n        if i == n - 1:\\n            a[i] = b[i - 1]\\n        elif i == 0:\\n            a[i] = b[0]\\n        else:\\n            a[i] = min(b[i], b[i - 1])\\n    print(sum(a))\\n\\nclass TestClass(unittest.TestCase):\\n    def assertIO(self, input, output):\\n        stdout, stdin = sys.stdout, sys.stdin\\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\\n        resolve()\\n        sys.stdout.seek(0)\\n        out = sys.stdout.read()[:-1]\\n        sys.stdout, sys.stdin = stdout, stdin\\n        self.assertEqual(out, output)\\n\\n    def test_\u5165\u529b\u4f8b_1(self):\\n        input = \"\"\"3\\n2 5\"\"\"\\n        output = \"\"\"9\"\"\"\\n        self.assertIO(input, output)\\n\\n    def test_\u5165\u529b\u4f8b_2(self):\\n        input = \"\"\"2\\n3\"\"\"\\n        output = \"\"\"6\"\"\"\\n        self.assertIO(input, output)\\n\\n    def test_\u5165\u529b\u4f8b_3(self):\\n        input = \"\"\"6\\n0 153 10 10 23\"\"\"\\n        output = \"\"\"53\"\"\"\\n        self.assertIO(input, output)\\n\\n\\nif __name__ == \"__main__\":\\n    # unittest.main()\\n    resolve()\\n", "target": "768", "substitutes": {"n": ["N", "net", "x", "nt", "d", "p", "ne", "cn", "g", "sn", "r", "c", "m", "ns", "o", "nl", "h", "num", "t", "len", "nb", "no", "na", "v", "an", "nc", "nan", "nu", "nn", "ll", "l", "np", "u", "network", "j"], "b": ["bis", "sb", "ab", "bar", "emb", "p", "db", "g", "ib", "r", "bg", "c", "bi", "wb", "fb", "rb", "bo", "mb", "be", "ob", "br", "bas", "bc", "gb", "nb", "B", "bb", "v", "eb", "app", "base", "cb", "bl", "l", "bp", "bin", "y", "binary", "bs", "ba"], "a": ["x", "sta", "ae", "ab", "p", "g", "ai", "r", "c", "ma", "m", "ata", "ga", "power", "o", "eff", "ea", "la", "aaa", "fa", "abs", "you", "t", "alpha", "da", "na", "an", "att", "all", "A", "ap", "sa", "s", "ao", "app", "au", "oa", "div", "aa", "am", "u", "array", "area", "ba", "ca", "ac"], "_": ["N", "ex", "nt", " t", " j", "g", "mult", "I", "ix", " g", " int", "t", " x", " m", "int", " __", "nan", " un"], "i": ["mi", "ki", "xi", "x", "ni", "me", "ci", "gi", "p", "di", "ai", "I", "c", "m", "ami", "bi", "info", "ic", "ix", "ski", "ip", "o", "f", "multi", "t", "io", "si", "iu", "li", "ii", "ji", "ori", "e", "int", "ti", "oi", "key", "v", "im", "it", "iso", "s", "zi", "ini", "ui", "phi", "pi", "ati", "l", "u", "id", "j", "y", "index", "ij", "iri", "hi"], "self": ["cmp", "instance", "owl", "err", "context", "p", "r", "res", "config", "close", "disk", "exp", "e", "obj", "wrapper", "app", "new", "q", "np", "se", "pkg", "sw", "me", "local", "test", "this", "full", "my", "parent", "shape", "py", "bind", "dump", "results", "also", "handle", "tmp", "cl", "user", "error", "python", "load", "spec", "subject", "xml", "h", "internal", "inner", "resp", "github", "Error", "ssl", "Self", "th", "sub", "ml", "func", "rec", "sp", "rel", "env", "node", "Test"], "input": ["x", "instance", "context", "p", "image", "c", "set", "batch", "total", "format", "ix", "kind", "config", "empty", "hidden", "unknown", "Input", "string", "it", "q", "id", "data", "text", "init", "request", "history", "before", "uri", "local", "point", "get", "this", "iter", "position", "unit", "read", "prefix", "parent", "accept", "step", "url", "filter", "stream", "interface", "print", " Input", "error", "join", "source", "field", "start", "load", "str", "expression", "active", "spec", "shift", "raw", "ref", "subject", "query", "xml", "ip", "host", "result", "internal", "term", "form", "initial", "inner", "feed", "add", "height", "partial", "csv", "sample", "index", "op", "target", "pattern", "path", "select", "view", "name", "reset", "w", "current", "focus", "cmd", "act", "t", "int", "command", "sum"], "output": ["channel", "next", "body", "client", "net", "label", "option", "Output", " Output", "port", "component", "filename", "write", "put", "file", "exit", "value", "image", "category", "position", "current", "report", "control", "batch", "buffer", "connection", "module", "unit", "only", "parent", "format", "message", "generated", "outer", "o", "success", "default", "display", "result", "second", "done", "config", "hidden", "auto", "response", "cut", "null", "filter", "console", "update", "public", "csv", "print", "four", "new", "command", "error", "network", "data", "relation", "binary", "production", "text", "after"], "stdout": ["stoutput", "stOut", " stdOut", "standardoutput", " stdn", "standardOUT", "stlog", "streamoutput", "stin", "randoutput", "stio", "stdn", "standardinner", "stx", "stdx", "stinner", "stdoutput", "STDin", "standardin", "standardout", "stdOut", "randin", " stdoutput", "stdOUT", "STDout", "clin", "randinner", "clio", "clOut", " stdio", "stdio", "randout", "stdlog", "standardio", "clout", "stdinner", "STDOUT", "STDlog", "streamout", "standardlog", " stdx", "stn", "stOUT", "streamn", "streamin", "standardn", "standardx", "stout"], "stdin": ["statout", "drawIn", "usriter", " stdIn", "statlog", "stlog", "standardins", "STDIN", "stin", "stdoin", "drawoin", "stio", "stoin", "statrin", "stdins", "STDin", "standardin", "standarditer", "standardIN", "standardout", "stdrin", "usrins", "stditer", "stdIn", "drawout", "STDout", "usrout", " stdio", "stdio", "stdlog", "stIN", "drawin", "standardio", "statin", "strin", " stditer", " stdins", "STDIn", " stdIN", "standardlog", "stdIN", "standardIn", "standardrin", " stdoin", "stout", "usrin", "stIn"], "sys": ["ystem", "ser", "p", "security", "site", "static", "system", "server", "r", "ns", "module", "ctx", "six", "sim", "private", "iso", "pse", "np", "System", "phys", "dll", "asy", " random", "ty", "sit", "util", " np", " curses", "sql", "my", "py", "sky", "si", " six", "std", "console", "soc", "s", "umpy", "usr", "user", "cs", "stats", "python", " os", " mysql", " re", "nt", "str", "Sys", "lib", " thunder", "spec", "browser", "process", " fs", "io", "win", " system", " time", " ast", " math", "terms", "ssl", "hw", "xs", "so", "public", "req", "etc", "os", "sync", "sy", "ys", "fs", "windows", "details", "socket", " sy", " numbers", "http", "ls", "session", "secure", "math", "rss", "yes", "proc", "y", "psy", "nuts", "ry"], "out": ["body", "net", "to", "str", "Output", "name", "outs", "code", "this", "w", "cho", "status", "o", "res", "log", "result", "auto", "io", "Out", "conf", "ion", "v", "null", "all", "string", "it", "co", "print", "OUT", "error", "bin", "data", "sum"]}}
{"code": "import bisect, collections, copy, heapq, itertools, math, string\\nimport sys\\ndef I(): return int(sys.stdin.readline().rstrip())\\ndef MI(): return map(int, sys.stdin.readline().rstrip().split())\\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\\ndef S(): return sys.stdin.readline().rstrip()\\ndef LS(): return list(sys.stdin.readline().rstrip().split())\\n\\ndef main():\\n    N, A, B = MI()\\n    print((N // (A + B)) * A + min(N % (A + B), A))\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "716", "substitutes": {"N": ["SN", "M", "n", "NS", "T", "NV", "GN", "NI", "Na", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "H", "ANY", "V", "NO", "NUM", "S", "J", "Q", "G", "P", "Num", "D", "NB", "Y", "Ni", "F", "AN", "Z", "FN", "NG", "C"], "A": ["a", "GA", "M", "ART", "Ax", "T", "API", "AGE", "An", "Alpha", "AH", "AU", "AT", "ACE", "I", "Av", "ACC", "NA", "AL", "Area", "AV", "AD", "L", "AB", "App", "AE", "R", "H", "AA", "LA", "PA", "V", "AI", "AR", "C", "S", "EA", "J", "Q", "G", "HA", "P", "CA", "MA", "AY", "UA", "E", "JA", "AF", "D", "AM", "SA", "U", "ACT", "AC", "BA", "AN", "Array", "K", "AP"], "B": ["LB", "M", "BI", "T", "VB", "BL", "BS", "OB", "SB", "R", "I", "L", "AB", "BW", "BG", "BER", "AA", "V", "BT", "b", "S", "BC", "Bar", "J", "BR", "G", "WB", "GB", "P", "BB", "BM", "TB", "FB", "D", "NB", "EB", "Y", "BO", "HB", "DB", "BA", "Beta", "BY", "C", "UB"]}}
{"code": "def resolve():\\n\ta,b=map(int,input().split())\\n\tans=a if a<=b else a-1\\n\tprint(ans)\\n\t\t\\nresolve()", "target": "35", "substitutes": {"a": ["aq", "n", "x", "sta", "ae", "ab", "ta", "p", "ai", "i", "r", "w", " A", "c", "z", "m", "ma", "ata", "eas", "o", "ea", "la", "h", "val", "act", "t", "auto", "alpha", "na", "an", "v", "e", "A", "al", "ap", "at", "ao", "sa", "af", "s", "au", "oa", "aa", "l", "am", "ar", "j", "y", "area", "ba", "ca", "ac"], "b": ["n", "sb", "x", "ab", "bar", "d", "db", "ib", "i", "blue", "r", "c", "m", "bi", "fb", "rb", "mb", "be", "f", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "s", "eb", "cb", "l", "j", "y", "bs", "ba"], "ans": ["arms", "ars", "ANS", "ants", "ats", "ians", "beans", "names", "outs", "books", "irms", "aus", "asks", "aned", "ns", "ann", "rans", "mas", "anas", "leans", "ks", "ins", "ons", "ms", "amps", "pan", "ents", "ens", "uns", "an", "iann", "anks", "aces", "aps", "ams", "aos", "lan", "orts", "aints"]}}
{"code": "#!/usr/bin/env python\\n# coding: utf-8\\n\\n# In[5]:\\n\\n\\ns = input()\\n\\n\\n# In[6]:\\n\\n\\nans = []\\nfor i,w in enumerate(s):\\n    if w == \"B\" and len(ans) != 0:\\n        ans.pop(-1)\\n    elif w == \"0\" or w == \"1\":\\n        ans.append(w)\\nprint(\"\".join(ans))\\n\\n\\n# In[ ]:\\n\\n\\n\\n\\n", "target": "503", "substitutes": {}}
{"code": "from functools import reduce\\nfrom fractions import gcd\\ndef lcm(x,y):\\n  return x*y//gcd(x,y)\\ndef lcmm(l):\\n  return reduce(lcm,l)\\nn=int(input())\\nt=[int(input()) for _  in range(n)]\\nprint(lcmm(t))\\n", "target": "186", "substitutes": {"x": ["wx", "xi", "ex", "xe", "d", "p", "ux", "g", "xc", "X", "i", "rx", "r", "w", "c", "ox", "z", "m", "xxxx", " X", " ax", "ix", "tx", "f", "b", "xd", " dx", "zx", "v", " c", "e", " xx", "xy", "xs", "dx", "xx", " cx", "yx", "px", "xp", "xf"], "y": ["sy", "ys", "yd", "yer", "ym", "cy", "i", "oy", "c", "z", "ly", "ies", "m", "ny", "yi", "vy", "o", "ye", "py", "yr", "ery", "b", "yl", "uy", "v", "ey", "gy", "iy", "xy", "yt", "Y", "yy", "fy", "j", "ay", "ry"], "l": ["lc", "lu", "kl", "local", "ln", "lt", "g", "lb", "L", "long", "m", "ly", "ml", "dl", "el", "nl", "sl", "lay", "ls", "hl", "lo", "lp", "li", "lam", "lr", "ol", "ll", "le", "pl", "lin"], "n": ["nr", "N", "net", "nt", "gn", "d", "p", "ne", "cn", "g", "i", "sn", "r", "c", "m", "ns", "o", "nl", "h", "num", "len", "nb", "no", "mn", "ot", "nv", "na", "nc", "nan", "nu", "nw", "nn", "np", "j"], "t": ["tm", "a", "ty", "T", "to", "ta", "p", "d", "i", "wt", "c", "ts", "m", "total", "o", "te", "tree", "dt", "f", "b", "pt", "ot", "tu", "v", "at", "tt", "it", "tr", "st", "rt", " T", "j", "vt", "temp", "trace"], "_": [" which", "ex", " pos", " val", " the", " j", " ex", " pre", "ox", "ix", " g", "val", " __", "___", " mill", " p", "j", " un", " z"]}}
{"code": "N = int(input())\\nseat = []\\nfor i in range(N):\\n    seat.append(input().split())\\n\\ncon = 0\\nfor j in range(N):\\n    con += int(seat[j][1]) - int(seat[j][0]) + 1\\n\\nprint(con)", "target": "720", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "I", "L", "NA", "NM", "NN", "NR", "CN", "NT", "NH", "V", "No", "NO", "NUM", "S", "PN", "J", "Num", "P", "Network", "Sn", "D", "NB", "Size", "MN", "Len", "Count", "Ni", "K", "F", "AN", "TN", "FN", "C"], "seat": ["role", "rue", "su", "cele", "sit", "ced", "port", "office", "flight", "nation", "journal", "nat", "ace", "set", "shall", "section", "sed", "ticket", "floor", "sec", "face", "sl", "sing", "pron", "suit", "hall", "sen", "sex", "sel", "sword", "sea", "sat", "phony", "cum", "character", "route", "bench", "forth", "also", "home", "slave", "stab", "soc", "eat", "sa", "public", "nel", "capt", "four", "see", "cast", "pit", "won", "there", "se", "cel", "ray", "member", "sudo", "said", "gear"], "i": [" ii", "ia", "ie", "ci", "gi", "ir", "di", "ior", "I", "bi", "iti", "ic", "ip", "ind", "ri", "io", "si", "li", "ii", "ti", "iy", "im", "ini", "y", "ij", "ik", "iu"], "con": ["acon", "n", "conn", "gate", "commun", "cn", "bon", "common", "connect", "pen", "c", "Con", "rat", "CN", "condition", "Conn", "connection", "tun", "const", "pan", "sen", "num", "fac", "cond", "stan", "cum", "cons", "uc", "Co", "non", "conf", "ver", "don", "jiang", "can", "Cons", "ain", "un", "cos", "inter", "CON", "conv", "com", "co", "ran", "nn", "mon", "lan", "cone", "bean"], "j": ["json", "n", "x", "uj", "ja", "js", "aj", "p", "d", "jp", "job", "oj", "jc", "z", "c", "m", "jj", "o", "h", "ind", "jl", "f", "b", "je", "jac", "t", "J", "bj", "kj", "ji", "jas", "v", "obj", "ch", "jump", "jo", "q", "l", "dj", "y", "k", "ij", "jam"]}}
{"code": "a,b=map(int,input().split())\\nx=[]\\nfor i in range(b-a+1,b+a):\\n  x.append(str(i))\\nprint(' '.join(x))", "target": "688", "substitutes": {"a": ["n", "sta", "ac", "ab", "era", "ta", "d", "p", "g", "ai", "ak", "r", "c", "ma", "m", "z", "ga", "ea", "admin", "la", "act", "f", "t", "alpha", "da", "lower", "eu", "na", "an", "e", "A", "al", "at", "sa", "it", "s", "au", "aa", "l", "am", "ar", "index", "upper", "area", "ba", "ca", "after"], "b": ["bis", "body", "n", "sb", "ab", "d", "p", "db", "g", "ib", "r", "c", "m", "z", "bi", "wb", "fb", "rb", "bo", "mb", "h", "be", "ob", "bh", "f", "bas", "bc", "gb", "t", "br", "nb", "B", "bb", "v", "e", "eb", "base", "l", "j", "y", "bs", "ba"], "x": ["wx", "xi", "ex", "xe", "xes", "ux", "checked", "xc", "ct", "xa", "X", "rx", "ext", "w", "ox", "z", "xxxx", "xt", "xml", "ix", "cross", "tx", "ax", "xd", "xxxxxxxx", "check", "fx", "works", "xy", "xs", "mx", "upload", "conv", "dx", "xx", "yx", "lex", "y", "px", "ross", "xp", "xf"], "i": ["\u00ed", "ki", "n", "xi", "mi", "gi", "di", "ai", "I", "iter", "r", "c", "m", "bi", "qi", "ic", "ip", "ind", "f", "si", "iu", "ii", "li", "key", "v", "ori", "int", "ti", "im", "s", "ini", "zi", "pi", "u", "id", "j", "y", "index", "ij", "iri", "hi"]}}
{"code": "N,A,B = map(int, input().split())\\n\\n\\nX = [0]*10100\\nfor i in range(len(X)):\\n  S = str(i)\\n  a = 0\\n  for c in S:\\n    a += int(c)\\n\\n  X[i] = a\\n\\n# print( X )\\n\\nans = 0\\nfor i,x in enumerate(X[:N+1]):\\n  if A<=x and x<=B:\\n    ans += i\\n    # print(i, ans)\\n\\nprint(ans)\\n", "target": "704", "substitutes": {"N": ["M", "n", "NS", "T", "NC", "Ns", "R", "I", "L", "NN", "NR", "H", "W", "O", "V", "J", "Q", "G", "P", "E", "D", "Y", "Ni", "K", "F", "Z", "C"], "A": ["M", "T", "An", "AT", "R", "I", "L", "AB", "H", "AA", "V", "AR", "AS", "G", "P", "CA", "D", "AF", "Y", "SA", "K", "AC", "BA", "C"], "B": ["M", "T", "Bs", "R", "I", "L", "AB", "W", "O", "V", "BT", "b", "BC", "J", "G", "P", "BB", "BM", "E", "D", "Y", "BA", "Beta", "Z", "C"], "X": ["IX", "x", "T", "TX", "ACE", "I", "EX", "R", "L", "MX", "UX", "OX", "Ex", "WH", "H", "ZX", "XY", "V", "TH", "XP", "XM", "DX", "J", "Q", "Tx", "P", "XX", "XT", "XXX", "Y", "XL", "K", "F", "Array", "Z"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "r", "m", "bi", "ic", "ix", "o", "ip", "ind", "f", "b", "t", "ri", "si", "ii", "li", "v", "e", "int", "ti", "im", "it", "zi", "ini", "q", "l", "pi", "id", "j", "index", "y", "ij", "iu"], "S": ["M", "NS", "T", "SH", "ES", "BS", "SS", "SB", "R", "I", "L", "PS", "Si", "Su", "SI", "CS", "SM", "H", "V", "ss", "J", "Q", "G", "P", "s", "SU", "D", "Y", "SA", "WS", "Z", "C"], "a": ["x", "ia", "sta", "ae", "ac", "ab", "p", "g", "va", "xa", "zero", "w", "ma", "ata", "ga", "o", "aux", "ea", "la", "aaa", "pa", "f", "b", "t", "alpha", "da", "wa", "apa", "off", "an", "at", "sa", "another", "au", "oa", "aa", "u", "ba", "ca"], "c": ["lc", "con", "ac", "ci", "d", "p", "unc", "cd", "pc", "g", "xc", "name", "code", "ct", "rc", "acc", "arc", "tc", "Ca", "cod", "Cs", "ic", "o", "const", "col", "f", "b", "bc", "t", "mc", "anc", "uc", "SC", "sc", "e", "cin", "cos", "cc", "\u00e7", "cb", "cu", "CC", "etc", "l", "Sc", "cs", "k", "j", "y", "cm", "cf", "ca", "C", "chain"]}}
{"code": "n = int(input())\\nt = list(map(int, input().split()))\\nm = int(input())\\nt_sum = sum(t)\\n\\nfor i in range(m):\\n    p, x = map(int, input().split())\\n    ans = t_sum - t[p-1] + x\\n    print(ans)", "target": "730", "substitutes": {"n": ["nr", "N", "d", "g", "sn", "c", "z", "ns", "total", "h", "f", "b", "num", "nb", "mn", "v", "nc", "nm", "s", "nn", "l", "q", "np", "k", "j", "y"], "t": ["ty", "T", "to", "ta", "d", "table", "g", "td", "wt", "txt", "c", "ts", "z", "total", "gt", "te", "o", "tree", "tp", "term", "dt", "f", "b", "pt", "ot", "tu", "list", "at", "tt", "it", "tr", "st", "rt", "tf", "q", "l", "tmp", "ent", "j", "y"], "m": ["tm", "mi", "km", "mr", "M", "mod", "dm", "d", "mm", "mo", "multiple", "mp", "g", "r", "c", "ma", "man", "bm", "gm", "h", "ms", "mb", "f", "b", "num", "mc", "mn", "v", "sm", "l", "k", "j", "mt", "cm"], "t_sum": ["t2sa", "t2sum", "t_mean", "t_um", "n_sum", "t_diff", "n_um", "t_se", "n_Sum", " t_mean", "t2se", "t2mean", " t_se", "t_Sum", " t_sa", "t_sa", "n_diff"], "i": [" ii", " j", "iq", "I", "r", "c", "z", "by", "ix", "ind", "f", "li", "im", "it", "q", "l", "id", "k", "y", "j"], "p": ["pkg", "perm", "press", "mp", "pc", "jp", "pre", "pe", "tp", "pa", "pr", "f", "sp", "part", "pt", "pos", "P", "ap", "post", "at", "cp", "per", "patch", "pl", "pi", "q", "np", "pat", "j", "pp", "pro", "ps", "pg"], "x": ["a", "wx", "xi", "ex", "xe", "xes", "ux", "xc", "X", "xa", "rx", "w", "c", "z", "xt", "ix", "o", "h", "tx", "f", "v", "e", "xy", "xs", "dx", "q", "xx", "l", "u", "k", "y", "px", "xp", "xf"], "ans": ["arms", "ars", "ANS", "nings", "ants", "ats", "ians", "beans", "eds", "aus", "ros", "asks", "aned", " Ans", "ates", "ns", "anus", "ann", "rans", "mas", "leans", "anas", "ins", "ls", "ens", "cas", "ados", "an", "iann", "anks", "anes", "aps", "nan", "nas", "ams", "aos", "ran", "arts", "es", "os", "lan", "olds"]}}
{"code": "dict={\"A\":\"T\",\"T\":\"A\",\"G\":\"C\",\"C\":\"G\"}\\nprint(dict[input()])\\n", "target": "562", "substitutes": {"dict": ["con", "client", "pkg", "look", "nt", "pub", "str", "ld", "d", "db", "dir", "dial", "td", "map", "dash", "ict", "upper", "cert", "default", "ind", "df", "dat", "vol", "da", "inner", "pd", "list", "ad", "obj", "hash", "compl", "print", "hd", "then", "dd", "inf", "good", "ds", "nd"]}}
{"code": "import os\\nimport sys\\nfrom io import BytesIO, IOBase\\n \\nBUFSIZE = 8192\\n \\n \\nclass FastIO(IOBase):\\n    newlines = 0\\n \\n    def __init__(self, file):\\n        self._fd = file.fileno()\\n        self.buffer = BytesIO()\\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\\n        self.write = self.buffer.write if self.writable else None\\n \\n    def read(self):\\n        while True:\\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n            if not b:\\n                break\\n            ptr = self.buffer.tell()\\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\\n        self.newlines = 0\\n        return self.buffer.read()\\n \\n    def readline(self):\\n        while self.newlines == 0:\\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\\n            self.newlines = b.count(b\"\\n\") + (not b)\\n            ptr = self.buffer.tell()\\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\\n        self.newlines -= 1\\n        return self.buffer.readline()\\n \\n    def flush(self):\\n        if self.writable:\\n            os.write(self._fd, self.buffer.getvalue())\\n            self.buffer.truncate(0), self.buffer.seek(0)\\n \\n \\nclass IOWrapper(IOBase):\\n    def __init__(self, file):\\n        self.buffer = FastIO(file)\\n        self.flush = self.buffer.flush\\n        self.writable = self.buffer.writable\\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\\n \\n \\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\\n##########################################################\\nimport threading\\nsys.setrecursionlimit(10**5)\\nthreading.stack_size(10**8)\\ndef dfs(x):\\n    global l,adj,v\\n    if v[x]==1:\\n        return(l[x])\\n    v[x]=1\\n    c=0\\n    for i in adj[x]:\\n        c=max(c,dfs(i)+1)\\n    l[x]=c\\n    return c\\ndef main():\\n    global l,adj,v\\n    n,m=map(int,input().split())\\n    l=[0]*(n+1)\\n    v=[0]*(n+1)\\n    adj=[]\\n    for i in range(n+1):\\n        adj.append([])\\n    for i in range(m):\\n        x,y=map(int,input().split())\\n        adj[x].append(y)\\n    ans=0\\n    for i in range(1,n+1):\\n        if not v[i]:\\n            ans=max(ans,dfs(i))\\n    print(ans)\\nt=threading.Thread(target=main)\\nt.start()\\nt.join()\\n        \\n        \\n", "target": "663", "substitutes": {"BUFSIZE": ["BUBSizable", "BUBSIZ", "BYFSIME", "BUCSECT", " BUCSIZ", " BUFSIME", "BUBSIZE", "BUfsIZE", "BUFsIZE", "BUFSIZ", "BUPSize", " BUCSIZE", "BYCSIZE", "BYFSIZE", "BUCSIZE", "BUfsize", "BUBSize", "BUGSIZE", "BUGSizable", " BUCSize", "BUCSIZ", "BUCSize", "BUFsIZ", "BUCSIME", " BUCSIME", "BUFSizable", "BYFSECT", "BUPSIZE", "BUFsize", "BUPSIZ", "BUPSECT", "BUFSECT", "BYFSize", "BUFsIME", "BUFSize", "BYCSize", "BUfsECT", "BUGSize", " BUCSizable", " BUFSIZ", " BUFSizable", "BUPSIME", "BUfsIME", "BYCSIME", "BUGSIZ", "BUCSizable", " BUFSize", "BYCSECT", "BUFSIME"], "newlines": ["nextbreaks", "addline", "nextelines", "Newframes", "Newlinks", "nextpoints", "Newlines", "addelines", "breakline", "newpoints", "Newline", "NEWelines", " newline", "newlinks", "addlines", "addbreaks", " newines", " newelines", "newframes", " newlinks", "breakpoints", "breakelines", "newelines", "nextlines", "newines", "nextines", "breakbreaks", "NEWlines", "breaklinks", "nextline", "nextframes", "Newelines", " newpoints", "newline", "Newines", " newbreaks", "newbreaks", "breaklines", " newframes", "Newbreaks", "NEWframes"], "self": ["top", "body", "n", "json", "cmp", "x", "instance", "err", "wn", "context", "p", "mp", "left", "html", "re", "r", "dev", "res", "default", "log", "ind", "oe", "config", "empty", "close", "part", "response", "disk", "private", "block", "e", "about", "obj", "compl", "co", "new", "app", "q", "pl", "book", "np", "se", "lex", "history", "ial", "pkg", "sw", "conn", "before", "me", "local", "util", "own", "test", "this", "short", "wh", "pre", "sql", "weak", "sect", "full", "my", "help", "parent", "shape", "ins", "output", "py", "tx", "time", "results", "also", "params", "will", "console", "builder", "each", "s", "debug", "print", "cl", "user", "error", "ass", "python", "nd", "loc", "next", "client", "ae", "load", "nt", "attribute", "spec", "raw", "ref", "subject", "asm", "query", "make", "xml", "round", "h", "pr", "term", "right", "you", "tk", "form", "parts", "review", "add", "eth", "urn", "remote", "resp", "github", "all", "cache", "event", "ssl", "partial", "public", "req", "high", "der", "other", "vs", "fields", "os", "md", "attr", "Self", "views", "th", "name", "view", "where", "method", "w", "expr", "rem", "details", "info", "rs", "diff", "ren", "rec", "func", "ls", "tag", "go", "mix", "cmd", "quick", "rel", "create", "args", "support", "final", "ws", "row", "work", "first", "au", "proc", "errors", "after"], "file": ["channel", "open", "a", "to", "foo", "local", "path", "str", "port", "stat", "table", "filename", "File", "frame", "dir", "spec", "db", "name", "run", "plain", "i", "image", "template", "txt", "chain", "fp", "type", "files", "page", "format", "o", "output", "flow", "let", "log", "h", "place", "f", "ile", "time", "io", "block", "resource", "fo", "disk", "style", "out", "remote", "stream", "string", "byte", "event", "model", "FILE", "ode", "fil", "print", "do", "handle", "base", "lock", "l", "olean", "line", "le", "link", "task", "os", "data", "use"], "_fd": ["_fin", "___ini", "_dir", "___fd", "_fed", "___dat", "_fs", "_stream", "_db", "\tdat", "_disk", "\tini", "\tfd", "_dat", "_cond", "_poll", "_fp", "___buffer", "_buffer", "_ini", "_hd"], "buffer": ["header", "scroll", "offset", "table", "store", "texture", "batch", "window", "tree", "log", "thread", "block", "buff", "timeout", "data", "trace", "writer", "history", "surface", "match", "database", "iter", "template", "position", "length", "commit", "wall", "output", "processor", "filter", "screen", "console", "stream", "interface", "directory", "phrase", "print", "handle", "engine", "Buffer", "program", "shell", "binary", "document", "stack", "function", "source", "variable", "client", "comment", "queue", "attribute", "expression", "append", "process", "note", "tail", "pool", "term", "result", "buf", "memory", "cache", "button", "event", "pause", "size", "prototype", "seek", "device", "ter", "loader", "trigger", "frame", "journal", "connection", "socket", "type", "message", "session", "base", "profile", "command", "timer", "sequence", "sum"], "writable": ["portiable", " writutable", "seekability", "creatutable", "portability", " writability", "WritABLE", "writeability", "seekABLE", "ritiable", "portable", "creatable", "typatable", "readable", "writutable", "Writable", "writitable", "destructiable", " writables", "writer", "typable", "seekable", "writatable", "creatables", "destructability", "typability", "ritable", "Writible", "readability", "downloadable", "Writability", "destructitable", "accessable", "writables", "rititable", "readatable", "readible", "ritability", "writible", "accessables", "readables", "creater", "downloadutable", "typible", "writeable", "accessitable", "writABLE", "readitable", "destructable", "writeible", "downloadables", "portitable", "reader", "creatitable", "writeABLE", "writability", "seekible", "writiable", "writeatable", "creatability", "downloadability", "accesser"], "write": ["find", "device", "scroll", "call", "to", "load", "move", "render", "insert", "use", "init", "put", "get", "run", "connect", "store", "replace", "w", "transfer", "value", "append", "set", "push", "commit", "wait", "text", "note", "wr", "status", "format", "change", "save", "output", "send", "export", "fail", "log", "apply", "double", "writing", "create", "writ", "wrote", "force", "written", "feed", "add", "key", "switch", "update", "register", "post", " Write", "ping", "end", "rite", "print", "see", "say", "lock", "handle", "then", "enable", "Write", "copy", "link", "lex", "seek", "echo", "sync", "after", "writer"], "b": ["a", "body", "n", "p", "i", "r", "c", "z", "batch", "pb", "fb", "bo", "ob", "br", "gb", "B", "v", "bt", "e", "obj", "it", "buff", "k", "bs", "bits", "bf", "g", "ib", "bg", "m", "ble", "o", "be", "bh", "s", "cb", "l", "u", "binary", "bar", "d", "db", "wb", "h", "buf", "bc", "nb", "ch", "erb", "eb", "bp", "back", "bis", "sb", "ab", "emb", "w", "bd", "bi", "rb", "by", "mb", "f", "t", "bb", "base", "bl", "bin", "j", "y"], "ptr": ["loc", "pointer", "ser", "ter", "offset", "js", "p", "Ptr", "jp", "dh", "tip", "ts", "ref", "pad", "expr", "pert", "info", "prime", "ctx", "cert", "tp", "pr", "vr", "cmd", "ect", "pend", "ctr", "rel", "dep", "t", "sp", "pt", "dr", "eth", "inter", "debug", "tr", "req", "hr", "der", "peer", "div", "addr", "then", "bp", "np", "tmp", "proc", "adr", "deg"], "flush": ["open", "scroll", "gc", "reset", "transfer", "append", "push", "commit", "disable", "save", "sync", "println", "export", "send", "delete", "empty", "close", "dump", "force", "feed", "filter", "update", "switch", "usher", "cache", "clear", "execute", "print", "clean", "lock", "handle", "size", "pipe", "callback", "enable", "float", "ush", "late", "seek", "destroy", "init", "writer"], "read": ["find", "cat", "loop", "inline", "tell", "format", "allow", "check", "Read", "skip", "reader", "roll", "rand", "lex", "data", "ignore", "walk", "text", "init", "content", "open", "get", "test", "iter", "length", "send", "bind", "pop", "stream", "each", "switch", "print", "handle", "chain", "start", "next", "repeat", "load", "str", "readable", "take", "report", "wait", "query", "reads", "ip", "remove", "dat", "feed", "add", "search", "reading", "late", "seek", "sync", "hold", "reverse", "select", "name", "run", "connect", "ext", "push", "scan", "mix", "poll", "pull", "execute", "READ", "pipe"], "readline": ["sendline", " readLINE", "writeLine", "sendLine", "sendlines", "readframe", "readLINE", "runLINE", "getline", "runLine", " readlines", "readlines", "readLine", "writelines", " readLine", "runstring", "sendblock", "writeLINE", "loadlines", "readblock", "writeframe", "runline", "getLINE", "writeline", "loadframe", "findblock", " readframe", "findlines", "writeblock", "readstring", "loadLINE", "findLine", "loadstring", "loadLine", " readstring", "findline", "getLine", "getlines", "loadline"], "sys": [" os", "rus", "kernel", "pkg", "ys", "nt", "local", "Sys", "lib", "util", "db", "site", "system", "this", "fs", "windows", "us", "sql", "linux", "ns", "process", "module", "socket", "ctx", "total", "o", "py", "term", "bool", "auto", "io", "math", "win", " system", "out", "std", "console", "obj", "s", "hw", "iso", "so", "ruby", "usr", "pse", "proc", "yes", "np", "tmp", "System", "phys", "cs", "os", "y", "stats", "psy", "er", "sync", "python"], "stdin": ["standin", " stdIn", "standardins", "stin", "standout", "stdins", "STDin", "standarddin", "standins", "standardin", "standardout", "stdIn", "standdin", "STDout", "stddin", " stdins", "STDIn", " stddin", "stout", "stIn"], "stdout": ["stOut", "consoleout", "consoleio", "consoleOut", "streamio", "stlog", "streamout", "streamlog", "stdio", "stio", "consolelog", "stout", "stdOut", "stdlog", "streamOut"]}}
{"code": "x_1, x_2, x_3, x_4, x_5 = map(int, input().split())\\nls = [x_1, x_2, x_3, x_4, x_5]\\nnum = ls.index(0)\\nprint(num + 1)\\n", "target": "727", "substitutes": {"x_1": ["x_one", "xx5", "x_first", "yx_1", "xs_5", "xx3", "x672", "xs_1", "xxone", "yx672", "yx671", "xpyfirst", "x67first", "yx_back", "xpy1", "xx1", "x_back", "xs_3", "xpyback", "yx67first", "yx_first", "yx67back", "x671", "xpy2", "yx_2", "x67back", "xs_one"], "x_2": [" x_10", " x_02", " x_0", "x090", "x094", "x_0", "x_02", "x0810", "x085", "x_10", "x0902", "x092", "x082", "x083"], "x_3": [" x_com", "xx5", "x6803", "x__third", "x__9", "coxthird", "xx3", "xxthird", "x__5", "x68iii", "x1103", "x_third", " x_03", "co_3", "x_iii", "x113", "x_com", "cox5", "co_9", "co_third", "x_9", "cox3", "x683", "x68com", " x_iii", "x_03", "x11com", "cox9", "x11iii", "x__3", "xx9", "co_5"], "x_4": ["time_42", "time_04", "x___12", "x24", "xx4", "timex4", "xx42", "wx_4", "wx_Four", "timex04", "timexfourth", "x_Four", "x_04", "time_4", "timex42", "time_fourth", "xx04", "x204", "x_fourth", "x___4", "x___Four", "x242", "x_12", "x_42", "x2fourth", "xxfourth", "wx_12"], "x_5": ["x_6", " x_z", " x_9", " x_15", "x556", "x555", "x_9", " x_6", "x55z", "x_15", "x5515", "x_z"], "ls": ["lc", "LS", "ols", "iffs", "prints", "els", "tl", "ats", "ln", "lt", "les", "lines", "sels", "hs", "ts", "mails", "ns", "dl", "vals", "details", "rs", "ms", "irs", "lis", "lists", "levels", "gs", "list", "lv", "xs", "l", "rates", "vs", "lbs", "cs", "ds"], "num": ["con", "n", "alph", "th", "su", "pub", "um", "mod", "nom", "name", "mult", "uni", "zero", "set", "sam", "tim", "nam", "bum", "multi", "NUM", "nb", "no", "mn", "ver", "bid", "pos", "bn", "Num", "cal", "un", "msg", "conv", "nu", "div", "number", "mon", "np", "id", "index", "coord"]}}
{"code": "n=int(input())\\nfor x in range(n+1):\\n    if x*108//100==n:\\n        print(x)\\n        break\\nelse:\\n    print(\":(\")", "target": "194", "substitutes": {"n": ["a", "N", "nt", "gn", "ln", "d", "p", "g", "i", "sn", "r", "c", "w", "m", "z", "ns", "o", "nl", "h", "f", "b", "num", "t", "len", "nb", "mn", "na", "v", "an", "nc", "nm", "s", "nan", "nu", "nw", "q", "l", "nn", "np", "u", "j", "k"], "x": ["wx", "xi", "ex", "xe", "p", "ux", "xc", "xa", "X", "i", "rx", "ox", "z", "xxxx", "xt", "ix", "tx", "ax", "f", "xd", "num", "t", "xxxxxxxx", "v", "fx", "ey", "xy", "xs", "mx", "xb", "\u00e7", "co", "dx", "xx", "y", "index", "xp", "xf"]}}
{"code": "S = str(input())\\ncnt = 0\\ncha = []\\nfor s in S:\\n  if s not in cha:\\n    cha.append(s)\\n  elif s == cha[0]:\\n    cnt += 1\\n  \\nif len(cha)==2 and cnt==1:\\n  print('Yes')\\nelse:\\n  print('No')", "target": "103", "substitutes": {"S": ["M", "N", "T", "Str", "SS", "SB", "X", "I", "R", "L", "Si", "Has", "TS", "CS", "H", "As", "O", "V", "Ch", "B", "Q", "G", "P", "A", "E", "Is", "SU", "DS", "Y", "SA", "String", "Z", "C"], "cnt": ["CNT", "lcounter", "cNT", "cnc", "acct", "cct", "lcNT", "rcnt", "lcnt", "Counter", "sctr", "acnt", "scnt", "ctr", "actr", "scpt", "Cnc", " cNT", " counter", "acpt", " cct", " cnc", "rcnc", "rcct", "Cct", "cpt", "cst", "rcst", "counter", "Cnt", " cpt", " cst", " ctr", "scct", "Cst", "lcct"], "cha": ["CHA", "asia", "audi", "a", "chal", "sb", "nut", "ja", "acha", "che", "bite", "chin", "iche", "ct", "chest", "chi", "ape", "apt", "shit", "ma", "ita", "care", "cho", "eas", "osa", "yah", "hey", "bra", "chan", "rys", "tal", "fa", "ket", "you", "yout", "ua", "apa", "hair", "coe", "bt", "bah", "sa", "chy", "Ja", "ch", "ha", "he", "co", "capt", "say", "qua", "yes", "there", "ya", "nuts", "ba", "ca", "said", "chu"], "s": ["ares", "ars", "a", "sym", "n", "sb", "x", "ats", "js", "stat", "ains", "p", "single", "eds", "g", "ows", "i", "sand", "r", "hs", "c", "ts", "m", "ies", "ns", "rs", "ses", "ins", "ords", "h", "ons", "sing", "ls", "abs", "b", "f", "t", "ss", "si", "just", "no", "tes", " sins", "gs", "sq", "sin", "ws", "has", "string", "ch", "ches", "xs", "sv", "sol", "sa", "bes", "q", "yes", "sts", "sd", "cs", "es", "changes", "ass", "ds", "ps"]}}
{"code": "n = int(input())\\npos=[]\\nfor i in range(n):\\n  x,y,h = map(int, input().split())\\n  pos.append([x,y,h])\\n\\npos = sorted(pos, key=lambda x: x[2])\\ntx,ty,th = pos[-1]\\ndef solve():\\n  for cx in range(101):\\n    for cy in range(101):\\n      H = th+abs(tx-cx)+abs(ty-cy)\\n      for x,y,h in pos:\\n        if h != max(H-abs(x-cx)-abs(y-cy), 0):\\n          break\\n      else:\\n        return(cx,cy,H)\\n\\ncx,cy,H=solve()\\nprint(cx,cy,H)", "target": "114", "substitutes": {"n": ["a", "nr", "N", "nt", "d", "p", "ne", "g", "w", "r", "c", "m", "z", "ns", "nl", "f", "num", "t", "count", "nb", "nv", "na", "v", "nc", "nan", "size", "nn", "number", "l", "np", "j", "k"], "pos": ["loc", "rot", "top", "next", "mit", "nt", "path", " Pos", "port", "p", "proc", "dir", "spec", "po", "POS", "us", "position", "start", "mos", "z", "cho", "Pos", "o", "res", "col", "val", "pr", "trans", "neg", "news", "cond", "form", "pt", "no", "part", "plot", "conf", "add", "out", "resp", "list", "all", "oss", "cos", "xy", "nos", "pres", "pl", "pi", "mon", "lat", "yes", "mat", "pat", "pose", "os", "px", "index", "sort", "pro", "ps", "pack", "init", "points"], "i": [" I", "xi", "ia", "ite", "ci", "ai", "I", "yi", "ic", "ix", "ind", "ion", "li", "ii", "ti", "iy", "im", "it", "zi", "phi", "pi", "il", "id", "j", "k", "ij"], "x": ["wx", "xi", "ex", "any", "xe", "p", "on", "xes", "ux", "xc", "X", "xa", "rx", "w", "c", "ox", "z", "xxxx", " X", "el", "xt", " ax", "ctx", "ix", "act", "ax", "f", "xd", " dx", "xxxxxxxx", "key", "zx", "e", "int", "fx", " xx", "xy", "xs", "mx", "com", "xb", "dx", "nex", "xx", "l", "yx", "u", "lex", "px", "xp", "xf"], "y": ["sy", "ys", "yd", "ym", "wy", "oy", "ky", "yo", "sys", "z", "ly", "ies", "my", "ny", "vy", "o", "ye", "py", "yr", "ery", "hy", "b", "t", "yl", "icy", "ot", "uy", "yn", "ey", "gy", "iy", "xy", "yt", "Y", "yy", "fy", "ya", "ay", "ry"], "h": ["ht", "sh", "kh", "p", "hz", "html", "hal", "hs", "c", "z", "m", "ih", "zh", "rh", "o", "ah", "bh", "f", "b", "uh", "HH", "hl", "v", "oh", "has", "hash", "ha", "ph", "he", "hr", "high", "hd", "MH", "q", "ho", "l", "hh", "hi", "hm"], "tx": ["tm", "sy", "wx", "xi", "nt", "TX", "ux", "tty", "rx", "txt", "tc", "ox", "ts", "xt", "ctx", "tim", "te", "ix", "trans", "ax", "tk", "t", "pt", "Tx", "ti", "fx", "tt", "tr", "xs", "mx", "rt", "dx", "xx", "yx", "lex", "px", "mt", "xp"], "ty": ["sy", "asy", "ys", "ury", "pty", "tty", "wy", "typ", "rx", "TY", "arty", "txt", "ky", "ly", "my", "ny", "vy", "ties", "py", " Tyr", "t", "pt", "uy", "gy", "tt", "tr", "sty", "fy", "yt", "yy", "Ty", "ry"], "th": ["tha", "ht", "sh", "ith", "kh", "ta", "Th", "tw", "td", "wh", "dh", "w", "tc", "ts", "ih", "zh", "rh", "pr", "TH", "bh", "ths", "t", "gh", "pt", "oth", "eth", "st", "tr", "tt", "ch", "ph", "s", "hr", "orth", "se", "mt", "cr", "hi", "ry"], "cx": [" cxx", "cmy", "tcy", "cnx", "lcxi", "acx", " cxa", "rcdx", "cxa", "cxd", "cdx", "acxy", "cw", "cux", "rcx", "cix", "cci", "ccwy", "lcxt", "ccci", "cwx", "tcxd", "ccwx", "tcx", "lcci", "tcxi", "lcux", "ccy", "cnex", "cixd", "ciwx", "cici", "cmwy", "acex", "lcx", "ccxt", "rcxa", "cex", "cxy", "cmxi", "acw", "cxx", "Cw", " cxy", "cwy", "lcxx", "lcex", "lcwy", " cex", " cw", "ccx", "cmxt", " cdx", "rcy", " cux", "ccxd", "lcy", "Cx", "Cex", "lcwx", "cmxa", "cxi", "cmdx", "Cxy", "cnxx", "ccxi", "lcxd", "cnux", "cmx", "cxt"], "cy": ["ce", "sy", "cle", "rey", "ci", "ym", "Cr", "cow", "cd", "cycle", "pty", "xc", "ady", "ct", "wy", "oy", "ky", "c", "ox", "tc", "ly", "sys", "ies", "ico", "my", "ny", "cry", "iw", "vy", "cor", "ye", "col", "yr", "sky", "hy", "ay", "yl", "icy", "uy", "ey", "cin", "gy", "cox", "xy", "ch", "cus", "sty", "cer", "cb", "cu", "yt", "yy", "pse", "fy", "yx", "ya", "cm", "cr", " CY", "ca", "ry"], "H": ["M", "Eh", "HQ", "T", "HD", "FH", "HM", "SH", "HP", "His", "HS", "HL", "Th", "AH", "X", "RH", "R", "HE", "PH", "Has", "HO", "HI", "GH", "Help", "WH", "HTML", "NH", "HR", "DH", "TH", "V", "HH", "B", "J", "Wh", "HA", "P", "Hash", "OH", "HK", "Host", "HC", "MH", "Y", "HB", "K", "F", "HT", "He", "C", "Oh"]}}
{"code": "import numpy as np\\nn,m,k = map(int,input().split())\\na = np.array([int(i) for i in input().split()], dtype='int64')\\nb = np.array([int(i) for i in input().split()], dtype='int64')\\n\\n# \u8aad\u307e\u306a\u3044\u3068\u3044\u3046\u9078\u629e\u80a2\u3092\u5148\u982d\u306b\u5165\u308c\u3066\u304a\u304f\\na_c = np.zeros(n+1,dtype='int64')\\na_c[1:] = np.cumsum(a)\\n\\nb_c = np.zeros(m+1,dtype='int64')\\nb_c[1:] = np.cumsum(b)\\n\\na_c = a_c[a_c <= k]\\nb_c = b_c[b_c <= k]\\n\\nans_l = np.searchsorted(b_c, k - a_c, side='right') - 1\\nans_l += np.arange(len(a_c))\\nprint(ans_l.max())", "target": "244", "substitutes": {"n": ["N", "net", "x", "ni", "d", "ne", "g", "r", "w", "c", "ns", "f", "t", "io", "na", "v", "yn", "nn", "l", "np", "ng", "y", "j", "ry"], "m": ["km", "mi", "M", "dm", "d", "p", "mm", "mu", "mp", "g", "r", "w", "c", "bm", "o", "h", "ms", "t", "mc", "mn", "v", "e", "nm", "l", "cm"], "k": ["km", "kn", "x", "kl", "p", "g", "w", "c", "z", "dk", "ks", "o", "kw", "ko", "t", "v", "e", "q", "l", "kk", "j", "ka", "K", "ik", "sk", "mk"], "a": ["x", "ab", "p", "ai", "r", "c", "ma", "z", "t", "alpha", "an", "A", "al", "sa", "ao", "s", "au", "aa", "am", "ar", "y", "area", "ba", "ca", "ac"], "i": ["\u00ed", "mi", "ki", "xi", "uri", "ci", "p", "di", "ai", "bi", "qi", "yi", "iti", "ic", "ski", "ip", "ri", "si", "iu", "li", "ii", "ji", "v", "ei", "int", "ti", "oi", "ori", "im", "it", "zi", "ini", "ui", "\u0438", "l", "pi", "ati", "phi", "id", "j", "ij", "iri"], "b": ["x", "bf", "ab", "d", "p", "beta", "g", "r", "w", "c", "z", "bi", "o", "h", "f", "bc", "B", "bb", "v", "e", "s", "cb", "l", "j", "y", "bs", "ba"]}}
{"code": "s = str(input())\\nt = str(input())\\nrevise = 0\\nlen_str = len(s)\\nfor i in range(len_str):\\n    if s[i] != t[i]:\\n        revise += 1\\nprint(int(revise))", "target": "123", "substitutes": {"s": ["a", "n", "x", "sw", "str", "ats", "js", "d", "p", "ains", "g", "r", "c", "ts", "m", "ns", "rs", "input", "ins", "h", "ls", "f", "b", "sp", "abs", "S", "ss", "v", "gs", "string", "ws", "sa", "st", "sv", "q", "l", "sts", "cs", "qs", "ds", "ps"], "t": ["tm", "n", "T", "str", "ta", "table", "test", "ct", "template", "txt", "wt", "ts", "m", "type", "gt", "te", "tree", "term", "f", "b", "pt", "ot", "out", "bt", "tt", "it", "tr", "rt", "st", "title", "tmp", "j", "vt", "y", "text"], "revise": ["evised", "rtise", "Reviser", "rtiser", "reverseises", "viser", "reviser", "recisation", " revised", " revising", "devises", " reviser", "devise", "deviser", "Revisation", "reverseiser", "vise", "eviser", "evise", "rtised", "revised", "recise", "evisation", "devisation", "reverseise", "vised", "recises", "Revise", "reciser", "Revised", "revising", "reverseisation", "revisation", "evising", "visation", "revises", "rtising"], "len_str": ["length_arr", "length_Str", "lenpyfr", "len2arr", "len_arr", " len_obj", "length_str", " len_fr", "lenpyarr", "lenpystr", "lenpyobj", " len_arr", "len2len", "len_Str", "len2Str", "length_len", "len2str", "len_fr", "len_len", "len_obj"], "i": ["\u00ed", "mi", "ki", "xi", "x", "str", "ci", "gi", "di", "ai", "I", "r", "us", "c", "m", "batch", "bi", "ami", "qi", "yi", "ic", "ix", "ip", "ind", "f", "num", "multi", "io", "si", "li", "ii", "ji", "v", "ori", "ti", "im", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "j", "k", "index", "ij", "iri"]}}
{"code": "import numpy as np\\n\\nn, k = map(int, input().split())\\na = np.array(list(map(int, input().split())))\\n\\nL = len(f'{10**12:b}')\\nres = 0\\nfor i in range(-1, L):\\n    if i != -1 and not (k >> i) & 1:\\n        continue\\n    val = 0\\n    for j in range(L):\\n        d = np.count_nonzero((a >> j) & 1)\\n        if i < j:\\n            if (k >> j) & 1:\\n                val += (n-d) * 2**j\\n            else:\\n                val += d * 2**j\\n        elif i == j:\\n            val += d * 2**j\\n        else:\\n            val += max(d, n-d) * 2**j\\n    res = max(res, val)\\nprint(res)\\n", "target": "262", "substitutes": {"n": ["N", "x", "gn", "en", "p", "ne", "g", "ian", "dn", "cn", "r", "w", "sn", "c", "z", "m", "ns", "o", "nl", "h", " api", "f", "b", "num", "t", "io", "nb", "len", "mn", "na", "v", "yn", "an", "nan", "size", "nn", "l", "number", "np", " N", "y", "nd", "ry"], "k": ["ck", "km", "ki", "kn", "ek", "kr", "kh", "kl", "ijk", "p", "ak", "ke", "ky", "ks", "kw", "ko", "kind", "b", "tk", "key", "kj", "ikk", "ku", "q", "kk", "ka", "sk", "K", "ik", "mk"], "a": ["x", "ae", "ac", "ab", "ta", "p", "va", "ai", "ak", "r", "c", "ma", "m", "z", "ga", "o", "la", "aaa", "b", "t", "an", "v", "A", "al", "ap", "at", "sa", "ao", "au", "aa", "l", "am", "ar", "data", "ba"], "L": ["dL", "M", "N", "NL", "DL", "T", "PL", "SL", "R", "I", "AL", "Length", "H", "W", "LU", "O", "V", "S", "FL", "LT", "B", "J", "Q", "Li", "P", "LI", "RL", "IL", "LV", "LG", "D", "Lu", "l", "CL", "Size", "LL", "Len", "LE", "K", "F", "LS", "Z", "EL", "C"], "res": ["resolution", "max", "rex", "nt", "resh", "p", "ret", "reset", "rep", "VAL", "re", "Res", "zero", "r", "ref", "vals", "rem", "round", "RES", "ms", "pr", "result", "act", "rel", "vol", "ress", "cons", "ver", "conf", "results", "resp", "out", "pos", "cal", "red", "crit", "des", "rss", "gr", "s", "rest", "rez", "req", "pres", "print", "clus", "progress", "rand", "mem", "reg", "comp", "ps", "sum"], "i": [" ii", "mi", "ki", "xi", "x", "ia", "ni", "ci", "gi", "p", "di", "ai", "I", "m", "bi", "ami", "yi", "iti", "ic", "ix", "o", "ip", "ind", "si", "li", "ii", "ji", "v", "ti", "im", "it", "zi", "ini", "\u0438", "phi", "pi", "ati", "l", "y", "ij", "ik", "iu", "hi"], "val": ["alt", "x", "label", "bal", "err", "pal", "stat", "p", "ret", "ne", "fol", "arr", "eval", "VAL", "aval", "value", "test", "ox", "ref", "vals", "cho", "el", "col", "fail", "pr", "ind", "tx", "elt", "sel", "rel", "vol", "len", "Val", "valid", "rol", "ee", "li", "resp", "key", "v", "cal", "int", "final", "al", "end", "sol", "ol", "div", "addr", "mem", "var", "rand", "vec", "az", "pret", "reg", "data", "pol", "prop"], "j": ["json", "x", "uj", "ja", "str", "ijk", "him", "aj", "js", "p", "g", "jp", "job", "r", "oj", "jc", "z", "m", "jj", "o", "h", "jl", "f", "b", "je", "t", "J", "bj", "li", "ji", "kj", "v", "obj", "xy", "s", "it", "jump", "q", "l", "dj", "u", "y", "ij", "meg", "ort"], "d": ["fd", "den", "ld", "p", "db", "g", "di", "dn", "td", "dh", "r", "w", "z", "m", "dev", "dom", "o", "h", "ind", "dt", "done", "b", "dy", "dat", "t", "da", "dist", "dr", "pd", "v", "e", "ad", "s", "dx", "D", "new", "ed", "div", "dim", "hd", "l", "q", "dd", "sd", "id", "y", "md", "ds", "nd"]}}
{"code": "n = int(input())\\ns = input()\\nans = 0\\ni = 0\\nwhile i < n:\\n    ans += 1\\n    while i + 1 < n and s[i] == s[i + 1]:\\n        i += 1\\n    i += 1\\nprint(ans)\\n", "target": "717", "substitutes": {"n": ["N", "x", "net", "nt", "ni", "ln", "d", "p", "names", "ne", "cn", "sn", "c", "m", "z", "ns", "nl", "f", "b", "num", "fn", "t", "nia", "len", "nb", "no", "mn", "na", "v", "nc", "nm", "un", "nan", "nu", "nn", "l", "q", "np", "number", " N", "network", "j"], "s": ["a", "sb", "ys", "ats", "js", "p", "eds", "g", "w", "c", "ts", "m", "ns", "ies", "rs", "ses", "ins", "sl", "h", "ms", "ls", "abs", "b", "sp", "f", "t", "S", "ss", "si", "tes", "strings", "v", "gs", "e", "sa", "st", "sv", "xs", "csv", "sts", "q", "sis", "l", "u", "cs", "qs", "ds", "bs"], "ans": ["ANS", "ants", "ats", "ints", "actions", "ana", "outs", "ai", "ows", "irms", "aus", "ros", "aned", "ns", "vals", "ann", "rans", "rs", "mas", "anas", "ks", "offs", "ins", "ons", "ms", "amps", "ls", "pan", "ens", "can", "an", "gs", "anks", "iann", "anes", "oss", "terms", "nan", "xs", "au", "nas", "aos", "ands", "vs", "yes", "ads", "cs", "arts", "os", "es", "lan", "ds", "ones"], "i": ["a", "mi", "ki", "xi", "uri", "ci", "gi", "cli", "p", "g", "di", "ai", "I", "this", "iter", "c", "m", "bi", "qi", "yi", "ic", "ix", "ip", "f", "multi", "t", "io", "si", "sim", "ii", "li", "out", "ei", "int", "ti", "oi", "im", "it", "ini", "ui", "zi", "print", "\u0438", "phi", "pi", "l", "u", "id", "index", "j", "ij", "iu", "hi"]}}
{"code": "import math\\nfrom numba import jit\\nn,k=map(int,input().split())\\nh=list(map(int,input().split()))\\n@jit\\ndef a(N,K,H):\\n    s=[0]*n\\n    for i in range(1,N):\\n        total=math.inf\\n        for j in range(1,K+1):\\n            if i-j<0:\\n                break\\n            total=min(total,abs(H[i]-H[i-j])+s[i-j])\\n        s[i]=(total)\\n    print(s[-1])\\na(n,k,h)", "target": "769", "substitutes": {"n": ["a", "nt", "gn", "d", "p", "ne", "cn", "g", "dn", "w", "r", "sn", "c", "m", "ns", "nl", "f", "b", "num", "t", "nb", "ern", "mn", "nv", "na", "v", "yn", "tn", "nc", "an", "nan", "nu", "nn", " fn", "l", "np", "y"], "k": ["ck", "km", "ki", "kn", "ek", "uk", "kr", "kh", "kl", "ak", "ke", "m", "dk", "ks", "o", "ko", "num", "sch", "kok", "ikk", "ku", "q", "kk", "ka", "ik", "sk", "y", "kan", "mk"], "h": ["history", "ht", "sh", "kh", "p", "hz", "hal", "hs", "m", "ih", "rh", "eh", "ah", "host", "bh", "uh", "hl", "hp", "v", "oh", "ph", "ha", "hash", "hw", "he", "hr", "hd", "q", "ho", "l", "hh", "hi", "hm"], "N": ["CNN", "M", "NS", "GN", "NI", "Na", "Ns", "R", "I", "NA", "L", "NM", "NN", "NR", "NT", "NH", "V", "No", "NO", "S", "NE", "J", "ND", "A", "D", "NB", "MN", "Ni", "AN", "TN", "C"], "K": ["Ak", "M", "T", "KN", "KR", "MK", "AK", "X", "I", "KK", "W", "FK", "V", "KS", "KC", "PK", "NK", "S", "IK", "J", "SK", "Q", "B", "Kn", "G", "P", "HK", "Ku", "UK", "KI", "KE", "KA", "C"], "H": ["M", "CH", "Eh", "HD", "T", "HM", "HP", "HS", "HL", "RH", "L", "HO", "HI", "GH", "NH", "W", "HR", "DH", "V", "HH", "S", "B", "J", "Q", "HA", "P", "A", "OH", "HK", "HC", "MH", "Y", "HB", "High", "hh", "F", "HT", "He"], "s": ["a", "sb", "x", "seconds", "sum", "services", "ats", "js", "p", "g", "w", "hs", "sys", "c", "ts", "m", "r", "ns", "z", "rs", "ses", "ins", "sl", "ms", "ls", "abs", "b", "sp", "f", "t", "S", "ss", "its", "als", "v", "e", "gs", "sq", "strings", "ws", "sa", "sv", "sts", "q", "vs", "rates", "os", "es", "stats", "qs", "ds", "ps"], "i": ["mi", "ki", "xi", "x", "ia", "ni", "me", "ci", "gi", "p", "di", "ai", "I", "jp", "m", "z", "bi", "ami", "yi", "info", "ic", "ix", "o", "ip", "ind", "multi", "t", "io", "si", "li", "ii", "ji", "v", "int", "ti", "im", "it", "ini", "zi", "ui", "\u0438", "l", "pi", "id", "y", "ij", "ik", "index", "iu", "asi"], "total": ["Total", "next", "json", "net", "complete", "max", "to", "otal", "void", "summary", "general", "local", "ta", "mu", "system", "human", "quant", "this", "value", "zero", "raw", "current", "m", "created", "full", "note", "o", "gross", "result", "done", "you", "stable", "t", " Total", "initial", "valid", "private", "out", "null", "both", "available", "all", "final", "normal", "now", "shared", "public", "equal", "new", "other", "base", "serial", "tmp", "relative", "real", "eta", "basic", "temp", "last", "sum"], "j": [" ii", " iii", "x", "uj", "kh", "ja", "ijk", "js", "aj", "d", "p", "g", "di", "jp", "iaz", "r", "jc", "oj", "z", "m", "jj", "o", "jl", "f", "b", "jac", "t", "J", "bj", "li", "ji", "kj", "v", "e", "it", "jo", "q", "l", "dj", "u", "y", "jit", "ij", "ik"]}}
{"code": "a,b = input().split()\\nx = int(a+b)\\n\\nif int(x**(1/2)) == x**(1/2):\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "271", "substitutes": {"a": ["ia", "sta", "ae", "ac", "ab", "era", "ta", "d", "ach", "va", "ai", "r", "\u00e1", "ma", "ata", "eas", "la", "act", "f", "part", "alpha", "art", "da", "na", "an", "e", "al", "A", "at", "sa", "af", "ao", "au", "oa", "aa", "l", "ar", "ba", "ca"], "b": ["bis", "body", "n", "sb", "ab", "d", "db", "sub", "g", "ib", "bg", "c", "bi", "fb", "bo", "rb", "by", "mb", "be", "ob", "bc", "gb", "nb", "B", "bb", "v", "eb", "ed", "base", "cb", "l", "bp", "bin", "j", "y", "ub", "bs"], "x": ["wx", "n", "xi", "ex", "xe", "d", "p", "g", "xc", "test", "xa", "X", "i", "rx", "w", "c", "ox", "z", "xt", "hex", "val", "tx", "ax", "f", "xd", "num", "t", "v", "e", "int", "xy", "xs", "mx", "xb", "dx", "xx", "l", "u", "y", "xp", "xf"]}}
{"code": "n, m = map(int, input().split())\\n\\na = []\\nb = list((0 for i in range(m)))\\n\\nfor i in range(n):\\n    a.append(list(map(int, input().split())))\\n    \\nfor a_ in a:\\n    k = a_[0]\\n    for k_ in range(k):\\n        b[(a_[k_ + 1]) - 1] += 1\\n        \\nans = 0\\nfor b_ in b:\\n    if b_ == n:\\n        ans += 1\\nprint(ans)", "target": "556", "substitutes": {"n": ["nr", "N", "x", "nt", "ln", "d", "p", "ne", "g", "sn", "r", "c", "w", "z", "ns", "o", "h", "f", "num", "t", "nia", "len", "nb", "no", "mn", "na", "an", "v", "e", "nc", "nm", "s", "nu", "nn", "q", "pi", "np", "j"], "m": ["tm", "mi", "km", "M", "mr", "me", "mod", "dm", "d", "p", "mm", "r", "c", "ma", "mut", "man", "mas", "bm", "rm", "gm", "h", "ms", "mis", "mc", "mn", "v", "nm", "sm", "mun", "l", "mat", "cm", "mt", "mk"], "a": ["to", "ae", "sta", "ab", "aff", "ta", "p", "d", "ana", "va", "ama", "ai", "xa", "w", "c", "ma", "eas", "ga", "o", "ea", "la", "aaa", "pa", "f", "abs", "t", "alpha", "apa", "an", "all", "A", "up", "at", "sa", "ao", "au", "oa", "aa", "l", "am", "ar", "area", "ba", "ca", "ac"], "b": ["bis", "sb", "bu", "to", "ab", "bar", "d", "p", "db", "g", "ib", "c", "bi", "wb", "pb", "fb", "ga", "rb", "bo", "o", "mb", "be", "ob", "bh", "br", "gb", "B", "bb", "out", "v", "xb", "eb", "cb", "l", "u", "j", "y", "bs", "ba"], "i": [" ii", "ki", "x", "ia", "ie", "ci", "gi", "di", "ai", "I", "bi", "ic", "o", "ip", "ri", "io", "li", "ii", "ji", "e", "ti", "im", "it", "ini", "zi", "pi", "il", "j", "ik", "ij", "iu"], "a_": ["A_", "l_", "ack_", "sa_"], "k": ["ck", "km", "ki", "kn", "ek", "kr", "kh", "kl", "ijk", "ak", "ke", "kid", "ks", "kw", "ko", "tk", "kok", "key", "kj", "ikk", "ku", "wk", "q", "kk", "ka", "sk", "K", "ik", "mk", "unk"], "k_": ["ok_", " kx", "isk_", "K_", "akx", "ak_", "isk\u00a0", "kx", "ak\u00a0", "kid_", "iskx"], "ans": ["ANS", "ants", "ats", "ints", "eds", "outs", "acs", "aus", "ros", "lines", "aned", "ts", "ates", "ns", "vals", "ann", "ums", "rs", "mas", "ks", "anas", "offs", "ins", "ras", "ons", "ms", "amps", "ls", "ens", "ations", "ots", "orders", "uns", "can", "an", "posts", "anks", "aps", "s", "nas", "ands", "aos", "ads", "cs", "arts", "os", "es", "orts", "olds"], "b_": ["wb_", "wb___", "ba_", "n_", "a___", "ba___", "b___"]}}
{"code": "import numpy as np\\nn,m=map(int,input().split())\\ns=np.zeros(n+1)\\nfor i in range(m):\\n    a,b=map(int,input().split())\\n    s[a]+=1\\n    s[b]+=1\\nprint(\"NO\" if sum(s%2)else\"YES\")", "target": "486", "substitutes": {"n": ["N", "nt", "gn", "d", "p", "on", "cn", "sn", "r", "c", "ns", "note", " sn", "o", "nl", " ng", "num", " gn", "nia", "len", "nb", " l", "mn", "na", "v", "yn", "nc", "nm", " ns", "nan", "nu", "nn", " fn", "l", "np", " N", "j", "nd", " na"], "m": ["tm", "mi", "km", "M", "mr", "mod", "dm", "d", "p", "mo", "mm", "g", "r", "c", "mos", "man", "bm", "o", "gm", "ms", "f", "num", "mis", "mc", "mn", "v", "nm", "om", "l", "j", "y", "cm", "mt"], "s": ["bis", "sb", "ogs", "services", "ats", "js", "p", "eds", "g", "fs", "erences", "c", "ts", "z", "ies", "ns", "rs", "ses", "tests", "ins", "ms", "ls", "abs", "f", "S", "ss", "its", "comments", "gs", "sq", "ws", "sa", "sv", "so", "csv", "sts", "l", "sis", "vs", "cs", "se", "os", "changes", "stats", "qs", "ds", "ps", "bs", "sync"], "i": ["x", "me", "ci", "um", "p", " j", "I", "r", "c", "z", "col", "ip", "ind", "f", "li", "e", "im", "q", "l", "pi", "k", "y", "j"], "a": ["ia", "sta", "ae", "ac", "ab", "aj", "ach", "va", "r", "c", "ma", "el", "ga", "ant", "ea", "la", "aaa", "admin", "ax", "da", "an", "A", "at", "sa", "af", "ao", "app", "aa", "l", "ar", "ka", "ba", "ca"], "b": ["bis", "sb", "ab", "d", "emb", "db", "ib", "r", "c", "z", "bi", "wb", "rb", "o", "be", "ob", "f", "br", "bc", "t", "nb", "B", "bb", "v", "e", "lab", "eb", "app", "cb", "l", "j", "y", "bs", "ba"]}}
{"code": "#list\u306e\u8981\u7d20\u3092\u30ad\u30fc\u3001\u305d\u306e\u51fa\u73fe\u6570\u3092\u5024\u3068\u3057\u3066\u6301\u3064\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u3092\u8fd4\u3059\\ndef count(list):\\n    dict = {}\\n    for i in range(len(list)):\\n        dict[list[i]] = dict.get(list[i], 0) + 1\\n    return dict\\n\\nn = int(input())\\ns = []\\nfor _ in range(n):\\n    s.append(input())\\n\\ndic = count(s)\\nlst = sorted(dic.items(), key=lambda x: x[1], reverse=True)\\nvalue_max = lst[0][1]\\noutput = []\\n\\nfor name in lst:\\n    if name[1] == value_max:\\n        output.append(name[0])\\n    else:\\n        break\\n\\noutput.sort()\\nprint(*output,sep=\"\\n\")", "target": "750", "substitutes": {}}
{"code": "A =list(map(int, input().split()))\\nif A[0]+A[1]>=A[2]:\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "618", "substitutes": {"A": ["a", "GA", "ETA", "M", "N", "T", "An", "Alpha", "AU", "R", "I", "mA", "L", "NA", "AL", "AV", "AST", "AE", "H", "LA", "AA", "As", "V", "WA", "AR", "RAM", "AS", "S", "ANG", "B", "G", "AP", "HA", "P", "CA", "You", "AY", "JA", "D", "TA", "AF", "Array", "AM", "Alice", "SA", "AC", "F", "AN", "ACT", "EA", "BA", "C"]}}
{"code": "N = int(input())\\ndp = [float('inf')]*(N+1)\\ndp[0] = 0\\nfor i in range(N+1):\\n    if i+1 <= N:\\n        dp[i+1] = min(dp[i+1],dp[i]+1)\\n    for j in range(1,N+1):\\n        if i + 6**j > N:\\n            break\\n        dp[i+6**j] = min(dp[i+6**j],dp[i]+1)\\n    for k in range(1,N+1):\\n        if i + 9**k > N:\\n            break\\n        dp[i+9**k] = min(dp[i+9**k],dp[i]+1)\\nprint(dp[N])", "target": "460", "substitutes": {"N": ["SN", "CNN", "Name", "n", "M", "NS", "T", "INT", "NL", "NV", "NC", "GN", "NI", "Na", "Ns", "R", "I", "NA", "L", "NM", "Number", "NN", "NP", "NR", "CN", "NT", "NOR", "NH", "ANY", "Node", "NF", "V", "SIZE", "NO", "NOTE", "NUM", "S", "MAN", "NE", "PN", "J", "ND", "P", "Num", "FN", "Sn", "D", "OUT", "NB", "Size", "MN", "Ni", "K", "F", "AN", "UN", "TN", "NG", "C"], "dp": ["pkg", "osp", "dro", "pm", "dos", "dm", "d", "p", "db", "cd", "ep", "vp", "dial", "jp", "deep", "dh", "dl", "fp", "pb", "ctx", "ga", "gp", "bsp", "wd", "tp", "decl", "ip", "dt", "df", "dc", "dep", "isp", "DP", "wp", "its", "lp", "pd", "dr", "resp", "tap", "drop", "delay", "cp", "deb", "ssl", "bps", "eb", "tf", "dx", "csv", "dq", "pipe", "bp", "dd", "dj", "np", "lat", "px", "pp", "ds", "ps", "xp", "adr"], "i": ["\u00ed", "mi", "iii", "ki", "xi", "x", "ia", "uri", "ie", "ci", "gi", "ir", "cli", "name", "g", "di", "uli", "ai", "I", "this", "iter", "m", "bi", "ami", "status", "qi", "info", "ic", "ix", "o", "ip", "iri", "ind", "multi", "ri", "io", "si", "eu", "ion", "li", "ii", "ji", "ei", "v", "int", "ti", "key", "oi", "e", "iy", "im", "it", "zi", "ini", "ui", "\u0438", "phi", "pi", "item", "id", "y", "index", "ij", "ik", "fi", "iu"], "j": ["json", "n", " dj", "x", "uj", "kh", "ja", "ijk", "kl", "str", "err", "js", "d", "p", "aj", "ct", "jp", "job", "r", "jc", "oj", "z", "jj", "ju", "pr", "jl", "ax", "br", "b", "kok", "J", "bj", "ji", "kj", "v", "jas", "gov", "obj", "adj", "jump", "jo", "q", "dj", "y", "op", "ij", "cr", "er", "jam", "ort"], "k": ["ck", "km", "ki", "ek", "uk", "x", "kr", "kh", "kl", "ijk", "p", "kar", "ak", "ke", "kid", "w", "ky", "z", "dk", "ks", "kw", "h", "tk", "kok", "key", "kj", "ok", "kick", "ikk", "ku", "ark", "kat", "q", "kt", "wk", "u", "kk", "ka", "sk", "K", "ik", "cr", "kg", "kan", "mk"]}}
{"code": "x = input()\\na, b, c = tuple(x.split())\\na = int(a)\\nb = int(b)\\nc = int(c)\\n\\nif a < b and b < c:\\n\tprint(\"Yes\")\\nelse:\\n\tprint(\"No\")", "target": "554", "substitutes": {"x": ["wx", "n", "xi", "ex", "xe", "p", "ux", "xc", "X", "xa", "rx", "w", "ox", "z", "xml", "input", "ix", "h", "tx", "ax", "f", "t", "v", "fx", "xy", "s", "xs", "xx", "l", "y", "px", "xp", "xf"], "a": ["aq", "ia", "sta", "ae", "ab", "aff", "ta", "d", "p", "g", "ai", "ak", "i", "r", " A", "ma", "eas", "ea", "la", "be", "aaa", "act", "ax", "alpha", "da", "an", "e", "v", "A", "al", "at", "sa", "ao", "access", "s", "ity", "au", "oa", "aa", "l", "am", "ar", "ba", "ca", "ac"], "b": ["bis", "n", "sb", "bf", "ab", "bar", "d", "db", "beta", "g", "ib", "i", "blue", "r", "reb", "bi", "fb", "ble", "rb", "bo", "by", "o", "mb", "h", "be", "ob", "br", "f", "bc", "gb", "t", "nb", "B", "bb", "v", "e", "eb", "base", "cb", "bl", "l", "bp", "u", "j", "y", "k", "bound", "bs", "ba"], "c": ["ec", "ctrl", "ce", "lc", "n", "con", "ci", "d", "cd", "ct", "rc", "cy", "category", "tc", "chain", "m", "fc", "h", "cur", "f", "bc", "mc", "dc", "conf", "sc", "can", "e", "v", "cin", "cache", "cos", "crit", "cp", "cc", "com", "co", "cb", "cu", "etc", "cs", "cm", "cr", "cf", "C", "ac"]}}
{"code": "# D - Recording\\n\\nN, C = map(int, input().split())\\nmax_time = 10**5\\ngantt = [[0] * (max_time + 1) for _ in range(C+1)]\\nstc = []\\n\\nfor _ in range(N):\\n    stc.append(list(map(int, input().split())))\\n    \\nstc = sorted(stc, key = lambda x: x[0])\\nstc = sorted(stc, key = lambda x: x[2])    \\n\\nfor idx in range(N):\\n    s, t, c = stc[idx][0], stc[idx][1], stc[idx][2]\\n    try:\\n        if stc[idx-1][2] == c and stc[idx-1][1] == s:\\n            gantt[c][s+1] += 1\\n        else:\\n            gantt[c][s] += 1\\n    except IndexError:\\n        gantt[c][s] += 1\\n    if t+1 <= max_time:\\n        gantt[c][t+1] -= 1\\n\\nfor c in range(C+1):\\n    for idx in range(1, max_time+1):\\n        gantt[c][idx] += gantt[c][idx-1]\\n    \\nimport numpy as np\\nprint(np.max(np.sum(gantt, axis = 0)))", "target": "632", "substitutes": {}}
{"code": "s = list(input())\\nt = list(input())\\nfor i in range(len(s)) :\\n    s = s[1:] + s[:1]\\n    if s == t :\\n        print(\"Yes\")\\n        break\\nelse :\\n    print(\"No\")\\n", "target": "721", "substitutes": {"s": ["a", "n", "sb", "x", "sw", "state", "str", "ats", "js", "p", "spec", "g", "w", "hs", "c", "ts", "m", "ns", "rs", "ins", "less", "sl", "h", "ms", "ls", "f", "b", "sp", "gins", "S", "ss", "si", "parts", "v", "strings", "gs", "sq", "sa", "sv", "st", "xs", "sts", "l", "q", "cs", "j", "os", "qs", "ds", "ps", "bs"], "t": ["tm", "n", "T", "ta", "lt", "p", "test", "ct", "tw", "w", "wt", "txt", "tc", "ts", "m", "type", "gt", "te", "o", "tree", "dt", "pt", "ot", "v", "bt", "list", "at", "tt", "it", "tr", "rt", "st", "title", "l", "j", "vt", "mt"], "i": [" ii", "n", "x", "ite", "p", " j", "I", "iter", "r", "c", "ic", "ind", "f", "li", "e", "ti", "im", "it", "q", "id", "j", "k"]}}
{"code": "n,a,b=map(int,input().split())\\n\\nmod=10**9+7\\n\\nans=pow(2,n,mod)-1\\n\\nna=1\\nnb=1\\n\\nansa=1\\nansb=1\\n\\nfor i in range(1,a+1):\\n  na*=i\\n  na%=mod\\n  \\nfor i in range(n,n-a,-1):\\n  ansa*=i\\n  ansa%=mod\\n  \\nansa*=pow(na,mod-2,mod)\\n\\nfor i in range(1,b+1):\\n  nb*=i\\n  nb%=mod\\n  \\nfor i in range(n,n-b,-1):\\n  ansb*=i\\n  ansb%=mod\\n  \\nansb*=pow(nb,mod-2,mod)\\n\\nans-=ansa\\nans-=ansb\\n\\nans%=mod\\n\\n\\nprint(ans)\\n", "target": "580", "substitutes": {"n": ["N", "x", "net", "nt", "d", "p", "en", "names", "name", "ne", "cn", "sn", "r", "c", "w", "m", "z", "ns", "note", "o", "ms", "num", "t", "len", "nor", "no", "mn", "non", "out", "v", "an", "nc", "nm", "all", "s", "nan", "nu", "size", "nn", "l", "yes", "np", "ll", "ng", "j", "rn"], "a": ["ia", "sta", "ae", "ac", "ab", "aff", "ta", "p", "aj", "va", "ai", "ate", "c", "ma", "ga", "ea", "la", "aaa", "act", "ax", "alpha", "an", "al", "ap", "A", "at", "sa", "app", "au", "oa", "aa", "am", "ar", "ba", "ca", "ao"], "b": ["bis", "body", "sb", "ab", "d", "p", "db", "ib", "r", "c", "m", "z", "bi", "pb", "rb", "o", "be", "ob", "br", "bc", "t", "B", "bb", "v", "e", "s", "eb", "bl", "cb", "l", "u", "j", "y", "bs", "ba"], "mod": ["perm", "sign", "p", "mm", "mp", "cod", "set", "module", "od", "sed", "man", "ident", "ms", "ind", "num", "tab", "sim", "check", "mem", "sd", "id", "rand", "reg", " mods", "lex", "cm", "max", " Mod", "ld", "med", "test", "Mod", "pre", "scale", "m", "mut", "min", "step", "trans", "cond", "len", "mn", "poly", "crit", "post", "debug", "magic", "deg", "rad", "modified", "mods", "lib", "d", "spec", "fun", "complex", "ox", "pad", "mad", "term", "dig", "add", "un", "red", "com", "mag", "good", "md", "mode", "tm", "MOD", "method", "san", "sec", "tag", "mac", "valid", "ver", "ad", "final", "clean", "base", "mun", "comp", "temp", "ac"], "ans": ["ars", "x", "unes", "ANS", "ians", "ats", "ants", " answers", "An", " means", "eds", "aus", "aned", "san", " Ans", "ates", "ns", "ann", "rans", "man", "mas", "anas", "leans", " spans", "ins", "ks", "offs", "eas", "ons", "ms", "amps", "angs", "ls", "ids", "ents", "ens", "ots", "cons", "uns", "an", "jas", "iann", "aps", "anes", " ns", " scans", "ays", "s", "eps", "oss", " es", "ed", "ams", "nas", "ands", "rates", "ads", "arts", "cs", "os", "es", "AN", "ds", "ps", "orts"], "na": ["ia", "ae", "ni", "nt", "ja", "ac", "ta", "ano", "ne", "Na", "cn", "ai", "xa", "ota", "NA", "nat", "ane", "ma", "ns", "ny", "osa", "ata", "ea", "pa", "la", "asa", "nia", "una", "no", "da", "wa", "mn", "an", "qa", "sa", "nz", "nan", "none", "ha", "nas", "nu", "ona", "oa", "au", "nn", "aa", "np", "y", "ba", "ca", "ao"], "nb": ["nr", "sb", "nob", "nt", "ni", "bf", "db", "ne", "cn", "nda", "ib", "bg", "sn", "bd", "ns", "bi", "wb", "pb", "ny", "hn", "nie", "rb", "bm", "nl", "mb", "ob", "kb", "gb", "nia", "zb", "nit", "bb", "mn", "nv", "bn", "nc", "nz", "eb", "nu", "cb", "nn", "NB", "np", "ub", "bs", "nd"], "ansa": ["anna", "ansea", "cesar", "ansar", "ANSa", "osb", "leansan", "ussa", "osan", "usea", "ens1", "ransity", "cesn", "ansca", "ana", "ansn", "aida", "ase", "ensna", " ansan", "anea", " ansity", "ensn", "ansai", "ane", "ansity", "osa", " ansai", "aidas", "ansan", "ANSan", "ANSae", "cesa", "ksn", "asa", "leans1", "leansas", "annai", "asea", "ansae", "ransca", "ksa", "cesna", "ensar", "aid1", "leansa", "usa", " ansca", "anse", "ans1", "ensa", "ansas", " ansae", "assa", "ensas", "aidan", "anssa", "ksna", "ansna", "ksar", "annity", "ransa", "ANSb", "annca", "ransai", "osae", "ensan", "use"], "ansb": ["antsby", "anasn", "aosdb", "ationsdb", "anesba", "ansbody", "anesn", "onsa", "anesb", "msa", "ansn", "anascb", "ansba", "nsby", "nsa", "ansbg", "antsb", " ansbody", "ationsa", "ann", "nsb", "ansc", "ansby", "antsbg", "onsnb", "aosb", "ansnb", "ensor", "anba", "ansdb", "onsor", "msb", "anc", "anesc", "anscb", "ationsnb", "onsdb", "aosa", "ensb", "ansor", "ensa", "anasbody", "aosnb", "anasb", "antsa", "mscb", "anasor", "anasba", "anasc", "anasdb", "msbody", "anb", " anscb", "anasby", "ensdb", "ationsb", "anasbg", "onsb", "anasa", "nsbg"], "i": ["\u00ed", "mi", "xi", "iii", "ia", "ki", "ie", "ql", "ci", "gi", "ir", "cli", "p", "g", "di", "ib", "ai", "I", "m", "yi", "info", "iti", "itime", "ic", "o", "ix", "ip", "h", "f", "si", "li", "ii", "ji", "v", "ei", "e", "ti", "oi", "adi", "iy", "im", "it", "ini", "zi", "q", "phi", "pi", "ati", "l", "id", "y", "j", "index", "ik", "ij", "iu", "hi"]}}
{"code": "N=int(input())\\n\\nA=list(map(int,input().split()))\\n\\nmod=10**9+7\\nsummy=[]\\na=0\\nfor i in range(N):\\n    a += A[i]\\n    a %= mod\\n    summy.append(a)\\n\\nans=0\\nfor i in range(N-1):\\n    ans += summy[N-2-i]*A[N-1-i]\\n    ans %= mod\\nprint(ans)", "target": "198", "substitutes": {"N": ["SN", "CNN", "Name", "M", "n", "NS", "T", "IT", "IX", "GN", "KEY", "NI", "Ns", "I", "NA", "L", "NM", "NN", "NP", "CN", "NR", "NT", "V", "TN", "No", "NO", "SIZE", "NOTE", "NUM", "S", "MAN", "B", "J", "Q", "ND", "Num", "P", "D", "NB", "Y", "CL", "Size", "Len", "Ni", "K", "F", "Z", "REM", "FN", "C"], "A": ["GA", "Answer", "All", "An", "IA", "Alpha", "Abs", "AT", "X", "mA", "I", "NA", "Map", "AL", "AB", "App", "AE", "Auth", "AA", "LA", "As", "WA", "AI", "AS", "S", "EA", "B", "Address", "P", "HA", "CA", "At", "JA", "AF", "TA", "AM", "SA", "AC", "ACT", "AN", "The", "Array", "AP"], "mod": ["rot", "perm", "MOD", "modified", "sign", " Mod", "mods", "lib", "dir", "sub", "spec", "mult", "Mod", "fun", "AD", "re", "zero", "scale", "san", "m", "set", "od", "OD", "module", "man", "prime", "ident", "sed", "min", "step", "sec", "ms", "term", "grow", "dig", "sim", "bit", "add", "debug", "tr", "com", "div", "mag", "mut", "pro", "mode", "sum"], "summy": ["summ", "vatum", "vummy", "votted", "psumm", "summies", "ssotted", "Szero", "vzero", "sotted", "psatum", "tsatum", "esummies", " summ", "Summy", " szero", "ssatum", "Satum", "tszero", "tsummies", "szero", "ssummy", "satum", "sszero", "eszero", " summies", "psummy", "Summ", "esummy", " satum", "pszero", "tsummy", " sotted", "esatum"], "a": ["n", "sta", "ae", "ac", "ab", "ta", "g", "va", "ai", "r", "ma", "ita", "ata", "eas", "ga", "o", "ea", "pa", "la", "aaa", "fa", "act", "f", "b", "alpha", "art", "da", "ua", "apa", "na", "an", "att", "all", "at", "af", "s", "sa", "ao", "au", "oa", "aa", "am", "ar", "ka", "j", "ya", "area", "ba", "ca"], "i": ["iii", "mi", "ki", "n", "xi", "x", "ia", "gu", "ci", "gi", "cli", "d", "vi", "di", "ai", "I", "ih", "bi", "qi", "yi", "iti", "ic", "ski", "ix", "ip", "h", "ind", "ri", "t", "io", "si", "ii", "li", "ji", "ei", "ori", "v", "ti", "oi", "iy", "im", "it", "s", "zi", "ini", "ui", "ish", "phi", "pi", "l", "id", "j", "index", "y", "ij", "ik", "iu", "hi"], "ans": ["ars", "ys", "ANS", "ants", "ats", "ians", "eds", "ai", "aus", "us", "aned", "ates", "ns", "ann", "ums", "mas", "rs", "anas", "leans", "ks", "ins", "offs", "ras", "ons", "ms", "angs", "amps", "ls", "ents", "ens", "ations", "uns", "can", "an", "anks", "aps", "oss", "terms", "s", "nas", "aos", "vs", "arts", "es", "os"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\n\\nB = A.copy()\\n\\nK = 0\\n\\nfor i in range (0, N):\\n\tif A[i] < 0:\\n\t\tB[i] = -1*B[i]\\n\t\tK+=1\\n\\nTashita = sum(B)\\n\\nif K%2 != 0:\\n\tTashita-=2*min(B)\\n\\nprint(Tashita)", "target": "579", "substitutes": {"N": ["SN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "I", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "V", "No", "NO", "S", "J", "G", "ND", "Num", "P", "D", "NB", "Ni", "Z", "FN", "C"], "A": ["a", "GA", "All", "API", "An", "IA", "AH", "Alpha", "AU", "AT", "mA", "ACC", "I", "L", "Av", "AL", "AV", "AB", "App", "AE", "H", "AA", "LA", "As", "C", "AS", "S", "G", "This", "HA", "P", "CA", "At", "AY", "JA", "AF", "First", "AM", "SA", "U", "AC", "ACT", "BA", "Array", "Ag", "The", "AP"], "B": ["LB", "BI", "M", "CB", "T", "RB", "BL", "BS", "VB", "Bs", "Ben", "SB", "R", "I", "Big", "L", "IB", "Builder", "AB", "Reb", "BG", "BW", "H", "C", "BP", "b", "Bar", "BC", "BE", "S", "J", "BR", "GB", "PB", "WB", "G", "BB", "BM", "Bern", "TB", "D", "NB", "EB", "BO", "DB", "BA", "BY", "Blue"], "K": ["Ak", "M", "T", "Key", "KR", "MK", "AK", "KEY", "Power", "R", "I", "L", "KK", "ANK", "Kind", "Disk", "H", "W", "V", "KS", "TH", "PK", "KC", "S", "IK", "J", "Q", "G", "SK", "P", "Ka", "HK", "Mask", "VK", "D", "Init", "Y", "OK", "UK", "k", "U", "The", "KI", "Z", "KA", "C"], "i": ["a", "mi", "ki", "n", "xi", "x", "uri", "me", "gi", "di", "ai", "I", "us", "batch", "bi", "qi", "info", "ski", "ix", "ic", "ip", "ind", "b", "multi", "io", "si", "sim", "li", "key", "ji", "v", "ori", "ii", "ti", "s", "it", "ini", "zi", "ui", "spin", "pi", "id", "k", "index", "j", "asi", "ij", "iri", "chain"], "Tashita": ["Tashit", "Tashai", "Tatuti", "Taashitas", "Tushiga", "Taashita", "Vatati", "Tasheditas", "Taushiga", "Tushta", "Tushati", "Vashita", "Taaiita", "Vatita", "Tashuti", "Tushit", "Tashedit", "Taashuti", "Taiitas", "Taaiitas", "Tatati", "Tahita", "Tushai", "Taaiit", "Taashit", "Vashati", "Taiai", "Tashedita", "Tatiga", "Tashta", "Vatta", "Vashit", "Tashati", "Tahati", "Taushati", "Tahiga", "Taiita", "Tatita", "Tashiga", "Tashitas", "Takati", "Takit", "Vashta", "Tatta", "Taaiai", "Tushita", "Takita", "Takta", "Taushuti", "Tushuti", "Taashiga", "Taashati", "Vatit", "Tashedai", "Tushitas", "Tatit", "Taiit", "Taashai", "Taushita", "Tahuti"]}}
{"code": "n, m, l = map(int, input().split())\\nA = [list(map(int, input().split())) for _ in range(n)]\\nB = [list(map(int, input().split())) for _ in range(m)]\\n\\nfor i in range(n):\\n    t = [str(sum([A[i][k] * B[k][j] for k in range(m)])) for j in range(l)]\\n    print(\" \".join(t))", "target": "684", "substitutes": {"n": ["a", "nr", "N", "x", "net", "nt", "ln", "d", "p", "on", "ne", "g", "r", "sn", "c", "ns", "o", "nl", "h", "num", "nb", "no", "mn", "na", "an", "v", "nc", "nm", "un", "s", "nan", "nu", "q", "nn", "np", "pi", "y"], "m": ["a", "mi", "M", "mr", "x", "dm", "d", "p", "mm", "g", "r", "c", "ma", "ml", "z", "bm", "o", "gm", "h", "ms", "b", "mc", "mn", "v", "e", "sm", "s", "q", "y", "md", "cm", "mt"], "l": ["lc", "ln", "lt", "p", "ul", "L", "r", "lines", "c", "ml", "dl", "el", "o", "nl", "sl", "h", "ls", "b", "len", "lis", "lo", "lp", "li", "v", "list", "al", "lv", "lock", "pl", "ll", "le", "lin"], "A": ["GA", "M", "N", "Ax", "T", "All", "Al", "An", "IA", "Ar", "Alpha", "AT", "R", "X", "I", "L", "Map", "AL", "AST", "ACC", "App", "AB", "AE", "H", "AA", "As", "Att", "AR", "S", "This", "HA", "Ass", "Ant", "At", "Acc", "ATA", "SA", "The", "AC", "ACT", "K", "Array", "AP"], "_": ["mod", " the", "mm", "mo", "__", "ox", "mut", "ix", "ms", "val", "____", "pt", " __", "___"], "B": ["But", "M", "N", "BI", "CB", "T", "MB", "RB", "VB", "BS", "BL", "OB", "Bs", "SB", "R", "L", "AB", "BG", "V", "BT", "C", "b", "S", "BE", "BC", "J", "BR", "WB", "GB", "G", "PB", "BB", "BM", "TB", "FB", "D", "EB", "NB", "BF", "Bytes", "BA", "Blue"], "i": ["a", "mi", "ki", "xi", "x", "ia", "ci", "gi", "p", "di", "I", "z", "bi", "yi", "ic", "o", "ix", "ri", "si", "li", "ii", "v", "ei", "ti", "im", "it", "ini", "zi", "ui", "pi", "u", "y", "ik", "ij"], "t": ["a", "comment", "ty", "T", "to", "str", "ta", "p", "d", "g", "test", "template", "wt", "txt", "c", "ts", "total", "message", "o", "te", "h", "term", "f", "yellow", "b", "pt", "ot", "tu", "comments", "v", "at", "tt", "it", "tr", "tf", "trace"], "k": ["ck", "km", "ki", "x", "kr", "kh", "kl", "ijk", "p", "ke", "kid", "r", "z", "jj", "ks", "o", "kw", "ko", "tk", "key", "kj", "v", "ku", "q", "wk", "u", "kk", "ka", "K", "ik", "ij", "kg", "sk", "mk", "unk"], "j": ["json", "x", "uj", "ja", "aj", "js", "p", "di", "jp", "r", "jc", "z", "jj", "o", "h", "pr", "jl", "br", "b", "jac", "rel", "pt", "J", "ot", "ji", "kj", "v", "obj", "im", "q", "dj", "u", "ij", "ik"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport fractions\\nn = int(input())\\na = list(map(int, input().split()))\\n\\n\\nvalue = a[0]\\nfor i in range(1, n):\\n    value = fractions.gcd(value, a[i])\\nprint(value)\\n\\n", "target": "534", "substitutes": {}}
{"code": "N, M = map(int, input().split())\\nscores = [[] for _ in range(8)]\\n\\nfor i in range(N):\\n  x, y, z = map(int, input().split())\\n  scores[0].append(x+y+z)\\n  scores[1].append(x+y-z)\\n  scores[2].append(x-y+z)\\n  scores[3].append(-x+y+z)\\n  scores[4].append(x-y-z)\\n  scores[5].append(-x+y-z)\\n  scores[6].append(-x-y+z)\\n  scores[7].append(-x-y-z)\\n\\nmax_num = -1\\nfor i in range(8):\\n  tmp = scores[i]\\n  tmp.sort(reverse=True)\\n  sum_num = sum(tmp[:M])\\n  if max_num < sum_num:\\n    max_num = sum_num\\n\\nprint(max_num)", "target": "390", "substitutes": {"N": ["CNN", "n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "X", "I", "NA", "L", "NM", "NN", "NR", "NT", "NH", "H", "V", "NO", "NUM", "S", "J", "ND", "Num", "P", "A", "D", "NB", "Y", "MN", "Ni", "U", "K", "F", "Z", "C"], "M": ["T", "CM", "MU", "R", "I", "JM", "L", "X", "NM", "MX", "RM", "m", "MM", "V", "MC", "NUM", "S", "MAN", "B", "J", "P", "A", "E", "D", "DM", "Y", "MN", "MI", "MT", "U", "LM", "K", "F", "Z", "PM", "C"], "scores": ["captrollers", "scributes", "quores", "SCales", "captores", "congores", " scredits", "quredits", "scrollers", "congonents", "captonents", "SCores", "scendants", "captreens", "escores", "screenshots", "scales", " scefficients", "escefficients", "bcores", "Scales", "messreens", "captaches", "captients", "scuracy", "scorers", "scors", "scheuracy", "cales", "bcaches", " scuracy", "uscors", "scrates", "bcrollers", "messores", "scheors", " scrates", "messrates", " scaves", " scults", "escors", "screens", "scefficients", "uscores", "systemults", "quors", "quaves", "captefficients", "cors", "messients", "SCors", "SCefficients", " sconents", "Scrollers", "crollers", "Scores", "sconents", "Scors", "uscabilities", "bcributes", " scients", " scales", " scabilities", "escredits", "uscaves", " scendants", "Scefficients", "scults", "scheredits", " scorers", "captendants", " scors", "bcrates", "scients", "messributes", "schereenshots", "scheaches", " screens", "messefficients", "scabilities", "messaches", "congendants", "scherollers", "messrollers", "scheults", "systemores", "systemuracy", "messreenshots", "scaves", "captreenshots", "quabilities", "quefficients", " scaches", "systemredits", "scredits", "scheores", " scributes", "captorers", "scheonents", "congorers", " scrollers", "bconents", "cores", "scaches", "scheefficients"], "_": [" n", " num", " all", "ix", "val", " int", " m", " __", " index", " p"], "i": ["mi", "n", "xi", "gu", "ci", "gi", "p", "di", "ai", "I", "iter", "r", "m", "bi", "yi", "ic", "ix", "ind", "f", "b", "ri", "multi", "t", "si", "li", "ii", "ji", "ei", "ti", "im", "it", "ini", "zi", "pi", "id", "k", "j", "index", "ij", "iri"], "x": ["ce", "wx", "xi", "ex", "foo", "xe", "on", "xc", "code", "xa", "X", "rx", "w", "c", "ox", "xxxx", "xt", "hex", "xml", "xxx", "el", "step", "ix", "o", "h", "ip", "tx", "yk", "xd", "time", "alpha", "mac", "key", "v", "int", "fx", " xx", "xy", "s", "xs", "co", "dx", "ed", "one", "q", "xx", "l", "ll", "lat", "yes", "hello", "lex", "px", "j", "xp", "xf"], "y": ["ty", "ys", "yd", "d", "g", "cy", "oy", "yz", "m", "ies", "ly", "my", "ny", "yi", "vy", "by", "o", "ye", "py", "yr", "sky", "b", "axy", "t", "yl", "io", "zy", "pt", "ot", "uy", "an", "yn", "v", "ey", "gy", "iy", "xy", "ch", "ry", "ish", "yt", "Y", "yy", "l", "yes", "user", "j", "hot", "ay", "ym"], "z": ["err", "ld", "g", "series", "hz", "zero", "w", "iz", "yz", "zone", "ly", "zh", "info", "ez", "oz", "zip", "ze", "uz", "time", "cz", "zy", "like", "ot", "style", "check", "v", "zer", "red", "nz", "it", "ch", "s", "zi", "gz", "ed", "zo", "q", "ll", "l", "sd", "az", "tz", "er", "zen", "os", "Z", "zz"], "max_num": ["MAX_um", "max2um", "maximalnum", "high32crit", "maxdevnum", "maxfulcrit", "maxfulnum", "maximalcum", "maxenblock", "MAX_num", "max_off", "max_sum", "maxfulblock", "max2Num", "max_cum", "max2off", "maxdevoff", "max32no", "maximalNum", "maxdevmon", "high32no", "maxencrit", "max32num", "high32block", "max_no", "max32block", "MAX_Num", "Max_cum", "Max_Num", "sum_mon", "max_block", "maxdevNum", "max_um", "max_Num", "sum_Num", "max2mon", "max2num", "maxfulno", "MAX_sum", "maxennum", "maxenno", "Max_sum", "high32num", "max32crit", "sum_off", "high_crit", "max_mon", "max2sum", "Max_num", "maximalsum", "high_num", "high_block", "max_crit", "high_no"], "tmp": ["tm", "stuff", "pkg", "cmp", "perm", "nt", "js", "cont", "mp", "ret", "jp", "html", "txt", "tc", "m", "mut", "old", "ctx", "cur", "cv", "buf", "sp", "t", "nb", "out", "resp", "tn", "gs", "list", "cache", "emp", "obj", "mk", "cp", "tt", "now", "csv", "conv", "new", "cb", "np", "mem", "buff", "etc", "yy", "mint", "temp"], "sum_num": ["sum2sum", "sum_number", "sum1num", "max_mon", "sum2num", "sumfulgen", "total_mon", "sum_fac", "max_Num", "sum_mon", "mean_sum", "sum_Num", "mean2num", "sum2mon", "sum2gen", "sum1mon", "sum1Num", "sum2fac", "sum1sum", "total_gen", "mean2n", "total_num", "mean_n", "sum_gen", "mean_number", "sumfulfac", "sumfulmon", "mean2sum", "sum2n", "sum_n", "max_sum", "sum2number", "sumfulnum", "sum_sum", "total_fac", "mean_num", "mean2number"]}}
{"code": "N = int(input())\\npos = [0,0]\\ntime = 0\\nfor _ in range(N):\\n    t,x,y = [int(i) for i in input().split()]\\n    d = abs(pos[0] - x) + abs(pos[1] - y)\\n    if d > t - time:\\n        print(\"No\")\\n        break\\n    elif (t - time - d)%2 != 0:\\n        print(\"No\")\\n        break\\n    pos = [x,y]\\n    time = t\\nelse:\\n    print(\"Yes\")", "target": "726", "substitutes": {"N": ["n", "M", "NS", "T", "GN", "NI", "Ns", "X", "I", "R", "L", "NM", "NR", "NT", "V", "TN", "NUM", "S", "B", "J", "Q", "ND", "Num", "P", "Sn", "D", "NB", "Y", "Size", "Len", "K", "F", "Z", "C"], "pos": ["loc", "rot", "n", "mit", "x", "to", "nt", "path", "port", "d", "p", "point", "on", "spec", "pc", "po", "POS", "position", "ts", "ref", "Pos", "res", "o", "col", "val", "tx", "trans", "ind", "t", "cond", "form", "pt", "no", "conf", "pid", "out", "P", "list", "post", "it", "pres", "plot", "proc", "pl", "pi", "l", "id", "line", "pose", "os", "index", "op", "pro", "ps", "seq", "points"], "time": ["tm", "history", "ty", "x", "T", "max", "context", "port", " t", "p", "name", "test", "etime", "value", "w", "tc", "length", "position", "ts", "m", "set", "z", "tim", "window", "sec", "step", "speed", "te", "runtime", "tp", "tx", "duration", "t", "frequency", "depth", "v", "until", "delay", "tt", "date", "now", "times", "size", "ime", "timeout", "id", "index", "mt", "Time", "timer", "temp", "trace", "TIME"], "_": [" y", " j", " k", "__", "val", " x", " m", " __", "___", " p", "k", "j"]}}
{"code": "from collections import Counter\\n\\ndef solve():\\n    N = int(input())\\n    D = list(map(int, input().split()))\\n\\n    mod = 998244353\\n\\n    if D[0] != 0:\\n        print(0)\\n        return\\n\\n    cnt = Counter(D)\\n\\n    if cnt[0] > 1:\\n        print(0)\\n        return\\n\\n    res = 1\\n\\n    for i in range(1, max(D)+1):\\n        if cnt[i-1] == 1:\\n            continue\\n        res *= cnt[i-1]**cnt[i] %mod\\n        res %= mod\\n    \\n    print(res)\\n\\nsolve()", "target": "480", "substitutes": {"N": ["n", "M", "NS", "T", "Ns", "R", "I", "X", "NA", "L", "NN", "NT", "H", "V", "S", "B", "J", "Q", "G", "ND", "P", "E", "Y", "K", "F", "Z", "C"], "D": ["M", "DL", "d", "TD", "JD", "DOS", "DO", "DIR", "R", "X", "I", "L", "DE", "AD", "FD", "DR", "DI", "O", "LD", "S", "Do", "CD", "DX", "DA", "DP", "B", "Q", "ND", "DD", "DC", "P", "DN", "WD", "ED", "DS", "DM", "PD", "DF", "DB", "F", "Z", "C"], "mod": ["n", "max", "perm", "MOD", "modified", "mods", " Mod", "sign", "d", "mm", "spec", "med", "mult", "Mod", "fun", "r", "scale", "m", "set", "module", "od", "ident", "prime", "dec", "min", "deg", "time", "fac", "tab", "cond", "dig", "sim", "bit", "check", "debug", "com", "req", "per", "base", "mag", "div", "rand", "id", "reg", "k", "cm", "pro", "mode", "temp", "sum"], "cnt": ["dcpt", "CNT", "Cpt", "nccol", "cNT", "cct", "cnc", "ccount", "lcNT", "ncst", "dcnt", "rcNT", "Ccol", "rcnt", " cwd", "lcnt", "Ccount", "dcnc", "ncct", "ccol", "Cnc", " cNT", " ccount", " ccol", " cct", "Cwd", " cnc", "rcnc", "rcct", "Cct", "cpt", "ncnt", "cst", "dcct", "lccount", "nccount", "Cnt", " cpt", "cwd", "lcwd", " cst", "Cst"], "res": ["resolution", "max", "correct", " Res", "resh", "name", "ret", "reset", "rep", "med", "re", "Res", "r", "ther", "rat", "rem", "mate", "prime", "RE", "RES", "ms", "val", "result", "term", "abs", "rel", "fac", "cond", "ress", "cons", "resource", "results", "out", "resp", "final", "has", "red", "des", " RES", "gr", "rest", "sol", "req", "pres", "div", "yes", "rand", "var", "mem", "reg", "j", "sum"], "i": ["mi", "xi", "x", "me", "major", "gi", "di", "ai", "I", "c", "m", "batch", "bi", "ic", "ix", "ip", "h", "ind", "f", "b", "multi", "si", "li", "ii", "key", "v", "ji", "e", "ti", "oi", "s", "it", "zi", "ini", "ui", "\u0438", "q", "phi", "pi", "l", "id", "j", "index", "y", "asi", "ik", "ij", "iu"]}}
{"code": "import copy\\ndef BubbleSort(C, N):\\n    for i in range(N):\\n        for j in reversed(range(i+1, N)):\\n            if C[j][1:2] <  C[j-1][1:2]:\\n                C[j], C[j-1] = C[j-1], C[j]\\n\\n    print(*C)\\n    stableCheck(C, N)\\n\\ndef SelectionSort(C, N):\\n    for i in range(N):\\n        minj = i\\n        for j in range(i, N):\\n            if C[j][1:2] <  C[minj][1:2]:\\n                minj = j\\n        C[i], C[minj] = C[minj], C[i]\\n    print(*C)\\n    stableCheck(C, N)\\n\\ndef stableCheck(C, N):\\n    global lst\\n    flag = 1\\n    for i in range(N):\\n        for j in range(i+1, N):\\n            if lst[i][1:2] == lst[j][1:2]:\\n                fir = lst[i]\\n                sec = lst[j]\\n                for k in range(N):\\n                    if C[k] == fir:\\n                        recf = k\\n\\n                    if C[k] == sec:\\n                        recs = k\\n                \\n                if recf > recs:\\n                    print(\"Not stable\")\\n                    flag = 0\\n                    break\\n        \\n        if flag ==0:\\n            break\\n\\n    if flag :\\n        print(\"Stable\")\\n\\nN = int(input())\\nlst = list(map(str, input().split()))\\nlst1 = copy.deepcopy(lst)\\nlst2 = copy.deepcopy(lst)\\n\\nBubbleSort(lst1, N)\\nSelectionSort(lst2, N)\\n", "target": "30", "substitutes": {"C": ["CNN", "Chain", "CH", "T", "CAR", "NC", "Cod", "R", "c", "CN", "Cs", "YC", "CV", "Cond", "V", "MC", "Ch", "CD", "EC", "B", "Cal", "Cons", "CA", "D", "Y", "AC", "WC", "CM", "JC", "I", "LC", "L", "CU", "Call", "Query", "CT", "CP", "GC", "Co", "SC", "P", "You", "CC", "Count", "CB", "CG", "Copy", "CE", "Config", "Car", "H", "Current", "O", "G", "DC", "A", "Cache", "CON", "Craig", "F", "CF", "M", "Cow", "Cl", "CI", "Con", "CS", "TC", "Code", "S", "BC", "CCC", "J", "CR", "E", "HC", "CL", "K"], "N": ["SN", "CNN", "n", "M", "NS", "NL", "T", "Ne", "New", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "Number", "NN", "NP", "CN", "NR", "NT", "NOR", "NH", "H", "ANY", "Node", "O", "V", "No", "NO", "NOTE", "Z", "S", "MAN", "NE", "B", "J", "Scott", "Q", "G", "ND", "P", "Num", "FN", "A", "Network", "E", "Ren", "Sn", "D", "NB", "Y", "MN", "Len", "Ni", "K", "F", "AN", "TN", "Note", "NG"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "ie", "ci", "gi", "ir", "p", "di", "ai", "I", "c", "m", "z", "bi", "ami", "yi", "iti", "ic", "ix", "o", "ip", "iri", "ind", "f", "ri", "io", "si", "J", "ion", "li", "ii", "ji", "v", "ei", "int", "ti", "e", "oi", "im", "it", "zi", "ini", "ui", "l", "pi", "phi", "u", "id", "y", "index", "ij", "ik", "iu", "hi"], "j": ["json", "n", "x", "uj", "ja", "ie", "ijk", "err", "js", "aj", "on", "p", "ret", "g", "left", "jp", "job", "r", "jc", "oj", "z", "c", "m", "jj", "bi", "ju", "o", "by", "h", "pr", "ind", "jl", "br", "f", "jac", "sp", "rel", "t", "b", "je", "fr", "J", "ion", "bj", "ji", "kj", "v", "exp", "gov", "obj", "adj", "xy", "s", "it", "tr", "jump", "opt", "q", "l", "dj", "u", "y", "jit", "ij", "bs"], "minj": ["iljs", "sunij", "MINz", "minja", "partjp", "relij", "mini", "sunji", "MINij", "dimbr", "dimja", "relz", "ilja", "dimj", "minz", "partja", "MINja", "minij", "sunj", "partj", "getij", "MINaj", "relja", "loweri", "MINji", " minbr", "minimumaj", "partjs", "minimumja", "getji", "dimji", "MINj", "minaj", "minbr", "iljp", "lowerj", "lowerja", "minimumij", "minjs", "minutebr", "relj", "minimumz", "getj", " minjp", "MINi", "minji", "sunja", "relji", " minjs", "getja", " minji", "minimumj", "lowerij", "minutej", "minjp", "minuteji", "reli", "minuteja", " minja", "minimumji", "ilj", "relaj"], "flag": ["fd", "policy", "sun", "state", "option", "offset", "gc", "ret", "cloud", "day", "store", "long", "weight", "leaf", "set", "age", "status", "only", "type", "FLAG", "window", "step", "lag", "nl", "const", "bug", "ground", "log", "flags", "save", "tag", "done", "limit", "level", "sp", "f", "cmd", "dep", "cond", "bool", "count", "valid", "Flag", "bit", "key", "int", "free", "lv", "char", "group", "stage", "lock", "line", "error", "id", "member", "ctl", "sync", "prop", "field"], "fir": [" firt", "bier", "frirs", " fier", "frir", "ffire", "fere", "bir", "bere", " fire", "ffier", "birs", "formir", "frere", "ffir", "birt", "formirs", "frirt", "fier", "formere", "formirt", "ffirt", "firs", "fire", "firt", "bire"], "sec": ["ec", "ck", "sy", "ser", "th", "SEC", "sector", "sic", "security", "exc", "cycle", "ct", "rc", "tc", "sys", "Sec", "cor", "esc", "enc", "fin", "sch", "bc", "ctr", "ss", "secure", "sq", "gov", "crit", "cc", "proc", "sd", "cs", "se", "reg", "seq", "sc"], "k": ["ck", "km", "ki", "n", "ek", "uk", "x", "kr", "kh", "kl", "ijk", "p", "g", "kar", "ak", "ke", "kid", "r", "c", "z", "m", "dk", "ks", "ic", "kw", "ko", "rec", "f", "tk", "t", "key", "kj", "v", "ok", "kick", "s", "ch", "ikk", "ku", "ark", "kt", "q", "u", "kk", "sk", "ka", "K", "ik", "kg", "mk", "sc"], "recf": [" recfab", " recbf", "recc", "regf", "RECfd", "recF", "recfr", "regfr", "RECbf", "rcc", "RECc", "rcF", "recfd", "rcfd", "recbf", "regfd", "RECfab", "RECF", "RECfr", "rcf", "rcfr", "recfab", "rcbf", " recc", "regF", "rcfab", "RECf"], "recs": ["reCS", "crecs", "REsts", "concks", "recc", " recks", "recats", "rcs", "crests", "conts", " recats", "rests", "rcks", "rets", "RECS", "recks", "crecc", "frests", "rts", "freCS", "concs", "REcc", " rets", "creCS", "frecs", "concats", "rcats", "frecc", "REcs"], "lst": [" lbl", "dlinst", "mlsty", "libl", "lbinst", "lnsty", "lbl", "slsty", "lnd", " lso", "lbsty", "mlsts", "ilsts", "rlstr", "lnst", "dlST", "dlst", "lST", "slst", "ilnd", "dlnd", "ilst", "dlbl", " list", "dlsty", "lbST", "lbnd", "Lstr", "elist", "llST", "dlstr", "Lsl", "Lbl", "lsts", "Lld", " lsty", "lbso", " lstr", "llstr", "Lst", "lsl", "lnST", " lnd", "lisl", "elbl", "slbl", "list", " linst", "llst", "ilsty", "rlST", "dlso", "elst", "linst", "mlst", "lld", "lbst", " lST", " lsl", "slist", "liST", "slstr", "rlso", "lsty", " lld", "llld", " lsts", "rlst", "LST", "lso", "mlnd", "lnso", "lstr", "elsty"], "lst1": ["lst3", "llstr2", "lST3", "lstr1", "lSTOne", "list1", "LSTOne", "lst0", "lstr2", "lST0", "lstr0", "lST2", "lstOne", "llstr3", "list2", "LST2", "LST0", "lstr3", "LST1", "list3", "llstr0", "Lst0", "LstOne", "llst2", "Lst2", "llstr1", "Lst1", "lstrOne", "llst3", "list0", "lST1", "llst0", "llst1"], "lst2": ["lst3", "LST3", "lbl2", "dlist3", "lST3", "list1", "dlist2", "lbl1", "lst0", "list4", "lST0", "dlist4", "lST2", "list2", "LST2", "dlst4", "lbl4", "LST0", "lstr3", "LST1", "lstr4", "list3", "list5", "lbl5", "dlst5", "lstr5", "Lst0", "Lst2", "Lst3", "lbl3", "lst5", "Lst1", "dlst2", "list0", "lst4", "lST1", "lbl0", "dlist5", "lstr2", "dlst3"]}}
{"code": "N, X, T = [int(i) for i in input().split()]\\n \\nq, r = divmod(N, X)\\n \\noutput = 0\\nif r > 0:\\n    output = (q+1) * T\\nelse :\\n    output = q * T\\n    \\nprint(output)", "target": "105", "substitutes": {"N": ["CNN", "M", "n", "NS", "NC", "Ns", "R", "I", "NA", "L", "NM", "NN", "NR", "NT", "NH", "H", "V", "Z", "S", "J", "Q", "ND", "P", "D", "NB", "Y", "MN", "Ni", "K", "F", "TN", "C"], "X": ["M", "IX", "x", "TX", "R", "I", "L", "UX", "H", "W", "V", "S", "XP", "DX", "J", "Q", "P", "A", "E", "XX", "XT", "D", "XXX", "Y", "XL", "U", "K", "F", "Z", "C"], "T": ["WT", "M", "TR", "TX", "TP", "AT", "R", "I", "L", "TY", "Type", "TS", "PT", "TC", "W", "H", "PUT", "CT", "V", "TH", "Z", "TV", "t", "RT", "S", "B", "J", "Q", "TI", "G", "TF", "P", "A", "E", "TT", "D", "TM", "Y", "MT", "K", "F", "GT", "TN", "C"], "i": ["\u00ed", "ki", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "iter", "bi", "qi", "ix", "iri", "ip", "ind", "f", "t", "ri", "si", "li", "ii", "key", "v", "int", "ti", "oi", "ini", "zi", "l", "pi", "id", "j", "k", "ij", "iu"], "q": ["aq", "n", "x", "p", "ue", "g", "iq", "qu", "qt", "quant", "requ", "c", "m", "z", "qi", "query", "h", "f", "b", "t", "Q", "out", "v", "sq", "qq", "eq", "qa", "question", "dq", "ll", "u", "k", "y", "j", "qs", "pg"], "r": ["nr", "n", "mr", "sr", "x", "rr", "ro", "err", "rg", "d", "p", "run", "g", "R", "rc", "re", "w", "c", "m", "rs", "rb", "res", "h", "rar", "f", "t", "dr", "e", "rf", "red", "rt", "l", "ar", "er", "cr", "rate", "rd"], "output": ["answer", "next", "body", "net", "client", "x", "Output", "render", "component", "figure", "write", "column", "put", "exit", "long", "position", "current", "control", "section", "connection", "come", "input", "prefix", "format", "generated", "success", "outer", "second", "PUT", "result", "config", "bool", "hidden", "response", "cut", "ion", "out", "adjusted", "update", "console", "public", "print", "four", "other", "collection", "new", "plot", "command", "network", "binary", "production", "text"]}}
{"code": "N = int(input())\\n\\nprint(N * 2 if N % 2 == 1 else N)", "target": "762", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "NV", "NC", "GN", "NI", "Ns", "X", "I", "NA", "L", "NM", "Number", "NN", "NP", "NR", "CN", "NT", "NH", "H", "O", "V", "TN", "NO", "NUM", "S", "NE", "B", "J", "Q", "G", "ND", "P", "Long", "D", "NB", "MN", "K", "F", "TON", "Z", "FN", "NG", "C"]}}
{"code": "import itertools\\nN, C = map(int, input().split())\\nX = []\\nV = []\\nfor n in range(N):\\n    x, v = map(int,input().split())\\n    X.append(x)\\n    V.append(v)\\nXr = X[::-1]\\nVr = V[::-1]\\nXl = [0] + X\\nVl = [0] + V\\nXr = [0] + [C-x for x in Xr] # \u9006\u306b\u56de\u308b\u306e\u3067C\u304b\u3089\u5f15\u304f\\nVr = [0] + Vr\\n\\nVl = list(itertools.accumulate(Vl)) # x\u306f\u7d2f\u7a4d\u3057\u305f\u5024\u306a\u306e\u3067\u3001v\u3082\u7d2f\u7a4d\u548c\u306b\u7d71\u4e00\\nVr = list(itertools.accumulate(Vr))\\n\\ndef update_mx(ls):\\n    mx = 0\\n    for i in range(len(ls)):\\n        mx = max(mx, ls[i])\\n        ls[i] = mx\\n    return ls\\n\\ndef create(V,X,k):\\n    ls = []\\n    for n in range(N+1):\\n        ls.append(V[n]-k*X[n]) # \u5f80\u5fa9\u3059\u308b\u5834\u5408\u306fk=2\\n    return update_mx(ls)\\n\\nL = create(Vl,Xl,1) # \u6700\u826f\u306e\u5024[\u5de6\u7aef\u3068\u3057\u3066\u8a31\u5bb9\u3055\u308c\u308b\u4f4d\u7f6e]\uff08\u7247\u9053\uff09\\nLt = create(Vl,Xl,2) # \u6700\u826f\u306e\u5024[\u5de6\u7aef\u3068\u3057\u3066\u8a31\u5bb9\u3055\u308c\u308b\u4f4d\u7f6e]\uff08\u5f80\u5fa9\uff09\\nR = create(Vr,Xr,1)\\nRt = create(Vr,Xr,2)\\n\\nans = 0\\nfor n in range(N+1):\\n    #print (n,N-n)\\n    ans = max(ans, Lt[n] + R[N-n])\\n    ans = max(ans, Rt[n] + L[N-n])\\nprint (ans)\\n    \\n", "target": "127", "substitutes": {"N": ["CNN", "M", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "L", "NM", "NN", "CN", "NR", "NT", "NH", "No", "NO", "S", "B", "J", "Q", "G", "Num", "P", "NPR", "A", "D", "NB", "Y", "MN", "K", "F", "AN", "Z"], "C": ["M", "T", "R", "I", "L", "c", "CI", "CS", "Cs", "W", "CV", "O", "S", "B", "Co", "Q", "G", "CO", "P", "A", "CR", "E", "D", "CC", "Y", "CL", "Size", "Count", "U", "K", "F", "Z"], "X": ["M", "IX", "Rex", "Win", "TX", "AT", "R", "EX", "L", "One", "MX", "ox", "UX", "OX", "WH", "Ex", "H", "ZX", "XY", "Exp", "TH", "Cross", "XP", "XM", "DX", "Q", "ML", "Tx", "P", "A", "FX", "US", "EL", "XX", "XT", "XXX", "Y", "UT", "XL", "AC", "K", "Array", "Z", "Load"], "V": ["M", "VER", "VI", "Ver", "T", "Iv", "Va", "NV", "Vote", "R", "I", "L", "AV", "Van", "VS", "Version", "VW", "Vs", "H", "CV", "Video", "UV", "GV", "W", "VC", "TV", "S", "VA", "B", "J", "Q", "G", "VE", "P", "VO", "US", "VR", "VL", "D", "VOL", "Y", "Vector", "U", "F", "Vol", "Z", "IV", "VD"], "n": ["nt", "d", "p", "i", "r", "sn", "c", "m", "ns", "ind", "f", "num", "t", "nb", "nc", "un", "it", "new", "nu", "nn", "q", "k", "y", "j", "nd"], "x": ["wx", "xi", "ex", "xe", "d", "p", "xes", "ux", "name", "xc", "ct", "i", "rx", "w", "r", "c", "ox", "z", "xxxx", "xt", "xml", "el", "ctx", "plex", "ix", "h", "tx", "ax", "f", "xd", "t", "na", "e", "int", "fx", " xx", "xy", "xs", "mx", "XX", "dx", "nex", "xx", "pl", "l", "lat", "u", "lex", "y", "px", "k", "ross", "xp", "xf"], "v": ["lu", "vert", "vi", "get", "vo", "tv", "vp", "g", "rev", "value", "r", "w", "uv", "c", "vis", "ev", "vy", "val", "vr", "vol", "iv", "ver", "av", "nv", "lv", "conv", "sv", "co", "ve", "l", "vs", "var", "j", "vt", "y", "wire"], "Xr": ["Ve", "Xe", "Zp", "Vcr", "UXmr", "UXr", "Zr", "Vp", "Xrs", "Zerr", "Xcr", "Vrr", " Xrs", "Xp", "Verr", "Ye", "Yr", " Xe", "Vmr", "Zcr", "Xerr", " Xmr", " Xcr", " Xrr", "UXrs", "Yrr", "Xrr", " Xp", " Xerr", "UXl", "Xmr", "Yl", "Vrs"], "Vr": ["Xp", "Ml", "Pl", "Vp", "Pr", "Xm", "Pp", "Mr", "Mm", "Pm", "Vm", "Mp"], "Xl": [" Xc", "Xc", " Xf", "Yf", "Vf", "Yr", "Xf", "Vc", "Yl", "Yc"], "Vl": [" Vn", "Ln", " Vb", "Lr", "Vb", "Ll", "Xn", "Lb", "Xb", "Vn"]}}
{"code": "import sys\\nH,W = map(int,input().split())\\nif H < 0 or H > 100 or W < 0 or H > 100:\\n    sys.exit()\\npixeles = []\\nfor I in range(H):\\n    pixeles.append(str(input()))\\n\\nprint(\"#\"*(W+2))\\nfor L in pixeles:\\n    print(\"#\",end='')\\n    print(L,end='')\\n    print(\"#\")\\nprint(\"#\"*(W+2))\\n", "target": "133", "substitutes": {"H": ["M", "N", "Eh", "CH", "HD", "T", "SH", "His", "AH", "HS", "HE", "HL", "R", "RH", "X", "HO", "HI", "HTML", "NH", "HR", "h", "DH", "V", "TH", "Height", "HH", "S", "B", "Q", "G", "HA", "P", "A", "OH", "Host", "D", "HC", "MH", "Y", "HB", "High", "K", "F", "HT", "Hi", "He", "C"], "W": ["WT", "WC", "M", "N", "We", "WR", "MW", "CW", "Win", "Word", "OW", "WP", "NW", "X", "R", "w", "WW", "WH", "VW", "BW", "HTML", "WA", "V", "TH", "Width", "S", "Wh", "SW", "B", "END", "G", "width", "A", "D", "WM", "Y", "DW", "EW", "WS", "Writer", "HT", "Z"], "pixeles": ["pixelses", "ixelES", "pixelxes", "cellses", "pixelkes", "pixelES", "tilees", " pixelses", " pixelxes", "pixelxs", " pixele", "cilses", "celle", "ixele", "cellxes", "byteses", "ixelses", "tileses", "bytexs", " pixelkes", "ciles", "ixeles", "celles", "cilxes", " pixelES", "tilekes", " pixelxs", "ixelxes", "bytees", "bytekes", "cilES", "tilexs", "pixele"], "I": ["M", "N", "T", "IC", "X", "i", "R", "O", "V", "Ch", " i", "S", "J", "G", "P", "E", "Is", "D", "Y", "U", "K", "Im", "F", "He", "C", "Xi"], "L": ["dL", "LB", "M", "NL", " LO", "List", "N", "LIN", "LY", "mL", " mL", "X", "R", "LC", "Line", " Li", "LU", "LA", "V", "LO", "S", "LT", " l", "B", "Li", "LI", "P", "E", "LG", "VL", "Lu", "D", "GL", "Left", " LW", "l", "LL", "LE", "U", "LS", "LP", "C"]}}
{"code": "t = int(input())\\nprint(48 - t)", "target": "676", "substitutes": {"t": ["a", "n", "x", "ty", "T", "d", "p", "ta", "i", "w", "r", "c", "ts", "m", "z", "total", "o", "te", "tp", "h", "term", "f", "b", "time", "ot", "tu", "v", "e", "int", "s", "tt", "it", "tf", "q", "l", "j", "k", "tz"]}}
{"code": "# coding: utf-8\\nimport sys\\nfrom heapq import heapify, heappop, heappush\\n\\nsr = lambda: sys.stdin.readline().rstrip()\\nir = lambda: int(sr())\\nlr = lambda: list(map(int, sr().split()))\\n\\n# x * x\u3092\u3069\u3046\u8a55\u4fa1\u3059\u308b\u304b\u3001heap\u306b\u300c\u304a\u3044\u3057\u3055\u300d\u306e\u9ad8\u3044\u9806\u306b\u5165\u308c\u3066\u3044\u304f\\nN, K = lr()\\nTD = [lr() for _ in range(N)]\\nheap = []\\nkind = 0\\nhappy = 0\\nused = set()\\nTD.sort(key=lambda x: x[1], reverse=True)\\nfor t, d in TD[:K]:\\n    if t not in used:\\n        used.add(t)\\n        kind += 1\\n    else:\\n        heappush(heap, d)\\n    happy += d\\n\\ncand = [happy+kind**2]\\nfor t, d in TD[K:]:\\n    if not heap:\\n        break\\n    if t in used:\\n        continue\\n    h = heappop(heap)\\n    happy += (d-h)\\n    kind += 1\\n    used.add(t)\\n    cand.append(happy+kind**2)\\n\\nanswer = max(cand)\\nprint(answer)\\n", "target": "466", "substitutes": {}}
{"code": "import heapq\\nX,Y,Z,K = map(int,input().split())\\n\\nlimit = [X,Y,Z]\\n\\nnums = []\\nheapq.heapify(nums)\\nnum = 0\\nabc = [[] for i in range(3)]\\n\\nfor i in range(3):\\n  abc[i] = sorted(list(map(int,input().split())),reverse = True)\\n  num += abc[i][0] * -1\\n  \\nheapq.heappush(nums,[num,0,0,0])\\nyet = []\\n\\nfor i in range(K):\\n  M = heapq.heappop(nums)\\n  for j in range(3):\\n    ID = M[1:]\\n    ID[j] += 1\\n    if ID[j] < limit[j]:\\n      a = ID[0]\\n      b = ID[1]\\n      c = ID[2]\\n      m = (abc[0][a] + abc[1][b] + abc[2][c]) * - 1\\n      if ID not in yet:\\n        heapq.heappush(nums,[m,a,b,c])\\n        yet.append(ID)\\n  print(M[0] * -1)\\n  \\n", "target": "403", "substitutes": {"X": ["IX", "N", "x", "T", "IC", "Win", " RX", "TX", "ACE", "I", "EX", "MX", "UX", "OX", "ICE", "AX", "ZX", "XY", "V", "Cross", "XP", "S", "XM", "DX", "J", "Q", "A", "XX", "XT", "HTTP", "XL", "U", "ICK", "C"], "Y": ["N", "T", "LY", "RY", "EY", "My", "I", "Py", "L", "TY", "YS", "MY", "YC", "Year", "XY", "V", "YA", "S", "B", "Toy", "Q", "J", "G", "P", "E", "AY", "YN", "YY", "y", "SY", "NY", "BY", "C"], "Z": ["N", "T", "ZI", "ZZ", "BOX", "SL", "AZ", "I", "SO", "z", "Zone", "OS", "ZX", "ANY", "V", "TH", "S", "FL", "B", "J", "Q", "SK", "SC", "Zero", "SP", "NOW", "CL", "IZ", "LOC", "TON", "C"], "K": ["N", "T", "KY", "KR", "AK", "KEY", "I", "R", "KK", "KT", "H", "FK", "O", "V", "KS", "PK", "KC", "S", "IK", "J", "Q", "SK", "G", "Three", "P", "HK", "D", "NB", "Size", "k", "F", "KE", "KA", "C"], "limit": ["policy", "max", "lim", "match", "init", "fit", "iter", "position", "length", "Lim", "map", "set", "buffer", "condition", "limited", "Limit", "prime", "lit", "tail", "capacity", "limits", "config", "count", "len", "block", "force", "pos", "filter", "it", "lock", "size", "base", "l", "pi", "pin", "enable", "fixed", "link", "range", "target", "stop"], "nums": ["nims", "ynears", "nuoms", "Nums", "nubes", "enums", "enoms", "ynubes", "numbers", " nears", " nests", "snews", "nuests", "ynums", "noms", "nsums", "nsews", "nsumbs", " noms", "mnews", "nuumbs", "enum", " numbers", " nomes", "nuomes", "ynomes", "nsests", "nsomes", "mnoms", "gnears", "news", "Numbers", "gnomes", "nsims", "snoms", "gnubes", "nuums", "nears", " nubes", "numbs", "nests", " numbs", "nuumbers", "Num", "snums", "Noms", "nomes", "gnums", "nsoms", "snims", "nsumbers", "mnums", "enumbers", "mnims"], "num": ["con", "n", "net", "max", "x", "N", "um", "nom", "anon", "mult", "test", "zero", "hom", "man", "total", "tim", "enum", "result", "count", "NUM", "multi", "nb", "cum", "no", "ver", "Num", "cal", "final", "un", "msg", "new", "nu", "one", "number", "mon", "np", "mem", "umber", "id", "index", "gener", "temp", "sum"], "abc": ["acon", "loc", "ec", "lc", "ctrl", "IC", "ab", "lib", "exc", "bs", "abin", "xc", "ib", "cd", "ai", "rc", "abi", "chest", "hz", "arc", "ABC", "abet", "ox", "rox", "fc", "AB", "pb", "fb", "iques", "rb", "ic", "aux", "uber", "ob", "abs", "tab", "icc", "BC", "anc", "Ec", "apa", "conf", "lam", "nc", "cache", "roc", "lab", "irc", "erb", "co", "auc", "au", "RC", "toc", "cb", "oc", "AC", "rap", "AFP", "init", "ac"], "i": [" ii", "mi", "n", "xi", "x", "ia", "ci", "gi", "p", "di", "ai", "I", "z", "bi", "yi", "qi", "iti", "ic", "o", "ix", "ip", "h", "f", "t", "ri", "io", "si", "li", "ii", "ji", "ei", "e", "v", "ti", "im", "it", "s", "zi", "ui", "ini", "phi", "pi", "l", "il", "id", "y", "k", "ij", "ik", "iri"], "yet": ["fore", "client", "before", "yeah", "necessary", "to", "always", "who", "p", "ched", "together", "human", "we", "Yet", "recorded", "fortunately", "but", "since", "Already", "called", "existent", "why", "you", "ready", "yout", "still", "just", "must", "until", "each", "soon", "they", "nec", "now", "along", "ping", "oday", "compl", "later", "currently", "today", "never", "pl", "etc", "ever", "even", "there", " Yet", "many", "often", "almost", "said"], "M": ["MO", "N", "T", "CM", "VM", "GM", "JM", "L", "Map", "NM", "MX", "RM", "MJ", "EM", "Ms", "H", "SM", "MM", "MC", "V", "MD", "C", "MAN", "B", "J", "Q", "P", "MP", "MA", "ME", "MS", "D", "DM", "TM", "Mem", "AM", "MI", "FM", "MT", "MN", "U", "LM", "PM", "MR"], "j": ["json", "n", "x", "uj", "ja", "js", "aj", "p", "g", "jp", "job", "r", "oj", "jc", "z", "jj", "o", "h", "ind", "jl", "br", "t", "J", "bj", "key", "ji", "kj", "v", "e", "obj", "it", "jump", "q", "l", "dj", "y", "k", "jit", "ij"], "ID": ["N", "IC", "NM", "Info", "OD", "EM", "MC", "MER", "PK", "NUM", "Flag", "REL", "TAG", "D", "FIN", "Offset", "id", "VER", "I", "Link", "FD", "IE", "Id", "MAC", "IM", "IF", "Q", "IND", "ENT", "MS", "MI", "LED", "OT", "JO", "BY", "IDS", "AND", "INT", "NL", "IN", "UID", "VAL", "RI", "TL", "FK", "LOCK", "IR", "MD", "IL", "STAT", "TM", "Kid", "IDA", "Name", "IP", "KEY", "ById", "AD", "NR", "DR", "IDs", "FLAG", "URL", "IS", "NAME", "IDENT", "J", "END", "PART", "MP", "VID", "ED", "AF", "INFO", "OK", "DB", "AN", "IDE"], "a": ["arg", "x", "ia", "ae", "ac", "ab", "p", "g", "va", "ai", "r", "ma", "o", "ea", "la", "aaa", "admin", "be", "h", "f", "t", "alpha", "an", "e", "A", "al", "sa", "app", "oa", "aa", "l", "am", "u", "er", "area", "ba", "ca"], "b": ["n", "sb", "ab", "d", "bar", "db", "lib", "g", "ib", "lb", "r", "bi", "wb", "fb", "rb", "h", "be", "ob", "abb", "f", "br", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "erb", "eb", "cb", "l", "u", "y", "k", "bs", "ba"], "c": ["ec", "ce", "lc", "n", "con", "d", "p", "cd", "g", "ct", "rc", "r", "tc", "cod", "z", "fc", "col", "f", "bc", "t", "dc", "sc", "e", "v", "cos", "cp", "ch", "cc", "co", "cu", "q", "l", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "m": ["tm", "mi", "n", "perm", "me", "dm", "d", "p", "g", "mmm", "mail", "r", "w", "man", "message", "o", "gm", "h", "ms", "f", "multi", "mc", "t", "mn", "v", "e", "om", "msg", "s", "l", "u", "id", "mat", "y", "month", "cm"]}}
{"code": "x, y = (int(a) for a in input().split())\\nfoot = 0\\ny_tmp = y\\ny_tmp2 = y\\n\\nfor i in range(x):\\n    y_tmp -= 2 * i + 4 * (x - i)\\n    y_tmp2 -= 4 * i + 2 * (x - i)\\n    if y_tmp == 0 or y_tmp2 == 0:\\n        print('Yes')\\n        exit()\\n    else:\\n        y_tmp = y\\n        y_tmp2 = y\\n\\nprint('No')", "target": "190", "substitutes": {"x": ["history", "wx", "n", "xi", "ex", "scroll", "d", "p", "on", "left", "X", "xa", "rx", "w", "c", "ox", "z", "m", "my", "xxx", "window", "page", "step", "ix", "o", "h", "f", "b", "t", "time", "lon", "v", "e", "width", "height", "xy", "xs", "dx", "l", "xx", "Y", "yx", "j", "px"], "y": ["sy", "n", "ys", "yd", "yer", "p", "wy", "cy", "oy", "ky", "yo", "m", "z", "ly", "ies", "my", "ny", "yi", "vy", "by", "py", "ye", "yr", "sky", "b", "dy", "axy", "t", "yl", "io", "uy", "out", "v", "yn", "ey", "gy", "iy", "xy", "ry", "new", "fy", "Y", "yy", "iny", "tmp", "yt", "j", "yu", "ya", "hot", "ay", "ym"], "a": [" ya", "n", "ia", "ae", "ta", "d", "p", "name", "g", "va", "xa", "ai", "r", "c", "ma", "m", "ox", "ica", "o", "ea", "la", "ax", "f", "b", "\u00e4", "t", " ba", "alpha", " ca", " pa", "na", "v", "an", "e", "ei", "A", "sa", "oa", "au", "aa", "l", "u", "index", "ya", "area", "ca", "ao"], "foot": ["ta", "loop", "ows", "c", "type", "total", "page", "aux", "col", "go", "f", "lo", "ver", "pos", "v", "row", "border", "eps", "sv", "boot", "board", "counter", "size", "pi", "fg", "rows", "index", "stop"], "y_tmp": ["y_perm", "ay_tmp", "y2tmp", "y2mp", "y__tmp", " y_mp", "y2cmp", "y_cmp", "xy_cache", "y_mint", " y_temp", "xy_cmp", " y_obj", "y2perm", "ay_perm", "ay__cmp", "y_nb", "y_obj", "y_diff", "y_mp", "y_cache", "y_temp", "y__diff", " y_mint", "xy_temp", "ay__diff", "y2temp", "y__perm", " y_nb", "y2mint", "y2cache", "ay_diff", "y2diff", "ay__tmp", "y__cmp", "ay_cmp", "xy_tmp", "ay__perm"], "y_tmp2": ["y2tmp02", "y_tmp4", "y_buff02", "y_mp2", "y_buff2", "y2tmp1", "y2mp4", "y_sp2", "y_cmp4", "y_tmp02", "y2mp2", "y2mp1", "y_temp2", "y2tmp2", "y_tmp1", "y_sp1", "y_buff1", "y_sp3", "y_mp02", "y2mp3", "y_tmp3", "y_mp3", "y_mp4", "y_mp1", "y_cmp1", "y_temp1", "y_temp4", "y_temp3", "y_temp02", "y2tmp4", "y2tmp3", "y_buff3", "y2mp02", "y_cmp3", "y_cmp2"], "i": ["mi", "xi", "ia", "ie", "ci", "gi", "p", "di", "ai", "I", "c", "yi", "info", "ic", "ix", "ip", "h", "ind", "f", "t", "io", "si", "li", "ii", "v", "ori", "int", "ti", "oi", "inter", "im", "it", "zi", "ini", "ui", "\u0438", "l", "pi", "phi", "id", "j", "index", "ij", "ik", "iu", "hi"]}}
{"code": "n=int(input())\\nif n>2 and n%2!=0:\\n    n-=1\\ncnt=1\\nans=n\\nfor i in range(1,n+1)[::-2]:\\n    j=i\\n    tmp=0\\n    while j>0 and j%2==0:\\n        tmp+=1\\n        j=j//2\\n    if tmp > cnt:\\n        cnt=tmp\\n        ans=i\\nprint(ans)", "target": "733", "substitutes": {"n": ["nr", "N", "x", "net", "nt", "ni", "gn", "ln", "d", "p", "en", "name", "norm", "ne", "cn", "g", "nat", "long", "sn", "r", "c", "m", "z", "ns", "ann", "note", "o", "nl", "f", "b", "num", "t", "count", "nia", "len", "nb", "nor", "mn", "out", "na", "v", "an", "tn", "nc", "all", "nan", "none", "nu", "nw", "size", "nn", "l", "np", "k"], "cnt": ["CNT", "cNT", "acct", "cct", "ccount", "ntr", "nst", "lcnt", "nnt", "acnt", "ncct", "ccct", "ctr", "count", "actr", " cNT", " ccount", " cct", "ccnt", "ncNT", "Cct", "ncnt", " count", "acount", "ncount", "cst", "cctr", "lccount", "Cnt", "Count", "lcst", " cst", " ctr", "lctr"], "ans": ["ars", "x", "ANS", "ants", "ians", "ats", "gn", "beans", "ana", "annis", "cn", "aus", "nets", "us", "sn", " Ans", "ts", "ns", "vals", "ann", "anas", "ks", "offs", "ins", "ons", "ms", "angs", "ls", "news", "mn", "uns", "an", "iann", "Ann", "anks", "ani", "terms", "s", "nan", "nz", "xs", "nas", "ams", "aos", "vs", "cs", "os", "es", "jan"], "i": ["a", "mi", "x", "ia", "ie", "ci", "gi", "ir", "p", "di", "ai", "I", "r", "c", "z", "m", "bi", "yi", "ic", "ix", "ip", "ind", "b", "t", "multi", "li", "ii", "ji", "v", "int", "ti", "im", "it", "s", "zi", "ini", "q", "l", "pi", "u", "id", "y", "k", "ij", "ik", "iu"], "j": ["a", "json", "x", "uj", "ja", "jobs", "js", "aj", "p", "d", "g", "jp", "job", "jc", "z", "jj", "bi", "ju", "pr", "ind", "jl", "go", "f", "b", "jac", "t", "J", "bj", "pos", "ji", "v", "kj", "obj", "adj", "jump", "q", "dj", "jit", "k", "y", "ij", "bs", "temp"], "tmp": ["tm", "top", "cmp", "max", "perm", "nt", "err", "p", "mp", "tv", "test", "jp", "this", "td", "start", "pre", "tc", "m", "jj", "mut", "sam", "diff", "ctx", "prime", "gm", "snap", "result", "ind", "term", "false", "sp", "num", "t", "time", "nb", "ot", "important", "out", "v", "bt", "tn", "nm", "obj", "adj", "xy", "tt", "cp", "needed", "times", "tar", "co", "new", "size", "proc", "np", "timeout", "etc", "ij", "attr", "temp", "sum"]}}
{"code": "N=int(input())\\nans=0\\nfor _ in range(N):\\n    a,b=map(int,input().split())\\n    ans+=abs(a-b)+1\\nprint(ans)", "target": "720", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "NC", "GN", "NI", "Na", "Ns", "I", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "V", "No", "NO", "S", "B", "Q", "ND", "Num", "P", "A", "Sn", "D", "NB", "MN", "Len", "Ni", "K", "F", "TN", "C"], "ans": ["ANS", "ants", "ats", "beans", "ean", "names", " means", "eds", "acs", "aus", "aned", "ns", "anus", "ann", "rans", "rs", "man", "anas", "ks", "offs", "ins", "ras", "ons", "ms", "amps", "pan", "ents", "ens", "cas", "can", "an", "anks", "oss", "anes", "s", "sv", "nas", "ams", "aos", "arts", "lan", "AN", "olds"], "_": ["x", " y", " j", "__", "ix", " x", " __", "___", "ay"], "a": ["ce", "tta", "ia", "sta", "ae", "ac", "ab", "aff", "aj", "va", "i", "ma", "eas", "ga", "ea", "la", "aaa", "act", "alpha", "da", "apa", "an", "anta", "A", "at", "sa", "ao", "aka", "au", "ed", "oa", "aa", "am", "j", "area", "ba", "ca"], "b": ["bis", "n", "sb", "bf", "ab", "d", "db", "g", "ib", "c", "z", " B", "bi", "fb", "rb", "o", "mb", "be", "ob", "bh", "br", "bas", "bc", "nb", "B", "bb", "v", "eb", "base", "cb", "l", "bp", "bin", "u", "j", "bs"]}}
{"code": "import math\\nN=int(input())\\na=[int(i) for i in input().split()]\\nb=[int(i) for i in input().split()]\\nc=[abs(b[i]-a[i]) for i in range(N)]\\nprint(sum(c))\\nprint(math.sqrt(sum([c[i]**2 for i in range(N)])))\\nprint((sum([c[i]**3 for i in range(N)]))**(1/3))\\nprint(max(c))\\n\\n", "target": "325", "substitutes": {"N": ["SN", "CNN", "Name", "n", "M", "NS", "NL", "T", "NV", "NC", "GN", "NI", "Na", "Ns", "I", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "V", "NO", "S", "B", "ND", "Num", "P", "A", "Network", "D", "NB", "Ni", "K", "AN", "TN", "Now", "BY", "C"], "a": ["n", "ae", "ab", "era", "p", "va", "ai", "ma", "ga", "ea", "la", "aaa", "pa", "act", "abs", "alpha", "eu", "an", "att", "A", "at", "sa", "app", "au", "oa", "aa", "am", "ar", "area", "ack", "ba", "ca", "ac"], "i": ["\u00ed", "ki", "mi", "xi", "x", "uri", "ci", "cli", "gi", "ir", "p", "name", "di", "uli", "ai", "I", "ili", "ami", "bi", "info", "qi", "iti", "yi", "ic", "ip", "iri", "t", "ri", "io", "si", "sim", "li", "ii", "ji", "v", "ei", "int", "ti", "oi", "e", "ori", "adi", "im", "it", "zi", "ini", "ui", "\u0438", "l", "pi", "ati", "phi", "id", "j", "fi", "y", "ij", "iu", "hi", "chain"], "b": ["bis", "body", "sb", "bf", "ab", "d", "db", "ib", "bi", "ble", "fb", "rb", "bo", "be", "ob", "bh", "br", "f", "bc", "gb", "nb", "B", "bb", "eb", "base", "cb", "bl", "l", "bp", "bin", "j", "y", "bs", "ba"], "c": ["ctrl", "ce", "lc", "n", "ec", "ci", "gc", "d", "p", "cd", "cn", "xc", "ct", "rc", "r", "tc", "chain", "m", "fc", "ctx", "cur", "cv", "f", "t", "dc", "cum", "conf", "v", "e", "nc", "cache", "cos", "cp", "ch", "cc", "com", "co", "abc", "cu", "cb", "l", "etc", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"]}}
{"code": "n = int(input())\\nt = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nmod = 10 ** 9 + 7\\nrenew = [0] * n\\nb = 0\\nfor i, h in enumerate(t):\\n\tif b < h:\\n\t\tif h > a[i]:\\n\t\t\tprint(0)\\n\t\t\texit()\\n\t\trenew[i] = 1\\n\t\tb = h\\nb = 0\\nfor i, h in enumerate(a[::-1]):\\n\tif b < h:\\n\t\tif h > t[n - i - 1]:\\n\t\t\tprint(0)\\n\t\t\texit()\\n\t\trenew[n - i - 1] = 1\\n\t\tb = h\\nans = 1\\nfor f, th, ah in zip(renew, t, a):\\n\tif not f:\\n\t\tans *= min(th, ah)\\n\t\tans %= mod\\nprint(ans)", "target": "321", "substitutes": {"n": ["N", "max", "net", "nt", "gn", "d", "p", "on", "en", "name", "names", "ne", "cn", "g", "dn", "sn", "r", "c", "current", "m", "z", "ns", "ny", "o", "nl", "ren", "num", "nb", "nor", "no", "mn", "out", "na", "v", "an", "nc", "all", "nm", "s", "nu", "size", "nn", "l", "number", "np", "ll", " N", "ng", "j", "k", "nd", "after"], "t": ["tm", "ty", "T", "nt", "ta", "p", "g", "test", "ct", "tw", "r", "tc", "wt", "c", "ts", "m", "z", "o", "te", "tree", "dt", "pt", "ot", "tu", "v", "e", "at", "tt", "tr", "it", "st", "rt", "s", " T", "l", "j", "y", "vt", "ac"], "a": ["sta", "ae", "ac", "ab", "aff", "ta", "d", "p", "g", "ai", "ak", "r", "c", "ma", "m", "ata", "el", "eas", "ga", "o", "aux", "la", "aaa", "act", "alpha", "da", "wa", "na", "an", "att", "e", "v", "all", "A", "al", "ap", "at", "sa", "s", "af", "oa", "au", "aa", "l", "am", "ar", "ba", "ca"], "mod": ["tm", "rot", "max", "perm", "MOD", "modified", "ac", "mods", " Mod", "sign", "sub", "spec", "mult", "med", "Mod", "fun", "pre", "scale", "m", "set", "od", "mad", "prime", "dec", "min", "step", "ind", "tab", "dig", "sim", "ver", "add", "ad", "oct", "id", "reg", "j", "mode", "sem", "sum"], "renew": ["rename", " rename", "Renow", " rennew", "reennew", " renaw", " renw", "rennew", "Renews", "remaw", "Rennew", "remews", "reenow", "reename", " renews", "Renew", "renw", "Renw", "remew", "renow", "renews", "remEW", "reenaw", " renEW", " renow", "reenEW", "renaw", "renEW", "Rename", "reenews", "reenw", "reenew"], "b": ["body", "sb", "max", "bu", "x", "bf", "ab", "d", "p", "db", "g", "ib", "lb", "w", "r", "c", "z", "bd", "bi", "wb", "fb", "rb", "bm", "mb", "be", "ob", "br", "bc", "gb", "nb", "B", "bb", "v", "e", "s", "eb", "cb", "l", "bp", "j", "y", "bs", "ba"], "i": [" ii", "mi", "ki", "xi", "x", "ci", "gi", "p", "on", "g", "di", "ai", "I", "jp", "bi", "yi", "ic", "ix", "o", "ip", "iri", "ind", "ri", "multi", "si", "ii", "li", "ji", "ori", "v", "int", "ti", "oi", "key", "iy", "im", "it", "s", "zi", "ui", "ini", "ed", "\u0438", "one", "phi", "pi", "ati", "ali", "id", "y", "j", "index", "ij", "ik", "asi", "iu", "hi", "init", "like"], "h": ["ht", "sh", "max", "x", "her", "kh", "p", "g", "hz", "html", "hal", "wh", "w", "hs", "r", "c", "m", "z", "ih", "zh", "rh", "o", "H", "pr", "bh", "HH", "hl", "hp", "gh", "alpha", "v", "oh", "hum", "hash", "ha", "hw", "ph", "ch", "he", "hr", "hd", "q", "ho", "l", "hh", "j", "y", "k", "hi", "hhh", "hm"], "ans": ["ones", "ars", "ANS", "ants", "ats", "ians", " means", "outs", "ai", "ows", "aus", "us", "aned", " Ans", "aves", "ts", "ns", "ann", "rans", "rs", "mas", "ks", "offs", "ins", "ons", "ms", "angs", "amps", "ls", "ents", "ens", "anc", "uns", "na", "an", "posts", "gs", "anks", "iann", "aps", "oss", "oos", "s", "nan", "uls", "au", "nas", "aos", "vs", "ads", "cs", "arts", "os", "es", "ds", "ps", "bs", "olds"], "f": ["lf", "bf", "p", "alf", "sf", "w", "r", "c", "m", "fab", "fa", "fr", "of", "ef", "fe", "fac", "fal", "fo", "off", "fl", "ff", "v", "af", "ph", "tf", "uf", "inf", "u", "j", "k", "fi", "F", "cf", "ft"], "th": ["tha", "ath", "ht", "ty", "sh", "ith", "kh", "nt", "arth", "Th", "hz", "td", "sth", "ts", "zh", " Th", "reth", "uth", "TH", "fr", "ths", "sch", "gh", "pt", "oth", "eth", "st", "tr", "alth", "ph", "ch", "orth", "hi", "ft", "rd"], "ah": ["ae", "kh", "her", "ab", "asha", "aj", "ta", "AH", "hab", "ak", "hal", "ih", "yah", "eh", "igh", "buf", "bh", "uh", "Ah", "rah", "iah", "av", "eth", "oh", "bah", "af", "aka", "ha", "eb", "ahi", "iam", "orth", "am", "aph", " ath", "aha", "ahs", "Oh"]}}
{"code": "import sys\\nread = sys.stdin.read\\nreadline = sys.stdin.readline\\nreadlines = sys.stdin.readlines\\n\\ndef main():\\n    N = int(readline())\\n\\n    K = 0\\n    for i in range(1,450):\\n        if i * (i-1) // 2 == N:\\n            K = i\\n            break\\n\\n    if K == 0:\\n        print(\"No\")\\n        exit()\\n    \\n    S = [[] for _ in range(K)]\\n\\n    i = 1\\n    k = 0\\n    cnt = 0\\n    while i <= N:\\n        S[k].append(i)\\n        i += 1\\n        cnt += 1\\n        if cnt == K - (k+1):\\n            k += 1\\n            cnt = 0\\n\\n    j = 1\\n    k = 1\\n    cnt = 0\\n    col = 0\\n    while j <= N:\\n        S[k].append(j)\\n        j += 1\\n        k += 1\\n        cnt += 1\\n        if cnt == K - (col+1):\\n            col += 1\\n            k = col + 1\\n            cnt = 0\\n\\n    print(\"Yes\")\\n    print(K)\\n\\n    for s in S:\\n        print(K - 1, *s)\\n\\n    \\nif __name__ == \"__main__\":\\n    main()\\n", "target": "502", "substitutes": {"read": ["rid", "find", "hold", " get", "load", "ro", "str", "write", "run", "get", "test", "readable", " send", "rc", " write", "rx", "raw", "r", "txt", "length", "od", "input", "reads", "send", " find", "default", "trans", "f", "ead", " Read", "feed", "std", "stream", "each", " READ", "eng", "Read", "first", "READ", "q", "reader", "text", " reads", "rd"], "readline": ["readln", "rline", " readln", "Readstring", " readfile", "getline", "Readlines", "getget", "readget", "loadln", "readfile", "rfile", "loadfile", "readLine", "rlines", " readLine", "Readln", "Readfile", "loadlines", "readstring", "rget", "Readline", "loadstring", "getfile", "loadLine", " readstring", "ReadLine", "getlines", "loadline", " readget"], "readlines": ["writeelines", "loadfiles", "rline", "rls", " readfiles", "Readlines", "writefiles", "readls", "Readfiles", "rlines", "writelines", "Readelines", "loadlines", "readelines", " readelines", "writeline", "rfiles", " readls", "loadls", "readfiles", "Readline", "loadline"], "N": ["SN", "CNN", "n", "M", "NS", "NL", "T", "NV", "NC", "GN", "NI", "Na", "NW", "Ns", "R", "I", "NA", "L", "NM", "NN", "NP", "NR", "NT", "NH", "ANY", "Node", "V", "No", "NO", "NK", "B", "J", "ND", "Num", "P", "A", "Network", "Net", "D", "NB", "Size", "MN", "Ni", "NVIDIA", "AN", "TN", "Now", "FN", "NG", "C"], "K": ["M", "Need", "T", "KN", "KY", "KR", "AK", "KEY", "Power", "Now", "R", "I", "X", "L", "KK", "ANK", "H", "FK", "KER", "V", "KS", "TN", "NO", "MC", "PK", "Sk", "Kent", "NK", "KC", "J", "SK", "Q", "G", "KB", "P", "Num", "HK", "Mask", "E", "Han", "VK", "Keep", "NB", "Y", "OK", "UK", "MN", "F", "AC", "KI", "Kansas", "Z", "KE", "KA", "KING", "C", "AN"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "iii", "ie", "ci", "gi", "ir", "p", "g", "di", "ai", "I", "aci", "r", "c", "z", "m", "bi", "qi", "info", "ic", "ix", "o", "ip", "iri", "f", "t", "ri", "io", "si", "iu", "dr", "li", "ii", "v", "ori", "int", "ti", "oi", "im", "it", "ini", "zi", "ui", "q", "l", "pi", "phi", "u", "id", "y", "index", "ik", "ij", "Ni", "hi"], "S": ["M", "NS", "T", "BS", "SS", "SL", "R", "I", "X", "L", "PS", "RS", "YS", "SI", "CS", "TS", "CSS", "Screen", "Set", "H", "W", "O", "V", "Sample", "INS", "B", "J", "Q", "G", "FS", "P", "A", "E", "Notes", "SU", "D", "DS", "Y", "F", "SR", "Z", "BY", "C"], "_": ["n", "x", "ct", "__", "I", "ate", "ix", "let", "val", "pt", "an", "all", " __", "line"], "k": ["ck", "km", "ki", "n", "ek", "uk", "x", "kr", "kn", "kh", "kl", "ijk", "KR", "p", "d", "g", "ak", "ke", "kid", "w", "c", "z", "m", "isk", "dk", "ks", "kw", "ko", "kind", "kb", "f", "b", "tk", "t", "disk", "key", "kj", "ok", "kick", "it", "work", "ikk", "ku", "ark", "kt", "wk", "tek", "u", "kk", "sk", "ik", "ka", "kg", "kan", "y", "ack", "mk", "unk", "kit", "ac"], "cnt": ["ncant", "CNT", "lconds", "ecNT", "lcNT", "ccd", "discnt", " ccd", "ecerent", "ucnz", "count", "Cnc", " cNT", "cachest", "ccnt", "lcdef", "cst", "cachecd", "Cnt", " cst", "discNT", "lcant", "ecnt", "cacheerent", "cont", "cNT", "cachent", " cant", "cdef", "cumnt", "lcnt", " cont", "ccant", "ncnc", "Cant", "cant", " cnc", "cpt", "ncnt", "ccnc", "disccd", "Count", "ucnt", "conds", "ccpt", "cachenc", " cerent", "cacheant", "cnc", "ccount", "cumont", "cinnc", "cacheont", "ncNT", "cerent", " cdef", "cacheNT", "cinonds", "cnz", "ecnc", "ucont", "discont", "ucnc", "lcount", "cinnt", "cinNT", "Conds", "cumnc", "lcpt", "cachenz", "cumnz", "Cont", "ccdef", " cpt", "lcnc", "Cst"], "j": ["json", "n", "x", "uj", "ja", "js", "aj", "p", "g", "jp", "job", "r", "oj", "jc", "z", "c", "jj", "bi", "bo", "o", "h", "pr", "jl", "fr", "b", "je", "jac", "t", "br", "J", "bj", "li", "ji", "v", "kj", "obj", "gr", "it", "tr", "jump", "q", "l", "dj", "u", "y", "ij", "bs"], "col": ["loc", "rot", "con", "n", "scroll", "x", "label", "nt", "cat", "path", "offset", "p", "table", "column", "child", "COL", "ct", "cell", "c", "ox", "z", "fc", "el", "Col", "ctx", "bo", "pr", "fr", "fn", "tab", "pt", "block", "ot", "fl", "icol", "key", "out", "cal", "row", "obj", "cp", "ch", "it", "ol", "co", "coll", "ll", "l", "il", "cl", "y", "cr"], "s": ["a", "n", "x", "state", "services", "ats", "js", "d", "p", "SS", "ows", "w", "hs", "c", "m", "ns", "rs", "ses", "ins", "ons", "ms", "ls", "b", "t", "ss", "uns", "tes", "its", "v", "e", "gs", "sin", "sq", "ws", "xs", "sv", "bes", "sts", "sets", "rows", "es", "os", "y", "ds", "ps"]}}
{"code": "S=input()\\ncnt=0\\nfor i in range(len(S)):\\n    if i%2==int(S[i]):\\n        cnt+=1\\nprint(min(cnt,len(S)-cnt))\\n", "target": "495", "substitutes": {"S": ["M", "N", "Source", "NS", "T", "SF", "SH", "BS", "SS", "SL", "SB", "R", "I", "JS", "L", "SO", "SER", "Si", "RS", "PS", "SI", "CS", "SM", "H", "V", "SAM", "INS", "SOURCE", "B", "Q", "G", "P", "SE", "A", "E", "s", "SU", "SP", "D", "DS", "SA", "F", "String", "Z", "C"], "cnt": ["ucNT", "cnd", "Cret", "cgt", "ngt", "cNT", "cct", "cnc", "lcNT", "nret", "cret", "rcnt", "nst", "ucnc", "lcount", "lcnt", "nnt", "count", " cNT", " cct", " cnc", "rcnc", "Cct", " count", "cst", "Cnd", " cgt", "rcst", "ucount", "Cgt", "Cnt", " cret", "lcnc", "lcst", " cst", "Cst", "ucnt", "nct", "rcount", " cnd", "nnd"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "di", "ai", "I", "iter", "c", "m", "batch", "bi", "yi", "qi", "ic", "ski", "ix", "ip", "iri", "ind", "si", "li", "key", "ii", "v", "ji", "ti", "oi", "iy", "s", "it", "zi", "ini", "\u0438", "q", "phi", "pi", "l", "id", "j", "y", "index", "ij", "ik", "iu"]}}
{"code": "import sys\\nimport collections\\n\\ninput = sys.stdin.readline\\n\\ndef main():\\n    N = int(input())\\n    Slist = []\\n    for _ in range(N):\\n        Slist.append(str(input()[:-1]))\\n    SlistCounter = list(collections.Counter(Slist).items())\\n    SlistCounter.sort(key=lambda x: x[0])\\n    SlistCounter.sort(key=lambda x: x[1], reverse=True)\\n    maxcnt = SlistCounter[0][1]\\n    for s, cnt in SlistCounter:\\n        if cnt != maxcnt:\\n            break\\n        print(s)\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "750", "substitutes": {"input": ["history", "open", "next", "cmp", "load", "pattern", "str", "select", "active", "init", "get", "human", "shift", "connect", "inc", "raw", "seed", "password", "ref", "focus", "read", "enum", "output", "cur", "cmd", "empty", "hidden", "initial", "feed", "out", "Input", "list", "cin", "int", "each", "sleep", "gets", "exec", "ch", "gen", "print", "dq", " Input", "q", "hello", "command", "sample", "lat", "enter", "index", "text", "source", "request", "sum"], "N": ["SN", "M", "n", "NS", "T", "NV", "NC", "GN", "NI", "Ns", "R", "I", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "V", "NO", "Z", "NUM", "S", "J", "P", "Num", "D", "NB", "Y", "Len", "K", "TN", "C"], "Slist": ["Stmp", "Sprint", "Nli", " SList", "NList", " Sprint", "CStmp", "CSlist", "Simplelist", "EStree", "StringList", " Sli", "Stringlist", "Slt", "CSline", "Nget", "Stringtree", "Simpletmp", "SUList", "ESList", "ESlt", "SUli", " Sget", "Stringlt", "Simpleprint", " Stree", " Slt", "Sline", "SUget", " Stmp", "SUlist", "Sli", "Simpleline", "ESlist", " Sline", "CSprint", "Nlist", "Stree", "Sget", "SList"], "_": [" the", " y", " j", " k", "I", " l", " x", " __", " you", " p"], "SlistCounter": ["SlistedNumber", "SsetManager", "SlistBuffer", "SListReader", "SUlistNumber", "SUlistGC", "SlistTimer", "SistCounter", "SLISTCounter", " SlistNumber", "SLISTTimer", " SlevelCounter", "SlistsCounter", "SistBuffer", "SlistGC", "SvalueNumber", " SlistTimer", "StableCounter", "SlevelBuffer", "SlistNumber", "SistReader", "SListManager", "SlistedManager", " SlistBuffer", "SLISTNumber", "SlevelCounter", "Slistcounter", "SlistAlready", "SmoduleTimer", "SmoduleNumber", "SvalueTimer", "SUtableNumber", " SlistClock", "SListCounter", "SlistsNumber", " SsetManager", " Slevelcounter", "SLISTAlready", "SmoduleAlready", "SListNumber", " SlevelBuffer", " SlistReader", " SmoduleCounter", " SlistManager", "SsetNumber", "SlistsReader", "SlistClock", "SsetClock", "SUlistTimer", "SvalueGC", " SmoduleNumber", " SsetClock", "Sistcounter", "SListClock", "SlistIndex", "SlistReader", "SvalueCounter", "SlevelReader", "StableGC", "Slevelcounter", "SUtableTimer", "SmoduleCounter", "SListAlready", " SsetNumber", " SlistAlready", " SsetCounter", "SlistsIndex", "SlistedCounter", "SListGC", "SlistManager", " SlevelReader", " SmoduleAlready", " SlistIndex", " SmoduleTimer", "SUtableCounter", "StableNumber", "SListBuffer", "SsetCounter", "SlistedClock", "SListIndex", "SListcounter", "StableTimer", "SUlistCounter", "SUtableGC", " Slistcounter", "SListTimer"], "maxcnt": ["maxlcct", "maxconnt", "maxCct", " maxacount", "maxlcth", "maxscount", "maxlcount", "maxscnt", " maxlcnt", "maxscpt", "maxCounter", "maxcounter", "maxacount", " maxcount", " maxacth", " maxlcct", " maxcct", "maxlcounter", "maxcct", "maxcount", " maxcpt", " maxcounter", " maxacpt", "maxconount", "maxcpt", "maxconounter", "maxscth", "maxacnt", "maxlcpt", "maxcth", " maxacnt", " maxlcount", "maxacpt", "maxacth", "maxlcnt", "maxCnt", "maxconct", " maxcth", "maxCount", " maxlcounter"], "s": ["n", "summary", "str", "ats", "ains", "p", "names", "g", "ews", "i", "fs", "w", "items", "r", "c", "m", "ns", "details", "rs", "tests", "ins", "h", "ls", "abs", "f", "t", "S", "ss", "v", "e", "sq", "gs", "ws", "string", "ims", "xs", "sv", "sts", "cs", "y", "es", "stats", "qs", "ds", "ps", "bs"], "cnt": ["cnd", "cnc", "cct", "scst", "ncnc", "ncnd", "scnt", "count", "Cnc", " cnd", " cct", "scnc", " cnc", "Cct", "ncnt", " count", "cst", "ncount", "Cnd", "Cnt", "Count", " cst", "scct", "Cst"]}}
{"code": "def examA():\\n    N = I(); A = LI()\\n    sumnale = sum(A)/N\\n    cur = 10**9; curL = 0\\n    for i in range(N):\\n        if cur>abs(A[i]-sumnale):\\n            cur = abs(A[i]-sumnale)\\n            curL = i\\n    ans = curL\\n    print(ans)\\n    return\\n\\n\\nimport sys,copy,bisect,itertools,heapq,math\\nfrom heapq import heappop,heappush,heapify\\nfrom collections import Counter,defaultdict,deque\\ndef I(): return int(sys.stdin.readline())\\ndef LI(): return list(map(int,sys.stdin.readline().split()))\\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\\ndef LS(): return sys.stdin.readline().split()\\ndef SI(): return sys.stdin.readline().strip()\\nmod = 10**9 + 7\\ninf = float('inf')\\n\\nif __name__ == '__main__':\\n    examA()\\n", "target": "89", "substitutes": {"N": ["SN", "n", "M", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NR", "NT", "NH", "W", "O", "V", "TN", "No", "S", "B", "J", "Q", "G", "P", "E", "D", "NB", "Y", "MN", "Ni", "K", "F", "Z", "C"], "A": ["a", "GA", "M", "T", "All", "An", "Ar", "Alpha", "AU", "AT", "R", "I", "X", "L", "NA", "AL", "AB", "AE", "H", "LA", "AA", "As", "V", "AI", "WA", "RAM", "S", "B", "G", "P", "AP", "HA", "CA", "MA", "You", "At", "JA", "AF", "D", "AM", "SA", "AC", "F", "AN", "Array", "C"], "sumnale": ["sostales", " sumnALE", "ssrownaled", " sostales", "sumerree", " sumnales", "ssumnaley", "suntaler", "sogenaley", " sostale", "somaticree", " somaticALE", "srownaley", "sogenale", "ssrownalse", " sumnaler", "sostALE", "sumnALE", "suntales", "sumnree", "ssrownale", "somaticalse", "srownalse", " somaticalse", " sostALE", "sogenaled", "sostale", "ssrownaley", "sodale", "sumanree", "sumnaled", "sogenalse", "sumanalse", "sumanale", "somaticALE", " somaticale", "sumnaley", "sumerALE", "somaticales", " sostaler", "somaticale", "ssumnaled", "sumnalse", "srownale", "sodalse", "suntale", "ssumnale", "suntALE", " somaticree", "sodaled", "sostaler", " sumnalse", "sumeralse", "sumerale", "sumnaler", " sumnree", "ssumnalse", "sumanALE", "somaticaler", "srownaled", "sodaley", "sumnales"], "cur": ["loc", "con", "ser", "ge", "err", "sum", "sur", "gc", "cont", "Cr", " Cur", "ct", "sche", "rc", "car", "r", "scale", "c", "current", "dec", "cor", "sec", "const", "sl", "col", "ctr", "pri", "count", "fac", "stable", "sch", "ver", "Cur", "ur", "ch", "tr", "gr", "char", "now", "co", "lr", "desc", "au", "Sur", "div", "tmp", "se", "cr", "pg", "sc"], "curL": ["curS", "origL", "curB", " CurN", "curH", " curJ", "CurJ", " CurH", "CurB", " curI", "origB", " curN", "rcL", "curI", " curS", "rcI", " curH", "CurS", " curB", "curN", "CurH", "origS", " CurL", "CurL", "CurN", "curJ", " CurJ", "CurI"], "i": ["a", "mi", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "iter", "c", "m", "batch", "bi", "yi", "info", "ix", "ic", "o", "ip", "ind", "multi", "t", "io", "si", "sim", "li", "ii", "v", "int", "ti", "list", "s", "it", "ini", "zi", "ui", "q", "phi", "pi", "l", "id", "index", "y", "j", "ij", "k", "hi"], "ans": [" orphans", "ANS", " sets", "ants", " threads", " means", "outs", "ai", "aus", " errors", "lines", "sels", " Ans", "ns", "vals", " lines", "ann", " spans", "ses", "ins", "values", "ms", "amps", "ls", "ens", "ots", " stats", " names", "uns", "Li", "an", "gs", " scans", "terms", "s", "xs", "au", "sets", "cs", "rows", "stats", "AN", "ds", "obs", " sums", "olds"], "mod": ["con", "perm", "MOD", "sign", " Mod", "mods", "cont", "aj", "sub", "mult", "Mod", "acc", "fun", "inv", "set", "prime", "round", "dec", "bo", "fac", "cond", "conf", "add", "adj", "times", "ran", "var", "rand"], "inf": ["max", "err", "sign", "cont", "mult", "Inf", "sup", "rc", "inv", "diff", "info", "log", "fin", "fac", "cond", "alpha", "auto", "conf", "add", "std", "sin", "adj", "nan", "phi", "pi", "error", "init", "frac"]}}
{"code": "N = int(input())\\n\\na = list(map(int,input().split()))\\n\\na.sort()\\n\\n\\nx = []\\ni = len(a)-1\\n#print(a)\\n\\nwhile i > 0:\\n    if a[i] == a[i-1]:\\n        x.append(a[i])\\n        i-=1\\n\\n    i-=1\\n    \\n    if len(x) == 2:\\n        print(x[0]*x[1])\\n        exit()\\n\\n\\n\\nprint(0)\\n\\n\\n", "target": "53", "substitutes": {"N": ["M", "n", "T", "Ns", "R", "I", "X", "L", "NN", "H", "O", "V", "S", "B", "J", "Q", "G", "P", "Num", "A", "E", "D", "Y", "Len", "Ni", "K", "F", "Z", "C"], "a": ["n", "ia", "sta", "ae", "ab", "ta", "p", "va", "xa", "zero", "w", "r", "c", "ma", "z", "m", "ata", "ga", "aux", "h", "la", "aaa", "done", "f", "b", "t", "alpha", "da", "v", "an", "e", "all", "A", "at", "sa", "oa", "au", "aos", "aa", "l", "j", "y", "array", "area", "ba", "ca", "ao"], "x": ["n", "xi", "ex", "p", "xc", "xa", "X", "rx", "w", "c", "z", "m", "xt", "ix", "o", "tx", "f", "t", "v", "e", "xy", "xs", "dx", "xx", "l", "y", "es"], "i": [" ii", "mi", "n", "xi", "d", "p", "ai", "I", "c", "m", "bi", "o", "h", "ind", "f", "b", "t", "v", "ti", "it", "q", "l", "id", "j", "k", "index", "ij"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\n\\n\\ndef get_primes(n):\\n    sieve = [1] * n\\n    for i in range(3, int(n ** 0.5) + 1, 2):\\n        if sieve[i]:\\n            sieve[i * i:: 2 * i] = [0] * ((n - i * i - 1) // (2 * i) + 1)\\n    return [2] + [i for i in range(3, n, 2) if sieve[i]]\\n\\n\\ndef main():\\n    N = int(input())\\n    primes = get_primes(55555)\\n    ans = []\\n    for p in primes:\\n        if len(ans) == N:\\n            break\\n\\n        if p % 5 == 1:\\n            ans.append(p)\\n\\n    print(*ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "173", "substitutes": {"input": ["history", "str", "select", "util", "view", "run", "get", "put", "reset", "eval", "shift", "inc", "raw", "txt", "utils", "control", "ref", "focus", "read", "step", "output", "f", "fn", "config", "parse", "feed", "out", "pull", "Input", "int", "update", "sleep", "print", " Input", "q", "proc", "reader", "enter", "index", "data", "mode", "text", "source", "request"], "n": ["nt", "d", "ln", "ne", "g", "sn", "r", "c", "w", "m", "z", "ns", "o", "h", "f", "b", "num", "t", "nb", "nor", "no", "mn", "na", "v", "nc", "s", "nan", "nu", "nw", "size", "nn", "l", "q", "np", "pi", "u", "ng", "j", "y", "k"], "sieve": ["svet", "schieve", "bchieve", "rsieve", "scive", "assieves", "seieving", "rsift", " sve", "sive", "sieves", "seiever", "asschieve", "bieves", "isift", "scchieve", "ssieve", "assve", "rsieves", " sift", " sieves", "isvet", " svet", "rsvet", "rsiever", "seieve", "isiever", "bieve", "sve", "sift", "scieve", "scieves", " sive", "assieve", "sieving", "ssieving", "rschieve", "rsve", "ssiever", "ssive", "isieve", " schieve", "siever", " siever", "bive", " sieving", "seive"], "i": [" I", "mi", "a", "xi", "x", "ia", "ie", "ci", "gi", "d", "ir", "g", "di", "ib", "ai", "I", "r", "c", "m", "z", "bi", "yi", "ic", "ix", "o", "ip", "h", "iri", "ind", "f", "b", "multi", "t", "ri", "io", "si", "li", "ii", "key", "v", "e", "int", "ti", "s", "it", "zi", "ini", "ui", "phi", "pi", "ati", "il", "l", "u", "id", "y", "j", "index", "ik", "ij", "fi", "iu", "hi", "k"], "N": ["SN", "M", "NS", "T", "Ne", "NC", "NI", "Ns", "R", "I", "X", "L", "NA", "NR", "NT", "W", "H", "O", "V", "No", "S", "PN", "B", "J", "P", "Num", "A", "Sn", "D", "Y", "Len", "Ni", "K", "F", "Z", "C"], "primes": ["replinters", "prunes", "PRimens", "replimes", "trinters", "trime", "trins", "prime", "printers", "replins", "trimes", "PRinces", "trimens", " prunes", "PRimes", " printers", "primens", "trinces", "trunes", "princes", "PRime", " prime", " primens", "prins", "replunes", " prins", " princes"], "ans": ["a", "ars", "ANS", "ians", "ats", "ants", "anon", "ai", "ros", "aus", "aned", "ns", "eatures", "ann", "ums", "rans", "eas", "anas", "ks", "ins", "ras", "vers", "ons", "ms", "angs", "amps", "ls", "ents", "animate", "ens", "ations", "ids", "news", "anc", "cons", "uns", "an", "anners", "anks", "gs", "anes", "yrs", "idents", "uploads", "ran", "ams", "aos", "acers", "ands", "arts", "asms", "said"], "p": ["a", "x", "pair", "perm", "point", "d", "ep", "pc", "g", "rep", "jp", "w", "r", "c", "m", "pe", "fp", "page", "power", "o", " pp", "pa", "ip", "h", "pr", "f", "sp", "t", "part", "lp", "pid", "v", "P", "e", "ap", "cp", "it", "s", "ping", "yp", "q", "l", "bp", "pi", "np", "pat", "u", "j", "k", "y", "pol", "pp", "ps", "xp", "pg"]}}
{"code": "def resolve():\\n    n, m = map(int, input().split())\\n    a = [list(map(int, input().split())) for i in range(m)]\\n    a = [[x, y, -z] for x, y, z in a]\\n    print(BF(a, n, 1)[-1])\\n\\n\\ndef BF(p, n, s):\\n    inf = float(\"inf\")\\n    d = [inf for i in range(n)]\\n    d[s-1] = 0\\n    for i in range(n+1):\\n        for e in p:\\n            if e[0] != inf and d[e[1]-1] > d[e[0]-1]+e[2]:\\n                d[e[1]-1] = d[e[0]-1] + e[2]\\n        if i == n-1:\\n            t = d[-1]\\n        if i == n and t != d[-1]:\\n            return [0, 'inf']\\n    return list(map(lambda x: -x, d))\\n\\n\\nif __name__ == \"__main__\":\\n    resolve()", "target": "258", "substitutes": {"n": ["N", "nt", "gn", "en", "name", "ne", "g", "cn", "r", "sn", "c", "ns", "o", "f", "b", "num", "nb", "mn", "na", "an", "int", "nc", "v", "nan", "nu", "nn", "l", "pi", "np", "j", "nd"], "m": ["mi", "M", "mr", "me", "dm", "mm", "g", "r", "c", "ma", "man", "bm", "o", "gm", "h", "ms", "f", "b", "num", "mc", "mn", "v", "an", "q", "l", "k", "j", "cm"], "a": ["ae", "ac", "ab", "ta", "ach", "g", "ai", "xa", "r", "w", "c", "ma", "ata", "ga", "o", "ea", "pa", "f", "b", "alpha", "da", "na", "an", "A", "ap", "al", "at", "sa", "ao", "oa", "aa", "l", "am", "es", "area", "ba", "ca"], "i": ["mi", "xi", "ia", "ni", "ie", "ci", "gi", "di", "ai", "I", "r", "c", "iti", "ic", "ix", "o", "ip", "f", "b", "ri", "si", "li", "ii", "ei", "int", "ti", "oi", "iy", "im", "it", "ini", "zi", "phi", "pi", "il", "l", "u", "id", "j", "ij", "iu"], "x": ["xi", "ex", "any", "ie", "xe", "point", "xc", "xa", "X", "rx", "r", "w", "c", "ox", " ax", "xt", "el", "ic", "ix", "tx", "ax", "f", "xd", "v", "int", " xx", "xy", "it", "xs", "dx", "q", "l", "xx", "u", "px", "xp", "zx"], "y": ["ym", "cy", "oy", "yz", "c", "ly", "ny", "yi", "vy", "py", "b", "axy", "yl", "zy", "ot", "uy", "v", "yn", "ey", "gy", "iy", "xy", "yt", "l", "yy", "Y", "u", "j", "yu", "ry"], "z": ["w", "iz", "yz", "zone", "c", "zh", "o", "ez", "oz", "ze", "b", "uz", "cz", "zy", "v", "zer", "nz", "zi", "gz", "zo", "l", "az", "j", "tz", "zen", "Z", "zz"], "p": ["pc", "g", "jp", "r", "c", "pe", "pb", "o", "tp", "h", "ip", "pa", "pan", "f", "b", "sp", "lp", "v", "P", "ap", "q", "l", "pi", "np", "j", "k", "pp", "ps"], "s": ["g", "r", "sn", "c", "ts", "ns", "ies", "rs", "o", "sl", "h", "ls", "f", "b", "sp", "S", "ss", "si", "v", "sv", "l", "cs", "j", "os", "ds", "ps", "bs"], "inf": ["xi", "asin", "nt", "lim", "Inf", "sup", "inc", "zero", "w", "info", "ins", "ix", "ip", "h", "log", "ind", "df", "f", "ef", "integer", "si", "conf", "hi", "exp", "int", "sin", "rf", "inel", "eq", "up", "inter", "eps", "nan", "it", "tf", "phi", "pi", "pl", "pp", "init", "frac"], "d": ["fd", "dos", "ld", "db", "g", "di", "td", "dh", "r", "w", "c", "dl", "h", "dt", "done", "df", "b", "f", "dat", "da", "dump", "dr", "pd", "de", "v", "ad", "des", "dp", "new", "D", "ed", "do", "l", "dd", "sd", "did", "j", "data", "dict", "ds", "nd"], "e": ["ec", "ce", "ine", "ge", "ae", "ie", "ite", "me", "err", "xe", "edge", "en", "ase", "ep", "ue", "ne", "g", "ate", "c", "pe", "ev", "el", "te", "o", "ea", "h", "be", "ese", "ze", "f", "oe", "b", "ef", "eu", "ee", "ei", "de", "exp", "v", "event", "E", "eps", "eg", "est", "it", "ve", "ed", "eeee", "et", "l", "element", "le", "one", "u", "se", "er", "ele"], "t": ["T", "ta", "lt", "g", "td", "r", "tc", "wt", "c", "ts", "w", "o", "tp", "h", "dt", "f", "b", "ot", "v", "ti", "at", "tt", "tr", "it", "st", " T", "l", "u", "j", "vt", "tz"]}}
{"code": "import math\\nimport fractions\\nimport collections\\nimport itertools\\nimport pprint\\nN,M=map(int,input().split())\\n\\n#rotate\u3059\u308c\u3070\u4ed6\u306e\u90e8\u5c4b\u3067\u540c\u3058\u7d44\u307f\u5408\u308f\u305b\u304c\u51fa\u3066\u3057\u307e\u3046<=>\u4ed6\u306e\u90e8\u5c4b\u306e2\u6570\u306e\u6570\u5b57\u306e\u5dee\u304c\u540c\u3058\u306b\u306a\u3063\u3066\u3057\u307e\u3046\\n#\u524d\u534a\u5206\u3092\u5076\u6570\u5dee\u3001\u5f8c\u308d\u534a\u5206\u3092\u5947\u6570\u5dee\u3068\u8a00\u3063\u305f\u611f\u3058\u3067\u4e0a\u304b\u3089\u8a70\u3081\u308c\u3070\u826f\u3044\\n#\u90e8\u5c4b\u6570\u3092M\u3068\u3057\u3066\u30011,2,...,M\u306e\u5dee\u3092\u8003\u3048\u308b\\nl=[]\\nmaemin=1\\nusiromax=N\\nfor i in range(M,0,-1):\\n    if i%2==0:\\n        l.append([maemin,maemin+i])\\n        maemin=maemin+1\\n    else:\\n        l.append([usiromax-i,usiromax])\\n        usiromax=usiromax-1\\n#print(l)\\n\\nfor i in range(M):\\n    print(*l[i],sep=\" \")\\n\\n\\n\\n", "target": "761", "substitutes": {"N": ["n", "T", "Ns", "X", "I", "R", "L", "NM", " n", "H", "O", "V", "S", "B", "J", "Q", "G", "P", "E", "D", "Y", "MN", "U", "K", "F", "Z", "C"], "M": ["T", "CM", "X", "R", "I", "L", "m", "MM", "O", "V", "S", "B", "J", "Q", "P", "A", "E", "D", "Y", "MN", "MT", "U", "K", "F", "Z", "PM", "C"]}}
{"code": "N = int(input())\\nA = list(map(int,input().split()))\\n\\nB = [0] * N\\nM = 0\\nans = []\\nfor i in range(N,0,-1):\\n    S, idx = 0, i-1\\n    while idx <= N-1:\\n        S += B[idx]\\n        idx += i\\n\\n    if S % 2 != A[i-1]:\\n        B[i-1] = 1\\n        M += 1\\n        ans.append(i)\\n        \\n\\nprint(M)\\nfor a in ans:\\n    print(a, end=\" \")\\nprint(\"\")", "target": "568", "substitutes": {"N": ["SN", "n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "NT", "H", "V", "TN", "NO", "J", "Q", "G", "ND", "P", "Num", "D", "NB", "MN", "Len", "Ni", "K", "F", "AN", "Z", "C"], "A": ["GA", "T", "An", "Alpha", "AU", "AT", "I", "L", "NA", "AST", "AB", "H", "AA", "LA", "As", "V", "AR", "AS", "G", "This", "P", "AP", "CA", "E", "D", "AF", "AM", "SA", "U", "AC", "AN", "BA", "Array", "C"], "B": ["LB", "BI", "T", "VB", "BS", "BL", "Bs", "SB", "R", "I", "L", "AB", "BG", "AA", "V", "BT", "b", "BC", "BE", "J", "G", "WB", "PB", "P", "BB", "E", "TB", "D", "EB", "Y", "BO", "DB", "BA", "C"], "M": ["T", "CM", "R", "I", "X", "L", "NM", "MX", "MAL", "RM", "m", "Mass", "Ms", "H", "MM", "O", "MC", "V", "MAN", "J", "Q", "G", "P", "MS", "Message", "D", "AM", "FM", "MI", "MT", "MN", "U", "K", "LM", "F", "Z", "C"], "ans": ["ars", "ANS", "ants", "ats", "ians", "ana", "eds", "outs", "ai", "missions", "xa", "aus", "us", "aned", " Ans", "ns", "ann", "ums", "rs", "ks", "anas", "offs", "ins", "ons", "ms", "angs", "acts", "ls", "anned", "ents", "ens", "cons", "uns", "an", "gs", "iann", "un", "anes", "idents", "s", "xs", "nan", "nas", "ams", "aos", "ads", "cs", "os", "AN", "ds"], "i": ["mi", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "c", "m", "z", "batch", "bi", "status", "info", "ic", "ix", "o", "ip", "ind", "f", "b", "t", "ri", "si", "li", "ii", "v", "int", "ti", "list", "im", "it", "s", "zi", "ini", "\u0438", "l", "pi", "phi", "id", "j", "index", "y", "ij", "iat", "fi", "iu"], "S": ["Single", "NS", "T", "Socket", "SF", "SS", "SB", "R", "I", "X", "L", "Si", "Su", "SI", "CS", "TS", "State", "Set", "Sy", "SM", "H", "V", "Ins", "Sum", "IS", "States", "J", "Q", "G", "P", "E", "s", "Is", "MS", "D", "Size", "SA", "U", "K", "F", "C"], "idx": [" idy", "idz", " idX", "midy", "Idxs", "idy", "midj", "idxs", "Idex", "indxc", "IDex", "idX", "idn", "Idx", " idxs", "Idxc", "odn", " idz", "Idy", "odx", "IdX", "idxc", "indj", "indn", "indindex", " idn", "odxs", "indx", "midx", "IDindex", "odindex", "IDX", " idj", "idex", "idindex", "IDx", " idxc", "Idindex", " idindex", " idex", "indy", "midz", "idj", "indz", "indxs"], "a": ["n", "ae", "ab", "aff", "ta", " af", "p", "g", "va", "ai", " sa", " da", "ma", "AB", "ata", "ga", "AA", " ra", "act", "abs", "\u00e4", "b", "t", " ca", " ba", "alpha", " pa", "na", "an", "all", " ja", "ap", " ma", "up", "another", "sa", "s", " fa", "au", "oa", "aa", "l", "ka", "SA", "ba", " na"]}}
{"code": "*l, = map(int, open(0).read().split())\\nif l[1] % l[0] == 0:\\n\tprint(l[0] + l[1])\\nelse:\\n\tprint(l[1] - l[0])", "target": "137", "substitutes": {"l": ["lc", "n", "los", "x", "els", "tl", "kl", "ql", "ln", "d", "p", "ld", "lt", "g", "lb", "i", "L", "long", "r", "c", "ml", "z", "ly", "dl", "el", "lit", "lag", "nl", "sl", "la", "h", "lay", "ls", "jl", "f", "b", "t", "hl", "yl", "lis", "rl", "lists", "lo", "lp", "li", "fl", "lam", "v", "list", "al", "lv", "s", "lr", "ol", "q", "ll", "le", "pl"]}}
{"code": "n = int(input())\\n\\ndef f(lst):\\n  res = 0\\n  ex = 0\\n  for a in lst:\\n    ex += a\\n    res += ex//2\\n    ex %= 2\\n  return res\\n\\nA = []\\nans = 0\\nfor _ in range(n):\\n  a = int(input())\\n  if a%2:\\n    ans += a//2\\n    a = 1\\n  else:\\n    if a>2:\\n      ans += a//2-1\\n      a = 2\\n\\n  if a!= 0:\\n    A.append(a)\\n  elif A:\\n    ans += max(f(A), f(A[::-1]))\\n    A = []\\n  else:\\n    continue\\nelse:\\n  ans += max(f(A), f(A[::-1]))\\nprint(ans)\\n\\n", "target": "455", "substitutes": {"n": ["nr", "N", "x", "nt", "ln", "d", "p", "ne", "cn", "i", "r", "sn", "c", "w", "m", "z", "ns", "o", "nl", "num", "t", "len", "nb", "no", "mn", "na", "v", "nc", "s", "nan", "nn", "l", "np", "j", "k"], "lst": ["Lnd", "tsts", "slsts", "List", "Lsts", "llnd", "lnd", "slst", "tnd", " list", "llsts", "lsts", "Lst", "list", "llst", "llist", "tst", " lsts", "slist", "tist"], "res": ["resolution", "con", "max", "x", "ron", "ats", "ra", "resh", "ab", "p", "ret", "reset", "rep", "rx", "Res", "re", "r", "ox", "ref", "ns", "rem", "rs", "RES", "ix", "ins", " pres", "ons", "ms", "ries", "tx", "act", "ax", "ires", "ress", "cons", "sim", "pos", "out", "results", "exp", "obj", "red", "des", "gr", "rest", "pres", "yes", "cs", "j", "os", "ps"], "ex": ["wx", "con", "x", "max", "pex", "ac", "ats", "ab", "ra", "exc", "ai", "EX", "ext", "rx", "re", "us", "ape", "ox", "ns", "rem", "el", "eas", "hex", "ins", "aux", "ix", "tex", "tx", "act", "ax", "sex", "abs", "ens", "exclusive", "off", "out", "exe", "exp", "des", "xs", "rest", "com", "times", "nex", "lex", "es", "pers", "Ex"], "a": ["x", "era", "p", "ana", "i", "r", "z", "ita", "pa", "aaa", "fa", "ua", "exp", "e", "v", "sa", "app", "ba", "any", "ia", "aff", "ta", "g", "ai", "ata", "eas", "o", "da", "s", "sha", "oa", "l", "sta", "ae", "d", "xa", "ga", "val", "isa", "alpha", "apa", "add", "an", "all", "ap", "ao", "ed", "aa", "ar", "index", "ab", "action", "name", "ach", "w", "ma", "ea", "la", "act", "ax", "f", "b", "t", "art", "int", "at", "au", "aos", "am", "j", "area", "ca", "ac"], "A": ["GA", "M", "N", "New", "Ax", "T", "API", "Al", "An", "Ar", "Alpha", "Abs", "AU", "AT", "X", "Av", "R", "L", "I", "AL", "AST", "AV", "One", "AB", "App", "AE", "Args", "H", "W", "AA", "LA", "As", "O", "WA", "V", "AR", "C", "AI", "S", "Bar", "B", "G", "This", "P", "Address", "HA", "CA", "At", "E", "MA", "JA", "AF", "Go", "D", "TA", "AM", "Y", "SA", "AC", "F", "The", "Array", "Z", "AP"], "ans": ["ars", "ANS", "ants", "ats", " means", "eds", "outs", "ai", "ows", "aus", "ros", "aned", "san", "ts", " Ans", "ates", "ns", "ann", "rans", "rs", "man", "anas", "ks", "offs", "ins", "ras", "mas", "ons", "ms", "amps", "ls", "ents", "ens", "cons", "uns", "can", "an", "aps", "anes", "ays", "s", "xs", "ran", "ams", "aos", "ands", "yes", "vs", "arts", "es", "os"], "_": [" e", " j", "__", "val", "no", "j"]}}
{"code": "a, b = input().split(\" \")\\na = int(a)\\nb = int(b)\\nif a-2*b < 0:\\n  print(0)\\nelse:\\n  print(a-2*b)\\n", "target": "520", "substitutes": {"a": ["ce", "arg", "n", "x", "ia", "sta", "ae", "ac", "ab", "ta", "aj", "p", "ai", "i", "r", "c", "ma", "m", "z", "input", "ga", "eas", "window", "eff", "ea", "la", "aaa", "act", "f", "abs", "t", "part", "alpha", "da", "apa", "na", "an", "v", "all", "A", "al", "obj", "at", "sa", "now", "ao", "af", "aka", "au", "oa", "aa", "l", "am", "ar", "u", "j", "area", "ba", "ca", "after"], "b": ["bis", "body", "n", "sb", "ab", "bar", "d", "db", "beta", "ib", "i", "bg", "c", "bot", "z", "batch", "birth", "bi", "fb", "rb", "bo", "by", "o", "mb", "be", "ob", "br", "f", "bc", "gb", "nb", "B", "bb", "v", "e", "it", "eb", "base", "cb", "l", "bp", "user", "bin", "j", "bound", "big", "bs", "ba"]}}
{"code": "Row = int(input())\\nflag = True\\nList = []\\nfor i in range (Row):\\n  List.append(input())\\ns_l = set(List)\\nif len(List) != len(s_l):\\n  print(\"No\")\\nelse:\\n  for i in range(Row-1):\\n    n = len(List[i])-1\\n    if List[i][n] != List[i+1][0]:\\n      flag = False\\n  if flag:\\n    print(\"Yes\")\\n  else:\\n    print(\"No\")", "target": "218", "substitutes": {"Row": ["Frame", "Total", "Family", "Status", "Scale", "Rank", "Loop", "Right", "Ptr", "Range", "R", "I", "Order", "Mod", "Res", "Number", "Line", "Next", "Tr", "Re", "Column", "Col", "Group", "Pos", "Mass", "Length", "Iter", "No", "Cross", "Se", "Height", "Xi", "Week", "Role", "Num", "User", "Index", "row", "Round", "Loc", "Sc", "Size", "Count", "Cell", "Len", "Item", "Value", "Hi", "Data"], "flag": ["hold", "state", "ld", "failed", "ret", "cloud", "save", "store", "age", "set", "leaf", "wait", "condition", "status", "FLAG", "success", "lag", "nl", "agged", "bug", "tail", "ground", "log", "flags", "mask", "cmd", "f", "level", "tag", "result", "bool", "count", "cond", "len", "quit", "Flag", "nil", "list", "row", "lv", "char", "group", "print", "lock", "do", "l", "enable", "layout", "fire", "member", "join", "sync", "field"], "List": ["Vo", "Lt", "Chain", "Name", "New", "Source", "There", "Language", "All", "Also", "Str", "File", "Print", "LIST", "La", "Log", "Queue", "Copy", "Result", "Ha", "L", "Map", "Next", "Line", "Format", "String", " list", "And", "Block", "Body", "Type", "Re", "Ta", "Range", "Lat", "Group", "Local", "Less", "Set", "Text", "Table", "Rest", "Do", "Listener", "Out", "Val", "Flag", "Add", "Li", "Role", "This", "Long", "list", "Added", "Cache", "Wa", "Net", "St", "Library", "Lens", "Len", "Its", "Names", "Lock", "Value", "Array", "Tree", "Data"], "i": ["\u00ed", "mi", "ki", "xi", "x", "ia", "ie", "um", "gi", "ir", "ci", "p", "vi", "di", "iq", "ai", "I", "r", "c", "m", "yi", "ic", "o", "ix", "ip", "iri", "ind", "f", "ri", "si", "li", "ii", "ji", "v", "e", "ei", "ti", "ori", "iy", "im", "it", "\u00e7", "zi", "ui", "ini", "\u0438", "q", "l", "pi", "id", "y", "k", "j", "ij", "ik", "index", "iu", "iat"], "s_l": ["s_t", "s_v", "s_ly", "set_l", " s_s", "set_ly", "s2l", "s_s", "s2t", "s2s", "set_pl", "s_pl", " s_t", "s2v", " s_v"], "n": ["a", "nr", "N", "x", "nt", "ln", "p", "ne", "g", "sn", "r", "c", "m", "z", "ns", "o", "nl", "h", "f", "num", "t", "nb", "no", "mn", "na", "v", "e", "nc", "nm", "nu", "nn", "l", "q", "np", "ng", "j", "Ni", "y", "k"]}}
{"code": "\\nm = map(int, raw_input().split())\\na = [map(int, raw_input().split()) for i in xrange(m[0])]\\nb = [int(raw_input()) for i in xrange(m[1])]\\nfor i in xrange(m[0]):\\n    print sum(a[i][j] * b[j] for j in xrange(m[1]))", "target": "614", "substitutes": {"m": ["tm", "km", "mi", "M", "n", "mr", "esm", "pm", "perm", "me", "mod", "um", "dm", "d", "p", "mm", "mp", "fm", "g", "span", "r", "mos", "c", "em", "imm", "man", "bm", "rm", "o", "gm", "h", "ms", "f", "mis", "t", "mc", "v", "nm", "om", "sm", "im", "mx", "app", "wm", "l", "orm", "mat", "md", "cm", "mt", "hm"], "a": ["aq", "ae", "ac", "ab", "d", "aj", "acs", "ai", "r", "\u00e1", "ma", "ga", "aux", "ea", "la", "aaa", "act", "abs", "t", "alpha", "da", "att", "an", "A", "ans", "al", "ap", "at", "sa", "app", "au", "aa", "ar", "data", "area", "ba", "ca", "ao"], "i": ["mi", "ki", "xi", "x", "ia", "ie", "ci", "gi", "ir", "p", "di", "ai", "bi", "yi", "iti", "ic", "o", "ip", "ind", "t", "io", "si", "li", "ii", "ji", "ei", "v", "int", "ti", "im", "it", "ini", "zi", "ui", "phi", "pi", "l", "id", "y", "k", "ij", "ik", "iu", "hi"], "b": ["bis", "sb", "ab", "d", "db", "g", "ib", "r", "bg", "c", "bi", "wb", "fb", "rb", "by", "mb", "be", "two", "ob", "br", "f", "bc", "gb", "zb", "B", "bb", "v", "another", "eb", "other", "bl", "cb", "bp", "y", "bs", "ba"], "j": ["json", "n", "x", "uj", "ja", "js", "aj", "g", "di", "jp", "jc", "c", "z", "oj", "jj", "bi", "jl", "jac", "io", "J", "li", "pos", "ji", "kj", "v", "bj", "jas", "obj", "xy", "jump", "q", "l", "dj", "u", "k", "y", "ij"]}}
{"code": "N = int(input())\\narray = [input() for i in range(N)]\\ncount_AC = 0\\ncount_TLE = 0\\ncount_RE = 0\\ncount_WA = 0\\nfor i in array:\\n    if i == \"AC\":\\n        count_AC += 1\\n    elif i == \"TLE\":\\n        count_TLE += 1\\n    elif i == \"RE\":\\n        count_RE += 1\\n    elif i == \"WA\":\\n        count_WA += 1\\nprint(\"AC x \"+str(count_AC))\\nprint(\"WA x \"+str(count_WA))\\nprint(\"TLE x \"+str(count_TLE))\\nprint(\"RE x \"+str(count_RE))", "target": "531", "substitutes": {"N": ["SN", "n", "M", "NS", "T", "NV", "NC", "GN", "NI", "Ns", "R", "I", "NA", "L", "NM", "NN", "NP", "NR", "NT", "NH", "O", "V", "NUM", "S", "B", "J", "Q", "G", "ND", "Num", "P", "A", "D", "NB", "Ni", "K", "F", "Z", "C"], "array": ["channel", "a", "history", "n", "pair", "instance", "random", "attribute", "bar", " Array", "arr", "image", "raw", "vector", "batch", "input", "window", "shape", "audio", "record", "na", "grid", "list", "all", "each", "string", "row", "axis", "Array", "collection", "ar", "network", "range", "index", "ray", "archive", "area", "sequence", "rays", "trace"], "i": ["\u00ed", "iii", "ki", "n", "xi", "x", "iki", "uri", "ni", " Ai", "ite", "ci", "gi", "cli", "di", "uli", "ai", "I", "iter", "eri", "iaz", "Di", "ili", "isi", "bi", " di", "iti", "ic", "ix", " psi", "ip", " bi", "ici", "ri", "si", "ii", "li", "ji", "ei", "ori", "ti", "oi", "iy", "im", "it", "ini", "zi", "phi", "pi", "ati", "u", "id", "bin", "index", "j", "iat", "ij", "aii", "iri", " Xi", "Xi"], "count_AC": [" count_ACK", "count_ACA", "set00AC", "countMAB", "count00PAC", "set_AP", "count_AP", "countXXAC", "count_Ac", "countCountPAC", "countCountAP", "count_PAC", "set_Ac", "countXXACK", " count_CS", " count_PAC", "count00AP", "set_AC", "count00AC", "countXXPAC", "cache_ACA", "count00Ac", "countMRE", "countCountAc", "set_PAC", "cache_AC", "cache_AB", "count_AB", "cache_RE", "countMAC", "countMACA", "countXXCS", "set00Ac", "count_CS", "countCountAC", "count_ACK", "set00PAC", "set00AP"], "count_TLE": ["count_RL", "count_HLE", "countPowerTL", "count_NEM", "countPowerTALSE", "count_IILE", "count_TILE", "count_TEL", "count_TALSE", "count2Tle", "count2TEM", "count_QL", "count2TLE", "count2MLe", "count_WLE", "count_SILE", "countPowerTLE", "count_Nle", "count_Sle", "count_HILE", "count2Mle", "count_QLE", "countPowerQILE", "count2TLe", "count_RALSE", "count_TL", "count_ILE", "count_MLE", "count_NLe", "count_TEM", "count_QALSE", "count_Mle", "countPowerTILE", "count_Hle", "count_SEL", "count_WLe", "count2MLE", "count_HEL", "countPowerQLE", "count_SLE", "count_TLe", "countPowerQALSE", "count_RLE", "count_IALSE", "count_Wle", "countPowerQL", "count_MLe", "count_NLE", "count_WILE", "count_Tle", "count_IL", "count_WEL", "count_MEM", "count_RILE", "count2MEM", "count_QILE", "count_WEM"], "count_RE": ["matchDBRE", "count_CE", "count08RE", "count2WE", "count08CRE", "countDBWA", "count_SE", "Count_WA", "match_WE", "count2WA", "count2CRE", "count08WE", "countPWM", "count08WA", "countDBRE", "Count_SE", "match_WA", "matchDBWE", "Count_CE", "countPRE", "count_CRE", "matchDBWA", "Count_RE", "count_WE", "matchDBWM", " count_CRE", "countDBWM", "match_RE", "countPWA", "countDBWE", " count_WE", "count_WM", "count2RE", "countPWE", "match_WM", "count2WM"], "count_WA": ["countTimeWA", "count_Wa", "count_wa", "count_Han", "Count2WA", "count_AW", "Count2WE", "count2WE", "countCountAW", "Count_WA", " count_wa", "Count_Wave", "countCountWave", "countTimeHan", "count2WA", "countTimeAW", "countCountWA", "countCountWE", "count2AW", "countTimeMAS", "Count_WE", "Count_AW", "Count2AW", "count_Wave", "count_SA", "count2Wave", "Count2Wave", " count_SA", "countTimeWE", "countTimeSA", "count_WE", "count2Wa", "count_MAS", "count2wa", " count_MAS", " count_Wa", " count_WE", "countTimeWave", " count_Han"]}}
{"code": "n = int(input())\\ndata = list(map(int, input().split()))\\n\\ndef gcd(a, b):\\n    while b:\\n        a, b = b, a % b\\n        # print(\"a b\", a, b)\\n    return a\\n\\nleft_ = [0] * (n + 1)\\nright_ = [0] * (n + 1)\\nans = []\\n\\nfor i in range(n):\\n    left_[i] = gcd( left_[i-1], data[i] )\\n\\nfor i in range(n-1, 0, -1):\\n    right_[i] = gcd( right_[i+1], data[i] )\\n\\nfor i in range(n):\\n    ans += [ gcd( left_[i-1], right_[i+1] ) ]\\n\\nprint( max(ans) )\\n", "target": "94", "substitutes": {"n": ["nr", "N", "nt", "d", "p", "name", "r", "sn", "c", "m", "z", "ns", "o", "f", "num", "count", "t", "nb", "na", "nc", "nm", "s", "size", "q", "l", "nn", "np", "k", "j"], "data": ["x", "str", "table", "mu", "p", "left", "scale", "map", "m", "ns", "input", "shape", "step", "output", "values", "dat", "da", "dates", "pos", "v", "list", "xy", "group", "size", "groups", "ds", "array", "Data"], "a": ["aq", "x", "ia", "sta", "ae", "ab", "ach", "g", "air", "xa", "ak", "i", "r", "c", " A", "ata", "eas", "o", "ea", "aaa", "act", "f", "alpha", "bb", "an", "e", "A", "ap", "al", "at", "sa", "now", "app", "au", "oa", "aa", "l", "am", "ar", "area", "ack", "ba", "ca", "ac"], "b": ["bis", "bu", "x", "sb", "to", "ab", "d", "p", "db", "g", "ib", "i", "r", "bg", "c", "reb", "m", "z", " B", "bi", "fb", "rb", "o", "h", "be", "ob", "f", "bc", "t", "B", "bb", "v", "e", "A", "another", "s", "eb", "cb", "l", "bin", "u", "k", "y", "j", "bs", "ba"]}}
{"code": "n = int(input())\\nl = [0 for _ in range(n)]\\nalready = set()\\nnext = 1\\nc = 0\\nfor i in range(n):\\n  a = int(input())\\n  l[i] = a\\nwhile c <= n:\\n  next = l[next-1]\\n  c += 1\\n  if next == 2:\\n    print(c)\\n    break\\n  elif next in already:\\n    print(-1)\\n    break\\n  already.add(next)", "target": "573", "substitutes": {"n": ["nr", "N", "nt", "ln", "d", "p", "ne", "g", "sn", "r", "w", "m", "z", "ns", "total", "o", "nl", "h", "f", "b", "num", "t", "nia", "len", "nb", "no", "na", "v", "nc", "s", "nu", "q", "number", "np", "nn", "ll", "network", "j", "ng", "rn", "k", "y"], "l": ["lc", "kl", "ln", "ld", "p", "g", "L", "r", "ml", "m", "dl", "el", "lit", "o", "nl", "sl", "la", "ls", "f", "b", "t", "hl", "lis", "rl", "lo", "fl", "lp", "li", "v", "list", "al", "lv", "s", "lr", "ol", "q", "pl", "ll", "le", "j"], "_": ["x", "ex", "ct", "__", "ate", "ix", "val", "ind", "of", "ow", "pt", "non", "an", "int", "all", "un", "new", "j", "ac"], "already": ["alnecessary", "elready", " alcondition", "allyet", "imazy", "halready", "elazy", "imready", " alnecessary", "Alnecessary", "alviously", "halcondition", "elnecessary", "allready", "Already", "halyet", " alavailable", "alazy", "allcondition", "elavailable", " alyet", "alavailable", "Alavailable", "Alviously", " alazy", " alviously", "alyet", "elyet", "elviously", "imyet", "alcondition"], "next": ["ec", "nr", "net", "max", "ter", "to", "nt", "prev", "p", "name", "ne", "code", "this", "Next", "used", "length", "current", "z", "set", "section", "page", "min", "sec", "step", "nl", "success", "second", "be", "ner", "result", "fr", "sen", "close", "lo", "front", "non", "li", "sc", "key", "v", "nil", "int", "nc", "future", "adj", "normal", "now", "none", "end", "first", "gen", "new", "see", "size", "aa", "div", "even", "ng", "j", "index", "link", "big", "last", "target", "start"], "c": ["lc", "con", "ce", "ci", "gc", "d", "p", "cd", "g", "ct", "rc", "r", "m", "ic", "o", "cur", "f", "b", "bc", "t", "count", "cum", "uc", "sc", "v", "e", "nc", "cp", "ch", "cc", "co", "cu", "cb", "u", "cs", "k", "j", "cm", "cr", "C", "ac"], "i": ["mi", "xi", "x", "ci", "p", " j", "ai", "I", "iter", "m", "z", "bi", "ic", "ix", "o", "ip", "ind", "f", "b", "si", "li", "ii", "e", "ti", "im", "it", "q", "pi", "u", "id", "k", "j", "y", "ij"], "a": ["ia", "sta", "ae", "ab", "aj", "p", "va", "ai", "ma", "m", "o", "ea", "la", "f", "b", "alpha", "art", "apa", "an", "A", "at", "sa", "app", "au", "oa", "aa", "am", "ar", "ka", "j", "iat", "area", "ca", "ac"]}}
{"code": "s = input()\\nK = int(input())\\n\\nans = ''\\nfor i, c in enumerate(s):\\n    dif = ord('z') - ord(c) + 1\\n    dif %= 26\\n    if i == len(s) - 1:\\n        K %= 26\\n        if ord(c) + K > ord('z'):\\n            K -= 26\\n        ans += chr(ord(c) + K)\\n    elif dif <= K:\\n        ans += 'a'\\n        K -= dif\\n    else:\\n        ans += c\\nprint(ans)\\n", "target": "171", "substitutes": {"s": ["a", "n", "sb", "x", "str", "ats", "js", "p", "g", "r", "w", "ts", "z", "m", "ns", "ies", "rs", "tests", "ins", "ms", "ers", "ls", "f", "b", "abs", "t", "S", "ss", "parts", "its", "tes", "bits", "strings", "e", "gs", "ws", "aps", "sv", "sts", "cs", "y", "os", "qs", "ds", "ps"], "K": ["Ak", "M", "N", "T", "Key", "KR", "MK", "AK", "Max", "KEY", "X", "R", "I", "L", "KK", "ANK", "Kind", "DK", "Ko", "Length", "H", "W", "FK", "V", "KS", "KC", "PK", "Sk", "NK", "S", "Break", "B", "J", "Q", "SK", "G", "P", "Ka", "A", "E", "Mask", "HK", "Han", "VK", "D", "Keep", "Y", "OK", "UK", "k", "F", "AN", "KI", "Z", "KA", "C"], "ans": ["ars", "unes", "ANS", "ants", "ats", "ians", "names", "eds", " means", "aus", "ros", "aned", " Ans", "ts", "ates", "ns", "vals", "ann", "rans", "rs", "anas", "ks", "offs", "ins", "ras", "ons", "angs", "amps", "ls", "ents", "ids", "ens", "uns", "ados", "an", "posts", "anks", "iann", "aces", "anes", "nan", "nas", "ams", "aos", "ands", "vs", "aints", "ads", "cs", "arts", "os", "es", "AN", "ds"], "i": ["a", "mi", "ki", "n", " I", "x", "ci", "gi", "p", " j", "di", "ai", "I", "z", "bi", "ix", "ind", "f", "b", "si", "li", "ii", "v", "ti", "it", "zi", "ini", "l", "pi", "ati", "phi", "k", "index", "j", "y", "ik"], "c": ["ec", "a", "ce", "lc", "con", "n", "x", "ci", "gc", "d", "p", "cont", "cd", "g", "xc", "ct", "rc", "arc", "r", "tc", "z", "m", "fc", "cor", "ic", "o", "col", "cur", "f", "b", "bc", "t", "mc", "anc", "sc", "v", "e", "cin", "cos", "cp", "ch", "cc", "com", "co", "\u00e7", "cu", "cb", "l", "cs", "y", "cm", "cr", "cf", "ca", "C", "ac"], "dif": [" diam", " difer", "draife", "sdiff", "Diam", "Diff", "sdif", "diff", "diiff", "Dife", "draiff", "fdiff", "madifer", " dife", "dife", "dIF", " dIF", "Delta", "dig", "diam", " delta", "dielta", "Dif", "madife", "diif", "sdifer", "difer", " dig", "delta", "draif", "fdig", "fdif", "fdIF", "DIF", "Dig", " diff", "madiff", "madif", "diiam", "draIF", "sdife"]}}
{"code": "import sys\\n\\n\\nstdin = sys.stdin\\ndef ns(): return stdin.readline().rstrip()\\ndef ni(): return int(stdin.readline().rstrip())\\ndef nm(): return map(int, stdin.readline().split())\\ndef nl(): return list(map(int, stdin.readline().split()))\\n\\n\\ndef main():\\n    a, b = nm()\\n    c = max(a, b)\\n    d = max(c - 1, min(a, b))\\n    print(c + d)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "233", "substitutes": {"stdin": [" STDout", "randdin", "sentIN", "sysin", "stdsin", " stdline", "stin", "STDins", "frontrin", "stdout", "sentins", "sentline", "frontout", "consoleout", "frontio", "stdins", "STDin", "standardin", "consolein", "standardout", "astout", "stdrin", "stdline", "randin", " stdisin", " STDin", "astdin", "STDout", "astin", "stddin", "sentin", " stdio", "stdio", "stdisin", "randout", "astisin", "stIN", "STDsin", " stdsin", "standardio", " stdrin", "sentout", "consoleins", "sysline", " stdins", "sysins", " stdout", "consoleline", "randisin", " stdIN", " STDins", "stdIN", " STDsin", " stddin", "frontin", "standardrin", "sysout", "stout"], "a": ["n", "ia", "sta", "ae", "ab", "era", "aj", "p", "ai", "ak", "r", "ma", "ami", "el", "eas", "ga", "ea", "la", "aaa", "t", "alpha", "apa", "na", "an", "e", "A", "al", "at", "sa", "ao", "aka", "app", "oa", "au", "aa", "l", "am", "ba", "ca", "ac"], "b": ["bis", "body", "n", "sb", "bf", "ab", "db", "ib", "r", "bg", "z", "bi", "fb", "rb", "o", "mb", "be", "bh", "br", "f", "bc", "t", "nb", "B", "bb", "v", "e", "erb", "eb", "cb", "l", "j", "y", "big", "bs", "ba"], "c": ["ec", "ce", "lc", "n", "con", "max", "ci", "p", "cd", "cn", "g", "ct", "rc", "r", "m", "f", "bc", "mc", "dc", "cons", "uc", "e", "v", "nc", "cos", "crit", "cp", "cc", "com", "co", "abc", "cu", "cb", "l", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["fd", "n", "ld", "db", "cd", "di", "td", "gd", "dh", "r", "w", "m", "z", "od", "dec", "dt", "df", "dy", "f", "da", "dates", "dr", "pd", "de", "ad", "red", "des", "dx", "D", "div", "l", "dd", "du", "sd", "dra", "md", "ds", "nd"]}}
{"code": "N,M = map(int, input().split())\\nSs = list(map(int, input().split()))\\nTs = list(map(int, input().split()))\\nmod = 10**9 + 7\\n\\nx = 2160\\ndp = [[0]*x for i in range(x)]\\nsum2d = [[0]*x for i in range(x)]\\nfor i in range(N):\\n    for j in range(M):\\n        if Ss[i] == Ts[j]:\\n            dp[i+1][j+1] = sum2d[i][j] + 1\\n        sum2d[i+1][j+1] = (dp[i+1][j+1]+sum2d[i][j+1]+sum2d[i+1][j]-sum2d[i][j])%mod\\nprint((sum2d[N][M]+1)%mod)\\n", "target": "505", "substitutes": {"N": ["SN", "CNN", "n", "NS", "T", "NC", "GN", "NI", "Ns", "X", "R", "I", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "V", "No", "Z", "S", "B", "J", "ND", "P", "Num", "D", "Y", "MN", "Ni", "K", "F", "AN", "TN", "C"], "M": ["T", "CM", "R", "I", "Mod", "L", "JM", "NM", "X", "MX", "m", "Mi", "H", "MM", "O", "V", "MC", "C", "IM", "S", "MAN", "B", "J", "G", "P", "E", "MS", "D", "DM", "TM", "Y", "MN", "MI", "MT", "U", "K", "F", "Z", "MR"], "Ss": ["BSns", "BSs", " Sg", "SS", "Ces", "BSes", "CS", "Cs", " Sp", "sg", " SS", "Cg", "sp", "ss", "Cp", "sS", "Sg", "Cns", " Sns", "Ses", "Sns", "BSS", "Sp", " Ses"], "Ts": ["T", "We", "ats", "His", "Ws", "Els", "Parents", "Types", "Ns", "Bs", "Its", "Days", "Tokens", "TPS", "ts", "TS", "Gs", "Sources", "Cs", "Tools", "Args", "Vs", "Ms", "Times", "GS", "Ins", "Tu", "S", "Tags", "Des", "Js", "Os", "Ds", "Notes", "Ps", "Salt", "Lens", "Apps", "Tips"], "mod": ["n", "max", "ex", "perm", "MOD", "modified", "mods", "d", "p", " Mod", "sign", "component", "day", "ct", "Mod", "fun", "r", "scale", "m", "z", "set", "od", "module", "round", "prime", "min", "step", "ix", "log", "num", "cond", "form", "dig", "bit", "add", "check", "odd", "debug", "qual", "im", "com", "base", "div", "mag", "pi", "dd", "lex", "month", "cm", "comp", "pro", "sum"], "x": ["wx", "n", "xi", "ex", "d", "p", "ux", "xc", "ct", "X", "xa", "rx", "w", "c", "ox", "m", "z", " X", "xt", "ix", "tx", "ax", "num", "t", " dx", "v", "int", "fx", "width", "xy", "xs", "mx", "dx", "xx", "lex", "y", "px", "index", "xp", "xf"], "dp": ["pkg", "dos", "pm", "dm", "d", "p", "db", "cd", "vp", "jp", "td", "dh", "dl", "pb", "gp", "wd", "tp", "dt", "df", "dc", "dep", "hp", "DP", "wp", "lp", "pd", "dr", "xy", "deb", "cp", "bps", "dq", "dd", "dj", "np", "px", "dict", "ds", "ps", "pp"], "i": ["\u00ed", "mi", "ki", "n", "xi", "ia", "ie", "ci", "gi", "ir", "cli", "p", "di", "g", "ai", "I", "this", "iter", "m", "z", "ig", "bi", "ami", "info", "iti", "ic", "o", "ix", "ip", "iri", "h", "f", "ri", "io", "si", "li", "ii", "ji", "ei", "v", "int", "ti", "e", "iy", "at", "im", "it", "ini", "zi", "ui", "\u0438", "phi", "pi", "il", "u", "id", "y", "ij", "ik", "iu", "hi"], "sum2d": ["Sum4p", "sum1D", "sum252D", "sum4D", "Sum2g", "Sum2d", "sum5d", "sum36D", "sum3b", "sum252p", "sum3ds", " sum3dd", " sum2f", "sum3p", " sum3D", "Sum2p", " sum2ds", "sum2f", "sum4d", "sum1d", "sum42d", "sum4nd", "sum3n", "Sum2dd", " sum2D", "sum1g", "sum4f", " sum4p", "sum42n", "sum3D", "sum2p", "sum3g", " sum3p", " sum3d", "sum4p", "sum02p", "Sum4bd", "Sum2nd", "sum3f", "sum42p", "Sum3dd", " sum2dd", "Sum3b", "Sum2b", "sum2g", "sum5b", "sum4ds", "Sum2D", "sum5p", "Sum2n", " sum2p", "Sum4d", "sum4bd", " sum4f", "sum2nd", " sum4ds", "Sum3g", "sum36dd", "sum36d", "sum12d", "sum1p", "sum02ds", "sum252dd", "Sum2bd", "sum02D", "sum02d", "sum12ds", "sum2dd", "sum12f", "sum3dd", "sum1nd", "sum36p", "sum1b", "sum5g", "sum3d", "sum4dd", "sum4n", "sum2D", "Sum3p", "sum3bd", "sum252d", "sum1dd", "Sum3D", "Sum4n", "sum2b", "sum2n", "Sum3d", "sum12p", "sum2ds", "sum42bd", " sum3ds", " sum4d", "Sum4nd", "sum2bd", "Sum4D"], "j": ["next", "json", "n", "uj", "ja", "ie", "ijk", "str", "err", "aj", "js", "p", "ret", "g", "jp", "jc", "z", "m", "jj", "el", "note", "ix", "o", "right", "col", "h", "pr", "ind", "jl", "dt", "f", "b", "num", "je", "jac", "t", "fr", "br", "rel", "sp", "pt", "J", "bj", "key", "ji", "v", "kj", "jas", "e", "obj", "it", "tr", "jump", "other", "q", "dj", "id", "y", "k", "jit", "ij", "bs"]}}
{"code": "import bisect\\nn = int(input())\\nA = tuple(map(int,input().split()))\\nq = int(input())\\nQ = tuple(map(int, input().split()))\\ndp = [0]*(2**n)\\n\\nfor i in range(n):\\n    for j in range(1<<i):\\n        dp[j+(1<<i)] = dp[j] + A[i]\\ndp.sort()\\n\\nfor n in Q:\\n    i = bisect.bisect(dp, n)\\n    print(\"yes\" if i>0 and n==dp[i-1] else \"no\")", "target": "279", "substitutes": {"n": ["a", "N", "x", "nt", "ni", "wn", "ln", "d", "p", "on", "en", "name", "cn", "g", "r", "sn", "c", "w", "m", "hn", "ns", "z", "o", "nl", "h", "b", "num", "fn", "t", "count", "len", "nb", "no", "nor", "mn", "na", "v", "yn", "an", "nc", "tn", "nm", "nan", "inn", "nu", "size", "nw", "nn", "l", "np", "u", "ng", "k", "pn"], "A": ["a", "N", "Ax", "An", "IA", "Ar", "Alpha", "AH", "AU", "AT", "X", "Av", "NA", "Ca", "AB", "App", "AE", "Args", "H", "AA", "As", "Att", "V", "AR", "C", "S", "alpha", "B", "P", "CA", "At", "JA", "D", "au", "AM", "Ac", "AC", "AN", "AP"], "q": ["x", "d", "p", "g", "qu", "ai", "r", "w", "c", "m", "z", "qi", "query", "h", "t", "v", "e", "qq", "it", "ch", "dq", "u", "k", "y", "qs"], "Q": ["M", "N", "T", "MQ", "X", "R", "I", "L", "W", "Query", "O", "V", "QB", "UE", "S", "B", "J", "G", "P", "qq", "E", "D", "dq", "Y", "Qu", "DF", "IQ", "U", "K", "F", "Z", "C"], "dp": ["pkg", "dro", "imp", "dm", "d", "p", "db", "cd", "mp", "vp", "dial", "jp", "td", "dh", "dl", "fp", "pb", "dk", "gp", "wd", "tp", "ip", "pa", "dt", "df", "dc", "dep", "pt", "da", "DP", "wp", "dr", "pd", "lp", "P", "ap", "deb", "cp", "csv", "bps", "dq", "pipe", "dd", "dj", "du", "np", "pp", "ds", "ps", "dict", "adr"], "i": ["mi", "ki", "xi", "x", "ia", "ni", "me", "ci", "gi", "p", "g", "di", "ai", "I", "iter", "z", "bi", "info", "ic", "ix", "ip", "iri", "ind", "ri", "io", "si", "ii", "li", "ji", "v", "e", "int", "ti", "im", "it", "zi", "ui", "ini", "l", "pi", "phi", "u", "id", "y", "k", "index", "ik", "ij", "iu"], "j": ["x", "uj", "ja", "js", "aj", "p", "d", "jp", "job", "oj", "jc", "z", "m", "jj", "ju", "o", "jl", "f", "b", "jac", "fr", "si", "J", "bj", "key", "ji", "kj", "v", "li", "obj", "it", "jump", "l", "dj", "y", "k", "ij"]}}
{"code": "N = int(input())\\nS = list(map(int, input()))\\nans = 0\\nfirst = [0] * 10\\na = 0\\nfor i in range(N):\\n  if first[S[i]] == 0:\\n    first[S[i]] = 1\\n    a += 1\\n    second = [0] * 10\\n    b = 0\\n    for j in range(i+1, N):\\n      if second[S[j]] == 0:\\n        second[S[j]] = 1\\n        b += 1\\n        third = [0] * 10\\n        c = 0\\n        for k in range(j+1, N):\\n          if third[S[k]] == 0:\\n            third[S[k]] = 1\\n            ans += 1\\n            c += 1\\n            if c == 10:\\n              break\\n        if b == 10:\\n          break\\n    if a == 10:\\n      break\\nprint(ans)", "target": "756", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "Na", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "NP", "NR", "NT", "H", "V", "TN", "No", "NO", "NOTE", "B", "J", "G", "P", "Num", "E", "D", "NB", "Size", "Len", "Ni", "K", "F", "AN", "Z", "Note", "C"], "S": ["Other", "M", "Source", "NS", "T", "List", "ITS", "SEC", "SF", "services", "SH", "ES", "SD", "BS", "SS", "HS", "SL", "SB", "R", "SER", "I", "L", "X", "PS", "Si", "JS", "RS", "SO", "VS", "SI", "CS", "POS", "TS", "SAN", "Set", "H", "GS", "V", "O", "NOTE", "IS", "Sample", "INS", "States", "B", "J", "SK", "P", "SE", "A", "US", "s", "Is", "SP", "ST", "D", "SU", "DS", "SA", "SR", "F", "LS", "String", "Z", "C"], "ans": ["aut", "n", "x", "ANS", "ae", "ants", "ats", "ab", "ians", "ints", "An", "names", "outs", "ai", "xa", "aus", "ros", "us", "aned", "ns", "ann", "ks", "anas", "offs", "ins", "ons", "ms", "amps", "ls", "ents", "ens", "ations", "cons", "bb", "comments", "an", "na", "anks", "iann", "anes", "sa", "s", "st", "au", "nas", "cases", "ads", "arts", "cs", "os", "es", "AN", "ds", "bs", "ca"], "first": ["top", "next", "master", "before", "prev", "local", "major", "head", "short", "zero", "pre", "minute", "full", "only", "min", "success", "face", "back", "part", "initial", "lower", "front", "must", "int", "final", " FIRST", "st", "primary", "public", "First", "title", "one", "then", "user", "index", "same", "basic", "single", "last", "start"], "a": ["n", "ia", "ae", "ab", "aff", "ta", "d", "aj", "p", "g", "ai", "xa", "r", "m", "ga", "o", "ea", "admin", "aaa", "f", "t", "an", "e", "A", "at", "af", "sa", "ao", "s", "au", "oa", "aa", "l", "am", "ar", "ba", "ca", "ac"], "i": ["mi", "ki", "xi", "x", "ia", "ie", "ci", "gi", "di", "this", "ai", "iter", "I", "bi", "ami", "info", "iti", "ic", "ix", "ip", "ind", "ri", "io", "si", "ii", "li", "ji", "ori", "int", "ti", "im", "it", "ini", "zi", "ui", "q", "phi", "pi", "id", "y", "index", "ij", "iu", "hi"], "second": ["next", "bis", "secondary", "scroll", "ter", "seconds", "Second", "foreign", "server", "current", "course", " Second", "south", "section", "sect", "sequent", "sec", "two", "double", "billion", "secret", "lower", "front", "fourth", "forth", "nd", "small", "final", "future", "another", "st", "now", "division", "below", "other", "video", "father", "service", "se", "fifth", "last"], "b": ["bis", "n", "sb", "bf", "ab", "d", "p", "db", "beta", "g", "ib", "r", "z", "bd", "bi", "pb", "fb", "rb", "by", "o", "h", "be", "f", "br", "bc", "t", "nb", "bb", "v", "e", "eb", "cb", "l", "u", "y", "bs", "ba"], "j": ["next", "json", "n", "jack", "uj", "ja", "str", "err", "js", "aj", "g", "jp", "job", "jc", "oj", "z", "current", "bot", "jj", "zh", "old", "note", "ju", "bo", "h", "pr", "jl", "br", "je", "sp", "fr", "jac", "pt", "J", "bj", "ji", "v", "kj", "jas", "obj", "it", "jump", "jo", "other", "q", "dj", "y", "ij", "jam"], "third": ["iii", "ary", "quarter", "th", "critical", "Third", "instance", "through", "thirds", "td", "last", "ust", "deep", "mother", "kw", "right", "ths", "ctr", "share", "private", "fourth", "also", "Three", "nd", "rights", "odd", "another", "st", "tr", "primary", "division", "direct", "adder", "central", "then", "three", "frog", " Third", "dd", "the", "entry", "fifth", "ard", "back", "hart", "rd"], "c": ["ec", "ce", "lc", "n", "ci", "d", "p", "unc", "cd", "g", "ct", "r", "tc", "z", "m", "sec", "ic", "o", "h", "f", "bc", "t", "dc", "v", "e", "ad", "cin", "cc", "cb", "l", "u", "cs", "cr", "cf", "ca", "C", "ac"], "k": ["ck", "km", "ki", "ek", "uk", "th", "kr", "x", "kh", "kl", "ijk", "kin", "kar", "ak", "ke", "kid", "m", "z", "ks", "kw", "ko", "tk", "kok", "gh", "key", "kj", "ok", "ikk", "ku", "kat", "wk", "kt", "q", "kk", "sk", "ka", "ik", "er", "kg", "K", "mk", "unk"]}}
{"code": "a,b=map(int,input().split())\\nans=0\\nif a>=13:\\n  ans=b\\nelif 6<=a and a<=12:\\n  ans=b//2\\nprint(ans)", "target": "799", "substitutes": {"a": ["n", "x", "ia", "sta", "ae", "ac", "ab", "ta", "d", "p", "ach", "ai", "ak", "i", "r", "c", "ma", "m", "z", "ga", "o", "ea", "la", "aaa", "f", "t", "alpha", "da", "apa", "an", "e", "A", "al", "at", "sa", "s", "af", "app", "oa", "au", "aa", "am", "ar", "area", "ba", "ca", "ao"], "b": ["n", "sb", "x", "bf", "ab", "d", "p", "g", "ib", "i", "r", "c", "m", "z", "bi", "fb", "rb", "o", "h", "be", "f", "bc", "t", "nb", "B", "bb", "v", "e", "s", "bl", "cb", "aa", "l", "u", "y", "bs", "ba"], "ans": ["ANS", "ants", "ats", "names", " means", "eds", "outs", "ows", "irms", "aus", "asks", "ros", "lets", "ns", "ann", "rans", "rs", "eas", "ks", "anas", "offs", "ins", "ras", "vers", "ons", "ms", "amps", "angs", "ls", "rets", "ents", "ens", "cas", "cons", "uns", "ces", "tes", "an", "posts", "gs", "jas", "fts", "aps", "anks", "iann", "des", "terms", "nas", "ams", "aos", "ands", "cases", "vs", "ads", "cs", "arts", "os", "asms", "lan", "olds"]}}
{"code": "s = input()\\n\\nstack = [s[0]]\\nans = 0\\nfor i in range(1, len(s)):\\n    if len(stack) == 0:\\n        stack.append(s[i])\\n        continue\\n    if s[i] == \"0\":\\n        if stack[-1] == \"1\":\\n            del stack[-1]\\n            ans += 2\\n        else:\\n            stack.append(\"0\")\\n    else:\\n        if stack[-1] == \"0\":\\n            del stack[-1]\\n            ans += 2\\n        else:\\n            stack.append(\"1\")\\n\\nprint(ans)", "target": "40", "substitutes": {"s": ["a", "scl", "n", "sb", "sw", "aws", "ats", "js", "p", "ains", "g", "series", "w", "hs", "c", "ts", "ns", "rs", "ses", "ins", "less", "sl", "h", "ls", "f", "b", "sp", "abs", "t", "S", "ss", "parts", "args", "its", "plays", "bits", "v", "strings", "gs", "sq", "ws", "st", "sv", "xs", "ashes", "ims", "sts", "q", "vs", "cs", "se", "stats", "qs", "ds", "ps", "bs"], "stack": ["top", "ops", "p", "loop", "flat", "store", "batch", "set", "buffer", "ctx", "window", "bo", "cur", "config", "thread", "check", "v", "new", "pl", "roll", "layer", "trace", "history", "conn", "this", "iter", "full", "shape", "mount", "sl", "track", "lay", "pos", "screen", "pop", "switch", "print", "usr", "l", "line", "play", "scope", "stats", "chain", "acks", "load", "queue", "str", "names", "via", "sys", "graph", "pool", "cache", "pres", "req", "stage", "slice", "pack", "ack", "alt", "hold", "struct", "view", "where", "w", "current", "ts", "push", "rs", "func", "level", "t", "stan", "parse", "frames", "list", "ws", "row", "st", "conv", "bl", "proc", "Stack", "upper", "sum"], "ans": ["ars", "ANS", "ants", "ats", "ians", "beans", "names", "eds", "outs", "acs", "helps", "aus", "us", "ts", "ates", "ns", "vals", "ann", "ums", "rs", "rans", "anas", "ks", "offs", "ins", "mas", "ses", "ons", "ms", "amps", "angs", "ls", "anned", "flags", "ents", "ids", "ens", "args", "uns", "an", "posts", "anks", "anes", "aces", "oss", "ays", "terms", "xs", "sv", "aos", "vs", "ads", "ags", "asms", "lan", "stats", "ds", "said"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "c", "batch", "bi", "yi", "ic", "ix", "ip", "ind", "b", "ri", "si", "li", "key", "ji", "v", "ii", "ori", "ti", "im", "it", "zi", "ini", "ui", "q", "l", "pi", "phi", "id", "j", "index", "k", "y", "ij", "iu", "hi"]}}
{"code": "import sys,math,collections,itertools\\ninput = sys.stdin.readline\\n\\nN=int(input())\\np=list(map(int,input().split()))\\npa = []\\ncnt = 0\\nfor i in range(N):\\n    if i+1 == p[i]:\\n        cnt +=1\\n    elif i+1 != p[i] and cnt>0:\\n        pa.append(cnt)\\n        cnt =0\\nif cnt >0:\\n    pa.append(cnt)\\ncnt = 0\\nfor cn in pa:\\n    cnt += cn//2+cn%2\\nprint(cnt)\\n", "target": "77", "substitutes": {"input": ["next", "call", "pattern", "str", "select", "expression", "util", "got", "init", "get", "view", "spec", "eval", "shift", "inc", "raw", "password", "ref", "focus", "read", "format", "enum", "output", "println", "cmd", "act", "config", "fn", "initial", "parse", "feed", "out", "Input", "list", "int", "cin", "each", "interface", "gets", "filter", "exec", "csv", "gen", "print", "new", " Input", "q", "command", "sample", "text", "source", "sum"], "N": ["SN", "CNN", "n", "M", "NS", "T", "NC", "GN", "NI", "Na", "Ns", "I", "NA", "L", "NM", "NN", "NP", "CN", "NR", "NT", "NH", "O", "V", "No", "NO", "S", "PN", "Q", "P", "Num", "Sn", "D", "NB", "Len", "Ni", "TN", "FN", "C"], "p": ["a", "n", "perm", "pm", "mp", "pc", "po", "rep", "vp", "jp", "c", "m", "pe", "pai", "pb", "tp", "pr", "pan", "sp", "t", "pt", "wp", "lp", "pos", "pid", "v", "P", "ap", "cp", "q", "pl", "pi", "np", "bp", "pers", "pn", "pp", "ps", "pg"], "pa": ["a", "Pa", "cro", "ia", "ja", "lia", "ta", "mp", "po", "vp", "ota", "jp", "xa", "ai", "ppo", "ma", "pe", "pai", "pb", "ita", "ga", "PA", "pu", "pan", "ada", "fa", "pas", "da", "wa", "apa", "pha", "lp", "tap", "ap", "qa", "sa", "ha", "opa", "oa", "au", "que", "pi", "ppa", "ara", "pet", "pn", "lan", "pp", "ps", "ba", "ca", "pun"], "cnt": ["conct", "CNT", "cgt", "acct", "csnz", "count", "Cnc", " cNT", "rcct", " crt", "cst", "ncount", "rNT", "conrt", "tcnt", "Cnt", "conount", " cst", " cnd", "lcct", "connz", "rnt", "cNT", "cachent", "xcmn", "ncnz", "tccount", "csnt", "nret", "rcNT", "cret", "rcnt", "conNT", "lcnt", "nNT", "crt", "tcpt", " cct", "tcct", " cnc", "cpt", "ncnt", "ncrt", "Count", " cret", "nct", "connt", " cmn", "acnd", "cachenc", "csount", "account", "rnc", "cnc", "ccount", "tcnc", "lcgt", "nnt", "xcNT", "acnt", " ccount", "acnc", " count", "tcount", " cgt", "tcNT", "cacheNT", "cmn", "nnd", "tcgt", "cnd", "Cpt", "cnz", "cct", "nst", "tcrt", "rcrt", "xcnc", "xcnt", "Cct", "acret", "cachemn", "lcnc", " cpt", "csrt", "rct", "Cst"], "i": ["\u00ed", "mi", "ki", "xi", "x", "ci", "gi", "di", "aci", "I", "ai", "bi", "ami", "qi", "yi", "ic", "ix", "ip", "ind", "multi", "si", "iu", "li", "ii", "ji", "ei", "ori", "ti", "oi", "im", "it", "ini", "zi", "ui", "\u0438", "q", "phi", "pi", "id", "j", "y", "asi", "index", "ij", "aii", "iri"], "cn": ["con", "n", "conn", "ni", "nt", "wn", "gn", "gc", "name", "xc", "dn", "ct", "ai", "sn", "c", "hn", "CN", "ns", "ctx", "tp", "pron", "pan", "username", "fn", "num", "nb", "mn", "non", "ii", "bn", "na", "tn", "nc", "nm", "cp", "nan", "nu", "cb", "nn", "unn", "np", "rn", "pn", "cm", "cf"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\nfrom collections import deque\\n\\nif __name__ == '__main__':\\n    n = int(input())\\n    L = deque()\\n\\n    for _ in range(n):\\n        command = input().split(\" \")\\n        if command[0] == \"insert\":\\n            L.appendleft(command[1])\\n        elif command[0] == \"delete\":\\n            try:\\n                L.remove(command[1])\\n            except:\\n                pass\\n        elif command[0] == \"deleteFirst\":\\n            L.popleft()\\n        elif command[0] == \"deleteLast\":\\n            L.pop()\\n\\n    print(\" \".join(L))\\n\\n", "target": "232", "substitutes": {}}
{"code": "# input\\nN = int(input())\\nK = int(input())\\n\\n# defnition\\nN_bin = str(N)\\ndigit_len_N = len(N_bin)\\nDP = [[[0]*(K+2) for _ in range(2)] for _ in range(digit_len_N+1)]\\n# DP[i][j][k]\u306f\u3001\u4e0a\u4f4di\u6841\u76ee\u307e\u3067\u3067\u3001(j==0 ?N\u3068\u540c\u3058\u306b\u306a\u308b\u53ef\u80fd\u6027\u3042\u308a:\u5fc5\u305aN\u3088\u308a\u5c0f\u3055\u304f\u306a\u308b)\u306e\u6642\u306b\u30010\u4ee5\u5916\u306e\u6570\u304ck\u3053\u51fa\u73fe\u3059\u308b\u3001\u6570\u5b57\u306e\u6570\\n\\n\\n# initialize\\nDP[0][0][0] = 1\\n\\n# solve with \u3051\u305fDP\\nfor digit in range(digit_len_N):\\n    max_digit = int(N_bin[digit])\\n    for smaller in range(2):  # smaller=0?N\u3068\u540c\u3058\u306b\u306a\u308b\u53ef\u80fd\u6027\u3042\u308a:N\u3088\u308a\u5c0f\u3055\u3044\u306e\u78ba\u5b9a\\n        for k in range(K+1):\\n            cand_digits = max_digit+1 if smaller == 0 else 10  # \u5c0f\u3055\u3044\u78ba\u5b9a\u306a\u30890~9\u306e\u5168\u90e8\u304c\u5019\u88dc\\n            for next in range(cand_digits):\\n                if next == max_digit and smaller == 0:  # N\u3068\u540c\u3058\u306b\u306a\u308b\u53ef\u80fd\u6027\u3092\u6b8b\u3057\u3064\u3064\\n                    if next == 0:  # 0\u306e\u3068\u304d\u306f,k\u306e\u5024\u304c\u5897\u3048\u306a\u3044\u306e\u3067\u7279\u5225\u6271\u3044\\n                        DP[digit+1][0][k] += DP[digit][0][k]\\n                    else:\\n                        DP[digit+1][0][k+1] += DP[digit][0][k]\\n                else:  # \u3053\u3053\u3067\u3001N\u3088\u308a\u5fc5\u305a\u5c0f\u3055\u3044\u9053\u306b\u884c\u304f\\n                    if next == 0:  # 0\u306e\u3068\u304d\u306f,k\u306e\u5024\u304c\u5897\u3048\u306a\u3044\u306e\u3067\u7279\u5225\u6271\u3044\\n                        DP[digit+1][1][k] += DP[digit][smaller][k]\\n                    else:\\n                        DP[digit+1][1][k+1] += DP[digit][smaller][k]\\nprint(DP[-1][0][K]+DP[-1][1][K])\\n", "target": "470", "substitutes": {}}
{"code": "import sys\\n\\n\\nfor line in sys.stdin:\\n    nums = list(map(int, line.split()))\\n    res = \"Yes\" if nums[0] < nums[1] < nums[2] else \"No\"\\n    print(res)\\n\\n", "target": "554", "substitutes": {"line": [" LIN", "ine", " data", "lf", "str", "ln", "name", "file", " outline", "code", "iter", "inline", "Line", "lines", " string", "cell", " lines", "eline", " example", " row", "nl", "liner", "word", "eno", " slide", "block", "lo", "pos", " lin", " inline", " Line", "string", "row", "LINE", " LINE", "stroke", "l", " item", "le", "lin", "entry", " sample", " linen", "field"], "nums": ["nuoms", " nump", "Nums", "nicks", "numamps", " nicks", "numbers", " namps", "nsups", "noms", "nsums", "nump", " num", "Nicks", " noms", "nups", "tum", " numbers", "tums", "tems", "tumbers", "Nems", " nups", "num", "naves", "Numbers", "nuums", "nuicks", "nems", "namps", "Num", "Namps", "numoms", "Noms", "nuum", "numump", "nsump", " naves", "numups", "Naves", "numaves", "numums", "nsamps", " nems"], "res": ["nt", "resh", "rom", "ret", "reset", "rep", "med", "re", "Res", "r", "repl", "rem", "rs", "RES", "val", "result", "act", "cmd", "rel", "pas", "ress", "rek", "results", "resp", "out", "reed", "crit", "des", "gr", "rez", "sol", "pres", "req", "yes", "rand", "reg", "pers", "rip", "bs", "respons"]}}
{"code": "N = int(input())\\nX_list = list(map(int, input().split()))\\nX_list_min = sorted(X_list)\\n\\nans = 10**8+1\\n\\nfor i in range(X_list_min[0], X_list_min[-1]+1):\\n    ans_temp = 0\\n    for j in range(N):\\n        ans_temp += (X_list_min[j] - i)**2\\n    ans = min(ans, ans_temp)\\nprint(ans)", "target": "46", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "GN", "NI", "Ns", "X", "I", "R", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "H", "V", "TN", "No", "NO", "PN", "J", "Num", "P", "Sn", "D", "NB", "Y", "MN", "Len", "Ni", "K", "Z", "C"], "X_list": ["X_stream", "DX_stream", "DX_list", "X_List", "Z_set", "Z_List", "X_temp", "X2list", "X_info", "X2List", "X7set", "X_set", "DX_tree", "X___stream", "X___tree", "X___list", "Z_list", "X_tree", "X7List", "X7list", "DX_temp", "X2info", "X7info", "X2set", "X___temp", "Z_info"], "X_list_min": ["X_list_key", "X_list___max", "X_list_mod", "X_list_sol", "X_List_key", "X_list___sol", "X_list___min", "X_List_min", "X_list_max", "X_list_mon", "X_list_lt", "X_list_items", "X_list_mins", "X_List_mins", "X_List_items", "X_list___mod"], "ans": ["ars", "n", "NS", "ANS", "nt", "ants", "ats", "ians", "beans", "names", "eds", "outs", "acs", "books", "aus", "asks", "nets", "aned", "mos", "ns", "ann", "rans", "man", "eas", "anas", "offs", "ras", "ANN", "ons", "ms", "amps", "angs", "ls", "ents", "ens", "news", "cas", "an", "posts", "iann", "Ann", "aps", "oss", "anes", "s", "nan", "xs", "uploads", "nas", "aos", "rates", "ads", "arts", "asms", "os", "lan", "AN", "views", "said"], "i": ["mi", "ki", "xi", "x", "ia", "ci", "gi", "ir", "di", "ai", "I", "m", "bi", "ami", "yi", "qi", "iti", "ic", "ix", "ip", "ri", "si", "iu", "li", "ii", "ji", "v", "ei", "ti", "im", "ini", "zi", "\u0438", "q", "pi", "id", "y", "iat", "ij", "ik", "iri"], "ans_temp": ["anks_total", "ans12max", "ans_tem", " ansjcurrent", "anstfac", "results_mp", "results_temp", "ans12tab", "ans12current", "ans_Temp", "resultsttotal", "ans_fac", "ans_max", " ansjtab", "anks_Temp", "ans12temp", "resultsttemp", "ans7total", "ans_mp", "results_fac", "results_total", "resultstmp", "ans7temp", "ansjcurrent", "ansjtab", "ans7fac", " ans_max", " ansjmax", "ans_current", "ans_total", "anks_temp", "ansttemp", "resultstfac", "ansjtemp", "anks_tem", " ans_tab", "anstmp", " ans_current", "ans_tab", " ansjtemp", "ans7mp", "ansttotal", "ansjmax"], "j": ["next", "json", "n", "uj", "ja", "aj", "g", "jp", "job", "jc", "oj", "z", "m", "jj", "h", "jl", "f", "b", "jac", "br", "J", "ion", "bj", "ji", "kj", "v", "obj", "jump", "q", "dj", "y", "k", "ij"]}}
{"code": "import bisect\\nimport copy\\nimport heapq\\nimport math\\nimport sys\\nfrom collections import *\\nfrom itertools import accumulate, combinations, permutations, product\\n# from math import gcd\\ndef input():\\n    return sys.stdin.readline()[:-1]\\ndef ruiseki(lst):\\n    return [0]+list(accumulate(lst))\\nmod=pow(10,9)+7\\nal=[chr(ord('a') + i) for i in range(26)]\\ndirection=[[1,0],[0,1],[-1,0],[0,-1]]\\n\\nn,m,p=map(int,input().split())\\nabc=[list(map(int,input().split())) for i in range(m)]\\n\\n#True : \u8ca0\u306e\u7d4c\u8def\u304c\u5b58\u5728\u3059\u308b\\ndef find_negative_loop1(n,w,es):\\n    #\u8ca0\u306e\u7d4c\u8def\u306e\u691c\u51fa\\n    #n:\u9802\u70b9\u6570, w:\u8fba\u306e\u6570, es[i]: [\u8fba\u306e\u59cb\u70b9,\u8fba\u306e\u7d42\u70b9,\u8fba\u306e\u30b3\u30b9\u30c8]\\n    d = [float(\"inf\")] * n\\n    d[0] = 0\\n    infdic=defaultdict(int)\\n    #\u3053\u306e\u59cb\u70b9\u306f\u3069\u3053\u3067\u3082\u3088\u3044\\n    for i in range(n):\\n        for j in range(w):\\n            e = es[j]\\n            if d[e[1]] > d[e[0]] + e[2]:\\n                d[e[1]] = d[e[0]] + e[2]\\n                if i == n-1:\\n                    infdic[e[0]]=1\\n    return infdic\\n\\ndef find_negative_loop2(n,w,es,infd):\\n    #\u8ca0\u306e\u7d4c\u8def\u306e\u691c\u51fa\\n    #n:\u9802\u70b9\u6570, w:\u8fba\u306e\u6570, es[i]: [\u8fba\u306e\u59cb\u70b9,\u8fba\u306e\u7d42\u70b9,\u8fba\u306e\u30b3\u30b9\u30c8]\\n    d = [float(\"inf\")] * n\\n    d[0] = 0\\n    for i in infd.keys():\\n        d[i]=-float('inf')\\n    #\u3053\u306e\u59cb\u70b9\u306f\u3069\u3053\u3067\u3082\u3088\u3044\\n    for i in range(n):\\n        for j in range(w):\\n            e = es[j]\\n            if d[e[1]] > d[e[0]] + e[2]:\\n                d[e[1]] = d[e[0]] + e[2]\\n                # if i == n-1:\\n                #     return True\\n    return d\\n\\n\\n#############################\\nw = m\\nes = [[] for i in range(w)] #es[i]: [\u8fba\u306e\u59cb\u70b9,\u8fba\u306e\u7d42\u70b9,\u8fba\u306e\u30b3\u30b9\u30c8]\\nfor i in range(w):\\n    x,y,z = abc[i]\\n    es[i] = [x-1,y-1,p-z]\\n# w = w*2\\n# print(es)\\n\\ntmp=find_negative_loop1(n,w,es)\\n# print(tmp)\\ntmp2=find_negative_loop2(n,w,es,tmp)\\n# print(tmp2)\\nif tmp2[-1]==-float('inf'):\\n    print(-1)\\nelse:\\n    print(-min(tmp2[-1],0))", "target": "88", "substitutes": {}}
{"code": "import sys\\nimport math\\ninput=sys.stdin.buffer.readline\\nh,w=map(int,input().split())\\nans=math.ceil(h*w/2)\\nprint(1 if min(h,w)==1 else ans)", "target": "12", "substitutes": {"input": ["str", "select", "context", "insert", "active", "got", "init", "get", "eval", "raw", "down", "focus", "read", "query", "enum", "step", "output", "cur", "PUT", "val", "cmd", "f", "config", "form", "inner", "feed", "conf", "out", "Input", "list", "string", "up", "exec", "it", "csv", "dq", " Input", "q", "command", "reader", "paste", "sequence", "source", "request"], "h": ["history", "ht", "n", "x", "kh", "en", "hz", "html", "hal", "hs", "r", "c", "m", "ih", "zh", "rh", "H", "igh", "bh", "b", "uh", "hl", "hp", "v", "oh", "has", "height", "hw", "ha", "he", "hr", "high", "hd", "ho", "l", "hh", "hi", "hm"], "w": ["wx", "n", "x", "sw", "wn", "d", "wh", "we", "wt", "r", "m", "wb", "wall", "man", "wr", "iw", "rw", "wi", "W", "wd", "kw", "wal", "ew", "b", "wl", "wid", "t", "win", "wa", "wp", "v", "width", "ws", "hw", "nw", "q", "l", "widget", "y"], "ans": ["ANS", "ians", "ats", "ants", "beans", "names", " means", "was", "aus", "ros", "san", "ns", "vals", "ann", "anas", "scan", "ins", "than", "ms", "amps", "mean", "pan", "uns", "results", "can", "an", "na", "jas", "posts", "works", "s", "nan", "ions", "ran", "nas", "ams", "os", "lan"]}}
{"code": "import math\\n\\nr=float(input())\\n\\nprint(math.pi*r**2, 2*math.pi*r)\\n\\n", "target": "758", "substitutes": {"r": ["n", "mr", "x", "sr", "pair", "rr", "d", "p", "g", "R", "rc", "i", "rx", "re", "c", "m", "rs", "rb", "h", "result", "pr", "term", "rar", "f", "b", "fr", "t", "v", "e", "rf", "ru", "rss", "s", "rt", "lr", "q", "l", "u", "real", "attr", "rate", "rd"]}}
{"code": "import sys\\ninput = lambda : sys.stdin.readline().rstrip()\\nsys.setrecursionlimit(max(1000, 10**9))\\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\\n\\n\\ns = input()\\nprev = \"\"\\nans = 0\\nn = len(s)\\ni = 0\\nwhile i<n:\\n    if s[i]==prev:\\n        if i+1<n:\\n            ans += 1\\n            prev = s[i]+s[i+1]\\n        i += 2\\n    else:\\n        prev = s[i]\\n        i += 1\\n        ans += 1\\n#     print(prev)\\nprint(ans)", "target": "179", "substitutes": {"input": ["call", "load", "pattern", "select", "insert", "put", "get", "run", "reset", "method", "connect", "raw", "read", "step", "output", "cmd", "create", "initial", "feed", "add", "check", "pull", "Input", "list", "cin", "update", "clear", "exec", "it", "print", " Input", "q", "command", "edit", "paste", "hit", "op", "join", "source", "request"], "write": ["next", "printf", "flush", "insert", "put", "get", "connect", "w", "scale", "append", "push", "set", "read", "wr", "format", "change", "save", "output", "send", "println", "export", "log", "writing", "close", "writ", "dump", "written", "feed", "out", "add", "pop", "update", "switch", "string", "rite", "print", "data", "echo", "text", "writer"], "s": ["a", "sb", "events", "ys", "ats", "js", "p", "actions", "g", "fs", "w", "hs", "c", "ts", "m", "ns", "rs", "ses", "ins", "less", "sl", "h", "ms", "ls", "abs", "b", "sp", "t", "S", "ss", "parts", "args", "its", "tes", "results", "rings", "bits", "strings", "v", "gs", "sq", "e", "ws", "gets", "ashes", "xs", "sv", "ims", "csv", "sts", "l", "sis", "cs", "os", "changes", "qs", "ds", "ps", "bs", "views"], "prev": ["history", "next", "reverse", "before", "cmp", "perm", "Prev", "p", "mp", "rep", "rev", "nav", "last", "txt", "pre", "current", " Prev", "inv", "ref", "map", "old", "ev", "parent", "h", "ren", "rec", "snap", "buf", "br", "sp", "pri", "rel", "v", "Previous", "adj", "ptr", "msg", "orig", "jump", "first", "desc", "vious", "vs", "tmp", "np", "var", "vec", "j", "op", "temp", "pred"], "ans": ["a", "x", "ANS", "ants", "ats", "ians", "actions", "en", "outs", "ai", "aus", "span", "lines", "ns", "vals", "ies", "ann", "ks", "offs", "ins", "ons", "ms", "amps", "ls", "ents", "ens", "len", "mn", "an", "posts", "iann", "gs", "anks", "anes", "aps", "terms", "xs", "ions", "aos", "vs", "arts", "es", "os", "stats", "errors", "ds", "ps"], "n": ["a", "nr", "N", "nt", "ni", "ln", "p", "en", "cn", "r", "sn", "c", "w", "m", "ns", "o", "nl", "h", "num", "fn", "t", "len", "nb", "mn", "na", "v", "nc", "nm", "nan", "nu", "nn", "l", "np", "j", "y"], "i": ["a", "mi", "ki", "xi", "x", "uri", "me", "ci", "gi", "p", "vi", "di", "ai", "I", "c", "m", "batch", "bi", "qi", "info", "ic", "ix", "o", "ip", "iri", "ind", "f", "t", "multi", "ri", "si", "ii", "li", "ji", "ori", "e", "int", "ti", "ei", "oi", "v", "iy", "it", "im", "ini", "zi", "ui", "\u0438", "q", "l", "pi", "phi", "ati", "u", "j", "index", "y", "ij", "iu", "hi", "init"]}}
{"code": "r = int(input())\\ng = int(input())\\nif r >= g:\\n  print(g- (r-g))\\nelse:\\n  print(g+ (g-r))", "target": "524", "substitutes": {"r": ["a", "nr", "n", "sr", "mr", "x", "rr", "ro", "rg", "ir", "d", "p", "R", "rc", "i", "re", "rx", "w", "c", "m", "z", "rh", "rs", "rb", "o", "h", "vr", "f", "b", "t", "ri", "rl", "dr", "v", "e", "rf", "gr", "tr", "s", "rt", "hr", "q", "l", "ar", "u", "reg", "rd"], "g": ["gg", "n", "ge", "err", "gu", "rg", "gi", "gc", "d", "p", "ret", "game", "i", "gd", "bg", "c", "m", "z", "ig", "og", "ger", "ga", "gt", "gp", "gm", "h", "go", "tg", "f", "b", "t", "gh", "G", "v", "e", "gs", "gy", "yg", "msg", "gr", "gre", "eg", "gen", "group", "erg", "q", "l", "gam", "fg", "u", "reg", "j", "mg", "pg"]}}
{"code": "import math\\na,b,c=map(float,input().split())\\nS=b*math.sin(math.radians(c))*a*1/2\\nx=math.sqrt(a**2 + b**2 -2*a*b*math.cos(math.radians(c)))\\nL=a+b+x\\nh=b*math.sin(math.radians(c))\\nprint(format(S, '.8f'))\\nprint(format(L, '.8f'))\\nprint(format(h, '.8f'))\\n", "target": "221", "substitutes": {"a": ["n", "ia", "ae", "ab", "d", "p", "aj", "ach", "g", "ai", "i", "r", "w", " A", "z", "m", "ma", "ga", "o", "ea", "la", "act", "ax", "f", "t", "alpha", "v", "e", "an", "A", "al", "ap", "at", "sa", "s", "ao", "au", "oa", "ed", "aa", "l", "am", "ar", "u", "y", "ba", "ca", "ac"], "b": ["n", "sb", "bu", "bf", "ab", "d", "p", "db", "g", "ib", "i", "r", "m", "z", "bi", "wb", "fb", "rb", "o", "be", "f", "bc", "gb", "t", "nb", "B", "bb", "v", "e", "s", "cb", "l", "u", "j", "y", "bs", "ba"], "c": ["ce", "lc", "n", "con", "gc", "d", "p", "cont", "cd", "pc", "g", "ct", "rc", "arc", "r", "tc", "m", "z", "fc", "ctx", "cor", "o", "cur", "f", "bc", "t", "mc", "dc", "e", "v", "nc", "cin", "cos", "s", "cp", "cc", "co", "cu", "l", "etc", "cl", "u", "cs", "y", "cm", "cr", "cf", "ca", "C", "ac"], "S": ["SN", "M", "N", "T", "ANS", "SF", "SD", "BS", "SS", "Sl", "SB", "R", "X", "JS", "Sm", "SL", "Si", "Sel", "SI", "CS", "TS", "SM", "H", "As", "Sign", "B", "G", "P", "A", "s", "SP", "St", "SU", "DS", "Y", "SA", "SR", "WS", "LS", "C"], "x": ["wx", "n", "xi", "ex", "p", "ux", "g", "ct", "X", "xa", "i", "rx", "w", "r", "z", "m", "xt", "hex", "o", "ix", "tx", "ax", "f", "t", "v", "fx", "xy", "s", "ch", "xs", "mx", "dx", "q", "l", "xx", "j", "y", "k", "px", "xf"], "L": ["LB", "dL", "M", "NL", "N", "DL", "LIN", "mL", "ln", "HL", "SL", "TL", "LR", "H", "LA", "LU", "LD", "FL", "LT", "B", "ML", "Li", "LI", "RL", "LG", "D", "Lu", "l", "CL", "ll", "LL", "XL", "LS", "LP", "EL"], "h": ["kh", "d", "p", "enh", "hz", "html", "dh", "hs", "ih", "zh", "rh", "help", "hex", "http", "o", "H", "ah", "bh", "hl", "hp", "t", "oh", "height", "ph", "ha", "ch", "he", "high", "hr", "hd", "l", "phi", "ho", "hh", "pi", "k", "hi"]}}
{"code": "n,m = map(int,input().split())\\n\\nans = 0\\n\\nans += m * 1900\\nans += (n-m) * 100\\n\\nprint(ans * 2 ** m)\\n", "target": "308", "substitutes": {"n": ["N", "x", "nt", "d", "p", "en", "ne", "g", "dn", "i", "sn", "r", "c", "ns", "o", "h", "ms", "f", "b", "num", "t", "mn", "na", "v", "an", "nc", "nm", "un", "s", "nn", "l", "q", "np", "ll", "k", "j"], "m": ["tm", "mi", "M", "x", "perm", "dm", "d", "p", "mm", "mp", "g", "i", "r", "c", "mut", "man", "bm", "o", "gm", "h", "ms", "f", "b", "num", "t", "mc", "mn", "v", "an", "om", "sm", "s", "mx", "size", "q", "l", "mem", "k", "j", "y", "cm", "mt"], "ans": ["ars", "ANS", "ants", "ats", "ians", "ints", " means", "eds", "outs", "acs", "missions", "aus", "ros", "lets", "mos", "ates", "ns", "ann", "ums", "rs", "mas", "anas", "leans", "offs", "ins", "rans", "wan", "ons", "ms", "amps", "angs", "ents", "ens", "cas", "ces", "an", "posts", "anks", "iann", "aps", "aces", "anes", "oss", "ays", "s", "xs", "nas", "ams", "aos", "ads", "arts", "es", "anos", "asms", "olds"]}}
{"code": "import sys\\nsys.setrecursionlimit(2147483647)\\nINF=float(\"inf\")\\nMOD=10**9+7\\ninput=lambda :sys.stdin.readline().rstrip()\\nfrom collections import defaultdict\\ndef resolve():\\n    n,m=map(int,input().split())\\n    A=list(map(int,input().split()))\\n    S=[0]*(n+1)\\n    for i in range(n):\\n        S[i+1]=(S[i]+A[i])%m\\n\\n    ans=0\\n    C=defaultdict(int)\\n    for s in S:\\n        ans+=C[s]\\n        C[s]+=1\\n    print(ans)\\nresolve()", "target": "23", "substitutes": {"INF": [" INInf", "inInf", "INEF", "INN", " INEF", "InInf", "InF", "InEF", "InN", "inEF", "inN", "INInf", "inF", " INN"], "MOD": ["MAX", "mod", "LIN", "LOG", "Mod", "POS", "AD", "RM", "MIN", "Ms", "Mods", "MAC", "REG", "EXP", "MD", "RED", "AS", "NUM", "MODE", "END", "MA", "MS", "ADD", "DM", "TM", "DEC", "ONES", "REM"], "input": ["history", "next", "pattern", "str", "select", "expression", "context", "insert", "active", "name", "method", "get", "reset", "init", "shift", "image", "raw", "ref", "read", "query", "prefix", "format", "step", "output", "cmd", "config", "hidden", "url", "out", "pull", "Input", "int", "string", "update", "exec", "it", "gen", "print", "q", "proc", "command", "sample", "rand", "data", "join", "sequence", "text", "source", "request", "sum"], "n": ["a", "N", "x", "nt", "d", "p", "en", "ln", "ne", "cn", "dn", "r", "sn", "c", "ns", "o", "h", "b", "num", "t", "count", "nia", "len", "nb", "mn", "na", "an", "nc", "nu", "size", "nn", "l", "q", "np", "ll", "u", "network", "j"], "m": ["tm", "mi", "M", "max", "perm", "mod", "dm", "d", "p", "mm", "mu", "r", "c", "mut", "mas", "bm", " M", "o", "ms", "mean", "mask", "f", "b", "num", "mis", "t", "mc", "len", "mn", "v", "e", "size", "l", "mun", "k", "y", "cm", "mt", "mode"], "A": ["a", "GA", "M", "N", "T", "All", "An", "Alpha", "AU", "AT", "R", "I", "Av", "L", "AL", "AB", "AE", "Args", "AA", "LA", "As", "V", "AR", "AS", "B", "ICA", "P", "AP", "CA", "At", "JA", "D", "AF", "AM", "Y", "By", "SA", "AC", "Array"], "S": ["Sub", "Save", "M", "N", "NS", "T", "SH", "ES", "Series", "BS", "SS", "SL", "SB", "R", "I", "JS", "L", "RS", "PS", "Si", "SI", "CS", "TS", "Set", "SM", "H", "GS", "V", "IS", "AS", "ASC", "B", "Q", "G", "P", "US", "E", "Is", "SU", "SP", "DS", "Y", "System", "SA", "SR", "LS", "Z"], "i": ["mi", "xi", "x", "uri", "ci", "gi", "di", "I", "z", "batch", "bi", "info", "ic", "ix", "ip", "ind", "f", "b", "ri", "si", "iu", "li", "ii", "ji", "v", "ei", "ori", "ti", "iy", "im", "it", "zi", "ui", "ini", "pi", "id", "j", "index", "y", "ij", "iri"], "ans": [" orphans", "ars", "ANS", "ians", "ants", "ats", " means", "eds", "aus", "ros", " Ans", "aves", "ns", "ums", "rans", "mas", "rs", "ks", "ann", "offs", "ins", "ons", "ms", "amps", "ls", "ids", "ents", "ens", "ots", "cons", "uns", "can", "rors", "an", "posts", " scans", "anes", "aps", "terms", "ands", "oms", "ads", "cs", "os", "AN"], "C": ["M", "N", "CB", "T", "CM", "JC", "Cod", "R", "I", "L", "CU", "c", "CI", "CS", "CN", "Cop", "Cs", "Col", "H", "CV", "O", "V", "CT", "CP", "GC", "CD", "B", "Co", "G", "DC", "P", "CA", "CR", "E", "Cache", "D", "CC", "U", "K"], "s": ["a", "ats", "js", "p", "eds", "fs", "us", "hs", "c", "ts", "z", "ns", "ies", "socket", "rs", "ses", "ins", "ords", "ms", "ls", "f", "ids", "t", "ss", "uns", "its", "v", "e", "gs", "ws", "gets", "xs", "sol", "bes", "sts", "sets", "sis", "cs", "id", "k", "os", "es", "stats", "ds", "ps", "bs"]}}
{"code": "import sys\\nimport math\\nfrom collections import deque\\n\\nsys.setrecursionlimit(1000000)\\nMOD = 10 ** 9 + 7\\ninput = lambda: sys.stdin.readline().strip()\\nNI = lambda: int(input())\\nNMI = lambda: map(int, input().split())\\nNLI = lambda: list(NMI())\\nSI = lambda: input()\\n\\n\\ndef make_grid(h, w, num): return [[int(num)] * w for _ in range(h)]\\n\\n\\ndef main():\\n    N, M = NMI()\\n    A = NLI()\\n\\n    match_dict = {i+1: m for i, m in enumerate([2,5,5,4,5,6,3,7,6])}\\n    usable_list = [[a, match_dict[a]] for a in A]\\n    usable_list.sort(key=lambda x: (x[1], -x[0]))\\n\\n    # dp[i] \u306fi\u672c\u4f7f\u3063\u305f\u6642\u306e\u6700\u5927\u6570\\n    dp = [-1]*(N+10)\\n    dp[0] = 0\\n\\n    for i in range(N+1):\\n        for num, m in usable_list:\\n            dp[i+m] = max(dp[i+m], dp[i]*10+num)\\n    print(dp[N])\\n\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "712", "substitutes": {"MOD": ["MAX", "mod", "LIN", "X", "LOG", "POS", "Mod", "AD", "R", "INC", "L", "RM", "HI", "MIN", "ALL", "Length", "ANY", "TH", "SIZE", "NO", "RED", "NUM", "MODE", "ID", "MS", "USER", "TM", "Y", "REM"], "input": ["history", "next", "arg", "json", "open", "pattern", "str", "local", "select", "expression", "point", "active", "view", "init", "get", "reset", "eval", "shift", "image", "inc", "raw", "length", "set", "control", "ref", "read", "query", "prefix", "format", "enum", "output", "ip", "PUT", "result", "mask", "cmd", "word", "config", "hidden", "alpha", "temp", "out", "std", "Input", "int", "list", "filter", "each", "interface", "exec", "print", "q", "command", "sample", "error", "index", "data", "single", "sequence", "text", "source", "request", "sum"], "NI": ["UI", "NS", "ni", "II", "WI", "IJ", "PI", "NV", "IA", "NA", "NM", "RI", "NN", "NP", "CI", "NR", "HI", "IE", "DI", "NH", "AI", "TI", "GI", "MI", "PIN", "Ni", "KI", "NY"], "NMI": ["NSMi", "MMX", "NMi", "nNI", "MNMi", "NSMI", "MNNI", "nDI", "NNI", "MNMI", "nLI", "nMI", "NMNI", "LMI", " NMX", "MSI", "MLI", "NMX", "TLI", "JNI", "MMI", "NSNI", "NMMi", "JDI", "JMI", "MNLI", "TNI", "LMX", "NMLI", "NMMI", " NSI", "NDI", "TMI", "TDI", "LLI", "NSLI", "JLI", "NSI", "LSI"], "NLI": ["nGI", "nRI", "NSMI", "LUI", "nLI", "MGI", "LMI", "ANUI", "NSRI", "MSI", "MLI", "NRI", "ANLI", "NSUI", "NSGI", "ANMI", "NGI", "MRI", "nSI", "NSSI", "NUI", "ANSI", "LLI", "NSLI", "NSI", "LSI"], "SI": ["UI", "BI", "II", "ISA", "SD", "SH", "PI", "IA", "SL", "SB", "SO", "RI", "Si", "SM", "IS", "IM", "S", "si", "SG", "SC", "SE", "SU", "SP", "GI", "MI", "SA", "SR", "Sa", "IO"], "h": ["ht", "n", "sh", "x", "kh", "p", "r", "hs", "ih", "zh", "rh", "hex", "H", "bh", "f", "b", "hl", "hp", "v", "oh", "height", "his", "hw", "ph", "ha", "he", "hr", "hd", "q", "l", "ho", "hh", "k", "hi", "hm"], "w": ["wx", "n", "x", "wn", "d", "p", " W", "wh", "r", "wt", "weight", "z", "wb", "wr", "iw", "rw", "wi", "W", "wd", "ew", "f", "t", "wl", "win", "wa", "wp", "fw", "v", "width", "ws", "row", "hw", "nw", "l", "y"], "num": ["n", "th", "max", "um", "wn", "nom", "p", "d", "uni", " n", "unique", "unit", "nam", "o", "f", "t", "NUM", "no", "nb", "cum", "non", "na", "Num", "nm", "un", "row", "nu", "dim", "number", "mon", "np", "u", "index", "y", "draw", "sum"], "_": ["n", "ex", "__", "val", "of", "f", "time", "pt", "int", "all", "un"], "N": ["SN", "n", "NS", "Ns", "X", "R", "I", "L", "NA", "NM", "NN", "NR", "W", "H", "O", "V", "S", "J", "Q", "P", "D", "Y", "MN", "Ni", "K", "C"], "M": ["MO", "T", "MU", "R", "I", "L", "NM", "MX", "Mi", "W", "H", "MM", "O", "V", "MC", "B", "J", "Q", "P", "MA", "ME", "MS", "D", "MI", "MN", "MT"], "A": ["T", "All", "An", "IA", "AT", "X", "I", "NA", "L", "AB", "AE", "W", "LA", "AA", "V", "AI", "AR", "AS", "S", "B", "Q", "G", "P", "HA", "AP", "CA", "AF", "TA", "D", "AM", "Y", "SA", "U", "AC", "K", "BA", "AN", "Z", "C"], "match_dict": [" match_map", " match_db", "pattern_dict", "match__look", "match2map", "match_db", "pattern_look", "pattern_hash", "match_look", "match__desc", "pattern_desc", "match_desc", "match2dict", "match2hash", " match_hash", "match_map", "match2db", "match__hash", "match__dict", "match_hash"], "i": ["mi", "n", "xi", "x", "ci", "d", "p", "di", "ai", "I", "c", "z", "yi", "ind", "f", "b", "t", "li", "key", "ii", "v", "e", "ti", "s", "it", "zi", "l", "pi", "phi", "j", "y", "k", "index", "ij"], "m": ["mi", "km", "n", "sym", "pm", "me", "dm", "p", "mu", "mm", "mp", "g", "c", "ma", "mut", "em", "gm", "ms", "ind", "f", "b", "t", "mc", "mn", "v", "sm", "s", "im", "mx", "mem", "mat", "met", "y", "cm"], "usable_list": ["usableListli", "usable2lists", "usableListcollection", " usable_li", "usable2LIST", "usableListlist", "available_reverse", "available_list", "usableListlists", "available_LIST", "usablefulli", "usablefullist", "usable2list", " usable_collection", "usable2reverse", "usablefulreverse", "usable_reverse", "usable_LIST", "usable_collection", " usable_lists", "usable_lists", "usablefullists", "usablefulcollection", "usable_li", "available_lists", "usablefulLIST"], "a": ["x", "sta", "ae", "p", "action", "ana", "name", "g", "va", "ama", "xa", "c", "ma", "z", "ga", "ea", "la", "pa", "fa", "f", "b", "t", "alpha", "da", " pa", "add", "na", "an", "v", "e", "at", "ao", "s", "sa", "sha", "ha", "aka", "oa", "aa", "l", "u", "j", "index", "y", "ya", "area", "ba", "ca", "ac"]}}
{"code": "numbers = [int(x) for x in input().split()]\\nnumbers.sort(reverse=True)\\n\\nprint(10 * numbers[0] + numbers[1] + numbers[2])", "target": "627", "substitutes": {"numbers": ["numeric", "Nramids", "nanumeric", "nums", "Nums", "nographies", "noots", "Namples", "cums", " nramids", "nologies", "generumeric", " namples", "nsoots", "nanramids", "nsums", "numumeric", "generums", "Nals", "generumbers", " nums", "unnums", "nals", " noots", "tums", "tumbers", " nologies", "dumbers", "nolars", "dramids", " numeric", "unnographies", "nanologies", "Numeric", "Numbers", "nanumbers", "namples", "generals", "cumbers", "dologies", "unnramids", "unnumbers", "toots", "cumeric", "Nographies", " nographies", "numumbers", "dumeric", " nolars", "nsolars", "numamples", "nsumbers", "tolars", "cals", "numums", "nramids"], "x": ["wx", "n", "xi", "ex", "xe", "p", "xes", "ux", "xc", "xa", "X", "i", "rx", "ox", "z", "ctx", "hex", "ix", "val", "tx", "ax", "xd", "t", "v", "e", "fx", "xy", "xs", "mx", "xb", "dx", "xx", "y", "px", "ross", "xp", "xf"]}}
{"code": "s = list(input())\\ncount = 0\\nmaxcount = 0\\nfor i in range(3):\\n    if s[i] == 'R':\\n        count += 1\\n        maxcount = count\\n    else:\\n        count = 0\\n\\nprint(maxcount)", "target": "482", "substitutes": {"s": ["a", "n", "ys", "ats", "js", "d", "p", "actions", "g", "w", "r", "c", "ts", "m", "ns", "ies", "rs", "input", "ses", "ins", "h", "ms", "ls", "ids", "b", "t", "S", "ss", "parts", "args", "als", "v", "strings", "gs", "e", "aps", "ws", "gets", "xs", "q", "sts", "y", "qs", "ds", "ps"], "count": ["next", "find", "hold", "n", "max", "comment", "nt", "um", "match", "child", "ct", "value", "long", "ount", "start", "length", "c", "current", "z", "set", "process", "status", "read", "total", "change", "result", "ind", "core", "ctr", "num", "t", "multi", "nb", "amount", "conf", "add", "list", "cache", "now", "found", "print", "size", "counter", "base", "number", "Count", "index", "sum"], "maxcount": ["axlength", "lastsum", "maxsum", "maximumnum", "maximumsum", "maxcache", "Maxcount", "maxlength", "maximumcount", " maxlength", " maxfound", "Maxcache", "lastlength", "lastcount", "Maxmatch", "maxfound", "axcount", "axsum", "Maxnum", " maxnum", "maxmatch", "maxnum", " maxmatch", " maxsum", "maximumcache", "Maxsum", "axmatch", "Maxlength", "lastfound", "maximumfound", "maximumlength", " maxcache"], "i": ["mi", "n", "xi", "x", "gi", "p", "di", "g", "I", "r", "m", "batch", "yi", "qi", "ix", "ind", "b", "multi", "si", "ii", "li", "key", "ji", "v", "ti", "im", "zi", "ini", "q", "l", "pi", "id", "j", "index", "y", "k", "ij", "hi"]}}
{"code": "N, C = map(int, input().split())\\nXV = [list(map(int, input().split())) for _ in range(N)]\\n\\nR = [[0 for _ in range(4)] for _ in range(N)]\\nL = [[0 for _ in range(4)] for _ in range(N)]\\n\\nfor i in range(N):\\n  R[i][3] = 0\\n  L[i][3] = 0\\n\\nfor i in range(N):\\n  R[i][0] = XV[i][0]\\n  R[i][1] = XV[i][1]\\n  L[i][0] = C - XV[i][0]\\n  L[i][1] = XV[i][1]\\nL.sort()\\n\\nfor i in range(N):\\n  R[i][2] = R[i - 1][2] + R[i][1]\\n  L[i][2] = L[i - 1][2] + L[i][1]\\nfor i in range(N):\\n  R[i][2] -= R[i][0]\\n  L[i][2] -= L[i][0] \\n  R[i][3] = max(R[i - 1][3], R[i][2])\\n  L[i][3] = max(L[i - 1][3], L[i][2])\\n#print(\"R:\", R)\\n#print(\"L:\", L)\\n\\nanswer = []\\nfor i in range(N):\\n  if i != N - 1:\\n    answer.append(R[i][2] + max(L[N - 2 - i][3] - R[i][0], 0))\\n  else:\\n    answer.append(R[i][2])\\n\\nL, R = R, L\\nfor i in range(N):\\n  if i != N - 1:\\n    answer.append(R[i][2] + max(L[N - 2 - i][3] - R[i][0], 0))\\n  else:\\n    answer.append(R[i][2])\\n\\nanswer = max(answer)\\nprint(answer if answer > 0 else 0)", "target": "127", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "I", "X", "NA", "NM", "NN", "NR", "NT", "H", "V", "NO", "NOTE", "Z", "S", "MAN", "B", "J", "Q", "G", "P", "Num", "A", "D", "NB", "Y", "MN", "Ni", "K", "F", "AN", "TN", "Note"], "C": ["WC", "M", "CB", "T", "IC", "CM", "JC", "LC", "c", "CI", "CS", "Cs", "YC", "H", "CP", "V", "CT", "VC", "MC", "S", "CCC", "B", "Co", "G", "DC", "P", " c", "A", "CR", "CA", "E", "D", "CC", "K", "F", "FC"], "XV": ["xVs", " RXVs", "UXVA", "TxAv", "IXV", "MXVA", "TxTV", "DXV", " RXL", "XVs", "XXVA", "UXM", "xM", "MXV", "XVA", " XUV", "xVA", " XL", "VV", "IXUV", "OXVs", " XM", " XVs", " XC", " XVW", "XVW", "XC", "XUV", " XVA", " RXV", "XM", "MXL", " RXVM", "UXV", "OXVM", "VAv", "XAv", "XXV", "XTV", " XTV", "MXVW", "DXUV", "VL", "XVM", "XXVW", " XVM", "DXC", "TxL", "UXVs", "IXC", "XL", "OXL", "IXVs", "DXVs", "xV", "VTV", "TxV", "XXL", "OXV", " XAv"], "_": ["x", " the", "g", "__", "ox", "ml", "ix", "py", "let", "val", "place", "f", "____", "pt", "un", "___", " un", "ay"], "R": ["M", "Reg", "Before", "T", "Control", "All", "TR", "RB", "RG", "Right", "Range", "I", "X", "RS", "Res", "r", "Result", "RF", "Tr", "RM", "Rel", "One", "NR", "Re", "Rs", "Repl", "DR", "Ref", "RA", "RE", "GR", "H", "Ret", "HR", "As", "V", "AR", "ER", "RT", "RH", "S", "BR", "G", "This", "Role", "P", "RL", "CR", "With", "Ren", "Results", "RC", "RR", "D", "RP", " r", "Root", "RO", "Rec", "Dr", "Mr", "U", "SR", "Array", "PR", "MR"], "L": ["LB", "dL", "M", "NL", "List", "DL", "T", "Lt", "PL", "BL", "HL", "SL", "Sl", "I", "Line", "Pl", "TL", "LR", "W", "H", "LA", "LU", "O", "V", "SQL", "LD", "OL", "S", "FL", "LT", "B", "Q", "Li", "ML", "G", "LI", "Long", "P", "RL", "E", "IL", "LG", "VL", "Lu", "GL", "Left", "l", "CL", "LL", "Len", "XL", "LE", "U", "LM", "F", "Lock", "LS", "LP", "EL"], "i": ["ki", "json", "x", "err", "p", "set", "ix", "multi", "ri", "v", "exp", "e", "ti", "oi", "it", "ini", "\u0438", "q", "phi", "id", "init", "ia", "uri", "g", "ai", "I", "this", "pre", "m", "status", "qi", "iti", "parent", "ic", "o", "si", "iu", "key", "ei", "im", "s", "zi", "l", "ij", "source", "chain", "ci", "gi", "series", "ip", "h", "io", "dr", "ii", "ui", "pi", "ali", "index", "fi", "ik", "mi", "xi", "ie", "ios", "cli", "di", "isi", "bi", "ami", "info", "yi", "f", "t", "li", "ji", "ori", "int", "list", "iy", "at", "item", "j", "y", "er", "asi", "iri", "hi"]}}
{"code": "N=int(input())\\nX=map(int, input().split())\\nX = list(X)\\n\\n\\navg = sum(X) / N\\navgi = int(avg + 0.5)\\n\\nans = 0\\nfor i in X:\\n#    print((i-avgi)*(i-avgi))\\n    ans += (i-avgi)**2\\n\\nprint(ans)\\n", "target": "46", "substitutes": {"N": ["Total", "n", "M", "NS", "T", "NC", "Na", "Ns", "R", "I", "L", "NA", "NN", "NR", "NH", "H", "O", "V", "TN", "S", "B", "J", "Q", "G", "P", "Num", "A", "E", "D", "Y", "Len", "Ni", "K", "F", "Z", "C"], "X": ["M", "IX", "x", "T", "Once", "Check", "TX", "R", "I", "L", "EX", "Content", "AV", "Sync", "MX", "One", "UX", "OX", "Ex", "W", "H", "ZX", "XY", "V", "Cross", "XP", "S", "DX", "XM", "J", "Q", "G", "P", "Input", "A", "E", "XX", "D", "XT", "XXX", "Test", "Y", "XL", "U", "K", "F", "Z", "C", "Xi"], "avg": ["augn", "avgs", "aug", "AVge", "AVgs", "auge", "averge", "averg", "avergi", "avegn", "avegi", " avgn", "avergs", "AVg", "avgm", "aveg", " avgm", "avgn", "avege", "avge", " avge", "avegs", "AVgi", "avegm", "augm"], "avgi": ["Avgil", " avge", " avgil", "avgil", "ovge", "ovgil", "ovgn", " avgn", "ovgi", "Avgi", "avgn", "avge", "Avgn", "Avge"], "ans": ["ANS", "ops", "names", "lines", "ns", "mut", "ann", "ks", "scan", "ms", "ls", "ids", "Sk", "ots", "mn", "uns", "na", "an", "anes", "ups", "nan", "arts", "sk", "es", "groups", "AN", "ds", "vers"], "i": [" ii", " I", " pi", " Di", " fi", " io", " Ri", " wi", " err", " im", "I", " si", " di", " bi", " ip", " wit", " Ti", " info", " pa", "ti", " vi", " rein", " ti", " fn", " iP", " ye", " mi", " fu"]}}
{"code": "'''\\nAccepted    \u3000:No\\ndifficult   \u3000: \\n\u30da\u30ca\u30eb\u30c6\u30a3\u3000  \u3000:5\u5206\\n\u5b9f\u969b\u306e\u56de\u7b54\u6642\u9593  :\u5206\\nWA\u306e\u56de\u6570\u3000     :\u56de\\n\u5408\u8a08\u6642\u9593\u3000\u3000  \u3000:\u5206\\n'''\\n\\ndef myAnswer(N:int,Q:int,S:str,L:list,R:list) -> None:\\n   pre = S[0]\\n   accum = [0]\\n   for s in S[1:]:\\n      if(pre == \"A\" and s ==\"C\"):\\n         accum.append(accum[-1] + 1)\\n      else:\\n         accum.append(accum[-1])\\n      pre = s\\n   for l,r in zip(L,R):\\n      print(accum[r-1] - accum[l-1])\\n\\n\\ndef modelAnswer():\\n   return\\ndef main():\\n   N,Q = map(int,input().split())\\n   S =input()\\n   L = []\\n   R = []\\n   for _ in range(Q):\\n      l,r = map(int,input().split())\\n      L.append(l)\\n      R.append(r)\\n   myAnswer(N,Q,S,L,R)\\n\\n\\nif __name__ == '__main__':\\n   main()", "target": "155", "substitutes": {"pre": ["next", "top", "ser", "before", "prev", "state", "str", "Pref", "p", "name", "mp", "test", "short", "i", "PRE", "re", "current", "set", "status", "par", "prefix", "prime", "min", "res", "Pre", "are", "pr", "pron", "pri", "sp", "t", "pretty", "si", "sim", "key", "null", "prep", "cache", "post", "inter", "sa", "pres", "print", "per", "tmp", "pret", "j", "op", "ps", "temp", "after"], "accum": ["occcum", "incums", "uncunc", "acrum", "accram", "ascumer", "accenum", "occums", "discum", "accsum", "facumer", "ascumb", "acquums", "incrum", "acums", " accenum", " accsum", "discunc", "acsum", "Accum", "collcum", "collums", "facsum", "acquum", "uncum", " accrum", "acumer", "commumer", " accuum", "discenum", "ascram", "accatum", "unccum", "uncumer", "accrum", "accunc", " accumb", " acccum", "occumer", "disccum", "acccum", "uncrum", "acqucum", " accatum", "acum", "accumer", " accunc", "Accram", "acquume", "facum", "collume", "ascrum", "occrum", "ascuum", " accums", "accumb", "collum", "acatum", "commrum", " accumer", "Accatum", "accume", "inccum", "Accuum", "facatum", "ascatum", "incum", "accuum", "accums", "uncumb", " accume", "commum", " accram", "uncenum", "ascum", "commums", "occum"], "s": ["a", "next", "sym", "n", "sb", "sw", "self", "prev", "str", "ats", "p", "g", "short", "i", "re", "sys", "c", "ts", "z", "m", "full", "rs", "ins", "o", "h", "sing", "ls", "f", "b", "t", "ss", "si", "v", "e", "sq", "gs", "sa", "sol", "new", "q", "j", "os", "y", "ps", "sc"], "l": ["lc", "n", "tl", "kl", "ln", "ld", "p", "lt", "g", "left", "lb", "i", "long", "c", "z", "m", "ml", "dl", "el", "nl", "sl", "ls", "f", "b", "level", "hl", "t", "yl", "rl", "lo", "lp", "li", "fl", "v", "sol", "lr", "q", "ll", "le", "pl", "line", "j", "lin"], "r": ["nr", "n", "sr", "mr", "pair", "rr", "ro", "err", "rg", "d", "p", "g", "rc", "i", "re", "w", "c", "m", "z", "rs", "rb", "res", "h", "ren", "pr", "vr", "result", "rar", "right", "br", "fr", "t", "rel", "rl", "dr", "v", "e", "red", "it", "rt", "lr", "q", "ar", "j", "er", "cr", "ry", "rd"], "N": ["SN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "I", "NA", "NM", "NN", "NR", "NT", "NH", "V", "TN", "No", "NE", "B", "J", "G", "ND", "P", "A", "D", "NB", "Y", "MN", "Ni", "K", "AN", "Z", "C"], "Q": ["Que", "M", "IX", "HQ", "T", "NS", "CH", "MQ", "Queue", "X", "I", "Qual", "H", "Query", "V", "Ch", "QB", "UE", "EC", "B", "J", "G", "P", "A", "Quant", "D", "QL", "NB", "q", "Y", "Qu", "UK", "IQ", "U", "K", "F", "Z", "QU", "C"], "S": ["M", "Source", "NS", "T", "SF", "SH", "BS", "SS", "SL", "SB", "I", "X", "RS", "SER", "Si", "Sl", "SI", "CS", "TS", "SAN", "Set", "H", "W", "SQL", "V", "GS", "Ins", "AS", "INS", "B", "SK", "G", "P", "SSL", "SE", "A", "US", "E", "Spec", "SP", "SU", "D", "Y", "SA", "U", "SR", "String", "Z", "C"], "L": ["LB", "M", "NL", "DL", "List", "T", "LIN", "BL", "PL", "LIST", "ELS", "HL", "SL", "LC", "AL", "TL", "LR", "H", "LA", "LU", "LD", "V", "OL", "FL", "LT", "B", "ML", "Li", "LI", "P", "SSL", "RL", "IL", "LV", "LG", "Lu", "CL", "LL", "LE", "XL", "LM", "LOC", "LS", "Z", "LP", "EL", "C"], "R": ["M", "T", "TR", "RG", "Right", "Range", "RH", "RS", "Res", "RW", "RM", "NR", "Rs", "DR", "RE", "RA", "RES", "GR", "IR", "V", "AR", "RAM", "ER", "OR", "B", "BR", "G", "P", "RL", "CR", "VR", "RR", "RP", "D", "RO", "MR", "RIP", "SR", "PR", "C"], "_": [" e", " j", " num", " i", " x", " m", " __", " v"]}}
{"code": "W, H, n = map(int, input().split())\\nl = [[True]*W]*H\\nfor i in range(n):\\n    x, y, a = map(int, input().split())\\n    if a == 1:\\n        for h in range(H):\\n            for w in range(x):\\n                l[h][w] = False\\n    elif a == 2:\\n        for h in range(H):\\n            for w in range(x, W):\\n                l[h][w] = False\\n    elif a == 3:\\n        for h in range(y):\\n            l[h] = [False]*W\\n    else:\\n        for h in range(y, H):\\n            l[h] = [False]*W\\n\\nans = 0\\nfor i in range(H):\\n    for j in range(W):\\n        if l[i][j]:\\n            ans += 1\\nprint(ans)", "target": "274", "substitutes": {"W": ["WT", "Window", "WC", "M", "N", "We", "T", "MW", "WI", "CW", "Win", "Word", "Watch", "TW", "NW", "WP", "X", "I", "R", "L", "Wi", "RW", "WW", "VW", "WH", "BW", "Wil", "V", "WA", "Width", "S", "Wh", "SW", "Q", "Week", "J", "A", "How", "E", "Wa", "Y", "DW", "EW", "K", "F", "Weight", "WS", "Z", "C"], "H": ["M", "N", "Eh", "T", "HD", "His", "HS", "HE", "Th", "X", "I", "Ha", "L", "RH", "R", "HO", "HI", "GH", "WH", "NH", "DH", "O", "TH", "V", "HH", "S", "Wh", "J", "B", "Q", "G", "HA", "P", "A", "OH", "Host", "E", "Han", "D", "HC", "MH", "Y", "U", "K", "F", "HT", "Z", "He", "C"], "n": ["nr", "N", "nt", "d", "p", "ne", "dn", "r", "c", "sn", "m", "z", "ns", "ny", "o", "num", "t", "nb", "no", "na", "v", "nm", "s", "nu", "nw", "nn", "number", "np", "q", "Ni"], "l": ["loc", "lc", "kl", "tl", "ln", "lt", "p", "ld", "g", "left", "lb", "L", "r", "ml", "m", "dl", "el", "lit", "o", "nl", "sl", "ls", "f", "b", "hl", "lists", "lo", "rl", "fl", "li", "lp", "v", "list", "lv", "lang", "lr", "ol", "lock", "pl", "ll", "le", "er"], "i": ["ki", "xi", "ia", "ci", "gi", "ir", "p", "di", "ai", "I", "r", "c", "z", "m", "bi", "yi", "iti", "ic", "ix", "o", "ip", "b", "si", "li", "ii", "v", "ti", "im", "it", "zi", "ini", "q", "pi", "il", "u", "id", "k", "ik", "ij", "iu", "hi"], "x": ["wx", "xi", "ex", "p", "xc", "X", "xa", "rx", "r", "ox", "z", "xt", "ix", "o", "tx", "t", "v", "e", "int", "xy", "s", "xs", "dx", "q", "xx", "u", "index", "xp"], "y": ["ys", "yer", "p", "g", "cy", "r", "c", "z", "m", "ies", "ny", "yi", "vy", "by", "o", "py", "ye", "col", "b", "t", "key", "v", "yn", "e", "ey", "height", "xy", "ch", "it", "yt", "Y", "yy", "k", "hot", "ay"], "a": ["ae", "ab", "era", "ta", "p", "ana", "va", "ai", "span", "ma", "ica", "ata", "eas", "ga", "alias", "o", "are", "ea", "pa", "la", "fa", "act", "ada", "b", "alpha", "si", "da", "wa", "apa", "na", "an", "e", "att", "all", "A", "ap", "at", "ao", "sa", "sha", "au", "oa", "aa", "am", "aw", "ar", "ka", "area", "ba", "ca", "ac"], "h": ["hold", "ht", "sh", "ith", "th", "kh", "p", "on", "ach", "g", "html", "wh", "hal", "hs", "dh", "c", "z", "m", "ih", "rh", "ah", "host", "pr", "go", "bh", "b", "f", "hl", "gh", "hp", "t", "exp", "v", "oh", "ph", "ch", "ha", "hash", "he", "hr", "hd", "q", "ho", "hh", "id", "u", "k", "hi", "hm"], "w": ["wx", "conn", "sw", "wn", "p", "on", "g", "wy", "wh", "we", "wt", "r", "c", "z", "wr", "window", "rw", "o", "wd", "kw", "wo", "power", "ew", "f", "word", "ss", "wa", "wp", "fw", "v", "width", "ws", "ww", "q", "u", "k"], "ans": ["ys", "ANS", "ians", "ats", "ants", "ints", "eds", " means", "ows", "helps", "aus", "ros", "us", "ts", "aves", "ns", "ums", "rans", "mas", "ann", "anas", "ks", "offs", "ins", "ons", "ms", "amps", "ls", "ents", "ens", "uns", "an", "posts", "jas", "iann", "anks", "oss", "aps", "anes", "s", "nan", "xs", "cs", "arts", "os", "es", "lan", "ps", "olds"], "j": ["uj", "ja", "aj", "js", "p", "d", "g", "jp", "r", "c", "z", "m", "bi", "jj", "ju", "o", "fr", "b", "f", "t", "si", "mn", "J", "ion", "ii", "ji", "v", "e", "s", "it", "q", "dj", "u", "k", "er", "ij"]}}
{"code": "import collections\\nN = int(input())\\na = list(map(int, input().split()))\\nl = [0]* N\\n\\nfor i in range(N-1):\\n    #print(i, a[i]-1)\\n    l[a[i]-1] += 1\\n#print(l)\\nfor j in range(N):\\n    print(l[j])\\n", "target": "38", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "T", "NC", "GN", "NI", "Ns", "X", "I", "R", "L", "NA", "NM", "NN", "CN", "NR", "NT", "O", "V", "NO", "Z", "S", "B", "J", "Q", "G", "Num", "P", "A", "E", "D", "NB", "Len", "Ni", "K", "F", "AN", "TN", "FN", "C"], "a": ["x", "ab", "p", "g", "xa", "w", "r", "c", "ma", "m", "o", "h", "la", "f", "b", "t", "v", "e", "all", "A", "at", "sa", "s", "aa", "array", "ba"], "l": ["lc", "n", "p", "g", "lb", "L", "w", "c", "m", "dl", "el", "o", "nl", "la", "h", "ls", "f", "b", "t", "len", "lp", "li", "v", "e", "list", "ll", "j"], "i": [" ii", "iii", "\u00ed", "n", "x", "ite", "ci", "gi", "isin", "p", " j", "iq", "I", "iter", "r", "ix", "ind", "ii", "li", "ti", "im", "it", "q", "id", "j", "k", "ij"]}}
{"code": "N, K=list(map(int, input().split(\" \")))\\n\\nP=list(map(int, input().split(\" \")))\\n\\nsum=0\\nfor i in range(K):\\n  sum=sum+sorted(P)[i]\\n\\nprint(sum)", "target": "124", "substitutes": {"N": ["M", "n", "NS", "T", "NC", "Ns", "X", "I", "L", "NA", "NN", "NR", "H", "V", "TN", "S", "B", "J", "Q", "G", "E", "D", "Y", "Ni", "F", "Z", "C"], "K": ["M", "T", "KN", "KR", "KEY", "X", "R", "L", "KK", "H", "W", "FK", "CP", "V", "KS", "PK", "Sk", "KC", "B", "J", "Q", "SK", "G", "HK", "D", "NB", "Y", "k", "F", "KI", "Z", "KE", "KA", "KING", "C"], "P": ["PU", "M", "T", "p", "IP", "JP", "TP", "X", "I", "R", "L", "POS", "PS", "NP", "PT", "H", "PA", "CP", "V", "BP", "PK", "S", "B", "J", "Q", "G", "AP", "Pi", "A", "PP", "GP", "PF", "D", "PO", "Y", "PD", "PM", "C"], "sum": ["n", "comment", "max", "summary", "su", " summed", "um", "match", " Sum", "score", "ul", "med", "system", "zero", "us", "weight", "current", "mass", "union", "total", "tail", "result", "Sum", "mean", "num", "count", "multi", "vol", "sat", "share", "cum", "sim", "alpha", "tu", "add", "out", "hist", "cal", "final", "oss", "up", "cos", "sa", "hash", "now", "rup", "average", "com", "say", "cast", "size", "dot", "tmp", "mem", "cost", "dict", "ass", "loss", "temp"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "p", "g", "di", "ai", "I", "c", "m", "bi", "yi", "qi", "ic", "ip", "ind", "f", "b", "si", "li", "key", "ii", "v", "ti", "zi", "ui", "ini", "\u0438", "q", "pi", "u", "k", "j", "ij"]}}
{"code": "h, w = [int(i) for i in input().split()]\\nmod = 10 ** 9 + 7\\ndp = [[0] * (w + 1) for _ in range(h + 1)]\\ndp[0][0] = 1\\nfor i in range(h):\\n    a = input()\\n    for j, k in enumerate(a):\\n        if i == 0 and j == 0:\\n            continue\\n        if k != \"#\":\\n            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % mod\\nprint(dp[h-1][w-1])\\n", "target": "273", "substitutes": {"h": ["history", "ht", "n", "sh", "x", "kh", "p", "hz", "dh", "hs", "m", "ih", "zh", "rh", "hei", "H", "ah", "host", "bh", "f", "b", "hl", "hp", "t", "v", "oh", "height", "his", "ph", "hw", "ha", "he", "hr", "hd", "q", "ho", "l", "hh", "y", "hi", "hm"], "w": ["wx", "n", "x", "sw", "wn", "d", "p", "wy", "wh", "we", "wt", "weight", "m", "z", "wb", "man", "wr", "window", "iw", "rw", "wi", "W", "wd", "kw", "wal", "ew", "wl", "wid", "win", "wa", "wp", "v", "width", "ws", "hw", "nw", "wk"], "i": ["\u00ed", "ki", "n", "xi", "x", "ia", "mi", "ni", "ci", "gi", "ir", "p", "di", "ai", "I", "c", "m", "ami", "bi", "yi", "info", "iti", "ic", "ix", "ip", "iri", "f", "b", "t", "ri", "io", "si", "ii", "li", "ji", "v", "ei", "int", "ti", "oi", "im", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "phi", "ati", "u", "id", "y", "index", "ij", "ik", "iu", "hi"], "mod": ["max", "MOD", "mods", " Mod", "sign", "util", "dir", "sub", "mult", "color", "Mod", "fun", "complex", "pre", "scale", "m", "set", "pad", "od", "OD", "dec", "min", "step", "log", "term", "time", "wid", "cond", "form", "dig", "add", "odd", "post", "debug", "com", "div", "mag", "base", "var", "id", "mt", "sum"], "dp": ["pkg", "dos", "pm", "ld", "d", "p", "db", "dm", "vp", "di", "dial", "jp", "td", "dh", "dl", "pb", "dk", "gp", "wd", "tp", "dt", "df", "dep", "dc", "hp", "da", "DP", "wp", "lp", "pd", "dr", "delay", "deb", "cp", "bps", "dq", "pipe", "dd", "du", "np", "dj", "px", "pp", "ds", "ps", "adr"], "_": ["x", " the", " y", "name", "I", "ix", "o", " g", "ew", " x", " l", " m", " __", " each", " p", " v", " he", " un", "ay", "ow"], "a": ["n", "ae", "ac", "ab", "ta", "p", "va", "xa", "ai", "r", "c", "ma", "m", "ga", "ea", "pa", "aaa", "f", "b", "t", "wa", "apa", "an", "v", "A", "ap", "another", "sa", "ao", "oa", "au", "aa", "l", "am", "ar", "ca"], "j": ["n", "x", "uj", "ja", "js", "d", "p", "aj", "jp", "r", "jc", "oj", "z", "m", "jj", "bi", "o", "jl", "f", "b", "jac", "t", "J", "ot", "bj", "ii", "kj", "v", "ji", "s", "it", "q", "l", "dj", "y", "ij", "ik"], "k": ["ck", "km", "ki", "ek", "kn", "kr", "kh", "kl", "ijk", "kin", "kar", "ak", "ke", "kid", "c", "m", "ks", "kw", "ko", "kind", "tk", "kj", "v", "ok", "ikk", "ku", "kt", "q", "kk", "ka", "sk", "K", "ik", "kan", "mk", "unk"]}}
{"code": "op=[\"+\",\"-\"]\\na,b,c,d=map(str,input())\\n\\nfor o1 in op:\\n  for o2 in op:\\n    for o3 in op:\\n      form= a+o1+b+o2+c+o3+d\\n      if eval(form)==7:\\n        print(form+\"=7\")\\n        exit()", "target": "504", "substitutes": {"op": ["top", "open", "osp", "ops", "str", "OP", "mod", "ocon", "p", "opl", "ep", "mp", "oped", "jp", "typ", "deep", "iop", "og", "ist", "o", "alg", "ip", "oper", "ax", "oe", "sp", "dat", "ocy", "ord", "ver", "ot", "bit", "pos", "dr", "opy", "exp", "pop", "hop", "up", "ok", "post", "mop", "ost", "it", "Op", "co", "ol", "orp", "opt", "operator", "oop", "ool", "pl", "rop", "oc", "hot", "pol", "comp", " Op"], "a": ["aq", "x", "ae", "ab", "aj", "p", "ach", "g", "va", "ak", "r", "w", "z", "o", "la", "aaa", "f", "t", "v", "e", "an", "ain", "A", "al", "at", "sa", "af", "ao", "au", "aa", "l", "ar", "j", "y", "ba", "ca", "ac"], "b": ["n", "ab", "db", "g", "ib", "i", "r", "bi", "fb", "rb", "bo", "h", "be", "br", "f", "bc", "B", "bb", "v", "e", "erb", "eb", "cb", "aa", "l", "ub", "y", "j", "bs", "ba"], "c": ["ec", "ce", "lc", "n", "cd", "g", "cn", "ct", "rc", "r", "z", "f", "bc", "vc", "dc", "e", "v", "cin", "cp", "s", "cc", "cb", "l", "cs", "k", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["n", "x", "p", "g", "i", "r", "w", "m", "z", "o", "h", "f", "t", "da", "dig", "dr", "pd", "v", "e", "de", "s", "D", "ed", "do", "q", "l", "dd", "du", "u", "j", "data", "dict", "ds"], "o1": [" o0", " o4", "h3", "o6", " o6", "o4", " o01", "O4", "h4", "mo01", "mo6", "o0", "no0", "O3", "no01", "O0", "mo0", "mo1", "O1", "h0", "o01", "h1", "no6", "no1"], "o2": [" o0", "o6", "po5", "os22", "otTwo", "os0", "ot0", " o8", " o6", " oTwo", "bo2", "os2", "bo8", "o0", "po2", "o5", "po6", " o22", " o5", "ot2", "ot22", "o8", "bo5", "osTwo", "o22", "bo6", "oTwo", "po8"], "o3": [" o0", "ot9", "oa0", "oa3", "oa6", "o6", "ox9", "onet3", "a0", "ot0", "ot6", "a3", "a11", "oa9", "ot3", "o0", "a9", "o9", "onet0", "ox6", "o11", "ox3", " o9", "ox0", "onet9", "onet11", " o11"], "form": ["hold", "con", "n", "x", "str", "mod", "um", "p", "r", "ma", "m", "fc", "Form", "mut", "man", "hex", "format", "dom", "term", "act", "oper", "f", "fr", "num", "dat", "fac", "da", "off", "pos", "out", "v", "e", "exp", "list", "formed", "st", "fam", "co", "oct", "orth", "pl", "orm", "reg", "FORM", "j", "pp", "text", "forms", "ac"]}}
{"code": "def is_stable(oline, line):\\n    for i in range(N):\\n        for j in range(i+1, N):\\n            for a in range(N):\\n                for b in range(a+1, N):\\n                    if (oline[i][1] == oline[j][1]) & (oline[i] == line[b]) & (oline[j] == line[a]):\\n                        return False\\n    return True\\n\\nN = int(input())\\nline = input().split()\\noline = line.copy()\\n#BubbleSort\\nfor i in range(N):\\n    for j in range(N-1, i, -1):\\n        if int(line[j][1]) < int(line[j-1][1]):\\n            tmp = line[j]\\n            line[j] = line[j-1]\\n            line[j-1] = tmp\\nprint(' '.join(line))\\nprint(('Not stable', 'Stable')[is_stable(oline, line)])\\n\\n#SelectionSort\\nline = oline.copy()\\nfor i in range(N):\\n    minj = i\\n    for j in range(i+1, N):\\n        if int(line[minj][1]) > int(line[j][1]):\\n            minj = j\\n    tmp = line[i]\\n    line[i] = line[minj]\\n    line[minj] = tmp\\nprint(' '.join(line))\\n\\nprint(('Not stable', 'Stable')[is_stable(oline, line)])", "target": "30", "substitutes": {"oline": ["body", "cue", "online", "oice", "LIN", "folio", "roo", "oval", "office", "oan", "bo", "anne", "te", "piece", "panel", "block", "gone", "plane", "tile", "oi", "obj", "que", "tle", "range", "ine", "onet", "ln", "die", "ico", "eline", "oin", "lag", "oid", "ile", "oly", "fo", "don", "inet", "clus", "oa", "cl", "LE", "loc", "ce", "pole", "oon", "oxy", "cil", "iced", "ole", "lo", "ono", "coe", "loe", "ol", "olina", "ele", "bol", "ro", "elines", "frame", "name", "dial", "Line", "ace", "ule", "vol", "li", "exe", "LINE", "nel", "bl", "le", "INE", "lin", "tif", "adr", "tra"], "line": ["next", "body", "ine", "ge", "lf", "online", "ln", "point", "where", "ne", "file", "inline", "Line", "lines", "zone", "pe", "input", "eline", "page", "o", "nl", "ide", "output", "log", "ole", "level", "block", "lo", "gone", "plane", "li", "out", "de", "e", "list", "lane", "row", "string", "LINE", "none", "board", "l", "pipe", "le", "link", "se", "range", "stay", "data", "lin", "entry", "text", "chain"], "i": ["mi", "ki", "n", "xi", "x", "ia", "ie", "ci", "ir", "ib", "ai", "I", "c", "bi", "ami", "ic", "o", "ix", "ip", "ind", "ri", "io", "si", "li", "ii", "ei", "v", "e", "ti", "int", "im", "it", "zi", "ini", "ui", "\u0438", "l", "pi", "ati", "u", "id", "y", "ij", "iu", "hi"], "j": ["n", "uj", "ie", "ja", "ijk", "aj", "js", "p", "d", "g", "jp", "job", "r", "jc", "c", "z", "m", "jj", "bi", "o", "h", "ind", "jl", "f", "J", "bj", "ji", "v", "kj", "e", "obj", "at", "it", "jump", "q", "l", "dj", "u", "y", "ij", "bs"], "a": ["n", "x", "ia", "ae", "ja", "ac", "ab", "ta", "aj", "p", "d", "va", "ai", "r", "w", "c", "ma", "m", "ga", "o", "pa", "t", "na", "an", "v", "e", "A", "ap", "al", "at", "ao", "sa", "oa", "au", "aa", "l", "am", "ar", "u", "ba", "ca"], "b": ["sb", "to", "bf", "ab", "db", "g", "ib", "r", "c", "z", "bd", "m", "bi", "rb", "bm", "by", "o", "bo", "h", "be", "ob", "bh", "br", "bc", "t", "nb", "B", "bb", "bj", "v", "e", "xb", "eb", "bl", "cb", "l", "y", "bs", "ba"], "N": ["CNN", "M", "n", "NS", "T", "NL", "Ne", "NC", "NI", "Na", "Ns", "R", "I", "X", "NA", "L", "NM", "Number", "NN", "Line", "NP", "NR", "CN", "NT", "NH", "O", "V", "NO", "S", "NE", "B", "J", "Q", "ND", "P", "Input", "Num", "ID", "A", "E", "LINE", "D", "NB", "Ni", "F", "AN", "TN", "Note", "C"]}}
{"code": "H, W, K = map(int, input().split())\\nrsum = [[0] * (W + 1)]\\nfor _ in range(H):\\n    rsum.append([0])\\n    tot = 0\\n    for c, v in enumerate(map(int, input())):\\n        tot += v\\n        rsum[-1].append(tot + rsum[-2][c + 1])\\nans = 10 ** 10\\nfor i in range(1 << H):\\n    hcuts = [0]\\n    for j in range(H - 1):\\n        if i & (1 << j):\\n            hcuts.append(j + 1)\\n    hcuts.append(H)\\n    vcuts = [0]\\n    ok = True\\n    for c in range(1, W + 1):\\n        for b in range(2):\\n            max_w = 0\\n            for h in range(1, len(hcuts)):\\n                max_w = max(\\n                    max_w,\\n                    rsum[hcuts[h]][c]\\n                    - rsum[hcuts[h - 1]][c]\\n                    - rsum[hcuts[h]][vcuts[-1]]\\n                    + rsum[hcuts[h - 1]][vcuts[-1]],\\n                )\\n            if max_w > K:\\n                if b:\\n                    ok = False\\n                    break\\n                vcuts.append(c - 1)\\n        if not ok:\\n            break\\n    if not ok:\\n        continue\\n    vcuts.append(W)\\n    ans = min(ans, len(hcuts) - 2 + len(vcuts) - 2)\\nprint(ans)\\n", "target": "329", "substitutes": {"H": ["M", "N", "HD", "T", "HS", "HL", "HE", "X", "R", "I", "L", "RH", "HO", "HI", "NH", "DH", "O", "TH", "V", "HH", "S", "B", "J", "Q", "G", "HA", "P", "A", "OH", "HK", "E", "Han", "D", "HC", "MH", "Y", "U", "F", "HT", "Z", "He", "C"], "W": ["WT", "WC", "M", "N", "We", "WR", "MW", "WI", "CW", "Win", "TW", "Ws", "WP", "NW", "R", "L", "Wi", "w", "VW", "WH", "BW", "V", "WA", "Width", "Wh", "SW", "B", "J", "WB", "Web", "Y", "FW", "WE", "DW", "EW", "Weight", "F", "WS", "C"], "K": ["M", "N", "T", "KR", "MK", "Th", "R", "X", "KK", "WH", "V", "KS", "KC", "Sk", "PK", "S", "B", "J", "Q", "SK", "G", "P", "A", "E", "Y", "Size", "k", "F", "Z", "KE", "KA", "C"], "rsum": ["Rsuum", " rsma", "imsum", "rsup", "arsumo", "Rssum", "rosan", "rssman", "rtan", "Rsigma", "resut", " rsul", "arsuc", "arsume", "arsul", "rsman", " rsut", "rotsuc", " rsuc", "rigma", "rsam", "imsom", "rsuc", "resup", "rume", "tsul", "arsom", "mrul", "mrumo", "resum", "rssut", " rsuum", "rtuc", "rtut", "mruc", "psuum", "resums", "rsut", "arsump", " rsman", "rum", "rtom", "rsump", "Rsma", "mram", "rtul", "psma", "resump", "rotsum", "psums", "rtum", "mrom", "rsan", "rotsam", "arsum", "rsom", "tssum", "arsums", "rsuum", "Rsum", "rup", "rosom", "rsumo", "mrume", "pssum", "rsssum", "imsan", "rotsul", "rssum", "rom", "rtam", "rosut", "arssum", "rsums", "rosum", "rsume", "tsuc", "rsma", "Rsup", "mrum", " rssum", "tsum", "resman", "ressum", "psum", "resigma", "rumo", "psump", "rsul", "imsut", "rsigma"], "_": ["a", "x", "ia", "ac", "ci", "ach", "g", "ib", "ct", "ai", "I", "m", "ic", "ix", "o", "ind", "bc", "J", "an", " m", "A", " w", "it", "aw", "ik", "ow"], "tot": ["Total", "mot", "Tot", "noti", " tots", "retotal", "toti", "stotal", "tots", "stoti", "strot", "retot", "total", "mota", "Tota", "trot", "stots", "mOT", "notal", "stota", "retota", "stot", "nota", "tOT", "mots", "motal", "TOT", "mrot", "retoti", "nOT", "tota", " trot", " total"], "c": ["a", "lc", "n", "x", "cat", "ci", "d", "p", "cont", "cd", "g", "xc", "ct", "w", "r", "chain", "tc", "z", "m", "ic", "o", "col", "cv", "f", "vc", "bc", "t", "dc", "mc", "cut", "can", "cin", "cache", "cp", "ch", "cc", "co", "cu", "cb", "l", "q", "u", "cs", "k", "y", "cm", "cr", "cf", "C", "ac"], "v": ["qv", "n", "vv", "d", "p", "vi", "vo", "tv", "va", "g", "value", "w", "r", "uv", "m", "z", "ev", "o", "val", "cv", "V", "f", "vc", "t", "iv", "ver", "av", "nv", "e", "sv", "conv", "ve", "q", "l", "u", "vt", "k", "y"], "ans": ["ones", "ars", "ANS", "ants", "ats", "ians", " means", "eds", "outs", "ows", "aus", "ros", "nets", "us", "aned", " Ans", "ns", "ann", "rans", "rs", "eas", "ks", "anas", "offs", "ins", "ms", "amps", "ers", "ls", "pan", "ents", "ens", "ations", "ots", "mn", "uns", "an", "rors", "aps", "anes", "oss", "s", "nan", "xs", "nz", "ions", "ran", "ams", "vs", "cs", "arts", "es", "os", "AN", "ps", "utions"], "i": ["a", "ki", "n", "xi", "x", "ni", "ci", "gi", "p", "di", "ai", "I", "z", "m", "ih", "bi", "yi", "ic", "o", "ip", "f", "io", "si", "li", "ii", "ti", "im", "phi", "pi", "ati", "y", "ij", "ik", "hi"], "hcuts": ["shsets", "hpins", "habots", "hpointers", "hpieces", "thpieces", "hlernels", "shernels", "htfits", "hshots", "vkeys", "hadates", "htuts", "ohuts", "hauts", "hecut", "hacuts", "htbots", "shpieces", "htpins", "htpieces", "vbots", "hrpieces", "hrkeys", "ohpieces", "vuts", "hrpins", "vnuts", "thshots", "hjobs", " hbots", " hnuts", "htabs", "hrjobs", "hkeys", "hernels", "vdates", "htcut", "hlballs", "hoffs", "ohpins", "hcut", "shballs", "hrbots", "shshots", "ohpointers", "vcut", "haballs", "hebots", " hoffs", "haernels", "ohcut", "hecuts", "hashots", "thcuts", "ohfits", "heoffs", " huts", "htdates", "ohsets", "htoffs", " hpointers", "ohcuts", "hfits", "shcuts", "hrsets", " hkeys", "hlpieces", "hlcuts", "shjobs", "vabs", "hrcuts", "hballs", "ohjobs", "huts", "habs", "hdates", "shdates", "hrcut", " hcut", "thdates", "hnuts", "hrnuts", "htcuts", "hrfits", "vpieces", "shabs", "shuts", "hbots", "hapieces", "vpointers", "hsets", "ohbots"], "j": ["n", "x", "uj", "ja", "js", "aj", "p", "g", "jp", "job", "w", "r", "jc", "oj", "z", "jj", "o", "jl", "f", "je", "t", "J", "bj", "li", "ji", "kj", "obj", "s", "it", "jump", "q", "l", "dj", "u", "k", "y", "ij"], "vcuts": ["tvcuts", "jcuts", " vjobs", "viguards", "qvcuts", "vcars", "vuts", "fcars", "vvbanks", " vfits", "nvcuts", "vvobjects", "vlets", " vuts", "vvcuts", "hjobs", " vbots", "Vbots", " vlets", "fobjects", "tvguards", "futs", "jcut", "vvuts", "vijobs", " vcut", "Vuts", "nvshots", "wballs", "wobjects", "vobjects", "qvballs", "vshots", "fcuts", "vballs", "vtcars", "qvobjects", "juts", "wcuts", "tvjobs", "hcut", "vtobjects", "hlets", "vvcars", "qvuts", "nvjobs", "vishots", "vcut", "vguards", "Vcuts", "tvshots", "wuts", "vtfits", " vbanks", "vtbots", "jbanks", "vvjobs", "vjobs", "vbanks", "jlets", "vbots", "Vfits", "vfits", "jjobs", "vicuts", "vtuts", "vtcuts", "vvballs", "nvguards"], "ok": ["ck", "loc", "mot", "nt", "Ok", "ro", "err", "mod", "p", "mp", "ask", "rc", "arc", "full", "status", "info", "par", "og", "bo", "ic", "res", "o", "kw", "ko", "fail", "rec", "ob", "ind", "log", "ms", "ax", "ready", "bc", "f", "valid", "ot", "bit", "check", "obj", "msg", "ch", "it", "ol", "app", "boot", "ku", "ll", "OK", "good", "oc", "id", "k", "os", "op", "md", "ik", "comp", "ack", "ick"], "b": ["a", "n", "bf", "d", "p", "g", "w", "bg", "z", "bd", "bi", "wb", "bm", "ic", "o", "be", "bh", "br", "f", "bc", "bool", "t", "B", "bb", "bit", "bt", "ch", "cb", "l", "y", "k", "ik", "bs"], "max_w": [" Max_w", "Max_w", "max_wd", "max_W", " Max_W", "Max_wd", "Max_W", "Max_wp", " Max_rw", "max_width", "Max_width", "max_rw", " max_W", "max_wp", " max_width"], "h": ["history", "ht", "th", "sh", "kh", "p", "hal", "dh", "w", "hs", "r", "z", "m", "ih", "zh", "rh", "http", "o", "ah", "host", "eh", "bh", "go", "hl", "hp", "gh", "t", "oh", "ha", "ch", "he", "hr", "hd", "q", "ho", "hh", "id", "u", "k", "y", "hi", "hm"]}}
{"code": "h,n=map(int,input().split())\\nab=[list(map(int,input().split())) for _ in range(n)]\\nmx=max(a for a,b in ab)\\ndp=[10**10]*(h+1+mx)\\ndp[0]=0\\nfor i in range(1,h+1+mx):\\n  dp[i]=min(dp[i-a]+b for a,b in ab)\\nprint(min(dp[h:]))", "target": "41", "substitutes": {"h": ["history", "ht", "sh", "x", "kh", "p", "g", "hz", "hal", "w", "hs", "c", "m", "z", "ih", "zh", "hei", "o", "H", "hid", "ah", "host", "bh", "go", "uh", "f", "hl", "hp", "t", "v", "oh", "each", "his", "ph", "ha", "ch", "he", "hr", "high", "hd", "q", "l", "hh", "j", "y", "k", "hi", "hm"], "n": ["nr", "N", "x", "ni", "nt", "ln", "d", "p", "ne", "sn", "r", "c", "w", "m", "ns", "o", "nl", "num", "t", "nia", "len", "nb", "mn", "v", "nc", "nm", "nu", "nn", "l", "np", "j", "k", "y", "nd"], "ab": ["abe", "sb", "ex", "emb", "hab", "ib", "abl", "xa", "abi", "abet", "fab", "AB", "pb", "rab", "rb", "Ab", "ob", "abb", "ax", "abs", "abulary", "abled", "tab", "nb", "acl", "bb", "av", "ad", "al", "ap", "lab", "at", "af", "aka", "obar", "abc", "eb", "app", "am", "ar", "ub", "op", "bs", "abis", "ac"], "_": ["x", " y", " j", " k", " o", "ox", " name", " all", "ix", "val", " x", " l", "A", " w", " __", " index", " p", " v", " un", "ay", "ac"], "mx": ["tm", "mi", "mr", "x", "max", "modules", "mm", "mu", "xes", "hz", "aus", "MX", "windows", "sys", "mos", "ma", "m", "ml", "ns", "mas", "xml", "bm", "mind", "tp", "mb", "ms", "ax", "mis", "mc", "mac", "mn", "mic", "vm", "nz", "cp", "xs", "wm", "size", "px", "md", "cm", "mt", "mk"], "a": ["aq", "x", "ia", "ae", "aj", "d", "p", "on", "ana", "ach", "va", "ai", "xa", "ak", "w", "c", "ma", "m", "z", "ica", "o", "ea", "pa", "la", "ax", "t", "alpha", "da", "apa", "na", "an", "v", "e", "ad", "al", "ap", "A", "ao", "sa", "s", "ha", "he", "af", "au", "oa", "base", "aa", "l", "am", "ar", "le", "u", "ka", "j", "index", "ij", "ba", "ca", "ac"], "b": ["sb", "x", "d", "p", "g", "w", "r", "c", "m", "z", "bi", "wb", "fb", "bo", "be", "pa", "bh", "br", "f", "bc", "t", "B", "bb", "v", "e", "an", "another", "s", "bl", "l", "u", "y", "bs", "ba", "ca", "ac"], "dp": ["pkg", "dos", "pm", "dm", "d", "p", "db", "vp", "dial", "jp", "td", "deep", "dh", "dl", "fp", "pb", "gp", "tp", "decl", "dt", "df", "xd", "dc", "dep", "isp", "pt", "DP", "wp", "lp", "pd", "dr", "tap", "cp", "deb", "lip", "bps", "dx", "dq", "dd", "dj", "np", "px", "pp", "ds", "ps", "bs"], "i": [" ii", "mi", "xi", "x", "ci", "p", " j", "di", "ai", "I", "r", "c", "m", "z", "bi", "ic", "o", "f", "t", "si", "li", "ii", "v", "ti", "im", "it", "s", "zi", "ui", "q", "l", "pi", "u", "j", "y", "k", "index", "ij", "iu", "hi"]}}
{"code": "n = int(input())\\n\\ns = []\\nfor i in range(n):\\n  s.append(input())\\n  \\nno = False\\n\\ns_1 = s[1::]\\n\\nfor i, c in enumerate(s):\\n  if s.count(c) > 1:\\n    no = True\\n    \\n  if i < len(s)-1:\\n    c_1 = s_1[i]\\n    if c[-1] != c_1[0]:\\n      no = True\\n      \\nif no == True:\\n  print('No')\\nelse:\\n  print('Yes')", "target": "218", "substitutes": {"n": ["nr", "N", "nt", "ln", "d", "p", "ne", "sn", "m", "ns", "nl", "f", "num", "count", "t", "nia", "len", "nb", "mn", "na", "v", "nc", "nan", "size", "nn", "l", "number", "np", "ng", "k", "j"], "s": ["a", "sb", "ys", "seconds", "ats", "js", "p", "fs", "ts", "m", "ns", "ies", "rs", "ses", "ins", "less", "ms", "ers", "ls", "gins", "b", "abs", "t", "S", "ss", "parts", "its", "tes", "strings", "gs", "sq", "ws", "ims", "sv", "ashes", "sa", "ches", "times", "xs", "ands", "sts", "sports", "cs", "os", "es", "changes", "ds", "ps", "bs"], "i": ["a", "mi", "ki", "xi", "x", "ci", "gi", "p", "on", " j", "di", "ai", "I", "iter", "m", "bi", "yi", "qi", "by", "ix", "ic", "o", "ip", "ind", "f", "b", "si", "li", "ii", "ji", "v", "ti", "im", "it", "zi", "ini", "q", "l", "pi", "ati", "id", "y", "k", "j", "index", "ik", "ij"], "no": ["too", "to", "ro", "mo", "mm", "name", "run", "ne", "po", "nothing", "this", " yes", "zero", "start", "type", "total", "bo", "some", "o", "warning", "default", "ko", "No", "go", "NO", "eno", " No", "news", "io", "lo", "pos", "na", "cos", "none", "nos", "co", "oo", "do", "dis", "then", "yes", "number", "orno", "error", "good", "pro", "stop"], "s_1": ["c_3", "c_2", "qs_2", "s_2", "s_l", "qs_0", "s_3", "c_0", "qs_1", "qs_l", "s_0"], "c": ["ec", "a", "ce", "lc", "con", "x", "gc", "cont", "p", "d", "cd", "g", "xc", "ct", "rc", "r", "m", "fc", "ic", "o", "col", "h", "f", "b", "bc", "t", "mc", "dc", "vc", "sc", "v", "e", "nc", "cin", "ch", "cc", "co", "cb", "cu", "l", "cl", "cs", "k", "cm", "cr", "cf", "ca", "C", "ac"], "c_1": ["c_3", "cs_3", "c_2", "c__1", "c_8", "ce_key", "ce_1", "ce_r", "c_key", "cs_2", "cs_1", "ce_8", "cs_0", "c_0", "c__r", "c__8", "c_r", "c__key"]}}
{"code": "s=input()\\nt=input()\\nans=int(len(s))\\nfor i in range(len(s)-len(t)+1):\\n    now=int(0)\\n    for j in range(len(t)):\\n        if s[i+j]!=t[j]:\\n            now+=1\\n    ans=min(now,ans)\\nprint(ans)", "target": "526", "substitutes": {"s": ["a", "n", "sb", "x", "sw", "str", "ats", "js", "d", "p", "g", "fs", "r", "hs", "sys", "c", "ts", "z", "m", "ns", "us", "rs", "ins", "sl", "h", "ms", "ls", "f", "b", "sp", "S", "ss", "si", "its", "v", "gs", "sq", "sa", "st", "sv", "sts", "l", "q", "cs", "os", "qs", "ds", "ps", "bs"], "t": ["tm", "n", "T", "nt", "str", "ta", "p", "d", "table", "g", "test", "ct", "tw", "r", "tc", "txt", "c", "ts", "m", "wt", "te", "o", "dt", "f", "b", "pt", "ot", "tes", "tu", "v", "bt", "at", "tt", "tr", "st", "rt", "it", "q", "l", "tmp", "ent", "mat", "y"], "ans": ["ars", "ANS", "ants", "ats", "ians", "ean", "ano", "outs", "aus", "sn", "aned", "ns", "ann", "rans", "rs", "anas", "ks", "ins", "wan", "ons", "ms", "amps", "annot", "ls", "pan", "ents", "ens", "anc", "mn", "na", "an", "can", "anks", "oss", "aps", "sv", "nas", "oa", "aos", "vs", "arts", "cs", "os", "es", "anos", "lan", "AN", "ds", "said"], "i": ["\u00ed", "mi", "ki", "xi", "ia", "uri", "ie", "ci", "gi", "ir", "g", "di", "I", "bi", "ami", "yi", "iti", "ic", "ip", "ind", "si", "iu", "li", "ii", "v", "ei", "ti", "im", "it", "ini", "q", "pi", "id", "y", "iat", "ij", "ik", "iri", "hi"], "now": ["next", "hold", "onew", "sw", "before", "always", "aj", "we", "long", "seed", "current", "age", "set", "wait", "full", "old", "since", "window", "save", "gm", "ms", "ready", "sp", "asp", "time", "temp", "just", "wa", "force", "off", "ws", "when", "gen", "app", "here", "today", "pres", "NOW", "new", "then", "tmp", "mem", "aw", "ait", "Now", "ay", "after", "ow"], "j": ["a", "n", "x", "ia", "uj", "ja", "ie", "js", "d", "p", "aj", "g", "jp", "r", "jc", "oj", "z", "m", "c", "jj", "o", "ind", "jl", "fr", "b", "f", "je", "si", "J", "bj", "li", "ji", "v", "kj", "jas", "it", "q", "l", "dj", "k", "y", "ij"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\nsys.setrecursionlimit(10 ** 9)\\n\\ndef main():\\n    X = int(input())\\n    if X >= 30:\\n        print('Yes')\\n    else:\\n        print('No')\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "371", "substitutes": {"input": ["next", "mot", "str", "select", "insert", "run", "get", "human", "connect", "inc", "raw", "txt", "password", "focus", "read", "step", "output", "f", "config", "fn", "poll", "feed", "conf", "pull", "Input", "int", " inspect", "string", "upload", "print", " Input", "q", "reader", "sample", "enter", "paste", "edit", "data", "index", "text", "init", "request"], "X": ["IX", "N", "x", "T", "TX", "I", "EX", "L", "TY", "MX", "UX", "OX", "AX", "FE", "ZX", "XY", "V", "XP", "S", "DX", "ONE", "J", "Q", "G", "A", "FX", "AY", "XX", "XT", "D", "Y", "XL", "K", "AC", "F", "Z", "C"]}}
{"code": "n,a,b=map(int,input().split())\\nmi=a*(n-1)+b\\nma=b*(n-1)+a\\nprint(max(0,ma-mi+1))", "target": "395", "substitutes": {"n": ["N", "x", "max", "nt", "d", "p", "names", "ne", "g", "i", "sn", "c", "m", "z", "ns", "o", "h", "f", "num", "t", "nb", "no", "mn", "na", "v", "nc", "nm", "s", "nu", "nn", "l", "q", "np", "pi", "j", "y", "k"], "a": ["aq", "ia", "ae", "ab", "aff", "p", "ach", "g", "ai", "i", "ate", "c", "m", "z", "ata", "ga", "o", "la", "act", "abs", "alpha", "apa", "add", "an", "e", "A", "al", "at", "sa", "app", "au", "oa", "aa", "l", "am", "ar", "j", "k", "area", "ba", "ca", "ac"], "b": ["sb", "x", "bf", "ab", "d", "p", "db", "g", "ib", "i", "r", "bg", "c", "m", "z", "bi", "fb", "rb", "bm", "by", "o", "h", "be", "ob", "f", "br", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "s", "base", "cb", "l", "u", "j", "y", "ub", "bs", "ba"], "mi": ["ia", "ni", "me", "mid", "ci", "mini", "mm", "di", "ai", "i", "m", "ami", "em", "my", "umi", "mas", "Mi", "wi", "pa", "ms", "mis", "si", "mn", "li", "ti", "mic", "sa", "mite", "mia", "mie", "pi", "MI", "hi"], "ma": ["max", "ia", "me", "ta", "mu", "mm", "mmm", "ema", "m", "my", "mad", "mas", "total", "ga", "hea", "mb", "pa", "la", "ms", "fa", "mar", "mis", "mc", "si", "da", "wa", "mma", "apa", "na", "MA", "sa", "ha", "Ma", "base", "aa", "phi", "pi", "ka", "eta", "ca"]}}
{"code": "s = list(input())\\nans = 0\\nfor i in range(1, len(s)):\\n    if s[i] != s[i-1]:\\n        ans += 1\\nprint(ans)", "target": "655", "substitutes": {"s": ["a", "n", "sb", "su", "ats", "js", "p", "fs", "hs", "c", "ts", "m", "ns", "ies", "rs", "input", "tests", "less", "ins", "h", "ms", "ls", "abs", "b", "sp", "ents", "t", "S", "ss", "parts", "als", "its", "tes", "strings", "e", "gs", "sq", "list", "sa", "sv", "xs", "sts", "cs", "os", "qs", "ds", "ps"], "ans": ["ANS", "ants", "ats", "ians", "ean", "anon", "acs", "outs", "ai", "urs", "ros", "aus", "aned", "san", "ns", "ann", "rans", "rs", "ums", "anas", "ks", "man", "wan", "ons", "ms", "amps", "anned", "pan", "ents", "ens", "cons", "can", "an", "rors", "anks", "iann", "anes", "oss", "sv", "ran", "ams", "aos", "nas", "ads", "cs", "arts", "lan", "AN"], "i": ["mi", "ki", "n", "ogi", "x", "xi", "ci", "gi", "di", "I", "batch", "bi", "qi", "yi", "ix", "ic", "ski", "ip", "ms", "ind", "si", "li", "key", "ii", "v", "ori", "ji", "ti", "oi", "im", "it", "mys", "zi", "ini", "ui", "\u0438", "q", "pi", "id", "j", "index", "fi", "ij", "iri", "hi"]}}
{"code": "#ABC-120-A\\nA, B, C = map(int, input().split())\\nans = 0\\nwhile B >= A:\\n    B -= A\\n    ans += 1\\n    if ans == C:\\n        break\\n        \\nprint(ans)", "target": "64", "substitutes": {}}
{"code": "N, X = map(int,input().split())\\nm = [int(input()) for _ in range(N)]\\nX -= sum(m)\\na = min(m)\\nprint(N + X//a)\\n", "target": "10", "substitutes": {"N": ["CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "NW", "Ns", "I", "R", "NA", "L", "NM", "NN", "NP", "NR", "NT", "NH", "H", "NF", "V", "Z", "NUM", "S", "B", "J", "Q", "ND", "Num", "P", "A", "D", "NB", "Y", "MN", "Ni", "K", "F", "TN", "C"], "X": ["M", "x", "IX", "T", "NS", "TX", "R", "I", "L", "MX", "UX", "H", "W", "O", "V", "S", "XP", "DX", "XM", "B", "J", "Q", "G", "P", "A", "E", "XX", "D", "XXX", "Y", "U", "K", "F", "Z", "C", "Xi"], "m": ["tm", "mi", "M", "n", "x", "mr", "perm", "um", "d", "p", "mm", "mu", "mo", "mp", "g", "i", "c", "ma", "mut", "mad", "man", "bm", "min", "gm", "ms", "b", "mis", "t", "mc", "mac", "mn", "v", "all", "sm", "mx", "l", "mem", "mat", "met", "cm", "mt"], "_": [" t", " j", " ex", " pre", " row", " g", " long", " bit", " l", " time", " __", " each", " code", " mill", " co", " p", " un", " sub", " ge"], "a": ["n", "x", "ia", "sta", "ae", "ab", "ta", "p", "ai", "xa", "i", "c", "ma", "z", "ga", "o", "aux", "ea", "pa", "la", "b", "alpha", "da", "apa", "an", "A", "sa", "ao", "au", "aa", "am", "j", "area", "ca"]}}
{"code": "N, K = map(int, input().split())\\nA = list(map(int, input().split()))\\nF = list(map(int, input().split()))\\n\\nA.sort()\\nF.sort(reverse=True)\\n\\ndef check(mid):\\n    cnt = 0\\n    for i in range(N):\\n        tmp = mid // F[i]\\n        cnt += max(A[i] - tmp, 0)\\n    return cnt <= K\\n\\ncheck(2)\\n\\nl, r = -1, 10**30\\nwhile r-l > 1:\\n    mid = (l+r)//2\\n    if check(mid):\\n        r = mid\\n    else:\\n        l = mid\\n\\nprint(r)\\n", "target": "633", "substitutes": {"N": ["M", "n", "NS", "T", "NC", "Ns", "R", "I", "X", "L", "NA", "NN", "NP", "NR", "NT", "W", "H", "V", "No", "S", "B", "J", "Q", "G", "ND", "Num", "P", "D", "NB", "Y", "Ni", "Z", "C"], "K": ["Total", "MAX", "M", "T", "KY", "KR", "MK", "Max", "R", "X", "I", "L", "KK", "H", "W", "FK", "V", "KS", "PK", "NK", "S", "B", "J", "Q", "G", "P", "D", "NB", "Y", "OK", "k", "AN", "Z", "KE", "C"], "A": ["a", "GA", "M", "All", "An", "IA", "Ar", "Alpha", "AU", "AT", "R", "X", "Av", "L", "NA", "AL", "AV", "I", "AB", "App", "AE", "H", "AA", "LA", "As", "V", "AI", "C", "AS", "S", "B", "This", "P", "CA", "MA", "AF", "AM", "Y", "SA", "U", "AC", "AN", "Array", "Z", "BA", "AP"], "F": ["FF", "M", "T", "SF", "FO", "R", "I", "X", "L", "RF", "Fi", "FE", "W", "H", "O", "V", "f", "GF", "EF", "B", "IF", "Q", "J", "P", "FA", "WF", "FU", "E", "PF", "FB", "AF", "D", "FG", "Y", "DF", "FM", "Fs", "MF", "UF", "CF", "FN", "C"], "mid": ["rid", "tm", "mi", "led", "mr", "cmp", "max", "to", "perm", "lim", "nt", "kl", "middle", "mod", "lt", "ln", "x", "mm", "sub", "med", "mmm", "long", "n", "m", "pad", "low", "min", "res", "gm", "ms", "val", "term", "ind", "mer", "trans", "mask", "f", "multi", "wid", "t", "line", "lower", "lo", "pid", "li", "grid", "ID", "msg", "orig", "partial", "high", "pi", "le", "rand", "id", "Mid", "phi", "lat", "pl", "md", "mt", "hi", "mk", "nd"], "cnt": ["CNT", "Cnz", "cnz", "cNT", "cnc", "cct", "crnc", "crpt", "ctnc", "ctount", "nNT", "ctpt", "nnt", "count", " cNT", " cct", " cnc", "ctnt", "cunt", "Cct", " cnz", "cpt", "crnt", " count", "cuNT", "nount", "Cnt", " cpt", "crount", "Count", "nct", "cuct", "cunz"], "i": ["a", "mi", "n", "xi", "x", "gi", "p", "di", "I", "c", "m", "batch", "bi", "ic", "ix", "ip", "ind", "f", "b", "t", "multi", "ri", "si", "sim", "li", "ii", "ji", "v", "ori", "ti", "s", "it", "zi", "ini", "ui", "q", "pi", "id", "k", "index", "j", "ij"], "tmp": ["tm", "cmp", "max", "perm", "nt", "p", "mp", "test", "this", "tc", "txt", "pre", "m", "mut", "img", "prime", "ctx", "ip", "cv", "sp", "t", "pretty", "part", "nb", "temp", "v", "Temp", "emp", "MP", "ptr", "orig", "tt", "cp", "obj", "xy", "clip", "cb", "etc", "np", "yy", "attr", "meg", "mk", "nd"], "l": ["lc", "n", "lu", "lf", "tl", "kl", "ln", "d", "p", "ld", "lt", "ul", "g", "left", "lb", "L", "long", "c", "m", "ml", "dl", "el", "low", "nl", "sl", "h", "ls", "f", "b", "t", "lo", "lp", "li", "v", "lv", "lr", "ll", "le", "pl", "j", "lin"], "r": ["nr", "n", "mr", "sr", "x", "kr", "rr", "ro", "err", "d", "p", "g", "R", "rc", "re", "w", "c", "m", "z", "rh", "rs", "rb", "res", "h", "result", "vr", "f", "b", "fr", "br", "ri", "t", "rl", "dr", "v", "e", "red", "ur", "s", "rt", "lr", "hr", "q", "rand", "u", "ar", "k", "rn", "j", "er", "range", "cr", "rate", "ry", "rd"]}}
{"code": "def resolve():\\n    n, k = map(int, input().split())\\n    ans = k * ((k-1) ** (n-1))\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    resolve()", "target": "582", "substitutes": {"n": ["N", "nt", "gn", "ln", "d", "p", "en", "ne", "cn", "g", "i", "sn", "c", "m", "z", "ns", "o", "h", "num", "t", "nb", "mn", "na", "v", "nc", "un", "nan", "nu", "nn", "q", "l", "ll", "np", "j"], "k": ["ck", "km", "ki", "kn", "kr", "kh", "kl", "ijk", "p", "g", "ak", "ke", "kid", "c", "m", "dk", "ks", "kw", "ko", "h", "kb", "kok", "mc", "kj", "ker", "ikk", "ku", "q", "wk", "kk", "sk", "ka", "K", "ik", "j", "kg", "mk"], "ans": ["con", "ANS", "ants", "ats", "ians", "\u00e1n", "ana", "aus", "san", "aned", " Ans", "ns", "ann", "rans", "mas", "man", "anas", "ks", "scan", "ins", "ons", "ms", "annot", "ls", "pan", "ens", "cas", "cons", "mn", "can", "an", "gs", "iann", "anks", "anes", "works", "ran", "ams", "ands", "aos", "os", "lan"]}}
{"code": "s = input()\\nsf = s[:int((len(s)-1)/2)]\\nsl = s[int((len(s)+3)/2)-1:]\\nif s == s[::-1] and sf == sf[::-1] and sl == sl[::-1]:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "420", "substitutes": {"s": ["a", "n", "sb", "sh", "x", "ys", "str", "ats", "js", "d", "p", "g", "fs", "i", "r", "hs", "us", "c", "ts", "m", "south", "ns", "z", "w", "rs", "ins", "h", "ms", "ls", "f", "b", "sp", "abs", "t", "S", "ss", "si", "its", "v", "gs", "sq", "ws", "sa", "sv", "xs", "sts", "l", "sis", "q", "cs", "se", "qs", "ds", "bs"], "sf": ["sy", "sb", "sr", "lf", "su", "SF", "bf", "aff", "fm", "igm", "fs", "hs", "f", "df", "sp", "sen", "ss", "si", "sil", "bj", "fw", "sq", "fx", "rf", "sm", "sa", "ssl", "sv", "so", "tf", "sts", "fy", "sd", "fg", "cs", "se", "sk", "fi", "rn", "tif", "cf", "xf", "isf"], "sl": ["sle", "sb", "sr", "sh", "sw", "tl", "kl", "ln", "SL", "Sl", "sn", "ml", "ly", "dl", "zh", "nl", "la", "ls", "sp", "hl", "ss", "si", "sil", "fl", "li", "sm", "sa", "ssl", "sv", "so", "bl", "l", "pl", "ll", "sd", "se", "fi", "isl"]}}
{"code": "s = input()\\neven, odd = [], []\\nfor i in range(len(s)):\\n    if i%2:\\n        odd.append(s[i])\\n    else:\\n        even.append(s[i])\\ne = list(set(odd))\\no = list(set(even))\\nif('L' in o or 'R' in e):\\n    print('No')\\nelse:\\n    print('Yes')", "target": "686", "substitutes": {"s": ["a", "n", "sb", "self", "str", "ats", "js", "d", "p", "r", "c", "ts", "z", "ses", "ins", "less", "sl", "h", "ms", "ties", "ls", "abs", "b", "sp", "t", "S", "ss", "parts", "its", "tes", "strings", "gs", "sq", "ws", "sa", "sv", "so", "csv", "sts", "l", "simple", "se", "os", "stats", "qs", "ds", "ps", "bs"], "even": ["vel", "a", "net", "x", "single", "d", "vert", "on", "required", "own", "left", "ven", "human", "zero", "down", "daily", "dl", "floor", "el", "only", "Even", "change", "page", "result", "ind", "ew", "main", "art", "front", "ded", "both", "wrong", "up", "red", "ten", "normal", "update", "straight", "none", "ell", "opp", "partial", "public", "dx", "new", "div", "one", "patch", "l", "ll", "won", "turn", "pl", "drawn", "nd", "draw", "rough", "rd"], "odd": ["ical", " odds", "any", "nt", " Odd", "dds", "d", "ror", "dir", "own", "ows", "td", "zero", "down", "diff", "od", "pad", "dev", "ant", "back", "ob", "ind", "t", "ow", "part", "auto", "art", "initial", "ot", "off", "unknown", "ded", "out", "both", "det", "ad", "all", "red", "ended", "normal", "end", "other", "ed", "div", "three", "won", "dd", "ent", "error", "az", "drawn", "nd", "draw", "opp"], "i": ["\u00ed", "mi", "a", "n", "xi", "x", "ci", "gi", "ta", "p", "vi", "di", "ai", "I", "r", "m", "bi", "yi", "ic", "ski", "ix", "ip", "ri", "si", "li", "ii", "v", "ori", "ti", "oi", "iy", "it", "im", "zi", "ui", "ini", "q", "l", "pi", "phi", "j", "y", "index", "ik", "ij", "iri"], "e": ["ec", "a", "n", "x", "ex", "ae", "ie", "me", "d", "p", "ne", "r", "pe", "el", "te", "ea", "ye", "be", "oe", "b", "t", "eu", "ee", "de", "eq", "E", "ed", "et", "one", "l", "le", "u", "se", "ele", "es", "er", "y"], "o": ["a", "n", "sw", "d", "p", "oor", "po", "g", "w", "r", "ox", "m", "od", "og", "el", "bo", "wo", "h", "O", "ob", "of", "oe", "ew", "t", "io", "no", "lo", "ot", "oth", "out", "ost", "om", "ou", "ong", "co", "oa", "do", "oo", "et", "l", "dd", "os", "y", "ow"]}}
{"code": "N = int(input())\\ncount = [0,1]\\nif N == 1:\\n  print(1)\\n  exit()\\nfor i in range(2,N+1):\\n  digit = len(str(i))\\n  head = int(str(i)[0])\\n  tail = int(str(i)[-1])\\n  plus = 0\\n  if digit == 1:\\n    plus=1\\n  elif digit == 2:\\n    if head == tail:\\n      plus = 3\\n    elif head>tail and tail>0:\\n      plus = 2\\n  elif tail>0:\\n    for j in range(digit-2):\\n      plus += 10**j*2\\n    if head == tail:\\n      mid = str(i)[1:-1]\\n      while len(mid)>1 and mid[0]=='0':\\n        mid = mid[1:]\\n      mid = int(mid)\\n      plus += 2*mid+1\\n      plus += 2\\n    elif head > tail:\\n      plus += 10**(digit-2)*2\\n  count.append(count[-1]+plus)\\nprint(count[N])\\n      \\n", "target": "168", "substitutes": {"N": ["SN", "M", "n", "NS", "T", "NL", "NC", "GN", "NI", "R", "I", "X", "L", "NA", "NM", "Number", "NN", "NR", "CN", "NT", "NOR", "O", "V", "SIZE", "No", "NO", "TN", "NUM", "S", "NE", "B", "J", "Q", "G", "Num", "P", "E", "D", "NB", "Y", "Size", "MN", "Ni", "K", "F", "Z", "FN", "C"], "count": ["history", "next", "find", "n", "comment", "call", "summary", "nt", "consider", "stat", "table", "cd", "cycle", "score", "test", "code", "ct", "ount", "start", "length", "c", "report", "weight", "status", "info", "total", "log", "result", "ind", "num", "check", "add", "list", "cache", "hash", "flag", "found", "print", "detail", "size", "counter", "q", "number", "Count", "index", "range", "dict", "rate", "trace", "sum"], "i": ["a", "mi", "n", "xi", "x", "ia", "gi", "p", "di", "ai", "I", "iter", "c", "m", "ic", "ix", "o", "ip", "f", "b", "t", "ri", "si", "li", "ii", "v", "e", "int", "ti", "im", "s", "it", "ini", "ui", "l", "pi", "phi", "id", "y", "k", "ij", "iu", "hi"], "digit": ["header", "feature", "digital", "major", "ln", "d", "figure", "significant", "got", "unsigned", "day", "iter", "inc", "uni", "position", "unit", "man", "prime", "dec", "format", "upper", "term", "result", "tag", "fix", "num", "dat", "vol", "alpha", "integer", "dig", "valid", "character", "doi", "bit", "pid", "tin", "int", "cin", "date", "it", "char", "factor", "dimension", "uint", "letter", "div", "dim", "dot", "number", "origin", "pin", "rand", "du", "mat", "bin", "float", "did", "git", "actor", "basic", "init", "version", "chain"], "head": ["ck", "top", "body", "n", "header", "th", "self", "before", "mit", "nt", "gate", "d", "loop", "hen", "name", "run", "hang", "iter", "length", "foot", "old", "man", "window", "min", "h", "host", "ind", "tag", "ax", "len", "art", "da", "front", "off", "dr", "pos", "don", "style", "headed", "int", "red", "Head", "it", "end", "he", "high", "heads", "hd", "then", "origin", " heads", "id", "link", "HEAD", "root", "back", "start"], "tail": ["alt", "rot", "body", "stop", "header", "lt", "lead", "table", "loop", "tails", "unc", "hang", "iter", "long", "zero", "tip", "length", "append", "buffer", "foot", "unit", "prime", "gt", "term", "tag", "limit", "t", "unt", "len", "lo", "nil", "ail", "out", "null", "bit", "int", "list", "det", "pull", "tt", "it", "end", "lock", "size", "then", "ll", "fat", "il", "timeout", "endif", "link", "tailed", "shell", "index", "fixed", "last", "sum"], "plus": ["a", "n", "x", "sign", "p", "mp", "us", "dev", "bo", "log", "limit", "part", "Plus", "e", "star", "fx", "cos", "multipl", "pl", "wx", "sw", "positive", "more", "g", "prom", "full", "status", "dash", "accept", "step", "case", "pos", "poly", "ho", "u", "stats", "d", "raw", "pad", "hex", "add", "up", "dot", "pi", "ps", "ge", "ex", "minus", "name", "long", "inc", "zero", "w", "push", "diff", "prime", "success", "quick", "go", "fill", "ups", "gen", "one", "profile", "yes", "xx", "copy", "px", "hi", "sum"], "j": ["json", "n", "uj", "js", "aj", "g", "jp", "job", "oj", "jc", "z", "jj", "prime", "tri", "pr", "ind", "jl", "f", "b", "J", "bj", "kj", "ji", "v", "un", "obj", "xy", "jump", "char", "div", "q", "dj", "y", "k", "ij"], "mid": ["rid", "loc", "mi", "mers", "mr", "mit", "max", "mor", "lim", "middle", "mod", "mini", "major", "nom", "mm", "pard", "sub", "mp", "med", "uid", "long", "m", "mad", "man", "min", "tri", "ms", "val", "dem", "ind", "trans", "mer", "mask", "multi", "wid", "part", "len", "mac", "lower", "mn", "bid", "lo", "pid", "int", "partial", "mil", "dim", "line", "rand", "lat", "id", "Mid", "mem", "mat", "md", "member", "mouse", "hi", "mk", "nd", "start"]}}
{"code": "r = int(input())\\n\\nprint(r*r)", "target": "787", "substitutes": {"r": ["n", "mr", "x", "sr", "pair", "rr", "self", "rg", "d", "p", "ret", "g", "R", "rc", "i", "re", "w", "c", "m", "rd", "rs", "rb", "res", "h", "rec", "pr", "result", "f", "b", "t", "dr", "v", "e", "rf", "rt", "lr", "q", "l", "u", "k", "rad"]}}
{"code": "def resolve():\\n    n = int(input())\\n    a = sorted(map(int, input().split()))\\n\\n    cost = float(\"INF\")\\n    mn = 0\\n    mx = a[-1]\\n    for aa in a[:-1]:\\n        tmp = abs(mx - aa * 2)\\n        if tmp < cost:\\n            cost = tmp\\n            mn = aa\\n    print(mx, mn)\\n\\n\\nif __name__ == \"__main__\":\\n    resolve()\\n", "target": "207", "substitutes": {"n": ["N", "x", "nt", "p", "names", "name", "cn", "i", "sn", "c", "m", "ns", "total", "fn", "num", "count", "t", "nb", "na", "v", "nc", "nm", "nu", "nn", "l", "j", "k"], "a": ["x", "sta", "ae", "ac", "ab", "ta", "p", "ana", "va", "ai", "xa", "i", "c", "ma", "m", "ata", "eas", "ga", "ea", "aaa", "fa", "abs", "b", "t", "wa", "apa", "na", "an", "att", "A", "ap", "at", "sa", "s", "ao", "au", "oa", "am", "aw", "ba", "ca"], "cost": ["stop", "con", "race", "max", "need", " Cost", "err", "spread", "score", "cycle", "ct", "scale", "weight", "length", "map", "total", "min", "step", "const", "term", "mean", "config", "ctr", "time", "fac", "count", "mc", "cons", "force", "conf", "CO", "check", "cal", "hop", "cos", "charge", "tt", "st", "cp", "needed", "Cost", "co", "req", "gain", "cast", "size", "fee", "best", "mem", "loss", "ack", "pay", "risk", "start"], "mn": ["mi", "nr", "mr", "mus", "km", "ni", "men", "wn", "gn", "nom", "ln", "mm", "mu", "mp", "norm", "cn", "dn", "typ", "nic", "mos", "m", "ml", "ns", "my", "bm", "mind", "rm", "ms", "fn", "mis", "mc", "dr", "nc", "nm", "nz", "inn", "wm", "van", "nn", "mun", "np", "MN", "mem", "md", "cm", "mint"], "mx": ["tm", "mi", "mus", "mr", "x", "nr", "km", "pm", "mo", "mu", "mm", "mp", "cn", "MX", "sys", "ma", "ml", "m", "ox", "my", "total", "obs", "mind", "res", "cpu", "ms", "tx", "ax", "main", "fn", "mc", "mac", "memory", "xy", "tt", "nz", "xs", "vm", "wm", "ll", "mem", "mat", "phys", "px", "md", "mt", "cm", "mk", "ac"], "aa": ["aq", " ii", "ia", "ac", "ava", "ta", "aba", "ana", "va", "ai", "NA", " sa", " AA", "\u00e1", " da", "ma", " av", "ica", "ita", " aid", " ah", "ea", "AA", "pa", "aaa", "fa", "isa", "\u00e4", " ac", " ba", "apa", " pa", " ta", "na", " acc", "all", "A", "qa", "af", "sa", "aaaa", "aka", " fa", " va", "oa", "ya", "eta", " na", "ao"], "tmp": ["tm", "top", "pkg", "cmp", "before", "perm", "nt", "offset", "mm", "beta", "mp", "trip", "tv", "test", "short", "sup", "tc", "txt", "pre", "m", "unit", "mut", "prefix", "prime", "tp", "snap", "term", "abs", "sp", "t", "time", "trap", "temp", "dust", "sq", "qq", "emp", "obj", "msg", "tt", "cp", "multipl", "tf", "rt", "tar", "needed", "new", "xy", "opp", "opt", "etc", "np", "timeout", "attr", "mk", "frac"]}}
{"code": "a,b=map(int,input().split())\\nList = []\\nA = 0\\nfor i in range(1,1000):\\n  A +=i\\n  List.append(A)\\nK = b - a -1\\neast = List[K]\\nres = east - b\\nprint(res)", "target": "653", "substitutes": {"a": ["n", "x", "ia", "ae", "ab", "p", "w", "r", "c", "ma", "m", "ea", "aaa", "f", "t", "alpha", "an", "e", "v", "al", "at", "sa", "s", "au", "aa", "l", "am", "u", "k", "y", "ba", "ac"], "b": ["n", "bf", "ab", "d", "p", "beta", "g", "ib", "r", "w", "c", "m", "z", " B", "bi", "fb", "rb", "north", "h", "be", "br", "bc", "t", "nb", "B", "bb", "v", "e", "ch", "eb", "ed", "l", "u", "k", "y", "j", "es", "bound", "bs", "ba"], "List": ["Vo", "Int", "All", "Print", "LIST", "Parent", "Instance", "Right", "Log", "Queue", "Copy", "Result", "I", "L", "Map", "Next", "Res", "And", " list", "Block", "Pl", "Full", "Bl", "Group", "Local", "Less", "Set", "Node", "V", "Table", "Rest", "Listener", "Out", "Found", "Pool", "Part", "Num", "list", "Added", "Index", "ists", "With", "Library", "St", "Left", "Root", "Lock", "Collection", "Array", "Now", "Data"], "A": ["GA", "M", "N", "Ax", "T", "Am", "An", "Ar", "Alpha", "Instance", "AU", "R", "I", "Av", "L", "One", "AV", "And", "AB", "AE", "H", "AA", "As", "V", "AI", "AR", "Ah", "B", "G", "This", "Part", "Address", "AP", "P", "HA", "CA", "At", "E", "Array", "AF", "Y", "Count", "SA", "AC", "The", "EA", "Amount", "C"], "i": ["mi", "ki", "n", "xi", "x", "\u00ed", "gi", "d", "p", "di", "ai", "I", "c", "m", "bi", "ic", "ix", "ip", "t", "si", "ii", "li", "ji", "v", "e", "int", "zi", "q", "l", "pi", "k", "y", "j", "ij", "Xi"], "K": ["KO", "Ak", "M", "N", "T", "KR", "R", "I", "X", "L", "KK", "H", "W", "V", "KS", "PK", "Kent", "S", "B", "J", "Q", "SK", "G", "P", "Ka", "E", "D", "Y", "k", "F", "Z", "KA", "C"], "east": ["ce", "west", " e", "ra", "d", "en", "ret", "ne", "re", "r", "w", "ma", "south", " East", "el", "Asia", "north", "ea", "elt", "ew", "East", "Ye", "eu", "de", "e", "E", "eng", "end", "erg", "Green", "ed", "et", "aw", "South", "k", "range", "es", "er", "se", " ge"], "res": ["resolution", "err", "resh", "ret", "reset", "R", "re", "Res", "r", "ref", "resources", "rem", "status", "rh", "total", "RE", "RES", "success", "ms", "result", "rel", "ress", "resource", "response", "results", "resp", "out", "release", "gr", "eng", "rez", "req", "pres", "rand", "reg", "range", "pro"]}}
{"code": "a,b,c,d,e,f = map(int, input().split())\\ns_max = f*e//(e+100)\\nw_max = f//100\\n\\ns=[]\\nw=[]\\n\\nmax = 0\\nans = [100*a,0]\\nfor i in range(s_max//c+1):\\n    for j in range(s_max//d+1):\\n        if c*i + d*j <= s_max:\\n            s.append(c*i + d*j)\\n\\nfor i in range(w_max//a+1):\\n    for j in range(w_max//b+1):\\n        if 0<a*i + b*j <= w_max:\\n            w.append(a*i + b*j)\\n\\nfor i in range(len(s)):\\n    for j in range(len(w)):\\n        if s[i]/(w[j]*100+s[i])<=e/(e+100) and s[i]/(w[j]*100+s[i])>=max and w[j]*100+s[i]<=f:\\n            max = s[i]/(w[j]*100+s[i])\\n            ans = [w[j]*100+s[i],s[i]]\\n\\nprint(ans[0],ans[1])\\n", "target": "6", "substitutes": {"a": ["aq", "n", "x", "ae", "ac", "ab", "ra", "aj", "ta", "p", "era", "g", "va", "ai", "r", "ma", "m", "ga", "o", "ea", "h", "la", "aaa", "t", "da", "wa", "eu", "v", "an", "A", "al", "at", "sa", "af", "ao", "app", "oa", "au", "aa", "l", "am", "ar", "u", "y", "area", "ba", "ca"], "b": ["n", "sb", "ab", "bar", "p", "db", "beta", "g", "ib", "r", "m", "z", "bi", "fb", "rb", "by", "o", "h", "be", "ob", "br", "bc", "nb", "B", "bb", "v", "eb", "cb", "l", "bp", "u", "y", "k", "ub", "bs", "ba"], "c": ["ec", "ce", "lc", "n", "x", "cat", "ci", "p", "unc", "cd", "g", "cn", "ct", "rc", "r", "tc", "m", "z", "fc", "ic", "o", "h", "bc", "t", "dc", "conf", "v", "cp", "ch", "cc", "com", "co", "cu", "cb", "l", "u", "cs", "k", "y", "cm", "cr", "ca", "C", "ac"], "d": ["den", "n", "x", "str", "p", "dm", "db", "dir", "g", "di", "dh", "r", "m", "z", "bd", "dev", "dom", "o", "h", "ind", "dt", "t", "dc", "dat", "dep", "da", "ord", "dr", "v", "de", "ad", "dp", "D", "div", "dis", "dim", "l", "dd", "du", "u", "sd", "y", "ds", "nd"], "e": ["ec", "n", "x", "ae", "ie", "xe", "p", "en", "ue", "g", "r", "m", "el", "o", "te", "h", "be", "oe", "t", "eu", "ee", "v", "ei", "de", "E", "ed", "et", "l", "le", "u", "se", "es", "y", "er"], "f": ["fd", "n", "x", "p", "g", "fs", "sf", "r", "z", "m", "fc", "full", "fb", "fff", "o", "h", "fa", "ef", "t", "fe", "fr", "ff", "v", "q", "l", "u", "y", "fi", "float", "F", "xf"], "s_max": ["s2ma", " s_size", " s_ma", "s2min", "s_full", "w_ma", "w2right", "s_range", "s_size", "w_min", "s_right", "w2min", "s2max", "s_MAX", "s_min", " s_min", "s_base", " s_full", "w2max", "w2ma", "w_right", "s_ma", "s2right"], "w_max": ["watbase", "watdefault", "wa_max", "zostonmax", "wostonMAX", "zostonMAX", "watscale", "wostonmode", "w2default", "w_default", "w___cap", "z_med", "w_cap", "z_default", "wa_default", "w_med", "w2cap", "wtscale", "z_base", "zostonbase", "w_ax", "w_scale", "wa_scale", "w_last", "wtmax", "w___ax", "wostonbase", "w2ax", "wtbase", "watmax", "w_mode", "z_mode", "w___default", "wb_max", "w2max", "z_MAX", "wa_base", "w_MAX", "z_last", "zostonmode", "wb_default", "wostonmax", "w_base", "wb_ax", "w___max", "z_max", "wtdefault", "wb_cap"], "s": ["n", "sb", "sw", "ys", "aws", "services", "ats", "js", "p", "eds", "g", "r", "us", "ts", "z", "m", "ns", "ies", "items", "hs", "rs", "ess", "ties", "ins", "sl", "h", "ers", "ms", "ls", "sp", "ids", "t", "S", "ss", "its", "tes", "als", "strings", "gs", "v", "sq", "ws", "des", "sa", "sv", "xs", "so", "ims", "sts", "l", "vs", "sd", "cs", "se", "es", "y", "stats", "changes", "qs", "ds", "ps", "bs"], "w": ["wx", "ht", "sw", "x", "p", "g", "tw", "wh", "we", "wt", "r", "wine", "weight", "z", "wb", "wr", "window", "iw", "wat", "rw", "o", "W", "wd", "kw", "wo", "h", "wi", "way", "wal", "word", "t", "wl", "weights", "wa", "wp", "fw", "v", "exp", "ws", "hw", "ww", "rew", "wm", "nw", "wk", "l", "q", "aw", "u", "words", "y", "temp"], "max": ["MAX", "con", "master", "x", "ex", "lim", "mod", "Max", "p", "name", "head", "med", "ext", "r", "scale", "ma", "m", "ox", "full", "map", "mad", "total", "min", "box", "res", "default", "h", "ms", "act", "ax", "limit", "right", "t", "force", "ver", "conf", "ff", "out", "can", "v", "final", "cos", "maximum", "rest", "end", "mx", "dx", "lock", "size", "q", "dot", "pi", "rand", "u", "id", "range", " Max", "sum"], "ans": ["ars", "ANS", "ians", "ats", "ants", " means", "outs", "aus", "ros", "aned", " Ans", "ts", "ns", "anus", "ann", "ums", "rs", "rans", "ks", "anas", "offs", "ins", "ras", "ons", "ms", "amps", "angs", "ls", "ens", "ations", "weights", "anc", "akens", "orders", "uns", "cons", "an", "posts", "anks", "rors", "aps", "ws", "anes", "oss", "ares", "nan", "xs", "uploads", "ions", "uls", "nas", "ands", "ran", "arts", "es", "os", "lan", "asms", "AN", "ones"], "i": ["mi", "ki", "\u00ed", "xi", "x", "ia", "uri", "ni", "ie", "ite", "ql", "ci", "gi", "ir", "cli", "name", "di", "ib", "ai", "I", "iter", "this", "m", "bi", "ami", "status", "qi", "info", "iti", "ic", "o", "ix", "ip", "iri", "ri", "io", "si", "iv", "li", "ii", "ji", "v", "int", "ti", "oi", "key", "list", "iy", "im", "it", "zi", "ui", "ini", "\u0438", "phi", "pi", "il", "u", "item", "id", "y", "ij", "ik", "iu", "hi"], "j": ["json", "n", "jack", "x", "uj", "ja", "js", "aj", "vert", "ret", "g", "di", "test", "jp", "rev", "job", "r", "oj", "jc", "z", "m", "jj", "bi", "ev", "note", "o", "ix", "by", "res", "h", "pr", "jl", "dt", "je", "br", "fr", "rel", "io", "pt", "si", "iv", "J", "ion", "bj", "li", "ji", "v", "kj", "key", "jas", "obj", "adj", "im", "tr", "it", "jump", "jo", "lock", "q", "l", "dj", "u", "id", "y", "k", "jit", "ij"]}}
{"code": "h, w, k = map(int, input().split())\\nS = [list(input()) for i in range(h)]\\n\\nans = [[0 for i in range(w)] for j in range(h)]\\ncnt = 1\\nno_sb = ['.' for i in range(w)]\\nno_sb_row = []\\n\\nfor i in range(h):\\n    flag = True\\n    if S[i] == no_sb:\\n        no_sb_row.append(i)\\n    else:\\n        for j in range(w):\\n            if S[i][j] == '#' and flag:\\n                flag = False\\n            elif S[i][j] == '#':\\n                cnt += 1\\n            ans[i][j] = cnt\\n        cnt += 1\\n\\nfor row in no_sb_row:\\n    for i in range(row+1, h):\\n        if i not in no_sb_row:\\n            ans[row] = ans[i]\\n            break\\n    else:\\n        for j in range(row-1, -1, -1):\\n            if j not in no_sb_row:\\n                ans[row] = ans[j]\\n                break\\n\\nfor a in ans:\\n    print(*a)\\n", "target": "165", "substitutes": {"h": ["history", "ht", "n", "th", "x", "sh", "kh", "p", "head", "g", "hz", "html", "r", "hs", "c", "m", "z", "ih", "zh", "rh", "hei", "o", "H", "f", "b", "hl", "v", "height", "his", "hw", "ha", "s", "ch", "he", "hr", "hd", "q", "l", "ho", "hh", "y", "hi"], "w": ["ht", "n", "wx", "x", "sw", "th", "wn", "d", "p", " W", "wh", "we", "wt", "r", "wed", "z", "m", "wb", "wr", "iw", "rw", "W", "wd", "wal", "ew", "wl", "win", "wa", "wp", "v", "width", "ws", "hw", "ww", "s", "nw", "l", "y", "hi"], "k": ["km", "n", "max", "kr", "d", "p", "g", "r", "c", "m", "z", "ks", "o", "kw", "f", "b", "num", "t", "key", "v", "e", "ok", "q", "u", "id", "ka", "K"], "S": ["Save", "M", "N", "NRS", "NS", "T", "ANS", "SF", "SH", "An", "Series", "Sin", "BS", "SS", "Ns", "SB", "R", "X", "I", "L", "Sl", "PS", "Si", "SL", "Su", "SI", "CS", "TS", "Set", "GES", "ons", "As", "SQL", "V", "Ins", "GS", "ss", "Changes", "States", "B", "states", "G", "P", "A", "s", "sv", "SU", "DS", "Ps", "SA", "AN", "Spe", "C"], "i": ["mi", "\u00ed", "n", "xi", "x", "ia", "ki", "uri", "ni", "ie", "ql", "ci", "gi", "ir", "on", "di", "ai", "I", "ili", "aci", "r", "c", "bi", "yi", "info", "iti", "ic", "o", "ix", "ip", "iri", "ri", "io", "si", "li", "ii", "ji", "ei", "ori", "int", "ti", "oi", "im", "it", "s", "zi", "ini", "ui", "\u0438", "phi", "pi", "il", "l", "ati", "id", "index", "y", "ij", "ik", "iu", "hi"], "ans": ["ars", "ANS", "nt", "ants", "ats", "ians", "beans", "An", "ana", "bs", "outs", "ows", "xa", "helps", "aus", "asks", "san", " Ans", "ns", "ann", "rans", "rs", "ums", "anas", "ks", "offs", "ins", "eas", "ras", "mas", "ons", "ms", "angs", "amps", "ls", "ids", "ens", "ots", "ss", "uns", "an", "posts", "anks", "anes", "aps", "des", "s", "xs", "ions", "nas", "ams", "aos", "ands", "aints", "ads", "cs", "ags", "os", "es", "asms", "AN", "ds", "ones", "orts", "said"], "j": ["json", "n", "x", "uj", "ja", "js", "aj", "p", "on", "g", "jp", "job", "r", "jc", "oj", "z", "c", "jj", "bi", "el", "ju", "o", "let", "jl", "fr", "b", "je", "jac", "f", "ot", "J", "bj", "li", "ji", "v", "kj", "jas", "obj", "adj", "it", "jump", "bl", "q", "l", "dj", "y", "ij"], "cnt": ["conct", "CNT", "cNT", "cnc", "acct", "cct", "ccount", "ncst", "conNT", "lcnt", "acNT", "ncnc", "acnt", "ccct", "acst", "count", " cNT", "ccNT", "Cnc", "acnc", "acpt", " cct", "ccnt", "conpt", " cnc", "Cct", "cpt", "ncnt", " count", "cst", "ncount", "Cnt", "lcnc", " cpt", "Count", "lcst", " cst", "connt", "Cst", "lcct"], "no_sb": ["no_sf", "no_sa", "no___rb", " no_db", " no_sa", "no___sb", "no_cb", " no_SB", "no_SB", " no_cb", "no_db", "no_rb", "no___sf", "no___SB", " no_rb", " no_sf"], "no_sb_row": ["no_sf_cell", "no_sb_rows", "no_cb_row", "no_cb_rows", "no_sb_block", "no_sb_cell", "no_sf_line", "no_rb_col", "no_sf_col", "no_sf_block", "no_sb2col", "no_sb2line", "no_cb_ry", "no_sf_rows", "no_sb_entry", "no_sb_Row", "no_rb_Row", "no_rb_row", "no_sb2row", "no_rb_rows", "no_sb_line", "no_sb_col", "no_sb2rows", "no_sb_ry", "no_cb_col", "no_sf_row", "no_sf_entry"], "flag": ["arg", "hold", "state", "offset", "ld", "sign", "code", "store", "weight", "age", "set", "condition", "status", "only", "FLAG", "lag", "nl", "const", "ground", "func", "flags", "ind", "mask", "act", "tag", "f", "cmd", "level", "count", "bool", "cond", "sp", "Flag", "force", " Flag", "bit", "style", "lv", "group", "line", "id", "link", "fire", "ag", "fact", "sync", "field"], "row": ["th", "x", "sw", "to", "ro", "ie", "ja", "ir", "p", "column", "head", "order", "day", "ows", "ior", "ai", "server", "rc", "r", "cell", "ox", "c", "batch", "ire", "bo", "page", "wi", "ix", "res", "col", "wd", "ind", "go", "right", "br", "root", "ri", "io", "record", "lo", "pos", "key", "li", "e", "post", "tr", "node", "co", "Row", "rown", "roll", "line", "rows", "id", "index", "y", "ij", "hi", "ry", "ow"], "a": ["ars", "n", "ia", "ae", "ja", "ants", "ta", "aj", "p", "ana", "va", "acs", "xa", "ai", "aus", "c", "ma", "z", "ann", "ga", "o", "la", "pa", "acts", "b", "ations", "wa", "an", "A", "ap", "aps", "aces", "sa", "s", "au", "oa", "aos", "aa", "am", "aw", "ar", "area", "ba", "ca", "ao"]}}
{"code": "import math\\nn=int(input())\\ndef koch(d,p1,p2):\\n\tif d==0:\\n\t\treturn\\n\ts=[0,0]\\n\tt=[0,0]\\n\tu=[0,0]\\n\ts[0]=2/3*p1[0]+1/3*p2[0]\\n\ts[1]=2/3*p1[1]+1/3*p2[1]\\n\tt[0]=1/3*p1[0]+2/3*p2[0]\\n\tt[1]=1/3*p1[1]+2/3*p2[1]\\n\tu[0]=s[0]+(t[0]-s[0])*math.cos(math.pi/3)-(t[1]-s[1])*math.sin(math.pi/3)\\n\tu[1]=s[1]+(t[0]-s[0])*math.sin(math.pi/3)+(t[1]-s[1])*math.cos(math.pi/3)\\n\tkoch(d-1,p1,s)\\n\tprint(*s)\\n\tkoch(d-1,s,u)\\n\tprint(*u)\\n\tkoch(d-1,u,t)\\n\tprint(*t)\\n\tkoch(d-1,t,p2)\\nprint(0,0)\\nkoch(n,[0,0],[100,0])\\nprint(100,0)\\n", "target": "280", "substitutes": {"n": ["a", "N", "x", "net", "nt", "p", "norm", "g", "cn", "i", "long", "sn", "r", "c", "z", "m", "ns", "o", "nl", "h", "b", "fn", "num", "nb", "na", "v", "nc", "nan", "nu", "nn", "l", "pi", "k", "y"], "d": ["fd", "a", "x", "self", "to", "dos", "dm", "p", "ld", "dir", "db", "di", "day", "dn", "g", "i", "dh", "r", "c", "m", "z", "dl", "diff", "dec", "ind", "dt", "done", "f", "b", "dy", "dat", "dc", "days", "df", "da", "dr", "pd", "v", "e", "de", "ad", "dp", "dx", "D", "new", "do", "dq", "q", "l", "dd", "sd", "did", "du", "id", "k", "data", "ds", "draw"], "p1": [" papp", " pone", "form1", "pointapp", "formb", "P4", "pageif", "per1", "perone", " p0", "pm91", "d1", "d91", "peranta", "par", "pr91", "pre2", "pp1", "p91", "P3", "pmone", "Par", " panta", "page1", "prear", "pointb", "pp2", "done", "perif", "p0", "pone", "pif", " pb", "pre1", "formapp", "point1", "p3", "P1", " p3", "p4", "pr1", "prone", "formone", "pp4", "pp3", "pageone", "pageanta", "papp", "pointone", " p4", " par", "pp0", "P0", "panta", "pm1", "pb", "P2", " pif"], "p2": ["lp2", " ptwo", "point102", "pptwo", "P4", "lp12", " pog", "p42", " patter", "t2", "t1", " p8", "pcog", "pall", "pp1", "point2", "P3", "opall", "ppatter", "p102", "pp2", "pog", "t8", "pa2", "lp42", "p3", "P1", "lp3", " p3", "lpall", "p4", " p102", "pa42", "pp4", "ptwo", " p4", "pp3", "p8", "P12", "port2", "lp1", " p12", "pc102", "pointog", "patter", "ping8", "porttwo", "ping2", "ping1", "p12", "portatter", "op2", "paall", "P2", "op42", "pc2"], "s": ["a", "sb", "x", "sw", "ys", "su", "str", "ats", "ports", "js", "p", "spec", "eds", "g", "i", "fs", "us", "r", "sys", "c", "ts", "m", "ns", "ies", "rs", "ins", "less", "sl", "h", "ms", "ers", "ls", "f", "b", "sp", "S", "ss", "si", "als", "tes", "its", "sc", "strings", "gs", "sq", "ws", "st", "xs", "ims", "ashes", "sa", "sv", "sts", "l", "sd", "cs", "se", "os", "es", "stats", "qs", "ds", "ps", "bs"], "t": ["tm", "a", "ut", "ht", "ty", "T", "to", "nt", "ta", "p", "g", "test", "ct", "tw", "qt", "i", "td", "r", "tc", "wt", "c", "ts", "m", "txt", "z", "type", "total", "tools", "gt", "o", "te", "tp", "tree", "h", "tal", "dt", "tg", "b", "time", "unt", "pt", "ot", "tu", "v", "att", "e", "all", "at", "tt", "it", "tr", "tf", "rt", "st", "tar", "q", "l", "tmp", "ent", "mat", "j", "y", "tz", "temp", "target"], "u": ["ut", "lu", "su", "um", "p", "mu", "util", "ul", "ue", "g", "i", "uid", "us", "r", "uv", "c", "wt", "m", "bo", "o", "pu", "f", "unt", "uc", "ot", "eu", "tu", "v", "ru", "un", "ou", "ur", "it", "ui", "uf", "au", "nu", "cu", "user", "k", "uu", "U", "iu"]}}
{"code": "#m = int(input())\\nn, m = map(int, input().split())\\n#al = list(map(int, input().split()))\\n#al=[list(input()) for i in range(n)]\\nswitch = []\\nkl = []\\nfor i in range(m):\\n    temp = list(map(int, input().split()))\\n    kl.append(temp[0])\\n    switch.append(temp[1:])\\npl = list(map(int, input().split()))\\n# print(switch)\\n\\npattern = [[0 for _ in range(n)] for _1 in range(2**n)]\\nfor i in range(2**n):\\n    for j in range(n):\\n        if ((i >> j) & 1):  # \u4e8c\u9032\u6570i\u306e\u4e0b\u304b\u3089\u6570\u3048\u3066j\u6841\u76ee\u304c1\u304b\u5426\u304b\\n            pattern[i][j] = 1\\n\\nans = 0\\nfor ptnum, spt in enumerate(pattern):\\n    islit = True\\n    for lightnum in range(m):\\n        count = 0\\n        for s in switch[lightnum]:\\n            if spt[s-1] == 1:\\n                count += 1\\n        if count % 2 != pl[lightnum]:\\n            islit = False\\n            break\\n    if islit:\\n        ans += 1\\nprint(ans)\\n", "target": "546", "substitutes": {}}
{"code": "input();a=list(map(int,input().split()));print(['No','Yes'][max(a)<(sum(a)-max(a))])", "target": "70", "substitutes": {"a": ["n", "x", "sta", "ava", "ab", "d", "p", "g", "xa", "i", "r", "c", "ma", "m", "set", "ata", "eas", "ga", "o", "ea", "la", "aaa", "fa", "abs", "b", "f", "t", "alpha", "da", "out", "na", "an", "exp", "all", "A", "up", "al", "at", "sa", "ao", "au", "ed", "oa", "aa", "l", "am", "u", "index", "array", "ba"]}}
{"code": "import sys\\n\\ndef bubbleSort(x_list, y):\\n  a = 0\\n  flag = 1\\n  while flag:\\n    flag = 0\\n    for i in range(1, y):\\n      j = y - i\\n      if x_list[j] < x_list[j - 1]:\\n        x_list[j], x_list[j - 1] = x_list[j - 1], x_list[j]\\n        flag = 1\\n        a += 1\\n  return a\\n\\ny = sys.stdin.readline()\\ny = int(y)\\n\\nx = sys.stdin.readline()\\nx_list = x.split(\" \")\\n\\nfor i in range(y):\\n  x_list[i] = int(x_list[i])\\n\\na = bubbleSort(x_list, y)\\n\\nfor k in range(0, y):\\n  print x_list[k],\\nprint\\nprint a", "target": "561", "substitutes": {"x_list": ["xi_lists", "xmllist", " x_num", "x_path", "xi2listed", "x_LIST", "X_record", "x2set", "x67list", "X_list", " x_spec", "xi_list", "x_spec", " x2lists", "ix_listed", "x7list", "x_test", " x_lists", " x_del", "ix7test", "x_record", "ix7list", "x_queue", " x_set", " x2list", "X_dict", "x7lists", "x7record", "x2string", "x2del", "x2list", "tx_lists", "x_table", "tx_List", "x2lists", "x___list", "tx_list", "rx_LIST", "ix_list", "x_string", "x_dict", "x67ls", "ix_path", "x2listed", "rx_string", "x___listed", "x_num", " x_pool", "x2pool", "x___path", "xi2lists", "x7test", "x7listed", "xmlqueue", " x_listed", " x_table", " x_List", "x_listed", "x_pool", "X_List", "tx_spec", "xmllists", "x_set", "x_List", " x_ls", "ix7path", "x_reverse", "x7path", " x_level", "rx_List", " x_LIST", "x___test", "ix_test", "x2LIST", "x7del", "x2spec", "xi2queue", " x2pool", "x7pool", "x2List", "x7dict", "x_ls", "xi2list", "x67level", "x_del", "rx_list", "x_lists", "xi_listed", " x2del", "xmllisted", "ix7listed", "xi_queue", "x_level", " x_reverse", "x2queue", "x7List"], "y": ["sy", "n", "ty", "ys", "yd", "ym", "p", "yer", "g", "wy", "cy", "oy", "sys", "yo", "c", "z", "m", "ies", "my", "ny", "yi", "vy", "o", "ye", "py", "h", "yr", "sky", "b", "axy", "t", "yout", "yl", "uy", "e", "yn", "ey", "gy", "iy", "xy", "ch", "yt", "year", "yy", "Y", "pi", "ya", "ay", "ry"], "a": ["n", "ia", "ae", "ac", "arity", "aj", "ta", "action", "p", "ach", "d", "g", "ai", "ak", "value", "xa", "w", "c", "ma", "m", "z", " A", "ata", "o", "ea", "la", "result", "act", "f", "b", "t", "alpha", "da", "wa", "an", "e", "v", "all", "A", "ap", "al", "at", "af", "sa", "it", "s", "new", "au", "ed", "oa", "aa", "l", "am", "ar", "u", "index", "data", "ag", "area", "ca"], "flag": ["hold", "dirty", "label", "state", "err", "offset", "action", "g", "code", "ai", "store", "age", "set", "wait", "status", "only", "type", "save", "lag", "nl", "agged", "success", "flags", "mask", "done", "f", "tag", "limit", "bool", "count", "cond", "no", "valid", "Flag", "force", "list", "ad", "all", "af", "sa", "debug", "group", "new", "lock", "good", "error", "id", "again", "ag", "sort", "join", "field", "start"], "i": ["mi", "ki", "n", "xi", "ia", "ie", "ci", "gi", "p", "di", "ai", "I", "m", "z", "bi", "yi", "ic", "ix", "o", "ip", "ind", "f", "b", "t", "si", "li", "ii", "ji", "v", "e", "int", "ti", "iy", "im", "it", "s", "zi", "ini", "\u0438", "l", "pi", "id", "index", "ij", "ik", "iu"], "j": ["json", "n", "uj", "ja", "str", "err", "js", "aj", "p", "ret", "g", "jp", "job", "oj", "jc", "z", "m", "jj", "note", "ju", "res", "pr", "ind", "jl", "fr", "b", "br", "f", "t", "je", "jac", "J", "bj", "out", "ji", "kj", "exp", "v", "obj", "adj", "it", "Ja", "jump", "q", "dj", "index", "ij", "jit"], "x": ["wx", "xi", "ex", "xe", "p", "xes", "xc", "X", "xa", "rx", "w", "c", "ox", "ml", "z", "xxxx", "xt", "xml", "xxx", "ix", "tx", "ax", "xd", "v", "e", "fx", "xy", "xs", "xx", "lat", "lex", "px", "xp", "xf"], "k": ["ck", "km", "ki", "n", "alk", "kn", "kr", "kh", "kl", "ijk", "kin", "p", "kar", "ak", "ke", "kid", "c", "m", "isk", "kw", "ko", "tk", "t", "key", "kj", "v", "it", "ikk", "ark", "ku", "kat", "kt", "u", "kk", "id", "sk", "ka", "K", "ik", "kan", "ket", "unk"]}}
{"code": "n=int(input())\\ns=[0]*n\\nfor i in range(n):\\n  s[i]=int(input())\\ns.sort()\\nans=sum(s)\\ntemp=0\\nif ans%10==0:\\n  for i in range(n):\\n    if s[i]%10==0:\\n      temp=temp+1\\n    else:\\n      print(ans-s[i])\\n      break\\n  if temp==n:\\n    print(0)\\nelse:\\n  print(ans)", "target": "741", "substitutes": {"n": ["a", "nr", "N", "net", "x", "nt", "gn", "ln", "d", "p", "names", "ne", "cn", "g", "sn", "r", "c", "w", "m", "z", "ns", "total", "o", "nl", "h", "f", "b", "num", "t", "nia", "len", "nb", "no", "mn", "na", "an", "v", "nc", "nan", "nu", "size", "nn", "l", "number", "np", "q", "pi", "network", "ng", "j", "k", "y", "init"], "s": ["a", "sb", "ys", "ogs", "prints", "services", "ats", "ants", "js", "p", "actions", "eds", "fs", "items", "c", "ts", "m", "ns", "rs", "ses", "ins", "ers", "ms", "ls", "ents", "abs", "b", "ids", "t", "S", "ss", "parts", "its", "tes", "strings", "e", "gs", "sq", "aps", "aces", "sa", "sv", "xs", "times", "sts", "rates", "sis", "cs", "os", "stats", "qs", "ds", "ps", "bs"], "i": ["mi", "ki", "xi", "x", "ia", "gu", "ci", "gi", "p", "vi", "di", "ai", "I", "m", "batch", "bi", "yi", "info", "iti", "ic", "o", "ix", "ip", "iri", "ind", "multi", "ri", "io", "si", "li", "ii", "ji", "v", "e", "ori", "ti", "ei", "iy", "im", "it", "zi", "ini", "ui", "\u0438", "phi", "pi", "j", "y", "index", "ij", "ik", "iu"], "ans": ["ones", "ars", "ANS", "ants", "ats", "ians", "actions", "names", "eds", "outs", "acs", "ai", "aus", "ts", "ns", "ann", "anas", "ks", "ins", "ons", "ms", "amps", "ls", "pan", "ents", "ens", "ations", "uns", "an", "gs", "un", "terms", "xs", "times", "ions", "ams", "aos", "vs", "yes", "aints", "cs", "arts", "es", "os", "AN", "ps"], "temp": ["tm", "max", "mod", "ta", "nom", "mm", "p", "mp", "test", "this", "cell", "tc", "txt", "pre", "ts", "set", "current", "buffer", "condition", "status", "c", "total", "tim", "wr", "prime", "generated", "output", "result", "term", "t", "ps", "fac", "dat", "stem", "pt", "cum", "count", "out", "v", "adjusted", "Temp", "emp", "ptr", "Temperature", "now", "tmp", "pi", "mem", "there", "j", "cel", "tem", "mint", "perature", "sum"]}}
{"code": "# -*- coding: utf-8 -*-\\nimport sys\\nsys.setrecursionlimit(10**9)\\nINF=10**18\\nMOD=10**9+7\\ninput=lambda: sys.stdin.readline().rstrip()\\nYesNo=lambda b: bool([print('Yes')] if b else print('No'))\\nYESNO=lambda b: bool([print('YES')] if b else print('NO'))\\nint1=lambda x:int(x)-1\\n\\ndef main():\\n    N,C=map(int,input().split())\\n    l=[]\\n    for i in range(N):\\n        l.append(list(map(int,input().split())))\\n    l.sort(key=lambda t:(t[2],t[1]))\\n    a=[0]*(10**5+1)\\n    ss,tt,cc=-1,-1,-1\\n    for s,t,c in l:\\n        if s==tt and c==cc:\\n            a[tt]+=1\\n            a[t]-=1\\n        else:\\n            a[s-1]+=1\\n            a[t]-=1\\n        ss,tt,cc=s,t,c\\n    ans=0\\n    tmp=0\\n    for x in a:\\n        tmp+=x\\n        ans=max(ans,tmp)\\n    print(ans)\\n            \\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "632", "substitutes": {}}
{"code": "a = int(input())\\nprint('ABC') if a < 1000 else print('ABD')", "target": "636", "substitutes": {"a": ["n", "sta", "to", "ae", "ava", "ab", "aff", "ta", "d", "p", "va", "ai", "xa", "i", "c", "ma", "z", "ita", "ga", "pa", "la", "fa", "f", "b", "t", "alpha", "da", "ua", "amount", "na", "an", "A", "sa", "aka", "sha", "oa", "au", "aa", "am", "area", "ba", "ca", "ac"]}}
{"code": "import math\\n\\nN, A, B = map(int, input().split())\\nV = list(map(int, input().split()))\\n\\n# print(N, A, B, V)\\n\\nV.sort(reverse=True)\\n\\nmax_list = V[:A]\\nmax_sum = sum(max_list)\\nprint(max_sum / A)\\n\\nreplace = max_list[-1]\\n\\nnum_replace = 0\\nfor v in V:\\n    if v == replace:\\n        num_replace += 1\\n\\nif num_replace == 1:\\n    print(1)\\n    exit()\\n\\nnum_replace_in_list = 0\\nfor v in max_list:\\n    if v == replace:\\n        num_replace_in_list += 1\\n\\nif replace * A != max_sum:\\n    ans = math.factorial(num_replace) // (math.factorial(num_replace - num_replace_in_list) * math.factorial(num_replace_in_list))\\n    print(ans)\\n    exit()\\n\\n\\nans = 0\\nfor i in range(A, B + 1):\\n    if i > num_replace:\\n        break\\n    ans += math.factorial(num_replace) // (math.factorial(num_replace - i) * math.factorial(i))\\n\\nprint(ans)\\n", "target": "345", "substitutes": {"N": ["M", "n", "NS", "T", "II", "Ns", "R", "I", "L", " n", "NN", "NP", "H", "O", "S", "J", "Q", "G", " C", "P", "E", "D", "Y", "Ni", "F", "Z", "C"], "A": ["a", "M", "T", "Al", "An", "Ar", "AT", "R", "I", "AB", "H", "AA", "AR", "S", "J", "G", "P", "HA", "CA", "Y", "K", "AC", "BA", "AN", "C"], "B": ["M", "T", "Al", "Bs", "R", "X", "I", "L", "AB", "AA", "b", "S", "BC", "J", "G", "P", "BB", "D", "Y", "BF", "DB", "BA", "Beta", "Z", "C"], "V": ["M", "T", "Va", "NV", "R", "X", "I", "L", "VS", "W", "H", "O", "VC", "S", "J", "Q", "G", "v", "P", "E", "D", "Y", "U", "K", "F", "Z", "C"]}}
{"code": "A, B = input().split()\\nB = B.replace('.', '')\\n\\nA, B = list(map(int, [A, B]))\\n\\nans_b = A*B\\n\\nprint(int(ans_b//100))\\n", "target": "44", "substitutes": {"A": ["GA", "M", "Ax", "Al", "An", "IA", "Ar", "Alpha", "AH", "AU", "AT", "X", "I", "ACC", "L", "One", "AL", "Area", "AV", "AB", "App", "AE", "RA", "H", "LA", "AA", "As", "AI", "AR", "C", "AS", "EA", "OA", "G", "This", "HA", "Input", "P", "CA", "At", "You", "E", "AF", "TA", "D", "AM", "SA", "AC", "ACT", "BA", "The", "Array", "AN", "AP"], "B": ["Other", "LB", "BI", "N", "CB", "T", "BL", "VB", "BS", "OB", "Bs", "SB", "L", "Two", "IB", "AB", "BER", "Be", "V", "BT", "C", "b", "BE", "BC", "Bar", "S", "J", "Q", "BR", "WB", "GB", "G", "BB", "Ber", "Bern", "FB", "TB", "D", "Base", "NB", "ON", "BO", "Y", "EB", "BF", "DB", "BA", "BY", "Blue"], "ans_b": ["anscessj", "ans_B", "ans_j", "anshedj", "anscessbeta", " ans_beta", "ans_a", "anshedB", "an_b", "ans2d", "anshedb", "anshedbeta", "anscessB", "anscessb", "ans_beta", " ans_B", "ans_d", "ans2a", "an_B", " ans_j", "ans2b", "an_a", "an_d", "ans2B"]}}
{"code": "def main():\\n    import sys\\n\\n    def input(): return sys.stdin.readline().rstrip()\\n    \\n    n, m = map(int, input().split())\\n    from heapq import heappop, heappush, heapreplace\\n    a = list(map(int, input().split()))\\n    from collections import Counter as cc\\n    a = cc(a)\\n    q = []\\n    for key in a:\\n        heappush(q, (key, a[key]))\\n    for i in range(m):\\n        b, c = map(int, input().split())\\n        now = b\\n        while q:\\n            num, cnt = q[0]\\n            if c <= num: break\\n            \\n            if now >= cnt:\\n                now -= cnt\\n                heappop(q)\\n            else:\\n                heapreplace(q, (num, cnt-now))\\n                now = 0\\n                break\\n        if now != b:\\n            heappush(q, (c, b-now))\\n    ans = 0\\n    for num, cnt in q:\\n        ans += num*cnt\\n    print(ans)\\n\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "711", "substitutes": {"n": ["N", "d", "p", "en", "g", "r", "z", "ns", "o", "h", "fn", "t", "count", "nb", "mn", "v", "an", "nu", "size", "l", "number", "j", "k", "y"], "m": ["tm", "mi", "km", "M", "N", "dm", "d", "p", "mm", "mu", "g", "r", "ma", "bm", "o", "gm", "h", "ms", "mis", "t", "mc", "mn", "v", "an", "nm", "sm", "l", "am", "y", "cm"], "a": ["x", "ia", "to", "ae", "sta", "ab", "d", "p", "ta", "ana", "g", "va", "w", " A", "ma", "z", "ata", "o", "aux", "ea", "pa", "aaa", "fa", "f", "t", " ca", "alpha", "na", "an", "e", "v", "A", "al", "obj", "at", "sa", "s", "aka", "oa", "au", "aa", "l", "am", "ar", "u", "y", "area", "ba", "ca", "ac"], "q": ["aq", "ck", "pkg", "x", "queue", "resh", "d", "p", "ue", "g", "iq", "qu", "qt", "quant", "ai", "ct", "requ", "r", "w", "z", " Q", "og", "query", "o", "ix", "gm", "h", "ip", "ms", "quick", "place", "f", "quit", "t", "Q", "out", "check", "v", "e", "sq", "all", "qq", "eq", "cache", "qa", "s", "it", "ch", "needed", "qual", "quire", "ve", "dq", "lock", "que", "quote", "line", "l", "u", "k", "quest", "j", "y", "qs", "pp", "pg", "quer"], "key": ["keys", "pkg", "x", "Key", "pair", "ie", "str", "p", "name", "KEY", "code", "value", "ke", "entry", "iter", "my", "info", "prefix", "type", "ice", "by", "ix", "te", "col", "ip", "case", "val", "pri", "count", "t", "cond", "v", "e", "int", "s", "it", "char", "new", "base", "item", "id", "j", "index", "y", "k", "sum"], "i": ["x", "ci", "d", "p", "I", "iter", "r", "z", "ix", "ip", "ind", "f", "li", "int", "im", "it", "l", "u", "id", "j", "y", "index", "k"], "b": ["bis", "bu", "sb", "bf", "ab", "d", "p", "g", "ib", "r", "bg", "w", "z", "bi", "wb", "pb", "ble", "fb", "rb", "bo", "h", "be", "br", "f", "bc", "t", "bool", "nb", "B", "bb", "v", "e", "bt", "s", "eb", "base", "cb", "l", "u", "j", "y", "k", "bs", "ba"], "c": ["ce", "lc", "con", "ci", "d", "p", "unc", "g", "ct", "code", "rc", "r", "w", "z", "o", "col", "h", "f", "bc", "count", "t", "cut", "e", "nc", "cp", "ch", "cc", "co", "cu", "cb", "l", "u", "cs", "k", "cr", "C", "ac"], "now": ["cmp", "buster", "store", "set", "old", "ms", "ob", "count", "wa", "na", "nc", "obj", "app", "new", "here", "then", "sc", "sw", "self", "on", "g", "test", "this", "time", "auto", "NOW", "handle", "tmp", "aw", "ay", "draw", "start", "ow", "next", "nt", "aj", "shift", "age", "wait", "result", "off", "pres", "hold", "sb", "always", "gc", "zero", "w", "current", "save", "gm", "ready", "t", "bb", "ver", "tn", "ws", "at", "when", "tt", "st", "node", "first", "gen", "j", "y", "Now", "after", "sum"], "num": ["con", "alph", "cmp", "th", "nt", "um", "nom", "p", "mu", "on", "en", "unc", "mult", "ct", "uni", "us", "ns", "ums", "umi", "ident", "total", "tim", "nam", "enum", "ann", "h", "count", "NUM", "t", "nb", "no", "cum", "mn", "non", "umer", "ord", "ot", "bn", "na", "out", "Num", "cal", "int", "nc", "nm", "un", "final", "om", "al", "msg", "new", "nu", "number", "mon", "np", "umber", "k", "index", "coord", "sum"], "cnt": ["dcount", "CNT", "uncn", "nctr", "cNT", "dcannot", "cn", "cnc", "acct", "cct", "Ctr", "nc0", "dcnt", "uncnt", "Cn", "pnt", "acNT", "ncnc", "Crt", "C0", "acnt", "p0", "ctr", "count", "Cnc", " cNT", "acst", "pNT", "crt", " cct", " cannot", "dcNT", " cnc", "pnc", "ncn", "ncNT", " crt", "Cct", "uncNT", "acount", " count", "ncnt", "cst", "unctr", "ncrt", "Cnt", "Count", "cannot", " cst", "Cannot", "Cst", "c0"], "ans": ["ones", "ars", "ANS", "ants", "ats", "actions", "names", "eds", "outs", "ows", "aus", "lines", "aves", "ns", "ann", "ums", "rs", "rans", "ks", "anas", "offs", "ins", "ons", "ms", "amps", "ls", "ids", "ents", "ens", "uns", "an", "posts", "gs", "anks", "aps", "oss", "ups", "eps", "s", "xs", "nan", "nas", "ands", "ads", "cs", "arts", "os", "stats", "ds", "ps", "orts", "olds", "vers"]}}
{"code": "N, A, B = map(int, input().split())\\nh = []\\nfor _ in range(N):\\n    h.append(int(input()))\\n\\nsum_h = sum(h)\\nsum_dam = B * N + (A - B)\\nng = (sum_h - 1) // sum_dam + 1 - 1\\nok = (max(h) - 1) // B + 1\\nans = (ng + ok + 1) // 2\\nwhile ok - ng > 1:\\n    cnt = ans\\n    flag = 0\\n    for h_i in h:\\n        rem = h_i - B * ans\\n        if rem > 0:\\n            cnt -= (rem - 1) // (A - B) + 1\\n            if cnt < 0:\\n                flag = 1\\n                break\\n    if flag == 0:\\n        ok = ans\\n    else:\\n        ng = ans\\n    ans = (ng + ok + 1) // 2\\n\\nprint(ans)\\n", "target": "51", "substitutes": {"N": ["M", "n", "NS", "T", "GN", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NR", "NT", "NH", "H", "W", "V", "TN", "NUM", "S", "J", "Q", "G", "ND", "P", "D", "NB", "Y", "Ni", "K", "F", "Z", "C"], "A": ["a", "GA", "M", "T", "Ax", "An", "IA", "AH", "AU", "AT", "R", "I", "L", "NA", "AV", "AB", "RA", "H", "AA", "V", "AI", "C", "AR", "AS", "S", "J", "G", "P", "CA", "JA", "AF", "D", "AM", "Y", "SA", "K", "AC", "BA", "AP"], "B": ["LB", "M", "BI", "T", "VB", "BS", "BL", "Bs", "SB", "R", "I", "L", "Two", "IB", "AB", "BW", "BG", "H", "W", "O", "V", "BT", "b", "S", "BC", "BE", "J", "Q", "GB", "G", "BR", "P", "BB", "BM", "E", "TB", "Bern", "D", "EB", "NB", "Y", "BO", "DB", "K", "F", "BA", "C"], "h": ["history", "ht", "n", "header", "sh", "kh", "p", "head", "hz", "i", "html", "hal", "w", "hs", "c", "hung", "m", "ih", "z", "rh", "help", "H", "ah", "igh", "bh", "b", "uh", "hl", "hp", "gh", "exp", "v", "hist", " H", "oh", "has", "his", "ph", "hash", "ha", "ch", "he", "hr", "hd", "ho", "l", "hh", "hi", "hm"], "_": [" j", " k", "__", "val", "j", "y"], "sum_h": ["sum64i", " sum_ih", "averagefuli", "averagefulH", " sum_H", "sumpyh", "sumfulH", "sumpyih", "sum64hi", "sum64h", "sum64H", "sumfulhi", " sum_ah", "sum__ih", "sum_H", "sum_hi", "sum__h", "average_hi", "sum_ah", "averagefulh", "sum__ah", "average_i", "sumpyah", "sumfulh", "sum__H", "sumpyH", "average_h", "sum_ih", "average_H", "sum_i", "averagefulhi", "sumfuli"], "sum_dam": ["sum_mass", "sum_man", " sum_iam", " sum_lam", " sum_mass", "sum_iam", " sum_man", "sum_n", "sum_lam", " sum_n"], "ng": ["next", "nr", "n", "png", "max", "gate", "sh", "sw", "nt", "wn", "gn", "resh", "ous", "ing", "ne", "ang", "g", "bg", "z", "ns", "wait", "sam", "og", "ny", "dev", "step", "ess", "res", "nl", "mb", "ms", "log", "sp", "amp", "win", "mn", "na", "exp", "nc", "gov", "eng", "nz", "eg", "now", "lang", "gen", "ong", "gz", "bl", "np", "rand", "hog", "reg", "index", "ung", "md", "org", "mg", "nd", "NG", "pg", "sc"], "ok": ["ck", "mot", "n", "ek", "max", "conn", "nt", "Ok", "ro", "err", "oks", "ous", "en", "ook", "ang", "iq", "ak", "i", "ox", "z", "od", "og", "ks", "step", "res", "o", "scan", "nl", "ko", "ms", "ob", "ind", "ax", "of", "ens", "mn", "ot", "off", "check", "sc", "an", "yn", "gov", "eq", "nz", "auth", "it", "ku", "yes", "OK", "good", "ov", "oc", "k", "op", "reg", "md", "ik", "os", "sk", "id", "org", "ack", "start"], "ans": ["ars", "n", "ANS", "ants", "ats", "ians", "gn", "An", "ous", "anon", " means", "was", "Ns", "outs", "aus", "span", "ros", "san", "aned", " Ans", "ts", "ns", "ann", "rans", "rs", "ums", "ks", "anas", "ins", "res", "ras", "ANN", "ons", "ms", "angs", "amps", "mean", "ents", "ens", "ots", "ss", "anc", "cons", "uns", "mn", "can", "an", "gs", "anks", "aps", "oss", "s", " ann", "xs", "nan", "aos", "yes", "ads", "cs", "arts", "ags", "os", "es", "anos", "AN", "ds", "ps"], "cnt": ["conct", "rnt", "catt", "Catt", "Cpt", "cct", "cnc", "ccount", "crpt", "Ccount", "ccatt", "crcount", "count", "Cnc", " ccount", "crct", " cct", "ccnt", "conpt", " cnc", "connc", "Cct", "cpt", "crnt", " count", "Cnt", " cpt", "Count", " catt", "rpt", "rcount", "connt", "cccount", "rct"], "flag": ["fd", "hold", "label", "state", "offset", "reason", "ld", "stat", "ret", "store", "used", "leg", "leaf", "set", "fc", "status", "only", "step", "lag", "nl", "agged", "success", "save", "flags", "ind", "tag", "mask", "level", "cmd", "sp", "f", "bool", "dep", "cond", "count", "valid", "Flag", " Flag", "bit", " flags", "lv", "st", "char", "group", "stage", " status", "line", "good", "id", "stay", "member", "sync", "prop", "field", "start"], "h_i": ["h_im", "h_o", "hi_I", "hi_ic", " h_o", "h_ic", "hi_i", "h_I", " h_im"], "rem": ["n", "ex", " Rem", "nt", "resh", "rom", "prem", "comm", "ret", "rx", "re", "andre", "pre", "prom", "rm", "res", "col", "rec", "dem", "remove", "rel", "temp", "mn", "disc", "resp", "remote", "exp", "red", "ch", "rest", "com", "pres", "co", "hr", "new", "recent", "mem", "reg", "cm", "rip", "cr", "ps", "Rem", "REM"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\n\\na = sorted(a)\\n\\nl = 0\\nr = n\\n\\nwhile l < r:\\n    mid = (l+r)//2\\n\\n    size = sum(a[:mid+1])\\n    ptr = mid+1\\n    ans = True\\n\\n    while ptr < n:\\n        if 2*size >= a[ptr]:\\n            size += a[ptr]\\n            ptr += 1\\n        else:\\n            ans = False\\n            break\\n\\n    if ans:\\n        r = mid\\n    else:\\n        l = mid+1\\n\\nprint(n-l)", "target": "249", "substitutes": {"n": ["nr", "N", "nt", "ln", "d", "p", "i", "sn", "c", "w", "m", "z", "ns", "ny", "o", "nl", "h", "num", "t", "len", "nb", "mn", "na", "v", "nc", "nm", "s", "nan", "nu", "nn", "q", "np", "number", "ll", "k", "rn", "j", "nd"], "a": ["x", "ia", "sta", "ae", "ac", "ab", "p", "ai", "xa", "i", "w", "c", "ma", "m", "ata", "eas", "ga", "window", "o", "ea", "la", "aaa", "go", "abs", "b", "f", "t", "auto", "alpha", "parts", "na", "an", "att", "e", "all", "A", "at", "sa", "s", "ao", "app", "au", "ed", "oa", "aa", "am", "le", "y", "array", "area", "ack", "ba"], "l": ["lc", "tl", "kl", "ln", "d", "p", "ld", "lt", "ul", "g", "left", "lb", "i", "L", "long", "c", "m", "ly", "ml", "dl", "el", "o", "nl", "sl", "h", "ls", "f", "b", "t", "yl", "len", "rl", "lo", "lp", "li", "v", "list", "lv", "s", "lr", "ol", "ll", "le", "pl", "j", "lin"], "r": ["nr", "mr", "sr", "rr", "ro", "err", "resh", "d", "p", "g", "R", "rc", "i", "re", "w", "c", "m", "z", "rs", "rb", "res", "rm", "h", "pr", "vr", "right", "b", "t", "rel", "ri", "rl", "dr", "v", "e", "ru", "s", "rt", "lr", "q", "ar", "u", "k", "rn", "j", "er", "rd"], "mid": ["rid", "loc", "mi", "mr", "mit", "max", "half", "perm", "lim", "middle", "mod", "offset", "ln", "mo", "mm", "med", "start", "m", "mad", "man", "min", "res", "tri", "ms", "val", "ind", "mer", "mask", "main", "fr", "wid", "part", "len", "mn", "pid", "li", "grid", "inter", "tr", "ran", "dim", "addr", "pl", "line", "rand", "le", "id", "Mid", "md", "mt", "hi", "mk", "nd", "sum"], "size": ["ize", "sy", "sh", "space", "mini", "offset", "p", "izes", "shift", "sn", "length", "iz", "scale", "m", "z", "c", "shape", "sized", "ms", "capacity", "SIZE", "ze", " sizes", "sp", "count", "time", "news", "len", "si", "address", "pos", "v", "width", "small", "s", "sv", "dim", "pi", "Size", "sd", "mem", "index", "data", "sum"], "ptr": ["loc", "next", "pointer", "th", "sh", "resh", "offset", "ld", "p", "rep", "Ptr", "jp", "td", "iter", "pre", "ts", "ref", "pad", "prime", "ctx", "pointers", "tp", "ms", "pr", "ind", "br", "sp", "ctr", "hl", "t", "rel", "len", "pt", "dr", "pos", "address", "inter", "inters", "tr", "lr", "addr", "pl", "tmp", "id", "j", "index", "md", "mt", "ps", "adr"], "ans": ["ars", "ys", "ANS", "ants", "ians", "ats", " means", "outs", "aus", "lets", "ns", "ies", "ann", "rans", "rs", "leans", "anas", "ks", "ins", "offs", "ras", "ons", "ms", "angs", "amps", "ls", "anned", "ents", "ens", "cas", "cons", "uns", "an", "rors", "aces", "anes", "aps", "works", "xs", "rons", "arts", "cs", "os", "AN", "orts"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nx=[0]*10**5\\nfor i in a:\\n  x[i]+=1\\nans=0\\nfor i in range(10**5-2):\\n  ans=max(ans,x[i]+x[i+1]+x[i+2])\\nprint(ans)", "target": "42", "substitutes": {"n": ["nr", "N", "nt", "ni", "d", "p", "cn", "w", "sn", "c", "m", "z", "ns", "o", "nl", "b", "num", "t", "nb", "mn", "na", "v", "nc", "nm", "nn", "l", "k", "j"], "a": ["ia", "ae", "ta", "p", "ana", "ach", "va", "xa", "ai", "w", "c", "ma", "set", "ga", "aux", "ea", "la", "aaa", "ada", "b", "t", "alpha", "na", "an", "all", "A", "at", "sa", "another", "au", "oa", "aa", "am", "aw", "index", "area", "ba", "ca", "ao"], "x": ["history", "wx", "xi", "max", "ex", "xe", "p", "xes", "ux", "g", "xc", "ct", "xa", "X", "rx", "w", "ox", "ml", "m", "z", "xxxx", "xt", "ctx", "hex", "xml", "ix", "tx", "xd", "config", "t", "check", "v", "fx", "at", "xy", "tt", "st", "xs", "mx", "co", "xx", "pl", "l", "lex", "y", "xp", "xf"], "i": ["\u00ed", "iii", "ki", "xi", "mi", "ia", "uri", "ie", "ci", "gi", "p", "di", "uli", "ai", "I", "m", "bi", "ami", "yi", "qi", "iti", "ic", "ix", "ip", "iri", "ind", "f", "ri", "io", "si", "ii", "li", "ji", "ei", "ori", "v", "ti", "oi", "iy", "im", "it", "zi", "ini", "ui", "\u0438", "phi", "pi", "l", "item", "id", "asi", "y", "iat", "j", "ij", "iu", "hi"], "ans": ["ars", "ys", "ANS", "ians", "ats", "ants", "was", "ai", "aus", "ros", "us", "iban", "aned", " Ans", "ts", "ns", "ann", "rans", "rs", "man", "anas", " spans", "offs", "ins", "ras", "vers", "ons", "ms", "amps", "ls", "pan", "ents", "ens", "uns", "na", "an", "can", "aps", "anes", "oss", "s", "xs", "ions", "nas", "ams", "aos", "ran", "vs", "cs", "arts", "os", "es", "lan", "aver"]}}
{"code": "a,b = map(int, input().split())\\nif 1 <= b < a:\\n  print(a-1)\\nelif a <= b:\\n  print(a)", "target": "35", "substitutes": {"a": ["n", "x", "ae", "ac", "ab", "d", "p", "g", "ai", "i", "value", "zero", "r", "c", "ma", "m", "z", "old", "eas", "ga", "window", "min", "ea", "h", "aaa", "val", "result", "f", "t", "alpha", "da", "lower", "na", "an", "e", "v", "all", "A", "al", "sa", "s", "au", "oa", "aa", "l", "ar", "index", "area", "ba"], "b": ["bis", "n", "sb", "to", "ab", "d", "p", "db", "g", "ib", "i", "r", "c", "bi", "wb", "fb", "rb", "by", "o", "mb", "be", "ob", "f", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "eb", "base", "bes", "cb", "l", "bp", "j", "y", "bs", "ba"]}}
{"code": "n = int(input())\\n\\narr = [0] * (n+1)\\n\\nfor i in range(1,n+1):\\n    x = []\\n    while i % 2 == 0:\\n        x.append(2)\\n        i = i // 2\\n    f = 3\\n    while f * f <= i:\\n        if i % f == 0:\\n            x.append(f)\\n            i = i // f\\n        else:\\n            f += 2\\n    if i != 1:\\n        x.append(i)\\n\\n    for k in range(len(x)):\\n        arr[x[k]] += 1\\n\\nans = 1\\nfor i in range(len(arr)):\\n    ans *= (arr[i] + 1)\\nprint(ans % (10**9 + 7))\\n", "target": "658", "substitutes": {"n": ["nr", "N", "nt", "d", "p", "ln", "name", "ne", "g", "sn", "r", "c", "w", "m", "z", "ns", "o", "nl", "b", "num", "t", "len", "nb", "mn", "na", "v", "nc", "s", "nu", "nn", "l", "np", "j"], "arr": ["wx", "nt", "err", "str", "ab", "aug", "db", "Ar", "ang", " narr", "ai", "rx", "array", "r", "align", "ml", "img", "rs", "xt", "inst", "res", "ix", "aaa", "val", "tx", "ax", "fr", "rar", "br", "gb", "dat", "agg", "rel", "dr", "ear", "list", "all", "obj", "xy", "gr", "arb", "au", "bl", "coll", "pl", "ll", "ar", "data", "ray", "dict", "Array", "ack", "ay"], "i": ["mi", "ki", "xi", "ia", "ci", "gi", "ir", "p", "di", "ai", "I", "c", "m", "bi", "yi", "info", "ic", "o", "ip", "iri", " bi", "ind", "b", "t", "ri", "io", "si", "li", "ii", "ji", "v", "ei", "int", "ti", "oi", "e", "im", "it", "s", "zi", "ini", "ui", "l", "pi", "phi", "ati", "u", "id", "j", "y", "ik", "ij", "fi", "iu", "hi", "index"], "x": ["ck", "wx", "xi", "ex", "rex", "xe", "xes", "ux", "xc", "ct", "X", "xa", "rx", "ext", "w", "ox", "z", "pe", "full", "xt", "xml", "ix", "tx", "ax", "xd", "news", "v", "exp", "fx", "list", "at", "xy", "xs", "xb", "co", "dx", "xx", "pl", "lex", "y", "px", "xp", "xf"], "f": ["fd", "a", "bf", "d", "p", "fm", "g", "sf", "w", "fort", "r", "c", "z", "m", "fc", "full", "fb", "h", "two", "func", "fa", "fr", "df", "t", "b", "fac", "fe", "fn", "fo", "conf", "fl", "ff", "v", "e", "s", "tf", "l", "pi", "fg", "u", "float", "y", "fi", "F", "j", "cf", "function", "xf", "ft", "frac"], "k": ["ck", "km", "ki", "kn", "ek", "uk", "kr", "kh", "kl", "ijk", "kar", "ak", "ke", "kid", "z", "ks", "kw", "ko", "tk", "key", "kj", "ikk", "ku", "wk", "kt", "kk", "ka", "sk", "K", "ik", "j", "kan", "mk", "unk", "kit"], "ans": ["ars", "rus", "ANS", "ants", "ats", "ians", "eds", "outs", "acs", "ai", "ows", "aus", "ros", "us", "ts", "ns", "vals", "ies", "ums", "rans", "rs", "ann", "ks", "anas", "ins", "ras", "ms", "amps", "ls", "ens", "ss", "mn", "als", "uns", "an", "anks", "aps", "ays", "s", "xs", "nas", "ran", "aos", "vs", "arts", "os", "es", "ds", "ps"]}}
{"code": "def main():\\n    n, m, c = map(int, input().split())\\n    blis = list(map(int, input().split()))\\n    alis = []\\n    for i in range(n):\\n        ilis = list(map(int, input().split()))\\n        alis.append(ilis)\\n    ans = 0\\n    for i in range(n):\\n        tmp = c\\n        for k in range(m):\\n            #print(alis, alis[i], alis[i][k], blis, blis[k])\\n            tmp += alis[i][k] * blis[k]\\n        if tmp > 0:\\n            ans += 1\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "213", "substitutes": {"n": ["nr", "N", "x", "nt", "d", "p", "ne", "g", "cn", "dn", "r", "sn", "ns", "o", "h", "b", "num", "t", "nb", "no", "mn", "na", "v", "nc", "nm", "nan", "nu", "nn", "l", "q", "np", "j", "y"], "m": ["tm", "mi", "M", "mr", "dm", "d", "p", "mm", "mo", "mu", "mp", "g", "r", "ma", "mut", "man", "o", "gm", "h", "ms", "t", "mc", "mn", "v", "l", "j", "md", "mt", "cm", "mk"], "c": ["lc", "cat", "d", "p", "g", "cn", "ct", "r", "tc", "z", "fc", "ic", "o", "h", "f", "b", "bc", "t", "mc", "out", "v", "e", "nc", "cache", "cp", "s", "cc", "l", "u", "cs", "cm", "C"], "blis": ["glis", "mlis", "blits", "blisi", " blisi", "bli", "gli", "mli", "mlisi", " bli", "glits", "glisi", "mlits", " blits"], "alis": ["doms", "bis", "ales", "ats", "lands", "ais", "iple", "acs", "ulas", "atis", "aus", "lets", "mails", "isal", "alian", "mas", "eas", "alia", "ins", "pac", "ms", "ls", "abus", "wal", "lis", "als", "nis", "orns", "al", "aler", "alist", "phis", "aos", "illas", "ali", "lies", "alities", "aints"], "i": ["ki", "x", "ia", "ci", "gi", "ir", "p", "di", "ai", "I", "bi", "yi", "iti", "ic", "o", "ip", "b", "li", "ii", "ti", "iy", "im", "it", "ini", "zi", "pi", "il", "ik", "ij", "iu"], "ilis": ["iblis", "gelais", "illais", "folis", "milist", "ilIs", "illis", "ibli", "illist", "illIs", "folais", "gelis", "gelIs", "ilas", "iblas", "milas", "ilist", "illas", "mili", "folIs", "ilais", "milis", "ili", "illi", "gelas", "folas", "iblist"], "ans": ["con", "ants", "ats", "gn", "outs", "aus", "sn", "ns", "ann", "rs", "reads", "ks", "ins", "pac", "ms", "ls", "pan", "anc", "an", "nan", "aos", "arts", "cs", "os", "ds", "ps", "vers"], "tmp": ["cmp", "perm", "cont", "mp", "acc", "uni", "mut", "cho", "ctx", "inst", "pac", "ob", "cv", "sp", "part", "nb", "att", "cache", "obj", "emp", "cp", "conv", "co", "cb", "np", "etc", "mk", "sum"], "k": ["ck", "km", "ki", "a", "kh", "um", "ach", "di", "ai", "ak", "w", "ma", "ih", "bi", "mut", "ks", "o", "ix", "ind", "b", "an", "ikk", "aw", "ka", "ik", "ket", "unk", "ac"]}}
{"code": "a, b = map(int, input().split())\\nnum = []\\nfor i in range(4):    \\n    if a * b * i % 2 != 0:\\n        num.append(\"Yes\")\\nif \"Yes\" in num:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "356", "substitutes": {"a": ["n", "x", "ia", "ae", "ac", "ab", "aff", "ta", "aj", "p", "ach", "g", "va", "ai", "ak", " A", "ma", "ata", "ea", "la", "aaa", "act", "ax", "f", "da", "an", "A", "al", "at", "af", "sa", "ao", "au", "ed", "aa", "l", "am", "ar", "ba", "ca"], "b": ["ben", "bis", "n", "sb", "bu", "bf", "ab", "d", "db", "beta", "ib", "r", "c", "m", "bi", "fb", "rb", "mb", "be", "f", "bas", "bc", "gb", "nb", "B", "bb", "v", "eb", "base", "cb", "l", "bp", "bin", "y", "bs", "ba"], "num": ["alph", "n", "net", "local", "um", "mod", "nom", "en", "name", "mult", "zero", "txt", "set", "info", "total", "hex", "bo", "tim", "enum", "digit", "result", "done", "buf", "multi", "NUM", "news", "form", "nb", "no", " NUM", "numbered", "check", "na", "Num", "cal", "list", "final", "nm", "om", "nu", "dim", "number", "mon", "np", "mem", "umber", "index", "temp", "sum"], "i": ["mi", "ki", "n", "xi", "x", "gu", "ci", "gi", "d", "p", "di", "ai", "I", "r", "m", "bi", "qi", "ic", "ix", "ind", "f", "si", "li", "ii", "v", "ti", "im", "zi", "ui", "q", "l", "pi", "u", "id", "j", "y", "fi", "iu"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\ndef main():\\n\\n    A, B, C, K = map(int, input().split())\\n\\n    ans = 0\\n\\n    if K <= A:\\n        ans = K\\n\\n    else:\\n        if K <= A + B:\\n            ans = A\\n\\n        else:\\n            ans = A + (-1 * (K - A - B))\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "174", "substitutes": {}}
{"code": "n, k = map(int, input().split())\\nx0 = list(map(int, input().split()))\\n\\nx1 = [i for i in x0 if i >= 0]\\nx2 = list(reversed([i for i in x0 if i < 0]))\\ncount0 = len(x1)\\ncount1 = len(x2)\\nans = float('inf')\\n\\nif count1 == 0:\\n    print(x1[k-1])\\nelif count0 == 0:\\n    print(-x2[k-1])\\nelse:\\n    if 0 in x1:\\n        x1.remove(0)\\n        k -= 1\\n        count0 -= 1\\n    for i in range(min(count0, k)):\\n        if count1 >= k-i-1:\\n            ans = min(ans, x1[i]*2-x2[k-i-2])\\n    for i in range(min(count1, k)):\\n        if count0 >= k-i-1:\\n            ans = min(ans, -x2[i]*2+x1[k-i-2])\\n    print(ans)\\n", "target": "651", "substitutes": {"n": ["nr", "N", "x", "d", "p", "cn", "w", "r", "c", "m", "z", "ns", "h", "f", "b", "num", "t", "nb", "mn", "na", "v", "nc", "nn", "l", "q", "np", "j", "y"], "k": ["ck", "km", "ki", "kn", "ek", "x", "kr", "max", "kh", "kl", "ijk", "uk", "context", "p", "spec", "ak", "ke", "kid", "w", "radius", "c", "m", "z", "dk", "ks", "kw", "ko", "kind", "b", "num", "tk", "kok", "mc", "gh", "conf", "key", "kj", "ok", "kick", "aka", "work", "ikk", "co", "ku", "wm", "q", "wk", "keys", "kk", "sk", "ka", "K", "ik", "j", "kg", "kan", "cm", "ack", "mk", "unk", "sc"], "x0": ["tx1", "n2", "ctor", "ct0", "tx0", " x7", " xears", "ct1", "tx180", "n1", "k0", "xx18", "nor", "x18", "ct2", "k18", "xx1", " xor", "x180", "ux1", "kears", "x7", "xxears", "tx7", "ux0", "xx0", "n0", " x180", "xears", "k1", " x18", "ux7", "xor", "ux180"], "x1": ["xin", "ex37", "xione", "xn", "xx2", "X1", " x3", " x37", "xt0", "rx0", "ex2", "oxone", "ix1", "ex1", "ox37", "ox2", "xxone", "rx1", "xone", " x11", "xt1", "xx11", "wx1", "rx01", "x01", "xi11", "xi1", "X2", "X3", "X0", "wx3", "ex0", "xi2", "wx2", " xn", "xt3", " xone", "xx1", "ixone", "wx0", "xt2", "exn", "ix01", "xtone", "xi0", "ex3", "ix0", "x11", "ox1", "ox3", "x37", "x3", "rxone", "ox0", "xi01"], "i": ["ki", "x", "p", "c", "z", "ix", "multi", "ri", "v", "ti", "oi", "it", "ini", "\u0438", "q", "phi", "id", "like", "\u00ed", "uri", "g", "ai", "I", "jp", "m", "qi", "iti", "ic", "o", "si", "iu", "ei", "im", "s", "zi", "l", "u", "iat", "ij", "ci", "gi", "ski", "ip", "io", "ii", "ui", "pi", "ik", "iii", "mi", "bis", "xi", "gu", "cli", "di", "iq", "bi", "ami", "yi", "info", "f", "b", "li", "ji", "ori", "iy", "ati", "j", "y", "iri", "hi"], "x2": ["hex5", "ex182", "y1", "rx2", "y2", "ex256", "y256", "extwo", "hex2", "x256", "ax182", "xt0", "rx0", "ex2", "ex1", "rx6", " x6", "hextwo", "rx1", "xt1", "ex0", " xtwo", "ax1", "ax2", "xtwo", " x5", "xt2", "x182", "x5", "ex6", " x182", "ex5", "y0", " x256", "x6", "hex1"], "count0": ["store0", "code0", "Countn", "countzer", " countn", "Count3", "length1", "store6", " count2", "length3", "store00", "counter00", " countzer", "cast1", "count6", "ount2", "ountzer", "count3", "ount3", " count3", "count2", "code18", "cast0", "count18", "count00", "store18", "counter0", "code00", "length2", "counter18", "code6", "countn", "Count1", "castn", "cast2", "Count0", "ount1", "length0", "counter6", "ount0", "Count2", "Countzer"], "count1": ["score0", "length1", "processone", " count2", "score2", " count001", "Countone", "lengthone", "consider0", "score001", "c2", "c1", "process1", "Count11", "count2", "consider11", "count11", "Count001", "count001", "consider2", "process2", "length2", "countone", "Count1", "scoreone", "process0", "consider1", "Count0", "score1", "length0", "Count2", "c11", "c0"], "ans": ["ars", "ANS", "ants", "ats", "ians", "\u00e1n", "ana", "names", "acs", "aus", "aned", "ates", "ns", "ann", "rans", "rs", "mas", "anas", "ks", "scan", "offs", "ums", "ras", "ons", "acts", "amps", "annot", "ls", "pan", "angs", "anned", "ens", "anc", "cas", "cons", "uns", "can", "an", "posts", "iann", "gs", "jas", "anes", "aps", "oss", "anks", "s", "nan", "ran", "ams", "aos", "nas", "ands", "vs", "yes", "ads", "cs", "arts", "os", "asms", "lan", "AN"]}}
{"code": "k=int(input())\\nnum=0\\nfor i in range(k+1):\\n    num=(num*10+7)%k\\n    if num==0:\\n        print(i+1)\\n        break\\nif num:\\n    print(\"-1\")", "target": "737", "substitutes": {"k": ["ck", "km", "ki", "n", "ek", "max", "kr", "kh", "kl", "kin", "p", "kar", "ak", "ke", "kid", "m", "z", "ks", "kw", "ko", "b", "tk", "kok", "kj", "kick", " K", "ikk", "ku", "q", "wk", "kk", "ka", "sk", "K", "ik", "j", "ack", "mk", "unk"], "num": ["n", "alph", "missing", "necessary", "um", "nom", "p", "mult", "test", "g", "common", "zero", "m", "die", "rem", "sam", "umi", "unit", "total", "tim", "nam", "digit", "snap", "result", "b", "multi", "NUM", "nb", "no", "sim", "valid", "cum", "non", "tu", "begin", "check", "na", "numbered", "Num", "cal", "int", "final", "nm", "obj", "msg", "none", "nu", "div", "one", "dim", "number", "mon", "np", "mem", "index", "pn", "mark", "coord", "temp", "sum"], "i": ["mi", "ki", "n", "xi", "x", "uri", "ci", "gi", "di", "I", "m", "bi", "yi", "ic", "ix", "ip", "ind", "si", "li", "ii", "v", "int", "ti", "oi", "im", "it", "zi", "ini", "q", "phi", "pi", "l", "u", "id", "y", "j", "index", "ik", "ij", "hi"]}}
{"code": "W, H, x, y, r = map(int, raw_input().split())\\nprint \"Yes\" if 0 <= x - r < x + r <= W and 0 <= y - r < y + r <= H else \"No\"", "target": "563", "substitutes": {"W": ["WC", "M", "N", "T", "We", "Win", "NW", "R", "X", "L", "w", "WW", "VW", "WH", "BW", "V", "WA", "Width", "Wh", "SW", "Week", "Q", "G", "B", "P", "A", "WD", "D", "Y", "FW", "DW", "K", "F", "Weight", "Z", "C"], "H": ["M", "N", "Eh", "HQ", "T", "HD", "AH", "HE", "R", "X", "RH", "L", "HO", "HI", "NH", "h", "DH", "V", "TH", "Height", "HH", "B", "J", "G", "HA", "P", "OH", "HC", "MH", "Y", "HTTP", " h", "High", "HT", "He", "C"], "x": ["wx", "n", "xi", "ex", "d", "p", "xc", "left", "X", "i", "rx", "w", "ox", "m", "z", "xt", "ctx", "ix", "h", "tx", "ax", "t", "v", "int", "fx", "width", "xy", "xs", "dx", "xx", "l", "u", "px", "xp"], "y": ["sy", "ty", "ys", "yer", "cy", "w", "oy", "ky", "yo", "ox", "z", "ly", "ies", "my", "ny", "vy", "ye", "py", "h", "yr", "sky", "b", "axy", "yout", "yl", "uy", "v", "ey", "gy", "height", "iy", "xy", "ch", "ry", "yt", "Y", "yy", "l", "j", "ya", "ay", "ym"], "r": ["a", "nr", "n", "sr", "mr", "kr", "rr", "ro", "err", "rg", "d", "p", "g", "R", "rc", "i", "re", "w", "rad", "m", "z", "rh", "rs", "rb", "res", "h", "result", "f", "b", "t", "v", "e", "rf", "rank", "ur", "it", "s", "rt", "hr", "q", "ar", "u", "er", "range", "data", "attr", "cr", "rate", "rd"]}}
{"code": "f = lambda x: x if p[x]<0 else f(p[x])\\nN,M = map(int,input().split())\\np = [-1]*N\\nfor _ in range(M):\\n  A,B = map(lambda x:f(int(x)-1),input().split())\\n  if A==B: continue\\n  elif A<B: A,B=B,A\\n  p[A] += p[B]\\n  p[B] = A\\nprint(sum(i<0 for i in p)-1)", "target": "354", "substitutes": {"f": ["a", "n", "x", "bf", "d", "alf", "g", "fm", "test", "fs", "fun", "sf", "w", "r", "c", "m", "fc", "fp", "fb", "h", "func", "b", "df", "t", "fac", "fn", "ef", "ff", "v", "e", "exp", "rf", "af", "tf", "uf", "q", "l", "fg", "u", "float", "fi", "F", "cf", "fit"], "N": ["n", "NS", "T", "NC", "Ns", "R", "X", "I", "L", "NA", "NM", "NR", "NT", "H", "O", "V", "S", "J", "Q", "G", "ND", "P", "Num", "E", "D", "Y", "MN", "Ni", "K", "F", "C"], "M": ["T", "CM", "Month", "R", "I", "X", "L", "NM", "MX", "m", "Mi", "Ms", "MM", "V", "MC", "S", "MAN", "J", "Q", "G", "P", "MP", "MS", "D", "DM", "TM", "Y", "MN", "MR", "MT", "MI", "Len", "K", "F", "Z", "REM", "C"], "p": ["a", "n", "policy", "x", "pkg", "pm", "d", "mp", "pc", "vp", "jp", "r", "w", "c", "m", "z", "pe", "fp", "pb", "o", "tp", "pa", "h", "ip", "pr", "b", "sp", "t", "pt", "wp", "parse", "lp", "pos", "pd", "out", "v", "P", "e", "pop", "cache", "ap", "cp", "ping", "print", "q", "l", "pi", "bp", "pl", "u", "np", "j", "y", " P", "pn", "op", "pp", "ps"], "_": ["n", " e", " the", " j", " k", "I", " num", "ix", " c", " __", " each", " it", " mult", " index", " v", " un"], "A": ["a", "GA", "T", "Al", "An", "IA", "Ar", "AU", "AT", "X", "I", "Av", "L", "R", "AL", "AV", "AST", "NA", "And", "AB", "RA", "ALL", "H", "AA", "LA", "PA", "As", "O", "V", "AI", "AR", "C", "AS", "Ah", "Bar", "S", "J", "G", "This", "P", "HA", "ACC", "Ant", "CA", "At", "E", "MA", "AF", "D", "TA", "Y", "SA", "U", "AC", "AN", "EA", "Ag", "IO", "AP"], "B": ["LB", "BI", "There", "T", "RB", "BL", "VB", "BS", "OB", "Bs", "GO", "SB", "R", "I", "L", "IB", "AB", "Reb", "H", "V", "BT", "C", "b", "S", "BC", "BE", "J", "BR", "G", "WB", "P", "BB", "USB", "BM", "E", "Bern", "FB", "TB", "D", "NB", "EB", "Y", "BO", "Bi", "DB", "F", "BA", "BY", "Blue"], "i": [" I", "mi", " ii", "n", "xi", "a", "x", " e", "gu", "II", " j", "di", "ai", "I", " n", "c", "m", "bi", "ic", "ix", "ip", "b", "si", "ii", "li", "v", "ei", "int", "ti", "im", "it", "zi", "l", "pi", "phi", "u", "id", "j", "y", "iu"]}}
{"code": "n = int(input())\\nf = []\\np = []\\nfor _ in range(n):\\n  f.append(list(map(int, input().split())))\\nfor _ in range(n):\\n  p.append(list(map(int, input().split())))\\n\\ndef solve(out_list):\\n  ans = 0\\n  for fi, pi in zip(f, p):\\n    c = 0\\n    for o in out_list:\\n      if fi[o] == 1:\\n        c += 1\\n    ans += pi[c]\\n  return ans\\n\\nans = -float(\"inf\")\\nfor i in range(2 ** 10):\\n  out_list = []\\n  ## \u3069\u306e\u6841\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306b2\u9032\u6570\u306e\u5404\u6841\u3092\u30eb\u30fc\u30d7\\n  for j in range(10):\\n    ## i >> j\u3067\u78ba\u8a8d\u3057\u305f\u3044\u6841\u3092\u4e00\u756a\u53f3\u307e\u3067\u305a\u3089\u3057\u30661\u3068\u8ad6\u7406\u7a4d\u3092\u3068\u3063\u3066\u300c\u9078\u629e\u300d\u3057\u3066\u3044\u308b\u8981\u7d20\u3092\u78ba\u8a8d\\n    if (i >> j) & 1:\\n      out_list.append(j)\\n  if len(out_list) != 0:\\n    ans = max(ans, solve(out_list))\\nprint(ans)\\n", "target": "629", "substitutes": {"n": ["nr", "N", "nt", "ln", "d", "ne", "g", "sn", "r", "m", "z", "ns", "nl", "h", "num", "t", "nb", "no", "mn", "na", "v", "e", "nc", "s", "nu", "size", "nn", "l", "q", "np", "k", "j"], "f": ["fd", "x", "lf", "bf", "d", "fm", "fs", "sf", "fre", "fc", "fp", "fb", "fa", "fr", "t", "fe", "fo", "fl", "ff", "e", "fx", "rf", "s", "tf", "uf", "fer", "q", "l", "fg", "inf", "F", "cf", "ft"], "p": ["a", "pm", "d", "mp", "pc", "vp", "g", "po", "jp", "m", "pe", "fp", "pb", "power", "tp", "pa", "pr", "t", "pt", "lp", "pid", "pos", "P", "ap", "cp", "ph", "ping", "q", "pl", "np", "u", "pn", "pp", "pins", "ps"], "_": [" the", " j", "__", "ny", " x", " __"], "out_list": ["outsList", "in_del", "out_del", " out_result", "in_list", "out2List", "outtList", "out_lists", "Out_set", "outsset", "in2List", "Out_List", "out_result", "out2del", "outlistList", "out_batch", "outlistresult", "out_set", " out_batch", "outlistbatch", "outslist", "outslists", "outlistlist", "out2list", " out_List", "in2list", "in2del", "outlistdel", "outtdel", "Out_lists", "out_List", "outtlist", "Out_list", "in_List"], "ans": ["ANS", "ants", "ats", "ians", "actions", "names", "ano", " means", "cn", "outs", "acs", "ai", "izes", "aus", "lines", "aned", " Ans", "ates", "ns", "ann", "rans", "rs", "ums", "anas", "ks", "offs", "ins", "ons", "ms", "annot", "ls", "pan", "mean", "ents", "ens", "ations", "weights", "anc", "cons", " sans", "uns", "can", "an", "gs", "aps", "oss", "s", "nan", "xs", "eps", "nas", "ands", "aos", "yes", "cs", "os", "es", "AN", "errors", "ps"], "fi": ["mi", "ki", "xi", "lf", "ni", "bf", "ci", "gi", "FI", "abi", "sf", "isi", "bi", "ife", "fp", "fty", "info", "qi", "Fi", "ic", "wi", "fa", "fe", "si", "fo", "hi", "li", "ii", "fl", "ti", "ifi", "zi", "wei", "ffe", "fg", "iu", "afi", "xf"], "pi": ["mi", "ki", "xi", "pm", "api", "ci", "ta", "PI", "vi", "pc", "po", "di", "vp", "ma", "pe", "bi", "yi", " psi", "pa", "pr", "pu", "pan", "si", "pie", "li", "pid", "Pi", "phi", "pit", "ati", "asi", "pp", "ps", "hi"], "c": ["a", "ce", "lc", "con", "ci", "gc", "d", "cd", "pc", "cn", "xc", "ct", "r", "m", "z", "ic", "col", "h", "b", "count", "t", "dc", "mc", "uc", "v", "nc", "cos", "cp", "s", "cc", "co", "cu", "cb", "l", "u", "cs", "k", "j", "cm", "cr", "ca", "C", "ac"], "o": ["a", "to", "mo", "ano", "po", "oj", "ox", "yo", "m", "ico", "cho", "bo", "oin", "oid", "O", "go", "t", "io", "lo", "ot", "fo", "ion", "out", "v", "e", "oi", "ou", "ode", "iso", "co", "oa", "oo", "do", "oto", "l", "oc", "os", "op", "ao"], "i": ["a", "x", "ci", "di", "ai", "I", "z", "m", "ic", "ip", "b", "li", "ii", "e", "int", "im", "it", "q", "phi", "l", "j", "y", "k"]}}
{"code": "import sys\\nimport heapq, math\\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\\nfrom itertools import accumulate, dropwhile, takewhile, groupby\\nfrom functools import lru_cache\\nfrom copy import deepcopy\\nx = int(input())\\n\\ncnt = x // 11\\n\\nif x % 11 == 0:\\n    print(cnt * 2)\\nelif cnt * 11 + 6 >= x:\\n    print(cnt * 2 + 1)\\nelse:\\n    print(cnt * 2 + 2)", "target": "241", "substitutes": {"x": ["a", "wx", "n", "xi", "ex", "xe", "p", "g", "xc", "ct", "xa", "X", "i", "rx", "w", "c", "ox", "z", "xt", "input", "ctx", "xxx", "ix", "tx", "ax", "f", "xd", "t", "xxxxxxxx", "v", "int", "fx", "xy", "xs", "mx", "dx", "xx", "y", "px", "xp", "xf"], "cnt": ["CNT", "lcounter", "curNT", "Cpt", "cNT", "cnc", "cct", "lcNT", " cant", "rcNT", "rcnt", "kct", "knt", "lcnt", "Counter", "ncounter", "ctpt", "ctNT", "rcpt", "Cant", "cant", "ncct", "kNT", "curnc", "ctant", " counter", "Cnc", " cNT", " cct", "knc", "ctnt", "ncNT", "rcct", "Cct", "cpt", "ncnt", "curct", "counter", "Cnt", " cpt", "curnt", "lcct"]}}
{"code": "import math\\nn = int(input())\\nlis = [0] * n\\nfor i in range(2,n+1):\\n    now = i\\n    for j in range(2,math.ceil(math.sqrt(i))+1):\\n        while now % j == 0:\\n            now //= j\\n            lis[j-1] += 1\\n    if now != 1:\\n        lis[now-1] += 1\\n\\ndef num(l):\\n    return len(list(filter(lambda x: x >= l-1, lis)))\\n\\nprint(num(75) + num(25) * (num(3) -1) + num(15) * (num(5) - 1) + num(5) * (num(5) - 1) * (num(3) - 2) // 2)", "target": "145", "substitutes": {"n": ["nr", "N", "x", "nt", "ni", "ln", "p", "en", "ne", "cn", "long", "sn", "c", "m", "z", "ns", "o", "nl", " ni", "f", "b", "num", "t", "nb", "nor", "mn", "na", "v", "nc", "un", "s", "it", "nu", "nn", "np", "network", "Ni", "k"], "lis": ["mes", "bis", "los", "ales", "els", "ians", "js", "alis", "xes", "\u00eds", "lesh", "ais", "lands", "ils", "atis", "les", "nets", "lights", "sels", "lets", "mails", "isi", "ns", "vals", "details", "yi", "idis", "nl", "ms", "ls", "jl", "lists", "illes", "ris", "nis", "plays", "als", "ti", "ws", "rang", "ois", "phis", "xs", "sis", "models", "olics", "lies", "tis", "lems", "ills", "qs", "lins", "hips", "bits"], "i": ["\u00ed", "a", "xi", "x", "ia", "gi", "p", "g", "ai", "I", "r", "c", "z", "m", "bi", "yi", "iti", "ic", "o", "ip", "f", "b", "t", "io", "si", "li", "ii", "v", "ti", "im", "it", "ini", "zi", "phi", "pi", "u", "y", "ij", "ik", "iu"], "now": ["next", "loc", "nr", "onew", "sw", "self", "json", "before", "hold", "ja", "aj", "js", "on", "this", "jp", "we", "w", "start", "current", "z", "set", "age", "jj", "wait", "since", "gm", "ob", "sp", "ready", "time", "count", "wa", "ver", "off", "sc", "null", "ws", "obj", "post", "at", "when", "st", "node", "so", "pres", "new", "here", "today", "NOW", "size", "a", "then", "yes", "aw", "ng", "y", "ij", "ait", "Now", "after", "pg", "ow"], "j": ["a", "next", "json", "x", "uj", "ja", "js", "aj", "p", "d", "g", "left", "jp", "I", "w", "r", "jc", "oj", "z", "m", "c", "jj", "bi", "o", "h", "jl", "f", "b", "t", "J", "bj", "li", "kj", "ji", "v", "ii", "s", "it", "jump", "times", "new", "q", "pi", "dj", "y", "k", "ij", "org", "jam"], "l": ["loc", "lc", "kl", "ln", "d", "p", "g", "L", "long", "length", "c", "m", "ly", "z", "el", "nl", "sl", "ls", "b", "t", "yl", "len", "lo", "lp", "li", "v", "list", "lv", "s", "ll", "le", "pl", "y", "lin"]}}
{"code": "def main():\\n    a = int(input())\\n    b = int(input())\\n    if a > b:\\n        print(\"GREATER\")\\n    elif a == b:\\n        print(\"EQUAL\")\\n    else:\\n        print(\"LESS\")\\n\\n\\nif __name__ == '__main__':\\n    main()\\n\\n", "target": "557", "substitutes": {"a": ["sta", "ae", "ac", "ab", "aff", "aj", "ta", "ach", "g", "va", "ai", "\u00e1", " A", "ma", "ami", "eas", "ga", "aux", "ea", "admin", "aaa", "la", "\u00e4", "t", "alpha", "apa", "an", "e", "A", "sa", "ao", "aka", "s", "au", "oa", "aa", "l", "am", "area", "ba", "ca"], "b": ["bis", "sb", "to", "bf", "ab", "bar", "d", "db", "beta", "g", "ib", "blue", "bg", "reb", "z", "bi", "wb", "fb", "rb", "bo", "mb", "be", "ob", "f", "abs", "bc", "gb", "br", "nb", "B", "bb", "v", "e", "abc", "eb", "erb", "base", "cb", "bp", "bs", "ba", "back"]}}
{"code": "# CODE FESTIVAL 2016 \u4e88\u9078 C: A \u2013 CF\\ns = input()\\nprint('Yes' if 'C' in s and 'F' in s[s.index('C') + 1:] else 'No')", "target": "48", "substitutes": {}}
{"code": "a = int(input())\\nb = int(input())\\n\\nprint(2*b-a)", "target": "524", "substitutes": {"a": ["n", "x", "ae", "ab", "aff", "d", "p", "aj", "era", "ai", "i", "c", " A", "m", "ma", "ga", "aaa", "f", "t", "alpha", "an", "e", "v", "A", "al", "at", "sa", "s", "au", "aa", "l", "am", "ar", "ba", "ca", "ac"], "b": ["bis", "n", "sb", "bf", "ab", "d", "bar", "db", "p", "g", "ib", "c", "reb", "bi", "fb", "rb", "mb", "h", "be", "ob", "f", "bas", "bc", "gb", "t", "nb", "B", "bb", "v", "eb", "cb", "j", "y", "bs", "ba"]}}
{"code": "def main():\\n    A = list(map(int, input().split()))\\n\\n    A.sort(reverse=True)\\n\\n    print(abs(A[1] - A[0]) + abs(A[2] - A[1]))\\n\\nif __name__ == '__main__':\\n    main()", "target": "793", "substitutes": {"A": ["a", "GA", "ETA", "M", "Answer", "There", "All", "An", "Alpha", "Abs", "AU", "AT", "mA", "AH", "They", "NA", "L", "AL", "AV", "And", "AB", "AE", "Args", "ALL", "H", "AA", "LA", "As", "GS", "WA", "AI", "AS", "Ah", "S", "B", "This", "HA", "P", "CA", "MA", "AY", "At", "You", "JA", "AF", "TA", "Alice", "SA", "AC", "The", "AN", "BA", "Array", "ACT", "AP"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**7)\\n\\n\\ndef dfs(start, dist, distance_list, explored):\\n    for node, cost in tree[start]:\\n        if explored[node] is False:\\n            explored[node] = True\\n            distance_list[node] = dist + cost\\n            dfs(node, distance_list[node], distance_list, explored)\\n    return distance_list\\n\\n\\nn = int(input())\\ntree = [[] for _ in range(n)]\\ndistance = [float('inf') for _ in range(n)]\\n\\nfor _ in range(n-1):\\n    a,b,c = map(int, input().split())\\n    a -= 1\\n    b -= 1\\n    tree[a].append((b, c))\\n    tree[b].append((a, c))\\n\\nq, k = map(int, input().split())\\nk -= 1\\nquery = []\\ndistance[k] = 0\\n\\nfor _ in range(q):\\n    x, y = map(int, input().split())\\n    query.append((x-1, y-1))\\n\\nXX = [False for _ in range(n)]\\nXX[k] = True\\n\\nX = dfs(k, 0, distance, explored=XX)\\n\\nfor i, j in query:\\n    print(X[i] + X[j])", "target": "360", "substitutes": {"start": ["next", "stop", "ie", "name", "test", "seed", "chain", "step", "kind", "ind", "starting", "sp", "art", "source", "begin", "key", "int", "star", "rank", "st", "it", "char", "end", "Start", "new", "size", "service", "rand", "id", "index", "entry", "root", "init"], "dist": ["loc", "err", "path", "d", "p", "dir", "cd", "Dist", "shift", "fun", "dest", "diff", "driver", "ist", "power", "deg", "wd", "ind", "dt", "core", "sp", "t", "exp", "hist", "rank", "delay", "adj", "des", "cp", "desc", "dis", "dim", "progress", "dd", "inf", "Distance", "data", "coord", "xp", "pred", "sum"], "distance_list": ["distance_lists", "dist_level", "distance_set", " distance_string", "distance2table", "distance2string", " distance_lists", "dist_List", "distance_level", "distance2lists", "distance2List", "distance2list", " distance2string", "distance2set", " distance2List", "dist_table", "distance_List", "distance_string", "dist_lists", "distance_dict", "dist_dict", "distance_table", " distance2list", "dist_list", "dist_set", " distance_List"], "explored": ["Explored", "explorer", " Explored", "uscorer", "exploved", "Explied", "exploring", "explore", "uscoring", "implore", "encore", "iscated", "occuporing", "Exploved", "Explated", "encied", "Exploring", " Explated", "constoring", "occupoded", "ignied", "historing", "constorer", "imploded", "explated", "Exploded", "Explorer", "iscoring", "ignored", " Exploring", " Explore", "iscored", "encored", "ignoved", "encoved", "occupored", "occupore", "historer", "histored", "iscore", "explied", "constored", "histore", "imploring", "Explore", "exploded", "constore", "uscore", "ignore", "uscored", "implored"], "node": ["open", "stop", "client", "nt", "instance", "path", "point", "p", "edge", "name", "child", "cycle", "iter", "kid", "server", "value", "cell", "seed", "leaf", "set", "note", "Node", "kind", "ind", "num", "t", "begin", "key", "slave", "yn", "int", "nm", "row", "obj", "worker", "msg", "ode", "end", "new", "peer", "nw", "nn", "line", "np", "item", "id", "index", "data", "student", "entry", "root", "walk", "source", "field"], "cost": ["loc", "edge", "cd", "left", "value", "length", "weight", "control", "expl", "info", "graph", "step", "const", "wd", "func", "right", "df", "config", "count", "dc", "agg", "grade", "cons", "cal", "rank", "cos", "charge", "cp", "work", "cc", "Cost", "efficient", "co", "gain", "operator", "size", "gradient", "dd", "doc", "function", "draw", "sum"], "n": ["nr", "N", "net", "nt", "d", "p", "name", "ne", "cn", "g", "dn", "long", "sn", "r", "m", "z", "ns", "o", "nl", "h", "num", "t", "len", "nb", "mn", "na", "v", "int", "nc", "nu", "size", "nw", "l", "nn", "np", "ng"], "tree": ["choice", "nt", "path", "table", "db", "split", "trip", "test", "image", "seed", "wt", "map", "set", "buffer", "connection", "total", "window", "prime", "graph", "step", "rees", "t", "response", "depth", "out", "forest", "search", "list", "cache", "model", "tower", "directory", "tr", " trees", "ree", "div", "index", "data", "dict", "root", "sequence", "Tree", "storage"], "_": ["Name", "T", "L", "__", "pre", "ly", "my", "Local", "ix", "let", "val", "f", "place", "____", "pt", "non", "P", "int", "all", " __", "\u00e7", "D", "___", "ac"], "distance": ["history", "sum", "path", "d", "trip", "score", "value", "image", "position", "length", "radius", "weight", "diff", " distances", "driver", "power", "duration", "time", "response", "density", "depth", "cache", "delay", "height", "directory", "dimension", "direction", "dim", "command", "relative", "Distance", "data", "relation", "dict", "sequence", "definition", "version", "transform"], "a": ["ia", "ae", "ab", "aff", "aj", "p", "d", "va", "ai", "xa", "r", "ma", "ga", "ea", "la", "aaa", "pa", "f", "abs", "t", "alpha", "art", "an", "e", "all", "ad", "A", "al", "at", "sa", "af", "app", "au", "oa", "aa", "l", "am", "ar", "u", "area", "ba", "ca", "ac"], "b": ["bis", "bu", "sb", "bf", "ab", "d", "p", "db", "g", "ib", "r", "bg", "z", "bi", "fb", "ble", "rb", "bo", "h", "be", "ob", "br", "f", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "eb", "base", "cb", "bl", "l", "aa", "bin", "u", "bs", "ba"], "c": ["ec", "ce", "con", "lc", "d", "cd", "g", "ct", "rc", "tc", "fc", "col", "h", "f", "bc", "dc", "sc", "e", "cin", "cache", "cos", "cp", "com", "abc", "co", "cc", "cb", "l", "etc", "cl", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "q": ["ck", "d", "p", "g", "qu", "iq", "qt", "r", "w", "z", "m", "qi", "f", "t", "Q", "v", "e", "qq", "ok", "qa", "it", "ch", "dq", "u", "qs", "ik", "ry"], "k": ["km", "ck", "ki", "max", "kr", "kh", "kl", "d", "p", "g", "ak", "ke", "kid", "r", "m", "z", "ks", "o", "ko", "f", "tk", "t", "key", "kj", "v", "e", "ok", "it", "end", "ku", "u", "kk", "id", "K", "ik", "ka", "sk", "index"], "query": ["find", "une", "feature", "comment", "complete", "random", "quad", "select", "match", "suggest", "confirmed", "view", "where", "qu", "test", "series", "image", "vector", "condition", "window", "scan", "Query", "eries", "menu", "Q", "parse", "check", "search", "final", "qq", "rank", "qa", "question", "work", "equal", "see", "lock", "dq", "verse", "then", "command", "pipe", "range", "index", "square", "sequence"], "x": ["wx", "xi", "ex", "xe", "ux", "xc", "xa", "rx", "w", "ox", "xt", "xml", "ix", "tx", "ax", "xd", "int", "fx", "at", "xy", "xs", "mx", "dx", "xx", "lat", "yx", "lex", "px", "xp", "ick"], "y": ["sy", "ty", "ys", "yer", "ym", "wy", "cy", "z", "ies", "ny", "ye", "py", "h", "yr", "ery", "hy", "t", "yout", "yl", "v", "yn", "ey", "gy", "iy", "xy", "yt", "Y", "yy", "ya", "ay", "ry"], "XX": ["DJ", "IX", "NRS", "ZZ", "VI", "NV", "TX", "ux", "JR", "SS", "IGHT", "MX", "YS", "NN", "VS", "UX", "OX", "VW", "XXXX", "Query", "XY", "GG", "EXP", "OSS", "MM", "NK", "XP", "DX", "Sex", "DD", "Phoenix", "US", "xy", "YY", "LV", "XXX", "CC", "INFO", "xx", "lux", "XL", "Xi"], "X": ["N", "IX", "T", "TX", "SS", "R", "EX", "MX", "UX", "OX", "ICE", "XXXX", "W", "Query", "XY", "V", "XP", "S", "Xi", "XM", "DX", "J", "Q", "TeX", "Tx", "P", "FX", "D", "XT", "XXX", "Y", "XL", "K", "Array", "Z", "Data"], "i": ["mi", "xi", "ie", "ci", "gi", "p", "di", "ai", "I", "m", "bi", "ic", "ix", "ip", "ri", "si", "li", "ii", "ji", "v", "ti", "iy", "im", "it", "ini", "zi", "phi", "l", "pi", "ij", "iu"], "j": ["uj", "ja", "js", "aj", "p", "name", "jp", "jc", "z", "oj", "jj", "o", "ix", "jl", "je", "J", "bj", "key", "ji", "kj", "v", "li", "obj", "it", "jump", "l", "dj", "ij"]}}
{"code": "N,K = map(int,input().split())\\nR,S,P = map(int,input().split())\\nT = input()\\n\\n#i\u56de\u76ee\u3001j\u306e\u624b\u3092\u51fa\u3057\u305f\u6642\u306e\u70b9\u6570\u306e\u6700\u5927\u5024\\ndp = [[0]*3 for _ in range(N)]\\n\\nfor i in range(N):\\n  if i>=1:\\n    dp[i][0] += max(dp[i-1][0],dp[i-1][1],dp[i-1][2])\\n    dp[i][1] += max(dp[i-1][0],dp[i-1][1],dp[i-1][2])\\n    dp[i][2] += max(dp[i-1][0],dp[i-1][1],dp[i-1][2])\\n    \\n  if T[i] == \"s\":\\n    dp[i][0] += R\\n  if T[i] == \"p\":\\n    dp[i][1] += S\\n  if T[i] == \"r\":\\n    dp[i][2] += P\\n    \\n  if i-K >= 0:\\n    dp[i][0] += max(dp[i-K][1],dp[i-K][2]) - max(dp[i-K][0],dp[i-K][1],dp[i-K][2])\\n    dp[i][1] += max(dp[i-K][2],dp[i-K][0]) - max(dp[i-K][0],dp[i-K][1],dp[i-K][2])\\n    dp[i][2] += max(dp[i-K][0],dp[i-K][1]) - max(dp[i-K][0],dp[i-K][1],dp[i-K][2])\\n  \\nprint(max(dp[-1][0],dp[-1][1],dp[-1][2]))", "target": "383", "substitutes": {"N": ["M", "n", "NS", "NC", "Ns", "X", "I", "L", "NA", "NN", "NR", "H", "O", "V", "B", "J", "Q", "G", "E", "D", "Y", "Ni", "F", "Z", "C"], "K": ["M", "NS", "KR", "X", "I", "L", "W", "H", "V", "KS", "B", "J", "Q", "G", "A", "D", "Y", "k", "U", "Z", "KE", "KA", "C"], "R": ["M", "X", "L", "RS", "RF", "NR", "Rs", "DR", "RA", "W", "H", "V", "B", "J", "Q", "G", "E", "RR", "D", "RO", "F", "SR", "Z", "C"], "S": ["SN", "M", "NS", "SH", "SS", "SL", "SB", "X", "I", "RS", "SI", "SM", "V", "J", "G", "SE", "A", "E", "s", "SP", "Y", "SA", "SR", "C"], "P": ["M", "p", "TP", "PC", "X", "I", "L", "PT", "H", "O", "V", "CP", "B", "J", "Q", "G", "A", "E", "D", "Y", "PD", "F", "C"], "T": ["WT", "M", "TR", "TP", "X", "L", "PT", "W", "H", "O", "V", "TN", "t", "B", "J", "Q", "G", "A", "E", "TT", "D", "Y", "U", "F", "Z", "C"]}}
{"code": "#!/usr/bin/env python3\\n#M-SOLUTIONS \u30d7\u30ed\u30b3\u30f3\u30aa\u30fc\u30d7\u30f3 D\\n\\nimport sys\\nimport math\\nfrom bisect import bisect_right as br\\nfrom bisect import bisect_left as bl\\nsys.setrecursionlimit(1000000000)\\nfrom heapq import heappush, heappop,heappushpop\\nfrom collections import defaultdict\\nfrom itertools import accumulate\\nfrom collections import Counter\\nfrom collections import deque\\nfrom operator import itemgetter\\nfrom itertools import permutations\\nmod = 10**9 + 7\\ninf = float('inf')\\ndef I(): return int(sys.stdin.readline())\\ndef LI(): return list(map(int,sys.stdin.readline().split()))\\n\\nn = I()\\ncnt = [0]*n\\ngraph = [[] for _ in range(n)]\\nfor _ in range(n-1):\\n    a,b = LI()\\n    cnt[a-1] += 1\\n    cnt[b-1] += 1\\n    graph[a-1].append(b-1)\\n    graph[b-1].append(a-1)\\nc = LI()\\nm = sum(c) - max(c)\\nprint(m)\\nd = [0]*n\\nfor i in range(n):\\n    if cnt[i] == 1:\\n        d[i] = max(c)\\n        break\\nc.sort(reverse = True)\\nc = c[1:]\\nque = deque(c)\\ndef dfs(x,p):\\n    for v in graph[x]:\\n        if v != p:\\n            if d[v] == 0:\\n                d[v] = que.popleft()\\n                dfs(v,x)\\ndfs(i,-1)\\nprint(*d)\\n", "target": "364", "substitutes": {}}
{"code": "n = int(input())\\n\\ncount = 0\\nfor _ in range(n):\\n    a, b = input().split()\\n    if a == b:\\n        count += 1\\n    else:\\n        count = 0\\n    if count == 3:\\n        print(\"Yes\")\\n        quit()\\n\\nprint(\"No\")\\n", "target": "709", "substitutes": {"n": ["nr", "N", "x", "nt", "gn", "ln", "d", "p", "ne", "g", "i", "sn", "r", "c", "m", "z", "ns", "nl", "f", "num", "t", "nia", "len", "nb", "no", "mn", "na", "v", "nc", "size", "nn", "l", "number", "np", "j", "k"], "count": ["hold", "find", "th", "comment", "nt", "state", "cont", "cd", "child", "cycle", "test", "ct", "i", "long", "ount", "length", "c", "current", "process", "total", "ind", "cmd", "num", "quit", "t", "bool", "nb", "cond", "part", "thread", "force", "amount", "conf", "check", "cache", "ch", "flag", "first", "found", "now", "print", "size", "counter", "q", "l", "number", "Count", "index", "last", "sum"], "_": ["x", " the", " y", " j", " k", "__", " do", "val", " __", "___", "k", "ay"], "a": ["x", "sta", "ae", "ab", "aff", "p", "va", "ai", "c", "ma", "el", "ga", "ea", "la", "aaa", "act", "f", "alpha", "art", "apa", "an", "e", "A", "al", "at", "ao", "sa", "au", "oa", "aa", "l", "le", "am", "er", "ya", "ba", "ca"], "b": ["bis", "sb", "ab", "bar", "d", "p", "db", "beta", "i", "c", "z", "batch", "bi", "fb", "bo", "rb", "mb", "be", "ob", "f", "bc", "nb", "B", "bb", "v", "s", "eb", "base", "cb", "l", "j", "y", "bs", "ba", "back"]}}
{"code": "def a174(x):\\n\\n    return \"Yes\" if x >= 30 else \"No\"\\n\\ndef main():\\n    x = int(input())\\n    print(a174(x))\\n\\nif __name__ == '__main__':\\n    main()", "target": "371", "substitutes": {"x": ["a", "wx", "n", "xi", "ex", "max", "xe", "p", "xc", "X", "xa", "i", "rx", "long", "w", "c", "ox", "z", "xt", "tx", "ax", "f", "xd", "b", "t", "xxxxxxxx", "v", "e", "int", "xy", "xs", "mx", "dx", "q", "xx", "yes", "number", "l", "u", "k", "y", "xp", "xf"]}}
{"code": "n = int(input())\\npair = [1, 1]\\n\\nfor i in range(n - 1):\\n    pair[i % 2] = sum(pair)\\n\\nprint(pair[n % 2])\\n\\n", "target": "152", "substitutes": {"n": ["N", "net", "nt", "ni", "gn", "d", "p", "en", "name", "names", "ne", "cn", "sn", "c", "m", "ns", "nl", "b", "num", "t", "nia", "len", "nb", "no", "mn", "na", "v", "nc", "nm", "nan", "nu", "nw", "size", "nn", "q", "l", "np", "ll", "number", "network", "j", "k", "chain"], "pair": ["local", "quad", "attribute", "bar", "p", "port", "match", "point", "order", "component", "side", "air", "test", "common", "value", "store", "pen", "comb", "airs", "vector", "map", "set", "batch", "buffer", "pad", "diff", "prefix", "finger", "cert", "portion", "pool", "cur", "result", "place", "word", "double", "count", "bag", "part", "share", "parse", "key", "P", "both", "list", "pixel", "inter", "qual", "phrase", "group", "print", "detail", "tmp", "sample", "mem", "band", "pur", "coord", "array", "function", "chain"], "i": ["mi", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "c", "m", "batch", "bi", "ami", "ix", "ind", "b", "si", "ii", "li", "key", "v", "ti", "im", "it", "s", "zi", "ui", "ini", "q", "pi", "u", "id", "j", "k", "fi", "y", "ij"]}}
{"code": "import sys\\nsys.setrecursionlimit(1000000)\\ndef dfs(u):\\n    if(dp[u]!=-1):\\n        return dp[u]\\n    for i in d[u]:\\n        if(dp[i]!=-1):\\n            dp[u]=max(dp[u],dp[i]+1)\\n        else:\\n            dp[u]=max(dp[u],dfs(i)+1)\\n    return max(dp[u],0)\\nfrom collections import defaultdict as dd\\nn,m=map(int,input().split())\\nd=dd(list)\\nfor i in range(m):\\n    u,v=map(int,input().split())\\n    d[u].append(v)\\ndp=dd(lambda: -1)\\nmx=0\\nfor i in range(1,n+1):\\n    if(dp[i]==-1):\\n        dp[i]=dfs(i)\\n    mx=max(mx,dp[i])\\nprint(mx)", "target": "663", "substitutes": {"u": ["ut", "bu", "lu", "uri", "uj", "su", "gu", "um", "p", "mu", "util", "ul", "ue", "uid", "uni", "us", "uv", "ju", "hu", "pu", "you", "uc", "eu", "uci", "tu", "ug", "ud", "ru", "up", "un", "fu", "ou", "ur", "ui", "uf", "nu", "au", "cu", "user", "du", "yu", "uu", "U", "iu", "back"], "i": [" I", "\u00ed", "ki", "mi", "xi", "x", "ia", "uri", "ci", "gi", "cli", "p", "di", "ai", "I", "iter", "r", "c", "bi", "info", "yi", "qi", "ic", "ix", "o", "ip", "iri", "ind", "b", "ri", "t", "multi", "si", "ii", "li", "ji", "ori", "int", "ti", "e", "ei", "im", "it", "s", "ini", "zi", "ui", "l", "pi", "phi", "id", "j", "fi", "y", "ij", "ik", "k", "iu", "hi"], "dp": ["fd", "pkg", "dro", "dos", "pm", "imp", "dm", "p", "db", "cd", "mp", "vp", "dial", "jp", "td", "deep", "dh", "gd", "password", "dl", "fp", "pb", "dk", "gp", "bsp", "wd", "tp", "decl", "dt", " gp", "df", "cmd", "dc", "isp", "dep", "dump", "da", "DP", "wp", "parse", "lp", "pd", "dr", "tap", "drop", "delay", "deb", "cp", "bps", "dx", "dq", "pipe", "bp", "dd", "dj", "lat", "du", "np", "px", "pp", "ds", "ps", "adr"], "n": ["N", "x", "nt", "ni", "ln", "p", "g", "cn", "dn", "w", "sn", "c", "z", "ns", "o", "nl", "h", "ms", "num", "fn", "t", "len", "nb", " l", "mn", "yn", "nc", "nm", " ns", "nn", "l", "np", "j", "k"], "m": ["tm", "mi", "km", "M", "mr", "x", "mod", "dm", "mo", "mm", "p", "mu", "r", "c", "ml", "mas", "bm", "o", "gm", "h", "ms", "b", "num", "mis", "mc", "mn", "om", "wm", "l", "np", "mem", "j", "y", "month", "mt", "cm"], "d": ["fd", "dos", "dm", "p", "db", "ld", "g", "di", "td", "gd", "dh", "c", "bd", "dl", "done", "dt", "df", "b", "dat", "dep", "dc", "dump", "da", "dr", "pd", "des", "D", "dq", "do", "l", "dd", "du", "did", "sd", "j", "dj", "data", "dict", "ds", "md", "nd"], "v": ["qv", "x", "vd", "p", "vi", "vo", "tv", "va", "value", "r", "w", "uv", "ev", "o", "h", "vr", "V", "f", "b", "t", "ver", "av", "nv", "lv", "vm", "sv", "ve", "l", "vs", "var", "j", "vt", "y"], "mx": ["tm", "wx", "xi", "max", "mr", "x", "gc", "dm", "mm", "mu", "ux", "mp", "pc", "xc", "hz", "MX", "ox", "ml", "ns", "dl", "total", "ctx", "xml", "cpu", "mb", "tp", "ms", "tx", "ls", "mc", "mac", "mn", "fx", "mic", "vm", "nz", "cp", "xs", "dx", "inx", "wm", "hd", "nn", "mem", "yx", "px", "md", "mt"]}}
{"code": "N = int(input())\\n\\na = list(map(int, input().split()))\\n\\nodd_count = 0\\nfour_count = 0\\n\\nans = 'Yes'\\n\\nfor i in a:\\n    if i % 2 == 1:\\n        odd_count += 1\\n    if i % 4 == 0:\\n        four_count += 1\\n\\nif len(a) % 2 == 0:\\n    if odd_count > four_count:\\n        ans = 'No'\\nelse:\\n    if odd_count <= four_count or len(a) == odd_count + four_count and odd_count -1 <= four_count:\\n        pass\\n    else:\\n        ans = 'No'\\n\\nprint(ans)\\n", "target": "612", "substitutes": {"N": ["M", "n", "T", "X", "R", "I", "L", "NR", "H", "O", "V", "S", "B", "J", "Q", "Wh", "G", "P", "Num", "A", "E", "D", "Y", "Count", "Ni", "K", "F", "Z", "C"], "a": ["n", "x", "to", "sta", "ae", "ac", "ab", "ta", "p", "ana", "va", "xa", "r", "w", "c", "ma", "m", "set", "ata", "input", "eas", "o", "ea", "la", "aaa", "abs", "b", "t", "out", "na", "an", "e", "all", "list", "A", "at", "sa", "s", "another", "ao", "new", "oa", "au", "aa", "l", "am", "ar", "j", "y", "index", "data", "area", "ca"], "odd_count": ["oddlystatus", " odd_html", "row_start", "odd64sum", "oddityCount", "odd_length", "odditycall", "row_count", "rowlycount", "oddlykey", "odd_check", "row_Count", "row_call", " odd_limit", " odd_call", "unknown_check", "odd_html", "odd64Count", "odd_num", "od_count", "oddlynum", "odd_call", "odd64count", " odd_length", "oddlylimit", "odd_status", "od_status", "oddlyCount", "odd_key", "od_key", "oddlycount", "unknown_Count", "odd_sum", "odditystart", " odd_Count", "oddlylength", " odd_sum", " odd_num", "unknown_count", "oddlystart", "odd64html", "odditycount", "oddlycall", "odd_limit", "rowlystart", "rowlyCount", "odd_Count", "rowlycall", "odd_start"], "four_count": ["four\u0648amount", "fine_length", " fourxCount", "fourlyCount", "fine_counter", "four64check", "fourlyindex", "four\u0648Count", "worthy_count", "four64list", "fif_tag", "fourxforce", "four_list", "fourxcount", " four_force", "fourxCount", "four_code", "four\u0648count", "four64code", "fourlycounter", "finelycount", "fif_count", "fif\u0648Count", " four_check", "four_length", "fif_amount", " four_list", "Four_count", " four_code", "fourxfound", "fif\u0648amount", "fourlyfound", "four_check", "worthy_index", "four_counter", "four_amount", "four64count", " four_Count", "fif_Count", "four\u0648tag", "fif\u0648tag", " fourxfound", "worthy_Count", "fourlylength", "four_force", "four_Count", "Four_length", " fourxforce", "finelycounter", "finelylength", "worthy_found", "fif\u0648count", "four_tag", "fourlycount", "four_found", "four_index", " fourxcount", " four_found", "fine_count", "Four_amount"], "ans": ["arms", "ars", "ys", "ANS", "ians", "ats", "ants", " means", "eds", "cn", "outs", "helps", "aus", "aned", "san", "mails", "ns", "ann", "ums", "rs", "anas", "leans", "offs", "ins", "ks", "ras", "vers", "ons", "said", "amps", "angs", "ls", "ents", "ens", "ots", "orders", "mn", "uns", "an", "jas", "anks", "posts", "iann", "anes", "aps", "ays", "atts", "ams", "aos", "vs", "aints", "ads", "arts", "os", "asms", "olds"], "i": [" ii", "\u00ed", "iii", "xi", "x", "n", "ni", "iom", "ci", " wi", "di", "ai", "I", "c", "ami", " di", "iti", "ic", "o", " bi", "b", "t", "io", "si", "ii", "li", "ei", "ori", "v", "ti", "oi", "it", " vi", "zi", "ini", " ti", "phi", " ki", "pi", "ati", "id", "iat", "hi", " Xi"]}}
{"code": "n = int(input())\\nroom_list = [[[0 for i in range(10)] for j in range(3)] for k in range(4)]\\nfor i in range(n):\\n    b, f, r, v = map(int, input().split())\\n    room_list[b - 1][f - 1][r - 1] += v\\n\\noutput =[]\\nfor i in range(4):\\n    for j in range(3):\\n        output = list(map(str, room_list[i][j]))\\n        print(\" \" + \" \".join(output))\\n    if i < 3:\\n        print(\"#\" * 20)", "target": "703", "substitutes": {"n": ["nr", "N", "nt", "ni", "d", "p", "ne", "sn", "c", "w", "m", "ns", "o", "num", "t", "nb", "no", "mn", "na", "nc", "s", "nan", "nu", "size", "nn", "number", "l", "np", "pi", "network"], "room_list": ["home_stat", "hall_l", "room_stat", "home2stat", "room67list", "hall_def", "room_def", "room_l", "home_List", "room67List", "home_lists", "hall_dict", "room67cl", "roomListList", "home2list", "room_cl", "roomListlist", "room_lists", "home2lists", " room_cl", "room2stat", " room_List", "home2List", "room67lists", "room2list", "roomListstat", "room2lists", "room2List", "roomListlists", "home_list", "room_List", "hall_list", "room_dict", " room_lists"], "i": ["a", "mi", "ki", "xi", "x", "ia", "ni", "ci", "gi", "ir", "p", "di", "ai", "I", "c", "m", "z", "bi", "yi", "iti", "ic", "o", "h", "ind", "ri", "t", "io", "si", "li", "ii", "ji", "e", "ei", "ti", "oi", "im", "it", "ini", "zi", "l", "pi", "u", "id", "y", "ik", "ij", "index", "iu"], "j": ["x", "uj", "ja", "ijk", "js", "d", "p", "g", "jp", "ak", "kid", "job", "jc", "oj", "z", "m", "c", "jj", "bi", "o", "h", "pr", "ind", "fr", "br", "kok", "t", "J", "bj", "key", "ji", "kj", "e", "it", "q", "kt", "l", "dj", "kk", "y", "ij", "ik"], "k": ["ki", "x", "ia", "kh", "ijk", "p", "ian", "g", "iq", "ak", "kid", "ks", "o", "ix", "ind", "iv", "key", "kj", "it", "ku", "q", "u", "kk", "ka", "y", "ik", "init", "ac"], "b": ["a", "bis", "sb", "bf", "ab", "db", "ib", "lb", "bg", "c", "bi", "ble", "fb", "bo", "rb", "h", "be", "ob", "br", "bc", "gb", "nb", "B", "bb", "bt", "eb", "bl", "l", "bp", "y", "bs", "ba"], "f": ["fd", "x", "ter", "bf", "d", "fm", "g", "fs", "sf", "fp", "fb", "fed", "h", "be", "fa", "fr", "fe", "fo", "fl", "ff", "e", "fx", "tf", "ed", "l", "fg", "u", "fi", "er", "F", "ft"], "r": ["a", "mr", "sr", "rr", "ro", "d", "p", "g", "R", "rc", "re", "w", "c", "m", "rb", "o", "h", "vr", "fr", "ri", "dr", "ur", "s", "gr", "rt", "q", "l", "ar", "er", "cr", "rd"], "v": ["a", "x", "d", "p", "vi", "g", "tv", "value", "w", "uv", "c", "m", "z", "o", "h", "V", "vr", "t", "ver", "e", "s", "sv", "ve", "q", "l", "u", "y", "vt"], "output": ["next", "body", "secondary", "scroll", "echo", "Output", "write", "put", "left", "human", "successful", "job", "position", "generated", "current", "control", "batch", "buffer", "input", "format", "success", "step", "o", "outer", "tail", "display", "result", "quiet", "second", "product", "hidden", "response", "block", "out", "list", "wrong", "console", "print", "four", "detail", "new", "operation", "network", "shell", "data", "production", "text", "connected"]}}
{"code": "N, K = map(int, input().split())\\nA = [-1] * (N+1)\\nfor i in range(K):\\n  d_list = int(input())\\n  B = input().split()\\n  B = [int(x) for x in B]\\n  for i in range(1, N+1):\\n    if i in B:\\n      A[i] = 1\\ncount = 0\\nfor i in range(1, N+1):\\n  if A[i] == -1:\\n    count += 1\\nprint(count)", "target": "252", "substitutes": {"N": ["SN", "Name", "M", "n", "NS", "T", "NC", "NI", "Ns", "I", "NA", "L", "NM", "NN", "NP", "NR", "NT", "NH", "H", "Node", "V", "TN", "No", "NO", "S", "NE", "J", "Q", "G", "ND", "P", "D", "NB", "MN", "Ni", "F", "AN", "Z", "C"], "K": ["M", "T", "KN", "KR", "R", "X", "I", "KK", "H", "V", "KS", "TN", "KC", "PK", "NK", "S", "J", "Q", "SK", "G", "P", "D", "NB", "Y", "Size", "UK", "k", "F", "KI", "Z", "KE", "KA", "KING", "C"], "A": ["a", "GA", "M", "T", "Ax", "An", "IA", "Alpha", "AT", "I", "L", "NA", "AL", "AV", "AB", "AE", "H", "AA", "As", "V", "AR", "S", "EA", "G", "This", "P", "AP", "HA", "CA", "At", "D", "AF", "AM", "Count", "SA", "AC", "BA", "The", "Array", "C"], "i": ["a", " ii", "ki", "n", "xi", "ia", "mi", "gu", "ci", "gi", "cli", "d", "p", "di", "ai", "I", "c", "m", "bi", " di", "yi", "qi", "iti", "ic", "ski", "ip", "ind", "f", "multi", "ri", "t", "io", "si", "li", "ii", "ji", "ei", "v", "int", "ti", "ori", "Ti", "im", "it", " vi", "ini", "zi", "ui", "phi", "pi", "il", "ati", "l", "k", "y", "j", "ik", "ij", "fi", "iu", "hi", "index"], "d_list": ["dewset", "d_set", "d2l", "p_i", "d2list", "d2i", "d2set", "p_l", "dewi", "p_list", "d_l", "dewlist", "d_i", "p_set", "dewl"], "B": ["Other", "M", "BI", "CB", "T", "RB", "BL", "BS", "VB", "Bs", "SB", "R", "I", "L", "Two", "AB", "BG", "Be", "W", "O", "V", "BT", "Bank", "b", "S", "BC", "BE", "J", "BR", "G", "WB", "P", "BB", "E", "TB", "D", "NB", "EB", "Y", "BO", "Bi", "DB", "BA", "Z", "C"], "x": ["a", "wx", "n", "xi", "ex", "xe", "p", "xc", "X", "ai", "rx", "xa", "r", "xxxx", " X", "xt", " ax", "xxx", "ix", "o", "tx", "xd", "t", " dx", "xxxxxxxx", "key", "v", "e", "an", " xx", "zx", "at", "xy", "xf", "xs", "mx", "xb", "dx", "l", "xx", " cx", "u", "k", "y", "px", " Xi"], "count": ["next", "hold", "n", "th", "comment", "nt", "state", "stat", "p", "child", "OUNT", "test", "code", "common", "zero", "ount", "length", "c", "report", "weight", "process", "status", "total", "success", "result", "ind", "num", "t", "bool", "multi", "nb", "force", "amount", "conf", "add", "flag", "found", "group", "print", "counter", "q", "number", "Count", "id", "index", "sum"]}}
{"code": "n,m=map(int,input().split())\\na=[0]+list(map(int,input().split()))\\na[0]%=2\\nfor i in range(n):\\n\ta[i+1]+=a[i]\\n\ta[i+1]%=m\\na.sort()\\nans=0\\ncnt=1\\nfor i in range(n):\\n\tif a[i]==a[i+1]:\\n\t\tcnt+=1\\n\telse:\\n\t\tans+=cnt*(cnt-1)//2\\n\t\tcnt=1\\nans+=cnt*(cnt-1)//2\\nprint(ans)", "target": "23", "substitutes": {"n": ["N", "x", "net", "nt", "ln", "d", "p", "ne", "sn", "r", "c", "ns", "o", "h", "b", "num", "t", "nia", "nb", "no", "mn", "na", "v", "an", "nc", "s", "nu", "nn", "l", "q", "np", "pi", "j", "y", "k"], "m": ["tm", "mi", "M", "mr", "max", "x", "dm", "d", "p", "mm", "r", "c", "ref", "man", "bm", " M", "rm", "o", "h", "ms", "f", "b", "num", "t", "mc", "mn", "v", "all", "sm", "s", "size", "l", "k", "y", "j", "cm", "mt"], "a": ["sta", "ae", "ab", "aff", "ta", "p", "en", "ana", "va", "ai", "xa", "c", "ma", "set", "ata", "eas", "ga", "aux", "o", "ea", "la", "aaa", "pa", "h", "done", "go", "f", "b", "t", "auto", "alpha", "da", "ua", "apa", "out", "an", "att", "e", "all", "A", "ap", "cache", "obj", "at", "sa", "ao", "s", "another", "ha", "app", "ena", "au", "oa", "aos", "aa", "l", "pi", "am", "ar", "area", "ack", "ba", "ca", "ac"], "i": ["mi", "ki", "xi", "x", "ia", "uri", "ni", "me", "gu", "ci", "gi", "ir", "p", "di", "ai", "I", "bi", "yi", "qi", "ic", "ix", "ski", "ip", "iri", "ind", "f", "ri", "io", "si", "ii", "li", "ji", "v", "ei", "int", "ti", "oi", "ori", "iy", "im", "it", "zi", "ini", "ui", "\u0438", "phi", "pi", "l", "id", "j", "y", "index", "ik", "ij", "iu", "hi"], "ans": ["ars", "ANS", "ants", "ats", "ians", "ints", "actions", "names", "eds", " means", "outs", "aus", "ros", "aned", "ns", "vals", "ann", "rs", "anas", "ks", "offs", "ins", "leans", "ons", "ms", "amps", "angs", "ls", "ents", "ens", "cons", "uns", "can", "an", "posts", "gs", "anks", "aps", "oss", "anes", "s", "xs", "nas", "ands", "aos", "vs", "cs", "arts", "os", "es", "stats", "ds", "orts"], "cnt": ["Cret", "CNT", "mnt", "cgt", "icgt", "uncnt", "mct", "cumd", "count", "Cnc", " cNT", "ccnt", " cht", "cst", "vccrit", "ncount", "tcnt", "Cnt", " cst", "uncht", "tcret", "vcnt", "ccdf", "cdf", "cNT", "csnt", "cret", "vcct", " cust", "csNT", "cust", "ccrit", "Cdf", " cmd", " cct", "tcct", " cnc", "cunt", "cpt", "ncnt", "csnc", "Count", "uncgt", "icht", "cnc", "tcnc", "mst", "mnc", "csret", "ctr", "ncpt", "cht", "mtr", "ncNT", "vcdf", "uncNT", " count", " cgt", "tcNT", " ctr", "Ccrit", "Cpt", "cct", "cmd", "ccct", "cccrit", "icnt", "tcust", "mmd", "Cust", "Cct", "cutr", " cpt", "icNT", "cuct", "Cst"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nN,M,K=list(map(int,input().split()))\\nfor iN in range(N+1):\\n    for iM in range(M+1):\\n        tmp = (N-iN)*(iM)+(iN)*(M-iM)\\n        if tmp == K:\\n            print('Yes')\\n            exit()\\nprint('No')\\n", "target": "92", "substitutes": {"input": ["str", "select", "insert", "got", "get", "reset", "raw", "password", "control", "focus", "read", "socket", "format", "output", "quiet", "cmd", "act", "fn", "hidden", "form", "feed", "conf", "add", "out", "Input", "list", "int", "string", "sleep", "exec", "print", " Input", "q", "hello", "command", "sample", "service", "paste", "sequence", "text", "source", "request", "sum"], "N": ["SN", "CNN", "n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "NA", "L", "NM", "NN", "CN", "NR", "NT", "NOR", "NH", "H", "O", "V", "NO", "NUM", "S", "NE", "B", "J", "G", "ND", "This", "P", "NPR", "A", "D", "NB", "ON", "Y", "MN", "F", "AN", "UN", "TN", "C"], "M": ["MO", "T", "CM", "MK", "MAT", "R", "I", "JM", "L", "NM", "MX", "RM", "m", "H", "MM", "O", "MC", "V", "MER", "C", "MON", "IM", "MD", "S", "MAN", "MODE", "B", "J", "G", "P", "MP", "MA", "E", "MS", "D", "MH", "DM", "TM", "MN", "MI", "MT", "LM", "F", "MR"], "K": ["KO", "T", "KN", "KY", "KR", "MK", "AK", "KEY", "X", "I", "R", "KK", "H", "FK", "KING", "MC", "KS", "V", "PK", "NK", "J", "SK", "Q", "P", "HK", "VK", "Y", "OK", "UK", "k", "KI", "Z", "KE", "KA", "KB", "C"], "iN": ["siN", "eL", "ziNN", "intG", "siR", " iNH", "iiNA", "iR", " iNS", " iNA", "eN", "intN", "iiG", " iG", "ziN", " iNN", "iL", "siNS", "iNA", "xiL", "ziNS", "xiM", "iiM", "iG", "siNN", "xiNH", "eNH", "iiN", "iNS", "iNN", "iNH", "xiN", " iR", "eM", "ziR", " iL", "intM", "intNA"], "iM": ["miC", "INM", "IN", "jK", "nM", "xiMC", "jM", "nMC", " iMM", "miMM", "nK", "iMT", "xiK", "eN", "IM", "diM", "eMT", "eNM", "iC", "IMT", "jMC", "xiM", "iMC", "miM", "diN", "jN", "diMM", "miN", "nMT", "iK", "xiN", "diC", "nN", "eM", " iC", "iMM", "nNM", "iNM"], "tmp": ["dirty", "cmp", "before", "T", "prev", "mm", "mp", "test", "this", "mmm", "txt", "unique", "m", "mut", "prime", "term", "sp", "vP", "ready", "pretty", "auto", "alpha", "nb", "temp", "det", "qq", "emp", "MP", "obj", "tt", "cp", "now", "TT", "etc", "np", "kk", "k", "attr", "same", "mk"]}}
{"code": "n,m = map(int, input().split())\\na = [input() for _ in range(n)]\\nb = [input() for _ in range(m)]\\n\\nflag = False  \\nfor i in range(n-m+1):\\n    #flag = True\\n    for k in range(n-m+1):\\n        flag=True#\u3053\u3053\\n        for j in range(i,i+m):\\n            #if i==k==3:\\n            #    print(a[j][k:k+m],b[j-i],a[j][k:k+m]==b[j-i],flag)\\n            if a[j][k:k+m]!=b[j-i]:\\n                flag = False\\n                break\\n        if flag:\\n            break\\n    if flag:\\n        break\\n#print(i,k,flag)        \\nprint(\"Yes\" if flag else \"No\")\\n", "target": "483", "substitutes": {"n": ["N", "x", "nt", "d", "p", "en", "ne", "cn", "g", "dn", "sn", "r", "c", "ns", "o", "h", "num", "t", "nia", "nb", "mn", "na", "v", "an", "nc", "nm", "s", "nan", "nu", "nn", "l", "q", "np", "ll", "j"], "m": ["tm", "mi", "M", "mr", "perm", "mod", "dm", "d", "p", "mm", "g", "r", "c", "man", "bm", "o", "gm", "h", "ms", "f", "mis", "t", "mc", "mn", "v", "sm", "im", "mx", "q", "l", "j", "cm", "mt", "mk"], "a": ["x", "ab", "p", "g", "w", "r", "c", "z", "o", "t", "alpha", "add", "an", "v", "e", "A", "al", "at", "sa", "s", "aa", "l", "ar", "array", "ba", "ca", "ac"], "_": ["local", "ing", "L", "Local", "ix", "val", "____", "pt", "P", "___", "l"], "b": ["sb", "x", "bf", "d", "emb", "p", "g", "r", "c", "z", "wb", "fb", "rb", "o", "mb", "ob", "bc", "B", "bb", "v", "e", "cb", "l", "j", "y", "bs", "ba"], "flag": ["hold", "dirty", "state", "gc", "ret", "reset", "set", "status", "bo", "success", "lag", "agged", "ground", "flags", "mask", "sp", "count", "bool", "cond", "quit", "Flag", "loaded", "force", "ed", "dq", "sync", "field"], "i": [" I", " ii", " iii", " seq", "x", " id", " e", " im", " j", " il", "I", " all", " Xi", " bi", " ip", " f", " q", " c", " vi", " p", " me", " v", "ij", " d", " key", " mi", " z"]}}
{"code": "N=int(input())\\nS=input()\\nans=0\\nfor i in range(1000):\\n    one=str(i//100)\\n    two=str((i%100)//10)\\n    three=str(i%10)\\n    f1,f2,f3=False,False,False\\n    ptr=0\\n    for j in range(ptr,N-2):\\n        if S[j]==one:\\n            f1=True\\n            ptr=j+1\\n            break\\n    if f1:\\n        for j in range(ptr,N-1):\\n            if S[j]==two:\\n                f2=True\\n                ptr=j+1\\n                break\\n        if f2:\\n            for j in range(ptr,N):\\n                if S[j]==three:\\n                    f3=True\\n                    ans+=1\\n                    break\\nprint(ans)", "target": "756", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "Ne", "NV", "GN", "NI", "Ns", "R", "I", "L", "NA", "NM", "Number", "NN", "NP", "NR", "CN", "NT", "NH", "V", "No", "NO", "Z", "NE", "B", "J", "ND", "Num", "P", "NJ", "Sn", "D", "NB", "Size", "MN", "Len", "Ni", "K", "AN", "TN", "C"], "S": ["M", "Source", "List", "T", "JS", "SF", "SH", "Series", "Sup", "SS", "SL", "SB", "X", "R", "I", "L", "Sl", "Si", "PS", "SO", "Su", "VS", "SI", "CS", "TS", "Set", "H", "GS", "V", "Sample", "ss", "B", "J", "G", "P", "SE", "A", "s", "Ds", "SP", "SU", "D", "ST", "Ps", "DS", "RS", "SA", "U", "F", "Spe", "C"], "ans": ["n", "ANS", "ants", "ats", "names", "ai", "aus", "span", "lines", "us", "aned", "ts", "ates", "ns", "ann", "rans", "rs", "rob", "ks", "offs", "ins", "res", "pointers", "ons", "ms", "amps", "flags", "ls", "trans", "ents", "ens", "ss", "uns", "an", "anks", "aps", "terms", "s", "inters", "xs", "vs", "yes", "ads", "cs", "rows", "arts", "os", "es", "stats", "ps", "points"], "i": ["mi", "json", "n", "xi", "x", "ie", "ci", "gi", "p", "di", "ai", "I", "c", "m", "jj", "bi", "ic", "ix", "o", "ip", "ind", "f", "t", "si", "ion", "ii", "li", "ji", "v", "ei", "int", "ti", "im", "it", "zi", "ui", "phi", "pi", "ati", "id", "ij", "ik", "iu", "hi"], "one": ["son", "such", "few", "han", "any", "seven", "ith", "single", "nine", "once", "rise", "given", "hen", "ven", "One", "zero", "ox", "only", "some", "ide", "either", "you", "alone", "eight", "ONE", "sense", "none", "so", "phone", "wise", "ve", " One", "hello", "many", "five", "onen", "ones"], "two": ["secondary", "seven", "goal", "multiple", "nine", "tw", "brown", "Two", "zero", "email", "south", " Two", "floor", "note", "only", "bo", "te", "second", "be", "double", "multi", "eight", "lower", "both", "ten", "another", "below", "ve", "video", "father", "danger", "many", "five", "cone", "geon"], "three": ["iii", "few", "quarter", "critical", "seven", "cue", "her", "million", "nine", "above", "thirds", "sup", "green", " Three", "mother", "ger", "wo", "usually", "multi", "eight", "tone", "private", "fourth", "Three", "ten", "third", "teen", "none", "tar", "four", "der", "liberal", "rice", "neutral", "five", "tie", "nuts"], "f1": ["v2", "Fone", " fone", "bf01", "k12", "k2", "vone", "FOne", "fl1", "bf2", "fl2", "p1", "bfone", "f12", "f01", "v01", "bf1", "kone", "fone", "pOne", "pone", " f01", "fl12", " f12", "flone", " fOne", "F2", "v1", "p2", "k1", "F1", "fOne"], "f2": ["iftwo", "form1", "h3", "e1", "f4", "f72", "bf2", "ftwo", " f72", "p1", "form2", "if3", "if4", "form02", "if8", "if2", " f8", "form72", "bf1", "h4", "bf8", "e2", "p72", "f02", "e3", "if1", "bftwo", "h2", " ftwo", "p02", "f8", "p2", "h1", " f02", "e4"], "f3": ["F03", "f03", " f33", " f03", "F3", "f39", "fl63", "F33", "conv39", "fl39", "F30", " f30", " f39", "conv63", "i3", "i30", "fl23", "i33", "f33", " f63", "f63", "fl3", "conv3", "conv23", " f23", "f23", "i03", "f30"], "ptr": ["loc", "pointer", "sh", "offset", "js", "p", "ret", "reset", "rep", "Ptr", "jp", "iter", "dest", "r", "tip", "pre", "dh", "ts", "push", "pad", "fp", "expr", "pert", "xt", "prime", "wr", "ctx", " pointer", "pointers", "ix", "tp", "const", "cert", "pr", "ind", "cmd", "ctr", "sp", "t", "dep", "pt", "address", "dr", "butt", "row", "obj", "inter", "inters", "tr", "req", "print", "addr", "proc", "tmp", "mem", "copy", "index", "ij", "mt", "ps", "adr", "start"], "j": ["json", "n", "x", "uj", "kh", "ja", "str", "gu", "aj", "js", "p", "g", "jp", "job", "oj", "jc", "z", "jj", "og", "note", "ju", "ix", "h", "pr", "ind", "jl", "f", "je", "jac", "sp", "br", "t", "pt", "ver", "J", "bj", "key", "ji", "kj", "v", "obj", "adj", "xy", "ch", "tr", "jump", "it", "jo", "hd", "q", "dj", "y", "jit", "er", "ij", "k"]}}
{"code": "s=input();print(\"YNeos\"[s!=s[::-1]::2])", "target": "289", "substitutes": {"s": ["a", "n", "sb", "x", "str", "js", "p", "g", "i", "r", "c", "ts", "z", "m", "ns", "rs", "input", "o", "sl", "h", "ls", "f", "b", "t", "S", "ss", "v", "e", "gs", "sq", "sts", "q", "l", "u", "j", "y", "qs", "ds", "ps", "bs"]}}
{"code": "A, B, C, D = map(int, input().split())\\nans = min(B, D) - max(A, C)\\nif ans < 0:\\n    ans = 0\\nprint(ans)", "target": "146", "substitutes": {"A": ["Al", "An", "IA", "Ar", "AT", "X", "Av", "I", "R", "AL", "Area", "AV", "AB", "App", "AE", "Act", "AA", "LA", "As", "AR", "AS", "Bar", "This", "CA", "At", "E", "AF", "SA", "AC", "ACT", "The", "Array", "Ag", "AP"], "B": ["BI", "Al", "RB", "BS", "OB", "Bs", "SB", "R", "L", "IB", "AB", "Reb", "BG", "BW", "BT", "b", "BE", "BC", "BBC", "Bar", "BR", "GB", "WB", "BD", "This", "G", "BB", "Blue", "Bern", "TB", "NB", "EB", "BO", "DB", "BA"], "C": ["CNN", "N", "CB", "IC", "CM", "CW", "JC", "LC", "CE", "c", "Cl", "Con", "CS", "Car", "Cs", "YC", "Cond", "CP", "V", "Ch", "VC", "S", "BC", "CD", "EC", "Co", "G", "CO", "DC", "Cons", "CA", "E", "CON", "CC", "AC", "CF", "Cos"], "D": ["M", "N", "DL", "T", "Def", "d", "DO", "DIR", "DE", "L", "DK", "DR", "DI", "W", "V", "DES", "Do", "DX", "DA", "DP", "Q", "G", "DD", "DC", "Dir", "DN", "You", "E", "Ds", "DS", "DM", "DF", "Date", "DB", "F"], "ans": ["ars", "ANS", "ants", "ats", "beans", "ean", "actions", " means", "outs", "irms", "aus", "ros", "lets", "aned", "ns", "vals", "ann", "rans", "mas", "rs", "anas", "ks", "offs", "leans", "ras", "ons", "ms", "acts", "amps", "ls", "pan", "ents", "ens", "cons", "uns", "can", "an", "posts", "gs", "aps", "anes", "oss", "oos", "s", "uploads", "ran", "ams", "nas", "aos", "ands", "rates", "ads", "arts", "cs", "os", "lan", "errors", "ds", "views", "olds"]}}
{"code": "import sys\\nimport copy\\nimport math\\nimport bisect\\nimport pprint\\nimport bisect\\nfrom functools import reduce\\nfrom copy import deepcopy\\nfrom collections import deque\\n\\nif __name__ == '__main__':\\n    a = [int(i) for i in input().split()]\\n\\n    if  a[0] + a[1]>a[2]+a[3]:\\n       print(\"Left\")\\n    elif a[0] + a[1]==a[2]+a[3]:\\n        print(\"Balanced\")\\n    else:\\n        print(\"Right\")\\n", "target": "132", "substitutes": {"a": ["x", "ia", "sta", "ae", "ab", "era", "ta", "aff", "p", "chart", "g", "va", "zero", "w", "ma", "z", "m", "ata", "eas", "ga", "aux", "o", "ea", "la", "aaa", "h", "pa", "fa", "done", "f", "b", "\u00e4", "t", "alpha", "parts", "da", "args", "out", "na", "an", "att", "all", "A", "at", "sa", "app", "au", "oa", "aos", "ed", "aa", "l", "am", "u", "j", "es", "y", "data", "changes", "array", "area", "ba", "ca", "ac"], "i": ["mi", "n", "xi", "x", "gu", "gi", "p", "di", "ai", "I", "iter", "bi", "qi", "o", "ip", "t", "ri", "si", "iu", "sim", "li", "ii", "ji", "v", "key", "int", "ti", "oi", "zi", "ini", "ui", "l", "pi", "phi", "u", "id", "j", "y", "ij", "iri"]}}
{"code": "N,M = map(int,input().split())\\nX = list(map(int,input().split()))\\nX.sort()\\nY = [X[i] - X[i-1] for i in range(1, M)]\\nY.sort(reverse=True)\\nY = Y[N-1:]\\nprint(sum(Y))", "target": "9", "substitutes": {"N": ["SN", "CNN", "n", "NS", "T", "NC", "GN", "NI", "Ns", "I", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "V", "NUM", "S", "ND", "Num", "P", "D", "NB", "MN", "Ni", "K", "F", "TN", "FN", "C"], "M": ["T", "MU", "R", "JM", "L", "NM", "MX", "m", "H", "MM", "V", "MC", "S", "MAN", "B", "J", "Q", "G", "P", "MP", "E", "MS", "D", "DM", "TM", "MN", "MI", "MT", "K", "LM", "F", "C"], "X": ["IX", "x", "T", "List", "Int", "TX", "AT", "I", "EX", "L", "Map", "R", "MX", "Content", "TY", "Items", "UX", "OX", "FE", "HTML", "GE", "H", "ZX", "ANY", "XY", "V", "XP", "S", "DX", "XM", "RAY", "Q", "ML", "This", "P", "JSON", "A", "ENT", "XX", "XT", "XXX", "XL", "AC", "F", "Array", "Z", "EL", "C"], "Y": ["Other", "YD", "NS", "T", "YE", "ES", "Series", "YP", "EY", "My", "I", "Py", "SO", "TY", "YS", "MY", "HY", "IE", "PLE", "YC", "HTML", "Year", "H", "ANY", "XY", "V", "UE", "YA", "S", "OU", "B", "RAY", "Q", "GB", "J", "P", "SE", "ET", "You", "AY", "US", "E", "YN", "YY", "IES", "XX", "Cy", "FY", "y", "Chart", "HT", "OT", "Z", "YOU", "IO", "BY", "C"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "c", "m", "bi", "ic", "ix", "ip", "f", "multi", "io", "si", "li", "ii", "ji", "ori", "key", "ti", "oi", "im", "it", "s", "zi", "ui", "q", "l", "pi", "phi", "u", "id", "y", "j", "ij"]}}
{"code": "N, K = map(int, input().split())\\nA = list(map(int, input().split()))\\n\\nidx = A.index(1)\\n\\nans = N\\nfor k in range(K + 1):\\n    L = idx - (K - k - 1)\\n    R = (N - 1 - idx) - k\\n    cntL = 0\\n    cntR = 0\\n    while L > 0:\\n        cntL += 1\\n        L -= K - 1\\n    while R > 0:\\n        cntR += 1\\n        R -= K - 1\\n    ans = min(ans, cntL + cntR + 1)\\n\\nprint(ans)\\n", "target": "718", "substitutes": {"N": ["M", "n", "NS", "T", "An", "Ns", "AT", "I", "X", "NA", "NN", "NR", "NT", "H", "NF", "O", "V", "S", "B", "J", "Q", "G", "P", "Num", "E", "D", "Y", "MN", "Ni", "F", "AN", "Z", "C"], "K": ["M", "T", "KN", "Key", "Family", "KR", "MK", "KEY", "Power", "X", "Context", "KK", "Kind", "DK", "H", "W", "FK", "KER", "V", "KS", "PK", "KC", "NK", "Kent", "S", "B", "J", "SK", "Q", "G", "IK", "KB", "P", "E", "Mask", "VK", "Y", "UK", "Chart", "KI", "Kick", "Z", "KE", "KA", "KING", "C"], "A": ["a", "GA", "M", "All", "An", "IA", "Ar", "Alpha", "AU", "AT", "X", "I", "AB", "H", "AA", "LA", "As", "V", "AR", "AS", "ASC", "S", "B", "G", "P", "AP", "CA", "D", "AF", "AM", "Y", "SA", "AC", "The", "C"], "idx": [" idy", "Idxs", "idy", "idxs", "Idex", "IDxs", "idn", " idxs", "Idx", "Idy", "Idn", "idsx", "IDy", "indn", "indindex", " idn", "indx", "idsxs", "IDindex", "idex", "idsindex", "idindex", "idsex", "IDx", "Idindex", " idindex", " idex", "indxs"], "ans": ["ars", "n", "NS", "ANS", "nt", "ants", "ats", "ean", "An", "anon", "ana", "names", " means", "Ns", "aus", "ros", "sn", "aned", " Ans", "ates", "ns", "ann", "rans", "anas", "ks", "scan", "ins", "ras", "ANN", "ons", "ms", "ers", "amps", "ls", "anned", "ids", "ents", "ens", "news", "cas", "uns", "an", "posts", "Ann", "aps", "anes", "s", "xs", "ions", "ran", "nas", "rates", "arts", "os", "es", "AN", "ones"], "k": ["ck", "km", "a", "n", "kn", "x", "max", "kr", "kh", "kl", "ijk", "d", "p", "g", "ak", "ke", "i", "kid", "z", "m", "ic", "kw", "ko", "f", "num", "tk", "t", "key", "kj", "v", "ok", "kick", "it", "ku", "wk", "kt", "q", "l", "kk", "id", "j", "ka", "ik", "sk", "y", "mk"], "L": ["dL", "LB", "NL", "DL", "LIN", "PL", "BL", "SL", "I", "LC", "AL", "TL", "LR", "LA", "LU", "LO", "FL", "LT", "ML", "G", "Li", "UL", "LI", "RL", "IL", "LV", "LG", "VL", "Lu", "l", "CL", "LL", "LE", "XL", "LM", "LOC", "LS", "LP", "EL", "C"], "R": ["M", "T", "TR", "RB", "RG", "Right", "RH", "RS", "RI", "r", "RM", "NR", "DR", "RA", "RE", "W", "H", "HR", "V", "AR", "ER", "RT", "S", "B", "J", "Q", "BR", "G", "P", "RL", "CR", "E", "VR", "RC", "RR", "D", "RO", "MR", "U", "SR", "C"], "cntL": ["contLE", "cnl", "cNTLE", "cgtN", "cctL", "ccritBL", "centLong", "cntl", " cntl", "coNTBL", "coNTLE", "coNTN", "credLong", "cptl", "centDL", " cptLL", "cnLL", "cctLL", "cctXL", "ccritN", "cnXL", "credDL", "credL", "cntN", "cctl", "centl", "cntLE", "cntDL", "cptL", "centL", "cgtL", " cntDL", "coNTL", "credl", "ccritL", "cNTBL", "cnL", "cNTN", " cptDL", "cptLong", "cptDL", "ccritLE", " cptXL", "cntBL", "cntXL", " cptl", "contBL", "cgtLE", " cptL", "cptXL", " cntXL", "cntLL", "contN", " cptLong", "contL", "cptLL", "cntLong", " cntLong", "cgtBL", "cNTL", " cntLL"], "cntR": ["cnzV", "ctntT", "cncRight", "acntRE", " cntRS", "cctL", "cotRE", "ctntR", "cotR", "cntT", "cnzRight", "acctr", "acntr", "cncR", "cncV", "ctntRight", "ctncR", "cotr", "cntRL", "cptRS", "countr", "cntRight", "cotRS", "cctR", "cptR", "cptRL", "acntL", " cotr", "cptr", "acctR", "acctL", "cntV", "ctncV", "countRL", "cctRE", " cntr", "cnzT", "acntR", "cntRE", "cntr", "cnzR", "cntRS", "cNTV", "ctncT", "cncRE", "cotRL", "cncT", "acctRE", "cNTT", "cotL", "countRS", "cNTRight", "cctr", " cntRL", " cotRL", "countR", " cotR", " cotRS", "cncL", "cNTR", "ctncRight", "cncr", "ctntV"]}}
{"code": "from collections import deque\\nimport sys\\ndef input():\\n    return sys.stdin.readline().rstrip()\\ndef main():\\n    n = int(input())\\n    G = [[] for _ in range(n)]\\n    for _ in range(n - 1):\\n        a, b, c = list(map(int, input().split()))\\n        a -= 1\\n        b -= 1\\n        G[a].append([b, c])\\n        G[b].append([a, c])\\n    q, k = list(map(int, input().split()))\\n    k -= 1\\n    stack = deque([k, ])\\n    ans = [-1] * n\\n    ans[k] = 0\\n    while stack:\\n        x = stack.popleft()\\n        for (dx, l) in G[x]:\\n            if ans[dx] == -1:\\n                ans[dx] = ans[x] + l\\n                stack.appendleft(dx)\\n    for _ in range(q):\\n        x, y = list(map(lambda x: int(x) - 1, input().split()))\\n        print(ans[x] + ans[y])\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "360", "substitutes": {"n": ["net", "N", "kn", "nt", "kl", "gn", "d", "p", "en", "ne", "g", "cn", "qu", "ct", "i", "sn", "w", "m", "z", "ns", "o", "nl", "h", "num", "t", "count", "nb", "no", "nor", "mn", "nv", "na", "v", "an", "nc", "ok", "nan", "nu", "nn", "number", "np", "ll", "ng", "j"], "G": ["Graph", "GA", "M", "N", "T", "GO", "GN", "g", "CG", "R", "I", "X", "L", "Graphics", "Gs", "AG", "Group", "TG", "BG", "graph", "GE", "GR", "W", "H", "GV", "GG", "GS", "V", "GC", "GEN", "S", "Gate", "GF", "B", "Q", "GB", "P", "IG", "A", "E", "GP", "LG", "GI", "D", "Gen", "FG", "U", "GT", "F", "Ge", "C"], "_": [" quick", " the", "__", "I", " pre", "z", "ange", " cpu", "ix", " main", "val", "Se", "____", " time", " __", "\u00e7", " any", "___", " code", "j", " un"], "a": ["ia", "ae", "ac", "ab", "aff", "aj", "p", "d", "g", "va", "ai", "ak", "i", "xa", "r", "ma", "el", "ant", "ga", "o", "ea", "pa", "aaa", "f", "abs", "t", "alpha", "art", "an", "e", "anta", "all", "A", "al", "at", "sa", "ao", "app", "au", "oa", "aa", "am", "ar", "u", "j", "area", "ba", "ca"], "b": ["bis", "bu", "sb", "bf", "ab", "d", "p", "db", "g", "ib", "i", "r", "w", "z", "m", "bi", "fb", "bo", "rb", "by", "o", "h", "be", "ob", "abb", "br", "f", "bc", "t", "gb", "B", "bb", "v", "e", "A", "eb", "bl", "aa", "bin", "u", "j", "bs", "ba", "ca", "ac"], "c": ["ec", "ce", "con", "lc", "d", "g", "ct", "rc", "tc", "fc", "h", "f", "bc", "dc", "can", "e", "cin", "cos", "cp", "cc", "abc", "co", "cb", "coll", "etc", "cl", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "q": ["ck", "d", "p", "g", "qu", "iq", "qt", "i", "r", "w", "z", "m", "qi", "query", "o", "h", "f", "t", "nb", "Q", "v", "e", "qq", "eq", "qa", "dq", "u", "j", "qs"], "k": ["ck", "ki", "kn", "ek", "kr", "uk", "kh", "kl", "ijk", "d", "p", "km", "g", "ak", "ke", "i", "kid", "r", "w", "m", "z", "dk", "ks", "o", "kw", "ko", "f", "tk", "t", "kok", "key", "kj", "v", "e", "ok", "s", "ku", "u", "kk", "j", "ka", "K", "ik", "sk", "mk", "unk"], "stack": ["history", "top", "hold", "storage", "acks", "call", "scroll", "queue", "context", "space", "match", "p", "loop", "frame", "cycle", "g", "flat", "store", "w", "z", "push", "m", "buffer", "full", "wait", "old", "wall", "window", "bo", "mount", "sl", "track", "level", "sp", "empty", "thread", "depth", "pos", "frames", "v", "list", "pop", "switch", "cache", "obj", "console", "steps", "s", "st", "now", "first", "print", "stage", "lock", "base", "slice", "tmp", "roll", "proc", "Stack", "scope", "layer", "pack", "ack", "back", "trace", "chain"], "ans": ["ones", "ars", "ANS", "ants", "ats", "ians", "beans", "names", " means", "eds", "outs", "aus", "lines", "aned", " Ans", "ns", "vals", "ann", "ums", "rs", "ongs", "ks", "anas", "offs", "ins", "mens", "ras", "ons", "ms", "angs", "amps", "ls", "flags", "ikes", "ids", "ents", "ens", "ations", "akens", "cons", "uns", "an", "gs", "anks", "aps", "anes", "aces", "ws", "oss", "s", "idents", "xs", "aunts", "ands", "ams", "aos", "vs", "ads", "cs", "arts", "ags", "groups", "es", "stats", "ds", "ps", "orts", "vers"], "x": ["wx", "xi", "ex", "rex", "xe", "d", "p", "xes", "ux", "xc", "X", "xa", "i", "rx", "w", "ox", "z", "xt", "el", "hex", "ctx", "ix", "tx", "ax", "xd", "t", "key", "zx", "v", "e", "fx", "at", "xy", "xs", "mx", "xb", "xx", "lat", "yx", "px", "index", "lex", "xp", "xf"], "dx": ["loc", "ck", "wx", "xi", "ex", "ld", "d", "ux", "xc", "wy", "xa", "rx", "ox", "dl", "dk", "ctx", "ix", "tp", "tex", "tx", "dt", "ax", "yk", "xd", "dy", "dr", "exp", "fx", "cox", "xy", "xs", "mx", "hd", "dq", "xx", "dd", "du", "dj", "lat", "yx", "lex", "px", "ds", "xp", "eddy", "mk", "zx"], "l": ["dL", "lc", "kl", "ln", "lt", "d", "ul", "left", "lb", "L", "long", "ml", "ly", "dl", "el", "nl", "sl", "lay", "ls", "jl", "hl", "yl", "len", "rl", "lp", "li", "fl", "list", "al", "lv", "ll", "le", "pl", "il"], "y": ["ty", "ys", "yd", "yer", "wy", "i", "cy", "yo", "z", "ly", "ny", "vy", "o", "ye", "py", "yr", "hy", "yl", "ot", "uy", "v", "yn", "ey", "gy", "iy", "ry", "yt", "Y", "yy", "fy", "j", "ya", "ay", "ym"]}}
{"code": "N, K = map(int, input().split())\\nA = list(map(int, input().split()))\\nAsum = sum(A)\\n\\ndiv = set()\\nfor i in range(1, int(Asum ** 0.5 + 0.5) + 1):\\n    if Asum % i == 0:\\n        div.add(i)\\n        div.add(Asum//i)\\n\\nans = 1\\nfor d in div:\\n    now = 10 ** 18\\n    R = [a % d for a in A]\\n    R.sort()\\n    Rsum = sum(d - r for r in R)\\n    Lsum = 0\\n    for r in R:\\n        Lsum += r\\n        Rsum -= d - r\\n        now = min(now, max(Lsum, Rsum))\\n\\n    if now <= K:\\n        ans = max(ans, d)\\n\\nprint(ans)\\n", "target": "764", "substitutes": {"N": ["n", "M", "NS", "T", "Ns", "X", "I", "NA", "L", "NN", "NR", "H", "W", "V", "S", "B", "J", "Q", "G", "ND", "P", "E", "D", "Y", "Ni", "F", "Z", "C"], "K": ["MAX", "M", "T", "KN", "KY", "KR", "MK", "Max", "X", "KK", "W", "H", "DH", "O", "V", "KS", "TN", "PK", "KC", "NK", "S", "J", "Q", "G", "P", "D", "Y", "Ku", "k", "F", "Z", "KE", "KA", "C"], "A": ["GA", "M", "Ax", "T", "All", "Am", "An", "Alpha", "AU", "AT", "I", "L", "Div", "AV", "And", "AB", "H", "AA", "As", "V", "C", "AS", "Ah", "S", "B", "G", "P", "Ant", "CA", "At", "E", "D", "au", "AM", "Y", "SA", "U", "AC", "Array", "Z", "AP"], "Asum": ["Isumer", "assum", "Amum", " Asom", "Isunc", " Asam", " Assum", "AmSum", "asunc", " Asumer", "asom", "AsSum", "asum", "Isum", "Asunc", "asam", "Asumer", "ASum", " asumm", "asumm", "asumer", " Asumm", " AsSum", "ASSum", "Amam", "Isam", "Asom", "IsSum", " asom", " assum", "Assum", " asum", "Amumer", "ASam", "Asumm", "Asam", " Asunc", "asSum"], "div": ["next", "con", "n", "max", "str", "ra", "p", "dir", "g", "di", "mult", "ows", "Div", "span", "pre", "c", "down", "m", "sect", " Div", "dev", "total", "dec", "dom", "res", "V", "done", "br", "b", "num", "ds", "t", "multi", "ow", "add", "out", "exp", "all", "up", "adj", "s", "division", "ch", "gr", "D", "desc", "dim", "size", "dd", "ov", "Dec", "data", "DIV", "area", "init", "sum"], "i": ["mi", "n", "xi", "x", "ia", "me", "ci", "gi", "ir", "p", "di", "ai", "I", "m", "yi", "ic", "o", "ix", "ip", "iri", "io", "si", "li", "ii", "v", "ei", "int", "ti", "oi", "im", "s", "it", "ini", "ui", "l", "pi", "k", "j", "index", "ik", "iu", "hi"], "ans": ["ars", "ANS", "nt", "ants", "ats", "names", "ano", " means", "outs", "ows", "aus", "lines", "aves", "ates", "ns", "ann", "rans", "rs", "eas", "ks", "offs", "ins", "res", "ons", "ms", "amps", "annot", "ls", "ids", "ents", "ens", "anc", "uns", "an", "aps", "ays", "s", "ages", "nas", "ands", "yes", "dd", "cs", "arts", "os", "es", "ds", "nes"], "d": ["dL", "n", "max", "sum", "p", "db", "dir", "g", "di", "dn", "aid", "ai", "td", "rad", "w", "c", "current", "m", "z", "iod", "o", "h", "ind", "dt", "f", "b", "t", "dc", "da", "ord", "ade", "dr", "pd", "v", "e", "de", "ad", "int", "al", "at", "s", "date", "end", "dp", "dx", "D", "new", "do", "l", "dd", "ar", "u", "id", "sd", "j", "k", "data", "ds", "ard", "nd", "draw", "rd"], "now": ["next", "hold", "sw", "sta", "warn", "sum", "always", "aj", "gc", "on", " NOW", " Now", "day", "this", "we", "start", "current", "down", "set", "wait", "old", "step", "save", "gm", "ms", "dt", "ew", "ready", "time", "ay", "count", "wa", "wp", "off", "resp", "ws", "at", "st", "date", "new", "today", "NOW", "size", "then", "tmp", "aw", "ng", "ds", "Now", "nd", "ow"], "R": ["M", "T", "All", "RGB", "RG", "Right", "I", "X", "L", "RS", "Res", "Rand", "NR", "DR", "RA", "RE", "W", "H", "HR", "O", "V", "AR", "RAM", "RT", "S", "B", "J", "Q", "BR", "G", "P", "NPR", "CR", "E", "Ren", "RR", "D", "RO", "Y", "Dr", "U", "F", "C"], "a": ["n", "ia", "ae", "ra", "ta", "p", "va", "ai", "xa", "w", "c", "ma", "m", "ga", "o", "la", "pa", "f", "b", "t", "alpha", "da", "wa", "na", "an", "v", "e", "al", "sa", "ao", "au", "aa", "ar", "u", "aw", "ka", "y", "ba", "ca"], "Rsum": ["Rcount", "RRmean", "RRstat", "Mnum", " Rstat", "RRSum", "Dsum", " Rmean", "Rmem", "Rmod", "Dmean", " RSum", " Rcount", "Dmem", "Rnum", "rSum", "Lnum", "rstat", "RSum", "RRsum", "RRmod", "Msum", " Rmem", "RRmem", "Dmod", "rsum", " Rmod", " Rnum", "rmean", "Lcount", "Mcount", "Rstat", "Rmean"], "r": ["n", "mr", "x", "sr", "ro", "err", "ra", "p", "run", "g", "rc", "re", "w", "c", "rad", "m", "z", "rat", "rh", "rs", "rb", "res", "o", "h", "pr", "rar", "f", "b", "right", "br", "t", "art", "rl", "dr", "v", "e", "ur", "gr", "tr", "rt", "lr", "q", "l", "ar", "u", "error", "j", "k", "er", "cr", "ard", "rd"], "Lsum": ["Ldest", "LRmean", "LRSum", "Tsat", " Ldest", "Lpush", "lmean", "Dsum", "LRpush", "Hsat", "LSum", "LRsummary", "LLpush", "Lsat", "LLsum", "ldest", "TSum", "Dsat", "DSum", "lSum", "Lsim", "lpush", "Lmean", "LRdest", "LLmean", "lsummary", "lsum", "LRsum", "Hsim", "Lsummary", "Tsum", "Dsim", "LLSum", " Lsummary", "LRstat", " Lstat", "lstat", "Lstat", "Tsim", "HSum", "Hsum"]}}
{"code": "a, b = (int(i) for i in input().split())  \\n\\nif a == b: \\n    print(-1)\\nelif a < 0 or b < 0: \\n    print (-1)\\nelse:\\n    for i in range(1, int(10 ** 10 / a)):\\n        if a * i % b != 0:\\n            print(a * i)\\n            exit()\\n        else:\\n            continue\\n    print(-1)\\n", "target": "396", "substitutes": {"a": ["aq", "n", "x", "ia", "sta", "ae", "ac", "ab", "aff", "d", "p", "aj", "ta", "ach", "era", "g", "va", "ai", "xa", "r", "\u00e1", "c", "ma", "m", " A", "z", "eas", "ga", "power", "ea", "la", "aaa", "f", "t", "count", "alpha", "apa", "an", "e", "A", "al", "at", "sa", "s", "ao", "sha", "au", "oa", "aa", "l", "am", "ar", "index", "y", "area", "ba", "ca"], "b": ["bis", "n", "sb", "ab", "bar", "d", "p", "db", "beta", "g", "ib", "r", "bg", "c", "bot", "m", "bi", "wb", "fb", "rb", "by", "mb", "be", "ob", "bh", "f", "bc", "t", "gb", "nb", "B", "bb", "v", "end", "eb", "base", "cb", "l", "bp", "j", "y", "bs", "ba"], "i": ["mi", "\u00ed", "n", "xi", "x", "ki", "ia", "ie", "ci", "gi", "ir", "p", " j", "di", "ib", "ai", "I", "c", "z", "yi", "qi", "info", "ic", "o", "ix", "iri", "ip", "ind", "f", "t", "si", "ii", "li", "v", "e", "int", "ti", "im", "it", "zi", "ini", "ui", "q", "l", "phi", "pi", "u", "id", "j", "index", "y", "ij", "ik", "iu", "hi"]}}
{"code": "import sys\\nread = sys.stdin.read\\nreadlines = sys.stdin.readlines\\ndef main():\\n    w, h, x, y = map(int, input().split())\\n    if x == w / 2 and y == h / 2:\\n        print(w * h / 2, 1)\\n    else:\\n        print(w * h / 2, 0)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "607", "substitutes": {"read": ["rid", "find", "rot", "hold", "load", "str", "printf", "insert", "write", "run", "get", "sub", "readable", " send", " write", "iter", "replace", "r", "txt", "length", "buffer", "reads", " writes", "f", "writ", " writ", " Read", "feed", "fill", "std", "pop", "stream", "each", "gets", "Read", "print", "READ", "reader", "reading", " pars", "seek", "text", " reads", "rd"], "readlines": ["readln", "printfiles", "checklines", " readln", "Readlines", "printline", "Readln", "streamln", "Readfiles", "streamrows", " readline", "checkfiles", "streamline", "Readcodes", "readline", "printcodes", "checkcodes", "Readrows", "streamlines", "printlines", " readrows", "readfiles", "Readline", "readrows", "readcodes", "checkline"], "w": ["wx", "n", "ex", "d", "p", "g", "wh", "we", "r", "wt", "weight", "wb", "wall", "wr", "window", "iw", "rw", "W", "wd", "kw", "wal", "f", "ew", "word", "wl", "wid", "t", "win", "wa", "wp", "v", "width", "ws", "hw", "ww", "now", "wm", "nw", "q", "l", "widget"], "h": ["history", "ht", "n", "th", "sh", "her", "kh", "him", "g", "hz", "html", "hal", "r", "hs", "c", "ih", "zh", "rh", "H", "ah", "b", "hl", "hp", "t", "v", "oh", "hash", "ha", "ph", "hw", "he", "hr", "high", "hd", "q", "ho", "l", "hh", "k", "j", "hi", "hm"], "x": ["wx", "xi", "ex", "xe", "d", "ux", "xc", "left", "X", "xa", "i", "rx", "ox", "z", "m", "xt", "ix", "tx", "ax", "f", "xd", "v", "fx", " xx", "width", "xy", "xs", "dx", "xx", "l", "yx", "px", "xp", "xf"], "y": ["sy", "n", "ty", "p", "g", "i", "cy", "r", "c", "z", "m", "ly", "ies", "my", "ny", "o", "py", "ye", "col", "yr", "sky", "hy", "b", "axy", "t", "yl", "v", "yn", "ey", "gy", "iy", "xy", "yt", "Y", "yy", "l", "fy", "j", "ya"]}}
{"code": "def main():\\n    N = int(input())\\n    p = []\\n    for i in range(N):\\n        p.append(int(input()))\\n    p.sort()\\n    last = p[-1]\\n    print(sum(p)-last+(last//2))\\nmain()", "target": "259", "substitutes": {"N": ["n", "M", "NS", "T", "NC", "GN", "NI", "R", "I", "NA", "L", "NM", "NN", "NP", "NR", "NT", "NH", "O", "V", "No", "NO", "S", "J", "ND", "P", "Num", "D", "NB", "Count", "Len", "K", "F", "NG", "C"], "p": ["n", "pkg", "perm", "pm", "mp", "pc", "po", "rep", "vp", "g", "jp", "r", "c", "m", "fp", "pb", "power", "tp", "pa", "h", "pr", "f", "sp", "t", "pt", "wp", "lp", "pd", "pos", "exp", "P", "v", "ap", "up", "at", "cp", "it", "now", "ping", "pl", "pi", "np", "l", "bp", "j", "pers", "pp", "ps"], "i": [" ii", "a", "n", "x", "ite", " j", "I", "iter", "r", "ix", "ind", "f", "no", "im", "it", "q", "id", "k", "y", "j"], "last": ["next", "n", "max", "prev", "nt", "latest", "ret", "left", "length", "Last", "largest", "worst", "las", "old", "total", "second", "tail", "bottom", "right", "count", "t", "close", "len", "just", "no", "li", "std", "final", "most", "st", "highest", "est", "end", "first", "base", "l", "best", "padding", "nd", "after"]}}
{"code": "# A - Restricted\\n# https://atcoder.jp/contests/abc063/tasks/abc063_a\\n\\nA, B = map(int, input().split())\\n\\nresult = A + B\\nif result >= 10:\\n    print('error')\\nelse:\\n    print(result)\\n", "target": "202", "substitutes": {}}
{"code": "L = int(input())\\n\\na = float(L/3)\\nb = float(L/3)\\nc = float(L / 3)\\n\\nprint(a * b * c)", "target": "159", "substitutes": {"L": ["M", "NL", "N", "DL", "List", "LIN", "BL", "PL", "SL", "I", "LC", "AL", "ALL", "TL", "LR", "H", "W", "LA", "LU", "V", "S", "FL", "LT", "B", "ML", "UL", "LI", "SSL", "Long", "P", "IL", "LV", "VL", "D", "l", "CL", "LL", "LE", "LM", "LOC", "F", "LS", "LP", "C"], "a": ["aq", "n", "ia", "ac", "ab", "d", "p", "aj", "ach", "r", "ma", "m", "za", "ga", "ea", "la", "aaa", "f", "t", "alpha", "an", "e", "A", "al", "at", "sa", "af", "ao", "au", "oa", "aa", "l", "u", "data", "area", "ba", "ca"], "b": ["bis", "bu", "sb", "to", "bf", "ab", "d", "db", "beta", "ib", "bi", "wb", "fb", "bo", "rb", "by", "mb", "be", "ob", "abb", "br", "bc", "gb", "nb", "zb", "B", "bb", "eb", "cb", "ub", "y", "j", "bs", "ba"], "c": ["ec", "ce", "lc", "ced", "gc", "d", "unc", "cd", "cn", "ct", "rc", "arc", "tc", "fc", "cur", "cv", "f", "bc", "dc", "anc", "uc", "cp", "ch", "cc", "co", "cb", "cu", "etc", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"]}}
{"code": "import bisect, collections, copy, heapq, itertools, math, string, sys\\ninput = lambda: sys.stdin.readline().rstrip() \\nsys.setrecursionlimit(10**7)\\nINF = float('inf')\\ndef I(): return int(input())\\ndef F(): return float(input())\\ndef SS(): return input()\\ndef LI(): return [int(x) for x in input().split()]\\ndef LI_(): return [int(x)-1 for x in input().split()]\\ndef LF(): return [float(x) for x in input().split()]\\ndef LSS(): return input().split()\\n\\ndef resolve():\\n    N, M = LI()\\n    ab = [LI_() for _ in range(M)]\\n    ab.sort(key=lambda x: x[1])\\n\\n    # \u533a\u9593\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\\n    ans = 0\\n    # print(ab)\\n    right = -1\\n    for a, b in ab:\\n        if right <= a:\\n            right = b\\n            ans += 1\\n\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "219", "substitutes": {"input": ["answer", "json", "cat", "context", "value", "image", "batch", "buffer", "ctx", "config", "empty", "hidden", "Input", "update", "string", "new", "q", "data", "text", "init", "request", "history", "before", "point", "get", "unit", "read", "prefix", "step", "output", "PUT", "integer", " output", "interface", "print", " Input", "error", "join", " inputs", "source", "next", "load", "str", "expression", "insert", "active", "spec", "raw", "ref", "xml", "ip", "val", "result", "form", "inner", "feed", "csv", "sample", "index", "op", "missing", "pattern", "select", "struct", "view", "unsigned", "eval", "inc", "current", "focus", "type", "enum", "cmd", "parse", "out", "int", " inspect", "first", "command", "lat", "sequence"], "INF": [" INInf", "inInf", "INN", "INf", "InInf", "InF", "inf", "InN", "inN", " INf", "Inf", "INInf", "inF", " INN"], "x": ["a", "wx", "n", "xi", "ex", " Ax", "ci", "xe", "p", "xes", "php", "ux", "on", "xc", "qu", "ct", "X", "xa", "i", "rx", "w", "ox", "z", "xxxx", "plex", "xt", "hex", "xml", "xxx", "ctx", "ix", "el", " ax", "tx", "yk", "ax", "xd", " i", "t", " dx", "xxxxxxxx", "check", "key", "v", "e", "int", "fx", " xp", " xx", " c", "xy", "xs", "\u00e7", "xb", "dx", "see", "inx", " Xu", "xx", "l", " cx", "lat", "yx", "lex", "y", "px", "ross", "xp", "xf", " z"], "N": ["n", "NS", "T", "R", "I", "X", "L", "NM", "NN", "NR", "NT", "H", "O", "V", "S", "B", "J", "Q", "P", "E", "D", "MN", "K", "F", "Z", "FN", "C"], "M": ["MO", "T", "CM", "R", "I", "L", "NM", "MX", "RM", "m", "H", "MM", "O", "V", "MC", "MD", "MON", "S", "MAN", "B", "G", "P", "A", "MP", "MS", "D", "DM", "MN", "MI", "MT", "U", "K", "PM", "C"], "ab": [" AB", "db", "abin", "hab", "ib", "abl", "abi", "aus", "ABC", "fab", "AB", "pb", "rab", "rb", "Ab", "mb", "ob", "abb", "ada", "abs", "tab", "bag", "bb", "av", "stab", "lab", "af", "acqu", "jab", "abc", "eb", "xb", "ub", "abis", "ac"], "_": ["ex", "local", "on", " j", "ct", "ox", "ml", "ix", "val", " int", "place", "of", " l", "all", "l", " p"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nk, (a, b) = int(input()), tuple(map(int, input().split()))\\nprint('OK' if a <= (b // k) * k else 'NG')", "target": "78", "substitutes": {"input": ["choice", "next", "find", "call", "str", "select", "point", "insert", "view", "spec", "get", "name", "ct", "eval", "inc", "raw", "position", "rint", "align", "ref", "buffer", "read", "format", "step", "output", "println", "kw", "config", "think", "inner", "feed", "conf", "out", "parse", "Input", "int", "update", "sleep", "it", "exec", "csv", "char", "print", "dq", " Input", "q", "proc", "command", "sample", "enter", "seek", "text", "source", "sum"], "k": ["ck", "ki", "n", "kn", "uk", "max", "kh", "kl", "p", "mu", "g", "ak", "ke", "i", " n", "m", "z", "ks", "o", "kw", "ko", "kind", "kb", "tk", "num", "t", "key", "kj", "v", "ok", " K", "ku", "q", "kt", "u", "kk", "j", "ka", "K", "ik", "mk"], "a": ["aq", "sta", "ae", "ac", "ab", "aff", "aj", "ta", "p", "va", "ai", "ak", "i", "w", "c", "ma", "ata", "la", "aaa", "act", "abs", "f", "t", "alpha", "an", "A", "at", "sa", "s", "app", "au", "oa", "aa", "l", "am", "ar", "area", "ba", "ca"], "b": ["bis", "n", "sb", "to", "ab", "bar", "d", "db", "ib", "i", "c", "m", "bi", "wb", "fb", "bo", "rb", "mb", "be", "ob", "bas", "bc", "gb", "nb", "B", "bb", "v", "eb", "base", "cb", "l", "bp", "j", "y", "bs", "ba"]}}
{"code": "import sys\\ninput=sys.stdin.readline\\nn=int(input())\\nfrom collections import deque\\nG=[[] for i in range(n)]\\nfor i in range(n-1):\\n    a,b=map(int,input().split())\\n    G[a-1].append(b-1)\\n    G[b-1].append(a-1)\\ncheck=[False]*n\\ncheck[0]=True\\ncheck[n-1]=True\\nf_q=deque([0])\\ns_q=deque([n-1])\\nf_c=1\\ns_c=1\\nwhile not (len(f_q)==0 and len(s_q)==0):\\n    f_n=len(f_q)\\n    for i in range(f_n):\\n        now=f_q.popleft()\\n        for j in G[now]:\\n            if not check[j]:\\n                check[j]=True\\n                f_c+=1\\n                f_q.append(j)\\n    s_n=len(s_q)\\n    for i in range(s_n):\\n        now=s_q.popleft()\\n        for j in G[now]:\\n            if not check[j]:\\n                check[j]=True\\n                s_c+=1\\n                s_q.append(j)\\nif f_c>s_c:\\n    print('Fennec')\\nelse:\\n    print('Snuke')\\n\\n\\n", "target": "435", "substitutes": {"input": ["next", "call", "load", "pattern", "str", "select", "expression", "util", "insert", "view", "spec", "get", "eval", "shift", "inc", "raw", "utils", "ref", "read", "format", "step", "output", "println", "val", "cmd", "f", "fn", "config", "feed", "conf", "out", "Input", "int", " inspect", "interface", "sleep", "exec", "csv", "gen", "print", " Input", "q", "reader", "sample", "rand", "enter", "command", "paste", "data", "sequence", "text", "source", "request"], "n": ["N", "net", "max", "x", "nt", "gn", "d", "p", "ln", "on", "name", "names", "ne", "g", "cn", "en", "long", "sn", "r", "c", "m", "z", "ns", "o", "nl", "h", "f", "num", "t", "nia", "count", "len", "nb", "no", "nor", "mn", "na", "v", "an", "nc", "s", "nan", "nu", "size", "nn", "l", "q", "np", "number", "network", "k", "ng"], "G": ["Graph", "GA", "M", "N", "T", "Gu", "GO", "GN", "RG", "GM", "g", "R", "I", "L", "Gr", "ig", "AG", "GH", "Group", "TG", "GE", "GR", "W", "H", "GV", "GG", "GS", "V", "O", "GC", "S", "Gate", "GF", "B", "J", "Q", "GB", "P", "IG", "A", "E", "GP", "PG", "gen", "LG", "GI", "D", "Gen", "FG", "Y", "GT", "F", "Ge", "GU", "C"], "i": ["ki", "xi", "x", "ia", "ci", "gi", "ir", "p", "di", "ai", "I", "c", "m", "iti", "ic", "ix", "o", "ip", "ind", "f", "ri", "si", "li", "ii", "v", "ei", "e", "ti", "oi", "im", "it", "ini", "zi", "phi", "pi", "ati", "l", "u", "id", "fi", "k", "ij", "ik", "y", "iu"], "a": ["x", "ia", "ae", "ab", "aj", "d", "p", "g", "va", "ak", "r", "c", "ma", "m", "ami", "el", "ga", "ea", "la", "ax", "f", "alpha", "an", "e", "A", "at", "sa", "oa", "au", "aa", "l", "am", "ar", "u", "ba", "ca", "ac"], "b": ["bis", "sb", "x", "ab", "d", "p", "db", "bar", "g", "ib", "r", "bg", "c", "z", "m", "bi", "fb", "rb", "o", "h", "be", "f", "br", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "s", "eb", "base", "cb", "l", "bp", "u", "y", "bs", "ba"], "check": ["ck", "find", "call", "look", "comment", "load", "warn", "state", "Check", "match", "view", "checked", "score", "test", "code", "c", "set", "control", "wait", "condition", "status", "info", "type", "help", "checks", "read", "query", "process", "CHECK", "make", "catch", "fail", "display", "case", "config", "delete", "close", "push", "block", "force", "feed", "key", "search", "update", "ok", "switch", "cache", "clear", "cp", "work", "com", "guard", "req", "clean", "see", "lock", "handle", "command", "good", "error", "link", "dict", "sync"], "f_q": ["s_qq", "fx_q", "fx_qs", "s_dq", "flpyq", " f_qt", " f_v", "fpyreq", "f2dq", "f_dq", "fl_qs", "flpyqs", "flpyreq", "s2qi", "fpyqq", "f___qs", "s_qi", "f_qi", "faxyqi", "flpyqq", "fx_eq", "faxyqq", "fpyq", "f_qt", "fpyqs", "fl_q", "f_v", "f2q", "f_qs", " f_qs", "fx_qq", "f_qq", "f2qq", "f___qq", "s2dq", "f2qi", "s2q", "f_req", "f_Q", "fl_req", "f2qt", "fl_qq", "faxydq", "faxyq", "f___q", "f_eq", " f_Q", "f2Q", "f___req", " f_dq", "s2qq"], "s_q": ["s_qq", "b_q", "s_fresh", "sptqq", "s____q", "s_dq", "s____quick", "s2que", "sts_queue", " s_dq", "s_ch", "s_cap", "ss_q", "s_queue", "sts_ch", "sptqs", "s_que", "s____ch", "s____queue", "b_cap", "s_quick", "sts____quick", "s___q", "b_dq", "s_qs", " s_que", "sts____queue", "s2fresh", "rs_Q", "s_Q", "ss_que", "sptq", "b_qs", "s2qs", "ss_qs", "s___queue", "s___ch", "s2q", "rs_qs", "sptQ", "sts____ch", "rs_q", "sts_q", "sts_quick", "rs_qq", "sts____q", "ss_fresh", "s___quick"], "f_c": ["f_pc", "fo___co", "s_cu", "fo_can", "jJcon", "fo_pc", "jJc", "j_n", "f___c", "fJn", "foxpc", "f8co", "f___can", "fJcon", "f_con", "fJc", "f_p", "jJn", "f8pc", "fo_c", "fo___can", "s_m", "j_con", "f___co", "j_c", "foxco", "fJp", "fo___c", "f_co", "f___pc", "f8c", "jJp", "fo___pc", "j_p", "foxc", "f_m", "fo_co", "f8can", "foxcan", "f_can", "f_cu"], "s_c": ["s12q", "b_r", "os_n", "s1n", "s___q", "s___lc", "os___lc", "s___n", "os_c", "os___q", "s12n", "os_lc", "s1c", "s2r", "b_ci", "os___n", "s12c", "s1ci", "s2n", "s_p", "s_ci", "f_p", "os___c", "s1r", "s2c", "s12lc", "s___c", "s2ci", "s_r", "os_q", "s_lc", "b_n", "b_c"], "f_n": ["fLendn", "fl_dn", "n2c", "fLencon", "f_dn", "flmmnumber", "fmmnumber", "faxydn", "n_len", "faxynumber", "n2n", "n_n", "fmmn", "fLenn", "fl_con", "fmmcon", "fLennumber", "flmmcon", "faxyn", "faxycon", "flmmn", "f__m", "fmmdn", "f2len", "fl_n", "f_con", "f2n", "f__c", "f__n", "f__len", "n_m", "fl_number", "f2m", "f2c", "f_number", "n2len", "f_m", "n_c", "n2m", "flmmdn", "f_len"], "now": ["next", "hold", "json", "onew", "sw", "uj", "ja", "always", "aj", "js", "on", "where", "jp", "this", "w", "pre", "current", "set", "wait", "old", "by", "gm", "aaa", "ready", "time", "ver", "off", "obj", "adj", "at", "when", "gr", "date", "node", "pres", "here", "new", "NOW", "handle", "never", "then", "dj", "aw", "ng", "ait", "Now", "after", "ow"], "j": ["next", "json", "uj", "ja", "str", "ijk", "js", "aj", "p", "name", "jp", "rev", "job", "iaz", "r", "jc", "oj", "z", "jj", "note", "ju", "o", "jl", "f", "je", "br", "jac", "J", "off", "ion", "bj", "key", "ji", "kj", "v", "jas", "att", "obj", "adj", "s", "it", "jump", "jo", "here", "q", "dj", "y", "k", "er", "ij", "ik", "jit"], "s_n": ["s_nia", "s__ne", "s_y", "s_on", "s__q", "f5on", "s5q", "s2nia", "si_n", "f_ne", "si_nia", "s5on", "f5q", "s5ne", "s2n", "s2c", "si_c", "f5ne", "s__n", "f_on", "s2y", "s5n", "f5n", "si_y", "s_ne", "s__on"]}}
{"code": "A,B,C,D=input()\\nif A==B==C or B==C==D:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")\\n", "target": "600", "substitutes": {"A": ["a", "Al", "An", "AH", "AT", "R", "Av", "I", "L", "AL", "Area", "AV", "If", "What", "AB", "App", "H", "AA", "As", "AR", "AS", "This", "P", "CA", "At", "AY", "You", "Array", "AF", "Y", "SA", "AC", "ACT", "BA", "The", "AN", "Ag", "AP"], "B": ["LB", "BI", "M", "CB", "An", "RB", "VB", "BS", "BL", "OB", "Bs", "Rob", "L", "IB", "AB", "BW", "BER", " b", "H", "O", "V", "BT", "b", "S", "BC", "BBC", "WB", "G", "BB", "Ber", "USB", "E", "Bern", "FB", "TB", "NB", "BO", "Y", "BF", "Bi", "DB", "Bill", "BA", "F"], "C": ["CNN", "WC", "M", "N", "CB", "T", "Cu", "CW", "CM", "Cr", "JC", "CG", "Cow", "R", "I", "L", "CE", "c", "Con", "CS", "CN", "Cs", "YC", "H", "ERC", "CP", "V", "VC", "O", "CT", "Che", "S", "BC", "CD", "EC", "Co", "Q", "J", "G", "DC", "CR", "CA", "E", "CON", "CC", "Y", "AC", "F", "Z"], "D": ["M", "N", "DL", "Def", "T", "d", "DO", "R", "DE", "I", "L", "DR", "DI", "H", "Maybe", "DH", "O", "V", "S", "Do", "CD", "DP", "Q", "J", "G", "DD", "DC", "DN", "P", "E", "Ds", "WD", "DS", "PD", "DF", "DB", "U", "K", "F", "Dub", "Z"]}}
{"code": "import sys\\nimport itertools\\n# import numpy as np\\nimport time\\nimport math\\nfrom heapq import heappop, heappush\\nfrom collections import defaultdict\\nfrom collections import Counter\\nfrom collections import deque\\nfrom itertools import permutations\\nsys.setrecursionlimit(10 ** 7)\\n \\nINF = 10 ** 18\\nMOD = 10 ** 9 + 7\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\n# map(int, input().split())\\nMOD = 998244353\\nN, K = map(int, input().split())\\nS = [0] * K\\nfor i in range(K):\\n    l, r = map(int, input().split())\\n    S[i] = (l, r)\\n\\ndp = [0] * (N + 2)\\nacc = [0] * (N + 2)\\ndp[1] = 1\\nacc[1] = 1\\nfor i in range(1, N + 1):\\n    for j in range(K):\\n        li = i - S[j][1]\\n        ri = i - S[j][0]\\n        if ri < 0:\\n            continue\\n        li = max(li, 0)\\n        dp[i] += (acc[ri] - acc[li - 1]) % MOD\\n    acc[i] = (acc[i - 1] + dp[i]) % MOD\\nprint(dp[N] % MOD)\\n", "target": "158", "substitutes": {}}
{"code": "import bisect,collections,copy,itertools,math,string\\nimport sys\\ndef I(): return int(sys.stdin.readline().rstrip())\\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\\ndef S(): return sys.stdin.readline().rstrip()\\ndef LS(): return list(sys.stdin.readline().rstrip().split())\\ndef main():\\n\\n\\n    def prime_factor(n):\\n        lst = []\\n        while n%2 == 0:\\n            n //= 2\\n            lst.append(2)\\n        f = 3\\n        while f**2 <= n:\\n            if n%f == 0:\\n                n //= f\\n                lst.append(f)\\n            else:\\n                f += 2\\n        if n != 1:\\n            lst.append(n)\\n        return lst\\n\\n\\n    a, b = LI()\\n    g = math.gcd(a, b)\\n\\n    prm = prime_factor(g)\\n\\n    ans = len(set(prm)) + 1\\n\\n    print(ans)\\n\\nmain()\\n", "target": "590", "substitutes": {"n": ["N", "x", "nt", "ni", "ln", "d", "p", "names", "name", "ne", "cn", "norm", "dn", "i", "long", "r", "sn", "c", "m", "z", "ns", "note", "o", "nl", "h", "num", "fn", "t", "len", "nb", "no", "nor", "mn", "non", "out", "na", "v", "e", "an", "nc", "nm", "nan", "nu", "size", "nn", "l", "number", "np", " fn", "u", "j", "y", "rn", "k"], "lst": ["lnsty", "elth", "aclstab", "lnst", "dlst", "lST", "elST", " list", "elld", " lth", "nllist", " lstab", "elstr", "aclsty", "elist", "dlstr", "nlst", "rlist", "lnust", "lsts", " lsty", "lnstab", " lstr", "llstr", "dllist", " llist", "nlth", "elsts", "list", "rlsts", "llst", "rlST", "elst", "aclust", "lld", "lust", "lstab", "llist", "lth", " lust", "nlsts", " lST", "rlst", "ellist", "lsty", "dlsts", " lld", "llld", "lllist", "aclst", " lsts", "lstr"], "f": ["fd", "x", "bf", "d", "p", "fm", "i", "fs", "w", "r", "fort", "c", "fre", "m", "z", "fc", "o", "h", "two", "fa", "fr", "t", "fac", "fe", "fn", "fen", "fl", "ff", "v", "e", "s", "tf", "fee", "l", "fg", "u", "inf", "float", "j", "fi", "k", "F", "cf", "ft", "frac"], "a": ["x", "to", "ae", "ac", "ab", "ta", "i", "r", "w", "c", "ma", "z", "m", "ata", "eas", "ga", "la", "h", "aaa", "an", "e", "A", "al", "at", "sa", "ao", "app", "oa", "aa", "l", "am", "ar", "u", "y", "ack", "ba", "ca"], "b": ["bu", "ab", "d", "p", "i", "r", "c", "m", "z", "bi", "fb", "rb", "o", "be", "abb", "bc", "t", "gb", "B", "bb", "v", "e", "s", "eb", "cb", "l", "u", "j", "y", "bs", "ba"], "g": ["gg", "ge", "gu", "rg", "gi", "gc", "d", "p", "gd", "r", "bg", "c", "cfg", "m", "z", "gas", "ger", "ga", "gp", "h", "gm", "go", "vg", "t", "gb", "G", "ug", "v", "gs", "yg", "gr", "eg", "group", "gain", "l", "gam", "fg", "j", "reg"], "prm": ["sprma", "PrM", "sprm", " prum", "ptms", "proms", "prM", "prma", "grr", " prM", "prr", "prom", "grp", "prms", "ptp", " prma", "sprM", "Prum", "ptm", "prp", "prum", "pror", "ptr", "sprum", "Prma", "Prm", "grms", "grm", "prop"], "ans": ["ars", "ANS", "ants", "ats", "eds", "outs", "ros", "aus", "nets", "aned", "ns", "ann", "rans", "anas", "leans", "ks", "offs", "ons", "amps", "ens", "ations", "uns", "ces", "an", "rors", "anks", "iann", "anes", "works", "uploads", "nas", "ams", "ands", "rates", "ads", "asms", "olds"]}}
{"code": "t_p, t_a, a_p, a_a = map(int, input().split())\\n\\nwhile True:\\n  a_p -= t_a\\n  if a_p <= 0 :\\n    print('Yes')\\n    exit()\\n  \\n  t_p -= a_a\\n  if t_p <= 0 :\\n    print('No')\\n    exit()\\n", "target": "620", "substitutes": {"t_p": ["t_P", "t2t", "to_tp", "to_a", "t2n", "t67p", "a_t", "t_n", "to_l", "t2a", "taxylp", "t67P", "t2p", "t_lp", "taxytp", " t_tp", "taxyp", " t_lp", "t0t", "t2l", "taxyP", "t67tp", "t_t", "t_tp", "t2tp", "t67lp", " t_P", "t_l", "to_p", "t0a", "a_n", "t0n", "t0p"], "t_a": [" t2b", "t2n", "t2b", "t_n", "t2an", "t2a", "t2p", "t_an", " t_an", "t_b", " t_b", " t2p", " t2a", " t_n", " t2an"], "a_p": ["a___pt", "a___a", "va___a", " a_r", "a_r", "va_p", "va___pt", "va_a", "va___pi", "a__p", " a_pt", "a___pi", "a___p", "a_h", "a_pi", "va_pi", " a_i", "a__r", "a_pt", "a_i", " a_h", " a_y", "a__pt", "va_pt", "va___p", "a__y", "a_y"], "a_a": [" a_b", "a_e", "a_b", "t_e", "a_an", " a_an", "t_m", "a_m"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\nB = [0]*60\\nmod = 10 ** 9 + 7\\n\\nfor x in A:\\n  for i in range(60):\\n    B[i] += (x >> i) & 1\\n\\nans = 0\\np = 1\\n\\nfor i in range(60):\\n  if i >= 1:\\n    p *= 2\\n    p %= mod\\n  ans += (N-B[i])*B[i]*p\\n  ans %= mod\\n\\nprint(ans)", "target": "353", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "T", "GN", "Ns", "X", "I", "L", "NA", "NM", "NN", "NR", "NT", "W", "H", "V", "S", "J", "G", "P", "Num", "E", "Sn", "D", "NB", "Y", "K", "F", "Z", "C"], "A": ["a", "GA", "M", "T", "Ax", "All", "An", "AT", "X", "I", "mA", "NA", "L", "AD", "AST", "AL", " AA", "ACC", "AB", "AA", "As", "V", "AI", "AS", "S", "This", "P", "AP", "CA", "At", " a", "D", "AF", "AM", "Y", "SA", "AC", "BA", "AN", "Array", "C"], "B": ["LB", "M", "BI", "CB", "T", "RB", "VB", "BS", "BL", "Bs", "SB", "I", "BN", "L", "AB", "V", "BT", "b", "BP", "BE", "BC", "S", "J", "GB", "BD", "WB", "PB", "P", "BB", "BM", "E", "TB", "D", "NB", "EB", "BO", "Y", "DB", "F", "BA", "C"], "mod": ["a", "n", "max", "ia", "perm", "MOD", "ac", "modified", "sign", " Mod", "d", "mods", "mp", "sub", "g", "mult", "ai", "Mod", "fun", "AD", "scale", "pre", "san", "m", "set", "od", "mut", "sed", "prime", "min", "step", "ix", "term", "ind", "time", "dig", "sim", "ver", "add", "out", "null", "int", "post", "it", "ed", "pi", "j", "pro", "mode", "sum"], "x": ["a", "wx", "xi", "ex", "ia", "ci", "xe", "xes", "ux", "xc", "X", "xa", "rx", "ai", "c", "ox", "ic", "ix", "o", "tx", "ax", "xd", "b", "t", "v", "an", "e", "fx", "at", "xy", "xs", "mx", "dx", "inx", "xx", "u", "j", "y", "xp", "xf"], "i": [" ii", "\u00ed", "ki", "mi", "xi", "ia", "n", "a", "uri", "gu", "ci", "gi", "vi", "di", "ai", "I", "m", "z", "bi", "yi", "info", "iti", "ic", "ix", "o", "ski", "ip", "ind", "b", "t", "multi", "ri", "io", "si", "li", "ii", "ji", "v", "ei", "int", "ti", "iy", "im", "it", "ini", "zi", "ui", "ity", "phi", "pi", "l", "ati", "id", "j", "y", "index", "ij", "ik", "fi", "iu", "Xi"], "ans": ["ars", "n", "ANS", "ians", "ats", "ants", " means", "eds", "ai", "xa", "aus", "lets", "ts", " Ans", "ates", "ns", "ies", "ann", "rans", "rs", "ks", " spans", "ins", "ons", "ms", "amps", "ls", "pan", "ids", " pan", "ens", "ents", "ots", "ations", "pid", "an", "posts", "aces", "aps", "ap", "s", "eps", "xs", "nan", "ions", "bps", "os", "es", "pers", "ds", "ps"], "p": ["a", "n", "perm", "d", "mp", "pc", "g", "jp", "r", "c", "m", "pe", "pb", "par", "power", "o", "tp", "pa", "pr", "pan", "f", "b", "sp", "t", "lp", "pos", "pid", "v", "P", "an", "e", "ap", "cp", "s", "ping", "l", "pi", "np", "pat", "u", "k", "j", "pers", "pn", "y", "pp", "ps"]}}
{"code": "w = input().lower()\\nt = ''\\nwhile(True):\\n    row = input()\\n    if row == 'END_OF_TEXT':\\n        break\\n    t += row.lower() + '\\n'\\n\\nprint(t.split().count(w))", "target": "142", "substitutes": {"w": ["n", "sw", "p", "name", "tw", "wh", "we", "wt", "r", "wb", "wr", "window", "iw", "rw", "wi", "W", "kw", "h", "wal", "ew", "word", "wl", "weights", "wa", "wp", "v", "width", "ws", "hw", "s", "rew", "nw", "widget", "var", "words"], "t": ["n", "T", "to", "ta", "p", "d", "ret", "g", "i", "template", "wt", "r", "ts", "c", "m", "xt", "total", "gt", "te", "o", "h", "term", "dt", "f", "b", "pt", "temp", "ot", "tu", "out", "v", "e", "tt", "tr", "it", "st", "rt", "s", "new", "title", "q", "l", "tmp", "u", "vt", "y", "mt", "text"], "row": ["next", "rot", "con", "ser", "th", "pair", "ward", "ro", "str", "frame", "run", "ows", "rc", "iter", "raw", "cell", "r", "rs", "bo", "step", "col", "rec", "case", "result", "ob", "term", "word", "sel", "tab", "record", "block", "ver", "key", "red", "post", "tr", "char", "co", "group", "new", "Row", "rown", "roll", "reader", "line", "item", "rows", "user", "index", "week", "entry", "ry", "ow"]}}
{"code": "N, K = map(int, input().split())\\nAns = [0] * (N+1)\\nfor _ in range(K):\\n    _ = input()\\n    A = list(map(int, input().split()))\\n    for a in A:\\n        Ans[a] = 1\\nprint(Ans.count(0)-1)\\n", "target": "252", "substitutes": {"N": ["CNN", "M", "n", "NS", "T", "NC", "Ns", "R", "I", "X", "L", "NA", "NN", "NP", "NR", "NT", "NH", "H", "V", "S", "B", "J", "Q", "G", "ND", "P", "Num", "D", "Y", "MN", "Ni", "F", "C"], "K": ["M", "T", "KN", "KR", "MK", "R", "X", "I", "KK", "H", "W", "V", "KS", "KC", "PK", "Kent", "S", "B", "J", "Q", "SK", "G", "P", "HK", "D", "Y", "UK", "k", "F", "KI", "Z", "KE", "KA", "KING", "C"], "Ans": [" Anqs", "ANS", " Anls", "ANs", "AnS", "Anxs", "ang", "ANqs", "anqs", "Antls", "ANn", " Anxs", " Anr", "Antxs", " Ann", "ann", " Ang", "ANls", " Anns", "Anr", "Ants", "ANr", "Aneds", "ANeds", "ANxs", "anns", "aneds", "anS", " AnS", " Aneds", "Ann", "Antr", "ans", "Anqs", "ANns", "Anls", "Ang", "ANg", "Anns"], "_": ["Name", "x", "OP", "en", "p", "name", " j", "z", "Id", "m", "H", "val", "NAME", "len", " c", "P", "ID", "Index", " __", "tmp", "l", " p", "id", "j", "index", "ay", " z"], "A": ["GA", "M", "T", "An", "AT", "X", "I", "L", "NA", "AL", "AV", "AB", "H", "AA", "LA", "As", "V", "S", "B", "G", "This", "P", "AP", "CA", "D", "AF", "AM", "Y", "SA", "AC", "AN", "Array", "C"], "a": ["n", "x", "to", "sta", "p", "ana", "name", "i", "c", "ma", "m", "ita", "el", "eas", "o", "la", "pa", "aaa", "b", "t", " pa", "na", "an", "e", "v", "all", "sa", "af", "s", "sha", "oa", "aa", "l", "am", "k", "j", "area", "ca", "ac"]}}
{"code": "n = int(input())\\nab = [list(map(int, input().split())) for _ in range(n)]\\nab.sort()\\n\\nprint((ab[0][0]-1) + (ab[-1][1]-0) + (ab[-1][0]-ab[0][0]+1))", "target": "266", "substitutes": {"n": ["a", "N", "net", "x", "nt", "gn", "ln", "d", "p", "ne", "cn", "i", "sn", "r", "c", "m", "ns", "nl", "b", "num", "t", "nia", "len", "nb", "mn", "na", "v", "nc", "nm", "nan", "nu", "nw", "nn", "l", "np", "j"], "ab": ["audi", "a", "abe", "sb", "db", "abin", "hab", "ib", "abl", "abi", "aus", "abet", "reb", "fab", "AB", "pb", "fb", "eas", "rab", "rb", "Ab", "rub", "ob", "abb", "abus", "abs", "b", "ada", "gb", "tab", "bag", "bb", "av", "lam", "stab", "aps", "ap", "lab", "af", "aka", "arb", "abc", "eb", "app", "bl", "ub", "ray", "bs", "abis", "ac"], "_": ["x", "ex", " the", " j", "ix", " g", "val", " x", " l", " c", " m", " __", "___", " p", " un", " z"]}}
{"code": "a,b,c,d = map(int,input().split())\\nx1 = a*c\\nx2 = a*d\\nx3 = b*c\\nx4 = b*d\\nx = [x1,x2,x3,x4]\\nprint(max(x))\\n", "target": "774", "substitutes": {"a": ["aq", "ia", "ae", "ac", "ab", "aff", "aj", "p", "era", "ach", "acs", "ak", "r", "ga", "aux", "ea", "admin", "aaa", "act", "f", "abs", "t", "author", "apa", "an", "e", "A", "al", "obj", "ap", "at", "af", "sa", "ao", "ity", "app", "oa", "aa", "l", "am", "ar"], "b": ["bis", "n", "sb", "ab", "p", "db", "lib", "g", "ib", "r", "w", "z", "bd", " B", "bi", "wb", "fb", "rb", "bo", "o", "h", "be", "f", "bc", "gb", "nb", "B", "bb", "v", "e", "eb", "bl", "cb", "aa", "l", "bin", "u", "j", "y", "bs", "ba", "ca"], "c": ["ec", "ce", "con", "n", "cat", "p", "unc", "cd", "g", "ct", "r", "tc", "m", "fc", "ic", "h", "f", "bc", "t", "dc", "e", "v", "cp", "cc", "co", "cb", "cu", "l", "q", "cl", "u", "cs", "y", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["n", "p", "g", "di", "i", "td", "dh", "r", "w", "m", "z", "o", "h", "dt", "f", "df", "t", "dc", "da", "dr", "v", "e", "de", "ad", "s", "D", "do", "q", "l", "dd", "sd", "dra", "ds"], "x1": ["ax6", "ax0", "ax91", "ix1", "ex1", " x6", "axone", "xone", "ex0", "ax3", "exone", "ax1", "x0", "ix91", "ex91", "x91", " xone", "ixone", "ix0", "ix6", "ix3", "x6"], "x2": ["tx02", "tx4", "ex2", "ox2", " x02", "x52", "ax3", "ex02", "ax2", " x52", "x02", "ax02", "ox02", "tx2", "ax4", "ex3", "ox52", "tx3", "ox3", "ex52"], "x3": [" xThree", "x23", "X4", "ax6", " x6", "X6", "ax313", "X3", "X2", "ax3", "ox313", "ax2", "ax4", "ox3", "x313", "xThree", "oxThree", "ox23", " x23", "ax23", "x6", " x313", "axThree"], "x4": [" x34", "x44", "X4", "x64", "X64", " tx64", "tx4", "ix4", "ix44", "X14", "ix34", "tx44", " tx14", "tx34", " x64", " tx4", " x14", "tx3", " x44", "ix3", "x14", "x34"], "x": ["wx", "xi", "ex", "to", "xe", "p", "ux", "g", "xc", "ct", "X", "xa", "rx", "w", "ox", "z", "xt", "ix", "tx", "ax", "xd", "t", "dr", "fx", "cox", "xy", "xs", "mx", "dx", "xx", "yx", "y", "px", "xp", "xf"]}}
{"code": "N, L = map(int, input().split())\\nS = sorted([input() for i in range(N)])\\nprint(*S, sep=\"\")\\n", "target": "732", "substitutes": {"N": ["SN", "M", "n", "NS", "T", "NC", "GN", "Ns", "X", "I", "R", "NA", "NM", "NN", "NR", "NT", "H", "W", "V", "B", "J", "Q", "G", "ND", "P", "Num", "E", "D", "NB", "Y", "Len", "Ni", "K", "F", "Z", "C"], "L": ["M", "NL", "T", "LIN", "mL", "PL", "SL", "R", "I", "H", "W", "V", "B", "J", "G", "P", "E", "D", "l", "CL", "LE", "U", "LM", "F", "LS", "LP", "C"], "S": ["SN", "M", "NS", "T", "ANS", "SS", "SL", "SB", "R", "SER", "X", "JS", "VS", "SI", "CS", "CSS", "SM", "SQL", "V", "GS", "B", "Q", "P", "SE", "A", "s", "IES", "SU", "SP", "D", "DS", "Y", "SA", "LS", "C"], "i": [" ii", "n", "x", "str", "gi", "p", "on", " j", "I", "r", "m", "ix", "ip", "ind", "f", "io", "li", "out", "e", "im", "q", "l", "id", "j", "k"]}}
{"code": "n, k = map(int, input().split())\\ns = input()\\nu = []\\nd = []\\nif s[0]=='0':\\n    d.append(0)\\ncnt = 1\\nfor i in range(n-1):\\n    if s[i+1]=='1' and s[i]=='0':\\n        u.append(cnt)\\n        cnt = 1\\n    elif s[i+1]=='0' and s[i]=='1':\\n        d.append(cnt)\\n        cnt = 1\\n    else:\\n        cnt += 1\\nif s[-1]=='0':\\n    u.append(cnt)\\n    d.append(0)\\nelse:\\n    d.append(cnt)\\nif len(u)<=k:\\n    print(n)\\n    exit()\\ntmp = sum(d[:k+1]) + sum(u[:k])\\nans = tmp\\nfor i in range(len(u)-k):\\n    tmp += u[i+k]+d[i+k+1]-u[i]-d[i]\\n    ans = max(ans, tmp)\\nprint(ans)", "target": "340", "substitutes": {"n": ["a", "N", "x", "nt", "gn", "p", "name", "ne", "g", "cn", "sn", "r", "c", "w", "m", "z", "ns", "o", "num", "t", "len", "nb", "no", "mn", "out", "na", "v", "e", "nc", "nan", "nu", "nn", "q", "l", "np", "j"], "k": ["ck", "km", "ki", "ek", "uk", "kn", "kr", "th", "kh", "kl", "ijk", "context", "id", "p", "g", "ak", "ke", "kid", "r", "c", "m", "batch", "dk", "ks", "o", "kw", "ko", "kind", "kb", "num", "tk", "t", "mc", "alpha", "key", "kj", "v", "cc", "ikk", "ku", "q", "kt", "wk", "kk", "ack", "sk", "ka", "K", "ik", "j", "kg", "cr", "ket", "mk", "unk"], "s": ["a", "sb", "ys", "ats", "js", "p", "ains", "spec", "eds", "fs", "r", "erences", "c", "ts", "ns", "ies", "rs", "ses", "ins", " ts", "ms", "ers", "ls", "b", "t", "S", "ss", "si", "args", "parts", "its", "ends", "ings", "strings", "gs", "sq", "aces", "ares", "sa", "sv", "ists", "itions", "ments", "xs", "ands", "sts", "l", "sis", "sd", "cs", "se", "os", "y", "ests", "er", "stats", "ds", "ps", " parts"], "u": ["ut", "bu", "lu", "su", "um", "util", "p", "ul", "ue", "g", "uid", "us", "r", "uv", "c", "bo", "o", "pu", "f", "t", "ud", "tu", "eu", "ru", "un", "up", "fu", "ou", "ur", "uf", "ui", "nu", "au", "cu", "l", "user", "du", "U", "uu", "iu"], "d": ["fd", "a", "to", "dos", "p", "db", "ld", "di", "g", "dn", "td", "gd", "r", "w", "c", "m", "z", "dl", "o", "dt", "f", "b", "df", "t", "dat", "da", "dr", "pd", "out", "v", "e", "ad", "des", "dx", "D", "ed", "do", "div", "q", "l", "dd", "du", "dra", "sd", "j", "data", "dict", "ds", "nd"], "cnt": ["conct", "CNT", "lcNT", "curont", "bcpt", "count", "Cnc", " cNT", "ccnt", "rcct", "cmnc", "cld", "Cnt", "crc", " cnd", "mcct", "lcct", "cont", "cNT", "icnc", "csnt", "rcld", "bcount", "rcnt", "crpt", "lcnt", "cmnt", " cont", "lcnd", "mcnt", "lcont", " cct", "ccont", "curnd", " cnc", "rcont", "cpt", "crNT", "conld", "lcrc", "rcnz", "Count", "curnt", "crount", "bcont", "connt", "cspt", "csount", "mcNT", "curNT", "csont", "cnc", "rcnc", " cld", " cnz", "icrc", " count", "crnt", "Cld", "cnd", "cmld", " crc", "cmont", "Cpt", "cnz", "cct", "bcnt", "ccct", "icnt", "ccnz", "conpt", "Cct", "mcnc", " cpt", "lcnc", "icct"], "i": ["a", "mi", "ki", "xi", "x", "ia", "uri", "ie", "ci", "gi", "cli", "p", "name", "g", "di", "iq", "ai", "I", "iter", "this", "c", "m", "batch", "bi", "ami", "yi", "ic", "ix", "ip", "ind", "f", "b", "multi", "ri", "t", "si", "iu", "li", "ii", "ji", "v", "e", "int", "ti", "list", "ei", "iy", "im", "it", "ims", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "id", "j", "y", "index", "ij", "iri", "hi"], "tmp": ["tm", "top", "max", "cmp", "before", "nt", "p", "mm", "mp", "ret", "test", "start", "txt", "tc", "m", "diff", "mut", "total", "ctx", "gt", "mb", "pac", "ms", "term", "tp", "sp", "t", "auto", "amp", "temp", "cum", "null", "tn", "final", "emp", "obj", "tt", "cp", "partial", "mx", "tar", "uf", "new", "cb", "np", "etc", "yy", "vt", "mint", "mk", "init", "sum"], "ans": ["ars", "ANS", "ants", "ats", " means", "eds", "outs", "aus", "us", "aned", "ts", "ates", "ns", "ann", "rans", "rs", "ums", "anas", "ks", "offs", "ins", "ms", "amps", "angs", "ls", "ents", "ids", "ens", "cas", "anc", "uns", "an", "posts", "anks", "iann", "oss", "ups", "nan", "xs", "nas", "ams", "aos", "vs", "ads", "arts", "os", "ds", "ones"]}}
{"code": "a,b,k=map(int,input().split())\\na2=max(0,a-k)\\nb=max(0,b-(k-(a-a2)))\\n\\nprint(a2,b)\\n", "target": "442", "substitutes": {"a": ["n", "x", "ia", "ae", "ac", "ab", "d", "ta", "p", "g", "i", "w", "r", "c", "ma", "m", "z", "ga", "ea", "la", "h", "act", "f", "t", "alpha", "an", "e", "A", "al", "at", "sa", "af", "s", "aka", "app", "ed", "oa", "au", "aa", "l", "am", "ar", "u", "j", "area", "ba", "ca"], "b": ["bis", "n", "sb", "ab", "d", "p", "db", "beta", "g", "ib", "i", "r", "bg", "w", "c", "m", "z", "bi", "fb", "rb", "bo", "mb", "h", "be", "ob", "f", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "eb", "cb", "l", "bp", "u", "bin", "j", "y", "bs", "ba"], "k": ["ck", "km", "n", "ek", "max", "kr", "kh", "kl", "d", "p", "g", "ak", "ke", "i", "c", "m", "z", "dk", "ks", "kw", "ko", "kind", "kb", "f", "tk", "kok", "t", "alpha", "key", "kj", "v", "kick", "it", "ku", "q", "l", "kk", "ka", "sk", "K", "ik", "j", "kg", "mk"], "a2": ["an3", "a102", "A2", " aTwo", "m3", "b2", "aTwo", "an2", "a0", "m2", "a3", " a0", "an22", "ea2", "eaTwo", "A0", "ea22", "a22", "blet", " a1", "alet", "ea3", " a3", "aalet", "anTwo", " a22", "m0", "A3", "aa102", "ea102", "aa2", "a1", "m1", "ealet", "b102", "A1"]}}
{"code": "A = list(map(int,input().split()))\\nA=set(A)\\n\\nans='No'\\nif len(A) == 2:\\n    ans='Yes'\\n    \\nprint(ans)", "target": "409", "substitutes": {"A": ["a", "GA", "But", "M", "N", "There", "T", "All", "An", "IA", "Ar", "Alpha", "Abs", "X", "I", "R", "L", "NA", "AV", "AB", "H", "AA", "As", "V", "C", "AS", "S", "B", "Q", "G", "This", "P", "CA", "You", "E", "AY", "These", "JA", "D", "AF", "Y", "SA", "AC", "The", "AN", "BA", "Array", "K", "AP"], "ans": ["ars", "ys", "ANS", "ants", "ats", "eds", "outs", "books", "ai", "helps", "aus", "san", "ts", "aves", "ns", "ann", "utters", "leans", "anas", "ins", "offs", "ras", "said", "ons", "ms", "amps", "ks", "ents", "ens", "ots", "cons", "uns", "an", "anks", "aps", "des", "sv", "aos", "yes", "vs", "ads", "arts", "cs", "os", "olds"]}}
{"code": "a = list(input())\\nif a[1] == \"B\":\\n  print(\"ARC\")\\nelse:\\n  print(\"ABC\")", "target": "510", "substitutes": {"a": ["n", "avez", "to", "ae", "ab", "ta", "p", "va", "w", "c", "ma", "z", "m", "input", "ga", "aux", "ea", "aaa", "fa", "f", "b", "abs", "t", "da", "apa", "na", "att", "an", "A", "sa", "aka", "oa", "aos", "aa", "l", "am", "aw", "u", "j", "area", "past", "ca"]}}
{"code": "T,X = map(int,input().split());print(T/X)", "target": "317", "substitutes": {"T": ["WT", "Total", "M", "N", "There", "TR", "TX", "R", "L", "TS", "PT", "VT", "NT", "V", "BT", "RT", "S", "B", "J", "Q", "This", "TF", "P", "A", "You", "TB", "TT", "D", "TA", "XT", "TM", "Y", "UT", "GT", "F", "OT", "TN", "C"], "X": ["M", "N", "IX", "TX", "I", "EX", "R", "L", "MX", "TS", "UX", "OX", "ICE", "H", "W", "XY", "V", "S", "XP", "DX", "B", "J", "Q", "ML", "RAY", "Tx", "P", "A", "US", "XX", "XT", "Y", "XL", "F", "Z", "C"]}}
{"code": "import math\\nN = int(input())\\np = []\\n\\nfor i in range(N):\\n    p.append(int(input()))\\n\\ntotal_price = max(p) / 2 + sum(p) - max(p)\\n\\nprint(math.floor(total_price))", "target": "259", "substitutes": {"N": ["n", "M", "NS", "T", "NC", "GN", "NI", "Ns", "X", "I", "R", "L", "NM", "NN", "NP", "NR", "CN", "NT", "H", "V", "NO", "S", "PN", "J", "Q", "ND", "P", "Num", "NPR", "Network", "D", "NB", "Count", "Size", "Ni", "K", "F", "AN", "TN", "C"], "p": ["n", "x", "perm", "pm", "mp", "pc", "po", "vp", "g", "jp", "r", "pre", "c", "m", "pe", "fp", "pb", "power", "tp", "pa", "h", "pr", "pu", "sp", "t", "price", "pt", "lp", "pos", "pd", "pie", "exp", "P", "v", "ap", "up", "post", "cp", "it", "ping", "q", "pl", "pi", "np", "l", "pers", "pp", "pro", "ps", "pins", "like"], "i": ["a", "n", "x", "ite", "I", "iter", "r", "c", "yi", "by", "ix", "ip", "ind", "f", "e", "im", "it", "q", "id", "y", "k", "j"], "total_price": ["totalityprice", "sum_pre", "totalnessphp", "totalptprice", "totalitystr", "totalnessstr", "totaldevstr", "total_pre", "totaldevvalue", "totalitypre", "totalptpre", "totalptstr", "totalnessprice", "totalnesspre", "sumptphp", "valid_price", "valid_value", "total_money", "totaldevprice", "sum_price", "totalityphp", "totalptphp", "sumptstr", "valid_money", "valid_str", "total_value", "sumptpre", "total_str", "sum_str", "sumptprice", "total_php", "totaldevmoney", "sum_php"]}}
{"code": "icase=0\\nif icase==0:\\n    n=int(input())\\n    if n==1:\\n        print(\"Hello World\")\\n    else:\\n        a=int(input())\\n        b=int(input())\\n        print(a+b)\\n", "target": "691", "substitutes": {"icase": ["iased", " icphase", "icasing", "icASE", "acases", "micASE", "acasing", " acphase", " acasing", "icases", "iase", "icphase", "iASE", "acphase", "icased", " acases", " icases", " icasing", "iccased", "micase", "acase", " acase", "micased", "iccases", "iases", "micases", "iccASE", "iccase"], "n": ["nr", "N", "nt", "ni", "gn", "p", "ne", "cn", "i", "nat", "sn", "c", "m", "z", "ns", "nl", "h", "act", "fn", "num", "t", "nb", "natural", "mn", "non", "na", "an", "yn", "nc", "s", "nan", "nu", "nw", "nn", "l", "number", "np", "k"], "a": ["aq", "ia", "ae", "ab", "aff", "aj", "era", "ach", "ai", "aus", "\u00e1", "c", "ma", "eas", "ga", "aux", "la", "admin", "art", "apa", "na", "an", "A", "ap", "at", "ao", "sa", "aka", "app", "au", "oa", "aa", "am", "ar", "ack", "ba", "ca", "ac"], "b": ["bis", "sb", "ab", "d", "db", "beta", "g", "ib", "i", "r", "c", "bi", "fb", "ga", "rb", "by", "mb", "be", "ob", "f", "bc", "nb", "B", "bb", "v", "another", "eb", "ed", "base", "cb", "j", "y", "bs", "ba"]}}
{"code": "from collections import defaultdict\\nn, k = map(int, input().split())\\na = [0] + [int(i) for i in input().split()]\\nd = defaultdict(int)\\nnext = 1\\nfor t in range(k):\\n  if d[next]!=0:\\n    period = t - d[next]\\n    res = (k - t)%period\\n    for _ in range(res):\\n      next = a[next]\\n    break\\n  elif d[next]==0:\\n    d[next] = t\\n    next = a[next]\\nprint(next)", "target": "169", "substitutes": {"n": ["N", "T", "name", "ct", " list", " do", " number", "na", "all", " dict", " na"], "k": ["ck", "km", "kn", "ek", "max", "kr", "x", "kl", "p", "g", "ke", "r", "w", "c", "m", "z", "ks", "kw", "ko", "tk", "kok", "v", "ikk", "ku", "q", "kt", "kk", "ka", "sk", "K", "ik", "j", "mk"], "a": ["x", "ia", "ae", "ab", "ta", "p", "ai", "xa", "r", "c", "ma", "m", "o", "ea", "f", "b", "alpha", "da", "na", "an", "v", "e", "all", "A", "al", "ap", "at", "sa", "app", "new", "au", "oa", "aa", "l", "am", "ar", "y", "ba"], "i": ["mi", "\u00ed", "xi", "x", "ki", "ci", "gi", "di", "ai", "I", "bi", "qi", "iri", "ri", "si", "ii", "li", "ji", "v", "ei", "int", "ti", "oi", "ini", "zi", "ui", "phi", "pi", "id", "j", "ij", "iu"], "d": ["fd", "ld", "p", "db", "di", "g", "dh", "r", "c", "m", "bd", "z", "dl", "o", "h", "ind", "dt", "df", "f", "b", "dat", "da", "dr", "pd", "v", "e", "de", "ad", "s", "new", "D", "do", "l", "dd", "sd", "did", "j", "md", "dict", "ds", "nd"], "next": ["prev", "err", "offset", "p", "code", "z", "set", "ns", "window", "ind", "main", "close", "response", "ot", "v", "obj", "new", "reply", "then", "number", "timeout", "rand", "data", "seq", "last", "net", "conn", "max", "self", "me", " Next", "latest", "ne", "rev", "this", "iter", "Next", "page", "min", "step", "fr", "key", " NEXT", "debug", "tmp", "ng", "nd", "chain", "start", "loc", "nr", "secondary", "queue", "nt", "state", "ret", "txt", "ref", "second", "result", "nb", "front", "remote", "future", "button", "primary", "now", "req", "boot", "size", "index", "bis", "path", "reset", "used", "zero", "current", "prime", "sec", "success", "ren", "int", "ptr", "first", "gen", "j", "sequence", "after", "version"], "t": ["x", "T", "to", "p", "ta", "g", "reset", "typ", "r", "tc", "wt", "c", "ts", "m", "z", "w", "type", "total", "o", "tp", "h", "term", "dt", "f", "num", "tk", "time", "pt", "ot", "tu", "v", "e", "int", "ti", "at", "tt", "it", "s", " T", "new", "q", "l", "y", "j", "tz"], "period": ["history", "resolution", "th", "repeat", "p", "method", "cycle", "reset", "day", "mult", "value", "span", "length", "m", "z", "minute", "prime", "tim", "window", "iod", "val", "pr", "ind", " Period", "duration", "every", "time", "frequency", "pid", "key", "date", "it", "times", "per", "timeout", "month"], "res": ["resolution", "nr", "correct", "resh", "ret", "reset", "rev", "re", "Res", "r", "pre", "ts", "rem", "process", "prefix", "RES", "ms", "result", "pr", "right", "cond", "frequency", "resource", "cons", "results", "resp", "out", "final", "crit", "rest", "req", "pres", "q", "proc", "timeout", "recent", "reg", "range", "init"], "_": ["th", "T", "p", "mult", "r", "ate", "ation", "m", "mut", "val", "time", "valid", "mt"]}}
{"code": "n, m = map(int, input().split())\\ns = [list(map(int, input().split()))[1:] for _ in range(m)]\\np = list(map(int, input().split()))\\nans = 0\\n\\nfor i in range(2**n):\\n    status = ['+']*n\\n    for j in range(n):\\n        if ((i>>j)&1):\\n            status[j] = '-'\\n    num = 0\\n    for m, k in enumerate(s):\\n        count = 0\\n        for l in k:\\n            if status[l-1] == '+':\\n                count += 1\\n        if count%2 != p[m]:\\n            break\\n        else:\\n            num += 1\\n    if num == m+1:\\n        ans += 1\\nprint(ans)\\n", "target": "546", "substitutes": {"n": ["a", "N", "x", "nt", "gn", "d", "g", "r", "sn", "c", "w", "ns", "o", "h", "b", "t", "len", "nb", "no", "mn", "na", "v", "e", "an", "nc", "nm", "nan", "nu", "nn", "pi", "np", "q", "y"], "m": ["a", "mi", "M", "perm", "um", "dm", "d", "mm", "mo", "mu", "g", "r", "c", "ma", "mos", "man", "bm", "o", "gm", "h", "ms", "mean", "f", "b", "mis", "t", "mc", "mn", "li", "v", "an", "nm", "om", "sm", "im", "am", "id", "y", "md", "cm", "mt"], "s": ["sb", "ys", "ats", "js", "ts", "ns", "rs", "ses", "ins", "sl", "ms", "b", "sp", "t", "ss", "S", "si", "parts", "its", "sc", "strings", "gs", "sq", "sa", "sts", "cs", "os", "stats", "ds", "ps", "bs"], "_": ["M", "x", " len", " the", "name", "code", " ml", "ox", "ml", " all", "parent", " main", " long", "val", "ind", " __", " each", " mod", " mult", " un", "ac"], "p": ["a", "perm", "pm", "d", "mp", "pc", "jp", "r", "c", "pb", "o", "tp", "pa", "h", "pr", "f", "sp", "t", "pt", "lp", "pos", "v", "P", "ap", "cp", "ping", "q", "pl", "pi", "np", "bp", "pn", "pp", "pro", "ps"], "ans": ["ANS", "ants", "ats", "actions", "anon", "names", "eds", "outs", "ai", "aus", "us", "sn", "ns", "vals", "ann", "ums", "rans", "anas", "ks", "offs", "ins", "res", "ms", "angs", "amps", "ls", "flags", "sex", "ids", "ens", "len", "anc", "cons", "mn", "uns", "na", "an", "rors", "oss", "nan", "oa", "nn", "ads", "cs", "arts", "os", "stats", "ps", "sum"], "i": ["a", "mi", "ki", "xi", "x", "ci", "gi", "di", "ai", "I", "bi", "ic", "ip", "f", "b", "t", "si", "li", "ii", "v", "int", "ti", "ini", "q", "pi", "u", "y", "ik", "ij", "iu"], "status": ["sw", "Status", "state", "uses", "str", "stat", "active", "names", "code", "current", "set", "wait", "type", "prefix", "success", "res", "flags", "trans", "sp", "bool", "atus", "ss", "si", "sim", "wa", "states", "list", "switch", "msg", "ssl", "flag", "st", "sol", "cs", "index", "stats", "ps", "sync", "sc"], "j": ["a", "x", "uj", "ja", "js", "aj", "d", "g", "jp", "job", "r", "jc", "c", "z", "jj", "bi", "o", "h", "jl", "f", "b", "je", "t", "J", "bj", "ji", "kj", "v", "obj", "it", "jump", "q", "dj", "y", "ij"], "num": ["den", "nr", "x", "nt", "um", "nom", "en", "on", "set", "ns", "ann", "total", "nam", "val", "mean", "NUM", "nb", "cum", "no", "mn", "ot", "pos", "out", "na", "an", "Num", "cal", "nc", "nm", "un", "msg", "nu", "number", "mon", "np", "mem", "index", "pn", "sum"], "k": ["ck", "km", "ki", "kn", "x", "kh", "kl", "g", "ke", "w", "c", "z", "ks", "o", "kw", "b", "kj", "v", "ok", "ch", "q", "ll", "le", "u", "kk", "sk", "ka", "ik", "K", "kan", "mk"], "count": ["a", "con", "th", "nt", "cat", "stat", "cont", "cn", "ct", "code", "span", "length", "c", "current", "z", "ann", "total", "val", "ind", "act", "f", "cond", "len", "nb", "cum", "cas", "conf", "pos", "add", "v", "nc", "ch", "flag", "cc", "found", "co", "\u00e7", "size", "counter", "number", "Count", "cs", "index", "C", "sum"], "l": ["loc", "lc", "label", "kl", "ln", "ld", "lt", "d", "g", "left", "lb", "L", "long", "c", "z", "dl", "el", "lit", "o", "nl", "sl", "h", "ls", "jl", "f", "b", "hl", "t", "yl", "len", "lo", "lp", "li", "fl", "v", "lang", "q", "ll", "pl", "line", "le"]}}
{"code": "#!/usr/bin/env python3\\ndef main():\\n    import time\\n\\n    N = int(input())\\n    A = [int(x) for x in input().split()]\\n\\n    num_lst = [0] * (N + 1)\\n    for a in A:\\n        num_lst[a] += 1\\n\\n    ans = 0\\n    for num in num_lst:\\n        # ans += comb(num, 2, exact=True)\\n        ans += num * (num - 1) // 2\\n\\n    start = time.time()\\n    for a in A:\\n        print(ans - (num_lst[a] - 1))\\n    end = time.time() - start\\n    # print(f'{end:6f}', 's')\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "247", "substitutes": {}}
{"code": "k = int(input())\\na, b = map(int, input().split())\\n\\nfor i in range(b-a+1):\\n    if (a+i) % k == 0:\\n        print('OK')\\n        break\\n    elif a+i == b:\\n        print('NG')", "target": "78", "substitutes": {"k": ["ck", "km", "n", "max", "kr", "kh", "kl", "ijk", "gc", "p", "ak", "ke", "c", "m", "dk", "kw", "ko", "kb", "num", "t", "kj", "v", "ok", "work", "ikk", "ku", "q", "kk", "ka", "kan", "K", "ik", "j", "sk", "ack", "mk", "unk"], "a": ["x", "ia", "sta", "ae", "ac", "ab", "era", "ta", "aj", "p", "va", "ai", "c", "ma", "m", "ata", "ga", "o", "ea", "la", "aaa", "pa", "isa", "t", "art", "da", "apa", "an", "e", "A", "ap", "al", "obj", "at", "sa", "aka", "ao", "app", "oa", "au", "aa", "l", "am", "ar", "j", "area", "ba", "ca"], "b": ["bis", "n", "sb", "ab", "d", "p", "db", "g", "ib", "r", "length", "c", "m", "z", "bi", "wb", "rb", "h", "be", "f", "bas", "bc", "t", "br", "nb", "B", "bb", "v", "e", "end", "eb", "bl", "base", "l", "bp", "y", "j", "bs"], "i": ["mi", "ki", "n", "xi", "x", "ia", "ci", "gi", "di", "ai", "I", "m", "bi", "yi", "qi", "ic", "ix", "iri", "ip", "ind", "f", "ri", "si", "li", "ii", "v", "ori", "int", "ti", "im", "it", "zi", "ini", "q", "l", "pi", "u", "id", "j", "index", "ik", "ij", "iu", "hi"]}}
{"code": "A = int(input())\\nB = int(input())\\nC = int(input())\\nD = int(input())\\nE = int(input())\\nnum = min((A-1)%10,(B-1)%10,(C-1)%10,(D-1)%10,(E-1)%10)\\nprint((-(-A//10)*10)+(-(-B//10)*10)+(-(-C//10)*10)+(-(-D//10)*10)+(-(-E//10)*10)+num-9)", "target": "193", "substitutes": {"A": ["GA", "ANS", "API", "AGE", "An", "IA", "AH", "AU", "AT", "ACC", "AD", "AL", "AV", "AST", "ABC", "AG", "AB", "AE", "RA", "AX", "AA", "LA", "As", "AR", "AS", "USA", "CA", "At", "AY", "AF", "AM", "SA", "AC", "AN", "BA", "AP"], "B": ["LB", "BI", "CB", "MB", "RB", "BL", "BS", "VB", "OB", "Bs", "SB", "IB", "AB", "BG", "BER", "BT", "b", "BP", "BE", "BC", "Bar", "BBC", "BR", "WB", "GB", "BB", "Blue", "TB", "EB", "NB", "BO", "BF", "Y", "ON", "DB", "BA", "BY"], "C": ["CB", "Cu", "CAR", "CM", "CW", "JC", "CG", "LC", "CE", "Cl", "CI", "c", "CS", "CN", "Cs", "YC", "CV", "CP", "CT", "Ch", "KC", "GC", "BC", "CD", "EC", "Co", "SC", "CO", "DC", "CA", "CR", "CON", "CC", "AC", "CF"], "D": ["DL", "T", "Def", "TD", "d", "DO", "DIR", "R", "DE", "AD", "DR", "DI", "DH", "O", "LD", "MD", "S", "CD", "Do", "DX", "DA", "DP", "Q", "G", "ND", "DD", "DC", "DN", "Dir", "DT", "Ds", "DS", "DM", "PD", "DF", "DB", "Z", "Data"], "E": ["M", "N", "Es", "EEE", "Ed", "EN", "ES", "PE", "CE", "IE", "EM", "AE", "RE", "GE", "EG", "O", "EU", "EE", "UE", "NOTE", "ER", "S", "OU", "EC", "EF", "NE", "Q", "END", "G", "EV", "e", "ENT", "ET", "OE", "ED", "Ev", "EB", "Y", "LE", "Ge", "EO", "EA", "EL", "El"], "num": ["con", "n", "th", "N", "ter", "max", "um", "nom", "d", "p", "name", "mult", "m", "note", "total", "tim", "digit", "result", "b", "multi", "NUM", "alpha", "no", "nb", "valid", "ver", "check", "Num", "cal", "final", "nm", "un", "om", "nu", "dim", "one", "number", "mon", "np", "umber", "sum"]}}
{"code": "n,m = map(int,input().split())\\nh = list(map(int,input().split()))\\n\\ng = [[] for _ in range(n)]\\nfor _ in range(m):\\n  a,b = map(int,input().split())\\n  g[a-1].append(b-1)\\n  g[b-1].append(a-1)\\n\\ncnt = n\\nfor i in range(n):\\n  for j in g[i]:\\n    if h[i] <= h[j]:\\n      cnt -= 1\\n      break\\nprint(cnt)", "target": "291", "substitutes": {"n": ["N", "net", "max", "nt", "gn", "d", "p", "ne", "cn", "r", "sn", "c", "w", "z", "ns", "o", "num", "t", "nb", "mn", "nil", "na", "v", "int", "nc", "un", "s", "nan", "nu", "nw", "nn", "l", "number", "np", "q", "k"], "m": ["tm", "mi", "km", "mr", "M", "um", "dm", "d", "mo", "mm", "p", "mos", "ma", "c", "man", "bm", "rm", "mb", "ms", "gm", "mis", "mc", "mn", "v", "nm", "sm", "im", "wm", "l", "mat", "cm", "mt"], "h": ["history", "ht", "th", "sh", "her", "p", "hz", "hal", "w", "hs", "c", "ih", "rh", "help", "H", "ah", "bh", "uh", "hl", "gh", "hp", "oh", "hash", "ha", "ch", "ph", "hw", "he", "hd", "q", "ho", "l", "phi", "hh", "hi", "hm"], "g": ["gg", "ge", "gate", "gu", "rg", "gi", "gc", "d", "p", "gn", "get", "di", "r", "bg", "w", "c", "cfg", "ig", "og", "ga", "gt", "gp", "gm", "sg", "go", "tg", "f", "gb", "t", "G", "out", "e", "gs", "msg", "gr", "gen", "group", "erg", "q", "l", "fg", "groups", "reg", "mg", "pg"], "_": [" the", "__", " cpu", "ix", "val", "____", " __", "___", "ay"], "a": ["ia", "ae", "ac", "ab", "aj", "p", "va", "ai", "ak", "r", "c", "ma", "ami", "ga", "ea", "la", "aaa", "be", "art", "an", "e", "A", "at", "sa", "au", "oa", "aa", "am", "ar", "ba", "ca"], "b": ["bis", "ab", "bar", "d", "db", "p", "r", "c", "bi", "fb", "ble", "rb", "by", "o", "mb", "be", "br", "f", "bc", "gb", "t", "nb", "B", "bb", "v", "e", "eb", "base", "l", "bp", "u", "bs", "ba", "back"], "cnt": ["cnd", "Cret", "CNT", "Cpt", "cNT", "cct", "lcNT", "ccount", "nret", "cret", "lcount", "crpt", "lcnt", "nNT", "nnt", "Ccount", "crcount", "count", " cNT", "crct", " ccount", " cct", "cpt", "crNT", " count", "crnt", "Cnd", "Cnt", "crount", " cret", " cpt", " cnd", "nnd", "lcct"], "i": ["mi", "ki", "xi", "x", "ia", "ni", "ci", "ir", "p", "di", "ai", "I", "c", "yi", "ic", "ix", "o", "ip", "f", "ri", "io", "si", "ii", "li", "ei", "e", "int", "ti", "it", "zi", "ini", "q", "l", "pi", "u", "id", "y", "k", "ij", "ik", "iu"], "j": ["json", "uj", "kh", "ja", "js", "aj", "name", "di", "jp", "job", "oj", "jc", "z", "jj", "note", "ju", "jl", "je", "jac", "J", "bj", "li", "ji", "kj", "jas", "v", "obj", "jump", "jo", "q", "dj", "item", "jit", "k", "y", "ij", "ik"]}}
{"code": "import sys\\nimport decimal # 10\u9032\u6cd5\u306b\u5909\u63db\uff0c\u6b63\u78ba\u306a\u8a08\u7b97\\n\\ndef input():\\n    return sys.stdin.readline().strip()\\n\\ndef main():\\n    s, t = input().split()\\n    a, b = map(int, input().split())\\n    u = input()\\n    if s == u:\\n        print(a-1,b)\\n        return\\n    print(a,b-1)\\n\\n    \\nmain()", "target": "517", "substitutes": {}}
{"code": "N = int(input())\\n\\nL = list(range(N+1))\\nprint(sum(L))", "target": "56", "substitutes": {"N": ["SN", "M", "n", "NS", "T", "NC", "GN", "NI", "R", "I", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "W", "H", "Node", "V", "S", "B", "J", "Q", "ND", "P", "Num", "D", "NB", "K", "F", "Z", "C"], "L": ["LB", "M", "NL", "List", "DL", "LIN", "BL", "PL", "LIST", "SL", "R", "I", "LC", "TL", "LR", "W", "LA", "LU", "LD", "V", "S", "FL", "B", "ML", "P", "LI", "RL", "LG", "D", "CL", "l", "LL", "LE", "LM", "LS", "LP"]}}
{"code": "n,x,t=map(int, input().split())\\ntako = n//x\\namari = n%x\\nans = tako*t\\nif amari != 0:\\n    ans += t\\nprint(ans)", "target": "105", "substitutes": {"n": ["a", "nr", "N", "nt", "d", "p", "ne", "g", "cn", "i", "w", "r", "c", "sn", "m", "z", "ns", "o", "h", "f", "b", "num", "nb", "nor", "nv", "na", "v", "e", "an", "s", "nan", "nn", "l", "q", "np", "j", "y", "k"], "x": ["wx", "xi", "ex", "max", "xe", "d", "p", "xes", "ux", "xc", "xa", "X", "i", "rx", "w", "c", "ox", "z", "m", "xt", "o", "ix", "h", "tx", "ax", "f", "xd", "yl", "v", "e", "xy", "xf", "st", "xs", "mx", "dx", "q", "xx", "yx", "y", "px", "zx"], "t": ["tm", "a", "ut", "T", "nt", "ta", "p", "d", "g", "tw", "i", "w", "tc", "r", "c", "ts", "m", "rat", "wt", "z", "mut", "tim", "o", "tp", "h", "dt", "f", "b", "pt", "ot", "tu", "out", "v", "e", "un", "at", "tt", "st", " T", "et", "l", "u", "j", "y", "mt"], "tako": ["nko", " tpo", "tko", "tpo", "taapo", "nak", "npo", " tapo", " tanta", "tak", "tanta", "Tako", "nako", "noko", "Toko", " toko", "tapo", "Tak", " tak", "nanta", " tko", "Tanta", "toko", "taako", "napo"], "amari": [" amar", "amai", "amarian", "aminarian", "ramarian", " amalid", "aminar", " amai", "jamiga", "jamari", "Amiga", "Amalid", "amalid", "jamalid", "aminari", "aminarde", "amiga", "amarde", "Amai", " amiga", "Amari", "jamai", "ramarde", " amarian", "ramari", "amar", "ramar", " amarde"], "ans": ["ars", "ANS", "ants", "ians", "ats", "names", "ais", " means", "eds", "aus", "ts", "ns", "vals", "ann", "rans", "rs", "mas", "anas", "ks", "offs", "ins", "ras", "wan", "ons", "ms", "angs", "amps", "ids", "ents", "ens", "cons", "uns", "an", "posts", "anks", "aps", "xs", "ions", "nas", "ams", "aos", "sets", "ads", "arts", "lan", "nes", "olds"]}}
{"code": "def calc(num, A, B) -> bool:\\n\tans = 0\\n\\n\twhile True:\\n\t\tif num // 10 == 0:\\n\t\t\tans += num\\n\t\t\tbreak\\n\t\tans += num % 10\\n\t\tnum //= 10\\n\\n\tif A <= ans and ans <= B:\\n\t\treturn True\\n\telse:\\n\t\treturn False\\n\\n\\n\\ndef main():\\n\tN, A, B = map(int, input().split())\\n\tans = 0\\n\\n\tfor num in range(1, N + 1):\\n\t\tresult = calc(num, A, B)\\n\t\tif result:\\n\t\t\tans += num\\n\\n\tprint(ans)\\n\\n  \\nif __name__ == \"__main__\":\\n  \tmain()", "target": "704", "substitutes": {"num": ["a", "n", "alph", "p", "mu", "quant", "true", "c", "set", "total", "bo", "nam", "multi", "NUM", "umer", "unknown", "na", "nm", "new", "number", "np", "mem", "umber", "phys", "text", "max", "um", "util", "mult", "test", "g", "m", "unit", "time", "mn", "ten", "msg", "date", "none", "nu", "mon", "float", "nt", "nom", "d", "en", "note", "tim", "term", "form", "nb", "cal", "all", "un", "dim", "index", "con", "th", "su", "name", "zero", "current", "enum", "f", "b", "t", "no", "valid", "Num", "int", "final", "orig", "uf", "one", "mark", "sum"], "A": ["a", "M", "T", "Al", "An", "IA", "Ar", "AH", "AU", "AT", "mA", "I", "L", "One", "AL", "X", "And", "AB", "App", "H", "AA", "LA", "As", "O", "V", "AR", "C", "AS", "S", "Some", "G", "This", "HA", "P", "Num", "CA", "At", "JA", "AF", "Array", "ATA", "AM", "Y", "Alice", "SA", "The", "AC", "AN", "K", "EA", "BA", "AP"], "B": ["Other", "LB", "M", "BI", "CB", "T", "Bob", "RB", "VB", "GO", "BS", "OB", "BL", "Bs", "SB", "X", "I", "Big", "L", "Number", "IB", "AB", "V", "b", "BE", "BC", "S", "Bar", "J", "Q", "BR", "WB", "G", "GB", "P", "BB", "Num", "USB", "BM", "Blue", "E", "TB", "Bern", "Base", "EB", "NB", "BO", "Y", "By", "DB", "K", "BA", "BY", "C"], "ans": ["n", "ats", "An", "eds", "ows", "X", "aus", "asks", "aned", "TS", "ns", "CN", "ks", "offs", "ms", "mean", "cons", "orders", "rors", "posts", "aps", "ran", "sets", "arts", "asms", "changes", "AC", "anon", "ames", "AL", "ates", "ann", "mas", "anas", "ins", "ids", "ens", "ATS", "results", "aces", "s", "MS", "ions", "aints", "cs", "ags", "stats", "olds", "ars", "sum", "ians", "names", " means", "Ns", "ums", "rans", "ons", "grades", "an", "terms", "xs", "nos", "ams", "os", "es", "AP", "ANS", "ants", "actions", "outs", "vals", "rs", "amps", "ls", "ents", "AS", "S", "anc", "args", "uns", "anks", "ands", "aos", "yes", "ads", "AN", "ds"], "N": ["n", "M", "NS", "T", "NI", "Ns", "R", "I", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "Length", "NH", "H", "V", "No", "NO", "NUM", "J", "Q", "Num", "P", "D", "NB", "Count", "Size", "Len", "K", "F", "C"], "result": ["answer", "race", "complete", "ge", "pair", "correct", "su", "currency", "match", "ne", "test", "Result", "successful", "true", "rc", "value", "r", "ther", "process", "status", "mate", "make", "success", "res", "exist", "sex", "present", "product", "successfully", "know", "valid", "ver", "results", "final", "new", "see", "profile", "there", "the", "mark", "root"]}}
{"code": "H, N = map(int, input().split())\\nA = map(int, input().split())\\na_sum = sum(A)\\n\\nif H - a_sum <= 0:\\n    print('Yes')\\nelse:\\n    print('No')", "target": "314", "substitutes": {"H": ["M", "T", "X", "R", "I", "L", "HI", "NH", "W", "h", "DH", "O", "V", "HH", "S", "B", "J", "Q", "G", "HA", "P", "OH", "E", "D", "MH", "Y", "U", "K", "F", "HT", "He", "C"], "N": ["M", "n", "NS", "T", "R", "X", "NA", "L", "NN", "NR", "W", "V", "TN", "S", "B", "J", "Q", "G", "P", "E", "D", "Y", "Ni", "K", "F", "Z", "C"], "A": ["a", "GA", "M", "Ax", "All", "An", "Alpha", "Abs", "AT", "X", "R", "I", "NA", "What", "App", "AB", "Args", "AA", "LA", "As", "V", "Out", "B", "To", "This", "HA", "P", "CA", "MA", "These", "JA", "D", "AM", "Y", "By", "SA", "AC", "The", "AN", "ACT", "Array", "C"], "a_sum": ["ae_sup", "a_cmp", "ae_total", "amatsup", " a_cmp", "a0cum", "a0se", "a_sup", " a_cum", "a_cache", "a0cmp", "a0sum", "amatsum", "a_cum", "a_se", "amattotal", "a___sum", "ae_cache", "a_total", "a___se", " a_se", "amatcache", "ae_sum", "a___cmp", "a___cum"]}}
{"code": "s = input()\\nans = ''\\nfor si in s:\\n  if si=='0': ans+='0'\\n  elif si=='1': ans+='1'\\n  else: ans=ans[:-1]\\nprint(ans)", "target": "503", "substitutes": {"s": ["a", "n", "sb", "events", "ats", "p", "g", "i", "fs", "c", "ts", "m", "ns", "sam", "rs", "ses", "ins", "ms", "ls", "abs", "b", "S", "ss", "parts", "states", "strings", "v", "gs", "sq", "sa", "ims", "sv", "xs", "csv", "sts", "sis", "qs", "ds", "ps"], "ans": ["ars", "ANS", "ants", "ats", "ians", "ean", "anon", "pard", "eds", "outs", "aid", "aus", "us", "lines", "san", "aned", "ts", "ns", "vals", "ann", "rans", "rs", "mas", "anas", "ks", "offs", "ins", "res", "ras", "wan", "ons", "ms", "amps", "annot", "ls", "anned", "pan", "ents", "ens", "news", "cons", "uns", "an", "posts", "anks", "gs", "terms", "nan", "sv", "xs", "ran", "ams", "aos", "ands", "vs", "aints", "ads", "arts", "cs", "os", "lan", "ds", "said"], "si": ["esi", "mi", "sym", "sta", "ni", "ci", " sap", "sic", "di", " Si", "i", "Si", " sa", "san", "sci", "SI", "isi", " di", "sam", "yi", " SI", "ski", " psi", " bi", "sky", " ni", " sid", " ss", "no", "sim", "sil", "ii", " sd", "ti", "sa", "sie", " ski", " vi", " iso", "zi", "ini", "ui", "ity", " ti", " su", " ki", "sis", "ati", "sd", "se", " nib", " sip"]}}
{"code": "n = int(input())\\nS = list(map(int, input().split()))\\nq = int(input())\\nT = list(map(int, input().split()))\\n\\nSset = set(S)\\nTset = set(T)\\n\\nprint(len(Sset & Tset))\\n", "target": "316", "substitutes": {"n": ["N", "x", "d", "p", "i", "w", "sn", "c", "m", "z", "ns", "o", "f", "b", "num", "t", "na", "v", "e", "nc", "nm", "s", "node", "nn", "l", "k", "j", "y"], "S": ["SN", "N", "NS", "SS", "SL", "SB", "SER", "X", "Sl", "L", "RS", "R", "PS", "Si", "VS", "SI", "CS", "TS", "Set", "OS", "Services", "SQL", "V", "AS", "Sus", "INS", "B", "Q", "P", "SE", "A", "US", "s", "SP", "ST", "SU", "DS", "Y", "SA", "SR", "LS", "C"], "q": ["x", "d", "p", "g", "qu", "i", "w", "r", "c", "m", "z", "o", "h", "f", "b", "num", "t", "Q", "e", "it", "nu", "l", "u", "k", "j", "y", "qs"], "T": ["WT", "IT", "M", "N", "TR", "AT", "X", "L", "TS", "PT", "VT", "TG", "Times", "CT", "V", "TH", "TV", "t", "Tu", "B", "J", "Q", "TI", "G", "P", "TB", "TT", "D", "TA", "Test", "TM", "Y", "TE", "GT", "The", "F", "TN", "C"], "Sset": ["JSet", "Jsat", "TSet", " Slog", "Ssat", "Tsat", "NSet", "Nset", "Set", "Jset", "LSet", "Slog", "Tlog", "SSet", "Net", "Let", "Lset", " SSet", " Ssat", "Jlog", "Tet"], "Tset": ["TSdict", "JSet", "TSet", "TLset", "TLdict", "Tlist", "TLspace", " Tdict", "TSspace", "PSet", "BSet", "Bset", " Tspace", "Jset", "Tdict", "Psum", "Psync", "Tsync", "Tspace", "Jsync", "TSset", "Tsum", "Pset", "TSlist", "Bsync", " Tlist", "Bsum", "TLlist", "Jsum"]}}
{"code": "def main():\\n    n = int(input())\\n    a_lst = list(map(int, input().split()))\\n    b_lst = list(map(int, input().split()))\\n    c_lst = list(map(int, input().split()))\\n    ans = 0\\n\\n    for a in a_lst:\\n        ans += b_lst[a - 1]\\n\\n    for i in range(n - 1):\\n        if a_lst[i] + 1 == a_lst[i + 1]:\\n            ans += c_lst[a_lst[i] - 1]\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "731", "substitutes": {"n": ["N", "net", "nt", "gn", "d", "p", "en", "ne", "cn", "sn", "c", "m", "ns", "o", "nl", "b", "num", "t", "count", "nia", "len", "nb", "no", "mn", "na", "nc", "nan", "nu", "size", "nn", "l", "np", "network", "j"], "a_lst": ["a_jlpl", "a64lbct", "a_lbct", "a_lllist", "a_islst", "a_jlest", "a_lct", "a64lso", "a_slst", "a_lso", "a_rlist", "a_tsts", "a_rlst", "a_jlst", "a_islct", "a_rlbl", "a_lasc", "a_sllist", "a_List", "a_rct", "a_Lst", "a_laest", "a_lbst", "a_jlist", "a_lsc", "a64lbist", "a_islso", "a_laist", "a_tbl", "a_llpl", "a_lsh", "a_islist", "a64list", "a_slist", "a_rsts", "a_rist", "a_lbsh", "a_lest", "a_llsh", "a64lst", "a_list", "a_lapl", "a_llist", "a_tist", "a_rst", "a64lbso", "a_last", "a_lblist", "a_rbl", "a64lbst", "a_lbl", "a_llst", "a_lbso", "a_Lsc", "a_slsh", "a_llest", "a_tst", "a_rlsts", "a_lpl", "a_rso", "a_lsts", "a_lbist", "a64lct"], "b_lst": ["b_glz", "b_Lmt", "b_blst", "b_blST", "b_list", "b_liz", "b_blist", "b_dlz", "b_dlister", "b_clst", "b_List", "b_glister", "b_lST", "b_clist", "b_dlst", "b_lister", "b_glist", "b_lz", "b_LST", "b_blmt", "b_dlist", "b_liist", "b_glst", "b_lmt", "b_clST", "b_Lst", "b_clmt", "b_liister"], "c_lst": ["c_clst", "c_lth", "c_lnt", "c_clth", "c_clbl", "c_lng", "c_lld", "c_nlnt", "c_nlng", "c_tist", "c_tth", "c_llng", "c_dlst", "c_clng", "c_llnt", "c_clnt", "c_tld", "c_dlth", "c_nlst", "c_list", "c_llst", "c_llbl", "c_clist", "c_tst", "c_lbl", "c_nlbl", "c_dlld", "c_dlist", "c_clld"], "ans": ["ars", "ANS", "ants", "ats", "ians", "ana", " means", "eds", "acs", "helps", "aus", "ros", "aned", " Ans", "ates", "ns", "vals", "ann", "rans", "ums", "rs", "anas", "offs", "ins", "ras", "wan", "ons", "ms", "amps", "ls", "mean", "anned", "ents", "ens", "cas", "uns", "ados", "an", "posts", "gs", "anks", "can", "anes", "works", "oss", "nan", "ran", "ams", "aos", "ands", "nas", "vs", "ads", "arts", "lan", "AN", "olds"], "a": ["aq", "x", "sta", "ae", "ac", "ja", "ta", "action", "ana", "name", "va", "xa", "ma", "ami", "o", "ea", "pa", "la", "\u00e4", "b", "art", "wa", "an", "A", "at", "af", "aka", "sa", "sha", "oa", "au", "aa", "l", "am", "j", "ba", "ca", "ao"], "i": ["mi", "xi", "x", "ia", "uri", "ci", "gi", "di", "ai", "I", "m", "z", "bi", "ami", "yi", "ic", "ski", "ix", "ip", "ind", "f", "ri", "si", "ii", "li", "ei", "e", "v", "ti", "im", "it", "zi", "ini", "ui", "q", "l", "pi", "id", "j", "index", "y", "fi", "ij", "iu", "hi"]}}
{"code": "from collections import defaultdict\\nfrom fractions import Fraction\\nN = int(input())\\nA = [0 for  _ in range(N)]\\nB = [0 for  _ in range(N)]\\nfor i in range(N):\\n    A[i], B[i] = [int(i) for i in input().split()]\\nA.sort()\\nB.sort()\\n\\nif N%2 == 1:\\n    target = ((N+1)//2)-1\\n    print(B[target]-A[target]+1)\\nelse:\\n    target1 = ((N)//2)-1\\n    target2 = (N)//2\\n    num1 = (A[target1]+A[target2])/2\\n    num2 = (B[target1]+B[target2])/2\\n    print(int(((num2-num1)/0.5)+1))", "target": "203", "substitutes": {"N": ["SN", "CNN", "Name", "n", "M", "NS", "T", "GN", "NI", "Ns", "R", "I", "X", "NA", "L", "NM", "Number", "NN", "NP", "CN", "NR", "NT", "NH", "H", "O", "V", "NO", "Z", "NUM", "S", "NAME", "J", "Q", "G", "ND", "P", "Num", "E", "D", "NB", "Ni", "U", "K", "F", "AN", "TN", "NG", "C"], "A": ["a", "GA", "API", "Al", "An", "IA", "Ar", "AH", "Alpha", "AU", "AT", "I", "Av", "ACC", "L", "AL", "AST", "AV", "ABC", "AD", "AB", "App", "AE", "H", "AA", "LA", "As", "AR", "AS", "S", "This", "HA", "Ant", "CA", "At", "E", "JA", "AF", "au", "ATA", "AM", "Ac", "SA", "U", "AC", "The", "BA", "AN", "Array", "Ag", "AP"], "_": ["loc", "local", "__", "ox", "ml", "my", "parent", "val", "ind", "place", "time", "pt", "non", "int", "all", "___"], "B": ["Other", "LB", "But", "M", "BI", "CB", "T", "MB", "RB", "BL", "VB", "BS", "OB", "Bs", "SB", "I", "Big", "L", "Two", "IB", "Builder", "AB", "Reb", "BG", "BER", "V", "BT", "BP", "b", "Bar", "BC", "BE", "S", "J", "BR", "WB", "GB", "PB", "BB", "USB", "BM", "Bern", "TB", "FB", "D", "NB", "EB", "BO", "BF", "Y", "DB", "BA", "Beta", "BY", "Blue"], "i": ["mi", "ki", "n", "xi", "x", "ia", "uri", "ci", "gi", "cli", "p", "di", "ib", "ai", "I", "iter", "bi", "qi", "info", "iti", "yi", "ic", "ix", "ip", "iri", "ind", "b", "multi", "t", "ri", "io", "si", "ii", "li", "ji", "ori", "ei", "int", "ti", "oi", "im", "it", "zi", "ui", "ini", "l", "pi", "phi", "u", "id", "y", "fi", "index", "ij", "k", "j", "iu", "hi"], "target": ["arg", "next", "pointer", "secondary", "master", "ARGET", "to", "goal", "field", "proxy", "blank", "table", "match", "test", "forward", "dest", "vector", "set", "batch", "focus", "note", "prime", "slot", "gt", "success", "biased", "alias", "t", "rel", "share", "Target", "fill", "arget", "inter", "primary", "jump", "group", "peer", "base", "origin", "selected", "link", "index", "bolt", "root", "kill", "back", "source", "tool", "transform"], "target1": ["testOne", "Target01", "targetFirst", "shareFirst", "target01", " target91", "taskFirst", "taskONE", "route91", "targetOne", " target01", "Target0", "arget1", "test91", "share1", "arget2", "share91", "plot1", "plot91", "target91", "shareONE", "Target2", "target81", "arget01", " target0", "plot81", "targetONE", "target0", "routeONE", "test1", " target81", "task1", "task91", "route1", "test81", "routeFirst", "Target1", "plotOne", "arget0", " targetOne"], "target2": ["arg3", "target22", "scope22", "source1", " targetTwo", " target02", "match2", "num3", "sourcetwo", "tasktwo", "iter22", " target3", "targetb", "scope2", "numTwo", "matchb", "taskb", "target3", "arg02", "peer32", "peer22", "peer2", "peer02", "targetTwo", "iter2", "task1", "scope32", "match1", "arg2", "iter32", "task2", "matchtwo", "iter02", "source2", "argTwo", "targettwo", "sourceb", "target02", "target32", "num02", "scope02"], "num1": ["numOne", "obj1", "date001", " numOne", "nu01", "date1", " numone", " num01", "num01", "obj001", "norm7", "norm01", "nu100", "num100", "num7", "nu1", "numone", "objOne", "num001", "objone", " num001", "norm1", "norm100", "nu7", " num100", " num7", "dateone", "dateOne"], "num2": ["NUMTwo", "NUM2", "num182", "msg182", "n2", " numTwo", " numtwo", "numTwo", "numtwo", " num02", "number02", "n1", " num182", "msgtwo", "msgTwo", "NUMtwo", "msg2", "number2", "NUM182", "number1", "num02", "n02"]}}
{"code": "n,k,q=list(map(int,input().split()))\\na=[0 for _ in range(n)]\\nfor i in range(q):\\n  x=int(input())\\n  a[x-1] += 1\\nw=q-k+1\\nfor i in range(n):\\n  if a[i] >= w:\\n    print('Yes')\\n  else:\\n    print('No')\\n", "target": "336", "substitutes": {"n": ["nr", "N", "nt", "d", "p", "ln", "ne", "g", "sn", "c", "m", "ns", "o", "num", "t", "nb", "no", "mn", "nv", "na", "an", "v", "nc", "s", "nan", "nu", "nn", "l", "np", "y", "j"], "k": ["ck", "km", "ki", "ek", "kn", "kr", "kh", "kl", "p", "g", "ke", "c", "m", "dk", "ks", "kw", "ko", "f", "tk", "kok", "kj", "v", "ku", "kk", "j", "ka", "K", "ik", "sk", "kg", "y", "mk"], "q": ["aq", "ck", "qv", "d", "p", "g", "qu", "iq", "qt", "quant", "ke", "r", "c", "m", "z", "qi", "query", "o", "h", "f", "b", "t", "Q", "v", "e", "sq", "qq", "qa", "ch", "dq", "ll", "u", "j", "qs"], "a": ["to", "sta", "ac", "ab", "ta", "p", "ai", "xa", "ma", "m", "set", "ata", "eas", "ga", "change", "ea", "pa", "la", "b", "t", "alpha", "da", "wa", "out", "na", "an", "A", "ans", "ap", "at", "sa", "ha", "s", "au", "oa", "aos", "aa", "pi", "am", "index", "area", "ba", "ca", "ao"], "_": ["km", "ki", "ai", "I", "ox", " all", "ix", "ip", " int", "ind", "num", "key", "an", "int", " p", "j", "ik"], "i": ["mi", "ki", "xi", "ia", "ci", "gi", "p", "di", "ai", "I", "z", "m", "bi", "yi", "ic", "o", "ix", "ip", "ind", "b", "ri", "si", "li", "ii", "v", "e", "int", "ti", "iy", "im", "it", "zi", "ini", "l", "pi", "u", "id", "y", "j", "ik", "ij", "iu"], "x": ["xi", "ex", "ci", "xe", "p", "xes", "ux", "xc", "X", "xa", "rx", "c", "ox", "z", "xxxx", "xt", "xxx", "ic", "ix", "tx", "ax", "xd", "sat", "v", " xx", "xy", "xs", "dx", "xx", "l", "j", "y", "lex", "px", "xp", "xf"], "w": ["wx", "sw", "d", "wh", "we", "wt", "r", "z", "wb", "wr", "window", "iw", "rw", "wi", "W", "wd", "kw", "wo", "h", "wal", "ew", "wl", "wid", "win", "wa", "wp", "v", "wig", "ws", "width", "ww", "wm", "nw", "wk", "l", "y"]}}
{"code": "from bisect import bisect_left as bl, bisect_right as br, insort\\nimport sys\\nimport heapq\\n# from math import *\\nfrom collections import defaultdict as dd, deque\\ndef data(): return sys.stdin.readline()\\ndef mdata(): return map(float, data().split())\\nout = sys.stdout.write\\n# sys.setrecursionlimit(100000)\\nINF = int(1e9)\\nmod = int(1e9) + 7\\n\\nn = int(data())\\nP = list(mdata())\\ndp = [0.0] * (n // 2 + 2)\\ndp[1] = float(1)\\nfor i in range(n):\\n    p=P[i]\\n    for j in range(len(dp) - 1, 0, -1):\\n        dp[j] = dp[j - 1] * (1 - p) + dp[j] * (p)\\nprint(sum(dp))\\n", "target": "437", "substitutes": {}}
{"code": "import math\\n\\nwhile True:\\n    n = int(input())\\n    if n == 0:\\n        break\\n    sn = [int(s) for s in input().split()]\\n    m = sum(sn) / n\\n    a2 = 0.0\\n    for s in sn:\\n        a2 += pow(s-m, 2)\\n    print(math.sqrt(a2/n))", "target": "683", "substitutes": {"n": ["a", "N", "x", "nt", "ni", "gn", "ln", "d", "p", "ne", "cn", "i", "r", "c", "ns", "o", "nl", "h", "f", "num", "nia", "t", "len", "nb", "nor", "no", "na", "v", "nc", "nu", "nn", "l", "q", "np", "number", "j"], "sn": ["SN", "nr", "sb", "sw", "sr", "sh", "stri", "su", "wn", "syn", "gn", "ln", "p", "cn", "sys", "ns", "src", "nl", "sl", "ls", "sp", "fn", "ss", "si", "fl", "bn", "tn", "nc", "gs", "sm", "sa", "ssl", "sv", "sol", "Sn", "nn", "sd", "cs", "sk", "rn", "bs", "sc"], "s": ["a", "sb", "sh", "self", "ples", "str", "ats", "js", "p", "ains", "eds", "i", "fs", "sys", "c", "ts", "z", "ns", "src", "ies", "rs", "ses", "ins", "less", "ords", "sl", "h", "ms", "sing", "ls", "f", "t", "ss", "S", "si", "uns", "tes", "v", "gs", "sq", "ws", "string", "ups", "ays", "ims", "xs", "alls", "sol", "sv", "sts", "l", "sis", "ads", "cs", "ags", "sk", "os", "es", "qs", "ds", "ps"], "m": ["tm", "mi", "M", "perm", "dm", "p", "mm", "mu", "i", "r", "c", "ma", "em", "man", "bm", "rm", "gm", "h", "ms", "b", "t", "mc", "mn", "v", "nm", "sm", "vm", "wm", "l", "am", "mem", "k", "mt", "cm"], "a2": ["area82", " a02", "A4", "a52", "aa022", "n2", "A2", "p42", "n52", "a42", "p1", "a02", "n022", "ta02", " a4", "a3", "area1", "ta52", "a4", "a022", "area42", " a1", " a3", "area3", "area2", "a82", "area02", "A82", "A3", "aa02", " a42", "area4", "p02", "ta2", " a82", "aa2", "p2", "aa52", "a1", "n02", "ta022"]}}
{"code": "N, M = map(int, input().split())\\nQ = [tuple(map(int, input().split())) for _ in range(M)]\\n\\n# \u53f3\u5074\u304c\u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3001\u5236\u7d04a<b\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3088\u3044\\nQ = sorted(Q, key=lambda x: x[1])\\n# \u5883\u754c\u3001\u53f3\u5074\u306e\u533a\u9593\u306e\u59cb\u307e\u308a\\nborder = -1\\nans = 0\\n\\nfor a, b in Q:\\n    # \u65e2\u5b58\u306e\u5883\u754c\u3067\u5206\u3051\u3089\u308c\u306a\u3044\u3068\u304d\u306f\u53f3\u306b\u305a\u3089\u3059\\n    if border <= a:\\n        ans += 1\\n        border = b\\n\\nprint(ans)", "target": "219", "substitutes": {"N": ["CNN", "n", "NS", "T", "NC", "Ns", "X", "R", "I", "NA", "L", "NN", "NR", "H", "W", "V", "S", "B", "J", "P", "E", "D", "Ni", "K", "F", "Z", "C"], "M": ["NS", "T", "CM", "R", "I", "X", "L", "NM", "MX", "m", "MM", "O", "V", "MC", "S", "MAN", "B", "J", "P", "MP", "MS", "D", "DM", "Y", "MN", "MR", "MT", "MI", "U", "LM", "K", "F", "C"], "Q": ["T", "R", "X", "I", "L", "POS", "W", "H", "O", "V", "UE", "S", "B", "J", "G", "P", "E", "D", "q", "U", "K", "F", "qs", "Z", "FN", "QU", "C"], "_": ["x", "ex", " the", " j", "__", " pre", "ox", "ix", " g", "val", " x", " c", " __", "___", " p", "j", " un", "ay", " z"]}}
{"code": "X,Y,Z,K = map(int,input().split())\\nA=list(map(int,input().split()))\\nB=list(map(int,input().split()))\\nC=list(map(int,input().split()))\\nA.sort(reverse=True)\\nB.sort(reverse=True)\\nC.sort(reverse=True)\\n\\nfrom collections import defaultdict\\ndone = defaultdict(lambda:False)\\nimport heapq\\nq = [(-A[0]-B[0]-C[0],0,0,0)]\\nheapq.heapify(q)\\n\\nfor _ in range(K):\\n    ma,i,j,k = heapq.heappop(q)\\n    if not done[(i+1,j,k)] and i<X-1:\\n        done[(i+1,j,k)]=True\\n        heapq.heappush(q,(-A[i+1]-B[j]-C[k] , i+1,j,k))\\n    \\n    if not done[(i,j+1,k)] and j<Y-1:\\n        done[(i,j+1,k)]=True\\n        heapq.heappush(q,(-A[i]-B[j+1]-C[k] , i,j+1,k))\\n    \\n    if not done[(i,j,k+1)] and k<Z-1:\\n        done[(i,j,k+1)]=True\\n        heapq.heappush(q,(-A[i]-B[j]-C[k+1] , i,j,k+1))\\n    print(-ma)", "target": "403", "substitutes": {"X": ["M", "IX", "N", "x", "T", "I", "EX", "L", "R", "MX", "UX", "OX", "AX", "H", "ZX", "W", "XY", "V", "XP", "S", "DX", "J", "Q", "ML", "G", "P", "E", "XX", "XT", "D", "XL"], "Y": ["M", "N", "T", " y", "RY", "I", "Py", "R", "TY", "YS", "MY", "OX", "YC", "Year", "H", "XY", "V", "YA", "J", "Q", "P", "IO", "E", "YN", "YY", "Cy", "HTTP", "y", "SY", "NY"], "Z": ["DJ", "M", "N", "T", "ZZ", "ZI", "IC", "SS", "BOX", "AZ", "I", "JS", "L", "z", "Zone", "OS", "H", "ZX", "NZ", "O", "V", "MC", "S", "DX", "J", "Q", "SK", "G", "P", "XX", "D", "CL", "LL"], "K": ["M", "N", "T", "KR", "KEY", "I", "R", "KK", "KT", "FK", "O", "V", "KS", "PK", "KC", "NK", "S", "IK", "J", "SK", "Q", "G", "P", "VK", "D", "NB", "OK", "MN", "F", "KI", "KE", "KA"], "A": ["GA", "API", "An", "IA", "AU", "AT", "I", "Av", "L", "ACC", "AL", "AV", "AST", "Area", "AB", "App", "AE", "H", "AA", "LA", "As", "AI", "AR", "RAM", "ICA", "CA", "At", "JA", "AF", "TA", "ATA", "AM", "SA", "AC", "ACT", "BA", "AN", "Array", "Ag", "AP"], "B": ["LB", "BI", "MB", "RB", "BL", "BS", "VB", "OB", "Bs", "SB", "Lab", "Two", "IB", "Builder", "AB", "Reb", "BG", "BER", " b", "BT", "QB", "BP", "BE", "BC", "Bar", "J", "BR", "GB", "PB", "BD", "WB", "BB", "Ber", "BM", "Bern", "TB", "FB", "Base", "NB", "EB", "BO", "BF", "Buffer", "DB", "Bytes", "BA", "JB", "Blue"], "C": ["WC", "Chain", "CB", "T", "Cu", "CAR", "CM", "CW", "JC", "CG", "R", "CE", "CU", "Config", "c", "CI", "CS", "CN", "Cs", "YC", "H", "CV", "CT", "CP", "Ch", "V", "VC", "TN", "KC", "GC", "CCC", "S", "BC", "EC", "J", "Co", "SC", "CO", "G", "DC", "Three", "Q", "CR", "CA", "E", "CON", "Cache", "OC", "D", "HC", "CC", "CL", "CF", "Can"], "done": ["dependent", "dirty", "next", "fine", "complete", "pleted", "released", "d", "confirmed", "db", "given", "coord", "di", "none", "we", "created", "running", "process", "dev", "total", "initialized", "message", "success", "generated", "default", "enabled", "result", "Done", "failed", "present", "ready", "t", "gone", "loaded", "ded", "de", "available", "killed", "des", "msg", "debug", "date", "primary", "needed", "equal", "found", "due", "ailed", "desc", "later", "do", "size", "made", "com", "progress", "recent", "du", "finished", "sent", "data", "shown", "dict", "ds", "defined", "said"], "q": ["aq", " seq", "ck", "pkg", "x", "queue", " eq", "ql", "resh", "d", "p", "ue", "g", "qu", "iq", "qt", "quant", "requ", "w", " sq", "c", "z", "m", " Q", "qi", "query", " queue", " qu", "ic", "o", "ix", " g", "h", " quality", "gm", "b", "quit", "t", " quad", "Q", "v", "e", "sq", "qq", " query", "cache", "qa", "msg", "qual", "ch", " quant", " exp", "it", "req", "ve", "dq", "lock", "que", "cl", "u", "y", "quest", "qs", "er", " msg", "ry", " question"], "_": [" do", " g", " __", "___", " un"], "ma": ["a", "ia", "ja", "me", "um", "ta", "mu", "mp", "di", "ai", "ota", "ema", "m", "mad", "mas", "ga", "ju", "ea", "pa", "ms", "fa", "f", "si", "da", "wa", "na", "ti", "qa", "MA", "sa", "ha", "au", "Ma", "base", "pi", "ka", "data", "hi"], "i": ["a", "mi", "ki", " ii", "xi", "x", "ia", "ie", "ci", "gi", "ir", "cli", "mm", "di", "ai", "I", "m", "z", "ami", "bi", "info", "ic", "ix", "o", "iri", "ip", "ri", "io", "si", "ii", "li", "ji", "ei", "ori", "int", "ti", "oi", "at", "im", "it", "ims", "ini", "ui", "zi", "phi", "pi", "u", "id", "index", "iat", "ij", "y", "ik", "iu", "hi", "fi", "init"], "j": ["a", "json", "n", "jack", "x", "uj", "ja", "ijk", "js", "aj", "p", "on", "ne", "g", "jp", "job", "us", "r", "jc", "z", "jj", "bi", "o", "res", "ix", "h", "jl", "fr", "b", "br", "sp", "rel", "jac", "f", "je", "pt", "si", "t", "J", "bj", "key", "ji", "v", "kj", "row", "obj", "im", "it", "tr", "jump", "s", "l", "yes", "dj", "u", "y", "er", "ij", "jit", "bs"], "k": ["ck", "km", "ki", "ek", "kn", "uk", "kr", "x", "kh", "kl", "ijk", "KR", "p", "ask", "jp", "ak", "ke", "kid", "r", "c", "z", "m", "dk", "ks", "o", "kw", "ko", "kind", "tk", "sch", "kok", "key", "kj", "ok", "kick", "it", "ku", "ark", "wk", "kt", "u", "kk", "id", "sk", "ik", "kan", "ka", "y", "mk", "unk", "sc"]}}
{"code": "import heapq\\n\\nn = int(input())\\na = list(map(int, input().split()))\\ndp = [0] * (pow(10, 6) + 5)\\nheapq.heapify(a)\\nheapq.heappush(a, 1000003)\\nans = -1\\ny = 0\\nfor _ in range(n + 1):\\n    x = heapq.heappop(a)\\n    if x == y and dp[x] == 2:\\n        dp[x] = 1\\n        ans -= 1\\n        continue\\n    elif dp[x] == 0:\\n        ans += 1\\n        dp[x] = 2\\n        i = 2\\n        while i * x <= 1000000:\\n            dp[i * x] = 1\\n            i += 1\\n    y = x\\nprint(ans)", "target": "268", "substitutes": {"n": ["nr", "N", "nt", "gn", "d", "p", "cn", "g", "sn", "w", "c", "m", "z", "ns", "nl", "num", "fn", "count", "nia", "nb", "no", "mn", "na", "an", "nc", " ns", "nan", "nu", "size", "nn", "number", "l", "q", "np", "network", "k", "j"], "a": ["ia", "ae", "ac", "ab", "ta", "d", "p", "en", "xa", "ai", "w", "c", "ma", "eas", "ga", "o", "ea", "pa", "aaa", "la", "f", "b", "t", "da", "wa", "apa", "na", "an", "e", "v", "all", "anta", "A", "ap", "at", "sa", "s", "app", "oa", "au", "aa", "l", "am", "u", "ca", "ao"], "dp": ["pkg", "dos", "pm", "dm", "d", "p", "db", "cd", "di", "jp", "td", "dh", "dl", "pb", "gp", "wd", "tp", "pa", "ip", "dt", "df", "dep", "dc", "pas", "da", "DP", "wp", "dr", "pd", "lp", "tap", "deb", "cp", "dq", "yp", "pipe", "bp", "dd", "dj", "np", "px", "pp", "ds", "ps"], "ans": ["ars", "ys", "ANS", "ants", "ats", "ians", "actions", "outs", "ai", "ows", "aus", "ros", "ts", "ns", "ies", "ann", "rans", "rs", "ks", "ins", "ons", "ms", "amps", "ls", "pan", "ents", "ens", "ots", "uns", "na", "an", "aps", "anes", "s", "nan", "xs", "nas", "aos", "vs", "yes", "ads", "os", "es", "stats", "ds", "ps", "bs"], "y": ["sy", "ty", "ys", "ci", "d", "p", "wy", "cy", "oy", "yo", "z", "m", "ies", "ny", "yi", "type", "vy", "o", "py", "ye", "ind", "b", "dy", "t", "si", "uy", "yn", "e", "gy", "ok", "iy", "xy", "ry", "yt", "Y", "yy", "pi", "phi", "u", "j", "index", "k", "ay", "ym"], "_": [" e", " the", " j", " k", "__", " do", "val", " l", " c", "an", " __", " v", "j"], "x": ["wx", "xi", "ex", "any", "sw", "xe", "p", "on", "xes", "ux", "xc", "test", "ct", "X", "xa", "rx", "true", "c", "ox", "z", "full", "xxxx", "xt", "el", "xml", "xxx", "ix", "h", "tx", "ax", "f", "xd", "time", "yl", "xxxxxxxx", "check", "v", "e", "an", "fx", "exp", "key", "at", "xy", "xs", "mx", "dx", "q", "xx", "pl", "l", "lat", "lex", "index", "px", "xp", "xf", "ry"], "i": ["mi", "ki", "xi", "ci", "gi", "d", "p", "g", "di", "ai", "I", "c", "m", "z", "bi", "info", "qi", "ic", "o", "ix", "ip", "b", "multi", "t", "si", "ii", "li", "v", "ei", "e", "ti", "int", "im", "it", "ini", "zi", "ui", "l", "pi", "u", "id", "j", "index", "ij", "iu", "hi"]}}
{"code": "import sys, re, os\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, acos, atan, asin, log, log10, gcd\\nfrom itertools import permutations, combinations, product, accumulate, combinations_with_replacement\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\n#from fractions import gcd\\ndef debug(*args):\\n    if debugmode:\\n        print(*args)\\ndef input(): return sys.stdin.readline().strip()\\ndef STR(): return input()\\ndef INT(): return int(input())\\ndef FLOAT(): return float(input())\\ndef MAP(): return map(int, input().split())\\ndef S_MAP(): return map(str, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef S_LIST(): return list(map(str, input().split()))\\ndef lcm(a, b): return a * b // gcd(a, b)\\nsys.setrecursionlimit(10 ** 9)\\ninf = sys.maxsize\\nmod = 998244353\\ndx = [0, 1, 0, -1, 1, -1, -1, 1]\\ndy = [1, 0, -1, 0, 1, -1, 1, -1]\\ndebugmode = True\\n\\nn2 = [1 for _ in range(3010)]\\nfor i in range(1, 3010):\\n    n2[i] = n2[i - 1] * 2 % mod\\n\\nn, s = MAP()\\na = LIST()\\ndp = [[0 for _ in range(s + 1)] for _ in range(n)]\\nif s >= a[0]:\\n    dp[0][a[0]] = 1\\nfor i in range(1, n):\\n    for j in range(1, min(s + 1, a[i])):\\n        dp[i][j] = dp[i - 1][j] * 2\\n        dp[i][j] %= mod\\n    if a[i] <= s:\\n        dp[i][a[i]] = dp[i - 1][a[i]] * 2 + n2[i]\\n        dp[i][a[i]] %= mod\\n    for j in range(a[i] + 1, s + 1):\\n        dp[i][j] = dp[i - 1][j] * 2 + dp[i - 1][j - a[i]]\\n        dp[i][j] %= mod\\nprint(dp[n - 1][s])\\n", "target": "681", "substitutes": {}}
{"code": "#!/usr/bin/env pypy3\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\nimport queue\\n\\ndef main():\\n    mod=10**9+7\\n    N=I()\\n    adj=[[] for _ in range(N)]\\n    for i in range(N-1):\\n        a,b=MI()\\n        a-=1\\n        b-=1\\n        adj[a].append(b)\\n        adj[b].append(a)\\n    bit=[-1]*N#\u672a\u78ba\u8a8d,F,S    \\n    bit[0]=0\\n    bit[-1]=1\\n    pL=[0]*N\\n    dS=0\\n    \\n    q=queue.Queue()\\n    q.put((0,0,0))#v.pare,depth\\n    \\n    #\u6df1\u3055\u3092\u8abf\u3079\u308b\\n    while not q.empty():\\n        v,p,d=q.get()\\n        pL[v]=p\\n        if v==N-1:\\n            dS=d\\n            break\\n        for i in range(len(adj[v])):\\n            nv=adj[v][i]\\n            if nv!=p:\\n                q.put((nv,v,d+1))\\n    \\n    #\u4e3b\u8981\u306a\u3068\u3053\u308d\u3092\u5857\u308b            \\n    v=N-1            \\n    for _ in range((dS-1)//2):\\n        v=pL[v]\\n        bit[v]=1\\n        \\n    q2=queue.Queue()\\n    q2.put((0,0))#v.pare\\n    while not q2.empty():\\n        v,p=q2.get()\\n        if bit[v]==-1:\\n            bit[v]=bit[p]\\n\\n        for i in range(len(adj[v])):\\n            nv=adj[v][i]\\n            if nv!=p:\\n                q2.put((nv,v))\\n        \\n        \\n                    \\n    s=sum(bit)#sunuke\u304c\u5857\u308c\u308b\\n    if s>=N-s:\\n        print(\"Snuke\")\\n    else:\\n        print(\"Fennec\")\\n     \\n        \\n    \\n    \\n\\nmain()\\n", "target": "435", "substitutes": {}}
{"code": "# coding: utf-8\\nimport sys\\n\\nsr = lambda: sys.stdin.readline().rstrip()\\nir = lambda: int(sr())\\nlr = lambda: list(map(int, sr().split()))\\n\\nS = sr()\\nK = ir()\\ncand = set()\\nlength = len(S)\\nfor i in range(length):\\n    for j in range(1, 6):\\n        cand.add(S[i:i+j])\\n\\nanswer = sorted(list(cand))[K-1]\\nprint(answer)\\n", "target": "246", "substitutes": {}}
{"code": "h, w = map(int, input().split())\\ns = []\\nfor _ in range(h):\\n    s.append(list(input()))\\nfor i in range(h):\\n    for j in range(w):\\n        a = 0\\n        if s[i][j] == '.':\\n            for k in range(i - 1, i + 2):\\n                for l in range(j - 1, j + 2):\\n                    if (0 <= k and k <= h - 1) and (0 <= l and l <= w - 1) and s[k][l] == '#':\\n                        a += 1\\n            s[i][j] = str(a)\\nfor m in range(h):\\n    print(''.join(s[m]))", "target": "615", "substitutes": {"h": ["ht", "n", "th", "sh", "x", "p", "g", "hz", "r", "hs", "z", "ih", "rh", "http", "o", "H", "ah", "bh", "f", "b", "hl", "v", "oh", "height", "hw", "ha", "ch", "ph", "he", "hr", "hd", "q", "ho", "hh", "y", "hi", "hm"], "w": ["wx", "n", "sw", "wn", "d", "wh", "we", "wt", "r", "z", "wb", "wall", "wr", "window", "iw", "rw", "W", "wd", "kw", "wo", "wal", "ew", "wl", "wid", "win", "wa", "wp", "v", "width", "ws", "hw", "nw", "wk", "aw", "words"], "s": ["n", "sb", "prints", "ys", "seconds", "aws", "services", "ats", "ports", "js", "d", "p", "ains", "eds", "g", "ows", "hs", "c", "ts", "ns", "ies", "rs", "ses", "tests", "ins", "ms", "ls", "abs", "b", "t", "ss", "S", "args", "its", "results", "states", "v", "e", "gs", "sq", "strings", "ws", "eps", "sv", "xs", "bes", "sts", "vs", "q", "ads", "cs", "os", "changes", "stats", "qs", "ests", "ds", "ps", "es", "bs"], "_": ["ck", "km", "x", "ia", "p", "ach", "ai", "ky", "my", "ic", "ix", "let", "ind", "ow", "lo", "li", "an", "al", "q", "il", "y", "ik", "ac"], "i": ["mi", "\u00ed", "ki", "xi", "x", "ia", "n", "ie", "ci", "gi", "di", "ai", "I", "z", "bi", "ic", "o", "ix", "ip", "ind", "si", "li", "ii", "v", "e", "int", "ti", "im", "it", "ini", "zi", "ui", "pi", "u", "id", "y", "ik", "ij", "iu", "hi"], "j": ["n", "x", "uj", "ja", "js", "aj", "p", "d", "g", "jp", "job", "r", "jc", "oj", "z", "jj", "el", "o", "jl", "br", "b", "je", "rel", "t", "J", "bj", "li", "ji", "v", "kj", "e", "obj", "it", "q", "dj", "u", "y", "ij"], "a": ["ia", "sta", "ae", "ac", "ab", "mod", "ta", "d", "p", "ana", "xa", "c", "ma", "ata", "ga", "ea", "pa", "aaa", "result", "fa", "b", "t", "alpha", "wa", "apa", "add", "na", "an", "v", "A", "at", "sa", "sha", "new", "au", "oa", "ed", "aa", "am", "index", "area", "ba", "ca"], "k": ["km", "ki", "n", "ek", "kn", "uk", "kr", "x", "kh", "kl", "ijk", "p", "g", "kar", "ak", "kid", "ke", "r", "z", "ks", "o", "kw", "ko", "tk", "kok", "kj", "v", "ok", "it", "ikk", "ku", "wk", "kt", "q", "u", "kk", "sk", "ka", "K", "ik", "kg", "mk"], "l": ["lc", "n", "lu", "lf", "kl", "tl", "ln", "lt", "p", "d", "ul", "g", "lb", "L", "r", "c", "z", "ly", "dl", "ml", "el", "o", "nl", "sl", "la", "ls", "jl", "f", "b", "hl", "t", "yl", "len", "lo", "lp", "li", "fl", "v", "al", "lv", "lr", "ol", "q", "ll", "le", "il", "u"], "m": ["mi", "M", "n", "x", "pm", "dm", "d", "p", "mu", "mm", "name", "g", "r", "c", "ma", "z", "mut", "o", "gm", "ms", "f", "b", "t", "mc", "mn", "li", "v", "an", "e", "nm", "sm", "im", "mx", "q", "dj", "u", "y", "mt", "cm", "ij"]}}
{"code": "s=set(input())\\nfor i in range(97,97+26):\\n    c=chr(i)\\n    if not c in s:\\n        print(c)\\n        exit()\\nprint('None')\\n", "target": "767", "substitutes": {"s": ["a", "n", "sb", "ats", "js", "p", "g", "w", "ts", "m", "ns", "rs", "ses", "ins", "h", "ls", "abs", "b", "gins", "t", "S", "ss", "parts", "strings", "v", "gs", "ws", "ges", "sa", "sv", "xs", "ims", "ches", "cs", "es", "qs", "ds", "ps"], "i": ["\u00ed", "mi", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "z", "m", "bi", "yi", "qi", "ic", "ix", "ip", "ind", "f", "b", "si", "li", "key", "ii", "v", "int", "ti", "oi", "ch", "zi", "q", "pi", "id", "index", "j", "iu", "hi"], "c": ["ce", "lc", "con", "x", "cat", "ci", "gc", "cont", "p", "unc", "cd", "ct", "rc", "cy", "arc", "r", "tc", "cod", "ic", "const", "cur", "case", "f", "bc", "dc", "cut", "li", "sc", "can", "v", "nc", "cp", "ch", "conv", "cus", "cc", "com", "co", "\u00e7", "char", "cu", "cb", "l", "cs", "coin", "cm", "cr", "cf", "ca", "C", "ac"]}}
{"code": "lst = [0] * 5\\nfor _ in range(3):\\n    a, b = map(int, input().split())\\n    lst[a] += 1\\n    lst[b] += 1\\n\\nif lst.count(2) == 2:\\n    print ('YES')\\nelse:\\n    print ('NO')\\n\\n", "target": "662", "substitutes": {"lst": [" lbl", "plbl", "List", "flst", "Lsts", "flbl", "lbl", "rllist", "dlst", "slst", "lrest", " lnt", "slset", " list", "plset", "sllist", " lset", "rlist", "plrest", "lsts", "Lst", "dlrest", " llist", "lnt", " lrest", "list", "rlsts", "flnt", "llist", "Lset", "flset", "lset", "plist", "dlist", "rlst", "dlset", " lsts", "Llist", "plst", "slist", "plnt"], "_": [" an", " y", " t", " j", "__", " g", " f", " i", " l", " c", " m", " __", " r", "___", " code", " p", " v", "j"], "a": ["x", "ia", "sta", "ae", "ab", "aff", "aj", "p", "i", "r", "\u00e1", "c", "ma", "ga", "aux", "o", "ea", "admin", "act", "ax", "f", "art", "da", "ver", "an", "A", "al", "at", "ao", "sa", "s", "app", "au", "aa", "l", "ar", "j", "ba", "ac"], "b": ["bis", "n", "x", "ab", "d", "g", "i", "blue", "r", "c", "m", "z", "bi", "fb", "rb", "o", "h", "be", "f", "bc", "t", "B", "bb", "v", "e", "eb", "cb", "l", "j", "y", "bs", "ba"]}}
{"code": "from typing import List\\n\\n\\ndef answer(n: int, k: int, xs: List[int]) -> int:\\n    moving_distance = 0\\n    reference_value = k / 2\\n    for x in xs:\\n        if x <= reference_value:\\n            moving_distance += x * 2\\n        else:\\n            moving_distance += (k - x) * 2\\n\\n    return moving_distance\\n\\n\\ndef main():\\n    n = int(input())\\n    k = int(input())\\n    xs = list(map(int, input().split()))\\n    print(answer(n, k, xs))\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "446", "substitutes": {"moving_distance": ["moving___message", "moving_address", "movingxlength", "moving_weight", "finding_address", "moving_remote", "moving___distance", "moving_Distance", "moving______remote", "moving_message", "Moving_dist", "moving______dist", "Moving_weight", "Moving_length", "movingingdist", "moving_dist", "moving___dist", "movingingweight", "moving_length", "moving67diff", "finding_Distance", "moving_pointer", "move_dist", "movingxdistance", "movingingdistance", "movingxdist", "moving67dist", "moving67remote", "moving______distance", "moving___pointer", "Moving_message", "moving67distance", "movinginglength", "finding_distance", "moving_diff", "movingxweight", "move_distance", "Moving_pointer", "Moving_distance", "move_diff", "move_remote", "moving67pointer", "moving______diff", "moving67message"], "reference_value": ["reference_function", "ref_function", "reference_val", "Reference_distance", "ref_values", "reference_label", "Reference_label", "reference_distance", "reference_values", "ref_value", "ref_val", "Reference_values", "Reference_value"], "x": ["wx", "xi", "ex", "xe", "p", "xes", "xc", "X", "xa", "i", "rx", "w", "c", "ox", "z", "xxxx", " X", " ax", "xt", "xxx", "ix", "tx", "ax", "f", "xd", "t", " dx", "zx", "v", "e", " xx", "fx", "cox", "xy", "mx", "xb", "dx", "inx", "xx", " cx", "l", "yx", "y", "px", "xp", "xf"], "n": ["N", "net", "nt", "gn", "d", "p", "on", "en", "names", "ne", "cn", "g", "dn", "i", "sn", "r", "c", "w", "m", "z", "ns", "o", "nl", "num", "t", "nb", "mn", "ot", "nv", "na", "v", "nc", "nm", "un", "nan", "nu", "nn", "q", "l", "np", "ll", "rn", "j", "y"], "k": ["ck", "km", "ki", "ek", "kn", "kr", "max", "kh", "kl", "uk", "p", "g", "ak", "ke", "kid", "r", "c", "m", "dk", "ks", "kw", "ko", "kb", "f", "num", "tk", "kok", "t", "sch", "mn", "kj", "v", "ok", "kick", "ikk", "ku", "wk", "q", "kk", "sk", "ka", "K", "ik", "kan", "kg", "j", "mk"], "xs": ["keys", "angles", "iffs", "inces", "apps", "xe", "dds", "ints", "imes", "xes", "ics", "cells", "xc", "outs", "tops", "xa", "ews", "aus", "windows", "hs", "fixes", "ts", "ns", "ices", "ongs", "rs", "ks", "checks", "mins", "ms", "amps", "ls", "ires", "irs", "its", "ouses", "ces", "phones", "inches", "pps", "rings", "issues", "gs", " xx", "fts", "aps", "aces", "fx", "icks", "ists", "ims", "inters", "pes", "xb", "phis", "xy", "dx", "s", "fits", "cases", "vs", "qs", "xp", "bs", " inputs"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\nINF = float(\"inf\")\\n\\n\\ndef solve(N: int, M: int, S: str):\\n\\n    S = S[::-1]\\n    data = [0]*(N+1)\\n    past = 0\\n    for i in range(N+1):\\n        if S[i] == \"1\":\\n            data[i] = past\\n        else:\\n            past = i\\n    ans = []\\n    curr = 0\\n    while True:\\n        ne = curr+M\\n        if ne >= N:\\n            ans.append(N-curr)\\n            break\\n        if S[ne] == \"1\":\\n            ne = data[ne]\\n            if ne <= curr:\\n                print(-1)\\n                return\\n        ans.append(ne - curr)\\n        curr = ne\\n    print(*reversed(ans), sep=\" \")\\n    return\\n\\n\\ndef main():\\n\\n    def iterate_tokens():\\n        for line in sys.stdin:\\n            for word in line.split():\\n                yield word\\n    tokens = iterate_tokens()\\n    N = int(next(tokens))  # type: int\\n    M = int(next(tokens))  # type: int\\n    S = next(tokens)  # type: str\\n    solve(N, M, S)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "677", "substitutes": {}}
{"code": "import math\\n\\nA,B,H,M = map(int,input().split())\\nx = H*60+M\\ny = x/2\\nz = 6*M\\na = abs(y-z)\\nif a > 180:\\n    a = 360 - a\\nc_2 = A**2 + B**2 - 2*A*B*(math.cos(math.radians(a)))\\nprint(math.sqrt(c_2))\\n", "target": "290", "substitutes": {"A": ["GA", "T", "Ax", "Am", "An", "Alpha", "AU", "AT", "R", "X", "I", "L", "ACC", "AL", "AB", "AE", "W", "AA", "AH", "As", "V", "AS", "S", "G", "P", "HA", "AP", "CA", "E", "D", "AF", "AM", "Y", "U", "K", "AC", "C"], "B": ["N", "T", "RB", "VB", "BS", "Bs", "R", "I", "L", "IB", "AB", "BER", "W", "V", "BT", "b", "S", "BC", "J", "BR", "G", "P", "BB", "BM", "E", "D", "Y", "BO", "DB", "U", "F", "BA", "Z", "C"], "H": ["N", "CH", "T", "SH", "HS", "HE", "X", "R", "L", "HI", "W", "h", "V", "TH", "Height", "HH", "J", "G", "P", "HA", "E", "HC", "MH", "Y", "U", "K", "F", "HT", "Z", "He", "C"], "M": ["N", "T", "CM", "R", "X", "I", "L", "NM", "m", "W", "O", "V", "MC", "TH", "S", "J", "Q", "G", "P", "MP", "E", "MS", "D", "MH", "TM", "Y", "MI", "MT", "K", "F", "Z", "C"], "x": ["n", "xi", "ex", "p", "xc", "xa", "X", "i", "rx", "w", "r", "c", "ox", "m", "xt", "ix", "o", "h", "tx", "f", "t", "time", "lon", "v", "width", "height", "xy", "s", "xs", "mx", "q", "l", "lat", "px", "xp"], "y": ["sy", "asy", "ty", "ys", "p", "wy", "i", "cy", "oy", "yz", "c", "m", "ies", "my", "ny", "yi", "vy", "o", "py", "h", "ery", "b", "dy", "t", "yl", "uy", "ey", "gy", "iy", "xy", "Y", "yy", "ya", "ay", "ym"], "z": ["n", "d", "p", "g", "i", "w", "yz", "c", "iz", "m", "zone", "zh", "o", "ez", "h", "oz", "ze", "f", "b", "t", "cz", "v", "e", "s", "zi", "zo", "l", "u", "j", "tz", "k", "Z"], "a": ["asia", "n", "ia", "sta", "ae", "to", "ac", "ab", "ta", "d", "p", "g", "ai", "i", "w", "r", "c", "ma", "m", "eas", "o", "ea", "pa", "aaa", "la", "f", "b", "abs", "t", "alpha", "apa", "na", "an", "e", "v", "al", "sa", "ao", "it", "oa", "ed", "au", "aa", "l", "am", "ar", "area", "ca"], "c_2": ["c_3", " cval3", "c_db", " c_102", " c_3", "c_all", "cvalgeneral", " c_all", "c_general", " cvalgeneral", " cval102", "cval2", "cval102", " cval2", " c_db", " c_general", "c_102", "cval3"]}}
{"code": "x=int(input())\\nif x>=1200:\\n  print(\"ARC\")\\nelse:\\n  print(\"ABC\")", "target": "376", "substitutes": {"x": ["wx", "n", "xi", "ex", "max", "xe", "d", "p", "ux", "g", "xc", "X", "xa", "i", "rx", "w", "c", "ox", "z", "xt", "xxx", "ix", "tx", "ax", "f", "xd", "t", "xxxxxxxx", "v", "xy", "s", "xs", "abc", "dx", "xx", "l", "y", "xp", "xf"]}}
{"code": "A, B = map(int, input().split())\\nif (A - B) % 2 == 1:\\n  print(\"IMPOSSIBLE\")\\nelse:\\n  print((A+B)//2)\\n", "target": "83", "substitutes": {"A": ["GA", "M", "N", "There", "T", "An", "IA", "AH", "AU", "AT", "X", "R", "I", "L", "ACC", "AL", "AV", "AD", "AB", "AE", "H", "AA", "LA", "As", "AI", "AR", "AS", "S", "G", "This", "P", "HA", "AP", "CA", "E", "AY", "D", "AF", "AM", "SA", "U", "AC", "AN", "C"], "B": ["Other", "LB", "BI", "N", "M", "T", "MB", "VB", "BS", "OB", "SB", "I", "L", "IB", "AB", "BER", "V", "BT", "Bar", "BC", "BE", "J", "GB", "G", "WB", "BR", "BB", "USB", "Blue", "E", "Bern", "TB", "FB", "D", "NB", "EB", "Y", "BO", "DB", "BA", "Z", "BY", "C"]}}
{"code": "r = input()\\nsuq = int(r) * int(r)\\nprint(suq)", "target": "787", "substitutes": {"r": ["rus", "n", "mr", "x", "sr", "rr", "ro", "rg", "d", "p", "g", "R", "rc", "i", "rx", "re", "w", "c", "m", "rs", "rb", "h", "pr", "rar", "f", "b", "right", "t", "dr", "v", "e", "ur", "rt", "lr", "hr", "usr", "q", "l", "u", "rd"], "suq": ["suity", " suqu", "surqs", "Suqu", "sudoity", "suu", " suqs", "sieq", "suqu", "siequ", "sudoqq", "surq", "seity", "Suu", "sequ", "sieqq", "Suqs", "Suq", "seqq", "suru", "surqu", "sieity", "sudoq", " suu", "suqq", "sudoqu", "seq", "suqs"]}}
{"code": "A,B=map(int,input().split())\\nN = list(map(int,input().split()))\\n\\nc=0\\n\\nfor i in range(A):\\n  if N[i] >= B:\\n    c+=1\\n  else:\\n    pass\\n  i+=1\\nprint(c)\\n", "target": "494", "substitutes": {"A": ["a", "M", "T", "An", "Ar", "AT", "X", "R", "I", "L", "Av", "AL", "NA", "AB", "H", "AA", "As", "V", "AR", "AS", "S", "Q", "G", "P", "AP", "CA", "At", "E", "You", "D", "AF", "Y", "U", "The", "AN", "Z", "C"], "B": ["LB", "But", "M", "BI", "CB", "T", "MB", "VB", "BS", "R", "I", "L", "IB", "AB", "BG", "H", "V", "b", "S", "BC", "J", "GB", "G", "BR", "P", "BB", "USB", "Bern", "TB", "D", "NB", "Y", "BF", "DB", "BA", "Z", "C"], "N": ["SN", "n", "M", "NS", "T", "NL", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "V", "S", "PN", "G", "P", "D", "NB", "Y", "MN", "F", "TN", "NG", "C"], "c": ["ctrl", "a", "ce", "con", "n", "lc", "cation", "ci", "gc", "d", "p", "cont", "cd", "g", "cn", "ct", "rc", "tc", "m", "fc", "cur", "cv", "f", "b", "count", "t", "dc", "mc", "cum", "conf", "comments", "cache", "cos", "cp", "conv", "com", "cc", "co", "toc", "cb", "q", "cu", "u", "cs", "cm", "cr", "ca", "C", "ac"], "i": ["a", "mi", "n", "xi", "x", "me", "ci", "gi", "p", "di", "ai", "I", "us", "m", "bi", "yi", "ix", "ic", "o", "ip", "ind", "f", "b", "multi", "t", "si", "sim", "li", "ii", "ji", "v", "ti", "im", "s", "it", "ch", "zi", "ui", "\u0438", "q", "l", "pi", "phi", "u", "id", "j", "k", "index", "ij", "er", "C"]}}
{"code": "a = input()\\nN = int(a)\\nA = list(map(int,input().split()))\\nA.sort()\\n\\nx = A[N-1]\\n\\nfor i in range(1,(N-2)//2+1):\\n    x = x + 2*A[N-1-i]\\nif (N-2) % 2 == 1:\\n    x = x + A[N-2-(N-2)//2]\\n\\nprint(x)\\n", "target": "328", "substitutes": {"a": ["n", "ia", "ac", "ab", "p", "en", "w", "c", "ma", "input", "o", "la", "aaa", "h", "pa", "act", "abs", "b", "f", "t", "auto", "alpha", "da", "an", "e", "all", "al", "at", "sa", "now", "s", "aa", "l", "am", "aw", "u", "ca"], "N": ["SN", "CNN", "Name", "n", "M", "NS", "T", "EN", "NV", "NC", "GO", "GN", "NI", "X", "I", "L", "NA", "NM", "VERSION", "NN", "NP", "NR", "CN", "DATA", "NT", "NOR", "ALL", "NH", "ANY", "Node", "V", "SIZE", "EXP", "NO", "NOTE", "NAME", "S", "MAN", "NUM", "NE", "B", "Scott", "ND", "Num", "REL", "FN", "TYPE", "D", "OUT", "NB", "Y", "CL", "MN", "Ni", "K", "GT", "AN", "TN", "REM", "NG", "C"], "A": ["GA", "Answer", "All", "Rap", "An", "Ar", "Alpha", "Abs", "AU", "AT", "X", "R", "I", "L", "mA", "AL", "AV", "NA", "One", "And", "AB", "App", "AE", "Args", "H", "W", "AA", "LA", "As", "WA", "C", "RAM", "S", "EA", "B", "G", "This", "P", "HA", "Address", "CA", "At", "MA", "Australia", "JA", "D", "AF", "AM", "Y", "Java", "AC", "The", "F", "BA", "Array", "AP"], "x": ["wx", "xi", "ex", "max", "to", "xe", "ret", "xc", "test", "ct", "X", "xa", "rx", "ext", "long", "c", "ox", "z", "set", "full", "status", "xxxx", "xt", "hex", "xml", "h", "tx", "sex", "f", "xd", "xxxxxxxx", "lp", "check", "zx", "exp", "int", "fx", "at", "xy", "cox", "st", "xs", "mx", "xb", "abc", "co", "dx", "print", "base", "xx", "tmp", "lat", "fixed", "y", "index", "px", "xp", "xf"], "i": ["mi", "n", "xi", "me", "ci", "gi", "di", "ai", "I", "m", "bi", "qi", "ic", "ix", "ip", "iri", "ind", "f", "si", "li", "ii", "ji", "v", "ori", "ti", "s", "im", "it", "zi", "ui", "pi", "u", "id", "j", "y", "ij", "iu", "hi"]}}
{"code": "def judge(n,a):\\n    table = {}\\n    for i in range(n):\\n        if a[i] in table.keys():\\n            print('NO')\\n            return\\n        else:\\n            table[a[i]] = 1\\n    print('YES')\\n    return\\n    \\nn = int(input())\\na = list(map(int,input().split()))\\n\\njudge(n,a)", "target": "135", "substitutes": {"n": ["N", "x", "net", "nt", "gn", "d", "p", "ln", "ne", "g", "cn", "dn", "sn", "r", "c", "m", "ns", "o", "h", "f", "b", "num", "t", "nia", "nb", "no", "mn", "nv", "na", "an", "v", "int", "nc", "nan", "nu", "nn", "number", "l", "np", "ll", "j"], "a": ["ia", "to", "ae", "sta", "ab", "aff", "ta", "d", "p", "name", "w", "c", "ma", "m", "ata", "el", "eas", "ga", "aux", "o", "ea", "la", "aaa", "act", "f", "b", "abs", "t", "auto", "form", "na", "an", "att", "v", "all", "e", "A", "at", "sa", "ao", "aka", "s", "new", "ed", "au", "oa", "aa", "l", "am", "es", "area", "ca", "ac"], "table": ["able", "master", "database", "db", "name", "required", "file", "this", "common", "td", "map", "set", "section", "buffer", "info", "total", "window", "page", "output", "tree", "term", "stable", "t", "tab", "Table", "pretty", "auto", "TABLE", "style", "important", "list", "cache", "interface", "row", "tr", "public", "size", "tmp", "index", "data"], "i": ["\u00ed", "mi", "xi", "x", "ki", "me", "ci", "gi", "p", "di", "I", "r", "us", "c", "m", "yi", "ic", "ix", "ip", "ind", "f", "multi", "ri", "io", "si", "sim", "li", "key", "ji", "ii", "ori", "ti", "im", "s", "it", "zi", "ui", "q", "l", "pi", "phi", "id", "y", "j", "k", "index", "ij", "fi", "hi"]}}
{"code": "while True:\\n    a,b=map(int,input().split())\\n    if a==0 and b==0:break\\n    for i in range (a):\\n        print('#'*b)\\n    print()\\n", "target": "296", "substitutes": {"a": ["x", "ia", "sta", "to", "ae", "ac", "ab", "d", "p", "ach", "g", "va", "xa", "r", "w", "c", "ma", "m", "ga", "ea", "la", "aaa", "act", "ax", "f", "t", "parts", "da", "na", "an", "anta", "A", "al", "at", "aka", "sa", "s", "au", "oa", "aa", "l", "j", "index", "area", "ba", "ca"], "b": ["bis", "n", "sb", "ab", "bar", "d", "db", "beta", "sub", "g", "ib", "length", "c", "m", "batch", "bi", "fb", "rb", "that", "mb", "be", "ob", "f", "bc", "t", "nb", "B", "bb", "v", "e", "eb", "base", "cb", "l", "bp", "number", "j", "y", "bs", "ba"], "i": [" ii", "n", "x", "ia", "ie", "gi", " j", "I", "iter", "r", "c", "z", "ix", "ip", "ind", "f", "ii", "e", "im", "it", "q", "id", "j", "y", "k"]}}
{"code": "import sys\\nlines = [s.rstrip(\"\\n\") for s in sys.stdin.readlines()]\\nn, = [int(num) for num in lines.pop(0).split(\" \")]\\ndef iter_value_and_unit():\\n    for line in lines:\\n        value, unit = line.split(\" \")\\n        value = float(value)\\n        if unit == \"BTC\":\\n            yield 380000.0 * value\\n        else:\\n            yield value\\n\\nprint(sum(iter_value_and_unit()))\\n", "target": "270", "substitutes": {"lines": ["prints", "ln", "elines", "xes", "names", "ines", "cells", "outs", "inline", "les", "odes", "nets", "ns", "vals", "details", "boxes", " rows", "blocks", "files", " numbers", "ses", "reads", "runs", "nl", "ins", "objects", "values", "ks", "bytes", "ails", "ls", "ids", "limits", "levels", "lists", "frames", "strings", "posts", "gs", "ges", "gets", "links", "xs", "l", "sets", "nels", "rows", "pins", "ds", "lins", " Lines", "olds", "points"], "s": ["sym", "sb", "sw", "sh", "self", "su", "str", "p", "name", "spec", "i", "sf", "fs", "r", "sys", "c", "ts", "m", "set", "ns", "src", "rs", "ins", "sl", "h", "sing", "ls", "f", "b", "t", "S", "ss", " som", "ends", "v", "e", "sq", "sin", "nm", "string", "sv", "l", "se", "ps"], "n": ["nr", "N", "ln", "d", "p", "names", "g", "i", "long", "sn", "r", "c", "w", "m", "z", "ns", "o", "nl", "fn", "t", "count", "nb", "v", "e", "nu", "nn", "l", "np"], "num": ["sym", "th", "max", "nt", "um", "nom", "ln", "d", "name", "mult", "long", "us", "mom", "m", "set", "total", "digit", "tim", "enum", "nam", "val", "f", "multi", "NUM", "count", "no", "nb", "umer", "umeric", "na", "Num", "int", "nm", "row", "msg", "node", "nu", "dim", "number", "mon", "np", "umber", "index", "text", "sum"], "line": ["next", "ine", "ln", "on", "name", "ase", "lined", "inline", "long", "Line", "cell", "note", "type", "nl", "val", "case", "liner", "ze", "eno", "record", "block", "lo", "key", "out", " lin", " inline", " Line", "v", " ne", "row", "string", "normal", "LINE", "node", "co", " LINE", "size", "l", "range", "data", "lin", "entry", "text", "field"], "value": ["rue", "p", "ue", "true", "set", "total", "default", "unknown", "v", "see", "number", "won", "property", "data", "Value", "self", "vote", "local", "money", "port", "point", "get", "test", "position", "weight", "status", "output", "case", "description", "time", "key", "VALUE", "float", "single", "function", "field", "start", "variable", "attribute", "expression", "d", "example", "raw", "values", "val", "result", "all", "now", "size", "hello", "sample", "index", "name", "long", "current", "message", "create", "null", "ve", "base", "item", "sum"], "unit": ["domain", "vert", "component", "reason", "name", "language", "dir", "test", "category", "scale", "type", "format", "tail", "loss", "case", "term", "stable", "t", "units", "nit", "style", "bit", "key", "switch", "un", "byte", "normal", "it", "char", "group", "nu", "operator", "base", "direction", "kt", "dim", "du", "Unit", "sort", "family", "sum"]}}
{"code": "N, K, Q = map(int, input().split(' '))\\nval = [ K for i in range(N) ]\\nfor i in range(Q):\\n    A = int(input())\\n    val[A - 1] += 1\\nfor i in val:\\n    if i - Q > 0:\\n        print('Yes')\\n    else:\\n        print('No')", "target": "336", "substitutes": {"N": ["CNN", "M", "n", "NS", "Ne", "NC", "GN", "Na", "Ns", "R", "I", "NA", "L", "NN", "NP", "NR", "NT", "NH", "H", "V", "S", "NE", "J", "P", "Num", "NPR", "Net", "D", "NB", "Y", "Ni", "F", "Z", "C"], "K": ["M", "Int", "T", "KN", "Key", "KR", "MK", "X", "R", "I", "L", "One", "KK", "H", "O", "V", "KS", "S", "B", "J", "G", "P", "E", "VK", "D", "Y", "Ku", "OK", "UK", "k", "KI", "Z", "KE", "KA", "C"], "Q": ["M", "IX", "HQ", "T", "NS", "MQ", "R", "I", "X", "L", "H", "W", "Query", "V", "QB", "UE", "S", "B", "J", "G", "P", "CA", "E", "D", "q", "Y", "Qu", "IQ", "U", "F", "Z", "QU", "C"], "val": ["loc", "x", "bal", "pal", "point", "p", "test", "ival", "eval", "VAL", "aval", "value", "va", "AL", "abl", "iter", "ox", "ref", "vals", "sect", "el", "col", "tx", "pr", "elt", "pan", "V", "vl", "num", "sel", "bool", "vol", "alpha", "Val", "als", "rol", "pos", "li", "v", "cal", "all", "al", "obj", "af", "sol", "ol", "l", "pl", "mem", "index", "range", "data", "pol"], "i": ["a", "iii", "ki", "n", "xi", "x", "ia", " I", "T", " Ai", "ie", "ci", "gi", "ir", "cli", "ta", "Va", "di", "ai", "I", " Li", "bi", "yi", "qi", "iti", "ic", "ip", "AI", "si", "J", "ii", "li", "ji", "ei", "v", "e", "ti", "adi", "im", "it", "ini", "zi", "\u0438", "q", "phi", "pi", "ati", "Y", "k", "y", "j", "ik", "ij", "Ni", "iu", "hi", " Xi"], "A": ["a", "GA", "M", "Ax", "T", "All", "Va", "An", "IA", "Alpha", "AU", "R", "I", "L", "AB", "AA", "LA", "As", "O", "V", "AI", "AS", "S", "alpha", "B", "J", "Arg", "G", "P", "HA", "CA", "At", "E", "JA", "D", "Array", "Y", "SA", "AC", "The", "Jan", "EA", "Z", "C"]}}
{"code": "import itertools\\n\\nn, m = map(int, input().split())\\nedges = [[] for _ in range(n)]\\nfor _ in range(m):\\n    a, b = map(lambda x: int(x) - 1, input().split())\\n    edges[a].append(b)\\n    edges[b].append(a)\\n\\ncount = 0\\nfor perm in itertools.permutations(range(1, n)):\\n    if not perm[0] in edges[0]:\\n        continue\\n    can_visit_all = True\\n    for i in range(n - 2):\\n        if not perm[i + 1] in edges[perm[i]]:\\n            can_visit_all = False\\n            break\\n    if can_visit_all:\\n        count += 1\\nprint(count)\\n", "target": "143", "substitutes": {"n": ["N", "x", "net", "nt", "gn", "ln", "d", "p", "en", "names", "ne", "cn", "g", "dn", "sn", "r", "c", "w", "ns", "o", "h", " ng", "f", "num", " gn", "t", "len", "nb", "mn", "na", "v", "e", "an", "nc", "nm", "s", "nu", "size", "nn", "l", "ll", "np", "q", " N", "pi", "j", "y", "k"], "m": ["tm", "mi", "M", "mod", "dm", "d", "p", "mm", "mp", "r", "c", "mut", "man", "bm", "rm", "o", "gm", "h", "ms", "num", "mis", "t", "mc", "mn", "v", "nm", "l", "mun", "k", "y", "month", "cm", "mt"], "edges": ["Edgments", "Edwards", "edgets", "Edges", "pedGES", "edsgs", "edgments", "pedwards", "edsgins", "pedgins", " edgs", "edsdies", "edsGES", "ledwards", "hedGES", "tedges", "beddies", " Edgs", "eddies", "ledges", "tedgs", "hedges", "hedmonds", "ledmonds", " EdGES", "edgs", "edwards", "Edgins", " edgets", "pedges", "edsgers", "edGES", "edgins", " Edgments", "tedgers", "tedGES", "edgers", "EdGES", "edswards", " edmonds", "Edgs", "edsmonds", " edgers", " Edges", "bedwards", "edmonds", "hedgets", "bedmonds", "leddies", "bedges", "edsges", "edsgets", "edsgments", " edGES"], "_": ["x", " the", "__", "I", " all", "ix", "val", " int", " l", " x", " time", " __", " each", "___"], "a": ["x", "ia", "ae", "ac", "ab", "aj", "p", "ach", "g", "va", "ai", "ak", "r", "w", "c", "ea", "la", "aaa", "ax", "\u00e4", "an", "e", "A", "at", "sa", "s", "au", "aa", "l", "am", "ar", "u", "j", "ba", "ca"], "b": ["bis", "sb", "x", "ab", "bar", "d", "db", "g", "r", "c", "z", "bi", "fb", "rb", "by", "o", "h", "be", "br", "f", "bc", "t", "nb", "B", "bb", "v", "e", "s", "bl", "l", "u", "j", "y", "bs", "ba", "back"], "count": ["hold", "find", "call", "max", "nt", "consider", "cd", "cycle", "test", "ct", "code", "ount", "length", "c", "report", "process", "status", "total", "change", "second", "success", "case", "result", "limit", "double", "num", "ctr", "t", "time", "nb", "thread", "amount", "conf", "cache", "debug", "flag", "found", "group", "print", "size", "counter", "number", "Count", "index", "sum"], "perm": ["sym", "cmp", "pair", "pm", "lim", "p", "mp", "comm", "rep", "jp", "typ", "particip", "acc", "fre", "prom", "repl", "mut", "imm", "pai", "prime", "gp", "gm", "tp", "fail", "ind", "mask", "f", "pri", "num", "sp", "fac", "cond", "cum", "fl", "pid", "pos", "prop", "emp", "prim", "ptr", "cp", "compl", "fam", "per", "dim", "pl", "tmp", "proc", "np", "inf", "j", "index", "pol", "attr", "pp", "ps", "xp", "pred", "prof"], "can_visit_all": ["can_visits_all", "can_visit_ALL", "can_visitptfull", "can_visitistfull", "can_visit_full", "can_visits_val", "can_visit_val", "can_visit_All", "can_visit_valid", "can_visitistall", "can_visit2all", "can_visitptval", "can_visitptAll", "can_visits_ALL", "can_visits_All", "can_visitptall", "can_visitistAll", "can_visitistval", "can_visits_valid", "can_visits_full", "can_visit2ALL", "can_visit2All"], "i": ["mi", "xi", "x", "ci", "gi", "p", "g", "di", "I", "bi", "yi", "qi", "ic", "ix", "ip", "h", "ind", "f", "multi", "ri", "si", "li", "ii", "v", "e", "ti", "s", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "u", "id", "k", "index", "y", "j", "ij", "iu", "hi"]}}
{"code": "import sys\\nsys.setrecursionlimit(10000000)\\nMOD = 10 ** 9 + 7\\nINF = 10 ** 15\\n\\ndef main():\\n    S = input()\\n    pair = []\\n    stack = [('%',-1)]\\n    for j,s in enumerate(S):\\n        if s == '/':\\n            if stack[-1][0] == '\\\\':\\n                i = stack[-1][1]\\n                stack.pop()\\n                pair.append((i,j))\\n        elif s == '_':\\n            continue\\n        else:\\n            stack.append((s,j))\\n    \\n    pond = []\\n    tot = 0\\n    k = len(pair) - 1\\n    while  k >= 0:\\n        fin = pair[k][0] - 1\\n        area = 0\\n        while k >= 0 and fin < pair[k][0]:\\n            area += pair[k][1] - pair[k][0]\\n            k -= 1\\n        pond.append(area)\\n        tot += area\\n    pond.append(len(pond))\\n\\n    print(tot)\\n    print(*pond[::-1])\\nif __name__ == '__main__':\\n    main()\\n", "target": "394", "substitutes": {"MOD": ["MAG", "LOD", "VER", "SEC", "mod", "LIN", "DIR", "STD", "LOG", "Mod", "AD", "INC", "RM", "MIN", "ASH", "EXP", "MD", "RT", "NUM", "MODE", "ID", "MS", "RC", "TM", "RO", "DEV", "REM", "MR"], "INF": ["INH", "INV", " INH", " INV", "INf", "PINV", "InF", "PINF", " INf", "InV", "PINf", "InH", "Inf", "PINH"], "S": ["STR", "M", "N", "T", "SS", "SL", "SB", "R", "X", "I", "L", "SER", "JS", "Si", "SIM", "SI", "SM", "H", "V", "SAM", "B", "SC", "Q", "G", "P", "SE", "A", "SP", "ST", "SU", "D", "Stack", "SA", "WS", "C"], "pair": ["race", "reach", "half", "party", "quad", "attribute", "single", "match", "p", "split", "loop", "order", "point", "side", "air", "layer", "iter", "store", "pen", "position", "airs", "pre", "map", "batch", "set", "pad", "section", "par", "mate", "prime", "mount", "step", "second", "tree", "cur", "case", "result", "place", "word", "double", "adr", "part", "share", "resource", "plane", "parse", "sense", "P", "both", "list", "search", "pixel", "byte", "tower", "inter", "phrase", "group", "print", "see", "handle", "meter", "pur", "line", "coord", "array", "dict", "function", "trace"], "stack": ["history", "top", "alt", "race", "state", "str", "local", "context", "space", "bar", "loop", "frame", "cycle", "reset", "left", "test", "store", "iter", "chain", "set", "buffer", "window", "step", "track", "case", "level", "sp", "trace", "thread", "lower", "parse", "pos", "check", "v", "both", "list", "stream", "pop", "row", "cache", "console", "st", "stage", "counter", "slice", "tmp", "line", "ack", "Stack", "sort", "upper", "layer", "pack", "sequence", "back", "source", "storage"], "j": ["a", "n", "x", "uj", "ja", "ie", "js", "d", "p", "g", "left", "jp", "job", "r", "jc", "z", "jj", "bi", "o", "h", "ind", "jl", "f", "b", "t", "J", "pos", "ji", "v", "kj", "it", "jump", "q", "l", "dj", "y", "index", "ij"], "s": ["a", "sym", "n", "sb", "sh", "sw", "str", "ats", "space", "js", "p", "g", "sf", "w", "sn", "hs", "c", "ts", "z", "m", "src", "ns", "ies", "rs", "ses", "ins", "h", "sing", "ls", "abs", "b", "sp", "f", "t", "ss", "si", "its", "sc", "v", "e", "gs", "sq", "ws", "string", "sm", "ares", "sv", "xs", "q", "sts", "cs", "y", "os", "es", "ds", "ps"], "i": ["a", "mi", "xi", "x", "uri", "ir", "p", "di", "ai", "I", "m", "ami", "ic", "o", "ix", "ip", "t", "ri", "si", "iu", "ii", "li", "v", "int", "it", "ini", "phi", "pi", "u", "index", "y", "ij", "iri", "hi"], "pond": [" ponds", "pont", "spdon", "Ponder", "repont", "tonde", "nponds", " pdon", "tonds", "Pont", "nponder", " ponde", " poon", " pont", "npond", "spidd", "Poon", "sponder", "Ponds", "ponde", "tond", "pdon", "Pdon", "repon", "ponds", "spond", "wpond", "pon", "npoon", "poon", "spon", "wpont", "repond", "tidd", "Pond", " ponder", "reponder", "wpon", "wponder", " pidd", "nponde", "Ponde", "spont", "pidd", "npont", "ponder", "sponde", "sponds"], "tot": ["ttOT", "mot", "Tot", "ttota", "fota", "wtoby", "moby", "atots", "tots", "noby", " toby", "fots", "wtota", "fotal", "wtiot", "total", "mota", "ttoby", " tiot", "Tota", "wtot", " tota", "atotal", "nota", "tOT", "Toby", "toby", "TOT", "motal", "mots", "miot", "ttot", "tiot", "atota", "nOT", "tota", "atot", "fot"], "k": ["ck", "km", "keys", "n", "ek", "uk", "a", "kr", "kh", "kl", "ijk", "p", "spec", "g", "ak", "ke", "kid", "c", "m", "ks", "kw", "ko", "kind", "ind", "go", "f", "b", "tk", "num", "t", "mc", "key", "kj", "ok", "kick", "row", "ikk", "ku", "kat", "kt", "q", "wk", "tek", "kk", "id", "sk", "K", "ik", "ka", "kan", "mk", "unk", "ac"], "fin": ["fd", "den", "fine", "con", "n", "conn", "mid", "pen", "fort", "fre", "fc", "Fin", "fa", "f", "fr", "fn", "close", "len", "eu", "conf", "pid", "mont", "final", "normal", "des", "nan", "end", "rez", "ini", "ran", "FIN", "fat", "finished", "Finish", "reg", "fi", "frac"], "area": ["a", "mi", "n", "ia", "to", "err", "sum", "ra", "space", "ta", "era", "p", "mini", "ir", "value", "zero", "Area", "scale", "zone", "unit", "floor", "ata", "total", "alias", "step", "angle", "are", "o", "aria", "fa", "act", "rea", "aton", "fr", "count", "ova", "alpha", "wa", "off", "key", "na", "width", "division", " areas", "oa", "au", "TA", "div", "iam", "aa", "line", "error", "ka", "eta", "room", "ow"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\nc=0\\nfor i in a:\\n    while i%2==0:\\n      i,c=i/2,c+1\\nprint(c)", "target": "121", "substitutes": {"n": ["nr", "N", "x", "nt", "p", "cn", "w", "sn", "m", "z", "ns", "o", "nl", "b", "num", "t", "nb", "na", "v", "nc", "nm", "s", "nu", "nn", "l", "q", "j", "k"], "a": ["to", "ae", "ab", "ta", "p", "va", "xa", "ai", "w", "ma", "set", "o", "ea", "la", "b", "t", "alpha", "apa", "na", "an", "e", "all", "A", "ap", "at", "sa", "s", "au", "oa", "aa", "l", "index", "array", "area", "ba", "ca", "ao"], "c": ["ce", "lc", "con", "ci", "gc", "d", "p", "cd", "cn", "g", "ct", "rc", "r", "tc", "m", "z", "total", "ic", "o", "h", "cur", "result", "cv", "f", "b", "count", "t", "mc", "cum", "uc", "conf", "sc", "v", "e", "nc", "cache", "cos", "cc", "\u00e7", "co", "com", "cu", "q", "l", "u", "cs", "k", "cm", "cr", "cf", "C", "ac"], "i": ["mi", "iii", "ki", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "uni", "m", "bi", "qi", "ic", "ix", "o", "h", "iri", "ip", "f", "multi", "t", "si", "ii", "li", "ji", "ei", "v", "int", "ti", "oi", "it", "zi", "ini", "\u0438", "q", "pi", "phi", "l", "u", "id", "j", "index", "ij", "ik", "iu", "hi"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\nimport numpy as np\\nfrom numba import njit\\n\\n\\ndef read():\\n    D = int(input().strip())\\n    C = np.fromstring(input().strip(), dtype=np.int32, sep=\" \")\\n    S = np.empty((D, 26), dtype=np.int32)\\n    for i in range(D):\\n        s = np.fromstring(input().strip(), dtype=np.int32, sep=\" \")\\n        S[i, :] = s[:]\\n    T = np.array([int(input().strip()) for i in range(D)], dtype=np.int32)\\n    return D, C, S, T\\n\\n\\n@njit\\ndef satisfaction(d, C, S, T, last):\\n    v = 0\\n    v += S[d, T[d]-1]\\n    last[T[d]-1] = d+1\\n    for i in range(26):\\n        v -= C[i] * ((d+1) - last[i])\\n    return v\\n\\n\\n@njit\\ndef solve(D, C, S, T):\\n    last = np.zeros(26, dtype=np.int32)\\n    cumsat = 0\\n    for i in range(D):\\n        sat = satisfaction(i, C, S, T, last)\\n        cumsat += sat\\n        print(cumsat)\\n\\n\\nif __name__ == '__main__':\\n    inputs = read()\\n    outputs = solve(*inputs)\\n    if outputs is not None:\\n        print(\"%s\" % str(outputs))\\n", "target": "506", "substitutes": {"input": ["arg", "find", "next", "load", "pattern", "str", "select", "context", "cont", "util", "insert", "p", "view", "run", "get", "file", "shift", "image", "raw", "utils", "ref", "focus", "read", "query", "format", "output", "config", "fn", "hidden", "parse", "feed", "url", "out", "pull", "route", "key", "Input", "int", " inspect", "string", "stream", "interface", "it", "first", "char", "print", "new", " Input", "q", "reader", "sample", "lat", "id", "index", "data", "text", "source", "request"], "D": ["M", "N", "DL", "Def", "YD", "DOM", "TD", "JD", "DIR", "X", "I", "DE", "R", "L", "DR", "DI", "Length", "H", "O", "V", "Done", "Do", "CD", "DX", "DP", "B", "Q", "J", "G", "DD", "DC", "Dir", "P", "DT", "ID", "A", "IND", "DN", "E", "Ds", "DS", "DM", "Y", "Size", "Dr", "DEV", "DB", "K", "F", "Z", "Data"], "C": ["CNN", "Chain", "M", "N", "CB", "Cu", "CM", "CW", "CG", "Cod", "R", "I", "L", "CU", "Config", "c", "Cl", "Car", "CS", "CN", "Con", "CSS", "Cs", "YC", "H", "Cond", "CT", "CP", "V", "MC", "Ch", "Com", "CCC", "EC", "B", "Co", "CO", "G", "DC", "P", "Cal", "Cons", "A", "CR", "CA", "E", "CON", "Cache", "CC", "Y", "Craig", "U", "AC", "K", "F", "Cos"], "S": ["Sub", "Single", "Save", "M", "N", "New", "NS", "Sh", "Source", "Sys", "SS", "Sl", "SL", "R", "I", "SB", "L", "SO", "RS", "Si", "PS", "Sel", "Su", "X", "SI", "CS", "TS", "Sec", "Rs", "Cs", "Set", "H", "Security", "Service", "SQL", "V", "GS", "Settings", "Ins", "Services", "Sign", "Sample", "States", "B", "SC", "G", "Sing", "P", "Input", "SSL", "SE", "A", "Spec", "SP", "SU", "St", "DS", "Sort", "Y", "SA", "U", "Style", "SR", "K", "WS", "Z"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "gu", "ci", "gi", "p", "g", "di", "ai", "I", "r", "c", "m", "z", "bi", "yi", "iti", "ic", "ix", "ip", "ind", "f", "b", "t", "ri", "multi", "io", "si", "li", "ii", "ji", "ei", "e", "ti", "int", "iy", "im", "it", "ini", "zi", "ui", "l", "pi", "phi", "ati", "u", "id", "j", "index", "k", "ij", "y", "data", "iu", "hi"], "s": ["n", "sb", "sw", "ys", "str", "ats", "js", "p", "g", "fs", "c", "ts", "south", "ns", "rs", "ins", "less", "h", "ls", "b", "sp", "t", "ss", "gs", "sq", "string", "gets", "sv", "conv", "sol", "sts", "cs", "os", "qs", "ds", "ps"], "T": ["WT", "Other", "M", "N", "TR", "Latest", "Th", "AT", "R", "I", "It", "L", "TPS", "FT", "Type", "TS", "PT", "VT", "Ta", "TC", "TG", "TL", "Best", "W", "H", "O", "V", "TN", "TH", "CT", "TV", "t", "Tu", "RT", "LT", "B", "J", "Q", "G", "This", "TF", "DT", "P", "A", "E", "Ts", "TT", "XT", "TA", "TM", "Y", "GT", "The", "Z"], "d": ["n", "x", "dm", "p", "ld", "db", "dir", "di", "day", "dn", "g", "td", "dh", "r", "c", "m", "z", "dl", "diff", "dom", "ind", "dt", "done", "f", "b", "dy", "days", "dat", "dc", "t", "da", "dr", "pd", "de", "e", "delay", "debug", "date", "dp", "dx", "do", "dq", "dis", "dim", "l", "dd", "sd", "u", "id", "j", "data", "ds", "draw"], "last": ["next", "reverse", "th", "max", "prev", "state", "nt", "table", "latest", "cycle", "left", "Last", "set", "full", "las", "old", "total", "since", "info", "second", "tail", "h", "ind", "right", "stable", "t", "count", "close", "dist", "slave", "std", "list", "final", "all", "nd", "st", "tt", "rest", "est", "first", "end", "base", "size", "l", "best", "ast", "j", "se", "data", "stop"], "v": ["qv", "n", "x", "vv", "p", "vi", "g", "tv", "vp", "value", "w", "r", "uv", "c", "vector", "m", "ev", "o", "h", "val", "V", "cv", "vr", "f", "b", "vc", "t", "ver", "av", "nv", "lv", "vm", "it", "sv", "ve", "vs", "l", "var", "u", "j", "vt", "y"], "cumsat": [" cumson", " cumsot", "campsat", "cubeson", "campsash", "cupsat", " cascrat", "cumsata", "campson", "cumsate", "acupsit", " cascata", "cummit", "capsate", "cumar", " cubesash", "cumset", "cummat", "cumat", "cupset", "campsot", "cubesat", "cumsar", " cumsata", "acumsar", "cubesash", "cavesrat", "cumsash", " cubeson", "acumsit", "cavesate", "capsrat", " cumsash", "cascat", "acupsar", " cascat", "cavesat", "capsata", "cummet", "cumit", "cummar", "cumson", " cubesot", "acumset", "acupsat", "cupsit", "cumsot", "cavesata", "cumon", "cumash", "cumet", "cumot", "acumsat", "cupsar", "acupset", "cumsit", "cubesot", "cascate", " cumsrat", " cumsate", "cascrat", " cascate", "cascata", "cumsrat", "capsat", " cubesat"], "sat": ["ut", "sb", "nut", "cat", "sit", "stat", "util", "flat", "nat", "sal", "san", "rat", "set", "unit", "wat", "scan", "catch", "dt", "saf", "jac", "stable", "t", "yout", "hat", "si", "nil", "out", "sq", "at", "it", "sv", "Sat", "sol", "kat", "dq", "lat", "mat", "y", "init"], "inputs": ["inputed", " inputls", "columns", "configes", "configed", "inputes", "configos", "columnos", "configls", "initials", "columnes", "outputes", "initialls", "outputos", "inputos", "initialed", "inputls", " inputed", "configs"], "outputs": ["longsd", "Outputes", "configes", "outputses", "Outputss", "Outputts", "longs", "outputsd", "controlts", "wells", "controls", "Outputs", "PUTs", "others", "outputes", "outputss", "configses", "returns", "outputts", "controlsd", "othersd", "returnts", "Outputses", "PUTses", "wellts", "returnss", "longts", "otherss", "PUTes", "wellss", "configs", "longss", "otherts", "controlss"]}}
{"code": "a,b = map(int,input().split())\\n\\nc = b-a\\nif c % (a-1) == 0:\\n  n = c // (a-1) + 1\\nelse:\\n  n = c // (a-1) + 2\\n  \\nprint(n)", "target": "335", "substitutes": {"a": ["x", "ia", "to", "ab", "ta", "p", "d", "ach", "g", "air", "ak", "i", "r", "w", "ma", "m", "z", "total", "ga", "power", "o", "are", "ea", "h", "val", "go", "f", "isa", "t", "alpha", "len", "lower", "out", "na", "an", "e", "v", "all", "A", "al", "at", "sa", "app", "au", "oa", "aa", "ar", "j", "index", "area", "ba", "ca", "ac"], "b": ["bf", "ab", "d", "p", "db", "g", "ib", "i", "r", "m", "z", "bi", "rb", "h", "f", "bc", "t", "nb", "B", "bb", "v", "e", "s", "cb", "l", "u", "j", "y", "bs", "ba"], "c": ["ce", "lc", "con", "x", "ci", "gc", "d", "p", "cont", "cd", "g", "cn", "ct", "rc", "cy", "i", "w", "tc", "m", "z", "fc", "h", "cv", "f", "bc", "t", "cum", "conf", "e", "v", "nc", "cin", "cos", "cp", "cc", "co", "cb", "cu", "l", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "n": ["nr", "N", "conn", "net", "nt", "ln", "d", "en", "name", "norm", "ne", "cn", "g", "dn", "i", "long", "sn", "m", "ns", "nl", "fn", "num", "t", "nb", "nor", "mn", "ot", "conf", "out", "na", "int", "nc", "final", "nm", "adj", "nan", "nu", "nn", "number", "np", "ng", "j"]}}
{"code": "import math\\na,b,h,m= map(int, input().split())\\n\\nhr = 30*h+0.5*m\\nmr = 6*m\\nans = a**2+b**2-2*a*b*math.cos(math.radians(hr-mr))\\nprint(math.sqrt(ans))\\n\\n", "target": "290", "substitutes": {"a": ["n", "x", "ia", "sta", "ae", "ac", "ab", "aj", "ach", "g", "i", "r", " A", "ma", "c", "ea", "la", "act", "ax", "alpha", "da", "ee", "v", "an", "A", "al", "ap", "up", "at", "sa", "au", "oa", "aa", "l", "am", "ar", "u", "le", "ba", "ca", "ao"], "b": ["ben", "bis", "n", "sb", "ab", "d", "p", "g", "ib", "i", "r", "c", "z", "bi", "wb", "fb", "rb", "o", "be", "f", "bc", "nb", "B", "bb", "v", "e", "s", "eb", "l", "u", "j", "y", "bs", "ba"], "h": ["n", "sh", "kh", "him", "p", "g", "hz", "html", "hal", "dh", "r", "hs", "w", "ih", "H", "ah", "bh", "hl", "t", "hp", "dr", "e", "oh", "his", "ha", "he", "hd", "hour", "ho", "l", "hh", "hours", "hi", "hm"], "m": ["tm", "mi", "n", "M", "pm", "me", "um", "dm", "d", "p", "mm", "mo", "mu", "mp", "g", "i", "r", "w", "c", "ma", "z", "ml", "mos", "mut", "mad", "bm", "rm", "o", "gm", "ms", "f", "t", "mc", "mn", "v", "e", "sm", "s", "mx", "l", "am", "mem", "met", "j", "md", "cm", "mt"], "hr": ["kr", "rr", "her", "kh", "him", "resh", " hrs", "hz", "r", "hs", "rh", "rs", "rb", "HR", "yr", "pr", "vr", "br", "hl", "hp", "mn", "dr", "roth", "oh", "drm", "ha", "tr", "hd", "usr", "hour", "hh", "Mr", "hours", "hm", "rd"], "mr": ["nr", "sr", "kr", "rr", "mir", "r", "ml", "rh", "rs", "rb", "bm", "rm", "gm", "HR", "pr", "vr", "br", "shr", "mc", "rl", "mn", "dr", "drm", "mk", "vm", "tr", "mx", "lr", "wm", "Mr", "rpm", "mt", "adr", "hm", "MR"], "ans": [" os", "ars", "ANS", "ants", "nes", "ean", " means", "atan", " us", "aus", "san", " scales", " Ans", "mos", " nas", "ann", "rans", " pans", "anas", " spans", "ses", "mens", "ks", "leans", "ons", " fans", "amps", "ms", "ls", " san", " pan", "ents", " plains", "ens", " stats", " sans", "uns", "an", "posts", " sins", "jas", " scans", " asks", " ns", "anes", " ants", "uls", " masses", "AN", " nos", " sums", "said"]}}
{"code": "from collections import defaultdict, Counter\\nfrom itertools import product, groupby, count, permutations, combinations\\nfrom math import pi, sqrt\\nfrom collections import deque\\nfrom bisect import bisect, bisect_left, bisect_right\\nfrom string import ascii_lowercase\\nfrom functools import lru_cache\\nimport sys\\nsys.setrecursionlimit(10000)\\nINF = float(\"inf\")\\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\\n\\n\\ndef inside(y, x, H, W):\\n    return 0 <= y < H and 0 <= x < W\\n\\n\\ndef ceil(a, b):\\n    return (a + b - 1) // b\\n\\n\\n# a\u3068b\u306e\u6700\u5927\u516c\u7d04\u6570\\ndef gcd(a, b):\\n    if b == 0:\\n        return a\\n    return gcd(b, a % b)\\n\\n\\n# a\u3068b\u306e\u6700\u5c0f\u516c\u500d\u6570\\ndef lcm(a, b):\\n    g = gcd(a, b)\\n    return a / g * b\\n\\n\\ndef solve(y, x, field, used):\\n\\n    num_white, num_black = 0, 0\\n    que = deque()\\n    que.append((y, x))\\n    used[y][x] = True\\n\\n    while len(que) != 0:\\n        now = que.pop()\\n\\n        if field[now[0]][now[1]] == '.':\\n            num_white += 1\\n        else:\\n            num_black += 1\\n\\n        for i in range(4):\\n            ny = now[0] + dy4[i]\\n            nx = now[1] + dx4[i]\\n\\n            if inside(ny, nx, len(field), len(field[0])):\\n                if field[ny][nx] != field[now[0]][now[1]]:\\n                    if not used[ny][nx]:\\n                        que.append((ny, nx))\\n                        used[ny][nx] = True\\n\\n    return num_white * num_black\\n\\n\\ndef main():\\n    H, W = map(int, input().split())\\n    field = []\\n    for _ in range(H):\\n        field.append(input())\\n\\n    used = [[False] * W for _ in range(H)]\\n\\n    ans = 0\\n    for y in range(H):\\n        for x in range(W):\\n            if not used[y][x]:\\n                ans += solve(y, x, field, used)\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "431", "substitutes": {"INF": ["INDF", "INN", "INSDF", " INV", "INSF", "inDF", "inN", "INSN", "INSV", " INDF", "inV", "INV", "inF", " INN"], "YES": ["N", "ALSE", "DO", "POS", "NULL", "NR", "GREEN", "XY", "S", "DEF", "UP", "XX", "YY", "TYPE", "FAULT", "Y", "OK", "QUI"], "Yes": ["N", "One", "CS", "Pos", "Set", "Maybe", "Please", "CHO", "S", "Do", "Some", "This", "Long", "A", "XX", "Nice", "Success", "Y", "OK"], "yes": ["n", "N", "yeah", "notice", "name", "true", "zero", "ox", "ies", "my", "o", "ye", "news", "auto", "yn", "s", "none", "Y", "l", "good"], "NO": ["MO", "N", "NS", "IN", "GO", "DO", "POS", "NA", "NR", "NOR", "ERROR", "O", "NOTE", "LO", "NE", "ONE", "OUT", "Y", "OK", "RO"], "No": ["MO", "N", "NS", "DO", "POS", "Only", "NR", "Not", "Maybe", "O", "Do", "ONE", "Unknown", "nos", "Y", "Nothing", "OK", "Any"], "no": ["n", "N", "ne", "zero", "type", "o", "default", "negative", "O", "false", "auto", "io", "lo", "unknown", "none", "nos", "do", "never", "number", "error"], "dy4": ["dj2", " Dy2", " Dy1", "dj6", "dy2", "dy1", "dy6", " Dy4", " dy2", " Dy6", " dy6", " dy1", "dj4", "dj1"], "dx4": ["dy2", "dy1", " dx2", "fx4", " dx1", "dx1", "dy12", "dx2", "fx12", "fx2", "dx12", "fx1", " dx12"], "dy8": ["tie2", "dy2", "tie8", " dy86", " dy88", "uy8", "tie88", "uy88", "uy2", " dy2", "uy86", "tie86", "dy86", "dy88"], "dx8": ["dx08", "rx6", "fx6", "dy2", "dx6", "dy6", "rx2", "fx8", "fx08", "rx08", "dx2", "dy08", "fx2", "rx8"], "y": ["sy", "ys", "yd", "yer", "ym", "cy", "w", "oy", "yo", "ox", "z", "ies", "my", "ny", "vy", "ye", "h", "yr", "sky", "axy", "yout", "yl", "uy", "yn", "ey", "gy", "iy", "xy", "yt", "Y", "yy", "fy", "j", "ay", "ry"], "x": ["wx", "xi", "ex", "xe", "ux", "xc", "X", "i", "rx", "w", "c", "ox", "z", "my", "xt", "ix", "h", "tx", "ax", "xd", "fx", "xy", "xf", "xs", "dx", "inx", "xx", "yx", "px", "xp", "zx"], "H": ["M", "CH", "Eh", "HQ", "T", "His", "HL", "AH", "HS", "X", "R", "I", "L", "HI", "GH", "WH", "NH", "h", "DH", "TH", "HH", "B", "Q", "G", "HA", "OH", "HK", "Han", "D", "MH", "Y", "HB", "High", "F", "HT", "He", "C"], "W": ["WT", "WC", "M", "N", "MW", "TW", "NW", "WP", "X", "R", "I", "L", "w", "WH", "VW", "BW", "V", "WA", "S", "B", "SW", "Q", "Wh", "G", "P", "A", "E", "WD", "D", "Y", "FW", "EW", "DW", "F", "C"], "a": ["aq", "ia", "sta", "ae", "ac", "ab", "aj", "xa", "ak", "acc", "w", "c", "ma", "ea", "AA", "aaa", "act", "alpha", "apa", "na", "an", "e", "A", "at", "sa", "ity", "au", "aa", "am", "ar", "area", "ba", "ca"], "b": ["bu", "sb", "n", "ab", "bar", "d", "db", "g", "ib", "i", "w", "r", "c", "z", "m", "bi", "fb", "rb", "bo", "h", "be", "f", "bc", "t", "nb", "B", "bb", "v", "e", "A", "s", "eb", "cb", "l", "j", "bs", "ba", "back"]}}
{"code": "import bisect\\nN, K = map(int, input().split())\\nH = list(map(int, input().split()))\\nH.sort()\\n\\nprint(N-bisect.bisect_left(H, K))", "target": "494", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "T", " CN", "NV", "GN", "Na", "NA", "L", "NM", " n", "NN", "CN", "NR", "NT", "NH", "V", "S", "NE", "J", "Q", "ND", "DN", "P", "D", "NB", "MN", "AN", "TN", "FN", "C"], "K": ["M", "NS", "T", "KY", "KR", "MK", "AK", "KEY", "X", "KK", "DK", "FK", "V", "KS", "KC", "Sk", "PK", "IK", "J", "SK", "Q", "B", "P", "A", "HK", "Mask", "VK", "UK", "k", "KI", "Z", "KE", "KA", "KING", "C"], "H": ["M", "HD", "HM", "His", "GO", "HL", "HS", "HE", "RH", "AV", "HO", "HI", "GH", "NH", "h", "DH", "TH", "HH", "B", "HA", "P", "Hidden", "Head", "Hash", "OH", "HK", "Host", "Han", "HC", "MH", "Her", "HB", "High", "HT", "He"]}}
{"code": "N,M=map(int, input().split())\\nprint(\"Yes\" if N==M else \"No\")", "target": "54", "substitutes": {"N": ["SN", "CNN", "n", "NS", "T", "NC", "GN", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NR", "CN", "NT", "H", "O", "V", "No", "NO", "S", "NE", "B", "J", "Q", "G", "P", "A", "E", "D", "NB", "Y", "Ni", "K", "F", "AN", "Z", "C"], "M": ["MO", "T", "MU", "R", "I", "JM", "L", "X", "NM", "MX", "MAL", "m", "SM", "H", "MM", "V", "MC", "MON", "IM", "S", "MAN", "B", "J", "G", "P", "MP", "E", "MS", "D", "DM", "TM", "MN", "MI", "MT", "LM", "F", "PM", "C"]}}
{"code": "n=int(input())\\ns=list(input())\\nq=int(input())\\n\\ndef ctoi(c):\\n  return ord(c)-97\\nclass Bit:\\n  def __init__(self, n):\\n    self.size = n\\n    self.tree = [[0]*(n+1) for _ in range(26)]\\n  def query(self,a,i):\\n    r = 0\\n    while i > 0:\\n      r += self.tree[a][i]\\n      i -= i & -i\\n    return r\\n  def update(self,i,a,x):\\n    while i<=n:\\n      self.tree[a][i]+=x\\n      i+=i&(-i)\\nbi=Bit(n)\\nfor i in range(n):\\n  bi.update(i+1,ctoi(s[i]),1)\\n  \\nfor _ in range(q):\\n  a,b,c=input().split()\\n  a,b=int(a),int(b)\\n  if a==1 and s[b-1]!=c:\\n    bi.update(b,ctoi(s[b-1]),-1)\\n    bi.update(b,ctoi(c),1)\\n    s[b-1]=c\\n  elif a==2:\\n    c=int(c)\\n    right=[bi.query(i,c) for i in range(26)]\\n    left=[bi.query(i,b-1) for i in range(26)]\\n    ans=0\\n    for r,l in zip(right,left):\\n      if r-l>0:\\n        ans+=1\\n    print(ans)", "target": "779", "substitutes": {"n": ["nr", "N", "nt", "d", "p", "en", "ne", "cn", "g", "ct", "dn", "sn", "w", "m", "z", "ns", "o", "nl", "num", "t", "count", "len", "nb", "no", "mn", "na", "v", "an", "nc", "nan", "number", "np", "nn", "pi", "ng", "j", "k", "y", "rn", "init"], "s": ["sb", "ys", "seconds", "services", "ats", "js", "p", "g", "fs", "items", "w", "ts", "m", "z", "ns", "rs", "ses", "tests", "ins", "sl", "values", "ms", "h", "ls", "t", "S", "ss", "parts", "args", "its", "tes", "states", "strings", "v", "gs", "e", "ws", "gets", "xs", "sv", "sts", "vs", "cs", "os", "y", "qs", "ds", "ps", "bs", "bits"], "q": ["ck", "resh", "d", "p", "g", "qu", "iq", "qt", "w", "z", "m", "qi", "query", "ic", "o", "h", "f", "t", "Q", "v", "e", "sq", "qq", "ch", "dq", "u", "k", "j", "qs", "ry"], "c": ["ce", "lc", "con", "ci", "gc", "d", "p", "unc", "cd", "g", "ct", "rc", "tc", "z", "fc", "cor", "ic", "o", "col", "h", "cur", "f", "bc", "t", "dc", "mc", "vc", "cut", "v", "e", "cin", "cos", "cp", "ch", "cc", "co", "cu", "cb", "cl", "u", "cs", "y", "cm", "cr", "cf", "C", "ac"], "self": ["cmp", "instance", "context", "wn", "p", "mp", "dev", "res", "log", "config", "response", "obj", "co", "new", "app", "pl", "year", "mem", "se", "lex", "k", "conn", "sw", "pkg", "me", "local", "ln", "write", "g", "own", "this", "deep", "object", "full", "my", "shape", "ins", "py", "also", "console", "cl", "user", "ng", "nd", "next", "ae", "nt", "load", "spec", "txt", "sys", "ref", "subject", "round", "make", "h", "review", "resp", "small", "public", "os", "dict", "Self", "th", "w", "rem", "rs", "rb", "by", "ren", "rec", "mix", "ls", "rel", "ws", "network", "j"], "size": ["ize", "body", "state", "name", "sn", "scale", "length", "align", "m", "z", "type", "shape", "power", "sized", "capacity", "SIZE", "limit", "empty", "count", "depth", "e", "small", "Size", "mem", "member", "mode", "sum"], "tree": ["lt", "table", "db", "split", "order", "write", "code", "rule", "zero", "ts", "map", "rie", "status", "reen", "query", "prime", "buffer", "bo", "rees", "t", "memory", "forest", "list", "cache", "model", "tower", "tr", "hash", "node", " trees", "ree", "le", "bin", "index", "shell", "data", "dict", "binary", "root", "sequence", "Tree"], "_": ["p", "on", "get", "__", "ation", "let", "val", "t", " __", "y"], "a": ["aq", "any", "ia", "sta", "ae", "ab", "era", "aj", "ta", "p", "ach", "name", "g", "va", "ai", "xa", "ma", "ami", "ata", "ga", "o", "ea", "la", "aaa", "pa", "act", "t", "alpha", "da", "apa", "na", "an", "e", "A", "ap", "al", "at", "sa", "ao", "sha", "app", "oa", "au", "ed", "aa", "am", "ar", "u", "j", "y", "es", "ka", "area", "ba", "ca", "ac"], "i": ["mi", "ki", "xi", "ia", "ie", "ci", "gi", "p", "di", "ib", "ai", "I", "iter", "m", "z", "ami", "yi", "iti", "ic", "o", "ix", "ip", "h", "ind", "f", "t", "multi", "ri", "io", "si", "ii", "li", "ji", "v", "e", "int", "ti", "oi", "ei", "im", "it", "zi", "ini", "ui", "pi", "phi", "u", "id", "j", "index", "y", "iat", "ij", "ik", "iu", "hi"], "r": ["nr", "mr", "rr", "ro", "err", "ra", "d", "p", "g", "R", "rc", "re", "rx", "w", "m", "rs", "rb", "res", "o", "h", "result", "rar", "fr", " R", "rel", "t", "root", "br", "art", "rl", "dr", "v", "e", "rank", "ur", "it", "rt", "rect", "rates", "ar", "u", "er", "y", "rn", "cr", "rate", "ry", "rd"], "x": ["wx", "xi", "ex", "ci", "xe", "p", "ux", "xc", "qu", "X", "xa", "rx", "w", "ox", "z", "xt", "ic", "ix", "o", "tx", "ax", "f", "t", "v", "e", "fx", "xy", "xs", "dx", "xx", "u", "k", "y", "xp"], "bi": ["bis", "ki", "BI", "mi", "ni", "ja", "bf", "gi", "db", "vi", "di", "ib", "ai", "abi", "isi", "pb", "yi", "ny", "ble", "bo", "bm", "py", "bra", "ibi", "bc", "gb", "ri", "si", "bor", "sim", "ot", "lie", "li", "ji", "ti", "eric", "bed", "zi", "ini", "ui", "ibe", "wei", "phi", "pi", "hog", "ali", "Bi", "obi", "bin", "fi", "ij", "hi", "bs", "ba", "kit"], "b": ["bis", "sb", "to", "ab", "d", "p", "db", "g", "ib", "lb", "bot", "m", "z", "batch", "wb", "fb", "rb", "bo", "by", "o", "h", "be", "ob", "bh", "f", "br", "bc", "t", "bas", "gb", "nb", "B", "bb", "v", "e", "it", "eb", "cb", "bp", "u", "j", "y", "k", "bs", "ba"], "right": ["history", "west", "reverse", "before", "pair", "correct", "ro", "middle", "ra", "d", "head", "Right", "R", "rc", "rx", "down", "rs", "blocks", "restricted", "cross", "wo", "either", "tx", "ax", "rel", "exclusive", "inner", "both", "wrong", "rights", "red", "third", "tr", "rt", "rew", "recent", "range", "ight", "back"], "left": ["locked", "local", "middle", "lt", "p", "L", "center", "ml", "old", "el", "low", "nl", "ner", "bottom", "main", "lower", "lo", "inner", "lp", "out", "both", "wrong", "all", "list", "below", "leave", "Left", "bl", "ll", "le", "pl", "shell", "joined", "back"], "ans": ["arms", "ars", "ANS", "ants", "ats", "outs", "ows", "ros", "aus", "nets", "ns", "ann", "rans", "rs", "ums", "anas", "ks", "offs", "ins", "mas", "ons", "ms", "relations", "angs", "amps", "ents", "ens", "orders", "als", "uns", "an", "rors", "posts", "anks", "aps", "ran", "ands", "vs", "ads", "arts", "lan", "olds"], "l": ["lc", "ln", "lt", "p", "g", "lb", "L", "m", "ly", "ml", "el", "o", "nl", "h", "ls", "f", "t", "yl", "len", "rl", "lo", "lp", "li", "fl", "v", "lr", "ll", "pl", "j"]}}
{"code": "x = 'KIHBR'\\nT = []\\nfor i in range(1<<6):\\n    t = ''\\n    for j in range(6):\\n        if i&(1<<j) and j != 1 and j != 2:\\n            t += 'A'\\n        if j != 5:\\n            t += x[j]\\n    T.append(t)\\nS = input()\\nif S in T:\\n    print('YES')\\nelse:\\n    print('NO')\\n", "target": "796", "substitutes": {"x": ["a", "wx", "n", "xi", "ex", "xe", "p", "g", "xc", "X", "xa", "rx", "w", "c", "z", "xxxx", "xt", "o", "h", "tx", "f", "b", "v", "e", "xy", "s", "xs", "q", "xx", "k", "y", "xp", "xf"], "T": ["WT", "M", "N", "AT", "X", "R", "I", "L", "TS", "PT", "VT", "TC", "H", "W", "O", "V", "BT", "Z", "TV", "LT", "B", "J", "Q", "G", "P", "A", "E", "TB", "TT", "D", "XT", "TA", "TM", "Y", "K", "GT", "F", "TN", "C"], "i": ["mi", "ki", "xi", "ni", "ci", "gi", "di", "uli", "ai", "I", "Si", "bi", "ami", " di", "yi", "iti", " bi", "b", "ri", "si", "li", "ii", "ei", "ti", "Ti", "zi", "ini", " ti", "phi", "pi", "ati", "ij", "iu", "hi", " Xi", "Xi"], "t": ["a", "n", "nt", "ta", "p", "d", "ret", "g", "test", "template", "td", "r", "wt", "tc", "c", "ts", "m", "set", "txt", "w", "total", "ant", "gt", "o", "te", "tp", "term", "dt", "tg", "f", "pt", "ot", "tu", "out", "v", "e", "at", "tt", "s", "st", "rt", "tar", "title", "et", "q", "l", "tmp", "y", "vt", "temp", "trace"], "j": ["a", "json", "n", "uj", "ja", "js", "aj", "p", "d", "g", "jp", "r", "oj", "jc", "z", "m", "c", "jj", "bi", "o", "h", "jl", "f", "b", "br", "jac", "J", "bj", "kj", "ji", "v", "s", "it", "jump", "q", "l", "dj", "u", "y", "k", "ij"], "S": ["M", "N", "NS", "BS", "SS", "R", "I", "JS", "X", "TY", "PS", "TPS", "RS", "Res", "SI", "CS", "TS", "Pos", "Set", "OS", "W", "As", "V", "Ins", "IS", "Z", "B", "G", "P", "Iss", "E", "s", "Is", "SU", "D", "Ps", "Y", "F", "WS", "String", "TN", "C", " s"]}}
{"code": "import math\\n\\n\\ndef main():\\n    h = int(input())\\n\\n    counter = 0\\n    multiple = 1\\n\\n    while True:\\n        if h == 1:\\n            counter += multiple\\n            break\\n        else:\\n            h = math.floor(h/2)\\n            counter += multiple\\n            multiple *= 2\\n\\n    print(counter)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "153", "substitutes": {"h": ["history", "ht", "sh", "kh", "p", "loop", "head", "human", "hz", "hal", "dh", "hs", "c", "m", "ih", "hex", "H", "host", "bh", "go", "b", "uh", "f", "hl", "hp", "count", "dr", "v", "oh", "has", "each", "his", "hash", "ch", "ha", "ph", "he", "hr", "high", "here", "handle", "q", "ho", "l", "phi", "hh", "hi", "hm"], "counter": ["pointer", "n", "master", "ter", "instance", "random", "money", "context", "currency", "order", "atomic", "common", "value", "long", "r", "zero", "unique", "c", "vector", "current", "created", "total", "Counter", "message", "second", "term", "core", "result", "ctr", "count", "time", "t", "integer", "multi", "num", "processor", "memory", "frequency", "amount", "cover", "key", "controller", "cache", "multipl", "hash", "inter", "phrase", "average", "co", "per", "collection", "meter", "number", "monitor", "user", "timeout", "wire", "index", "cm", "timer", "sequence", "sum"], "multiple": ["repeat", "general", "me", "money", " Multiple", "component", "million", "latest", "example", "iple", "mult", "human", "common", "complex", "external", "unique", "m", "type", "prime", "total", "message", "second", "enabled", "two", "done", "main", "double", "every", "multi", "mode", "integer", "numbered", "both", "small", "each", "normal", "multipl", "primary", "factor", "dimension", "group", "size", "repe", "one", "number", "sample", "many", "minimum", "member", "Multiple", "single", "sequence"]}}
{"code": "N=int(input())\\nX=list(map(int, input().split()))\\nimport numpy as np\\np=np.floor(np.mean(X))\\nans=min(np.sum([(x-p)**2 for x in X]), np.sum([(x-(p+1))**2 for x in X]))\\n\\nprint(int(ans))", "target": "46", "substitutes": {"N": ["n", "M", "NS", "T", "Ns", "I", "R", "L", "NA", "NN", "NP", "O", "V", "TN", "S", "B", "Q", "G", "P", "A", "E", "D", "Y", "Ni", "K", "F", "Z", "C"], "X": ["M", "NS", "T", "ANS", "IX", "List", "TX", "IP", "R", "I", "L", "PE", "EX", "MX", "Content", "CE", "Context", "UX", "OX", "ICE", "WH", "TC", "GE", "W", "ZX", "H", "XY", "V", "TH", "XP", "S", "DX", "XM", "Q", "Tx", "P", "JSON", "A", "FX", "XX", "XT", "D", "XXX", "Y", "HTTP", "XL", "U", "K", "String", "Z"], "p": ["n", "pkg", "perm", "pm", "pc", "g", "vp", "jp", "i", "pre", "c", "m", "pe", "fp", "pb", "power", "tp", "pa", "ip", "pu", "f", "sp", "t", "wp", "lp", "pid", "pd", "v", "P", "ap", "up", "at", "cp", "ping", "per", "q", "l", "pi", "np", "pl", "y", "pers", "pp", "ps", "pg"], "ans": ["ars", "ANS", "ants", "ats", "beans", "anon", "ana", " means", "aus", "aned", "san", " Ans", "ns", "ann", "rans", "anas", " spans", "leans", "ins", "ons", "ms", "ls", "anned", "ens", "cons", "uns", "can", "an", "anks", "aps", "anes", "oss", "uploads", "ran", "ams", "nas", "os", "asms", "lan", "AN"], "x": ["wx", "xi", "ex", "th", "ci", "xe", "php", "xes", "ux", "xc", "ct", "xa", "i", "rx", "ox", "z", "plex", "xt", "xml", "ctx", "ix", "tx", "ax", "xd", "check", "v", "e", "int", " xx", "fx", "xy", "xs", "dx", "inx", "xx", "np", "lat", "yx", "lex", "y", "px", "data", "ross", "xp", "xf"]}}
{"code": "S_list = list(input())\\n\\nans = 0\\n\\nfor i in range(len(S_list) // 2):\\n    if S_list[i] != S_list[-i - 1]:\\n        ans += 1\\n\\nprint(ans)\\n", "target": "387", "substitutes": {"S_list": [" S2list", "Smllists", "S__l", "S2st", "S2List", "S_type", "S___dict", "T_List", "T_list", "S_file", "S___List", "T_block", "S___list", "Smldict", "Smllist", "S_lists", " S_st", "S___st", "s_l", "S_st", " S2st", "S__file", " S_List", "S2list", "S__list", " S2dict", " S2List", "T_type", "S7list", "S_l", "S7type", "S2dict", " S_dict", "S7block", "S_List", "S_parent", "S_block", "S7List", " S_parent", " S_lists", "s_file", "s_list", "Smlparent", "S_dict"], "ans": ["ANS", "ants", "ats", "anon", "acs", "outs", "ai", "irms", "ros", "aus", "aned", "ns", "ums", "ann", "rans", "rs", "anas", "man", "ks", "mas", "ras", "wan", "ms", "amps", "anned", "pan", "ents", "ens", "orders", "cons", "can", "an", "posts", "anks", "iann", "anes", "oss", "aps", "s", "idents", "sv", "ran", "ams", "aos", "nas", "ads", "arts", "stats", "lan", "AN"], "i": ["mi", "n", "xi", "x", "ci", "gi", "p", "di", "g", "ai", "I", "c", "m", "ico", "qi", "yi", "ic", "ix", "o", "ind", "si", "li", "key", "ii", "v", "ei", "ori", "ti", "oi", "im", "s", "it", "ini", "zi", "ui", "\u0438", "q", "l", "pi", "id", "j", "k", "y", "ij", "iri", "hi"]}}
{"code": "from sys import stdin\\n\\nclass DList:\\n    class Cell:\\n        def __init__(self, k):\\n            self.key  = k\\n            self.prev = None\\n            self.next = None\\n\\n    def __init__(self):\\n        self.head = DList.Cell(None)\\n        self.last = DList.Cell(None)\\n        self.head.next = self.last\\n        self.last.prev = self.head\\n\\n    def insert(self, x):\\n        c = DList.Cell(x)\\n        c.prev = self.head\\n        c.next = self.head.next\\n        c.next.prev = c\\n        self.head.next = c\\n\\n    def delete(self, x):\\n        c = self.__find(x)\\n        if c != None:\\n            self.__delete(c)\\n\\n    def __delete(self, c):\\n        c.prev.next = c.next\\n        c.next.prev = c.prev\\n\\n    def __find(self, x):\\n        c = self.head.next\\n        while c != None and c.key != x:\\n            c = c.next\\n        return c\\n\\n    def deleteFirst(self):\\n        self.__delete(self.head.next)\\n    def deleteLast(self):\\n        self.__delete(self.last.prev)\\n\\n    def __iter__(self):\\n        self.it = self.head.next\\n        return self\\n    def __next__(self):\\n        if self.it == self.last:\\n            raise StopIteration\\n        k = self.it.key\\n        self.it = self.it.next\\n        return k\\n\\ndlist = DList()\\n\\nn = int(stdin.readline())\\nfor i in range(n):\\n    cmd = stdin.readline()\\n    if   cmd.startswith('insert'):\\n        dlist.insert(cmd[7:-1])\\n    elif cmd.startswith('deleteFirst'):\\n        dlist.deleteFirst()\\n    elif cmd.startswith('deleteLast'):\\n        dlist.deleteLast()\\n    elif cmd.startswith('delete'):\\n        dlist.delete(cmd[7:-1])\\n\\nprint(' '.join(dlist))\\n\\n", "target": "232", "substitutes": {"self": ["json", "settings", "cmp", "body", "instance", "wn", "context", "p", "table", "mp", "left", "re", "r", "dev", "res", "default", "them", "oe", "config", "empty", "sel", "close", "response", "disk", "private", "v", "e", "about", "your", "obj", "wrapper", "co", "new", "app", "q", "pl", "np", "mem", "phys", "se", "lex", "conn", "sh", "to", "pkg", "before", "me", "local", "sw", "ln", "match", "util", "test", "this", "wh", "deep", "build", "sql", "object", "weak", "pre", "sect", "full", "my", "prefix", "help", "parent", "shape", "esh", "ins", "output", "py", "objects", "bind", "auto", "results", "also", "params", "console", "each", "HK", "s", "hash", "debug", "print", "handle", "tmp", "cl", "user", "error", "scope", "python", "nd", "thus", "ae", "nt", "attribute", "d", "spec", "series", "raw", "via", "sys", "inv", "ref", "subject", "asm", "make", "round", "xml", "graph", "h", "val", "result", "you", "gh", "form", "parts", "review", "urn", "eth", "remote", "resp", "all", "github", "cache", "small", "terms", "partial", "public", "com", "so", "req", "today", "other", "vs", "sis", "attr", "selves", "Self", "dict", "th", "struct", "through", "name", "exc", "view", "sub", "method", "My", "requ", "w", "what", " yourself", "rem", "focus", "details", "info", "diff", "rs", "ren", "func", "ls", "tag", "go", "sp", "rel", "news", "conf", "list", "final", "ws", "work", "ve", "proc", "_", "var", "network", "sk", "comp"], "k": ["ck", "km", "ek", "uk", "kr", "Key", "kh", "kl", "g", "ak", "ke", "r", "ky", "m", "dk", "ks", "o", "kw", "ko", "kind", "ind", "them", "tk", "t", "kj", "v", "ok", "ikk", "ku", "q", "kt", "wk", "u", "kk", "id", "sk", "y", "K", "ik", "j", "ka", "ack", "mk", "unk"], "key": ["keys", "loc", "net", "ek", "max", "ex", "Key", "label", "str", "path", "offset", "KEY", "name", "leader", "code", "value", "ke", "cy", "position", "ky", "info", "type", "prefix", "parent", "ice", "by", "val", "tag", "sel", "no", "pid", "int", "row", "string", "obj", "inter", "hash", "ch", "char", "title", "item", "id", "index", "y", "data", "attr", "dict", "entry", "root", "start"], "prev": ["history", "loc", "top", "reverse", "cmp", "before", "label", "perm", "Prev", "p", "mp", "rep", "rev", "iter", "value", "via", "txt", "pre", "current", "inv", "ref", "src", "par", "parent", "pred", "inst", "upper", "by", "ip", "val", "pr", "vr", "buf", "br", "pri", "num", "rel", "dep", "pend", "iv", "initial", "older", "Previous", "adj", "ptr", "orig", "inter", "obj", "first", "pres", "desc", "per", "vious", "tmp", "var", "vec", "op", "attr", "seq", "pp", "root", "target"], "next": ["top", "body", "offset", "lead", "child", "left", "value", "forward", "sn", "set", "default", "br", "main", "nil", "obj", "end", "new", "then", "nn", "link", "data", "seq", "pred", "net", "conn", "max", "write", "ne", "get", "ior", "iter", "Next", "length", "pre", "min", "step", "be", "fr", "len", "until", "inter", "div", "tmp", "entry", "nd", "start", "nr", "secondary", "state", "en", "append", "ref", "note", "nl", "pr", "native", "fn", "front", "inner", "future", "primary", "desc", "size", "index", "target", "ter", "name", "current", "ny", "sec", "success", "ner", "env", "rel", "out", "int", "list", "adj", "ptr", "node", "first", "gen", "vious", "sequence", "after", "version"], "head": ["history", "ck", "hold", "body", "top", "header", "th", "before", "master", "sum", "me", "local", "max", "table", "run", "left", "shift", "pre", "down", "map", "foot", "old", "window", "heading", "parent", "tail", "default", "h", "host", "cur", "tag", "df", "right", "form", "mit", "da", "block", "front", "dr", "headed", "headers", "list", "cache", "Head", "post", "primary", "end", "first", "he", "heads", "hd", "lock", "base", "then", " HEAD", "wire", "link", "index", "data", "HEAD", "root", "back", "target", " Head", "start"], "last": ["top", "body", "loc", "any", "max", "before", "th", "table", "latest", "child", "left", "Last", "current", "full", "buffer", "old", "total", "parent", "tail", "back", "host", "h", "bottom", "right", "vol", "close", "da", "list", "final", "most", "nd", "pop", "all", "st", "highest", "end", "first", "est", "size", "base", "then", "l", "best", "se", "shell", "range", "data", "index", "stack", "root", "after", "start"], "x": ["wx", "xi", "ex", "any", "xe", "p", "name", "ux", "xc", "xa", "X", "rx", "ext", "r", "w", "ox", "z", "m", "xxxx", "xt", "xxx", "hex", "xml", "ic", "ix", "o", "h", "tx", "ax", "f", "t", "v", "e", "fx", "at", "xy", "s", "xs", "dx", "xx", "l", "u", "y", "px", "xp", "xf"], "c": ["cmp", "cat", "p", "r", "ctx", "cur", "config", "uc", "v", "e", "nc", "cos", "cc", "co", "cm", "mk", "sc", "cont", "cd", "g", "tc", "ic", "mc", "s", "cb", "l", "cl", "u", "cs", "C", "chain", "ctrl", "ce", "lc", "ci", "d", "ct", "col", "h", "bc", "dc", "cache", "cp", "ch", "abc", "com", "cu", "etc", "cr", "cf", "ec", "con", "call", "gc", "pc", "cn", "xc", "rc", "fc", "cor", "cv", "f", "b", "vc", "t", "conf", "conv", "y", "ca", "ac"], "it": ["ut", "IT", "ht", "mit", "uit", "ci", "stat", "ir", "p", "g", "It", "iter", " It", "items", "iz", "read", "iti", "ist", "inst", "ic", "lit", "ip", "h", "t", "rit", "ited", "its", "ot", "dr", "itt", "li", "int", "each", "tt", "im", "st", "he", "et", "yt", "item", "id", "op", "hit", "ik", "ait", "itted", "init"], "dlist": ["dictentry", "dictmap", "sdmap", " dli", "dtrace", " dnet", "sdtrace", "dentry", "mdbatch", "mdcont", "pdqueue", " dst", "ddentry", "sdlist", "bdst", "dmap", "pdcont", " dentry", "dli", "ddbatch", "dllists", "sddl", "ddl", " dtrace", "dictlog", "ddnet", "dcont", "dlog", "dictlist", "sdlog", "ddqueue", "delog", "dicttrace", "delist", "sdst", "delists", " dmap", "Dlists", "dllist", "dlList", "dictli", "bdli", "Dlist", " dlog", "dqueue", "deList", "Dlog", "ddcont", "bdlist", "pdlist", "dList", "dllog", "mdlist", "sdli", "pdbatch", "bddl", "dnet", "dst", "DList", "dictnet", "dbatch", "ddlist", "mdqueue", " ddl", "dlists"], "n": ["nr", "N", "nt", "ln", "d", "p", "ne", "r", "sn", "m", "ns", "o", "nl", "num", "t", "count", "len", "nb", "no", "mn", "na", "nc", "nan", "nu", "nw", "nn", "l", "number", "np"], "i": ["ci", "d", "p", "g", "I", "iter", "r", "m", "ix", "ip", "h", "ind", "f", "b", "t", "li", "e", "l", "y", "j"], "cmd": ["ctrl", "conn", "pkg", "cmp", "nt", "cat", "err", "cli", "cont", "cd", "comm", "cycle", "ct", "short", "fun", "ext", "job", "txt", "cfg", "inv", "batch", "control", "info", "help", "ctx", "kw", "Cmd", "func", "bind", "act", "config", "ctr", "tab", "cond", "arm", "pt", "mac", "force", "out", "std", "det", "om", "kick", "crit", "msg", "cp", "exec", "req", "desc", "handle", "cb", "q", "fy", "command", "addr", "mem", "pat", "good", "shell", "md", "mt", "cf", "ctl", "mk"]}}
{"code": "n,a,b=map(int,input().split())\\n\\nans=0\\nfor i in range(1,n+1):\\n  count=0\\n  for j in str(i):\\n    count+=int(j)\\n  if a<=count<=b:\\n    ans+=i\\nprint(ans)\\n", "target": "704", "substitutes": {"n": ["N", "net", "nt", "gn", "d", "p", "en", "ne", "cn", "sn", "r", "c", "m", "ns", "o", "num", "t", "nia", "len", "nb", "mn", "na", "v", "nc", "nan", "nu", "nw", "nn", "l", "q", "np", " N", "k"], "a": ["ia", "sta", "ac", "ab", "ta", "p", "g", "ai", "r", "c", "ma", "m", "o", "ea", "la", "act", "ax", "t", "na", "an", "A", "al", "at", "sa", "ao", "au", "aa", "l", "am", "ar", "u", "ba", "ca"], "b": ["bis", "body", "sb", "ab", "d", "p", "db", "g", "ib", "r", "c", "m", "bi", "fb", "rb", "by", "mb", "be", "br", "f", "bc", "t", "nb", "B", "bb", "v", "e", "eb", "base", "l", "bp", "y", "bs", "ba"], "ans": ["ars", "ANS", "ants", "ats", "ean", "anon", " means", "aus", "aned", " Ans", "ates", "ns", "vals", "anus", "ann", "rans", "rs", "ums", "anas", "ks", "leans", "ins", "eas", "offs", "ons", "ms", "amps", "annot", "pan", "ens", "anc", "orders", "uns", "an", "rors", "anks", "oss", "anes", "s", "nan", "ran", "aos", "ads", "arts", "cs", "lan", "AN", "sum"], "i": ["x", "ia", "ie", "ci", "ir", "p", "di", "ai", "I", "r", "c", "m", "z", "bi", "ic", "o", "ix", "ip", "ind", "f", "t", "io", "si", "li", "ii", "ji", "v", "e", "int", "ani", "im", "it", "ini", "q", "l", "pi", "y", "ij", "ik", "iu"], "count": ["hold", "con", "max", "nt", "cont", "p", "d", "name", "child", "ct", "code", "common", "ount", "length", "c", "current", "process", "ann", "read", "total", "val", "ind", "num", "part", "cond", "nb", "cum", "force", "amount", "conf", "li", "add", "cache", "now", "cc", "found", "size", "counter", "l", "Count", "cs", "id", "index", "sum"], "j": ["json", "uj", "ja", "js", "aj", "p", "jp", "job", "oj", "jc", "z", "jj", "bi", "ju", "jl", "je", "jac", "J", "bj", "ji", "kj", "jas", "v", "obj", "xy", "jump", "jo", "q", "l", "dj", "y", "k", "ij"]}}
{"code": "a,b = list(map(int,input().split()))\\nprint(a%b)", "target": "739", "substitutes": {"a": ["aq", "n", "x", "ia", "sta", "ae", "ab", "d", "aj", "i", "c", "ma", "ga", "aux", "ea", "aaa", "f", "t", "da", "na", "an", "e", "A", "ans", "at", "sa", "aka", "au", "oa", "ed", "aa", "l", "le", "am", "u", "area", "ba", "ca", "ao"], "b": ["bis", "body", "n", "sb", "ab", "d", "db", "g", "ib", "i", "r", "c", "m", "bi", "fb", "rb", "o", "mb", "be", "ob", "br", "bc", "t", "bool", "nb", "B", "bb", "v", "it", "eb", "ed", "base", "cb", "l", "bp", "j", "es", "y", "bs", "ba"]}}
{"code": "n = int(input())\\nans = 111\\nwhile ans < n:\\n    ans += 111\\nprint(ans)", "target": "352", "substitutes": {"n": ["N", "x", "nt", "ln", "d", "p", "ne", "cn", "i", "sn", "w", "c", "m", "z", "ns", "nl", "h", "b", "num", "t", "len", "nb", "mn", "na", "v", "an", "nc", "s", "nan", "nu", "nn", "q", "l", "np", "k", "j"], "ans": ["ars", "ANS", "ants", "ats", "ians", "ints", "ean", "names", " means", "eds", "acs", "aus", "ros", "nets", "lines", "ts", "ns", "vals", "anus", "ann", "ums", "rs", "mas", "anas", "ks", "reads", "ins", "offs", "rans", "wan", "ons", "ms", "acts", "amps", "ls", "annot", "pan", "ents", "ens", "mn", "uns", "an", "iann", "terms", "s", "nan", "xs", "ions", "ams", "aos", "ands", "vs", "aints", "ads", "arts", "os", "lan", "ds", "ones", "said"]}}
{"code": "n = int(input())\\nla = [int(w) for w in input().split()]\\n\\ncnt = [0]*9\\nfor a in la:\\n    if a > 3200:\\n        a = 3200\\n    cnt[a // 400] += 1\\n\\nmi = len([_ for _ in cnt[:8] if _ > 0])\\nma = mi+cnt[8]\\n\\nif mi == 0:\\n    mi = 1\\n\\nprint(mi, ma)\\n", "target": "306", "substitutes": {"n": ["N", "x", "net", "nt", "d", "p", "sn", "r", "c", "z", "m", "ns", "o", "f", "b", "fn", "num", "t", "nb", "na", "v", "nc", "nm", "s", "nn", "l", "np", "j"], "la": ["lc", "lf", "ra", "lda", "ta", "ella", "va", "lb", "xa", "La", "ea", "LA", " wa", "pa", "ls", " La", "una", "alpha", "wa", "lo", "li", "lam", "na", "lab", "qa", "sa", "ha", "aka", "sha", "oa", "aa", "l", "ka", "lah", "hi", "ba", "ca", "ao"], "w": ["wx", "sw", "ae", "ra", "d", "p", " W", "write", "we", "r", "wt", "c", " da", "m", "wr", "ga", "iw", "wi", "rw", "W", "h", "wo", " wa", "f", "word", "ew", "b", "wl", "wid", "t", "da", "wa", "v", "e", "an", "width", "ws", "ha", "nw", "q", "l", "aw", "u", "k", "y", "ya", "ba", "wen", "ow"], "cnt": ["Crc", "cnd", "CNT", " crc", "pcannot", "xcct", "cNT", "cnc", "cct", "pcNT", "xcounters", "xctx", "lcnt", "ctx", "tcounters", "ncnc", "ncct", " cNT", "ncpt", " cct", " cannot", "lcpt", "tcct", " cnc", "xcnt", "ncNT", "pcnd", "tctx", "cpt", "Cct", "ncnt", "pcnt", "Cnd", "ncrc", "tcnt", "Cnt", " cpt", "lcnc", "cannot", " ctx", "counters", "Cannot", "crc", " cnd", " counters", "lcct"], "a": ["ia", "to", "ae", "ac", "ab", "era", "aj", "ta", "p", "ana", "va", "ai", "xa", "i", "c", "ata", "eas", "ga", "ea", " wa", "pa", " ra", "fa", "ax", "alpha", "art", "da", "wa", " ta", "na", "an", "att", "A", "at", "sa", "ao", "ha", "af", "aka", " fa", "oa", "au", "aa", "am", "aw", "ar", "index", "area", "ba", "ca", " na"], "mi": ["ia", "me", "mid", "ci", "gi", "mini", "mo", "mm", "mu", "mp", "di", "ai", "ira", "i", "m", "ami", "em", "my", "mill", "Mi", "wi", "ms", "mis", "mc", "si", "mn", "li", "ti", "mic", "sa", "im", "ha", "mx", "mil", "ini", "mia", "mie", "phi", "pi", "MI", "mem", "ka", "fi", "mt", "hi"], "_": ["x", "ci", "p", " j", " o", "ai", "__", "i", "r", "pre", "ox", "m", "o", "ix", "h", "let", "val", "f", "b", "t", "ow", "num", " i", "no", " m", "list", "A", "all", "ad", "msg", " any", " it", "q", "l", "u", "id", "mat", "j", "y", "k", "ac"], "ma": ["ia", "me", "ja", "ra", "mod", "ta", "mo", "mu", "mm", "mp", "di", "ota", "i", "ema", "m", "mad", "mas", "ga", "ea", "hea", "pa", "ms", "fa", "asa", "mar", "mc", "una", "da", "wa", "mma", "MA", "sa", "ha", "Ma", "ho", "pi", "ka", "eta", "ca"]}}
{"code": "import math\\nn, a, b = map(int, input().split())\\nh_list = [int(input()) for _ in range(n)]\\n\\nlb = 0\\nub = 10**9 # \u3053\u308c\u3060\u3051\u5531\u3048\u308c\u3070\u78ba\u5b9f\u306b\u5168\u6ec5\u3059\u308b\\n\\ndef is_ok(m):\\n    # m\u56de\u306e\u653b\u6483\u3067\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u5168\u6ec5\u3059\u308b\u304b\\n    tmp_ans = 0\\n    for h in h_list:\\n        tmp_h = max(h-m*b, 0) # \u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6b8b\u308a\u4f53\u529b\\n        tmp_ans += math.ceil(tmp_h/(a-b)) # \u7206\u767a\u306e\u4e2d\u5fc3\u306b\u306a\u308b\u56de\u6570\\n    if tmp_ans <= m:\\n        return True\\n    else:\\n        return False\\n\\n\\nng = lb\\nok = ub + 1\\nwhile ok - ng > 1:\\n    m = (ok + ng) // 2\\n    if is_ok(m):\\n        ok = m\\n    else:\\n        ng = m\\n\\nprint(ok)\\n", "target": "51", "substitutes": {"n": ["nr", "N", "x", "nt", "d", "p", "ln", "cn", "g", "i", "sn", "r", "c", "w", "m", "z", "ns", "h", "f", "num", "t", "len", "nb", "mn", "na", "v", "e", "nc", "nu", "nn", "l", "q", "np", "u", "j", "k"], "a": ["x", "ae", "ab", "ta", "p", "ak", "c", "ma", "m", "h", "ax", "alpha", "da", "an", "v", "e", "A", "al", "at", "sa", "aa", "am", "ar", "ba", "ca", "ac"], "b": ["x", "ab", "d", "p", "beta", "g", "ib", "i", "r", "c", "m", "z", "bi", "o", "bh", "br", "bc", "t", "nb", "B", "bb", "v", "l", "y", "bs", "ba"], "h_list": ["h_array", "l_array", "hxlist", "l_set", "hxList", "h_set", "l_List", "hxset", "h_List", "hxarray", "l_list"], "_": [" the", " j", "__", " pre", "ix", " row", " g", " long", " ip", " x", " l", " __", " any", " you", "___", " day", " code", " mill", " p", " un"], "lb": ["LB", "lc", "sb", "lu", "ln", "lt", "ld", "dl", "wb", "rb", "nl", "la", "bh", "rl", "lo", "bb", "lp", "bt", "lr", "bl", "cb", "l", "bp", "pl", "ll", "bs"], "ub": ["ut", "sb", "um", "ab", "sub", "ul", "ue", "ib", "uv", "pb", "rob", "mb", "rub", "ob", "zb", "uc", "umb", "tu", "bn", "sc", "hub", "ur", "im", "eb", "uf", "dq", "ubs", "UB"]}}
{"code": "H = int(input())\\nW = int(input())\\nN = int(input())\\nprint((N // max(H, W)) if N % max(H, W) == 0 else (N // max(H, W) + 1))", "target": "592", "substitutes": {"H": ["M", "Eh", "HQ", "HD", "CH", "FH", "SH", "His", "HS", "AH", "HE", "HL", "X", "Th", "AV", "HO", "HI", "GH", "HTML", "NH", "HR", "h", "DH", "TH", "V", "HH", "B", "HA", "P", "A", "OH", "Host", "MH", "HB", "High", "K", "HT", "Hi", "He"], "W": ["WT", "WC", "M", "We", "WR", "MW", "Win", "TW", "West", "WP", "NW", "X", "R", "L", "w", "WH", "VW", "BW", "WA", "V", "Width", "SW", "Wh", "Q", "Week", "WB", "G", "B", "P", "A", "D", "WM", "Web", "Y", "EW", "DW", "U", "F", "WS", "Z", "Data"], "N": ["SN", "n", "M", "NS", "T", "NL", "NV", "GN", "NI", "Ns", "R", "X", "I", "L", "NA", "NM", "NN", "NR", "CN", "NT", "NOR", "NH", "O", "V", "NO", "Z", "NUM", "S", "MAN", "NE", "B", "J", "Q", "Num", "P", "E", "D", "NB", "Y", "MN", "Ni", "F", "AN", "TN", "FN", "NG", "C"]}}
{"code": "import sys\\n\\ndef main(lines):\\n  N = int(lines[0])\\n  print(N // 2*(N - N // 2))\\n\\nif __name__ == '__main__':\\n    lines = []\\n    for l in sys.stdin:\\n        lines.append(l.rstrip('\\r\\n'))\\n    main(lines)", "target": "402", "substitutes": {"lines": ["notes", "los", "sticks", "prints", "elines", "ln", "actions", "codes", "ines", "cells", "outs", "tops", "inline", "nets", "lets", "items", "boxes", "vals", "points", "blocks", "reads", "files", "ses", "ins", "chains", "nl", "runs", "values", "ls", "ids", "limits", "parts", "lists", "levels", "plays", "states", "frames", "strings", "posts", "comments", "sites", "gs", "steps", "works", "flows", "terms", "links", "eps", "cycles", "breaks", "vs", "sets", "rows", "sections", "groups", "qs", "pins", "ds", "lins", "bs", "jobs", "bits"], "N": ["SN", "M", "n", "NS", "T", "NV", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "O", "V", "NUM", "S", "B", "J", "G", "P", "Num", "A", "E", "D", "Y", "MN", "Ni", "K", "F", "Z", "C"], "l": ["lc", "n", "lf", "kl", "ln", "lt", "p", " lay", "left", " il", "i", "L", " le", "ly", " Li", "dl", "m", "el", "lit", "nl", "sl", " long", " lo", "la", "lay", "ls", "jl", "f", "b", "t", " L", "yl", "lo", "fl", "li", " ll", " lit", " lid", "ll", "line", " lol", "le", " ls", "lin", " li"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nMOD = 10 ** 9 + 7\\n\\nsumm = 0\\nans = 0\\nfor i in range(1, n):\\n    summ += a[-i]\\n    ans += a[-(i + 1)] * summ\\n    ans %= MOD\\n\\nprint(ans % MOD)\\n", "target": "198", "substitutes": {"n": ["N", "x", "net", "nt", "ln", "d", "p", "ne", "g", "sn", "w", "c", "m", "ns", "nl", "f", "b", "num", "t", "nb", "no", "mn", "na", "v", "nc", "s", "nan", "nu", "nw", "nn", "l", "np", "network", "j", "k"], "a": ["sta", "ae", "ac", "ab", "p", "ai", "c", "ma", "m", "input", "ga", "eas", "o", "la", "abs", "b", "t", "alpha", "parts", "apa", "an", "att", "all", "list", "A", "at", "sa", "s", "ao", "app", "au", "oa", "aos", "aa", "am", "data", "array", "area", "ba", "ca"], "MOD": ["MAX", "M", "N", "VER", "MAG", "mod", "mods", "MAT", "POS", "Mod", "AD", "VERSION", "MAL", "RM", "OD", "MIN", "ALL", "RES", "ERROR", "Mods", "PUT", "REG", "SIZE", "MD", "IM", "NUM", "MODE", "MAN", "END", "UL", "ID", "MP", "MED", "MS", "OUT", "ADD", "TM", "STEM", "OK", "MAP", "DEC", "MT", "JUST", "DEV", "FORM", "AN", "UN", "OOL", "REM"], "summ": ["nsagg", "gimm", "som", "Suf", " sum", "sagg", "ssums", "nsumm", " sack", " simm", "gumm", "asamm", " sumer", "nsack", "ssumer", "Sum", "nsamm", "asagg", "gum", "samm", " som", " sagg", "Sums", "asumm", "asack", "Sumer", "Simm", "guf", "Summ", "Som", "sumer", "sums", "sack", " samm", "simm", "ssom", " suf", "suf", "ssumm", " sums", "sum"], "ans": ["ANS", "sum", "ians", "ats", "ants", "mods", "beans", "actions", " means", "eds", "outs", "missions", "aus", "asks", "nets", " Ans", "ns", "ann", "rans", "mas", "man", "anas", "ks", "offs", "ins", "scan", "ras", "ons", "ms", "amps", "ls", "mean", "ents", "ens", "news", "orders", "ends", "uns", "can", "an", "posts", "gs", "oss", "des", "ays", "s", "terms", "nan", "eps", "nas", "ams", "aos", "ran", "ands", "ads", "aw", "os", "groups", "lan", "AN", "ds"], "i": ["mi", "xi", "x", "ogi", "uri", "ci", "gi", "cli", "p", "di", "iq", "ai", "I", "jp", "c", "m", "z", "bi", "ic", "ix", "ip", "ind", "f", "b", "multi", "si", "li", "ii", "v", "ei", "ori", "ti", "oi", "s", "im", "it", "zi", "ui", "ini", "\u0438", "q", "phi", "pi", "ali", "id", "k", "index", "ik", "ij", "iu", "hi"]}}
{"code": "S = input()\\nN = len(S)\\n\\nans1 = 0\\nans2 = 0\\n\\nfor i in range(N):\\n  if i%2 == 0:\\n    if S[i] != \"0\":\\n      ans1 += 1\\n    else:\\n      ans2 += 1\\n  else:\\n    if S[i] != \"1\":\\n      ans1 += 1\\n    else:\\n      ans2 += 1\\n\\nprint(min(ans1, ans2))", "target": "495", "substitutes": {"S": ["M", "NS", "T", "SF", "SH", "BS", "SS", "SL", "SB", "R", "I", "X", "L", "JS", "PS", "SO", "VS", "SI", "CS", "Spe", "OS", "H", "GS", "V", "INS", "B", "Q", "G", "P", "A", "You", "E", "s", "SU", "SP", "D", "Y", "SA", "U", "F", "Z", "C"], "N": ["SN", "CNN", "M", "n", "NS", "T", "GN", "NI", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "NP", "NR", "NT", "NH", "H", "V", "No", "B", "J", "Q", "ND", "P", "A", "D", "NB", "Y", "Len", "K", "F", "NG", "C"], "ans1": [" ans51", "ants11", "amps01", "ins81", "ausone", "ks01", "ads1", "antsone", "ks2", "ans0", "anasOne", "an2", "aus0", "ants0", "anOne", "ansOne", "amps51", "aus1", "an1", "ans51", " ansOne", "ins0", " ans81", "ans01", "adsone", "anas81", "amps2", "aus11", "amps1", "ads0", "an01", "ans11", "ansone", "ans81", "ks1", "ads11", "ins1", "ks51", "an51", "anas0", "ants1", "anas1", "ampsOne", "insOne", " ans0"], "ans2": ["ans52", "ans22", "annTwo", "ansalt", "ann2", "an4", "ean1", "ean42", "ean62", "ams42", "anks1", "ean2", "an2", " ans22", "ans3", "ans62", "aus1", "an52", "an22", "anks2", "ams2", "an1", "anks52", " ans52", " ans4", "ams1", "an42", "adsTwo", "ams62", "ann3", "ans42", "analt", " ansTwo", "ans4", "an62", "aus22", "ads2", "ads3", "anksalt", " ansalt", "aus2", " ans3", "ansTwo", "aus4"], "i": ["\u00ed", "mi", "ki", "n", "xi", "x", "ia", "uri", "me", "ci", "gi", "name", "di", "uli", "ai", "I", "this", "m", "batch", "bi", "yi", "info", "qi", "ic", "ski", "ix", "ip", "ind", "si", "li", "ii", "ji", "key", "ori", "ti", "oi", "list", "s", "it", "zi", "ini", "ui", "\u0438", "base", "q", "pi", "id", "j", "k", "index", "ij"]}}
{"code": "n, k, q = map(int,input().split())\\na = [0 for i in range(n)]\\nfor i in range(q):\\n    x = int(input())\\n    a[x-1] += 1\\nfor i in range(n):\\n    print(\"Yes\" if a[i] - (q - k) > 0 else \"No\")", "target": "336", "substitutes": {"n": ["nr", "N", "net", "nt", "ln", "d", "p", "ne", "g", "sn", "r", "c", "m", "ns", "ny", "o", "h", "num", "t", "nb", "mn", "nv", "na", "v", "an", "nc", "nan", "nu", "nn", "l", "np", "j", "y"], "k": ["ck", "km", "ki", "ek", "kn", "kr", "uk", "kh", "kl", "p", "ak", "ke", "c", "m", "z", "ks", "kw", "ko", "tk", "kok", "kj", "v", "e", "ku", "u", "kk", "ka", "j", "K", "ik", "sk", "kg", "mk"], "q": ["ck", "qv", "d", "p", "g", "qu", "iq", "qt", "quant", "ke", "r", "w", "m", "z", "qi", "query", "o", "h", "f", "b", "t", "Q", "v", "e", "sq", "qq", "qa", "question", "dq", "l", "yes", "ll", "u", "y", "j", "qs"], "a": ["ia", "sta", "ae", "to", "ac", "ab", "mod", "ta", "ai", "xa", "ma", "m", "set", "ata", "eas", "ga", "change", "o", "la", "b", "t", "alpha", "da", "wa", "an", "A", "ans", "at", "sa", "au", "oa", "aos", "aa", "pi", "am", "index", "ya", "area", "ba", "ca", "ao"], "i": ["mi", "ki", "xi", "ia", "ie", "ci", "gi", "ir", "p", "di", "ai", "I", "z", "m", "bi", "yi", "ic", "o", "ix", "ip", "ind", "ri", "si", "li", "ii", "ji", "v", "e", "int", "ti", "iy", "im", "it", "zi", "ini", "phi", "pi", "l", "u", "id", "y", "j", "ij", "ik", "index", "iu"], "x": ["wx", "xi", "ex", "ci", "xe", "xes", "ux", "xc", "xa", "X", "rx", "c", "ox", "z", "xxxx", "xt", "xxx", "ix", "tx", "ax", "xd", "sat", "v", "xy", "xs", "dx", "xx", "j", "y", "lex", "xp", "xf"]}}
{"code": "n = int(input())\\nans = 0\\nfor i in range(10**5):\\n    if i**2<=n:\\n        ans = i**2\\n    else:\\n        break\\nprint(ans)", "target": "330", "substitutes": {"n": ["N", "x", "nt", "ni", "ln", "d", "p", "cn", "sn", "w", "c", "m", "z", "ns", "o", "nl", "h", "f", "b", "num", "t", "len", "nb", "mn", "na", "v", "nc", "s", "nan", "nu", "nn", "q", "l", "k"], "ans": ["ars", "ANS", "ants", "ats", "ians", "beans", "names", " means", "eds", "ai", "aus", "ros", "aned", "ts", "ns", "vals", "anus", "ann", "rans", "rs", "mas", "anas", "reads", "offs", "ins", "wan", "ons", "ms", "amps", "anned", "pan", "ents", "ens", "an", "anks", "iann", "works", "s", "nan", "ran", "nas", "aos", "ams", "arts", "os", "lan", "olds"], "i": ["a", "mi", "ki", "xi", "x", "ci", "gi", "di", "ai", "I", "m", "bi", "yi", "qi", "info", "ic", "ix", "o", " bi", "ip", "ri", "si", "iu", "ii", "li", "ji", "v", "ori", "ti", "oi", "it", "ini", "zi", "\u0438", "q", "phi", "pi", "ati", "y", "ik", "ij", "iri", "hi"]}}
{"code": "n,u,v=map(int,input().split())\\nu-=1;v-=1\\nedge=[[]*n for _ in range(n)]\\nfor _ in range(n-1):\\n  a,b=map(int,input().split())\\n  a-=1;b-=1\\n  edge[a].append(b)\\n  edge[b].append(a)\\n  \\n  \\n# from u \u9003\u3052\u308b\\n# u\u306fv\u304b\u3089\u307f\u305f\u8ddd\u96e2\u304c\u5927\u304d\u3044\u65b9\u306b\u9032\u3080\u306e\u304b\u306a\\n# from v \u8ffd\u3046\\n# v\u59cb\u70b9\u3067BFS\u3057\u3066\u5404\u9802\u70b9\u3078\u306e\u8ddd\u96e2\u3092\u6301\u3064\\ndist=[-1]*n\\n\\nfrom collections import deque\\nq=deque()\\nq.append(v)\\ndist[v]=0\\nwhile q:\\n  p=q.popleft()\\n  d=dist[p]\\n  for i in edge[p]:\\n    if dist[i]==-1:\\n      dist[i]=d+1\\n      q.append(i)\\n\\n# print(dist)\\n\\nfar=[-1]*n\\nq=deque()\\nq.append(u)\\nfar[u]=0\\nwhile q:\\n  p=q.popleft()\\n  d=far[p]\\n  for i in edge[p]:\\n    if far[i]==-1:\\n      if dist[i]>d+1:\\n        far[i]=d+1\\n        q.append(i)\\n\\n# print(far)\\n  \\n\\nfar_mx=max(far)\\nif far_mx==-1:\\n  print(0)\\n  exit()\\n  \\nind=[i for i,v in enumerate(far) if v!=-1]\\n\\nto=max(dist[i] for i in ind)\\nans=(to-1)\\nprint(ans)\\n", "target": "309", "substitutes": {"n": ["nr", "N", "x", "net", "nt", "gn", "d", "p", "ne", "g", "cn", "dn", "i", "sn", "w", "c", "r", "m", "z", "ns", "o", "f", "num", "t", "len", "nb", "mn", "na", "nc", "nan", "nu", "nn", "q", "l", "np", "pi", "j", "nd"], "u": ["ut", "lu", "uj", "uri", "su", "p", "mu", "ue", "ul", "g", "i", "uid", "us", "uv", "c", "m", "o", "h", "f", "uc", "ud", "tu", "un", "up", "ou", "ur", "ui", "uf", "nu", "au", "q", "U", "uu"], "v": ["x", "d", "p", "vi", "g", "tv", "va", "i", "w", "r", "uv", "c", "m", "o", "h", "V", "f", "vc", "t", "nv", "e", "s", "sv", "q", "l", "j", "y", "vt", "k"], "edge": ["ce", "conn", "ine", "ge", "pair", "ie", "me", "component", "match", "ne", "g", " Edge", "Edge", "ace", "pe", "die", "diff", "connection", "graph", "ice", "ide", "tex", "env", "force", "ee", "e", "adj", "event", "eg", "node", "end", "equal", "ed", "see", "cer", "one", "element", "l", "extra", "line", "degree", "link", "se", "index", "ink", "entry", "connected", "source", "use"], "_": ["x", " the", "__", "I", " pre", "ox", "ix", "val", "all", " __", "___", "j", "ay"], "a": ["aq", "ia", "sta", "ae", "ac", "ab", "aj", "p", "ach", "va", "ai", "ak", "i", "r", "w", "c", "ma", "ga", "o", "ea", "la", "aaa", "ah", "t", "ova", "apa", "av", "an", "e", "A", "ap", "at", "sa", "s", "app", "au", "aa", "l", "am", "ar", "ack", "ba", "ca"], "b": ["bis", "sb", "ab", "bar", "p", "db", "d", "g", "ib", "i", "blue", "r", "c", "z", "bi", "fb", "rb", "o", "mb", "h", "be", "ob", "bh", "br", "f", "bc", "t", "gb", "nb", "B", "bb", "e", "s", "erb", "base", "bl", "cb", "l", "bp", "bin", "j", "y", "bs", "ba"]}}
{"code": "n,m=map(int,input().split())\\nstudent=[]\\nfor _ in range(n):\\n    a,b=map(int,input().split())\\n    student.append([a,b])\\n\\ncheckpoint =[]\\nfor _ in range(m):\\n    c,d = map(int,input().split())\\n    checkpoint.append([c,d])\\n\\nfor i in range(n):\\n    s = student[i]\\n    dist = float('inf')\\n\\n    num=0\\n    for j in range(m):\\n        c=checkpoint[j]\\n        tmp = abs(s[0]-c[0]) + abs(s[1]-c[1])\\n\\n        if tmp < dist:\\n            dist = tmp\\n            num=j+1\\n\\n    print(num)\\n        \\n", "target": "3", "substitutes": {"n": ["nr", "N", "nt", "p", "ne", "g", "r", "sn", "ns", "o", "h", "t", "nb", "mn", "na", "v", "an", "yn", "nc", "nu", "nw", "nn", "l", "np", "u", "y", "k"], "m": ["tm", "mi", "M", "mr", "perm", "me", "mod", "dm", "p", "mm", "g", "re", "r", "mos", "ma", "man", "bm", "o", "gm", "h", "ms", "f", "mis", "t", "mc", "mn", "v", "l", "month", "cm", "mt"], "student": ["client", " students", "ward", "loader", "education", "local", "attribute", "league", "standard", "util", " Student", "vp", "game", "server", "cell", "course", "runner", "winner", "player", "educated", "sync", "blind", "Students", "campus", "session", "learn", "rent", "private", "holiday", "bench", "home", "graduate", "slave", "soc", "Student", "directory", "division", "question", "node", "woman", "board", "grading", "du", "user", "sample", "trial", "stud", "patient", "member", "chat", "ard", "taker"], "_": ["Over", " the", "Local", " cpu", "let", "val", "____", " __", " each", "___"], "a": ["ia", "ae", "ab", "aff", "aj", "aba", "ach", "ai", "ak", "ma", "ga", "ea", "la", "aaa", "\u00e4", "art", "apa", "an", "A", "at", "af", "sa", "ao", "au", "oa", "aa", "l", "am", "ar", "er", "ba", "ca", "ac"], "b": ["bis", "sb", "bf", "ab", "bar", "db", "g", "ib", "r", "bi", "ble", "fb", "rb", "bo", "by", "h", "be", "ob", "abb", "br", "bc", "t", "B", "bb", "erb", "eb", "ed", "cb", "l", "y", "bs", "ba"], "checkpoint": [" checktag", "checkspt", "checkbox", "pointpt", "pointpath", " checkpart", "backpoint", " checkpost", "pointpoint", "backpointer", "checkpart", "bookpoint", "checkspath", "cutpointer", "backpart", "idpt", "cutpart", "checktag", "booktag", "backpt", " checkbox", "checkpointer", "lockbox", "idpoints", "idpath", "cutpt", "bookbox", "checkpath", "checkpost", "idpoint", "lockpoint", "cutpoint", "bookpost", "locktag", "checkspoints", "checkspoint", "checkpt", " checkpointer", "lockpost", "checkpoints", "pointpoints", " checkpt"], "c": ["ec", "ce", "lc", "ctrl", "con", "self", "cat", "ci", "p", "cd", "spec", "ct", "rc", "arc", "tc", "fc", "ic", "col", "be", "cur", "cv", "enc", "f", "bc", "t", "dc", "mc", "anc", "conf", "sc", "can", "v", "cin", "cache", "cos", "cp", "ch", "conv", "abc", "com", "co", "cc", "cu", "cb", "etc", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["db", "dir", "di", "dn", "r", "dev", "dt", "df", "dat", "da", "dr", "de", "ad", "red", "des", "dp", "D", "ed", "div", "dis", "dd", "du", "did", "dra", "sd", "dict", "ds", "nd", "rd"], "i": ["mi", "xi", "x", "ia", "ci", "gi", "p", "di", "I", "z", "bi", "yi", "ic", "ip", "jl", "t", "si", "ii", "li", "ji", "v", "int", "ti", "im", "zi", "ini", "q", "l", "pi", "id", "y", "k", "index", "ij"], "s": ["sb", "self", "seconds", "su", "ats", "space", "js", "spec", "series", "sys", "ts", "set", "ns", "ies", "rs", "ses", "tests", "ins", "less", "sl", "ls", "abs", "sp", "ss", "S", "als", "its", "sc", "bits", "gs", "sq", "sa", "sv", "xs", "sts", "sis", "sd", "cs", "se", "changes", "stats", "ds", "ps", "bs"], "dist": ["cmp", "nt", "err", "p", "dir", "Dist", "dn", "shift", "dest", "txt", "diff", "driver", "dev", "total", "pred", "distance", "ind", "dt", "t", "rel", "dr", "disc", "det", "delay", "obj", "des", "adj", "dx", "desc", "size", "dim", "dis", "progress", "dj", "relative", "dd", "Distance", "sd", "np", "md", "pdf", "sum"], "num": ["con", "net", "comment", "x", "sym", "nt", "um", "nom", "en", "name", "day", "unique", "set", "commit", "note", "ident", "total", "nam", "success", "result", "multi", "NUM", "no", "nb", "cum", "sim", "ord", "ver", "out", "Num", "cal", "int", "final", "nm", "un", "obj", "msg", "multipl", "node", "dx", "nu", "new", "number", "mon", "np", "id", "hot", "index", "sum"], "j": ["json", "x", "uj", "state", "aj", "js", "p", "g", "jp", "job", "r", "jc", "oj", "z", "jj", "ju", "o", "h", "ind", "jl", "f", "t", "J", "ion", "bj", "li", "kj", "v", "ji", "obj", "im", "it", "jump", "q", "l", "dj", "id", "y", "k", "index", "ij"], "tmp": ["tm", "dirty", "stuff", "pkg", "cmp", "perm", "nt", "err", "lib", "p", "mm", "mp", "trip", "test", "tc", "txt", "pre", "diff", "prefix", "prime", "tp", "term", "ind", "result", "abs", "t", "pretty", "time", "nb", "pos", "resp", "dust", "sq", "emp", "adj", "obj", "xy", "tt", "cp", "mk", "tf", "msg", "tar", "new", "np", "timeout", "etc", "buff", "yy", "attr", "meg", "temp"]}}
{"code": "a = input()\\ncount = 700\\nfor b in a:\\n  if b == \"o\":\\n    count += 100\\n\\n\\nprint(count)", "target": "231", "substitutes": {"a": ["n", "x", " this", "ae", " e", "ac", "ab", "p", "ach", "g", "i", "w", "c", " A", "m", "z", "ma", "input", "ga", "o", "ea", "aaa", "f", "t", "amount", "an", "e", "v", "all", "A", "another", "s", "at", "ame", "oa", "aa", "l", "y", "area", "ba", "ca"], "count": ["top", "n", "max", "nt", "stat", "p", "code", "i", "long", "ount", "w", "length", "c", "weight", "z", "current", "process", "total", "message", "page", "second", "h", "result", "cmd", "f", "num", "t", "nb", "force", "amount", "add", "check", "v", "int", "list", "now", "found", "counter", "number", "Count", "index", "sum"], "b": ["sb", "bf", "ab", "p", "db", "ib", "i", "w", "c", "reb", "z", " B", "verb", "wb", "pb", "fb", "rb", "o", "be", "ob", "f", "bc", "nb", "B", "bb", "bid", "v", "e", " eb", " c", "A", "obj", "erb", "eb", "xb", "base", "cb", "bl", "u", "ub", "y", "bs", "ba"]}}
{"code": "dice = [1,2,3,4,5,6]\\nnumber = list(map(int,input().split()))\\ndirection = str(input())\\n\\nrotate_n =[2,6,3,4,1,5]\\nrotate_s =[5,1,3,4,6,2]\\nrotate_e =[4,2,1,6,5,3]\\nrotate_w =[3,2,6,1,5,4]\\n\\nfor i in direction:\\n    result = []\\n    if i == \"N\":\\n        for j in range(6):\\n            dice[j] = rotate_n[j]\\n    elif i == \"S\":\\n        for j in range(6):\\n            dice[j] = rotate_s[j]\\n    elif i == \"E\":\\n        for j in range(6):\\n            dice[j] = rotate_e[j]\\n    else:\\n        for j in range(6):\\n            dice[j] = rotate_w[j]\\n    for k in dice:\\n        result.append(number[k-1])\\n    number = result\\n\\nprint(number[0])", "target": "401", "substitutes": {"dice": ["publicouse", "bdense", " dic", "dpire", "draate", "didive", "dense", "drix", "publicicing", " delve", "publicicer", "fdic", "joice", "delicer", "Dice", "dorix", "dani", " dICE", " douse", "publicice", "didicer", "didouse", "dive", "draine", "bdice", "doelve", "diice", "date", "jICE", "diense", "Douse", "doice", "delice", "jpire", "deline", "jice", "fdice", " date", " dive", "domelve", " drix", "dine", "dic", "jense", "jani", " dicer", "diaddy", " dine", "delate", "doine", "fdouse", "bdoice", "dicer", "bdaddy", " dpire", "Dicer", "dioice", "domine", "douse", " dani", "didicing", "Dicing", "domice", "dicing", "daddy", "draice", "domrix", "dICE", "fdive", "delve", "didice", "jaddy", "draicer", "didic"], "number": ["n", "comment", "random", "expression", "money", "point", "database", "information", "name", "language", "voice", "value", "zero", "Number", "position", "length", "password", "object", "total", "message", "output", "second", "word", "num", "news", "integer", "no", "record", "production", "numbered", "ion", "na", "null", "list", "string", "normal", "directory", "date", "maximum", "reference", "dimension", "group", "collection", "one", "counter", "umber", "range", "data", "document", "sequence", "function", "python", "version"], "direction": ["reverse", "iterator", "attribute", "information", "dir", "order", "language", "dial", "forward", "position", "library", "vector", "unit", "connection", "type", "shape", "heading", "angle", "speed", "distance", "description", "word", "irection", "string", "ction", "directory", "location", "orient", "dimension", "direct", "motion", "translation", "operation", "command", "degree", "document", "sequence", "function", "source", "version"], "rotate_n": ["rotate__ns", "rotate__n", "rotate2ns", "rotute_s", "rotate2r", "rotute_v", "rotate2N", "rotate2n", "rotat_n", "rotate_r", "rotate__N", "rotate1s", "rotate__r", "rotat_ns", "rotate__s", "rotute_n", "rotate_v", "rotat2r", "rotate__v", "rotat_r", "rotate_ns", "rotat2n", "rotat2ns", "rotat2N", "rotate_N", "rotate1v", "rotat_N", "rotate1n"], "rotate_s": ["rotate2S", "rotate_c", "rotice_gs", "rotice_s", "rotate2g", "rotice_c", "rotating_S", "rotate2sm", "rotate2s", "rotate___c", "rotice____s", "rotate1w", "rotate_S", "rotating_s", "rotate1s", "rotate___s", "rotate_g", "rotate___w", "rotice____c", "rotice_w", "rotice____gs", "rotate____w", "rotice____w", "rotating_sm", "rotate____gs", "rotate____s", "rotate____c", "rotate_sm", "rotate___gs", "rotate1c", "rotate_gs", "rotating_g", "rotate1gs"], "rotate_e": ["rotate1e", "rotate_eu", "rotate___e", "rotation1es", "rotate67s", "rotational67w", "rotate67e", "rotate1r", "rotate_E", "rotation_E", "rotate67eu", "rotational_eu", "rotational67s", "rotate___eu", "rotate_r", "rotate_es", "rotate___s", "rotational67e", "rotation_r", "rotation_es", "rotation_e", "rotation1e", "rotate___w", "rotate67w", "rotate1E", "rotational_e", "rotation1E", "rotation1r", "rotational67eu", "rotate1es", "rotational_w", "rotational_s"], "rotate_w": ["rotute_r", "rotate_wal", "rotate2w", "roticate2words", "rotate2words", "roticate2sw", "roticate2wal", "roticate_w", "roticate_sw", "rotate_r", "rotute_w", "rotute_y", "rotate2sw", "rotate67wal", "rotate__w", "rotate__r", "rotute_sw", "rotate67w", "roticate2w", "rotate67sw", "rotate_words", "rotate_sw", "roticate_words", "rotate__y", "rotate__sw", "rotate67words", "rotate_y", "rotate2wal", "roticate_wal"], "i": ["a", "xi", "uri", "ie", "cli", "gi", "p", "name", "di", "ai", "I", "isi", "bi", "info", "iti", "ic", "ix", "o", "ski", "iri", "ici", "ip", "ri", "io", "si", "li", "ii", "ji", "ei", "e", "v", "ti", "oi", "ori", "s", "ini", "zi", "\u0438", "hai", "phi", "pi", "l", "ati", "y", "asi", "ij", "iu", "hi"], "result": ["answer", "json", "complete", "comment", "pair", "void", "goal", "match", "table", "ret", "test", "this", "Result", "value", "true", "r", "position", "report", "created", "buffer", "diff", "make", "message", "success", "res", "output", "case", "description", "respond", "false", "product", "create", "integer", "response", "initial", "memory", "results", "out", "null", "search", "list", "final", "directory", "group", "new", "detail", "there", "data", "relation", "use"], "j": ["ck", "json", "n", "x", "uj", "ja", "str", "ijk", "aj", "js", "d", "name", "ret", "g", "jet", "jp", "rev", "job", "oj", "jc", "z", "jj", "og", "el", "note", "ju", "cert", "bind", "pr", "jl", "dt", "fr", "br", "jac", "je", "pt", "J", "dr", "bj", "key", "ji", "att", "kj", "jas", "v", "obj", "adj", "xy", "tr", "jump", "req", "jo", "hd", "div", "bl", "q", "dj", "item", "y", "jit", "er", "ij", "prop"], "k": ["ck", "km", "ki", "kn", "kr", "kh", "kl", "ijk", "kin", "d", "p", "g", "kar", "ak", "kid", "c", "m", "z", "jj", "dk", "o", "kw", "ko", "kind", "f", "tk", "kok", "t", "key", "it", "ikk", "ku", "u", "kk", "id", "ka", "kan", "K", "ik", "sk", "ket", "mk"]}}
{"code": "import sys\\n\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\n\\nin_n = lambda: int(readline())\\nin_nn = lambda: map(int, readline().split())\\nin_s = lambda: readline().rstrip().decode('utf-8')\\nin_nl = lambda: list(map(int, readline().split()))\\nin_nl2 = lambda H: [in_nl() for _ in range(H)]\\nin_map = lambda: [s == ord('.') for s in readline() if s != ord('\\n')]\\nin_map2 = lambda H: [in_map() for _ in range(H)]\\nin_all = lambda: map(int, read().split())\\n\\n\\ndef main():\\n\\n    N, K = in_nn()\\n\\n    X = []\\n    Y = []\\n    for i in range(N):\\n        x, y = in_nn()\\n        X.append(x)\\n        Y.append(y)\\n\\n    sort_x = sorted(set(X))\\n    sort_y = sorted(set(Y))\\n\\n    nx = len(sort_x)\\n    ny = len(sort_y)\\n\\n    total_sum = [[0 for _ in range(nx + 1)] for _ in range(ny + 1)]\\n\\n    for i in range(N):\\n        x, y = X[i], Y[i]\\n        ix = sort_x.index(x)\\n        iy = sort_y.index(y)\\n        total_sum[iy + 1][ix + 1] += 1\\n\\n    for y in range(ny + 1):\\n        for x in range(nx):\\n            total_sum[y][x + 1] += total_sum[y][x]\\n\\n    for x in range(nx + 1):\\n        for y in range(ny):\\n            total_sum[y + 1][x] += total_sum[y][x]\\n\\n    def calc_area(u, d, l, r):\\n        return total_sum[d][r] - total_sum[u][r] - total_sum[d][l] + total_sum[u][l]\\n\\n    ans = 10**19\\n    for y1 in range(ny + 1):\\n        for y2 in range(y1 + 2, ny + 1):\\n            for x1 in range(nx + 1):\\n                for x2 in range(x1 + 2, nx + 1):\\n                    if calc_area(y1, y2, x1, x2) >= K:\\n                        area = (sort_x[x2 - 1] - sort_x[x1]) * (sort_y[y2 - 1] - sort_y[y1])\\n                        ans = min(ans, area)\\n\\n    print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "540", "substitutes": {"read": ["open", "find", "hold", "load", " readable", "select", "ld", "write", "run", "get", "readable", " write", "give", "iter", "chain", "walk", "map", "align", "od", "input", "reads", " connect", "sync", "scan", " find", "ind", "ead", " Read", "parse", "feed", "int", "ad", "stream", " READ", "eng", "end", "Read", "print", "ed", "READ", "skip", "size", "then", "pipe", "reader", "reading", "roll", "play", "data", "seek", " reader", "text", " reads", "rd"], "readline": ["readstream", "testlin", "READstring", "readln", "checkstring", "Readspace", "playLine", "checklines", "READlines", "playstream", " readln", "Readstring", " readfile", "readerstring", "getline", "readerspace", "Readlines", "readerlines", "getstring", " readstream", "READLine", "testLine", "readfile", "testline", "readLine", "Readl", "Readln", " readLine", "readerln", "READline", "readerl", "readerstream", "readerLine", "checkfile", "Readlin", "teststring", "readerlin", "readerline", "readspace", " readspace", " readlin", " readl", "readstring", "readlin", "readl", "Readline", "playline", "getfile", "checkline", " readstring", "ReadLine", "playln", "getlines"], "readlines": ["scancodes", "loadrows", "readerlines", "Readlines", "runcodes", " readcodes", "readines", "readercodes", "runelines", "scanlines", "Readcodes", "Readelines", "loadlines", "runlines", "Readines", "readelines", " readelines", "loadelines", "readerines", " readrows", "runines", "scanelines", "readcodes", "readrows", "scanrows", "readerelines", "loadcodes"], "in_n": [" in_sn", "in_sn", "inLnl", " in2sn", "in2n", "in2nl", "in2sn", " in2nn", " in2n", "inLsn", "inLnn", "inLn", " in2nl", "in2nn"], "in_nn": [" in2ann", "in_cn", "in2n", "in_na", " in_na", "in_ann", " in_yn", " in2nn", " in2n", "in_yn", "in2na", "in2ann", " in2na", " in_ann", " in_cn", "in2nn"], "in_s": ["in__s", "in__ss", "in2s", "in2n", " in2r", "in2r", " in2n", "in_ss", "in__n", " in2s", "in__r", " in_ss", " in2ss", " in_r", "in_r", "in2ss"], "in_nl": ["init_nl", "init67np", "init_np", "init67rl", " in_ln", "in_l", "in_NL", "in67nl", "in_ln", "init_NL", "in_np", "init67nl", "init67NL", " in_l", "init_rl", "in67np", "in_rl", "in67rl", "in67NL"], "in_nl2": ["in_NL1", "in_nn1", "in_nnall", "in_NL2", "in_nlall", "in_nl3", "in_nl1", "in_nn3", "in_NL3", "in_nn2", "in_ln2", "in_ln1", "in_lnall", "in_ln3", "in_NLall"], "_": ["T", " the", "on", "name", "__", "w", "z", "ml", "ox", "let", "val", "____", "t", "time", "pt", "non", "an", "all", "un", "\u00e7", "___", "j", "ay"], "in_map": ["in_m", "in_mp", "inside_ap", "inside_mp", " in_m", " in_open", "in_ap", "in_apper", "inside_apper", "in_open", " in_ap", "inside_map"], "s": ["a", "sym", "n", "sb", "sh", "ys", "str", "js", "p", "ains", "short", "sf", "fs", "c", "ts", "z", "south", "ns", "m", "set", "src", "rs", "ses", "ins", "h", "ms", "b", "sp", "t", "S", "ss", "si", "sq", "gs", "ws", "string", "sm", "sa", "ashes", "sv", "xs", "sts", "sd", "j", "os", "es", "ds", "ps"], "in_map2": ["in_map1", "in_mask2", "in_ap2", "in_mask1", "in_maps2", "in_ap1", "in_mask6", "in___maps2", "in___map1", "in___maps1", "in_maps6", "in___maps6", "in___map2", "in_maps1", "in_ap6", "in_map6", "in___map6"], "in_all": ["in__list", "in__total", "in__all", "in_total", " in_total", " in_list", "in__full", "in_full", "in_list", " in_full"], "N": ["SN", "CNN", "n", "M", "NS", "T", "GN", "NI", "NW", "Ns", "R", "I", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "V", "No", "S", "J", "ND", "Num", "P", "D", "NB", "MN", "Ni", "TN", "NY", "C"], "K": ["ki", "M", "T", "KY", "IJ", "KR", "Max", "NI", "R", "I", "NP", "O", "V", "NK", "B", "J", "Q", "SK", "G", "P", "E", "D", "NB", "k", "Ni", "F", "KI", "Z", "C"], "X": ["IX", "CH", "T", "TX", "Right", "ACE", "I", "EX", "R", "AL", "MX", "CE", "YS", "UX", "OX", "ICE", "WH", "FE", "GE", "H", "ZX", "XY", "PUT", "TH", "CT", "Cross", "Z", "XP", "S", "XM", "DX", "ML", "P", "A", "ENT", "FX", "XX", "XT", "XXX", "XL", "AC", "Array", "Ex"], "Y": ["Other", "CH", "T", "IJ", "ES", "YP", "IP", "EY", "My", "I", "Py", "SO", "TY", "Content", "YS", "MY", "IE", "OS", "Year", "ANY", "XY", "V", "TH", "TN", "NOTE", "AS", "OR", "YA", "S", "OU", "ONE", "B", "J", "ORY", "JSON", "Windows", "US", "AY", "YN", "OT", "YY", "IES", "FY", "MI", "TO", "SY", "Z", "NY", "BY"], "i": ["mi", "ki", "n", "xi", "ia", "ci", "gi", "p", "di", "ai", "I", "iter", "c", "bi", "yi", "ic", "o", "ip", "iri", "ind", "ri", "si", "li", "ii", "int", "ti", "im", "it", "ini", "zi", "phi", "pi", "il", "k", "j", "ij", "ik", "index", "iu", "hi"], "x": ["n", "xe", "p", "left", "c", "z", "el", "yl", "exp", "e", "v", "fx", "dx", "lex", "k", "xp", "zx", "content", "wx", "ty", "on", "xxxx", "xt", "o", "tx", "key", "ey", "xy", "inx", "ay", "ci", "ux", "xa", "ox", "ly", "hex", "xml", "xxx", "h", "xd", "xs", "mx", "com", "index", "ick", "xi", "ex", "xes", "xc", "cy", "rx", "ext", "w", "ice", "act", "ax", "t", "one", "xx", "yx", "j", "px", "xf", "ry"], "y": ["sy", "n", "any", "ty", "ys", "yd", "yer", "ym", "g", "wy", "cy", "w", "oy", "sys", "yo", "ox", "z", "ly", "ies", "c", "my", "yi", "vy", "hey", "ye", "py", "yr", "sky", "o", "h", "ery", "hy", "axy", "dy", "b", "t", "yl", "icy", "zy", "uy", "yn", "ey", "gy", "xy", "ch", "fy", "yy", "yt", "year", "q", "hot", "j", "ya", "ay", "ry"], "sort_x": ["Sort_X", "sort_X", " sort_X", "sortPxt", " sort_px", "sort_xy", "Sort_x", "Sort_ex", "sortingx", "sortPex", "sort_xt", "ort_xt", "sort_fx", "sort_ex", "sortingX", "sortingpx", "ort_ex", "ort_x", " sort_fx", "sort_px", "Sort_xy", "sortPX", "sortPx", "sortingfx", "ort_X"], "sort_y": ["sort1yt", "ort_yl", "sort___y", "sort_ya", "pose_Y", "sort_yl", "sort_yt", "sort1yl", "sort___Y", "export___y", "sort_xy", "sort___ys", "export_yl", "sort___yl", "sort_ys", "sort_ny", "pose_ya", "export___Y", "ort_y", "export_Y", "ort_yt", "pose_ys", "sort___xy", "sort___ya", "pose_y", "export_xy", "sort1y", "export_y", "sort_Y", "ort_ny", "export___xy", "sort1ny", "export___yl"], "nx": ["ncx", "Nz", "Nx", "dnix", "nX", " nix", "ncX", "mny", "ncst", "Nst", "ly", "mnX", "nst", "dnX", "nbz", "dnz", "mnx", "dnst", "dnx", "lix", "dy", " nX", "lx", "nbv", "onix", "Nix", "nv", "nbix", "onv", "nz", "onx", "dex", "dx", "onz", "nbx", "nex", "nix", "ncz", "lex", "NX", "mnix", "Ny", " nex", "dix", "dnv"], "ny": ["sy", "nr", "net", "n", "ty", "ni", "ja", "nt", "wn", "yer", "ady", "ne", "dn", "wy", "cy", "nets", "sn", "ky", "sys", "yz", "nie", "ns", "ies", "my", "vy", "py", "sky", "axy", "nb", "si", "zy", "mn", "nit", "ot", "nah", "na", "ony", "nm", "nan", "nu", "nn", "yt", "yy", "np", "nex", "ng", "psy", "NY"], "total_sum": ["total67num", "total____sum", "total_all", "totalThecmp", "server_dot", "template_fail", "total\u064eum", "total1sum", "total_state", "total_sim", "totalThesum", "total7cmp", "total\u064eunit", "total1num", "total\u064esum", "total\u064enum", " Totallytail", " total_unit", "totalenall", "total67list", " Total_um", "totallytail", "totalenSum", "total____master", "totalensum", "complete_med", "total10dot", "total10list", "total1Sum", "total10num", "total_unit", "total_master", " total_su", "total10sum", "total64sum", "template_sum", "otaly", "total5cmp", "total7dot", " Totallymaster", " Total_master", "serverThecmp", "complete_sum", "total64all", "total_med", "total_list", "total_tail", "total_su", "total67sum", "serverThedot", "total7fail", "total_Sum", "complete_sim", "serverThefail", "total_sa", " totaly", "total5fail", "total_dot", "totalThedot", "totallysum", "total1um", " total_sa", "total67dot", "totalThefail", " Total_tail", "total____tail", "totallymaster", " total_Sum", "total5sum", " Totallysum", "server_fail", " total_all", "complete_state", "total1sa", "totaly", "total_um", " total_um", "total_fail", "total64Sum", "server_cmp", "server_sum", "total_total", "total5dot", "total7sum", "serverThesum", "template_total", " total_list", "reportedy", "total64su", "totallyum", "template_Sum", " total_dot", "total_num", "total_cmp", " total_num", " Total_sum", " Totallyum", "totalensu", "total____um"], "ix": ["wx", "xi", "IX", "ex", "ty", "ia", "ie", "ci", "ux", "ai", "rx", "ox", "ies", "xt", "ice", "ic", "tx", "ax", "yl", " xx", "ey", "xy", "xs", "mx", "zi", "dx", "inx", "xx", "yx", "index", "px", "ij", "ik", "ius", "ay", "ry", "ick"], "iy": ["xi", "ty", "ia", "ys", "phy", "rey", "idy", "cy", "lly", "oy", "ky", "ies", "iry", "ico", "yi", "vy", "yr", "ery", "hy", "axy", "dy", "icy", "zy", "uy", "ii", "tile", "ey", "gy", "ity", "ish", "yy", "iny", "yx", "ij", "ay", "ry"], "u": ["ut", "n", "um", "util", "ul", "ue", "g", "uid", "us", "uv", "c", "z", "o", "h", "uc", "ud", "tu", "eu", "ru", "up", "un", "fu", "ou", "ur", "uf", "ui", "nu", "au", "cu", "user", "du", "uu", "U"], "d": ["fd", "n", "p", "db", "ul", "g", "di", "dn", "w", "c", "m", "z", "o", "h", "dt", "f", "b", "t", "dc", "da", "ud", "dr", "v", "de", "ad", "dp", "D", "dd", "du", "dict", "ds"], "l": ["lc", "n", "ln", "p", "g", "lb", "L", "w", "c", "m", "ly", "dl", "el", "o", "nl", "sl", "h", "ls", "b", "t", "rl", "lo", "lp", "li", "v", "lang", "lr", "ll", "le", "pl", "j"], "r": ["a", "n", "sr", "rr", "ro", "p", "g", "R", "rc", "re", "w", "c", "m", "z", "rs", "rb", "o", "h", "b", "t", "ri", "rl", "dr", "v", "e", "ur", "rt", "lr", "q", "ar", "j", "er", "rd"]}}
{"code": "T, X = map(int, input().split())\\nr = T/X\\nprint(r)\\n", "target": "317", "substitutes": {"T": ["WT", "M", "N", "TR", "TX", "R", "I", "L", "TS", "VT", "H", "V", "Z", "t", "S", "B", "J", "Q", "G", "P", "A", "E", "TT", "D", "TM", "Y", "K", "F", "TN", "C"], "X": ["M", "N", "x", "IX", "Int", "TX", "R", "I", "L", "MX", "UX", "H", "W", "XY", "V", "S", "XP", "DX", "B", "J", "Q", "G", "P", "A", "E", "XX", "XT", "D", "Y", "XL", "U", "K", "F", "Z", "C"], "r": ["n", "sr", "x", "mr", "err", "render", "d", "p", "g", "R", "rc", "i", "re", "w", "c", "m", "rs", "rb", "res", "h", "result", "vr", "f", "b", "right", "fr", "t", "br", "dr", "v", "rt", "q", "l", "k", "range", "attr", "cr", "rd"]}}
{"code": "from collections import Counter\\n\\nN = int(input())\\nS = [input() for _ in range(N)]\\n\\ncounter = Counter(S)\\n\\nfor k in [\"AC\", \"WA\", \"TLE\", \"RE\"]:\\n    print(k, \"x\", counter[k])", "target": "531", "substitutes": {"N": ["SN", "n", "M", "NS", "T", "NC", "NI", "Ns", "X", "I", "R", "NA", "L", "NM", "NN", "NP", "CN", "NR", "NT", "NH", "O", "V", "NUM", "B", "Q", "P", "NPR", "D", "NB", "Size", "Ni", "K", "TN", "FN", "C"], "S": ["SN", "M", "NRS", "NS", "T", "BS", "SS", "SB", "SER", "R", "X", "L", "I", "Si", "SI", "CS", "SM", "W", "V", "SAM", "B", "Q", "G", "P", "SE", "A", "s", "SP", "SU", "D", "DS", "Y", "SA", "SR", "C"], "_": ["ex", " the", "__", " all", " long", "val", " l", " x", " time", "int", "all", "un", " __"], "counter": ["con", "n", "ter", "gc", "cker", "table", "manager", "ounter", "clock", "system", "value", "recorded", "zero", "c", "current", "total", "Counter", "second", "finder", "result", "session", "ctr", "count", "processor", "frequency", "memory", "ounters", "cache", "controller", "console", "tr", "handler", "collection", "monitor", "number", "cm", "TER", "entry", "timer", "walker"], "k": ["ck", "km", "ki", "ek", "uk", "x", "kr", "kn", "kh", "kl", "ijk", "kin", " ka", "p", " j", "kar", "ak", "ke", " ko", "c", "m", "kw", "ko", "yk", " q", "tk", "kok", " kg", " kan", " mk", "key", "kj", " kind", " sk", "ikk", "ku", "q", "kt", "u", "kk", "sk", " km", "K", "ka", "j", "ik", "kan", "unk", " ak"]}}
{"code": "l, r, d = map(int, input().split())\\nans = r//d - l//d\\nif l%d == 0 and r%d == 0:\\n    ans += 1\\nprint(ans)", "target": "156", "substitutes": {"l": ["a", "lc", "n", "x", "lf", "ln", "ld", "p", "lt", "g", "lb", "i", "L", "w", "c", "ml", "m", "z", "dl", "o", "nl", "sl", "h", "ls", "f", "b", "t", " L", "rl", "lp", "li", "v", "e", "s", "lr", "ll", "le", "j", "y"], "r": ["nr", "n", "sr", "mr", "rr", "ro", "p", "g", "R", "rc", "i", "re", "rx", "c", "m", "rs", "rb", "o", "res", "h", "f", "b", "t", "ri", "rl", "dr", "v", "e", "rt", "lr", "q", "ar", "u", "j", "er", "y", "rd"], "d": ["fd", "a", "n", "x", "dos", "p", "dm", "dir", "g", "di", "i", "w", "c", "m", "z", "diff", "dev", "o", "h", "dt", "done", "f", "b", "days", "num", "t", "dat", "part", "sp", "df", "da", "dr", "v", "e", "de", "s", "dp", "dx", "D", "do", "div", "dim", "q", "dd", "sd", "u", "du", "j", "y", "k", "ds", "rd"], "ans": ["ars", "tan", "ANS", "ants", "ats", " means", "outs", "acs", "aus", "ros", "aned", "vals", "ns", "ann", "rans", "rs", "mas", "anas", "ums", "offs", "res", "ks", "ras", "ins", "ons", "ms", "amps", "ls", "pan", "ents", "ids", "ens", "cas", "cons", "uns", "can", "an", "posts", "iann", "aps", "des", "s", "nan", "ran", "ands", "nas", "vs", "ads", "cs", "arts", "os", "es", "lan", "ds"]}}
{"code": "\\n\\nimport sys\\nfrom collections import deque, defaultdict\\nimport copy\\nimport bisect\\n#sys.setrecursionlimit(10 ** 9)\\nimport math\\nimport heapq\\nfrom itertools import combinations, permutations\\n\\nimport sys\\ndef input():\\n\treturn sys.stdin.readline().strip()\\n\\n\\nN, M = list(map(int, input().split()))\\n\\ngraph = [[] for _ in range(3*N)]\\n\\nfor i in range(M):\\n\tu, v = list(map(int, input().split()))\\n\tu -= 1\\n\tv -= 1\\n\tgraph[u%(3*N)].append((v + N)%(3*N))\\n\tgraph[(u + N) % (3 * N)].append((v+2*N)%(3*N))\\n\tgraph[(u + 2*N) % (3 * N)].append(v % (3 * N))\\nS, T = list(map(int, input().split()))\\nS -= 1\\nT -= 1\\n\\ndist = [1000000000000000000 for _ in range(3*N)]\\nque = deque([])\\nque.append(S)\\ndist[S] = 0\\nwhile len(que) > 0:\\n\tnode = que.popleft()\\n\tfor edge in graph[node]:\\n\t\tif dist[edge] > dist[node] + 1:\\n\t\t\tdist[edge] = dist[node] + 1\\n\t\t\tque.append(edge)\\n\\nif dist[T] < 100000000000000:\\n\tprint(dist[T]//3)\\nelse:\\n\tprint(-1)", "target": "795", "substitutes": {}}
{"code": "N, A, B = map(int, input().split())\\nS = str(input())\\n\\nAB = A + B\\n\\ncount_all = 0\\ncount_abroad = 0\\nfor i in range(N):\\n    if S[i] == \"a\" and count_all < AB:\\n        count_all += 1\\n        print(\"Yes\")\\n\\n    elif S[i] == \"b\" and count_abroad < B and count_all <AB:\\n        count_all += 1\\n        count_abroad += 1\\n        print(\"Yes\")\\n\\n    else:\\n        print(\"No\")", "target": "724", "substitutes": {"N": ["SN", "M", "n", "NS", "T", "GN", "NI", "Ns", "R", "I", "NA", "L", "NN", "NP", "NR", "NT", "H", "NF", "O", "V", "NUM", "J", "G", "P", "Num", "E", "D", "NB", "Ni", "K", "F", "Z", "C"], "A": ["a", "GA", "M", "T", "All", "An", "AH", "AT", "R", "I", "ACC", "NA", "AD", "AL", "ABC", "H", "AA", "As", "V", "AR", "AS", "G", "P", "E", "AF", "D", "AM", "SA", "AC", "K", "BA", "AN", "C"], "B": ["M", "BI", "CB", "T", "RB", "BS", "SB", "R", "I", "L", "IB", "BW", "AA", "V", "BT", "b", "BC", "BE", "Bar", "J", "Q", "GB", "G", "WB", "BR", "P", "BB", "TB", "Bern", "FB", "D", "NB", "Y", "DB", "U", "F", "BA", "Z", "C"], "S": ["M", "NS", "T", "SF", "SH", "Str", "BS", "SS", "SL", "SB", "R", "I", "SER", "L", "JS", "PS", "Si", "RS", "SO", "SI", "TS", "CS", "H", "GS", "V", "IS", "Sample", "INS", "States", "Q", "G", "P", "SE", "E", "s", "IES", "SP", "SU", "D", "DS", "SA", "U", "WS", "LS", "String", "C"], "AB": ["LB", "BI", "CB", "ab", "BL", "BS", "VB", "OB", "AH", "ACH", "IA", "SB", "ACC", "IB", "ABC", "AA", "Ab", "AI", "BT", "BP", "BC", "ABLE", "GB", "WB", "PB", "BR", "BB", "BM", "TB", "FB", "AF", "EB", "LAB", "DB", "SA", "BA", "Tab", "UB"], "count_all": ["result_all", " count_any", "result_ALL", "count2full", "counttimefull", "count_only", "result_full", "count_main", "result_al", "resulttimefull", " count2all", "count2All", " count_ALL", "resulttimeall", "count_any", "count_full", " count_only", " count2full", " count_All", " count_full", " count2only", "count_All", "count_ALL", "counttimeall", "count2all", "count_always", "resulttimeALL", "counttimeal", "count_al", "counttimeALL", " count_main", " count2All", "resulttimeal", " count_always", "count2only"], "count_abroad": ["count_avro", "count_avbroad", "count_obready", "count_avrox", "count_absaro", "count_abready", "count_camrox", "count2absrox", "count2abrox", "count_appbroad", "count2abbroad", "count_camro", "count_avroad", "count_absroad", "count_obro", "count_abrox", "count_abbroad", "count_obrox", "count_abaro", "count_agro", "count_abro", "count2abro", "count_approad", "count_obost", "count_agroad", "count2absro", "count_approx", "count_camroad", "count2abroad", "count2absroad", "count_obaro", "count_obroad", "count_agost", "count_absost", "count_abost", "count_absrox", "count_agready", "count2absbroad", "count_absro", "count_camaro", "count_appro", "count_absready", "count_absbroad"], "i": ["a", "mi", "n", "xi", "x", "ia", "uri", "me", "ci", "gi", "p", "di", "I", "r", "us", "m", "batch", "bi", "yi", "ic", "ix", "ind", "b", "multi", "ri", "si", "li", "ii", "ji", "v", "ori", "ti", "list", "s", "it", "zi", "ini", "ui", "\u0438", "q", "pi", "id", "j", "index", "y", "k", "ij", "iri"]}}
{"code": "import sys\\ninput = lambda : sys.stdin.readline().rstrip()\\nsys.setrecursionlimit(max(1000, 10**9))\\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\\n\\n\\nh,w,d = list(map(int, input().split()))\\na = [None]*h\\nn = h*w\\ndd = [None]*(n)\\nfor i in range(h):\\n    a[i] = list(map(int, input().split()))\\n    for j,num in enumerate(a[i]):\\n        dd[num-1] = (i,j)\\nvals = [[] for _ in range(d)]\\nfor i in range(d):\\n    l = []\\n    prev = i\\n    s = 0\\n    for j in range(i, n, d):\\n        v = abs(dd[j][0]-dd[prev][0]) + abs(dd[j][1]-dd[prev][1])\\n        s += v\\n        l.append(s)\\n        prev = j\\n    vals[i] = l\\nq = int(input())\\nans = [None]*q\\nfor i in range(q):\\n    ll,rr = map(lambda x: int(x)-1, input().split())\\n    ans[i] = vals[rr%d][rr//d] - vals[ll%d][ll//d]\\nwrite(\"\\n\".join(map(str, ans)))", "target": "254", "substitutes": {"input": ["history", "next", "arg", "json", "header", "call", "load", "pattern", "str", "select", "context", "expression", "insert", "table", "point", "init", "get", "connect", "iter", "inc", "raw", "image", "align", "ref", "focus", "read", "prefix", "xml", "format", "enum", "step", "output", "ip", "cmd", "config", "empty", "hidden", "form", "alpha", "parse", "feed", "url", "out", "Input", "int", "list", "cin", "update", "sleep", "stream", "string", "interface", "exec", "it", "csv", "print", " Input", "proc", "command", "sample", "edit", "join", "sequence", "text", "source", "request"], "write": ["find", "printf", "flush", "render", "put", "run", "file", "connect", "we", "replace", "store", "scale", "append", "set", "buffer", "read", "wr", "format", "save", "output", "sync", "println", "send", "log", "writing", "close", "writ", "wrote", "dump", "written", "out", "fill", "switch", "update", "execute", "rite", "print", "say", "lock", "pipe", "line", "Write", "copy", "wire", "echo", "text", "writer"], "h": ["history", "ht", "th", "x", "sh", "p", "en", "g", "hz", "wh", "hal", "r", "hs", "c", "m", "z", "ih", "o", "H", "ah", "bh", "f", "hl", "t", "oh", "his", "hw", "ha", "ph", "he", "high", "hr", "hd", "ho", "hh", "k", "y", "hi", "hm"], "w": ["wx", "sw", "x", "wn", "wh", "we", "wt", "r", "weight", "m", "z", "wb", "wr", "window", "iw", "wat", "rw", "wi", "W", "wd", "wo", "ew", "wl", "t", "win", "wa", "wp", "width", "ws", "hw", "nw", "wk", "aw", "words", "k", "y"], "d": ["fd", "dL", "x", "mod", "dm", "p", "db", "dir", "g", "di", "dn", "day", "td", "dh", "r", "c", "m", "z", "dl", "dev", "o", "default", "dt", "done", "f", "b", "days", "df", "t", "dat", "dc", "da", "depth", "dr", "pd", "e", "de", "dp", "dx", "D", "dq", "do", "dim", "sd", "dict", "ds"], "a": ["sta", "ae", "ac", "ab", "ta", "p", "va", "ai", "ma", "m", "ns", "ata", "eas", "ga", "o", "ea", "aaa", "b", "t", "alpha", "da", "na", "an", "ad", "A", "al", "at", "sa", "ao", "app", "oa", "aos", "aa", "am", "ar", "y", "ba"], "n": ["nr", "N", "max", "conn", "nt", "wn", "gn", "p", "g", "dn", "sn", "c", "r", "m", "z", "ns", "o", "nl", "b", "t", "len", "nb", "wa", "mn", "out", "na", "an", "nc", "nu", "nw", "nn", " N", "u", "y", "k"], "dd": ["fd", "vd", "dds", " du", "db", "ld", "mm", "cd", "dm", "eds", "dn", "td", "gd", " da", "bd", "dl", "od", "edd", "mind", "wd", "dt", "df", "xd", "dat", "dose", "cond", "da", "density", "bb", "ud", "pd", "DD", " sd", "des", "pdf", "tt", "dp", "dx", "hd", " ad", "xx", "sd", "dj", "ads", "md", "dict", "ds", "idd", "eddy", "pp", "nd", "defined"], "i": ["mi", "xi", "x", "ia", "ie", "ci", "gi", "p", "di", "g", "ai", "I", "c", "m", "z", "bi", "iti", "ic", "o", "ix", "ip", "iri", "ind", "f", "b", "t", "io", "si", "li", "ii", "ji", "e", "int", "ti", "im", "it", "zi", "ini", "pi", "u", "id", "y", "k", "ij", "ik", "index", "iu", "hi"], "j": ["next", "json", "uj", "ja", "ie", "err", "js", "p", "aj", "name", "g", "jp", "job", "oj", "jc", "z", "m", "jj", "note", "ju", "o", "pr", "ind", "jl", "f", "b", "br", "fr", "rel", "J", "ion", "bj", "pos", "ji", "kj", "li", "obj", "adj", "it", "jump", "new", "dj", "u", "item", "y", "k", "er", "ij"], "num": ["den", "nr", "alph", "max", "con", "th", "um", "nom", "en", "day", "m", "info", "note", "total", "tim", "nam", "dev", "ind", "NUM", "nb", "cum", "na", "Num", "cal", "nm", "un", "node", "nu", "dim", "number", "mon", "np", "mem", "id", "k", "index", "pn", "draw", "sum"], "vals": ["keys", "els", "vd", "dds", "ints", "js", "actions", "dies", "eds", "outs", "VAL", "ows", "eval", "fs", "arr", "lines", "ts", "ns", "Values", "details", "rs", "ins", "ords", "values", "maps", "val", "ves", "ls", "elt", "flags", "abs", "grades", "lists", "Val", "als", "its", "results", "gs", "gets", "xs", "alls", "fits", "vs", "rates", "ads", "vt", "data", "ds", "ps", "bs", "olds", "points"], "_": ["x", "ct", "ate", "ation", "ix", "let", "val", "all", "ay", "ow"], "l": ["dL", "lc", "kl", "ql", "ln", "p", "ld", "lt", "ul", "g", "lb", "L", "r", "m", "ml", "dl", "el", "o", "nl", "sl", "ls", "jl", "b", "vl", "t", "hl", "yl", "len", "lis", "rl", "lo", "lp", "li", "list", "lv", "ell", "lr", "ol", "le", "il", "isl"], "prev": ["history", "next", "reverse", "master", "before", "Prev", "p", "mp", "vp", "jp", "rev", "iter", "last", "zero", "pre", "current", " Prev", "ref", "winner", "rem", "par", "old", "prime", "prefix", "ren", "ind", "sp", "pri", "rel", "ap", "obj", "adj", "ptr", "orig", "original", "lv", "Previous", "jump", "first", "pres", "req", "vious", "tmp", "var", "op", "holder", "ij", "upper", "temp", "pred", "init", "neg"], "s": ["sym", "sb", "su", "ats", "js", "p", "eds", "g", "r", "ts", "m", "z", "ns", "rs", "ins", "ms", "ves", "ls", "t", "S", "ss", "its", "gs", "sq", "ws", "xs", "sv", "vs", "sd", "cs", "es", "stats", "ds", "ps"], "v": ["qv", "max", "p", "vi", "g", "tv", "va", "value", "uv", "c", "vector", "m", "z", "dev", "o", "values", "val", "V", "cv", "f", "b", "t", "ver", "nv", "e", "lv", "vm", "sv", "conv", "vs", "u", "sav", "vt"], "q": ["ck", "x", "ql", "ld", "p", "ue", "g", "qu", "iq", "qt", "r", "c", "ox", "z", "pe", "ig", "m", "qi", "el", "ic", "o", "nl", "ix", "ms", "vc", "t", "quit", "pt", "Q", "ill", "sq", "qq", "qa", "ch", "qual", "ell", "it", "dq", "u", "k", "y", "qs", "ry"], "ans": ["arms", "ars", "ANS", "ants", "ats", "ians", "eds", "aus", " Ans", "ns", "ann", "rans", "rs", "ks", "leans", "offs", "ins", "ras", "ons", "ms", "angs", "ls", "ents", "ens", "uns", "an", "posts", "gs", "rors", "anks", "aps", "ups", "ays", "xs", "ams", "aos", "vs", "aints", "ads", "arts", "es", "os", "lan", "ds"], "ll": ["ck", "lc", "lu", "lf", "nt", "tl", "err", "kl", "gn", "ld", "ln", "lb", "r", "ml", "dl", "nl", "ls", "fr", "vc", "wl", "hl", "yl", "rl", "rol", "dr", "fl", "ill", "lv", "ell", "rt", "lr", "bl", "le", "LL", "coll", "roll", "rn", "lin", "oll", "lla"], "rr": ["rid", "mr", "sr", "rio", "kr", "err", "ro", "rg", "vd", "ir", "ld", "ror", "rc", "rx", "re", "r", "ox", "rh", "rs", "rb", "rm", "uff", "rer", "pr", "vr", "rar", "fr", "rl", "bb", "rol", "dr", "rin", "rf", "gr", "ur", "rt", "lr", "RR", "ar", "rn", "ack", "adr", "rd"]}}
{"code": "N,x=map(int,input().split())\\nA=list(map(int,input().split()))\\nA.sort()\\n\\nK=0\\nfor i in range(N-1):\\n    if x>=A[i]:\\n        x-=A[i]\\n        K+=1\\n\\nif x==A[-1]:\\n    K+=1\\n\\nprint(K)\\n", "target": "100", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "T", "Ne", "GN", "NI", "Ns", "X", "I", "R", "L", "NA", "NN", "NR", "NT", "NH", "W", "V", "TN", "No", "NO", "NE", "B", "J", "Q", "ND", "Num", "P", "D", "NB", "Y", "Len", "Ni", "F", "Z", "C"], "x": ["a", "wx", "n", "xi", "ex", "xe", "p", "xes", "ux", "g", "xc", "ct", "xa", "X", "rx", "w", "c", "ox", "m", "z", " X", "xt", "input", "xml", "hex", "ix", "tx", "ax", "f", "xd", "t", "v", "e", "xy", "xs", "co", "inx", "q", "xx", "l", "lat", "u", "k", "y", "px", "rax", "xp", "xf", "Xi"], "A": ["a", "GA", "Answer", "All", "An", "IA", "Ar", "Alpha", "Abs", "AU", "AT", "X", "I", "mA", "NA", "One", "AL", "And", "What", "AB", "AE", "H", "AA", "LA", "As", "WA", "C", "AS", "S", "EA", "B", "J", "This", "P", "HA", "CA", "MA", "You", "At", "JA", "AF", "D", "TA", "AM", "Y", "Alice", "Java", "SA", "AC", "The", "F", "Array", "BA", "He", "ACT", "AP"], "K": ["Total", "Ak", "M", "Key", "KN", "T", "Check", "Rank", "KR", "Max", "GO", "Alpha", "Power", "Log", "X", "KK", "ANK", "Set", "H", "FK", "W", "Used", "V", "KS", "TH", "PK", "Sk", "Kent", "S", "B", "J", "Q", "SK", "G", "P", "Ka", "Index", "Mask", "VK", "D", "Keep", "Y", "OK", "Count", "UK", "k", "The", "Z", "He", "KA", "C"], "i": ["a", "mi", "ki", "n", "xi", "uri", "me", "ci", "gi", "di", "ai", "I", "bi", "qi", "yi", "ic", "ski", "ix", "ip", "ind", "f", "ri", "multi", "io", "si", "li", "ii", "ji", "v", "ori", "ti", "s", "it", "ini", "zi", "ui", "phi", "pi", "id", "k", "y", "index", "j", "ij"]}}
{"code": "def solve(n, m, c):\\n    dp = [0] + [float(\"inf\")] * n\\n    for i in range(1, n + 1):\\n        added_val = float(\"inf\")\\n        for coin in c:\\n            added_val = min(added_val, dp[i - coin]) if 0 <= i - coin else added_val\\n        dp[i] = min(dp[i], added_val + 1)\\n    print(dp[n])\\n\\nif __name__ == \"__main__\":\\n    n, m = map(int, input().split())\\n    c = list(map(int, input().split()))\\n    solve(n, m, c)\\n", "target": "286", "substitutes": {"n": ["N", "x", "net", "nt", "ni", "wn", "gn", "ln", "p", "en", "d", "on", "name", "ne", "cn", "g", "dn", "long", "sn", "w", "r", "ns", "o", "nl", "h", "b", "num", "fn", "t", "nb", "no", "mn", "out", "na", "an", "v", "int", "nc", "nm", "s", "nan", "nu", "size", "nn", "number", "l", "np", "pi", "id", "network", "k", "index", "j", "rn"], "m": ["tm", "mi", "km", "M", "mr", "um", "dm", "d", "p", "mm", "mo", "mu", "r", "mut", "em", "man", "bm", "min", "o", "rm", "h", "ms", "gm", "b", "num", "t", "mc", "arm", "mn", "v", "e", "an", "int", "nm", "sm", "vm", "s", "im", "mx", "q", "mun", "l", "mon", "cm"], "c": ["ec", "ce", "lc", "con", "x", "coins", "ci", "d", "p", "pc", "g", "xc", "ct", "rc", "r", "tc", "w", "z", "fc", "ic", "h", "f", "b", "bc", "t", "mc", "dc", "anc", "comments", "v", "e", "nc", "cos", "cp", "ch", "s", "csv", "cc", "com", "co", "toc", "cu", "l", "etc", "u", "cs", "oc", "k", "cm", "cr", "C", "ac"], "dp": ["pkg", "pm", "dos", "dm", "d", "p", "db", "cd", "mp", "vp", "dial", "jp", "td", "deep", "dh", "password", "dl", "pb", "gp", "wd", "tp", "decl", "dt", "df", "dc", "dep", "DP", "wp", "lp", "pd", "dr", "tap", "xy", "cp", "deb", "eps", "bps", "csv", "dq", "dd", "np", "px", "pp", "ds", "ps"], "i": ["mi", "ki", "xi", "x", "ci", "gi", "p", "g", "di", "ai", "I", "bi", "qi", "ic", "ix", "o", "ip", "iri", "ind", "f", "b", "num", "t", "io", "si", "li", "ii", "v", "e", "int", "ti", "im", "it", "s", "ini", "zi", "\u0438", "l", "pi", "u", "y", "k", "j", "index", "ij", "iu"], "added_val": ["add_Val", "added___value", "Added_loc", "added55fac", "added_fac", "added67val", "added_obj", "Added_value", "add_val", "added_loc", "added67vals", "added_vals", "Added_val", "Added_ref", "added_1", "added_Val", "add_fac", "added_value", "added67elt", "added_col", "added_elt", "addedvalVal", "added55val", "addedval1", "added___val", "addedvalval", "added___elt", "add_def", "added_ref", "Added_obj", "added___obj", "added55Val", "added67ref", "added67value", "added67loc", "added67obj", " added_Val", "Added_elt", "added_def", "Added_vals", " added_1", "add_col"], "coin": ["fine", "century", "x", "coins", "aco", "money", "currency", "ci", "p", "mu", "confirmed", "cycle", "clock", "Bitcoin", "cy", "bitcoin", "tc", "fund", "ox", "ico", "circ", "unit", "mate", "oin", "ic", "uno", "irin", "b", " coins", "t", "mc", " Coin", "fen", "bit", "li", "margin", "conf", "cin", "byte", "coat", "inn", "co", "wei", "fee", "_", "mon", "year", " bitcoin", "cash", "Coin", "buy", "chain"]}}
{"code": "N, L = map(int, input().split())\\ns = [str(input()) for i in range(N)]\\ns.sort()\\nS=\"\"\\nfor i in range(N):\\n    S+=s[i]\\nprint(S)", "target": "732", "substitutes": {"N": ["CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "Na", "Ns", "X", "I", "R", "NA", "NM", "NN", "NR", "NT", "Length", "H", "O", "V", "No", "B", "J", "Q", "G", "P", "A", "D", "NB", "Y", "Len", "Ni", "U", "K", "F", "Z", "C"], "L": ["dL", "M", "NL", "T", "LIN", "ln", "SL", "R", "I", "X", "Length", "W", "O", "V", "B", "J", "P", "LI", "E", "D", "l", "CL", "LE", "U", "F", "LS", "LP", "C"], "s": ["a", "n", "sb", "ys", "ogs", "su", "services", "ats", "js", "p", "fs", "w", "c", "ts", "m", "ns", "ies", "rs", "ses", "ins", "sl", "h", "ms", "ers", "ls", "gins", "b", "t", "ss", "parts", "its", "strings", "v", "gs", "sq", "ws", "st", "sv", "so", "xs", "sts", "l", "se", "os", "es", "stats", "qs", "ds", "bs", "views"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "vi", "di", "ai", "I", "iter", "m", "bi", "yi", "qi", "ic", "ix", "ip", "ind", "f", "multi", "si", "li", "ii", "ji", "v", "ori", "ti", "im", "it", "zi", "ui", "q", "pi", "u", "id", "y", "j", "k", "ij", "ik", "index", "iri"], "S": ["STR", "SN", "Save", "M", "NS", "T", "ES", "Str", "BS", "SS", "Summary", "SL", "SB", "R", "I", "JS", "RS", "Si", "VS", "SI", "CS", "TS", "CSS", "Screen", "Set", "H", "As", "GS", "V", "Sum", "IS", "Sample", "B", "G", "P", "SE", "A", "USS", "US", "Is", "SU", "ST", "D", "Sal", "SA", "WS", "String", "Z", "C"]}}
{"code": "H, W = map(int, input().split())\\nC = [list(map(int, input().split())) for _ in range(10)]\\n\\nA = []\\nfor _ in range(H):\\n    A += list(map(int, input().split()))\\n\\nfor i in range(10):\\n    for j in range(10):\\n        for k in range(10):\\n            C[j][k] = min(C[j][k], C[j][i]+C[i][k])\\n\\nfrom collections import Counter\\nCo = Counter(A)\\nans = 0\\nfor a, c in Co.most_common():\\n    if a==-1 or a==1:\\n        continue\\n    ans += C[a][1]*c\\nprint(ans)", "target": "284", "substitutes": {"H": ["M", "N", "Eh", "HD", "T", "HS", "HE", "X", "R", "I", "L", "HI", "NH", "h", "HR", "DH", "V", "HH", "S", "B", "J", "Q", "G", "HA", "P", "OH", "E", "D", "HC", "Y", "U", "K", "F", "HT", "He"], "W": ["WT", "WC", "M", "N", "T", "We", "MW", "CW", "TW", "WP", "R", "L", "Wi", "w", "VW", "BW", "WA", "V", "Width", "Wh", "SW", "WB", "G", "P", "WM", "Weight", "WS", "F"], "C": ["CNN", "WC", "Chain", "M", "N", "New", "CB", "T", "Cu", "Control", "CM", "NC", "JC", "CG", "Cod", "R", "I", "LC", "L", "CU", "CS", "Cs", "Counter", "CV", "Code", "Cond", "CT", "CP", "MC", "V", "GC", "CCC", "CD", "BC", "S", "B", "CO", "G", "DC", "P", "Cal", "Cons", "Conf", "CR", "CA", "E", "Cache", "OC", "D", "HC", "CC", "Count", "U", "K", "CF", "Collection"], "_": ["x", "sw", " the", "ct", "ai", "__", "w", "ml", "mut", "let", "val", "time", " x", " l", " w", " __", " each", "___", "y", "ik", " some", "ow"], "A": ["GA", "M", "N", "T", "All", "An", "IA", "Ar", "Abs", "AU", "AT", "R", "I", "L", "NA", "AB", "App", "AE", "AA", "LA", "As", "V", "AI", "AR", "AS", "S", "B", "To", "This", "HA", "AP", "P", "CA", "At", "E", "JA", "AF", "D", "AM", "Y", "SA", "U", "AC", "K", "Array"], "i": ["mi", "ki", "n", "x", "ia", "ci", "ir", "p", "di", "ai", "I", "m", "z", "bi", "ic", "o", "h", "f", "b", "io", "si", "li", "ii", "ji", "v", "e", "int", "ti", "it", "q", "l", "pi", "y", "ik", "ij", "iu", "hi"], "j": ["json", "n", "x", "ia", "uj", "ie", "ja", "js", "aj", "p", "g", "jp", "jc", "z", "m", "oj", "jj", "o", "h", "pr", "jl", "fr", "b", "jac", "t", "br", "pt", "si", "J", "ion", "li", "key", "ji", "v", "kj", "bj", "obj", "im", "it", "jump", "q", "l", "dj", "y", "ij", "ik"], "k": ["ck", "km", "ki", "ek", "uk", "kn", "kr", "x", "kh", "kl", "ijk", "p", "ak", "ke", "kid", "z", "ks", "o", "kw", "ko", "tk", "kj", "v", "ok", "ku", "q", "kt", "wk", "kk", "ka", "K", "ik", "sk", "kg", "ij", "kan", "mk", "unk", "kit"], "Co": ["Vo", " Ko", "Cu", " Cross", "Cod", "Cover", "Coll", "Auto", "Ca", "Con", "Re", "Cop", "Cor", "Col", "Local", "Counter", " Coord", " Do", "Cond", "Che", "Cross", "Do", "Pro", "Li", "CO", "Tx", "Cons", "Cal", "Cur", "Os", " Go", "Cont", " Cover", "co", " Cop", " Can", " co", "Po", " CO", "Can"], "ans": ["ANS", "ants", "ats", "ians", "actions", "names", "eds", " means", "acs", "outs", "aus", "lines", "aned", " Ans", "ns", "vals", "ann", "rans", "rs", "ongs", "anas", "ks", "ins", "ms", "amps", "ls", "ents", "ens", "anc", "cons", "uns", "can", "an", "anners", "anks", "rors", "posts", "aces", "oss", "xs", "nas", "ams", "aos", "yes", "ads", "cs", "arts", "os", "AN", "olds"], "a": ["ia", "sta", "ae", "ab", "era", "ta", "aj", "ana", "ach", "va", "ai", "xa", "ma", "ata", "ga", "o", "ea", "pa", "la", "aaa", "fa", "act", "alpha", "apa", "na", "an", "all", "qa", "sa", "ha", "ao", "sha", "at", "app", "oa", "au", "aa", "am", "ar", "index", "area", "ba", "ca", "ac"], "c": ["lc", "con", "n", "cmp", "x", "cat", "ci", "gc", "unc", "cd", "cn", "xc", "g", "ct", "rc", "arc", "w", "m", "fc", "cur", "bc", "count", "dc", "mc", "t", "cas", "anc", "cum", "can", "v", "cos", "cc", "co", "cb", "cu", "l", "u", "cs", "cm", "cr", "ca", "ac"]}}
{"code": "from operator import mul\\nfrom functools import reduce\\n\\ndef nCr(n, r):\\n    r = min(r, n-r)\\n    if r == 0:\\n        return 1\\n    over = reduce(mul, range(n, n-r, -1), 1)\\n    under = reduce(mul, range(1, r+1), 1)\\n    return over // under\\n\\nA = input()\\nstrs = set(list(A))\\n\\nans = len(A) * (len(A)-1) // 2\\nfor s in strs:\\n    num = A.count(s)\\n\\n    if num >= 2:\\n        ans -= nCr(num, 2)\\n\\nprint(ans+1)", "target": "351", "substitutes": {"n": ["a", "nr", "N", "net", "max", "x", "to", "nt", "ln", "d", "p", "norm", "ne", "cn", "g", "R", "i", "sn", "c", "w", "m", "ns", "min", "o", "right", "b", "t", "no", "nb", "nor", "na", "v", "nc", "un", "nw", "nn", "l", "ll", "np", " N", "j", "rn"], "r": ["rid", "nr", "sr", "mr", "pair", "rr", "kr", "ro", "rg", "d", "p", "run", "g", "R", "rc", "i", "re", "rad", "w", "c", "m", "rs", "rb", "rw", "rm", "o", "res", "h", "rec", "rar", "br", "right", "b", "f", "t", "dr", "v", "e", "rf", "it", "rt", "lr", "hr", "ran", "q", "l", "ar", "u", "k", "rn", "range", "j", "reg", "er", "rd"], "over": ["ter", "Over", "um", " outer", "p", "on", "above", "en", "own", "iter", "re", "OVER", " Over", " OVER", " overs", "h", "ob", "ver", "cover", "dr", "off", "an", "v", "older", " hover", " ov", "up", "at", "overs", "der", "ber", "hover", "ov", " ove", "er", "root", "after"], "under": ["fore", "before", "unders", "where", "above", "g", "air", "hard", "sup", "Under", " Under", "old", "by", "are", "false", "place", "bottom", "df", "nder", "umb", "out", "de", "older", "un", "normal", "und", "below", "here", "new", "der", "behind", "ever", "user", "holder", "er", "back", "after", "field", "ow"], "A": ["a", "GA", "M", "N", "T", "All", "Al", "An", "Ar", "AH", "Alpha", "AU", "AT", "R", "I", "ACC", "L", "Abs", "AL", "AST", "AV", "AB", "AE", "H", "AA", "LA", "As", "V", "AI", "AR", "C", "AS", "S", "B", "G", "This", "P", "CA", "At", "E", "Acc", "AF", "D", "AM", "SA", "U", "The", "AC", "Array", "AP"], "strs": ["strains", "stringls", "stringts", " strts", "Strls", "Strts", "Strabs", "seqt", "streamains", "strt", " strt", "Strs", "streamls", "seqs", "strabs", "streams", "seqls", " strls", "streamt", "strings", "strls", "stringabs", "strts", " strabs", "seqains", " strains"], "ans": ["ars", "ANS", "ants", "ats", "ians", "cn", "outs", "ows", "aus", "span", "ros", "lines", "nets", "ns", "vals", "ann", "rans", "rs", "ums", "anas", "ks", "leans", "ins", "res", "ons", "ms", "ls", "ents", "ens", "cons", "uns", "an", "aces", "anes", "xs", "ran", "nas", "aos", "arts", "cs", "os", "ones", "olds", "vers"], "s": ["a", "ples", "self", "ats", " S", "ains", "p", "names", "eds", "ows", "i", "hs", "ts", "ies", "ns", "rs", "ses", "ins", "ords", "less", "ms", "ls", "abs", "t", "ss", "S", "als", "uns", "tes", "its", "ends", "strings", "sq", "gs", "ws", "ches", "xs", "sts", "es", "os", "qs", "ds", "ps"], "num": ["den", "alph", "x", "max", "nt", "su", "um", "nom", "en", "nat", "uni", "m", "ns", "ums", "ann", "umi", "total", "count", "NUM", "multi", "len", "nb", "no", "cum", "mn", "ver", "non", "pos", "bn", "na", "Num", "cal", "final", "nm", "un", "nz", "conv", "umen", "nu", "ran", "number", "mon", "np", "sum"]}}
{"code": "import sys\\n\\nreadline = sys.stdin.readline\\nMOD = 10 ** 9 + 7\\nINF = float('INF')\\nsys.setrecursionlimit(10 ** 5)\\n\\n\\ndef main():\\n    S = input()\\n\\n    if len(S) == 3:\\n        print(S[::-1])\\n    else:\\n        print(S)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "528", "substitutes": {"readline": ["sendline", "readln", "sendLine", "reLine", "sendlines", "READlines", " readln", "reline", "Readlines", "Readwrite", " readlines", "READLine", "readlines", "relines", "readLine", "Readln", " readLine", "sendln", "READline", "rewrite", "Readline", "ReadLine", "READwrite", "readwrite"], "MOD": ["MAX", " WARN", " CR", "mod", " err", "LOG", "Mod", " lim", "FD", " LIM", " ERROR", "ALL", "Exp", "EXP", "SIZE", " reg", " BASE", " EXP", "LINE", " FD", " mod", " exp", " WARNING", " LEVEL", " exponent", "Bytes", " Max", " LOG"], "INF": ["INN", " INV", "PINV", " inV", "INf", " inN", "PINF", "PINf", "PINN", "INV", " INf", " inF", " inf", " INN"], "S": ["STR", "M", "N", "NS", "T", "SH", "BS", "SS", "SL", "SB", "R", "I", "SER", "L", "JS", "RS", "VS", "SI", "CS", "SAN", "SM", "H", "SQL", "V", "IS", "SAM", "INS", "B", "G", "P", "SE", "A", "s", "SU", "SP", "ST", "SA", "F", "BY", "C"]}}
{"code": "a=int(input());print(\"A\"+chr(66+(a>1199)*16-(a>2799)*11)+\"C\")", "target": "738", "substitutes": {"a": ["n", "x", "ia", "sta", "to", "ae", "ab", "aff", "d", "p", "i", "c", "ma", "z", "m", "ata", "ga", "la", "aaa", "fa", "f", "b", "t", "alpha", "da", "na", "an", "v", "e", "A", "at", "af", "s", "sa", "aka", "now", "sha", "aaaa", "au", "aa", "am", "ao", "ya", "area", "ba", "ca", "ac"]}}
{"code": "S = input()\\nw_position_list = []\\nfor i, s in enumerate(S):\\n    if s == 'W':\\n        w_position_list.append(i)\\nn_w = len(w_position_list)\\nres = sum(w_position_list) - (n_w *(n_w-1)/2)\\nprint(int(res))", "target": "587", "substitutes": {"S": ["M", "N", "T", "SS", "SB", "X", "R", "SER", "I", "L", "SO", "Si", "SIM", "SI", "W", "H", "O", "V", "SAM", "B", "Q", "G", "P", "A", "E", "SU", "D", "Y", "SA", "U", "F", "Z", "C"], "w_position_list": ["w_position_index", "w_pos_list", "w_position2group", "w_Position_index", "w_position_List", "w_position2set", "w_Position2list", "w_position2list", "w_position_sequence", "w_Position2set", "w_Position2List", "w_position_set", "w_pos_sequence", "w_position2List", "w_pos_group", "w_position_LIST", "w_pos_List", "w_Position_list", "w_Position_List", "w_pos_LIST", "w_position_group", "w_Position_set", "w_position2index", "w_Position2index", "w_position2LIST", "w_pos_set", "w_position2sequence"], "i": ["mi", "n", "xi", "gi", "p", "di", "ai", "I", "m", "bi", "yi", "ic", "ix", "ip", "ind", "f", "b", "t", "si", "li", "ii", "key", "v", "int", "ti", "it", "zi", "l", "pi", "id", "index", "y", "j", "ij", "ik"], "s": ["a", "sym", "n", "sb", "sw", "sh", "ats", "space", "p", "fs", "sf", "w", "hs", "c", "ts", "m", "ns", "ies", "rs", "ses", "ins", "ls", "f", "b", "t", "ss", "si", "v", "sq", "gs", "ws", "sa", "st", "sv", "xs", "ims", "se", "os", "es", "ds", "ps", "sc"], "n_w": ["n_h", "n5h", " n_h", "n2W", " n_width", "n5wt", "n__wt", "n2wt", "n_W", "n5wal", "n_wt", "n_width", "n2w", "n2h", "ne_h", "n__w", "n_r", " n_r", "n_wal", "n__h", "n5w", "ne_w", "ne_wt", " n_wal", "ne_W", "n__wal", " n_wt"], "res": ["resolution", "resh", "ret", "reset", "rep", "med", "re", "Res", "zero", "r", "rem", "rh", "RES", "result", "right", "rel", "cond", "sat", "ress", "cons", "resource", "resp", "out", "des", "gre", "gr", "rest", "hash", "sol", "req", "pres", "rand", "reg", "comp", "pro", "ps", "prof", "sum"]}}
{"code": "n = int(input())\\ns = input()\\ncnt = 0\\nfor i in range(1,n):\\n    l = []\\n    for j in s[:i]:\\n        if j in s[i:]:\\n            l.append(j)\\n    l = set(l)\\n    cnt = max(cnt,len(l))\\n\\nprint(cnt)", "target": "575", "substitutes": {"n": ["N", "x", "net", "nt", "ln", "d", "p", "ne", "g", "sn", "r", "c", "w", "m", "ns", "nl", "b", "num", "t", "len", "nb", "no", "na", "v", "nc", "nu", "nn", "q", "np", "network", "k"], "s": ["a", "sb", "js", "p", "names", "g", "fs", "w", "lines", "c", "ts", "m", "ns", "rs", "input", "ks", "ses", "ins", "h", "ls", "f", "b", "t", "S", "ss", "parts", "its", "v", "gs", "sa", "sv", "xs", "q", "sts", "cs", "y", "os", "qs", "ds"], "cnt": ["mccount", "cgt", "acn", "account", "cn", "acct", "cct", "cnc", "ccount", "rcnt", "rccount", "ctnc", "ctount", "ncnc", "Crt", "acgt", "acnt", "mcnt", "ncct", "count", "Cnc", "acnc", "crt", " cct", " cnc", "ctnt", "rcnc", " crt", "rcct", "Cct", "mcn", "mcnc", "acount", " count", "ncnt", " cgt", "ncrt", "Cgt", "Cnt", "Count", "rcount", "ctct", "rcn"], "i": ["mi", "xi", "x", "ia", "ci", "gi", "p", "di", "ai", "I", "c", "m", "z", "bi", "ic", "ix", "ip", "ind", "f", "b", "si", "li", "ii", "v", "ti", "im", "it", "zi", "ini", "\u0438", "pi", "id", "y", "index", "ij", "fi", "iu"], "l": ["lc", "kl", "ld", "ln", "p", "lt", "g", "lb", "L", "long", "r", "c", "ml", "m", "ly", "dl", "el", "o", "nl", "sl", "la", "h", "ls", "f", "b", "hl", "t", "lis", "rl", "lo", "lists", "lp", "li", "fl", "out", "v", "list", "lv", "lr", "ol", "lock", "bl", "ll", "le", "pl"], "j": ["json", "uj", "kh", "ja", "js", "aj", "p", "jp", "job", "jc", "oj", "z", "m", "jj", "ju", " jo", "o", "jl", "f", "je", "t", " Dj", " J", "J", "bj", "li", "ji", "kj", "jas", "v", "obj", "it", "jump", "jo", "q", "dj", "y", "ij"]}}
{"code": "n = int(input())\\nhina_arare = map(str, input().split())\\nif 'Y' in hina_arare:\\n    print('Four')\\nelse:\\n    print('Three')", "target": "229", "substitutes": {"n": ["N", "d", "p", "names", "g", "i", "r", "sn", "w", "c", "m", "z", "ns", "o", "f", "b", "num", "t", "nb", "na", "e", "nm", "s", "nan", "q", "nn", "l", "k", "j"], "hina_arare": ["hina_harare", "hina_rares", "hina_arsares", "hina_harares", "hina_arar", "hina_rore", "hina_irore", "hina_arore", "hina_irare", "hina_irarre", "hina_irar", "hina_arsar", "hina_ararre", "hina_harar", "hina_harore", "hina_hararre", "hina_rar", "hina_arares", "hina_arsare", "hina_irares", "hina_arsarre", "hina_rare"]}}
{"code": "dict = {'ABC':'ARC', 'ARC':'ABC'}\\n\\nprint(dict[input()])", "target": "510", "substitutes": {"dict": ["con", "pkg", "look", "nt", "str", "ld", "d", "db", "dir", "td", "map", "ict", "cert", "default", "ind", "xd", "dat", "vol", "da", "inner", "conf", "pd", "ad", "list", "obj", "hash", "compl", "print", "hd", "D", "dd", "inf", "good", "ds", "nd"]}}
{"code": "n = int(input())\\n\\nfor i in range(n):\\n    s = input()\\n    dic = {chr(c): 0 for c in range(ord('a'), ord('z') + 1)}\\n    for c in s:\\n        dic[c] += 1\\n    # \u6700\u521d\u306e1\u5468\\n    if i == 0:\\n        ans = {chr(c): 0 for c in range(ord('a'), ord('z') + 1)}\\n        for k, v in dic.items():\\n            ans[k] = v\\n    # \u4ee5\u5916\\n    else:\\n        for k, v in dic.items():\\n            ans[k] = min(ans[k], v)\\n\\nfor k,v in ans.items():\\n    if v != 0:\\n        print(k*v,end=\"\")\\n\\nprint()\\n", "target": "220", "substitutes": {"n": ["nr", "N", "x", "net", "nt", "ni", "d", "names", "ne", "cn", "sn", "m", "z", "ns", "o", "nl", "num", "t", "nia", "len", "nb", "no", "nor", "mn", "nv", "na", "v", "nc", "nan", "nos", "nu", "size", "nn", "l", "np", "j"], "i": ["ia", "ci", "ir", "g", "di", "ai", "I", "ico", "ix", "ind", "si", "ion", "li", "ii", " cis", "ei", "e", "ti", "it", "ini", "zi", "co", "cu", "il", "ar", "id", "j"], "s": ["a", "sb", "ys", "ats", "p", "g", "w", "ts", "m", "south", "ns", "rs", "ses", "ins", "ls", "b", "t", "S", "ss", "si", "v", "gs", "ws", "sa", "ims", "sv", "xs", "csv", "sts", "sis", "cs", "se", "es", "os", "ds", "ps"], "dic": [" dfc", "dicc", "lia", "duic", "duict", "duicc", "Dicc", " dct", "dics", " dics", "dct", "didics", "Dict", "didia", "dia", "dfc", " dia", " dicc", "Dic", "didfc", "lics", " dict", "lfc", "lic", "Dct", "didic", "dict", "duct"], "c": ["ec", "a", "lc", "cation", "x", "ci", "d", "p", "unc", "cd", "pc", "g", "xc", "ach", "ct", "rc", "arc", "r", "w", "chain", "m", "z", "fc", "ic", "o", "col", "h", "cur", "enc", "\u00e7a", "f", "b", "bc", "t", "vc", "icc", "dc", "anc", "mc", "cut", "sc", "v", "e", "usc", "cin", "cc", "\u00e7", "co", "cu", "q", "l", "u", "cs", "k", "y", "cr", "ca", "C", "ac"]}}
{"code": "a = [1]\\nb = [1]\\nfor _ in range(50):\\n    a.append(2 * a[-1] + 3)\\n    b.append(2 * b[-1] + 1)\\n\\ndef num_of_patties(n, x):\\n    if n == 0:\\n        return 1\\n\\n    if x == 1:\\n        return 0\\n    elif x <= a[n-1] + 1:\\n        return num_of_patties(n-1, x-1)\\n    elif x == a[n-1] + 2:\\n        return b[n-1] + 1\\n    elif x <= 2 * a[n-1] + 2:\\n        return b[n-1] + 1 + num_of_patties(n-1, x-a[n-1]-2)\\n    else:\\n        return b[n]\\n\\n\\nprint(num_of_patties(*[int(i) for i in input().split()]))\\n", "target": "485", "substitutes": {"a": ["ia", "sta", "ae", "ab", "ta", "p", "acs", "r", "w", "c", "ma", "m", "ace", "ata", "el", "eas", "ga", "window", "o", "aux", "ea", "h", "aaa", "la", "admin", "act", "f", "abs", "t", "alpha", "apa", "an", "e", "ad", "all", "A", "al", "ap", "at", "sa", "s", "ao", "now", "app", "au", "oa", "div", "aa", "l", "am", "ar", "area", "ack", "ba", "ca", "ac"], "b": ["bis", "body", "sb", "to", "bf", "ab", "bar", "d", "p", "db", "g", "ib", "r", "bg", "c", "z", "m", "wb", "pb", "fb", "rb", "o", "mb", "h", "be", "ob", "f", "br", "bc", "t", "gb", "nb", "B", "bb", "out", "v", "e", "obj", "another", "s", "eb", "bl", "cb", "base", "l", "bp", "u", "y", "bs", "ba", "back"], "_": [" e", " the", " t", " j", " ex", " pre", " num", " do", " g", " l", " c", " m", " __", " p", " v", " un"], "n": ["next", "nr", "N", "net", "self", "nt", "local", "wn", "gn", "d", "p", "en", "on", "ln", "norm", "ne", "names", "name", "dn", "ct", "cn", "long", "nic", "sn", "r", "c", "z", "m", "ns", "note", "o", "ix", "ren", "host", "num", "fn", "t", "nb", "nor", "mn", "non", "out", "na", "an", "exp", "v", "nc", "all", "nm", "nan", "co", "nu", "nw", "size", "nn", "ll", "l", "np", "number", "ng", "k", "y", "j", "pn", "network", "rn", "index"], "x": ["wx", "xi", "ex", "xe", "p", "xes", "on", "xc", "g", "ct", "X", "xa", "rx", "w", "r", "c", "ox", "z", "xxxx", "xt", "hex", "xml", "el", "ic", "ix", "o", "h", "tx", "ax", "f", "xd", "t", "v", "e", "exp", "xy", "xs", "mx", "co", "dx", "xx", "l", "u", "j", "y", "px", "xp", "xf", "ac"], "i": ["mi", "xi", "gu", "ci", "p", " j", "di", "I", "r", "c", "m", "ic", "ip", "f", "t", "iu", "ii", "li", "v", "e", "int", "ti", "ini", "zi", "q", "l", "u", "id", "k", "j", "y", "ij", "iri"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nN = int(input())\\nA = list(map(int, input().split()))\\n\\nINF = float('inf')\\nabs_min = INF\\nneg_cnt = 0\\nres = 0\\n\\nfor i in range(N):\\n    if A[i] < 0:\\n        neg_cnt += 1\\n    abs_min = min(abs_min, abs(A[i]))\\n    res += abs(A[i])\\n\\nif neg_cnt % 2:\\n    res -= 2 * abs_min\\n\\nprint(res)\\n", "target": "579", "substitutes": {}}
{"code": "#https://atcoder.jp/contests/ddcc2020-qual/tasks/ddcc2020_qual_a\\nXY=input().split()\\nX=int(XY[0])\\nY=int(XY[1])\\naward=0\\nif X==1 and Y==1:\\n    award+=400000\\nfor num in [X,Y]:\\n    if num==3:\\n        award+=100000\\n    if num==2:\\n        award+=200000\\n    if num==1:\\n        award+=300000\\nprint(award)", "target": "449", "substitutes": {}}
{"code": "import math\\ndef P(n, r):\\n    return math.factorial(n)//math.factorial(n-r)\\ndef C(n, r):\\n    return P(n, r)//math.factorial(r)\\n\\nN = int(input())\\nmoji =[]\\nfor i in range(N):\\n    a = sorted(input())\\n    moji.append(''.join(a))\\n\\n\\ndic = {}\\nfor i in moji:\\n    if i in dic:\\n        dic[i] += 1\\n    else:\\n        dic[i] = 1\\n\\nans = 0\\nfor value in dic.values():\\n    if value >=2:\\n        ans+=C(value, 2)\\n\\nprint(ans)", "target": "84", "substitutes": {"n": ["nr", "net", "x", "nt", "ln", "d", "p", "on", "en", "ne", "g", "cn", "dn", "sn", "c", "w", "m", "z", "ns", "o", "h", "f", "b", "num", "fn", "t", "nb", "no", "nor", "mn", "na", "an", "v", "nc", "s", "nu", "nw", "nn", "ll", "l", "np", "yes", "ng", "j", "rn", "y"], "r": ["nr", "mr", "x", "rr", "ro", "rg", "d", "p", "g", "R", "rc", "re", "w", "c", "m", "rs", "rb", "rw", "o", "ren", "h", "rec", "right", "f", "b", "br", "rel", "ri", "t", "dr", "v", "e", "ru", "ur", "it", "rt", "q", "l", "ar", "u", "rand", "j", "rn", "er", "cr", "rate", "rd"], "N": ["SN", "CNN", "M", "NS", "NC", "GN", "NI", "Na", "Ns", "R", "I", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "Node", "V", "SIZE", "No", "NO", "NUM", "Num", "P", "NPR", "A", "Sn", "D", "NB", "Size", "Len", "Ni", "TN"], "moji": ["moasi", "moobi", "meiji", "Moji", " moiao", "meoji", "woisy", " moiom", "moiao", "koasi", " moasi", "woiom", "woobi", "meji", "boasi", "moj", " moiji", " moobi", "boisy", "koii", " mooji", "moiji", "Mooji", "boobi", "woji", "mooji", " moii", "boiao", " moj", "moii", "Moiji", "moisy", "boji", " moisy", "mej", "boii", "koji", "moiom", "koiao", "Moj", "boiom"], "i": [" ii", "mi", "\u00ed", "xi", "x", "ci", "gi", "p", "di", "ai", "I", " si", "c", "m", "bi", " di", "yi", "info", "iti", "qi", "ic", "o", "ix", "ip", " bi", "ind", "b", "t", "si", "iu", "li", "ii", "ji", "v", "ei", "ori", "ti", "oi", "e", "int", "iy", "s", "it", " vi", "zi", "ini", "ui", " ti", "q", "pi", "item", "id", "k", "index", "y", "ij", "j", "asi", "iri", "fi"], "a": ["tta", "ia", "sta", "ae", "ja", "ab", "era", "ta", "ana", "va", "xa", "ma", "ga", "o", "aux", "ea", "la", "aaa", "isa", "b", "t", "apa", "an", "A", "another", "sa", "aka", "s", "oa", "au", "aa", "j", "ya", "area", "ba", "ca"], "dic": ["indinit", "Dics", "Dac", " dci", " dIC", "indict", "DIC", "dics", "dinit", "dooc", "dci", " dics", " dictionary", "cdac", "dIC", "didIC", "didics", "Dictionary", "doict", "tdics", "Dict", " dinit", " doc", "indoc", "tdic", "cdic", "Dic", "cdictionary", "dictionary", "Doc", "tdci", "cdict", "indics", "doic", " dict", " dac", "indIC", "didinit", "dac", "doc", "Dci", "didic", "dict", "doIC", "indictionary", "tdict", "indic"], "ans": ["ars", "ANS", "ants", "ats", "ians", "beans", "actions", "names", " means", "eds", "outs", "aus", "ros", "aned", "ns", "ann", "rans", "rs", "ums", "anas", "leans", "offs", "ins", "ks", "ras", "ons", "values", "ms", "amps", "ls", "ents", "ens", "authors", "cons", "uns", "can", "an", "posts", "anks", "iann", "s", "nan", "nas", "ams", "aos", "ands", "ads", "arts", "os", "stats", "AN"], "value": ["rue", "x", "critical", "pair", "VI", "instance", "vote", "option", "attribute", "max", "point", "name", "vi", "ue", "position", "current", "vector", "unit", "type", "total", "default", "values", "val", "case", "result", "term", "word", "iv", "unknown", "ion", "key", "v", "byte", "wise", "see", " Value", "size", "VALUE", "number", "item", "property", "index", "data", "Value", "entry", "field"]}}
{"code": "a,b,c=map(int,input().split())\\n\\nif a==b and b==c:\\n  print(1)\\nelif (a==b and b!=c) or (b==c and c!=a) or (c==a and a!=b):\\n  print(2)\\nelse:\\n  print(3)", "target": "32", "substitutes": {"a": ["aq", "n", "x", "ae", "ac", "ab", "aff", "aj", "ta", "p", "era", "ach", "d", "ra", "g", "i", "r", "w", "ma", "ace", "m", "z", "o", "ea", "h", "aaa", "ax", "f", "abs", "t", "alpha", "da", "an", "e", "all", "A", "al", "at", "sa", "af", "ch", "app", "oa", "au", "aa", "l", "am", "ar", "j", "area", "ba", "ca"], "b": ["n", "sb", "x", "ab", "bar", "d", "p", "db", "lib", "g", "ib", "i", "r", "w", "z", "m", "bi", "wb", "fb", "rb", "o", "mb", "h", "be", "ob", "f", "br", "bc", "gb", "t", "nb", "B", "bb", "v", "e", "s", "eb", "bl", "cb", "l", "u", "j", "y", "k", "bs", "ba", "ca"], "c": ["ce", "lc", "n", "con", "x", "ab", "d", "p", "unc", "g", "xc", "ct", "rc", "r", "tc", "w", "m", "z", "fc", "o", "col", "h", "cur", "f", "bc", "t", "dc", "mc", "conf", "can", "e", "v", "cin", "cos", "cp", "ch", "s", "cc", "com", "co", "cu", "cb", "l", "u", "cs", "k", "y", "j", "cm", "cr", "cf", "ca", "C", "ac"]}}
{"code": "def process(H, W) : \\n  str = '#' * (W + 2)\\n  print(str)\\n  for i in range(H) : \\n    s = '#'\\n    s += input()\\n    s += '#'\\n    print(s)\\n  print(str)\\n\\n\\nH, W = tuple(map(int, input().split()))\\nprocess(H, W)\\n", "target": "133", "substitutes": {"H": ["M", "N", "Eh", "HQ", "T", "HD", "CH", "SH", "His", "GO", "HS", "AH", "HE", "HL", "X", "RH", "I", "L", "AV", "HO", "HI", "GH", "WH", "HTML", "NH", "h", "DH", "TH", "V", "Ch", "HH", "S", "B", "J", "G", "HA", "P", "A", "OH", "Host", "Han", "D", "HC", "MH", "HTTP", "HB", "High", "F", "HT", "He", "C"], "W": ["WT", "WC", "IT", "M", "N", "NS", "We", "T", "WR", "MW", "WI", "CW", "WAR", "Word", "TW", "Watch", "Win", "NW", "WP", "R", "X", "I", "L", "RW", "w", "NT", "WH", "VW", "BW", "WA", "V", "S", "Wh", "SW", "B", "Q", "G", "P", "D", "NB", "WE", "EW", "DW", "U", "K", "Weight", "WS", "C"], "str": ["STR", "n", "ld", "Str", "ret", "g", "arr", "w", "txt", "r", "us", "ns", "full", "rs", "hex", "format", "res", "ls", "enc", "fr", "shr", "sp", "br", "t", "inner", "dr", "out", "v", "int", "string", "msg", "st", "tr", "conv", "char", "oct", "print", "bl", "usr", "div", "sts", "ar", "cs", "er", "mt", "cr", "ds", "text", "chain"], "i": [" I", " ii", "iii", "n", "x", "ite", " im", " j", " il", "iter", "I", "__", "yi", "by", "ix", "ind", " c", "iy", "im", "it", " it", "id", "k", "j"], "s": ["a", "n", "sb", "ats", "js", "d", "p", "Str", "g", "short", "w", "r", "us", "c", "ts", "z", "m", "ns", "rs", "ins", "less", "sl", "h", "ms", "ls", "b", "sp", "t", "S", "ss", "si", "its", "v", "strings", "sq", "gs", "string", "ws", "st", "sts", "l", "simple", "cs", "se", "os", "es", "qs", "ds"]}}
{"code": "a,b,c = map(int, input().split())\\nprint('Yes' if a/c <= b else 'No')", "target": "786", "substitutes": {"a": ["x", "sta", "foo", "ac", "ab", "aff", "aj", "d", "p", "i", "r", "ma", "m", "ea", "la", "f", "t", "alpha", "da", "na", "an", "v", "e", "A", "at", "sa", "af", "ity", "app", "au", "oa", "aa", "l", "am", "u", "j", "y", "ba", "ca"], "b": ["n", "x", "ab", "d", "p", "db", "beta", "g", "ib", "i", "r", "m", "z", "bi", "fb", "rb", "mb", "be", "ob", "f", "bc", "gb", "t", "B", "bb", "v", "e", "s", "eb", "base", "cb", "l", "j", "y", "bs", "ba"], "c": ["ec", "ce", "lc", "n", "con", "ci", "d", "p", "g", "ct", "rc", "i", "r", "tc", "m", "z", "o", "h", "f", "bc", "t", "dc", "e", "v", "nc", "cp", "cc", "co", "cb", "l", "u", "cs", "y", "cm", "cr", "cf", "ca", "C", "ac"]}}
{"code": "N = str(input())\\n\\nif N[-1] == '3':\\n    print('bon')\\nelif (N[-1] == '0' or N[-1] == '1' or N[-1] == '6' or N[-1] == '8'):\\n    print('pon')\\nelse:\\n    print('hon')\\n", "target": "595", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "T", "IN", "EN", "NC", "GN", "NI", "Na", "Ns", "I", "BN", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "Not", "NH", "H", "W", "O", "V", "TN", "NO", "NOTE", "S", "NE", "B", "J", "Q", "G", "P", "NPR", "You", "D", "NB", "Y", "MN", "Names", "F", "AN", "UN", "TON", "Z", "FN", "NG", "C"]}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10**7)\\ndef I(): return int(sys.stdin.readline().rstrip())\\ndef MI(): return map(int,sys.stdin.readline().rstrip().split())\\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #\u7a7a\u767d\u3042\u308a\\ndef LI2(): return list(map(int,sys.stdin.readline().rstrip()))  #\u7a7a\u767d\u306a\u3057\\ndef S(): return sys.stdin.readline().rstrip()\\ndef LS(): return list(sys.stdin.readline().rstrip().split())  #\u7a7a\u767d\u3042\u308a\\ndef LS2(): return list(sys.stdin.readline().rstrip())  #\u7a7a\u767d\u306a\u3057\\n\\n\\nS = LS2()\\nN = len(S)\\n\\nprint(sum(S[i] != S[i+1] for i in range(N-1)))\\n", "target": "655", "substitutes": {}}
{"code": "MOD = 10 ** 9 + 7\\nINF = 10 ** 10\\nimport sys\\nsys.setrecursionlimit(100000000)\\ndy = (-1,0,1,0)\\ndx = (0,1,0,-1)\\nfrom collections import deque\\n\\ndef main():\\n    n = int(input())\\n    idx = [-1] * n\\n    for i in range(n):\\n        p = int(input())\\n        p -= 1\\n        idx[p] = i\\n    \\n    ans = 1\\n    tmp = 1\\n    for i in range(1,n):\\n        if idx[i - 1] < idx[i]:\\n            tmp += 1\\n        else:\\n            ans = max(ans,tmp)\\n            tmp = 1\\n    ans = max(ans,tmp)\\n    print(n - ans)\\n\\nif __name__ =='__main__':\\n    main()  \\n", "target": "525", "substitutes": {"MOD": ["FF", "Fun", "MAG", "mod", "DIR", "LOG", "Mod", "POS", "AD", "RM", "CLASS", "OD", "MIN", "RES", "EXP", "MER", "MD", "RT", "MODE", "ID", "MS", "RC", "FIN", "CC", "RO", "SPEC", "DEV", "FORM", "REM"], "INF": [" INV", "INf", "PINV", "InF", "INI", "PINF", "InV", " INI", "PINI", "PINf", "InI", "INV", "Inf", " INf"], "dy": ["sy", "sym", "rot", "ys", "yd", "idy", "dies", "dir", "di", "addy", "yz", "oy", "dl", "aux", "py", "dem", "uy", "ii", "ei", "ey", "xy", "dq", "dot", "fy", "yy", "y", "ds", "ay"], "dx": ["wx", "x", "ex", "ux", "xc", "dh", "ox", "dl", "ix", "tx", "dt", "ax", "xd", "dr", "fx", "xy", "xs", "dp", "dq", "xx", "dd", "dj", "yx", "px", "ds", "xp", "zx"], "n": ["nr", "N", "x", "nt", "gn", "ln", "d", "en", "ne", "cn", "g", "sn", "r", "c", "w", "m", "ns", "ny", "total", "o", "nl", "f", "num", "t", "nia", "len", "nb", "nor", "no", "mn", "na", "an", "v", "nc", "nan", "nu", "nw", "size", "nn", "l", "ll", "np", "q", "number", "ng", "j", "nd"], "idx": ["IDpx", "Idxs", "inxs", " idp", "idxs", "Idex", "idp", "IDxs", "edix", " idxs", "Idx", "Idxc", "edxs", " idix", "idxc", "Idpx", "inp", "Idp", "edindex", "idexs", "idexc", "IDindex", "idex", "idindex", "IDx", " idxc", "idix", " idpx", "Idindex", "inx", "inex", " idindex", " idex", "idpx", "ideex", "Idix", "edx"], "i": ["a", "mi", "ki", "xi", "x", "ci", "gi", "cli", "g", "di", "jp", "I", "ai", "r", "c", "m", "bi", "ic", "o", "ski", "ix", "ip", "pa", "ind", "f", "t", "si", "li", "ii", "ji", "v", "e", "int", "ti", "P", "iy", "im", "it", "zi", "ini", "ui", "l", "pi", "phi", "u", "id", "y", "k", "j", "ik", "ij", "index", "iu", "start"], "p": ["a", "pkg", "x", "d", "mp", "pc", "g", "jp", "r", "c", "m", "pb", "o", "tp", "pa", "ip", "pr", "pu", "b", "sp", "t", "pt", "lp", "pid", "pos", "v", "P", "cp", "q", "l", "pi", "pl", "u", "j", "k", "y", "pn", "pp", "pro", "ps"], "ans": [" orphans", "conn", "x", "ANS", "nt", "ants", "ats", "en", "ais", "names", " means", "eds", "outs", "ai", "ames", "aus", "nets", "lines", "ns", "vals", "ann", "rans", "ums", "eas", "ks", "anas", "offs", "ins", "pac", "ons", "ms", "amps", "ls", "mean", "ids", "ents", "ens", "ps", "news", "cons", "mn", "uns", "out", "can", "an", "na", "gs", "anks", "posts", "aps", "oss", "ups", "s", "nz", "xs", "nan", "nas", "ams", "aos", "vs", "mem", "cs", "os", "ds", "ones", "bs", "obs"], "tmp": ["tm", "pkg", "max", "cmp", "perm", "nt", "err", "beta", "mp", "ret", "test", "td", "tc", "txt", "pre", "m", "pb", "total", "ctx", "prime", "rb", "output", "pac", "tp", "ms", "snap", "term", "cv", "sp", "t", "cond", "nb", "tu", "out", "tn", "cache", "obj", "emp", "ptr", "mk", "tt", "st", "cp", "terms", "rt", "tar", "size", "cb", "np", "mem", "etc", "j", "data", "pro", "temp", "nd", "sum"]}}
{"code": "N,K = map(int, input().split())\\nH = [int(input()) for i in range(N)]\\nH.sort()\\n\\nhold = 0\\nans = 10 ** 9 + 1\\nfor i in range(K-1,N):\\n    hold = H[i] - H[i-(K-1)]\\n    ans = min(ans, hold)\\nprint(ans)", "target": "710", "substitutes": {"N": ["CNN", "M", "n", "NS", "T", "GN", "NI", "Ns", "X", "I", "R", "NA", "L", "NN", "NP", "NR", "NT", "NH", "O", "V", "TN", "No", "NO", "S", "B", "J", "Q", "G", "ND", "Num", "P", "A", "D", "NB", "MN", "Ni", "F", "Z", "C"], "K": ["M", "T", "KN", "KR", "MK", "R", "L", "KK", "NP", "KT", "W", "V", "KS", "MC", "KC", "PK", "NK", "Kent", "Z", "S", "B", "J", "SK", "Q", "G", "KB", "P", "HK", "Mask", "VK", "Y", "UK", "MN", "k", "KI", "TN", "KE", "KING", "C"], "H": ["M", "Eh", "HQ", "HD", "HM", "HP", "His", "GO", "HS", "HL", "HE", "Th", "I", "AV", "HO", "HI", "GH", "Help", "NH", "h", "HR", "DH", "TH", "HH", "B", "Q", "History", "This", "HF", "HA", "P", "Hist", "Head", "Hash", "OH", "Host", "HK", "Han", "HC", "MH", "Her", "HTTP", "HB", "High", "F", "HT", "He"], "i": ["mi", "ki", "n", "xi", "x", "uri", "ci", "gi", "g", "di", "ai", "I", "iter", "bi", "yi", "qi", "ic", "ix", "ip", "ind", "si", "iu", "li", "ii", "key", "ji", "v", "ori", "ti", "iy", "im", "it", "zi", "ini", "ui", "\u0438", "q", "phi", "pi", "l", "u", "id", "k", "y", "j", "ik", "ij", "index", "iri", "hi"], "hold": ["find", "sh", "max", "broad", "trust", "hang", "length", "weight", "adjust", "control", "wait", "condition", "ca", "old", "round", "window", "bo", "change", "pool", "h", "bind", "ind", "mean", "grow", "meet", "OLD", "heat", "limit", "count", "cond", "close", "record", "int", "Hold", "adjusted", "each", "balance", "guard", "high", "pay", "have", "lock", "handle", "cast", "claim", "mem", "holder", "bound", "held", "buy", "draw", "olds"], "ans": ["n", "ANS", "ants", "ians", "ats", " means", "outs", "ai", "helps", "aus", "asks", "ros", "iban", "mails", "ns", "ann", "rans", "eas", "ks", "anas", "leans", "ins", "offs", "wan", "ons", "ms", "angs", "amps", "ls", "pan", "ents", "ens", "mn", "uns", "can", "an", "posts", "gs", "aps", "oss", "ays", "s", "nan", "xs", "ions", "nas", "ran", "aos", "oa", "aints", "ads", "arts", "os", "lan", "AN", "ps"]}}
{"code": "a,b,c=map(int,raw_input().split())\\nif a<=c<=b:\\n  print \"Yes\"\\nelse:\\n  print \"No\"", "target": "706", "substitutes": {"a": ["n", "x", "ab", "aj", "d", "ta", "p", "ach", "g", "i", "r", "ma", "z", "ga", "ea", "aaa", "f", "t", "da", "na", "an", "e", "A", "at", "sa", "af", "s", "ity", "au", "oa", "aa", "l", "am", "ar", "j", "ba", "ca", "ac"], "b": ["bis", "n", "x", "bf", "ab", "d", "p", "db", "g", "ib", "i", "r", "bd", "bi", "fb", "rb", "mb", "be", "f", "bc", "gb", "B", "bb", "v", "e", "s", "eb", "cb", "l", "ub", "y", "bs", "ba"], "c": ["ec", "ce", "lc", "n", "con", "ci", "d", "p", "g", "ct", "rc", "tc", "m", "z", "o", "h", "f", "bc", "t", "dc", "uc", "cut", "can", "e", "v", "cin", "cos", "cp", "s", "cc", "com", "co", "l", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"]}}
{"code": "# C Many Requirements\\n\\nfrom itertools import combinations_with_replacement as com\\n\\nN, M, Q = map(int, input().split())\\n\\nC = []\\nfor q in range(Q):\\n  C.append(tuple(map(int, input().split())))\\n\\nAs = com([i for i in range(1, M+1)], N)\\n\\nans = 0\\nfor A in As:\\n  point = 0\\n  for Ci in C:\\n    if A[Ci[1]-1] - A[Ci[0]-1] == Ci[2]:\\n      point += Ci[3]\\n  ans = max(ans, point)\\n\\nprint(ans)", "target": "0", "substitutes": {}}
{"code": "s = input()\\n\\nflag=[0,0]\\n\\nif 1<=int(s[0:2])<=12:\\n    flag[0]=1\\nif 1<=int(s[2:4])<=12:\\n    flag[1]=1\\n\\nif flag==[0,0]:\\n    print(\"NA\")\\nif flag==[1,0]:\\n    print(\"MMYY\")\\nif flag==[0,1]:\\n    print(\"YYMM\")\\nif flag==[1,1]:\\n    print(\"AMBIGUOUS\")\\n", "target": "17", "substitutes": {"s": ["a", "bis", "n", "sb", "self", "str", "ats", "js", "space", "p", "spec", "i", "sf", "c", "ts", "z", "rs", "input", "ins", "sl", "h", "f", "b", "sp", "abs", "t", "ss", "S", "bits", "v", "gs", "sq", "string", "ws", "sa", "sv", "q", "sts", "sample", "os", "qs", "ps", "bs"], "flag": ["arg", "hold", "anch", "sign", "ld", "child", "rage", "g", "store", "iter", "long", "ment", "age", "set", "condition", "status", "og", "xml", "FLAG", "save", "lag", "nl", "supp", "bug", "alg", "log", "flags", "mask", "tag", "level", "cmd", "sp", "bool", "dep", "cond", "len", "no", "Flag", "sil", "bit", "aint", "don", "ail", "att", "null", "list", "hide", "al", "switch", "lv", "button", "debug", "char", "group", "print", "stage", "desc", "lock", "do", "command", "line", "band", "ag", "member", "ond", "ctl", "sync", "back", "prop", "field"]}}
{"code": "data = list(map(int,input().split()))\\nn = data[0]\\nk = data[1]\\ndel data\\nif k > 1:\\n    if n >= k:\\n        print(n-k)\\n    elif n < k:\\n        print(\"1\")\\nelse:\\n    print(0)", "target": "739", "substitutes": {"data": ["json", "self", "missing", "random", "ta", "d", "p", "table", "split", "action", "test", "zero", "raw", "scale", "c", "ma", "map", "batch", "set", "DATA", "details", "read", "ata", "input", "dec", "shape", "window", "step", "result", "trans", "done", "ting", "empty", "dat", "t", "auto", "rel", "form", "da", "dates", "no", "results", "na", "filter", "list", "cache", "debug", "now", "date", "group", "size", "div", "np", "good", "ds", "array", "Data"], "n": ["a", "N", "x", "nt", "gn", "d", "p", "ln", "on", "ne", "g", "cn", "i", "sn", "r", "c", "w", "m", "ns", "total", "o", "nl", "h", "b", "num", "fn", "t", "nb", "no", "mn", "na", "v", "an", "nc", "nm", "s", "nan", "nu", "nw", "nn", "l", "np", "y", "j"], "k": ["ck", "km", "ki", "ek", "kn", "uk", "kr", "kh", "kl", "ijk", "d", "p", "g", "ak", "ke", "kid", "i", "r", "c", "m", "z", "dk", "ks", "kw", "ko", "f", "num", "tk", "kok", "t", "kj", "v", "ok", "kick", "ikk", "ku", "q", "l", "wk", "kk", "ka", "sk", "K", "ik", "j", "kan", "mk", "unk"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\n#############\\n# Libraries #\\n#############\\n\\nimport sys\\ninput = sys.stdin.readline\\n\\nimport math\\n#from math import gcd\\nimport bisect\\nimport heapq\\nfrom collections import defaultdict\\nfrom collections import deque\\nfrom collections import Counter\\nfrom functools import lru_cache\\n\\n#############\\n# Constants #\\n#############\\n\\nMOD = 10**9+7\\nINF = float('inf')\\nAZ = \"abcdefghijklmnopqrstuvwxyz\"\\n\\n#############\\n# Functions #\\n#############\\n\\n######INPUT######\\ndef I(): return int(input().strip())\\ndef S(): return input().strip()\\ndef IL(): return list(map(int,input().split()))\\ndef SL(): return list(map(str,input().split()))\\ndef ILs(n): return list(int(input()) for _ in range(n))\\ndef SLs(n): return list(input().strip() for _ in range(n))\\ndef ILL(n): return [list(map(int, input().split())) for _ in range(n)]\\ndef SLL(n): return [list(map(str, input().split())) for _ in range(n)]\\n\\n\\n#####Shorten#####\\ndef DD(arg): return defaultdict(arg)\\n\\n#####Inverse#####\\ndef inv(n): return pow(n, MOD-2, MOD)\\n\\n######Combination######\\nkaijo_memo = []\\ndef kaijo(n):\\n  if(len(kaijo_memo) > n): return kaijo_memo[n]\\n  if(len(kaijo_memo) == 0): kaijo_memo.append(1)\\n  while(len(kaijo_memo) <= n): kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)\\n  return kaijo_memo[n]\\n\\ngyaku_kaijo_memo = []\\ndef gyaku_kaijo(n):\\n  if(len(gyaku_kaijo_memo) > n): return gyaku_kaijo_memo[n]\\n  if(len(gyaku_kaijo_memo) == 0): gyaku_kaijo_memo.append(1)\\n  while(len(gyaku_kaijo_memo) <= n): gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)\\n  return gyaku_kaijo_memo[n]\\n\\ndef nCr(n,r):\\n  if n == r: return 1\\n  if n < r or r < 0: return 0\\n  ret = 1\\n  ret = ret * kaijo(n) % MOD\\n  ret = ret * gyaku_kaijo(r) % MOD\\n  ret = ret * gyaku_kaijo(n-r) % MOD\\n  return ret\\n\\n######Factorization######\\ndef factorization(n):\\n  arr = []\\n  temp = n\\n  for i in range(2, int(-(-n**0.5//1))+1):\\n    if temp%i==0:\\n      cnt=0\\n      while temp%i==0: \\n        cnt+=1 \\n        temp //= i\\n      arr.append([i, cnt])\\n  if temp!=1: arr.append([temp, 1])\\n  if arr==[]: arr.append([n, 1])\\n  return arr\\n\\n#####MakeDivisors######\\ndef make_divisors(n):\\n  divisors = []\\n  for i in range(1, int(n**0.5)+1):\\n    if n % i == 0:\\n      divisors.append(i)\\n      if i != n // i: \\n        divisors.append(n//i)\\n  return divisors\\n\\n#####MakePrimes######\\ndef make_primes(N):\\n  max = int(math.sqrt(N))\\n  seachList = [i for i in range(2,N+1)]\\n  primeNum = []\\n  while seachList[0] <= max:\\n    primeNum.append(seachList[0])\\n    tmp = seachList[0]\\n    seachList = [i for i in seachList if i % tmp != 0]\\n  primeNum.extend(seachList)\\n  return primeNum\\n\\n#####GCD#####\\ndef gcd(a, b):\\n    while b: a, b = b, a % b\\n    return a\\n\\n#####LCM#####\\ndef lcm(a, b):\\n    return a * b // gcd (a, b)\\n\\n#####BitCount#####\\ndef count_bit(n):\\n  count = 0\\n  while n:\\n    n &= n-1\\n    count += 1\\n  return count\\n\\n#####ChangeBase#####\\ndef base_10_to_n(X, n):\\n  if X//n: return base_10_to_n(X//n, n)+[X%n]\\n  return [X%n]\\n\\ndef base_n_to_10(X, n):\\n  return sum(int(str(X)[-i-1])*n**i for i in range(len(str(X))))\\n\\ndef base_10_to_n_without_0(X, n):\\n  X -= 1\\n  if X//n: return base_10_to_n_without_0(X//n, n)+[X%n]\\n  return [X%n]\\n\\n#####IntLog#####\\ndef int_log(n, a):\\n  count = 0\\n  while n>=a:\\n    n //= a\\n    count += 1\\n  return count\\n\\n#############\\n# Main Code #\\n#############\\n\\nN,M = IL()\\nA = IL()\\n\\ndic = {1:2,2:5,3:5,4:4,5:5,6:6,7:3,8:7,9:6}\\nusable = DD(int)\\nfor a in A:\\n  usable[dic[a]] = max(usable[dic[a]],a)\\n  \\ndp = [-INF for i in range(N+1)]\\ndp[0] = 0\\n\\nfor i in range(N):\\n  for k in usable:\\n    if i+k<=N:\\n      dp[i+k] = max(dp[i+k],dp[i]*10+usable[k])\\nprint(dp[-1])", "target": "712", "substitutes": {}}
{"code": "from sys import stdin, setrecursionlimit\\ninput = stdin.readline\\nsetrecursionlimit(10**8)\\n\\nclass Unionfind():\\n    def __init__(self,n):\\n        self.n = n\\n        self.parent = [-1]*n\\n    \\n    def find(self,x):\\n        if self.parent[x] < 0:\\n            return x\\n        else:\\n            self.parent[x] = self.find(self.parent[x])\\n            return self.parent[x]\\n    \\n    def union(self, x, y):\\n        x = self.find(x)\\n        y = self.find(y)\\n        \\n        if x == y:\\n            return 0\\n        if self.parent[x] < self.parent[y]:\\n            x,y = y,x\\n        \\n        total_unite_island = self.parent[x] * self.parent[y]\\n        self.parent[x] += self.parent[y]\\n        self.parent[y] = x\\n        return total_unite_island\\n\\nN,M = map(int, input().split())\\nA = [0]*M; B = [0]*M\\nfor i in range(M):\\n    A[i], B[i] = map(lambda x: int(x) - 1, input().split())\\n\\nuf = Unionfind(N)\\ninconvenience = N * (N-1) // 2\\ninconvenience_list = [0]*M\\ninconvenience_list[M-1] = inconvenience\\nfor i in range(M-1,0,-1):\\n    inconvenience -= uf.union(A[i],B[i])\\n    inconvenience_list[i-1] = inconvenience\\nfor i in range(M):\\n    print(inconvenience_list[i])", "target": "287", "substitutes": {"input": ["history", "json", "load", "pattern", "str", "path", "context", "select", "point", "util", "init", "get", "file", "shift", "image", "raw", "r", "set", "ref", "focus", "read", "xml", "format", "enum", "output", "PUT", "config", "empty", "url", "pull", "Input", "int", "list", "stream", "filter", "it", "csv", "print", "new", " Input", "q", "reader", "paste", "data", "dict", "join", "mode", "sequence", "text", "source", "start"], "self": ["json", "cmp", "instance", "context", "wn", "p", "table", "mp", "child", "left", "__", "r", "c", "old", "dev", "res", "log", "them", "config", "close", "disk", "private", "resource", "about", "your", "obj", "compl", "wrapper", "app", "new", "q", "pl", "year", "dd", "mem", "then", "se", "lex", "history", "pkg", "sh", "sw", "before", "me", "local", "util", "get", "own", "test", "this", "deep", "replace", "object", "pre", "sect", "full", "my", "prefix", "help", "shape", "change", "ins", "py", "just", "results", "also", "params", "console", "s", "debug", "handle", "tmp", "cl", "error", "scope", "python", "thus", "next", "ae", "nt", "attribute", "spec", "raw", "sys", "ref", "round", "xml", "make", "h", "pr", "you", "parts", "add", "remote", "resp", "github", "small", "cache", "partial", "public", "req", "today", "attr", "pp", "Self", "th", "view", "what", "current", "rem", "expr", "diff", "details", "rs", "rb", "by", "ren", "ls", "rel", "pull", "sq", "support", "final", "ws", "first", "proc", "_", "network"], "n": ["a", "nt", "d", "p", "ne", "g", "cn", "dn", "sn", "r", "c", "m", "ns", "ny", "o", "f", "b", "num", "t", "nb", "mn", "na", "v", "nc", "all", "nm", "s", "nan", "nu", "nn", "l", "number", "np", "q", "u", "k", "j"], "parent": ["client", "master", "cmp", "comment", "instance", "net", "local", "path", "offset", "port", "point", "p", "manager", "table", "static", "child", "Parent", "g", "test", "rule", "family", "server", "position", "tip", "map", "m", "mother", "unit", "type", "total", "page", "tree", "pool", "default", "host", "ip", "limit", "num", "config", "part", "block", "pos", "out", "remote", "params", "list", "cache", "row", "owner", "node", "public", "wrapper", "person", "new", "known", "peer", "per", "size", "father", "tmp", "user", "scope", "holder", "parents", "root", "last", "target"], "x": ["xe", "p", "left", "X", "c", "z", "el", "ctx", "ix", "exp", "e", "v", "fx", "co", "dx", "lex", "xp", "wx", "any", "point", "on", "get", "m", "full", "xxxx", "xt", "o", "tx", "pan", "xy", "s", "l", "u", "fixed", "ce", "ux", "ct", "xa", "ox", "only", "xxx", "xml", "hex", "xd", "xs", "mx", "index", "xi", "ex", "xes", "xc", "rx", "ext", "w", "act", "ax", "f", "t", "at", "one", "xx", "lat", "yx", "px", "xf"], "y": ["a", "sy", "ty", "ys", "yer", "p", "ady", "cy", "oy", "yz", "yo", "c", "z", "ly", "ies", "m", "my", "ny", "yi", "vy", "by", "o", "ye", "py", "h", "yr", "sky", "ip", "hy", "b", "axy", "t", "yl", "zy", "ot", "uy", "key", "v", "e", "ey", "gy", "iy", "xy", "ry", "yt", "Y", "yy", "fy", "j", "hot", "ya", "ay", "ym", "kit"], "total_unite_island": ["total_unite2Island", "total_unite_islander", "total_unite_islands", "total_unite_lislander", "total_unite_Islev", "total_unite_IsLand", "total_unite_\u00edsland", "total_unite2isLand", "total_unite_lisland", "total_unite_Islander", "total_unite2Islander", "total_unite2islander", "total_unite2Islands", "total_unite_\u00edsLand", "total_unite2islands", "total_unite_Islands", "total_unite_lislev", "total_unite_islev", "total_unite2island", "total_unite_lislands", "total_unite_Island", "total_unite_\u00edslander", "total_unite_isLand", "total_unite_\u00edslands", "total_unite2IsLand"], "N": ["NS", "T", "CM", "GN", "NI", "Ns", "X", "I", "R", "L", "NA", "NM", "NN", "m", "CN", "NR", "NT", "NH", "H", "O", "V", "TN", "NUM", "S", "MAN", "J", "G", "P", "E", "D", "Y", "MN", "Ni", "U", "K", "F", "AN", "Z", "C"], "M": ["MO", "T", "MB", "CM", "MU", "MAT", "R", "I", "JM", "L", "NM", "MX", "m", "Mi", "H", "MM", "O", "MC", "V", "MD", "S", "MAN", "Q", "G", "P", "MP", "MA", "E", "MS", "D", "Ma", "MH", "DM", "TM", "Y", "Mon", "MN", "MI", "MT", "U", "K", "F", "C"], "A": ["GA", "API", "Al", "An", "Ar", "AU", "AT", "I", "Av", "L", "NA", "AL", "AST", "ACC", "And", "AB", "App", "AE", "AA", "LA", "As", "Att", "AI", "AR", "Bar", "G", "This", "P", "HA", "CA", "At", "JA", "AF", "AM", "Java", "SA", "U", "AC", "The", "BA", "AN", "Array", "AP"], "B": ["LB", "But", "BI", "T", "RB", "VB", "BL", "BS", "Bs", "SB", "R", "I", "L", "IB", "AB", "Reb", "V", "BT", "b", "Bar", "BE", "S", "BC", "J", "BR", "WB", "GB", "PB", "P", "BB", "USB", "BM", "Bern", "TB", "EB", "NB", "Y", "BO", "DB", "U", "BA", "BY", "C"], "i": [" ii", "mi", "ki", "xi", "ia", "IC", "ci", "gi", "cli", "p", "di", "ai", "I", "c", "m", "bi", "ami", "status", "info", "yi", "ic", "ix", "o", "Mi", "ip", "h", "ind", "f", "b", "multi", "ri", "t", "io", "si", "li", "ii", "ei", "e", "int", "ti", "v", "P", "iy", "im", "it", "s", "ini", "zi", "ui", "phi", "pi", "l", "ati", "u", "id", "il", "j", "k", "ij", "iu", "hi"], "uf": ["lu", "pkg", "um", "Pref", "uge", "UFF", "ux", "ul", "Ut", "ue", "AU", "Sup", "sup", "aus", "us", "bo", "ucc", "uff", "uph", "ull", "NF", "buf", "f", "uh", "uc", "fo", "ud", "uci", "UL", "hum", "ulf", "utf", "ui", "xff", "auc", "du", "u", "Universal", "ub", "U", "UF", "ume"], "inconvenience": ["inconveniency", "inconverction", "inconsecutient", "inconsecuterence", "inconstverience", "inconceptence", "inconceptiences", "invervenience", "inconvenence", "inconsverterence", "inconvertction", "inCONvenibility", "inconvertience", "inconstveniency", "inconstveniences", "inCONveniences", "inconvinient", "inconviences", "inconverence", "inconvenction", "inverveniance", "inconvenibility", "inconveriance", "inconceptiency", "inconvenient", "inconvinience", "inCONvience", "inconceptience", "invervinction", "inconverient", "inconsecutiences", "inCONvibility", "inconvertiance", "inconveriency", "inCONvenient", "inCONvenience", "inconstveriences", "invervinience", "inconveniance", "inconvience", "inconvererence", "inconsvertient", "inconveriences", "inconsvenient", "inconverterence", "inconsvertience", "inconstverence", "inconvinibility", "inconvibility", "inconvertiences", "inconverience", "inconsecutiency", "inconvertient", "inconveniences", "inconsecutience", "invervenction", "inconstvenience", "inconsvenience", "inverviniance", "inconviniences", "inconviniance", "inconvient", "inconsveniences", "inCONviences", "inconvertibility", "inconsecutence", "inconstvenence", "inconvinction", "inverveniences", "inconsvenerence", "inCONvient", "inverviniences", "inconvenerence", "inconstveriency", "inconsvertiences"], "inconvenience_list": ["inconvenience_LIST", "inconvenience_dict", "inconvenience2lists", "inconvenience2dict", "inconvenience_set", "inconveniences_List", "inconvenient_LIST", "inconvenience_List", "inconvenience2List", "inconvenient_list", "inconveniences_LIST", "inconvenient_set", "inconvenient_lists", "inconveniences_dict", "inconvenience_lists", "inconveniences_list", "inconvenience2list", "inconveniences_lists"]}}
{"code": "def divisors(n):\\n    divisors = []\\n    for i in range(1, int(n**0.5)+1):\\n        if n%i == 0:\\n            divisors.append(i)\\n            if i != n//i:\\n                divisors.append(n//i)\\n    return sorted(divisors)\\n\\nN = int(input())\\n\\nans = len(divisors(N-1)) -1\\n\\nfor k in divisors(N)[1:]:\\n    N_ = N\\n    while N_ % k == 0:\\n        N_ = N_//k\\n    if N_ % k == 1:\\n        ans += 1\\n\\nprint(ans)\\n\\n", "target": "462", "substitutes": {"n": ["a", "x", "nt", "ni", "gn", "d", "p", "ln", "on", "en", "ne", "g", "cn", "long", "sn", "r", "c", "m", "ns", "o", "h", "f", "b", "num", "t", "fn", "nb", "mn", "non", "na", "v", "e", "an", "int", "nan", "nu", "nw", "size", "nn", "ll", "l", "np", "u", "j", "y"], "divisors": ["divotor", "digisctors", "divesors", "divalions", "divitions", " divistors", "Divisores", "multizators", "divesor", "Divsions", "Divisctors", "divizores", "multiplizor", "divusors", "divisores", "divitctors", "Divisor", "multiplisores", "Divsctors", "divizor", "divistORS", "divusor", "multiplizores", "divistions", "divisators", "divizators", "multizores", "digitores", "digitctors", "divotores", "divalores", "digizors", "multiplisor", "multisators", "multiplisors", "divensators", "digitions", "divensions", "divotctors", "Divisions", "divitores", "divensctors", "digisions", "divisions", "divusores", "divesctors", "multizor", "multisors", "divensor", "digisors", "divistctors", "multisor", "Divsors", "divesores", "divsores", "divsors", "divisORS", " divistORS", "digisators", "divisor", "divitors", "digizctors", " divisions", " divisators", "divesions", "divsor", "multiplisions", "multiplizors", "digizators", "divsions", "multisores", "digizions", "digitors", " divisORS", " divistions", "Divisors", "divalators", "divisctors", " divistators", "divotions", "divistators", "digisores", "multizors", "divalctors", "divusators", "divalor", "Divsores", "divusions", "Divsor", "divitORS", "multiplizions", "divotors", "divensores", "divensORS", "divalors", "divizctors", "divensors", "divizors", "divizions", "divistors", "divsctors", "divitators"], "i": ["\u00ed", "mi", "ki", "xi", "x", "ia", "ni", "ite", "ci", "p", "di", "ai", "I", "m", "bi", "yi", "qi", "ic", "ix", "o", "ip", "ind", "b", "t", "io", "si", "li", "ii", "v", "int", "ti", "im", "it", "ini", "zi", "q", "pi", "l", "phi", "u", "j", "y", "Ni", "ik", "ij", "iu", "hi"], "N": ["SN", "CNN", "M", "NS", "T", "EN", "GN", "NI", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "NP", "CN", "NR", "NT", "NH", "H", "V", "NO", "Z", "NUM", "S", "NE", "B", "J", "G", "ND", "Num", "P", "NPR", "A", "Sn", "D", "NB", "Y", "Size", "Len", "Ni", "K", "F", "UN", "AN", "TN", "C"], "ans": ["ars", "ANS", "ants", "ats", "ians", "Ns", "acs", "ai", "aus", "ros", " Ans", "ns", "ann", "rans", "rs", "ks", "anas", "leans", "ins", "ras", "ons", "ms", "amps", "ls", "ents", "ens", "cons", "uns", "na", "an", "iann", "Ann", "anks", "s", "nan", "nas", "aos", "nn", "ads", "cs", "arts", "os", "lan", "AN", "ds"], "k": ["ck", "km", "ki", "kn", "uk", "a", "kr", "x", "kh", "kl", "ijk", "d", "p", "g", "kar", "ke", "kid", "w", "r", "c", "z", "m", "dk", "ks", "kw", "ko", "b", "tk", "num", "t", "key", "kj", "v", "ok", "ch", "ikk", "ku", "kt", "l", "u", "kk", "ka", "kan", "K", "ik", "sk", "j", "ket", "mk", "unk"], "N_": ["UN_", "n2", "SN_", "n_", "NM_", "N2", "H_", "K_", "Nj", " Nj", "nj", "UN2", " N2", "Kj"]}}
{"code": "S = str(input())\\nx = S.count(\"0\")\\ny = S.count(\"1\")\\nprint(2*min(x, y))\\n", "target": "40", "substitutes": {"S": ["STR", "M", "N", "ITS", "NS", "T", "SF", "ES", "BS", "SS", "SL", "SB", "X", "JS", "L", "RS", "PS", "VS", "SI", "CS", "TS", "CSS", "OS", "H", "GS", "V", "TN", "IS", "Sample", "SOURCE", "B", "FS", "Q", "G", "P", "SE", "US", "s", "MS", "SP", "SU", "ST", "NEWS", "DS", "Y", "SA", "U", "F", "String", "Z", "C"], "x": ["wx", "xi", "ex", "ux", "xc", "left", "X", "xa", "rx", "w", "ox", "z", "xxxx", "xt", "ix", "tx", "ax", "xd", "v", "fx", " xx", "width", "www", "xy", "xs", "mx", "dx", "xx", "yx", "index", "px", "ross", "xf"], "y": ["ty", "ys", "aily", "yer", "cy", "i", "oy", "yo", "z", "ies", "ny", "yi", "vy", "o", "py", "b", "dy", "axy", "yl", "ot", "uy", "isy", "v", "ey", "iy", "xy", "ch", "yt", "Y", "yy", "fy", "j", "ay", "ym"]}}
{"code": "def resolve():\\n    a,b = map(int,input().split())\\n    if a%2 != b%2:\\n        print('IMPOSSIBLE')\\n    else:\\n        print((a+b)//2)\\nresolve()", "target": "83", "substitutes": {"a": ["x", "ia", "sta", "ae", "ac", "ab", "aj", "p", "ta", "ach", "g", "i", "r", " A", "c", "m", "ma", "eas", "ga", "ea", "la", "aaa", "act", "ax", "f", "t", "alpha", "da", "an", "e", "A", "al", "at", "sa", "aka", "ity", "app", "au", "oa", "aa", "l", "am", "y", "area", "ba", "ca"], "b": ["bis", "n", "sb", "ab", "bar", "d", "p", "db", "sub", "g", "ib", "i", "r", "bg", "c", "bot", "m", "bi", "fb", "rb", "mb", "h", "be", "ob", "br", "f", "bc", "gb", "t", "nb", "B", "bb", "v", "eb", "cb", "l", "bp", "bs"]}}
{"code": "s = input()\\nt = input()\\nn = len(s)\\nfor i in range(0,n):\\n    if s[i:] + s[:i] == t:\\n        print(\"Yes\")\\n        quit()\\nprint(\"No\")", "target": "721", "substitutes": {"s": ["a", "x", "str", "ats", "js", "p", "g", "r", "w", "hs", "c", "ts", "m", "ns", "rs", "ins", "sl", "h", "ms", "f", "b", "sp", "S", "ss", "parts", "si", "its", "tes", "v", "strings", "gs", "sa", "sv", "xs", "st", "ments", "sts", "l", "q", "cs", "se", "os", "y", "qs", "ds", "ps", "bs"], "t": ["tm", "ty", "T", "ta", "p", "test", "ct", "r", "tc", "wt", "c", "ts", "m", "txt", "type", "te", "o", "tree", "dt", "f", "pt", "ot", "v", "bt", "e", "at", "tt", "it", "st", "rt", "q", "j", "vt", "y"], "n": ["N", "x", "nt", "ni", "ln", "d", "p", "en", "ne", "sn", "r", "c", "m", "ns", "o", "nl", "f", "b", "num", "len", "nb", "nor", "mn", "na", "v", "nc", "nu", "nn", "l", "q", "np", "j", "k"], "i": ["mi", "xi", "x", "ia", "ci", "gi", "d", "p", " j", "di", "ai", "I", "c", "m", "batch", "z", "yi", "qi", "ic", "ix", "ind", "f", "b", "si", "li", "ii", "v", "ti", "oi", "iy", "im", "ini", "ui", "zi", "q", "l", "pi", "u", "j", "y", "k", "ij", "index", "iu"]}}
{"code": "from math import ceil\\nn, *CSF = map(int, open(0).read().split())\\nA = []\\nfor i in range(0, 3*(n-1), 3):\\n    t = 0\\n    for c, s, f in zip(CSF[i::3], CSF[i+1::3], CSF[i+2::3]):\\n        if t <= s:\\n            t = s + c\\n        else:\\n            t = ceil((t-s) / f) * f + s + c\\n    A.append(t)\\nA.append(0)\\nprint(*A, sep='\\n')", "target": "529", "substitutes": {"n": ["a", "N", "nt", "str", "ln", "d", "p", "names", "name", "norm", "g", "r", "w", "sn", "m", "z", "ns", "nl", "h", "b", "fn", "nb", "out", "na", "v", "Num", "nc", "nu", "nn", " fn", "l", "np", "q", " N", "j", "k"], "CSF": ["csN", "CSB", "CSf", "csB", "LSFrame", "LSV", "PSFrame", "CPC", "CPFP", "CPN", "OSFS", "csPF", "PSF", "KSPF", "csV", " CSFP", "LSFs", "csFS", "DSB", "DSF", "PSV", "CSC", "CSN", "PSFs", " CSFrame", "CSFP", "csF", " CSN", "KSF", "csf", "KSf", " CSC", "CPF", "csFP", " CSB", " CSFs", "CSV", "OSPF", "CSFs", "DSV", "LSF", "OSF", "CSFrame", "CSPF", "csC", "CSFS", " CSV", "KSFS", "DSN", "OSf"], "A": ["a", "GA", "M", "N", "Answer", "T", "Each", "All", "An", "Ar", "Alpha", "AH", "AU", "AT", "R", "mA", "AL", "AV", "AST", "And", "AB", "H", "AA", "LA", "As", "GS", "WA", "AR", "C", "S", "VA", "EA", "B", "G", "This", "HA", "Address", "P", "CA", "AY", "JA", "AF", "TA", "D", "AM", "Y", "SA", "AC", "F", "AN", "The", "Array", "ACT", "AP"], "i": ["mi", "xi", "x", "ci", "gi", "cli", "name", " j", "g", "di", "ai", "I", "batch", "bi", "qi", "yi", "info", "ic", "ix", "ip", "ind", "b", "sim", "li", "ii", "key", "v", "e", "ti", "oi", "im", "it", "zi", "ui", "ini", "\u0438", "phi", "pi", "id", "k", "y", "j", "index", "ij", "iu", "hi"], "t": ["tm", "a", "ty", "T", "to", "nt", "ta", "p", "d", "ret", "g", "test", "ct", "qt", "td", "r", "wt", "tc", "ts", "tip", "set", "type", "total", "ant", "te", "o", "tp", "h", "dt", "tg", "b", "time", "pt", "ot", "out", "v", "e", "tn", "int", "at", "tt", "tr", "tf", "it", " T", "new", "et", "q", "l", "tmp", "vt", "y", "tz", "temp", "trace"], "c": ["a", "ce", "lc", "x", "ci", "d", "p", "cd", "g", "ct", "r", "tc", "z", "m", "fc", "ic", "o", "h", "b", "sc", "v", "e", "cp", "cc", "co", "cu", "cb", "l", "u", "cs", "k", "j", "cm", "cr", "cf", "ca", "C", "ac"], "s": ["a", "sb", "sw", "sh", "str", "ats", "p", "g", "fs", "sf", "r", "sn", "sys", "ts", "m", "south", "us", "hs", "ns", "z", "rs", "ins", "o", "sl", "ms", "sing", "ls", "b", "sp", "S", "ss", "si", "sc", "v", "e", "gs", "sa", "st", "sv", "q", "l", "sd", "cs", "os", "ps"], "f": ["a", "x", "d", "p", "fm", "g", "fs", "sf", "z", "m", "fc", "full", "fb", "o", "h", "fa", "fr", "b", "df", "fac", "fo", "fl", "ff", "v", "e", "fx", "tf", "q", "l", "u", "float", "fi", "F", "cf", "frac"]}}
{"code": "n=int(input())\\n\\nans=divmod(n,2)\\nA=ans[0]+ans[1]\\n\\nprint(A)", "target": "748", "substitutes": {"n": ["a", "N", "x", "nt", "ln", "d", "p", "ne", "cn", "i", "sn", "c", "m", "ns", "o", "nl", "f", "num", "t", "nia", "len", "nb", "mn", "na", "v", "nc", "s", "nan", "nu", "nw", "nn", "q", "l", "np", "network"], "ans": ["ars", "humans", "tan", "ANS", "ants", "ats", "ians", "gn", "atan", "cn", "Ns", "aus", "aned", "ates", "ns", "vals", "anus", "ann", "rs", "mas", "anas", "leans", "offs", "ins", "vers", "ons", "ms", "amps", "ens", "cons", "mn", "ces", "can", "an", "anes", "oss", "aces", "s", "idents", "cus", "ions", "nas", "ands", "aos", "ams", "ads", "cs", "asms", "AN"], "A": ["a", "GA", "M", "N", "Answer", "All", "Va", "An", "IA", "Ar", "Alpha", "AU", "X", "R", "Av", "L", "AV", "And", "AB", "AE", "H", "AA", "As", "O", "V", "S", "B", "This", "P", "HA", "AP", "Address", "CA", "At", "JA", "D", "AF", "AM", "Y", "SA", "K", "The", "AN", "ACT", "Array", "C"]}}
{"code": "from collections import Counter\\n\\nclass UnionFind:\\n    #n\u500b\u306e\u8981\u7d20\u3092\u521d\u671f\u5316\\n    def __init__(self, n):\\n        self.n = n\\n        self.par = [i for i in range(n)]\\n        self.rank = [0] * n\\n    \\n    #\u6728\u306e\u6839\u3092\u6c42\u3081\u308b\\n    def find(self, x):\\n        if self.par[x] == x:\\n            return x\\n        else:\\n            self.par[x] = self.find(self.par[x])\\n            return self.par[x]\\n    \\n    #x\u3068y\u306e\u5c5e\u3059\u308b\u96c6\u5408\u3092\u4f75\u5408\\n    def unite(self, x, y):\\n        x = self.find(x)\\n        y = self.find(y)\\n        if x == y:\\n            return\\n        if self.rank[x] < self.rank[y]:\\n            self.par[x] = y\\n        else:\\n            self.par[y] = x\\n            if self.rank[x] == self.rank[y]:\\n                self.rank[x] += 1\\n    \\n    #x\u3068y\u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u5224\u5b9a\\n    def same(self, x, y):\\n        return self.find(x) == self.find(y)\\n\\n    #\u8981\u7d20x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3059\u308b\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\\n    def members(self, x):\\n        root = self.find(x)\\n        return [i for i in range(self.n) if self.find(i) == root]\\n\\n\\nN, K, L = map(int, input().split())\\nroads = [list(map(int, input().split())) for i in range(K)]\\ntrains = [list(map(int, input().split())) for i in range(L)]\\n\\nuf_road = UnionFind(N)\\nuf_train = UnionFind(N)\\n\\nfor road in roads:\\n    x, y = road\\n    uf_road.unite(x-1, y-1)\\n\\nfor train in trains:\\n    x, y = train\\n    uf_train.unite(x-1, y-1)\\n\\npairs = []\\nfor i in range(N):\\n    pairs.append((uf_road.find(i), uf_train.find(i)))\\n\\ncnt = Counter(pairs)\\n\\nans = [cnt[pair] for pair in pairs]\\nprint(*ans)", "target": "21", "substitutes": {}}
{"code": "x = input()\\nif x == 'a' or x =='e' or x == 'i' or x =='o' or x =='u':\\n    print('vowel')\\nelse:\\n    print('consonant')", "target": "120", "substitutes": {"x": ["a", "wx", "n", "xi", "ex", "any", "str", "ci", "xe", "p", "xes", "on", "ux", "g", "xc", "ct", "X", "xa", "code", "rx", "w", "c", "ox", "z", "pe", "xt", "ix", "tx", "act", "ax", "f", "b", "xd", "t", "rit", "no", "xxxxxxxx", " tx", "out", "key", "v", "e", "int", " xx", "fx", "has", "xf", "s", "xs", "xb", "com", "co", "inx", "xx", "l", " cx", "lat", "u", "lex", "y", "px", "xp", "text", "zx"]}}
{"code": "R=int(input())\\nG=int(input())\\na=abs(R-G)\\nif G>R:\\n    print(max(R,G)+a)\\nelse:\\n    print(min(R,G)-a)", "target": "524", "substitutes": {"R": ["M", "N", "T", "TR", "RGB", "RB", "RG", "JR", "Right", "X", "L", "RS", "Res", "r", "RI", "RF", "RM", "NR", "Re", "DR", "RA", "RE", "GR", "H", "W", "IR", "V", "AR", "C", "ER", "RT", "OR", "GRE", "S", "B", "Q", "BR", "P", "A", "RL", "CR", "Red", "Is", "RC", "RR", "RP", "D", "RO", "Mr", "SR", "PR", "MR"], "G": ["GA", "M", "VG", "T", "Gu", "RG", "GN", "GO", "GM", "CG", "g", "I", "L", "Graphics", "Gs", "AG", "GH", "TG", "BG", "GE", "GR", "H", "W", "GV", "GG", "GS", "V", "MG", "GC", "GRE", "GF", "B", "J", "Q", "GB", "P", "IG", "A", "E", "GP", "PG", "LG", "GI", "FG", "Greg", "GT", "F", "Ge", "GU", "Z"], "a": ["ia", "sta", "ae", "to", "ac", "ab", "aff", "ta", "p", "g", "xa", "i", "w", "ma", "ga", "o", "eff", "ea", "pa", "b", "alpha", "da", "amount", "ee", "na", "an", "e", "A", "at", "sa", "qa", "sha", "au", "ed", "aa", "am", "u", "er", "ya", "eta", "area", "ca"]}}
{"code": "# n, m, l = map(int, input().split())\\n\\n# list_n = list(map(int, input().split()))\\n\\n# n = input()\\n# list = [input() for i in range(N)\\n\\n# list = [[i for i in range(N)] for _ in range(M)]\\n\\nimport sys\\ninput = sys.stdin.readline\\n\\nN, M, X = map(int, input().split())\\nlist_A = list(map(int, input().split()))\\nl = 0\\nr = 0\\n\\nfor A in list_A:\\n    if A < X:\\n        l += 1\\n    else:\\n        r += 1\\n\\nprint(min(l, r))\\n", "target": "660", "substitutes": {}}
{"code": "import sys\\nimport itertools\\nsys.setrecursionlimit(1000000000)\\nfrom heapq import heapify,heappop,heappush,heappushpop\\nimport math\\nimport collections\\nimport copy\\n\\nn = int(input())\\ndp = [0]*(1000001)\\ndp[0] = 1\\ndp[1] = 1\\nfor i in range(2,n+1):\\n    dp[i] = dp[i-1] + dp[i-2]\\nprint(dp[n])\\n", "target": "152", "substitutes": {"n": ["a", "N", "x", "nt", "ln", "d", "p", "ne", "cn", "g", "dn", "sn", "r", "c", "m", "z", "ns", "o", "nl", "h", "num", "t", "nb", "mn", "na", "v", "nc", "nm", "nan", "nu", "nw", "nn", "l", "number", "np", "q", "u", "j", "k", "nd"], "dp": ["pkg", "osp", "dro", "dos", "gc", "d", "p", "db", "dm", "cd", "vp", "dial", "jp", "sup", "dh", "password", "dl", "pb", "bsp", "wd", "tp", "decl", "dt", "df", "dc", "dep", "hp", "da", "DP", "wp", "parse", "dr", "pd", "lp", "resp", "delay", "deb", "cp", "lip", "bps", "eb", "hyp", "dq", "yp", "dd", "dj", "np", "du", "grad", "pp", "ds", "ps", "xp", "ctl", "adr"], "i": ["mi", "xi", "x", "me", "gi", "p", "di", "ai", "I", "r", "z", "m", "bi", "qi", "info", "ic", "o", "ix", "ip", "ind", "f", "b", "multi", "si", "li", "ii", "key", "v", "int", "ti", "s", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "u", "j", "y", "k", "ij", "iu", "hi"]}}
{"code": "N,A,B = map(int,input().split())\\na = N//(A+B)\\nb = N%(A+B)\\nif b>A:\\n    print(a*A+A)\\nelse:\\n    print(a*A+b)", "target": "716", "substitutes": {"N": ["CNN", "n", "M", "NS", "T", "NV", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "NF", "V", "TN", "S", "J", "Q", "P", "E", "D", "NB", "Ni", "F", "AN", "Z", "FN", "NG", "C"], "A": ["GA", "M", "T", "API", "An", "IA", "Alpha", "AH", "AU", "AT", "R", "ACC", "I", "mA", "NA", "AL", "Area", "X", "L", "AB", "AE", "RA", "ALL", "H", "ANY", "LA", "AA", "W", "As", "V", "AR", "C", "AS", "S", "J", "Q", "G", "This", "HA", "P", "CA", "At", "E", "AF", "TA", "D", "AM", "Y", "SA", "U", "AC", "F", "AN", "K", "Array", "AP"], "B": ["Other", "M", "BI", "T", "BL", "SB", "R", "I", "L", "IB", "AB", "BER", "H", "V", "BT", "S", "BC", "Bar", "BE", "J", "Q", "GB", "G", "P", "BB", "E", "TB", "Bern", "D", "EB", "Y", "BO", "DB", "BA", "Z", "C"], "a": ["aq", "n", "x", "ia", "ae", "ab", "p", "g", "ai", "xa", "i", "r", "w", "c", "ma", "ga", "aaa", "result", "f", "t", "alpha", "da", "add", "na", "an", "out", "all", "al", "ap", "at", "sa", "s", "sha", "au", "div", "aa", "l", "am", "ar", "j", "area", "ba", "ca", "ac"], "b": ["n", "sb", "ab", "d", "p", "db", "beta", "g", "i", "r", "c", "z", "m", "bi", "fb", "rb", "h", "be", "f", "bc", "t", "nb", "bb", "v", "e", "s", "cb", "l", "u", "j", "y", "bs", "ba"]}}
{"code": "#/usr/bin/env python\\nfrom functools import *\\nfrom math import *\\n\\nn = int(input())\\na = list(map(int, input().split()))\\n\\ngcds = []\\nlgcd = []\\nrgcd = [0 for _ in range(n)]\\nl = r = 0 \\nfor i in range(n):\\n    if i == 0:\\n        l = 0 \\n    else:\\n        l = gcd(l, a[i-1])\\n    lgcd.append(l)\\n\\nfor i in range(n):\\n    if i == 0:\\n        r = 0 \\n        rgcd[n-1] = r \\n    else:\\n        r = gcd(r, a[n-i])\\n        rgcd[n-i-1] = r \\n\\nfor i in range(n):\\n    g = gcd(lgcd[i], rgcd[i])\\n    gcds.append(g)\\n\\nprint(max(gcds))\\n", "target": "94", "substitutes": {}}
{"code": "s = input()\\nl = len(s)\\n\\ndef check(a):\\n  n = len(a)\\n  if n % 2 == 0:\\n    for i in range(n//2):\\n      if a[i] != a[n-i-1]:\\n        return False\\n    return True\\n  else:\\n    for i in range((n-1)//2):\\n      if a[i] != a[n-i-1]:\\n        return False\\n    return True\\n\\nres = \"No\"\\nif check(s):\\n  #print(s)\\n  if check(s[:(l-1)//2]):\\n    if check(s[(l+3)//2 - 1:]):\\n      res = \"Yes\"\\n\\nprint(res)", "target": "420", "substitutes": {"s": ["sb", "x", "str", "d", "p", "g", "w", "r", "c", "ts", "m", "z", "ns", "rs", "input", "o", "h", "ls", "f", "b", "t", "S", "ss", "v", "e", "gs", "an", "sq", "string", "sa", "sv", "q", "ar", "y", "se", "ds", "ps"], "l": ["lc", "ln", "p", "g", "L", "c", "m", "z", "el", "o", "nl", "h", "ls", "f", "hl", "t", "len", "lo", "li", "v", "list", "q", "ll", "le", "il", "j"], "a": ["x", "to", "ae", "sta", "ba", "ab", "p", "ana", "ach", "g", "va", "ai", "r", "w", "\u00e1", "c", "ma", "m", "set", "z", "ata", "eas", "window", "o", "h", "aaa", "la", "act", "abs", "b", "f", "t", "alpha", "art", "wa", "out", "na", "an", "e", "v", "all", "att", "A", "al", "obj", "at", "sa", "app", "ed", "au", "aa", "am", "ar", "aw", "j", "data", "area", "ack", "past", "ac"], "n": ["nr", "N", "x", "net", "nt", "ni", "gn", "ln", "d", "p", "en", "on", "name", "names", "ne", "cn", "g", "norm", "dn", "sn", "c", "m", "z", "ns", "note", "o", "nl", "h", "ren", "f", "num", "t", "nia", "len", "nb", "no", "mn", "na", "v", "an", "nc", "all", "nan", "it", "nu", "size", "nn", "ll", "np", "number", "ng", "j"], "i": ["\u00ed", "mi", "ki", "xi", "x", " ii", "ia", "to", "ci", "gi", "cli", " j", "di", "iq", "ai", "I", "iter", "ih", "yi", "qi", "ic", "ix", "o", "ip", "h", "iri", "ind", "b", "t", "multi", "si", "li", "ii", "ji", "v", "ei", "int", "ti", "ori", "e", "iy", "im", "it", "zi", "\u0438", "q", "phi", "pi", "u", "id", "j", "y", "index", "ij", "ik", "iu"], "res": [" Res", "str", "resh", "p", "name", "ret", "reset", "rep", "re", "Res", "r", " results", "rs", "RES", "ix", "val", "act", "ress", "response", "results", "resp", "out", "e", "rest", "pres", "j", "os", "ps"]}}
{"code": "x = input()\\nx=x.split()\\nx.sort()\\n\\n\\nif x == ['5','5','7']:\\n    print('YES')\\nelse:\\n    print('NO')", "target": "45", "substitutes": {"x": ["wx", "n", "xi", "ex", "foo", "xe", "p", "xes", "ux", "g", "xc", "test", "ct", "X", "xa", "rx", "w", "c", "ox", "z", "xt", "input", "xml", "hex", "ix", "tx", "ax", "f", "b", "xd", "config", "t", "yout", "xxxxxxxx", "check", "key", "v", "fx", "list", "cox", "xy", "xs", "mx", "\u00e7", "co", "dx", "xx", "l", "hello", "lex", "y", "px", "xp", "xf"]}}
{"code": "S = input()\\n\\nprint(S.replace('2017', '2018'))\\n", "target": "49", "substitutes": {"S": ["M", "N", "T", "SF", "SH", "BS", "SS", "SL", "SB", "R", "SER", "I", "L", "SI", "CS", "SM", "H", "V", "B", "G", "P", "SE", "A", "E", "s", "SU", "SP", "D", "ST", "SA", "F", "C"]}}
{"code": "number=list(map(int,input().split()))\\nN,M,K=number[0],number[1],number[2]\\nA=list(map(int,input().split()))\\nB=list(map(int,input().split()))\\na=[0]\\nb=[0]\\nfor i in range(1,len(A)+1):\\n    tmp=a[i-1]+A[i-1]\\n    a.append(tmp)\\n    \\nfor i in range(1,len(B)+1):\\n    tmp=b[i-1]+B[i-1]\\n    b.append(tmp)\\n\\nans=0\\nj=M\\nfor i in range(N+1):\\n    if a[i]>K:\\n        break\\n    while b[j]>K-a[i]:\\n        j-=1\\n    ans=max(ans,i+j)\\n\\nprint(ans)\\n", "target": "244", "substitutes": {"number": ["nr", "n", "comment", "ter", "random", "currency", "code", "value", "Number", "zero", "object", "map", "document", "type", "total", "note", "message", "BER", "second", "word", "num", "count", "NUM", "news", "integer", "no", "nb", "resource", "record", "numbered", "volume", "na", "int", "byte", "normal", "date", "size", "one", "hello", "np", "three", "umber", "float", "range", "basic", "notation", "square", "production", "function", "version"], "N": ["SN", "n", "NS", "T", "GN", "NI", "Ns", "X", "I", "L", "NA", "NM", "NN", "NR", "NT", "H", "V", "No", "S", "J", "ND", "Num", "P", "D", "NB", "MN", "Ni", "AN", "C"], "M": ["T", "CM", "R", "I", "X", "L", "NM", "MX", "m", "Mi", "H", "MM", "V", "MC", "S", "J", "Q", "G", "P", "MP", "MA", "E", "MS", "D", "Y", "MN", "MI", "MT", "F", "AN", "Z", "C"], "K": ["T", "KN", "KR", "MK", "Mu", "X", "R", "I", "KK", "H", "W", "FK", "O", "MC", "KS", "V", "PK", "S", "J", "Q", "SK", "G", "P", "E", "Mask", "HK", "MS", "VK", "D", "Y", "MN", "k", "U", "F", "KI", "Z", "KE", "KA", "C"], "A": ["GA", "T", "Al", "An", "IA", "Ar", "Alpha", "AU", "AT", "I", "L", "One", "AL", "AV", "AST", "AB", "App", "AE", "H", "AA", "LA", "As", "WA", "AI", "AR", "This", "Ant", "CA", "MA", "At", "JA", "AF", "ATA", "AM", "Ac", "SA", "AC", "BA", "AP"], "B": ["LB", "BI", "T", "RB", "BL", "BS", "VB", "OB", "Bs", "SB", "I", "L", "IB", "AB", "BT", "BE", "BC", "J", "BR", "GB", "WB", "PB", "BB", "USB", "BM", "TB", "Bern", "D", "NB", "DB", "Java", "Bill", "BA", "JB", "BY", "C"], "a": ["n", "ia", "sta", "ae", "ac", "ab", "aj", "p", "ta", "g", "va", "ai", "apt", "c", "ace", "ma", "m", "ata", "eas", "ga", "ea", "la", "aaa", "pa", "h", "t", "alpha", "art", "da", "apa", "an", "att", "e", "al", "ap", "at", "sa", "s", "app", "au", "oa", "aa", "l", "am", "ar", "u", "area", "ba", "ca", "ao"], "b": ["bis", "sb", "ab", "bar", "lib", "p", "db", "split", "beta", "d", "g", "ib", "c", "m", "z", "bi", "wb", "fb", "rb", "by", "o", "mb", "be", "ob", "br", "bc", "gb", "t", "nb", "bb", "v", "bt", "eb", "base", "cb", "bl", "l", "bp", "bes", "bin", "bs", "ba"], "i": ["ki", "n", "x", "p", "ix", "ind", "ri", "multi", "v", "ti", "oi", "it", "ini", "\u0438", "q", "phi", "id", "init", "ia", "me", "ai", "jp", "I", "iter", "pre", "m", "status", "qi", "iti", "ic", "si", "key", "ei", "im", "s", "zi", "l", "u", "ij", "ci", "gi", "ski", "ip", "io", "ii", "ui", "pi", "index", "ik", "iii", "mi", "xi", "cli", "name", "di", "iq", "bi", "yi", "f", "t", "li", "ji", "ori", "int", "iy", "at", "ati", "asi", "y", "iu", "hi"], "tmp": ["tm", "stuff", "pkg", "cmp", "perm", "proxy", "lib", "mp", "ret", "test", "jp", "td", "mmm", "txt", "pre", "ppo", "mut", "img", "prime", "ctx", "gt", "cur", "sp", "t", "pretty", "part", "trap", "temp", "resp", "qq", "emp", "obj", "MP", "xy", "cp", "tt", "orig", "tf", "TT", "clip", "proc", "etc", "yy", "copy", "np", "attr", "pp", "comp", "mk", "opp"], "ans": ["ones", "n", "ANS", "ians", "ats", "ants", "names", "outs", "ai", "ows", "aus", "lines", "us", "aned", "ns", "ann", "rs", "eas", "anas", "ks", "offs", "ins", "ons", "ms", "amps", "ls", "ents", "ens", "ots", "news", "cas", "anc", "mn", "uns", "ings", "can", "an", "posts", "iann", "anks", "aps", "oss", "s", "ions", "ands", "aos", "vs", "ads", "cs", "arts", "ags", "os", "es", "asms", "ds", "ps", "jobs"], "j": ["next", "json", "n", "uj", "ja", "js", "d", "p", "aj", "g", "jp", "jc", "m", "z", "ns", "jj", "bi", "o", "res", "h", "jl", "fr", "br", "jac", "t", "je", "J", "bj", "li", "ji", "v", "kj", "obj", "at", "s", "it", "jump", "q", "l", "dj", "k", "y", "index", "ij", "jit"]}}
{"code": "def DFS(N,X):\\n    if N==0:return 0 if X<=0 else 1\\n    elif X<=1+B[N-1]:\\n        return DFS(N-1,X-1)\\n    else:\\n        return P[N-1]+1+DFS(N-1,X-2-B[N-1])\\n\\n\\nn,x=map(int,input().split())\\nB,P=[1],[1]\\n\\nfor i in range(n):\\n    P.append(P[i]*2+1)\\n    B.append(B[i]*2+3)\\n\\nprint(DFS(n,x))", "target": "485", "substitutes": {"N": ["SN", "Name", "M", "NS", "T", "NL", "NC", "GN", "NI", "Ns", "I", "R", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "ANY", "Node", "V", "NO", "NOTE", "Z", "GEN", "NUM", "S", "MAN", "NE", "J", "G", "ND", "Num", "A", "Sn", "D", "OUT", "NB", "Y", "MN", "Ni", "K", "AN", "TN", "FN", "NG", "C"], "X": ["INT", "M", "IX", "T", "IC", "TX", "IP", "I", "EX", "L", "R", "TY", "MX", "ox", "UX", "OX", "ICE", "WH", "AX", "H", "ZX", "W", "XY", "CT", "V", "EXP", "XP", "S", "DX", "XM", "J", "Q", "Tx", "A", "E", "XX", "XT", "XXX", "Y", "XL", "U", "K", "F", "Z", "C", "Xi"], "n": ["nt", "d", "p", "en", "ln", "on", "ne", "g", "cn", "r", "sn", "c", "m", "z", "ns", "o", "nl", "h", "b", "num", "t", "nb", "no", "mn", "na", "v", "int", "nc", "nan", "nu", "size", "q", "l", "nn", "np", "pi", "number", "network", "j", "y"], "x": ["xi", "ex", "xe", "p", "xc", "xa", "rx", "c", "ox", "m", "xt", "xml", "xxx", "ix", "tx", "ax", "b", "xd", "t", "v", "e", "int", "xy", "xs", "mx", "dx", "xx", "l", "u", "y", "xp", "xf"], "B": ["LB", "M", "BI", "T", "RB", "VB", "BS", "BL", "Bs", "SB", "R", "I", "L", "Two", "IB", "AB", "BW", "BG", "H", "V", "BT", "b", "BP", "S", "BC", "BE", "J", "Q", "BR", "G", "PB", "WB", "BB", "A", "BM", "TB", "FB", "D", "EB", "NB", "Y", "DB", "BA", "Z", "BY", "C"], "P": ["PU", "M", "T", "p", "TP", "I", "R", "L", "PS", "Pay", "NP", "PT", "H", "PA", "CP", "V", "BP", "PK", "S", "PN", "J", "Q", "DP", "G", "Pro", "A", "E", "PP", "GP", "PF", "D", "Ps", "PO", "Y", "PD", "U", "F", "PR", "C"], "i": ["mi", "ki", "xi", "uri", "me", "cli", "gi", "p", "di", "I", "r", "batch", "bi", "qi", "info", "ic", "ip", "ind", "b", "multi", "ri", "io", "si", "sim", "ii", "li", "ji", "key", "ori", "ti", "iy", "im", "it", "zi", "ui", "ini", "slice", "pi", "id", "index", "y", "ij", "iri", "hi", "chain"]}}
{"code": "n,k,q = map(int,input().split())\\na = [int(input()) for i in range(q)]\\nb = [0 for i in range(n)]\\n\\nfor i in range(q):\\n    num_ans_person = a[i]-1\\n    b[num_ans_person] += 1\\n\\nfor i in range(n):\\n    if k-q+b[i]>0:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")", "target": "336", "substitutes": {"n": ["nr", "N", "x", "nt", "ln", "d", "p", "on", "ne", "cn", "g", "r", "c", "m", "ns", "o", "num", "t", "nb", "mn", "na", "v", "an", "e", "nc", "s", "nu", "nn", "l", "j", "y"], "k": ["km", "ki", "ek", "kn", "max", "kr", "kh", "kl", "p", "ak", "ke", "w", "ky", "c", "m", "z", "dk", "ks", "kw", "ko", "f", "num", "kok", "kj", "v", "ok", "ku", "u", "kk", "sk", "j", "K", "ik", "ka", "kg", "y", "mk"], "q": ["qv", "x", "d", "p", "qu", "iq", "qt", "quant", "g", "ke", "r", "w", "c", "m", "z", "qi", "query", "o", "h", "f", "num", "t", "Q", "v", "e", "sq", "qq", "qa", "dq", "u", "y", "j", "qs", "ik"], "a": ["sta", "ae", "ab", "era", "ta", "ai", "c", "ma", "eas", "ga", "ea", "la", "aaa", "act", "abs", "alpha", "apa", "an", "A", "al", "obj", "ap", "at", "sa", "ao", "app", "au", "aa", "ar", "area", "ack", "ba", "ac"], "i": ["\u00ed", "mi", "ki", "xi", "x", "ia", "ci", "gi", "ir", "cli", "p", "di", "ai", "I", "m", "bi", "ami", "yi", "qi", "iti", "ic", "ip", "iri", "ind", "multi", "si", "li", "ii", "ji", "ei", "ori", "int", "ti", "oi", "v", "iy", "im", "it", "zi", "ini", "ui", "phi", "pi", "il", "l", "id", "y", "j", "ik", "ij", "index", "iu"], "b": ["bis", "sb", "ab", "d", "p", "db", "g", "ib", "r", "c", "reb", "z", "bi", "wb", "pb", "fb", "rb", "mb", "be", "two", "ob", "f", "bc", "gb", "nb", "B", "bb", "v", "another", "s", "eb", "base", "cb", "bes", "l", "u", "j", "y", "bs", "ba"], "num_ans_person": ["num_ans_team", "num_an_people", "num_ans___part", "num_ans_people", "num_an_person", "num_ans___person", "num_an_team", "num_ans___Person", "num_ans_part", "num_an_part", "num_ans_Person", "num_ans___people", "num_an_Person"]}}
{"code": "N = int(input())\\n\\nfor i in range(1,N+1):\\n    if i*(i+1) >= 2*N:\\n        n = i\\n        break\\n\\nfor j in range(1,n+1):\\n    if j == ((i*(i+1)//2)-N):\\n        continue\\n    print(j)", "target": "389", "substitutes": {"N": ["M", "NS", "T", "Ne", "II", "NV", "GN", "NI", "Na", "Ns", "I", "L", "NA", "NM", "NN", "NP", "CN", "NR", "NT", "NH", "H", "O", "V", "NO", "Z", "S", "NE", "B", "J", "Q", "G", "ND", "P", "Num", "E", "D", "NB", "MN", "Ni", "K", "F", "AN", "TN", "NG", "C"], "i": ["\u00ed", "mi", "ki", "xi", "x", "ia", "a", "ni", "ie", "ci", "gi", "p", "di", "ai", "I", "m", "bi", "yi", "qi", "ic", "o", "ix", "ip", "b", "t", "io", "si", "ii", "li", "ji", "ei", "v", "int", "ti", "e", "s", "it", "ini", "zi", "phi", "pi", "ati", "l", "u", "id", "y", "index", "ij", "ik", "iu", "hi"], "n": ["nt", "ni", "d", "p", "ne", "cn", "g", "L", "sn", "w", "c", "r", "m", "z", "ns", "o", "h", "b", "t", "nb", "mn", "na", "v", "nc", "s", "nu", "nn", "l", "q", "np", "k"], "j": ["json", "uj", "ja", "ie", "js", "aj", "p", "name", "jp", "r", "oj", "jc", "z", "jj", "bi", "o", "h", "jl", "f", "b", "jac", "J", "ion", "bj", "ji", "v", "kj", "nm", "obj", "jump", "q", "dj", "y", "k", "index", "ij", "jam"]}}
{"code": "print \"\\n\".join(map(str, sorted([int(raw_input()) for i in range(10)], reverse=True)[:3]))", "target": "550", "substitutes": {"i": [" ii", "n", "x", "ia", "ie", "str", "gu", "ci", "p", " j", "I", "iter", "r", "ix", "ip", "io", "ii", "key", "ti", "im", "q", "id", "j", "k"]}}
{"code": "rule=input().split()\\nK=int(rule[0])\\nX=int(rule[1])\\nif 500*K>=X:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "299", "substitutes": {"rule": ["role", "ULE", "feature", "call", "pair", "vote", "order", "cycle", "run", "test", "file", "spec", "re", "zero", "seed", "pre", "map", "set", "minute", "tree", "rec", "case", "ule", "word", "record", "block", "rl", "parse", "route", "row", "byte", "char", "group", "rules", "base", "line", "item", "Rule", "play", "se", "range", "trial", "dict", "square", "sequence", "function", "chain"], "K": ["M", "N", "T", "KN", "KY", "KR", "MK", "R", "KK", "H", "KING", "KER", "CP", "V", "KS", "PK", "S", "IK", "J", "Q", "B", "G", "P", "Ka", "D", "Y", "UK", "k", "KI", "Z", "KE", "KA", "KB", "C"], "X": ["M", "IX", "N", "x", "T", "TX", "I", "EX", "R", "L", "CE", "MX", "UX", "OX", "H", "V", "XP", "DX", "J", "Q", "G", "P", "A", "E", "XX", "XT", "XXX", "Y", "XL", "U", "F", "Z", "C", "Xi"]}}
{"code": "n, m = map(int, input().split())\\nans = 1\\n\\nif abs(n - m) > 1:\\n    print(0)\\n    exit()\\n\\nfor i in range(1, n + 1):\\n    ans = ans*i%(10**9 + 7)\\n\\nfor i in range(1, m + 1):\\n    ans = ans*i%(10**9 + 7)\\n\\nif (n + m)%2 == 0:\\n    ans = ans*2%(10**9 + 7)\\n\\nprint(ans)", "target": "162", "substitutes": {"n": ["N", "x", "net", "nt", "ni", "gn", "ln", "d", "p", "on", "name", "ne", "cn", "g", "dn", "sn", "r", "c", "ns", "o", "nl", "h", "f", "b", "num", "nia", "t", "nb", "mn", "na", "v", "an", "nc", "un", "s", "nan", "nu", "nw", "nn", "l", "np", "j"], "m": ["tm", "mi", "M", "mr", "perm", "mod", "dm", "d", "p", "mm", "mu", "mp", "fm", "g", "r", "c", "mos", "mut", "man", "bm", "o", "gm", "h", "ms", "f", "b", "num", "mis", "t", "mc", "mn", "v", "sm", "im", "mx", "mun", "l", "mon", "mem", "k", "j", "cm", "mt", "mk"], "ans": ["ats", "eds", "books", "aus", "lets", "us", "aned", " Ans", "ns", "man", "ks", "offs", "ras", "ms", "mean", "cons", "posts", "iann", "jas", "anes", "ran", "arts", "lan", "gn", "anon", "ai", "helps", "ros", "mos", "ann", "anas", "alias", "ins", "wan", "pan", "ens", "lis", "s", "usr", "cs", "olds", "ars", "sum", "ians", "rans", "cas", "tes", "can", "an", "oss", "ani", "eps", "cus", "pres", "ams", "os", "vers", "han", "tan", "ANS", "su", "ants", "ean", "irms", "san", "scan", "amps", "ls", "uns", "gs", "au", "nas", "aos", "AN", "ds", "said"], "i": ["\u00ed", "mi", "ki", "xi", "a", " ii", "ia", "ci", "gi", "cli", "p", "di", "ai", "I", "c", "bi", "yi", "qi", "iti", "ic", "o", "ip", "f", "t", "ri", "io", "si", "ii", "li", "v", "int", "ti", "oi", "iy", "im", "s", "ini", "zi", "\u0438", "l", "pi", "phi", "ati", "j", "ik", "ij", "iu", "hi"]}}
{"code": "r=0\\na,b=map(int,input().split())\\nL=list(map(int,input().split()))\\nfor i in range(a):\\n  if L[i]>=b:\\n    r+=1\\nprint(r)", "target": "494", "substitutes": {"r": ["history", "nr", "n", "mr", "sr", "err", "ro", "d", "p", "ret", "run", "g", "arr", "R", "rc", "re", "complex", "w", "m", "rs", "rb", "res", "runs", "h", "rec", "pr", "result", "right", "t", "dr", "v", "red", "gr", "ur", "debug", "rt", "rect", "q", "l", "progress", "ar", "error", "er", "attr", "cr", "rate", "rd"], "a": ["aut", "n", "ia", "to", "ae", "ab", "p", "active", "span", "ma", "m", "total", "ea", "la", "aaa", "act", "f", "t", "da", "v", "an", "A", "al", "obj", "at", "sa", "aka", "s", "app", "oa", "aa", "l", "y", "index", "area", "ba", "ca", "ao"], "b": ["bis", "body", "n", "sb", "ab", "d", "p", "db", "g", "ib", "lb", "c", "m", "bi", "wb", "fb", "rb", "by", "mb", "be", "ob", "f", "bc", "t", "nb", "B", "bb", "v", "e", "eb", "base", "cb", "l", "y", "bs", "ba"], "L": ["LB", "dL", "M", "NL", "N", "DL", "List", "T", "PL", "BL", "SL", "R", "I", "LC", "TL", "LR", "H", "LU", "LA", "V", "LT", "B", "Li", "LI", "A", "RL", "LG", "Lu", "CL", "l", "LL", "LE", "XL", "LM", "LS", "LP"], "i": ["mi", "ki", "xi", "x", "uri", "ci", "gi", "di", "ai", "I", "z", "m", "bi", "ami", "yi", "qi", "f", "multi", "si", "li", "ii", "ji", "v", "ori", "ti", "im", "s", "zi", "ui", "ini", "\u0438", "q", "l", "pi", "u", "id", "j", "ij", "iri"]}}
{"code": "n,ans = int(input()),0\\nif not n%2:\\n    for i in range(1,30):\\n        ans+=n//(5**i*2)\\nprint(ans)", "target": "211", "substitutes": {"n": ["a", "N", "x", "nt", "ni", "gn", "ln", "d", "p", "ne", "cn", "g", "span", "w", "sn", "c", "r", "m", "ns", "nl", "h", "f", "b", "num", "fn", "t", "nia", "len", "nb", "mn", "na", "an", "v", "tn", "nc", "s", "nan", "nu", "nn", "l", "np", "j", "rn"], "ans": ["ANS", "ants", "ats", "ians", "\u00e1n", "ean", "ana", "atan", "ai", "aus", "ros", "sn", "san", "aned", "ates", "ns", "ann", "rans", "man", "anas", "ins", "ras", "wan", "ons", "ms", "amps", "annot", "pan", "ents", "ens", "news", "cas", "anc", "uns", "can", "an", "iann", "oss", "anes", "nan", "nas", "ran", "aos", "arts", "lan", "AN"], "i": ["mi", "ki", "xi", "x", "ci", "gi", "di", "ai", "I", "m", "bi", "ic", "ix", "o", "ip", "ind", "b", "multi", "si", "li", "ii", "v", "ti", "oi", "im", "it", "zi", "ui", "ini", "\u0438", "q", "l", "pi", "j", "k", "ik", "hi"]}}
{"code": "n=int(input())\\ncnt=0\\nif n %2==0:\\n  print(n//2 -1)\\nelse:print(n//2)", "target": "522", "substitutes": {"n": ["a", "N", "x", "nt", "d", "p", "on", "ln", "ne", "cn", "g", "dn", "i", "long", "sn", "w", "c", "m", "z", "ns", "total", "o", "nl", "h", "f", "b", "num", "t", "nb", "no", "mn", "non", "na", "v", "nc", "all", "nm", "nan", "nu", "nn", "l", "ll", "np", "number", "ng", "j"], "cnt": ["Cnd", "cnd", " cnd", "ncpt", "Cnt", " cpt", " cct", "Cpt", "ncnd", "cct", "Cct", "cpt", "ncct", "ncnt"]}}
{"code": "s = input()\\nans = {\"Sunny\" : \"Cloudy\", \"Cloudy\" : \"Rainy\", \"Rainy\" : \"Sunny\"}\\nprint(ans[s])", "target": "183", "substitutes": {"s": ["a", "n", "sb", "ats", "p", "ains", "g", "i", "fs", "us", "hs", "w", "c", "ts", "m", "ns", "rs", "h", "ms", "ls", "f", "b", "sp", "abs", "t", "ss", "S", "v", "gs", "sq", "ws", "gets", "sa", "sv", "xs", "q", "sts", "es", "qs", "ds", "ps"], "ans": ["arms", "ars", "ols", "ANS", "ants", "ats", "ians", "beans", "An", "eds", "aus", "san", "mos", "aned", "ns", "anus", "ann", "rans", "mas", "man", "anas", "leans", "ras", "ons", "ms", "angs", "amps", "ls", "pan", "ens", "mn", " sans", "an", "anes", "nas", "ams", "aos", "acers", "asons", "ads", "os", "AN", "said", "aints"]}}
{"code": "def main(): \\n    n = int(input())\\n    A = list(map(int,input().split()))\\n\\n    ans = n\\n    A.sort()\\n    table = [True]*(A[-1]+1)\\n    for k,a in enumerate(A):\\n        if table[a]:\\n            if k+1<n and A[k+1]==a:\\n                ans-=1\\n            for i in range(a,A[-1]+1,a):\\n                table[i] = False\\n        else:\\n            ans-=1\\n    \\n    print(ans)\\nmain()", "target": "268", "substitutes": {"n": ["N", "x", "net", "nt", "gn", "ln", "d", "p", "en", "name", "names", "ne", "cn", "sn", "c", "m", "z", "ns", "ny", "nl", "b", "num", "t", "len", "nb", "no", "nor", "mn", "na", "an", "v", "nc", "s", "nan", "new", "nu", "size", "nw", "nn", "l", "number", "np", "nd"], "A": ["GA", "M", "N", "T", "All", "An", "IA", "Ar", "Alpha", "AU", "AT", "mA", "I", "L", "One", "AL", "AV", "NA", "AB", "App", "AE", "H", "LA", "AA", "PA", "As", "O", "V", "AI", "C", "AS", "S", "B", "G", "This", "P", "Address", "CA", "At", "E", "MA", "JA", "AF", "TA", "D", "AM", "Y", "DB", "SA", "Java", "AC", "The", "AN", "Array", "AP"], "ans": ["ars", "ols", "ANS", "nt", "ants", "ats", "beans", "ean", "names", "eds", "Ns", "outs", "aus", "sn", "iban", "ts", "ates", "ns", "vals", "ann", "rans", "rs", "mas", "anas", "ks", "leans", "ins", "offs", "vers", "ons", "ms", "amps", "annot", "ls", "flags", "ids", "ents", "ens", "lists", "orders", "cons", "uns", "na", "an", "anks", "int", "anes", "aps", "terms", "s", "nan", "xs", "nas", "ran", "aos", "vs", "rows", "types", "arts", "cs", "os", "stats", "ones"], "table": ["able", "body", "summary", "state", " Table", "ta", "figure", "db", "confirmed", "atable", "map", "type", "total", "note", "page", "tree", "col", "enabled", "annot", "stable", "t", "Table", "tab", "bool", "auto", "pretty", "abled", "empty", "TABLE", "out", "important", "check", "list", "cache", "tr", "public", "print", "see", "bl", "size", "tmp", "error", "index", "data", "disabled", "binary", "array", "ignore", "ca", "trace", "expected"], "k": ["ck", "km", "ki", "ek", "x", "alk", "kr", "kn", "kh", "kl", "ijk", " ka", "ak", "ke", "kid", "m", "ks", "kw", "ko", "kind", "key", "kj", "v", "ok", "kick", "aka", "ikk", "ku", "q", "kk", "sk", "ka", "K", "ik", "j", "kan", "mk", "unk"], "a": ["x", "ia", "ae", "ac", "ab", "ta", "p", "name", "ach", "va", "ai", "xa", "w", "c", "ma", "ace", "m", "ica", "o", "ea", "la", "aaa", "pa", "f", "b", "t", "art", "da", "wa", "key", "an", "v", "e", "at", "af", "sa", "s", "it", "au", "aa", "l", "am", "ar", "aw", "u", "index", "j", "y", "ca", "ao"], "i": ["mi", "ki", "xi", "x", "gi", "p", "di", "ai", "I", "c", "m", "bi", "ic", "o", "ip", "ind", "b", "ri", "si", "iu", "ii", "li", "key", "v", "ei", "ti", "im", "zi", "ini", "l", "pi", "u", "id", "j", "index", "y", "ij", "ik", "iri"]}}
{"code": "ipp = input()\\nn = [int(x) for x in ipp]\\nharshad = 0\\n\\nfor i in range(0, len(n)):\\n    harshad += n[i]\\n\\nif int(ipp) % harshad == 0:\\n    print(\"Yes\")\\nelif int(ipp) % harshad != 0:\\n    print(\"No\")", "target": "161", "substitutes": {"ipp": ["sw", "mph", "owl", "ips", "p", "IP", "ep", "mp", "vp", "iq", "qu", "dn", "jp", "ech", "html", "ippers", "ipl", "sn", "apt", "ape", "iop", "upp", "ann", "xt", "arp", "iph", "ipped", "cap", "ripp", "ip", "rub", "quick", "zip", "sp", "omp", "amp", "isp", "iv", "apa", "oth", "spe", "resp", "iper", "exp", "qq", "ap", "ipping", "ipt", "IPP", "ank", "hip", "new", "yp", "pl", "np", "appy", "rn", "rip", "tml", "pp", "xp", "opp"], "n": ["nr", "N", "nt", "gn", "ln", "p", "en", "norm", "ne", "cn", "dn", "sn", "r", "c", "m", "ns", "ny", "o", "nl", "h", "b", "num", "fn", "nb", "nor", "mn", "out", "na", "v", "bn", "tn", "nc", "nm", "s", "node", "nu", "nw", "nn", "l", "np", "ng", "j", "rn", "pn", "nd"], "x": ["a", "wx", "xi", "ex", "xe", "p", "xes", "name", "xc", "X", "ai", "rx", "xa", "z", "xxxx", "xt", "ix", "tx", "ax", "t", "key", "v", "e", "fx", "ey", "xy", "xf", "xs", "mx", "xb", "dx", "inx", "xx", "l", "yx", "k", "y", "index", "lex", "px", "zx"], "harshad": ["hahpad", "harrod", " hahad", "harrad", " harrad", "harrlad", "hreshard", "hagnad", " harrac", " harshal", " hichal", "harrard", "hreshac", "hichad", "harmad", "hammag", " hahpad", "hichag", "hreshpad", " hichad", "harshag", " harshlad", " harshod", "hreshal", " hichod", " harrart", "haha", "hagnard", " harshpad", "hammad", " hahal", "harshart", "hagnac", "hreshad", " hichlad", "hicha", "hahag", "harmal", "hreshd", "harrac", "harrart", " harsha", "hreshart", "harsha", "harshac", "harmd", " harshag", "hichod", " harshart", "harshod", " harshard", "hahad", "hichal", "hichlad", "harshal", " harshac", "hagnart", "harrag", " harshd", " hahd", "hamma", "harshard", " harrard", "harshpad", "harmpad", " hichag", " hicha", "hahal", "hammal", "hahd", "harshlad", "harshd"], "i": ["\u00ed", "mi", "xi", "ia", "ite", "ci", "p", "on", "di", "ai", "I", "iter", "m", "bi", "yi", "qi", "ic", "ix", "ip", "ind", "f", "li", "ii", "ti", "im", "it", "zi", "ini", "\u0438", "q", "l", "pi", "id", "j", "y", "index", "ij"]}}
{"code": "A = int(input())\\nB = int(input())\\nC = int(input())\\nX = int(input())\\n\\npat_list = []\\nfor a in range(A + 1):\\n  for b in range(B + 1):\\n    for c in range(C + 1):\\n      price = 500 * a + 100 * b + 50 * c\\n      pat_list.append(price)\\nprint(pat_list.count(X))", "target": "439", "substitutes": {"A": ["GA", "ACTION", "All", "API", "AGE", "An", "Al", "IA", "Alpha", "AU", "AT", "I", "ESS", "Av", "AL", "AST", "Area", "AV", "AG", "AB", "App", "AE", "RA", "ANY", "AA", "LA", "As", "AR", "AS", "This", "At", "AY", "AF", "TA", "SA", "ACT", "AC", "AN", "BA", "Array", "AP"], "B": ["LB", "BI", "CB", "MB", "RB", "BL", "VB", "OB", "IB", "AB", "BW", "BER", "Be", "QB", "Bah", "Bar", "BC", "BBC", "BE", "BR", "WB", "GB", "BB", "USB", "Ber", "Bu", "Bern", "Base", "EB", "NB", "Y", "BO", "DB", "BA", "JB", "BY", "Blue", "UB"], "C": ["CNN", "CH", "CB", "IC", "Cu", "CM", "CW", "JC", "CG", "LC", "CE", "CI", "CS", "CN", "Cs", "CP", "Ch", "MC", "CT", "BC", "CD", "EC", "Co", "SC", "CO", "DC", "CR", "CA", "CON", "OC", "D", "CC", "CL", "AC", "CF"], "X": ["MAX", "INT", "IX", "x", "CH", "N", "T", "TX", "I", "EX", "R", "L", "MX", "OX", "UX", "ICE", "ZX", "XY", "V", "Z", "XP", "XM", "DX", "Q", "P", "E", "XX", "XT", "XXX", "Y", "XL", "px", "K", "F", "Ex"], "pat_list": ["pat5LIST", "pat2block", "patmmLIST", "pat2type", "pat2list", "pat___LIST", "mat_block", "patvlist", "Pat_List", "patch2type", "pat_LIST", "pat2List", "pat___list", "patch_List", "pat___List", "mat_list", "patch2List", "pat_lists", "Pat_list", "pat5List", "patvblock", "pat67list", "patmmblock", "patch_type", "patch2LIST", "patmmList", "patch_list", "patch2list", "patvlists", "pat67lists", "pat_li", "mat_lists", "patmmlist", "pat_block", "pat2LIST", "patvli", "pat_List", "patch_LIST", "Pat_block", "pat67block", "pat_type", "pat5list", "pat___type", "Pat_LIST", "pat5type", "pat67li", "mat_li"], "a": ["aq", "x", "ae", "ab", "ta", "aj", "p", "ach", "air", "va", "xa", "ak", "ea", "ax", "\u00e4", "alpha", "an", "al", "ap", "at", "sa", "af", "ao", "au", "oa", "aa", "am", "ar", "ba", "ca", "ac"], "b": ["bu", "sb", "n", "bf", "ab", "d", "p", "db", "ib", "lb", "i", "blue", "z", "bd", "bi", "wb", "fb", "rb", "by", "o", "be", "br", "f", "bc", "nb", "bb", "v", "bt", "eb", "bl", "cb", "l", "ub", "y", "j", "bs", "ba"], "c": ["ce", "lc", "n", "x", "ci", "gc", "d", "p", "unc", "cd", "xc", "ct", "rc", "tc", "z", "fc", "col", "cur", "f", "bc", "vc", "dc", "mc", "t", "uc", "v", "e", "cin", "cp", "cus", "cc", "\u00e7", "co", "cu", "q", "cb", "u", "cs", "k", "y", "cm", "cr", "cf", "ca", "ac"], "price": ["sold", "fine", "money", "currency", "spot", "php", "order", "pc", "chart", "po", "quant", "value", "position", "tick", "Price", "trade", "pe", "priced", "ice", "priority", "tax", "pr", "seller", "product", "market", "grade", "close", "pie", "date", "profit", "rice", "quote", "sell", "cost", "pro", "rate", "pay"]}}
{"code": "A = list(map(int, input().split()))\\n\\nif sum(A) >= 10:\\n  print('error')\\nelse:\\n  print(sum(A))", "target": "202", "substitutes": {"A": ["a", "GA", "M", "N", "Answer", "T", "All", "An", "Ar", "Alpha", "R", "I", "X", "L", "NA", "AV", "What", "AB", "H", "AA", "As", "O", "V", "PUT", "AR", "Ah", "S", "Bar", "Some", "B", "G", "This", "P", "AP", "HA", "CA", "You", "AY", "JA", "D", "AF", "AM", "Alice", "SA", "ACT", "AN", "BA", "Array", "C"]}}
{"code": "from math import sin, cos, radians\\n\\nN = int(input())\\n\\np1 = (0, 0)\\np2 = (100, 0)\\nth = radians(60)\\n\\ndef koch(n, a, b):\\n    global th\\n\\n    if n == 0:\\n        return\\n    \\n    s = ((2 * a[0] + 1 * b[0]) / 3, (2 * a[1] + 1 * b[1]) / 3)\\n    t = ((1 * a[0] + 2 * b[0]) / 3, (1 * a[1] + 2 * b[1]) / 3)\\n    u = ((t[0] - s[0]) * cos(th) - (t[1] - s[1]) * sin(th) + s[0],\\n         (t[0] - s[0]) * sin(th) + (t[1] - s[1]) * cos(th) + s[1])\\n\\n    koch(n - 1, a, s)\\n    print(*s)\\n    koch(n - 1, s, u)\\n    print(*u)\\n    koch(n - 1, u, t)\\n    print(*t)\\n    koch(n - 1, t, b)\\n\\nprint(*p1)\\nkoch(N, p1, p2)\\nprint(*p2)\\n", "target": "280", "substitutes": {"N": ["SN", "M", "NS", "T", "GN", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "CN", "NR", "NT", "W", "H", "V", "NO", "S", "B", "J", "G", "ND", "P", "A", "Sn", "NB", "MN", "Ni", "K", "AN", "TN", "NG", "C"], "p1": [" pone", "p01", "Pone", "pa1", " p0", "jp3", "pup", "pa0", "jp1", "pp1", "P3", "pp01", "p51", "pp0", "pp2", "p0", "pone", "jp2", "p3", "P1", "P01", "pc1", " p3", "jpone", "paup", " p51", " p01", "pc51", "pcup", " pup", "pa51", "P0", "pc0", "P2"], "p2": ["lp2", " pto", "P4", "bp2", "pto", "bp1", "pb", "lpb", "p32", "P1", "Pto", "p4", "Pb", " p32", "lp32", " p4", "lp1", "bpto", "P2", "lp4", "P32", " pb"], "th": ["tha", "han", "ath", "ht", "sh", "ith", "ty", "kh", "ter", "p", " TH", "through", "Th", "test", "tw", "hz", "td", "html", "hs", "ther", "txt", "sth", "ts", "zh", "rh", " Th", "old", "hex", "reth", "sl", "h", "tp", "TH", "bh", "ths", "sch", "gh", "oth", "eth", "an", "each", "third", "ssl", "tr", "ch", "rt", "tt", "st", "der", "orth", "then", "yth", "ng", "se", "k", "inth", "mt", "ft"], "n": ["x", "net", "nt", "ni", "gn", "d", "p", "en", "name", "names", "ne", "cn", "g", "get", "dn", "i", "r", "sn", "c", "w", "m", "z", "ns", "batch", "note", "o", "nl", "ren", "num", "fn", "nb", "no", "nor", "mn", "non", "remote", "na", "an", "v", "nc", "nan", "nu", "nn", "l", "number", "np", "ll", "ng", "k", "j", "rn", "network"], "a": ["x", "ia", "ae", "ab", "aj", "p", "ach", "g", "i", "r", "apt", "c", "ma", "m", "z", "el", "ga", "o", "ea", "la", "aaa", "act", "f", "alpha", "apa", "an", "att", "v", "A", "al", "ap", "ans", "at", "sa", "af", "app", "oa", "au", "ed", "aa", "l", "am", "ar", "er", "es", "y", "ba", "ca", "ac"], "b": ["bis", "sb", "bf", "ab", "d", "p", "db", "bar", "g", "ib", "i", "r", "c", "m", "z", "bi", "wb", "fb", "rb", "by", "o", "h", "be", "ob", "f", "br", "bc", "gb", "nb", "B", "bb", "v", "e", "an", "ad", "bt", "obj", "it", "eb", "app", "base", "cb", "bes", "l", "bp", "bin", "j", "y", "bs", "ba"], "s": ["ats", "p", "eds", "i", "us", "r", "hs", "c", "ns", "ms", "ths", "ss", "v", "ans", "sa", "ims", "sd", "se", "changes", "bs", "sw", "sh", "js", "g", "m", "ins", "o", "sl", "si", "its", "sm", "sv", "sts", "l", "cs", "stats", "seconds", "str", "d", "spec", "ties", "h", "als", "xs", "bes", "ar", "es", "os", "ps", "sb", "ys", "su", "space", "fs", "w", "ts", "rs", "ls", "f", "sp", "S", "gs", "sq", "ws", "st", "ashes", "j", "qs", "ds"], "t": ["tm", "ut", "ty", "T", "to", "nt", "ta", "p", "d", "ret", "g", "test", "ct", "tw", "td", "i", "r", "wt", "tc", "c", "ts", "m", "z", "text", "type", "total", "o", "te", "tp", "h", "tree", "trans", "dt", "tg", "f", "tk", "pt", "ot", "tu", "out", "v", "tn", "all", "at", "tt", "it", "tf", "tr", "rt", "new", "l", "lat", "j", "y", "tz", "er", "tif", "temp", "target"], "u": ["ut", "lu", "x", "um", "p", "util", "ue", "ul", "g", "i", "uid", "us", "r", "uv", "c", "m", "o", "h", "f", "ua", "eu", "tu", "ion", "v", "un", "ou", "ur", "ui", "uf", "nu", "au", "cu", "l", "k", "y", "U", "uu", "iu"]}}
{"code": "N = int(input())\\nfor i in range(N):\\n    p = input()\\n    li = sorted([int(i) for i in p.split(\" \")])\\n    if li[-1]**2 == li[-2]**2 + li[-3]**2:\\n        print(\"YES\")\\n    else:\\n        print(\"NO\")", "target": "199", "substitutes": {"N": ["n", "M", "NS", "Ne", "T", "GN", "NI", "Na", "Ns", "R", "I", "L", "NA", "NM", "NR", "NT", "O", "V", "S", "B", "J", "Q", "P", "Num", "A", "Sn", "D", "NB", "Y", "Size", "Count", "Len", "Ni", "K", "F", "Z", "C"], "i": ["\u00ed", "mi", "ki", "n", "xi", "x", "a", "ie", "ci", "gi", "ir", "d", "di", "ai", "I", "c", "m", "yi", "ic", "o", "ix", "ip", "ind", "f", "b", "t", "ii", "v", "ei", "int", "ti", "im", "zi", "q", "l", "pi", "phi", "id", "y", "j", "k", "ij", "ik", "fi", "iri"], "p": ["n", "pkg", "pair", "point", "mp", "pc", "po", "rep", "g", "jp", "c", "m", "fp", "pai", "pb", "power", "tp", "ip", "pa", "pr", "b", "sp", "t", "part", "pt", "lp", "v", "P", "exp", "ap", "post", "cp", "pl", "pi", "l", "pat", "j", "pn", "pp", "pro", "ps"], "li": ["loc", "mi", "ki", "n", "lu", "lig", "ni", "lim", "ci", "gi", "ln", "ld", "cli", "di", "ai", "chi", "ml", "ly", " Li", "dl", "qi", "sl", "la", "elt", "ls", "lis", "si", "lists", "lo", "lie", "Li", "ii", "LI", "ti", "list", "sol", "zi", "au", "see", "bl", "l", "pi", "pl", "le", "lic", "ali", "link", "fi"]}}
{"code": "n, x = map(int, input().split())\\nl = list(map(int, input().split()))\\nxlist = [0]\\nnum = 0\\nfor i in l:\\n    num += i\\n    xlist.append(num)\\ncnt = 0\\nfor j in xlist:\\n    if j <= x:\\n        cnt += 1\\nprint(cnt)", "target": "444", "substitutes": {"n": ["nr", "N", "nt", "ni", "d", "p", "g", "sn", "c", "m", "z", "ns", "o", "h", "f", "b", "t", "nb", "v", "nu", "nn", "q", "k", "y"], "x": ["wx", "xi", "ex", "xe", "p", "xes", "xc", "X", "xa", "rx", "w", "ox", "z", "m", "xt", "ix", "tx", "ax", "f", "xd", "t", "v", "e", "xy", "xs", "mx", "dx", "q", "xx", "y", "xp", "xf"], "l": ["lc", "kl", "ql", "ln", "lt", "p", "g", "left", "lb", "L", "c", "m", "ml", "dl", "el", "o", "nl", "sl", "la", "ls", "jl", "b", "t", "hl", "len", "rl", "lo", "lp", "li", "v", "list", "ol", "pl", "le", "ll", "line", "lin", "isl"], "xlist": ["xset", "rxtest", " xlists", "xdict", "Xlist", "wxlists", "xtest", "dxlist", "Xlisted", "rxnet", "ixl", "wxtest", "xl", " xdict", "rxlists", " xList", " xlisted", "xlisted", "XList", "dxdict", "ixList", "dxList", "xxlisted", "xnet", "xxList", " xtest", "wxlist", " xnet", "dxl", "rxlist", "wxnet", "xxlist", "xxset", "ixdict", "Xset", "xList", " xset", " xl", "xlists", "ixlist"], "num": ["next", "con", "nr", "max", "draw", "nt", "um", "nom", "p", "en", "anon", "test", "zero", "hom", "unit", "dev", "total", "success", "result", "count", "NUM", "t", "multi", "nb", "no", "cum", "ord", "ver", "out", "Num", "cal", "int", "nm", "crit", "msg", "nu", "one", "number", "mon", "np", "good", "id", "index", "coord", "temp", "init", "sum"], "i": ["\u00ed", "mi", "ki", " ii", "xi", "ie", "ci", "p", "di", "I", "iti", "o", "ip", "ind", "f", "io", "si", "li", "ii", "v", "int", "ti", "oi", "list", "im", "it", "ini", "zi", "phi", "pi", "id", "y", "index", "ij", "iu", "hi"], "cnt": ["conct", "CNT", "Cpt", "account", "cNT", "acct", "cct", "ccount", "rcNT", "rccount", "rcnt", "nst", "nnt", "rcpt", "Ccount", "acnt", " cNT", " ccount", "acpt", " cct", "conpt", "Cct", "cpt", "cst", "ncount", "concount", "Cnt", " cpt", " cst", "nct", "connt", "Cst"], "j": ["aq", "json", "uj", "ja", "js", "aj", "name", "g", "jp", "job", "oj", "jc", "z", "jj", "ju", "let", "jl", "je", "t", " J", "J", "ion", "bj", "ji", "kj", "obj", "Ja", "ch", "jump", "q", "dj", "k", "ij"]}}
{"code": "n = int(input())\\ns = list(input())\\nf = lambda x:1 if x=='R' else -1\\ny = list(map(f, s))\\nif sum(y)>0:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")\\n", "target": "160", "substitutes": {"n": ["N", "x", "d", "p", "g", "i", "r", "c", "m", "z", "ns", "o", "h", "b", "num", "t", "nb", "na", "v", "e", "nc", "nm", "q", "nn", "l", "j", "k"], "s": ["a", "sb", "x", "ys", "js", "d", "p", "i", "r", "c", "ts", "m", "ns", "ies", "rs", "ses", "ins", "sl", "ls", "b", "t", "S", "ss", "its", "v", "gs", "sa", "xs", "sv", "l", "sis", "ds"], "f": ["fd", "bf", "d", "p", "fm", "g", "fs", "fun", "i", "sf", "r", "c", "m", "fc", "fp", "fb", "h", "func", "freedom", "fa", "b", "fn", "t", "fac", "fo", "fl", "ff", "v", "e", "filter", "fx", "rf", "af", "tf", "fy", "fi", "F", "cf", "function"], "y": ["a", "sy", "x", "ys", "yer", "p", "g", "i", "r", "w", "oy", "c", "sys", "z", "m", "ies", "ns", "my", "ny", "yi", "vy", "ye", "py", "yr", "sky", "b", "t", "yout", "sat", "ot", "uy", "isy", "v", "ey", "gy", "iy", "ch", "yt", "Y", "yy", "l", "fy", "ya", "ay"]}}
{"code": "h,w = list(map(int,input().strip().split()))\\n\\nresult =\"\"\\nfor i in range(w+2):\\n  result += \"#\"\\nprint(result)\\n\\nfor j in range(h):\\n  result = \"#\"\\n  s = input()\\n  result += s\\n  result += \"#\"\\n  print(result)\\nresult =\"\"\\nfor i in range(w+2):\\n  result += \"#\"\\nprint(result)\\n\\n\\n", "target": "133", "substitutes": {"h": ["ht", "n", "th", "x", "sh", "d", "p", "g", "dh", "r", "m", "ih", "rh", "H", "ah", "f", "b", "hl", "gh", "dr", "v", "oh", "hw", "ha", "he", "hr", "hd", "q", "l", "hh", "k", "hi", "hm"], "w": ["wx", "n", "th", "x", "sw", "wn", "d", "p", "g", "wh", "we", "wt", "r", "m", "wb", "man", "wr", "window", "iw", "rw", "W", "wd", "kw", "wo", "wal", "ew", "wl", "wid", "win", "wa", "wp", "v", "width", "ws", "hw", "he", "nw", "l", "hi"], "result": ["answer", "instance", "table", "confirmed", "broad", "Result", "true", "r", "buffer", "res", "username", "response", "resource", "wrapper", "package", "relation", "root", "request", "feature", "goal", "match", "database", "were", "test", "this", "created", "section", "region", "mate", "prefix", "output", "description", "case", "url", "results", "debug", "directory", "phrase", "operation", "join", "function", "source", "chain", "next", "complete", "comment", "pair", "summary", "expression", "reason", "example", "ret", "successful", "ment", "report", "process", "term", "duration", "folder", "record", "memory", "search", "cache", "uration", "public", "csv", "definition", "back", "target", "currency", "method", "message", "success", "statement", "product", "ful", "valid", "parse", "out", "final", "profile", "command", "sequence"], "i": [" ii", "ki", "xi", "x", "ia", "ie", "ci", "gi", "ir", "di", "ai", "I", "bi", "yi", "iw", "ic", "o", "ip", "si", "li", "ii", "ji", "ei", "v", "int", "ti", "im", "it", "ini", "zi", "pi", "il", "ij", "iu", "hi"], "j": [" iii", "sh", "uj", "ja", "p", " k", " o", " n", "z", "jj", "bi", "ix", "o", "b", " l", "J", "kj", "ji", "v", "ha", " vi", "he", "q", "aw", "y", "k", "ij", "ik"], "s": ["n", "sb", "su", "p", "sub", "g", "sf", "r", "sys", "c", "ts", "m", "sam", "less", "sl", "ls", "f", "b", "sp", "t", "ss", "S", "si", "v", "e", "gs", "sq", "another", "sv", "sts", "q", "sis", "os", "es", "se", "source"]}}
{"code": "from math import hypot\\n\\na, b, c, d = map(float, input().split())\\ne = hypot((a-c), (b-d))\\nprint(e)", "target": "196", "substitutes": {"a": ["asia", "ia", "ae", "ac", "ab", "aff", "ta", "ach", "g", "apt", "ma", "ea", "la", "aaa", "act", "\u00e4", "t", "alpha", "da", "apa", "anta", "ad", "A", "ap", "al", "at", "sa", "aka", "app", "oa", "aa", "l", "am", "ar", "area", "ack", "ba", "ca", "ao"], "b": ["body", "n", "sb", "x", "ab", "db", "g", "ib", "i", "r", "m", "bi", "fb", "rb", "bo", "o", "be", "ob", "br", "bc", "gb", "t", "B", "bb", "v", "erb", "eb", "cb", "l", "j", "y", "bs", "ba", "back"], "c": ["ec", "ctrl", "ce", "lc", "con", "ci", "cd", "g", "ct", "rc", "city", "ic", "o", "cur", "bc", "dc", "uc", "sc", "can", "cp", "ch", "cc", "co", "cu", "cb", "q", "l", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["n", "ld", "g", "di", "i", "td", "r", "w", "z", "m", "dt", "f", "df", "t", "dc", "da", "dr", "de", "v", "ad", "red", "des", "s", "D", "ed", "dis", "q", "l", "dd", "sd", "dra", "j", "ds", "nd"], "e": ["ec", "x", "eur", "ge", "ae", "xe", "p", "en", "ue", "g", "i", "r", "m", "ev", "el", "o", "te", "eff", "h", "f", "oe", "ef", "t", "eu", "ee", "ei", "E", "eg", "eb", "ed", "et", "element", "eeee", "se", "es", "er"]}}
{"code": "a,b = map(int,input().split())\\na -= 1\\nb -= 1\\nans = b//a\\nif b%a != 0:\\n    ans += 1\\nprint(ans)\\n", "target": "335", "substitutes": {"a": ["n", "x", "ia", "sta", "ae", "ac", "ab", "ta", "p", "d", "ach", "va", "i", "r", "c", "ma", "m", "z", " A", "ata", "eas", "ga", "total", "o", "ea", "pa", "h", "la", "f", "t", "alpha", "an", "e", "A", "at", "sa", "af", "ao", "oa", "aa", "am", "ar", "y", "ba", "ca"], "b": ["bis", "n", "sb", "x", "to", "bf", "ab", "d", "p", "db", "beta", "sub", "g", "ib", "i", "r", "c", "m", "z", "bi", "pb", "fb", "rb", "h", "be", "f", "bc", "t", "nb", "B", "bb", "v", "e", "s", "base", "cb", "l", "bin", "u", "j", "y", "k", "bs", "ba"], "ans": ["ars", "ANS", "ants", "ats", "ints", "acs", "outs", "aus", "ros", "us", "lets", "ts", "vals", "ns", "ann", "rans", "rs", "mas", "reads", "ks", "ums", "ins", "anas", "ras", "offs", "ons", "ms", "angs", "amps", "ls", "ents", "ens", "cas", "uns", "an", "posts", "gs", "anks", "aps", "s", "nas", "ands", "aos", "vs", "ads", "arts", "os", "es", "lan", "ds", "ps", "bs", "olds"]}}
{"code": "l = ((1,3,5,7,8,10,12),(4,6,9,11),(0,2))\\nx,y = map(int, input().split())\\np = 0\\nfor i in l:\\n\tif x in i and y in i:\\n\t\tp = 1\\n\t\tbreak\\nans = 'Yes' if p == 1 else 'No'\\nprint(ans)", "target": "206", "substitutes": {"l": ["n", "ln", "d", "g", "left", "L", "w", "r", "c", "m", "z", "ml", "dl", "el", "o", "nl", "sl", "h", "ls", "f", "b", "t", "yl", "lp", "li", "v", "e", "list", "al", "s", "ol", "ll", "il", "le", "u", "j"], "x": ["wx", "n", "xi", "ex", "d", "xes", "ux", "xc", "X", "xa", "rx", "w", "ox", "m", "z", "xt", "o", "ix", "tx", "ax", "f", "b", "xd", "t", "v", "e", "fx", " xx", "xy", "xf", "xs", "dx", "xx", "yx", "zx"], "y": ["sy", "n", "ys", "yd", "g", "oy", "m", "z", "ies", "ly", "ny", "yi", "vy", "o", "py", "ye", "yle", "yr", "ery", "hy", "b", "t", "yl", "uy", "v", "yn", "ey", "gy", "iy", "xy", "ry", "yp", "yt", "Y", "yy", "fy", "j", "yu", "ya", "ay", "ym"], "p": ["a", "n", "d", "pc", "jp", "r", "w", "c", "m", "z", "pe", "pb", "par", "power", "o", "pa", "h", "f", "b", "sp", "t", "pt", "lp", "pos", "v", "P", "s", "ping", "q", "pi", "pl", "k", "op", "pers", "j", "pp", "pro", "ps", "pg"], "i": ["a", "mi", "ki", "n", "xi", "ia", "ci", "di", "ai", "I", "xa", "m", "z", "yi", "iti", "ic", "o", "ix", "b", "io", "si", "li", "ii", "ei", "e", "ti", "iy", "im", "it", "ini", "zi", "pi", "phi", "il", "u", "id", "j", "ik", "ij", "iu", " li"], "ans": ["ars", "ANS", "ants", "ats", "eds", "outs", "aus", "asks", "ros", "aned", "aves", "ns", "ann", "ongs", "anas", "leans", "ses", "ks", "offs", "ons", "amps", "angs", "ls", "rets", "ents", "ens", "ots", "plays", "an", "jas", "anks", "aps", "ays", "ands", "yes", "arts", "es", "os", "said", "aints"]}}
{"code": "n = int(input())\\nH = list(map(int, input().split()))\\nmax = 0\\nans = 0\\nfor i in range(n):\\n    if H[i] >= max:\\n        max = H[i]\\n        ans += 1\\nprint(ans)", "target": "26", "substitutes": {"n": ["N", "x", "net", "nt", "gn", "ln", "d", "p", "ne", "cn", "sn", "c", "m", "z", "ns", "nl", "h", "num", "t", "nia", "count", "nb", "no", "mn", "na", "v", "nc", "nan", "nu", "nw", "nn", "q", "l", "np", "j", "k", "nd"], "H": ["M", "N", "CH", "HQ", "HD", "HM", "HP", "His", "GO", "HS", "HL", "HE", "Th", "X", "RH", "HI", "GH", "Help", "NH", "W", "h", "DH", "TH", "HH", "B", "J", "Q", "HF", "HA", "A", "Head", "OH", "Han", "HC", "MH", "Y", "Hz", "HB", "High", "K", "Health", "HT", "Hi", "He"], "max": ["history", "MAX", "top", "master", "x", "ex", "load", "Max", "head", "view", "med", "huge", "long", "length", "ma", "ox", "map", "m", "full", "mad", "total", "min", "gt", "h", "pr", "mean", "ax", "limit", "auto", "force", "out", "check", "cache", "up", "maximum", "hash", "rest", "mx", "end", "high", "size", "range", "upper", "last", "sum"], "ans": ["ANS", "ants", "ats", "ians", "ints", "actions", "anon", "outs", "aus", "ros", "nets", "ts", "ns", "vals", "ann", "rans", "rs", "ums", "ks", "anas", "ins", "vers", "ms", "amps", "angs", "ls", "ents", "ens", "ots", "ps", "an", "rors", "gs", "iann", "posts", "oss", "s", "idents", "nas", "ams", "vs", "ads", "cs", "arts", "os", "ds", "ones", "views"], "i": ["mi", "ki", "xi", "x", "uri", "me", "gi", "di", "I", "set", "bi", "qi", "yi", "info", "ic", "ix", "ip", "ind", "b", "multi", "ri", "io", "si", "ii", "li", "ji", "v", "key", "ori", "ti", "im", "s", "it", "zi", "ui", "ini", "\u0438", "q", "pi", "u", "id", "j", "y", "index", "ij", "iri", "chain"]}}
{"code": "#UnionFind\\nimport sys\\nsys.setrecursionlimit(10**9)\\nclass UnionFind:\\n  def __init__(self, n):\\n    self.n = [-1]*n\\n    self.r = [0]*n\\n    self.siz = n\\n\\n  def find_root(self, x):\\n    if self.n[x] < 0:\\n      return x\\n    else:\\n      self.n[x] = self.find_root(self.n[x])\\n      return self.n[x]\\n\\n  def unite(self, x, y):\\n    x = self.find_root(x)\\n    y = self.find_root(y)\\n    if x == y:\\n      return\\n    elif self.r[x] > self.r[y]:\\n      self.n[x] += self.n[y]\\n      self.n[y] = x\\n    else:\\n      self.n[y] += self.n[x]\\n      self.n[x] = y\\n      if self.r[x] == self.r[y]:\\n        self.r[y] += 1\\n    self.siz -= 1\\n\\n  def root_same(self, x, y):\\n    return self.find_root(x) == self.find_root(y)\\n\\n  def count(self, x):\\n    return -self.n[self.find_root(x)]\\n\\n  def size(self):\\n    return self.siz\\n\\nn,m=map(int,input().split())\\nu=UnionFind(n)\\nfor _ in range(m):\\n  a,b=map(int,input().split())\\n  a-=1\\n  b-=1\\n  u.unite(a,b)\\nans=0\\nfor i in range(n):\\n  ans=max(ans,u.count(i))\\nprint(ans)\\n", "target": "602", "substitutes": {}}
{"code": "n, t = [int(i) for i in input().split()]\\ndishes = []\\nfor _ in range(n):\\n    a, b = map(int, input().split())\\n    dishes.append((a, b))\\n\\ndishes = sorted(dishes, key=lambda x: x[0])\\n\\ndp = [[0] * t for _ in range(n+1)]\\n\\nans = 0\\n\\nfor i in range(n):\\n    for j in range(t):\\n        if j < dishes[i][0] :\\n            dp[i+1][j] = dp[i][j]\\n        else:\\n            if dp[i][j] > dp[i][j-dishes[i][0]]+dishes[i][1]:\\n                dp[i+1][j] = dp[i][j]\\n            else:\\n                dp[i+1][j] = dp[i][j-dishes[i][0]]+dishes[i][1]\\n    ans_i = dp[i][t-1] + max( dishes[i:], key=lambda x: x[1])[1]\\n    ans = max(ans, ans_i)\\n\\nprint(ans)", "target": "200", "substitutes": {"n": ["nr", "N", "x", "nt", "d", "p", "on", "ne", "g", "cn", "r", "sn", "c", "w", "m", "z", "ns", "o", "num", "nia", "nb", "no", "mn", "na", "v", "an", "nc", "s", "nan", "nu", "nn", "l", "pi", "np", "y"], "t": ["tm", "ty", "x", "T", "to", "nt", "ta", "p", "d", "g", "ct", "tw", "td", "r", "tc", "wt", "c", "ts", "m", "w", "z", "total", "te", "o", "tree", "tp", "h", "dt", "f", "num", "time", "pt", "ot", "tu", "v", "e", "tn", "ti", "ten", "at", "tt", "it", "rt", "size", "q", "l", "tz", "y", "k", "temp"], "i": ["json", "ki", "x", "p", "c", "ix", "ind", "ri", "multi", "v", "e", "ti", "oi", "it", "ini", "\u0438", "phi", "id", "init", "history", "\u00ed", "ia", "uri", "ai", "this", "I", "iter", "m", "status", "ic", "o", "si", "iu", "ei", "im", "s", "zi", "l", "u", "ij", "chain", "ci", "gi", "ir", "ret", "series", "ip", "io", "eu", "ii", "ui", "pi", "index", "ik", "mi", "xi", "ie", "cli", "name", "di", "bi", "yi", "info", "li", "ji", "int", "list", "iy", "item", "y", "asi", "iri"], "dishes": [" dishable", "tished", "dillin", "dills", "sills", "mdilles", "tatches", "sishers", "dilles", "didills", "didishes", "fdished", " disher", "pillin", "pired", " dilles", "sdishing", "Dishy", "sdishy", "fishable", "mishes", "sished", "mdisher", "wired", "Dishers", "pilles", "mdishes", "ldillin", "Dills", "wills", "ddishers", "mills", "ddills", "fishes", "cdishable", "ddired", "wished", " dills", "fdills", "sdishers", "dishable", "ddatches", "dishy", "tishers", "wishes", " dishing", "cdisher", "dished", "mdillin", "pishers", "dired", "cdishes", "dishers", "ddishes", "sishes", "pishes", "wishers", "dishing", "fdishes", "milles", "pishing", "pills", " dishers", "mdishable", " dished", " datches", "ldishes", "fatches", "datches", "ddishable", "fishers", "didishers", "sdishes", "ldishers", "patches", "sdatches", "ldilles", "mdishers", "mdatches", "didishy", "mishers", "fdishers", "disher", "pished", "tishes", "Dishes", "sdills", "cdatches"], "_": ["x", "ex", " the", "ing", "ct", "__", "ate", "ation", "ml", "ly", "let", " int", "val", "place", " x", "all", "mt"], "a": ["ia", "sta", "ae", "ab", "aff", "aj", "p", "ach", "va", "ai", "r", "ma", "ea", "la", "aaa", "ax", "part", "alpha", "da", "an", "A", "al", "at", "sa", "au", "oa", "aa", "l", "am", "ar", "u", "ba", "ca", "ac"], "b": ["bis", "sb", "ab", "d", "p", "db", "g", "ib", "r", "bg", "c", "z", "bi", "fb", "rb", "h", "be", "ob", "br", "f", "bc", "nb", "B", "bb", "v", "s", "eb", "cb", "l", "y", "bs", "ba"], "dp": ["pkg", "pm", "dos", "imp", "dds", "dm", "p", "db", "d", "cd", "vp", "di", "dial", "jp", "deep", "ppo", "dl", "pai", "pb", "ctx", "gp", "bsp", "wd", "tp", "pa", "aaa", "dt", "df", "dc", "dep", "hp", "pt", "DP", "wp", "dr", "pd", "lp", "tap", "prep", "delay", "cp", "deb", "xs", "bps", "csv", "uf", "dq", "pipe", "np", "dd", "pat", "dj", "px", "pp", "ds", "ps", "adr"], "ans": ["ars", "ANS", "ants", "ats", "ushes", "outs", "aus", "ros", "us", "aned", "ts", "ates", "ns", "ann", "rans", "rs", "anas", "ks", "offs", "ins", "wan", "ons", "ms", "angs", "amps", "ls", "mean", "ents", "ids", "ens", "anc", "an", "anks", "iann", "anes", "aps", "s", "nan", "xs", "nas", "ands", "nn", "vs", "yes", "ads", "arts", "cs", "es", "os", "stats", "ds", "ps"], "j": ["next", "json", "uj", "ie", "ja", "ijk", "str", "aj", "d", "p", "js", "g", "di", "jp", "r", "jc", "oj", "z", "m", "jj", "bi", "note", "ix", "o", "h", "col", "ind", "jl", "br", "fr", "si", "J", "ion", "li", "key", "ji", "kj", "v", "jas", "att", "obj", "adj", "it", "tr", "jump", "q", "l", "dj", "u", "y", "ij", "ik"], "ans_i": ["ians_o", "ans_ai", "ians___ai", "ans64o", "rs_i", "ans_o", "ians_si", "ansbari", "ians_ai", "rsbarxi", "ians___si", "ans64ai", "ansbary", "ians_i", "ans___si", "rsbari", "ans_y", "ans_si", "rs_xi", "rsbarpi", "ans___i", "ians___i", "rs_pi", "rs_y", "ansbarpi", "ans_pi", "ans64si", "ans___o", "rsbary", "ans___ai", "ians___o", "ansbarxi", "ans64i", "ans_xi"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nfrom collections import defaultdict\\nfrom itertools import accumulate\\n\\nn, k = map(int, readline().split())\\na = list(map(lambda x: int(x) - 1, readline().split()))\\ncumsum = [0] + list(map(lambda x: int(x) % k, list(accumulate(a))))\\ndict = defaultdict(int)\\nans = 0\\nfor i, v in enumerate(cumsum):\\n    ans += dict[v]\\n    dict[v] += 1\\n    if i >= k - 1:\\n        dict[cumsum[i - k + 1]] -= 1\\nprint(ans)\\n", "target": "596", "substitutes": {"read": ["rid", "open", "find", "hold", " readable", " get", "load", "str", "select", "write", "run", "get", "readable", " send", " write", "iter", "r", "txt", " peek", "buffer", "input", "reads", " bread", "ead", " Read", "parse", "feed", "std", "pop", "stream", "each", " READ", " eat", "Read", "print", "READ", "then", "reader", "reading", "roll", "data", "seek", " reader", "text", " reads", "rd"], "readline": ["findnl", "eachline", " readlock", "viewlines", "writelin", "loadonly", "viewline", "readlist", " readnl", " readfile", "getline", "Readlines", "eachonly", "readlock", " readlink", "getlin", " readlist", "readfile", "readLine", " readLine", "writelines", "eachlines", "Readfile", "getlink", "getlock", "loadlines", "readonly", "getnl", "viewfile", " readonly", "Readlist", " readlin", "readlink", "eachLine", "viewlist", "readnl", "writeline", "findlink", "findlines", "readlin", "Readline", "loadLine", "findline", "getlines", "loadline", "writelock"], "readlines": ["loadfiles", " readfiles", " readlists", "readerlines", "readlists", "findlists", "readerfiles", "runrows", "loadlists", "loadlines", "runlines", "readerline", "runline", "readerlists", " readrows", "findlines", "runlists", "readfiles", "findrows", "readrows", "findline", "loadline"], "n": ["keys", "N", "x", "d", "p", "Na", " all", " number", "f", "na", " c", "all", "s", " it", "nn", "l", " p", " N", " na"], "k": ["ck", "km", "ek", "kn", "x", "kr", "ki", "kh", "kl", "p", "ak", "ke", "kid", "m", "ks", "kw", "ko", "kind", "kb", "num", "tk", "kok", "key", "kj", "ok", "ikk", "ku", "size", "q", "kt", "wk", "np", "kk", "ka", "sk", "K", "ik", "kan", "j", "ack", "mk", "unk"], "a": ["x", "ia", "sta", "ae", "ac", "ab", "ta", "d", "va", "xa", "ma", "ata", "ga", "o", "aux", "ea", "aaa", "b", "t", "alpha", "da", "wa", "apa", "na", "an", "att", "all", "A", "at", "sa", "oa", "au", "aa", "aw", "area", "ba", "ca"], "cumsum": ["cumsuum", "cumsam", "cupsums", "Cumume", "scumume", "callsum", "scumum", "Cumsam", "Callsums", "cumsume", "cumam", "censuum", "Cumum", "cumums", "scumssum", "Callssum", "Cumam", "Cumsum", "scumsum", "Cumsuum", "cascume", "Cumssum", "cascsum", "cupsum", "scumsume", "Cumsums", "cumsums", "Callsuum", "cumssum", "cascum", "cupsume", "Callsum", "catssum", "censum", "callsums", "scumsums", "catsam", "cumuum", "catsum", "cumume", "cupssum", "censsum", "cascam", "cumum", "Cumsume", "callsuum", "callsume", "callssum", "scumums", "censums", "catsume"], "dict": ["con", "client", "pkg", "conn", "nt", "state", "ld", "d", "table", "db", "stat", "dir", "cd", "di", "ct", "td", "dh", "sys", "map", "bd", "set", "dec", "ict", "wd", "tree", "ind", "dt", "cmd", "df", "dat", "rent", "da", "dr", "pd", "conf", "disc", "det", "list", "cache", "obj", "adj", "hash", "und", "print", "hd", "do", "div", "dd", "inf", "md", "ds", "nd", "sum"], "ans": ["ANS", "ants", "ats", "ians", "beans", "anon", " means", "eds", "outs", "aus", "ros", "lines", "aned", "ns", "vals", "ann", "ums", "rans", "rs", "anas", "ks", "offs", "ins", "ons", "ms", "amps", "flags", "mean", "angs", "ents", "ids", "ens", "cons", "uns", "can", "an", "posts", "anks", "aps", "anes", "idents", "xs", "nas", "ams", "aos", "ands", "vs", "yes", "ads", "arts"], "i": ["mi", "ki", "xi", "ci", "gi", "di", "ai", "I", "m", "bi", "qi", "ic", "ix", "ip", "ind", "f", "ri", "si", "li", "ii", "ji", "ti", "im", "it", "zi", "ini", "ui", "\u0438", "pi", "id", "y", "index", "ik", "ij", "j", "iu", "fi"], "v": ["qv", "x", "vv", "p", "vi", "tv", "va", "value", "uv", "c", "vector", "z", "m", "ev", "vy", "o", "h", "val", "V", "vr", "f", "b", "t", "iv", "ver", "av", "nv", "lv", "vm", "s", "it", "sv", "conv", "ve", "q", "vs", "l", "pi", "var", "u", "j", "vt", "y"]}}
{"code": "N, T = map(int, input().split())\\nA = list(map(int, input().split()))\\n\\npre = 10 ** 18\\ndiff_max = 0\\ndiff_cnt = 0\\n\\nfor a in A:\\n    if a < pre:\\n        pre = a\\n        continue\\n\\n    if a - pre > diff_max:\\n        diff_max = a - pre\\n        diff_cnt = 1\\n    elif a - pre == diff_max:\\n        diff_cnt += 1\\n\\n# \u9ad8\u6a4b\u541b\u306fdiffmax*(T//2)\u306e\u5229\u76ca\\n# \u53d6\u5f15\u3067\u304d\u308b\u306e\u304cdiffcnt\u7b87\u6240\u3001\u3053\u308c\u3092\u3064\u3076\u3059\\nprint(diff_cnt)", "target": "14", "substitutes": {"N": ["CNN", "M", "n", "NS", "Ne", "Ns", "X", "I", "R", "L", "NA", "NN", "NR", "W", "H", "V", "S", "J", "Q", "G", "P", "E", "D", "Ni", "K", "F", "Z", "C"], "T": ["WT", "M", "R", "X", "I", "L", "TS", "H", "W", "V", "TN", "t", "S", "B", "J", "Q", "G", "P", "E", "TT", "D", "Y", "U", "K", "F", "Z", "C"], "A": ["GA", "M", "An", "IA", "Alpha", "AT", "mA", "I", "NA", "L", "AL", "AV", "AB", "AE", "H", "AA", "LA", "V", "AS", "S", "B", "Q", "This", "P", "AP", "CA", "JA", "D", "TA", "AF", "ATA", "SA", "AC", "BA", "Array", "C"], "pre": ["next", "mi", "master", "before", "prev", "local", "offset", "p", "db", "init", "vi", "mp", "air", "jp", "i", "PRE", "re", "current", "map", "rem", "ca", "par", "prefix", "prime", "old", "ble", "min", "change", "res", "Pre", "py", "default", "pa", "tp", "are", "pr", "pan", "pri", "rel", "li", "null", "ori", "int", "prep", "cache", "un", "post", "adj", "inter", "gre", "pres", "new", "print", "per", "info", "ve", "pi", "pret", "pro", "ps", "pred", "after"], "diff_max": ["split_gen", " diff_min", " diff_MAX", "split_min", "split_max", "diff_ax", "diff_MAX", "diff__max", "diff_default", "diff__maximum", "total_ax", "diffresmax", "total_max", "diff_min", "diff67default", "Diff_min", "diff67MAX", "diff67max", "diffresmin", "diff_gen", "diff67min", "total_MAX", "Diff_maximum", " diff_default", "diffresgen", "Diff_max", "diff_maximum", "total_min", "diff__min"], "diff_cnt": ["diff_tount", "diff_cnd", "diff_mnt", "diff_rount", "diff_tnt", "diff_acst", "diff_rcst", "diff2rnt", "diff_mrt", "diff_crt", "diff_cth", "diff_acnd", "diff2cnt", "diff2rct", "diff_rth", "diff2rrt", "diff_tnd", "diff2cct", "diff_rct", "diff_rst", "diff2rpt", "diff_rnd", "diff_acth", "diff_mct", "diff_acct", "diff_cpt", "diff_rpt", "diff_rcount", "diff_acount", "diff_rnt", "diff2cpt", "diff_rcct", "diff2crt", "diff_rcrt", "diff_tth", "diff_rrt", "diff_mpt", "diff_cct", "diff_cst", "diff_rcpt", "diff_count", "diff_acnt", "diff_rcnt"], "a": ["aq", "asia", "x", "ia", "sta", "ae", "to", "ac", "ja", "ra", "era", "ta", "aj", "action", "p", "ana", "ach", "air", "va", "ai", "xa", "i", "c", "ma", "z", "ica", "ata", "eas", "ga", "o", "are", "ea", "la", "aaa", "pa", "\u00e4", "b", "rame", "alpha", "apa", "na", "anta", "an", "e", "all", "ap", "at", "af", "sa", " fa", "ity", "oa", "au", "aa", "am", "ar", "ka", "index", "area", "ca", "ao"]}}
{"code": "import sys\\nX = int(input())\\nwhile True:\\n    OK = True\\n    for i in range(2, X):\\n        if X % i == 0:\\n            X += 1\\n            OK = False\\n            break\\n    if OK:\\n        print(X)\\n        break", "target": "609", "substitutes": {"X": ["MAX", "M", "IX", "x", "N", "T", "Int", "Check", "Max", "TX", "I", "EX", "R", "L", "MX", "OX", "UX", "Ex", "AX", "Length", "H", "XY", "O", "V", "GEN", "XP", "S", "DX", "XM", "ONE", "J", "Q", "Tx", "P", "ID", "A", "Index", "You", "E", "XX", "D", "XT", "XXX", "Y", "XL", "U", "K", "F", "Time", "Z", "Xi"], "OK": ["KO", "IT", "Once", "Continue", "Ok", "MOD", "OP", "EN", "OF", "AK", "NC", "GO", "KEY", "OB", "OW", "DO", "YES", "MAL", "OD", "ISO", "OFF", "ERROR", "LOCK", "GREEN", "MM", "O", "MD", "NO", "NOTE", "Okay", "NUM", "MODE", "ONE", "OWN", "ID", "ok", "MP", "OH", "DEBUG", "MS", "TYPE", "OC", "ED", "Initialized", "Success", "OTHER", "LED", "TE", "TO", "K", "AN", "OT", "OSED"], "i": ["\u00ed", "mi", "ki", "n", "xi", "x", "ite", "ci", "gi", "I", "iter", "c", "yi", "ix", "o", "ind", "b", "ri", "si", "ii", "li", "key", "v", "ti", "oi", "im", "it", "ini", "ui", "zi", "q", "pi", "l", "u", "id", "j", "k", "fi", "ik", "ij", "iu"]}}
{"code": "import sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nn, k = map(int, readline().split())\\nif k > (n - 1) * (n - 2) // 2:\\n    print(-1)\\n    exit()\\nm = n * (n - 1) // 2 - k\\nprint(m)\\nfor i in range(1, n + 1):\\n    for j in range(i + 1, n + 1):\\n        print(i, j)\\n        m -= 1\\n        if m == 0:\\n            exit()\\n", "target": "621", "substitutes": {"read": ["rid", "open", "find", "hold", "reverse", " get", "load", "ro", "select", "write", "run", "get", " send", "readable", "ke", " write", "give", "iter", "r", "take", "replace", "pe", "input", "reads", "send", " bread", "ead", " Read", "parse", "feed", "pop", " READ", "Read", "first", "print", "READ", "then", "reader", "reading", "roll", "se", "data", "seek", " reader", "text", " reads", "rd"], "readline": ["readln", "addline", "READlines", "readerlen", " readln", " readfile", "readerstring", "getline", "getln", "readerlines", "addfile", "getstring", "READLine", "addlines", "getlen", "readfile", "addlin", "loadfile", "readLine", " readLine", "READline", "loadlines", "readerline", "READln", " readlin", "readstring", "readlin", "readlen", "loadstring", "loadlin", "getLine", "loadlen", "getlines", "loadline"], "readlines": [" readvals", "getls", "readvals", "getline", "readerlines", "Readlines", "readervals", "readls", " readreads", "writelines", "Readelines", "writels", "readreads", "readerline", "getreads", "readelines", " readelines", "writereads", "writeline", "Readvals", " readls", "Readline", "readerelines", "getlines"], "n": ["a", "N", "net", "x", "nt", "gn", "d", "p", "en", "ln", "name", "names", "ne", "g", "cn", "on", "sn", "c", "z", "ns", "o", "nl", "h", "f", "b", "num", "t", "len", "nb", "mn", "ot", "non", "na", "v", "an", "nc", "nm", "nu", "size", "nn", "number", "ll", "np", "l", "q", "network"], "k": ["ck", "km", "kn", "ek", "kr", "kh", "kl", "d", "p", "g", "ak", "ke", "r", "c", "z", "ks", "kw", "ko", "num", "tk", "kok", "t", "key", "kj", "v", "ok", "s", "ikk", "ku", "q", "l", "kk", "ka", "sk", "K", "ik", "kan", "mk", "unk"], "m": ["tm", "mi", "M", "mr", "perm", "mod", "d", "p", "mu", "mo", "mm", "mp", "fm", "g", "med", "c", "ma", "ml", "dm", "em", "man", "bm", "rm", "gm", "h", "ms", "mean", "f", "b", "mis", "t", "mc", "mn", "v", "nm", "im", "mx", "wm", "q", "l", "mem", "y", "md", "mt", "cm"], "i": ["mi", "xi", "ie", "ci", "gi", "p", "di", "ai", "I", "ami", "yi", "ic", "o", "ix", "ip", "ind", "t", "si", "li", "ii", "int", "ti", "im", "it", "zi", "ini", "phi", "pi", "l", "id", "y", "index", "ij", "ik", "iu", "hi"], "j": ["json", "uj", "ja", "js", "aj", "di", "jp", "jc", "oj", "z", "jj", "bi", "o", "jl", "br", "b", "je", "jac", "J", "bj", "key", "kj", "ji", "v", "li", "obj", "it", "jo", "q", "dj", "ij"]}}
{"code": "W,H,x,y,r = map(int, raw_input().split(\" \"))\\nresult = \"\"\\nif x-r < 0 or y-r < 0:\\n\tresult = \"No\"\\nelif x+r > W or y+r > H:\\n\tresult = \"No\"\\nelse:\\n\tresult = \"Yes\"\\nprint result", "target": "563", "substitutes": {"W": ["WC", "M", "N", "T", "We", "CW", "Win", "NW", "R", "X", "I", "L", "RW", "w", "VW", "BW", "O", "V", "WA", "Width", "S", "Wh", "SW", "Week", "B", "G", "WB", "Q", "P", "A", "E", "D", "Y", "FW", "U", "K", "F", "Z", "C"], "H": ["M", "N", "Eh", "HQ", "T", "HD", "SH", "His", "HS", "AH", "HE", "R", "X", "RH", "L", "I", "HO", "HI", "HTML", "NH", "h", "HR", "V", "TH", "HH", "B", "G", "HA", "P", "OH", "MH", "Y", " h", "HB", "HT", "He"], "x": ["wx", "n", "xi", "ex", "xe", "d", "p", "xc", "left", "X", "xa", "i", "rx", "w", "ox", "m", "xt", "window", "ix", "h", "tx", "ax", "f", "xd", "t", "time", "v", "int", "fx", " xx", "width", " w", "xy", "xs", "dx", "l", "xx", "lat", "px", "xp", "xf"], "y": ["sy", "n", "ty", "ys", "cy", "i", "w", "oy", "m", "ly", "ies", "my", "ny", "vy", "o", "py", "ye", "h", "ery", "b", "axy", "uy", "v", "yn", "ey", "gy", "iy", "xy", "yt", "Y", "yy", "fy", "j", "hot", "ya", "ay", "ym"], "r": ["a", "nr", "n", "sr", "mr", "rr", "ro", "err", "rg", "d", "p", "g", "R", "rc", "i", "re", "w", "m", "rs", "rb", "res", "h", "vr", "term", "rar", "fr", "b", "f", "t", "alpha", "e", "ur", "it", "rt", "q", "ar", "error", "item", "attr", "cr", "rate", "rd"], "result": ["answer", "next", "complete", "feature", "comment", "ge", "ter", "su", "goal", "reason", "match", "table", "confirmed", "figure", "view", "ret", "spec", "test", "this", "Result", "value", "true", "zero", "position", "report", "section", "asm", "process", "status", "diff", "type", "make", "format", "message", "change", "output", "res", "success", "either", "case", "description", "mask", "word", "product", "term", "trace", "response", "results", "out", "params", "null", "final", "string", "row", "debug", "date", "uration", "public", "profile", "relation", "join", "pack", "sequence", "back", "source", "request", "transform"]}}
{"code": "n = int(input())\\nt = list(map(int,input().split()))\\nm = int(input())\\na,b = 0,0\\nfor _ in range(m):\\n  a,b = map(int,input().split())\\n  print(sum(t) - t[a-1] + b)", "target": "730", "substitutes": {"n": ["N", "x", "d", "p", "r", "sn", "c", "z", "ns", "total", "o", "h", "f", "num", "nb", "mn", "na", "v", "e", "nc", "nm", "s", "q", "l", "nn", "k", "j"], "t": ["x", "T", "ta", "p", "d", "g", "i", "td", "r", "txt", "tc", "c", "ts", "z", "wt", "total", "o", "te", "tp", "h", "tree", "dt", "pt", "ot", "tu", "out", "v", "int", "tt", "tr", "s", "tf", "title", "q", "l", "tmp", "y", "vt"], "m": ["tm", "mi", "km", "M", "mod", "dm", "d", "p", "mm", "mo", "mp", "g", "i", "r", "c", "ma", "man", "bm", "gm", "h", "ms", "mb", "f", "num", "mis", "mc", "mn", "v", "om", "sm", "q", "l", "j", "k", "cm", "mt"], "a": ["x", "ia", "sta", "ae", "ab", "d", "p", "ta", "va", "ai", "i", "r", "c", "ma", " A", "ga", "o", "ea", "la", "aaa", "act", "\u00e4", "alpha", "da", "apa", "an", "v", "e", "A", "at", "sa", "af", "sha", "oa", "au", "aa", "l", "am", "u", "j", "index", "area", "ba", "ca", "ac"], "b": ["bis", "sb", "bf", "ab", "d", "db", "g", "ib", "i", "bg", "c", "bi", "ca", "fb", "rb", "mb", "h", "be", "ob", "f", "br", "bc", "nb", "B", "bb", "v", "bt", "e", "eb", "cb", "l", "u", "j", "y", "bs", "ba", "back"], "_": [" e", " y", " the", " j", " k", "__", "I", "val", " i", " l", " c", " __", "___", " p"]}}
{"code": "c = input()\\ns = list('abcdefghijklmnopqrstuvwxyz')\\n\\nfor i in range(25):\\n    if c == s[i]:\\n        print(s[i+1])\\n        exit()", "target": "501", "substitutes": {"c": ["ec", "a", "ce", "lc", "n", "con", "x", "ci", "gc", "d", "p", "cd", "g", "ct", "r", "tc", "m", "fc", "h", "f", "b", "t", "dc", "uc", "conf", "v", "nc", "cache", "abc", "cc", "co", "cu", "q", "cl", "u", "cs", "cr", "cf", "C", "sc"], "s": ["a", "sb", "ats", "js", "p", "eds", "fs", "ts", "ns", "rs", "ses", "ins", "sl", "ms", "ls", "abs", "ids", "t", "ss", "S", "parts", "its", "tes", "strings", "gs", "ws", "ims", "sv", "xs", "sts", "vs", "l", "cs", "es", "qs", "ds", "ps", "bs"], "i": ["mi", "ogi", "xi", "x", "uri", "me", "ci", "gi", "cli", "p", "vi", "di", "I", "m", "bi", "my", "yi", "ic", "ix", "ip", "ind", "b", "multi", "si", "li", "ii", "ji", "v", "ori", "ti", "iy", "it", "im", "zi", "ini", "ui", "q", "pi", "id", "index", "j", "fi", "ij", "hi"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\n#\u5165\u529b\u3068\u9055\u3063\u3066\uff10\u30aa\u30ea\u30b8\u30f3\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\\nn = int(input())\\nli = [[0] * n for _ in range(n)] #\u96a3\u63a5\u884c\u5217\u3001\uff10\u30aa\u30ea\u30b8\u30f3 li[i][j]:i\u304b\u3089j\u3078\u306e\u6709\u5411\u30b0\u30e9\u30d5\u304c\u3042\u308b\\nfor i in range(n):\\n    x, y, *v = [int(x)-1 for x in input().split()]\\n    for j in v:\\n        li[i][j] = 1 #\u6709\u5411\u30b0\u30e9\u30d5\u304c\u3042\u308b\u3068\u3053\u308d\u306f\uff11\u3001\u306a\u3044\u3068\u3053\u308d\u306f\uff10\u3068\u306a\u308b\\n\\nfrom collections import deque\\nQ = deque([0]) #\u521d\u671f\u6761\u4ef6\\nfinish = [0] #\u8a2a\u554f\u6e08\u307f\u306e\u9802\u70b9\u3092\u3057\u307e\u3046\\nlen_ = [-1]*n #\u9802\u70b9j\u306e\u9802\u70b9\uff10\u304b\u3089\u306e\u8ddd\u96e2\u3001\u3067\u304d\u306a\u304b\u3063\u305f\u3089\u30fc\uff11\u3068\u8fd4\u3059\\nlen_[0] = 0 #\u521d\u671f\u6761\u4ef6\\nwhile Q: #Q\u304c\u304b\u3089\u3067\u306a\u3044\u9650\u308a\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3059\\n    i = Q.popleft()\\n    for j in range(n):\\n        if li[i][j] == 1: #i\u304b\u3089j\u3078\u306e\u9053\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\\n            if not j in finish: #\u307e\u3060j\u304c\u63a2\u7d22\u6e08\u307f\u3058\u3083\u306a\u304b\u3063\u305f\u3089\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u884c\u3046\\n                finish.append(j)\\n                Q.append(j)\\n                len_[j] = len_[i] + 1\\n        else:\\n            continue\\nfor i in range(n):\\n    print(str(i+1) + ' ' + str(len_[i]))\\n", "target": "646", "substitutes": {"input": ["str", "path", "select", "util", "put", "utils", "control", "buffer", "read", "format", "output", "log", "f", "config", "io", "form", "feed", "out", "can", "Input", "print", " Input", "q", "reader", "data", "text", " inputs"]}}
{"code": "a,p = map(int,input().split())\\nx = (3*a+p)//2\\nif x == 0:\\n    print(0)\\nelse:\\n    print(x)", "target": "428", "substitutes": {"a": ["n", "ia", "sta", "ae", "ab", "d", "va", "ai", "xa", "i", "ma", "ata", "ga", "la", "act", "ax", "f", "b", "alpha", "da", "apa", "na", "an", "A", "al", "ap", "up", "at", "sa", "af", "aka", "au", "aa", "am", "area", "ac"], "p": ["n", "perm", "pm", "press", "port", "mp", "pc", "vp", "jp", "i", "c", "m", "pe", "pb", "py", "pa", "ip", "pr", "b", "sp", "t", "part", "pt", "lp", "v", "P", "ap", "post", "cp", "ping", "per", "q", "pl", "pi", "np", "op", "pp", "pro", "ps"], "x": ["wx", "n", "xi", "ex", "xe", "xc", "xa", "X", "i", "rx", "c", "ox", "z", "m", "xxxx", "xt", "tx", "ax", "f", "b", "xd", "t", "v", "e", "int", "fx", "cox", "xy", "xs", "mx", "xb", "dx", "xx", "y", "px", "xp", "xf"]}}
{"code": "def result(x):\\n return x + x ** 2 + x ** 3;\\n\\nn = int(input())\\nprint(result(n))", "target": "544", "substitutes": {"x": ["a", "wx", "xi", "ex", "xe", "d", "p", "xes", "ux", "xc", "X", "xa", "i", "rx", "true", "ext", "r", "c", "ox", "z", "xt", "xml", "hex", "xxx", "ix", "h", "tx", "ax", "f", "xd", "t", "xxxxxxxx", "out", "check", "v", "exp", "int", "xy", "xs", "dx", "xx", "l", "lat", "lex", "y", "px", "xp", "xf"], "n": ["nr", "N", "nt", "ln", "d", "name", "ne", "cn", "i", "sn", "c", "m", "ns", "o", "nl", "fn", "num", "t", "len", "nb", "nor", "no", "mn", "na", "v", "int", "nc", "nm", "nan", "nu", "nn", "ll", "number", "np", "l", "ng", "j", "index"]}}
{"code": "n,m,k=[int(i) for i in input().split()]\\ndef main():\\n    for i in range(n+1):\\n        for j in range(m+1):\\n            if i*(m-j)+j*(n-i)==k:\\n                print(\"Yes\")\\n                return\\n    print(\"No\")\\nmain()", "target": "92", "substitutes": {"n": ["a", "N", "x", "net", "nt", "ni", "d", "p", "on", "en", "name", "ne", "cn", "g", "sn", "w", "c", "ns", "o", "h", "num", "t", "nb", "no", "mn", "na", "an", "v", "nc", "nm", "un", "s", "nan", "nu", "nn", "l", "yes", "np", "q", "y"], "m": ["tm", "mi", "km", "M", "mr", "me", "um", "dm", "d", "p", "mm", "mo", "mu", "g", "r", "c", "ma", "man", "o", "gm", "h", "ms", "f", "b", "num", "mis", "t", "mc", "mn", "v", "nm", "im", "mx", "q", "l", "mat", "y", "mt", "cm", "mk"], "k": ["ck", "km", "ki", "ek", "uk", "kn", "kr", "kh", "kl", "p", "ak", "ke", "r", "c", "z", "ks", "o", "kw", "ko", "tk", "t", "kok", "key", "kj", "v", "ok", "ikk", "ku", "q", "kk", "sk", "K", "ik", "ka", "mk"], "i": ["a", "mi", "ki", "xi", "x", "\u00ed", "ia", "ci", "gi", "ir", "d", "p", "di", "ai", "I", "c", "bi", "ami", "yi", "iti", "ic", "o", "h", "f", "b", "t", "ri", "io", "si", "ii", "li", "v", "ei", "e", "ti", "im", "ini", "zi", "ui", "q", "l", "pi", "phi", "ati", "u", "id", "y", "ij", "ik", "iu"], "j": [" ii", " dj", "x", "uj", "ja", "aj", "d", "p", "js", "g", "di", "jp", "oj", "jc", "z", "jj", "ju", "o", "h", "jl", "f", "b", "je", "t", " Dj", "si", "J", "bj", "li", "ji", "kj", "jas", "v", "e", "im", "q", "l", "pi", "dj", "y", "ij"]}}
{"code": "import math\\nth = math.pi/3\\n\\ndef koch(p2, n, points):\\n\tp1 = points[-1]\\n\tx, y = p2[0]-p1[0], p2[1]-p1[1]\\n\ts = [p1[0]+x/3, p1[1]+y/3]\\n\tt = [p1[0]+x*2/3, p1[1]+y*2/3]\\n\ts0t = [t[0]-s[0], t[1]-s[1]]\\n\ts0u = [math.cos(th)*s0t[0] - math.sin(th)*s0t[1],\\n\t       math.sin(th)*s0t[0] + math.cos(th)*s0t[1]]\\n\tu = [s[0]+s0u[0], s[1]+s0u[1]]\\n\t\\n\tif n == 0:\\n\t\tpoints.append(p2)\\n\telse:\\n\t\tkoch(s, n-1, points)\\n\t\tkoch(u, n-1, points)\\n\t\tkoch(t, n-1, points)\\n\t\tkoch(p2, n-1, points)\\n\\n\\nif __name__ == '__main__':\\n\tn = int(input())\\n\tp1 = [0.0, 0.0]\\n\tp2 = [100.0, 0.0]\\n\tpoints = [p1]\\n\tkoch(p2, n, points)\\n\t[print(*p) for p in points]", "target": "280", "substitutes": {"th": ["ath", "tha", "ht", " thr", "sh", "ith", "ter", "kh", " orth", " rh", " TH", "method", "g", "Th", "ct", "hz", "test", "td", "html", "txt", "ih", "zh", " Th", "rh", "prime", "hex", "sec", "uth", "tp", "h", "TH", "bh", "f", "ths", "oth", "style", "forth", "eth", "each", "third", "tt", "ch", "tr", "tf", "rt", "hr", "orth", "then", "se", "inth", " ath", "mt", "transform"], "p2": [" ptwo", "v2", "cp02", "par02", "n2", "cp2", "pptwo", "P4", "t4", " p6", "partwo", " p0", "t2", "tp2", "p7", "P6", "cp0", "jp6", "v0", "t1", "jp1", "P7", " p02", "p6", "pp1", "P3", "n1", "pp0", "pp2", "p0", "jp7", " psl", "jp2", "p3", "P1", "cp3", "par2", " p3", "tp1", "p4", "n3", "v3", "t0", "cp1", "cp4", "Ptwo", "pp4", "ptwo", "Psl", "tpsl", "v1", "P0", "p02", " p7", "tp0", "P02", "P2", "par3", "cptwo", "psl", "n02"], "n": ["a", "N", "net", "nt", "gn", "d", "ln", "on", "names", "name", "ne", "cn", "g", "en", "dn", "i", "r", "sn", "c", "m", "ns", "o", "nl", "ren", "h", "num", "fn", "nb", "no", "nor", "mn", "non", "na", "an", "v", "int", "nc", "all", "nm", "nan", "nu", "size", "nn", "number", "l", "np", " N", "network", "k", "rn", "ng"], "points": ["angles", "ns", "files", "papers", "posts", "np", "arts", "words", "devices", "data", "faces", "pieces", "point", "packages", "pointers", "objects", "games", "dates", "results", "pos", "pps", "params", "works", "places", "stats", "pages", "users", " pts", "pots", "names", "workers", "lines", "items", "blocks", "checks", "values", "grades", "docs", "parts", "units", "products", "holes", "terms", "inters", "eps", "xs", "times", "ps", "notes", "ports", "styles", "actions", "cells", "outs", "tags", "windows", "ts", "vals", "ices", "assets", "tools", "Points", "amps", "ots", "pt", "args", "phones", "plays", "pd", "comments", "gs", "steps", "ands", "ads", "groups", "pins", "ds"], "p1": ["port101", "prop1", "pone", "post001", "P1", "port1", "cp4", " p4", "prop25", "panta", "post1", "post25", "prop001", " p0", "p25", "cp0", "pp2", "p0", "op0", " p001", "port25", "portanta", " p101", "cp1", "pro81", "pp4", "v1", "pro0", "p001", "op2", "cp2", "Pone", "postanta", "pro1", "gp1", "port001", "p3", "op001", "ppone", "pp3", "op1", "p101", "port0", "P2", "v2", " pone", "P4", "vone", "t2", "t1", "gp2", "port81", "pp1", " p81", "propanta", "cp3", " p3", "p4", "t0", "P001", "P0", "p81", "pro101", "gp0", "v0"], "x": ["a", "wx", "xi", "ex", "to", "xe", "d", "on", "name", "g", "xc", "ct", "X", "xa", "i", "rx", "ext", "w", "r", "c", "ox", "m", "z", "xt", "xml", "o", "ix", "wd", "h", "tx", "f", "time", "v", "e", "fx", "width", "xy", "xs", "dx", "l", "xx", "px", "xp", "xf"], "y": ["sy", "ty", "scroll", "yd", "ys", "aily", "yer", "i", "cy", "sys", "yo", "m", "ly", "ies", "z", "my", "ny", "o", "py", "ye", "h", "sky", "hy", "b", "dy", "yl", "uy", "ey", "gy", "iy", "xy", "ch", "ry", "yt", "Y", "yy", "j", "hot", "ya", "ay", "ym"], "s": ["a", "sb", "sw", "ys", "state", "str", "ats", "space", "js", "spec", "g", "series", "i", "r", "lines", "sys", "c", "ts", "z", "m", "ns", "ies", "rs", "ins", "ties", "less", "sl", "ms", "sing", "ls", "f", "b", "sp", "ss", "S", "si", "als", "its", "states", "v", "strings", "gs", "sq", "string", "ws", "sa", "st", "xs", "ims", "ashes", "sol", "sts", "sets", "l", "sd", "cs", "se", "es", "os", "stats", "qs", "ds", "ps", "bs"], "t": ["ty", "T", "tl", "ta", "table", "g", "test", "tw", "i", "template", "td", "r", "tc", "wt", "c", "ts", "m", "txt", "type", "total", "o", "te", "tp", "h", "trans", "dt", "tg", "f", "b", "time", "pt", "ot", "tu", "out", "v", "all", "at", "tt", "it", "tf", "tr", "st", "rt", "q", "l", "k", "j", "data", "tz", "target"], "s0t": ["sts0t", "s15tu", "s30l", "s000t", "snulll", "qsnullnt", " s2l", "qs0nt", "s0l", " s0tu", "s30m", "s2l", "s2t", " s2wt", "sts0th", "s60tu", "s60b", "s2m", "es0t", "s1t", "es8tu", "snullnt", "s7w", "sts0l", " s1t", "snulltu", "es8u", "stsnullth", "snullth", "snullb", "s7nt", "s30t", "qs0t", "snullc", "s60t", "s15u", "qsnullt", " s2m", "s000u", "s000tu", "s0tx", "stsnullt", "s12l", "s12tx", "s15wt", "es0b", "s1tu", "s0nt", " s1wt", "stsnulltx", "s000w", "s1l", "es0tu", "s000wt", "qs0c", "s8tu", "s000c", "s0b", " s1u", "s12th", " s1tu", "snullt", "s30wt", "s12t", "s0wt", "es8t", " s0l", "qsnullw", "s7t", "s0m", "s7c", "s0th", "s8u", "s8t", "es8b", "snullu", "stsnulll", "s0w", "snulltx", " s2t", "es0u", " s0wt", "s1wt", "sts0tx", "s000nt", "s60u", "s1th", "qsnullc", "s0c", " s0m", "s15t", "s1u", "s1tx", "s8b", "s2wt", "snullw", "s1m", "qs0w", "s0tu"], "s0u": ["sZeroU", "sZerot", "pzerou", "s2ut", "s18o", "ats0u", "s140tu", "s2U", "s0user", "rsZeroU", "ats140lu", "szeroc", "p0user", "p0o", "s0uv", "s9tu", "szeroo", "s18user", "s000user", "ats0tu", "s2uv", "ats140u", "s1ut", "s2lu", "s2tu", "p0u", "s140uv", "s18u", "s0U", "rsZerout", "s140lu", "s0ut", "s000o", "s0lu", "pzeroc", "ats0lu", "s2t", "s0o", "rs0t", "s1U", "s000c", "ats140uv", "szerouser", "s9u", "ats0uv", "s2u", "s0c", "s9uv", "rs0ut", "rsZerot", "p0c", "s000u", "s18c", "ats140tu", "s1u", "pzeroo", "s9lu", "sZerout", "rs0u", "s140u", "pzerouser", "rs0U", "s1t", "szerou", "rsZerou", "sZerou", "s0tu"], "u": ["ut", "lu", "su", "mu", "ue", "ul", "i", "uid", "uni", "us", "uv", "z", "o", "h", "pu", "f", "units", "eu", "tu", "ud", "un", "ou", "ur", "ui", "uf", "nu", "au", "cu", "k", "uu", "U", "iu"], "p": ["pkg", "d", "point", "name", "pc", "g", "vp", "jp", "i", "w", "r", "c", "m", "fp", "pb", "par", "page", "tp", "pa", "h", "pr", "f", "part", "pt", "wp", "lp", "pos", "pid", "v", "P", "e", "up", "post", "dp", "q", "bp", "np", "pat", "j", "pn", "pol", "pp", "ps"]}}
{"code": "from collections import deque\\n\\nN, M = map(int, input().split())\\nS = input()[::-1] +'1'*M\\n\\nif M >= N:\\n  print(N)\\n  exit()\\n  \\nq = deque([])\\n\\ni = 0\\nj = 0\\nwhile i < N:\\n  f = 0\\n  for k in range(i+M,j,-1):\\n    if S[k] == '0':\\n      f = 1\\n      break\\n  j = i + M\\n  q.appendleft(k-i)\\n  i = k\\n  if f == 0:\\n    print(-1)\\n    exit()\\n\\nprint(' '.join(map(str, q)))", "target": "677", "substitutes": {"N": ["SN", "CNN", "n", "NS", "T", "GN", "NI", "Ns", "X", "I", "R", "NA", "L", "NM", " n", "NN", "CN", "NR", "NT", "NH", "H", "O", "V", "No", "NO", "Z", "B", "J", "Q", "G", "P", "Num", "D", "NB", "Y", "Size", "MN", "Ni", "K", "F", "AN", "TN", "C"], "M": ["T", "CM", "MU", "R", "I", "X", "L", "JM", "NM", "m", "MJ", "Ms", "H", "Mi", "MM", "MC", "V", "MAN", "B", "J", "Q", "G", "P", "MP", "MA", "MS", "D", "DM", "TM", "Y", "Size", "MN", "MI", "MT", "K", "F", "LM", "MF", "Z", "C"], "S": ["NS", "T", "SF", "SH", "SS", "SL", "SB", "R", "I", "JS", "L", "SO", "Si", "SI", "CS", "Spe", "SM", "SQL", "V", "ss", "B", "J", "Q", "SK", "G", "P", "SE", "A", "s", "SP", "D", "Y", "SA", "F", "String", "Z", "C"], "q": ["aq", "ck", "qv", "n", "queue", "ql", "resh", "p", "ues", "g", "iq", "qu", "qt", "requ", "w", "r", "c", "ox", "m", "z", "og", "query", "qi", "h", "quick", "quit", "t", "Q", "v", "bt", "sq", "qq", "eq", "qa", "qual", "it", "ch", "dq", "quote", "que", "l", "y", "quest", "qs"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "ci", "gi", "p", "di", "ai", "I", "m", "z", "bi", "iti", "ic", "ix", "o", "ip", "ind", "b", "multi", "t", "si", "sim", "ii", "li", "ei", "e", "int", "ti", "at", "im", "it", "s", "ini", "zi", "phi", "pi", "l", "u", "y", "ij", "ik", "index", "iu", "hi"], "j": ["n", "x", "uj", "to", "ja", "js", "aj", "p", "d", "g", "jp", "r", "m", "z", "jj", "o", "b", "fr", "t", "J", "bj", "kj", "v", "ji", "jump", "l", "dj", "y", "ij"], "f": ["fd", "n", "x", "bf", "d", "p", "fm", "g", "fs", "sf", "fun", "w", "fort", "r", "c", "m", "z", "fc", "fb", "h", "fa", "fr", "b", "t", "fac", "fe", "df", "fl", "conf", "ff", "v", "e", "fast", "s", "tf", "l", "float", "fi", "F", "cf"], "k": ["ck", "km", "ki", "ek", "uk", "kr", "kh", "kl", "ijk", "kin", "p", "kar", "ak", "ke", "kid", "c", "m", "ks", "ic", "kw", "ko", "b", "tk", "key", "kj", "v", "s", "it", "ikk", "ku", "kt", "wk", "u", "kk", "sk", "K", "ik", "ka", "kan", "mk", "unk"]}}
{"code": "n,m=map(int,input().split())\\ns=input()[::-1]\\n\\nif \"1\"*m in s:\\n  print(-1)\\n  exit(0)\\n\\nans=[]\\ncur=0\\nwhile cur<len(s):\\n  for j in range(m,0,-1):\\n    if cur+j>=len(s):\\n      continue\\n    if s[cur+j]==\"0\":\\n      cur=cur+j\\n      ans.append(j)\\n      break\\n  if cur==len(s)-1:\\n    break\\n\\nans=ans[::-1]\\nprint(*ans)", "target": "677", "substitutes": {"n": ["nr", "N", "x", "d", "p", "cn", "g", "i", "r", "sn", "c", "ns", "nl", "h", "b", "num", "fn", "t", "nb", "na", "v", "nc", "nm", "nn", "l", "q", "k", "y"], "m": ["tm", "mi", "km", "M", "mr", "perm", "dm", "d", "p", "mm", "mu", "g", "med", "i", "r", "c", "mut", "man", "bm", "gm", "h", "ms", "mean", "b", "num", "mis", "t", "mc", "len", "mn", "v", "nm", "sm", "mx", "l", "mon", "np", "mem", "mat", "mun", "cm", "mt"], "s": ["a", "sb", "ys", "ats", "js", "p", "spec", "g", "i", "r", "sys", "c", "ts", "ns", "sam", "rs", "ses", "ins", "sl", "ms", "ls", "abs", "b", "sp", "f", "t", "S", "ss", "its", "strings", "gs", "sq", "string", "ws", "sm", "sa", "sv", "xs", "csv", "sts", "l", "sis", "cs", "os", "es", "qs", "ds", "bs"], "ans": ["ones", "ars", "ANS", "ants", "ats", "ians", "beans", "names", " means", "eds", "outs", "aus", "us", "lines", "aned", "uds", "ates", "ns", "ann", "ums", "rs", "ongs", "anas", "ks", "offs", "ins", "leans", "ras", "vers", "ons", "ms", "angs", "amps", "ls", "rans", "ents", "ids", "ens", "ations", "uns", "an", "anks", "anes", "aps", "ays", "terms", "xs", "nas", "ams", "aos", "ads", "arts", "ags", "os", "anos", "es", "ds", "ps", "orts", "said"], "cur": ["ctrl", "loc", "ce", "con", "ser", "sr", "sur", "gc", "cont", "aj", " Cur", "g", "ct", "car", "rc", "iter", "sche", "pre", "c", "current", "focus", "mut", "cor", "sec", "const", "cert", "cv", "ind", "go", "cmd", "ctr", "pri", "dat", "fac", "count", "sch", "stable", "cum", "ver", "dr", "cut", "bur", "nc", "Cur", "obj", "ptr", "orig", "ur", "tr", "gr", "ch", "char", "now", "co", "cp", "req", "div", "cu", "tmp", "good", "cs", "cr", "pg", "sc"], "j": ["a", "json", "x", "uj", "ja", "str", "aj", "js", "name", "g", "left", "ct", "jp", "i", "job", "r", "oj", "jc", "z", "c", "jj", "o", "pr", "ind", "jl", "fr", "b", "t", "pt", "J", "bj", "key", "ji", "kj", "v", "pos", "obj", "ch", "it", "jump", "now", "q", "l", "dj", "k", "jit", "y", "ij", "index"]}}
{"code": "x = int(input())\\nn = x//100\\nif x%100 <= 5*n:\\n    print(1)\\nelse:\\n    print(0)", "target": "513", "substitutes": {"x": ["a", "wx", "xi", "ex", "xe", "d", "p", "xc", "X", "xa", "i", "rx", "w", "c", "ox", "z", "xt", "ix", "h", "tx", "f", "b", "t", "check", "v", "fx", "xy", "s", "xs", "mx", "dx", "xx", "l", "k", "y", "px", "xp", "xf"], "n": ["N", "nt", "d", "p", "cn", "i", "w", "r", "c", "sn", "m", "ns", "o", "nl", "h", "f", "b", "num", "t", "len", "nb", "na", "v", "nc", "nan", "nu", "nn", "l", "number", "j", "k"]}}
{"code": "# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\\n# import sys\\n# sys.setrecursionlimit(10 ** 6)\\n# import bisect\\n# from collections import deque\\n# from decorator import stop_watch\\n# \\n# \\n# @stop_watch\\ndef solve(N, As):\\n    S = sum(As)\\n    Xs = [0] * N\\n    Xs[0] = S - (sum(As[1::2]) * 2)\\n    for i in range(1, N):\\n        Xs[i] = 2 * As[i - 1] - Xs[i - 1]\\n    print(' '.join([str(i) for i in Xs]))\\n\\n\\nif __name__ == '__main__':\\n    # S = input()\\n    N = int(input())\\n    # N, M = map(int, input().split())\\n    As = [int(i) for i in input().split()]\\n    # Bs = [int(i) for i in input().split()]\\n    solve(N, As)\\n", "target": "406", "substitutes": {}}
{"code": "# coding: utf-8\\n\\nN, A, B, C = int(input()), input(), input(), input()\\ncnt = 0\\nfor i in range(N):\\n    if A[i] == B[i] and A[i] == C[i]:\\n       pass\\n    elif (A[i] == B[i] and A[i] != C[i]) or (A[i] == C[i] and A[i] != B[i]) or (B[i] == C[i] and A[i] != B[i]):\\n        cnt += 1\\n    else:\\n        cnt += 2\\nprint(cnt)", "target": "648", "substitutes": {}}
{"code": "N = int(input())\\nAB = [list(map(int, input().split())) for _ in range(N-1)]\\n\\nchild = [[] for _ in range(N+1)]\\npar = [0]*(N+1)\\n\\nfor ab in AB:\\n    a,b = ab[0], ab[1]\\n    child[a].append(b)\\n    par[b] = a\\n\\nk = 0\\nfor i in range(1,N+1):\\n    l = len(child[i])\\n    if par[i] > 0:\\n        l += 1\\n    k = max(k, l)\\n\\nprint(k)#Max\u306e\u6570\\n\\ncol = [0] * (N+1)\\ncol[1] = 1\\nfor i in range(1, N):\\n    cnt = 0\\n    for c in child[i]:\\n        cnt += 1\\n        col[c] = (col[i] + cnt) % k #k\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u9806\u756a\u306b\u5272\u308a\u5f53\u3066\u3066\u3044\u304f\\n\\nfor ab in AB:\\n    b = ab[1]\\n    print(col[b] + 1)", "target": "157", "substitutes": {"N": ["SN", "Name", "n", "M", "NS", "NV", "NC", "GN", "NI", "Ns", "I", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NOR", "NH", "Node", "NF", "V", "NOTE", "NO", "NUM", "S", "MAN", "NAME", "NE", "B", "J", "ND", "Num", "P", "A", "Bern", "D", "NB", "Ni", "K", "AN", "TN", "C"], "AB": ["CB", "BL", "BS", "OB", "SB", "AT", "BN", "AD", "AL", "IB", "AST", "ABC", "AG", "Ab", "AA", "PA", "BT", "AR", "abs", "BP", "AS", "tab", "BC", "B", "BR", "BB", "lab", "AF", "NB", "AM", "LAB", "DB", "SA", "AC", "AN", "Tab", "UB"], "_": ["T", "local", " the", "__", "____", "pt", "\u00e7", "___", "ay"], "child": ["n", "label", "nt", "Child", "p", "table", "name", "sub", "cell", "w", "c", "append", "batch", "children", "parent", "col", "case", "f", "count", "rel", "part", "close", "block", "bit", "add", "filter", "list", "cache", "row", "model", "ch", "node", "group", "new", "base", "handle", "q", "patch", "item", "id", "link", "j", "shell", "root", "back"], "par": ["arg", "pair", "bar", "p", "mp", "rep", "arr", "car", "jp", "pre", "ref", "Par", "param", "col", "pa", "rec", "pr", "br", "sp", "pri", "rel", "pas", "part", "pos", "params", "prep", "PAR", "cp", "req", "per", "proc", "pi", "pl", "var", "ar", "j", "op", "pol", "pp", "pro", "ps", "comp", "prop"], "ab": ["aq", "aba", "hab", "ib", "abl", "ai", "abi", "ABC", "fab", "pb", "rab", "Ab", "pa", "ob", "abb", "ada", "abs", "tab", "bb", "av", "atom", "al", "ap", "obj", "lab", "af", "abc", "app", "base", "am", "ar", "ub", "ag", "ij", "Tab", "ca", "ac"], "a": ["x", "ia", "sta", "ae", "ac", "p", "ach", "ai", "r", "c", "ma", "ga", "o", "ea", "pa", "aaa", "act", "f", "alpha", "art", "an", "e", "A", "ap", "at", "af", "sa", "ao", "s", "app", "au", "aa", "am", "ar", "u", "y", "area", "ba", "ca"], "b": ["bis", "n", "sb", "x", "d", "p", "db", "bar", "g", "ib", "lb", "r", "bg", "c", "z", "bi", "fb", "bo", "rb", "by", "o", "h", "be", "ob", "bh", "f", "br", "bc", "nb", "B", "bb", "v", "e", "eb", "bl", "aa", "bin", "u", "j", "y", "bs", "ba"], "k": ["ck", "km", "n", "ek", "max", "kn", "kr", "kh", "kl", "ijk", "p", "kar", "ak", "ke", "m", "dk", "ks", "o", "kw", "ko", "kind", "tk", "t", "key", "kj", "ok", "kick", "ikk", "print", "kt", "tek", "kk", "sk", "ka", "K", "ik", "j", "kan", "mk", "unk"], "i": ["mi", "ki", "n", "xi", "x", "gi", "di", "ai", "I", "m", "bi", "yi", "ic", "ix", "ip", "h", "ind", "f", "ri", "t", "io", "si", "li", "ii", "ji", "v", "e", "ti", "im", "it", "zi", "ini", "ui", "q", "pi", "id", "j", "index", "y", "ik", "ij", "iu"], "l": ["lc", "n", "lu", "kl", "ln", "p", "ul", "g", "L", "r", "length", "c", "m", "ml", "dl", "el", "lit", "nl", "sl", "h", "la", "ls", "f", "t", "hl", "len", "lo", "lp", "li", "v", "lv", "mil", "lr", "ll", "le", "pl", "il", "j"]}}
{"code": "import numpy as np\\nn, m = map(int, input().split())\\nA = [list(input()) for _ in range(n)]\\nB = [list(input()) for _ in range(m)]\\n\\nA, B = np.array(A), np.array(B)\\n\\nfor i in range(n-m+1):\\n    for j in range(n-m+1):\\n        tmp = A[i:i+m, j:j+m]\\n        # \u666e\u901a\u306btmp == B\u3067\u6bd4\u8f03\u3059\u308b\u3068\u8981\u7d20\u3054\u3068\u306e\u4e00\u81f4\u4e0d\u4e00\u81f4\u304c\u8fd4\u308b\u306e\u3067,\\n        # \u5168\u4f53\u306e\u4e00\u81f4\u3092\u5224\u5b9a\u3059\u308ball()\u3092\u5229\u7528\u3059\u308b\\n        if (tmp == B).all():\\n            print(\"Yes\")\\n            exit()\\nelse:\\n    print(\"No\")", "target": "483", "substitutes": {"n": ["a", "N", "x", "net", "nt", "gn", "d", "p", "on", "en", "cn", "g", "dn", "sn", "r", "c", "w", "ns", "o", "h", " ng", "f", "b", "num", " gn", "nia", "t", "nb", "no", "mn", "na", "v", "yn", "an", "nc", "nm", " ns", "s", "nan", "nu", "nn", "l", "pi", "np", "q", " N", "network", "k"], "m": ["tm", "mi", "km", "M", "mr", "perm", "mod", "um", "dm", "d", "p", "mm", "multiple", "g", "r", "c", "ma", "mos", "em", "mut", "man", "bm", "min", "o", "gm", "h", "ms", "mask", "f", "b", "num", "mis", "t", "mc", "arm", "mn", "v", "e", "nm", "sm", "im", "dim", "q", "l", "mem", "mat", "k", "y", "month", "cm", "mt"], "A": ["a", "GA", "M", "N", "New", "Answer", "T", "All", "Al", "An", "Ar", "Alpha", "AU", "AT", "R", "I", "Av", "L", "AL", "AV", "And", "AB", "App", "AE", "H", "AA", "As", "V", "AI", "AR", "S", "J", "G", "P", "HA", "AP", "CA", "At", "E", "JA", "D", "AF", "AM", "Y", "SA", "U", "AC", "The", "BA", "AN", "Array", "ACT", "Back", "C"], "_": ["local", "Local", "place", "____", "pt", "___"], "B": ["Other", "LB", "M", "N", "BI", "CB", "T", "MB", "RB", "VB", "Bs", "SB", "R", "I", "L", "Two", "IB", "Builder", "AB", "V", "b", "Bar", "BE", "S", "BC", "J", "BR", "G", "GB", "WB", "P", "BB", "BM", "E", "Bern", "TB", "FB", "D", "NB", "EB", "Y", "BF", "DB", "Bytes", "F", "BA", "C"], "i": ["a", "mi", "ki", "xi", "x", "ia", "ci", "gi", "p", "di", "jp", "I", "ai", "bi", "yi", "qi", "ic", "ix", "ip", "f", "ri", "t", "si", "li", "ii", "ei", "v", "ti", "im", "it", "zi", "ini", "phi", "pi", "l", "u", "y", "fi", "ij", "ik", "iu", "hi"], "j": ["x", "uj", "ja", "js", "d", "p", "aj", "g", "di", "jp", "r", "c", "jc", "z", "jj", "bi", "o", "h", "pr", "jl", "f", "b", "jac", "br", "pt", "J", "bj", "li", "ji", "v", "kj", "ii", "obj", "it", "q", "l", "pi", "dj", "u", "y", "k", "ij"], "tmp": ["cmp", "self", "perm", "aff", "mp", "test", "pre", "src", "img", "ann", "obs", "aaa", "ind", "alpha", "nb", "bb", "ji", "Temp", "MP", "emp", "obj", "adj", "xy", "yy", "np", "attr", "temp"]}}
{"code": "t=sorted(map(int,open(0).read().split()))\\nprint(['YES','NO'][max([t.count(i)for i in range(1,5)])>2])", "target": "662", "substitutes": {"t": ["a", "n", "T", "nt", "ta", "p", "d", "g", "td", "r", "w", "wt", "c", "ts", "m", "total", "o", "te", "dt", "tg", "f", "b", "pt", "ot", "tu", "v", "e", "tt", "tr", "it", "tf", "rt", "s", "q", "l", "j", "vt", "y"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "di", "ai", "I", "iter", "z", "m", "bi", "yi", "ix", "ip", "b", "num", "io", "si", "ii", "li", "key", "v", "ti", "oi", "ini", "zi", "ui", "q", "l", "pi", "phi", "id", "j", "y", "k", "ij", "iri"]}}
{"code": "n=int(input())\\nh=[int(x) for x in input().split()]\\na=1\\nfor i in range(n-1):\\n  if h[i]>h[i+1]:\\n    h[i+1]+=1\\n    if h[i]>h[i+1]:\\n      print(\"No\")\\n      a=0\\n      break\\nif a==1:\\n  print(\"Yes\")", "target": "230", "substitutes": {"n": ["N", "nt", "gn", "ln", "d", "p", "name", "names", "ne", "cn", "norm", "sn", "c", "m", "z", "ns", "o", "nl", "num", "nia", "nb", "nor", "no", "mn", "bn", "na", "v", "nc", "nan", "nu", "nn", "l", "q", "np", "ng", "j", "network"], "h": ["history", "ht", "th", "sh", "her", "kh", "p", "g", "hz", "html", "hal", "w", "hs", "c", "m", "z", "ih", "rh", "H", "ah", "bh", "f", "b", "uh", "hl", "hp", "gh", "dr", "v", "oh", "cache", "his", "hash", "ha", "ph", "ch", "he", "hr", "hd", "q", "ho", "l", "phi", "hh", "j", "index", "hi", "hm"], "x": ["wx", "xi", "ex", "xe", "p", "xes", "ux", "xc", "xa", "X", "rx", "c", "z", "xt", " ax", "ctx", "hex", "ix", "tx", "ax", "f", "xd", "t", "v", "e", "fx", "xy", "xs", "mx", "xb", "\u00e7", "dx", "inx", "q", "l", "xx", "u", "k", "y", "px", "xp", "xf"], "a": ["ia", "to", "ae", "ac", "ta", "aj", "p", "ana", "g", "va", "ai", "xa", "w", "c", "ma", "ata", "ga", "change", "o", "ea", "pa", "la", "fa", "b", "t", "count", "da", "wa", "na", "an", "v", "e", "A", "qa", "sa", "sha", "au", "oa", "aa", "pi", "index", "area", "ca", "ao"], "i": ["mi", "ki", "xi", "ia", "me", "ci", "gi", "p", "di", "g", "ai", "I", "m", "z", "bi", "status", "yi", "info", "ic", "ix", "ip", "iri", "ind", "f", "b", "num", "multi", "ri", "io", "si", "li", "ii", "ji", "v", "ei", "key", "ti", "int", "im", "it", "ini", "zi", "ui", "q", "l", "pi", "phi", "id", "j", "index", "y", "ij", "iu", "hi"]}}
{"code": "s = input()\\nfor i in s:\\n    if(i.isupper()):\\n        print(i.lower(),end=\"\")\\n    else:\\n        print(i.upper(),end=\"\")\\nprint()", "target": "643", "substitutes": {"s": ["a", "n", "sb", "events", "su", "str", "js", "p", "g", "w", "us", "c", "ts", "m", "ns", "rs", "input", "ses", "ins", "h", "ls", "f", "b", "gins", "t", "S", "ss", "parts", "its", "v", "strings", "gs", "sv", "ches", "sts", "l", "qs", "ds", "ps"], "i": ["\u00ed", " ii", " I", "mi", "xi", "x", "ki", "uri", "ogi", "ie", "ite", "ci", "gi", "cli", "p", " im", " k", "di", "ai", "I", " si", "m", "bi", "my", "info", "qi", "ic", "o", "ix", "ip", "ind", "ile", "ri", "io", "si", "iu", "li", "ii", " c", "v", "ori", "ti", "oi", "int", "im", "it", " vi", "ini", "ui", "\u0438", "pi", " h", "id", " v", "k", "ij", "iri", "hi", " mi"]}}
{"code": "import sys\\ncounts = [0] * 26\\n\\ns = sys.stdin.read()\\n\t\\nfor c in s:\\n\to = ord(c)\\n\tif o >= 65 and o <= 90:\\n\t\tcounts[o - 65] += 1\\n\telif o >= 97 and o <= 122:\\n\t\tcounts[o - 97] += 1\\n\t\\nfor i in range(len(counts)):\\n\tprint(chr(i + 97) + ' : ' + str(counts[i]))\\n\\n", "target": "770", "substitutes": {"counts": ["Countrs", "ntcs", "ctS", "countrs", "ountps", " countries", "condrs", "cts", "countls", "ounts", "condls", " countats", "countps", "nts", "ountens", "ntls", " countls", "Countos", "countcs", "countes", "CountS", "Countcs", "ctos", "Countens", " countens", "countens", "ountes", "ountries", " countps", "Counts", "countries", "ountls", "Countats", "Countries", "ounters", "condcs", "Counters", "tders", "Countes", "tdes", "Countls", "Countps", "countos", "countats", "ountats", "conds", "ntrs", "tds", "counters", "ountS", "countS", "ctls", "ountos"], "s": ["ars", "n", "x", "ys", "ats", "js", "d", "eds", "g", "lines", "ts", "z", "ates", "ies", "rs", "ses", "ins", "ords", "ms", "ls", "ods", "f", "b", "t", "S", "parts", "ings", "its", "ws", "ands", "l", "cs", "rows", "os", "y", "es", "stats", "ds", "ps", "bits"], "c": ["ec", "a", "con", "n", "lc", "x", "ac", "d", "p", "unc", "pc", "g", "code", "rc", " unc", "arc", "r", "chain", " ic", "cod", "m", "w", "z", "fc", "ic", "h", "f", "b", "bc", "t", "mc", "icc", "count", "anc", "uc", " cod", "usc", "v", "nc", "e", " sc", "abc", "co", "cu", "l", "u", "oc", "cs", "y", "C", "sc"], "o": ["a", "n", "x", "onet", "ro", "uo", "offset", "ta", "d", "mo", "on", "ano", "po", "ox", "m", "oom", "od", "cho", "ico", "bo", "ic", "oin", "h", "ko", "oid", "O", "ob", "oS", "go", "f", "orea", "you", "ola", "t", "ole", "auto", "io", "no", "oe", "lo", "ot", "off", "oly", "pos", "out", "e", "oi", "ok", "oos", "ou", "iso", "so", "co", "ol", "oa", "oo", "do", "l", "ime", "ooo", "u", "oc", "os", "y", "op", "ao"], "i": ["mi", "xi", "x", "ci", "gi", "p", "vi", "di", "ai", "I", "z", "m", "bi", "yi", "qi", "ic", "ix", "ind", "f", "b", "t", "multi", "si", "li", "ii", "v", "ei", "ti", "oi", "it", "ini", "zi", "ui", "q", "pi", "id", "j", "index", "y", "ij", "iu", "hi"]}}
{"code": "from collections import Counter\\ncnt = Counter()\\nfor i in range(3):\\n  cnt.update([int(item) for item in input().split()])\\na = list(cnt.values())\\na.sort()\\nif a[0] == 1 and a[1] == 1 and a[2] == 2 and a[3] == 2:\\n  print(\"YES\")\\nelse:\\n  print(\"NO\")", "target": "662", "substitutes": {"cnt": ["cnd", "Cpt", "scint", "acct", "cct", "ccount", "sccount", "nnt", "Ccount", "acnt", "cint", "scnt", " ccount", "acpt", " cct", "Cct", "cpt", "Cnd", "Cint", "Cnt", " cpt", " cint", "nct", "acnd", "scct", " cnd", "nnd", "npt"], "i": [" I", "n", "ie", "ir", "p", " j", "I", "r", "c", "ind", "ion", "li", "ii", "e", "int", "ti", "im", "it", "l", "il", "id", "y", "er", "index"], "item": ["x", "ex", "instance", "ite", "match", "name", "code", "color", "value", "iter", "image", "items", "ox", "unit", "page", "ix", "ip", "val", "case", "word", "you", "num", "sim", "inner", "bit", "li", "key", "int", "row", "up", "it", "char", "element", "q", "id", "index", "hit", "Item", "member", "entry", "text"], "a": ["aq", "ia", "sta", "ae", "ac", "aff", "ta", "g", "va", "zero", "ma", "z", "ata", "el", "eas", "ga", "ea", "pa", "la", "aaa", "val", "fa", "done", "act", "abs", "f", "alpha", "da", "apa", "na", "an", "att", "all", "A", "obj", "at", "aka", "sa", "ao", "au", "oa", "aos", "div", "aa", "l", "am", "u", "j", "changes", "area", "ba", "ca"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nt = 1\\ncand1 = 0\\ntmp = 0\\nfor ai in a:\\n    if (tmp + ai) * t <= 0:\\n        cand1 += abs(tmp + ai - t)\\n        tmp = t\\n    else:\\n        tmp += ai\\n    t *= -1\\nt = -1\\ncand2 = 0\\ntmp = 0\\nfor ai in a:\\n    if (tmp + ai) * t <= 0:\\n        cand2 += abs(tmp + ai - t)\\n        tmp = t\\n    else:\\n        tmp += ai\\n    t *= -1\\n\\nprint(min(cand1, cand2))", "target": "178", "substitutes": {"n": ["nr", "N", "x", "nt", "ni", "d", "p", "cn", "w", "sn", "c", "m", "z", "ns", "o", "num", "count", "nb", "mn", "na", "v", "nc", "nm", "nn", "q", "np", "k", "j"], "a": ["x", "ia", "ac", "ja", "ab", "ta", "p", "va", "xa", "i", "ida", "c", "ma", "m", "za", "ate", "ata", "input", "ga", "o", "b", "alpha", "args", "an", "all", "list", "A", "al", "at", "sa", "ao", "qa", "af", "ha", "ity", "oa", "aa", "l", "am", "ar", "area", "ba", "ca"], "t": ["x", "T", "lt", "p", "mp", "i", "r", "c", "z", "total", "te", "tp", "tree", "ot", "v", "it", "rt", " T", "q", "timeout", "k", "trace", "ut", "ta", "g", "test", "tw", "td", "tc", "m", "unit", "o", "dt", "time", "l", "vt", "ht", "nt", "ct", "wt", "gt", "ties", "term", "tu", "all", "tf", "title", "ent", "tm", "w", "ts", "type", "f", "b", "pt", "out", "tn", "at", "tt", "st", "tr", "j", "y", "temp"], "cand1": ["bandOne", "band1", "cand01", "Cand1", "cert101", "Cand81", "carup", "cand101", "cast1", " cand81", "candup", "car1", "cert1", "Cand2", "castup", "castone", "cert2", "cert01", "bandup", "cand81", "candOne", "candone", "bandone", "cmd2", " cand01", "cmd01", "cmd1", "carOne", " cand101", "car2", "cmd101", "carone", "castOne", "car81"], "tmp": ["top", "cmp", "perm", "p", "confirmed", "table", "mm", "mp", "sam", "ctx", "total", "tp", "aaa", "gb", "ot", "bt", "emp", "obj", "rt", "tar", "buff", "np", "timeout", "mk", "dirty", "net", "pkg", "self", "ta", "test", "jp", "this", "td", "tc", "m", "mut", "prefix", "dt", "pretty", "xy", "msg", "vt", "mint", "nt", "db", "ret", "txt", "img", "gt", "term", "nb", "tu", "cache", "cp", "tf", "etc", "pi", "pot", "attr", "back", "tm", "cmd", "b", "sp", "out", "tn", "tt", "node", "proc", "ott", "j", "temp"], "ai": ["air", "ira", "i", "aus", "pa", "aaa", "ind", "hi", "htt", "sa", "ini", "ari", "az", "ia", "gate", "ta", "ais", "qi", "alias", " bi", "si", "also", "ei", "im", "zi", "agi", "ait", "aii", "ij", "audi", "ae", "api", "ci", "gi", "aj", "aug", "aim", "pac", "alpha", "av", "ap", "ani", "ui", "hai", "pi", "ali", "asia", "mi", "iii", "ie", "always", "asc", "di", "iq", "igi", "bi", "pai", "ami", "yi", "AI", "\u012b", "li", "ji", "adi", "ad", "mic", "iy", "deb", "au", "iam", "orth", "ati", "asi", "iri", "zip"], "cand2": ["cattwo", " cand4", "Cand1", "celltwo", "cat4", "cat1", "cat02", "car52", "car1", " cand02", "cand4", "cell2", "Cand2", "Cand52", "Cand4", "candtwo", " cand52", " candtwo", "cat2", "cell02", "cand52", "car2", "cand02"]}}
{"code": "# \u89e3\u8aac\u3092\u898b\u3066\u89e3\u304d\u76f4\u3057\\nN, K = [int(x) for x in input().split()]\\n\\nranges = [tuple(int(x) for x in input().split()) for _ in range(K)]\\nranges.sort()\\np = 998244353\\n\\ndpsum = [0] * (N + 1)\\ndpsum[1] = 1\\n\\nfor i in range(2, N + 1):\\n    dp = 0\\n    for l, r in ranges:\\n        rj = i - l\\n        lj = max(1, i - r)  # 1\u4ee5\u4e0a\\n        if rj <= 0: continue\\n        dp += dpsum[rj] - dpsum[lj - 1]\\n        dp %= p\\n    dpsum[i] = dpsum[i - 1] + dp\\n    dpsum[i] %= p\\n\\nprint(dp)", "target": "158", "substitutes": {}}
{"code": "import math\\n\\nwhile True:\\n    n = int(input())\\n    if(n == 0):\\n        exit()\\n    else:\\n        s = [int(x) for x in input().split()]\\n        m = sum(s)/len(s)\\n\\n        for i in range(n):\\n            s [i] = (s[i] - m)**2\\n\\n        print(\"%.5f\" % (math.sqrt(sum(s)/len(s))))", "target": "683", "substitutes": {"n": ["nr", "N", "nt", "ln", "d", "p", "names", "ne", "cn", "sn", "r", "c", "ns", "o", "nl", "num", "nia", "count", "t", "len", "nb", "no", "nor", "mn", "na", "v", "nc", "nan", "nu", "nw", "nn", "number", "l", "np", "ng", "j"], "s": ["a", "sb", "su", "services", "ats", "js", "p", "spec", "g", "series", "w", "items", "sys", "mos", "ts", "z", "ns", "c", "rs", "ses", "ins", "less", "sl", "h", "ms", "ls", "f", "b", "sp", "t", "S", "ss", "parts", "its", "tes", "als", "strings", "v", "gs", "sq", "sa", "st", "sv", "ims", "xs", "csv", "times", "sts", "vs", "sis", "q", "cs", "se", "os", "es", "stats", "qs", "ds", "ps", "bs"], "x": ["wx", "xi", "ex", "ci", "xe", "ux", "xc", "xa", "rx", "ox", "xt", "ix", "tx", "ax", "xd", "v", "fx", "xy", "xf", "xs", "mx", "xb", "dx", "q", "xx", "l", "y", "px", "xp", "zx"], "m": ["tm", "mi", "km", "M", "mr", "perm", "pm", "dm", "p", "mm", "mu", "fm", "c", "ma", "em", "mad", "man", "bm", "gm", "mb", "ms", "h", "f", "t", "mc", "mn", "nm", "sm", "vm", "mx", "wm", "l", "am", "mt", "cm", "mk"], "i": ["mi", "xi", "ci", "gi", "di", "I", "r", "c", "batch", "bi", "yi", "ic", "ix", "ip", "ind", "ri", "multi", "si", "li", "ii", "ji", "v", "ti", "iy", "im", "zi", "ui", "ini", "l", "pi", "id", "j", "y", "index", "ij", "iri"]}}
{"code": "Q,H,S,D = map(int, input().split())\\nN = int(input())\\n\\nonelit = min((4*Q),(2*H),(S))\\n\\npattern1 = N * onelit\\npattern2 = ((N//2)*D) + ((N%2) * onelit)\\n\\nprint(min(pattern1, pattern2))", "target": "404", "substitutes": {"Q": ["Que", "M", "IX", "CH", "T", "MQ", "X", "R", "L", "Config", "Qual", "Query", "Ch", "C", "UE", "QB", "J", "P", "Question", "How", "E", "QL", "q", "Y", "Qu", "IQ", "K", "F", "Z", "QU", "Blue"], "H": ["IT", "M", "Eh", "HQ", "T", "CH", "SH", "His", "HL", "HS", "HE", "X", "R", "HI", "GH", "HTML", "Hour", "h", "HR", "TH", "HH", "G", "HA", "OH", "Host", "HK", "HC", "MH", "Y", "HTTP", "High", "K", "HT", "He"], "S": ["SN", "M", "NS", "T", "SD", "BS", "SS", "SL", "SB", "SER", "Sl", "R", "SO", "RS", "PS", "Si", "SI", "SAN", "OS", "SM", "B", "SK", "Sing", "P", "SE", "A", "E", "s", "SU", "SP", "ST", "DS", "South", "SA", "SR", "C"], "D": ["M", "DL", "T", "DOM", "d", "DOS", "DO", "DIR", "R", "DE", "L", "DR", "DI", "W", "V", "Do", "DA", "DP", "B", "J", "G", "DD", "DC", "P", "DN", "E", "DS", "DM", "Y", "DF", "DB", "F", "Z", "C"], "N": ["SN", "CNN", "Name", "n", "M", "NS", "T", "NV", "NC", "GN", "NI", "Na", "Ns", "X", "I", "R", "L", "NA", "NM", "Number", "NN", "NP", "NR", "CN", "NT", "NH", "W", "O", "V", "TN", "NO", "NE", "B", "J", "G", "P", "Num", "A", "NB", "Y", "MN", "Ni", "K", "AN", "Z", "Note", "FN", "NG", "C"], "onelit": ["chalitter", "bolitted", "ounitted", "dalite", "onelitted", "oneliz", "dalitter", "onelitt", "dalit", "elitt", "dalitted", "bolite", "alitted", "alitter", "belit", "elite", "daliz", "belitted", "chalit", "beliz", "elit", "ounitt", "bolitt", "chalitted", "elitted", "eliz", "ounit", "onelitter", "alite", "bolit", "chalite", "onelite", "alit", "belite", "ounite"], "pattern1": ["condition51", "pattern01", "pattern001", "group1", "group01", "pat1", "pat01", " pattern0", "condition1", "pat51", "format0", " patternn", "pattern51", "formatn", "pattern0", "format01", "pat001", "Patternn", "group51", "condition001", "format1", "patternn", "Pattern01", "Pattern1", " pattern01", "condition01", "Pattern0", "group001"], "pattern2": ["pattwo", " patterntwo", "group1", "patSecond", "step5", "pat1", "format5", "step2", "group3", "pat2", "pattern5", "patterntwo", "format3", "format2", "variable1", "group2", "variable2", " patternSecond", "step3", "variableSecond", "variabletwo", "format1", "step1", "pattern3", "patternSecond", "group5"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\nsys.setrecursionlimit(10 ** 7)\\n\\n\\ndef main():\\n    N, H = map(int, input().split())\\n    A = []\\n    B = []\\n    for i in range(N):\\n        a, b = map(int, input().split())\\n        A.append(a)\\n        B.append(b)\\n\\n    A.sort()\\n    B.sort(reverse=True)\\n\\n    throw = []\\n    for i in range(N):\\n        if B[i] > A[-1]:\\n            throw.append(B[i])\\n    # print(throw)\\n    throw = throw[::-1]\\n\\n    ans = 0\\n\\n    while H > 0:\\n        if throw:\\n            H -= throw.pop()\\n            ans += 1\\n        else:\\n            need_try = (H + A[-1] - 1) // A[-1]\\n            ans += need_try\\n            break\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "205", "substitutes": {"input": ["history", "next", "arg", "header", "pattern", "str", "select", "context", "expression", "insert", "active", "view", "init", "get", "target", "raw", "txt", "current", "control", "read", "format", "output", "println", "result", "cmd", "config", "hidden", "feed", "out", "pull", "Input", "int", " inspect", "update", "console", "string", "height", "print", " Input", "q", "proc", "reader", "command", "sample", "paste", "data", "text", "source", "request", "start"], "N": ["M", "n", "NS", "T", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NR", "NT", "NH", "V", "TN", "No", "NO", "S", "J", "Q", "ND", "Num", "P", "D", "NB", "Y", "K", "F", "Z", "C"], "H": ["M", "T", "X", "I", "R", "L", "HI", "NH", "W", "h", "O", "V", "HH", "S", "J", "Q", "G", "P", "E", "OH", "he", "D", "Y", "HB", "U", "K", "F", "C"], "A": ["GA", "M", "All", "An", "IA", "Ar", "AH", "Alpha", "AU", "AT", "ACC", "I", "NA", "L", "AL", "AV", "AST", "ABC", "AB", "ACK", "AE", "RA", "ALL", "LA", "AA", "As", "WA", "AR", "C", "ASC", "S", "G", "This", "HA", "P", "CA", "At", "JA", "AF", "ATA", "AM", "SA", "U", "AC", "ACT", "BA", "AN", "Array", "The", "F", "AP"], "B": ["LB", "But", "BI", "CB", "RB", "BL", "VB", "BS", "OB", "Bs", "I", "L", "Two", "IB", "AB", "BG", "BW", "BER", "XY", "V", "BT", "Bar", "BC", "BE", "J", "GB", "WB", "BR", "BB", "USB", "Bern", "FB", "TB", "NB", "EB", "BO", "BF", "DB", "Bytes", "F", "BA", "BY"], "i": ["mi", "ki", "xi", "x", "gu", "ci", "gi", "di", "iq", "ai", "I", "r", "m", "bi", "yi", "qi", "ic", "ski", "o", "ix", "ip", "iri", "ind", "ri", "multi", "si", "li", "ii", "ji", "ei", "v", "e", "ti", "im", "it", "zi", "ini", "ui", "phi", "pi", "u", "y", "k", "j", "ij", "index", "iu", "hi"], "a": ["aq", "ce", "ia", "sta", "ae", "to", "ac", "ab", "aff", "ma", "el", "ga", "aux", "ea", "la", "aaa", "act", "alpha", "apa", "ee", "an", "at", "sa", "aaaa", "app", "au", "oa", "aa", "j", "er", "area", "ba", "ca"], "b": ["bis", "sb", "ab", "bar", "db", "beta", "g", "ib", "blue", "z", "batch", "wb", "fb", "rb", "by", "mb", "be", "ob", "bh", "br", "bc", "nb", "bb", "url", "v", "obj", "eb", "base", "cb", "one", "bp", "good", "j", "bs"], "throw": ["hold", "burn", "call", "burst", "bar", "take", "report", "push", "buffer", "wait", "hex", "bare", "track", "catch", "send", "false", "delete", "quit", "allow", "oth", "force", "feed", "check", "also", "drop", "sleep", "row", "shoot", "kick", "ch", "jump", "rew", "rown", "cast", "roll", "Throw", "aw", "error", "rows", "fire", "ignore", "trace"]}}
{"code": "a, b = map(int, input().split())\\nif 6 <= a <= 12:\\n    b = b/2\\nelif a<6:\\n    b = 0\\nprint(int(b))\\n", "target": "799", "substitutes": {"a": ["n", "x", "ia", "ac", "ab", "aff", "ta", "d", "p", "ach", "g", "va", "i", "w", "r", "c", "ma", "m", "z", "ga", "ea", "h", "act", "f", "t", "alpha", "da", "out", "an", "e", "v", "A", "al", "at", "sa", "s", "app", "au", "oa", "div", "aa", "l", "j", "index", "area", "ba", "ca"], "b": ["bis", "body", "n", "sb", "to", "ab", "d", "p", "db", "g", "i", "blue", "r", "c", "m", "z", "bi", "wb", "fb", "beck", "rb", "h", "be", "f", "bc", "t", "nb", "B", "bb", "out", "v", "e", "obj", "s", "eb", "base", "cb", "l", "bp", "u", "bin", "j", "y", "bound", "bs", "ba", "back"]}}
{"code": "N = int(input())\\nA = list(map(lambda x: int(x), input().split()))\\n\\na = 0\\nfor i in range(N):\\n    if i%2 == 0:\\n        a+=A[i]\\n    else:\\n        a-=A[i]\\n\\nanswer = [a]\\nfor i in range(N-1):\\n    answer.append((A[i]-answer[-1]//2)*2)\\n\\nprint(\" \".join(str(i) for i in answer))", "target": "406", "substitutes": {"N": ["SN", "CNN", "Name", "n", "M", "NS", "T", "GN", "NI", "Na", "Ns", "X", "I", "R", "L", "NA", "NM", "NN", "NR", "NT", "NH", "H", "NF", "V", "TN", "No", "NO", "S", "NE", "B", "J", "Q", "Num", "P", "D", "NB", "Len", "Ni", "K", "AN", "Z", "FN", "C"], "A": ["GA", "Answer", "All", "API", "An", "IA", "Ar", "AU", "AT", "X", "I", "NA", "AV", "Area", "AB", "App", "AE", "Args", "H", "AA", "LA", "As", "WA", "AI", "V", "RAM", "AR", "AS", "S", "EA", "B", "Q", "ICA", "This", "G", "P", "Address", "CA", "MA", "JA", "AF", "AM", "SA", "AC", "The", "BA", "ACT", "Array", "AP"], "a": ["n", "ia", "sta", "ae", "ac", "ab", "ta", "p", "g", "ai", "xa", "ma", "eas", "window", "ga", "o", "ea", "pa", "aaa", "b", "you", "t", "alpha", "apa", "ot", "na", "an", "v", "e", "ap", "at", "sa", "au", "oa", "aa", "pi", "am", "u", "area", "ba", "ca"], "i": ["mi", "ki", "n", "xi", "x", "uri", "ci", "gi", "cli", "g", "di", "ai", "I", "m", "z", "bi", "yi", "qi", "iti", "ic", "ski", "o", "ix", "ip", "ind", "f", "b", "multi", "t", "ri", "si", "iu", "li", "ii", "ji", "ei", "e", "v", "ti", "oi", "adi", "ani", "iy", "im", "it", "zi", "ini", "ui", "\u0438", "q", "phi", "pi", "l", "ati", "id", "j", "y", "index", "ij", "ik", "iri", "hi"], "answer": ["aq", "open", "eni", "next", "channel", "Answer", "wer", "queue", "vote", "echo", "option", "ta", "blank", "rep", "exit", "onse", "entry", "array", "object", "ace", "section", "query", "window", "message", "output", "second", "remember", "result", "description", "term", "equ", " Answer", "duration", "response", "swers", "address", "an", "about", "list", " unanswered", "qa", "another", "question", "say", "ve", "see", "video", "do", "reply", "translation", "q", "quote", "oa", "OVA", "agree", "archive", "area", "sequence", "answered", "interpret", " answered"]}}
{"code": "n,m = list(map(int, input().split()))\\nh = list(map(int, input().split()))\\nnice = list(1 for i in range(n))\\ndef chk_nice(x,y): \\n    global nice\\n    if nice[x] != 0:\\n        nice[x] = (h[x] > h[y])\\nfor i in range(m):\\n    a,b = list(map(int, input().split()))\\n    chk_nice(a-1, b-1)\\n    chk_nice(b-1, a-1)\\nprint(sum(nice))\\n\\n", "target": "291", "substitutes": {"n": ["nr", "N", "nt", "d", "p", "en", "ne", "cn", "r", "sn", "c", "ns", "o", "nl", "num", "t", "nb", "mn", "na", "v", "nc", "s", "nu", "nn", "q", "l", "np", "k"], "m": ["tm", "mi", "mr", "M", "dm", "d", "mo", "mm", "p", "g", "r", "c", "ma", "z", "mut", "man", "bm", "gm", "ms", "mis", "t", "mc", "mn", "v", "om", "sm", "l", "mat", "j", "k", "cm"], "h": ["hold", "ht", "sh", "p", "hz", "r", "hs", "w", "c", "ih", "rh", "hex", "H", "ah", "host", "bh", "f", "hl", "hp", "t", "v", "oh", "ph", "ch", "he", "hd", "handle", "q", "l", "ho", "hh", "k", "j", "hi", "hm"], "nice": ["open", "fine", "hold", "conn", "ense", "max", "cmp", "ni", "local", "ise", "p", "gui", "name", "cycle", "sche", "healthy", "adjust", "info", "prime", "total", "priority", "ties", "nl", "quiet", "quick", "core", "done", "pri", "close", "just", "exclusive", "valid", "nit", "panic", "out", "check", "remote", "int", "free", "normal", "when", "cp", "none", "com", "clean", "print", "here", "Nice", "lock", "new", "q", "size", "np", "good", "responsive", "tie", "hot", "trial", "pose", "index", "cool", "dict", "init", "happy"], "i": ["ki", "xi", "ia", "ci", "gi", "ir", "di", "ai", "I", "iter", "yi", "ic", "ip", "ind", "ri", "li", "ji", "e", "int", "ti", "iy", "im", "ini", "zi", "phi", "pi", "u", "id", "k", "ij", "iu"], "x": ["wx", "xi", "ex", "xe", "xes", "ux", "xc", "X", "xa", "rx", "w", "c", "ox", "z", "xxxx", "xt", "xxx", "ix", "tx", "ax", "xd", "zx", "v", "e", " xx", "fx", "at", "xy", "xs", "mx", "dx", "l", "xx", "yy", "u", "lex", "k", "px", "j", "xp", "xf"], "y": ["sy", "ty", "ys", "yer", "ady", "cy", "oy", "yo", "ly", "ies", "my", "ny", "vy", "hey", "py", "ye", "yr", "sky", "axy", "yl", "ey", "gy", "iy", "xy", "ry", "yt", "Y", "yy", "fy", "j", "k", "ay", "ym"], "a": ["ia", "sta", "ae", "ac", "ab", "era", "aj", "va", "ai", "c", "ma", " A", "ga", "ea", "la", "aaa", "be", "act", "ax", "alpha", "da", "apa", "na", "an", "e", "A", "ap", "al", "at", "sa", "app", "oa", "au", "aa", "am", "ar", "area", "ba", "ca"], "b": ["bis", "sb", "ab", "bar", "d", "db", "g", "r", "c", "z", "bi", "fb", "rb", "o", "bre", "be", "br", "f", "bc", "nb", "B", "bb", "v", "e", "eb", "base", "l", "u", "j", "bs", "ba"]}}
{"code": "n,k = map(int, raw_input().split())\\nscore,d,cd = 0,None,0\\ns = raw_input()\\nfor i,l in enumerate(s):\\n\tif d != l:\\n\t\tcd +=1\\n\t\td = l\\n\tif i and s[i-1] == s[i]:  score += 1\\n\\n\\nif cd > 2:\\n\tt = min(k,((cd - 2)+1)/2)\\n\tk -= t\\n\tscore += 2 * t \\n\tcd -= 2 * t\\nif cd == 2 and k:\\n\tscore +=1\\n\tcd -= 1\\nprint score\\n", "target": "164", "substitutes": {"n": ["nr", "N", "nt", "p", "g", "dn", "sn", "c", "m", "z", "ns", "o", "h", "f", "b", "num", "nb", "na", "v", "nc", "size", "nn", "q", "np", "j", "y"], "k": ["ck", "km", "ek", "x", "uk", "kr", "max", "kh", "kl", "p", "g", "ak", "ke", "kid", "w", "r", "c", "m", "z", "dk", "ks", "kw", "ko", "kb", "num", "tk", "key", "kj", "v", "ok", "it", "ku", "q", "wk", "kk", "sk", "ka", "K", "ik", "j", "mk"], "score": ["ize", "fine", "lc", "scroll", "err", "Score", "gc", "en", "g", "test", "td", "value", "length", "scale", "report", "z", "weight", "c", "dl", "diff", "status", "rate", "note", "message", "success", "distance", "display", "result", "core", "ind", "done", "f", "term", "count", "len", "grade", "tone", "eria", "ion", "sc", "key", " Score", "rank", "est", "sol", "lr", "ol", "scoring", "stroke", "ed", "size", "one", "confidence", "le", "sd", "error", "id", "best", "y", "index", "er", "cost", "cr", "loss", "definition", "sum"], "d": ["fd", "a", "x", "dm", "p", "dir", "g", "di", "dn", "dh", "c", "m", "z", "bd", "dl", "od", "ind", "dt", "f", "b", "dc", "da", "dr", "pd", "de", "e", "ad", "D", "do", "dd", "sd", "did", "id", "j", "data", "ds", "nd"], "cd": ["fd", "ck", "nt", "vd", "ci", "ld", "gc", "ct", "td", "tc", "c", "cod", "bd", "dl", "od", "dk", "dev", " CD", "core", "dt", "cmd", "ind", "xd", "ctr", "count", "dc", "cond", "CD", "cz", "dig", "pd", " sd", "de", "cp", "deb", "cc", " td", "dx", "D", "hd", "div", "cb", "dd", "sd", "ecd", "cs", "id", "did", "md", "cm", "cr", "ds", "cf", "ctl", "nd", "sc"], "s": ["a", "sb", "ys", "ats", "js", "p", "g", "fs", "r", "w", "items", "c", "ts", "m", "hs", "ns", "rs", "ses", "ins", "sl", "h", "ms", "ls", "ids", "b", "f", "S", "ss", "its", "results", "strings", "v", "gs", "e", "sv", "xs", "sts", "sis", "q", "u", "se", "os", "y", "ds", "bs"], "i": ["a", "mi", "ki", "xi", "x", "ia", "ie", "ci", "gi", "cli", "di", "ai", "I", "r", "c", "m", "bi", "ic", "o", "ix", "ip", "ind", "f", "b", "io", "si", "li", "ii", "ji", "v", "e", "int", "ti", "oi", "it", "zi", "ini", "pi", "id", "index", "y", "j", "ik", "fi", "ij", "hi"], "l": ["loc", "lc", "kl", "local", "ln", "ld", "lt", "p", "g", "left", "L", "r", "c", "m", "z", "dl", "el", "lit", "nl", "h", "val", "ls", "f", "b", "hl", "yl", "lo", "lp", "li", "fl", "v", "e", "al", "ur", "ol", "ll", "le", "il", "u", "cl", "j", "lin"], "t": ["tm", "a", "ty", "T", "to", "ta", "p", "g", "ct", "qt", "tw", "td", "w", "tc", "wt", "c", "ts", "m", "z", "r", "set", "type", "o", "te", "tp", "h", "dt", "f", "b", "pt", "ot", "tu", "out", "v", "e", "at", "tt", "st", "tf", "rt", "title", "et", "j", "y"]}}
{"code": "s = input()\\ndirset = set()\\nfor i in s:\\n  dirset.add(i)\\nif \"N\" in dirset and \"S\" in dirset:\\n  if (\"E\" in dirset and \"W\" in dirset) or (not \"E\" in dirset and not \"W\" in dirset):\\n    print(\"Yes\")\\n  else:\\n    print(\"No\")\\nelif \"E\" in dirset and \"W\" in dirset:\\n  if not \"N\" in dirset and not \"S\" in dirset:\\n    print(\"Yes\")\\n  else:\\n    print(\"No\")\\nelse:\\n  print(\"No\")", "target": "108", "substitutes": {"s": ["a", "n", "js", "d", "p", "ains", "g", "fs", "w", "r", "hs", "c", "ts", "m", "ns", "rs", "o", "ins", "ms", "ls", "abs", "b", "t", "S", "ss", "parts", "irs", "tes", "v", "e", "gs", "has", "ims", "ches", "xs", "y", "es", "qs", "ds", "ps", " inputs"], "dirset": ["directserver", "pathst", "diskmap", "diskget", "diskSET", "filest", "Dirset", "dirserver", "Dirget", "dircheck", " dironly", " dirspec", "looksum", " dirspace", "dirtime", "Dirsche", "Dirstore", "manset", "callset", "dirsearch", "Diret", "Dirstart", "dirspace", "folderstore", "DIRsche", "callet", "foldermap", "dicttime", " dirnet", "draftstore", "directorynet", " dirst", "dirnet", "dialtime", "loget", "dirmap", "DIRonly", "logset", "folderset", "directioncache", "iret", "dictspace", "Dirtest", "dirSET", " dirsc", "lookset", "dictet", "folderet", " dirstart", "irstart", "dirtest", "diskscale", "DIRset", "pathet", "looksearch", "dialet", "irstore", "dictmod", "dirstore", "directoryset", "dialset", " dirtest", "dirsche", "dirscale", "pathset", "manscale", "DIRspec", "dirtype", "directtest", "mantype", " dircheck", "draftscale", "fileet", " dirsche", " dirmap", "dirst", "dircache", "Dircheck", "DIRspace", " dirserver", "callcom", "directionet", "dirspec", "directset", "dirsum", " dircom", "directcheck", "directorycom", "callnet", "directoryet", "Dirsum", "irsearch", "dictspec", "filestore", "logget", "DIRsc", "dironly", "fileset", "dirmod", "looket", " dirstore", "Dironly", "diskset", "dirstart", "dialget", " dirmod", "diret", "pathstore", "dirget", "disket", "directionset", "dialcache", " dirget", "folderSET", "draftnet", "Dirsc", "dialtype", "Dirsearch", "dialscale", "foldernet", "irset", "directiontime", "DIRmod", " dirscale", "Dirspec", " dirSET", "disktype", "dictset", " diret", "dirsc", "dictcache", "draftset", "logspec", "dircom", "folderscale", "irsum", "Dirserver", "manget"], "i": ["\u00ed", "mi", " I", "a", "n", "xi", "ie", "me", "ite", "gi", "d", "p", "name", "di", "ai", "I", "c", "m", "o", "ind", "f", "b", "ri", "t", "si", "ii", "li", "ei", "v", "ti", "iy", "zi", "ini", "iam", "l", "pi", "id", "j", "y", "index", "ij", "iri"]}}
{"code": "k = int(input())\\n\\nqueue = [1,2,3,4,5,6,7,8,9]\\ncnt = 0\\nwhile cnt + len(queue) < k:\\n  cnt += 1\\n  n = queue.pop(0)\\n  if n%10 != 0:\\n    queue.append(n*10+n%10-1)\\n  queue.append(n*10+n%10)\\n  if n%10 != 9:\\n    queue.append(n*10+n%10+1)\\nprint(queue[k-cnt-1])", "target": "339", "substitutes": {"k": ["ck", "km", "ek", "max", "uk", "kn", "kr", "kh", "kl", "keep", "p", "g", "kar", "ak", "ke", "m", "dk", "ks", "kw", "ko", "kb", "num", "tk", "t", "kj", "ok", "ikk", "ku", "q", "kt", "wk", "kk", "ka", "kan", "K", "sk", "j", "ik", "mk", "unk"], "queue": ["qv", "foo", "random", "loop", "required", "ue", "Queue", "store", "true", "batch", "buffer", "log", "config", "grid", "worker", "q", "que", "quote", "trace", "history", "me", "port", "ued", "test", "we", "email", "full", "status", "ques", "display", "quit", "force", "Q", "bench", "console", "phrase", "dq", "plot", "line", "stack", "array", "entry", "next", "complete", "component", "wait", "pool", "result", "buf", "menu", "published", "search", "all", "cache", "button", "pause", "index", "lot", "channel", "space", "frame", "tube", "journal", "message", "priority", "poll", "list", "flag", "topic", "bl", "pipe", "archive", "zip", "sequence"], "cnt": ["dcount", "ecnt", " cn", "xcct", "Cpt", "cont", "ecNT", "cNT", "cn", "cnc", "cct", "curn", "dcnt", "ccd", "Cn", "coct", " ccd", "curnc", "count", " cNT", "ecct", " cct", "xcnc", "dcNT", " cnc", "cocd", "xcnt", "Cct", "cpt", " count", "cst", "dcct", "ecount", "Ccd", "curct", "Cnt", "xcn", " cpt", "curnt", "ecn", " cst", "cost", "ecpt", "Cst"], "n": ["next", "nr", "N", "net", "x", "nt", "ln", "d", "on", "en", "name", "names", "norm", "cn", "g", "ne", "dn", "i", "long", "sn", "c", "z", "m", "ns", "note", "o", "nl", "b", "num", "fn", "t", "nb", "mn", "out", "na", "v", "an", "e", "nc", "nm", "un", "all", "int", "nan", "node", "inn", "nu", "nn", "number", "l", "np", "ll", "ng", "j"]}}
{"code": "ans=0\\nfor _ in range(int(input())):\\n  ans+=eval(\"-\"+input().replace(\" \",\"+\"))+1\\nprint(ans)", "target": "720", "substitutes": {"ans": ["ars", "tan", "ANS", "zan", "ants", "ean", "anon", "ana", "ano", "aus", "ros", "san", "aned", "vals", "ann", "rans", "man", "rs", "anas", "ins", "vers", "ons", "ms", "amps", "wan", "pan", "ens", "anc", "cas", "cons", "mn", "an", "anks", "oss", "anes", "nan", "ran", "ams", "aos", "arts", "lan", "AN"], "_": [" e", " the", " t", " j", "__", " do", " f", " l", " c", " __", " any", "___", " p"]}}
{"code": "def solver(S,T):\\n    counter = 0\\n    for i in range(len(S)):\\n        Si = S[i]\\n        Ti = T[i]\\n        if Si != Ti:\\n            counter += 1\\n    return counter\\n\\nS = input()\\nT = input()\\nprint(solver(S,T))", "target": "123", "substitutes": {"S": ["M", "N", "Source", "NS", "SH", "BS", "SS", "HS", "Sl", "SB", "R", "I", "JS", "SO", "RS", "L", "PS", "X", "VS", "TS", "CS", "SI", "Set", "OS", "H", "As", "GS", "V", "Ins", "IS", "AS", "B", "J", "Q", "G", "P", "SE", "A", "Ray", "US", "s", "Is", "SU", "D", "DS", "Y", "System", "SA", "U", "LS", "Z", "C", "SL"], "T": ["WT", "IT", "M", "N", "TR", "TX", "AT", "R", "I", "It", "L", "TY", "TS", "PT", "VT", "NT", "TG", "H", "Maybe", "CT", "TH", "V", "BT", "O", "TV", "t", "Tu", "RT", "LT", "B", "J", "G", "This", "P", "JSON", "E", "TB", "TT", "XT", "ST", "TA", "Test", "TM", "Y", "TON", "UT", "MT", "GT", "The", "Time", "TN", "C"], "counter": ["nr", "pointer", "master", "n", "ter", "self", "nt", "instance", "random", "point", "manager", "loop", "name", "order", "ounter", "clock", "code", "system", "value", "c", "set", "condition", "total", "Counter", "outer", "result", "term", "container", "ctr", "count", "t", "num", "record", "sim", "amount", "inner", "card", "nc", "ier", "controller", "register", "inter", "book", "number", "there", "index", "cm", "TER", "timer", "sequence", "sum"], "i": ["mi", "n", "xi", "x", "me", "ci", "gi", "point", "p", "di", "I", "m", "batch", "set", "ami", "qi", "ix", "ip", "ind", "f", "num", "t", "si", "record", "li", "key", "ii", "ori", "ti", "s", "im", "iso", "it", "zi", "q", "pi", "item", "id", "j", "index", "k", "y", "ij", "iri"], "Si": ["Vo", "Sil", "II", "Va", "I", "Sm", "Di", "If", " si", "It", "Su", "SI", "Ta", "Ze", "Fi", "Sy", "Isa", "Se", "si", "Sir", "Li", "Iss", "Pi", "Ser", "Gi", "Spec", "Is", "Ice", "Ni", "Spe", "He", "Sa", "Xi"], "Ti": ["Vo", "Lt", "Cu", "Ton", "Tip", "Ho", "I", "It", "Typ", "Di", "Hu", "Wi", "SI", "Ta", "Fi", "Mi", "Tor", "Tu", "To", "Li", "Kit", "ti", "Pi", "Ts", "Is", " ti", "Ky", "Po", "Bi", "Ni", "Ty", "Mu", "Hi", "He", "Xi"]}}
{"code": "a = list(map(int, input().split()))\\nb = a[0]\\nc = 0\\nwhile b > 0:\\n  b = b // a[1]\\n  c += 1\\nprint(c)\\n", "target": "719", "substitutes": {"a": ["n", "x", "ia", "sta", "ae", "ac", "ab", "d", "p", "i", "r", "ma", "eas", "ga", "window", "aux", "ea", "h", "aaa", "fa", "go", "f", "abs", "t", "auto", "alpha", "parts", "da", "args", "apa", "an", "all", "A", "ap", "obj", "at", "sa", "now", "s", "app", "au", "oa", "ed", "div", "aa", "l", "am", "array", "ba", "ca"], "b": ["bis", "sb", "bf", "ab", "d", "p", "db", "g", "ib", "i", "r", "bg", "z", "bi", "wb", "fb", "rb", "bo", "o", "mb", "h", "be", "ob", "bh", "br", "f", "bc", "gb", "t", "nb", "B", "bb", "v", "eb", "bl", "cb", "base", "l", "bp", "y", "bound", "bs", "ba"], "c": ["ce", "lc", "con", "n", "ci", "gc", "cont", "d", "unc", "cd", "xc", "ct", "rc", "i", "r", "tc", "m", "fc", "col", "cur", "cv", "f", "bc", "count", "dc", "t", "cum", "cut", "conf", "v", "e", "nc", "cache", "cos", "im", "conv", "co", "cu", "q", "cb", "l", "cs", "k", "cm", "cr", "cf", "ca", "C", "ac"]}}
{"code": "S = input()\\n\\nif S[0] ==\"R\" and S[1] == \"R\" and S[2] == \"R\":\\n  print(3)\\n  \\nelif (S[0] ==\"R\" and S[1] == \"R\") or (S[1] == \"R\" and S[2] == \"R\"):\\n  print(2)\\n  \\nelif S[0] ==\"R\" or S[1] == \"R\" or S[2] == \"R\":\\n  print(1)\\n  \\nelse:\\n  print(0)", "target": "482", "substitutes": {"S": ["M", "N", "Source", "NS", "T", "SF", "SH", "Sand", "Si", "Series", "BS", "SS", "HS", "SL", "SB", "R", "I", "SER", "L", "X", "JS", "PS", "Sl", "RS", "Su", "SO", "SI", "TS", "CS", "VS", "Screen", "State", "Set", "OS", "H", "W", "GES", "O", "V", "GS", "IS", "Sample", "States", "B", "Q", "G", "Sing", "P", "SE", "A", "E", "s", "Is", "Results", "IES", "Ds", "SU", "SP", "D", "DS", "Y", "SA", "F", "SR", "String", "Z", "C"]}}
{"code": "mod=1000000007\\nn=int(input())\\na=input()\\n\\nd=[0]\\nfor i in range(1,n):\\n    if a[i-1]==a[i]:\\n        d[-1]+=1\\n    else:\\n        d.append(0)\\nans=[3,6][d[0]]\\nfor i in range(1,len(d)):\\n    if d[i-1]==d[i]==1:\\n        t=3\\n    elif d[i-1]==1 and d[i]==0:\\n        t=1\\n    else:\\n        t=2\\n    ans=(ans*t)%mod\\nprint(ans)", "target": "479", "substitutes": {"mod": ["fd", "rot", "MOD", "sign", " Mod", "sub", "med", "Mod", "pre", "san", "cod", "m", "set", "pad", "od", "module", "OD", "round", "dec", "step", "ms", "log", "ind", "trans", "num", "time", "form", "dig", "sim", "ver", "add", "post", "debug", "print", "base", "div", "size", "rand", "var", "id", "sd", "mt", "mode", "init", "sum"], "n": ["N", "x", "nt", "ln", "p", "on", "ne", "cn", "g", "ai", "r", "sn", "c", "w", "m", "ns", "o", "f", "b", "num", "fn", "len", "nb", "na", "v", "an", "nc", "s", "nan", "nu", "nn", "l", "np", "k", "j"], "a": ["ars", "x", "ia", "sta", "ae", "ab", "p", "va", "ai", "c", "ma", "m", "ata", "ea", "pa", "aaa", "la", "f", "b", "alpha", "art", "apa", "an", "att", "ad", "A", "al", "ap", "at", "sa", "s", "st", "au", "oa", "aa", "am", "ar", "y", "ba", "ca", "ac"], "d": ["fd", "ld", "p", "db", "di", "g", "td", "gd", "dh", "r", "c", "ma", "m", "bd", "z", "dl", "o", "dt", "done", "f", "b", "days", "dat", "da", "dates", "dr", "pd", "de", "v", "e", "ad", "des", "s", "debug", "D", "ed", "do", "div", "dot", "l", "dd", "sd", "did", "j", "data", "dict", "ds", "md", "nd"], "i": ["mi", "xi", "x", "ia", "uri", "ie", "me", "ci", "gi", "cli", "p", "di", "ai", "I", "this", "m", "batch", "bi", "yi", "qi", "ic", "ix", "ski", "ip", "ind", "f", "b", "multi", "io", "si", "li", "ii", "ji", "v", "ei", "ori", "ti", "oi", "iy", "im", "it", "zi", "ini", "ui", "\u0438", "q", "phi", "pi", "l", "id", "j", "y", "index", "asi", "ik", "ij", "iu"], "ans": ["arms", "ars", "x", "ANS", "ants", "ats", "ians", "names", " means", "eds", "aus", "ts", "ns", "vals", "ann", "rans", "rs", "anas", "ks", "ins", "ons", "ms", "angs", "amps", "ls", "ents", "ens", "uns", "an", "ad", "des", "terms", "s", "idents", "xs", "ions", "ands", "ams", "roots", "aos", "vs", "dd", "ads", "cs", "arts", "os", "es", "lan", "ds", "bs"], "t": ["tm", "rot", "ty", "T", "ta", "p", "g", "test", "ct", "td", "wt", "tc", "c", "ts", "m", "type", "total", "o", "te", "tree", "tp", "term", "dt", "f", "time", "pt", "ot", "tu", "v", "at", "tt", "it", "tf", "rt", "q", "l", "j", "vt", "y", "mt", "temp", "trace"]}}
{"code": "N = int(input())\\nA = [0] + list(map(int, input().split())) + [0]\\npre = 0\\nyen = sum(abs(i - j) for i, j in zip(A, A[1:]))\\nans = [yen] * N\\nfor i in range(N):\\n    ans[i] += -abs(A[i] - A[i+1]) - abs(A[i+1] - A[i+2]) + abs(A[i] - A[i+2])\\nprint(*ans, sep='\\n')\\n", "target": "527", "substitutes": {"N": ["M", "n", "NS", "T", "GN", "NI", "Ns", "X", "I", "R", "L", "NA", "NN", "NP", "NR", "NT", "H", "W", "V", "TN", "No", "S", "B", "J", "Q", "G", "Num", "P", "Sn", "D", "NB", "Y", "Ni", "K", "F", "Z", "FN", "C"], "A": ["a", "GA", "M", "T", "CAR", "All", "API", "Al", "An", "IA", "Ar", "Alpha", "Abs", "AU", "AT", "X", "I", "R", "NA", "L", "AL", "ACE", "One", "And", "AB", "App", "AE", "Args", "Auth", "H", "AA", "LA", "As", "O", "V", "WA", "AR", "RAM", "AS", "S", "EA", "B", "Q", "G", "This", "P", "AP", "HA", "CA", "MA", "E", "At", "You", "JA", "D", "AF", "AM", "Alice", "SA", "U", "AC", "The", "AN", "ACT", "Array", "F", "C"], "pre": ["prev", "Pref", "syn", "offset", "PRE", "set", "prefix", "prime", "RE", "Ind", "Pre", "Pres", "POST", "ind", "NOTE", "sp", "num", "len", "ii", "adj", "post", " PRE", "inter", "pres", "pi", "Note", "init"], "yen": ["uyens", "gyp", "nyen", " yhen", "dyen", "yens", "gyern", "nyoen", "gyen", "dyern", "dyp", "nyern", "nyp", " yern", "uyhen", "gyoen", "uyern", "nyhen", "uyen", "yoen", " yens", "dyoen", "yern", "yp", "yhen", "nyens"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "uri", "me", "ci", "gi", "cli", "p", "name", "g", "di", "ai", "I", "this", "m", "batch", "bi", "yi", "qi", "info", "ic", "ix", "ip", "iri", "ind", "f", "b", "ri", "io", "si", "sim", "ii", "li", "ji", "v", "ori", "ei", "ti", "key", "list", "im", "it", "s", "zi", "ini", "ui", "size", "phi", "pi", "u", "id", "item", "y", "index", "ij", "ik", "k", "iu", "hi", "init"], "j": ["n", "x", "ia", "uj", "ja", "ie", "aj", "js", "p", "g", "di", "jp", "jc", "z", "jj", "bi", "ju", "jl", "je", "b", "jac", "rel", "J", "bj", "li", "ji", "kj", "jas", "v", "ch", "jump", "q", "dj", "u", "y", "k", "ij"], "ans": ["ars", "ys", "ANS", "ants", "ats", "ians", "An", "eds", " means", "outs", "aus", "ros", " Ans", "ns", "ann", "rans", "anas", "ses", "ks", "ins", "offs", "ras", "leans", "ons", "ms", "amps", "angs", "ents", "ens", "uns", " sans", "an", "iann", "aps", "oss", "s", "idents", "xs", "ran", "ams", "aos", "arts", "os", "AN"]}}
{"code": "#\u305d\u306e10\\n\\nO = str(input())\\nE = str(input())\\nP = []\\nfor i in range(len(O)):\\n    P.append(O[i])\\n    if i < len(E):\\n        P.append(E[i])\\nprint(''.join(P))", "target": "102", "substitutes": {}}
{"code": "def answer(s: str) -> str:\\n    return ''.join(s[0].upper() for s in s.split())\\n\\n\\ndef main():\\n    s = input()\\n    print(answer(s))\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "222", "substitutes": {"s": ["a", "n", "x", "ats", "p", "i", "r", "hs", "c", "z", "ns", "res", "ms", "gins", "sel", "ss", "v", "string", "ares", "q", "se", "sw", "self", "js", "g", "m", "ins", "less", "sl", "fts", "gets", "sv", "say", "sts", "l", "cs", "single", "str", "spec", "sf", "lines", "ses", "h", "parts", "tes", "sin", "sis", "es", "os", "ps", "sb", "su", "space", "fs", "w", "ts", "rs", "ls", "f", "b", "t", "S", "sq", "gs", "ws", "st", "sol", "j", "y", "qs", "ds"]}}
{"code": "def str2bitstr(chs):\\n    val = int(chs)\\n    tmp = bin(val)[2:]\\n    tmp2 = '0' * (60 - len(tmp))\\n    return tmp2 + tmp\\n\\n\\nn = int(input())\\na = list(map(str2bitstr, input().split()))\\n\\ncnts = [0] * 60\\n\\nfor item in a:\\n    for i, ch in enumerate(item):\\n        if ch == '1':\\n            cnts[i] += 1\\n\\nret = 0\\nnow = 1\\n\\nfor i in range(1, 61):\\n    kumi = cnts[-i] * (n - cnts[-i]) % (10 ** 9 + 7)\\n    ret += kumi * now % (10 ** 9 + 7)\\n    now *= 2 % (10 ** 9 + 7)\\n    ret = ret % (10 ** 9 + 7)\\n\\nprint(ret % (10 ** 9 + 7))\\n", "target": "353", "substitutes": {"chs": ["CHs", "ihares", "ihrs", "tchares", "chps", "chares", "CHps", "chnrs", "chrs", "chns", "strps", "tchrs", " chps", "strs", " chts", "strts", "tchs", "ihs", "CHts", "chnares", "chts"], "val": ["rot", "x", "p", "test", "VAL", "aval", "value", "txt", "vals", "cho", "lit", "res", "elt", "ind", "buf", "b", "sel", "num", "t", "vol", "pt", "Val", "conf", "li", "bit", "v", "int", "al", "obj", "pl", "var", "bin", "pret", "vt", "index", "data", "mint"], "tmp": ["stuff", "cmp", "x", "perm", "nt", "mp", "test", "td", "txt", "sample", "img", "prime", "gt", "aaa", "term", "ind", "cmd", "buf", "sp", "empty", "t", "ot", "out", "resp", "v", "cache", "qq", "obj", "xy", "tt", "mk", "orig", "rt", "new", "cb", "buff", "np", "bin", "var", "etc", "yy", "vt", "data", "attr", "j", "temp"], "tmp2": ["temp2", " tmp1", "mp3", "txt02", "txt1", "mp02", "temp3", "tmp02", "temp1", "mp2", "tmp1", "temp02", "mp1", "tmp3", " tmp3", "txt2", " tmp02"], "n": ["N", "net", "nt", "gn", "d", "p", "ne", "cn", "g", "dn", "w", "r", "c", "sn", "m", "z", "ns", "o", "nl", "h", "f", "b", "num", "t", "count", "len", "nb", "out", "na", "v", "nm", "new", "nn", "l", "np", "u", "j", "y"], "a": ["x", "to", "ae", "ab", "ta", "p", "arr", "ai", "items", "ma", "m", "z", "eas", "o", "ea", "la", "aaa", "b", "t", "an", "e", "list", "all", "A", "at", "sa", "s", "aka", "ao", "oa", "aos", "aa", "l", "ar", "y", "index", "array", "area", "ba"], "cnts": ["Cntl", "ccountls", "ccountS", "Cctls", "ccountps", "cctps", "cgtS", "cptls", " ccountns", " ccountls", " ccountps", " ccounts", "cntn", "cctn", "cntl", "Cnts", "countls", "cntS", "cptl", "cNTis", " cntns", "cgtn", "cptps", "cntis", " cntis", " cntS", "ccounts", "cpts", "cNTs", "Cctl", "cctl", "ccts", "Ccts", "ccountns", "cretls", "cntls", "cptns", " ccountn", "cctls", "cgts", "crets", "Cntls", "cntps", "cNTls", " cNTls", "countl", " cntn", "cctS", " cNTs", "cctns", "cctis", " cNTis", "counts", "cretis", " cntls", "cgtls", "cntns", " ccountS", " cntps", "ccountn"], "item": ["aq", "ex", "pair", "ie", "ite", "ach", "name", "order", "test", "code", "iter", "value", "items", "m", "set", "och", "ix", "ip", "sel", "bit", "li", "key", " Item", "v", "ti", "list", "up", "row", "obj", "ich", "im", "it", " it", "q", "mem", "j", "Item", "attr", "ow"], "i": ["mi", "ki", "xi", "x", "ie", "ite", "ci", "gi", "p", "di", "iq", "ai", "I", "r", "c", "m", "z", "bi", "qi", "ic", "ix", "ip", "ind", "f", "b", "si", "iu", "sim", "li", "ii", "ji", "v", "e", "ei", "ti", "ori", "im", "it", "zi", "ini", "ui", "one", "phi", "pi", "ali", "id", "j", "index", "k", "ij", "y", "ik", "iri", "like"], "ch": ["channel", "CH", "sh", "ex", "x", "che", "uch", "ach", "qu", "ech", "quant", "chi", "chain", "c", "z", "cho", "och", "col", "tch", "chan", "h", "Ch", "sch", "cht", "conf", "chrom", "key", "cha", "ich", "unch", "char", "q", "chn", "k", "j", "chu"], "ret": ["alt", "next", "net", "rex", "nt", "cat", "match", "ert", "get", "reset", "rep", "test", "arr", "jp", "iter", "re", "store", "r", "txt", "report", "ref", "set", "repl", "total", "gt", "res", "cert", "Ret", "ft", "result", "rets", "term", "dt", "RET", "num", "elt", "t", "gb", "grain", "len", "sat", "out", "mont", "det", "final", "obj", "at", "rt", "print", "et", "usr", "mem", "pret", "j", "mt", "after", "sum"], "now": ["next", "hold", "sb", "before", "aj", "reset", "test", "this", "we", "seed", "current", "age", "set", "wait", "window", "sec", "second", "gm", "cur", "ready", "sp", "time", "count", "ow", "off", "update", "ws", "delay", "post", "at", "when", "pres", "new", "here", "stage", "NOW", "then", "aw", "mem", "j", "Now", "after", "sum"], "kumi": ["nnum", "kmi", "kimi", "akmi", "akuci", "akumin", "kumin", "kuci", "aknum", "knum", " knum", "skimi", "nimi", "numi", "skuci", "akimi", "nuci", "skumin", "skumi", " kmi", "numin", "akumi", " kumin", "nmi"]}}
{"code": "H,W,N = map(int,input().split())\\nNli=[]\\nfor k in range(N):\\n    a,b=map(int,input().split())\\n    for n in range(-1,2):\\n        for m in range(-1,2):\\n            if 0<=a-2-m<H-2 and 0<=b-2-n<W-2:\\n                Nli.append((b-n)*(H)+(a-m))\\nimport collections\\ns = collections.Counter(Nli)\\nv = list(s.values())\\nprint((H-2)*(W-2)-len(set(Nli)))\\nfor k in range(1,10):\\n    print(v.count(k))", "target": "776", "substitutes": {"H": ["M", "Eh", "CH", "HD", "T", "HS", "AH", "HE", "Th", "X", "R", "HL", "HO", "HI", "GH", "HTML", "NH", "h", "HR", "DH", "TH", "V", "Height", "HH", "B", "G", "HA", "P", "A", "OH", "Host", "HC", "MH", "Y", "HTTP", "HB", "High", "K", "F", "HT", "Health", "He", "C"], "W": ["WT", "WC", "M", "T", "WR", "MW", "WI", "Win", "CW", "WAR", "TW", "WP", "NW", "R", "L", "w", "VW", "WH", "BW", "V", "WA", "Width", "S", "SW", "Wh", "B", "WB", "P", "WD", "WM", "Y", "FW", "WE", "DW", "EW", "K"], "N": ["M", "NS", "T", "NI", "Na", "Ns", "R", "I", "NA", "L", "NM", "NN", "NP", "NR", "NT", "V", "S", "NE", "B", "Num", "P", "A", "E", "D", "NB", "Y", "MN", "Ni", "K", "TN", "C"], "Nli": ["Nsp", "Kzi", "CNLI", "nni", "Vmi", "Nni", "ANni", "Vlis", "Al", "ANmi", "MNli", "nln", "MNln", "Nbi", "CNlis", "NSln", "Vni", "Vsp", "Ml", "NSni", " Nsp", " Nmi", "Mzi", "ANsp", "Mli", "Alis", "Kli", "ANli", "Klis", "NSbi", "NLI", "Nl", " Nni", "nbi", "Nln", "MNbi", "Kl", "MNni", "CNli", "Nmi", "Ali", "CNni", "Azi", " Nlis", "Vli", "NSli", "Nzi", "VLI", "Mlis", "nli", "Nlis", " NLI"], "k": ["ck", "km", "ki", "kn", "uk", "x", "kr", "ek", "kh", "kl", "ijk", "p", "kar", "ak", "ke", "kid", "i", "w", "o", "kw", "ko", "tk", "t", "key", "kj", "ok", "ikk", "ku", "wk", "kt", "q", "u", "kk", "ka", "kan", "K", "ik", "sk", "j"], "a": ["ia", "ae", "ac", "ab", "ta", "d", "p", "va", "ai", "ak", "i", "w", "r", "c", "ma", "o", "ea", "h", "la", "f", "t", "an", "e", "A", "al", "ap", "at", "sa", "ao", "au", "oa", "aa", "l", "am", "ar", "u", "j", "ba"], "b": ["sb", "d", "p", "db", "g", "i", "r", "w", "c", "z", "bi", "fb", "rb", "bm", "o", "h", "be", "bh", "f", "bc", "t", "B", "bb", "e", "eb", "cb", "l", "bp", "u", "j", "y", "bs", "ba"], "n": ["nt", "gn", "ln", "d", "p", "en", "on", "ne", "cn", "g", "dn", "i", "w", "sn", "c", "r", "z", "ns", "ny", "o", "h", "f", "t", "nor", "mn", "na", "an", "yn", "nc", "e", "nm", "nan", "nu", "nn", "l", "q", "ng", "j"], "m": ["mi", "M", "d", "p", "mo", "mm", "g", "i", "w", "r", "c", "ma", "z", "em", "man", "bm", "o", "gm", "h", "f", "arm", "t", "mc", "mn", "an", "nm", "sm", "im", "q", "l", "am", "mem", "u", "j", "y", "md", "mt"], "s": ["sb", "ogs", "ats", "js", "eds", "fs", "sys", "ts", "ns", "rs", "ses", "sl", "h", "ms", "ls", "abs", "S", "ss", "si", "its", "sc", "gs", "sq", "st", "sv", "sol", "sts", "sets", "cs", "es", "os", "stats", "qs", "ds", "ps"], "v": ["qv", "vv", "p", "vi", "vp", "tv", "g", "i", "w", "uv", "c", "ev", "values", "h", "ms", "vr", "V", "cv", "f", "vc", "iv", "ver", "av", "nv", "lv", "vm", "sv", "ve", "vs", "l", "u", "j", "vt", "es"]}}
{"code": "from collections import deque\\nN = int(input())\\n\\nans = 0\\nls = ['3','5','7']\\nfor x in ls:\\n    st = deque([])\\n    flag = False\\n    st.append((x, flag))\\n    while st:\\n        cur, f = st.pop()\\n        if f:\\n            ans += 1\\n        else:\\n            if '3' in set(list(cur)) and '5' in set(list(cur)) and '7' in set(list(cur)):\\n                # print(cur)\\n                f = True\\n                ans += 1\\n        for y in ls:\\n            if int(cur + y) <= N:\\n                st.append((cur+y, f))\\nprint(ans)", "target": "212", "substitutes": {"N": ["n", " D", "NS", " S", " Count", "Ns", "X", "L", " n", " A", " Q", " Out", " Num", " L", "S", " names", " C", "Num", "Cons", "A", " E", " fn", "Count", "Len", " NS", "Names", " LS", "C"], "ans": ["n", "ANS", "ants", "ats", "gn", "anon", "eds", "aus", "ts", "ns", "vals", "ann", "rans", "rs", "anas", "ks", "ins", "ons", "flags", "ents", "ens", "len", "anc", "uns", "pos", "an", "anks", "aps", "s", "xs", "ran", "ands", "cs", "arts", "ags", "lan", "AN"], "ls": ["lc", "tl", "ats", "lt", "ld", "ln", "outs", "les", "sels", "ts", "ns", "dl", "rs", "ses", "itles", "ins", "nl", "ds", "irs", "lis", "lists", "rl", "lp", "Li", "gs", "ws", "lv", "ists", "s", "xs", "l", "vs", "lbs", "cs", "LS", "bs", "aints"], "x": ["a", "wx", "xi", "ex", "xe", "p", "xes", "ux", "xc", "X", "xa", "i", "rx", "ox", "ace", " ax", "xt", "ix", "tx", "ax", "xd", "t", "v", "fx", "xy", "xs", "xb", "dx", "q", "xx", "l", "nex", "u", "y", "xp", "xf"], "st": ["ut", "storage", "stop", "sh", "sta", "nt", "str", "ld", "d", "ste", "ct", "store", "ust", "r", "sth", "ts", "z", "set", "xt", "ist", "inst", "nl", "sl", "fr", "sp", "stable", "t", "pt", "lo", "std", "bt", "list", "ost", "s", "est", "rest", "ST", "St", "stage", "bl", "usr", "sts", "l", "tmp", "cl", "play", "se", "stack", "nd", "start"], "flag": ["state", "ld", "ret", "true", "age", "set", "leaf", "status", "land", "lag", "nl", "agged", "bug", "ground", "flags", "false", "mask", "tag", "cmd", "ind", "bool", "count", "cond", "no", "Flag", "force", "bit", "nil", "int", "ad", "lv", "af", "gz", "lock", "fg", "id", "lan"], "cur": ["loc", "ce", "con", "ser", "th", "cat", "cont", " Cur", "cycle", "ct", "car", "rc", "r", "c", "current", "ctx", "dec", "cor", "col", "rec", "ind", "cv", "buf", "ctr", "pri", "fac", "ver", "dr", "Cur", "row", "obj", "ur", "now", "ch", "tr", "char", "co", "ve", "desc", "cp", "tmp", "grad", "cr", "dict", "pg", "sc"], "f": ["fd", "bf", "d", "p", "alf", "flat", "i", "sf", "r", "w", "c", "m", "fc", "fp", "fb", "h", "b", "t", "fe", "fac", "force", "fl", "ff", "v", "e", "tf", "found", "l", "fg", "u", "k", "y", "fi", "fire", "F", "cf"]}}
{"code": "a = int(input()[-1])\\nprint(a in [0,1,6,8] and \"pon\" or a == 3 and \"bon\" or \"hon\")", "target": "595", "substitutes": {"a": ["n", "x", "ia", "ae", "ac", "ab", "ta", "aj", "p", "ana", "va", "aval", "i", "w", "\u00e1", "c", "ma", "z", "m", "ga", "o", "pa", "aaa", "val", "act", "f", "b", "t", "alpha", "da", "wa", "apa", "na", "an", "e", "all", "A", "ap", "af", "sa", "s", "ao", "ha", "he", "app", "au", "oa", "ona", "aa", "am", "aw", "ar", "ba", "ca"]}}
{"code": "n = int(input())\\napple = []\\nfor _ in range(n):\\n    a, b = map(int, input().split())\\n    apple.append([b, a])\\napple = sorted(apple)\\ncount = 0\\ns = 0\\nfor i in apple:\\n    if count + i[1] <= i[0]:\\n        s += 1\\n        count += i[1]\\n    else:\\n        s = 0\\n        break\\nprint(\"Yes\" if s==n else \"No\")", "target": "55", "substitutes": {"n": ["N", "x", "nt", "gn", "d", "p", "ne", "cn", "g", "sn", "r", "c", "m", "ns", "total", "o", "nl", "pan", "f", "num", "t", "nia", "len", "nb", "no", "na", "v", "an", "nc", "nan", "size", "nn", "l", "number", "np", "q", "yes", "j", "y", "k"], "apple": ["abe", "oral", "bank", " apples", "ro", "local", "pal", "fruit", "fresh", "file", "flat", " Apple", "windows", "ape", "position", "ace", "leaf", "cho", "osa", "ble", "mate", "window", "make", "python", "bare", "less", "tree", "pan", "grow", "false", "vine", "fa", "media", "mac", "alert", "exclusive", "panic", "parse", "address", "tap", "can", "na", "null", "list", "at", "none", "watch", "app", "print", "au", "radio", "base", "element", "Apple", "there", "play", "trial", "range", "agles", "bay", "mouse", "array", "ack", "ca", "android"], "_": ["x", " j", " o", "ate", "ox", " all", "val", "ind", " l", " x", " c", " m", "A", " any", " p", " un", "ac"], "a": ["ia", "sta", "ae", "ac", "ab", "aj", "ach", "ai", "r", "c", "ma", "ea", "pa", "be", "art", "an", "e", "A", "ap", "at", "sa", "app", "au", "oa", "aa", "am", "ar", "ba", "ca"], "b": ["bis", "sb", "ab", "d", "db", "g", "ib", "bg", "c", "bi", "fb", "rb", "bo", "be", "bc", "t", "nb", "B", "bb", "v", "e", "eb", "cb", "l", "bp", "j", "y", "bs", "ba"], "count": ["th", "self", "nt", "d", "p", "score", "test", "ct", "code", "span", "ount", "length", "c", "current", "age", "z", "set", "report", "status", "total", "message", "ind", "f", "num", "t", "nb", "amount", "conf", "v", "e", "list", "cache", "found", "size", "counter", "number", "command", "Count", "id", "index", "y", "C", "sum"], "s": ["events", "sum", "ats", "d", "p", "g", "fs", "r", "w", "c", "ts", "m", "z", "ns", "rs", "second", "h", "ls", "f", "sp", "abs", "t", "ss", "S", "num", "v", "e", "gs", "sq", "string", "conv", "size", "counter", "l", "Count", "cs", "j", "os", "es", "stats", "ps", "bs"], "i": ["iii", "\u00ed", "mi", "xi", "x", "ite", "gi", "p", "di", "ib", "ai", "I", "m", "bi", "qi", "ic", "ix", "o", "ip", "ind", "f", "io", "si", "mac", "li", "ii", "ji", "ei", "e", "ori", "ti", "oi", "v", "it", "ini", "ui", "zi", "\u0438", "q", "l", "pi", "u", "id", "item", "j", "y", "ij", "ik", "iu", "hi"]}}
{"code": "A, B, C = input().split(' ')\\nif int(C) <= (int(A) + int(B)):\\n    print('Yes')\\nelse:\\n    print('No')", "target": "618", "substitutes": {"A": ["Al", "An", "IA", "Ar", "Alpha", "AH", "AU", "AT", "I", "AL", "AV", "ABC", "App", "AB", "RA", "H", "LA", "AA", "As", "AI", "AR", "AS", "This", "HA", "CA", "At", "AY", "AF", "AM", "SA", "AC", "ACT", "AN", "AP"], "B": ["LB", "BI", "N", "M", "CB", "MB", "RB", "BL", "VB", "Bs", "Big", "L", "IB", "AB", "BG", "BW", "V", "BT", "b", "Bar", "BC", "BBC", "BE", "J", "GB", "WB", "BR", "G", "BB", "USB", "Ber", "Blue", "Bern", "FB", "TB", "D", "NB", "EB", "Y", "Bi", "DB", "BA"], "C": ["M", "N", "CB", "T", "JC", "CG", "LC", "L", "CE", "c", "CI", "CS", "CN", "Cs", "H", "CV", "CP", "V", "CT", "S", "BC", "CD", "EC", "Co", "Q", "SC", "G", "CO", "DC", "CA", "CR", "E", "CON", "D", "CC", "Y", "AC", "F"]}}
{"code": "n , m = map(int , input().split())\\na =[]\\nb=[]\\nfor i in range(n):\\n\ta.append(list(map(int , input().split())))\\nfor i in range(m):\\n\tb.append(list(map(int, input().split())))\\nfor i in range(n):\\n\tnow =10**9+90000\\n\tidx=0\\n\tfor j in range(m):\\n\t\td=abs(a[i][0]-b[j][0])+abs(a[i][1]-b[j][1])\\n\t\tif(d<now):\\n\t\t\tnow=d\\n\t\t\tidx=j+1\\n\tprint(idx)", "target": "3", "substitutes": {"n": ["nr", "N", "x", "net", "nt", "p", "ne", "g", "r", "w", "c", "sn", "z", "ns", "o", "h", "num", "t", "nb", "no", "mn", "na", "an", "e", "v", "nc", "s", "nu", "nn", "l", "pi", "np", "y"], "m": ["tm", "mi", "M", "mr", "me", "mod", "dm", "p", "mm", "fm", "g", "r", "mos", "c", "ma", "man", "bm", "rm", "o", "gm", "h", "ms", "mis", "t", "mc", "mn", "v", "sm", "l", "cm", "mt", "mk", "hm"], "a": ["aq", "ia", "sta", "ae", "ab", "ta", "arr", "ai", "r", "\u00e1", "ata", "eas", "ga", "o", "aux", "la", "aaa", "be", "act", "abs", "\u00e4", "t", "auto", "alpha", "da", "apa", "an", "att", "all", "al", "ap", "A", "obj", "at", "sa", "ao", "app", "oa", "au", "aa", "am", "ar", "ba", "ca", "ac"], "b": ["bis", "sb", "ab", "db", "g", "ib", "blue", "r", "c", "bi", "wb", "pb", "fb", "rb", "be", "aaa", "ob", "result", "bh", "br", "abs", "bc", "t", "nb", "B", "bb", "its", "bt", "obj", "it", "eb", "app", "bl", "cb", "base", "l", "buff", "bp", "bin", "bound", "bs", "ba"], "i": ["mi", "ki", "xi", "x", "ia", "ie", "ci", "gi", "ir", "di", "ai", "bi", "ami", "yi", "iti", "ic", "o", "ix", "ip", "io", "si", "li", "ii", "ji", "v", "int", "ti", "im", "it", "zi", "ini", "ui", "\u0438", "pi", "id", "y", "iat", "ij", "ik", "iu"], "now": ["tm", "next", "hold", "onew", "sw", "before", "max", "local", "always", "aj", "on", " NOW", " Now", "store", "we", "current", "age", "full", "wait", "old", "since", "min", "gm", "dt", "df", "ready", "time", "t", "ow", "temp", "off", "ws", "soon", "delay", "at", "tt", "date", "st", "pres", "here", "today", "new", "NOW", "cast", "then", "dd", "Now", "after", "start"], "idx": [" idy", "idz", "Idxs", "idy", "idxs", "Idex", " idxs", "Idx", "ridx", " idz", "Idy", "Idz", "idexs", "indx", "idex", "ridz", "idindex", "ridex", "Idindex", "ridxs", " idindex", " idex", "indy", "index", "ideex", "indxs", "ideindex"], "j": ["json", "x", "uj", "ja", "str", "js", "aj", "g", "di", "jp", "job", "r", "oj", "jc", "z", "c", "jj", "o", "ix", "col", "h", "jl", "f", "je", "fr", "br", "t", "jac", "pt", "J", "bj", "li", "ji", "v", "kj", "obj", "at", "s", "it", "jump", "q", "l", "dj", "y", "index", "k", "ij"], "d": ["fd", "x", "dos", "ld", "p", "db", "g", "dn", "td", "gd", "dh", "w", "r", "c", "daily", "z", "diff", "dom", "ind", "dt", "df", "f", "dy", "dat", "t", "dr", "pd", "de", "e", "debug", "s", "dp", "dx", "D", "new", "ed", "do", "dis", "dot", "l", "dd", "du", "sd", "dra", "u", "dj", "ds", "nd"]}}
{"code": "str_n = input()\\ndigits = [int(c) for c in str_n]\\n\\nif sum(digits[1:]) == 9 * (len(digits) - 1):\\n    print(sum(digits))\\nelse:\\n    print(digits[0] + 9 * (len(digits) - 1) - 1)\\n", "target": "2", "substitutes": {"str_n": ["str2sn", "str2N", "str1N", " str2sn", "arr2n", "str2number", "arr_N", "arr2N", " str_sn", "arr_number", " str2n", " str_np", "str_N", "str_sn", "arr2number", "str1n", "str_np", " str_N", "arr_n", " str2N", "str1number", "str2np", " str2np", "str_number", "str2n"], "digits": ["decbits", "digashes", " digITS", " Diggins", "zeroitives", " Digit", "digitals", "digitives", "dashashes", "canditals", "dits", "dirits", "signitions", "zeroits", "dbits", "Digits", " digitals", "decests", "funITS", "dashins", " Digites", "digitions", "decits", "digit", "zeroitals", "dimins", " digims", " Digits", "dimits", "digests", "Digashes", " digacts", "signites", " digit", " digues", "digites", " Digitions", " digashes", "diggins", " Digacts", "digITS", "signits", " digins", "digbits", "dirites", "funbits", "dimbits", "digims", "dirgins", "funits", "canditives", "decacts", "candits", "digacts", "dashues", "signgins", "digitors", "zeroitors", "diritions", " Digbits", "digins", "Digins", " DigITS", " digbits", " digests", "funit", "dins", " Digests", "digues", "canditors", "dashits", "dimims", "Digues", " digitors", " digitives", "dims"], "c": ["ce", "lc", "n", "x", "self", "cat", "ci", "d", "p", "cont", "name", "cd", "g", "xc", "ct", "i", "r", "z", "o", "h", "cur", "f", "b", "bc", "t", "count", "dc", " C", "v", "e", "nc", "cin", "cc", "\u00e7", "co", " you", "q", "l", "cs", "k", "C"]}}
{"code": "input()\\nprint \" \".join(raw_input().split()[::-1])", "target": "248", "substitutes": {}}
{"code": "# https://atcoder.jp/contests/abc150/tasks/abc150_d\\n# \u534a\u516c\u500d\u6570X\u3068\u306f\u3001X=a_k (p_k + 0.5) for any k \u3092\u6e80\u305f\u3059\u6570\u5b57\u3067\u3042\u308b(p_k\u306f\u8ca0\u306f\u306a\u3044\u6574\u6570)\\n# 2\u3092\u639b\u3051\u308c\u3070\u30012X=a_k P_k where P_k=2p_k+1 \u3068\u306a\u308b\u30022X\u306f\u6570\u5217A\u306e\u516c\u500d\u6570\u3068\u89e3\u91c8\u3067\u304d\u308b\u3002\\n# \u3088\u3063\u3066\u3053\u306e\u554f\u984c\u306f\u3001a_k (k=1...N)\u306e\u516c\u500d\u65702X \u306f 0<=X<=M\u3092\u6e80\u305f\u3059\u7bc4\u56f2\u306b\u3044\u304f\u3064\u5b58\u5728\u3059\u308b\u304b\uff1f\u3068\u3044\u3046\u98a8\u306b\u8aad\u307f\u66ff\u3048\u3089\u308c\u308b\u3002\\n# \u6570\u5217A\u306e\u6700\u5c0f\u516c\u500d\u6570\u30922lcm\u3068\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u7b54\u3048\u306e\u5019\u88dc\u306flcm\u306e\u500d\u6570\u3067\u3042\u308b\u3068\u3053\u308d\u307e\u3067\u7d5e\u308a\u8fbc\u3081\u305f\u3002\\n# \u3053\u308c\u3067\u7b54\u3048\u306e\u5019\u88dc\u3092\u6700\u5c0f\u516c\u500d\u6570\u306e\u534a\u5206\u3001lcm\u306e\u500d\u6570\u3067\u3042\u308b\u3068\u3053\u308d\u307e\u3067\u7d5e\u308a\u8fbc\u3081\u305f\u3002\\n\\n# \u3068\u3053\u308d\u3067P_k\u306f\u5fc5\u305a\u5947\u6570\u3067\u306a\u3051\u308c\u3070\u884c\u3051\u306a\u3044\u306e\u3060\u304b\u3089,X\u3068a_k\u306f\u540c\u3058\u56de\u65702\u3067\u5272\u308a\u5207\u308c\u306a\u3051\u308c\u3070\u884c\u3051\u306a\u3044\u3002\\n# \u3053\u308c\u3092\u6e80\u305f\u3059X\u306f,lcm\u304cP_k\u3068\u540c\u3058\u56de\u65702\u3067\u5272\u308a\u5207\u308c\u308b \u304b\u3064 lcm\u306e\u5947\u6570\u500d\u306e\u6570\u3067\u3042\u308b\u3002\\n\\nimport sys\\nsys.setrecursionlimit(1 << 25)\\nread = sys.stdin.readline\\nra = range\\nenu = enumerate\\n\\n\\ndef read_ints():\\n    return list(map(int, read().split()))\\n\\n\\nMOD = 10**9 + 7\\nINF = 2**31  # 2147483648 > 10**9\\n# default import\\nfrom fractions import gcd\\n\\n\\ndef lcm(a, b):\\n    # \u6700\u5c0f\u516c\u500d\u6570 #\u5358\u4f4d\u5143\u306f1\\n    g = gcd(a, b)\\n    return a // g * b\\n\\n\\nN, M = read_ints()\\nA = read_ints()\\nX = 1\\nfor a in A:\\n    X = lcm(X, a)\\nX = X // 2\\n\\n# \u3059\u3079\u3066\u306ea//2 \u306fX(lcm\u3068\u540c\u3058\u56de\u65702\u3067\u5272\u308a\u5207\u308c\u306a\u3044\u3051\u308c\u3070\u884c\u3051\u306a\u3044)\\nlcm = X\\nn_div = 0\\nwhile lcm & 1 == 0:\\n    lcm //= 2\\n    n_div += 1\\n\\nfor a in A:\\n    if n_div != 0 and (a // 2) % (pow(2, n_div)):\\n        print(0)  # \u5272\u308a\u5207\u308c\u306a\u304b\u3063\u305f\u6642\u70b9\u3067\u305d\u306e\u3088\u3046\u306a\u534a\u516c\u500d\u6570\u306f\u5b58\u5728\u3057\u306a\u3044\\n        exit()\\n\\n\\nprint((M // X + 1) // 2)  # \u5947\u6570\u500d\u306elcm\u306e\u500b\u6570 \u3064\u307e\u308a\u3059\u3079\u3066-\u5076\u6570\u306e\u5206\\n", "target": "385", "substitutes": {}}
{"code": "# -*- coding: utf-8 -*-\\n\\nimport sys\\nfrom math import ceil\\n\\nfor line in sys.stdin.readlines():\\n    List = map(int, line.strip().split())\\n    \\n    n = List[0]\\n    yen = 100000\\n    for i in xrange(n):\\n        yen *= 1.05\\n        yen = int(ceil(yen/1000)) * 1000\\n    print yen", "target": "569", "substitutes": {}}
{"code": "# https://atcoder.jp/contests/agc012/tasks/agc012_a\\n\\nn = int(input())\\nnums = [int(i) for i in input().split()]\\nnums.sort()\\nnums = nums[n:]\\n\\nans = 0\\nfor i in range(0, len(nums), 2):\\n    ans += nums[i]\\nprint(ans)", "target": "438", "substitutes": {}}
{"code": "N_ko = int(input())\\nK = int(input())\\nx_s = list(map(int, input().split()))\\n\\nans_list = [min(abs(i - 0), abs(K - i)) for i in x_s]\\nans = 2 * sum(ans_list)\\n\\nprint(ans)", "target": "446", "substitutes": {"N_ko": ["N__k", "N_k", "N2ko", "N2Ko", "V_k", "V_ko", "N__kr", "V_Ko", "N_Ko", "V_kr", "N_kr", "N__ko", "N2kr", "N2k", "N__Ko"], "K": ["M", "N", "T", "KN", "KY", "KR", "MK", "X", "I", "R", "L", "KK", "Ko", "H", "W", "V", "KS", "PK", "S", "B", "J", "SK", "Q", "P", "Ka", "HK", "VK", "D", "Y", "OK", "UK", "k", "KI", "Z", "KA", "C"], "x_s": ["X_r", "x33stats", "x_ses", "x64r", "X_sum", "x64s", "x33ses", "xieds", "xiedsum", "x64S", "x_S", "xiedS", "X_s", "ix33S", "ix_stats", "x_r", "x_stats", "ix_s", "ix_S", "X_S", "x33s", "ix33ses", "x64sum", "x33S", "ix33stats", "ix33s", "x_sum", "xiedr", "ix_ses"], "ans_list": ["ans_chain", "ansxlist", "ans___full", "ens_LIST", "ens_lists", " Ans_list", "anssLIST", " Ans_full", " Ans_chain", "ansslists", "ans2List", "ens_List", " Ans___chain", "ansxchain", " Ans___full", "ans2full", "ans___chain", "ans_LIST", " Ans___List", "ansslist", "ans2chain", " Ans_List", "ans_full", "ans___List", "ans_List", "ans2list", "ans_lists", "ens_list", "ansxList", "anssList", "ansxfull", " Ans___list", "ans___list"], "i": ["a", "mi", " ii", "ki", "xi", "x", "ci", "p", "di", "ai", "I", "iter", "c", "m", "ic", "ix", "o", "ip", "f", "ri", "t", "io", "si", "ii", "li", "ei", "e", "int", "ti", "oi", "v", "s", "it", "zi", "ui", "ini", "\u0438", "q", "l", "pi", "u", "id", "asi", "j", "y", "ij", "k", "ik", "iu"], "ans": ["ANS", "ants", "books", "aus", "aned", "ns", "anus", "ann", "rans", "bird", "ks", "anas", "offs", "ins", "ms", "amps", "trans", "rets", "grades", "ids", "ens", "cas", "mn", "uns", "an", "posts", "iann", "anks", "anes", "oss", "s", "sv", "xs", "nas", "ams", "aos", "vs", "arts", "os", "es", "stats", "lan", "ps", "sum"]}}
{"code": "n,m,x,y=map(int,input().split())\\nX = list(map(int,input().split()))\\nY = list(map(int,input().split()))\\nif max(X) < min(Y) and max(X)+1 > x and max(X)+1 <= y:\\n  print(\"No War\")\\nelse:\\n  print(\"War\")", "target": "670", "substitutes": {"n": ["N", "d", "p", "name", "g", "i", "r", "c", "ns", "o", "h", "f", "b", "num", "t", "mn", "v", "e", "nc", "nm", "s", "nn", "l", "np", "j", "k"], "m": ["mi", "M", "mr", "dm", "d", "p", "mm", "mu", "g", "i", "r", "c", "h", "ms", "f", "b", "t", "mc", "mn", "v", "nm", "dim", "l", "k", "j", "month", "cm"], "x": ["xi", "ex", "foo", "p", "ux", "xc", "left", "i", "rx", "w", "c", "ox", "z", "xt", "xml", "ix", "h", "tx", "ax", "f", "t", "v", "e", "fx", "xy", "xs", "mx", "dx", "l", "xx", "yx", "px", "xp"], "y": ["sy", "ty", "ys", "p", "ady", "cy", "i", "oy", "z", "ies", "ny", "vy", "py", "ye", "h", "yr", "sky", "yk", "b", "dy", "axy", "t", "yl", "uy", "v", "ey", "gy", "height", "iy", "xy", "yt", "yy", "ay", "ym"], "X": ["INT", "M", "IX", "N", "T", "CH", "TX", "IP", "I", "EX", "L", "R", "PE", "MX", "UX", "OX", "IE", "Ex", "RE", "H", "W", "XY", "CT", "V", "TH", "IM", "XP", "DX", "Q", "ML", "This", "P", "ID", "A", "FX", "XX", "D", "XT", "XXX", "XL", "AC", "TON", "Z", "EL", "Data"], "Y": ["Other", "M", "N", "YD", "CH", "T", "GY", "IA", "IP", "EY", "My", "OW", "R", "Py", "I", "TY", "MX", "MY", "IE", "YC", "GE", "Year", "W", "XY", "V", "YA", "B", "J", "IO", "YY", "XX", "FY", "Cy", "By", "HT", "SY", "Z", "NY", "BY"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\ns=[0]*n\\ndiff=[0]*(n)\\nSum=0\\nfor i in range(n):\\n  Sum+=a[i]\\n  s[i]=Sum\\n#print(s)\\nSUM=sum(a)\\nfor i in range(n):\\n  diff[i]=abs(s[i]-(SUM-s[i]))\\n  \\n#print(diff)\\nprint(min(diff))", "target": "728", "substitutes": {"n": ["N", "x", "net", "nt", "d", "p", "names", "norm", "ne", "cn", "g", "ct", "sn", "r", "c", "m", "ns", "o", "nl", "h", "num", "t", "count", "nia", "len", "nb", "no", "mn", "na", "v", "an", "int", "nc", "nan", "nu", "size", "q", "l", "nn", "np", "number", "pi", "k", "j", "nd", "sum"], "a": ["x", "sta", "ae", "ac", "ab", "ta", "p", "d", "ai", "c", "ma", "m", "input", "ga", "values", "aaa", "f", "b", "alpha", "att", "an", "v", "A", "another", "sa", "ao", "au", "oa", "aa", "am", "data", "area", "ba", "ca"], "s": ["sb", "x", "iffs", "ys", "d", "p", "g", "outs", "w", "c", "ts", "m", "ns", "rs", "ins", "h", "ls", "b", "t", "S", "ss", "si", "its", "als", "v", "strings", "gs", "sa", "xs", "sv", "sets", "l", "vs", "os", "y", "stats", "es", "ds", "ps", "bs"], "diff": ["changed", "iffs", "missing", "err", " t", "d", "sup", "Diff", "dl", "total", "change", "Change", " Diff", "Changed", "Delta", "f", "ss", " Differences", "dx", "new", " differences", "D", "vs", "np", "changes", " d", "ds", "sc"], "Sum": ["Total", "N", "New", "Score", "Output", "Str", "Summary", "Alpha", "Default", "Average", "Log", "Result", "Empty", "Diff", "Res", "Si", "Next", "Su", "Pos", "Set", "Mass", "Used", "Current", "Delta", "As", "V", "Final", "S", "Out", "Match", "Val", "Us", "Real", "Num", "Zero", "Index", "Hash", "Raw", "Avg", "Base", "Sc", "Mem", "Size", "Count", "Weight", "Value", "sum"], "i": ["mi", "ki", "xi", "x", "uri", "ni", "ci", "gi", "vi", "g", "di", "ai", "I", "m", "batch", "bi", "qi", "yi", "info", "ic", "ix", "ip", "b", "multi", "ri", "io", "si", "sim", "ii", "li", "ji", "v", "key", "ori", "ti", "im", "it", "zi", "ui", "ini", "base", "q", "pi", "u", "id", "j", "y", "ij", "iri"]}}
{"code": "sec_ = int(input())\\nprint(\"{}:{}:{}\".format(sec_//3600, (sec_//60)%60, sec_%60))", "target": "276", "substitutes": {"sec_": ["resp___", " sec___", "sec__", "sec___", "hour___", "SEC_", "sect_", "resp_", "Sec_", "hour_", " sec__", "seq_", "SEC__", "Sec___", "seq___", "SEC___", "sect__"]}}
{"code": "# \u8caa\u6b32\u306e\u6539\u826f\u7248\\nd = int(input())\\ndd = d * (d + 1) // 2\\n*C, = map(int, input().split())\\nS = [list(map(int, input().split())) for i in range(d)]\\n\\nmax_score = -10**10\\nbest_T = None\\nfor next_day in range(26):\\n    # T\u306e\u69cb\u7bc9\\n    T = []\\n    L = [-1 for j in range(26)]\\n    for i in range(d):\\n        # \u5404\u65e5\u306e\u30b9\u30b3\u30a2\u5897\u52a0\u3092\u6700\u5927\u306b\u3059\u308bj\u3092\u9078\u3076\\n        max_daily_score = -10**10\\n        best_j = 0\\n        for j in range(26):\\n            memo = L[j]\\n            L[j] = i\\n            # next_day\u65e5\u5f8c\u307e\u3067j\u304c\u306a\u304b\u3063\u305f\u3068\u304d\u306edaily_score\u3092\u8a08\u7b97\\n            daily_score = S[i][j]\\n            for jj in range(26):\\n                daily_score -= C[jj] * (i + next_day - L[jj])\\n            if daily_score > max_daily_score:\\n                max_daily_score = daily_score\\n                best_j = j\\n            L[j] = memo\\n        L[best_j] = i\\n        T.append(best_j)\\n    # \u30b9\u30b3\u30a2\u306e\u8a08\u7b97\\n    L = [-1 for j in range(26)]\\n    X = [0 for j in range(26)]\\n    score = 0\\n    for i in range(d):\\n        score += S[i][T[i]]\\n        X[T[i]] += (d - i) * (i - L[T[i]])\\n        L[T[i]] = i\\n    for j in range(26):\\n        score -= C[j] * (dd - X[j])\\n    if score > max_score:\\n        max_score = score\\n        best_T = T\\nfor t in best_T:\\n    print(t + 1)\\n", "target": "272", "substitutes": {}}
{"code": "n = int(input())\\nbs = list(map(int, input().split()))\\nsb = [0] * n\\nfor i in bs:\\n    sb[i - 1] += 1\\nfor i in sb:\\n    print(i)", "target": "38", "substitutes": {"n": ["N", "nt", "ni", "gn", "ln", "p", "ne", "cn", "sn", "c", "m", "z", "ns", "nl", "h", "f", "b", "num", "t", "len", "nb", "mn", "na", "v", "nc", "s", "nan", "nu", "nn", "q", "l", "np", "j"], "bs": ["bis", "banks", "BS", "Bs", "bos", "irms", "uds", "ns", "bi", "boxes", "pb", "cks", "sbm", "bys", "amps", "ls", "bh", "abs", "b", "bas", "bc", "gb", "zb", "bb", "its", "bn", "ubes", "aps", "s", "xs", "bps", "nos", "bles", "aos", "bl", "cb", "bes", "lbs", "ubs", "bits"], "sb": ["bis", "xi", "sh", "sw", "zeb", "su", "bf", "db", "split", "ib", "SB", "lb", "sf", "irms", "sn", "isi", "bi", "wb", "pb", "yi", "fb", "rb", "ses", "sl", "sg", "mb", "sbm", "kb", "bh", "b", "sp", "gb", "nb", "zb", "si", "bb", "lp", "bj", "bt", "sq", "stab", "sm", "sa", "sv", "bps", "eb", "cb", "sis", "np", "sd", "shell", "obs"], "i": ["\u00ed", "mi", "ki", " ii", "xi", "x", "cli", "gi", "ci", "p", "di", "ai", "I", "m", "z", "bi", " di", "status", "yi", "qi", "iti", "ic", "ix", "o", "iri", " bi", "f", "b", "ri", "si", "li", "ii", "ei", "v", "e", "ti", "oi", "im", "zi", "ini", "ui", "\u0438", "phi", "pi", "ati", "l", "u", "j", "index", "k", "ij", "iu", "chain"]}}
{"code": "print('NYoe s'['7'in [*input()]::2])", "target": "327", "substitutes": {}}
{"code": "n, k = [int(x) for x in input().split()]\\np_list = sorted([int(x) for x in input().split()])\\nprint(sum(p_list[:k]))", "target": "124", "substitutes": {"n": ["nr", "N", "d", "p", "cn", "w", "sn", "c", "m", "z", "ns", "h", "num", "fn", "t", "nb", "mn", "na", "v", "nc", "nm", "nan", "nu", "nn", "l", "np", "j", "y"], "k": ["ck", "km", "ek", "kn", "kr", "kl", "ijk", "p", "ke", "i", "w", "r", "m", "z", "dk", "ks", "kw", "ko", "num", "kok", "kj", "v", " K", "ku", "q", "kk", "ka", "j", "K", "ik", "sk", "kg", "mk"], "x": ["wx", "xi", "ex", "ci", "xe", "p", "xes", "ux", "xc", "qu", "ct", "xa", "X", "i", "rx", "c", "ox", "z", "expl", "plex", "xt", " ax", "ctx", "xml", "ix", "tx", "ax", "xd", "t", "v", "e", " xx", "ey", "fx", "xy", "xs", "mx", "\u00e7", "dx", "inx", "q", "xx", "l", " cx", "yx", "y", "ross", "xf"], "p_list": ["pnairschain", "pp_set", "pn_listed", "p_listed", "p_chain", "pnairspair", "pn_chain", "pp_str", "pnairslist", "p_pair", "pairspair", "pairslisted", "p_str", "pn_list", "pairslist", "pn_pair", "pp_list", "p_set", "pairschain", "pnairslisted"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\nread = sys.stdin.buffer.read\\nreadline = sys.stdin.buffer.readline\\nreadlines = sys.stdin.buffer.readlines\\nsys.setrecursionlimit(10 ** 7)\\n\\nS = input()\\nS = S + 'R'  # \u4e0b\u306e\u30eb\u30fc\u30d7\u3067\u6700\u5f8c\u306e\u4e00\u56de\u306e\u52a0\u7b97\u3092\u884c\u3046\\n\\nA = [0] * len(S)\\n\\n# \u5341\u5206\u5927\u304d\u306a(\u6700\u5927\u306e\u9023\u7d9a\u3059\u308bR\u304bL\u306e\u9577\u3055\u7a0b\u5ea6<10**5)\u5076\u6570\u56de\u5f8c\u306b\u306f\u3001RL\u3068\u9023\u7d9a\u3059\u308b\u7b87\u6240\u4ee5\u5916\u306f\u5168\u30660\u306b\u306a\u308b\\n\\nconf = 0\\neven, odd = 0, 0\\nfor i in range(len(S)-1):\\n    if i % 2:\\n        odd += 1\\n    else:\\n        even += 1\\n\\n    if S[i+1] != S[i] and S[i] == 'R':\\n        conf = i\\n        if conf % 2:\\n            A[conf] += odd\\n            A[conf+1] += even\\n        else:\\n            A[conf] += even\\n            A[conf+1] += odd\\n        even, odd = 0, 0\\n\\n    if S[i+1] != S[i] and S[i] == 'L':\\n        if conf % 2:\\n            A[conf] += odd\\n            A[conf+1] += even\\n        else:\\n            A[conf] += even\\n            A[conf+1] += odd\\n        even, odd = 0, 0\\n\\n\\nA = [str(i) for i in A[:-1]]\\nres = \" \".join(A)\\nprint(res)\\n", "target": "722", "substitutes": {}}
{"code": "# coding: utf-8\\n\\nM1, D1 = (int(x) for x in input().split())\\nM2, D2 = (int(x) for x in input().split())\\n\\nif M1 == M2: print(0)\\nelse: print(1)\\n", "target": "571", "substitutes": {}}
{"code": "N, A,B,*V = map(int,open(0).read().split())\\nV = sorted(V)[::-1]\\nans1 = sum(V[:A])/A\\nprint(ans1)\\nf = [1] *51\\nfor i in range(1,51):\\n  f[i] = f[i - 1] * i\\ndef comb(n,r):\\n  return f[n]//f[r]//f[n-r]\\nans2 = comb(V.count(V[A-1]),V[:A].count(V[A-1]))\\nif V[0] == V[A-1]:\\n  for i in range(A+1,B+1):\\n    ans2 += comb(V.count(V[A-1]),i)\\nprint(ans2)", "target": "345", "substitutes": {"N": ["M", "NS", "T", "X", "R", "I", "L", "NN", "NR", "H", "W", "O", "S", "J", "Q", "G", "P", "E", "D", "Y", "Ni", "K", "F", "Z", "C"], "A": ["a", "GA", "ETA", "M", "T", "Ax", "All", "API", "AGE", "An", "IA", "Alpha", "AU", "AT", "R", "I", "X", "NA", "L", "AL", "AV", "AB", "RA", "H", "W", "AA", "LA", "PA", "As", "O", "AR", "C", "AS", "S", "alpha", "EA", "ICA", "G", "This", "P", "HA", "CA", "At", "E", "JA", "TA", "AM", "Y", "SA", "U", "AC", "K", "BA", "AN", "F", "Z", "AP"], "B": ["M", "BI", "T", "VB", "BS", "BL", "Bs", "R", "I", "L", "IB", "AB", "H", "BT", "b", "BC", "J", "Q", "G", "WB", "P", "BB", "E", "D", "Y", "BO", "DB", "F", "BA", "Z", "C"], "V": ["Vo", "M", "T", "VI", "Ver", "VER", "Can", "All", "Va", "NV", "VM", "VB", "Vote", "X", "I", "R", "L", "AV", "VS", "Version", "VT", "Values", "VW", "Vs", "W", "H", "CV", "UV", "GV", "Server", "VC", "TV", "S", "VA", "Val", "J", "G", "v", "P", "VE", "VO", "E", "VL", "Ev", "VOL", "Test", "Y", "vs", "HTTP", "Vector", "Data", "DB", "U", "F", "Value", "Z", "IV", "C", "VD"], "ans1": ["ANS7", "ANS0", "ans0", "an2", "rans0", "rans2", "ANS1", "ansFirst", "ANS2", "an0", "an1", "ransFirst", "rans1", "ANSFirst", "an7", " ans7", "ans7", "anFirst", " ans0"], "f": ["fd", "a", "x", "lf", "bf", "aff", "p", "fm", "alf", "fs", "sf", "w", "c", "m", "z", "fc", "fp", "fb", "h", "fa", "fr", "df", "t", "fac", "b", "fe", "fo", "fl", "ff", "conf", "fw", "v", "e", "fx", "rf", "af", "s", "tf", "uf", "l", "fg", "u", "index", "F", "cf", "xf", "ft"], "i": ["a", "mi", "ki", "xi", "x", "gu", "ci", "gi", "cli", "p", "g", "di", "ai", "I", "c", "m", "z", "bi", "yi", "ic", "o", "ip", "b", "t", "ri", "io", "si", "li", "ii", "ji", "v", "ei", "int", "ti", "im", "s", "it", "zi", "ini", "q", "phi", "pi", "l", "u", "id", "y", "j", "index", "ij", "k", "ik", "iu", "hi"], "n": ["a", "nr", "x", "nt", "ni", "d", "ln", "p", "name", "ne", "cn", "g", "sn", "c", "m", "ns", "o", "nl", "h", "ren", "b", "num", "fn", "t", "nb", "nor", "no", "na", "an", "yn", "v", "nc", "un", "s", "nu", "nn", "l", "np", "ng", "j", "y", "rn"], "r": ["a", "nr", "mr", "sr", "x", "ro", "d", "p", "g", "R", "rc", "re", "c", "m", "z", "rs", "o", "res", "h", "ren", "rec", "br", "b", "ri", "t", "dr", "v", "e", "s", "rt", "q", "l", "ar", "u", "j", "er", "rn", "cr", "ry", "rd"], "ans2": ["ann7", "ann2", "ann4", "an4", " ans8", "anas7", "ansn", "vals1", "an2", " ansn", "anas4", "ns4", "valsn", "ann", "an02", "ans8", " ans4", "an1", " ans02", "anas2", "ann02", "anas02", "ans02", "an8", "ans4", "ns8", "vals2", "ns2", "an7", "ans7", "ns1", "vals02"]}}
{"code": "N = int(input())\\n\\nMX = 10**4\\nans = {}\\nfor x in range(1, 100):\\n    for y in range(1, 100):\\n        for z in range(1, 100):\\n            tmp = x**2+y**2+z**2+x*y+x*z+y*z\\n            if tmp > MX:\\n                break\\n            if not(tmp in ans):\\n                ans[tmp] = 1\\n            else:\\n                ans[tmp] += 1\\n\\nfor i in range(1, N+1):\\n    if i in ans:\\n        print(ans[i])\\n    else:\\n        print(0)\\n", "target": "170", "substitutes": {"N": ["CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "X", "I", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NF", "O", "V", "NO", "S", "B", "Q", "ND", "P", "Num", "NPR", "A", "D", "NB", "Y", "K", "F", "Z", "C"], "MX": ["MAX", "M", "NS", "MB", "MK", "Max", "VM", "X", "NA", "NM", "MY", "MAL", "RM", "NP", "WW", "CN", "MM", "MC", "NO", "GEN", "NUM", "MAN", "XM", "DX", "ND", "MP", "MA", "XX", "mx", "WM", "TM", "Y", "ANA", "MN", "MI", "MT", "PM"], "ans": ["ars", "ANS", "ants", "ats", "ians", "beans", "actions", "names", "eds", "outs", "aus", "asks", "mos", " Ans", "ns", "ann", "rans", "ums", "rs", "anas", "eas", "offs", "ins", "ras", "ons", "ms", "angs", "amps", "ls", "pan", "ents", "ens", "news", "cons", "uns", "orders", "an", "posts", "anks", "anners", "aps", "anes", "aces", "s", "idents", "xs", "uploads", "nas", "ams", "aos", "roots", "ands", "vs", "ads", "arts", "stats", "AN", "ds", "orts"], "x": ["a", "wx", "n", "xi", "ex", "ty", "d", "ux", "xc", "X", "xa", "rx", "w", "r", "ox", "m", "xt", "ix", "o", "h", "tx", "ax", "f", "xd", "t", "v", "fx", "xy", "xs", "mx", "dx", "inx", "xx", "l", "lat", "yx", "j", "px", "k", "zx"], "y": ["sy", "n", "ty", "ys", "yd", "ym", "cy", "oy", "yz", "ky", "ly", "m", "ies", "my", "ny", "yi", "vy", "o", "py", "ye", "h", "yr", "axy", "b", "t", "yl", "uy", "yn", "ey", "gy", "iy", "xy", "yt", "Y", "yy", "fy", "j", "ya", "ay", "ry"], "z": ["n", "d", "hz", "w", "yz", "iz", "zone", "m", "c", "zh", "o", "ez", "h", "oz", "zip", "ze", "uz", "t", "zy", "cz", "v", "zer", "nz", "zi", "gz", "zo", "q", "l", "ll", "u", "j", "tz", "az", "Z", "zz"], "tmp": ["tm", "Temp", "wx", "pkg", "cmp", "max", "perm", "nt", "foo", "p", "mm", "mp", "xc", "test", "this", "jp", "td", "txt", "m", "mut", "img", "prefix", "prime", "xxx", "gt", "tp", "pa", "cache", "aaa", "term", "snap", "sp", "num", "t", "pretty", "part", "auto", "nb", "amp", "pos", "key", "pixel", "qq", "MP", "emp", "obj", "xy", "cp", "tt", "mk", "partial", "tf", "tar", "rt", "new", "orig", "size", "np", "yy", "etc", "pot", "j", "attr", "temp", "prop", "start"], "i": [" ii", "mi", "ki", "n", "xi", "a", "ni", "ite", "ci", "gi", "p", "di", "iq", "ai", "I", "iter", "bi", "qi", "yi", "ic", "ix", "o", "ip", "ind", "f", "multi", "ri", "si", "ii", "li", "ei", "v", "ti", "oi", "iy", "im", "it", "ini", "zi", "q", "phi", "pi", "l", "u", "id", "j", "fi", "ik", "ij", "iu", "hi"]}}
{"code": "l1 = input().split()\\na = int(l1[0])\\nb = int(l1[1])\\nx = int(l1[2])\\nif x == a:\\n    print(\"YES\")\\nfor i in range(1,b+1):\\n    if x == a+i:\\n        print(\"YES\")\\n        exit()\\nif x < a or (x > (a+b)):\\n    print(\"NO\")", "target": "488", "substitutes": {"l1": [" l11", "L11", "lise", " l9", "x6", "l9", " l3", "L1", "sl3", "li0", "l2", "pl1", "lc3", "l15", "li15", " l6", "x512", " lse", "x0", "li1", "l3", "lc11", "pl9", "L3", "x1", " l2", "slse", "li3", "pl15", " l0", "L2", "lc2", "sl0", "lse", "sl1", "l0", "l512", "ml512", "pl0", "ml1", " l512", "ml6", "l6", " l15", "li9", "lc1", "l11", "ml0"], "a": ["aq", "n", "ia", "sta", "ae", "ab", "p", "va", "ai", "xa", "zero", "c", "ma", "z", "ga", "parent", "o", "ea", "admin", "aaa", "la", "h", "ax", "isa", "alpha", "da", "apa", "an", "e", "al", "A", "at", "sa", "ao", "aka", "app", "au", "oa", "aa", "l", "am", "ar", "j", "index", "area", "ba", "ca", "ac"], "b": ["bis", "body", "n", "sb", "ab", "bar", "d", "db", "p", "g", "ib", "lb", "r", "c", "m", "z", "bi", "fb", "rb", "bo", "mb", "be", "ob", "f", "bas", "bc", "gb", "t", "nb", "B", "bb", "v", "e", "eb", "base", "cb", "l", "bp", "y", "bs", "ba"], "x": ["wx", "n", "xi", "ex", "xe", "p", "on", "ux", "g", "xc", "ct", "xa", "X", "rx", "ai", "w", "r", "c", "ox", "z", "xt", "xml", "ix", "h", "tx", "act", "ax", "f", "xd", "num", "t", "no", "check", "v", "e", "fx", "cox", "xy", "xs", "co", "dx", "xx", "l", "cl", "u", "y", "px", "xp", "xf", "ac"], "i": ["n", "xi", "ci", "gi", "p", "di", "ai", "I", "z", "m", "bi", "yi", "qi", "o", "ix", "ic", "ip", "f", "si", "li", "ii", "v", "ti", "s", "it", "zi", "q", "l", "pi", "id", "j", "y", "k", "ij"]}}
{"code": "N = int(input())\\nif N == 1:\\n    print(0)\\n    exit()\\nA = [int(i) for i in input().split()]\\nA = [A[i] - i - 1 for i in range(N)]\\nA.sort()\\nif N == 2:\\n    print(abs(A[0] - A[1]))\\n    exit()\\n\\nsum_A = [0, 0]\\nfor i in range(N):\\n    sum_A[0] += abs(A[i] - A[N // 2])\\nsum_2 = 0\\nfor i in range(N):\\n    sum_A[1] += abs(A[i] - A[N // 2 + 1])\\nprint(min(sum_A))\\n", "target": "463", "substitutes": {"N": ["SN", "CNN", "Total", "Name", "n", "M", "NS", "We", "T", "NL", "IT", "New", "NC", "GO", "GN", "NI", "Ns", "R", "I", "X", "NA", "L", "NM", "Number", "NN", "NP", "NR", "CN", "SAN", "NT", "NOR", "H", "ANY", "W", "Node", "O", "V", "SIZE", "No", "NO", "NOTE", "NUM", "S", "NAME", "NE", "Wh", "B", "G", "ND", "Num", "P", "D", "NB", "Y", "Count", "Size", "Ni", "K", "AN", "UN", "Body", "TN", "Note", "Now", "NG", "C"], "A": ["a", "GA", "M", "Answer", "T", "All", "API", "Al", "An", "Ar", "Alpha", "Abs", "AU", "AT", "X", "I", "R", "NA", "L", "Map", "AV", "One", "And", "AB", "App", "AE", "ALL", "H", "W", "AA", "LA", "PA", "As", "O", "V", "WA", "AR", "C", "RAM", "AS", "S", "EA", "B", "To", "G", "This", "P", "CA", "At", "You", "AY", "MA", "Cache", "JA", "AF", "D", "ATA", "AM", "Y", "Alice", "DB", "SA", "U", "AC", "The", "F", "ACT", "Array", "Java", "AP", "Data"], "i": ["a", "mi", "\u00ed", "n", "xi", "ki", "x", "ia", "uri", "ie", "gu", "ci", "gi", "cli", "p", "di", "ai", "I", "m", "bi", "qi", "info", "iti", "yi", "ic", "ix", "o", "ski", "ip", "iri", "ind", "t", "ri", "io", "si", "li", "ii", "ji", "v", "ei", "int", "ti", "oi", "ori", "iy", "s", "it", "im", "zi", "ini", "ui", "\u0438", "l", "pi", "phi", "u", "id", "j", "y", "asi", "ij", "fi", "iu", "hi"], "sum_A": ["sum2AB", "sumObjA", "sum_M", "sumObjAv", "sum___AT", "Sum_A", "sum___A", "sum___B", "sum_B", "sum2U", "Sum_a", " SUM_AC", "sum_AB", "sum2B", " sum_AB", " sum_AT", "sum___M", "sumObjC", " sum_M", " SUM_Av", "sum_AT", "sumObjAC", "Sum_D", "sum_C", "sum_a", "sum_AC", "sum_D", "sum_Av", " sum_U", "sum2A", "sum_N", " SUM_A", " sum_B", "sum_U", " SUM_C", "Sum_N"], "sum_2": ["sum__a", " sum_AA", "sum__AA", "sum__2", " sum_1", " sum_a", "sum_a", "sum__1", "sum_AA", "sum_1"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\n\\n\\ndef main():\\n    A, B, C = map(int, input().split())\\n    K = int(input())\\n\\n    ans = A + B + C + max(A, B, C) * (2 ** K - 1)\\n\\n    print(ans)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "674", "substitutes": {"input": ["next", "str", "select", "point", "insert", "view", "run", "get", "reset", "shift", "inc", "raw", "txt", "password", "ref", "focus", "read", "format", "step", "output", "val", "quick", "config", "empty", "hidden", "temp", "source", "parse", "feed", "out", "Input", "int", "cin", "update", "it", "csv", "gen", "print", " Input", "q", "proc", "reader", "command", "sample", "rand", "paste", "index", "data", "sequence", "text", "init", "request", "sum"], "A": ["GA", "Am", "An", "Al", "IA", "Ar", "AH", "AU", "AT", "R", "X", "Av", "I", "AL", "AV", "AB", "App", "AE", "Act", "RA", "H", "AA", "LA", "As", "AI", "AR", "AS", "Ah", "P", "Ant", "At", "AY", "AF", "AM", "Ac", "SA", "AC", "ACT", "BA", "Ag", "AP"], "B": ["Brian", "LB", "BI", "CB", "RB", "VB", "BS", "OB", "Bs", "Rob", "SB", "Big", "L", "IB", "Builder", "AB", "Reb", "BG", "BW", "BER", "V", "BT", "b", "Bar", "BC", "BBC", "J", "BR", "WB", "GB", "G", "BB", "Ber", "USB", "Bu", "Bern", "TB", "NB", "BO", "Bi", "DB", "BA", "BY", "Blue"], "C": ["CNN", "N", "CB", "T", "Cu", "CM", "JC", "CG", "LC", "L", "CE", "c", "CS", "Cs", "YC", "H", "CV", "CP", "CT", "V", "Ch", "S", "BC", "EC", "Co", "Q", "SC", "CO", "G", "DC", "P", "CR", "You", "CA", "E", "CON", "D", "CC", "F", "CF", "Z"], "K": ["M", "N", "T", "KN", "KY", "KR", "MK", "Context", "L", "KK", "H", "CP", "V", "KS", "Ch", "PK", "KC", "S", "J", "Q", "SK", "G", "P", "HK", "Mask", "D", "CC", "UK", "k", "The", "KI", "Z", "KA", "Can"], "ans": ["ANS", "ants", "ats", "ians", "\u00e1n", "beans", "ean", "An", "ana", "ros", "aus", "asks", "lets", "san", "mos", " Ans", "aned", "anus", "ann", "rans", "man", "mas", "anas", "ks", "ons", "amps", "pan", "ens", "cas", "can", "an", "iann", "anks", "anes", "ran", "ams", "ands", "lan", "AN", "olds"]}}
{"code": "N = int(input())\\nans = 0\\nfor i in range(1,N+1):\\n    for j in range(i,N+1,i):\\n        ans += j\\nprint(ans)", "target": "177", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "Ne", "EN", "NC", "GN", "NI", "Ns", "I", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "Node", "V", "TN", "No", "NO", "S", "NE", "J", "Q", "ND", "P", "Network", "Sn", "D", "NB", "MN", "Len", "Ni", "K", "Z", "Note", "C"], "ans": ["ANS", "sum", "ants", "ats", "ians", "gn", "ean", "\u00e1n", "ana", " means", "acs", "aus", "aned", "mos", " Ans", "ns", "vals", "anus", "ann", "rans", "rs", "man", "anas", "ks", "offs", "ins", "pac", "wan", "ons", "ms", "amps", "anned", "pan", "ents", "ens", "cons", "an", "anks", "iann", "oss", "anes", "s", "nan", "ran", "aos", "os", "lan", "AN"], "i": ["a", "mi", "n", "xi", "x", "ia", "ni", "ci", "gi", "ir", "p", "di", "ai", "I", "r", "m", "bi", "yi", "ic", "o", "ip", "ind", "b", "si", "li", "ii", "ji", "ei", "v", "e", "ti", "im", "ini", "zi", "l", "pi", "u", "y", "k", "ij", "index", "iu"], "j": ["json", "n", "x", "uj", "ie", "ja", "str", "js", "d", "p", "g", "di", "jp", "pre", "jc", "m", "z", "jj", "o", "h", "f", "b", "t", "J", "bj", "li", "ji", "v", "kj", "it", "q", "l", "u", "y", "k", "ij"]}}
{"code": "import random\\ns = input()\\nnum = random.randint(0,len(s)-3)\\nprint(s[num:num+3])", "target": "775", "substitutes": {"s": ["arms", "n", "sb", "aws", "str", "ats", "d", "p", "g", "fs", " gets", "r", "w", "c", "ts", "m", "ns", "rs", "input", "ses", " outputs", "less", "ins", "h", "ms", "ls", "abs", "b", "t", "S", "ss", "its", "tes", "strings", "v", "gs", "sq", "ws", "string", "ashes", "sv", "sts", "stories", "qs", "ds", "ps", " inputs"], "num": ["loc", "n", "th", "alph", "su", "nt", "local", "um", "nom", "ret", "mult", "zero", "m", "rem", "old", "dash", "tim", "digit", "col", "snap", "result", "count", "NUM", "multi", "nb", "no", "ord", "mn", "ver", "out", "na", "Num", "int", "final", "nm", "un", "prim", "orig", "msg", "nu", "div", "dim", "number", "mon", "np", "id", "index", "uu", "coord", "sum"]}}
{"code": "import sys\\nfrom collections import defaultdict\\nsys.setrecursionlimit(200000)\\ninput = sys.stdin.readline\\n\\nA, B, C, D, = map(int, input().split())\\n\\nif abs(B - A) <= D and abs(C - B) <= D:\\n    print(\"Yes\")\\nelif abs(C - A) <= D:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "378", "substitutes": {"input": ["pattern", "select", "context", "how", "view", "got", "get", "human", "eval", "raw", "ref", "buffer", "focus", "unit", "read", "output", "quiet", "val", "config", "empty", "form", "parse", "feed", "out", "check", "pull", "Input", " output", "cin", "stream", "it", "exec", "gen", "print", "dq", " Input", "q", "proc", "command", "reader", "sample", "edit", "paste", "data", "text", " inputs"], "A": ["a", "GA", "M", "N", "T", "An", "IA", "AH", "AU", "AT", "R", "I", "ACC", "L", "AD", "AL", "AB", "AE", "H", "W", "AA", "LA", "As", "V", "AR", "AS", "S", "G", "P", "AP", "CA", "E", "AY", "AF", "Y", "SA", "U", "K", "AC", "BA", "AN"], "B": ["BI", "N", "M", "T", "BL", "BS", "VB", "Bs", "R", "I", "L", "IB", "AB", "BER", "H", "W", "O", "V", "AR", "b", "BE", "BC", "S", "BU", "J", "BR", "BD", "G", "WB", "GB", "P", "BB", "Ber", "E", "Bern", "TB", "BO", "Y", "DB", "F", "BA", "BY"], "C": ["CNN", "But", "M", "N", "CB", "T", "Cu", "CM", "JC", "CG", "R", "I", "L", "c", "CI", "Con", "CS", "TC", "YC", "H", "CV", "CP", "CT", "V", "O", "S", "BC", "EC", "Co", "SC", "Q", "G", "J", "DC", "P", "CA", "You", "E", "CR", "CON", "CC", "Y", "F"], "D": ["M", "N", "Def", "T", "DOM", "d", "TD", "DO", "R", "DE", "X", "L", "I", "DR", "DI", "H", "O", "V", "S", "Do", "DX", "DA", "DP", "Q", "J", "G", "Dir", "DC", "P", "DD", "E", "DS", "DM", "Y", "DF", "DEV", "DB", "F", "Z"]}}
{"code": "from scipy.sparse.csgraph import connected_components\\nfrom scipy.sparse import csr_matrix\\nfrom sys import stdin\\n\\n\\ndef makeConnected(n, connections):\\n    l = list(zip(*connections))\\n    d = [1] * len(connections)\\n    a = csr_matrix((d, (l[0], l[1])), (n, n))\\n    return connected_components(a, return_labels=0)\\n\\n\\ndef main():\\n    input = lambda: stdin.readline()[:-1]\\n    N, M = map(int, input().split())\\n    AB = [tuple(map(int, input().split())) for _ in [0] * M]\\n\\n    ab = [[a - 1, b - 1] for a, b in AB]\\n    ans = makeConnected(N, ab) - 1\\n    print(ans)\\n\\n\\nmain()\\n", "target": "354", "substitutes": {"n": ["x", "nt", "p", "g", "i", "sn", "r", "c", "w", "m", "z", "ns", "o", "h", "num", "t", "len", "nb", "na", "v", "e", "nc", "nm", "s", "nu", "size", "nn", "number", "np", "j", "k"], "connections": ["selections", "selectors", "connors", "connectedings", "conions", "selectations", "connions", "connectings", "connations", "selectes", "connectances", " connectes", "connectes", "Connectes", "connectors", "connectedions", "Connectings", "connectedes", "Connectors", "connectedors", "conors", "connectations", "cones", " connectors", "connes", "conances", "connances", " connectations", " connectances", "connings", "Connections"], "l": ["lc", "kl", "tl", "ld", "ln", "lt", "p", "i", "L", "r", "z", "m", "ml", "dl", "el", "lit", "o", "nl", "sl", "ls", "t", " L", "len", "lis", "rl", "fl", "li", "lp", "list", "ol", "pl", "le", "il", "ll"], "d": ["x", "ld", "p", "db", "g", "di", "dh", "r", "w", "c", "m", "z", "dl", "dec", "h", "dt", "f", "t", "dat", "da", "dr", "v", "e", "ad", "s", "D", "div", "dd", "sd", "j", "dict", "ds", "nd"], "a": ["x", "sta", "ae", "ac", "space", "p", "aj", "va", "xa", "ai", "i", "ak", "c", "ma", "m", "el", "ga", "o", "aux", "ea", "la", "aaa", "pa", "t", "auto", "da", "na", "an", "e", "v", "A", "at", "sa", "s", "ao", "af", "app", "au", "oa", "aa", "am", "j", "area", "ba", "ca"], "input": ["next", "call", "load", "pattern", "str", "path", "select", "expression", "table", "view", "get", "eval", "shift", "inc", "raw", "position", "align", "ref", "focus", "read", "socket", "format", "step", "output", "col", "fn", "config", "hidden", "form", "parse", "url", "feed", "add", "pull", "out", "Input", "int", "filter", "stream", "update", "exec", "print", " Input", "q", "command", "sample", "lat", "index", "data", "join", "text", "source", "request"], "N": ["SN", "CNN", "NS", "T", "NC", "GN", "Na", "Ns", "R", "X", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "Node", "S", "PN", "B", "ND", "P", "Num", "A", "Sn", "D", "NB", "MN", "Ni", "K", "AN", "TN", "C"], "M": ["T", "CM", "R", "I", "X", "L", "NM", "m", "H", "MM", "O", "V", "MC", "S", "B", "J", "P", "A", "MS", "D", "DM", "AM", "TM", "Y", "MN", "MI", "MT", "U", "K", "F", "LM", "Z", "C"], "AB": ["MB", "BL", "BS", "OB", "AH", " OB", "AT", "SB", "BN", "AD", "IB", "ABC", "CN", " AC", "AA", "Ab", " IB", "abs", "BP", "NUM", "BC", "B", "BR", " Ab", "BB", "A", "BM", "abc", "AF", "TA", "AM", "LAB", "SA", "AC", "AN", "BA", "Z", "UB"], "_": ["x", " val", " e", " t", " j", " el", "ix", " row", "val", " i", " x", " m", " __", " on", " p", "j", " set", " z"], "ab": ["able", "emb", "hab", "ib", "abl", "ai", "lb", "ABC", "fab", "rab", "Ab", "pa", "ob", "abb", "ada", "abs", "tab", "nb", "bb", "av", "bn", "an", "aps", "ap", "lab", "af", "sa", "abc", "eb", "ub", "ag", "bs", "abis", "ac"], "b": ["bis", "bu", "x", "p", "db", "beta", "g", "i", "r", "c", "m", "z", "bd", "bi", "wb", "fb", "rb", "o", "ob", "bh", "f", "br", "bc", "t", "nb", "zb", "B", "bb", "bid", "v", "s", "eb", "base", "cb", "j", "y", "bs", "ba"], "ans": ["arms", "ANS", "ants", "ats", "anon", "ana", "names", "eds", "aus", "aned", " Ans", "ns", "anus", "ann", "rans", "anas", "ses", "leans", "ins", "vers", "ons", "ms", "amps", "ens", "ations", "authors", "cas", "uns", "an", "rors", "iann", "anks", "posts", "anes", "works", "s", "xs", "uploads", "vs", "aints", "os", "AN", "bs"]}}
{"code": "n = int(input())\\nx = list(map(int, input().split()))\\nmed1, med2 = sorted(x)[n // 2 - 1 : n // 2 + 1]\\nans = [med2 if i <= med1 else med1 for i in x]\\nprint('\\n'.join(map(str, ans)))\\n", "target": "16", "substitutes": {"n": ["N", "nt", "d", "p", "en", "names", "ne", "g", "dn", "sn", "c", "m", "z", "ns", "nl", "h", "b", "num", "t", "nb", "no", "mn", "out", "na", "v", "nc", "nm", "s", "nan", "nu", "size", "nn", "l", "np", "j", "y", "k"], "x": ["wx", "xi", "ex", "any", "to", "xe", "cont", "p", "xes", "ux", "xc", "xa", "X", "rx", "w", "ox", "z", "xt", "ctx", "ix", "tx", "ax", "xd", "t", "v", "exp", "xy", "s", "xs", "mx", "xb", "dx", "xx", "l", "y", "es", "px", "index", "xp", "xf"], "med1": ["mid2", " med7", "mid8", "Med8", "med7", " med01", "medi1", "Med1", "ming7", " medup", "mid1", "msup", "Med7", "ming2", "medup", "med8", "medx", "Med2", " medx", " med_", "mingx", " med8", "ms1", "Medx", "med_", "mediup", "ms_", "Med01", "medi_", "ms01", "mid01", "ming1", "medi01", "med01"], "med2": ["mid2", "medi02", " med7", " medtwo", "mid8", "med7", "Med1", "rand2", "Med7", "mer3", "med8", "medi8", "Med2", "rand7", "med02", "medi2", "mid02", "rand1", "medi3", "mer02", "medtwo", "mer8", "randtwo", "med3", "mer2", "Medtwo", "mid3"], "ans": ["ars", "ANS", "ants", "ats", "eds", "helps", "aus", "san", "aned", " Ans", "mos", "mails", "ns", "ann", "rans", "anas", "leans", "ks", "ins", "mens", "ras", "ons", "ms", "angs", "ents", "ens", " sans", "uns", "can", "an", "anks", "anes", "oss", "idents", "nan", "xs", "ran", "ams", "aos", "asms", "said"], "i": ["a", " ii", "ki", "\u00ed", "xi", "iii", "ni", "ci", "di", "ai", "I", "ic", "ix", "ip", "ri", "si", "iu", "li", "ii", "ei", "ti", "oi", "iy", "zi", "ini", "\u0438", "l", "pi", "id", "asi", "fi", "ij", "ik", "iri", "hi"]}}
{"code": "import sys\\nimport heapq, math\\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\\nfrom itertools import accumulate, dropwhile, takewhile, groupby\\nfrom functools import lru_cache\\nfrom copy import deepcopy\\n\\nM = int(input())\\n\\nprint(24 - M + 24)", "target": "676", "substitutes": {"M": ["N", "T", "MU", "VM", "R", "I", "L", "MX", "m", "H", "MM", "O", "MC", "V", "S", "MAN", "B", "J", "Q", "G", "P", "A", "MP", "MA", "MS", "D", "TM", "Y", "MI", "FM", "MT", "MIT", "U", "LM", "F", "C"]}}
{"code": "n = int(input())\\nA = list(map(int, input().split()))\\n\\nM = max(A)\\nm = min(A)\\nfor i, a in enumerate(A):\\n    if a == M:\\n        max_id = i\\n    if a == m:\\n        min_id = i\\n\\nans = []\\nif m >= 0:\\n    for i in range(n-1):\\n        ans.append((i+1, i+2))\\nelif M <= 0:\\n    for i in reversed(range(1, n)):\\n        ans.append((i+1, i))\\nelse:\\n    if abs(M) >= abs(m):\\n        for i, a in enumerate(A):\\n            if a < 0:\\n                ans.append((max_id+1, i+1))\\n        for i in range(n-1):\\n            ans.append((i+1, i+2))\\n    else:\\n        for i, a in enumerate(A):\\n            if a > 0:\\n                ans.append((min_id+1, i+1))\\n        for i in reversed(range(1, n)):\\n            ans.append((i+1, i))\\nprint(len(ans))\\nfor i in range(len(ans)):\\n    print(*ans[i])\\n", "target": "412", "substitutes": {"n": ["N", "max", "net", "x", "nt", "ni", "gn", "d", "p", "on", "ln", "name", "names", "ne", "cn", "en", "dn", "g", "sn", "r", "c", "ns", "o", "nl", "num", "t", "nb", "no", "mn", "na", "v", "an", "nc", "all", "nm", "nan", "none", "it", "nu", "q", "l", "number", "np", "yes", "nn", "pi", "network", "k", "j", "nd"], "A": ["GA", "N", "T", "ANS", "CAR", "All", "API", "An", "Ar", "Alpha", "AU", "AT", "mA", "X", "R", "L", "I", "NA", "AV", "And", "AB", "App", "AE", "Args", "H", "AA", "LA", "As", "V", "AI", "AR", "RAM", "AS", "S", "B", "J", "G", "This", "P", "AP", "HA", "CA", "MA", "At", "E", "JA", "D", "AF", "AM", "SA", "U", "The", "AC", "AN", "ACT", "Array", "C"], "M": ["N", "T", "CM", "MU", "R", "I", "JM", "L", "mA", "Mi", "H", "MM", "O", "MC", "V", "S", "MAN", "B", "G", "P", "MP", "MA", "E", "MS", "D", "Ma", "AM", "TM", "Y", "Mon", "MI", "MT", "U", "F", "Man", "C"], "m": ["tm", "mi", "max", "d", "p", "mm", "mo", "mu", "g", "L", "r", "c", "ma", "em", "man", "min", "bm", "Mi", "o", "gm", "h", "ms", "mean", "f", "b", "t", "mc", "v", "an", "sm", "l", "am", "u", "j", "y", "mt", "cm"], "i": ["ki", "x", "p", "aci", "ix", "ind", "multi", "ri", "v", "ti", "oi", "ims", "it", "ini", "\u0438", "phi", "id", "k", "init", "ia", "uri", "ni", "ql", "g", "ai", "I", "qi", "iti", "ic", "o", "si", "iu", "ei", "im", "zi", "l", "u", "iat", "ij", "ci", "gi", "ski", "ip", "icate", "ii", "ui", "pi", "index", "fi", "ik", "mi", "xi", "gu", "cli", "di", "isi", "bi", "ami", "info", "yi", "ici", "t", "li", "ji", "int", "adi", "iy", "ati", "j", "y", "asi", "iri", "hi"], "a": ["mi", "x", "ia", "ae", "ac", "ja", "era", "aj", "ta", "p", "ana", "name", "g", "va", "ai", "xa", "r", "ma", "ami", "ata", "ga", "o", "ea", "pa", "aaa", "la", "fa", "go", "b", "t", "si", "da", "wa", "apa", "na", "an", "adi", "all", "al", "ap", "at", "ao", "sa", "af", "sha", "ity", "au", "oa", "aos", "aa", "l", "pi", "am", "ar", "aw", "ka", "y", "er", "ya", "area", "ca"], "max_id": ["maxpoolpid", "root_id", "max_pid", " max_rid", "maxvalvid", "maxvalid", "rootvaldb", " max_ids", "maxxid", "maxxids", "root_db", "max_rid", "root_Id", "max_db", "maxpoolrid", "maxxdb", "maxvalId", "max_Id", "maxxpid", "max_vid", "maxobjvid", "max_ids", "maxpoolids", "maxpoolid", "maxxrid", "rootvalid", "maxobjdb", "maxxvid", "root_vid", "maxvaldb", "rootvalvid", " max_pid", "maxobjid", "maxxId", "rootvalId", "maxobjId"], "min_id": ["max_pid", "min_ids", "min2oid", "max_min", "min_pid", "min_oid", "min_min", "max_ids", "min2ids", "min2min", "min___pid", "min2pid", "min___min", "min___ids", "min___id", "min2id", "max_oid"], "ans": ["ars", "ran", "ANS", "ants", "ats", "ians", "beans", "dds", "anon", "eds", "outs", "ows", "urs", "helps", "aus", "asks", "lines", "aned", " Ans", "ums", "ates", "ns", "ann", "rans", "rs", "eas", "anas", " spans", "ks", "ins", "offs", "ras", "cks", "ons", "ms", "angs", "amps", "ls", "vers", "ids", "ents", "ens", "ations", "uns", "an", "posts", "anks", "aces", "anes", "works", "aps", "ays", "s", "yrs", "uls", "ions", "atts", "ands", "aos", "nas", "roots", "ams", "vs", "yes", "acers", "ads", "arts", "os", "asms", "es", "AN", "ones", "aints"]}}
{"code": "from fractions import gcd #\u6700\u5927\u516c\u7d04\u6570\\nA, B, C, D = map(int, input().split())\\n# (0~B\u306e\u3046\u3061, C,D,C*D\u306e\u500d\u6570\u3067\u306f\u306a\u3044\u3082\u306e\u306e\u6570)\u3000- (0~-A\u306e\u3046\u3061, C,D,C*D\u306e\u500d\u6570\u3067\u306f\u306a\u3044\u3082\u306e\u306e\u6570)\\nlcm = C * D // gcd(C, D) #C,D\u306e\u6700\u5c0f\u516c\u500d\u6570\\nx = (A - 1) - (A - 1) // C - (A - 1) // D + (A - 1) // lcm\\ny = B - B // C - B // D + B // lcm\\n# (0~B\u306e\u6570) - {(0~B\u306e\u3046\u3061C\u3067\u5272\u308a\u5207\u308c\u308b\u6570) + (0~B\u306e\u3046\u3061D\u3067\u5272\u308a\u5207\u308c\u308b\u6570) - (0~B\u306e\u3046\u3061C,D\u306e\u6700\u5c0f\u516c\u500d\u6570\u3067\u5272\u308a\u5207\u308c\u308b\u6570)}\\nprint(y - x)", "target": "31", "substitutes": {}}
{"code": "s = input()\\nl = len(s)\\n\\ndp = [[0, 0] for _ in range(l+1)]\\ndp[1][0] = 1\\n\\nfor i in range(2, l+1):\\n    if s[i-1] != s[i-2]:\\n        dp[i][0] = dp[i-1][0] + 1\\n\\n    dp[i][0] = max(dp[i][0], dp[i-1][1] + 1)\\n    dp[i][1] = dp[i-2][0] + 1\\n    # print(dp)\\n\\nprint(max(dp[-1]))\\n", "target": "179", "substitutes": {"s": ["a", "n", "sb", "self", "ats", "js", "d", "p", "g", "r", "us", "hs", "c", "ts", "m", "w", "ns", "rs", "input", "ins", "sl", "h", "tp", "ms", "ls", "f", "b", "sp", "t", "ss", "S", "parts", "v", "e", "gs", "sq", "ws", "sa", "sv", "xs", "q", "sts", "cs", "es", "qs", "ds", "ps"], "l": ["lc", "n", "kl", "ln", "d", "p", "lt", "ld", "lb", "L", "long", "length", "c", "m", "ml", "dl", "el", "lit", "nl", "sl", "ls", "b", "t", "hl", "len", "fl", "li", "lp", "v", "list", "lv", "pl", "il", "le", "ll", "j"], "dp": ["pkg", "dro", "dos", "dm", "d", "p", "db", "broad", "cd", "vp", "di", "dial", "jp", "td", "deep", "dh", "dl", "pb", "dk", "ga", "gp", "bsp", "wd", "tp", "decl", "dt", "df", "multi", "dc", "dep", "lists", "DP", "wp", "dr", "pd", "lp", "tap", "disc", "deb", "cp", "sv", "bps", "csv", "ssl", "uf", "desc", "dq", "bp", "dd", "dj", "du", "np", "pn", "pp", "ds", "ps"], "_": [" e", " j", " k", "ix", " long", " g", "val", " int", " x", " c", " m", " __", " p", " un"], "i": ["n", "x", "p", "c", "z", "batch", "ix", "ind", "multi", "ri", "v", "e", "exp", "ti", "oi", "it", "ini", "\u0438", "q", "phi", "id", "k", "ia", "uri", "vi", "g", "ai", "I", "this", "m", "my", "status", "qi", "ic", "o", "si", "iu", "key", "im", "zi", "u", "ij", "ci", "gi", "ip", "io", "ii", "ui", "pi", "index", "fi", "mi", "xi", "cli", "name", " j", "di", "bi", "f", "b", "li", "ji", "ori", "int", "list", "j", "y", "asi", "iri"]}}
{"code": "#<B>\\nimport bisect\\nn, k = map(int,input().split())\\nh = list(map(int,input().split()))\\nh.sort()\\nans = n\\nfor i in h:\\n    if i < k:\\n        ans -= 1\\n\\nprint(ans)\\n        \\n", "target": "494", "substitutes": {}}
{"code": "n, r = [int(_) for _ in input().split()]\\nprint(r if n >= 10 else r + 100 * (10 - n))\\n", "target": "250", "substitutes": {"n": ["nr", "N", "x", "nt", "ni", "ln", "d", "p", "ne", "cn", "i", "sn", "w", "c", "m", "ns", "o", "h", "f", "b", "num", "t", "len", "nb", "mn", "na", "v", "int", "nc", "nan", "nu", "nn", "l", "q", "number", "np", "u", "k", "rn", "j"], "r": ["rid", "nr", "mr", "sr", "max", "pair", "rr", "ro", "d", "p", "R", "rc", "i", "re", "rad", "w", "c", "radius", "m", "rat", "rs", "rb", "res", "rm", "h", "result", "br", "b", "t", "dr", "e", "rf", "rank", "rt", "q", "l", "ar", "u", "k", "rn", "range", "er", "cr", "rd"], "_": ["a", "km", "self", " get", "p", "name", " j", "g", "w", "length", "c", "m", "z", "ml", " all", "my", "prefix", "h", " g", "b", "t", " q", "auto", " f", " mem", " l", "na", "v", "all", "un", "none", "new", "q", "l", "tmp", "line", "u", "id", " p", "k", "y", "mt", " un"]}}
{"code": "nim = int(input())\\nif nim%2 == 0 :\\n  print(nim)\\nelse :\\n  print(2*nim)", "target": "762", "substitutes": {"nim": ["nims", "sniam", "mnimm", "snsim", " nimus", " nsim", "nem", "unem", " nims", "noriam", " nimm", "nsim", " nrim", "nuim", " nem", "norims", "snimm", "snrim", "mnim", "nuimmer", "ansim", "nirm", "unim", "niam", "unrim", " nimmer", "mnirm", "nimm", "norim", "anrim", "animm", "unims", "mnimmer", "snimus", "snem", " nirm", "nuimm", "snim", "nuirm", "norimus", "nimus", "anim", "snims", "nrim", "nimmer", " niam"]}}
{"code": "n=int(input())\\nA=list(map(int,input().split()))+[0]\\nc=0\\nfor i in range(n):\\n  j=i+1\\n  a=A[i]\\n  if a==j:\\n    c+=1\\n    A[i]=A[i+1]\\n    A[i+1]=j\\nprint(c)", "target": "77", "substitutes": {"n": ["N", "x", "nt", "ni", "gn", "ln", "d", "p", "en", "names", "ne", "cn", "sn", "m", "z", "ns", "o", "nl", "f", "num", "t", "nia", "nb", "mn", "na", "v", "nc", "nan", "nu", "nn", "q", "number", "np", "l", "network", "nd"], "A": ["GA", "M", "N", "Answer", "T", "All", "Al", "An", "Am", "Ar", "Alpha", "Abs", "AT", "X", "I", "R", "L", "One", "Av", "NA", "And", "AB", "App", "AE", "H", "AA", "Ab", "As", "V", "S", "B", "G", "This", "P", "AP", "Address", "CA", "At", "E", "You", "Cache", "Wa", "D", "AF", "AM", "Y", "Count", "Java", "SA", "U", "The", "AC", "K", "Array", "Z", "He", "Now", "C"], "c": ["ctrl", "ce", "lc", "con", "ci", "gc", "d", "cd", "cn", "ct", "rc", "r", "tc", "m", "z", "total", "col", "cv", "b", "t", "count", "dc", "cum", "uc", "conf", "v", "e", "nc", "cache", "cp", "cc", "com", "co", "cb", "cu", "u", "cs", "k", "cm", "cr", "cf", "ca", "C", "ac"], "i": ["mi", "ki", "xi", "x", "ie", "me", "ci", "gi", "ir", "name", "di", "ai", "I", "iter", "this", "m", "batch", "bi", "info", "ic", "ix", "ip", "iri", "ind", "f", "ri", "io", "si", "sim", "li", "key", "ji", "v", "ii", "int", "ti", "im", "it", "zi", "ini", "ui", "q", "pi", "item", "id", "index", "y", "ij", "ik", "iu", "hi"], "j": ["ia", "uj", "ja", "js", "aj", "d", "p", "g", "jp", "job", "r", "jc", "z", "m", "jj", "bi", "jl", "br", "b", "t", "J", "bj", "out", "ji", "kj", "v", "it", "now", "jump", "q", "l", "dj", "u", "y", "k", "ij"], "a": ["aq", "ia", "ac", "ab", "aj", "ta", "p", "ai", "ma", "ga", "o", "ea", "la", "pa", "aaa", "act", "b", "t", "alpha", "apa", "an", "al", "at", "sa", "ha", "au", "oa", "aa", "am", "ar", "ka", "area", "ba", "ca"]}}
{"code": "a, b = input().split()\\n\\nx = a * int(b)\\ny = b * int(a)\\n\\nprint(min(x, y))\\n", "target": "69", "substitutes": {"a": ["aq", "ia", "sta", "ae", "ac", "ab", "era", "aj", "p", "g", "ai", "i", "w", "r", "ate", "ma", "m", "ata", "ga", "ea", "la", "aaa", "be", "h", "act", "da", "apa", "eu", "na", "an", "e", "al", "A", "at", "sa", "af", "au", "aa", "l", "am", "ar", "ba", "ca"], "b": ["bis", "body", "sb", "ab", "bar", "d", "db", "g", "i", "r", "c", "m", "z", "bi", "fb", "rb", "by", "o", "mb", "h", "be", "ob", "bh", "br", "f", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "erb", "eb", "base", "cb", "l", "bp", "j", "bs", "ba"], "x": ["wx", "xi", "ex", "xe", "ux", "gal", "xc", "xa", "X", "rx", "w", "ox", "m", "xt", "el", "ix", "tx", "act", "ax", "xd", "int", "fx", " xx", "width", "xy", "im", "xs", "dx", "xx", "l", "lat", "yx", "px", "xp", "xf"], "y": ["ty", "aily", "ym", "cy", "oy", "yo", "ies", "my", "ny", "yi", "o", "py", "ye", "yr", "ery", "hy", "dy", "axy", "yl", "uy", "isy", "ey", "gy", "iy", "xy", "ch", "yt", "Y", "yy", "fy", "phi", "j", "ya", "ay", "ry"]}}
{"code": "n = int(input())\\nb = list(map(int,input().split()))\\na = [0]*n\\nans = 0\\n\\na[0] = b[0]\\na[n-1] = b[n-2]\\nfor i in range(1,n-1):\\n  a[i]=min(b[i-1],b[i])\\nfor j in range(n):\\n  ans += a[j]\\n\\nprint(ans)", "target": "768", "substitutes": {"n": ["N", "x", "net", "nt", "ln", "d", "p", "en", "name", "names", "ne", "cn", "g", "norm", "sn", "r", "c", "w", "m", "ns", "type", "o", "nl", "f", "num", "t", "count", "nia", "nb", "no", "mn", "out", "na", "v", "an", "nc", "all", "s", "nu", "size", "nn", "l", "ll", "np", "network", "k", "ng", "nd"], "b": ["bis", "sb", "bank", "ab", "bar", "p", "db", "g", "ib", "r", "c", "m", "bi", "wb", "fb", "rb", "o", "mb", "be", "ob", "abs", "br", "f", "gb", "bas", "bc", "t", "nb", "B", "bb", "v", "e", "obj", "s", "it", "eb", "app", "bl", "cb", "l", "bp", "buff", "bin", "u", "y", "bs", "ba"], "a": ["aq", "ia", "sta", "ae", "ab", "aff", "ta", "actions", "p", "xa", "ai", "c", "ma", "m", "set", "el", "ga", "o", "aux", "ea", "pa", "aaa", "la", "go", "isa", "auto", "alpha", "da", "apa", "na", "an", "all", "A", "ap", "at", "sa", "ao", "another", "app", "au", "oa", "base", "aa", "am", "ar", "er", "index", "eta", "area", "ba", "ca", "ac"], "ans": ["ars", "x", "ANS", "ants", "ats", "ians", "ana", " means", "eds", "outs", "aus", "ros", "us", " Ans", "ts", "ns", "anus", "ann", "rans", "eas", "ks", " spans", "anas", "ins", "offs", "wan", "ons", "ms", "amps", "anned", "ls", "ents", "ens", "ations", "ots", "uns", "an", "posts", " scans", "aps", "s", "nas", "aos", "ads", "cs", "arts", "os", "es", "ds"], "i": ["mi", "ki", "xi", "x", "ia", "ci", "gi", "ir", "p", "di", "ai", "I", "m", "bi", "ic", "o", "ix", "ip", "ind", "ri", "io", "si", "li", "ii", "ji", "v", "e", "int", "ti", "at", "im", "it", "s", "zi", "ini", "l", "pi", "u", "y", "index", "ij", "iu", "hi"], "j": ["json", "uj", "ja", "aj", "d", "js", "p", "g", "jp", "kid", "job", "jc", "oj", "z", "jj", "note", "jl", "f", "br", "jac", "je", "sp", "J", "ion", "bj", "ji", "v", "kj", "jas", "jump", "q", "dj", "y", "k", "jit", "ij"]}}
{"code": "N, K  = map(int, input().split())\\nfor i in range(N):\\n  ans = K * (K-1)**(N-1)\\n\\nprint(ans)\\n", "target": "582", "substitutes": {"N": ["CNN", "M", "n", "NS", "T", "NC", "NI", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "NR", "NT", "NH", "H", "O", "V", "Z", "S", "B", "J", "Q", "G", "ND", "P", "Num", "A", "D", "NB", "MN", "Ni", "F", "TN", "C"], "K": ["M", "T", "KN", "KR", "X", "R", "I", "L", "KK", "DK", "H", "W", "CP", "V", "KS", "O", "PK", "KC", "S", "B", "J", "SK", "Q", "G", "P", "A", "HK", "D", "UK", "k", "F", "KI", "Z", "KE", "KB", "C"], "i": [" ii", "n", "x", "p", " j", "I", "__", "r", "c", "batch", "ix", "ip", "ind", "f", "key", "im", "it", "q", "id", "k", "y", "j"], "ans": ["ars", "ANS", "ants", "ats", "\u00e1n", "beans", "ean", "ians", "ana", " means", "missions", "ros", "aus", "asks", "san", "mos", " Ans", "aned", "ns", "anus", "ann", "rans", "man", "anas", "ks", "vers", "ms", "ls", "pan", "ens", "can", "an", "iann", "anes", "ran", "ams", "aos", "arts", "os", "aver", "lan", "AN"]}}
{"code": "N,M,L = map(int,input().split())\\nINF = 10**13\\nD = [[INF]*N for _ in range(N)]\\nfor i in range(N):\\n    D[i][i] = 0\\n\\nfor _ in range(M):\\n    A,B,C = map(int,input().split())\\n    D[A-1][B-1] = C\\n    D[B-1][A-1] = C\\n\\nfor k in range(N):\\n    for i in range(N-1):\\n        for j in range(i+1,N):\\n            D[i][j] = min(D[i][j],D[i][k]+D[j][k])\\n            D[j][i] = D[i][j]\\n\\nF = [[INF]*N for _ in range(N)]\\nfor i in range(N):\\n    for j in range(N):\\n        if i==j:\\n            F[i][j] = 0\\n        elif D[i][j] <= L:\\n            F[i][j] = 1\\n\\nfor k in range(N):\\n    for i in range(N-1):\\n        for j in range(i+1,N):\\n            F[i][j] = min(F[i][j],F[i][k]+F[j][k])\\n            F[j][i] = F[i][j]\\n\\nfor i in range(N):\\n    for j in range(N):\\n        if F[i][j] == INF:\\n            F[i][j] = -1\\n        elif i != j:\\n            F[i][j] -= 1\\n\\nQ = int(input())\\nfor i in range(Q):\\n    s,t = map(int,input().split())\\n    print(F[s-1][t-1])\\n\\n", "target": "467", "substitutes": {"N": ["SN", "CNN", "Name", "n", "NS", "T", "NL", "New", "NC", "GN", "NI", "Ns", "R", "I", "X", "NA", "NM", "NN", "Number", "NP", "NR", "CN", "NT", "W", "H", "Node", "O", "V", "TN", "No", "NO", "NOTE", "NUM", "S", "NE", "J", "ND", "P", "Num", "E", "NB", "Y", "MN", "Ni", "K", "AN", "Z", "Note", "NG"], "M": ["T", "CM", "R", "I", "X", "NM", "m", "Mi", "H", "W", "MM", "O", "V", "MC", "S", "J", "G", "P", "E", "Y", "MN", "MI", "MT", "U", "K", "Z"], "L": ["LB", "dL", "NL", "DL", "T", "LIN", "R", "I", "LC", "W", "H", "LA", "V", "S", "LO", "LT", "J", "Li", "G", "P", "LI", "E", "LG", "Lu", "l", "LL", "Len", "LE", "K", "LM", "LP"], "INF": [" INV", "INFF", " INFP", " INFF", "SANF", "INV", "INFIN", "PINFIN", "PINFF", "PINF", " INFIN", "SANFIN", "InV", "INFL", " INFL", "ENF", " INf", "inF", "PINH", "InFF", "ENV", " INN", "INH", "InFP", "inD", " INH", "INf", "INN", "PINV", " IND", "PINf", "IND", "SANH", "PINFP", "ENFL", "InF", "inf", "SANV", "INFP", "PINN", "inV", "ENN", "PINFL", "PIND"], "D": ["DJ", "Def", "DL", "T", "YD", "DOM", "All", "SD", "d", "JD", "DO", "DIR", "Default", "R", "I", "DE", "X", "DR", "DI", "Del", "Dou", "H", "W", "Both", "DH", "O", "V", "Sum", "Make", "S", "Do", "CD", "DX", "DA", "J", "DP", "G", "DD", "DC", "P", "DN", "Dir", "DT", "E", "Ds", "WD", "DS", "DM", "Y", "Details", "DF", "Dr", "DB", "K", " d", "Data"], "_": ["n", "x", "ia", "mod", "p", "on", "ing", "g", "__", "I", "ception", "pre", "ation", "full", "ic", "ix", "py", "o", "let", "h", "val", "place", "num", "pt", "valid", "ver", "J", "ion", "an", "list", "all", "al", "ify", "___", "mat", "y", "mt", "ik", "ging"], "i": ["a", "ki", "n", "json", "x", "err", "p", "c", "z", "ix", "ri", "multi", "v", "ti", "oi", "it", "ini", "\u0438", "q", "phi", "id", " Xi", "init", "ia", "uri", "on", "ib", "ai", "I", "this", "iter", "m", "status", "iti", "parent", "ic", "o", "si", "iu", "ei", "im", "zi", "l", "u", "ij", "ci", "gi", "ir", "ip", "io", "ii", "ui", "pi", "il", "fi", "ik", "mi", "xi", "ie", "cli", "name", "di", "bi", "ami", "info", "f", "b", "rel", "li", "ji", "int", "ati", "item", "y", "er", "asi", "iri", "hi"], "A": ["a", "GA", "Ax", "T", "Al", "An", "Am", "IA", "AU", "AT", "R", "I", "X", "AV", "Ca", "AB", "H", "AA", "As", "V", "AI", "AR", "AS", "S", "J", "G", "P", "CA", "At", "E", "AM", "Y", "Ac", "SA", "K", "AC", "AP"], "B": ["BI", "T", "BL", "Bs", "SB", "R", "I", "X", "IB", "AB", "Be", "H", "V", "BT", "b", "S", "BC", "BE", "J", "BR", "G", "P", "BB", "AP", "BM", "Y", "BO", "Bi", "DB", "U", "BA", "Z"], "C": ["CB", "T", "CM", "R", "I", "X", "CE", "c", "CS", "CN", "Cs", "H", "W", "CP", "V", "CT", "S", "BC", "G", "DC", "P", "CR", "CA", "E", "CC", "Y", "U", "K", "Z"], "k": ["ck", "km", "ki", "n", "ek", "x", "max", "kr", "kh", "kl", "ijk", "kin", "ci", "ir", "spec", "kar", "ai", "ak", "ke", "kid", "ky", "c", "z", "m", "ks", "ic", "kw", "ko", "kind", "tk", "key", "kj", "an", "ok", " K", "kick", "it", "ikk", "ku", "kat", "q", "kt", "kg", "u", "kk", "id", "ka", "K", "ik", "ij", "kan", "iu", "sk", "mk"], "j": ["json", "n", "x", "err", "ijk", "p", "c", "bot", "z", "jj", "el", "ju", "res", "ix", "ind", "br", "je", "ot", "kj", "v", "obj", "it", "q", "bs", "js", "on", "g", "test", "jp", "rev", "jc", "m", "o", "jl", "fr", "jac", "si", "ion", "key", "xy", "im", "jo", "opt", "l", "user", "dj", "u", "ij", "next", "ja", "str", "gi", "aj", "d", "ret", "oj", "og", "note", "ip", "h", "pr", "right", "io", "off", "ii", "all", "jump", "other", "fi", "uj", "name", "di", "bi", "f", "b", "rel", "pt", "J", "bj", "li", "ji", "adj", "tr", "item", "y", "er"], "F": ["FF", "Fe", "Def", "T", "Family", "FO", "All", "OF", "FI", "R", "I", "X", "Result", "If", "RF", "FD", "Full", "Fin", "Form", "Fi", "FE", "W", "FK", "H", "V", "f", "FP", "Z", "S", "FL", "GF", "EF", "FS", "J", "IF", "Free", "Factory", "Feature", "TF", "P", "Conf", "JSON", "G", "Fixed", "WF", "E", "Function", "PF", "FB", "AF", "Test", "FG", "Y", "Fig", "DF", "FM", "BF", "Fs", "Filter", "U", "K", "FC", "UF", "CF", "MF", "FN", "FR"], "Q": ["Que", "T", "MQ", "R", "I", "X", "Qual", "W", "H", "O", "V", "QB", "S", "J", "G", "P", "E", "q", "Y", "Qu", "IQ", "U", "K", "Z", "QU"], "s": ["n", "sb", "sw", "su", "ats", "js", "p", "fs", "us", "hs", "c", "ts", "z", "south", "ns", "rs", "ins", "h", "ms", "ls", "sp", "S", "ss", "si", "sim", "gs", "sq", "st", "sv", "xs", "cs", "os", "es", "y", "qs", "ds", "ps"], "t": ["tm", "n", "ty", "T", "d", "p", "ta", "test", "qt", "tw", "ct", "wt", "tip", "c", "ts", "m", "z", "tc", "xt", "total", "o", "te", "tp", "dt", "f", "b", "pt", "ot", "v", "tr", "it", "tt", "q", "l", "kt", "u", "y", "tz"]}}
{"code": "N = int(input())\\nS = input().strip()\\nr = 0\\ntmp = 0\\nfor s in S:\\n    if s == \"I\":\\n        tmp += 1\\n        r = max(r, tmp)\\n    else:\\n        tmp -= 1\\nprint(r)\\n", "target": "697", "substitutes": {"N": ["M", "n", "NS", "T", "Ns", "R", "X", "L", "NA", "NN", "NR", "H", "O", "V", "B", "J", "Q", "G", "P", "E", "D", "Y", "Ni", "K", "F", "Z", "FN", "C"], "S": ["M", "NS", "T", "SF", "SS", "SL", "SB", "R", "I", "X", "L", "SER", "Si", "SI", "CS", "SM", "H", "V", "ss", "B", "J", "Q", "G", "P", "A", "E", "SP", "SU", "D", "DS", "SA", "U", "Z", "C"], "r": ["nr", "n", "mr", "max", "sr", "pair", "rr", "err", "ro", "d", "p", "g", "R", "rc", "i", "re", "complex", "c", "m", "rs", "rb", "res", "h", "rec", "result", "pr", "rar", "f", "b", "br", "right", "t", "dr", "out", "v", "e", "ru", "rank", "rt", "lr", "hr", "rect", "q", "l", "ar", "k", "rn", "j", "cr", "rate", "rd"], "tmp": ["top", "max", "cmp", "T", "perm", "nt", "err", "nom", "p", "mm", "mp", "test", "jp", "rc", "td", "m", "mut", "total", "ctx", "prime", "output", "mb", "term", "result", "cv", "sp", "t", "auto", "temp", "nb", "out", "important", "v", "cache", "obj", "emp", "tt", "st", "needed", "rt", "tar", "new", "np", "mem", "etc", "timeout", "j", "attr", "root", "mk", "nd", "sum"], "s": [" has", " os", " samples", " self", " stands", "a", "sb", "self", " sets", "ats", " sit", "ains", "eds", "fs", "hs", "ts", "ates", "ns", "ies", "rs", " iss", "ses", "ins", " ts", " ss", "ss", "si", " so", "als", "\u00df", "sq", "gs", "ares", "xs", "itions", " es", "sts", "sets", "oses", "es", "os", "ps", " inputs"]}}
{"code": "#create date: 2020-07-03 22:02\\n\\nimport sys\\nstdin = sys.stdin\\nfrom itertools import groupby, accumulate\\n\\ndef ns(): return stdin.readline().rstrip()\\ndef ni(): return int(ns())\\ndef na(): return list(map(int, stdin.readline().split()))\\n\\ndef main():\\n    n, k = na()\\n    s = ns()\\n    a = list()\\n    if s[0] == \"0\":\\n        a.append(0)\\n    gr = groupby(s)\\n    for key, group in gr:\\n        a.append(len(list(group)))\\n    if s[-1] == \"0\":\\n        a.append(0)\\n    acum = list(accumulate(a))\\n    m = len(acum)\\n    l = 2*k + 1\\n    if m == 1:\\n        print(acum[0])\\n        quit()\\n    if l > m:\\n        print(acum[-1])\\n        quit()\\n    ans = acum[l-1]\\n    for i in range(0, m-l+1, 2):\\n        ans = max(ans, acum[i+l-1] - acum[i-1])\\n    print(ans)\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "340", "substitutes": {}}
{"code": "ns = int(input()) #\\nns = list(map(int, input().split()))\\n\\n\\nprint(*ns[::-1]) \\n", "target": "248", "substitutes": {"ns": ["n", "NS", "nt", "ni", "ats", "Ns", "fs", "sn", "hs", "ts", "ms", "ls", "ss", "mn", "bn", "gs", "nm", "eps", "xs", "nw", "nn", "vs", "sts", "iss", "cs", "qs", "ds", "ps", "bs"]}}
{"code": "from copy import  deepcopy\\ndef bubble_sort(lst):\\n    size=len(lst)\\n    for i in xrange(size):\\n        for j in reversed(range(i+1,size)):\\n            if lst[j].num<lst[j-1].num:\\n                tmp=lst[j]\\n                lst[j]=lst[j-1]\\n                lst[j-1]=tmp\\ndef selection_sort(lst):\\n    size=len(lst)\\n    for i in xrange(size):\\n        mn=i\\n        for j in xrange(i+1,size):\\n            if lst[mn].num>lst[j].num:\\n                mn=j\\n        tmp=lst[i]\\n        lst[i]=lst[mn]\\n        lst[mn]=tmp\\nclass pock:\\n    def __init__(self,val):\\n        self.val=val\\n        self.num=int(val[1:])\\n    def __gt__(self,other):\\n        return self.num>other.num\\n\\n\\nnum=raw_input().strip()\\ninp=raw_input().strip().split()\\narr=[]\\nfor ii in inp:\\n    arr.append(pock(ii))\\nbubb=deepcopy(arr)\\nbubble_sort(bubb)\\ninsec=deepcopy(arr)\\nselection_sort(insec)\\nprint \" \".join(pp.val for pp in bubb)\\nprint \"Stable\"\\n\\nprint \" \".join(pp.val for pp in insec)\\nok=1\\nln=len(arr)\\nfor i  in xrange(ln):\\n    if(bubb[i].val!=insec[i].val):\\n        ok=0\\n        break\\nif ok==1:\\n    print \"Stable\"\\nelse:\\n    print \"Not stable\"\\n\\n", "target": "30", "substitutes": {"lst": ["libl", "llnd", "slst", "slmt", "lST", "mlth", "elST", " lth", "nlnt", "Lst", "elbl", "nlth", "nlist", " lts", "lbst", "plsts", "llist", "dlist", "tlsty", "lse", "mlist", "llth", "mlnt", "lsty", " lsts", "ylsts", "lso", "hST", " lbl", "slsts", "lbl", "slsty", "lnd", "tlist", "lbsty", "mlsts", "dlst", "dlST", "elld", "listab", "ylnt", " lse", "ylst", "slso", "lbstab", "nlmt", "lsts", "mlmt", "elnt", "hist", "mlst", "lld", "lstab", "lint", "liST", "llld", "slstat", "slld", "List", "listnt", "elth", "slsl", " lso", "nlnd", "lild", "alst", " lnt", " list", "alnt", "liststy", "llsty", "listy", "llsts", "nlst", "ylnd", "liststs", "dlnt", "lists", " lnd", "tlst", "elsts", "slbl", "lnt", "llst", "elst", "slse", "plso", "slnt", "llbl", " lmt", "Lnt", "plst", "slist", "lbist", "plbl", "lbld", "lmt", "tlts", "lise", "lts", "dlbl", "hbl", "plsty", "almt", " lstab", "mlbl", "hst", "Lbl", "lbts", " lsty", "lsl", "lisl", "slST", "list", "listst", "nlsts", "lth", "elsl", "lstat", " lld", "alstat", "llnt", " lstat", "plnt"], "size": ["ize", "sy", "nr", "n", "sh", "ci", "gn", "notice", "name", "zie", "span", "what", "sn", "length", "city", "san", "scale", "south", "iz", "set", "zone", "shape", "ose", "ice", "speed", "send", "sized", "ms", "six", "capacity", "SIZE", "sex", "grow", "ze", "sp", "empty", "time", "news", "len", "si", "nil", "small", "height", "sv", "dimension", "equal", "see", "then", "year", "pi", "Size", "sd", "mem", "tie", "l", "se", "init"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "ni", "ie", "me", "ci", "gi", "ir", "p", "di", "ib", "jp", "I", "ai", "iter", "c", "m", "z", "bi", "jj", "imm", "yi", "ami", "iti", "ic", "o", "ix", "ip", "iri", "ind", "b", "t", "ri", "si", "hi", "li", "ji", "v", "e", "int", "ti", "im", "it", "s", "zi", "ini", "inn", "l", "pi", "phi", "id", "y", "index", "ij", "k", "ik", "iu", "iat", "fi", "init"], "j": ["mi", "json", "n", "x", "uj", "ja", "ijk", "err", "ie", "js", "aj", "p", "g", "jp", "job", "r", "pre", "jc", "oj", "z", "m", "jj", "ju", "by", "o", "col", "ind", "jl", "br", "b", "je", "jac", "fr", "right", "t", "sp", "J", "bj", "li", "kj", "ji", "v", "out", "obj", "adj", "xy", "it", "tr", "jump", "q", "l", "yes", "dj", "jit", "y", "k", "ij"], "tmp": ["tm", "sym", "net", "pkg", "cmp", "perm", "nt", "proxy", "nom", "lib", "mm", "mp", "ret", "test", "jp", "txt", "tc", "ppo", "m", "repl", "src", "jj", "img", "mut", "prefix", "prime", "input", "py", "gm", "aaa", "result", "snap", "sp", "t", "pretty", "trap", "temp", "tn", "nm", "emp", "obj", "MP", "xy", "cp", "tt", "partial", "tf", "orig", "rt", "msg", "new", "tar", "clip", "proc", "etc", "np", "timeout", "vt", "mint", "mk", "pred", "pg"], "mn": ["mi", "nr", "n", "mr", "km", "mus", "uj", "mit", "ni", "mg", "men", "wn", "nom", "mini", "mm", "mu", "mp", "di", "jp", "typ", "nic", "sn", "m", "hn", "ns", "jj", "my", "ny", "man", "mins", "mind", "ms", "ind", "jl", "br", "dat", "mc", "dr", "kj", "nm", "msg", "mx", "inn", "lem", "dim", "mun", "mon", "np", "dj", "MN", "ng", "mem", "md", "ij", "cm", "mt", "mint", "mk"], "self": ["x", "cmp", "instance", "context", "wn", "p", "mp", "left", "r", "res", "default", "ms", "sel", "config", "close", "private", "unknown", "e", "obj", "new", "q", "lex", "data", "pkg", "sh", "sw", "me", "local", "own", "test", "this", "deep", "object", "my", "parent", "py", "soc", "s", "cl", "ass", "neg", "next", "ae", "nt", "ref", "h", "result", "dig", "resp", "eth", "public", "der", "attr", "dict", "Self", "th", "sub", "rem", "ren", "rec", "mix", "ls", "rel", "final", "ws", "first"], "val": ["find", "x", "cmp", "err", "p", "quant", "typ", "value", "cho", "el", "dev", "format", "res", "default", "sel", "rol", "v", "obj", "it", "new", "pl", "mem", "k", "data", "pol", "pred", "bal", "local", "get", "fol", "test", "ival", "this", "aval", "unit", "prefix", "tx", "elt", "len", "pos", "key", "hist", "msg", "vt", "loc", "str", "ret", "VAL", "txt", "ref", "values", "pr", "result", "buf", "dat", "Val", "resp", "cal", "all", "al", "ele", "index", "attr", "alt", "arg", "volt", "label", "pal", "stat", "name", "eval", "vals", "type", "inst", "fail", "snap", "tag", "vol", "pt", "valid", "ver", "bit", "int", "orig", "sol", "ve", "var", "item", "bin", "mark", "prop", "sum"], "num": ["n", "alph", "N", " ind", "value", " img", "cod", "dev", "nam", " int", "NUM", "part", "cum", "bid", "na", "nm", "number", "np", "mem", "phys", "id", " nib", "data", "net", " recip", "um", " np", " n", "unit", " dat", " init", "len", "pos", "msg", "date", "nu", "div", "mon", " index", "nr", " data", " note", "nt", "nom", "en", "note", " number", "result", "buf", "dat", " iv", " input", " mem", "off", "cal", "title", "dim", "index", "den", " iter", " id", "pub", " orig", " err", " doi", " im", "name", " pin", "zero", "rem", " pid", "snap", " ni", "no", "valid", "non", "ver", "Num", "int", "gen", "inn", "mark", "sum"], "other": ["Other", "super", "th", "ne", "thing", "this", "foreign", "unit", "old", "parent", "outer", "o", "second", "different", "that", "aux", "rel", "no", "initial", "non", "inner", "unknown", "oth", "also", "odd", "each", "obj", "another", "new", "usr", "OTHER", "Others", "mem", "item", "same", "after", "isl", "opp"], "inp": [" Invol", "insp", " inps", "cinsp", " inpc", "cinpc", " Inpp", " inpp", " Inps", "ninp", "cinp", "Inpp", "ninsp", "ninps", " Inp", "inpp", "Inps", " insp", "Inp", "invol", "ninpc", "cinps", "inps", "inpc", "Invol", " invol"], "arr": ["alph", "err", "str", "aug", "Ar", " narr", "iter", "ext", "array", "r", "batch", "repl", "expr", "img", "ev", "res", "ARR", "alg", "aaa", "cur", "elt", "buf", "br", "fr", "days", "rar", "dat", "agg", "vol", "dr", "resp", "out", "exp", "hist", "list", "all", "obj", "adj", "arb", "gr", "unch", "tr", "ell", "compl", "app", "au", "bl", "coll", "addr", "buff", "ar", "pl", "ele", "data", "attr", "ray", "dict", "Array", "frac"], "ii": [" iii", "ki", " pi", "xi", "iii", "ia", "nr", "eni", "ni", "II", "ci", "gi", "aff", "di", "iq", "ai", "iop", "sci", "jj", "irm", "yi", "qi", "wi", "ix", "ip", "ind", " iv", "si", "li", "ji", "ei", "innie", "ti", "qq", "iona", "ini", "zi", "inn", "inx", "nn", "pi", "ati", "np", " nib", "ij", "iri"], "bubb": [" burg", "hurg", "biitsch", "biubb", "aubb", "blubb", "jobb", "Bambo", "brobb", "Bubb", "bub", " built", "bambo", "built", "bobb", "jurg", "hambo", "jubb", "brubb", "blub", "blubby", "bitsch", "aub", "beitsch", " bobb", "brub", "biobb", "hub", " bub", "beuilt", "beobb", "aobb", "brubby", "aambo", "beubb", "Bobb", "biuilt", " bubby", "jub", "hobb", "burg", "hubb", " bitsch", "blobb", "bubby", "Bub"], "insec": ["inSEC", "ensector", "rinsec", " inseconds", "enner", "cinct", "insecond", "inssc", "ainseconds", "insector", "cinsec", "insth", "rinct", "inSec", "inser", "innsec", "insect", "ainsecond", "innsecond", "innSEC", " insecond", "vinct", "inssect", "ainsec", "insc", "ainSEC", "rinSec", "vinsector", "inseconds", "innseconds", "ensec", "rinser", " insc", "cinner", " inSec", " inth", " insect", "inssec", "innct", "inner", " inSEC", " inct", "cinsector", "enct", "vinth", "vinner", " inser", "vinsc", "innser", "inct", "innSec", "vinsec", "inth", "vinsect"], "pp": ["pkg", "ipp", "perm", "pm", "cpp", "imp", "p", "php", "mp", "ep", "ipl", "ppo", "pe", "ppe", "fp", "upp", "pb", "shape", "gp", "tp", "ip", "pa", "sp", "asp", "amp", "pretty", "ps", "pped", "pt", "lp", "pd", "pps", "prep", "pop", "cp", "PP", "dp", "app", "print", "yp", "pl", "proc", "bp", "ppa", "kk", "ppy", "xp", "pdf", "pg", "opp"], "ok": ["ck", "ocr", "loc", "n", "mot", "nt", "Ok", "err", "mod", "rc", "typ", "zero", "ox", "od", "success", "res", "o", "ko", "ms", "rec", "log", "ind", "ob", "of", "ready", "empty", "valid", "ot", "off", "check", "out", "all", "oh", "none", "app", "boot", "ku", "pl", "OK", "yes", "good", "error", "oc", "id", "k", "os", "cs", "md", "ik", "ack", "ick"], "ln": ["sy", "lc", "nr", "kn", "n", "kl", "tl", "wn", "gn", "ld", "kin", "en", "zn", "eln", "lines", "sn", "hn", "ns", "dl", "lag", "nl", "log", "ls", "oln", "vl", "fn", "len", "li", "bn", "igl", "lvl", "sol", "lr", "mil", "nn", "ll", "Len", "rn", "lan", "pn", "lin"]}}
{"code": "N, M = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nb_list = []\\nc_list = []\\nfor _ in range(M):\\n    b, c, = list(map(int, input().split()))\\n    b_list.append(b)\\n    c_list.append(c)\\n\\ndata = dict()\\nfor a in A:\\n    if a in data:\\n        data[a] += 1\\n    else:\\n        data[a] = 1\\n\\nfor i in range(M):\\n    if c_list[i] in data:\\n        data[c_list[i]] += b_list[i]\\n    else:\\n        data[c_list[i]] = b_list[i]\\n\\nkey = list(data.keys())\\nkey.sort(reverse=True)\\nnum = 0\\nind = 0\\nans = 0\\nwhile True:\\n    if num + data[key[ind]] <= N:\\n        ans += data[key[ind]]*key[ind]\\n        num += data[key[ind]]\\n    else:\\n        ans += (N - num)*key[ind]\\n        break\\n    ind += 1\\nprint(ans)\\n", "target": "711", "substitutes": {"N": ["n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "NR", "NT", "H", "V", "NUM", "S", "B", "J", "G", "P", "Num", "E", "D", "NB", "Y", "Ni", "K", "F", "AN", "Z", "C"], "M": ["T", "CM", "R", "I", "L", "NM", "MX", "RM", "m", "H", "MM", "O", "V", "MC", "S", "MAN", "B", "J", "G", "P", "E", "MS", "D", "DM", "AM", "TM", "MN", "MI", "MT", "U", "K", "LM", "F", "C"], "A": ["T", "An", "Alpha", "AT", "X", "I", "NA", "AL", "AV", "AB", "H", "AA", "As", "V", "AI", "C", "S", "B", "This", "P", "CA", "At", "D", "AF", "TA", "ATA", "AM", "SA", "AC", "K", "BA", "Array", "AP", "Data"], "b_list": ["wbliclists", "eb___ist", "wblicLIST", "wb_status", "b_l", "b2list", "b___list", "b2LIST", "b_status", "blicstatus", " b_st", "b_li", "b___ist", "wb_list", "eb_li", "wb_lists", " b_stack", "eb___iter", "eb___li", "wbliclist", "wb_LIST", "b2l", "eb___list", "blicLIST", "eb_ist", "b_LIST", "eb_iter", "b___li", "b_left", "b_iter", "b_lists", " b_left", "b_stack", "bliclists", "bliclist", " b_l", "b2stack", "b_ist", "b_st", "eb_list", "wblicstatus", "b___iter", " b_LIST"], "c_list": ["c___LIST", "cmlLIST", "cmlalt", "c___list", "b_l", "c___status", "b2list", "c___lists", "b2LIST", " c_stream", " c_alt", "b_level", "c_stream", " c_lists", "c_li", "c_alt", "b_cache", "cmlstream", " c_LIST", "cmllist", "b_li", "c2list", "c_level", "c2LIST", "c_status", "c___cache", "c_l", " c_status", "b2l", "b_chain", "c_lists", "c___def", "c_LIST", "c_chain", "b_LIST", "c_cache", "b2li", "b_lists", "c2li", "c_def", "b_def", "c2l"], "_": ["x", " val", " the", " j", "ai", "I", "ic", "ix", " x", "li", " __", " each", " index", "il", " p", "ay"], "b": ["bis", "body", "bu", "sb", "bf", "ab", "bar", "db", "g", "ib", "bg", "bi", "fb", "rb", "bo", "be", "ob", "br", "bas", "bc", "gb", "f", "nb", "B", "bb", "eb", "base", "cb", "bp", "j", "bs", "ba", "back"], "c": ["ec", "ce", "lc", "con", "n", "cat", "d", "cd", "g", "ct", "rc", "chain", "m", "fc", "bc", "dc", "uc", "sc", "cin", "cp", "ch", "com", "cc", "co", "\u00e7", "cu", "cb", "coll", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "data": ["json", "n", "x", "p", "mu", "images", "table", "image", "batch", "dev", "total", "format", "config", "B", "na", " DATA", "new", "D", "number", "np", "mem", "Data", "open", "to", "test", "this", "m", "full", "ata", "read", "dec", "step", "output", "auto", "da", "dates", "loaded", "results", "params", "debug", "date", "hash", "group", "ATA", "stats", "C", "next", "state", "d", "db", "active", "raw", "DATA", "AA", "values", "result", "dat", "bool", "alpha", "form", "record", "cache", "al", "times", "size", "aa", "index", "dict", "mode", "device", "missing", "action", "name", "di", "zero", "current", "ma", "map", "vals", "details", "info", "success", "done", "no", "list", "final", "au", "version"], "a": ["aq", "asia", "ia", "sta", "ae", "ab", "era", "ta", "aff", "p", "name", "ach", "va", "xa", "ai", "ak", "aid", "ma", "ata", "eas", "ga", "ea", "pa", "aaa", "la", "fa", "isa", "t", " ca", "alpha", " ba", "da", "wa", "apa", " pa", " ta", "an", " ja", "af", "ao", "sa", "aka", " fa", "app", "s", "au", "oa", "aa", "am", "ar", "ka", "area", "ba", "ca", "ac"], "i": ["mi", "n", "xi", "x", "uri", "ite", "ci", "gi", "p", "di", "ai", "I", "iter", "m", "bi", "info", "ic", "ix", "ip", "h", "iri", "ri", "io", "si", "li", "ii", "ji", "ori", "e", "int", "ti", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "id", "index", "j", "k", "ij", "fi", "y", "iu"], "key": ["table", "loop", "child", "code", "set", "tree", "pri", "count", " Key", "ee", "check", "char", "rand", "id", "link", "k", "member", "root", "init", "net", "option", "match", "file", "test", "rule", "tip", "prefix", "parent", "change", "step", "case", "time", "cond", "ey", "pop", "switch", "hash", "group", "lock", "start", "chain", "keys", "leader", "shift", "box", "ip", "important", "cache", "title", "size", "index", "sort", "mode", "Key", "label", "path", "KEY", "order", "name", "day", "map", "info", "type", "prime", "ice", "by", "tag", "ver", "list", "row", "base", "item", "prop"], "num": ["den", "con", "n", "max", "x", "nt", "um", "nom", "p", "en", "anon", "mu", "mult", "uni", "zero", "m", "ums", "ann", "total", "tim", "nam", "multi", "NUM", "no", "nb", "ord", "mn", "valid", "pos", "out", "na", "Num", "int", "cal", "final", "nm", "un", "msg", "orig", "new", "nu", "number", "mon", "np", "good", "mun", "mem", "index", "temp", "init", "sum"], "ind": ["err", "dir", "typ", "cod", "set", "old", "kind", "thread", "att", "obj", "it", "end", "dx", "pl", "roll", "dd", "rand", "id", "pred", "init", "ld", " Ind", "iter", "rend", "ins", "bind", "fr", "cond", "pos", "pid", "IND", "nd", "draw", "start", "loc", "nt", "state", "d", "dn", "seed", "round", "mind", "val", "pr", "dat", "stick", "ill", "und", "req", "cand", "index", "md", "ond", "wind", "rd", "hold", "dial", "inc", "Ind", "inst", "cmd", "sp", "pt", "dist", "ded", "int", "ad", "adj", "ptr", "inn", "hend", "strong", "j"], "ans": ["ars", "n", "ANS", "ants", "ats", "ians", " means", "eds", "outs", "helps", "aus", "ates", "ns", "vals", "ann", "rans", "ums", "rs", "anas", "ks", "offs", "ins", "leans", "ras", "ons", "ms", "amps", "ens", "mn", "uns", "ados", "an", "posts", "anks", "aps", "anes", "s", "xs", "nas", "ands", "aos", "ads", "arts", "os", "es", "stats", "lan", "ones", "sum"]}}
{"code": "n, m = map(int, input().split())\\n\\nif n == 2 or m == 2:\\n    ans = 0\\nelif n == 1 and m == 1:\\n    ans = 1\\nelif n == 1 or m == 1:\\n    ans = max(n, m) - 2\\nelse:\\n    ans = (n - 2)*(m - 2)\\n\\nprint(ans)", "target": "238", "substitutes": {"n": ["a", "N", "x", "net", "nt", "gn", "d", "p", "ln", "on", "en", "name", "ne", "cn", "g", "dn", "i", "sn", "c", "r", "ns", "note", "o", "h", "f", "b", "num", "fn", "t", "nia", "nb", "no", "nor", "mn", "na", "v", "an", "nc", "nm", "un", "s", "nan", "nu", "nw", "nn", "l", "np", "j", "k", "rn", "y"], "m": ["tm", "a", "mi", "km", "M", "mr", "perm", "me", "um", "dm", "d", "p", "mm", "fm", "g", "i", "r", "c", "ma", "em", "man", "bm", "min", "rm", "o", "gm", "mb", "ms", "h", "f", "b", "num", "mis", "t", "mc", "arm", "mn", "v", "om", "sm", "mx", "wm", "lem", "l", "mun", "am", "mem", "j", "y", "md", "cm", "mt", "mk"], "ans": ["ars", "ANS", "ants", "ats", "ean", " means", "eds", "acs", "aus", "ros", "us", "iban", "aned", "san", "ns", "vals", "ann", "rans", "bird", "ks", "anas", "offs", "ins", "ras", "wan", "vers", "ms", "amps", "said", "pan", "ents", "ens", "news", "cas", "cons", "uns", "can", "an", "jas", "anks", "iann", "oss", "plan", "oos", "ran", "nas", "aos", "ams", "vs", "rates", "yes", "ads", "cs", "arts", "os", "aver", "lan", "olds"]}}
{"code": "import queue\\n\\ndef main():\\n    n = int(input())\\n    A = list(map(int,input().split()))\\n    A = sorted(A,reverse=True)\\n    q = queue.PriorityQueue()\\n    q.put([-1*A[0],-1*A[0]])\\n    ans = 0\\n    for a in A[1:]:\\n        _min, _max = map(lambda x:-1*x,q.get())\\n        ans += _min\\n        q.put([-1*a,-1*_min])\\n        q.put([-1*a,-1*_max])\\n    print(ans)\\n    return \\n\\nif __name__ == \"__main__\":\\n    main()", "target": "328", "substitutes": {"n": ["nr", "N", "nt", "p", "names", "Na", "cn", "Ns", "i", "r", "c", "m", "ns", "nl", "b", "fn", "t", "count", "nb", "mn", "na", "nc", "nu", "nn", "l", " N", "j", "k"], "A": ["GA", "N", "Answer", "All", "API", "Al", "An", "IA", "Ar", "Alpha", "Abs", "AT", "X", "R", "mA", "L", "NA", "AL", "Av", "And", "AB", "App", "AE", "Args", "Auth", "H", "LA", "AA", "As", "GS", "V", "AI", "C", "WA", "AS", "ASC", "S", "Some", "B", "Q", "This", "P", "Ass", "Ant", "CA", "At", "You", "These", "AY", "JA", "AF", "D", "ATA", "AM", "Y", "By", "SA", "U", "AC", "ACT", "The", "Array", "AP"], "q": ["aq", "ck", "pkg", "queue", "ld", "p", "db", "ue", "g", "iq", "qu", "qt", "ct", "requ", "r", "w", "c", "ox", "z", "pe", "query", "gm", "h", "log", "f", "quit", "t", "Q", "check", "v", "exp", "sq", "e", "qq", "cache", "eq", "gr", "it", "ch", "co", "ve", "group", "dq", "lock", "que", "l", "cl", "ll", "u", "np", "k", "qs", "pp", "ack", "pg"], "ans": ["ANS", "ants", "ats", "eds", "outs", "aus", "ros", "aned", " Ans", "ates", "ns", "ann", "ums", "rans", "anas", " spans", "offs", "ons", "ms", "amps", "ls", "pan", "ents", "ens", "cons", "ends", "uns", "als", "an", "anks", "anes", "aps", "oss", "ays", "nan", "uploads", "ran", "ams", "aos", "ands", "nas", "vs", "ads", "arts", "cs", "ags", "es", "stats", "lan", "AN", "ones", "orts", "olds"], "a": ["aq", "x", "sta", "ae", "aff", "name", "ach", "ai", "xa", "i", "ma", "z", "pai", "aed", "eas", "ea", "pa", "la", "aaa", "isa", "\u00e4", "b", "ova", "alpha", "art", "apa", "na", "an", "e", "at", "af", "sa", "ao", "aaaa", "sha", "app", "s", "oa", "au", "aa", "am", "y", "area", "ca", "ac"], "_min": [" _mins", "tmax", "_minute", "tminute", "tmins", " _minute", "_first", "tmn", " _first", " _mn", "tmin", "_mn", "_mins"], "_max": [" _med", "tcross", "tmax", " _cross", " _high", "tax", "_high", " _ax", "_med", "_cross", "tmin", "_ax"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\n\\nkills = 0\\nb_k = 0\\n\\nfor i in range(n):\\n    b_k = b[i]\\n    for j in range(2):\\n        if b_k - a[i+j] >= 0:\\n            kills += a[i+j]\\n            b_k -= a[i+j]\\n            a[i+j] = 0\\n        else:\\n            kills += b_k\\n            a[i+j] -= b_k\\n            b_k = 0\\n\\nprint(kills)", "target": "530", "substitutes": {"n": ["N", "x", "nt", "ln", "d", "p", "ne", "cn", "g", "sn", "r", "c", "m", "z", "ns", "nl", "num", "t", "nb", "no", "mn", "na", "v", "nc", "s", "nw", "nn", "number", "l", "np", "q", "k"], "a": ["sta", "ae", "ac", "ab", "era", "p", "action", "ach", "va", "ai", "r", "c", "ma", "set", "ata", "eas", "ga", "window", "input", "ea", "la", "aaa", "abs", "isa", "f", "alpha", "da", "apa", "na", "an", "e", "att", "all", "A", "al", "ap", "cache", "at", "sa", "another", "ao", "obj", "app", "au", "oa", "cast", "aa", "am", "ar", "u", "eta", "array", "area", "ack", "ba", "ca"], "b": ["bis", "body", "sb", "ab", "bar", "d", "p", "db", "g", "ib", "blue", "r", "c", "m", "bi", "wb", "fb", "rb", "by", "mb", "be", "ob", "br", "bc", "t", "gb", "B", "bb", "v", "eb", "base", "cb", "l", "y", "bs", "ba"], "kills": ["okishes", "kicks", "nicks", "kindicks", "Kishes", "skishes", " kalls", "willed", "kindilled", " kishes", "wicks", " kicks", "Kills", "skilled", "wishes", "skalls", "skiss", "wills", " killed", "nalls", "kishes", "kalls", "skicks", "kindills", " kiss", "okilled", "killed", "nills", "kindishes", "Kiss", "okills", "kiss", "nishes", "skills", "okalls", "Killed"], "b_k": ["b_ks", "v_ks", " bjka", "nb_kl", " b_kn", "v_k", " b_j", " bjk", "b___k", "bi___ikk", "nb_j", "v_K", "bjj", "b__K", "b_kl", "bi_ikk", "b___j", "b67ke", "bi___k", "b___kr", "bjka", "nb_k", "b_kn", " bjj", "b___kat", "bolyn", "b_kr", "bi___ke", "nb_K", "bi___kr", "b__j", "b67ikk", "bi_ke", " b_n", "v_j", " b_K", "b67kr", "b_K", "bolykn", "bi_k", "b___ke", "b67k", "b__k", " b_ik", "b_kh", "b_n", "bjk", "b__kl", "b_ka", "b_ikk", "b_ik", " b_ka", "b_ke", "b___ik", " b_kl", "bolyK", "b_kat", " b_kh", "bi_kr", "bjkl", "b_j", " bjkl", "b___ikk", "bolyk", " b_kat"], "i": ["mi", "ki", "xi", "x", "ia", "uri", "ni", "ci", "gi", "port", "cli", "p", "name", "ret", "di", "ai", "this", "iter", "batch", "bi", "ami", "status", "yi", "info", "iti", "ic", "ix", "ip", "ind", "ri", "io", "si", "iu", "li", "ii", "ji", "ei", "v", "ti", "im", "it", "ini", "zi", "ui", "\u0438", "q", "phi", "pi", "id", "y", "index", "ij", "iat", "asi", "iri", "hi", "fi", "init"], "j": [" ii", "json", "x", "uj", "ja", "str", "err", "aj", "js", "g", "di", "jp", "used", "job", "jc", "oj", "z", "jj", "ju", "col", "pr", "jl", "ax", "fr", "je", "br", "dt", "sp", "vol", "pt", "J", "ion", "bj", "ii", "ji", "kj", "v", "jas", "obj", "xy", "s", "tr", "jump", "q", "l", "dj", "y", "k", "er", "ij"]}}
{"code": "#!/usr/bin/env python3\\nimport sys, math, itertools, collections, bisect\\ninput = lambda: sys.stdin.buffer.readline().rstrip().decode('utf-8')\\ninf = float('inf') ;mod = 10**9+7\\nmans = inf ;ans = 0 ;count = 0 ;pro = 1\\n\\ns=input()\\nif \"AC\" in s:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")", "target": "384", "substitutes": {}}
{"code": "import math\\n\\ndef cmb(n, r, mod):\\n    if ( r<0 or r>n ):\\n        return 0\\n    r = min(r, n-r)\\n    return g1[n] * g2[r] * g2[n-r] % mod\\n\\nmod = 10**9+7 #\u51fa\u529b\u306e\u5236\u9650\\nN = 10**5+5\\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\\n\\nfor i in range( 2, N + 1 ):\\n    g1.append( ( g1[-1] * i ) % mod )\\n    inverse.append( ( -inverse[mod % i] * (mod//i) ) % mod )\\n    g2.append( (g2[-1] * inverse[-1]) % mod )\\n\\nN,K = list(map(int,input().split()))\\nA = sorted(tuple(map(int,input().split())))\\nB = tuple(A[i+1]-A[i]  for i in range(len(A)-1))\\nlim = math.ceil(len(B)/2)\\n\\nL = 10**9+7\\nans = 0\\nmulti = cmb(N,K,mod)\\nfor j in range(lim):\\n    front = j + 1\\n    back = N - front\\n    tmp_b = 0\\n    tmp_f = 0\\n    if front >= K:\\n        tmp_f = cmb(front,K,mod)\\n    if back >= K:\\n        tmp_b = cmb(back,K,mod)\\n    if j == (len(B)-1)/2:\\n        ans += (multi - tmp_b - tmp_f)*(B[j]) % L\\n    else:\\n        ans += (multi - tmp_b - tmp_f)*(B[j]+B[len(B)-1-j]) % L\\nprint(ans%L)", "target": "36", "substitutes": {"n": ["nr", "N", "x", "net", "nt", "d", "p", "ln", "en", "ne", "cn", "g", "dn", "i", "re", "sn", "c", "w", "m", "z", "ns", "o", "h", "ren", "br", "f", "num", "t", "nb", "mn", "na", "v", "e", "nc", "nm", "s", "nu", "nw", "nn", "l", "number", "np", "q", "u", "rand", "ng", "j", "rn", "k"], "r": ["a", "nr", "sr", "mr", "x", "rr", "ro", "err", "d", "p", "ir", "g", "R", "rc", "i", "re", "w", "c", "m", "rs", "rb", "o", "h", "ren", "pr", "rar", "f", "br", "b", "fr", "t", "nor", "dr", "v", "e", "rf", "ur", "it", "s", "rt", "lr", "hr", "q", "l", "ar", "u", "reg", "rn", "j", "er", "k", "cr", "range", "rate", "rd"], "mod": ["a", "rot", "max", "x", "MOD", "ro", "mods", " Mod", "d", "sign", "ld", "p", "dir", "sub", "spec", "Mod", "fun", "scale", "m", "set", "z", "od", "module", "OD", "floor", "prime", "round", "dec", "min", "step", "o", "log", "term", "ind", "num", "form", "dig", "add", "exp", "com", "ran", "div", "base", "rand", "var", "id", "reg", "rad"]}}
{"code": "import numpy as np\\nfrom numba import jit\\nN,K=map(int,input().split())\\nA=list(map(int,input().split()))\\n\\n@jit\\ndef imos(A):\\n    B=np.zeros_like(A)\\n    for i,x in enumerate(A):\\n        a=max(0,i-x)\\n        b=min(i+x,N-1)\\n        B[a]+=1\\n        if b+1<=N-1:\\n            B[b+1]-=1\\n    B=np.cumsum(B)\\n    return B\\n\\nfor i in range(K):\\n    if i>=50:\\n        break\\n    A=imos(A)\\nprint(*A)", "target": "377", "substitutes": {"N": ["M", "n", "NS", "T", "NL", "Ne", "NV", "GN", "NI", "Ns", "R", "X", "I", "L", "NA", "NM", " n", "NN", "NP", "NR", "NT", "NH", "H", "O", "V", " R", " L", "S", "NE", "J", "Q", "G", "ND", " C", "Num", "P", "D", "NB", "Size", "MN", " P", "Ni", "TN", "C"], "K": ["M", "T", "KN", "KY", "KR", "NV", "R", "X", "I", "KK", "NP", "DK", "KT", "FK", "V", "KS", "KC", "NK", "PK", "Z", "J", "SK", "Q", "P", "HK", "NB", "MN", "k", "KI", "TN", "KE", "KA", "KING", "C"], "A": ["GA", "But", "M", "T", "All", "An", "IA", "AAA", "AH", "Abs", "AU", "AT", "X", "I", "R", "ACC", "ESS", "AL", "AV", "AST", "NA", "And", "What", "AB", "AE", "H", "W", "AA", "LA", "As", "V", "WA", "AR", "AS", "YA", "S", "EA", "J", "Q", "G", "ICA", "This", "P", "AP", "CA", "At", "AY", "JA", "D", "AF", "AM", "Y", "SA", "AC", "BA", "AN", "Array", "The", "ACT", "F", "C"], "B": ["LB", "BI", "M", "CB", "T", "Output", "All", "RB", "BL", "BS", "OB", "Bs", "SB", "R", "I", "L", "Box", "Two", "IB", "Block", "Builder", "AB", "BG", "Both", "O", "V", "Bar", "BC", "BE", "BU", "J", "GB", "WB", "BR", "BD", "G", "P", "BB", "Q", "USB", "BM", "Bern", "TB", "FB", "Base", "EB", "NB", "BO", "Y", "Buffer", "DB", "Bytes", "F", "BA", "Body", "Z", "BY", "C"], "i": ["mi", "ki", "xi", "ci", "gi", "p", "di", "ai", "I", "c", "m", "z", "bi", "yi", "ic", "ix", "o", "ip", "ind", "f", "t", "ri", "si", "li", "ii", "v", "e", "int", "ti", "ei", "Index", "iy", "im", "zi", "ini", "\u0438", "phi", "pi", "l", "u", "id", "j", "y", "index", "ij", "ik", "k", "iu", "hi", "asi", "Xi"], "x": ["wx", "n", "xi", "ex", "xe", "xes", "ux", "xc", "X", "xa", "rx", "w", "c", "z", "m", "xt", "ic", "ix", "h", "tx", "ax", "f", "xd", "t", "time", "v", "e", "an", "fx", "xy", "xs", "mx", "dx", "inx", "q", "xx", "l", "u", "k", "y", "px", "j", "xp", "xf"], "a": ["ia", "ae", "ab", "aj", "ta", "va", "ai", "xa", "ma", "ga", "ea", "pa", "aaa", "la", "isa", "alpha", "apa", "an", "at", "sa", "aa", "am", "ar", "ka", "y", "ba", "ca", "ac"], "b": ["next", "body", "n", "sb", "ab", "db", "business", "g", "ib", "lb", "w", "c", "z", "bi", "ca", "fb", "ga", "rb", "be", "br", "f", "bc", "gb", "nb", "bb", "v", "eb", "base", "cb", "aa", "l", "bp", "j", "y", "bound", "bs", "ba", "back"]}}
{"code": "S = input()\\n\\nb_count = 0\\nans = 0\\n\\nfor pos in range(len(S)):\\n    if S[pos] == 'B':\\n        b_count += 1\\n    else:\\n        ans += b_count\\n\\nprint(ans)", "target": "587", "substitutes": {"S": ["M", "N", "NS", "T", "SF", "SH", "SS", "SL", "SB", "X", "R", "JS", "L", "POS", "I", "Si", "SI", "CS", "Spe", "Set", "H", "GS", "V", "O", "SAM", "B", "G", "P", "A", "s", "SU", "D", "DS", "SA", "F", "String", "Z", "C"], "b_count": [" b_Count", "beta_count", "b2counter", "browsize", "bi_num", "bi_size", "beta_current", "browCount", "browcount", "betammcount", "bwcounter", "bxcount", "bi_count", "betammCount", "b2flag", "birownum", "b2count", " b_flag", "betammtotal", "b2Count", "b_total", "bwcount", " b_counter", "bmmcurrent", "b_num", "bwflag", "b_Count", "b_flag", "beta_total", "birowcount", "brownum", "bmmCount", "beta_Count", " bxflag", "b_size", "bxCount", "bi_Count", " bxCount", " bxcounter", "b_counter", "bxflag", "bmmcount", "birowCount", "bwCount", "bxcounter", "birowsize", "bmmtotal", " bxcount", "betammcurrent", "b_current"], "ans": ["ars", "ANS", "ants", "ats", "ians", "ean", "anon", "eds", "outs", "acs", "aus", "us", "aned", " Ans", "ns", "ann", "ums", "rs", "leans", "anas", "ks", "ins", "offs", "ras", "ons", "ms", "amps", "ents", "ens", "news", "uns", "can", "an", "anks", "gs", "oss", "anes", "s", "nas", "ams", "aos", "ads", "os", "AN", "bs"], "pos": ["loc", "mit", "nt", "kin", "port", "on", "po", "POS", "position", "start", "chain", "z", "mut", "Pos", "col", "ind", "trans", "go", "num", "cond", "no", "pt", "key", "pid", "add", "all", "un", "row", "cos", "size", "mon", "lat", "id", "pose", "index", "os", "j", "k", "pro", "neg"]}}
{"code": "import math\\nN, M = map(int, input().split())\\n\\nans = 1\\nif(N < M//N):\\n  i = N\\n  while(ans == 1 and i <= math.sqrt(M)):\\n    if(M % i == 0):\\n      ans = M//i\\n    i += 1\\nif(N >= M//N or ans == 1):\\n  i = M//N\\n  while(ans == 1 and i >= 1):\\n    if(M % i == 0):\\n      ans = i\\n    i -= 1\\n  \\nprint(ans)", "target": "163", "substitutes": {"N": ["SN", "CNN", "n", "NS", "T", "NL", "Max", "NC", "GN", "NI", "Na", "Ns", "X", "R", "I", "L", "NA", "NM", "Number", "NN", "NP", "NR", "CN", "NT", "NH", "H", "W", "O", "V", "No", "NO", "Z", "S", "MAN", "NE", "B", "J", "G", "P", "Num", "NPR", "A", "E", "Sn", "D", "ON", "Y", "MN", "Ni", "U", "K", "F", "AN", "TN", "NG", "C"], "M": ["MO", "T", "CM", "MU", "MAT", "GM", "R", "I", "JM", "L", "NM", "MX", "Mo", "RM", "m", "SM", "H", "Mi", "MM", "O", "MC", "V", "MD", "MER", "C", "S", "MAN", "B", "J", "G", "P", "MP", "BM", "MA", "ME", "MS", "D", "Matrix", "MH", "DM", "TM", "AM", "MN", "MI", "MT", "MIT", "FM", "U", "LM", "MF", "F", "Man", "Z", "PM", "MR"], "ans": ["n", "x", "ats", "\u00e1n", "was", "aus", "us", "lets", "aned", " Ans", "ns", "ks", "offs", "ms", "ss", "cons", "rors", "posts", "iann", "aps", "anes", "nan", "arts", "ais", "ai", "atis", "ros", "ates", "ann", "mas", "anas", "alias", "ins", "ens", "si", "mn", "aces", "s", "ias", "cs", "stats", "olds", "ars", "sum", "ians", "names", " means", "lines", "rans", "ons", " sans", "can", "an", " sins", "oss", "terms", "xs", "cus", "vs", "sis", "os", "es", "ps", "vers", "ANS", "ants", "actions", "outs", "vals", "rs", "amps", "ls", "ents", " they", "uns", "ands", "aos", "yes", "ads", "AN", "ds", "orts", "said"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "to", "ni", "ci", "gi", "cli", "p", "di", "ai", "I", "c", "m", "z", "isi", "bi", "ic", "ix", "o", "ip", "iri", "b", "multi", "ri", "t", "si", "ii", "li", "ori", "ei", "int", "ti", "v", "e", "im", "it", "ini", "ui", "zi", "\u0438", "phi", "pi", "ati", "l", "u", "id", "j", "y", "index", "asi", "ij", "ik", "iu", "hi"]}}
{"code": "n = int(input())\\na = list(map(int,input().split()))\\nMOD = 10 ** 9 + 7\\ndigit = 60\\no=[0]*digit\\nz=[0]*digit\\n\\nfor i in a:\\n  for j in range(digit):\\n    if (i >> j) & 1:\\n      o[j] += 1\\n    else:\\n      z[j] += 1\\nans = 0    \\nfor j in range(digit):\\n  ans += (o[j]*z[j]*pow(2,j,MOD))\\nprint(ans % MOD)", "target": "353", "substitutes": {"n": ["nr", "N", "x", "ni", "nt", "d", "p", "cn", "g", "w", "sn", "c", "m", "ns", "f", "b", "num", "t", "nb", "mn", "na", "v", "e", "s", "nn", "l", "np", "k"], "a": ["x", "sta", "ae", "ac", "ta", "d", "p", "va", "ai", "xa", "r", "c", "ma", "m", "ea", "aaa", "ada", "f", "b", "t", "alpha", "da", "pos", "na", "an", "list", "A", "al", "at", "sa", "another", "ao", "oa", "aa", "l", "area", "ba"], "MOD": ["MAX", "M", "N", "VER", "mod", "JD", "MAT", "R", "POS", "Mod", "L", "AD", "JS", "VERSION", "LOG", "DATA", "OD", "REG", "MC", "SIZE", "MD", "NO", "OR", "NUM", "S", "MODE", "MAN", "DX", "J", "UL", "DD", "P", "ID", "MS", "XX", "D", "OUT", "VALUE", "OK", "DEC", "MT", "JUST", "AN", "UN", "Z", "OOL", "REM", "BY"], "digit": ["digital", "general", "minus", "gnu", "major", "d", "JD", "figure", "significant", "got", "p", "unsigned", "iter", "position", "leading", "period", "minute", "winner", "unit", "frac", "prime", "ant", "dec", "total", "format", "upper", "second", "hex", "term", "tag", "word", "fix", "num", "dat", "integer", "alpha", "dig", "fig", "ord", "character", "da", "int", "odd", "date", "it", "division", "factor", "char", "dimension", "needed", "flag", "letter", "div", "dot", "number", "pi", "rand", "doc", "dated", "git", "float", "data", "basic", "org", "init", "version"], "o": ["x", "ro", "d", "p", "po", "r", "ox", "m", "od", "og", "bo", "ic", "h", "O", "ob", "go", "f", "b", "oe", "t", "io", "ot", "fo", "an", "v", "e", "ou", "s", "it", "so", "co", "oa", "oo", "q", "l", "ooo", "u", "os", "y", "ao"], "z": ["x", "d", "p", "zes", "g", "iz", "zh", "ez", "h", "oz", "zip", "ze", "f", "b", "uz", "ss", "cz", "ot", "zer", "nz", "s", "so", "zi", "gz", "zo", "q", "ll", "zu", "l", "sd", "u", "tz", "y", "os", "az", "Z", "zz"], "i": ["mi", "ki", "xi", "x", "gi", "g", "di", "ai", "I", "c", "m", "bi", "yi", "iti", "ic", " bi", "f", "b", "t", "si", "ii", "li", "ji", "ei", "v", "e", "ti", "oi", "im", "zi", "ini", "phi", "pi", "ati", "l", "u", "y", "ij", "iu", "hi", " Xi"], "j": ["next", "json", "x", "uj", "ja", "ijk", "str", "err", "aj", "js", "p", "d", "name", "g", "jet", "left", "jp", "kid", "job", "r", "oj", "jc", "m", "bot", "jj", "current", "note", "col", "h", "jl", "f", "b", "br", "fr", "je", "jac", "t", "pt", "J", "ver", "ion", "bj", "key", "ji", "kj", "v", "obj", "tr", "jump", "jo", "q", "l", "yy", "dj", "u", "y", "jit", "k", "ij"], "ans": ["ars", "ANS", "ants", "ats", "ians", "anon", "eds", "outs", "aus", "ros", "lets", "us", " Ans", "ts", "ates", "ns", "ann", "rans", "rs", "ums", "anas", "mas", "offs", "ins", "ras", "ons", "ms", "amps", "ls", "ents", "ens", "cas", "uns", "an", "oss", "ays", "s", "ran", "ands", "aos", "vs", "cs", "arts", "oes", "os", "es", "lan", "AN"]}}
{"code": "from itertools import *\\nN,M,Q = map(int,input().split())\\nabcd = [list(map(int,input().split())) for q in range(Q)]\\nprint(max(sum(d for a,b,c,d in abcd if i[b-1]-i[a-1]==c) for i in combinations_with_replacement(range(M),N)))", "target": "0", "substitutes": {"N": ["n", "NS", "T", "NC", "NI", "Ns", "R", "I", "X", "L", "NA", "NM", "NN", "CN", "NR", "NT", "NH", "H", "V", "Z", "S", "NE", "B", "G", "ND", "P", "A", "E", "D", "NB", "MN", "Ni", "K", "F", "AN", "TN", "C"], "M": ["T", "CM", "R", "I", "L", "NM", "RM", "m", "H", "MM", "MC", "V", "MD", "S", "MAN", "B", "P", "MP", "MA", "ME", "MS", "D", "DM", "AM", "MN", "MI", "MT", "MR", "K", "LM", "C"], "Q": ["IX", "NS", "T", "MQ", "R", "I", "X", "L", "Qual", "W", "Query", "V", "QB", "UE", "S", "B", "J", "G", "P", "E", "D", "QL", "Y", "Qu", "UK", "IQ", "U", "K", "F", "Z", "QU", "C"], "abcd": [" abdc", " abcr", "rabcr", "abccr", "abcdc", "abbcd", "bmd", "bde", "abcr", "abccd", "abbde", " abde", "abdc", " abCD", "rabCD", "abCD", "bcd", " abmd", "rabcd", "abbCD", "abcCD", "abde", "bCD", "abmd", "abbmd", "rabdc"], "q": ["x", "ql", "p", "iq", "r", "z", "m", "ix", "h", "ind", "f", "qq", "eq", "qa", "ch", "dq", "u", "id", "j", "k", "y", "qs"], "d": ["fd", "dL", "n", "p", "g", "di", "dh", "r", "w", "m", "h", "ind", "dt", "df", "f", "t", "dat", "da", "dig", "dr", "de", "e", "ad", "dp", "dx", "D", "ed", "do", "l", "dd", "sd", "u", "id", "j", "data", "dict", "ds"], "a": ["n", "x", "ae", "ab", "aj", "ta", "p", "va", "ai", "w", "r", "m", "o", "ea", "f", "an", "e", "v", "A", "sa", "ao", "s", "oa", "aa", "ar", "u", "j", "y", "ba", "ca", "ac"], "b": ["n", "sb", "ab", "db", "g", "ib", "r", "m", "z", "bi", "fb", "rb", "o", "be", "f", "br", "bc", "B", "bb", "v", "e", "eb", "cb", "l", "u", "j", "y", "bs", "ba", "back"], "c": ["ec", "ce", "lc", "n", "x", "ci", "p", "g", "ct", "r", "tc", "m", "z", "h", "f", "t", "e", "v", "ch", "cc", "co", "cu", "l", "u", "cs", "y", "cf", "ca", "C", "ac"], "i": ["ki", "xi", "x", "ql", "ci", "gi", "p", "di", "ai", "I", "m", "bi", "qi", "ic", "o", "f", "ri", "multi", "io", "si", "ii", "li", "v", "ei", "e", "ti", "oi", "list", "im", "ini", "ui", "zi", "phi", "pi", "l", "ati", "id", "j", "ij", "iu"]}}
{"code": "a, b = map(int, input().split())\\nans = 0\\nans += a\\nif a > b:\\n    ans -= 1\\nprint(ans)", "target": "35", "substitutes": {"a": ["aq", "n", "x", "ae", "ab", "d", "p", "ai", "i", "r", "c", "ma", "z", "m", "ata", "o", "ea", "h", "act", "f", "t", "auto", "alpha", "na", "an", "e", "A", "ap", "at", "sa", "af", "ao", "au", "oa", "aa", "l", "am", "ar", "y", "area", "ba", "ca"], "b": ["bis", "n", "sb", "x", "to", "ab", "d", "p", "db", "g", "ib", "i", "r", "c", "m", "bi", "fb", "rb", "o", "mb", "h", "be", "f", "bc", "t", "B", "bb", "v", "e", "base", "l", "y", "bs", "ba"], "ans": ["ANS", "ants", "ats", " means", "eds", "outs", "acs", "ows", "aus", "ros", "asks", "us", "lets", "ts", "ns", "vals", "ann", "ums", "rs", "mas", "ks", "rans", "offs", "ins", "anas", "eas", "ons", "ms", "amps", "ls", "pan", "ids", "ents", "ens", "cons", "uns", "an", "posts", "gs", "anks", "iann", "aps", "oss", "terms", "xs", "ands", "aos", "vs", "ads", "cs", "arts", "os", "es", "stats", "lan", "ps", "orts", "olds"]}}
{"code": "from typing import List, Any\\n\\n\\ndef read_int() -> int:\\n    return int(input().strip())\\n\\n\\ndef read_ints() -> List[int]:\\n    return list(map(int, input().strip().split(' ')))\\n\\n\\nclass SegmentTree:\\n    \\n    def __init__(self, array):\\n        self.n = len(array)\\n        self.array = [0 for _ in array]+array\\n        for i in range(self.n-1, 0, -1):\\n            self.array[i] = self.array[i<<1]|self.array[i<<1|1]\\n\\n    def set(self, i, v):\\n        p = self.n+i\\n        self.array[p] = v\\n        while p > 1:\\n            p >>= 1\\n            self.array[p] = self.array[p<<1]|self.array[p<<1|1]\\n\\n    def count(self, l, r):\\n        l += self.n\\n        r += self.n\\n        answer = 0\\n        while l < r:\\n            if l&1:\\n                answer |= self.array[l]\\n                l += 1\\n            if r&1:\\n                r -= 1\\n                answer |= self.array[r]\\n            l >>= 1\\n            r >>= 1\\n        return answer\\n\\n\\ndef bit_count(a):\\n    answer = 0\\n    while a:\\n        answer += a&1\\n        a >>= 1\\n    return answer\\n\\n\\ndef solve():\\n    ALPHABETS = 'abcdefghijklmnopqrstuvwxyz'\\n    N = read_int()\\n    S = input()\\n    Q = read_int()\\n    segment_tree = SegmentTree([1<<(ALPHABETS.index(c)) for c in S])\\n    for _ in range(Q):\\n        cmd = input().strip().split(' ')\\n        if cmd[0] == '1':\\n            n = 1<<(ALPHABETS.index(cmd[2]))\\n            segment_tree.set(int(cmd[1])-1, n)\\n        else:\\n            l, r = int(cmd[1])-1, int(cmd[2])\\n            print(bit_count(segment_tree.count(l, r)))\\n\\n\\nif __name__ == '__main__':\\n    solve()\\n", "target": "779", "substitutes": {"self": ["body", "json", "cmp", "x", "settings", "instance", "wn", "context", "spread", "mp", "left", "dev", "ind", "empty", "config", "close", "response", "private", "block", "disk", "e", "your", "about", "obj", "compl", "app", "new", "co", "reader", "lex", "se", "history", "pkg", "sw", "before", "me", "local", "get", "own", "test", "this", "wh", "deep", "object", "pre", "sql", "sect", "full", "my", "prefix", "parent", "shape", "change", "ins", "py", "results", "also", "params", "console", "s", "debug", "patch", "tmp", "cl", "user", "error", "python", "thus", "next", "ae", "nt", "attribute", "spec", "series", "raw", "via", "sys", "ref", "subject", "make", "xml", "round", "graph", "h", "you", "form", "review", "resp", "add", "remote", "all", "github", "partial", "public", "req", "os", "attr", "dict", "Self", "views", "th", "path", "view", "name", "sub", "where", "w", "diff", "rem", "details", "info", "by", "ren", "rec", "rel", "agg", "news", "list", "final", "ws", "rss", "links", "work", "first", "proc", "widget", "network", "j"], "array": ["x", "instance", "random", "offset", "table", "value", "image", "window", "format", "default", "response", "amount", "pixel", "string", "app", "q", "number", "range", "data", "actor", "trace", "history", "arrow", "file", "arr", "position", "length", "object", "vector", "closure", "section", "input", "shape", "time", "integer", "share", "force", "ion", "each", "hash", "average", "say", "collection", "element", "error", "analysis", "ray", "binary", "function", "storage", "variable", "pair", "api", "attribute", "expression", "component", "example", " Array", "atomic", "raw", "wave", "audio", "box", "values", "result", "form", "alpha", "record", "memory", "all", "cache", "now", "stage", "band", "ar", "index", "Array", "rays", "frame", "view", "order", "ception", "map", "ami", "message", "amd", "angular", "core", "address", "int", "list", "row", "at", "original", "ode", "au", "var", "archive", "area", "sequence", "version"], "n": ["nr", "net", "max", "nt", "d", "en", "ln", "names", "norm", "ne", "g", "cn", "dn", "w", "current", "m", "z", "ns", "sn", "o", "nl", "h", "f", "num", "t", "len", "nb", "nor", "mn", "na", "e", "nc", "un", "s", "nan", "nu", "q", "nn", "np", "number", "u", "network", "j", "y"], "_": ["x", " the", "ct", "ox", "my", "ix", "py", "no", "non", "an", "P", "int", "E", " __", " any", "new", "The"], "i": ["mi", "xi", "x", "ia", "ci", "gi", "d", "di", "g", "ai", "I", "z", "m", "bi", "info", "ic", "ix", "o", "ip", "h", "iri", "ind", "f", "b", "t", "si", "li", "ii", "ori", "int", "ti", "e", "im", "it", "zi", "ini", "q", "pi", "phi", "u", "id", "j", "k", "index", "y", "ij", "iu"], "v": ["qv", "x", "vv", "vi", "vo", "tv", "va", "g", "vp", "value", "w", "uv", "vector", "m", "ev", "vy", "val", "V", "vr", "f", "b", "av", "nv", "vm", "sv", "ve", "q", "vs", "u", "j", "vt", "y", "k"], "p": ["perm", "port", "point", "pc", "vp", "g", "jp", "pre", "m", "fp", "pb", "par", "power", "tp", "pa", "ip", "h", "pr", "sp", "t", "part", "pt", "lp", "pid", "P", "exp", "ap", "post", "cp", "ping", "dp", "per", "q", "pi", "pl", "bp", "np", "u", "j", "pers", "op", "pn", "pp", "pro", "ps"], "l": ["loc", "lc", "lu", "tl", "kl", "ln", "lt", "ld", "ul", "g", "left", "lb", "L", "long", "ml", "m", "dl", "el", "lit", "o", "nl", "sl", "la", "h", "lay", "ls", "f", "b", "hl", "t", "len", "rl", "lo", "lp", "li", "al", "s", "ell", "sol", "lr", "ol", "q", "ll", "le", "pl", "u", "lex", "j", "er"], "r": ["nr", "sr", "mr", "rr", "ro", "d", "g", "R", "rc", "re", "rev", "w", "m", "z", "rem", "rh", "rs", "rb", "res", "o", "ren", "h", "result", "vr", "rar", "right", "b", "fr", "ri", "t", "rl", "dr", "e", "ru", "red", "ur", "tr", "s", "rt", "lr", "q", "ar", "u", "j", "er", "rn", "range", "k", "cr", "reg", "rate", "adr", "ry", "rage", "rd"], "answer": ["rue", "x", "wer", "err", "exit", "code", "value", "set", "response", "ee", "swers", "e", "about", "see", "do", "reply", "turn", "number", "again", "open", "Answer", "option", "vote", "um", "write", "ask", "replace", "position", "section", "status", "accept", "description", "equ", "rent", "energy", "lr", "say", "oa", "line", "error", "entry", "echo", "answered", "aq", "next", "comment", "expression", "example", "query", "val", "result", "term", "record", "al", " unanswered", "size", "many", "call", "action", "order", "ace", "version", "message", "remember", "ah", "word", "ver", "address", "ence", "int", "question", "ve", "au", "command", "sequence", "after", "rage"], "a": ["aq", "x", "ia", "ae", "request", "ta", "d", "g", "ai", "w", "ma", "z", "ata", "eas", "window", "o", "aaa", "f", "b", "t", "agent", "response", "wa", "an", "e", "A", "at", "s", "sa", "au", "oa", "aa", "q", "am", "ar", "u", "j", "y", "er", "area", "ba", "ca", "rage", "ac"], "ALPHABETS": ["ALPHABELS", "ALPHACATES", "ALCHabets", "ALPHabATES", "ALPHOBATES", "ALPHOPATES", "ALPHOBONES", "ALPHLABET", "ALPHabELS", "ALPHOPONES", "ALCHABETS", "ALCHOBets", "ALPHABATES", "ALPHabITS", "ALCHOBET", "ALPHIBATES", "ALPHLABets", "ALCHABET", "ALCHOBITS", "ALPHACets", "ALCHabATES", "ALPHABets", "ALPHOBITS", "ALPHABET", "ALPHabETS", "ALPHabets", "ALPHabONES", "ALPHLABETS", "ALPHABITS", "ALCHabONES", "ALCHABITS", "ALPHOBETS", "ALCHABets", "ALPHOBets", "ALCHABELS", "ALPHabET", "ALPHLABITS", "ALPHACETS", "ALPHIBELS", "ALPHOPets", "ALPHACELS", "ALCHabETS", "ALCHABONES", "ALCHOBETS", "ALPHOBET", "ALCHABATES", "ALCHabELS", "ALPHOPETS", "ALPHABONES", "ALPHIBets", "ALPHIBETS"], "N": ["SN", "M", "NS", "T", "NC", "R", "X", "I", "L", "NT", "H", "W", "O", "V", "B", "J", "G", "P", "A", "E", "Sn", "D", "Y", "Z", "C"], "S": ["SN", "M", "NS", "T", "SH", "SS", "SL", "SB", "SER", "R", "JS", "SO", "L", "RS", "Si", "SI", "CS", "TS", "SM", "SQL", "V", "B", "P", "SE", "A", "s", "SP", "SU", "ST", "D", "SA", "K", "SR", "Z", "C"], "Q": ["Que", "M", "IX", "T", "MQ", "Queue", "X", "I", "R", "L", "H", "W", "Query", "O", "V", "QB", "UE", "B", "J", "G", "P", "A", "E", "D", "NB", "q", "Y", "Qu", "IQ", "U", "K", "F", "Z", "QU", "C"], "segment_tree": ["segments_Tree", "sebit_tree", "segmentableTree", "sebit_let", "segmentablelet", "segments2Tree", "segmentabletree", "sement_tree", "sebitabletable", "sebit_table", "segment2tree", "sebitablelet", "sement_Tree", "segmentingTree", "segments2ree", "segment2Tree", "segmentabletable", "sebit_Tree", "segment_Tree", "sement_table", "segment2ree", "segment_table", "sebitableTree", "sebitabletree", "segment2let", "segments_table", "segments_ree", "segment_ree", "segmentingtree", "segments2tree", "segments_tree", "segment_let", "segments2table", "segment2table", "segmentingtable"], "c": ["lc", "x", "cat", "ci", "d", "cont", "cd", "g", "ct", "code", "z", "ctx", "ic", "col", "h", "cur", "f", "b", "vc", "t", "dc", "bc", "anc", " C", "e", "nc", "crit", "ch", "cc", "\u00e7", "cb", "q", "etc", "cl", "u", "cs", "k", "cf", "C", "ac"], "cmd": ["ctrl", "conn", "pkg", "cmp", "call", "nt", "cat", "cli", "comm", "cd", "ct", "short", "ext", "mom", "cfg", "control", "ctx", "wd", "col", "send", "Cmd", "bind", "act", "ctr", "config", "tab", "cond", "arm", "mac", "args", "std", "det", "obj", "crit", "msg", "cp", "exec", "auth", "req", "desc", "ands", "cb", "fy", "q", "command", "good", "cats", "mem", "pat", "shell", "md", "dict", "ctl", "text"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\nfrom itertools import chain\\n# from itertools import combinations as comb\\n# form bisect import bisect_left, bisect_right, insort_left, insort_right\\n# from collections import Counter\\n# import numpy as np\\n\\n\\ndef solve(A: int, B: str):\\n    B = int(B.replace('.', ''))\\n    ans = A * B\\n    return ans // 100\\n\\ndef main():\\n    tokens = chain(*(line.split() for line in sys.stdin))\\n    A = int(next(tokens))  # type: int\\n    B = next(tokens)  # type: str\\n    answer = solve(A, B)\\n    print(answer)\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "44", "substitutes": {}}
{"code": "s=input()\\nl=['AKIHABARA','KIHABARA','AKIHBARA','AKIHABRA','AKIHABAR',\\n   'KIHBARA','AKIHBRA','AKIHABR','KIHABRA',\\n   'AKIHBAR','KIHABAR',\\n   'KIHBRA','AKIHBR','KIHABR','KIHBAR','KIHBR']\\n\\nif s in l:\\n    print(\"YES\")\\nelse:\\n    print(\"NO\")", "target": "796", "substitutes": {"s": ["a", " self", "n", "sb", "x", "self", "su", " S", "d", "p", "spec", "g", "i", "re", "w", "r", "c", "z", "m", "ses", "o", "ins", "h", "ls", "f", "b", "t", "ss", "S", "si", "just", "conf", "v", "e", "sq", "gs", "sa", "sv", "q", "sav", "se", "y", "es", "ds", "ps"], "l": ["lc", "n", "tl", "kl", "ln", "d", "p", "lt", "g", "left", "i", "L", "r", "c", "m", "dl", "el", "nl", "sl", "h", "ls", "jl", "f", "vl", "hl", "t", "bool", "len", "rl", "acl", "lists", "fl", "li", "lp", "v", "list", "all", "ch", "ll", "pl", "le", "isl"]}}
{"code": "n,a,b = map(int, input().split())\\n\\nif b-a==0:\\n    print('Borys')\\n    exit()\\n\\nif (b-a)%2==1:print('Borys')\\nelse:print('Alice')\\n\\n", "target": "507", "substitutes": {"n": ["nr", "N", "x", "d", "p", "g", "i", "r", "sn", "c", "m", "ns", "o", "h", "f", "num", "t", "nb", "na", "v", "nc", "nm", "nu", "nn", "l", "q", "j", "y", "k"], "a": ["x", "ae", "ac", "ab", "aj", "p", "d", "va", "ai", "i", "c", "ma", "m", "are", "ea", "abs", "f", "t", "alpha", "da", "an", "A", "al", "at", "sa", "s", "ao", "au", "aa", "l", "am", "ar", "j", "ba", "ca"], "b": ["sb", "x", "ab", "d", "p", "ne", "g", "ib", "i", "r", "c", "m", "z", "bi", "fb", "rb", "o", "h", "f", "bc", "t", "nb", "B", "bb", "na", "v", "e", "s", "l", "u", "k", "y", "j", "bs", "ba"]}}
{"code": "print(eval(input().replace(' ','*')))", "target": "111", "substitutes": {}}
{"code": "n = int(input())\\nif n == 0:\\n    print(0)\\n    exit()\\nd = []\\nwhile n != 0:\\n    p = n % 2\\n    d.append(p)\\n    n = (n - p) * (-1) // 2\\nfor u in reversed(d):\\n    print(u, end='')\\nprint()\\n", "target": "24", "substitutes": {"n": ["a", "N", "x", "nt", "gn", "ln", "norm", "ne", "cn", "g", "dn", "i", "nat", "sn", "r", "c", "long", "m", "z", "ns", "o", "nl", "h", "f", "b", "num", "t", "len", "nb", "no", "natural", "nor", "na", "v", "an", "nc", "nan", "nu", "q", "l", "nn", "np", "number", "ng", "network", "j", "y", "nd"], "d": ["fd", "vd", "ld", "db", "dir", "cd", "td", "dh", "r", "c", "m", "bd", "created", "dl", "o", "ind", "dt", "done", "xd", "b", "t", "dat", "da", "ud", "pd", "out", "de", "ded", "ad", "end", "D", "ed", "do", "div", "l", "dd", "sd", "did", "dict", "ds", "defined", "nd", "rd"], "p": ["pkg", "x", "perm", "pard", "pc", "g", "jp", "i", "pre", "c", "m", "pb", "par", "power", "tp", "pa", "f", "sp", "t", "part", "pt", "lp", "pos", "v", "P", "e", "cp", "ph", "ping", "per", "q", "pl", "pi", "np", "l", "k", "j", "pn", "pp", "pro", "ps", "pg"], "u": ["bu", "lu", "x", "su", "gu", "mu", "ue", "ul", "i", "uid", "uni", "us", "uv", "ju", "hu", "pu", "you", "ud", "tu", "eu", "v", "ru", "up", "un", "fu", "ou", "ur", "uf", "ui", "nu", "au", "cu", "q", "U", "uu", "iu", "chu"]}}
{"code": "while True:\\n    x = input()\\n    if x == \"0\":\\n        break\\n    num = [int(i) for i in x]\\n    print(sum(num))", "target": "491", "substitutes": {"x": ["wx", "n", "xi", "ex", "xe", "p", "xes", "ux", "xc", "test", "X", "xa", "rx", "ox", "z", "xxxx", "xt", "xml", "ic", "ix", "tx", "ax", "xd", "t", "xxxxxxxx", "check", "v", "exp", "fx", "xy", "xs", "xb", "dx", "xx", "hello", "item", "y", "rax", "px", "index", "xp", "xf"], "num": ["den", "next", "con", "n", "alph", "str", "um", "nom", "d", "mu", "split", "common", "set", "total", "tim", "nam", "save", "rub", "val", "result", "count", "NUM", "no", "mn", "ver", "Num", "int", "cal", "nm", "prim", "eng", "group", "new", "nu", "div", "dim", "number", "mon", "np", "index", "data", "mark", "sum"], "i": [" ii", "mi", "ki", "n", "xi", "\u00ed", " I", "ci", "gi", "di", "ai", "I", "iter", "m", "qi", "yi", "ic", "ix", "iri", "ip", "ind", "si", "ii", "li", "v", "ei", "int", "ti", "oi", "iy", "im", "ini", "zi", "l", "pi", "id", "j", "y", "ij", "iu"]}}
{"code": "L, R = map(int, input().split())\\n  \\nif R - L >= 2018:\\n  print(0)\\n  exit()\\n  \\nlst = []\\nfor i in range(L,R+1):\\n  lst.append(i%2019)\\n  \\nlst.sort()\\n\\nif lst[0] == 0:\\n  print(0)\\n  exit()\\n  \\nrlt = 2020\\nfor i in range(len(lst)):\\n  for j in range(i+1,len(lst)):\\n    rlt = min(rlt, (lst[i]*lst[j])%2019)\\n    \\nprint(rlt)", "target": "650", "substitutes": {"L": ["M", "N", "NL", "T", "SL", "I", "LC", "X", "H", "W", "LA", "V", "S", "LT", "B", "J", "Q", "G", "LI", "P", "A", "RL", "E", "LG", "D", "l", "LL", "LE", "U", "LM", "F", "K", "LS", "Z", "LP", "EL", "C"], "R": ["M", "N", "T", "RG", "I", "RS", "RI", "r", "RF", "RM", "NR", "Rs", "DR", "RA", "RE", "GR", "W", "V", "C", "RT", "OR", "S", "B", "J", "Q", "BR", "G", "P", "RL", "E", "RC", "RR", "D", "RO", "U", "K", "SR", "Z", "MR"], "lst": ["lelt", "llnd", "tlsl", "slst", "lST", "elST", "llgr", "algr", "sllt", "rlld", "Lst", "lgr", "lind", "llist", " llt", "lsbl", "llset", " lsts", "rlst", "ilst", "slsts", "lbl", "lnd", "tlist", "lsts", "lnsts", "lests", "lld", "lint", "lset", "alnd", "llld", "List", "ilST", "slsl", "lssts", "lnst", "alst", " lnt", " list", "alnt", "llsts", "lsset", "Llt", "ligr", " lnd", "tlst", "lnt", "llst", "elst", "tlct", "slnt", "lsst", " lST", "lnist", "tlnt", "llbl", "illt", "slct", "tllt", "lct", "Llist", "slist", "Lsts", "leist", "lnlist", "rlset", "rlnd", "lest", "rlbl", " lct", "lsl", " llist", "ellt", "list", "rlsts", "tlsts", " lsl", " lld", "llt", "llnt"], "i": ["a", "mi", "ki", "n", "xi", "x", "ia", "ci", "gi", "ir", "di", "ai", "I", "r", "m", "bi", "yi", "qi", "iti", "ic", "ix", "ip", "ri", "io", "si", "ii", "li", "ji", "ei", "e", "int", "ti", "ori", "iy", "it", "ini", "zi", "ui", "q", "phi", "pi", "l", "id", "index", "y", "ij", "ik", "iu", "hi"], "rlt": ["rclit", "rbt", "wrt", "Rgt", "rrgt", "rnt", " rmt", " rnt", "lt", "Rnt", "wt", "rcnt", "lbt", "rtlt", "rrnt", "rcval", " rgt", "rrlt", "rtlit", "rrval", "rclt", " rlit", "rgt", "rcmt", "delt", "wbt", "wlt", "rmt", "dgt", "relt", "rlit", "rtmt", "rval", "Rval", " rt", "rt", " rbt", "rcelt", "dval", " rval", "Relt", "lrt", "Rlt", "rcgt", "llt", "dlt", "rtnt", " rrt", "rrt"], "j": ["json", "n", "uj", "ja", "js", "aj", "p", "g", "ian", "jp", "jc", "oj", "z", "m", "jj", "bi", "h", "jl", "br", "b", "jac", "sp", "J", "bj", "key", "kj", "v", "ji", "obj", "jump", "q", "dj", "y", "k", "ij"]}}
{"code": "while True:\\n\tm,f,r=map(int,raw_input().split())\\n\tif m==f==r==-1: break\\n\tif m+f<30 or m==-1 or f==-1: print 'F'\\n\telif m+f>=80: print 'A'\\n\telif 65<=m+f: print 'B'\\n\telif 50<=m+f: print 'C'\\n\telif r>=50: print 'C'\\n\telse: print 'D'", "target": "410", "substitutes": {"m": ["tm", "a", "mi", "n", "M", "x", "mr", "pm", "mid", "um", "dm", "d", "p", "mm", "fm", "g", "i", "re", "c", "ma", "z", "o", "rm", "gm", "h", "ms", "b", "fr", "t", "mc", "arm", "sim", "v", "e", "sm", "s", "q", "l", "mun", "u", "k", "y", "j", "md", "cm", "er", "mt"], "f": ["fd", "a", "n", "x", "ter", "d", "p", "fm", "alf", "g", "file", "fs", "i", "sf", "w", "fort", "c", "fre", "fc", "fp", "fb", "o", "h", "fa", "fr", "b", "t", "fe", "fac", "df", "fo", "fen", "fl", "ff", "v", "e", "fx", "rf", "fu", "af", "s", "tf", "end", "q", "l", "fg", "u", "j", "y", "fi", "F", "cf", "ft"], "r": ["a", "nr", "n", "mr", "sr", "rr", "ro", "err", "d", "p", "g", "R", "rc", "i", "re", "w", "c", "z", "rs", "rb", "res", "o", "h", "fr", "b", "t", "v", "e", "rf", "rt", "q", "l", "j", "er", "cr", "rd"]}}
{"code": "N = int(input())\\nAs = list(map(int, input().split()))\\n\\n#\u8ca0\u306e\u6570\u30ab\u30a6\u30f3\u30c8\u3068\u7d76\u5bfe\u5024\u30ea\u30b9\u30c8\u4f5c\u6210\\nabs_As = []\\nnegative_count = 0\\n\\nfor A in As:\\n    if(A <= 0):\\n        abs_As.append(abs(A))\\n        negative_count += 1\\n    \\n    else:\\n        abs_As.append(A)\\n\\n#print(As)\\n#print(abs_As)\\n#print(negative_count)\\n\\nif(negative_count % 2 == 0):\\n    print(sum(abs_As))\\n\\nelse:\\n    print(sum(abs_As) - 2 * min(abs_As))", "target": "579", "substitutes": {"N": ["M", "n", "NS", "T", "NC", "Ns", "R", "I", "X", "L", "NA", "NN", "NR", "H", "O", "V", "S", "B", "J", "Q", "P", "A", "E", "D", "Ni", "K", "F", "Z", "C"], "As": [" O", " Array", "Bs", " An", " AS", " Si", " AA", " AI", " Ans", "Vs", "O", "AS", " Sa", " Any", " These", " vs", " Ar", " AT", " es", " This", " F", " Is", " ls", " List", " ar", " ES"]}}
{"code": "n,m,p = map(int, input().split())\\nG = []\\nfor i in range(m):\\n    a,b,c = map(int, input().split())\\n    G.append([a,b,c-p])\\n\\ndef bellmanFord(G, start_vertex):\\n    distance = [-float('inf') for i in range(n+1)]\\n    distance[start_vertex] = 0\\n    for i in range(2*n):\\n        for node,neighbor,cost in G:\\n            if distance[neighbor] < distance[node] + cost:\\n                if i < n:\\n                    distance[neighbor] = distance[node] + cost\\n                else:\\n                    distance[neighbor] = float('inf')\\n        if i == n-1:\\n            prev_ans = distance[n]\\n    if prev_ans != distance[n]:\\n        return -1\\n    else:\\n        return distance[n]\\n\\ndistance = bellmanFord(G, 1)\\nif distance == -1:\\n    ans = -1\\nelse:\\n    ans = max(0, distance)\\nprint(ans)\\n", "target": "88", "substitutes": {"n": ["N", "x", "net", "nt", "gn", "d", "ne", "g", "cn", "dn", "r", "w", "sn", "z", "ns", "ny", "note", "o", "h", "ren", "f", "num", "t", "len", "nb", "mn", "out", "na", "v", "an", "nc", "nm", "s", "nan", "nu", "size", "nn", "l", "pi", "np", "network", "j", "y", "k"], "m": ["tm", "mi", "km", "M", "mr", "dm", "d", "mm", "mo", "mp", "g", "span", "r", "o", "gm", "h", "ms", "num", "t", "mc", "mn", "v", "om", "s", "l", "np", "j", "k", "y", "mt", "cm"], "p": ["x", "d", "point", "pc", "g", "r", "w", "power", "o", "tp", "h", "pa", "f", "t", "pt", "v", "P", "e", "cp", "ping", "q", "l", "pi", "np", "u", "k", "j", "y", "pp", "ps"], "G": ["Graph", "GA", "Gold", "M", "N", "T", "Gu", "GROUP", "GO", "GN", "GM", "g", "GPU", "I", "R", "L", "Graphics", "AG", "GH", "Group", "TG", "BG", "graph", "GE", "GR", "H", "GES", "W", "GV", "GG", "GS", "V", "Node", "GEN", "GRE", "S", "Gate", "GF", "B", "J", "Q", "GB", "P", "IG", "A", "You", "E", "GP", "LG", "D", "FG", "Y", "GT", "K", "Ge", "GU", "F", "Z", "C"], "i": ["mi", "ki", "xi", "x", "ia", "ni", "ci", "gi", "ir", "g", "di", "ai", "I", "r", "bi", "iti", "ic", "o", "ip", "ind", "ri", "t", "si", "li", "ii", "v", "ei", "ori", "ti", "iy", "im", "it", "ini", "zi", "\u0438", "phi", "pi", "ati", "l", "y", "j", "index"], "a": ["ia", "ae", "ac", "ab", "aff", "ach", "g", "ak", "r", "ata", "el", "eas", "ea", "la", "aaa", "be", "\u00e4", "ova", "an", "e", "A", "ap", "at", "sa", "ao", "aa", "l", "am", "ar", "ack", "ba", "ca"], "b": ["x", "ab", "d", "db", "g", "ib", "r", "bi", "fb", "rb", "be", "f", "br", "bc", "t", "gb", "B", "bb", "v", "e", "an", "lab", "s", "eb", "cb", "l", "u", "k", "y", "ba", "ca"], "c": ["ec", "ce", "lc", "d", "g", "ct", "rc", "r", "city", "z", "fc", "f", "bc", "t", "can", "e", "v", "cin", "cp", "s", "cc", "cb", "l", "u", "cs", "k", "y", "cf", "ca", "C", "ac"], "start_vertex": ["start_avertex", "start_veedge", "start_vertesh", "start_veice", "start_verice", "start_everedge", "start_vertice", "start_vertedge", "start_Veredge", "start_veresh", "start_Verice", "start_veredge", "start_averedge", "start_everesh", "start_Vertex", "start_vetex", "start_evertex", "start_averesh", "start_verttex"], "distance": ["trip", "value", "equality", "negative", "tree", "response", "wards", "location", "dimension", "dp", "dd", "relative", "link", "range", "data", "relation", "history", "istance", "ward", "match", "database", "point", "cd", "position", "length", "weight", "radius", "shape", "display", "description", "delete", "time", "erence", "route", "de", "directory", "date", "energy", "s", "progress", "service", "Distance", "document", "function", "next", "expression", "d", "score", "quality", "driver", "result", "duration", "frequency", "memory", "depth", "inner", "remote", "cache", "height", "partial", "size", "dim", "index", "definition", "device", "missing", "move", "path", " proximity", "ace", "diff", "connection", " distances", "message", "speed", "double", "dist", "density", "address", " Distance", "delay", "efficiency", "direction", "command", "sequence", "sum"], "node": ["device", "x", "ward", "instance", "token", "path", "component", "edge", "point", "name", "child", "ne", "g", "image", "server", "iter", "cell", "seed", "age", "leaf", "connection", "note", "tree", "Node", "ind", "num", "t", "source", "inner", "key", "slave", "e", "int", "row", "ode", "end", "nu", "peer", "nn", "line", "item", "id", "j", "index", "k", "member", "root", "target", "start"], "neighbor": ["noteigbors", "seahbors", "neigbors", "neighchild", "neigbor", "noteighbour", "seighrow", "neibbors", "neigenchild", "neNeighbor", "neihbor", "neigrow", "neahbour", "seahbor", "neighrow", "neigerbor", "neNeighchild", "neihby", "seahbour", "seighbour", "noteighchild", "neigenrow", "neNeighbour", "neigerbour", "neigenbour", "neahchild", "neahbor", "neihbour", "neibbour", "neibby", "neigerchild", "neNeighbors", "seighchild", "seigchild", "neighbors", "neigenbors", "neihbors", "noteigbor", "noteigchild", "noteighbors", "neahrow", "neigby", "neigchild", "seigbors", "seigbour", "neighbour", "seigbor", "noteigby", "noteigbour", "neigerbors", "seahrow", "noteighby", "neibbor", "neahbors", "neigenbor", "noteighbor", "neigbour", "neighby", "seighbor", "seighbors"], "cost": ["loc", "comment", "label", "edge", "score", "cf", "value", "shift", "tip", "scale", "weight", "ace", "contact", "diff", "help", "ice", "power", "eff", " costs", "const", "term", "core", "right", "alpha", "force", "address", "ff", "key", "add", "cos", "charge", "cp", "needed", "cc", "Cost", "co", "size", "rice", "gradient", "fee", "doc", "coin", "index", "k", "loss", "function", "risk", "sum"], "prev_ans": [" prev_cons", "prev_anus", "prev_ann", "prev_cons", " prev_an", "prev____ans", " prev_ann", " prev_anus", "prev_ons", "prev_ns", " prev_ns", "prev_an", "prev____anus", " prev_ons", "prev____cons", "prev____an"], "ans": ["ANS", "ants", "ats", "ians", "dds", "outs", "acs", "aus", "asks", "ros", "aned", "ates", "ns", "ann", "ums", "rs", "ks", "offs", "ins", "acts", "ms", "amps", "ls", "ents", "ations", "anc", "cas", "an", "rors", "anks", "anes", "aps", "ups", "ances", "nan", "xs", "ions", "ads", "arts", "cs", "os", "es", "ds", "aints"]}}
{"code": "n, k = map(int, input().split())\\na = input()\\nl = []\\nif a[0] == '0':\\n    l.append(0)\\nsum = []\\ni = 0\\nwhile i < len(a):\\n    j = i\\n    while j < len(a) and a[j] == a[i]:\\n        j += 1\\n    l.append(j-i)\\n    i = j\\nif a[-1] == '0':\\n    l.append(0)\\nnum = [0]*(len(l)+1)\\nfor i in range(0, len(l)):\\n    num[i+1] = num[i]+l[i]\\nans = -1\\nfor i in range(0, len(num), 2):\\n    j = i + k*2+1\\n    if j >= len(num):\\n        j = len(num)-1\\n    ans = max(ans, num[j] - num[i])\\nprint(ans)\\n", "target": "340", "substitutes": {"n": ["N", "x", "nt", "ln", "d", "p", "g", "sn", "c", "m", "z", "ns", "o", "h", "b", "t", "mn", "na", "v", "nc", "nm", "nu", "nn", "ll", "np", "y"], "k": ["ck", "km", "ek", "kr", "kh", "kl", "ijk", "p", "g", "ak", "ke", "w", "r", "c", "m", "z", "dk", "ks", "kw", "ko", "kind", "t", "key", "v", "ikk", "ku", "q", "kk", "sk", "ka", "K", "ik", "mk"], "a": ["history", "ia", "sta", "ae", "ac", "ab", "ta", "d", "p", "g", "va", "ai", "r", "w", "ma", "m", "z", "ata", "eas", "o", "ea", "la", "aaa", "h", "f", "b", "t", "alpha", "da", "apa", "na", "an", "att", "all", "al", "A", "at", "sa", "s", "app", "au", "oa", "aa", "am", "ar", "aw", "u", "y", "data", "area", "ack", "ca"], "l": ["loc", "lc", "lu", "kl", "um", "ln", "ld", "lt", "p", "ul", "g", "left", "lb", "L", "r", "c", "m", "z", "ml", "dl", "el", "lit", "o", "nl", "sl", "la", "ls", "b", "t", "hl", "len", "lis", "rl", "lo", "lists", "als", "lp", "li", "fl", "out", "lam", "list", "all", "al", "lv", "s", "lr", "ol", "ll", "pl", "le", "u"], "sum": ["summary", "um", "ul", "us", "m", "ums", "h", "la", "log", "Sum", "mean", "ind", "count", "alpha", "si", "cum", "sim", "add", "out", "list", "al", "sa", "st", "au", "np", "mem", "am", "index"], "i": ["ki", "x", "p", "r", "z", "ix", "ind", "multi", "ri", "v", "e", "ti", "oi", "it", "ini", "q", "phi", "id", "ia", "ql", "g", "ai", "I", "m", "qi", "iti", "ic", "o", "si", "ei", "im", "s", "zi", "u", "iat", "ij", "start", "ci", "gi", "ir", "ip", "io", "ii", "pi", "index", "ik", "mi", "xi", "ie", "cli", "di", "bi", "info", "yi", "f", "b", "t", "li", "ji", "int", "at", "iy", "y", "iu", "hi"], "j": ["next", "json", "x", "max", "uj", "ja", "js", "aj", "p", "g", "left", "di", "jp", "job", "oj", "jc", "z", "jj", "bi", "ju", "o", "step", "h", "jl", "fr", "b", "br", "je", "t", "J", "off", "li", "out", "ji", "kj", "v", "bj", "obj", "adj", "s", "it", "im", "jump", "tr", "q", "dj", "u", "y", "ij"], "num": ["con", "net", "alph", "nt", "um", "nom", "p", "en", "on", "comm", "ul", "test", "m", "rem", "img", "sam", "note", "hex", "bo", "nam", "o", "rm", "rub", "val", "dat", "NUM", "multi", "form", "nb", "no", "cum", "mn", "tu", "bn", "na", "mont", "Num", "cal", "int", "nm", "om", "prim", "obj", "al", "msg", "uf", "new", "nu", "number", "mon", "np", "mun", "mat", "pl", "mem", "pn", "temp"], "ans": ["ones", "ars", "ANS", "ants", "ats", "ians", "ean", "names", " means", "outs", "aus", "ros", "lines", "us", "aned", "ns", "vals", "ann", "rans", "rs", "anas", "ks", "offs", "ins", "ons", "ms", "angs", "amps", "ls", "ents", "ens", "ots", "mn", "uns", "can", "an", "iann", "anks", "aps", "s", "nan", "xs", "ions", "nas", "ands", "vs", "ads", "cs", "arts", "ags", "os", "es", "lan", "ds", "ps"]}}
{"code": "from math import *\\n\\ndef cin(): # To take limited number of inputs\\n    return map(int,input().split())\\n\\ndef cins(): # To take space sepreated strings\\n    return input.split()\\n\\ndef cino(test=False): # To take individual int input (test = False)\\n    if not test:\\n        return int(input())\\n    else: # To take string input (test = True)\\n        return input()\\n\\ndef cina(): # array input\\n  return list(map(int,input().split()))\\n\\ndef ssplit(): # multiple string input\\n    return list(input().split())\\n\\ndef printlist(l): # To print space seperated array\\n    for i in l:\\n        print(i,end=\" \")\\n\\ndef main():\\n    a,b = cin()\\n    l = []\\n    for i in range(a):\\n        c = list(input())\\n        l.append(c)\\n    # print(l[1][0])\\n    for i in range(2*a):\\n        for j in range(b):\\n            print(l[i//2][j],end=\"\")\\n        print(\"\")\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "261", "substitutes": {}}
{"code": "n,a,b=map(int,input().split())\\nif a%2==b%2:\\n  c=(b-a)//2\\n  if (c+1)*2<=b-a:\\n    c+=1\\n  print(c)\\nelse:\\n  t=min(b-1+a,n-a+n-b+1)\\n  c=t//2\\n  if (c+1)*2<=t:\\n    c+=1\\n  print(c)", "target": "594", "substitutes": {"n": ["N", "x", "nt", "d", "p", "ne", "g", "i", "r", "w", "m", "z", "ns", "o", "h", "f", "num", "nb", "na", "v", "e", "an", "s", "nu", "q", "l", "u", "j", "y", "k"], "a": ["arg", "x", "ia", "ae", "ac", "ab", "aff", "d", "p", "ta", "aj", "g", "ai", "i", "r", "ma", "m", "ga", "o", "la", "f", "alpha", "na", "an", "e", "v", "A", "al", "at", "sa", "s", "app", "au", "aa", "l", "am", "ar", "u", "j", "y", "area", "ba", "ca"], "b": ["sb", "to", "bf", "ab", "d", "p", "db", "g", "ib", "i", "r", "bg", "w", "m", "z", "bi", "fb", "rb", "o", "h", "be", "bh", "f", "bc", "gb", "nb", "B", "bb", "v", "e", "bt", "s", "eb", "base", "cb", "l", "u", "j", "y", "bs", "ba"], "c": ["ec", "ctrl", "ce", "lc", "con", "cat", "ac", "ci", "gc", "unc", "cd", "cn", "xc", "g", "ct", "rc", "cy", "tc", "fc", "cor", "col", "cur", "cv", "bc", "mc", "dc", "count", "cz", "cum", "uc", "conf", "int", "nc", "cache", "cos", "crit", "cp", "ch", "conv", "csv", "cc", "abc", "co", "cb", "cu", "l", "q", "cl", "cs", "cm", "cr", "cf", "ca", "C", "chain"], "t": ["tm", "ty", "T", "ta", "p", "ct", "tw", "i", "w", "tc", "wt", "ts", "m", "total", "gt", "te", "tp", "term", "dt", "tg", "f", "pt", "ot", "tu", "v", "ti", "at", "tt", "it", "tr", "tf", "st", "rt", "l", "j", "tz", "vt", "temp"]}}
{"code": "import sys\\n\\nn = sys.stdin.readline().rstrip()\\n\\ndef main():\\n    ans = 'Yes' if n == n[::-1] else 'No'\\n    print(ans)\\n\\nif __name__ ==  '__main__':\\n    main()", "target": "289", "substitutes": {"n": ["nr", "N", "x", "nt", "gn", "ln", "d", "p", "en", "norm", "ne", "cn", "g", "i", "sn", "c", "z", "ns", "o", "nl", "f", "b", "t", "nb", "no", "nor", "mn", "nv", "bn", "na", "an", "yn", "nc", "nm", "s", "nan", "nu", "nn", "number", "l", "np", "yes", "q", "network", "ng", "rn", "y", "j"], "ans": ["ars", "tan", "ANS", "ants", "ats", "ana", "eds", "outs", "ai", "aus", "ros", "san", "ns", "ann", "rans", "mas", "leans", "ks", "anas", "utters", "offs", "said", "ons", "vet", "amps", "annot", "pan", "ens", "anc", "cons", "an", "anks", "aps", "qual", "ams", "ands", "caps", "ads", "arts", "olds"]}}
{"code": "while True:\\n    A = 0\\n    a = list(input())\\n    if a == [\"0\"]:\\n        break\\n    for x in a:\\n        A += int(x)\\n    print(A)\\n\\n", "target": "491", "substitutes": {"A": ["GA", "M", "N", "New", "Answer", "T", "An", "Alpha", "AU", "X", "I", "R", "NA", "One", "AV", "And", "AB", "H", "AA", "LA", "As", "V", "AI", "Ah", "B", "To", "G", "This", "HA", "P", "CA", "At", "AY", "You", "AF", "Array", "SA", "U", "AC", "The", "BA", "EA", "C"], "a": ["xi", "ia", "ex", "ae", "ta", "p", "ai", "xa", "i", "w", "ma", "z", "ita", "eas", "ga", "o", "ea", "la", "aaa", "fa", "ax", "f", "b", "isa", "t", "alpha", "cia", "na", "an", "e", "exp", "another", "sa", "ha", "oa", "aos", "aa", "index", "ya", "area", "ba", "ca"], "x": ["wx", "n", "xi", "ex", "xe", "p", "xes", "ux", "xc", "xa", "X", "i", "rx", "c", "z", "expl", " X", " ax", "xt", "ix", "tx", "ax", "xd", "b", "t", " tx", "zx", "an", "e", "exp", " xx", "na", "at", "xy", "s", "xs", "xb", "dx", "xx", " cx", "u", "y", "index", "xp", "xf"]}}
{"code": "n,m = [int(x) for x in input().split()]\\n\\n\\nif n < m:\\n    ans = n\\n    m -= n*2\\n    if m > 0:\\n        ans += m // 4\\nelse:\\n    ans = m // 2\\n\\nprint(ans)\\n", "target": "422", "substitutes": {"n": ["a", "N", "max", "net", "nt", "ni", "ln", "d", "p", "names", "ne", "cn", "i", "sn", "r", "c", "z", "ns", "o", "h", "ms", "f", "b", "num", "t", "nia", "nb", "no", "nor", "mn", "out", "na", "v", "an", "nc", "nm", "un", "s", "nan", "nu", "nn", "l", "q", "np", "j", "y"], "m": ["tm", "a", "mi", "M", "mr", "perm", "um", "mod", "dm", "d", "p", "mm", "mo", "mu", "mp", "g", "med", "i", "r", "c", "ma", "z", "ns", "asm", "man", "mas", "bm", "rm", "o", "gm", "h", "ms", "f", "b", "num", "t", "mc", "arm", "mn", "v", "an", "nm", "om", "sm", "s", "mx", "q", "l", "am", "j", "y", "k", "md", "cm", "mt"], "x": ["wx", "xi", "ex", "any", "xe", "p", "xes", "ue", "xc", "X", "xa", "i", "rx", "c", "ox", "z", "xt", "ctx", "ix", "tx", "ax", "xd", "t", "v", "e", "fx", "xy", "xs", "mx", "xb", "dx", "q", "xx", "k", "y", "px", "xp", "xf"], "ans": ["ars", "ANS", "ants", "ats", "ians", " means", "eds", "acs", "books", "aus", "ros", "asks", "lets", "aned", "ts", "vals", "ns", "ann", "rans", "mas", "eas", "ks", "anas", "offs", "ins", "ras", "ons", "ms", "amps", "angs", "ls", "pan", "ents", "ens", "cas", "uns", "an", "gs", "anks", "iann", "aps", "oss", "ran", "ams", "aos", "ands", "nas", "ads", "lan"]}}
{"code": "# coding=utf-8\\nfrom __future__ import division\\nfrom  math import sqrt\\n\\n\\ndef main():\\n    n = input()\\n    while n:\\n        scores = map(int, raw_input().split())\\n        m = sum(scores) / n\\n        print sqrt(sum([(x - m) ** 2 for x in scores]) / n)\\n        n = input()\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "683", "substitutes": {}}
{"code": "import math\\n\\n\\nresult = []\\nn = int(input())\\n\\nwhile n != 0:\\n    d = list(map(int, input().split()))\\n    mean = sum(d) / n\\n    var = [(i - mean) ** 2 for i in d]\\n    var = math.sqrt(sum(var) / n)\\n    result.append(var)\\n    \\n    n = int(input())\\n\\nfor i in result:\\n    print(i)\\n", "target": "683", "substitutes": {"result": ["answer", "next", "rue", "complete", "feature", "comment", "summary", "pair", "match", "component", "table", "view", "ret", "RESULTS", "test", "this", "Result", "true", "r", "object", "report", "section", "total", "message", "success", "output", "res", "description", "done", "product", "response", "results", "out", "search", "list", "all", "cache", "final", "csv", "group", "new", "collection", "data", "relation", "dict", "crew", "array", "sequence", "function"], "n": ["a", "nr", "N", "x", "nt", "ni", "ln", "p", "en", "ne", "cn", "g", "sn", "r", "c", "w", "m", "ns", "o", "nl", "h", "f", "b", "num", "fn", "t", "count", "len", "nb", "no", "mn", "na", "v", "nc", "all", "s", "nan", "nu", "nw", "size", "nn", "l", "q", "np", "number", "j"], "d": ["body", "dos", "dm", "p", "db", "g", "di", "dh", "r", "w", "c", "m", "diff", "details", "dec", "ind", "dt", "done", "df", "dat", "dc", "t", "da", "dates", "dist", "dr", "pd", "de", "v", "ad", "des", "s", "D", "do", "dim", "l", "dd", "du", "sd", "did", "md", "dict", "ds", "data"], "mean": ["mi", "hold", "tan", "me", "um", "ean", "mu", "broad", "head", " means", "Me", "med", " avg", "scale", "ma", "m", "unit", "man", "make", "bo", "mask", "mn", "av", "na", "an", "std", " average", "ans", "normal", "average", "Avg", "base", "pl", "ka", " Mean", "md", "mt", "centered", "sum"], "var": ["variable", "arg", "ser", "x", "err", "cat", "mod", "bar", "g", "arr", "Var", "test", "r", "scale", "weight", "vector", "inv", "vari", "par", "dev", "type", "total", "shape", "change", "ev", "val", "term", "mix", "t", "fac", "vol", "iv", "cum", "av", "dr", "nv", "out", "v", "star", "rank", "sv", "average", "ve", "cast", "ar", "vec", "y", "aver", "data", "grad", "sum"], "i": ["iii", "mi", "ki", "\u00ed", "xi", " ii", "x", "uri", "ci", "gi", "p", "di", "ai", "I", "m", " di", "yi", "info", "ic", "o", "ip", " bi", "ind", "f", "b", "ri", "t", "si", "iu", "ii", "li", "v", "ei", "ti", "oi", "iy", "ini", "zi", "\u0438", "l", "phi", "ati", "pi", "u", "id", "j", "index", "fi", "ij", "iri", "hi"]}}
{"code": "k = int(input())\\nans = [k//50] * 50\\nfor i in range(50):\\n    ans[i] += i + 1\\nfor i in range(50 - (k % 50)):\\n    ans[i] -= 1\\nprint(50)\\nprint(\" \".join(map(str, ans)))", "target": "382", "substitutes": {"k": ["ck", "km", "ki", "n", "ek", "uk", "kr", "kh", "kl", "p", "ak", "ke", "kid", "c", "m", "dk", "ks", "kw", "kil", "ko", "yk", "tk", "kok", "kj", "v", "ok", "kick", "ikk", "ku", "q", "wk", "kk", "ka", "sk", "K", "ik", "j", "mk", "unk"], "ans": ["ars", "ANS", "ants", "ats", "ians", "gn", "names", " means", "eds", "outs", "ames", "aus", "asks", "ros", "us", "lines", "aned", "lets", "aves", " Ans", "san", "ns", "vals", "ann", "rans", "rs", "ks", "anas", "offs", "res", "ins", "ras", "vers", "ons", "ms", "angs", "amps", "pan", "ids", "ents", "ens", "news", "cas", "can", "an", "posts", "anks", "aces", "anes", "oss", "s", "ran", "ams", "aos", "ands", "vs", "ads", "cs", "os", "lan", "ds", "said"], "i": ["\u00ed", "mi", "ki", "n", "xi", "x", "a", "ia", "ci", "gi", "p", "di", "ai", "I", "c", "m", "yi", "itime", "ic", "ix", "o", "ip", "ind", "t", "si", "li", "ii", "v", "e", "int", "ti", "iy", "im", "it", "s", "zi", "ini", "ui", "q", "phi", "pi", "l", "u", "id", "y", "j", "index", "ij", "ik", "iu", "hi"]}}
{"code": "n,m=map(int,input().split())\\na=list(map(int,input().split()))\\ndp=[0]*(n+9)\\nd=[0,2,5,5,4,5,6,3,7,6]\\nfor i in range(n+1):\\n  for j in a:\\n    if dp[i]or i<1:dp[i+d[j]]=max(dp[i+d[j]],dp[i]*10+j)\\nprint(dp[n])", "target": "712", "substitutes": {"n": ["N", "x", "nt", "ni", "gn", "p", "ln", "en", "ne", "cn", "g", "sn", "r", "c", "w", "ns", "o", "nl", "h", "num", "fn", "t", "nb", "no", "mn", "na", "v", "an", "nc", "nm", "un", "new", "nu", "nn", "q", "l", "np", "id", "network", "y", "k", "nd"], "m": ["km", "M", "me", "dm", "p", "mm", "mu", "g", "r", "c", "ma", "bm", "h", "f", "num", "t", "mc", "mn", "v", "nm", "sm", "q", "l", "am", "k", "y", "cm"], "a": ["ia", "sta", "ae", "to", "ab", "ta", "p", "ai", "w", "ma", "ga", "ea", "pa", "aaa", "la", "b", "t", "alpha", "apa", "na", "an", "all", "A", "al", "at", "sa", "another", "s", "au", "oa", "aa", "am", "ar", "ca", "ao"], "dp": ["pkg", "pm", "dm", "p", "db", "vp", "dial", "jp", "td", "deep", "dh", "dl", "pb", "dk", "gp", "wd", "tp", "pa", "dt", "df", "dc", "dep", "hp", "isp", "da", "DP", "wp", "dr", "pd", "lp", "tap", "deb", "cp", "bps", "dx", "dq", "pipe", "dd", "dj", "np", "pp", "ds", "ps"], "d": ["fd", "dL", "dm", "p", "db", "ld", "g", "di", "td", "dh", "r", "c", "z", "bd", "dl", "info", "dt", "done", "f", "df", "t", "dc", "da", "args", "dates", "dr", "pd", "style", "e", "debug", "s", "dx", "D", "l", "dd", "sd", "dict", "ds", "attr", "rd"], "i": ["mi", "xi", "x", "ia", "uri", "ci", "gi", "ir", "cli", "p", "di", "ai", "I", "bi", "ami", "info", "iti", "ic", "o", "ix", "ip", "iri", "b", "ri", "io", "si", "ii", "li", "v", "e", "int", "ti", "im", "it", "ini", "zi", "ui", "\u0438", "l", "pi", "u", "y", "ij", "ik", "iu", "hi"], "j": [" iii", " ii", " dj", "json", "next", "uj", "ja", "str", "js", "aj", "p", "name", "di", "jp", "jc", "oj", "z", "bot", "jj", "ix", "o", "pr", "jl", "fr", "br", "b", "f", "J", "bj", " inj", "ji", "kj", "li", "v", "jas", "obj", "adj", "it", "jump", "q", "l", "dj", "item", "y", "k", "op", "ij", "jit"]}}
{"code": "from collections import defaultdict\\n\\nN, K = map(int, input().split())\\n\\nd = {i: [] for i in range(1, N+1)}\\nfor _ in range(K):\\n    candy = int(input())\\n    for i in map(int, input().split()):\\n        d[i].append(candy)\\n\\nprint(list(d.values()).count([]))\\n", "target": "252", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "T", "NC", "GN", "NI", "Na", "Ns", "R", "I", "NA", "L", " n", "NN", "NP", "CN", "NR", "NT", "NH", "V", "NO", "S", "NE", "J", "ND", "Num", "P", "NPR", "NJ", "D", "NB", "MN", "Ni", "NG", "C"], "K": ["M", "NS", "T", "KN", "KY", "KR", "X", "R", "I", "KK", "DK", "V", "KS", "TN", "KC", "NK", "PK", "B", "J", "Q", "SK", "G", "P", "D", "NB", "Y", "MN", "UK", "k", "F", "KI", "Z", "KE", "KING", "C"], "d": ["fd", "n", "ld", "dm", "p", "db", "g", "di", "td", "dh", "r", "w", "c", "m", "created", "dl", "dec", "h", "dt", "done", "f", "b", "df", "t", "dat", "da", "dr", "pd", "v", "de", "ad", "debug", "D", "do", "q", "l", "dd", "did", "k", "data", "dict", "ds", "nd"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "ir", "p", "di", "ib", "ai", "I", "c", "m", "bi", "qi", "yi", "ic", "o", "ip", "iri", "ind", "f", "ri", "io", "si", "li", "ii", "v", "ei", "int", "ti", "oi", "ori", "iy", "im", "zi", "ini", "l", "pi", "phi", "ati", "id", "j", "y", "k", "ij", "ik", "iu"], "_": ["x", " the", " j", "I", "ny", "ix", " x", "key", " __", " each", "ity", "ik", " some", " un", "ac"], "candy": [" cherry", "caly", "gandy", " curry", "mcurry", "cuda", "cruda", "cherry", " cuda", "mcaly", "galy", "crandy", "Caly", "cisco", "gurry", "crurry", "Candy", "mcandy", "curry", "Cuda", "Cisco", "gisco", "Cherry", "Curry", "crherry", "mcisco"]}}
{"code": "from collections import deque\\n\\nK = int(input())\\nqueue = deque([1,2,3,4,5,6,7,8,9])\\n\\nfor i in range(K):\\n    ans = queue.popleft()\\n    x = ans % 10\\n    if x != 0:\\n        queue.append(ans*10 + x - 1)\\n    queue.append(ans*10 + x)\\n    if x != 9:\\n        queue.append(ans*10 + x + 1)\\n\\nprint(ans)\\n\\n#\u89e3\u8aac+\u30b3\u30fc\u30c9\u30ab\u30f3\u30cb\u30f3\u30b0AC", "target": "339", "substitutes": {"K": ["M", "N", "Key", "T", "Max", "KEY", "X", "R", "KK", "Kind", "FK", "CP", "TH", "KS", "V", "KC", "PK", "B", "SK", "Q", "G", "P", "Mask", "VK", "D", "NB", "Y", "OK", "Size", "UK", "Count", "k", "The", "AC", "KI", "Z", "KB"], "queue": ["channel", "next", "Que", "qv", "space", "port", "database", "required", "ued", "loop", "ue", "Queue", "store", "journal", "server", "utils", "email", "batch", "buffer", "process", "wait", "ques", "priority", "pool", "buf", "menu", "force", "memory", "Q", "bench", "published", "grid", "search", "list", "console", "cache", "worker", "qa", "flag", "uf", "dq", "que", "q", "quote", "np", "line", "plot", "forced", "stack", "archive", "sequence", "trace"], "i": [" ii", "n", "p", " j", "iq", "I", "iter", "r", "c", "z", "ix", "ind", "f", "b", "ii", "ti", "im", "it", "q", "id", "j", "y", "k"], "ans": ["ars", "ANS", "ants", "ats", "ians", "ean", "ana", "ais", "atan", "aus", "span", "ros", "us", "san", "sql", "ates", "ns", "vals", "ann", "rans", "man", "anas", "ks", "scan", "ins", "ras", "wan", "ons", "ms", "amps", "annot", "ls", "pan", "vers", "ens", "news", "anc", "cas", "uns", "can", "an", "jas", "oss", "aps", "anes", "des", "plan", "eps", "nan", "cus", "sv", "ran", "ams", "aos", "nas", "vs", "yes", "arts", "os", "lan", "stats", "orts"], "x": ["a", "wx", "n", "xi", "ex", "ci", "xe", "xes", "ux", "g", "xc", "ct", "X", "xa", "ai", "rx", "ext", "re", "w", "c", "ox", "z", "xxxx", "xt", "xml", "ic", "ix", "tx", "act", "ax", "f", "xd", "t", "time", "check", "exp", "v", "e", "fx", "cox", "xy", "xs", "mx", "co", "dx", "inx", "one", "nex", "xx", "l", "yx", "lex", "y", "px", "xp", "xf"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\\nfrom itertools import accumulate, permutations, combinations, product\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10 ** 9 + 7\\n\\nN = INT()\\nab = [LIST() for _ in range(N-1)]\\nc = LIST()\\nc.sort(reverse=True)\\ntree = [[] for _ in range(N)]\\nfor a, b in ab:\\n\ttree[a-1].append(b-1)\\n\ttree[b-1].append(a-1)\\n\\n# start=None\\n# for i in range(N):\\n# \tif len(tree[i]) == 1:\\n# \t\tstart = i\\n# \t\tbreak\\n\\nans = [0]*N\\nq = deque()\\nq.append(0)\\nans[0] = c[0]\\ncnt = 1\\nwhile q:\\n\tn = q.popleft()\\n\tfor node in tree[n]:\\n\t\tif ans[node]:\\n\t\t\tcontinue\\n\t\tans[node] = c[cnt]\\n\t\tcnt += 1\\n\t\tq.append(node)\\nprint(sum(c)-max(c))\\nprint(*ans)\\n", "target": "364", "substitutes": {"n": ["nr", "x", "nt", "d", "p", "g", "i", "sn", "r", "z", "m", "ns", "o", "f", "num", "t", "nb", "na", "v", "nc", "s", "nan", "nu", "nn", "l", "ll", "np", "j", "k", "y", "index"], "_": ["Name", "x", "T", "name", "__", "ml", "ix", "py", "let", "val", "____", "P", "int", "all", "D", "___"], "INF": ["PINEF", "INEF", "INN", "INf", " INEF", "InF", "InEF", "InN", "PINF", "PINN", "PINf", "Inf", " INf", " INN"], "mod": ["max", "ex", "MOD", " Mod", "mult", "Mod", "fun", "scale", "inv", "floor", "prime", "dec", "round", "min", "step", "log", "grow", "fac", "tab", "add", "exp", "orig", "tr", "div", "mag", "base", "cm", "neg"], "N": ["SN", "M", "NS", "T", "NV", "NC", "GN", "NI", "Ns", "R", "I", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NOR", "O", "V", "TN", "NUM", "S", "B", "Q", "G", "ND", "P", "Num", "A", "D", "NB", "Count", "Ni", "K", "F", "Z", "FN", "C"], "ab": ["con", "sb", " AB", "gc", "emb", "ib", "abl", "ai", "abi", "arc", "ABC", "fab", "AB", "pb", "rb", "rab", "Ab", "ob", "abb", "abs", "tab", "bag", "nb", "av", "null", "aps", "ap", "al", "lab", "af", "sa", "abc", "com", "cb", "etc", "ub", "ag", "bs", "ca", "abis", "ac"], "c": ["ce", "lc", "ci", "p", "cd", "xc", "ct", "rc", "r", "tc", "m", "fc", "cur", "cv", "f", "bc", "t", "dc", "v", "e", "nc", "ch", "cc", "abc", "co", "cb", "l", "cl", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "tree": ["mint", "nt", "tre", "lt", "table", "db", "order", "tw", "tip", "ts", "map", "set", "reen", "note", "prime", "window", "bo", "rees", "te", "display", "level", "t", "menu", "out", "forest", "list", "cache", "tower", "directory", "tr", "node", " trees", "ree", "bl", "tmp", "le", "index", "data", "dict", "stack", "root", "temp", "Tree"], "a": ["aq", "sta", "ae", "aj", "p", "ach", "va", "ai", "ak", "i", "w", "r", "ace", "m", "ga", "o", "ea", "pa", "la", "aaa", "act", "f", "t", "alpha", "add", "an", "e", "att", "A", "at", "sa", "af", "ao", "sha", "oa", "au", "aa", "am", "ar", "y", "ya", "ba", "ca", "ac"], "b": ["sb", "x", "p", "db", "g", "i", "blue", "r", "bg", "z", "bd", "m", "bi", "wb", "fb", "rb", "o", "h", "be", "bh", "f", "br", "bc", "t", "gb", "nb", "B", "bb", "v", "bt", "e", "base", "cb", "l", "bp", "u", "j", "y", "bs", "ba", "ca"]}}
{"code": "S = input()\\n\\nans = 0\\nfor c in S:\\n    if c == '+':\\n        ans += 1\\n    else:\\n        ans -= 1\\n\\nprint(ans)", "target": "166", "substitutes": {"S": ["M", "N", "T", "ANS", "BS", "SS", "SB", "X", "I", "R", "L", "Si", "SI", "TS", "CS", "Set", "H", "O", "V", "B", "Q", "G", "P", "A", "E", "s", "SU", "D", "DS", "Y", "SA", "F", "Z", "C", " s"], "ans": ["ars", "ANS", "ants", "ats", "ians", "ean", " means", "eds", "acs", "ai", "missions", "aus", "ros", "lets", "san", " Ans", "ts", "ns", "anus", "ann", "rans", "rs", "mas", "anas", "ks", "offs", "ins", "man", "vers", "ons", "ms", "amps", "ents", "ens", "cons", "an", "posts", "gs", "anks", "users", "aps", "iann", "terms", "s", "ions", "nas", "ams", "aos", "ads", "arts", "cs", "os", "es", "lan", "powers", "said"], "c": ["ec", "a", "lc", "n", "cation", "x", "ci", "p", "unc", "pc", "xc", "ct", "i", " unc", "arc", "r", "chain", "fc", " Ic", "f", "b", "t", "mc", "icc", " ac", "anc", "uc", "conf", "sc", " cis", " calc", "usc", "nc", "cin", " C", "v", " arcs", "abc", " present", "cu", "cs", "oc", "cf", "C", "ac"]}}
{"code": "x = int(input())\\nfor i in range(500):\\n    for j in range(-500, 500):\\n        if i**5 - j**5 == x:\\n            print(i,j)\\n            break\\n    else:\\n        continue\\n    break", "target": "597", "substitutes": {"x": ["n", "xi", "ex", "xe", "p", "xc", "test", "X", "xa", "rx", "w", "c", "ox", "z", "pe", "o", "h", "tx", "ax", "f", "xd", "t", "check", "v", "e", "cox", "xy", "s", "xs", "dx", "q", "xx", "l", "k", "y", "xp", "xf"], "i": ["mi", "ki", "xi", "ia", "ie", "ci", "gi", "ir", "di", "ai", "I", "bi", "ami", "yi", "iti", "ic", "ix", "ip", "ri", "io", "si", "ii", "li", "ori", "int", "ti", "iy", "it", "ini", "ui", "zi", "\u0438", "phi", "pi", "ati", "id", "y", "ij", "iu", "hi"], "j": ["json", "n", "uj", "ja", "js", "aj", "d", "jp", "jc", "oj", "z", "m", "jj", "bi", "o", "jl", "br", "je", "b", "fr", "f", "vol", "J", "bj", "li", "kj", "ji", "v", "jas", "obj", "xy", "it", "q", "l", "dj", "u", "y", "k", "ij"]}}
{"code": "x, y, z = map(int, input().split())\\n\\ncreateNum = 0\\ncreateTime = 0\\n\\nloopCnt = x//y\\ncreateNum = y*loopCnt\\ncreateTime = z*loopCnt\\n\\nremain = x%y\\nif remain != 0:\\n  createTime += z\\n\\nprint(createTime)", "target": "105", "substitutes": {"x": ["wx", "n", "xi", "ex", "xe", "p", "ux", "xc", "X", "xa", "i", "rx", "w", "c", "ox", "m", "xt", "ix", "h", "tx", "ax", "f", "xd", "t", "zx", "v", "e", "fx", "xy", "xs", "mx", "dx", "q", "xx", "l", "yx", "px", "xp", "xf"], "y": ["a", "sy", "ty", "ys", "d", "cy", "i", "oy", "sys", "yo", "c", "ly", "ies", "m", "my", "ny", "yi", "vy", "o", "py", "ye", "yr", "hy", "f", "b", "dy", "t", "yl", "uy", "v", "yn", "ey", "gy", "iy", "xy", "ry", "yt", "Y", "yy", "l", "fy", "xx", "j", "ay", "ym"], "z": ["a", "n", "sw", "d", "hz", "i", "yz", "iz", "c", "zone", "zh", "m", "o", "ez", "h", "zip", "ze", "uz", "t", "time", "cz", "zy", "v", "zer", "nz", "it", "end", "zi", "zo", "q", "l", "j", "tz", "az", "zen", "Z", "zz"], "createNum": ["enterNum", "createdNum", "Createnum", "creationMon", "enterUn", "createUn", " createnum", "enterNUM", "creationNum", "creationUn", "CreateTime", "creationNUM", "createNUM", "enterMon", " createNUM", "creatednum", "createMon", "CreateUn", " createUn", "CreateNum", "createnum", "createdTime", " createMon", "createdUn"], "createTime": ["createTimes", "updateTim", "createdNum", "creationTim", "CreateTim", "CreateRate", "createtime", " createRate", "creationNum", "createRate", "updateOffset", "createdTimes", "CreateTime", " createNet", "updatetime", "createdtime", "createTim", "creationOffset", "createNet", " createTimes", "createdTim", " createtime", "creationNet", "createOffset", " createTim", "CreateTimes", "creationTime", "createdRate", "createdTime", "updateTime", "createdNet", " createOffset"], "loopCnt": ["loopPn", " loopConct", "loopcnc", "loopPct", " loopCNT", " loopCnc", "loopWCNT", "loopConnt", "loopCnc", " loopConnc", "loopCct", "loopCst", "loopcn", "loopWCnt", "loopConct", "LoopCst", "loopWCst", "loopCn", " loopConnt", "loopcnt", "loopcct", "LoopcNT", "loopCNT", " loopCct", "LoopCnt", "loopcNT", "loopConNT", "Loopcnt", " loopConn", "loopcst", "loopPnt", "Loopcst", "loopPnc", "loopConnc", "LoopCNT", "loopConn", " loopCn"], "remain": ["resaining", "RemAIN", "remains", "remained", " remaining", " remained", "resained", "remAIN", "resAIN", "resains", " remAIN", "Remains", "Remain", "remaining", "Remained", " remains", "resain", "Remaining"]}}
{"code": "from collections import defaultdict\\nimport itertools\\nd = defaultdict(int)\\nx='MARCH'\\nfor i in range(5):\\n  d[x[i]]=i+1\\nx=[0]*5\\ndef sub(a,b):\\n  return abs(a[0]-b[0])+abs(a[1]-b[1])\\n\\nH,W,D=map(int,input().split())\\nA=[list(map(int,input().split())) for i in range(H)]\\nN=H*W\\nP=[0]*(N)\\nfor h in range(H):\\n  for w in range(W):\\n    P[A[h][w]-1]=(h,w)\\nX=[]\\nfor d in range(D):\\n  _=[0]+[sub(P[i%N],P[i-D]) for i in range(d+D,N+D,D)]\\n  cumsum = list(itertools.accumulate(_))\\n  X.append(cumsum)\\n\\nQ=int(input())\\nfor q in range(Q):\\n  l,r=map(int,input().split())\\n  l,r=l-1,r-1\\n  g=l%D\\n  if l>r:\\n    r+=N\\n    ans=X[g][-1]-X[g][l//D]\\n    ans+=X[g][r//D]-X[g][0]\\n  else:\\n    ans=X[g][r//D]-X[g][l//D]\\n  \\n  print(ans)", "target": "254", "substitutes": {"d": ["fd", "n", "dm", "p", "di", "dn", "td", "dh", "c", "m", "z", "dl", "DI", "o", "dt", "done", "f", "xd", "dat", "t", "da", "dr", "pid", "pd", "de", "e", "v", "ad", "s", "dx", "dq", "do", "size", "dot", "dd", "sd", "did", "id", "u", "j", "y", "k", "dict", "ds", "nd"], "x": ["wx", "n", "xi", "ex", "xe", "p", "xes", "xc", "ct", "xa", "rx", "ai", "c", "ox", "z", "m", "xt", "ix", "o", "tx", "ax", "t", "v", "e", "an", "xy", "s", "xs", "mx", "dx", "xx", "id", "k", "y", "px", "index", "xf"], "i": ["mi", "n", "xi", "ia", "ie", "ci", "ir", "p", "di", "ai", "I", "c", "m", "z", "yi", "ic", "o", "ip", "ind", "f", "t", "ri", "si", "ii", "li", "v", "int", "ti", "im", "it", "zi", "ini", "ui", "phi", "pi", "il", "u", "id", "j", "y", "ij", "iu", "hi"], "a": ["arg", "sta", "ae", "ab", "aj", "p", "va", "apt", "c", "ma", "el", "ea", "aaa", "f", "alpha", "bb", "an", "att", "al", "at", "sa", "af", "abc", "app", "ed", "au", "aa", "am", "ar", "ba", "ca", "ac"], "b": ["bis", "bu", "sb", "ab", "bar", "db", "ib", "bg", "c", "z", "bi", "fb", "rb", "by", "be", "ob", "f", "br", "bc", "B", "bb", "v", "e", "obj", "eb", "app", "base", "cb", "bp", "u", "bin", "j", "y", "bs", "ba"], "H": ["M", "CH", "Eh", "HD", "His", "HL", "HS", "HE", "R", "I", "L", "Ha", "HO", "HI", "NH", "HR", "DH", "TH", "V", "HH", "Wh", "B", "G", "HA", "OH", "Han", "HC", "MH", "Y", "HB", "High", "U", "HT", "Hi", "He"], "W": ["WT", "WC", "M", "We", "T", "WI", "Win", "NW", "WP", "R", "I", "L", "RW", "WW", "VW", "WH", "BW", "V", "WA", "Width", "Wh", "B", "SW", "G", "WB", "Wa", "WD", "WM", "Y", "WE", "DW", "K", "WS"], "D": ["M", "DL", "T", "JD", "DO", "DIR", "Default", "R", "DE", "I", "L", "Di", "DATA", "DR", "DI", "DH", "O", "V", "S", "Do", "DA", "DP", "B", "G", "DD", "DC", "DN", "DT", "Dir", "ID", "E", "Ds", "WD", "DS", "Den", "DM", "Y", "PD", "DF", "Date", "Size", "DW", "DB", "U", "K", "F", "Z", "C", "Data"], "A": ["M", "T", "Ax", "Am", "Al", "An", "Ar", "Alpha", "AU", "AT", "R", "I", "L", "AB", "App", "AA", "LA", "As", "V", "AR", "S", "B", "G", "This", "AP", "At", "AM", "Y", "The", "AC", "C"], "N": ["n", "M", "NS", "T", "NL", "NC", "GN", "NI", "NW", "Ns", "R", "I", "NA", "L", "NM", " n", "NN", "NR", "NT", "NH", "O", "V", "Z", "S", "B", "J", "G", "ND", "DN", "E", "NB", "Y", "MN", "Ni", "K", "F", "AN", "TN", "C"], "P": ["M", "T", "p", "PL", "TP", "I", "R", "L", "PS", "Pay", "PT", "PA", "O", "V", "CP", "PK", "S", "Pro", "B", "J", "G", "Pool", "Part", "AP", "E", "PP", "Path", "Ps", "PO", "Y", "K", "Z", "LP", "C"], "h": ["ht", "n", "th", "ith", "kh", "p", "ach", "hal", "hs", "c", "z", "m", "ih", "zh", "rh", "http", "ah", "hl", "gh", "t", "v", "oh", "hw", "ha", "he", "hr", "hd", "ho", "hh", "u", "j", "y", "k", "hi", "hm"], "w": ["wx", "n", "ht", "sw", "p", "wy", "wh", "we", "wt", "c", "z", "m", "wb", "wr", "iw", "rw", "wi", "wd", "kw", "wo", "wal", "word", "ew", "wl", "wid", "t", "win", "wa", "wp", "v", "width", "ws", "s", "nw", "wk", "u", "k", "y"], "X": ["Example", "MAX", "IX", "T", "Ax", "List", "Control", "Int", "Check", "Max", "TX", "Right", "AT", "R", "EX", "L", "Content", "Result", "MX", "Map", "String", "TS", "UX", "OX", "ICE", "Form", "Time", "Ex", "ZX", "XY", "CT", "V", "Cross", "XP", "S", "XM", "DX", "J", "ML", "G", "Tx", "JSON", "Fixed", "FX", "E", "XX", "XT", "XXX", "Matrix", "Test", "Y", "HTTP", "XL", "Array", "Z", "Data"], "_": ["n", "M", "T", "nt", "p", "TX", "IP", "R", "L", "I", "__", "Pat", "V", "t", "J", "G", "___", "Y", "OT"], "cumsum": [" cascsum", "Cumump", "Cumume", "covume", "covump", " cascum", "covsum", "cumup", "Cumsump", "cumsume", "Cumum", "Cumsum", " cumsumer", "cascume", " cumssum", "Cumssum", "cascsum", "cupsum", "cumssum", "cascum", " cascup", "cumumer", "cascumer", "cupsumer", "covum", "cumsup", " cascumer", "cupsup", "cupssum", "cumume", " cumsup", "cumump", "cascump", "cumum", "Cumsume", "cascup", "cumsumer", "cumsump"], "Q": ["Que", "M", "IX", "HQ", "T", "MQ", "I", "R", "L", "Cl", "O", "V", "UE", "S", "B", "J", "G", "Y", "Qu", "Dr", "IQ", "U", "K", "F", "Z", "QU", "C"], "q": ["n", "p", "ue", "iq", "qu", "c", "ox", "z", "o", "f", "v", "qq", "ch", "dq", "ll", "u", "j", "y", "k", "ry"], "l": ["lc", "n", "tl", "kl", "ln", "lt", "ld", "p", "lb", "L", "c", "m", "ml", "dl", "el", "o", "nl", "sl", "la", "ls", "jl", "f", "t", " L", "hl", "len", "rl", "lo", "lp", "li", "v", "al", "lang", "lr", "ll", "le", "pl", "u", "lin"], "r": ["nr", "n", "sr", "mr", "rr", "ro", "rg", "ra", "ir", "p", "R", "rc", "re", "L", "c", "m", "rh", "rs", "rb", "res", "o", "pr", "vr", "rar", "right", " R", "f", "t", "ri", "br", "rl", "dr", "v", "s", "ur", "rt", "lr", "ran", "ar", "u", "j", "range", "reg", "rn", "er", "rd"], "g": ["gg", "n", "gu", "rg", "gi", "gn", " G", "p", "gc", "ang", "c", "z", "m", "ig", "og", "ger", "ga", "parent", "gt", "gp", "o", "gm", "sg", "ls", "go", "tg", "f", "t", "gh", "G", "v", "gs", "ged", "msg", "gr", "eg", "s", "group", "erg", "u", "reg", "y", "j", "er", "ag", "mg", "pg"], "ans": ["ones", "ars", "ANS", "ials", "ants", "ians", "ats", "ana", "names", " means", "outs", "aus", "ros", "us", "aned", " Ans", "ates", "ns", "ann", "rans", "ongs", "rs", "anas", "ks", "offs", "ins", "ras", "ons", "ikes", "angs", "ms", "ls", "amps", "ents", "ations", "ots", "cas", "cons", "uns", "results", "an", "rors", "Cons", "posts", "anks", "anes", "oss", "aps", "rss", "ays", "s", "nz", "xs", "nan", "nas", "ands", "rates", "arts", "cs", "es", "ds", "ps"]}}
{"code": "while True:\\n    n, x = map(int, input().split())\\n    if n == x == 0:\\n        break\\n    max_a = min(x - 3, n)\\n    min_a = max(x // 3 + 1, 3)\\n    cnt = 0\\n    for i in range(min_a, max_a + 1):\\n        max_b = min(i - 1, x - i - 1)\\n        min_b = (x - i) // 2 + 1\\n        cnt += (max_b - min_b + 1)\\n    print(cnt)", "target": "398", "substitutes": {"n": ["a", "nr", "N", "max", "nt", "d", "p", "ne", "cn", "g", "sn", "r", "c", "w", "m", "z", "ns", "min", "nl", "h", "b", "num", "t", "nb", "no", "mn", "na", "v", "nc", "new", "nu", "nw", "nn", "l", "number", "np", " N", "ng", "j", "y", "k"], "x": ["a", "wx", "xi", "ex", "max", "any", "xe", "d", "p", "on", "g", "xc", "xa", "X", "rx", "c", "ox", "z", "m", "xt", "xml", "input", "ctx", "ix", "h", "tx", "ax", "f", "b", "t", "check", "v", "e", "xy", "xs", "mx", "dx", "xx", "l", "yes", "j", "y", "px", "index", "xp", "xf"], "max_a": ["min_A", "max2a", "max_aaa", "max____A", "min_an", "max2an", " max_aaa", "max____aaa", " max_A", "max2A", "max____a", "max_A", "max_an", "max____b", "max2b"], "min_a": ["min_A", "min23ba", "max_ar", "min_ao", "mean_a", "min23a", "min23ao", "meanpleao", "min64b", "minplea", "min2a", "min67a", "min64A", "min67ao", "min67app", "min2A", "mean_ao", "mean_app", "meanpleba", "mean_ba", "minpleapp", "max_A", "minpleao", "min64a", "min_ba", "min23app", "meanplea", "minpleba", "min2ar", "min64ar", "meanpleapp", "min_app", "min67ba", "min_ar", "min2b"], "cnt": ["ecnt", "secct", "Cpt", " cth", "ctst", "cct", "sectr", "Ctr", "ctpt", "Cth", "cth", "ctr", "count", "secnt", "ecct", " cct", "ctld", "ecth", "ctnt", " cld", "Cct", "cpt", " count", "cst", "ecount", "cld", "Cld", "Cnt", " cpt", "Count", " cst", " ctr", "secpt", "Cst"], "i": ["a", "mi", "xi", "ite", "gi", "p", "di", "ai", "I", "c", "m", "bi", "info", "ic", "ix", "o", "ip", "ind", "f", "b", "ri", "si", "ii", "li", "v", "e", "int", "ti", "oi", "s", "it", "zi", "ini", "q", "pi", "u", "id", "j", "y", "index", "ij", "ik", "iu", "hi"], "max_b": [" max2B", "maxfulB", "maxful2", " max_B", " max_2", "max22", " max_bb", "maxfuli", "maxfulb", "max_2", "max_i", " max22", "max2i", " max2i", "max_bb", "max_B", " max2b", " max_i", "max2b", "max2B"], "min_b": ["minvalbi", "minfula", "minfulb", "max_bi", "minableab", "Min_a", "minvalB", "minablea", "minvalb", "max_bs", "min_bs", "Min_b", "Min_rb", "minfulab", "minableb", "min_bi", "min_B", "Min_ab", "max_B", "minvalbs", "minfulrb", "min_ab", "minablerb", "min_rb"]}}
{"code": "\\ndef resolve():\\n    # \u9054\u6210\u30b9\u30b3\u30a2\u3092\u6c7a\u3081\u308b\\n    # \u4fee\u884c\u56de\u6570\u304cK\u4ee5\u4e0b\u3092\u9054\u6210\u3067\u304d\u308b\u30b9\u30b3\u30a2\u3092\u4e8c\u5206\u63a2\u7d22\\n    def check(X):\\n        cnt = 0\\n        for i in range(N):\\n            a = X // F[i]\\n            if a < A[i]:  # \u4fee\u884c\u3092\u3057\u3066\u30b9\u30b3\u30a2\u3092\u6700\u5c0f\u5316\u3059\u308b\\n                cnt += A[i] - a\\n        return cnt <= K\\n\\n    N, K = map(int, input().split())\\n    A = sorted(map(int, input().split()))\\n    F = sorted(map(int, input().split()), reverse=True)\\n\\n    ok = 10 ** 12 # \u6700\u5927\u30b9\u30b3\u30a2 a: 10**6 * x:10**6\\n    ng = -1\\n    while ok - ng > 1:\\n        X = (ok + ng) // 2\\n        if check(X):\\n            ok = X\\n        else:\\n            ng = X\\n\\n    print(ok)\\n\\n\\nif __name__ == \"__main__\":\\n    resolve()\\n", "target": "633", "substitutes": {}}
{"code": "n=int(input())\\ns=input().split(' ')\\n\\nprint(' '.join(s))\\n\\nfor i in range(1,n):\\n\tv=int(s[i])\\n\tj=i-1\\n\twhile j>=0 and int(s[j])>v:\\n\t\ts[j+1]=s[j]\\n\t\tj-=1\\n\ts[j+1]=str(v)\\n\tprint(' '.join(s))\\n", "target": "217", "substitutes": {"n": ["N", "x", "net", "nt", "ni", "ln", "d", "p", "en", "ne", "cn", "g", "sn", "w", "c", "m", "z", "ns", "nl", "f", "num", "t", "nb", "no", "mn", "na", "an", "nc", "nu", "nn", "q", "l", "np", "network", "k", "init"], "s": ["a", "sb", "ys", "seconds", "prints", "aws", "ats", "js", "p", "eds", "g", "fs", "r", "hs", "w", "c", "ts", "m", "z", "ns", "mos", "details", "rs", "ses", "ins", "ms", "ls", "ids", "abs", "b", "t", "ss", "S", "parts", "its", "tes", "states", "comments", "strings", "gs", "sq", "e", "ws", "sv", "xs", "csv", "sts", "l", "vs", "q", "cs", "os", "es", "stats", "qs", "ds", "ps", "bs"], "i": ["mi", "xi", "x", "ia", "ie", "ci", "gi", "di", "ai", "I", "c", "z", "m", "bi", "ic", "ix", "ip", "ind", "ri", "si", "li", "key", "ji", "ii", "ori", "ti", "int", "im", "it", "zi", "ini", "q", "pi", "id", "k", "index", "ij", "ik"], "v": ["qv", "x", "vd", "gi", "vert", "p", "vi", "tv", "va", "value", "r", "uv", "m", "vis", "ev", "o", "vet", "val", "V", "cv", "f", "vc", "t", "vol", "iv", "ver", "av", "nv", "lv", "vm", "conv", "sv", "ve", "q", "vs", "l", "pi", "u", "vt", "y", "version"], "j": ["next", "json", "x", "uj", "ja", "js", "aj", "p", "d", "g", "jp", "job", "oj", "jc", "z", "m", "jj", "bi", "ju", "o", "h", "pr", "ind", "jl", "br", "b", "fr", "t", "pt", "J", "bj", "key", "ji", "kj", "li", "obj", "adj", "it", "jump", "end", "q", "l", "dj", "y", "k", "jit", "ij", "er", "last"]}}
{"code": "\\n\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\n\\ndef main():\\n    mod=10**9+7\\n    N=I()\\n    S=input()\\n    bk=S.count(\"#\")\\n    ans=N-bk\\n    w=0\\n    for i in range(N):#i\u756a\u76ee\u307e\u3067\u767d\uff0ci+1\u4ee5\u964d\u9ed2\\n        if S[i]==\"#\":\\n            bk-=1\\n        else:\\n            w+=1\\n        temp=(i+1-w)+(N-i-1-bk)\\n        ans=min(ans,temp)\\n    print(ans)\\n        \\n\\nmain()\\n", "target": "187", "substitutes": {"mod": ["max", "x", "MOD", "aug", "d", "p", "g", "mult", "ai", "Mod", "fun", "r", "m", "prime", "dec", "min", "mask", "fac", "len", "add", "base", "pi", "reg", "j", "k", "cm", "mode", "init"], "N": ["SN", "CNN", "n", "M", "NS", "T", "NC", "NI", "Ns", "R", "I", "L", "NA", "NM", "NN", "NP", "CN", "NR", "NT", "NH", "H", "NF", "O", "V", "Z", "B", "J", "Q", "ND", "P", "A", "Sn", "D", "NB", "Y", "MN", "Ni", "K", "TN", "FN", "C"], "S": ["SN", "M", "NS", "T", "SEC", "SF", "Socket", "SH", "SS", "SB", "R", "I", "X", "L", "SO", "JS", "Si", "SI", "CS", "SM", "H", "SQL", "V", "B", "G", "P", "A", "US", "s", "SP", "SU", "Y", "SA", "U", "F", "SR", "C"], "bk": [" bkid", "bck", "bek", "bbak", "beak", "bak", " bK", "bekk", " bak", "Bk", "BK", "beck", " bkk", "bbck", "chk", "bkk", " bkn", "chK", "bbk", "Bkn", "bbkk", "Bkid", " bck", "chkn", "bkn", "bkid", "chkid", "bK"], "ans": ["kn", "ae", "ab", "ne", "ows", "ak", "aus", "us", "sn", "ns", "ann", "rs", "ks", "ins", "ms", "ls", "ots", "na", "an", "tn", "un", "oos", "eps", "au", "aw", "AN", "olds", "ac"], "w": ["sw", "wn", "p", " W", "g", "wh", "we", "wt", "weight", "z", "wb", "wi", "rw", "W", "kw", "wd", "h", "wl", "wid", "win", "wa", "wp", "fw", "v", "width", "ws", "nw", "wk"], "i": [" ii", "n", "x", "gi", "p", " j", "di", "ai", "I", "r", "c", "bi", "ip", "f", "b", "io", "li", "ii", "e", "ti", "ini", "zi", "q", "l", "pi", "j", "y", "k"]}}
{"code": "n, m, k = list(map(int, input().split()))\\n\\n# \u4e8c\u9805\u4fc2\u6570\u3092 10^9+7 \u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u6c42\u3081\u308b\\n# https://qiita.com/drken/items/3b4fdf0a78e7a138cd9a#5-%E4%BA%8C%E9%A0%85%E4%BF%82%E6%95%B0-ncr\\n# https://qiita.com/Yaruki00/items/fd1fc269ff7fe40d09a6\\n# https://www.hamayanhamayan.com/entry/2018/06/06/210256\\n\\nmod = 10**9 + 7\\n\\n# x ** a \u3092mod\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u3001O(log(a))\u6642\u9593\u3067\u6c42\u3081\u308b\u3002\\ndef power(x, a):\\n\tif a == 0:\\n\t\treturn 1\\n\telif a == 1:\\n\t\treturn x\\n\telif a % 2 == 0:\\n\t\treturn power(x, a//2) **2 % mod\\n\telse:\\n\t\treturn power(x, a//2) **2 * x % mod\\n\\n# x\u306e\u9006\u5143\u3092\u6c42\u3081\u308b\u3002\u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\u3088\u308a\u3001 x \u306e\u9006\u5143\u306f x ^ (mod - 2) \u306b\u7b49\u3057\u3044\u3002\u8a08\u7b97\u6642\u9593\u306fO(log(mod))\u7a0b\u5ea6\u3002\\n# https://qiita.com/Yaruki00/items/fd1fc269ff7fe40d09a6\\ndef modinv(x):\\n\treturn power(x, mod-2)\\n\\n# \u4e8c\u9805\u4fc2\u6570\u306e\u5de6\u5074\u306e\u6570\u5b57\u306e\u6700\u5927\u5024\u3092 max_len\u3000\u3068\u3059\u308b\u3002n\u3068\u304b\u3060\u3068\u4ed6\u306e\u5909\u6570\u3068\u88ab\u308a\u305d\u3046\u306a\u306e\u3067\u3002\\n# factori_table = [1, 1, 2, 6, 24, 120, ...] \u8981\u306f factori_table[n] = n!\\n# \u8a08\u7b97\u6642\u9593\u306fO(max_len * log(mod))\\n\\nmax_len = n * m #\u9069\u5b9c\u5909\u66f4\u3059\u308b\\n\\nfactori_table = [1] * (max_len + 1)\\nfactori_inv_table = [1] * (max_len + 1)\\nfor i in range(1, max_len + 1):\\n\tfactori_table[i] = factori_table[i-1] * (i) % mod\\n\\n# \tfactori_inv_table[i] = modinv(factori_table[i])\\n#\t\u2191\u304c\u9045\u3044\u306e\u3067\u3001\u4f7f\u3046\u3068\u3053\u308d\u3060\u3051\u9006\u5143\u3092\u8a08\u7b97\u3059\u308b\u2193\\nfor i in [k-2, n*m-k]:\\n\tfactori_inv_table[i] = modinv(factori_table[i])\\n\\ndef binomial_coefficients(n, k):\\n\t# n! / (k! * (n-k)! )\\n\treturn factori_table[n] * factori_inv_table[k] * factori_inv_table[n-k]\\n\\nans_1 = 0\\nfor i in range(n):\\n\tans_1 += i * m**2 * (n-i) % mod\\nfor i in range(m):\\n\tans_1 += i * n**2 * (m-i) % mod\\n\\nprint(binomial_coefficients(n*m-2, k-2) * ans_1 % mod)\\n", "target": "341", "substitutes": {"n": ["N", "x", "d", "p", "g", "i", "w", "sn", "r", "c", "z", "ns", "o", "h", "f", "b", "fn", "num", "t", "nb", "v", "s", "nn", "l", "q", "j", "y"], "m": ["mi", "km", "M", "mr", "dm", "p", "mm", "mu", "mo", "i", "r", "w", "c", "em", " M", "ms", "f", "b", "t", "mc", "mn", "v", "dim", "q", "l", "cm"], "k": ["km", "kn", "x", "kl", "p", "i", "kid", "ke", "w", "c", "ks", "ko", "kind", "tk", "t", "v", " K", "ku", "q", "u", "kk", "j", "ka", "K", "ik", "sk"]}}
{"code": "N,K=map(int,input().split())\\nmod=1000000007\\npath=[[] for i in range(N)]\\nfor i in range(N-1):\\n  a,b=map(int,input().split())\\n  a=a-1\\n  b=b-1\\n  path[a].append(b)\\n  path[b].append(a)\\n#print(path)\\n  \\nabc=[False for i in range(N)] #0\u306a\u3089\u307e\u3060\u5857\u3063\u3066\u306a\u3044\\n \\nabc[0]=True\\ncnt=0\\nans=K%mod\\nnx=[]\\nfor i in range(len(path[0])):\\n  child=path[0][i]\\n  if abc[child]:\\n    continue\\n  ans=ans*(K-1-cnt)\\n  ans=ans%mod\\n  cnt=cnt+1\\n  abc[child]=True\\n  nx.append(child)\\nwhile len(nx)>0:\\n  a=nx.pop()\\n  cnt=0\\n  for i in range(len(path[a])):\\n    child=path[a][i]\\n    if abc[child]:\\n      continue\\n    ans=ans*(K-2-cnt)\\n    ans=ans%mod\\n    cnt=cnt+1\\n    abc[child]=True\\n    nx.append(child)\\n      \\nprint(ans%mod)", "target": "734", "substitutes": {"N": ["CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "X", "I", "R", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "V", "No", "S", "NE", "B", "J", "Q", "G", "ND", "P", "A", "E", "D", "NB", "MN", "Ni", "F", "TN", "C"], "K": ["M", "T", "R", "X", "I", "NP", "O", "V", "S", "B", "J", "Q", "G", "P", "A", "E", "Mask", "D", "NB", "Y", "OK", "k", "F", "KI", "Z", "C"], "mod": ["cmp", "max", "MOD", "offset", " Mod", "Mod", "fun", "AD", "m", "prime", "H", "mask", "num", "time", "len", "ver", "Q", "add", "ID", "E", "times", "base", "OK", "j", "mode", "Z", "sum"], "path": ["history", "next", "ath", "n", "policy", "pattern", "context", "p", "dir", "name", "cycle", "g", "test", "ct", "left", "w", "length", "m", "map", "prefix", "prime", "shape", "step", "tree", "distance", "log", "trace", "pt", "depth", "inner", "key", "out", "exp", "list", "poly", "steps", "ch", "Path", "print", "phi", "progress", "pi", "link", "index", "data", "entry", "walk", "PATH", "prop", "chain"], "i": [" ii", "ki", "n", "xi", "x", "ia", "ite", "ci", "gi", "p", "di", "ai", "I", "ind", "f", "ii", "li", "ji", "e", "ti", "iy", "im", "it", "ini", "zi", "pi", "il", "id", "k", "fi", "ik"], "a": ["aq", "n", "ia", "sta", "ae", "ab", "aff", "aj", "era", "p", "ach", "va", "xa", "ak", "ai", "c", "ma", "ami", "el", "eas", "ga", "ea", "la", "pa", "aaa", "act", "t", "ova", "art", "da", "apa", "ee", "an", "e", "all", "A", "at", "sa", "app", "au", "oa", "aa", "l", "ar", "area", "ba", "ca", "ac"], "b": ["bis", "n", "sb", "ab", "d", "p", "db", "g", "ib", "blue", "r", "c", "m", "z", "bi", "wb", "fb", "rb", "mb", "be", "ob", "f", "br", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "s", "erb", "eb", "xb", "bl", "cb", "l", "bp", "j", "y", "bs", "ba"]}}
{"code": "n=int(input())\\na=list(map(lambda x:int(x),input().split()))\\ncnt=0\\ncnt2=0\\nfor i in a:\\n    if i%4==0:\\n        cnt+=1\\n    if i%4!=0 and i%2==0:\\n        cnt2+=1\\nif (2*cnt+cnt2>=n and cnt2>0) or (cnt2==0 and 2*cnt+1>=n):\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "612", "substitutes": {"n": ["N", "x", "nt", "ni", "gn", "d", "p", "ne", "g", "sn", "w", "c", "r", "z", "m", "ns", "o", "nl", "h", "f", "b", "num", "t", "len", "nb", "mn", "na", "v", "e", "nc", "s", "nan", "nu", "nn", "l", "number", "np", "j", "k", "y"], "a": ["asia", "x", "ia", "to", "ae", "ab", "ta", "p", "va", "ai", "xa", "c", "ma", "z", "set", "ea", "la", "aaa", "ax", "b", "t", "auto", "apa", "out", "an", "all", "A", "ap", "at", "sa", "ao", "au", "oa", "aa", "array", "area", "ba", "ca"], "cnt": ["cnd", "Cret", "lcret", "account", "cot", "cont", " crand", "acct", "cct", "ccount", "cret", "lcount", "lcnt", " cont", "acot", "Ccount", "acnt", "lcnd", "scnt", "scpt", "count", " ccount", "lcont", "ctot", " cct", "lcpt", "scnd", "ctnt", "ctrand", "crand", " cot", "Cct", "cpt", " count", "Cot", "scont", "Cnt", "Count", " cret", " cpt", "ctct", "Crand", " cnd", "lcct"], "cnt2": [" cct2", "cnt4", "cpt2", "cnbtwo", "cnc2", "cpt1", "cgt1", "cgttwo", "crt2", " cntlet", "cnc1", " cnt5", "cgt2", "cct2", "cnz5", "cnb4", " cnttwo", " cNT2", "Cnt3", "cnttwo", "cgt4", "cntlet", "counter102", "Cnt2", " cgt2", "counter5", "crt1", "cnt102", "cct3", " cgt4", " cNT102", " cNTlet", "cnz2", "cnt3", "cot2", " cnt102", "cpt3", "crt4", "cct1", " cgt1", "tcot1", "cNTlet", "cnzlet", " cnt4", "Cnt1", "cNT5", "tcot2", " ccttwo", "Cot1", "cct4", "tcnt2", "Cot2", "cot1", " cNT5", " cnt1", "cnt1", "Cot3", "counter2", "cNT102", "counterlet", "ccttwo", "cot3", "tcnt1", "cnb2", " cct4", "cNT2", "cnz102", "cnt5"], "i": ["\u00ed", "ki", "xi", "x", "ia", "ci", "gi", "p", "di", "ai", "I", "aci", "c", "z", "ami", " di", "yi", "ic", "o", "ix", " bi", "ici", "t", "si", "li", "ii", "ei", "ori", "ti", "oi", "it", "ini", "zi", "ui", "\u0438", "phi", "ati", "pi", "l", "id", "ij", "iu", "Xi"]}}
{"code": "from collections import deque\\n\\ns = list(input())\\nQ = int(input())\\nr = False\\n\\nq = deque(s)\\nfor _ in range(Q):\\n    query = list(map(str, input().split()))\\n    if query[0] == '1':\\n        r = not r\\n    else:\\n        f,c = query[1],query[2]\\n        if f == '1':\\n            if not r:\\n                q.appendleft(c)\\n            else:\\n                q.append(c)\\n        else:\\n            if not r:\\n                q.append(c)\\n            else:\\n                q.appendleft(c)\\n\\nans = list(q)\\nif r: ans = ans[::-1]\\nprint(''.join(ans))\\n", "target": "292", "substitutes": {"s": ["ars", "a", "n", "ys", "ats", "js", "p", "g", "i", "fs", "ts", "m", "ns", "ies", "rs", "ses", "ins", "ms", "ls", "abs", "b", "t", "S", "irs", "ss", "parts", "its", "gs", "sq", "sa", "ims", "xs", "ads", "cs", "os", "es", " ls", "qs", "ds", "ps", " inputs"], "Q": ["Que", "M", "N", "IX", "T", "MQ", "X", "R", "I", "L", "H", "W", "Query", "V", "UE", "S", "B", "J", "G", "P", "Num", "A", "D", "Y", "Count", "Qu", "IQ", "K", "F", "Z", "QU", "C"], "r": ["a", "nr", "n", "mr", "sr", "race", "kr", "rr", "err", "ro", "ir", "d", "p", "g", "R", "rc", "i", "re", "w", "m", "z", "rs", "rb", "res", "o", "h", "pr", "result", "rar", "fr", "b", "right", "br", "t", "valid", "dr", "e", "al", "at", "ur", "gr", "rt", "lr", "hr", "ran", "l", "ar", "u", "error", "j", "er", "range", "reg", "cr", "rate", "adr", "ry", "rd"], "q": ["aq", "ck", "n", "pkg", "sh", "queue", "ql", "resh", "d", "p", "fresh", "ue", "g", "qu", "iq", "qt", "w", "z", "ns", "ic", "h", "ms", "quick", "b", "t", "quit", "out", "check", "v", "sq", "gs", "qq", "eq", "qa", "ch", "qual", "needed", "dq", "l", "ll", "que", "u", "ent", "quest", "y", "j", "qs", "pp", "quer"], "_": ["x", " val", " y", " j", " pre", " g", " __", " you", " p"], "query": ["content", "open", "find", "con", "n", "complete", "sh", "gate", "body", "script", "call", "ql", "str", "select", "match", "view", "spec", "g", "qu", "test", "chain", "scale", "map", "unit", "info", "prime", "scan", "Query", "go", "eries", "transform", "form", "spe", "parse", "check", "exp", "sq", "filter", "final", "search", "when", "execute", "sol", "co", "clean", "see", "ve", "command", "quest", "index", "se", "sort", "join"], "f": ["n", "x", "bf", "d", "p", "g", "i", "sf", "w", "z", "m", "fc", "fb", "o", "h", "fa", "fr", "b", "t", "fe", "fn", "fac", "df", "fo", "fl", "ff", "v", "e", "tf", "l", "fg", "j", "fi", "F", "cf", "ft", "field"], "c": ["content", "ce", "lc", "n", "con", "x", "cat", "ac", "gc", "d", "p", "cont", "g", "ct", "rc", "i", "tc", "m", "z", "fc", "o", "col", "h", "cur", "b", "t", "dc", "mc", "conf", "e", "nc", "cin", "cos", "cp", "cc", "com", "co", "cu", "l", "cb", "etc", "cs", "cm", "cr", "cf", "ca", "C", "chain"], "ans": ["ars", "ys", "ANS", "ians", "ats", "ants", "names", "eds", "ai", "aus", "ros", "asks", "lines", "aned", " Ans", "ns", "vals", "ann", "rans", "rs", "ks", "ins", "ras", "vers", "ons", "ms", "amps", "angs", "ls", "rets", "ents", "ens", "anc", "uns", "an", "rors", "anks", "aps", "anes", "eps", "idents", "ions", "ran", "cs", "arts", "os", "qs", "ds", "ps"]}}
{"code": "n=int(input())\\na=0\\nb=0\\nc=0\\nd=0\\nfor i in range(n):\\n  S=input()\\n  for i in range(len(S)-1):\\n    if S[i]==\"A\" and S[i+1]==\"B\":\\n      c=c+1\\n  if S[0]==\"B\":\\n    b=b+1\\n  if S[-1]==\"A\":\\n    a=a+1\\n  if S[0]==\"B\" and S[-1]==\"A\":\\n    d=d+1\\nif a==b and b==d and a!=0:\\n  print(c+min(a,b)-1)\\nelse:\\n  print(c+min(a,b))", "target": "456", "substitutes": {"n": ["nr", "N", "nt", "ln", "p", "ne", "g", "sn", "r", "m", "z", "ns", "o", "nl", "f", "num", "t", "nia", "len", "nb", "no", "na", "v", "nc", "s", "nan", "nu", "nw", "size", "q", "l", "nn", "np", "j"], "a": ["aq", "x", "ae", "ab", "era", "p", "aj", "ta", "ach", "g", "va", "ai", "xa", "r", "apt", "ma", "m", "ata", "eas", "ga", "o", "ea", "la", "aaa", "h", "admin", "act", "f", "t", "alpha", "art", "da", "apa", "na", "an", "v", "e", "ad", "all", "A", "ap", "al", "att", "at", "s", "sa", "af", "ao", "app", "oa", "au", "aa", "l", "ar", "u", "area", "ba", "ca", "ac"], "b": ["sb", "bf", "ab", "p", "db", "g", "ib", "r", "m", "z", " B", "bd", "wb", "bi", "fb", "rb", "by", "o", "h", "be", "ob", "bh", "br", "f", "bc", "t", "gb", "nb", "B", "bb", "v", "bt", "e", "al", "s", "xb", "eb", "cb", "l", "bp", "u", "j", "y", "bs", "ba", "back"], "c": ["ce", "lc", "x", "ci", "gc", "p", "unc", "cd", "g", "cn", "ct", "r", "tc", "m", "z", "o", "h", "cur", "f", "t", "dc", "conf", "e", "v", "cin", "cp", "s", "cc", "co", "cb", "cu", "l", "u", "cs", "k", "y", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["x", "dos", "p", "db", "dir", "cd", "g", "di", "dn", "td", "dh", "r", "w", "m", "bd", "z", "o", "h", "dt", "f", "df", "t", "dc", "da", "dr", "v", "e", "de", "ad", "s", "dp", "dx", "D", "do", "dis", "l", "dd", "u", "j", "k", "ds"], "i": ["mi", "ki", "xi", "x", "ia", "ci", "gi", "p", "di", "ai", "I", "iter", "z", "m", "bi", "yi", "ic", "ix", "ip", "ind", "t", "ri", "si", "li", "ii", "ji", "ei", "e", "ti", "iy", "im", "it", "ini", "zi", "ui", "phi", "pi", "l", "id", "j", "y", "k", "ij", "ik", "index", "iu", "hi"], "S": ["M", "N", "NS", "T", "SEC", "SF", "SH", "ES", "Series", "BS", "SS", "Sl", "SB", "SL", "I", "R", "L", "RS", "JS", "Si", "SO", "PS", "VS", "SI", "CS", "TS", "SM", "OS", "H", "GS", "V", "SQL", "IS", "AS", "B", "Q", "G", "SK", "P", "SSL", "SE", "A", "E", "s", "SU", "SP", "D", "DS", "SA", "F", "WS", "SR", "Z", "C"]}}
{"code": "H = int(input())\\ncount = 0\\nwhile H > 1:\\n  H = H // 2\\n  count += 1\\nprint(2**(count+1)-1)", "target": "153", "substitutes": {"H": ["M", "N", "CH", "HQ", "T", "HM", "HP", "His", "HS", "HL", "HE", "X", "I", "L", "HO", "HI", "WH", "h", "HR", "V", "Hamilton", "TH", "HH", "B", "J", "Q", "G", "HF", "HA", "P", "A", "OH", "Host", "D", "HC", "MH", "HTTP", "Count", "HB", "High", "K", "F", "HT", "He", "C"], "count": ["history", "next", "find", "n", "state", "match", "loop", "name", "child", "cycle", "test", "code", "iter", "long", "ount", "start", "length", "c", "report", "weight", "current", "total", "mount", "second", "h", "result", "ind", "ctr", "num", "t", "nb", "frequency", "amount", "follow", "check", "cache", "each", "now", "flag", "first", "found", "group", "size", "counter", "number", "handle", "Count", "index", "last", "C", "sum"]}}
{"code": "def solve():\\n    n, k = map(int, input().split())\\n    if n % k == 0:\\n        print(0)\\n    else:\\n        print(1)\\n\\n\\nif __name__ == '__main__':\\n    solve()\\n", "target": "626", "substitutes": {"n": ["nr", "N", "x", "nt", "ln", "d", "p", "ne", "cn", "g", "i", "sn", "r", "c", "m", "ns", "nl", "f", "num", "t", "nb", "mn", "na", "v", "nc", "nm", "nan", "nu", "nn", "l", "number", "np", "j", "y"], "k": ["ck", "km", "ki", "kn", "max", "kh", "kl", "ta", "p", "ak", "ke", "i", "c", "m", "ks", "kw", "ko", "num", "kok", "mc", "t", "kj", "v", " K", "ikk", "ku", "q", "l", "u", "kk", "ka", "j", "K", "ik", "sk", "mk"]}}
{"code": "import sys\\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #\u7a7a\u767d\u3042\u308a\\n\\nN,C = LI()\\nD = [[0]*(C+1)] + [[0]+LI() for _ in range(C)]\\nc = [[0]*(N+1)] + [[0]+LI() for _ in range(N)]\\n\\nfrom collections import defaultdict\\n\\nd0,d1,d2 = defaultdict(int),defaultdict(int),defaultdict(int)\\n# dk = ((i+j)%3==k \u305f\u308b (i,j) \u306b\u5bfe\u3057\u3066\u5404\u8272\u304c\u4f55\u500b\u305a\u3064\u3042\u308b\u304b)\\nfor i in range(1,N+1):\\n    for j in range(1,N+1):\\n        if (i + j) % 3 == 0:\\n            d0[c[i][j]] += 1\\n        elif (i + j) % 3 == 1:\\n            d1[c[i][j]] += 1\\n        elif (i + j) % 3 == 2:\\n            d2[c[i][j]] += 1\\n\\nans = 10**18\\n# \u5909\u5316\u5f8c\u306e\u8272\u3067\u5168\u63a2\u7d22\\nfor i in range(1,C+1):\\n    for j in range(1,C+1):\\n        for k in range(1,C+1):\\n            if i == j or j == k or k == i:\\n                continue\\n            else:\\n                a = 0\\n                for color in d0.keys():\\n                    a += D[color][i]*d0[color]\\n                for color in d1.keys():\\n                    a += D[color][j]*d1[color]\\n                for color in d2.keys():\\n                    a += D[color][k]*d2[color]\\n                ans = min(ans,a)\\n\\nprint(ans)", "target": "516", "substitutes": {}}
{"code": "a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\n\\ne = [a, b]\\nf = [c, d]\\ng = []\\n\\nfor i in e:\\n    for j in f:\\n        g.append(i + j)\\nprint(min(g))", "target": "553", "substitutes": {"a": ["x", "ia", "to", "ae", "ab", "aj", "ai", "ak", "r", "\u00e1", "ma", "ace", "ga", "ea", "la", "aaa", "art", "da", "an", "al", "ap", "A", "at", "af", "sa", "ao", "app", "oa", "au", "aa", "l", "am", "ar", "ba", "ca", "ac"], "b": ["sb", "ab", "db", "ib", "r", "z", "bi", "fb", "rb", "by", "be", "ob", "abb", "br", "bc", "gb", "nb", "B", "bb", "v", "eb", "cb", "aa", "l", "u", "y", "bs", "ba", "back"], "c": ["ec", "ce", "lc", "n", "ci", "cd", "cn", "ct", "rc", "cy", "z", "fc", "ic", "col", "be", "bc", "dc", "uc", "sc", "cp", "ch", "cc", "co", "cb", "cu", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["n", "x", "db", "cd", "di", "r", "z", "dec", "h", "dt", "df", "dat", "t", "dc", "da", "dr", "de", "v", "ad", "red", "dp", "D", "do", "l", "dd", "du", "u", "ds", "nd"], "e": ["ec", "n", "x", "ge", "ae", "ie", "xe", "p", "r", "m", "pe", "o", "ea", "h", "be", "oe", "ef", "t", "eu", "ee", "ei", "v", "de", "ey", "al", "eq", "E", "s", "eg", "eng", "eb", "q", "l", "u", "y"], "f": ["fd", "n", "x", "ie", "bf", "p", "frame", "alf", "sf", "r", "w", "m", "z", "fb", "o", "h", "be", "fa", "df", "t", "fe", "fal", "ef", "fac", "v", "af", "it", "elf", "q", "l", "u", "fi", "F", "cf"], "g": ["gg", "ge", "gu", "gi", "gc", "p", "gd", "r", "bg", "cfg", "m", "z", "ig", "og", "ger", "ga", "gt", "gp", "gm", "h", "sg", "gb", "t", "G", "v", "gs", "msg", "gr", "it", "gre", "erg", "group", "q", "l", "fg", "groups", "reg", "mg", "pg"], "i": ["mi", "n", "xi", "x", "ia", "ie", "ci", "p", "di", "ai", "I", "m", "bi", "yi", "iti", "ic", "o", "t", "si", "ii", "li", "ei", "v", "ti", "im", "zi", "ini", "l", "pi", "u", "id", "y", "ij", "iu"], "j": [" ii", " dj", "json", "n", "x", "uj", "ja", "ie", "js", "aj", "p", "name", "ne", "di", "jp", "jc", "oj", "z", "m", "jj", "o", "jl", "fr", "je", "t", " Dj", "J", "ion", "bj", "ji", "kj", "v", "obj", "q", "l", "dj", "y", "k", "ij"]}}
{"code": "N, K = map(int, input().split())\\ns = 0\\nab = [[0, 0] for i in range(N)]\\nfor i in range(N):\\n    ab[i][0], ab[i][1] = map(int, input().split())\\nab = sorted(ab)\\n\\n#print(ab)\\nfor i in range(N):\\n    s += ab[i][1]\\n    if s >= K:\\n        print(ab[i][0])\\n        break", "target": "608", "substitutes": {"N": ["M", "n", "NS", "T", "NC", "NI", "Ns", "X", "I", "R", "NA", "L", "NN", "NP", "NR", "NT", "NH", "H", "V", "S", "B", "J", "Q", "G", "ND", "P", "Num", "A", "D", "NB", "Ni", "F", "Z", "C"], "K": ["M", "T", "KR", "R", "X", "I", "L", "NP", "W", "V", "KS", "TN", "S", "B", "J", "Q", "G", "P", "A", "E", "D", "Y", "k", "F", "KI", "Z", "C"], "s": ["ops", "ats", "d", "p", "c", "ts", "m", "ns", "rs", "ins", "ls", "abs", "t", "S", "ss", "its", "states", "v", "e", "gs", "ashes", "eps", "times", "ims", "es", "os", "stats", "ds"], "ab": ["aq", "a", "abe", "um", "alf", "abin", "hab", "ib", "abl", "ai", "abi", "aus", "fab", "AB", "pb", "rab", "rb", "aux", "Ab", "rub", "ob", "abb", "ief", "abs", "b", "abus", "ada", "ax", "tab", "bag", "mac", "zb", "apa", "av", "lam", "att", "ash", "stab", "aps", "ap", "al", "lab", "af", "arb", "abc", "eb", "auc", "app", "au", "bl", "ast", "ub", "ij", "bs", "abis", "ac"], "i": ["mi", "ki", "n", "xi", "x", "ia", "uri", "ci", "gi", "p", "di", "g", "ai", "I", "bi", "qi", "yi", "info", "ic", "ix", "ip", "ind", "b", "ri", "multi", "io", "sim", "li", "ii", "ji", "ti", "im", "it", "zi", "ui", "phi", "pi", "u", "id", "k", "y", "j", "ik", "ij", "iri"]}}
{"code": "import re\\n\\n\\ndef main(s: str):\\n    if re.match(r'.*AC.*', s):\\n        print('Yes')\\n    else:\\n        print('No')\\n\\n\\nif __name__ == \"__main__\":\\n    s = input()\\n\\n    main(s)\\n", "target": "384", "substitutes": {"s": ["a", "n", "sb", "self", "str", "ats", "p", "spec", "g", "short", "i", "r", "txt", "sql", "c", "ts", "m", "south", "ns", "z", "rs", "input", "ins", "h", "ls", "f", "b", "t", "ss", "S", "its", "v", "gs", "sq", "ws", "string", "sv", "say", "sts", "l", "q", "qs", "ps", "bs", "source"]}}
{"code": "n = input()\\na = int(n)\\nprint(a**2)", "target": "787", "substitutes": {"n": ["N", "x", "nt", "d", "p", "ne", "cn", "i", "sn", "r", "c", "m", "ns", "ny", "o", "nl", "h", "f", "b", "num", "t", "len", "nb", "na", "v", "nc", "nm", "nu", "nn", "q", "l", "j", "k"], "a": ["ia", "ae", "ava", "ab", "ta", "d", "p", "ana", "va", "xa", "i", "zero", "c", "ma", "ga", "o", "aaa", "f", "b", "alpha", "da", "amount", "na", "v", "an", "A", "sa", "au", "oa", "aa", "am", "j", "data", "area", "ba", "ca", "ao"]}}
{"code": "import sys\\ns = list(input())\\nif list(set(s)) == [\"x\"]:\\n    print(0)\\n    sys.exit()\\nt = [i for i in s if i != \"x\"]\\nn = len(t)\\nif \"\".join(t) != \"\".join(t[::-1]):\\n    print(-1)\\nelse:\\n    dic = {}\\n    cnt = 0\\n    if n % 2 == 0:\\n        for j in range(len(s)):\\n            if s[j] != \"x\":\\n                cnt += 1\\n                if cnt == n//2:\\n                    a = s[:j+1]\\n                    a = a[::-1]\\n                if cnt == n//2 + 1:\\n                    b = s[j:]\\n                    break\\n        c = 0\\n        fa = []\\n        fb = []\\n        for k in range(len(a)):\\n            if a[k] == \"x\":\\n                c += 1\\n            else:\\n                fa.append(c)\\n                c = 0\\n        fa.append(c)\\n        c = 0\\n        for p in range(len(b)):\\n            if b[p] == \"x\":\\n                c += 1\\n            else:\\n                fb.append(c)\\n                c = 0\\n        fb.append(c)\\n        ans = 0\\n        for q in range(len(fa)):\\n            ans += max(fa[q],fb[q]) - min(fa[q],fb[q])\\n        print(ans)\\n    else:\\n        for j in range(len(s)):\\n            if s[j] != \"x\":\\n                cnt += 1\\n                if cnt == int(n/2) + 1:\\n                    a = s[:j+1]\\n                    a = a[::-1]\\n                    b = s[j:]\\n                    break\\n        c = 0\\n        fa = []\\n        fb = []\\n        for k in range(len(a)):\\n            if a[k] == \"x\":\\n                c += 1\\n            else:\\n                fa.append(c)\\n                c = 0\\n        fa.append(c)\\n        c = 0\\n        for p in range(len(b)):\\n            if b[p] == \"x\":\\n                c += 1\\n            else:\\n                fb.append(c)\\n                c = 0\\n        fb.append(c)\\n        ans = 0\\n        for q in range(len(fa)):\\n            ans += max(fa[q],fb[q]) - min(fa[q],fb[q])\\n        print(ans)", "target": "766", "substitutes": {"s": ["x", "ats", "ains", "r", "z", "set", "ns", "ies", "ms", "ss", "strings", "e", "sa", "ims", "ists", "sw", "js", "g", "erences", "m", "less", "ins", "ers", "its", "results", "gets", "sv", "sts", "l", "cs", "d", "spec", "sys", "ses", "ties", "h", "tes", "xs", "csv", "times", "vs", "sis", "os", "es", "ps", "sb", "ys", "ports", "fs", "w", "ts", "rs", "tests", "ls", "f", "S", "args", "gs", "sq", "ws", "ges", "ands", "y", "qs", "ds"], "t": ["tm", "x", "T", "nt", "ta", "d", "g", "ct", "td", "r", "tc", "wt", "ts", "m", "te", "o", "tp", "h", "dt", "f", "pt", "ot", "tu", "v", "e", "tt", "tr", "st", "rt", "it", "l", "y", "vt"], "i": ["\u00ed", "ki", "mi", "x", "xi", "ie", "ci", "d", "g", "di", "ai", "I", "r", "z", "m", "ami", "ski", "ip", "iri", "ind", "f", "io", "si", "li", "key", "ii", "ei", "e", "int", "list", "oi", "ti", "zi", "ini", "\u0438", "l", "pi", "phi", "ati", "item", "id", "y", "data", "ij", "iu", "hi"], "n": ["N", "x", "nt", "ni", "gn", "ln", "d", "en", "names", "name", "ne", "g", "cn", "ct", "dn", "sn", "w", "m", "z", "ns", "o", "nl", "f", "fn", "num", "len", "nb", "nor", "no", "non", "nv", "na", "v", "an", "nc", "un", "nan", "none", "nu", "size", "nn", "l", "number", "np"], "dic": [" dyn", " dict", "Dyn", " dics", "dyn", "pdyn", "Dics", "Dic", "pdics", "pdict", "dict", "pdic", "Dict", "dics"], "cnt": ["lcret", "CNT", "pont", "pcannot", "gcret", "cont", "cNT", "cnc", "acct", "cct", "gcnt", "lcNT", "csnt", "cret", "cdef", "tcnc", "gcnc", "arcnt", "nst", "pnt", "lcnt", " cust", "csNT", "nnt", "acNT", "acnt", "cust", "csct", "fnt", "cmd", "fnc", "fust", " cmd", "acst", " cNT", "Cdef", "acnc", "fmd", "pannot", " cct", "tcust", "tcct", "gcNT", " cnc", "nnc", "pcont", "csdef", "Cct", "arcont", "cst", "pcnt", " cdef", "tcNT", "tcnt", "Cnt", "lcnc", " cret", "cannot", " cst", "tcmd", "nct", "arcannot"], "j": ["json", "x", "uj", "ja", "ijk", "js", "aj", "d", "db", "g", "test", "jp", "job", "oj", "jc", "z", "jj", "og", "note", "ctx", "ix", "ah", "jl", "fr", "je", "jac", "br", "pt", "ot", "ver", "J", "bj", "ji", "kj", "v", "obj", "it", "jump", "hd", "boot", "div", "l", "dj", "ng", "y", "jit", "ij", "org"], "a": ["aq", "ia", "sta", "ae", "ac", "ab", "era", "ta", "ana", "ach", "va", "ai", "xa", "w", "ma", "m", "ata", "eas", "ga", "o", "aux", "ea", "la", "aaa", "pa", "act", "f", "da", "wa", "apa", "na", "an", "att", "anta", "all", "al", "ap", "A", "at", "sa", "app", "oa", "au", "ed", "aa", "l", "am", "ar", "y", "er", "ya", "area", "ba", "ca", "ao"], "b": ["bis", "sb", "x", "bf", "ab", "bar", "db", "on", "g", "ib", "r", "bot", "z", "bd", "m", "bi", "wb", "pb", "rb", "by", "o", "mb", "be", "ob", "bh", "f", "br", "bc", "nb", "B", "bb", "v", "e", "an", "it", "eb", "bl", "cb", "l", "u", "y", "ub", "bs", "ba", "back"], "c": ["ec", "content", "ce", "lc", "con", "cation", "call", "ac", "ci", "gc", "unc", "cd", "pc", "cn", "xc", "g", "ct", "code", "rc", "arc", "tc", "chain", "jc", "fc", "col", "f", "bc", "count", "mc", "dc", "icc", "anc", "uc", "cas", "conf", "comments", "nc", "cin", "cache", "cos", "cp", "conv", "cc", "abc", "co", "toc", "cb", "cu", "yes", "etc", "cl", "ar", "cats", "cs", "cm", "cr", "ca", "C", "sc"], "fa": ["fd", "abe", "fax", "pa", "aaa", "br", "ua", "af", "sa", "fam", "fy", "afe", "ba", "fine", "lu", "ia", "bf", "Fa", "fps", "fm", "wy", "eas", "Fi", "feat", "fr", "fe", "da", "fo", "aft", "fw", "afa", "raf", "gold", "oa", "hd", "inea", "fat", "fred", "ae", "ja", "Fra", "xa", "ga", "fn", "fal", "apa", "fl", "al", "tf", "ala", "xff", "aa", "fi", "cf", "ft", "asia", "xon", "va", "ma", "fab", "fc", "bi", "fed", "ea", "bra", "la", "f", "df", "fen", "conf", "FA", "rf", "au", "fg", "ifa"], "fb": ["fd", "bis", "bu", "bf", "bats", "hab", "abl", "bil", "fab", "fc", "wb", "pb", "dl", "facebook", "rb", "vy", "uff", "arf", "aaa", "sbm", "abb", "f", "fn", "obb", "gb", "fe", "fal", "icc", "nb", "zb", "bb", "fen", "fl", "eu", "fw", "bridge", "bj", "bt", "ff", "fx", "rf", "raf", "stab", "qq", "lab", "arb", "deb", "tf", "erb", "eb", "xb", "xff", "aber", "hd", "FB", "ffe", "cb", "fy", "zu", "buff", "fg", "ub", "fi", "ifa", "ba", "abc", "fred"], "k": ["ck", "ki", "ek", "x", "kr", "kh", "kl", "ijk", "ang", "g", "ak", "ke", "kid", "w", "m", "z", "ctx", "kil", "kw", "ko", "kind", "h", "tk", "key", "can", "an", "v", "ok", "ch", "ikk", "ku", "kat", "kt", "u", "kk", "id", "sk", "kan", "ik", "ka", "kg", "K", "y", "ack", "mk"], "p": ["pkg", "x", "imp", "port", "point", "ep", "pc", "vp", "jp", "w", "tip", "pre", "m", "pad", "fp", "ctx", "tp", "pa", "h", "ip", "pr", "br", "sp", "f", "part", "pt", "wp", "lp", "pid", "pun", "exp", "v", "an", "P", "ap", "post", "at", "cp", "app", "yp", "bp", "np", "pi", "pat", "pn", "pp", "kg", "ps", "pg"], "ans": ["ars", "ANS", "ac", "ants", "ats", "ians", "ics", "names", "eds", "acs", "outs", "aus", "ros", "lines", "us", "ates", "ns", "ann", "anas", "ks", "offs", "ins", "leans", "ras", "ons", "ms", "angs", "amps", "ls", "ens", "cas", "anc", "cons", "uns", "an", "gs", "aces", "aps", "anes", "cus", "ions", "nas", "ams", "aos", "ands", "vs", "yes", "ads", "arts", "cs", "es", "os", "ators", "orts"], "q": ["aq", "ck", "qv", "pkg", "x", "ek", "th", "cat", "gu", "ql", "ue", "g", "qu", "iq", "qt", "ct", "w", "m", "z", "qi", "query", "ctx", "ix", "h", "ip", "quick", "f", "vc", "gh", "pt", "iv", "Q", "key", "sq", "fx", "qq", "eq", "qa", "ur", "ch", "qual", "it", "ph", "req", "cp", "question", "dq", "quote", "que", "cl", "id", "quest", "er", "ik", "qs", "kg", "pp", "pg"]}}
{"code": "n,d=[int(x) for x in input().split()]\\nx=[]\\nfor i in range(n):\\n  X=[int(x) for x in input().split()]\\n  x.append(X)\\nans=0\\nfor i in range(n-1):\\n  for j in range(i+1,n):\\n    dis=0\\n    for k in range(d):\\n      dis+=(x[i][k]-x[j][k])**2\\n    for l in range(181):\\n      if dis==l**2:\\n        ans+=1\\n        break\\nprint(ans)", "target": "182", "substitutes": {"n": ["a", "N", "nt", "ni", "p", "name", "ne", "cn", "g", "dn", "sn", "w", "c", "r", "m", "z", "ns", "o", "num", "t", "nia", "nb", "no", "mn", "na", "v", "an", "e", "nc", "un", "nu", "size", "nn", "q", "np", "y"], "d": ["fd", " D", "p", "db", "g", "di", "r", "w", "c", "m", "z", "o", "dt", "f", "dat", "da", "dr", "pd", "de", "v", "e", "D", "do", "dim", "q", "dd", "sd", "du", "dict", "ds"], "x": ["history", "wx", "xi", "ex", "ci", "xe", "p", "php", "xes", "ux", "g", "xc", "ct", "xa", "rx", "w", "c", "ox", "z", "m", "xxxx", "xt", "xml", "ix", "h", "tx", "ax", "xd", "t", "news", "create", "v", "e", "Tx", "fx", "www", "xy", "s", "xs", "mx", "dx", "q", "xx", "yx", "u", "y", "px", "lex", "xp", "xf"], "i": [" ii", "mi", "ki", "xi", "ia", "ci", "gi", "ir", "p", "di", "ai", "I", "r", "c", "m", "z", "bi", "iti", "ic", "o", "ix", "ip", "h", "ind", "b", "t", "io", "si", "li", "ii", "ei", "v", "int", "ti", "e", "im", "ini", "zi", "phi", "pi", "u", "id", "y", "ij", "iu"], "X": ["IX", "N", "T", "TX", "R", "EX", "I", "TY", "L", "MX", "OX", "UX", "W", "ZX", "XY", "V", "XP", "S", "XM", "DX", "J", "Q", "Tx", "P", "A", "E", "XX", "XT", "D", "XXX", "Y", "XL", "U", "K", "Z", "C", "Xi"], "ans": ["ars", "ANS", "ants", "ats", "names", " means", "ai", "aus", "ros", "us", "san", "ns", "vals", "ann", "rans", "anas", "ks", "ins", "wan", "ons", "ms", "angs", "amps", "ls", "pan", "ens", "uns", "an", "anes", "aps", "s", "xs", "ran", "ams", "au", "aos", "ads", "arts", "es", "os", "lan", "AN", "ds"], "j": ["uj", "ja", "js", "aj", "p", "g", "di", "jp", "job", "r", "jc", "c", "z", "m", "jj", "bi", "o", "h", "jl", "f", "b", "jac", "t", "si", "J", "bj", "ji", "v", "kj", "obj", "it", "q", "dj", "y", "ij"], "dis": ["lc", "rex", "mor", "Dis", " Dis", "lor", "broad", "di", "re", "san", "ly", "dl", "asm", "diff", "DIS", "dev", "el", "cor", "low", "nl", "ko", "pro", "mis", "rel", "cond", "no", "dist", "Des", "ris", "lis", "non", "disc", "lo", "de", "det", "ws", "des", "mil", "sol", "ree", "sd", "pat", "ds", "ay"], "k": ["ck", "km", "ki", "ek", "uk", "kn", "kr", "kh", "kl", "ijk", "kar", "ak", "ke", "kid", "c", "z", "m", "dk", "ks", "kw", "ko", "tk", "key", "kj", "v", "ark", "ku", "wk", "q", "u", "kk", "sk", "K", "ik", "ka", "kg", "kan", "ket", "mk", "unk"], "l": ["lc", "lu", "kl", "ln", "p", "g", "lb", "L", "z", "m", "ml", "dl", "ly", "el", "o", "nl", "h", "ls", "f", "b", "hl", "t", "len", "lis", "lo", "lp", "li", "v", "s", "ol", "q", "ll", "il", "le", "u", "lin"]}}
{"code": "m, d = map(int, input().split(' '))\\n\\ncnt = 0\\nif d < 22:\\n  print(0)\\nelse:\\n  for i in range(22,d + 1):\\n    d10 = i // 10\\n    d1 = i % 10\\n    if d10 >= 2 and d1 >= 2 and d10*d1 <= m:\\n      cnt += 1\\n      \\n  print(cnt)", "target": "295", "substitutes": {"m": ["mi", "n", "M", "x", "dm", "p", "mm", "mp", "g", "r", "c", "ma", "z", "bm", "h", "ms", "f", "b", "num", "t", "mc", "mn", "v", "e", "s", "q", "l", "k", "j", "cm", "mt"], "d": ["fd", "den", "n", "x", "dos", "dm", "p", "db", "dir", "g", "di", "day", "dn", "dh", "r", "c", "z", "dom", "ind", "dt", "done", "f", "b", "t", "dc", "dat", "da", "dates", "dr", "de", "e", "D", "do", "dq", "dis", "q", "l", "dd", "did", "j", "y", "data", "ds"], "cnt": ["rount", "CNT", "rnt", "Cpt", "cNT", "cct", "rst", "nst", "nNT", "nnt", "acNT", "acnt", "count", " cNT", "acpt", " cct", "Cct", "cpt", "acount", " count", "cst", "nount", "Cnt", "Count", " cpt", " cst", "nct", "rct"], "i": ["\u00ed", "mi", "bis", "n", "xi", "x", "gi", "di", "ai", "I", "bi", "info", "ic", "ix", "ip", "ind", "li", "ii", "ji", "v", "int", "ti", "oi", "im", "zi", "ini", "q", "pi", "u", "id", "j", "y", "index", "ij", "ik", "iu", "hi"], "d10": [" d8", "i2010", "d30", "D1", "D0", "D100", " d0", "D2010", "d8", "i1000", "m8", "ad30", "D1000", "adten", "d100", "d1000", "mten", " dten", "D10", " d2010", "d2010", "i10", " d30", "d090", " d1000", "ad8", "D090", "dq0", "i1", "dten", "d0", "dq10", " d090", "dq100", "dq090", " d100", "ad10", "m30", "m10"], "d1": ["di01", "D1", " d2", " d15", " d4", " d01", "p1", "d4", "d11", "dt11", "D2", "D4", "dt2", "d9", "p9", "D9", "di1", "d15", "dt1", " d9", "di11", "dt4", "d01", "D01", "p2", "di15", " d11", "d2", "D15", "D11", "p11"]}}
{"code": "import itertools\\n\\nn,m,x = map(int, input().split())\\nresult_list = [[0 for i in range(m+1)] for i in range(2**n)]\\nbook_list=[]\\nzero_one = [0,1]\\ncombi_list = list(itertools.product(zero_one, repeat=n))\\nfor i in range(n):\\n    can = list(map(int, input().split()))\\n    book_list.append(can)\\n#2^n\u901a\u308a\u306e\u7d44\u307f\u5408\u308f\u305b\\nfor i in range(2**n):\\n    #n\u500b\u5168\u90e8\u8db3\u3059\\n    for j in range(n):\\n        #\u4fa1\u683c\u3068\u30b9\u30ad\u30eb\u3092\u5168\u90e8\u8db3\u3059\\n        for k in range(m+1):\\n            result_list[i][k] +=  book_list[j][k] * combi_list[i][j]\\nAns_list = []\\nfor i in range(len(result_list)):\\n    kari_list = result_list[i][1:]\\n    if min(kari_list) >= x:\\n        Ans_list.append(result_list[i][0])\\nif Ans_list == []:\\n    print(-1)\\nelse:\\n    Ans = min(Ans_list)\\n    print(Ans)", "target": "112", "substitutes": {"n": ["nr", "N", "nt", "gn", "d", "p", "cn", "g", "sn", "w", "c", "r", "z", "ns", "ny", "o", "nl", "h", " ng", "f", "b", "num", " gn", "t", "fn", "count", "nb", "mn", "na", "v", "an", "nc", "nm", "mx", "nu", "size", "nn", "number", "l", "np", "q", "k", "j", "y"], "m": ["mi", "M", "mr", "dm", "d", "p", "mm", "mo", "g", "r", "c", "o", "gm", "h", "ms", "f", "b", "num", "t", "mc", "mn", "v", "mx", "l", "mon", "k", "y", "j", "cm", "mt"], "x": ["xi", "ex", "d", "p", "g", "xc", "X", "xa", "w", "c", "ox", "z", "xt", "ix", "h", "ax", "f", "t", "v", "e", "xy", "xs", "mx", "q", "l", "k", "y"], "result_list": ["resultingtest", "resultingset", "result_set", "resultingdef", "result_def", "resultinglist", "book_set", "result_test", "book_test", "book_def"], "i": ["mi", "ki", "xi", "ia", "ci", "gi", "ir", "di", "ai", "I", "bi", "yi", "iti", "ic", "ix", "o", "ip", "ind", "ri", "li", "ii", "ji", "ti", "im", "it", "ini", "zi", "phi", "pi", "u", "y", "fi", "ij"], "book_list": ["booklyno", "book_listed", "booklylist", "bookationset", "booklyset", "book_no", "box_list", "bookationlist", "book_set", "box_name", "book_name", "bookationno", "box_listed", "box_no", "bookationname", "box_set", "booklyname"], "zero_one": ["Zero_many", " zero_two", "zero_many", " zero_three", "Zero_ones", "zero_three", "Zero_one", "zero_two", "zero_ones", "Zero_three", " zero_ones"], "combi_list": ["combin_List", "combin_set", "combin_lists", "combi2set", "combi_List", "combi_set", "combi2list", "combi2lists", "combi2List", "combi_lists", "combin_list"], "can": ["able", "con", "known", " cann", "any", "CAN", "could", "san", "cam", "scan", "visible", "annot", "pan", "stan", "cas", "author", "non", "cover", " cannot", "an", "fan", "will", "must", "co", "see", "book", "won", "there", "kan", "may", "ca", "Can"]}}
{"code": "A,B = (int(x) for x in input().split())\\n\\nresult = [A+B,A-B,A*B]\\n\\nprint(max(result))", "target": "175", "substitutes": {"A": ["a", "GA", "API", "AGE", "An", "IA", "Ar", "Alpha", "AU", "AT", "X", "Av", "R", "I", "L", "One", "Area", "AL", "mA", "NA", "AB", "RA", "H", "ANY", "LA", "AA", "As", "AI", "AR", "C", "S", "Bar", "EA", "HA", "P", "CA", "At", "AY", "E", "UA", "JA", "AF", "AM", "SA", "AC", "BA", "Array", "AP"], "B": ["LB", "M", "N", "BI", "T", "BL", "VB", "SB", "R", "Big", "I", "L", "X", "IB", "AB", "BER", "H", "V", "BT", "b", "S", "BC", "Bar", "J", "Q", "BR", "G", "GB", "WB", "P", "BB", "BM", "Blue", "E", "Bern", "TB", "D", "NB", "Y", "BO", "DB", "F", "BA", "Z", "C"], "x": ["n", "xi", "ex", "xe", "p", "xes", "xc", "X", "xa", "i", "rx", "ox", "z", " ax", "ctx", "ix", "tx", "ax", "xd", "t", "v", "e", "fx", " xx", "at", "xy", "xs", "mx", "xb", "dx", "inx", "nex", "xx", "k", "y", "px", "ross", "xp", "xf"], "result": ["answer", "complete", "pair", "correct", "su", "match", "p", "ret", "test", "Result", "successful", "r", "comb", "current", "report", "trade", "process", "mate", "prefix", "total", "success", "res", "output", "product", "response", "valid", "memory", "results", "out", "final", "list", "number", "relation", "data", "root", "function", "back"]}}
{"code": "N = int(input())\\nCarry = []\\nfor i in range(5):\\n    Carry.append(int(input()))\\nmin_num = min(Carry)\\nif N < min_num:\\n    print(5)\\nelif min_num == 1:\\n    print((N//min_num)+4)\\nelif N % min_num == 0:\\n    print((N//min_num))\\nelse:\\n    print((N//min_num)+5)", "target": "784", "substitutes": {"N": ["SN", "CNN", "Name", "M", "n", "NS", "NV", "NC", "GN", "NI", "Na", "X", "I", "R", "NA", "L", "NM", "Number", "NN", "NP", "NR", "CN", "NT", "NH", "H", "W", "Node", "O", "V", "SIZE", "No", "NO", "NOTE", "Z", "NEW", "NUM", "S", "NE", "B", "J", "Q", "G", "Num", "P", "A", "NOW", "NB", "Y", "Size", "Ni", "K", "F", "AN", "UN", "TN", "Note", "Now", "NG", "C"], "Carry": ["Cence", " Crier", "Barry", " Cred", "Brier", " Ccarry", "cary", "Bred", "cence", "Cred", "Vary", "cry", "ccarry", " Cary", "Cry", " Cry", "Ncarry", "Nry", " Cence", "Narry", "Vcarry", "Vry", "carry", "Ccarry", "Varry", "Nence", "Bry", "Crier", "cred", "Cary", "crier"], "i": ["\u00ed", "n", "x", "ite", "ir", "p", "I", "iter", "r", "irl", "ix", "ind", "f", "no", "im", "it", "id", "j", "k"], "min_num": ["minitynum", "max_con", "minlennu", "min1num", " min_number", "commonablenum", "minlensum", "min_no", "min2nom", "commonablenom", "Min_col", "minitysum", "min_nu", "minitynu", "minitycol", " min_mon", "Min_number", "min2rat", "min_sum", "commonablerat", "common_num", "min_con", "minlencol", "min1con", "Min_nu", "minimum_mu", "common_nom", "min_col", "max_part", "minablenum", "min_mon", "Min_con", "minablenom", " min_no", "min1mon", "min_part", "Min_sum", "min_cal", "min_nom", "max_mon", "minablerat", "minimum_num", "min_rat", "Min_num", "common_rat", "min2num", "max_num", "minlennum", "minimum_mon", "min_number", "minimum_gen", "Min_cal", "min_gen", "min_mu", "min1cal", "Min_mon"]}}
{"code": "import sys\\n\\nsys.setrecursionlimit(10**7)\\n\\n\\ndef dfs(s, to, color):\\n    for next_v, step in to[s]:\\n        if color[next_v] == -1:\\n            if step % 2 == 0:\\n                color[next_v] = color[s]\\n            else:\\n                color[next_v] = color[s] ^ 1\\n            dfs(next_v, to, color)\\n\\n\\ndef solve():\\n    N = int(input())\\n    to = [[] for _ in range(N)]\\n    for _ in range(N - 1):\\n        u, v, w = map(int, input().split())\\n        u, v = u - 1, v - 1\\n        to[u].append([v, w])\\n        to[v].append([u, w])\\n\\n    color = [-1] * N #-1: \u672a\u63a2\u7d22\u30010: \u767d\u30011: \u9ed2\\n    color[0] = 0\\n    dfs(0, to, color)\\n    print(*color, sep='\\n')\\n\\n\\nif __name__ == \"__main__\":\\n    solve()", "target": "300", "substitutes": {"s": ["a", "n", "sb", "x", "state", "str", "space", "js", "d", "p", "name", "spec", "g", "i", "r", "sys", "c", "ts", "m", "current", "z", "ix", "ins", "h", "ls", "f", "b", "t", "time", "ss", "S", "gs", "steps", "string", "sv", "q", "sample", "k", "y", "j", "ps", "source", "version"], "to": ["top", "onto", "scroll", "x", "too", "state", "token", "path", "eto", "ta", "point", "table", "p", "po", "template", "into", "blue", "zero", "set", "floor", "type", "total", "bo", "message", "by", "o", "output", "two", "display", "done", "go", "b", "fn", "t", "delete", "auto", "trace", "To", "style", "out", "pos", "also", "list", "until", "debug", "co", "group", "rect", "new", "do", "toc", "base", "size", "l", "number", "see", "copy", "link", "TO", "y", "os", "data", "range", "tto", "target"], "color": ["background", "n", "x", "err", "p", "value", "green", "black", "c", "set", "window", "format", "pixel", "co", "new", "number", "data", "text", "blue", "scale", "length", "Color", "shape", "olor", "o", "white", "normal", "clear", "colored", "l", "COLOR", "error", "function", "draw", "comment", "pair", "state", "reason", "cycle", "cell", "hex", "theme", "col", "term", "form", "alpha", "inner", "style", "cal", "cache", "red", "ch", "size", "index", "mode", "label", "pal", "name", "current", "map", "type", "message", "cor", "go", "out", "fill", "row", "rect", "stroke", "coll", "colour"], "next_v": ["next_sv", "next_h", "Next_i", "last_x", "next_i", "last_h", " next_vt", "next____vi", "next_l", " next_x", "last_vi", " next_i", "next_vt", "next__l", "Next_v", "next____i", "next_vy", " next_vy", " next_vi", " next_sv", "next__x", "next_vi", "next__sv", " next_l", "Next_x", "next__v", "last_v", "next____v", "next____vt", "next_x"], "step": ["next", "stop", "x", "state", "pattern", "path", "d", "p", "loop", "name", "ste", "cycle", "Step", "STEP", "value", "image", "shift", "scale", "length", "z", "batch", "set", "diff", "status", "window", "shape", "change", "second", "sp", "t", "block", "key", "steps", "switch", "st", "group", "dx", "size", "skip", "j", "data", "walk", "draw", "chain"], "N": ["SN", "Name", "n", "NL", "NS", "M", "T", "NC", "GN", "NI", "Ns", "R", "I", "L", "NA", "NM", "Number", "NN", "NP", "NR", "CN", "NT", "NH", "W", "V", "No", "NO", "NUM", "S", "NE", "ND", "Num", "P", "Network", "Sn", "D", "NB", "MN", "Len", "Ni", "K", "TN", "C"], "_": ["n", "x", " the", " j", "__", "ny", "my", "ix", "val", "f", " i", "pt", "all", "un", " __", "D", "___"], "u": ["ut", "lu", "uj", "su", "um", "ue", "ul", "i", "uid", "uni", "us", "uv", "ju", "hu", "o", "pu", "uc", "ud", "tu", "eu", "ug", "ru", "un", "ou", "ur", "ui", "uf", "nu", "au", "cu", "user", "du", "uu", "U", "iu"], "v": ["qv", "n", "x", "vd", "vv", "d", "p", "vi", "vo", "tv", "va", "g", "rev", "vp", "i", "uv", "c", "m", "z", "ev", "vy", "o", "h", "val", "V", "vr", "f", "b", "vc", "t", "vol", "iv", "ver", "av", "nv", "lv", "vm", "sv", "conv", "ve", "q", "l", "vs", "var", "ov", "j", "vt", "y", "k"], "w": ["wx", "sw", "tw", "wh", "we", "wt", "r", "weight", "z", "wb", "wr", "window", "wi", "rw", "W", "wd", "kw", "h", "wal", "ew", "word", "wl", "wid", "win", "wa", "wp", "width", "ws", "hw", "nw", "wk", "l", "aw"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\ncap = [[0, 0] for _ in range(N+1)]\\ncap[-1] = [A[-1], A[-1]]\\nfor i in range(N-1,-1,-1):\\n    cap[i][0] = (cap[i+1][0] + 2 - 1)//2\\n    cap[i][1] = cap[i+1][1] + A[i]\\nans = 1\\nnodes = 1\\nfailed = nodes < cap[0][0]\\nfor i in range(N):\\n    nodes = min((nodes - A[i])*2, cap[i+1][1])\\n    if nodes < cap[i+1][0]:\\n        failed = True\\n        break\\n    ans += nodes\\nprint(-1 if failed else ans)\\n", "target": "625", "substitutes": {"N": ["SN", "CNN", "Name", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "O", "V", "TN", "No", "NO", "NUM", "S", "NE", "B", "J", "G", "Num", "P", "Bern", "D", "NB", "Len", "Ni", "K", "F", "AN", "Z", "C"], "A": ["a", "GA", "T", "Ax", "An", "IA", "Ar", "Alpha", "AU", "AT", "ACC", "Av", "NA", "L", "AV", "CAP", "Ca", "AB", "App", "AE", "AA", "LA", "As", "WA", "V", "C", "AI", "AS", "Cap", "S", "B", "Q", "G", "HA", "P", "Ant", "CA", "At", "E", "JA", "AF", "D", "TA", "Array", "AM", "SA", "U", "AC", "ACT", "BA", "AN", "K", "Ag", "AP"], "cap": ["ctrl", "ce", "n", "conn", "cmp", "pack", "lim", "ab", "db", "mp", "spec", "rep", "cube", "ct", "car", "test", "pen", "CAP", "ape", "c", "cod", "map", "pe", "tc", "city", "snap", "case", "cv", "pan", "act", "buf", "Cap", "fac", "len", "dig", "cons", "cum", "ver", "bench", "cut", "sc", "can", "att", "tap", "list", "aps", "ap", "cp", "ch", "com", "co", "capt", "ve", "clip", "cast", "cb", " Cap", "pl", "caps", "cl", "copy", "mem", "vec", "rip", "rap", "cf", "ca", "ac"], "_": ["x", " e", " j", " k", "I", " n", "ox", "ix", " int", " x", " l", " u", " c", " m", " __", " each", " p", " un"], "i": ["mi", "ki", "xi", "x", "ia", "uri", "gu", "ci", "gi", "cli", "name", "g", "di", "ai", "I", "iter", "this", "m", "bi", "status", "info", "yi", "qi", "ju", "ic", "ix", "ski", "ip", "iri", "h", "ind", "f", "b", "ri", "multi", "t", "io", "si", "sim", "li", "ii", "ji", "v", "ori", "ei", "ti", "exp", "key", "oi", "iy", "im", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "phi", "item", "id", "j", "index", "y", "ij", "iu", "hi", "init"], "ans": ["ars", "ANS", "ians", "ats", "ants", "actions", "names", "eds", "aus", "span", "nets", "lines", "ns", "ies", "ann", "rs", "man", "anas", "offs", "ins", "ons", "ms", "amps", "flags", "ls", "ids", "ents", "ens", "ations", "uns", "can", "an", "anks", "aps", "works", "s", "eps", "xs", "nan", "ran", "aos", "yes", "aints", "cs", "arts", "os", "groups", "stats", "es", "errors", "ds", "ps"], "nodes": ["nons", "mnons", " nods", "cnode", "cnobs", "nums", "enums", "jod", "onums", "jobs", "numbers", " nobs", "onones", "onents", "nanodes", "anods", " nod", "nods", "anodes", "onumbers", "dores", " numbers", " nums", " node", "enones", "nents", "tumbers", " nones", "jode", "mnodes", "gnodes", "nones", "nanots", "gnoes", " nores", "nanumbers", "nanods", "cnod", "onods", "tods", "todes", "cnodes", "onodes", "nod", " nons", "anumbers", "tons", "cnots", "onoes", "anots", "nots", "node", "dods", "gnods", "enents", "mnoes", " nots", "nores", "dots", "enodes", "gnons", "cnores", "dodes", "onons", "nobs", "jodes", "mnods", "cnods", "noes", " nents"], "failed": ["filled", "led", "changed", "rored", "locked", "packed", "told", "anged", "required", "ano", "broken", "test", "successful", "paid", "healthy", "ordered", "added", "fights", "winner", "leaf", "raised", "fired", "fail", "la", " Failed", "pool", "done", "successfully", " tried", "matched", "empty", "balanced", "lo", "panic", "unknown", "allowed", "wrong", "killed", "backed", "bold", " succeeded", "needed", "ailed", "started", "found", "eded", "made", "won", "error", "acked", "sent", "disabled", "ds", "defined", "connected"]}}
{"code": "n = int(input())\\nplus = []\\nminus = []\\nfor i in range(n):\\n    s = input()\\n    mini = 0\\n    ruikei = 0\\n    for j in range(len(s)):\\n        if s[j] == '(':\\n            ruikei += 1\\n        else:\\n            ruikei -= 1\\n            mini = min(mini, ruikei)\\n    if ruikei > 0:\\n        plus.append([mini, ruikei])\\n    else:\\n        mini = 0\\n        ruikei = 0\\n        for j in range(len(s))[::-1]:\\n            if s[j] == ')':\\n                ruikei += 1\\n            else:\\n                ruikei -= 1\\n                mini = min(mini, ruikei)\\n        minus.append([mini, ruikei])\\n\\nplus.sort(reverse=True, key=lambda x: x[0])\\nminus.sort(reverse=True, key=lambda x: x[0])\\n\\nans = 'Yes'\\ntop_plus = 0\\nfor i in range(len(plus)):\\n    mini, ruikei = plus[i]\\n    if top_plus + mini < 0:\\n        ans = 'No'\\n        break\\n    else:\\n        top_plus += ruikei\\n\\ntop_minus = 0\\nfor i in range(len(minus)):\\n    mini, ruikei = minus[i]\\n    if top_minus + mini < 0:\\n        ans = 'No'\\n        break\\n    else:\\n        top_minus += ruikei\\n\\nif top_plus != top_minus:\\n    ans = 'No'\\n\\nprint(ans)", "target": "7", "substitutes": {"n": ["nr", "N", "x", "net", "nt", "ni", "ln", "d", "p", "ne", "cn", "sn", "r", "c", "w", "m", "z", "ns", "o", "nl", "num", "nia", "t", "nb", "mn", "na", "v", "nc", "nm", "nan", "nu", "nn", "l", "pi", "np"], "plus": ["top", "x", "max", "self", "ge", "ex", "positive", "pex", "sign", "more", "long", "raw", "us", "zero", "down", "clips", "full", "pad", "prefix", "prime", "dash", "only", "step", "ins", "show", "success", "quick", "case", "days", "amp", "add", "Plus", "exp", "star", "up", "ify", "ups", "primary", "none", "phone", "pres", "one", "profile", "yes", "pl", "hello", "copy", "padding", "px", "pp", "pro", "ps", "pack", "like", "users"], "minus": ["mes", "bis", "mus", "los", "pieces", "seconds", "meta", "mods", "thumbnails", "dies", "sub", "bs", "uts", "outs", "series", "zero", "us", "down", "undo", "redo", "south", "versions", "diff", "mins", "min", "ses", "offs", "downs", "negative", "two", "orus", "no", "pie", "pos", "results", "strings", "these", "about", "eros", "small", "cos", "des", "terms", "bass", "partial", "none", "nos", "times", "below", "things", "aunts", "many", "ones", "nuts", "neg"], "i": [" ii", "iii", "ki", "mi", "xi", "x", "ia", "ie", "ci", "gi", "p", "di", "ib", "ai", "I", "m", "bi", "info", "iti", "ic", "o", "ip", "ind", "b", "si", "li", "ii", "ji", "v", "e", "key", "ti", "oi", "ei", "int", "im", "it", "ini", "zi", "l", "pi", "phi", "ati", "u", "id", "y", "index", "ik", "ij", "iu", "init"], "s": ["a", "bis", "sb", "x", "str", "ats", "js", "single", "p", "spec", "r", "c", "ts", "m", "south", "ns", "z", "rs", "ses", "ins", "h", "ers", "ms", "ls", "b", "t", "ss", "S", "its", "bits", "strings", "v", "gs", "sq", "ws", "sa", "sv", "xs", "sts", "l", "sis", "os", "qs", "ds", "ps", "bs"], "mini": ["perm", "mid", "mu", "mm", "chi", "mass", "batch", "module", "mobile", "ms", "dem", "mis", "fin", "sim", "cin", "miss", "iso", "spin", "mem", "obi", "meg", "init", "fine", "money", "blue", "m", "trade", "mins", "min", "mc", "mn", "margin", "debug", "fake", "mie", "virt", "fee", "trial", "magic", "mint", "next", "summary", "meta", "aug", "aj", "beta", "cycle", "minute", "xml", "nice", "mind", "dy", "inner", "ii", "button", "mag", "dim", "anim", "Mini", "md", "micro", "mode", "mi", "half", "reset", "ami", "info", "prime", "mb", "news", "li", "delay", "Martin", "thin", "cycles", "month", "temp"], "ruikei": ["runikepi", "runreadyiu", "ruiseiu", "ruiqis", "runikeie", "runicyli", "rupirmi", "rouaxyai", "ruokexi", "ruicyki", "ruaxyai", "raikeiu", "auouseci", "ruicyo", "ruicyi", "ruachepi", "raikesiu", "ruakeit", "runicyi", "ruikeit", "sanongei", "ruikemi", "gruikeip", "ruakeip", "rukei", "nuikyhi", "ruikip", "gruicyki", "ruikyxi", "ruiqxi", " ruacheis", "auikexi", "rucey", "runicyin", "ruikeie", "ruideci", "ruisky", "gruakeis", "ruisein", "gruikeis", "ruokehi", "gruousepi", "ruikeai", "ruikyzi", "ruiskiu", "gruakei", "ruicyiu", "ruiki", "rusikei", "ruacheim", "ruceis", "ruaceit", " ruachepi", "runiqis", "ruidepi", "ruchepi", "ruachexi", "ruokezi", "gruakeip", "rukeid", "nukei", "ruikeli", "ruideit", "ruusterzi", "ruickid", "ruikyi", "sanikedi", " ruikexi", "ruikki", "ruongei", "rupiri", "ruacemi", "rupirki", "ruongedi", "ruachei", "ruicypi", "ruikezi", "nuikei", "ruiskis", "nuikeim", "nuikeis", "ruousepi", "rureadyiu", "ruimeis", "ruikya", "ruikespi", "rureadyis", "ruikeip", "ruidei", "gruikeki", "ruicyid", "ruiqi", "ruisey", "runikeiu", "ruicki", "gruouseci", "ruickia", "ruikis", "rouikei", "ruokeci", "ruakeki", "ruikesiu", "nuikeid", "ruikey", "ruaxyis", "rucei", "rouikeis", "ruikein", "runreadyy", "ruaceki", "nuikypi", "ruikesy", "ruaxyy", "gruicyi", "sanongedi", "ruouseim", "ruisei", "ruippi", "ruicyia", " ruachei", "rukeie", "ruipi", "nuirois", "nuiroi", "ruongea", "nukeid", "gruicyit", "rureadyi", "runiqpi", "ruakeiu", "auousei", "ruongehi", "ruakeli", "rucheie", "rouaxyis", "gruikepi", "ruusterhi", "ruusterpi", "ruipis", "nuiropi", "ruchei", "nukeia", "rusikeki", "raikepi", "ruikeki", "ruikit", "runikeis", "ruikeo", "auikeci", "nuiroim", "auousepi", "runicyis", "ruiseli", "ruicyhi", "ruaxyi", "ruiko", "gruikeci", "ruikesis", "gruikeit", "ruiroim", "gruouseit", "raikeis", "ruokepi", "ruiqie", "ruipiu", "rusicki", "ruusteri", "ruacepi", "nuikezi", "runikei", "ruimei", "ruicyli", "auousexi", "ruikedi", "rouaxyi", "rouikey", "ruokei", "ruikeis", "ruakeis", "sanikei", "gruousei", "ruakeo", "rureadypi", "ruicyit", "ruakei", "ruimeiu", "runreadyi", "ruimeip", "ruousexi", "ruiqpi", "gruikei", " ruikepi", "ruiroi", "raikei", "ruickpi", "ruirois", "raikesi", "auikei", "ruicyin", "rureadyxi", "runreadyis", "runikein", "ruikea", "rupirpi", "ruacheis", "ruikiu", "gruakeiu", "rukeia", "rusickmi", "gruikeo", "rucheis", "ruousei", "runiqie", "ruiropi", "ruickmi", "ruickki", "sanikehi", "gruikeiu", "nuikyzi", "rouikeai", "rusickpi", "sanongea", "ruicydi", "ruikepi", "runiqi", "nuikehi", "ruikeim", "rouaxyy", "ruikyhi", "gruicyo", "rusikepi", "rusickki", "ruouseit", "runikeli", "raikesis", "ruikexi", "ruiseis", "ruceai", "ruacei", "auikepi", " ruikeis", "ruikeia", "ruikeid", "ruikyci", "ruikeci", "nuikepi", "ruikydi", "rusikemi", "ruikesi", "nuikyi", "ruicya", "ruouseis", "runikey", " ruachexi", "ruikypi", "ruouseci", "nukepi", "ruakein", "sanongehi", "ruikesai", "rukepi", "ruikeiu", "rureadyy", "ruicyis", "ruikehi", "sanikea", "ruaceci", "raikespi", "nuikeia", "rukeis", "ruiski"], "j": ["next", "json", "x", "uj", "ja", "ie", "aj", "js", "p", "name", "g", "jp", "job", "oj", "jc", "z", "m", "jj", "bi", "ju", "jl", "f", "je", "b", "jac", "t", "J", "ion", "bj", "li", "kj", "ji", "jas", "v", "obj", "it", "jump", "jo", "q", "l", "dj", "y", "k", "ij"], "ans": ["arms", "ars", "ANS", "ants", "ats", "dies", " means", "eds", "outs", "acs", "ows", "helps", "aus", "ros", "us", "aned", "ts", "ns", "ann", "rans", "rs", "ums", "anas", "ks", "offs", "ins", "ras", "ons", "ms", "amps", "angs", "flags", "ents", "ens", "ots", "parts", "anc", "orders", "uns", "comments", "an", "posts", "jas", "iann", "aps", "works", "ays", "terms", "ands", "aos", "ams", "vs", "ads", "arts", "cs", "os", "asms", "stats", "errors", "orts"], "top_plus": ["first_wrapper", "top_wrapper", "title_positive", "top_down", "title_star", "first_plus", "top7block", " top_exp", "top7exp", "first_success", "top_success", "top_positive", "TOP_down", " top_block", "top_star", "toprettysuccess", "top5down", "top5none", "top7plus", "top_sign", "title_sign", "top_none", "top_exp", "top_block", "TOP_plus", "toprettywrapper", "top5plus", "toprettyplus", "title_plus", "TOP_none", "top7minus"], "top_minus": ["top2down", "top2plus", "top2yes", "top64missing", "top_mini", "top64neg", "top64string", "top2string", "top64yes", "topThestring", "topTheyes", "top_missing", "TOP_minus", " top_down", "top2none", "top2mini", "top_neg", "top_down", "TOP_neg", " top_missing", "top_string", "top_none", "top2minus", "TOP2yes", "TOP2string", "top_negative", "top64down", "TOP2neg", " top_negative", "top_yes", "TOP_yes", "top64negative", "TOP_string", " top_mini", "top2negative", " top_none", "top2neg", "TOP2minus", "topTheminus", "topTheneg", "top64minus"]}}
{"code": "import math\\n\\nclass Point:\\n    def __init__(self, x = 0.0, y = 0.0):\\n        self.x = x\\n        self.y = y\\n\\n    def __str__(self):\\n        return f\"{self.x:.8f} {self.y:.8f}\"\\n\\n\\ndef koch(d, l, r):\\n    if d == 0:\\n        return\\n\\n    s = Point()\\n    t = Point()\\n    u = Point()\\n    s.x = (2*l.x + 1*r.x) / (1 + 2)\\n    s.y = (2*l.y + 1*r.y) / (1 + 2)\\n    t.x = (1*l.x + 2*r.x) / (2 + 1)\\n    t.y = (1*l.y + 2*r.y) / (2 + 1)\\n    u.x = (t.x - s.x) * math.cos(math.radians(60)) - (t.y - s.y) * math.sin(math.radians(60)) + s.x\\n    u.y = (t.x - s.x) * math.sin(math.radians(60)) + (t.y - s.y) * math.cos(math.radians(60)) + s.y\\n\\n    koch(d - 1, l, s)\\n    print(s)\\n    koch(d - 1, s, u)\\n    print(u)\\n    koch(d - 1, u, t)\\n    print(t)\\n    koch(d - 1, t, r)\\n\\nn = int(input())\\nl, r = Point(), Point(100.0, 0.0)\\nprint(l)\\nkoch(n, l, r)\\nprint(r)\\n", "target": "280", "substitutes": {"self": ["th", "cmp", "ae", "nt", "me", "local", "context", "sw", "ln", "p", "sub", "this", "object", "txt", "sys", "ref", "subject", "full", "my", "details", "rs", "old", "shape", "sect", "ins", "res", "py", "output", "ren", "rec", "you", "config", "rel", "close", "conf", "pos", "eth", "e", "your", "all", "small", "ws", "obj", "console", "public", "app", "new", "print", "q", "cl", "np", "error", "user", "se", "Self", "python"], "x": ["xe", "p", "left", "X", "i", "re", "c", "z", "el", "ix", "yl", "exclusive", "v", "exp", "e", "fx", "dx", "lex", "data", "xp", "history", "content", "wx", "any", "point", "on", "get", "length", "m", "full", "xt", "step", "tx", "time", "url", "key", "xy", "fixed", "ce", "ux", "ct", "xa", "ox", "only", "xml", "hex", "xd", "lon", "xs", "mx", "com", "title", "index", "xi", "ex", "path", "name", "run", "xc", "rx", "ext", "long", "w", "act", "ax", "f", "sex", "int", "width", "at", "ell", "one", "xx", "lat", "yx", "px", "xf", "ry"], "y": ["very", "p", "i", "html", "yz", "c", "z", "ies", "yl", "v", "fy", "Y", "iny", "hot", "yu", "data", "content", "asy", "any", "ty", "yd", "point", "yer", "on", "wy", "m", "my", "story", "vy", "hey", "o", "py", "yr", "sky", "uy", "key", "ey", "xy", "yt", "ay", "rey", "ady", "txt", "sys", "ly", "axy", "dy", "all", "gy", "height", "ch", "sy", "ys", "yang", "name", "cy", "long", "oy", "yo", "ny", "yi", "entity", "by", "ye", "ery", "b", "yout", "out", "iy", "ity", "ry", "yy", "lat", "yx", "ya", "ym"], "d": ["fd", "load", "dos", "dm", "p", "db", "di", "day", "dn", "g", "i", "dh", "w", "c", "m", "z", "dl", "diff", "o", "h", "dt", "done", "f", "b", "days", "dy", "dat", "dc", "da", "dr", "pd", "de", "e", "ad", "dx", "D", "new", "do", "div", "dis", "dd", "du", "did", "id", "sd", "k", "ds", "draw"], "l": ["loc", "lc", "tl", "kl", "local", "ln", "p", "lib", "lt", "ul", "g", "lb", "i", "L", "c", "z", "m", "ml", "dl", "el", "o", "nl", "sl", "h", "log", "ls", "f", "b", "hl", "yl", " L", "rl", "lo", "lp", "li", "fl", "v", "list", "al", "all", "ell", "lr", "ol", "ll", "le", "pl", "cl", "il", "er", "lin"], "r": ["sr", "mr", "rr", "ro", "err", "rg", "p", "g", "R", "rc", "i", "re", "w", "radius", "c", "m", "z", "rh", "rs", "rb", "o", "res", "h", "rec", "result", "vr", "rar", "fr", "b", "br", "f", "rel", "right", "rl", "dr", "v", "e", "all", "it", "ur", "rt", "rect", "usr", "q", "ar", "j", "er", "k", "attr", "cr", "rd"], "s": ["a", "aws", "ats", "p", "eds", "i", "us", "c", "ets", "z", "ns", "ies", "ms", " returns", "ss", "v", "e", "sa", "ches", "sd", "se", "bs", "ubs", "sc", "sh", "sw", "services", "js", "g", "m", "south", "less", "o", "ins", "sl", "si", "its", "results", "sv", "ions", "sts", "cs", "stats", " samples", "spec", "sys", "h", "als", "ar", "es", "os", "ps", "sb", "su", "space", "outs", "uts", "w", "ts", "rs", "sing", "ls", "abs", "b", "f", "S", "gs", "sq", "ws", "st", "sol", "j", "ds"], "t": ["tm", "a", "ut", "ty", "T", "to", "nt", "str", "p", "ta", "ret", "g", "test", "qt", "ct", "i", "tc", "wt", "c", "ts", "m", "txt", "type", "o", "te", "tp", "h", "tree", "dt", "tg", "f", "b", "tk", "unt", "pt", "ot", "tu", "out", "v", "e", "at", "tt", "tr", "it", "tf", "tar", "st", "rt", "q", "lat", "k", "j", "mt", "temp", "target"], "u": ["ut", "lu", "su", "um", "p", "mu", "util", "ue", "ul", "g", "i", "uid", "us", "uv", "c", "wt", "m", "o", "h", "pu", "f", "b", "eu", "tu", "ud", "out", "v", "ru", "un", "ou", "ur", "it", "ui", "uf", "au", "nu", "cu", "user", "k", "U", "uu", "iu"], "n": ["a", "nr", "N", "net", "nt", "ln", "p", "on", "norm", "ne", "g", "cn", "i", "sn", "c", "w", "m", "ns", "o", "nl", "h", "f", "b", "fn", "num", "nb", "na", "v", "nc", "nm", "nan", "np", "j"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**6)\\n\\ns = input()\\n\\nans = [0]*len(s)\\n\\ni = 0\\nlen_left = 1\\nlen_right = 0\\nintersec_left = 0\\nnow_left = True\\n\\nwhile i < len(s)-1:\\n    if s[i] == s[i+1] and now_left:\\n        len_left += 1\\n    elif s[i] != s[i+1] and now_left:\\n        len_right += 1\\n        intersec_left = i\\n        now_left = False\\n    elif s[i] == s[i+1]:\\n        len_right += 1\\n    else:\\n        if len_left%2 == 0:\\n            ans[intersec_left] += len_left//2\\n            ans[intersec_left+1] += len_left//2\\n        else:\\n            ans[intersec_left] += len_left//2+1\\n            ans[intersec_left+1] += len_left//2\\n        if len_right%2 == 0:\\n            ans[intersec_left] += len_right//2\\n            ans[intersec_left+1] += len_right//2\\n        else:\\n            ans[intersec_left] += len_right//2\\n            ans[intersec_left+1] += len_right//2+1\\n        len_left = 1\\n        len_right = 0\\n        intersec_left = i+1\\n        now_left = True\\n    i += 1\\nelse:\\n    if len_left%2 == 0:\\n        ans[intersec_left] += len_left//2\\n        ans[intersec_left+1] += len_left//2\\n    else:\\n        ans[intersec_left] += len_left//2+1\\n        ans[intersec_left+1] += len_left//2\\n    if len_right%2 == 0:\\n        ans[intersec_left] += len_right//2\\n        ans[intersec_left+1] += len_right//2\\n    else:\\n        ans[intersec_left] += len_right//2\\n        ans[intersec_left+1] += len_right//2+1\\n    \\nprint(*ans)", "target": "722", "substitutes": {"s": ["a", "n", "sb", "x", "ys", "ats", "mods", "js", "d", "p", "ains", "g", "ows", "fs", "w", "hs", "sys", "c", "ts", "m", "ns", "ies", "rs", "ses", "tests", "ins", "less", "h", "ms", "ers", "ls", "abs", "b", "t", "ss", "S", "parts", "args", "its", "tes", "als", "ings", "strings", "gs", "sq", "ws", "ges", "aps", "gets", "ims", "xs", "sv", "mys", "ments", "csv", "sts", "rates", "sis", "cs", "ags", "y", "os", "changes", "qs", "es", "ds", "ps", "bs"], "ans": ["ats", "eds", "acs", "books", "aus", "asks", "us", "aned", "ns", "ks", "offs", "ras", "ms", "angs", "ss", "cons", "anes", "uploads", "atts", "arms", "unes", "gn", "ais", "people", "mos", "ann", "mas", "eas", "anas", "ins", "ers", "ids", "ens", "ions", "roots", "cs", "stats", "users", "ars", "ols", "ians", "names", " means", "ums", "rans", "ons", "cas", "als", "tes", "an", "anners", "oss", "xs", "ams", "vs", "es", "os", "ps", "ANS", "ants", "outs", "ts", "vals", "rs", "amps", "ls", "ents", "news", "args", "uns", "gs", "ands", "aos", "ads", "ds", "orts"], "i": ["ki", "n", "x", "p", "c", "z", "ix", "ind", "multi", "ri", "nil", "v", "exp", "e", "ti", "oi", "it", "ini", "\u0438", "q", "phi", "id", "g", "ai", "I", "iter", "m", "status", "ic", "si", "iu", "ei", "im", "zi", "l", "u", "iat", "ij", "start", " ii", "eni", "ci", "gi", "ski", "ip", "io", "ii", "ui", "pi", "index", "mi", "xi", "ie", "cli", "name", "di", "uli", "bi", "ami", "f", "b", "t", "li", "ji", "ori", "int", "list", "item", "j", "y", "iri", "hi"], "len_left": ["lenJright", "en_right", "len33single", "den_single", "len_inner", "len67right", "tail67left", "den_right", "lenableonly", "syn_old", "len09right", "len33right", "ln_low", "tail_right", "den33single", "len32old", "len_center", "lenJnet", "syn_long", "len10long", "lenJcolumn", "len_lo", "len_column", "tail_field", "tail67lo", "Len_column", "Len_low", "len67lo", "len_and", "lenJleft", "l_and", "tail_lo", "len08net", "len67field", "lentimeonly", "lenableleft", "len32right", "tail_left", "ln_center", "lenJlevel", "syn_left", "lenableright", "length_label", "len_only", "len_long", "len36field", "len_local", "len33left", "len_list", "length_level", "Len_wall", "len_wall", "len33list", "len36right", "len09inner", "len36left", "len08bottom", "den_list", "len_low", "len_field", "len_bottom", "len_level", "ln_left", "den33list", "len08level", " len_inner", "Len_left", "l_inner", "length_left", "Len_right", "len32entry", "len10old", "len_label", "len36lo", "len_single", "Len_down", "den33right", "len_net", "len10local", "l_left", "len09and", "ln_only", "lenablecenter", "len09left", "len32left", "len_down", "en_bit", "en_old", "lentimeleft", "len10left", "tail67field", "Len_old", "len_old", "len_entry", "length_bottom", "den_left", "lentimeright", "len08left", "syn_local", "en_left", "length_net", "lenJwall", "lenJbottom", "length_long", "len67left", "den33left", "lentimelow", "len_bit", "ln_right", "Len_entry", "l_right", "tail67right"], "len_right": ["en_right", "name67left", "len_inner", "li_wall", "Len_off", "len67right", "lan08right", "len101left", "name_start", "len101right", "len09right", "len2correct", "lan_red", "len7wall", "liTleft", "len___left", "len\u0648off", "len_center", "len64center", "len_Right", "li_wrong", " len2off", "en_correct", "len_internal", "lenenleft", "lenTwall", "Len_inner", "len67red", "len_before", "len64inner", "len67start", "len2right", " len_bottom", "coll_right", "coll_result", "coll_release", "len64bottom", "len_wrong", "len_result", "li_left", "name67before", "len08right", "coll_off", "len101off", "len___internal", "liTwall", "Len_internal", "coll\u0648request", "en_max", "Len_red", "len_correct", "len_wall", "lan08red", " len_center", "coll\u0648left", "len_1", "lenenradius", "lenTwrong", "lenTleft", "len_red", " len_correct", "len\u0648right", "len67before", "lan_right", "len_bottom", "len2off", "len_off", " len_off", "coll_before", "coll_request", "len08red", "Len_radius", "len7right", "lenencenter", "Len_Right", "coll_left", "Len_left", "len7wrong", "len09release", "name_right", "Len_right", "len64correct", "li_right", "len2left", "lenenright", "liTright", "Len_rest", "lenTright", "len_request", "liTwrong", "len67off", "len_rest", "coll\u0648right", "Len_1", "Len_correct", "len_max", "len\u0648request", " len2correct", "len101inner", "len___1", "lan_left", "coll\u0648off", "len09before", "len64right", "len_radius", "en_left", "len08left", "len09result", "name_left", "name67start", "len64left", "name67right", "len67left", "len67correct", "len___right", "len_start", "name_before", "lenenbottom", "lan08left", "len7left", "len\u0648left", "lenencorrect", " len2right", " len2left", "len_release"], "intersec_left": ["intersec09position", "interwin_target", "intersection_left", "interloc___Left", "intersec_one", "intersec_bottom", "intersecTimenet", "intersecondtlast", "intersectall", "intersec10left", "intersec_full", "interloc_low", "intersecTimetop", "intersec_all", "intersecurity_left", "intersec8left", "intersecTimeexpr", "intersecondtleft", "intersec_el", "intersec00right", "intersecurity_source", "intersecTimeright", "intersec____right", "intersecurity03source", "intersec10component", "intersecond00target", "interSec_Left", "intersec00rest", "intersecTimeleft", "intersecacleft", "intersecdtarget", "interwin_last", "intersec_top", "intersecxleft", "interbc_position", "interseq_left", "interloc_Left", "intersec_l", "intersec____data", "interseq_page", "intersection_ll", "intersecacentry", "intersec_Left", "intersec64position", "interwin00lat", "intersecdleft", "intersec_back", "intersec09entry", "intersec____left", "intersecacfull", "interwin_lat", "intersec09left", "intersec\u00c2inner", "intersecTimerest", "interseq_body", "intersec\u00c2left", "interbc2position", "intersec00tree", "intersector_el", "intersectLeft", "intersecond00left", "intersecacinner", "intersecurity03left", "interloc___low", "intersecond_lock", "intersec00lat", "intersecond_left", "interwin00last", "intersec_search", "intersectlow", "intersec09body", "intersecond_all", "interSec_l", "interserver_right", "intersecond00bottom", "intersecxtree", "intersec2lock", "interbc2last", "intersec_component", "intersec_target", "intersec_lat", "interSec_left", "intersec03left", "intersec_lock", "intersecurity03search", "intersec_net", "intersec64last", "intersecondtall", "intersec00last", "intersec\u00c2el", "intersec2all", "intersec_ll", "interSec_piece", "intersec_center", "intersecdlat", "interSec_inner", "interbc2left", "intersec_entry", "intersec8tree", "interbc2entry", "intersec____loc", "interloc___lock", "intersec2last", "interserver_inner", "intersecurity03component", "intersecond_back", "intersec00bottom", "intersec_piece", "interserver_left", "intersecdlast", "intersec_tree", "intersec8page", "intersector_lt", "intersecond_full", "interbc_entry", "intersec___low", "intersec03search", "intersecond00back", "intersecondtlock", "intersec___left", "intersec2left", "intersec_loc", "intersec10source", "intersec_lt", "interloc_left", "intersection_lock", "intersecurity_search", "interwin_left", "intersectlock", "intersec8body", "intersection_search", "intersecond_entry", "intersec8right", "intersec8center", "intersec00left", "intersecxtop", "intersec00back", "intersec_last", "intersec_inner", "interwin00target", "interwin00left", "intersec___Left", "intersec___lock", "intersec64left", "interloc___left", "interserver_one", "interbc_last", "intersec09inner", "intersec10search", "intersecond_inner", "intersec03component", "intersec_data", "intersec\u00c2lt", "intersec64entry", "intersec_source", "intersecTimetree", "intersec_right", "interloc_lock", "intersecurity_component", "intersecond_last", "intersec_position", "intersec09one", "intersec00target", "intersec_low", "intersec09right", "intersec2position", "intersecond_bottom", "intersec_page", "intersector_inner", "intersecond_target", "interbc_left", "intersec09last", "intersec09page", "intersec2entry", "interSec_right", "intersec03source", "intersec_rest", "intersecxright", "intersectleft", "intersectlast", "intersector_left", "intersec_body", "intersec_expr"], "now_left": ["now_start", "here_start", " NOW_left", "now_lock", "nowlylock", "nowlyyes", "nowlyright", "nowlystart", "here_left", " now_right", " NOW_log", "NOW_field", "now_l", " now_only", "now_yes", "nowlyleft", "NOW_right", "nowlyfield", "ow_right", " NOW_only", "here_result", "now_right", "here_yes", "ow_lo", " NOW_right", "nowlyresult", "ow_left", "now_log", "NOW_lock", "now_only", "now_low", " now_l", "now_field", "NOW_left", "now_result", "ow_low", "now_lo"]}}
{"code": "n,m = map(int,input().split())\\n# 1\u30b1\u30fc\u30b9\u3067\u304b\u304b\u308b\u6642\u9593\u3092\u6c42\u3081\u308b\\ntotal = m*1900 + (n-m)*100\\n# \u5168\u3066\u306e\u30b1\u30fc\u30b9\u3067\u6b63\u89e3\u3059\u308b\u78ba\u7387\u306e\u5206\u6bcd\\nprob_all = 2**m\\nprint(total * prob_all)", "target": "308", "substitutes": {"n": ["N", "x", "nt", "d", "p", "i", "w", "sn", "r", "c", "z", "ns", "o", "h", "f", "b", "fn", "num", "t", "nb", "v", "s", "nn", "l", "q", "u", "j", "k"], "m": ["mi", "km", "M", "mr", "dm", "d", "p", "mm", "mu", "mo", "i", "w", "r", "c", "bm", "o", "ms", "f", "b", "t", "mc", "mn", "v", "l", "k", "j", "cm"]}}
{"code": "n = int(input())\\nA = [int(input()) for _ in range(n)]\\n\\nB = []\\nimport bisect\\nfor i, a in enumerate(A):\\n    if len(B) == 0:\\n        B.append(-a)\\n    else:\\n        j = bisect.bisect_right(B, -a)\\n        #print(j)\\n        if j == len(B):\\n            B.append(-a)\\n        elif j == 0:\\n            B[0] = -a\\n        else:\\n            B[j] = -a\\n    #print(B)\\n#print(B)\\nprint(len(B))\\n", "target": "245", "substitutes": {"n": ["N", "x", "nt", "d", "p", "ne", "sn", "c", "m", "ns", "nl", "f", "b", "num", "t", "len", "nb", "no", "mn", "na", "v", "nc", "nm", "nan", "nu", "nw", "nn", "l", "q", "np", "network"], "A": ["GA", "N", "API", "An", "IA", "Abs", "AT", "mA", "I", "NA", "AL", "AST", "AV", "ABC", "AB", "AE", "LA", "AA", "As", "WA", "AR", "AS", "EA", "ICA", "CA", "At", "JA", "AF", "TA", "ATA", "AM", "SA", "AC", "ACT", "BA", "Array", "AP"], "_": ["ex", " the", "__", " all", "ix", "val", "of", " l", "all", "un", " p"], "B": ["LB", "BI", "N", "CB", "T", "Output", "RB", "VB", "BL", "BS", "OB", "Bs", "SB", "I", "L", "Two", "Next", "IB", "Builder", "AB", "V", "BT", "b", "BE", "BC", "Bar", "Break", "J", "GB", "WB", "BR", "G", "BB", "TB", "FB", "Bern", "Base", "EB", "NB", "DB", "Bytes", "BA", "Array", "Blue"], "i": ["xi", "x", "d", "p", "ai", "I", "r", "m", "z", "bi", "o", "ind", "f", "b", "ri", "si", "li", "v", "ti", "at", "l", "pi", "id", "y", "index", "ij"], "a": ["ia", "sta", "ae", "ac", "ta", "d", "p", "ana", "g", "va", "ai", "xa", "w", "c", "ma", "z", "ata", "ea", "pa", "la", "b", "t", "alpha", "art", "si", "wa", "na", "an", "att", "v", "ap", "al", "at", "sa", "s", "au", "aa", "pi", "am", "ar", "area", "ao"], "j": ["ja", "aj", "p", "g", "jp", "I", "r", "c", "z", "m", "jj", "bi", "f", "b", "br", "t", "J", "ji", "v", "P", "it", "jump", "q", "l", "k", "index", "ij"]}}
{"code": "x = int(input())\\na = int(input())\\nb = int(input())\\n\\nmoney = x - a\\nrimining_money = money % b\\n\\nprint(rimining_money)", "target": "98", "substitutes": {"x": ["n", "xi", "ex", "p", "g", "xc", "xa", "X", "i", "rx", "w", "r", "c", "ox", "z", "m", "o", "tx", "ax", "f", "t", "amount", "v", "e", "xy", "xs", "xx", "l", "u", "y"], "a": ["n", "ae", "ta", "d", "xa", "ai", "i", "c", "ma", "m", "z", "raction", "ax", "t", "alpha", "amount", "add", "an", "e", "all", "A", "al", "at", "sa", "af", "ao", "au", "ed", "aa", "am", "ar", "y", "area", "ba", "ca"], "b": ["n", "sb", "bf", "ab", "d", "p", "db", "sub", "g", "i", "r", "w", "bg", "c", "m", "z", " B", "bi", "rb", "o", "be", "f", "bc", "t", "nb", "B", "bb", "v", "e", "A", "s", "cb", "l", "j", "y", "BA", "bs", "ba"], "money": ["company", "fine", "bank", "currency", "euro", "value", "blue", "iban", "m", "mass", "type", "total", "message", "payment", "change", "o", "angle", "result", "time", "t", "multi", "price", "Money", "volume", "amount", "ot", "margin", "dollar", "balance", "rice", "number", " Money", "coin", "y", "data", "micro", "buy", "sum"], "rimining_money": ["rimining_volume", "rimining_price", "rimining__money", "rimining__change", "riminingedvalue", "rimining__price", "rimining_change", "rimined_price", "rimining__volume", "rimined_change", "rimining___volume", "rimining___money", "rimined_volume", "rimining_value", "rimined_value", "rimined_money", "riminingedmoney", "riminingedprice", "rimining___change", "rimining___price"]}}
{"code": "def resolve():\\n    '''\\n    code here\\n    '''\\n\\n    N, M = [int(item) for item in input().split()]\\n    A = [input() for _ in range(N)]\\n    B = [input() for _ in range(M)]\\n\\n    is_found = False\\n    for i in range(N-M+1):\\n        temp_line = A[i:i+M]\\n        for j in range(N-M+1):\\n            temp_grid = [line[j:j+M] for line in temp_line]\\n            # print(temp_grid)\\n            if B == temp_grid:\\n                is_found = True\\n                break\\n        if is_found:\\n            break\\n\\n    print('Yes') if is_found else print('No')\\n\\nif __name__ == \"__main__\":\\n    resolve()\\n", "target": "483", "substitutes": {"N": ["SN", "CNN", "n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "NR", "NT", "NH", "H", "V", "NO", "Z", "S", "NE", "J", "Q", "G", "ND", "P", "D", "NB", "MN", "Ni", "K", "AN", "TN", "C"], "M": ["MO", "T", "CM", "MU", "MAT", "GM", "R", "I", "L", "NM", "RM", "m", "DI", "Mi", "H", "SM", "MM", "O", "V", "MC", "C", "MD", "IM", "S", "MAN", "J", "Q", "G", "P", "MP", "MED", "E", "ME", "MS", "D", "DM", "TM", "Size", "MN", "MI", "MT", "U", "LM", "F", "PM", "MR"], "item": ["n", "instance", "name", "order", "value", "cell", "items", "m", "unit", "my", "slot", "page", "case", "result", "word", "num", "piece", "source", "inner", "key", "int", "row", "string", "it", "node", "char", "element", "q", "id", "index", "hit", "Item", "member", "entry", "text", "article"], "A": ["a", "T", "Ax", "An", "AH", "AT", "R", "I", "X", "L", "AL", "AB", "AE", "RA", "H", "AA", "LA", "As", "O", "V", "AR", "S", "G", "P", "AP", "CA", "At", "E", "D", "AF", "TA", "Y", "DB", "U", "AC", "C"], "_": ["ing", "ly", "Local", "____", "___", "Time"], "B": ["T", "BS", "Bs", "R", "I", "X", "L", "AB", "W", "O", "V", "b", "S", "BC", "J", "G", "WB", "P", "BB", "E", "D", "NB", "Y", "BO", "BA", "Z", "C"], "is_found": ["is_Found", "has_Found", "has_find", "is_find", "is2valid", "is2Found", "has_valid", "is_valid", "is2found", "has_found", "is2find"], "i": ["mi", "ki", "n", "xi", "x", "ia", "ie", "ci", "gi", "vi", "di", "ai", "I", "m", "bi", "yi", "qi", "iti", "ic", "ip", "iri", "ri", "si", "iv", "li", "ii", "ji", "v", "ori", "ti", "oi", "im", "it", "zi", "ini", "ui", "phi", "pi", "u", "id", "y", "ij", "iu", "hi"], "temp_line": ["temp_block", " temp_Line", "temp_Line", "temp_node", "temp_cell", "temp2Line", "Temp_block", "Temp_line", "temp2cell", " temp_node", "temp2block", "Temp_Line", "Temp_cell", "temp2line"], "j": ["n", "x", "uj", "ja", "js", "d", "aj", "p", "g", "jp", "c", "jc", "z", "m", "jj", "bi", "o", "h", "jl", "br", "b", "fr", "je", "jac", "J", "li", "key", "out", "v", "ji", "kj", "obj", "it", "jump", "q", "l", "dj", "u", "y", "k", "ij"], "temp_grid": ["temp_block", "tempgrgrid", "tempgrGrid", "tempgrblock", "tem_block", "tempgrline", "tem_grid", "temp_Grid", "tem_Grid", "tem_line"], "line": ["a", "ine", "label", "path", "ln", "point", "edge", "name", "cycle", "code", "rule", "L", "job", "Line", "lines", "cell", "c", "section", "eline", "page", "b", "block", "li", "e", "row", "lane", "obj", "LINE", "node", "stroke", "slice", "l", "link", "index", "data", "lin", "entry", "source", "chain"]}}
{"code": "O = input()\\nE = input()\\nans = \"\"\\nfor i in range(len(E)):\\n  ans+=O[i]\\n  ans+=E[i]\\n  \\nif len(O)>len(E):\\n  ans+=O[len(O)-1]\\n\\nprint(ans)", "target": "102", "substitutes": {"O": ["M", "N", "OG", "T", "FO", "OP", "OST", "GO", "OB", "DO", "OW", "R", "I", "L", "SO", "OX", "OD", "RE", "Ob", "OS", "o", "H", "OL", "LO", "OR", "OU", "S", "B", "J", "OA", "Q", "G", "P", "OO", "Os", "A", "OH", "OE", "OC", "D", "PO", "ON", "OK", "RO", "TO", "U", "F", "OT", "IO"], "E": ["Other", "Ve", "N", "Es", "M", "T", "EEE", "EN", "ES", "ATE", "Gene", "R", "I", "PE", "L", "X", "DE", "ENE", "IE", "AE", "RE", "FE", "GE", "AME", "V", "EU", "EE", "APE", "NOTE", "ER", "UE", "GRE", "Se", "BE", "S", "EC", "NE", "EF", "REE", "P", "e", "SE", "ET", "ME", "OE", "OME", "ED", "D", "TE", "U", "Ge", "EO", "EA", "EL", "C"], "ans": ["ars", "ols", "ANS", "ants", "ats", "ians", "\u00e1n", " means", "eds", "outs", "ros", "aus", "us", "lets", "aned", " Ans", "ts", "ns", "ann", "rans", "mas", "man", "reads", "ks", "offs", "ins", "anas", "ras", "ons", "values", "ms", "annot", "amps", "ls", "pan", "ents", "ens", "cas", "cons", "uns", "ados", "an", "posts", "ees", "can", "iann", "oss", "anes", "ays", "s", "ands", "aos", "yes", "ads", "arts", "cs", "oes", "os", "es", "lan", "AN", "ds", "ps", "olds"], "i": ["a", "mi", "n", "xi", "x", "ci", "gi", "p", "di", "I", "r", "c", "m", "batch", "set", "ix", "o", "ip", "ind", "b", "multi", "si", "sim", "li", "key", "ii", "v", "ori", "e", "ti", "list", "s", "im", "it", "zi", "ini", "q", "l", "pi", "id", "j", "index", "y", "ij", "iri"]}}
{"code": "S, W = map(int,input().split())\\nans = \"safe\"\\nif(S<=W):\\n  ans = \"unsafe\"\\nprint(ans)", "target": "585", "substitutes": {"S": ["M", "N", "NS", "SF", "SH", "BS", "SS", "SB", "R", "I", "ESS", "SER", "RS", "TPS", "Su", "VS", "SI", "CS", "TS", "Vs", "GS", "V", "B", "J", "SK", "P", "A", "s", "Is", "SU", "SP", "DS", "System", "SA", "F", "LS", "Z", "C"], "W": ["WT", "WC", "M", "N", "T", "MW", "WI", "WAR", "Win", "OW", "NW", "WP", "R", "L", "RW", "w", "WW", "VW", "BW", "H", "V", "WA", "SW", "Q", "G", "P", "D", "WM", "FW", "EW", "DW", "F", "WS"], "ans": ["arms", "ars", "ANS", "ants", "ats", "beans", "ean", "ana", "cn", "outs", "aus", "ros", "san", "aned", "ts", "ns", "ann", "rans", "rs", "leans", "utters", "anas", "res", "ins", "ras", "ms", "amps", "rets", "pan", "ls", "ens", "cons", "uns", "can", "an", "posts", "gs", "anks", "oss", "plan", "anes", "des", "aps", "s", "sv", "ran", "ams", "aos", "vs", "aints", "cs", "arts", "lan", "said"]}}
{"code": "import collections\\nimport heapq\\nimport copy\\nn,m,p = map(int,raw_input().split(' '))\\n\\nadj = collections.defaultdict(list)\\ndef f(e,p):\\n\tu,v,w = e\\n\treturn (u,v,p-w)\\n\\nedges = [f(map(int, raw_input().split()), p) for _ in range(m) ]\\n\\nfa = collections.defaultdict(list)\\nba = collections.defaultdict(list)\\nfor u,v,_ in edges:\\n\tfa[u].append(v)\\n\tba[v].append(u)\\ndef dfs(u,adj,vis):\\n\tstack = collections.deque([u])\\n\twhile(stack):\\n\t\tuu = stack.pop()\\n\t\tvis.add(uu)\\n\\n\t\tfor v in adj[uu]:\\n\t\t\tif v not in vis:\\n\t\t\t\tvis.add(v)\\n\t\t\t\tstack.append(v)\\nva = set([1])\\ndfs(1, fa, va)\\n\\nvb = set([n])\\ndfs(n, ba, vb)\\n\\nh = {u: (+float('inf') if u > 1 else 0) for u in range(1, n + 1)}\\n\\nfor _ in range(n-1):\\n\tfor u,v,w in edges: h[v] = min(h[v], h[u] + w)\\n\\nfnc = False\\nfor u,v,w in edges: \\n\tif v in va and v in vb and h[v] > h[u] + w:\\n\t\tfnc = True\\n\t\tbreak\\nprint max(0,-h[n]) if (not(fnc) and h[n] != +float('inf')) else -1", "target": "88", "substitutes": {"n": ["a", "N", "x", "nt", "d", "en", "ne", "cn", "g", "ul", "dn", "i", "r", "c", "sn", "z", "ns", "o", "nl", "f", "b", "num", "t", "nb", "mn", "out", "na", "an", "nc", "nm", "un", "nan", "nu", "nn", "l", "q", "np", " N", "ng", "k", "j", "pn"], "m": ["a", "mi", "km", "M", "dm", "d", "mm", "g", "dn", "i", "r", "c", "bm", "o", "gm", "ms", "b", "num", "t", "mc", "mn", "an", "s", "q", "l", "np", "k", "y", "j"], "p": ["a", "x", "d", "pc", "g", "i", "r", "c", "pe", "pb", "o", "tp", "pa", "f", "b", "t", "part", "pt", "wp", "pid", "pos", "P", "ap", "cp", "s", "dp", "q", "l", "pi", "bp", "j", "k", "y", "pn", "pp", "ps"], "adj": ["aq", "conn", "prev", "ja", "um", "aff", "aj", "gn", "js", "en", "order", "di", "nav", "rev", "ai", "acc", "jp", "inv", "map", "prefix", "graph", "wd", "ind", "ax", "jac", "vg", "dat", "env", "adv", "wa", "av", "nv", "add", "att", "ad", "ap", "obj", "ani", "app", "au", "hd", "div", "np", "j", "attr", "ij", "ag", "dict", "obs", "ac"], "e": ["ec", "x", "ge", "ae", "d", "en", "edge", "ep", "re", "r", "ate", "c", "pe", "el", "o", "ea", "f", "oe", "ef", "t", "eu", "ee", "ei", "E", "s", "eg", "eps", "ed", "et", "element", "l", "se", "es", "ele", "er"], "u": ["ut", "bu", "lu", "uk", "uj", "su", "gu", "um", "mu", " nu", "ul", "ue", "i", "uid", "uni", "us", "uv", "c", "z", "itu", "ju", "hu", "o", "pu", "f", "b", "num", "uc", "ud", "tu", "ug", "eu", "uci", "ru", "un", "up", "fu", "ou", "ur", "it", "ui", "uf", "nu", "au", "cu", "user", "du", "yu", "k", "U", "iu"], "v": ["a", "qv", "x", "gu", "vv", "vert", "vi", "ul", "g", "vo", "tv", "rev", "vp", "i", "value", "ue", "r", "uv", "current", "c", "inv", "z", "us", "ev", "dev", "ju", "vy", "o", "val", "vr", "V", "f", "b", "vc", "t", "iv", "ver", "av", "nv", "un", "lv", "ou", "s", "it", "sv", "conv", "vm", "ui", "ve", "q", "l", "vs", "ov", "var", "j", "vt", "y", "k", "iu", "vu"], "w": ["wx", "sw", "x", "wn", "d", "g", "tw", "wh", "we", "wt", "r", "weight", "c", "z", "wed", "wb", "wr", "window", "rw", "wi", "W", "wd", "kw", "wal", "f", "b", "word", "ew", "t", "wid", "wl", "win", "wa", "wp", "fw", "width", "ws", "s", "ww", "ch", "rew", "nw", "q", "l", "aw", "y"], "edges": ["edgets", "Edges", "edles", " wedges", "edsgre", "ledgel", "EDdies", " wedgers", " wedles", "edgel", "edge", "reedgre", "edsdies", "EDgets", "edsGES", "Edge", "EDges", "pedgest", " ledgers", " ledles", "tedges", "ledgets", "edgre", " wedgel", "eddies", "wedgel", "ledges", "EDGES", "reedges", "wedgers", "pedgre", "edsgest", "Edgets", " ledgel", "reedgets", " ledges", "teddies", "pedges", "wedles", "edGES", "wedges", "tedGES", "edgers", "edgest", "reedgest", "EDgel", "Edgel", "edsges", "tedgets", "pedgets", "EDge", "ledge", "edsgets"], "_": ["N", "sw", "x", "ex", " the", " y", " j", "__", "ox", "z", "ix", "W", "res", "o", "val", "ew", "t", "pt", "no", " x", "non", "out", " __", " mult", "j", " un"], "fa": ["a", "lu", "ia", "bal", "ja", "ava", "ta", "vi", "vo", "bi", "fc", "ica", "fb", "ga", "bo", "ju", "bra", "ea", "pa", "aaa", "f", "vol", "fal", "fe", "ua", "wa", "fo", "apa", "fl", "na", "FA", "sa", "ha", "ena", "au", "oa", "aa", "fg", "fi", "ifa", "ca", "ac"], "ba": ["a", "bu", "ja", "ava", "bar", "ta", "aba", "ana", "bd", "bi", "Ba", "ga", "bo", "bra", "ea", "pa", "aaa", "la", "br", "b", "bc", "ova", "da", "wa", "bn", "na", "lab", "sa", "ha", "bet", "ena", "oa", "au", "bl", "aa", "ka", "BA", "bs", "ca"], "vis": ["conn", "mit", "ia", "ja", "gu", "ava", "um", "vert", "stat", "en", "vi", "view", "ang", "di", "nav", "fs", "rev", "iz", "ma", "inv", "map", "ref", "ju", "vy", "visible", "act", "vg", "jac", "vol", "wa", "ver", "av", "conf", "vid", "pos", "na", "Vis", "nz", "ha", "gen", "ve", "virt", "see", "vs", "fg", "link", "j", "vt"], "stack": ["history", "top", "hold", "next", "race", "acks", "sw", "reverse", "load", "queue", "local", "space", "loop", "cycle", "reset", "flat", "iter", "store", "z", "push", "batch", "set", "buffer", "wait", "wall", "window", "mount", "bo", "graph", "sl", "track", "level", "sp", "out", "frames", "list", "pop", "stream", "cache", "switch", "st", "fake", "now", "pres", "new", "stage", "slice", "roll", "tmp", "Stack", "scope", "pack", "ack", "trace", "chain"], "uu": ["bu", "lu", "uk", "uj", "su", "um", "ux", "ue", "uid", "uni", "us", "uv", "itu", "ju", "hu", "pu", "uh", "uc", "ua", "ud", "tu", "ug", "eu", "uy", "uci", "ru", "fu", "ou", "ui", "uf", "nu", "au", "cu", "du", "yu", "iu"], "va": ["bu", "lu", "ia", "sta", "ja", "ava", "von", "ta", "Va", "ana", "vi", "vo", "vas", "ma", "ga", "bo", "ju", "ea", "pa", "pu", "buf", "ova", "vol", "VA", "wa", "ua", "fo", "av", "anta", "afa", "qa", "sa", "ha", "au", "oa", "cu", "aa", "ka", "vt", "fi", "ca"], "vb": ["vbb", "cvb", "visba", "Va", "vba", " vbb", "wbs", "visbs", "verrb", " vba", "vvba", "vB", "wb", "verb", "vera", "wB", "Vbb", "verba", "wbi", "Vrb", "vvb", "Vbs", "Vb", "Vba", " vB", "visb", "vvrb", "visbb", "vva", "vbs", "cvB", "vrb", "cvbi", " vbs", "vbi", "cvbs", " vbi"], "h": ["history", "hold", "ht", "header", "sh", "kh", " inh", "hz", "html", "hal", "r", "hs", "c", "ih", "rh", "help", "o", "H", "ah", "host", "bh", "f", "b", "uh", "hl", "hp", " H", "oh", "cache", "has", "hash", "ha", "hw", "ph", "s", "he", "hr", "hd", "q", "ho", "l", "phi", "hh", "j", "dict", "hi", "hm"], "fnc": ["lgc", "fbc", "vnec", " fnt", "forcc", "ifsync", "wnc", "cnc", "wcc", " fnec", "vcons", "fnec", "rfcc", "fsync", "fcons", "rfcons", "wcs", "fnt", "rfnc", "fcc", "cbc", "wnt", "ifnc", " fcons", "fornt", "vcc", "forcs", "fcs", " fcs", "fgc", " fcc", "vnc", "fornc", "rfnec", "ifbc", "lbc", "lsync", "csync", "lnc", "cgc", "ifgc"]}}
{"code": "N = int(input())\\nH = list(map(int,input().split()))\\n\\nfor i in range(1,N):\\n    if H[-i] < H[-i-1]:\\n        H[-i-1]-= 1\\n        if H[-i] < H[-i-1]:\\n            print('No')\\n            exit()\\n            \\n    \\nprint('Yes')", "target": "230", "substitutes": {"N": ["SN", "n", "M", "NS", "T", "EN", "NV", "NC", "GN", "NI", "Ns", "X", "I", "NA", "L", "NM", "NN", "NR", "NT", "NH", "NF", "V", "No", "Z", "NE", "J", "G", "ND", "P", "A", "D", "NB", "Ni", "K", "TN", "C"], "H": ["Graph", "M", "CH", "HQ", "HD", "T", "HM", "SH", "HP", "His", "GO", "HS", "HL", "HE", "Alpha", "X", "Ha", "I", "L", "AH", "HO", "HI", "GH", "HTML", "NH", "h", "TH", "V", "HH", "ANG", "B", "J", "Q", "History", "HA", "P", "A", "Head", "OH", "Host", "Han", "HC", "MH", "Y", "HTTP", "HB", "K", "F", "HT", "Z", "He", "C"], "i": ["mi", "n", "xi", "x", "ex", "ia", "to", "ci", "gi", "cli", "p", "di", "ai", "I", "c", "m", "z", "bi", "ic", "ix", "ip", "h", "ind", "f", "b", "multi", "t", "io", "si", "sat", "li", "ii", "key", "v", "ori", "ti", "im", "s", "it", "zi", "ui", "one", "q", "phi", "pi", "l", "ali", "id", "y", "j", "k", "ij", "fi", "iu", "like"]}}
{"code": "n=int(input())\\ns=input()\\ncnt=0\\nfor m in range(1000):\\n  m=str(m).zfill(3)\\n  j=0\\n  for i in m:\\n    if i not in s[j:]:break\\n    j+=s[j:].index(i)+1\\n  else:cnt+=1\\nprint(cnt)", "target": "756", "substitutes": {"n": ["N", "x", "d", "p", "r", "sn", "c", "z", "ns", "o", "h", "ms", "f", "b", "num", "t", "nb", "mn", "na", "v", "e", "nm", "nn", "l", "q", "k"], "s": ["a", "sb", "sw", "str", "js", "p", "g", "r", "hs", "w", "c", "ts", "south", "ns", "rs", "input", "ses", "ins", "sl", "h", "ms", "ls", "abs", "b", "sp", "t", "ss", "S", "tes", "states", "strings", "e", "gs", "ws", "sm", "st", "sv", "xs", "bes", "q", "l", "sts", "cs", "ds", "bs"], "cnt": ["rount", "CNT", "cgt", "rnt", "Cpt", "cNT", "cct", "ccount", "rcNT", "rccount", "rcnt", "crpt", "rgt", "Ccount", "crcount", "count", " cNT", " ccount", " cct", "rcct", "Cct", "cpt", "crNT", " count", "crnt", " cgt", "Cgt", "Cnt", "Count", " cpt", "rct"], "m": ["tm", "a", "mi", "M", "x", "me", "dm", "mini", "p", "mm", "d", "mp", "g", "r", "w", "c", "ma", "z", "mut", "o", "gm", "h", "ms", "ind", "f", "b", "mis", "num", "arm", "mc", "t", "mn", "v", "nm", "om", "sm", "im", "ch", "q", "l", "met", "id", "k", "y", "mt", "cm", "ym"], "j": ["next", "json", "x", "uj", "ja", "str", "js", "d", "p", "g", "jp", "r", "c", "jc", "z", "jj", "note", "step", "h", "pr", "ind", "dt", "f", "b", "br", "fr", "t", "J", "pos", "out", "ji", "v", "kj", "obj", "now", "it", "jump", "q", "l", "dj", "y", "k", "index", "ij"], "i": ["\u00ed", "mi", "ki", "a", "xi", "x", "ia", "ie", "ci", "gi", "p", "di", "ai", "I", "c", "z", "bi", "yi", "iti", "ic", "ix", "o", "ip", "si", "li", "ii", "ji", "v", "ti", "oi", "im", "it", "zi", "ini", "l", "pi", "id", "index", "k", "ij", "ik", "iu"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\nclass UnionFind:\\n    def __init__(self, n):\\n        self.data = [0] * N\\n        for i in range(N):\\n            self.data[i] = i\\n            \\n    def get_root(self, x):\\n        r = self.data[x]\\n        if r == x:\\n            return r\\n        p = self.get_root(r)\\n        self.data[x] = p\\n        \\n        return p\\n    \\n    def unite(self, x, y):\\n        rx = self.get_root(x)\\n        ry = self.get_root(y)\\n        \\n        if rx != ry:\\n            self.data[rx] = ry\\n\\n    def same(self, x, y):\\n        return self.get_root(x) == self.get_root(y)\\n\\nN, K, L = map(int, input().split())\\nLA = [[int(v) - 1 for v in input().split()] for _ in range(K)]\\nLB = [[int(v) - 1 for v in input().split()] for _ in range(L)]\\n\\nu1 = UnionFind(N)\\nfor x, y in LA:\\n    u1.unite(x, y)\\n    \\nu2 = UnionFind(N)\\nfor x, y in LB:\\n    u2.unite(x, y)\\n\\nresult = {}\\nfor i in range(N):\\n    a = u1.get_root(i)\\n    b = u2.get_root(i)\\n    \\n    if result.get((a, b)) == None:\\n        result[(a, b)] = 0\\n    result[(a, b)] += 1\\n    \\nfor i in range(N):\\n    a = u1.get_root(i)\\n    b = u2.get_root(i)\\n    \\n    print(result[(a, b)], end = \"\")\\n    if i != N - 1:\\n        print(\" \", end = \"\")\\n    else:\\n        print()\\n", "target": "21", "substitutes": {"input": ["json", "conn", "pattern", "str", "cat", "context", "select", "util", "frame", "view", "init", "get", "child", "value", "image", "raw", "txt", "ref", "buffer", "unit", "read", "prefix", "ctx", "format", "step", "output", "cmd", "fix", "fn", "config", "form", "initial", "parse", "conf", "out", "na", "add", "Input", "int", "filter", " inspect", "stream", "update", " read", "list", "it", "csv", "reference", "print", " Input", "q", "reader", "np", "lat", "command", "join", "text", "source", "request"], "self": ["cmp", "instance", "err", "wn", "mp", "left", "ns", "dev", "log", "config", "close", "disk", "private", "e", "obj", "compl", "wrapper", "app", "new", "q", "reader", "np", "mem", "se", "history", "pkg", "sw", "conn", "before", "me", "local", "ln", "get", "own", "this", "pre", "sect", "full", "my", "prefix", "parent", "shape", "py", "also", "params", "console", "s", "debug", "handle", "cl", "user", "error", "scope", "python", "nd", "nt", "db", "spec", "txt", "sys", "ref", "subject", "xml", "make", "h", "you", "form", "add", "remote", "resp", "github", "all", "cache", "partial", "public", "os", "md", "attr", "dict", "Self", "th", "path", "view", "sub", "w", "rem", "diff", "details", "rs", "rb", "ren", "func", "ls", "t", "rel", "final", "ws", "first", "proc"], "n": ["nt", "ni", "ne", "c", "m", "ns", "num", "t", "nb", "na", "Num", "int", "nu", "size", "nn", "number", "pi", "np", "l", "k", "Ni", "index"], "data": ["next", "apps", "state", "pieces", "modules", "table", "db", "actions", "names", "name", "images", "test", "store", "lines", "items", "map", "batch", "ns", "DATA", "details", "read", "blocks", "children", "shape", "info", "dev", "res", "output", "default", "values", "flags", "done", "right", "config", "root", "dat", "da", "dates", "results", "params", "users", "list", "cache", "members", "debug", "first", "group", "size", "devices", "reg", "index", "groups", "stats", "dict", "options", "last", "Data"], "i": ["mi", "ki", "xi", "ie", "gu", "ci", "gi", "cli", "di", "ai", "I", "c", "m", "z", "bi", "info", "yi", "ic", "o", "ix", "ip", "iri", "ind", "f", "t", "io", "si", "li", "ii", "e", "int", "ti", "s", "it", "im", "zi", "ini", "phi", "pi", "l", "u", "id", "j", "index", "k", "ij", "fi", "iu", "hi", "ik"], "x": ["wx", "xi", "ex", "any", "xe", "on", "ux", "xc", "X", "xa", "re", "w", "c", "ox", "z", "xxxx", "el", "xxx", "xt", "hex", "xml", "ix", "res", "o", "ic", "ip", "h", "tx", "pr", "ax", "f", "root", "t", "ay", "e", "fx", "www", "row", "at", "xy", "xs", "dx", "inx", "q", "l", "xx", "nex", "u", "yx", "lex", "k", "j", "px", "index", "xp", "xf"], "r": ["nr", "mr", "sr", "kr", "rr", "pair", "ro", "d", "g", "R", "rc", "re", "c", "m", "ref", "rh", "rs", "rb", "res", "rm", "h", "pr", "vr", "rar", "fr", "f", "t", "rl", "e", "ur", "it", "rt", "q", "l", "ar", "j", "er", "cr", "root", "rd"], "p": ["pkg", "pair", "pm", "d", " pr", "pc", "vp", "rep", "jp", "rc", "re", "c", "m", "fp", "pb", "par", "pa", "pr", "br", "f", "t", "part", "pt", "lp", "out", "P", " xp", "row", "ph", "cp", "s", "q", "l", "pl", "np", "ar", "j", " P", "pp", "ps", "root"], "y": ["sy", "ty", "ys", "ym", "yer", "g", "wy", "cy", "c", "yo", "z", "ies", "my", "ny", "yi", "story", "vy", "o", "ye", "py", "yr", "sky", "ery", "dy", "t", "yl", "ot", "uy", "yn", "ey", "gy", "iy", "xy", "ch", "yt", "l", "yy", "Y", "fy", "j", "er", "ya", "yu", "ay"], "rx": ["wx", "nr", "xi", "rex", "kr", "rr", "ex", "ro", "mr", "ty", "ra", "ux", "wy", "rc", "R", "re", "ox", "rie", "rb", "res", "rm", "rys", "tx", "vr", "pr", "ri", "rl", "ru", "row", "rez", "rt", "yx", "cr", "rd"], "ry": ["ary", "nr", "wx", "mr", "ty", "kr", "rr", "rey", "ro", "RY", "rep", "wy", "rc", "cy", "re", "ox", "z", "ly", "rh", "cry", "vy", "res", "ye", "ries", "yr", "rys", "tx", "vr", "rar", "ric", "fr", "ri", "ru", "row", "rez", "rt", "yx", "er", "cr", "ray", "Ry", "rd"], "N": ["SN", "CNN", "M", "NS", "T", "NL", "NV", "NC", "GN", "NI", "Na", "Ns", "R", "I", "X", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "O", "V", "TN", "No", "NO", "NUM", "S", "MAN", "NE", "B", "J", "Q", "G", "P", "Num", "A", "D", "NB", "Y", "Size", "MN", "Ni", "F", "AN", "Z", "Note", "C"], "K": ["M", "T", "KN", "KR", "MK", "AK", "X", "R", "I", "KT", "Kin", "H", "V", "KS", "KC", "PK", "S", "B", "J", "Q", "SK", "Kn", "P", "A", "Han", "VK", "Y", "UK", "MN", "k", "AN", "KI", "KE", "KA", "KING", "C"], "L": ["M", "NL", "DL", "T", "List", "BL", "PL", "SL", "R", "I", "LC", "TL", "LR", "V", "S", "FL", "LT", "B", "J", "LI", "P", "RL", "VL", "LG", "D", "Lu", "Y", "l", "LL", "Len", "LE", "LM", "LS", "LP", "EL"], "LA": ["GA", "LIN", "LY", "IA", "PL", "AU", "NA", "La", "AL", "AMA", "ZA", "RA", "LR", "PA", "LU", "la", "AA", "LO", "LT", "KA", "LI", "HA", "FA", "A", "MA", "LG", "TA", "LAN", "LE", "SA", "LM", "BA", "LS", "LP", "ERA"], "v": ["qv", "vert", "d", "vi", "get", "va", "value", "w", "uv", "c", "m", "z", "inv", "mut", "ev", "dev", "vy", "nov", "h", "val", "V", "vr", "cv", "f", "vc", "t", "iv", "ver", "nv", "vid", "e", "lv", "sv", "conv", "ve", "q", "var", "u", "j", "vt", "k"], "_": [" the", "__", "let", "place", "pt", "\u00e7", "___"], "LB": ["NL", "DL", "RB", "BL", "VB", "BS", "OB", "Lab", "LESS", "SB", "LC", "lb", "MX", "BG", "LR", "LU", "QB", "BP", "BC", "LT", "B", "GB", "PB", "LI", "BB", "LG", "TB", "FB", "Lu", "NB", "LL", "LAB", "LM", "LOC", "LP", "UB"], "u1": [" u3", "cu2", "nu2", "upload1", " u01", "cu1", "cu01", "ut3", "upload2", "UOne", "U5", "nu0", "upload0", "U1", "upload91", "ut01", "auOne", "u3", "ut1", "au1", "U3", " u5", "ut91", "nun", "ut2", "au3", "nu1", "un", "au5", "utn", " uOne", " u0", " u91", "uOne", "u01", "cu3", "ut0", "u91", "u5", " un", "u0"], "u2": [" u3", "util2", "ut3", "au7", "uttwo", "wtwo", "ut7", "utiltwo", "w2", "tutwo", "tu1", "u3", "ut1", "au1", "uTwo", " uTwo", "tu2", "utilTwo", "ut2", "auTwo", "au3", "u7", " u7", "tuTwo", "utwo", "au2", " utwo", "w1", "wTwo", "autwo", "util1"], "result": ["answer", "complete", "comment", "master", "summary", "correct", "void", "feature", "match", "table", "component", "ret", "test", "Result", "successful", "true", "replace", "report", "created", "process", "total", "message", "success", "output", "res", "display", "case", "done", "description", "double", "product", "response", "valid", "memory", "folder", "results", "out", "also", "search", "final", "cache", "debug", "date", "work", "public", "see", "profile", "command", "progress", "package", "relation", "sequence", "function", "trace", "use"], "a": ["aq", "ia", "sta", "ae", "ac", "ja", "ab", "era", "ta", "aj", "ra", "va", "xa", "ai", "za", "ma", "eas", "ga", "ea", "pa", "aaa", "la", "fa", "br", "\u00e4", "da", "ua", "apa", "eu", "na", "an", "e", "A", "at", "sa", "aka", "qa", "ao", "oa", "au", "aa", "am", "ar", "ya", "area", "ba", "ca"], "b": ["bis", "sb", "ab", "bar", "lib", "db", "emb", "g", "ib", "lb", "bg", "w", "c", "z", "wb", "fb", "rb", "o", "mb", "h", "be", "ob", "bh", "br", "f", "bc", "nb", "B", "bb", "e", "another", "s", "erb", "eb", "bl", "cb", "base", "l", "bp", "j", "bs"]}}
{"code": "# input\\nn = list(input())\\n\\nop = \"\"\\nfor i in n:\\n    if i == \"1\":\\n        op += \"9\"\\n    else:\\n        op += \"1\"\\n\\nprint(op)", "target": "370", "substitutes": {}}
{"code": "n, k = map(int, input().split())\\ns = input()\\n\\ns = s[ :k -1] + chr(ord(s[k - 1]) - ord(\"A\") + ord(\"a\")) + s[k:]\\nprint(s)", "target": "223", "substitutes": {"n": ["nr", "N", "nt", "d", "p", "cn", "i", "sn", "c", "m", "z", "ns", "nl", "h", "num", "fn", "t", "nb", "mn", "na", "v", "nc", "nm", "nu", "nn", "q", "l", "np", "j"], "k": ["ck", "km", "ki", "kn", "ek", "max", "kr", "kh", "kl", "ijk", "context", "ta", "p", "spec", "ask", "ke", "kid", "i", "w", "c", "m", "z", "dk", "ks", "kw", "ko", "tk", "kok", "mc", "conf", "kj", "v", "ok", "it", "ku", "q", "kk", "id", "ka", "sk", "K", "ik", "j", "mk", "sc"], "s": ["a", "sb", "sw", "ys", "summary", "su", "str", "ats", "js", "d", "p", "spec", "g", "i", "r", "w", "hs", "c", "ts", "z", "m", "ns", "ies", "sql", "rs", "ses", "ins", "o", "sl", "h", "ms", "ls", "f", "b", "sp", "abs", "t", "S", "ss", "its", "tes", "out", "v", "gs", "sq", "ws", "string", "gets", "sa", "sv", "so", "q", "l", "sis", "sts", "simple", "stats", "qs", "ps", "bs"]}}
{"code": "from collections import deque\\n\\n\\ndef discard(c: str, da: deque, db: deque, dc: deque) -> str:\\n    if eval(f'len(d{c})'):\\n        c = eval(f'd{c}.popleft()')\\n    else:\\n        return c.upper()\\n\\n    return discard(c, da, db, dc)\\n\\n\\ndef answer(sa: str, sb: str, sc: str) -> str:\\n    deque_a = deque(list(sa))\\n    deque_b = deque(list(sb))\\n    deque_c = deque(list(sc))\\n    return discard(deque_a.popleft(), deque_a, deque_b, deque_c)\\n\\n\\ndef main():\\n    sa, sb, sc = [input() for _ in range(3)]\\n    print(answer(sa, sb, sc))\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "34", "substitutes": {"c": ["ec", "a", "ce", "lc", "con", "n", "x", "ac", "str", "ci", "gc", "d", "cont", "p", "cd", "g", "ct", "rc", "cy", "arc", "r", "chain", "tc", "z", "m", "fc", "o", "col", "h", "cur", "case", "f", "b", "t", "dc", "mc", "anc", "cum", "v", "nc", "cin", "cos", "cp", "ch", "cc", "co", "cu", "l", "cl", "cs", "cm", "cr", "cf", "C"], "deque_a": ["dequeue_la", "deque___c", "deque___sa", "deve___b", "deque__sa", "deque_la", "deque_aa", "deque___b", "deve_b", "deque__a", "deve___c", "dequeue_a", "dequeue_aa", "deque_sa", "deque___a", "deve_c", "deve___a", "dequeue_b", "deve_sa", "deque__c", "deve___sa", "deve_a", "deque__b"], "deque_b": ["deque_bs", "deque___bs", "deque_db", "depool_erb", "deque_cb", "deaque_bs", "deque_base", "deque____cb", "deque_erb", "deaque_b", "depool____b", "deque___db", "deaque_db", "deaque___db", "deque___b", "depool____erb", "depool____bo", "deaque_base", "deque____b", "depool_cb", "deque___base", "deque____bo", "depool_bo", "deaque___b", "deaque___base", "depool____cb", "deaque___bs", "deque_bo", "depool_b", "deque____erb"], "deque_c": ["deque2b", "deque1nc", "deque__e", "deque_e", "dequeue_u", "dequeue_nc", "dequeue_e", "dequeue_c", "deque1cs", "deque2e", "deque_cs", "dequeue2nc", "dequeue2cs", "deque2c", "dequeue_cs", "deque_u", "dequeue2c", "deque2nc", "deque__u", "dequeue_b", "dequeue2b", "deque2cs", "deque__c", "deque1b", "deque2u", "deque__b", "deque1c", "deque_nc"], "sa": ["a", "sr", "ia", "sta", "sw", "ja", "ba", "asha", "ta", "essa", "ama", "va", "ai", "acs", "apt", "za", "ma", "sam", "ata", "mas", "osa", "ga", "ea", "pa", "sg", "la", "isa", "asa", "sea", "si", "da", "ua", "apa", "na", "lab", "s", "ha", "sv", "so", "sha", "sie", "oa", "nas", "aa", "pse", "sts", "asi", "SA", "ka", "se", "ds", "Sa"], "sb": ["sr", "amb", "gc", "db", "ib", "SB", "lb", "sf", "sth", "bg", "hs", "dl", "wb", "pb", "sam", "fb", "gob", "rob", "rb", "ses", "sl", "sg", "sbm", "ob", "kb", "bh", "b", "bc", "gb", "si", "zb", "nb", "bb", "bj", "bt", "gs", "stab", "sm", "s", "sv", "bps", "erb", "eb", "cb", "bp", "sd", "se", "ds", "bs", "obs"], "sc": ["ec", "scl", "lc", "psc", "ci", "gc", "sic", "asc", "pc", "sche", "rc", "arc", "tc", "fc", "sec", "esc", "bc", "sch", "dc", "icc", "ss", "anc", "osc", "mc", "uc", "SC", "isc", "usc", "nc", "roc", "cc", "desc", "cer", "cu", "Sc", "sac", "cs", "cr", "bs", "erc"], "_": [" j", " n", " g", " x", " __", " each", " you", "___", " p", " z"]}}
{"code": "A,B = map(int, input().split())\\n\\nfa = 0\\nif A%2 == 0 and A%4 == 0:\\n    fa = 0\\nelif A%2 == 0 and A%4 != 0:\\n    fa = 1\\nelif A%2 != 0 and (A-1)%4 == 0:\\n    fa = ((A-1) ^ 0)\\nelif A%2 != 0 and (A-1)%4 != 0:\\n    fa = (A-1) ^ 1\\n\\nfb = 0\\nif (B+1)%2 == 0 and (B+1)%4 == 0:\\n    fb = 0\\nelif (B+1)%2 == 0 and (B+1)%4 != 0:\\n    fb = 1\\nelif (B+1)%2 != 0 and B%4 == 0:\\n    fb = (B ^ 0)\\nelif (B+1)%2 != 0 and B%4 != 0:\\n    fb = (B ^ 1)\\n\\nprint(fa ^ fb)", "target": "481", "substitutes": {"A": ["a", "GA", "M", "N", "ART", "T", "Ax", "API", "Al", "An", "IA", "AZ", "Ar", "Alpha", "AH", "AU", "AT", "R", "I", "Av", "L", "AD", "AL", "AST", "AV", "Area", "One", "AB", "App", "AE", "Auth", "H", "LA", "AA", "PA", "As", "AI", "AR", "AS", "S", "ANG", "G", "This", "P", "AP", "HA", "ACC", "CA", "At", "E", "AY", "JA", "AF", "D", "TA", "X", "AM", "Y", "SA", "AC", "ACT", "AN", "Array", "Ag", "C"], "B": ["Other", "LB", "M", "BI", "CB", "T", "RB", "VB", "BS", "SB", "R", "Big", "I", "L", "One", "Two", "IB", "Builder", "AB", "Reb", "BG", "Be", "H", "O", "V", "BT", "b", "Bar", "BC", "BE", "S", "J", "GB", "WB", "G", "BR", "This", "P", "BB", "USB", "BM", "Bu", "Bus", "TB", "Bern", "FB", "D", "NB", "EB", "Y", "BO", "Buffer", "DB", "Bytes", "Bill", "F", "Beta", "BY", "C"], "fa": ["fd", "alph", "lu", "ae", "ja", "bf", "ta", "Va", "Fa", "aba", "broad", "fm", "ma", "fc", "pb", "ga", "bo", "Fi", "hea", "bra", "ea", "pa", "aaa", "pan", "fr", "f", "fn", "gb", "fe", "fal", "cas", "wa", "fo", "conf", "ff", "afa", "FA", "raf", "af", "sa", "FB", "eb", "au", "ena", "oa", "aa", "phi", "fat", "fg", "fi", "ifa", "ba", "ca"], "fb": ["fd", "alph", "sb", "frac", "bf", "ab", "gc", "db", "fm", "abl", "hang", "lb", "typ", "bg", "fab", "bi", "wb", "pb", "fc", "beck", "fp", "rb", "bm", "facebook", "face", "be", "ob", "buf", "fr", "b", "fn", "Facebook", "gb", "fe", "fal", "icc", "nb", "f", "bb", "fen", "bj", "bn", "bridge", "fw", "bt", " eb", "fx", "ff", "rf", "deb", "bet", "tf", "eb", "FB", "hd", "cb", "buff", "fg", "fi", "fred"]}}
{"code": "import bisect, collections, copy, heapq, itertools, math, string, sys\\ninput = lambda: sys.stdin.readline().rstrip() \\nsys.setrecursionlimit(10**7)\\nINF = float('inf')\\ndef I(): return int(input())\\ndef F(): return float(input())\\ndef SS(): return input()\\ndef LI(): return [int(x) for x in input().split()]\\ndef LI_(): return [int(x)-1 for x in input().split()]\\ndef LF(): return [float(x) for x in input().split()]\\ndef LSS(): return input().split()\\n\\ndef resolve():\\n    N, M, C = LI()\\n    B = LI()\\n    A = [LI() for _ in range(N)]\\n\\n    ans = len([i for i in A if sum([i[j] * B[j] for j in range(M)]) + C > 0])\\n    print(ans)\\n\\nif __name__ == '__main__':\\n    resolve()\\n", "target": "213", "substitutes": {"input": ["answer", "json", "cat", "context", "value", "image", "batch", "buffer", "ctx", "config", "empty", "hidden", "Input", "update", "string", "char", "new", "q", "data", "text", "init", "request", "history", "before", "local", "point", "get", "read", "prefix", "step", "output", "PUT", "integer", " output", "interface", "print", " Input", "error", "join", "source", "next", "str", "expression", "insert", "active", "spec", "raw", "ref", "xml", "ip", "val", "result", "form", "inner", "feed", "csv", "sample", "index", "arg", "missing", "pattern", "printf", "select", "view", "unsigned", "eval", "inc", "focus", "type", "enum", "println", "cmd", "out", "int", "list", " inspect", "sleep", "first", "command", "lat", "sequence", "sum"], "INF": [" INInf", "inInf", " INV", "PINV", " INGF", "PINInf", "PINF", "PINGF", "INGF", "inV", "INV", "INInf", "inF", "inGF"], "x": ["wx", "n", "xi", "ex", "ty", "ci", "xe", "p", "xes", "php", "ux", "on", "xc", "qu", "X", "xa", "rx", "c", "ox", "z", "xxxx", "xt", "xxx", "ctx", "xml", "hex", "ix", "tx", "ax", "f", "xd", "t", "xxxxxxxx", "v", "fx", "xy", "xs", "mx", "\u00e7", "dx", "inx", "xx", "lat", "yx", "y", "px", "index", "ross", "xp", "xf"], "N": ["SN", "CNN", "n", "NS", "T", "NC", "GN", "NI", "Na", "Ns", "R", "X", "I", "L", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "H", "No", "S", "J", "ND", "P", "D", "NB", "MN", "Ni", "F", "TN"], "M": ["T", "CM", "MU", "R", "I", "L", "NM", "MX", "RM", "m", "H", "MM", "MC", "V", "MON", "S", "MAN", "J", "P", "Multi", "MP", "MS", "D", "DM", "TM", "Mon", "MN", "MI", "MT", "F", "PM"], "C": ["CNN", "CH", "CB", "T", "CM", "CW", "JC", "R", "I", "L", "CU", "c", "CS", "CN", "Cs", "W", "CV", "O", "V", "CT", "Z", "S", "CD", "Co", "G", "P", "CR", "CA", "E", "D", "CC", "Y", "Count", "K", "TN"], "B": ["LB", "BI", "T", "RB", "BL", "BS", "VB", "Bs", "R", "I", "L", "IB", "AB", "AA", "V", "b", "BE", "BC", "S", "J", "BU", "P", "BB", "USB", "BM", "Bern", "EB", "Y", "BO", "By", "Bi", "DB", "BA"], "A": ["a", "GA", "T", "An", "IA", "R", "I", "X", "L", "NA", "AL", "mA", "AB", "W", "H", "AA", "LA", "As", "V", "S", "G", "P", "AP", "HA", "CA", "E", "D", "AF", "Y", "SA", "AC", "K", "BA", "AN", "Array"], "_": ["n", "ex", "on", "ct", "ox", "ix", "val", "of", "t", "pt", "int", "all", "l", "line"], "ans": ["ars", "ANS", "ants", "ats", "ana", "ano", " means", "outs", "aus", "ros", "aned", "san", " Ans", "ns", "anus", "ann", "rans", "mas", "anas", "ins", "vers", "ons", "ANN", "amps", "ls", "ens", "uns", "ces", " sans", "an", "rors", "iann", "Ann", "anes", "ran", "ams", "aos", "nas", "os", "AN"], "i": ["a", "ki", "n", "xi", "ci", "gi", "p", "di", "ai", "I", "c", "m", "z", "bi", "yi", "ic", "ix", "ip", "f", "b", "t", "ri", "si", "ii", "li", "ji", "ei", "e", "int", "ti", "it", "zi", "ini", "ui", "q", "l", "pi", "phi", "ati", "u", "id", "y", "ij", "iu"], "j": ["json", "n", "uj", "ja", "js", "aj", "p", "name", "g", "jp", "c", "jc", "z", "m", "oj", "jj", "o", "ix", "h", "jl", "b", "jac", "J", "key", "ji", "v", "kj", "jas", "obj", "xy", "q", "dj", "u", "y", "k", "ij"]}}
{"code": "#from statistics import median\\n#import collections\\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\\nfrom fractions import gcd\\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\\n#from collections import deque\\nfrom collections import deque,defaultdict,Counter\\nimport decimal\\nimport re\\n#import bisect\\n#\\n#    d = m - k[i] - k[j]\\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\\n#\\n#\\n#\\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\\n#\\n#\\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\\n# \u56db\u6368\u4e94\u5165g\\nimport sys\\nsys.setrecursionlimit(10000000)\\n#mod = 10**9 + 7\\n#mod = 9982443453\\nmod = 998244353\\ndef readInts():\\n  return list(map(int,input().split()))\\ndef I():\\n  return int(input())\\ns = input()\\nsc = 0\\nans = 0\\nfor i in range(len(s)):\\n    if s[i] == 'S':\\n        sc += 1\\n    else:\\n        if sc:\\n            sc -= 1\\n            ans += 1\\nprint(len(s) - ans*2)\\n", "target": "713", "substitutes": {}}
{"code": "a=[int(input()) for i in range(6)]\\nif abs(a[4]-a[0])<=a[5]:\\n    print(\"Yay!\")\\nelse:\\n    print(\":(\")", "target": "208", "substitutes": {"a": ["history", "n", "x", "ia", "sta", "ae", "ac", "ava", "ab", "ta", "d", "p", "g", "va", "zero", "w", "c", "ma", "z", "set", "m", "input", "ga", "aux", "ea", "pa", "aaa", "fa", "go", "f", "b", "abs", "t", "da", "apa", "na", "an", "v", "A", "ap", "at", "sa", "ao", "au", "oa", "aos", "aa", "l", "am", "y", "es", "changes", "area", "ba"], "i": [" ii", "n", "x", "ia", "ie", "ir", "isin", "p", "ior", "I", "r", "ix", "ip", "io", "ii", "e", "ti", "im", "it", "ini", "l", "il", "id", "j"]}}
{"code": "k = int(input())\\nans = 1\\nseven = 7\\nfor i in range(k):\\n    if seven % k == 0:\\n        print(ans)\\n        exit()\\n    seven = (seven * 10 + 7) % k\\n    ans += 1\\nprint(-1)", "target": "737", "substitutes": {"k": ["a", "km", "ki", "n", "ek", "uk", "max", "sw", "kh", "kl", "kin", "p", "g", "kar", "ak", "ke", "w", "c", "m", "mut", "ca", "dk", "ks", "o", "kw", "kil", "ko", "kb", "b", "kok", "kj", "v", "kas", " K", "ikk", "ku", "q", "u", "kk", "rows", "ka", "j", "K", "ik", "kan", "sk", "mk", "unk"], "ans": ["ars", "ANS", "ants", "ats", "ians", "beans", "ean", "en", "unders", "names", "ai", "ows", "aus", "us", "lines", "mos", "ns", "ann", "rans", "mas", "ums", "anas", "ks", "leans", "ins", "reads", "man", "rs", "ons", "ms", "amps", "six", "scan", "angs", "sex", "ens", "news", "cons", "mn", "uns", "an", "anks", "anes", "oss", "s", "nan", "sv", "ran", "ams", "es", "os", "errors"], "seven": ["mes", "con", "greg", "sw", "me", "aug", "sur", "um", "nine", "mur", "broad", "ul", "ven", "qu", "common", "sf", "we", "zero", "length", "mos", "ma", "mother", "ums", "mut", "mas", "female", "rub", "water", "six", "ms", "sex", "you", "safe", "eight", "ushi", "male", "ug", "each", "row", "sm", "Seven", "uf", "four", "au", "rown", "many", "rows", "minimum", "ung", "week", "great", "may", "five", "sudo", "sc"], "i": [" ii", "iii", "a", "n", "\u00ed", "x", "ia", "ite", "um", " j", "I", "__", "ind", " c", "e", "s", "it", " each", "j"]}}
{"code": "\\ndef main():\\n    num, wariai_a, wariai_b = map(int, input().split())\\n    data = [list(map(int, input().split())) for i in range(num)]\\n\\n    inf = 100 * num + 1\\n    dp = [[[inf for i in range(400)] for j in range(400)] for k in range(num + 1)]\\n    dp[0][0][0] = 0\\n    for i in range(1, num + 1):\\n        a, b, c = data[i - 1]\\n        for j in range(400):\\n            for k in range(400):\\n                dp[i][j][k] = min(dp[i - 1][j][k], dp[i][j][k])\\n                if j + a < 400 and k + b < 400:\\n                    dp[i][j + a][k + b] = min(dp[i][j + a][k + b], dp[i - 1][j][k] + c)\\n\\n    ans = inf\\n    for j in range(1, 400):\\n        for k in range(1, 400):\\n            if j * wariai_b == k * wariai_a:\\n                ans = min(ans, dp[num][j][k])\\n\\n    if ans == inf:\\n        print(-1)\\n    else:\\n        print(ans)\\n\\n\\nif __name__ == '__main__':\\n    main()\\n", "target": "578", "substitutes": {"num": ["mi", "con", "n", "net", "max", "draw", "um", "nom", "p", "en", "nine", "name", "mult", "zero", "uni", "m", "info", "total", "tim", "nam", "f", "multi", "NUM", "no", "nb", "sim", "mn", "valid", "cum", "non", "out", "mont", "na", "Num", "int", "cal", "hum", "nm", "final", "each", "all", "un", "orig", "im", "it", "ims", "node", "nu", "dim", "number", "mon", "np", "mem", "pi", "id", "index", "init", "sum"], "wariai_a": ["wariait_ac", "wariai_n", "wariait_acc", "wariait_i", "wariai_acc", "wariai4a", "wariao_a", "wariai0at", "wariait_a", "wariai4ac", "wariai0a", "wariai67a", "wariai4acc", "wariai67ac", "wariai_i", "wariai0n", "wariai_at", "wariao_n", "wariai4i", "wariai_ac", "wariai67acc", "wariai67i", "wariao_at"], "wariai_b": ["wariai2B", "wariai___r", "wariai_2", "wariai2u", "wariai_m", "wariai_u", "wariaia_a", "wariai_B", "wariaia___b", "wariaia___m", "wariaia_m", "wariaia___r", "wariai___m", "wariaia_2", "wariaia___2", "wariai__2", "wariai___2", "wariai___b", "wariaia_B", "wariai__m", "wariai_r", "wariai__b", "wariaia_u", "wariai__r", "wariaia_r", "wariai2b", "wariai2a", "wariaia_b"], "data": ["next", "json", "n", "dm", "d", "p", "db", "table", "di", "td", "map", "ns", "DATA", "dl", "ata", "info", "dt", "df", "dat", "da", "dist", "dates", "dr", "results", "pos", "pd", "dq", "div", "dd", "np", "ds", "ps", "Data"], "i": [" ii", "mi", "ki", "n", "xi", "x", "ia", "uri", "ci", "gi", "ir", "p", "cli", "di", "g", "ai", "I", "jp", "m", "z", "bi", "yi", "info", "iti", "ic", "o", "ix", "ip", "f", "t", "multi", "ri", "io", "si", "li", "ii", "ji", "ei", "e", "int", "ti", "oi", "v", "iy", "im", "it", "ims", "ini", "zi", "ui", "phi", "pi", "ati", "l", "u", "id", "y", "ij", "ik", "iat", "iu"], "inf": ["ine", "cmp", "max", "ith", "lim", "err", "aff", "ir", "Inf", "inc", "ipl", "inv", "ref", "diff", "img", "info", "prefix", "hex", "pred", "ins", "mind", "ind", "imal", "f", "df", "limit", "ef", "alpha", "adv", "conf", "ff", "hi", "out", "exp", "star", "rf", "eq", "inel", "inter", "eps", "it", "nan", "tf", " Inf", "inn", "pi", "pp", "xf", "init", "frac"], "dp": ["pkg", "dro", "pm", "dm", "d", "p", "db", "vp", "dial", "jp", "dh", "dl", "fp", "pb", "bsp", "wd", "tp", "dt", "df", "dat", "dep", "dc", "DP", "wp", "lp", "pd", "dr", "tap", "delay", "deb", "eps", "cp", "bet", "bps", "dq", "dim", "pipe", "tmp", "dd", "dj", "px", "dict", "ds", "ps", "pp"], "j": ["json", "n", "err", "ijk", "p", "r", "z", "jj", "ju", "res", "ind", "br", "je", "kj", "v", "jas", "obj", "it", "q", "jack", "js", "on", "g", "jp", "ai", "job", "jc", "m", "o", "jl", "fr", "ion", "zi", "jo", "user", "dj", "ij", "org", "ja", "str", "ci", "aj", "d", "ret", "oj", "og", "pr", "io", "jump", "ik", "uj", "ie", "di", "bi", "by", "f", "sp", "pt", "J", "li", "bj", "ji", "adj", "tr", "bl", "_", "y", "asi"], "k": ["ck", "ki", "n", "ek", "uk", "x", "kr", "kn", "kh", "kl", "ijk", "d", "p", "ang", "kar", "g", "ak", "ke", "kid", "w", "r", "m", "z", "dk", "ks", "o", "kw", "ko", "kind", "tk", "kok", "key", "kj", "v", "ok", "kick", "it", "ikk", "ark", "ku", "kat", "q", "kt", "u", "kk", "ack", "sk", "kan", "ik", "cm", "kg", "ka", "K", "y", "mk", "unk"], "a": ["arg", "ae", "ac", "ab", "aff", "aj", "p", "action", "ach", "g", "va", "ai", "ak", "r", "ma", "ami", "ga", "o", "admin", "ah", "aaa", "alpha", "art", "ee", "an", "e", "att", "all", "A", "ap", "al", "at", "sa", "ao", "app", "au", "ed", "oa", "aa", "am", "ar", "area", "ca"], "b": ["bis", "n", "sb", "x", "bf", "ab", "d", "p", "db", "bar", "beta", "g", "ib", "r", "reb", "z", "bi", "pb", "fb", "rb", "by", "o", "h", "be", "ob", "f", "br", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "s", "ch", "ur", "erb", "eb", "cb", "l", "u", "y", "ub", "bs", "ba", "back"], "c": ["ce", "lc", "n", "x", "ci", "d", "p", "cd", "g", "ct", "r", "tc", "m", "z", "h", "f", "bc", "t", "dc", "e", "v", "cin", "s", "ch", "cc", "cb", "cu", "l", "u", "cs", "y", "cm", "cr", "ca", "C"], "ans": ["ones", "ars", "ANS", "ants", "ats", "ians", "outs", "irms", "aus", "ros", "us", "iban", "aned", "ates", "ns", "ann", "ums", "mas", "rans", "ks", "offs", "ins", "ras", "vers", "ons", "ms", "amps", "ls", "ents", "ids", "ations", "anc", "cons", "uns", "ados", "an", "rors", "iann", "posts", "anks", "oss", "aps", "int", "terms", "s", "nan", "xs", "ions", "ran", "ands", "aos", "nn", "rates", "arts", "cs", "ags", "os", "asms", "lan", "es", "AN", "ds", "ps"]}}
{"code": "import numpy as np\\n\\nA, B, H, M = map(int, input().split())\\n\\n\\nangle_h = 1./ 12.*(H + M/60.) * 2*np.pi\\n\\nangle_m = M/60. * 2 * np.pi\\n\\nhour = (A*np.sin(angle_h), A*np.cos(angle_h))\\nminute = (B*np.sin(angle_m), B*np.cos(angle_m))\\n\\ndist = np.sqrt((hour[0] - minute[0])**2 + (hour[1] - minute[1])**2)\\n\\nprint(dist)\\n", "target": "290", "substitutes": {"A": ["a", "T", "API", "Al", "An", "IA", "AH", "AU", "Alpha", "R", "I", "X", "L", "AL", "AV", "AB", "AE", "AA", "As", "AI", "AR", "AS", "S", "G", "P", "AP", "HA", "CA", "AF", "AM", "Y", "SA", "U", "AC", "ACT", "AN", "C"], "B": ["LB", "N", "BI", "T", "RB", "BL", "BS", "VB", "Bs", "SB", "R", "I", "L", "IB", "AB", "BG", "BW", "BER", "O", "V", "BT", "b", "S", "BC", "Bar", "BE", "J", "BR", "G", "WB", "GB", "P", "BB", "Ber", "BM", "Bu", "TB", "NB", "Y", "BO", "BF", "DB", "BA", "JB", "BY", "C"], "H": ["CH", "T", "HM", "SH", "His", "HS", "HL", "HE", "I", "HO", "HI", "GH", "HTML", "NH", "W", "Hour", "h", "HR", "DH", "TH", "HH", "S", "J", "G", "HA", "P", "OH", "HC", "MH", "Y", "HTTP", "High", "K", "HT", "C"], "M": ["N", "T", "CM", "R", "I", "L", "RM", "m", "W", "MM", "MC", "V", "MER", "C", "MON", "TH", "S", "MAN", "J", "Q", "P", "E", "MS", "D", "MH", "DM", "TM", "Y", "AM", "MI", "MT", "LM", "F", "Z", "PM", "JM"], "angle_h": ["domain48h", "angle_hr", "anglelh", "angle_hh", "angle_he", "domain48he", "position67ref", "position_h", "angle67he", "angle67ref", "domain_change", "angle_change", "angle67hour", "position67h", "angle67hi", "angle_hi", "angle36hour", "anglelht", "pad_h", "angle48hour", "angle48change", "angle______hi", "position67hi", "angle______h", "position67hr", "angle_hour", "pad_ht", "domain_he", "position_ref", "angle_ht", "angle67h", "angle______hr", "angle______ref", "angle36hh", "angle67hr", "position_hr", "pad_hour", "pad_hh", "angle67change", "domain_hour", "anglelhour", "position_hi", "angle36h", "domain_h", "angle36ht", "angle_ref", "angle48h", "domain48hour", "anglelhh", "angle48he", "domain48change"], "angle_m": ["angle67min", "angle55mem", "angle2m", "angle_p", "angle2n", "angle55m", "file67mi", "angle8m", "angle32mi", "angle_pm", "angle48min", "angle32min", " angle_n", "change55pm", "angle25md", "change_m", " angle2p", "angle2md", "angle42pm", "angle42mem", "file67m", "angle48mo", "angle_min", "angle67m", "angle55pm", "file_mo", "change_mem", "angle48m", "angle42m", "angle8ms", " angle_p", "file_m", "file67min", "angle32mo", " angle2md", "angle_ms", "angle25p", "angle25m", "file_mi", "angle_mo", " angle_md", "change55m", "angle8pm", "angle25n", "angle_md", "angle8mem", "angle_mem", "angle_mi", "file67mo", "change_pm", "change55ms", "angle55ms", "change55mem", "angle67mi", "angle32m", "angle2p", "angle67mo", " angle2n", " angle2m", "angle42ms", "angle48mi", "file_min", "change_ms", "angle_n"], "hour": ["over", "header", "option", "always", "era", "day", "rule", "server", "job", "image", "imet", "http", "Hour", "angle", "host", "h", "display", "ive", "time", "block", "iron", "night", "home", "impact", "hop", "worker", "event", "inter", "ha", "iso", "now", "date", "hr", "app", "handler", "element", "year", "ime", " hourly", "user", "item", "ute", "mon", "week", "month", "hours", "horse", "actor", "archive", "colour"], "minute": ["mi", "quarter", "century", "pair", "uri", "local", "attribute", "middle", "league", "mini", "manager", "frame", "ano", "method", "day", "short", "conference", "position", "m", "condition", "man", "query", "param", "min", "message", "second", "distance", " Minute", "word", "session", "time", "part", "argument", "night", "bit", "mission", "int", "shot", "inter", "first", "UTE", "year", "mon", "ute", "command", "minimum", "month", "ond", "morning", "within"], "dist": ["d", "dir", "Dist", "shift", "deep", "radius", "diff", "dl", "driver", "dev", "wd", "distance", "rel", "dep", "project", "density", "depth", "disc", "dr", "det", "delay", "des", "dp", "desc", "dis", "direction", "dd", "sd", "dj", "relative", "Distance", "md", "pred"]}}
{"code": "n = int(input())\\na = sorted(list(map(int, input().split())))\\n\\nans = a[0]\\nans_l = []\\nans_e = a[-1]\\n\\nif ans_e >= 0:\\n    for i in range(1,n-1):\\n        if a[i] < 0:\\n            ans_l += [(ans_e, a[i])]\\n            ans_e -= a[i]\\n        else:\\n            ans_l += [(ans, a[i])]\\n            ans -= a[i]\\n\\n    ans_l += [(ans_e,ans)]\\n    ans = ans_e - ans\\n\\nelse:\\n    ans = ans_e\\n    for i in range(0,n-1):\\n        ans_l += [(ans, a[i])]\\n        ans -= a[i]\\n\\nprint(ans)\\n\\nfor x, y in ans_l:\\n    print(x,y)\\n", "target": "18", "substitutes": {"n": ["N", "net", "nt", "ln", "d", "p", "names", "norm", "ne", "cn", "name", "g", "sn", "w", "c", "m", "z", "ns", "o", "nl", "b", "num", "t", "nia", "len", "nb", "mn", "non", "na", "v", "e", "an", "nc", "nan", "none", "nu", "nn", "l", "np", "network", "k", "j"], "a": ["history", "ce", "ia", "sta", "ae", "ac", "ab", "era", "d", "p", "ana", "g", "arr", "va", "xa", "ai", "w", "c", "ma", "z", "m", "ata", "eas", "ga", "o", "pa", "aaa", "la", "fa", "go", "abs", "b", "ada", "isa", "t", "f", "parts", "args", "wa", "apa", "da", "out", "na", "an", "e", "att", "all", "list", "A", "ap", "at", "sa", "s", "ao", "app", "oa", "au", "aos", "aa", "l", "am", "ar", "changes", "array", "area", "ba", "ca"], "ans": ["ats", "ints", "ana", "was", "eds", "aus", "asks", "us", "sn", "aned", "ns", "ies", "ks", " spans", "offs", "ras", "ms", "angs", "aps", "anes", "nan", "arts", "gn", "ai", "ros", "ates", "ann", "mas", "anas", "ins", "ids", "ens", "aces", "s", "ions", "types", "ones", "olds", "ars", "ians", "en", "names", " means", "lines", "nl", "ons", "anned", "cas", "ends", "an", "oss", "terms", "xs", "cus", "vs", "os", "es", "ps", "nes", "vers", "ANS", "ants", "actions", "outs", "vals", "rs", "amps", "ls", "ents", "ations", "ots", "ases", "uns", "anks", "idents", "ands", "aos", "ads", "errors", "orts"], "ans_l": ["olds_ls", "ansesl", "anslistle", "ans___h", "aces_h", "aces___h", "agrlc", "ansgrlc", "aces___lr", "ans_li", "a_ln", "ans_lo", "olds_le", "anas_sl", "oldsaxyle", "ansenml", "anseslc", "ans_ls", "ans___hl", "ansaxyl", "ras_l", "ans_h", "ansesln", "anslistln", "aces_lr", "anslistls", "ansgrml", "oldsaxyl", "anas_ml", "ansenlr", "ansgrl", "anas_l", "a_lc", "ansenl", "ras_lp", "aces_hl", "agrl", "olds_ln", "ansaxyls", "ras_li", "ans_lp", "oldsaxyln", "ans__l", "ans_hl", "ans_lr", "ons_l", "ans_ml", "anslistl", "anas_lo", "ons_lr", "ansgrln", "ons_ls", "ansgrls", "ans__ls", "ans_ln", "ansgrlr", "aces_l", "ansaxyle", "ansenls", "ans___l", "ans_lc", "ans_sl", "a_l", "ans_le", "ras_ls", "olds_l", "ans__ln", "agrln", "ansaxyln", "ans___lr", "aces___hl", "aces___l", "oldsaxyls", "ans__le", "ons_ml"], "ans_e": ["ansseyentity", "an_er", "an_E", "ans09entity", "ansmayee", "ces_e", "ans_E", "outs_e", "ans_entity", "ansseyne", "an_ea", "anas_ei", "ces_entity", "outs_er", "as_e", "ansmayeu", "ansmayce", "ans_el", "ans09ne", "outs_l", "ansaxyne", "ans64ce", "outs_eu", "ans64e", "ans09ele", "ces_ele", "ans64eu", "anas_eb", "cesaxyne", "an_l", "ansseyele", "an_ei", "as_ce", "ans_ec", "ans_eu", "an_te", "ans_ele", "ans09e", "as_ee", "ans_ei", "anas_e", "cesaxye", "ans_ce", "ansaxyentity", "ans_ne", "ces_ne", "ansaxye", "ans_er", "cesaxyentity", "ansmaye", "an_e", "ans_ea", "ansaxyele", "anas_ec", "ansseye", "an_el", "ans64ee", "ans_te", "cesaxyele", "ans_eb", "ans_ee", "as_eu"], "i": ["\u00ed", "mi", "ki", "xi", "ia", "uri", "me", "gu", "ci", "gi", "cli", "g", "di", "uli", "ai", "I", "iter", "this", "m", "batch", "bi", "info", "qi", "ix", "ski", "ic", "ip", "ind", "multi", "ri", "t", "io", "si", "iu", "sim", "ii", "li", "ji", "v", "e", "int", "ti", "ei", "iy", "im", "it", "zi", "ini", "ui", "\u0438", "phi", "pi", "id", "j", "index", "ij", "ik", "iri", "hi", "chain"], "x": ["wx", "xi", "ex", "p", "on", "ux", "xc", "xa", "X", "rx", "w", "ox", "z", "m", "xt", "ix", "tx", "ax", "xd", "fx", " xx", "xy", "xs", "mx", "dx", "inx", "l", "xx", "yx", "px", "xp", "ry"], "y": ["sy", "ys", "yd", "ym", "wy", "cy", "oy", "yo", "z", "ly", "ies", "ny", "yi", "vy", "ye", "py", "yr", "hy", "yl", "uy", "yn", "ey", "gy", "iy", "xy", "yt", "Y", "yy", "fy", "j", "ya", "ry"]}}
{"code": "import queue\\n\\nn=int(input())\\n\\nq=queue.Queue()\\n\\nq.put(3)\\nq.put(5)\\nq.put(7)\\n\\nc=0\\nnum=q.get()\\nwhile num<=n:\\n    if \"3\" in str(num) and \"5\" in str(num) and \"7\" in str(num):\\n        c+=1\\n    q.put(num*10+3)\\n    q.put(num*10+5)\\n    q.put(num*10+7)\\n    num=q.get()\\n\\nprint(c)\\n", "target": "212", "substitutes": {"n": ["N", "nt", "p", "ne", "g", "cn", "i", "sn", "w", "m", "z", "ns", "nl", " ng", "f", "t", "len", "nb", "na", "nc", "nm", "s", "nan", "nu", "size", "nn", "number", "l", "np", " N", "ng", "k", "j"], "q": ["aq", "ck", "ht", "pkg", "sh", "queue", "ld", "lib", "p", "db", "d", "ue", "g", "iq", "qu", "qt", "ct", "requ", "r", "ox", "og", "query", "ic", "ix", "h", "ms", "log", "quick", "quit", "t", "Q", "out", "v", "exp", "sq", "qq", "eq", "cache", "al", "up", "qa", "gr", "ch", "req", "co", "ve", "dq", "lock", "que", "ll", "cl", "l", "j", "y", "qs", "pp", "pg"], "c": ["ec", "ce", "con", "lc", "ci", "gc", "d", "p", "unc", "cd", "cn", "xc", "ct", "code", "rc", "i", "tc", "cod", "m", "fc", "cv", "f", "t", "dc", "count", "cum", "conf", "sc", "v", "nc", "cache", "com", "cc", "co", "cu", "cb", "u", "cs", "k", "cm", "cr", "ca", "C", "ac"], "num": ["alph", "cmp", "mod", "p", "hom", "set", "sam", "old", "man", "dev", "bo", "nam", "cur", "multi", "NUM", "count", "cum", "block", "na", "nm", "new", "number", "np", "coord", "net", "um", "g", "mult", "test", "m", "len", "msg", "nu", "div", "mon", "tmp", "u", "loc", "nt", "str", "nom", "en", "hex", "tim", "cert", "enc", "bc", "dat", "nb", "ord", "off", "tu", "cal", "al", "cache", "prim", "cu", "good", "con", "th", "zero", "mom", "go", "t", "no", "valid", "ver", "bn", "mont", "Num", "orig", "eng", "conv", "gen", "one", "proc", "mun", "lat", "temp", "sum"]}}
{"code": "s = int(input())\\nif s == 10**18:\\n    print(0, 0, 10**9, 0, 0, 10**9)\\n    exit()\\nt = 10**9\\na, b = s // t + 1, t - s % t\\nprint(0, 0, 1, t, a, b)\\n", "target": "638", "substitutes": {"s": ["n", "sb", "x", "str", "ats", "d", "p", "g", "i", "fs", "sf", "w", "r", "c", "ts", "z", "m", "ns", "ies", "rs", "sec", "less", "ins", "sl", "h", "ls", "f", "sp", "abs", "S", "ss", "si", "its", "v", "gs", "sa", "q", "l", "sd", "j", "es", "qs", "ds", "ps", "bs"], "t": ["tm", "ht", "n", "T", "ta", "p", "d", "g", "tw", "i", "td", "w", "tc", "wt", "c", "ts", "m", "z", "r", "total", "te", "o", "tp", "h", "dt", "f", "pt", "ot", "tu", "v", "e", "ti", "ten", "tt", "tr", "tf", "it", " T", "l", "u", "j", "y", "vt"], "a": ["n", "ia", "sta", "ae", "ac", "ab", "aff", "ta", "d", "va", "xa", "i", "r", "c", "ma", "ata", "eas", "o", "ea", "pa", "aaa", "ova", "alpha", "an", "v", "A", "ap", "at", "sa", "oa", "aa", "l", "ar", "u", "area", "ba", "ca", "ao"], "b": ["bis", "n", "sb", "ab", "lib", "d", "p", "db", "g", "ib", "i", "r", "c", "bi", "fb", "rb", "by", "be", "ob", "bh", "f", "bc", "nb", "zb", "B", "bb", "v", "e", "eb", "ed", "cb", "l", "bp", "u", "bin", "j", "y", "bs", "ba"]}}
{"code": "# coding:UTF-8\\nimport sys\\nfrom math import factorial\\n\\nMOD = 10 ** 9 + 7\\nINF = float('inf')\\n\\nN = int(input())    # \u6570\u5b57\\nA = list(map(int, input().split()))     # \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u9023\u7d9a\u6570\u5b57\\n\\nmny = 1000\\nm = A[0]\\nfor i in range(1, N):\\n    if A[i] < m:\\n        m = A[i]\\n    if A[i] > m:\\n        if i == N-1:\\n            num = mny // m\\n            mny += num * (A[i] - m)\\n        elif A[i+1] <= A[i]:\\n            num = mny // m\\n            mny += num * (A[i] - m)\\n            m = A[i+1]\\n\\nprint(\"{}\".format(mny))\\n", "target": "67", "substitutes": {}}
{"code": "from sys import stdin\\n\\ns = stdin.readline().rstrip()\\n\\nprint(\"%s%d%s\" % (s[:1], len(s)-2, s[-1]))\\n", "target": "565", "substitutes": {"s": ["a", "n", "sb", "seconds", "aws", "str", "ats", "js", "g", "fs", "i", "r", "hs", "c", "ts", "m", "ns", "details", "rs", "input", "ses", "ins", "h", "ms", "bytes", "ls", "abs", "t", "ss", "S", "parts", "ends", "tes", "plays", "bits", "strings", "gs", "string", "eps", "sv", "ashes", "sts", "l", "sample", "cs", "changes", "qs", "ds", "ps", "bs"]}}
{"code": "from itertools import *\\nn=int(input())\\na=list(map(int,input().split()))\\na.sort()\\nans=0\\nfor i,j,k in combinations(a,3):\\n    if i<j<k and i+j>k:\\n      ans+=1\\nprint(ans)", "target": "742", "substitutes": {"n": ["N", "x", "nt", "d", "p", "names", "cn", "sn", "w", "c", "m", "z", "ns", "nl", "f", "fn", "t", "count", "nb", "na", "v", "nn", "q", "l", " N"], "a": ["history", "x", "ia", "ae", "ac", "ab", "ta", "p", "ai", "c", "ma", "input", "ga", "la", "aaa", "f", "b", "abs", "t", "alpha", "da", "out", "na", "an", "all", "list", "A", "at", "sa", "ao", "s", "au", "oa", "aos", "aa", "l", "am", "data", "array", "area", "ba", "ca"], "ans": ["ANS", "zan", "ants", "ats", "ians", "\u00e1n", "ean", "anon", "eds", " means", "outs", "acs", "aus", "ros", "asks", "us", "aned", " Ans", "ns", "anus", "ann", "rans", "rs", "ums", "anas", "ks", "mas", "ins", "offs", "ons", "ms", "amps", "grades", "pan", "ens", "cas", "uns", "can", "an", "posts", "anks", "iann", "oss", "anes", "nan", "ran", "nas", "aos", "arts", "cs", "lan", "AN"], "i": ["mi", "ki", " ii", "xi", "x", "ia", "ni", "ci", "gi", "di", "ai", "I", "r", "bi", "ami", "yi", "ic", "o", " bi", "ip", "ri", "io", "si", "li", "ii", "int", "ti", "oi", "it", "ini", "zi", "\u0438", "phi", "pi", " ki", "l", "u", "y", "ij", "ik", "iu", "hi"], "j": ["json", "uj", "ja", "ijk", "aj", "js", "d", "p", "g", "jp", "job", "oj", "jc", "z", "m", "jj", "bi", "ju", "o", "h", "jl", "b", "t", "J", "bj", "li", "ji", "kj", "v", "jump", "q", "l", "dj", "y", "ij"], "k": ["ck", "km", "ki", "kn", "uk", "kr", "kh", "kl", "ijk", "p", "kar", "ak", "ke", "c", "z", "m", "ks", "o", "kw", "ko", "b", "tk", "kok", "kj", "v", "ok", "ikk", "ku", "q", "u", "kk", "ka", "sk", "ik", "K", "kan", "mk", "unk"]}}
{"code": "N,L=map(int,input().split())\\na=[int(i) for i in input().split()]\\nj=-1\\nfor i in range(N-1):\\n    if a[i]+a[i+1]>=L:\\n        j=i\\n        break\\nif j==-1:\\n    print(\"Impossible\")\\nelse:\\n    print(\"Possible\")\\n    for i in range(j):\\n        print(i+1)\\n    for i in range(j+1,N-1)[::-1]:\\n        print(i+1)\\n    print(j+1)\\n", "target": "154", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "T", "NL", "Ne", "GN", "NI", "Ns", "R", "I", "NA", "NN", "NP", "NR", "NT", "NH", "H", "NF", "V", "TN", "No", "S", "NE", "B", "J", "ND", "P", "Num", "A", "NJ", "D", "NB", "MN", "Ni", "K", "F", "Z", "C"], "L": ["LB", "M", "NL", "DL", "T", "LIN", "BL", "PL", "SL", "R", "I", "LC", "LA", "LU", "V", "S", "LT", "B", "J", "Li", "P", "LI", "E", "LG", "Lu", "D", "l", "CL", "LL", "Len", "LE", "LM", "F", "LS", "LP"], "a": ["sta", "ae", "ab", "ta", "g", "va", "ai", "c", "ma", "m", "ata", "eas", "ga", "aux", "ea", "la", "aaa", "abs", "b", "f", "auto", "alpha", "da", "apa", "na", "an", "cha", "A", "al", "at", "sa", "ao", "au", "oa", "aa", "am", "data", "area", "ack", "ba", "ac"], "i": ["\u00ed", "mi", "ki", "xi", "n", "ia", "x", "ie", "ci", "gi", "p", "di", "ib", "ai", "I", "bi", "ami", "qi", "yi", "iti", "ic", "ix", "o", "iri", "ip", "ind", "ri", "multi", "io", "si", "ii", "li", "ji", "ei", "v", "int", "ti", "oi", "ori", "im", "it", "ini", "zi", "ui", "l", "pi", "phi", "id", "index", "y", "ij", "ik", "fi", "iu", "hi"], "j": ["next", "json", "n", "uj", "ja", "js", "aj", "p", "d", "g", "di", "jp", "job", "r", "oj", "jc", "z", "m", "jj", "bi", "ju", "o", "res", "h", "jl", "fr", "b", "je", "br", "t", "jac", "J", "bj", "out", "kj", "v", "ji", "gov", "obj", "it", "jump", "q", "l", "dj", "k", "y", "jit", "ij"]}}
{"code": "def solve(string):\\n    s = string.replace(\"?\", \"d\").lower()\\n    n = len(s)\\n    dp = [[0] * (n + 1) for _ in range(4)]\\n    dp[0][0] = 1\\n    mod = 10**9 + 7\\n    for i, _s in enumerate(s):\\n        dp[0][i + 1] = dp[0][i] % mod\\n        dp[1][i + 1] = dp[1][i] % mod\\n        dp[2][i + 1] = dp[2][i] % mod\\n        dp[3][i + 1] = dp[3][i] % mod\\n        if _s == \"a\":\\n            dp[1][i + 1] += dp[0][i]\\n        if _s == \"b\":\\n            dp[2][i + 1] += dp[1][i]\\n        if _s == \"c\":\\n            dp[3][i + 1] += dp[2][i]\\n        if _s == \"d\":\\n            dp[0][i + 1] *= 3\\n            dp[1][i + 1] *= 3\\n            dp[1][i + 1] += dp[0][i]\\n            dp[2][i + 1] *= 3\\n            dp[2][i + 1] += dp[1][i]\\n            dp[3][i + 1] *= 3\\n            dp[3][i + 1] += dp[2][i]\\n    return str(int(dp[3][-1] % (10**9 + 7)))\\n\\n\\nif __name__ == '__main__':\\n    print(solve(input()))\\n", "target": "640", "substitutes": {"string": ["str", "space", "file", "series", "test", "value", "complex", "object", "chain", "sql", "san", "vector", "ident", "prefix", "input", "format", "word", "f", "time", "part", "parse", "strings", "v", "int", "list", "st", "conv", "phrase", "char", "number", "line", "sample", "String", "sequence", "text", "request", "ring"], "s": ["a", "sb", "x", "str", "ats", "space", "js", "d", "p", "g", "series", "r", "lines", "sql", "c", "ts", "m", "ns", "rs", "input", "ins", "less", "ls", "f", "b", "t", "S", "ss", "strings", "v", "gs", "e", "ws", "sv", "xs", "q", "sts", "y", "qs", "ds", "ps"], "n": ["nr", "N", "nt", "ni", "ln", "d", "p", "names", "norm", "ne", "cn", "sn", "r", "c", "m", "ns", "o", "nl", "f", "num", "t", "count", "nia", "len", "nb", "no", "na", "v", "nc", "nu", "nn", "l", "np", "ng", "k", "network"], "dp": ["dro", "dos", "pm", "p", "broad", "trip", "pb", "tp", "hp", "disk", "htt", "bps", "dd", "np", "pat", "xp", "pkg", "port", "point", "ld", "cd", "ep", "jp", "td", "deep", "dh", "dl", "gp", "bsp", "decl", "dt", "ds", "dump", "da", "wp", "lp", "prep", "ph", "hd", "dq", "dj", "ctl", "dm", "d", "db", "password", "fp", "ga", "wd", "ip", "xd", "dc", "DP", "dr", "eth", "cp", "eps", "ssl", "csv", "eb", "desc", "dim", "grad", "pp", "ps", "vp", "dial", "pai", "cmd", "df", "dep", "pt", "parse", "pd", "drop", "rank", "delay", "deb", "pipe", "du", "lat", "px", "rpm", "hyp", "adr", "pg"], "_": ["x", "ex", " the", "name", " j", "ox", "m", "ix", "val", " x", " l", " c", "___", "j", "k", " un"], "mod": ["max", "x", "perm", "MOD", "modified", "gem", "mods", " Mod", "d", "p", "component", "sign", "name", "spec", "g", "mult", "med", "Mod", "fun", "complex", "r", "comb", "scale", "san", "cod", "m", "set", "trade", "od", "module", "OD", "ident", "mut", "min", "step", "change", "alter", "ms", "ind", "trans", "stable", "t", "create", "tab", "form", "dig", "sim", "ver", "add", "check", " MOD", "null", " m", "update", "post", "rest", "com", " mult", "div", "base", "mag", "mun", "pur", "var", "sd", "id", "j", "lex", "comp", "start"], "i": ["a", "mi", "\u00ed", "ki", "xi", "x", "uri", "ie", "ci", "gi", "ir", "ios", "p", "cli", "name", "g", "di", "ai", "I", "iter", "this", "us", "m", "isi", "bi", "ami", "yi", "info", "ic", "ix", "ip", "iri", "ind", "f", "b", "multi", "ri", "io", "si", "ii", "li", "ji", "v", "exp", "ei", "ti", "oi", "key", "eric", "at", "im", "it", "zi", "ini", "ui", "\u0438", "q", "l", "pi", "id", "j", "y", "index", "fi", "ik", "ij", "iu", "hi", "es", "er", "chain"], "_s": ["texts", " _sq", "_i", "cts", "textsb", "ajs", "_name", "ajsv", "ajss", " _name", "_sq", "_sb", "ajsb", " _sl", "_e", " _si", "_w", "_g", "ithsl", " _sv", "ithi", "ajsl", " _w", "cti", "_sv", "aje", "textsl", " _g", "ctsi", " _ss", "_si", "ithsi", " _e", "ctsl", "_sl", " _i", "iths", "_ss"]}}
{"code": "#!/usr/bin/env python3\\n\\nimport sys\\n# import math\\n# import re                                    # re.compile(pattern) => ptn obj; p.search(s), p.match(s), p.finditer(s) => match obj; p.sub(after, s)\\n# from collections import deque                # deque class. deque(L): dq.append(x), dq.appendleft(x), dq.pop(), dq.popleft(), dq.rotate()\\n# from collections import defaultdict          # subclass of dict. defaultdict(facroty)\\n# from collections import Counter              # subclass of dict. Counter(iter): c.elements(), c.most_common(n), c.subtract(iter)\\n# from heapq import heapify, heappush, heappop # built-in list. heapify(L) changes list in-place to min-heap in O(n), heappush(heapL, x) and heappop(heapL) in O(lgn).\\n# from heapq import nlargest, nsmallest        # nlargest(n, iter[, key]) returns k-largest-list in O(n+klgn).\\n# from itertools import product                # product(iter, repeat=n)\\n# from itertools import accumulate             # accumulate(iter[, f])\\n# from functools import reduce                 # reduce(f, iter[, init])\\n# from bisect import bisect_left, bisect_right # bisect_left(a, x, lo=0, hi=len(a)) returns i such that all(val<x for val in a[lo:i]) and all(val>-=x for val in a[i:hi]).\\n# from fractions import gcd                    # for Python3.4.3\\n\\n\\ndef main():\\n    mod = 10000007                  # 10^9+7\\n    inf = float('inf')\\n    input = sys.stdin.readline      # \u6539\u884c\u6587\u5b57\u304c\u6b8b\u308b\u3053\u3068\u306b\u6ce8\u610f\\n    sys.setrecursionlimit(10**6)    # 1000 -> 1000000\\n    def ii():  return int(input())\\n    def mi():  return map(int, input().rstrip().split())\\n    def lmi(): return list(map(int, input().rstrip().split()))\\n    def li():  return list(input().rstrip())\\n    \\n    \\n    n = ii()\\n    s = input().rstrip()\\n    print(s) if n >= 3200 else print(\"red\")\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "90", "substitutes": {}}
{"code": "# https://atcoder.jp/contests/abc078/tasks/arc085_a\\n\\nimport sys\\n# sys.setrecursionlimit(100000)\\n\\n\\ndef input():\\n    return sys.stdin.readline().strip()\\n\\n\\ndef input_int():\\n    return int(input())\\n\\n\\ndef input_int_list():\\n    return [int(i) for i in input().split()]\\n\\n\\ndef main():\\n    n, m = input_int_list()\\n    ans = (1900 * m + 100 * (n - m)) * 2**m\\n    print(ans)\\n\\n    return\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "308", "substitutes": {}}
{"code": "import sys\\nimport math\\nimport bisect\\nfrom collections import defaultdict,deque\\n\\n# input = sys.stdin.readline\\ndef inar():\\n    return [int(el) for el in input().split()]\\n# def find(a,b,c):\\n#     gc=math.gcd(a,b)\\n#     return math.gcd(gc,c)\\ndef main():\\n    n=int(input())\\n    string=input()\\n    r=[]\\n    g=[]\\n    b=[]\\n    for i in range(n):\\n        if string[i]==\"R\":\\n            r.append(i)\\n        elif string[i]==\"G\":\\n            g.append(i)\\n        else:\\n            b.append(i)\\n    ans=0\\n    r.sort()\\n    g.sort()\\n    b.sort()\\n    # print(r)\\n    # print(g)\\n    # print(b)\\n    # print(len(b))\\n    # ans1=0\\n    # fir=[]\\n    # for i in range(len(r)):\\n    #     for j in range(len(g)):\\n    #         for k in range(len(b)):\\n    #             ls=[r[i],g[j],b[k]]\\n    #             ls.sort()\\n    #             if ls[1]-ls[0]!=ls[2]-ls[1]:\\n    #                 ans1+=1\\n    #         fir.append(ans1)\\n    # # print(ans1)\\n\\n    # print(\"-------------------check---------------\")\\n    # are=[]\\n    for i in range(len(r)):\\n        for j in range(len(g)):\\n            ans+=len(b)\\n            chota=min(g[j],r[i])\\n            bada=max(g[j],r[i])\\n            diff=bada-chota\\n\\n            left=bisect.bisect_left(b,bada+diff)\\n            right=bisect.bisect_left(b,chota-diff)\\n\\n            lol=(bada+chota)\\n            if lol%2==0:\\n                beech=lol//2\\n                ind=bisect.bisect_left(b,beech)\\n                if ind<len(b) and b[ind]==beech:\\n                    ans-=1\\n            if (left<len(b) and b[left]==bada+diff):\\n                ans-=1\\n            if (right<len(b) and b[right]==chota-diff):\\n                ans-=1\\n\\n            # are.append(ans)\\n    print(ans)\\n    # for i in range(len(are)):\\n    #     print(are[i],fir[i])\\n\\n\\nif __name__ == '__main__':\\n    main()\\n\\n\\n\\n", "target": "294", "substitutes": {}}
{"code": "N = int(input())\\nX = list(map(int, input().split()))\\nY = sorted(X)\\nfor i in X:\\n    print(Y[N//2] if i <= Y[N//2-1] else Y[N//2-1])\\n\\n", "target": "16", "substitutes": {"N": ["SN", "Name", "M", "n", "NS", "T", "NV", "NC", "GO", "GN", "NI", "Na", "Ns", "I", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "V", "TN", "SIZE", "NOTE", "NO", "NAME", "S", "B", "J", "Q", "G", "P", "A", "E", "D", "OUT", "NB", "Size", "Ni", "K", "F", "UN", "Z", "FN", "C"], "X": ["M", "IX", "x", "T", "TX", "I", "R", "L", "TY", "EX", "MX", "YS", "UX", "OX", "ICE", "FE", "GE", "W", "ZX", "XY", "V", "XP", "S", "DX", "XM", "Q", "P", "A", "E", "XX", "XT", "D", "HTTP", "XL", "Array", "Z"], "Y": ["M", "YD", "NS", "T", "YE", "EY", "I", "Py", "L", "TY", "YS", "MY", "YC", "Year", "H", "XY", "O", "V", "TH", "YA", "S", "B", "J", "Q", "G", "P", "AY", "E", "YY", "IES", "XX", "D", "FY", "Cy", "y", "HT", "Z", "BY"], "i": [" I", "mi", "ki", "xi", "x", "uri", "ni", "II", "ci", "di", "aci", "I", "ai", " Li", "yi", "qi", "Mi", "ri", "si", "TI", "ii", "li", "ei", "ori", "ti", "adi", "Ti", " vi", "ini", " Qi", "zi", "\u0438", " ki", "pi", "phi", "y", "Ni", "ij", "iu", "hi", " Xi", "Xi"]}}
{"code": "n = int(input())\\ns = input()\\nnums = [0]\\nx = 0\\nfor i in range(n):\\n    if s[i] == \"I\":\\n        x += 1\\n    else:\\n        x -= 1\\n    nums.append(x)\\nprint(max(nums))", "target": "697", "substitutes": {"n": ["N", "nt", "ln", "d", "p", "ne", "cn", "sn", "r", "c", "m", "z", "ns", "o", "nl", "f", "b", "num", "t", "nia", "nb", "no", "na", "v", "nc", "nu", "q", "l", "nn", "np", "j", "y", "k"], "s": ["a", "sb", "ys", "ats", "js", "p", "w", "hs", "c", "ts", "ns", "ies", "rs", "input", "ses", "ins", "ls", "abs", "ids", "b", "t", "ss", "S", "plays", "tes", "bits", "gs", "sq", "ws", "gets", "sv", "xs", "sts", "cs", "y", "os", "es", "qs"], "nums": ["nples", " nples", "Nums", " nms", "nsodes", "inames", "numbers", "inumbers", "numb", "names", "nsums", " nodes", "Nms", "inens", "Nples", " numbers", " nens", "nms", "inums", "pnums", "pnodes", "pnumb", "Numbers", " names", "naums", "nsumb", "nodes", " numb", "nens", "Nens", "pnumbers", "naples", "nsumbers", "Names", "nams", "naumbers"], "x": ["wx", "xi", "ex", "max", "xe", "g", "xc", "xa", "X", "rx", "long", "w", "ox", "z", "xt", "xxx", "xml", "ix", "tx", "ax", "xd", "num", "xxxxxxxx", "v", "int", "fx", " xx", "at", "xy", "cox", "xs", "mx", "co", "dx", "one", "xx", "l", "lat", "y", "px", "xp", "sync", "xf"], "i": ["mi", "ki", "xi", "ia", "ci", "gi", "p", "di", "g", "I", "r", "c", "m", "bi", "qi", "yi", "ip", "ind", "f", "b", "si", "li", "ii", "ji", "v", "ti", "im", "it", "zi", "ini", "q", "l", "pi", "id", "j", "y", "k", "ij"]}}
{"code": "n = int(input())\\na = list(filter(lambda x : x & 1 or x % 3 == 0 or x % 5 == 0, map(int, input().split())))\\nprint('APPROVED' if len(a) == n else 'DENIED')", "target": "381", "substitutes": {"n": ["N", "x", "nt", "gn", "d", "p", "ne", "cn", "i", "sn", "r", "c", "m", "z", "ns", "nl", "h", "b", "num", "count", "t", "len", "nb", "mn", "na", "v", "nc", "nan", "nn", "l", "q", "np", "number", "k", "j"], "a": ["x", "sta", "ab", "ta", "d", "p", "xa", "i", "r", "w", "c", "ma", "m", "ga", "ea", "h", "la", "fa", "f", "b", "t", "da", "wa", "na", "an", "v", "all", "A", "sa", "aka", "aos", "aa", "l", "am", "j", "array", "area", "ba", "ca"]}}
{"code": "\\ndef I(): return int(input())\\ndef MI(): return map(int, input().split())\\ndef LI(): return list(map(int, input().split()))\\nmod=10**9+7\\n\\ndef main():\\n    n,a,b=MI()\\n    print(min(n*a,b))\\n\\n\\nmain()", "target": "751", "substitutes": {"mod": ["max", "MOD", " Mod", "beta", "sub", "mult", "ai", "common", "Mod", "fun", "inv", "set", "m", "floor", "prime", "dec", "log", "da", "sim", "conf", "add", "exp", "debug", "base", "div", "pi", "j", "sum"], "n": ["N", "x", "nt", "d", "ne", "g", "i", "sn", "r", "c", "m", "ns", "o", "f", "num", "t", "nb", "mn", "na", "v", "an", "nc", "nm", "nan", "nu", "nn", "l", "q", "np", "ng", "j", "y"], "a": ["x", "ia", "ab", "ta", "aj", "d", "p", "g", "va", "ai", "ak", "i", "c", "ma", "m", "ga", "la", "f", "alpha", "an", "e", "A", "al", "at", "sa", "au", "oa", "aa", "l", "am", "j", "ba", "ca", "ac"], "b": ["bis", "ab", "d", "p", "g", "ib", "i", "r", "c", "m", "z", "bi", "fb", "rb", "h", "be", "f", "bc", "t", "B", "bb", "v", "e", "eb", "l", "u", "j", "y", "bs", "ba"]}}
{"code": "A, P = map(int, input().split())\\n\\nimport math\\nprint(math.floor((3*A + P)/2))", "target": "428", "substitutes": {"A": ["GA", "All", "Al", "An", "IA", "Alpha", "AH", "AT", "mA", "Av", "ACC", "NA", "ESS", "AL", "Area", "App", "AB", "Act", "H", "AA", "LA", "As", "C", "AR", "AS", "Ah", "USA", "S", "B", "HA", "CA", "At", "AY", "MA", "JA", "D", "AF", "AM", "SA", "ACT", "AN", "BA", "Array", "AP"], "P": ["PU", "M", "N", "T", "p", "PL", "JP", "TP", "PC", "WP", "X", "R", "Port", "L", "PS", "NP", "PT", "H", "PA", "CP", "V", "PK", "S", "B", "DP", "Q", "J", "AP", "MP", "E", "PP", "GP", "D", "PO", "PIN", "U", "K", "LP", "PM", "C"]}}
{"code": "def main():\\n    from sys import stdin\\n    input = stdin.readline\\n\\n    n, m, k = map(int, input().split())\\n    f = [[] for i in range(n)]\\n    BL = [[] for i in range(n)]\\n    ans = [0] * n\\n    for _ in range(m):\\n        a, b = map(int, input().split())\\n        f[a-1].append(b-1)\\n        f[b-1].append(a-1)\\n    for _ in range(k):\\n        c, d = map(int, input().split())\\n        BL[c-1].append(d-1)\\n        BL[d-1].append(c-1)\\n    D = {}\\n    parent = [-1] * n\\n    visited = [False] * n\\n    for root in range(n):\\n        if visited[root]:\\n            continue\\n        D[root]  = set([root])\\n        stack = [root]\\n        while stack:\\n            x = stack.pop()\\n            visited[x] = True\\n            parent[x] = root\\n            for t in f[x]:\\n                if visited[t]:\\n                    continue\\n                D[root].add(t)\\n                stack.append(t)\\n    for i in range(n):\\n        grp = D[parent[i]]\\n        tans = len(grp) - len(f[i]) - 1\\n        for block in BL[i]:\\n            if block in grp:\\n                tans -= 1\\n        ans[i] = tans\\n    print(*ans)\\nmain()\\n", "target": "368", "substitutes": {"input": ["history", "arg", "next", "cmp", "pattern", "str", "select", "context", "util", "view", "spec", "get", "got", "human", "shift", "image", "inc", "raw", "ref", "focus", "read", "format", "step", "output", "ip", "cur", "cmd", "fn", "config", "hidden", "form", "feed", "url", "out", "Input", "int", "list", "stream", "interface", "it", "exec", "csv", "req", "print", " Input", "q", "reader", "command", "np", "sample", "data", "sequence", "text", "source", "request"], "n": ["nr", "N", "nt", "p", "g", "cn", "dn", "r", "sn", "w", "z", "ns", "o", "nl", "h", "num", "nb", "no", "mn", "na", "v", "an", "int", "nc", "nm", "nan", "node", "nn", "l", "np", "u", "y", "j"], "m": ["mi", "M", "mr", "dm", "p", "mm", "mo", "g", "r", "mut", "man", "bm", "o", "rm", "gm", "h", "ms", "mc", "mn", "v", "om", "l", "y", "j", "cm", "mk"], "k": ["ck", "km", "ki", "kn", "kr", "kh", "p", "ke", "r", "z", "ks", "o", "ko", "tk", "kok", "v", "ku", "q", "u", "kk", "j", "y", "K", "ik", "ka", "sk", "mk"], "f": ["fd", "con", "lf", "bf", "ln", "p", "fm", "g", "fs", "sf", "r", "w", "fc", "fp", "fb", "o", "h", "fa", "fr", "df", "fe", "fn", "fl", "ff", "v", "e", "rf", "af", "ch", "elf", "tf", "uf", "bl", "l", "fg", "fi", "F", "cf", "ft"], "i": ["mi", "ki", "xi", "ci", "gi", "ir", "p", "g", "di", "ai", "I", "r", "bi", "ic", "o", "ip", "ind", "ri", "io", "si", "li", "ii", "v", "e", "int", "ti", "im", "it", "s", "zi", "ini", "phi", "pi", "l", "u", "id", "y", "index", "j", "ij", "iu"], "BL": ["LB", "N", "NL", "DL", "RB", "BS", "PL", "SL", "SB", "BN", "L", " bl", "IB", "Bl", "Block", "VS", "blocks", "BG", "TL", "Br", "LOCK", "V", "BT", "Blocks", "BP", "OL", "FL", "BC", "B", "BR", "ML", "GB", "BD", "LI", "RL", "BLE", "FB", "SP", "bl", "NB", "FG", "BF", "BO", "CL", "LL", "DF", "XL", "F"], "ans": ["ANS", "nt", "ants", "ats", "ians", "actions", "anon", "outs", "fs", "aus", "lines", "lets", "orts", "aned", "ts", "ns", "vals", "ann", "ums", "blocks", "rs", "ks", "IDs", "ins", "ms", "amps", "flags", "ls", "annot", "ids", "ents", "anc", "uns", "comments", "an", "gs", "anks", "s", "idents", "xs", "ions", "aos", "roots", "vs", "groups", "stats", "AN", "ds", "ps", "bs", "aints"], "_": ["M", " y", " the", "ing", "I", "__", "common", "ation", " all", "mut", "ic", " main", "let", "main", "an", "all", " __", "y"], "a": ["sta", "ae", "ab", "aj", "p", "ach", "va", "ai", "ak", "r", "ga", "by", "o", "ea", "aaa", "be", "alpha", "art", "an", "e", "A", "al", "at", "sa", "app", "au", "oa", "aa", "l", "am", "ar", "u", "j", "area", "ba", "ca", "ac"], "b": ["bf", "ab", "bar", "p", "db", "beta", "g", "r", "bi", "fb", "rb", "bo", "by", "o", "h", "be", "ob", "abb", "br", "bc", "gb", "B", "bb", "v", "e", "A", "eb", "bl", "cb", "base", "l", "bp", "aa", "u", "j", "y", "bs", "ba"], "c": ["ec", "ce", "lc", "con", "cat", "ci", "cd", "g", "ct", "rc", "cy", "r", "tc", "fc", "col", "bc", "dc", "uc", "sc", "can", "e", "cin", "cp", "ch", "cc", "co", "cu", "cb", "l", "cl", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["p", "db", "cd", "g", "di", "dn", "td", "r", "w", "z", "dev", "dec", "o", "h", "dt", "dc", "da", "v", "e", "de", "ad", "red", "des", "s", "dp", "div", "l", "dd", "du", "u", "dra", "j", "y", "data", "ds", "cm", "nd"], "D": ["DJ", "M", "N", "DL", "T", "DOM", "TD", "DOS", "DO", "DIR", "R", "DE", "I", "L", "X", "FD", "DI", "Set", "V", "MD", "S", "Do", "CD", "DA", "DP", "B", "G", "DD", "DC", "Dir", "P", "DN", "A", "E", "Ds", "WD", "DS", "DM", "PD", "DF", "DB", "F", "dict", "C"], "parent": ["top", "master", "to", "state", "nt", "local", "path", "offset", "p", "name", "Parent", "child", "g", "Parents", "test", "file", "r", "chain", " parents", "children", "type", "total", "prefix", "tree", "pool", "h", "sp", "part", "arent", "home", "depth", "pos", "pid", "out", "lower", "P", "row", "node", "new", "size", "base", "l", "tmp", "user", "line", "id", "scope", "parents", "ps", "trace", "stop"], "visited": ["versed", "visitted", "VISied", "expitted", "versated", "centralITED", "VisITED", "VISITED", "Visated", "navied", "visied", "expITED", "VISitted", "visiting", "expited", "centraliting", "visITED", "navited", "explITED", "Visitted", "servitted", "servated", "expiting", "explited", "vised", "Visiting", "centralitted", "Visited", "served", "Vised", "navitted", "servited", "navITED", "VISited", "centralited", "VISiting", "explied", "versitted", "explitted", "visated", "versited"], "root": ["loc", "top", "stop", "oots", "nt", "ro", "path", "p", "name", "head", "child", "g", "test", "this", "uid", "r", "chain", "sys", "set", "prefix", "type", "window", "box", "ic", "tree", "h", "go", "main", "right", "bc", "empty", "ot", "oot", "depth", "nil", "out", "key", "null", "v", "an", "ok", "row", "it", "none", "node", "rt", "rew", "ree", "roots", "div", "Root", "boot", "base", "id", "j", "y", "scope", "index", "start"], "stack": ["history", "top", "storage", "reverse", "complete", "queue", "nt", "pack", "load", "context", "p", "loop", "left", "iter", "store", "r", "chain", "ts", "push", "set", "buffer", "wait", "wall", "window", "box", "step", "mount", "track", "tree", "level", "config", "empty", "sp", "valid", "depth", "pos", "check", "frames", "v", "list", "pop", "switch", "steps", "all", "cache", "st", "new", "stage", "lock", "tmp", "line", "Stack", "upper", "ack", "back", "trace", "stop"], "x": ["wx", "xi", "ex", "xe", "p", "xes", "ux", "g", "xc", "ct", "X", "xa", "rx", "r", "ox", "z", "xxxx", "xt", "ctx", "xxx", "ix", "h", "tx", "ax", "xd", "v", "e", "fx", "xy", "xs", "mx", "dx", "inx", "l", "xx", "j", "y", "index", "lex", "xp", "xf", "ft"], "t": ["ty", "T", "to", "nt", "token", "p", "g", "test", "tw", "typ", "td", "r", "tc", "tip", "ts", "z", "wt", "w", "txt", "xt", "te", "o", "tree", "let", "h", "tx", "term", "pt", "ot", "out", "v", "e", "ti", "at", "tt", "tr", "it", "tf", "st", "node", " T", "rt", "title", "l", "u", "j", "y"], "grp": ["Grp", "Grm", "GRm", " grm", " grP", "Grpc", "prP", "frpi", "prpc", "brpc", "frm", "brp", "Grpa", "frp", "brpa", "GrP", "GRn", "grpi", " grn", "prp", "prpa", "Grpi", "grP", "GRp", "frP", "grpc", "brP", "grn", " grpi", "grm", "grpa", "Grn"], "tans": ["tats", "tants", " tants", "tANS", " taps", "tan", "trrans", "fants", "TANS", "fans", "Taps", "taps", "pans", "trats", " tens", " tats", " trans", "trans", "pan", "pons", " tANS", " tarts", "parts", "Tens", "trons", "ttaps", "fan", "tens", "tons", "farts", "ttens", " tan", "pants", " tons", "ttANS", "pats", "Tans", "ttans", "tarts", "prans"], "block": ["open", "stop", "load", "point", "loop", "run", "rule", "start", "black", "Block", "unit", "blocks", "type", "box", "case", "record", "check", "out", "switch", "un", "byte", "row", "jump", "node", "group", "lock", "skip", "bl", "line", "bin", "link", "join", "kill", "field", "chain"]}}
{"code": "N = int(input())\\nab = [list(map(int, input().split())) for _ in range(N)]\\ncd = [list(map(int, input().split())) for _ in range(N)]\\nab.sort(reverse=True)\\ncd.sort()\\np = 0\\nfor c in cd:\\n    ac = [-1, -1]\\n    for a in ab:\\n        if c[0] > a[0] and c[1] > a[1] and ac[1] < a[1]:\\n            ac = a\\n    if ac != [-1, -1]:\\n        p += 1\\n        ab.remove(ac)\\n\\nprint(p)\\n", "target": "591", "substitutes": {"N": ["CNN", "n", "M", "NS", "T", "NV", "NC", "GN", "NI", "Ns", "R", "I", "L", "NA", "NM", "NN", "NP", "NR", "NT", "V", "TN", "NO", "S", "B", "J", "Q", "Num", "P", "A", "Sn", "D", "NB", "Ni", "K", "Z", "C"], "ab": ["abe", "n", "sb", "ex", "db", "abin", "hab", "abl", "ib", "ai", "lb", "acc", "fab", "AB", "pb", "eas", "rab", "rb", "Ab", "ob", "abb", "ada", "abs", "b", "xd", "gb", "tab", "bb", "ad", "al", "ap", "at", "af", "deb", "abc", "eb", "app", "cb", "ar", "ast", "ub", "az", "bs", "ba", "ca"], "_": ["x", " e", " the", "__", " pre", " long", " g", " l", " local", " success", " time", " __", " mult", "___", " un", " z"], "cd": ["fd", "vd", "ld", "d", "db", "dir", "ct", "td", "tc", "cod", "bd", "dl", "od", "fc", "ca", "rb", "kb", "xd", "gb", "dc", "tab", "CD", "ud", "pd", "de", "bt", "ad", "rod", "lab", "cp", "cc", "hd", "div", "cb", "dd", "sd", "ecd", "cs", "md", "cm", "cr", "ds", "cf", "nd", "rd"], "p": ["n", "perm", "d", "pc", "g", "vp", "jp", "i", "r", "m", "pad", "fp", "pb", "par", "change", "tp", "pa", "h", "result", "b", "t", "wp", "lp", "pos", "pd", "v", "P", "ap", "cp", "debug", "dp", "q", "pi", "progress", "np", "bp", "j", "pers", "op", "pp", "ps", "pg"], "c": ["ec", "lc", "n", "x", "ci", "d", "unc", "ach", "pc", "xc", "ct", "rc", "acc", "arc", "tc", "z", "fc", "ic", "f", "b", "bc", "t", "dc", "icc", "mc", "anc", "uc", "abc", "cc", "cu", "cb", "etc", "ar", "oc", "cs", "cr", "cf", "ca", "C"], "ac": ["aq", "ec", "aco", "acer", "unc", "ach", "rac", "acs", "ct", "ai", "ak", "acc", " cac", "tc", "ace", "fc", "ica", "ic", "pac", "act", "jac", "vc", "fac", "alpha", "anc", "mac", "uc", "acl", "iac", "mc", "att", "ad", "ain", "al", "ap", "cache", "at", "af", "abc", "cc", "co", "cu", "sac", "am", "lat", "Ac", "oc", "cs", "AC", "ag", "C"], "a": ["aq", "ia", "sta", "ae", "aff", "ach", "xa", "ai", "i", "acc", "ma", "m", "ace", "z", "eas", "ga", "o", "ea", "pa", "la", "aaa", "go", "abs", "b", "f", "t", "alpha", "att", "an", "e", "ad", "v", "A", "ap", "al", "all", "at", "af", "sa", "app", "au", "aa", "l", "am", "ar", "u", "ag", "area", "ba", "ca", "ao"]}}
{"code": "def main():  \\n  import sys\\n  input = sys.stdin.readline\\n  n,p = [int(i) for i in input().split()]\\n  s = input()\\n  ans = 0\\n  \\n  import math\\n  def nCr(n, r):\\n    if n < r:\\n      return 0\\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\\n\\n  if p == 2 or p == 5:\\n      for i in range(n):\\n          if int(s[i]) % p == 0:\\n              ans += i + 1\\n      print(ans)\\n      exit()\\n\\n  else:\\n    chk = [0]*p\\n    chk[0] = 1\\n    m = 0\\n    for i in range(n)[::-1]:\\n      m = (int(s[i])*pow(10,n-1-i,p)+m)%p\\n      chk[m] += 1\\n    for i in chk:\\n      ans += nCr(i,2)\\n    print(ans)\\nif __name__ == '__main__':\\n    main()\\n", "target": "448", "substitutes": {"input": ["open", "next", "pattern", "cat", "select", "insert", "util", "view", "put", "get", "reset", "submit", "ct", "this", "connect", "inc", "raw", "set", "control", "ref", "focus", "read", "enum", "output", "ze", "cmd", "config", "hidden", "form", "initial", "inner", "feed", "ahead", "add", "pull", "Input", "sq", "cin", "update", "int", "list", "interface", "sleep", "it", "csv", "print", "dq", " Input", "q", "reader", "command", "enter", "range", "data", "join", "request", "sum"], "n": ["a", "nr", "N", "x", "net", "nt", "gn", "d", "ln", "on", "name", "ne", "cn", "g", "dn", "long", "sn", "c", "w", "z", "ns", "o", "h", "f", "b", "num", "t", "nia", "nb", "nor", "no", "mn", "na", "an", "v", "int", "nc", "nan", "nu", "nn", "l", "ll", "np", "pi", "ng", "j", "y", "k"], "p": ["x", "perm", "d", "pc", "g", "jp", "w", "pre", "c", "pe", "pb", "type", "power", "o", "tp", "pa", "h", "ip", "pr", "f", "b", "num", "sp", "t", "pt", "lp", "pos", "pid", "v", "P", "e", "ap", "post", "cp", "ping", "q", "l", "pi", "np", "bp", "u", "pl", "j", "y", "k", "pn", "op", "pp", "pro", "ps"], "i": ["\u00ed", "mi", "ki", "xi", "x", "iii", " ii", "gu", "ci", "gi", "cli", "di", "ai", "I", "bi", "yi", "qi", "info", "iti", "ic", "ix", "o", "ski", "ip", " bi", "ind", "t", "ri", "io", "si", "iu", "ii", "li", "ji", "v", "ei", "int", "ti", "oi", "e", "adi", "iy", "im", "it", "ini", "zi", "ui", " ti", "phi", "pi", "ati", "l", "u", "id", "j", "index", "y", "ij", "ik", "k", "iri"], "s": ["a", "sb", "ys", "str", "ats", "js", "sys", "c", "ts", "sql", "ns", "rs", "ins", "ls", "b", "sp", "t", "S", "ss", "its", "bits", "v", "strings", "gs", "string", "sa", "st", "sv", "sts", "q", "cs", "y", "ps", "bs"], "ans": ["ANS", "ants", "ats", "ians", "names", " means", "eds", "outs", "ai", "ows", "aus", "ros", "sn", "aned", "ts", "ates", "ns", "ann", "rans", "rs", "anas", "ks", "offs", "ins", "res", "ons", "ms", "amps", "mean", "ls", "ents", "ens", "cas", "uns", "can", "an", "posts", "anks", "iann", "anes", "aps", "oss", "des", "nan", "xs", "ran", "ams", "aos", "ands", "yes", "ads", "cs", "arts", "es", "stats", "ps", "said", "sum"], "r": ["a", "nr", "mr", "x", "sr", "ro", "d", "g", "R", "rc", "re", "w", "c", "rs", "o", "h", "rar", "f", "b", "right", "t", "v", "e", "rt", "q", "l", "ar", "u", "k", "er", "j", "rn", "cr", "rd"], "chk": ["chartk", "achk", "Chks", "achunk", "schkg", "chks", "chartck", "achck", "chck", " Chkey", " chunk", "tchck", "Chkey", " chkey", "Chunk", "chkg", " chck", "tchk", " chkk", " chks", " Chck", " chkg", "Chck", " Chk", "achks", "tchunk", "schk", "chkk", "tchks", " Chks", "chkey", "Chk", "chunk", "chartunk", "achkk", "schunk", "chartkg", "schck", "Chkk"], "m": ["tm", "a", "mi", "km", "M", "mr", "perm", "me", "mod", "um", "dm", "d", "mu", "mm", "g", "w", "c", "mut", "man", "min", "o", "rm", "gm", "h", "ms", "f", "b", "t", "mc", "mn", "v", "e", "an", "sm", "im", "l", "am", "u", "k", "j", "cm", "mt"]}}
{"code": "def solve():\\n  N, K, C = map(int, input().split())\\n  workable = [i for i, s in enumerate(input()) if s==\"o\"]\\n  if len(workable) == K:\\n    return workable\\n    \\n  latest = set()\\n  prev = workable[-1]+C+1\\n  for x in reversed(workable):\\n    if prev - x > C:\\n      latest.add(x)\\n      prev = x\\n  if len(latest) > K:\\n    return []\\n  must = []\\n  prev = -C-1\\n  for x in workable:\\n    if x - prev > C:\\n      if x in latest:\\n        must.append(x)\\n      prev = x\\n  return must\\n\\nfor i in solve():\\n  print(i+1)\\n", "target": "647", "substitutes": {"N": ["CNN", "n", "M", "T", "NC", "R", "I", "X", "L", "NN", "NR", "H", "W", "O", "V", "S", "B", "J", "Q", "G", "P", "E", "D", "Y", "Ni", "F"], "K": ["M", "T", "KN", "KR", "X", "I", "R", "KK", "H", "W", "O", "V", "KS", "CP", "KC", "NK", "PK", "S", "B", "J", "Q", "SK", "G", "P", "A", "D", "Y", "UK", "k", "F", "KI", "Z", "KE", "KA", "KING"], "C": ["CNN", "M", "CB", "T", "Ct", "CM", "JC", "CG", "R", "I", "X", "L", "c", "CI", "CS", "CN", "Cut", "W", "CV", "H", "CP", "V", "CT", "O", "KC", "S", "B", "Co", "Q", "CO", "G", "P", "CR", "E", "CON", "D", "CC", "Y", "Count", "U", "F", "CF", "Can"], "workable": ["drawitable", "workables", "workment", "alignables", "drawables", "runble", "WORKables", "wordatable", "actabled", " workabe", "shakeability", "shakeable", "actability", "joinabe", "flowment", "alignitable", "actorable", "workerabe", "actable", "drawable", "alignatable", "workeratable", "workabled", "flowable", "joinable", " workment", "runability", "WORKability", "workatable", "workability", "WORKabe", "WORKable", " workability", "workerment", "joinability", "workerabled", "alignable", "WORKatable", "workerability", " workables", "wordabe", "wordable", "shakeabled", "workitable", " workatable", "workerable", "runable", "WORKble", "flowatable", "workerble", "workerorable", " workitable", "workabe", "workorable", "runables", "shakeorable", "wordble", "drawatable", "flowble", " workble", "joinatable", "workble"], "i": ["mi", "ki", "n", "xi", "str", "ci", "gi", "cli", "d", "p", "g", "di", "ai", "I", "r", "c", "m", "z", "bi", "yi", "iti", "ic", "ix", "o", "ip", "ind", "f", "b", "t", "ri", "si", "li", "key", "ii", "v", "ei", "int", "ti", "ji", "e", "zi", "ini", "dim", "l", "pi", "phi", "u", "id", "j", "index", "y", "k", "ij", "ik", "fi", "hi"], "s": ["n", "sh", "str", "ats", "p", "ains", "spec", "sf", "sys", "c", "ts", "m", "set", "ns", "rs", "ses", "ins", "t", "ss", "S", "si", "its", "v", "e", "sq", "gs", "ws", "ims", "xs", "sv", "sts", "sis", "os", "es", "ds", "ps", "sc"], "latest": ["history", "next", "master", "verified", "released", "meta", "optional", "multiple", "table", "Latest", "required", "confirmed", "beta", "unsigned", "acceptable", "successful", "finals", "current", "largest", "ts", "seen", "versions", "worst", "tail", "enabled", "failed", "t", "dates", "published", "v", "available", "all", "sufficient", "final", "future", "update", "list", "liest", "highest", "first", "later", "new", "updated", "l", "il", "recent", "live", "gettable", "best", "peak", "mint", "weekly", "last"], "prev": ["history", "next", "top", "nr", "reverse", "before", "cmp", "Prev", "p", "head", "mp", "rev", "jp", "rx", "PRE", "zero", "pre", "current", "map", "ref", "rem", "old", "pred", "parent", "gp", "tail", "tx", "pr", "br", "sp", "num", "rel", "pri", "len", "v", "final", "pop", "obj", "Previous", "adj", "orig", "ptr", "highest", "jump", "first", "pres", "vious", "then", "tmp", "bp", "j", "index", "y", "op", "ij", "pp", "upper", "last"], "x": ["a", "wx", "n", "xi", "ex", "ci", "xe", "p", "xes", "ux", "name", "g", "xc", "X", "xa", "rx", "w", "ox", "z", "xxxx", "xt", "xml", "ctx", "xxx", "hex", "ic", "ix", "o", "step", "tx", "ax", "f", "xd", "sex", "t", "xxxxxxxx", "v", "e", "int", "fx", " xx", "cox", "xy", "xs", "work", "dx", "inx", "q", "xx", "l", " cx", "j", "y", "k", "xp", "xf"], "must": ["hold", "any", "need", "critical", "necessary", "could", "util", "required", "test", "ust", "shall", "only", "help", "unless", "irst", "annot", "require", "failed", "bool", "news", "force", "cover", "forth", "also", "important", "can", "will", "list", "please", "sufficient", "each", "v", "st", " Must", "req", "other", "sure", "never", "essential", "etc", "met", "Must", "may", "mint"]}}
{"code": "def cul(x,X):\\n    dic={0:1}\\n    for i in range(len(x)):\\n        tmp={}\\n        for j in dic:\\n            tmp[j+x[i]]=1\\n            tmp[j-x[i]]=1\\n        dic=tmp\\n    if X in dic: return True\\n    else: return False\\n\\nS=input()\\ns=list(S.split(\"T\"))\\nX,Y=map(int,input().split())\\nx,y=[len(i) for i in s[::2]],[len(i) for i in s[1::2]]\\nif S[0]==\"F\": X=abs(X-x.pop(0))\\nY=abs(Y)\\n\\ndx=sorted(x,reverse=True)\\ndy=sorted(y,reverse=True)\\n\\nprint(\"Yes\" if cul(dx,X) and cul(dy,Y) else \"No\")", "target": "753", "substitutes": {"x": ["wx", "n", "xi", "ex", "xe", "d", "p", "ux", "xc", "test", "g", "xa", "rx", "w", "c", "ox", "z", "xxxx", "xt", "input", "xml", "ix", "tx", "act", "ax", "f", "xd", "config", "t", "time", "v", "e", "int", "fx", "xy", "xs", "XX", "xx", "l", "lat", "id", "data", "px", "lex", "index", "xp", "xf"], "X": ["M", "N", "IX", "T", "Ax", "xi", "TX", "I", "R", "L", "TY", "EX", "MX", "ox", "UX", "OX", "Ex", "H", "W", "ZX", "XY", "O", "V", "XP", "DX", "J", "Q", "ML", "G", "Tx", "P", "A", "FX", "E", "xs", "XX", "D", "XT", "XXX", "Left", "XL", "U", "K", "F", "Time", "Z", "C", "Xi"], "dic": ["dicc", "Dics", " dIC", "pdics", "DIC", "Dicc", "pdric", "idicc", "dics", " dics", "tdIC", " dric", "dIC", "didIC", "tdric", "didics", "tdics", "Dict", " doc", "dsIC", "tdic", " dicc", "Dic", "pdIC", "Doc", "dsication", "idIC", "idic", "dsicc", "idication", "didicc", "tdoc", "Dication", " dict", "dsic", "dric", "doc", "didic", "dict", "pdic", "dication", "tdict"], "i": ["mi", "ki", "n", "xi", "ia", "uri", "ie", "ci", "cli", "ir", "gi", "p", "di", "ib", "ai", "I", "c", "z", "bi", "info", "iti", "ic", "o", "ix", "ip", "ind", "f", "t", "ri", "si", "iu", "li", "ii", "ji", "v", "ei", "int", "ti", "oi", "im", "it", "ini", "zi", "\u0438", "q", "l", "pi", "phi", "il", "id", "index", "ik", "ij", "fi", "iri", "hi", "chain"], "tmp": ["dirty", "pkg", "cmp", "perm", "nt", "lib", "p", "table", "db", "mp", "ret", "test", "this", "jp", "td", "tc", "txt", "m", "mut", "prefix", "ctx", "prime", "rb", "input", "py", "tp", "gm", "result", "ind", "done", "sp", "t", "pretty", "tab", "out", "tn", "cache", "qq", "emp", "obj", "MP", "xy", "tt", "mk", "tf", "tar", "uf", "new", "clip", "buff", "etc", "copy", "np", "data", "tem", "mint", "temp"], "j": ["n", "xi", "uj", "ja", "js", "d", "p", "aj", "g", "di", "jp", "I", "oj", "jc", "z", "m", "c", "jj", "o", "ix", "ind", "f", "b", "t", "J", "li", "ii", "ji", "kj", "v", "obj", "it", "q", "l", "pi", "dj", "item", "id", "k", "ij"], "S": ["M", "N", "NS", "T", "SH", "ES", "BS", "SS", "SL", "SB", "SER", "I", "SO", "L", "R", "TY", "RS", "JS", "SI", "CS", "TS", "H", "O", "V", "B", "J", "Q", "G", "P", "SE", "A", "E", "SP", "SU", "DS", "SA", "F", "SR", "String", "C"], "s": ["n", "sb", "sw", "ys", "seconds", "js", "p", "eds", "g", "fs", "c", "ts", "ns", "rs", "ses", "tests", "ins", "sl", "ls", "abs", "b", "sp", "t", "ss", "parts", "args", "its", "gs", "sq", "fts", "has", "ws", "gets", "ims", "xs", "sv", "ments", "ches", "sts", "rates", "sets", "cs", "se", "es", "stats", "ds", "ps", "bs"], "Y": ["M", "N", "YD", "T", "TX", "My", "I", "Py", "R", "TY", "L", "YS", "MY", "HY", "OX", "Gy", "YC", "Sy", "Year", "H", "XY", "O", "V", "TH", "Ch", "YA", "B", "J", "Q", "G", "P", "IO", "A", "Ray", "E", "YN", "YY", "XX", "D", "FY", "Cy", "By", "yy", "LL", "DB", "Z", "NY", "BY", "C"], "y": ["n", "ys", "p", "cy", "yo", "z", "ies", "my", "ny", "yi", "vy", "py", "ye", "yr", "XY", "hy", "b", "axy", "t", "yl", "ot", "isy", "yn", "e", "ey", "iy", "xy", "ch", "yt", "yy", "fy", "ay", "ym"], "dx": ["wx", "xi", "ex", "d", "ux", "cd", "rx", "dh", "ox", "dl", "ix", "wd", "XY", "tx", "ind", "ax", "df", "xd", "DX", "dr", "fx", "xy", "xs", "XX", "dq", "nox", "xx", "dj", "yx", "px", "ij", "ds", "xp"], "dy": ["bis", "sy", "ty", "yd", "idy", "err", "phy", "d", "yer", "beta", "dir", "ady", "dies", "di", "wy", "addy", "ns", "dl", "ny", "yi", "dev", "py", "yr", "ind", "dt", "zy", "uy", "lon", "iy", "xy", "eddy", "der", "fy", "yy", "dd", "dj", "sd", "ds", "bs", "ym"]}}
{"code": "print \"\".join(str([[\"%dx%d=%d\"%(x,y,x*y) for y in range(1,10)] for x in range(1,10)]).replace(\"'\",\"\").replace(\"[\",\"\").replace(\"]\",\"\").replace(\",\",\"\\n\").replace(\" \",\"\"))", "target": "789", "substitutes": {"x": ["wx", "xi", "ex", "d", "ux", "xc", "X", "xa", "i", "rx", "w", "c", "ox", "z", "m", "xt", "ix", "col", "h", "tx", "ax", "xd", "lon", "v", "fx", " xx", "width", "height", "xy", "xs", "mx", "dx", "l", "xx", "lat", "yx", "px", "xp", "xf"], "y": ["sy", "ty", "ys", "yd", "d", "cy", "i", "oy", "yz", "c", "ox", "z", "ly", "ies", "my", "ny", "yi", "vy", "py", "ye", "col", "h", "yr", "b", "dy", "yl", "uy", "v", "yn", "ey", "gy", "iy", "xy", "ry", "yt", "Y", "yy", "fy", "yx", "ya", "ym"]}}
{"code": "#import numpy as np\\n#import math\\n#from decimal import *\\n#from numba import njit\\n\\n#@njit\\ndef main():\\n    X = int(input())\\n    a = 100\\n    count = 0\\n    while a < X:\\n        a += a//100\\n        count += 1\\n    print(count)   \\n\\nmain()\\n", "target": "359", "substitutes": {}}
{"code": "a = list(map(int,input().split()))\\nif(a[0] < a[1] and a[1] < a[2]): print(\"Yes\")\\nelse: print(\"No\")", "target": "554", "substitutes": {"a": ["history", "n", "x", "ia", "sta", "ae", "ac", "ava", "ab", "aff", "d", "p", "i", "zero", "ma", "set", "ata", "eas", "ga", "o", "ea", "pa", "aaa", "val", "fa", "abs", "b", "f", "t", "parts", "na", "an", "att", "all", "A", "ap", "up", "at", "sa", "now", "ao", "s", "app", "au", "oa", "aos", "div", "aa", "l", "am", "j", "es", "er", "array", "area", "ba"]}}
{"code": "#!/usr/bin/env python3\\nfrom fractions import gcd\\nn=int(input())\\ndef lcm(m,n):\\n    return (m*n)//gcd(m,n)\\nprint(lcm(2,n))", "target": "762", "substitutes": {}}
{"code": "a=int(input())\\nb=int(input())\\nh=int(input())\\nA=int(1/2*(a+b)*h)\\nprint(A)\\n", "target": "319", "substitutes": {"a": ["aq", "ce", "x", "ia", "to", "ae", "sta", "ab", "aj", "ach", "i", "\u00e1", "c", "ma", "eas", "ga", "ea", "aaa", "act", "go", "abs", "auto", "alpha", "art", "an", "e", "ap", "obj", "al", "at", "sa", "af", "ao", "app", "au", "oa", "ed", "aa", "am", "ar", "ba", "ac"], "b": ["bis", "sb", "ab", "bar", "db", "ib", "lb", "blue", "c", " B", "bi", "fb", "rb", "bo", "by", "be", "ob", "abb", "br", "bc", "gb", "nb", "B", "bb", "obj", "eb", "bl", "cb", "j", "bs", "ba"], "h": ["n", "th", "sh", "kh", "d", "hz", "i", "w", "hs", "c", "m", "ih", "rh", "hex", "H", "sl", "ah", "bh", "f", "uh", "hl", "gh", "dr", "v", " H", "oh", "ph", "it", "ch", "ha", "he", "high", "hr", "hd", "phi", "ho", "hh", "j", "hi", "ow"], "A": ["GA", "Answer", "An", "Alpha", "AU", "X", "I", "R", "L", "One", "AB", "AE", "H", "AA", "LA", "As", "V", "AS", "Given", "S", "Bar", "B", "J", "Q", "G", "This", "HA", "P", "Address", "CA", "AY", "AF", "Array", "AM", "Java", "SA", "AC", "F", "BA", "The", "AN", "ACT", "AP"]}}
{"code": "from collections import Counter\\n\\n\\nN = int(input())\\nc = input()\\ncntr = Counter(c)\\n\\nans = 0\\nfor c, r in zip(c, \"R\" * cntr[\"R\"]):\\n    if c != r:\\n        ans += 1\\nprint(ans)\\n", "target": "714", "substitutes": {"N": ["n", "M", " D", "NS", "NC", "Ns", "Res", " n", "NN", "ns", "NR", " M", " Num", "RN", "S", "B", "ND", " C", "Num", "P", "A", "Ren", "D", "Rec", "Count", " NC", "Ni", "C"], "c": ["ec", "ctrl", "a", "lc", "con", "n", "x", "ce", "gc", "cont", "p", "d", "unc", "cd", "pc", "g", "ct", "rc", "arc", "tc", "m", "z", "fc", "cor", "ic", "col", "h", "cur", "rec", "f", "b", "t", "mc", "dc", "anc", "sc", "e", "v", "nc", "cp", "ch", "com", "cc", "co", "cb", "q", "l", "cu", "cl", "ar", "cs", "y", "k", "cm", "cr", "cf", "C", "ac"], "cntr": ["cNTn", " cndn", "cgentrd", "cgentp", " cndrd", "cntl", " cntl", "cntn", "cctn", "cndrd", " cndp", "cctp", "cNTl", "cctl", "cctrd", "cNTr", " cntrd", "cndp", "cndr", " cndl", " cntn", "cgentr", "cctr", "cNTp", " cndr", " cntp", "cntrd", "cgentl", "cndn", "cntp", "cndl"], "ans": ["ars", "ANS", "ants", "ats", "anon", "eds", " means", "acs", "urs", "ros", "aus", "aned", "ns", "anus", "ann", "rans", "rs", "ums", "anas", "ks", "offs", "ins", "ras", "ms", "amps", "ents", "ens", "ots", "uns", "an", "rors", "anks", "posts", "iann", "oss", "aps", "ups", "ran", "nas", "aos", "vs", "ads", "arts", "lan", "AN"], "r": ["nr", "n", "mr", "sr", "x", "pair", "rr", "ro", "err", "ir", "d", "p", "R", "rc", "i", "m", "rh", "rs", "rb", "res", "o", "result", "fr", "right", "b", "rel", "t", "dr", "e", "q", "l", "ar", "u", "k", "range", "er", "rn", "cr", "rd"]}}
{"code": "S = list(input())\\n\\nans = 0\\nB = S[0] == \"B\"\\n\\nfor i in range(1, len(S)):\\n    if (S[i] == \"B\") != B:\\n        ans += 1\\n        B = S[i] == \"B\"\\nprint(ans)\\n", "target": "655", "substitutes": {"S": ["Save", "M", "N", "List", "NS", "T", "SF", "SH", "ES", "BS", "SS", "SL", "SB", "I", "JS", "L", "RS", "PS", "SO", "VS", "SI", "CS", "TS", "Screen", "Spe", "Set", "OS", "H", "GS", "V", "SQL", "IS", "Sample", "Q", "G", "P", "SE", "A", "s", "Results", "SP", "SU", "D", "DS", "DB", "SA", "F", "LS", "String", "Z", "C"], "ans": ["ars", "ANS", "Scan", "ants", "ats", "beans", "An", "eds", " means", "outs", "aus", "ros", " Ans", "ns", "ann", "ums", "mas", "rs", "anas", "ks", "utters", " spans", "rans", "ras", "ins", "ons", "ms", "amps", "offs", "pan", "ents", "ens", "uns", "an", "anks", "Ann", "iann", "anes", "aps", "ups", "aos", "ads", "arts", "cs", "AN", "ds"], "B": ["BI", "M", "N", "CB", "T", "RB", "VB", "BS", "OB", "Bs", "SB", "R", "I", "L", "IB", "Builder", "AB", "Reb", "BG", "Normal", "H", "W", "O", "V", "BT", "BC", "BE", "GB", "WB", "BR", "G", "PB", "P", "BB", "A", "BM", "E", "TB", "FB", "D", "NB", "EB", "Y", "OK", "DB", "F", "Beta", "Z", "C"], "i": ["mi", "n", "xi", "x", "ogi", "uri", "me", "ci", "gi", "di", "I", "iter", "bi", "ami", "yi", "qi", "ic", "ix", "ip", "ind", "f", "b", "multi", "ri", "si", "li", "key", "ji", "ori", "ii", "ei", "ti", "im", "it", "zi", "ini", "ui", "q", "pi", "id", "j", "index", "k", "y", "ij", "iri"]}}
{"code": "import math,itertools,fractions,heapq,collections,bisect,sys,queue,copy\\n\\nsys.setrecursionlimit(10**7)\\ninf=10**20\\nmod=10**9+7\\ndd=[(-1,0),(0,1),(1,0),(0,-1)]\\nddn=[(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\\n\\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\\n# def LF(): return [float(x) for x in sys.stdin.readline().split()]\\ndef I(): return int(sys.stdin.readline())\\ndef F(): return float(sys.stdin.readline())\\ndef LS(): return sys.stdin.readline().split()\\ndef S(): return input()\\n\\ndef main():\\n  n,m=LI()\\n  if m%n==0:\\n    return m//n\\n\\n  ans=0\\n  for i in range(1,m//n+1):\\n    if m%i==0:\\n      ans=i\\n  \\n  return ans\\n\\n# main()\\nprint(main())\\n", "target": "163", "substitutes": {"inf": ["call", "ex", "lim", "err", "mult", "Inf", "shift", "fun", "ext", "zero", "ipl", "scale", "inv", "dec", "sec", "const", "abs", "ef", "cond", "off", "exp", "std", " exp", "pl", "pi", " floor", "pp", "neg"], "mod": ["perm", "MOD", "sub", "spec", "mult", "Mod", "fun", "rad", "scale", "pad", "od", "circ", "round", "dec", "const", "ind", "tab", "cond", "form", "dig", "sim", "pos", "add", "exp", "rt", "div", "var", "sum"], "dd": ["fd", "vd", "dds", "d", "ld", "dm", "cd", "di", "td", "bd", "dl", "od", "dt", "df", "dy", "dc", "da", "ud", "pd", "DD", "de", "std", "dq", "sd", "md", "idd", "ds", "nd"], "ddn": ["pdn", "tdns", "cdns", "pdns", "tdg", "tdn", "ddN", "ddg", "tdN", "cdN", "ddns", "pdg", "pdN", "cdn", "cdg"], "x": ["wx", "n", "xi", "ex", "xe", "xes", "ux", "xc", "X", "xa", "i", "rx", "w", "z", "xxxx", "ctx", "ix", "val", "tx", "t", "xxxxxxxx", "v", "e", "xy", "xs", "xb", "\u00e7", "dx", "q", "xx", "yx", "y", "px", "xp", "xf"]}}
{"code": "sx, sy, tx, ty = map(int,input().split())\\n\\nxd = tx - sx\\nyd = ty - sy\\n\\nroute1 = []\\nroute1.append('R'*xd)\\nroute1.append('U'*yd)\\n\\nroute2 = []\\nroute2.append('L'*xd)\\nroute2.append('D'*yd)\\n\\nroute3 = ['D']\\nroute3.append('R' * (xd + 1))\\nroute3.append('U' * (yd + 1))\\nroute3.append('L')\\n\\nroute4 = ['U']\\nroute4.append('L'*(xd+1))\\nroute4.append('D'*(yd+1))\\nroute4.append('R')\\n\\nans = ''.join(route1) + ''.join(route2) + ''.join(route3) + ''.join(route4)\\nprint(ans)\\n\\n\\n", "target": "763", "substitutes": {"sx": ["Sxt", " sfx", "txt", "sox", " sox", "tfx", "sdx", "sux", "sxy", "osxy", "Sx", "osx", "sfx", "Sox", "osux", "sdfx", "Sfx", "Sux", "osfx", " sxt", "sxt", "tox", "sdux", "sdxy", "Sxy"], "sy": ["sym", "sh", "ys", "syn", "d", "wy", "cy", "sys", "ky", "ox", "ly", "south", "ny", "Sy", "py", "sky", "ery", "dy", "ds", "t", "icy", "ss", "si", "sat", "sq", "ey", "gy", "sm", "sie", "s", "sty", "she", "yt", "fy", "yy", "sd", "y", "psy", "SY", "ry"], "tx": ["tm", "wx", "x", "ex", "tan", "nt", "TX", "tty", "rx", "txt", "tc", "ts", "ox", "ctx", "te", "trans", "ax", "tk", "t", "pt", "Tx", "ti", "fx", "tt", "tr", "xs", "mx", "rt", "dx", "kt", "px", "mt"], "ty": ["tm", "sym", "wx", "ys", "pty", "tty", "wy", "typ", "cy", "rx", "TY", "txt", "ky", "sys", "ly", "my", "vy", "ties", "py", "dy", "t", "pt", "uy", "gy", "tt", "rt", "yp", "yt", "fy", "yy", "y", "vt", "Ty", "tem", "ry"], "xd": ["fd", "ped", "x", "tan", "vd", "xe", "ld", "dyl", "ady", "cd", "xc", "dial", "xa", "wed", "yz", "ox", "dl", "od", "aed", "oyd", "dk", "alid", "dom", "wd", "hid", "ind", "ief", "ax", "dy", "axy", "hl", "wid", "ud", "pd", "fx", "rod", "idth", "cox", "xs", "xb", "dx", "hd", "orth", "xx", "dd", "sd", "yx", "dra", "ecd", "did", "px", "md", "eddy", "xf", "fred", "rd"], "yd": [" ya", " dj", "YD", "ys", "vd", " du", "yer", " dock", "ld", " ey", "dyl", "cd", "ady", "aky", "d", "esty", "wy", " std", " hy", "wed", " dy", " da", "yz", " hyd", "bd", "dl", "rend", "yr", "jud", " od", "dy", "axy", " sky", "icy", " dys", " dx", "uy", " sd", "pd", " oy", "yn", "ey", "rod", "eddy", " sty", " cd", " synd", "hd", "yp", "yt", "fy", "yy", "dd", "dj", "yx", "sd", "dra", "yu", "y", "hyd", "ds", " yuan", " yo", "ym", "rd"], "route1": [" route0", "entry1", "Route3", "oute6", "control1", "matchone", "match6", "outer8", "track1", "route60", "reply18", "route8", "oute0", "outeone", "entry11", " route6", "oute11", "oute60", "routeone", "route71", "control71", "reply60", "control001", " routeone", "route18", "oute18", "Route2", "outer1", "outer001", "match1", "control8", "reply11", "entry60", "route11", "track71", "outer71", "Route0", "oute1", "reply1", "entry18", "route0", "route001", "track8", "oute3", "oute2", "track001", "match3", "route6", "Route1"], "route2": ["rideSecond", "way2", "address12", "Route3", "routeSecond", "way3", "ridetwo", "route7", "exit02", "ride02", "view2", "oute7", "oute232", "oute12", "address232", "ride2", " route7", "reverse232", "routeTwo", "addressTwo", "reverseTwo", "routetwo", "view7", "exittwo", "reverse2", "exit2", "outeTwo", "address2", "oute4", "view3", "outetwo", "reverse12", "oute02", "way1", "exitSecond", "Route2", "route232", "outeSecond", "route12", "route02", "oute3", "oute2", "view4", "Route1"], "route3": ["handle3", "trip43", "force03", "handle15", "route03", "trip03", "rou4", "handlethree", " route15", "reply3", "outethree", "outer3", "remote3", "reverseThird", "route43", "remotethree", "trip3", " routethree", "case43", "case3", "handle03", "rou43", "reverseThree", "outerThird", "casethree", "reply03", "reply15", "outerThree", "handleThird", "force3", " route43", "reversethree", "trip4", "oute4", "outer03", "routhree", "routeThree", "force15", " route03", "oute43", "replythree", "forcethree", "routeThird", "reverse15", "rou3", "tripthree", "trip15", "route15", "remote43", "reverse03", "oute3", "routethree", "handleThree", "reverse3"], "route4": ["handle7", "way2", "way5", "oute5", "oute6", "layout4", "way3", "outer4", "oute40", "reverse4", "route7", "outer3", " routeFour", "route22", "handleFour", "route8", "layout44", "oute44", "remote4", " route6", "outeFour", "handle22", "reverse7", "route6", "strip4", "handle6", "strip7", "handle4", "outer2", "route40", "strip22", "oute4", "layout40", "handle44", "outer5", "reverse6", " route44", "layoutFour", "route44", "handle40", " route8", "reverse8", "remote8", "remote6", "handle8", "reverse22", "strip8", "route5", "oute3", "oute2", "way4", "routeFour"], "ans": ["ars", "umes", "ANS", "ants", "ians", "ana", "eds", "books", "aus", "ros", "asks", "san", "aned", " Ans", "ann", "rans", "anas", "ks", "ras", "amps", "angs", "rets", "mean", "anned", "ents", "ens", " sans", "an", "anners", "anks", "anes", "ran", "ams", "ands", "ads", "arts", "lan", "AN"]}}
{"code": "n=int(input())\\na=list(map(int,input().split()))\\n\\n\\nb=[0]*(n-1)\\n\\nfor i in range(n-1):\\n    if a[i]>=a[i+1]:\\n        b[i]=1\\n    \\nfrom itertools import groupby\\n\\ngr = groupby(b)\\n\\nans=0\\nfor k,v in gr:\\n    if k==1:\\n        ans =max(ans,len(list(v)))\\n\\nprint(ans)", "target": "623", "substitutes": {"n": ["N", "x", "nt", "gn", "d", "p", "en", "names", "name", "ne", "cn", "sn", "c", "m", "ns", "o", "nl", "num", "t", "nia", "len", "nb", "no", "mn", "na", "an", "nc", "nu", "nw", "nn", "number", "l", "np", "ll", "network", "j"], "a": ["sta", "ae", "ac", "ab", "era", "ta", "ach", "va", "ai", "c", "ma", "m", "eas", "ga", "ea", "la", "aaa", "act", "abs", "f", "isa", "alpha", "apa", "na", "an", "att", "A", "ap", "at", "sa", "s", "app", "au", "oa", "aa", "am", "area", "ba", "ca"], "b": ["bis", "sb", "ab", "bar", "d", "p", "db", "banks", "beta", "g", "ib", "r", "c", "bi", "wb", "fb", "rb", "mb", "be", "ob", "br", "bas", "gb", "auto", "nb", "B", "bb", "out", "obj", "eb", "base", "cb", "l", "bound", "bs", "ba"], "i": ["mi", "xi", "x", "uri", "ci", "gi", "g", "di", "ai", "I", "r", "m", "batch", "bi", "qi", "ic", "ix", "ip", "ind", "ri", "multi", "io", "si", "sim", "li", "ii", "ji", "ori", "ti", "im", "it", "zi", "ini", "ui", "\u0438", "phi", "pi", "id", "j", "index", "ij", "iri", "hi"], "gr": [" GR", " iii", " bra", "next", " gor", "ser", "mr", "sw", " sch", "kr", "ge", " vol", " fr", "rg", "gc", " pr", " gru", "g", " prob", " ver", " vis", "Gr", " cur", "GR", "gor", " ger", " ni", "vr", "pr", " mt", " prog", "br", "fr", " gn", " iv", "rl", "dr", " guard", " adj", "grid", "gs", "gru", "tr", "ch", " gu", "req", "group", " wr", " rem", "usr", "rand", "ather", " maj", " msg", " terr", " ge"], "ans": ["ars", "ANS", "ants", "ats", "beans", "eds", "outs", "aus", "ros", "aned", "ates", "ns", "vals", "ann", "rans", "rs", "mas", "anas", " spans", "ks", "ins", "offs", "eas", "vers", "ons", "ms", "amps", "ls", "ents", "ens", "anc", "uns", "can", "an", "gs", "anks", "aps", "anes", "oss", "nz", "xs", "ions", "nas", "ran", "vs", "yes", "ads", "cs", "arts", "os", "lan"], "k": ["ck", "km", "ki", "ek", "uk", "kn", "kr", "kh", "kl", "ijk", "kin", "kar", "ak", "kid", "dk", "ks", "kw", "ko", "tk", "key", "kj", "ikk", "ku", "wk", "kt", "kk", "sk", "j", "K", "ik", "ka", "ket", "mk", "unk"], "v": ["qv", "vd", "vv", "p", "vi", "vp", "tv", "g", "value", "uv", "m", "ev", "nov", "values", "val", "vr", "V", "cv", "f", "vc", "t", "ver", "av", "nv", "switch", "lv", "sv", "conv", "ve", "vs", "etc", "ov", "var", "u", "j", "vt"]}}
{"code": "li = list(map(int,input().split()))\\n\\nli.remove(max(li))\\n\\nprint(sum(li))", "target": "298", "substitutes": {"li": ["mi", "ki", "lc", "lu", "xi", "lig", "liga", "ni", "lim", "kl", "ci", "gi", "ln", "ld", "lt", "cli", "ne", "di", "ai", "i", "lets", "ml", "bi", "dl", "cho", "low", "sl", "pu", "ls", "sea", "si", "lis", "lo", "lie", "Li", "ii", "lp", "LI", "ti", "list", "lv", "au", "lock", "bl", "l", "pi", "lic", "le", "pl", "fi"]}}
{"code": "n = int(input())\\ns = str(input())\\n\\nnew_s = s[0]\\n\\nfor i in range(1,len(s)):\\n    if s[i] == s[i-1]:\\n        continue\\n    else:\\n        new_s += s[i]\\n\\nprint(len(new_s))\\n", "target": "717", "substitutes": {"n": ["N", "x", "nt", "d", "p", "sn", "c", "m", "z", "ns", "nl", "h", "b", "num", "t", "nb", "mn", "na", "v", "nc", "nm", "size", "nn", "l", "q", "np", "j", "k"], "s": ["a", "bis", "sb", "ys", "aws", "str", "ats", "js", "p", "spec", "g", "c", "ts", "m", "ns", "details", "rs", "ses", "ins", "less", "sl", "h", "ms", "ls", "abs", "b", "sp", "f", "t", "ss", "S", "parts", "its", "strings", "e", "gs", "sq", "string", "sv", "csv", "ments", "xs", "sts", "l", "cs", "y", "os", "stats", "qs", "ds", "ps", "bs", "source"], "new_s": ["newplsat", "newpls", "newpti", "create_b", "new___b", "newplb", "newpts", "old_string", "new_i", "new_sat", "commonplb", "newptstring", "common_n", "new_b", "new___s", "old_i", "commonplsat", "old_str", "newptstr", "create_sb", "new_sb", "common_s", "create_s", "new___sb", "new_n", "commonpln", "new_string", "old_s", "new_str", "commonpls", "common_b", "newpln", "common_sat"], "i": ["mi", "xi", "x", "ogi", "ci", "gi", "cli", "point", "vi", "di", "ai", "I", "m", "batch", "bi", "my", "yi", "qi", "ic", "ix", "ip", "ind", "num", "ri", "multi", "io", "si", "li", "key", "ji", "v", "ori", "ii", "ti", "oi", "im", "it", "zi", "ini", "ui", "slice", "l", "pi", "phi", "id", "j", "index", "k", "ij", "iu"]}}
{"code": "n, k = map(int, input().split())\\na = list(map(int, input().split()))\\n\\na = [i-1 for i in a]\\n\\nd = [1]*n\\np = 0\\nb = []\\nwhile d[p]:\\n    b.append(p)\\n    d[p] = 0\\n    p = a[p]\\navant = b.index(p)\\nloop_count = len(b) - avant\\nc = b[avant:]\\n\\nif k <= avant:\\n    print(b[k]+1)\\nelse:\\n    k -= avant\\n    k %= loop_count\\n    print(c[k]+1)\\n", "target": "169", "substitutes": {"n": ["N", "x", "max", "nt", "name", "dn", "w", "sn", "r", "m", "z", "ns", "length", "nl", "h", "num", "t", "count", "nb", "mn", "na", "v", "an", "nc", "nm", "nan", "nu", "nn", "l", "np", "j", "nd"], "k": ["ck", "km", "ki", "ek", "kn", "x", "kr", "th", "kh", "kl", "ijk", "max", "g", "ak", "ke", "m", "z", "dk", "ks", "o", "kw", "ko", "kind", "mask", "f", "num", "tk", "t", "kj", "v", "ok", "kick", "it", "ikk", "ku", "kat", "q", "wk", "u", "kk", "id", "ka", "sk", "K", "ik", "j", "kan", "ack", "mk", "unk"], "a": ["x", "sta", "to", "ab", "g", "ai", "r", "w", "ma", "m", "set", "o", "ea", "f", "t", "alpha", "da", "na", "an", "e", "all", "ad", "A", "ap", "at", "sa", "s", "au", "oa", "div", "aa", "l", "am", "ar", "index", "y", "data", "area", "ba", "ca", "ac"], "i": ["\u00ed", "mi", "xi", "x", "ci", "di", "ai", "I", "m", "bi", "ic", "o", "ix", "ind", "t", "si", "ii", "li", "v", "int", "ti", "ini", "zi", "l", "pi", "phi", "id", "j", "index", "y", "ij", "ik"], "d": ["db", "di", "r", "w", "m", "bd", "z", "dt", "f", "df", "t", "dc", "da", "dump", "dr", "pd", "out", "de", "e", "ad", "at", "s", "debug", "needed", "new", "D", "l", "dd", "du", "did", "j", "dict", "ds", "defined"], "p": ["pkg", "x", "port", "point", "pc", "g", "jp", "r", "pre", "m", "fp", "pb", "o", "tp", "pa", "ip", "h", "pr", "f", "sp", "t", "part", "pt", "lp", "pid", "pos", "v", "P", "e", "ap", "at", "cp", "ping", "dp", "q", "pl", "pi", "bp", "np", "l", "u", "op", "y", "j", "pat", "pp", "ps", "prop", "pg"], "b": ["bis", "sb", "ab", "db", "g", "r", "bd", "bi", "wb", "pb", "fb", "rb", "bo", "by", "o", "h", "be", "ob", "bh", "f", "br", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "s", "eb", "bl", "cb", "l", "bp", "u", "j", "bs", "ba", "back"], "avant": ["wavancy", "averant", "variants", "avand", "averent", "avent", "averanted", "ravant", " avanted", "variante", "variant", "avants", "averante", "savanting", "savant", " avent", "aveancy", "avanand", "avancy", "wavant", "varianted", "aveant", " avante", "averancy", "averand", "avananted", "wavent", " avants", "avanted", " avand", "savanted", "avanting", "averants", "ravancy", "ravent", "aveent", " avancy", "avante", "avanant", "avanent", "aveanted", "avanancy", "avananting", "averanting", " avanting", "ravanted", "wavanted", "savants"], "loop_count": [" loop_db", "loopgcount", "oop_table", "looplistsize", "loop_size", "loop_Count", "loop_db", "loopprecount", "loop_cache", "oopgsize", "looppreCount", "loopprecache", "oop_size", "oopgCount", "loopgtable", "oop_Count", "looplisttable", "oopgtable", "oopgcount", "looppredb", "oop_count", "loopgCount", "looplistCount", "looplistcount", "loop_table", " loop_cache", "loopgsize", " loop_Count"], "c": ["lc", "ac", "cont", "unc", "g", "rc", "r", "tc", "m", "z", "fc", "ic", "o", "h", "f", "bc", "t", "dc", "e", "v", "nc", "csv", "cc", "abc", "co", "cb", "l", "u", "cs", "cm", "cr", "ca", "C", "sc"]}}
{"code": "x, y = map(int, input().split())\\nX, Y = 0, 0\\nl = [4, 6, 9, 11]\\nif x == 2:\\n  X = 3\\nelif x in l:\\n  X = 2\\nelse:\\n  X = 1\\nif y == 2:\\n  Y = 3\\nelif y in l:\\n  Y = 2\\nelse:\\n  Y = 1\\nif X == Y:\\n  print(\"Yes\")\\nelse:\\n  print(\"No\")", "target": "206", "substitutes": {"x": ["a", "n", "xi", "ex", "ty", "xe", "d", "p", "ux", "xc", "i", "rx", "w", "c", "ox", "m", "z", "el", "xt", "ix", "tx", "ax", "f", "xd", "t", "yl", "v", "e", "xy", "xs", "dx", "q", "xx", "lat", "yx", "px"], "y": ["sy", "n", "ty", "ys", "yd", "yer", "cy", "i", "yo", "ox", "m", "z", "ly", "ies", "my", "ny", "vy", "py", "ye", "yr", "ery", "b", "axy", "t", "yl", "uy", "v", "yn", "ey", "gy", "iy", "xy", "yt", "yy", "fy", "j", "ya", "ay", "ym"], "X": ["INT", "M", "N", "IX", "T", "CH", "TR", "TX", "Print", "IP", "Right", "AT", "I", "EX", "L", "One", "CE", "TY", "Only", "Field", "Content", "ox", "UX", "OX", "MX", "Fix", "Ex", "R", "HTML", "XXXX", "W", "ZX", "H", "XY", "V", "TH", "Width", "XP", "S", "DX", "ONE", "Q", "Tx", "P", "Fixed", "A", "E", "XX", "XT", "XXX", "TON", "XL", "K", "Time", "Z", "Xi"], "Y": ["M", "N", "YD", "CH", "T", "YE", "NS", "IP", "EY", "My", "Yes", "I", "Py", "L", "TY", "SO", "YES", "YS", "MY", "HY", "YC", "Year", "H", "XY", "O", "V", "Jay", "TH", "YA", "S", "B", "J", "Q", "G", "P", "A", "You", "YN", "E", "AY", "OT", "YY", "FY", "OK", "TO", "K", "SY", "Z", "NY", "BY", "C"], "l": ["lc", "n", "lu", "tl", "kl", "ln", "ld", "p", "lt", "g", "i", "L", "long", "r", "c", "m", "z", "dl", "limited", "el", "nl", "sl", "h", "val", "ls", "limit", "vl", "t", " L", "yl", "len", "hl", "rl", "lo", "fl", "li", "v", "list", "ch", "ell", "ol", "lock", "q", "ll", "le", "cl", "j", "lin"]}}
{"code": "N = int(input()) \\nS = input()\\n\\nif N%2 == 1:\\n    print(\"No\")\\nelse:\\n    print(\"Yes\") if S[:len(S)//2] == S[len(S)//2:] else print(\"No\")", "target": "532", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "NV", "NC", "GN", "Ns", "X", "I", "NA", "L", "NN", "NR", "NT", "H", "V", "NO", "NUM", "NE", "B", "J", "Q", "G", "P", "A", "D", "NB", "Y", "K", "F", "Z", "NG", "C"], "S": ["SN", "STR", "M", "NS", "T", "SF", "SH", "SS", "HS", "SL", "SB", "SER", "R", "I", "L", "RS", "SO", "Si", "JS", "SI", "CS", "CSS", "SM", "H", "O", "V", "SAM", "INS", "B", "J", "Q", "G", "P", "SE", "A", "E", "s", "SP", "SU", "ST", "D", "DS", "Y", "SA", "F", "String", "Z", "C"]}}
{"code": "# \u521d\u671f\u5165\u529b\\nimport sys\\n#input = sys.stdin.readline  #\u6587\u5b57\u5217\u3067\u306f\u4f7f\u308f\u306a\u3044\\ntstr =input().strip()\\nfrom datetime import datetime as dt\\n\\n#tstr = '2012-12-29 13:49:37'\\ntdatetime = dt.strptime(tstr, '%Y/%m/%d')\\nstandard =\"2019/4/30\"\\ndt_standard =dt.strptime(standard, '%Y/%m/%d')\\nif tdatetime <= dt_standard:\\n    print(\"Heisei\")\\nelse:\\n    print(\"TBD\")", "target": "545", "substitutes": {}}
{"code": "n = int(input())\\nw = list(map(int, input().split()))\\n\\nWl = [0]\\nfor i in range(n):\\n    Wl.append(Wl[i]+w[i])\\n\\na = 100000\\n\\nfor i in range(n+1):\\n    a = min(abs(-Wl[i] - Wl[i] + Wl[n]), a)\\n\\nprint(a)\\n\\n", "target": "8", "substitutes": {"n": ["nr", "N", "x", "net", "nt", "ni", "gn", "ln", "d", "p", "name", "ne", "g", "sn", "c", "m", "z", "ns", "o", "nl", "h", "num", "t", "nia", "len", "nb", "no", "mn", "na", "v", "an", "e", "nc", "nan", "nu", "nn", "l", "q", "np", "ll", "pi", "j", "y", "index"], "w": ["wx", "sw", "d", "p", "tw", "wh", "we", "wt", "wine", "c", "r", "m", "wb", "wr", "window", "rw", "wi", "W", "wd", "kw", "h", "wal", "ew", "word", "f", "b", "wl", "wid", "weights", "wa", "wp", "v", "width", "ws", "s", "nw", "q", "l", "aw", "words"], "Wl": ["Wb", "Wli", "Gl", "Whhl", "Willp", "Wel", " Wp", "Thl", "WAL", "Wg", "Wls", "Wilhl", "WAline", "Lg", " Wb", "WhL", "WL", "Mu", "Whl", " Wn", " Wg", "WAl", "Wlist", "Mli", "Whline", "Dp", "Will", "Nl", " Wla", "Dlist", "Wlp", "Lli", "Wal", "Whli", " Wli", "Nli", "Mc", "Ll", "Wline", " Wu", "Weli", "Welo", "Wc", "Gp", "Whlp", "Ln", "Nu", "Thlp", "Lla", "Dl", "Llist", "Wp", "Llo", "WaL", "Wu", "Wla", "Whlist", "Wn", " Wlist", "Whla", "Ml", "Thli", " Wc", "Whls", "Nc", "Glist", "Db", "Wen", "Willi", "Wals", "Whg", "Gb", "Waline", "Wlo", "WAls", " Wlo", "Thhl"], "i": ["mi", "ki", "xi", "x", "ia", "ci", "gi", "p", "di", "ai", "I", "m", "batch", "bi", "yi", "qi", "iti", "ic", "ski", "ix", "o", "ip", "ind", "ri", "t", "io", "si", "iu", "ii", "li", "ji", "ei", "v", "int", "ti", "ori", "e", "iy", "im", "it", "zi", "ini", "q", "phi", "pi", "l", "id", "j", "index", "y", "ij", "iri", "hi"], "a": ["next", "x", "ia", "sta", "to", "ac", "ab", "ta", "p", "g", "xa", "ai", "zero", "c", "ma", "m", "z", "total", "ga", "window", "o", "ea", "la", "aaa", "h", "result", "f", "b", "t", "count", "alpha", "da", "apa", "na", "an", "e", "v", "A", "at", "af", "sa", "ao", "sha", "new", "au", "aa", "l", "am", "u", "j", "y", "index", "area", "ba", "ca"]}}
{"code": "from bisect import bisect_left\\nfrom itertools import accumulate\\n\\nN,M = map(int,input().split())\\nA = sorted([int(i) for i in input().split()])\\n\\n# \u5224\u5b9a\\ndef is_under_M(x:int):\\n    cnt = 0\\n    for i in range(N):\\n        # \u5e78\u798f\u5ea6x\u4ee5\u4e0a\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\\n        pos = bisect_left(A, x - A[i])\\n        cnt += N - pos\\n    return cnt < M\\n\\n# \u4e8c\u5206\u63a2\u7d22\\nng, ok = 0, 2*(10**5)+1\\nwhile ok - ng > 1:\\n    mid = (ok + ng) // 2\\n    if is_under_M(mid):\\n        ok = mid\\n    else:\\n        ng = mid\\n# ng, ok = X-1, X\\n\\n# A\u306e\u7d2f\u7a4d\u548c\\nAacum = tuple(accumulate([0] + A))\\n\\nans = 0\\nfor i in range(N):\\n    # \u5e78\u798f\u5ea6ok\u4ee5\u4e0a\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\\n    pos = bisect_left(A, ok - A[i])\\n    cnt = N - pos\\n\\n    ans += cnt * A[i] + (Aacum[N] - Aacum[pos])\\n    M -= cnt\\n\\nans += M * ng\\n\\nprint(ans)", "target": "445", "substitutes": {"N": ["n", "NS", "T", "Ns", "R", "X", "I", "L", "NA", " n", "NN", "NR", "V", "S", "B", "J", "Q", "G", "P", "E", "D", "Y", "Ni", "K", "F", "Z", "C"], "M": ["T", "CM", "mu", "X", "R", "I", "L", "NM", "m", "MM", "O", "V", "MC", "S", "B", "J", "Q", "P", "E", "D", "Y", "U", "K", "LM", "Z", "C"], "A": ["a", "NS", "T", "An", "R", "I", "X", "L", "H", "W", "AA", "O", "V", "b", "S", "B", "J", "G", "P", "E", "D", "Y", "U", "K", "Z", "C"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "iter", "m", "bi", "iri", "ip", "ri", "si", "ii", "li", "ji", "v", "ei", "int", "ti", "oi", "s", "ini", "zi", "ui", "phi", "pi", "l", "u", "id", "j", "ij", "iu", "hi"]}}
{"code": "def actual(AtCoder, s, Contest):\\n    return f'A{s[0].upper()}C'\\n\\nAtCoder, s, Contest = input().split()\\nprint(actual(AtCoder, s, Contest))", "target": "324", "substitutes": {"AtCoder": [" AtUode", " AtTater", "AtSater", "AtMcoder", " AtUaser", "AtUode", "AtClaser", "AtMcode", " AtToder", "AtUaser", "AtCoater", "AtCver", " AtTver", "AtConoder", "AtCursor", "AtCaser", "AtUcode", "AtClursor", "AtClater", "AtTater", "AtTursor", "AtClode", "AtConode", " AtCode", "AtCcode", " AtCver", "AtClcode", "AtMcaser", "AtCloder", "AtConoding", "AtCoode", "AtCoding", "AtConater", "AtSver", " AtCoding", " AtCater", "AtTver", " AtUoder", "AtCater", "AtCooder", "AtToder", "AtUoder", " AtCursor", " AtUcode", "AtCode", " AtCcode", "AtCooding", " AtCaser", "AtSursor", "AtClver", "AtMccode", "AtSoder", " AtTursor"], "s": ["n", "sb", "aws", "str", "ats", "space", "spec", "g", "i", "r", "c", "ts", "m", "set", "ns", "rs", "input", "ses", "ins", "sl", "h", "ls", "abs", "t", "S", "ss", "strings", "v", "gs", "sq", "ws", "st", "sv", "sts", "l", "sample", "j", "os", "qs", "ds", "ps", "bs"], "Contest": ["contester", "contested", "Cester", "Condest", " ContEST", "CondEST", "Condests", "Cear", "contests", "Attester", "contear", "Cest", "Contested", " Contear", "Attested", "Condested", "contest", "Cested", "Contester", " Contester", "Attest", "ContEST", "Condester", " Contested", "Contear", "contEST", "Attests", "Contests"]}}
{"code": "# https://atcoder.jp/contests/tenka1-2017/tasks/tenka1_2017_c\\ndef main():\\n    N = int(input())\\n\\n    for h in range(1, 3500 + 1):\\n        for n in range(1, 3500 + 1):\\n            if (4 * h * n - N * n - N * h != 0) and (N * h * n) % (4 * h * n - N * n - N * h) == 0:\\n                w = (N * h * n) // (4 * h * n - N * n - N * h)\\n                if w > 0:\\n                    print(h, n, w)\\n                    return\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "29", "substitutes": {}}
{"code": "N, L = map(int, input().split())\\ntext_list = [input() for _ in range(N)]\\n\\nsorted_list = sorted(text_list)\\n\\nprint(''.join(sorted_list))", "target": "732", "substitutes": {"N": ["SN", "M", "n", "NS", "T", "NL", "NC", "GN", "NI", "R", "X", "I", "NA", "NM", "NN", "NR", "NT", "H", "W", "V", "S", "B", "J", "Q", "G", "ND", "P", "Num", "E", "D", "NB", "Y", "MN", "Len", "Ni", "K", "F", "Z", "C"], "L": ["M", "NL", "DL", "T", "mL", "R", "I", "X", "H", "W", "O", "V", "S", "B", "G", "P", "E", "D", "l", "CL", "LE", "U", "LM", "F", "Z", "LP", "C"], "text_list": ["textellist", "texteldict", "textablelist", "textablecollection", "selected_dict", "texturelist", "textedsource", "text_dict", "stringlleft", "textelcollection", "text_source", "text_group", "stringllist", "textedlist", "selectedabledict", "texturevector", "textllist", "selectedablevector", "textlsource", "selected_collection", "text_collection", "string_left", "textlleft", "string_group", "string_list", "textabledict", "stringlsource", "selectedablecollection", "selected_vector", "textablevector", "texturedict", "textedleft", "text_vector", "stringlgroup", "textedgroup", "textelvector", "string_source", "text_left", "selectedablelist", "selected_list", "textlgroup", "texturecollection"], "_": ["ex", " e", "d", "ix", " g", " long", "val", " l", " __", " each", "l", " p", " un"], "sorted_list": ["sacked___sequence", "sested_list", "sacked_sequence", "sorted___LIST", "sested_li", "sorted_LIST", "sorted_li", "sacked___text", "sested_LIST", "sorted___text", "sorted_text", "sacked___LIST", "sorted___sequence", "sorted_set", "sorted___list", "sorted_sequence", "sacked_LIST", "sested_set", "sacked___list", "sacked_list", "sacked_text"]}}
{"code": "import math\\n\\nn,h = map(int,input().split())\\ns = []\\nmax_a = 0\\nfor i in range(n):\\n    a,b = map(int,input().split())\\n    max_a = max(a,max_a)\\n    s.append((b,a))\\n\\nif max_a >= h:\\n    print(1)\\n    exit()\\n\\ns.sort(reverse=True)\\nans = 10**9\\ni = 0\\nwhile h > 0 and i < n:\\n    h -= s[i][0]\\n    c = max(0,math.ceil(h/max_a))\\n    ans = min(i+c+1,ans)\\n    i += 1\\n\\nprint(ans)", "target": "205", "substitutes": {"n": ["N", "x", "nt", "gn", "ln", "p", "on", "ne", "cn", "g", "sn", "r", "w", "m", "ns", "o", "nl", " ng", "num", " gn", "nia", "t", "len", "nb", "mn", "na", "an", "v", "yn", "nc", "he", "nu", "nn", "ll", "l", "np", "q", " N", "j", "y", "k"], "h": ["history", "han", "ht", "sh", "max", "kh", "p", "head", "g", "hang", "hz", "hal", "r", "hs", "w", "m", "ih", "rh", "o", "H", "ah", "host", "bh", "f", "uh", "hl", "hp", "t", "v", "e", "oh", "has", "his", "hash", "ha", "ch", "it", "he", "high", "hd", "q", "ho", "l", "hh", "j", "y", "hi", "hm"], "s": ["bis", "sb", "seconds", "ogs", "services", "ats", "js", "p", "eds", "r", "hs", "ts", "ns", "rs", "files", "ses", "tests", "ins", "ords", "ms", "ers", "ls", "t", "ss", "S", "parts", "its", "v", "gs", "ws", "gets", "ims", "sv", "xs", "aunts", "sts", "vs", "cs", "es", "os", "thens", "qs", "stats", "ds", "ps", "bs"], "max_a": ["max2a", "max2ae", "max2e", "maxplA", " max_an", "maxmaxA", "ax_alpha", "max_ae", "Max2e", "Max2a", "maxmaxo", "Max2A", "maxmaxb", "maxplb", "Max2b", "max_o", "max_p", " max_A", "Max_b", "max_A", "max_alpha", " max_b", "max_b", "ax_a", "max_i", "maxpli", "max2A", "Max_a", "ax_b", "max_e", " max_i", "max2b", "maxmaxa", "ax_ae", " max_o", " max_p", "Max_A", "max_an", "maxpla", "Max_e", "max2alpha"], "i": ["mi", "ki", "xi", "x", "ci", "gi", "p", "g", "di", "ai", "I", "r", "m", "z", "yi", "qi", "info", "ic", "ix", "o", "ip", "ind", "f", "t", "ri", "si", "li", "ii", "ei", "e", "int", "ti", "oi", "it", "zi", "ui", "ini", "q", "l", "pi", "u", "id", "k", "j", "y", "index", "ij", "iu", "hi"], "a": ["ia", "to", "ae", "ac", "ab", "aff", "g", "ai", "ak", "r", "ma", "el", "ga", "ea", "la", "aaa", "be", "f", "t", "alpha", "an", "v", "e", "A", "al", "at", "sa", "ed", "au", "aa", "l", "am", "ar", "le", "u", "area", "ba", "ca"], "b": ["bis", "bu", "sb", "ab", "db", "g", "ib", "bg", "bi", "ble", "fb", "rb", "bo", "by", "mb", "be", "br", "bc", "gb", "nb", "B", "bb", "v", "eb", "base", "cb", "bin", "j", "y", "bs", "ba"], "ans": ["x", "ANS", "ants", "ats", "ians", "gn", " means", "cn", "ai", "aus", "ros", "us", "sn", "aned", " Ans", "ates", "ns", "ann", "rs", "anas", "ks", "offs", "ins", "nl", "ons", "ms", "angs", "amps", "ls", "mean", "pan", "ents", "ens", "ations", "ps", "weights", "uns", "na", "an", "can", "iann", "aps", "anes", "nan", "xs", "ands", "aos", "ams", "vs", "ads", "cs", "arts", "os", "es", "lan", "AN", "ones"], "c": ["ec", "ce", "lc", "con", "ci", "d", "unc", "cd", "cn", "ct", "rc", "m", "count", "mc", "dc", "uc", "conf", "cin", "cos", "cp", "cc", "com", "co", "cu", "cb", "l", "cs", "cm", "cr", "cf", "ca", "C", "ac"]}}
{"code": "N = int(input())\\n\\nans = 0\\ntmp = -10\\nfor i in range(N):\\n    a = int(input())\\n    if tmp == i-1 and a > 0:\\n        ans += 1\\n        a -= 1\\n    ans += a//2\\n    if a%2 == 1:\\n        tmp = i\\nprint(ans)", "target": "455", "substitutes": {"N": ["CNN", "n", "M", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "L", "NM", "NN", "NP", "NR", "CN", "NT", "V", "No", "Z", "NUM", "S", "B", "J", "Q", "Num", "P", "A", "Sn", "D", "NB", "Len", "Ni", "K", "F", "TN", "C"], "ans": ["ANS", "ants", "ats", "ians", "beans", "images", "names", " means", "ames", "aus", "lines", "aned", " Ans", "ns", "ann", "ums", "rs", "eas", "anas", "reads", "ks", "ins", "rans", "ons", "ms", "amps", "mean", "ls", "pan", "ids", "ents", "ens", "news", "uns", "an", "anks", "aces", "aps", "oss", "terms", "s", "xs", "ams", "ands", "aos", "ads", "os", "es", "ds", "ones"], "tmp": ["T", "perm", "nt", "to", "sum", "p", "EMP", "mp", "po", "test", "this", "m", "mut", "mb", "ob", "b", "sp", "num", "t", "auto", "alpha", "nb", "no", "ot", "pos", "out", "v", "bt", "int", "cache", "Temp", "emp", "MP", "at", "obj", "tt", "st", "adj", "co", "new", "size", "np", "timeout", "etc", "j", "vt", "temp", "start"], "i": ["mi", "n", "xi", "x", "ia", "ci", "gi", "p", "di", "ai", "I", "iter", "c", "m", "z", "bi", "ic", "o", "f", "b", "t", "multi", "alpha", "si", "io", "ii", "li", "v", "int", "ti", "im", "s", "it", "zi", "ini", "pi", "u", "k", "y", "index", "j", "ij", "iu", "hi", "init"], "a": ["n", "x", "ia", "sta", "ae", "ac", "ab", "p", "xa", "ai", "c", "ma", "eas", "o", "ea", "pa", "la", "abs", "b", "f", "t", "alpha", "si", "apa", "na", "an", "v", "e", "A", "at", "sa", "ao", "sha", "au", "oa", "aos", "aa", "am", "j", "index", "data", "area"]}}
{"code": "def main():\\n    H, W, M = [int(s) for s in input().split()]\\n    cols = [0] * W\\n    rows = [0] * H\\n    bombs = set()\\n    for _ in range(M):\\n        x, y = [int(s)-1 for s in input().split()]\\n        bombs.add((x, y))\\n        cols[y] += 1\\n        rows[x] += 1\\n\\n    sc = sorted([(c, i) for i, c in enumerate(cols)], reverse=True)\\n    sr = sorted([(c, i) for i, c in enumerate(rows)], reverse=True)\\n    best = 0\\n    for v1, c in sc:\\n        for v2, r in sr:\\n            if v1 + v2 <= best:\\n                break\\n            score = v1 + v2\\n            if (r, c) in bombs:\\n                score -= 1\\n            best = max(best, score)\\n    print(best)\\n\\nmain()", "target": "694", "substitutes": {"H": ["N", "T", "SH", "His", "HS", "HE", "R", "RH", "X", "HO", "HI", "WH", "NH", "h", "V", "TH", "HH", "S", "B", "J", "Q", "G", "HA", "P", "OH", "Host", "HC", "MH", "Y", "HB", "K", "F", "HT", "He"], "W": ["WT", "WC", "N", "T", "WR", "MW", "WP", "X", "R", "L", "w", "VW", "WH", "BW", "WA", "V", "Width", "S", "SW", "Wh", "J", "WB", "G", "P", "A", "WD", "D", "Y", "WE", "EW", "K", "F", "WS", "C"], "M": ["N", "T", "CM", "R", "I", "X", "L", "NM", "RM", "m", "SM", "MM", "V", "MC", "S", "MAN", "B", "J", "Q", "G", "P", "E", "MS", "D", "DM", "TM", "Y", "MT", "U", "K", "F", "LM", "C"], "s": ["a", "n", "sb", "ys", "opens", "ports", "d", "p", "get", "g", "w", "hs", "ts", "m", "z", "ns", "ies", "rs", "input", "ks", "ses", "ins", "ess", "downs", "h", "ms", "ls", "gins", "b", "t", "ss", "S", "plays", "ces", "results", "v", "e", "gs", "sin", "has", "ges", "gets", "ws", "xs", "sv", "ments", "mys", "q", "l", "cs", "se", "es", "changes", "ass", "ds", "ps", "os"], "cols": ["columns", "colins", "sects", "clms", " colls", "colols", "Colers", "clxs", " colers", "columnls", "clls", "colms", " colms", "columnrs", "clins", "clols", "Cols", "sectxs", "columnms", "columnxs", "columnols", "Colxs", "columners", "columnins", "cls", " colgs", "sectols", "colers", "Colgs", "columngs", "colrs", " colins", "colxs", "clrs", "colls", " colxs", "sectrs", "colgs"], "rows": ["keys", "ys", "ports", "sur", "images", "months", "cells", "workers", "ows", "ews", "ros", "orts", "items", "uds", "resources", "reports", "rs", "files", "blocks", "obs", "runs", "ins", "rices", "values", "ms", "rys", "relations", "ls", "rooms", "ris", "orders", "dates", "OWS", "results", "frames", "members", "row", "tracks", "flows", "ws", "xs", "heads", "rown", "ours", "builders", "cs", "groups", "errors", "bs", "pages", "views", "users"], "bombs": [" bambers", "wbumbs", "bambers", "wbogens", "bomb", " bomb", "wbombies", "bombies", "bbordes", "rbambers", " bordes", "bumbs", "Bumbs", "rbogens", "Bombies", "wbombs", "Bogens", " boss", "wbordes", "boss", "Bambers", "bboss", "bbombs", " bogens", "wbomb", "bbogens", "bogens", "bordes", " bombies", "Bombs", "wboss", "Bomb", " bumbs", "rbombies", "rbombs"], "_": [" j", "m", "ix", " l", " m", " __"], "x": ["wx", "n", "xi", "ex", "p", "ux", "xc", "left", "X", "xa", "rx", "w", "ox", "m", "z", "xxxx", "xt", "ix", "o", "col", "tx", "ax", "xd", "v", "e", "int", "fx", "row", "xy", "xs", "dx", "l", "xx", "yx", "lex", "px", "j", "xp", "xf"], "y": ["sy", "ty", "ys", "yer", "cy", "oy", "m", "ly", "ies", "my", "ny", "yi", "vy", "ye", "py", "col", "yr", "hy", "b", "t", "yl", "uy", "v", "yn", "ey", "gy", "iy", "xy", "yt", "Y", "yy", "fy", "j", "ya", "ay", "ym"], "sc": ["ec", "scl", "lc", "ser", "ci", "gc", "ct", "rc", "tc", "sys", "set", "rs", "sec", "esc", "enc", "sp", "sch", "css", "ss", "anc", "osc", "uc", "SC", "isc", "usc", "sq", "nc", "roc", "ch", "sv", "cc", "Sc", "cs", "cr"], "c": ["a", "lc", "n", "con", "cat", "ci", "gc", "cont", "p", "d", "unc", "pc", "g", "xc", "ct", "rc", "w", "tc", "m", "z", "cor", "ic", "o", "col", "h", "cur", "rec", "cv", "f", "b", "bc", "t", "vc", "mc", "v", "e", "cin", "ch", "cp", "cc", "com", "co", "cu", "l", "cl", "u", "cs", "k", "cm", "cr", "cf", "ca", "C"], "i": ["mi", "ki", "xi", "uri", "ci", "gi", "cli", "di", "ai", "I", "bi", "ic", "ix", "ip", "ri", "io", "si", "iu", "ii", "li", "ji", "ei", "v", "int", "ti", "oi", "adi", "it", "zi", "ui", "ini", "pi", "ati", "ij", "iri"], "sr": ["mr", "sb", "ser", "rr", "rg", "sur", "ir", "gc", "rc", "sf", "rx", "rh", "rs", "rb", "rm", "sl", "spr", "yr", "vr", "rar", "ctr", "ss", "rl", "dr", "sq", "sm", "gr", "tr", "sv", "ssl", "rt", "lr", "hr", "usr", "ar", "rn", "SR", "cr", "rd"], "best": ["top", "fine", "master", "max", "poor", "goal", "staking", "better", "broad", "latest", "test", "short", "long", "bot", "largest", "winner", "worst", "only", "round", "min", "Best", "gp", "success", "result", "core", "right", "b", "bottom", "stable", "hess", "just", "valid", " Best", "perfect", "v", "all", "most", "rank", "final", "pop", "adjusted", "highest", "est", "end", "rest", "profit", "high", "ranking", "opt", "good", "peak", "index", "trial", "cost", "pro", "last", "fit", "start"], "v1": ["sv2", " vOne", "k2", " v001", "k4", "V1", "f1", "vOne", "sv5", " v4", "v5", "f3", "v4", "V2", "c2", "k3", "version1", "c1", "version2", "VOne", "svOne", "f2", "v3", "c4", "sv1", " v5", "version3", "c3", "V5", " v3", "f001", "k1", "version001", "v001"], "v2": [" v0", "k2", "f4", "V1", "f1", "k5", "v5", " v4", "f3", "v4", "V2", "V3", "V4", "k0", "f2", "V0", "v3", "f0", " v5", "V5", " v3", "k1", "v0"], "r": ["mr", "rr", "ro", "rg", "ir", "d", "p", "R", "rc", "rx", "re", "w", "m", "rs", "rb", "rm", "res", "rer", "h", "pr", "vr", "rar", "b", "rl", "dr", "v", "ru", "rt", "q", "l", "ar", "j", "er", "cr", "rd"], "score": ["fine", "bad", "vote", "err", "Score", "goal", "sum", "gc", "better", "match", "beta", "order", "ian", "test", "value", "scale", "weight", "report", "worst", "status", "rate", "note", "change", "success", "min", "result", "core", "mean", "sch", "ss", "grade", "check", " Score", "rank", "est", "node", "average", "sol", "scoring", "size", "sd", "error", "good", "strength", "cost", "loss", "fit"]}}
{"code": "'''\\nCreated on 2020/08/20\\n\\n@author: harurun\\n'''\\ndef main():\\n  import re\\n  import sys\\n  pin=sys.stdin.readline\\n  pout=sys.stdout.write\\n  perr=sys.stderr.write\\n\\n  S=pin()[:-1]\\n  if re.fullmatch(r\"(hi)+\",S)==None:\\n    print(\"No\")\\n    return \\n  print(\"Yes\")\\n  return \\n\\nmain()", "target": "535", "substitutes": {"pin": ["con", "n", "conn", "serv", "ln", "port", "p", "por", "write", "cn", "connect", "re", "pen", "fp", "read", "din", "param", "tun", "scan", "pa", "pan", "gin", "fn", "pas", "pid", "li", "out", "int", "sin", "cin", "inter", "inn", "print", "spin", "lock", "Pin", "pic", "pipe", "bin", "pi", "PIN", "line", "link", "mem", "pins"], "pout": [" ppout", "spin", "spint", " ppin", " ppint", "pint", "spout", " pint"], "perr": [" curr", "derrr", "perror", " curror", "derr", "dert", "pert", "derror", " currr", " curt", "perrr", " perrr", " pert", " perror"], "S": ["SN", "M", "N", "T", "SS", "SB", "R", "I", "X", "L", "PS", "Si", "SI", "W", "O", "V", "ss", "B", "J", "Q", "G", "P", "SE", "A", "E", "s", "ST", "D", "Y", "SA", "SR", "F", "Z", "C", " s"]}}
{"code": "n, m = list(map(int, input().split()))\\nxy = [list(map(int, input().split())) for i in range(m)]\\n\\nans = [1] * (n)\\nans[0] = 1\\nball = [0] * (n)\\nball[0] = 1\\nfor i in range(m):\\n    x, y = xy[i]\\n    ans[y-1] += 1\\n    ans[x-1] -= 1\\n    if ball[x-1]:\\n      ball[y-1] = 1\\n    if ans[x-1] == 0:\\n      ball[x-1] = 0\\n      \\nprint(sum(ball))", "target": "311", "substitutes": {"n": ["a", "N", "M", "nt", "d", "p", "g", "r", "w", "c", "ns", "o", "h", "ms", "b", "num", "t", "nb", "mn", "na", "v", "nc", "nm", "s", "nu", "nn", "l", "k", "j"], "m": ["mi", "M", "mr", "mod", "dm", "d", "p", "mm", "mo", "g", "r", "c", "ma", "man", "o", "gm", "h", "ms", "b", "mis", "num", "t", "mc", "mn", "v", "e", "nm", "s", "q", "l", "k", "j", "cm", "mt"], "xy": ["wx", "roxy", "ne", "xc", "wy", "wed", "yz", "ox", "vals", "oxy", "cho", "ied", "xxx", "py", "XY", "oe", "dy", "gb", "io", "nb", "fo", "pos", "gy", "qq", "mop", "eps", "xs", "mx", "fy", "xx", "yy", "np", "yx", "px", "coord", "zip", "ay", "bits"], "i": ["mi", "ki", "xi", "ci", "gi", "p", "di", "ai", "I", "r", "bi", "yi", "ic", "o", "ix", "ip", "ind", "si", "li", "ii", "ji", "v", "ei", "ti", "iy", "im", "it", "zi", "ini", "l", "pi", "u", "id", "j", "k", "ij", "index", "iu", "hi"], "ans": ["ars", "con", "ANS", "sum", "ants", "ats", "ians", "alis", "actions", "en", "names", " means", "outs", "ai", "aus", "us", "ts", "ns", "ann", "rans", "ums", "mas", "anas", "ins", "ons", "ms", "acts", "amps", "ls", "pan", "ids", "ents", "ens", "ations", "cons", "als", "uns", "can", "an", "oss", "s", "xs", "ams", "vs", "cs", "os", "es", "AN", "ones"], "ball": ["body", "broad", "car", "z", "mass", "buffer", "foot", "gl", "batch", "bo", "ob", "v", "fan", "star", "cos", "tar", "co", "pl", "roll", "ag", "rot", "gate", "point", "on", "g", "bat", "wall", "ble", "balls", "lay", "spring", "pos", "none", "l", "mon", "play", "ray", "ay", "roller", "bomb", "oon", "bon", "cell", "tail", "pool", "card", "all", "al", "Ball", "ol", "other", "board", "slice", "ll", "bang", "alt", "arg", "game", "player", "angle", "bare", "go", "level", "b", "t", "bit", "out", "ail", "null", "nel", "bl", "le", "bin", "cel", "square", "sum"], "x": ["a", "wx", "xi", "ex", "any", "point", "p", "en", "on", "column", "name", "day", "left", "X", "rx", "ext", "w", "c", "ox", "z", "batch", "crop", "change", "ix", "o", "tx", "pan", "ax", "f", "t", "time", "bit", "key", "v", "e", "att", "fill", "exp", "width", "red", "at", "location", "xs", "date", "dx", "l", "xx", "lat", "yx", "fixed", "j", "px", "xp"], "y": ["sy", "ty", "ys", "p", "cy", "yo", "z", "ies", "ny", "yi", "vy", "by", "o", "py", "ye", "h", "yr", "hy", "b", "dy", "axy", "t", "yl", "key", "v", "yn", "ey", "gy", "height", "iy", "ch", "yt", "Y", "yy", "l", "lat", "year", "j", "ay", "ym"]}}
{"code": "S=input()\\nweek= ['SUN','MON','TUE','WED','THU','FRI','SAT']\\nans=7-week.index(S)\\nprint(ans)", "target": "471", "substitutes": {"S": ["SN", "M", "N", "T", "SH", "SS", "SB", "R", "I", "X", "L", "Si", "SI", "What", "SAN", "OS", "W", "H", "V", "B", "J", "G", "P", "A", "E", "s", "Is", "SU", "D", "Y", "SA", "U", "K", "F", "Z", "C"], "week": ["channel", "quarter", "sw", "sun", "state", "day", " Week", "we", "w", "wed", "diff", "unit", "status", "wall", "W", "word", "time", "news", "ss", "part", "Week", "season", "key", "EEK", "row", "un", "event", "ww", "date", "work", " weekday", "char", "hour", "year", "range", "month", "weekly", "field"], "ans": ["ars", "ANS", "ants", "ats", "ean", "ano", "ai", "aus", "oman", "us", "iban", "san", "aned", " Ans", "ns", "anus", "ann", "rans", "anas", "ks", "wan", "ons", "ms", "amps", "ls", "ens", "an", "iann", "anes", "oss", "idents", "nan", "ions", "nas", "ran", "aos", "ams", "ads", "lan", "AN", "ds"]}}
{"code": "N, M, K = map(int, input().split())\\nfriend = {}\\nfor i in range(M):\\n    A, B = map(lambda x: x-1, map(int, input().split()))\\n    if A not in friend:\\n        friend[A] = []\\n    if B not in friend:\\n        friend[B] = []\\n    friend[A].append(B)\\n    friend[B].append(A)\\n\\nblock = {}\\nfor i in range(K):\\n    C, D = map(lambda x: x-1, map(int, input().split()))\\n    if C not in block:\\n        block[C] = []\\n    if D not in block:\\n        block[D] = []\\n    block[C].append(D)\\n    block[D].append(C)\\n\\nfirst = {}\\nfor i in range(N):\\n    if i not in first:\\n        first[i] = i\\n        if i in friend:\\n            queue = []\\n            queue.extend(friend[i])\\n            counter = 0\\n            while counter < len(queue):\\n                item = queue[counter]\\n                first[item] = i\\n                if item in friend:\\n                    for n in friend[item]:\\n                        if n not in first:\\n                            queue.append(n)\\n                counter += 1\\n\\nsize = {}\\nfor key in first:\\n    if first[key] not in size:\\n        size[first[key]] = 1\\n    else:\\n        size[first[key]] += 1\\n\\nfor i in range(N):\\n    if i not in friend:\\n        print(0)\\n        continue\\n    no_friend = 0\\n    if i in block:\\n        for b in block[i]:\\n            if first[b] == first[i]:\\n                no_friend += 1\\n    print(size[first[i]] - len(friend[i]) - no_friend - 1)", "target": "368", "substitutes": {"N": ["NS", "T", "NC", "GN", "R", "I", "X", "L", "NM", "NN", "NR", "NT", "H", "O", "V", "No", "S", "J", "Q", "G", "P", "E", "NB", "Y", "Ni", "U", "F", "AN", "Z"], "M": ["T", "CM", "R", "I", "JM", "L", "NM", "RM", "m", "Mi", "H", "MM", "MC", "V", "S", "MAN", "J", "Q", "G", "P", "MP", "MS", "DM", "AM", "Y", "MN", "MR", "MT", "LM", "Man"], "K": ["CH", "T", "KN", "KR", "R", "X", "I", "L", "KK", "H", "V", "TH", "KS", "KC", "PK", "S", "J", "Q", "SK", "G", "P", "Y", "UK", "MN", "k", "F", "Z", "KE", "KA", "KING"], "friend": [" Friend", "child", "trip", "server", "bot", "buffer", "dev", "supp", "bug", "username", "close", "bor", "grid", "star", "tower", "char", "reply", "girlfriend", "mem", "link", "week", "request", "dirty", "friends", "ward", "shield", "match", "short", "weight", "weak", "prefix", " friendship", "case", "time", "just", "ff", "fw", "guard", "gold", "lock", "behind", "riend", "proof", "user", "field", "client", "browser", " friends", "library", "control", "query", "ship", "justice", "result", "friendly", "follow", "search", "egg", "req", "hello", "callback", "good", "index", "sync", "back", "reverse", "stat", "clock", "rc", "bull", "success", "core", "word", "Friend", "news", "bit", "support", "work", "Friends", "brother", "rage"], "i": ["a", "ki", "x", "p", "r", "c", "ix", "ind", "ri", "v", "e", "ti", "oi", "it", "ini", "phi", "id", "ili", "ia", "ni", "on", "ian", "ib", "ai", "I", "m", "iti", "ic", "o", "si", "iu", "ei", "im", "zi", "l", "u", "ij", "ci", "gi", "ir", "d", "note", "ip", "io", "ii", "ani", "ui", "pi", "il", "index", "fi", "ik", "mi", "xi", "ie", "di", "bi", "yi", "f", "t", "li", "int", "iy", "ati", "j", "y", "iri", "hi"], "A": ["a", "T", "Ax", "Al", "An", "Am", "IA", "Ar", "AU", "AT", "R", "I", "X", "L", "AD", "AL", "AV", "Av", "AB", "App", "AX", "H", "AA", "LA", "As", "V", "AI", "AR", "AS", "S", "Bar", "J", "G", "P", "AP", "CA", "At", "E", "AF", "AM", "Ac", "SA", "AC", "ACT", "AN", "BA", "Ag", "The"], "B": ["BI", "T", "RB", "BL", "VB", "BS", "OB", "Bs", "SB", "R", "I", "L", "Two", "IB", "Block", "AB", "Reb", "BG", "Be", "BER", "H", "O", "V", "BT", "AR", "Bar", "BC", "BE", "S", "J", "BU", "BR", "G", "WB", "GB", "P", "BB", "Ber", "USB", "Bern", "FB", "TB", "NB", "BO", "Y", "BF", "Bi", "DB", "Bill", "BA", "F"], "block": ["x", "prev", "p", "manager", "child", "image", "c", "buffer", "window", "config", "piece", "part", "check", "byte", "end", "number", "book", "mem", "timeout", "link", "week", "root", "open", "file", "pen", "unit", "wall", "prefix", "parent", "tx", "case", "share", "bus", "switch", "group", "lock", "line", "user", "join", "stop", "chain", "client", "cycle", "inv", "ref", "control", "blocks", "blocking", "box", "ip", "buf", "off", "cache", "board", "pack", "sync", "frame", "view", "Block", "map", "type", "by", "bit", "out", "list", "row", "work", "node", "bl", "base", "brother", "side"], "C": ["CB", "T", "CM", "Cr", "JC", "CG", "R", "I", "L", "CU", "c", "Block", "CS", "CN", "Con", "Cs", "H", "O", "V", "CT", "Ch", "CP", "S", "CD", "BC", "Co", "J", "Q", "G", "SC", "DC", "P", "CR", "CA", "E", "CON", "CC", "Y", "CL", "U", "F", "CF"], "D": ["DL", "T", "Def", "Det", "DOM", "SD", "d", "TD", "DO", "DIR", "R", "DE", "I", "L", "Block", "DR", "DI", "DH", "O", "V", "MD", "S", "Do", "CD", "DX", "DA", "DP", "Q", "J", "G", "Diamond", "DD", "DC", "P", "Dir", "Part", "E", "Ds", "DS", "DM", "Y", "PD", "DF", "DB", "The", "F", "Dialog"], "first": ["top", "prev", "p", "flight", "child", "default", "username", "num", "count", "part", "found", "new", "First", "then", "same", "root", "last", "init", "open", "before", "self", "head", "latest", "test", "short", "pre", "weight", "full", "prefix", "case", "time", "just", "filter", "group", "user", "basic", "single", "start", "use", "next", "client", "master", "summary", "account", "fresh", "active", "only", "second", "host", "result", "right", "friendly", "initial", "front", "all", "small", "fast", "primary", "index", "sort", "back", "path", "stat", "frame", "name", "zero", "current", "focus", "success", "face", "quick", "f", "valid", "list", "final", "row", "st", "base", "one", "sum"], "queue": ["history", "next", "background", "qv", "channel", "pair", "ued", "order", "ue", "cycle", "tube", "test", "Queue", "store", "journal", "job", "lock", "batch", "buffer", "ice", "box", "message", "priority", "display", "buf", "config", "poll", "menu", "force", "Q", "bench", "follow", "grid", "filter", "list", "all", "register", "worker", "event", "collection", "reply", "dq", "q", "que", "quote", "bl", "line", "pipe", "seq", "sequence", "rage"], "counter": ["nr", "pointer", "mr", "ter", "x", "loader", "instance", "currency", "gc", "action", "loop", "order", "cycle", "ounter", "clock", "code", "this", "zero", "r", "c", "current", "created", "buffer", "condition", "total", "Counter", "oder", "outer", "second", "cause", "case", "result", "container", "capacity", "ctr", "count", "time", "inner", "check", "card", "nc", "ier", "controller", "phrase", "number", "book", "index", "er", "timer", "sequence", "ry", "walker"], "item": ["next", "a", "mi", "x", "ex", "instance", "ite", "d", "p", "name", "mem", "di", "this", "I", "iter", "r", "object", "ox", "m", "bi", "unit", "ita", "note", "slot", "ix", "o", "ip", "num", "t", "nb", "inner", "bit", "li", "e", "int", "ti", "ap", "obj", "it", "node", "new", "other", "q", "element", "number", "_", "id", "np", "j", "index", "Item", "y", "member", "ij", "entry", "er"], "n": ["a", "next", "x", "nt", "ni", "gn", "d", "p", "on", "name", "ne", "g", "ai", "r", "c", "m", "z", "ns", "note", "ic", "o", "h", "ner", "f", "num", "t", "nor", "mn", "ot", "li", "an", "yn", "e", "v", "un", "s", "node", "new", "bl", "q", "l", "number", "u", "k", "y", "j", "er", "nd"], "size": ["ize", "settings", "max", "summary", "sum", "space", "mini", "score", "zero", "city", "length", "weight", "scale", "z", "set", "buffer", "unit", "shape", "box", "second", "speed", "send", "sized", "negative", "capacity", "SIZE", "sex", "grow", "empty", "count", "time", "news", "len", "amount", "style", "screen", "small", "cache", "height", "string", "width", "large", "group", "see", "lock", "dim", "number", "Size", "mem", "sd", "error", "user", "index", "data", "member", "sync", "last", "storage"], "key": ["keys", "sym", "Key", "pair", "ie", "bar", "name", "KEY", "code", "value", "entry", "iter", "ox", "m", "type", "prefix", "slot", "ice", "ix", "te", "ip", "case", "tag", "num", "pri", "time", "v", "exp", "ey", "row", "obj", "owner", "it", "node", "char", "number", "q", "id", "j", "index", "y", "k", "member", "root", "chain"], "no_friend": [" no_link", " no_rage", "noOtherfriend", "noOtherfriends", "no_good", "no_rage", "no__good", "no__friends", "no_ship", " no_good", " no_friends", "no_link", "no_dragon", " no_ship", " no_dragon", "no__friend", "no_friends", "noOthergood"], "b": ["ab", "p", "db", "ach", "name", "g", "ib", "r", "c", "m", "bi", "wb", "buffer", "rb", "bm", "h", "be", "ob", "bc", "nb", "bid", "bb", "v", "bt", "e", "obj", "eb", "bl", "cb", "base", "bp", "bin", "j", "bs", "ba", "back"]}}
{"code": "N = int(input())\\nans = 0\\nA = list(map(int, input().split()))\\nfor a in A[::2]:\\n    if a%2 != 0:\\n        ans += 1\\n        \\nprint(ans)", "target": "126", "substitutes": {"N": ["M", "n", "NS", "T", "Ns", "X", "I", "R", "NA", "L", "NN", "NR", "O", "V", "S", "B", "J", "Q", "G", "P", "E", "D", "Y", "Ni", "K", "F", "Z", "C"], "ans": ["ANS", "ants", "ats", "beans", "anon", " means", "outs", "ows", "urs", "irms", "ros", "aus", "asks", "aned", " Ans", "ns", "ann", "ums", "rs", "mas", "anas", "rans", "ks", "ins", "offs", "ons", "ms", "amps", "ls", "pan", "ids", "ents", "ens", "uns", "an", "anks", "iann", "oss", "aps", "anes", "terms", "s", "ran", "ams", "nas", "arts", "es", "os", "lan", "AN"], "A": ["GA", "T", "An", "Alpha", "AT", "X", "I", "R", "L", "AV", "AB", "AA", "Ab", "As", "O", "V", "AS", "S", "B", "G", "P", "AP", "Ant", "CA", "E", "D", "AF", "ATA", "AM", "Y", "SA", "U", "Array", "C"], "a": ["aq", "sta", "ae", "ac", "era", "ta", " ka", "ana", "name", "ach", "va", "ai", "xa", "ma", "ita", "ata", "ea", "la", "pa", "\u00e4", " ca", "apa", " pa", "na", "an", "cha", " ma", "iona", "sa", "af", "sha", "oa", "au", "aa", "am", "ya", "area", "ba", "ca", "ao"]}}
{"code": "a = [int(input()) for _ in range(5)]\\nz,ans = 123,0\\nfor i in a:\\n    if i%10!=0:z = min(z,i%10)\\n    ans += 10*((i+10-1)//10)\\nprint(ans+z-10 if (z!=123) or (z==0) else ans)", "target": "193", "substitutes": {"a": ["asia", "n", "x", "ia", "ab", "ta", "p", "ana", "va", "ai", "xa", "w", "c", "ma", "set", "o", "aux", "ea", "aaa", "b", "t", "alpha", "da", "apa", "na", "an", "e", "anta", "A", "at", "sa", "ao", "another", "s", "oa", "aa", "l", "am", "area", "ca"], "_": [" j", "__", "val", " int", " f", " l", " time", "int", "un", "new", " p"], "z": ["n", "x", "d", "p", "zes", "g", "hz", "iz", "za", "yz", "zone", "c", "zh", "yi", "o", "ez", "oz", "zon", "ze", "zip", "b", "uz", "t", "cz", "v", "zer", "nz", "s", "rez", "zi", "gz", "zo", "q", "zu", "l", "j", "tz", "az", "y", "zen", "Z", "zz"], "ans": ["ars", "x", "ANS", "ians", "ats", "ants", "ano", "names", " means", "zes", "ai", "aus", "us", "lines", "ts", "ates", "ns", "ann", "rs", "anas", "ks", "ins", "ons", "ms", "ls", "pan", "ens", "ations", "uns", "ings", "can", "an", "na", "anks", "gs", "aces", "ani", "sa", "s", "nz", "xs", "au", "ams", "aos", "oa", "arts", "os", "es", "ds", "ones"], "i": ["mi", "xi", "x", "ia", "ci", "gi", "p", "di", "ai", "I", "m", "bi", "yi", "info", "ic", "o", " bi", "ip", "f", "b", "t", "multi", "ri", "si", "ii", "li", "ei", "v", "ti", "oi", "im", "it", "zi", "ini", "ui", "phi", "pi", "ati", "l", "u", "id", "j", "y", "iat", "asi", "ij", "iu", "hi"]}}
{"code": "str = input()\\n\\nN = int(str.split()[0])\\nK = int(str.split()[1])\\nif (K == 1):\\n\ts = 0\\nelse :\\n\ts = N - K\\n\\nprint(\"{}\".format(s))\\n", "target": "739", "substitutes": {"str": ["STR", "ocr", "n", "stri", "Str", "p", "spec", "ct", "this", "iter", "r", "txt", "input", "wr", "hex", "cur", "pr", "f", "fr", "br", "sp", "t", "b", "ctr", "vol", "pt", "dat", "url", "dr", "v", "int", "list", "string", "st", "tr", "ch", "char", "it", "oct", "print", "gr", "usr", "sts", "cl", "cr", "text"], "N": ["SN", "n", "M", "NS", "T", "GN", "Ns", "X", "R", "I", "L", "NA", "NM", "NN", "NR", "CN", "NT", "V", "Z", "S", "NE", "B", "J", "Q", "ND", "P", "Num", "A", "D", "NB", "Y", "Ni", "TN", "C"], "K": ["M", "T", "KN", "KR", "Sch", "X", "R", "I", "L", "KK", "Disk", "H", "W", "FK", "V", "KS", "TN", "PK", "NK", "Kent", "KC", "S", "B", "J", "Q", "SK", "G", "P", "A", "HK", "Mask", "E", "Han", "D", "Y", "UK", "k", "U", "F", "Z", "KE", "KB", "C"], "s": ["a", "n", "sb", "sta", "sum", "space", "single", "spec", "g", "short", "i", "sf", "r", "start", "ts", "m", "set", "ns", "z", "rs", "save", "less", "second", "h", "ls", "abs", "t", "ss", "sat", "S", "just", "si", "conf", "gs", "sq", "int", "string", "conv", "sv", "q", "l", "sample", "k", "os", "se", "stats", "ds", "ps", "loss", "bs"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\n\\ndef sell(money,stock,price):\\n  money += price*stock\\n  stock = 0\\n  return money, stock\\n\\ndef buy(money,price):\\n  stock,money = divmod(money,price)\\n  return money,stock\\n\\nmoney = 1000\\nstock = 0\\nfor i in range(N):\\n  money, stock = sell(money,stock,A[i])\\n  if i<N-1 and A[i]<A[i+1]:\\n    money, stock = buy(money,A[i])\\nprint(money)", "target": "67", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "EN", "NC", "GN", "NI", "Ns", "R", "I", "L", "NA", "NM", "NN", "NR", "NT", "NH", "NF", "V", "TN", "No", "NO", "S", "MAN", "B", "J", "Q", "G", "P", "Num", "D", "NB", "Len", "Ni", "K", "F", "AN", "Z", "FN", "C"], "A": ["a", "GA", "ETA", "M", "New", "Answer", "All", "API", "An", "IA", "Ar", "Alpha", "AU", "AT", "R", "ACC", "I", "NA", "mA", "AL", "And", "AB", "Args", "H", "AA", "LA", "PA", "As", "EMA", "WA", "C", "RAM", "AS", "S", "EA", "B", "ICA", "This", "P", "HA", "CA", "At", "MA", "JA", "AF", "D", "AM", "By", "SA", "AC", "The", "BA", "ACT", "Array", "AP", "Data"], "money": ["mu", "movie", "euro", "human", "value", "total", "low", "mean", "multi", "amount", "byte", "balance", "iso", "machine", "quote", "number", "year", "data", "mk", "company", "oney", "fine", "mini", "point", "economic", "blue", "transfer", "length", "weight", "scale", "m", "trade", "created", "unit", "my", "payment", "change", "time", "Money", "volume", "ONEY", "margin", "date", "energy", "bill", "div", "rice", "mon", "error", "magic", "buy", "draw", "reason", "example", "raw", "yahoo", "moral", "minute", "result", "lower", "lo", "size", " Money", "credit", "micro", "loss", "channel", "mi", "currency", "zero", "iban", "message", "power", "go", "double", "market", "no", "dollar", "original", "base", "command", "simple", "coin", "cash", "rate"], "stock": ["security", "capital", "quant", "store", "value", "species", "window", "res", "Stock", "capacity", "grid", "co", "year", "rand", "fine", "sh", "resh", "util", "head", "short", "length", "stocks", "weight", "trade", "shock", "time", "share", "volume", "free", "bill", "clus", "lock", "buy", "draw", "dry", "sold", "state", "str", "bro", "given", "spec", "cycle", "series", "seed", "sys", "src", "stead", "ship", "stick", "depth", "confidence", "index", "weather", "growth", "loss", "risk", "hold", "ro", "currency", "frame", "sec", "power", "flow", "snap", "product", " stocks", "stable", "vol", "market", "rank", "row", "strong", "strength", "rate", "sum"], "price": ["resolution", "policy", "currency", "point", "p", "euro", "order", "score", "po", "value", "transfer", "position", "scale", "Price", "weight", "trade", "pe", " prices", "unit", "priced", " Price", "message", "change", "power", "priority", "tax", "val", "pr", "time", "market", "share", "volume", "amount", "style", "pie", "pos", "otion", "rank", "iso", "ping", "profit", "cer", "rice", "quote", "fee", "error", "offer", "cost", "pro", "rate", "risk"], "i": ["mi", "n", "xi", "x", "uri", "me", "ci", "gi", "major", "point", "p", "vi", "g", "di", "uli", "this", "I", "c", "m", "batch", "bi", "yi", "qi", "info", "ic", "ix", "ip", "ind", "f", "b", "multi", "ri", "t", "si", "li", "key", "ji", "v", "ori", "ii", "ti", "ei", "s", "it", "zi", "ini", "ui", "\u0438", "q", "phi", "pi", "id", "j", "index", "k", "y", "ij"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**7)\\ndef input(): return sys.stdin.readline().rstrip()\\n\\n\\ndef main():\\n    H, W, M = map(int, input().split())\\n    bombs = []\\n    hs = [0] * H\\n    ws = [0] * W\\n    for _ in range(M):\\n        h, w = map(int, input().split())\\n        bombs.append(tuple([h-1, w-1]))\\n        hs[h-1] += 1\\n        ws[w-1] += 1\\n    maxh = max(hs)\\n    maxw = max(ws)\\n    ans = maxh + maxw\\n\\n    maxhindex = [i for i, x in enumerate(hs) if x == maxh]\\n    maxwindex = [i for i, x in enumerate(ws) if x == maxw]\\n\\n    bombs = set(bombs)\\n    for i in maxhindex:\\n        for j in maxwindex:\\n            if (i, j) not in bombs:\\n                print(ans)\\n                exit()\\n    print(ans-1)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "694", "substitutes": {"H": ["N", "Eh", "HD", "T", "SH", "His", "HS", "HL", "HE", "X", "I", "HO", "HI", "WH", "NH", "HR", "DH", "TH", "HH", "B", "J", "HA", "P", "OH", "D", "MH", "Y", "HB", "High", "K", "HT", "He"], "W": ["WT", "WC", "N", "T", "WR", "MW", "CW", "Win", "WP", "NW", "X", "L", "VW", "WH", "BW", "WA", "V", "Width", "SW", "Wh", "Q", "B", "WB", "WD", "WM", "FW", "WE", "DW", "EW", "WS", "HT"], "M": ["N", "T", "CM", "R", "I", "L", "NM", "MX", "RM", "m", "MM", "MC", "V", "S", "MAN", "B", "J", "Q", "G", "P", "MP", "E", "MS", "D", "MH", "DM", "TM", "MN", "MI", "MT", "LM", "MF", "K", "F", "PM", "C"], "bombs": ["vombs", "beitis", "abombs", "abogens", "abumps", "bomb", " bomb", "abusions", "bombies", "vomb", "bumps", "abattery", " busions", "Bymes", "Bombies", " bitis", "beombies", "Bitis", "Bogens", "biattery", " bumps", "borus", "vattery", " borus", " bymes", "Bumps", "biomb", "busions", "beumps", "biorus", " bogens", "abombies", "biymes", "biombs", "battery", "beombs", "bogens", "biumps", "biombies", " battery", " bombies", "vorus", "Bombs", "bitis", "bymes", "biusions"], "hs": ["ht", "sticks", "ols", "ys", "opens", "His", "HS", "tops", "hz", "fs", "rh", "rs", "ks", "aches", "checks", "ins", "cks", "wcs", "hes", "ires", "bh", "gins", "ths", "ls", "hops", "ots", "hess", "its", "ouses", "gs", "ges", "has", "holes", "ays", "hw", "ashes", "xs", "his", "s", "icks", "phis", "inters", "heads", "hd", "ours", "vs", "sts", "hh", "qs", "hours", "bs", "ubs", "hm", "views"], "ws": ["mes", "rus", "sb", "sw", "mr", "ys", "aws", "wn", "Ws", "outs", "uts", "fs", "helps", "we", "ews", "wt", "windows", "ts", "webkit", "ns", "wb", "rs", "ks", "ses", "kw", "wcs", "ms", "bys", "ls", "css", "ss", "weights", "wa", "wp", "gs", "fts", "aps", "works", "s", "hw", "wm", "nw", "wk", "vs", "sts", "cs", "WS", "ds", "ps", "bs", "views"], "_": [" e", " the", " pre", " do", " g", " l", " m", " __", " p", " un"], "h": ["ht", "th", "sh", "kh", "g", "hal", "dh", "m", "ih", "zh", "rh", "change", "o", "ah", "igh", "bh", "b", "hl", "hp", "dr", "oh", "has", "s", "ha", "ph", "he", "hr", "high", "hd", "ho", "l", "hh", "k", "hi", "hm"], "w": ["wx", "n", "sw", "wn", "wh", "we", "wt", "m", "ns", "wb", "wall", "wr", "window", "iw", "rw", "wi", "wd", "kw", "wal", "ew", "b", "wl", "wid", "win", "wa", "wp", "v", "width", "s", "wm", "nw", "wk", "l", "u"], "maxh": ["endhe", "maxhs", "MaxH", "endhs", "MAXh", "Maxw", " maxH", "endh", "MAXy", "finalhe", "axH", "axh", "finalh", "finalH", "Maxh", "axy", "MAXH", "maxH", "axhe", " maxhs", "finaly", "finalhs", " maxhe", "maxy", "maxhe", "axw", "MAXhe"], "maxw": ["Maxw", "Maxx", "Maxws", "finalws", "fullws", " maxws", "maxws", " maxx", "maxW", "Maxwt", "finalw", "maxwt", "fullW", " maxW", "fullwt", " maxwt", "maxx", "MaxW", "finalW", "fullw", "fullx", "finalwt"], "ans": ["ones", "con", "ANS", "ants", "ats", "anon", "ano", " means", "aus", "ros", "us", "aned", " Ans", "ates", "ns", "anus", "ann", "rs", "anas", "ks", "ins", "ons", "ms", "ls", "mean", "ents", "ens", "cons", "mn", "uns", "an", "rors", "iann", "anes", "oss", "nan", "mx", "ran", "ams", "aos", "yes", "ads", "cs", "arts", "os", "anos", "stats", "es", "AN", "ps"], "maxhindex": ["maxhmindex", "maxhix", "maxfix", " maxhaddress", "maxhmind", "maxhditer", "maxHposition", "Maxhindex", "maxHiter", "maxhwaddress", "maxhmaddress", "Maxhiter", "maxfindex", "maxrindex", "maxfaddress", "MaxHIndex", "maxhaddress", " maxfind", "maxhwind", " maxhix", "MaxhIndex", "maxhdposition", "maxhIndex", "maxfind", " maxhind", "maxhmix", " maxfix", "maxhdindex", "MaxHindex", "maxHindex", "maxhposition", "MaxHiter", "maxhiter", "maxrposition", "maxrIndex", "maxHIndex", "maxhind", "maxhdIndex", "maxhwindex", "MaxHposition", " maxfaddress", "Maxhposition", "maxriter", "maxhwix", " maxfindex"], "i": ["a", "mi", "n", "xi", "ie", "ci", "gi", "ir", "p", "di", "ai", "I", "c", "m", "z", "bi", "ic", "ix", "o", "ip", "ind", "f", "b", "t", "ri", "si", "li", "ii", "ji", "v", "e", "int", "ti", "iy", "im", "it", "s", "zi", "ini", "\u0438", "l", "pi", "phi", "u", "id", "index", "y", "ij", "ik", "k", "iu", "hi"], "x": ["wx", "n", "xi", "ex", "ci", "xe", "p", "xes", "on", "ux", "name", "xc", "g", "ct", "X", "xa", "rx", "re", "true", "ox", "z", "xt", "xxx", "ix", "tx", "sex", "ax", "xd", "e", " xx", "ey", "at", "xy", "xs", "mx", "co", "dx", "inx", "xx", "index", "y", "xp", "xf"], "maxwindex": ["maximumWINDex", "MaxindEX", "MaxwindEx", "maxndout", "Maxindout", "maximumWINDey", "maxwindout", "maxmindEx", "MaxwindEX", "maxwindx", "maxmindex", "maximumWINDEx", "maxindout", "Maxwindout", "maximumwindex", "MaxindEx", "maxndx", "maximumwindx", "maxWINDey", "maxWINDx", "maxmindey", "maxindEx", "maxwindey", "maxwindEX", "Maxwindex", "maximumwindEx", "maxmindx", "maxindex", "maxndEX", "maxWINDEx", "maxindEX", "maximumWINDx", "Maxindex", "maxndEx", "maxwindEx", "maxndey", "maximumwindey", "maxWINDex", "maxndex"], "j": [" ii", "a", "n", "xi", "uj", "ja", "js", "aj", "p", "d", "name", "jp", "jc", "oj", "z", "c", "m", "jj", "bi", "o", "jl", "f", "je", "jac", "b", "t", "si", "J", "bj", "key", "ji", "kj", "jas", "v", "li", "obj", "it", "jo", "q", "l", "dj", "y", "k", "ij"]}}
{"code": "N = int(input())\\nL = []\\nfor i in range(N):\\n  L.append(input())\\n\\nprint(\"AC x \"+str(L.count('AC'))+\\n\"\\nWA x \"+str(L.count('WA'))+\\n\"\\nTLE x \"+str(L.count('TLE'))+\\n\"\\nRE x \"+str(L.count('RE')))", "target": "531", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "NV", "NC", "GN", "R", "I", "NA", "NM", "NN", "NP", "NR", "NT", "NH", "NF", "V", "NO", "S", "B", "Q", "ND", "P", "NPR", "D", "NB", "Ni", "K", "F", "Z", "C"], "L": ["dL", "M", "NL", "DL", "List", "T", "LIN", "PL", "BL", "LIST", "HL", "SL", "R", "I", "LC", "AL", "ALL", "TL", "LR", "H", "LU", "LA", "LD", "V", "S", "FL", "LT", "B", "J", "ML", "G", "Li", "LI", "P", "SSL", "RL", "VL", "LG", "Lu", "Left", "l", "CL", "LL", "LE", "XL", "LM", "LS", "Z", "LP", "EL"], "i": ["n", "x", "ite", "ci", "p", " j", "I", "iter", "r", "c", "ix", "ind", "f", "lo", "im", "it", "q", "l", "id", "k", "y", "j"]}}
{"code": "def roundone(a, b):\\n\\n    abc = \"123\"\\n\\n    return abc.replace(a, \"\").replace(b, \"\")\\n\\ndef main():\\n    a = str(input())\\n    b = str(input())\\n    print(roundone(a, b))\\n\\nif __name__ == '__main__':\\n    main()", "target": "752", "substitutes": {"a": ["ce", "arg", "x", "ia", "sta", "ae", "ab", "era", "aj", "d", "p", "ai", "apt", "c", "ma", "el", "eas", "la", "aaa", "val", "act", "t", "alpha", "art", "da", "apa", "an", "e", "A", "al", "at", "sa", "s", "ao", "aka", "au", "ed", "oa", "aa", "l", "am", "ar", "area", "ba", "ca", "ac"], "b": ["bis", "sb", "ab", "d", "db", "beta", "g", "ib", "r", "c", "z", "m", "bi", "wb", "pb", "fb", "rb", "by", "o", "mb", "h", "be", "ob", "f", "br", "bc", "gb", "t", "nb", "B", "bb", "v", "s", "it", "eb", "erb", "base", "cb", "bl", "l", "bp", "u", "j", "y", "bs", "ba", "back"], "abc": ["stuff", "foo", "ab", "lib", "cd", "exc", "xc", "arr", "ct", "rc", "ABC", "c", "ox", "fc", "prefix", "fb", "rb", "py", "const", " ab", "aaa", "ob", "abs", "bc", "gb", "dc", "alpha", "conf", "obj", "lab", "erb", "app", "au", "cb", "etc", "az", "tz", "ac"]}}
{"code": "a = int(input())\\nb = int(input())\\nc = int(input())\\nx = int(input())\\n\\nanswer = 0\\nfor coin1 in range(a+1):\\n    for coin2 in range(b+1):\\n        for coin3 in range(c+1):\\n            if x == 500 * coin1 + 100 * coin2 + 50 * coin3:\\n                answer += 1\\n\\nprint(answer)", "target": "439", "substitutes": {"a": ["ia", "ae", "ab", "aj", "ta", "ach", "i", "ma", "eas", "ga", "ea", "admin", "aaa", "back", "isa", "art", "da", "an", "A", "al", "at", "af", "sa", "ao", "au", "oa", "aa", "am", "ar", "area", "ba", "ca", "ac"], "b": ["bis", "sb", "bf", "ab", "bar", "db", "ib", "bi", "wb", "fb", "beck", "rb", "bo", "mb", "be", "ob", "abb", "br", "bc", "gb", "nb", "zb", "B", "bb", "erb", "eb", "cb", "ubb", "ub", "y", "bs", "ba"], "c": ["ec", "ce", "lc", "ac", "ci", "d", "cd", "ct", "rc", "city", "fc", "ic", "cur", "vc", "bc", "mc", "dc", "uc", "cin", "cp", "cc", "co", "cb", "cu", "cs", "cm", "cr", "cf", "ca", "C", "sc"], "x": ["wx", "xi", "ex", "ci", "xe", "p", "xes", "ux", "xc", "xa", "X", "i", "rx", "r", "w", "xt", "ix", "tx", "ax", "f", "t", "xxxxxxxx", "zx", "v", "fx", "cox", "xy", "xs", "mx", "xb", "xff", "dx", "xx", "y", "xp", "xf"], "answer": ["open", "eni", "aq", "Answer", "wer", "option", "vote", "vert", "voice", "value", "array", "approximately", "ox", "section", "asm", "query", "window", "message", "output", "remember", "back", "result", "term", "ze", "env", "response", "record", "swers", "ion", "address", "ee", "urn", "support", "ache", "viation", "archive", "future", "question", "energy", "uration", "say", "ve", "rect", "video", "inity", "q", "turn", "utton", "offer", "entry", "area", "sequence", "answered", "interpret", "version", " answered"], "coin1": ["coin51", "coin11", "billionOnce", "token0", "coinOnce", " bitcoin11", "coin0", "oin11", " coin11", "tokenOnce", " bitcoin3", "coin01", "oin51", " bitcoin1", " coinOnce", "billion0", "oin3", "token1", "token01", "billion1", "oin1", " bitcoin51", "billion01", " coin0", " coin01", " coin51"], "coin2": ["cell1", " coin5", "coin8", "co3", " Coin1", "cell5", "co4", " bitcoin3", "coinb", "coin4", "cell2", " Coin2", "co8", " coinb", " bitcoin2", "cellb", " Coin5", " Coinb", " bitcoin4", " coin4", "coin5", " coin8", "co2", " bitcoin8"], "coin3": ["cot1", "coin03", "coinThree", "oin03", " coin03", "oin15", "coat15", " bitcoin3", "BitcoinThree", "cot03", "coat93", "oin93", " bitcoin03", "coin93", "Bitcoin03", "coin15", "coat03", "Bitcoin1", "cot3", "Bitcoin3", "cotThree", "oin3", " coinThree", "coat3", " bitcoin93", " bitcoin15"]}}
{"code": "from collections import Counter\\ndef solve():\\n    N = int(input())\\n    A = list(map(int, input().split()))\\n    cnter = Counter(A)\\n    cnter_list = list(cnter.items())\\n    cnter_list.sort(key=lambda x:x[0], reverse=True)\\n\\n    double_cnt = 0\\n    ans = 1\\n    for elem in cnter_list:\\n        if elem[1] >= 4:\\n            if double_cnt == 0:\\n                ans = elem[0] * elem[0]\\n                break\\n\\n        if elem[1] >= 2:\\n            double_cnt += 1\\n            ans *= elem[0]\\n        if double_cnt >= 2:\\n            break\\n    else:\\n        print(0)\\n        return\\n    \\n    print(ans)\\n\\nif __name__ == '__main__':\\n    solve()", "target": "53", "substitutes": {"N": ["M", "n", "NS", "T", "Ns", "R", "X", "I", "NA", "L", "NN", "H", "O", "V", "S", "B", "J", "Q", "G", "P", "E", "D", "Y", "Ni", "K", "F", "Z", "C"], "A": ["GA", "M", "Ax", "An", "IA", "Alpha", "Abs", "AU", "AT", "X", "I", "NA", "AD", "L", "AV", "AB", "H", "AA", "LA", "As", "V", "C", "AS", "S", "B", "P", "CA", "JA", "D", "AF", "AM", "Y", "SA", "AC", "AN", "Array", "AP"], "cnter": ["CNper", "hnuter", "CNTER", "ainuter", "hner", "tainper", "cnlier", "CNcher", "hnter", "dnter", "cnper", "cncher", "cinper", "tainTER", "dnuter", "cnuter", "cinTER", "cner", "ainlier", "ainer", "cnTER", "hnlier", "taincher", "dner", "ainter", "cincher", "tainter", "dnlier", "cinter", "CNter"], "cnter_list": ["cninter_list", "cnter__list", "cninter_st", "cnTER2list", "cnter2List", "cnter2list", "cnater_order", "cnTER2lists", "cnater_lists", "cnter_order", "cnter_List", "cnter__lists", "cnTER_List", "cnTER2map", "cnTER_lists", "cninter_List", "cnter_lists", "cnter2map", "cnter_st", "cnater_List", "cninter_len", "cnter_map", "cnater_list", "cnTER2List", "cnter2lists", "cnTER_list", "cnter_len", "cnter__map", "cnter__List", "cnTER_map"], "double_cnt": ["double_ncld", "double_lcld", "double2nnc", "double2cnt", "double_Cnd", "double2cgt", "double_count", "double_Cpt", "double_rcgt", "double_tnd", "double_tnt", "double_Count", "double_cld", "double2cpt", "double_lcgt", "double_nnd", "double_cnd", "double2cnc", "double_acpt", "double_cpt", "double_Cov", "double_acst", "double_ngt", "double_rcnt", "double_cst", "double2nnt", "double_Cnc", "double_rcnc", "double_acov", "double_nnc", "double_lcnt", "double_Cst", "double_discpt", "double_ncount", "double_nnt", "double_rcpt", "double_npt", "double_Cnt", "double_discov", "double_cov", "double_tount", "double_acnt", "double2ngt", "double_discnt", "double_nount", "double_lcount", "double_cnc", "double_ncgt", "double_cgt", "double2npt", "double_tnc", "double_Cgt", "double_ncnt", "double_discst"], "ans": ["ars", "ANS", "ants", "ats", "ians", "actions", "names", " means", "eds", "outs", "books", "aus", "ros", "lets", "ns", "ann", "rs", "eas", "anas", "ks", "ins", "vers", "ons", "ms", "amps", "ls", "ids", "ents", "ens", "cons", "uns", "comments", "an", "posts", "users", "anks", "gs", "aps", "works", "s", "eps", "xs", "sv", "ions", "nas", "ams", "aos", "vs", "rates", "cs", "arts", "os", "es", "stats", "AN", "ds", "views"], "elem": ["eighth", "aelem", "bemm", "eelement", "eeem", "eem", " emn", "aem", "Eighth", "zeem", "Elements", "tlem", "eval", "ept", "ether", "eept", "Elem", "zemm", "nemm", "belem", "belement", "tlements", "elems", "em", " em", "uelement", "uept", "Elems", "memm", "aelement", "emm", "eemn", "nemn", "elelement", "ueval", "nelem", "elelem", "uelem", "elements", "selems", "elether", " elev", "eemm", "tlems", "zelement", "selem", "melement", "emn", "eelev", "eeval", "melev", " ether", "nelev", "selements", "elev", "element", " ept", "melem", "beem", "aether", "zelem", " emm", "tighth", "eelem", "nelement", " element", "seighth", " eval"]}}
{"code": "n = int(input())\\nh = list(map(int, input().split()))\\n\\ndp = [float('inf')] * n\\n\\ndp[0] = 0\\nfor i in range(1, n):\\n  if i == 1:\\n    dp[i] = dp[0] + abs(h[i]-h[i-1])\\n  else:\\n    dp[i] = min(dp[i-1]+abs(h[i]-h[i-1]),dp[i-2]+abs(h[i]-h[i-2])) \\n  \\nprint(dp[n-1])", "target": "5", "substitutes": {"n": ["a", "N", "x", "net", "nt", "ni", "gn", "ln", "d", "p", "en", "ne", "cn", "g", "sn", "w", "c", "r", "m", "z", "ns", "o", "nl", "b", "num", "fn", "t", "count", "len", "nb", "no", "mn", "na", "v", "nc", "nu", "size", "nn", "l", "q", "np", "j", "k", "nd"], "h": ["history", "ht", "th", "sh", "kh", "p", "hz", "html", "hal", "hs", "ih", "zh", "rh", "help", "hex", "http", "ic", "H", "sl", "ah", "host", "bh", "f", "b", "uh", "hl", "hp", "gh", "its", "v", "hist", "oh", "has", "his", "ph", "hw", "hash", "it", "ch", "he", "hr", "s", "hd", "q", "ll", "l", "phi", "hh", "y", "pp", "hi", "hm"], "dp": ["pkg", "osp", "dro", "dos", "pm", "imp", "dm", "d", "p", "db", "cd", "vp", "di", "dial", "jp", "td", "gd", "dh", "dl", "fp", "pb", "ga", "gp", "bsp", "wd", "tp", "decl", "dt", "df", "dat", "dc", "dep", "hp", "isp", "DP", "wp", "lp", "pd", "dr", "drop", "delay", "deb", "cp", "bet", "bps", "csv", "dq", "dd", "dj", "du", "np", "pn", "pp", "ds", "ps", "adr"], "i": ["a", "mi", "xi", "x", "uri", "ie", "me", "ci", "gi", "cli", "p", "name", "di", "ai", "I", "iter", "jp", "m", "batch", "isi", "bi", "ami", "status", "qi", "info", "ic", "ski", "o", "ix", "ip", "iri", "multi", "t", "ri", "io", "si", "li", "ii", "ji", "v", "ei", "exp", "ti", "key", "im", "it", "zi", "ini", "ui", "\u0438", "q", "phi", "pi", "item", "id", "u", "j", "y", "k", "asi", "index", "ij", "iu", "hi"]}}
{"code": "def solve():\\n    N = int(input())\\n    A = [int(i) for i in input().split()]\\n    ans = 0\\n    for i in range(N):\\n        if i + 1 == A[A[i] - 1]:\\n            ans += 1\\n    print(ans // 2)\\n\\nif __name__ == \"__main__\":\\n    solve()\\n", "target": "397", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "GN", "NI", "Na", "Ns", "I", "NA", "L", "NM", "NN", "NR", "NT", "NH", "V", "No", "NO", "S", "Q", "Num", "P", "D", "NB", "Len", "Ni", "K", "AN", "TN", "C"], "A": ["a", "GA", "There", "An", "IA", "Ar", "Alpha", "AT", "Adam", "I", "mA", "NA", "L", "AV", "App", "AB", "H", "AA", "LA", "As", "WA", "V", "C", "B", "ICA", "HA", "P", "CA", "At", "JA", "AF", "TA", "ATA", "AM", "SA", "U", "AC", "The", "BA", "Array", "AP"], "i": ["\u00ed", "mi", "ki", "a", "xi", "x", "ia", "ci", "gi", "p", "di", "ai", "I", "iter", "z", "bi", "qi", "yi", "ic", "ix", "o", "ip", "ind", "ri", "t", "io", "si", "iu", "ii", "li", "ei", "v", "int", "ti", "oi", "iy", "im", "it", "ini", "zi", "ui", "\u0438", "q", "l", "pi", "phi", "u", "id", "j", "y", "index", "ij", "ik", "asi", "iri", "hi", "fi"], "ans": ["n", "ANS", "ants", "ats", "beans", "actions", "eds", "outs", "aus", "ros", "nets", "lets", "us", "ts", " Ans", "aves", "ns", "ann", "rans", "rs", "ums", "anas", "ks", "offs", "ins", "mas", "ras", "ons", "ms", "ids", "ents", "ens", "ots", "uns", "an", "posts", "anks", "rors", "anes", "aps", "oss", "s", "ran", "nas", "aos", "vs", "yes", "arts", "lan", "ones", "orts"]}}
{"code": "if input().startswith('YAKI'):\\n    print('Yes')\\nelse:\\n    print('No')", "target": "27", "substitutes": {}}
{"code": "a,b=map(int,input().split())\\nn=list(map(int,input().split()))[:a]\\nn.sort()\\nsum=0\\n\\nfor i in range(b):\\n    sum+=n[i]\\n\\nprint(sum)", "target": "124", "substitutes": {"a": ["ia", "ab", "aj", "ta", "d", "p", "ach", "va", "ai", "xa", "r", "w", "length", "c", "ma", " A", "z", "ga", "ea", "be", "act", "ax", "alpha", "na", "an", "e", "A", "al", "at", "sa", "access", "au", "aa", "l", "j", "index", "ba", "ca"], "b": ["bis", "sb", "ab", "d", "db", "g", "ib", "c", "m", "z", "bi", "rb", "bo", "mb", "be", "bh", "f", "br", "bc", "nb", "B", "bb", "v", "e", "end", "eb", "base", "cb", "l", "number", "y", "bound", "bs", "ba"], "n": ["N", "nt", "gn", "ln", "d", "p", "en", "ne", "cn", "dn", "sn", "c", "m", "ns", "nl", "num", "fn", "t", "nb", "nor", "nv", "na", "v", "tn", "nc", "nm", "s", "none", "nu", "nw", "nn", "l", "np", "j", "nd"], "sum": ["alph", "max", "summary", "su", " summed", "um", " Sum", "med", "acc", "zero", "us", "sys", "weight", "SI", "sam", "ums", "total", "tail", "Sum", "mean", "num", "count", "vol", "sat", "cum", "sim", "av", "add", "hist", "cal", "hum", "final", "cos", "sa", "hash", "rup", "sv", "average", "com", "say", "size", "dot", "gam", "mem", "se", "cost", "ass", "loss", "temp", "prof"], "i": ["mi", "xi", "x", "uri", "gi", "di", "ai", "I", "r", "c", "m", "bi", "qi", "ic", "ip", "ind", "f", "multi", "si", "li", "ii", "ji", "v", "key", "ori", "ti", "s", "zi", "ui", "ini", "\u0438", "q", "pi", "u", "id", "k", "j", "ij"]}}
{"code": "import sys\\ndef input():\\n    return sys.stdin.readline()[:-1]\\n\\n\\ndef main():\\n    N, K = map(int,input().split())\\n    mod = 10 ** 9 + 7\\n    ans = 0\\n    for i in range(K, N + 1 + 1):\\n        mi = int((i - 1) * i / 2)  #ma\u3001mi\u306f i * (10 **100)\u3092\u7121\u8996\u3057\u305f\u4e0a\u9650\u4e0b\u9650\\n        ma = i * N - mi\\n        ans += ma - mi + 1\\n    print(ans % mod)\\n\\n\\nif __name__ == \"__main__\":\\n    main()", "target": "425", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "We", "NC", "GN", "NI", "Ns", "I", "NA", "L", "NM", "NN", "NP", "NR", "NT", "NH", "V", "No", "S", "NE", "B", "J", "Q", "ND", "P", "Num", "D", "NB", "Y", "Len", "Ni", "C"], "K": ["M", "T", "KN", "KY", "KR", "MK", "X", "R", "I", "KK", "H", "MC", "KS", "V", "KC", "NK", "PK", "S", "B", "J", "Q", "G", "P", "HK", "Han", "D", "Y", "UK", "MN", "k", "F", "KI", "Z", "KE", "KA", "KING", "C"], "mod": ["perm", "MOD", "mods", " Mod", "mm", "g", "mult", "ai", "Mod", "fun", "scale", "inv", "m", "prime", "ms", "wid", "lo", "im", "MS", "ho", "pi", "mem", "id", "j", "hi", "mk", "ac"], "ans": [" io", " threads", " means", " mon", "ai", " pid", " ms", "ks", " rs", " lo", " wa", "ms", " mt", " po", " mem", "mn", " sd", "an", " mp", " ma", " ns", " size", " vi", " fa", " slaves", " mu", " mo", " s"], "i": ["a", "ki", "n", "xi", "x", "ia", "ci", "gi", "d", "p", "di", "ai", "I", "r", "c", "m", "ami", "ic", "o", "ip", "ind", "f", "b", "t", "si", "li", "ii", "v", "ei", "ti", "oi", "im", "s", "ini", "zi", "ui", "l", "pi", "u", "k", "j", "iu", "hi"], "mi": ["km", "xi", "pm", "me", "mid", "ni", "ci", "mm", "di", "ai", "ma", "m", "umi", "Mi", "wi", "pa", "ms", "mc", "si", "li", "ti", "sa", "mx", "ini", "zi", "pi", "MI", "mt", "hi"]}}
{"code": "import sys\\n\\nN = int(input())\\nA = list(map(int, input().split()))\\n\\nif(0 in A):\\n    print(0)\\n    sys.exit(0)\\n\\nprod = 1\\nfor a in A:\\n    prod *= a\\n    if prod > 1000000000000000000:\\n        print(-1)\\n        sys.exit(0)\\n\\nprint(prod)", "target": "75", "substitutes": {"N": ["M", "n", "NS", "T", "NC", "Ns", "X", "I", "R", "NA", "L", "NN", "NR", "V", "S", "B", "J", "Q", "P", "E", "D", "Y", "Ni", "K", "F", "Z", "FN", "C"], "A": ["GA", "M", "T", "An", "IA", "Alpha", "AU", "AT", "X", "I", "NA", "L", "AB", "AE", "AA", "LA", "As", "V", "AS", "S", "B", "G", "P", "AP", "HA", "Ant", "CA", "E", "JA", "D", "TA", "AF", "AM", "Y", "SA", "AC", "AN", "BA", "Array", "Z", "C"], "prod": ["prodd", "prb", "pernd", "perp", "prc", "prods", " proc", "perr", " pror", "Proc", "Prod", "prond", " prob", "PROd", "prr", "Pron", "prob", "Prods", "Prodd", "pron", " prog", "PROdd", "prg", "persd", "perd", " prond", "prn", "prp", "rods", "pror", "rod", "PROds", " pron", " prosd", "Prosd", "PROsd", "proc", "prosd", "perb", "Prog", "rodd", "prd", "prog", " prop", "rosd", "prnd", "prsd", "prop"], "a": ["n", "ia", "sta", "ae", "ac", "era", "ta", "d", "p", "ach", "xa", "ai", "i", "ma", "z", "ita", "ata", "o", "ea", "la", "ada", "\u00e4", "b", "t", "ua", "wa", "an", "e", "at", "sa", "ao", "s", "oa", "au", "aa", "l", "am", "u", "j", "index", "ya", "area", "ba", "ca"]}}
{"code": "N=int(input())\\ns=input()\\nt=input()\\ncommon=0\\n\\nfor start in range(N):\\n    point=0\\n    check=False\\n    for i in range(start,N):\\n        if s[i] != t[point]:\\n            check=True\\n            break\\n        point+=1\\n    if not check:\\n        common=N-start\\n        break\\n\\nprint(len(s)+len(t)-common)", "target": "693", "substitutes": {"N": ["SN", "INT", "n", "M", "NS", "T", "NC", "GN", "NI", "Ns", "R", "X", "I", "L", "NA", "NM", "NN", "NP", "NR", "CN", "NT", "O", "V", "TN", "NUM", "S", "B", "J", "Q", "G", "ND", "Num", "P", "A", "E", "Sn", "Start", "D", "NB", "Y", "Size", "Len", "K", "F", "Z", "C"], "s": ["a", "n", "sb", "sw", "str", "ats", "js", "ains", "p", "g", "fs", "c", "ts", "ns", "rs", "ses", "h", "ms", "ls", "f", "b", "sp", "abs", "S", "ss", "si", "its", "tes", "strings", "sq", "gs", "ans", "ws", "st", "sv", "xs", "ims", "sts", "cs", "j", "qs", "ds", "ps", "bs"], "t": ["tm", "n", "ty", "T", "ta", "p", "d", "g", "ct", "r", "tc", "txt", "c", "ts", "m", "wt", "te", "o", "term", "f", "b", "pt", "ot", "tes", "v", "at", "tt", "tr", "it", "tf", "rt", "st", " T", "q", "l", "j", "y"], "common": ["open", "specific", "con", "n", "known", "x", "summary", "general", "onet", "local", "p", "span", "long", "unique", "current", "Common", "set", "seen", "pb", "total", "custom", "done", "main", "num", "empty", "count", "no", "initial", "begin", "border", "normal", "shared", "none", "public", "com", "high", "new", "other", "central", "made", "number", "recent", "minimum", "cm", "mark", "basic", "sequence", "connected", "stop"], "start": ["open", "next", "stop", "n", "before", "state", "offset", "p", "name", "head", "get", "g", "left", "span", "length", "current", "set", "window", "step", "ind", "starting", "sp", "time", "part", "art", "begin", "an", "int", "st", "it", "rest", "end", "first", "started", "Start", "new", "print", "size", "base", "number", "id", "k", "y", "index", "j", "init"], "point": ["pointer", "stop", "to", "state", "instance", "offset", "p", "pc", "reset", "span", "pen", "chain", "pre", "set", "section", "points", "process", "type", "page", "change", "step", "ic", "oint", "ind", "sp", "part", "art", "pt", "block", "out", "int", "list", "event", "inter", "cp", "end", "group", "new", "line", "error", "id", "k", "index", "iat", "j", "Point", "mark", "sequence", "init"], "check": ["ck", "open", "find", "call", "comment", "warn", "load", "Check", "match", "view", "checked", "run", "test", "connect", "c", "set", "control", "commit", "process", "status", "info", "help", "make", "type", "read", "checks", "scan", "query", "CHECK", "wait", "create", "close", "block", "valid", "null", "ok", "update", "clear", "cp", "work", "com", "print", "clean", "see", "click", "link", "op"], "i": ["a", "mi", "n", "x", "p", "name", " j", "I", "iter", "span", "c", "m", "bi", "ic", "ix", "ip", "ind", "f", "b", "art", "ii", "key", "li", "v", "e", "int", "it", "l", "pi", "id", "k", "index", "y", "j", "ij", "iat"]}}
{"code": "#2019/10/03\\nX, t = map(int, open(0).read().split())\\nprint(X - t if X > t else 0)", "target": "792", "substitutes": {}}
{"code": "N, M = map(int, input().split())\\n\\nCakes = [tuple(map(int, input().split())) for _ in range(N)]\\nans = 0\\nfor i in range(1 << 3):\\n    Cake = [0] * N\\n    for j in range(3):\\n        if (i >> j) & 1 == 1:\\n            for c in range(N):\\n                Cake[c] += Cakes[c][j]\\n        else:\\n            for c in range(N):\\n                Cake[c] -= Cakes[c][j]\\n    Cake.sort(reverse=True)\\n    ans = max(ans, sum(Cake[:M]))\\n\\n\\nprint(ans)\\n", "target": "390", "substitutes": {"N": ["SN", "CNN", "n", "NS", "T", "NC", "GN", "NI", "Na", "Ns", "R", "I", "X", "NA", "L", "NM", "NN", "NR", "CN", "NT", "NH", "H", "O", "V", "TN", "No", "NO", "S", "B", "J", "Q", "Num", "P", "A", "D", "NB", "Y", "MN", "Ni", "K", "F", "AN", "Z", "C"], "M": ["MO", "T", "CM", "MU", "R", "I", "L", "NM", "MX", "RM", "m", "Mi", "MM", "O", "MC", "V", "S", "MAN", "B", "J", "G", "P", "A", "MP", "E", "MS", "D", "DM", "AM", "MN", "MI", "MT", "K", "F", "PM", "C"], "Cakes": ["cakens", "Chake", "cades", "Quake", "Cakens", "Caken", "Crakes", "caking", "Quakens", "Quaking", "casks", "Crake", "Crades", " Cakens", " Caking", "CAasks", "CAaken", "Cades", "cake", "cakes", "caken", "CAake", "Casks", " Cades", "Chasks", "Craking", "Caking", "Chaken", "Chakes", "Quakes", "CAakes"], "_": ["con", "x", "ci", "gc", "unc", "name", "ct", "code", "common", "I", "ox", "parent", "ix", "col", "t", " x", "cp", "co", "new", "cl", "C", "ac"], "ans": ["ones", "ANS", "ants", "ats", "names", " means", "cn", "eds", "outs", "aus", "ros", "aned", "aves", "ns", "ann", "rans", "rs", "anas", "ks", "offs", "ins", "ms", "amps", "mean", "ls", "pan", "ids", "ens", "cons", "ends", "uns", "ces", "an", "rors", "anes", "oss", "aps", "s", "nan", "xs", "sv", "ions", "nas", "ran", "vs", "rates", "cs", "arts", "os", "es", "stats", "errors", "AN", "ps"], "i": ["mi", "ki", "n", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "m", "bi", "ico", "ic", "ix", "ind", "f", "b", "si", "li", "ii", "v", "ti", "im", "ini", "zi", "q", "phi", "pi", "l", "y", "ij", "iu", "hi"], "Cake": [" Case", "Bave", "cade", "Bake", "Cave", "Caked", "Cane", "Cask", "cace", "Case", "Caake", "Crane", "Crakes", "Made", "Crake", "Cace", "Coase", "Caakes", "Makes", "Clake", "Clakes", "Bakes", "Coakes", "Make", "cake", "Caave", " Cace", "Bask", "cakes", "Nake", "Nakes", "Clace", "caked", "Coask", "Nade", "Caaked", "CMaster", " Cask", "Cade", "Mask", "cMaster", "ClMaster", " CMaster", "Coake", " Cave", "cask", "Base", "cave", "Bane", "Coane", " Caked", "Coave", "Nask", "Crave"], "j": ["n", "x", "uj", "ja", "js", "aj", "p", "d", "g", "jp", "job", "jc", "z", "m", "jj", "bi", "o", "col", "h", "ind", "jl", "f", "b", "jac", "t", "J", "bj", "li", "ji", "v", "kj", "obj", "ch", "it", "jump", "q", "l", "dj", "u", "y", "k", "index", "ij"], "c": ["a", "ce", "lc", "n", "con", "x", "cat", "ac", "ci", "gc", "p", "unc", "pc", "cn", "xc", "ct", "rc", "r", "tc", "jc", "cod", "m", "z", "ic", "o", "col", "cv", "f", "b", "bc", "t", "mc", "anc", "ion", "cut", "sc", "v", "nc", "cin", "cp", "ch", "cus", "\u00e7", "cc", "co", "cu", "l", "u", "cs", "y", "k", "cm", "cf", "C", "chain"]}}
{"code": "N = int(input())\\nA = list(map(int, input().split()))\\nS = [0]*(N+1)\\nfor n in range(N):\\n    S[n+1] = S[n] + A[n]\\nB = {}\\nfor s in range(len(S)):\\n    B[S[s]] = 0\\nfor s in range(len(S)):\\n    B[S[s]] += 1\\nres = 0\\nfor v in B.values():\\n    if v > 1:\\n        res += v * (v - 1) // 2\\nprint(res)", "target": "283", "substitutes": {"N": ["SN", "M", "NS", "T", "NV", "NC", "GN", "NI", "Ns", "X", "I", "R", "L", "NA", "NM", "NN", "NR", "CN", "NT", "NH", "H", "Node", "V", "TN", "NO", "NUM", "NE", "J", "G", "ND", "Num", "P", "D", "NB", "MN", "Ni", "K", "F", "Z", "FN", "C"], "A": ["a", "GA", "M", "An", "IA", "Alpha", "AU", "AT", "R", "AL", "ABC", "AB", "Args", "LA", "AA", "As", "WA", "V", "C", "AR", "AS", "ICA", "P", "CA", "JA", "D", "AM", "SA", "AC", "ACT", "AN", "Array", "AP"], "S": ["Sub", "Save", "M", "NS", "SF", "SH", "BS", "SS", "Sl", "SL", "SB", "SER", "R", "SO", "L", "PS", "SIM", "Si", "I", "RS", "JS", "SI", "CS", "TS", "TPS", "CSS", "Set", "SM", "OS", "H", "GS", "V", "IS", "AS", "SAM", "INS", "J", "Sing", "G", "P", "SE", "US", "SP", "SU", "ST", "DS", "SA", "SR", "F", "LS", "C", "IDS"], "n": ["nr", "x", "net", "nt", "wn", "ln", "p", "ne", "cn", "dn", "i", "sn", "c", "m", "z", "ns", "note", "o", "nl", "ren", "num", "fn", "t", "nb", "mn", "na", "an", "yn", "nc", "all", "nm", "un", "obj", "nan", "node", "new", "nu", "nn", "l", "np", "ng", "k", "j", "nd"], "B": ["Sub", "Other", "LB", "M", "New", "CB", "T", "BI", "RB", "BL", "BS", "VB", "Bs", "SB", "R", "Big", "I", "L", "IB", "Builder", "AB", "BG", "H", "O", "V", "BT", "b", "BC", "BE", "J", "BR", "G", "WB", "GB", "This", "P", "BB", "E", "TB", "D", "Base", "NB", "EB", "Y", "DB", "Bytes", "F", "BA", "BY", "C"], "s": ["a", "sym", "sb", "sw", "ys", "ats", "js", "p", "eds", "g", "i", "fs", "sn", "sys", "c", "ts", "south", "ns", "ies", "status", "ins", "ess", "h", "ms", "ls", "f", "b", "ids", "t", "ss", "si", "sat", "its", "ends", "sq", "gs", "ws", "gets", "sv", "xs", "sts", "sets", "sd", "cs", "j", "sk", "es", "stats", "qs", "os", "ds", "ps"], "res": ["resolution", "nt", "resh", "ret", "norm", "reset", "hard", "re", "Res", "zero", "r", "ref", "rem", "RE", "prime", "RES", "ms", "val", "result", "mask", "num", "count", "rel", "vol", "ress", "cons", "resource", "ver", "conf", "results", "out", "resp", "pos", "cal", "int", "final", "red", "crit", "gr", "rest", "rez", "sol", "req", "pres", "stock", "progress", "mem", "cr", "pro", "ps", "sum"], "v": ["qv", "x", "gu", "vv", "p", "vi", "vo", "tv", "g", "va", "value", "i", "w", "r", "uv", "c", "m", "z", "ev", "o", "nov", "h", "val", "V", "cv", "vr", "f", "b", "vc", "t", "av", "nv", "lv", "conv", "sv", "ve", "size", "q", "vs", "l", "var", "u", "j", "vt", "k", "y", "version"]}}
{"code": "l = [ int(x) for x in input().split() ]\\nl = set(l)\\nprint(len(list(l)))\\n", "target": "32", "substitutes": {"l": ["lc", "n", "los", "kl", "ln", "d", "p", "ld", "lt", "g", "i", "L", "long", "r", "c", "m", "z", "ml", "dl", "set", "ly", "el", "lit", "nl", "sl", "h", "lay", "ls", "f", "b", "t", "hl", "yl", "len", "lis", "rl", "lo", "fl", "li", "lp", "lam", "v", "list", "al", "s", "lock", "ll", "le", "pl"], "x": ["wx", "n", "xi", "ex", "any", "xe", "p", "xes", "ux", "xc", "X", "i", "rx", "ox", "z", "xt", "ctx", "hex", "ix", "val", "tx", "ax", "xd", "t", "v", "fx", "xy", "xs", "mx", "dx", "inx", "xx", "y", "px", "xp", "xf"]}}
{"code": "a,b,c=map(int,input().split())\\nd=a*b\\nif d>=c:\\n    print(c)\\nelse:\\n    print(d)", "target": "751", "substitutes": {"a": ["aq", "n", "x", "ia", "ae", "ab", "p", "aj", "ach", "ak", "r", "ma", "m", "la", "ax", "f", "t", "alpha", "da", "an", "A", "al", "at", "sa", "af", "ao", "ity", "au", "aa", "l", "am", "ar", "j", "ba", "ac"], "b": ["n", "sb", "bf", "ab", "bar", "db", "ib", "i", "r", "m", "bi", "fb", "rb", "by", "mb", "ob", "f", "br", "bc", "gb", "t", "nb", "B", "bb", "v", "eb", "base", "cb", "l", "bp", "j", "y", "bs", "ba"], "c": ["ec", "ce", "lc", "n", "con", "x", "err", "p", "cont", "cd", "g", "ct", "rc", "r", "tc", "m", "z", "h", "cur", "result", "f", "bc", "t", "mc", "dc", "can", "e", "v", "nc", "cp", "ch", "cc", "co", "cb", "cu", "l", "cl", "u", "cs", "cm", "cr", "cf", "C", "ac"], "d": ["fd", "n", "x", "ld", "p", "db", "cd", "g", "di", "i", "dh", "r", "w", "m", "z", "h", "result", "dt", "done", "f", "df", "dy", "t", "dc", "dat", "da", "dr", "de", "v", "e", "ad", "s", "dx", "D", "l", "dd", "du", "sd", "dra", "j", "k", "data", "dict", "ds"]}}
{"code": "import sys, re\\nfrom collections import deque, defaultdict, Counter\\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees#, log2\\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\\nfrom operator import itemgetter, mul\\nfrom copy import deepcopy\\nfrom string import ascii_lowercase, ascii_uppercase, digits\\nfrom bisect import bisect, bisect_left, insort, insort_left\\nfrom fractions import gcd\\nfrom heapq import heappush, heappop\\nfrom functools import reduce\\ndef input(): return sys.stdin.readline().strip()\\ndef INT(): return int(input())\\ndef MAP(): return map(int, input().split())\\ndef LIST(): return list(map(int, input().split()))\\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\\nsys.setrecursionlimit(10 ** 9)\\nINF = float('inf')\\nmod = 10**9 + 7\\n#from decimal import *\\n\\nB = INT()\\nS = input()\\nK = INT()\\n\\nans = \"\"\\nfor x in S:\\n\tif x != S[K-1]:\\n\t\tans += \"*\"\\n\telse:\\n\t\tans += S[K-1]\\nprint(ans)", "target": "652", "substitutes": {}}
{"code": "n = int(input())\\ns = input()\\n\\nans_list = []\\nfor i in range(n):\\n    ans = 0\\n    x = list(set(s[:i]))\\n    y = list(set(s[i:]))\\n    for j in range(len(x)):\\n        if x[j] in y:\\n            ans += 1\\n    ans_list.append(ans)\\n\\na = max(ans_list)\\nprint(a)", "target": "575", "substitutes": {"n": ["N", "net", "nt", "ni", "ln", "d", "p", "en", "names", "ne", "sn", "c", "m", "z", "ns", "o", "nl", "num", "t", "nia", "len", "nb", "no", "mn", "na", "nc", "nan", "nu", "nw", "nn", "number", "l", "np", "network"], "s": ["sb", "ys", "str", "ats", "js", "p", "spec", "w", "sys", "c", "ts", "z", "south", "ns", "m", "ies", "rs", "ses", "ins", "sl", "h", "ms", "ls", "b", "sp", "t", "ss", "S", "v", "e", "gs", "sq", "sa", "sv", "xs", "sts", "q", "sis", "cs", "se", "os", "ds", "ps", "bs"], "ans_list": ["ans64lists", "an_listed", "ansenfull", "ans2listed", "an_list", "ANS_total", "ans_queue", "ansedqueue", "ansedstack", "ans_listed", "acs_queue", "ans_print", "ansenlist", "ans64list", "ansetlist", "ans2List", "ans_stack", "ANS_lists", "ANS_list", "ans64total", "acs_stack", "ansentotal", "ANS_full", "ansetelist", "ans2elist", "ans64full", "acs_list", "ans_full", "ans_total", "ansetlisted", "an_elist", "ans_elist", "an_List", "ansedprint", "ans2list", "ans_List", "ans_lists", "ansenlists", "ansedlist", "ansetList", "acs_print"], "i": ["mi", "xi", "ia", "ci", "gi", "p", "di", "ai", "I", "c", "z", "m", "bi", "ic", "ix", "o", "ip", "ind", "f", "b", "ri", "si", "li", "ii", "v", "e", "ti", "im", "zi", "ini", "ui", "q", "l", "pi", "index", "ij", "ik", "iri", "hi"], "ans": ["ANS", "ants", "ats", "ean", "anon", "aus", " Ans", "ns", "ann", "rans", "man", "mas", "anas", "ks", "offs", "ins", "ras", "vers", "ons", "ms", "amps", "annot", "trans", "ls", "pan", "ents", "ens", "cas", "anc", "can", "an", "posts", "anks", "jas", "anes", "oss", "aps", "eps", "ran", "nas", "aos", "yes", "ads", "arts", "cs", "os", "lan", "mt", "ds"], "x": ["wx", "xi", "ex", "xe", "xes", "ux", "xc", "xa", "X", "rx", "ox", "z", "xxxx", "xt", "xml", "ic", "ix", "tx", "ax", "xd", "v", "fx", " xx", "xy", "xs", "mx", "co", "inx", "nex", "xx", "l", "yx", "lex", "xp", "xf"], "y": ["sy", "ys", "yer", "p", "oy", "z", "set", "ies", "my", "ny", "yi", "ble", "vy", "py", "ye", "sky", "hy", "yk", "b", "t", "ot", "uy", "isy", "v", "yn", "e", "iy", "xy", "et", "yt", "Y", "yy", "xx", "hot", "k", "ay", "ym"], "j": ["json", "uj", "ja", "aj", "g", "jp", "kid", "job", "jc", "oj", "z", "c", "jj", "note", "jl", "f", "b", "br", "J", "bj", "key", "ji", "kj", "v", "jas", "obj", "ch", "jump", "q", "dj", "k", "ij"], "a": ["ia", "sta", "ab", "ta", "d", "xa", "ai", "r", "c", "ma", "ga", "o", "ea", "pa", "aaa", "la", "act", "b", "t", "alpha", "da", "na", "an", "A", "sa", "ao", "sha", "au", "oa", "aos", "aa", "am", "area", "ca"]}}
{"code": "from collections import deque\\n\\nn, q = [int(_) for _ in input().split()]\\nprocesses = deque([tuple(input().split()) for i in range(n)])\\n\\ntime = 0\\nwhile processes:\\n    process = processes.popleft()\\n\\n    if int(process[1]) <= q:\\n        time += int(process[1])\\n        print(process[0], time)\\n\\n    else:\\n        time += q\\n        processes.append((process[0], int(process[1]) - q))\\n\\n", "target": "745", "substitutes": {"n": ["a", "nr", "N", "x", "nt", "d", "p", "ne", "g", " nan", "w", "c", " name", "m", "ns", "z", "note", "nl", "h", " ng", "f", "num", " gn", "t", "count", "nb", "mn", "ot", "pid", "na", "v", "nc", " ns", "nan", "size", "nn", "number", "l", " fn", " p", "network", "ng", "j", "k"], "q": ["aq", "qv", "x", "max", "queue", "p", "ue", "g", "iq", "qu", "qt", "quant", "quality", "r", "length", "c", "m", "z", " Q", "qi", "query", "quiet", "f", "b", "quit", "Q", "v", "sq", "qq", "eq", "qa", "qual", "ch", "it", "print", "dq", "l", "que", "u", "k", "y", "qs", "quer"], "_": [" self", " I", "self", " e", " of", " the", "p", "name", "iq", "w", "r", "length", " pre", "z", "m", " all", "status", " name", "h", "ip", "ind", " int", "val", " ip", "pri", "tu", "pid", "na", "v", "all", " new", "un", "msg", " each", "new", "tmp", "il", "line", "id", "index", " line", "ik", " un"], "processes": ["responsed", "programanes", "methodedes", "methodpes", "programedes", "processanes", "procers", "processed", "processingpes", "programers", "responses", "processingedes", "processedes", "processingives", " processedes", " processses", "proces", "programes", "procanes", " processees", "responsanes", "processingees", "procales", "Processes", " processales", "processers", "processales", "Processses", "processinges", "procives", "Processed", " processers", "processees", "procedes", "processives", "responsses", "methodes", "procees", "processses", "processingales", "procpes", "Processanes", " processanes", "methodives", " processed", "processpes"], "i": ["x", "p", " j", "I", "iter", "r", "c", "m", "z", "ix", "ip", "ind", "b", "t", "io", "li", "key", "im", "it", "l", "id", "j", "k"], "time": ["history", "x", "seconds", "money", "context", "offset", "port", "trust", "view", "trip", "clock", "etime", "value", "start", "length", "period", "ts", "age", "weight", "tc", "rate", "dev", "tim", "window", "message", "step", "speed", "second", "runtime", "track", "duration", "t", "count", "thread", "frequency", "memory", "depth", "delay", "event", "tt", "date", "now", "times", "size", "counter", "ime", "timeout", "Time", "timer", "activity", "trace", "TIME"], "process": ["processing", "channel", "call", "script", "pair", "option", "point", "component", "frame", "run", "method", "connect", "complex", "job", "position", "pre", "object", "commit", "condition", "cess", "make", "step", "second", "flow", "display", "session", "product", "processor", "part", "project", "form", "thread", "record", "parse", "remote", "check", "worker", "post", "cp", "execute", "app", "do", "then", "proc", "command", "service", "Process", "program", "task", "package", "link", "function"]}}
{"code": "import itertools\\nfrom collections import deque,defaultdict,Counter\\nfrom itertools import accumulate\\nimport bisect\\nfrom heapq import heappop,heappush,heapify\\nimport math\\nfrom copy import deepcopy\\nimport queue\\nimport numpy as np\\n# sympy as syp(\u7d20\u56e0\u6570\u5206\u89e3\u3068\u304b)\\nMod = 1000000007\\nfact = [1, 1]\\nfactinv = [1, 1]\\ninv = [0, 1] \\nfor i in range(2, 10**5 + 1):\\n    fact.append((fact[-1] * i) % Mod)\\n    inv.append((-inv[Mod % i] * (Mod // i)) % Mod)\\n    factinv.append((factinv[-1] * inv[-1]) % Mod)\\n    \\ndef cmb(n, r, p):\\n    if (r < 0) or (n < r):\\n        return 0\\n    r = min(r, n - r)\\n    return fact[n] * factinv[r] * factinv[n - r] % p\\n    \\ndef sieve_of_eratosthenes(n):\\n    if not isinstance(n,int):\\n        raise TypeError(\"n is not int\")\\n    if n<2:\\n        raise ValueError(\"n is not effective\")\\n    prime = [1]*(n+1)\\n    for i in range(2,int(math.sqrt(n))+1):\\n        if prime[i] == 1:\\n            for j in range(2*i,n+1):\\n                if j%i == 0:\\n                    prime[j] = 0\\n    res = []\\n    for i in range(2,n+1):\\n        if prime[i] == 1:\\n            res.append(i)\\n    return res\\n\\n \\nclass UnionFind:\\n    def __init__(self,n):\\n        self.parent = [i for i in range(n+1)]\\n        self.rank = [0 for i in range(n+1)]\\n    \\n    def findroot(self,x):\\n        if x == self.parent[x]:\\n            return x\\n        else:\\n            y = self.parent[x]\\n            y = self.findroot(self.parent[x])\\n            return y\\n    \\n    def union(self,x,y):\\n        px = self.findroot(x)\\n        py = self.findroot(y)\\n        if px < py:\\n            self.parent[y] = px\\n        else:\\n            self.parent[px] = py\\n \\n    def same_group_or_no(self,x,y):\\n        return self.findroot(x) == self.findroot(y)\\n\\ndef main():  #startline-------------------------------------------\\n    n, k = map(int, input().split())\\n    a=list(map(int, input().split()))\\n    a.sort()\\n    ans = 0\\n    for i in range(n - k + 1):\\n        t = cmb(n - i - 1, k - 1, Mod)\\n        ans += (a[n - i - 1] * t % Mod - (a[i] * t % Mod)) % Mod\\n        \\n    print(ans%Mod)\\nif __name__ == \"__main__\":\\n    main() #endline===============================================", "target": "36", "substitutes": {}}
{"code": "from collections import deque\\nfrom heapq import heapify,heappop,heappush,heappushpop\\nfrom copy import copy,deepcopy\\nfrom itertools import permutations,combinations\\nfrom collections import defaultdict,Counter\\nfrom pprint import pprint\\n\\ndef myinput():\\n    return map(int,input().split())\\n\\ndef mycol(data,col):\\n    return [ row[col] for row in data ]\\n\\ndef mysort(data,col):\\n    data.sort(key=lambda x:x[col],reverse=False)\\n    return data\\n\\ndef mymax(data):\\n    M = -1*float(\"inf\")\\n    for i in range(len(data)):\\n        m = max(data[i])\\n        M = max(M,m)\\n    return M\\n\\ndef mymin(data):\\n    m = float(\"inf\")\\n    for i in range(len(data)):\\n        M = min(data[i])\\n        m = min(m,M)\\n    return m\\n\\nclass UnionFind():\\n    # parents\u306f\u300c\u8981\u7d20\u304c\u6839\u306e\u5834\u5408\u306b\"\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u6570*(-1)\"\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\u300d\\n    def __init__(self, n):\\n        self.n = n\\n        self.parents = [-1] * n\\n    # \u8981\u7d20x\u304c\u5c5e\u3059\u308bgroup\u306e\u6839\u3092\u8fd4\u3059\\n    def find(self, x):\\n        if self.parents[x] < 0:\\n            return x\\n        else:\\n            self.parents[x] = self.find(self.parents[x])\\n            return self.parents[x]\\n    # \u8981\u7d20x\u304c\u5c5e\u3059\u308bgroup\u3068\u8981\u7d20y\u304c\u5c5e\u3059\u308bgroup\u3092\u4f75\u5408\u3059\u308b\\n    def union(self, x, y):\\n        x = self.find(x)\\n        y = self.find(y)\\n\\n        if x == y:\\n            return\\n\\n        if self.parents[x] > self.parents[y]:\\n            x, y = y, x\\n\\n        self.parents[x] += self.parents[y]\\n        self.parents[y] = x\\n    # \u8981\u7d20x\u304c\u5c5e\u3059\u308bgroup\u306e\u30b5\u30a4\u30ba\uff08\u8981\u7d20\u6570\uff09\u3092\u8fd4\u3059\\n    def size(self, x):\\n        return -self.parents[self.find(x)]\\n    # \u8981\u7d20x,y\u304c\u540c\u3058group\u306b\u5c5e\u3059\u308b\u304b\u3092True\u304bFalse\u3067\u8fd4\u3059\\n    def same(self, x, y):\\n        return self.find(x) == self.find(y)\\n    # \u8981\u7d20x\u304c\u5c5e\u3059\u308bgroup\u306b\u5c5e\u3059\u308b\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\\n    def members(self, x):\\n        root = self.find(x)\\n        return [i for i in range(self.n) if self.find(i) == root]\\n    # \u5168\u3066\u306e\u6839\u306e\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\\n    def roots(self):\\n        return [i for i, x in enumerate(self.parents) if x < 0]\\n    # group\u306e\u6570\u3092\u8fd4\u3059\\n    def group_count(self):\\n        return len(self.roots())\\n    # {\u30eb\u30fc\u30c8\u8981\u7d20: [\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u306e\u30ea\u30b9\u30c8], ...}\u306e\u8f9e\u66f8\u3092\u8fd4\u3059\\n    def all_group_members(self):\\n        return {r: self.members(r) for r in self.roots()}\\n    # \u30eb\u30fc\u30c8\u8981\u7d20: [\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u306e\u30ea\u30b9\u30c8]\u3092\u6587\u5b57\u5217\u3067\u8fd4\u3059\\n    def __str__(self):\\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\\n\\nn,k,l = myinput()\\npq = [ list(myinput()) for _ in range(k) ]\\nrs = [ list(myinput()) for _ in range(l) ]\\n\\nuf1 = UnionFind(n)\\nfor i in range(k):\\n    p = pq[i][0]\\n    q = pq[i][1]\\n    uf1.union(p-1,q-1)\\n\\nuf2 = UnionFind(n)\\nfor i in range(l):\\n    r = rs[i][0]\\n    s = rs[i][1]\\n    uf2.union(r-1,s-1)\\n\\nd = defaultdict(lambda: 0)\\n# print(d)\\nfor i in range(n):\\n    d[(uf1.find(i),uf2.find(i))] += 1\\n# print(d)\\nfor i in range(n):\\n    ans = d[(uf1.find(i),uf2.find(i))]\\n    print(ans)", "target": "21", "substitutes": {"data": ["json", "n", "x", "ops", "table", "p", "split", "value", "r", "batch", "ns", "window", "res", "default", "empty", "block", "na", "new", "dd", "mem", "text", "Data", "content", "history", "open", "self", "test", "this", "full", "ata", "read", "input", "time", "auto", "da", "results", "params", "xy", "collection", "error", "rows", "join", "array", "draw", "users", "chain", "next", "load", "nt", "str", "d", "db", "names", "series", "raw", "items", "DATA", "query", "values", "val", "result", "dat", "form", "record", "all", "cache", "partial", "csv", "ed", "size", "index", "sort", "dict", "apps", "missing", "ro", "name", "view", "zero", "current", "ma", "map", "vals", "details", "info", "by", "done", "t", "rel", "no", "valid", "list", "item", "mat", "defined", "ds", "area"], "col": ["loc", "rot", "con", "mot", "th", "x", "ht", "label", "cat", "table", "p", "column", "name", "COL", "ct", "cell", "c", "fc", "Col", "ctx", "param", "cor", "pool", "val", "cmd", "fn", "tab", "form", "pt", "rol", "fl", " Col", "key", "int", "cos", "cp", "ch", "co", "coll", "var", "prop", "field"], "row": ["rot", "client", "x", "pair", "instance", "ro", "match", "table", "insert", "frame", "view", "name", "ows", "rc", "server", "raw", "cell", "ox", "batch", "set", "rs", "page", "rec", "ob", "form", "record", "key", "post", "tr", "Row", "rown", "roll", "line", "user", "item", "rows", "index", "entry", "ry", "ow"], "M": ["MO", "mi", "N", "T", "CM", "R", "I", "X", "L", "Min", "NM", "RM", "Mi", "Ms", "H", "MM", "MC", "V", "C", "MD", "S", "MAN", "B", "J", "Q", "ML", "G", "P", "A", "MP", "MA", "MS", "D", "MH", "DM", "TM", "AM", "MI", "MN", "MT", "U", "K", "MF", "F", "cm", "PM", "MR", "Data"], "i": ["mi", "ki", "bis", "xi", "gu", "ite", "cli", "gi", "p", "di", "uli", "ai", "I", "r", "c", "bi", "info", "yi", "iti", "ic", "ix", "ski", "ip", "h", "f", "b", "ri", "t", "si", "li", "ii", "ji", "ei", "v", "ti", "adi", "oi", "iy", "im", "it", "zi", "ini", "ui", "phi", "pi", "l", "j", "y", "index", "ij"], "m": ["tm", "mi", "km", "mr", "n", "x", "perm", "me", "dm", "d", "p", "mm", "mu", "fm", "g", "med", "mA", "mmm", "r", "c", "ma", "em", "mut", "man", "message", "min", "rm", "o", "gm", "h", "ms", "mean", "mask", "f", "b", "multi", "mc", "t", "margin", "v", "im", "mx", "mag", "l", "MI", "mem", "MT", "mat", "j", "y", "float", "mt", "cm", "mk"]}}
{"code": "a,b,c=input().split()\\na=int(a)\\nb=int(b)\\nc=int(c)\\ni=0\\nwhile i<10:\\n  i=i+1\\n  c=a*c-b\\n  print(c)", "target": "106", "substitutes": {"a": ["aq", "ce", "n", "x", "ia", "ae", "foo", "ab", "aff", "aj", "ta", "p", "ai", "ak", "r", "ma", " A", "m", "ga", "ea", "la", "aaa", "h", "act", "f", "isa", "alpha", "da", "na", "an", "e", "anta", "all", "v", "A", "al", "ap", "at", "af", "sa", "ao", "ity", "app", "au", "aa", "am", "ar", "es", "er", "area", "ba", "ca", "ac"], "b": ["bis", "n", "sb", "x", "bf", "ab", "bar", "d", "db", "beta", "ib", "blue", "r", "z", "m", "bi", "fb", "rb", "bo", "by", "mb", "be", "ob", "f", "br", "bc", "gb", "t", "nb", "B", "bb", "v", "e", "al", "it", "ch", "eb", "ed", "base", "cb", "l", "bp", "bin", "u", "j", "y", "k", "bound", "bs", "ba"], "c": ["ec", "ce", "lc", "con", "n", "comment", "x", "ac", "ci", "gc", "cont", "d", "p", "unc", "cd", "ct", "rc", "cy", "category", "r", "tc", "z", "m", "fc", "ic", "o", "h", "cur", "cv", "f", "bc", "t", "dc", "mc", "cum", "uc", "sc", "e", "v", "nc", "cin", "cache", "cos", "crit", "cp", "ch", "conv", "cc", "com", "co", "abc", "cb", "cu", "l", "u", "cs", "j", "cm", "cr", "cf", "ca", "C", "chain"], "i": ["mi", "n", "xi", "x", "me", "ci", "gi", "p", "mu", "di", "ai", "I", "m", "bi", "status", "info", "qi", "ic", "ix", "o", "f", "num", "multi", "t", "io", "si", "sim", "li", "ii", "int", "ti", "im", "it", "ini", "ui", "zi", "phi", "pi", "l", "u", "id", "j", "index", "iu", "hi", "init"]}}
{"code": "import math\\ndef combinations_count(n, r):\\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\\n\\nN,M,K = list(map(int,input().split(\" \")))\\n\\nans = 0\\nfor i in range(0,N):\\n    for j in range(0,M):\\n        mul = 2\\n        if i == 0 or j == 0:\\n            mul = 1\\n\\n        ans += mul * (N -i) * (M -j) * (i+j)\\n\\nans *= combinations_count(N*M-2,K-2)\\nans %= 10**9 + 7\\nprint(ans)", "target": "341", "substitutes": {"n": ["a", "x", "nt", "d", "p", "ln", "ne", "g", "sn", "c", "w", "m", "ns", "o", "h", "f", "num", "t", "nb", "no", "mn", "na", "an", "v", "nc", "s", "nan", "nu", "nw", "nn", "l", "q", "k", "rn"], "r": ["a", "nr", "mr", "sr", "ro", "rg", "d", "p", "g", "R", "rc", "re", "w", "c", "m", "rs", "rb", "rm", "o", "h", "rar", "f", "b", "ri", "t", "e", "s", "rt", "q", "l", "ar", "k", "er", "rn", "range", "rd"], "N": ["SN", "CNN", "NS", "NL", "T", "NC", "GN", "NI", "Na", "Ns", "R", "I", "NA", "L", "NM", "NN", "NP", "NR", "CN", "NT", "NH", "H", "O", "V", "NO", "S", "NE", "J", "G", "ND", "Num", "P", "NPR", "A", "NB", "MN", "Ni", "UN", "AN", "TN", "C"], "M": ["MO", "T", "CM", "MK", "MU", "MAT", "My", "R", "I", "JM", "L", "NM", "MX", "m", "Ms", "H", "SM", "MM", "O", "MC", "V", "C", "MD", "S", "MAN", "B", "J", "G", "P", "MP", "MA", "ME", "MS", "D", "MH", "TM", "Y", "MN", "MI", "MT", "U", "LM", "Mom", "MR"], "K": ["Ak", "T", "KR", "MK", "R", "L", "KK", "WH", "H", "FK", "MC", "Kar", "KS", "V", "KC", "PK", "S", "IK", "J", "SK", "Q", "B", "P", "HK", "Mask", "VK", "Y", "UK", "MN", "k", "Z", "KE", "KING", "C"], "ans": ["ANS", "ants", "ats", "ians", "ean", "names", " means", "outs", "acs", "aus", "ros", "us", "aned", "people", "mos", "ates", "ns", "ann", "ums", "rs", "mas", "anas", "ks", "scan", "ins", "offs", "leans", "ons", "ms", "amps", "angs", "mean", "ls", "rans", "ents", "ens", "ations", "uns", "can", "an", "posts", "anks", "iann", "aces", "aps", "anes", "oss", "s", "nan", "nas", "ams", "aos", "yes", "arts", "os", "anos", "stats", "es", "AN", "ds"], "i": ["a", "mi", "ki", "xi", "x", "ci", "gi", "p", "di", "ai", "I", "m", "bi", "ami", "yi", "iti", "ic", "ix", "ip", "iri", "ri", "io", "si", "li", "ii", "ji", "v", "ei", "ti", "oi", "im", "it", "ini", "ui", "zi", "\u0438", "pi", "u", "id", "y", "fi", "ik", "ij", "iu", "hi"], "j": [" dj", "json", "x", "jack", "uj", "ja", "ie", "js", "aj", "p", "jp", "job", "jc", "z", "m", "jj", "o", "jl", "br", "b", "je", "jac", "J", "bj", "li", "ji", "v", "kj", "obj", "it", "q", "dj", "k", "y", "ij"], "mul": ["tmulate", "mmul", "cmUL", "mcul", "mmUL", "cmul", "mutil", "mult", "mmuli", "mutult", "cmuli", "tmul", "mutul", "muli", "tmuli", "cmcul", " mesh", " mulate", "mutesh", "amil", " mil", "amesh", "mesh", "amult", " mUL", " muli", "mmcul", "cmulate", "tmUL", "mil", " mult", "amul", " mcul", "mulate", "mUL"]}}
{"code": "s = input()\\n\\ns = s.replace('BC', 'V')\\n\\nans = 0\\ncnt = 0\\nflag = False\\n\\nfor i in range(len(s)):\\n    if s[i] == 'A':\\n        flag = True\\n        cnt += 1\\n    elif flag and s[i] == 'V':\\n        ans += cnt\\n    else:\\n        flag = False\\n        cnt = 0\\n\\nprint(ans)\\n", "target": "305", "substitutes": {"s": ["a", "n", "sb", "sw", "ys", "str", "ats", "space", "js", "p", "ains", "eds", "g", "aus", "lines", "hs", "c", "ts", "z", "m", "ns", "rs", "input", "tests", "ins", "ords", "h", "ms", "ls", "f", "b", "abs", "t", "S", "ss", "parts", "its", "tes", "als", "bits", "v", "strings", "gs", "sq", "aps", "string", "ws", "gets", "ashes", "sv", "xs", "say", "q", "sts", "rates", "cs", "se", "os", "stats", "qs", "ds", "ps", "bs"], "ans": ["ars", "ANS", "sum", "ants", "ats", "ean", "anon", "eds", "acs", "outs", "urs", "aus", "us", "aned", " Ans", "ns", "vals", "ann", "rans", "rs", "anas", "leans", "offs", "ins", "ks", "ons", "ms", "angs", "flags", "amps", "ids", "ents", "ens", "anc", "uns", "an", "gs", "anks", "aps", "anes", "nas", "ands", "ams", "vs", "ads", "cs", "arts", "ags", "es", "AN", "aints"], "cnt": ["CNT", "Cnz", "account", "cnz", "cNT", "acct", "cct", "ccount", "cnc", "tccount", "rcNT", "tcnc", "rccount", "rcnt", "lcount", "nNT", "nnt", "Ccount", "acnt", "count", "Cnc", " ccount", "acnc", "acpt", " cct", "lnt", "lnz", " cnz", "cpt", "Cct", "acount", "ncount", "tcount", "nount", "tcnt", "Cnt", " cpt", "Count", "nct", "rcount", "lct", "npt"], "flag": ["state", "offset", "ld", "sign", "d", "cloud", "coord", "code", "store", "weight", "age", "set", "wait", "condition", "status", "type", "bird", "FLAG", "ic", "lag", "nl", "tail", "bug", "ground", "flags", "func", "tag", "mask", "level", "cmd", "f", "sp", "bool", "count", "cond", "no", "Flag", "force", "bit", "follow", "e", "list", "lv", "debug", "group", "print", "stage", "ed", "do", "l", "id", "link", "fire", "ag", "member", "fi", "ond", "sync", "field", "start"], "i": ["a", "mi", "xi", "x", "me", "ci", "gi", "di", "uli", "this", "I", "iter", "r", "c", "batch", "bi", "yi", "info", "ic", "ix", "ind", "f", "b", "multi", "si", "li", "ii", "ji", "ori", "ti", "list", "iy", "im", "ch", "it", "zi", "ui", "ini", "\u0438", "q", "pi", "id", "j", "index", "y", "k", "ij"]}}
{"code": "x,y = map(int,input().split())\\ntmp = x\\ncnt = 0\\n\\nwhile tmp <= y:\\n  tmp *= 2\\n  cnt += 1\\n\\nprint(cnt)", "target": "631", "substitutes": {"x": ["wx", "n", "xi", "ex", "d", "p", "xc", "X", "i", "rx", "w", "ox", "z", "m", "xt", "ix", "h", "tx", "f", "b", "xd", "t", "v", "e", "fx", "xy", "xf", "xs", "dx", "q", "l", "xx", "k", "px", "index", "zx"], "y": ["sy", "n", "ys", "ym", "p", "i", "cy", "oy", "sys", "yz", "z", "m", "ly", "ies", "ny", "yi", "vy", "py", "yr", "sky", "b", "t", "uy", "v", "yn", "ey", "gy", "iy", "xy", "yt", "Y", "yy", "fy", "iny", "j", "ay", "ry"], "tmp": ["cmp", "perm", "nt", "nom", "p", "mp", "mult", "test", "zero", "txt", "m", "src", "mut", "my", "old", "img", "total", "ctx", "cur", "elt", "ind", "term", "sp", "t", "count", "gb", "nb", "temp", "ot", "pos", "out", "cache", "obj", "msg", "tt", "xy", "size", "yt", "np", "buff", "yy", "etc", "attr", "mk"], "cnt": ["xcpt", " crc", "uncpt", "xcst", "Cpt", "account", "ucpt", "cct", "acct", "ccount", "unccount", "uncnt", "uncct", "nst", "nnt", "acnt", "count", " ccount", "acpt", " cct", "tcpt", "tcct", "xcrc", "xcnt", "Cct", "cpt", "ucct", "cst", "tcount", "nrc", "ucount", "tcnt", "Cnt", " cpt", "Count", " cst", "ucnt", "crc", "npt"]}}
{"code": "k = int(input())\\ns = input()\\nmod = 10**9 + 7\\n\\nn = 2*10**6 + 1\\nfactorial = [1]\\ninverse = [1]\\npow25 = [1]\\npow26 = [1]\\nfor i in range(1, n+1):\\n    factorial.append(factorial[-1] * i % mod)\\n    inverse.append(pow(factorial[-1], mod - 2, mod))\\n    pow25.append((pow25[-1]*25)%mod)\\n    pow26.append((pow26[-1]*26)%mod)\\n\\ndef comb(n, r, mod):\\n    if n < r or r < 0: return 0\\n    elif r == 0: return 1\\n    return factorial[n] * inverse[r] * inverse[n - r] % mod\\n\\nn = len(s)\\nlength = k + n\\nans = 0\\nfor i in range(n, length+1):\\n    temp = 1\\n    temp *= comb(i-1, n-1, mod)\\n    temp %= mod\\n    temp *= pow25[i-n]\\n    temp %= mod\\n    temp *= pow26[length-i]\\n    temp %= mod\\n    ans += temp\\n    ans %= mod\\nprint(ans)", "target": "539", "substitutes": {"k": ["ck", "km", "ek", "x", "kh", "p", "g", "ak", "ke", "w", "c", "m", "z", "dk", "ks", "o", "kw", "ko", "kb", "b", "num", "t", "key", "v", "ikk", "ku", "q", "kk", "sk", "j", "K", "ik", "y", "ka", "mk", "ac"], "s": ["a", "sb", "ats", "js", "p", "spec", "g", "w", "c", "ts", "m", "ns", "rs", "o", "ins", "h", "ms", "ls", "b", "sp", "t", "S", "ss", "v", "strings", "gs", "string", "sv", "sts", "l", "y", "ds", "ps", "bs"], "mod": ["x", "perm", "sign", "p", "mm", "re", "set", "od", "module", "dev", "ix", "rm", "ms", "log", "ind", "mean", "num", "config", "sim", "exp", "rt", "new", "rand", "sd", "id", "reg", "lex", "cm", "rot", "max", " Mod", "ld", "g", "med", "test", "common", "Mod", "scale", "pre", "m", "dec", "min", "step", "time", "cond", "len", "mn", "poly", "post", "crit", "im", "div", "pro", "rad", "deg", "sum", "modified", "mods", "lib", "d", "component", "rep", "fun", "pad", "mad", "val", "term", "form", "dig", "add", "red", "times", "com", "req", "mag", "pi", "mode", "rd", "rid", "MOD", "ro", "name", "method", "sub", "san", "rat", "rem", "prime", "power", "tag", "ver", "bit", "null", "rank", "orig", "tr", "base", "mun", "j", "month", "comp", "ac"], "n": ["a", "nr", "N", "x", "net", "max", "nt", "d", "p", "en", "on", "name", "ln", "ne", "cn", "g", "dn", "w", "c", "sn", "m", "ns", "z", "ic", "o", "nl", "ren", "ms", " ng", "h", "f", "b", "num", "t", "len", "no", " l", "nor", "mn", "nb", "na", "v", " m", "an", "nc", "e", "nm", "un", " ns", "nan", "nu", "one", "nn", "l", "pi", "number", " N", "u", "ng", "j", "rn", "y", "er"], "factorial": ["history", "ftories", "Factorial", "historial", "factorory", "factsories", "formorial", "ftorial", " factorories", "formomorph", "historm", "factories", "Factorset", "factsular", " factomorph", "factular", "factororial", "Factories", "ctory", "ftory", "factorm", " factorory", "ctories", " factorset", "factory", "factorular", " factular", " factororset", "Factory", "factiform", "factsiform", "factomorph", "factsorm", "factsory", "formories", "factorories", " factories", " factororial", "ctorial", " factiform", "factorset", "factsorial", " factorm", "ftorm", "Factorm", "formory", "ctomorph", " factory", "histiform"], "inverse": ["insversible", "uninversely", "uninversible", "insversion", "uninverse", "Inverse", "inversible", "invo", "uninvert", "uninversion", "INverse", "Inversion", "Invert", "Inversible", " inversion", "inversely", "INversion", " inverted", "uninvo", "inverted", "Invo", "Inverted", "INvert", " invert", "INversely", "insvo", "insverse", " inversely", "insverted", "insvert", "inversion", "invert"], "pow25": [" ponent26", "lpowe24", "poy26", "opow50", "ppower24", "pow50", "poy27", "pow24", "npow5", "lpowe65", "opow75", "opow25", "powe25", "ponent125", "poc25", "pox26", "pow75", "lpow50", "powe24", "power5", "npoy27", "opower5", "pot5", " ponent25", " pow125", "ppower50", "lpowe50", "pod25", "poy25", "poy5", "npoy5", "pow35", "pow5", "pot75", "pot50", "poy75", "power75", "pod35", "powe50", "power50", "pox24", "pox25", "pow27", "lpow65", " pow35", "poc27", "lpow24", "poy50", "opower75", "poc26", "npow26", "power25", "pot25", "pox65", "pox35", "lpowe25", "npoy26", "ponent26", "pox125", "npow27", "opow5", "pod125", "pod26", " ponent35", "ppower65", "opower50", "powe65", "pow65", "npoy25", "ppower25", "lpow25", "poc5", " ponent125", "pox50", "ponent35", "power27", "npow25", "ponent25", "power26", "opower25", "pow125"], "pow26": ["ponent26", "ppow29", "pow36", "ppower29", "Pow24", "ppower36", "ppow26", "Pew24", "poy26", "pow27", "power29", "pew26", "power36", "ponent27", "pew36", "Pow36", "Pow16", "porp24", "pew16", "pow29", "Pew27", "porp26", "poy27", "poy25", "ppower25", "pow24", "pew24", "ppow36", "porp27", "poy16", "power25", "Pew36", "pow16", "ppow25", "Pow25", "Pew16", "Pow26", "pot25", "Pew26", "pew29", "ponent36", "Pew25", "pot26", "pew27", "ppower26", "poy36", "ponent25", "power26", "porp25", "Pow27", "pot36", "power16", "pot29", "pew25", "poy24"], "i": ["a", "mi", "ki", "xi", "x", "ci", "gi", "ir", "d", "p", "di", "ai", "I", "c", "m", "bi", "yi", "ic", "o", "ix", "ip", "h", "ind", "f", "b", "t", "si", "ii", "li", "ji", "v", "int", "ti", "im", "it", "zi", "ini", "l", "pi", "phi", "u", "id", "y", "j", "ik", "ij", "iu"], "r": ["nr", "mr", "sr", "rr", "ro", "err", "d", "p", "run", "g", "R", "rc", "re", "w", "c", "m", "rat", "rs", "rm", "o", "res", "h", "rar", "br", "fr", "ri", "t", "nor", "dr", "e", "ru", "rt", "lr", "ran", "l", "ar", "rand", "reg", "rn", "er", "attr", "cr", "range", "j", "rd"], "length": ["nr", "max", "ln", "ength", "spec", "hang", "L", "long", "w", "position", "z", "m", "full", "type", "total", "shape", "Length", "o", "h", "case", "capacity", "ind", "f", "t", "time", "len", "li", "v", "list", "width", "size", "l", "number", "ll", "pi", "np", "phi", "link", "index", "pp"], "ans": ["arms", "ars", "ANS", "ops", "ants", "ats", "ians", "mods", "actions", "names", "unc", "acs", "aus", "span", "ates", "ns", "ann", "rs", "ks", "mins", "ins", "ons", "ms", "amps", "ls", "ents", "ens", "ations", "ots", "mn", "uns", "comments", "an", "rors", "aces", "terms", "times", "nas", "ands", "aos", "ams", "cs", "oes", "os", "es", "errors", "ds", "ps"], "temp": ["tm", "ulus", "Tem", "ter", "warm", "ta", "p", "unc", "mp", "method", "test", "template", "tc", "current", "ts", "m", "position", "pre", "condition", "ca", "em", "dev", "wr", "tim", "input", "prime", "total", "output", "cap", "cert", "tp", "result", "capacity", "level", "t", "time", "unt", "dat", "pt", "stem", "cum", " temperature", "v", "cache", "Temp", "emp", "ptr", "Temperature", "tr", "tt", "tar", " Temp", "ho", "tmp", "pi", "mem", "index", "tem", "mint", "perature", "sum"]}}
{"code": "N = int(input())\\nstations = [list(map(int, input().split())) for _ in range(N-1)]\\n\\nimport numpy as np\\nfor i in range(N-1):\\n    elapsed_time = 0\\n    for k in range(i, N-1):\\n        c, s, f = stations[k]\\n        # \u51fa\u767a\u524d\u3067\u306e\u6642\u9593\u3092\u6c42\u3081\u308b\\n        if elapsed_time <= s:\\n            wait_time = s - elapsed_time\\n        else:\\n            x = elapsed_time - s\\n            next_train = f * np.ceil(x/f)\\n            wait_time = next_train - x\\n        elapsed_time += wait_time + c\\n    print(int(elapsed_time))\\nprint(0)\\n", "target": "529", "substitutes": {"N": ["SN", "CNN", "Name", "M", "n", "NS", "T", "NV", "GN", "NI", "Ns", "I", "L", "NA", "NM", "Number", "NN", "NP", "NR", "CN", "NT", "ALL", "V", "SIZE", "NO", "NOTE", "Z", "S", "MAN", "NE", "Q", "ND", "Num", "P", "Network", "D", "NB", "MN", "Ni", "K", "F", "AN", "TN", "Note", "REM", "C"], "stations": ["variants", "Stants", "stts", "stalls", "locates", "Stations", "Stversions", "localls", "varials", "stants", "instates", "Stals", "instants", " stts", "locts", "variations", "variversions", "locations", "states", "instversions", "stals", "stversions", " states", "installs", "instts", " stalls", "instations", "instals"], "_": [" self", "x", " the", " t", "name", " j", " all", "ic", "ix", "ip", "val", " x", "key", " __", " each", " index", " p", "j", " key", "ac"], "i": [" ii", "a", "ki", "n", "xi", "x", "gi", "p", "g", "di", "I", "r", "m", "bi", "yi", "iti", "ic", "o", "ip", "h", "b", "t", "si", "li", "ii", "v", "e", "ti", "zi", "ini", "q", "phi", "pi", "l", "id", "j", "y", "ik", "ij", "iu"], "elapsed_time": ["elapsed_memory", "elapsed_duration", "elapse_duration", "elapse_times", "elapseditytimes", "elapsedityduration", "elapseditytime", "elapseditymemory", "elapse_memory", "elapse_time", "elapsed_times"], "k": ["km", "ki", "n", "kn", "x", "kr", "kh", "kl", "p", "g", "kid", "m", "z", "ic", "o", "kw", "ko", "ind", "b", "tk", "t", "key", "kj", "v", "ku", "q", "u", "id", "kk", "j", "y", "K", "ik", "ij", "ka", "sk", "kan", "mk"], "c": ["n", "x", "d", "p", "g", "cn", "ct", "r", "tc", "w", "m", "z", "b", "t", "dc", "count", "v", "e", "cp", "cc", "q", "cs", "y", "cm", "cf", "ca", "C"], "s": ["n", "x", "p", "g", "w", "sn", "r", "ts", "m", "z", "ns", "rs", "sl", "ls", "sp", "t", "ss", "S", "v", "sq", "sa", "st", "sv", "q", "l", "j", "ps"], "f": ["fd", "d", "p", "fm", "g", "fs", "sf", "w", "m", "z", "fc", "fp", "fb", "h", "fa", "fn", "t", "fac", "fl", "ff", "v", "e", "tf", "q", "u", "fi", "F", "cf"]}}
{"code": "while True:\\n    (H, W) = [int(i) for i in input().split()]\\n    if H == W == 0:\\n        break\\n\\n    for a in range(H):\\n        for b in range(W):\\n            print('#', end='') if (a + b) % 2 == 0 else print('.', end='')\\n        print()\\n    print()", "target": "451", "substitutes": {"H": ["M", "Eh", "HD", "SH", "His", "AH", "HS", "HE", "HL", "R", "I", "Ha", "L", "HO", "HI", "WH", "NH", "h", "HR", "DH", "TH", "V", "HH", "B", "G", "HA", "P", "A", "OH", "HK", "Host", "D", "HC", "MH", "HB", "High", "K", "HT", "Hi", "He"], "W": ["WT", "WC", "M", "N", "We", "GW", "MW", "WI", "CW", "WAR", "Win", "TW", "Word", "NW", "WP", "R", "I", "L", "w", "WW", "WH", "VW", "BW", "V", "WA", "Width", "B", "SW", "Wh", "Week", "WB", "A", "Windows", "D", "WM", "NB", "Size", "WE", "DW", "EW", "F", "WS"], "i": ["\u00ed", "n", "xi", "x", "ia", "gu", "gi", "p", "name", "di", "I", "c", "z", "m", "bi", "yi", "qi", "o", "ix", "h", "ip", "ind", "f", "t", "si", "ii", "li", "v", "ei", "ti", "ini", "zi", "l", "pi", "u", "id", "j", "k", "index", "ij", "iu"], "a": ["aq", "x", "ia", "sta", "ae", "to", "ac", "ab", "ta", "ach", "va", "ai", "xa", "w", " A", "c", "ga", "o", "ea", "h", "pa", "la", "f", "an", "e", "A", "al", "at", "sa", "sha", "oa", "au", "aa", "l", "am", "ba", "ca", "ao"], "b": ["bis", "n", "sb", "x", "bf", "ab", "d", "p", "db", "g", "ib", "r", "w", "c", "z", "bd", "m", "bi", "wb", "fb", "rb", "bm", "o", " bi", "be", "ob", "f", "bc", "t", "nb", "B", "bb", "v", "e", "s", "xb", "eb", "base", "cb", "l", "bp", "u", "j", "y", "ba"]}}
{"code": "from collections import defaultdict\\nn,m = map(int,input().split())\\na = list(map(int,input().split()))\\n\"\"\"\\na\u306e\u9023\u7d9a\u5217\u304cM\u306e\u500d\u6570\u3067\u3042\u308c\u3070\u3044\u3044\\ndp[j] := j\u306e\u500d\u6570\u306b\u306a\u308b\u7dcf\u6570.\\n\"\"\"\\ndp = defaultdict(lambda: 0)\\ndp[0] = 1\\ntmp = 0\\nans = 0\\nfor i in range(n):\\n\ttmp += a[i]\\n\tans += dp[tmp%m]\\n\tdp[tmp%m] += 1\\nprint(ans)", "target": "23", "substitutes": {"n": ["nr", "N", "net", "nt", "ni", "gn", " t", "ln", " np", "p", "ne", "cn", " k", "dn", "sn", "c", "ns", " sn", "nl", " ng", " gn", "nia", "nb", " l", "mn", "na", " c", "nc", " ne", "nm", " ns", "nu", "size", "nn", " fn", "l", "np", " p", " N", "j", " out", "nd", " na", " s"], "m": ["tm", "mi", "M", "perm", "pm", "mod", "dm", "d", "p", "mm", "mu", "mp", "g", "r", "c", "ma", "module", "mut", "man", "bm", " M", "o", "gm", "h", "ms", "f", "b", "num", "t", "mc", "mn", "v", "an", "nm", "sm", "vm", "l", "u", "k", "j", "y", "mt", "cm"], "a": ["ia", "sta", "ae", "ac", "ab", "ta", "p", "ana", "ai", "c", "ata", "eas", "ea", "pa", "aaa", "la", "act", "ada", "abs", "b", "alpha", "apa", "an", "att", "A", "al", "ap", "at", "sa", "s", "ao", "au", "oa", "aa", "am", "ar", "ya", "ba", "ca"], "dp": ["pkg", "osp", "pm", "dm", "d", "p", "db", "mp", "vp", "di", "dial", "jp", "dh", "dl", "fp", "pb", "wd", "tp", "pa", "dt", "df", "dc", "dep", "pas", "da", "DP", "wp", "lp", "pd", "dr", "deb", "bet", "cp", "bps", "dq", "dd", "dj", "np", "bp", "pp", "ds", "ps", "dict", "adr"], "tmp": ["tm", "pkg", "cmp", "perm", "nt", "p", "db", "mm", "mp", "jp", "td", "pre", "src", "mut", "img", "prefix", "ctx", "tp", "ms", "ind", "dt", "sp", "t", "nb", "ot", "pos", "out", "tn", "gs", "int", "emp", "obj", "mk", "tt", "st", "cp", "tar", "new", "np", "ott", "etc", "pot", "pi", "j", "eta", "root", "temp", "start"], "ans": ["ars", "ANS", "ants", "ats", "ians", "ints", "names", "eds", "outs", "aus", "ts", "ns", "ann", "rans", "rs", "ums", "ks", "offs", "ins", "ons", "ms", "amps", "ls", "pan", "ens", "uns", "an", "posts", "gs", "anks", "oss", "aps", "s", "nan", "conv", "eps", "nas", "ams", "aos", "vs", "ads", "arts", "os", "es", "ds", "ps"], "i": ["ki", "xi", "x", "gi", "p", "di", "I", "iter", "r", "c", "bi", "qi", "ic", "ix", "ind", "f", "b", "ri", "li", "ii", "ji", "v", "ori", "ti", "s", "it", "im", "zi", "q", "l", "pi", "u", "id", "k", "j", "index", "y", "ij", "iri"]}}
{"code": "import sys\\nsys.setrecursionlimit(10**5)\\nn = int(input())\\nab = [list(map(int,input().split()))for _ in range(n-1)]\\n\\ngraph = [[] for _ in range(n+1)]\\nans = [0]*(n-1)\\nfor i in range(n-1):\\n    graph[ab[i][0]].append((ab[i][1],i))\\n    graph[ab[i][1]].append((ab[i][0],i))\\n\\nvisit = [False]*(n+1)\\ndef dfs(p,c):\\n    color = 1\\n    visit[p] = True\\n    for n,i in graph[p]:\\n        if visit[n] == False:\\n            if color == c:\\n                color += 1\\n            ans[i] = color\\n            dfs(n,color)\\n            color += 1\\n\\ndfs(1,0)\\nprint(max(ans))\\nfor t in ans:\\n    print(t)\\n", "target": "157", "substitutes": {"n": ["N", "x", "net", "nt", "local", "wn", "gn", "ln", "en", "on", "name", "names", "ne", "cn", "norm", "g", "comm", "dn", "long", "sn", "r", "w", "m", "ns", "o", "go", "b", "num", "nia", "fn", "nb", "no", "mn", "na", "an", "v", "yn", "nc", "P", "un", "s", "nan", "none", "node", "nu", "nn", "number", "l", "np", "ll", "yes", "pi", "ng", "network", "y", "j", "pn", "k", "index"], "ab": ["a", "bank", "rib", "hab", "ib", "abl", "ai", "abet", "map", "fab", "AB", "pb", "fb", "rab", "rb", "Ab", "rub", "ob", "abb", "ax", "abs", "b", "abus", "gb", "tab", "bag", "nb", "bb", "av", "conf", "bn", "att", "stab", "aps", "ap", "lab", "af", "aka", "abc", "eb", "app", "au", "ub", "ij", "ag", "attr", "root", "bs", "ac"], "_": ["T", " the", "__", "val", "place", "Se", "pt", "___", "ay"], "graph": ["Graph", "history", "conn", "sb", "igraph", "nt", "path", "gn", "gc", "en", "edge", "dir", "g", "di", "raph", "connect", "gd", "span", "r", "pen", "map", "set", "shape", "wd", "tree", "buf", "vg", "gh", "bag", "out", "bn", "grid", "hist", "gs", " graphs", "adj", "gr", "node", "gen", "group", "dot", "vs", "np", "mem", "layout", "network", "groups", "pn", "paren", "draw", "pg", "storage"], "ans": ["ANS", "ants", "ats", "ians", "gn", "anon", "images", "names", "ana", "outs", "aus", "lines", "sn", "san", "ts", "ns", "vals", "icons", "ann", "anus", "rs", "rans", "anas", "ins", "ons", "ms", "values", "ikes", "ls", "anned", "angs", "ids", "ens", "ots", "uns", "an", "gs", "anks", "anes", "un", "s", "idents", "xs", "nan", "ions", "vs", "cs", "groups", "os", "stats", "es", "AN", "ps", "vers"], "i": ["a", "mi", "xi", "x", "uri", "ni", "gu", "ci", "gi", "di", "ai", "I", "iter", "m", "bi", "info", "yi", "ic", "o", "ix", "ip", "ind", "f", "b", "ri", "io", "si", "iu", "li", "ii", "v", "int", "ti", "im", "it", "zi", "ui", "ini", "q", "l", "pi", "u", "id", "j", "y", "k", "ij", "index", "ik", "iri"], "visit": ["vbit", "visited", "servitable", "Visitter", "servit", "Visits", "vits", "Visitor", "VISit", "vit", "viewitor", "commit", "VISitter", "constit", "commitor", "viewitter", "visitter", "servitor", "veritor", "visitable", "commited", "Visit", "commitable", "vitor", "constited", "viewited", "viewit", "verbit", "verit", "visbit", "constitor", "servited", "VISited", "Visbit", "constitable", "visitor", "visits", "VISitor", "Visited", "verits"], "p": ["a", "pkg", "x", "port", "point", "pard", "pc", "jp", "r", "pre", "m", "pb", "o", "tp", "ip", "pa", "pr", "pu", "pan", "pt", "lp", "pid", "pos", "v", "P", "cp", "it", "ping", "per", "pi", "np", "pat", "id", "j", "pers", "y", "pn", "u", "pp", "pro", "ps", "op"], "c": ["ce", "lc", "cat", "d", "cd", "g", "ct", "rc", "r", "z", "cor", "ic", "col", "h", "f", "b", "mc", "v", "e", "nc", "cin", "cos", "cp", "ch", "cc", "co", "cb", "l", "u", "cs", "k", "y", "ca", "C", "sc"], "color": ["light", "background", "max", "comment", "label", "draw", "state", "cat", "pal", "name", "norm", "cycle", "g", "init", "value", "blue", "green", "r", "scale", "Color", "black", "focus", "status", "type", "hex", "theme", "cor", "olor", "ic", "o", "col", "h", "font", "count", "alpha", "depth", "inner", "style", "white", "fill", "v", "pixel", "border", "red", "cos", "normal", "cache", "cp", "ch", "colored", "char", "co", "stroke", "size", "coll", "l", "COLOR", "cs", "float", "k", "colour", "C", "ac"], "t": ["a", "x", "T", "ta", "d", "gc", "name", "ret", "names", "g", "tw", "span", "w", "txt", "r", "ts", "set", "xt", "type", "o", "ont", "let", "h", "tex", "ton", "them", "f", "ot", "v", "e", "tn", "ti", "tt", "st", "it", "s", "rt", "xs", "opt", "l", "lat", "u", "id", "types", "y", "stats", "text", "trace"]}}
{"code": "while True:\\n    s = input().split(\" \")\\n    a = int(s[0])\\n    op = s[1]\\n    b = int(s[2])\\n    if op == \"?\":\\n        break\\n    elif op == \"+\":\\n        print(a + b)\\n    elif op == \"-\":\\n        print(a - b)\\n    elif op == \"*\":\\n        print(a * b)\\n    else:\\n        print(a // b)", "target": "475", "substitutes": {"s": ["bis", "sb", "aws", "ats", "js", "spec", "g", "hs", "ts", "ns", "details", "rs", "ses", "ins", "sl", "h", "ms", "ls", "abs", "sp", "t", "S", "ss", "parts", "its", "tes", "gs", "sq", "ws", "ims", "sv", "xs", "sts", "sis", "j", "os", "es", "stats", "qs", "ds", "ps", "bs"], "a": ["aq", "n", "x", "ia", "sta", "ae", "to", "ac", "ab", "era", "ta", "p", "g", "ai", "xa", "i", "w", "c", "ma", "el", "eas", "ga", "o", "ea", "la", "aaa", "act", "abs", "t", "auto", "alpha", "da", "apa", "an", "e", "A", "ap", "obj", "at", "sa", "au", "oa", "aa", "am", "ar", "j", "area", "ba"], "op": ["top", "rot", "cmp", "ter", "ops", "ac", "OP", "mod", "p", "mp", "cop", "jp", "typ", "i", "iter", "iop", "tip", "mom", "ox", "m", "ype", "type", "ic", "o", "ip", "ob", "oper", "cmd", "sp", "num", "no", "ot", "ver", "bit", " cop", "exp", "ort", "hop", "ok", "up", "ost", "ap", "eq", "it", "rt", "Op", "opt", "operator", "oop", "pl", "rop", "np", "lat", "j", " Op", "opp"], "b": ["bis", "n", "sb", "ab", "bar", "d", "p", "db", "beta", "g", "ib", "i", "r", "c", "reb", "z", "bi", "wb", "pb", "fb", "rb", "by", "o", "mb", "be", "ob", "f", "bc", "t", "gb", "bool", "nb", "B", "bb", "v", "e", "erb", "eb", "ed", "base", "cb", "bl", "l", "u", "j", "y", "bs", "ba", "back"]}}
{"code": "#import sys\\n#import numpy as np\\nimport math\\n#from fractions import Fraction\\nimport itertools\\nfrom collections import deque\\nfrom collections import Counter\\n#import heapq\\n#from fractions  import gcd\\n#input=sys.stdin.readline\\nimport bisect\\nn,k=map(int,input().split())\\na=list(map(int,input().split()))\\na.sort()\\nz=-1\\np=-1\\nmod=10**9+7\\nans=1\\nfor i in range(n):\\n    if a[i]==0:\\n        z=i\\n    elif a[i]>0:\\n        p=i\\n        break\\na_abs=sorted(a,key=abs,reverse=True)\\nif (p==-1 and k%2==1) or n==k:\\n    for i in range(k):\\n        ans*=a[n-1-i]\\n        ans%=mod\\n    print(ans%mod)\\n    exit()\\nelse:\\n    lp=-1\\n    lm=-1\\n    f=0\\n    for i in range(k):\\n        if a_abs[i]>=0:\\n            lp=i\\n        else:\\n            lm=i\\n            f+=1\\n    if f%2==0:\\n        for i in range(k):\\n          ans*=a_abs[i]\\n          ans%=mod\\n        print(ans)\\n    else:\\n        fp=-1\\n        fm=-1\\n        check_p=False\\n        check_m=False\\n        for i in range(k,n):\\n            if not check_p and a_abs[i]>=0:\\n                fp=i\\n                check_p=True\\n            elif not check_m and a_abs[i]<0:\\n                fm=i\\n                check_m=True\\n            if check_m and check_p:\\n                break\\n        if lp!=-1:\\n            if fp==-1:\\n              for i in range(k):\\n                if i==lp:\\n                  continue\\n                ans*=a_abs[i]\\n                ans%=mod\\n              ans*=a_abs[fm]\\n              ans%=mod\\n            elif fm==-1:\\n              for i in range(k):\\n                if i==lm:\\n                  continue\\n                ans*=a_abs[i]\\n                ans%=mod\\n              ans*=a_abs[fp]\\n              ans%=mod\\n\\n            else:\\n                if a_abs[fm]*a_abs[lm]>=a_abs[fp]*a_abs[lp]:\\n                  for i in range(k):\\n                    if i==lp:\\n                      continue\\n                    ans*=a_abs[i]\\n                    ans%=mod\\n                  ans*=a_abs[fm]\\n                  ans%=mod\\n                else:\\n                  for i in range(k):\\n                    if i==lm:\\n                      continue\\n               \t    ans*=a_abs[i]\\n                    ans%=mod\\n                  ans*=a_abs[fp]\\n                  ans%=mod\\n        else:\\n          for i in range(k):\\n            if i==lm:\\n              continue\\n            ans*=a_abs[i]\\n            ans%=mod\\n          ans*=a_abs[fp]\\n          ans%=mod\\n        print(ans%mod)", "target": "606", "substitutes": {}}
{"code": "while True :\\n\tH, W = map(int, input().split())\\n\tif(H == 0 & W == 0) :\\n\t\tbreak\\n\telse :\\n\t\tfor i in range(H) :\\n\t\t\tfor j in range(W) :\\n\t\t\t\tif((i + j) % 2 == 0) :\\n\t\t\t\t\tprint(\"#\", end = \"\")\\n\t\t\t\telse :\\n\t\t\t\t\tprint(\".\", end = \"\")\\n\t\t\tprint()\\n\t\tprint()\\n", "target": "451", "substitutes": {"H": ["M", "CH", "Eh", "HD", "SH", "His", "GO", "HL", "HS", "HE", "I", "RH", "AV", "HO", "HI", "HTML", "NH", "HR", "h", "DH", "TH", "HH", "B", "J", "G", "HA", "Head", "OH", "Host", "HK", "Han", "HC", "MH", "Her", "HB", "High", "HT", "He"], "W": ["WT", "WC", "M", "N", "We", "WR", "MW", "WI", "CW", "Win", "WAR", "TW", "OW", "WP", "NW", "R", "L", "w", "WW", "WH", "VW", "BW", "Wil", "WA", "V", "Width", "MAN", "SW", "J", "Q", "Week", "WB", "Wh", "B", "D", "WM", "Y", "WE", "DW", "EW", "F", "WS", "Writer"], "i": ["a", "mi", "ki", "xi", "x", "ia", "ci", "gi", "ir", "di", "ai", "I", "bi", "ami", "yi", "iti", "ip", "h", "ind", "f", "si", "ii", "li", "ei", "ti", "im", "it", "ini", "zi", "ui", "q", "phi", "pi", "u", "id", "y", "ij", "iu", "hi"], "j": ["n", "x", "ia", "uj", "ja", "js", "aj", "d", "jp", "r", "jc", "oj", "z", "jj", "h", "jl", "b", "je", "t", "J", "ion", "bj", "li", "ji", "kj", "v", "jas", "obj", "jump", "q", "l", "dj", "y", "k", "ij"]}}
{"code": "import statistics\\n\\nwhile True:\\n    n = int(input())\\n\\n    if n == 0:\\n        break\\n\\n    s = map(int, input().split())\\n\\n    print('{:.5f}'.format(statistics.pstdev(s)))", "target": "683", "substitutes": {"n": ["nr", "N", "nt", "ni", "ln", "p", "norm", "ne", "cn", "i", "nat", "sn", "c", "m", "ns", "nl", "f", "fn", "num", "t", "nb", "no", "nor", "na", "nc", "un", "nan", "nu", "nw", "nn", "number", "l", "np", "j"], "s": ["a", "sb", "services", "ats", "d", "p", "i", "fs", "c", "ts", "m", "ns", "rs", "ses", "ms", "ls", "f", "b", "ids", "t", "S", "ss", "si", "strings", "gs", "xs", "sv", "sts", "l", "stats", "qs", "ds", "ps"]}}
{"code": "#!/usr/bin/env python\\nfrom bisect import *\\n\\nn, m = map(int, input().split())\\np = [0 for _ in range(m)]\\ny = [0 for _ in range(m)]\\nfor i in range(m):\\n    p[i], y[i] = map(int, input().split())\\n\\nd = [[] for _ in range(n)]\\nfor i in range(m):\\n    d[p[i]-1].append(y[i])\\n\\nfor i in range(len(d)):\\n    d[i] = sorted(d[i])\\n\\nls = rs = ''\\ndef complement(nstr):\\n    while len(nstr) != 6:\\n        nstr = '0' + nstr\\n    return nstr\\n\\nfor i in range(m):\\n    ls = complement(str(p[i]))\\n    r = bisect_right(d[p[i]-1], y[i])\\n    rs = complement(str(r))\\n    ans = ls+rs\\n    print(ans)\\n", "target": "225", "substitutes": {}}
{"code": "a, b = map(int, input().split())\\nc, d = a, b\\nl = []\\nm = []\\nn = []\\nt = 0\\nwhile b > 0:\\n    l.append(b%2)\\n    b //= 2\\nk = len(l)\\nfor i in range(k):\\n    m.append(a%2)\\n    a //= 2\\nif d%2 == 1:\\n    l = [0]*(k)\\nif c%2 == 0:\\n    m = [0]*(k)\\nfor i in range(k):\\n    n.append((l[i]+m[i])%2)\\nc = (c+1)//2*2\\nd = (d+1)//2*2\\nif (d-c)%4 == 2 or (d-c)%4 == 3:\\n    n[0] = (n[0]+1)%2\\nfor i in range(k):\\n    t += n[i]*(2**i)\\nprint(t)", "target": "481", "substitutes": {"a": ["x", "sta", "ae", "ab", "p", "ach", "g", "ai", "ak", "acc", "r", "w", "ma", "z", "o", "ea", "aaa", "f", "abs", "alpha", "art", "da", "off", "an", "e", "v", "att", "A", "al", "at", "s", "sa", "app", "au", "oa", "aa", "am", "ar", "u", "j", "ack", "ba", "ca", "ac"], "b": ["sb", "ab", "p", "db", "g", "ib", "blue", "r", "bg", "z", " B", "bi", "fb", "rb", "be", "ob", "f", "br", "bc", "gb", "nb", "B", "bb", "v", "e", "end", "eb", "base", "cb", "bin", "u", "j", "y", "bs", "ba"], "c": ["ce", "lc", "x", "ci", "p", "unc", "cd", "g", "cn", "ct", "rc", "cy", "r", "tc", "z", "fc", "ic", "o", "h", "cur", "f", "bc", "dc", "mc", "e", "v", "cin", "cp", "s", "cc", "co", "cu", "cb", "u", "cs", "y", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["x", "p", "db", "cd", "g", "di", "dn", "td", "dh", "r", "w", "z", "dl", "dev", "dom", "o", "h", "dt", "done", "f", "df", "dc", "da", "dr", "de", "e", "v", "ad", "s", "dp", "D", "do", "dd", "sd", "u", "j", "y", "md", "ds", "nd"], "l": ["loc", "lc", "kl", "tl", "ln", "lt", "p", "ld", "ul", "g", "left", "lb", "L", "r", "ml", "dl", "el", "o", "nl", "sl", "la", "ls", "jl", "f", " L", "hl", "len", "rl", "lo", "lp", "li", "fl", "list", "all", "al", "lv", "s", "ell", "lr", "ol", "bl", "ll", "pl", "le", "isl"], "m": ["tm", "mi", "M", "mr", "pm", "dm", "p", "mm", "mo", "mu", "mp", "fm", "g", "r", "ma", "ml", "z", "em", "bm", "rm", "o", "gm", "h", "ms", "f", "arm", "mc", "mn", "v", "om", "sm", "vm", "s", "mun", "am", "u", "j", "md", "cm", "mt", "hm"], "n": ["nr", "N", "nt", "gn", "ln", "p", "en", "ne", "cn", "g", "dn", "r", "w", "sn", "z", "ns", "o", "nl", "num", "fn", "nb", "nor", "mn", "out", "na", "an", "v", "e", "nc", "nm", "s", "nu", "nn", "np", "j", "y", "pn"], "t": ["T", "nt", "ta", "p", "g", "test", "typ", "target", "r", "wt", "w", "tc", "ts", "total", "o", "te", "tp", "tree", "h", "dt", "tg", "f", "pt", "ot", "tu", "out", "v", "e", "at", "tt", "tr", "s", "st", "rt", "it", "u", "j", "y", "vt", "mt", "trace"], "k": ["ck", "ki", "ek", "kn", "kr", "kh", "kl", "ijk", "p", "g", "kar", "ak", "kid", "ke", "r", "z", "dk", "ks", "kw", "ko", "kind", "kb", "yk", "tk", "kok", "kj", "ikk", "ku", "kt", "wk", "q", "kk", "ka", "sk", "K", "j", "ik", "kan", "mk", "unk"], "i": ["mi", "ki", "xi", "x", "ia", "uri", "me", "gu", "ci", "gi", "p", "di", "ai", "I", "r", "bi", "ami", "qi", "info", "yi", "ic", "o", "ski", "ix", "ip", "f", "ri", "io", "si", "li", "ii", "ji", "ei", "e", "v", "ti", "ori", "int", "oi", "iy", "im", "it", "s", "zi", "ini", "ui", "q", "pi", "il", "phi", "u", "y", "j", "ik", "fi", "ij", "iu", "index"]}}
{"code": "n=int(input())\\nh=[int(i) for i in input().split()]\\nans=0\\nhh=[]\\nfor i in h:\\n    hh.append(i)\\n    if i==max(hh):\\n        ans+=1\\nprint(ans)", "target": "26", "substitutes": {"n": ["nr", "N", "nt", "ni", "d", "p", "ne", "cn", "sn", "m", "z", "ns", "o", "nl", "b", "num", "t", "nb", "mn", "na", "v", "nc", "nu", "nn", "q", "l", "j", "k"], "h": ["ht", "th", "sh", "ith", "kh", "p", "ach", "hz", "hal", "dh", "hs", "m", "ih", "rh", "H", "ah", "bh", "b", "hl", "hp", "gh", "oh", "has", "his", "hw", "ha", "ph", "ch", "he", "hr", "here", "hd", "q", "l", "ho", "hi", "hm"], "i": ["a", "mi", "\u00ed", "xi", "x", "ki", "uri", "iii", "gu", "ci", "gi", "p", "di", "ai", "I", "c", "m", "bi", " di", "yi", "qi", "iti", "ic", "ix", "o", "iri", "ip", " bi", "f", "ri", "si", "ii", "li", "ji", "v", "e", "int", "ti", "oi", "ei", "adi", "im", "it", "ini", "zi", "\u0438", "l", "phi", "pi", "ati", "u", "id", "j", "index", "fi", "ij", "y", "iu", "hi"], "ans": ["a", "ars", "x", "ANS", "ants", "ats", " means", "outs", "ai", "ros", "aus", "us", "ts", " Ans", "ns", "ann", "rans", "rs", "ks", "scan", "ins", "offs", "ons", "ms", "angs", "amps", "pan", "ens", "ots", "uns", "an", "iann", "oss", "s", "nan", "ran", "vs", "ads", "arts", "cs", "os", "lan"], "hh": ["lf", "ith", "mph", "hou", "phy", "dylib", "hab", "hz", "hm", "dh", "hs", "hn", "ih", "zh", "hu", "hhhh", "ah", "igh", "bh", "hy", "uh", "HH", "hl", "gh", "elsh", "hops", "iah", "roth", "oh", "qq", "udd", "his", "hw", "ha", "he", "hr", "hd", "het", "phi", "ho", "kk", "tz", "hi", "hhh", "HHHH", "Oh"]}}
{"code": "def gcd(a, b):\\n    while(b > 0):\\n        a, b = b, a % b\\n    return a\\nimport sys\\nfor line in sys.stdin:\\n    a, b = map(int, line.split())\\n    g = gcd(a, b)\\n    print(g, a * b // g)", "target": "604", "substitutes": {"a": ["aq", "aut", "n", "ia", "sta", "ae", "ac", "ab", "ra", "d", "p", "aj", "ach", "ai", "i", "acc", "w", "r", "c", "ma", " A", "z", "m", "window", "ga", "o", "ea", "la", "aaa", "pa", "act", "f", "\u00e4", "abs", "t", "alpha", "da", "na", "an", "e", "v", "all", "al", "A", "at", "sa", "app", "au", "oa", "ed", "aa", "l", "pi", "am", "ar", "area", "ack", "ba", "ca"], "b": ["bis", "bu", "sb", "n", "ab", "lib", "d", "p", "db", "bar", "beta", "ib", "i", "value", "r", "bg", "c", "m", "z", "bi", "wb", "fb", "rb", "h", "be", "ob", "bh", "f", "br", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "s", "it", "eb", "base", "cb", "l", "bp", "number", "u", "j", "y", "big", "bs", "ba"], "line": ["ine", "lf", "ln", "on", "name", "ines", "file", "code", "inline", "Line", "lines", "age", " lines", "eline", "page", "message", " row", "liner", "ole", "word", " slide", "block", "lo", "li", " lin", " inline", " Line", "row", "string", "inter", "LINE", "phrase", " LINE", "handle", "l", "le", "sample", "link", "INE", "lin", "entry", " linen"], "g": ["gg", "n", "ge", "gu", "gi", "gc", "d", "p", "i", "gd", "r", "bg", "c", "m", "z", "ig", "ga", "gt", "gp", "gm", "h", "go", "f", "gb", "t", "G", "v", "e", "gs", "gr", "s", "group", "gain", "l", "gam", "fg", "u", "y", "mg"]}}
{"code": "x,y,a,b,c=map(int,input().split())\\np=sorted(list(map(lambda x:int(x)*-1,input().split())))\\nq=sorted(list(map(lambda x:int(x)*-1,input().split())))\\nr=sorted(list(map(lambda x:int(x)*-1,input().split())))\\nimport heapq\\nv=p[:x]+q[:y]+r\\nheapq.heapify(v)\\nans=0\\nfor i in range(x+y):\\n  ans+=heapq.heappop(v)\\nprint(-ans)", "target": "104", "substitutes": {"x": ["n", "xe", "left", "X", "z", "batch", "ctx", "window", "ix", "e", "exp", "fx", "dx", "id", "lex", "xp", "wx", "any", "m", "xxxx", "my", "xt", "o", "tx", "xy", "s", "inx", "l", "chain", "ce", "client", "ux", "ct", "xa", "ox", "oxy", "xml", "hex", "xxx", "h", "xd", "search", " xx", "xs", "xb", "hello", "index", "ross", "xi", "ex", "xes", "xc", "rx", "w", "iox", "ax", "f", "t", "width", "at", "nex", "xx", "lat", "yx", "j", "px", "xf", "ac"], "y": ["n", "asy", "ys", "yd", "wy", "cy", "oy", "yo", "z", "m", "ies", "ly", "my", "ny", "yi", "vy", "o", "py", "ye", "col", "h", "yr", "hy", "axy", "t", "yl", "uy", "yn", "ey", "iy", "xy", "ry", "yt", "Y", "yy", "l", "hot", "j", "ay", "ym"], "a": ["n", "ae", "ac", "ab", "ta", "d", "m", "o", "ax", "t", "alpha", "da", "an", "e", "A", "at", "s", "sa", "aa", "l", "ba", "ca", "ao"], "b": ["n", "ab", "d", "beta", "g", "bg", "m", "bi", "rb", "be", "abb", "br", "bc", "B", "bb", "e", "eb", "cb", "aa", "bs", "ba", "ca"], "c": ["ec", "ce", "lc", "n", "d", "cd", "g", "tc", "m", "z", "o", "col", "h", "bc", "t", "dc", "e", "s", "cp", "cc", "cb", "l", "cs", "cm", "cr", "cf", "ca", "C"], "p": ["pkg", "pub", "mp", "pc", "jp", "pe", "pb", "par", "py", "tp", "pa", "pr", "part", "pt", "lp", "pos", "P", "ap", "cp", "ph", "per", "pl", "pi", "np", "pat", "op", "pp", "pro", "ps", "pg"], "q": ["ck", "gg", "n", "pkg", "ql", "ues", "ue", "g", "iq", "qu", "qt", "requ", "z", "qi", "query", "cur", "f", "quit", "Q", "sq", "qq", "eq", "qa", "cp", "ch", "s", "dq", "que", "u", "quest", "qs"], "r": ["rus", "n", "sr", "mr", "rr", "ro", "ir", "d", "g", "R", "rc", "re", "rx", "w", "m", "z", "rs", "rb", "vr", "fr", "f", "rl", "dr", "e", "ru", "gr", "rt", "ar", "j", "er", "cr", "rd"], "v": ["qv", "n", "void", "vv", "d", "NV", "en", "vi", "vp", "tv", "g", "value", "w", "uv", "vector", "m", "ev", "o", "h", "values", "V", "cv", "f", "vg", "iv", "av", "nv", "e", "lv", "vm", "sv", "ve", "vs", "l", "ov", "u", "j", "vt", "wire"], "ans": ["ars", "ANS", "ants", "ats", "ians", " means", "eds", "acs", "ows", "aus", "ros", "san", "ns", "ann", "ums", "rans", "rs", "anas", "ks", "ins", "ons", "ms", "amps", "ls", "ents", "ids", "ens", "cas", "anc", "uns", "can", "an", "rors", "posts", "anks", "aps", "anes", "oss", "nan", "nas", "ams", "aos", "ran", "vs", "ads", "arts", "cs", "os", "lan", "vers"], "i": ["n", "gi", "g", "I", "z", "m", "h", "ip", "ind", "f", "li", "e", "ti", "it", "l", "u", "id", "k", "j"]}}
{"code": "def main():\\n    n = int(input())\\n    p_lst = list(map(int, input().split()))\\n    count = 0\\n\\n    tmp = 0\\n    for i in range(n):\\n        p = p_lst[i]\\n\\n        if p == (i + 1):\\n            if tmp == 1:\\n                tmp = 0\\n            else:\\n                count += 1\\n                tmp += 1\\n        else:\\n            tmp = 0\\n\\n    print(count)\\n\\n\\nif __name__ == '__main__':\\n    main()", "target": "77", "substitutes": {"n": ["nr", "N", "x", "nt", "gn", "ln", "d", "ne", "cn", "sn", "c", "m", "ns", "nl", "num", "t", "nia", "nb", "no", "na", "nc", "nu", "size", "nn", "l", "number", "np", "q", "j", "k", "nd"], "p_lst": ["p_ylng", "p_Lng", "p_elng", "p_plist", "p_dstr", "p_Lst", "p_dst", "p2list", "p2lng", "p_elst", "p_ylnt", "p_lnt", "p_plbl", "p_Lnt", "p_plstr", "p_List", "p2Lst", "p_ylist", "p_dist", "p_dbl", "p_elist", "p2lst", "p2Lng", "p2List", "p_Lbl", "p2Lnt", "p2lnt", "p_plst", "p_list", "p_Lstr", "p_lstr", "p_lng", "p_ylst", "p_elnt", "p_lbl"], "count": ["hold", "th", "comment", "cmp", "nt", "cont", "d", "stat", "name", "test", "ct", "code", "zero", "ount", "start", "length", "c", "total", "ctx", "result", "ind", "b", "num", "t", "cond", "time", "nb", "cum", "force", "amount", "int", "list", "cache", "st", "flag", "found", "size", "counter", "number", "Count", "index", "temp", "sum"], "tmp": ["stop", "cmp", "x", "comment", "perm", "nt", "sum", "offset", "mm", "mp", "test", "this", "td", "length", "m", "mut", "pb", "img", "prefix", "total", "output", "tp", "mb", "snap", "result", "term", "tag", "sp", "num", "t", "pretty", "part", "nb", "alpha", "cum", "pos", "out", "important", "v", "resp", "int", "qq", "cache", "obj", "emp", "mk", "cp", "msg", "tf", "needed", "size", "pi", "np", "timeout", "etc", "j", "attr", "comp", "temp", "start"], "i": ["mi", "xi", "x", "gi", "di", "ai", "I", "r", "c", "m", "bi", "ic", "o", "ix", "ip", "ind", "f", "b", "t", "li", "ii", "ji", "v", "int", "ti", "at", "im", "s", "it", "zi", "q", "phi", "pi", "l", "u", "id", "j", "y", "index", "ij"], "p": ["pkg", "x", "pair", "perm", "d", "mp", "g", "jp", "w", "c", "m", "pai", "tp", "pa", "ip", "h", "f", "b", "sp", "t", "part", "lp", "pos", "v", "P", "cp", "q", "l", "pi", "np", "j", "k", "pp", "pro", "ps"]}}
{"code": "L, R, d = list(map(int, input().split(\" \")))\\n\\ndiff=R//d - (L-1)//d\\n\\nprint(diff)", "target": "156", "substitutes": {"L": ["dL", "M", "N", "NL", "DL", "T", "LIN", "SL", "I", "LC", "X", "LR", "H", "LU", "O", "V", "S", "LT", "B", "J", "G", "P", "RL", "E", "D", "l", "LL", "LE", "U", "LM", "F", "K", "LS", "Z", "C"], "R": ["M", "N", "T", "RG", "X", "I", "r", "RF", "RM", "NR", "Rs", "DR", "RA", "H", "W", "V", "S", "B", "J", "Q", "G", "P", "A", "RL", "E", "RR", "D", " r", "Y", "RO", "MR", "U", "K", "F", "C"], "d": ["a", "n", "load", "ld", "p", "db", "g", "di", "i", "dh", "r", "w", "length", "c", "m", "z", "o", "result", "dt", "done", "f", "b", "df", "t", "da", "ord", "dr", "pd", "out", "v", "e", "debug", "D", "q", "l", "dd", "sd", "u", "j", "y", "data", "ds", "nd", "rd"], "diff": ["dirty", "changed", "cmp", "missing", " difference", "spec", "test", "sup", "Diff", "set", "control", "dl", "old", "change", "different", "distance", "bug", "Delta", "fail", "result", "config", "delete", "rel", "dist", "add", "dust", "wrong", "update", "due", "dx", " differences", "patch", "error", "range", "changes", "relation", "comp"]}}
{"code": "#!/usr/bin/env python3\\nimport sys\\nfrom itertools import chain\\nimport numpy as np\\n\\n# from itertools import combinations as comb\\n# form bisect import bisect_left, bisect_right, insort_left, insort_right\\n# from collections import Counter\\n\\n\\ndef solve(N: int, A: \"List[int]\", B: \"List[int]\"):\\n    A = np.sort(A)\\n    B = np.sort(B)\\n    if N % 2 == 1:\\n        l = A[N // 2]\\n        r = B[N // 2]\\n        return r - l + 1\\n    else:\\n        l2 = A[N // 2 - 1] + A[N // 2]\\n        r2 = B[N // 2 - 1] + B[N // 2]\\n        return r2 - l2 + 1\\n\\n\\ndef main():\\n    tokens = chain(*(line.split() for line in sys.stdin))\\n    # N, A, B = map(int, line.split())\\n    N = int(next(tokens))  # type: int\\n    AB = np.array(list(map(int, tokens)), dtype=np.int32)\\n    A = AB[0::2]\\n    B = AB[1::2]\\n    answer = solve(N, A, B)\\n    print(answer)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n", "target": "203", "substitutes": {}}
{"code": "###template###\\nimport sys\\ndef input(): return sys.stdin.readline().rstrip()\\ndef mi(): return map(int, input().split())\\n###template###\\n\\nN,A, B = mi()\\n\\nif (B-A-1)%2 == 0: print('Borys')\\nelse: print('Alice')\\n", "target": "507", "substitutes": {}}
{"code": "H = int(input())\\ncount = 0\\nwhile H != 1:\\n    H //= 2\\n    count += 1\\nans = 0\\nfor i in range(count +1):\\n    ans += 2 ** i\\nprint(ans)\\n", "target": "153", "substitutes": {"H": ["M", "N", "CH", "T", "HD", "His", "HS", "HL", "HE", "X", "I", "L", "HO", "HI", "NH", "h", "ASH", "V", "Hamilton", "TH", "HH", "S", "B", "Q", "G", "P", "HA", "A", "Head", "OH", "HK", "Host", "Han", "D", "HC", "MH", "Count", "HB", "High", "Hi", "K", "F", "HT", "Z", "He", "C"], "count": ["history", "next", "find", "con", "n", "nt", "state", "consider", "cont", "child", "cycle", "ct", "code", "long", "ount", "start", "length", "c", "current", "z", "batch", "mount", "const", "ind", "act", "cmd", "double", "ctr", "num", "t", "cond", "len", "nb", "cum", "close", "force", "conf", "add", "check", "cache", "ch", "flag", "first", "found", "size", "counter", "Count", "index", "init", "C", "sum"], "ans": ["n", "ANS", "sum", "ants", "ats", "ians", "ean", "ana", "names", "annis", "outs", "aus", "nets", "lets", " Ans", "ts", "ns", "vals", "ann", "rans", "mas", "anas", "ks", "offs", "ins", "wan", "ons", "ms", "amps", "pan", "ents", "ens", "news", "can", "an", "iann", "anks", "oss", "anes", "terms", "s", "idents", "nas", "ran", "aos", "cs", "os", "stats", "lan"], "i": ["mi", "n", "x", "ci", "gi", "g", "di", "ai", "I", "iter", "r", "c", "m", "bi", "ic", "ix", "ip", "ind", "b", "multi", "t", "si", "ii", "li", "v", "e", "ti", "im", "it", "ini", "zi", "q", "l", "pi", "y", "j", "k", "ij"]}}
{"code": "A, B, C = map(int, input().split())\\n\\nprint(C-(A-B)) if C-(A-B) > 0 else print(0)\\n", "target": "140", "substitutes": {"A": ["a", "GA", "M", "T", "API", "Al", "An", "IA", "AH", "AU", "AT", "R", "X", "I", "L", "AL", "ABC", "AB", "App", "AE", "RA", "H", "AA", "As", "AI", "AR", "AS", "S", "G", "This", "P", "HA", "AP", "CA", "At", "E", "D", "AF", "AC", "Array"], "B": ["LB", "M", "N", "BI", "CB", "T", "MB", "Bob", "RB", "BL", "BS", "OB", "Bs", "SB", "R", "Big", "I", "L", "IB", "AB", "Reb", "H", "V", "BT", "Bar", "BC", "BBC", "BE", "S", "J", "Q", "GB", "G", "P", "BB", "Ber", "E", "Bern", "TB", "D", "NB", "BO", "Y", "Bi", "DB", "BA"], "C": ["M", "N", "CB", "T", "CM", "CG", "R", "I", "X", "L", "c", "CI", "CS", "H", "W", "CP", "V", "CT", "O", "S", "BC", "CD", "EC", "CCC", "Q", "G", "CO", "P", "CA", "E", "D", "CC", "Y", "U", "K", "F", "Z"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\n#input\\nN, A, B = map(int, input().split())\\n\\n#output\\nM = min(A, B)\\nm = 0\\nif A+B > N:\\n    m = A+B-N\\nelse:\\n    m = 0\\n\\nprint(M, m, sep = \" \")", "target": "362", "substitutes": {"input": ["str", "path", "select", "util", "put", "utils", "control", "buffer", "read", "format", "output", "log", "f", "config", "io", "form", "feed", "out", "can", "Input", "print", " Input", "q", "reader", "data", "text", " inputs"]}}
{"code": "n = int(input())\\n\\na = []\\nb = []\\nfor i in range(n):\\n    s = input()\\n    x = 0\\n    y = 0\\n    for c in s:\\n        if c == '(':\\n            y += 1\\n        else:\\n            if y >= 1:\\n                y -= 1\\n            else:\\n                x += 1\\n    if x < y: a.append([x, abs(x-y)])\\n    else: b.append([y, abs(x-y)])\\n\\ndef calc(a):\\n    ret = 0\\n    for x, y in sorted(a):\\n        if ret < x: return -1\\n        ret += y\\n    return ret\\n   \\nres1 = calc(a)\\nres2 = calc(b)\\nprint(\"Yes\" if res1 >= 0 and res1 == res2 else \"No\")", "target": "7", "substitutes": {"n": ["nr", "N", "nt", "d", "p", "ne", "g", "sn", "r", "m", "z", "ns", "o", "nl", "num", "t", "nia", "nb", "mn", "na", "v", "e", "nc", "q", "l", "number", "np", "nn", "j", "k"], "a": ["aq", "ia", "sta", "ae", "ab", "p", "ach", "g", "r", "ma", "m", "ga", "o", "ea", "la", "aaa", "h", "f", "t", "parts", "da", "bb", "an", "all", "A", "ap", "al", "at", "sa", "app", "oa", "au", "aa", "l", "am", "ar", "j", "ba", "ca", "ac"], "b": ["sb", "ab", "d", "p", "g", "ib", "r", "m", "z", "bi", "wb", "pb", "fb", "rb", "o", "ob", "f", "bc", "t", "nb", "B", "bb", "v", "e", "cb", "l", "u", "ub", "j", "bs", "ba"], "i": ["ir", " j", "ai", "I", "r", "z", "ic", "ix", "ind", "f", "li", "ii", "e", "ti", "iy", "im", "it", "ini", "l", "id", "j", "k"], "s": ["sb", "seconds", "str", "js", "p", "sub", "g", "series", "w", "ts", "south", "ns", "rs", "ses", "ins", "ls", "f", "sp", "t", "S", "ss", "si", "e", "sq", "steps", "sa", "sv", "xs", "csv", "sis", "cs", "se", "es", "sort", "ds", "ps", "bs"], "x": ["wx", "xi", "ex", "ty", "xe", "point", "p", "on", "ux", "xc", "left", "xa", "X", "rx", "re", "w", "r", "ox", "z", "m", "xt", "step", "ix", "o", "tx", "ax", "f", "xd", "t", "time", "v", "e", "yn", "fx", "width", "xy", "xs", "dx", "xx", "l", "yx", "j", "index", "px", "data", "lex", "xp", "xf"], "y": ["sy", "ty", "ys", "yd", "yer", "p", "d", "ady", "g", "wy", "cy", "r", "oy", "sys", "z", "ly", "ies", "m", "my", "ny", "yi", "vy", "o", "py", "ye", "col", "h", "yr", "sky", "hy", "f", "dy", "axy", "t", "yl", "ot", "uy", "out", "isy", "v", "yn", "e", "ey", "gy", "row", "iy", "xy", "ry", "yt", "Y", "yy", "year", "l", "fy", "xx", "yes", "j", "hot", "ya", "ay", "ym"], "c": ["ec", "lc", "con", "gc", "unc", "cd", "pc", "g", "xc", "code", "ct", "rc", "arc", "r", "cod", "z", "sec", "ic", "o", "col", "f", "vc", "bc", "mc", "icc", "t", "sc", "usc", "v", "nc", "cin", "abc", "\u00e7", "co", "cc", "cu", "l", "etc", "ar", "cs", "C", "ac"], "ret": ["alt", " Ret", "ex", "ter", "nt", "err", "get", "reset", "test", "rev", "fit", "iter", "re", "rx", "ext", "r", "value", "ox", "z", "ref", "read", "gt", "res", "Ret", "val", "term", "rets", "result", "RET", "t", "sat", "dr", "nil", "out", "v", "Return", "red", "at", "xy", "nz", "it", "rez", "rt", "print", "q", "yt", "mem", "j", "vt", "mt", "back", "ry"], "res1": ["ResOne", " res4", "Res11", "Resone", "Res1", "result2", "retOne", "reg3", "reg11", "resone", " resone", " res0", "Res2", "ret4", "resOne", "res11", "ret2", "res0", " res3", " resOne", "result4", " res11", "Res3", "res4", "result0", "result1", "resultone", "ret1", "Res0", "reg1", "resultOne", "res3", "reg2"], "res2": [" resB", "result2", "res02", "Res02", "result3", " res02", " resTwo", "RES1", "ResTwo", "Res2", "resB", "ret2", " res3", "Res3", "RES3", "retTwo", "ret3", "resultB", "RES2", "result1", "resTwo", "RESB", "res3", "ret02"]}}
{"code": "import sys\\ninput = sys.stdin.readline\\n\\na,b,c,k = list(map(int,input().split()))\\nif k<a:\\n    print(k)\\n\\nelif k<=a+b:\\n    print(a)\\nelse:\\n    print(a-1*(k-a-b))\\n", "target": "174", "substitutes": {"input": ["next", "str", "select", "insert", "active", "got", "get", "qt", "raw", "password", "control", "focus", "read", "socket", "output", "quiet", "quick", "cmd", "f", "config", "hidden", "feed", "conf", "add", "out", "Input", "int", "cin", "string", "it", "exec", "csv", "print", "dq", " Input", "q", "command", "sample", "service", "paste", "data", "text", "source", "request"], "a": ["aq", "ce", "n", "x", "ia", "to", "ae", "ac", "ab", "era", "d", "aj", "p", "g", "va", "xa", "i", "r", "w", "ma", "m", "z", "ga", "window", "o", "aaa", "act", "f", "t", "alpha", "out", "na", "an", "e", "A", "ok", "at", "sa", "now", "s", "oa", "au", "aa", "l", "am", "ar", "j", "index", "area", "ba", "ca", "ao"], "b": ["n", "sb", "x", "ab", "d", "p", "db", "beta", "g", "ib", "i", "r", "m", " B", "bi", "fb", "rb", "o", "mb", "h", "be", "f", "bc", "t", "nb", "B", "bb", "v", "e", "s", "eb", "base", "l", "j", "y", "bs", "ba"], "c": ["ce", "n", "x", "ci", "d", "p", "cd", "g", "ct", "r", "m", "z", "f", "bc", "t", "e", "v", "s", "cc", "co", "cb", "l", "cs", "y", "cr", "ca", "C", "ac"], "k": ["ck", "km", "n", "ki", "ek", "kr", "kh", "kl", "ijk", "d", "p", "g", "ak", "ke", "i", "r", "m", "z", "dk", "ks", "o", "kw", "ko", "kind", "kb", "tk", "kok", "t", "conf", "kj", "v", "s", "ikk", "ku", "q", "kk", "ka", "sk", "K", "ik", "j", "y", "mk"]}}
{"code": "l = list(input().split())\\nprint(\"{}{}{}\".format(l[0][0],l[1][0],l[2][0]))\\n", "target": "324", "substitutes": {"l": ["lc", "n", "lu", "x", "league", "ld", "d", "p", "lt", "ln", "g", "i", "L", "long", "r", "c", "m", "ml", "dl", "el", "lit", "o", "nl", "sl", "h", "la", "log", "lay", "ls", "jl", "f", "b", "t", "hl", "lis", "rl", "lists", "lo", "fl", "li", "lam", "lp", "v", "list", "lv", "st", "it", "lang", "bl", "ll", "pl", "le"]}}
{"code": "n = int(input())\\n\\nprice = {1}\\nfor i in range(1, 100):\\n    tmp = 6**i\\n    if tmp > 10**5:\\n        break\\n    price.add(tmp)\\n\\nfor i in range(1, 100):\\n    tmp = 9**i\\n    if tmp > 10**5:\\n        break\\n    price.add(tmp)\\n\\nprice = list(price)\\nprice.sort(reverse=True)\\n\\nINF = 1 << 60\\n\\ndp = [INF] * 2 * 10**5\\ndp[0] = 0\\ndp[1] = 1\\n\\nfor i in range(n + 1):\\n    for p in price:\\n        dp[i + p] = min(dp[i] + 1, dp[i + p])\\n\\nprint(dp[n])", "target": "460", "substitutes": {"n": ["nr", "N", "x", "nt", "ni", "d", "ne", "cn", "g", "dn", "sn", "r", "c", "w", "m", "z", "ns", "o", "nl", "b", "num", "t", "nb", "mn", "amount", "out", "na", "v", "yn", "an", "nc", "nan", "q", "number", "nn", "np", "l", "j", "index", "y"], "price": ["fine", "option", "money", "currency", "point", "frame", "name", "order", "score", "peg", "test", "code", "cycle", "value", "transfer", "position", "scale", "Price", "pe", "trade", " prices", "priced", "type", "total", "change", "power", "priority", "py", "ice", "pr", "case", "level", "count", "time", "market", "grade", "close", "vol", "volume", "style", "pos", "key", "pie", "pixel", "cp", "date", "profit", "pay", "rice", "quote", "fee", "np", "line", "error", "offer", "data", "pro", "rate", "buy", "start"], "i": ["a", "mi", "ki", "xi", "x", "ia", "ci", "gi", "cli", "g", "di", "ai", "I", "iter", "r", "c", "m", "z", "bi", "yi", "iti", "itime", "ic", "ip", "iri", "h", "f", "t", "si", "li", "ii", "ji", "ei", "v", "int", "ti", "oi", "e", "iy", "im", "it", "s", "zi", "ini", "ui", "q", "phi", "pi", "ati", "l", "u", "j", "y", "k", "fi", "ik", "ij", "iu"], "tmp": ["pkg", "cmp", "perm", "nt", "mp", "cop", "this", "sup", "td", "yet", "seed", "tc", "ppo", "txt", "img", "prefix", "prime", "ctx", "shape", "gt", "rb", "tp", "term", "buf", "grow", "sp", "t", "xxxxxxxx", "wp", "dust", "cache", "qq", "emp", "obj", "xy", "cp", "tt", "multipl", "tf", "needed", "rt", "mk", "cb", "proc", "etc", "buff", "np", "pot", "timeout", "attr", "meg", "mint", "temp"], "INF": ["EXFL", " INV", "INI", "InN", "NI", "INV", "Inf", "EXf", "NN", "InV", " INI", "INFL", " INFL", "NZ", "NF", " INf", "EXV", " INN", " INZ", "INN", "INf", "InFL", "InZ", "InF", "EXF", "INZ", "InI"], "dp": ["pkg", "pm", "dm", "d", "db", "mp", "ep", "vp", "jp", "dh", "dl", "fp", "pb", "gp", "bsp", "tp", "pr", "dem", "dt", "df", "oe", "sp", "dep", "dc", "DP", "wp", "lp", "pd", "dr", "xy", "deb", "cp", "bps", "dq", "np", "bp", "dd", "px", "rpm", "pp", "ds", "ps", "rate", "adr"], "p": ["a", "pkg", "ipp", "point", "d", "ep", "pc", "g", "jp", "r", "c", "m", "pe", "fp", "par", "tp", "pa", "ip", " ip", "h", "pu", "sp", "t", "pt", "lp", "pd", "v", "P", "up", "ap", "cp", "yp", "q", "l", "pi", "bp", "np", "item", "j", "op", "k", "pn", "pol", "pp", "ik", "ps", "xp", "y"]}}
{"code": "s = [len(x) for x in input().split('T')]\\nx, y = map(int, input().split())\\n\\nX = set([s[0]])\\nY = set([0])\\n\\nfor dx in s[2::2]:\\n    tX = set()\\n    for Xi in X:\\n        tX.add(Xi-dx)\\n        tX.add(Xi+dx)\\n    X = tX\\n\\nfor dy in s[1::2]:\\n    tY = set()\\n    for Yi in Y:\\n        tY.add(Yi-dy)\\n        tY.add(Yi+dy)\\n    Y = tY\\n\\nif x in X and y in Y:\\n    print('Yes')\\nelse:\\n    print('No')\\n", "target": "753", "substitutes": {"s": ["n", "services", "ats", "js", "d", "p", "spec", "eds", "series", "i", "fs", "w", "c", "ts", "z", "m", "ns", "ies", "rs", "ses", "tests", "ins", "less", "h", "ms", "ls", "ids", "b", "t", "S", "ss", "parts", "args", "strings", "v", "gs", "ws", "gets", "ims", "sv", "xs", "ches", "bes", "sts", "rates", "l", "os", "stats", "ds", "ps", "bs"], "x": ["wx", "n", "xi", "ex", "Ax", "xe", "p", "xes", "ux", "xc", "xa", "i", "rx", "w", "ox", "z", "m", "xt", "ix", "tex", "tx", "ax", "xd", "t", "zx", "v", "Tx", "fx", " xx", "xy", "xs", "mx", "xb", "inx", "xx", "l", "yx", "lex", "px", "index", "xp", "xf"], "y": ["sy", "n", "yd", "idy", "yer", "p", "wy", "cy", "i", "m", "z", "ies", "ly", "ny", "yi", "vy", "o", "py", "ye", "col", "hy", "b", "t", "yl", "uy", "v", "ey", "gy", "iy", "xy", "yt", "yy", "yu", "j", "ay", "ym"], "X": ["M", "IX", "N", "T", "CH", "Int", "Ax", "Win", "TX", "I", "EX", "L", "TY", "CE", "MX", "PH", "RH", "ox", "UX", "OX", "ICE", "Ex", "WH", "W", "ZX", "H", "XY", "V", "TH", "Cross", "Core", "XP", "S", "DX", "XM", "Q", "ML", "Tx", "P", "A", "FX", "XX", "XT", "D", "XL", "TON", "Z"], "Y": ["YD", "N", "M", "CH", "T", "YE", "ES", "EY", "My", "I", "Py", "R", "TY", "YS", "MY", "HY", "IE", "Gy", "YC", "Year", "H", "W", "XY", "O", "V", "TH", "YA", "S", "B", "J", "Ye", "Q", "G", "P", "A", "Value", "E", "YN", "AY", "Yo", "YY", "OT", "Cy", "FY", "By", "HT", "SY", "Any", "Z", "IO", "BY"], "dx": ["ck", "wx", "xi", "Cu", "ady", "wy", "rx", "tick", "ox", "dl", "ctx", "wi", "ix", "cross", "wd", "tri", "XY", "tx", "dt", "feat", "fix", "xd", "ax", "DX", " xx", "fx", "ws", "des", "xy", "xf", "xs", "XX", "zi", "req", "inx", "dq", "xx", "du", "yx", "dj", "px", "Ty", "ds", "xp", "mk", "zx", "draw"], "tX": ["btDX", " tIX", "uIX", "bIX", "tDX", "bDX", "uY", "tWH", "tFix", "toDX", "treeFix", "tREE", "templateFix", " tMX", "toIX", " tFix", "toX", "tUX", "toWH", "tIX", "btWH", "templateX", "otREE", "traceXXX", "templateUX", "tMX", "tXXX", "treeUX", "treeWH", " tUX", "bWH", "btIX", "tXX", " tXXX", "btX", "bX", "uX", "cX", "templateWH", "traceMX", "otMX", " tREE", "traceX", " tWH", "otX", "uXX", "cXX", "treeX", "cY", " tXX", "otXXX", "cIX", "traceREE"], "Xi": ["xi", "Ax", "VI", "Cu", "Na", "xa", "I", "Ha", "Di", "Hu", "Si", "Wi", "Dim", "OX", "Lat", "Ex", "Ze", "XY", "Eye", "Du", "Tu", "DX", "Co", "Yu", "Li", "Tx", "Pi", "Ka", "Sax", "Ti", "Is", "XX", "zi", "inx", "phi", "Ay", "xx", "Ey", "Ni", "Mu", "Ry", "Hi"], "dy": ["asia", "sy", "bis", "yd", "idy", "phy", "err", "him", "jee", "dyl", "ady", "dies", "ury", "di", "wy", "wed", "ky", "south", "die", "my", "ny", "yi", "yan", "vy", "ties", "ye", "py", "tier", "tri", "dt", "hy", "zy", "uy", "ii", "ded", "ei", "ey", "gy", "iy", "xy", "des", "zi", "boot", "fy", "pse", "yy", "yth", "dj", "did", "tie", " Dy", "eddy", "ry"], "tY": ["pY", "tEAR", "TIE", "TXY", "tE", " tE", "vtY", " tMY", " tEAR", "iX", "retMY", "tIES", "retXY", "traceY", "TY", "traceIE", " tYY", "TBY", "otXY", "retEAR", " tXY", "tYY", " tLong", "traceYY", "traceBY", " tYS", "tXY", " tBY", "vtEAR", "pIES", "TYY", "otLong", "otY", "iYS", "TLong", "tLong", " tIES", "iY", "tBY", "vtXY", "tMY", "tYS", " tIE", "retY", "pX", "vtMY", "TE", "iIES", "otE", "tIE", "pYS"], "Yi": ["Zi", "Chxi", "Hy", " Yy", "Yli", "Zo", "Ixi", "Xe", "Cho", "Ho", "Hgi", "Ygi", "Bli", "Ze", "Xli", "Be", "Che", "Xy", "Igi", "Iy", "Byy", "Byli", "Ye", "Bye", "Chi", " Yo", " Ygi", "Yxi", "Ie", "Ii", "Yo", "Byi", "Yy", "By", "Bi", "Zxi", "Hi", "Io"]}}
{"code": "s=input()\\n \\nif s in [\"RRR\"]:\\n  print(3)\\nelif s in [\"RRS\",\"SRR\"]:\\n  print(2)\\nelif s in [\"RSS\",\"SRS\",\"SSR\",\"RSR\"]:\\n  print(1)\\nelse:\\n  print(0)", "target": "482", "substitutes": {"s": ["a", "scl", "ars", "n", "sb", "sh", "sw", "su", "serv", "js", "stat", "p", "g", "i", "sal", "w", "hs", "sys", "c", "ts", "m", "set", "ns", "rs", "ses", "o", "ins", "ords", "sl", "ls", " fs", "f", "b", " just", "gins", "t", "abs", "S", "ss", "just", "sp", "conf", "v", "e", "sq", "sin", "gs", " sins", "ws", "ges", "sa", "ssl", "sv", "conv", "mys", "sol", "sts", "sets", "sis", "sd", "sav", "y", "se", "sk", "stats", "ass", "ps"]}}
{"code": "N = int(input())\\nS = input()\\ntotal = S.count(\"R\") * S.count(\"G\") * S.count(\"B\")\\nsub = 0\\nfor i in range(N):\\n    for j in range(i + 1, N):\\n        if S[i] == S[j]:\\n            continue\\n        h = j + j - i\\n        if h > N - 1 or S[j] == S[h] or S[h] == S[i]:\\n            continue\\n        sub += 1\\nprint(total - sub)", "target": "294", "substitutes": {"N": ["Total", "SN", "n", "M", "NS", "T", "Ne", "nt", "GN", "NI", "Ns", "R", "I", "L", "NA", "NN", "NP", "NR", "CN", "NT", "H", "V", "Z", "NUM", "B", "J", "Q", "G", "ND", "P", "Num", "A", "D", "NB", "MN", "Ni", "K", "F", "TN", "C"], "S": ["M", "NRS", "NS", "T", "ITS", "SF", "SH", "BS", "SS", "SL", "SB", "R", "SER", "X", "I", "JS", "L", "Si", "SO", "RS", "PS", "VS", "SI", "CS", "TS", "CSS", "ALL", "OS", "H", "GES", "GS", "V", "IS", "AS", "INS", "B", "J", "Q", "G", "Sing", "P", "SSL", "SE", "A", "US", "E", "s", "SP", "ST", "SU", "D", "DS", "NEWS", "Y", "SA", "LS", "String", "Z", "C"], "total": ["Total", "n", "complete", "max", "summary", "otal", "tan", "meta", "quant", "current", "created", "full", "ALL", "OTAL", "result", "done", "main", "num", " Total", "t", "count", "ot", "available", "all", "final", "free", "balance", "normal", "public", "equal", "toc", "size", "dot", "number", " tot", "basic", "base", " TOTAL", "sum"], "sub": ["Sub", "loc", "con", "stop", "sb", "summary", "pub", "sum", "minus", "mod", "offset", "stat", "imp", "mult", "ai", "short", "sup", "fun", "long", "pre", "set", "diff", "mut", "pb", "rob", "sec", "min", "sing", "remove", "main", "b", "num", "count", "tab", "rel", "sat", "nb", "sim", "add", "sq", "pop", "small", "un", "debug", "SU", "high", "desc", "div", "ub", "pro", "bs", "sc"], "i": ["mi", "ki", "n", "xi", "x", "ia", "ie", "ci", "gi", "ir", "p", "di", "ai", "I", "r", "z", "m", "bi", "yi", "ic", "o", "ix", "ip", "iri", "ind", "b", "t", "ri", "si", "ii", "li", "ji", "v", "int", "ti", "im", "it", "s", "zi", "ini", "q", "phi", "pi", "l", "id", "y", "index", "ij", "ik", "k", "iu", "hi"], "j": ["next", "n", "x", "uj", "ja", "js", "aj", "p", "g", "jp", "job", "r", "oj", "jc", "z", "m", "c", "jj", "bi", "o", "jl", "f", "b", "t", "J", "bj", "li", "ji", "kj", "v", "e", "obj", "s", "it", "jump", "q", "l", "dj", "u", "y", "k", "ij"], "h": ["ht", "n", "th", "sh", "x", "kh", "p", "hang", "hz", "html", "hal", "dh", "r", "hs", "c", "m", "z", "ih", "zh", "rh", "H", "ah", "eh", "bh", "b", "hl", "hp", "v", "oh", "hash", "ha", "ch", "ph", "it", "he", "hr", "high", "hd", "q", "ho", "l", "hh", "id", "u", "k", "y", "hi", "hm"]}}
{"code": "\\nN, K = map(int, input().split())\\n\\nMOD = 10 ** 9 + 7\\ncount = [0] * (N + 1)\\nfor i in range(1, N + 1):\\n    count[i] += count[i - 1] + i\\n    count[i] %= MOD\\n\\nans = 1\\nfor k in range(K, N + 1):\\n    ans += count[-1] - count[-k - 1] - count[k - 1] + 1\\n    ans %= MOD\\nprint(ans)\\n", "target": "425", "substitutes": {"N": ["SN", "CNN", "M", "n", "NS", "T", "NC", "GN", "NI", "Ns", "R", "I", "NA", "L", "NN", "NP", "NR", "CN", "NT", "NH", "H", "Node", "V", "No", "NO", "Z", "NUM", "S", "NE", "J", "Q", "ND", "P", "A", "D", "NB", "MN", "F", "TN", "FN", "C"], "K": ["M", "T", "KN", "KR", "X", "R", "I", "L", "KK", "H", "W", "V", "KS", "TN", "KC", "PK", "NK", "S", "B", "J", "Q", "SK", "G", "IK", "P", "HK", "D", "Y", "MN", "UK", "Z", "KE", "C"], "MOD": ["MAX", "M", "SET", "UPDATE", "VER", "MAG", "Scale", "DOM", "mod", "TR", "TW", "MAT", "DIR", "R", "LOG", "Mod", "POS", "VERSION", "RM", "OD", "TIME", "RE", "MIN", "ERROR", "Mods", "MAC", "PUT", "MC", "SIZE", "MD", "EXP", "NO", "NUM", "MODE", "MAN", "UL", "IND", "MED", "MP", "MS", "TYPE", "ED", "ADD", "FIN", "TM", "SPEC", "RO", "PD", "MAP", "LL", "MT", "Len", "JUST", "OK", "FORM", "AN", "REM", "MR", "AND"], "count": ["history", "loc", "hold", "n", "comment", "max", "nt", "cont", "match", "table", "stat", "gc", "cd", "cycle", "order", "child", "ct", "code", "score", "td", "store", "ount", "length", "c", "current", "weight", "report", "map", "buffer", "only", "total", "const", "log", "result", "num", "ctr", "config", "cond", "nb", "force", "amount", "conf", "add", "list", "cache", "all", "hash", "now", "flag", "first", "found", "group", "detail", "cast", "size", "counter", "handle", "number", "command", "Count", "q", "mem", "index", "dict", "temp", "last", "sum"], "i": ["\u00ed", "mi", "a", "n", "xi", "x", "ia", "ie", "ci", "gi", "ir", "p", "d", "di", "ai", "I", "c", "m", "bi", "ic", "ix", "ip", "iri", "ind", "multi", "t", "io", "si", "ii", "li", "ji", "v", "ori", "int", "ti", "oi", "s", "it", "ini", "zi", "ui", "phi", "pi", "l", "id", "index", "j", "ik", "ij", "iu", "hi"], "ans": ["ars", "ANS", "ians", "ats", "ants", "eds", " means", "checks", "outs", "aus", "asks", "aned", " Ans", "ts", "ates", "ns", "ann", "rans", "rs", "eas", "anas", "leans", "offs", "ins", "ks", "ras", "vers", "ons", "ms", "amps", "wan", "ls", "pan", "ens", "uns", "can", "an", "iann", "anes", "aps", "s", "nan", "nas", "ams", "aos", "acers", "yes", "cs", "arts", "os", "es", "lan", "AN", "ds", "ps", "orts"], "k": ["ck", "ki", "n", "ek", "uk", "x", "max", "kh", "kl", "ijk", "p", "g", "kar", "ak", "ke", "kid", "r", "c", "z", "m", "isk", "ks", "ic", "o", "kw", "ko", "h", "tk", "t", "key", "kj", "v", "ok", "s", "ikk", "ku", "wk", "kt", "q", "u", "kk", "sk", "ka", "ik", "j", "y", "mk", "unk"]}}
{"code": "h, w = map(int, input().split())\\n\\n\\ntable = {}\\nfor i in range(h):\\n    a = input()\\n    for c in a:\\n        if c not in table:\\n            table[c] = 1\\n        else:\\n            table[c] += 1\\n\\nmod0 = []\\nmod1 = []\\nmod2 = []\\nmod3 = []\\nfor key, value in table.items():\\n    if value % 4 == 0:\\n        mod0.append(key)\\n    elif value % 4 == 1:\\n        mod1.append(key)\\n    elif value % 4 == 2:\\n        mod2.append(key)\\n    else:\\n        mod3.append(key)\\n\\n\\nif w % 2 == 0 and h % 2 == 0:\\n    if len(mod1) > 0 or len(mod2) > 0 or len(mod3) > 0:\\n        print(\"No\")\\n    else:\\n        print(\"Yes\")\\n\\nelif w % 2 == 0 or h % 2 == 0:\\n    if h % 2 == 0:\\n        w, h = h, w\\n\\n    if w // 2 < len(mod2):\\n        print(\"No\")\\n    elif len(mod1) > 0 or len(mod3) > 0:\\n        print(\"No\")\\n    else:\\n        print(\"Yes\")\\nelse:\\n    if len(mod1) == 1 and len(mod2) <= (h + w - 1) // 2:\\n        print(\"Yes\")\\n    else:\\n        print(\"No\")\\n", "target": "188", "substitutes": {"h": ["history", "ht", "n", "th", "sh", "x", "kh", "her", "d", "p", "g", "wh", "hal", "hs", "r", "m", "z", "ih", "zh", "o", "H", "ah", "host", "bh", "f", "b", "uh", "hl", "t", "v", "e", "oh", "width", "height", "his", "hw", "ha", "ch", "ph", "hash", "he", "hr", "high", "hd", "q", "ho", "l", "hh", "u", "k", "y", "j", "hi", "hm"], "w": ["wx", "n", "th", "sw", "sh", "x", "ht", "d", "p", " W", "g", "wy", "tw", "wh", "we", "wt", "r", "weight", "length", "m", "z", "wb", "wr", "window", "iw", "whe", "rw", "W", "wd", "kw", "wal", "ew", "b", "word", "wl", "t", "no", "win", "wa", "wp", "fw", "v", "e", "width", "ws", "ww", "hw", "nw", "size", "q", "l", "widget", "aw", "y"], "table": ["able", "con", "master", "option", " Table", "db", "database", "column", "file", "encrypted", "this", "rule", "td", "entry", "m", "map", "section", "buffer", "module", "set", "type", "total", "window", "page", "output", "tree", "result", "stable", "t", "Table", "tab", "bool", "TABLE", "out", "list", "cache", "row", "obj", "model", "hash", "tr", "public", "see", "TA", "collection", "size", "bl", "translation", "tmp", "index", "data", "dict", "array", "ca", "trace"], "i": ["n", "x", "ia", "I", "iter", "r", "z", "ic", "ix", "ind", "f", "b", "li", "v", "im", "it", "q", "l", "pi", "id", "y", "k", "j"], "a": ["ce", "n", "ia", "ae", "ac", "ab", "ta", "p", "ana", "ach", "name", "xa", "this", "acc", "ma", "set", "ata", "aux", "ea", "aaa", "val", "b", "t", "can", "an", "e", "cha", "A", "at", "ch", "ha", "cca", "aa", "am", "ka", "y", "area", "ba", "ca", "ao"], "c": ["lc", "n", "cation", "x", "ac", "ci", "d", "cont", "p", "unc", "cd", "name", "cycle", "xc", "g", "code", "ct", "rc", "arc", "r", "z", "m", "ic", "o", "col", "f", "b", "bc", "t", "dc", "mc", "can", "v", "e", "cp", "s", "cc", "\u00e7", "co", "abc", "cb", "cu", "l", "u", "oc", "cs", "k", "y", "cf", "ca", "C", "chain"], "mod0": ["module000", "MOD0", "MOD1", "mod000", "Mod2", "module0", "Mod1", "mag1", "Mod000", "MOD2", "mag0", "Mod0", "module1", "mag000", "Mod3", "MOD3"], "mod1": ["magher", "coda", "mem3", "imm2", "tabone", "moda", "Mod2", " modone", " modher", "mem2", "imma", "od2", "od1", "Mod1", "imm1", "mag1", "maga", "mem1", "tab3", "immher", "tab1", "modher", "tab2", "mag2", "Mod0", "modone", "od0", "cod1", " moda", "cod0", "Mod3", "od3", "memone", "cod2", "Moda"], "mod2": ["module10", "module3", " mod02", "temp2", "Mod2", "Modb", "mod02", "temp3", "mod10", "tab02", "od2", "od1", "Mod1", "temp1", " mod10", "moduleb", "tab3", "module2", "tab1", "Mod0", "tab2", "od0", "module1", "module02", "Mod02", "modb", " modb", "Mod3", "od3", "temp10"], "mod3": ["module31", "module3", "Mod2", "mod31", "module0", "modthree", "Mod1", " mod03", "module03", "modifiedr", " modthree", "Mod03", "Modthree", "modulethree", "module2", "modified31", " modr", "Mod0", "modified1", "module1", " mod31", "modr", "Mod3", "moduler", "modified3", "mod03"], "key": ["keys", "x", "Key", "pair", "option", "ie", "str", "column", "name", "KEY", "entry", "ke", "cell", "cy", "set", "section", "type", "ice", "by", "col", "val", "case", "tag", "mac", "important", "v", "check", "int", "ey", "list", "row", "string", "primary", "char", "new", "title", "var", "item", "id", "k", "index", "y", "j", "member", "field", "chain"], "value": ["variable", "json", "feature", "critical", "pair", "attribute", "always", "expression", "port", "name", "ue", "test", "store", "position", "password", "current", "version", "vector", "scale", "unit", "type", "save", "second", "by", "default", "values", "val", "case", "description", "time", "ver", "v", "byte", "when", "node", "ve", "see", "element", "VALUE", "hello", "number", "item", "property", "index", "data", "Value", "entry", "root", "function", "python", "field"]}}
{"code": "import bisect\\ns = input()\\nt = input()\\nn = len(s)\\nm = len(t)\\nindices = [[] for _ in range(26)]\\nfor i in range(n):\\n    indices[ord(s[i]) - ord('a')].append(i)\\nfor i in range(n):\\n    indices[ord(s[i]) - ord('a')].append(i + n)\\n\\nans = 0\\np = 0\\nfor i in range(m):\\n    c = ord(t[i]) - ord('a')\\n    if len(indices[c]) == 0:\\n        print(-1)\\n        exit()\\n    p = indices[c][bisect.bisect_left(indices[c], p)] + 1\\n    if p >= n:\\n        p -= n\\n        ans += n\\nans += p\\nprint(ans)", "target": "138", "substitutes": {"s": [" has", " os", " ps", "a", "sb", " pos", "x", "ys", " e", " sets", "str", "ats", "js", "d", "eds", "g", "r", "w", "hs", "ts", " comments", "ns", "z", " changes", "rs", " ms", " spans", " bits", "o", "h", "ms", "ls", "f", "b", " bins", " stats", "S", "ss", "als", "out", "v", "e", " ns", "st", " es", "sts", "l", " h", "cs", " v", "j", "os", "es", " ls", " parts", "y", "ds"], "t": ["tm", "a", "T", "ta", "d", "g", "td", "r", "tc", "txt", "ts", "w", "wt", "gt", "te", "o", "tp", "dt", "f", "b", "pt", "ot", "tes", "tu", "out", "v", "at", "tt", "tr", "st", "rt", "l", "mat", "j", "y", "vt", "tz", "mt", "temp"], "n": ["a", "nr", "N", "net", "x", "nt", "gn", "ln", "d", "on", "en", "ne", "cn", "g", "dn", "sn", "r", "w", "ns", "o", "nl", "h", "ms", "f", "b", "num", "nia", "count", "len", "nb", "no", "mn", "na", "an", "v", "e", "nc", "nm", "nan", "size", "nn", "l", "pi", "np", "number", "j", "k", "y", "er", "pn"], "m": ["tm", "mi", "km", "M", "dm", "d", "mo", "mm", "g", "r", "ma", "bm", "o", "rm", "gm", "h", "ms", "mb", "b", "mc", "mn", "nm", "mx", "l", "j", "k", "mt", "cm"], "indices": ["INDues", " indxes", "inditions", "Indots", "indces", " indces", "intresses", "ordices", "intitions", " inditions", "indinters", "INDicates", "Indresses", "condences", "INDice", "indicates", "INDICES", " indaces", "indaces", "Indges", "indots", "indords", "Indaces", " indxs", "INDxes", "indxes", "INDamples", " indamples", "indexences", "ordues", "indice", "ordICES", "intords", "Indicates", "ordamples", "Indinters", "INDices", "intxs", "Indices", " indICES", "Indences", "inticates", "intices", " indues", "intxes", "indresses", "condots", "INDresses", "intice", "INDords", "Indice", " Indaces", " indges", "ininters", "intces", "inences", "indxs", "indexxs", "inices", "indues", "condices", "indexitions", "intences", "inots", " Indices", "condinters", "indamples", " Indice", " indences", "indges", "indexices", " indice", "indICES", " Indges", "INDces", "indences", " indords"], "_": ["x", "ex", "g", "ct", "__", "ate", "ation", "ix", "let", "an", "int", "all", "ity", "ac"], "i": ["mi", "ki", "xi", "x", "ia", "gu", "ci", "gi", "di", "ai", "I", "bi", "yi", "ic", "ix", "ski", "ip", "si", "li", "ii", "ji", "ei", "v", "int", "ti", "oi", "e", "iy", "im", "it", "zi", "ini", "ui", "phi", "pi", "l", "j", "y", "index", "ij", "fi", "iu", "hi"], "ans": ["ars", "ANS", "ops", "ants", "ats", "names", " means", "outs", "ai", "aus", "ns", "points", "ann", "ums", "anas", " spans", "ks", "ins", "nl", "offs", "ons", "ms", "angs", "amps", "ls", "ents", "ids", "sp", "ens", "ots", "als", "an", "rors", "anks", "posts", "oss", "aps", "plan", "nan", "xs", "nz", "idents", "pres", "eps", "ams", "vs", "np", "ads", "arts", "oes", "os", "stats", "ds", "ps"], "p": ["a", "x", "perm", "d", "port", "pc", "g", "jp", "r", "pre", "pai", "pb", "fp", "par", "o", "tp", "pa", "h", "pr", "pan", "f", "b", "sp", "pt", "lp", "pos", "pid", "an", "P", "v", "e", "ap", "cp", "ping", "dp", "l", "pi", "np", "u", "pat", "j", "y", "pn", "pp", "ps"], "c": ["ec", "ce", "lc", "con", "cat", "ac", "ci", "gc", "unc", "cd", "pc", "ct", "tc", "chain", "fc", "ic", "col", "cur", "bc", "dc", "mc", "uc", "cut", "can", "cache", "cp", "cc", "co", "cu", "cb", "cs", "cm", "cr", "cf", "ca", "C", "sc"]}}
{"code": "n,l = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nsumax=0\\nfor i in range(n-1):\\n    if sumax < a[i]+a[i+1]:\\n        sumax=a[i]+a[i+1]\\n        ind=i\\n\\nif sumax < l:\\n    print(\"Impossible\")\\n    exit()\\n\\nprint(\"Possible\")\\n\\nfor i in range(1,n):\\n    if i>ind:\\n        break\\n    print(i)\\n\\nfor i in reversed(range(n)):\\n    if i==ind:\\n        break\\n    print(i)", "target": "154", "substitutes": {"n": ["N", "x", "nt", "gn", "ln", "d", "p", "en", "ne", "g", "r", "sn", "c", "m", "ns", "o", "nl", "h", "f", "num", "t", "len", "nb", "mn", "na", "v", "an", "e", "nc", "nu", "nn", "q", "ll", "np", "pi", "j", "y", "k"], "l": ["lc", "kl", "ln", "p", "g", "lb", "L", "r", "length", "c", "m", "ly", "ml", "dl", "el", "o", "nl", "h", "ls", "limit", "b", "t", "hl", "len", "lp", "li", "v", "list", "ll", "le", "pl", "j", "lin"], "a": ["history", "x", "ia", "sta", "ae", "ab", "p", "arr", "ai", "r", "ma", "eas", "ga", "window", "aux", "ea", "la", "aaa", "abs", "b", "f", "alpha", "parts", "da", "na", "an", "att", "exp", "all", "A", "al", "up", "at", "sa", "aka", "ao", "app", "au", "oa", "aa", "am", "es", "data", "ack", "ba", "ca", "ac"], "sumax": ["sumAX", "Sumax", " summedaxy", " summedmax", "umx", "sumaxy", " sumAx", "umaxy", "umax", " sumaxy", "Sumrix", "SumAx", "Summax", "Sumx", "ummax", "umAX", "sumAx", " summax", " sumrix", " sumAX", "sumx", "umAx", "summax", "sumrix", " summedrix", " summedx", " sumx", " summedax", " summedAX", "SumAX"], "i": ["mi", "ki", "xi", "x", "uri", "ni", "me", "ci", "gi", "cli", "name", "di", "ai", "I", "m", "bi", "info", "yi", "qi", "iti", "ic", "ix", "o", "ip", "f", "multi", "ri", "t", "io", "si", "iu", "sim", "li", "ii", "ji", "key", "exp", "int", "ti", "v", "ei", "oi", "iy", "im", "it", "s", "zi", "ini", "ui", "\u0438", "q", "pi", "phi", "ati", "item", "id", "j", "y", "index", "ik", "ij", "asi", "iri", "hi"], "ind": ["loc", "find", "x", "state", "nt", "ld", "d", "ln", "ne", "typ", "iter", "inc", "z", "set", "ann", "old", "Ind", "pred", "ins", "kind", "val", "pr", "b", "sp", "cond", "ord", "pos", "ill", "v", "int", "IND", "adj", "st", "it", "end", "inn", "hend", "ed", "pl", "sd", "id", "j", "index", "k", "pp", "nd", "init", "wind"]}}
{"code": "# coding:utf-8\\nn = int(input())\\ns = [int(input()) for _ in range(n)]\\ns.sort()\\nans = sum(s)\\n\\nif ans % 10 != 0:\\n    print(ans)\\n    exit()\\nelse:\\n    for i in range(n):\\n        if s[i] % 10 != 0:\\n            ans -= s[i]\\n            if ans % 10 != 0:\\n                print(ans)\\n                exit()\\nprint(0)\\n", "target": "741", "substitutes": {}}
{"code": "#\u30b0\u30e9\u30d5\u306e\u9023\u7d50\u6210\u5206\u3092\u8abf\u3079\u308b\\ndef Graph(ab):\\n    G=[[] for i in range(n)]\\n    for a,b in ab:\\n        G[a-1].append(b)\\n        G[b-1].append(a)\\n    return G\\n\\n#BFS\\nfrom collections import deque\\ndef bfs(G, v, p):\\n    point = [0] * n\\n    q=deque()\\n    q.append((v, p))\\n    point[0] = c.pop(0)\\n\\n    score = 0\\n    while q:\\n        #q\u306e\u5148\u982d\u3092\u53d6\u308a\u51fa\u3059\\n        V, P = q.popleft()\\n        for next_v in G[V - 1]:\\n            if next_v == P:continue\\n            q.append((next_v, V))\\n            temp = c.pop(0)\\n            score += temp\\n            point[next_v - 1] = temp\\n\\n    return point, score\\n\\nn = int(input())\\nab = [list(map(int,input().split())) for i in range(n - 1)]\\nc = list(map(int,input().split()))\\nc = sorted(c, reverse=True)\\nG = Graph(ab)\\n\\npoint, score = bfs(G, 1, -1)\\nprint(score)\\nprint(*point)", "target": "364", "substitutes": {}}
{"code": "n, a = map(int, [input() for i in range(2)])\\n\\nprint(n ** 2 - a)", "target": "379", "substitutes": {"n": ["N", "x", "nt", "d", "p", "ln", "en", "name", "ne", "cn", "dn", "sn", "c", "m", "ns", "o", "nl", "h", "f", "b", "num", "fn", "t", "nia", "nb", "nor", "mn", "na", "an", "nc", "new", "nu", "nn", "q", "j"], "a": ["ia", "ae", "ab", "aff", "ta", "p", "va", "xa", "c", "ma", "m", "ata", "ga", "o", "aux", "pa", "b", "t", "alpha", "da", "an", "all", "A", "al", "at", "sa", "ao", "au", "ed", "aa", "am", "j", "area", "ba", "ca", "ac"], "i": ["x", "ia", "str", "p", "I", "iter", "r", "m", "ix", "ip", "ind", "f", "io", "ii", "key", "ti", "im", "q", "l", "id", "k", "j", "ik"]}}
{"code": "import sys\\n\\ninput = sys.stdin.readline\\n\\n\\ndef read_values():\\n    return map(int, input().split())\\n\\n\\ndef read_list():\\n    return list(read_values())\\n\\n\\ndef func(N, mod):\\n    F = [1]\\n    for i in range(1, N + 1):\\n        F.append(F[-1] * i % mod)\\n    return F\\n\\n\\nINV = {}\\n\\n\\ndef inv(a, mod):\\n    if a in INV:\\n        return INV[a]\\n    r = pow(a, mod - 2, mod)\\n    INV[a] = r\\n    return r\\n\\n\\ndef C(F, a, b, mod):\\n    return F[a] * inv(F[b], mod) * inv(F[a - b], mod) % mod\\n\\n\\ndef main():\\n    import bisect\\n\\n    N, W = read_values()\\n    I = [tuple(read_values()) for _ in range(N)]\\n\\n    init_w = I[0][0]\\n    D = {i: [] for i in range(4)}\\n    S = {i: [0] for i in range(4)}\\n    for w, v in I:\\n        bisect.insort(D[w - init_w], -v)\\n\\n    for i, d in D.items():\\n        for v in d:\\n            S[i].append(v + S[i][-1])\\n\\n    res = 0\\n    for t0 in range(len(D[0]) + 1):\\n        for t1 in range(len(D[1]) + 1):\\n            for t2 in range(len(D[2]) + 1):\\n                for t3 in range(len(D[3]) + 1):\\n                    if (t0 + t1 + t2 + t3) * init_w + t1 + 2 * t2 + 3 * t3 > W:\\n                        continue\\n\\n                    res = min(res, S[0][t0] + S[1][t1] + S[2][t2] + S[3][t3])\\n    print(-res)\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n\\n", "target": "512", "substitutes": {"input": ["open", "load", "str", "select", "cont", "insert", "util", "get", "reset", "value", "raw", "ref", "buffer", "focus", "read", "format", "output", "fn", "config", "hidden", "initial", "source", "feed", "out", "pull", "Input", "int", "string", "it", "exec", "csv", "print", " Input", "q", "reader", "command", "sample", "data", "join", "sequence", "text", "init"], "N": ["SN", "n", "M", "NS", "T", "We", "GN", "NI", "Ns", "R", "X", "L", "NA", "NM", " n", "NN", "NR", "NT", "H", "O", "V", "No", "NO", "B", "J", "G", "Num", "P", "A", "NB", "Y", "Size", "Len", "Ni", "K", "TN", "C"], "mod": ["x", "perm", "p", "mm", "set", "module", "od", "dev", "ind", "sim", "lam", " MOD", "exp", "pl", "rand", "id", "reg", "cm", "max", " Mod", "test", "Mod", "scale", "length", "m", "dec", "min", "step", "time", "len", "crit", "post", "div", "pro", "deg", "modified", "mods", "lib", "spec", "fun", "val", "off", "add", "com", "req", "good", "mode", "M", "MOD", "name", "sub", "rem", "prime", "func", "tag", "f", "stable", "t", "ver", "int", "tr", "base", "var", "j", "comp", "temp", "ac"], "F": ["FF", "M", "Fun", "UF", "T", "Family", "FER", "SF", "All", "FI", "R", "X", "L", "RF", "FD", "FT", "Full", "Fi", "FE", "H", "O", "V", "FP", "f", "FL", "GF", "EF", "FS", "Fact", "B", "Q", "G", "J", "TF", "P", "FA", "A", "E", "Function", "PF", "AF", "FY", "FIN", "FG", "FM", "FW", "DF", "Fs", "Filter", "U", "FC", "CF", "Z", "FN", "C"], "i": ["mi", "n", "xi", "x", "ia", "ki", "uri", "ci", "gi", "p", "on", "di", "ai", "c", "z", "m", "bi", "yi", "ic", "ix", "o", "ip", "h", "iri", "ind", "f", "t", "si", "li", "ii", "ei", "int", "ti", "im", "it", "s", "zi", "ui", "ini", "phi", "pi", "l", "il", "id", "u", "j", "y", "index", "ij", "k", "iu", "hi"], "INV": [" INJ", " PINV", "INTVS", " INVC", " INVs", "GENVC", " INVO", " PINVs", "INVs", " PINVO", " PINJ", "PINVS", "INv", "ENVC", "GENv", "INTV", "ENV", "INTVC", "PINV", "INTVO", "PINv", "GENVS", "ENVO", "ENJ", "PINVC", " INVS", "ENv", "INVC", "INVO", "GENV", "INVS", " INv", "ENVS", "PINVs", "INJ", "ENVs"], "a": [" ya", "n", "x", "ia", "sta", "ae", "ac", "ab", "ra", "aj", "ta", "era", "name", "p", "va", "ai", "acc", "c", "ma", "m", " A", "ga", "aux", "o", "ea", "la", "aaa", " ra", "f", "\u00e4", "t", " ca", "alpha", "abs", "Ra", "na", "an", "e", " ja", "A", "at", "sa", "af", "s", "ao", "sha", "access", "app", "oa", "au", "aa", "l", "am", "ar", "u", "ka", "j", "area", "ba", "ca"], "r": ["n", "mr", "x", "pair", "rr", "ro", "p", "g", "R", "rc", "re", "c", "m", "z", "rat", "rs", "rb", "h", "result", "rar", "f", " R", "right", "t", "e", "rt", "rect", "q", "l", "ar", "u", "j", "k", "y", "rate", "rd"], "b": ["n", "x", "ab", "p", "g", "ib", "bg", "c", "z", "m", "bi", "fb", "rb", "o", "h", "be", "f", "br", "bc", "t", "nb", "B", "bb", "e", "eb", "l", "u", "j", "y", "k", "bs", "ba", "back"], "W": ["WT", "WC", "M", "T", "We", "WR", "MW", "WP", "R", "L", "WW", "VW", "BW", "H", "V", "WA", "B", "J", "Wh", "Q", "G", "P", "A", "WD", "Y", "WE", "DW", "EW", "U", "K"], "I": ["IT", "M", "T", "IC", "II", "IJ", "PI", "IP", "NI", "R", "L", "X", "RI", "Info", "SI", "HI", "DI", "H", "V", "IS", "IM", "TI", "J", "B", "Q", "G", "IF", "P", "LI", "A", "E", "IL", "Is", "GI", "Y", "MI", "U", "IO"], "_": ["x", " the", "on", " j", "g", "ct", "ate", "ation", "ml", "set", "m", "ic", "ix", "val", "pt", "an", "all", "ow"], "init_w": [" init_W", "init0d", "init_y", "Init_W", "init_x", " init_d", "init_wa", " init_y", "Init_d", " init_x", "init_d", "init0x", "Init_w", "init0W", "Init_wa", "init0w", "init_W"], "D": ["DJ", "M", "DL", "T", "Def", "DOM", "DOS", "DO", "DIR", "R", "DE", "L", "X", "DK", "DATA", "DR", "DI", "Del", "H", "DH", "O", "V", "LD", "DES", "Do", "DX", "DA", "B", "J", "Q", "ND", "DD", "DC", "DN", "P", "A", "Ds", "WD", "DS", "DM", "Y", "PD", "DF", "DEV", "DB", "DVD", "U", "C", "Data"], "S": ["LS", "M", "NS", "T", "SEC", "Socket", "SH", "SD", "Sys", "SF", "ES", "BS", "Sup", "SS", "HS", "SL", "R", "JS", "SO", "L", "RS", "Si", "PS", "SI", "CS", "TS", "CSS", "Stats", "Set", "OS", "H", "GS", "V", "IS", "INS", "B", "Sing", "P", "SSL", "SE", "A", "Windows", "US", "s", "Ds", "SP", "SU", "DS", "Y", "DB", "SA", "SR", "WS", "Z", "C"], "w": ["wx", "n", "xi", "x", "sw", "p", "g", "we", "c", "z", "wb", "wr", "window", "iw", "wi", "rw", "wd", "kw", "h", "f", "word", "ew", "wl", "t", "wa", "wp", "fw", "ws", "s", "nw", "q", "l", "var", "u", "j", "y"], "v": ["qv", "n", "x", "vd", "p", "vi", "vo", "di", "va", "g", "value", "uv", "c", "vector", "m", "z", "ev", "o", "h", "val", "V", "f", "vc", "t", "iv", "ver", "av", "nv", "e", "s", "it", "sv", "ve", "q", "l", "vs", "var", "u", "j", "vt", "y", "k", "data"], "d": ["den", "fd", "x", "vd", "p", "g", "di", "dn", "dh", "c", "z", "m", "h", "ind", "f", "t", "dr", "pd", "e", "s", "dx", "l", "dd", "sd", "did", "id", "u", "j", "y", "du", "data", "ds"], "res": ["resolution", "conn", "max", " Res", "resh", "ret", "reset", "rep", "R", "re", "Res", "zero", "ther", "ref", "vals", "rem", "resources", "dev", "prime", "min", "RES", "ins", "ms", "val", "result", "rel", "vol", "cond", "ress", "cons", "ver", "results", "resp", "out", "red", "gr", "s", "rest", "rez", "sol", "pres", "req", "lock", "stock", "q", "progress", "rand", "reg", "os", "pro", "ps", "prof", "sum"], "t0": ["tt19", "tzero", "T1", "vzero", "tt0", "ptator", " t00", "vstar", "t19", " t19", "wt0", " t90", "t90", "Tator", "T0", "tator", "pt00", "t00", "pt0", "T00", "Tzero", "wt19", "tstar", "Tstar", "v1", "ttstar", "pt1", "tt1", "ttzero", " tator", "wt90", "v0", "tt90"], "t1": ["let0", "v2", " t5", "type1", "T1", "mt6", "o127", "tree2", "o6", "t6", "v5", "x127", "type0", "T3", "let001", "T0", "o1", "tree1", "t127", "T5", "mt127", "v3", "x1", "let1", "tree0", "type2", "T2", "t001", "x2", "o2", "v1", "T001", "mt2", "let2", "mt1", "v0", "x6", "v001", "t5"], "t2": [" ttwo", "j2", " t5", "t4", "g2", "g4", "T1", "at62", "t42", "ta62", "o42", "x42", "tor", "tu62", "o4", "jor", " t62", "g3", "tatwo", "tu1", "ttwo", "at2", "tadouble", "o3", "taor", "tu2", "jtwo", "ta5", "T2", "x2", "o2", "g42", "t62", " tor", "ta2", "jdouble", "x3", "x4", " tdouble", "tdouble", "at5", "T62", "t5"], "t3": [" t003", " T23", "Tthree", " t11", "at003", "t11", "T23", " Tiii", " t6", "T003", "t6", "ot6", "t23", "t512", " t23", "T6", "T3", "T11", "ot3", "time512", "t003", "time2", "time3", "t03", " t512", " T3", "ot2", " t03", "ot23", "Tiii", "atthree", "at03", "T03", "T2", "tiii", "T512", "at3", "tthree", " tiii", " tthree", " T2", "time11"]}}
{"code": "import numpy as np\\n\\na, b, h, m = map(int, input().split())\\nrad_a = 2 * np.pi / 720 * (60 * h + m)\\nrad_b = 2 * np.pi / 60 * m\\n\\nans = np.sqrt(a ** 2 + b ** 2 - 2 * a * b * np.cos(rad_a - rad_b))\\nprint(\"{:.20f}\".format(ans))", "target": "290", "substitutes": {"a": ["aq", "ia", "sta", "ae", "ac", "ab", "aff", "aj", "ach", "va", "i", "r", " A", "ma", "c", "ea", "la", "aaa", "ax", "abs", "f", "alpha", "da", "an", "e", "A", "al", "at", "sa", "s", "oa", "ed", "au", "div", "aa", "l", "am", "ar", "area", "ba", "ao"], "b": ["bf", "ab", "d", "p", "db", "beta", "g", "ib", "i", "r", "c", "z", "bi", "wb", "fb", "rb", "by", "o", "be", "f", "br", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "l", "ub", "y", "bs", "ba"], "h": ["ht", "n", "x", "sh", "kh", "p", "i", "html", "w", "hs", "r", "ih", "rh", "http", "H", "ah", "f", "HH", "hl", "oh", "om", "height", "his", "hw", "ha", "he", "hr", "hd", "ish", "hour", "hh", "y", "hours", "hi", "hm", "ow"], "m": ["mi", "km", "n", "M", "mr", "x", "pm", "dm", "d", "p", "mm", "mu", "g", "i", "mmm", "r", "w", "c", "z", "ml", "mad", "o", "gm", "ms", "f", "t", "mc", "v", "e", "vm", "s", "mag", "q", "l", "am", "mem", "u", "k", "y", "j", "cm", "mt"], "rad_a": ["rad_an", "m_i", "rad64i", "rad67al", "m__an", "rad_al", "m__i", "rad67ba", "rod_a", "rad64al", "rad64as", "rad__a", "rad__i", "rod_as", "m_a", "rad_i", "rad64ba", "rad_ba", "rad64a", "rad64an", "rad_sa", "m_an", "rad_as", "rad__an", "rod_al", "m_sa", "rad67a", "m__a", "rad64sa", "rad67as", "m__sa", "rad__sa", "rod_ba"], "rad_b": ["Rad_b", "ax_h", "Rad_B", "rad10nb", "rad_m", "rad7B", "rad_u", "ax_m", "Rad_u", "ax_B", "rad10u", "Rad_nb", "ax_b", "rad10b", "rad7b", "rad_h", "rad_B", "rad7nb", "rad_nb", "rad7u", "rad10B"], "ans": ["umes", "ANS", "ants", "ians", "beans", "ean", "ains", " means", "eds", "ros", "lines", "aned", "mos", "mails", "san", "vals", "anus", "ann", "rans", "mas", "anas", "leans", "ses", "ks", "ms", "angs", "ents", " sans", "uns", "mn", "an", "anes", "ays", "s", "nan", "ions", "nas", "ams", "ran", "asms", "lan", "AN", "views", "said"]}}
{"code": "import bisect\\n\\nN = int(input())\\nA = [int(input()) for _ in range(N)]\\n\\nA.reverse()\\n\\ndp = [A[0]]\\n\\nfor a in A[1:]:\\n    idx = bisect.bisect_right(dp, a)\\n    if idx == len(dp):\\n        dp.append(a)\\n    else:\\n        dp[idx] = a\\n\\nprint(len(dp))", "target": "245", "substitutes": {"N": ["SN", "CNN", "n", "M", "NS", "NV", "NC", "GN", "NI", "Ns", "X", "L", "NA", "NM", "NN", "NP", "CN", "NR", "NT", "V", "TN", "NO", "S", "J", "Q", "G", "ND", "Num", "P", "Sn", "D", "NB", "K", "AN", "Z", "FN", "NG"], "A": ["GA", "Ax", "T", "An", "IA", "Ar", "AU", "AT", "mA", "I", "Av", "NA", "L", "AL", "AV", "AB", "App", "AE", "AA", "LA", "Ab", "As", "PA", "V", "AI", "C", "AS", "S", "B", "G", "This", "ICA", "P", "CA", "At", "JA", "AF", "TA", "D", "ATA", "AM", "SA", "AC", "The", "AN", "Array", "AP"], "_": ["x", " t", " j", " pre", " length", " all", "ix", " row", " g", " long", " ip", " l", " x", " time", " c", " m", " __", " each", " p", " some", " un"], "dp": ["pkg", "dro", "d", "p", "db", "vp", "dial", "jp", "td", "dl", "fp", "pb", "gp", "bsp", "wd", "tp", "pa", "ip", "dt", "df", "dc", "dep", "isp", "edu", "pas", "DP", "wp", "lp", "pd", "dr", "drop", "deb", "cp", "bps", "dq", "pipe", "bp", "dd", "du", "px", "pp", "ds", "ps", "adr"], "a": ["n", "any", "x", "ia", "sta", "ae", "aff", "d", "p", "name", "g", "va", "i", "w", "c", "ma", "z", "ata", "el", "eas", "ga", "o", "ea", "pa", "aaa", "la", "val", "b", "t", "alpha", "add", "na", "an", "v", "e", "all", "at", "sa", "ao", "now", "s", "another", "new", "au", "aa", "l", "am", "ar", "u", "aw", "j", "y", "k", "index", "ag", "ack", "ca", "ac"], "idx": [" idy", " idux", " fidx", "idy", "midex", "iddx", "idxs", "indxc", "Idx", " idxs", " idix", " fidex", "ridx", " iddx", "Idy", "indpx", " fidpx", "idxc", "inddx", "ridux", "indix", "indx", "midx", "Iddx", "ridix", "idex", "midpx", "idix", " fidxc", "ridxs", "midxc", "idpx", "indy", "index", "Idix", "idux", "indux", "indxs"]}}
{"code": "import sys\\n\\ns = []\\nfor line in sys.stdin:\\n    s.extend(list(line.lower()))  \\n\\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\\n\\nfor i in alphabet:\\n    print(i + \" : \" + str(s.count(i)))", "target": "770", "substitutes": {"s": ["a", "n", "events", "aws", "ats", "js", "p", "names", "g", "fs", "lines", "r", "w", "c", "ts", "m", "ns", "rs", "files", "ses", "tests", "o", "ins", "h", "ms", "ls", "abs", "b", "ids", "t", "S", "ss", "ends", "als", "rings", "strings", "e", "sq", "gs", "v", "ws", "ims", "sv", "eps", "sts", "l", "se", "y", "changes", "data", "stats", "qs", "ds", "ps"], "line": [" LIN", " stroke", "ine", "lf", " Lin", "ln", "on", "name", "where", "ste", "file", " outline", "lined", "inline", "lines", "Line", " le", "pe", " lines", "eline", "page", " row", "ide", "println", " lo", "log", "liner", "ole", "word", "oline", "block", "lo", "li", " lin", " inline", " Line", "stream", "string", "row", "LINE", "handle", "l", " me", "INE", "link", "lin", " linen"], "alphabet": ["alphaaton", "alaton", "abetenum", "abetabetic", "plabetic", "alabetic", "alphaabet", "alphaphabet", "plphabet", "abetabet", "blackabetic", "blackaton", "alenum", "blackphabet", "abetphabet", "alabet", "plenum", "alphaabetic", "alphaton", "alphabetic", "plabet", "blackabet", "alphphabet", "alphenum"], "i": [" ii", " I", "mi", "n", "xi", "x", "ogi", "ki", "ci", "p", "name", "di", "ai", "I", "iter", "c", "m", "yi", "qi", "ix", "o", "ip", "iri", "ind", "multi", "t", "si", "li", "ii", "ei", "v", "int", "ti", "oi", "ani", "im", "zi", "ini", "l", "pi", "item", "id", "j", "index", "k", "ik", "ij", "iu", "hi"]}}
{"code": "def LI(): return list(map(int, input().split()))\\ndef I(): return map(int, input().split())\\nmod = 10**9 + 7\\n\\ndef main():\\n  a, v = I()\\n  b, w = I()\\n  t = int(input())\\n  if v <= w:\\n    print('NO')\\n  else:\\n    if abs(a-b) <= (v-w)*t :\\n      print('YES')\\n    else:\\n      print('NO')\\n\\nif __name__ == '__main__':\\n  main()", "target": "349", "substitutes": {"mod": ["MOD", " Mod", "sub", "mult", "ct", "Mod", "fun", "inv", "set", "m", "module", "floor", "prime", "dec", "round", "min", "step", "log", "pos", "add", "exp", "debug", "tr", "rt", "base", "pi", "var", "mode"], "a": ["x", "sta", "ae", "ac", "ab", "aff", "aj", "ta", "va", "ai", "ak", "i", "r", "ga", "o", "la", "\u00e4", "art", "apa", "an", "A", "ap", "al", "at", "sa", "oa", "au", "aa", "am", "ar", "u", "j", "ba", "ca", "ao"], "v": ["qv", "n", "x", "d", "p", "vi", "g", "vo", "va", "tv", "vp", "i", "value", "r", "uv", "c", "m", "bi", "ev", "o", "h", "val", "V", "f", "vc", "iv", "av", "nv", "e", "sv", "ve", "q", "l", "vs", "u", "j", "vt", "y"], "b": ["n", "sb", "ab", "d", "db", "g", "ib", "i", "bg", "c", "z", "bi", "wb", "fb", "rb", "o", "be", "bh", "f", "bc", "nb", "B", "bb", "e", "bt", "eb", "cb", "l", "j", "y", "bs", "ba"], "w": ["wx", "n", "th", "sw", "d", "p", "tw", "i", "wh", "we", "wt", "z", "m", "wb", "wr", "window", "iw", "wi", "rw", "W", "wd", "o", "h", "kw", "wal", "ew", "wl", "win", "wa", "wp", "ws", "ww", "hw", "nw", "wk", "l", "ow"], "t": ["tm", "n", "ty", "T", "nt", "ta", "p", "d", "lt", "ct", "tw", "i", "tc", "wt", "c", "ts", "o", "te", "tp", "term", "dt", "f", "pt", "ot", "tu", "e", "at", "tt", "it", "rt", "j", "tz", "y", "vt", "mt"]}}
{"code": "n = int(input())\\na = list(map(int, input().split()))\\nb = [0] * (n + 2)\\nb[1] = abs(a[0])\\nfor i in range(2, n + 1):\\n    b[i] = b[i - 1] + abs(a[i - 2] - a[i - 1])\\nb[n + 1] = abs(0 - a[n - 1]) + b[n]\\na = [0] + a + [0]\\nfor i in range(n):\\n    print(b[n + 1] + abs(a[i] - a[i + 2]) - abs(b[i] - b[i + 2]))", "target": "527", "substitutes": {"n": ["nr", "N", "x", "net", "nt", "ni", "d", "p", "on", "ln", "name", "norm", "ne", "cn", "g", "ct", "long", "sn", "r", "c", "w", "m", "z", "ns", "o", "nl", "h", "num", "fn", "t", "nia", "nb", "no", "mn", "na", "v", "int", "nc", "all", "s", "nan", "none", "new", "nu", "nw", "size", "nn", "l", "ll", "np", "pi", "id", "network", "j", "ng", "y", "nd"], "a": ["ia", "sta", "ae", "ac", "ab", "p", "name", "g", "ai", "w", "r", "c", "ma", "ace", "el", "ga", "o", "ea", "la", "aaa", "h", "act", "abs", "f", "t", "auto", "alpha", "da", "apa", "an", "att", "e", "all", "A", "al", "obj", "ap", "at", "sa", "it", "ao", "s", "app", "new", "au", "oa", "ed", "aa", "l", "am", "ar", "u", "j", "er", "data", "area", "ba", "ca"], "b": ["bis", "body", "sb", "ab", "bar", "emb", "db", "beta", "g", "ib", "r", "bg", "c", "bi", "wb", "buffer", "fb", "rb", "bo", "o", "mb", "be", "ob", "bh", "br", "abs", "bc", "gb", "t", "nb", "B", "bb", "v", "bt", "e", "eb", "bl", "cb", "base", "l", "bin", "j", "y", "binary", "bs", "ba"], "i": ["mi", "ki", "xi", "x", "ia", "ni", "me", "gu", "ci", "gi", "cli", "di", "ai", "I", "iter", "bi", "ami", "yi", "ic", "o", "ix", "ski", "ip", "iri", "ind", "ri", "io", "si", "li", "ii", "ji", "v", "int", "ti", "oi", "iy", "im", "it", "ims", "zi", "ini", "ui", "\u0438", "q", "phi", "pi", "u", "id", "j", "y", "index", "fi", "ij", "iu", "hi"]}}
{"code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\\nfrom collections import deque\\n\\nsys.setrecursionlimit(10**7)\\ninf = 10**20\\nmod = 10**9 + 7\\n\\nDR = [1, -1, 0, 0]\\nDC = [0, 0, 1, -1]\\n\\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\\ndef LS(): return sys.stdin.readline().split()\\ndef I(): return int(sys.stdin.readline())\\ndef F(): return float(sys.stdin.readline())\\ndef S(): return input()\\n     \\ndef main():\\n    s = S()\\n    ans = inf\\n    for i in range(len(s)-2):\\n        ans = min(ans, abs(int(s[i:i+3]) - 753))\\n    print(ans)\\n\\n\\nmain()\\n\\n", "target": "122", "substitutes": {"inf": ["n", "ine", "lim", "err", "IN", "Inf", "ct", "iter", "inc", "ipl", "txt", "inv", "diff", "expl", "info", "ins", "mind", "log", "ind", "f", "auto", "inner", "conf", "out", "exp", "std", "int", "sin", "inter", "eps", "nan", "ini", "pi", "bin", "pp", "ignore", "init", "frac"], "mod": ["MOD", "sign", "spec", "sub", "mult", "ai", "Mod", "fun", "scale", "pre", "circ", "man", "dec", "ind", "mean", "fac", "sim", "add", "exp", "red", "im", "ran", "mag", "base", "pi", "id", "cm", "mode"], "DR": ["STR", " DOS", "IX", " DX", " dr", "STD", "DIR", "AD", "DI", "OS", "IR", " DL", "MODE", "DX", "DP", " DM", "dr", " RR", "OH", "MS", " DD", "ST", "DS", "dq", "DM", "DF", "Dr", "SR"], "DC": ["TD", "STD", "PC", "DE", "CE", "CS", "DK", "DI", "TC", "CT", "GC", "dc", "CD", "BC", "DX", "DA", "DP", "SC", "DD", "DT", "CA", "DS", "DM", "TM", "CL", "DF", "DW", "DB"], "x": ["wx", "xi", "ex", "rex", "ci", "xe", "p", "on", "xes", "ux", "xc", "qu", "ct", "X", "xa", "rx", "c", "ox", "z", "rox", "oxy", "xxxx", "plex", "xt", "xxx", "hex", "ctx", "xml", "ix", "tx", "ax", "xxxxxxxx", "check", "key", "v", " xx", "fx", "ey", "xy", "xs", "mx", "work", "co", "dx", "inx", "xx", "yx", "item", "lex", "y", "px", "rax", "ross", "xp", "xf"], "s": ["a", "n", "sb", "ats", "js", "p", "fs", "r", "sys", "c", "ts", "ns", "sam", "rs", "ses", "ins", "less", "h", "ms", "ls", "b", "sp", "t", "S", "ss", "its", "strings", "v", "gs", "ws", "sa", "sv", "sts", "sis", "y", "os", "stats", "es", "ds", "ps", "bs"], "ans": ["ANS", "ants", "ats", "ints", "ean", " means", "eds", "irms", "aus", "ros", "us", "iban", "aned", "mos", " Ans", "ns", "ann", "rans", "mas", "man", "anas", "mins", "offs", "ins", "ks", "ons", "ms", "amps", "ls", "pan", "ents", "animate", "ens", "ids", "cas", "anc", "cons", "uns", "an", "rors", "iann", "anks", "nan", "ions", "ran", "ands", "aos", "rates", "yes", "ads", "arts", "cs", "asms", "os", "lan", "AN"], "i": ["mi", "ki", "xi", "me", "ci", "gi", "p", "di", "ai", "I", "c", "z", "m", "bi", "yi", "qi", "ic", "ix", "o", "ip", "ind", "multi", "t", "si", "ii", "li", "ei", "v", "ti", "im", "it", "ini", "zi", "ui", "phi", "pi", "l", "u", "j", "y", "fi", "index", "ik", "ij", "iu", "hi"]}}
{"code": "alpha = list(\"abcdefghij\")\\n\\n\\ndef dfs(v, depth):\\n    if depth == N:\\n        print(v)\\n        return\\n    if depth <= N:\\n        for next_ in alpha[: len(set(list(v))) + 1]:\\n            dfs(v + next_, depth + 1)\\n\\n\\nif __name__ == \"__main__\":\\n    N = int(input())\\n\\n    dfs(\"a\", depth=1)\\n", "target": "427", "substitutes": {"alpha": ["history", "a", "alph", "x", "p", "beta", "name", "Alpha", "va", "xa", "i", "w", "r", "ma", "ace", "prefix", "alias", "V", "isa", "auto", "da", "acl", "all", "final", "A", "al", "qa", "at", "sha", "abc", "base", "phi", "pi", " Alpha", "ho", "data", "upper", "array", "ac"], "v": ["a", "qv", "n", "x", "vv", "vert", "d", "p", "vp", "vo", "g", "va", "rev", "i", "value", "r", "w", "uv", "c", "vector", "m", "z", "vy", "o", "values", "h", "val", "V", "vr", "f", "b", "t", "ver", "e", "sv", "ve", "van", "q", "vs", "l", "var", "u", "j", "vt", "vec", "k"], "depth": ["history", "top", "Depths", "device", "n", "feature", "nt", "always", "context", "path", "d", "p", "component", "order", "Depth", "shift", "deep", "length", "scale", "m", "push", "focus", "details", "type", "prime", "window", "shape", "priority", "distance", "tree", "h", "ind", "level", "num", "count", "dep", "project", "t", "time", "thread", "levels", "density", "secure", "dr", "int", "pop", "DEP", "rank", "height", "debug", "node", "print", "der", "dq", "size", "dim", "q", "proc", "skip", "np", "program", "scope", "stack", "mode", "root", "pillar", "python", "trace"], "next_": ["ptrx", " nextval", "nextVal", " Next_", "nextval", "ptrval", "ptr_", "NextVal", " NextVal", " nextx", "Next_", "Nextx", "Nextval", "nextx", " nextVal"], "N": ["n", "M", "NS", "T", "NI", "Ns", "Depth", "X", "I", "R", "L", "NA", "NM", "NN", "NP", "NR", "NT", "H", "O", "V", "TN", "S", "J", "Q", "G", "P", "Num", "A", "E", "D", "NB", "Y", "Len", "Ni", "K", "F", "Z", "C"]}}
{"code": "\\nimport numpy as np\\na= input()\\nK = [1,1,1,2,1,2,1,5,2,2,1,5,1,2,1,14,1,5,1,5,2,2,1,15,2,2,5,4,1,4,1,51]\\n\\nprint(K[int(a)-1])\\n", "target": "701", "substitutes": {"a": ["to", "ae", "p", "g", "xa", "i", " A", "ma", "m", "set", "c", "ita", "ata", "input", "o", "pa", "ada", "isa", "b", "f", "t", "alpha", "apa", "address", "an", "e", "all", "A", "up", "another", "sa", "s", "aka", "at", "aos", "aa", "am", "ya", "eta", "area", "ao"], "K": ["M", "N", "T", "KN", "KR", "MK", "Sch", "X", "R", "L", "KK", "Kind", "DK", "H", "W", "O", "V", "KS", "Kar", "PK", "S", "B", "J", "Q", "G", "P", "Ka", "A", "E", "VK", "D", "Y", "k", "F", "KI", "Z", "KE", "KA", "KB", "C"]}}
{"code": "n = int(input())\\nedges = [[] for _ in range(n)]\\nab = [list(map(int, input().split())) for _ in range(n)]\\ncd = [list(map(int, input().split())) for _ in range(n)]\\nfor i in range(n):\\n    a, b = ab[i]\\n    for j in range(n):\\n        c, d = cd[j]\\n        if a < c and b < d:\\n            edges[i].append(j)\\nmatched = [-1] * n\\ndef dfs(v):\\n    for u in edges[v]:\\n        if visited[u]:\\n            continue\\n        visited[u] = True\\n        if matched[u] == -1 or dfs(matched[u]):\\n            matched[u] = v\\n            return True\\n    return False\\n\\nans = 0\\nfor s in range(n):\\n    visited = [False] * n\\n    if dfs(s):\\n        ans += 1\\nprint(ans)", "target": "591", "substitutes": {"n": ["den", "nr", "N", "x", "nt", "gn", "ln", "p", "en", "on", "name", "ne", "cn", "g", "dn", "names", "norm", "long", "sn", "r", "w", "m", "z", "ns", "san", "o", "nl", "num", "t", "len", "nb", "no", "mn", "nv", "na", "e", "an", "nc", "normal", "nan", "none", "nu", "size", "nn", "l", "number", "np", "q", "ng", "y", "nd"], "edges": [" Edds", "edports", "gedGES", "edged", "Edges", "gedgs", "edsgs", "edge", "gedwards", " Edge", " edgs", " edds", "edsGES", "EDports", " edged", "edds", "Edge", "EDges", "reedged", "Edged", "reedges", "EDged", " edge", "edwards", "edgs", " edwards", "Edports", "reedports", " Edged", "edGES", "edswards", "Edds", " Edges", "gedges", "reedge", "edsges", "EDge", " edGES"], "_": [" the", "ing", "__", "ml", "let", "val", " int", "Se", "pt", " time", "Index", "___", " un"], "ab": ["abe", "aba", "abin", "hab", "abl", "ib", "fab", "AB", "pb", "fb", "rab", "rb", "mb", "rub", "Ab", "ob", "abb", "ada", "abs", "abus", "gb", "tab", "bb", "ad", "ap", "lab", "af", "abc", "eb", "app", "afe", "ub", "bs", "ba", "ac"], "cd": ["fd", "db", "td", "gd", "tc", "cod", "bd", "dl", "od", "ca", "iced", "cmd", "xd", "gb", "dc", "CD", "cz", "pd", "ded", "ad", "cp", "cc", "cb", "dd", "ecd", "cs", "md", "cm", "cr", "ds", "bs", "nd", "rd"], "i": [" ii", "mi", "xi", "x", "ci", "p", "ai", "I", "z", "m", "bi", "ic", "o", "ip", "ind", "t", "si", "li", "ii", "int", "ti", "it", "ini", "l", "pi", "id", "y", "k", "ij", "iu"], "a": ["aq", "x", "ia", "ae", "ac", "ra", "p", "ach", "ai", "ak", "r", "ma", "ea", "la", "ay", "an", "e", "al", "A", "ap", "at", "sa", "au", "oa", "aa", "l", "am", "ar", "ba", "ca"], "b": ["bis", "sb", "bf", "lib", "db", "g", "ib", "r", "bd", " B", "bi", "wb", "fb", "ble", "rb", "o", "mb", "h", "be", "bh", "br", "bc", "gb", "t", "nb", "bus", "bb", "B", "e", "eb", "cb", "l", "y", "bs", "ba"], "j": ["x", "uj", "ja", "js", "aj", "p", "g", "jp", "r", "jc", "z", "jj", "bi", "o", "col", "f", "je", "t", "J", "bj", "li", "ji", "kj", "obj", "xy", "ch", "it", "jump", "q", "l", "dj", "y", "k", "ij"], "c": ["ec", "ce", "con", "x", "ci", "unc", "g", "cn", "xc", "ct", "r", "tc", "m", "z", "ic", "f", "bc", "dc", "mc", "e", "cin", "cp", "cc", "co", "cb", "cu", "l", "cl", "cs", "k", "cm", "cr", "cf", "ca", "ac"], "d": ["p", "db", "g", "di", "td", "dh", "r", "w", "z", "m", "bd", "h", "dt", "f", "df", "xd", "t", "dc", "da", "dr", "de", "e", "D", "l", "dd", "du", "dict", "ds"], "matched": ["filled", "led", "changed", "verified", "locked", "pattern", "released", "itted", "match", "checked", "encrypted", "successful", "registered", "used", "represented", "named", "wed", "sn", "mos", "ordered", "m", "seen", "signed", "specified", "limited", "initialized", "tools", "linked", "failed", "tested", "multi", "directed", "sat", "atched", "balanced", "connected", "affected", "trained", "killed", "regulated", "managed", "found", "listed", " unmatched", "ed", "authorized", "vs", "placed", "sd", "selected", "mat", "fixed", "identified", "defined", "single", "joined", "said"], "v": ["x", "vd", "vv", "p", "vi", "vo", "g", "vp", "value", "w", "us", "uv", "r", "z", "m", "ev", "vy", "o", "h", "V", "vr", "f", "t", "ver", "av", "nv", "e", "lv", "sv", "ve", "q", "l", "vs", "ov", "vt", "y"], "u": ["ut", "bu", "lu", "su", "gu", "um", "util", "mu", "ux", "ue", "ul", "uid", "uni", "us", "uv", "unit", "ju", "hu", "pu", "ua", "uc", "eu", "tu", "ud", "uci", "ru", "up", "un", "fu", "ou", "ur", "ui", "uf", "nu", "au", "cu", "q", "user", "du", "yu", "uu", "U", "iu"], "visited": ["visitted", "visated", "clitted", "Visated", "visified", "Visended", "VISitted", "visiting", "cliting", "timited", "clited", "viewated", "Visitted", "servitted", "clified", "viewited", "serviting", "timended", "Visiting", "VISended", "viewitted", "visended", "navitted", "servited", "VISated", "timitted", "VISited", "viewended", "navended", "Visified", "navited", "servified", "Visited"], "ans": ["x", "ANS", "su", "ants", "ats", "ians", "names", "eds", "outs", "aus", "nets", "lines", "san", "aned", "ns", "anus", "ann", "rans", "rs", "ums", "anas", "ks", "mas", "ins", "offs", "ons", "ms", "amps", "anned", "ids", "ens", "ss", "uns", "an", "posts", "iann", "rors", "nz", "xs", "idents", "ran", "ams", "yes", "ads", "arts", "os", "ds", "said"], "s": ["sw", "su", "ats", "single", "p", "g", "span", "sn", "m", "south", "ns", "ies", "set", "z", "o", "sl", "h", "sing", "ls", "sp", "ss", "S", "si", "e", "sq", "gs", "sm", "ims", "sv", "xs", "sa", "st", "new", "q", "nn", "sd", "se", "os", "y", "es", "ds", "ps", "bs"]}}
{"code": "a, b, c, d = map(int, input().split())\\nans = max(abs(a - b), abs(b - c))\\nans = min(ans, abs(a - c))\\n\\nif ans > d:\\n  print(\"No\")\\nelse:\\n  print(\"Yes\")", "target": "378", "substitutes": {"a": ["n", "x", "ia", "sta", "ae", "ab", "aff", "aj", "ach", "ai", "i", "r", "w", "\u00e1", "ma", "ace", "m", "o", "la", "act", "go", "f", "abs", "alpha", "da", "att", "e", "an", "ad", "v", "A", "al", "obj", "at", "sa", "af", "ao", "s", "app", "au", "aa", "am", "ar", "j", "ba", "ca", "ac"], "b": ["bis", "n", "sb", "ab", "db", "g", "ib", "r", "bg", "z", "bi", "fb", "rb", "bo", "by", "o", "be", "ob", "br", "bc", "gb", "nb", "B", "bb", "v", "bt", "ad", "al", "eb", "cb", "l", "u", "y", "bs", "ba", "back", "ac"], "c": ["ec", "ce", "lc", "n", "ci", "cd", "g", "ct", "rc", "i", "r", "tc", "z", "fc", "col", "h", "cur", "cv", "f", "bc", "t", "dc", "e", "v", "cp", "ch", "s", "cc", "cb", "cu", "q", "u", "cs", "cm", "cr", "cf", "ca", "C", "ac"], "d": ["fd", "n", "x", "p", "g", "di", "i", "td", "r", "m", "z", "default", "h", "dt", "f", "t", "dc", "da", "pd", "v", "e", "de", "s", "end", "D", "do", "q", "l", "dd", "sd", "u", "ds", "nd"], "ans": ["ars", "n", "ANS", "sum", "ians", "ats", "ants", "names", "ai", "irms", "aus", "lines", "us", "aned", "ts", "ates", "vals", "ns", "ann", "man", "mas", "anas", "ks", "offs", "ins", "res", "ons", "ms", "acts", "amps", "ls", "pan", "ents", "ens", "ations", "cons", "mn", "uns", "can", "an", "anks", "users", "aps", "ups", "s", "terms", "xs", "nas", "ams", "aos", "ran", "yes", "ads", "arts", "ds", "vers"]}}
{"code": "import collections\\n\\nA = input()\\nB = input()\\n\\nA_c = collections.Counter(A)\\nB_c = collections.Counter(B)\\nA_c = A_c.values()\\nB_c = B_c.values()\\n\\nA_c = list(A_c)\\nB_c = list(B_c)\\nA_c.sort()\\nB_c.sort()\\nif A_c == B_c:\\n    print(\"Yes\")\\nelse:\\n    print(\"No\")\\n", "target": "490", "substitutes": {"A": ["GA", "Ax", "Each", "CAR", "API", "IA", "Ar", "AH", "AU", "R", "ACC", "ESS", "L", "AL", "AST", " AA", "What", "AB", "H", "AA", "LA", "As", "AR", "AS", "USA", "S", "G", "This", "P", "AP", "CA", "AY", "E", "AF", "AM", "Alice", "SA", "AC", "ACT", "The", "C"], "B": ["Other", "M", "BI", "CB", "T", "RB", "BL", "VB", "BS", "Bs", "SB", "L", "IB", "AB", "BER", "V", "BE", "BC", "S", "Bar", "J", "BR", "WB", "GB", "PB", "BB", "Bern", "TB", "EB", "NB", "Y", "BO", "DB", "BA", "C"], "A_c": ["A_ci", "Agetmc", "A11mc", "Agetarc", "A_cs", "A_pc", "AThemc", "AThearc", "EA_chain", "AJp", "A_ce", " A_p", "IA_cp", "IAThearc", "ACC11tc", "A_chain", "Agetcp", "B_C", "AThecp", "ACC11ci", "AListc", "EA_c", "ACC_ci", "EA_orc", "A_____cp", " A_nc", "IAThemc", "A_cache", "AListcs", "IAThec", "A11tc", "A11ci", "EA_enc", "IA_mc", "A_enc", "A_p", "B_ce", "A_cp", "A_orc", "A_____c", "A11arc", " A_pc", "AThec", " A_cache", "B_cs", "A11c", "B_arc", "B_ci", "A_C", "AJnc", "A_arc", "ACC_tc", "A_mc", "A_____nc", "ACC_c", "A_tc", "A_____p", " A_cp", "Agetc", "IA_c", "A_nc", "AListarc", "AListci", "A11cp", "AJcp", "AJc", "IA_arc", "ACC11c", "IAThecp"], "B_c": ["TB_c", "Two_coll", "BThechain", "BTheco", "Tworenarc", "Two_arc", "Tworenlc", "B\u00c2c", "Tworencoll", "B\u00c2exp", "EB\u00c2cat", "Buffer_fac", "B___cb", "B_ca", "B\u00c2cat", "BS_c", " B_content", "B_chain", "BThecontent", "EB_cont", "B_____chain", "BS___cat", "BMPca", "BMPc", "BS___ci", "EB_c", "B_co", "B\u00c2cont", "BS___ca", "B___c", "BS_ca", "EB\u00c2cont", "Brenarc", " B_chain", "BS_ci", "BMPci", "Bs_cb", "EB\u00c2exp", "B_cc", "B___cc", "B_ce", "B_cb", "B_lc", "Buffer_cc", "Buffer_c", "B_cont", "EB_exp", "B_exp", "B___a", "BMPcat", "Bs_a", "Bs_c", "BS___c", "B___cs", "BThec", "B_____co", "Tworenc", "EB_cat", "B_cs", "Buffer_ci", "B_a", "B_arc", "Two_lc", "EB\u00c2c", "B_ci", "B_cat", "Brencoll", "B___ce", "Brenc", "Two_c", "TB_ce", "B___ci", "B_fac", "B_____c", "B_____content", " B_co", "TB_ci", "Brenlc", "BS_cat", "B_coll", "B_content", "TB_cs", "B___cat", "Bs_cc", "B___ca"]}}
{"code": "# -*- coding: utf-8 -*-\\n\\nimport sys\\nimport os\\n\\n\\nn = int(input())\\nS = list(map(int, input().split()))\\n\\nq = int(input())\\nT = list(map(int, input().split()))\\n\\ncount = 0\\nfor query in T:\\n    if query in S:\\n        count += 1\\nprint(count)", "target": "316", "substitutes": {}}
{"code": "from Queue import Queue\\n\\nn, q = [ int( val ) for val in raw_input( ).split( \" \" ) ]\\nnames = Queue( )\\ntimes = Queue( )\\nfor i in range( n ):\\n\tname, time = raw_input( ).split( \" \" )\\n\tnames.put( name )\\n\ttimes.put( int( time ) )\\n \\nqsum = 0\\noutput = []\\nwhile not times.empty( ):\\n\tname = names.get( )\\n\ttime = times.get( )\\n\tif time <= q:\\n\t\tqsum += time\\n\t\toutput.append( \"{:s} {:d}\".format( name, qsum ) )\\n\telse:\\n\t\ttimes.put( time - q )\\n\t\tnames.put( name )\\n\t\tqsum += q\\n\\nprint( \"\\n\".join( output ) )", "target": "745", "substitutes": {"n": ["N", "nt", "d", "ne", "g", "r", "w", "c", "m", "z", "ns", "note", "nl", "f", "b", "num", "count", "t", "nia", "len", "nb", "mn", "na", "v", "nc", "s", "size", "nn", "number", "l", "np", " N", "j", "index", "y", "k"], "q": ["qv", "max", "x", "queue", "resh", "d", "p", "ue", "g", "iq", "qu", "qt", "quant", "quality", "requ", "r", "w", "weight", "z", "m", "qi", "query", "f", "count", "t", "quit", "Q", "v", "sq", "all", "qq", "eq", "qa", "ch", "qual", "nu", "dq", "que", "quote", "u", "k", "y", "qs"], "val": ["loc", "x", "bal", "pal", "p", "test", "VAL", "ival", "eval", "value", "aval", "vals", "unit", "cho", "el", "lit", "col", "phil", "elt", "tx", "ind", "num", "sel", "rel", " aval", "Val", "als", "viol", "li", "key", "v", "eq", "pl", "il", "var", "item", "pret", "vt", "data"], "names": ["keys", "apps", "modules", "codes", "makers", "banks", "ames", "mates", "packages", "lets", "finals", "lines", "writers", "versions", "ns", "mas", "blocks", "files", "tools", "ties", "chains", "maps", "ons", "ers", "values", "ren", "appers", "ms", "rooms", "ens", "AMES", "ots", "suits", "casters", "ds", "orders", "states", "na", "strings", "frames", "gs", "aps", "members", "nos", "aos", "roots", "builders", "mem", "types", "Names", "groups", "powers", "ones", "sers", "users"], "times": ["events", "seconds", "uses", "ops", "ports", "imes", "months", "projects", "outs", "tags", "ames", "windows", "forces", "ts", "casts", "versions", "ns", "rs", "blocks", "checks", "tests", "ties", "ins", "runs", "rices", "Times", "maps", "amps", "ms", "values", "ries", "abs", "ths", "days", "ps", "parts", "dates", "its", "results", "shots", "scripts", "aps", "ups", "terms", "things", "oms", "cases", "rates", "caps", "types", "groups", "thens", "stats", "errors", "ones", "forms"], "i": [" ii", "ie", "ci", "gi", "on", "I", "r", "c", "z", "ic", "ix", "ip", "ind", "ion", "li", "ii", "v", "ti", "im", "it", "id", "j", "y", "k"], "name": ["Name", "comment", "label", "me", "local", "path", "str", "code", "short", "common", "value", "long", "w", "ma", "zone", "m", "info", "type", "prefix", "parent", "alias", "cap", "case", "term", "tag", "word", "main", "NAME", "part", "ver", "key", "na", "v", "all", "normal", "ame", "group", "new", "title", "base", "size", "year", "l", "user", "var", "lat", "id", "member", "family"], "time": ["tm", "ty", "max", "instance", "port", "d", "point", "code", "timer", "etime", "value", "w", "tc", "length", "c", "ts", "age", "z", "zone", "weight", "TIME", "start", "info", "type", "prime", "tim", "message", "speed", "step", "runtime", "second", "case", "duration", "t", "create", "count", "depth", "check", "key", "string", "delay", "when", "tt", "now", "date", "com", "s", "size", "hour", "year", "ime", "timeout", "lat", "mem", "tz", "mt", "Time", "rate", "sequence", "temp", "trace", "version", "sum"], "qsum": ["uecum", "qcum", "gmean", "iqtotal", " qdev", "qqdev", "dqsim", "gsum", "iqsim", "uenum", "iqnum", "qsu", "iqmean", "qtotal", "qqsu", "iqcum", "qaverage", "qqsum", "qnum", "gum", " qaverage", "dqmean", "qqtotal", "qset", " qum", " qcum", "uesum", " qset", "gaverage", "iqaverage", " qnum", "qum", " qmean", " qtotal", "dqtotal", "iqset", " qsim", "qdev", "qmean", "iqsu", "ueset", "qsim", "dqsum", " qsu", "iqdev", "iqum", "iqsum"], "output": ["content", "next", "environment", "body", "client", "scroll", "summary", "Output", "component", "write", "column", "put", "left", "exit", "successful", "position", "current", "control", "section", "buffer", "connection", "batch", "input", "message", "generated", "outer", "success", "quiet", "display", "result", "you", "config", "hidden", "response", "web", "out", "console", "ou", "public", "csv", "print", "four", "detail", "monitor", "plot", "error", "network", "data", "production", "text"]}}
{"code": "from sys import stdin\\nn = int(stdin.readline())\\nM = [None]\\nM += [list(map(int, stdin.readline().split()[2:])) for i in range(n)]\\nsndf = [None]\\nsndf += [[False, i] for i in range(1, n + 1)]\\ntt = 0\\ndef dfs(u):\\n    global tt\\n    sndf[u][0] = True\\n    tt += 1\\n    sndf[u].append(tt)\\n    for v in M[u]:\\n        if not sndf[v][0]:\\n            dfs(v)\\n    tt += 1\\n    sndf[u].append(tt)\\nfor i in range(1, n + 1):\\n    if not sndf[i][0]:\\n        dfs(i)\\nfor x in sndf[1:]:\\n    print(*x[1:])", "target": "788", "substitutes": {"n": ["a", "nr", "N", "net", "nt", "ni", "d", " nu", "p", "ln", "names", "name", "ne", "g", "cn", "norm", "sn", "w", "c", "m", "z", "ns", "o", "nl", " ng", "num", "count", "t", "nb", "no", "nor", "mn", "na", " m", " nat", "nc", "all", "nm", " ns", "nan", "nu", "nn", "l", "np", " N", "j", "nd", " na"], "M": ["N", "T", "MU", "R", "I", "X", "L", "RM", "m", "Ms", "H", "Mi", "W", "SM", "MM", "V", "MC", "MD", "S", "B", "J", "Q", "G", "P", "A", "MP", "MA", "E", "MS", "D", "TM", "MI", "MN", "MT", "U", "K", "F", "MF", "C"], "i": ["a", "mi", "ki", "xi", "ci", "gi", "p", "vi", "di", "ai", "I", "r", "m", "bi", "yi", "qi", "iti", "ic", "o", "ix", "ip", "ind", "f", "b", "num", "t", "ri", "si", "li", "ii", "ji", "e", "int", "ti", "oi", "s", "it", "zi", "ini", "ui", "l", "pi", "phi", "id", "j", "y", "k", "index", "ij", "ik", "iu", "hi"], "sndf": ["sldg", "xnowe", "sldf", "sntf", "sndonly", "snds", "sldonly", "snge", " sndv", "snowtf", "sndfi", "Sndf", "Sndfi", "Sntonly", "xndtf", "Sndfo", "sldfi", "swinsf", "snowfs", " snde", "sngonly", "snowf", "sndfs", "sndtf", " sndfc", " slds", "sfine", "ssdg", "ssdfi", "Sntfi", "sntsf", "snte", "sfinf", "Snde", "ssendfc", "sldfo", "sundv", "xnde", "xnowf", "sfdfi", "sfdf", "sngf", "sldfc", "sndsf", "xnowtf", "swinf", " sldfi", "ssendv", "sndfo", "slde", "sntfs", "swinv", "ssendf", "sldv", "snde", "snttf", "Sndonly", "sntfc", "sfde", "sngv", "sunds", "Sntf", "swinfo", "sntfo", " slde", "sNDg", "xnowfs", "sndg", "sundtf", "Sndv", " sldf", " sldfc", " sndfi", "sntfi", "Sntsf", "Snte", "sndfc", "slds", " snds", " sldv", "snowe", "ssde", "sntonly", "sundf", "sldsf", "sfdg", "sfinv", "sntg", "Sndsf", "Sntg", "Sntfo", "sNDe", "sunde", "sfinfi", "sntv", "xndf", "snts", "sNDv", "sundfs", "sndv", "sNDf", "ssdf", "xndfs", "Sntv", "ssende", "Sndg"], "tt": ["tm", "ty", "rr", "nt", "tl", "mm", "Print", "ert", "tv", "test", "ct", "tty", "qt", "td", "utt", "txt", "tc", "ts", "ffff", "jj", "text", "Time", "gt", "tp", "tx", "ett", "dt", "elt", "tk", "stable", "t", "time", "unt", "pt", "bb", "tu", "ff", "itt", "att", "tn", "htt", "tf", "rt", "times", "TT", "tar", "kt", "yt", "ott", "dd", "fee", "yy", "vt", "mt", "pp", "tif", "attr", "options", "ft"], "u": ["ut", "bu", "lu", "su", "gu", "um", "mu", "ul", "ue", "uid", "uni", "us", "uv", "ju", "hu", "pu", "you", "t", "uc", "eu", "tu", "ud", "ru", "up", "ou", "ur", "it", "ui", "uf", "au", "cu", "user", "du", "yu", "uu", "U", "iu"], "v": ["qv", "gu", "vv", "p", "vi", "vo", "tv", "va", "value", "w", "uv", "c", "m", "ev", "vy", "o", "nov", "h", "val", "vr", "cv", "V", "f", "b", "vc", "t", "vol", "iv", "ver", "av", "nv", "e", "lv", "vm", "sv", "ve", "q", "l", "vs", "var", "j", "vt", "k", "y"], "x": ["wx", "xi", "ex", "rex", "xe", "xes", "xc", "cf", "xa", "X", "rx", "z", "xxxx", "xt", "ctx", "hex", "xxx", "ix", "tx", "sex", "xd", "fx", "xy", "xf", "st", "xs", "mx", "xb", "dx", "nex", "xx", "yx", "y", "px", "xp", "zx"]}}
{"code": "n,a,b= list(map(int, input().split()))\\nif a>b:\\n    print(\"0\")\\n    exit(0)\\nif n==1:\\n    if a!=b:\\n        print(\"0\")\\n    else:\\n        print(\"1\")\\n    exit(0)\\nn-=2;b-=a;a=0\\nprint(b*n+1)", "target": "395", "substitutes": {"n": ["N", "x", "nt", "d", "p", "en", "ne", "cn", "dn", "i", "r", "w", "c", "m", "ns", "o", "nl", "h", "f", "num", "t", "nb", "no", "mn", "na", "v", "e", "an", "nc", "s", "nan", "nu", "q", "l", "nn", "np", "j", "y"], "a": ["x", "sta", "ae", "to", "ac", "ab", "ta", "aj", "p", "d", "ach", "g", "ai", "i", "r", "w", "c", "ma", "m", "set", "ata", "ga", "o", "h", "pa", "act", "f", "\u00e4", "t", "auto", "alpha", "da", "na", "an", "e", "A", "at", "sa", "s", "au", "oa", "aa", "l", "am", "ar", "y", "area", "ba", "ca"], "b": ["bis", "sb", "ab", "d", "p", "db", "beta", "g", "ib", "i", "r", "c", "m", "z", "bi", "fb", "rb", "o", "mb", "h", "be", "ob", "bh", "f", "num", "bc", "t", "gb", "nb", "B", "bb", "v", "e", "s", "eb", "base", "cb", "l", "j", "y", "bs", "ba"]}}
{"code": "N=int(input()) \\nL = sorted([int(i) for i in input().split()], key=lambda x: x)\\n\\nfoodCount = 0\\nfor i in range(0,len(L), 2):\\n   foodCount += min(L[i], L[i+1])\\n\\nprint(foodCount)\\n", "target": "215", "substitutes": {"N": ["n", "M", "NS", "T", "Ns", "X", "I", "R", "NA", "NN", "H", "O", "V", "S", "B", "J", "Q", "G", "P", "A", "E", "D", "Ni", "K", "F", "Z", "FN", "C"], "L": ["M", "NL", "DL", "List", "BL", "PL", "SL", "Log", "X", "I", "LC", "R", "AL", "TL", "LR", "W", "LU", "LA", "LD", "V", "SQL", "S", "FL", "LT", "B", "ML", "P", "LI", "SSL", "Long", "RL", "IL", "LG", "D", "Lu", "l", "CL", "LL", "XL", "LE", "LM", "LS", "LP", "EL"], "i": ["\u00ed", "mi", "ki", "n", "xi", "x", "ogi", "uri", "ci", "gi", "cli", "vi", "g", "di", "ai", "I", "c", "m", "bi", "ami", "yi", "qi", "ic", "ix", "ski", "ip", "iri", "ind", "f", "b", "io", "si", "sim", "ii", "li", "key", "ei", "ori", "int", "ti", "oi", "v", "iy", "im", "it", "ini", "zi", "ui", "\u0438", "q", "l", "pi", "phi", "id", "y", "j", "index", "ij", "ik", "asi", "iu"], "foodCount": ["healthCount", " foodSize", "foodSize", "FoodFlag", " foodCategory", "healthyCount", "healthFlag", " foodLength", "foodAmount", "foodFlag", "foodCounter", "foodCategory", "healthAmount", "feedAmount", "Foodcount", "fuelCount", "foodLength", "fuelLength", "feedCount", "foodcount", "healthcount", "FoodSize", "feedcount", "healthyCategory", "fuelCounter", "healthyLength", "healthyCounter", " foodcount", " foodCounter", " foodFlag", " foodAmount", "FoodCount", "healthSize", "fuelCategory"]}}
{"code": "def baseConv(n,ro,ri=10):\\n    n = int(str(n),base=ri)\\n    s = \"\"\\n    nums = \"0123456789abcdefghijklmnopqrstuvwxyz\"\\n    while n:\\n        s += nums[n%ro]\\n        n //= ro\\n    return s[::-1]\\n  \\nn,k = map(int,input().split())\\nprint(len(baseConv(n,k)))", "target": "719", "substitutes": {"n": ["a", "N", "x", "nt", "gn", "d", "p", "ln", "en", "names", "name", "ne", "cn", "g", "dn", "arn", "i", "sn", "r", "c", "m", "ns", "o", "h", "ren", "present", "b", "num", "fn", "t", "len", "nb", "no", "mn", "nv", "na", "v", "an", "int", "nc", "yn", "nm", "nan", "new", "nu", "nn", "l", "number", "np", "yes", "u", "ll", "ng", "rn", "j", "y"], "ro": ["role", "rot", "cro", "rio", "ring", "ra", "rom", "mo", "mu", "po", "vo", "R", "i", "ros", "re", "r", "scale", "c", "ref", "rob", "rs", "bo", "res", "o", "Ro", "iro", "core", "b", "stro", "no", "lo", "roid", "ru", "row", "roc", "ur", "rt", "co", "do", "uro", "RO", "ho", "pro", "hi", "ry", "rd"], "ri": ["rid", "role", "mi", "ki", "nr", "th", "rio", "uri", "ni", "ra", "ci", "ir", "rib", "rise", "vi", "po", "rc", "i", "RI", "r", "bi", "rs", "rob", "ric", "io", "rit", "ris", "si", "ti", "rt", "base", "phi", "pi", "fi", "iri", "hi", "ry", "rd"], "s": ["a", "x", "sw", "str", "ats", "js", "p", "eds", "g", "ows", "i", "r", "w", "c", "ts", "m", "set", "ns", "rs", "reads", "ins", "h", "ms", "ls", "abs", "b", "t", "S", "ss", "its", "ings", "results", "out", "v", "gs", "sq", "ws", "ims", "sv", "sts", "cs", "y", "es", "os", "qs", "ds", "ps"], "nums": ["Nums", " nms", "enums", "enoms", "nabis", " nabis", "numbers", "snews", "noms", "Nms", "enews", " noms", "enms", " news", "snabis", " numbers", "nms", "news", "Numbers", "snums", "Noms", "snumbers", "enabis", "enumbers"], "k": ["ck", "km", "ki", "ek", "uk", "x", "kr", "kh", "kl", "p", "kar", "ak", "ke", "i", "kid", "m", "dk", "ks", "kw", "ko", "tk", "kok", "kj", "v", "ok", "ku", "q", "l", "u", "kk", "cs", "ka", "sk", "K", "ik", "kan", "mk"]}}
{"code": "n = int(input())\\nl = list(map(int,input().split()))\\nans = 0\\nnow = l[0]\\ncount = 0\\nfor i in range(1,n):\\n    if now >= l[i]:\\n        now = l[i]\\n        count += 1\\n        ans = max(ans,count)\\n    else:\\n        count = 0\\n        now = l[i]\\nprint(max(ans,count))", "target": "623", "substitutes": {"n": ["N", "x", "net", "nt", "ln", "d", "p", "ne", "cn", "g", "sn", "w", "c", "m", "ns", "nl", "num", "t", "nia", "nb", "no", "mn", "na", "v", "nc", "un", "nu", "nn", "q", "np", "j", "k"], "l": ["lc", "lu", "els", "lf", "tl", "kl", "ln", "ld", "p", "lt", "g", "lb", "L", "r", "sql", "c", "ml", "m", "dl", "el", "lit", "nl", "sl", "la", "ls", "jl", "b", "t", "lis", "rl", "lo", "acl", "lists", "fl", "li", "lp", "v", "e", "list", "al", "lv", "s", "lr", "ol", "bl", "ll", "pl", "le", "il"], "ans": ["ars", "ANS", "nt", "ants", "ats", "ians", "beans", "actions", "names", "outs", "ames", "aus", "asks", "lines", "ts", "ns", "ann", "rans", "ks", "anas", "offs", "ins", "ess", "vers", "ons", "ms", "amps", "angs", "ls", "pan", "ids", "ents", "ens", "anc", "orders", "mn", "ings", "can", "an", "posts", "anks", "aps", "oss", "anes", "s", "xs", "ions", "nas", "aos", "arts", "cs", "os", "es", "ones"], "now": ["next", "hold", "sw", "before", "self", "max", "always", "aj", "on", "get", "this", "store", "we", "start", "current", "down", "set", "wait", "og", "old", "mount", "save", "ess", "gm", "grab", "ob", "ready", "time", "temp", "wa", "force", "off", "obj", "at", "when", "tt", "date", "st", "first", "app", "here", "new", "currently", "NOW", "handle", "never", "then", "today", "tmp", "aw", "Now", "after", "ow"], "count": ["next", "con", "th", "max", "nt", "cont", "p", "cd", "cycle", "child", "ct", "span", "ount", "length", "c", "z", "ns", "process", "old", "info", "total", "ctx", "col", "val", "result", "ind", "num", "ctr", "t", "part", "cond", "nb", "pt", "len", "force", "time", "conf", "add", "v", "list", "cache", "all", "st", "ch", "cc", "found", "size", "counter", "nn", "Count", "id", "cs", "index", "sum"], "i": ["mi", "xi", "x", "uri", "me", "gi", "di", "ai", "I", "m", "bi", "qi", "info", "ic", "ski", "ix", "ip", "ind", "num", "io", "si", "li", "key", "ji", "v", "ori", "ii", "ti", "oi", "e", "im", "it", "zi", "ini", "q", "pi", "phi", "item", "id", "j", "index", "y", "ij"]}}
