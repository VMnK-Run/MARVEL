{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main {\\n    static final String YES = \"Yes\";\\n    static final String NO = \"No\";\\n\\n    // Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\\n    public static void main(String[] args) throws Exception {\\n        final Scanner sc = new Scanner(System.in);\\n        long N;\\n        N = sc.nextLong();\\n        long K;\\n        K = sc.nextLong();\\n        long Q;\\n        Q = sc.nextLong();\\n        long[] A = new long[(int)(Q)];\\n        for(int i = 0 ; i < Q ; i++){\\n                A[i] = sc.nextLong();\\n        }\\n        solve(N, K, Q, A);\\n    }\\n\\n    static void solve(long N, long K, long Q, long[] A){\\n        long[] AnswerNum = new long[(int)(N)];\\n        Arrays.fill(AnswerNum, 0);\\n\\n        for (long ai: A) {\\n            AnswerNum[(int)(ai - 1)]++;\\n        }\\n\\n        for (long ANi: AnswerNum) {\\n            if(ANi > Q - K) System.out.println(YES);\\n            else System.out.println(NO);\\n        }\\n    }\\n}\\n", "target": "102", "substitutes": {"YES": ["Yes", "Some", "Yeah", "Sure", "SO", "DO", "NC", "Y", "INFO", "Success", "yes", "No", "Maybe", "SS", "N", "GO", "MS", "PS", "Hello", "OK", "Yep", "XX", " Yes", "ANY", "Hi", "KO"], "NO": ["Yes", " No", "no", "SO", "RO", "B", "Mo", "IO", " OK", "OUT", "None", "No", "ERROR", "NAME", "NN", "SS", "MODE", "N", "GO", "NR", "UE", "MO", "OK", "ANY", "O", "KO"]}}
{"code": "\\nimport java.util.Scanner;\\n\\n class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int n= in.nextInt();\\n        int m=in.nextInt();\\n        int min=1, max=n;\\n        boolean flag=false;\\n        for(int i=0;i<m;i++){\\n            int lb=in.nextInt();\\n            int ub=in.nextInt();\\n\\n            if(lb>=min)\\n                min=lb;\\n            if(ub<=max)\\n                max=ub;\\n\\n            if(ub<min || lb >max){\\n                flag=true;\\n            }\\n\\n        }\\n        if(flag)\\n            System.out.println(0);\\n        else {\\n            int ans = max - min + 1;\\n            System.out.println(ans);\\n        }\\n    }\\n}\\n", "target": "124", "substitutes": {"in": ["f", "ner", "string", "between", "data", "is", "input", "out", "lin", "token", "log", "err", "din", "pin", "socket", "inner", "readable", "nin", "l", "exec", "IN", "inn", "gc", "con", "c", "doc", "bin", "fe", "reader", "isin", "query", "kin", "inc", "ax", "serv", "buffer", "re", "this", "info", "user", "url", "s", "as", "x", "ln", "rin", "ini", "login", "again", "line", "ins", "conn", "connection", "init", "an", "In", "lib", "r"], "n": ["f", "nan", "nc", "nt", "ni", "l", "c", "d", "num", "y", "u", "e", "o", "s", "p", "b", "x", "all", "ns", "ln", "en", "nb", "w", "N", "z", "k", "mn", "an", "nn", "a", "net"], "m": ["f", "h", "dim", "mc", "mx", "l", "v", "end", "c", "d", "ms", "y", "num", "cm", "u", "e", "o", "j", "mm", "s", "p", "b", "x", "om", "en", "dm", "M", "z", "k", "mn", "sm", "an", "r"], "min": ["li", "sort", "name", "none", "mini", "is", "don", "range", "me", "count", "number", "index", "limit", "low", "ai", "ignore", "little", "mid", "just", "pre", "na", "left", "sum", "only", "mins", "area", "diff", "first", "d", "pos", "small", "Min", "section", "s", "p", "un", "b", "x", "sub", "sa", "en", "ini", "start", "len", "sol", "part", "size", "mn", "mean", "init", "an", "from", "skip", "MIN", "span"], "max": ["rand", "nd", "div", "wrap", "huge", "none", "co", "range", "act", "no", "az", "ad", "id", "count", "index", "default", "mid", "ase", "total", "patch", "last", "sum", "end", "conf", "c", "rest", "ca", "med", "can", "ax", "mad", "p", "mod", "x", "w", "wh", "res", "start", "Max", "head", "MAX", "part", "size", "k", "work", "right", "day", "rank", "scale"], "i": ["f", "li", "I", "vi", "mini", "di", "ni", "gi", "ai", "io", "ji", "si", "l", "ui", "v", "c", "ie", "zi", "u", "pi", "o", "j", "info", "ii", "qi", "p", "ti", "b", "hi", "ind", "ini", "ib", "im", "z", "ci", "mi", "iu", "ip", "xi", "chi", "ix", "multi", "bi", "lc"], "lb": ["li", "pb", "acl", "el", "fc", "ul", "base", "lin", "ab", "lu", "bl", "pl", "lf", "ai", "l", "wb", "ob", "ll", "lv", "fb", "layer", "cl", "rl", "dl", "ls", "pa", "lim", "rb", "af", "loc", "lp", "p", "sub", "b", "amp", "ln", "nl", "au", "ib", "len", "cp", "qa", "lt", "lr", "nn", "la", "lc", "eb", "lab"], "ub": ["f", "gb", "pb", "hub", "ul", "plug", "rub", "ab", "ubs", "pl", "id", "lu", "uba", "l", "ue", "ob", "fab", "fb", "up", "c", "uc", "bug", "rb", "lim", "ur", "af", "bb", "loc", "rib", "sub", "p", "b", "job", "sup", "cb", "rc", "ud", "ib", "im", "cp", "adr", "lab", "la", "eb", "pub", "um", "q", "r"], "flag": ["f", "kind", "leaf", "debug", "ish", "log", "err", "group", "Flag", "count", "wave", "binary", "lag", "id", "ret", "bool", "bad", "wait", "like", "sign", "bug", "cat", "bit", "fun", "info", "die", "af", "flags", "year", "field", "offset", "status", "zag", "ind", "bag", "ag", "back", " count", "start", " flags", "len", "mask", "line", " bug", "an", "tag", "any", "force"], "ans": ["nan", "ases", "list", "ANS", "cons", " scans", "ann", "anon", "anas", "AN", "annels", "na", "anc", "ano", "ents", "scan", "can", "plan", "lan", "ls", "ace", "ions", "ids", "aus", "flags", "as", "ns", "ln", "ants", " spans", "os", "anes", "ins", "ras", "an", "outs", "cmp", "ars", "nn", "span", "ana", "ons"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\t\tint i1, i2, i3;\\n\t\tScanner sc = new Scanner(System.in);\\n\t\ti1 = sc.nextInt();\\n\t\ti2 = sc.nextInt();\\n\t\ti3 = sc.nextInt();\\n\t\tif(i1 < i2 && i2 < i3)\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\telse\\n\t\t\tSystem.out.println(\"No\");\\n\t}\\n}", "target": "168", "substitutes": {"i1": ["isi3", " i01", "ki101", " i101", "ki1", "i101", "xi3", "isi01", " iOne", "pi1", "isi1", "I1", "si01", "I71", "pi3", "pi101", "si71", "i01", "ki4", " i71", "xi1", "i4", "xi101", "pi4", "I01", "i71", "siOne", "iOne", " i4", "isi101", "ki3", "xi01", "si1", "IOne"], "i2": ["int2", "int4", "i82", "I2", "int82", " i82", "int1", "xi3", "xi62", "qiTwo", " i62", "pi82", "pi1", "I1", "pi62", "iTwo", "qi62", "piTwo", "intTwo", "xi2", "xi1", "i4", "int3", "i62", "int62", "ITwo", "qi2", "pi4", "pi2", "I62", " i4", " iTwo", "qi3"], "i3": ["isi3", "i83", "i13", "i18", "I5", "I3", "ii493", " i23", "int5", "int6", "intThird", "isi493", " i6", "ii3", "isi13", "ti3", "int83", "i5", "I6", "isi18", "i493", " i493", "tiThird", "I83", "i23", "ti23", "int3", " i83", " i13", "iThird", " i18", "ti5", "i6", "ii18", "ii13", " iThird", " i5", "int23"], "sc": ["parse", "osc", "ch", "cont", " Sc", "nc", "sb", "sche", "cle", "cv", "search", "esc", "bc", "cc", "asc", "pc", "ss", "sec", "scope", "ca", "SC", "c", "scan", "cs", "se", "uc", "sw", "cl", "com", "Sc", "system", "s", "dc", "sq", "sci", "cr", "sync", "rc", "cer", "enc", "ci", "sp", " SC", "ct", "sch", "ec", "tc", "cur", "coll", "lc"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc=new Scanner(System.in);\\n\t\t\\n\t\tint n=sc.nextInt();\\n\t\t\\n\t\t\\n\t\tint count=0;\\n\t\tfor (int i=1;i<=n;i++) {\\n\t\t\tint p= sc.nextInt();\\n \\n\t\t\tif (p!=i) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n \\n\t\t}\\n\t\tif(count<=2) {\\n\t\t\tSystem.out.println(\"YES\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t}\\n\\n\t}\\n\\n}\\n", "target": "82", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(final String[] args) {\\n        final FastReader s=new FastReader();\\n        int n = s.nextInt();\\n        int last = 0;\\n        long sum = 0;\\n        while (n-- > 0)\\n        {\\n            int x = s.nextInt();\\n            if(x<last) {\\n                sum+= last-x;\\n            }\\n            last = Math.max(last, x);\\n        }\\n        System.out.println(sum);\\n    }\\n\\n    static class FastReader\\n    {\\n        BufferedReader br;\\n        StringTokenizer st;\\n        public FastReader() { br = new BufferedReader(new InputStreamReader(System.in)); }\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try { st = new StringTokenizer(br.readLine()); }\\n                catch (final IOException  e) { e.printStackTrace(); }\\n            }\\n            return st.nextToken();\\n        }\\n        int nextInt() { return Integer.parseInt(next()); }\\n        long nextLong() { return Long.parseLong(next()); }\\n        double nextDouble() { return Double.parseDouble(next()); }\\n        String nextLine() {\\n            String str = \"\";\\n            try { str = br.readLine(); }\\n            catch (final IOException e) { e.printStackTrace(); }\\n            return str;\\n        }\\n    }\\n}", "target": "202", "substitutes": {"s": ["f", "http", "h", "is", "abs", "sb", "out", "in", "ssl", "sv", "m", "gs", "si", "l", "service", "S", "ss", "server", "g", "v", "se", "d", "ls", "u", "e", "o", "js", "qs", "services", "xs", "p", "b", "bis", "sets", "ns", "sf", "sync", "utils", "ps", "ws", "sl", "sp", "bs", "os", "ins", "strings", "ses", "rs", "storage", "fs", "sym", "r"], "n": ["f", "h", "ne", "nc", "in", "nt", "count", "m", "non", "l", "left", "v", "t", "c", "num", "d", "y", "max", "sn", "next", "u", "e", "o", "j", "p", "un", "b", "ns", "nl", "nb", "w", "N", "len", "z", "k", "i", "nn", "fn"], "last": ["f", "value", "nd", "li", "base", "one", "recent", "no", "nt", "length", "id", "count", "number", "index", "latest", "key", "active", "total", "left", "min", "v", "end", "push", "first", "style", "max", "zero", "y", "next", "cycle", "always", "this", "j", "current", "full", "p", "all", "sync", "start", "z", "size", "right", "Last", "now", "prev", "old", "ix", "scale"], "sum": ["f", "sort", "cal", "ul", "miss", "summary", "in", "log", "length", "cum", "count", "index", "cost", "total", "ass", "gram", "min", "up", "sign", "who", "first", "um", "num", "max", "su", "use", "zero", "neg", "empty", "dot", "add", "fat", "mem", "fill", "size", "mean", "work", "spread", "sh", "average", "loss", "alpha", "scale", "vol", "Sum"], "x": ["f", "xy", "xc", "val", "h", "lex", "xx", "in", "X", "wx", "index", "l", "v", "t", "c", "ww", "xt", "tx", "d", "max", "y", "dx", "ext", "fx", "ax", "ex", "u", "e", "j", "xs", "p", "w", "xxx", "rx", "z", "px", "k", "i", "xi", "ix", "xp"], "br": ["bm", "obj", "tr", "shr", "rt", "bh", "ler", "cro", "ab", "sb", "bl", "err", "bt", "bro", "fr", "bc", "fore", "pr", "orb", "arr", "ver", "dr", "B", "raf", "mr", "bar", "vr", "buf", "er", "fe", "rb", "hr", "ur", "bb", "iter", "p", "b", "cr", "src", "ber", "sr", "obl", "or", "sp", "BR", "cur", "browser", "bridge", "be", "Br", "lr", "fb", "r", "rob"], "st": ["store", "stat", "sta", "tr", "inst", "string", "rt", "St", "is", "stri", "sb", "bl", "bt", "fr", " est", "pr", "ut", "stable", "l", "ist", "ss", "ost", "est", "t", "rest", "ST", "se", "style", "sw", "cl", "d", "fe", "sty", "ar", "ft", "e", "pt", "sts", "stage", "p", "sa", "ust", "cr", "src", "ste", "ast", "pe", "sr", "sc", "sl", "sp", "struct", "ct", "art", "cur", "be", "stress", "std", "Str", "sth", "r"], "str": ["f", "sta", "tr", "div", "exp", "ner", "name", "string", "data", "stri", "out", "err", "id", "code", "inner", "fr", "pr", "arr", "dr", "text", "t", "c", "result", "style", "doc", "entry", "kr", "pos", "e", "url", "pt", "iter", "p", "b", "STR", "pass", "sr", "enc", "char", "sl", "z", "sp", "line", "dict", "Str", "r"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main {\\n    static class Scan {\\n        private byte[] buf=new byte[1024];\\n        private int index;\\n        private InputStream in;\\n        private int total;\\n        public Scan()\\n        {\\n            in=System.in;\\n        }\\n        public int scan()throws IOException\\n        {\\n            if(total<0)\\n            throw new InputMismatchException();\\n            if(index>=total)\\n            {\\n                index=0;\\n                total=in.read(buf);\\n                if(total<=0)\\n                return -1;\\n            }\\n            return buf[index++];\\n        }\\n        public int scanInt()throws IOException\\n        {\\n            int integer=0;\\n            int n=scan();\\n            while(isWhiteSpace(n))\\n            n=scan();\\n            int neg=1;\\n            if(n=='-')\\n            {\\n                neg=-1;\\n                n=scan();\\n            }\\n            while(!isWhiteSpace(n))\\n            {\\n                if(n>='0'&&n<='9')\\n                {\\n                    integer*=10;\\n                    integer+=n-'0';\\n                    n=scan();\\n                }\\n                else throw new InputMismatchException();\\n            }\\n            return neg*integer;\\n        }\\n        public double scanDouble()throws IOException\\n        {\\n            double doub=0;\\n            int n=scan();\\n            while(isWhiteSpace(n))\\n            n=scan();\\n            int neg=1;\\n            if(n=='-')\\n            {\\n                neg=-1;\\n                n=scan();\\n            }\\n            while(!isWhiteSpace(n)&&n!='.')\\n            {\\n                if(n>='0'&&n<='9')\\n                {\\n                    doub*=10;\\n                    doub+=n-'0';\\n                    n=scan();\\n                }\\n                else throw new InputMismatchException();\\n            }\\n            if(n=='.')\\n            {\\n                n=scan();\\n                double temp=1;\\n                while(!isWhiteSpace(n))\\n                {\\n                    if(n>='0'&&n<='9')\\n                    {\\n                        temp/=10;\\n                        doub+=(n-'0')*temp;\\n                        n=scan();\\n                    }\\n                    else throw new InputMismatchException();\\n                }\\n            }\\n            return doub*neg;\\n        }\\n        public String scanString()throws IOException\\n        {\\n            StringBuilder sb=new StringBuilder();\\n            int n=scan();\\n            while(isWhiteSpace(n))\\n            n=scan();\\n            while(!isWhiteSpace(n))\\n            {\\n                sb.append((char)n);\\n                n=scan();\\n            }\\n            return sb.toString();\\n        }\\n        private boolean isWhiteSpace(int n)\\n        {\\n            if(n==' '||n=='\\n'||n=='\\r'||n=='\\t'||n==-1)\\n            return true;\\n            return false;\\n        }\\n    }\\n    public static void main(String args[]) throws IOException {\\n        Scan input=new Scan();\\n        int test=1;\\n//        test=input.scanInt();\\n        StringBuilder ans=new StringBuilder(\"\");\\n        for(int tt=1;tt<=test;tt++) {\\n            long a=input.scanInt();\\n            long b=input.scanInt();\\n            long c=input.scanInt();\\n            long d=input.scanInt();\\n            long max=Long.MIN_VALUE;\\n            if(0>=a && 0<=b) {\\n                max=0;\\n            }\\n            if(0>=c && 0<=d) {\\n                max=0;\\n            }\\n            max=Math.max(max,a*c);\\n            max=Math.max(max,a*d);\\n            max=Math.max(max,b*c);\\n            max=Math.max(max,b*d);\\n            ans.append(max);\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "244", "substitutes": {"buf": ["Buffer", "map", "fd", "data", "buff", "bh", "db", "context", "ref", "bc", "config", " buff", "Buff", "block", "wb", "queue", "port", "ctx", "uc", "result", "bp", "ff", "vec", "array", "seq", "buffer", "batch", "rb", "cache", "img", "alloc", "uf", "flush", "b", "bag", "src", "cb", "tmp", "rc", "pool", " buffer", "mem", "cap", "bytes", "cur", "func", "fb"], "index": ["value", "name", "Index", "version", "token", "prefix", "element", "length", "id", "search", "number", "count", "key", "active", "limit", "post", "initial", "ticket", "sum", "type", "page", "scan", "num", "pointer", "pos", "max", "array", "query", "fix", "inc", "buffer", "weight", "position", "current", "iter", "offset", "open", "x", "row", "error", "slice", "pass", "ini", "start", "append", "part", "i", "connection", "multi", "alpha", "scale"], "in": ["f", "val", "path", "data", "is", "out", "lin", "ssl", "token", "err", "din", "pin", "m", "inner", "image", "binary", "nin", "l", "IN", "inn", "min", "ios", "con", "r", "c", "doc", "bin", "reader", "kin", "isin", "resource", "inc", "read", "buffer", "ex", "source", "serv", "url", "s", "as", "b", "pass", "rin", "file", "ini", "login", "win", "line", "ins", "conn", "i", "connection", "inet", "In", "gin", "socket"], "total": ["value", "valid", "list", "translation", "base", "padding", "buff", " tot", "token", "no", "nt", "length", "post", "count", "limit", "local", "used", "active", "otal", "sum", "meta", "min", "t", " Total", "result", "page", "toc", "type", "complete", "max", "zero", "shared", "buffer", "info", " whole", "iter", "current", "full", " TOTAL", "serial", "offset", "fat", "all", "error", "len", "partial", "part", "quant", "size", "qa", "Total", "body", "multi", "scale", "percent"], "integer": ["value", "string", "issue", "atomic", "element", "raction", "internal", "length", "id", "image", "number", "binary", "object", "attribute", "initial", "null", "integ", "unsigned", "annot", "inter", "oct", "optional", "iterator", "bug", "num", "zero", "ident", "array", "uint", "external", "operator", "inc", "digit", "ment", "ract", "auto", "negative", "iter", "current", "offset", "entity", "atan", "error", "information", "util", "basic", "multiple", "quant", "consider", "average", "init", "pixel", "vert", "neutral", "i", "inf"], "n": ["f", "nan", "name", "no", "m", "inner", "number", "l", "t", "c", "rn", "un", "ns", "ln", "en", "pn", "enc", "yn", "init", "sign", "span", "nd", "h", "br", "ne", "none", "nc", "nt", "na", "min", "u", "j", "dn", "z", "node", "gn", "non", "null", "note", "inn", "g", "byn", "num", "y", "network", "ng", "sn", "adj", "e", "o", "nw", "cn", "s", "p", "b", "all", "N", "k", "mn", "i", "an", "fn", "syn", "net", "on", "ner", "not", "nin", "v", "d", "x", "nb", "w", "len", "conn", "nu", "nn", "el", "r"], "neg": ["nan", "arg", "plus", "version", "err", "priv", "cost", "bad", "sec", "norm", "rel", " negative", "bit", "position", "axis", "offset", "un", "atom", "size", "nor", "init", "neutral", "gin", "Neg", "comment", "ne", "nil", "don", "itive", "limit", "unit", "min", "diff", "minus", "rev", "bug", "digit", "git", "sin", "beta", "tag", "valid", "ogo", "iv", "anti", "log", "non", "null", "byn", "empty", "pos", "dest", "iter", "nl", "isu", "oc", "nov", "rot", "nr", "ack", "orig", "ko", "not", "bn", "sum", "ok", "bin", "zero", "dec", "loc", "negative", "error", "len", "pri", "coll", "uu"], "doub": ["loubt", "foubt", "moby", "adoub", "Doubt", "foby", "Dobb", "Dupp", "lleneck", "sdoubt", "sdoub", "subb", " doubt", " doby", "soor", "dobb", "foub", "adoor", "sdobb", "adoubt", "fleneck", "dleneck", "dubb", "door", "loub", "Doub", " dupp", "Dubb", "soub", "adubb", "mouch", "fouch", "doubt", " dubb", "moubt", "moub", "fobb", " door", "sdupp", "adobb", "dupp", " douch", " dleneck", "douch", "doby", "lobb", "soubt", " dobb"], "temp": ["tem", "sat", "mini", "base", "out", "prefix", "gi", "key", "local", "unit", "zip", "null", "sum", "wait", "diff", "min", "area", "c", "cat", "let", "num", "empty", "max", "pos", "mix", "inc", "adj", "frac", "width", "emp", "Temp", "api", "current", "iter", "pt", "loc", "offset", "tmp", "mag", "var", "extra", "col", "partial", "fake", "size", "i", "init", "flat", "tc", "clean"], "sb": ["gb", " db", "obj", "bf", "pb", " SB", " ub", "db", "ub", "sv", "bc", "sg", " sd", "si", "ss", " eb", "bp", "su", " outp", "buffer", "rb", "SB", "sa", "b", " kb", "nb", "cb", "sf", "bs"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = Integer.parseInt(sc.nextLine());\\n\t\tList<String> list = new ArrayList<String>();\\n\t\tString[] mark ={\"S\",\"H\",\"C\",\"D\"};\\n\\n\t\tfor(int i=0;i<=3;i++){\\n\t\t\tfor(int j=0;j<=12;j++){\\n\t\t\t\tlist.add(mark[i]+\" \"+(j+1));\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0;i<=n-1;i++){\\n\t\t\tlist.remove(sc.nextLine());\\n\t\t}\\n\t\tfor(String ans:list){\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\t}\\n}", "target": "189", "substitutes": {"sc": ["ner", "osc", "fc", "mc", " Sc", "RC", "nc", "sb", "cv", "cc", "bc", "esc", "pc", "ck", "ss", "scope", "anc", "ca", "SC", "c", "scan", "cs", "sw", "cl", "se", "uc", "cus", "Sc", "system", "dc", "sa", "sci", "cr", "src", "sf", "sync", "rc", "sr", "sk", "soc", "ci", "sp", " SC", "sch", "sh", "ec", "lc", " scr"], "n": ["f", "h", "ne", "nc", "in", "nt", "ni", "m", "number", "l", "g", "t", "c", "d", "num", "network", "y", "sn", "nw", "e", "o", "s", "p", "un", "b", "x", "ns", "ln", "en", "nb", "N", "pn", "len", "z", "k", "mn", "size", "nn", "net"], "list": ["map", "li", "parse", "listed", "cont", "tree", "name", "string", "base", "out", "act", "pl", "group", "live", "keep", "bl", "log", "l", "ist", "block", "pre", "queue", "left", "loop", "ll", "v", "result", "type", "cl", "chain", "array", "batch", "this", "e", "load", "full", "record", "p", "x", "all", "stack", "w", "pool", "set", "LIST", "table", "view", "part", "lists", "test", "we", "coll", "lock", "la", "lc"], "mark": ["comment", "name", "dash", "param", "align", "match", "group", "key", "number", "label", "marked", "change", "Mark", "message", "track", "process", "marks", "type", "page", "day", "point", "date", "broad", "color", "strip", "ark", "register", "fill", "header", "guard", "shadow", "work", "rank", "brand", "skip", "tag", "clean", "sign"], "i": ["eni", "f", "li", "fi", "h", "I", "vi", "di", "in", "ri", "ni", "ik", "gi", "id", "m", "index", "ai", "io", "ji", "si", "ori", "ui", "v", "c", "ie", "d", "y", "zi", "uri", "u", "e", "info", "pi", "ii", "qi", "p", "ti", "hi", "x", "oi", "b", "ini", "yi", "z", "ci", "mi", "iu", "xi", "ip", "init", "ix", "bi"], "j": ["f", "uj", "li", "h", "jl", "jj", "br", "jo", "oj", "jp", "jen", "kj", "di", "key", "json", "pr", "ji", "si", "l", "dj", "ui", "jc", "v", "g", "it", "ja", "c", " dj", "ie", "end", "bj", "d", "y", "aj", "u", "J", "js", "ii", "qi", "p", "job", "b", "x", "je", "z", "k", "ali", "ij", "jet", "jam", "jit"], "ans": ["ANS", "name", "vals", "string", "ats", "ann", "aned", "sv", "id", "lines", "anon", "ant", "ons", "annot", "AN", "ops", "na", "cs", "scan", "cat", "lan", "plan", "ls", "ids", "s", "as", "ln", "ns", "atan", "cas", "ants", "sk", "os", "ins", "ks", "ana", "an", "ars", "annis", "ds", "a"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\\n    int a,b,c;\\n    int[] data;\\n    int size = 3;\\n\\n    public void input(){\\n\tScanner scan = new Scanner(System.in);\\n        data = new int[3];\\n\tfor ( int i = 0; i < 3; i++ ){\\n\t    data[i] = scan.nextInt();\\n\t}\\n    }\\n \\n    public void selsort(){\\n\tfor (int front = 0;front < size - 1;front++){\\n\\n\t    int minIndex = front;\\n            for (int j = front + 1;j < size;j++){\\n\t\tif (data[j] < data[minIndex]){\\n                    minIndex = j;\\n\t\t}\\n\t    }\\n  \\n\t    int tmp = data[front];\\n            data[front] = data[minIndex];\\n            data[minIndex] = tmp;\\n\t}\\n    }\\n\\n    public void output(){\\n\tSystem.out.println(data[0]+\" \"+data[1]+\" \"+data[2]);\\n\\n      \\n    }\\n public static void main(String[] args){\\n     Main p = new Main();\\n     p.input();\\n     p.selsort();\\n     p.output();\\n }\\n}\\n", "target": "37", "substitutes": {"a": ["f", "name", "base", "A", "n", "ac", "da", "app", "ca", "aa", "d", "pos", "va", "e", "as", "sa", "start", "art", "an", "ae", "from"], "b": ["f", "base", "sb", "ab", "l", "B", "wb", "ba", "v", "fb", "g", "d", "y", "rb", "e", "bb", "x", "bs", "bd", "beta", "be", "foo", "bi", "eb", "r"], "c": ["f", "cf", "ch", "cy", "count", "cc", "n", "g", "ca", "cs", "con", "cat", "d", "ce", "cm", "e", "dc", "C", "w", "cu", "col", "z", "ci", "k", "ct", "lc"], "data": ["value", "database", "plus", "values", "help", "key", "code", "default", "arr", "zip", "breaks", "draw", "actions", "api", "blocks", "extra", "dd", "temp", "files", "map", "content", "done", "di", "ma", "where", "windows", "na", "style", "DATA", "cache", "open", "date", "response", "ata", "alpha", "valid", "media", "template", "points", "input", "ad", "id", "index", "ui", "dat", "empty", "days", "pos", "array", "next", "progress", "buffer", "slice", "action", "state", "dump", "results", "memory", "events", "list", "keys", "div", "base", "comments", "json", "parts", "config", "params", "window", "da", "result", "d", "zero", "views", "batch", "info", "missing", "start", "len", "partial", "wa", "body"], "size": ["time", "sized", "shape", "name", "Size", "range", "length", "count", "code", "south", "n", "sec", "g", "sum", "ize", "send", "form", "empty", "small", "security", "max", "zero", "cycle", "cm", "external", "loc", "year", "six", "SIZE", "len", "z", "big", "scale", "second"], "scan": ["stat", "parse", "ner", "ann", "watch", "out", "fan", "in", "pan", "chan", "search", "ignore", "not", "n", "l", "na", "v", "con", "se", "cat", "can", "reader", "kin", "query", "read", "connect", "sav", "ln", "Scan", "en", "nl", "san", "sc", "win", "ans", "util", "sys", "an", "get", "walk", "look", "skip", "run", "sign", "r"], "i": ["eni", "li", "fi", "I", "di", "in", "ri", "ni", "gi", "id", "index", "ai", "io", "ji", "n", "si", "ui", "phi", "v", "ie", "y", "uri", "pi", "u", "o", "info", "api", "ii", "e", "qi", "ti", "hi", "x", "oi", "ind", "ini", "ci", "k", "mi", "iu", "ip", "xi", "init", "ix", "multi", "bi"], "front": ["f", "before", "fi", "ahead", "force", "off", "range", "father", "nt", "length", "count", "index", "fr", "fore", "config", "window", "starter", "cart", "left", "last", "da", "end", "area", "first", "form", "forward", "ff", "future", "zero", "Front", "next", "fix", "u", "frac", "behind", "field", "open", "space", "back", "rc", "start", "bot", "head", "len", "z", "root", "part", "fort", "flower", "init", "stuff", "from", "found", "now", "old", "after"], "minIndex": ["maxOffset", "minindex", "maxMax", "smallIndex", " minMax", "miniindex", "miniSize", "mini", "smalli", "smallindex", "sumi", "actIndex", "minI", " minInd", "maxInd", "partIndex", "minMax", "miniIndex", " minindex", "miniLength", "partOffset", " minI", "smallI", " minLength", " mini", "minLength", "partMax", "sumIndex", "miniWidth", "sumI", "actindex", " minWidth", "minOffset", "minInd", "actInd", "minWidth", "MinSize", " minOffset", "smallSize", "sumindex", "minSize", "actOffset", "smallWidth", " minSize", "Minindex", "maxIndex", "MinIndex", "MinLength", "partindex", "maxindex"], "j": ["f", "uj", "obj", "h", "jl", "jj", "jp", "jen", "index", "fr", "ji", "n", "dj", "l", "left", "v", "end", "ja", " dj", "rev", "area", "bj", "y", "pos", "aj", "next", "u", "adj", "e", "J", "js", "ii", "pt", "job", "x", "ind", "start", "z", "part", "k", "fl", "ij", "flower", "jet", "jan", "r"], "tmp": ["obj", "buff", "st", "zip", "pre", "py", "v", "diff", "area", "ie", "buf", "ff", "mp", "su", "txt", "rb", "img", "np", "ii", "amp", "sup", "nb", "qq", "slice", "kk", "xxx", "extra", "temp", "z", "part", "vt", "qa", "stuff", "beta", "pad", "yy", "cmp", "old", "fb"], "p": ["parse", "client", "br", "h", "pro", "wp", "jp", "pl", "cop", "post", "P", "proc", "m", "pr", "pc", "n", "l", "pre", "py", "tp", "g", "parent", "up", "t", "it", "app", "er", "per", "ap", "pa", "pi", "e", "o", "this", "plugin", "np", "api", "point", "fp", "lp", "ps", "pe", "pp", "op", "pm", "hp", "part", "cp", "parser", "pu", "q", "r"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n  private static boolean solve(int[] ls) {\\n    Arrays.sort(ls);\\n    int sum = 0;\\n    for (int l : ls) {\\n      sum += l;\\n    }\\n    return sum > ls[ls.length - 1] * 2;\\n  }\\n  \\n  private static void execute(ContestReader reader, PrintWriter out) {\\n    int n = reader.nextInt();\\n    int[] ls = reader.nextIntArray(n);\\n    out.println(solve(ls) ? \"Yes\" : \"No\");\\n  }\\n  \\n  public static void main(String[] args) {\\n    ContestReader reader = new ContestReader(System.in);\\n    PrintWriter out = new PrintWriter(System.out);\\n    execute(reader, out);\\n    out.flush();\\n  }\\n}\\n\\nclass ContestReader {\\n  private BufferedReader reader;\\n  private StringTokenizer tokenizer;\\n  \\n  ContestReader(InputStream in) {\\n    reader = new BufferedReader(new InputStreamReader(in));\\n  }\\n  \\n  public String next() {\\n    while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n      try {\\n        tokenizer = new java.util.StringTokenizer(reader.readLine());\\n      } catch (Exception e) {\\n        throw new RuntimeException(e);\\n      }\\n    }\\n    return tokenizer.nextToken();\\n  }\\n  \\n  public int nextInt() {\\n    return Integer.parseInt(next());\\n  }\\n  \\n  public long nextLong() {\\n    return Long.parseLong(next());\\n  }\\n  \\n  public double nextDouble() {\\n    return Double.parseDouble(next());\\n  }\\n  \\n  public int[] nextIntArray(int n) {\\n    int[] array = new int[n];\\n    for (int i = 0; i < n; i++) {\\n      array[i] = nextInt();\\n    }\\n    return array;\\n  }\\n  \\n  public long[] nextLongArray(int n) {\\n    long[] array = new long[n];\\n    for (int i = 0; i < n; i++) {\\n      array[i] = nextLong();\\n    }\\n    return array;\\n  }\\n  \\n  public int[][] nextIntMatrix(int n, int m) {\\n    int[][] matrix = new int[n][m];\\n    for (int i = 0; i < n; i++) {\\n      for (int j = 0; j < m; j++) {\\n        matrix[i][j] = nextInt();\\n      }\\n    }\\n    return matrix;\\n  }\\n  \\n  public long[][] nextLongMatrix(int n, int m) {\\n    long[][] matrix = new long[n][m];\\n    for (int i = 0; i < n; i++) {\\n      for (int j = 0; j < m; j++) {\\n        matrix[i][j] = nextInt();\\n      }\\n    }\\n    return matrix;\\n  }\\n}\\n\\nclass Algorithm {\\n  private static void swap(Object[] list, int a, int b) {\\n    Object tmp = list[a];\\n    list[a] = list[b];\\n    list[b] = tmp;\\n  }\\n  \\n  public static <T extends Comparable<? super T>> boolean nextPermutation(T[] ts) {\\n    int rightMostAscendingOrderIndex = ts.length - 2;\\n    while (rightMostAscendingOrderIndex >= 0 &&\\n        ts[rightMostAscendingOrderIndex].compareTo(ts[rightMostAscendingOrderIndex + 1]) >= 0) {\\n      rightMostAscendingOrderIndex--;\\n    }\\n    if (rightMostAscendingOrderIndex < 0) {\\n      return false;\\n    }\\n    \\n    int rightMostGreatorIndex = ts.length - 1;\\n    while (ts[rightMostAscendingOrderIndex].compareTo(ts[rightMostGreatorIndex]) >= 0) {\\n      rightMostGreatorIndex--;\\n    }\\n    \\n    swap(ts, rightMostAscendingOrderIndex, rightMostGreatorIndex);\\n    for (int i = 0; i < (ts.length - rightMostAscendingOrderIndex - 1) / 2; i++) {\\n      swap(ts, rightMostAscendingOrderIndex + 1 + i, ts.length - 1 - i);\\n    }\\n    return true;\\n  }\\n  \\n  public static void shuffle(int[] array) {\\n    Random random = new Random();\\n    int n = array.length;\\n    for (int i = 0; i < n; i++) {\\n      int randomIndex = i + random.nextInt(n - i);\\n      \\n      int temp = array[i];\\n      array[i] = array[randomIndex];\\n      array[randomIndex] = temp;\\n    }\\n  }\\n  \\n  public static void shuffle(long[] array) {\\n    Random random = new Random();\\n    int n = array.length;\\n    for (int i = 0; i < n; i++) {\\n      int randomIndex = i + random.nextInt(n - i);\\n      \\n      long temp = array[i];\\n      array[i] = array[randomIndex];\\n      array[randomIndex] = temp;\\n    }\\n  }\\n  \\n  public static void sort(int[] array) {\\n    shuffle(array);\\n    Arrays.sort(array);\\n  }\\n  \\n  public static void sort(long[] array) {\\n    shuffle(array);\\n    Arrays.sort(array);\\n  }\\n}\\n\\n", "target": "25", "substitutes": {"ls": ["li", "ul", "ils", "less", "lf", "lines", "gs", "files", "ll", "lv", "ails", "cs", "rl", "kl", "ms", "wl", "dl", "sn", "lb", "LS", "ld", "qs", "xs", "lis", "s", "lp", "tl", "ns", "ln", "nl", "ps", "len", "les", "sol", "sl", "los", "bs", "lists", "ins", "fl", "lt", "rs", "ds", "lr", "sels", "la", "lc", "ols"], "sum": [" sums", "li", "val", "sort", "cal", "ul", "miss", "summary", "vol", "length", "count", "index", "cost", "unit", "si", "total", "ss", "ums", "gram", "min", "up", "se", "num", "su", "use", "weight", "u", "offset", "sa", "fat", "scale", "sol", "len", "mem", "fill", "size", "mean", "us", "spread", "average", "beta", "loss", "coll", "alpha", "um", "sign", "Sum"], "l": ["f", "li", "ul", "L", "ol", "pl", "lf", "ll", "v", "c", "rl", "kl", "dl", "il", "u", "e", "lb", "lit", "o", "ell", "s", "lp", "p", "al", "ln", "len", "sl", "line", "fl", "lr", "la", "lc", "el"], "reader": ["f", "parse", "client", "ner", "http", "worker", "oder", "input", "ler", "context", "ri", "err", "socket", "inner", "riter", "ignore", "io", "report", "runner", "dr", "server", "loader", "driver", "layer", "editor", "er", "entry", "per", "feed", "resource", "read", "buffer", "rer", "source", "ry", "war", "this", "e", "re", "auto", "iter", "system", "rar", "enter", "manager", "row", "reading", "slice", "Reader", "rc", "or", "her", "rr", "rx", "stream", "writer", "parser", "init", "connection", "ger", "handler", "r"], "out": ["obj", "gen", "client", "comment", "arg", "name", "raw", "data", "input", "prefix", "log", "err", "key", "code", "inner", "timeout", "io", "report", "exec", "null", "IN", "server", "up", "print", "loader", "c", "page", "write", "bin", "OUT", "inc", "output", "buffer", "ex", "source", "req", "o", "str", "user", "flush", "error", "Out", "w", "file", "sync", "pool", "extra", "again", "dump", "line", "part", "copy", "conn", "writer", "outer", "init", "outs", "lock", "r"], "n": ["f", "name", "no", "count", "number", "t", "c", "ii", "un", "ln", "ns", "en", "M", "size", "nor", "zn", "h", "ne", "none", "don", "nc", "nt", "na", "u", "dn", "z", "Ns", "node", "inn", "left", "g", "num", "network", "sn", "ng", "nat", "e", "o", "adj", "cn", "s", "p", "all", "nl", "N", "nr", "k", "mn", "an", "fn", "net", "ni", "not", "v", "d", "x", "nb", "w", "len", "conn", "nn", "r"], "tokenizer": ["tokenize", "Tokenizer", " tokenner", "serialiser", "Tokenizers", " tokenization", "okeniser", "okenization", "serialize", "tokeniser", " tokeniser", "serializer", "Tokenization", "Tokenner", "tokenizers", " tokenizers", "Tokeniser", "Tokenize", "serializers", "tokenner", " tokenize", "tokenization", "serialization", "okenizer", "okenner", "okenize"], "in": ["f", "client", "arg", "name", "string", "data", "is", "input", "lin", "err", "din", "id", "inner", "image", "socket", "io", "IN", "inn", "c", "bin", "d", "query", "inc", "read", "source", "buffer", "str", "user", "o", "x", "pass", "rin", "file", "ini", "login", "win", "again", "line", "stream", "ins", "connection", "init", "In", "r"], "array": ["map", "channel", "allow", "database", "string", "data", "raw", "one", "instance", "range", "format", "element", "expression", "container", "global", "group", "core", "image", "number", "collection", "integer", "object", "account", "option", "arr", "aster", "alpha", "address", "order", "book", "app", "union", "ray", "area", "model", "form", "vector", "air", "use", "batch", "card", "api", "section", "archive", "record", "as", "all", "row", "file", "hash", "arrow", "view", "our", "function", "node", "coll", "pair", "Array", "parent", "any"], "i": ["f", "eni", "mini", "me", "gi", "inner", "mu", "t", "c", "uri", "ii", "qi", "oi", "iu", "init", "function", "multi", "h", "di", "ri", "ai", "it", "adi", "u", "field", "hi", "ini", "z", "ci", "mi", "ix", "bi", "li", "fi", "I", "anti", "id", "ji", "ui", "phi", "g", "y", "e", "o", "this", "s", "p", "ti", "_", "all", "slice", "get", "chi", "my", "q", "parse", "ik", "ni", "length", "io", "si", "ori", "v", "ie", "d", "uli", "pi", "info", "x", "abi", "ip", "xi", "r"], "m": ["f", "bm", "nm", "h", "dim", "mc", "ma", "mu", "g", "v", "c", "d", "ms", "num", "cm", "e", "o", "ii", "mm", "p", "x", "om", "M", "im", "z", "k", "mn", "mi", "an", "r"], "matrix": ["macmask", "macMatrix", " matrices", "latrices", "matMatrix", "matmask", "macrix", "latrix", "latMatrix", " matMatrix", "macrices", " matmask", "latmask", "matrices"]}}
{"code": "import java.io.*;\\n// import java.math.*;\\n// import java.util.*;\\n// import java.util.Map.*;\\n// import java.util.stream.*;\\n\\npublic class Main {\\n    public static void main (String[] args) throws Exception {\\n        BufferedReader reader =\\n            new BufferedReader (new InputStreamReader (System.in));\\n        String[] arr = reader.readLine().split (\" \");\\n        int A, B;\\n        A = Integer.parseInt (arr[0]);\\n        B = Integer.parseInt (arr[1]);\\n        int ans = 0;\\n        int cur = 1;\\n        while (cur < B) {\\n            ans++;\\n            cur += A - 1;\\n        }\\n        System.out.println (ans);\\n        return;\\n    }\\n}", "target": "101", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint A[] = new int[n];\\n\t\tint i, j, key;\\n\t\tfor(i=0; i<n; i++){\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\tprint(A);\\n\t\tfor(i=1; i<n; i++){\\n\t\t\tkey = A[i];\\n\t\t\tj = i - 1;\\n\t\t\twhile(j>=0 && A[j]>key){\\n\t\t\t\tA[j+1] = A[j];\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t\tA[j+1] = key;\\n\t\t\tprint(A);\\n\t\t}\\n\t}\\n\tpublic static void print(int A[]){\\n\t\tfor(int i=0; i<A.length; i++){\\n\t\t\tif(i!=0) System.out.print(\" \");\\n\t\t\tSystem.out.print(A[i]);\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n}", "target": "69", "substitutes": {"sc": ["ner", "osc", "ch", " Sc", "nc", "st", "out", "sche", "cc", "bc", "esc", "pc", "l", "exec", "ss", "sec", "scope", "anc", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "cor", "str", "Sc", "system", "sq", "sa", "sci", "cr", "src", "sync", "rc", "cer", "sr", "ci", "sp", " SC", "sch", "sh", "cur", "sem", "ser", " scr"], "n": ["f", "nan", "ne", "name", "nc", "in", "no", "nt", "ni", "m", "l", "na", "v", "t", "c", "num", "d", "y", "network", "sn", "u", "e", "o", "s", "p", "b", "x", "all", "ns", "nl", "en", "nb", "w", "sync", "N", "len", "z", "k", "nn", "fn", "a", "net"], "A": ["Args", "AW", "L", "Java", "B", "Y", "Access", "MA", "Adam", "J", "U", "M", "Alpha", "NA", "Key", "LA", "Ha", "O", "a", "App", "K", "Path", "AS", "File", "X", "P", "ai", "na", "And", "D", "II", "Answer", "DATA", "Area", "F", "At", "Result", "All", "AC", "AM", "Average", "Auth", "alpha", "Array", "Parts", "Na", "There", "G", "I", "Next", " a", "This", "API", "New", "AV", "Alias", "As", "Default", "AP", "array", "Action", "p", "AU", "The", "Num", "N", "au", "Info", "If", "Something", "SA", "AA", "Ak", "H", "S", "E", "None", "W", "Ma", "Bar", "CA", "C", "T", "Ar", "Address", "Value"], "i": ["f", "eni", "li", "fi", "I", "mini", "data", "is", "di", "in", "ami", "ni", "ri", "id", "gi", "index", "ik", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "c", "ie", "d", "y", "zi", "uri", "u", "e", "o", "pi", "info", "ii", "qi", "p", "hi", "b", "x", "ind", "oi", "ti", "ini", "start", "yi", "ci", "part", "mi", "iu", "ip", "xi", "init", "ix", "multi", "bi", "a", "r"], "j": ["f", "uj", "li", "obj", "br", "jl", "jj", "jo", "oj", "jp", "jen", "kj", "ni", "m", "index", "ji", "si", "l", "dj", "py", "jc", "v", "ja", "c", "ie", "d", "y", "aj", "next", "u", "e", "o", "J", "js", "ii", "dy", "qi", "bi", "p", "job", "b", "x", "ind", "z", "part", "k", "ij", "a", "jet", "q", "jit"], "key": ["f", "value", "KEY", "keys", "val", "jj", "name", "base", "jp", "ik", "length", "phrase", "id", "m", "index", "code", "count", "default", "ji", "l", "last", "v", "ok", "c", "ie", "y", "max", "next", "u", "e", "o", "J", "ii", "qi", "point", "p", "b", "x", "row", "q", "ak", "start", "Key", "char", "temp", "z", "k", "size", "ki", "ke", "a"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        double N = sc.nextInt();\\n        double K = sc.nextInt();\\n        double tmp = 0.0;\\n        double kakuritu = 0.0;\\n\\n        for(int i = 0; i < N; i++){\\n          for(int j = 0; j < 1000000 ; j++ ){\\n            if (((i+1) * Math.pow(2.0,j)) >= K){\\n              tmp = Math.pow(0.5,j) / N;\\n              break;\\n            }\\n\\n          }\\n          kakuritu += tmp;\\n          //kakuritu = kakuritu / N;\\n        }\\n        System.out.println(kakuritu);\\n}\\n}\\n", "target": "20", "substitutes": {"sc": ["ner", "ch", "osc", " Sc", "RC", "nc", "cv", "search", "esc", "bc", "cc", "asc", "pc", "exec", "text", "ss", "anc", "ca", "SC", "se", "c", "scan", "cs", "sw", "uc", "screen", "com", "ctx", "cl", "Sc", "system", "sq", "sci", "Scan", "cr", "src", "sync", "rc", "cer", "soc", "sys", "sp", " SC", "sch", "sh", "ec", "tc", "cur", "ser", "lc", " scr"], "N": ["CNN", "I", "L", "Z", "Size", "NI", "A", "Ni", "X", "P", "Q", "NS", "SN", "H", "n", "NC", "S", "Y", "Na", "D", "NL", "network", "MN", "W", "J", "F", "V", "NM", "NN", "C", "T", "Num", "M", "NA", "Ne", "Ns", "NT", "O", "KN"], "K": ["O", "KB", "G", "I", "L", "Z", "PK", "MK", "SK", "X", "KR", "P", "Q", "H", "KS", "NK", "S", "Y", "KY", "E", "D", "J", "F", "V", "C", "T", "KK", "KA", "M", "k", "KE", "OK", "Sk", "KN"], "tmp": ["obj", "km", "jj", "BP", "jp", "st", "proc", "P", "TT", "TP", "py", "tp", "t", "FF", "bp", "tt", "mp", "pkg", "ppo", "txt", "TB", "dest", "emp", "Temp", "np", "pot", "mph", "fp", "p", "NP", "LP", "sup", "T", "nb", "kk", "temp", "sp", "part", "k", "vt", "cp", "fake", "stuff", "beta", "pad", "flat", "PP", "cmp", "now", "alpha", "MP", "ppa"], "kakuritu": ["kacurimi", "kakaurimi", "kakurimi", "kacaurimi", "kkaurimi", "kakarita", "kacurru", "kacurita", "kakauritu", "kkuriru", "kakuralitu", "kkurru", "kkuritu", "kacauritu", "kakurtitu", "kakuraru", "kakurtimi", "kacaurita", "kkauritu", "kacaurru", "kkurimi", "kakuralru", "kakuriru", "kakuraimi", "kkauriru", "kakurtita", "kakarimi", "kakurru", "kakaurru", "kakuraliru", "kakaurita", "kkaurru", "kakaritu", "kakarru", "kakurita", "kakurtru", "kakuralimi", "kacuritu", "kakurairu", "kakauriru", "kakuraitu"], "i": ["f", "eni", "li", "jj", "I", "jp", "di", "anti", "ri", "ik", "ni", "gi", "ami", "m", "ai", "io", "ji", "n", "si", "ori", "ui", "v", "ie", "y", "u", "pi", "o", "api", "ii", "qi", "p", "hi", "b", "oi", "ini", "z", "ci", "k", "mi", "iu", "ij", "ip", "xi", "ix", "ki", "chi", "bi", "jit"], "j": ["f", "uj", "li", "obj", "jl", "jj", "jo", "vi", "oj", "jp", "kj", "ik", "ni", "ji", "n", "si", "l", "jc", "v", "g", "it", "ja", "c", "ie", "bj", "y", "aj", "next", "u", "e", "o", "J", "js", "ii", "qi", "p", "b", "x", "oi", "z", "k", "ij", "xi", "ix", "jet", "bi", "jit"]}}
{"code": "//package atcoder;\\n \\nimport java.util.*;\\n//import java.math.BigDecimal;\\n \\npublic class Main{\\n\tstatic boolean[] targetNumbers;\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tif(A+B==3) {\\n\t\t\tSystem.out.println(3);\\n\t\t}else if(A+B==4) {\\n\t\t\tSystem.out.println(2);\\n\t\t}else {\\n\t\t\tSystem.out.println(1);\\n\t\t}\\n\t}\\n}", "target": "236", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.lang.*;\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        char[] s = sc.next().toCharArray();\\n        String ans = \"AC\";\\n        if(s[0]!='A'){\\n            ans = \"WA\";\\n        }\\n        if(Character.isUpperCase(s[1])){\\n            ans = \"WA\";\\n        }\\n        int count = 0;\\n        for(int i =2;i<s.length;i++){\\n            if(Character.isUpperCase(s[i])){\\n                if(count==0&&s[i]=='C'&&i!=s.length-1){\\n                    count ++;\\n                } else {\\n                    ans = \"WA\";\\n                }\\n            }\\n        }\\n        if(count==0){\\n            ans =\"WA\";\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "209", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "search", "cc", "bc", "esc", "pc", "ss", "sec", "scope", "cus", "SC", "se", "c", "scan", "cs", "uc", "sw", "spec", "Sc", "system", "sub", "sci", "cr", "ocr", "sf", "src", "rc", "ci", "sp", " SC", "stream", "sch", "sh", "parser", "ec", "cur", "desc", " scr"], "s": ["f", "ch", "letters", "string", "times", "plus", "is", "abs", "in", "comments", "sv", "lines", "gs", "south", "groups", "si", "l", "its", "S", "ss", "types", "g", "t", "c", "sites", "d", "words", "features", "array", "ls", "es", "u", "e", "o", "js", "sts", "services", "xs", "sq", "p", "as", "b", "sets", "blocks", "ns", "bis", "sync", "w", "tests", "styles", "os", "ins", "us", "strings", "ses", "ks", "states", "ds", "a", "r"], "ans": ["anks", "cons", " scans", "vals", "ann", " says", " nas", "reads", " sans", "lan", "ns", "eps", " Ans", "outs", "ars", "ds", "a", "ANS", " chars", "ats", "ays", " answers", " means", "AN", "na", "anc", "ads", " signs", "aning", "atan", "cas", "ags", " ang", "aks", "os", "ams", "oss", "ases", "anas", "vs", "aces", "nas", " covers", "sts", "asts", "as", "ants", "vers", "sk", "results", "acs", "ras", "an", "atts", "ana", "ons", "grades", " ads", "arts", "helps", "aned", "amps", "ents", "ens", "rules", "aus", " names", "ares", "les", " spans", "ins", "ks", "jas", "allows", "aos", "acts"], "count": ["f", "list", "level", "allow", "force", "base", "call", "Count", "length", "match", "id", "number", "code", "index", "limit", "key", "group", "cc", "n", "total", "order", "left", "last", "loop", "sum", "more", "c", "type", "use", "add", "counter", "weight", "cache", "depth", "current", "p", "b", "ind", "child", "start", "len", "char", "part", "size", "found", "coll", "check", "now", "parent", "a"], "i": ["f", "li", "fi", "I", "data", "off", "di", "in", "ri", "length", "cli", "id", "gi", "index", "m", "ai", "inner", "io", "ji", "n", "si", "l", "ui", "phi", "v", "it", "c", "ie", "uri", "next", "u", "pi", "e", "j", "o", "api", "ii", "info", "qi", "ti", "p", "b", "x", "oi", "slice", "abi", "ini", "ci", "ip", "xi", "init", "ix", "multi", "prev", "bi", "lc", "a"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\ttry {\\n\t\t\tString str = br.readLine();\\n\t\t\tString[] arr = str.split(\" \");\\n\t\t\tint x = Integer.parseInt(arr[0]);\\n\t\t\tint y = Integer.parseInt(arr[1]);\\n\t\t\tint z = x*y;\\n\t\t\tint a = x+x+y+y;\\n\t\t\\n\t\t\tSystem.out.println(z + \" \" + a);\\n\t\t} catch (IOException e) {\\n\t\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f catch \u30d6\u30ed\u30c3\u30af\\n\t\t\te.printStackTrace();\\n\t\t}\\n\\n\t}\\n}", "target": "92", "substitutes": {"br": ["obj", "http", "tr", "div", "abs", "ler", "err", "bro", "fr", "bc", "io", "dr", "ori", "mr", "bar", "buf", "er", "reader", "ar", "rb", "gr", "hr", "handle", "bb", "HR", "p", "b", "cr", "yr", "cb", "ocr", "ber", "res", "sr", "bd", "sp", "stream", "BR", "bridge", "browser", "ibr", "Br", "r"], "str": ["obj", "tr", "div", "exp", "string", "data", "input", "stri", "st", "out", "expr", "in", "err", "fr", "pr", "n", "dr", "text", "l", "kr", "txt", "hr", "s", "b", "STR", "strip", "pass", "cr", "res", "sr", "enc", "char", "sp", "line", "i", "Str", "r"], "arr": ["map", "obj", "parse", "list", "val", "tr", "data", "ann", "err", "arch", "parts", "fr", "pr", "par", "dr", "inter", "attr", "dat", "aa", "att", "air", "ar", "array", "ext", "img", "aaa", "iter", "p", "yr", "var", "Ar", "enc", "char", "rr", "part", "arc", "i", "arm", "coll", "ix", "adr", "Str", "r"], "x": ["f", "xy", "time", "h", "xx", "X", "ey", "id", "code", "index", "n", "l", "v", "t", "c", "xt", "tx", "d", "dx", "ax", "ex", "u", "e", "o", "j", "width", "xs", "p", "b", "en", "w", "xxx", "rx", "px", "i", "xi", "ix", "r"], "y": ["f", "xy", "h", "xx", "oy", "ey", "cy", "m", "zy", "n", "ys", "l", "ye", "Y", "py", "v", "t", "c", "d", "vy", "ny", "yt", "ay", "u", "e", "o", "j", "ry", "dy", "ty", "p", "b", "w", "yi", "ya", "i", "yy"], "z": ["f", "xy", "h", "Z", "xx", "oa", "az", "id", "code", "zy", "index", "gz", "tz", "n", "zz", "v", "nz", "t", "iaz", "c", "d", "zi", "zo", "u", "e", "o", "j", "iz", "p", "b", "za", "en", "w", "q", "yi", "ya", "ze", "i", "zh", "ix"], "a": ["f", "am", "A", "ab", "ad", "oa", "ai", "n", "ea", "ac", "da", "ba", "ca", "area", "c", "aa", "asa", "d", "ar", "aj", "va", "e", "o", "as", "p", "ia", "sa", "b", "za", "w", "ya", "i", "an", "ae", "alpha"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\twhile(true){\\n\t\t\tString str = br.readLine();\\n\t\t\tStringTokenizer st = new StringTokenizer(str, \" \");\\n\t\t\tint H = Integer.parseInt(st.nextToken());\\n\t\t\tint W = Integer.parseInt(st.nextToken());\\n\\n\t\t\tif(H == 0 && W == 0){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\\n\t\t\tfor ( int i = 0; i < H; i++ ){\\n\t\t\t\tfor ( int j = 0; j < W; j++ ){\\n\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(\"\");\\n\t\t\t}\\n\t\t\tSystem.out.println(\"\");\\n\t\t}\\n\t}\\n}\\n\\n", "target": "87", "substitutes": {"br": ["obj", "bf", "tr", "ch", "bh", "sb", "ctr", "out", "bl", "err", "bt", "bro", "fr", "bc", "io", "pr", "arr", "dr", "mr", "bar", "buf", "reader", "ar", "wr", "rb", "gr", "hr", "bb", "b", "cr", "yr", "cb", "ocr", "res", "sr", "jar", "bs", "sp", "BR", "bridge", "browser", "body", "Br", "r"], "str": ["f", "tr", "h", "string", "data", "input", "stri", "out", "in", "err", "fr", "pr", "n", "arr", "l", "text", "dr", "c", "entry", "txt", "read", "wr", "s", "b", "STR", "cr", "pass", "w", "res", "sr", "enc", "char", "sl", "sp", "line", "Str", "r"], "st": ["sta", "gest", "inst", "string", "rt", "St", "stri", "sb", "nt", "sv", "fr", "stable", "ist", "ss", "stand", "est", "t", "rest", "ST", "se", "tt", "sw", "form", "d", "fe", "sn", "pt", "sts", "s", "sa", "stack", "cr", "src", "ast", "sr", "start", "sc", "sl", "sp", "part", "sh", "lt", "const", "stress", "std", "ste", "sth", "r"], "H": ["WH", "HY", "h", "Length", "I", "L", "PH", "GH", "X", "Q", "HD", "HK", "HA", "CH", "S", "Y", "SH", "RH", "E", "DH", "OH", "NH", "J", "Ch", "V", "HH", "HR", "HI", "EH", "MH", "T", "U", "N", "HP", "Ha", "HS", "Hi", "TH", "HC"], "W": ["WH", "AW", "WE", "K", "Length", "I", "L", "Z", "SW", "MW", "Sw", "X", "Width", "BW", "P", "Q", "CW", "UI", "IV", "S", "Y", "Ws", "SH", "DW", "E", "Web", "We", "FW", "J", "V", "NW", "WD", "R", "TW", "EH", "RW", "T", "C", "w", "U", "N", "M", "Word", "WP", "VW", "EW", "WI", "WS", "GW", "Wh"], "i": ["f", "li", "h", "I", "is", "di", "in", "ik", "ri", "ni", "id", "gi", "index", "ai", "io", "ji", "n", "si", "ori", "ui", "phi", "v", "y", "uri", "u", "e", "pi", "ii", "qi", "hi", "p", "b", "x", "oi", "ini", "z", "ci", "mi", "iu", "ip", "xi", "chi", "ki", "ix"], "j": ["f", "li", "obj", "jl", "jj", "ch", "h", "jo", "oj", "jp", "out", "key", "ji", "n", "l", "ui", "jc", "v", "g", "it", "ja", "c", "ie", "d", "y", "aj", "u", "e", "o", "J", "js", "ii", "p", "b", "je", "z", "k", "ij", "xi", "ix", "q"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString[] lines = sc.nextLine().split(\" \");\\n\t\tint num1 = Integer.parseInt(lines[0]);\\n\t\tint num2 = Integer.parseInt(lines[1]);\\n\t\tString result;\\n\t\tif(num1 < num2){\\n\t\t\tresult = \"a < b\";\\n\t\t} else if(num1 > num2) {\\n\t\t\tresult = \"a > b\";\\n\t\t} else {\\n\t\t\tresult = \"a == b\";\\n\t\t}\\n\\n\t\tSystem.out.println(result);\\n\\n\t}\\n}", "target": "179", "substitutes": {"sc": ["class", "ner", "ch", "osc", " Sc", "nc", "out", "esc", "bc", "cc", "io", "asc", "pc", "l", "ss", "sec", "server", "SC", " rc", "se", "c", "scan", "cl", "uc", "cs", "reader", "sw", "spec", "acc", "this", "str", "Sc", "sci", "src", "sf", "sync", "rc", "enc", "sl", "sp", " SC", "sh", "parser", "ec", "desc", " cur", " scr"], "lines": ["runs", "pins", "plus", " Lines", "data", "points", "values", "sections", "parts", "lights", "vs", "split", "groups", "l", "boxes", "pages", "breaks", "liners", "rows", "lins", "words", "ls", "ids", "rules", "cells", "qs", "xs", "s", "blocks", "items", "books", "ines", "cycles", "balls", "los", "results", "line", "elines", "bytes", "ins", "ks", "strings", "objects", "files", "posts"], "num1": ["suma", "numone", " numa", "numb", "dim0", "no1", "sumb", "n0", "nob", "loc2", "um1", "numa", " numb", "locb", "umb", "sum2", "sumone", "num0", " num0", "noone", "loc1", "um0", "n1", "dim1", "sum1", "nb", "locone", "sum0", "no2", "dima", "n2", "dimb", "um2"], "num2": ["indexTwo", "num6", "noTwo", "number6", "no0", "numb", "sumb", "off0", "form2", "sumTwo", "offTwo", "formb", "sum2", " numTwo", "num0", " num0", "indexb", " numtwo", "off2", "sum1", "number2", " num6", "formTwo", "offtwo", "sum6", "no2", "index1", "numtwo", "index2", "form1", "number1", "notwo", "numTwo"], "result": ["reason", "value", "class", "valid", "comment", "name", "compl", "string", "join", "data", "fail", "err", "match", "cup", "search", "code", "json", "expected", "default", "report", "product", "score", "text", "message", "sum", "diff", "attr", "success", "winner", "use", "goal", "output", "acc", "word", "info", "str", "url", "card", "current", "Result", "status", "division", "date", "error", "msg", "answer", "res", "response", "results", "root", "line", "work", "rule", "test", "feature", "r"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        FastReader s = new FastReader();\\n        int A = s.nextInt();\\n        int B = s.nextInt();\\n        int flag=-1;\\n        for(int i=0;i<10;i++){\\n            if(A==Math.floor(((B*10)+i)*0.08)){\\n                flag=(B*10)+i;\\n                break;\\n            }\\n\\n        }\\n        System.out.println(flag);\\n    }\\n\\n    private static boolean isPrime(int n) {\\n        if (n == 2)\\n            return true;\\n        else if ((n % 2 == 0 && n > 2) || n < 2)\\n            return false;\\n        else {\\n            for (int i = 3; i <= (int) Math.sqrt(n); i += 2) {\\n                if (n % i == 0)\\n                    return false;\\n            }\\n            return true;\\n        }\\n\\n\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new\\n                    InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n\\n}", "target": "121", "substitutes": {"s": ["f", "ts", "http", "h", "string", "is", "abs", "sb", "ssl", "in", "m", "south", "l", "S", "v", "t", "c", "se", "d", "u", "e", "o", "qs", "services", "as", "p", "b", "bis", "ns", "sf", "w", "ps", "utils", "sync", "tests", "ws", "sl", "sys", "os", "strings", "ses", "fs", "a", "r"], "A": ["SA", "K", "I", "L", "AA", "X", "API", "P", "H", "S", "D", "II", "Ab", "AP", "AI", "F", "BA", "At", "CA", "AF", "AC", "C", "AU", "U", "N", "Ar", "Alpha", "NA", "M", "AR", "Am", "LA", "Array", "Na", "a"], "B": ["G", "I", "Bi", "L", "DB", "X", "BF", "P", "GB", "Q", "Beta", "H", "Y", "S", "BG", "UB", "E", "D", "BE", "Two", "W", "MB", "J", "LB", "F", "BI", "BA", "V", "Bar", "R", "b", "NB", "T", "C", "U", "Big", "M", "N", "WB", "Num", "Ub", "BC", "Base", "O", "OB"], "flag": ["f", "border", "fi", "debug", "version", "log", "id", "Flag", "count", "code", "lag", "ai", "key", "option", "character", "ui", "bar", "style", "type", "bug", "ie", "d", "bit", "weight", "age", "info", "die", "af", "flags", "field", "offset", "status", "ind", "error", "mask", "start", "bot", "char", "magic", "safety", "big", "part", "FLAG", "draft", "pad", "const", "feature", "tag", "sign"], "i": ["f", "eni", "li", "fi", "I", "mini", "di", "in", "anti", "ri", "ni", "gi", "id", "index", "ai", "io", "ji", "si", "l", "ui", "phi", "v", "it", "c", "ie", "d", "uri", "zi", "u", "e", "pi", "j", "o", "api", "ii", "info", "qi", "p", "ti", "b", "x", "oi", "ind", "ini", "z", "ci", "mi", "ip", "iu", "xi", "chi", "multi", "ix", "bi", "a", "r"], "n": ["f", "nan", "on", "ne", "none", "nc", "no", "nt", "ni", "m", "number", "non", "l", "na", "v", "t", "c", "d", "num", "y", "network", "sn", "u", "e", "o", "j", "cn", "p", "b", "x", "ns", "un", "en", "nb", "N", "pn", "z", "k", "conn", "nor", "nu", "an", "nn", "a", "net"], "br": [" tr", "tr", "ch", "rt", "bh", " dr", "ler", "db", "ctr", "bl", "err", "bt", "bro", "fr", "bc", "fore", "pr", "ver", "arr", "dr", "orb", "raf", "mr", "bar", "buf", "er", "kr", "ar", " fr", "rb", "gr", "hr", "ur", "bb", "p", "b", "cr", "src", "ber", "jar", "sr", "obl", "bs", "sp", "BR", "cur", "browser", "bridge", "be", "Br", "r"], "st": ["store", "nd", "sta", "tr", "pat", "inst", "string", "rt", "St", "stri", "sb", "nt", "bl", "bt", "fr", "ut", "pr", "stable", "l", "ist", "ss", "te", "ost", "est", "t", "rest", "ST", "se", "style", "sw", "cl", "fe", "ft", "e", "pt", "sts", "stage", "ur", "p", "sa", "b", "cr", "src", "ast", "pe", "sr", "sc", "sl", "sp", "struct", "part", "ct", "rd", "sh", "art", "const", "be", "std", "ste", "sth", "sign", "r"], "str": ["f", "val", "tr", "div", "exp", "ner", "string", "data", "ctr", "bl", "err", "id", "code", "inner", "fr", "pr", "arr", "dr", "text", "t", "c", "style", "doc", "cl", "kr", "pos", "e", "url", "pt", "j", "p", "STR", "x", "sr", "char", "sl", "temp", "z", "sp", "line", "part", "dict", "Str", "r"]}}
{"code": "import java.util.Scanner;\\n\\n/**\\n * Created by enpingkuang on 2020/9/13 8:01 \u4e0b\u5348\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        long[] a = new long[4];\\n        long sum = Long.MIN_VALUE;\\n        for(int i = 0;i<4;i++){\\n            a[i] = scanner.nextLong();\\n        }\\n        sum = Math.max(sum,a[0]*a[2]);\\n        sum = Math.max(sum,a[0]*a[3]);\\n        sum = Math.max(sum,a[1]*a[2]);\\n        sum = Math.max(sum,a[1]*a[3]);\\n        System.out.println(sum);\\n    }\\n}", "target": "244", "substitutes": {"scanner": ["Scanator", "caner", "aner", "Scanter", "Scanning", "Scanner", "Scaner", " scaner", "caninner", "canter", "aninner", "scanter", "Scaninner", " scanter", "anner", "canning", "scaninner", "scanning", "scaner", "canator", "scanator", "anning", "canner", " scanator"], "a": ["sta", "access", "ama", "plus", "am", "data", "ga", "A", "out", "ab", "ma", "ad", "count", "aka", "index", "m", "active", "n", "ea", "ac", "l", "na", "ba", "da", "app", "area", "t", "aa", "c", "result", "y", "aj", "array", "va", "u", "aux", "o", "this", "e", "aaa", "add", "auto", "s", "at", "sa", "as", "ia", "b", "p", "x", "ha", "all", "w", "ast", "au", "another", "z", "ata", "k", "work", "wa", "an", "ae", "alpha", "la"], "sum": ["value", "cal", "miss", "plus", "am", "help", "count", "key", "default", "cost", "total", "ss", "c", "mix", "hash", " summ", " Sum", "size", "average", "scale", "sign", "sim", "comment", "match", "home", "min", "diff", "style", "doc", "cat", "max", "use", "weight", "u", "cache", "full", " count", "fill", "part", "cur", "loss", "alpha", "sort", " num", "summary", "out", "cum", "index", "null", "ac", "ass", "gram", "up", "num", "su", "add", "sa", "all", "mean", " total", "vol", "Sum", " sums", "stat", "parse", "n", "si", "result", "zero", "acc", "info", "fat", "error", "missing", "pass", "mem", "spread", "um"], "i": ["f", "li", "h", "I", "di", "in", "ri", "ni", "id", "count", "key", "index", "m", "ai", "gi", "io", "n", "si", "ui", "mu", "phi", "min", "v", "c", "ie", "d", "y", "resource", "u", "e", "o", "info", "pi", "j", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "abi", "ini", "z", "ci", "part", "k", "xi", "init", "chi", "multi", "bi"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Comparator;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\\n        Scanner scanner = new Scanner(System.in);\\n\\n        int A = scanner.nextInt();\\n        int B = scanner.nextInt();\\n        int K = scanner.nextInt();\\n\\n        ArrayList<Integer> ok = new ArrayList<>();\\n\\n        for(int i=1; i<=100; i++){\\n            if(A%i ==0 && B%i==0){\\n                ok.add(i);\\n            }\\n        }\\n\\n        Collections.sort(ok, Comparator.reverseOrder());\\n\\n        System.out.println(ok.get(K-1));\\n\\n    }\\n}", "target": "134", "substitutes": {"scanner": ["scanker", "caner", "nerning", "Scanter", "Scanning", "scanener", "Scanner", "Scaner", "Scanker", " scaner", "Scanener", "canener", "hanner", "caninner", "nerker", "canter", "scanter", "Scaninner", "hanning", " scank", "canning", "Scank", "nerinner", "nerner", "scaninner", "scank", " scanener", "scanning", "hanker", "scaner", "nerter", "canner", "cank", "haninner"], "A": ["SA", "I", "L", "AA", "Java", "Input", "X", "API", "AD", "JA", "P", "AV", "Y", "alpha", "S", "IA", "AP", "MA", "F", "CA", "AC", "C", "U", "N", "Alpha", "M", "NA", "AM", "AR", "LA", "AMI", "Array", "DA", "a", "RA"], "B": ["G", "I", "Bi", "L", "BB", "DB", "X", "P", "Q", "Y", "BS", "AB", "UB", "E", "D", "W", "SB", "J", "EB", "F", "BI", "BA", "BL", "R", "b", "T", "C", "WB", "N", "M", "AR", "Bs", "BC", "Number", "O", "OB"], "K": ["O", "G", "I", "L", "Z", "PK", "SK", "X", "P", "Q", "H", "KS", "Y", "S", "E", "D", "W", "J", "F", "V", "R", "C", "KI", "T", "U", "KK", "N", "M", "Key", "k", "DC", "Sk", "ID"], "ok": ["valid", "http", "ready", "oko", "Ok", "ise", "ko", "off", "oh", "options", "log", "length", "ijk", "id", "key", "err", "ack", "good", "ck", "ops", "order", "ob", "app", "of", "result", "er", "pick", "read", "always", "pull", "o", "info", "auto", "iter", "org", "error", "ocr", "sync", "ak", "checks", "sk", "oc", "or", "maybe", "k", "work", "os", "ks", "OK", "coll", "kids", "check", "now", "clean", "od"], "i": ["f", "li", "fi", "I", "is", "clip", "di", "iv", "in", "ri", "cli", "id", "gi", "index", "ai", "io", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "c", "ie", "zi", "uri", "u", "pi", "o", "j", "e", "js", "ii", "info", "qi", "api", "p", "ti", "b", "x", "oi", "hi", "slice", "abi", "ini", "start", "z", "ci", "k", "ip", "xi", "iu", "init", "chi", "ix", "bi", "lc", "a"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int N = sc.nextInt();\\n        int[] p = new int[N];\\n\\n        for(int i=0; i<N; i++){\\n            p[i] = sc.nextInt();\\n        }\\n\\n        boolean result = check(p);\\n\\n        if(!result){\\n            for(int i=0; i<N; i++){\\n                for(int j=0; j<N; j++){\\n                    if(i == j) break;\\n                    int[] list = p.clone();\\n\\n                    int tmp = list[i];\\n                    list[i] = list[j];\\n                    list[j] = tmp;\\n                    if(check(list)){\\n                        result = true;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n\\n        System.out.println(result ? \"YES\" : \"NO\");\\n\\n    }\\n\\n    public static boolean check(int[] list){\\n        boolean result = true;\\n\\n        for(int i=0; i<list.length-1; i++){\\n            if(list[i] > list[i+1]){\\n                result = false;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}", "target": "82", "substitutes": {"sc": ["class", "ner", "osc", "ch", " Sc", "nc", "out", "sche", "sb", "nt", "cle", "proc", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "scope", "anc", "cus", "SC", "c", "scan", "se", "cs", "sw", "uc", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "sp", " SC", "sch", "sh", "test", "ec", "cur", "sem", "lc", " scr"], "N": ["NE", "K", "Len", "I", "L", "Z", "Size", "X", " n", "Ni", "length", "P", "number", "Q", "NS", "SN", "H", "n", "S", "Y", "B", "Na", "D", "NL", "network", "MN", "W", "J", "F", "V", "No", "NM", "R", "NB", "NN", "T", "C", "Num", "M", "NA", "Ne", "NR", "Part", "Ns", "NT", "Number", "O", "KN"], "p": ["path", "data", "jp", "post", "P", "m", "params", "n", "l", "process", "patch", "pre", "py", "tp", "v", "t", "port", "c", "bp", "y", "ap", "per", "array", "pos", "pi", "e", "o", "np", "point", "s", "lp", "fp", "pid", "b", "ps", "pe", "po", "pp", "pool", "op", "sp", "part", "cp", "ip", "a", "pair", "q"], "i": ["f", "eni", "li", "fi", "I", "is", "di", "in", "ik", "ni", "ri", "gi", "id", "ami", "index", "cli", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "ie", "y", "uri", "zi", "pi", "u", "o", "e", "api", "ii", "info", "qi", "hi", "b", "x", "oi", "ti", "slice", "ini", "yi", "z", "ci", "k", "mi", "iu", "ip", "xi", "init", "uni", "chi", "ix", "ki", "bi", "multi", "a"], "result": ["value", "grade", "err", "number", "ret", "default", "bool", "arr", "message", "draw", "inc", "counter", "color", "function", "found", "cash", "sign", "br", "comment", "done", "match", "cup", "search", "diff", "style", "future", "winner", "use", "resource", "source", "cache", "pack", "current", "Result", "status", "date", "res", "mask", "response", "work", "test", "cur", "feature", "alpha", "method", "valid", "term", "instance", "end", "success", "page", "array", "row", "results", "continue", "successful", "compl", "data", "length", "report", "change", "ver", "sum", "ok", "complete", "zero", "output", "event", "warning", "card", "manager", "error", "pass", "rc", "root", "rule", "r"], "j": ["f", "uj", "li", "obj", "h", "jl", "jj", "jo", "jp", "key", "m", "index", "ji", "n", "si", "l", "ui", "v", "ja", " dj", "bj", "d", "y", "aj", "next", "u", "e", "o", "J", "js", "ii", "qi", "s", "b", "x", "ind", "start", "je", "temp", "z", "k", "ij", "a", "jet", "q"], "list": ["value", "name", "key", "code", "local", "default", "zip", "l", "block", "queue", "app", "t", "cl", "load", "stack", "temp", "view", "map", "listed", "cont", "string", "match", "pre", "diff", "pkg", "source", "set", "z", "part", "work", "test", "la", "lc", "li", "tree", "st", "range", "out", "pl", "id", "keep", "index", "null", "left", "type", "page", "chain", "entry", "array", "section", "all", "slice", "LIST", "k", "lists", "sh", "get", "pair", "lab", "parent", "path", "base", "ul", "data", "bl", "group", "wx", "json", "n", "v", "batch", "word", "str", "info", "x", "pe", "pool", "table", "coll"], "tmp": ["obj", "base", "data", "clip", "st", "nt", "count", "m", "zip", "pre", "v", "area", "ie", "max", "mp", "pos", "array", "txt", "source", "rb", "np", "ii", "amp", "stack", "sup", "nb", "kk", "start", "front", "len", "temp", "append", "part", "copy", "test", "stuff", "pad", "foo", "cmp", "prev"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String args[]) {\\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n        int t = 1;\\n        int n = in.nextInt();\\n        int m = in.nextInt();\\n        int a[] = new int[n];\\n        int x = 0,cnt=0,sum=0;\\n        for(int i=0;i<n;i++){\\n            a[i] = in.nextInt();\\n            sum+=a[i];\\n        }\\n        \\n        x = (int)Math.ceil(sum/(1.0*4*m));\\n        for(int i=0;i<n;i++){\\n            if(a[i]>=x) cnt++;\\n        }\\n        System.out.println(cnt>=m?\"Yes\":\"No\");\\n    }\\n}", "target": "43", "substitutes": {"in": ["f", "gen", "ner", "h", "name", "cin", "data", "is", "input", "out", "lin", "token", "log", "err", "din", "id", "inner", "thin", "pin", "session", "nin", "exec", "IN", "inn", "g", "c", "scan", "bin", "er", "d", "reader", "isin", "kin", "inc", "serv", "buffer", "ex", "source", "e", "inside", "s", "fa", "as", "p", "b", "bis", "rin", "slice", "ini", "login", "again", "line", "ins", "conn", "connection", "init", "In", "gin", "r"], "t": ["f", "time", "h", "nt", "g", "v", "it", "c", "type", "d", "y", "u", "e", "o", "j", "at", "p", "ot", "ti", "T", "w", "z", "ta", "mt", "tm"], "n": ["f", "h", "ne", "nc", "net", "no", "nt", "count", "l", "v", "c", "d", "num", "y", "sn", "u", "e", "o", "j", "s", "p", "b", "ns", "en", "w", "N", "z", "k", "size", "mn", "an", "nn", "r"], "m": ["f", "nm", "h", "mc", "mon", "l", "mu", "g", "v", "c", "d", "ms", "y", "num", "cm", "u", "e", "o", "j", "mm", "p", "b", "w", "M", "dm", "md", "z", "k", "mn", "mi", "sm", "an", "tm", "scale", "r"], "a": ["h", "ama", "am", "data", "ga", "A", "ab", "ma", "ea", "ac", "na", "ba", "ca", "area", "c", "aa", "d", "aj", "array", "va", "u", "aux", "o", "aaa", "auto", "s", "at", "as", "sa", "b", "ia", "p", "ha", "sup", "au", "ans", "ata", "qa", "an", "ae", "alpha", "la"], "x": ["f", "xy", "xc", "cross", "h", "xx", "X", "wx", "id", "index", "l", "na", "v", "c", "tx", "d", "y", "dx", "pos", "fx", "ax", "ex", "u", "e", "o", "j", "xs", "p", "b", "w", "q", "xxx", "rx", "z", "px", "wa", "ip", "xi", "ix", "xp", "r"], "cnt": ["Cnn", "lcnt", "cnc", "scnc", " cnc", "cnn", "ccount", "Cnc", "Cnt", "scnn", " cint", "lcnn", " cNT", "lccount", "cint", " cnn", "Ccount", "cNT", "lcnc", "scNT", "lcint", "Cint", "CNT", "scnt", "lcNT", " ccount"], "sum": ["parse", "sim", "sam", "summary", "miss", "vol", "am", "plus", "out", "mass", "ma", "ad", "cum", "count", "index", "si", "ac", "total", "mu", "v", "up", "sign", "min", "c", "diff", "um", "num", "max", "su", "sa", "space", "pass", "hash", "mem", "part", "size", "mean", "spread", "average", "sh", "alpha", "scale", "Sum"], "i": ["f", "eni", "li", "fi", "on", "I", "di", "ri", "ni", "gi", "id", "index", "ai", "io", "ji", "si", "l", "ui", "mu", "g", "v", "phi", "it", "c", "ie", "d", "y", "uri", "u", "e", "o", "j", "pi", "info", "ii", "qi", "hi", "p", "b", "oi", "ti", "ini", "yi", "z", "ci", "mi", "qa", "iu", "ip", "xi", "init", "ix", "chi", "multi", "bi", "q", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tvoid solve() {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint[] a = new int[n];\\n\t\tint[] b = new int[n];\\n\t\tint[] c = new int[n - 1];\\n\t\tfor(int i = 0; i < n; i++) a[i] = scan.nextInt();\\n\t\tfor(int i = 0; i < n; i++) b[i] = scan.nextInt();\\n\t\tfor(int i = 0; i < n - 1; i++) c[i] = scan.nextInt();\\n\t\tint out = 0;\\n\t\tfor(int i = 0; i < n - 1; i++) {\\n\t\t\tif(a[i + 1] - a[i] == 1) {\\n\t\t\t\tout += c[a[i] - 1];\\n\t\t\t}\\n\t\t\tout += b[a[i] - 1];\\n\t\t}\\n\t\tout += b[a[n - 1] - 1];\\n\t\tSystem.out.println(out);\\n\t\tscan.close();\\n\t}\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().solve();\\n\t}\\n}\\n", "target": "223", "substitutes": {"scan": ["gen", "parse", "stat", "ner", "skip", "car", "ann", "watch", "chan", "in", "pan", "match", "search", "pin", "inner", "ignore", "man", "ver", "l", "na", "inter", "con", "se", "cat", "bug", "er", "can", "plan", "kin", "query", "ban", "read", "serv", "re", "batch", "ry", "cache", "connect", "spin", "system", "all", "Scan", "nl", "row", "san", "sync", "slice", "sin", "pass", "see", "sc", "conn", "an", "walk", "look", "trace", "check", "nn", "ser", "run", "clean", "sign", "r", "span"], "n": ["f", "nan", "on", "ne", "name", "none", "nc", "in", "no", "nt", "m", "non", "nin", "l", "na", "g", "v", "t", "d", "num", "y", "network", "sn", "u", "e", "o", "j", "cn", "s", "dn", "p", "x", "un", "ns", "all", "nb", "en", "w", "N", "len", "z", "k", "conn", "an", "body", "nn", "el", "net"], "a": ["f", "am", "ga", "A", "in", "ab", "ad", "oa", "count", "code", "index", "ai", "ac", "na", "ba", "da", "area", "ca", "aa", "asa", "d", "y", "ar", "aj", "va", "u", "e", "o", "pa", "af", "aaa", "s", "p", "sa", "x", "as", "ia", "all", "w", "au", "ya", "qa", "an", "ae", "alpha", "la"], "b": ["f", "bf", "br", "base", "sb", "db", "ab", "bas", "binary", "bc", "l", "ac", "B", "wb", "ob", "g", "ba", "v", "t", "bp", "cat", "bin", "d", "y", "mb", "rb", "u", "e", "o", "lb", "bb", "p", "x", "cb", "w", "bs", "belt", "bd", "k", "abb", "eb", "be", "body", "fb", "r"], "c": ["f", "h", "ch", "nc", "cy", "m", "code", "cc", "l", "ac", "g", "v", "t", "cs", "ca", "cat", "d", "y", "ce", "cm", "u", "e", "o", "s", "p", "x", "C", "cr", "cb", "q", "cu", "sc", "z", "ci", "k", "ct", "cp", "ec", "an", "lc", "r"], "i": ["f", "eni", "li", "fi", "h", "I", "mini", "di", "iv", "in", "ri", "ni", "ik", "id", "gi", "cli", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "g", "it", "ie", "y", "uri", "u", "e", "o", "pi", "j", "api", "ii", "info", "qi", "p", "ti", "oi", "x", "hi", "abi", "ini", "yi", "z", "ci", "part", "mi", "iu", "ip", "xi", "init", "ix", "ki", "multi", "bi", "r"], "out": ["gen", "obj", "list", "exp", "name", "path", "string", "raw", "one", "off", "version", "prefix", "in", "no", "cli", "err", "key", "number", "code", "io", "report", "arr", "g", "sum", "diff", "result", "page", "doc", "write", "num", "OUT", "max", "update", "bit", "ax", "output", "dot", "ex", "buffer", "word", "str", "o", "user", "point", "cache", "full", "at", "x", "all", "pass", "Out", "w", "sync", "error", "pool", "extra", "again", "dump", "line", "size", " in", "part", "qa", "copy", "outer", "conn", "flat", "outs", "parent"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n\\n    Scanner sc = new Scanner(System.in);\\n    String ans = \"\";\\n    int N = sc.nextInt();\\n    int[] A = new int[N];\\n    for(int i = 0;i < N;i++){\\n      A[i] = sc.nextInt();\\n    }\\n    Arrays.sort(A);\\n    for(int i = 0;i < N-1;i++){\\n      if(A[i] == A[i+1]){\\n        ans = \"NO\";\\n        break;\\n      }else{\\n        ans = \"YES\";\\n      }\\n    }\\n    System.out.print(ans);\\n  }\\n}\\n", "target": "44", "substitutes": {"sc": ["ner", "osc", "ch", " Sc", "nc", "out", "sche", "sb", "search", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "sec", "na", "server", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "uc", "cl", "cor", "Sc", "system", "sq", "sa", "sci", "cr", "src", "rc", "cer", "enc", "or", "set", "sp", " SC", "ct", "sch", "parser", "ec", "cur", "lib", "lc"], "ans": ["ases", "ANS", "Ann", "vals", "activation", "string", "ats", "ann", "AS", "arts", "includes", "aned", "anon", "reads", "anas", "leans", "ons", "amps", "AN", "S", "acts", "ros", "cs", "ents", "scan", "ads", "aning", "can", "lan", "features", "ls", "nas", "ions", "aus", "asts", "s", "as", "ns", "An", "san", "cas", "ants", "atan", "vers", "olds", "ares", "sk", "artifacts", "results", "anus", "eps", "os", "ins", "ks", "ana", "ras", "strings", "an", "outs", "ars", "ds", "a"], "N": ["NE", "K", "Len", "I", "L", "Z", "Bi", "Size", "X", " n", "Ni", "Node", "P", "Q", "NS", "SN", "H", "n", "S", "Y", "B", "Na", "E", "D", "NL", "MN", "F", "V", "No", "NM", "NB", "R", "NN", "T", "C", "Num", "M", "NA", "Ne", "NR", "Part", "Ns", "ND", "NT", "O"], "A": ["Args", "FA", "SA", "I", "L", "AA", "AS", "X", "API", "P", "H", "AST", "AV", "ASC", "S", "B", "Y", "alpha", "AB", "As", "D", "II", "array", "Access", "W", "MA", "Ma", "F", "BA", "V", "At", "CA", "AF", "AC", "An", "The", "C", "U", "Ar", "Alpha", "M", "NA", "AM", "AR", "LA", "Total", "Ha", "Array", "Parts", "O", "a"], "i": ["f", "eni", "li", "fi", "h", "I", "mini", "data", "di", "out", "in", "ri", "ni", "cli", "id", "gi", "key", "index", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "min", "it", "c", "y", "uri", "u", "e", "pi", "o", "j", "info", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "slice", "abi", "ini", "z", "ci", "k", "mi", "ip", "xi", "init", "iu", "uni", "chi", "multi", "ix", "bi", "lc", "a"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint[] cnt = new int[26];\\n\t\t\\n\t\twhile (sc.hasNext()) {\\n\t\t\tString str = sc.nextLine();\\n\t\t\t\\n\t\t\tfor (int i = 0; i < str.length(); i++) {\\n\t\t\t\tchar c = str.charAt(i);\\n\t\t\t\t\\n\t\t\t\tif (Character.isUpperCase(c))\\n\t\t\t\t\tcnt[c - 'A']++;\\n\t\t\t\telse if (Character.isLowerCase(c))\\n\t\t\t\t\tcnt[c - 'a']++;\\n\t\t\t}\\n\t\t}\\n\t\tfor (int i = 0; i < 26; i++) {\\n\t\t\tSystem.out.printf(\"%c : %d\\n\", 'a' + i, cnt[i]);\\n\t\t}\\n\t}\\n}\\n", "target": "242", "substitutes": {"sc": ["osc", "ch", "ner", "mc", "RC", "nc", "st", "search", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "sec", "server", "anc", "ca", "SC", "se", "scan", "cs", "sw", "uc", "cl", "reader", "Sc", "system", "sci", "cr", "src", "sf", "sync", "rc", "sr", "sl", "sp", "ci", " SC", "sh", "ec", "tc", "lc"], "cnt": [" cant", "acNT", "lcent", "dcant", "lcnt", "dcNT", "cnn", "Cwd", "cwd", "Cct", " cwd", "ocnn", "occt", "lcct", "Cnt", " cout", "lcnn", " cNT", "cct", "cant", "cout", "Cant", "dcout", "ocent", "acwd", " cnn", "acct", " cent", "cNT", " cct", "cent", "dcnt", "CNT", "ocnt", "acnt", "Cout"], "str": ["f", "tr", "h", "br", "div", "ch", "string", "stri", "st", "in", "err", "fr", "pr", "n", "dr", "l", "text", "g", "form", "cl", "kr", "dec", "spec", "txt", "hr", "iter", "s", "b", "STR", "strip", "cr", "sr", "enc", "char", "sl", "sp", "line", "cur", "coll", "lc", "Str", "r"], "i": ["f", "eni", "li", "fi", "h", "ch", "I", "vi", "data", "is", "di", "in", "ri", "err", "id", "gi", "m", "index", "inner", "ai", "io", "n", "si", "ori", "ui", "phi", "v", "it", "ie", "d", "y", "uri", "zi", "pi", "u", "e", "o", "j", "info", "ii", "qi", "p", "hi", "b", "x", "oi", "ti", "slice", "rc", "ini", "ci", "mi", "ip", "iu", "xi", "init", "ix", "chi", "multi", "bi", "a"], "c": ["f", "h", "ch", "cf", "mc", "vc", "co", "nc", "cy", "code", "cc", "esc", "n", "character", "l", "ac", "g", "v", "t", "cs", "cat", "cl", "d", "uc", "ce", "u", "e", "s", "p", "dc", "b", "cr", "C", "ic", "enc", "cu", "char", "col", "ci", "k", "ct", "arc", "ec", "cur", "coll", "lc", "a", "r"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String[] abcd = br.readLine().split(\" \");\\n        int a = Integer.parseInt(abcd[0]);\\n        int b = Integer.parseInt(abcd[1]);\\n        int c = Integer.parseInt(abcd[2]);\\n        int d = Integer.parseInt(abcd[3]);\\n        \\n        int ans = Math.min(b, d) - Math.max(a, c);\\n        System.out.println(Math.max(ans, 0));\\n    }\\n}\\n", "target": "47", "substitutes": {}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String[] $){\\n\t\tScanner s=new Scanner(System.in);\\n\t\tint a=s.nextInt(),b=s.nextInt();\\n\t\tSystem.out.println((a+b)%2==0?(a+b)/2:\"IMPOSSIBLE\");\\n\t}\\n}\\n", "target": "31", "substitutes": {"s": ["f", "ts", "is", "abs", "sb", "in", "out", "core", "n", "si", "l", "S", "ss", "ops", "v", "c", "se", "er", "d", "ms", "ls", "es", "u", "e", "o", "js", "xs", "p", "as", "bis", "stats", "ns", "sf", "sync", "ps", "ws", "ans", "sl", "os", "ins", "i", "parser", "ses", "rs", "fs", "ds", "r"], "a": ["f", "sta", "ga", "A", "ab", "ad", "oa", "n", "ea", "ac", "ba", "da", "ca", "area", "c", "aa", "asa", "d", "aj", "va", "u", "pa", "af", "api", "aaa", "auto", "fa", "sa", "p", "x", "ia", "as", "au", "i", "an", "ae", "alpha", "la"], "b": ["f", "gb", "bf", "pb", "base", "sb", "ab", "ub", "n", "l", "B", "wb", "ob", "ba", "v", "emb", "c", "aa", "amb", "d", "y", "mb", "rb", "e", "lb", "j", "bb", "p", "x", "nb", "ib", "bs", "i", "abb", "eb", "fb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] a = new int[n];\\n\t\tint[] b = new int[8];\\n\t\tint r = 0, c = 0;\\n\t\tfor(int i = 0 ; i < n ; i++) a[i] = sc.nextInt();\\n\t\tfor(int i = 0 ; i < n ; i++) {\\n\t\t\tint index = a[i] / 400;\\n\t\t\tif(index == 0) b[index]++;\\n\t\t\telse if(index == 1) b[index]++;\\n\t\t\telse if(index == 2) b[index]++;\\n\t\t\telse if(index == 3) b[index]++;\\n\t\t\telse if(index == 4) b[index]++;\\n\t\t\telse if(index == 5) b[index]++;\\n\t\t\telse if(index == 6) b[index]++;\\n\t\t\telse if(index == 7) b[index]++;\\n\t\t\telse c++;\\n\t\t}\\n\t\tfor(int i = 0 ; i < 8 ; i++) {\\n\t\t\tif(b[i] != 0) r++;\\n\t\t}\\n\t\tint min = Math.max(1, r);\\n\t\tint max = 0;\\n\t\tif(min == r) max = c + r;\\n\t\telse max = c;\\n\t\tSystem.out.println(min + \" \" + max);\\n\t}\\n}\\n", "target": "94", "substitutes": {"sc": ["ner", "ch", "osc", " Sc", "nc", "st", "sb", "out", "sche", "cc", "bc", "esc", "asc", "pc", "ss", "scope", "g", "anc", "SC", "se", "scan", "cs", "cl", "sw", "uc", "str", "Sc", "system", "sq", "sa", "sci", "src", "sf", "sync", "rc", "sr", "sk", "soc", "sl", "sp", "ci", " SC", "sch", "sh", "sem", "screen", "lc", " scr"], "n": ["f", "h", "ne", "nc", "net", "in", "no", "nt", "m", "l", "g", "v", "t", "d", "num", "y", "sn", "u", "e", "o", "j", "ii", "s", "p", "x", "ns", "nb", "en", "w", "N", "len", "z", "nr", "k", "an", "nn"], "a": ["f", "ama", "am", "A", "ab", "ad", "ma", "ai", "ac", "na", "ba", "da", "area", "ca", "aa", "asa", "d", "y", "ar", "aj", "array", "va", "u", "aaa", "api", "s", "sa", "as", "p", "x", "ia", "w", "au", "tta", "an", "ae", "ada", "alpha"], "b": ["f", "gb", "bf", "pb", "br", "h", "hub", "base", "bu", "sb", "db", "ab", "m", "l", "block", "B", "wb", "home", "ob", "g", "v", "ba", "t", "bug", "bin", "d", "y", "mb", "rb", "u", "e", "o", "api", "bb", "s", "p", "x", "nb", "ib", "bd", "part", "bs", "big", "k", "abb", "an", "be", "body", "bi", "fb"], "r": ["f", "tr", "h", "br", "rec", "range", "in", "err", "m", "fr", "pr", "l", "g", "v", "d", "er", "ar", "rn", "re", "rb", "u", "e", "o", "hr", "p", "R", "x", "ru", "cr", "yr", "w", "rc", "q", "sr", "or", "rr", "z", "nr", "k", "rd", "cur", "rs", "lr", "right", "ir"], "c": ["f", "h", "ch", "cf", "nc", "count", "m", "cy", "cc", "pc", "l", "g", "v", "t", "d", "y", "cm", "u", "e", "o", "cn", "s", "p", "x", "C", "cr", "w", "q", "cu", "col", "z", "ci", "k", "ct", "lc"], "i": ["f", "eni", "li", "I", "mini", "is", "di", "in", "ri", "ni", "id", "gi", "image", "inner", "ai", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "it", "ie", "d", "y", "uri", "u", "e", "o", "j", "pi", "info", "ii", "qi", "field", "p", "hi", "x", "oi", "ti", "slice", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "multi", "bi"], "index": ["f", "value", "level", "name", "prefix", "in", "image", "number", "key", "block", "office", "fix", "inc", "draw", "pull", "position", "axis", "head", "view", "size", "check", "string", "di", "column", "match", "search", "active", "unit", "option", "where", "address", "loop", "diff", "style", "site", "update", "source", "weight", "width", "digit", "full", "field", "date", "status", "letter", "ind", "col", "part", "ix", "bi", "instance", "element", "id", "post", "insert", "left", "end", "type", "page", "num", "add", "e", "show", "iter", "ion", "sync", "action", "slice", "connection", "host", "list", "shape", "cell", "path", "Index", "data", "pattern", "edge", "length", "object", "si", "character", "d", "word", "point", "loc", "link", "x", "error", "xi", "body"], "min": ["f", "div", "skip", "dim", "none", "mini", "base", "shift", "co", "don", "range", "err", "m", "when", "low", "default", "mid", "step", "MIN", "last", "v", "diff", "sum", "Mini", "d", "pos", "small", "Min", "dec", "ax", "ra", "p", "un", "mod", "cr", "start", "po", "sol", "pm", "size", "mean", "amin", "init", "pri", "cur", "lower", "sign"], "max": ["rand", "div", "exp", "wrap", "shift", "between", "co", "range", "no", "az", "ad", "id", "count", "default", "low", "pr", "ver", "step", "total", "patch", "est", "last", "sum", "diff", "end", "rest", "ca", "conf", "cat", "cl", "d", "chain", "dec", "Min", "ax", "cycle", "add", "ra", "power", "cache", "point", "mod", "x", "row", "and", "w", "res", "start", "Max", "or", "MAX", "with", "maximum", "k", "size", "pad", "right", "std", "parent", "scale", "q"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        String C = sc.next();\\n        byte[] byteC = C.getBytes();\\n        byteC[0]++;\\n        String nextC = new String(byteC);\\n        \\n        System.out.println(nextC);\\n    }\\n}", "target": "150", "substitutes": {"sc": ["osc", "mc", " Sc", "RC", "nc", "cy", "cc", "bc", "esc", "asc", "pc", "NC", "ss", "sec", "scope", "ca", "SC", "c", "scan", "cs", "uc", "cl", "se", "cus", "spec", "acc", "Sc", "system", "sub", "sci", "cr", "src", "sync", "rc", "ci", "sp", " SC", "ct", "ec", "desc", "lc"], "C": ["CNN", "KC", "JC", "CM", "L", " c", "P", "WC", "NC", "MC", "FC", "ASC", "S", "B", "SC", "c", "CF", "CI", "Cow", "LC", "F", "CL", "CA", "EC", "T", "CR", "U", "N", "CV", "CS", "Cu", "GC", "CC", "DC", "CE", "CU", "BC", "CCC", "VC", "O"], "byteC": ["linec", "characterFC", "shortc", "newEC", "ByteN", "byteFC", "ByteC", "channelT", "newC", "byteT", "characterEC", " bytec", "channelN", "newc", "shortB", " byteB", "Bytec", "byteN", "byteEC", "characterc", "bytec", "shortC", "lineC", "channelc", " byteEC", "byteB", "ByteT", "channelC", "lineB", " byteFC", "characterC", " byteT", "newFC", " byteN"], "nextC": ["NextCL", "prevC", "prevCL", "pageCC", "Nextc", " nextB", "nextB", "newC", "newc", "pageC", "nextCL", " nextCL", " nextL", "nextc", "NextC", "prevB", "pagec", "pageB", "NextB", "NextL", "NextCC", "newB", "newCC", "nextCC", "prevL", "nextL"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String args[]) {\\n        Scanner scan = new Scanner(System.in);\\n        int n = scan.nextInt();\\n        int k = scan.nextInt();\\n        int[] arr = new int[n];\\n        for(int i=0;i<n;i++)arr[i] = scan.nextInt();\\n        scan.close();\\n        int[] dp = new int[n+1];\\n        Arrays.fill(dp,1000000005);\\n        dp[0] = 0;\\n        for(int i= 0;i<n;i++){\\n            for(int j=1;j<=k;j++){\\n                if(i+j < n)dp[i+j] = Math.min(dp[i+j],dp[i] + Math.abs(arr[i]- arr[i+j]));\\n            }\\n        }\\n        System.out.println(dp[n-1]);\\n        }\\n}\\n", "target": "241", "substitutes": {"scan": ["stat", "parse", "ner", "skip", "ann", "watch", " scanner", "out", "in", "fan", "match", "search", "ignore", "report", "ser", "na", "server", "se", "cat", "bug", "er", "can", "reader", "plan", "use", "ban", "feed", "read", "mer", "query", "ry", "user", "connect", "system", "Scan", "ln", "san", "sync", "slice", "see", "sc", "ans", "sys", "parser", "an", "walk", "look", "check", "nn", "run", "clean", "sign", "r", "span"], "n": ["f", "nan", "ner", "h", "ne", "nc", "net", "in", "no", "nt", "m", "kn", "l", "nin", "v", "t", "c", "d", "num", "y", "network", "sn", "u", "e", "o", "np", "cn", "s", "p", "b", "x", "all", "ln", "ns", "en", "nb", "w", "un", "N", "z", "mn", "size", "conn", "an", "nn", "r"], "k": ["f", "h", "K", "ik", "m", "l", "g", "v", "ok", "c", "d", "y", "max", "u", "e", "o", "s", "p", "b", "x", "w", "N", "sk", "z", "ks", "q", "r"], "arr": ["f", "list", "br", "ch", "dim", "adv", "data", "ann", "dist", "ab", "db", "err", "arch", "fr", "ai", "pr", "par", "l", "dr", "deb", "rep", "df", "v", "app", "attr", "dat", "aa", "ray", "cat", "d", "air", "ar", "aj", "array", "nn", "adj", "frac", "str", "img", "bb", "av", "p", "b", "all", "Ar", "au", "var", "len", "rr", "z", "coll", "a", "adr", "Array", "ds", "q", "r"], "i": ["f", "eni", "li", "fi", "I", "mini", "vi", "is", "di", "anti", "ik", "ni", "ri", "id", "gi", "cli", "index", "ami", "ai", "io", "ji", "si", "ori", "ui", "phi", "it", "ie", "y", "uri", "pi", "u", "o", "e", "api", "ii", "info", "qi", "p", "hi", "oi", "x", "ind", "ini", "yi", "ci", "mi", "iu", "ip", "xi", "init", "ix", "ki", "bi"], "dp": ["cd", "pb", "div", "dim", "data", "wp", "di", "dt", "dist", "db", "dep", "params", "dr", "deb", "rep", "address", "py", "df", "tp", "pd", "dat", "duration", "gp", "d", "pos", "pkg", "dl", "array", "dh", "pi", "img", "xd", "api", "np", "depth", "dB", "pid", "dc", "p", "lp", "fp", "dq", "DP", "dm", "ps", "var", "bps", "pp", "vp", "dd", "eps", "delay", "cp", "ip", "pad", "adr", "dict", "ds"], "j": ["f", "uj", "li", "br", "jl", "jj", "ch", "jo", "oj", "jp", "length", "key", "ji", "si", "dj", "l", "ui", "jc", "v", "g", "it", "ja", "ie", "d", "bj", "y", "aj", "next", "u", "e", "o", "J", "js", "ii", "api", "qi", "jon", "p", "b", "x", "je", "z", "ij", "jet", "q", "jit"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\ttry {\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(\\n\t\t\t\t\tSystem.in));\\n\t\t\tString line;\\n\t\t\tString[] strArray = new String[3];\\n\t\t\tboolean cntFlg = true;\\n\\n\t\t\twhile (cntFlg == true){\\n\t\t\t\t\\n\t\t\t\tline = br.readLine();\\n\t\t\t\tstrArray = line.split(\"\\\\s\");\\n\t\t\t\t\\n\t\t\t\tswitch (strArray[1].charAt(0)) {\\n\t\t\t\tcase '+':\\n\t\t\t\t\tSystem.out.println(Integer.parseInt(strArray[0])\\n\t\t\t\t\t\t\t+ Integer.parseInt(strArray[2]));\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '-':\\n\t\t\t\t\tSystem.out.println(Integer.parseInt(strArray[0])\\n\t\t\t\t\t\t\t- Integer.parseInt(strArray[2]));\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '*':\\n\t\t\t\t\tSystem.out.println(Integer.parseInt(strArray[0])\\n\t\t\t\t\t\t\t* Integer.parseInt(strArray[2]));\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '/':\\n\t\t\t\t\tSystem.out.println(Integer.parseInt(strArray[0])\\n\t\t\t\t\t\t\t/ Integer.parseInt(strArray[2]));\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '?':\\n\t\t\t\t\tcntFlg = false;\\n\t\t\t\t\tbreak;\\n\t\t\t\tdefault:\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tbr.close();\\n\t\t} catch (Exception e) {\\n\t\t\tSystem.err.println(e);\\n\t\t}\\n\t}\\n}", "target": "139", "substitutes": {"br": ["bm", "obj", "http", "tr", "ch", "bh", "ctr", "db", "oper", "ab", "bl", "err", "bro", "fr", "bc", "io", "report", "ver", "dr", "arr", "runner", "raf", "mr", "bar", "result", "buf", "vr", "er", "reader", "wr", "rb", "gr", "hr", "str", "img", "handle", "buffer", "iter", "HR", "b", "cr", "yr", "cb", "ocr", "ber", "res", "jar", "BR", "bridge", "lr", "browser", "Br", "r"], "line": ["f", "value", "parse", "comment", "name", "cell", "string", "data", "lin", "out", "in", "no", "log", "err", "lf", "lines", "code", "key", "unit", "l", "text", "block", "end", "result", "page", "style", "write", "entry", "ge", "buffer", "Line", "le", "e", "str", "url", "word", "b", "letter", "row", "strip", "error", "file", "sync", "pe", "sl", "part", "header", "i", "look", "LINE", "lc", "el", "r"], "strArray": ["StrObject", "iterOrder", "StrList", "origAr", "hrOrder", "arArray", "curAddress", "brString", "iterAr", " strString", "spString", "crAr", "erArray", "arrString", "strAddress", "crString", "hrArray", "slBook", "curAr", "strList", " strOrder", "strInt", " strList", "drarray", "arString", "brFile", " strInt", "StrFile", " strFile", "StrAmount", "arrObject", "StrString", "erString", "crArray", "StrAr", "iterObject", "striOrder", "stringArray", "hrAr", "slInt", "origInt", "striBook", "slArray", "brAmount", "stringArea", "brArray", " strAr", "stringObject", " strBook", " strAmount", "slOrder", "StrOrder", "strArea", " strarray", "arrArea", "iterArray", "slAs", "origArray", "origAs", "stringAr", "striArray", "strObject", "StrArray", "stringarray", "hrObject", "slAr", "stringString", " strObject", "arrArray", "drString", "ararray", "strAr", "curString", "arList", "spOrder", "crAddress", "Strarray", "strAs", "strOrder", "erAr", "striInt", "strFile", "StrArea", "erAddress", " strAs", "strBook", "strAmount", "strarray", "drAr", "StrAddress", "drArray", "strString", "spAr", "spArray", " strAddress", "curArray"], "cntFlg": ["cNTFlgs", "cntLgm", "cndflg", "cntLn", "cNTFlq", "cntFLn", "cntflgm", "cntLge", "cndflgs", "cndFlgs", "cncFln", "cNTFgs", "cNTFlG", "cntFgm", "cndFlG", "cntFlgm", "cndflgm", "cntflgs", "cntLq", "cntFlge", "cNTFq", "cndFlg", "cncFLg", "cntFLgs", "cntflq", "cntflG", "cncFlg", "cntFLg", "cncFLgs", "cntFlgs", "cntFge", "cntFlG", "cncFlge", "cntFln", "cntFg", "cntFlq", "cncFlgs", "cncFLge", "cncFLn", "cntFLge", "cNTFG", "cNTFlg", "cndFlgm", "cntFq", "cntLg", "cndflG", "cntLG", "cntLgs", "cntFgs", "cntFn", "cNTFg", "cntflg", "cntFG"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner scan = new java.util.Scanner(System.in);\\n        String s = scan.next();\\n        boolean b = true;\\n        for(int i = 0; i < s.length(); i++){\\n            if(i % 2 == 0 && b){\\n                if(s.charAt(i) == 'R' || s.charAt(i) == 'U' || s.charAt(i) == 'D'){\\n                    b = true;\\n                }else{\\n                    b = false;\\n                }\\n            }else if(b){\\n                if(s.charAt(i) == 'L' || s.charAt(i) == 'U' || s.charAt(i) == 'D'){\\n                    b = true;\\n                }else{\\n                    b = false;\\n                }\\n            }\\n        }\\n        if(b){\\n            System.out.println(\"Yes\");\\n        }else{\\n            System.out.println(\"No\");\\n        }\\n    }\\n}", "target": "205", "substitutes": {"scan": ["stat", "parse", "ner", "ann", " scanner", "out", "in", "search", "ignore", "south", "n", "l", "ss", "server", "v", "se", "bug", "er", "can", "reader", "feed", "read", "connect", "system", "Scan", "sync", "sin", "start", "sc", "ans", "sys", "parser", "an", "walk", "look", "get", "skip", "run", "clean", "bis", "r"], "s": ["f", "stat", "ts", "http", "string", "is", "input", "abs", "sb", "in", "sv", "lines", "gs", "parts", "n", "si", "l", "its", "S", "ss", "t", "cs", "c", "rows", "d", "words", "y", "su", "site", "ls", "es", "u", "e", "str", "js", "qs", "services", "xs", "p", "bis", "blocks", "ns", "stats", "ps", "ws", "ans", "sl", "sys", "bs", "styles", "os", "ins", "us", "strings", "ses", "ks", "rs", "states", "fs", "ds", "a", "r"], "i": ["f", "li", "h", "name", "I", "string", "is", "di", "iv", "in", "ri", "id", "gi", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "c", "ie", "d", "y", "uri", "zi", "source", "u", "e", "pi", "o", "j", "info", "ii", "qi", "p", "hi", "x", "oi", "ti", "ic", "slice", "abi", "ini", "start", "ci", "k", "iu", "xi", "ip", "isi", "chi", "multi", "ix", "bi", "r"], "b": ["f", "bf", "pb", "h", "br", "base", "is", "sb", "bh", "db", "ab", "bl", "binary", "bc", "not", "n", "bad", "l", "B", "wb", "ob", "g", "v", "ba", "t", "c", "bar", "bug", "bin", "d", "y", "mb", "rb", "u", "e", "lb", "o", "aaa", "bb", "p", "x", "bis", "boot", "bo", "nb", "cb", "ib", "bs", "bd", "k", "part", "abb", "eb", "be", "body", "bi", "fb", "bg", "a", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        long N = sc.nextLong();\\n\\n        for(long i = N; i < 10000000; i++) {\\n            if(isPrime(i)) {\\n                System.out.println(i);\\n                break;\\n            }\\n        }\\n\\n    }\\n    public static boolean isPrime(long N) {\\n        if(N == 1) return false;\\n        for(long i = 2; i * i <= N; i++) {\\n            if(N % i == 0) return false;\\n        }\\n        return true;\\n    }\\n}\\n", "target": "183", "substitutes": {"sc": ["class", "ner", "osc", " Sc", "nc", "nt", "cc", "bc", "esc", "asc", "pc", "l", "ss", "sec", "scope", "g", "SC", "se", "c", "scan", "cs", "cl", "spec", "acc", "str", "Sc", "system", "sq", "sub", "sci", "dc", "cr", "src", "cb", "sync", "rc", "sp", "ci", " SC", "sh", "ec", "comp"], "N": ["NE", "G", "K", "Length", "Len", "I", "L", "Z", "Size", "NI", "NF", "Sn", "X", "Ni", " n", "Count", "P", "NV", "Q", "NS", "SN", "H", "n", "NC", "S", "Y", "B", "E", "D", "NL", "network", "NH", "W", "J", "F", "V", "No", "NG", "NM", "R", "NB", "NN", "T", "C", "Num", "SIZE", "M", "NA", "Ne", "Ns", "NT", "Number", "O", "Sum"], "i": ["f", "li", "fi", "h", "I", "vi", "mini", "di", "in", "ri", "ni", "id", "gi", "m", "index", "number", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "it", "c", "d", "uri", "zi", "u", "pi", "e", "j", "o", "info", "ii", "ei", "qi", "p", "ti", "b", "x", "oi", "hi", "slice", "ini", "start", "yi", "z", "ci", "mi", "xi", "ip", "iu", "init", "ix", "chi", "bi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    \\n    \\n    public static void main(String[] args) throws Exception {\\n        \\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int Q = sc.nextInt();\\n        String S = sc.next();\\n        \\n        char[] buf = S.toCharArray();\\n        \\n        int[] acCnt = new int[S.length()];\\n        acCnt[0] = 0;\\n        int sumCnt = 0;\\n\\n        for (int i = 1; i < S.length(); ++i) {\\n        \\n            if ( (buf[i - 1] == 'A')  && (buf[i] == 'C') ) {\\n                ++sumCnt;\\n            }\\n            acCnt[i] = sumCnt;\\n        }\\n        \\n        for (int i = 0; i < Q; ++i) {\\n            int l = sc.nextInt() - 1;\\n            int r = sc.nextInt() - 1;\\n            int cnt = acCnt[r] - acCnt[l];\\n            System.out.println(cnt);\\n        }\\n        \\n    }\\n}\\n", "target": "52", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "fc", "mc", " Sc", "RC", "nc", "out", "sche", "sb", "cle", "cli", "cv", "search", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "scope", "anc", "cus", "SC", "c", "scan", "cs", "uc", "se", "sw", "cl", "com", "ctx", "spec", "Sc", "loc", "system", "sq", "dc", "sci", "cr", "src", "sf", "sync", "rc", "cer", "enc", "soc", "sp", " SC", "sch", "sh", "ec", "tc", "cur", "lc"], "N": ["G", "K", "I", "L", "Z", "Size", "X", " n", "P", "NS", "H", "n", "B", "E", "D", "NL", "J", "F", "V", "R", "T", "C", "U", "M", "Ns", "NT", "O"], "Q": ["G", "K", "I", "L", "Z", "A", "X", "P", "H", "B", "Y", "E", "D", "MQ", "W", "J", "QL", "F", "V", "R", "NB", "T", "C", "U", "M", "Query", "O", "q"], "S": ["SA", "G", "K", "DS", "I", "L", "Si", "AS", "A", "SK", " s", "SO", "X", "P", "NS", "SN", "JSON", "SAM", "H", "Sample", "URI", "B", "SH", "ss", "BS", "RS", "SC", "ST", "VS", "SER", "D", "FS", "SL", "Su", "F", "V", "s", "R", "IS", "C", "SS", "T", "U", "SE", "TS", "M", "SU", "SR", "SP", "SM", "CSS", "GS", "SI"], "buf": ["Buffer", "f", "border", "br", "cf", "path", "data", "brace", "cmd", "buff", "bh", "ab", "ref", "cv", "code", "bc", "Buff", "text", "queue", "v", "conv", "ctx", "uc", "vec", "seq", "array", "txt", "buffer", "batch", "rb", "loc", "uf", "blocks", "b", "bag", "bo", "src", "tmp", "cas", "rc", "cb", "char", "bytes", "cur", "feat", "fb"], "acCnt": ["ACScct", "acPount", "accant", "acPn", "acscct", "acTtx", "acCn", "acScnt", "ACcant", "acUnt", "acScount", "acscnt", "ACCount", "acPant", "ACcct", "account", "acsCNT", "accct", "acCount", "acctx", "ACScnt", "acCct", "acScNT", "acCrt", "accn", "cCNT", "accrt", "acPNT", "cCct", "acPnt", "acsCnt", "ACCtx", "ccnt", "accnt", "cCrt", "acTnt", "acScn", "ACcn", "acUct", "acAcNT", "acTct", "acscNT", "acUNT", "acUrt", "ccrt", "ccNT", "ACcnt", "acAcrt", "acPct", "ACCct", "acTount", "acScct", "ACCNT", "ACCn", "accNT", "ACScNT", "acScant", "acCtx", "acAcct", "acscount", "ACCnt", "acCNT", "ACCant", "acCant", "acsCct", "ACScount", "acSctx", "ACSctx", "ccct", "cCnt", "acsCount", "acAcnt", "acAcount"], "sumCnt": ["sumcnt", " sumCrt", "sumScnc", "sumScant", "sumScnt", "sumcnc", " sumAcrt", "sumLrt", "sumAcn", "sumAcnt", "sumCct", "sumFNT", "sumAcct", " sumAcnt", " sumCct", "sumFn", "sumCn", "sumFct", "sumLn", " sumCant", "sumCrt", " sumCn", "sumcct", " sumCnc", " sumAcct", "sumScrt", "sumAcant", "sumcNT", "sumCant", "sumScNT", " sumAcant", "sumLNT", " sumCNT", "sumLnt", "sumAcNT", "sumcant", "sumcn", " sumAcnc", "sumAcrt", "sumCNT", " sumAcn", "sumScn", " sumAcNT", "sumFnt", "sumCnc", "sumAcnc"], "i": ["f", "eni", "li", "fi", "I", "vi", "is", "di", "ri", "ni", "gi", "id", "key", "inner", "ai", "io", "ji", "n", "si", "ori", "ui", "mu", "phi", "v", "t", "c", "ie", "y", "uli", "uri", "zi", "u", "pi", "o", "j", "e", "info", "ii", "qi", "s", "ti", "p", "b", "x", "hi", "oi", "slice", "abi", "ini", "q", "ci", "mi", "xi", "ip", "iu", "ix", "multi", "bi", "lc", "a"], "l": ["f", "li", "ul", "L", "ol", "n", "left", "v", "ll", "t", "c", "kl", "d", "dl", "u", "e", "o", "j", "lb", "s", "lp", "p", "b", "ln", "nl", "len", "sl", "z", "k", "a", "lc", "el", "q"], "r": ["f", "h", "rt", "ri", "m", "fr", "pr", "n", "dr", "g", "v", "c", "rl", "d", "er", "ar", "u", "e", "hr", "j", "o", "p", "R", "b", "x", "ru", "yr", "w", "rc", "sr", "or", "rr", "z", "k", "rs", "a", "ir", "q"], "cnt": ["Cnn", "lcnt", "cnn", "lcrt", "Count", "count", "ncnn", "Cnt", "encnt", "cnd", "ncnd", "encnd", "lcount", "ncrt", "lcnd", " cnn", " cnd", " count", "encount", "encrt", "ncount", "ncnt", "Cnd", "crt"]}}
{"code": "\\n\\nimport java.io.BufferedReader;\\nimport java.io.BufferedWriter;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStreamWriter;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    StringTokenizer tokenizer = null;\\n    int totalCases, testNum;\\n\\n    PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\\n\\n    void solve() throws IOException {\\n\\n    }\\n\\n    void execute() throws IOException {\\n        int k = ni();\\n        String s = ns();\\n        if (s.length() <= k) {\\n            out.println(s);\\n        } else {\\n            out.println(s.substring(0, k) + \"...\");\\n        }\\n\\n        out.close();\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        new Main().execute();\\n    }\\n\\n    void debug(Object... os) {\\n        System.out.println(Arrays.deepToString(os));\\n    }\\n\\n    int ni() throws IOException {\\n        return Integer.parseInt(ns());\\n    }\\n\\n    long nl() throws IOException {\\n        return Long.parseLong(ns());\\n    }\\n\\n    double nd() throws IOException {\\n        return Double.parseDouble(ns());\\n    }\\n\\n    String ns() throws IOException {\\n        while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            tokenizer = new StringTokenizer(br.readLine());\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    String nline() throws IOException {\\n        tokenizer = null;\\n        return br.readLine();\\n    }\\n\\n    boolean input() throws IOException {\\n        return true;\\n    }\\n\\n}\\n", "target": "248", "substitutes": {"br": ["obj", "tr", "ch", "ner", "shr", "bh", "ctr", "db", "cro", "bl", "err", "bt", "bro", "inner", "fr", "fore", "orb", "arr", "dr", "pre", "mr", "app", "vr", "result", "buf", "bar", "reader", "next", "rb", "gr", "hr", "str", "img", "p", "b", "cr", "src", "ocr", "ber", "res", "sr", "box", "or", "inv", "sp", "nr", "BR", "bridge", "browser", "Br", "r"], "tokenizer": ["authoriter", "tokenize", "Tokenizer", "Tokener", " tokeniter", "okeniter", "okener", "okenizable", "Tokenler", "Tokenizers", "Tokenizable", " tokenization", "okeniser", "tokeniter", "okenization", "serialize", "tokeniser", "authorizer", "okenizers", " tokeniser", "serializer", "Tokenization", "okenler", " tokenoder", "tokenizers", " tokenizers", "authorize", "authorization", "Tokeniser", "okenoder", " tokenler", "Tokenize", "serializers", "Tokeniter", " tokenize", " tokenizable", "tokenoder", "tokenler", "Tokenoder", "tokenization", "serialization", "tokenizable", "okenizer", " tokener", "okenize", "tokener"], "totalCases": ["totalCsatches", " totalCaces", "totalCatches", " totalcaces", "totalWases", "totalWalls", "totalCalls", "totalCaces", " totalCalls", "totalcaces", "totalcatches", "totalCsaces", "totalWaces", " totalCatches", "totalCsases", " totalcalls", "totalWatches", "totalcalls", "totalCsalls", "totalcases", " totalcases", " totalcatches"], "testNum": [" testLen", " testnum", "casenum", "testCount", "TestCount", "caseLen", "TestLen", "TestNum", "testLen", " testCount", "Testnum", "caseCount", "caseNum", "testnum"], "out": ["obj", "class", "client", "list", "exp", "name", "path", "string", "co", "input", "net", "in", "call", "no", "log", "err", "key", "code", "socket", "io", "report", "n", "window", "exec", "null", "server", "up", "sum", "v", "result", "page", "write", "bin", "OUT", "query", "array", "output", "ex", "this", "o", "str", "cache", "user", "word", "x", "error", "down", "Out", "w", "file", "res", "sync", "msg", "pool", "again", "temp", "line", "part", "work", "conn", "writer", "outer", "connection", "init", "outs", "lock", "later", "parent", "r"], "k": ["f", "kind", "kid", "K", "ko", "kj", "ik", "ek", "id", "m", "key", "kick", "n", "tk", "ck", " K", "g", "v", "ok", "end", "c", "num", "d", "max", "mk", "kin", "u", "e", "o", "j", "unk", "p", "x", "w", "sk", "ka", "z", "ks", "i", "ki", "ke", "km", "dk", "q", "kw"], "s": ["f", "h", "string", "series", "is", "abs", "in", "aws", "sv", "m", "gs", "si", "l", "S", "ss", "details", "g", "v", "cs", "c", "d", "ms", "site", "su", "spec", "ls", "u", "e", "o", "str", "js", "services", "p", "b", "ns", "sync", "w", "ps", "ws", "bytes", "ins", "ings", "i", "strings", "ses", "rs", "fs", "ds", "a", "r"], "os": ["obj", "oa", "dos", "object", "io", "ops", "ros", "oid", "ios", "ok", "Os", "nos", "ms", "pos", "oS", "so", "es", "OS", "o", " o", "p", "bos", "ose", "ns", "ps", "oids", "bot", "op", "osi", "los", "mos", "sys", "i", "objects", "aos", "oss"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tHashMap hs = new HashMap();\\n\t\tPrintWriter ou = new PrintWriter(System.out);\\n\t\tint[] a = new int[3];\\n\t\tfor(int i = 0 ; i < 3 ; i++){\\n\t\t\ta[i] = Integer.parseInt(sc.next());\\n\t\t}\\n\t\tou.print(a[2] / a[0] * a[1] + \"\\n\");\\n\t\tou.flush();\\n\t}\\n}", "target": "4", "substitutes": {"sc": ["osc", "ch", "exp", "mc", " Sc", "nc", "sche", "cli", "cv", "esc", "cc", "bc", "config", "asc", "pc", "exec", "ss", "sec", "scope", "anc", "ca", "SC", "c", "scan", "cs", "uc", "cl", "sw", "spec", "acc", "Sc", "sa", "sub", "sci", "cr", "src", "sync", "rc", "soc", "sp", "sh", "ec", "isc", "desc", "lc"], "hs": ["h", "ama", "path", "ache", "ga", "aid", "arch", "index", "ai", "H", "he", "app", "ctx", "d", "ap", "array", "aux", "ua", "xs", "x", "ha", "en", "ps", "hm", "hp", "host", "rs", "an", "foo"], "ou": ["web", "cho", "ne", "OU", "ko", "oy", "console", "out", "log", "uo", "ouf", "echo", "ao", "ut", "io", "you", "ouch", "ous", "ui", "ob", "eye", "print", "who", "oct", "uc", "feed", "output", "hole", "u", "o", "rou", "tu", "auto", "aud", "irc", "ose", "fat", "isu", "ocr", "w", "au", "println", "oul", "cu", "util", "acs", "our", "yout", "writer", "oug", "oup", "oo"], "a": ["f", "sha", "value", "sta", "h", "ama", "data", "input", "ga", "A", "ma", "code", "active", "n", "ea", "ac", "na", "aw", "da", "ba", "area", "ca", "aa", "c", "aj", "array", "pa", "u", "aux", "o", "va", "e", "ua", "auto", "at", "sa", "p", "as", "b", "all", "x", "ha", "action", "aura", "au", "w", "ast", "ata", "wa", "qa", "tta", "an", "alpha", "la"], "i": ["f", "li", "fi", "h", "I", "di", "in", "ri", "id", "gi", "m", "index", "ai", "ji", "n", "si", "ui", "mu", "v", "t", "it", "c", "type", "ie", "d", "y", "zi", "uri", "u", "e", "o", "pi", "j", "info", "ii", "qi", "at", "p", "ti", "b", "x", "oi", "hi", "abi", "start", "z", "ci", "k", "xi", "init", "iu", "chi", "multi", "bi", "r"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n\\n        int times = ((N - 1) / 111) + 1;\\n        System.out.print(times);\\n        System.out.print(times);\\n        System.out.println(times);\\n    }\\n}\\n", "target": "106", "substitutes": {"scanner": ["caner", "scanler", "Scanter", "scanener", "Scanner", "Scaner", "annner", "Scanener", "canener", "caninner", "anninner", "annter", "canter", "scanter", "annler", "Scaninner", "anner", "canler", "annener", "scaninner", "scaner", "Scanler", "canner"], "N": ["K", "I", "L", "Z", "Index", "Size", "NI", "X", " n", "Count", "Ni", "P", "NS", "SN", "H", "GN", "n", "S", "B", "Y", "Na", "D", "NH", "F", "V", "R", "NB", "NP", "C", "T", "Num", "M", "NA", "Ne", "Ns", "NY", "NT", "Number", "O"], "times": ["time", "runs", "ts", "series", "values", "length", "lines", "reads", "count", "timeout", "n", "its", "steps", "ES", "types", "ones", "cs", "rows", "nos", "hours", "ms", "features", "Times", "cells", "imes", "tips", "blocks", "ns", "shows", "TS", "cycles", "tests", "checks", "results", "PS", "size", "ks", " Times", "outs", "cases", "acks", "Time", "events"]}}
{"code": "import java.util.HashSet;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\t// \u5165\u529b\u5024\u306e\u53d6\u5f97\\n\t\tint N = sc.nextInt();\\n\t\tHashSet<Integer> A = new HashSet<>();\\n\t\t\\n\t\t// \u7d50\u679c\u306e\u51fa\u529b\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tif (!A.add(sc.nextInt())) {\\n\t\t\t\tSystem.out.println(\"NO\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(\"YES\");\\n\t\t\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "44", "substitutes": {"sc": [" cont", " scorer", " annot", " Sc", "ann", " arr", "sb", " sl", "ss", " cr", " ans", " subp", "SC", " rc", "scan", "Sc", "sq", "sa", "sf", " res", " app", " ann", " sci", " err", " sp", "an", " ser", " scr"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        FastScanner fs = new FastScanner();\\n        int N = fs.nextInt();\\n\\n        int ans = 0;\\n        for (int i = 1; i <= N; ++i) {\\n            int cnt = 0;\\n            for (int j = 1; j <= i; ++j) {\\n                if (i % j == 0) ++cnt;\\n            }\\n            if (cnt == 8 && i % 2 == 1) ++ans;\\n        }\\n\\n        System.out.println(ans);\\n    }\\n}\\n\\nclass FastScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n\\n    private boolean hasNextByte() {\\n        if (ptr < buflen) {\\n            return true;\\n        }else{\\n            ptr = 0;\\n            try {\\n                buflen = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (buflen <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\\n    public boolean hasNext() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\\n\\n    public String next() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while(isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n\\n    public long nextLong() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        long n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while(true){\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            }else if(b == -1 || !isPrintableChar(b)){\\n                return minus ? -n : n;\\n            }else{\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n\\n    public int nextInt() {\\n        long nl = nextLong();\\n        if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();\\n        return (int) nl;\\n    }\\n\\n    public double nextDouble() { return Double.parseDouble(next());}\\n}\\n\\n\\n", "target": "85", "substitutes": {"fs": ["f", "ts", "bf", "fc", "fd", "obs", "lf", "fr", "files", "io", "ss", "raf", "df", "ios", "fin", "cs", "FS", "ms", "fe", "reader", " FS", "fm", "ls", "fx", "feed", "F", "s", "fp", "fa", "ns", "sf", "ps", "Fs", "ws", "bs", "ins", "ips", "rs", "fn", "fb", "ds"], "N": ["NE", "G", "K", "Len", "I", "L", "Z", "Size", "NI", "Ni", "X", "P", "Q", "NS", "H", "NC", "S", "B", "Y", "D", "NL", "J", "F", "V", "R", "NN", "C", "T", "Num", "M", "Ns", "NT", "O"], "ans": ["ations", "ANS", "cons", " scans", "ats", "ann", "aned", "vs", "annot", "amps", "AN", "annels", "ss", "na", "anc", "cs", "ents", "scan", "errors", "lan", "features", "ls", "es", "ions", "ids", "nas", "ens", "aus", "asts", "s", "as", "blocks", "x", "ns", "ln", "cas", "ants", "sk", "eps", "aps", "os", "ins", "ks", "an", "outs", "ars", "span", "ds", "aos", "ons"], "i": ["eni", "f", "li", "fi", "I", "is", "di", "ri", "ni", "gi", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "ie", "y", "pi", "u", "o", "e", "info", "ii", "api", "qi", "ti", "hi", "x", "p", "oi", "abi", "ini", "start", "z", "ci", "mi", "ip", "xi", "iu", "ix", "ki", "multi", "bi"], "cnt": ["pcnt", "Ckt", "acNT", "Cnn", "lcnt", "cnn", "cno", "Count", "count", "Cnt", "lcnn", " cno", " cNT", "uncNT", "pcrt", "unckt", " ckt", "uncount", "ckt", "lcno", "pcNT", " cnn", "pcount", "cNT", "Crt", " count", "uncnt", "acount", "CNT", "acnt", "Cno", "acrt", "lcNT", "crt"], "j": ["f", "uj", "li", "obj", "jl", "jj", "ch", "jo", "oj", "jp", "di", "ni", "gi", "fr", "ji", "si", "l", "ori", "sec", "ui", "jc", "v", "ja", "ie", "bj", "d", "y", "aj", "u", "e", "o", "js", "J", "ii", "qi", "p", " ii", "z", "ci", "k", "fl", "ij", "xi", "bi"], "in": ["f", "path", "data", "is", "input", "out", "lin", "err", "din", "socket", "inner", "binary", "inas", "pin", "io", "readable", "l", "exec", "ac", "IN", "inn", "min", "con", "bin", "reader", "isin", "resource", "inc", "read", "source", "re", "this", "url", "p", "as", "file", "rin", "ini", "login", "win", "part", "ins", "connection", "init", "inet", "arin", "In", "inf", "r"], "buffer": ["Buffer", "value", "border", "uffer", "store", "comment", "base", "data", "input", "padding", "buff", "length", "limit", "binary", "seed", "image", "window", "device", "message", "block", "queue", "address", "server", "bar", "result", "buf", "layer", "bin", "reader", "request", "resource", "read", "output", "batch", "source", "transfer", "cache", "url", "position", "bb", "iter", "flush", "slice", "file", "append", "table", "header", "size", "bytes", "pad", "memory", "fb", "sequence", "reference"], "ptr": ["lf", "code", "dr", "pend", "patch", "attr", "ctx", "buf", "rl", "ext", "ft", "wr", "pull", "qi", "offset", "coord", " pointer", "size", "ct", "cp", "cap", "tc", "const", "tr", "br", "shift", "buff", "ctr", "grad", "nt", "address", "fp", "cur", "cmp", "cf", "rt", "pl", "index", "tp", "xt", "pos", "dest", "p", "prot", "tmp", "slice", "char", "nr", "lr", "fd", "inst", "length", "fr", "pointers", "port", "ect", "pointer", "fe", "butt", "Ptr", "req", "str", "pt", "np", "loc", "flush", "src", "rc", "tip", "len", "addr", "pad", "adr"], "buflen": ["bugelen", "buclan", "buflun", "bullense", "boflen", "bufrn", "buglent", "buclent", "bumlen", "buygelon", "bufren", "buplen", "bofln", "fuFlun", "fuFlan", "bugellen", "buflent", "bupln", "buflense", "buyfllen", "buyflen", "buclon", "buyflon", "buflened", "buFlan", "bofrense", "buygellen", "bofrens", "bullens", "fuFlen", "bulln", "buflEN", "bumlsten", "bcflEN", "bofrn", "buygelened", "bcmlEN", "buFlent", "buygelen", "fuflun", "fuFlent", "bullEN", "bucllen", "bufrense", "buclened", "buflsten", "buFllen", "buyflened", "buglen", "bumln", "buFln", "fuflent", "buFlun", "buplEN", "bullen", "bcflsten", "bugelon", "fuflen", "buflens", "bcmlen", "buglan", "bofren", "bullsten", "buclen", "buglun", "bufllen", "bufln", "bugelened", "buFlens", "bcmlsten", "bcflen", "bcfln", "buclun", "buFlon", "bumlEN", "buplsten", "buFlened", "boflense", "buflon", "buflan", "boflens", "buFlense", "fuflan", "buFlen", "bcmln", "bufrens"], "c": ["f", "xc", "h", "ch", "fc", "nc", "count", "m", "code", "cc", "cy", "pc", "l", "ac", "g", "v", "ca", "cs", "uc", "d", "abc", "cm", "u", "e", "s", "dc", "p", "x", "C", "rc", "enc", "char", "sc", "cu", "col", "z", "ci", "k", "ec", "ctrl", "lc", "a", "r"], "sb": ["gb", "bm", "bf", "pb", "BB", "bh", "ssl", "db", "ab", "ub", "bt", "obb", "bc", "sg", "wb", "zb", "ob", "bp", "bj", "su", "mb", "rb", "xb", "SB", "lb", "bb", "sq", "sa", "lp", "nb", "cb", "sf", "kb", "ib", "bs", "sp", "bsp", "Bs", "eb", "fb", "bg", "sth", "rob"], "b": ["f", "bf", "h", "br", "base", "abs", "db", "ab", "bl", "bt", "binary", "bc", "orb", "l", "block", "bad", "B", "wb", "ob", "ba", "fb", "v", "emb", "bound", "bar", "end", "bp", "bin", "d", "t", "y", "abc", "mb", "bit", "xb", "rb", "u", "e", "lb", "o", "bb", "auto", "s", "p", "x", "bis", "reb", "boot", "nb", "cb", "w", "ib", "bot", "z", "bd", "k", "abb", "be", "body", "bi", "eb", "a", "r"], "n": ["f", "no", "nt", "count", "m", "number", "l", "v", "t", "num", "d", "sn", "u", "e", "p", "ns", "nb", "pn", "len", "z", "nr", "r"], "minus": [" plus", "Neg", "none", "mini", "plus", " needs", "shift", "without", "one", "eros", " gets", "zer", " neg", " trailing", "min", "Plus", "nos", " negative", " mini", " negatives", "small", "neg", "zero", "pos", "undo", "bits", " goes", "digit", "prime", "negative", "sub", " less", "gone", "missing", " doesn", "sin", " below", "extra", "credit", "partial", "beta", "two", " takes", "below", "sign"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\n\\n/**\\n * \u9078\u629e\u30bd\u30fc\u30c8\\n * \\n *\\n */\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tScanner s = new Scanner(System.in);\\n\\n\t\tint n = s.nextInt();\\n\t\t\\n\t\tint[] arr = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tarr[i] = s.nextInt();\\n\t\t}\\n\t\t\\n\t\tselectionSort(arr, n);\\n\t\t\\n\t}\\n\t\\n\tpublic static void selectionSort(int[] arr, int n) {\\n\t\tint count = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tint minj = i;\\n\t\t\tfor (int j = i; j < n; j++) {\\n\t\t\t\tif (arr[j] < arr[minj]) {\\n\t\t\t\t\tminj = j;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif (i != minj) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t\tint tmp = arr[i];\\n\t\t\tarr[i] = arr[minj];\\n\t\t\tarr[minj] = tmp;\\n\t\t}\\n\t\tprintArray(arr);\\n\t\tSystem.out.println(count);\\n\t}\\n\t\\n\tpublic static void printArray(int[] arr) {\\n\t\tString ans = \"\";\\n\t\tfor (int i = 0; i < arr.length; i++) {\\n\t\t\tans += arr[i] + \" \";\\n\t\t}\\n\t\tSystem.out.println(ans.trim());\\n\t}\\n}\\n", "target": "199", "substitutes": {"s": ["f", "is", "abs", "out", "in", "sb", "ssl", "sym", "sv", "gs", "m", "south", "si", "S", "ss", "g", "v", "se", "c", "er", "d", "su", "ls", "fts", "u", "e", "o", "js", "services", "p", "as", "b", "sets", "ns", "sf", "sync", "w", "ws", "sys", "os", "ins", "ses", "an", "fs", "ds", "bis", "r"], "n": ["f", "nan", "ner", "ne", "name", "nc", "net", "in", "no", "nt", "m", "number", "l", "g", "v", "min", "t", "c", "d", "num", "y", "network", "sn", "u", "e", "o", "nat", "dn", "p", "b", "x", "all", "ns", "nl", "nb", "en", "ln", "w", "N", "len", "z", "k", "size", "conn", "nor", "nn", "a", "r"], "arr": ["map", "obj", "list", "br", "dim", "inst", "data", "adv", "ann", "act", "align", "ab", "db", "err", "arch", "fr", "pr", "par", "dr", "na", "order", "rep", "app", "attr", "ray", "aa", "dat", "ash", "att", "air", "ar", "aj", "array", "abc", "ap", "acc", "war", "adj", "frac", "str", "img", "cache", "aaa", "gr", "av", "p", "rar", "x", "all", "var", "enc", "Ar", "au", "rr", "aps", "addr", "arc", "arm", "test", "art", "ras", "coll", "adr", "Array", "ars", "arp", "el", "a", "r"], "i": ["f", "eni", "li", "I", "mini", "di", "in", "anti", "ik", "ni", "ri", "id", "gi", "index", "inner", "ai", "cli", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "it", "c", "ie", "y", "uri", "u", "pi", "o", "e", "api", "ii", "info", "qi", "p", "hi", "b", "x", "oi", "ind", "slice", "abi", "ini", "start", "yi", "z", "ci", "k", "mi", "iu", "ip", "xi", "init", "ix", "a", "multi", "bi", "my", "q"], "count": ["list", "base", "act", "call", "nt", "Count", "length", "id", "number", "code", "index", "keep", "ignore", "key", "total", "order", "race", "sum", "area", "c", "type", "cat", "num", "max", "array", "counter", "info", "current", "depth", "p", "offset", "b", "x", "ind", "child", "start", "len", "col", "z", "size", "part", "test", "cur", "found", "coll", "now", "cmp", "parent"], "minj": [" minu", "minu", "mini", "maxi", "smalli", "smallj", " minn", "rainn", " minp", "mani", "modji", " minuj", "minJ", "maxb", "inj", "minuj", " minji", "maxji", "smallji", "Minj", "rainp", "modk", "modja", "Minja", "smallJ", "Mini", " minaj", " mini", "smalluj", "minja", "minaj", "minji", "Minji", "maxJ", "maxaj", "minb", "smallp", "rainu", "MinJ", " minb", "manaj", "inji", "minp", "manj", "maxuj", "Mink", "smallb", "ini", "maxj", "rainj", " mink", "mink", "smalln", " minja", "minn", "modj", "smallu"], "j": ["f", "uj", "li", "obj", "br", "jl", "jj", "jo", "oj", "jp", "id", "key", "index", "pr", "ji", "l", "dj", "ui", "py", "jc", "v", "it", "ja", "end", "ie", "bj", "y", "aj", "next", "u", "e", "o", "js", "api", "ii", "J", "qi", "adj", "p", "job", "b", "x", "ind", "start", "je", "z", "part", "k", "ij", "ix", "jet", "a", "r"], "tmp": ["obj", "st", "nt", "py", "v", "app", "diff", "area", "t", "tri", "mp", "frac", "img", "np", "bb", "mm", "p", "amp", "stack", "sup", "slice", "nb", "qq", "kk", "start", "front", "pp", "ptr", "temp", "part", "vt", " temp", "stuff", "test", "pad", "beta", "yy", "tc", "cmp", "prev"], "ans": ["anks", "ANS", "cons", "rans", "ats", "ils", "allows", "ann", "arts", "aned", "ays", "anas", "leans", "amps", "AN", "acts", "na", "anc", "aces", "ents", "ms", "lan", "ls", "photos", "nas", "ids", "ens", "as", "opens", "ns", "olds", "cas", "ants", "ps", "ares", "ags", "os", "ins", "ings", "ks", "ras", "rs", "an", "outs", "ars", "ams", "unders", "ds", "a", "ons"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.FileNotFoundException;\\nimport java.io.FileReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\n\\npublic class Main{\\n  static String YES = \"Yes\", NO= \"No\";\\n  public static void main(String[] args) throws IOException {\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt(), count = 0;\\n    for(int i=0; i<n; i++){\\n      if(sc.nextInt() == sc.nextInt()){\\n        if(++count == 3){\\n          System.out.println(YES);\\n          return;\\n        }\\n      }\\n      else{\\n        count =0;\\n      }\\n    }\\n    System.out.println(NO);\\n  }\\n\\n  static class Scanner {\\n    StringTokenizer st;\\n    BufferedReader br;\\n\\n    public Scanner(InputStream s) {\\n      br = new BufferedReader(new InputStreamReader(s));\\n    }\\n\\n    public Scanner(FileReader s) throws FileNotFoundException {\\n      br = new BufferedReader(s);\\n    }\\n\\n    public String next() throws IOException {\\n      while (st == null || !st.hasMoreTokens())\\n        st = new StringTokenizer(br.readLine());\\n      return st.nextToken();\\n    }\\n\\n    public int nextInt() throws IOException {\\n      return Integer.parseInt(next());\\n    }\\n\\n    public long nextLong() throws IOException {\\n      return Long.parseLong(next());\\n    }\\n\\n    public String nextLine() throws IOException {\\n      return br.readLine();\\n    }\\n\\n    public double nextDouble() throws IOException {\\n      return Double.parseDouble(next());\\n    }\\n\\n    public boolean ready() throws IOException {\\n      return br.ready();\\n    }\\n  }\\n}", "target": "215", "substitutes": {"YES": ["Yes", " yes", "FAULT", "ALL", "Yeah", "WARN", "YY", " yeah", "PASS", "DO", "Y", "PO", " OK", "NOW", "ON", "Success", "DATA", "yes", "No", "NAME", "NN", " Y", "N", "GREEN", " INFO", "NA", "NULL", "THIS", "UE", "MS", "UP", "OK", "TYPE", "ANY", "XX", " Yes", "WS", "KO"], "NO": ["NE", "VALUE", "Yes", "no", "WARN", "SO", "NOTE", "DO", "UN", "NOT", "IN", "PO", "RAW", "IO", "ONE", "OUT", "NOW", "None", "DATA", "POST", "No", "ERROR", "NAME", "NN", "N", "NA", "GO", "NULL", "NR", "MO", "OK", "ANY", "AND", "XX", "False", "NT", "O", "KO"], "sc": ["ner", "ch", "osc", "cont", "fc", " Sc", "nc", "cle", "sv", "core", "cc", "bc", "esc", "pc", "si", "ss", "scope", "ca", "SC", "c", "scan", "cs", "se", "cl", "uc", "cus", "com", "ctx", "inc", "Sc", "loc", "system", "sq", "sub", "sci", "cr", "src", "sf", "rc", "cer", "sr", "sp", "ci", " SC", "cp", "sh", "ec", "cur", "desc", "sem", "ser", "lc"], "n": ["f", "ner", "nc", "in", "nt", "ni", "number", "m", "l", "t", "c", "d", "num", "network", "sn", "u", "e", "o", "j", "p", "b", "x", "ns", "nl", "nb", "en", "w", "N", "len", "z", "size", "k", "conn", "nor", "net", "span"], "count": ["list", "level", "base", "call", "nt", "Count", "length", "group", "id", "number", "code", "index", "key", "limit", "core", "total", "left", "sum", "c", "num", "weight", "counter", "batch", "depth", "p", "ind", "child", "start", "len", "size", "part", "test", "coll", "check", "parent"], "i": ["f", "li", "fi", "I", "di", "ri", "ni", "length", "gi", "m", "index", "code", "ai", "si", "ui", "phi", "v", "c", "ie", "d", "uri", "pi", "u", "e", "j", "info", "api", "ii", "qi", "p", "ti", "b", "x", "oi", "ini", "ci", "ip", "xi", "init", "multi", "bi"], "st": ["nd", "sta", "tr", "inst", "string", "rt", "St", "co", "stri", "sb", "nt", "bl", "contract", "bt", "fr", "ut", "pr", "l", "ist", "ss", "ost", "est", "t", "rest", "ST", "se", "tt", "sw", "cl", "fe", "ft", "str", "pt", "sts", "stop", "ld", "p", "sa", "ust", "cr", "src", "ast", "pe", "sr", "sl", "sp", "struct", "ct", "rd", "sh", "const", "art", "be", "std", "ste", "sth", "r"], "br": ["bm", " tr", "bf", "tr", "ch", "db", "ner", "shr", "obj", "rt", "sb", "ler", "ctr", "ab", "cro", "ref", "bl", "err", "plug", "bt", "bro", "pl", "fr", "bc", "fore", "pr", "bur", "ver", "arr", "dr", "pre", "raf", "ob", "mr", "bp", "bar", "result", "buf", "er", "kr", "next", "rb", "gr", "hr", "str", "j", "ur", "bb", "rib", "p", "b", "cr", "src", "yr", "ber", "sr", "or", "sl", "sp", "bs", "line", "BR", "cur", "bridge", "be", "eb", "Br", "adr", "fb", "r"], "s": ["f", "ner", "name", "Provider", "string", "less", "input", "Socket", "ssl", "Services", "ers", "sv", "in", "lines", "gs", "sections", " objects", "south", "Events", "parts", "service", "l", "Server", "its", "S", "Resources", "si", "null", "server", "g", "t", "Settings", "c", "Service", "d", "small", "settings", "ls", "es", "e", "services", "p", "ing", "sets", "b", "src", "sync", "or", "Storage", "sl", "ments", "ings", "strings", "ses", "ins", "outs", "storage", "ger", "files", "fs", "ds", "a", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\tScanner sc = new Scanner(System.in);\\n\tint x = sc.nextInt();\\n\tint result = 0;;\\n\tboolean is = true;\\n\tif (x == 2 || x == 3) {\\n\t    is = false;\\n\t    result = x;\\n\t    System.out.print(result);\\n\t}\\n\twhile (is) {\\n\t    if (x % 2 != 0) {\\n\t\tfor (int i=3; i<x; i++) {\\n\t\t    if (x % i == 0) {\\n\t\t\tbreak;\\n\t\t    }\\n\t\t    if (i == x-1) {\\n\t\t\tis = false;\\n\t\t\tresult = x;\\n\t\t\tSystem.out.print(result);\\n\t\t\tis = false;\\n\t\t    }\\n\t\t}\\n\t    }\\n\t    x++;\\n\t}\\n    }\\n}\\n", "target": "183", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "ca", "SC", "se", "c", "scan", "sw", "cs", "uc", "cl", "com", "acc", "Sc", "sub", "sci", "cr", "ocr", "src", "rc", "cer", "enc", "soc", "sp", "ci", " SC", "sch", "sh", "cur", "sem", "lc"], "x": ["f", "value", "php", "lex", "plus", "xe", "xx", "in", "no", "code", "m", "number", "xf", "default", "t", "c", "ctx", "draw", "ax", "something", "rx", "check", "sex", "xy", "xc", "string", "X", "three", "max", "ex", "width", "u", "z", "px", "work", "test", "ix", "cross", "out", "id", "index", "step", "success", "ww", "xt", "num", "y", "dx", "abc", "array", "fx", "xes", "e", "p", "python", "sync", "xxx", "example", "working", "wx", "n", "v", "tx", "d", "zero", "event", "word", "xs", "error", "w", "wa", "xa", "xi", "xp", "any"], "result": ["reason", "value", "valid", "content", "val", "comment", "data", "xx", "fail", "out", "match", "length", "X", "search", "number", "index", "err", "default", "report", "ret", "ver", "runner", "score", "message", "sum", "diff", "success", "page", "doc", "complete", "winner", "resource", "output", "event", "warning", "info", "cache", "card", "Result", "status", "date", "error", "pass", "res", "true", "response", "results", "part", "work", "test", "feature", "cmp"], "is": ["hide", "isa", "abs", "out", "act", "in", "Is", "id", "search", "iss", "bool", "step", "close", "sum", "like", "it", "ok", "rest", "ie", "type", "bug", "page", "pos", "ar", "kit", "next", "was", "info", "show", "iter", "s", "as", "IS", "p", "has", "and", "error", "state", "start", "or", "im", "sp", "part", "css", "os", "work", "us", "ip", "init", "isi", "be", "now", "parent", "any", "bis"], "i": ["f", "eni", "li", "I", "vi", "di", "in", "ri", "length", "gi", "id", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "t", "c", "zi", "uri", "u", "pi", "e", "j", "o", "ii", "qi", "hi", "ti", "b", "oi", "p", "ini", "yi", "z", "ci", "ip", "xi", "init", "chi", "multi", "bi", "lc"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String args[]){\\n    Scanner sc = new Scanner(System.in);\\n    \\n    int n = sc.nextInt();\\n    boolean isPrime = false;\\n    \\n    for(int i = n; !isPrime; i++){\\n      boolean flg = true;\\n      \\n      for(int j = 2; flg && j <= Math.sqrt(n); j++){\\n        if(i % j == 0){\\n          flg = false;\\n        }\\n      }\\n      \\n      if(flg){\\n        System.out.println(i);\\n        isPrime = true;\\n      }\\n    }\\n  }\\n}", "target": "183", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "cc", "bc", "esc", "asc", "pc", "si", "exec", "ss", "sec", "scope", "ca", "SC", "se", "c", "scan", "sw", "cs", "com", "acc", "Sc", "system", "sq", "sub", "sci", "cr", "ocr", "src", "cb", "rc", "soc", "sp", "ci", " SC", "sch", "sh", "ec", "sem"], "n": ["nm", "f", "nan", "h", "ne", "nc", "net", "in", "ni", "m", "number", "l", "g", "min", "v", "t", "c", "d", "num", "network", "y", "sn", "u", "e", "o", "np", "p", "b", "ln", "ns", "nb", "nl", "N", "z", "k", "mn", "size", "nu", "nn", "r"], "i": ["f", "li", "fi", "h", "I", "jp", "di", "in", "ri", "ni", "id", "gi", "m", "index", "ai", "ji", "si", "l", "ori", "ui", "g", "v", "phi", "c", "ie", "d", "y", "zi", "u", "pi", "o", "e", "ii", "qi", "p", "ti", "x", "oi", "ind", "ini", "start", "yi", "z", "ci", "mi", "iu", "xi", "isi", "bi"], "isPrime": [" isprime", "ISPrime", "isprime", "viewPrime", "isPro", "IsPrime", "Isprime", "isForce", "ISForce", "ISprime", " isPro", " isStrong", "isStrong", "IsStrong", "lisprime", "lisStrong", "viewPro", "IsForce", "isPower", "IsPower", "IsPro", " isForce", "viewPower", "lisPrime", " isPower", "viewprime"], "j": ["f", "uj", "li", "obj", "jl", "jj", "ch", "jo", "oj", "is", "jp", "kj", "ni", "key", "m", "index", "ji", "si", "dj", "l", "left", "g", "v", "jc", "it", "ja", "end", "ie", "d", "bj", "y", "aj", "u", "e", "o", "J", "js", "ii", "qi", "p", "job", "b", "x", "ind", "oi", "je", "z", "k", "ij", "xi", "a"], "flg": ["flgg", "Flgg", "slga", " flgate", "flG", "FLbg", "flge", "folgate", "Flbg", "frga", "FlG", "slge", "Flga", "frgr", "Flgs", " flgs", "slgs", " flG", " flga", "folg", "slg", " flbg", "flgate", "slG", " flge", "folgs", "frgs", "FLg", " flgg", "Flg", "flbg", "FLgg", " flgr", "slgr", "flgs", "Flge", "folG", "FLga", "Flgate", "flgr", "flga", "frg"]}}
{"code": "import java.util.*;\\n\\npublic class Main\\n{\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint a,b,c;\\n\t\ta=sc.nextInt();\\n\t\tb=sc.nextInt();\\n\t\tc=sc.nextInt();\\n\t\tif(a>b+c)\\n\t\t{\\n\t\t\tSystem.out.println(\"0\");\\n\t\t}\\n\t\telse\\n\t\t{\\n\t\t\tSystem.out.println(Math.abs(b+c-a));\\n\t\t}\\n\t}\\n}", "target": "45", "substitutes": {"sc": ["parse", "ner", "osc", "ch", "cont", "mc", " Sc", "nc", "sche", "sb", "cle", "search", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "scope", "ca", "SC", "se", "scan", "cs", "uc", "cl", "cus", "sw", "cor", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "cer", "sr", "enc", "soc", "ci", "sp", " SC", "ct", "sh", "ec", "tc", "cur", "lc"], "a": ["f", "am", "ga", "A", "ab", "ad", "oa", "n", "ea", "ac", "aw", "ba", "da", "area", "ca", "aa", "asa", "d", "y", "ce", "aj", "va", "u", "e", "pa", "af", "aaa", "bb", "fa", "p", "sa", "x", "as", "au", "i", "an", "ae", "alpha", "la", "r"], "b": ["f", "bf", "pb", "br", "h", "base", "A", "sb", "ab", "db", "bas", "bc", "n", "l", "B", "wb", "ob", "ba", "v", "emb", "aa", "d", "y", "abc", "xb", "rb", "u", "e", "lb", "j", "bb", "dy", "p", "x", "nb", "cb", "ib", "bs", "bd", "k", "big", "i", "abb", "eb", "be", "fb", "r"], "c": ["f", "h", "ch", "cf", "ab", "cy", "m", "cc", "bc", "pc", "n", "l", "ac", "g", "v", "con", "cs", "ca", "uc", "cat", "d", "y", "ce", "cm", "u", "e", "dc", "p", "x", "C", "cr", "cb", "w", "cu", "z", "ci", "k", "ct", "cp", "i", "ec", "lc", "r"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStreamWriter;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    static PrintWriter out;\\n    static CF_Reader in;\\n\\n    public static void main(String[] args) throws IOException {\\n        out = new PrintWriter(new OutputStreamWriter(System.out));\\n        in = new CF_Reader();\\n\\n        long n = in.longNext();\\n        long k = in.longNext();\\n        out.println(solve(n, k));\\n\\n        out.close();\\n    }\\n\\n    static long solve(long n, long k) throws IOException {\\n        if (k >= n) return 0;\\n        long[] monsterHealths = in.nextLongArray((int) n);\\n        Arrays.sort(monsterHealths);\\n        long total = 0;\\n        for (int i = 0; i < (n - k); i++) {\\n            total += monsterHealths[i];\\n        }\\n        return total;\\n    }\\n\\n    static class CF_Reader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public CF_Reader() throws IOException {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() throws IOException {\\n            while (st == null || !st.hasMoreTokens())\\n                st = new StringTokenizer(br.readLine().trim());\\n            return st.nextToken();\\n        }\\n\\n        long longNext() throws IOException {\\n            return Long.parseLong(next());\\n        }\\n\\n        int intNext() throws IOException {\\n            return Integer.parseInt(next());\\n        }\\n\\n        double doubleNext() throws IOException {\\n            return Double.parseDouble(next());\\n        }\\n\\n        char charNext() throws IOException {\\n            return next().charAt(0);\\n        }\\n\\n        public int[] nextIntArray(final int n) throws IOException {\\n            final int[] a = new int[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = intNext();\\n            return a;\\n        }\\n\\n        public long[] nextLongArray(final int n) throws IOException {\\n            final long[] a = new long[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = longNext();\\n            return a;\\n        }\\n\\n        String line() throws IOException {\\n            return br.readLine().trim();\\n        }\\n    }\\n}\\n", "target": "230", "substitutes": {"out": ["gen", "obj", "client", "list", "name", "path", "string", "input", "prefix", "log", "err", "key", "socket", "inner", "gz", "io", "window", "exec", "IN", "self", "print", "up", "result", "write", "bin", "OUT", "reader", "array", "output", "inc", "ex", "this", "o", "str", "to", "s", "error", "Out", "w", "file", "sync", "println", "pool", "again", "temp", "sys", "line", "copy", "part", "work", "conn", "writer", "outer", "ins", "init", "outs", "plain", "parent", "r"], "in": ["f", "h", "rec", "plus", "cin", "data", "is", "input", "lin", "cli", "err", "din", "image", "m", "inner", "pin", "config", "socket", "binary", "id", "nin", "l", "exec", "IN", "inn", "min", "up", "con", "c", "bin", "d", "reader", "kin", "query", "isin", "resource", "inc", "read", "re", "source", "str", "inside", "url", "spin", "p", "b", "pass", "src", "rin", "ini", "login", "win", "again", "work", "ins", "conn", "connection", "init", "inet", "get", "In", "gin", "lock", "lib", "run", "inf", "r"], "n": ["nan", "f", "ner", "ne", "name", "h", "nc", "act", "no", "nt", "count", "m", "number", "l", "inn", "na", "g", "v", "t", "c", "nos", "r", "d", "num", "y", "network", "rn", "sn", "nw", "u", "o", "j", "e", "dn", "s", "p", "un", "x", "b", "ns", "nb", "en", "nl", "all", "N", "w", "z", "nr", "size", "mn", "conn", " N", "nor", "nn", "net"], "k": ["h", "ch", "K", "ko", "ik", "length", "id", "key", "m", "kick", "l", "ck", "g", "v", "ok", "c", "d", "mk", "y", "network", "max", "kr", "u", "o", "j", "unk", "p", "b", "x", "ku", "N", "ak", "kk", "sk", "ky", "z", "size", "ks", "ke", "km", "dk", "q", "kw"], "monsterHealths": ["monsterhealthworks", "monsterhealthd", "enemyhealthd", "monsterHealthlines", "monsterShieldd", "monsterhealthy", "monsterhealthlines", "monsterHealthworks", "monsterHeady", "monsterHostd", "monsterPulls", " monsterhealths", " monsterHealthy", "monsterHeadworks", " monsterhealthp", "monsterHeadp", "monsterPullp", "monsterShields", " monsterHealthp", "monsterHealthp", "monsterCloudd", "monsterCloudp", " monsterhealthy", "monsterhealthp", "monsterShieldp", " monsterHealthworks", "monsterHosts", "enemyhealthlines", "monsterHostlines", "enemyHealthp", "monsterClouds", "monsterHostp", "enemyhealths", " monsterhealthworks", "enemyHealthd", "monsterPullworks", "enemyHealths", "enemyhealthp", "enemyHealthlines", "monsterPully", "monsterHealthy", "monsterhealths", "monsterHeads", "monsterHealthd"], "total": ["valid", "translation", "huge", "base", "done", " tot", "token", "no", "nt", "length", "eta", "key", "count", "number", "active", "cost", "null", "otal", "percent", "last", "sum", "ok", " Total", "bar", "result", " totals", "cat", "complete", "max", "always", "info", "full", "current", "dict", "offset", "stats", "fat", "all", "error", "tax", "confirmed", "gross", "partial", "part", "quant", "size", "ta", "Total", " sum", "parent", "scale", "net", "shared"], "i": ["f", "li", "fi", "I", "di", "ik", "ni", "ri", "id", "gi", "m", "index", "inner", "ai", "io", "ji", "si", "ui", "mu", "phi", "v", "c", "ie", "d", "y", "uri", "u", "pi", "o", "e", "j", "info", "ii", "qi", "p", "ti", "b", "x", "hi", "oi", "ind", "slice", "abi", "ini", "yi", "z", "ci", "mi", "ip", "iu", "xi", "chi", "multi", "ix", "bi", "my"], "br": ["obj", "tr", "ch", "rt", "bh", "ler", "db", "pl", "bl", "err", "bt", "bro", "fr", "ut", "fore", "pr", "ver", "arr", "dr", "mr", "rest", "bar", "per", "kr", "rb", "gr", "hr", "str", "ur", "sts", "iter", "p", "b", "yr", "ber", "sr", "or", "brush", "sl", "sp", "BR", "bridge", "lr", "browser", "Br", "r"], "st": ["nd", "ts", "sta", "tr", "inst", "string", "rt", "St", "stri", "sb", "nt", "bl", "contract", "sv", "bt", "fr", "ut", "pr", "dr", "ist", "ss", "ost", "est", "rest", "t", "ST", "tt", "sw", "cl", "fe", "ft", "str", "pt", "sts", "stop", "ld", "sa", "ust", "STR", "stack", "cr", "ast", "sc", "sl", "th", "sp", "struct", "rd", "ct", "sh", "Str", "const", "be", "std", "ste", "sth", "r"], "a": ["f", "div", "am", "data", "ga", "A", "abs", "ab", "count", "ai", "ea", "l", "na", "ba", "da", "area", "ava", "ca", "c", "aa", "y", "aj", "array", "va", "u", "aux", "ua", "to", "at", "access", "p", "ia", "sa", "as", "b", "x", "au", "ans", "z", "ata", "tta", "an", "ae", "alpha", "la", "span"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner (System.in);\\n\t\tint N = sc.nextInt();\\n\t\tchar S[] = sc.next().toCharArray();\\n\t\tint count = 0;\\n\t\t\\n\t\tint t=0;\\n\t\tint ssss=0;\\n\t    int data[] =new int[3];\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\t       if(i<N-2) {\\n\t\t\t           if(S[i]=='A' && S[i+1]=='B' && S[i+2]=='C'){\\n\t\t\t           count++;\\n\t\t\t          }\\n\t\t\t       }\\n\t\t\t    }\\n\t\tSystem.out.println(count);\\n\\n\t\t\t}\\n\t\t\\n\t\t\\n\t\t\\n\t}", "target": "110", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "sche", "sb", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "anc", "scope", "ca", "SC", "se", "c", "scan", "cs", "sw", "cl", "cus", "uc", "str", "Sc", "sq", "sci", "cr", "sync", "rc", "cer", "sr", "ci", "sp", " SC", "sch", "sh", "ec", "cur", "sem", "ser", "lc"], "N": ["G", "K", "Length", "Len", "I", "L", "Z", "Size", "A", "Sn", "nt", "X", " n", "Count", "P", "Q", "NS", "SN", "H", "n", "B", "D", "J", "F", "V", "R", "NB", "NN", "C", "T", "Num", "M", "Ne", "Part", "Ns", "NT", "O"], "S": ["Ps", "Sign", "G", "Start", "DS", "I", "L", "IDS", "Source", "Si", "AS", "A", " s", "Socket", "Services", "Is", "Win", "P", "Sin", "States", "NS", "Sync", "Sample", "B", "ss", "Pass", "As", "Es", "SC", "D", "Characters", "VS", "Os", "Service", "OS", "Su", "Names", "F", "Pres", "V", "s", "R", "IS", "C", "T", "SS", "U", "M", "CS", "Single", "ages", "Sl", "PS", "Ns", "ings", "WS", "In", "Array", "HS"], "count": ["f", "time", "list", "h", "base", "nt", "match", "Count", "length", "id", "limit", "code", "index", "number", "key", "n", "total", "last", "sum", "c", "type", "counter", "e", "info", "cache", "depth", "offset", "child", "start", "len", "col", "z", "size", "test", "coll", "found"], "t": ["f", "time", "ts", " T", "dt", "nt", "m", "n", "l", "tp", "g", "it", "c", "type", "tt", "d", "e", "o", "ty", "at", "p", "ti", "T", "w", "z", "test", "trace"], "ssss": ["esssi", "ssSS", " sSS", " sss", "SSsi", "SSSS", "sssi", " ssi", "essSS", "SSss", "essss"], "data": ["div", " DATA", "shift", "series", "input", "index", "window", "arr", "total", "dat", "result", "cat", "d", "DATA", "buffer", "batch", "next", "str", "info", "start", "response", "ata", "bytes", "scale", "sequence"], "i": ["f", "eni", "li", "fi", "I", "is", "di", "in", "cli", "ni", "length", "gi", "id", "index", "inner", "ai", "ri", "io", "ji", "n", "si", "ori", "ui", "phi", "v", "it", "c", "ie", "ami", "uli", "zi", "uri", "source", "u", "e", "pi", "j", "info", "api", "ii", "qi", "p", "ti", "b", "x", "oi", "slice", "ini", "z", "ci", "ip", "iu", "init", "xi", "chi", "multi", "ix", "bi", "a"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tString string = sc.nextLine();\\n\t\tString[] a = string.split(\" \");\\n\\n\t\tPoppin poppin = new Poppin(1000);\\n\\n\t\tfor (int i = 0; i < a.length; i++) {\\n\\n\t\t\tif (a[i].equals(\"+\")) {\\n\t\t\t\tint p = poppin.pop();\\n\t\t\t\tint q = poppin.pop();\\n\t\t\t\tpoppin.add(p + q);\\n\t\t\t\tcontinue;\\n\\n\t\t\t}\\n\t\t\tif (a[i].equals(\"-\")) {\\n\\n\t\t\t\tint p = poppin.pop();\\n\t\t\t\tint q = poppin.pop();\\n\t\t\t\tpoppin.add(q - p);\\n\t\t\t\tcontinue;\\n\t\t\t}\\n\t\t\tif (a[i].equals(\"*\")) {\\n\\n\t\t\t\tint p = poppin.pop();\\n\t\t\t\tint q = poppin.pop();\\n\t\t\t\tpoppin.add(p * q);\\n\t\t\t\tcontinue;\\n\t\t\t}\\n\\n\t\t\tint n = Integer.parseInt(a[i]);\\n\t\t\tpoppin.add(n);\\n\\n\t\t}\\n\\n\t\tSystem.out.println(poppin.pop());\\n\\n\t}\\n\\n}\\n\\nclass Poppin {\\n\tint top = 0;\\n\tint[] a;\\n\\n\tpublic Poppin(int n) {\\n\t\ta = new int[n];\\n\t}\\n\\n\tvoid add(int x) {\\n\t\ttop++;\\n\t\ta[top] = x;\\n\\n\t}\\n\\n\tint pop() {\\n\t\tint x = a[top];\\n\t\ttop--;\\n\t\treturn x;\\n\t}\\n}", "target": "114", "substitutes": {"sc": ["ner", "osc", "mc", " Sc", "nc", "ann", "sb", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "anc", "SC", "c", "scan", "se", "sw", "uc", "cl", "Sc", "system", "sci", "cr", "ocr", "sf", "src", "rc", "sk", "sl", "sp", "ci", " SC", "sch", "sh", "desc", " scr", "r"], "string": ["f", "value", "list", "name", "data", "raw", "input", "out", "in", "number", "object", "service", "text", "null", "address", "result", "array", "resource", "source", "word", "str", "iter", "s", "section", "letter", "strip", "file", "ring", "line", "stream", "strings", "r"], "a": ["f", "sta", "access", "ama", "am", "data", "ga", "A", "oa", "ma", "ad", "ab", "index", "params", "ack", "span", "ea", "l", "ac", "na", "aw", "da", "ba", "area", "ca", "c", "aa", "asa", "result", "y", "abc", "array", "va", "u", "e", "o", "aux", "ua", "aaa", "auto", "s", "fa", "sa", "as", "b", "za", "ia", "missing", "ha", "action", "au", "ya", "at", "ata", "wa", "tta", "an", "ae", "alpha", "la"], "poppin": ["poppabin", "choppin", "poppinner", "poipinn", " poppins", "poplinner", "poppout", "poppinn", "choppinner", "poppins", "doppedine", "doppyoin", "Poopprin", "doppin", "Poppoin", "poplmin", "poppasin", "Pooppini", "poippini", "koplin", "poiprin", "poppains", "hopperin", "Pooppoin", "peppinner", "poopin", "hoppin", "pooppmin", " poppedin", "poppen", "hoppoin", "poppeoin", " poppinner", "pouppmin", "popoin", "pooppinner", "poippoin", "hoppemin", "pooppdin", "doppeddin", "Poppdin", "Pooppen", " popprin", "koplinn", "poppyin", "popprin", " pooprin", " poppinc", "poipini", "poppyoin", "koppinn", "pooppin", " pooppins", "poappinn", "koppin", "Poppini", "pooppins", " pooppout", "poepinc", "doppdin", "peppins", "Poppin", "poppymin", "poepin", "poprin", "poppine", "poppyini", "hoppein", " poppeinner", "poppemin", "pooprin", "Pooppdin", "doppyasin", "peppainner", "pooppout", " popperin", " poopin", "poppini", "poippin", "poppmin", "poppeine", "koplini", "poppebin", "hoppeinner", "poppyen", "poipin", "poopprin", "poppeinner", "poppoin", "choppyoin", "koplinner", "doppedin", "poappinner", "koppini", "poplrin", "poppedine", " pooppin", "peppaini", "poplini", "pooppoin", "pooppasin", "poppainner", " poopinner", "poppaasin", "Poppen", "poppaini", "poppedmin", "doppasin", "doppine", "choppybin", "peppain", "poppyinner", "popdin", "poopinner", "poippins", " poppein", "doppyin", "pooppini", "poppydin", "pouppin", "koppinner", "poipinner", "poplIN", "pouppoin", "pooppen", " poppdin", "poppyine", "poippout", "Popprin", "Pooppin", "pouppine", "poppein", "poippinner", "pooppinc", "poppdin", " poppout", " poopIN", "hoppine", "doppmin", "peppini", "poplin", "poppedin", "poepins", "doppbin", "doppoin", "hoppmin", "poploin", "poplen", "choppbin", "houpprin", "poipdin", "choppyin", "popperin", "poappini", "houppin", " pooppinc", "poppybin", "poppyasin", "pouppIN", "poppeddin", "poppbin", "choppoin", " poppIN", "poplinn", "poopIN", "poappin", "hoppinner", "poipoin", "poupprin", "houppoin", "pooppine", "peppains", "poppain", "hopprin", "choppyinner", "houppine", "poppaoin", "pouppinner", "doppybin", "poippbin", "popldin", "poippinc", "poepout", "doppedmin", "pooppbin", "poppinc", "peppin", "popin", "poppIN"], "i": ["f", "eni", "li", "fi", "I", "vi", "is", "di", "iv", "ri", "ni", "cli", "gi", "id", "m", "index", "key", "ai", "io", "si", "ori", "ui", "mu", "v", "it", "t", "ie", "d", "y", "uri", "u", "pi", "o", "j", "e", "info", "ii", "ei", "qi", "s", "ti", "hi", "oi", "b", "slice", "ini", "yi", "z", "ci", "mi", "ip", "xi", "iu", "ix", "chi", "bi", "multi"], "p": ["f", "ep", "h", "ph", "P", "m", "pr", "par", "pc", "l", "patch", "pre", "tp", "up", "v", "g", "t", "bp", "c", "port", "pg", "y", "ap", "pos", "mp", "per", "pa", "u", "e", "o", "j", "pi", "point", "lp", "b", "w", "ps", "pe", "pp", "op", "vp", "z", "sp", "hp", "cp", "ip", "pu", "r"], "q": ["f", "h", "ch", "ph", "id", "P", "count", "Q", "l", "g", "v", "t", "c", "bug", "cl", "d", "y", "max", "query", "ce", "req", "u", "e", "o", "qs", "point", "qi", "sq", "b", "dq", "qq", "w", "pe", "qu", "col", "z", "quant", "k", "qa", "iq", "ip", "sh", "ix", "qt", "pu"], "n": ["f", "on", "ne", "nc", "net", "no", "nt", "count", "m", "number", "l", "na", "g", "v", "t", "c", "num", "d", "y", "network", "pos", "u", "e", "o", "j", "nat", "cn", "s", "b", "all", "ns", "en", "nb", "w", "N", "pn", "z", "nr", "k", "size", "conn", "r"], "top": ["map", "hyp", "h", "tops", "name", "plus", "Top", "upper", "global", "core", "large", "key", "index", "high", "platform", "left", "pop", "min", "there", "master", "success", "push", "first", "above", "cat", "max", "pos", "ap", "site", "peak", "next", "dot", "best", "np", "stop", "to", "lat", "current", "offset", "open", "python", "all", "start", "bot", "op", "hop", "sp", "fill", "part", "size", "bottom", "test", "host", "prev", "parent", "TOP"], "x": ["f", "value", "xc", "on", "val", "h", "xy", "exp", "data", "xe", "xx", "X", "code", "index", "m", "number", "l", "na", "g", "v", "t", "c", "d", "y", "abc", "dx", "array", "ax", "ex", "u", "e", "xs", "b", "ic", "w", "xxx", "rx", "z", "px", "work", "xa", "xi", "foo", "ix", "xp", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tdouble d =0.0;\\n\t\tfor (int i=0;i<n;i++) {\\n\t\t\tint temp = sc.nextInt();\\n\t\t\td+=((double)1/(double)temp);\\n\t\t}\\n\t\tSystem.out.println((double)1/d);\\n\\n\t}\\n}", "target": "120", "substitutes": {"sc": ["class", "osc", "ch", "fc", "nc", "sche", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "scope", "ca", "SC", "se", "c", "scan", "cs", "sw", "cl", "cus", "uc", "ctx", "str", "Sc", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "enc", "sl", "sp", "ci", " SC", "sch", "sh", "ec", "cur", "ser", "lc"], "n": ["f", "ne", "nc", "in", "nt", "m", "nin", "l", "g", "v", "t", "c", "num", "network", "sn", "u", "e", "o", "j", "nw", "dn", "s", "p", "b", "x", "ns", "nb", "en", "w", "N", "len", "z", "k", "conn", "nn", "q", "net"], "d": ["f", "cd", "nd", "fd", "dig", "sd", "data", " D", "di", "dt", "dist", "ad", "vd", "m", "l", "defined", "td", "df", "v", "pd", "dad", "t", "dat", "D", "c", "da", " dd", "dx", "dl", "dh", "did", "dy", "dn", "dc", "p", "b", "x", "de", "dd", "md", "bd", "z", "dL", "ded", "dom", "ds"], "i": ["f", "li", "h", "I", "di", "in", "ni", "id", "gi", "key", "index", "ai", "si", "ui", "v", "ie", "zi", "pi", "u", "j", "ii", "iter", "p", "ti", "hi", "x", "oi", "ini", "ci", "mi", "ip", "xi", "ix", "multi", "bi"], "temp": ["tem", "level", "div", "needed", "input", "stable", "unit", "v", "min", "diff", "t", "cel", "degree", "output", "pi", "dev", "dest", "adj", "emp", "Temp", "porary", "ii", "iter", "pt", "point", "p", "current", "dc", " Temp", "tmp", "ination", "partial", "size", "fake", "perature", "tc", "ip", "const", "test", "flat", "now"]}}
{"code": "import java.io.*;\\nimport java.math.*;\\nimport java.security.*;\\nimport java.text.*;\\nimport java.util.*;\\nimport java.util.concurrent.*;\\nimport java.util.regex.*;\\nimport java.util.Arrays;\\nimport java.util.ArrayList;\\nimport java.lang.Math; \\nimport java.util.Arrays;\\nimport java.util.Comparator;\\n \\n \\n \\npublic class Main \\n{ \\n    static class FastReader \\n    { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() \\n        { \\n            br = new BufferedReader(new\\n                     InputStreamReader(System.in)); \\n        } \\n  \\n        String next() \\n        { \\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() \\n        { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() \\n        { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() \\n        { \\n            return Double.parseDouble(next()); \\n        } \\n        \\n  \\n        String nextLine() \\n        { \\n            String str = \"\"; \\n            try\\n            { \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) \\n            { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    } \\n\\n   \\n\\n    static int binarySearch(int a[],int k,int l,int h){\\n        \\n        while(l<=h){\\n         int mid = (l+h)/2;\\n         if(a[mid]==k) return mid;\\n         else if(a[mid]>k) h=mid-1;\\n         else if(a[mid]<k) l =mid+1;\\n    }\\n        \\n        return -1;\\n    }\\n\\n\\n\\n    static String reverse(String input)  \\n    { \\n        char[] a = input.toCharArray(); \\n        int l, r = 0; \\n        r = a.length - 1; \\n  \\n        for (l = 0; l < r; l++, r--) \\n        { \\n            // Swap values of l and r  \\n            char temp = a[l]; \\n            a[l] = a[r]; \\n            a[r] = temp; \\n        } \\n        return String.valueOf(a); \\n    } \\n\\n   \\n    \\n    static int gcd(int a, int b) \\n    { \\n        // Everything divides 0  \\n        if (a == 0) \\n          return b; \\n        if (b == 0) \\n          return a; \\n       if (a == b) \\n            return a; \\n       if (a > b) \\n            return gcd(a-b, b); \\n        return gcd(a, b-a); \\n    } \\n\\n    static int lcm(int a, int b) \\n    { \\n        return (a*b)/gcd(a, b); \\n    } \\n\\n    static int solve(int A, int B) \\n   { \\n    int count = 0; \\n    for (int i = 0; i < 21; i++) { \\n        if (((A >> i) & 1) != ((B >> i) & 1)) { \\n            count++; \\n        } \\n    } \\n  \\n   return count;\\n  } \\n\\n        static long nCr(int n, int r) \\n        { \\n            return fact(n) / (fact(r) * \\n                        fact(n - r)); \\n        } \\n        \\n        \\n        static long fact(int n) \\n        { \\n            long res = 1; \\n            for (int i = 2; i <= n; i++) \\n                res = res * i; \\n            return res; \\n        } \\n        \\n        public static long count(long k) {\\n            return k * (k - 1) / 2;\\n        }\\n\\n        static boolean isPrime(int n) { \\n            // if(n==1) return false; \\n            if(n==2) return true;\\n            if (n%2==0) return false; \\n            \\n            for(int i=3;i<=Math.sqrt(n);i+=2) { \\n                if(n%i==0) \\n                    return false; \\n            } \\n            return true; \\n        }\\n\\n        static int negMod(int n){\\n            int a = (n % 1000000007 + 1000000007) % 1000000007;\\n            return a;\\n        }\\n        static String value(int val) {\\n            String bin = \"\"; \\n                    while (val > 0)  \\n                    { \\n                        if (val % 2 == 1) \\n                        { \\n                            bin += '1'; \\n                        } \\n                        else\\n                            bin += '0'; \\n                        val /= 2; \\n                    } \\n                    bin = reverse(bin); \\n                    return bin;\\n                }\\n\\n                public static int sum(long x) {\\n                    int sum = 0;\\n                    while (x > 0) {\\n                        sum += x % 10;\\n                        x /= 10;\\n                    }\\n                    return sum;\\n                }\\n             \\n        \\n        static int mod=1000003;\\n        public static void main(String[] args) throws Exception \\n    {   \\n       \\n        OutputStream outputStream = System.out;\\n        PrintWriter w = new PrintWriter(outputStream);\\n        FastReader sc = new FastReader();\\n        // Scanner sc = new Scanner(new File(\"input.txt\"));\\n        // PrintWriter out = new PrintWriter(new File(\"output.txt\"));\\n        int i,j=0;\\n        \\n        int n = sc.nextInt();\\n        long d = sc.nextLong();\\n        int c = 0;\\n        // HashMap<Long,Long> h = new HashMap<>();\\n        for(i=1;i<=n;i++){\\n            j=0;\\n            long x  = sc.nextLong();\\n            long y  =  sc.nextLong();\\n            // if(h.containsKey(x)){\\n            //     if(h.get(x) == y) {j=1;continue;}\\n            // }\\n            // if(j==1) continue;\\n            // h.put(x,y);\\n            double f = Math.sqrt(x*x + y*y);\\n            // w.println(f);\\n            if(f<=d) c++;\\n        }\\n        w.print(c);\\n        w.close();\\n     }\\n\\n       \\n}\\n\\n\\n\\n// System.out.println();\\n\\n        \\n    \\n    \\n\\n", "target": "42", "substitutes": {"br": ["obj", "bf", "tr", "ch", "rt", "bh", "ctr", "ab", "db", "cro", "bl", "err", "bt", "bro", "fr", "bc", "io", "pr", "ver", "arr", "dr", "orb", "mr", "bar", "result", "buf", "reader", "next", "wr", "rb", "gr", "hr", "img", "ur", "bb", "b", "boot", "cr", "src", "ocr", "ber", "jar", "brush", "sp", "stream", "BR", "cur", "bridge", "lr", "browser", "Br", "be", "fb"], "st": ["store", "nd", "sta", "tr", "inst", "string", "rt", "St", "stri", "sb", "nt", "bl", "bt", "ut", " est", "pr", "stable", "ist", "step", "ss", "ost", "est", "t", "rest", "ST", "style", "sw", "cl", "d", "sn", "ft", "ace", "e", "stab", "pt", "sts", "stop", "stage", "s", "p", "sa", "strip", "stack", "src", "ste", "ast", "pe", "start", "sc", "sl", "sp", "struct", "ct", "rd", "sh", " sc", "const", "be", "stress", "std", "Str", "sth", "sign"], "str": ["f", "obj", "tr", "div", "exp", "name", "string", "data", "stri", "out", "err", "id", "m", "inner", "fr", "pr", "n", "arr", "dr", "text", "v", "t", "c", "style", "doc", "entry", "pos", "e", "url", "j", "p", "STR", "x", "cr", "sr", "char", "sl", "temp", "z", "sp", "line", "Str"], "a": ["f", "ama", "Array", "am", "data", "ga", "A", "ab", "ma", "ad", "image", "m", "active", "n", "ea", "ac", "na", "aw", "ba", "v", "da", "area", "ca", "c", "aa", "asa", "pos", "array", "va", "u", "e", "o", "aux", "img", "aaa", "aaaa", "auto", "fa", "p", "sa", "as", "b", "ia", "access", "ha", "w", "z", "ata", "wa", "i", "an", "ae", "alpha", "la"], "k": ["kid", "K", "key", "m", "id", "n", "ck", "g", "v", "ok", "c", "d", "mk", "y", "kin", "u", "e", "o", "j", "p", "b", "x", "row", "w", "sk", "z", "ks", "i", "ke", "q"], "l": ["f", "li", "ul", "L", "lin", "ol", "lu", "bl", "err", "m", "n", "left", "ll", "v", "rel", "c", "Li", "rl", "d", "kl", "y", "dl", "ls", "u", "e", "o", "j", "lb", "ld", "lo", "ell", "loc", "ur", "p", "hi", "b", "x", "ln", "nl", "w", "len", "sl", "z", "line", "sh", "i", "fl", "la", "lc", "el"], "h": ["f", "li", "ph", "ul", "bh", "id", "m", "hh", "H", "n", "g", "v", "t", "c", "d", "y", "u", "e", "hr", "j", "p", "hi", "b", "x", "rh", "w", "hl", "hm", "gh", "z", "ht", "sh", "i", "uh", "q"], "mid": ["cd", "kind", "mult", "miss", "co", "off", "cmd", "no", "large", "count", "m", "key", "spec", "offset", "init", "multi", "scale", "uid", "nd", "phase", "act", "home", "min", "meta", "ms", "max", "pid", "hi", "ind", "rad", "part", "mi", "la", "li", "hide", "Mid", "mit", "ref", "aid", "id", "index", "low", "man", "mr", "end", "entry", "pos", "seq", "mad", "hei", "lim", "lo", "mm", "rid", "sub", "row", "ha", "wid", "grid", "mode", "line", "i", "desc", "rand", "shape", "dim", "middle", " Mid", "mind", "d", "late", "loc", "error", "start", "len", "md", "pad"], "input": ["f", "value", "list", "path", "string", "plus", "raw", "data", "pattern", "base", "format", "Input", "in", "id", "image", "object", "text", "alpha", "parent", "result", "form", "empty", "request", "array", "addin", "output", "source", "buffer", "url", "script", "img", "p", "file", "back", "again", "temp", "view", "i", "accept", "plain", "inf"], "r": ["f", "rt", "range", "err", "m", "fr", "pr", "n", "arr", "v", "rel", "c", "d", "ar", "array", "re", "rb", "u", "e", "hr", "j", "ur", "p", "R", "b", "x", "row", "rh", "cr", "ru", "w", "sr", "or", "rr", "z", "nr", "i", "rs", "right", "ir", "run", "q"]}}
{"code": "import java.util.ArrayDeque;\\nimport java.util.Queue;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tQueue<String> nameQueue = new ArrayDeque<>();\\n\t\tQueue<Integer> timeQueue = new ArrayDeque<>();\\n\t\tint time = 0;\\n\\n\t\t// \u30d7\u30ed\u30bb\u30b9\u6570\u3068\u30af\u30aa\u30f3\u30bf\u30e0\u3092\u8aad\u307f\u8fbc\u3080\\n\t\tint num = scan.nextInt();\\n\t\tint quantum = scan.nextInt();\\n\\n\t\t// \u5404\u30d7\u30ed\u30bb\u30b9\u306e\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u3080\\n\t\tfor(int i = 0; i < num; i++) {\\n\t\t\tnameQueue.add(scan.next());\\n\t\t\ttimeQueue.add(scan.nextInt());\\n\t\t}\\n\\n\t\t// \u30e9\u30a6\u30f3\u30c9\u30ed\u30d3\u30f3\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\\n\t\twhile(!timeQueue.isEmpty()) {\\n\t\t\tif(timeQueue.peek() > quantum) {\\n\t\t\t\ttimeQueue.add(timeQueue.poll() - quantum);\\n\t\t\t\tnameQueue.add(nameQueue.poll());\\n\t\t\t\ttime += quantum;\\n\t\t\t} else {\\n\t\t\t\ttime += timeQueue.poll();\\n\t\t\t\tSystem.out.print(nameQueue.poll() + \" \");\\n\t\t\t\tSystem.out.println(time);\\n\t\t\t}\\n\\n\t\t}\\n\\n\t}\\n}\\n\\n", "target": "231", "substitutes": {"scan": [" Scan", "gen", "parse", "ann", " parse", " scanner", "config", "n", "runner", "l", "ss", "gram", "v", "se", "er", "reader", "sn", "iter", "system", "Scan", "sc", "or", "sys", "util", "parser", "run", "r"], "nameQueue": ["namequeue", "NameList", "nameQue", "nameList", " nameQue", "NameQueue", " nameList", "datequeue", "Namequeue", "dateQueue", "dateQue", " namequeue", "dateList", "NameQue"], "timeQueue": ["memoryMenu", "timequeue", "memoryQueue", " timequeue", "timeMenu", "memoryqueue", " timeCache", "clockCache", "memoryCache", " timeMenu", "clockqueue", "timeCache", "clockMenu", "clockQueue"], "time": ["name", "times", "rate", "data", "clock", "match", "image", "count", "timeout", "cost", "block", "ime", "counter", "cache", "depth", "runtime", "date", "error", "file", "speed", "sleep", "line", "delay", "work", "ip", "trace", "memory", "Time"]}}
{"code": "import java.util.Scanner;\\n\\n\\n//Print a Rectangle\\n//\\n//\u305f\u3066H cm \u3088\u3053 W cm \u306e\u9577\u65b9\u5f62\u3092\u63cf\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u4e0b\u3055\u3044\u3002\\n//\\n//1 cm \u00d7 1cm \u306e\u9577\u65b9\u5f62\u3092 '#'\u3067\u8868\u3057\u307e\u3059\u3002\\n//Input\\n//\\n//\u5165\u529b\u306f\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f62\u5f0f\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\uff1a\\n//\\n//H W\\n//\\n//H, W \u304c\u3068\u3082\u306b 0 \u306e\u3068\u304d\u3001\u5165\u529b\u306e\u7d42\u308f\u308a\u3068\u3057\u307e\u3059\u3002\\n//Output\\n//\\n//\u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u3064\u3044\u3066\u3001H \u00d7 W \u500b\u306e '#' \u3067\u63cf\u304b\u308c\u305f\u9577\u65b9\u5f62\u3092\u51fa\u529b\u3057\u3066\u4e0b\u3055\u3044\u3002\\n//\\n//\u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f8c\u306b\u3001\uff11\u3064\u306e\u7a7a\u884c\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\u3002\\n//Constraints\\n//\\n//H, W ? 300\\n//Sample Input\\n//\\n//3 4\\n//5 6\\n//2 2\\n//0 0\\n//\\n//Sample Output\\n//\\n//####\\n//####\\n//####\\n//\\n//######\\n//######\\n//######\\n//######\\n//######\\n//\\n//##\\n//##\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\\n    \t/*Scanner = \u30c6\u30ad\u30b9\u30c8\u5165\u529b\u3092\u6271\u3046\u305f\u3081\u306e\u30af\u30e9\u30b9\\n\t\t *\u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u306e\u5165\u529b\u3092\u53d7\u3051\u3064\u3051\u308b\u5834\u5408\u306f\\n\t\t *System.in\u3092\u4f7f\u3063\u3066\u4e0b\u8a18\u306e\u3088\u3046\u306b\u8a18\u8ff0\\n\t\t */\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\t//for\u30eb\u30fc\u30d7\u6587\u7528\u306b\u5909\u6570\u6e96\u5099\\n\t\tint i;\\n\t\tint j;\\n\\n\t\t/*while\u6587\u3067\u7121\u9650\u30eb\u30fc\u30d7\u8a2d\u5b9a\\n\t\t * if\u6587\u3067break\u3092\u304b\u3051\u308b\\n\t\t * \u6c42\u3081\u3089\u308c\u3066\u3044\u308b\u901a\u308a\u306b\u306a\u3063\u305f\u304c\u30b3\u30fc\u30c9\u304c\u7121\u99c4\u306b\u591a\u3044\u3088\u3046\u306b\u601d\u3048\u308b\\n\t\t * \u5f8c\u7a0b\u4fee\u6b63\u3092\u884c\u3048\u308b\u304b\u8a66\u3059\\n\t\t */\\n\\n\t\twhile(true){\\n\t\t\tint H = scan.nextInt();\\n\t\t\tint W = scan.nextInt();\\n\t\t\tif(H == 0 && W == 0 || H > 300 || W > 300)break;\\n\t\t\tfor(j = 0; j < H; j++){\\n\t\t\t\tfor(i = 0; i < W; i++){\\n\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n    }\\n}", "target": "87", "substitutes": {}}
{"code": "import java.util.Scanner;\\n \\nclass Main {\\n\tpublic static void main(String[] args) {\\n \\n\t    Scanner sc = new Scanner(System.in);\\n\t    long A = sc.nextLong();\\n\t    long B = sc.nextLong();\\n\t    long C = sc.nextLong();\\n\t    long K = sc.nextLong();\\n\t    long max = 0;\\n\t    \\n\t    if (K > 0 && K >= A) {\\n\t      max += (A * 1);\\n\t      K -= A;\\n\t    } else if (K > 0 && K < A) {\\n\t      max += (K * 1);\\n\t      K = 0;\\n\t    }\\n\t    \\n\t    if (K > 0 && K >= B) {\\n\t      K -= B;\\n\t    } else if (K > 0 && K < B) {\\n\t      K = 0;\\n\t    }\\n\t    \\n\t    if(K > 0 && K >= C) {\\n\t      max += (C * -1);\\n\t      K -= C;\\n\t    } else if (K > 0 && K < C) {\\n\t      max += (K * -1);\\n\t      K = 0;\\n\t    }\\n\t    \\n\t    System.out.println(max);\\n\t    \\n\t  }\\n}", "target": "56", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "exp", " Sc", "nc", "sche", "sb", "cli", "cv", "cc", "bc", "esc", "asc", "pc", "l", "cam", "ss", "anc", "g", "scope", "cus", "SC", "se", "c", "scan", "sw", "uc", "ctx", "dec", "cor", "str", "Sc", "__", "sq", "sci", "cr", "sf", "sync", "rc", "cer", "enc", "soc", "sp", " SC", "k", "sch", "sh", "tc", "ec", "cur", "coll", "desc", "sem", "lc"], "A": ["App", "AW", "SA", "Ant", "Az", "AA", "AS", "Java", "This", "API", "AD", "X", "P", "Q", "H", "AST", "HA", "AV", "ACE", "Y", "AN", "S", "AB", "As", "IA", "E", "D", "AP", "Ma", "F", "BA", "At", "CA", "AC", "AF", "An", "The", "U", "Ar", "Alpha", "AM", "NA", "AR", "Am", "LA", "AK", "Ac", "Array", "AY", "DA", "Na", "a"], "B": ["G", "I", "Bi", "L", "BB", "DB", "X", "P", "GB", "Q", "H", "Y", "S", "AB", "UB", "E", "D", "BE", "Ab", "W", "BI", "J", "F", "BA", "V", "R", "b", "NB", "T", "U", "WB", "M", "N", "Bs", "BC", "O", "OB"], "C": ["CD", "CN", "Code", "G", "I", "JC", "L", "CM", "PK", "X", "Count", "P", "Q", "H", "NC", "S", "E", "c", "D", "SC", "W", "Sc", "F", "Ch", "V", "Cs", "CA", "R", "Ca", "AC", "T", "CR", "U", "N", "M", "Cu", "Co", "CS", "CC", "DC", "CE", "CU", "BC", "VC", "O"], "K": ["KB", "Start", "Ok", "KC", "L", "DK", "MC", "Y", "FK", "Spec", "J", "Check", "U", "M", "CS", "Key", "O", "Context", "BB", "X", "P", "D", "Need", "Point", "Ka", "F", "V", "No", "AC", "MAX", "KE", "OK", "Ku", "IK", "Op", "UK", "Mask", "G", "Kick", "I", "Z", "PK", "Size", "MK", "CP", "Ke", " k", "Any", "KS", "Pull", "Read", "CL", "Power", "KA", "N", "Max", "k", "AR", "Keep", "KO", "KER", "Ak", "SK", "KR", "Q", "HK", "H", "NK", "S", "E", "OP", "W", "Work", "CA", "KK", "T", "Han", "DC", "AK", "Sk", "VK", "ID"], "max": ["parse", "kid", "orig", "base", "no", "core", "id", "key", "count", "default", "cost", "step", "block", "total", "ck", "last", "self", "min", "end", "conf", "cat", "can", "ax", "always", "this", "cache", "j", "__", "best", "auto", "mod", "x", "w", "res", "Max", "scale", "MAX", "with", "part", "size", "work", "k", "ks", "ask", "cur", "get", "right", "now", "rank", "parent", " biggest", "q"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tdouble W = sc.nextInt();\\n\t\tdouble H = sc.nextInt();\\n\t\tdouble x = sc.nextInt();\\n\t\tdouble y = sc.nextInt();\\n\t\tsc.close();\\n\t\t\\n\t\tdouble half = H/2;\\n\t\tdouble area = half*W;\\n\t\tSystem.out.printf(\"%.8f\",area);\\n\t\t\\n\t\tif (x==0 && y==0)\\n\t\t\tSystem.out.println(\" \"+0);\\n\t\t\\n\t\telse if (x==W/2 && y==H/2)\\n\t\t\tSystem.out.println(\" \"+1);\\n\t\telse\\n\t\t\tSystem.out.println(\" \"+0);\\n\t}\\n\\n}\\n", "target": "182", "substitutes": {"sc": ["class", "parse", "ner", "ch", "osc", "cont", "mc", " Sc", "nc", "sche", "sb", "cli", "core", "cv", "cc", "esc", "bc", "com", "asc", "pc", "exec", "cam", "ss", "server", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "sw", "cl", "cus", "uc", "ctx", "cor", "Sc", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "soc", "sp", "ci", " SC", "sch", "sh", "tc", "cur", "coll", "sem", "ser", "lc"], "W": ["WH", "G", "h", "K", "Length", "I", "L", "Z", "WF", "SW", "Size", "A", "MW", "X", "Width", "BW", "P", "Q", "WC", "B", "Y", "S", "SH", "E", "WA", "FW", "F", "V", "NW", "WD", "R", "TW", "T", "C", "U", "w", "M", "N", "WP", "WB", "VW", "WS", "GW", "Wh", "O"], "H": ["G", "h", "K", "L", "Z", "X", "FH", "P", "HT", "Q", "HA", "CH", "B", "Y", "SH", "RH", "E", "D", "DH", "OH", "NH", "HE", "J", "F", "V", "HH", "HI", "R", "EH", "T", "C", "U", "w", "N", "M", "HP", "Ha", "Wh", "HS", "HC"], "x": ["f", "xy", "on", "h", "xx", "one", "in", "X", "wx", "id", "image", "index", "n", "l", "v", "cl", "d", "pos", "dx", "ax", "ex", "width", "o", "xs", "p", "w", "pe", "rx", "z", "px", "wa", "work", "ct", "qa", "i", "xi", "ix"], "y": ["f", "xy", "yo", "h", "ch", "oy", "ey", "cy", "m", "sy", "zy", "n", "l", "ye", "Y", "height", "py", "v", "t", "c", "ny", "ay", "ady", "j", "dy", "p", "hi", "b", "w", "yi", "ya", "z", "i", "yy"], "half": ["f", "side", "equal", "shift", "raw", "less", "padding", "Half", "length", "wave", "flow", "cost", "hat", "total", "near", "shared", "per", "width", "full", " Half", "third", "east", "w", " halfway", "partial", "part", "quarter", "flower", "pad", "gap", "ke", "alpha", "scale", "percent"], "area": ["base", "zone", "issa", "AA", "are", "range", "aka", "region", "ea", " Area", "ba", "ca", "aa", "radius", "near", "array", "va", "ra", "Area", "aaa", "BA", "space", "ha", " areas", "partial", "part", "qa", "angle", "average", "alpha", "la", "scale"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\tpublic static void main(String[] args) {\\n\t\tint a,b=0,W,H;\\n\t\tScanner br = new Scanner(System.in);\\n\t\twhile(true){\\n\t\t\tH=br.nextInt();\\n\t\t\tW=br.nextInt();\\n\t\t\tif(H==0 && W==0){\\n\t\t\t\tbreak;\\n\t\t\t}else{\\n\t\t\t\tfor(a=1;a<=H;a++){\\n\t\t\t\t\tif(a%2==1){\\n\t\t\t\t\t\tfor(b=1;b<=W;b++){\\n\t\t\t\t\t\t\tif(b%2==1){\\n\t\t\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t\t\t\t}else{\\n\t\t\t\t\t\t\t\t\tSystem.out.print(\".\");\\n\t\t\t\t\t\t\t\t\t}\\n\t\t\t\t\t\t\t}\\n\t\t\t\t\t}else{\\n\t\t\t\t\t\tfor(b=1;b<=W;b++){\\n\t\t\t\t\t\t\tif(b%2==1){\\n\t\t\t\t\t\t\t\tSystem.out.print(\".\");\\n\t\t\t\t\t\t\t}else{\\n\t\t\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t\t\t}\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tSystem.out.println();\\n\t\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "131", "substitutes": {"a": ["f", "h", "am", "ga", "A", "ab", "ad", "oa", "ma", "m", "ai", "n", "l", "ea", "ac", "na", "aw", "ba", "da", "area", "ca", "c", "aa", "d", "ah", "aj", "va", "pa", "e", "u", "af", "aaa", "api", "auto", "fa", "p", "as", "x", "sa", "ia", "ha", "w", "au", "ak", "wa", "i", "art", "an", "ae", "alpha", "r"], "b": ["f", "bf", "pb", "h", "base", "bu", "BB", "A", "sb", "bh", "ab", "db", "ub", "bl", "m", "obb", "bc", "bur", "n", "l", "block", "B", "wb", "ob", "ba", "v", "fb", "g", "bp", "c", "aa", "bar", "bin", "d", "y", "mb", "xb", "rb", "u", "e", "lb", "o", "bb", "BA", "p", "x", "nb", "cb", "w", "ib", "bot", "bs", "bd", "part", "i", "abb", "be", "body", "bi", "eb", "r"], "W": ["G", "h", "K", "I", "L", "Z", "SW", "A", "MW", "X", "Width", "P", "Wa", "Q", "WC", "B", "Y", "Ws", "SH", "E", "Web", "We", "WA", "FW", "Weight", "F", "V", "NW", "R", "TW", "T", "C", "w", "U", "M", "N", "WB", "WP", "VW", "WS", "GW", "Wh", "WR"], "H": ["G", "h", "K", "I", "L", "BB", "A", "GH", "X", "P", "Q", "HA", "CH", "B", "Y", "SH", "RH", "E", "D", "DH", "OH", "NH", "F", "V", "HH", "HI", "HR", "R", "EH", "C", "T", "w", "U", "M", "N", "Ha", "He", "Wh", "AH", "HC"], "br": ["obj", "tr", "ch", "ner", "base", "sb", "ler", "db", "oper", "err", "bl", "bro", "fr", "bc", "io", "pr", "n", "arr", "dr", "orb", "ori", "mr", "fin", "bp", "vr", "result", "er", "reader", "ar", "next", "rb", "gr", "hr", "str", "img", "ur", "p", "cr", "yr", "cb", "ber", "sr", "or", "brush", "sp", "line", "BR", "i", "ger", "lr", "body", "Br", "coll", "ir", "r"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        // \u81ea\u5206\u306e\u5f97\u610f\u306a\u8a00\u8a9e\u3067\\n        // Let's \u30c1\u30e3\u30ec\u30f3\u30b8\uff01\uff01\\n\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine();\\n      String line2 = sc.nextLine();\\n      int n=line.length();\\n      int n2=line2.length();\\n      if(n!=n2){\\n        System.out.println(\"No\");\\n      }\\n      else{\\n        int count=0;\\n        boolean f=false;\\n      \twhile(count!=n){\\n      \t\tif(line.equals(line2)){\\n            \tf=true;\\n              \tbreak;\\n            }\\n          String l=line.substring(0,1);\\n            line=line.substring(1,line.length());\\n          line+=l;\\n            count++;\\n      \t}\\n        if(f){\\n        \tSystem.out.println(\"Yes\");\\n        }\\n        else System.out.println(\"No\");\\n        \\n      }\\n \\n    }\\n}", "target": "220", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n\t/**\\n\t * @param args\\n\t */\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tint input[] = new int[3];\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tfor(int i = 0; i < 3; i++){\\n\t\t\tinput[i] = sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tint order[][] = {{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,1,0},{2,0,1}};\\n\t\t\\n\t\tint result = Integer.MAX_VALUE;\\n\t\tfor(int i = 0; i < order.length; i++){\\n\t\t\tint tmpTotal = 0;\\n\t\t\tint prev = input[order[i][0]];\\n\t\t\t\\n\t\t\tfor(int j = 1; j < 3; j++){\\n\t\t\t\ttmpTotal += Math.abs(prev - input[order[i][j]]);\\n\t\t\t}\\n\t\t\t\\n\t\t\tresult = Math.min(result, tmpTotal);\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(result);\\n\t}\\n\\n}\\n", "target": "247", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.math.*;\\nimport java.util.*;\\nimport java.util.stream.*;\\n\\nclass Main {\\n    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    static final PrintWriter pw = new PrintWriter(System.out);\\n    public static void main(String[] args) throws IOException {\\n        String[] inputs = br.readLine().split(\" \");\\n        int[] nums = new int[3];\\n        for(int i = 0; i < 3; i++) {\\n            nums[i] = Integer.parseInt(inputs[i]);\\n        }\\n        String ans = nums[2] + \" \" + nums[0] + \" \" + nums[1];\\n\\n        pw.println(ans);\\n        pw.flush();\\n    }\\n}\\n", "target": "149", "substitutes": {"br": ["http", "tr", "rt", "sb", "bh", "db", "bl", "err", "proc", "bro", "fr", "io", "arr", "dr", "B", "mr", "vr", "buf", "er", "ar", "wr", "rb", "gr", "hr", "str", "img", "HR", "p", "b", "cr", "yr", "cb", "ocr", "sr", "jar", "bs", "nr", "BR", "browser", "lr", "Br", "r"], "pw": ["pwa", "cpwa", "pws", "wp", "pwh", "iwa", "cpwh", "cpws", "Pw", "wW", " pws", "ww", " pwh", "pwb", "iw", "nwa", "spw", "iW", "wwb", "nw", "np", "pW", "spwb", "Pwh", "pp", "nW", "cpw", "Pp", " pwa", "Pwa", "Pws", "PW", "ip", "Pwb", "spW", "spp"], "inputs": ["inputi", "Inputs", "Inputls", "outputlines", "outputf", "Inputi", " inputls", "tempc", "temps", "inputlines", "templines", "inc", "Inputc", " inputlines", "outputs", "Inputlines", "inputc", "Inputf", "inlines", "ini", "tempi", " inputf", "ins", "inputf", "inputls", "outputls"], "nums": ["nubs", " nups", "unums", "unoms", "nups", "nonups", "nonum", " num", "nrams", "nummies", "nonumbers", "cum", "noms", " nrams", " nummies", "unamps", "Nummies", "numubs", "Nubs", "numummies", "Namps", "numbers", "num", "cumbers", "numumbers", "numums", " noms", "nonums", "Noms", " namps", " nubs", "cums", " numbers", "Nums", "Num", "Numbers", "Nrams", "unumbers", "crams", "Nups", "namps"], "i": ["f", "li", "fi", "I", "shift", "di", "in", "ri", "length", "id", "gi", "m", "index", "inner", "ai", "io", "n", "si", "l", "ui", "mu", "phi", "v", "t", "adi", "c", "ie", "d", "y", "uli", "uri", "zi", "u", "e", "o", "j", "pi", "api", "ii", "info", "qi", "p", "ti", "b", "x", "oi", "hi", "slice", "temp", "z", "ci", "k", "mi", "ip", "xi", "init", "iu", "ix", "multi", "bi", "a"], "ans": ["anks", "ANS", "Ann", "cons", "ain", "ats", "ann", "gan", "aned", "anon", "anas", "ons", "amps", "AN", " means", "na", "anc", "aning", "can", "lan", "su", "ls", "nas", "aus", "idents", "anners", "as", "ns", "An", "atan", "cas", "ants", "san", "res", "anus", "asin", "ins", "ks", "ras", "an", "ars", "ana", "anned"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scr =new Scanner(System.in);\\n\t\t\\n\t\tint N = scr.nextInt();\\n\t\tint K = scr.nextInt();\\n\t\tint d = 0;\\n\t\tint A;\\n\t\tint result = 0;\\n\t\t\\n\t\tint []Ns = new int [N];\\n\t\t\\n\t\tfor(int i = 0;i < K;i++) {\\n\t\t\td = scr.nextInt();\\n\t\t\tfor(int j = 0;j < d;j++) {\\n\t\t\t\tA = scr.nextInt();\\n\t\t\t\tNs[A-1] = 1;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0;i < N;i++) {\\n\t\t\tif(Ns[i] == 0) {\\n\t\t\t\tresult += 1;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(result);\\n\t\t\\n\t}\\n}", "target": "81", "substitutes": {"scr": ["sersr", "scrr", " scrt", "ancpr", "scpr", "shr", "scir", "shpr", "ancnr", " scrs", "serir", "ScR", "syncr", "ascir", " scerr", "sprr", "scR", "serr", "Scpr", "ascr", " scru", " scrr", "scipr", "ancrt", "conter", "ascpr", "syncpr", "scnr", "spr", "curr", " scR", "ascsr", "scinr", "syncerr", "curpr", "contr", "Scir", "sher", " scnr", "scsr", " scpr", "curru", "serpr", "syncru", "sprs", "scrt", "Scrs", "scru", "ancr", "spR", "shrr", "scerr", "Scsr", " scer", "scirt", "contrr", "scer", "contpr", "Scrr", "Scr", "curerr", "scrs"], "N": ["I", "L", "Z", "Size", "X", " n", "P", "Q", "NS", "H", "n", "NC", "S", "Y", "B", "E", "D", "NL", "J", "F", "V", "No", "R", "NB", "NN", "C", "T", "M", "Ne", "Part", "k", "ND", "NT", "O"], "K": ["O", "G", "KC", "I", "L", "Z", "SK", "X", "P", "Q", "H", "KS", "n", "S", "Y", "B", "E", "D", "W", "J", "F", "V", "R", "C", "KI", "U", "M", "Ne", "k", "KE", "Sk"], "d": ["f", "cd", "nd", "h", "fd", "dim", "I", "sd", "data", " D", "di", "dt", "in", "nt", "ad", "id", "vd", "m", "n", "l", "da", "dat", "D", "c", "dx", "u", "e", "dy", "dn", "s", "p", "dc", "b", "x", "ind", "Do", "start", "dd", "Ds", "z", "md", "k", "ds", "a"], "A": ["Code", "G", "I", "L", "Si", "Next", "AA", "Ak", "X", "API", "Ni", "Count", "P", "H", "S", "B", "D", "aa", "Ab", "array", "Offset", "J", "Adam", "F", "Ma", "V", "At", "Result", "CA", "R", "C", "Num", "M", "Ar", "Alpha", "NA", "Jan", "LA", "Am", "mA", "alpha", "Na", "a", "ID"], "result": ["value", "valid", "ner", "ULT", "data", "AA", "err", "length", "folder", "count", "number", "expected", "default", "ret", "arr", "runner", "score", "total", "sum", "diff", "end", "success", "page", "num", "Results", "winner", "array", "goal", "Success", "acc", "nn", "info", "card", "Result", "status", "error", "res", "true", "knowledge", "response", "results", "work", "CC", "function", "average", "test", "feature", "found", "alpha", "r"], "Ns": ["Blocks", "Ni", "Win", "Rs", "States", "NS", "vs", "NC", "n", "KS", "Ws", "ums", "Words", "Es", "Os", "NL", "Features", "Results", "Items", "Names", "Types", "xs", "Cs", "NP", "Nat", "Ms", "ns", "Cons", "nb", "Stats", "Kids", "Changes", "Vs", "NA", "Rules", "Fs", "Values", "Ds", "Maps", "Numbers", "Flags", "WS", "Parts", "Na"], "i": ["eni", "f", "li", "fi", "I", "di", "in", "ri", "ni", "ik", "gi", "ami", "id", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "v", "adi", "c", "ie", "y", "zi", "uri", "u", "pi", "e", "info", "api", "ii", "o", "qi", "p", "ti", "x", "ind", "oi", "abi", "ini", "z", "ci", "k", "mi", "iu", "ip", "xi", "init", "chi", "ki", "ix", "bi", "a", "r"], "j": ["f", "uj", "li", "ch", "jj", "jo", "jp", "ik", "ni", "key", "m", "ji", "n", "si", "l", "ui", "jc", "v", "it", "ja", "end", "ie", "bj", "y", "aj", "u", "e", "o", "J", "js", "ii", "qi", "p", "job", "b", "x", "je", "z", "k", "ij", "xi", "r"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner scn = new Scanner(System.in);\\n\t\tint a = scn.nextInt();\\n\t\tlong ans = (long) (a + Math.pow(a, 2) + Math.pow(a, 3));\\n\t\tSystem.out.println(ans);\\n\\n\t}\\n\\n}\\n", "target": "162", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.math.*;\\nimport java.awt.Point;\\n \\npublic class Main {\\n\tstatic final long MOD = 998244353L;\\n\t//static final long INF = 1000000000000000007L;\\n\tstatic String letters = \"abcdefghijklmnopqrstuvwxyz\";\\n\t//static final long MOD = 1000000007L;\\n\tstatic final int INF = 1000000007;\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner();\\n\t\tPrintWriter pw = new PrintWriter(System.out);\\n\t\t\\n\t\t/*int Q = sc.ni();\\n\t\tfor (int q = 0; q < Q; q++) {\\n\t\t\tint N = sc.ni();\\n\t\t}*/\\n\t\t\\n\t\t//int N = sc.ni();\\n\t\tchar c = sc.next().charAt(0);\\n\t\tif ('a' <= c && c <= 'z')\\n\t\t\tpw.println(\"a\");\\n\t\telse\\n\t\t\tpw.println(\"A\");\\n\t\tpw.close();\\n\t}\\n\t\\n\tpublic static long dist(long[] p1, long[] p2) {\\n\t\treturn (Math.abs(p2[0]-p1[0])+Math.abs(p2[1]-p1[1]));\\n\t}\\n\t\\n\t//Find the GCD of two numbers\\n\tpublic static long gcd(long a, long b) {\\n\t\tif (a < b) return gcd(b,a);\\n\t\tif (b == 0)\\n\t\t\treturn a;\\n\t\telse\\n\t\t\treturn gcd(b,a%b);\\n\t}\\n\t\\n\t//Fast exponentiation (x^y mod m)\\n\tpublic static long power(long x, long y, long m) { \\n\t\tif (y < 0) return 0L;\\n\t\tlong ans = 1;\\n\t\tx %= m;\\n\t\twhile (y > 0) { \\n\t\t\tif(y % 2 == 1) \\n\t\t\t\tans = (ans * x) % m; \\n\t\t\ty /= 2;  \\n\t\t\tx = (x * x) % m;\\n\t\t} \\n\t\treturn ans; \\n\t}\\n\t\\n\tpublic static int[] shuffle(int[] array) {\\n\t\tRandom rgen = new Random();\\n\t\tfor (int i = 0; i < array.length; i++) {\\n\t\t    int randomPosition = rgen.nextInt(array.length);\\n\t\t    int temp = array[i];\\n\t\t    array[i] = array[randomPosition];\\n\t\t    array[randomPosition] = temp;\\n\t\t}\\n\t\treturn array;\\n\t}\\n\t\\n\tpublic static long[] shuffle(long[] array) {\\n\t\tRandom rgen = new Random();\\n\t\tfor (int i = 0; i < array.length; i++) {\\n\t\t    int randomPosition = rgen.nextInt(array.length);\\n\t\t    long temp = array[i];\\n\t\t    array[i] = array[randomPosition];\\n\t\t    array[randomPosition] = temp;\\n\t\t}\\n\t\treturn array;\\n\t}\\n\t\\n    public static int[][] sort(int[][] array) {\\n    \t//Sort an array (immune to quicksort TLE)\\n\t\tRandom rgen = new Random();\\n\t\tfor (int i = 0; i < array.length; i++) {\\n\t\t    int randomPosition = rgen.nextInt(array.length);\\n\t\t    int[] temp = array[i];\\n\t\t    array[i] = array[randomPosition];\\n\t\t    array[randomPosition] = temp;\\n\t\t}\\n\t\tArrays.sort(array, new Comparator<int[]>() {\\n\t\t\t  @Override\\n        \t  public int compare(int[] a, int[] b) {\\n\t\t\t\t  return a[0]-b[0]; //ascending order\\n\t          }\\n\t\t});\\n\t\treturn array;\\n\t}\\n    \\n    public static long[][] sort(long[][] array) {\\n    \t//Sort an array (immune to quicksort TLE)\\n\t\tRandom rgen = new Random();\\n\t\tfor (int i = 0; i < array.length; i++) {\\n\t\t    int randomPosition = rgen.nextInt(array.length);\\n\t\t    long[] temp = array[i];\\n\t\t    array[i] = array[randomPosition];\\n\t\t    array[randomPosition] = temp;\\n\t\t}\\n\t\tArrays.sort(array, new Comparator<long[]>() {\\n\t\t\t  @Override\\n        \t  public int compare(long[] a, long[] b) {\\n\t\t\t\t  if (a[0] < b[0])\\n\t\t\t\t\t  return -1;\\n\t\t\t\t  else\\n\t\t\t\t\t  return 1;\\n\t          }\\n\t\t});\\n\t\treturn array;\\n\t}\\n    \\n    static class FastScanner { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastScanner() { \\n            br = new BufferedReader(new InputStreamReader(System.in)); \\n        } \\n  \\n        String next() { \\n            while (st == null || !st.hasMoreElements()) { \\n                try { \\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException  e) { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        }\\n        \\n        int ni() { \\n            return Integer.parseInt(next()); \\n        }\\n  \\n        long nl() { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nd() { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() {\\n            String str = \"\"; \\n            try { \\n                str = br.readLine(); \\n            } catch (IOException e) {\\n                e.printStackTrace(); \\n            } \\n            return str;\\n        }\\n    }\\n}", "target": "80", "substitutes": {"MOD": [" mod", " LOC", "Mod", " DUP", " LR", "id", "ULE", " CL", " stamp", "UL", " LL", " magic", " mods", " MODULE", " ID", " JD", " ins", "mod", "UID", "SIZE", " reg", " P", " ret", " J", "size", " LONG", " ref", "ID"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int M = sc.nextInt();\\n    int[] num = new int[M*2];\\n    int[] count = new int[N];\\n\\n    for(int i=0; i < M*2; i++){\\n        num[i] = sc.nextInt();\\n        count[num[i]-1]++;\\n    }\\n    for(int i=0; i < N; i++){\\n        System.out.println(count[i]);\\n    }\\n  }\\n}", "target": "57", "substitutes": {"sc": ["class", "ner", "osc", "ch", " Sc", "nc", "out", "sche", "sb", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "na", "server", "anc", "scope", "cus", "SC", "se", "c", "scan", "cs", "sw", "cl", "uc", "screen", "Sc", "loc", "system", "sq", "sci", "cr", "src", "rc", "cer", "sr", "enc", "soc", "sp", " SC", "ct", "sch", "sh", "ec", "tc", "cur", "coll", "ser", "lc"], "N": ["NE", "K", "I", "L", "Z", "Size", "NI", "X", "Count", "Ni", "P", "Q", "NS", "n", "S", "Y", "B", "E", "D", "NL", "NUM", "MN", "W", "F", "V", "NM", "R", "NB", "NN", "C", "T", "U", "Num", "NA", "Ne", "Ns", "NT", "Number", "O"], "M": ["G", "K", "I", "DM", "L", "CM", "X", "P", "m", "JM", "OM", "H", "n", "B", "Y", "S", "Mo", "MM", "E", "D", "LM", "NUM", "MN", "W", "J", "MD", "F", "V", "NM", "R", "C", "T", "Num", "U", "IM", "MS", "Part", "Mi", "O"], "num": ["f", "mult", "div", "sort", "dim", "name", "miss", "ul", "nom", "no", "id", "m", "number", "index", "code", "unit", "n", "split", "block", "total", "na", "norm", "sum", "union", "con", "form", "pos", "zero", "NUM", "inc", "digit", "info", "loc", "iter", "p", "offset", "b", "nb", "en", "Num", "missing", "mom", "size", "rank", "flat", "node", "multi", "nn", "check", "dom", "um", "span"], "count": ["list", "path", "base", "miss", "call", "no", "nt", "Count", "length", "id", "code", "limit", "number", "index", "n", "total", "last", "sum", "conf", "c", "type", "bug", "cat", "max", "carry", "inc", "progress", "weight", "counter", "info", "cache", "depth", "current", "p", "offset", "status", "ind", "missing", "child", "start", "len", "part", "size", "found", "check", "skip", "rank", "parent", "q"], "i": ["f", "eni", "li", "fi", "I", "di", "in", "cli", "ni", "ri", "id", "gi", "m", "index", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "t", "it", "c", "ie", "d", "y", "uli", "uri", "zi", "u", "e", "pi", "j", "o", "info", "ii", "qi", "s", "p", "ti", "b", "x", "oi", "hi", "abi", "ini", "start", "ci", "mi", "iu", "xi", "ip", "init", "chi", "ix", "multi", "bi", "lc", "q"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.Map;\\nimport java.util.TreeMap;\\nimport java.util.concurrent.atomic.AtomicInteger;\\n\\npublic class Main {\\n  public static void main(String[] args) throws Exception {\\n    int max = 0;\\n    final Map<String, AtomicInteger> map = new TreeMap<>();\\n\\n    try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {\\n      int n = Integer.parseInt(br.readLine());\\n      for (int i = 0; i < n; i++) {\\n        String s = br.readLine();\\n        AtomicInteger c = map.get(s);\\n        int val = 1;\\n        if (c == null) {\\n          map.put(s, new AtomicInteger(1));\\n        } else {\\n          val = c.incrementAndGet();\\n        }\\n        if (val > max) {\\n          max = val;\\n        }\\n      }\\n    }\\n    try (PrintWriter pw = new PrintWriter(System.out)) {\\n      for (Map.Entry<String, AtomicInteger> e : map.entrySet()) {\\n        if (e.getValue().get() == max) {\\n          pw.println(e.getKey());\\n        }\\n      }\\n    }\\n  }\\n}", "target": "235", "substitutes": {"max": ["gen", "parse", "orig", "name", "range", "out", "act", "call", "no", "id", "random", "limit", "count", "key", "latest", "default", "active", "number", "index", "step", "total", "height", "last", "min", "rest", "conf", "end", "first", "chain", "num", "can", "ax", "prev", "always", "next", "cache", "best", "auto", "mod", "x", "start", "Max", "temp", "MAX", "size", "work", "mean", "maximum", "init", "node", "right", "alpha", "parent", "scale", "force"], "map": ["store", "parse", "list", "shape", "data", "group", "replace", "code", "index", "move", "change", "block", "pre", "build", "address", "scope", "app", "up", "meta", "master", "model", "complete", "ap", "use", "array", "per", "prev", "age", "cache", "pack", "mm", "open", "share", "down", "state", "hash", "set", "view", "table", "copy", "work", "cap", "comb", "test", "create", "lock", "dict", "module", "MAP", "scale"], "n": ["f", "nc", "nt", "ni", "m", "number", "l", "inn", "v", "num", "d", "network", "sn", "u", "o", "j", "cn", "dn", "p", "b", "x", "ns", "nl", "nb", "en", "ln", "N", "len", "z", "k", "mn", "conn", "nn", "net"], "i": ["f", "li", "I", "di", "ri", "ni", "gi", "id", "ai", "io", "si", "ori", "ui", "phi", "v", "ie", "y", "u", "pi", "j", "ii", "p", "ti", "b", "x", "oi", "ini", "ci", "mi", "iu", "ip", "xi", "init", "ix", "chi", "multi", "bi"], "s": ["f", "ts", "h", "hs", "string", "is", "abs", "in", "lines", "m", "gs", "parts", "ves", "l", "its", "S", "ss", "ops", "g", "v", "ches", "cs", "se", "rows", "d", "features", "settings", "ls", "es", "u", "str", "o", "js", "p", "b", "sets", "ns", "ps", "tests", "ws", "ans", "sl", "line", "os", "ins", "ks", "strings", "ses", "rs", "fs", "ds", "a", "r"], "c": ["f", "xc", "ch", "cf", "fc", "mc", "co", "nc", "cy", "m", "cc", "pc", "l", "ac", "g", "v", "ca", "cs", "cat", "uc", "cl", "abc", "ce", "u", "o", "dc", "p", "b", "C", "cr", "cb", "enc", "cu", "sc", "oc", "col", "ci", "k", "ct", "cp", "ec", "const", "coll", "cmp", "lc"], "val": ["f", "value", "valid", "exp", "vals", "cal", "base", "fail", "grad", "db", "az", "ref", "live", "id", "key", "ee", "aval", "pr", "unit", "ver", "l", "na", "g", "v", "min", "doc", "rl", "d", "num", "fe", "Val", "il", "dev", "VAL", "pt", "loc", "pid", "p", "vel", "x", "al", "ind", "pass", "sel", "len", "sl", "col", "fl", "la", "vert", "eval", "el", "vol"], "e": ["f", "ne", "ele", "data", "one", "edge", "ev", "element", "ed", "me", "ee", "m", "l", "he", "ea", "que", "ue", "ede", "E", "se", "ie", "er", "ect", "entry", "d", "oe", "fe", "ge", "ce", "es", "le", "event", "o", "iter", "p", "eu", "enter", "de", "entity", "ve", "pe", "see", "or", "je", "line", "ze", "ade", "ec", "be", "ae", "el"]}}
{"code": "import java.io.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tBufferedReader kb = new BufferedReader( new InputStreamReader( System.in ) );\\n\t\ttry {\\n\t\t\tint[] Count = new int[29];\\n\t        String str;\\n\t\t\twhile( null != ( str = kb.readLine() ) ) {\\n\t            int len = str.length();\\n\t            if( null == str || 0 == len ) { break; }\\n\t            char c;\\n\t       \t\tfor( int i=0; i<len; i++ ) {\\n\t       \t\t\tc = Character.toUpperCase( str.charAt( i ) );\\n\t       \t\t\tif(  'A' <= c && c <= 'Z' ) {\\n\t       \t\t\t\tCount[ c - 'A' ]++;\\n\t       \t\t\t}\\n\t       \t\t}\\n       \t\t}\\n       \t\tfor( int i=0; i<26; i++ ) {\\n\t\t\t\tSystem.out.printf( \"%c : %d\\n\", ('a'+i ), Count[ i ] );\\n       \t\t}\\n\t\t} catch( IOException e ) {\\n\t\t\tSystem.err.println( e );\\n\t\t}\\n\t}\\n}", "target": "242", "substitutes": {"kb": ["KB", "bf", "kid", "km", "uk", "mc", "BP", "rt", "sb", "db", "lf", "bt", "bc", "ck", "bp", "ctx", "cl", "mk", "kl", "reader", "kr", "mb", "rb", "bb", "b", "nb", "cb", "cr", "kB", "sk", "ka", "gd", "bd", "k", "kt", "ks", "conn", "ke", "fs", "dk", "kw"], "Count": ["Buffer", "Status", "Code", "Start", "Length", "Len", "Id", "Index", "Size", "Name", "Error", "Depth", "Flag", "count", "Cache", "Type", "Counter", "Limit", "Position", "Read", "Log", "Ptr", "Offset", "Weight", "Sum", "Case", "Num", "Base", " count", "Country", "Max", "Array", "Number", "Time", "Info", "ID"], "str": ["obj", "tr", "br", "div", "inst", "string", "data", "input", "stri", "st", "in", "err", "fr", "pr", "dr", "arr", "text", "sec", "style", "cl", "reader", "kr", "dec", "spec", "txt", "u", "url", "hr", "iter", "p", "status", "b", "STR", "strip", "cr", "pass", "res", "enc", "sr", "char", "sl", "temp", "sp", "line", "strings", "cur", "coll", "lc", "Str", "r"], "len": ["f", "li", "val", "Len", "base", "L", "lin", "nt", "length", "lf", "count", "limit", "code", "n", "l", "left", "ll", "min", "fin", "end", "d", "pos", "ls", "le", "lim", "lit", "lo", "loc", "elt", "ind", "ln", "all", "en", "sl", "z", "line", "size", "part", "lon", "lc", "el", "span"], "c": ["f", "xc", "ch", "name", "string", "mc", "vc", "co", "nc", "cy", "code", "m", "cc", "esc", "bc", "pc", "n", "unc", "l", "ac", "anc", "v", "t", "cs", "uc", "cl", "d", "ce", "dec", "u", "o", "s", "p", "dc", "b", "x", "C", "cr", "ic", "enc", "char", "cu", "sc", "col", "oc", "ci", "k", "ct", "arc", "ec", "tc", "cur", "coll", "lc", "a", "r"], "i": ["f", "eni", "li", "fi", "I", "vi", "di", "ri", "ni", "cli", "gi", "id", "m", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "it", "ie", "d", "y", "zi", "uri", "u", "pi", "info", "j", "o", "ii", "ei", "qi", "api", "ti", "p", "b", "oi", "x", "hi", "slice", "ini", "yi", "z", "ci", "mi", "ip", "xi", "iu", "init", "ix", "multi", "bi", "lc", "a"], "e": ["f", "ep", "esi", "h", "ne", "ffe", "one", "ev", "in", "ed", "me", "err", "ee", "ea", "exc", "E", "ie", "se", "er", "fe", "d", "ce", "oe", "eve", "es", "o", "p", "eu", "ite", "error", "pe", "see", "or", "ze", "ec", "ae", "we", "a", "ception"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.math.*;\\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    long l = sc.nextLong();\\n    long r = sc.nextLong();\\n    r = Math.min(r,(l+2019));\\n    long mod = 2019L;\\n    long ans = (long)Math.pow(10,9)+7;\\n    for(long i = l; i < r; i++){\\n        for(long j = i+1; j <= r; j++){\\n            long tmp = ((i%mod)*(j%mod))%mod;\\n            ans = Math.min(ans,tmp);\\n        }\\n    }\\n    System.out.println(ans);\\n  }\\n}", "target": "193", "substitutes": {"sc": ["ner", "ch", "osc", "cont", "mc", " Sc", "nc", "sche", "cv", "cc", "esc", "bc", "asc", "pc", "ss", "anc", "scope", "cers", "ca", "SC", "c", "scan", "se", "uc", "sw", "cus", "cs", "ctx", "cor", "Sc", "system", "sq", "sci", "cr", "src", "rc", "cer", "enc", "soc", "ci", "sp", " SC", "sch", "tc", "ec", "cur", "sem", "lc"], "l": ["f", "li", "h", "L", "lin", "ol", "length", "lu", "m", "n", "ll", "v", "t", "c", "rl", "d", "kl", "dl", "ls", "u", "lo", "loc", "lp", "p", "b", "ln", "nl", "w", "len", "sl", "z", "k", "lr", "la", "lc", "el"], "r": ["f", "tr", "h", "rt", "range", "ri", "err", "m", "fr", "pr", "n", "v", "rev", "c", "radius", "d", "er", "ar", "re", "rb", "u", "e", "hr", "ur", "ra", "s", "p", "R", "b", "x", "ru", "rh", "rar", "w", "rc", "sr", "rr", "rx", "z", "nr", "rf", "k", "ro", "rd", "rs", "right", "ir", "q"], "mod": ["tr", "sim", "div", "lex", "dig", "comp", "modified", "base", "ow", "Mod", "MOD", "range", "rem", "mented", "grad", "complex", "length", "cum", "id", "log", "m", "rm", "mac", "step", "rac", "reg", "sec", "rod", "min", "form", "bin", "d", "ms", "max", "dec", "cm", "req", "u", "e", "ment", "dev", "rib", "section", "rar", "x", "row", "mag", "mods", "rad", "md", "mode", "ro", "perm", "od", "lock", "module", "scale"], "ans": ["ams", "ANS", "rans", "ann", "aned", "anon", "lines", "ays", "anas", "man", "vs", "leans", "ons", "ani", "amps", "AN", " means", "ss", "na", "anc", "aces", "cs", "ents", "errors", "ms", "lan", "can", "ls", "ions", "nas", "ens", "rules", "aus", "xs", "s", "as", "x", "ns", "atan", "san", "ants", "ares", "len", "sk", "anus", "eps", "acs", "os", "ins", "ana", "ras", "rs", "an", "tta", "anz", "ars", "la", "ds", "a", "span"], "i": ["f", "eni", "li", "fi", "h", "I", "mini", "vi", "is", "di", "in", "ri", "ni", "gi", "id", "m", "ai", "ji", "n", "si", "ori", "ui", "phi", "v", "c", "ie", "y", "zi", "u", "e", "pi", "o", "ii", "qi", "p", "hi", "b", "x", "oi", "ind", "ini", "z", "ci", "mi", "iu", "xi", "ip", "init", "isi", "ix", "a"], "j": ["f", "uj", "li", "h", "jl", "jj", "jo", "vi", "oj", "jp", "ni", "m", "ji", "n", "si", "py", "jc", "v", "ja", "c", "ie", "bj", "d", "y", "aj", "u", "e", "o", "J", "js", "ii", "qi", "p", "job", "b", "x", "je", "z", "k", "ij", "jet", "q"], "tmp": ["obj", "LT", "opp", "sb", "cop", "option", "alpha", "py", "area", "attr", "tt", "ff", "mp", "su", "txt", "ppo", "acc", "source", "rb", "next", "emp", "Temp", "current", "sq", "own", "amp", "elt", "sup", "kk", "extra", "ptr", "temp", "vt", "copy", "addr", "qa", "abb", "beta", "pad", "mmm", "perm", "test", "ott", "cmp", "now", "ctrl", "yy"]}}
{"code": "import java.util.*;public class Main{public static void main(String[] args) {Scanner sc =new Scanner(System.in);int n=sc.nextInt(),c=n,m=sc.nextInt();int num[]=new int[n+1];for(;n>0;n--) num[n]=n;for(;m>0;m--){String []s=sc.next().split(\",\");int a=Integer.parseInt(s[0]),b=Integer.parseInt(s[1]),t=num[a];num[a]=num[b];num[b]=t;}for(;n<c;n++)System.out.println(num[n+1]);}}", "target": "156", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "mc", " Sc", "nc", "sche", "sb", "cle", "proc", "esc", "bc", "cc", "asc", "pc", "ss", "anc", "g", "scope", "cus", "SC", "se", "scan", "cs", "sw", "cl", "uc", "Sc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "sp", " SC", "sch", "sh", "parser", "ec", "cur", "isc", "tc", "coll", "sem", "lc"], "n": ["f", "on", "ne", "name", "none", "co", "nc", "net", "in", "no", "nt", "count", "not", "l", "na", "g", "v", "d", "y", "network", "sn", "ng", "u", "e", "o", "j", "np", "cn", "p", "un", "x", "all", "ns", "C", "nb", "en", "w", "N", "z", "nr", "k", "size", "mn", "i", "init", "nu", "an", "nn", "fn", "r"], "c": ["f", "ch", "mc", "nc", "count", "cc", "l", "ac", "v", "con", "cs", "end", "d", "y", "cm", "u", "e", "o", "cn", "p", "x", "C", "w", "col", "z", "ci", "k", "size", "i", "lc"], "m": ["f", "nm", "bm", "h", "mc", "am", "nc", "in", "man", "l", "mu", "g", "v", "d", "y", "cm", "u", "e", "o", "j", "mm", "p", "x", "om", "dm", "M", "w", "hm", "md", "pm", "z", "k", "mn", "i", "an", "machine", "r"], "num": ["f", "value", "sort", "name", "dim", "none", "miss", "grade", "one", "mon", "param", "out", "nom", "no", "version", "mun", "id", "count", "number", "index", "non", "unit", "split", "null", "block", "text", "na", "home", "mu", "sum", "nam", "union", "end", "con", "hom", "result", "form", "bin", "update", "max", "NUM", "inc", "u", "digit", "info", "np", "current", "loc", "p", "un", "status", "nb", "Num", "N", "im", "temp", "umi", "mn", "size", "test", "nu", "node", "multi", "nn", "parent", "um", "net"], "s": ["f", "string", "is", "abs", "sb", "sv", "parts", "sg", "shell", "si", "l", "its", "S", "ss", "sum", "v", "d", "words", "ls", "es", "u", "e", "o", "str", "js", "info", "qs", "sq", "p", "bis", "sets", "ns", "sync", "ps", "tests", "ws", "sl", "i", "strings", "fs", "ds", "r", "second"], "a": ["f", "am", "off", "ga", "A", "oa", "ab", "ad", "l", "ea", "ac", "ba", "da", "app", "ca", "aa", "area", "d", "y", "aj", "va", "u", "e", "o", "pa", "api", "fa", "sa", "p", "x", "as", "en", "au", "qa", "i", "an", "ae", "alpha", "la", "r"], "b": ["f", "bf", "sb", "ab", "bl", "l", "B", "wb", "ob", "ba", "v", "aa", "d", "y", "mb", "u", "e", "o", "j", "lb", "p", "x", "nb", "w", "bs", "k", "i", "fb", "r"], "t": ["f", "ts", "tr", "nt", "l", "te", "v", "tt", "d", "y", "u", "e", "o", "j", "at", "p", "ot", "x", "T", "w", "z", "k", "ta", "i", "tm", "tf", "r"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args){\\n\\n\t\tScanner sc=new Scanner(System.in);\\n\\n\t\tString[] str=(sc.next()).split(\"\");\\n\\n\t\tsc.close();\\n\\n\t\tList<String> list=new ArrayList<String>();\\n\\n\t\tint cnt=0;\\n\\n\t\tfor(int i=0;i<4;i++){\\n\t\t\tif(list.contains(str[i])){\\n\t\t\t\tcnt++;\\n\t\t\t}else{\\n\t\t\t\tlist.add(str[i]);\\n\t\t\t}\\n\t\t}\\n\\n\t\tif(list.size()>2){\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}else{\\n\t\t\tif(cnt==2){\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t}else{\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t}\\n\t\t}\\n\\n\\n\t}\\n}\\n", "target": "33", "substitutes": {"sc": ["ner", "ch", "osc", "fc", "mc", " Sc", "nc", "cv", "cc", "bc", "esc", "asc", "pc", "sec", "server", "anc", "scope", "ca", "SC", "c", "scan", "cs", "se", "cl", "uc", "sw", "cus", "Sc", "system", "sci", "cr", "ocr", "sync", "src", "rc", "sr", "soc", "ci", "sp", " SC", "sch", "sh", "ec", "cur", "sem", "lc"], "str": ["obj", "ner", "div", "arg", "name", "tree", "tr", "string", "br", "data", "path", "input", "stri", "st", "in", "id", "code", "fr", "split", "arr", "dr", "text", "block", "entry", "ext", "word", "url", "iter", "p", "STR", "strip", "pass", "cr", "enc", "sr", "char", "sp", "part", "line", "Str", "r"], "list": ["li", "listed", "cont", "tree", "name", "ul", "string", "base", "join", "act", "bl", "search", "code", "collection", "l", "null", "queue", "left", "ll", "loop", "result", "cl", "chain", "array", "batch", "word", "cache", "lat", "full", "p", "x", "stack", "all", "pool", "set", "LIST", "table", "view", "temp", "part", "test", "coll", "lc", "parent"], "cnt": ["rcnt", "lcnt", "cnn", "cno", "ccount", "Count", "count", "rcount", "account", "Cnt", " cint", " cno", "lcnn", "cst", " crt", "pno", "rcint", "lcount", "pount", "prt", "cint", "Cst", " cst", " cnn", "Ccount", "Crt", "pnt", " count", "acst", "acount", "lcint", "rcnn", "acnt", "Cno", " ccount", "crt"], "i": ["f", "li", "fi", "I", "di", "ri", "length", "id", "key", "gi", "index", "m", "ai", "inner", "io", "ji", "si", "l", "ui", "mu", "phi", "v", "c", "ie", "d", "y", "uli", "uri", "zi", "u", "pi", "o", "j", "e", "api", "ii", "qi", "p", "ti", "b", "oi", "x", "hi", "slice", "ini", "z", "ci", "k", "ip", "xi", "init", "ix", "multi", "bi", "lc"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String s = sc.next();\\n\\n\\n        Map<Integer, Character> map = new HashMap<>();\\n        Map<Character, Integer> map2 = new HashMap<>();\\n        int p = 0;\\n        for (char a = 'A';a <= 'Z';a++) {\\n            map2.put(a,p);\\n            map.put(p++, a);\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i< s.length(); i++) {\\n            \\n            char c = map.get((map2.get(s.charAt(i))+n) % 26);\\n            //System.out.println(c);\\n            sb.append(c);\\n        }\\n        System.out.println(sb.toString());\\n    }\\n\\n}\\n", "target": "13", "substitutes": {"sc": ["osc", "ch", "ner", "mc", " Sc", "nc", "st", "sche", "cv", "esc", "bc", "asc", "pc", "exec", "ss", "server", "anc", "scope", "SC", "se", "scan", "cs", "sw", "uc", "cl", "screen", "com", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "sr", "sp", "ci", " SC", "sch", "sh", "cur", "sem", "ser", "lc", " scr"], "n": ["f", "ne", "name", "nc", "in", "nt", "count", "m", "l", "na", "t", "r", "d", "num", "y", "sn", "rn", "le", "e", "o", "j", "cn", "b", "x", "ln", "nb", "en", "w", "N", "enc", "z", "k", "size", "nn", "net"], "s": ["f", "string", "data", "is", "input", "abs", "in", "comments", "lines", "m", "parts", "si", "l", "S", "ss", "g", "sites", "d", "features", "settings", "ls", "es", "source", "u", "o", "js", "services", "as", "b", "blocks", "sets", "ns", "ps", "ws", "ans", "sl", "styles", "os", "ins", "ings", "strings", "ses", "rs", "states", "ds", "r"], "map": ["func", "parse", "list", "cover", "shape", "make", "data", "me", "pose", "replace", "m", "code", "move", "man", "block", "pre", "address", "app", "maps", "master", "conf", "model", "ap", "use", "array", "ge", "acc", "age", "cache", "pack", "mm", "open", "down", "set", "table", "copy", "cap", "comb", "test", "pad", "create", "bridge", "mate", "lock", "dict", "module", "MAP", "scale", "sign"], "map2": ["module1", "cache02", "make3", "make1", "cache2", "maketwo", "Map0", "Map3", "module2", "Map2", "Map1", "make2", "map02", " map3", "cachetwo", "moduleTwo", "map0", "mapTwo", "map3", "map1", "Maptwo", " map02", "module0", " mapTwo", " map1", "MapTwo", " map0", "Map02", " maptwo", "maptwo"], "p": ["f", "h", "pat", "wp", "jp", "P", "m", "pc", "l", "pre", "v", "t", "bp", "d", "pointer", "pos", "ap", "pa", "u", "pi", "e", "j", "api", "point", "pid", "as", "b", "x", "lp", "w", "po", "pp", "z", "cp", "pai", "qa", "an", "alpha"], "a": ["f", "h", "name", "am", "ga", "A", "ab", "ma", "oa", "ad", "ai", "l", "ea", "ac", "na", "aw", "ba", "da", "ca", "area", "aa", "d", "pos", "aj", "ar", "ap", "pa", "va", "e", "u", "af", "aaa", "fa", "sa", "b", "as", "at", "x", "ha", "w", "au", "z", "ata", "wa", "qa", "pai", "an", "ae", "alpha", "la", "ppa", "r"], "sb": ["Buffer", " db", " sv", " SB", "db", "ub", "bc", "sg", " bc", "si", " buff", "ss", " std", " ans", " buf", "buf", "buffer", "SB", "builder", "str", " ls", " kb", "sf", " screen", " si", "Str", " br", " scr"], "i": ["f", "li", "fi", "I", "di", "ri", "ni", "gu", "gi", "id", "index", "ai", "io", "ji", "si", "l", "ui", "phi", "v", "ie", "y", "zi", "uri", "u", "pi", "e", "j", "o", "ii", "qi", "hi", "b", "x", "oi", "abi", "ini", "yi", "z", "ci", "iu", "xi", "ip", "init", "ix", "multi", "bi"], "c": ["f", "xc", "h", "ad", "m", "code", "cc", "pc", "unc", "l", "ac", "g", "uc", "d", "u", "e", "b", "ic", "C", "enc", "col", "ci", "k", "ct", "ec", "lc", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner scan = new Scanner(System.in);\\n    int n = scan.nextInt();\\n    int[] g = new int[n];\\n    for (int i=0;i<n;i++){\\n      g[i] = scan.nextInt();\\n    }\\n    Arrays.sort(g);\\n    if (g.length % 2 != 0){\\n      System.out.println(0);\\n    }\\n    else{\\n      int t = g.length;\\n      t = (int) t/2;\\n      System.out.println(g[t] - g[t-1]);\\n    }\\n  }\\n}\\n", "target": "119", "substitutes": {"scan": ["gen", "parse", "stat", "ner", "sort", "skip", "car", "ann", "watch", "out", "fan", "in", "pan", "chan", "err", "search", "ignore", "inner", "man", "ser", "l", "na", "server", "wait", "con", "se", "cat", "er", "can", "plan", "query", "read", "connect", "spin", "iter", "system", "sci", "Scan", "en", "san", "sync", "slice", "sin", "see", "sc", "ans", "win", "scroll", "sys", "conn", "an", "look", "nn", "run", "clean", "sign", "r", "span"], "n": ["f", "ne", "nc", "in", "no", "nt", "count", "m", "limit", "l", "v", "r", "c", "num", "d", "y", "u", "e", "o", "j", "s", "p", "b", "x", "ns", "nl", "nb", "en", "w", "N", "len", "z", "k", "size", "nn", "net"], "g": ["gb", "f", "gen", "G", "h", "cfg", "data", "rg", "mg", "og", "ga", "group", "gu", "gi", "m", "gs", "sg", "l", "gt", "erg", "reg", "gc", "v", "vg", "c", "gas", "gp", "pg", "d", "agg", "ge", "u", "game", "e", "gl", "s", "p", "b", "x", "ig", "graph", "msg", "w", "ag", "q", "gh", "go", "size", "big", "gap", "gm", "gam", "bg", "gg", "gn", "r"], "i": ["f", "li", "fi", "h", "I", "di", "in", "ni", "gi", "id", "m", "index", "ai", "io", "si", "l", "ui", "v", "phi", "it", "c", "ie", "num", "d", "y", "u", "pi", "o", "e", "info", "j", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "ind", "ini", "start", "ci", "part", "k", "mi", "ip", "iu", "init", "xi", "chi", "multi", "ix", "r"], "t": ["f", "ts", "tr", "h", "rt", "off", "dt", "nt", "m", "wt", "tw", "l", "total", "te", "v", "it", "c", "type", "tt", "xt", "d", "y", "u", "e", "o", "j", "pt", "tu", "to", "s", "p", "ot", "b", "x", "ti", "offset", "T", "z", "ta", "test", "lt", "a", "tf", "q"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u5165\u529b\\n            int n = Integer.parseInt(in.next());\\n            String w[] = new String[n];\\n            for (int i = 0; i < n; i++) {\\n                w[i] = in.next();\\n            }\\n            int ans = 0;\\n\\n            for (int i = 1; i < n; i++) {\\n                if (w[i - 1].charAt(w[i - 1].length() - 1) != w[i].charAt(0)) {\\n                    out.print(\"No\");\\n                    return;\\n                }\\n                if (isExist(i, w)) {\\n                    out.print(\"No\");\\n                    return;\\n                }\\n            }\\n\\n            // \u51fa\u529b\\n            out.println(\"Yes\");\\n\\n        }\\n\\n        private static boolean isExist(int n, String s[]) {\\n            for (int i = 0; i < n; i++) {\\n                if (s[i].equals(s[n])) {\\n                    return true;\\n                }\\n            }\\n            return false;\\n        }\\n\\n    }\\n}\\n\\n", "target": "70", "substitutes": {"inputStream": ["InputStream", "outputSteam", " inputSteam", "outputCh", "outputChannel", " inputCh", "InputCh", "Inputstream", " inputChannel", "InputSteam", "inputChannel", " inputstream", "InputChannel", "outputstream", "inputstream", "inputCh", "inputSteam"], "outputStream": ["responsestream", "outputStreamer", "inputStreamer", " outputChannel", "OutputStream", "responseStream", "responseSteam", "outputSteam", "OutputSteam", " outputSteam", "responseStreamer", "Outputstream", " outputstream", "OutputChannel", "outputChannel", "OutputStreamer", "inputChannel", "outputstream", "inputstream", "inputSteam"], "in": ["gen", "on", "arg", "name", "path", "plus", "cin", "data", "is", "input", "lin", "err", "din", "pin", "id", "inner", "image", "config", "index", "io", "nin", "n", "IN", "inn", "min", "con", "bin", "reader", "kin", "request", "isin", "inc", "source", "this", "info", "inside", "s", "vin", "ini", "sin", "login", "win", "again", "ins", "conn", "i", "connection", "init", "In", "gin", "run", "inf", "r"], "out": ["client", "arg", "name", "string", "data", "off", "input", "console", "outside", "call", "no", "log", "err", "image", "inner", "session", "io", "n", "window", "exec", "null", "process", "IN", "server", "v", "loader", "page", "write", "bin", "password", "OUT", "inc", "output", "external", "ex", "this", "o", "cache", "analysis", "point", "to", "user", "s", "at", "p", "b", "x", "error", "Out", "w", "file", "sync", "problem", "pass", "again", "temp", "line", "conn", "writer", "i", "outer", "init", "connection", "outs", "parent", "net"], "solver": ["Solution", "Solver", "Solving", "solution", "ssolver", " sol", "unsolve", "ssolve", "solve", "ssolution", "solving", "unsolver", "Sol", "ssolving", " solution", "sol", "Solve", "unsolution", "unsolving", "ssol", " solve"], "testNumber": ["testNumbers", "trialNumber", "Testnumber", "TestNumbers", "trialNum", "TestNum", " testNumbers", "trialNumbers", " testnumber", "testNum", "trialnumber", "TestNumber", " testNum", "testnumber"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(final String[] args) throws Exception {\\n        final Scanner sc = new Scanner(System.in);\\n        String S;\\n        S = sc.next();\\n\\n        final Solver solver = new Solver();\\n        solver.solve(S);\\n    }\\n}\\n\\nclass Solver {\\n    public void solve(String S) {\\n        int ans = 0;\\n        int N = S.length();\\n        for (int i = 0; i < N / 2; i++) {\\n            if (S.charAt(i) != S.charAt(N - i - 1)) {\\n                ans++;\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n\\n", "target": "115", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "out", "sche", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "anc", "scope", "cus", "SC", "c", "scan", "se", "sw", "cs", "uc", "Sc", "s", "system", "sub", "sci", "C", "src", "sf", "cr", "rc", "cer", "enc", "sp", "ci", " SC", "sch", "ec", "desc", "lc"], "S": ["SA", "G", "K", "DS", "I", "string", "L", "Si", "St", "Session", "A", "Socket", "SO", "X", "P", "Sin", "NS", "SN", "session", "SAM", "Sync", "Sample", "B", "SH", "RS", "As", "E", "SC", "VS", "SER", "FS", "OS", "SL", "SB", "Su", "F", "V", "s", "R", "IS", "STR", "C", "SS", "T", "U", "SE", "M", "TS", "SU", "CS", "SR", "Single", "Sl", "OSS", "WS", "GS", "SI", "O"], "solver": ["Solution", "fsolution", "fsolver", "Solver", "solution", "ssolver", "ssolve", "fsolve", "ysector", "solve", "ysolution", "sector", "ssolution", "Sector", "ssector", "ysolve", " sector", "fsector", "ysolver", " solution", "Solve", " solve"], "ans": ["ations", "ANS", "I", "ats", "ann", "aned", "ni", "reads", "ai", "n", "ons", "annot", "AN", "ss", "na", "anc", "cus", "ents", "cs", "scan", "can", "lan", "ls", "es", "ions", "ids", "nas", "ens", "aus", "s", "as", "x", "ns", "atan", "ants", "ares", "vers", "eps", "os", "ins", "ana", "ras", "ks", "an", "ars", "annis", "a", "anned", "span"], "N": ["NE", "G", "K", "Length", "Len", "I", "L", "Z", "Size", "A", "NI", "Sn", "Ni", " n", "Count", "Node", "P", "NS", "SN", "H", "GN", "n", "B", "Na", "E", "D", "NL", "OS", "J", "F", "V", "No", "NG", "R", "NB", "NN", "C", "T", "Num", "M", "Max", "NA", "Ne", "Part", "Ns", "ND", "NT", "O"], "i": ["f", "eni", "li", "I", "di", "ri", "ni", "length", "id", "gi", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "v", "c", "ie", "zi", "uri", "pi", "u", "e", "o", "j", "ii", "qi", "s", "at", "ti", "p", "b", "x", "oi", "hi", "slice", "abi", "ini", "start", "ci", "ip", "xi", "chi", "ix", "bi", "a"]}}
{"code": "import java.util.Collections;\\nimport java.util.HashSet;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        int[] p = new int[m];\\n        String[] s = new String[m];\\n        HashSet<Integer> set = new HashSet<>();\\n        for (int i = 0; i < m; i++) {\\n            p[i] = sc.nextInt();\\n            s[i] = sc.next();\\n            set.add(p[i]);\\n        }\\n        if(m == 0) {\\n            System.out.println(\"0 0\");\\n            return;\\n        }\\n        int size = Collections.max(set);\\n        boolean[] tmp = new boolean[size + 1];\\n        int[] tmp2 = new int[size + 1];\\n        int ac = 0;\\n        int wa = 0;\\n        for (int i = 0; i < m; i++) {\\n            int tmp3 = p[i];\\n            if(!tmp[tmp3]) {\\n                if(s[i].equals(\"WA\")) {\\n                    tmp2[tmp3]++;\\n                } else {\\n                    ac++;\\n                    wa += tmp2[tmp3];\\n                    tmp[tmp3] = true;\\n                }\\n            }\\n        }\\n        System.out.println(ac + \" \" + wa);\\n    }\\n}", "target": "48", "substitutes": {"sc": ["ner", "ch", "osc", "cont", "mc", " Sc", "nc", "sche", "sb", "cle", "cv", "cc", "esc", "bc", "asc", "pc", "ss", "sec", "anc", "scope", "ca", "SC", "c", "scan", "cs", "sw", "cl", "se", "cus", "uc", "ctx", "cor", "Sc", "loc", "system", "sq", "sub", "sci", "cr", "src", "sync", "rc", "sr", "sp", "ci", " SC", "sch", "sh", "ec", "tc", "cur", "sem", "ser", "lc"], "n": ["f", "nm", "nc", "in", "nt", "l", "v", "c", "num", "d", "u", "e", "o", "j", "np", "b", "x", "ns", "nb", "w", "N", "z", "k", "mn", "net"], "m": ["f", "nm", "h", "dim", "mc", "in", "man", "rm", "l", "mu", "v", "t", "c", "d", "ms", "y", "num", "fm", "cm", "u", "e", "o", "j", "mm", "b", "x", "w", "M", "dm", "im", "hm", "md", "pm", "z", "k", "mn", "mi", "sm", "module", "machine", "r"], "p": ["f", "wp", "jp", "P", "pc", "l", "py", "tp", "v", "up", "t", "bp", "c", "pg", "mp", "per", "ap", "y", "u", "pi", "o", "j", "e", "np", "api", "point", "fp", "pid", "lp", "x", "w", "ps", "q", "pe", "po", "pp", "op", "pm", "sp", "part", "cp", "ip", "a"], "s": ["f", "ts", "string", "is", "ssl", "sv", "gs", "params", "south", "si", "S", "ss", "g", "v", "t", "c", "se", "sites", "ms", "su", "ls", "so", "es", "u", "e", "o", "xs", "services", "sa", "sets", "space", "b", "ns", "w", "ps", "ws", "ans", "sl", "sp", "os", "sh", "strings", "ses", "rs", "ds", "a", "r"], "set": ["store", "map", "value", "parse", "list", "setup", "sort", "are", "st", "sche", "no", "group", "id", "ut", "change", "reset", "send", "end", "t", "se", "c", "use", "so", "add", "e", "et", "o", "j", "space", "en", "sync", "start", "filter", "sp", "secure", "sh", "init", "create", "get", "vert", "sign"], "i": ["f", "eni", "li", "fi", "I", "vi", "mini", "is", "di", "in", "me", "ni", "ri", "id", "gi", "index", "cli", "ai", "io", "ji", "si", "l", "aci", "ui", "mu", "v", "it", "t", "c", "ie", "y", "uri", "zi", "u", "e", "o", "j", "pi", "api", "ii", "info", "qi", "ti", "b", "x", "oi", "hi", "ic", "w", "abi", "ini", "start", "yi", "ci", "mi", "ip", "iu", "xi", "init", "chi", "multi", "ix", "bi", "a"], "size": ["shape", "sized", "Size", "ma", "count", "code", "key", "address", "g", "sum", "ice", "ize", "area", "c", "min", "se", "any", "empty", "max", "small", "use", "cm", "j", "iz", "loc", "x", "en", "w", "len", "mode", "z", "ci", "k", "capacity", "sh", "now", "scale"], "tmp": ["etc", "wp", "nt", "proc", "bt", "params", "pre", "td", "py", "tp", "v", "meta", "area", "bp", "ff", "mp", "pos", "array", "txt", "ppo", "upe", "emp", "np", "porary", "pot", "api", "bb", "mm", "amp", "sup", "nb", "pty", "kk", "po", "temp", "sp", "vt", "multiple", "part", "cp", "fake", "tc", "beta", "stuff", "mmm", "storage", "perm", "test", "cmp", "ott", "now", "fb", "suff"], "tmp2": ["txt52", "temp3", "tmp1", "txt3", "txt2", "temp8", "p3", "tmp4", "p42", "p2", " tmp52", " tmp4", "mp4", " tmp42", "temp2", "mp2", "temp4", "temp52", "tmp42", " tmp8", "mp8", " tmp1", "mp42", "temp1", "mp1", "mp3", "tmp52", "tmp8", "txt4", "p1"], "ac": ["jac", "acl", "auc", "aic", "cc", "ai", "asc", "pc", "mac", "rac", "aw", "ass", "ba", "anc", "ca", "c", "aa", "asa", "uc", "iac", "ax", "acc", "ace", "pa", "inc", "ay", "loc", "dc", "sa", "ia", "AC", "pac", "ic", "ha", "au", "ak", "oc", "cu", "acs", "ci", "ta", "ana", "ec", "aca", "ae", "Ac", "a"], "wa": ["ema", "oa", "ma", "wave", "wt", "Wa", "ai", " sa", "lambda", "wb", "na", "aw", "ba", "da", "wait", "ca", "aa", "ja", "ww", "asa", "iw", "area", "sw", "WA", "ay", "va", "pa", "fa", "sa", "wal", "za", "ha", "w", "au", "wat", "awa", "ya", "ka", "ws", "qa", "ta", "la", "a"], "tmp3": ["prop93", " tmpthree", "temp3", "prop2", "tempThree", "tmp1", "txt3", "txt2", "p3", "mp93", "mp53", "mpThree", "p2", "jp83", "prop53", "jp3", "tmp6", "txt1", "temp2", "mp2", "test1", "p53", "txtthree", "jp1", "p93", " tmp83", "txt83", "tmp83", "jpthree", "tmp53", " tmp1", "mp6", "test2", "temp1", "mp1", "mp3", "test3", "temp6", "test6", "tmpthree", "mpthree", "prop3", "tmpThree", "tmp93", "txtThree"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n        \\n        final int S = Integer.parseInt(sc.next());\\n        final int W = Integer.parseInt(sc.next());\\n        \\n\\n\\n\\n\\n        \\n        out.println(S <= W ? \"unsafe\" : \"safe\");\\n        \\n        out.flush();\\n    }\\n}", "target": "177", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "fc", " Sc", "nc", "sche", "cle", "contract", "search", "cc", "esc", "bc", "asc", "pc", "ss", "scope", "anc", "ca", "SC", "c", "cs", "scan", "uc", "sw", "se", "cl", "cus", "spec", "acc", "this", "Sc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "soc", "ci", "sp", " SC", "ct", "sch", "ec", "cur", "lc"], "out": ["gen", "client", "exp", "arg", "name", "comment", "path", "string", "ch", "cmd", "input", "prefix", "in", "log", "err", "io", "report", "exec", "IN", "scope", "up", "print", "sum", "page", "bin", "write", "password", "OUT", "inc", "output", "serv", "ex", "buffer", "word", "o", "cache", "user", "point", "flush", "error", "Out", "w", "file", "pool", "again", "temp", "copy", "line", "conn", "writer", "outer", "png", "outs", "lock", "screen", "parent"], "S": ["AW", "SA", "K", "DS", "L", "Si", "SK", "X", "P", "Q", "SN", "NS", "H", "Y", "SH", "SI", "SL", "J", "Su", "F", "V", "s", "R", "C", "SS", "T", "U", "SE", "N", "TS", "SU", "SR", "SY", "US", "ISS", "O"], "W": ["AW", "WE", "G", "K", "I", "L", "Z", "SW", "MW", "A", "Sw", "BW", "P", "Wa", "Q", "H", "Y", "Ws", "SH", "DW", "E", "D", "We", "WA", "FW", "Weight", "V", "NW", "TW", "RW", "C", "w", "WP", "WB", "U", "SE", " w", "VW", "EW", "WI", "GW", "Wh", "WR"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String args[]) throws IOException {\\n\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\tString str[] = br.readLine().split(\" \");\\n\tint A = Integer.parseInt(str[0]);\\n\tint B = Integer.parseInt(str[1]);\\n\\n\tif (A > 0 && A < 10 && B > 0 && B < 10)\\n\t    System.out.println(A * B);\\n\telse\\n\t    System.out.println(-1);\\n    }\\n}", "target": "58", "substitutes": {"br": ["obj", "bf", "tr", "ner", "div", "string", "ler", "ref", "err", "bro", "fr", "bc", "io", "orb", "arr", "result", "buf", "er", "reader", "ar", "rb", "gr", "hr", "img", "bb", "iter", "HR", "b", "STR", "cr", "yr", "ber", "res", "sr", "brush", "bs", "stream", "BR", "i", "bridge", "browser", "Br", "r"], "str": ["f", "parse", "list", "ner", "tr", "div", "string", "data", "input", " arr", "stri", "out", "st", "err", "inner", "fr", " Str", "split", "dr", "arr", "text", "sec", "usr", "c", "oct", "er", "tri", "entry", "dec", "read", "wr", "iter", "s", "p", "b", "STR", "strip", "pass", "sr", "char", "sl", "sp", "line", "bytes", "i", "coll", " sr", "star", "Str", "a", "r"], "A": ["SA", "K", "I", "L", "AA", "Java", "PA", "X", "TA", "API", "P", "HA", "H", "AV", "Y", "S", "AB", "As", "EA", "IA", "E", "D", "AP", "DATA", "W", "MA", "Ma", "BA", "CA", "AC", "AU", "C", "T", "U", "Ar", "Alpha", "NA", "UA", "LA", "AR", "mA", "Ha", "Array", "DA", "a", "RA"], "B": ["Other", "G", "I", "Bi", "L", "BB", "File", "DB", "BF", "P", "GB", "Q", "H", "Y", "BS", "AB", "UB", "E", "D", "BU", "BE", "Ab", "AP", "W", "SB", "J", "BI", "F", "MB", "BER", "BL", "V", "EB", "R", "b", "NB", "BA", "C", "T", "U", "WB", "N", "M", "Part", "BR", "Bs", "Ub", "BC", "IB", "O", "OB"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String args[]){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tint C = sc.nextInt();\\n\t\tint D = sc.nextInt();\\n\\n\t\tdo {\\n\t\t\tC = C-B;\\n\t\t\tif(C > 0) {\\n\t\t\t\tA = A-D;\\n\t\t\t}\\n\t\t}while (A > 0 && C > 0);\\n\t\t\t\t\\n\t\tif(A > C) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else{\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t\t\\n\t\tsc.close();\\n\t}\\n}", "target": "186", "substitutes": {"sc": ["class", "parse", "osc", "cont", "exp", "ch", "mc", "nc", "ga", "out", "sche", "sb", "cms", "cli", "cv", "esc", "bc", "cc", "com", "asc", "pc", "ser", "l", "cam", "exec", "ss", "sec", "scope", "anc", "loop", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "ctx", "uc", "zero", "cor", "Sc", "system", "sq", "dc", "con", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "sp", " SC", "sch", "sh", "tc", "parser", "cur", "desc", "coll", "lib", "lc"], "A": ["AW", "G", "SA", "Az", "I", "L", "AA", "PA", "API", "TA", "AD", "P", "HA", "ACE", "Y", "S", "AB", "As", "EA", "IA", "E", "GA", "Ab", "AP", "W", "MA", "Area", "F", "Ma", "BA", "At", "CA", "Ca", "AC", "AF", "T", "AU", "U", "AE", "Ar", "N", "Alpha", "NA", "LA", "Am", "CC", "mA", "Ac", "Array", "Na", "a"], "B": ["G", "I", "L", "Z", "BB", "DB", "CB", "P", "Q", "Y", "S", "AB", "E", "W", "BI", "F", "BA", "V", "R", "b", "T", "U", "WB", "M", "N", "Bs", "BC", "O", "OB"], "C": ["CD", "Code", "G", "K", "I", "JC", "L", "CM", "Cl", "CB", "X", "API", "P", "Q", "H", "FC", "Y", "S", "Con", "E", "c", "SC", "W", "F", "CL", "V", "Cs", "CA", "R", "Ca", "EC", "AC", "T", "CR", "U", "M", "N", "CS", "CV", "Cu", "Can", "CC", "DC", "CU", "BC", "VC", "O"], "D": ["CD", "G", "K", "I", "L", "Z", "DA", "DL", "DB", "X", "AD", "P", "Q", "H", "Y", "S", "E", "d", "DH", "W", "F", "V", "R", "JD", "T", "U", "N", "M", "Ds", "DC", "DD", "O"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tsc.nextLine();\\n\t\tString s = sc.nextLine();\\n\\n\t\tfor (int i = 0; i < s.length(); i++) {\\n\t\t\tif ((int) (s.charAt(i) + n) <= 90) {\\n\t\t\t\tSystem.out.print((char) (s.charAt(i) + n));\\n\t\t\t} else {\\n\t\t\t\t{\\n\t\t\t\t\tSystem.out.print((char) ((s.charAt(i) + n) % 90 + 64));\\n\t\t\t\t}\\n\\n\t\t\t}\\n\\n\t\t}\\n\t}\\n}\\n", "target": "13", "substitutes": {"sc": ["parse", "ner", "osc", "ch", "cont", "mc", " Sc", "nc", "ga", "sb", "sche", "cc", "bc", "esc", "asc", "pc", "ss", "anc", "ca", "SC", "c", "se", "scan", "cs", "sw", "cus", "uc", "com", "cor", "str", "Sc", "system", "sq", "sci", "cr", "sf", "sync", "rc", "cer", "sr", "soc", "sp", "ci", " SC", "cur", "ser", "lc", " scr"], "n": ["f", "ne", "name", "nc", "in", "ni", "number", "m", "l", "nin", "na", "g", "v", "min", "t", "c", "d", "num", "y", "sn", "u", "e", "o", "j", "cn", "p", "un", "b", "x", "ns", "ln", "nb", "en", "w", "N", "pn", "len", "z", "conn", "nu", "an", "nn", "fn", "net", "span"], "s": ["f", "ts", "string", "is", "input", "abs", "sb", "in", "aws", "comments", "sv", "m", "gs", "si", "l", "its", "ss", "S", "ops", "g", "c", "ms", "ls", "fts", "es", "source", "u", "e", "str", "sts", "qs", "xs", "services", "p", "sets", "bis", "blocks", "ns", "opens", "ws", "ans", "bs", "os", "ins", "ks", "strings", "ses", "rs", "gets", "fs", "ds", "a"], "i": ["f", "eni", "li", "fi", "I", "is", "di", "ri", "ni", "ami", "id", "gi", "index", "ai", "io", "ji", "si", "ori", "ui", "phi", "v", "it", "ie", "d", "y", "uri", "pi", "u", "o", "e", "j", "info", "ii", "qi", "p", "hi", "b", "oi", "x", "slice", "abi", "ini", "temp", "z", "ci", "part", "k", "ip", "iu", "xi", "init", "isi", "chi", "ix", "multi", "bi"]}}
{"code": "//Range\\nimport java.util.Scanner;\\n\\nclass Main {\\n    public void cubic() {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int c = sc.nextInt();\\n        \\n        String out = \"No\";\\n        if (a < b) {\\n            if(b < c) {\\n                out = \"Yes\";\\n            }\\n        }\\n                                        \\n        System.out.println(out);\\n    }\\n    \\n    public static void main(String[] args){\\n    new Main().cubic();\\n    }\\n}", "target": "168", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n  private static int solve(int n) {\\n    int count = 0;\\n    while (n > 1) {\\n      n /= 2;\\n      count++;\\n    }\\n    return 1 << count;\\n  }\\n  \\n  private static void execute(ContestReader reader, PrintWriter out) {\\n    int n = reader.nextInt();\\n    out.println(solve(n));\\n  }\\n  \\n  public static void main(String[] args) {\\n    ContestReader reader = new ContestReader(System.in);\\n    PrintWriter out = new PrintWriter(System.out);\\n    execute(reader, out);\\n    out.flush();\\n  }\\n}\\n\\nclass ContestReader {\\n  private BufferedReader reader;\\n  private StringTokenizer tokenizer;\\n  \\n  ContestReader(InputStream in) {\\n    reader = new BufferedReader(new InputStreamReader(in));\\n  }\\n  \\n  public String next() {\\n    while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n      try {\\n        tokenizer = new java.util.StringTokenizer(reader.readLine());\\n      } catch (Exception e) {\\n        throw new RuntimeException(e);\\n      }\\n    }\\n    return tokenizer.nextToken();\\n  }\\n  \\n  public int nextInt() {\\n    return Integer.parseInt(next());\\n  }\\n  \\n  public long nextLong() {\\n    return Long.parseLong(next());\\n  }\\n  \\n  public double nextDouble() {\\n    return Double.parseDouble(next());\\n  }\\n  \\n  public String[] next(int n) {\\n    String[] array = new String[n];\\n    for (int i = 0; i < n; i++) {\\n      array[i] = next();\\n    }\\n    return array;\\n  }\\n  \\n  public int[] nextInt(int n) {\\n    int[] array = new int[n];\\n    for (int i = 0; i < n; i++) {\\n      array[i] = nextInt();\\n    }\\n    return array;\\n  }\\n  \\n  public long[] nextLong(int n) {\\n    long[] array = new long[n];\\n    for (int i = 0; i < n; i++) {\\n      array[i] = nextLong();\\n    }\\n    return array;\\n  }\\n  \\n  public double[] nextDouble(int n) {\\n    double[] array = new double[n];\\n    for (int i = 0; i < n; i++) {\\n      array[i] = nextDouble();\\n    }\\n    return array;\\n  }\\n  \\n  public char[] nextCharArray() {\\n    return next().toCharArray();\\n  }\\n  \\n  public int[][] nextInt(int n, int m) {\\n    int[][] matrix = new int[n][m];\\n    for (int i = 0; i < n; i++) {\\n      for (int j = 0; j < m; j++) {\\n        matrix[i][j] = nextInt();\\n      }\\n    }\\n    return matrix;\\n  }\\n  \\n  public long[][] nextLong(int n, int m) {\\n    long[][] matrix = new long[n][m];\\n    for (int i = 0; i < n; i++) {\\n      for (int j = 0; j < m; j++) {\\n        matrix[i][j] = nextLong();\\n      }\\n    }\\n    return matrix;\\n  }\\n  \\n  public double[][] nextDouble(int n, int m) {\\n    double[][] matrix = new double[n][m];\\n    for (int i = 0; i < n; i++) {\\n      for (int j = 0; j < m; j++) {\\n        matrix[i][j] = nextDouble();\\n      }\\n    }\\n    return matrix;\\n  }\\n  \\n  public char[][] nextCharArray(int n) {\\n    char[][] matrix = new char[n][];\\n    for (int i = 0; i < n; i++) {\\n      matrix[i] = next().toCharArray();\\n    }\\n    return matrix;\\n  }\\n}\\n", "target": "225", "substitutes": {"n": ["f", "nan", "name", "no", "number", "local", "l", "t", "c", "un", "ns", "ln", "en", "enc", "size", "init", "a", "span", "br", "ne", "none", "nc", "nt", "na", "u", "z", "node", "index", "inn", "left", "g", "num", "y", "network", "sn", "ng", "adj", "e", "o", "nat", "cn", "s", "p", "b", "all", "nl", "sync", "N", "nr", "k", "an", "fn", "net", "on", "length", "config", "not", "v", "nos", "d", "x", "nb", "w", "len", "conn", "nu", "coll", "nn", "r"], "count": ["cond", "list", "level", "name", "base", "call", "no", "Count", "length", "id", "code", "number", "index", "key", "limit", "total", "left", "last", "sum", "loop", "c", "num", "max", "weight", "counter", "cache", "depth", "current", "offset", "all", "ind", "child", "start", "len", "col", "z", "size", "test", "old", "parent", "second"], "reader": ["client", "ner", "worker", "oder", "input", "instance", "ler", "context", "container", "err", "ri", "ruby", "inner", "config", "io", "service", "server", "self", "loader", "print", "driver", "loop", "editor", "er", "entry", "per", "pointer", "request", "resource", "read", "re", "buffer", "source", "e", "ry", "counter", "rer", "war", "wrapper", "info", "iter", "system", "this", "url", "rar", "enter", "manager", "row", "reading", "file", "Reader", "or", "rr", "rx", "stream", "writer", "parser", "cur", "right", "handler", "ir", "r"], "out": ["obj", "gen", "list", "client", "comment", "arg", "name", "path", "string", "data", "co", "off", "input", "prefix", "log", "err", "wx", "key", "inner", "io", "report", "exec", "null", "server", "up", "page", "write", "bin", "OUT", "inc", "output", "buffer", "ex", "o", "user", "builder", "str", "point", "cache", "flush", "p", "x", "error", "Out", "w", "file", "sync", "extra", "dump", "again", "temp", "copy", "line", "part", "conn", "writer", "outer", "connection", "outs", "r"], "tokenizer": ["tokenize", "Tokener", "Tokenizer", " tokeniter", "okeniter", "okener", "serialiser", "Tokenizers", " tokenization", "okeniser", "tokeniter", "okenization", "serialize", "tokeniser", "okenizers", " tokeniser", "serializer", "Tokenization", "tokenizers", " tokenizers", "Tokeniser", "Tokenize", "serializers", "Tokeniter", " tokenize", "tokenization", "serialization", "okenizer", " tokener", "serialer", "okenize", "tokener"], "in": ["f", "client", "h", "arg", "name", "path", "data", "is", "input", "lin", "err", "din", "id", "inner", "image", "l", "IN", "inn", "server", "r", "doc", "bin", "d", "request", "query", "resource", "inc", "read", "source", "buffer", "ex", "str", "user", "as", "b", "x", "pass", "file", "ini", "win", "line", "part", "stream", "ins", "connection", "init", "from", "In", "inf", "a", "socket"], "array": ["value", "database", "align", "global", "image", "number", "arr", "message", "book", "app", "area", "form", "vector", "uri", "api", "record", "answer", "back", "hash", "arrow", "view", "cap", "function", "map", "allow", "string", "one", "format", "collection", "account", "option", "address", "union", "air", "cache", "current", "field", "archive", "share", "response", "part", "node", "Array", "instance", "range", "element", "expression", "core", "index", "null", "order", "page", "entry", "section", "row", "file", "action", "host", "pair", "parent", "store", "list", "raw", "data", "container", "group", "config", "integer", "object", "ray", "model", "external", "word", "auto", "error", "var", "coll"], "i": ["f", "eni", "mini", "is", "me", "gu", "gi", "l", "mu", "idi", "c", "uri", "api", "ii", "qi", "oi", "iu", "init", "multi", "a", "h", "di", "ri", "ai", "it", "adi", "u", "field", "hi", "ini", "z", "ci", "mi", "ix", "ki", "bi", "li", "fi", "I", "id", "ji", "ui", "g", "phi", "y", "zi", "e", "o", "ei", "p", "b", "yi", "chi", "my", "q", "ami", "ni", "io", "si", "ori", "v", "ie", "d", "pi", "info", "x", "ic", "abi", "ip", "xi", "r"]}}
{"code": "import java.util.Scanner; \\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner in = new Scanner(System.in);\\n\t\tString line = in.nextLine();\\n\t\tString[] Array = line.split(\" \");\\n\t\tint a = Integer.parseInt(Array[0]);\\n\t\tint b = Integer.parseInt(Array[1]);\\n\t\tint c = Integer.parseInt(Array[2]);\\n\t\tif(a<b&&b<c&&a<c){\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else{\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "168", "substitutes": {"in": ["f", "string", "data", "is", "rt", "input", "out", "lin", "cli", "err", "log", "din", "thin", "m", "inner", "readable", "n", "l", "IN", "inn", "g", "min", "con", "doc", "bin", "reader", "kin", "isin", "inc", "ax", "re", "ex", "this", "str", "s", "as", "ln", "pass", "rin", "file", "ini", "login", "win", "again", "ins", "i", "parser", "init", "connection", "arin", "In", "inf", "r"], "line": ["f", "content", "comment", "name", "cell", "string", "data", "input", "lin", "out", "log", "lines", "code", "shell", "l", "text", "block", "server", "page", "entry", "reader", "array", "inline", "next", "output", "buffer", "Line", "source", "word", "str", "section", "iter", "job", "letter", "row", "nl", "file", "header", "i", "LINE", "r"], "Array": ["Args", "Code", "Package", "Matrix", "Length", "Content", "string", "Index", "Assembly", "Name", "A", "File", "Element", "Section", "Feature", "Info", "JSON", "Amount", "arr", "Block", "Range", "Exception", "Version", "Order", "array", "Union", "Raw", "Format", "Line", "Stage", "Action", "Area", "Row", "Result", "Location", "Word", "Ar", "Zone", "Address", "Value", "Hash", "Average", "angle", "Int", "Group", "Empty", "Parts", "Str", "Number", " array", "r"], "a": ["f", "am", "A", "ab", "ad", "ai", "n", "l", "ac", "ba", "ca", "area", "aa", "asa", "d", "y", "ar", "aj", "va", "u", "e", "o", "af", "aaa", "bb", "auto", "fa", "sa", "p", "as", "x", "au", "ak", "k", "i", "an", "ae", "alpha", "r"], "b": ["f", "obj", "bf", "pb", "h", "base", "sb", "ab", "db", "ad", "bc", "n", "l", "B", "ob", "ba", "fb", "v", "ca", "aa", "d", "y", "mb", "rb", "u", "e", "o", "j", "lb", "pa", "bb", "p", "x", "nb", "cb", "ib", "bs", "bd", "i", "abb", "be", "bi", "eb", "r"], "c": ["f", "xc", "h", "cf", "ab", "cy", "count", "cc", "bc", "n", "l", "ac", "g", "v", "ca", "con", "uc", "d", "y", "cm", "u", "e", "o", "dc", "p", "x", "C", "cb", "w", "q", "cu", "z", "ci", "k", "ct", "i", "ec", "cur", "r"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args){\\n\t\t\\n\t\tScanner num = new Scanner(System.in);\\n\t\t\\n\t\tint a = num.nextInt();\\n\t\tint b = num.nextInt();\\n\t\tif(a == b){\\n\t\t\tSystem.out.println(\"a == b\");\\n\t\t}else if(a > b){\\n\t\t\tSystem.out.println(\"a > b\");\\n\t\t}else if(a < b){\\n\t\t\tSystem.out.println(\"a < b\");\\n\t\t}else{\\n\t\t\tSystem.out.println(\"\u5165\u529b\u306b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\");\\n\t\t}\\n\t}\\n}", "target": "179", "substitutes": {"num": ["f", "mult", "data", "instance", "mon", "out", "proc", "number", "m", "unit", "n", "text", "na", "mu", "g", "gram", "nam", "norm", "con", "r", "sum", "result", "hom", "hum", "NUM", "umber", "gnu", "u", "str", "np", "tu", "iter", "uno", "un", "x", "om", "ru", "nb", "Num", "tun", "util", "umi", "mn", "parser", "uni", "nu", "cur", "ou", "init", "nn", "fn", "um", "net"], "a": ["f", "ama", "am", "ga", "A", "oa", "ma", "ab", "n", "ea", "ac", "l", "na", "ba", "da", "ca", "area", "c", "aa", "asa", "d", "aj", "va", "u", "e", "api", "aaa", "auto", "s", "fa", "sa", "as", "x", "p", "ia", "au", "i", "an", "ae", "alpha", "la"], "b": ["f", "h", "br", "base", "bu", "sb", "bh", "ab", "db", "ub", "bc", "n", "l", "B", "wb", "g", "v", "fb", "ba", "c", "aa", "d", "y", "xb", "rb", "u", "e", "o", "j", "lb", "bb", "s", "p", "x", "nb", "cb", "w", "ib", "z", "i", "be", "body", "bi", "eb"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        String s = sc.next();\\n        String[] sp = s.split(\"\");\\n        String[] al = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\\n        for(int i = 0; i < sp.length; i++) {\\n            for(int j = 0; j < 26; j++) {\\n                if(sp[i].equals(al[j])) {\\n                    if(j+N >=26) {\\n                        System.out.print(al[j+N-26]);\\n                    }else {\\n                        System.out.print(al[j+N]);\\n                    }\\n                    break;\\n                }\\n            }   \\n        }\t\\n        System.out.println(\"\");\\n\t}\\n}", "target": "13", "substitutes": {"sc": ["osc", "ner", "ch", " Sc", "nc", "st", "sche", "sb", "esc", "bc", "cc", "asc", "pc", "ss", "server", "scope", "anc", "SC", "se", "c", "scan", "sw", "cl", "cs", "uc", "Sc", "system", "sq", "sci", "cr", "sf", "sync", "rc", "sr", "sl", " SC", "sch", "sh", "ec", "sem", "ser", " scr"], "N": ["CN", "CNN", "K", "Length", "Len", "I", "L", "Z", "Size", "A", "EN", "Sn", "X", " n", "Node", "Ni", "P", "NS", "H", "GN", "n", "S", "B", "Y", "IN", "ONE", "E", "D", "II", "NL", "J", "F", "V", "R", "NP", "T", "C", "Num", "M", "One", "Ne", "RN", "Ns", "NT", "O", "KN"], "s": ["f", "string", "is", "in", "sv", "m", "params", "n", "si", "l", "service", "S", "ss", "g", "v", "se", "es", "source", "e", "str", "js", "p", "b", "space", "ns", "w", "ps", "sl", "sys", "os", "ins", "ings", "strings", "r"], "sp": ["ph", "jp", "sb", "pl", "sv", "Sp", "sg", "pr", "par", "service", "si", "pre", "py", "tp", "se", "mp", "ar", "xml", "ap", "so", "inc", "spl", "sil", "str", "url", "html", "spr", "lp", "p", "space", "osp", "sf", "ps", "pe", "pp", "vp", "sl", "op", "pal", "sh", "sm", "ip", "SP", "span", "el", "spe"], "al": ["Al", "dal", "cal", "ul", "stal", "ml", "ol", "alist", "align", "fal", "gal", "pl", "sv", "AL", "sal", "aval", "pr", "l", "ass", "v", "aa", "att", "chal", "ar", "xml", "il", "isal", "hal", "als", "ell", "lp", "p", "ale", "letter", "all", "x", "nl", "wal", "ali", "pal", "mal", "ae", "bal", "el", "span"], "i": ["f", "eni", "li", "fi", "jj", "jo", "I", "vi", "jp", "di", "ri", "ni", "id", "key", "m", "index", "gi", "ai", "io", "ji", "n", "si", "ui", "phi", "v", "c", "ie", "d", "y", "zi", "u", "pi", "ii", "qi", "p", "b", "x", "ind", "ini", "z", "ci", "k", "ij", "ip", "xi", "iu", "init", "uni", "ix", "ki", "bi"], "j": ["f", "uj", "li", "obj", "br", "jl", "jj", "jo", "shift", "oj", "jp", "jen", "kj", "di", "ni", "err", "index", "fr", "ji", "n", "si", "dj", "l", "note", "ui", "left", "jc", "v", "g", "end", "ja", "ie", "d", "bj", "y", "aj", "ny", "next", "adj", "u", "e", "J", "js", "ii", "o", "qi", "p", "job", "b", "x", "ind", "je", "z", "ci", "part", "k", "ij", "ix", "jet", "q", "jit"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\\n        String[] line = bufferedReader.readLine().split(\" \");\\n        int A = Integer.parseInt(line[0]);\\n        int B = Integer.parseInt(line[1]);\\n        int H = Integer.parseInt(line[2]);\\n        int M = Integer.parseInt(line[3]);\\n        double radA = Math.PI * (60 * H + M) / (60 * 12) * 2;\\n        double radB = Math.PI * M / 60 * 2;\\n        double C = Math.sqrt(A * A + B * B - 2 * A * B * Math.cos(Math.abs(radA - radB)));\\n        System.out.println(C);\\n    }\\n}\\n", "target": "86", "substitutes": {"bufferedReader": ["buffledR", "buffedWriter", " bufferedWriter", "buffererHeader", "BufferedHeader", " buffledR", "BufferingHeader", "bufferedR", "bufferingWriter", "bufferinger", "BufferingReader", "bufferWriter", "bufferingR", "buffedStream", "buffedR", "bufferedWriter", "bufferingReader", "bufferedStream", "buffledReader", "bufferHeader", "bufferedHeader", " bufferedStream", " buffledWriter", "bufferingStream", " bufferedR", "buffedReader", "Bufferinger", "bufferingHeader", "buffererWriter", "buffledStream", "BufferedReader", " buffledReader", "BufferedWriter", "BufferingWriter", "buffererer", "Buffereder", "buffledWriter", "buffereder", "bufferer", " buffledStream", "buffererReader", "bufferReader"], "line": ["f", "parse", "band", "comment", "side", "cell", "string", "data", "lin", "column", "no", "cle", "log", "group", "id", "lines", "code", "key", "shell", "object", "split", "l", "block", "message", "se", "nice", "page", "cl", "entry", "ge", "inline", "source", "Line", "word", "str", "user", "load", "e", "link", "section", "status", "strip", "row", "pass", "error", "file", "sync", "pe", "response", "header", "definition", "rule", "look", "LINE", "lc", "ine"], "A": ["AW", "G", "SA", "I", "L", "AA", "Java", "PA", "X", "API", "AD", "This", "P", "AL", "HA", "S", "Y", "AB", "As", "EA", "IA", "D", "Ang", "AP", "Offset", "AI", "W", "Ma", "Area", "F", "MA", "V", "CA", "AU", "AF", "An", "AC", "U", "Ar", "Alpha", "AM", "N", "AR", "Am", "LA", "mA", "Array", "AH", "O", "a"], "B": ["G", "I", "L", "BB", "X", "BF", "P", "Q", "Y", "S", "AB", "E", "D", "BE", "Two", "W", "BI", "SB", "MB", "F", "BM", "BA", "V", "R", "b", "NB", "T", "U", "WB", "N", "Bs", "BC", "Number", "O"], "H": ["G", "h", "K", "I", "L", "X", "P", "Q", "Y", "S", "E", "D", "HM", "W", "F", "V", "HH", "HI", "R", "EH", "T", "U", "N", "HS"], "M": ["G", "I", "DM", "L", "Z", "CM", "X", "P", "m", "Y", "S", "MM", "E", "D", "LM", "Man", "MN", "W", "J", "MD", "F", "Ma", "V", "R", "Ms", "MH", "T", "VM", "U", "N", "MS", "O", "RM"], "radA": [" radG", "RadCA", "varS", "radCA", "varA", "RadC", "radC", " radTo", "RadS", "varB", "radiusB", "RadTo", "radiusC", "radiusTo", "RadG", "radTo", "radiusG", "radiusS", "radG", "RadB", " radCA", "radiusCA", "radiusA", "RadA", "varC", "radS"], "radB": ["radY", " radI", "varb", "rangeM", "arcB", "divb", "divBu", "varB", "radiusB", "radBu", "radBB", "arcBu", "radI", "radiusY", "rangeB", " radM", "divBB", "varBB", "radiusM", "arcb", "radb", "rangeY", "divB", "arcBB", "varBu", "radM", "radiusI", "rangeI", " radY"], "C": ["CNN", "G", "Code", "KC", "JC", "L", "Size", " c", "P", "Cache", "CW", "CG", "NC", "CT", "FC", "Con", "SC", "D", "c", "YC", "E", "CF", "CI", "Sc", "CA", "Ca", "CO", "EC", "CV", "CS", "Cu", "GC", "CC", "DC", "CE", "VC", "CD"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tScanner sc = new Scanner(System.in);\\n\\n\tvoid run() {\\n\t\tint n = sc.nextInt();\\n\t\tint[] R = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tR[i] = sc.nextInt();\\n\t\t}\\n\t\tint min = R[0];\\n\t\tint ans = -Integer.MAX_VALUE;\\n\t\tfor (int i = 1; i < n; i++) {\\n\t\t\tans = Math.max(ans, R[i] - min);\\n\t\t\tmin = Math.min(min, R[i]);\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().run();\\n\t}\\n}", "target": "208", "substitutes": {"sc": ["ner", "osc", "ch", " Sc", "nc", "out", "sb", "search", "cv", "esc", "bc", "cc", "pc", "sec", "na", "server", "scope", "cus", "SC", "se", "c", "scan", "cs", "cl", "ctx", "screen", "reader", "uc", "acc", "cor", "Sc", "system", "s", "sq", "sci", "sub", "cr", "src", "sync", "rc", "or", "sp", " SC", "sch", "cur", "coll", "lib", " scr", "r"], "n": ["f", "ne", "nc", "net", "in", "no", "nt", "m", "l", "v", "t", "c", "d", "num", "y", "network", "sn", "u", "e", "o", "j", "s", "p", "un", "b", "x", "ns", "nl", "en", "nb", "ln", "w", "N", "len", "z", "k", "mn", "size", "init", "nn", "fn", "r"], "R": ["G", "K", "Ra", "I", "L", "A", "RR", "Return", "JR", "IR", "X", "Rs", "P", "DR", "Q", "H", "RO", "S", "B", "Y", "RH", "RS", "r", "RT", "D", "Range", "RP", "Res", "Order", "W", "F", "V", "HR", "Run", "T", "C", "U", "CR", "N", "M", "Max", "Right", "SR", "NR", "RN", "MAX", "AR", "BR", "Rh", "Array", "RA", "RM"], "i": ["f", "li", "h", "I", "mini", "di", "in", "ri", "ni", "cli", "id", "gi", "m", "index", "inner", "ai", "io", "si", "l", "ui", "mu", "phi", "v", "it", "c", "ie", "y", "uri", "u", "e", "o", "pi", "j", "info", "ii", "api", "qi", "p", "hi", "ti", "x", "oi", "slice", "abi", "ini", "start", "ci", "mi", "ip", "iu", "init", "xi", "ix", "chi", "multi", "bi", "a", "r"], "min": ["mini", "miss", "is", "ann", "in", "no", "m", "default", "ss", "mins", "Mini", "ax", "size", "average", "init", "skip", "scale", "sign", "a", "span", "val", "ne", "none", "shift", "don", "ai", "pre", "na", "diff", "minus", "ms", "max", "small", "current", "cas", "ini", "sin", "MAX", "part", "MIN", "sort", "range", "mit", "index", " Min", "last", "first", "plan", "Min", "next", "p", "sub", "all", "slice", "mean", "mn", "an", "from", "ana", "on", "div", "ain", "round", "abs", "oa", "ni", "sum", "at", "minimum", "x", "start", "len", "ress", "ins", "lower", "r"], "ans": ["nan", "ANS", "cons", " scans", "none", "ann", "act", "aned", "oa", "anon", "reads", "man", "ons", "annot", "amps", "AN", " means", " max", "anc", "na", "mins", "cs", "ents", "area", "scan", "ms", "max", "lan", "can", "es", "ions", "ids", "rules", "s", "offs", "as", "x", "ns", "atan", "san", "cas", "ants", "ares", "len", "NA", "eps", "mean", "os", "ins", "ana", "ras", "an", "ians", "ars", "a", "span"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tint n = scan.nextInt();\\n\t\tint m = scan.nextInt();\\n\t\tint c = scan.nextInt();\\n\t\tint ans = 0;\\n\t\tint b[] = new int[m];\\n\\n\t\tfor (int i = 0; i < m; i++) {\\n\t\t\tb[i] = scan.nextInt();\\n\t\t}\\n\\n\t\tint num = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tfor (int j = 0; j < m; j++) {\\n\t\t\t\tnum += scan.nextInt() * b[j];\\n\t\t\t}\\n\t\t\tif (num + c > 0)  ans++;\\n\t\t\tnum = 0;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}", "target": "68", "substitutes": {}}
{"code": "\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        int k = sc.nextInt();\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int ad = 0;\\n        int ans = 0;\\n        sc.close();\\n\\n        ad = a;\\n        for(int i=0 ; i<=(b-ad) ; i++){\\n            ans = (a%k==0)?1:0;\\n            if(ans == 1){break;}\\n            a++;\\n        }\\n        if(ans == 1){\\n            System.out.println(\"OK\");\\n        }else{      \\n            System.out.println(\"NG\");\\n        }\\n    }\\n}", "target": "28", "substitutes": {"sc": ["ner", "osc", "ch", "cont", "nc", "sche", "sb", "search", "esc", "bc", "cc", "asc", "pc", "ss", "ca", "SC", "se", "c", "scan", "cs", "uc", "cl", "cus", "sw", "com", "cor", "Sc", "system", "sq", "sci", "row", "cr", "src", "sync", "rc", "cer", "sr", "soc", "ci", "sp", " SC", "sch", "parser", "ec", "cur", "tc", "coll", "sem", "ser", "lc"], "k": ["f", "kid", "K", "ko", "ik", "m", "kick", "kernel", "kn", "n", "ck", "ok", "c", "d", "mk", "u", "e", "o", "j", "unk", "p", "x", "ku", "kk", "ak", "sk", "ky", "work", "ks", "ask", "ke", "ack", "km", "dk", "q", "kw"], "a": ["f", "am", "ga", "A", "ab", "oa", "aid", "ma", "m", "ai", "n", "ac", "aw", "ba", "da", "ca", "area", "c", "aa", "d", "y", "aj", "pa", "va", "e", "o", "af", "p", "as", "x", "sa", "ia", "au", "ak", "z", "ana", "ta", "an", "ae", "ada", "alpha", "la"], "b": ["f", "h", "base", "sb", "ab", "m", "n", "l", "B", "g", "v", "ba", "area", "emb", "aa", "c", "bp", "d", "y", "mb", "pa", "rb", "e", "o", "j", "bb", "p", "x", "nb", "w", "z", "bs", "ada", "body", "fb", "r"], "ad": ["sta", "am", "ann", "A", "ab", "ma", "aid", "az", "id", "ai", "ac", "ass", "ach", "da", "end", "ca", "aa", "c", "ads", "d", "ar", "ax", "mad", "add", "pa", "u", "ady", "af", "bb", "p", "sa", "x", "ud", "ak", "au", "rad", "dd", "z", "pad", "an", "ada", "ae", "alpha", "dk", "od"], "ans": ["ases", "ANS", "ats", "ann", "ga", "arts", "aned", "oa", "aid", "ai", "ays", "ani", "anas", "n", "leans", "annot", "amps", "AN", "acts", "na", "anc", "aces", "ca", "cs", "ents", "nos", "ads", "scan", "can", "lan", "kin", "es", "ions", "nas", "ens", "rules", "bb", "s", "as", "blocks", "x", "books", "ns", "cas", "ants", "sk", "os", "ks", "ins", "parser", "an", "ada", "ars", "ds", "ana", "ons"], "i": ["f", "li", "I", "vi", "di", "ni", "ri", "id", "gi", "m", "ami", "ai", "io", "ji", "n", "si", "ui", "v", "c", "d", "y", "zi", "u", "pi", "e", "j", "o", "ii", "qi", "p", "ti", "oi", "ini", "z", "ci", "ip", "xi", "chi", "ki", "ix", "bi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        MyScanner sc = new MyScanner();\\n\\n        long n = sc.nextLong();\\n\\n        long ans = n-1;\\n        for (int x = 2; x < Math.sqrt(n)+5; x++) {\\n            long y = n / x;\\n\\n            if (x * y == n)\\n                ans = Math.min(x+y-2, ans);\\n        }\\n\\n        System.out.println(ans);\\n    }\\n\\n    static class MyScanner {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in), 1 << 15);\\n        StringTokenizer tokenizer;\\n\\n        String next() {\\n            try {\\n                while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                }\\n            } catch (IOException ignored) {\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n    }\\n}", "target": "157", "substitutes": {"sc": ["osc", "ner", "ch", "mc", "nc", "cv", "cc", "bc", "esc", "asc", "pc", "si", "ss", "na", "anc", "scope", "ca", "SC", "cs", "scan", "c", "uc", "se", "cl", "sw", "acc", "Sc", "sq", "sub", "sci", "cr", "sync", "rc", "cer", "sr", "ci", "sp", "cur", "lc"], "n": ["nan", "f", "names", "h", "ne", "nc", "no", "nt", "ni", "m", "number", "l", "g", "v", "t", "c", "num", "d", "sn", "ny", "u", "e", "o", "j", "s", "p", "b", "ns", "nl", "nb", "en", "w", "N", "len", "z", "k", "i", "an", "nn", "a", "net"], "ans": ["nan", "ANS", " scans", "ats", "is", "ann", "no", "aned", "reads", "ays", "vs", "annot", "amps", "ss", "annels", "AN", "na", "anc", "cs", "ents", "scan", "errors", "can", "lan", "ms", "ls", "ng", "es", "ions", "ids", "ross", "ens", "aus", "xs", "anners", "s", "as", "ln", "ns", "anges", "atan", "ants", "ps", "san", "sk", "eps", "os", "ins", "ks", "an", "ars", "nn", "ds", "ana", "ons"], "x": ["f", "xy", "xc", "on", "h", "lex", "xx", "in", "X", "wx", "id", "m", "index", "xf", "yx", "l", "g", "v", "min", "t", "c", "ww", "tx", "d", "dx", "fx", "ax", "ex", "u", "e", "j", "xs", "s", "p", "b", "w", "pe", "xxx", "rx", "z", "px", "k", "ct", "i", "xi", "ix", "xp", "a"], "y": ["f", "xy", "yo", "h", "wy", "xx", "oy", "ey", "cy", "m", "sy", "ys", "l", "ye", "Y", "t", "c", "d", "vy", "ny", "yt", "u", "e", "ry", "j", "dy", "p", "ly", "yr", "w", "yi", "ya", "ky", "z", "i", "yy", "an", "ix", "ym", "yd"], "reader": ["f", "h", "ner", "keeper", "input", "out", "in", "context", "ri", "image", "inner", "io", "report", "l", "server", "loader", "driver", "er", "entry", "per", "feed", "pointer", "resource", "read", "buffer", "source", "counter", "iter", "system", "b", "row", "file", "reading", "rc", "Reader", "rx", "ro", "stream", "writer", "parser", "i", "lr", "handler", "r"], "tokenizer": ["authoriter", "tokenize", "Tokenizer", "initialization", "initialiser", "Tokener", " tokeniter", " tokenner", "okeniter", "okener", "serialiser", " tokenization", "okeniser", "tokeniter", "okenization", "authoriser", "serialize", "tokeniser", "authorizer", " tokeniser", "serializer", "Tokenization", "Tokenner", "authorization", "initializer", "Tokeniser", "initialize", "tokenner", "Tokenize", "Tokeniter", " tokenize", "tokenization", "serialization", "okenizer", " tokener", "okenner", "okenize", "tokener"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tlong A = scan.nextLong() - 1;\\n\t\tlong B = scan.nextLong();\\n\t\tlong C = scan.nextLong();\\n\t\tlong D = scan.nextLong();\\n\\n\t\tlong tmp = (C * D) / gcd(C, D);\\n\t\tlong n = ((B - (B / C + B / D)) + (B / tmp));\\n\t\tlong m = ((A - (A / C + A / D)) + (A / tmp));\\n\\n\t\tSystem.out.println(n - m);\\n\t}\\n\\n\tstatic long gcd(long a, long b) {\\n\t\tif (b == 0) {\\n\t\t\treturn a;\\n\t\t}\\n\t\ta = a % b;\\n\t\treturn gcd(b, a);\\n\t}\\n}", "target": "9", "substitutes": {"scan": ["gen", "parse", "ner", "skip", "ann", "watch", " scanner", "out", "in", "pan", "fan", "chan", "search", "pin", "ignore", "man", "l", "server", "gram", "se", "cat", "bug", "can", "reader", "kin", "plan", "ban", "query", "read", "connect", "all", "Scan", "ln", "nl", "en", "san", "sync", "sin", "slice", "see", "sc", "ans", "win", "wan", "conn", "an", "walk", "nn", "ser", "clean", "r", "span"], "A": ["App", "G", "Az", "L", "AA", "PA", "X", "AD", "API", "P", "H", "S", "Y", "AB", "As", "And", "E", "Ab", "AP", "Ma", "MA", "F", "V", "At", "CA", "Ca", "All", "T", "An", "U", "AC", "M", "N", "Ar", "Alpha", "AM", "NA", "One", "Part", "LA", "Am", "mA", "alpha", "Na"], "B": ["G", "Tab", "I", "Bi", "L", "Gb", "BB", "Bytes", "DB", "CB", "BF", "X", "P", "Q", "H", "Y", "Block", "E", "Ab", "Two", "W", "F", "BA", "V", "Do", "R", "NB", "T", "U", "WB", "M", "N", "Big", "Part", "DC", "Bs", "Band", "BC", "O", "OB"], "C": ["CD", "CN", "CNN", "G", "K", "I", "L", "CM", "X", "P", "Q", "H", "S", "Y", "E", "c", "CF", "d", "CI", "W", "F", "V", "Cs", "CA", "R", "Ca", "EC", "T", "U", "M", "N", "CS", "CV", "Cu", "Co", "CC", "DC", "CU", "O"], "D": ["CD", "G", "DS", "I", "DM", "L", "Z", "Di", "DB", "DT", "X", "AD", "P", "Q", "H", "Y", "S", "DF", "E", "Dou", "c", "d", "FD", "DI", "W", "F", "V", "Do", "R", "JD", "T", "U", "M", "N", "dd", "Ds", "DC", "ds", "DD", "O"], "tmp": ["nm", "f", "CNN", "data", "sb", "dt", "nt", "number", "v", "t", "c", "MM", "mp", "nn", "cm", "TB", "j", "np", "bb", "mm", "p", "NB", "NN", "cb", "nb", "M", "kk", "DD", "dd", "temp", "size", "cp", "test", "beta", "pad", "now", "alpha", "MP"], "n": ["nm", "f", "nc", "nt", "l", "g", "v", "da", "t", "c", "aa", "d", "num", "y", "sn", "rn", "e", "o", "j", "cn", "dn", "p", "x", "ns", "nb", "en", "N", "M", "len", "z", "mn", "i", "an", "nn", "r"], "m": ["f", "bm", "nm", "h", "mc", "ma", "mx", "l", "g", "v", "c", "d", "mp", "y", "cm", "e", "o", "j", "mm", "dn", "p", "nb", "dm", "M", "N", "md", "z", "mn", "an", "gm", "ym", "r"], "a": ["f", "value", "am", "ga", "abs", "ab", "ad", "ai", "l", "ac", "ea", "na", "da", "ba", "ca", "area", "c", "aa", "d", "aj", "array", "va", "u", "e", "af", "aaa", "aaaa", "fa", "as", "sa", "p", "ia", "au", "mA", "i", "an", "ae", "ada", "alpha", "la"], "b": ["f", "bf", "base", "sb", "ab", "ad", "number", "bc", "bad", "l", "wb", "ob", "g", "v", "ba", "bp", "c", "aa", "bar", "bin", "d", "y", "rb", "u", "e", "o", "j", "lb", "aaa", "bb", "bi", "p", "x", "nb", "w", "ib", "z", "bs", "i", "an", "fb"]}}
{"code": "import java.io.PrintStream;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.LinkedList;\\nimport java.util.Map;\\nimport java.util.Queue;\\nimport java.util.Scanner;\\nimport java.util.Set;\\n\\npublic class Main {\\n\tstatic boolean debug = true;\\n\tstatic Scanner sc = new Scanner(System.in);\\n\\n\tpublic static void main(String[] args) {\\n\t\t// write here\\n\t\tint N=sc.nextInt();\\n\t\tint M=sc.nextInt();\\n\t\tint [] map=new int[N+1];\\n\t\tfor(int i=0;i<M;i++){\\n\t\t\tmap[sc.nextInt()]++;\\n\t\t\tmap[sc.nextInt()]++;\\n\t\t}\\n\t\tfor(int i=1;i<map.length;i++)\\n\t\t\tSystem.out.println(map[i]);\\n\t\t\\n\t}\\n\\n\tprivate static void print(String string) {\\n\t\t// TODO Auto-generated method stub\\n\t\tif (debug)\\n\t\t\tSystem.out.println(string);\\n\t}\\n\\n\tprivate static void print(int[] data) {\\n\t\tif (debug) {\\n\t\t\tfor (int i = 0; i < data.length; i++)\\n\t\t\t\tSystem.out.println(i + \":\" + data[i]);\\n\t\t}\\n\t}\\n\\n\tprivate static void print(String[] data) {\\n\t\tif (debug) {\\n\t\t\tfor (int i = 0; i < data.length; i++)\\n\t\t\t\tSystem.out.println(i + \":\" + data[i]);\\n\t\t}\\n\t}\\n\\n\tprivate static void print(char[] data) {\\n\t\tif (debug) {\\n\t\t\tfor (int i = 0; i < data.length; i++)\\n\t\t\t\tSystem.out.println(i + \":\" + data[i]);\\n\t\t}\\n\t}\\n\\n\tprivate static void print(double[] data) {\\n\t\tif (debug) {\\n\t\t\tfor (int i = 0; i < data.length; i++)\\n\t\t\t\tSystem.out.println(i + \":\" + data[i]);\\n\t\t}\\n\t}\\n\\n\tprivate static void print(int[][] data) {\\n\\n\t\tif (debug) {\\n\t\t\tfor (int i = 0; i < data.length; i++) {\\n\t\t\t\tfor (int j = 0; j < data.length; j++) {\\n\t\t\t\t\tSystem.out.print(i + \" \" + j + \":\" + data[i]);\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println();\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tprivate static void print(char[][] data) {\\n\\n\t\tif (debug) {\\n\t\t\tfor (int i = 0; i < data.length; i++) {\\n\t\t\t\tfor (int j = 0; j < data.length; j++) {\\n\t\t\t\t\tSystem.out.print(i + \" \" + j + \":\" + data[i][j] + \" \");\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println();\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tprivate static void print(String[][] data) {\\n\\n\t\tif (debug) {\\n\t\t\tfor (int i = 0; i < data.length; i++) {\\n\t\t\t\tfor (int j = 0; j < data.length; j++) {\\n\t\t\t\t\tSystem.out.print(i + \" \" + j + \":\" + data[i][j] + \" \");\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println();\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tprivate static void print(double[][] data) {\\n\\n\t\tif (debug) {\\n\t\t\tfor (int i = 0; i < data.length; i++) {\\n\t\t\t\tfor (int j = 0; j < data.length; j++) {\\n\t\t\t\t\tSystem.out.print(i + \" \" + j + \":\" + data[i][j] + \" \");\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println();\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tpublic static void inPutData(char[][] c) {\\n\t\tfor (int i = 0; i < c.length; i++) {\\n\t\t\tc[i] = sc.nextLine().toCharArray();\\n\t\t}\\n\t}\\n\\n}\\n", "target": "57", "substitutes": {"sc": ["osc", "ch", " Sc", "nc", "proc", "bc", " cr", "SC", " rc", "scan", "cs", "sw", "cl", "Sc", "sq", "sci", "cr", "ig", "sel", "sp", " SC", "ct", "sh", " sp", "desc", "cmp", "lc", " scr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tchar[] s = sc.next().toCharArray();\\n\t\tint len = s.length;\\n\t\tchar[] c1 = new char[len];\\n\t\tchar[] c2 = new char[len];\\n\t\tfor (int i = 0; i < len; i = i + 2) {\\n\t\t\tc1[i] = '0';\\n\t\t\tc2[i] = '1';\\n\t\t}\\n\t\tfor (int i = 1; i < len; i = i + 2) {\\n\t\t\tc1[i] = '1';\\n\t\t\tc2[i] = '0';\\n\t\t}\\n\t\tint dif1 = 0, dif2 = 0;\\n\t\tfor (int i = 0; i < len; i++) {\\n\t\t\tif (s[i] != c1[i]) {\\n\t\t\t\tdif1++;\\n\t\t\t}\\n\t\t\tif (s[i] != c2[i]) {\\n\t\t\t\tdif2++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(Math.min(dif1, dif2));\\n\t}\\n}\\n", "target": "146", "substitutes": {"sc": ["f", "osc", "ch", "ner", " Sc", "nc", "out", "search", "esc", "bc", "cc", "pc", "ss", "sec", "server", "scope", "anc", "SC", "c", "scan", "se", "sw", "cl", "uc", "cs", "reader", "spec", "acc", "Sc", "system", "sci", "cr", "src", "sf", "sync", "rc", "sp", " SC", "stream", "sh", "desc", "lc", "r"], "sb": ["gb", " db", "bf", "pb", "BB", "db", "sv", "vd", "bc", "sg", "si", "ss", "gc", "bp", "su", "mb", "rb", "SB", "bb", "sa", "b", " kb", "nb", "cb", "sf", "ws", "bs", "Bs", "SF"], "s": ["f", "h", "letters", "string", "is", "input", "abs", "in", "ssl", "sym", "comments", "sv", "lines", "m", "gs", "south", "n", "si", "l", "S", "ss", "g", "v", "cs", "c", "sites", "d", "words", "y", "spec", "ls", "u", "e", "js", "qs", "services", "sq", "p", "b", "space", "ns", "sync", "sf", "tests", "os", "ins", "ks", "strings", "ses", "rs", "states", "a", "r"], "len": ["f", "li", "list", "val", "Len", "base", "lin", "length", "lu", "lf", "count", "limit", "bl", "kn", "n", "split", "l", "ll", "lan", "pos", "ls", "dl", "il", "lim", "lit", "e", "ld", "loc", "all", "ln", "en", "sl", "z", "line", "size", "part", "fl", "lon", "coll", "lock", "lib", "lc", "el", "span"], "c1": ["c4", "c01", " cOne", "c99", " c51", " c0", "lc01", "f2", "cu2", "cu1", "lc1", "C2", "c101", "p2", "C1", "lc0", "COne", "c0", "c51", " c101", "mc1", "lc5", "mc101", "cu51", " c4", "mc2", "lc101", "p5", "p0", "f1", "lc2", "mc01", " c99", "f51", "C4", " c01", "cOne", " c5", "cu99", "c5", "p1", "lcOne", "f99", "lc4"], "c2": ["sc52", "dctwo", "coll2", "d2", " c0", "h1", " cSecond", "C2", "cSecond", " c7", "c52", "u42", "c7", "hSecond", "cTwo", "sc2", "CSecond", "h2", "c0", "dc1", "ctwo", "collSecond", "C3", "pc2", "dtwo", "pc0", "utwo", "u2", "sctwo", "sc42", "coll7", " ctwo", "htwo", "C0", "pc3", "c42", "d52", " c3", "dc2", "coll1", "dcTwo", " cTwo", "d42", "c3", "u52", "hTwo", "pcSecond", "h7"], "i": ["f", "eni", "fi", "li", "name", "I", "mini", "is", "one", "di", "cli", "ri", "ni", "gi", "id", "m", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "g", "it", "adi", "ie", "y", "uli", "uri", "zi", "u", "pi", "e", "o", "info", "j", "ii", "api", "qi", "p", "ti", "b", "oi", "x", "hi", "slice", "abi", "ini", "start", "yi", "ci", "k", "mi", "iu", "xi", "ip", "init", "ix", "multi", "chi", "bi", "a", "my", "q"], "dif1": ["cdIf2", " dif11", "difi1", "difb", "dIF81", " difer2", "difer2", "dIF3", "difi2", " difb", "dIf81", " diferart", "dif11", "cdif1", "dif81", " diffab", "diferb", "diff11", "dib11", "diffb", "dif3", "difiart", "dib2", "cdif3", "cdIf81", "dtif2", " diff11", " difer1", "dIf3", "diffab", "dtif11", "dtif1", "dtifab", "dIF2", " diff1", "dib1", " diferb", "dIf2", "cdif2", "diffart", "diferart", "dIf1", " diff2", "difib", "difart", "dIF1", "cdIf3", " difab", "difab", "cdif81", "diff2", "diff1", "difer1", "cdIf1", " difart", "diff3", "dibab", "diff81"], "dif2": ["dif62", " diferor", "diffTwo", "dift62", "difer3", "Dif2", " difer2", "dIF3", "difer2", "dife1", " difor", "difer62", "dIFor", "diff62", "dift2", "Dif102", "diferor", "daff1", " difTwo", " difer4", "daff3", "daff2", "dif3", "difor", "Diff102", " dif4", "Dif62", "daffor", "dife62", "daff102", "diff102", "Dif1", "daff62", "difTwo", "Diff1", "dife2", " diff62", "Diff62", "dIF2", " dif62", " diff1", "daff4", "dif102", "difer4", " diffTwo", "difeTwo", " diff2", "dIF4", "diferTwo", "diff2", "diff1", "dift1", "dif4", "difer1", "dift102", " difer3", " dif3", "Diff2"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.awt.*;\\nimport java.awt.geom.*;\\nimport java.math.*;\\nimport java.text.*;\\nimport java.math.BigInteger.*;\\nimport java.util.Arrays; \\n\\npublic class   Main\\n{\\n  BufferedReader in;\\n  StringTokenizer as;\\n  int nums[],nums2[];\\n  int[] nums1[];\\n  boolean con = true;\\n \\n  ArrayList < Integer >  ar = new ArrayList < Integer >();\\n  ArrayList < Integer >  fi = new ArrayList < Integer >();\\n  Map<Integer,Integer > map = new HashMap<Integer, Integer>();\\n  public static void main (String[] args)\\n  {\\n    new Main  ();\\n  }\\n  \\n  public int GCD(int a, int b) {\\n    if (b==0) return a;\\n    return GCD(b,a%b);\\n  }\\n  \\n  \\n  \\n  \\n  \\n  public Main  ()\\n  {\\n    try\\n    {\\n      \\n      in = new BufferedReader (new InputStreamReader (System.in));\\n      int a = nextInt();\\n      int b = nextInt()-1;\\n      String c = nextLine();\\n      System.out.println(c.substring(0,b) + (char)(c.charAt(b)+32) + c.substring(b+1));\\n      \\n    }\\n    catch(IOException e)\\n    {\\n\\n    }\\n  }\\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  String next () throws IOException\\n  {\\n    while (as == null || !as.hasMoreTokens ())\\n    {\\n      as = new StringTokenizer (in.readLine ().trim ());\\n    }\\n    \\n    \\n    return as.nextToken ();\\n  }\\n  \\n  \\n  \\n  long nextLong () throws IOException\\n  {\\n    return Long.parseLong (next ());\\n  }\\n  \\n  \\n  int nextInt () throws IOException\\n  {\\n    return Integer.parseInt (next ());\\n  }\\n  \\n  \\n  double nextDouble () throws IOException\\n  {\\n    return Double.parseDouble (next ());\\n  }\\n  \\n  \\n  String nextLine () throws IOException\\n  {\\n    return in.readLine ().trim ();\\n  }\\n}", "target": "71", "substitutes": {"in": ["f", "h", "rec", "cin", "data", "is", "raw", "input", "out", "lin", "log", "err", "din", "thin", "m", "inner", "id", "pin", "image", "readable", "inas", "n", "l", "nin", "ac", "IN", "inn", "min", "con", "fin", "it", "doc", "bin", "cl", "reader", "kin", "resource", "inc", "serv", "source", "ex", "read", "this", "re", "str", "p", "ic", "src", "rin", "pass", "vin", "ini", "file", "login", "win", "again", "line", "part", "stream", "ins", "conn", "i", "plain", "init", "inet", "In", "gin", "lock", "r"], "as": ["parse", "ts", "am", "is", "AS", "ga", "aws", "ma", "inas", "session", "par", "ac", "ss", "na", "aw", "ass", "As", "cs", "se", "er", "ms", "ap", "per", "use", "es", "ex", "pa", "was", "nas", "pack", "axis", "s", "at", "sa", "p", "isu", "has", "ast", "ps", "var", "asha", "or", "ans", "ws", "with", "acs", "asin", "os", "us", "pas", "parser", "ras", "ask", "rs", "la", "mas", "alias", "an", "ars", "ams", "asm"], "nums": ["bum", "numbers", "Numbers", " num", "bumeric", "bums", " numbers", "Numeric", "Nums", " numeric", "Num", "num", "numeric", "bumbers"], "nums2": ["Nums1", "numps2", "Numbers4", "Nums2", "Nums4", "numps4", "num2", "nums4", "Numbers2", "Numbers1", "numbers1", "num1", "numbers2", "numps1", "num4", "numbers4"], "nums1": ["num3", "numbers9", "nums9", " num2", " num9", " num3", "nodes1", "num2", "numbers3", " nums9", "nodes9", "num1", "numbers2", "nodes2", "nums3", "nodes3", " num1", "numbers1", " nums3", "num9"], "ar": ["arg", "ai", "par", "arr", "ac", "ray", "arity", "cat", "er", "ap", "array", "ra", "at", "sa", "al", "en", "au", "Ar", "acs", "ci", "AR", "os", "art", "rs", "ars", "ir", "r"], "fi": ["fc", "di", "lu", "ni", "fr", "Fi", "si", "nz", "fe", "il", "ii", "fa", "fat", "ig", "abi", "ini", "au", "FI", "acs", "ci", "ics", "fl", "iq", "fo", "fam", "ir", "bi", "fs", "asm"], "map": ["class", "me", "id", "mx", "m", "code", "block", "app", "maps", "master", "type", "ms", "mp", "per", "use", "array", "ge", "cache", "en", "hash", "table", "trace", "pair", "lock", "dict", "module", "MAP"], "a": ["f", "sta", "ama", "base", "am", "ga", "A", "ab", "oa", "ad", "code", "index", "n", "l", "ac", "ea", "na", "da", "ba", "ca", "area", "aa", "d", "y", "aj", "va", "pa", "e", "u", "api", "fa", "p", "sa", "x", "ia", "za", "wa", "mA", "ana", "i", "qa", "an", "ae", "from", "alpha", "la"], "b": ["f", "bf", "pb", "h", "base", "sb", "ab", "db", "length", "number", "bc", "n", "l", "B", "wb", "ob", "g", "v", "ba", "fb", "emb", "bound", "aa", "bar", "bin", "d", "y", "bug", "mb", "rb", "u", "e", "lb", "j", "o", "batch", "bb", "s", "p", "x", "nb", "cb", "w", "ib", "z", "bs", "bd", "k", "ca", "i", "abb", "beta", "be", "body", "end", "bi", "eb", "r"], "c": ["f", "cd", "xc", "h", "cf", "string", "mc", "vc", "co", "nc", "cy", "code", "m", "cc", "esc", "pc", "n", "l", "ac", "g", "ca", "cs", "cat", "d", "chain", "dec", "u", "e", "o", "s", "dc", "p", "C", "cr", "rc", "enc", "cu", "sc", "ci", "line", "ct", "arc", "ec", "i", "cur", "lc", "r"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws NumberFormatException,\\n\t\t\tIOException {\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tbyte min, count = 0, arrayLength = Byte.parseByte(in.readLine());\\n\t\tbyte[] array = new byte[arrayLength];\\n\t\tString[] strData = in.readLine().split(\" \");\\n\t\tfor (int i = 0; i < arrayLength; i++) {\\n\t\t\tarray[i] = Byte.parseByte(strData[i]);\\n\t\t}\\n\t\tfor (byte x = 0; x < arrayLength; x++) {\\n\t\t\tmin = x;\\n\t\t\tfor (byte y = (byte) (x + 1); y < arrayLength; y++) {\\n\t\t\t\tif (array[min] > array[y]) {\\n\t\t\t\t\tmin = y;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif (array[x] > array[min]) {\\n\t\t\t\tbyte temp = array[x];\\n\t\t\t\tarray[x] = array[min];\\n\t\t\t\tarray[min] = temp;\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t\tfor (int j = 0; j < arrayLength; j++) {\\n\t\t\tif (j == arrayLength - 1) {\\n\t\t\t\tSystem.out.println(array[j]);\\n\t\t\t} else {\\n\t\t\t\tSystem.out.print(array[j] + \" \");\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}", "target": "199", "substitutes": {"in": ["f", "on", "h", "rec", "data", "is", "input", "out", "lin", "ssl", "log", "cli", "err", "din", "id", "pin", "inner", "thin", "socket", "image", "readable", "n", "l", "exec", "ac", "IN", "inn", "fin", "con", "c", "bin", "d", "er", "reader", "fe", "kin", "isin", "read", "inc", "serv", "ex", "source", "inside", "url", "s", "as", "b", "rin", "w", "ini", "login", "win", "again", "or", "line", "stream", "ins", "connection", "init", "In", "a", "r"], "min": ["f", "value", "name", "mini", "am", "is", "version", "err", "key", "code", "m", "initial", "area", "mix", "un", "size", "init", "skip", "a", "sign", "span", "val", "none", "shift", "act", "X", "mine", "unit", "pre", "diff", "max", "small", "use", "cm", "u", "ind", "z", "part", "work", "ix", "MIN", "sort", "core", "id", "keep", "index", " Min", "close", "left", "type", "pos", "Min", "e", "s", "p", "mean", "from", "stat", "dim", "n", "v", "only", "model", "fe", "start", "ress", "pm", "partial", "pri"], "count": ["f", "list", "name", "act", "call", "Count", "length", "find", "id", "code", "key", "number", "keep", "low", "index", "n", "total", "close", "last", "sum", "diff", "area", "conf", "c", "type", "num", "max", "weight", "counter", "add", "info", "cache", "p", "ind", "child", "start", "len", "col", "sleep", "z", "size", "work", "other", "test", "found", "coll", "check", "parent", "second"], "arrayLength": ["arraySize", "arrayStart", " arrayLine", "Arraylength", "arrayLine", "areaSize", "ArrayLimit", "areaCount", "arraylength", "stringLen", "arrlength", "ArrayLevel", "ArrayLen", " arrayLen", "arrLine", "stringCount", "arrayLen", "arrayLimit", "areaLen", "rayStart", "elementLength", "elementLevel", "rayLength", "arrayCount", "arrayFamily", "arrayLevel", " arrayHeight", "ArrayHeight", "areaLength", "stringLength", " arraySize", "arrayHeight", "arrHeight", "stringSize", "rayFamily", "elementLen", "rayLen", "arrLen", "stringLimit", "raySize", "arrSize", "stringStart", "stringFamily", "ArrayCount", "arrLength", " arrayStart", " arrayLevel", " arrayFamily", "stringlength", "ArrayLine", "ArrayLength", "ArraySize", " arraylength", "rayLimit", "elementSize"], "array": ["value", "list", "shape", "allow", "database", "string", "base", "data", "instance", "range", "format", "version", "element", "expression", "align", "complex", "group", "throw", "image", "binary", "collection", "number", "index", "integer", "object", "code", "ignore", "arr", "message", "address", "order", "book", "app", "union", "v", "ray", "area", "only", "result", "form", "air", "repeat", "cache", "api", "section", "auto", "audio", "record", "archive", "system", "current", "row", "error", "sample", "answer", "hash", "arrow", "view", "table", "part", "function", "average", "a", "pair", "Array", "distance", "shared"], "strData": ["strText", "strName", " strBody", "StrText", "STRData", "stringArray", "StrData", "strArray", "STRArray", " strText", "strBody", "strLine", "stringData", " strName", " strLine", "STRBody", "stringText", "STRName", "StrName", "StrArray", " strArray", "StrLine", "StrBody", "stringLine"], "i": ["f", "li", "fi", "h", "I", "vi", "is", "di", "ri", "ni", "id", "gi", "key", "index", "ai", "io", "n", "si", "l", "ui", "v", "it", "c", "ie", "zi", "uri", "u", "pi", "o", "e", "info", "ii", "qi", "s", "hi", "p", "ti", "oi", "ini", "ci", "mi", "xi", "ip", "init", "ix", "multi", "bi"], "x": ["f", "xy", "xc", "cross", "h", "lex", "example", "data", "xx", "one", "act", "no", "X", "wx", "id", "key", "code", "index", "cy", "search", "n", "l", "na", "v", "area", "c", "xt", "tx", "d", "max", "pos", "dx", "ax", "ex", "u", "e", "xs", "full", "s", "p", "b", "w", "pe", "xxx", "rx", "z", "sex", "px", "k", "size", "work", "xi", "ix", "a", "xp", "my", "q"], "y": ["f", "xy", "yo", "h", "ch", "fy", "xx", "oy", "ish", "ey", "id", "cy", "key", "sy", "zy", "ys", "n", "l", "ye", "yx", "Y", "py", "v", "t", "c", "d", "vy", "ny", "ay", "u", "ry", "o", "dy", "ii", "ty", "p", "b", "yr", "w", "yi", "iy", "ya", "col", "ky", "z", "hy", "yy", "ym", "q"], "temp": ["f", "tem", " tmp", "div", "wrap", "shift", "base", "local", "stable", "unit", "zip", "pre", "v", "diff", "t", "area", "c", "buffer", "ex", "frac", "cache", "dest", "pack", "Temp", "emp", " temporary", "iter", "p", " Temp", "tmp", "extra", "z", "partial", "fake", "pure", "stuff", "tc", "init", "flat", "get", "parent", "clean"], "j": ["f", "uj", "li", "h", "br", "jj", "jl", "jo", "jp", "out", "length", "key", "code", "index", "m", "ji", "n", "dj", "l", "jc", "v", "t", "ja", "c", "ie", "d", "aj", "u", "adj", "o", "J", "js", "ii", "p", "job", "b", "ind", "w", "je", "col", "z", "k", "size", "ij", "ix", "jet", "q"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  private static char[] op1 = { '+', '+', '+', '+', '-', '-', '-', '-' };\\n  private static char[] op2 = { '+', '+', '-', '-', '+', '+', '-', '-' };\\n  private static char[] op3 = { '+', '-', '+', '-', '+', '-', '+', '-' };\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    char[] n = sc.next().toCharArray();\\n    int A = n[0] - '0';\\n    int B = n[1] - '0';\\n    int C = n[2] - '0';\\n    int D = n[3] - '0';\\n    for (int i = 0; i < 8; i++) {\\n      int sum = A;\\n      if (op1[i] == '+') {\\n        sum += B;\\n      } else {\\n        sum -= B;\\n      }\\n      if (op2[i] == '+') {\\n        sum += C;\\n      } else {\\n        sum -= C;\\n      }\\n      if (op3[i] == '+') {\\n        sum += D;\\n      } else {\\n        sum -= D;\\n      }\\n      if (sum == 7) {\\n        System.out.println(\"\"+A+op1[i]+B+op2[i]+C+op3[i]+D+\"=7\");\\n        return;\\n      }\\n    }\\n  }\\n}", "target": "152", "substitutes": {"op1": ["oper01", " opA", "optA", "opt1", "OpA", "Op1", "op01", "Op3", "oper2", "operA", "Op01", "oper1", "oper3", "Op2", "opt3", "opt2", "opA", " op01"], "op2": ["opTwo", "opp2", " op4", "OPTwo", "copTwo", "OP4", " op02", "copB", " opTwo", "opp02", "hopTwo", "cop2", "cop3", "opB", "OpB", "op4", "opp5", "Op3", "OP2", "op5", "hop4", "oppTwo", "Op4", "cop4", "cop02", "cop5", "OP02", "op02", " opB", "Op2", " op5", "hop02", "hop2"], "op3": ["hop5", " opThird", "Opthree", "opThird", "Op6", "cop53", "copThree", " opthree", "cop3", "ip2", "OP53", "ip3", "OPThree", "OP3", "hop53", "OP5", "op6", "Op3", "oper2", "ip1", "op5", "operThird", "hop3", "oper1", "OPthree", " op6", "cop5", "opthree", "ipThird", "oper3", "Op2", "opThree", "OP6", "op53", "hopThree", "OP2"], "sc": ["ner", "osc", "mc", " Sc", "nc", "nt", "iss", "esc", "bc", "pc", "si", "ss", "sec", "scope", "anc", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "Sc", "dc", "sub", "sci", "cr", "src", "rc", "cer", "sr", "sp", "ci", " SC", "sch", "sh", "cur", "desc", "ser", " scr", "r"], "n": ["f", "nd", "names", "ner", "ne", "ann", "no", "in", "m", "non", "l", "na", "v", "t", "r", "c", "d", "network", "y", "sn", "u", "e", "o", "j", "nw", "np", "s", "p", "b", "x", "ns", "en", "w", "N", "z", "k", "conn", "an", "node", "nn", "fn", "a", "net"], "A": ["O", "G", "SA", "AT", "K", "I", "AA", "Input", "PA", "X", "API", "TA", "AL", "P", "H", "HA", "S", "Y", "As", "IA", "E", "AP", "ACT", "MA", "At", "CA", "Ca", "AC", "T", "U", "N", "Ar", "Alpha", "AM", "LA", "AR", "Ac", "Array", "AY", "AH", "Na", "a", "Sum"], "B": ["Both", "G", "I", "Bi", "L", "BB", "BD", "DB", "CB", "BF", "X", "P", "GB", "Q", "H", "Y", "AB", "UB", "E", "BE", "Two", "TB", "W", "BI", "SB", "LB", "EB", "MB", "BA", "F", "R", "b", "NB", "T", "RB", "WB", "M", "N", "Bs", "BC", "Bu", "O", "OB"], "C": ["CD", "Code", "G", "I", "L", "CM", "Cl", "X", "P", "Q", "S", "Y", "E", "c", "SC", "CF", "CI", "W", "F", "CL", "V", "Cs", "CA", "R", "EC", "AC", "T", "CR", "U", "N", "M", "Co", "CS", "CC", "DC", "CE", "CU", "BC", "O"], "D": ["CD", "G", "DS", "I", "DM", "L", "Z", "DA", "DB", "DT", "X", "P", "DR", "Q", "DO", "Y", "S", "DF", "DE", "E", "d", "DH", "DI", "W", "J", "F", "V", "Do", "R", "T", "DP", "U", "N", "M", "Ds", "DC", "DD", "O"], "i": ["f", "eni", "li", "fi", "h", "I", "is", "di", "iv", "ri", "gu", "cli", "id", "gi", "code", "index", "key", "ai", "ni", "io", "ji", "si", "l", "ui", "v", "it", "c", "ie", "d", "y", "uli", "zi", "uri", "source", "u", "pi", "o", "e", "j", "info", "ii", "qi", "at", "p", "ti", "b", "x", "hi", "oi", "slice", "ini", "yi", "ci", "k", "mi", "ip", "iu", "xi", "ij", "init", "chi", "ix", "multi", "bi", "a"], "sum": ["cal", "miss", "mass", "call", "count", "key", "seed", "cost", "total", "ss", "norm", "mix", "member", "hash", "size", "cap", "average", "skip", "scale", "sign", "comment", "fail", "match", "unit", "ums", "diff", "style", "doc", "cat", "max", "use", "dot", "weight", "cache", "sp", "fill", "loss", "fee", "alpha", "summary", "out", "mit", "cum", "index", "ass", "up", "num", "empty", "su", "add", "mm", "s", "mean", "sh", "SI", "vol", "net", "Sum", "parse", "dim", "ul", "si", "oct", "result", "zero", "info", "user", "fat", "pass", "error", "len", "op", "mem", "us", "rank", "um"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\npublic static void main(String[] args) {\\n\t\t\\n\t\tScanner keyboard = new Scanner(System.in); \\n\t\t\\n\t\tString S = keyboard.next();\\n\t\t\\n\t\tString[] tile = S.split(\"\");\\n\t\t\\n\t\tString Start = tile[0];\\n\t\tint countG = 0;\\n\t\tint countK = 0;\\n\t\t\\n\t\t\tfor (int g = 0; g < tile.length; g = g+2) {\\n\t\t\t\t if (tile[g].equals(Start)) {\\n\t\t\t\t\t countK ++;\\n\t\t\t\t }else {\\n\t\t\t\t\t countG ++;\\n\t\t\t\t }\\n\t\t\t\t \tif (g != tile.length - 1) {\\n\t\t\t\t \t\tint k = g + 1;\\n\t\t\t\t if (tile[k].equals(Start)) {\\n\t\t\t\t\t countG ++;\\n\t\t\t\t \t}else{\\n\t\t\t\t\t countK ++;\\n\t\t\t\t \t\t}\\n\t\t\t\t \t}\\n\t\t\t}\\n\t\t\t\\n\t\t\tint kotae = 0;\\n\t\t\t\\n\t\t\tkotae = countG < countK ? countG : countK;\\n\t\t\\n\t\tSystem.out.println(kotae);\\n\t\tkeyboard.close();\\n\t}\\n}", "target": "146", "substitutes": {"keyboard": [" keyflow", "keyline", "scanboy", "keyboy", " keyback", "scanboard", "skyboy", "rowboards", "kboards", "rowflow", "keyflow", "toolboy", "rowback", "kboard", "skyline", "scanline", "scanboards", "keyboards", "scanflow", "readerboard", "readerBoard", "scanback", "keyBoard", "kscan", "keyword", "keyback", "readerscan", "toolword", "rowboard", "skyboard", " keyBoard", "readerboards", "toolline", "kBoard", " keyboards", "toolboard", "keyscan", "skyword", "scanword", " keyscan"], "S": ["G", "SA", "I", "L", "Si", "SK", "Socket", "SO", "P", "SN", "NS", "SAM", "Y", "B", "SC", "ST", "Su", "F", "V", "s", "IS", "R", "STR", "T", "SS", "C", "U", "SE", "N", "M", "CS", "SU", "SR", "Sl", "GS", "SI", "O"], "tile": ["fit", "shape", "ele", "scene", "component", "string", "cell", "transfer", "token", "task", "match", "pose", "live", "image", "key", "unit", "texture", "split", "zip", "text", "ole", "address", "phy", "style", "ie", "layer", "project", "tri", "site", "use", "ge", "Tile", "source", "uri", "square", "word", "info", "late", "so", "plate", "game", "song", "lat", "suit", "strip", "T", "sample", "file", "slice", "start", "grid", "tip", "sk", "col", "fill", "header", "line", "plane", "rule", "size", "test", "pixel", "flat", "feature", "stone", "tag", "scale", "sequence"], "Start": [" Origin", "Fill", "Token", "Length", "I", "Id", "Source", "St", "Name", "Mid", "Stop", "End", "Input", "P", "Before", "Sync", "Finish", " START", "New", "Type", "Origin", "Title", "Range", "Char", "Tag", "Position", " start", "Seg", "Tile", "Star", "Line", "Format", "Work", "Rest", "Host", "Use", "Starting", "Base", "start", "First", "Key", "Text", "Same", "Part", "Group", "Empty", "From", "Str", "Info"], "countG": ["countC", "meanV", "catchK", "catchGe", "caseK", "CountC", "meanG", "countg", " countGA", "countGS", "Countg", "meang", "sumG", "countGB", "sumC", "CountGB", "CountV", "intG", "caseG", "catchGD", " countGD", " countg", "caseGB", " countGS", "intGD", "countGA", "meanGS", "caseg", "CountG", "countGD", "CountK", "catchG", " countC", "countGe", "sumK", "intGe", " countGB", "CountGA", "sumGA", "countV", "CountGS", " countV", "sumGS", " countGe", "intK"], "countK": ["basek", "countE", "countSK", "countSk", "baseK", "catchK", "CountN", " countN", "codeE", "CountE", "countDK", "currentG", " countE", "childG", "baseDK", "sumG", "childK", "currentN", "countN", "childk", "baseG", "currentK", "childDK", " countk", "codeK", "catchN", "CountG", "codeN", "CountK", " countDK", "catchG", "sumSK", "currentSK", " countSK", "countk", " countSk", "codeG", "sumK", "Countk", "catchk", "sumSk", "currentk", "currentSk"], "g": ["f", "gb", "gen", "G", "h", "cfg", "rg", "eg", "og", "ga", "mg", "group", "gu", "gi", "gs", "gy", "m", "sg", "n", "l", "erg", "gc", "v", "vg", "c", "gp", "pg", "d", "y", "eng", "ge", "ng", "u", "e", "gl", "gr", "game", "j", "s", "p", "b", "x", "ig", "msg", "w", "q", "gh", "go", "gd", "yg", "gru", "i", "gm", "bg", "gg", "gn"], "k": ["f", "h", "kid", "K", "uk", "ik", "ek", "key", "kick", "n", "l", "ck", "tk", "kg", "v", "ok", "r", "c", "mk", "d", "y", "kin", "kh", "u", "e", "j", "unk", "p", "b", "ku", "sk", "gh", "z", "work", "ks", "i", "ke", "dk", "q", "kw"], "kotae": [" kot\u00e4", "kopoe", "kopae", "kootae", " kott\u00e4", "skotta", " kottaba", "kopee", " kottee", "koza", "kotta", "kottao", "skotea", "skotae", " kotoe", "kootao", "kottea", "kootea", "kotsaba", "kokae", "kottee", "kokoe", "skottae", "kotsae", "koota", "kotsee", "kotoe", " kotaba", "kokee", " kottoe", "kop\u00e4", " kottae", "kontae", "skota", "skottea", "kott\u00e4", "kotee", " kotee", "kot\u00e4", "kotaba", "kozae", "kozao", "skottao", "skotao", "kotea", "kontoe", "kottae", "kontee", "kont\u00e4", "kotao", "kokaba", "kota", "kotsoe", "kottoe", "kozea", "kottaba"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args)throws Exception {\\n\\n        /*\\n         * \uff21\u5927\u5b66\u306f\uff11\u30d5\u30ed\u30a2\uff11\uff10\u90e8\u5c4b\u3001\\n         * \uff13\u968e\u5efa\u3066\u306e\u516c\u820e\uff14\u68df\u3092\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\u516c\u820e\u306e\u5165\u5c45\u30fb\u9000\u53bb\u306e\u60c5\u5831\u3092\u8aad\u307f\u8fbc\u307f\u3001\u5404\u90e8\u5c4b\u306e\u5165\u5c45\u8005\u6570\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u4e0b\u3055\u3044\u3002\\n         * \\n         * n\u4ef6\u306e\u60c5\u5831\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u5404\u60c5\u5831\u3067\u306f\u3001\uff14\u3064\u306e\u6574\u6570b, f, r,\\n         * v\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001b\u68dff\u968e\u306er\u756a\u76ee\u306e\u90e8\u5c4b\u306bv\u4eba\u304c\u8ffd\u52a0\u3067\u5165\u5c45\u3057\u305f\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002v\u304c\u8ca0\u306e\u5024\u306e\u5834\u5408\u3001v\u4eba\u9000\u53bb\u3057\u305f\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\\n         * \\n         * \u6700\u521d\u3001\u5168\u3066\u306e\u90e8\u5c4b\u306b\u306f\u8ab0\u3082\u5165\u5c45\u3057\u3066\u3044\u306a\u3044\u3082\u306e\u3068\u3057\u307e\u3059\u3002 \u6700\u521d\u306e\u884c\u306b\u60c5\u5831\u306e\u6570 n \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\\n         * \\n         * \u7d9a\u3044\u3066 n \u4ef6\u306e\u60c5\u5831\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u5404\u60c5\u5831\u306b\u306f\uff14\u3064\u306e\u6574\u6570 b, f, r, v \u304c\u7a7a\u767d\u533a\u5207\u308a\u3067\uff11\u884c\u306b\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\\n         */\\n        int[][][] array_House = new int[4][3][10];\\n\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        for (int x = 0; x < n; x++) {\\n            int b = sc.nextInt() - 1;\\n            int f = sc.nextInt() - 1;\\n            int r = sc.nextInt() - 1;\\n            int v = sc.nextInt();\\n            if(array_House[b][f][r] + v > 9){\\n                array_House[b][f][r] = 9;\\n            }else if(array_House[b][f][r] < 0){\\n                array_House[b][f][r] = 0;\\n            }else{\\n                array_House[b][f][r] += v;\\n            }\\n        }\\n        sc.close();\\n\\n        for (int i = 0; i < array_House.length; i++) {\\n            for (int j = 0; j < array_House[i].length; j++) {\\n                for (int j2 = 0; j2 < array_House[i][j].length; j2++) {\\n\\n                    System.out.print(\" \" + array_House[i][j][j2]);\\n\\n                }\\n                System.out.println();\\n            }\\n            if (i < array_House.length - 1) {\\n                System.out.println(\"####################\");\\n            }\\n        }\\n\\n    }\\n}", "target": "211", "substitutes": {"array_House": ["arrayDataHome", "arrayDataPower", "Array_House", "arrayDataRoom", " array_China", "array_Unit", " array_Block", "arrayOfBox", "rayNameHouse", "array_Condition", "arrayWorkHouse", "arrayWorkhouse", "arrayDataUnit", "array_Home", "array_house", " array_Power", "arrayWorkStation", "arrayLoghouse", "Array_house", "ray_house", "arrayRealPower", "array_Memory", "arrayOfHouse", "string_House", "array_Power", " arrayDataUnit", "arrayRealHouse", "array_China", "arrayWorkPower", "arrayLogHouse", "ray_Room", " arrayData58", "arrayOfUnit", "arrayAreaHouse", "arrayWorkStreet", "arrayDataHouse", " array_house", "arrayData58", "arrayDatahouse", "arrayNameHouse", " array_Home", "rayNameRoom", "arrayReal58", "array_58", "array_Block", "arrayOfhouse", " arrayDataPower", "array_Year", "arrayNameRoom", "arrayRealStreet", "arrayOfFrame", "array_Frame", " array_58", "arrayLogYear", "array_Box", "string_Condition", "string_house", "string_Block", "Array_Block", "rayNameHome", "stringOfCondition", "string_Night", " arrayDatahouse", "arrayDataStreet", " array_Unit", " array_Street", "array_Night", "arrayAreahouse", "arrayOfBlock", "arrayAreaCondition", "string_Box", "arrayNamehouse", "array_Street", "Array_Frame", "arrayOfNight", "arrayOfCondition", "array_Station", " arrayDataStreet", "arrayNameHome", "arrayLogChina", "ray_Home", "arrayDataBlock", "arrayWork58", "stringOfhouse", "stringOfBlock", "ray_House", "rayNamehouse", "stringOfHouse", "stringOfBox", " arrayDataHouse", " array_Memory", " array_Year", "array_Room", "arrayAreaBox", "Array_Station"], "sc": ["parse", "ner", "ch", "osc", "cont", "exp", "mc", "nc", "ga", "sche", "sb", "cms", "cli", "core", "cv", "cc", "bc", "esc", "asc", "pc", "l", "cam", "ss", "sec", "server", "anc", "scope", "gc", "cus", "SC", "se", "c", "scan", "cs", "sw", "cl", "uc", "ca", "can", "ctx", "cor", "Sc", "system", "sq", "dc", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "soc", "sys", "sp", "ci", "sch", "sh", "tc", "cur", "sem", "ser", "lc"], "n": ["h", "ner", "nc", "in", "m", "l", "t", "c", "d", "num", "y", "network", "u", "e", "o", "s", "p", "ns", "nb", "w", "N", "z", "k", "nn", "q", "net"], "x": ["h", "ph", "xx", "in", "X", "id", "index", "t", "c", "xt", "tx", "d", "num", "y", "max", "dx", "fx", "ax", "ex", "u", "e", "o", "dy", "xs", "p", "w", "rx", "z", "k", "xi", "ix", "xp", "q"], "b": ["bf", "h", "br", "base", "sb", "ab", "db", "m", "l", "B", "g", "t", "c", "d", "y", "rb", "u", "e", "o", "info", "bb", "auto", "s", "p", "nb", "w", "q", "or", "z", "bs", "k", "body", "bi", "a"], "f": ["bf", "h", "br", "family", "ef", "range", "err", "m", "fr", "l", "g", "t", "c", "d", "er", "y", "ar", "fe", "rb", "u", "e", "o", "ur", "F", "field", "s", "p", "w", "or", "z", "rf", "k", "fl", "a", "ir", "q"], "r": ["tr", "h", "br", "rt", "err", "m", "fr", "pr", "l", "g", "t", "c", "d", "er", "y", "ar", "re", "rb", "u", "e", "o", "ur", "hr", "p", "R", "row", "rar", "cr", "ru", "rh", "w", "rc", "yr", "sr", "or", "rr", "z", "nr", "rf", "k", "rd", "right", "ir", "q"], "v": ["value", "val", "h", "vol", "vi", "iv", "vv", "sv", "m", "vs", "ver", "l", "g", "lv", "t", "c", "d", "y", "uv", "va", "u", "e", "o", "V", "p", "ve", "w", "vin", "z", "k", "q"], "i": ["eni", "li", "I", "vi", "mini", "is", "di", "in", "ri", "ni", "ik", "gi", "key", "id", "index", "ai", "io", "ani", "ji", "si", "l", "ori", "ui", "c", "ie", "y", "zi", "uri", "u", "e", "pi", "info", "api", "ii", "qi", "p", "ti", "ind", "ini", "yi", "z", "ci", "part", "k", "mi", "xi", "iu", "ip", "init", "ix", "multi", "bi", "a"], "j": ["uj", "li", "obj", "h", "jl", "br", "jj", "jo", "ch", "vi", "oj", "is", "jp", "ik", "key", "m", "fr", "pr", "ji", "si", "l", "dj", "jc", "g", "it", "ja", "c", "ie", "d", "bj", "y", "aj", "u", "e", "J", "js", "ii", "qi", "p", "job", "z", "k", "ij", "q"], "j2": ["j8", " j62", "job62", "b4", "jpTwo", "jotwo", "jtwo", " j8", "j6", " j5", "jp2", "job2", "jl2", "job0", "i2", "uj2", "ja0", "jo2", "j62", "ujTwo", " j0", "jlTwo", "jl5", "itwo", "j0", "j5", " j6", "i1", "bTwo", "jo1", "ja2", "ja62", " j1", " jTwo", "b6", "j1", "uj6", " jtwo", "jp5", "b2", " j4", "j4", "jTwo", "ja8", "uj4", "job8"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tint a;\\n\t\tint b;\\n\t\tint c;\\n\t\tScanner sc = new Scanner(System.in);\\n\t\ta = sc.nextInt();\\n\t\tb = sc.nextInt();\\n\t\tc = sc.nextInt();\\n\t\tsc.close();\\n\\n\t\tint ret = c - ( a - b );\\n\t\tif(ret < 0) {\\n\t\t\tret = 0;\\n\t\t}\\n\t\tSystem.out.println(ret);\\n\\n\t}\\n\\n}\\n", "target": "45", "substitutes": {"a": ["f", "ama", "am", "ga", "A", "ab", "ad", "count", "index", "ai", "n", "ea", "ac", "l", "ba", "da", "area", "ca", "aa", "asa", "y", "aj", "va", "pa", "u", "af", "api", "aaa", "s", "fa", "sa", "p", "as", "au", "qa", "i", "an", "ada", "ae", "alpha", "la"], "b": ["f", "bf", "pb", "base", "A", "sb", "ab", "db", "ad", "count", "bc", "n", "l", "ac", "B", "wb", "ob", "ba", "g", "ca", "area", "aa", "d", "y", "mb", "rb", "u", "e", "lb", "pa", "bb", "p", "x", "cb", "bs", "bd", "i", "abb", "beta", "eb", "be", "bi", "fb", "r"], "c": ["f", "h", "fc", "cf", "ab", "ad", "cy", "count", "m", "cc", "bc", "pc", "n", "unc", "l", "ac", "v", "ca", "end", "uc", "d", "y", "cm", "u", "e", "s", "dc", "p", "x", "C", "cr", "q", "cu", "col", "z", "ci", "k", "i", "ec", "cur", "lc", "r"], "sc": ["parse", "ner", "ch", "osc", "cont", "nc", "console", "sche", "sb", "core", "cv", "search", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "scope", "ca", "SC", "se", "scan", "uc", "sw", "cs", "cl", "com", "ctx", "acc", "Sc", "system", "sq", "sci", "cr", "src", "sf", "rc", "cer", "enc", "sr", "soc", "sl", "ci", "sp", " SC", "sh", "ec", "tc", "cur", "coll", "ser", "lc"], "ret": ["f", "valid", "det", "val", "bf", "RET", "arg", "fit", "exit", "rt", "out", "token", "nt", "ref", "match", "gt", "inter", "rev", "success", "result", "xt", "att", "cat", "num", "ext", "bit", "ft", "re", "fun", "lit", "et", "section", "iter", "offset", "flag", "error", "rets", "len", "rot", "alt", "rf", "ct", "lt", "flat", "vert", "feat", "Ret", "std", "continue", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt(), X = sc.nextInt();\\n    int[] L = new int[N];\\n    for (int i = 0; i < N; i++) L[i] = sc.nextInt();\\n\\n    int ans = 1;\\n    for (int i = 0, sum = 0; i < N; i++) {\\n      sum += L[i];\\n      if (sum <= X) ans++;\\n      else break;\\n    }\\n    System.out.println(ans);\\n  }\\n}", "target": "130", "substitutes": {"sc": ["class", "ner", "osc", "ch", "cont", " Sc", "nc", "out", "sche", "sb", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "server", "scope", "anc", "cus", "SC", "se", "c", "scan", "cs", "cl", "uc", "sw", "Sc", "loc", "system", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "soc", "sp", " SC", "ct", "sch", "sh", "ec", "tc", "cur", "ser", "lc", " scr"], "N": ["NE", "G", "K", "Len", "I", "Z", "Size", " n", "Ni", "P", "Q", "NS", "H", "n", "NC", "S", "Y", "E", "D", "NL", "F", "V", "R", "NB", "NN", "T", "C", "U", "Num", "M", "NA", "Ne", "Part", "Ns", "NT", "O", "KN", "Sum"], "X": ["K", "Length", "I", "Z", "XL", "Size", "Width", "P", "Q", "NS", "H", "S", "Y", "D", "NUM", "Weight", "Work", "J", "F", "CL", "V", "XP", "IX", "xs", "IS", "x", "C", "U", "M", "Max", "XXX", "Cross", "Total", "XX", "Number"], "L": ["O", "G", "LT", "EL", "K", "Len", "I", "Z", "XL", "DL", "P", "Q", "H", "l", "S", "UL", "Lu", "E", "D", "Li", "Lo", "LM", "NL", "W", "SL", "LR", "LB", "LS", "ML", "CL", "BL", "V", "F", "R", "LI", "T", "PL", "LL", "U", "C", "M", "IL", "LA", "dL", "LU"], "i": ["f", "li", "fi", "I", "mini", "is", "di", "in", "ri", "ni", "id", "gi", "count", "index", "inner", "ai", "m", "io", "n", "si", "l", "ui", "mu", "phi", "v", "it", "ie", "y", "uri", "zi", "u", "e", "o", "pi", "j", "info", "ii", "qi", "ti", "hi", "b", "x", "oi", "p", "slice", "ini", "start", "z", "ci", "part", "mi", "ip", "xi", "init", "ix", "chi", "multi", "bi", "a"], "ans": [" sums", "ations", "ANS", " scans", "ats", "ann", "A", "alls", "oss", "act", "lines", "reads", "parts", "ays", "ons", "amps", "AN", " means", "S", "na", "ss", "ums", "ops", "acts", "cs", "ents", "scan", "can", "plan", "lan", "ls", "es", "ions", "Sum", "ids", "actions", "s", "as", "blocks", "ns", "ants", "sk", " spans", "results", "acs", "eps", "mean", "os", "ins", "ks", "an", "outs", "ars", "cases", "Na", "span"], "sum": ["parse", "sim", "skip", "sam", "cal", "miss", "summary", "am", "out", "mass", "cum", "count", "index", "cost", "n", "si", "total", "ass", "ums", "min", "c", "num", "max", "su", "use", "weight", "u", "pack", "av", "s", "p", "sa", "sub", "x", "all", "fat", "pass", "stack", "mask", "scale", "sk", "mem", "mean", "size", "spread", "average", "alpha", "span", "um", "sign", "Sum"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString str1 = sc.nextLine();\\n\t\tString str2 = sc.nextLine();\\n\t\tsc.close();\\n\t\tboolean flug = false;\\n\t\t\\n\t\tfor(int i=0; i<str1.length(); i++) {\\n\t\t\tif(str1.equals(str2)) {\\n\t\t\t\tflug = true;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tstr2 = str2.substring(str2.length()-1) + str2.substring(0, str2.length()-1);\\n\t\t}\\n\t\t\\n\t\tif(flug) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n      \\n\t}\\n}", "target": "220", "substitutes": {"sc": ["ner", "osc", "ch", "fc", "mc", " Sc", "nc", "sb", "cms", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "server", "anc", "ca", "SC", "se", "c", "scan", "cs", "sw", "uc", "cus", "ctx", "reader", "cm", "str", "Sc", "system", "sq", "sub", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "soc", "sp", " SC", "sch", "sh", "ec", "tc", "cur", "lc"], "str1": ["int01", "int2", " strfirst", " strFirst", "Str2", "int1", "str0", "int0", "Strfirst", "cr5", "Str01", "Str8", " str8", "str5", "str01", "string8", " str0", "string2", " str01", "strFirst", "strfirst", "cr2", "string1", "Str0", "Str1", "Str5", " str5", "cr1", "StrFirst", "crfirst", "stringFirst", "str8"], "str2": ["int2", "dr2", "drB", " strtwo", " strB", " strSecond", "err1", "stringtwo", "Str3", "iter1", "strsecond", "errtwo", "dr5", "strSecond", "Str2", "int5", "drtwo", "str0", " str8", "Str8", " str7", "st7", "str5", "err0", "StrSecond", "stri2", "stri1", " str0", "string2", "st1", "stri3", "Strtwo", "stri0", "Str7", "string0", "string1", "stringSecond", " str3", "inttwo", "Str0", "intB", " strsecond", "Str1", "err3", "itertwo", " str5", "st2", "str7", "stsecond", "strB", "iter8", "err2", "Strsecond", "iter2", "strtwo", "str3", "str8"], "i": ["f", "li", "fi", "h", "I", "di", "in", "ri", "length", "ni", "id", "count", "gi", "index", "ai", "io", "ji", "si", "ui", "mu", "phi", "v", "it", "t", "c", "zi", "uri", "u", "pi", "o", "j", "info", "ii", "qi", "ti", "p", "b", "x", "oi", "hi", "ini", "start", "ci", "k", "iu", "xi", "chi", "multi", "bi"], "flug": ["plur", "fluug", "fugs", "flur", "fluuge", "flugs", "plug", " flur", "slugg", "slur", "Flug", "slug", "fluge", "fub", "flugg", "fluugs", "Flugs", "Flub", "fluugg", "slub", "slugs", "plugg", "flub", "sluge", "plugs", "fug", " fluge", "Flugg", " flugg", "fugg", " flugs"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\twhile (sc.hasNext()) {\\n\t\t\tString x = sc.next();\\n\t\t\tint sum = 0;\\n\t\t\tchar[] str1 = x.toCharArray();\\n\t\t\tfor (int i = 0; i < str1.length; i++) {\\n\t\t\t\tsum += Character.getNumericValue(str1[i]);\\n\t\t\t}\\n\\n\t\t\tif (x.equals(\"0\")) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tSystem.out.println(sum);\\n\t\t}\\n\\n\t}\\n\\n}", "target": "144", "substitutes": {"sc": ["cd", "osc", "ch", "mc", " Sc", "RC", "nc", "st", "cv", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "anc", "scope", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "Sc", "loc", "sci", "cr", "ocr", "sf", "src", "rc", "cb", "sr", "sync", "sl", "sp", "ci", " SC", "sch", "sh", "ec", "isc", "cur", "lc"], "x": ["f", "xy", "xc", "cross", "value", "h", "lex", "content", "string", "data", "xx", "in", "X", "wx", "xf", "l", "text", "v", "t", "c", "ctx", "xt", "tx", "y", "dx", "fx", "txt", "something", "ex", "u", "e", "str", "word", "xs", "p", "anything", "xxx", "pe", "rx", "xa", "xi", "test", "ix", "xp", "rex"], "sum": ["value", "parse", "sim", "skip", "cal", "base", "plus", "out", "match", "length", "cum", "count", "number", "index", "cost", "n", "si", "text", "total", "ss", "ass", "gram", "min", "sign", "result", "bin", "num", "um", "max", "su", "use", "add", "u", "info", "str", "offset", "all", "fat", "fee", "start", "char", "sp", "part", "size", "mean", "spread", "average", "cur", "loss", "cos", "alpha", "scale", "vol", "Sum"], "str1": ["dr1", "dr2", " str2", "str2", "brOne", "dr100", "arrOne", "str100", "br5", "Str2", "str0", "char5", " strone", "strone", "str5", "brone", "StrOne", " str0", "arr2", "charOne", " str100", "Str100", "char1", "strOne", "Str0", "charone", "arr1", "Str1", " str5", "dr0", "br1", "arr0", " strOne"], "i": ["f", "li", "fi", "h", "I", "di", "in", "ri", "id", "key", "m", "index", "gi", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "t", "it", "c", "d", "uri", "u", "pi", "o", "j", "e", "ii", "bi", "p", "ti", "b", "oi", "hi", "slice", "abi", "start", "z", "ci", "k", "xi", "chi", "multi", "ix", "a", "r"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n=sc.nextInt();\\n    int d=sc.nextInt();\\n    int a[][] = new int[n][d];\\n    for(int i=0;i<n;i++){\\n      for(int j=0;j<d;j++){\\n        a[i][j]=sc.nextInt();\\n      }\\n    }\\n    int count=0;\\n    for(int i=0;i<n;i++){\\n      for(int j=i+1;j<n;j++){\\n        int total=0;\\n        for(int k=0;k<d;k++){\\n          total+=(a[i][k]-a[j][k])*(a[i][k]-a[j][k]);\\n        }\\n        int dist = (int)(Math.sqrt((double)total));\\n        if( dist*dist==total ){\\n          count++;\\n        }\\n      }\\n    }\\n    System.out.println(count);\\n  }\\n}", "target": "59", "substitutes": {"sc": ["osc", "ch", "ner", " Sc", "nc", "out", "sche", "sb", "cv", "esc", "bc", "cc", "asc", "pc", "ser", "ss", "na", "server", "scope", "anc", "cus", "SC", "c", "scan", "cs", "se", "sw", "cl", "com", "uc", "cor", "Sc", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sp", " SC", "sch", "sh", "tc", "ec", "cur", "squ", "sem", "screen", "lc"], "n": ["f", "nan", "nd", "h", "ne", "nc", "net", "no", "in", "nt", "m", "l", "g", "v", "t", "c", "num", "network", "y", "sn", "u", "e", "o", "cn", "s", "dn", "p", "b", "x", "ns", "ln", "nb", "nl", "w", "en", "N", "len", "z", "nn", "q", "r"], "d": ["f", "cd", "nd", "del", "h", "dim", "sd", "di", "dt", "in", "id", "m", "l", "da", "t", "dat", "c", "D", "dx", "dh", "u", "e", "o", "dy", "dn", "dc", "s", "p", "b", "x", "ind", "w", "du", "dd", "z", "dir", "dom", "ds", "od"], "a": ["f", "sta", "ama", "am", "data", "ga", "A", "ab", "ma", "ad", "m", "active", "l", "ea", "ac", "na", "ba", "v", "da", "app", "area", "ca", "c", "aa", "t", "self", "y", "array", "va", "u", "e", "o", "aux", "aaa", "s", "as", "sa", "b", "p", "access", "x", "ha", "all", "w", "au", "z", "ata", "work", "ana", "an", "alpha", "la"], "i": ["eni", "f", "li", "I", "is", "di", "in", "ri", "ni", "ik", "id", "gi", "ai", "io", "ji", "si", "l", "ori", "ui", "g", "v", "it", "c", "ie", "y", "zi", "uri", "u", "pi", "e", "api", "ii", "qi", "p", "hi", "b", "x", "oi", "ini", "start", "yi", "q", "z", "ci", "mi", "iu", "ip", "init", "xi", "chi", "ki", "ix", "bi"], "j": ["f", "uj", "li", "obj", "jl", "jj", "ch", "jo", "oj", "jp", "ik", "key", "m", "ji", "dj", "l", "jc", "v", "g", "t", "ja", "c", "it", "ie", "y", "aj", "u", "e", "o", "js", "J", "ii", "dy", "qi", "p", "job", "b", "x", "w", "je", "z", "ij", "jet", "q", "r"], "count": ["f", "list", "div", "base", "nt", "Count", "length", "match", "id", "code", "key", "number", "group", "low", "index", "last", "sum", "diff", "c", "num", "complete", "max", "weight", "counter", "info", "cache", "handle", "depth", "p", "b", "error", "child", "start", "len", "th", "common", "size", "part", "test", "cur", "found", "check", "parent", "distance"], "total": ["valid", "reported", "translation", "base", "rt", "done", "less", "di", "normal", "no", "nt", "length", "default", "non", "cost", "otal", "last", "sum", "t", "diff", "type", "result", "complete", "max", "shared", " whole", "full", "fat", "all", "error", "tax", "fee", "start", "trans", "gross", "common", "partial", "part", "size", "average", "Total", "cur", "flat", " sum", "found", "alpha", "parent", "scale", "percent"], "k": ["f", "h", "kid", "K", "ch", "uk", "ko", "ik", "ek", "id", "m", "key", "kick", "kn", "l", "ck", "g", "v", "ok", "it", "c", "mk", "y", "kr", "kh", "u", "e", "p", "b", "x", "kw", "w", "kk", "ak", "sk", "ka", "th", "ky", "z", "work", "ks", "ask", "ki", "ke", "km", "dk", "q", "r"], "dist": ["class", "div", "shift", "sd", "data", "grade", "rt", "di", "length", "err", "default", "cost", "dj", "da", "sum", "df", "diff", "rel", "deep", "complete", "distance", "per", "progress", "req", "weight", "width", "frac", "dev", "def", "info", "dy", "depth", "sup", "tax", "start", "common", "size", "sh", "test", "Distance", "desc", "comp", "rank", " distance", "Dist", "percent"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.HashMap;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try (Scanner sc = new Scanner(System.in)) {\\n            int N = sc.nextInt();\\n            String[] S = new String[N];\\n            for (int i = 0; i < N; i++) {\\n                S[i] = sc.next();\\n            }\\n\\n            HashMap<String, Integer> sToNumber = new HashMap<String, Integer>();\\n            for (int i = 0; i < N; i++) {\\n                Integer number = sToNumber.get(S[i]);\\n                sToNumber.put(S[i], 1 + (number == null ? 0 : number.intValue()));\\n            }\\n\\n            ArrayList<String> list = new ArrayList<>();\\n            int max = 0;\\n            for (String key : sToNumber.keySet()) {\\n                int number = sToNumber.get(key).intValue();\\n                if (number >= max) {\\n                    if (number > max) {\\n                        max = number;\\n                        list.clear();\\n                    }\\n                    list.add(key);\\n                }\\n            }\\n            Collections.sort(list);\\n\\n            for (int i = 0; i < list.size(); i++) {\\n                System.out.println(list.get(i));\\n            }\\n        }\\n    }\\n}", "target": "235", "substitutes": {"N": ["K", "Len", "I", "L", "Z", "Size", "X", " n", "Node", "Ni", "P", "Count", "Q", "NS", "H", "n", "Y", "B", "Na", "E", "D", "NL", "network", "W", "F", "V", "No", "R", "NB", "NN", "T", "C", "U", "Num", "M", "NA", "Ne", "Part", "Ns", "NT", "Number", "O"], "S": ["Ps", "SA", "DS", "I", "L", "Si", "Files", "AS", "Socket", "SO", "Services", "Is", "Us", "P", "States", "SN", "NS", "SH", "BS", "RS", "Settings", "VS", "OS", "Su", "Names", "You", "s", "IS", "R", "STR", "T", "SS", "TS", "U", "SE", "M", "CS", "SU", "C", "PS", "WS", "GS", "US", "SI", "JS"], "i": ["f", "eni", "li", "h", "I", "shift", "mini", "is", "di", "ri", "ni", "cli", "gi", "id", "m", "index", "ai", "inner", "io", "ji", "n", "si", "ori", "ui", "mu", "phi", "v", "it", "ie", "d", "y", "uri", "u", "e", "pi", "o", "j", "info", "ii", "qi", "s", "p", "ti", "b", "x", "oi", "hi", "slice", "abi", "ini", "start", "yi", "z", "ci", "part", "mi", "ip", "iu", "init", "xi", "chi", "ix", "multi", "bi"], "sToNumber": [" s2Number", "stoDouble", "uTOString", " s2number", " sToNumbers", "s2Amount", " sToDouble", "uTONumber", " sToInteger", "stonumber", " sTonumber", "sByNumber", " s2String", "s2Counter", "sToBER", "sTONumber", "uTOAmount", "s2BER", "s2number", "sTOCounter", "sAndInteger", "stoNumbers", "sTonumber", " sToString", "s2Double", "sWillNumber", "sAndCounter", "stoString", "sToCounter", "sToString", "sBynumber", " s2Numbers", "sToDouble", "sTOAmount", "uToNumber", "sWillnumber", "sWillDouble", "s2String", " s2Counter", "sAndNumber", "uToAmount", "sByDouble", "s2Integer", "stoNumber", "stoAmount", "s2Numbers", "sToAmount", "sTOInteger", "uTOnumber", "sToNumbers", " s2Double", "sAndString", "uTonumber", "sToInteger", "sTOString", "uToString", " sToCounter", "sTONumbers", "sTOnumber", "sWillBER", "s2Number", " s2BER", " sToBER", " s2Integer", "sByNumbers"], "number": ["value", "name", "factor", "string", "data", "one", "version", "token", "no", "expression", "length", "group", "large", "count", "collection", "index", "integer", "object", "document", "unit", "n", "character", "span", "message", "block", "note", "total", "step", "address", "area", "duration", "result", "page", "money", "forward", "num", "zero", "umber", "resource", "counter", "word", "option", "url", "numbered", "position", "point", "date", "serial", "b", "letter", "notation", "error", "nr", "part", "size", "work", "maximum", "major", "function", "phone", "two", "Number", "non", "amount", "reference"], "list": ["map", "value", "li", "listed", "cont", "tree", "string", "base", "range", "out", "group", "bl", "code", "collection", "keep", "index", "count", "large", "low", "l", "ist", "queue", "left", "loop", "like", "diff", "result", "type", "cl", "chain", "the", "array", "batch", "word", "cache", "load", "info", "full", "p", "all", "stack", "and", "pool", "set", "LIST", "table", "view", "part", "size", "lists", "test", "get", "coll", "we", "pair", "now", "lc", "later", "sequence"], "max": ["value", "parse", "orig", "wrap", "none", "range", "no", "az", "id", "limit", "count", " Max", "default", "n", "step", "total", "height", "last", "min", "only", "rest", "conf", "c", "end", "chain", "zero", "can", "ax", "next", "always", "cycle", "cache", "power", "auto", "p", "mod", "x", "error", "res", "Max", "MAX", "size", "work", "right", "now", "prev", "rank", "parent", "scale"], "key": ["value", "KEY", "keys", "name", "string", "base", "version", "no", "me", "match", "id", "search", "seed", "service", "step", "text", "block", "lock", "by", "address", "ice", "ray", "ate", "ie", "type", "entry", "use", "resource", "ge", "source", "ex", "ace", "e", "str", "cache", "ry", "info", "item", "section", "link", "point", "date", "x", "row", "re", "ring", "pe", "Key", "op", "set", "root", "part", "k", "work", "rule", "ip", "pair", "owner", "parent", "r"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\n\\nclass Main{\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        String[] line = sc.nextLine().split(\" \");\\n        int n = line.length;\\n        int[] arr = new int[n];\\n        int count = 0;\\n        int temp;\\n\\n        int v1;\\n        int v2;\\n        Integer ans;\\n        ArrayDeque<Integer> stk = new ArrayDeque<Integer>();\\n        for(int i = 0; i < n; i++){\\n            if(line[i].equals(\"+\")){\\n                v1 = stk.pop().intValue();\\n                v2 = stk.pop().intValue();\\n                ans = Integer.valueOf(v1 + v2);\\n                stk.push(ans);\\n            }else if(line[i].equals(\"-\")){\\n                v1 = stk.pop().intValue();\\n                v2 = stk.pop().intValue();\\n                ans = Integer.valueOf(v2 - v1);\\n                stk.push(ans);\\n            }else if(line[i].equals(\"*\")){\\n                v1 = stk.pop().intValue();\\n                v2 = stk.pop().intValue();\\n                ans = Integer.valueOf(v1 * v2);\\n                stk.push(ans);\\n            }else{\\n                stk.push(Integer.valueOf(line[i]));\\n            }\\n        }\\n        System.out.println(stk.pop().intValue());\\n        \\n        \\n\\n\\n\\n    }\\n}", "target": "114", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "st", "sb", "sv", "iss", "esc", "bc", "cc", "asc", "pc", "ss", "sec", "SC", "se", "c", "scan", "sw", "cl", "cs", "uc", "Sc", "system", "s", "sub", "sci", "cr", "src", "sf", "ocr", "rc", "soc", "sp", " SC", "stream", "sch", "sh", "desc", "ser", "lc", " scr"], "line": ["parse", "comment", "ne", "name", "cell", "string", "data", "phase", "lin", "in", "no", "cle", "log", "group", "column", "lf", "lines", "code", "pin", "key", "shell", "object", "split", "zip", "l", "block", "se", "style", "page", "nice", "entry", "ge", "inline", "source", "Line", "le", "word", "str", "user", "frame", "load", "link", "section", "iter", "strip", "row", "nl", "pass", "file", "sync", "error", "pe", "response", "sl", "header", "rule", "look", "LINE", "lc", "ine"], "n": ["f", "h", "ne", "nc", "in", "m", "number", "kn", "l", "v", "t", "c", "num", "d", "y", "network", "sn", "e", "o", "j", "cn", "s", "p", "b", "x", "ln", "ns", "en", "w", "N", "len", "z", "k", "size", "init", "r"], "arr": ["obj", "br", "dim", "vals", "ann", "bl", "par", "dr", "rep", "app", "dat", "aa", "att", "cat", "ar", "pos", "array", "seq", "gr", "str", "cache", "iter", "stack", "au", "len", "coll", "dict"], "count": ["list", "path", "base", "call", "Count", "length", "id", "code", "index", "total", "last", "sum", "conf", "c", "num", "max", "seq", "counter", "cache", "depth", "current", "start", "len", "char", "size", "found", "coll"], "temp": [" tmp", "nc", "out", "no", "nt", "err", "keep", "m", "unit", "total", "diff", "type", "pos", "output", "batch", "counter", "Temp", "current", "iter", "dc", "all", "tmp", "w", "res", "col", "test", "skip"], "v1": ["fL", "u81", "qu2", "f3", "lvOne", "sv1", "vfirst", "vL", " vone", "volt1", "sv0", " vfirst", "lvone", " v0", "u001", "v0", " v001", "qu1", "f2", "volt2", "V8", "v21", "ffirst", "V2", "v81", "f21", "sv2", " v81", " vOne", "va81", "fOne", "vOne", "f0", "voltfirst", "sv21", "lv1", "va001", "lv0", "V3", "lv2", " v8", "fone", "V1", "vone", "f1", "f8", "v3", "va1", " v3", "u0", "quL", "volt3", "v8", "va0", "u1", "qu3", " v21", "v001", " vL"], "v2": ["f62", "v02", " vtwo", "erv2", " v002", "v72", "valTwo", " v0", " v72", "v0", "erv1", "vari8", "f2", "V8", "p2", "p4", "V2", " v4", "f92", "vtwo", " v92", "V4", "f4", "val002", "Vtwo", " v02", "val2", "vari2", "p02", "vTwo", "f0", "lvTwo", "vari4", "lv1", "p72", "lv2", " v8", "fTwo", "u2", "V1", " v62", "v4", "Voe", "f1", "vari1", "lv4", "val4", "u0", "vari92", "val72", "val02", "voe", " voe", "varioe", "v8", "u62", "v62", "v002", "u1", "erv002", "v92", " vTwo", "ervTwo", "valtwo", "val1"], "ans": ["nan", "names", "anks", "ANS", "cons", " scans", "vals", "ats", "ann", "ands", "aned", "options", "lang", "anon", "lines", "reads", "params", "span", "ays", "anas", "man", "vs", "amps", "AN", " means", "na", "anc", "types", "aces", "cs", "ents", "errors", "can", "lan", "ls", "ions", "nas", "actions", "aus", "angs", "s", "offs", "x", "ns", "atan", "san", "cas", " includes", "ants", "vers", " flags", "ares", "len", "sk", " spans", " errors", "eps", "aps", "ins", "ks", "ana", "ras", "an", "outs", "ars", "ams", "ds", "aos", "ons"], "stk": [" stok", "stke", "estkg", " stask", "stsk", "stsf", "estask", "Stkick", "istkick", "istk", "ctkg", "Stks", " stb", "Stch", "istke", "Stke", "ostuk", "stf", "stscp", " stch", "istck", "estdk", "putkg", "ctok", "Stik", "strkr", "restke", " stak", "stkg", "STok", "stdk", "stak", "Stf", "stik", " stsk", "putck", "istks", "STb", "restk", "STkr", " stkg", "STak", "estck", "Stwork", "astk", "stask", "Stdk", "stswork", "astkg", "ostsk", "STik", "ldark", "astke", " sth", "ctkr", "STask", "isth", "strak", "ldk", "ldsk", "putke", "ctk", "stwork", "Stb", "stko", "stkr", "stkick", "STko", "estks", "stuk", "estko", "Stko", "stsdk", "STwork", "putk", "STk", "stb", "putko", "stsik", "stark", "resth", "sth", "lduk", "estk", "restks", "Stok", "stcp", " stks", "putks", "stsok", "estak", "stks", "Stkg", " stke", "ostk", "istok", " stuk", "ostark", "STkick", "ctks", "strk", "STch", "STf", "strok", "STks", " stark", "astko", "stch", "Stcp", "estok", "ctak", "estcp", "STck", "stck", "Stk", "stok"], "i": ["f", "eni", "li", "fi", "I", "is", "di", "in", "ri", "ni", "cli", "gi", "id", "index", "ai", "io", "si", "ori", "ui", "v", "it", "adi", "c", "ie", "y", "inline", "uri", "pi", "u", "info", "j", "e", "ei", "ii", "qi", "p", "ti", "hi", "oi", "ini", "yi", "ci", "k", "mi", "iu", "xi", "ip", "chi", "multi", "ix", "bi", "lc"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main\\n{\\n    public static void main(String[] args)\\n    {\\n        Deque<String> formula = new ArrayDeque<String>();\\n        Scanner scan = new Scanner(System.in);\\n\\n        while(scan.hasNext())\\n        {\\n            String input = scan.next();\\n            double num2,num1;\\n            switch(input)\\n            {\\n                case \"+\":\\n                    num2 = Double.parseDouble(formula.poll());\\n                    num1 = Double.parseDouble(formula.poll());\\n                    formula.push(String.valueOf(num1+num2));\\n                    break;\\n                case \"-\":\\n                    num2 = Double.parseDouble(formula.poll());\\n                    num1 = Double.parseDouble(formula.poll());\\n                    formula.push(String.valueOf(num1-num2));\\n                    break;\\n                case \"/\":\\n                    num2 = Double.parseDouble(formula.poll());\\n                    num1 = Double.parseDouble(formula.poll());\\n                    formula.push(String.valueOf(num1/num2));\\n                    break;\\n                case \"*\":\\n                    num2 = Double.parseDouble(formula.poll());\\n                    num1 = Double.parseDouble(formula.poll());\\n                    formula.push(String.valueOf(num1*num2));\\n                    break;\\n                default:\\n                    formula.push(input);\\n                    break;\\n            }\\n        }\\n        double ans = Double.parseDouble(formula.poll());\\n        if(ans==(int)ans)\\n        {\\n            System.out.println((int)ans);\\n        }\\n        else\\n        {\\n            System.out.println(ans);\\n        }\\n    }\\n}", "target": "114", "substitutes": {"formula": ["Formica", "formatoul", "formatulation", "structolo", "formola", "formlique", "privateula", " formularity", "formedlique", "formcel", "formulation", "formedcel", "formedolo", "formsulas", "FORMela", " formola", "formatula", "formedulate", " formallel", "formolo", "formular", " formular", "formationallel", "formedoo", "formscel", "functionular", "Formula", "formedallel", "formationulate", "formma", "formsul", "formedul", "formedela", "formatularity", "formedola", "formatola", "formatao", "formatole", " formul", "formedma", "formao", "formedao", " formaco", "formbook", "functionulation", "Formular", "formedbook", "formallel", "formedole", "formationela", "formsela", " formole", "formatoo", "formatcel", "formsular", "functionul", "feedulation", "FORMulas", "formela", "formsma", "formulas", "Formulas", "formedaco", " formulation", " formulas", "operular", "formedula", "structular", "formoul", "FORMular", "formedulas", "Formulation", "formole", " formbook", " formoul", "operula", "formul", "structole", "FORMul", "formatul", "formica", "formaco", " formcel", "feedula", "FORMulation", "structoo", "FORMulate", "operulas", "Formul", "formedulation", "privateulation", "formedica", " formica", "structulate", "operulate", "FORMula", "structula", "feedulate", "privateulate", "FORMcel", "Formaco", "privatecel", "formationula", "feedbook", "formsulation", "formoo", "functionula", "structulas", "structlique", "formedularity", " formela", "FORMoul", "formularity", "feedulas", "formsulate", "feedma", "feedular", "formulate", " formolo", " formulate", "structcel", "formsula", "formatlique", " formao"], "scan": ["stat", "parse", "ner", "ann", "watch", "out", "fan", "in", " scanner", "log", "err", "search", "keep", "inner", "ignore", "io", "report", "n", "se", "bug", "er", "can", "reader", "query", "feed", "read", "nn", "ry", "spin", "auto", "system", "row", "Scan", "sync", "start", "see", "sc", "or", "an", "walk", "look", "check", "skip", "ser", "run", "clean", "span"], "input": ["focus", "list", "comment", "name", "string", "data", "pattern", "raw", "format", "Input", "in", "expression", "command", "token", "id", "key", "keep", "inner", "image", "config", "integer", "intel", "text", "address", "insert", "RAW", "type", "form", "entry", "request", "feed", "next", "output", "source", "inc", "pull", "info", "str", "inside", "uri", "current", "field", "dc", "enter", "background", "error", "argument", "concept", "magic", "op", "work", "qa", "i", "feat", "alpha", "inf", "q"], "num2": ["locTwo", "hom8", "number4", "num8", "loc2", "um1", "num002", "formsecond", " num8", "homtwo", "possecond", " numtwo", " num62", "umTwo", "hom2", "nuEl", "nam4", "form1", "posTwo", "numTwo", "mon2", " numEl", "homEl", "loc0", "um02", "Num002", "number62", "Num4", "nu3", "mon1", "monTwo", "loc8", "sum2", "loctwo", "Num42", "hom3", "numsecond", "namtwo", "Num2", "sumtwo", " num002", "numtwo", "number1", "um2", " num02", "namTwo", "number42", "form2", " num3", "nam002", " num0", " num42", "pos1", "n1", "nu02", "sum1", "number2", "formTwo", "numEl", "pos2", "hom02", "num3", "montwo", " numsecond", "nam2", "num62", "sumTwo", "homTwo", "nTwo", "Num1", "Num62", " numTwo", "num0", "num42", " num4", "num02", "nam1", "nu2", "nam0", "n2", "num4", "n02"], "num1": ["umI", "um1", "numN", "indexOne", "numberone", "index10", "index1001", "nuN", "number01", "rank3", " numOne", "amOne", "rank1", " numN", "num1001", "form1", " num1001", "sum3", "um01", "dim0", " numI", "amone", "numI", "num81", "dim2", "sum2", " num81", "NumN", "um0", "Num2", " numone", "num01", "dim1", "nom2", "num10", "rankOne", "nu1001", "formOne", "namOne", "sumOne", "inn1", "n3", "number1", "dimone", "innOne", "um2", "NumOne", "namI", "formI", "numone", "inn10", "nomone", "form2", "am2", " num0", "am1", "n1", "sum1", "number2", "Numone", "inn1001", "numOne", "nomOne", "um81", "nom1", "num3", "umN", "nam2", "nOne", "Num1", "formN", "num0", "nuI", "rank2", "dim81", "nam1", "umOne", "nu1", "form1001", "umone", "index1", " num10", "n2", "dim01"], "ans": ["nan", "ations", "ANS", "cons", " scans", "ats", "ann", "aned", "lang", "anon", "ays", "anas", "n", "ons", "amps", "AN", " means", "acts", "na", "annels", "types", "anc", "aces", "ents", "cs", "ads", "aning", "can", "lan", "ms", "ls", "anan", "es", "ions", "ids", "nas", "aus", "xs", "s", "offs", "as", "ns", "atan", "anges", "ants", "ares", " spans", "anus", "eps", "asin", "os", "anes", "ins", "ks", "ana", "ras", "an", "ians", "outs", "ars", "ams", "ds", "aos", "anned", "span"]}}
{"code": "\\n\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Scanner;\\nimport java.util.TreeMap;\\n\\npublic class Main {\\n\\n\tstatic Scanner scanner;\\n\\n\tpublic static void main(String[] args) {\\n\t    scanner = new Scanner(System.in);\\n\\n\t    int N=gi();\\n\t    int[] W=new int[N];\\n\\n        for(int i=0; i<N; i++) {\\n        \tW[i]=gi();\\n        }\\n\\n        int min=Integer.MAX_VALUE;        \\n        for (int i=1; i<N; i++) {\\n        \tint T=i;\\n        \tint b=0;\\n        \tint a=0;\\n        \tfor (int j=0; j<i; j++) {\\n        \t\tb+=W[j];\\n        \t}\\n        \tfor (int j=i; j<N; j++) {\\n        \t\ta+=W[j];\\n        \t}\\n        \tint z=Math.abs(b-a);\\n        \tif(z<min) {\\n        \t\tmin=z;\\n        \t}\\n        }\\n        \\n\\n        System.out.print(min);\\n\\n//        if (b>=1 && b<=12) {\\n//        \tif(a>=1 && a<=12) {\\n//        \t    System.out.println(\"AMBIGUOUS\");\\n//        \t} else {\\n//        \t\tSystem.out.println(\"MMYY\");\\n//        \t}\\n//        }else {\\n//        \tif(a>=1 && a<=12) {\\n//        \t    System.out.println(\"YYMM\");\\n//        \t} else {\\n//        \t\tSystem.out.println(\"NA\");\\n//        \t}\\n//        }\\n\t}\\n\\n\t// \u6587\u5b57\u5217\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static String gs() {\\n\t\treturn scanner.next();\\n\t}\\n\\n\t// int\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static int gi() {\\n\t\treturn Integer.parseInt(scanner.next());\\n\t}\\n\\n\t// long\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static long gl() {\\n\t\treturn Long.parseLong(scanner.next());\\n\t}\\n\\n\t// double\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static double gd() {\\n\t\treturn Double.parseDouble(scanner.next());\\n\t}\\n}", "target": "2", "substitutes": {"scanner": ["caner", " Scaner", "scanler", "Scanter", "syner", "synner", "Scanner", "synter", "Scaner", " Scanler", " scaner", " Scanter", "canter", "scanter", "Scaninner", " scanter", "canler", "syninner", " Scanner", "scaninner", "scaner", "Scanler", " scaninner", "canner"], "N": ["NE", "G", "K", "I", "Len", "L", "Z", "Size", "NI", "nt", "X", " n", "Ni", "P", "NS", "H", "n", "NC", "B", "Y", "S", "Na", "E", "D", "J", "F", "V", "R", "NB", "C", "Num", "M", "NA", "Ne", "Part", "Ns", "NT", "O"], "W": ["AW", "WM", "G", "WE", "K", "I", "L", "Z", "SW", "MW", "A", "Sw", "X", "BW", "P", "Wa", "Q", "CW", "H", "WC", "S", "Y", "B", "Ws", "DW", "D", "Web", "We", "WT", "WA", "FW", "Weight", "F", "V", "Widget", "NW", "R", "TW", "RW", "w", "Word", "M", "ws", "VW", "WS", "GW", "WR", "Wh"], "i": ["f", "eni", "li", "fi", "h", "I", "vi", "mini", "is", "di", "in", "ri", "ni", "gi", "id", "m", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "phi", "v", "t", "it", "c", "ie", "d", "y", "uri", "u", "e", "o", "pi", "info", "ii", "iii", "qi", "p", "hi", "x", "oi", "ti", "w", "ini", "start", "ci", "k", "mi", "ip", "iu", "init", "xi", "chi", "ki", "ix", "bi", "r"], "min": ["f", "value", "val", "sort", "dim", "skip", "mini", "none", "miss", "don", "version", "id", "limit", "m", "thin", "mine", "low", "little", "unit", "default", "n", "ss", "close", "sec", "na", "v", "diff", "area", "c", "Mini", "d", "max", "pos", "small", "Min", "ng", "zero", "spec", "use", "weight", "e", "minimum", "p", "un", "x", "mod", "w", "start", "sol", "pm", "filter", "size", "mean", "wa", "init", "lower", "sign", "MIN", "span"], "T": ["f", "G", "K", "I", "L", "Z", "A", "P", "H", "S", "B", "Na", "t", "D", "num", "Min", "J", "F", "V", "p", "R", "M", "Max", "k", "Total", "O"], "b": ["f", "bf", "h", "br", "base", "sb", "ab", "bl", "binary", "bc", "n", "l", "B", "wb", "g", "v", "ba", "t", "bp", "c", "aa", "d", "y", "rb", "u", "e", "o", "bb", "p", "x", "nb", "cb", "w", "bs", "k", "big", "be", "body", "r"], "a": ["f", "sta", "am", "A", "ab", "oa", "m", "ai", "n", "l", "ac", "na", "ba", "g", "da", "ca", "area", "c", "aa", "t", "d", "y", "aj", "va", "u", "e", "pa", "af", "api", "bb", "s", "fa", "p", "sa", "x", "as", "w", "temp", "wa", "an", "ae", "alpha", "r"], "j": ["f", "uj", "li", "jl", "jj", "jo", "oj", "jp", "ni", "m", "ji", "n", "l", "ui", "g", "v", "t", "ja", "it", "ie", "c", "d", "bj", "y", "aj", "u", "e", "o", "J", "js", "ii", "pt", "qi", "bi", "p", "x", "w", "q", "je", "k", "ij", "xi", "jet"], "z": ["f", "h", "zone", "Z", "hz", "az", "count", "code", "zy", "gz", "tz", "n", "zip", "l", "g", "v", "nz", "t", "c", "oz", "d", "y", "max", "cz", "zi", "zo", "u", "e", "ld", "iz", "qi", "p", "x", "za", "slice", "w", "ez", "k", "ze", "qa", "fl", "zh", "zn", "q", "zen"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tint n = scan.nextInt();\\n\t\tint m = scan.nextInt();\\n\t\tint [][] det = new int [n][m];\\n\t\tint [] b = new int [m];\\n\\n\t\tfor(int i = 0; i < n ; i++){\\n\t\t\tfor(int j = 0 ; j < m ; j++){\\n\t\t\t\tdet[i][j] = scan.nextInt();\\n\t\t\t}\\n\t\t}\\n\\n\t\tfor(int i = 0 ; i < m ; i++){\\n\t\t\tb [i] = scan.nextInt();\\n\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0 ; i < n ; i++){\\n\t\t\tint sum = 0 ;\\n\t\t\tfor(int j = 0 ; j < m ; j++){\\n\t\t\t   sum += det[i][j]*b[j];\\n\t\t\t}\\n\t\t\tSystem.out.println(sum);\\n\t\t}\\n\\n\t}\\n}", "target": "185", "substitutes": {"scan": ["nan", " Scan", "parse", "ner", "ann", "watch", " scanner", "out", "in", "pan", "fan", "chan", "search", "pin", "ignore", "south", "non", "l", "na", "server", "conv", "se", "cat", "er", "can", "reader", "plan", "query", "ban", "kin", "nn", "serv", "ry", "spin", "connect", "iter", "system", "ln", "Scan", "san", "nl", "sync", "slice", "sin", "or", "ans", "wan", "sc", "sys", "view", "an", "look", "skip", "ser", "syn", "clean", "sign", "r", "span"], "n": ["f", "h", "ner", "ne", "in", "no", "nt", "l", "g", "v", "t", "r", "c", "d", "num", "y", "sn", "u", "e", "o", "cn", "s", "p", "un", "x", "ns", "ln", "en", "nb", "w", "N", "z", "k", "mn", "an", "nn", "a", "net"], "m": ["f", "nm", "h", "mc", "middle", "mon", "in", "man", "rm", "l", "mu", "g", "v", "t", "c", "d", "num", "y", "fm", "cm", "u", "e", "o", "mm", "s", "dn", "p", "x", "en", "w", "M", "dm", "im", "hm", "md", "z", "k", "mn", "mi", "size", "sm", "an", "km", "um", "a", "r"], "det": ["ne", "data", "unt", "di", "dt", "dist", "dis", "nt", "ant", "arr", "l", "volt", "deb", "patch", "Detect", "td", "hard", "da", "wd", "inter", "df", "t", "dem", "sect", "att", "d", "pred", "def", "info", "np", "ii", "target", "auto", "system", "p", "de", "ind", "Det", "direct", "table", "part", "dir", "conn", "flat", "chi", "detail", "ds", "bis"], "b": ["f", "bm", "bf", "pb", "h", "hide", "base", "sb", "db", "ab", "bt", "binary", "obb", "bc", "l", "B", "ob", "v", "c", "bar", "bin", "d", "y", "mb", "rb", "e", "lb", "bb", "s", "p", "boot", "nb", "cb", "ib", "bs", "bd", "k", "body", "bi", "a"], "i": ["f", "eni", "li", "fi", "mini", "I", "di", "in", "ik", "ni", "ri", "gi", "id", "cli", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "c", "ie", "y", "uri", "zi", "u", "pi", "e", "o", "api", "ii", "iii", "qi", "info", "p", "hi", "oi", "x", "ini", "yi", "im", "z", "ci", "mi", "iu", "ip", "xi", "ij", "ix", "ki", "bi", "my"], "j": ["f", "uj", "li", "obj", "eni", "h", "jl", "jj", "jo", "oj", "jp", "ik", "ji", "si", "l", "dj", "ui", "jc", "v", "g", "it", "ja", "c", "ie", "d", "y", "aj", "u", "e", "o", "js", "J", "ii", "adj", "qi", "s", "p", "job", "x", "ion", "ind", "w", "je", "z", "k", "other", "ij", "xi", "ix", "a", "jet", "bi", "el", "q", "r"], "sum": ["parse", "dim", "cal", "ul", "miss", "summary", "mass", "cum", "count", "index", "cost", "total", "ums", "ass", "norm", "min", "diff", "up", "conf", "sign", "result", "style", "um", "num", "max", "use", "inc", "acc", "dot", "weight", "dev", "frac", "av", "fat", "sup", "fee", "mask", "hash", " summ", "part", "size", " Sum", "mean", "us", "sh", "average", "spread", "real", "cur", "loss", "gam", "alpha", "scale", "vol", "Sum"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\npublic class Main\\n{\\n    public static void main(String[] args)\\n    {\\n        Scanner s = new Scanner(System.in);\\n        int n = s.nextInt();\\n        int[] a = new int[n];\\n        int sum = 0;\\n        for(int i=0; i<n; i++)\\n        {\\n            a[i] = s.nextInt();\\n            sum+=a[i];\\n        }\\n        int p = sum/n;\\n        int ans1=0;\\n        int ans2=0;\\n        for(int i=0; i<n; i++)\\n        {\\n            ans1+=Math.pow((a[i]-p),2);\\n            ans2+=Math.pow((a[i]-p-1),2);\\n        }\\n        if(ans1<ans2)\\n        System.out.println(ans1);\\n        else System.out.println(ans2);\\n    }\\n}", "target": "17", "substitutes": {"s": ["f", "http", "ts", "is", "abs", "out", "in", "sb", "ssl", "sym", "lines", "gs", "south", "si", "its", "S", "ss", "g", "v", "se", "c", "er", "d", "ms", "ls", "fts", "es", "u", "e", "qs", "services", "as", "b", "bis", "sets", "ns", "sf", "w", "sync", "utils", "ws", "ans", "sys", "os", "us", "ins", "strings", "ses", "rs", "fs", "ds", "r"], "n": ["f", "ne", "nc", "in", "no", "nt", "count", "m", "l", "g", "v", "t", "c", "d", "num", "network", "y", "sn", "u", "e", "o", "j", "b", "x", "all", "ns", "nl", "en", "nb", "w", "ln", "N", "len", "z", "k", "size", "mn", "an", "nn", "net"], "a": ["f", "ama", "am", "data", "working", "ga", "A", "in", "ma", "code", "ai", "ea", "ac", "na", "ba", "da", "area", "aa", "c", "y", "aj", "array", "va", "u", "pa", "o", "e", "aaa", "sa", "as", "b", "x", "ha", "w", "au", "ans", "ata", "work", "qa", "la", "an", "ae", "alpha"], "sum": ["parse", "sam", "summary", "am", "mass", "in", "count", "m", "index", "si", "total", "na", "mu", "v", "min", "sign", "up", "c", "se", "num", "um", "max", "pos", "use", "u", "sa", "b", "space", "offset", "all", "fat", "w", "start", "part", "mean", "size", "spread", "average", "an", "alpha", "scale", "net", "Sum"], "i": ["f", "eni", "li", "fi", "I", "vi", "di", "in", "ri", "ni", "id", "gi", "index", "inner", "ai", "io", "ji", "si", "ui", "mu", "phi", "v", "it", "ie", "y", "uri", "zi", "u", "e", "o", "j", "pi", "info", "ii", "qi", "hi", "b", "x", "oi", "slice", "abi", "ini", "q", "yi", "z", "ci", "part", "mi", "ip", "iu", "init", "xi", "isi", "chi", "ix", "multi", "bi"], "p": ["f", "h", "P", "m", "pc", "l", "tp", "v", "g", "t", "port", "c", "d", "y", "ap", "pa", "pi", "e", "o", "j", "u", "np", "point", "b", "x", "w", "pn", "po", "z", "sp", "part", "cp", "r"], "ans1": ["ents1", "ans3", "an001", "an1", "an3", "na2", "ents001", "ansOne", "ins1", "entsOne", "na0", "consOne", "anOne", "an11", "ansone", "ansu", "anone", "ans0", "ann1", "anu", "ANS2", "ANS1", "ants0", "ANSu", "ann3", "cons001", "an2", "cons1", "ann11", "ins3", "ans11", "ins2", "naone", "ants1", "ANS0", "ents2", "antsu", "ins11", "an0", "cons2", "ann2", "ants2", "na1", "antsone", "ans001"], "ans2": ["nas2", "urs1", "anas1", "ons2", "an02", "an1", "rassecond", "urs02", "ras1", "anstwo", "ons1", "ars1", "onstwo", "anntwo", "ann1", "antwo", "ars2", "antsdb", "nas1", "anastwo", "urssecond", "ars02", "ras2", "andb", "an2", "ras02", "ann02", "ants1", "ans02", "urs2", "nastwo", "anas02", "ansecond", "anas2", "ann2", "ants2", "ansdb", "antstwo", "ons02", "anssecond", "nasdb", "arstwo"]}}
{"code": "import java.io.IOException;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n \\npublic class Main {\\n public static void print(int a,int b,int c){\\n\t System.out.print(a);\\n\t System.out.print(\" \");\\n\t System.out.print(b);\\n\t System.out.print(\" \");\\n\t System.out.println(c);\\n }\\n    public static void main(String[] args) throws IOException {\\n             \\n       Scanner sc = new Scanner(System.in);\\n       int []a=new int[3];\\n      a[0] = sc.nextInt();\\n      a[1] = sc.nextInt();\\n      a[2] = sc.nextInt();\\n      \\n      Arrays.sort(a);\\n      print(a[0],a[1],a[2]);       }\\n     \\n      } \\n", "target": "37", "substitutes": {"a": ["f", "parse", "h", "ama", "am", "data", "instance", "ga", "A", "ab", "ad", "oa", "ma", "index", "active", "n", "ea", "ac", "l", "na", "aw", "da", "ba", "app", "ca", "area", "aa", "asa", "d", "y", "ar", "aj", "array", "va", "pa", "e", "aux", "o", "aaa", "auto", "at", "as", "sa", "x", "p", "access", "missing", "all", "ha", "au", "ata", "i", "art", "tta", "an", "la", "ae", "ada", "alpha"], "b": ["f", "bf", "out", "sb", "ab", "db", "bas", "bc", "n", "erb", "l", "B", "ob", "ba", "v", "bp", "aa", "bin", "d", "y", "mb", "xb", "rb", "e", "lb", "bb", "x", "nb", "cb", "ib", "bs", "bd", "i", "abb", "eb", "be", "bi", "fb", "r"], "c": ["f", "cd", "ch", "cf", "cy", "code", "count", "cc", "n", "l", "ac", "ca", "con", "cs", "cat", "d", "ce", "u", "e", "o", "s", "dc", "p", "x", "C", "cr", "cb", "cu", "col", "z", "ct", "i", "ec", "lc", "r"], "sc": ["parse", "ner", "ch", "osc", "cont", " Sc", "out", "sche", "sb", "search", "cc", "bc", "esc", "asc", "pc", "si", "cam", "ss", "scope", "ca", "SC", "scan", "cs", "uc", "se", "cus", "cl", "sac", "com", "ctx", "sw", "acc", "Sc", "system", "sq", "sa", "sub", "sci", "cr", "src", "cer", "sr", "soc", "ci", "sp", " SC", "tc", "cur", "desc", "coll", "sem", "screen", "lc"]}}
{"code": "\\n\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main{\\n  public static void main(String args[]) throws IOException{\\n   BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n   int n = Integer.parseInt( br.readLine() );\\n\\n   int answer = 0;\\n\\n   for(int i = 0 ; i < n; i++){\\n      int x = Integer.parseInt( br.readLine() );\\n      int flag = 0;\\n\\n      if(x == 2){\\n    \tflag = 0;\\n\\n      }else if( x%2 == 0 || x < 2){\\n    \tflag = 1;\\n\\n       }else{\\n\\n       double sqrt = Math.sqrt(x);\\n       for(int j = 3; j <= sqrt; j = j+2){\\n    \t if(x % j ==0){\\n    \t\tflag = 1;\\n\\n    \t\tbreak;\\n    \t }\\n        }\\n\\n       }\\n\\n\\n    \tif(flag == 0){\\n\\n    \t\tanswer++;\\n\\n    \t}\\n\\n   }\\n\\n\\n\\n   System.out.println(answer);\\n }\\n}", "target": "226", "substitutes": {"br": ["obj", "bf", "tr", "ch", "ner", "div", "out", "bh", "cro", "db", "ler", "ref", "bl", "err", "bro", "fr", "bc", "io", "pr", "orb", "arr", "dr", "mr", "bar", "buf", "form", "er", "reader", "wr", "rb", "gr", "hr", "bb", "HR", "org", "b", "cr", "yr", "cb", "ocr", "ber", "res", "sr", "jar", "box", "her", "bs", "BR", "bridge", "browser", "ger", "Br", "r"], "n": ["f", "ne", "nc", "no", "nt", "ni", "count", "number", "m", "l", "v", "t", "c", "num", "d", "network", "y", "sn", "u", "o", "dn", "p", "b", "ns", "nl", "nb", "en", "w", "N", "len", "z", "nr", "size", "mn", "k", "nn", "q", "net"], "answer": ["value", "side", "string", "grade", "issue", "version", "err", "id", "image", "number", "index", "code", "count", "account", "score", "inn", "address", "order", "wait", "area", "result", "support", "page", "write", "update", "array", "fix", "next", "Answer", "nn", "sn", "age", "info", "reply", "question", "eden", "offset", "status", "error", "answered", "response", "knowledge", "z", "size", "average", "oodle", "ix", "now", "fee"], "i": ["f", "eni", "li", "fi", "I", "vi", "mini", "di", "in", "ni", "gi", "id", "index", "inner", "ai", "io", "ji", "si", "ui", "v", "ie", "y", "zi", "u", "pi", "ii", "qi", "p", "ti", "b", "hi", "ini", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "chi", "multi", "bi"], "x": ["f", "xy", "xc", "cross", "php", "lex", "exp", "plus", "xx", "X", "wx", "id", "number", "index", "l", "alpha", "v", "t", "c", "ww", "tx", "d", "num", "y", "max", "array", "fx", "ax", "ng", "ex", "event", "e", "u", "something", "xs", "p", "w", "xxx", "rx", "z", "sex", "px", "work", "xi", "ix", "check", "xp", "a", "q"], "flag": ["f", "kind", "band", "fd", "arg", "sort", "debug", "ish", "log", "group", "err", "Flag", "id", "code", "pin", "lag", "count", "key", "wave", "bad", "order", "py", "wait", "ity", "like", "sign", "type", "cat", "style", "bug", "bit", "fun", "age", "info", "die", "flags", "field", "offset", "status", "al", "error", "sync", "start", "mask", "maybe", "char", "z", "part", "big", "line", "ask", "feature", "ix", "force"], "sqrt": [" phsq", "shr", "qrf", "shRT", "qrot", "sqsq", " qsq", "sqrf", " qrt", " qr", " phr", "qr", "qrt", " sqr", "sqr", " sqsq", " sqRT", " phnt", "shrt", " sqrot", " sqnt", "shrf", " sqrf", "sqnt", " qnt", " phrt", "shrot", "sqRT", "sqrot", "qRT"], "j": ["f", "uj", "li", "h", "jj", "ch", "jo", "jl", "oj", "jp", "off", "out", "length", "m", "index", "fr", "pr", "ji", "l", "dj", "py", "jc", "v", "it", "ja", "c", "d", "bj", "y", "aj", "ax", "next", "adj", "e", "o", "js", "J", "p", "job", "b", "ind", "z", "k", "ij", "ix"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    private static Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n\\n        int n = sc.nextInt();\\n\\n        int[] cum = new int[n+1];\\n\\n        for (int i=0; i < n; i++) {\\n            cum[i+1] = cum[i] + sc.nextInt();\\n        }\\n\\n        int min = Integer.MAX_VALUE;\\n        for (int i=0; i < n; i++) {\\n            min = Math.min(min, Math.abs((cum[n] - cum[i]) - (cum[i] - cum[0])));\\n        }\\n\\n        System.out.println(min);\\n    }\\n\\n}\\n", "target": "2", "substitutes": {"sc": ["ner", "osc", "ch", " Sc", "nc", "console", "out", "sb", "core", "cc", "bc", "config", "esc", "com", "pc", "exec", "cam", "sec", "server", "scope", "anc", "gram", "cus", "SC", "se", "c", "scan", "cs", "ctx", "uc", "cl", "screen", "ar", "Sc", "system", "sq", "sci", "cr", "src", "rc", "cer", "or", "sp", " SC", "sch", "parser", "ec", "cur", "sem", "lib", "lc", " scr", "r"], "n": ["f", "ne", "name", "none", "nc", "net", "in", "no", "nt", "count", "m", "l", "v", "t", "c", "d", "num", "network", "y", "max", "sn", "u", "e", "o", "j", "cn", "s", "p", "b", "x", "all", "ns", "ln", "en", "nb", "w", "un", "N", "len", "z", "k", "mn", "an", "nn", "r"], "cum": ["sim", "shape", "cf", "div", "orig", "mc", "base", "co", "out", "ctr", "group", "cy", "count", "index", "cry", "cost", "mac", "zip", "que", "order", "sum", "nz", "cus", "cs", "chu", "c", "conf", "uc", "cat", "bug", "com", "max", "ce", "bin", "cycle", "cm", "ace", "next", "frac", "cache", "usc", "tu", "cn", "qi", "bi", "mod", "cr", "cer", "history", "cu", "head", "cand", "common", "ci", "mean", "cp", "margin", "rank", "feature", "cmp", "cast", "cube", "lc", "pu", "um"], "i": ["f", "eni", "li", "fi", "I", "mini", "is", "di", "in", "ri", "ni", "id", "gi", "m", "index", "inner", "ai", "io", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "end", "c", "ie", "y", "uri", "zi", "u", "pi", "e", "j", "o", "info", "ii", "api", "qi", "hi", "ti", "b", "oi", "x", "p", "slice", "ini", "z", "ci", "mi", "iu", "ip", "xi", "init", "chi", "multi", "ix", "bi", "my", "r"], "min": ["f", "value", "rand", "val", "on", "div", "skip", "sort", "none", "mini", "round", "shift", "miss", "don", "version", "act", "mit", "bat", "mine", "m", "iss", "search", "index", "default", "ignore", "unit", " Min", "ss", "pre", "sum", "diff", "mins", "sign", "conf", "Mini", "rain", "d", "max", "pos", "small", "Min", "ax", "next", "e", "minimum", "un", "b", "x", "ind", "p", "mod", "sub", "all", "MAX", "filter", "partial", "part", "size", "mean", "amin", "average", "init", "pri", "lt", "lower", "scale", "a", "MIN", "span"]}}
{"code": "import java.util.Arrays;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tMain main = new Main();\\n\\n\t\ttry (Scanner scan = new Scanner(System.in)) {\\n\t\t\tmain.changingACharchter(scan);\\n\t\t}\\n\t}\\n\\n\tprivate void changingACharchter(Scanner scan) {\\n\t\tscan.nextInt();\\n\t\tint k = scan.nextInt();\\n\t\tchar[] s = scan.next().toCharArray();\\n\\n\t\ts[k - 1] = Character.toLowerCase(s[k - 1]);\\n\t\tSystem.out.println(new String(s));\\n\\n\t}\\n\\n}\\n", "target": "71", "substitutes": {"scan": ["store", "gen", "parse", "stat", "ner", "skip", "ann", "begin", "watch", "out", " scanner", "in", "range", "chan", "log", "gate", "match", "fan", "search", "ignore", "index", "ai", "config", "report", "n", "exec", "server", "send", "se", "cat", "bin", "er", "can", "reader", "kin", "query", "plan", "feed", "bug", "read", "batch", "ry", "connect", "system", "serial", "all", "Scan", "row", "san", "sync", "pass", "see", "sc", "win", "or", "ans", "sys", "view", "filter", "conn", "reach", "an", "get", "walk", "look", "check", "nn", "feature", "run", "clean", "sign"], "k": ["f", "kid", "K", "uk", "ko", "element", "ik", "ijk", "id", "m", "key", "kick", "kn", "n", "l", "ck", "g", "v", "ok", "t", "c", "mk", "d", "num", "spec", "u", "e", "o", "j", "unk", "p", "x", "ku", "kk", "ak", "sk", "z", "ks", "i", "ask", "ke", "dk", "q", "kw"], "s": ["f", "letters", "string", "times", "data", "is", "abs", "sb", "states", "sv", "lines", "parts", "si", "l", "its", "ss", "ops", "S", "types", "cs", "c", "sites", "d", "words", "ls", "es", "js", "services", "p", "as", "b", "sets", "ns", "ps", "tests", "ws", "ans", "sc", "styles", "os", "bytes", "ins", "us", "strings", "ses", "rs", "cases", "fs", "ds", "a", "r"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args){\\n\t\t//\u5165\u529b\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint k = sc.nextInt();\\n\t\tint x = sc.nextInt();\\n\t\tsc.close();\\n\\n\t\t//\u51e6\u7406\\n\t\t\\n\t\t//\u51fa\u529b\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\t\tfor(int i = 0; i < 2 * k - 1; i++){\\n\t\t\tint t = x - k + 1 + i;\\n\t\t\tout.print(t);\\n\t\t\tif(i == 2 * k - 2) out.println();\\n\t\t\telse out.print(\" \");\\n\t\t}\\n\t\tout.flush();\\n\t}\\n}", "target": "207", "substitutes": {}}
{"code": "import java.util.Scanner;\\nimport java.util.*;\\npublic class Main {\\n\tpublic static String S;\\n\tpublic static String T;\\n\tpublic static int sub = Integer.MAX_VALUE;\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tS = scan.next();\\n\t\tT = scan.next();\\n\t\tSystem.out.println(search());\\n\t}\\n\\n\tprivate static int search() {\\n\t\tfor (int i = 0;i <= S.length() - T.length() ;i++ ) {\\n\t\t\tint count = 0;\\n\t\t\tfor (int j = 0;j < T.length() ;j++ ) {\\n\t\t\t\tString s_i = S.substring(i + j,i + j + 1);\\n\t\t\t\tString t_i = T.substring(j,j + 1);\\n\t\t\t\tif (!s_i.equals(t_i)) count++;\\n\t\t\t}\\n\t\t\tsub = Math.min(sub,count);\\n\t\t}\\n\t\treturn sub;\\n\t}\\n\\n}\\n", "target": "158", "substitutes": {"S": ["SA", "G", "DS", "I", "Session", "L", "Si", "Source", "AS", "A", "X", "P", "Sin", "SN", "NS", "Sample", "Series", "URI", "IN", "SH", "RS", "As", "Es", "SC", "ST", "D", "SER", "VS", "OS", "SL", "Su", "F", "V", "s", "IS", "R", "STR", "SS", "TS", "U", "SE", "N", "M", "CS", "SU", "C", "SR", "PS", "WS", "US", "SI", "Ins"], "T": ["TN", "G", "AT", "LT", "TE", "Token", "I", "OT", "L", "Z", "TG", "TX", "DT", "X", "TA", "P", "TT", "H", "AST", "Tar", "CT", "PT", "Pat", "Y", "B", "UT", "Type", "t", "E", "D", "ST", "TM", "RT", "Ti", "WT", "OUT", "TB", "W", "Unit", "F", "Time", "TY", "V", "R", "FT", "C", "TS", "U", "The", "M", "N", "Not", "TEXT", "Text", "MT", "Part", "Test", "Total", "NT", "TH", "O", "IT"], "sub": ["val", "sim", "sort", "name", "summary", "shape", "base", "abs", "log", "ub", "length", "id", "search", "match", "ai", "bc", "death", "sing", " subs", "exec", "reg", "pre", "sec", "sum", "min", "diff", "success", "type", " Sub", "uc", "small", "abc", "second", "seq", "per", "next", "fun", "lb", "Sub", "section", "loc", "job", "offset", "sq", "error", "sup", "child", "slice", "rc", "start", "ib", "sc", "struct", "part", "size", "desc", "la", "pub", "rob"], "scan": ["stat", "parse", "ner", "ann", "watch", "out", "in", "log", "search", "ignore", "shell", "n", "l", "build", "server", "print", "v", "send", "se", "cat", "bug", "can", "reader", "network", "feed", "query", "read", "nn", "connect", "system", "row", "Scan", "ln", "sync", "sin", "start", "see", "sc", "an", "look", "walk", "skip", "run", "sign", "r"], "i": ["f", "eni", "li", "I", "vi", "is", "di", "in", "ri", "ni", "ami", "gi", "id", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "c", "ie", "d", "y", "uri", "zi", "pi", "u", "info", "e", "api", "ii", "qi", "p", "ti", "b", "x", "ind", "oi", "hi", "ini", "z", "ci", "mi", "iu", "xi", "ip", "ix", "bi", "a"], "count": ["f", "li", "cond", "val", "list", "base", "Count", "length", "match", "id", "code", "index", "key", "number", "low", "limit", "search", "n", "total", "group", "last", "sum", "min", "more", "area", "c", "type", "use", "seq", "next", "weight", "counter", "cache", "info", "current", "depth", "p", "b", "ind", "child", "start", "len", "extra", "z", "part", "size", "test", "found", "old"], "j": ["f", "uj", "li", "obj", "h", "jl", "jj", "jo", "vi", "oj", "is", "jp", "ri", "length", "ni", "id", "key", "index", "fr", "ji", "n", "si", "l", "ori", "ui", "g", "v", "jc", "ja", "c", "ie", "bj", "d", "y", "aj", "u", "e", "o", "J", "js", "ii", "adj", "qi", "p", "b", "x", "start", "je", "z", "ci", "part", "k", "ij", "a", "ix", "q"], "s_i": ["s_ori", "t_j", "ds_o", "s_j", "s_oi", "s_o", "s_in", "s_f", "t_ori", "t_oi", "ds_f", "ds_in", "ds_i"], "t_i": ["t_j", " t_li", "t__i", "tlexi", "t_li", " t_s", "ts_j", "t__s", "t_s", "t__li", "ts_eni", " t_ui", "tlexeni", "t_ui", "t_ji", "t__ui", "ts_ji", "t_eni", "tlexji", "tlexj", "ts_i"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String[] args) {\\n\\n        new Main().solve();\\n    }\\n\\n    void solve(){\\n\\n        long N, A, B;\\n\\n        Scanner sc = new Scanner(System.in);\\n        N = sc.nextLong();\\n        A = sc.nextLong();\\n        B = sc.nextLong();\\n        sc.close();\\n\\n        long numOfblue;\\n\\n        numOfblue = N / (A + B);\\n        numOfblue = numOfblue * A;\\n\\n        if(N % (A + B) >= A){\\n            numOfblue = numOfblue + A;\\n        }\\n        else{\\n            numOfblue = numOfblue + N % (A + B);\\n        }\\n\\n        System.out.println(numOfblue);\\n    }\\n\\n       \\n}", "target": "217", "substitutes": {"N": ["O", "NE", "G", "K", "I", "L", "Size", "NI", "X", "Ni", "P", "NV", "NS", "GN", "n", "NC", "S", "AN", "Y", "E", "D", "NL", "NO", "W", "F", "No", "V", "NG", "NM", "NB", "NP", "NN", "T", "C", "An", "Num", "U", "M", "NA", "Ne", "NR", "RN", "Ns", "NY", "NT", "Na", "Sum"], "A": ["AW", "FA", "SA", "Az", "I", "L", "AA", "Java", "PA", "X", "TA", "API", "JA", "P", "Q", "HA", "H", "AN", "Y", "S", "AB", "As", "OA", "EA", "IA", "E", "D", "GA", "Ab", "AP", "AI", "W", "Ma", "MA", "F", "Area", "BA", "V", "Power", "CA", "Ca", "AC", "C", "U", "Ar", "Alpha", "AM", "NA", "M", "AR", "LA", "mA", "Ha", "AY", "alpha", "AH", "Na", "a", "RA"], "B": ["G", "L", "BB", "DB", "BF", "P", "GB", "H", "Y", "BS", "AB", "UB", "E", "D", "BE", "Ab", "AP", "J", "TB", "W", "BI", "MB", "LB", "Blue", "BER", "BA", "EB", "Bar", "F", "NB", "b", "V", "C", "T", "U", "WB", "Big", "M", "RB", "SB", "Part", "HB", "BR", "Bs", "BC", "IB", "O", "OB"], "sc": ["ner", "ch", "osc", "cont", "mc", "nc", "console", "sche", "sb", "cli", "sv", "core", "cv", "cc", "bc", "esc", "asc", "pc", "ck", "ss", "anc", "scope", "ca", "SC", "se", "c", "scan", "cs", "uc", "sw", "cus", "ctx", "Sc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "sr", "soc", "sl", "sp", "ci", " SC", "sch", "sh", "ec", "tc", "cur", "coll", "lc"], "numOfblue": ["numberElborder", "numOFbird", "numOfmoney", "NumOrblue", " numOfbug", "sumOfBlue", "numElBlue", "sumofblue", "numOFBlue", "numOrmoney", "NumOrBlue", "numberElblue", "numofborder", "numOfclick", "sumOfbug", "numOrubby", "numHalfblue", "numberOfbug", "numOfubby", "numberElbug", "numOFmoney", "numOrBlue", " numOfBlue", "nOfblue", "numOFflower", "numFBlue", "NumOrbin", "numberElBlue", "numOrfine", "numofclick", "numIflarge", "numIfubby", "numOrblue", "numFbug", "numIfbug", "momOFubby", "numberOfBlue", "numOFruby", "numElblue", "NumOfbin", "momOFblue", "numOfruby", "NumOfBlue", "numIfmoney", "numIfBlue", "numofblue", "sumofbug", "NumOffine", "nOfBlue", "sumofclick", "momOFmoney", "numOrbird", "nofflower", " numOfbird", "numOFbin", "numoflarge", "sumofBlue", "numOfbin", "numofubby", "numOrruby", "nOfflower", "sumoflarge", "numHalfBlue", "sumOfclick", "numOfborder", "numofflower", "numofbird", " numofbird", "numOfflower", "momOfubby", "momOfmoney", "numOfbird", "momOFruby", "NumOrfine", "numElborder", "sumOflarge", "numOfBlue", "numofBlue", "numOrbug", "momOfblue", "numHalflarge", "numofbug", "numOffine", "numHalfclick", "nofblue", "NumOfblue", "nofBlue", "numoffine", "numFblue", " numofubby", "numOFubby", "numofbin", "numOflarge", "numOrbin", "numberOfborder", "numIfborder", "numIfruby", "numOFblue", "numOrlarge", "NumOrubby", " numOfubby", "numOfbug", "numElbug", "NumOfubby", "momOfruby", "sumOfblue", "numberOfblue", "numIfblue", " numofblue"]}}
{"code": "import java.util.Scanner;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\npublic class Main {\\n// Main\u306b\u66f8\u304d\u63db\u3048\uff01\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        // \u6574\u6570\u306e\u5165\u529b\\n        int len = Integer.parseInt(sc.next());\\n        String str = sc.next();\\n\\n        Pattern dupPattern = Pattern.compile(\"([ \\\\w]+)\\\\1\", Pattern.CASE_INSENSITIVE);\\n        Matcher matcher = dupPattern.matcher(str);\\n\\n        while (matcher.find()) {\\n            str = str.replaceAll(\"([ \\\\w]+)\\\\1\", \"$1\");\\n        }\\n        //System.out.println(str);\\n\\n        if ((len != str.length())&&(len % str.length()) == 0) {\\n            System.out.println(\"Yes\");\\n\\n        }else{\\n            System.out.println(\"No\");\\n\\n        }\\n\\n    }\\n}", "target": "161", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint n = sc.nextInt();\\n\t\tint[] p = new int[n];\\n\t\tfor(int i=0; i<n; i++) {\\n\t\t\tp[i] = sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tint count = 0;\\n\t\tfor(int i=0;i<n-2;i++) {\\n\t\t\tif(judge(p,i)) count++;\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t\t\\n\t\tsc.close();\t\\n\t}\\n\t\\n\tprivate static boolean judge(int[] p,int first) {\\n\t\tint i1 = p[first];\\n\t\tint i2 = p[first + 1];\\n\t\tint i3 = p[first + 2];\\n\t\t\\n\t\tif(i1 < i2 && i2 < i3 || i1 > i2 && i2 > i3) {\\n\t\t\treturn true;\\n\t\t}else {\\n\t\t\treturn false;\\n\t\t}\\n\t}\\n}", "target": "96", "substitutes": {"sc": ["ner", "osc", "ch", "fc", "mc", " Sc", "nc", "sche", "sb", "pl", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "server", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "cus", "uc", "cl", "sw", "Sc", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "sp", "ci", " SC", "sch", "sh", "tc", "ec", "sem", "screen", " scr"], "n": ["f", "h", "ne", "nc", "in", "no", "nt", "m", "number", "l", "v", "t", "r", "c", "d", "num", "network", "sn", "u", "e", "o", "j", "s", "dn", "b", "x", "all", "ns", "ln", "en", "nb", "w", "N", "len", "z", "size", "k", "nn", "net"], "p": ["f", "parse", "path", "wp", "jp", "in", "P", "m", "pr", "pc", "l", "pre", "it", "py", "tp", "v", "up", "like", "t", "bp", "c", "port", "pg", "app", "d", "dp", "y", "ap", "per", "pos", "array", "progress", "pi", "e", "o", "j", "u", "np", "point", "api", "current", "s", "lp", "at", "b", "pid", "fp", "ps", "pe", "pp", "vp", "hp", "sp", "part", "cp", "ip", "a"], "i": ["f", "eni", "li", "fi", "I", "vi", "di", "in", "ri", "ni", "id", "gi", "index", "ai", "io", "si", "l", "ui", "phi", "v", "it", "c", "ie", "y", "uri", "u", "pi", "o", "e", "j", "api", "ii", "info", "qi", "hi", "ti", "x", "oi", "ind", "abi", "ini", "start", "ci", "mi", "iu", "ip", "xi", "init", "ix", "chi", "multi", "bi"], "count": ["f", "cond", "list", "h", "level", "val", "base", "data", "nt", "Count", "length", "id", "limit", "number", "code", "index", "keep", "key", "total", "left", "last", "sum", "c", "type", "result", "max", "progress", "weight", "counter", "info", "cache", "depth", "current", "offset", "b", "error", "child", "start", "len", "pool", "col", "size", "found", "old", "second"], "first": ["f", "primary", "name", "string", "shift", "starting", "st", "id", "number", "index", "latest", "initial", "fourth", "alpha", "last", "self", "only", "c", "success", "same", "forward", "use", "next", "then", "fifth", "current", "full", "b", "x", "space", "third", "top", "start", "front", "First", "worst", "th", "again", "root", "part", "each", "fast", "largest", "leading", "now", "prev", "parent", "second"], "i1": ["iFirst", " i01", "ii71", "uri1", "xiFirst", "p2", "xi3", "a71", " i0", "ii3", "a3", "pi1", "a01", "ii01", "pi3", "pi8", "pi0", "xi0", "i01", " i71", "uriFirst", "xi1", "p8", "p0", "uri0", "pi2", "a1", "i0", "i71", "ii1", "i8", "uri3", "p1", "piFirst", " i8"], "i2": ["uri22", "p3", "I2", "Itwo", "p2", "xi3", " i0", "ui3", "xi22", "i5", "uriSecond", "xi0", "xi5", "xiSecond", " i22", "xi2", "itwo", "iSecond", " iSecond", "xi1", "i4", "xi4", "uri2", "p5", "p0", "uri0", "I4", "uri4", "ui4", "i0", " itwo", "ui2", "i22", " i4", "uritwo", "uri3", "p1", "I0", " i5"], "i3": [" ithree", "li2", "p3", "ithree", "I2", "I3", " i23", "p2", "xi3", "qi5", "lithree", "pi1", "I1", "li1", "i5", "pi3", "li3", "xi2", "i23", "xi1", "qi2", "p5", "pthree", "qi1", "pi2", "xi23", "qi3", "I23", "p1", "pi5"]}}
{"code": "import java.util.Scanner;\\nclass Main {\\n  public static void main(String args[]){\\n    Scanner sc = new Scanner(System.in);\\n    long money , goen ,gohyaku;\\n    money = sc.nextInt();\\n    goen = (money % 500) / 5 * 5;\\n    gohyaku = (money / 500) *1000;\\n    System.out.println(goen + gohyaku);\\n  }\\n}\\n", "target": "180", "substitutes": {"sc": ["class", "osc", "exp", " Sc", "nc", "cc", "bc", "esc", "pc", "exec", "ss", "scope", "g", "app", "SC", "se", "c", "scan", "sw", "cl", "cs", "uc", "acc", "usc", "Sc", "sq", "sci", "cr", "sf", "cb", "rc", "cer", "enc", "scl", "go", "ci", "sp", " SC", "sh", "ec", "cur", "lc"], "money": ["time", "value", "hack", "Money", "amount", "cho", "dollar", "family", "div", "mini", "base", "grade", "rice", "coin", "done", "count", "number", "paid", "mega", "timeout", "cost", "total", "million", "picture", "diff", "zero", "euro", "currency", "hello", "weight", "power", "year", "auto", "buy", "error", "interest", "price", "cow", "guy", "gross", "fine", "yahoo", "size", "angle", "margin", "stuff", "cash", "chi", "fee", "volume", "company", "music", "machine"], "goen": ["moer", "GOen", "moeni", "GOeen", "goeen", "koeen", "coin", "moeen", "koenn", "goeden", "moenn", "coens", "GOeni", "goin", "groin", " goer", "moeden", "goeni", " goenn", "coeen", "goer", "GOeden", "goenn", "koin", "koer", "moen", "coen", "groeen", " goeden", "goens", " goeen", "groens", " goeni", "groen", "koens", "koen"], "gohyaku": ["gohoyaru", "gahyaru", "gohytasin", "gohymoko", "gohyyku", "gahymase", "gohytoko", "gohyoko", "goheyoko", "gochyaku", "gahymoko", "gahymasin", "gohyaru", "gohytaru", "gohyasin", "goheyaku", "gahymaku", "gohoyasin", "gohytku", "gocheyani", "gohytaku", "gohyyaru", "gochyaru", "gohyyani", "gohymase", "gohyani", "gohyyaku", "gohymasin", "gohoyaku", "goheyaru", "gahyoko", "gocheyoko", "gahyasin", "gohoyase", "gahyase", "gohyase", "gohymaku", "gahyku", "gahymaru", "gohymaru", "gohymani", "gocheyaku", "gohymku", "gochyani", "gahyaku", "gohyyoko", "gocheyaru", "goheyani", "gochyoko", "gohyku", "gohytase", "gahymku"]}}
{"code": "/**\\n * A\\n */\\nimport java.io.*;\\nimport java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream in = System.in;\\n        Scanner scanner = new Scanner(in);\\n    \\n        int next = scanner.nextInt();\\n        int left = 1000 - (next % 1000);\\n        System.out.println(left == 1000 ? 0 : left);\\n        scanner.close();\\n    }\\n\\n}", "target": "184", "substitutes": {"in": ["f", "client", "arg", "path", "data", "is", "input", "out", "log", "err", "din", "image", "socket", "inner", "config", "n", "nin", "ac", "IN", "inn", "loader", "c", "bin", "reader", "resource", "inc", "source", "ex", "this", "user", "s", "as", "b", "pass", "rin", "file", "ini", "login", "win", "again", "stream", "ins", "i", "connection", "init", "In", "inf", "a", "r"], "scanner": ["scanker", "analyner", "anser", "caner", "Scanter", "Scanning", "scanener", "analyning", "Scanner", "Scaner", "Scanker", "ansker", "annner", "Scanener", "canener", "caninner", "anster", "annter", "canter", "scanter", "analyer", "Scaninner", "ansner", "canker", "analyinner", "anner", "canning", "annener", "scaninner", "scanning", "scaner", "canner"], "next": ["ner", "ne", "shift", "Next", "done", "nt", "err", "code", "zip", "step", "close", "last", "min", "ence", "end", "more", "page", "future", "max", "second", "feed", "seq", "prev", "adj", "reply", "current", "offset", "open", "nl", "start", "front", "eno", "set", "nr", "line", "size", "big", "conn", "now", "skip", "after"], "left": ["hide", "shift", "data", "less", "out", "length", "lf", "limit", "count", "ignore", "used", "low", "index", "cost", "inner", "n", "l", "step", "two", "last", "min", "diff", "Left", "page", "future", "NL", "small", "pos", "le", "stop", "current", "loc", "offset", "nl", "missing", "start", "wrong", "len", "sleep", "append", "partial", "leave", "size", "continue", "spread", "lost", "hidden", "right", "skip", "scale", "second"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tPrintWriter out = new PrintWriter(System.out); \\n\t\t\\n\t\tint N = Integer.parseInt(sc.next());\\n\t\tint input;\\n\t\tint first = 0, second = 0;\\n\t\tint first_i = 0;\\n\t\t\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tinput = Integer.parseInt(sc.next());\\n\t\t\tif (first < input) {\\n\t\t\t\tsecond = first;\\n\t\t\t\tfirst = input;\\n\t\t\t\tfirst_i = i;\\n\t\t\t\t\\n\t\t\t} else if (second < input) {\\n\t\t\t\tsecond = input;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tfor (int i = 0; i < N; i++ ) {\\n\t\t\tif (i == first_i) {\\n\t\t\t\tout.println(second);\\n\t\t\t} else {\\n\t\t\t\tout.println(first);\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tout.flush();\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "142", "substitutes": {"sc": ["parse", "ner", "osc", "mc", " Sc", "nc", "sb", "in", "cle", "cv", "cc", "bc", "esc", "asc", "pc", "sec", "scope", "anc", "cus", "SC", "c", "scan", "cs", "sw", "se", "uc", "cl", "con", "ctx", "Sc", "system", "sub", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "ci", "sp", " SC", "sch", "sh", "parser", "ec", "tc", "sem", "screen", "lc"], "out": ["obj", "list", "client", "arg", "name", "path", "co", "console", "in", "call", "no", "log", "err", "key", "inner", "io", "object", "exec", "null", "self", "up", "sum", "result", "write", "OUT", "ext", "output", "inc", "ex", "buffer", "this", "o", "user", "str", "word", "to", "auto", "point", "flush", "cache", "error", "pass", "file", "w", "Out", "sync", "extra", "again", "temp", "with", "copy", "part", "conn", "writer", "outer", "png", "outs", "lock"], "N": ["K", "I", "L", "Z", "Size", "NI", "X", "P", "Q", "NS", "H", "n", "NC", "S", "B", "Y", "IN", "IO", "D", "W", "J", "F", "V", "NB", "R", "NN", "T", "C", "Num", "U", "M", "NA", "Ne", "NT", "Number", "O"], "input": ["f", "value", "primary", "ahead", "I", "base", "shift", "data", "single", "Input", "in", "act", "context", "length", "id", "image", "count", "index", "inner", "config", "integer", "active", "l", "initial", "text", "step", "null", "last", "parent", "c", "type", "form", "num", "request", "inc", "output", "next", "source", "batch", "this", "current", "p", "third", "back", "state", "start", "temp", "through", "qa", "ip", "init", "inf", "argument"], "first": ["minute", "before", "primary", "none", "single", "data", "one", "st", "in", "length", "count", "index", "latest", "split", "initial", "fourth", "left", "last", "only", "type", "small", "next", "then", "output", "this", "fifth", "current", "full", "p", "third", "sup", "top", "start", "First", "front", "true", "head", "again", "part", "size", "other", "leading", "right", "now", "prev", "star", "parent", "a"], "second": ["minute", "primary", "between", "middle", "one", "latest", "south", "follow", "unit", "split", "si", "fourth", "initial", "seconds", "two", "null", "sec", "left", "last", "secondary", "only", "future", "small", "Second", "also", "next", "output", "after", "fifth", "position", "section", "another", "third", "both", "front", "again", "common", "size", "other", "leading", "lower", "secret", "later", "parent"], "first_i": [" first_I", " first_c", "last_f", "last_c", " first_u", "first_j", "first_c", "last_j", " first_j", " first_pi", "first_I", "last_i", "first_f", "first_u", "first_pi"], "i": ["f", "eni", "li", "fi", "I", "vi", "di", "in", "ni", "gi", "id", "index", "ai", "io", "n", "si", "ui", "mu", "last", "v", "phi", "it", "ie", "d", "uri", "next", "pi", "u", "e", "o", "j", "info", "ii", "api", "qi", "s", "p", "hi", "b", "x", "oi", "ini", "start", "z", "ci", "part", "mi", "xi", "iu", "init", "ix", "multi", "chi", "bi"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Scanner;\\n \\n\\n//result = Math.pow(num1, num3)\\n//StringBuffer str = new StringBuffer(hoge1);\\n//String hoge2 = str.reverse().toString();\\n//map.containsKey(A)\\n//Map<String, Integer> map = new HashMap<String, Integer>(n);\\n//ArrayList<String> cc = new ArrayList<>(n);\\n//Collections.sort(list);\\n//Array.sort(list);\\n//Arrays.asList(c).contains(\"a\")\\n\\npublic class Main {\\n\tprivate static Scanner sc = new Scanner(System.in);\\n\tstatic void p(String ans) {System.out.println(ans);};\\n\tstatic void p(int ans) {System.out.println(ans);};\\n\tstatic void p(long ans) {System.out.println(ans);};\\n\tstatic void p(double ans) {System.out.println(ans);};\\n\t//static String eikomoji[]={\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\\n\t\\n\t\\n\tpublic static void main(String[] args) {\\n\tint N=sc.nextInt();\\n\tint M=sc.nextInt();\\n\tint v=N*M;\\n\tString sum;\\n\tint wa=0;\\n\tint ac=0;\\n\tint s[]=new int[N+1];\\n\tfor(int i=0;i<M;i++) {\\n\t\tint g=sc.nextInt();\\n\t\tsum=sc.next();\\n\t\tif(s[g]==-1000) {\\n\t\tcontinue;\t\\n\t\t}\\n\t\tif(sum.equals(\"AC\")) {\\n\t\t\twa+=s[g];\\n\t\t\t//p(\"sg\"+s[g]);\\n\t\t//\tp(\"wa\"+wa);\\n\t\t\ts[g]=-1000;\\n\t\t\tac++;\\n\t\t}else {\\n\t\t\ts[g]++;\\n\t\t}\\n\t}\\n\tp(ac+\" \"+wa);\\n }\\n}\\n", "target": "48", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        String num = sc.next();\\n        if (num.contains(\"7\")) System.out.println(\"Yes\");\\n        else System.out.println(\"No\");\\n    }\\n}\\n", "target": "99", "substitutes": {"sc": ["osc", "ch", "ner", "nc", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "scope", "cus", "SC", "c", "scan", "se", "sw", "uc", "cl", "cs", "spec", "ng", "acc", "Sc", "sci", "cr", "src", "sync", "rc", "enc", "sp", "ci", " SC", "sh", "ec", "coll", "desc", "lc", "std"], "num": ["f", "valid", "gen", "name", "string", "input", "mon", "out", "nom", "no", "id", "number", "index", "hex", "unit", "n", "text", "roman", "gram", "norm", "sum", "nam", "conv", "result", "form", "empty", "su", "zero", "NUM", "digit", "str", "info", "b", "msg", "Num", "util", "mom", "line", "i", "uni", "nu", " number", "node", "check", "um"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\tString s = in.next();\\n\t\tString t = in.next();\\n\t\tString t2 = t.substring(0, t.length()-1);\\n\t\tif (s.length()== t.length()-1 && s.equals(t2)) {\\n\t\t\tSystem.out.println(\"Yes\");}\\n\t\telse {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "137", "substitutes": {"in": ["f", "gen", "h", "is", "input", "out", "lin", "cli", "err", "din", "pin", "m", "inner", "index", "readable", "n", "nin", "exec", "IN", "inn", "g", "min", "con", "c", "scan", "bin", "reader", "isin", "kin", "query", "inc", "re", "ex", "this", "inside", "as", "b", "ln", "pass", "en", "rin", "ini", "login", "win", "ins", "conn", "i", "init", "arin", "In", "std", "inf", "a", "r"], "s": ["f", "ts", "string", "is", "st", "sb", "sv", "gs", "parts", "sg", "n", "si", "l", "S", "ss", "ops", "g", "cs", "se", "su", "ls", "es", "source", "u", "e", "o", "services", "xs", "sq", "sa", "p", "b", "ns", "sf", "ps", "tests", "sl", "sys", "os", "ins", "i", "strings", "ses", "ds", "a"], "t": ["f", "ts", "tr", "h", "tree", "string", "rt", "unt", "st", "out", "token", "bt", "wt", "n", "ant", "l", "null", "text", "v", "it", "type", "tt", "d", "that", "y", "the", "txt", "u", "e", "str", "et", "o", "pt", "target", "to", "ty", "at", "p", "b", "x", "python", "T", "part", "ta", "test", "i", "flat", "qt", "tm", "title", "tf", "r"], "t2": ["tTwo", "t1", "sTwo", "tsecond", "s2", "v2", "t3", "v1", "TTwo", "T1", "vTwo", "s3", "thetwo", "the2", "ttwo", "v3", "thesecond", "s1", "T2", "Ttwo", " ttwo", "Tsecond", " t1", "the1", " tsecond", "T3"]}}
{"code": "import java.util.*;\\npublic class Main {\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n\\n    String s = sc.next();\\n    String t = sc.next();\\n    \\n    String l = \"\";\\n    String r = \"\";\\n    \\n    int n = s.length();\\n    \\n    String ans =\"\";\\n    \\n    if(s.equals(t)){\\n      ans = \"Yes\";\\n    }else{\\n    for(int i = n-1 ; i > 0 ; --i){\\n      r = s.substring(i);\\n      l = s.substring(0,i);\\n      if((r+l).equals(t)){\\n        ans = \"Yes\";\\n        break;\\n      }else{\\n        ans = \"No\";\\n      }\\n    }\\n    }\\n    \\n    System.out.println(ans);\\n    \\n  }\\n}\\n\\n", "target": "220", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "sche", "cle", "cc", "bc", "esc", "asc", "pc", "ss", "anc", "scope", "ca", "SC", "se", "c", "scan", "cs", "uc", "sw", "cl", "cus", "com", "cor", "Sc", "sq", "sci", "cr", "sync", "rc", "cer", "sp", "ci", " SC", "sch", "sh", "ec", "cur", "sem", "ser", "lc"], "s": ["f", "ts", "hs", "string", "is", "st", "abs", "sb", "in", "ssl", "sv", "gs", "m", "parts", "south", "si", "its", "S", "ss", "g", "cs", "c", "se", "y", "su", "ls", "source", "u", "e", "o", "qs", "services", "xs", "p", "b", "sets", "x", "ns", "sf", "w", "ps", "ws", "sl", "sys", "bs", "styles", "ks", "ins", "strings", "ses", "rs", "ings", "ds", "a"], "t": ["f", "ts", "tr", "h", "string", "template", "rt", "st", "out", "m", "wt", "ant", "text", "te", "g", "v", "c", "type", "tt", "d", "y", "the", "txt", "u", "e", "str", "ty", "at", "p", "ot", "b", "x", "T", "w", "z", "ta", "test", "title", "tf", "a"], "l": ["f", "li", "h", "ul", "L", "ol", "ler", "pl", "lu", "m", "v", "ll", "Lu", "c", "rl", "d", "kl", "y", "dl", "il", "le", "u", "e", "ur", "lp", "p", "b", "x", "ln", "nl", "ly", "w", "len", "sl", "z", "lr", "lc", "el"], "r": ["f", "tr", "ner", "rt", "range", "ri", "m", "fr", "pr", "dr", "v", "mr", "c", "rl", "er", "d", "ar", "re", "rb", "u", "e", "ra", "hr", "ur", "p", "R", "b", "x", "rh", "ru", "rar", "rc", "sr", "rr", "ro", "nr", "k", "rs", "cur", "lr", "right", "ir"], "n": ["f", "h", "net", "in", "nt", "length", "m", "v", "c", "d", "y", "network", "u", "e", "o", "j", "ii", "p", "b", "x", "en", "w", "N", "len", "z", "k", "size", "a"], "ans": ["ases", "grades", "ANS", "cons", "vals", "ats", "ann", "arts", "helps", "aned", "ays", "anas", "leans", "ons", "annot", "AN", "ops", "ros", "anc", "na", "aces", "ents", "ads", "errors", "lan", "ace", "ions", "nas", "ens", "rules", "aus", "asts", "acers", "atan", "san", "cas", "ants", "vers", "sk", "tan", "results", "anus", "eps", "aps", "os", "ks", "ins", "ings", "ras", "ends", "tta", "an", "ars", "ams", "ds", "ana"], "i": ["f", "eni", "li", "I", "shift", "di", "anti", "ri", "ni", "gi", "m", "inner", "index", "ai", "si", "ori", "ui", "phi", "v", "c", "ie", "zi", "hei", "u", "pi", "e", "j", "o", "api", "ii", "qi", "p", "ti", "b", "oi", "x", "ini", "z", "ci", "part", "k", "xi", "init", "iu", "ix", "multi", "bi", "a"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[]args){\\n  Scanner sc=new Scanner(System.in);\\n  int d=sc.nextInt();\\n  int as=sc.nextInt();\\n  int ar[]=new int[10000];\\n  int s=0;\\n  \\n  for(int i=0;i<as;i++){\\n  ar[i]=sc.nextInt();\\n  \\n  }\\n  for(int i=0;i<ar.length;i++){\\n  s=s+ar[i];\\n  }\\n  int f=d-s;\\n  if(f>=0){\\n\\n  System.out.println(f);\\n  }\\n  else{System.out.println(\"-1\");}\\n  }\\n}", "target": "108", "substitutes": {"sc": ["ner", "osc", "ch", "cont", "mc", " Sc", "nc", "sche", "sb", "cle", "esc", "bc", "cc", "asc", "pc", "ss", "server", "anc", "ca", "SC", "se", "c", "scan", "cs", "uc", "sw", "cus", "com", "screen", "cor", "Sc", "system", "sq", "sci", "cr", "src", "rc", "cer", "enc", "soc", "sys", "ci", "sp", " SC", "sch", "sh", "tc", "ec", "cur", "sem", "ser", "lc"], "d": ["cd", "h", "fd", "dim", "sd", "di", "dt", "in", "id", "m", "n", "l", "g", "dad", "pd", "df", "t", "dat", "c", "D", "da", "dx", "dl", "dh", "u", "e", "dy", "dc", "p", "b", "x", "q", "dd", "z", "dir", "ded", "ds", "a"], "as": ["am", "is", "AS", "are", "ad", "asi", "id", "m", "inas", "ai", "asc", "ac", "ase", "ais", "ass", "As", "da", "area", "aa", "asa", "ax", "nas", "e", "sa", "al", "p", "x", "b", "q", "ak", "ans", "k", "os", "asin", "mas", "us", "ras", "ask", "an", "ars", "ds", "a", "r"], "ar": ["list", "ner", "tar", "arg", "car", "are", "har", "in", "par", "asc", "arr", "l", "si", "ear", "order", "inter", "ray", "area", "c", "arity", "er", "air", "per", "array", "war", "at", "p", "al", "rar", "iar", "sa", "dar", "Ar", "jar", "var", "or", "lar", "AR", "arc", "far", "ara", "art", "arin", "ars", "ir", "star", "a", "r"], "s": ["sd", "is", "id", "lines", "gs", "parts", "south", "n", "si", "l", "its", "S", "ss", "steps", "g", "t", "cs", "c", "rows", "ls", "ids", "u", "e", "o", "xs", "p", "b", "sa", "sets", "ns", "x", "sf", "ps", "z", "size", "os", "ins", "ses", "rs", "ips", "fs", "ds", "a", "r"], "i": ["eni", "li", "fi", "I", "vi", "is", "di", "in", "ri", "ni", "id", "gi", "index", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "it", "c", "ie", "y", "uri", "zi", "u", "e", "o", "j", "pi", "info", "ii", "api", "qi", "p", "hi", "ti", "x", "b", "oi", "slice", "abi", "q", "ini", "z", "ci", "mi", "iu", "ip", "xi", "init", "chi", "ix", "bi", "a", "r"], "f": ["fi", "bf", "fit", "fd", "fc", "cf", "fold", "lf", "m", "fr", "n", "l", "df", "v", "g", "t", "of", "c", "inf", "form", "iff", "fe", "feed", "fx", "fun", "e", "F", "fp", "p", "b", "sf", "fen", "rf", "tf", "function", "fn", "fs", "q"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n \\n\tpublic static final MyScanner in = new MyScanner();\\n\tpublic static int[][][][] memo;\\n \\n\tpublic static void main(String[] args) {\\n \\n\t\tlong N = in.nextLong();\\n\t\tlong K = in.nextLong();\\n\t\tint cnt = 1;\\n\t\tN += 1;\\n\t\twhile(N > Math.pow(K, cnt)) cnt++;\\n \\n\t\tSystem.out.println(cnt);\\n \\n\t}\\n \\n \\n\tpublic static class MyScanner{\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString nextLine() {return sc.nextLine();}\\n\t\tString next() {return sc.next();}\\n\t\tint nextInt() {return Integer.valueOf(sc.next());}\\n\t\tlong nextLong() { return Long.valueOf(sc.next());}\\n\t}\\n}", "target": "219", "substitutes": {"in": ["impl", "is", "data", "input", "out", "lin", "log", "err", "cli", "din", "thin", "inas", "inner", "n", "nin", "l", "exec", "IN", "inn", "conv", "con", "c", "world", "cl", "bin", "reader", "kin", "isin", "OUT", "txt", "inc", "ex", "str", "inside", "iner", "p", "as", "x", "en", "rin", "src", "ini", "login", "win", "again", "asin", "line", "ins", "i", "connection", "init", "arin", "In", "r"], "memo": ["Memo", "MemO", "memO", "memos", "demo", " Memo", "dempo", "demos", " Memos", "demO", "mempo", "Mempo", " Mempo", " MemO", "Memos"], "N": ["CN", "NE", "G", "Len", "I", "L", "Z", "X", " n", "Ni", "P", "NS", "GN", "n", "NC", "Y", "Na", "E", "D", "NL", "NO", "MN", "NH", "J", "F", "V", "No", "NM", "NB", "R", "NP", "NN", "T", "C", "Num", "M", "NA", "Ne", "Ns", "ND", "NT", "Number", "O"], "K": ["O", "KB", "G", "NE", "L", "Z", "PK", "SK", "X", "KR", " k", "P", "Q", "HK", "H", "KS", "NK", "CH", "Y", "D", "J", "F", "CL", "V", "R", "NP", "NB", "KK", "C", "U", "M", "k", "KE", "AK", "Ku", "Sk", "KN"], "cnt": ["acnn", "acNT", "Cnn", "lcnt", "cnc", " cnc", "Cpt", "cnn", "acnc", "cno", "cpt", "Cnd", "ncpt", "Count", "Cct", "lcct", "count", "Cnc", "Cnt", "lcnn", " cno", " cNT", "cct", "cnd", "ncnd", "lcount", "ncNT", "lcno", " cnn", " cnd", "cNT", " count", " cct", " cpt", "CNT", "acnt", "Cno", "ncnt", "lcNT"], "sc": ["parse", "ner", "ch", "cont", "osc", "scene", " Sc", "nc", "sche", "cli", "cv", "cc", "esc", "bc", "asc", "pc", "ss", "scope", "ca", "SC", "c", "scan", "cs", "uc", "cl", "se", "sw", "cus", "spec", "cor", "usc", "Sc", "loc", "sci", "cr", "src", "sync", "rc", "cer", "sr", "soc", "scl", "sys", "sp", "ci", " SC", "sch", "sh", "ec", "isc", "cur", "tc", "coll", "ser", "lc", " scr"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Arrays;\\nimport java.util.List;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t    Scanner sc = new Scanner(System.in);\\n\t\tString[] array = sc.nextLine().split(\" \");\\n\t\tint target = Integer.parseInt(array[0]);\\n\t\tint speed = Integer.parseInt(array[1]);\\n\t\tint time = Integer.parseInt(array[2]);\\n\t\tint calc = target / speed;\\n\t\tint amari = target % speed;\\n\t\tString result = \"\";\\n\t\tif (amari > 0) {\\n\t\t\tresult = calc < time ? \"Yes\" : \"No\";\\n\t\t} else {\\n\t\t\tresult = calc <= time ? \"Yes\" : \"No\";\\n\t\t}\\n\t    System.out.println(result);\\n\t}\\n}\\n", "target": "246", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "st", "sb", "esc", "bc", "cc", "asc", "pc", "sec", "server", "scope", "anc", "SC", "c", "scan", "cs", "sw", "cl", "uc", "spec", "Sc", "system", "s", "sci", "cr", "src", "sf", "ocr", "rc", "sr", "soc", "sl", "sp", "ci", " SC", "sh", "parser", "desc", " scr"], "array": ["parse", "list", "channel", "string", "base", "instance", "range", "format", "element", "throw", "image", "number", "object", "arr", "message", "address", "video", "ray", "area", "hour", "entry", "air", "ar", "word", "analysis", "section", "auto", "audio", "archive", "axis", "row", "error", "sample", "file", "answer", "hash", "arrow", "or", "our", "alias", "function", "average", "angle", "a", "pair", "Array", "r"], "target": ["shape", "transform", "force", "path", "base", "component", "grade", "range", "cpu", "match", "core", "length", "count", "Target", "number", "timeout", "unit", "window", "device", "step", "total", "height", "address", "home", "port", "duration", "type", "project", "pointer", "site", "goal", "next", "resource", "source", "weight", "width", "loc", "year", "direction", "performance", "start", "course", "mode", "arget", "delay", "gap", "host", "parent", "scale", "distance"], "speed": ["level", "shape", "sort", "name", "path", "rate", "grade", "cpu", "match", "length", "growth", "cost", "device", "step", "ss", "race", "min", "driver", "duration", "style", "lane", "cycle", "source", "weight", "width", "power", "school", "stop", "stage", "Speed", "slow", "strength", "slice", "performance", "direction", "start", "win", "mode", "sleep", "fast", "delay", "size", "rank", "engine", "peed", "distance", "scale", "force"], "time": ["value", "name", "path", "rate", "times", "context", "clock", "length", "count", "timeout", "cost", "step", "month", "timer", "track", "home", "t", "end", "c", "type", "duration", "money", "TIME", "port", "ime", "how", "cycle", "source", "weight", "event", "info", "Time", "loc", "depth", "year", "date", "start", "sleep", "mode", "temp", "delay", "size", "host", "tim", "scale", "force"], "calc": ["Calm", " calp", "calm", "comcu", "calcu", " calcu", "Calc", "alcu", "callc", "alv", " calm", "alf", "comc", "comf", " recallc", " recalc", " calf", " recalm", "Calp", "Calv", "alc", "Calcu", " calv", "Calf", "calf", "calp", " recalf", "comp", "calv", "Callc", " callc"], "amari": ["mamar", "maru", " amaru", "armari", " amarl", "amarin", "armaru", "amamar", "amar", "amaru", "amarl", "camar", "mari", "camari", "Amaru", " ramari", " ramarin", " ramarl", "camamar", "Amari", "armar", "armamar", " amarin", "Amarl", "Amarin", " ramaru", "mar", "camaru"], "result": ["reason", "value", "valid", "comment", "compl", "string", "data", "err", "match", "cup", "search", "folder", "json", "expected", "ret", "report", "default", "account", "product", "score", "message", "sum", "diff", "attr", "success", "use", "goal", "acc", "source", "die", "card", "current", "Result", "status", "division", "error", "pass", "answer", "rc", "res", "true", "include", "response", "results", "work", "test", "feature", "cash", "coll", "func", "continue", "r"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\nclass Main{\\n\tpublic static void main(String[] args)throws NumberFormatException, IOException{\\n\t\t//System.out.print(\" \");\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n =scan.nextInt();\\n\t\tint m =scan.nextInt();\\n\t\tint l =scan.nextInt();\\n\t\tint A[][] = new int[100][100];\t//[???][?\u00a8?]\\n\t\tint B[][] = new int[100][100];\\n\t\tlong keisan = 0;\\n\\n\t\tfor(int i =0; i<n; i++){\t//??????A?????????\\n\t\t\tfor(int ii=0;ii<m;ii++){\\n\t\t\t\tA[i][ii] = scan.nextInt();\\n\t\t\t}\\n\t\t}\\n\\n\t\tfor(int i=0;i<m;i++){\t//??????B?????????\\n\t\t\tfor(int ii=0;ii<l;ii++){\\n\t\t\t\tB[i][ii] = scan.nextInt();\\n\t\t\t}\\n\t\t}\\n\\n\t\tfor (int i=0; i<n; i++){\t//?\u00a8????????????????C???\\n\t\t\tfor(int ii=0; ii<l; ii++){\\n\t\t\t\tkeisan = 0;\\n\t\t\t\tfor(int iii=0; iii<m; iii++){\\n\t\t\t\t\tkeisan += A[i][iii] * B[iii][ii];\\n\t\t\t\t}\\n\t\t\t\tSystem.out.print(keisan);\\n\t\t\t\tif(ii < l-1){\\n\t\t\t\t\tSystem.out.print(\" \");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println(\"\");\\n\t\t}\\n\t}\\n}", "target": "204", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\twhile (sc.hasNext()) {\\n\t\t\tint a = sc.nextInt();\\n\t\t\tint b = sc.nextInt();\\n\\n\t\t\tint c = a + b;\\n\\n\t\t\tint l = 0;\\n\\n\t\t\twhile (c != 0) {\\n\t\t\t\t++l;\\n\t\t\t\tc /= 10;\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(l);\\n\t\t}\\n\t}\\n\\n}", "target": "176", "substitutes": {"sc": ["ner", "ch", "osc", "cont", "nc", "sb", "sche", "cv", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "sec", "scope", "anc", "ca", "SC", "se", "scan", "cs", "uc", "cl", "sw", "com", "Sc", "sq", "sci", "cr", "src", "cb", "sync", "rc", "cer", "sr", "enc", "sl", "sp", "ci", "ct", "sch", "sh", "ec", "tc", "cur", "coll", "cmp", "lc"], "a": ["f", "am", "A", "oa", "ad", "ab", "n", "ea", "ac", "ba", "da", "ca", "area", "aa", "d", "y", "aj", "va", "auto", "s", "fa", "sa", "as", "x", "p", "au", "z", "i", "an", "ae", "alpha", "la"], "b": ["f", "bf", "pb", "h", "sb", "ab", "n", "B", "ob", "ba", "v", "fb", "aa", "d", "y", "abc", "rb", "u", "e", "o", "j", "lb", "bb", "bi", "p", "x", "cb", "ib", "z", "bs", "k", "i", "abb", "eb", "r"], "c": ["f", "li", "h", "fc", "cf", "nc", "count", "m", "cy", "cc", "bc", "n", "ac", "g", "v", "t", "cs", "uc", "cl", "d", "y", "ce", "u", "e", "o", "loc", "dc", "p", "C", "cr", "cb", "cu", "col", "z", "ci", "k", "ct", "i", "ec", "cur", "coll", "lc"], "l": ["f", "li", "list", "h", "L", "lin", "lf", "count", "n", "left", "g", "v", "ll", "t", "cl", "d", "ql", "kl", "dl", "ls", "u", "lit", "o", "j", "lb", "ld", "loc", "s", "lp", "p", "ln", "nl", "len", "sl", "col", "z", "ci", "line", "fl", "i", "lr", "la", "lc", "el"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = Integer.parseInt(sc.next());\\n\t\tint b = Integer.parseInt(sc.next());\\n\\n\t\tint m = a * b;\\n\t\tif (m % 2 == 0) {\\n\t\t\tSystem.out.println(\"Even\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"Odd\");\\n\t\t}\\n\\n\t\tsc.close();\\n\\n\t}\\n\\n}", "target": "112", "substitutes": {"sc": ["f", "class", "parse", "osc", "ch", "mc", "nc", "sb", "sche", "cms", "cc", "bc", "esc", "pc", "l", "cam", "ss", "sec", "server", "scope", "anc", "app", "ca", "SC", "se", "c", "scan", "cs", "cl", "ctx", "uc", "com", "spec", "this", "Sc", "system", "sq", "dc", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "sp", "sch", "tc", "ec", "cur", "parser", "desc", "lc"], "a": ["f", "am", "A", "oa", "ma", "n", "ea", "ac", "l", "da", "ba", "ca", "area", "c", "aa", "d", "y", "va", "pa", "e", "af", "aaa", "s", "fa", "sa", "p", "x", "as", "au", "i", "an", "ae", "alpha"], "b": ["f", "bf", "h", "base", "sb", "ab", "n", "l", "B", "ba", "v", "g", "c", "aa", "d", "y", "u", "e", "o", "j", "lb", "bb", "s", "p", "x", "nb", "z", "bs", "i", "beta", "r"], "m": ["f", "bm", "h", " M", "mc", "am", "ma", "n", "l", "mu", "g", "v", "mr", "meta", "c", "d", "ms", "mp", "fm", "mad", "cm", "e", "o", "mm", "p", "dm", "M", "pm", "md", "z", "mean", "mn", "mi", "mA", "sm", "i", "an"]}}
{"code": "public class Main{\\n  public void run(java.io.InputStream in, java.io.PrintStream out){\\n    java.util.Scanner sc = new java.util.Scanner(in);\\n/*answer*/\\n    int a, b;\\n    a = sc.nextInt();\\n    b = sc.nextInt();\\n\\n    System.out.printf(\"%d %d %f%n\", a / b, a % b, a / (double)b);\\n/*fin*/\\n    sc.close();\\n  }\\n  public static void main(String[] args){\\n    (new Main()).run(System.in, System.out);\\n  }\\n}", "target": "90", "substitutes": {"in": ["f", "h", "raw", "data", "input", "lin", "log", "err", "din", "image", "m", "inner", "socket", "io", "ac", "IN", "inn", "min", "up", "con", "c", "bin", "reader", "isin", "request", "query", "resource", "inc", "re", "ex", "source", "url", "src", "file", "ini", "login", "win", "again", "line", "stream", "ins", "i", "init", "In", "inf", "r"], "out": ["obj", "content", "list", "client", "name", "path", "string", "data", "off", "prefix", "log", "err", "group", "image", "io", "report", "window", "exec", "up", "bar", "result", "page", "bin", "write", "OUT", "ext", "output", "buffer", "ex", "source", "o", "builder", "point", "to", "s", "error", "Out", "w", "msg", "file", "pool", "again", "table", "sp", "line", "copy", "writer", "i", "outer", "engine", "outs", "screen", "r"], "sc": ["parse", "ner", "ch", "osc", "cont", "exp", "nc", "sche", "sb", "sv", "cv", "search", "cc", "bc", "esc", "asc", "pc", "si", "ss", "server", "scope", "ca", "SC", "c", "scan", "cs", "sw", "uc", "cl", "cus", "ctx", "se", "cor", "Sc", "system", "s", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "sr", "soc", "ci", "sp", " SC", "sch", "sh", "cur", "coll", "sem", "screen", "lc", "sign"], "a": ["f", "ama", "am", "ga", "A", "ab", "ad", "ma", "oa", "ai", "n", "ea", "l", "ac", "na", "ba", "da", "ca", "area", "c", "aa", "d", "y", "aj", "va", "pa", "e", "u", "aaa", "aaaa", "auto", "fa", "sa", "p", "x", "as", "ia", "access", "w", "au", "wa", "i", "an", "ae", "ada", "alpha", "la"], "b": ["f", "bf", "h", "base", "A", "sb", "db", "ab", "length", "count", "number", "n", "l", "B", "wb", "ob", "ba", "v", "g", "c", "aa", "d", "y", "mb", "rb", "pa", "e", "lb", "o", "u", "j", "bb", "dy", "p", "x", "boot", "nb", "w", "ib", "z", "bs", "k", "i", "abb", "beta", "eb", "be", "body", "bi", "fb"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\\n\t\tStringBuilder buider = new StringBuilder();\\n\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tString n = br.readLine();\\n\\n\t\tString[] Snums = br.readLine().split(\" \");\\n\\n\t\tint[]  nums = new int[Integer.parseInt(n)];\\n\\n\t\tfor(int i= 0; i<Integer.parseInt(n); i++){\\n\t\t\tnums[i]  = Integer.parseInt(Snums[i]);\\n\t\t}\\n\t\tint key =0;\\n\t\tint j=0;\\n\t\tfor(int i=1; i<nums.length; i++){\\n\t\t\tkey = nums[i];\\n\t\t\tj = i-1;\\n\t\t\tfor(int k=0; k<nums.length; k++){\\n\t\t\t\tbuider.append(nums[k]);\\n\t\t\t\tif(k != nums.length-1){\\n\t\t\t\tbuider.append(\" \");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println(buider.toString());\\n\t\t\tbuider.setLength(0);\\n\t\t\twhile (j>=0 && nums[j]>key) {\\n\t\t\t\tnums[j+1] =nums[j];\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t\tnums[j+1] =key;\\n\t\t}\\n\t\tfor(int k=0; k<nums.length; k++){\\n\t\t\tbuider.append(nums[k]);\\n\t\t\tif(k != nums.length-1){\\n\t\t\tbuider.append(\" \");\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(buider.toString());\\n\\n\\n\\n\t}\\n\\n}", "target": "69", "substitutes": {"buider": ["basier", "baside", "bugger", " buger", "boide", " buiders", "bgide", "Buinner", " buIDER", "bascher", "boider", "Buide", "Buider", "Buger", "uier", "buier", "buiser", "buygger", "buyinner", "basider", "boore", "buyider", " buinner", "BuIDER", "buycher", "uide", "basinner", "buinner", "bgiser", "boIDER", "baide", "bogger", "uider", "baiser", "buore", "buIDER", "bager", "Buiders", "bucher", "boiders", "ucher", " buiser", "basore", "buoder", " buoder", "bgoder", "boinner", "bainner", "buyier", " buide", "basgger", "buyide", "buiders", "baoder", "buger", "buide", "boger", "bgider", "buyore", "baider"], "br": ["bm", "obj", "bf", "tr", "ner", "rt", "sb", "bh", "ref", "bl", "err", "bro", "fr", "bc", "io", "orb", "dr", "arr", "fin", "bp", "bar", "buf", "er", "reader", "rb", "gr", "hr", "str", "img", "bb", "HR", "b", "cr", "yr", "cb", "src", "ber", "sr", "jar", "bs", "nr", "BR", "bridge", "browser", "lr", "Br", "r"], "n": ["nan", "content", "f", "ne", "name", "none", "nc", "net", "in", "no", "nt", "number", "m", "non", "not", "l", "na", "v", "c", "num", "sn", "rn", "u", "e", "o", "cn", "s", "dn", "p", "b", "x", "ns", "ln", "nb", "en", "N", "enc", "z", "nr", "line", "Ns", "nu", "nn", "fn", "a", "r"], "Snums": ["nubs", "snams", "Snubs", "Knum", "SNums", " Snams", "Nubs", "Snum", "Snims", "Knums", "num", " Snims", "snims", " Snubs", "snubs", "Snams", "Numes", "Nums", "SNams", "Num", "Knubs", "Snumes", "SNims", "SNubs", "Knumes", "snums", "numes"], "nums": ["unules", "nups", " numps", "yules", "lumbers", "netuss", " nodes", "manumbers", "noums", "cues", "manums", "numbers", "nanamps", "namples", "cims", "cums", " numbers", "snumbers", "nanamples", "Numbers", "innums", "nims", "uums", "nubs", "uoms", "nodes", "uubes", "nanoms", "numers", " nummies", "yummies", " nims", " nuss", " noms", "nanumbers", "snummies", " namps", "locummies", "nanubs", "naps", "innumers", "generamps", "cubes", "netummies", "nanules", "noumers", "unummies", "nubes", "snoms", "ynules", "netums", "netules", " nups", "unums", "locems", " num", "manummies", "nummies", "innummies", "nules", "nuss", "cum", "unubs", "noms", "coms", "cules", "nues", "cups", "yums", " nems", " naps", "lummies", "ynummies", " nules", "noumbers", " nues", "num", "nanums", "cummies", "yamples", "Noms", "ynuss", "Nodes", "cumers", "Num", "snodes", "uummies", "uumbers", "unumbers", " nubes", "unims", "manues", "locules", "lums", "numps", "cumbers", "ynums", "snum", "snaps", "uumps", "snubs", "innumbers", "cumps", "locums", "nanummies", "nems", "cems", "uules", "Nums", "lems", "unups", "generules", "snules", "noamples", "nanaps", "uems", "noummies", "namps", "snums", "generums", "noules", "generummies"], "i": ["f", "eni", "li", "I", "vi", "di", "in", "ri", "ni", "ik", "id", "gi", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "c", "ie", "y", "uri", "zi", "u", "pi", "o", "info", "api", "ii", "e", "qi", "hi", "ti", "p", "oi", "x", "slice", "abi", "ini", "start", "yi", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "ki", "bi"], "key": ["f", "value", "kid", "ch", "ne", "jo", "cell", "jp", "no", "ik", "length", "ek", "id", "m", "index", "code", "default", "ji", "step", "ck", "v", "min", "ok", "c", "ie", "y", "max", "u", "e", "o", "point", "qi", "p", "_", "x", "ind", "row", "ak", "start", "Key", "ky", "temp", "z", "size", "ip", "ki", "ke", "q"], "j": ["f", "uj", "li", "obj", "h", "ch", "jj", "K", "jo", "jl", "jp", "kj", "jet", "ik", "ek", "json", "ji", "l", "note", "py", "jc", "v", "g", "ok", "it", "ja", "c", "ie", "y", "aj", "u", "e", "adj", "J", "js", "ii", "dy", "qi", "o", "jon", "p", "job", "b", "x", "section", "ind", "ak", "je", "z", "size", "ij", "ki", "ke", "q"], "k": ["f", "kid", "uk", "K", "ch", "ko", "ik", "ijk", "ek", "id", "kick", "kn", "ck", "g", "v", "ok", "c", "mk", "y", "kr", "kh", "u", "e", "o", "unk", "p", "b", "x", "ku", "wk", "kk", "ak", "sk", "ka", "ky", "kat", "z", "kt", "work", "ks", "ki", "ke", "km", "dk", "q", "kw"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  private static double r;\\n  public static void main(String[] args) {\\n    Scanner stdIn = new Scanner(System.in);\\n    r = stdIn.nextDouble();\\n    double Pi = Math.PI;\\n    System.out.printf(\"%.6f %.6f\\n\", (r * r * Pi), (2 * Pi * r));\\n  }\\n}", "target": "239", "substitutes": {"r": ["f", "br", "rate", "rt", "rg", "range", "RR", "err", "Rs", "P", "m", "fr", "pr", "n", "l", "mr", "t", "c", "result", "radius", "d", "er", "ar", "re", "rb", "u", "pi", "e", "o", "j", "s", "p", "R", "b", "x", "rh", " R", "cr", "rc", "sr", "rr", "SR", "nr", "rd", "i", "rs", "lr", "rank"], "stdIn": ["gradIn", "STDIns", "gradIns", " stdIns", "gradOut", " STDIn", " stdOut", "STDIN", "STDSync", "stdIns", " STDOut", "stdIN", "STDIn", "stdSync", " STDSync", "stdOut", " STDIns", " stdSync", " stdIN", "gradIN", "STDOut"], "Pi": ["Bi", "Si", "Pr", " Xi", "Ni", "P", "Po", "Beta", "Py", "Scale", "Fi", " Sigma", "Pa", "appa", "\u03c0", "phi", "Lu", "Ti", " Ki", " Phi", "Li", " pi", "Rad", " Yi", "Xi", "pi", "Ry", "Python", "PI", " Qi", "p", "R", "Ga", " PI", "xi", "i", "Rh", "Delta", "Ru"]}}
{"code": "\\n\\nimport java.util.*;\\nimport java.io.*;\\n\\npublic class Main \\n\\n{ \\nstatic int mod=(int)Math.pow(10, 9)+7;\\n\t static FastReader sc=new FastReader(); \\n\t \\n\t\t  public static void main(String[] args) \\n    {\\n\t\t\t  int n=i();\\n\t\t\t  if(n==0)\\n\t\t\t\t  System.out.println(\"1\");\\n\t\t\t  else\\n\t\t\t\t  System.out.println(\"0\");\\n\t\t\t \\n\t\t\t  \\n\t\t  \\n    }\\n\t\t  \\n\t\t  \\nstatic int[] input(int n) {\\n\tint A[]=new int[n];\\n\t   for(int i=0;i<n;i++) {\\n\t\t   A[i]=sc.nextInt();\\n\t   }\\n\t   return A;\\n   }\\nstatic long[] inputL(int n) {\\n\tlong A[]=new long[n];\\n\t   for(int i=0;i<n;i++) {\\n\t\t   A[i]=sc.nextLong();\\n\t   }\\n\t   return A;\\n   }\\nstatic String[] inputS(int n) {\\n\tString A[]=new String[n];\\n\t   for(int i=0;i<n;i++) {\\n\t\t   A[i]=sc.next();\\n\t   }\\n\t   return A;\\n   }\\n\\n\\nstatic void input(int A[],int B[]) {\\n\t   for(int i=0;i<A.length;i++) {\\n\t\t   A[i]=sc.nextInt();\\n\t\t   B[i]=sc.nextInt();\\n\t   }\\n}\\nstatic long mod(long x) {\\n\t  return ((x%mod + mod)%mod);\\n}\\n\\n     static int i() {\\n    \t return sc.nextInt();\\n     }\\n     static String s() {\\n    \t return sc.next();\\n     }\\n     static long l() {\\n    \t return sc.nextLong();\\n     }  \\n     static void sort(int[] arr){\\n        int n = arr.length;\\n        Random rnd = new Random();\\n        for(int i=0; i<n; ++i){\\n            int tmp = arr[i];\\n            int randomPos = i + rnd.nextInt(n-i);\\n            arr[i] = arr[randomPos];\\n            arr[randomPos] = tmp;\\n        }\\n        Arrays.sort(arr);\\n     }\\n  \\n        \\n        \\n    static class FastReader \\n    { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() \\n        { \\n            br = new BufferedReader(new\\n                     InputStreamReader(System.in)); \\n        } \\n  \\n        String next() \\n        { \\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() \\n        { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() \\n        { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() \\n        { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() \\n        { \\n            String str = \"\"; \\n            try\\n            { \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) \\n            { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    } \\n} \\n\\n\\n\\n", "target": "148", "substitutes": {"mod": ["mult", "tr", "div", "exp", "dig", "lex", "modified", "dim", "Mod", "MOD", "rem", "version", "grad", "log", "id", "post", "m", "ver", "lock", "step", "sem", "sec", "reg", "order", "norm", "mu", "min", "diff", "r", "form", "d", "num", "max", "ms", "spec", "zero", "cm", "req", "add", "fun", "j", "pack", "depth", "row", " MOD", "mag", "mods", "len", " Mod", "mode", "ci", "pad", "perm", "cmp", "ix", "comp", "module", "scale", "sign", "od"], "sc": ["ctrl", "osc", "cont", "ch", "mc", "RC", " Sc", "nc", "sche", "cli", "core", "contract", "proc", "cv", "code", "esc", "bc", "cc", "config", "asc", "pc", "NC", "sec", "gram", "scope", "anc", "cus", "SC", "c", "scan", "cs", "sw", "cl", "com", "uc", "ctx", "spec", "ram", "cm", "Sc", "loc", "system", "sq", "dc", "sci", "cr", "sync", "rc", "enc", "soc", "scl", "go", "ci", " SC", "sp", "ca", "sch", "sh", "Desc", "isc", "ec", "cur", "tc", "desc", "ars", "sem", "screen", "lc"], "n": ["eni", "f", "nan", "h", "ner", "ne", "name", "none", "nc", "act", "no", "in", "nt", "ni", "count", "m", "number", "not", "l", "inn", "na", "left", "g", "v", "t", "r", "c", "d", "num", "y", "network", "sn", "ng", "u", "e", "o", "j", "nat", "adj", "s", "dn", "p", "b", "all", "ns", "nl", "nb", "en", "w", "ln", "N", "enc", "q", "len", "z", " N", "k", "size", "conn", "nu", "an", "nn", "fn", "a", "net"], "A": ["Args", "L", "Si", "Java", "End", "Class", "Y", "Ab", "Access", "MA", "Each", "U", "Obj", "Alpha", "NA", "Part", "LA", "Alt", "Int", "It", "Bu", "O", "a", "App", "Code", "Up", "Files", "File", "X", "P", "IO", "D", "Area", "F", "V", "At", "Result", "AC", "All", "Acc", "One", "AM", "Array", "Parts", "From", "Done", "alpha", "G", "True", "Az", "I", "Content", "Next", "This", "API", "HA", "AV", "Me", "As", "AP", "Action", "Ca", "An", "The", "Num", "N", "au", "El", "Space", "Arg", "AR", "In", "Info", "If", "Something", "SA", "AA", "Only", "Back", "H", "S", "E", "Instance", "Entry", "None", "Ma", "Act", "Bar", "CA", "Sa", "C", "T", "Ar", "Am", "mA"], "i": ["f", "eni", "is", "in", "gi", "key", "m", "l", "mu", "t", "c", "uri", "api", "ii", "qi", "oi", "iu", "init", "multi", "a", "h", "vi", "di", "ri", "ai", "it", "source", "u", "j", "hi", "ini", "z", "ci", "mi", "ix", "ki", "bi", "lc", "li", "fi", "I", "id", "index", "ji", "split", "ui", "phi", "g", "y", "pos", "array", "zi", "e", "o", "ei", "s", "p", "ti", "b", "slice", "yi", "my", "q", "data", "cli", "ni", "ik", "io", "si", "ori", "v", "ie", "d", "pi", "info", "abi", "start", "ip", "xi", "r"], "B": ["G", "K", "I", "L", "Z", "X", " b", "P", "Q", "H", "S", "Y", "BS", "E", "D", "W", "SB", "J", "F", "BA", "V", "BL", "R", "b", "C", "T", "U", "N", "M", "AR", "Bs", "BC", "O"], "x": ["f", "xy", "xc", "h", "xx", "X", "wx", "xf", "l", "v", "t", "c", "num", "d", "y", "max", "dx", "xes", "ax", "ex", "u", "e", "xd", "xs", "p", "w", "xxx", " X", "rx", " xx", "z", "px", "xa", "xi", "ix", "xp"], "arr": ["map", "obj", "list", "div", "arg", "tr", "data", "ann", "err", "arch", "bl", "fr", "parts", "pr", "asc", "dr", "pre", "rep", "app", "ray", "attr", "dat", "result", "aa", "att", "air", "ar", "abc", "array", "vec", "wr", "batch", "gr", "img", "aaa", "av", "stack", "all", "res", "Ar", "enc", "rr", "iq", "arm", "test", "coll", "adr", "Array", "dict", "train", "r"], "rnd": ["prnt", "Rnd", "prng", "prND", "RND", "Rng", "prrand", " rND", "rrand", " rrand", " rnt", "Rnt", "prnd", "rnt", "rng", " rng", "rND", "Rrand"], "tmp": ["xy", "obj", "data", "xxxx", "wx", "XXXX", "v", "app", "buf", "xt", "ff", "mp", "pos", "su", "txt", "xxxxxxxx", "xb", "rb", "emp", "Temp", "np", "ii", "amp", "sup", "qq", "Obj", "xxx", "kk", "len", "front", "ptr", "temp", "append", "sp", "part", "stuff", "test", "pad", "yy", "cmp", "now", "MP"], "randomPos": ["outerPtr", " randompos", "uniquePosition", "seedPos", "RandomPosition", "randomPo", "uniqueLen", "RandomPos", "seedpos", "normalPo", "uniquePos", "outerpos", " randomLen", " randomPosition", "seedPosition", "RandomLen", "randomLen", "regularPosition", "userPosition", "minipos", "outerPo", "Randompos", "regularLen", "normalPos", "regularPos", "seedLen", "uniquepos", "regularpos", "randomPosition", "miniPtr", "userPos", "normalPtr", "randomPtr", "userpos", "randompos", "miniPos", "normalpos", "userLen", "outerPos", "miniPo"], "br": ["tr", "jp", "err", "bl", "bt", "fr", "pr", "dr", "mr", "buf", "sw", "fe", "kr", "txt", "wr", "rb", "buffer", "hr", "j", "img", "gr", "b", "cr", "ocr", "ber", "res", "sr", "sp", "BR", "writer", "rs", "browser", "lr", "bridge", "Br", "bal", "r"], "st": ["ts", "ner", "string", "St", "sb", "nt", "ut", "ss", "ost", "izer", "itter", "rest", "t", "se", "ST", "fe", "ft", "sts", "sa", "STR", "sp", " tokens", " sts", "strings", "lt", "Str", "sth"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        final int N = Integer.parseInt(sc.next());\\n        final int L = Integer.parseInt(sc.next());\\n        String[] ss = new String[N];\\n        for (int i = 0; i < N; i++) {\\n            ss[i] = sc.next();\\n        }\\n        \\n        Arrays.sort(ss);\\n        String ans = \"\";\\n        for (int i = 0; i < N; i++) {\\n            ans += ss[i];\\n        }\\n        \\n        out.println(ans);\\n        \\n        out.flush();\\n    }\\n}", "target": "224", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "scene", "cont", "mc", " Sc", "nc", "sche", "in", "sb", "cle", "search", "cc", "esc", "bc", "asc", "pc", "sec", "scope", "anc", "cus", "SC", "c", "scan", "cs", "uc", "sw", "se", "ctx", "scenes", "spec", "this", "Sc", "system", "sci", "cr", "src", "rc", "cer", "soc", "ci", "sp", " SC", "sch", "ec", "tc", "screen", "lc"], "out": ["obj", "list", "client", "arg", "name", "path", "string", "input", "prefix", "in", "log", "err", "cli", "group", "io", "report", "object", "exec", "process", "IN", "self", "up", "result", "bin", "write", "password", "OUT", "output", "serv", "ex", "buffer", "source", "o", "str", "script", "cache", "word", "user", "pid", "flush", "error", "pass", "file", "Out", "w", "sync", "println", "pool", "extra", "again", "temp", "copy", "line", "part", "conn", "writer", "outer", "png", "outs", "lock", "parent"], "N": ["G", "K", "Len", "I", "Z", "Size", "X", " n", "Ni", "P", "Q", "NS", "H", "n", "S", "Y", "B", "IN", "E", "D", "NL", "network", "J", "F", "V", "No", "R", "NB", "NN", "T", "C", "U", "Num", "M", "NA", "Ne", "Ns", "NT", "Number", "O", "KN"], "L": ["LT", "EL", "Length", "Len", "Z", "X", "P", "l", "S", "UL", "Limit", "B", "LO", "Li", "NL", "W", "SL", "LR", "F", "CL", "V", "BL", "LI", "LL", "M", "LU"], "ss": ["\u00df", "ts", "aws", "sv", "iss", "uss", "ys", "ass", "ros", "ists", "cs", "pps", "hess", "ls", "fts", "es", "sts", "services", "xs", "s", "icks", "ns", "pass", "SS", "ps", "vers", "ress", "ws", "styles", "css", "os", "ins", "ks", "strings", "ses", "rs", "rss", "WS", "ess", "ars", "ips", "fs", "ds", "oss"], "i": ["f", "eni", "li", "fi", "I", "data", "is", "di", "in", "ri", "id", "gi", "key", "index", "inner", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "adi", "ie", "d", "uli", "uri", "zi", "u", "e", "o", "pi", "j", "info", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "abi", "ini", "z", "ci", "mi", "ip", "xi", "iu", "init", "chi", "ix", "multi", "bi"], "ans": ["names", "anks", "ANS", "cons", " scans", " chars", "ats", "ann", "aned", "anas", "ays", "amps", "AN", "acts", "ros", "annels", "anc", "aces", "cs", "ents", "scan", "ads", "aning", "lan", "ls", "es", "nas", "ids", "ens", "aus", "s", "as", "ns", "atan", "cas", "ants", "vers", "sk", " spans", "acs", "os", "ks", "ins", "ras", "rs", "an", "outs", "ars", "ons"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        ArrayList<Integer> list = new ArrayList<>();\\n        list.add(1);\\n        list.add(2);\\n        list.add(3);\\n        list.remove(list.indexOf(a));\\n        list.remove(list.indexOf(b));\\n        System.out.println(list.get(0));\\n    }\\n}\\n", "target": "236", "substitutes": {"sc": ["osc", "ch", "fc", "mc", " Sc", "nc", "sche", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "server", "scope", "ca", "SC", "c", "scan", "cs", "uc", "cl", "sw", "se", "cus", "com", "ctx", "acc", "usc", "Sc", "system", "sq", "sci", "cr", "src", "rc", "cer", "enc", "ci", "sp", " SC", "sch", "ec", "tc", "cur", "lc"], "a": ["f", "name", "ama", "ga", "A", "ab", "ad", "m", "ai", "n", "ac", "da", "ba", "area", "ca", "aa", "c", "asa", "abc", "aj", "va", "u", "api", "aaa", "fa", "sa", "p", "x", "as", "au", "i", "art", "ada", "ae", "alpha", "la"], "b": ["f", "h", "sb", "ab", "bas", "n", "l", "B", "v", "c", "d", "y", "rb", "u", "e", "o", "j", "lb", "bb", "p", "x", "nb", "cb", "ib", "z", "bs", "k", "i", "r"], "list": ["map", "li", "cont", "tree", "ul", "string", "base", "data", "old", "one", "st", "out", "act", "cli", "bl", "group", "key", "keep", "collection", "index", "low", "l", "block", "null", "pre", "queue", "left", "v", "loop", "diff", "result", "type", "cl", "chain", "entry", "array", "batch", "add", "e", "word", "pull", "info", "full", "p", "stack", "all", "and", "sync", "see", "set", "LIST", "table", "view", "part", "lists", "i", "test", "coll", "pair", "check", "la", "lc", "parent"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint N=sc.nextInt();\\n\t\tchar[] S = sc.next().toCharArray();\\n\t\tchar[] T = sc.next().toCharArray();\\n\t\tsc.close();\\n\t\tString rs = String.valueOf(S);\\n\t\tint num = rs.length();\\n\\n\t\tfor(int i=0; i<num; i++) {\\n\t\t\tSystem.out.print(S[i]);\\n\t\t\tSystem.out.print(T[i]);\\n\t\t}\\n\t}\\n}\\n", "target": "200", "substitutes": {"sc": ["f", "class", "parse", "ner", "ch", "osc", "cont", "fc", "mc", " Sc", "nc", "sb", "sche", "search", "cv", "esc", "bc", "cc", "asc", "pc", "l", "ss", "server", "scope", "anc", "app", "cus", "SC", "se", "c", "scan", "sw", "cl", "cs", "uc", "con", "cm", "Sc", "system", "sq", "dc", "sci", "cr", "src", "sf", "sync", "rc", "cb", "sr", "soc", "sp", " SC", "sch", "sh", "ec", "tc", "cur", "coll", "sem", "lc"], "N": ["G", "K", "Len", "I", "L", "Size", "A", "NI", " n", "P", "NS", "SN", "n", "B", "D", "NL", "NUM", "F", "V", "R", "C", "nb", "Num", "M", "Ns", "NT", "O"], "S": ["SA", "G", "DS", "I", "L", "A", "SK", "X", "Rs", "P", "NS", "SN", "IN", "SH", "RS", "SC", "ST", "D", "OS", "SL", "F", "services", "V", "s", "R", "TS", "SS", "U", "C", "M", "CS", "SU", "SE", "SR", "Sl", "PS", "SP", "SI"], "T": ["TF", "TL", "LT", "L", "Z", "TG", "TX", "X", "P", "TT", "H", "PT", "Y", "B", "t", "E", "D", "RT", "TM", "W", "F", "V", "TC", "R", "TS", "C", "U", "M", "TV", "NT", "TR", "O"], "rs": ["ARS", "tr", "rt", "RC", "RR", "ri", "Rs", "ris", "ss", "ros", "RS", "mr", "cs", " Rs", "rows", "su", "ls", "LS", "xs", "R", "ns", "TS", "src", "SS", "rc", "res", "sr", "CS", "ws", "rr", "SR", "ks", "ras", "rss", " RS", "ars", "TR", "acks", "ds", "r"], "num": ["f", "mult", "div", "dim", "out", "no", "nt", "length", "id", "count", "number", "index", "m", "unit", "n", "nam", "con", "pos", "NUM", "inc", "u", "loc", "p", "b", "x", "om", "en", "nb", "Num", "len", "part", "umi", "mn", "comb", "uni", "nu", "multi", "nn", "um", "span"], "i": ["f", "eni", "li", "fi", "I", "vi", "di", "ri", "ni", "id", "gi", "index", "ai", "io", "n", "si", "l", "ui", "mu", "phi", "v", "t", "c", "uli", "zi", "uri", "u", "pi", "e", "j", "o", "info", "ii", "qi", "ti", "hi", "b", "oi", "p", "slice", "abi", "ci", "part", "mi", "ip", "xi", "init", "chi", "multi", "ix", "bi", "lc", "r"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    long in = sc.nextLong();\\n    long out = 1L;\\n    while(in != 0){\\n      in /= 2;\\n      out *= 2;\\n    }\\n    System.out.println(out - 1);\\n  }\\n}", "target": "51", "substitutes": {"sc": ["parse", "ner", "osc", "ch", "inst", " Sc", "nc", "cc", "bc", "esc", "io", "pc", "exec", "ss", "sec", "scope", "app", "SC", "se", "c", "scan", "sw", "cs", "com", "uc", "cl", "acc", "Sc", "sq", "dc", "sci", "cr", "sync", "cb", "rc", "soc", "sp", "ci", " SC", "ec", "cur"], "in": ["f", "arg", "name", "path", "cin", "data", "input", "version", "lin", "token", "log", "err", "din", "id", "socket", "inner", "index", "m", "pin", "limit", "n", "nin", "exec", "IN", "inn", "min", "con", "c", "bin", "d", "reader", "isin", "inc", "ax", "buffer", "source", "pull", "inside", "pid", "pass", "ini", "sin", "start", "len", "login", "win", "again", "size", "ins", "margin", "i", "connection", "init", "In", "gin", "old", "inf", "r"], "out": ["obj", "name", "data", "cmd", "off", "version", "prefix", "call", "no", "log", "err", "id", "limit", "number", "index", "pin", "timeout", "code", "io", "inner", "n", "null", "IN", "pre", "up", "sum", "diff", "result", "page", "write", "num", "bin", "OUT", "max", "bit", "inc", "output", "ex", "word", "o", "user", "cache", "dev", "b", "all", "error", "Out", "sync", "file", "extra", "again", "line", "conn", "writer", "outer", "init", "outs", "In", "lock", "screen", "net"]}}
{"code": "/**\\n * Created at 20:55 on 2019-07-07\\n */\\n\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n  static FastScanner sc = new FastScanner();\\n  static PrintStream out = System.out;\\n  static PrintWriter pw = new PrintWriter(out);\\n\\n  static final int[] dx = {0, 1, 0, -1};\\n  static final int[] dy = {-1, 0, 1, 0};\\n\\n  static final long MOD = (long) (1e9 + 7);\\n  static final long INF = Long.MAX_VALUE / 2;\\n\\n  public static class Solver {\\n    public Solver() {\\n\\n      int N = sc.nextInt();\\n      int A = sc.nextInt();\\n      int B = sc.nextInt();\\n\\n      out.println(Math.min(N*A, B));\\n\\n    }\\n  }\\n\\n  public static void main(String[] args) {\\n    new Solver();\\n  }\\n\\n  static class FastScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n\\n    private boolean hasNextByte() {\\n      if (ptr < buflen) {\\n        return true;\\n      } else {\\n        ptr = 0;\\n        try {\\n          buflen = in.read(buffer);\\n        } catch (IOException e) {\\n          e.printStackTrace();\\n        }\\n        if (buflen <= 0) {\\n          return false;\\n        }\\n      }\\n      return true;\\n    }\\n\\n    private int readByte() {\\n      if (hasNextByte()) return buffer[ptr++];\\n      else return -1;\\n    }\\n\\n    private static boolean isPrintableChar(int c) {\\n      return 33 <= c && c <= 126;\\n    }\\n\\n    private void skipUnprintable() {\\n      while (hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;\\n    }\\n\\n    public boolean hasNext() {\\n      skipUnprintable();\\n      return hasNextByte();\\n    }\\n\\n    public String next() {\\n      if (!hasNext()) throw new NoSuchElementException();\\n      StringBuilder sb = new StringBuilder();\\n      int b = readByte();\\n      while (isPrintableChar(b)) {\\n        sb.appendCodePoint(b);\\n        b = readByte();\\n      }\\n      return sb.toString();\\n    }\\n\\n    public long nextLong() {\\n      if (!hasNext()) throw new NoSuchElementException();\\n      long n = 0;\\n      boolean minus = false;\\n      int b = readByte();\\n      if (b == '-') {\\n        minus = true;\\n        b = readByte();\\n      }\\n      if (b < '0' || '9' < b) {\\n        throw new NumberFormatException();\\n      }\\n      while (true) {\\n        if ('0' <= b && b <= '9') {\\n          n *= 10;\\n          n += b - '0';\\n        } else if (b == -1 || !isPrintableChar(b)) {\\n          return minus ? -n : n;\\n        } else {\\n          throw new NumberFormatException();\\n        }\\n        b = readByte();\\n      }\\n    }\\n\\n    public int nextInt() {\\n      return (int) nextLong();\\n    }\\n\\n    public int[] nextIntArray(int N, boolean oneBased) {\\n      if (oneBased) {\\n        int[] array = new int[N + 1];\\n        for (int i = 1; i <= N; i++) {\\n          array[i] = sc.nextInt();\\n        }\\n        return array;\\n      } else {\\n        int[] array = new int[N];\\n        for (int i = 0; i < N; i++) {\\n          array[i] = sc.nextInt();\\n        }\\n        return array;\\n      }\\n    }\\n\\n    public long[] nextLongArray(int N, boolean oneBased) {\\n      if (oneBased) {\\n        long[] array = new long[N + 1];\\n        for (int i = 1; i <= N; i++) {\\n          array[i] = sc.nextLong();\\n        }\\n        return array;\\n      } else {\\n        long[] array = new long[N];\\n        for (int i = 0; i < N; i++) {\\n          array[i] = sc.nextLong();\\n        }\\n        return array;\\n      }\\n    }\\n  }\\n\\n}\\n", "target": "213", "substitutes": {"sc": ["osc", "cont", "exp", " Sc", "nc", "console", "cle", "cli", "cv", "cc", "bc", "esc", "config", "asc", "pc", "cam", "ss", "sec", "server", "scope", "anc", "cus", "SC", "scan", "cs", "uc", "sw", "cl", "se", "ctx", "Sc", "system", "sq", "sub", "sci", "cr", "src", "sync", "rc", "scl", "or", "soc", "ci", "sp", " SC", "ca", "sh", "ec", "tc", "desc", "sem", "screen", "lc"], "out": ["client", "list", "ch", "name", "path", "string", "raw", "input", "prefix", "log", "err", "image", "io", "report", "window", "exec", "IN", "up", "print", "result", "write", "bin", "OUT", "STDOUT", "resource", "inc", "output", "ex", "source", "o", "info", "user", "cache", "auto", "str", "flush", "p", "error", "Out", "w", "file", "println", "pool", "view", "temp", "line", "ins", "writer", "connection", "png", "outs", "In"], "pw": [" pwd", "spw", " pwt", "lpW", "lpw", "lpwd", "pW", "spW", "spwt", "pwd", "lpwt", "pwt", "spwd", " pW"], "dx": ["cd", "xy", "dim", "di", "dt", "dist", "wx", "df", "wd", "da", "iff", "dp", "dl", "dh", "fx", "xd", "xs", "dn", "dc", "sq", "dq", "dm", "du", "dd", "md", "ix", "xp", "ds"], "dy": ["gb", "xy", "di", "dt", "db", "zy", "sy", "hh", "dj", "py", "d", "dp", "y", "dl", "dh", "ady", "dB", "ld", "ii", "dn", "dc", "dq", "dm", "dd", "md", "yy", "lon", "ds"], "MOD": [" mod", " mag", " MS", " RA", "Mod", " DM", " Mi", " Max", " CL", " DL", "UL", " CR", " MAD", "MAG", " RR", "ARM", " JD", "PI", " sup", "mod", "JD", "SIZE", " Mod", "MAX", " MA", " MAX", " CC", "MIN"], "INF": ["INf", "Inf", "inF", "INI", "inEF", " INI", "INEF", "InEF", "InI", " INf", "inf", "inI", "InF", " INEF"], "N": ["CNN", "G", "K", "I", "L", "Z", "X", "Ni", "P", "Q", "NS", "H", "NC", "S", "Y", "E", "D", "NL", "NH", "W", "J", "F", "V", "R", "NB", "NN", "T", "C", "U", "M", "Ne", "Ns", "NT", "O"], "A": ["G", "SA", "K", "I", "L", "AA", "X", "AD", "P", "H", "HA", "S", "Y", "E", "D", "AP", "Ma", "F", "BA", "V", "CA", "AF", "AC", "T", "C", "An", "U", "M", "NA", "AR", "LA", "mA", "DA", "O", "a"], "B": ["QB", "G", "I", "Bi", "L", "Z", "AA", "DB", "CB", "X", "BF", "P", "GB", "Q", "Y", "S", "BS", "AB", "UB", "E", "D", "W", "SB", "J", "LB", "F", "EB", "BA", "V", "BL", "BI", "R", "NB", "T", "C", "U", "WB", "M", "Bs", "BC", "O", "OB"], "in": ["f", "client", "data", "is", "input", "lin", "cli", "err", "din", "inner", "io", "readable", "l", "exec", "IN", "inn", "v", "min", "con", "bin", "d", "cl", "reader", "isin", "resource", "inc", "read", "source", "ex", "this", "url", "p", "as", "pass", "reading", "rin", "ini", "or", "win", "again", "ins", "connection", "init", "In", "inf", "a", "r"], "buffer": ["Buffer", "uffer", "shape", "comment", "data", "input", "padding", "buff", "length", "limit", "binary", "number", "seed", "image", "document", "texture", "window", "message", "block", "queue", "address", "server", "bar", "result", "buf", "layer", "bin", "reader", "resource", "transfer", "output", "batch", "source", "cache", "url", "position", "bb", "iter", "flush", "slice", "file", "table", "header", "capacity", "pad", "memory", "reference"], "ptr": ["lf", "code", "dr", "pend", "patch", "t", "attr", "buf", "ext", "ft", "pull", "handle", "offset", "coord", "ffff", " pointer", "ct", "const", "tr", "br", "shift", "buff", "ctr", "Po", "address", "ff", "uint", " stride", "fp", "dc", "scroll", "sp", "cur", "trace", "cmp", "fee", " tr", "pl", "ref", "index", "tp", "inter", "push", "xt", "type", "pos", "prot", "p", "tmp", "slice", "sth", "fd", "inst", "etr", "length", "fr", "pointers", "port", "ect", "pointer", "fe", "Ptr", "req", "str", "pt", "loc", "flush", "src", "pty", "rc", "len", "addr", "pad"], "buflen": ["bugelen", "buflun", "buflize", "bucelens", "bucolize", "bufilen", "Buclen", "biflen", "Buflen", "bufilax", "bicelen", "biflsten", " bulln", "bucelen", "bicelsten", "buflenn", "buflax", "buflend", " bullend", "bufcine", "Buflener", " bullen", "bullens", "bulln", "buglsten", "bufcener", "buselon", " buflize", "buselens", "buclax", "buFlend", "bufcen", "bucelon", "bucolun", "bucolen", "Bufline", "buflsten", "buglon", " bullens", "Buclener", "buglen", "buFln", "bugelenn", "buFlun", "bucoln", "bullun", " buflun", "bufiline", "bullen", "buFlenn", "bullenn", " bullize", "bullize", " bullenn", "buflens", "bicelon", "buselen", "buglens", "bucelsten", "bicelens", " bufln", "Bucline", "buFlize", "bucline", "bullend", "buclen", "Buflax", " bullun", "bufln", "bufilener", "buclener", "buflener", "biflon", "buselsten", "buFlens", " buflend", "bugelend", " buflens", "buflon", " buflenn", "bufline", "buFlen", "Buclax", "bufcax", "biflens", "bugelens"], "c": ["f", "xc", "h", "ch", "fc", "nc", "count", "m", "code", "cc", "cy", "pc", "l", "ac", "sec", "g", "v", "t", "cs", "uc", "d", "ce", "cm", "u", "e", "dc", "p", "x", "C", "cr", "rc", "enc", "cu", "z", "ci", "k", "ct", "ec", "lc", "r"], "sb": ["gb", "usb", "bm", "bf", "pb", "osc", " SB", "BB", "buff", "bh", "ssl", "db", "bt", "obb", "bc", "sg", "orb", "wb", "zb", " eb", "ob", "bp", "bj", "su", "mb", "rb", "xb", "stab", "SB", "lb", "bb", "s", "sq", "sa", "nb", "sf", "cb", "kb", "ib", "bs", "sp", "sm", "abb", "eb", "lab", "fb", "bg", "sth", "rob"], "b": ["f", "bf", "h", "br", "base", "ab", "db", "length", "bl", "bc", "object", "l", "wb", "ob", "ba", "v", "fb", "bound", "bar", "aa", "bin", "d", "y", "abc", "mb", "xb", "rb", "e", "lb", "o", "bb", "bi", "p", "x", "nb", "cb", "ib", "bd", "bs", "function", "abb", "be", "body", "func", "eb", "a", "r"]}}
{"code": "\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(final String[] args) {\\n        final Scanner sc = new Scanner(System.in);\\n        // \u6574\u6570\u306e\u5165\u529b\\n        // final int a = sc.nextInt();\\n        // \u6587\u5b57\u5217\u306e\u5165\u529b\\n        // final String s1 = sc.next();\\n        final int d = sc.nextInt();\\n        final int n = sc.nextInt();\\n        sc.close();\\n        double result = 0;\\n        int nn = n;\\n        if (nn == 100) {\\n            nn = 101;\\n        }\\n        if (d == 0) {\\n            result = nn;\\n        } else {\\n            result = nn * Math.pow(100, d);\\n        }\\n\\n        System.out.println((int) result);\\n    }\\n}\\n", "target": "245", "substitutes": {"sc": [" cont", " pars", " scorer", " Sc", "nc", "ann", " arr", "sb", "out", "bc", " sl", "ss", " ans", "gram", "SC", " rc", "scan", "c", "sw", "se", " src", "Sc", "sq", " res", "rc", " SC", " ser", " scr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString line1 = sc.nextLine();\\n\t\tint n = Integer.parseInt(line1);\\n\\n\t\tString line2 = sc.nextLine();\\n\t\tString[] kari = line2.split(\" \");\\n\t\tint[] A = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tA[i] = Integer.parseInt(kari[i]);\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(line2);\\n\\n\t\tint v = 0;\\n\t\tint j = 0;\\n\\n\t\tfor (int i = 1; i < n; i++) {\\n\t\t\tv = A[i];\\n\t\t\tj = i - 1;\\n\t\t\twhile (j >= 0 && A[j] > v) {\\n\t\t\t\tA[j + 1] = A[j];\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t\tA[j + 1] = v;\\n\\n\t\t\tfor (int k = 0; k < n - 1; k++) {\\n\t\t\t\tSystem.out.print(A[k]);\\n\t\t\t\tSystem.out.print(\" \");\\n\t\t\t}\\n\t\t\tSystem.out.println(A[n - 1]);\\n\\n\t\t}\\n\\n\t}\\n\\n}", "target": "69", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tint n;\\n\t\tif(A <= 9 && B <= 9) {\\n\t\t\tn = A * B;\\n\t\t}else {\\n\t\t\tn = -1;\\n\t\t}\\n\t\tSystem.out.println(n);\\n\t}\\n\\n}\\n", "target": "58", "substitutes": {"sc": ["ner", "ch", "osc", "cont", "nc", "sche", "cv", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "server", "g", "app", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "com", "acc", "str", "Sc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "sl", "sp", "ci", " SC", "sh", "ec", "tc", "cur", "ser"], "A": ["AW", "SA", "Az", "I", "L", "AA", "Java", "PA", "X", "API", "P", "HA", "AV", "S", "Y", "AB", "As", "OA", "EA", "IA", "E", "D", "Ang", "AP", "MA", "Area", "F", "Adam", "BA", "CA", "Ca", "AC", "T", "C", "U", "N", "M", "NA", "AR", "LA", "mA", "Array", "DA", "O", "a", "RA", "ID"], "B": ["MB", "QB", "G", "K", "I", "L", "BB", "DB", "CB", "X", "BF", "P", "GB", "Q", "H", "Y", "S", "BS", "AB", "UB", "E", "D", "BE", "AP", "J", "SB", "BI", "LB", "F", "BER", "BA", "BL", "V", "EB", "R", "b", "NB", "FB", "C", "T", "WB", "N", "BR", "Bs", "Ub", "BC", "IB", "O", "OB"], "n": ["f", "nan", "ne", "name", "none", "nc", "out", "no", "nt", "count", "m", "number", "not", "l", "na", "g", "min", "t", "c", "num", "d", "pos", "ng", "sn", "e", "o", "j", "cn", "p", "b", "x", "ns", "ln", "nb", "nl", "N", "pn", "len", "z", "nr", " N", "k", "conn", "i", "nu", "nn", "fn", "nit", "a", "net"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  static int head = 0;\\n  static int tail = 0;\\n  static int max = 100000;\\n  static int[] queue = new int[max];\\n  static String[] str = new String[max];\\n\\n  public static void initialize() {\\n    head = tail = 0;\\n  }\\n  public static boolean isEmpty() {\\n    return head == tail;\\n  }\\n  public static boolean isFull() {\\n    return head == (tail + 1) % max;\\n  }\\n  public static void enqueue(int x, String s) {\\n    if(isFull()) {\\n      throw new IllegalArgumentException(\"\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\");\\n    } else {\\n      queue[tail] = x;\\n      str[tail] = s;\\n      if(tail + 1 == max) {\\n        tail = 0;\\n      } else {\\n        tail++;\\n      }\\n    }\\n  }\\n  public static int dequeue() {\\n    if(isEmpty()) {\\n      throw new IllegalArgumentException(\"\u30a2\u30f3\u30c0\u30fc\u30d5\u30ed\u30fc\");\\n    } else {\\n      int x = queue[head];\\n      if(head + 1 == max) {\\n        head = 0;\\n      } else {\\n        head++;\\n      }\\n      return x;\\n    }\\n  }\\n  public static String destr() {\\n    if(head == 0) {\\n      return str[max - 1];\\n    } else {\\n      return str[head - 1];\\n    }\\n  }\\n\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int q = sc.nextInt();\\n    String s = \"\";\\n    int a = 0;\\n    int time = 0;\\n    for(int i = 0; i < n; i++) {\\n      s = sc.next();\\n      a = sc.nextInt();\\n      if(a <= q) {\\n        time += a;\\n        System.out.println(s + \" \" + time);\\n      } else {\\n        time += q;\\n        enqueue(a - q, s);\\n      }\\n    }\\n    while(!isEmpty()) {\\n      a = dequeue();\\n      s = destr();\\n      if(a <= q) {\\n        time += a;\\n        System.out.println(s + \" \" + time);\\n      } else {\\n        time += q;\\n        enqueue(a - q, s);\\n      }\\n    }\\n  }\\n}\\n\\n", "target": "231", "substitutes": {"head": ["focus", "name", "anch", "miss", "off", "call", "count", "code", "key", "cost", "block", "patch", "c", "fix", "ax", "draw", "pull", "load", "position", "depth", "offset", "back", "view", "header", "size", "init", "check", "run", "before", "h", "shift", "heads", "limit", "ck", "height", "min", "style", "bug", "weight", "test", "tag", "client", "HEAD", "id", "post", "keep", "index", "left", "end", "push", "first", "pos", "Head", "target", "stop", "row", "child", "stick", "host", "ack", "parent", "clean", "thread", "shape", "wrap", "length", "window", "commit", "rest", "port", "oct", "pass", "rc", "start", "front", "sleep", "root", "right", "body", "rank"], "tail": ["name", "ail", "prefix", "align", "count", "tails", "key", "timeout", "zip", "l", "total", "patch", "fix", "ax", "pull", "depth", "offset", "size", "lock", "fail", "roll", "poll", "match", "limit", "lead", "min", "cat", "bug", "cycle", "weight", "width", "letter", "fill", "work", "test", "tag", "term", "out", "index", "null", "left", "last", "end", "buffer", "target", "stop", "iter", "tick", "sync", "child", "win", "delay", "foot", "trigger", "thread", "wrap", "base", "length", "commit", "master", "oct", "port", "rest", "forward", "batch", "fat", "start", "tip", "len", "sleep", "duty", "body", "right"], "max": ["rand", "wrap", "orig", "name", "range", "out", "act", "no", "az", "id", "limit", "code", "count", "key", "cut", "step", "ck", "total", "patch", "custom", "height", "last", "min", "parent", "sum", "end", "rest", "con", "c", "rev", "cat", "chain", "can", "num", "ax", "cycle", "cache", "load", "depth", "auto", "mod", "row", "all", "strip", "w", "start", "Max", "win", "col", "view", "MAX", "line", "size", "k", "comb", "node", "right"], "queue": ["f", "list", "channel", "force", "string", "base", "quote", "input", "prefix", "group", "id", "limit", "count", "index", "code", "config", "message", "block", "que", "ue", "server", "type", "buf", "entry", "seq", "array", "buffer", "batch", "progress", "event", "cache", "priority", "job", "status", "stack", "file", "pool", "header", "line", "menu", "sequence"], "str": ["sta", "tr", "br", "div", "exp", "name", "inst", "string", "worker", "data", "input", "stri", "st", "expr", "err", "id", "code", "inner", "fr", "dr", "arr", "text", "exec", "sec", "g", "style", "spec", "ext", "txt", "next", "gr", "url", " string", "p", "STR", "strip", "pass", "res", "start", "ress", "char", "sl", "sp", "struct", "strings", "rs", "Str", "r"], "x": ["f", "xy", "xc", "val", "h", "name", "xxxx", "xx", "X", "wx", "id", "code", "index", "min", "v", "t", "end", "c", "ctx", "xt", "tx", "d", "y", "pos", "dx", "array", "ax", "xes", "ex", "u", "e", "xs", "p", "row", "w", "xxx", "pe", "rx", "z", "size", "k", "xi", "ix", "xp"], "s": ["f", "ts", "h", "hs", "name", "string", "is", "input", "sb", "sym", "sv", "lines", "m", "gs", "sy", "session", "si", "l", "service", "seconds", "ss", "S", "g", "v", "t", "sign", "c", "d", "y", "spec", "ls", "request", "u", "e", "o", "js", "qs", "services", "xs", "p", "as", "b", "sa", "ns", "has", "sync", "w", "ps", "sf", "ws", "ans", "sl", "z", "sp", "k", "os", "ins", "ings", "strings", "ses", "rs", "ds", "r"], "sc": ["ner", "ch", "osc", "cont", "exp", "mc", " Sc", "nc", "sche", "cle", "cv", "esc", "bc", "cc", "com", "asc", "pc", "NC", "si", "exec", "ck", "ss", "server", "scope", "ca", "SC", "c", "scan", "cs", "uc", "sw", "se", "cus", "cl", "ctx", "Sc", "loc", "system", "sq", "dc", "sci", "row", "cr", "sync", "rc", "cer", "enc", "sr", "sp", "ci", " SC", "sch", "sh", "ec", "cur", "desc", "lc"], "n": ["f", "nc", "net", "nt", "count", "m", "l", "v", "t", "c", "num", "d", "y", "sn", "u", "e", "o", "j", "p", "b", "ns", "nl", "nb", "en", "w", "N", "z", "k", "r"], "q": ["f", "h", "ch", "in", "length", "id", "count", "m", "Q", "quick", "que", "g", "v", "t", "c", "d", "y", "query", "u", "e", "qs", "depth", "eq", "sq", "p", "dq", "qq", "w", "back", "qu", "z", "delay", "k", "quant", "size", "qa", "sh", "qt"], "a": ["f", "sha", "am", "data", "ga", "A", "oa", "ma", "count", "m", "ai", "active", "ea", "ac", "l", "na", "ba", "da", "t", "ca", "c", "aa", "area", "y", "aj", "va", "u", "pa", "o", "j", "api", "auto", "fa", "as", "sa", "p", "b", "ia", "za", "at", "access", "action", "w", "au", "ha", "z", "ata", "wa", "qa", "an", "activity", "ae", "alpha", "la", "span"], "time": ["value", "f", "h", "comment", "name", "path", "times", "rate", "am", "data", "expression", "clock", "length", "live", "id", "count", "m", "code", "timeout", "image", "cost", "g", "loop", "sum", "t", "port", "duration", "type", "style", "money", "complex", "ime", "y", "event", "age", "info", "stage", "depth", "year", "date", "error", "speed", "etime", "history", "sleep", "play", "z", "delay", "size", "tim", "right", "now", "memory", "Time"], "i": ["li", "fi", "I", "di", "ri", "ni", "gi", "index", "ai", "io", "si", "ui", "mu", "phi", "v", "c", "ie", "d", "y", "zi", "uri", "pi", "u", "info", "j", "ii", "qi", "p", "ti", "b", "oi", "hi", "ini", "z", "ci", "mi", "ip", "xi", "iu", "init", "ix", "multi", "bi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\t\tpublic static void main(String[] args) {\\n\t\t\tScanner sc = new Scanner(System.in);\\n\t\t\tint ans=0;\\n\t\t\tint N = sc.nextInt();\\n\t\t\tint A = sc.nextInt();\\n\t\t\tint B = sc.nextInt();\\n\t\t\tsc.close();\\n\\n\t\t\tfor (int i = 1; i <= N; i++) {\\n\t\t\t\tint sum = sum(i);\\n\t\t\t\tif (A <= sum && sum <= B) {\\n\t\t\t\t\tans+=i;\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\\n\t\tprivate static int sum(int i) {\\n\t\t\tint sumDigits = 0;\\n\t\t\twhile( i != 0) {\\n\t\t\t\tsumDigits += i % 10;\\n\t\t\t\ti /= 10;\\n\t\t\t}\\n\t\t\treturn sumDigits;\\n\t\t}\\n}", "target": "212", "substitutes": {"sc": ["class", "parse", "osc", "ner", "ch", "cont", " Sc", "nc", "sche", "sb", "search", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "na", "server", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "cl", "cus", "uc", "sw", "ctx", "can", "cor", "str", "Sc", "system", "sq", "con", "sci", "cr", "src", "sf", "rc", "cer", "sr", "enc", "soc", "ci", "sp", " SC", "sch", "tc", "parser", "cur", "ser", "lc"], "ans": ["ams", "runs", "ANS", "cons", " scans", "I", "ats", "ann", "n", "amps", "AN", "S", "ss", "na", "unks", "anc", "cus", "cs", "ents", "scan", "can", "ls", "es", "ions", "ids", "aus", "asts", "s", "as", "x", "ns", "atan", "cas", "ants", "os", "ins", "ks", "ras", "an", "outs", "ars", "a", "ons"], "N": ["NE", "G", "K", "I", "L", "Z", "X", "P", "Q", "NS", "H", "n", "Y", "S", "E", "D", "NL", "OS", "W", "J", "F", "V", "NM", "R", "NB", "NN", "C", "T", "U", "Num", "M", "Ne", "NT", "O"], "A": ["G", "SA", "I", "L", "AA", "AS", "X", "API", "P", "H", "HA", "Y", "S", "D", "AP", "AI", "Ma", "MA", "F", "BA", "CA", "AC", "C", "T", "U", "M", "Alpha", "AM", "NA", "AR", "LA", "Am", "a"], "B": ["G", "I", "L", "BB", "BD", "DB", "CB", "X", "BF", "P", "GB", "Q", "Y", "S", "BS", "AB", "E", "D", "SB", "J", "LB", "F", "BI", "BA", "V", "BL", "MB", "R", "b", "NB", "C", "T", "WB", "M", "BER", "Bs", "BC", "O", "OB"], "i": ["f", "li", "fi", "h", "I", "mini", "input", "di", "in", "ri", "ni", "id", "gi", "image", "index", "key", "ai", "m", "io", "n", "si", "l", "ui", "phi", "v", "it", "adi", "c", "ie", "d", "y", "zi", "uri", "u", "pi", "o", "j", "e", "info", "ii", "api", "qi", "iter", "p", "ti", "b", "x", "oi", "hi", "abi", "ini", "z", "ci", "mi", "ip", "xi", "init", "iu", "ix", "chi", "multi", "bi", "a"], "sum": ["f", "mult", "in", "count", "m", "number", "cost", "total", "ss", "norm", "c", "inc", "size", "average", "scale", "a", "sign", "comment", "di", "match", "na", "ums", "min", "diff", "it", "cat", "max", "dot", "u", "digit", "av", "SU", "sp", "part", "alpha", "sort", "sam", "summary", "out", "log", "index", "split", "ac", "ass", "ui", "up", "aa", "scan", "num", "su", "add", "sa", "p", "b", "sub", "all", "mean", "sh", "chi", "net", "Sum", "ul", "ni", "n", "si", "bin", "acc", "info", "start", "us", "rank", "um"], "sumDigits": [" sumDats", " sumDacts", " sumDigites", "rateDigits", " sumDigats", "sumLITS", " sumDigited", "sumPosites", "sumPosins", "sumDigats", "sumPosits", "sumDigited", "ratedigients", "sumEdits", "sumdigals", "sumLals", "sumLients", "sumDigITS", "sumLenals", "sumDivacts", "sumDit", "sumDacts", "sumDigins", " sumDit", "sumdigited", "sumEdins", "sumLenits", "sumDigit", "sumdigats", "sumLits", " sumPosins", " sumPosits", "sumPosited", "sumDivats", "rateDigals", "sumDigients", "sumDigacts", "ratedigits", "sumdigITS", "sumDigites", "sumdigacts", "sumDivit", "rateDigients", "rateDigITS", "sumdigits", "sumdigients", "sumDivits", " sumPosited", "sumDits", " sumDigit", "sumLenITS", "sumdigit", "sumDats", "sumEdites", "sumdigins", " sumDits", "ratedigals", "sumLenients", " sumPosites", "ratedigITS", " sumDigins", "sumDigals", " sumDigacts", "sumdigites", "sumEdited"]}}
{"code": "import java.util.*; \\n\\nclass Main{\\npublic static void main(String[] args){\\n\tScanner sc=new Scanner(System.in);\\n        int k=sc.nextInt();\\n     \tint x=sc.nextInt();\\n  \\n\t\tfor(int i=x-k+1;i<=x+k-1;i++){\\n    \tSystem.out.println(i);\\n        }\\n    }\\n}\\n", "target": "207", "substitutes": {"sc": ["ner", "ch", "osc", "fc", " Sc", "nc", "st", "sche", "sb", "cv", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "sec", "server", "scope", "ca", "SC", "se", "c", "scan", "cs", "uc", "cl", "sw", "com", "acc", "Sc", "sq", "sci", "cr", "src", "rc", "cer", "sr", "enc", "sp", "ci", " SC", "ct", "sh", "ec", "tc", "cur", "ser", "lc"], "k": ["f", "kid", "K", "in", "length", "ek", "key", "m", "id", "kn", "n", "l", "v", "ok", "c", "d", "mk", "y", "u", "e", "o", "j", "p", "b", "w", "start", "ak", "sk", "z", "ks", "km", "dk", "q", "kw"], "x": ["f", "xc", "cross", "h", "is", "xx", "in", "X", "id", "m", "index", "n", "l", "v", "t", "c", "ctx", "xt", "tx", "d", "y", "fx", "xes", "ax", "ex", "u", "e", "o", "j", "point", "xs", "p", "w", "xxx", "rx", "z", "px", "ix", "xp", "q"], "i": ["f", "li", "fi", "I", "mini", "di", "ri", "ni", "id", "gi", "key", "index", "ai", "io", "ji", "si", "step", "block", "ui", "it", "pos", "zi", "uri", "u", "pi", "o", "j", "ii", "qi", "ti", "b", "oi", "abi", "ini", "start", "z", "ci", "ip", "iu", "xi", "init", "ix", "chi", "multi", "bi"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int top = n/100;\\n        int ans = 0;\\n        if(n-top*100>top*10+top){\\n            ans = (top+1)*100+(top+1)*10+(top+1);\\n        }else{\\n            ans = top*100+top*10+top;\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n\\n", "target": "106", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "na", "SC", "se", "c", "scan", "uc", "sw", "cl", "com", "cs", "ng", "acc", "Sc", "sub", "sci", "cr", "ocr", "src", "rc", "cer", "enc", "soc", "sp", "ci", " SC", "sch", "sh", "ec", "cur", "desc", "ser"], "n": ["f", "in", "nt", "m", "number", "l", "t", "c", "num", "d", "pos", "sn", "un", "nat", "u", "o", "j", "np", "cn", "s", "p", "b", "ot", "ns", "nl", "nb", "en", "x", "N", "pn", "all", "len", "z", "k", "conn", "i", "nn", "nit", "net"], "top": ["level", "count", "key", "platform", "pop", "t", "peak", "offset", "central", "bot", "hop", "size", "skip", "TOP", "content", "Top", "format", "limit", "places", "min", "loop", "per", "site", "max", "dot", "current", "part", "test", "hyp", "upper", "left", "tp", "up", "last", "success", "above", "first", "page", "num", "pos", "next", "stop", "iter", "p", "python", "all", "file", "N", "bottom", "flat", "parent", "on", "tops", "path", "high", "master", "pt", "np", "at", "x", "ps", "start", "front", "tip", "op", "true", "prev"], "ans": ["nan", "ANS", "cons", " scans", "ain", "ats", "ann", "aned", "anon", "lines", "places", "leans", "except", "annot", "AN", "ss", "na", "anc", "aces", "cs", "ents", "scan", "can", "lan", "plan", "ls", "ions", "nas", "aus", "asts", "s", "offs", "as", "atan", "ns", "san", "cas", "ants", "sk", "eps", "acs", "aps", "ins", "ks", "parser", "ras", "an", "powers", "ars", "cases", "ana", "ons"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    private static final int MAXSIZE = 200000;\\n\\n    public static void main(String[] args) {\\n        int[] R = new int[MAXSIZE];\\n\\n        Scanner sc = new Scanner(System.in);\\n        int rLength = sc.nextInt();\\n\\n        for (int idx = 0; idx < rLength; idx++) {\\n            R[idx] = sc.nextInt();\\n        }\\n\\n        int res = Integer.MIN_VALUE;\\n        int currMin = R[0];\\n        for (int idx = 1; idx < rLength; idx++) {\\n            res = Math.max(res, R[idx] - currMin);\\n            currMin = Math.min(currMin, R[idx]);\\n        }\\n\\n        System.out.println(res);\\n    }\\n}\\n", "target": "208", "substitutes": {"MAXSIZE": ["Maxsize", "MINsize", "MINSize", "MINGROUP", "MaxSIZE", " MAXSize", "MaxGROUP", " MAXIZE", "maxSize", "MINSIZE", "MAXIZE", "MaxSize", "MAXGROUP", "MAXSize", "maxIZE", "MAXsize", "maxSIZE", " MAXsize", "MaxIZE", "maxsize", "maxGROUP"], "R": ["ER", "RE", "G", "I", "L", "RC", "RR", "Return", "JR", "IR", "X", "RA", "Rs", "P", "DR", "RO", "S", "Y", "RGB", "RH", "RS", "D", "GR", "RP", "Res", "LR", "Large", "V", "HR", "Result", "T", "CR", "U", "C", "N", "M", "RG", "Right", "SR", "NR", "RN", "RIP", "Region", "AR", "BR", "MR", "Array", "TR", "r", "RM"], "sc": ["ner", "osc", "ch", "scene", " Sc", "nc", "sche", "sb", "search", "cv", "cc", "bc", "esc", "asc", "pc", "si", "ss", "server", "anc", "scope", "ca", "SC", "se", "c", "scan", "cs", "sw", "uc", "cus", "ctx", "cl", "cor", "Sc", "system", "sq", "sci", "cr", "src", "rc", "cer", "or", "sp", " SC", "sch", "sh", "ec", "screen", "lc", "r"], "rLength": ["RSize", "rLen", "nrSize", "RLength", "rMax", "cMax", "cLength", "RLen", "cLen", "RArray", "rSize", "Rlength", " rLen", "clength", "cSize", "nrArray", "RMax", "rlength", " rArray", " rSize", "nrLength", "nrMax", " rlength", "nrLen", "rArray"], "idx": ["pidy", "midX", "indxe", "vidx", " idxe", "pidxes", "idew", "videx", "idxi", "idy", " idX", " idy", "Idy", " idz", "midxi", "kidy", "latey", "vidxy", "mitex", "latexes", "idr", "indy", "indx", " idxy", "kidr", "pidz", " idr", "pidxe", " idxes", "idw", "idex", "Idz", "mitxy", "mitx", "Idr", "idxe", "idey", " idk", "midx", "latez", "ideX", " idex", "indX", "pidx", "idz", "indk", "IdX", "indz", "Idex", "kidx", "idk", "midy", "Idw", "vidy", "mitz", "pidX", "Idk", "idez", "idxes", "Idx", "mity", "latex", " idxi", " idw", "idexi", "kidz", "idxy", "midz", "idX"], "res": ["val", "rus", "vals", "base", "range", "upper", "rem", "err", "ris", "rates", "ret", "default", "reset", "arr", "reg", "details", "min", "mr", "rel", "rest", "rev", "pres", "result", "ms", "max", "Res", "spec", "features", "resource", "re", "req", "gr", "es", "js", "blocks", "ps", "grid", "RES", "ress", "resolution", "sol", "results", "resp", "eps", "css", "real", "ras", "rs", "powers", "rss", "right", "prev", "r", "ons"], "currMin": ["curremin", "currMax", "curcMini", " currNum", "curruMin", "curreMin", "curreHalf", " curreMin", "curruMini", "curcHalf", " curreMini", "currsMini", "curryHalf", "currmin", " currsmin", "curcMin", "curreMax", "curcMax", "currHalf", " currsMini", "currymin", " curryMini", " currsMax", "currMini", " curryMax", "currsmin", "curruNum", "currNum", " currMax", "curreNum", "curreMini", "curryNum", " currMini", " curryHalf", " currsMin", "curryMin", " curryNum", " curryMin", "curryMax", "curruMax", " curreMax", " currHalf", "curryMini", "currsMax", "currsMin", " currmin", " curremin"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        String[] array = new String[n];\\n\\n        for (int i = 0; i < n; i++) {\\n            array[i] = sc.next();\\n        }\\n\\n        HashMap <String, Integer> map = new HashMap<>();\\n\\n        for (int i = 0; i < n; i++) {\\n            if (map.containsKey(array[i])){\\n                int value = map.get(array[i]);\\n                map.put(array[i], value + 1);\\n            } else {\\n                map.put(array[i], 1);\\n            }\\n        }\\n\\n        int max = Collections.max(map.values());\\n\\n        List<String> list = new ArrayList<String>();\\n\\n        for (String key : map.keySet()) {\\n            if (map.get(key) == max){\\n                list.add(key);\\n            }\\n        }\\n\\n        Collections.sort(list);\\n\\n        for (int i = 0; i < list.size(); i++) {\\n            System.out.println(list.get(i));\\n        }\\n    }\\n}\\n", "target": "235", "substitutes": {"sc": ["osc", "ch", "ner", "mc", " Sc", "nc", "sche", "sb", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "scope", "anc", "cus", "SC", "c", "scan", "cs", "sw", "cl", "se", "uc", "screen", "Sc", "system", "sq", "dc", "sci", "cr", "src", "rc", "sp", "ci", " SC", "sch", "sh", "isc", "ec", "cur", "sem", "ser", "lc"], "n": ["f", "nc", "in", "no", "count", "m", "number", "l", "v", "t", "c", "d", "num", "network", "y", "sn", "u", "e", "o", "j", "s", "p", "b", "x", "ln", "ns", "en", "nb", "w", "N", "len", "z", "size", "k", "nn", "net"], "array": ["shape", "database", "string", "data", "one", "instance", "version", "expression", "element", "image", "collection", "index", "integer", "object", "arr", "alpha", "address", "ray", "area", "result", "form", "project", "vector", "air", "the", "site", "uri", "batch", "word", "analysis", "api", "section", "auto", "archive", "record", "audio", "system", "stack", "sample", "answer", "file", "hash", "arrow", "our", "function", "environment", "feature", "pair", "Array", "now", "module", "multi"], "i": ["f", "eni", "name", "mini", "is", "in", "gi", "m", "inner", "l", "mu", "uri", "ii", "qi", "oi", "temp", "iu", "init", "multi", "a", "di", "ri", "ai", "min", "it", "resource", "source", "u", "j", "hi", "ini", "z", "ci", "part", "mi", "ix", "bi", "li", "I", "iv", "id", "index", "ji", "ui", "phi", "y", "hei", "e", "o", "ti", "p", "b", "slice", "yi", "k", "chi", "my", "data", "cli", "ni", "io", "si", "v", "ie", "d", "pi", "info", "x", "abi", "ip", "xi", "r"], "map": ["parse", "cover", "shape", "make", "rate", "data", "me", "group", "replace", "match", "m", "code", "move", "arr", "block", "address", "order", "app", "meta", "maps", "up", "master", "save", "complete", "ap", "per", "use", "batch", "age", "le", "cache", "load", "pack", "open", "down", "hash", "set", "table", "copy", "size", "cap", "comb", "apper", "work", "test", "rule", "pad", "bridge", "lock", "dict", "module", "MAP", "scale"], "value": ["valid", "val", "VALUE", "level", "name", "data", "one", "off", "values", "version", "range", "element", "length", "core", "id", "number", "index", "default", "object", "unit", "change", "character", "v", "area", "type", "write", "entry", "fe", "resource", "weight", "age", "position", "current", "member", "child", "reference", "Value", "part", "size", "function", "feature", "second"], "max": ["rand", "parse", "wrap", "orig", "name", "range", "out", "no", "length", "id", "limit", "count", " Max", "number", "index", "default", "active", "unique", "step", "total", "order", "last", "sum", "min", "end", "conf", "first", "chain", "ax", "next", "add", "cache", "show", "depth", "auto", "mod", "x", "row", "top", "Max", "MAX", "view", "size", "work", "pad", "node", "right", "from", "check", "rank", "std", "parent", "scale", "q"], "list": ["li", "listed", "tree", "none", "base", "string", "st", "range", "cli", "group", "bl", "code", "collection", "keep", "search", "low", "default", "l", "null", "pre", "queue", "server", "left", "diff", "result", "form", "cl", "chain", "batch", "pull", "cache", "str", "load", "full", "all", "stack", "and", "pe", "pool", "set", "LIST", "table", "part", "lists", "test", "get", "coll", "la", "lc", "parent", "sequence"], "key": ["KEY", "val", "keys", "skip", "name", "path", "string", "base", "data", "join", "act", "element", "no", "id", "code", "index", "search", "seed", "change", "service", "by", "ice", "ie", "page", "entry", "use", "query", "ace", "ry", "item", "field", "member", "link", "p", "point", "x", "row", "q", "hash", "Key", "char", "op", "ink", "k", "work", "rule", "connection", "ask", "ip", "pair", "lock", "parent", "sign"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport static java.lang.System.out;\\n\\npublic class Main {\\n    static MyReader in = new MyReader();\\n\\n    public static void main(String[] args) {\\n        int X = in.i();\\n        int max = 1;\\n        for (int b = 2; b * b <= X; b++) {\\n            for (int p = 2; ; p++) {\\n                int t = pow(b, p);\\n                if (X < t) {\\n                    break;\\n                } else if (max < t) {\\n                    max = t;\\n                }\\n            }\\n        }\\n        out.println(max);\\n    }\\n\\n    static int pow(int a, int b) {\\n        int c = 1;\\n        while (b > 0) {\\n            if ((b & 1) == 1) {\\n                c *= a;\\n            }\\n            a *= a;\\n            b >>= 1;\\n        }\\n        return c;\\n    }\\n}\\n\\nclass MyReader extends BufferedReader {\\n    char[] cbuf = new char[1024];\\n    int head = 0;\\n    int tail = 0;\\n\\n    MyReader() {\\n        super(new InputStreamReader(System.in));\\n    }\\n\\n    char next() {\\n        if (head == tail) {\\n            try {\\n                tail = super.read(cbuf, 0, cbuf.length);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            head = 0;\\n        }\\n        return cbuf[head++];\\n    }\\n\\n    void back() {\\n        head--;\\n    }\\n\\n    boolean minus() {\\n        boolean minus;\\n        while (true) {\\n            char c = next();\\n            if (!isDelimiter(c)) {\\n                if (!(minus = c == '-')) back();\\n                return minus;\\n            }\\n        }\\n    }\\n\\n    void skip() {\\n        while (isDelimiter(next()));\\n        back();\\n    }\\n\\n    char[] s(int N) {\\n        char[] cbuf = new char[N];\\n        read(cbuf, 0, N);\\n        return cbuf;\\n    }\\n\\n    public int read(char[] cbuf, int off, int len) {\\n        skip();\\n        int i;\\n        for (i = 0; i < cbuf.length; i++) {\\n            char c = next();\\n            if (isDelimiter(c)) {\\n                break;\\n            }\\n            cbuf[i] = c;\\n        }\\n        return i;\\n    }\\n\\n    boolean isDelimiter(char c) {\\n        return c == ' ' || c == '\\n' || c == '\\r';\\n    }\\n\\n    int i() {\\n        boolean minus = minus();\\n        int n = 0;\\n        while (true) {\\n            int k = next() - '0';\\n            if (k < 0 || 9 < k) break;\\n            n = 10 * n + k;\\n        }\\n        return minus ? -n : n;\\n    }\\n\\n    int[] ii(final int N) {\\n        int[] a = new int[N];\\n        for (int j = 0; j < a.length; j++) a[j] = i();\\n        return a;\\n    }\\n\\n    long l() {\\n        boolean minus = minus();\\n        long n = 0;\\n        while (true) {\\n            int k = next() - '0';\\n            if (k < 0 || 9 < k) break;\\n            n = 10 * n + k;\\n        }\\n        return minus ? -n : n;\\n    }\\n}\\n", "target": "143", "substitutes": {"in": ["f", "class", "on", "rec", "path", "impl", "is", "data", "input", "out", "Input", "proc", "din", "m", "inner", "io", "exec", "ac", "IN", "inn", "con", "bin", "er", "reader", "resource", "inc", "read", "source", "ex", "e", "s", "as", "sub", "ic", "src", "ini", "line", "stream", "ins", "connection", "init", "from", "In", "r"], "X": ["G", "K", "I", "base", "L", "Z", "A", "length", "P", "Q", "H", "B", "Y", "D", "y", "ax", " x", "width", "W", "F", "xs", "V", "XP", "R", "x", "C", "T", "U", "w", "Max", "M", "MAX", "XX", "O"], "max": ["value", "h", "wrap", "base", "no", "length", "id", "count", "limit", "P", "code", "default", "total", "height", "last", "min", "end", "conf", "rest", "ca", "cat", "cl", "chain", "y", "d", "first", "can", "ax", "batch", "cache", "mod", "x", "ox", "T", "w", "Max", "MAX", "bug", "size", "init", "right", "parent", "q"], "b": ["f", "bf", "pb", "h", "base", "bh", "sb", "ab", "db", "pl", "bl", "P", "m", "bt", "bc", "B", "ob", "ba", "v", "g", "bp", "aa", "ca", "d", "y", "rb", "u", "e", "lb", "o", "pa", "bb", "s", "bi", "x", "nb", "cb", "w", "ib", "z", "bs", "be", "fb", "r"], "p": ["f", "pb", "h", "base", "jp", "pl", "P", "m", "pr", "pc", "py", "tp", "v", "bp", "d", "y", "pa", "u", "e", "o", "pt", "api", "pi", "s", "x", "w", "q", "pe", "po", "pp", "cp", "ip", "r"], "t": ["f", "ts", "h", "rt", "token", "dt", "nt", "m", "wt", "te", "tp", "v", "it", "tt", "d", "y", "u", "e", "o", "pt", "ty", "at", "ot", "x", "ti", "T", "tmp", "w", "z", "ct", "ta"], "a": ["f", "h", "am", "one", "ga", "A", "ab", "ad", "m", "ac", "ba", "min", "v", "ca", "aa", "d", "y", "pa", "e", "af", "aaa", "s", "fa", "as", "x", "sa", "w", "z", "an", "ae", "alpha"], "c": ["f", "xc", "h", "cf", "ch", "comment", "string", "nc", "count", "code", "cy", "m", "cc", "esc", "pc", "unc", "ac", "g", "v", "ca", "con", "cs", "cat", "uc", "d", "can", "y", "ce", "cl", "dec", "cm", "u", "e", "o", "s", "dc", "x", "C", "cr", "cb", "w", "ic", "enc", "cu", "sc", "char", "col", "z", "ci", "ct", "cp", "cap", "arc", "ec", "const", "lc", "r"], "cbuf": ["kbuf", "cfav", "codff", "cfraf", "rbbuff", "abbbuf", "debutf", "cbuc", "codaf", "cbull", "buf", "cbutf", "codue", "cfaf", "debuf", "bbul", "coduff", "coduf", "dbush", "bcbuf", "coduc", "rbuff", "debbuf", "buff", "cbush", "cbdf", "bcul", "coddf", "cbuch", "CBuf", "CBul", "bcdf", "cfush", "codbuf", "bcbuff", "dbull", "CBff", "bcush", "cbul", "codul", "bbull", "cfuf", "cbbuf", "dbuch", "cbav", "cfuff", "CBbuf", "abbdf", "kbuff", "bcue", "cfbuff", "CBuff", "dbul", "bcuf", "abbuf", "cbraf", "bcuch", "CBaf", "dbuf", "kbuc", "codav", "CBav", "codbuff", "cfdf", "bcff", "cfuc", "cbff", "dbbuff", "kbbuf", "abbbuff", "cbaf", "dbue", "cfbuf", "abbuff", "bbuff", "rbbuf", "bcuff", "dbraf", "cfutf", "bcraf", "bbuch", "rbuf", "cbuff", "dbbuf", "debbuff", "abbutf", "cbbuff", "bbuf", "cbue", "dbdf", "bcull"], "head": ["before", "client", "h", "skip", "anch", "shift", "miss", "heads", "length", "HEAD", "post", "limit", "id", "index", "key", "code", "keep", "count", "ck", "patch", "end", "push", "first", "bug", "pos", "ax", "then", "Head", "pull", "unk", "position", "depth", "offset", "row", "back", "start", "front", "view", "header", "size", "cap", "cur", "foot", "right", "body", "ack", "tag", "clean"], "tail": ["h", "ail", "nil", "shift", "mini", "plus", "roll", "nt", "ad", "length", "limit", "tails", "index", "count", "timeout", "patch", "left", "sum", "end", "rest", "ill", "zero", "cycle", "pull", "lim", "width", "stop", "iter", "offset", "ind", "tick", "tip", "col", "size", "body", "foot", "tag", "sign"], "minus": ["Neg", "div", "ne", "hide", "none", "mini", "plus", "shift", "string", "without", "done", "one", "don", "no", "index", "reverse", "just", "zip", "text", "left", "min", "sum", "ie", " negative", " mini", "empty", "isin", "neg", "pos", "zero", "small", "next", "so", "carry", "pull", "digit", "prime", "signed", "skip", "negative", "yes", "sub", "strip", "de", "gone", "missing", "sin", "start", "sc", "extra", "go", "partial", "z", "beta", "button", "foo", "two", "sign"], "N": ["G", "K", "Len", "I", "L", "Z", "Size", "A", "NI", "P", "number", "Q", "NS", "SN", "H", "NC", "B", "S", "Y", "E", "D", "NL", "J", "F", "V", "R", "C", "T", "Num", "M", "NA", "RN", "Ns", "NT", "O"], "off": ["obj", "on", "orig", "shift", "ef", "eff", "id", "ord", "block", "of", "ff", "pos", "OFF", "Offset", "def", "o", "info", "load", "offs", "open", "offset", "down", "op", "set", "Off", " offset", "addr", "ip"], "len": ["li", "val", "Len", "L", "lin", "ol", "bl", "length", "lf", "limit", "ll", "fin", "bin", "pos", "le", "offset", "un", "all", "ln", "en", "start", "line", "fl", "lon", "el"], "i": ["f", "eni", "li", "fi", "val", "I", "mini", "data", "is", "di", "ri", "ni", "length", "id", "gi", "m", "inner", "index", "ai", "count", "io", "code", "si", "ori", "ui", "mu", "phi", "v", "inter", "it", "ie", "iterator", "d", "y", "uri", "u", "e", "info", "pi", "o", "iter", "s", "qi", "ti", "x", "oi", "hi", "ind", "ini", "start", "col", "z", "ci", "mi", "ins", "ip", "init", "xi", "ix", "multi", "bi", "r"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\\n            String[] array = reader.readLine().split(\" \");\\n            int A = Integer.parseInt(array[0]);\\n            int B = Integer.parseInt(array[1]);\\n            int C = Integer.parseInt(array[2]);\\n\\n            System.out.println(Math.max(B + C - A, 0));\\n        }\\n    }\\n\\n}\\n", "target": "45", "substitutes": {"array": ["value", "parse", "list", "channel", "string", "base", "data", "input", "instance", "range", "format", "element", "expression", "throw", "image", "number", "integer", "object", "arr", "alpha", "book", "address", "ray", "area", "entry", "air", "umber", "word", "api", "section", "axis", "strip", "row", "error", "file", "answer", "arrow", "char", "part", "line", "angle", "i", "function", "pair", "Array", "r"], "A": ["G", "SA", "I", "L", "AA", "PA", "API", "AD", "TA", "P", "S", "Y", "AB", "As", "IA", "E", "D", "Offset", "MA", "Ma", "F", "CA", "AF", "AC", "T", "An", "U", "N", "M", "Ar", "Alpha", "AR", "LA", "CC", "Array", "O", "a"], "B": ["G", "I", "L", "BB", "BD", "DB", "BF", "P", "GB", "Y", "AB", "UB", "E", "D", "BE", "W", "BI", "EB", "F", "BER", "BA", "BL", "LB", "R", "b", "AF", "NB", "T", "WB", "N", "M", "Bs", "BC", "Bu", "O", "OB"], "C": ["G", "K", "I", "L", "Z", "CP", "P", "Q", "H", "S", "Y", "E", "c", "D", "SC", "W", "F", "CL", "V", "Cs", "CA", "R", "AC", "T", "CR", "U", "N", "M", "CS", "Cu", "CC", "DC", "CE", "CU", "BC", "O"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    static Scanner stdIn = new Scanner(System.in);\\n    public static void main(String[] args) {\\n        String s = stdIn.next();\\n        char[] sc = s.toCharArray();\\n\\n        int first = (sc[0]-'0')*10 + (sc[1]-'0');\\n        int second = (sc[2]-'0')*10 + (sc[3]-'0');\\n\\n        boolean firstIsYY = false;\\n        boolean firstIsMM = false;\\n        boolean secondIsYY = false;\\n        boolean secondIsMM = false;\\n\\n        if(1<=first && first <=12){\\n            firstIsMM = true;\\n        }\\n        if(0<= first && first <=99){\\n            firstIsYY = true;\\n        }\\n\\n        if(1<=second && second <=12){\\n            secondIsMM = true;\\n        }\\n        if(0<= second && second <=99){\\n            secondIsYY = true;\\n        }\\n\\n        if((firstIsYY && secondIsMM) && (firstIsMM && secondIsYY)){\\n            System.out.println(\"AMBIGUOUS\");\\n        }else if(firstIsMM && secondIsYY){\\n            System.out.println(\"MMYY\");\\n        }else if(firstIsYY && secondIsMM){\\n            System.out.println(\"YYMM\");\\n        }else{\\n            System.out.println(\"NA\");\\n        }\\n\\n    }\\n}", "target": "5", "substitutes": {"stdIn": [" stdCon", "stdin", " stdin", "stdCon", "STDIns", " stdReader", " stdIns", " STDIn", " stdOut", "stIn", "stdIns", " STDOut", "stIns", "stin", "STDIn", " STDCon", "stdOut", " STDIns", "STDReader", "STDCon", "stdReader", "stReader", "STDOut", "STDin"], "s": ["f", "string", "input", "out", "in", "sb", "sv", "m", "n", "si", "l", "S", "ss", "server", "g", "v", "cs", "c", "su", "source", "e", "str", "p", "b", "ns", "ws", "sl", "os", "ins", "i", "strings", "ses", "ds", "a", "r"], "sc": ["ch", "path", "nc", "sb", "sv", "cv", "code", "esc", "config", "cc", "bc", "asc", "pc", "text", "sec", "scope", "cus", "SC", "c", "scan", "cs", "uc", "cl", "se", "sac", "spec", "txt", "acc", "str", "Sc", "script", "loc", "dc", "sci", "row", "cr", "src", "sync", "pass", "rc", "enc", "soc", "char", "sk", "scl", "sp", "sh", "desc", "screen", "lc", "sign"], "first": ["f", "value", "before", "primary", "minute", "name", "data", "one", "st", "length", "count", "code", "index", "latest", "default", "initial", "last", "min", "only", "master", "same", "forward", "max", "the", "use", "next", "then", "this", "current", "p", "third", "top", "back", "First", "start", "front", "true", "central", "th", "common", "part", "size", "other", "i", "leading", "right", "now", "prev", "a"], "second": ["sort", "term", "middle", "between", "count", "latest", "south", "low", "follow", "fourth", "seconds", "two", "foreign", "sec", "server", "left", "last", "secondary", "only", "future", "Second", "use", "also", "next", "after", "ii", "current", "another", "third", "six", "both", "front", "course", "again", "common", "multiple", "size", "other", "beta", "be", "lower", "secret", "later"], "firstIsYY": ["firstIsnYY", "secondISBBC", "secondIsXX", "firstISBBC", "firstAremm", "firstIsY", "secondISYY", "secondIsyy", "firstIsnmm", "firstIsBBC", "secondIsDD", "firstIsyy", "firstAreyy", "firstISY", "firstInBBC", "secondISmm", "firstISyy", "firstIsDD", "firstIsXX", "secondISyy", "secondIsmm", "secondIsBBC", "secondISY", "firstisY", "secondISXX", "secondIsY", "firstIsnyy", "firstInY", "firstisBBC", "firstAreYY", "secondISMM", "firstISXX", "firstisXX", "firstIsmm", "firstInMM", "firstISDD", "firstAreMM", "firstInYY", "secondISDD", "firstISMM", "firstisDD", "firstIsnMM", "firstISmm", "firstISYY", "firstisYY", "firstisMM"], "secondIsMM": ["twoIsHmm", "secondWasHmm", "secondisMC", "secondStyleHmm", "secondStyleMC", "secondISYY", "firstISMC", "twoIsMM", "SecondIsHmm", "SecondISmm", "twoISHmm", "SecondIsmm", "secondWasYY", "secondIsnMC", "twoISMM", "twoIsMQ", "twoISMQ", "secondWasMQ", "secondisMM", "firstIsHmm", "secondISmm", "secondWasMM", "SecondIsYY", "secondIsnHmm", "twoISMC", "secondIsmm", "secondISMC", "secondisHmm", "secondIsnYY", "secondStyleMM", "secondISHmm", "SecondIsMM", "secondismm", "secondISMM", "secondWasMC", "SecondISYY", "secondIsMC", "secondStyleYY", "SecondISHmm", "twoIsMC", "secondIsnMM", "twoISYY", "secondWasmm", "secondIsMQ", "firstISMM", "twoIsYY", "secondISMQ", "SecondISMM", "firstISYY", "firstIsMC", "secondisYY", "firstISHmm", "secondIsHmm"], "firstIsMM": ["firstIsnYY", "secondIsZZ", "firstWasmm", "lastISAME", "firstWasMB", "firstISMC", "secondISYY", "firstIsnmm", "lastIsMM", "lastIsMC", "firstDoesMM", "firstIsBM", "firstIsnMN", "firstisAME", "secondISBM", "secondISmm", "lastIsYY", "firstOsAME", "firstisMN", "lastISMB", "secondIsmm", "firstIsZZ", "secondISZZ", "secondISMN", "firstismm", "firstISMN", "lastIsmm", "lastISYY", "firstDoesYY", "firstisMB", "firstOsMC", "firstDoesZZ", "firstIsAME", "firstOsYY", "firstIsMN", "secondISMM", "lastISMM", "firstIsnZZ", "firstIsmm", "lastISmm", "lastIsAME", "firstOsMM", "secondIsBM", "firstISBM", "firstIsMB", "secondIsMN", "firstWasMM", "firstisMC", "firstDoesBM", "firstISMM", "lastIsMB", "firstWasYY", "firstIsnMM", "lastISMC", "firstISAME", "firstISZZ", "firstISmm", "firstISMB", "firstISYY", "firstisYY", "firstIsMC", "firstIsnBM", "firstisMM"], "secondIsYY": ["secondEsMY", "secondISPy", "twoIsPy", "secondIsZZ", "secondIsMY", "secondIsXX", "secondISMY", "secondisZip", "firstIsMY", "secondISYY", "twoIsMM", "twoISY", "secondWasYY", "secondISZip", "twoISMM", "secondisY", "secondStyleY", "secondisMM", "secondWasMM", "secondWasPy", "firstIsZZ", "secondISZZ", "secondISY", "secondIsnYY", "secondisXX", "secondStyleMM", "secondISXX", "secondIsY", "secondStylePy", "firstISMY", "twoIsXX", "secondISMM", "secondIsPy", "secondisMY", "secondIsnXX", "secondStyleYY", "twoISXX", "secondEsYY", "secondIsnMM", "twoISYY", "secondIsZip", "twoISZip", "secondWasY", "firstISMM", "twoIsYY", "secondEsMM", "twoIsZip", "firstISZZ", "secondisZZ", "firstISYY", "twoIsY", "secondEsZZ", "secondisYY", "twoISPy", "secondIsnY"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        int n;\\n\\n        Scanner sc = new Scanner(System.in);\\n        n = sc.nextInt();\\n\\n        String strn = String.valueOf(n);\\n        int len = strn.length();\\n\\n        String ans;\\n        int sum = 0;\\n        for (int i = 0; i < len; i++) {\\n            sum += Integer.parseInt(strn.substring(i, i + 1));\\n        }\\n        if (n % sum == 0) ans = \"Yes\";\\n        else ans = \"No\";\\n\\n        System.out.println(ans);\\n    }\\n}", "target": "195", "substitutes": {"n": ["f", "nan", "ne", "name", "nc", "in", "no", "nt", "ni", "count", "m", "number", "l", "na", "v", "c", "num", "d", "y", "network", "pos", "max", "sn", "u", "e", "o", "j", "cn", "s", "p", "un", "x", "ns", "ln", "en", "nb", "N", "z", "nr", "k", "size", "conn", "nu", "nn", "nit", "net"], "sc": ["class", "osc", "ch", "mc", " Sc", "nc", "nt", "cc", "bc", "esc", "pc", "exec", "ss", "na", "scope", "anc", "SC", "se", "c", "scan", "uc", "ctx", "cl", "cs", "sw", "acc", "str", "Sc", "system", "sub", "sci", "cr", "sync", "rc", "soc", "sp", "ci", " SC", "ec", "cur", "lc", " scr"], "strn": ["Strc", "Strdn", "grdn", " strN", "strp", "stris", "privf", "strin", "prdn", "StrN", "trN", "strno", "grp", "stric", "privno", "strns", "Strs", "strins", "strs", " strno", "prp", "trn", "strN", "privN", " strf", "trno", "strf", "prN", "Strn", "Strns", " strns", "privn", " strs", "strdn", "Strp", "prn", "trf", "strc", "grn", "grN", " strc"], "len": ["f", "li", "val", "Len", "base", "lin", "nt", "length", "bl", "lf", "count", "limit", "l", "ll", "end", "num", "lan", "pos", "dl", "lim", "j", "loc", "p", "elt", "all", "ln", "en", "z", "line", "part", "fl", "lon", "lc", "el", "span"], "ans": ["nan", "ases", "ations", "anks", "ANS", "ates", "ats", "ains", "ann", "arts", "aned", "reads", "ays", "anas", "amps", "AN", "ss", "acts", "na", "anc", "aces", "cs", "ents", "scan", "ads", "aning", "ms", "lan", "ls", "ions", "nas", "ens", "aus", "asts", "anners", "s", "as", "ns", "atan", "san", "anges", "ants", "ags", "sk", "eps", "acs", "aps", "os", "ins", "ks", "ings", "ras", "an", "atts", "ians", "outs", "ars", "nn", "span", "ana", "ons"], "sum": ["sim", "sam", "skip", "cal", "miss", "ne", "ul", "oss", "mass", "in", "no", "count", "index", "unit", "si", "total", "na", "ass", "gram", "norm", "min", "diff", "up", "conf", "oct", "se", "num", "max", "pos", "su", "weight", "u", "Sum", "pack", "offset", "fat", "start", "scale", "mut", "part", "size", "mean", "us", "sh", "an", "alpha", "um", "vol", "span"], "i": ["f", "eni", "li", "fi", "h", "I", "shift", "di", "in", "ri", "ni", "length", "gi", "key", "id", "index", "ai", "ji", "si", "l", "ui", "mu", "phi", "v", "c", "zi", "u", "pi", "o", "j", "e", "info", "ii", "qi", "p", "ti", "b", "oi", "x", "hi", "slice", "ini", "start", "yi", "z", "ci", "part", "k", "mi", "ip", "xi", "init", "iu", "chi", "ix", "multi", "bi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        // \u5165\u529b\\n        int a = Integer.parseInt(sc.next()); // +1\\n        int b = Integer.parseInt(sc.next()); // 0\\n        int c = Integer.parseInt(sc.next()); // -1\\n        int k = Integer.parseInt(sc.next());\\n\\n        // \u51fa\u529b\\n        int num = 0;\\n        int count = 0;\\n        outside: {\\n            for (int i = 0; i < a; i++) {\\n                if (count == k) {\\n                    break outside;\\n                }\\n                num++;\\n                count++;\\n            }\\n            for (int i = 0; i < b; i++) {\\n                if (count == k) {\\n                    break outside;\\n                }\\n                count++;\\n            }\\n            for (int i = 0; i < c; i++) {\\n                if (count == k) {\\n                    break outside;\\n                }\\n                num--;\\n                count++;\\n            }\\n        }\\n        System.out.println(num);\\n    }\\n}\\n", "target": "56", "substitutes": {"sc": [" cont", " pars", " Sc", "nc", " arr", "sb", " cat", " scanner", "bc", "ss", " ans", "gram", "SC", " rc", "scan", "c", "se", " inst", " src", "Sc", "cr", "rc", " app", " SC", " sw", " sp", " ser", " scr"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tint a=n/1000;\\n\t\tint b=n%1000;\\n\t\tint c=0;\\n\t\tif(b==0) {\\n\t\t\tSystem.out.println(c);\\n\t\t}\\n\t\telse {\\n\t\t\tSystem.out.println(1000-b);\\n\t\t}\\n\t}\\n\t\\n}", "target": "184", "substitutes": {"sc": ["ner", "osc", "ch", "nc", "search", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "scope", "ca", "SC", "se", "scan", "uc", "sw", "cs", "cl", "com", "acc", "Sc", "sub", "sci", "cr", "src", "ocr", "sync", "rc", "cer", "soc", "sp", "ci", " SC", "sch", "sh", "ec", "ser", "lc"], "n": ["f", "ne", "nc", "net", "in", "no", "nt", "count", "m", "number", "l", "v", "t", "num", "d", "network", "max", "u", "e", "o", "j", "s", "p", "x", "ns", "nb", "en", "w", "N", "z", "k", "size", "conn", "i", "nn", "r"], "a": ["f", "base", "A", "ab", "ad", "count", "m", "l", "ac", "na", "ba", "aa", "d", "y", "s", "p", "x", "w", "z", "i", "r"], "b": ["f", "bf", "h", "br", "base", "sb", "ab", "bc", "l", "B", "wb", "ba", "v", "fb", "bp", "aa", "d", "y", "rb", "u", "e", "o", "bb", "s", "p", "offset", "x", "bis", "nb", "cb", "ib", "z", "bs", "bd", "k", "i", "be", "body", "bi", "eb", "r"], "c": ["f", "fc", "base", "nc", "count", "code", "m", "cy", "cc", "pc", "l", "ac", "v", "ca", "cs", "d", "y", "ce", "next", "cycle", "u", "e", "o", "cn", "p", "C", "cr", "col", "z", "ci", "k", "i", "lc"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.lang.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int c = sc.nextInt();\\n\\n        int[] arr = {a, b, c};\\n        Arrays.sort(arr);\\n        if (arr[0] == 5 && arr[1] == 5 && arr[2] == 7) {\\n            System.out.println(\"YES\");\\n        }else{\\n            System.out.println(\"NO\");\\n        }\\n\\n    }\\n}\\n", "target": "16", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "fc", "mc", " Sc", "nc", "sche", "sb", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "anc", "scope", "ca", "SC", "scan", "cs", "sw", "uc", "se", "cus", "ctx", "acc", "cor", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "soc", "ci", "sp", " SC", "ec", "tc", "cur", "lc"], "a": ["f", "h", "A", "ab", "count", "ai", "n", "l", "ac", "ba", "da", "ca", "area", "aa", "asa", "d", "y", "aj", "e", "s", "p", "sa", "x", "offset", "as", "z", "k", "i", "art", "an", "ae", "alpha", "r"], "b": ["f", "h", "sb", "ab", "db", "bc", "n", "l", "B", "ob", "v", "aa", "d", "y", "e", "o", "j", "lb", "bb", "p", "x", "cb", "z", "bs", "k", "i", "be", "fb", "r"], "c": ["f", "h", "count", "m", "cy", "cc", "n", "l", "ac", "v", "d", "y", "u", "e", "o", "loc", "s", "p", "x", "C", "z", "ci", "k", "i", "r"], "arr": ["obj", "parse", "list", "val", "div", "tr", "dim", "br", "data", "ann", "db", "err", "arch", "fr", "par", "pr", "asc", "dr", "na", "order", "ray", "dat", "attr", "aa", "bar", "att", "cat", "air", "vec", "ar", "array", "abc", "inc", "batch", "gr", "str", "cache", "img", "aaa", "p", "enc", "rr", "arc", "iq", "i", "coll", "ix", "pair", "adr", "dict", "r"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int w = sc.nextInt();\\n    int h = sc.nextInt();\\n    int x = sc.nextInt();\\n    int y = sc.nextInt();\\n    int half = 0;\\n    double s = 0;\\n    if((w==2*x)&&(h==2*y)){\\n      half=1;\\n    }\\n    s=0.5*w*h;\\n    System.out.println(s+\" \"+half);\\n  }\\n}", "target": "182", "substitutes": {"sc": ["parse", "osc", "ner", "ch", "cont", "mc", " Sc", "nc", "sche", "sb", "cle", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "scope", "ca", "SC", "c", "scan", "cs", "uc", "se", "cl", "cus", "sw", "ctx", "acc", "cor", "Sc", "sci", "cr", "ocr", "sync", "src", "rc", "cer", "sr", "soc", "ci", "sp", " SC", "ct", "sh", "ec", "tc", "cur", "coll", "desc", "ser", "lc"], "w": ["f", "wp", "hw", "wx", "m", "wt", "n", "window", "l", "height", "wd", "v", "g", "t", "r", "c", "ww", "sw", "d", "ew", "max", "u", "W", "width", "o", "nw", "p", "b", "fw", "wh", "win", "ws", "z", "wa", "work", "k", "we", "q", "kw"], "h": ["f", "hs", "ph", "ih", "in", "oh", "m", "H", "n", "l", "height", "v", "t", "c", "d", "u", "e", "o", "j", "hr", "p", "hi", "b", "rh", "hm", "th", "z", "k", "ht", "sh", "i", "q", "r"], "x": ["f", "xx", "X", "m", "n", "l", "g", "v", "t", "c", "d", "dx", "ax", "ex", "u", "width", "o", "p", "b", "rx", "z", "px", "k", "i", "xi", "ix", "q"], "y": ["f", "yo", "oy", "ey", "cy", "m", "sy", "n", "l", "ye", "Y", "py", "v", "t", "c", "d", "vy", "ny", "j", "dy", "p", "b", "yi", "ya", "z", "k", "sh", "i", "yy", "ym", "q"], "half": ["f", "kind", "center", "level", "side", "dim", "none", "equal", "shift", "sth", "less", "Half", "ref", "length", "key", "hel", "little", "cost", "hat", "total", "cl", "d", "fe", "per", "ce", "le", "width", "e", "full", "third", "cer", "len", "mode", "z", "partial", "part", "size", "ct", "mi", "quarter", "flower", "cur", "ke", "star", "scale", "percent"], "s": ["f", "side", "hs", " parts", "is", "less", "sb", "m", "parts", "south", "sg", "n", "si", "l", "ss", "S", "g", "t", "c", "d", "per", "ls", "le", "u", "e", "o", "js", "full", "p", "b", "ns", "sync", "ps", "ws", "sl", "z", "size", " p", "i", "ses", "fs", "ds", "a", "r"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.math.BigDecimal;\\nimport java.util.*;\\nimport java.util.function.IntFunction;\\nimport java.util.function.Supplier;\\nimport java.util.stream.Collectors;\\nimport java.util.stream.IntStream;\\nimport java.util.stream.Stream;\\n\\n\\npublic class Main {\\n    static int[] waru;\\n    static long nn;\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner();\\n        long n=scanner.nextLong();\\n        nn=n;\\n        waru=new int[100_000];\\n        for(int i=0;i<waru.length&&n>1;i++){\\n            //put(i+2);\\n            while(n%(i+2)==0){\\n                //put(format(\"%d\u306f%d\u3067\u5272\u308a\u5207\u308c\u305f\",n,i+2));\\n                waru[i]++;\\n                n/=(i+2);\\n            }\\n        }\\n        //put(Arrays.toString(waru));\\n        put(min(1,0));\\n\\n\\n\\n\\n\\n    }\\n    public static int keta(long a){\\n        int result=0;\\n        while(a>0){\\n            a/=10;\\n            result++;\\n        }\\n        return result;\\n    }\\n    public static long min(long val,int index){\\n        while(index<waru.length&&waru[index]==0){\\n            index++;\\n        }\\n        if(index>=waru.length){\\n            //put(\"val=\"+val);\\n            //put(String.format(\"%d %d\",keta(val),keta(nn/val)));\\n            return Math.max(keta(val),keta(nn/val));\\n        }\\n        //put(format(\"val=%d,index=%d,waru[%d]=%d\",val,index,index,waru[index]));\\n        long min=Long.MAX_VALUE;\\n        long a=1;\\n        for(int i=0;i<=waru[index];i++){\\n            min=Math.min(min(val*a,index+1),min);\\n            a*=index+2;\\n        }\\n        return min;\\n    }\\n\\n    public static int upper_bound(int[] a,int val){\\n        return upper_bound(a,0,a.length,val);\\n    }\\n    public static int upper_bound(int[] a,int l,int r,int val){\\n        if(r-l==1){\\n            if(a[l]>val) return l;\\n            return r;\\n        }\\n        int mid=(l+r)/2;\\n        if(a[mid]>val){\\n            return upper_bound(a,l,mid,val);\\n        }else{\\n            return upper_bound(a,mid,r,val);\\n        }\\n    }\\n    public static int lower_bound(int[] a,int val){\\n        return lower_bound(a,0,a.length,val);\\n    }\\n    public static int lower_bound(int[] a,int l,int r,int val){\\n        if(r-l==1){\\n            if(a[l]<val) return r;\\n            return l;\\n        }\\n        int mid=(l+r)/2;\\n        if(a[mid]<val){\\n            return lower_bound(a,mid,r,val);\\n        }else{\\n            return lower_bound(a,l,mid,val);\\n        }\\n\\n    }\\n\\n\\n    public static int max(int a,int b){\\n        return Math.max(a,b);\\n    }\\n    public static long max(long a,long b){\\n        return Math.max(a,b);\\n    }\\n    public static int abs(int a){\\n        return Math.abs(a);\\n    }\\n    public static long abs(long a){\\n        return Math.abs(a);\\n    }\\n    public static void print(Object object){\\n        System.out.print(object);\\n    }\\n    public static void put(Object object) {\\n        System.out.println(object);\\n    }\\n    public static void put(){\\n        System.out.println();\\n    }\\n    public static String format(String string, Object... args) {\\n        return String.format(string, args);\\n    }\\n}\\n\\nfinal class Scanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n\\n    private boolean hasNextByte() {\\n        if (ptr < buflen) {\\n            return true;\\n        } else {\\n            ptr = 0;\\n            try {\\n                buflen = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (buflen <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private int readByte() {\\n        if (hasNextByte())\\n            return buffer[ptr++];\\n        else\\n            return -1;\\n    }\\n\\n    private boolean isPrintableChar(int c) {\\n        return 33 <= c && c <= 126;\\n    }\\n\\n    public boolean hasNext() {\\n        while (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n            ptr++;\\n        return hasNextByte();\\n    }\\n\\n    public String next() {\\n        if (!hasNext())\\n            throw new NoSuchElementException();\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while (isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n\\n    public long nextLong() {\\n        if (!hasNext())\\n            throw new NoSuchElementException();\\n        long n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while (true) {\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            } else if (b == -1 || !isPrintableChar(b)) {\\n                return minus ? -n : n;\\n            } else {\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n\\n    public int nextInt() {\\n        long nl = nextLong();\\n        if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n            throw new NumberFormatException();\\n        return (int) nl;\\n    }\\n\\n    public double nextDouble() {\\n        return Double.parseDouble(next());\\n    }\\n}", "target": "61", "substitutes": {"waru": ["iru", "ircu", "warnu", "arnu", "irU", "iruu", "wrU", "aru", " warru", "waruu", "wru", "warur", "Warru", " warnu", "arcu", "Warcu", " warU", "Warnu", "arU", "warru", " waruu", "irru", "Waruu", "warcu", "irur", "warU", "Waru", " warcu", "WarU", "wrur", "Warur", "wruu"], "nn": ["nan", "nm", "nd", "CNN", "ner", "ne", "nc", "ann", "nv", "no", "nt", "ni", "kn", "inn", "nz", "sn", " kn", "nw", "np", "dn", "unn", "cdn", "ln", "ns", "nl", "NN", "nb", "enn", "N", "pn", "sync", "len", "dd", "nr", "mn", "yy", "fn", "gn"], "scanner": ["caner", "scanler", "schener", "Scanning", "scheer", "Scanner", "Scaner", "annning", " scaner", "annner", "caninner", "scheler", "anninner", "Scaninner", "schening", " scanler", "anner", "canning", "scaninner", "scanning", "scaner", "Scanler", " scanning", "canner"], "n": ["nan", "f", "ne", "nc", "net", "no", "nt", "ni", "m", "number", "l", "nin", "na", "c", "d", "num", "network", "sn", "ny", "o", "j", "np", "s", "dn", "p", "b", "ns", "ln", "nb", "NN", "N", "pn", "len", "nr", "k", "mn", "conn", "nu", "fn", "nit", "gn", "r"], "i": ["f", "eni", "li", "fi", "I", "mini", "di", "in", "ri", "ni", "ami", "id", "gi", "m", "index", "ai", "io", "ani", "si", "v", "t", "c", "uli", "zi", "uri", "pi", "e", "o", "j", "u", "ii", "qi", "p", "ti", "b", "x", "oi", "abi", "ini", "ci", "ip", "iu", "xi", "ki", "multi", "bi"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String[] $){\\n\t\tSystem.err.println();\\n\t\tScanner s=new Scanner(System.in);\\n\t\tint n=s.nextInt(),m=s.nextInt();\\n\t\tSystem.out.println(n*m==2?3:n*m==6?1:2);\\n\t}\\n}", "target": "236", "substitutes": {"s": ["f", "ts", "is", "abs", "out", "sb", "in", "ssl", "si", "l", "its", "S", "ss", "ops", "g", "v", "ches", "se", "c", "er", "d", "ms", "ls", "fts", "es", "e", "o", "js", "xs", "p", "b", "stats", "ns", "sf", "sync", "utils", "tests", "ws", "ans", "sl", "os", "ins", "i", "strings", "ses", "parser", "rs", "fs", "ds", "bis", "r"], "n": ["f", "ne", "name", "nc", "nt", "ni", "count", "number", "l", "na", "v", "t", "c", "d", "num", "network", "sn", "u", "o", "j", "cn", "dn", "p", "b", "un", "ns", "nb", "N", "len", "z", "nr", " N", "mn", "k", "conn", "i", "nu", "an", "nn", "a", "net", "span"], "m": ["f", "h", "dim", "mc", "am", "l", "g", "v", "t", "c", "d", "ms", "y", "num", "cm", "u", "e", "o", "j", "mm", "p", "b", "x", "om", "w", "M", "N", "dm", "md", "z", "k", "mn", "mi", "i", "ym", "a", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tvoid solve() {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint a = scan.nextInt();\\n\t\tint b = scan.nextInt();\\n\t\tfor(int i = 1; i <= 100000; i++) {\\n\t\t\tif((int)(i * 0.08) == a && (int)(i * 0.1) == b) {\\n\t\t\t\tSystem.out.println(i);\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(-1);\\n\t\tscan.close();\\n\t}\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().solve();\\n\t}\\n}\\n", "target": "121", "substitutes": {"scan": ["gen", "parse", "stat", "ner", "lex", "skip", "car", "ann", "watch", "out", "fan", "in", "pan", "chan", "log", "match", "search", "pin", "ignore", "keep", "report", "n", "na", "server", "inter", "con", "se", "cat", "bug", "er", "can", "plan", "query", "read", "ry", "cache", "connect", "system", "all", "Scan", "row", "san", "sync", "en", "see", "sc", "ans", "an", "walk", "look", "trace", "nn", "run", "clean", "sign", "r", "span"], "a": ["f", "am", "ga", "A", "ab", "ma", "oa", "ad", "ai", "ea", "ac", "ba", "da", "ca", "area", "c", "aa", "d", "va", "u", "pa", "af", "api", "fa", "sa", "p", "ia", "ha", "au", "an", "ae", "alpha", "la"], "b": ["f", "h", "base", "sb", "db", "ab", "n", "l", "B", "wb", "ob", "ba", "fb", "emb", "c", "bar", "d", "y", "mb", "xb", "u", "e", "o", "j", "lb", "bb", "bis", "cb", "bot", "bs", "bd", "abb", "body", "bi", "eb"], "i": ["f", "li", "fi", "I", "clip", "di", "in", "ri", "id", "gi", "image", "index", "ai", "io", "ji", "n", "si", "ui", "mu", "phi", "v", "diff", "t", "it", "c", "d", "y", "uri", "u", "e", "pi", "j", "ii", "qi", "p", "ti", "x", "oi", "hi", "slice", "abi", "ini", "start", "yi", "z", "ci", "part", "k", "iu", "ip", "xi", "chi", "multi", "ix", "bi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n\\n    if (s.equals(\"Sunny\")) {\\n      System.out.println(\"Cloudy\");\\n    } else if (s.equals(\"Cloudy\")) {\\n      System.out.println(\"Rainy\");\\n    } else if (s.equals(\"Rainy\")) {\\n      System.out.println(\"Sunny\");\\n    }\\n  }\\n}", "target": "60", "substitutes": {"sc": ["osc", "ner", "ch", " Sc", "nc", "search", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "scope", "SC", "se", "c", "scan", "cs", "sw", "cl", "uc", "spec", "acc", "str", "Sc", "sub", "sci", "cr", "src", "sf", "sel", "rc", "sync", "enc", "sl", "set", "sp", " SC", "sh", "ec", "desc", " scr"], "s": ["f", "ts", "string", "series", "is", "less", "abs", "sb", "ssl", "in", "obs", "comments", "sv", "lines", "gs", "m", "south", "sg", "n", "si", "l", "S", "ss", "g", "t", "c", "d", "features", "su", "spec", "ls", "y", "site", "es", "u", "submit", "o", "js", "services", "p", "status", "stats", "sav", "shows", "ns", "sf", "sync", "ws", "sl", "sys", "sports", "styles", "os", "i", "strings", "ses", "states", "fs", "sym"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n    public static void main(String[] args) {\\n        \\n        Scanner scan = new Scanner(System.in);\\n        int num = scan.nextInt();\\n        int height = scan.nextInt();\\n        int count = 0;\\n        int i = 0;\\n        for (i = 0; i < num; i++){\\n            int heightI = scan.nextInt();\\n            if(heightI >= height){\\n                count++;\\n            }\\n        }\\n        System.out.println(count);\\n    }\\n}", "target": "145", "substitutes": {"scan": ["gen", "parse", "stat", "ner", "ann", "watch", "out", "chan", "in", "pan", "fan", "log", "search", "pin", "ignore", "n", "l", "exec", "server", "app", "con", "se", "result", "can", "reader", "plan", "query", "use", "nn", "serv", "connect", "iter", "all", "Scan", "ln", "row", "san", "sync", "slice", "see", "sc", "util", "conn", "parser", "cur", "an", "look", "skip", "ser", "run", "clean", "sign", "r", "span"], "num": ["mult", "dim", "name", "ul", "range", "no", "length", "id", "number", "index", "keep", "limit", "unit", "n", "total", "sum", "con", "pos", "zero", "inc", "width", "depth", "loc", "offset", "om", "nb", "Num", "start", "col", "header", "size", "umi", "comb", "part", "uni", "nu", "nn", "dom", "um"], "height": ["h", "shape", "level", "dim", "grade", "padding", "layout", "upper", "length", "id", "index", "window", "total", "d", "y", "width", "dy", "depth", "row", "rh", "density", "hash", "start", "resolution", "view", "size", "dir", "bottom", "angle", "gap", "ip", "alpha", "rank", "volume", "distance", "Height"], "count": ["list", "level", "name", "base", "call", "match", "Count", "length", "id", "code", "index", "limit", "err", "keep", "low", "number", "total", "sum", "more", "c", "max", "weight", "counter", "width", "info", "cache", "depth", "p", "offset", "ind", "start", "len", "char", "th", "col", "size", "work", "test", "coll", "found", "check", "parent"], "i": ["f", "eni", "li", "fi", "I", "base", "mini", "di", "in", "ami", "ni", "ri", "id", "gi", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "v", "it", "c", "zi", "uri", "pi", "u", "info", "j", "ii", "qi", "p", "hi", "ti", "x", "ind", "ini", "start", "ci", "line", "mi", "ip", "xi", "init", "chi", "multi", "bi"], "heightI": ["depthI", "HeightI", "heightPI", "widthI", "widthIO", "Heighti", "widthi", "sizeI", "heightII", "depthSI", "heighti", "heightIO", "HeightII", " heighti", "depthi", "widthII", "depthPI", "HeightIO", " heightPI", " heightII", "sizei", "sizeSI", " heightIO", "heightSI", "sizePI", " heightSI"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        \\n        Scanner sc = new Scanner(System.in);\\n        \\n        long a = Long.parseLong(sc.next()) -1;\\n        long b = Long.parseLong(sc.next());\\n        int c = Integer.parseInt(sc.next());\\n        int d = Integer.parseInt(sc.next());\\n        \\n        long a2 = a -(a/c) -(a/d) +(a / lcm(c, d));\\n        long b2 = b -(b/c) -(b/d) +(b / lcm(c, d));\\n        System.out.println(b2-a2);\\n    }\\n    \\n    private static long gcd(long a, long b){\\n        \\n        if(b == 0){\\n            return a;\\n        }else{\\n            return gcd(b, a % b);\\n        }\\n    }\\n    \\n    private static long lcm(long a, long b){\\n        \\n        return (a / gcd(a, b)) * b;\\n    }\\n}", "target": "9", "substitutes": {"sc": ["class", "parse", "ner", "ch", "osc", "cont", " Sc", "nc", "sb", "sche", "iv", "cli", "cv", "esc", "bc", "cc", "asc", "pc", "l", "cam", "ck", "sec", "anc", "g", "scope", "cus", "SC", "se", "scan", "cs", "uc", "ctx", "sw", "Sc", "system", "sq", "dc", "sci", "cr", "sf", "sync", "rc", "cer", "enc", "sr", "soc", "sl", "sp", "ci", " SC", "sch", "sh", "parser", "ec", "coll", "ser", "lc"], "a": ["f", "ama", "am", "ga", "A", "ab", "ad", "ma", "m", "ai", "n", "ea", "ac", "l", "na", "aw", "ba", "da", "area", "ca", "aa", "asa", "y", "ar", "aj", "va", "u", "e", "o", "pa", "af", "aaa", "s", "fa", "sa", "p", "ia", "as", "x", "w", "au", "ak", "wa", "i", "art", "an", "ae", "ada", "alpha", "la", "r"], "b": ["f", "bf", "pb", "h", "br", "base", "A", "sb", "ab", "db", "ad", "length", "ub", "limit", "m", "bc", "n", "l", "ac", "B", "wb", "ob", "g", "ba", "v", "end", "bound", "fb", "bp", "aa", "bar", "y", "rb", "u", "e", "o", "j", "lb", "api", "bb", "s", "fa", "p", "x", "boot", "nb", "cb", "w", "ib", "or", "z", "bs", "part", "k", "i", "abb", "an", "be", "body", "bi", "eb", "r"], "c": ["f", "cd", "h", "ch", "ad", "cy", "m", "code", "n", "l", "ac", "g", "v", "ca", "t", "cs", "y", "ce", "u", "e", "o", "s", "dc", "p", "x", "C", "cb", "w", "cu", "z", "ci", "k", "ct", "i", "ec", "ae", "lc", "r"], "d": ["f", "cd", "nd", "h", "dt", "db", "ad", "m", "n", "l", "g", "v", "da", "t", "dat", "D", "y", "dx", "u", "e", "o", "j", "did", "dy", "dc", "p", "x", "w", "du", "dd", "z", "bd", "i", "ds", "r"], "a2": ["alpha2", " a1", "alpha3", "an02", "an1", "bar3", "b02", "alphaii", "bar2", " aii", "a02", "antwo", "aii", " a3", " a02", "a3", " atwo", "barii", "an2", "bartwo", "a1", "b1", "alphatwo", "btwo", "atwo"], "b2": ["sb4", "c4", "b4", "e2", "sb52", "f2", " b52", "b52", "sb2", "e4", "f4", "sb62", "e62", "e52", " b4", "c2", "b62", " b62"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc=new Scanner(System.in);\\n        int n=sc.nextInt();\\n      String po=sc.next();\\n      String po2=po.substring(0,n/2);\\n      String po3=po.substring(n/2);\\n        System.out.println((po2.equals(po3))?\"Yes\":\"No\");\\n    }\\n}\\n", "target": "161", "substitutes": {}}
{"code": "\\n\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.ArrayList;\\nimport java.util.HashMap;\\nimport java.util.InputMismatchException;\\nimport java.util.List;\\nimport java.util.Map;\\n\\npublic class Main {\\n    FastScanner in = new FastScanner(System.in);\\n    PrintWriter out = new PrintWriter(System.out);\\n\\n    public static void main(String[] args) {\\n        new Main().calc();\\n    }\\n    \\n    public void calc() {\\n        int N = in.nextInt();\\n        int ans = 0;\\n        \\n        for (int i = 1; i <= N; i = i * 2) {\\n            ans = i;\\n        }\\n\\n        out.println(ans);\\n        out.close();\\n    }\\n    \\n    class FastScanner {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n\\n        public FastScanner(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        int read() {\\n            if (numChars == -1)\\n                throw new InputMismatchException();\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0)\\n                    return -1;\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        boolean isSpaceChar(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        boolean isEndline(int c) {\\n            return c == '\\n' || c == '\\r' || c == -1;\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        int[] nextIntArray(int n) {\\n            int[] array = new int[n];\\n            for (int i = 0; i < n; i++)\\n                array[i] = nextInt();\\n\\n            return array;\\n        }\\n\\n        int[][] nextIntMap(int n, int m) {\\n            int[][] map = new int[n][m];\\n            for (int i = 0; i < n; i++) {\\n                map[i] = in.nextIntArray(m);\\n            }\\n            return map;\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        long[] nextLongArray(int n) {\\n            long[] array = new long[n];\\n            for (int i = 0; i < n; i++)\\n                array[i] = nextLong();\\n\\n            return array;\\n        }\\n\\n        long[][] nextLongMap(int n, int m) {\\n            long[][] map = new long[n][m];\\n            for (int i = 0; i < n; i++) {\\n                map[i] = in.nextLongArray(m);\\n            }\\n            return map;\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        double[] nextDoubleArray(int n) {\\n            double[] array = new double[n];\\n            for (int i = 0; i < n; i++)\\n                array[i] = nextDouble();\\n\\n            return array;\\n        }\\n\\n        double[][] nextDoubleMap(int n, int m) {\\n            double[][] map = new double[n][m];\\n            for (int i = 0; i < n; i++) {\\n                map[i] = in.nextDoubleArray(m);\\n            }\\n            return map;\\n        }\\n\\n        String next() {\\n            int c = read();\\n            while (isSpaceChar(c))\\n                c = read();\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                res.appendCodePoint(c);\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        String[] nextStringArray(int n) {\\n            String[] array = new String[n];\\n            for (int i = 0; i < n; i++)\\n                array[i] = next();\\n\\n            return array;\\n        }\\n\\n        String nextLine() {\\n            int c = read();\\n            while (isEndline(c))\\n                c = read();\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                res.appendCodePoint(c);\\n                c = read();\\n            } while (!isEndline(c));\\n            return res.toString();\\n        }\\n    }\\n}\\n", "target": "225", "substitutes": {"in": ["f", "gen", "name", "path", "data", "is", "input", "lin", "log", "err", "din", "pin", "id", "inner", "image", "io", "l", "IN", "inn", "con", "bin", "reader", "kin", "per", "query", "inc", "read", "source", "buffer", "info", "user", "s", "as", "b", "src", "ini", "win", "line", "ins", "conn", "init", "In", "gin", "inf", "a"], "out": ["gen", "obj", "list", "client", "arg", "name", "path", "string", "data", "input", "console", "prefix", "call", "log", "err", "post", "inner", "io", "window", "exec", "v", "up", "write", "bin", "OUT", "output", "buffer", "ex", "inc", "o", "user", "cache", "to", "p", "error", "file", "w", "Out", "pool", "extra", "dump", "again", "temp", "table", "line", "conn", "writer", "outer", "png", "outs", "parent"], "N": ["NE", "G", "K", "Len", "I", "L", "Z", "Size", "A", "NI", "X", "Ni", "P", "Q", "NS", "H", "B", "S", "Y", "D", "J", "F", "V", "R", "C", "T", "Num", "M", "NA", "Ns", "NT", "Number", "O"], "ans": ["names", "ANS", "cons", " scans", "ann", "reads", "ai", "vs", "amps", "S", "annels", "ss", "na", "AN", "anc", "cs", "ents", "errors", "can", "lan", "ls", "es", "ids", "ens", "aus", "s", "as", "x", "ns", "An", "san", "ants", "sk", "eps", "acs", "os", "ins", "ks", "ras", "an", "outs", "ars", "span", "ds", "ana", "ons"], "i": ["f", "eni", "li", "h", "fi", "I", "one", "di", "ri", "ni", "ik", "gi", "id", "index", "me", "ai", "key", "io", "ji", "si", "l", "ui", "mu", "phi", "v", "it", "ie", "d", "y", "uri", "zi", "u", "e", "pi", "j", "info", "o", "ii", "qi", "ti", "hi", "b", "oi", "x", "p", "abi", "ini", "q", "im", "z", "ci", "mi", "ip", "iu", "xi", "init", "chi", "multi", "ix", "bi", "my", "a"], "stream": ["f", "class", "channel", "h", "client", "transform", "path", "string", "data", "raw", "input", "roll", "ssl", "context", "object", "document", "null", "track", "server", "self", "v", "port", "result", "form", "sw", "forward", "ream", "model", "reader", "per", "feed", "request", "resource", "output", "source", "this", "e", "wrapper", "stack", "pipe", "src", "file", "w", "speed", "response", "pool", "trans", "sl", "temp", "view", "through", "Stream", "engine", "host", "cur", "body", "handler", "ack", "control", "clean", "socket"], "buf": ["Buffer", "br", "cf", "data", "raw", "cmd", "bu", "buff", "bh", "cv", "config", "bc", "Buff", "wb", "queue", "fab", "ba", "conv", "exc", "bp", "ctx", "uc", "bin", "vec", "seq", "buffer", "batch", "rb", "img", "bb", "uf", "flush", "b", "bag", "src", "cb", "cas", "rc", "box", "tmp", "cap", "bytes", "pad", "cur", "fam", "func", "fb", "bg"], "curChar": ["curchar", "surchar", " curByte", "surByte", "CurCharacter", "Curchar", "urCh", "curCh", "serchar", " curCharacter", " curchar", "perCh", "curByte", "urCharacter", "perchar", "perCharacter", "urchar", "urChar", "perChar", "surChar", "surCh", "serChar", "serCh", "CurChar", " curCh", "CurByte", "CurCh", "serCharacter", "curCharacter"], "numChars": ["sumChars", " numCats", "sumChases", "sumchats", " numCARS", "numCHARS", "sumchARS", "curCHacters", "numGrars", "numCHacters", "numCuracters", " numChans", "numCurarts", " numChers", "numScars", "numchases", "numScats", "sumChats", "numCHarts", "numCHans", "curCHars", "numchARS", "numchars", "numChans", " numCans", "numChannels", "numCHannels", "numCurARS", " numChannels", " numCHans", "numGrats", " numCHars", "sumChARS", "numCharts", "numChARS", "numCHers", "numCHars", "numChacters", "curChars", "curCHARS", "numChases", "sumchases", "numchats", "numcharts", "numChers", "numCARS", " numChARS", "sumchars", "numchacters", "curChacters", "curChARS", "numchannels", "curCharts", "numCans", "numScers", "numGrannels", "numCats", "numCHases", "numCurars", "numchans", "numCHats", " numCHats", " numChats", "numCases", "numGrans", "numCars", "numChats", "curCHarts", "numScARS", " numCars", " numCHannels"], "c": ["f", "content", "xc", "h", "ch", "cf", "fc", "cont", "string", "vc", "count", "code", "cc", "cy", "esc", "unc", "l", "ac", "sec", "g", "v", "Char", "end", "cs", "t", "uc", "cl", "d", "y", "ce", "cm", "u", "e", "loc", "s", "dc", "p", "b", "x", "C", "cr", "cb", "w", "rc", "enc", "char", "sc", "or", "col", "cu", "z", "ci", "line", "k", "ct", "cp", "arc", "ec", "cur", "coll", "cmp", "lc", "a", "r"], "nextIntArray": [" nextIntList", " nextintMatrix", "nextStringA", "nextFloatMatrix", " nextintArray", "nextIntList", "nextintList", " nextIntA", "nextintArray", "nextStringMatrix", "nextFloatA", "nextIntMatrix", "nextIntA", " nextIntMatrix", "nextintMatrix", "nextStringList", "nextFloatArray", " nextintA", "nextFloatList", "nextintA", " nextintList"], "n": ["f", "nm", "h", "ne", "name", "nc", "net", "no", "nt", "count", "number", "l", "g", "v", "t", "num", "d", "y", "network", "sn", "u", "e", "o", "j", "cn", "p", "b", "x", "all", "ns", "ln", "en", "w", "M", "len", "z", "k", "mn", "an", "nn", "a", "r"], "array": ["value", "list", "allow", "shape", "string", "data", "one", "instance", "range", "element", "group", "length", "image", "number", "collection", "index", "integer", "object", "default", "arr", "block", "order", "address", "app", "union", "v", "ray", "area", "result", "vector", "air", "use", "batch", "cache", "section", "record", "stack", "row", "all", "back", "au", "hash", "view", "coll", "a", "pair", "Array"], "nextIntMap": ["nextIntegerTable", "nextintObject", "nextintMap", " nextintArray", "nextIntegerObject", "nextIntObject", "nextINTArray", " nextintObject", "nextIntegerArray", "nextIntegerMap", " nextintMap", "nextintTable", "nextintArray", "nextINTTable", " nextIntTable", "nextIntTable", " nextintTable", "nextINTMap", " nextIntObject", "nextINTObject"], "m": ["f", "nm", "h", "mc", "l", "g", "v", "d", "ms", "num", "y", "cm", "u", "e", "o", "j", "mm", "p", "b", "x", "all", "om", "M", "z", "k", "mn", "mi", "an", "a", "r"], "map": ["list", "cover", "path", "data", "co", "range", "me", "group", "id", "image", "code", "config", "arr", "block", "pre", "address", "app", "maps", "min", "type", "mp", "ap", "per", "batch", "cache", "pack", "p", "file", "mask", "hash", "set", "table", "cap", "dict", "module", "MAP"], "next": ["shift", "Next", "data", "is", "range", "token", "random", "code", "number", "key", "config", "text", "message", "sec", "last", "sum", "result", "page", "first", "iterator", "scan", "resource", "read", "this", "current", "prev", "second"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder();\\n\\n\t\tint x;\\n\t\tint i = 0;\\n\\n\t\twhile ( 0 !=  ( x = sc.nextInt() ) ) {\\n\t\t\ti++;\\n\t\t\tsb.append(\"Case \" + i + \": \" + x + \"\\n\");\\n\t\t}\\n\\n\t\tSystem.out.print(sb);\\n\t}\\n\\n}", "target": "97", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\nclass Main {\\n\t\\n    public static void main(String[] args) {\\n\t\tOriginScanner os = new OriginScanner();\\n\t\tPrintWriter pw = new PrintWriter(System.out);\\n\t\t\\n\t\tString s = os.next();\\n\t\tboolean isNo = false;\\n\t\tfor (int i = 0; i < s.length(); i++) {\\n\t\t\tchar c = s.charAt(i);\\n\t\t\tif ((i + 1) % 2 == 0) {\\n\t\t\t\tif (c == 'R') {\\n\t\t\t\t\tisNo = true;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\telse {\\n\t\t\t\tif (c == 'L') {\\n\t\t\t\t\tisNo = true;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tif (isNo) pw.println(\"No\");\\n\t\telse pw.println(\"Yes\");\\n\t\tpw.close();\\n\t}\\n    \\n\tstatic class OriginScanner {\\n\t\tStringTokenizer token;\\n\t\tBufferedReader br;\\n\t\t\\n\t\tpublic OriginScanner() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\t\\n\t\tString nextLine() {\\n\t\t\tString str = null;\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t}\\n\t\t\tcatch (IOException e) {\\n\t\t\t\tSystem.out.println(e);\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t\t\\n\t\tString next() {\\n\t\t\twhile (token == null || !token.hasMoreElements()) { \\n\t\t\t\ttoken = new StringTokenizer(nextLine());\\n\t\t\t}\\n\t\t\treturn token.nextToken();\\n\t\t}\\n\t\t\\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\t\t\\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\t}\\n}", "target": "205", "substitutes": {"os": ["oos", "ois", "oses", "is", "out", "obs", "dos", "opus", "io", "vs", "oser", "ori", "ops", "ss", "ros", "ios", "cs", "Os", "iso", "pos", "oS", "so", "es", "OS", "o", "as", "bos", "bis", "ps", "ws", "osi", "los", "op", "bs", "us", "cos", "ips", "fs", "ols", "aos", "oss"], "pw": ["pwa", "pb", " pf", "apW", "ipW", "copwb", "Pow", "apwa", "epw", "pf", "apow", "apv", "copp", "copW", "ipf", "Pw", " pp", "ipw", "Pv", "pwb", "pow", "epow", "Pf", "epv", " pwb", "epW", "pW", "apb", "pp", "copw", "apw", " pb", " pwa", "Pp", "Pwa", "PW", "Pb", "Pwb", "pv", "ipwa", " pW"], "s": ["f", "string", "is", "input", "abs", "obs", "sv", "m", "gs", "n", "si", "l", "ss", "S", "g", "su", "ls", "es", "u", "e", "o", "qs", "services", "xs", "p", "as", "b", "sets", "ns", "ans", "sl", "styles", "ins", "ings", "strings", "ses", "rs", "fs", "a", "r"], "i": ["f", "eni", "li", "h", "I", "is", "di", "in", "ri", "ami", "id", "gi", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "t", "ie", "d", "uri", "zi", "u", "e", "o", "pi", "j", "api", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "abi", "ini", "ci", "ip", "xi", "ix", "multi", "bi", "lc", "a"], "c": ["f", "xc", "ch", "string", "vc", "nc", "code", "cc", "esc", "pc", "n", "unc", "l", "ac", "v", "t", "cs", "uc", "cl", "d", "ce", "dec", "u", "e", "o", "p", "dc", "b", "C", "cr", "cb", "rc", "enc", "char", "cu", "sc", "col", "ci", "k", "ct", "arc", "ec", "cur", "coll", "lc", "r"], "isNo": ["islYes", "islNo", " isN", " isError", "idYes", " isOnly", "showYes", "isNone", "asYes", "showNo", "asError", "isError", "asNo", "isOk", "isino", " isOk", "ino", "idN", "showNone", " isNone", "islOk", "showN", "isiYes", "iNo", "Isno", "isiNot", " isYes", "isno", " isno", "IsOnly", "idNo", "IsNo", "iYes", "isNot", "islError", " isNot", "IsNot", "iOnly", "isN", "isiNo", "asOk", "IsYes", "idNone", "isYes", "isOnly"], "token": ["value", "valid", "val", "tree", "Token", "string", "data", "format", "out", "element", "prefix", "err", "inner", "key", "wt", "code", "number", "random", "json", "pr", "object", "not", "service", "character", "n", "text", "oken", "pre", "scope", "print", "t", "bar", "result", "type", "vector", "reader", "author", "resource", "next", "buffer", "source", "word", "info", "url", "user", "o", "year", "iter", "stop", "p", "date", "color", "row", "error", "sync", "start", "po", "response", "or", "rot", "header", "rule", "writer", "variable", "tag", "r", "span"], "br": [" tr", "obj", "tr", "ner", "rt", "out", "bh", "ctr", "ler", "bl", "err", "bro", "fr", "bc", "pr", "ver", "arr", "dr", "mr", "bar", "result", "buf", "er", "reader", "kr", "ar", "serv", "rb", "gr", "hr", "ur", "rib", "iter", "p", "b", "cr", "src", "yr", "ocr", "ber", "res", "sr", "or", "brush", "nr", "BR", "browser", "bridge", "lr", "Br", "adr", "r"], "str": ["f", "tr", "val", "ner", "div", "string", "data", "st", "in", "err", "code", "inner", "fr", "pr", "arr", "l", "text", "dr", "t", "result", "doc", "er", "entry", "kr", "e", "url", "iter", "p", "x", "STR", "cr", "pass", "sr", "char", "sl", "z", "sp", "line", "Str", "r"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\n/**\\n * http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ITP1_5_A\\n * \\n * @author eitatsuro\\n * \\n */\\npublic class Main {\\n    static final String HASHMARK = \"#\";\\n    static final String DOTMARK  = \".\";\\n    \\n    public static void main(String[] args) {\\n        try {\\n            BufferedReader stdReader = new BufferedReader(\\n                    new InputStreamReader(System.in));\\n            \\n            String sStr;\\n            while ((sStr = stdReader.readLine()) != null) {\\n                String[] inputs = sStr.split(\" \");\\n                \\n                int h = Integer.valueOf(inputs[0]);\\n                int w = Integer.valueOf(inputs[1]);\\n                \\n                if (h == 0 && w == 0) {\\n                    break;\\n                    // nothing to do.\\n                }\\n                \\n                for (int i = 0; i < h; i++) {\\n                    for (int j = 0; j < w; j++) {\\n                        if (i < h - 1 && j < w - 1 && 0 <i && 0 < j) {\\n                            System.out.print(DOTMARK);\\n                        } else {\\n                            System.out.print(HASHMARK);\\n                        }\\n                    }\\n                    System.out.println();\\n                }\\n                System.out.println();\\n            }\\n            stdReader.close();\\n        } catch (Exception e) {\\n            System.exit(-1);\\n        }\\n    }\\n}", "target": "19", "substitutes": {"HASHMARK": ["HASHLMark", "HASHMOCK", "HashMARK", "HASHMIX", "HASHMMark", "HashAMDIX", "HashAMDMark", "HASHLOCK", "HASHLARK", "HashMMark", "HashAMDARK", "HASHSMMark", "HashMOCK", "HASHSMARK", "HASHSMOCK", "HASHLIX", "HASHAMDARK", "HashMIX", "HASHSMIX", "HASHAMDMark", "HASHAMDOCK", "HASHAMDIX", "HashAMDOCK"], "DOTMARK": ["DotMAK", "DotMARK", "DOTmONEY", "DOTFMAK", "DotFMONEY", "DotFMAK", "DOTmATCH", "DOTMATCH", "DOTMDAK", "DotMATCH", "DOTFMARK", "DOTMONEY", "DotMONEY", "DOTFMONEY", "DOTMAK", "DOTMDONEY", "DOTmARK", "DOTMDATCH", "DOTFMATCH", "DOTmAK", "DOTMDARK", "DotFMATCH", "DotFMARK"], "stdReader": ["stdRead", "sRead", "gdServer", " stdStream", "inputIO", " stdServer", "stdStream", "stdIO", "standardStream", " stdIO", "sIO", "gdStream", "stdServer", "standardWriter", "sReader", "inputWriter", "stdWriter", "inputRead", " stdWriter", "standardReader", "standardServer", "gdWriter", "inputReader", "gdReader", "sWriter", " stdRead"], "sStr": ["pSt", "dString", "lString", " sSTR", " sSpec", "sstr", " sStream", "pString", "lStr", "submitSt", "pSpec", "dstr", " sstr", " sSplit", "dSTR", "submitSplit", "submitStr", "dStr", "lsstr", "lsString", "submitStream", "lsSTR", "sString", " sSt", "lsStr", "lSt", "sSplit", "sStream", " sString", "sSt", "sSpec", "lSpec", "sSTR", "pStr"], "inputs": ["inputi", "structments", "structi", "Inputp", "inputp", " inputers", "structlines", "Inputops", "ints", "Inputs", "structs", "Inputi", "inputlines", " inputops", " inputments", " inputlines", "pullers", "intops", "Inputlines", "Inputments", "pulls", "intp", "intlines", "inputops", "Inputers", "inputers", "inputments", "pulllines", " inputp", " inputi"], "h": ["div", "hs", "ph", "ih", "bh", "in", "oh", "length", "m", "hh", "hd", "H", "l", "height", "home", "phi", "v", "ah", "y", "dh", "u", "hr", "j", "s", "hi", "p", "b", "x", "rh", "ha", "gh", "hm", "th", "hp", "z", "k", "ht", "sh", "i", "a"], "w": ["f", "wx", "m", "n", "l", "g", "v", "wd", "c", "sw", "d", "y", "width", "W", "u", "s", "p", "b", "x", "wal", "fw", "wh", "ws", "win", "z", "k", "work", "sh", "i", "q"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int K = sc.nextInt();\\n        String S = sc.next();\\n        sc.close();\\n        if (K == 1) {\\n            System.out.println(S.substring(K-1, K).toLowerCase() + S.substring(K));\\n        } else if (K == N) {\\n            System.out.println(S.substring(0, K-1) + S.substring(K-1, K).toLowerCase());\\n        } else {\\n            System.out.println(S.substring(0, K-1) + S.substring(K-1, K).toLowerCase() + S.substring(K, N));\\n        }\\n    }\\n}\\n", "target": "71", "substitutes": {"sc": ["ner", "ch", "osc", "cont", "mc", "nc", "sche", "sb", "cle", "proc", "esc", "bc", "cc", "asc", "pc", "ss", "anc", "scope", "ca", "SC", "se", "c", "scan", "cs", "sw", "cl", "cus", "uc", "Sc", "sq", "sub", "dc", "sci", "cr", "sync", "rc", "cer", "sr", "enc", "sp", " SC", "ct", "sch", "sh", "parser", "tc", "cur", "sem", "ser", "lc"], "N": ["NE", "G", "I", "L", "Z", "Size", "A", "SK", "X", "Ni", " n", "P", "Q", "NS", "H", "n", "NC", "Y", "B", "Sk", "E", "D", "NL", "W", "J", "F", "V", "No", "R", "NB", "NN", "C", "T", "U", "M", "NA", "Ne", "Key", "NR", "k", "Ns", "O"], "K": ["O", "Mask", "G", "KC", "Length", "I", "Id", "L", "Z", "PK", "Ak", "SK", "X", "Ke", "KR", "P", " k", "Q", "HK", "NK", "KS", "H", "Y", "B", "FK", "Pull", "Kind", "E", "D", "Read", "W", "Ka", "J", "Point", "F", "Work", "CL", "V", "No", "Check", "Power", "R", "Location", "KK", "KI", "C", "U", "T", "M", "Max", "Key", "KA", "k", "KE", "AK", "OK", "IK", "Ku", "Group", "UK", "Keep", "Sk", "KO", "ID"], "S": ["O", "Ps", "SA", "G", "DS", "Session", "L", "Si", "Source", "A", "SK", "Socket", "INS", "SO", "X", "P", "SN", "NS", "Sync", "Sample", "ss", "SH", "BS", "Y", "RS", "As", "Es", "ST", "VS", "Os", "FS", "Site", "OS", "SL", "Su", "F", "V", "s", "IS", "R", "STR", "C", "SS", "T", "U", "SE", "M", "CS", "SU", "Sing", "TS", "SR", "Fs", "Single", "Client", "PS", "Ns", "OSS", "Ds", "Standard", "GS", "HS", "US", "SI", "Ins"]}}
{"code": "import java.util.*;\\nimport javax.lang.model.util.ElementScanner6;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        // \u5165\u529b\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n\\n        long out = a;\\n        long a1 = a;\\n        long b1 = b;\\n        while (!(out % a == 0 && out % b == 0)) {\\n            out = a1 > b1 ? a1 : b1;\\n            if (a1 < out) {\\n                a1 += a;\\n            }\\n            if (b1 < out) {\\n                b1 += b;\\n            }\\n        }\\n\\n        // \u51fa\u529b\\n        System.out.println(out);\\n    }\\n}", "target": "67", "substitutes": {"sc": [" cont", " pars", " Sc", "nc", "ann", " arr", "sb", "bc", "si", "ss", " ans", "gram", " subp", "SC", "se", "scan", "c", "sw", "Sc", "sq", "sci", "cr", "sf", "sp", " ann", "an", " ser", " scr"]}}
{"code": "import java.io.FileNotFoundException;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws FileNotFoundException {\\n\\n\t\t//    \tFile file = new File(\"src/in.txt\");\\n\t\t//    \tScanner sc = new Scanner(file);\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tint Q = sc.nextInt();\\n\t\tint[] p = new int[N+1];\\n\t\tArrays.fill(p, K);\\n\t\tint border = 0;\\n\t\tfor(int i=0;i<Q;i++) {\\n\t\t\tint x = sc.nextInt();\\n\t\t\tp[x]++;\\n\t\t\tborder++;\\n\t\t}\\n\t\tfor(int i=1;i<=N;i++) {\\n\t\t\tif(p[i]>border) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "102", "substitutes": {}}
{"code": "/*\\n *  author : Atul Anand   \\n *  created on : Wed Apr 01 2020\\n */\\n\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n\\n    public static void main(String[] args) throws IOException {\\n        int a = in.nextInt();\\n        int b = in.nextInt();\\n        String A = \"\";\\n        String B = \"\";\\n        for(int i = 0; i < b; i++){\\n            A += a;\\n        }\\n\\n        for(int i = 0; i < a; i++){\\n            B += b;\\n        }\\n\\n        if(A.compareTo(B) <= 0){\\n            println(A);\\n        }\\n        else{\\n            println(B);\\n        }\\n\\n        in.close();\\n        out.close();\\n    }\\n\\n    static int MIN = Integer.MIN_VALUE;\\n    static int MAX = Integer.MAX_VALUE;\\n    static Reader in = new Reader();\\n    static PrintWriter out = new PrintWriter(System.out);\\n\\n    static void read(int arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextInt(); \\n    \t} \\n    }\\n    \\n    static void read(long arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextLong(); \\n    \t} \\n    }\\n    \\n    static void read(String arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.next(); \\n    \t} \\n    }\\n    \\n    static void print(Object O) {  \\n    \tout.print(O); \\n    }\\n    \\n    static void println(Object O) { \\n    \tout.println(O); \\n    }\\n    \\n    static void println(int arr[]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprint(arr[i]+\" \"); \\n    \t} \\n    \tprintln(\"\"); \\n    }\\n\\n    static void println(int arr[][]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprintln(arr[i]); \\n    \t}\\n    }\\n    \\n    static void debug(Object O) { \\n    \tSystem.out.println(O); \\n    }\\n}\\n\\nclass Reader {\\n    BufferedReader reader;\\n    StringTokenizer tokenizer;\\n\\n    Reader() {\\n        reader = new BufferedReader(new InputStreamReader(System.in));\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n\\n    String next() throws IOException {\\n        while (!tokenizer.hasMoreTokens() ) { \\n            tokenizer = new StringTokenizer(reader.readLine()); \\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    int nextInt() throws IOException { \\n        return Integer.parseInt(next()); \\n    }\\n    \\n    double nextDouble() throws IOException { \\n        return Double.parseDouble(next());\\n    }\\n    \\n    long nextLong() throws IOException { \\n        return Long.parseLong(next()); \\n    }\\n    \\n    String nextLine() throws IOException { \\n        return reader.readLine(); \\n    }\\n    \\n    void close() throws IOException { \\n        reader.close(); \\n    }\\n}", "target": "24", "substitutes": {"a": ["f", "base", "am", "one", "ga", "ab", "ad", "m", "n", "ac", "na", "ba", "da", "ca", "area", "c", "aa", "d", "y", "aj", "array", "va", "u", "e", "pa", "af", "api", "at", "sa", "as", "p", "fa", "x", "au", "an", "ae", "alpha", "la"], "b": ["f", "bf", "h", "base", "buff", "sb", "db", "ab", "m", "bc", "n", "l", "wb", "ob", "ba", "v", "bound", "c", "aa", "bp", "bar", "bin", "d", "y", "mb", "xb", "rb", "u", "e", "lb", "j", "bb", "p", "boot", "nb", "cb", "bs", "beta", "abb", "eb", "body", "bi", "fb"], "A": ["AW", "SA", "I", "L", "AA", "PA", "This", "API", "X", "P", "HA", "AST", "AV", "S", "Y", "AB", "As", "OA", "IA", "GA", "D", "AP", "MA", "Ma", "F", "BA", "CA", "Ca", "AC", "AF", "C", "U", "Ar", "Alpha", "AM", "NA", "AR", "LA", "mA", "AMI", "Array", "RA"], "B": ["MB", "Other", "BM", "QB", "G", "I", "Bi", "L", "Java", "BB", "VB", "DB", "CB", "Bah", "BF", "X", "P", "LB", "GB", "Beta", "H", "URL", "Y", "BG", "BS", "AB", "S", "UB", "E", "D", "BE", "PB", "TB", "W", "BI", "SB", "EB", "BER", "Blue", "BA", "BL", "J", "F", "NB", "V", "R", "C", "U", "WB", "M", "RB", "BBC", "AR", "BR", "Bs", "Ub", "BC", "Base", "OB"], "i": ["f", "eni", "name", "mini", "is", "me", "gi", "key", "m", "l", "block", "mu", "idi", "c", "uri", "api", "ii", "qi", "oi", "iu", "isi", "init", "multi", "h", "di", "ri", "ai", "it", "adi", "resource", "source", "u", "j", "hi", "ini", "z", "ci", "mi", "ix", "bi", "lc", "li", "fi", "I", "id", "ji", "ui", "phi", "g", "y", "zi", "e", "o", "ei", "ti", "p", "slice", "yi", "line", "chi", "my", "q", "ik", "ni", "cli", "io", "n", "si", "ori", "v", "ie", "pi", "info", "x", "abi", "ip", "xi", "r"], "MIN": ["SA", "VALUE", "ALL", " min", "P", "S", "IN", "Minimum", "min", "NO", "Min", "MN", "VAL", "BER", "OR", "CL", "BA", "V", "minimum", "R", "SIZE", "M", "NA", "TYPE", "RA", "ID"], "MAX": ["VALUE", "ALL", "EN", "X", "NV", "AST", "EXT", " max", "max", "PER", "NUM", "Maximum", "END", "VAL", "BER", "CL", "R", "CR", "SIZE", "M", "Max", "maximum", "EST", "AK", "ND", "AX", "RA"], "in": ["gen", "on", "rec", "path", "data", "impl", "is", "input", "version", "lin", "log", "err", "din", "image", "binary", "inner", "pin", "n", "exec", "l", "nin", "IN", "inn", "loader", "diff", "con", "r", "c", "doc", "bin", "d", "isin", "kin", "resource", "inc", "read", "source", "buffer", "serv", "ex", "url", "user", "as", "x", "ic", "file", "w", "rin", "ini", "login", "win", "again", "part", "line", "ins", "conn", "connection", "init", "In", "gin", "socket"], "out": ["gen", "obj", "client", "list", "comment", "name", "path", "data", "format", "log", "err", "key", "inner", "io", "object", "n", "IN", "pre", "scope", "v", "print", "t", "c", "Output", "page", "bin", "write", "OUT", "query", "resource", "output", "buffer", "ex", "external", "o", "user", "cache", "str", "target", "at", "p", "x", "error", "file", "Out", "w", "Writer", "println", "or", "pool", "again", "line", "part", "copy", "writer", "outer", "connection", "init", "outs", "In", "lock", "parent", "r"], "arr": ["map", "obj", "parse", "list", "br", "tr", "arg", "ch", "shr", "div", "series", "umpy", "data", "ml", "ann", "format", "upper", "err", "arch", "bl", "fr", "pr", "par", "dr", "rep", "app", "ray", "attr", "dat", "aa", "bar", "att", "cat", "air", "ar", "aj", "array", "xml", "vec", "abc", "plot", "batch", "gr", "war", "str", "img", "cache", "aaa", "iter", "dict", "av", "p", "archive", "all", "stack", "var", "Ar", "enc", "rr", "ARR", "arc", "arm", "atts", "coll", "arp", "Array", "ars", "adr", "el", " array", "r"], "N": ["G", "K", "I", "L", "Z", "Size", "Count", " n", "Node", "X", "P", "Class", "Q", "NS", "SN", "H", "n", "NC", "S", "Y", "IO", "Na", "E", "D", "network", "None", "W", "J", "F", "V", "No", "NM", "R", "NB", "C", "T", "CR", "Num", "M", "NA", "Ne", "Ns", "NT", "Number", "KN"], "O": ["Other", "G", "K", "OU", "I", "L", "OT", "EO", "File", "SO", "P", "DO", "Q", "object", "H", "RO", "Y", "PO", "IO", "E", "Os", "D", "Output", "ON", "OP", "OH", "OS", "W", "o", "J", "F", "OR", " o", "V", "R", "OO", "T", "C", "U", "M", "GO", "MO", "OK", "ION", "OL"], "reader": ["f", "value", "ner", "data", "oder", "input", "instance", "ler", "inner", "io", "service", "book", "server", "print", "loader", "driver", "result", "iterator", "er", "per", "feed", "read", "buffer", "ry", "o", "iter", "manager", "row", "reading", "file", "Reader", "or", "rr", "stream", "writer", "parser", "connection", "handler", "lock", "r"], "tokenizer": ["tokenize", "Tokenizer", "serializ", "tokenized", "okenizable", "okenizing", "Tokenizable", "Tokenized", "serialize", "serializer", "Tokeniz", "Tokenizing", "okenized", "serializing", "tokenizing", "Tokenize", " tokenize", " tokenizable", "tokenizable", " tokenizing", "okenizer", " tokenized", "tokeniz", " tokeniz"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.StringTokenizer;\\n\\n\\npublic class Main{\\n\t\\n\tstatic class FastReader \\n    { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() \\n        { \\n            br = new BufferedReader(new\\n                     InputStreamReader(System.in)); \\n        } \\n  \\n        String next() \\n        { \\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() \\n        { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() \\n        { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() \\n        { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() \\n        { \\n            String str = \"\"; \\n            try\\n            { \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) \\n            { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    }\\n\t\\n\tstatic class Pair\\n    {\\n\t\tint x;\\n\t\tint y;\\n    Pair(int x,int y)\\n    {\\n        this.x = x;\\n        this.y = y;\\n    }\\n    \\n}\\n\tstatic class SegmentTree {\\n        public int[] seg;\\n        public int N;\\n        public int size;\\n\\n        public SegmentTree(int n) {\\n            \\n        \tint h = (int)Math.ceil((double)Math.log(n)/Math.log(2));\\n        \t\\n        \tthis.size = (int)Math.pow(2,h)*2-1;\\n        \tseg = new int[size];\\n        }\\n\\n\\n\\n        public int update(int l, int r, int i, int val) {\\n        \t\\n        \t\\n        \tif(l == r && l == val)\\n        \t{\\n        \t\tseg[i]++;\\n        \t\treturn seg[i];\\n        \t}\\n        \tif(l > r || l == r || val > r || val < l) return seg[i];\\n            int m = (l+r) >>> 1;\\n            \\n            int left = update(l,m,2*i+1,val);\\n            \\n            int right = update(m+1,r,2*i+2,val);\\n            \\n            seg[i] = left+right;\\n            return seg[i];\\n        }\\n\\n        \\n\\n        public int getValue(int l, int r, int i, int ql, int qr) {\\n        \t\\n            if (l > r || ql > qr || l > qr || r < ql) return 0;\\n            if (l == r) {\\n                return seg[i];\\n            }\\n            if (l >= ql && r <= qr) {\\n                return seg[i];\\n            }\\n            int m = (l + r) >>> 1;\\n            return getValue(l, m, 2 * i + 1, ql, qr) + getValue(m + 1, r, 2 * i + 2, ql, qr);\\n        }\\n\\n    }\\n\t\\n\tpublic static int gcd(int a,int b)\\n\t{\\n\t\tif(a == 0) return b;\\n\t\tif(b == 0) return a;\\n\t\t\\n\t\treturn gcd(b, a%b);\\n\t}\\n\t\\n\t\\n\t\\n\tpublic static void main(String[] args) \\n\t{\\n\t\tOutputStream outputStream = System.out;\\n        FastReader sc = new FastReader();\\n        PrintWriter out = new PrintWriter(outputStream);\\n        \\n        int n = sc.nextInt();\\n        int k = sc.nextInt();\\n        \\n        Integer h[] = new Integer[n];\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n        \th[i] = sc.nextInt();\\n        }\\n        Arrays.sort(h,Collections.reverseOrder());\\n        \\n        long ans = 0L;\\n        for(int i = k; i < n; i++)\\n        {\\n        \tans += h[i];\\n        }\\n        out.println(ans);\\n        out.close();\\n\t}\\n\\n}\\n", "target": "230", "substitutes": {"br": ["obj", "tr", "ch", "abs", "sb", "ler", "ctr", "db", "bl", "err", "bt", "bro", "fr", "bc", "pr", "ver", "arr", "dr", "mr", "bp", "bar", "vr", "buf", "per", "kr", "buffer", "rb", "gr", "hr", "wr", "ur", "img", "bb", "cr", "src", "ocr", "yr", "ber", "sr", "sp", "BR", "cur", "bridge", "lr", "be", "Br", "browser"], "st": ["store", "nd", "sta", "inst", "string", "rt", "St", "stri", "sb", "bl", "ut", " est", "stable", "fr", "pr", "ist", "step", "ss", "ost", "est", "t", "rest", "se", "ST", "sw", "cl", "sn", "ft", "pt", "sts", "stage", "ld", "stop", "s", "sa", "STR", "stack", "cr", "src", "ste", "ast", "pe", "sr", "start", "sl", "sp", "struct", "part", "ct", "rd", "const", "be", "std", "Str", "sth", "sign"], "str": ["f", "obj", "sta", "tr", "div", "exp", "string", "data", "stri", "in", "err", "id", "code", "fr", "inner", "pr", "dr", "arr", "text", "t", "c", "style", "doc", "entry", "pos", "e", "url", "iter", "s", "p", "STR", "pass", "cr", "sr", "char", "sl", "temp", "z", "sp", "line", "strings", "Str"], "x": ["f", "xy", "value", "on", "name", "data", "xx", "X", "id", "key", "code", "index", "v", "c", "tx", "d", "dx", "max", "ax", "ex", "e", "point", "xs", "lat", "p", "en", "w", "rx", "z", "px", "xi", "ix", "pair"], "y": ["f", "value", "xy", "on", "oy", "ey", "id", "cy", "zy", "sy", "key", "index", "Y", "height", "py", "v", "t", "c", "type", "bar", "d", "vy", "ny", "yt", "ay", "yl", "e", "o", "j", "ry", "dy", "ii", "ty", "year", "p", "ot", "w", "yi", "ya", "z", "yy"], "seg": ["psegm", "sep", "seG", "pego", " segment", "speg", "pega", "segen", "gege", "gegment", "nego", "segs", "geg", "segm", " sega", " sex", "segment", "spex", "gegen", "peG", "peg", "pseg", " seG", "spegen", "pegs", "SEgs", "psegs", "pep", "neg", "gep", "negen", " segm", "gex", "pseG", " segen", "sega", "pegen", "SEga", "nep", "pege", "pegm", "gegs", "gego", " sege", " segs", "sex", "SEG", "sege", "sego", "gega", "SEg", "spegment"], "N": ["nd", "K", "I", "L", "Size", "nc", "no", "number", "H", "unit", "S", "B", "norm", "num", "NH", " H", "V", "p", "R", "rh", "ns", "C", "nb", "Num", "M", "init"], "size": ["f", "shape", "sized", "name", "Size", "length", "large", "count", "code", "sec", "address", "g", "v", "ize", "c", "page", "d", "max", "small", "sn", "cycle", "weight", "width", "e", "this", "j", "loc", "depth", "p", "en", "w", "SIZE", "speed", "len", "z", "line", "capacity", "sh", "body", "scale"], "n": ["ne", "nc", "number", "v", "c", "d", "num", "sn", "u", "e", "o", "j", "cn", "s", "p", "ns", "ln", "en", "w", "z", "Ns", "conn", "nn"], "h": ["f", "ch", "hs", "ph", "ih", "bh", "count", "hd", "H", "height", "v", "end", "c", "d", "ah", "e", "hr", "j", "p", "hi", "rh", "ha", "w", "hl", "hm", "gh", "th", "z", "ht", "sh", "uh", "q"], "l": ["f", "li", "ul", "L", "ol", "lin", "lu", "g", "v", "ll", "c", "rl", "d", "kl", "dl", "ls", "il", "le", "u", "e", "lb", "o", "j", "ell", "lp", "p", "ln", "nl", "al", "len", "or", "sl", "fl", "lr", "la", "lc", "el"], "r": ["f", "value", "rt", "rg", "err", "fr", "pr", "g", "v", "rel", "t", "attr", "c", "d", "er", "ar", "rb", "u", "e", "o", "j", "ur", "p", "R", "ru", "rh", "cr", "w", "sr", "or", "z", "nr", "rd", "rs", "lr"], "i": ["f", "li", "I", "di", "iv", "ri", "gi", "id", "index", "code", "ai", "inner", "si", "ui", "v", "t", "it", "c", "ie", "d", "uri", "pi", "e", "o", "j", "u", "ii", "loc", "qi", "p", "ti", "ini", "start", "im", "col", "z", "ci", "mi", "xi", "ip", "ix", "multi", "bi", "lc"], "val": ["f", "value", "valid", "li", "vals", "vol", "L", "rt", "range", "ol", "ref", "pl", "bl", "err", "default", "pr", "v", "lv", "rel", "rl", "kl", "d", "update", "dl", "Val", "il", "le", "u", "e", "j", "VAL", "ur", "loc", "p", "al", "all", "sel", "len", "sl", "z", "fl", "lr", "la", "lc", "eval", "el", "q"], "m": ["f", "li", "middle", "base", "range", "mu", "v", "mr", "c", "d", "ms", "cm", "u", "e", "o", "j", "mm", "p", "M", "hm", "md", "z", "mn", "mi", "sm", "body", "tm", "ym"], "left": ["li", "center", "middle", "L", "plus", "pl", "log", "bl", "inner", "index", "mid", "min", "rel", "Left", "cl", "pos", "ax", "le", "o", "j", "lo", "top", "len", "line", "el"], "right": ["plus", "middle", "shift", "rem", "rights", "inner", "reverse", "mid", "pop", "rel", "rest", "end", "max", "red", "re", "p", "rh", "row", "down", "w", "back", "top", "Right", "bottom"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tint C = sc.nextInt();\\n\\n\t\tSystem.out.print(C + \" \" + A + \" \" + B);\\n\t\t\t\\n\treturn;\\n\\n\t}\\n}", "target": "149", "substitutes": {"sc": ["class", "osc", "ch", "cont", " Sc", "nc", "sb", "sche", "cv", "esc", "cc", "bc", "asc", "pc", "l", "ss", "sec", "scope", "app", "ca", "SC", "se", "c", "scan", "cs", "uc", "cl", "sw", "acc", "cor", "Sc", "sq", "sci", "cr", "sf", "sync", "rc", "cer", "enc", "soc", "sl", "sp", " SC", "ct", "sh", "ec", "tc", "cur", "coll", "desc", "lc"], "A": ["AW", "SA", "I", "L", "AA", "AS", "PA", "X", "API", "AD", "P", "HA", "S", "Y", "AB", "As", "EA", "IA", "GA", "D", "AP", "Area", "F", "CA", "Ca", "AC", "AF", "U", "N", "NA", "AM", "LA", "AR", "AY", "alpha", "O", "a"], "B": ["QB", "G", "I", "Bi", "L", "Z", "BB", "BD", "DB", "CB", "X", "P", "Q", "Y", "BS", "AB", "E", "D", "W", "SB", "BI", "LB", "F", "BA", "BL", "V", "R", "b", "NB", "FB", "T", "U", "N", "Bs", "BC", "IB", "O", "OB"], "C": ["CNN", "G", "I", "L", "Cl", "Z", "CP", "P", "FC", "Y", "S", "E", "c", "D", "CF", "CI", "F", "CL", "V", "CA", "R", "EC", "COR", "T", "U", "N", "M", "CS", "CV", "CC", "DC", "CE", "CU", "BC", "CCC", "VC", "O"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[]args){\\n        Scanner scan = new Scanner(System.in);\\n        int h,n,sum;\\n        sum=0;\\n        h=scan.nextInt();\\n        n=scan.nextInt();\\n        if(h%n!=0){\\n            sum=1;\\n        }\\n        System.out.println(h/n+sum);\\n    }\\n}", "target": "147", "substitutes": {"scan": ["parse", "ner", "skip", "ann", "begin", "watch", "out", "fan", "in", "search", "pin", "inner", "l", "exec", "ss", "na", "server", "app", "con", "end", "se", "cat", "can", "plan", "feed", "query", "read", "serv", "row", "Scan", "ln", "san", "all", "nl", "en", "sin", "sync", "see", "slice", "sc", "ans", "sr", "util", "conn", "an", "walk", "nn", "clean", "r", "span"], "h": ["f", "hs", "ph", "ul", "ih", "bh", "in", "oh", "id", "count", "m", "hh", "H", "han", "l", "he", "v", "c", "d", "ah", "adh", "num", "u", "hr", "o", "p", "hi", "b", "x", "rh", "ha", "w", "wh", "hash", "head", "th", "hm", "gh", "hp", "k", "sh", "i", "uh", "um", "r"], "n": ["f", "nd", "ne", "ann", "no", "ni", "m", "number", "nin", "l", "na", "g", "v", "c", "d", "num", "y", "network", "sn", "ny", "u", "nw", "o", "j", "cn", "s", "dn", "p", "un", "b", "x", "ns", "unn", "en", "ln", "w", "N", "pn", "z", "k", "mn", "conn", "sh", "i", "nor", "nu", "nn", "net"], "sum": ["comment", "sort", "name", "skip", "ul", "miss", "summary", "ne", "vol", "help", "out", "count", "index", "unit", "cost", "si", "total", "ass", "gram", "min", "se", "cat", "num", "um", "max", "su", "use", "mix", "weight", "sa", "offset", "fat", "sav", "start", "fill", "size", "mean", "sh", "spread", "average", "alpha", "scale", "sign", "Sum"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.Random;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        TaskA solver = new TaskA();\\n\\n        solver.call(in,out);\\n        out.close();\\n    }\\n\\n    static class TaskA {\\n        public void call(InputReader in, PrintWriter out) {\\n            int x ,y ;\\n            x =in.nextInt();\\n            y =in.nextInt();\\n            if(y>4*x || y%2!=0 || y<2*x)\\n                out.println(\"No\");\\n            else {\\n                out.println(\"Yes\");\\n            }\\n\\n        }\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n        public long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n\\n    }\\n}", "target": "62", "substitutes": {"inputStream": ["InputStream", "outputStreamer", "inputStreamer", "InputReader", "outputSteam", " inputSteam", "outputReader", "referenceSteam", "referenceStream", "referencestream", "InputStreamer", "Inputstream", "referenceStreamer", "InputSteam", " inputReader", " inputstream", "outputstream", "inputstream", "inputReader", "inputSteam"], "outputStream": ["inputFile", "OutputStream", "OutputWriter", "outputSteam", "OutputSteam", " outputSteam", "outWriter", " outputFile", " outputstream", "inputWriter", "outputFile", " outputWriter", "outputWriter", "OutputFile", "outSteam", "outStream", "outputstream", "inputstream", "inputSteam", "outstream"], "in": ["f", "gen", "h", "path", "plus", "cin", "data", "is", "input", "lin", "log", "err", "din", "pin", "id", "inner", "index", "config", "inas", "io", "image", "n", "nin", "exec", "l", "IN", "inn", "min", "up", "con", "bin", "d", "kin", "request", "isin", "read", "inc", "source", "info", "inside", "file", "vin", "ini", "sin", "into", "login", "win", "again", "rx", "line", "ins", "i", "connection", "init", "from", "In", "gin", "inf", "a", "r"], "out": ["name", "off", "no", "err", "key", "inner", "server", "query", "inc", "to", "down", "extra", "again", "temp", "outer", "init", "outs", "check", "lock", "exit", "string", "one", "writing", "self", "resource", "ex", "cache", "Out", "copy", "part", "engine", "gen", "client", "input", "console", "log", "post", "null", "up", "page", "OUT", "this", "o", "writ", "s", "file", "line", "writer", "connection", "parent", "net", "obj", "list", "path", "data", "io", "report", "object", "window", "exec", "process", "v", "sum", "write", "bin", "output", "word", "user", "error", "w", "pool", "conn"], "solver": ["Solution", "setsolution", "Solver", "Solving", "solution", "ssolver", "ssolve", "solve", "setsolving", "ssolution", "ssanger", "solving", "Sanger", "ssolving", " solution", "Solve", "setsolve", "setsolver", "sanger", " sanger", " solve"], "x": ["f", "xy", "xc", "plus", "wy", "xx", "no", "X", "ey", "wx", "id", "key", "cy", "index", "n", "yx", "l", "Y", "v", "t", "c", "ww", "num", "d", "pos", "dx", "ax", "xes", "ex", "u", "e", "j", "dy", "xs", "ty", "p", "w", "xxx", "rx", "z", "px", "k", "size", "xa", "i", "xi", "ix", "my"], "y": ["xy", "yo", "oy", "X", "ey", "id", "cy", "key", "sy", "zy", "index", "m", "gy", "yx", "n", "ye", "Y", "py", "t", "c", "type", "d", "vy", "ny", "yl", "ay", "ry", "o", "j", "ady", "dy", "year", "ty", "yes", "p", "b", "asy", "w", "yi", "ya", "ky", "z", "hy", "i", "yy", "uy", "iny"], "reader": ["parse", "client", "worker", "input", "ler", "container", "ri", "socket", "inner", "io", "readable", "server", "loader", "driver", "layer", "er", "entry", "per", "pointer", " Reader", "resource", "read", "feed", "buffer", "re", "source", "e", "this", "ry", "wrapper", "iter", "manager", "row", "file", "reading", "Reader", "or", "ro", "table", "writer", "parser", "connection", "handler", "bird", "r"], "tokenizer": ["Tokenizer", "Tokener", "tokenize", "authorizing", "initialiser", " tokeniter", "normalization", "okener", "okeniter", " tokenner", "serialiser", "Tokenizers", " tokenization", "tokeniter", "okenization", "tokeniser", "normaliser", "authorizer", "serialize", " tokeniser", "serializer", "Tokenization", "Tokenner", "normalize", "tokenizers", " tokenizers", "Tokenizing", "authorization", "initializer", "authorer", "Tokeniser", "tokenizing", "initialize", "normalizer", "Tokenize", "Tokeniter", "tokenner", " tokenize", "serializers", "tokenization", " tokenizing", "okenizer", " tokener", "okenner", "okenize", "tokener", "initialner"], "stream": ["channel", "client", "http", "path", "string", "data", "raw", "input", "context", "length", "message", "server", "loader", "driver", "form", "sw", "ream", "per", "feed", "request", "resource", "read", "buffer", "source", "system", "serial", "row", "down", "file", "slice", "response", "pool", "trans", "view", "Stream", "writer", "test", "draft", "connection", "coll", "handler", "lock", "socket"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tlong sum = 0;\\n\\n\t\tfor (int i = 1; i <= n; i++) {\\n\t\t\tif (i % 3 != 0 && i % 5 != 0) {\\n\\n\t\t\t\tsum += i;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(sum);\\n\\n\t\tsc.close();\\n\\n\t}\\n}", "target": "55", "substitutes": {"sc": ["osc", "ch", "nc", "st", "sb", "cc", "bc", "esc", "pc", "l", "exec", "ss", "server", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "str", "Sc", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "soc", "sl", "sp", "ci", "sch", "sh", "ec", "cur"], "n": ["f", "ner", "h", "nc", "net", "in", "count", "m", "number", "index", "l", "t", "c", "d", "num", "y", "pos", "u", "o", "j", "s", "p", "b", "ns", "nb", "en", "w", "N", "len", "z", "size", "k", "conn", "nn", "r"], "sum": ["f", "li", "parse", "skip", "sam", "summary", "vol", "out", "log", "length", "id", "count", "index", "cost", "si", "l", "total", "ass", "min", "c", "result", "num", "um", "su", "use", "zero", "weight", "u", "frac", "info", "cache", "full", "offset", "b", "fat", "error", "start", "sp", "size", "mean", "spread", "average", "sh", "chi", "alpha", "scale", "sign", "Sum"], "i": ["f", "li", "I", "di", "in", "ri", "ni", "length", "id", "gi", "m", "index", "key", "ai", "io", "si", "l", "step", "ui", "mu", "phi", "v", "t", "it", "c", "result", "d", "uri", "zi", "next", "u", "e", "o", "j", "pi", "ii", "qi", "bi", "p", "ti", "hi", "x", "oi", "slice", "abi", "ini", "start", "ci", "k", "ip", "xi", "init", "chi", "multi"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n    public static void main (String[]args)throws IOException {\\n        Scanner scanner = new Scanner(System.in);\\n        long x = scanner.nextLong();\\n        long answer=0;\\n        long bigYen=(x-(x%500))/500;\\n        answer+=bigYen*1000;\\n        long extra=x%500;\\n        extra-=extra%5;\\n        answer+=extra;\\n        System.out.println(answer);\\n    }\\n}\\n", "target": "180", "substitutes": {"scanner": [" scanny", "scanreader", "caner", "Scanning", "canreader", "Scanner", "Scaner", " scaner", "Scanny", "caninner", "scanny", "canny", "Scaninner", "canning", " scanreader", "scaninner", "Scanreader", "scanning", "scaner", " scanning", " scaninner", "canner"], "x": ["f", "cross", "h", "lex", "example", "base", "plus", "data", "xx", "issue", "in", "X", "number", "index", "n", "l", "v", "t", "c", "ctx", "tx", "num", "y", "dx", "xml", "ext", "fx", "ax", "ex", "u", "event", "xs", "full", "s", "p", "python", "w", "xxx", "rx", "z", "px", "size", "sex", "i", "xi", "stuff", "ix", "xp"], "answer": ["example", "equ", "string", "base", "data", "grade", "issue", "prefix", "image", "number", "ee", "random", "option", "message", " answers", "energy", "address", "order", "say", "inter", "duration", "result", "entry", "update", "zero", "query", "array", "fix", "next", "Answer", "output", "offer", "ace", "word", "cache", "reply", "question", "ell", "offset", "python", "error", "answered", "response", "knowledge", "z", "size", "empty", "average", "stuff", "ae", "ix"], "bigYen": ["bigyen", " bigyen", "bigYCEN", " bigYeen", " bigYEN", "littleYens", "littleYener", "bigYCen", "bigXens", "bigZeen", "bigYCeen", "littleXener", "littleYen", "bigyens", "bigXEN", "bigXen", "bigYEN", " bigyEN", "bigyener", "bigXener", "bigZEN", " bigyeen", " bigYens", "littleXen", " bigyens", "bigyeen", "bigYeen", "bigZen", "bigyEN", "bigYens", "bigYener", "bigYCens", "littleXEN", "bigZens", "littleYEN", "littleXens"], "extra": ["example", "equal", "skip", "added", "plus", "base", "data", "grade", "padding", "version", "prefix", "description", "context", "random", "number", "inner", "timeout", "option", "attribute", "total", "address", "diff", "area", "more", "duration", "optional", "result", "end", "only", "radius", "empty", "small", "ext", "next", "repeat", "external", "add", "source", "info", "cache", "question", "offset", "error", "missing", "q", "magic", "temp", "size", "qa", "margin", "relative", "alpha", "Extra"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int x = Integer.parseInt(sc.next());\\n        int t = Integer.parseInt(sc.next());\\n        int answer = 0;\\n        int takoyaki = 0;\\n        while (takoyaki < n) {\\n            takoyaki += x;\\n            answer += t;\\n        }\\n        System.out.println(answer);\\n        sc.close();\\n    }\\n}", "target": "34", "substitutes": {"sc": ["class", "parse", "ner", "ch", "osc", "cont", "mc", "nc", "console", "sche", "sb", "cms", "cv", "cc", "bc", "esc", "com", "asc", "pc", "ss", "sec", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "cl", "cus", "uc", "cgi", "ctx", "sw", "this", "cor", "Sc", "system", "sci", "cr", "src", "sf", "rc", "cer", "sr", "soc", "sp", " SC", "sch", "parser", "ec", "tc", "cur", "coll", "sem", "lc"], "n": ["f", "ne", "nc", "in", "nt", "ni", "number", "m", "l", "na", "v", "min", "c", "d", "num", "y", "sn", "u", "o", "p", "ot", "b", "ns", "nl", "en", "nb", "N", "z", "size", "k", "i", "nn", "ten", "net", "span"], "x": ["f", "time", "h", "xx", "in", "X", "wx", "m", "index", "number", "l", "step", "v", "c", "tx", "d", "y", "max", "ex", "u", "e", "o", "j", "p", "T", "w", "rx", "z", "k", "size", "i", "test", "ix", "a", "r"], "t": ["f", "time", "ts", "h", "out", "dt", "token", "m", "ant", "l", "v", "c", "type", "tt", "xt", "d", "y", "u", "o", "j", "pt", "ty", "at", "p", "ot", "T", "tick", "z", "k", "ta", "i", "test", "qt", "ten", "a", "r"], "answer": ["eni", "time", "username", "value", "equ", "term", "grade", "issue", "token", "format", "element", "length", "image", "number", "ee", "integer", "option", " answers", "score", "energy", "address", "order", " answered", "duration", "result", "iterator", "update", "su", "zero", "array", "next", "Answer", "ace", "output", "reply", "question", "ell", "offset", "error", "answered", "response", "knowledge", "size", "average", "ix", "now", "activity", "evidence"], "takoyaki": ["tekoyana", "takihasaki", "takaoyaku", "takihaii", "takaozaku", "takoyaka", "takozasaki", "tekowana", "takuyaii", "tekowaku", "takihaki", "takozaki", "tekoyaka", "takaoyaki", "takochaki", "takuyana", "takozaka", "takoyaii", "takowaka", "takaozaii", "tekoyaku", "takozaii", "takuyaka", "takuyasaki", "taskihaka", "takoyana", "taskihaki", "takowana", "takowaku", "takochaka", "takoyasaki", "takochaii", "taskoyaki", "tekoyaki", "takaozaka", "tekowaka", "takoyaku", "takihaka", "takuyaku", "takochaku", "takowaki", "taskoyasaki", "takochana", "tekowaki", "taskoyaka", "takaoyaii", "takuyaki", "takozaku", "taskihaii", "taskihasaki", "takaoyaka", "takaozaki", "taskoyaii"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner scan = new Scanner(System.in);\\n    int H = scan.nextInt();\\n    int N = scan.nextInt();\\n    int[] A = new int[N];\\n    for(int i=0; i<N; i++) {\\n      A[i] = scan.nextInt();\\n    }\\n    scan.close();\\n\\n    int sum = 0;\\n    for(int i=0; i<N; i++) {\\n      sum += A[i];\\n    }\\n\\n    System.out.println(H > sum ? \"No\" : \"Yes\");\\n  }\\n}", "target": "95", "substitutes": {"scan": ["gen", "parse", "stat", "ner", "sort", "ann", "watch", "out", "fan", "in", "chan", "log", "match", "err", "search", "pin", "ignore", "report", "n", "l", "na", "server", "con", "se", "er", "can", "reader", "query", "use", "feed", "nn", "cache", "connect", "iter", "system", "all", "Scan", "san", "sync", "slice", "sci", "see", "sc", "ans", "util", "filter", "conn", "an", "walk", "look", "check", "skip", "ser", "run", "clean", "sign", "r", "span"], "H": ["G", "h", "K", "Length", "I", "L", "Z", "X", "length", "FH", "Count", "P", "HA", "B", "Y", "SH", "E", "NH", "Host", "F", "V", "HH", "HI", "MH", "T", "C", "U", "Num", "M", "Hash", "AH", "HS", "Hi", "HC"], "N": ["NE", "G", "K", "Len", "I", "L", "Z", "Size", "X", " n", "P", "Q", "NS", "n", "NC", "B", "Y", "S", "E", "D", "NL", "W", "J", "F", "V", "No", "NM", "R", "NN", "T", "C", "U", "Num", "M", "Ne", "Part", "Ns", "NT", "O"], "A": ["Args", "SA", "I", "AA", "Input", "X", "API", "TA", "P", "B", "Y", "S", "alpha", "As", "E", "D", "array", "Answer", "Access", "F", "BA", "At", "CA", "R", "An", "The", "C", "U", "T", "Ar", "Alpha", "M", "AM", "NA", "Max", "Average", "AR", "LA", "Total", "Array", "O", "a", "Sum"], "i": ["f", "li", "fi", "h", "I", "mini", "di", "in", "ri", "ni", "cli", "id", "gi", "index", "ai", "io", "ji", "n", "si", "ui", "mu", "phi", "v", "it", "attr", "c", "ie", "y", "uri", "zi", "u", "e", "o", "j", "pi", "info", "ii", "qi", "p", "ti", "hi", "oi", "x", "slice", "abi", "ini", "z", "ci", "mi", "iu", "ip", "xi", "init", "chi", "multi", "ix", "bi", "a", "r"], "sum": ["h", "summary", "miss", "ul", "help", "out", "mass", "sym", "match", "length", "cum", "count", "index", "cost", "n", "si", "total", " SUM", "ass", "mu", "gram", "ums", "diff", "min", "ash", "commit", "result", "um", "num", "max", "zero", "acc", "weight", "add", "depth", "av", "sa", "offset", "sav", "hash", "SU", "sp", "fill", "size", "mean", " Sum", "sh", "average", "spread", "chi", "alpha", "SI", "scale", "sign", "net", "Sum"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String args[]) {\\n    Scanner input = new Scanner(System.in);\\n    Integer N = Integer.valueOf(input.nextLine());\\n    if (N % 1000 == 0) {\\n      System.out.println(0);\\n    }\\n    else {\\n      System.out.println(1000 - N % 1000);\\n    }\\n  }\\n}", "target": "184", "substitutes": {"input": ["f", "list", "client", " Input", "instance", "out", "Input", "in", "context", "image", "config", "io", "n", "text", "l", "exec", "IN", "Output", "c", "result", "iterator", "inf", "form", "reader", "feed", "request", "inc", "output", "buffer", "source", "this", "str", "iter", "file", "Reader", "util", "table", "stream", "i", "connection", "parser", " inputs", "control", "method", "socket"], "N": ["NE", "K", "I", "L", "Z", "Size", "A", "Count", "X", " n", "P", "number", "Q", "NS", "SN", "GN", "n", "S", "Y", "IN", "E", "D", "NL", "NUM", "MN", "J", "F", "V", "NG", "NM", "R", "NN", "C", "T", "Num", "U", "M", "NA", "Ne", "Ns", "NT", "Number", "O"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        for (int i = 1; i < 7; i++) {\\n            int pow = (int) Math.pow(2, i);\\n            if (N == pow) {\\n                int ans = (int) Math.pow(2, i);\\n                System.out.println(ans);\\n                return;\\n            } else if (N < pow) {\\n                int ans = (int) Math.pow(2, i - 1);\\n                System.out.println(ans);\\n                return;\\n            }\\n        }\\n\\n        System.out.println(64);\\n    }\\n}", "target": "225", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "search", "cc", "bc", "esc", "asc", "pc", "ck", "ss", "sec", "ca", "SC", "se", "c", "scan", "sw", "uc", "cl", "com", "cs", "acc", "Sc", "system", "sub", "sci", "Scan", "cr", "src", "rc", "sp", "ci", " SC", "sch", "sh", "ec", "sem"], "N": ["NE", "CNN", "K", "Len", "I", "L", "Size", "NI", "Sn", "X", "Ni", " n", "P", "Q", "SN", "NS", "n", "NC", "S", "Y", "IO", "Na", "D", "II", "NL", "NO", "NH", "W", "F", "V", "R", "Nat", " NI", "NN", "C", "NB", "Num", "U", "M", "NA", "Ne", "Ns", "NT", "O"], "i": ["f", "li", "I", "mini", "is", "di", "in", "ni", "id", "gi", "index", "ai", "io", "n", "si", "l", "ui", "phi", "v", "c", "ie", "y", "zi", "uri", "u", "e", "o", "pi", "j", "ii", "qi", "s", "p", "ti", "b", "x", "oi", "hi", "en", "abi", "ini", "ci", "mi", "xi", "ip", "chi", "ki", "ix", "bi", "multi", "r"], "pow": ["lpows", "Powe", "cpowed", "lpodd", "powe", "spowed", " pOW", "poup", "spow", "Pow", "nowe", "cpowell", "low", "lows", " poup", "podd", "lowe", " powell", "cpOW", " powe", "spoup", "Powed", "Poup", "lpow", "cpows", "lpowers", " powers", "pOW", "pows", " podd", "spows", "POW", " powed", "lowers", "Powell", "powed", "cpow", "powell", " pows", "nows", "Powers", "powers", "now", "Pows", "nowed", "Podd"], "ans": ["nan", "names", "ANS", "cons", "ain", "ats", "ann", "aned", "anon", "ai", "ays", "ani", "vs", "amps", "annels", "AN", "acts", "na", "anc", "aos", "aces", "ones", "ents", "cs", "scan", "errors", "lan", "plan", "features", "ls", "es", "ions", "nas", "ens", "ids", "aus", "anners", "blocks", "ns", "cas", "ants", "ances", "sk", "eps", "os", "ins", "ks", "an", "ians", "outs", "ars", "nn", "ania", "ips", "ana", "anned", "ons"]}}
{"code": "\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.PriorityQueue;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] v = new int[n];\\n\t\tfor (int i = 0; i < v.length; i++) {\\n\t\t\tv[i] = sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tArrays.sort(v);\\n\t\tdouble ans = v[0];\\n\t\tfor (int i = 1; i < v.length; i++) {\\n\t\t\tans = (v[i] + ans) / 2;\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "232", "substitutes": {"sc": ["ner", "ch", "osc", " Sc", "nc", "sb", "sche", "cle", "cv", "esc", "cc", "bc", "asc", "pc", "exec", "ss", "sec", "server", "scope", "anc", "ca", "SC", "c", "scan", "cs", "se", "uc", "sw", "cus", "cl", "screen", "cor", "Sc", "system", "sq", "sci", "cr", "src", "rc", "cer", "soc", "ci", "sp", " SC", "sch", "sh", "ec", "cur", "sem", "ser", "lc"], "n": ["f", "ne", "nc", "in", "nt", "ni", "count", "m", "l", "na", "t", "r", "c", "num", "d", "y", "sn", "u", "e", "o", "j", "ii", "s", "p", "b", "x", "ns", "nl", "en", "nb", "w", "N", "len", "z", "k", "conn", "init", "nn", "net"], "v": ["f", "value", "val", "cover", "vals", "vi", "values", "version", "iv", "ev", "nv", "vv", "sv", "ov", "cv", "vd", "m", "vs", "volt", "l", "ver", "lv", "conv", "video", "c", "vector", "array", "uv", "va", "u", "e", "o", "j", "V", "av", "s", "p", "b", "x", "ve", "var", "vp", "inv", "z", "vert", "a", "vol", "r"], "i": ["f", "eni", "li", "fi", "h", "I", "vi", "di", "in", "ri", "ni", "id", "gi", "m", "index", "ai", "io", "si", "l", "ori", "ui", "mu", "phi", "t", "it", "c", "ie", "d", "uri", "u", "pi", "e", "o", "j", "info", "ii", "api", "qi", "p", "ti", "b", "x", "oi", "hi", "abi", "ini", "z", "ci", "k", "mi", "ip", "iu", "xi", "init", "ix", "multi", "a", "bi", "q", "r"], "ans": ["ams", "ases", "anks", "ANS", "cons", "ats", "ann", "gan", "eds", "aned", "ays", "anas", "vs", "leans", "amps", "AN", "ss", "annels", "na", "acts", "anc", "cs", "ents", "ads", "aning", "lan", "ls", "ions", "nas", "rules", "aus", "s", "as", "ns", "atan", "cas", "ants", "ares", "vers", "sk", "anus", "os", "ins", "ks", "ras", "rs", "an", "outs", "ars", "span", "ds", "ana", "anned", "ons"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n         Scanner sc = new Scanner(System.in);\\n         int n  = sc.nextInt();\\n         int a[] = new int[n];\\n         for(int i= 0; i<n ; i++){\\n                 a[i] = sc.nextInt();\\n         }\\n         double j = 0.0;\\n         for(int i= 0 ; i<n ; i++){\\n             j += (double)1/a[i];\\n         }\\n         System.out.println(1/j);\\n         \\n    }\\n}\\n", "target": "120", "substitutes": {"sc": ["ner", "osc", "ch", "fc", "cont", " Sc", "nc", "st", "sche", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "ca", "SC", "se", "c", "scan", "cs", "sw", "uc", "cl", "Sc", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sl", "sp", "ci", " SC", "sch", "sh", "ec", "tc", "cur", "sem", "lc", " scr"], "n": ["f", "nan", "h", "ne", "nc", "in", "no", "nt", "m", "l", "inn", "v", "t", "r", "c", "d", "num", "y", "network", "sn", "u", "e", "o", "s", "p", "b", "x", "all", "ns", "ln", "nb", "w", "N", "len", "z", "size", "k", "init", "nn", "fn", "net", "span"], "a": ["ama", "am", "data", "ga", "A", "ab", "ma", "count", "ea", "l", "ac", "na", "ba", "da", "area", "ava", "c", "aa", "d", "aj", "array", "va", "u", "aux", "e", "aaa", "sa", "as", "b", "p", "x", "za", "au", "z", "ata", "wa", "qa", "ana", "tta", "an", "ae", "alpha", "la"], "i": ["f", "eni", "li", "fi", "I", "di", "in", "ri", "ni", "ik", "id", "key", "gi", "cli", "index", "ai", "io", "ji", "si", "l", "ui", "phi", "v", "it", "c", "ie", "y", "uri", "zi", "hei", "u", "e", "o", "pi", "info", "ii", "qi", "p", "hi", "b", "x", "oi", "ti", "ini", "start", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "chi", "multi", "bi"], "j": ["f", "uj", "jit", "h", "jl", "jj", "jo", "oj", "jp", "kj", "db", "length", "m", "json", "ji", "l", "dj", "g", "v", "min", "jc", "t", "ja", "c", "d", "bj", "y", "max", "aj", "adj", "J", "js", "dy", "aja", "s", "p", "job", "b", "x", " J", "z", "k", "ij", "jet", "q", "r"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tstatic String SweetsJudge(int k){\\n\t\tfor(int i=0; i<=k/4; i++){\\n\t\t\tif((k-4*i)%7==0)return \"Yes\";\\n\t\t}\\n\t\treturn \"No\";\\n\t}\\n\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tSystem.out.println(SweetsJudge(n));\\n\t}\\n}", "target": "172", "substitutes": {"k": ["f", "K", "ko", "ik", "key", "m", "code", "kick", "kn", "l", "ck", "g", "v", "ok", "end", "c", "d", "num", "y", "max", "mk", "u", "e", "o", "j", "p", "b", "x", "ku", "w", "N", "sk", "z", "ks", "q", "kw"], "i": ["f", "li", "fi", "I", "di", "in", "ri", "ni", "id", "gi", "m", "index", "ai", "io", "ji", "si", "l", "ui", "mu", "phi", "v", "t", "c", "d", "uri", "u", "pi", "o", "j", "ii", "qi", "p", "ti", "b", "x", "hi", "oi", "ini", "z", "ci", "mi", "ip", "iu", "xi", "chi", "multi", "bi"], "sc": ["ner", "ch", "osc", " Sc", "nc", "nt", "cle", "search", "esc", "cc", "bc", "asc", "pc", "exec", "ss", "sec", "scope", "SC", "c", "scan", "se", "uc", "sw", "cl", "cs", "spec", "acc", "Sc", "s", "sq", "sub", "sci", "cr", "src", "sync", "ocr", "rc", "enc", "soc", "sp", " SC", "ec", "desc"], "n": ["f", "ne", "name", "nc", "nt", "m", "number", "index", "l", "na", "g", "r", "c", "num", "network", "sn", "ng", "nw", "e", "o", "j", "p", "b", "ns", "nl", "en", "nb", "N", "z", "nr", "Ns", "conn", "nn", "net"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int[] a = new int[n];\\n        for (int i = 1; i < n; i++) {\\n            int x = sc.nextInt()-1;\\n            a[x]++;\\n        }\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < n; i++) {\\n            sb.append(a[i]).append(\"\\n\");\\n        }\\n        System.out.print(sb.toString());\\n        sc.close();\\n\\n    }\\n\\n}\\n", "target": "12", "substitutes": {"sc": ["ner", "ch", "osc", "mc", "nc", "sche", "pl", "search", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "server", "scope", "anc", "ca", "SC", "c", "scan", "se", "cs", "cl", "uc", "sw", "ctx", "cor", "Sc", "system", "sq", "sa", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sp", "ci", " SC", "sch", "sh", "ec", "cur", "sem"], "n": ["f", "ne", "nc", "in", "no", "nt", "count", "m", "number", "l", "v", "t", "r", "c", "d", "num", "y", "sn", "u", "e", "o", "j", "s", "p", "b", "ns", "ln", "nb", "en", "w", "N", "len", "z", "part", "k", "size", "conn", "nn", "fn", "net"], "a": ["sta", "am", "data", "ga", "A", "oa", "ma", "ai", "ea", "l", "na", "ba", "da", "area", "ca", "aa", "c", "asa", "ar", "aj", "array", "va", "u", "pa", "aaa", "s", "at", "sa", "as", "p", "b", "au", "ans", "ata", "tta", "an", "ae", "alpha"], "i": ["f", "li", "fi", "name", "I", "di", "in", "ri", "ni", "id", "gi", "index", "ai", "io", "ji", "si", "l", "ui", "mu", "phi", "v", "it", "c", "y", "uri", "pi", "e", "o", "j", "u", "info", "ii", "qi", "p", "hi", "b", "ti", "oi", "abi", "ini", "yi", "z", "ci", "mi", "ip", "iu", "xi", "init", "ix", "chi", "multi", "bi"], "x": ["f", "xy", "xc", "h", "exp", "xe", "xx", "xxxx", "act", "X", "wx", "id", "index", "xf", "v", "nz", "t", "c", "tx", "d", "y", "pos", "xes", "ax", "ex", "u", "e", "xb", "j", "xs", "ux", "p", "ic", "w", "xxx", "rx", "z", "ci", "k", "work", "xa", "xi", "ix", "xp"], "sb": ["usb", "bm", "gb", "bf", "pb", " SB", "BB", "buff", "bh", "db", "sv", "bt", "obb", "bc", "sg", "si", "wb", "zb", "fb", "bp", "buf", "bj", "su", "ls", "mb", "xb", "rb", "stab", "SB", "lb", "bb", "s", "fp", "sa", "b", "src", "cb", "sf", "kb", "nb", "ib", "bs", "abb", "bsp", "eb", "bg", "sth"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = scanner.nextInt();\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            a[i] = scanner.nextInt();\\n        }\\n        printArray(n, a);\\n        for (int i = 1; i < n; i++) {\\n            int key = a[i];\\n            int j = i - 1;\\n            while (j >= 0 && a[j] > key) {\\n                a[j + 1] = a[j];\\n                j--;\\n            }\\n            a[j + 1] = key;\\n            printArray(n, a);\\n        }\\n    }\\n\\n    private static void printArray(int n, int[] a) {\\n        for (int k = 0; k < n; k++) {\\n            if (k != 0) {\\n                System.out.print(\" \");\\n            }\\n            System.out.print(a[k]);\\n        }\\n        System.out.println();\\n    }\\n\\n}", "target": "69", "substitutes": {"scanner": ["analyner", "scanker", "linner", "separer", "nerning", "Scanter", "separner", "liner", "Scanning", "scann", "Scanner", "Scaner", "Scanker", " scaner", "annker", "annner", "analyker", "annter", "scanter", "analyer", "separker", "linker", " scanter", "anner", "Scann", "analyter", "nerner", "scanning", "linn", "nerer", "scaner", "separn", " scanning", "nerter"], "n": ["f", "nan", "ne", "nc", "no", "in", "nt", "ni", "m", "number", "l", "g", "v", "t", "r", "c", "d", "num", "y", "network", "sn", "u", "e", "o", "nat", "s", "dn", "p", "b", "x", "all", "ns", "ln", "en", "nb", "w", "N", "z", "mn", "size", "conn", "init", "an", "nn", "net"], "a": ["sta", "ama", "am", "data", "input", "ga", "A", "ab", "ma", "oa", "code", "ai", "active", "ea", "ac", "na", "address", "aw", "ba", "da", "area", "ca", "aa", "c", "asa", "y", "ar", "aj", "array", "va", "u", "e", "o", "aux", "pa", "aaa", "auto", "sa", "as", "p", "ia", "b", "x", "access", "another", "missing", "au", "ans", "z", "ata", "wa", "work", "ana", "tta", "an", "ae", "alpha", "la"], "i": ["eni", "f", "li", "I", "is", "di", "in", "ik", "ni", "ri", "id", "gi", "index", "ai", "io", "ji", "si", "ori", "ui", "phi", "v", "it", "c", "ie", "y", "uri", "u", "e", "o", "pi", "info", "ii", "qi", "p", "hi", "b", "x", "oi", "ti", "ini", "z", "ci", "mi", "ip", "iu", "xi", "init", "ix", "bi"], "key": ["f", "value", "keys", "val", "name", "base", "shift", "ik", "length", "id", "m", "index", "code", "count", "step", "v", "c", "y", "max", "ax", "next", "u", "e", "o", "ii", "point", "p", "offset", "b", "x", "start", "ak", "Key", "char", "temp", "z", "size", "ki", "ke", "q"], "j": ["f", "uj", "obj", "li", "h", "jl", "jj", "br", "jo", "oj", "jp", "kj", "length", "m", "json", "fr", "ji", "dj", "l", "py", "jc", "v", "ok", "ja", "c", " dj", "ie", "d", "bj", "y", "aj", "adj", "e", "o", "J", "js", "ii", "u", "qi", "dy", "p", "job", "b", "x", "ind", "q", "je", "z", "ij", "jet", "bi", "jit"], "k": ["h", "kid", "ch", "K", "uk", "ko", "ik", "ijk", "ek", "id", "kick", "kn", "ck", "v", "ok", "c", "mk", "y", "kr", "inc", "kh", "u", "e", "o", "unk", "p", "b", "x", "ku", "w", "kk", "ak", "sk", "ka", "ky", "z", "ks", "ki", "ke", "km", "q", "kw"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void PrintChess(int H,int W){\\n\t\tfor(int i=1;i<H+1;i++){\\n\t\t\tPrintLine(i, W);\\n\t\t}\\n\t}\\n\t//\u4e00\u884c\u51fa\u529b\u30e1\u30bd\u30c3\u30c9\\n\tpublic static void PrintLine(int lineCounter,int W){\\n\t\t//\u5f15\u6570\u306f\u30e9\u30a4\u30f3\u30ab\u30a6\u30f3\u30bf\u3068\u9ad8\u3055\\n\t\tif(lineCounter%2==0){\\n\t\t\tfor(int i=1;i<W+1;i++){\\n\t\t\t\tif(i%2==0){\\n\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t}else{\\n\t\t\t\t\tSystem.out.print(\".\");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}else{\\n\t\t\tfor(int i=1;i<W+1;i++){\\n\t\t\t\tif(i%2==0){\\n\t\t\t\t\tSystem.out.print(\".\");\\n\t\t\t\t}else{\\n\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t\\n\t\t}\\n\t\tSystem.out.println(\"\");\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner=new Scanner(System.in);\\n\t\tint H;\\n\t\tint W;\\n\t\t//\u6700\u521d\u306e\u5024\u3092\u683c\u7d0d\\n\t\tH=scanner.nextInt();\\n\t\tW=scanner.nextInt();\\n\t\twhile(H!=0&&W!=0){\\n\t\t\tPrintChess(H, W);\\n\t\t\t\\n\t\t\tSystem.out.println(\"\");\\n\t\t\tH=scanner.nextInt();\\n\t\t\tW=scanner.nextInt();\\n\t\t}\\n\t\tscanner.close();\\n\t\t//System.out.println(\"exit\");\\n\t}\\n\\n}", "target": "131", "substitutes": {"H": ["G", "h", "K", "Length", "I", "L", "Z", "X", "FH", "P", "Q", "HK", "CH", "S", "Y", "B", "RH", "E", "D", "DH", "NH", "J", "F", "V", "HH", "HI", "R", "EH", "MH", "C", "T", "N", "M", "HTTP", "HC"], "W": ["G", "I", "L", "WF", "SW", "MW", "Sw", "X", "Width", "BW", "P", "Wa", "Wi", "Q", "B", "Y", "Ws", "S", "SH", "DW", "We", "FW", "Weight", "Line", "V", "TW", "C", "T", "w", "U", "N", "M", "WP", "Word", " w", "ws", "VW", "WS", "WR", "Wh", "GW", "O"], "i": ["f", "li", "h", "name", "I", "mini", "di", "in", "ri", "gi", "id", "m", "index", "key", "ai", "code", "ji", "si", "l", "ui", "mu", "phi", "v", "c", "d", "uri", "zi", "u", "pi", "e", "j", "o", "info", "ii", "hi", "ti", "b", "x", "oi", "p", "slice", "start", "z", "ci", "line", "k", "ip", "init", "xi", "chi", "multi", "ix", "bi", "a", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\t\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tString W = scan.next();\\n\t\tString w = W.toLowerCase();\\n\t\t\\n\t\tint i = 0;\\n\t\twhile(true){\\n\t\t\tString Ti = scan.next();\\n\t\t\tif (Ti.equals(\"END_OF_TEXT\")) break;\\n\t\t\tString ti = Ti.toLowerCase();\\n\t\t\tif (ti.equals(w)) i++;\\n\t\t}\\n\t\tSystem.out.println(i);\\n\t\t\\n\\n\t}\\n\\n}", "target": "46", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main {\\n\tstatic Scanner sc = new Scanner(System.in);\\n\tpublic static void main(String[] args) {\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint k = sc.nextInt();\\n\t\tSystem.out.println(Math.min(a, k) - Math.max(k - a - b, 0));\\n\t}\\n}", "target": "56", "substitutes": {"sc": ["parse", "ner", "osc", "cont", "exp", " Sc", "nc", "ga", "console", "sb", "sche", "cli", "search", "cv", "esc", "bc", "config", "cc", "asc", "pc", "exec", "ss", "sec", "scope", "g", "cus", "SC", "se", "scan", "cs", "sw", "uc", "com", "ctx", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "sr", "soc", "sp", "ci", " SC", "sh", "parser", "tc", "cur", "coll", "desc", "lib", "lc"], "a": ["f", "h", "name", "ama", "base", "am", "A", "ab", "ad", "aka", "m", "n", "l", "ac", "na", "ba", "da", "min", "ca", "area", "aa", "d", "y", "aj", "va", "u", "j", "auto", "s", "fa", "sa", "as", "x", "p", "ak", "ka", "z", "i", "an", "ae", "alpha", "la"], "b": ["f", "h", "ab", "ad", "bc", "n", "l", "B", "ba", "v", "g", "aa", "d", "y", "u", "e", "o", "j", "lb", "bb", "p", "x", "w", "ib", "z", "i", "eb", "r"], "c": ["f", "h", "ch", "m", "n", "l", "ac", "v", "ca", "d", "y", "max", "u", "e", "o", "j", "p", "x", "C", "w", "z", "i", "r"], "k": ["f", "h", "ch", "K", "mc", "ko", "ad", "ik", "key", "m", "cc", "kn", "n", "ck", "ac", "anc", "g", "v", "ok", "ca", "d", "y", "max", "u", "e", "o", "j", "dc", "p", "x", "ku", "w", "kk", "enc", "sk", "ka", "z", "ci", "ks", "i", "km", "dk", "q", "kw"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\\n\t\tdouble dice=1/(double)N;\\n\t\tdouble ans=0;\\n\\n\t\tfor(int i=1;i<=N;i++) {\\n\t\t\tint n=i;\\n\t\t\tdouble m=dice;\\n\t\t\twhile(n<K) {\\n\t\t\t\tn *= 2;\\n\t\t\t\tm /= 2.0;\\n\t\t\t}\\n\t\t\tans += m;\\n\t\t}\\n\\n\t\tSystem.out.println(ans);\\n\\n\t}\\n\\n\\n}", "target": "20", "substitutes": {"sc": ["class", "ner", "ch", "osc", "fc", "mc", " Sc", "nc", "sche", "cc", "esc", "bc", "asc", "pc", "exec", "text", "ss", "sec", "na", "server", "scope", "app", "SC", "se", "c", "scan", "uc", "cl", "sw", "cs", "com", "ctx", "acc", "Sc", "sq", "sci", "cr", "ocr", "sync", "src", "rc", "cer", "enc", "soc", "sp", "ci", " SC", "sh", "ec", "tc", "cur", "lc", " scr"], "N": ["CNN", "NE", "I", "L", "Z", "Size", "X", "Ni", "P", "NS", "H", "NC", "S", "Y", "E", "D", "NL", "J", "F", "V", "No", "NG", "NB", "NN", "T", "C", "Num", "M", "Ne", "Ns", "NT", "Number", "O"], "K": ["G", "I", "L", "Z", "PK", "SK", "X", "KR", "P", "Q", "H", "KS", "NK", "S", "Y", "B", "E", "D", "J", "F", "V", "R", "C", "KA", "KK", "U", "KI", "M", "k", "KE", "O"], "dice": [" dge", "dedide", "dge", "sdice", " dii", " dane", "ddICE", "dedise", "ddge", "ddice", "sdii", " dise", " dICE", "sdide", "sdge", "dise", "dICE", "sdise", " dide", "dide", "sdICE", "dedice", "sdane", "dedii", "ddane", "dii", "dane"], "ans": ["ANS", "cons", " scans", "ats", "ann", "aned", "anon", "ays", "man", "anas", "amps", "AN", " means", "ss", "annels", "na", "anc", "unks", "cs", "ents", "scan", "aning", "ms", "lan", "can", "ls", "es", "ions", "nas", "aus", "asts", "s", "as", "x", "ns", "cas", "ants", "ares", "eps", "ins", "ks", "mas", "ras", "an", "ians", "outs", "missions", "ars", "nn", "ds", "ana", "ons"], "i": ["li", "I", "mini", "di", "in", "ni", "gi", "key", "index", "ai", "si", "l", "ui", "mu", "v", "t", "ie", "d", "y", "u", "e", "o", "j", "pi", "info", "ii", "qi", "p", "ti", "x", "ind", "ini", "start", "z", "ci", "part", "k", "mi", "ip", "xi", "ix", "multi", "bi"], "n": ["f", "nan", "ne", "nc", "in", "nt", "ni", "l", "na", "v", "c", "d", "y", "sn", "ny", "ng", "rn", "u", "e", "o", "j", "cn", "dn", "p", "un", "b", "en", "z", "k", "mn", "nu", "an", "nn", "net"], "m": ["nm", "bm", "f", " M", "mini", "mc", "am", "ma", "l", "mu", "g", "v", "mr", "c", "med", "d", "ms", "y", "fm", "mad", "cm", "u", "e", "o", "j", "mm", "p", "b", "mo", "dm", "M", "pm", "md", "z", "k", "mn", "mi", "sm", "an", "gm", "um", "span"]}}
{"code": "import java.util.*;\\npublic class Main{\\n    public static void main(String [] args){\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int[] A = new int[N];\\n        for(int i = 0; i < N; i++){\\n            A[i] = 0;\\n        }\\n            for(int i = 1; i <= N; i++){\\n                int a = sc.nextInt();\\n                A[a-1] = i;\\n            }\\nfor(int i =0;i<N;i++){\\nSystem.out.print(A[i] + \" \");\\n\\n    }\\n}\\n}\\n", "target": "227", "substitutes": {"sc": ["class", "ner", "osc", "cont", " Sc", "nc", "out", "sche", "sb", "nt", "cv", "esc", "bc", "cc", "ser", "pc", "asc", "exec", "ss", "sec", "scope", "anc", "SC", "se", "c", "scan", "sw", "cs", "cl", "screen", "uc", "spec", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "enc", "sp", " SC", "ct", "sch", "sh", "ec", "tc", "cur", "lc", " scr"], "N": ["NE", "CNN", "K", "Len", "I", "L", "Z", "Size", "X", " n", "Node", "Ni", "P", "NS", "H", "n", "B", "S", "Y", "Limit", "Na", "E", "D", "Network", "network", "W", "J", "F", "V", "No", "NB", "R", "NN", "C", "T", "Num", "M", "NA", "Ne", "NR", "Part", "Ns", "NT", "O"], "A": ["Args", "SA", "G", "I", "L", "Z", "AA", "AS", "X", "API", "This", "P", "Q", "H", "AV", "B", "S", "Y", "As", "E", "D", "AP", "Answer", "Access", "DATA", "Ma", "Adam", "F", "V", "At", "CA", "C", "T", "The", "An", "U", "Ar", "Alpha", "AM", "Address", "NA", "Average", "AR", "LA", "Array", "Parts", "O"], "i": ["f", "eni", "li", "fi", "h", "I", "mini", "data", "off", "di", "in", "ri", "ni", "gi", "id", "m", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "c", "ie", "y", "uri", "pi", "u", "e", "o", "j", "info", "ii", "api", "qi", "p", "hi", "b", "x", "oi", "ti", "abi", "ini", "start", "yi", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "multi", "chi", "bi"], "a": ["f", "data", "ga", "m", "index", "ai", "ea", "ac", "ba", "da", "area", "ca", "c", "aa", "y", "aj", "next", "va", "u", "e", "o", "pi", "aaa", "fa", "sa", "p", "b", "x", "z", "ata", "k", "qa", "an", "alpha", "span"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.LinkedList;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t    LinkedList<String> stack = new LinkedList<String>();\\n\t\t\\n\t\ttry {\\n\t\t\tString[] param = in.readLine().split(\" \");\\n\t\t\t\\n\t\t\tint i = 0;\\n\t\t\twhile (i < param.length) {\\n\t\t\t\twhile ((param[i].equals(\"+\") == false)\\n\t\t\t\t\t\t&& (param[i].equals(\"-\") == false) && (param[i].equals(\"*\") == false)) {\\n\t\t\t\t\tstack.push(param[i]);\\n\t\t\t\t\ti++;\\n\t\t\t\t}\\n\t\t\t\tint b = Integer.parseInt(stack.pop());\\n\t\t\t\tint a = Integer.parseInt(stack.pop());\\n\t\t\t\t\\n\t\t\t\tif (param[i].equals(\"+\")) {\\n\t\t\t\t\tstack.push(String.valueOf(a + b));\\n\t\t\t\t} else if (param[i].equals(\"-\")) {\\n\t\t\t\t\tstack.push(String.valueOf(a - b));\\n\t\t\t\t} else {\\n\t\t\t\t\tstack.push(String.valueOf(a * b));\\n\t\t\t\t}\\n\t\t\t\ti++;\\n\t\t\t}\\n\t\t\t\\n\t\t\tSystem.out.println(stack.pop());\\n\t\t} catch (NumberFormatException e) {\\n\t\t\t// TODO Auto-generated catch block\\n\t\t\te.printStackTrace();\\n\t\t} catch (IOException e) {\\n\t\t\t// TODO Auto-generated catch block\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t}\\n}", "target": "114", "substitutes": {"in": ["f", "client", "h", "data", "is", "input", "out", "ssl", "log", "err", "din", "id", "socket", "inner", "n", "nin", "l", "IN", "inn", "server", "loader", "con", "c", "bin", "er", "reader", "isin", "resource", "inc", "buffer", "ex", "source", "this", "re", "user", "s", "as", "ini", "login", "win", "again", "temp", "line", "stream", "ins", "connection", "init", "In", "gin", "r"], "stack": ["thread", "lc", "parse", "list", "tree", "string", "base", "Stack", "input", "st", "console", "context", "index", "params", "config", "shell", "fr", "que", "ops", "queue", "pop", "left", "scope", "diff", "push", "form", "layer", "style", "chain", "fields", "site", "cl", "array", "inc", "buffer", "source", "counter", "batch", "pull", "cache", "pack", "stage", "wrapper", "load", "iter", "info", "depth", "slice", "history", "sc", "sl", "view", "work", "stream", "via", "function", "trace", "handler", "check", "ack", "la", "now", "acks", "sequence"], "param": ["channel", "comment", "arg", "name", "path", "string", "grade", "issue", "input", "rem", "key", "number", "index", "params", "config", "keep", "par", "option", "prom", "change", "object", "null", "block", "Parameter", "conf", "type", "form", "cat", "page", "project", "model", "update", "request", "array", "ram", "cm", "source", "lc", "aram", "inc", "info", "item", "point", "mm", "member", "p", "rock", "error", "problem", "module", "pm", "crit", "part", "line", "cp", "arm", "an", "Param", "body", "check", "mark", "argument"], "i": ["f", "li", "fi", "esi", "I", "is", "di", "iv", "ri", "ni", "length", "id", "gi", "m", "index", "cli", "ai", "inner", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "t", "it", "c", "ie", "y", "uri", "u", "pi", "o", "j", "info", "api", "ii", "ei", "qi", "e", "p", "ti", "x", "oi", "hi", "sup", "slice", "abi", "ini", "yi", "ci", "xi", "ip", "iu", "init", "isi", "ix", "multi", "bi", "lc"], "b": ["f", "gb", "bf", "pb", "h", "base", "buff", "sb", "ab", "db", "bc", "n", "l", "B", "wb", "home", "ob", "v", "emb", "c", "aa", "d", "y", "mb", "rb", "u", "e", "o", "j", "lb", "bb", "p", "x", "nb", "cb", "ib", "z", "bd", "beta", "abb", "be", "fb", "r"], "a": ["sta", "ama", "ga", "A", "ab", "ad", "ma", "ai", "ac", "na", "ba", "da", "ca", "area", "aa", "c", "aj", "va", "pa", "aux", "u", "af", "aaa", "api", "auto", "fa", "sa", "as", "ia", "p", "za", "ha", "access", "sup", "au", "ya", "mA", "ana", "qa", "an", "ae", "ada", "alpha", "la"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        final Scanner sc = new Scanner(System.in);\\n\\n        int N = Integer.parseInt(sc.next());\\n        int[] H = new int[N];\\n        int highest = 0;\\n        int count = 0;\\n\\n        for (int i = 0; i < N; i++) {\\n            H[i] = Integer.parseInt(sc.next());\\n            if (i == 0) {\\n                highest = H[i];\\n                count++;\\n            } else {\\n                if (H[i] >= highest) {\\n                    count++;\\n                    if (H[i] > highest) {\\n                        highest = H[i];\\n                    } else {\\n\\n                    }\\n                } else {\\n\\n                }\\n            }\\n        }\\n        System.out.print(count);\\n    }\\n}", "target": "7", "substitutes": {"sc": ["ner", "osc", "cont", "mc", " Sc", "nc", "sb", "sche", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "scope", "g", "anc", "cus", "SC", "se", "c", "scan", "cs", "sw", "uc", "cl", "Sc", "system", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "enc", "soc", "sl", "sp", "ci", " SC", "sch", "ec", "cur", "coll", "sem", "ser", "lc", " scr", "r"], "N": ["NE", "K", "I", "L", "Z", "Size", "X", " n", "Count", "Ni", "P", "Q", "NS", "SN", "n", "NC", "S", "Y", "B", "D", "NO", "F", "V", "No", "NM", "NB", "R", "NN", "C", "T", "Num", "M", "NA", "Ne", "NR", "Ns", "NT", "Number", "O"], "H": ["G", "h", "K", "I", "L", "PH", "GH", "X", "HQ", "P", "HT", "Q", "HK", "HD", "HA", "CH", "Y", "SH", "RH", "ID", "DH", "OH", "F", "NH", "HM", "Head", "HE", "High", "Host", "CL", "V", "HH", "HI", "HR", "R", "EH", "Ch", "rh", "MH", "T", "C", "U", "M", "Hash", "HP", "HTTP", "HB", "Ha", "He", "History", "HS", "Hi", "IT", "HC"], "highest": ["lower", "h", "single", "recent", "existing", "upper", "large", "latest", "higher", "default", "high", "will", "vict", "classic", "initial", "remote", "effective", "most", "increasing", "est", "last", "master", "first", "hist", "that", "peak", "Maximum", "popular", "which", "best", "this", "position", "current", "historic", "hest", "minimum", " Highest", "actual", "top", "winning", "worst", "multiple", "maximum", "each", "largest", "prev", "highly", "later"], "count": ["stat", "list", "h", "level", "base", "call", "in", "nt", "Count", "length", "match", "id", "code", "number", "index", "large", "key", "limit", "l", "total", "group", "left", "last", "sum", "more", "c", "result", "first", "max", "array", "carry", "progress", "batch", "weight", "counter", "info", "cache", "handle", "load", "depth", "full", "p", "child", "state", "start", "history", "size", "work", "other", "coll", "found", "check", "parent", "force"], "i": ["f", "li", "fi", "h", "I", "ri", "di", "in", "cli", "ni", "length", "id", "key", "index", "gi", "ai", "limit", "io", "ji", "n", "si", "ori", "ui", "phi", "v", "t", "it", "c", "ie", "y", "uli", "uri", "u", "pi", "o", "j", "e", "info", "ii", "api", "qi", "at", "p", "ti", "hi", "x", "oi", "b", "abi", "ini", "start", "z", "ci", "iu", "xi", "init", "chi", "multi", "ix", "bi", "lc"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint A = scan.nextInt();\\n\t\tint B = scan.nextInt();\\n\t\tint T = scan.nextInt();\\n\\n\t\tint times = T /A;\\n\t\tint ans = times * B;\\n\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "4", "substitutes": {"scan": ["gen", "parse", "ner", "skip", "base", "ann", "watch", "out", "fan", "in", "pan", "log", "search", "pin", "ignore", "report", "n", "l", "na", "app", "conv", "con", "se", "cat", "can", "plan", "query", "read", "pack", "connect", "all", "Scan", "ln", "san", "nl", "sync", "slice", "sr", "sc", "filter", "conn", "an", "look", "walk", "nn", "ser", "run", "clean", "sign", "span"], "A": ["SA", "Az", "I", "L", "AA", "API", "TA", "P", "Wa", "Q", "H", "S", "Y", "AB", "As", "GA", "D", "Ab", "La", "AP", "Access", "W", "Ma", "Area", "F", "SHA", "CA", "Ca", "AF", "C", "U", "N", "M", "Alpha", "AR", "LA", "a"], "B": ["G", "I", "L", "Z", "BB", "DB", "CB", "X", "P", "Q", "Y", "S", "AB", "UB", "E", "D", "TB", "W", "BI", "J", "LB", "F", "EB", "BA", "V", "R", "b", "C", "U", "WB", "M", "N", "Bs", "O", "OB"], "T": ["TF", "TN", "G", "I", "L", "Z", "AS", "TX", "X", "TA", "P", "Q", "TT", "H", "Y", "S", "t", "E", "D", "TB", "W", "Tu", "J", "F", "V", "TC", "R", "C", "TS", "U", "M", "N", "TR", "TH", "O"], "times": ["time", "ts", "faces", "points", "lines", "reads", "acts", "steps", "ES", "types", "ones", "cs", "t", "rows", "Times", "videos", "ions", "imes", "tips", "s", "offs", "blocks", "shows", "TS", "cas", "cycles", "tests", "ps", "trans", "PS", "ins", " Times", "outs", "cases", "Time", "events"], "ans": ["ases", "CNN", "ANS", "cons", " scans", "faces", "ats", "ann", "AS", "annot", "amps", "AN", "ops", "na", "types", "aces", "ents", "cs", "lan", "plan", "ls", "videos", "ions", "s", "offs", " sins", "as", " cases", "cas", "ants", "ps", "rors", " spans", "eps", "ins", "ks", "an", "outs", "span", "Na", "acts"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Stack;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\nimport java.util.Queue;\\nimport java.util.ArrayDeque;\\nimport java.util.Map;\\nimport java.util.LinkedList;\\n\\npublic class Main{\\n  public static void main(String[] args) throws IOException {\\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    String[] line = br.readLine().split(\" \");\\n    int n = Integer.parseInt(line[0]);\\n    int q = Integer.parseInt(line[1]);\\n    LinkedList<String> queue = new LinkedList<String>();\\n    int time = 0;\\n    int cnt = n;\\n    Map<String, Integer> map = new HashMap<>();\\n\\n    for(int i = 0; i < n; i++){\\n      line = br.readLine().split(\" \");\\n      map.put(line[0], Integer.parseInt(line[1]));\\n      queue.add(line[0]);\\n    }\\n\\n    while(true){\\n      String x = queue.poll();\\n      if(map.get(x) > q){\\n        time += q;\\n        map.put(x, map.get(x) - q);\\n        queue.add(x);\\n      }else{\\n        time += map.get(x);\\n        map.put(x, time);\\n        System.out.println(x + \" \" + map.get(x));\\n        n--;\\n      }\\n      if(n == 0)  break;\\n    }\\n  }\\n}", "target": "231", "substitutes": {"br": ["obj", "http", "tr", "bh", "ler", "bl", "err", "bro", "fr", "bc", "io", "arr", "dr", "mr", "bp", "bar", "buf", "er", "reader", "ar", "wr", "rb", "gr", "hr", "req", "str", "handle", "b", "cr", "src", "cb", "yr", "ber", "res", "sr", "ocr", "sp", "bs", "nr", "BR", "cur", "bridge", "lr", "browser", "Br", "r"], "line": ["parse", "comment", "name", "cell", "string", "plus", "data", "one", "lin", "no", "log", "id", "lines", "key", "code", "lf", "shell", "object", "unit", "split", "l", "block", "message", "text", "se", "style", "page", "layer", "write", "day", "entry", "inline", "ge", "source", "le", "Line", "word", "str", "url", "frame", "load", "link", "e", "info", "user", "job", "strip", "row", "letter", "nl", "pass", "file", "sync", "error", "pe", "header", "part", "definition", "look", "lock", "LINE", "lc", "el", "ine"], "n": ["f", "h", "ne", "name", "nc", "net", "in", "no", "nt", "count", "m", "number", "l", "v", "t", "c", "d", "num", "y", "network", "sn", "u", "e", "o", "j", "np", "cn", "p", "b", "ns", "C", "en", "nb", "w", "N", "len", "z", "ci", "k", "size", "nn", "r"], "q": ["f", "h", "in", "length", "id", "count", "m", "Q", "quick", "change", "l", "que", "ue", "v", "wait", "t", "end", "c", "d", "y", "query", "req", "u", "e", "o", "j", "qs", "depth", "eq", "sq", "p", "dq", "qq", "w", "qu", "z", "delay", "k", "quant", "qa", "iq", "qt", "check", "r"], "queue": ["channel", "list", "worker", "task", "log", "group", "live", "code", "collection", "Q", "message", "block", "que", "ue", "server", "mu", "loop", "wait", "bar", "buf", "page", "per", "query", "array", "repeat", "buffer", "batch", "event", "counter", "cache", "progress", "p", "job", "manager", "stack", "file", "pool", "view", "delay", "menu", "lock", "module", "sequence"], "time": ["value", "h", "name", "times", "rate", "shift", "one", "clock", "length", "live", "count", "key", "timeout", "when", "cost", "change", "timer", "close", "wait", "t", "duration", "type", "ime", "max", "query", "cycle", "weight", "age", "info", "cache", "depth", "offset", "error", "speed", "start", "frequency", "sleep", "z", "delay", "size", "work", "right", "check", "now", "Time"], "cnt": ["Cno", "Cnt", " count", " cno", "ncwd", "ncno", "cno", "Cwd", "ncount", "Count", "ncnt", "cwd", " cwd", "count"], "map": ["parse", "list", "cover", "shape", "shift", "rate", "data", "one", "match", "group", "pose", "wave", "m", "code", "key", "index", "change", "where", "block", "process", "address", "app", "up", "master", "port", "type", "ap", "use", "array", "ge", "batch", "age", "cache", "pack", "record", "open", "share", "space", "down", "state", "hash", "grid", "pool", "set", "view", "table", "copy", "apper", "work", "cap", "rule", "size", "pad", "get", "lock", "dict", "module", "MAP", "scale"], "i": ["f", "li", "I", "di", "ri", "ni", "gi", "inner", "ai", "si", "ui", "phi", "v", "c", "y", "pi", "u", "info", "j", "ii", "qi", "ti", "p", "oi", "ini", "ci", "xi", "ip", "iu", "chi", "ix", "multi", "bi"], "x": ["f", "xy", "xc", "cross", "php", "lex", "example", "h", "name", "string", "xe", "xx", "xxxx", "one", "X", "wx", "key", "search", "index", "hex", "xf", "yx", "l", "ue", "v", "t", "ww", "ctx", "xt", "tx", "y", "dx", "xml", "ext", "fx", "ax", "xes", "ex", "nex", "e", "u", "xs", "s", "ux", "p", "b", "sync", "xxx", "pe", "rx", "z", "sex", "px", "work", "xa", "xi", "host", "XX", "ix", "check", "xp", "my", "rex"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    private static final int MOD = (int)1e9 + 7;//(int)Math.pow(10, 9) + 7;\\n    private static final long EIGHT = (long) 1e18;\\n    private static final int[][] DIRS = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\\n\\n    public static void main(String[] args) {\\n        FastReader sc = new FastReader();\\n        int s = sc.nextInt();\\n\\n\\n        print(\"\" + (s + s*s + s*s*s));\\n    }\\n\\n    /*\\n     * Check if a * b is overflow or not\\n     */\\n    static Boolean isOverflowByMul(long a, long b) {\\n        if (a == 0 || b == 0) {\\n            return false;\\n        }\\n\\n        long result = a * b;\\n        if (a == result / b) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    static private long powMod(long a, long n, long mod) {\\n        long res = 1;\\n        while (n > 0) {\\n            if ((n & 1) == 1) {\\n                res = res * a % mod;\\n            }\\n            n >>= 1;\\n            a = a * a % mod;\\n        }\\n        return res;\\n    }\\n\\n    static private void swap(int[] nums, int x, int y) {\\n        int tmp = nums[x];\\n        nums[x] = nums[y];\\n        nums[y] = tmp;\\n    }\\n\\n    static  private void reverse(int[] nums, int left, int right) {\\n        while (left < right) {\\n            swap(nums, left, right);\\n            left++;\\n            right--;\\n        }\\n    }\\n\\n    static private boolean findNextPermutation(int[] nums) {\\n        if (nums.length <= 1) {\\n            return false;\\n        }\\n\\n        int last = nums.length - 2;\\n\\n        while (last >= 0) {\\n            if (nums[last] < nums[last + 1]){\\n                break;\\n            }\\n            last--;\\n        }\\n\\n        if (last < 0) { return false; }\\n        int nextGenerater = nums.length - 1;\\n\\n        for (int i = nums.length - 1; i > last; i--) {\\n            if (nums[i] > nums[last]) {\\n                nextGenerater = i;\\n                break;\\n            }\\n        }\\n\\n        swap(nums, nextGenerater, last);\\n        reverse(nums, last + 1, nums.length - 1);\\n        return true;\\n    }\\n\\n    static private int[] generateNArray(int n) {\\n        int[] res = new int[n];\\n\\n        for (int i = 0; i < n; i++) {\\n            res[i] = i + 1;\\n        }\\n\\n        return res;\\n    }\\n\\n    static  private void print(String s) {\\n        System.out.println(s);\\n    }\\n\\n    static private void printArray(int[] e) {\\n        for (int s: e) {\\n            System.out.print(s + \" \");\\n        }\\n        print(\"\");\\n    }\\n\\n    static private int log2(int x) {\\n        return (int)(Math.log(x) / Math.log(2));\\n    }\\n\\n    static private long gcd(long m, long n) {\\n        if (m < n) { return gcd(n, m); }\\n        if (m % n == 0) { return n; }\\n        return gcd(n, m%n);\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException  e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try{\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n}\\n", "target": "162", "substitutes": {"MOD": [" mod", " LOC", " M", " modifier", " MM", " MAG", "Mod", " DUP", " RH", " ADD", " mult", " MEM", " mods", " MODULE", " PROT", " LOG", "mod", " module", " BASE", " IS", "MODE", " X", " J", " DEBUG", " Mod", " Z", " MA", " modular"]}}
{"code": "\\nimport java.util.*;\\nimport java.io.*;\\nimport java.math.BigInteger;\\npublic class Main {\\n\\n\tprivate static final int mod =(int)1e9+7;\\n\tpublic static void main(String[] args) throws Exception  {\\n\t      Scanner  sc=new Scanner(System.in);\\n\t      PrintWriter out=new PrintWriter(System.out);\\n\t      int x=sc.nextInt();\\n\t    if(x==0) {\\n\t      out.println(1);\\n\t    }else {\\n\t      out.println(0);\\n\t    }\\n\t      out.flush();\\n\t    }\\n//\t    static int binarySearch(int i,int j,int a[]) {\\n//\t      \\n//\t    }\\n\t\\n\tstatic boolean vis[]=new boolean[10001];\\n\t      static int gcd(int a, int b) \\n\t      { \\n\t          if (a == 0) \\n\t              return b; \\n\t          return gcd(b % a, a); \\n\t      } \\n\t    static  void dfs(int n,boolean flag,ArrayList<ArrayList<Integer>> adj,int src,boolean vis[],ArrayList<Integer> centroid,int size[]) {\\n\t        vis[src]=true;\\n\t        size[src]=1;\\n\t        for(int i:adj.get(src)) {\\n\t          if(vis[i]==false){\\n\t            dfs(n,flag,adj,i,vis,centroid,size);\\n\t            size[src]+=size[i];\\n\t            if(size[i]>n/2) {\\n\t              flag=false;\\n\t            }\\n\t          }\\n\t        }\\n\t        if(n-size[src]>n/2) {\\n\t          flag=false;\\n\t        }\\n\t        if(flag==true) {\\n\t          centroid.add(src);\\n\t        }\\n\t    }\\n\t\\n\t     \\n\t      \\n}", "target": "148", "substitutes": {"mod": [" modifier", " base", "Mod", " delay", " mult", " seed", " modules", " bits", " pow", " spec", " depth", " increment", " major", " order", " mods", " mask", " ext", " module", " reg", " shift", " imp", " m", " exp", " access", " Mod", " indent", " modular", " dist"], "sc": ["ner", "ch", "cont", "osc", "mc", " Sc", "nc", "core", "contract", "cc", "bc", "esc", "config", "asc", "pc", "si", "ss", "sec", "scope", "ca", "SC", "c", "scan", "cs", "uc", "sw", "cl", "cus", "ctx", "spec", "Sc", "system", "sq", "sci", "cr", "src", "rc", "cer", "ci", "sp", "sch", "sh", "screen", "lc"], "out": ["gen", "client", "channel", "exp", "arg", "name", "ch", "raw", "input", "console", "prefix", "in", "no", "log", "err", "cli", "io", "n", "exec", "null", "IN", "server", "print", "up", "c", "page", "write", "password", "OUT", "ext", "inc", "output", "ex", "word", "o", "str", "this", "s", "flush", "error", "Out", "w", "file", "sync", "pass", "down", "pool", "again", "temp", "line", "conn", "writer", "outer", "outs", "check", "screen", "r"], "x": ["f", "val", "xx", "X", "wx", "id", "m", "index", "n", "v", "t", "c", "ctx", "xt", "tx", "d", "num", "dx", "pos", "y", "fx", "ax", "ex", "u", "j", "xs", "p", "w", "xxx", "z", "k", "i", "xi", "ix", "xp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n  static int gcd(int a ,int b){return b>0? gcd(b,a%b):a;}\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    int k = sc.nextInt();\\n    int count = 0;\\n    int max_gcd = gcd(a,b);\\n    int ans=0;\\n\\n    for(int i= max_gcd; i>0; i--){\\n      if(a%i==0 && b%i==0){\\n        count += 1;\\n      }\\n      if(count == k){\\n        ans = i;\\n        break;\\n      }\\n    }\\n    System.out.println(ans);\\n\\n  }\\n}", "target": "134", "substitutes": {"a": ["f", "h", "ama", "base", "am", "ga", "A", "oa", "ab", "ad", "m", "index", "ai", "n", "ac", "na", "ba", "da", "ca", "area", "c", "aa", "asa", "d", "y", "ar", "va", "pa", "e", "u", "o", "af", "api", "aaa", "s", "fa", "sa", "as", "p", "x", "access", "au", "z", "art", "an", "ae", "alpha", "la", "r"], "b": ["f", "bf", "pb", "base", "A", "sb", "ab", "db", "ub", "ad", "m", "bc", "n", "l", "ac", "B", "null", "wb", "ob", "ba", "v", " eb", "c", "aa", "d", "y", "mb", "rb", "u", "e", "lb", "o", "j", "bb", "s", " B", "p", "as", "x", "nb", " ab", "w", "ib", "z", "bs", "eb", "be", "bi", "fb", " bi", "r"], "sc": ["ner", "ch", "osc", "cont", "exp", " Sc", "nc", "sche", "cv", "cc", "bc", "esc", "asc", "pc", "si", "ss", "sec", "na", "anc", "scope", "cus", "SC", "se", "c", "scan", "cs", "sw", "uc", "com", "ca", "ctx", "acc", "cor", "Sc", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "ci", "sp", " SC", "tc", "cur", "lc"], "k": ["f", "h", "K", "m", "number", "kn", "n", "ac", "g", "v", "ok", "c", "d", "y", "max", "e", "o", "j", "p", "x", "w", "ak", "sk", "ka", "z", "ks", "q", "kw"], "count": ["f", "list", "h", "base", "act", "Count", "length", "id", "code", "limit", "number", "index", "key", "n", "l", "ac", "g", "sum", "conf", "c", "d", "max", "carry", "ace", "batch", "counter", "e", "depth", "s", "p", "offset", "x", "ind", "cas", "w", "start", "len", "z", "size", "part", "an", "parent", "q"], "max_gcd": ["max_ccr", "max_cdef", "max_Gcd", "max_gccr", "max_cdd", "max_gadef", "max_gCD", "max_gccd", "max_gcdd", "max_cCD", "max_fcd", "max_gdef", "max_ccd", "max_gdd", "max_gcCD", "max_fdef", "max_gcr", "max_GCD", "max_gacr", "max_Gcr", "max_gaCD", "max_fcr", "max_gacd", "max_Gdd", "max_fCD"], "ans": ["runs", "ANS", "cons", " scans", "vals", "auc", "base", "ann", "includes", "aned", "atches", "anas", "n", "groups", "l", "annot", "annels", "except", "amps", "na", "unks", "anc", "cs", "ents", "scan", "support", "can", "lan", "ls", "es", "ions", "ids", "aus", "asts", "s", "as", "x", "books", "ns", "cas", "ants", "len", "sk", "acs", "eps", "os", "ks", "ins", "ana", "ras", "parser", "an", "ars", "span", "asm", "acts"], "i": ["li", "fi", "I", "mini", "is", "di", "ri", "ni", "gi", "id", "m", "index", "ai", "n", "si", "ui", "mu", "g", "v", "phi", "it", "c", "ie", "d", "y", "uli", "zi", "uri", "u", "pi", "o", "j", "e", "api", "ii", "info", "qi", "ti", "hi", "oi", "p", "abi", "ini", "z", "ci", "mi", "iu", "ip", "xi", "chi", "multi", "ix", "bi", "lc"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        Map<String,Long> map = new HashMap<>();\\n        long ans = 0;\\n        for(int i = 0;i<n;i++){\\n            char[] tmp = sc.next().toCharArray();\\n            Arrays.sort(tmp);\\n            String key = String.valueOf(tmp);\\n            if(map.get(key) != null){\\n                ans += map.get(key);\\n                map.put(key,map.get(key) + 1);\\n            }else{\\n                map.put(key,1L);\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "32", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "sb", "cc", "bc", "esc", "asc", "pc", "ss", "scope", "anc", "cus", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "screen", "Sc", "system", "sci", "cr", "src", "sync", "rc", "cer", "sr", "sl", "sp", "ci", " SC", "sch", "sh", "parser", "isc", "cur", "ec", "tc", "sem", "ser", "lc"], "n": ["f", "h", "ne", "nc", "in", "ni", "m", "number", "l", "norm", "r", "c", "num", "d", "network", "sn", "u", "e", "o", "j", "dn", "s", "p", "b", "x", "ns", "ln", "en", "nb", "nl", "N", "len", "z", "k", "mn", "nn", "fn", "net"], "map": ["parse", "list", "shape", "cover", "skip", "rate", "data", "one", "co", "match", "group", "m", "code", "move", "place", "arr", "block", "ase", "address", "scope", "app", "maps", "up", "master", "result", "push", "ap", "use", "array", "per", "prev", "batch", "age", "le", "cache", "pack", "mm", "open", "down", "hash", "set", "table", "mean", "apper", "cap", "work", "pad", "over", "lock", "dict", "module", "MAP", "parent", "scale", "mate"], "ans": ["runs", "ANS", " scans", " chars", "ann", "aned", "oa", "anon", "reads", "ays", "anas", "leans", "ons", "amps", " means", "AN", "acts", "na", "annels", "anc", "aces", "ones", "ents", "scan", "nos", " signs", "can", "lan", "ls", "ions", "ids", "nas", "aus", "flags", "asts", "s", "offs", "ln", "ns", "ants", "vers", "sk", "len", " spans", "aps", "os", "ks", "ins", "ras", "an", "outs", "ars", "ams", "ds", "ana"], "i": ["f", "eni", "li", "h", "I", "is", "di", "ri", "ni", "gi", "id", "m", "index", "ai", "io", "ji", "si", "ori", "ui", "mu", "phi", "v", "t", "d", "uri", "zi", "pi", "e", "o", "j", "ii", "qi", "ti", "p", "b", "x", "oi", "abi", "ini", "ci", "mi", "ip", "iu", "xi", "chi", "multi", "bi"], "tmp": ["etc", "obj", "cont", "orig", "data", "buff", "cro", "proc", "zip", "address", "piece", "home", "app", "v", "tab", "area", "bp", "ctx", "result", "buf", "att", "mp", "su", "pointer", "array", "txt", "rb", "word", "cache", "img", "np", "bb", "loc", "fp", "p", "bag", "sup", "cb", "slice", "src", "kk", "pty", "po", "pp", "temp", "resp", "cpp", "part", "cp", "stuff", "test", "ott", "storage", "now", "ppa"], "key": ["value", "obj", "f", "keys", "list", "cross", "KEY", "name", "shape", "join", "string", "base", "co", "act", "match", "bird", "large", "id", "code", "number", "seed", "ignore", "mac", "zip", "step", "text", "lock", "patch", "block", "ver", "order", "app", "nice", "type", "ie", "result", "pick", "owner", "ace", "word", "str", "info", "ry", "link", "loc", "section", "field", "x", "child", "fee", "kk", "ak", "box", "Key", "char", "col", "temp", "hop", "root", "k", "rule", "ip", "feat", "pair", "prev", "parent", "sign"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\nimport java.util.ArrayList;\\npublic class Main {\\n  public static void main(String[] args) throws IOException {\\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    int n = Integer.parseInt(br.readLine());\\n    String[] strArray = br.readLine().split(\" \");\\n    String[] strArray2 = new String[n];\\n    for(int i = 0;i < n;i++) {\\n      strArray2[i] = strArray[n-i-1];\\n    }\\n    for(int i = 0;i < (n-1);i++) {\\n      System.out.print(strArray2[i] + \" \");\\n    }\\n    System.out.println(strArray2[n-1]);\\n  }\\n}", "target": "79", "substitutes": {"br": ["bf", "tr", "ner", "string", "keeper", "sb", "bh", "ler", "db", "ab", "ref", "bl", "err", "bro", "fr", "bc", "io", "report", "orb", "arr", "dr", "mr", "bar", "buf", "er", "reader", "rb", "hr", "str", "bb", "HR", "b", "cr", "yr", "cb", "ocr", "abi", "sr", "her", "bs", "BR", "bridge", "browser", "lr", "Br", "fb", "r"], "n": ["f", "h", "ne", "name", "none", "nc", "net", "in", "no", "nt", "length", "count", "number", "m", "non", "l", "inn", "left", "v", "t", "c", "d", "network", "y", "sn", "u", "e", "o", "j", "s", "dn", "p", "b", "x", "un", "ns", "ln", "en", "nb", "w", "N", "len", "z", "k", "mn", "size", "conn", "nn", "r"], "strArray": ["arrArray", "errArray", "arrAll", " strarray", " strNumber", "StrNumber", "strAll", "StrString", "strNumber", "brAll", "brString", "arrList", " strString", "Strarray", "arrString", "errString", "strarray", "errNumber", "strString", "brArray", "errarray", "strList", "StrArray", " strList", " strAll", "brList"], "strArray2": ["arrArray2", "strArrayB", " strInstance2", "strarray1", "strObject2", "strStringTwo", "strString4", " strArraySecond", "strInstance5", "intArray2", "strAverage5", " strInstance3", "strarray2", "strString5", "strarraySecond", "arrObject3", "arrObject1", "intAverage5", "strArray4", "strAverage4", "strStringSecond", "StrArrayB", " strArray3", "strString3", "strOrderTwo", "arrArray3", "intArray1", "strAverage1", "strOrder2", "StrStringB", "strObjectTwo", "arrArray1", "strArray1", "strInstance1", "arrObject2", "arrArrayTwo", "strArray3", "strArray5", "strObjectB", "strarray3", "strObject1", "strInstance3", "strString2", "strOrder1", "intArray5", "StrString5", "strAverage2", "intAverage2", "StrArray1", "strStringB", "StrArray2", "intAverage1", "intAverage4", "strArraySecond", " strInstance1", "strInstance2", "StrString1", "strObject3", "strOrder3", "intArray4", "strObject4", " strInstanceSecond", "strString1", "strInstanceB", "strArrayTwo", "arrObjectTwo", "StrString2", "strObject5", "StrArray5", "strInstanceSecond", " strArray1"], "i": ["f", "eni", "li", "fi", "I", "di", "in", "ri", "length", "ik", "id", "gi", "index", "inner", "ai", "io", "ji", "si", "l", "ui", "mu", "phi", "v", "it", "ie", "y", "uli", "uri", "zi", "u", "e", "o", "pi", "j", "info", "ii", "qi", "s", "ti", "hi", "b", "oi", "x", "slice", "abi", "ini", "yi", "z", "ci", "mi", "ip", "xi", "init", "iu", "ix", "multi", "chi", "bi", "a"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tlong L = sc.nextLong();\\n\t\tlong R = sc.nextLong();\\n\\n\t\tfinal int divide = 2019;\\n\t\tlong ans =1000000000;\\n\\n\t\tif(R - L >= 2019)System.out.println(0);\\n\t\telse {\\n\t\t\tfor(long i=L; i<R; i++) {\\n\t\t\t\tfor(long j =i+1; j<=R; j++) {\\n\t\t\t\t\tans = Math.min(ans, (i*j)%divide);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "193", "substitutes": {"sc": ["ner", "ch", "osc", "fc", " Sc", "nc", "sche", "esc", "cc", "bc", "pc", "exec", "ss", "sec", "na", "server", "anc", "ca", "SC", "se", "c", "scan", "cs", "cl", "uc", "sw", "cus", "com", "acc", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "soc", "ci", "sp", " SC", "sch", "sh", "ec", "tc", "cur", "sem"], "L": ["G", "EL", "LT", "LE", "I", "Z", "XL", "DL", "LD", "X", "P", "l", "B", "UL", "S", "Lu", "LO", "Li", "Lo", "LM", "NL", "LR", "J", "LB", "SL", "RL", "CL", "BL", "LI", "ln", "T", "LL", "U", "N", "M", "IL", "LA", "dL", "LU"], "R": ["G", "I", "RR", "JR", "X", "RA", "Rs", "P", "Q", "H", "RO", "B", "Y", "S", "RH", "RS", "E", "D", "RT", "GR", "RP", "LR", "J", "W", "F", "RL", "V", "HR", "rh", "RW", "T", "C", "U", "CR", "N", "M", "RF", "RG", " r", "Right", "SR", "NR", "Rh", "r"], "divide": ["divade", "divisionider", "divride", "decided", " divite", "divisionide", "DIVide", "divider", "DIVride", "DIVade", "divisionade", "devride", "devide", "decade", "divisionided", "DIVite", "DIVider", " divride", " divider", "divite", "devite", "decide", "devider", "divided", "DIVided", "decider"], "ans": ["nan", "ANS", "vals", "ann", "aned", "anon", "lines", "anas", "vs", "ons", "amps", "AN", " means", "na", "anc", "ano", "cs", "ents", "scan", "errors", "can", "lan", "ls", "anan", "nas", "aus", "flags", "s", "offs", "as", "blocks", "ns", "atan", "san", "cas", "ants", "ares", "vers", "len", "sk", "eps", "mean", "os", "ins", "ana", "ras", "an", "outs", "ians", "ars", "ds", "a", "span"], "i": ["f", "eni", "li", "fi", "I", "vi", "is", "in", "ik", "ri", "id", "m", "ai", "ji", "n", "si", "l", "ori", "ui", "phi", "v", "it", "c", "ie", "uli", "zi", "u", "pi", "o", "ii", "qi", "hi", "p", "b", "oi", "x", "ind", "ini", "z", "ci", "iu", "ij", "xi", "ip", "ix", "bi", "r"], "j": ["f", "uj", "li", "h", "jl", "jj", "jo", "vi", "oj", "jp", "ik", "ni", "ri", "m", "fr", "ji", "n", "si", "l", "ui", "jc", "v", "g", "it", "ja", "end", "ie", "bj", "d", "y", "aj", "u", "e", "o", "J", "js", "ii", "qi", "p", "b", "x", "z", "ci", "k", "ij", "xi", "ix", "bi", "r"]}}
{"code": "import java.util.*;\\npublic class Main{\\npublic static void main(String[] args){\\nScanner sc = new Scanner(System.in);\\n  int N = sc.nextInt();\\n  int M = sc.nextInt();\\n  int[] a = new int[2*M];\\n  for(int i = 0;i < 2*M;i++){\\n    a[i] = sc.nextInt();\\n  }\\n  for(int i = 0;i < N;i++){\\n    int ans = 0;\\n    for(int j = 0;j < 2*M;j++){\\n      if(a[j] == i+1)ans++;\\n    }\\n    System.out.println(ans);\\n  }\\n}}\\n", "target": "57", "substitutes": {"sc": ["ner", "osc", "ch", "cont", "mc", " Sc", "nc", "sche", "sb", "cle", "esc", "bc", "cc", "asc", "pc", "ss", "server", "anc", "ca", "SC", "se", "c", "scan", "cs", "uc", "sw", "cus", "screen", "cor", "Sc", "system", "sq", "sci", "cr", "src", "rc", "cer", "enc", "soc", "ci", "sp", " SC", "sch", "sh", "ec", "tc", "cur", "sem", "ser", "lc"], "N": ["K", "I", "L", "Z", "Size", "A", "X", " n", "Ni", "P", "m", "NS", "H", "n", "S", "Y", "B", "E", "D", "NL", "MN", "W", "J", "F", "V", "NM", "NB", "NN", "C", "T", "U", "Num", "Ne", "NT", "O"], "M": ["G", "K", "I", "DM", "L", "Z", "CM", "A", "X", "P", "m", "Q", "JM", "H", "n", "MC", "B", "S", "Y", "MF", "MM", "E", "D", "LM", "FM", "MN", "W", "MB", "J", "MD", "F", "V", "NM", "R", "VM", "T", "C", "U", "IM", "MT", "Mi", "O"], "a": ["ama", "am", "ga", "A", "ab", "ma", "oa", "m", "ai", "n", "ea", "ac", "na", "da", "ca", "area", "aa", "c", "y", "ar", "aj", "array", "pa", "va", "u", "o", "e", "aaa", "auto", "s", "sa", "as", "ia", "p", "b", "au", "ata", "tta", "an", "ae", "alpha", "la", "ana"], "i": ["f", "eni", "li", "fi", "I", "is", "di", "in", "anti", "ri", "ni", "ik", "id", "gi", "m", "index", "ami", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "phi", "v", "it", "ie", "y", "uri", "ski", "pi", "u", "e", "o", "api", "ii", "qi", "p", "hi", "x", "oi", "ind", "abi", "ini", "start", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "ki", "bi"], "ans": ["ANS", "cons", "ats", "ann", "aned", "aid", "lines", "ai", "ani", "anas", "ons", "annot", "AN", "ss", "na", "anc", "cs", "ents", "scan", "rows", "errors", "can", "plan", "lan", "ls", "es", "ions", "ids", "ace", "nas", "aus", "asts", "anners", "s", "as", "ia", "x", "ns", "atan", "ants", "sk", "anus", "eps", "acs", "aps", "os", "ins", "ks", "ras", "rs", "an", "outs", "ars", "nn", "span", "ana", "anned", "acts"], "j": ["f", "uj", "li", "h", "jl", "jj", "ch", "jo", "jp", "jen", "ni", "key", "pr", "ji", "n", "si", "l", "jc", "v", "g", "it", "ja", "ie", "bj", "d", "y", "aj", "next", "u", "e", "o", "J", "js", "ii", "api", "qi", "p", "job", "b", "x", "z", "k", "ij", "ix", "q", "r"]}}
{"code": "\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n \\npublic class Main {    \\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        long n = Long.parseLong(sc.next());\\n        String[] list = new String[26];\\n        char temp = 'a';\\n        for(int i=0;i<26;i++){\\n            list[i] = String.valueOf(temp++);\\n        }\\n\\n        String ans = \"\";\\n        while(n>0){\\n            n--;\\n            int mod = (int) (n%26);\\n            ans +=list[mod];\\n            n/=26;\\n        }\\n        \\n        StringBuffer str =  new StringBuffer(ans);\\n        String s = str.reverse().toString();\\n        System.out.println(s);\\n    }\\n}", "target": "191", "substitutes": {"sc": ["ner", "ch", "osc", " Sc", "nc", "st", "cc", "bc", "asc", "pc", "exec", "ss", "sec", "server", "scope", "anc", "SC", "c", "scan", "cs", "sw", "cl", "uc", "reader", "spec", "Sc", "system", "sci", "cr", "src", "sf", "rc", "enc", "ci", "sp", " SC", "sch", "sh", "desc", "lc"], "n": ["nan", "ne", "none", "nc", "no", "nt", "number", "m", "non", "kn", "not", "l", "inn", "na", "left", "g", "t", "c", "num", "d", "network", "y", "sn", "rn", "ng", "adj", "e", "o", "j", "np", "cn", "dn", "p", "un", "b", "x", "ln", "nl", "ns", "en", "nb", "N", "pn", "len", "z", "k", "mn", "size", "nor", "nu", "init", "an", "nn", "fn"], "list": ["parse", "val", "lex", "listed", "name", "join", "string", "base", "L", "data", "out", "code", "index", "arr", "l", "null", "type", "cl", "chain", "plan", "array", "ls", "batch", "word", "lp", "www", "p", "x", "all", "tmp", "cas", "set", "LIST", "lists", "stuff", "test", "an", "la", "lc"], "temp": ["tem", " tmp", "orig", "wrap", "quote", " prefix", "prefix", "special", "stable", "unit", "zip", "null", "v", "oct", "empty", "emp", "Temp", "porary", "current", " temporary", " orig", "pack", "p", " Temp", "tmp", "mag", "partial", "fake", "pure", "perature", "tc", "test", "const", "flat", "multi", "ctrl", "clean"], "i": ["f", "li", "fi", "h", "I", "di", "cli", "gi", "m", "index", "ai", "si", "l", "ori", "ui", "phi", "v", "it", "c", "d", "y", "uri", "u", "pi", "e", "j", "o", "api", "ii", "qi", "p", "ti", "b", "x", "ind", "oi", "hi", "abi", "ini", "start", "z", "ci", "vis", "mi", "ip", "xi", "ix", "multi", "bi"], "ans": ["names", "ANS", "string", "ats", "ann", "aned", "anon", "news", "parts", "anas", "ons", "AN", "acts", "na", "anc", "aces", "ents", "cs", "can", "lan", "ls", "array", "nas", "ens", "aus", "anners", "as", "ns", "atan", "san", "cas", "ants", "acs", "os", "lists", "ks", "ings", "ins", "strings", "ana", "ras", "an", "ars", "ams", "aos"], "mod": ["tr", "lex", "div", "exp", "ang", "Mod", "MOD", "rem", "ctr", "id", "ver", "cod", "reg", "ok", "oct", "cl", "max", "pos", "dec", "aj", "spec", "cm", "add", "pack", "dc", "sub", "row", "ind", "mods", "rad", " Mod", "mode", "dir", "mn", "comb", "comp", "lib", "module", "od"], "str": ["f", "obj", "sta", "br", "tr", "ner", "div", "string", "data", "stri", "st", "in", "err", "fr", "arr", "l", "dr", "ss", "v", "c", "ar", "u", "js", "iter", "p", "sa", "STR", "strip", "cr", "sync", "ocr", "enc", "sr", "char", "sl", "sp", "strings", "rs", "cur", "vert", "Str", "r"], "s": ["f", "ts", "string", "st", "sb", "sv", "gs", "parts", "sg", "si", "l", "ss", "S", "g", "v", "t", "cs", "c", "se", "d", "y", "ls", "es", "u", "e", "ens", "o", "js", "p", "b", "ns", "en", "ps", "ws", "sl", "bs", "os", "ins", "ings", "strings", "ses", "outs", "r"]}}
{"code": "\\nimport java.util.InputMismatchException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\ttry {\\n\t\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\t\tint n = scanner.nextInt();\\n\\n\t\t\tlong[] a = new long[n+1];\\n\t\t\tfor (int i = 0; i < a.length; i++) {\\n\t\t\t\ta[i] = scanner.nextInt();\\n\t\t\t}\\n\\n\t\t\tlong[] b = new long[n];\\n\t\t\tfor (int i = 0; i < b.length; i++) {\\n\t\t\t\tb[i] = scanner.nextInt();\\n\t\t\t}\\n\\n\t\t\tMain citySavers = new Main();\\n\t\t\tSystem.out.println(citySavers.citySavers(a, b));\\n\\n\t\t\tscanner.close();\\n\\n\t\t} catch (InputMismatchException e) {\\n\t\t\t// TODO: handle exception\\n\t\t\tSystem.out.println(\"\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\");\\n\t\t}\\n\t}\\n\\n\\n\tpublic long citySavers(long[] a, long[] b) {\\n\t\tlong count = 0;\\n\\n\t\tfor (int i = 0; i < b.length; i++) {\\n\t\t\tif (a[i] >= b[i]) {\t\t\t\t\t//1\u3064\u76ee\u306e\u8857\u306e\u6575>\u5012\u305b\u308b\u6570\\n\t\t\t\tcount = count + b[i];\\n\t\t\t}else if (a[i+1] >= b[i] - a[i]){\t//1\u3064\u76ee\u306e\u8857\u306e\u6575+2\u3064\u76ee\u306e\u8857\u306e\u6575>\u5012\u305b\u308b\u6570\\n\t\t\t\tcount = count + b[i];\\n\t\t\t\ta[i+1] = a[i+1] + a[i] - b[i];\\n\t\t\t}else {\t\t\t\t\t\t\t\t//1\u3064\u76ee\u306e\u8857\u306e\u6575+2\u3064\u76ee\u306e\u8857\u306e\u6575<\u5012\u305b\u308b\u6570\\n\t\t\t\tcount = count + a[i] + a[i+1];\\n\t\t\t\ta[i+1] = 0;\\n\t\t\t}\\n\t\t}\\n\\n\t\treturn count;\\n\t}\\n\\n}\\n\\n", "target": "159", "substitutes": {"scanner": ["analyner", "parsener", "caner", "cann", "nercer", "nerning", " scancer", "Scanter", "parseinner", "Scanning", "scanener", "scann", "analyning", "Scanner", "plann", "Scaner", "planner", " scaner", "planer", "Scanener", "canener", "helener", "canwriter", "caninner", "Scanper", "canter", "scanter", " scanwriter", "analyer", "Scancer", "scanper", "canper", "Scaninner", "heler", "scancer", "parseer", "scanwriter", "canning", "Scann", "helper", "nerner", "scaninner", "scanning", "parsening", "scaner", "nerer", "helner", " scanning", "analywriter", "canner", "planter"], "n": ["f", "h", "ne", "name", "nc", "in", "no", "nt", "m", "l", "v", "t", "r", "c", "d", "num", "y", "network", "sn", "u", "e", "o", "j", "s", "p", "x", "ns", "nb", "en", "w", "sync", "N", "len", "z", "k", "size", "an", "nn", "net"], "a": ["sta", "ama", "am", "A", "ab", "ad", "aka", "ao", "ai", "l", "ac", "ea", "ba", "da", "area", "ca", "c", "aa", "asa", "d", "y", "aj", "array", "va", "u", "e", "o", "af", "aaa", "s", "sa", "as", "x", "p", "access", "w", "au", "ans", "ata", "art", "tta", "an", "ae", "ada", "alpha", "la"], "i": ["f", "eni", "li", "fi", "I", "di", "ri", "ni", "cli", "id", "gi", "m", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "t", "it", "c", "ie", "d", "y", "zi", "uri", "u", "e", "o", "j", "pi", "info", "ii", "ei", "qi", "p", "ti", "x", "oi", "hi", "w", "abi", "ini", "yi", "z", "ci", "mi", "ip", "xi", "iu", "init", "bi", "q", "r"], "b": ["bf", "pb", "br", "base", "sb", "db", "ab", "id", "bt", "binary", "object", "account", "not", "orb", "l", "B", "wb", "home", "ob", "ba", "fb", "emb", "c", "bar", "bin", "d", "y", "mb", "rb", "u", "e", "lb", "o", "batch", "pa", "bb", "s", "bi", "p", "boot", "nb", "cb", "ib", "bs", "bd", "other", "abb", "beta", "body", "lib", "eb", "bis"], "citySavers": ["cityInsvers", " citysaver", "citySvers", "citysvers", "cityInsaver", "cityShaver", "CitySaving", "citySnaver", "citySnaving", "CityScaving", "citySlvers", "CitySavers", "citySaver", "cityShivers", "cityScaver", "citySorters", "CitySaver", " citySivers", "citySlivers", " cityShaver", "citySaving", " citysorters", " citySaver", "cityCassavers", " citysavers", "cityInsorters", "citysavers", " cityShavers", "citySivers", " citysvers", "cityShaving", "cityShvers", " citySvers", "citySlavers", "CityScvers", "CityScaver", " cityShvers", "cityShavers", "citySnavers", "citySnvers", "cityScavers", "CitySvers", " citySorters", "cityScvers", "citySlaver", "cityInsavers", "cityScaving", "cityCassvers", "cityCassorters", "cityInsivers", "cityCassaver", "citysaver", "CityScavers", "citysorters", " cityShivers"]}}
{"code": "\\n\\nimport java.io.*;\\nimport java.math.BigInteger;\\nimport java.util.*;\\nimport java.util.Stack;\\n\\npublic class Main{\\n\tpublic static class FastReader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer root;\\n\t\t\\n \\n\t\tpublic FastReader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n \\n\t\tString next() {\\n\t\t\twhile (root == null || !root.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\troot = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (Exception r) {\\n\t\t\t\t\tr.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn root.nextToken();\\n\t\t}\\n \\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n \\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n \\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n \\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (Exception r) {\\n\t\t\t\tr.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t}\\n\t\\n\tpublic static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));\\n\tstatic int mod = (int) (1e9+7),n;\\n\tstatic long cf = 998244353;\\n    static final int MAX = (int) 1e6;\\n    public static List<Integer>[] edges;\\n    public static int[][] parent;\\n    public static int col = 20;\\n    public static long[] Bit;\\n    public static long[] fac,inv;\\n    public  static int[] prime; \\n    public static long[] dp;\\n\tpublic static FastReader sc = new FastReader();\\n\tpublic static void main(String[] args) {\\n\t//\tScanner sc = new Scanner(System.in);\\n \\n\t\tString s = sc.next();\\n\t\tswitch(s){\\n\t\t\tcase \"Sunny\" : out.print(\"Cloudy\"); break;\\n\t\t\tcase \"Cloudy\" : out.print(\"Rainy\"); break;\\n\t\t\tcase \"Rainy\" : out.print(\"Sunny\");\\n\t\t}\\n\t\tout.close();\\n\t}\\n\t\\n\t\\n}", "target": "60", "substitutes": {"br": ["obj", "tr", "ch", "div", "rt", "jp", "bh", "ler", "plug", "db", "err", "bl", "bro", "fr", "bc", "report", "pr", "io", "orb", "arr", "runner", "dr", "bel", "raf", "mr", "bar", "result", "buf", "er", "reader", "rb", "gr", "hr", "ur", "bb", "p", "b", "boot", "cr", "yr", "ocr", "ber", "box", "sr", "bot", "rot", "bolt", "ro", "nr", "BR", "browser", "lr", "bridge", "Br", "fb", "r", "rob"], "root": ["obj", "rec", "div", "tree", "name", "string", "round", "rt", "raw", "Root", "token", "db", "err", "id", "inner", "fr", "bc", "pr", "arr", "dr", "null", "ver", "server", "mr", "loader", "result", "type", "iterator", "wire", "er", "ree", "reader", "array", "ng", "owner", "re", "rb", "o", "url", "loc", "av", "p", "b", "row", "boot", "error", "src", "child", "rc", "box", "head", "util", "ro", "nr", "writer", "parser", "roots", "node", "right", "prev", "r"], "str": ["tr", "div", "exp", "inst", "string", "raw", "stri", "st", "in", "ctr", "err", "inner", "fr", "pr", "arr", "l", "text", "dr", "t", "rev", "c", "style", "doc", "result", "cl", "entry", "kr", "pos", "u", "gr", "url", "j", "hr", "iter", "s", "p", "status", "b", "x", "STR", "sr", "or", "char", "sl", "sp", "line", "dict", "Str", "r"], "out": ["obj", "name", "string", "raw", "data", "input", "in", "log", "err", "m", "session", "gz", "io", "report", "exec", "IN", "v", "t", "c", "write", "d", "bin", "OUT", "output", "ex", "o", "cache", "info", "p", "b", "x", "error", "file", "Out", "w", "println", "dump", "temp", "sp", "line", " in", "conn", "writer", "i", "outs"], "mod": ["nd", "mult", "dim", "Mod", "nc", "MOD", "version", "ctr", "id", "code", "m", "ver", "sec", "norm", "num", "d", "dec", "cm", "j", "depth", "dc", "M", "mods", " Mod", "mem", "mn", "module", "scale"], "n": ["f", "nm", "nc", "m", "l", "g", "t", "c", "num", "d", "u", "e", "o", "j", "np", "cn", "p", "b", "x", "ns", "nb", "w", "N", "nr", "k", "i", "nu", "r"], "cf": ["fc", "cal", "ul", "nc", "ef", "ctr", "ref", "cv", " gcc", " var", " cr", " CR", " CF", "gc", "CF", "cm", " dc", "dc", "fp", " const", "cr", "cb", " ce", "cap", "cp", "ec", "const", " cc"], "MAX": ["gen", "K", "X", "count", " Max", "Q", "ver", " max", "min", "cl", "num", "max", "dec", "seq", "ax", "F", "CL", "dc", "C", "cr", "var", "N", "Max", "mem", "CC", "MIN"], "edges": ["endedwards", "endedges", "edged", "Edged", "ledwards", "endedge", "ledged", "ledges", "edge", "Edge", "edwards", "ledge", "Edwards", "Edges", "endedged"], "parent": ["class", "shape", "div", "large", "id", "key", "count", "parents", "block", "g", "port", "type", "children", "Parent", "num", "max", "pos", "depth", "iter", "pid", "all", "child", "pool", "ip", "init", "node"], "col": ["val", "level", "dim", "co", "ol", "act", "column", "ref", "group", "ver", "block", "rel", "cat", "Col", "num", "pos", "seq", " Col", "loc", "row", "child", "sel", "grid", "pool", "ct", "coll", "COL"], "Bit": ["Mask", "exp", "Prime", "Bi", "nc", "free", "gc", "bin", "num", "abc", "Min", "bit", "bits", "nn", "Power", "flag", "Big", "mask", "Max", "mem", "util", "big", "Int", "init", "Fac", "bi", "net"], "fac": ["fi", "mult", "dim", "co", "complex", "lu", "circ", "ac", "quad", "con", "dat", "abc", "fre", "acc", "adj", "frac", "pack", "ig", "mask", "len", "real", "cap", "const", "cur", "gam", "Fac", "bi", "inf"], "inv": ["orig", "abs", "ev", "eff", "ov", "vs", "block", "sum", "quad", "rev", "cl", "tri", "le", "adj", "dev", "np", "V", "av", "len", "vis", "nr", "iq", "Inv", "ip", "nu", "init", "bi", "net"], "prime": ["rand", "primary", "tr", "exp", "div", "Prime", "dim", "shift", "pose", "seed", "sum", "tri", "pos", "use", "zero", "fix", "power", "pack", "depth", "Power", "sup", "mask", "pe", "real", "big", "init", "pri", "inf", "scale"], "dp": ["ep", "dim", "di", "dt", "dist", "dep", "drop", "tp", "dat", "duration", "port", "gp", "pkg", "dl", "np", "pid", "dc", "sup", "DP", "pp", "pm", "imp", "eps", "delay", "cp", "DC", "ip", "pad", "comp"], "sc": [" ch", "ch", " Sc", " scanner", " c", " scratch", " cr", " ss", "SC", " rc", "c", "rl", "cl", "rb", "gr", " src", "Sc", "cr", "src", " res", "rc", "sr", " SC", "sh", "rw", "rs", " sp", " scr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint n = Integer.parseInt(sc.next());\\n\t\tlong d = Integer.parseInt(sc.next());\\n\t\tlong[] x = new long[n];\\n\t\tlong[] y = new long[n];\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\tx[i]  = Integer.parseInt(sc.next());\\n\t\t\ty[i]  = Integer.parseInt(sc.next());\\n\t\t}\\n\t\tint sum = 0;\\n\t\tfor(int i =  0; i < n; i++) {\\n\t\t\tif(d*d >= x[i]*x[i] + y[i]*y[i]) {\\n\t\t\t\tsum++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t}\\n\\n\t\\n\t\\n}\\n\\n", "target": "42", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", " Sc", "nc", "sb", "sche", "cms", "cli", "cv", "cc", "bc", "esc", "asc", "pc", "l", "cam", "ss", "scope", "anc", "cus", "SC", "se", "c", "scan", "cs", "sw", "com", "ctx", "uc", "spec", "this", "str", "Sc", "system", "sub", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "sk", "sp", "ci", " SC", "sch", "sh", "parser", "ec", "tc", "squ", "coll", "sem", "lc"], "n": ["f", "nd", "h", "ne", "none", "in", "no", "nt", "count", "m", "number", "l", "g", "v", "t", "r", "c", "num", "network", "sn", "u", "e", "o", "j", "s", "dn", "p", "b", "all", "ns", "ln", "en", "nb", "sync", "w", "N", "len", "z", "k", "size", "conn", "nn", "net"], "d": ["f", "nd", "h", "div", "dim", "sd", "data", "di", "dt", "ad", "id", "m", "l", "g", "da", "v", "diff", "t", "D", "c", "dx", "u", "e", "j", "dy", "depth", "dn", "dc", "p", "s", "b", "ind", "w", "q", "dd", "z", "k", "ds", "a"], "x": ["f", "xy", "value", "cross", "h", "plus", "data", "xx", "one", "in", "X", "wx", "id", "m", "index", "l", "g", "v", "t", "c", "tx", "dx", "ax", "ex", "u", "e", "o", "j", "xs", "s", "ux", "p", "b", "w", "rx", "z", "work", "xi", "ix", "sex", "a"], "y": ["f", "yo", "h", "oy", "ey", "cy", "m", "zy", "sy", "l", "Y", "py", "g", "v", "t", "c", "vy", "ny", "yt", "ay", "u", "ry", "o", "j", "e", "dy", "ty", "p", "isy", "b", "asy", "w", "q", "yi", "ya", "z", "k", "yy", "ym", "a"], "i": ["f", "li", "fi", "h", "I", "is", "di", "ri", "ni", "cli", "gi", "id", "ik", "index", "ai", "io", "ji", "si", "l", "ui", "mu", "v", "it", "c", "ie", "uli", "zi", "uri", "u", "e", "pi", "j", "o", "info", "ii", "iii", "qi", "api", "ei", "ti", "hi", "s", "oi", "p", "b", "ini", "yi", "ci", "mi", "iu", "ip", "xi", "init", "isi", "ix", "chi", "multi", "bi", "a"], "sum": ["f", "div", "sort", "dim", "cal", "miss", "summary", "rate", "plus", "out", "di", "mass", "cum", "count", "index", "unit", "cost", "si", "total", "norm", "gram", "min", "diff", "sign", "result", "num", "max", "zero", "use", "dot", "weight", "add", "dev", "depth", "fat", "fee", "start", "hash", "scale", "sp", "size", "mean", "real", "us", "sh", "average", "spread", "cur", "loss", "alpha", "um", "vol", "what", "Sum"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tstatic long[][] A ;\\n\tstatic int N;\\n\tpublic static void main(String[] args) throws Exception {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString W = in.readLine();\\n\t\tN = Integer.parseInt(W);\\n\\n\\n\t\tA = new long[2][N];\\n\\n\t\tfor(int k=0;k<2;k++){\\n\t\t\tW = in.readLine();\\n\t\t\tString[] Ws = W.split(\" \");\\n\\n\t\t\tfor (int i = 0; i < Ws.length; i++) {\\n\\n\t\t\t\tA[k][i] = Long.parseLong(Ws[i]);\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(calc(0,0,0));\\n\\n\t}\\n\\n\tpublic static long calc(int i,int j,long sum){\\n\t\tif(i==1 && j==N-1){\\n\t\t\treturn sum+A[i][j];\\n\t\t}\\n\t\tif(i==1){\\n\t\t\treturn calc(i,j+1,sum+A[i][j]);\\n\t\t}else if(j==N-1){\\n\t\t\treturn calc(i+1,j,sum+A[i][j]);\\n\t\t}else{\\n\t\t\treturn Math.max(calc(i+1,j,sum+A[i][j]), calc(i,j+1,sum+A[i][j]));\\n\t\t}\\n\t}\\n\\n}\\n", "target": "140", "substitutes": {"A": ["G", "K", "I", "Z", "API", "P", "H", "B", "S", "Y", "As", "E", "D", "II", "W", "F", "V", "CA", "C", "T", "U", "M", "Ar", "Arg", "Array", "O", "a"], "N": ["K", "I", "L", "Z", "X", " n", "P", "NS", "H", "n", "S", "D", "II", "NL", "J", "F", "V", " B", "R", "NB", "NP", "T", "C", "M", "RN", "Ns", "O"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int Y = sc.nextInt();\\n        int res10000 = -1, res5000 = -1, res1000 = -1;\\n        for(int i = 0; i <= N; i++) {\\n            for(int j = 0; j + i <= N; j++) {\\n                int k = N - i - j;\\n                int total = 10000*i + 5000*j + 1000*k;\\n                if(total == Y) {\\n                    res10000 = i;\\n                    res5000 = j;\\n                    res1000 = k;\\n                }\\n            }\\n        }\\n        System.out.println(res10000 + \" \" + res5000 + \" \" + res1000);\\n    }\\n}\\n", "target": "133", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "cc", "bc", "esc", "asc", "pc", "ser", "exec", "ss", "server", "anc", "g", "ca", "SC", "se", "c", "scan", "cs", "sw", "uc", "cl", "com", "ctx", "acc", "Sc", "cus", "sq", "sci", "cr", "ocr", "sync", "rc", "cer", "soc", "sp", "ci", " SC", "sh", "ec", "tc", "cur", "sem", "lib", "lc"], "N": ["G", "K", "I", "L", "Z", "Size", "Ni", "X", "P", "Q", "NS", "H", "n", "S", "B", "E", "D", "NL", "J", "F", "V", "R", "NN", "C", "T", "U", "M", "NA", "Ne", "Num", "Ns", "NT", "O", "KN"], "Y": ["yo", "G", "K", "I", "L", "Z", "SK", "X", "YY", "Ni", "XY", "P", "Q", "Py", "H", "n", "S", "E", "D", "y", "W", "J", "PI", "V", "TY", "MY", "T", "C", "U", "M", "IP", "SIZE", "size", "XX", "NY", "O"], "res10000": ["rs1000", "resolution10000", "rest10000", "Res10000", "res500", " res200000", "rest6000", "rs500", "Res5000", "res8000", "resolution5000", "Res8000", "Res6000", "res6000", "re8000", "Res1000", "rest8000", " res8000", "re500", "re1000", "rs8000", "res200000", "Res200000", "resolution200000", "rest5000", "re10000", " res6000", "resolution1000", "rs10000", " res500"], "res5000": ["re4000", "RES5000", "res500", "resp6000", "pres6000", "re5000", "resp4000", "res2500", "Res5000", " res2500", "res8000", "resolution5000", "res4000", "ress6000", "Res8000", " res4000", "Res6000", "res6000", "re6000", "resolution500", "RES8000", "Res1000", "RES6000", "ress4000", " res8000", "re500", "resp2500", "RES1000", "resolution6000", "ress5000", " res6000", "pres5000", "pres4000", "ress2500", "pres500", "resp5000", "resolution4000"], "res1000": ["rows1000", "Res10000", "res500", "rows10000", " res500", "rest6000", "pres6000", "req10000", "pres10000", "Res5000", "req1000", " res2000", "res4000", "rest2000", " res4000", "Res6000", "res6000", "Res1000", "rest500", "pres2000", "pres1000", "rest1000", "rows5000", " res6000", "pres4000", "rows6000", "pres500", "req2000", "res2000", "req4000"], "i": ["f", "eni", "li", "I", "jp", "di", "in", "ik", "ni", "id", "gi", "m", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "phi", "v", "c", "ie", "d", "y", "zi", "uri", "u", "pi", "e", "o", "ii", "qi", "p", "ti", "b", "x", "oi", "ini", "z", "ci", "mi", "iu", "ip", "ij", "xi", "ix", "ki", "bi"], "j": ["f", "uj", "li", "eni", "jl", "jj", "jo", "I", "oj", "jp", "kj", "ni", "ijk", "key", "ji", "n", "si", "l", "dj", "ui", "jc", "v", "t", "ja", "c", "ie", "d", "y", "aj", "u", "e", "pi", "J", "js", "ii", "o", "qi", "p", "job", "b", "x", "ind", "z", "ci", "ij", "xi", "jet", "q"], "k": ["kid", "K", "ko", "ik", "key", "id", "m", "n", "ck", "v", "ok", "t", "c", "mk", "d", "y", "kr", "u", "e", "o", "p", "b", "x", "kk", "ak", "sk", "ka", "kat", "z", "kt", "ks", "ki", "ke", "dk", "q", "kw"], "total": ["valid", "ko", "normal", "token", "length", "count", "key", "mega", "product", "otal", "last", "sum", "meta", "ok", "t", "cat", "complete", "max", "shared", "ski", "info", " whole", "full", "auto", "current", "iter", "fat", "all", "partial", "part", "size", "Total", "flat", "alpha", "parent", "scale", "percent"]}}
{"code": "import java.util.Scanner;\\n\\npublic final class Main {\\n    public static void main(String[] args){\\n        Scanner stdIn = new Scanner(System.in);\\n        \\n        int n = stdIn.nextInt();\\n        int[] d = new int[n];\\n        for(int i=0; i<n; i++){\\n            d[i] = stdIn.nextInt();\\n        }\\n\\n        quick_sort(d, 0, d.length-1);\\n\\n        if(n%2 == 1){\\n            System.out.println(0);\\n        }else{\\n            System.out.println(d[n/2] - d[n/2-1]);\\n        }\\n    }\\n\\n    static void quick_sort(int[] d, int left, int right) {\\n        if (left>=right) {\\n            return;\\n        }\\n        int p = d[(left+right)/2];\\n        int l = left, r = right, tmp;\\n        while(l<=r) {\\n            while(d[l] < p) { l++; }\\n            while(d[r] > p) { r--; }\\n            if (l<=r) {\\n                tmp = d[l]; d[l] = d[r]; d[r] = tmp;\\n                l++; r--;\\n            }\\n        }\\n        quick_sort(d, left, r);  // \u30d4\u30dc\u30c3\u30c8\u3088\u308a\u5de6\u5074\u3092\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\\n        quick_sort(d, l, right); // \u30d4\u30dc\u30c3\u30c8\u3088\u308a\u53f3\u5074\u3092\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\\n    }\\n}", "target": "119", "substitutes": {"stdIn": ["sysOut", "stdin", "gradIn", " stdin", "sysIN", " stdIns", "adIng", "sysIn", "stdIng", "adin", "stOut", "gradOut", " stdOut", "stIn", "stdIns", "adIns", "stdIN", "gradin", " stdIng", "stIns", "stin", "stdOut", "adIn", "gradIng", " stdIN", "adIN", "sysin", "adOut"], "n": ["f", "ne", "none", "nc", "net", "in", "no", "nt", "length", "count", "m", "number", "v", "t", "c", "num", "y", "network", "sn", "u", "e", "o", "j", "np", "cn", "s", "b", "x", "all", "ns", "nl", "nb", "en", "w", "N", "len", "z", "k", "size", "conn", "nor", "nn", "fn", "q"], "d": ["cd", "f", "nd", "fd", "none", "sd", "data", "done", "di", "dt", "in", "db", "ad", "dos", "id", "m", "dr", "da", "v", "g", "diff", "t", "dat", "c", "D", "pd", "dp", "days", "dx", "wd", "dl", "dh", "mad", "y", "ids", "e", "did", "j", "u", "ld", "xd", "o", "dy", "dn", "dc", "s", "b", "x", "ind", "w", "start", "du", "dd", "md", "z", "k", "ded", "pad", "dict", "dom", "std", "ds", "a"], "i": ["f", "li", "h", "I", "di", "in", "ri", "ni", "id", "gi", "key", "index", "inner", "ai", "io", "si", "ui", "mu", "phi", "v", "min", "c", "ie", "y", "u", "e", "pi", "o", "j", "info", "ii", "qi", "ti", "b", "x", "oi", "slice", "ini", "start", "z", "ci", "mi", "ip", "iu", "xi", "init", "chi", "ix", "bi"], "left": ["f", "li", "list", "ner", "level", "lex", "ul", "L", "pl", "length", "id", "m", "inner", "local", "low", "last", "min", "v", "ll", "Left", "c", "cl", "kl", "small", "pos", "dl", "le", "e", "url", "lo", "position", "loc", "ell", "full", "b", "x", "all", "nl", "ln", "w", "front", "z", "size", "fl", "lr", "old", "lc", "el", "a"], "right": ["none", "rt", "one", "range", "length", "rights", "three", "reverse", "patch", "rel", "rest", "end", "c", "max", "red", "rew", "re", "ra", "ry", "R", "b", "x", "row", "rh", "third", "w", "rc", "res", "Right", "th", "rx", "ro", "root", "k", "rd", "rw", "rank", "q"], "p": ["f", "h", "wp", "jp", "pl", "P", "pr", "pc", "pre", "tp", "v", "t", "c", "y", "per", "pos", "ar", "pa", "u", "pi", "e", "pt", "np", "api", "lp", "fp", "b", "x", "w", "ps", "pe", "po", "pp", "sp", "cp", "ip", "pad"], "l": ["f", "li", "h", "ul", "L", "ol", "pl", "bl", "m", "pr", "g", "ll", "v", "rel", "c", "rl", "cl", "kl", "y", "ar", "dl", "ls", "le", "u", "e", "o", "lb", "url", "ur", "j", "s", "lp", "b", "al", "ln", "nl", "x", "w", "hl", "sl", "z", "k", "fl", "lr", "la", "lc", "el"], "r": ["f", "tr", "h", "br", "rt", "rg", "range", "err", "m", "fr", "pr", "dr", "v", "mr", "rel", "t", "c", "er", "ar", "re", "rb", "u", "hr", "e", "j", "ur", "R", "b", "ru", "rh", "row", "cr", "x", "w", "rc", "res", "sr", "or", "rr", "ro", "nr", "rf", "k", "rd", "rw", "cur", "rs", "lr", "pair", "ir"], "tmp": ["li", "obj", "wp", "jp", "padding", "st", "pl", "err", "cop", "proc", "m", "pre", "tp", "v", "phi", "t", "mp", "pos", "pkg", "ppo", "txt", "rb", "j", "np", "lp", "offset", "b", "x", "fp", "amp", "sup", "var", "po", "pp", "front", "ptr", "temp", "sp", "part", "vt", "cp", "stuff", "pixel", "pad", "cmp", "prev", "ppa"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayDeque;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tArrayDeque<Task> q = new ArrayDeque<Task>();\\n\t\tArrayDeque<Task> ans = new ArrayDeque<Task>();\\n\t\t\\n\t\ttry {\\n\t\t\tString[] param = in.readLine().split(\" \");\\n\t\t\tint lim = Integer.parseInt(param[0]);\\n\t\t\tint time = Integer.parseInt(param[1]);\\n\t\t\t\\n\t\t\tfor (int i = 0; i < lim; i++) {\\n\t\t\t\tparam = in.readLine().split(\" \");\\n\t\t\t\t\\n\t\t\t\tTask t = new Task(Integer.parseInt(param[1]), param[0]);\\n\t\t\t\tq.add(t);\\n\t\t\t}\\n\t\t\t\\n\t\t\tint past = 0;\\n\t\t\twhile (q.isEmpty() == false) {\\n\t\t\t\tTask tmp = q.remove();\\n\t\t\t\tboolean flag = tmp.minusTime(time);\\n\t\t\t\t\\n\t\t\t\tif (flag == true) {\\n\t\t\t\t\tpast = past + tmp.getTIme() + time;\\n\t\t\t\t\tans.add(new Task(past, tmp.getName()));\\n\t\t\t\t} else {\\n\t\t\t\t\tpast = past + time;\\n\t\t\t\t\tq.add(tmp);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t\\n\t\t\twhile (ans.isEmpty() == false) {\\n\t\t\t\tTask tmp = ans.remove();\\n\t\t\t\tSystem.out.println(tmp.getName() + \" \" + tmp.getTIme());\\n\t\t\t}\\n\t\t} catch (NumberFormatException e) {\\n\t\t\t// TODO Auto-generated catch block\\n\t\t\te.printStackTrace();\\n\t\t} catch (IOException e) {\\n\t\t\t// TODO Auto-generated catch block\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t}\\n}\\n\\nclass Task {\\n\tprivate int time;\\n\tprivate String name;\\n\t\\n\tpublic Task(int t, String n) {\\n\t\ttime = t;\\n\t\tname = n;\\n\t}\\n\t\\n\tpublic int getTIme() {\\n\t\treturn time;\\n\t}\\n\t\\n\tpublic String getName() {\\n\t\treturn name;\\n\t}\\n\t\\n\tpublic boolean minusTime(int t) {\\n\t\ttime = time - t;\\n\t\tif (time <= 0) return true;\\n\t\treturn false;\\n\t}\\n}", "target": "231", "substitutes": {"in": ["f", "h", "plus", "data", "is", "input", "out", "lin", "log", "err", "din", "id", "thin", "inner", "socket", "image", "io", "nin", "l", "IN", "inn", "by", "fac", "fin", "it", "c", "bin", "er", "reader", "kin", "resource", "inc", "read", "buffer", "ex", "source", "e", "user", "inside", "url", "s", "as", "b", "ic", "file", "ini", "login", "win", "again", "or", "line", "stream", "ins", "connection", "init", "In", "a", "r"], "q": ["h", "ch", "quer", "id", "Q", "quest", "ues", "quick", "l", "ck", "que", "ue", "queue", "g", "v", "quad", "c", "bug", "cl", "y", "query", "request", "quit", "req", "batch", "u", "e", "question", "qs", "qi", "s", "sq", "p", "x", "dq", "qq", "qu", "view", "ques", "z", "k", "work", "qa", "requ", "iq", "sh", "qt", "check", "a"], "ans": ["ations", "ANS", "Ann", "asses", "rans", "ats", "ann", "oss", "ands", "aned", "aid", "anon", "ays", "anas", "ani", "ys", "ons", "ant", "amps", "AN", "na", "anc", "aos", "ents", "ads", "aning", "asa", "can", "lan", "anan", "ions", "nas", "ens", "addons", "aus", "als", "s", "as", "atan", "An", "ns", "ants", "ps", "sk", "mos", "acs", "asin", "ins", "ks", "ana", "ras", "an", "ians", "a", "ars", "ams", "ips", "ds"], "param": ["channel", "comment", "arg", "name", "path", "string", "am", "prefix", "command", "key", "number", "m", "params", "config", "image", "par", "option", "prom", "pin", "unit", "block", "month", "Parameter", "nam", "mor", "type", "page", "model", "ram", "cm", "source", "aram", "info", "url", "item", "mm", "pound", "point", "member", "p", "job", "link", "amp", "error", "problem", "var", "meter", "pm", "atom", "temp", "sp", "part", "cp", "conn", "ip", "arm", "pri", "connection", "Param", "pair", "sex", "tag", "mark", "argument"], "lim": ["li", "dim", "mini", "lam", "lin", "log", "cli", "live", "limit", "zip", "mind", "loop", "com", "cl", "ms", "info", "url", "lo", "limited", "loc", "iter", "mm", "hi", "slice", "coord", "len", "im", "win", "inv", "mem", "delay", "wa", "mi", "comb", "tim", "lock", "la", "scale"], "time": ["value", "content", "h", "name", "times", "rate", "one", "clock", "length", "trial", "id", "count", "m", "timeout", "cost", "step", "timer", "home", "ice", "duration", "type", "money", "TIME", "hour", "ime", "how", "cycle", "weight", "event", "info", "power", "once", "Time", "age", "depth", "loc", "year", "x", "tick", "speed", "start", "history", "im", "mode", "sleep", "delay", "size", "ip", "stuff", "tim", "ix", "scale"], "i": ["f", "li", "fi", "I", "vi", "is", "di", "ri", "id", "gi", "index", "ai", "ji", "n", "si", "ori", "ui", "v", "it", "ie", "y", "uli", "uri", "u", "pi", "o", "j", "info", "ii", "qi", "p", "hi", "b", "x", "oi", "ini", "start", "ci", "mi", "iu", "ip", "xi", "init", "chi", "multi"], "t": ["f", "name", "worker", "template", "unt", "out", "task", "id", "m", "object", "n", "ant", "l", "te", "tp", "v", "c", "type", "att", "d", "y", "u", "e", "o", "j", "target", "p", "b", "x", "T", "w", "bot", "temp", "z", "k", "test", "a", "tf", "r"], "past": ["before", "pause", "exp", "today", "shape", "path", "worker", "recent", "off", "birth", "care", "post", "remote", "home", "last", "loop", "rest", "port", "ctx", "style", "future", "great", "project", "max", "present", "aste", "complete", "then", "next", "progress", "pull", "pick", "show", "once", "stage", "Past", "current", "ape", "full", "travel", "paste", "missing", "start", "front", "history", "win", "ping", "ago", "sleep", "maybe", "delay", "pai", "period", "gap", "test", "pri", "away", "cast", "feat", "now", "prev", "old", "later", "parent"], "tmp": ["f", "name", "err", "m", "upload", "app", "c", "ctx", "mp", "txt", "rb", "img", "api", "sup", "bot", "atom", "temp", "cp", "stuff", "mmm", "tm", "now", "wp", "cop", "timer", "diff", "ff", "pkg", "cache", "j", "emp", "fp", "kk", "sp", "part", "test", "storage", "cmp", "class", "client", "sam", "template", "jp", "st", "proc", "piece", "tp", "tab", "bp", "dat", "next", "e", "pot", "p", "job", "slice", "tom", "po", "ott", "ppa", "machine", "obj", "pb", "inst", "data", "task", "bt", "config", "object", "exc", "v", "result", "project", "np", "amp", "manager", "nb", "start", "front", "pp", "cpp", "pad", "perm", "qt", "prev", "appy", "tf"], "flag": ["f", "valid", "band", "leaf", "arg", "land", "ish", "log", " lag", "group", "Flag", "count", "id", "lag", "ant", "wait", "type", "style", "bug", "cat", " Flag", "bit", "fun", "age", "af", "flags", "affle", "year", "p", "status", "offset", "bag", "ag", "sync", "file", "blog", " flags", "start", "op", "char", "part", "guard", "FLAG", "fl", "pad", "feature", "tag", "force"]}}
{"code": "\\n//implement the sieve of eratos\\nimport java.util.Scanner;\\n\\n\\n//we will use the filter method to construct the prime table from 1 to n\\n\\n\\npublic class Main {\\n\t//we can thus use binary search to check whether i is in the table\\n\tstatic final int N = 100000000;\\n\t\\n\t\\n\t\\n\t// this is no good for java, so slow\\n\tpublic static boolean[] eratos(int n){\\n\t\t// the original value should be false\\n\t\tboolean [] table = new boolean[n+1];\\n\t\t\\n\t\ttable[0] = table[1] = true;\\n\t\t\\n\t\tint k = (int)Math.sqrt(n);\\n\t\tfor(int i = 2; i <= k; i++) {\\n\t\t\tif(!table[i]) {\\n\t\t\t\tfor(int j = 2*i; j <= n; j+=i) {\\n\t\t\t\t\ttable[j] = true;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\treturn table;\\n\t}\\n\t\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tScanner cin = new Scanner(System.in);\\n\t\tboolean[] table = eratos(N);\\n\t\t\\n\t\tint len = cin.nextInt();\\n\t\tint count = 0;\\n\\n\t\t\\n\t\twhile(len > 0) {\\n\t\t\tcount += (!table[cin.nextInt()])? 1:0;\\n\t\t\tlen--;\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n\\n\\n}", "target": "226", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.*;\\nimport java.util.*;\\nimport java.util.ArrayList;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.Collections;\\nimport java.util.Arrays;\\n\\npublic class Main {\\n\tpublic static void main(final String[] args){\\n    \\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    int c = sc.nextInt();\\n    //int x = sc.nextInt();\\n    List<String> list = new ArrayList<>();\\n    int count = 0;\\n\\n    if(b + c - a <= 0){\\n        System.out.println(0);\\n    }else{\\n        System.out.println(b + c - a);\\n    }\\n  \\n\\n    \\n\\n\\n    \\n\\n\\n    \\n\\n    \\n    \\n    \\n\\n\\n\\n    \\n\\n\\n\\n\\n\\n}\\n}", "target": "45", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "fc", " Sc", "nc", "console", "sche", "sb", "cv", "esc", "bc", "cc", "asc", "pc", "si", "ss", "scope", "ca", "SC", "scan", "cs", "sw", "se", "cus", "uc", "ctx", "cl", "Sc", "system", "sq", "dc", "sci", "cr", "src", "sf", "rc", "cer", "sr", "soc", "ci", " SC", "parser", "cur", "lc"], "a": ["f", "h", "name", "A", "ab", "code", "m", "index", "n", "ac", "ba", "da", "ca", "area", "aa", "d", "va", "o", "p", "sa", "x", "as", "ka", "i", "ae"], "b": ["f", "h", "base", "sb", "db", "ab", "n", "l", "B", "ba", "v", "aa", "d", "rb", "u", "e", "o", "j", "bb", "p", "x", "ib", "i", "eb", "r"], "c": ["f", "cd", "h", "fc", "m", "cc", "n", "l", "ac", "g", "v", "ca", "d", "u", "e", "o", "p", "C", "cr", "cb", "w", "z", "ci", "ec", "ae", "q", "r"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt(); //\u53c2\u52a0\u8005N\u4eba\\n    int K = sc.nextInt(); //\u521d\u671f\u30dd\u30a4\u30f3\u30c8K\u70b9\\n    int Q = sc.nextInt(); //Q\u56de\u306e\u30dd\u30a4\u30f3\u30c8\u5909\u52d5\\n    int[] a = new int[Q];\\n    int[] b = new int[N];\\n    \\n    for(int i=0;i<Q;i++){\\n      a[i] = sc.nextInt();\\n      b[a[i]-1] += 1;\\n    }\\n    for(int j=0;j<N;j++){\\n      if(b[j]>Q-K){\\n        System.out.println(\"Yes\");\\n      }else{\\n        System.out.println(\"No\");\\n      }\\n    }\\n  }\\n}", "target": "102", "substitutes": {"sc": ["class", "osc", " Sc", "nc", "sche", "proc", "esc", "bc", "cc", "pc", "l", "exec", "ss", "sec", "scope", "app", "SC", "se", "c", "scan", "cs", "cl", "uc", "acc", "Sc", "system", "sub", "sci", "all", "cr", "ocr", "sf", "sync", "rc", "src", "soc", "ws", "sl", "set", "sp", "ci", " SC", "ec", "tc"], "N": ["G", " M", "K", "I", "L", "Z", " D", "A", "X", " n", "P", "Q", "NS", "n", "S", "B", "D", "NL", " C", "J", "F", "V", "R", "NN", "T", "C", "M", "O"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String args[]) {\\n        Scanner s=new Scanner(System.in);\\n        int n=s.nextInt();\\n        long ans=0;\\n        int prev=s.nextInt();\\n        for(int i=1;i<n;i++){\\n            int ele=s.nextInt();\\n            if(ele<prev){\\n                ans+=prev-ele;\\n            }\\n            else{\\n                prev=ele;\\n            }\\n        }\\n\\n        System.out.print(ans);\\n    }\\n}", "target": "202", "substitutes": {"s": ["http", "ts", "is", "abs", "sb", "in", "ssl", "gs", "south", "si", "l", "service", "S", "ss", "v", "ches", "se", "er", "d", "ms", "ls", "fts", "es", "e", "o", "qs", "xs", "services", "as", "p", "b", "stats", "ns", "sf", "sync", "utils", "ws", "sl", "os", "ins", "parser", "ses", "rs", "strings", "fs", "ds", "bis"], "n": ["f", "h", "ner", "ne", "nc", "nt", "ni", "m", "l", "c", "num", "d", "y", "sn", "ny", "u", "o", "j", "p", "b", "x", "ns", "nl", "en", "nb", "N", "len", "z", "k", "mn", "conn", "nn", "a", "net"], "ans": ["nan", "cons", "ANS", "vals", "yrs", "ats", "ann", "aned", "anon", "vs", "ons", "amps", "na", "anc", "cs", "ents", "rows", "scan", "errors", "lan", "ls", "es", "ions", "ids", "nas", "ens", "aus", "xs", "offs", "blocks", "books", "ns", "olds", "cas", "ants", "ares", "res", "vers", "len", "eps", "os", "anes", "ins", "ks", "ras", "an", "ars", "ds", "ana", "span"], "prev": ["ep", "before", "val", "skip", "orig", "iv", "upper", "id", "keep", "code", "seed", "latest", "par", "ver", "reverse", "initial", "pre", "order", "last", "v", "rel", "original", "rev", "pres", "r", "first", "num", "vious", "nav", "per", "zero", "seq", "next", "max", "counter", "loc", "iter", "current", "p", "var", "start", "history", "op", "eno", "root", "ip", "init", "cur", "cmp", "old", "parent", "Prev"], "i": ["f", "eni", "li", "h", "I", "di", "in", "ri", "ni", "ami", "gi", "ai", "ani", "ji", "si", "ui", "ie", "zi", "uri", "u", "e", "o", "j", "pi", "info", "ii", "qi", "p", "ti", "hi", "oi", "x", "ini", "ci", "iu", "ip", "uni", "xi", "init", "chi", "ix", "multi", "bi"], "ele": ["li", "ple", "yle", "kid", "ne", "sle", "nil", "ffe", "ler", "element", "me", "ni", "inel", "Ele", "ee", "ule", "si", "ole", "ity", "aa", "ie", "eline", "fe", "wl", "vec", "elo", "seq", "oe", "tile", "next", "lane", "le", "e", "ell", "elle", "iter", "ale", "eu", "letter", "lem", "verse", "sel", "pe", "len", "sol", "eno", "sl", " ce", "char", "uni", "isi", "cur", "yy", "oodle", "coll", "la", "el", "ite"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n  public static void main(String[] args){\\n\t  Scanner scan = new Scanner(System.in);\\n\t  int ac = 0;\\n\t  int wa = 0;\\n\t  int tle = 0;\\n\t  int re = 0;\\n\t  int num = scan.nextInt();\\n\t   String test = \"\";\\n\t  for(int i=0;i<num+1;i++) {\\n\t\t  test = scan.nextLine();\\n\t\t  if (test.equals(\"AC\")) {\\n\t\t\t  ac++; \\n\t\t  }\\n\t\t  if (test.equals(\"WA\")) {\\n\t\t\t  wa++;\\n\t\t  }\\n\t\t  if (test.equals(\"TLE\")) {\\n\t\t\t  tle++;\\n\t\t  }\\n\t\t  if (test.equals(\"RE\")) {\\n\t\t\t  re++;\\n\t\t  }\\n\t  }\\n\t  \\n\t  System.out.println(\\n\t\t\t  \"AC x \" + ac+\\n\t\t\t  \"\\nWA x \" + wa+\\n\t\t\t  \"\\nTLE x \"+ tle+\\n\t\t\t  \"\\nRE x \" + re);\\n  }\\n}", "target": "160", "substitutes": {"scan": ["gen", "parse", "stat", "ner", "skip", "base", "ann", "watch", " scanner", "out", "in", "fan", "pan", "search", "pin", "ignore", "io", "report", "n", "l", "na", "server", "con", "se", "er", "can", "reader", "plan", "query", "kin", "read", "ry", "die", "spin", "connect", "iter", "system", "all", "Scan", "nl", "en", "san", "sync", "row", "sin", "slice", "pass", "or", "sc", "util", "sys", "an", "nn", "run", "sign", "span"], "ac": ["acl", "auc", "mc", "am", "ga", "ab", "ad", "ack", "cc", "ai", "asc", "pc", "mac", "cca", "rac", "ase", "aci", "ass", "anc", "ach", "app", "fac", "ca", "c", "asa", "uc", "abc", "aut", "ax", "acc", "ace", "ay", "cache", "af", "lat", "as", "sa", "AC", "pac", "ic", "cas", "au", "ak", "oc", "cu", "acs", "Ac", "alpha"], "wa": ["sha", "ga", "oa", "ma", "wx", "wave", "wt", "Wa", "lambda", "na", "aw", "da", "wait", "ca", "area", "ww", "aa", "ja", "sw", "WA", "va", "pa", "hi", "sa", "wal", "za", "ha", "w", "au", "awa", "ya", "ws", "aha", "qa", "ta", "sem", "la", "wake", "wo"], "tle": ["li", "tie", "ele", "sle", "ul", "rice", "vale", "ee", "thro", "local", "lease", "ule", "l", "ole", "ase", "te", "rel", "rl", "rue", "sole", "oe", "tile", "le", "e", "late", "team", "loc", "ale", "tl", "nl", "sel", "pe", "tan", "les", "len", "ta", "tta", "la", "bole", "el", "scale"], "re": ["release", "RE", "ren", "rec", "gre", "are", "range", "ri", "ref", "replace", "ere", "ire", "cre", "remote", "reg", "pre", "race", "rel", "rev", "resource", "le", "e", "ry", "ruby", "record", "ru", "reb", "bre", "ber", "res", "pe", "ro", "real", "rule", "Re", "be", "spe", "r"], "num": ["f", "valid", "gen", "mult", "dim", "ul", "grade", "range", "no", "nine", "ni", "number", "index", "unit", "n", "sum", "con", "end", "max", "pos", "zero", "inc", "loc", "iter", "un", "b", "en", "nb", "Num", "four", "len", "mut", "col", "nr", "part", "umi", "uni", "init", "multi", "um"], "test": ["value", "class", "valid", "val", "list", "tested", "exp", "name", "cross", "path", "string", "tr", "fit", "pattern", "fail", "match", "err", "trial", "testing", "search", "code", "key", "pl", "report", "pr", "ver", "message", "rep", "est", "server", "app", "t", "rest", "it", "type", "result", "style", "model", "tri", "feed", "spec", "txt", "fix", "read", "use", "str", "info", "show", "script", "stage", "repl", "iter", "pack", "pass", "tests", "true", "set", "temp", "fast", "rule", "Test", "get", "check", "lab", "train", "sign"], "i": ["eni", "li", "fi", "I", "vi", "di", "in", "ri", "ni", "gi", "ai", "io", "ji", "si", "ori", "ui", "mu", "phi", "adi", "zi", "uri", "pi", "u", "j", "ii", "qi", "p", "ti", "b", "x", "hi", "abi", "ini", "ci", "mi", "iu", "ip", "uni", "xi", "chi", "multi", "bi"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\\n        \\n        String[] input = br.readLine().split(\" \");\\n        int n = Integer.parseInt(input[0]);\\n        int a = Integer.parseInt(input[1]);\\n        int b = Integer.parseInt(input[2]);\\n        \\n        out.println(Math.min(a * n, b));\\n        out.close();\\n        \\n    }\\n}", "target": "213", "substitutes": {"br": ["obj", "tr", "ner", "div", "keeper", "abs", "bh", "in", "ler", "bl", "err", "bro", "fr", "io", "arr", "dr", "mr", "buf", "er", "reader", "rb", "gr", "hr", "str", "img", "bb", "iter", "HR", "cr", "yr", "cb", "ocr", "ber", "sr", "jar", "stream", "BR", "bridge", "browser", "ibr", "Br", "r"], "out": ["obj", "list", "client", "string", "console", "prefix", "in", "log", "err", "code", "inner", "io", "report", "window", "exec", "process", "IN", "up", "print", "loader", "c", "page", "write", "bin", "OUT", "ext", "output", "buffer", "ex", "o", "str", "to", "s", "flush", "p", "x", "error", "Out", "w", "file", "println", "pool", "again", "temp", "line", "conn", "writer", "outer", "png", "outs", "browser", "socket"], "input": ["parse", "list", "comment", "string", "plus", "data", "format", "Input", "act", "element", "context", "in", "column", "id", "image", "json", "inner", "unknown", "integer", "not", "split", "text", "null", "step", "address", "type", "form", "cat", "bin", "entry", "feed", "array", "request", "inc", "output", "source", "pull", "digit", "word", "add", "img", "load", "url", "iter", "error", "include", "char", "op", "header", "ip", "i", "inf", "argument"], "n": ["f", "in", "ab", "nt", "count", "number", "l", "v", "t", "c", "aa", "d", "num", "u", "e", "o", "j", "s", "p", "x", "ns", "ln", "en", "nb", "w", "N", "z", "k", "i", "an", "nn", "r"], "a": ["f", "sha", "sta", "ama", "ga", "A", "ab", "ad", "oa", "ma", "ea", "ac", "na", "ba", "da", "area", "ca", "c", "aa", "asa", "d", "y", "va", "u", "e", "pa", "auto", "fa", "p", "sa", "as", "ia", "qa", "ana", "i", "an", "ae", "alpha", "la"], "b": ["f", "bf", "h", "sb", "ab", "ad", "number", "l", "B", "wb", "ba", "v", "g", "c", "aa", "d", "y", "abc", "mb", "rb", "pa", "e", "o", "j", "lb", "bb", "s", "p", "x", "nb", "cb", "ib", "z", "bs", "k", "i", "abb", "bi", "eb", "r"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\nimport java.util.Scanner;\\nimport java.util.stream.IntStream;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString S = sc.next();\\n\t\tString T = sc.next();\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tString U = sc.next();\\n\\n\t\tif (S.equals(U)) {\\n\t\t\tSystem.out.print(A - 1 + \" \" + B);\\n\t\t} else {\\n\t\t\tSystem.out.print(A + \" \" + (B - 1));\\n\t\t}\\n\t}\\n}", "target": "155", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "exp", "nc", "console", "sche", "sb", "cle", "cli", "core", "search", "cv", "esc", "bc", "cc", "asc", "pc", "cam", "ss", "scope", "cus", "SC", "se", "scan", "c", "cs", "sw", "uc", "cl", "reader", "ctx", "can", "screen", "cor", "this", "Sc", "system", "sq", "sub", "irc", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "soc", "sp", "ct", "sch", "parser", "cur", "coll", "ser", "lc"], "S": ["G", "SA", "K", "I", "L", "Z", "AS", "SK", "X", "P", "NS", "SN", "H", "Y", "SC", "D", "E", "ST", "SL", "F", "V", "s", "R", "C", "SS", "TS", "N", "M", "SU", "SR", "SP", "SI", "O"], "T": ["G", "K", "L", "Z", "X", "P", "TT", "Type", "Y", "t", "E", "D", "TB", "W", "F", "V", "R", "_", "C", "TS", "M", "N", "Text", "NT", "O"], "A": ["AW", "SA", "Start", "I", "AA", "Java", "AS", "PA", "X", "API", "AD", "TA", "P", "HA", "Y", "AB", "As", "IA", "GA", "Ab", "AP", "AI", "Offset", "Ma", "Area", "At", "CA", "Ca", "AC", "An", "Alpha", "AM", "NA", "Part", "AR", "LA", "Array", "Na", "a", "ID"], "B": ["QB", "G", "Tab", "I", "Bi", "L", "BB", "DB", "BF", "P", "GB", "Y", "AB", "UB", "E", "D", "BE", "Ab", "PB", "AP", "W", "SB", "BI", "LB", "F", "BA", "V", "BL", "NB", "b", "R", "C", "Base", "M", "N", "WB", "Bs", "BC", "Number", "O", "OB"], "U": ["G", "UV", "LT", "K", "I", "UR", "L", "UD", "X", "TA", "P", "TT", "H", "UI", "URI", "IV", "Y", "UL", "UT", "UB", "PU", "E", "D", "ST", " u", "u", "Tu", "Unit", "F", "V", "TC", "R", "C", "TS", "UID", "M", "N", "SU", "UP", "MU", "CU", "US", "O"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String [] commandLineArgument){\\n\\n        Scanner input = new Scanner(System.in);\\n        int n = input.nextInt() , m = input.nextInt();\\n        int answer = (m * (m - 1))/2;\\n        answer += (n * (n - 1))/2;\\n        System.out.println(answer);\\n        input.close();\\n\\n    }\\n\\n}\\n\\n", "target": "49", "substitutes": {"commandLineArgument": ["commandLineArguments", "commandLineParamService", "commandFileAruments", "commandFileArgArg", "commandFileArgService", "commandLineArService", "commandLineArument", "commandLineGArg", "commandFileArArg", "commandLineAruments", "commandLineArgArg", "commandFileArguments", "commandFileArument", "commandFileArService", "commandLineParamuments", "commandLineArgService", "commandLineGument", "commandLineGService", "commandLineArArg", "commandLineGuments", "commandFileArgument", "commandLineParamument", "commandLineParamArg"], "input": ["f", "php", "list", "client", "regular", "http", "raw", "pattern", "out", "Input", "in", "medium", "context", "ssl", "element", "image", "inner", "kernel", "session", "io", "flow", "object", "text", "upload", "exec", "server", "c", "result", "iterator", "forward", "reader", "method", "request", "query", "feed", "next", "output", "source", "event", "pull", "this", "str", "inside", "inc", "buffer", "analysis", "iter", "audio", "error", "reading", "file", "magic", "temp", "stream", "writer", "i", "parser", "connection", "accept", "inf", "socket"], "n": ["nm", "f", "nc", "in", "no", "number", "l", "v", "c", "d", "y", "network", "u", "o", "j", "dn", "s", "p", "un", "b", "x", "ns", "nb", "en", "w", "N", "M", "q", "z", "k", "mn", "i", "nn", "a", "r"], "m": ["f", "nm", "h", "wm", "in", "mx", "man", "l", "mu", "v", "c", "d", "ms", "y", "cm", "u", "e", "o", "j", "mm", "s", "p", "b", "x", "mo", "w", "N", "M", "pm", "md", "z", "size", "mn", "mi", "k", "i", "an", "a", "r"], "answer": ["value", "equ", "example", "sort", "grade", "lynn", "issue", "image", "number", " answers", "score", "message", "address", "say", "order", "area", "result", "empty", "update", "query", "array", "mix", "next", "Answer", "cm", "imate", "output", "word", "o", "cache", "question", "reply", "ell", "audio", "p", "offset", "error", "approximately", "answered", "response", "knowledge", "size", "average", "oodle", "a"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint X = sc.nextInt();\\n\t\tint Y = sc.nextInt();\\n\t\tint Z = sc.nextInt();\\n\\n\t\tif(X>=Y) {\\n\t\t\tif(X>=Z) {\\n\t\t\t\tSystem.out.println(Y+Z);\\n\t\t\t}else {\\n\t\t\t\tSystem.out.println(X+Y);\\n\t\t\t}\\n\t\t}else {\\n\t\t\tif(Y>=Z) {\\n\t\t\t\tSystem.out.println(X+Z);\\n\t\t\t}else {\\n\t\t\t\tSystem.out.println(X+Y);\\n\t\t\t}\\n\t\t}\\n\t}\\n}\\n", "target": "89", "substitutes": {"sc": ["class", "osc", "ch", "cont", " Sc", "nc", "sb", "sche", "cv", "cc", "esc", "bc", "asc", "pc", "ss", "sec", "anc", "scope", "cus", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "ca", "acc", "cor", "Sc", "sq", "sci", "cr", "ocr", "sf", "sync", "rc", "cer", "src", "soc", "sk", "sl", "sp", " SC", "sch", "sh", "ec", "tc", "cur", "desc", "sem", "lc", " scr"], "X": ["DX", "EL", "K", "Length", "I", "ZX", "L", "XL", "XM", "PH", "TX", "A", "File", "YY", "XY", "P", "Q", "H", "UX", "S", "FF", "E", "D", "Left", "Ex", "EX", "Offset", "W", "J", "F", "CL", "XP", "Cell", "V", "IX", "R", "x", "MY", "AC", "C", "T", "U", "IP", "N", "M", "SE", "XXX", "Right", "CE", "Int", "XX", "PE", "AX", "TH", "O", "ID"], "Y": ["DX", "HY", "G", "Az", "K", "I", "YN", "L", "TX", "A", "My", "YY", "XY", "EY", "P", "Q", "ZZ", "Py", "H", "CH", "B", "S", "SH", "FY", "E", "D", "y", "CI", "OD", "W", "YA", "J", "Zip", "Ch", "F", "V", "TY", "IX", "MY", "IE", "Location", "T", "LL", "Co", "N", "M", "SE", "ZE", "Zone", "IP", "SY", "Cy", "XX", "AY", "NY", "O", "ID"], "Z": ["G", "K", "ZX", "Az", "I", "L", "ZA", "Size", "Zero", "FL", "YY", "Q", "ZZ", "H", "UX", "CH", "S", "IZ", "SH", "ONE", "FF", "D", "E", "ZI", "AZ", "W", "J", "Zip", "F", "V", "AF", "T", "C", "LL", "U", "SE", "Zone", "N", "M", "SS", "PL", "ZE", "z", "XX", "O", "ID"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String args[]){\\n    Scanner sc = new Scanner(System.in);\\n    \\n    int n = sc.nextInt();\\n    int m = sc.nextInt();\\n    \\n    int[] arr = new int[n];\\n    int cntAC = 0;\\n    int cntWA = 0;\\n    int[] cntWAs = new int[n];\\n    \\n    for(int i = 0; i < m; i++){\\n      int num = sc.nextInt();\\n      String res = sc.nextLine();\\n      //System.out.println(res);\\n      \\n      if(arr[num - 1] == 0){\\n        if(res.equals(\" AC\")){\\n          cntAC++;\\n          cntWA += cntWAs[num - 1];\\n          arr[num - 1] = 1;\\n        }else{\\n          cntWAs[num - 1]++;\\n        }\\n      }\\n    }\\n    \\n    System.out.println(cntAC + \" \" + cntWA);\\n  }\\n}", "target": "48", "substitutes": {"sc": ["osc", "ch", "ner", "cont", "fc", "auc", "mc", " Sc", "nc", "st", "sb", "sche", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "anc", "SC", "c", "scan", "cs", "uc", "se", "cl", "sw", "com", "ctx", "str", "Sc", "system", "sq", "dc", "sci", "cr", "src", "sync", "rc", "enc", "soc", "sys", "sp", " SC", "sch", "sh", "parser", "ec", "cur", "cmp", "screen", "lc", " scr"], "n": ["f", "h", "ne", "nc", "in", "no", "nt", "l", "g", "v", "t", "r", "c", "d", "y", "sn", "u", "e", "o", "j", "s", "p", "b", "x", "ns", "nb", "en", "w", "N", "z", "k", "an", "nn", "net"], "m": ["f", "nm", "h", "mc", "l", "mu", "v", "t", "c", "d", "y", "cm", "u", "e", "o", "j", "mm", "s", "p", "b", "x", "dm", "M", "w", "N", "hm", "z", "k", "mn", "mi"], "arr": ["list", "Array", "ann", "arch", "attr", "conf", "att", "cat", "ap", "ar", "array", "aj", "acc", "batch", "gr", "cache", "str", "aaa", "av", "row", "ag", "Ar", "enc", "ak", "acs", "aps", "coll", "ack"], "cntAC": ["cNTAI", "cntAI", "cntAA", "cctCA", "cnoCA", "cnoAA", "cctAA", " cctAC", " cntCA", " cctAA", "cctAC", "cNTAA", " cntAA", "cctAI", " cctCA", "cNTCA", "cnoAC", " cntAI", "cNTAC", "cntCA", " cctAI", "cnoAI"], "cntWA": [" ccountWS", "cntMW", "cncMW", " ccountTA", "ccountTA", " cntMW", "cnumWA", "cnumWS", "cnumMW", "cntTA", "ccountMW", "cncWS", " cntWS", " ccountWA", " ccountMW", " cntTA", "cnumTA", "ccountWA", "cncTA", "ccountWS", "cntWS", "cncWA"], "cntWAs": ["cntGWAS", "cstWAS", "cntWAS", "cntGWAs", "cstWA", "cntMPA", "cstWPA", "cstSWAS", "cntSWA", "cstSWAs", "cntSWAS", "cntMAS", "cntWPA", "cntGWA", "cntMA", "cntSWAs", "cntGWPA", "cstSWPA", "cntSWPA", "cntMAs", "cstWAs", "cstSWA"], "i": ["f", "li", "fi", "I", "di", "ri", "ni", "gi", "ai", "si", "ui", "mu", "v", "t", "c", "zi", "uri", "u", "pi", "info", "j", "ii", "qi", "ti", "p", "hi", "ini", "z", "ci", "mi", "iu", "ip", "uni", "xi", "chi", "bi"], "num": ["nm", "gen", "name", "orig", "no", "id", "number", "index", "unit", "mu", "nam", "con", "bin", "max", "NUM", "u", "info", "np", "un", "nb", "Num", "N", "umi", "uni", "init", "nu", "fn", "um"], "res": ["obj", "RE", "rec", "err", "ret", " Res", "block", "reg", "mr", "rest", "rev", "result", "rl", "Res", "re", "req", "gr", "Result", "row", "rc", "RES", "response", "ress", "results", "resp", "rs", "func", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint n = sc.nextInt() - 1;\\n\t\tint m = sc.nextInt() - 1;\\n\\n\t\tint pattern = 0;\\n\\n\t\tfor(int i = n; i > 0; i--)\\n\t\t{\\n\t\t\tpattern += i;\\n\t\t}\\n\\n\t\tfor(int i = m; i > 0; i--)\\n\t\t{\\n\t\t\tpattern += i;\\n\t\t}\\n\\n\t\tSystem.out.println(pattern);\\n\\n\t}\\n}\\n", "target": "49", "substitutes": {"sc": ["class", "osc", "ch", "fc", " Sc", "nc", "sche", "sb", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "na", "server", "anc", "app", "ca", "SC", "se", "c", "scan", "sw", "cs", "uc", "com", "cl", "ctx", "acc", "str", "Sc", "sq", "con", "sci", "cr", "src", "sf", "sync", "rc", "enc", "soc", "scl", "sp", "ci", " SC", "sh", "ec", "tc", "cur", "ser"], "n": ["f", "h", "nc", "in", "no", "nt", "number", "l", "v", "min", "c", "d", "y", "u", "e", "o", "j", "cn", "s", "p", "b", "x", "ns", "ln", "en", "N", "q", "z", "k", "nn", "a", "r"], "m": ["f", "em", "h", "am", "in", "man", "mid", "l", "mu", "g", "v", "mr", "c", "d", "ms", "y", "cm", "u", "e", "j", "mm", "p", "dm", "M", "im", "pm", "md", "k", "mn", "mi", "ym", "a", "r"], "pattern": ["list", "regular", "shape", "comment", "pat", "path", "string", "template", "data", "format", "prefix", "condition", "expression", "column", "match", "length", "group", "id", "count", "number", "index", "image", "config", "object", "character", "zip", "text", "patch", "print", "model", "style", "bug", "form", "password", "feed", "array", "fix", "batch", "counter", "info", "url", "offset", "letter", "row", "mask", "filter", "pretty", "part", "pixel", "test", "Pattern", "alpha"], "i": ["f", "li", "I", "di", "in", "ri", "ni", "ami", "id", "gi", "index", "ai", "io", "ji", "si", "ori", "patch", "ui", "mu", "phi", "v", "it", "t", "c", "ie", "y", "zi", "uri", "hei", "u", "pi", "o", "j", "e", "api", "ii", "info", "qi", "field", "p", "ti", "hi", "x", "oi", "slice", "ini", "start", "z", "ci", "mi", "ip", "xi", "init", "iu", "chi", "multi", "bi", "my", "a"]}}
{"code": "import java.util.Arrays;\\nimport java.util.HashSet;\\nimport java.util.Scanner;\\nimport java.util.Set;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    int c = sc.nextInt();\\n    int k = sc.nextInt();\\n\\n    int[] num = new int[3];\\n    num[0] = a;\\n    num[1] = b;\\n    num[2] = c;\\n    Arrays.sort(num);\\n\\n    for (int i = 0; i < k; i++) {\\n      num[2] = num[2] * 2;\\n    }\\n\\n    System.out.println(num[0] + num[1] + num[2]);\\n  }\\n}", "target": "201", "substitutes": {"sc": ["parse", "osc", "ch", "ner", "cont", "exp", "nc", "sb", "sche", "cv", "esc", "cc", "bc", "asc", "pc", "ss", "na", "anc", "scope", "ca", "SC", "scan", "cs", "uc", "sw", "se", "cus", "ctx", "cor", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "cer", "sr", "enc", "soc", "sp", "sch", "tc", "cur", "coll", "ser", "lc"], "a": ["f", "h", "ama", "base", "am", "A", "ab", "ad", "m", "ai", "n", "l", "ac", "ea", "da", "ba", "area", "ca", "aa", "asa", "d", "ar", "aj", "va", "api", "s", "p", "sa", "x", "as", "ia", "w", "au", "ak", "an", "ada", "ae", "alpha", "la"], "b": ["f", "h", "ab", "db", "bas", "bc", "n", "l", "B", "g", "v", "ba", "fb", "aa", "d", "y", "e", "o", "j", "lb", "bb", "s", "p", "x", "nb", "cb", "w", "ib", "bs", "be", "bi", "eb", "r"], "c": ["f", "h", "cf", "ch", "count", "cc", "bc", "n", "l", "ac", "g", "v", "ca", "uc", "cat", "d", "u", "e", "o", "s", "p", "x", "C", "cb", "w", "q", "z", "ci", "lc", "r"], "k": ["f", "h", "K", "length", "m", "n", "l", "ac", "g", "v", "d", "y", "mk", "u", "e", "o", "j", "s", "p", "x", "kw", "w", "sk", "z", "size", "ks", "ke", "ki", "q", "r"], "num": ["f", "name", "miss", "begin", "prefix", "no", "in", "key", "number", "hex", "zip", "block", "norm", "hom", "form", "mat", "inc", "om", "coord", "size", "init", "comment", "done", "one", "unit", "na", "cat", "max", "winner", "NUM", "u", "digit", "du", "umi", "node", "valid", "gen", "sort", "term", "mon", "out", "id", "index", "split", "text", "note", "nam", "con", "end", "success", "Num", "an", "dom", "parent", "div", "dim", "orig", "ul", "data", "nom", "n", "sum", "result", "bin", "tri", "dec", "word", "info", "np", "loc", "nb", "mom", "nu", "nn", "rank", "inf", "um"], "i": ["f", "li", "fi", "I", "di", "ri", "gi", "m", "ji", "si", "ui", "mu", "phi", "v", "it", "uli", "zi", "uri", "u", "e", "info", "j", "pi", "api", "ii", "ti", "hi", "oi", "p", "x", "start", "ci", "iu", "xi", "ip", "init", "chi", "bi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\n/**\\n *\\n * @author yoshkur\\n */\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\ttry {\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\tInputData inputData = new InputData(br);\\n\t\t\tStringBuilder sb = new StringBuilder();\\n\t\t\tsb.append(getArea(inputData));\\n\t\t\tsb.append(\" \");\\n\t\t\tsb.append(getLength(inputData));\\n\t\t\tSystem.out.println(sb.toString());\\n\\n\t\t} catch (IOException | NumberFormatException e) {\\n\t\t\tSystem.err.println(e.getLocalizedMessage());\\n\t\t}\\n\t}\\n\\n\tpublic static Integer getArea(InputData inputData) {\\n\t\treturn inputData.getHeight() * inputData.getWidth();\\n\t}\\n\\n\tpublic static Integer getLength(InputData inputData) {\\n\t\treturn (inputData.getHeight() + inputData.getWidth()) * 2;\\n\t}\\n\\n}\\n\\nclass InputData {\\n\\n\tprivate Integer height;\\n\tprivate Integer width;\\n\\n\tpublic InputData(BufferedReader br) throws IOException {\\n\t\tString line = br.readLine().trim();\\n\t\tString[] values = line.split(\" \");\\n\t\tthis.height = Integer.valueOf(values[0]);\\n\t\tthis.width = Integer.valueOf(values[1]);\\n\t}\\n\\n\tpublic Integer getHeight() {\\n\t\treturn height;\\n\t}\\n\\n\tpublic void setHeight(Integer height) {\\n\t\tthis.height = height;\\n\t}\\n\\n\tpublic Integer getWidth() {\\n\t\treturn width;\\n\t}\\n\\n\tpublic void setWidth(Integer width) {\\n\t\tthis.width = width;\\n\t}\\n}", "target": "92", "substitutes": {"br": ["bm", "obj", " tr", "tr", "ch", "div", "rt", "bh", "ler", "ctr", "db", "plug", "bl", "err", "bt", "bro", "fr", "bc", "report", "io", "arr", "dr", "mr", "result", "buf", "er", "bed", "reader", "wr", "rb", "gr", "hr", "str", "img", "ur", "HR", "p", "b", "yr", "cr", "cb", "ocr", "ber", "sr", "jar", "brush", "sp", "bd", "BR", "bridge", "lr", "browser", "Br", "r"], "inputData": ["audioData", "outputInfo", "audioInfo", " inputName", "outputData", "parentDATA", "parentData", "storageInfo", "resourceBand", "outputDef", "InputName", " inputdata", "parentInfo", "uploaddata", "audioDef", "parentdata", "inputDATA", " inputType", "uploadInfo", "InputDATA", "InputData", "contextData", "contextName", "InputType", "tempData", "imageData", "inputParser", "audioDATA", "imageDATA", "Inputdata", "storageDATA", "InputInfo", " inputDATA", "inputInfo", "InputBand", "contextDATA", "errorParser", " inputLast", "resourceData", "xmlDATA", " inputBand", "inputName", "InputStorage", "inputBand", "outputdata", "InputDef", "tempInfo", "InputParser", " inputDef", "errorData", "xmlData", "errorStorage", " inputStorage", "inputLast", "inputdata", "uploadData", "tempdata", "imageInfo", "tempLast", "inputDef", "errorInfo", "inputType", " inputParser", "InputLast", "contextInfo", "uploadDATA", "storageData", "resourceType", "inputStorage", " inputInfo", "xmldata", "xmlInfo", "resourceInfo"], "sb": ["gb", "bm", "usb", "bf", "pb", " SB", "BB", "bh", "db", "sv", "bl", "bt", "obb", "bc", "sg", "si", "wb", "ob", "ba", "fb", "bp", "bj", "su", "ls", "mb", "sn", "xb", "rb", "stab", "SB", "lb", "bb", "s", "lp", "sa", "sq", "b", "src", "sf", "kb", "nb", "cb", "sr", "ib", "bs", "bd", "bsp", "abb", "lr", "nn", "eb", "bg", "sth", "rob"], "height": ["border", "value", "media", "shape", "dim", "gpu", "data", "layout", "padding", "version", "medium", "dist", "align", "length", "id", "image", "number", "count", "index", "high", "gravity", "flow", "window", "device", "driver", "deep", "port", "duration", "type", "style", "y", "draw", "weight", "def", "position", "depth", "full", "color", "row", "direction", "both", "density", "head", "resolution", "gh", "mode", "view", "crop", "header", "size", "work", "bottom", "capacity", "angle", "gap", "maximum", "host", "right", "alpha", "rank", "volume", "location", "scale", "distance", "Height"], "width": ["border", "content", "level", "shape", "path", "data", "padding", "layout", "version", "description", "gender", "Width", "length", "count", "number", "large", "widget", "sword", "label", "high", "flow", "unit", "window", "platform", "index", "text", "message", "left", "driver", "rel", "area", "port", "duration", "style", "page", "layer", "write", "won", "fall", "wl", "settings", "weight", "pull", "url", "frame", "position", "wn", "depth", "current", "all", "strength", "w", "strike", "speed", "wid", "filename", "view", "fill", "wa", "work", "size", "capacity", "fl", "idth", "lon", "image", "body", "end", "balance", "amount"], "line": ["f", "value", "content", "val", "h", "cell", "string", "data", "one", "lin", "lf", "lines", "code", "pin", "l", "text", "message", "block", "end", "page", "write", "entry", "inline", "buffer", "Line", "e", "str", "url", "frame", "item", "s", " lines", "row", "profile", "nl", "pass", "sync", "sel", "email", "response", "header", "look", "body", "LINE", "lc", "r"], "values": ["value", "keys", "ports", "cons", "names", "vals", "versions", "data", "measures", "points", "verts", "flows", "lines", "params", "charges", "ints", "codes", "des", "vs", "groups", "ims", "inches", "seconds", "boxes", "limits", "details", "types", "maps", "marks", "rows", "changes", "vector", "members", "settings", "ls", "videos", "rules", "cells", "items", "ps", "tests", "Values", "results", "lists", "bytes", "ins", "roots", "strings", "objects"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        int x,h,m,s;\\n        Scanner sc = new Scanner(System.in);\\n        x=sc.nextInt();\\n        h=x/3600;\\n        m=(x-3600*h)/60;\\n        s=x-3600*h-60*m;\\n        System.out.printf(\"%d:%d:%d%n\",h,m,s);\\n    }\\n}", "target": "84", "substitutes": {"x": ["f", "xy", "xc", "time", "exp", "plus", "xx", "in", "X", "wx", "index", "high", "n", "l", "alpha", "v", "t", "c", "ww", "tx", "sw", "d", "y", "pos", "dx", "max", "fx", "ax", "ex", "u", "e", "width", "xd", "xs", "www", "p", "hi", "b", "en", "w", "xxx", "rx", "px", "wa", "ct", "work", "sh", "i", "xi", "ix", "xp", "my", "r"], "h": ["f", "time", "hs", "ph", "in", "oh", "hh", "high", "H", "n", "l", "height", "g", "v", "ho", "t", "c", "hours", "d", "y", "u", "e", "o", "hr", "p", "hi", "b", "rh", "ha", "w", "hm", "hp", "z", "k", "work", "ht", "sh", "i", "a", "day", "q"], "m": ["f", "time", "in", "man", "n", "l", "mu", "g", "v", "min", "t", "c", "d", "ms", "y", "u", "e", "o", "j", "mm", "p", "b", "w", "M", "dm", "im", "hm", "md", "z", "mi", "sh", "i", "sm", "gm", "a", "q", "r"], "s": ["f", "is", "sb", "sv", "n", "si", "l", "S", "ss", "g", "v", "t", "c", "sw", "d", "ms", "y", "ls", "e", "o", "sq", "p", "b", "ns", "sf", "w", "sl", "z", "sp", "size", "sh", "sm", "i", "an", "a", "ds", "q"], "sc": ["class", "osc", " Sc", "nc", "cc", "bc", "esc", "pc", "exec", "sec", "na", "scope", "g", "ca", "SC", "se", "c", "scan", "uc", "ctx", "cl", "sw", "cs", "acc", "Sc", "sub", "sci", "cr", "src", "sf", "cb", "rc", "cer", "enc", "sync", "soc", "sl", "ci", "sp", " SC", "sh", "ec", "cur", "ser", "lc"]}}
{"code": "import java.io.BufferedReader; \\nimport java.io.InputStreamReader; \\nimport java.io.IOException; \\nimport java.util.StringTokenizer; \\nimport java.util.Arrays;\\npublic class Main {\\n    static class FastReader{\\n        BufferedReader br;\\n        StringTokenizer st;\\n       public  FastReader()\\n       {\\n           br=new BufferedReader(new InputStreamReader(System.in));\\n       }\\n       String next()\\n       {\\n           while(st==null ||!st.hasMoreElements())\\n           {\\n               try\\n               {\\n                   st= new StringTokenizer(br.readLine());\\n               }\\n               catch(IOException e)\\n               {\\n                   e.printStackTrace();\\n               }\\n           }\\n           return st.nextToken();\\n       }\\n      \\n       int nextInt()\\n       {\\n           return Integer.parseInt(next());\\n       }\\n       long nextLong()\\n       {\\n           return Long.parseLong(next());\\n       }\\n    }\\n    public static void main(String args[]) throws IOException\\n    {\\n        FastReader fs= new FastReader();\\n        long A= fs.nextLong();\\n        String B=fs.next();\\n        long res= (A* (((B.charAt(0)-'0')*100) +((B.charAt(2)-'0')*10) + (B.charAt(3)-'0')))/100;\\n        System.out.println(res);\\n    }\\n\\n}", "target": "15", "substitutes": {"br": ["obj", "bf", "tr", "ch", "rt", "sb", "bh", "db", "ab", "bl", "err", "bt", "bro", "fr", "bc", "pr", "bur", "arr", "dr", "raf", "mr", "bar", "buf", "bed", "fe", "rb", "gr", "hr", "str", "ur", "bb", "b", "boot", "src", "cb", "ber", "sr", "jar", "or", "bs", "bd", "sp", "BR", "bridge", "browser", "body", "Br", "fb", "r"], "st": ["store", "nd", "sta", "tr", "inst", "string", "rt", "St", "stri", "sb", "db", "nt", "ad", "bl", "bt", "ut", "fr", " est", "l", "ist", "ost", "est", "t", "rest", "ST", "se", "style", "sw", "d", "fe", "sty", "sn", "ft", "ace", "e", "str", "pt", "sts", "stop", "ld", "stage", "p", "sa", "b", "src", "ste", "ast", "start", "pe", "sr", "sc", "sl", "sp", "struct", "ct", "rd", "sh", "const", "art", "be", "stress", "std", "Str", "sth", "r"], "fs": ["f", "bf", "fc", "fd", "cf", "fits", "ils", "frames", "fr", "io", "ves", "gets", "raf", "ums", "df", "cs", "rows", "FS", "fe", "ms", " FS", "fm", "ls", "fx", "ft", "fps", "rb", "fts", "af", "F", "qs", "xs", "s", "fp", "opens", "sf", "uses", "utils", "ps", "vers", "Fs", "ws", "ours", "bs", " f", "ks", "fn", "fb", "ds"], "A": ["FA", "SA", "G", "Az", "I", "AA", "Java", "X", "API", "P", "Amount", "S", "As", "EA", "GA", "IA", "D", "F", "BA", "CA", "AC", "AU", "C", "U", "Ar", "Alpha", "M", "NA", "N", "au", "Average", "LA", "Am", "AR", "mA", "alpha", "a", "RA"], "B": ["Both", "QB", "G", "Tab", "I", "L", "BB", "VB", "DB", "Bytes", "P", "GB", "H", "Buff", "Y", "S", "Block", "E", "D", "BE", "PB", "Library", "TB", "W", "SB", "BI", "EB", "F", "LB", "MB", "BL", "Bar", "Result", "R", "b", "NB", "Builder", "T", "C", "U", "WB", "M", "N", "Base", "Big", "Part", "Bs", "Ub", "BC", "Number", "Bu", "O", "OB"], "res": ["rats", "val", " results", "rus", "exp", "vals", "abs", "reed", " result", "ret", "des", " Res", "arr", "rez", "ES", "rep", "reg", "rel", "rev", "pres", "result", "rows", "ms", "Res", "press", "re", "req", "es", "def", "rh", "ps", " RES", "RES", "resolution", "ress", "results", "rx", "resp", "os", "bytes", "us", "ras", "rs", "r"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int a[] = new int[3];\\n    for(int i = 0;i<3;i++){\\n      a[i] = sc.nextInt();\\n    }\\n    int ans = 0;\\n    if(a[0] == a[1] && !(a[0] == a[2])){\\n      ans = 1;\\n    }\\n    if(a[1] == a[2] && !(a[1] == a[0])){\\n      ans = 1;\\n    }\\n    if(a[2] == a[0] && !(a[2] == a[1])){\\n      ans = 1;\\n    }\\n    if(ans == 1){\\n      System.out.println(\"Yes\");\\n    }else{\\n      System.out.println(\"No\");\\n    }\\n  }\\n}\\n", "target": "117", "substitutes": {"sc": ["ner", "osc", " Sc", "nc", "out", "sb", "nt", "search", "esc", "bc", "asc", "pc", "ss", "sec", "scope", "anc", "SC", "se", "c", "scan", "sw", "uc", "cs", "sac", "Sc", "system", "sq", "sub", "sci", "cr", "src", "rc", "cer", "soc", "sys", "ci", "sp", " SC", "sch", "sh", "desc", "screen", "lc", " scr"], "a": ["f", "ama", "am", "off", "in", "m", "l", "app", "area", "ca", "c", "t", "something", "ae", "ab", "ma", "ao", "active", "na", "aj", "u", "another", "z", "ata", "work", "art", "alpha", "la", "input", "ga", "A", "out", "aka", "index", "ac", "g", "aa", "y", "array", "va", "pa", "e", "this", "o", "s", "as", "sa", "b", "p", "all", "au", "k", "tta", "an", "ana", "data", "arch", "not", "n", "ba", "d", "aux", "aaa", "auto", "audio", "at", "x", "\u00e0", "w", "ast", "wa", "any"], "i": ["f", "li", "fi", "h", "I", "di", "in", "ni", "id", "gi", "m", "index", "key", "ai", "io", "n", "si", "ui", "mu", "v", "it", "c", "ie", "d", "y", "uri", "u", "e", "o", "pi", "j", "info", "ii", "qi", "p", "ti", "b", "x", "ind", "oi", "hi", "slice", "ini", "z", "ci", "part", "k", "mi", "xi", "iu", "chi", "multi", "bi"], "ans": ["oops", "ANS", "cons", " scans", "faces", "works", "ats", "ann", "arts", "aned", "reads", "ays", "anas", "man", "leans", "ons", "amps", " means", "AN", "acts", "na", "annels", "ops", "ss", "aces", "cs", "ents", "nos", "ads", "errors", "lan", "kin", "ions", "nas", "ids", "ens", "offs", "ns", "pass", "cas", "ants", "vers", "sk", "acs", "eps", "os", "ks", "ins", "ras", "ends", "an", "outs", "ars", "nn", "ds", "ana", "span"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(final String[] args) throws Exception {\\n        final Scanner sc = new Scanner(System.in);\\n        long N;\\n        N = sc.nextLong();\\n\\n        final Solver solver = new Solver();\\n        solver.solve(N);\\n    }\\n}\\n\\nclass Solver {\\n    public void solve(long N) {\\n        long odd = N % 2 == 0 ? N / 2 : N / 2 + 1;\\n        System.out.println(String.format(\"%f\", odd / (double) N));\\n    }\\n}\\n\\n", "target": "64", "substitutes": {"sc": ["ner", "osc", "mc", " Sc", "nc", "out", "sv", "cc", "bc", "esc", "asc", "pc", "si", "ss", "sec", "scope", "anc", "cus", "SC", "c", "scan", "cs", "sw", "uc", "cl", "Sc", "system", "s", "sub", "sci", "cr", "C", "sf", "src", "rc", "enc", "soc", "ci", "sp", " SC", "sh", "isc", "ec", "desc", "lc"], "N": ["NE", "G", "CNN", "K", "Length", "Len", "I", "L", "Z", "Number", "Size", "NI", "X", " n", "Node", "Count", "P", "number", "Ni", "Q", "NS", "SN", "H", "GN", "n", "NC", "S", "Y", "B", "E", "D", "NL", "W", "J", "F", "V", "Power", "NG", "R", "NB", "NN", "T", "C", "TW", "Num", "U", "M", "NA", "Ne", "One", "Part", "size", "Ns", "ND", "NT", "O", "Sum"], "solver": ["Solution", "Solver", "Solving", "solution", "ssolver", "ssolve", "osolver", "solve", "osolution", "sector", "ssolution", "solving", "Sector", "osolve", "ssector", "ssolving", " solution", "Solve", " solving", "osector", " solve"], "odd": ["nd", " even", "wise", "div", "opp", "no", "nt", "inner", "Even", "ant", " Odd", "diff", "bug", "d", "NO", "draw", "OD", " ant", "dev", "o", "division", " stupid", "NT", " error", "dd", " power", " number", " opponent", "nn", "DD", "even", " div", "od", " Even"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        // \u6574\u6570\u306e\u5165\u529b\\n        int k = sc.nextInt();\\n        // \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\\n        int x = sc.nextInt();\\n        // \u7d50\u679c\u306e\u51fa\u529b\\n        int min = x - (k - 1);\\n        int max = x + (k - 1);\\n\\n        for(int i = min; i <= max; i++){\\n            System.out.print(i);\\n            if(i != max) {\\n                System.out.print(\" \");\\n            }\\n        }\\n    }\\n}\\n", "target": "207", "substitutes": {"sc": [" pars", " scorer", " Sc", "ann", " arr", " surf", "sb", " scanner", " sm", " sl", "ss", " ans", "SC", " rc", "se", "scan", " src", "Sc", "sq", " res", " app", " SC", " ar", "parser", " sp", " ser", " scr"]}}
{"code": "\\nimport java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\tstatic FastReader in = new FastReader();\\n\\n\tpublic static void main(String[] args) {\\n\t\tsolve();\\n\t}\\n\\n\tstatic void solve() {\\n\t\tint n = in.nextInt();\\n\t\tint[] arr = in.readarr(n);\\n\t\t\\n\t\tint[] dp = new int[n];\\n\t\tArrays.fill(dp, Integer.MAX_VALUE);\\n\t\tdp[0] = 0;\\n\t\t\\n\t\tfor(int i = 0; i < n; i++)\\n\t\t{\\n\t\t\tif(i + 1 < n)dp[i + 1] = Math.min(dp[i] + (Math.abs(arr[i] - arr[i + 1])), dp[i + 1]);\\n\t\t\tif(i + 2 < n)dp[i + 2] = Math.min(dp[i] + Math.abs(arr[i] - arr[i + 2]), dp[i + 2]);\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(dp[n - 1]);\\n\t}\\n\\n\tstatic class FastReader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer st;\\n\\n\t\tpublic FastReader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\\n\t\tString next() {\\n\t\t\twhile (st == null || !st.hasMoreElements()) {\\n\t\t\t\ttry {\\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\te.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\\n\t\tint[] readarr(int abc) {\\n\t\t\tint[] temp = new int[abc];\\n\t\t\tfor (int i = 0; i < abc; i++)\\n\t\t\t\ttemp[i] = nextInt();\\n\t\t\treturn temp;\\n\t\t}\\n\t}\\n}\\n", "target": "1", "substitutes": {"in": ["f", "on", "impl", "is", "data", "input", "out", "lin", "ssl", "log", "err", "din", "image", "m", "inner", "socket", "id", "readable", "l", "nin", "IN", "inn", "v", "min", "con", "c", "doc", "cl", "bin", "d", "reader", "isin", "inc", "serv", "source", "buffer", "ex", "this", "read", "url", "re", "p", "as", "ic", "file", "ini", "login", "win", "again", "line", "stream", "ins", "conn", "connection", "init", "inet", "In", "inf", "a", "r"], "n": ["f", "ne", "name", "none", "nc", "no", "nt", "ni", "m", "number", "l", "v", "min", "t", "r", "c", "num", "d", "max", "y", "network", "sn", "u", "e", "o", "j", "nw", "np", "cn", "p", "b", "x", "ns", "nl", "nb", "en", "N", "pn", "z", "nr", "k", "mn", "Ns", "size", "an", "nn", "net"], "arr": ["map", "list", "dim", "adv", "data", "ann", "db", "ab", "err", "bl", "arch", "fr", "par", "pr", "dr", "rep", "order", "df", "min", "app", "ray", "dat", "attr", "aa", "area", "ar", "aj", "array", "air", "mat", "plot", "war", "adj", "frac", "gr", "img", "np", "batch", "av", "p", "x", "yr", "var", "Ar", "pp", "rad", "rr", "arc", "arm", "ras", "adr", "Array", "el", "r"], "dp": ["cd", "pb", "dim", "data", "wp", "prop", "pay", "di", "dt", "dist", "db", "grad", "dos", "length", "dep", "params", "default", "dr", "zip", "deb", "patch", "address", "df", "tp", "wd", "pd", "dat", "push", "gp", "d", "mp", "pkg", "dl", "array", "dh", "cm", "uv", "img", "np", "api", "mm", "pid", "dc", "p", "lp", "fp", "cdn", "dq", "DP", "dm", "ps", "pp", "vp", "pm", "dd", "imp", "hp", "eps", "sp", "cp", "ip", "pad", "cmp", "adr", "price", "dict", "ds"], "i": ["f", "eni", "mini", "is", "gi", "l", "c", "uri", "api", "ii", "qi", "oi", "iu", "isi", "multi", "h", "vi", "di", "ri", "ai", "it", "source", "u", "j", "iii", "hi", "ini", "im", "z", "ci", "mi", "ix", "ki", "bi", "li", "fi", "I", "iv", "anti", "id", "index", "ji", "ui", "y", "zi", "e", "o", "ei", "p", "ti", "b", "slice", "yi", "my", "cli", "ni", "ami", "io", "si", "ori", "v", "ie", "d", "uli", "pi", "info", "x", "xi", "ip", "r"], "br": [" tr", "tr", "shr", " pr", "rt", "bh", " dr", "ler", "ctr", "db", "pl", "bl", "err", "bro", "fr", "bc", "fore", "pr", "bur", "ver", "dr", " cr", "raf", " bo", "mr", " Br", "itter", " BR", "bar", "vr", "kr", "ar", " fr", "per", "rb", "gr", "hr", "img", "ur", " bra", "p", "b", "cr", "src", "ocr", " ab", "ber", "yr", "obl", " bridge", "brush", "sp", " barr", "BR", "cur", "browser", "bridge", "lr", "Br", "adr", " sr", " scr", "r"], "st": ["nd", "sta", "tr", "inst", "string", "rt", "St", "stri", "sb", "bl", "sv", "bt", "fr", "stable", "pr", "ut", " est", "l", "ist", "ss", "ost", "est", "t", "rest", "ST", "se", "style", "sw", "cl", "d", "fe", "ft", "e", "pt", "sts", "stop", "stage", "s", "b", "STR", "cr", "src", "ste", "ast", "pe", "sr", "sc", "sl", "sp", "struct", "part", "ct", "sh", "art", "be", "std", "Str", "sth", "sign", "r"], "str": ["f", "tr", "div", "ner", "exp", "path", "string", "data", "out", "err", "bl", "id", "key", "code", "fr", "pr", "dr", "text", "t", "c", "style", "doc", "cl", "d", "kr", "ext", "e", "j", "pt", "url", "iter", "s", "p", "b", "STR", "x", "cr", "pass", "enc", "char", "sl", "z", "sp", "line", "plain", "dict", "Str", "r"], "abc": ["etc", "xc", "fc", "rec", "auc", "nc", "abs", "ab", "db", "ref", "bl", "count", "keep", "ignore", "circ", "bc", "ac", "sec", "ob", "ba", "exc", "fab", "area", "conf", "c", "uc", "num", "max", "frac", "lb", "aux", "af", "aaa", "loc", "ABC", " ABC", "dc", "x", "cb", " ab", "rc", "ib", "fff", "ffff", "col", "const", "lab", "lib", "lc", "fb"], "temp": ["obj", "list", "val", "rec", "arg", "mini", "base", "vi", "data", "shift", "raw", "input", "out", "err", "key", "ignore", "bc", "default", "exec", "pre", "py", "exc", "v", "left", "diff", "area", "dat", "result", "num", "empty", "array", "output", "ex", "adj", "frac", "cache", "Temp", "current", "iter", "loc", "p", "tmp", "var", "extra", "col", "z", "fake", "size", "test", "init", "flat", "get", "ctrl", "lc"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\n\\n/**\\n *\\n * @author Y\\n */\\npublic class Main {\\n    public static void main(String[]args) throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int N = Integer.parseInt(br.readLine());\\n        int[] a = new int[N];\\n        String[] s = br.readLine().split(\" \");\\n        for(int i = 0;i<N;i++){\\n            a[i] = Integer.parseInt(s[i]);\\n        }\\n        \\n        int Nswap = 0;\\n        for(int i=0;i<N;i++){\\n            for(int j = N-1;j>=i+1;j--){\\n                if(a[j]<a[j-1]){\\n                    int tmp = a[j];\\n                    a[j]=a[j-1];\\n                    a[j-1]=tmp;\\n                    \\n                    Nswap++;\\n                }\\n            }\\n        }\\n        \\n        for(int i=0;i<N-1;i++){\\n            System.out.print(a[i] + \" \");\\n        }\\n        System.out.println(a[N-1]);\\n        System.out.println(Nswap);\\n        \\n    }\\n}", "target": "170", "substitutes": {"br": ["bm", "obj", "bf", "tr", "ner", "abs", "bh", "ler", "db", "ab", "ref", "bl", "err", "bro", "fr", "bc", "io", "orb", "arr", "dr", "ori", "mr", "buf", "er", "reader", "wr", "rb", "hr", "img", "ur", "bb", "HR", "b", "cr", "yr", "ber", "res", "sr", "jar", "her", "bs", "sp", "BR", "bridge", "lr", "browser", "Br", "r"], "N": ["NE", "CNN", "Code", "K", "Len", "I", "L", "Z", "Size", "A", "NI", "Sn", "Ni", "X", " n", "Node", "P", "Q", "NS", "H", "n", "NC", "S", "Y", "B", "Na", "E", "D", "NO", "Network", "NL", "None", "W", "J", "F", "V", "No", "R", "NB", "Net", "NN", "T", "C", "Num", "Not", "M", "NA", "Ne", "NR", "Part", "Ns", "NY", "ND", "NT", "Number", "O"], "a": ["f", "ama", "Array", "am", "data", "working", "ga", "A", "existing", "ab", "ma", "oa", "ad", "index", "ai", "active", "n", "ea", "l", "ac", "na", "ba", "area", "ca", "aa", "c", "asa", "result", "y", "aj", "array", "something", "va", "u", "e", "o", "pa", "aaa", "aux", "auto", "api", "at", "sa", "as", "p", "b", "ia", "za", "sup", "x", "action", "ha", "au", "missing", "another", "ans", "temp", "ata", "work", "mA", "ana", "qa", "tta", "an", "ae", "alpha", "la"], "s": ["f", "data", "is", "sb", "aws", "sv", "lines", "m", "gs", "parts", "n", "si", "l", "S", "ss", "v", "se", "c", "d", "su", "u", "e", "services", "p", "sa", "b", "as", "sets", "ns", "ans", "strings", "ses", "ds", "r"], "i": ["f", "eni", "li", "fi", "I", "vi", "mini", "is", "jp", "di", "in", "ri", "ni", "cli", "gi", "id", "ik", "index", "key", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "phi", "v", "it", "c", "ie", "y", "zi", "uri", "u", "e", "pi", "o", "api", "ii", "info", "qi", "p", "ti", "hi", "x", "oi", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "init", "ij", "ix", "multi", "bi"], "Nswap": ["NrewAP", "Nswaj", "Nswapping", " Nswash", "NSwapping", "Lswaj", "nwrap", "Nsnap", "NSWash", "LSwap", "Nsnash", "Nwapped", "Nswapped", "nswap", "Nswash", "Nrewap", " NswAP", "NSWap", "nswapped", "NSwash", "Nwsaj", " Nswapped", "Nwsap", "Nwrap", "Ntwaj", "Ntwrap", "nwapped", "Lswrap", "Nwsapping", "LSwaj", "Nsnapped", "nswash", "NSwap", "Ntwapping", "Nrewapped", "NSWAP", " NrewAP", "NsnAP", "Nswrap", "Nsnrap", "NSwaj", "NswAP", "nwash", "Ntwap", "nwap", "LSwrap", "NSWapped", "Nrewash", "Lswap", "LSwapping", "Nwsrap", "NSwapped", " Nrewapped", "nswrap", "Nwap", "Lswapping", " Nrewash", " Nrewap", "NSwrap", "Nwash"], "j": ["f", "uj", "li", "obj", "jl", "jj", "ch", "jo", "oj", "jp", "ni", "ji", "n", "si", "l", "pre", "ui", "v", "it", "ja", "c", "ie", "bj", "y", "aj", "next", "u", "e", "o", "J", "js", "ii", "jon", "qi", "p", "job", "b", "x", "oi", "je", "z", "part", "k", "ij", "ix", "jet", "q"], "tmp": ["obj", "tv", "opp", "st", "app", "area", "ie", "buf", "mp", " amp", "su", "ppo", " delta", " pad", "dest", " src", "img", "np", "bb", " temporary", " np", " ff", "amp", "space", "sup", "nb", "kk", "xxx", "front", "pp", "po", "temp", "cpp", "vt", " temp", "stuff", "pad", "yy", "cmp", " prev", "alpha", "now", "fb", " backup", "lab"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\n\\npublic class Main {\\n  public static void main(String[] args) throws IOException {\\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n    String[] str = in.readLine().split(\" \");\\n    int a = Integer.parseInt(str[0]);\\n    int b = Integer.parseInt(str[1]);\\n    System.out.println((int)Math.ceil((double)(b-1)/(double)(a-1)));\\n  }\\n}", "target": "101", "substitutes": {"in": ["f", "h", "arg", "data", "is", "input", "out", "lin", "log", "err", "din", "id", "m", "inner", "nin", "l", "exec", "IN", "min", "c", "doc", "bin", "er", "reader", "kin", "isin", "resource", "read", "inc", "source", "ex", "buffer", "serv", "user", "s", "at", "p", "as", "ini", "login", "or", "again", "temp", "with", "line", "part", "stream", "ins", "i", "connection", "init", "In", "gin", "r"], "str": ["f", "obj", "parse", "list", "val", "tr", "ner", "name", "div", "br", "string", "data", "input", "stri", "st", "ctr", "err", "inner", "fr", "arr", "dr", "text", "step", "sec", "usr", "c", "oct", "er", "entry", "spec", "dec", "txt", "wr", "iter", "s", "STR", "strip", "pass", "strike", "enc", "sr", "char", "sc", "sl", "sp", "line", "i", "star", "Str", "r"], "a": ["f", "A", "ab", "oa", "ad", "n", "l", "ac", "da", "ba", "ca", "c", "aa", "d", "y", "va", "u", "e", "j", "af", "s", "fa", "sa", "p", "x", "au", "z", "k", "i", "la", "an", "ae", "alpha"], "b": ["f", "pb", "h", "br", "sb", "ab", "ad", "n", "l", "B", "ob", "ba", "v", "c", "aa", "d", "y", "rb", "e", "o", "j", "lb", "bb", "s", "p", "x", "z", "bs", "k", "i", "body", "fb", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner scanner = new Scanner(System.in);\\n    int N = scanner.nextInt();\\n    long sum = 0;\\n    for(long i = 1;i < N + 1;i++){\\n      if(!(i % 3 == 0 || i % 5 == 0)){\\n        sum = sum + i;\\n      }\\n    }\\n    System.out.println(sum);\\n  }\\n}", "target": "55", "substitutes": {"scanner": ["analyner", "scanker", "caner", "Scanter", "Scanner", "Scaner", "Scanker", "Scanatter", " scanatter", " scaner", "annner", "caninner", "analyker", "annter", "scanter", "analyer", "Scaninner", " scanter", "canker", "anner", "analyinner", "annatter", "scanatter", "scaninner", "scaner", "canner"], "N": ["K", "Len", "I", "L", "Size", "NI", "Count", "Ni", " n", "X", "P", "count", "Q", "NS", "H", "n", "S", "D", "NL", "J", "F", "V", "NM", "R", "C", "T", "Num", "M", "NA", "Ne", "NR", "Ns", "ND", "NT", "O", "Sum"], "sum": ["value", "parse", "comment", "skip", "name", "summary", "miss", "out", "length", "id", "count", "gi", "index", "key", "cost", "n", "si", "text", "total", "ass", "min", "ity", "sign", "diff", "result", "num", "um", "max", "su", "use", "weight", "u", "info", "offset", "b", "fat", "all", "error", "missing", "start", "hash", "mean", "size", "us", "spread", "average", "sh", "loss", "chi", "alpha", "SI", "scale", "vol", "net", "Sum"], "i": ["f", "li", "I", "di", "ri", "ni", "ami", "id", "count", "key", "index", "gi", "ai", "length", "io", "ji", "n", "si", "l", "ui", "phi", "v", "t", "c", "d", "zi", "uri", "u", "pi", "o", "info", "e", "j", "ii", "cli", "qi", "iter", "ti", "p", "b", "x", "oi", "hi", "slice", "abi", "ini", "start", "ci", "k", "ip", "xi", "init", "chi", "multi", "bi", "inf"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        TaskA solver = new TaskA();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class TaskA {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            final int n = 5;\\n            int[] ar = new int[n];\\n            for (int i = 0; i < n; i++)\\n                ar[i] = in.nextInt();\\n            int k = in.nextInt();\\n            for (int i = 0; i < n - 1; i++)\\n                for (int j = i + 1; j < n; j++)\\n                    if (Math.abs(ar[i] - ar[j]) > k) {\\n                        out.println(\":(\");\\n                        return;\\n                    }\\n            out.println(\"Yay!\");\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}", "target": "66", "substitutes": {"inputStream": ["outputSt", "InputStream", "outputStreamer", "inputStreamer", "pullStreamer", "outputSteam", " inputSteam", "InputSt", "pullSteam", " inputSt", "InputStreamer", "pullstream", "Inputstream", "InputSteam", " inputstream", "inputSt", "outputstream", "inputstream", "pullStream", "inputSteam"], "outputStream": ["inputForm", "outForm", "OutputStream", "OutputView", "outputSteam", "OutputSteam", " outputSteam", "outputForm", " outputView", "Outputstream", "outputView", " outputstream", "outSteam", "outStream", "outputstream", "inputstream", " outputForm", "inputView", "inputSteam", "outstream"], "in": ["f", "gen", "arg", "name", "path", "cin", "data", "is", "input", "version", "lin", "log", "err", "din", "id", "pin", "inner", "image", "config", "index", "io", "binary", "l", "IN", "inn", "min", "con", "c", "bin", "kin", "request", "read", "inc", "source", "this", "info", "user", "url", "str", "inside", "s", "x", "ic", "file", "slice", "vin", "ini", "sin", "rin", "login", "win", "again", "part", "line", "ins", "conn", "connection", "init", "arin", "In", "gin", "run", "a", "r"], "out": ["name", "off", "call", "err", "key", "inner", "timeout", "server", "to", "extra", "again", "temp", "view", "outer", "init", "outs", "gin", "lock", "comment", "exit", "string", "writing", "ex", "cache", "full", "Out", "copy", "work", "client", "input", "log", "up", "print", "page", "OUT", "buffer", "this", "o", "target", "s", "file", "sync", "dump", "line", "writer", "connection", "parent", "net", "obj", "list", "path", "data", "outside", "cli", "group", "io", "object", "exec", "process", "scope", "sum", "write", "bin", "output", "word", "user", "point", "x", "error", "w", "problem", "pool", "table", "conn", "r"], "solver": ["Solution", "setsolution", "Solver", "Solving", "solution", "ssolver", "ssolve", "solve", "setsolving", "Safer", "ssolution", "solving", "ssolving", "Solve", "setsolve", "ssafer", "setsolver", "safer"], "testNumber": ["testNumbers", " trialString", "trialNumber", "trialString", " trialnumber", "testString", " testNumbers", "trialNumbers", " testnumber", " testString", "trialnumber", "testnumber", " trialNumbers", " trialNumber"], "n": ["f", "ner", "ne", "nc", "no", "nt", "ni", "m", "l", "na", "v", "t", "r", "c", "num", "d", "y", "network", "sn", "ny", "u", "e", "o", "ii", "s", "dn", "p", "b", "x", "ns", "nl", "nb", "ln", "w", "en", "N", "len", "z", "nr", "nn", "a", "net"], "ar": ["parse", "ner", "tar", "car", "are", "har", "ai", "par", "arr", "l", "cart", "ear", "aru", "ari", "area", "arity", "er", "air", "per", "array", "war", "ra", "ur", "p", "sa", "al", "rar", "iar", "yr", "dar", "ares", "Ar", "var", "jar", "or", "lar", "AR", "arc", "ara", "art", "arin", "aro", "ars", "ir", "adr", "star", "arp", "kar", "a", "r"], "i": ["f", "eni", "li", "h", "I", "is", "di", "ik", "ni", "ri", "id", "gi", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "ie", "y", "uri", "u", "pi", "o", "info", "api", "ii", "qi", "p", "hi", "x", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "bi", "my"], "k": ["f", "h", "K", "ik", "key", "m", "kn", "ck", "g", "v", "ok", "c", "d", "mk", "y", "u", "e", "o", "ii", "p", "b", "w", "ak", "sk", "z", "ks", "a", "ki", "km", "q", "kw"], "j": ["f", "uj", "li", "br", "jl", "jj", "jo", "oj", "jp", "jen", "key", "ji", "si", "l", "ui", "v", "it", "ja", "ie", "bj", "y", "aj", "u", "e", "o", "J", "js", "ii", "qi", "p", "b", "x", "je", "z", "ij", "xi", "q"], "reader": ["parse", "client", "h", "worker", "data", "input", "inner", "io", "report", "service", "server", "loader", "driver", "it", "port", "result", "er", "entry", "per", "feed", "resource", "read", "buffer", "re", "source", "e", "this", "ry", "rer", "iter", "manager", "row", "reading", "file", "Reader", "slice", "or", "rot", "ro", "table", "writer", "parser", "handler", "lock", "method", "r"], "tokenizer": ["tokenize", "Tokener", "Tokenizer", " tokeniter", "recognization", "okeniter", " tokenner", "Tokenener", "Tokenizers", "okenener", " tokenization", "okeniser", "tokeniter", "okenization", "recogniser", "serialize", "tokeniser", "okenizers", " tokeniser", "serializer", "Tokenization", "Tokenner", "characterization", "recognize", "tokenizers", "tokenener", " tokenizers", "characterizer", " tokenener", "characterizers", "Tokeniser", "recognizer", "Tokenize", "serializers", "Tokeniter", " tokenize", "tokenner", "tokenization", "okenizer", " tokener", "serialer", "okenner", "okenize", "tokener", "characteriser"], "stream": ["f", "valid", "channel", "h", "client", "path", "string", "data", "raw", "input", "length", "socket", "document", "server", "v", "driver", "port", "form", "sw", "ream", "per", "feed", "resource", "read", "output", "buffer", "source", "open", "serial", "row", "file", "w", "response", "trans", "pool", "view", "Stream", "writer", "connection", "host", "body", "lock", "r"]}}
{"code": "import java.io.*;\\nimport java.lang.*;\\nimport java.util.*;\\n\\npublic class Main\\n{\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        System.out.println(n * m);\\n    }\\n}\\n", "target": "35", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "sb", "sche", "cle", "search", "cv", "cc", "esc", "bc", "asc", "pc", "si", "ss", "scope", "cus", "SC", "c", "scan", "cs", "uc", "sw", "se", "cl", "Sc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "soc", "ci", "sp", " SC", "sh", "ec", "tc", "lc"], "n": ["h", "ne", "nc", "in", "nt", "ni", "count", "number", "l", "v", "c", "num", "d", "network", "pos", "sn", "u", "o", "j", "cn", "s", "p", "b", "x", "ns", "nl", "nb", "N", "z", "nr", "k", "mn", "size", "i", "nn", "net"], "m": ["f", "nm", "h", "dim", "mini", "mc", "wm", "in", "mx", "man", "l", "mu", "v", "c", "d", "ms", "num", "fm", "mad", "cm", "u", "o", "j", "mm", "s", "p", "b", "x", "om", "dm", "M", "pm", "md", "z", "k", "mn", "i", "gm"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int s = scan.nextInt();\\n        List<Integer> list = new ArrayList<>();\\n        list.add(s);\\n        int index = 0;\\n        int ans = 0;\\n        while(true) {\\n        \tint temp = list.get(index);\\n        \tif(temp % 2 == 0) {\\n        \t\ttemp = even(temp);\\n        \t}else {\\n        \t\ttemp = odd(temp);\\n        \t}\\n\\n        \tif(list.contains(temp)) {\\n        \t\tSystem.out.println(list.size() + 1);\\n        \t\treturn;\\n        \t}\\n        \tlist.add(temp);\\n        \tindex++;\\n        }\\n    }\\n    public static int odd (int n) {\\n    \treturn 3 * n + 1;\\n    }\\n    public static int even(int n) {\\n    \treturn n / 2;\\n    }\\n}", "target": "166", "substitutes": {"scan": ["store", "stat", "parse", "ner", "ann", "watch", "out", "in", "search", "ignore", "l", "se", "cat", "er", "can", "reader", "query", "feed", "sn", "read", "connect", "iter", "system", "open", "all", "ln", "Scan", "san", "en", "sync", "sc", "win", "sys", "view", "an", "get", "walk", "look", "check", "skip", "run", "sign"], "s": ["f", "ts", "series", "is", "lines", "params", "si", "l", "S", "ss", "ches", "c", "d", "ls", "array", "es", "ions", "e", "ens", "o", "xs", "services", "sq", "p", "b", "items", "ns", "sample", "w", "ps", "ages", "size", "os", "ins", "ments", "ips", "i", "ses", "ks", "strings", "states", "a", "sequence"], "list": ["value", "li", "listed", "tree", "base", "old", "data", "fail", "out", "log", "group", "bl", "keep", "code", "collection", "search", "default", "inner", "l", "block", "null", "pre", "queue", "server", "left", "loop", "diff", "result", "type", "cl", "chain", "array", "prev", "source", "batch", "counter", "this", "cache", "cli", "load", "current", "full", "system", "p", "iter", "x", "stack", "all", "slice", "sync", "pool", "set", "LIST", "table", "view", "test", "i", "get", "we", "coll", "lock", "lc", "parent", "sequence"], "index": ["level", "base", "Index", "instance", "input", "in", "condition", "element", "length", "find", "id", "count", "key", "inner", "search", "move", "edit", "loop", "diff", "num", "update", "pos", "pointer", "inc", "weight", "add", "ex", "info", "j", "position", "section", "iter", "current", "point", "offset", "loc", "x", "ind", "ion", "slice", "action", "sync", "len", "part", "size", "i", "ix", "old"], "ans": ["out", "act", "nt", "active", "l", "otal", "total", "ate", "c", "d", "es", "e", "stop", "current", "p", "all", "ln", "ns", "nb", " iterations", "N", "col", "k", "an", "skip", "a", "span"], "temp": ["f", "err", "number", "local", "stable", "zip", "c", "form", "inc", "api", "offset", "extra", "fake", "size", "perature", "tc", "init", "const", "now", "sex", "old", "unit", "loop", "diff", "style", "request", "cycle", "ex", "width", "cache", "emp", "current", "z", "copy", "test", "cur", "lc", "valid", "input", "out", "eff", "id", "cut", "num", "cel", "y", "empty", "adj", "dest", "iter", "p", "tmp", "sol", "i", "flat", "get", "parent", "clean", "tem", "example", "orig", "base", "data", "exec", "v", "wait", "result", "model", "zero", "output", "str", "pt", "Temp", "point", "ic", "partial", "ctrl"], "n": ["f", "nan", "nd", "ne", "nc", "in", "nt", "count", "m", "number", "l", "na", "norm", "g", "v", "t", "c", "num", "d", "y", "ng", "sn", "u", "e", "o", "j", "p", "b", "x", "ns", "en", "w", "N", "pn", "z", "k", "size", " N", "conn", "i", "nor", "nu", "nn", "a", "net"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\\n        \\n        int n = Integer.parseInt(br.readLine());\\n        String[] input = br.readLine().split(\" \");\\n        String s = input[0];\\n        String t = input[1];\\n        StringBuilder ans = new StringBuilder();\\n        \\n        for(int i = 0; i < n; i++){\\n            ans.append(s.charAt(i));\\n            ans.append(t.charAt(i));\\n        }\\n        \\n        out.println(ans);\\n        out.close();\\n        \\n    }\\n}", "target": "200", "substitutes": {"br": ["http", "tr", "ner", "rt", "bh", "ler", "ab", "in", "ref", "bl", "err", "bro", "fr", "io", "erb", "arr", "dr", "server", "mr", "vr", "bar", "buf", "result", "er", "reader", "per", "wr", "rb", "hr", "str", "img", "bb", "b", "cr", "yr", "cb", "ber", "sr", "jar", "or", "stream", "BR", "bridge", "lr", "browser", "Br", "fb", "r"], "out": ["obj", "list", "client", "ch", "name", "string", "st", "in", "log", "err", "group", "code", "socket", "io", "report", "exec", "process", "IN", "up", "app", "write", "bin", "OUT", "reader", "array", "ext", "output", "buffer", "ex", "cm", "word", "o", "info", "builder", "str", "user", "to", "flush", "p", "b", "error", "Out", "w", "file", "println", "pool", "again", "temp", "part", "os", "conn", "writer", "outer", "png", "outs", "over", "parent", "a", "net"], "n": ["f", "h", "nc", "net", "in", "no", "nt", "ni", "count", "m", "number", "l", "c", "d", "num", "y", "network", "sn", "u", "e", "o", "j", "p", "b", "x", "ns", "en", "nb", "w", "N", "len", "z", "k", "mn", "r"], "input": ["comment", "name", "join", "string", "single", "data", "raw", "plus", "Input", "in", "act", "context", "element", "image", "json", "inner", "config", "object", "split", "text", "null", "upload", "up", "it", "form", "first", "entry", "request", "array", "xml", "output", "source", "pull", "submit", "word", "str", "img", "inside", "section", "error", "file", "response", "op", "qa", "ip", "a", "inf", "argument"], "s": ["f", "ts", "h", "string", "is", "sb", "in", "sv", "si", "l", "S", "ss", "types", "c", "d", "su", "ls", "u", "e", "str", "o", "as", "p", "ns", "os", "ins", "ings", "strings", "ses", "rs", "ds", "a"], "t": ["f", "ts", "tr", "string", "rt", "unt", "st", "text", "l", "g", "v", "it", "type", "tt", "d", "y", "u", "o", "str", "pt", "target", "to", "at", "p", "b", "x", "T", "w", "ta", "test", "art", "tf", "a", "r"], "ans": ["ases", "anks", "ANS", "cons", "aves", "string", "ats", "ann", "arts", "ands", "aned", "ays", "anas", "vs", "leans", "ons", "amps", "AN", "acts", "anc", "aces", "cs", "ents", "ads", "aning", "ls", "nas", "aus", "asts", "angs", "offs", "as", "ames", "atan", "olds", "ants", "ares", "sk", "acs", "os", "ks", "ings", "ins", "strings", "ras", "an", "outs", "ars", "ams", "ds", "aos"], "i": ["f", "li", "fi", "I", "vi", "data", "di", "in", "ri", "length", "id", "key", "gi", "index", "ai", "io", "ji", "si", "block", "l", "ui", "phi", "v", "it", "c", "ie", "page", "y", "uri", "u", "pi", "o", "info", "e", "j", "ii", "qi", "ti", "hi", "b", "oi", "x", "slice", "abi", "ci", "ip", "xi", "init", "iu", "ix", "multi", "bi", "a"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int a = Integer.parseInt(sc.next());\\n        int b = Integer.parseInt(sc.next());\\n        int c = Integer.parseInt(sc.next());\\n        int n = Integer.parseInt(sc.next());\\n        int[] nums = {a,b,c};\\n        Arrays.sort(nums);\\n        int n_times = 0;\\n        for (int i = 0; i < n; i++) {\\n            nums[2] = nums[2] * 2;\\n        }\\n        System.out.println(nums[0] + nums[1] + nums[2]);\\n    }\\n}\\n", "target": "201", "substitutes": {"sc": ["parse", "ner", "ch", "cont", "osc", "mc", " Sc", "nc", "sche", "cle", "cv", "cc", "bc", "esc", "asc", "pc", "cam", "ss", "sec", "anc", "scope", "cus", "SC", "se", "scan", "uc", "cs", "sw", "cl", "ctx", "com", "cor", "this", "usc", "Sc", "system", "dc", "sci", "ku", "cr", "ocr", "sf", "src", "sync", "cer", "sr", "enc", "soc", "sp", " SC", "sch", "sh", "parser", "ec", "tc", "squ", "cur", "coll", "ser", "lc"], "a": ["f", "h", "A", "ab", "oa", "m", "ai", "l", "ac", "ea", "ba", "da", "area", "ca", "aa", "asa", "d", "y", "ar", "u", "e", "s", "p", "sa", "x", "as", "art", "an", "ae", "ada", "alpha", "la", "r"], "b": ["f", "pb", "h", "sb", "ab", "bc", "l", "B", "ba", "v", "g", "aa", "d", "y", "rb", "u", "e", "o", "j", "lb", "bb", "s", "p", "x", "nb", "cb", "bs", "k", "fb", "r"], "c": ["f", "h", "cf", "cy", "m", "count", "cc", "l", "v", "cs", "uc", "d", "y", "u", "e", "o", "j", "cn", "s", "p", "x", "C", "cr", "cb", "w", "q", "cu", "z", "ci", "k", "size", "lc", "r"], "n": ["f", "ne", "nc", "net", "nt", "count", "m", "number", "l", "g", "v", "t", "d", "y", "network", "u", "e", "o", "j", "s", "p", "x", "ns", "en", "nb", "w", "N", "len", "z", "k", "nn", "r"], "nums": ["nubs", " nups", "locups", "unums", "nups", " num", " numps", "nodes", "unumps", "nrams", "cubs", "nummies", " nodes", "cum", "cls", "nls", "unems", "codes", " nrams", "numls", " nummies", "numps", "cnumbers", "cnums", "cups", " nems", "Nubs", "numbers", "num", "cumbers", "cnems", "numumbers", "numums", "cummies", "cumps", "cnodes", "locumbers", " namps", "locums", "nems", " nls", "cums", " nubs", "locummies", "cems", " numbers", "Nums", "camps", "Num", "Numps", "Numbers", "Nrams", "unumbers", "numamps", "crams", "namps"], "n_times": ["n__times", "n__steps", "n_steps", "nn_times", "nn__blocks", "n__cases", "n_blocks", "nn__steps", "nn__times", "nn__cases", "n2cases", "n__blocks", "n2blocks", "n2steps", "nn_blocks", "nn_steps", "n_cases", "n2times", "nn_cases"], "i": ["f", "li", "fi", "h", "I", "data", "di", "ri", "gi", "m", "ai", "ji", "si", "ui", "mu", "phi", "v", "ie", "d", "uli", "zi", "uri", "u", "e", "info", "j", "pi", "ii", "qi", "p", "ti", "oi", "hi", "abi", "ci", "xi", "ip", "chi", "multi", "bi"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner s = new Scanner(System.in);\\n    int k = s.nextInt();\\n    int x = s.nextInt();\\n    int a=x-k+1,b=x+k;\\n    for(int i=a;i<b;i++)\\n      System.out.print(i+\" \");\\n  }\\n}", "target": "207", "substitutes": {"s": ["f", "ts", "is", "abs", "out", "in", "sb", "ssl", "south", "n", "si", "l", "S", "ss", "ops", "g", "v", "t", "c", "se", "er", "d", "ms", "ls", "es", "u", "e", "o", "js", "xs", "p", "as", "bis", "ns", "sync", "w", "utils", "ws", "ans", "os", "ins", "us", "strings", "ses", "rs", "parser", "fs", "ds", "r"], "k": ["f", "h", "K", "in", "key", "m", "id", "kn", "n", "l", "g", "v", "end", "c", "d", "y", "max", "u", "e", "o", "j", "p", "w", "ak", "sk", "z", "ks", "q", "kw"], "x": ["f", "cross", "h", "working", "xx", "in", "X", "id", "m", "index", "n", "l", "v", "t", "c", "d", "y", "max", "ax", "ex", "u", "e", "j", "xs", "p", "w", "z", "work", "ix", "any", "q"], "a": ["f", "base", "A", "oa", "ad", "ab", "m", "index", "ai", "n", "l", "ac", "ba", "da", "ca", "c", "aa", "d", "y", "u", "e", "o", "j", "sa", "p", "as", "ia", "w", "ak", "ka", "z", "an", "ae"], "b": ["f", "base", "sb", "ab", "bl", "bc", "n", "l", "B", "ba", "v", "g", "end", "c", "d", "y", "mb", "u", "e", "lb", "j", "o", "bb", "p", "nb", "cb", "w", "z", "bs", "bi", "fb"], "i": ["f", "li", "fi", "I", "di", "ri", "gi", "id", "number", "index", "ai", "io", "ji", "si", "step", "ui", "mu", "phi", "it", "end", "c", "zi", "pi", "u", "o", "j", "e", "info", "ii", "qi", "ti", "hi", "oi", "p", "slice", "abi", "ini", "start", "z", "ci", "mi", "iu", "ip", "xi", "ix", "chi", "multi", "bi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tString S;\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tS = sc.next();\\n\t\tint minIndex = 0;\\n\t\tint maxIndex = S.length() - 1;\\n\t\twhile (minIndex < maxIndex) {\\n\t\t\tif (S.charAt(minIndex++) != S.charAt(maxIndex--)) {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\tSystem.exit(0);\\n\t\t\t}\\n\t\t}\\n\t\tminIndex = 0;\\n\t\tmaxIndex = (S.length() - 1) / 2 - 1;\\n\t\twhile (minIndex < maxIndex) {\\n\t\t\tif (S.charAt(minIndex++) != S.charAt(maxIndex--)) {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\tSystem.exit(0);\\n\t\t\t}\\n\t\t}\\n\t\tminIndex = (S.length() + 3) / 2 - 1;\\n\t\tmaxIndex = S.length() - 1;\\n\t\twhile (minIndex < maxIndex) {\\n\t\t\tif (S.charAt(minIndex++) != S.charAt(maxIndex--)) {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\tSystem.exit(0);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(\"Yes\");\\n\t\tsc.close();\\n\t}\\n\\n}", "target": "123", "substitutes": {"S": ["Start", "DS", "L", "Si", "Rs", "NS", "SN", "Sys", "Spec", "OS", "U", "M", "Single", "Part", "Standard", "WS", "GS", "Sort", "O", "Sign", "Js", "K", "Files", "X", "P", "Sin", "URI", "Server", "RS", "Es", "D", "Service", "Os", "VS", "Su", "F", "You", "V", "STR", "Location", "Sl", "Ns", "G", "Session", "Source", "Socket", "Less", "Services", "Section", "Sync", "Default", "FS", "SB", "s", "R", "SS", "TS", "The", "Sing", "N", "Fs", "Space", "Text", "Same", "Test", "SI", "Contents", "JS", "SA", "St", "Win", "Is", "Q", "Old", "H", "Sample", "Series", "Support", "Ws", "SC", "Site", "Unit", "Sc", "Sub", "T", "C", "SE", "Client", "Ds", "OSS", "Ins", "Prev"], "sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "out", "sb", "pl", "proc", "cv", "cc", "bc", "esc", "asc", "pc", "cam", "ss", "sec", "server", "anc", "scope", "SC", "se", "c", "scan", "cs", "cl", "ctx", "uc", "sw", "acc", "cor", "Sc", "system", "s", "dc", "sq", "sci", "Scan", "cr", "src", "sf", "sync", "rc", "cer", "enc", "sp", " SC", "sch", "sh", "tc", "cur", "sem", "lc", " scr"], "minIndex": ["maxOffset", " minEx", "posindex", "dateValue", "meanPosition", " minLoop", "maxPosition", "posOffset", "minLength", "MinPosition", "minOut", "minOffset", " minOffset", " minValue", "maxStyle", " minRow", "posIndex", "MinString", "MinOut", " minAddress", "MinIndex", "meanindex", "minInfo", " minStyle", "dateLength", "minindex", "minLoop", "MinStyle", "maxOut", "maxRow", " minindex", "meanOffset", " minPosition", "dateindex", "minEx", "mainCount", "Minindex", "maxInfo", "minAddress", "minString", "minValue", "startindex", "posEx", " minLength", "maxSize", "maxLoop", "MinAddress", "MinSize", "maxCount", "minPosition", "minStyle", "mainIndex", "mainInfo", " minOut", "maxindex", "mainOffset", "startLength", "startValue", " minInfo", "minCount", "maxEx", "meanIndex", "startIndex", "dateIndex", "cleanOffset", "cleanRow", "MinOffset", "maxString", " minString", "MinLoop", " minCount", "cleanindex", "minRow", "minSize", " minSize", "cleanIndex", "maxAddress"], "maxIndex": ["maxOffset", "totalOffset", "totalindex", "minindex", "totalIndex", "maxPoint", "noneOffset", "modOffset", "MAXindex", "axValue", "modindex", "sumInfo", "modIndex", "minPath", " maxSize", "axElement", "sumPoint", "MaxOffset", "MAXSection", "minPoint", "maxLength", " maxOffset", "maxPosition", " maxindex", "axPoint", "Maxindex", "maxValue", "maxPath", " maxPath", "axOffset", "maxElement", "noneInfo", "maxSize", " maxValue", "minSection", "axindex", "MaxIndex", " maxPosition", "noneSection", "minElement", "sumIndex", "MAXPoint", "axPosition", "minOffset", "MAXInfo", " maxElement", "axLength", "noneIndex", "MaxSize", "MaxLength", "fullindex", " maxPoint", " maxLength", "MAXOffset", "sumindex", "axIndex", "minPosition", "axPath", "MaxPosition", "MAXIndex", "fullOffset", "totalSize", "maxInfo", "minInfo", "fullIndex", "maxindex", "maxSection", "minValue"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args){\\n    \\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    int ans = (b-1)/(a-1);\\n    if((b-1)%(a-1)==0) {\\n    \tSystem.out.println(ans);\\n    }else {\\n    \tSystem.out.println(ans+1);\\n    }\\n    }\\n}", "target": "101", "substitutes": {"sc": ["class", "ner", "ch", "osc", "cont", "fc", "mc", " Sc", "nc", "cc", "esc", "bc", "asc", "pc", "exec", "ss", "sec", "na", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "com", "acc", "Sc", "sq", "dc", "sci", "cr", "src", "sf", "sync", "rc", "enc", "soc", "sp", "ci", " SC", "sh", "ec", "tc", "cur", "ser", "lc"], "a": ["f", "base", "am", "ga", "A", "oa", "ad", "ab", "m", "n", "ac", "na", "ba", "ca", "area", "c", "aa", "y", "aj", "va", "pa", "u", "af", "s", "fa", "sa", "as", "x", "p", "w", "z", "i", "an", "ae", "alpha", "la"], "b": ["f", "bf", "h", "br", "base", "sb", "ab", "db", "count", "number", "n", "l", "B", "g", "v", "c", "aa", "d", "y", "pa", "rb", "e", "batch", "bb", "auto", "s", "p", "x", "nb", "w", "z", "bs", "part", "k", "i", "an", "eb", "body", "fb", "r"], "ans": ["ases", "ANS", " scans", "faces", "ats", "ann", "aned", "anon", "lines", "reads", "parts", "anas", "n", "annot", "amps", "acts", "na", "anc", "aces", "cs", "rows", "scan", "errors", "lan", "ls", "es", "ions", "ids", "nas", "aus", "s", "as", "blocks", "x", "books", "ns", "ants", "vers", "os", "anes", "ins", "ks", "ana", "an", "ians", "ars", "annis", "anned", "span"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nclass Main {\\n    public static void main(String[] args) throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer st = new StringTokenizer(br.readLine());\\n        \\n        int N = Integer.parseInt(st.nextToken());\\n        int n=N;\\n        int L = Integer.parseInt(st.nextToken());\\n        String[] arr = new String[N];\\n        int k=0;\\n        while(N--!=0){\\n            arr[k++] = br.readLine();\\n        }\\n        Arrays.sort(arr);\\n        String ans=\"\";\\n        for(int i=0; i<n; i++){\\n            ans+=arr[i];\\n        }\\n\\n        System.out.println(ans);\\n\\n    }\\n}", "target": "224", "substitutes": {"br": ["bf", "tr", "ch", "ner", "rt", "sb", "bh", "ler", "ab", "db", "bl", "err", "bt", "bro", "fr", "bc", "io", "dr", "mr", "vr", "bar", "buf", "bed", "er", "ar", "rb", "hr", "str", "img", "bb", "b", "cr", "yr", "cb", "ber", "sr", "bs", "bd", "sp", "stream", "BR", "cur", "browser", "lr", "Br", "fb", "r"], "st": ["nd", "sta", "inst", "string", "rt", "St", "stri", "sb", "nt", "sv", "bl", "fr", "l", "stand", "ost", "est", "t", "rest", "ST", "se", "first", "d", "sn", "str", "pt", "sts", "s", "sa", "ust", "b", "STR", "stack", "cr", "src", "ast", "sr", "start", "sc", "sl", "set", "sp", "sh", "lt", "std", "ste", "r"], "N": ["NE", "K", "Len", "I", "Z", "Size", "A", "NI", "X", "Ni", "length", "P", "Q", "NS", "H", "S", "Y", "B", "E", "D", "num", "NL", "NO", "W", "J", "F", "V", "R", "NN", "T", "C", "U", "Num", "M", "NA", "Ne", "NR", "Ns", "NT", "O"], "n": ["f", "K", "ne", "Len", "I", "net", "nt", "length", "m", "kn", "l", "v", "c", "d", "NL", "y", "u", "e", "o", "j", "s", "p", "b", "x", "ln", "nl", "en", "ns", "Num", "w", "len", "z", "r"], "L": ["K", "Length", "Len", "I", "Z", "X", "P", "l", "B", "S", "D", "Li", "Lo", "NL", " l", "Line", "J", "F", "CL", "V", "LI", "C", "LL", "M", "len", "O"], "arr": ["obj", "parse", "list", "tr", "ann", "ab", "db", "err", "arch", "fr", "pr", "asc", "dr", "app", "attr", "dat", "aa", "ray", "att", "air", "ar", "aj", "array", "abc", "txt", "str", "aaa", "av", "s", "rar", "yr", "Ar", "au", "rr", "airs", "arc", "arm", "ras", "art", "rs", "coll", "ars", "Array", "adr", "arp", "r"], "k": ["kid", "K", "ko", "Ak", "ik", "ek", "P", "kick", "l", "ck", " K", "v", "ok", "r", "c", "mk", "u", "unk", "j", "p", "b", "ku", "ak", "sk", "z", "work", "ks", "ask", "ki", "ke", "dk", "q", "kw"], "ans": ["ANS", "Ann", "cons", "ats", "ann", "arts", "aned", "anon", "ays", "anas", "leans", "amps", "AN", "ss", "na", "anc", "aos", "aces", "cs", "ents", "ads", "aning", "can", "lan", "ls", "es", "nas", "ids", "aus", "s", "as", "ns", "An", "atan", "ants", "anus", "acs", "os", "ks", "ins", "ara", "ras", "ana", "an", "ars", "ams", "a", "ons"], "i": ["f", "li", "fi", "I", "di", "in", "ri", "ik", "id", "gi", "inner", "index", "ai", "you", "ji", "si", "l", "ui", "v", "it", "adi", "y", "uli", "uri", "u", "e", "o", "j", "pi", "ii", "qi", "p", "hi", "b", "x", "oi", "w", "abi", "ini", "ci", "ip", "xi", "init", "chi", "ix", "bi", "a"]}}
{"code": "import java.util.Scanner;\\n class Main{\\npublic static void main(String[] args){\\n  \\n  Scanner stdIn = new Scanner(System.in);\\n  \\n  int a = stdIn.nextInt();\\n  int b = stdIn.nextInt();\\n  \tif ( a < 10 && b < 10){\\n      System.out.println(a*b);\\n    }else{\\n      System.out.println(-1);\\n      \\n    }\\n}\\n }", "target": "58", "substitutes": {"stdIn": [" constOut", "stdin", "serin", "STDInf", " stdin", "serIn", " STDin", " constIn", " stdInf", " stdIns", "astOut", "adin", " STDIn", " stdOut", "STDIN", "astin", "serIN", "astIn", "stdIns", "adIns", " STDOut", "stdIN", "astIns", "STDIn", "stdInf", " constIN", "serInf", " STDIN", " constin", "stdOut", "adIn", " stdIN", "adOut", "STDin"], "a": ["f", "ama", "am", "off", "ga", "A", "ab", "ad", "oa", "n", "ea", "ac", "ba", "da", "area", "ca", "aa", "c", "asa", "d", "abc", "aj", "va", "pa", "af", "aaa", "bb", "auto", "fa", "sa", "as", "p", "ia", "au", "qa", "mA", "i", "an", "ae", "alpha", "la"], "b": ["f", "bf", "pb", "base", "sb", "abe", "ab", "db", "binary", "bc", "n", "l", "B", "ob", "ba", "v", "fb", "emb", "c", "aa", "d", "y", "abc", "mb", "pa", "rb", "e", "o", "lb", "aaa", "bb", "p", "x", "bis", "nb", "ib", "bs", "bd", "i", "abb", "beta", "be", "bi", "eb", "r"]}}
{"code": "//package code;\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\n/**\\n *\\n * @author Milo\\n */\\npublic class Main {\\n    \\n    static FastReader in = new FastReader();\\n    public static void main(String[] args) {\\n        int t = 1; //in.nextInt();\\n        while (t-- > 0)\\n            solve();\\n    }\\n \\n    public static void solve() {\\n        int a = in.nextInt();\\n        int b = in.nextInt();\\n        System.out.println((a*b));\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n \\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n \\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n \\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n \\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n \\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n \\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n \\n    public static int max(int a, int b) {\\n        return a > b ? a : b;\\n    }\\n \\n    public static int min(int a, int b) {\\n        return a < b ? a : b;\\n    }\\n \\n    public static int gcd(int a, int b) {\\n        return b == 0 ? a : gcd(b, (a % b));\\n    }\\n}\\n", "target": "35", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main\\n{\\n  static long t[];\\n  static long l[];\\n  static long h[];\\n\\n  public static void main(String[] args) throws IOException\\n  {\\n    BufferedReader r = new BufferedReader(new InputStreamReader(System.in), 1);\\n\\n    String s;\\n    String sl[];\\n\\n    s = r.readLine();\\n    sl = s.split(\" \");\\n    int n = Integer.parseInt(sl[0]);\\n    int m = Integer.parseInt(sl[1]);\\n\\n    int a[] = new int[m];\\n    for(int i = 0; i < n; i++)\\n    {\\n      s = r.readLine();\\n      sl = s.split(\" \");\\n      int v = Integer.parseInt(sl[0]);\\n      for(int j = 1; j <= v; j++)\\n      {\\n        int t = Integer.parseInt(sl[j]) - 1;\\n        a[t]++;\\n      }\\n    }\\n\\n    int sum = 0;\\n    for(int i = 0; i < m; i++)\\n    {\\n      //System.out.println(a[i]);\\n      if(a[i] == n)\\n      {\\n        sum++;\\n      }\\n    }\\n    System.out.println(sum);\\n  }\\n\\n}", "target": "169", "substitutes": {"t": ["f", "ts", "tv", "st", "dt", "nt", "g", "it", "c", "type", "tt", "d", "y", "u", "e", "o", "pt", "at", "p", "ot", "b", "x", "T", "w", "tn", "z", "k", "tf", "q"], "l": ["f", "li", "list", "L", "ml", "log", "g", "ll", "cl", "ls", "le", "u", "o", "p", "b", "ln", "nl", "z", "line", "la", "lc", "el", "q"], "h": ["f", "ch", "hs", "ph", "ih", "bh", "help", "oh", "id", "hh", "H", "he", "g", "max", "hr", "x", "rh", "ha", "w", "hl", "gh", "hm", "hp", "z", "k", "sh", "q"], "r": ["parse", "ner", "rt", "rg", "in", "err", "inner", "fr", "c", "rl", "er", "d", "reader", "ar", "re", "rb", "u", "e", "gr", "ur", "p", "R", "b", "rh", "cr", "w", "Reader", "res", "sr", "rc", "or", "rr", "rx", "ro", "nr", "writer", "rs", "ir"], "s": ["f", "string", "is", "input", "sb", "ssl", "comments", "sv", "lines", "gs", "sg", "si", "its", "S", "ss", "ops", "details", "g", "sql", "c", "se", "rows", "sw", "d", "words", "y", "su", "settings", "ls", "spec", "sn", "output", "source", "es", "u", "e", "str", "js", "services", "p", "b", "space", "sets", "ns", "en", "sync", "w", "ps", "tests", "res", "os", "ings", "strings", "ses", "rs", "fs", "ds"], "sl": ["f", "li", "sie", "sle", "ul", "string", "input", "ml", "ssl", "pl", "sv", "bl", "lines", "sal", "shell", "split", "si", "ss", "zip", "ll", "sql", "se", "sw", "cl", "kl", "cel", "wl", "su", "settings", "ls", "sn", "dl", "so", "spl", "serv", "il", "e", "SL", "str", "sil", "le", "source", "loc", "sa", "p", "sf", "sel", "sync", "slice", "sk", "sol", "sp", "Sl", "line", "fl", "sh", "spec", "isl", "la", "lc", "el"], "n": ["f", "net", "in", "nt", "c", "d", "num", "y", "u", "e", "o", "p", "ot", "b", "x", "ns", "ln", "en", "w", "N", "z", "k", "mn", "nn"], "m": ["f", "dim", "mc", "ma", "mu", "g", "c", "d", "ms", "y", "num", "cm", "u", "e", "o", "mm", "p", "b", "x", "om", "w", "M", "hm", "md", "z", "k", "mn", "mi", "tm"], "a": ["ama", "am", "A", "ma", "ea", "ac", "ba", "da", "area", "aa", "c", "array", "va", "u", "e", "o", "pa", "p", "sa", "b", "as", "x", "au", "z", "ta", "ana", "an", "ae", "alpha"], "i": ["eni", "li", "I", "mini", "is", "di", "in", "ik", "ni", "ri", "id", "gi", "ami", "ai", "io", "ji", "si", "ori", "ui", "adi", "it", "ie", "y", "uli", "zi", "uri", "u", "e", "pi", "info", "ii", "qi", "p", "hi", "b", "x", "oi", "abi", "ini", "yi", "ci", "mi", "iu", "ip", "xi", "init", "chi", "ix", "multi", "bi"], "v": ["f", "tv", "vi", "version", "iv", "ev", "sv", "vs", "g", "lv", "c", "d", "y", "uv", "u", "e", "o", "ii", "V", "p", "b", "x", "w", "z", "k", "q"], "j": ["f", "li", "on", "br", "ch", "jj", "vi", "oj", "jp", "off", "di", "err", "key", "pr", "ji", "si", "jc", "ja", "c", "ie", "d", "y", "aj", "next", "u", "e", "o", "J", "js", "ii", "pt", "adj", "p", "b", "x", "z", "part", "k", "fl", "ij", "q"], "sum": [" sums", "div", "ul", "A", "mass", "me", "count", "total", "na", "norm", "mu", "min", "diff", "num", "max", "acc", "all", "len", "mem", "mean", "size", "sh", "average", "ta", "alpha", "um", "Sum"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\t  \\n\tpublic static void main(String args[]) {\\n\t\t    Scanner scanner = new Scanner(System.in);\\n\t\t    \\n\t\t   int count = 0;\\n\t\t   String  s = scanner.nextLine();\\n\t\t   \\n\t\t   for(int i = 0; i < s.length();) \\n\t\t   {\\n\t\t\t   if(s.substring(i, i + 1 ).equals(\"+\"))\\n\t\t\t   {\\n\t\t\t\t   count = count + 1;\\n\t\t\t   }\\n\t\t\t   else \\n\t\t\t   {\\n\t\t\t\t   count = count - 1;\\n\t\t\t   }\\n\t\t\t\ti = i + 1;   \\n\t\t\t\t   \\n\t\t   }\\n\t\t    \\n\t\t   System.out.println(count);\\n\t\t   \\n\t\t    scanner.close(); }\\n\t\t  }", "target": "54", "substitutes": {"scanner": ["scanker", "caner", "aner", "anener", "Scanter", "verener", "Scanning", "scanener", "Scanner", "Scaner", "Scanker", " scaner", "Scanener", "canener", "nerker", "caninner", "canter", "aninner", "verner", "scanter", "Scaninner", "canker", "anner", "verer", "nerner", "verning", "scaninner", "scanning", " scanener", "scaner", "nerer", " scanning", "canner", "nerter"], "count": ["time", "list", "level", "allow", "name", "base", "string", "data", "Count", "length", "log", "id", "limit", "code", "number", "index", "ignore", "key", "default", "n", "total", "last", "sum", "diff", "more", "deep", "c", "type", "first", "weight", "counter", "info", "cache", "handle", "depth", "p", "error", "child", "start", "len", "col", "size", "found", "coll", "check", "parent", "force"], "s": ["f", "ts", "string", "data", "is", "input", "sb", "in", "aws", "gs", "n", "si", "l", "S", "ss", "g", "v", "c", "ms", "su", "ls", "es", "source", "u", "e", "str", "qs", "services", "p", "as", "b", "ns", "w", "ps", "ws", "os", "ins", "strings", "ses", "fs", "ds", "a", "r"], "i": ["f", "eni", "li", "h", "I", "base", "data", "di", "in", "ri", "length", "ni", "gi", "m", "index", "id", "ai", "key", "io", "si", "l", "ori", "ui", "phi", "v", "t", "end", "c", "area", "d", "uri", "next", "pi", "u", "info", "o", "j", "e", "ii", "api", "qi", "hi", "p", "oi", "x", "pass", "slice", "ini", "start", "ci", "ip", "xi", "iu", "chi", "ix", "multi", "bi", "a"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\\n\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\tint N = scanner.nextInt();\\n\t\tlong ans = 0;\\n\\n\t\tfor (int i = 1; i <= N; i++) {\\n\\n\t\t\t//3\u306e\u500d\u6570\u3067\u3082\u3042\u308a5\u306e\u500d\u6570\u3067\u3082\u3042\u308b\u5834\u5408\\n\t\t\tif (i % 3 == 0 && i % 5 == 0) {\\n\t\t\t\\n\t\t\t}\\n\\n\t\t\t//3\u306e\u500d\u6570\u306e\u5834\u5408\\n\t\t\telse if (i % 3 == 0) {\\n\t\t\t\t\\n\t\t\t}\\n\t\t\t//5\u306e\u500d\u6570\u306e\u5834\u5408\\n\t\t\telse if (i % 5 == 0) {\\n\t\t\t\t\\n\t\t\t//3\u30685\u306e\u500d\u6570\u4ee5\u5916\u306e\u5834\u5408\\n\t\t\t} else {\\n\t\t\t\t\\n\t\t\t\tans += i;\\n\\n\t\t\t}\\n\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\\n\t\tscanner.close();\\n\t}\\n}\\n", "target": "55", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tif(N<=111)System.out.println(111);\\n\t\telse if(112<=N && N <=222)System.out.println(222);\\n\t\telse if(223<=N && N <=333)System.out.println(333);\\n\t\telse if(334<=N && N <=444)System.out.println(444);\\n\t\telse if(445<=N && N <=555)System.out.println(555);\\n\t\telse if(556<=N && N <=666)System.out.println(666);\\n\t\telse if(667<=N && N <=777)System.out.println(777);\\n\t\telse if(778<=N && N <=888)System.out.println(888);\\n\t\telse if(889<=N && N <=999)System.out.println(999);\\n\t\tsc.close();\\n\t}\\n\\n}", "target": "106", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "out", "sb", "pl", "proc", "esc", "bc", "cc", "pc", "ss", "scope", "con", "SC", "c", "scan", "se", "cs", "sw", "cl", "uc", "acc", "Sc", "system", "sq", "sub", "sci", "cr", "sync", "rc", "cer", "enc", "soc", "sp", " SC", "ct", "sch", "sh", "parser", "tc", "cur", "sem", "screen", "lc"], "N": ["CN", "NE", "G", "K", "Len", "I", "L", "Z", "Size", "Name", "EN", "NI", "X", " n", "Node", "P", "Q", "SN", "NS", "H", "GN", "n", "NC", "UN", "S", "Y", "B", "IN", "DN", "E", "D", "NL", "NO", "OUT", "None", "MN", "W", "J", "F", "V", "No", "NG", "NM", "R", "NB", "NP", "NN", "C", "T", "Num", "U", "M", "NA", "Ne", "NR", "RN", "Ns", "ND", "NT", "O", "KN", "Wh"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String args[]) throws Exception{\\n\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString[] line = br.readLine().split(\" \");\\n\\n\t\tint d = Integer.parseInt(line[0]);\\n\t\tint n = Integer.parseInt(line[1]);\\n\\n\t\tint n1 = 0;\\n\t\tint n2 = 0;\\n\\n\t\tif(n>=(100^2)){\\n\t\t\tn2 = n/((int)Math.pow(100,2));\\n//\t\t\tSystem.out.println(n2);\\n\t\t}\\n\t\tif(n>=100){\\n\t\t\tn1 = n/100 ;\\n//\t\t\tSystem.out.println(n2);\\n\t\t}\\n\t\tn = n+n1+n2;\\n\\n\t\tSystem.out.println((int)Math.pow(100,d)*n);\\n\\n\\n\t}\\n}\\n", "target": "245", "substitutes": {"br": ["obj", "tr", "ner", "div", "string", "bh", "ler", "ctr", "bl", "err", "fr", "io", "erb", "arr", "dr", "B", "mr", " Br", "result", "buf", "er", "reader", "ar", "rb", "gr", "hr", "str", "HR", "p", "b", "cr", "yr", "cb", "Reader", "res", "ber", "nr", "stream", "BR", "nor", "browser", "lr", "bridge", "Br", "r"], "line": ["f", "parse", "band", "comment", "name", "none", "cell", "string", "plus", "data", "input", "lin", "cle", "log", "lines", "code", "shell", "object", "split", "l", "message", "block", "end", "se", "nice", "page", "entry", "inline", "buffer", "source", "Line", "le", "str", "user", "frame", "link", "iter", "p", "strip", "row", "pass", "file", "sync", "response", "sl", "header", "i", "look", "day", "LINE", "lc"], "d": ["cd", "f", "nd", "dim", "sd", "dt", "in", "ad", "id", "m", "t", "c", "D", "e", "depth", "dn", "dc", "p", "b", "x", "md", "z", "i", "ds"], "n": ["f", "h", "net", "in", "nt", "count", "m", "number", "l", "g", "v", "t", "c", "num", "y", "network", "sn", "u", "e", "o", "j", "s", "p", "b", "x", "ns", "en", "nb", "w", "N", "z", "k", "size", "i", "nn", "a", "r"], "n1": [" n3", "j3", "j1", "p3", "j2", "n3", "p1", "p2"], "n2": ["d2", "n62", "p2", "nb2", "NTwo", "N2", "nTwo", "p62", "d1", " nTwo", "nbTwo", "nb1", "N1", "d62", "p1", " n62"]}}
{"code": "\\n\\nimport java.io.BufferedOutputStream;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.math.BigInteger;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n\t\\n\tpublic static class FastReader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer st;\\n\t\\n\\n\t\tpublic FastReader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\\n\t\tString next() {\\n\t\t\twhile (st == null || !st.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (Exception r) {\\n\t\t\t\t\tr.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());//converts string to integer\\n\t\t}\\n\\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (Exception r) {\\n\t\t\t\tr.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t}\\n\t\\n\tpublic static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));\\n    public static long mod = (long) (1e9+7);\\n    public final static int MAX = (int)1e5;\\n  // static Scanner sc = new Scanner(System.in);\\n   static List<Integer>[] edge;\\n\tpublic static void main(String[] args) {\\n\t   \\n\t FastReader sc = new FastReader();\\n\tint n = sc.nextInt();\\n\tdouble[] r = new double[n];\\n\tfor(int i=0;i<n;++i) r[i] = sc.nextDouble();\\n\tdouble ans = 0.0;\\n\tfor(int i=0;i<n;++i) {\\n\t\tans += 1/r[i];\\n\t}\\n\tout.print(1/ans);\\n\t\tout.close();\\n\t}\\n\t\\n\t\\n}\\n", "target": "120", "substitutes": {"br": ["obj", "bf", "tr", "ch", "rt", "jp", "sb", "ler", "bh", "ab", "db", "bl", "err", "bt", "bro", "fr", "bc", "pr", "arr", "dr", "B", "mr", "bp", "bar", "buf", "rb", "gr", "hr", "str", "ur", "bb", "b", "cr", "src", "cb", "ber", "jar", "front", "bd", "sp", "BR", "cur", "bridge", "browser", "Br", "fb", "r"], "st": ["store", "sta", "tr", "inst", "string", "rt", "St", "stri", "sb", "nt", "bl", "contract", "bt", "ut", "stable", "pr", "ist", "ss", "ost", "est", "t", "rest", "ST", "se", "style", "sw", "cl", "fe", "sty", "sn", "ft", "ace", "str", "pt", "sts", "ld", "stop", "sa", "ust", "strip", "cr", "src", "ast", "start", "pe", "sr", "sc", "sl", "sp", "struct", "ct", "rd", "const", "art", "be", "std", "ste", "sth", "sign", "r"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tList<Integer> cards = new ArrayList<Integer>();\\n\t\tfor(int i = 0;i < n ;i++) {\\n\t\t\tcards.add(sc.nextInt());\\n\t\t}\\n\t\tCollections.sort(cards);\\n\t\tCollections.reverse(cards);\\n\t\tint ans = 0;\\n\t\tfor(int i = 0;i < n;i++) {\\n\t\t\tif(i % 2 == 0) ans += cards.get(i);\\n\t\t\telse ans -= cards.get(i);\\n\t\t}\\n\t\tSystem.out.println(ans);\\n        sc.close();\\n\t}\\n}", "target": "132", "substitutes": {"sc": ["ner", "ch", "osc", "mc", "nc", "sche", "sb", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "server", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "cus", "uc", "spec", "Sc", "system", "sci", "cr", "src", "cb", "sync", "rc", "cer", "enc", "ci", "sp", " SC", "sch", "sh", "parser", "ec", "cur", "tc", "coll", "sem", "ser", "lc", "sign"], "n": ["f", "nan", "h", "name", "nc", "in", "nt", "count", "m", "l", "v", "t", "c", "d", "num", "network", "y", "sn", "u", "e", "o", "j", "cn", "s", "p", "b", "x", "ns", "nl", "en", "nb", "w", "ln", "N", "len", "z", "k", "nn", "net"], "cards": ["grades", "cross", "center", "cf", "events", "cons", "letters", "shape", "plus", "data", "context", "comments", "attacks", "lines", "orders", "collection", "cc", "circ", "lights", "codes", "config", "groups", "months", "cart", "breakers", "games", "breaks", "ward", "cs", "c", "rows", "ards", "words", "features", "users", "array", "lc", "ions", "ids", "counter", "rules", "cells", "card", "ries", "blocks", "books", "Card", "cas", "packs", "cycles", "tests", "balls", "checks", "wards", "yards", "friends", "styles", "stars", "lists", "caps", "cats", "ips", "ends", "cuts", "kids", "pieces", "fields", "files", "cases", "clips", "posts", "sequence"], "i": ["f", "li", "fi", "I", "di", "in", "ri", "ni", "id", "gi", "index", "inner", "ai", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "it", "t", "c", "ie", "uri", "zi", "pi", "e", "o", "u", "j", "info", "ii", "qi", "hi", "ti", "b", "x", "oi", "p", "slice", "ini", "ci", "mi", "ip", "iu", "xi", "init", "chi", "ix", "multi", "bi", "my", "a"], "ans": ["ations", "anks", "ANS", "cons", " scans", "anch", "ats", "ils", "ains", "ann", "arts", "aned", "ni", "reads", "ai", "ays", "ani", "ores", "ons", " plans", "amps", " means", "ss", "ops", "na", "anc", "acts", "cus", "ents", "cs", "scan", " signs", "can", "lan", "plan", "ls", "es", "ions", "ids", "nas", "actions", "aus", "als", "offs", "as", " cases", "ns", "cas", "ants", "vers", "sk", " spans", "eps", "acs", "os", "anes", "ins", "ks", "ings", "ends", "an", "ians", "outs", "ars", "ips", "ana", "span"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tpublic static void main(String arga[]){\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString a = sc.next(); \\n\t\tString b = \"ABC\";\\n\t\tString c = \"ARC\";\\n\t\t\\n\t\tif(a.equals(b)){\\n\t\t\tSystem.out.println(\"ARC\");\\n\t\t}\\n\t\telse if(a.equals(c)){\\n\t\t\tSystem.out.println(\"ABC\");\\n\t\t}\\n\t\t\\n\t}\\n}\\n", "target": "153", "substitutes": {"arga": [" argA", "argsa", "args1", "Arg1", "Arge", "argse", "Args1", " arge", "ArgA", "argsA", "Argsa", "ArgsA", " arg1", "Arga", "Argse"], "sc": ["ner", "osc", "ch", "mc", "nc", "ga", "search", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "scope", "ca", "SC", "se", "scan", "uc", "cs", "cl", "sw", "spec", "acc", "Sc", "sub", "sci", "ocr", "sync", "src", "rc", "enc", "soc", "sp", "ci", "sh", "ec", "desc", "lc"], "a": ["f", "am", "ga", "A", "ab", "ad", "ack", "ai", "n", "cca", "ea", "ac", "na", "home", "ba", "ca", "area", "aa", "abc", "ar", "array", "va", "u", "af", "aaa", "api", "auto", "sa", "as", "p", "access", "aura", "au", "ata", "ana", "an", "ae", "alpha", "la"], "b": ["f", "bf", "pb", "sb", "db", "ab", "bas", "bc", "n", "B", "wb", "ob", "ba", "fb", "ca", "aa", "d", "abc", "xb", "rb", "u", "e", "lb", "bb", "p", "x", "nb", "cb", "bs", "bd", "be", "ae", "bi", "eb", "r"], "c": ["cd", "f", "cf", "ab", "cy", "cc", "bc", "unc", "l", "ac", "anc", "v", "ca", "cs", "uc", "d", "abc", "ce", "u", "e", "cn", "dc", "cr", "C", "cb", "cu", "ci", "arc", "cp", "ec", "lc"]}}
{"code": "import java.util.HashMap;\\nimport java.util.Scanner;\\n\\n// https://atcoder.jp/contests/abc163/tasks/abc163_c\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tHashMap<Integer, Integer> map = new HashMap<>();\\n\t\tfor (int i = 1; i < n; i++) {\\n\t\t\tint str = sc.nextInt();\\n\t\t\tif (map.containsKey(str)) {\\n\t\t\t\tmap.put(str, map.get(str)+1);\\n\t\t\t} else {\\n\t\t\t\tmap.put(str, 1);\\n\t\t\t}\\n\t\t}\\n\t\tsc.close();\\n\\n\\n\t\tfor(int i=1;i<=n;i++) {\\n\t\t\tif(map.get(i)==null) {\\n\t\t\t\tSystem.out.println(0);\\n\t\t\t}else {\\n\t\t\t\tSystem.out.println(map.get(i));\\n\t\t\t}\\n\\n\t\t}\\n\t}\\n}\\n", "target": "12", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\t\\n\t\tint n = in.nextInt();\\n        int nam[] = new int[n];\\n        int flag = 0;\\n      \\n      for(int i = 0; i < n ;i++){\\n      \tnam[i] = in.nextInt();\\n      }\\n      \\n      int bh = -999;\\n      for(int i = 0;i < n ; i++){\\n      if(bh<=nam[i]-1){\\n       \tnam[i] -= 1 ;\\n      }else if(bh<=nam[i]){\\n       \tnam[i] = nam[i];\\n      }else{\\n      \tflag = 1;\\n        break;\\n      }\\n        bh = nam[i];\\n    }\\n\\n\tif(flag==1){\\n     \tSystem.out.print(\"No\"); \\n    }else{\\n     \tSystem.out.print(\"Yes\"); \\n    }\\n      \\n\t}\\n}\\n", "target": "74", "substitutes": {"in": ["f", "h", "rec", "cin", "is", "input", "out", "lin", "token", "container", "log", "err", "cli", "din", "id", "thin", "inner", "pin", "image", "readable", "nin", "l", "IN", "inn", "g", "diff", "con", "c", "scan", "bin", "reader", "kin", "isin", "inc", "source", "ex", "re", "s", "p", "as", "b", "ln", "pass", "rin", "vin", "sin", "ini", "login", "win", "again", "ins", "conn", "connection", "init", "inet", "In", "gin", "inf", "a", "r"], "n": ["f", "nan", "h", "ne", "name", "nc", "net", "nt", "ni", "count", "m", "l", "v", "t", "c", "num", "d", "y", "network", "sn", "u", "e", "o", "j", "s", "dn", "p", "b", "x", "ns", "ln", "nb", "en", "w", "N", "len", "z", "k", "size", "nn", "r"], "nam": ["nan", "nm", "names", "sim", "sam", "name", "dim", "miss", "make", "am", "ann", "lam", "param", "prefix", "dam", "index", "config", "non", "sem", "cam", "null", "month", "inn", "na", "gram", "sum", "com", "hom", "bin", "num", "nav", "sit", "array", "sn", "ram", "lab", "mix", "nas", "nw", "ban", "np", "cn", "dn", "aim", "b", "bang", " dim", "ns", "san", "cas", "sin", "im", "mom", "iam", "amin", "comb", "tim", "an", "fam", "ham", "gin", "nn", "imag", "sym", "span"], "flag": ["f", "kind", "fi", "bf", "band", "fd", "arg", "ish", "di", "group", "id", "lf", "Flag", "key", "lag", "code", "count", "py", "like", "sign", "type", "style", "bug", "bin", "ff", "bit", "fun", "weight", "age", "lb", "die", "af", "flags", "year", "field", "offset", "status", "letter", "ind", "ig", "nl", "fat", "start", "bot", "len", "part", "big", "FLAG", "tag", "bi", "std", "force"], "i": ["f", "li", "fi", "name", "I", "di", "ik", "ni", "ri", "gi", "id", "cli", "index", "ai", "io", "ji", "si", "ori", "ui", "mu", "phi", "v", "it", "c", "ie", "y", "uri", "u", "pi", "e", "o", "j", "info", "ii", "api", "qi", "ei", "hi", "p", "b", "x", "oi", "ti", "slice", "abi", "ini", "ci", "mi", "iu", "ip", "xi", "init", "chi", "ix", "multi", "bi", "a"], "bh": ["hn", "bf", "pb", "h", "br", "ph", "ih", "sb", "nah", "bl", "lf", "bt", "id", "hh", "pr", "ji", "aph", "hap", "phi", "bp", "ah", "adh", "kh", "lb", "bb", "hi", "p", "b", "bang", "rh", "nl", "nb", "ha", "abi", "hl", "bot", "ib", "hab", "gh", " bi", "sh", "abb", "uh", "zh", "bal", "bi", "sth"]}}
{"code": "// ABC152\u306eB\u554f\u984c\\nimport java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = Integer.parseInt(sc.next());\\n        int b = Integer.parseInt(sc.next());\\n\\n        if(a >= b) {\\n            for(int i = 0; i < a; ++i) {\\n                System.out.printf(\"%d\", b);\\n            }\\n        }\\n        else {\\n            for(int i = 0; i < b; ++i) {\\n                System.out.printf(\"%d\", a);\\n            }\\n        }\\n\\n    }\\n}\\n", "target": "24", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString w = sc.next();\\n\t\tchar[] c = w.toCharArray();\\n\t\tchar[] moji = new char[26];\\n\t\tchar a = 'a';\\n\t\tint count = 0;\\n\\n\t\t for (int i = 0; i < moji.length; i++){\\n\t\t        moji[i] = a++;\\n\t\t    }\\n\\n\t\tfor (int j = 0; j < moji.length; j++) {\\n\t\t\tfor (int i = 0; i < c.length; i++) {\\n\t\t\t\tif(c[i] == moji[j]) {\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tif(count % 2 != 0) {\\n\t\t\t\tSystem.out.print(\"No\");\\n\t\t\t\tSystem.exit(0);\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.print(\"Yes\");\\n\t}\\n}\\n", "target": "103", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "out", "nt", "iss", "esc", "bc", "asc", "pc", "si", "sec", "scope", "g", "cus", "SC", "se", "scan", "sw", "cs", "cl", "uc", "Sc", "system", "s", "sci", "cr", "ocr", "src", "rc", "sync", "enc", "ci", "sp", " SC", "sch", "sh", "cur", "desc", "r"], "w": ["f", "h", "string", "wp", "hw", "out", "wx", "wt", "CW", "tw", "wi", "wb", "aw", "v", "t", "sw", "ew", "words", "y", "wl", "war", "u", "W", "word", "s", "p", "b", "wal", "fw", "wh", "ws", "wan", "wa", "work", "k", "writer", "rw", "we", "r"], "c": ["f", "h", "ch", "co", "m", "code", "cc", "n", "l", "ac", "g", "v", "cs", "d", "y", "u", "e", "o", "loc", "s", "p", "b", "x", "C", "rc", "cu", "col", "z", "ci", "k", "arc", "lc", "r"], "moji": ["poji", "boji", " mobi", "kojo", "nooji", " mooji", "moja", "choja", "amoza", "amoji", "amobi", "koja", "kooji", "boza", "kobi", "choji", "haja", "haoji", "koji", "mobi", "haji", "pojo", "amooji", "chojo", "noji", "amoja", "moza", "noja", "poza", "mooji", "hajo", "poja", "booji", " moja", "amojo", " mojo", "bojo", "mojo", "pooji", "chooji", "nojo"], "a": ["ama", "am", "ga", "A", "ad", "ai", "n", "ea", "ac", "na", "ba", "ca", "area", "aa", "va", "pa", "e", "o", "u", "aaa", "api", "at", "sa", "as", "b", "ia", "all", "p", "ata", "xa", "alias", "ana", "ada", "ae", "alpha", "la"], "count": ["f", "time", "list", "h", "allow", "name", "base", "nt", "Count", "length", "match", "id", "number", "code", "limit", "key", "low", "index", "n", "total", "order", "v", "sum", "more", "num", "y", "max", "weight", "age", "counter", "info", "year", "depth", "p", "b", "ind", "child", "start", "len", "z", "size", "part", "coll", "found", "now", "check", "second"], "i": ["f", "eni", "li", "h", "I", "vi", "di", "in", "ri", "ni", "ik", "id", "gi", "m", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "it", "ie", "y", "zi", "uri", "u", "pi", "o", "e", "api", "ii", "ei", "qi", "ti", "p", "b", "oi", "x", "hi", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "ix", "ki", "bi"], "j": ["f", "uj", "li", "h", "ch", "jj", "jl", "jo", "jp", "length", "m", "ji", "n", "si", "l", "jc", "v", "g", "ja", "y", "aj", "u", "e", "o", "J", "js", "ii", "qi", "p", "b", "x", "oi", "ind", "q", "z", "ci", "k", "ij", "oji"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        int C = sc.nextInt();\\n        int D = sc.nextInt();\\n\\n        System.out.println(solve(A, B, C, D));\\n\\n        sc.close();\\n    }\\n\\n    static int solve(int A, int B, int C, int D) {\\n        return Math.max(0, Math.min(B, D) - Math.max(A, C));\\n    }\\n}", "target": "47", "substitutes": {"sc": ["class", "parse", "osc", "ch", "cont", "mc", " Sc", "nc", "sche", "sb", "cv", "search", "esc", "bc", "cc", "asc", "pc", "ser", "text", "cam", "ss", "sec", "scope", "app", "cus", "SC", "se", "c", "scan", "sw", "cl", "uc", "ctx", "cs", "str", "Sc", "system", "sq", "sub", "dc", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "sp", " SC", "sch", "conn", "sh", "ec", "tc", "cur", "parser", "coll", "desc", "lib", "lc"], "A": ["AW", "G", "Ant", "Ad", "Az", "I", "L", "AA", "Java", "Ak", "BB", "AS", "This", "AD", "API", "P", "HA", "Y", "S", "AB", "As", "EA", "ACC", "E", "IA", "Ang", "Ab", "AP", "Ma", "Area", "F", "BA", "At", "CA", "Ca", "AC", "AF", "T", "U", "Ar", "Alpha", "LA", "AR", "mA", "Ac", "AY", "Na", "a"], "B": ["G", "I", "L", "BB", "BD", "DB", "Class", "P", "GB", "Beta", "AB", "UB", "E", "BE", "TB", "W", "BI", "SB", "LB", "F", "MB", "BA", "V", "R", "b", "T", "U", "WB", "N", "M", "BBC", "Rob", "Part", "Bs", "BC", "Bu", "O", "OB"], "C": ["O", "G", "K", "I", "L", "CM", "X", "P", "Y", "S", "Cr", "Con", "E", "c", "SC", "CF", "CI", "W", "Sc", "F", "Ch", "V", "Cs", "CA", "R", "AC", "T", "CR", "U", "N", "M", "Cu", "CS", "CC", "DC", "CE", "CU", "BC", "CD"], "D": ["O", "DX", "G", "DS", "DM", "L", "DA", "BD", "Di", "DB", "X", "AD", "P", "Q", "Dir", "H", "Y", "S", " d", "DF", "E", "Dou", "d", "FD", "DH", "Diff", "Def", "DI", "W", "F", "V", "Do", "R", "JD", "T", "DP", "U", "M", "N", "Dr", "Ds", "Part", "DC", "DD", "CD"]}}
{"code": "import java.util.*;\\nclass Main{\\n    public static void main(String[]args){\\n        Scanner scanner = new Scanner(System.in);\\n        int K = scanner.nextInt();\\n        String S = scanner.next();\\n        char[] split_S = new char [S.length()];\\n        for(int i=0;i<S.length();i++){\\n            split_S[i] = S.charAt(i);\\n        }\\n        if(S.length() <= K){\\n            for(int i=0;i<S.length();i++){\\n                if(i != i-1){\\n                    System.out.print(split_S[i]);\\n                }\\n                else{\\n                    System.out.println(split_S[i]);\\n                }\\n            }\\n        }\\n        else{\\n            for(int i=0;i<S.length();i++){\\n                if(i != K-1){\\n                    System.out.print(split_S[i]);\\n                }\\n                else{\\n                    System.out.println(split_S[i]+\"...\");\\n                    break;\\n                }\\n            }\\n        }\\n\\n        scanner.close();\\n    }\\n}", "target": "248", "substitutes": {"scanner": ["analyline", "cancher", "analyner", "caner", "cankeeper", "Scanter", " scankeeper", "Scankeeper", "inning", "Scanning", "nerener", "scanener", "inner", "Scanner", "Scaner", "nercher", "Scancher", " scaner", "Scanener", "canener", "caninner", "scanline", " scanline", "canter", "ininner", "scanter", "analyer", "Scaninner", " scanter", "iner", "analyinner", "canning", "nerner", "scankeeper", "scaninner", "scanning", "scancher", "scaner", "nerer", " scaninner", "canner", "Scanline"], "K": ["KB", "G", "KC", "I", "L", "Z", "PK", "A", "SK", "X", "KR", " k", "P", "Q", "H", "KS", "Y", "B", "E", "D", "W", "J", "F", "V", "R", "T", "C", "KI", "U", "KK", "M", "N", "k", "KE", "O"], "S": ["SA", "DS", "I", "Session", "L", "Si", "Source", "Files", "AS", "SK", "Socket", "SO", "ITS", "P", "JSON", "SN", "NS", "Sync", "Sample", "Series", "BS", "Windows", "RS", "SC", "ST", "VS", "SER", "FS", "Service", "Os", "Site", "D", "None", "OS", "SL", "Su", "Unit", "F", "V", "s", "IS", "STR", "T", "SS", "The", "U", "SE", "N", "TS", "CS", "SU", "M", "SR", "Text", "Single", "Sl", "Part", "C", "PS", "ESS", "SP", "SM", "CSS", "Standard", "GS", "SI", "O", "JS"], "split_S": ["split_C", " split_String", "splitJS", " split_TEXT", " splitJSS", "split_D", " split_WS", "splitJs", " splitJN", " split_Sample", "split_SS", " split_NS", " split_D", " split_SA", "split_Sample", " split_C", "split_N", " split_N", " split_K", "split_s", "splitJSS", " splitJS", "split_K", " split_SS", "split_NS", "split_TEXT", "split_WS", "split_SA", "split_String", " split_s", "splitJN", " splitJs"], "i": ["f", "eni", "mini", "is", "off", "in", "gi", "m", "code", "l", "mu", "t", "idi", "c", "uri", "api", "ii", "qi", "oi", "iu", "init", "multi", "a", "vi", "one", "di", "ri", "ai", "it", "adi", "u", "j", "iii", "hi", "ini", "z", "ci", "mi", "ix", "ki", "bi", "lc", "li", "fi", "I", "id", "index", "ji", "ui", "phi", "page", "y", "zi", "e", "o", "ei", "s", "p", "ti", "b", "slice", "yi", "k", "chi", "cli", "ni", "length", "io", "n", "si", "ori", "v", "ie", "d", "pi", "info", "x", "w", "abi", "ip", "xi"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    private static final String YES = \"Yes\";\\n    private static final String NO = \"No\";\\n\\n    public static void main(String[] args) {\\n        TestCase testCase = readFromInput();\\n\\n        final String result = process(testCase);\\n\\n        output(result);\\n    }\\n\\n    private static TestCase readFromInput() {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int N = sc.nextInt();\\n        List<Integer> L = new ArrayList<>();\\n        for (int i = 0; i < N; ++i) {\\n            L.add(sc.nextInt());\\n        }\\n\\n        sc.close();\\n        return new TestCase(N, L);\\n    }\\n\\n    public static String process(TestCase testCase) {\\n        List<Integer> L = testCase.L;\\n\\n        int largest = 0;\\n        int sum = 0;\\n\\n        for (int side : L) {\\n            largest = Math.max(largest, side);\\n            sum += side;\\n        }\\n\\n        return (largest < (sum - largest)) ? YES : NO;\\n    }\\n\\n    private static void output(String result) {\\n        System.out.println(result);\\n    }\\n\\n    public static class TestCase {\\n        final int N;\\n        final List<Integer> L;\\n\\n        public TestCase(int N, List<Integer> L) {\\n            this.N = N;\\n            this.L = L;\\n        }\\n    }\\n}\\n", "target": "25", "substitutes": {"YES": ["True", "Yes", " yes", "FAULT", "Yeah", "Sure", "SO", "YY", "HEAD", "PASS", "DO", "ZZ", "NC", "LOG", "Y", "INFO", "NOW", "Success", "POST", "yes", "No", "NAME", "IS", "SS", "WHAT", "GREEN", "NA", "GO", "NULL", "MS", "Hello", "OK", "DOC", "SPEC", "XX", "ANY", " Yes", "Yep", "Just", "KO"], "NO": ["NE", "Yes", "none", " No", "NI", "A", "no", "Unknown", "SO", "DO", "Nothing", "RO", "NOT", "IN", "Y", "nos", "OUT", "None", "No", "yes", "ERROR", "NAME", " no", "NN", "NEW", "NA", "NULL", "NR", "MO", "OK", "ND", "False", "ANY", "XX", "NT", "O", "KO"], "testCase": ["testCause", " TestCase", "TestCode", " testcase", "TestInstance", "exampleCase", " testCode", "exampleInstance", "exampleCourse", " Testcase", "examplePlace", " testCourse", " testPlace", " testCause", "testInstance", "reportCause", "TestCase", "reportInstance", "testingCause", " TestCode", " testInstance", "TestCourse", "TestPlace", "Testcase", "testingInstance", "testCourse", "testcase", "testPlace", " TestInstance", "examplecase", "reportCase", "testingcase", "testingCase", "reportcase", "testCode"], "result": ["math", "reason", "valid", "obj", "list", "value", "comment", "content", "summary", "join", "string", "data", "format", "description", "match", "err", "number", "ret", "report", "object", "default", "document", "runner", "message", "block", "df", " Result", "master", "success", "page", "RESULTS", "request", "ge", "output", "source", "buffer", "user", "url", "record", "Result", "date", "msg", "error", "answer", "rc", "res", "response", "results", "root", "line", "work", "test", "dict", "r"], "sc": ["ner", "ch", "cont", "osc", "fc", "mc", " Sc", "RC", "nc", "out", "sche", "cv", "esc", "bc", "cc", "asc", "pc", "ser", "si", "cam", "ss", "server", "anc", "scope", "cus", "SC", "c", "scan", "cs", "sw", "cl", "se", "uc", "reader", "spec", "cm", "Sc", "system", "dc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "sr", "soc", "ci", "sp", " SC", "sch", "sh", "ec", "sem", "screen", "lc", " scr"], "N": ["O", "NE", "CNN", "G", "K", "Length", "Len", "I", "Z", "Index", "Size", "NI", "A", "Ni", "X", " n", "Count", "P", "Node", "Q", "NS", "SN", "H", "GN", "n", "NC", "S", "Y", "B", "E", "D", "NL", "Network", "MN", "NH", "J", "F", "No", "V", "NG", "NM", "NB", "R", "NN", "T", "C", "Num", "U", "M", "NA", "Ne", "Part", "Ns", "ND", "Nin", "NT", "Number", "Na", "KN"], "L": ["O", "G", "LT", "EL", "LE", "Len", "I", "Z", "XL", "DL", "FL", "length", "large", "LD", "P", "X", "AL", "Q", "Pl", "H", "l", "S", "UL", "B", "LIN", "left", "Lu", "LO", "E", "D", "Li", "Lo", "LM", "NL", "small", "Line", "W", "SL", "LR", "LS", "ML", "LB", "CL", "BL", "RL", "V", "F", "R", "LI", "LP", "ELL", "T", "PL", "LL", "C", "U", "M", "El", "LG", "IL", "Sl", "LA", "dL", "HL", "VL", "OL", "LU"], "i": ["f", "li", "I", "di", "in", "ri", "id", "gi", "m", "ai", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "it", "c", "ie", "y", "uli", "zi", "u", "pi", "e", "j", "ii", "qi", "hi", "ti", "b", "oi", "x", "p", "w", "abi", "ci", "ip", "xi", "ix", "bi"], "largest": ["shape", "highest", "gest", "ul", "huge", "single", " greatest", "sized", "acl", "majority", "length", "large", "latest", "higher", "half", "significant", "total", "most", "est", "last", "master", "cl", "great", "peak", "small", " larger", "max", "leader", "Maximum", "square", "best", "Large", "member", "wide", "massive", "actual", "central", "worst", "scale", " maximum", "MAX", "multiple", "maximum", "size", "each", "grand", "average", "capacity", "big", "ranked", "growth", "even", " biggest"], "sum": ["sort", "sam", "ul", "plus", "miss", " average", "length", "large", "cum", "count", "index", "latest", "cost", "total", "most", "est", "left", "last", "min", "se", "first", "num", "um", "max", "small", "can", "empty", "weight", "width", "age", "power", "depth", "member", "sup", "common", "part", "size", "mean", "big", "spread", "average", "sh", "capacity", "coll", "scale", "Sum"], "side": ["li", "level", "name", "plus", "single", "grade", "edge", "range", "core", "large", "id", "group", "half", " half", "ide", "left", "ice", "min", "area", "se", "style", "layer", "cl", "d", "small", "max", "Side", "site", "le", "width", "ides", "stage", "depth", "loc", "member", "axis", " Side", "full", "wide", "sample", "slice", "multiple", "line", "size", "mean", "partial", "part", "average", "led", "node", "la", "scale", "sign", "span"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tSystem.out.println(a >= 13 ? b : 12 >= a && a >= 6 ? b/2: 0);\\n\t}\\n}", "target": "249", "substitutes": {"sc": ["class", "osc", "ch", " Sc", "nc", "sb", "cv", "cc", "esc", "bc", "asc", "pc", "exec", "ss", "sec", "server", "scope", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "com", "acc", "Sc", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "enc", "sl", "sp", "ci", " SC", "sch", "sh", "ec", "tc", "cur", "lc"], "a": ["f", "sta", "ama", "am", "ga", "A", "ab", "ad", "ma", "count", "index", "ai", "active", "n", "ea", "ac", "na", "ba", "da", "ca", "area", "c", "aa", "d", "aj", "va", "pa", "e", "u", "af", "aaa", "s", "fa", "sa", "p", "x", "as", "ia", "sup", "au", "i", "an", "ae", "alpha"], "b": ["f", "pb", "h", "A", "sb", "ab", "ad", "n", "l", "B", "g", "v", "ba", "fb", "bp", "c", "aa", "d", "y", "mb", "rb", "u", "e", "aaa", "bb", "s", "p", "x", "nb", "w", "z", "bs", "k", "i", "beta", "bi", "eb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        long n = sc.nextLong();\\n        long a = sc.nextLong();\\n        long b = sc.nextLong();\\n    \\n        long answer = n / (a + b) * a;\\n        answer += Math.min(a, n % (a + b));\\n    \\n        System.out.println(answer);\\n    }\\n\\n}", "target": "217", "substitutes": {"sc": ["parse", "osc", "ch", "cont", "mc", "nc", "sche", "sb", "cy", "cv", "esc", "cc", "bc", "asc", "pc", "ss", "anc", "ca", "SC", "se", "c", "scan", "cs", "sw", "cl", "cus", "uc", "com", "ctx", "cor", "Sc", "sq", "sci", "cr", "sf", "sync", "rc", "cer", "enc", "soc", "sp", "ci", " SC", "ct", "sch", "sh", "ec", "tc", "cur", "coll", "sem"], "n": ["f", "nan", "ne", "nc", "no", "in", "nt", "count", "number", "m", "l", "na", "g", "min", "v", "t", "area", "c", "d", "num", "y", "sn", "next", "u", "e", "o", "j", "adj", "np", "p", "x", "all", "ns", "en", "nb", "w", "N", "q", "z", "nr", "size", "i", "an", "nn", "net"], "a": ["f", "am", "ga", "A", "oa", "ad", "ma", "ab", "count", "m", "ai", "l", "ea", "ac", "na", "ba", "da", "area", "c", "aa", "d", "y", "aj", "array", "next", "va", "u", "aaa", "auto", "s", "fa", "sa", "p", "x", "as", "all", "offset", "w", "za", "au", "z", "mA", "i", "an", "ae", "alpha", "la", "ia", "r"], "b": ["f", "bf", "pb", "h", "base", "sb", "ab", "length", "bc", "l", "B", "ob", "ba", "v", "g", "fb", "c", "aa", "d", "y", "u", "e", "o", "j", "lb", "bb", "p", "x", "nb", "w", "ib", "z", "bs", "i", "bi", "eb", "r"], "answer": ["value", "data", "grade", "issue", "ab", "length", "number", "account", " answers", "text", "score", "address", "say", "area", "aa", "result", "zero", "aj", "array", "next", "Answer", "nn", "output", "word", "reply", "question", "ell", "offset", "sa", "error", "answered", "q", "response", "knowledge", "correct", "size", "average", "an", "ae", "ness", "balance", "alpha"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tint str1 = scan.nextInt();\\n\t\tint str2 = scan.nextInt();\\n\t\tSystem.out.println(str1 * str2 + \" \" + (str1 * 2 + str2 * 2));\\n\t}\\n}", "target": "92", "substitutes": {"scan": ["gen", "parse", "ner", "skip", "sort", "car", "ann", "watch", "out", "fan", "in", "search", "pin", "inner", "ignore", "ser", "n", "l", "server", "gram", "app", "print", "inter", "con", "se", "can", "reader", "query", "feed", "read", "pack", "connect", "row", "ln", "Scan", "all", "san", "sync", "slice", "pass", "see", "sc", "util", "conn", "parser", "an", "walk", "look", "nn", "clean", "sign", "span"], "str1": ["dr1", "int2", "step1", "Str2", " str8", "int1", "Str01", "Str8", "intOne", "dr4", "str01", "dr01", "StrOne", "stri1", "stri2", "stepFirst", "arr4", "arr01", " str01", "strFirst", "stri01", "strOne", "intFirst", "stepOne", "str4", "step2", "arr1", "Str1", "stri8", "StrFirst", " str4", "str8"], "str2": ["arrTwo", "int2", " strtwo", "int4", "stringtwo", "Str2", " str8", "int1", "Str8", "x2", "string8", "x1", "string2", "arr2", "Strtwo", "intTwo", "string1", "strTwo", "str4", "Str4", "arr1", "Str1", "xTwo", " str4", "strtwo", "str8"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        \\n        Scanner in = new Scanner(System.in);\\n        int square = in.nextInt();\\n        int[] height = new int[square];\\n                \\n        int tmpmove = 0;\\n        int maxmove = 0;\\n        for (int i = 0;i < square;i++) {\\n            height[i] = in.nextInt();\\n            \\n            if (i == 0){\\n                continue;\\n            } \\n            //System.out.println(height[i] + \" \" + tmpmove);\\n            if (height[i-1] >= height[i]){\\n                tmpmove++;\\n                if (maxmove < tmpmove){\\n                    maxmove = tmpmove;\\n                }\\n            }else{\\n               tmpmove = 0;\\n            }\\n           \\n        }\\n\\n        System.out.println(maxmove);\\n\\n    }\\n}\\n", "target": "187", "substitutes": {}}
{"code": "import java.util.*; \\nclass Main \\n{\\npublic static void main(String args[]) \\n{\\nScanner sc = new Scanner(System.in); \\nint n = sc.nextInt(); \\nint value = 1000;\\n\\n\\nwhile(value<n)\\n{\\nvalue=value+1000;\\n}  \\n\\nSystem.out.print(value-n);\\n} \\n}", "target": "184", "substitutes": {"sc": ["ner", "ch", "osc", "nc", "search", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "scope", "ca", "SC", "se", "c", "scan", "sw", "uc", "cl", "cs", "acc", "Sc", "sq", "sub", "sci", "cr", "src", "sync", "ocr", "rc", "soc", "sp", "ci", "ec", "lc"], "n": ["f", "nan", "ne", "normal", "in", "no", "count", "number", "m", "limit", "l", "nin", "null", "v", "end", "c", "r", "d", "num", "y", "network", "zero", "sn", "nw", "e", "o", "j", "cn", "dn", "p", "b", "x", "ns", "nl", "en", "nb", "ln", "N", "z", "nr", "size", "k", "i", "nor", "init", "nu", "net"], "value": ["val", "VALUE", "level", "name", "data", "off", "values", "version", "format", "element", "no", "length", "trial", "id", "key", "number", "index", "count", "m", "default", "limit", "latest", "cost", "unit", "null", "timeout", "total", "lambda", "server", "left", "address", "v", "end", "type", "d", "network", "max", "num", "random", "next", "always", "age", "counter", "position", "current", "auto", "iter", "offset", "start", "Value", "size", "test", "function", "node", "we", "now", "fee", "scale", "what"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        int[] num = new int[5]; \\n        int sum = 0;\\n        int ans = 0;\\n\\n        for(int i = 1; i <= N; i++){\\n            //\u6570\u5b57i\u306e\u5404\u6841\u306e\u548c\u3092\u7b97\u51fa\\n            int tmp = i;\\n            for(int j = 0; j < 5; j++){\\n                num[j] = tmp % 10;\\n                tmp /= 10;\\n            }\\n            sum = num[0] + num[1] + num[2] + num[3] + num[4];\\n            \\n          \t//\u6570\u5b57i\u306e\u5404\u6841\u306e\u548c\u304cA\u4ee5\u4e0aB\u4ee5\u4e0b\u306a\u3089\u3070\u52a0\u7b97\\n            if(sum >= A && sum <= B) ans += i;\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "212", "substitutes": {"sc": ["parse", "ner", "osc", "cont", "mc", " Sc", "nc", "sb", "sche", "nt", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "anc", "cus", "SC", "c", "scan", "cs", "se", "uc", "sw", "ctx", "Sc", "system", "sq", "sci", "Scan", "cr", "src", "sync", "rc", "cer", "soc", "sys", "sp", " SC", "sch", "sh", "tc", "cur", "lc", " scr", "r"], "N": ["G", "K", "I", "L", "Z", "X", " n", "Ni", "P", "Q", "NS", "H", "n", "Y", "S", "E", "D", "NUM", "W", "F", "V", "NB", "NN", "T", "C", "U", "Num", "M", "Ne", "Ns", "NT", "O"], "A": ["G", "K", "I", "Array", "AA", "API", "P", "S", "D", "AP", "AI", "W", "F", "BA", "V", "At", "R", "An", "C", "U", "M", "Alpha", "NA", "LA", "alpha", "Sum"], "B": ["G", "I", "Z", "BB", "P", "H", "Y", "BS", "AB", "E", "W", "BI", "J", "F", "BA", "V", "BL", "NB", "b", "R", "C", "T", "M", "Bs", "BC", "Number", "O"], "num": ["name", "dim", "miss", "mon", "id", "count", "number", "index", "m", "unit", "split", "block", "con", "bin", "NUM", "batch", "info", "loc", "iter", "Num", "len", "col", "mem", "uni", "init", "skip", "um"], "sum": ["f", " sums", "Len", "in", "nt", "count", "total", "min", "diff", "end", "max", "su", "pos", "all", "Num", "w", " count", "len", " Sum", "mean", "size", " acc", " total", "SI", "um", "Sum"], "ans": [" len", "Len", "ann", "nt", " c", "n", "S", " skip", " ni", "pos", "Sum", "s", " all", "all", " dim", " res", "Num", " count", "len", " errors", " span", " scan", "an", "span"], "i": ["f", "li", "fi", "I", "mini", "di", "in", "ri", "ni", "gi", "m", "ai", "ji", "n", "si", "ui", "phi", "v", "c", "d", "zi", "uri", "u", "pi", "e", "j", "info", "ii", "qi", "p", "ti", "b", "x", "oi", "ini", "z", "ci", "mi", "ip", "iu", "xi", "chi", "ix", "ki", "bi", "multi"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.TreeSet;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Tarek\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        CGacha solver = new CGacha();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class CGacha {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            int n = in.nextInt();\\n            TreeSet<String> h = new TreeSet<>();\\n            while (n-- > 0) {\\n                h.add(in.next());\\n            }\\n            out.println(h.size());\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n\\n", "target": "98", "substitutes": {"inputStream": ["outputSt", "InputStream", "outputSocket", "outputSteam", " inputSteam", " inputSocket", "InputSt", " inputSt", "Inputstream", "InputSocket", "InputSteam", "inputSocket", " inputstream", "inputSt", "outputstream", "inputstream", "inputSteam"], "outputStream": ["inputForm", "OutputStream", "OutputWriter", "outputSteam", "OutputSteam", " outputReader", "outerSteam", " outputSteam", "outputReader", "outerStream", "outputForm", " outputView", "outputView", "OutputForm", "inputWriter", " outputWriter", "outputWriter", "outerView", "inputReader", " outputForm", "inputView", "outerReader", "inputSteam"], "in": ["gen", "rec", "name", "path", "plus", "data", "is", "input", "version", "lin", "log", "err", "cli", "din", "pin", "image", "inner", "id", "config", "io", "exec", "l", "IN", "inn", "min", "up", "diff", "con", "bin", "d", "cl", "kin", "request", "isin", "read", "inc", "source", "this", "info", "user", "inside", "url", "str", "iter", "s", "x", "pass", "rin", "ic", "ini", "login", "win", "again", "part", "ins", "conn", "i", "connection", "init", "In", "gin", "inf", "r"], "out": ["obj", "client", "list", "ch", "exp", "path", "string", "exit", "data", "input", "off", "net", "call", "log", "err", "inner", "io", "window", "exec", "writing", "by", "server", "scope", "up", "v", "print", "c", "page", "write", "bin", "OUT", "ext", "inc", "output", "buffer", "ex", "word", "o", "this", "user", "cache", "point", "to", "p", "x", "error", "Out", "w", "file", "problem", "pool", "again", "dump", "temp", "line", "copy", "conn", "writer", "outer", "connection", "init", "outs", "lock", "parent", "r"], "solver": ["Solution", "Solver", "Solving", "solution", "ssolver", "unsolve", "ssolve", "solve", " safer", "Safer", "ssolution", "solving", "unsolver", "ssolving", " solution", "Solve", "unsolution", "ssafer", "unsolving", "safer", " solve"], "testNumber": ["testNumbers", "testCount", "Testnumber", "TestCount", "TestNumbers", " testnumber", " trialnumber", " trialCount", " testNumbers", " testCount", "TestNumber", "testnumber", " trialNumbers", " trialNumber"], "n": ["f", "ne", "nc", "nt", "ni", "count", "m", "number", "non", "l", "na", "v", "t", "c", "num", "d", "sn", "u", "adj", "o", "j", "cn", "s", "p", "un", "b", "x", "ns", "nl", "nb", "w", "N", "pn", "len", "z", "Ns", "conn", "i", "nor", "nu", "nn", "fn", "a"], "h": ["eh", "ch", "hs", "ph", "ul", "ih", "bh", "oh", "id", "m", "ich", "H", "he", "l", "v", "t", "c", "ah", "hist", "u", "hr", "e", "o", "s", "p", "rh", "ha", "hash", "history", "head", "her", "gh", "hm", "hp", "hy", "header", "ht", "sh", "i", "host", "uh", "body", "q", "hus"], "reader": ["f", "http", "client", "holder", "worker", "input", "ler", "ri", "inner", "io", "report", "server", "loader", "driver", "layer", "er", "per", "feed", " Reader", "resource", "read", "pointer", "buffer", "source", "e", "this", "ry", "wrapper", "iter", "row", "reading", "file", "rc", "Reader", "slice", "or", "rr", "ro", "writer", "parser", "connection", "handler", "r"], "tokenizer": ["Tokenizer", "Tokener", "tokenize", "initialiser", "initialization", "serialiter", " tokeniter", "recogniter", "normalization", "optimizer", "okeniter", "okenizable", "okenizing", "Tokenizable", "optimize", " tokenization", "normaliter", "okeniser", "tokeniter", "okenization", "recogniser", "authoriser", "tokeniser", "normaliser", "authorizer", "serialize", "optimization", " tokeniser", "serializer", "Tokenization", "recognize", "Tokenizing", "authorize", "authorization", "initializer", "authorer", "Tokeniser", "tokenizing", "initialize", "normalizer", "recognizer", "Tokenize", "Tokeniter", " tokenize", " tokenizable", "optimiter", "tokenization", "serialization", "tokenizable", " tokenizing", "okenizer", " tokener", "okenize", "tokener"], "stream": ["content", "client", "http", "channel", "cont", "path", "string", "holder", "data", "raw", "input", "context", "log", "length", "image", "socket", "document", "server", "loader", "v", "port", "form", "per", "request", "feed", "resource", "source", "buffer", "e", "user", "serial", "row", "file", "slice", "response", "pool", "trans", "view", "Stream", "writer", "draft", "connection", "lock", "r"]}}
{"code": "\\nimport java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tMain main = new Main();\\n\t\tmain.run();\\n\t}\\n\\n\tpublic void run() {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint k = sc.nextInt();\\n\t\tk--;\\n\t\tStringBuilder sb = new StringBuilder(sc.next());\\n\t\tchar c = sb.charAt(k);\\n\t\tif(c=='A') sb.setCharAt(k, 'a');\\n\t\tif(c=='B') sb.setCharAt(k, 'b');\\n\t\tif(c=='C') sb.setCharAt(k, 'c');\\n\t\tSystem.out.println(sb.toString());\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "71", "substitutes": {"sc": ["ner", "ch", "osc", "cont", "mc", "nc", "sche", "cc", "bc", "esc", "asc", "pc", "ser", "si", "ss", "anc", "scope", "ca", "SC", "scan", "cs", "sw", "uc", "se", "cl", "cus", "ctx", "cor", "Sc", "s", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "soc", "sp", "ci", " SC", "sch", "sh", "ec", "tc", "sem", "screen", "lc"], "n": ["f", "ne", "nc", "in", "nt", "m", "l", "v", "num", "d", "o", "j", "p", "b", "x", "ns", "nl", "nb", "ln", "N", "pn", "z", "nr", "i", "nn", "net"], "k": ["f", "kind", "h", "kid", "K", "ch", "ko", "ik", "ijk", "ek", "id", "key", "m", "kick", "kn", "ck", "kg", "g", "v", "ok", "d", "mk", "y", "kin", "spec", "kl", "u", "o", "j", "unk", "point", "p", "b", "x", "ku", "w", "kk", "ak", "sk", "ky", "z", "kt", "work", "ks", "i", "coll", "ke", "ki", "check", "q", "kw"], "sb": ["gb", "usb", "bm", "bf", "pb", " SB", "BB", "bh", "ssl", "db", "ab", "obb", "bc", "sg", "orb", "si", "split", "ss", "wb", "zb", "gc", "fb", "bp", "bj", "su", "ls", "mb", "txt", "xb", "rb", "stab", "SB", "lb", "bb", "s", "lp", "sa", "b", "sci", "nb", "cb", "sf", "kb", "src", "bps", "bs", "sp", "abb", "bsp", "lr", "lab", "bi", "lc", "eb", "bg", "sth"], "c": ["f", "xc", "h", "ch", "cf", "cont", "mc", "vc", "nc", "m", "cc", "pc", "unc", "l", "ac", "g", "v", "t", "cs", "cl", "d", "ce", "dec", "u", "e", "o", "s", "p", "dc", "b", "x", "C", "cb", "w", "enc", "char", "cu", "col", "z", "ci", "ct", "cp", "arc", "ec", "cur", "coll", "cmp", "lc", "a", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t// practice contest\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\\n\t\tint answer = 0;\\n\\n\t\tif ((a >= 1 && a <= 9) && (b >= 1 && b <= 9)) {\\n\t\t\tanswer = a * b;\\n\t\t\tSystem.out.println(answer);\\n\t\t} else {\\n\t\t\tSystem.out.println(-1);\\n\t\t}\\n\t}\\n}\\n", "target": "58", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main (String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint k = scan.nextInt(), s = scan.nextInt();\\n\t\tint result=0;\\n\t\tfor(int x=0; x<=k; x++) {\\n\t\t\tfor(int y=0; y<=k; y++) {\\n\t\t\t\tint z = s-(x+y);\\n\t\t\t\tif(z<=k && 0<=z)result++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(result);\\n\t}\\n\\n}", "target": "29", "substitutes": {"scan": ["gen", "parse", "ner", "skip", "ann", "watch", "out", "chan", "in", "pan", "fan", "search", "pin", "ignore", "inner", "n", "exec", "na", "server", "con", "se", "cat", "er", "can", "plan", "reader", "feed", "ban", "query", "read", "serv", "connect", "system", "all", "Scan", "ln", "san", "sync", "sin", "see", "sc", "ans", "win", "an", "walk", "look", "nn", "ser", "clean", "sign", "r", "span"], "k": ["f", "h", "kid", "K", "ko", "in", "ik", "key", "m", "kick", "kn", "n", "l", "ck", "v", "ok", "c", "d", "zero", "u", "o", "unk", "j", "p", "ku", "w", "ak", "sk", "size", "work", "ks", "i", "ke", "km", "dk", "q", "kw"], "s": ["f", "sb", "in", "south", "n", "si", "l", "ss", "S", "v", "cs", "c", "se", "d", "su", "spec", "sn", "u", "o", "j", "sq", "p", "b", "sf", "sk", "sc", "sp", "os", "size", "ks", "i", "a", "ds", "q"], "result": ["valid", "list", "ner", "data", "grade", "range", "out", "match", "err", "length", "count", "number", "search", "seed", "code", "ret", "default", "report", "ver", "score", "total", "order", "sum", "end", "success", "future", "zero", "su", "array", "inc", "mer", "source", "info", "card", "iter", "Result", "color", "row", "res", "true", "sr", "results", "root", "test", "feature", "found", "second"], "x": ["f", "xy", "time", "h", "lex", "data", "xx", "in", "X", "wx", "id", "index", "n", "yx", "l", "v", "t", "c", "tx", "dx", "fx", "ax", "ex", "u", "e", "width", "j", "dy", "xs", "p", "b", "w", "xxx", "rx", "work", "i", "xi", "ix", "xp", "a", "r"], "y": ["xy", "yo", "ch", "wy", "xx", "oy", "ey", "cy", "zy", "sy", "gy", "l", "ye", "Y", "py", "v", "vy", "ny", "yt", "ay", "u", "ry", "ady", "j", "o", "dy", "iz", "ty", "p", "isy", "b", "yr", "w", "yi", "iy", "ya", "ky", "i", "yy", "ix", "uy", "ym"], "z": ["f", "h", "zone", "Z", "data", "yz", "az", "id", "count", "code", "zy", "gz", "zip", "step", "l", "zz", "v", "nz", "c", "oz", "d", "cz", "zi", "zo", "u", "o", "j", "iz", "p", "za", "w", "ez", "ze", "i", "zh", "ix", "q", "zen"]}}
{"code": "import java.io.BufferedInputStream;\\nimport java.io.BufferedOutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n        try (BufferedInputStream in = new BufferedInputStream(System.in);\\n             PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out))) {\\n\\n            Scanner sc = new Scanner(in);\\n\\n            // 10:16-\\n\\n            int n = sc.nextInt();\\n            int d = sc.nextInt();\\n            int[][] vs = new int[n][d];\\n\\n            for (int i = 0; i < n; i++) {\\n                for (int j = 0; j < d; j++) {\\n                    vs[i][j] = sc.nextInt();\\n                }\\n            }\\n\\n            int pairs = 0;\\n            for (int i = 0; i < n; i++) {\\n                for (int j = i + 1; j < n; j++) {\\n                    if (iseven(dist(vs[i], vs[j]))) {\\n                        pairs++;\\n                    }\\n                }\\n            }\\n\\n            out.println(pairs);\\n        }\\n    }\\n\\n    private static boolean iseven(double val) {\\n        return val - (int) val == 0;\\n    }\\n\\n    private static double dist(int[] a, int[] b) {\\n        double sum = 0.0;\\n        for (int i = 0; i < a.length; i++) {\\n            int t = a[i] - b[i];\\n            sum += t * t;\\n        }\\n        return Math.sqrt(sum);\\n    }\\n}\\n", "target": "59", "substitutes": {"sc": ["mc", "nc", "cv", "esc", "bc", "cc", "asc", "pc", "anc", "ca", "SC", "cs", "scan", "c", "sw", "uc", "cl", "acc", "Sc", "sq", "sci", "cr", "sync", "rc", "cer", "sp", " SC", "lc"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String []args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tList<Integer> arrays = new ArrayList<Integer>();\\n\t\tfor(int i=0; i<10; i++) {\\n             int a = sc.nextInt();\\n             arrays.add(a);\\n\t\t}\\n\\n\t\tCollections.sort(arrays);\\n\\n\t\tfor(int j = arrays.size(); j >arrays.size()-3; j--) {\\n\t\t\tSystem.out.println(arrays.get(j - 1));\\n\t\t}\\n\t}\\n\\n}", "target": "164", "substitutes": {"sc": ["osc", "ner", "ch", "cont", "nc", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "scope", "anc", "cus", "SC", "c", "scan", "cs", "sw", "cl", "uc", "spec", "Sc", "system", "s", "sa", "sub", "sci", "cr", "src", "sync", "rc", "cer", "soc", "or", "ci", "sch", "coll", "desc", "lc", "sign"], "arrays": ["ajays", "varirays", "arrances", "archans", "arrayays", "arances", "attays", "erray", "arrayans", "attay", "variaves", "archrays", " arrains", "arains", "arams", "arrrays", "arrayrays", "arrications", "arications", "arrams", "arrayances", "attrays", "brams", "array", "arrayaves", "ajains", "arays", "arrans", "arrayams", "aray", "brays", "errays", "varians", " arrams", "variances", "errrays", "ajrays", "archays", "archay", "arrayications", "brances", "araves", "arrains", "variays", "brrays", " arrrays", "arraves", "ajay", "attans", "errans", " arrications", " array", "arans"], "i": ["f", "li", "h", "I", "is", "di", "in", "ri", "ni", "id", "m", "index", "ai", "io", "n", "si", "l", "ori", "ui", "v", "it", "c", "y", "u", "e", "o", "pi", "api", "ii", "qi", "p", "hi", "b", "x", "oi", "ini", "z", "ci", "k", "mi", "iu", "xi", "ix", "bi", "r"], "a": ["f", "data", "ga", "A", "id", "ai", "active", "n", "ac", "na", "ba", "da", "area", "c", "aa", "aj", "va", "u", "e", "o", "api", "sa", "p", "b", "ia", "as", "access", "au", "z", "qa", "an", "alpha", "la"], "j": ["f", "uj", "obj", "li", "jit", "h", "jl", "jj", "br", "jo", "oj", "jp", "kj", "length", "key", "m", "fr", "pr", "ji", "n", "dj", "l", "jc", "v", "it", "ja", "ie", "bj", "num", "y", "aj", "ax", "adj", "e", "o", "J", "js", "ii", "u", "p", "b", "x", "je", "z", "part", "size", "ij", "ix", "jet", "syn", "jam", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\t\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t// ?????\u00b0??????????????\u00b0???\\n\t\tint n = scan.nextInt();\\n\t\t// ???????????????????\u00b4????????????\u00b0\\n\t\tint taro = 0;\\n\t\tint hanako = 0;\\n\t\t// ?????????????????????????????\u00a7??\u00b0?????????\\n\t\tfor(int i = 0; i<n; i++) {\\n\t\t\t// ??????????????????\\n\t\t\tString taroCard = scan.next();\\n\t\t\tString hanakoCard = scan.next();\\n\t\t\t// ?????????????????????????????????\\n\t\t\tint tl = taroCard.length();\\n\t\t\tint hl = hanakoCard.length();\\n\t\t\tint l = 0;\\n\t\t\tif(tl < hl) l = tl;\\n\t\t\telse l = hl;\\n\t\t\t// ??????????????????1????????\\???char??????????\u00b4?\\n\t\t\tchar[] tcC = taroCard.toCharArray();\\n\t\t\tchar[] hcC = hanakoCard.toCharArray();\\n\t\t\t// 1????????\\????????????\\n\t\t\t\tint count = 0;\\n\t\t\t\tfor(int i2 = 0; i2 < l; i2++){\\n\t\t\t\t\tif (tcC[i2] > hcC[i2]) {\\n\t\t\t\t\t\ttaro = taro + 3;\\n\t\t\t\t\t\tcount = 1;\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t\telse if (tcC[i2] < hcC[i2]) {\\n\t\t\t\t\t\thanako = hanako + 3;\\n\t\t\t\t\t\tcount = 1;\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\tif(count == 0) {\\n\t\t\t\t\tif (tl > hl) taro = taro +3;\\n\t\t\t\t\telse if (tl < hl) hanako = hanako +3;\\n\t\t\t\t\telse{\\n\t\t\t\t\t\ttaro = taro + 1;\\n\t\t\t\t\t\thanako = hanako +1;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t}\\n\t\t// ??????\\n\t\tSystem.out.println(taro + \" \" + hanako);\\n\\n\t}\\n\\n}", "target": "206", "substitutes": {}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        long n = sc.nextLong();\\n        long num = 0;\\n        int count=0;\\n        while (num<n){\\n            count++;\\n            num+=(long)Math.pow(26,count);\\n        }\\n        long instance = n-num+(long)Math.pow(26,count)-1;\\n        ArrayList<Character> array = new ArrayList<>();\\n        for (int i=0;i<count;i++){\\n            int mod = (int) (instance%26);\\n            array.add((char)mod);\\n            instance /= 26;\\n        }\\n        String s = \"\";\\n        for (int i=0;i<array.size();i++){\\n            s = (char) (array.get(i) + 'a') +s;\\n        }\\n        System.out.println(s);\\n    }\\n}\\n", "target": "191", "substitutes": {"sc": ["ner", "ch", "osc", "exp", "mc", " Sc", "nc", "cc", "bc", "asc", "pc", "l", "ss", "sec", "SC", "se", "c", "scan", "sw", "cs", "cl", "uc", "com", "spec", "acc", "Sc", "system", "dc", "sub", "sci", "src", "sync", "rc", "enc", "ci", "sp", "sh", "ec", "sem", "lc", "r"], "n": ["nm", "f", "nc", "in", "nt", "m", "number", "l", "t", "c", "r", "d", "y", "sn", "u", "o", "cn", "p", "b", "all", "ns", "ln", "en", "nb", "w", "N", "len", "z", "k", "size", "nu", "nn", "a", "net"], "num": ["f", "nm", "name", "off", "nom", "no", "in", "nt", "id", "m", "number", "index", "unit", "text", "norm", "sum", "con", "end", "c", "conf", "d", "max", "pos", "sn", "inc", "NUM", "u", "counter", "np", "loc", "p", "un", "b", "offset", "en", "nb", "Num", "len", "common", "part", "size", "mn", "uni", "nu", "init", "coll", "multi", "nn", "um"], "count": ["f", "err", "list", "ch", "name", "core", "base", "in", "call", "nt", "Count", "length", "id", "number", "code", "limit", "keep", "key", "index", "process", "order", "sum", "con", "conf", "c", "type", "max", "inc", "age", "counter", "cache", "depth", "current", "p", "offset", "b", "all", "en", "child", "start", "len", "col", "common", "part", "size", "test", "coll", "found", "check", "nn", "parent", "um", "a"], "instance": ["example", "shape", "inst", "co", "core", "id", "image", "number", "index", "cc", "config", "anc", "type", "Instance", "result", "ance", "inc", "ram", "ace", "counter", "power", "section", "member", "record", "division", "offset", "amp", "sup", "child", "ances", "rc", "performance", "mode", "ci", "part", "maximum", "capacity", "definition", "copy", "test", "node", "nn", "parent", "um", "shared"], "array": ["list", "allow", "database", "force", "string", "base", "range", "element", "expression", "group", "throw", "image", "number", "collection", "index", "object", "arr", "book", "address", "order", "app", "ray", "area", "c", "result", "air", "square", "this", "cache", "api", "section", "system", "p", "record", "as", "row", "stack", "error", "hash", "arrow", "assemb", "table", "our", "sh", "function", "angle", "coll", "pair", "Array", "now", "a", "r"], "i": ["f", "li", "fi", "h", "I", "di", "in", "ri", "id", "gi", "index", "inner", "ai", "io", "si", "ori", "ui", "mu", "phi", "v", "it", "ie", "y", "uri", "u", "pi", "e", "o", "j", "info", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "sup", "slice", "abi", "ini", "temp", "ci", "mi", "iu", "ip", "init", "xi", "ix", "multi", "bi", "a"], "mod": ["lex", "div", "sim", " modifier", "exp", "base", "Mod", "MOD", "rem", "ctr", "complex", "core", "m", "code", "cc", "mac", "reg", "min", "oct", "form", "ms", "max", "dec", "cm", "add", "ment", "loc", "dc", "row", " module", "sup", "rc", "mods", "module", "im", " Mod", "mode", "comp", "lib", "rank", "scale", "od"], "s": ["f", "hs", "letters", "summary", "string", "is", "abs", "sb", "ssl", "sym", "sv", "gs", "sg", "si", "l", "S", "ss", "details", "g", "sum", "t", "cs", "c", "d", "su", "settings", "ls", "es", "u", "str", "js", "p", "b", "sets", "ns", "ps", "ws", "os", "bytes", "ins", "ings", "strings", "ses", "rs", "states", "ds", "a", "r", "secondary"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\t\\n\t\tint a;\\n\t\tint max=sc.nextInt();\\n\t\tint min=max;\\n\t\tlong g=max;\\n\t\t\\n\t\tfor (int i=1;i<n;i++){\\n\t\t\ta=sc.nextInt();\\n\t\t\tg=g+a;\\n\t\t\tif(max<a) max=a;\\n\t\t\tif(min>a) min=a;\\n\t\t}\\n\t\tSystem.out.println(min+\" \"+max+\" \"+g);\\n\t}\\n\\n}", "target": "21", "substitutes": {"sc": ["class", "ner", "ch", "osc", "fc", "cont", " Sc", "nc", "sche", "sb", "cv", "cc", "bc", "esc", "asc", "pc", "l", "ss", "server", "anc", "app", "scope", "cus", "SC", "se", "c", "scan", "sw", "cl", "cs", "uc", "ctx", "com", "Sc", "system", "sq", "sci", "cr", "ocr", "sf", "sync", "rc", "src", "enc", "soc", "sp", "ci", " SC", "ct", "ec", "tc", "cur", "sem", "lc", " scr"], "n": ["f", "h", "ne", "nc", "nt", "m", "l", "v", "t", "r", "c", "d", "num", "y", "u", "e", "o", "j", "s", "p", "b", "x", "ns", "en", "w", "N", "q", "z", "k", "conn", "nn", "net"], "a": ["f", "div", "am", "ga", "A", "ab", "ma", "ad", "m", "ai", "ac", "na", "aw", "ba", "da", "ca", "area", "c", "aa", "app", "d", "y", "aj", "next", "va", "u", "e", "pa", "j", "auto", "s", "sa", "p", "b", "x", "as", "access", "sup", "au", "z", "wa", "qa", "ana", "an", "ae", "alpha", "la"], "max": ["f", "gen", "nd", "h", "div", "shape", "name", "ga", "range", "act", "no", "in", "ma", "az", "group", "ad", "id", "count", "m", "gu", "active", "patch", "height", "v", "last", "end", "ca", "c", "da", "first", "conf", "d", "can", "y", "dec", "aj", "ng", "ax", "next", "u", "e", "s", "p", "b", "x", "all", "mod", "w", "q", "Max", "z", "go", "with", "k", "size", "wa", "gap", "right", "parent", "scale", "r"], "min": ["f", "h", "sort", "dim", "name", "mini", "am", "range", "version", "in", "ma", "group", "id", "m", "index", "ai", "default", "mid", "l", "patch", "MIN", "v", "diff", "mins", "sign", "c", "page", "d", "small", "aj", "Min", "ng", "next", "pa", "u", "e", "j", "s", "p", "sa", "b", "x", "date", "w", "q", "start", "go", "partial", "size", "mean", "gap", "an", "scale", "r", "span"], "g": ["f", "gen", "G", "h", "arg", "gain", "am", "mg", "ga", "ma", "group", "gu", "gi", "gs", "m", "sg", "ac", "gt", "reg", "gc", "v", "c", "gas", "gp", "d", "ge", "ng", "u", "e", "gr", "game", "s", "p", "sa", "b", "x", "ig", "ag", "w", "q", "go", "z", "big", "k", "gm", "gam", "gn", "r"], "i": ["f", "li", "I", "di", "in", "ni", "gi", "id", "m", "index", "ai", "si", "l", "ui", "mu", "v", "t", "c", "ie", "d", "y", "u", "e", "o", "j", "pi", "ii", "qi", "p", "ti", "b", "x", "w", "ini", "z", "ci", "iu", "xi", "multi", "bi", "r"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint maxday = sc.nextInt();\\n\t\tint task = sc.nextInt();\\n\t\tint days = 0;\\n\t\tfor(int i = 0; i < task; i++){\\n\t\t\tdays += sc.nextInt();\\n\t\t}\\n\t\tmaxday -= days;\\n\t\tif(maxday < 0){\\n\t\t\tmaxday = -1;\\n\t\t}\\n\t\tSystem.out.println(maxday);\\n\t\t\\n\t}\\n}", "target": "108", "substitutes": {"sc": ["class", "ner", "ch", "osc", "cont", "fc", " Sc", "nc", "sche", "sb", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "server", "scope", "anc", "app", "SC", "se", "c", "scan", "cs", "sw", "uc", "ctx", "cl", "spec", "Sc", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "enc", "sr", "soc", "sl", "sp", "ci", " SC", "ct", "sh", "ec", "tc", "cur", "coll", "lc", " scr"], "maxday": ["axday", "axDAY", "Maxsize", "maxdays", "mindays", " maxflow", " maxDay", "lastDay", "minday", " maxsize", "maxdate", "axdate", " maxdate", "axflow", " maxdays", "axsize", "startno", "maxDAY", " maxDAY", "startflow", "axdays", "startDay", "lastday", "MaxDay", "maxDay", "startday", "lastdate", "MaxDAY", "axDay", " maxno", "mindate", "minDay", "maxflow", "maxno", "maxsize", "axno", "Maxday"], "task": ["time", "thread", "level", "worker", "Task", "role", "config", "nic", "index", "unit", "device", "block", "month", "min", "master", "adjust", "day", "project", "event", "batch", "load", "target", "mm", "axis", "asks", "date", "child", "course", "mode", "delay", "work", "theme", "test", "ask", "week", "check", "activity", "tag", "module", "parent"], "days": ["workers", "images", "times", "works", "dos", "flows", "daily", "lines", "id", "planes", "ays", "forms", "DAY", "groups", "months", "gets", "limits", "steps", "downs", "breaks", "min", "diff", "ones", "rows", "hours", "changes", "Days", "pos", "rules", "dates", "ides", "asks", "blocks", "items", "opens", "shows", "tests", "checks", "results", "loads", "ins", "ends", "day", "fields", "files", "ds", "events"], "i": ["f", "li", "fi", "I", "clip", "di", "in", "ri", "ni", "id", "gi", "index", "ai", "io", "ji", "si", "ui", "mu", "phi", "t", "d", "isin", "uli", "uri", "pi", "u", "o", "j", "ii", "qi", "p", "ti", "hi", "oi", "abi", "ini", "z", "ci", "ip", "xi", "chi", "ix", "my"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        if (s.equals(\"Sunny\"))System.out.println(\"Cloudy\");\\n        else if (s.equals(\"Cloudy\"))System.out.println(\"Rainy\");\\n        else System.out.println(\"Sunny\");\\n    }\\n}\\n", "target": "60", "substitutes": {"sc": ["ner", "osc", " Sc", "nc", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "scope", "anc", "ca", "SC", "se", "c", "scan", "sw", "cs", "cl", "uc", "acc", "Sc", "sub", "sci", "cr", "ocr", "sync", "src", "rc", "cer", "enc", "sl", "sp", "ci", " SC", "ec", "desc", "cmp", "lc"], "s": ["f", "string", "series", "plus", "abs", "sb", "in", "out", "obs", "comments", "sv", "ssl", "lines", "gs", "m", "south", "sg", "n", "si", "l", "service", "S", "ss", "g", "t", "c", "words", "features", "su", "spec", "ls", "es", "u", "o", "services", "p", "stats", "ns", "shows", "sample", "sf", "sync", "ws", "ans", "sl", "sys", "sound", "sports", "styles", "os", "i", "strings", "ses", "states", "sym"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]){\\n    Scanner sc = new Scanner(System.in);\\n    int five=0,seven=0;\\n    for(int i=0;i<3;i++){\\n    int n = Integer.parseInt(sc.next());\\n    if(n==5)five++;\\n    else if(n==7)seven++;\\n  }\\n  if(five==2 && seven==1)System.out.println(\"YES\");\\n  else System.out.println(\"NO\");\\n}\\n}\\n", "target": "16", "substitutes": {"sc": ["osc", "ner", "ch", " Sc", "nc", "cv", "cc", "esc", "bc", "asc", "pc", "ss", "scope", "anc", "SC", "se", "c", "scan", "cs", "cl", "uc", "acc", "Sc", "system", "sub", "sci", "cr", "src", "sync", "ocr", "rc", "soc", "ci", "sp", " SC", "sh", "parser", "ec", "desc", "lc"], "five": ["Five", "li", "jo", "none", "plus", "one", "eight", "nine", "lot", "length", "seed", "number", "three", "little", "non", "l", " fifty", "odd", "se", "zero", "next", "fif", "always", "power", "fifth", "lo", "letter", "six", "few", "start", "major", "many", " Five", "knife", " ten", "two", "ten"], "seven": ["mill", "dollar", "rice", "eight", "begin", "father", "nine", "me", "undred", "meg", "children", "son", "umber", "square", " Seven", "ruby", "fifth", "billion", "another", "down", "approximately", "into", "pe", "four", "multiple", "each", "plane", "maximum", "meet", "many", "other", "ven", "nor", "Seven", "two", "la", "even"], "i": ["f", "li", "I", "di", "ri", "ni", "id", "gi", "m", "ai", "io", "si", "ui", "mu", "v", "it", "t", "c", "ie", "d", "y", "u", "pi", "o", "j", "e", "info", "ii", "ti", "p", "b", "x", "oi", "hi", "ini", "z", "ci", "iu", "init", "xi", "chi", "multi", "bi"], "n": ["f", "eni", "h", "ne", "nt", "ni", "m", "number", "non", "l", "nin", "inn", "na", "g", "c", " ni", "d", "num", "network", "sn", "u", "o", "j", "ii", "dn", "s", "p", "b", "x", "ns", "en", "nb", "N", "pn", "z", "k", "mn", "conn", "nu", "nn", "fn", "nit", "gn", "net"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint x = sc.nextInt();\\n\t\tint ans = (x + 1) % 2;\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}\\n", "target": "148", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint kaisu = 5;\\n\t\tint[] num = new int[kaisu];\\n\\n\t\tfor(int i = 0; i < kaisu ; i++) {\\n\t\t\tnum[i] = scan.nextInt();\\n\t\t}\\n\\n\t\tint wp = num[2]+num[4];\\n\t\tint wm = num[2]-num[4];\\n\t\tint hp = num[3]+num[4];\\n\t\tint hm = num[3]-num[4];\\n\\n\t\tif(num[0] < wp | 0 > wm ) {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}else if(num[1] < hp | 0 > hm) {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}else System.out.println(\"Yes\");\\n\t}\\n}", "target": "171", "substitutes": {"scan": ["nan", "gen", "parse", "stat", "ner", "ann", " scanner", "out", "in", "fan", "pan", "log", "chan", "search", "ignore", "io", "n", "na", "con", "se", "cat", "er", "can", "plan", "query", "read", "serv", "connect", "system", "Scan", "pass", "san", "sync", "sin", "ans", "sys", "vis", "parser", "an", "get", "skip", "run", "clean", "r"], "kaisu": ["yaasu", "kaasu", "laisi", "akaasu", " waisu", "ekaizu", "akaitsu", "kiizu", "ekaisu", "kaizu", "kaisi", "yaisu", "kaitsu", "laisu", "ekaisi", "oaiku", "kiitsu", " waitsu", "oaisu", "akaisi", "kiisi", "oaisi", "yaiku", "laiza", "akaisu", "akaiku", "laizu", "kaiza", "yaisi", "kaiku", " waizu", "kiisu", "oaasu", "akaiza", "ekaiza", "akaizu", " waisi"], "num": ["f", "mult", "name", "cal", "miss", "plus", "off", "begin", "param", "in", "no", "number", "m", "block", "mu", "hom", "form", "inc", "un", "om", "down", "coord", "temp", "header", "size", "init", "check", "multi", "run", "nm", "one", "unit", "na", "home", "min", "it", "bug", "max", "update", "NUM", "u", "digit", "date", "du", "umi", "work", "test", "node", "two", "gen", "valid", "sort", "mon", "out", "index", "non", "man", "null", "text", "note", "nam", "con", "end", "tu", "Num", "four", "common", "mn", "comb", "an", "get", "menu", "from", "dom", "dim", "ul", "nom", "n", "sum", "result", "bin", "word", "info", "np", "loc", "x", "nb", "mut", "mom", "nu", "nn", "um"], "i": ["li", "fi", "I", "vi", "di", "in", "ik", "ni", "gu", "gi", "id", "index", "ai", "io", "n", "si", "l", "ui", "phi", "v", "c", "ie", "y", "zi", "uri", "u", "e", "o", "j", "pi", "ii", "qi", "p", "ti", "hi", "x", "oi", "ini", "start", "yi", "z", "ci", "mi", "ip", "iu", "xi", "chi", "multi", "bi", "a"], "wp": ["php", "jp", "hw", "prefix", "wx", "pace", "tp", "wd", "bp", "gp", "pg", "iw", "dp", "api", "np", "mm", "fp", "p", "amp", "WP", "pn", "pp", "vp", "hop", "eps", "px", "wordpress", "cp", "ht", "ip", "yp", "xp", "ppa"], "wm": ["bm", "WM", "jp", "hw", "wx", "mx", "wt", "m", "hh", "kn", "wi", "wb", "wd", "mot", "ww", "gp", "sw", "wl", "fm", "width", "mm", "fp", "p", "fw", "wk", "w", "dm", "pm", "wa", "mn", "ht", "mi", "cp", "xp", "q"], "hp": ["php", "h", "ph", "hw", "bh", "hh", "tp", "bp", "gp", "dp", "mp", "pkg", "pi", "np", "mm", "fp", "p", "lp", "pn", "vp", "pm", "hop", "HP", "cpp", "px", "eps", "cp", "mi", "ht", "uh", "xp"], "hm": ["bm", "hn", "eh", "h", "hs", "ph", "hz", "ih", "hw", "bh", "m", "hh", "hd", "phy", "hom", "hum", "ah", "adh", "fm", "rpm", "hr", "mph", "mm", "eth", "him", "dm", "wh", "hl", "pm", "md", "mith", "kil", "hy", "mi", "ht", "sh", "ham", "tm", "km", "q"]}}
{"code": "import java.io.IOException;\\nimport java.io.PrintWriter;\\nimport java.io.FileNotFoundException;\\nimport java.util.InputMismatchException;\\nimport java.io.InputStream;\\nimport java.io.FileInputStream;\\n\\npublic class Main {\\n    InputStream is;\\n\\n    int __t__ = 1;\\n    int __f__ = 0;\\n    int __FILE_DEBUG_FLAG__ = __f__;\\n    String __DEBUG_FILE_NAME__ = \"src/O1\";\\n\\n    FastScanner in;\\n    PrintWriter out;\\n\\n    public void solve() {\\n        int[] a = in.nextIntArray(5);\\n        for (int i = 0; i < 5; i++) {\\n            if (a[i] == 0) {\\n                System.out.println(i + 1);\\n                return;\\n            }\\n        }\\n    }\\n\\n    public void run() {\\n        if (__FILE_DEBUG_FLAG__ == __t__) {\\n            try {\\n                is = new FileInputStream(__DEBUG_FILE_NAME__);\\n            } catch (FileNotFoundException e) {\\n                e.printStackTrace();\\n            }\\n            System.out.println(\"FILE_INPUT!\");\\n        } else {\\n            is = System.in;\\n        }\\n        in = new FastScanner(is);\\n        out = new PrintWriter(System.out);\\n\\n        solve();\\n    }\\n\\n    public static void main(final String[] args) {\\n        new Main().run();\\n    }\\n}\\n\\n\\nclass FastScanner {\\n    private InputStream stream;\\n    private byte[] buf = new byte[1024];\\n    private int curChar;\\n    private int numChars;\\n\\n    public FastScanner(InputStream stream) {\\n        this.stream = stream;\\n        // stream = new FileInputStream(new File(\"dec.in\"));\\n    }\\n\\n    int read() {\\n        if (numChars == -1)\\n            throw new InputMismatchException();\\n        if (curChar >= numChars) {\\n            curChar = 0;\\n            try {\\n                numChars = stream.read(buf);\\n            } catch (IOException e) {\\n                throw new InputMismatchException();\\n            }\\n            if (numChars <= 0)\\n                return -1;\\n        }\\n        return buf[curChar++];\\n    }\\n\\n    public boolean isSpaceChar(int c) {\\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n    }\\n\\n    public boolean isEndline(int c) {\\n        return c == '\\n' || c == '\\r' || c == -1;\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] array = new int[n];\\n        for (int i = 0; i < n; i++)\\n            array[i] = nextInt();\\n\\n        return array;\\n    }\\n\\n    public int[][] nextIntMap(int n, int m) {\\n        int[][] map = new int[n][m];\\n        for (int i = 0; i < n; i++) {\\n            map[i] = nextIntArray(m);\\n        }\\n        return map;\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] array = new long[n];\\n        for (int i = 0; i < n; i++)\\n            array[i] = nextLong();\\n\\n        return array;\\n    }\\n\\n    public long[][] nextLongMap(int n, int m) {\\n        long[][] map = new long[n][m];\\n        for (int i = 0; i < n; i++) {\\n            map[i] = nextLongArray(m);\\n        }\\n        return map;\\n    }\\n\\n    public double nextDouble() {\\n        return Double.parseDouble(next());\\n    }\\n\\n    public double[] nextDoubleArray(int n) {\\n        double[] array = new double[n];\\n        for (int i = 0; i < n; i++)\\n            array[i] = nextDouble();\\n\\n        return array;\\n    }\\n\\n    public double[][] nextDoubleMap(int n, int m) {\\n        double[][] map = new double[n][m];\\n        for (int i = 0; i < n; i++) {\\n            map[i] = nextDoubleArray(m);\\n        }\\n        return map;\\n    }\\n\\n    public String next() {\\n        int c = read();\\n        while (isSpaceChar(c))\\n            c = read();\\n        StringBuilder res = new StringBuilder();\\n        do {\\n            res.appendCodePoint(c);\\n            c = read();\\n        } while (!isSpaceChar(c));\\n        return res.toString();\\n    }\\n\\n    public String[] nextStringArray(int n) {\\n        String[] array = new String[n];\\n        for (int i = 0; i < n; i++)\\n            array[i] = next();\\n\\n        return array;\\n    }\\n\\n    public String nextLine() {\\n        int c = read();\\n        while (isEndline(c))\\n            c = read();\\n        StringBuilder res = new StringBuilder();\\n        do {\\n            res.appendCodePoint(c);\\n            c = read();\\n        } while (!isEndline(c));\\n        return res.toString();\\n    }\\n\\n    public int[][] nextPackedIntArrays(int packN, int size) {\\n        int[][] res = new int[packN][size];\\n        for (int i = 0; i < size; i++) {\\n            for (int j = 0; j < packN; j++) {\\n                res[j][i] = nextInt();\\n            }\\n        }\\n        return res;\\n    }\\n}\\n", "target": "222", "substitutes": {"is": ["ils", "input", "abs", "mis", "cms", "ri", "Is", "id", "image", "ris", "inner", "index", "iss", "vs", "ist", "its", "ops", "ais", "ui", "ios", "it", "ie", "isin", "iso", "iris", "ar", "kit", "serv", "es", "info", "js", "api", "ii", "lis", "s", "as", "IS", "p", "x", "isu", "has", "sin", "ib", "or", "bs", "os", "ins", "us", "ip", "init", "isi", "get", "isl", "ips", "bis"], "__t__": [" __f____", "__l_", "__l___", " __f_", "__T____", "__l__", "__t___", "__T___", "__t_", " __f___", "__c____", "__d____", "__T__", "__d__", " __t_", "__d___", " __t____", "__t____", "__c__", "__T_", "__f_", "__c___", "__f___", "__l____", "__f____", " __t___"], "__f__": [" __f____", "__l___", "__p__", "__F___", "__l__", "__t___", " __f___", "__p___", "__p____", " __t____", "__t____", "__F____", "__f___", "__l____", "__F__", "__f____", " __t___"], "__FILE_DEBUG_FLAG__": ["__FILE_DEBUG_AG__", "__FILE_DEBUG_flag___", "__FILE_DEBUG_AG___", "__FILE_DEBUG__AGE____", "__FILE_DEBUG_AGE__", "__FILE_DEBUG_AGE____", "__FILE_DEBUG_ID__", "__FILE_DEBUG_ID___", "__FILE_DEBUG_flag__", "__FILE_DEBUG_FILE___", "__FILE_DEBUG_AGE___", "__FILE_DEBUG_FILE__", "__FILE_DEBUG__FLAG____", "__FILE_DEBUG__FLAG__", "__FILE_DEBUG_FLAG____", "__FILE_DEBUG_AG____", "__FILE_DEBUG__FLAG___", "__FILE_DEBUG_FLAG___", "__FILE_DEBUG_FILE____", "__FILE_DEBUG__AGE___", "__FILE_DEBUG__AGE__"], "__DEBUG_FILE_NAME__": ["__DEBUG_FILE_Name____", "__DEBUG_FILENNAME__", "__DEBUG_FILE_PATH____", "__DEBUG_FILE_name____", "__DEBUG_FILE_name_", "__DEBUG_FILE_SIZE____", "__DEBUG_FILEPName____", "__DEBUG_FILE_Name___", "__DEBUG_FILENName___", "__DEBUG_FILEPName__", "__DEBUG_FILE_Name_", "__DEBUG_FILENNAME___", "__DEBUG_FILEPName_", "__DEBUG_FILENNAME____", "__DEBUG_FILE_NAME____", "__DEBUG_FILEPName___", "__DEBUG_FILEPNAME__", "__DEBUG_FILE_SIZE_", "__DEBUG_FILE_name__", "__DEBUG_FILEPNAME_", "__DEBUG_FILEPNAME___", "__DEBUG_FILE_Name__", "__DEBUG_FILE_name___", "__DEBUG_FILE_PATH__", "__DEBUG_FILE_SIZE___", "__DEBUG_FILE_PATH___", "__DEBUG_FILE_NAME___", "__DEBUG_FILEPNAME____", "__DEBUG_FILENName__", "__DEBUG_FILE_SIZE__", "__DEBUG_FILENName____", "__DEBUG_FILE_NAME_"], "in": ["rec", "path", "cin", "data", "input", "lin", "cli", "id", "pin", "image", "inner", "din", "socket", "config", "io", "n", "exec", "IN", "inn", "ios", "con", "diff", "c", "scan", "bin", "reader", "isin", "kin", "inc", "read", "buffer", "source", "o", "s", "p", "as", "x", "ic", "en", "rin", "vin", "ini", "login", "win", "ci", "ins", "connection", "init", "an", "In", "gin", "lib", "el", "r"], "out": ["gen", "obj", "client", "list", "comment", "exp", "name", "string", "base", "one", "co", "input", "prefix", "no", "call", "log", "err", "group", "post", "key", "code", "image", "inner", "timeout", "io", "n", "window", "exec", "IN", "server", "up", "c", "page", "write", "OUT", "query", "ext", "inc", "output", "serv", "ex", "this", "o", "cache", "user", "point", "p", "x", "error", "msg", "Out", "w", "pool", "again", "dump", "view", "table", "temp", "line", "size", "copy", "writer", "outer", "outs", "lock", "parent"], "a": ["f", "am", "ga", "A", "oa", "ma", "ai", "n", "ea", "na", "da", "ba", "area", "ca", "aa", "c", "aj", "array", "va", "u", "e", "auto", "as", "sa", "b", "ia", "p", "ha", "au", "ans", "ata", "wa", "qa", "tta", "an", "ae", "alpha", "la", "ava"], "i": ["f", "li", "fi", "h", "I", "mini", "di", "ri", "id", "gi", "index", "ai", "io", "n", "si", "l", "ui", "mu", "v", "c", "d", "y", "uri", "zi", "u", "e", "o", "j", "pi", "api", "ii", "info", "qi", "p", "ti", "b", "x", "hi", "oi", "abi", "ini", "ci", "mi", "ip", "xi", "init", "ix", "multi", "chi", "bi"], "stream": ["content", "valid", "channel", "client", "cont", "transform", "path", "string", "round", "data", "raw", "input", "instance", "context", "image", "object", "document", "window", "message", "server", "v", "port", "type", "model", "sw", "form", "ream", "reader", "feed", "request", "resource", "output", "source", "buffer", "this", "handle", "system", "row", "stack", "down", "file", "response", "pool", "view", "through", "size", "Stream", "each", "engine", "host", "control", "method"], "buf": ["Buffer", "br", "data", "cmd", "buff", "cv", "bc", "block", "queue", "conv", "ctx", "vec", "seq", "buffer", "rb", "batch", "alloc", "uf", "flush", "blocks", "bag", "cb", "rc", "box", "len", "pool", "mem", "cap"], "curChar": ["curBit", "CurChar", "curchar", " curCh", "CurCh", "restChar", "CurBit", "Curchar", "restchar", "curCh", "restBit", " curBit", "restCh", " curchar"], "numChars": ["numCHans", "numGrannels", "NumChars", "numCHars", "numChards", "numchans", "numchars", "numChans", "NumChannels", "NumChards", "Numchans", "numGrards", "Numchannels", "numchards", "numCHards", "numChannels", "numCHannels", "numGrars", "numchannels", "NumChans", "Numchards", "numGrans", "Numchars"]}}
{"code": "\\nimport java.io.*;\\nimport java.util.*;\\nimport static java.lang.System.*;\\nimport static java.lang.Math.*;\\n\\npublic class Main\\n{\\n\tpublic static void main(String []args)throws IOException\\n\t{\\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n\t\tint n = Integer.parseInt(br.readLine());\\n\t\tString []s=br.readLine().split(\" \");\\n\t\tint a[]=new int[n];\\n\t\tint min[]=new int[n];\\n\t\t//boolean flag=true;\\n\t\tint c=0,minval=Integer.MAX_VALUE;\\n\t\t\\n\t\tfor(int i=0;i<n;i++)\\n\t\t\ta[i]=Integer.parseInt(s[i]);\\n\t\t\t\\n\t\tmin[0]=a[0];\\n\t\tminval=a[0];\\n\t\tfor(int i=1;i<n;i++)\\n\t\t{\\n\t\t\tif(a[i]<minval)\\n\t\t\t{\\n\t\t\t\tminval=a[i];\\n\t\t\t\tmin[i]=minval;\\n\t\t\t}\t\\n\t\t}\\n\t\t\\n\t\tfor(int i=0;i<n;i++)\\n\t\t{\\n\t\t\tif(a[i]<=min[i])\\n\t\t\t\tc++;\\n\t\t\t\\n\t\t}\\n\t\tout.println(c);\\n\t}\\n}\\n\\n\\n", "target": "229", "substitutes": {"br": ["obj", "bf", "tr", "ner", "rt", "sb", "bh", "ab", "ref", "bl", "err", "bro", "fr", "bc", "io", "report", "erb", "arr", "orb", "dr", "mr", "vr", "buf", "er", "reader", "rb", "hr", "bb", "iter", "HR", "b", "cr", "yr", "cb", "ber", "abi", "sr", "jar", "her", "bs", "sp", "BR", "bridge", "browser", "lr", "Br", "fb", "r"], "n": ["f", "ne", "name", "none", "in", "no", "nt", "count", "number", "m", "l", "v", "t", "c", "num", "d", "y", "pos", "sn", "u", "e", "o", "j", "p", "b", "x", "ns", "nl", "nb", "N", "len", "z", "k", "mn", "size", "i", "nor", "init", "nn", "r"], "s": ["f", "times", "comments", "lines", "m", "params", "tags", "l", "S", "g", "v", "c", "d", "ms", "words", "ls", "e", "services", "p", "blocks", "b", "ps", "ws", "strings", "fields", "states", "r"], "a": ["f", "base", "data", "A", "in", "oa", "ab", "eta", "ai", "da", "c", "ar", "next", "ra", "e", "o", "as", "p", "b", "sa", "au", "ata", "i", "an", "alpha"], "min": ["val", "div", "mini", "data", "version", "in", "ai", " Min", "ba", "sum", "mins", "Mini", " mini", "max", "pos", "dec", "Min", "aj", "next", "un", "mod", "Max", "len", "partial", "mn", "init", "MIN"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n\\n        String temp = sc.nextLine();\\n        String[] tempArr = temp.split(\"\");\\n        int cnt1 = 0,cnt2 = 0;\\n        for(String str : tempArr) {\\n            if (str.equals(\"0\")) {\\n                cnt1++;\\n            }else {\\n                cnt2++;\\n            }\\n        }\\n\\n        System.out.println(Math.min(cnt1,cnt2) * 2);\\n\\n\\n    }\\n\\n}\\n", "target": "14", "substitutes": {"sc": ["ner", "osc", "mc", " Sc", "nc", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "scope", "anc", "ca", "SC", "c", "scan", "cs", "uc", "cl", "sw", "cus", "spec", "Sc", "sci", "cr", "src", "sf", "rc", "ci", "sp", " SC", "sch", "sh", "ec", "desc", " scr"], "temp": ["tem", "content", "list", "tr", "name", "path", "string", "base", "data", "template", "input", "out", "format", "testing", "err", "stable", "text", "null", "c", "result", "num", "empty", "txt", "output", "buffer", "source", "emp", "Temp", "pt", "iter", "font", "tmp", "extra", "partial", "fake", "test", "stuff", "tc", "flat", "now", "clean"], "tempArr": ["tempARrc", "tempArl", "testArb", "tempErn", "tempArrc", "testARp", "testArp", "tempAttb", "tempARb", "tempARr", "testArr", "tempArp", "tempARw", "testARn", "tempARn", "testARr", "tempARl", "tempAttn", "tempErb", "tempARp", "testARb", " tempArrayrc", "tempErr", "tempArrayw", "tempErp", "tempArb", "tempAttr", " tempArw", "tempArrayrc", " tempArrayw", " tempArrayr", "tempArn", "tempArrayl", "tempAttp", "tempArrayr", "tempArw", " tempArrayl", " tempArl", " tempArrc", "testArn"], "cnt1": ["cnt0", "cntFirst", "CctOne", "cint1", "crt1", "cctFirst", "cnt3", "crt2", "Cct3", "cref1", "crefFirst", "cpt2", "cct2", "count1", "cptone", "Cnt4", "crt4", "lcnt0", "cint4", "cct3", "cct1", "CntFirst", "CctFirst", "cref2", "cctOne", "countFirst", "Cct2", "cct4", "lcountone", "Cnt1", "cct0", "count2", "Cnt3", "lcount2", "crt3", "crefOne", "cint2", "lcnt2", "Cct1", "cpt1", "cint3", "lcount0", "Cct4", "CntOne", "Cnt2", "lcntone", "cntone", "lcount1", "cntOne", "countOne", "cctone", "count0", "cpt0", "countone", "lcnt1", "cnt4"], "cnt2": ["cct5", "cnt0", "crt5", "ccount4", "crt1", "acrtTwo", "crt2", "cnt42", "Cct0", "contTwo", "Cnt0", "cnt14", "cct2", "Cct42", "Cnt4", "cner1", "crt4", "cnt5", "cct1", "cctTwo", "acnt2", "acnt1", "cner42", "cner2", "Cct2", "cct4", "ccount1", "Cnt1", "ccount0", "cct0", "Cnt5", "ccount2", "acrt14", "crtTwo", "acnt14", "acrt1", "cner5", "Cct4", "cct42", "cont2", "Cnt2", "Cct5", "cont14", "cntTwo", "Cnt42", "cont1", "crt14", "acrt2", "crt0", "acntTwo", "crt42", "Cct1", "cnt4", "cct14"], "str": ["f", "obj", "tr", "br", "div", "exp", "name", "string", "data", "input", "st", "in", "id", "key", "inner", "fr", "pr", "n", "arr", "l", "text", "v", "c", "entry", "tri", "spec", "ext", "next", "b", "STR", "letter", "enc", "char", "sp", "i", "cur", "Str", "a", "r"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.math.*;\\npublic class Main {\\n    public static void main(String[]args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tPrintWriter ou = new PrintWriter(System.out);\\n\t\tint n = Integer.parseInt(sc.next());\\n\t\tint yono = 0;\\n\t\tfor(int i = 0 ; i < n ; i++){\\n\t\t\tif(i + 1 != Integer.parseInt(sc.next())) yono++;\\n\t\t}\\n\t\tif(yono <= 2) ou.println(\"YES\");\\n\t\telse ou.println(\"NO\");\\n\t\tou.flush();\\n\t}\\n}", "target": "82", "substitutes": {"sc": ["osc", "ch", "cont", "mc", " Sc", "nc", "sche", "sb", "cle", "cv", "search", "esc", "cc", "bc", "asc", "pc", "si", "ss", "scope", "ca", "SC", "c", "scan", "cs", "uc", "cl", "sw", "se", "spec", "Sc", "loc", "system", "sq", "sci", "cr", "src", "sync", "rc", "sr", "soc", "sk", "scl", "ci", "sp", " SC", "ec", "tc", "cur", "lc"], "ou": ["channel", "cho", "OU", "ko", "console", "out", "cms", "log", "cli", "uo", "ouf", "cy", "ao", "ee", "bc", "echo", "io", "you", "ouch", "ous", "ui", "owl", "ob", "print", "c", "oct", "uc", "su", "feed", "oup", "oe", "u", "o", "rou", "tu", "ii", "auto", "irc", "eu", "isu", "ocr", "au", "println", "cu", "oul", "qu", "oc", "oud", "ci", "acs", "our", "util", "yout", "qa", "writer", "outer", "oug", "iol", "oo", "uu", "oss"], "n": ["f", "h", "ne", "nc", "nt", "ni", "count", "m", "number", "l", "inn", "v", "t", "c", "num", "d", "y", "sn", "u", "o", "j", "ii", "s", "p", "ot", "b", "x", "ns", "nl", "nb", "en", "ln", "w", "N", "len", "z", "k", "nn", "net"], "yono": ["yo", "yonio", "ynoa", "knio", "wnoa", "zzino", "yonu", "knos", "yonoe", "wenu", "nite", "wno", "wyoe", "innos", "yona", "zzos", "yonos", "zzio", "yoo", "wyo", "knino", "yonino", "yno", "nito", "zzo", "kno", "yonoo", "innino", "wenoe", "wene", "yoa", "nitoe", "yonoa", "wye", "weno", "ya", "yone", "wna", "inno", "nitu", "wnoo", "ynoo", "wyu", "innio", "yna"], "i": ["eni", "li", "fi", "I", "mini", "di", "ri", "ni", "gi", "m", "index", "ai", "io", "ji", "si", "ui", "mu", "phi", "v", "ie", "y", "uli", "zi", "u", "pi", "info", "j", "o", "ii", "qi", "ti", "hi", "b", "oi", "p", "slice", "abi", "ini", "start", "z", "ci", "mi", "ip", "xi", "init", "chi", "multi", "bi"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Kenji\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        ABC096B solver = new ABC096B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class ABC096B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int A = in.nextInt();\\n            int B = in.nextInt();\\n            int C = in.nextInt();\\n            int K = in.nextInt();\\n            int m = Math.max(A, Math.max(B, C));\\n            int n = A + B + C - m;\\n            for (int i = 0; i < K; i++) {\\n                m = m * 2;\\n            }\\n            out.println(m + n);\\n        }\\n\\n    }\\n}\\n\\n", "target": "201", "substitutes": {"inputStream": ["InputStream", "outputStreamer", "inputStreamer", "sourceSteam", "sourceStreamer", "outputSteam", " inputSteam", "sourceStream", "InputStreamer", "outputChannel", "Inputstream", " inputChannel", "InputSteam", "inputChannel", " inputstream", "InputChannel", "outputstream", "inputstream", "sourcestream", "inputSteam"], "outputStream": ["outputStreamer", "OutputStyle", "inputStreamer", "writestream", "OutputStream", "outputSteam", "OutputSteam", "outputStyle", " outputSteam", "Outputstream", "writeStream", " outputstream", "inputStyle", "OutputStreamer", " outputStyle", "writeStreamer", "outputstream", "inputstream", "inputSteam", "writeSteam"], "in": ["gen", "arg", "path", "between", "cin", "data", "is", "string", "input", "lin", "token", "log", "err", "din", "pin", "image", "inner", "id", "config", "socket", "io", "nin", "IN", "inn", "min", "con", "c", "bin", "er", "reader", "kin", "request", "isin", "the", "read", "inc", "source", "resource", "this", "inside", "url", "spin", "user", "s", "as", "x", "ln", "rin", "vin", "ini", "sin", "into", "login", "win", "again", "ins", "conn", "connection", "init", "arin", "In", "gin", "inf", "a", "r"], "out": ["exp", "name", "is", "off", "version", "no", "call", "err", "image", "key", "inner", "timeout", "server", "ext", "inc", "serv", "to", "extra", "again", "temp", "outer", "init", "outs", "exit", "session", "max", "ex", "cache", "Out", "copy", "engine", "socket", "gen", "client", "log", "index", "null", "IN", "up", "scan", "page", "OUT", "this", "o", "file", "sync", "line", "writer", "connection", "In", "parent", "net", "obj", "data", "io", "window", "exec", "scope", "write", "bin", "output", "external", "user", "point", "error", "w", "pool", "conn"], "solver": ["Solution", "sver", "Solver", "Solving", "solution", "ssolver", "ansolver", "unsolve", "ssolve", "solve", "Sver", "ssolution", "solving", "unsolver", "ssolving", "Solve", "ssver", "ansolution", "unsolution", "unsolving", "ansolve", "ansver"], "testNumber": [" exampleNUM", " examplenumber", "Testnumber", " testNUM", "testNUM", " exampleNumber", " exampleNum", "TestNum", " testnumber", "testNum", "TestNumber", " testNum", "testnumber", "TestNUM"], "A": ["G", "Az", "I", "L", "AA", "Java", "Ak", "Input", "PA", "This", "API", "P", "HA", "S", "As", "IA", "D", "Ang", "AP", "Ma", "Area", "MA", "BA", "At", "CA", "Ca", "AC", "An", "U", "M", "N", "Ar", "AM", "First", "NA", "LA", "Am", "mA", "a"], "B": ["QB", "G", "I", "Bi", "L", "BB", "BD", "DB", "CB", "BF", "P", "GB", "Q", "Y", "AB", "UB", "D", "BE", "W", "BI", "MB", "EB", "F", "LB", "BA", "Bur", "R", "b", "NB", "WB", "N", "M", "BBC", "Bs", "BC", "Number", "Bu", "O", "OB"], "C": ["G", "KC", "I", "L", "CM", "CP", "X", "Count", "P", "Q", "CW", "H", "S", "E", "c", "D", "W", "Sc", "F", "Ch", "CL", "V", "Cs", "CA", "R", "AC", "CR", "U", "M", "N", "Cu", "CS", "CC", "DC", "CU", "BC", "VC", "O"], "K": ["G", "I", "L", "Z", "PK", "X", "KR", " k", "P", "Q", "H", "KS", "S", "Y", "Sk", "E", "D", "W", "J", "F", "V", "R", "T", "KA", "U", "KI", "M", "N", "k", "O"], "m": ["f", "nm", "bm", "h", "dim", "mini", "mc", "am", "l", "month", "mu", "g", "v", "mr", "c", "d", "y", "max", "fm", "cm", "u", "e", "o", "j", "machine", "mm", "s", "p", "b", "x", "om", "w", "N", "M", "q", "dm", "im", "hm", "md", "pm", "k", "mn", "mi", "sm", "gm", "ym", "km", "um", "a"], "n": ["f", "nm", "nd", "h", "nc", "l", "v", "min", "c", "d", "num", "y", "sn", "cm", "o", "j", "ii", "cn", "s", "p", "b", "ns", "ln", "en", "nb", "w", "M", "N", "pn", "z", "k", "mn", "nn", "a"], "i": ["f", "li", "I", "di", "ri", "gi", "id", "ai", "ji", "si", "ui", "mu", "v", "it", "c", "uri", "zi", "pi", "u", "o", "j", "ii", "qi", "p", "b", "x", "oi", "abi", "ini", "ci", "k", "mi", "ip", "iu", "xi", "uni", "init", "chi", "multi", "bi"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n  public static void main(String[] args) {\\n    Scanner scanner = new Scanner(System.in);\\n    String[] STRINGS = new String[3];\\n    for(int i=0; i<3; i++){\\n      STRINGS[i] = scanner.next();\\n    }\\n    scanner.close();\\n\\n    int[] index = new int[3];\\n    int turn = 0;\\n    char[] ans = {'A', 'B', 'C'};\\n    boolean isEnd = false;\\n    while(!isEnd){\\n      index[turn]++;\\n      for(int i=0; i<3; i++){\\n        if(index[i] == STRINGS[i].length()+1){\\n          System.out.println(ans[i]);\\n          isEnd = true;\\n          break;\\n        }\\n      }\\n      if(isEnd){\\n        break;\\n      }\\n      switch(STRINGS[turn].charAt(index[turn]-1)){\\n        case 'a':\\n          turn = 0;\\n          break;\\n        case 'b':\\n          turn = 1;\\n          break;\\n        case 'c':\\n          turn = 2;\\n          break;\\n      }\\n    }\\n  }\\n}\\n", "target": "11", "substitutes": {"scanner": ["analyner", "Scanator", "caner", "scanler", "Scanning", "analyning", "Scanner", "Scaner", "canserver", "scanserver", "Scanatter", " scaner", " scanatter", "caninner", "analyatter", "analyer", "Scaninner", " scanler", "canler", " scanserver", "Scanserver", "scanatter", "scaninner", "scanning", "scaner", "canator", "Scanler", "scanator", " scaninner", " scanning", "canner", " scanator"], "STRINGS": ["STING", "SERings", "STings", "STINGS", "SERINGS", " STRES", "Strings", "TRARS", "SERES", "STRARS", " STRARS", "STRURES", "READING", "StrING", "STURES", " STRURES", "StrINGS", "STRING", "TRINGS", "SERING", " STRING", "TRES", "STRES", "StrARS", "TRings", " STRings", "READings", "TRING", "READURES", "STRings", "READARS", "READINGS"], "i": ["f", "eni", "li", "h", "I", "mini", "di", "in", "ik", "ni", "length", "gi", "id", "m", "ri", "ai", "io", "n", "si", "l", "ui", "mu", "phi", "v", "it", "end", "c", "ie", "t", "d", "y", "uri", "u", "e", "o", "pi", "j", "info", "ii", "qi", "p", "hi", "ti", "oi", "x", "b", "abi", "ini", "ci", "k", "mi", "iu", "xi", "ip", "chi", "a", "multi", "bi", "ix", "q"], "index": ["list", "level", "shape", "Index", "version", "condition", "align", "context", "column", "length", "id", "count", "number", "move", "config", "where", "step", "block", "address", "order", "left", "sum", "end", "scan", "style", "type", "page", "num", "can", "pos", "array", "inc", "weight", "connect", "position", "section", "iter", "depth", "point", "axis", "loc", "x", "ind", "offset", "slice", "start", "head", "ping", "part", "size", "line", "tail", "run", "sign", "span"], "turn": ["time", "channel", "div", "transform", "shape", "round", "shift", "input", "version", "roll", "act", "call", "context", "clock", "count", "number", "move", "circ", "effect", "key", "kick", "change", "step", "block", "patch", "Turn", "order", "self", "loop", "sign", "oct", "form", "fall", "draw", "cycle", "fact", "event", "pull", "show", "position", "depth", "year", "vel", "serial", "ind", "row", "tick", "direction", "turned", "back", "action", "tell", "wind", "cur", "vert", "feature", "feat", "rank", "urn", "span"], "ans": ["nan", "list", "names", "ANS", "cons", "ann", "aned", "lang", "ane", "parts", "ai", "man", "rings", "ant", "han", "annot", "amps", "AN", "na", "anc", "ents", "ctx", "scan", "aning", "can", "lan", "ls", "ions", "idents", "as", "strip", "ln", "ns", "san", "cas", "ants", "pass", "ins", "ings", "an", "a", "ars", "ds", "ana", "span"], "isEnd": ["asStart", "setClose", "isClose", "notEnd", " isEND", "hasEND", "asEnd", "isEND", "hasEnd", "IsEND", "asEND", "notStart", "notEND", "setStart", "isStop", " isStop", "notend", "isStart", "IsStart", "isend", " isend", "asClose", " isClose", "hasend", "asend", "hasStart", "Isend", "setEnd", " isStart", "IsEnd", "setEND", "asStop", "IsStop", "IsClose"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        \\n        int A[][] = new int[n][m];\\n        int b[] = new int[m];\\n        \\n        for(int i=0;i<n;i++){\\n            for(int j=0;j<m;j++){\\n                A[i][j] = sc.nextInt();\\n            }\\n            sc.nextLine();\\n        }\\n        \\n        for(int i=0;i<m;i++){\\n            b[i] = sc.nextInt();\\n        }\\n        \\n        int c[] = productVector(A,b);\\n        \\n        for(int i=0;i<n;i++){\\n            System.out.println(c[i]);\\n        }\\n        \\n    \\n    }\\n    static int[] productVector(int a[][], int b[]){\\n        int c[] = new int[a.length];\\n        for(int i=0;i<a.length;i++){\\n            for(int j=0;j<a[0].length;j++){\\n                c[i] += (a[i][j]*b[j]);\\n            }\\n        }\\n        return c;\\n    }\\n}\\n", "target": "185", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "mc", " Sc", "nc", "console", "out", "sb", "sche", "cms", "cli", "sv", "core", "cle", "cv", "cc", "bc", "esc", "asc", "pc", "ser", "l", "cam", "ck", "ss", "exec", "sec", "scope", "g", "gc", "anc", "SC", "se", "scan", "cs", "sw", "uc", "ctx", "cl", "com", "can", "Sc", "loc", "system", "sq", "sci", "cr", "sf", "sync", "rc", "cer", "sr", "enc", "soc", "sys", "sp", "ci", " SC", "sch", "sh", "tc", "sem", "screen", "lc", " scr"], "n": ["f", "nan", "nm", "h", "ne", "nc", "net", "in", "nt", "l", "na", "g", "v", "t", "d", "y", "network", "sn", "u", "e", "o", "cn", "s", "dn", "p", "x", "ln", "ns", "nb", "en", "w", "N", "M", "z", "k", "mn", "an", "nn", "r"], "m": ["f", "nm", "bm", "h", "mc", "am", "man", "l", "g", "v", "d", "ms", "y", "num", "fm", "cm", "u", "e", "o", "mm", "p", "x", "w", "M", "N", "im", "hm", "md", "z", "k", "size", "mi", "mn", "sm", "an", "km", "r"], "A": ["App", "G", "K", "I", "L", "AA", "Ak", "Input", "ma", "X", "API", "P", "H", "B", "S", "As", "D", "Ang", "Ka", "Ma", "Sc", "F", "Adam", "V", "At", "p", "CA", "Ca", "C", "An", "U", "M", "N", "Ar", "au", "Alpha", "LA", "Am", "mA", "AMI", "In", "alpha"], "b": ["f", "bf", "pb", "h", "br", "base", "sb", "ab", "db", "bc", "l", "B", "wb", "ob", "ba", "v", "g", "emb", "bp", "d", "y", "arb", "mb", "rb", "u", "e", "o", "bb", "p", "x", "bis", "nb", "cb", "ib", "z", "bs", "k", "abb", "be", "body", "bi", "fb", "r"], "i": ["f", "eni", "li", "fi", "h", "I", "mini", "is", "di", "in", "ik", "ni", "ami", "id", "gi", "ri", "cli", "ai", "index", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "it", "ie", "y", "uli", "zi", "uri", "inline", "u", "pi", "o", "e", "api", "ii", "info", "qi", "ei", "p", "hi", "x", "oi", "ti", "slice", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "bi", "my"], "j": ["f", "uj", "li", "obj", "h", "jl", "jj", "ch", "jo", "br", "oj", "jp", "off", "ni", "length", "gi", "id", "pr", "ji", "si", "l", "ui", "jc", "v", "g", "it", "ja", "ie", "bj", "d", "y", "aj", "u", "e", "o", "js", "J", "ii", "qi", "p", "job", "x", "q", "ju", "je", "z", "k", "xi", "ij", "bi", "el", "r"], "c": ["f", "xc", "h", "ch", "cf", "nc", "out", "cv", "code", "cc", "pc", "l", "ac", "g", "v", "ca", "con", "cs", "t", "cat", "uc", "d", "y", "ce", "u", "e", "o", "s", "dc", "p", "x", "C", "cr", "cb", "enc", "cu", "z", "ci", "k", "ct", "arc", "ec", "lc", "r"], "a": ["f", "ama", "base", "am", "ga", "ab", "code", "l", "ea", "ac", "na", "ba", "v", "da", "app", "area", "ca", "aa", "d", "y", "array", "va", "u", "e", "o", "aux", "p", "as", "x", "sa", "all", "w", "au", "ata", "k", "art", "an", "ae", "alpha", "la", "r"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception{\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s1 = sc.next();\\n        String s2 = sc.next();\\n        int min = s2.length();\\n        for(int i = 0; i <= s1.length() - s2.length(); i++){\\n        \tString s3 = s1.substring(i, i + s2.length());\\n            int count = 0;\\n            for(int j = 0; j < s2.length(); j++){\\n            \tif(s2.charAt(j) != s3.charAt(j)){\\n                \tcount++;\\n                }\\n            }\\n            min = Math.min(min, count);\\n        }\\n        System.out.println(min);\\n\t}\\n}", "target": "158", "substitutes": {"sc": ["ner", "ch", "osc", "mc", "nc", "sche", "cv", "search", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "anc", "scope", "cus", "SC", "se", "c", "scan", "cs", "sw", "uc", "cl", "mp", "ng", "cor", "Sc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "sp", " SC", "sch", "sh", "ec", "cur", "sem", "ser", "lc"], "s1": ["ss3", "p3", "S4", "S1", "singFirst", "p2", "pOne", " sOne", "ss1", " sFirst", "sing1", "s4", "sOne", "s0", "ss0", "sFirst", "sing4", "S2", "SFirst", " s0", "sing2", "ss2", " s4", "p1", "ssOne"], "s2": ["ssTwo", "ws2", "sTwo", "ss3", "wsTwo", "p3", "psTwo", "S4", "h1", "S1", "ssecond", "sessecond", "pssecond", "p2", "p4", "dsTwo", "psecond", " sTwo", "ses1", "h2", "ds1", "pTwo", "ss4", " ssecond", "ws1", "ss1", "ds2", "hsecond", "s4", "S3", "ws3", "S2", "ps2", "ses2", "ds3", "ss2", "sesTwo", "h3", " s4", "p1", "wssecond", "ps1", "ws4"], "min": ["minute", "stat", "val", "lower", "div", "sort", "name", "dim", "mini", "ain", "round", "shift", "none", "version", "act", "value", "id", "limit", "key", "local", "index", "default", "mine", "cut", "ignore", "just", "ss", "pre", "sum", "diff", "mins", "conf", "area", "rain", "small", "max", "spec", "Min", "pos", "next", "weight", "minimum", "un", "sub", "mod", "pass", "slice", "state", "sin", "start", "ring", "ress", "sol", "rand", "pm", "filter", "partial", "part", "mean", "size", "amin", "average", "init", "lt", "ix", "skip", "scale", "MIN", "span"], "i": ["f", "eni", "li", "h", "I", "mini", "is", "di", "in", "ri", "ni", "gi", "id", "m", "index", "ai", "io", "ji", "si", "l", "ui", "v", "it", "ie", "d", "zi", "uri", "pi", "u", "e", "o", "ii", "qi", "bi", "hi", "p", "b", "x", "ind", "oi", "ini", "start", "z", "ci", "mi", "ip", "iu", "xi", "ix"], "s3": ["os12", "ss3", "ss23", "ls5", "ls23", "ss03", "s12", "ls12", "ss4", "os5", " s03", "ss12", "s5", "s4", "s03", "s23", "ss2", "ls3", " s4", "os3", "os23", "ss5"], "count": ["f", "li", "list", "level", "allow", "base", "act", "Count", "length", "match", "id", "number", "code", "cc", "key", "fr", "low", "keep", "index", "patch", "group", "last", "sum", "diff", "more", "conf", "c", "area", "max", "use", "seq", "weight", "cache", "info", "depth", "b", "ind", "child", "len", "pool", "common", "z", "filter", "size", "part", "other", "test", "const", "found", "coll", "cast", "parent", "second"], "j": ["f", "uj", "li", "obj", "br", "ch", "jj", "name", "jo", "jl", "adj", "jp", "jen", "off", "err", "key", "code", "index", "fr", "pr", "ji", "n", "l", "dj", "ui", "jc", "v", "g", "it", "ja", "ie", "d", "er", "y", "aj", "u", "e", "o", "js", "J", "ii", "point", "str", "qi", "p", "job", "b", "x", "z", "part", "k", "ij", "ix", "el", "q", "jit"]}}
{"code": "import java.util.Scanner;\\nimport java.nio.*;\\n\\nclass Queue{\\n    private String name;\\n    private int time;\\n\\n    public Queue(String name, int time){\\n        this.name = name;\\n        this.time = time;\\n    }\\n\\n    public String getName(){\\n        return name;\\n    }\\n\\n    public int getTime(){\\n        return time;\\n    }\\n}\\n\\nclass MyQueue{\\n    private Queue[] queue;\\n    private int head = 0;\\n    private int tail = 0;\\n    \\n    public MyQueue(int size){\\n        queue = new Queue[size + 1];\\n    }\\n\\n    public boolean isEmpty(){\\n        return head == tail;\\n    }\\n\\n    public boolean isFull(){\\n        return head == (tail + 1) % queue.length;\\n    }\\n\\n    public void enqueue(String name, int time) throws Exception{\\n        if(isFull()){\\n            throw new Exception();\\n        }\\n\\n        queue[tail] = new Queue(name, time);\\n\\n        if(tail + 1 == queue.length){\\n            tail = 0;\\n        }else{\\n            tail++;\\n        }\\n    }\\n\\n    public Queue dequeue() throws Exception{\\n        if(isEmpty()){\\n            throw new Exception();\\n        }\\n        Queue x = queue[head];\\n        if(head + 1 == queue.length){\\n            head = 0;\\n        }else{\\n            head++;\\n        }\\n        return x;\\n    }\\n\\n    public int min(int a, int b){\\n        return a < b ? a : b;\\n    }\\n}\\n\\npublic class Main{\\n        public static void main(String[] args) throws Exception{\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        int q = sc.nextInt();\\n\\n        MyQueue queue = new MyQueue(n);\\n\\n        String name;\\n        int time;\\n        for(int i = 0; i < n; i++){\\n            name = sc.next();\\n            time = sc.nextInt();\\n            queue.enqueue(name, time);\\n        }\\n        \\n        int sum = 0;\\n        while(!queue.isEmpty()){\\n            Queue q1 = queue.dequeue();\\n            if(q1.getTime() > q){\\n                sum += q;\\n                queue.enqueue(q1.getName(), q1.getTime() - q);\\n            }else{\\n                sum += q1.getTime();\\n                System.out.println(q1.getName() + \" \" + sum);\\n            }\\n        }\\n    }\\n}\\n\\n\\n", "target": "231", "substitutes": {"name": ["value", "am", "version", "prefix", "no", "call", "key", "image", "code", "local", "wave", "shell", "default", "block", "message", "url", "space", "filename", "foo", "title", "names", "comment", "string", "one", "Name", "search", "label", "session", "address", "home", "anc", "style", "money", "resource", "cache", "NAME", "date", "part", "work", "alias", "class", "client", "term", "id", "text", "up", "nice", "type", "ident", "this", "job", "child", "action", "file", "connection", "host", "create", "memory", "parent", "clean", "username", "on", "path", "base", "data", "length", "change", "ame", "model", "hello", "event", "word", "game", "user", "pass", "start"], "time": ["value", "f", "times", "am", "call", "count", "image", "key", "timeout", "m", "code", "cost", "message", "t", "c", "TIME", "ime", "query", "load", "url", "depth", "year", "speed", "temp", "content", "h", "rate", "rice", "one", "timer", "height", "ue", "home", "duration", "style", "money", "max", "cycle", "weight", "ty", "date", "im", "z", "work", "test", "volume", "id", "text", "end", "type", "age", "tick", "etime", "mode", "delay", "host", "tim", "parent", "thread", "path", "data", "clock", "length", "live", "ice", "port", "hour", "tx", "event", "info", "user", "loc", "error", "start", "frequency", "sleep", "ip", "right", "Time"], "queue": ["f", "database", "route", "prefix", "large", "code", "default", "select", "l", "message", "server", "plugin", "to", "history", "ping", "view", "lock", "module", "sequence", "gui", "quote", "consumer", "collection", "remote", "ue", "update", "request", "quit", "cache", "system", "status", "we", "force", "flight", "client", "console", "out", "log", "index", "que", "type", "page", "entry", "array", "seq", "progress", "buffer", "this", "target", "priority", "p", "job", "sync", "file", "line", "menu", "store", "thread", "channel", "list", "component", "Que", "base", "command", "group", "live", "bl", "config", "delete", "v", "port", "master", "model", "forward", "project", "complete", "event", "batch", "game", "user", "stage", "flush", "proxy", "manager", "pe", "pool", "table", "qa"], "head": ["thread", "before", "cross", "h", "path", "shift", "anch", "off", "in", "heads", "length", "HEAD", "id", "count", "limit", "index", "code", "keep", "post", "key", "lock", "ck", "patch", "height", "min", "end", "commit", "port", "c", "first", "push", "max", "ce", "request", "cycle", "fix", "draw", "Head", "pull", "load", "position", "depth", "offset", "open", "child", "back", "speed", "start", "front", "view", "root", "header", "hook", "work", "stream", "host", "body", "right", "check", "ack", "tag", "run", "parent", "clean"], "tail": ["thread", "sort", "wrap", "term", "shift", "roll", "prefix", "length", "count", "limit", "index", "tails", "timeout", "lead", "window", "l", "total", "patch", "left", "t", "port", "duration", "end", "commit", "forward", "empty", "cycle", "buffer", "pull", "width", "batch", "weight", "target", "stop", "depth", "iter", "flush", "offset", "fat", "letter", "tick", "slice", "child", "sync", "speed", "tip", "len", "start", "sleep", "hop", "fill", "delay", "body", "right", "foot", "lock", "tag", "trigger"], "size": ["channel", "shape", "shift", "Size", "container", "length", "count", "limit", "number", "code", "timeout", "address", "ize", "end", "c", "empty", "small", "max", "can", "depth", "loc", "offset", "six", "SIZE", "z", "capacity", "cap", "fee", "scale"], "x": ["f", "xy", "xc", "h", "worker", "xxxx", "xx", "instance", "X", "wx", "m", "index", "g", "v", "ctx", "c", "xt", "tx", "y", "dx", "abc", "array", "ax", "ex", "u", "e", "ux", "p", "w", " X", "xxx", "pool", "rx", " xx", "z", "work", "xi", "ix", "xp"], "a": ["f", "am", "A", "oa", "ab", "ma", "count", "ac", "na", "ba", "da", "ca", "area", "c", "aa", "d", "y", "aj", "va", "pa", "e", "u", "s", "fa", "sa", "p", "ia", "as", "ata", "qa", "an", "ae", "ada", "alpha", "la"], "b": ["f", "value", "bf", "sb", "ab", "length", "count", "m", "number", "l", "null", "B", "wb", "ba", "v", "g", "c", "aa", "bar", "d", "y", "rb", "u", "e", "o", "bb", "p", "w", "z", "bs", "k", "abb", "beta", "eb", "r"], "sc": ["osc", "ch", "cont", "exp", "mc", " Sc", "nc", "ga", "st", "sche", "cle", "cli", "sv", "cv", "esc", "bc", "cc", "asc", "pc", "si", "ck", "ss", "sec", "cus", "SC", "se", "c", "scan", "cs", "ctx", "sw", "cl", "uc", "Sc", "loc", "sq", "dc", "sub", "sci", "cr", "src", "sync", "rc", "enc", "sr", "sk", "sp", "ci", " SC", "ct", "ca", "sh", "ec", "tc", "cur", "desc", "lc"], "n": ["f", "h", "ne", "nc", "in", "no", "nt", "count", "m", "number", "limit", "l", "v", "t", "c", "num", "d", "y", "network", "sn", "u", "o", "j", "p", "un", "ns", "en", "nb", "w", "N", "z", "k", "net"], "q": ["f", "h", "in", "id", "count", "m", "Q", "quick", "l", "que", "g", "v", "wait", "t", "c", "d", "num", "y", "max", "query", "ce", "req", "u", "o", "eq", "sq", "p", "dq", "qq", "w", "qu", "z", "k", "quant", "qa", "sh", "qt", "r"], "i": ["f", "li", "fi", "I", "di", "ri", "ni", "id", "gi", "m", "inner", "ai", "ji", "si", "ui", "phi", "v", "c", "ie", "y", "uri", "pi", "u", "info", "j", "ii", "qi", "ti", "p", "hi", "oi", "ini", "z", "ci", "mi", "ip", "xi", "init", "ix", "chi", "multi", "bi"], "sum": ["parse", "val", "sim", "comment", "sort", "skip", "cal", "ul", "miss", "am", "vol", "amount", "sam", "mass", "cum", "count", "seed", "cost", "unit", "si", "total", "gram", "min", "diff", "up", "conf", "who", "se", "num", "um", "su", "ram", "weight", "share", "fat", "fee", "hash", "pool", "cu", "mem", "mom", "fill", "mean", "quant", "us", "sh", "average", "ask", "spread", "loss", "gam", "alpha", "scale", "Sum"], "q1": ["Q1", "qu2", "QOne", "q81", "query81", "eq9", "sqpart", "quest81", "sqone", "q13", "qionce", "quest1", "h1", "k11", "sq81", "qu1", "sq100", " q9", "qonce", "q2", "qi13", "Q2", "quOnce", "QOnce", "kOne", "q100", "eqOne", "q9", "h11", "hOne", "qione", "quest100", "req81", "reqons", "sq13", "eq1", " q001", "query11", "qu81", " q81", "qOne", "qOnce", " qOnce", "qu100", "queryons", "q11", "req1", "qpart", "q001", "eq001", "sq1", "qu9", " q13", "qu001", " qone", "query1", "sqonce", "qi1", " qonce", "req11", "k1", "qons", "questpart", "quOne", "qone", "qupart", " q11", " qOne", " qons", " q2"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int d = sc.nextInt();\\n        int n = sc.nextInt();\\n\\n        int answer = 0;\\n        int d2 = 1;\\n        for(int i = 0;i<d;i++){\\n            d2 *= 100;\\n        }\\n        for(int i = 1;i<=n;i++){\\n                answer = i*d2;\\n        }\\n        if(n == 100){\\n            if(d == 0){\\n                answer+= 1;\\n            }else if(d == 1){\\n                answer+= 100;\\n            }else{\\n                answer+= 10000;\\n            }\\n        }\\n        System.out.println(answer);\\n    }\\n}", "target": "245", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "sche", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "server", "anc", "ca", "SC", "se", "c", "scan", "cs", "uc", "sw", "cl", "cus", "com", "ctx", "Sc", "sq", "sci", "cr", "ocr", "src", "rc", "cer", "soc", "ci", "sp", " SC", "ct", "sch", "sh", "parser", "ec", "cur", "tc", "sem", "ser"], "d": ["f", "cd", "nd", "h", "dim", "sd", "di", "dt", "in", "ad", "id", "m", "l", "da", "t", "dat", "D", "c", "dx", "dl", "u", "e", "j", "ld", "dy", "dn", "dc", "p", "s", "b", "x", "w", "dd", "z", "k", "a", "ds", "q"], "n": ["f", "nan", "h", "ne", "in", "nt", "m", "number", "l", "v", "t", "c", "y", "sn", "u", "e", "o", "j", "np", "s", "dn", "p", "b", "x", "en", "w", "N", "z", "k", "size", "nn", "r"], "answer": ["eni", "value", "name", "grade", "align", "err", "number", "message", "energy", "area", "query", "fix", "offset", "answered", "size", "average", "stuff", "now", "string", "done", "issue", "ee", "search", " answers", "address", "duration", "iterator", "update", "request", "Answer", "dn", "archive", "response", "fee", "evidence", "element", "expression", "probably", "score", "order", "say", "empty", "array", "next", "offer", "square", "reply", "ell", "eden", "see", "maybe", "ask", "username", "data", "length", "integer", "object", "result", "support", "complete", "ace", "word", "question", "audio", "knowledge", "adder", "activity"], "d2": [" dtwo", "D4", "d8", "dy8", "dy1", " d4", "D2", "Dtwo", "dy2", "D3", "dTwo", " d3", "dtwo", " d8", "d3", "dy3", "dy62", "d1", "D8", "dytwo", "dy4", "D62", "dc2", " dTwo", "d4", "D1", "d62", "dcTwo", " d1", " d62", "dc1", "DTwo"], "i": ["li", "I", "is", "di", "in", "ri", "ni", "ik", "gi", "id", "index", "ai", "io", "ji", "si", "l", "ui", "phi", "v", "it", "c", "ie", "y", "uri", "u", "pi", "o", "j", "e", "info", "ii", "qi", "p", "ti", "hi", "x", "oi", "abi", "ini", "start", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "chi", "bi", "a"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\npublic class Main {\\n\tstatic int count;\\n\tpublic static void main(String[] args) throws IOException{\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint x = sc.nextInt();\\n\t\tint[] a = new int[x];\\n\\n\t\tfor(int i=0;i<x;i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t}\\n\\n\t\tbubbleSort(a, x);\\n\t\tshow(a, x, count);\\n\t\tsc.close();\\n\t}\\n\\n\tpublic static void bubbleSort(int[] a, int x) {\\n\t\tboolean flag = true;\\n\t\tcount = 0;\\n\t\twhile(flag) {\\n\t\t\tflag = false;\\n\t\t\tfor(int i=x-1;i>0;i--) {\\n\t\t\t\tif(a[i]<a[i-1]) {\\n\t\t\t\t\tint tmp = a[i];\\n\t\t\t\t\ta[i] = a[i-1];\\n\t\t\t\t\ta[i-1] = tmp;\\n\t\t\t\t\tflag = true;\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tpublic static void show(int[] a, int x, int count2) {\\n\t\tfor(int i=0;i<x;i++) {\\n\t\t\tSystem.out.print(a[i]);\\n\t\t\tif(i!=x-1) {\\n\t\t\t\tSystem.out.print(\" \");\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println();\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n", "target": "170", "substitutes": {"count": ["time", "f", "list", "name", "force", "debug", "string", "base", "act", "call", "nt", "Count", "length", "log", "id", "number", "match", "code", "index", "key", "n", "l", "process", "total", "loop", "print", "sum", "conf", "c", "type", "bug", "cat", "num", "max", "add", "counter", "batch", "cache", "info", "weight", "age", "depth", "current", "p", "offset", "ind", "b", "child", "start", "len", "col", "size", "work", "part", "test", "tag", "coll", "found", "check", "now", "old", "parent", "q"], "sc": ["ner", "ch", "osc", "fc", "mc", "nc", "sb", "sche", "sv", "cv", "cc", "bc", "esc", "pc", "cam", "ss", "sec", "scope", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "com", "cus", "uc", "Sc", "system", "sq", "sa", "sci", "cr", "src", "sf", "rc", "cer", "sr", "soc", "sp", "ci", " SC", "sch", "sh", "ec", "sem", "lc"], "x": ["f", "xy", "xc", "cross", "h", "lex", "is", "xx", "xxxx", "in", "X", "wx", "id", "code", "index", "m", "xf", "n", "yx", "l", "na", "v", "t", "c", "page", "tx", "xt", "d", "y", "pos", "max", "array", "fx", "ax", "dx", "ex", "u", "e", "batch", "xes", "width", "j", "xs", "ux", "p", "b", "python", "en", "w", "xxx", "pe", "win", "rx", "z", "sex", "px", "size", "work", "xa", "wa", "xi", "ix", "check", "xp"], "a": ["f", "ama", "am", "data", "ga", "A", "ab", "ma", "ad", "m", "index", "ai", "n", "ea", "l", "ac", "na", "ba", "da", "ca", "area", "aa", "c", "d", "empty", "y", "aj", "array", "something", "va", "u", "e", "aux", "o", "pa", "aaa", "auto", "s", "sa", "p", "as", "b", "ia", "za", "all", "access", "ha", "au", "sup", "another", "action", "ans", "z", "ata", "qa", "an", "ae", "ada", "alpha", "la"], "i": ["f", "eni", "li", "fi", "I", "mini", "vi", "is", "di", "in", "anti", "ri", "ni", "cli", "id", "gi", "m", "index", "ik", "ai", "me", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "c", "ie", "y", "uri", "zi", "hei", "u", "e", "o", "j", "pi", "info", "ii", "api", "qi", "field", "p", "hi", "b", "oi", "ti", "ind", "slice", "abi", "ini", "start", "yi", "ci", "mi", "ip", "iu", "xi", "init", "ix", "multi", "chi", "bi", "my"], "flag": ["f", "band", "leaf", "debug", " debug", "fail", "ish", "log", " code", " lag", "id", "Flag", "code", "lag", "group", "binary", "ret", "ant", "close", " pig", "wait", "sign", "bug", "cat", " should", "bit", "inline", "fun", "weight", "info", "die", "af", "flags", "field", "offset", "status", "ind", "ag", "sync", "back", " bool", " flags", "start", "mask", " flagged", "play", "part", "big", " bug", "FLAG", " status", "init", "tag", " bit", "lock", "force"], "tmp": ["obj", "tv", "inst", "opp", "st", "m", "v", "app", "area", " rc", " img", "buf", "ie", "mp", " amp", "su", "txt", " delta", " pad", " src", "ii", "p", "b", "amp", "sup", "qq", "rc", "kk", "xxx", "start", "pp", "nb", "temp", "px", "vt", " temp", "stuff", "pad", "mmm", "yy", " prev", "alpha", "now", "fb", " backup", "lab"], "count2": ["c2", "depth2"]}}
{"code": "import java.io.*;\\n \\npublic class Main{\\n    public static void main(String[] args){\\n        BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));\\n        String s,t,u;\\n        int a,b,hako;\\n        hako=0;\\n        String[] abc=new String[2];\\n        int[] xyz=new int[2];\\n        try{\\n                s=reader.readLine();\\n                t=reader.readLine();\\n                a=Integer.parseInt(s);\\n                b=Integer.parseInt(t);\\n                int[] x=new int[a+1];\\n                x[0]=0;\\n                for(int j=1;j<(a+1);j++){\\n                    x[j]=j;\\n                }\\n                for(int i=0;i<b;i++){\\n                    u=reader.readLine();\\n                    abc=u.split(\",\");\\n                    for(int k=0;k<2;k++){\\n                        xyz[k]=Integer.parseInt(abc[k]);\\n                    }\\n                    hako=x[xyz[0]];;\\n                    x[xyz[0]]=x[xyz[1]];\\n                    x[xyz[1]]=hako;\\n                }\\n                for(int l=1;l<(a+1);l++){\\n                    System.out.println(x[l]);\\n                }\\n        }catch(IOException e){\\n            System.out.println(e);\\n        }\\n    }\\n}", "target": "156", "substitutes": {"reader": ["f", "http", "h", "ner", "database", "worker", "keeper", "oder", "input", "out", "ler", "in", "upper", "inner", "io", "server", "loader", "driver", "editor", "er", "entry", "per", " Reader", "resource", "read", "buffer", "rer", "source", "e", "iter", "system", "rar", "Reader", "her", "rr", "stream", "writer", "parser", "ger", "yer", "handler", "over", "right", "ser", "r"], "s": ["f", "ts", "h", "string", "is", "sb", "in", "sv", "n", "si", "S", "ss", "v", "cs", "se", "c", "d", "y", "su", "ls", "es", "e", "o", "js", "xs", "p", "sa", "ns", "sl", "z", "bs", "os", "ks", "strings", "ses", "an", "ds", "r"], "t": ["f", "ts", "h", "st", "dt", "nt", "m", "wt", "n", "te", "g", "v", "c", "d", "y", "e", "o", "pt", "ty", "at", "p", "ot", "T", "w", "z", "table", "ta", "test", "tm", "tf", "r"], "u": ["f", "uid", "h", "ul", "bu", "lu", "m", "n", "ui", "mu", "v", "up", "it", "c", "chu", "uc", "y", "su", "uv", "e", "o", "ur", "p", "un", "ru", "U", "w", "cu", "us", "ou", "nu", "q", "uu"], "a": ["f", "h", "ama", "am", "ga", "A", "oa", "ad", "count", "code", "m", "ai", "active", "n", "ac", "na", "ba", "da", "v", "area", "ca", "aa", "c", "asa", "d", "y", "aj", "va", "e", "o", "pa", "api", "aaa", "aux", "p", "sa", "as", "all", "ia", "w", "au", "ans", "z", "wa", "qa", "an", "ae", "ada", "alpha", "la", "r"], "b": ["f", "bf", "h", "base", "sb", "db", "ab", "length", "m", "n", "B", "ob", "g", "v", "ba", "end", "c", "d", "y", "mb", "rb", "e", "o", "lb", "dy", "p", "boot", "nb", "cb", "ib", "bs", "bd", "beta", "abb", "body", "fb", "r"], "hako": [" hoby", "hazo", "maka", "adhazo", "shoko", "hoby", "adhaco", " haku", "pako", " haco", "paco", "hoto", "hoko", " hazo", "ohaka", "ohako", "moto", "shoshi", "chako", "haku", " hko", " haka", " hasa", "adhaku", "ohasa", " hoshi", "shko", "bhko", "chko", " hoto", "hoshi", "choko", "masa", "ohoto", "bhazo", "haka", "choshi", "adhoko", "adhko", "shako", "bhaku", "poko", "haco", "adhako", "mako", "hko", "hasa", " hoko", "bhako", "adhoby", "poby"], "abc": ["etc", "xc", "pb", "acl", "fc", "auc", "lib", "abs", "ab", "az", "ignore", "bc", "ai", "asc", "cca", "icc", "ac", "anc", "ba", "exc", "ca", "conf", "c", "aa", "uc", "auth", "array", "acc", "rb", "aux", "af", "aaa", "ABC", "dc", "cha", "cb", "rc", "au", "abi", "enc", "arc", "ec", "abb", "coll", "alpha", "bi", "lc", "fb", "lab"], "xyz": ["livezn", "xyzer", "oxyzh", "pyze", "phyze", "livec", "horzi", "xyez", "oxyzn", "xxxxzi", "XYzh", "wyw", "oxyy", "xyze", "xyx", "horze", "XYy", "xxxxy", "xxxxzh", "pyzi", "XYzi", "wyx", "xyzi", "xyzn", "XYz", "phyzh", "pyw", "wyzer", "pyz", "xyw", "phyz", "axyzn", "phyc", "pyq", "phyx", "livex", "wyze", "livez", "horez", "miez", "xyzh", "oxyze", "axyz", "axyze", "oxyz", "oxyzer", "phyzi", "pyez", "wyz", "phyzn", "oxyx", "phyez", "pyx", "wyq", "horz", "liveze", "miew", "xyy", "livezh", "pyzer", "oxyzi", "xyc", "miex", "xxxxz", "mieq", "axyc", "xyq"], "x": ["f", "xy", "xc", "cross", "list", "h", "plus", "data", "xxxx", "xx", "X", "id", "code", "index", "xf", "n", "by", "v", "c", "xt", "tx", "support", "dx", "y", "xml", "array", "xes", "ax", "ex", "e", "xxxxxxxx", "info", "xs", "www", "p", "ux", "ic", "w", "xxx", "rx", "z", "sex", "px", "work", "xa", "test", "ix", "pair", "xp", "rex"], "j": ["f", "uj", "li", "h", "jl", "jj", "jo", "is", "jp", "id", "key", "ji", "n", "g", "v", "jc", "ja", "c", "ie", "it", "d", "y", "aj", "ax", "e", "o", "J", "js", "ii", "p", "je", "z", "ij", "q"], "i": ["f", "li", "I", "is", "in", "ri", "ni", "ik", "id", "index", "ai", "io", "ji", "n", "si", "ui", "phi", "v", "it", "c", "ie", "y", "e", "pi", "o", "ii", "qi", "p", "hi", "oi", "ini", "z", "ci", "mi", "iu", "xi", "ix", "ki", "bi"], "k": ["h", "kid", "K", "uk", "ch", "ko", "ik", "ijk", "ek", "key", "id", "kick", "kn", "n", "ck", "g", "v", "ok", "c", "d", "kl", "y", "kr", "spec", "kh", "p", "ku", "kk", "ak", "sk", "ka", "ky", "kat", "z", "work", "ks", "ki", "ke", "dk", "q", "kw"], "l": ["f", "li", "h", "jl", "ul", "L", "ol", "lin", "pl", "lu", "bl", "lf", "m", "n", "ll", "v", "lv", "c", "cl", "d", "kl", "y", "ls", "dl", "il", "le", "e", "o", "lb", "lo", "loc", "ell", "lp", "p", "ln", "nl", "sl", "z", "line", "fl", "la", "lc", "el", "q"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tString[] info = new Scanner(System.in).nextLine().split(\" \");\\n\t\tInteger min=Integer.valueOf(info[0]);\\n\t\tInteger max=Integer.valueOf(info[1]);\\n\t\tint count=0;\\n\t\tfor(Integer i=min;i<=max;i++) {\\n\t\t\tchar[] numlist=i.toString().toCharArray();\\n\t\t\tif(numlist[0]==numlist[4]&&numlist[1]==numlist[3])\\n\t\t\t\tcount++;\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}", "target": "104", "substitutes": {"info": ["f", "stat", "parse", "list", "name", "data", "is", "help", "id", "lines", "index", "json", "ignore", "si", "zip", "message", "text", "py", "INFO", "inter", "end", "type", "bug", "iso", "feed", "array", "source", "show", "frame", "api", "iter", "hi", "status", "hand", "bis", "error", "start", "information", "line", "part", "function", "init", "fo", "now", "inf", "Info"], "min": ["value", "skip", "dim", "mini", "base", "range", "version", "in", "length", "id", "limit", "m", "index", "low", "n", "mid", "initial", "sum", "mins", "first", "num", "pos", "small", "Min", "next", "start", "len", "part", "mean", "size", "init", "from", "lower", "span"], "max": ["list", "wrap", "plus", "base", "off", "range", "no", "length", "id", "limit", "index", "n", "total", "height", "last", "sum", "end", "chain", "num", "ax", "depth", "x", "start", "Max", "MAX", "part", "size", "k", "work", "pad", "right", "from"], "count": ["value", "list", "val", "level", "base", "data", "nt", "Count", "length", "match", "id", "code", "index", "number", "limit", "key", "keep", "default", "n", "text", "total", "last", "sum", "more", "c", "type", "num", "array", "add", "counter", "weight", "cache", "depth", "current", "offset", "error", "child", "start", "len", "col", "size", "part", "test", "found", "coll", "old", "second"], "i": ["f", "li", "list", "fi", "I", "di", "in", "ri", "id", "gi", "m", "index", "ai", "io", "n", "si", "l", "ui", "mu", "phi", "v", "conv", "c", "d", "y", "uri", "zi", "u", "pi", "e", "j", "o", "ii", "api", "qi", "p", "ti", "hi", "oi", "start", "ci", "k", "mi", "iu", "ip", "xi", "chi", "multi", "bi"], "numlist": ["hexList", "sumset", "monthlisted", "monthpoint", "nonarray", "nonList", "numpoint", "hextype", "checkset", "checklist", "rankarray", "numlisted", "textList", "textlist", "rankset", "numbertype", "hexarray", "monthset", "numset", "checkList", "numberlisted", "checkobject", "indexList", "formpoint", "latList", "numbercoll", "indexset", "monthlist", "textlisted", "indexarray", "numobject", "indexlist", "ranklist", "numtype", "numberline", "formline", "monthline", "numarray", "monthobject", "numcoll", "monthList", "numberpoint", "hexlist", "textarray", "numline", "formlist", "numberarray", "nonset", "sumobject", "numList", "latcoll", "latlisted", "sumList", "texttype", "rankList", "sumlist", "textcoll", "latlist", "numberlist", "numberList", "nonlist", "formlisted"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int a1[] = new int[n+2];\\n        int a2[] = new int[n+1];\\n        a1[0] = 0;\\n        a2[0] = 0;\\n        int sum = 0;\\n        int subsum = 0;\\n        int sum1 = 0;\\n        int sum2 = 0;\\n        for(int i=1;i<=n;i++){\\n            a1[i] = sc.nextInt();\\n        }\\n        sum1 = a1[1];\\n        a1[n+1] = 0;\\n        for(int i=1;i<=n;i++){\\n            a2[i] = sc.nextInt();\\n            sum2 += a2[i];\\n        }\\n        for(int i=1;i<=n;i++){\\n            subsum = sum1+sum2;\\n            if(subsum>sum){\\n                sum = subsum;\\n            }\\n            sum1 += a1[i+1];\\n            sum2 -= a2[i];\\n        }\\n        System.out.println(sum);\\n    }\\n}\\n", "target": "140", "substitutes": {"sc": ["class", "parse", "ner", "ch", "osc", "cont", " Sc", "nc", "out", "sb", "sche", "cv", "esc", "bc", "cc", "asc", "pc", "l", "ss", "na", "scope", "anc", "SC", "se", "c", "scan", "cs", "cl", "uc", "sw", "com", "acc", "Sc", "loc", "system", "sq", "sub", "dc", "sci", "cr", "sync", "rc", "enc", "soc", "or", "sp", "ci", " SC", "sch", "sh", "isc", "ec", "tc", "cur", "coll", "sem", "lib", "lc", " scr"], "n": ["f", "nan", "h", "ne", "name", "don", "nc", "out", "in", "no", "nt", "count", "m", "not", "l", "na", "g", "v", "t", "c", "d", "num", "network", "y", "sn", "u", "e", "o", "j", "cn", "s", "dn", "p", "un", "b", "x", "ns", "nb", "en", "w", "N", "z", "size", "k", "a", "net", "span"], "a1": ["alpha3", "ma1", "A1", "A81", "p3", "alpha1", "a81", "asOne", "a100", "A2", "p2", " aOne", "sa2", "ma100", "pOne", "Aone", " a100", "a3", "a0", "a01", " a01", "maOne", "sa81", "aone", "A100", "sa1", "A0", "as01", "sa3", "AOne", "alphaOne", "as3", "alpha01", "saOne", "aOne", " a0", " a81", "p1", "sa0", "as1", " a3", "ma2", "saone", " aone"], "a2": [" a6", " a52", "A1", "ha0", "p3", "a4", " aTwo", " a4", "an3", "gaTwo", "A2", "ha2", "p2", "p4", " a8", "sa2", "sa52", "as2", "a6", "satwo", "a3", "a0", "aTwo", "as0", "saTwo", "a8", "an8", " atwo", "ga0", "an2", "sa4", "ga2", "sa1", "A0", "an52", "p6", "an6", "ha1", "as3", "an4", "a52", "ga1", " a0", "sa8", "sa0", "as1", " a3", "atwo", "hatwo", "A3"], "sum": ["parse", "val", "sim", "shape", "comment", "sort", "summary", "miss", "vol", "out", "mass", "count", "m", "index", "key", "seed", "cost", "unit", "si", "split", "ac", "total", "na", "ass", "norm", "g", "gram", "diff", "min", "c", "num", "max", "su", "use", "mix", "acc", "weight", "cache", "sa", "b", "fat", "sav", "error", "missing", "wh", "mask", "hash", "scale", "mem", "sp", "part", "size", "mean", "fill", "sh", "average", "loss", "a", "gam", "alpha", "um", "sign", "Sum"], "subsum": [" subtotal", "singfat", "ubtotal", "subsize", "plcount", "supersum", " submean", "smallfat", "singmean", "supertotal", "submean", "ubsize", "ubmean", "subfat", "ubsi", "smallsi", "smallsum", " subum", "singtotal", "singsum", "supercount", "plum", "supermean", "subtotal", "ubfat", "supersize", "subcount", "smalltotal", "smallmean", "plsum", "pltotal", " subsi", "subsi", " subcount", " subsize", "ubcount", "ubsum", "subum", "superum"], "sum1": ["alpha2", "count3", "um3", "sum3", "alpha1", "um01", "count01", " sump", "um1", "ump", " sum01", "count1", "sumone", "ap", " sumone", "um0", "aone", "Sumone", "alphap", "alphaone", "sum01", "sump", "umone", "sum0", " sum0", " sum3", "count0", "Sum1", "um2"], "sum2": ["um02", "umtwo", "countTwo", "sa2", " sumtwo", " sum02", "maTwo", "sumTwo", "Sum2", "ma02", "saTwo", " sumTwo", "count2", "um0", "umTwo", "miss62", "um62", " sum62", "Sum0", "Sumtwo", "ma62", "count02", "Sum02", "miss2", "sumtwo", "sum62", "sum0", "SumTwo", "sa62", " sum0", "sum02", "ma2", "um2", "missTwo"], "i": ["f", "eni", "li", "fi", "name", "I", "mini", "shift", "one", "di", "ri", "ni", "gi", "id", "inner", "index", "ai", "io", "si", "ui", "mu", "g", "v", "phi", "left", "it", "c", "ie", "y", "uri", "source", "u", "e", "o", "j", "pi", "info", "ii", "api", "qi", "current", "ti", "p", "b", "x", "oi", "sup", "slice", "ini", "yi", "z", "ci", "part", "mi", "iu", "ip", "xi", "init", "ix", "multi", "bi", "lc"]}}
{"code": "import java.io.*;\\n\\npublic class Main{\\n    public static void main(String[]args)throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringBuilder sb = new StringBuilder();\\n\\n        int count = Integer.parseInt(br.readLine());\\n        String[] str = br.readLine().split(\" \");\\n        int[] num = new int[count];\\n        for(int i=0; i<count; i++){\\n            num[i] = Integer.parseInt(str[i]);\\n        }\\n\\n        for(int i=0; i < count/2; i++){\\n            int k = count - (i+1);\\n            int swp = num[i];\\n            num[i] = num[k];\\n            num[k] = swp;\\n        }\\n        for(int i=0; i<count-1; i++){\\n            sb.append(num[i]).append(\" \");\\n        }\\n        sb.append(num[count-1]);\\n        System.out.println(sb);\\n\\n    }\\n}", "target": "79", "substitutes": {"br": ["obj", "bf", "tr", "bh", "ler", "db", "ab", "ref", "bl", "err", "bro", "binary", "fr", "bc", "io", "arr", "bar", "buf", "er", "reader", "wr", "rb", "hr", "img", "bb", "iter", "HR", "b", "cr", "yr", "cb", "src", "ber", "sr", "her", "bs", "sp", "stream", "BR", "bridge", "lr", "browser", "Br", "body", "r"], "sb": ["gb", "usb", "bm", "bf", "pb", "BB", "buff", "bh", "db", "sv", "bl", "bt", "binary", "obb", "bc", "sg", "erb", "si", "zb", "fb", "bp", "buf", "bj", "su", "xb", "rb", "SB", "ruby", "lb", "bb", "sa", "b", "nb", "cb", "sf", "src", "kb", "bps", "sp", "bs", "bd", "abb", "bsp", "lab", "eb", "bg", "sth"], "count": ["f", "list", "h", "level", "ch", "name", "base", "call", "Count", "length", "group", "id", "limit", "number", "code", "key", "index", "follow", "n", "l", "order", "sum", "match", "con", "c", "type", "max", "weight", "counter", "age", "info", "cache", "depth", "current", "p", "b", "all", "ind", "child", "start", "len", "col", "common", "z", "part", "size", "connection", "found"], "str": ["obj", "list", "div", "tr", "name", "ner", "string", "data", "stri", "st", "id", "code", "number", "fr", "unit", "split", "arr", "text", "block", "c", "cat", "u", "url", "iter", "status", "STR", "strip", "msg", "enc", "sr", "char", "sl", "line", "part", "init", "Str", "r"], "num": ["f", "value", "mult", "name", "miss", "grade", "param", "prefix", "no", "number", "code", "default", "block", "norm", "form", "inc", "sup", "size", "init", "multi", "span", "done", "unit", "minus", "update", "digit", "u", "status", "col", "umi", "uni", "node", "valid", "gen", "sort", "mon", "range", "id", "index", "split", "text", "note", "nam", "end", "pos", "iter", "p", "b", "Num", "mn", "div", "dim", "ul", "data", "nom", "n", "sum", "result", "bin", "tri", "zero", "info", "np", "loc", "missing", "nb", "nu", "nn", "rank", "um"], "i": ["f", "eni", "li", "fi", "I", "vi", "di", "in", "ik", "ni", "cli", "gi", "id", "m", "ri", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "g", "it", "c", "ie", "d", "y", "uri", "zi", "u", "pi", "o", "e", "j", "info", "ii", "api", "qi", "p", "ti", "b", "x", "oi", "hi", "ini", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "multi", "ki", "bi", "lc", "chi", "q"], "k": ["f", "h", "kid", "K", "ko", "ik", "ek", "id", "key", "kick", "n", "g", "v", "ok", "end", "c", "y", "kh", "u", "e", "o", "j", "p", "b", "x", "ku", "kw", "w", "kk", "sk", "ky", "z", "ks", "ip", "a", "ki", "ke", "q", "r"], "swp": ["promp", "SWp", "swps", "swk", " swi", "promps", "proml", "scf", "SWl", "whek", "swlp", "SWps", "promi", "sclp", "scp", "whep", " swf", "whelp", "swl", "sck", "swf", "whef", " swk", " swps", "SWi", "swi", " swl", " swlp"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.lang.reflect.Array;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream    inputStream    = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader    in                      = new InputReader(inputStream);\\n        PrintWriter      out                    = new PrintWriter(outputStream);\\n        Task                 solver               = new Task();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class Task {\\n    \tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\\n    \t\tint[] A = new int[3];\\n    \t\tA[0] = in.nextInt();\\n    \t\tA[1] = in.nextInt();\\n    \t\tA[2] = in.nextInt();\\n    \t\tArrays.sort(A);\\n    \t\tint total = Math.abs(A[0] - A[1]);\\n    \t\ttotal += Math.abs(A[1] - A[2]);\\n    \t\tout.println(total);\\n    \t}\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n\\n", "target": "247", "substitutes": {"inputStream": ["outputSt", "InputStream", "InputFlow", "outputFlow", "outputSteam", " inputSteam", "InputSt", " inputSt", " inputFlow", "inputFlow", "Inputstream", "InputSteam", " inputstream", "inputSt", "outputstream", "inputstream", "inputSteam"], "outputStream": ["applicationStreamer", "outputStreamer", "inputStreamer", "OutputStream", "outputSteam", "OutputSteam", " outputSteam", "applicationstream", "Outputstream", "referenceSteam", "referenceStream", "referencestream", " outputstream", "applicationStream", " outputStreamer", "referenceStreamer", "OutputStreamer", "applicationSteam", "outputstream", "inputstream", "inputSteam"], "in": ["f", "arg", "path", "cin", "data", "is", "input", "version", "lin", "log", "err", "din", "pin", "id", "inner", "image", "config", "io", "nin", "exec", "l", "null", "IN", "inn", "min", "up", "con", "bin", "d", "er", "kin", "request", "isin", "resource", "inc", "read", "source", "this", "info", "inside", "url", "s", "ic", "rin", "file", "vin", "ini", "sin", "into", "login", "win", "again", "ins", "conn", "i", "connection", "init", "get", "from", "In", "gin", "arin", "run", "inf", "a", "r"], "out": ["name", "off", "prefix", "call", "err", "inner", "flow", "server", "inc", "wr", "to", "down", "again", "temp", "outer", "init", "outs", "exit", "string", "one", "self", "bar", "resource", "ex", "cache", "Out", "copy", "work", "socket", "gen", "client", "console", "log", "post", "null", "IN", "up", "print", "page", "OUT", "array", "buffer", "this", "o", "file", "sync", "line", "writer", "connection", "In", "parent", "net", "list", "data", "outside", "task", "io", "report", "window", "exec", "process", "write", "bin", "project", "output", "info", "user", "error", "w", "problem", "pool", "conn"], "solver": ["Solution", "Solved", "Solver", "solution", "ssolver", "solved", "ssolve", "solve", "Sipper", "resolve", "ssipper", "ssolved", "sipper", "ssolution", "resolved", " solution", "Solve", "resolution", " sipper", "resolver", " solve"], "testNumber": ["trialNumber", " trialNo", "trialNum", " testNo", " trialnumber", " trialNumber", "trialNo", " trialNum", " testnumber", "testNum", "trialnumber", " testNum", "testnumber", "testNo"], "A": ["Args", "Code", "G", "There", "SA", "Up", "I", "L", "AA", "Only", "X", "API", "TA", "This", "P", "Info", "H", "New", "Any", "ASC", "B", "S", "Y", "As", "And", "D", "Entry", "Order", "None", "array", "Access", "Action", "W", "Ma", "Area", "F", "Adam", "You", "V", "At", "CA", "R", "Result", "All", "Each", "C", "An", "The", "U", "T", "N", "Ar", "M", "NA", "Alpha", "Max", "Address", "First", "Average", "LA", "Ha", "Total", "In", "Array", "Parts", "O", "a"], "total": ["valid", "translation", " average", "data", "done", "failed", "no", "length", "eta", "key", "count", "mega", "stable", "cost", "otal", "last", "sum", "diff", "t", " Total", "result", "type", " totals", "toc", "complete", "info", "full", "auto", "current", " TOTAL", " all", "offset", "all", "error", "down", "tax", "trans", "gross", "basic", "partial", "part", "real", "ta", "average", "Total", "loss", "alpha", "parent", "scale", "successful", "percent"], "reader": ["parse", "client", "worker", "keeper", "input", "socket", "inner", "io", "object", "report", "server", "loader", "driver", "iterator", "er", "entry", "per", "feed", "pointer", "resource", "read", "buffer", "re", "source", "e", "this", "ry", "wrapper", "rer", "iter", "row", "cr", "reading", "file", "Reader", "slice", "or", "ro", "table", "writer", "parser", "connection", "handler", "lock", "r"], "tokenizer": ["tokenize", "Tokenizer", "initialization", "Tokener", "normalization", " tokenner", "okener", "okenizing", "Tokenler", "Tokenizers", " tokenization", "okeniser", "okenization", "serialize", "tokeniser", "okenizers", " tokeniser", "serializer", "Tokenization", "Tokenner", "okenler", "normalize", "tokenizers", " tokenizers", "Tokenizing", "initializer", "Tokeniser", "tokenizing", "initialize", "normalner", "normalizer", " tokenler", "Tokenize", "serializers", "tokenner", " tokenize", "tokenler", "tokenization", "serialization", " tokenizing", "okenizer", " tokener", "okenner", "okenize", "tokener", "initialner"], "stream": ["channel", "client", "cont", "path", "string", "data", "raw", "input", "console", "context", "image", "socket", "document", "window", "server", "v", "loader", "form", "sw", "ream", "feed", "resource", "read", "output", "buffer", "source", "user", "serial", "row", "file", "w", "slice", "response", "pool", "trans", "temp", "view", "Stream", "writer", "connection", "body", "handler", "lock", "old", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint nam = sc.nextInt();\\n\t\tint nam2 = sc.nextInt();\\n\t\t\\n\t\tint ans = -1;\\n\t\tif(nam>=1 && nam<=9){\\n\t\t    if(nam2>=1 && nam2<=9){\\n\t\t        ans = nam * nam2;\\n\t\t    }\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "58", "substitutes": {"sc": ["ner", "osc", "ch", " Sc", "nc", "sche", "sb", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "na", "server", "scope", "ca", "SC", "c", "se", "cs", "scan", "uc", "sw", "cl", "com", "Sc", "cus", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "ci", "sp", " SC", "ct", "sch", "sh", "ec", "tc", "cur", "ser", "lc"], "nam": ["nan", "sim", "shape", "sam", "name", "dim", "miss", "am", "lam", "nom", "in", "prefix", "dam", "aka", "nic", "n", "han", "cam", "month", "inn", "na", "anc", "gram", "anim", "num", "nav", "kin", "mix", "ram", "ny", "acc", "nas", "nw", "ady", "cn", "dn", "aim", " dim", "ns", "ku", "cas", "wh", "asha", "win", "cand", "iam", "pal", "amin", "comb", "gap", "typ", "tim", "an", "ham", "gin", "nn", "imag", "nit", "ana"], "nam2": ["na002", "annTwo", "namTwo", "mix002", "an02", "na2", "nam02", "nam52", "name52", "anntwo", "samTwo", "nam002", "aunttwo", "mix2", "anc1", "anc2", "auntTwo", "namtwo", "an2", "mix02", "ramTwo", "naTwo", "nameTwo", "rank2", "sam1", "nam1", "ram2", "mixTwo", "sam2", "rank1", "name2", "nametwo", "ann2", "ann52", "aunt2", "aunt52", "anTwo", "na1", "na02", "an002", "ram1"], "ans": ["nan", "names", "ANS", " scans", "ats", "ann", "chan", "aned", "ays", "anas", "ons", "amps", "AN", "annels", "acts", "na", "anc", "aces", "cs", "ents", "ads", "can", "lan", "ls", "nas", "aus", "asts", "idents", "s", "nes", "as", "ns", "atan", "olds", "cas", "ants", "sk", "eps", "acs", "ins", "ks", "ras", "an", "outs", "powers", "ars", "ds", "ana", "span"]}}
{"code": "import java.io.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n\t// write your code here\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        PrintWriter pw =new PrintWriter(new OutputStreamWriter(System.out));\\n        char n = br.readLine().charAt(0);\\n        pw.println((char)(((int)n)+1));pw.flush();\\n    }\\n}\\n", "target": "150", "substitutes": {}}
{"code": "import java.util.*;\\n \\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n      \tint t = 0;\\n      \tint x = 0;\\n      \tint y = 0;\\n \\n      for (int i=0; i<N; i++) {\\n        int T = sc.nextInt();\\n        int X = sc.nextInt();\\n        int Y = sc.nextInt();\\n        \\n        int dt = T - t;\\n        int dist = Math.abs(X - x) + Math.abs(Y - y);\\n        if ((dist > dt) || ((dist - dt) % 2 != 0)) {\\n          System.out.println(\"No\");\\n          return;\\n        }\\n        //\u79fb\u52d5\u3057\u305f\u5834\u6240\u3092\u8a2d\u5b9a\\n        t = T;\\n        x = X;\\n        y = Y;\\n      }\\n      System.out.println(\"Yes\");\\n    }\\n}", "target": "221", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "mc", " Sc", "nc", "ga", "sb", "sche", "cli", "search", "cv", "esc", "bc", "cc", "asc", "pc", "ck", "ss", "sec", "anc", "cus", "SC", "se", "c", "scan", "cs", "sw", "cl", "ca", "uc", "ctx", "cor", "str", "Sc", "sq", "sub", "sci", "cr", "src", "sf", "rc", "soc", "sp", "ci", " SC", "sch", "sh", "parser", "ec", "cur", "coll", "cmp", "ser", "lc"], "N": ["G", "K", "I", "L", "Z", "Size", "NI", "Ni", " n", "P", "Q", "NS", "H", "n", "NC", "B", "S", "E", "D", "NL", "NO", "F", "V", "No", "NM", "R", "NN", "C", "Num", "M", "Ne", "NR", "NT", "O"], "t": ["f", "ts", "I", "st", "nt", "m", "tz", "n", "l", "total", "tp", "v", "c", "type", "tt", "d", "e", "o", "j", "pt", "at", "p", "start", "z", "ta", "test", "NT"], "x": ["f", "xy", "h", "data", "xx", "id", "m", "index", "n", "yx", "l", "height", "c", "tx", "d", "dx", "ax", "ex", "width", "point", "xs", "p", "b", "w", "rx", "z", "px", "xi", "ix"], "y": ["f", "ery", "h", "xx", "oy", "in", "ey", "id", "cy", "m", "zy", "n", "yx", "l", "ye", "height", "py", "d", "vy", "yt", "ny", "ry", "j", "dy", "s", "p", "b", "w", "q", "yi", "ya", "z", "yy", "a"], "i": ["f", "li", "fi", "I", "di", "in", "ni", "id", "m", "index", "ai", "io", "n", "si", "ui", "v", "c", "ie", "d", "u", "pi", "e", "j", "ii", "qi", "at", "p", "ti", "oi", "ini", "z", "ci", "mi", "ip", "xi", "iu", "chi", "ix", "multi"], "T": ["TN", "G", "LT", "I", "L", "Z", "TX", "A", "DT", "P", "Q", "TT", "H", "n", "Type", "S", "E", "D", "Ti", "d", "WT", "F", "V", "C", "TS", "U", "M", "MT", "NT", "TH"], "X": ["WH", "EL", "ZX", "I", "L", "Z", "XL", "Index", "TX", "Width", "XY", "P", "Q", "H", "S", "FF", "D", "Ex", "EX", "Xi", "W", "F", "XP", "V", "R", "U", "IP", "MX", "XX", "DX", "ID"], "Y": ["G", "I", "L", "Z", "TX", "A", "EY", "YY", "XY", "P", "Q", "H", "S", "B", "E", "D", "W", "YA", "J", "F", "V", "TY", "C", "U", "M", "NY", "Height"], "dt": ["f", "cd", "det", "rt", "done", "di", "DT", "nt", "expected", "tz", "gt", "td", "diff", "dat", "D", "duration", "tt", "d", "dx", " dd", "dl", "txt", "yt", "e", "dev", "j", "dy", "p", "ti", "elt", "tif", "dq", "cb", "dm", "md", "Ds", "dd", "gd", "vt", "kt", "ct", "ht", "delay", "ta", "test", "beta", "lt", "qt", "Delta", "NT", "distance", "cot", "ds", "Dist"], "dist": ["f", "det", "div", "dim", "sd", "di", "dis", "nt", "err", "length", "dr", "dj", "score", "df", "diff", "d", "dx", "transfer", " Dist", "progress", "dev", "def", "info", "np", "dy", "depth", "dc", "p", "sup", "dm", "md", "dir", "conn", "Distance", "test", "ds", "desc", "feat", "feature", "comp", "chi", "distance", " distance", "Dist"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint cnt = 0;\\n\t\tif (a == b) {\\n\t\t\tcnt++;\\n\t\t}\\n\t\tif (b == c) {\\n\t\t\tcnt++;\\n\t\t}\\n\t\tif (c == a) {\\n\t\t\tcnt++;\\n\t\t}\\n\t\tif (cnt == 1) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "117", "substitutes": {"sc": ["class", "osc", "ch", "cont", "mc", " Sc", "nc", "sb", "sche", "cv", "cc", "bc", "esc", "asc", "pc", "text", "ss", "sec", "scope", "ca", "SC", "se", "scan", "cus", "cl", "uc", "sw", "cs", "com", "ctx", "acc", "Sc", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "sp", "ci", " SC", "ec", "tc", "cur", "coll", "desc", "sem", "lc"], "a": ["f", "am", "ga", "A", "ab", "ad", "oa", "ai", "n", "ac", "na", "da", "ba", "ca", "area", "aa", "d", "y", "ar", "aj", "va", "u", "e", "o", "pa", "api", "s", "fa", "sa", "as", "p", "au", "ak", "k", "i", "art", "an", "ae", "alpha", "r"], "b": ["f", "h", "sb", "db", "ab", "ad", "bas", "bc", "n", "l", "B", "wb", "ob", "ba", "v", "fb", "aa", "d", "y", "rb", "u", "e", "o", "j", "bb", "s", "p", "x", "nb", "cb", "ib", "bs", "k", "i", "be", "eb", "r"], "c": ["f", "h", "cf", "ch", "cy", "cc", "n", "l", "ac", "v", "con", "ca", "cs", "cat", "uc", "d", "y", "ce", "u", "e", "j", "dc", "p", "x", "C", "cr", "cb", "w", "q", "cu", "z", "ci", "k", "ct", "i", "ec", "lc"], "cnt": ["bnc", "lcnt", "fnt", "cnc", "scnc", " cnc", " catt", "bne", "cnn", " cret", "ccst", "bnd", "scne", "lcct", "crc", "ancret", "encnt", "lcnn", "crrt", " cint", "cnd", "fct", "cct", "encnc", " crt", "cst", "scnd", "bnt", "fnc", "ancrt", "encatt", "cint", "ccnt", " cst", "crnt", "lcst", "scint", "lcrc", "cne", " cnn", "fnn", "crnc", " cne", "catt", " cnd", "ancint", "cratt", " cct", "ccrc", " crc", "ancnt", "scrt", "lcnc", "scret", "encrt", "scnt", "ccct", "crt", "cret"]}}
{"code": "import java.util.*;\\nimport java.util.Collections;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n \\n      Scanner sc = null;\\n      sc = new Scanner(System.in);\\n      int N = sc.nextInt();\\n      int K = sc.nextInt();\\n      long sumPrice = 0;\\n      ArrayList<Integer> pList = new ArrayList<Integer>();\\n      while(sc.hasNextInt()){\\n        pList.add(sc.nextInt());\\n      }\\n      Collections.sort(pList);\\n      for(int i=0; i < K; i++){\\n        sumPrice += pList.get(i);\\n      }\\n      System.out.println(sumPrice);\\n    }\\n}", "target": "41", "substitutes": {"sc": ["ner", "cont", "osc", "exp", "fc", "auc", "mc", " Sc", "RC", "nc", "ga", "sche", "sb", "cv", "cc", "bc", "config", "esc", "asc", "pc", "scope", "anc", "cus", "SC", "c", "scan", "cs", "se", "cl", "uc", "sw", "ca", "inc", "acc", "cor", "Sc", "loc", "system", "sq", "sub", "dc", "sci", "cr", "src", "sync", "cb", "rc", "cer", "enc", "soc", "sp", "ci", " SC", "sch", "sh", "tc", "ec", "cur", "isc", "coll", "lib", "lc"], "N": ["G", "I", "L", "Z", "NI", " n", "Node", "P", "NS", "H", "n", "NC", "S", "E", "NL", "MN", "J", "F", "V", "NB", "NN", "C", "T", "M", "NA", "Ns", "NT", "O"], "K": ["O", "KB", "G", "KC", "I", "L", "Z", "PK", "SK", "X", "length", "KR", "P", "Q", "HK", "H", "KS", "S", "Y", "B", "E", "D", "W", "J", "F", "V", "R", "C", "T", "KI", "U", "KK", "M", "k", "Sk"], "sumPrice": ["meanShipping", "useMoney", "numShipping", "usePrice", "sumprice", " sumSum", " sumShipping", "sumShipping", "meanMoney", "useSum", "meanAmount", "totalprice", "sumSum", " sumMoney", "meanSum", "numprice", "numPrice", "meanprice", "meanPrice", "sumAmount", "totalAmount", " sumprice", "sumMoney", " sumAmount", "totalPrice"], "pList": ["pChan", " pChan", "prInt", "brObj", "PChan", "prL", "poCollection", "npSet", "psRest", " pSet", "poStack", "pCollection", "pStack", " pPack", " pL", "PRest", "pObj", "brSet", " pCollection", "prPack", "nL", "nplist", "psL", "PList", " pRest", "pL", "PInt", "nStack", "psChan", "pSet", "brlist", "npList", "PPack", "PL", "nList", "poList", "psList", " pObj", " plist", "pInt", "pPack", "prList", "nCollection", " pStack", "pRest", "npObj", " pInt", "poL", "plist", "brList"], "i": ["f", "li", "fi", "I", "shift", "di", "in", "ri", "id", "gi", "m", "index", "ai", "io", "ji", "si", "ui", "mu", "phi", "v", "it", "ie", "result", "d", "zi", "uri", "batch", "u", "e", "o", "pi", "j", "info", "ii", "qi", "wei", "p", "ti", "b", "oi", "hi", "x", "pass", "slice", "abi", "start", "ci", "part", "k", "ip", "xi", "init", "chi", "multi", "ix", "bi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint N = sc.nextInt();//\u4eba\u6570\\n\t\tint K = sc.nextInt();//\u8eab\u9577\\n\t\tint d[] = new int[N]; //\u914d\u5217\u6570\u3092\u6c7a\u5b9a\\n\t\t\\n\t\tfor(int i = 0; i<N; i++) {\\n\t\t\td[i] = sc.nextInt(); //\u914d\u5217\u306e\u4e2d\u8eab\u3092\u633f\u5165\\n\t\t\t//System.out.println(d[i]);//\u914d\u5217\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\\n\t\t}\\n\t\tint count = 0;\\n\t\tfor(int i = 0; i<N; i++) {\\n\t\t\tif(d[i]>=K) {\\n\t\t\t\tcount += 1;\\n\t\t\t}else {\\n\t\t\t\tcount += 0;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n\t\\n}\\n", "target": "145", "substitutes": {"sc": ["class", "osc", "ch", "nc", "sb", "sche", "proc", "cc", "bc", "esc", "pc", "exec", "ss", "sec", "scope", "app", "SC", "se", "c", "scan", "cs", "cl", "uc", "Sc", "dc", "sci", "cr", "src", "sf", "sync", "rc", "soc", "sl", "set", "sp", "ci", " SC", "ec", "ser", "ctl"], "N": ["G", " M", "K", "I", "L", "Z", " D", "A", " n", "P", "Q", "NS", "n", "S", "B", "D", "NL", " C", "J", "F", "V", "NM", "R", "NN", "T", "C", "M", "O"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n//\t\tlong ans2 = 0;\\n\t\tint ans = 0;\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint  n = sc.nextInt();\\n\t\tint  k = sc.nextInt();\\n\\n//\t\tint  k = sc.nextInt();\\n//\t\tlong d = sc.nextLong();\\n\\n//\t\tString string = sc.next();\\n//\t\tStringBuilder s = new StringBuilder(string);\\n\\n//\t\tboolean f = true;\\n//\\n\t\tint[] a = new int[n];\\n\t\tint[] b = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t}\\n//\t\tfor (int i = 0; i < k; i++) {\\n//\t\t\tb[i] = sc.nextInt();\\n//\t\t}\\n//\t\tfor (int i = 1; i <n; i++) {\\n//\t\t\tb[i] = sc.nextInt();\\n//\t\t}\\n//\t\tint[][] c = new int[h][w];\\n//\t\tfor (int i = 0; i < h; i++) {\\n//\t\t\tfor(int j = 0; j < w; j++) {\\n//\t\t\t\tc[i][j] = 0;\\n//\t\t\t}\\n//\t\t}\\n\\n//\t\tint tmp_a = 0;\\n//\t\tint tmp_b = 0;\\n\\n\t\tfor(int i:a) {\\n\t\t\tif(i>=k) {\\n\t\t\t\tans++;\\n\t\t\t}\\n\t\t}\\n\\n\\n\t\tSystem.out.println(ans);\\n\\n\t\tsc.close();\\n\t}\\n}", "target": "145", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int lsn = 65;\\n        int ssn = 97;\\n\\n        char large[] = new char[26];\\n        char small[] = new char[26];\\n        char sign[] = {' ', ',', '.'};\\n\\n        for (int i = 0; i < 26; i++) {\\n            large[i] = (char) lsn++;\\n            small[i] = (char) ssn++;\\n        }\\n\\n        String str = sc.nextLine();\\n        StringBuilder ans = new StringBuilder();\\n\\n        for (int i = 0; i < str.length(); i++) {\\n            String s = String.valueOf(str.charAt(i));\\n            if (s.matches(\"[A-Z]\")) {\\n                ans.append(s.toLowerCase());\\n            } else if (s.matches(\"[a-z]\")) {\\n                ans.append(s.toUpperCase());\\n            } else {\\n                ans.append(str.charAt(i));\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "192", "substitutes": {"sc": ["class", "ner", "ch", "osc", "exp", "fc", " Sc", "nc", "out", "esc", "bc", "cc", "pc", "ss", "sec", "server", "scope", "ca", "SC", "c", "scan", "se", "sw", "uc", "cs", "spec", "Sc", "system", "sci", "cr", "src", "sf", "sync", "rc", "cer", "enc", "soc", "sp", " SC", "sh", "ec", "screen", "lc", " scr"], "lsn": ["msgn", "msi", " lsd", "gsi", "nsi", " lsne", "gsl", "gsn", "olsne", "lsl", "mesd", "gsgn", "nsn", "nsgn", "mesne", " lsin", "olsin", "mesn", "olsd", "nsl", "msn", "olsn", "lsd", "lsi", "lsin", "lsne", "mesin", "lsgn", "msl"], "ssn": ["ssz", "ssl", "bsz", "psno", "dsz", "\u00dfl", "lsl", "psz", "dsc", "ssc", "psl", "bsl", "psn", "\u00dfno", "ssno", "dsn", "psc", "\u00dfc", "dsl", "bsc", "lsc", "lsno", "\u00dfn", "bsn"], "large": ["primary", "center", "regular", "shape", "cover", "plus", "single", "base", "raw", "human", "medium", "photo", "core", "limit", "image", "ignore", "mega", "default", "high", "character", "significant", "remote", "area", "feed", "larg", "square", "show", "Large", "full", "member", "sub", "wide", "arrow", "fast", "real", "big", "size", "largest", "alpha", "lc", "company", "scale"], "small": ["sized", "hide", "huge", "mini", "plus", "single", "tiny", "simple", "medium", "thin", "special", "local", "south", "low", "little", "just", "initial", "min", "only", "international", "second", "larg", "sharp", "missing", "six", "Small", "arrow", "size", "big", "largest", "sh", "old", "scale", "secondary"], "sign": ["Sign", "parse", "center", "shape", "plus", "act", "special", "significant", "ign", "close", "area", "se", " signs", "feed", "signed", "circle", "pack", "script", "open", "ind", "start", "pen", "init", "alpha", "scale"], "i": ["f", "eni", "li", "fi", "I", "vi", "mini", "data", "di", "ri", "ni", "cli", "gi", "id", "m", "index", "length", "ai", "io", "ji", "si", "ui", "phi", "v", "it", "ie", "y", "uli", "zi", "uri", "u", "pi", "o", "e", "j", "info", "ii", "current", "qi", "ti", "hi", "b", "oi", "p", "ind", "slice", "abi", "ini", "yi", "temp", "z", "ci", "mi", "ip", "iu", "xi", "init", "chi", "ix", "multi", "bi", "lc"], "str": ["f", "obj", "parse", "br", "div", "ner", "name", "exp", "string", "data", "input", "stri", "st", "in", "err", "id", "inner", "fr", "pr", "dr", "arr", "text", "ss", "cs", "c", "style", "form", "er", "kr", "spec", "ar", "txt", "wr", "gr", "hr", "iter", "p", "status", "b", "STR", "strip", "cr", "pass", "sr", "char", "sl", "sp", "line", "part", "strings", "cur", "Str", "r"], "ans": [" ads", "anks", "ANS", " scans", "rans", "string", " chars", "ils", "ats", "ann", "ands", "arts", "aned", "reads", "ays", "anas", "groups", "amps", "ss", "anc", "aces", "ents", "scan", "ads", " signs", "lan", "ls", "es", "ions", "ens", "aus", "asts", "anners", "angs", "as", "ns", "atan", "san", "cas", "ants", "olds", "ags", "sk", " spans", "eps", "os", "ins", "ings", "ks", "strings", "ras", "rs", "an", "atts", "ars", "ams", "ds", "ons"], "s": ["f", "ts", "h", "hs", "string", "is", "abs", "sb", "ssl", "sv", "lines", "gs", "parts", "si", "l", "its", "ss", "S", "ops", "g", "v", "t", "cs", "se", "c", "conf", "d", "words", "site", "su", "settings", "ls", "es", "u", "e", "signed", "js", "xs", "p", "sets", "ns", "sync", "ps", "ws", "sl", "bs", "os", "us", "ins", "strings", "ses", "rs", "fs", "ds", "sym", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tint max=-1000000,min=1000000;\\n\t\tdouble sum=0;\\n\t\tfor(int i=0;i<n;i++){\\n\t\t\tint a=sc.nextInt();\\n\t\t\tif(a>max){\\n\t\t\t\tmax=a;\\n\t\t\t}\\n\t\t\tif(a<min){\\n\t\t\t\tmin=a;\\n\t\t\t}\\n\t\t\tsum+=a;\\n\t\t}\\n\t\tSystem.out.printf(\"%d %d %.0f\\n\",min,max,sum);\\n\t}\\n}", "target": "21", "substitutes": {"sc": ["ner", "osc", "ch", "cont", "mc", " Sc", "nc", "sche", "sb", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "na", "anc", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "cus", "uc", "acc", "Sc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "sp", "ci", " SC", "sch", "sh", "ec", "tc", "cur", "sm", "ser", "lc"], "n": ["f", "h", "ne", "nt", "count", "m", "l", "t", "c", "d", "num", "network", "y", "sn", "u", "e", "o", "j", "s", "p", "b", "x", "ns", "nb", "en", "w", "N", "len", "z", "k", "size", "conn", "nn", "net", "span"], "max": ["f", "nd", "h", "wrap", "base", "plus", "range", "act", "in", "az", "id", "limit", "m", "index", "default", "total", "patch", "last", "v", "end", "ca", "c", "conf", "d", "num", "can", "ax", "always", "auto", "p", "b", "x", "mod", "w", "Max", "MAX", "size", "k", "mean", "right", "parent", "q", "r"], "min": ["lower", "skip", "name", "sort", "mini", "miss", "am", "range", "act", "id", "key", "m", "index", "unit", "mid", "na", "area", "first", "pos", "zero", "Min", "small", "next", "s", "sub", "sa", "minimum", "p", "b", "start", "po", "partial", "mean", "size", "init", "an", "alpha", "scale", "sign", "MIN", "span"], "sum": ["val", "amount", "div", "sam", "cal", "miss", "vol", "am", "data", "count", "index", "span", "si", "total", "na", "diff", "aa", "d", "um", "num", "zero", "ax", "sa", "as", "offset", "fat", "part", "size", "mean", "spread", "average", "an", "alpha", "scale", "Sum"], "i": ["f", "li", "I", "di", "in", "ami", "ni", "id", "gi", "index", "ai", "si", "ui", "v", "t", "c", "d", "num", "y", "u", "e", "o", "j", "pi", "api", "ii", "qi", "p", "ti", "b", "ia", "x", "oi", "hi", "ini", "z", "ci", "iu", "xi", "ki", "multi", "bi"], "a": ["f", "sta", "am", "data", "ga", "A", "ab", "ma", "oa", "ai", "ea", "ac", "na", "ba", "da", "app", "area", "ca", "c", "aa", "d", "y", "aj", "next", "va", "pa", "e", "j", "api", "auto", "fa", "sa", "as", "b", "p", "x", "ia", "sup", "access", "ha", "au", "ata", "wa", "qa", "an", "ae", "alpha", "la"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner input = new Scanner(System.in);\\n\t\tString S = input.nextLine();\\n\t\tString T = input.nextLine();\\n\t\tString[] SList = S.split(\"\");\\n\\n\t\tString tmpS = \"\";\\n\t\tboolean flag = false;\\n\t\tfor (int i = 0; i < SList.length; i++) {\\n\t\t\t// \u6587\u5b57\u3092\u672b\u5c3e\u3092\u9664\u5916\u3057\u3066\u9023\u7d50\\n\t\t\tfor (int j = 0; j < SList.length - 1; j++) {\\n\t\t\t\ttmpS += SList[j];\\n\t\t\t}\\n\t\t\t// \u672b\u5c3e\u3092\u5148\u982d\u306b\u79fb\u52d5\\n\t\t\ttmpS = SList[SList.length - 1] + tmpS;\\n\\n\t\t\tif (tmpS.equals(T)) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\tflag = true;\\n\t\t\t\tbreak;\\n\t\t\t} else {\\n\t\t\t\t// \u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u914d\u5217\u306b\u5165\u308c\u66ff\u3048\u305f\u30c7\u30fc\u30bf\u3092\u8a2d\u5b9a\\n\t\t\t\tSList = tmpS.split(\"\");\\n\t\t\t\ttmpS = \"\";\\n\t\t\t}\\n\t\t}\\n\t\tif (!flag) {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t\tinput.close();\\n\t}\\n}\\n", "target": "220", "substitutes": {"input": ["f", "focus", "class", "parse", "list", " Input", "OU", "instance", "out", "Input", "in", "context", "cli", "keep", "inner", "kernel", "active", "io", "l", "null", "IN", "exec", "upload", "server", "IO", "print", "inter", "Output", "c", "inf", "iterator", "reader", "array", "inc", "output", "buffer", "pull", "source", "this", "str", "iter", "system", "enter", "reading", "util", "sys", "stream", "PUT", "parser", "init", "method", "socket"], "S": ["SA", "DS", "I", "L", "Si", "SEC", "A", "SK", "Socket", "SO", "P", "NS", "SN", "SAM", "ST", "SI", "SL", "F", "V", "s", "R", "C", "TS", "SS", "U", "N", "SE", "M", "SU", "SR", "Single", "Sl", "PS", "SP", "SM", "ISS"], "T": ["TN", "G", "I", "L", "TG", "X", "P", "TT", "B", "t", "E", "D", "ST", "WT", "W", "F", "V", "R", "TS", "SS", "U", "M", "N", "Text", "Test", "NT", "O"], "SList": ["TL", "Slist", "TList", "slist", "Stringlist", " Slist", " SL", "sList", "Blist", "StringLIST", "BLIST", "StringL", "SL", "StringList", " SLIST", "BL", "Tlist", "SLIST", "BList", "sL"], "tmpS": ["tempT", "tmpString", " tmpT", "tempString", "tempI", " tmpI", "TempT", "TempI", "TempString", "TempS", "tmpI", "tempS", " tmpString", "tmpT"], "i": ["f", "li", "fi", "h", "I", "base", "di", "in", "ri", "ni", "ami", "id", "gi", "ai", "io", "ji", "si", "ui", "mu", "phi", "v", "it", "t", "c", "d", "uri", "zi", "ski", "u", "e", "pi", "j", "ii", "qi", "p", "ti", "b", "x", "abi", "ini", "start", "z", "ci", "iu", "xi", "multi", "bi"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n    \\n    public static void main(String[] args){\\n        Scanner scanner = new Scanner(System.in);\\n        double l = scanner.nextDouble();\\n        scanner.close();\\n        double per = l/3.0;\\n        double result = per*per*per;\\n        System.out.println(result);\\n    }\\n}", "target": "53", "substitutes": {"scanner": ["analyner", "scanker", "caner", "Scanter", "scanener", "Scanner", "Scaner", "Scanker", "annner", "Scanener", "canener", "caninner", "anninner", "analyker", "annter", "canter", "scanter", "Scaninner", "canker", "analyinner", "anner", "analyter", "annener", "scaninner", "scaner", "canner"], "l": ["f", "li", "ul", "L", "ol", "ler", "length", "lf", "n", "vl", "ll", "v", "lv", "c", "rl", "kl", "d", "dl", "ls", "ell", "lp", "p", "b", "ln", "nl", "sl", "dL", "fl", "lr", "la", "lc", "el", "r"], "per": ["f", "li", "php", "pro", "factor", "base", "compl", "ler", "length", "pl", "pr", "hel", "pc", "total", "pre", "v", "c", "page", "project", "cel", "pect", "PER", "reporting", "inc", "pull", "pi", "pa", "power", "user", "current", "lp", "p", "row", "direction", "performance", "pe", "len", "pp", "sl", "Per", "i", "pixel", "cur", "perm", "pair", "scale", "r"], "result": ["math", "value", "valid", "val", "ner", "compl", "data", "grade", "match", "expected", "err", "length", "number", "default", "report", "product", "score", "attr", "master", "success", "info", "lp", "Result", "row", "pass", "res", "true", "response", "knowledge", "results", "work", "angle", "function", "average", "feature", "alpha", "func"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String... args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int K = scanner.nextInt();\\n\\n        // K * K\u306e\u6700\u5927\u516c\u7d04\u6570\u3092\u51fa\u3057\u3066\u304a\u304f\u30de\u30c3\u30d7\\n        int[][] gmap = new int[K][K];\\n\\n        for (int i = 0; i < K; i++) {\\n            for (int j = 0; j < K; j++) {\\n                gmap[i][j] = gcd(i + 1, j + 1);\\n            }\\n        }\\n\\n        // GCD, \u500b\u6570\\n        int[] rightGcdMap = new int[K];\\n\\n        for (int i = 1; i <= K; i++) {\\n            for (int j = 1; j <= K; j++) {\\n                int gcd = gcd(i, j);\\n\\n                rightGcdMap[gcd - 1]++;\\n            }\\n        }\\n\\n        int[] leftGcdMap = new int[K];\\n        for (int i = 1; i <= K; i++) {\\n            for (int j = 1; j <= K; j++) {\\n                int gcd = gcd(i, j);\\n\\n                leftGcdMap[gcd - 1] += gcd(i, j) * rightGcdMap[j - 1];\\n            }\\n        }\\n\\n\\n        System.out.println(Arrays.stream(leftGcdMap).sum());\\n    }\\n\\n    private static int gcd(int m, int n) {\\n        if(m < n) return gcd(n, m);\\n        if(n == 0) return m;\\n        return gcd(n, m % n);\\n    }\\n}\\n", "target": "6", "substitutes": {"scanner": ["analyner", "scanker", "caner", "scanler", "scanener", "Scanner", "Scaner", "Scanker", "Scanener", "canener", "nerker", "caninner", "analyer", "Scaninner", "analyener", "analyler", "canker", "canler", "nerinner", "nerner", "scaninner", "scaner", "nerer", "Scanler", "canner"], "K": ["KB", "G", "Mask", "I", "L", "Z", "A", "X", " k", "P", "Q", "H", "B", "S", "D", "END", "J", "F", "V", "R", "NB", "C", "T", "N", "M", "k", " N", "O"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int input = scan.nextInt();\\n        int A, B, C, D;\\n        D = input % 10;\\n        input /= 10;\\n        C = input % 10;\\n        input /= 10;\\n        B = input % 10;\\n        input /= 10;\\n        A = input;//\\n\\n        if(A+B+C+D==7){\\n            System.out.println(A+\"+\"+B+\"+\"+C+\"+\"+D+\"=7\");\\n        }\\n        else if(A-B+C+D==7){\\n            System.out.println(A+\"-\"+B+\"+\"+C+\"+\"+D+\"=7\");\\n        }\\n        else if(A+B-C+D==7){\\n            System.out.println(A+\"+\"+B+\"-\"+C+\"+\"+D+\"=7\");\\n        }\\n        else if(A+B+C-D==7){\\n            System.out.println(A+\"+\"+B+\"+\"+C+\"-\"+D+\"=7\");\\n        }\\n        else if(A-B-C+D==7){\\n            System.out.println(A+\"-\"+B+\"-\"+C+\"+\"+D+\"=7\");\\n        }\\n        else if(A-B+C-D==7){\\n            System.out.println(A+\"-\"+B+\"+\"+C+\"-\"+D+\"=7\");\\n        }\\n        else if(A+B-C-D==7){\\n            System.out.println(A+\"+\"+B+\"-\"+C+\"-\"+D+\"=7\");\\n        }\\n        else if(A-B-C-D==7){\\n            System.out.println(A+\"-\"+B+\"-\"+C+\"-\"+D+\"=7\");\\n        }\\n    }\\n}\\n", "target": "152", "substitutes": {"scan": [" Scan", "gen", "parse", "stat", "ner", "car", "ann", "watch", " scanner", "out", "in", "pan", "chan", "search", "n", "l", "na", "gram", "con", "conf", "se", "cat", "bin", "can", "reader", "query", "read", "sub", "open", "all", "Scan", "ln", "san", "sync", "pass", "sc", "win", "sys", "vis", "parser", "an", "walk", "get", "nn", "run", "r", "span"], "input": ["focus", "plus", "but", "in", "image", "count", "inner", "select", "upload", "everything", "form", "inc", "pull", "img", "load", "depth", "back", "view", "init", " Input", "shift", "format", "session", "active", "height", "address", "request", "source", "inside", "current", "dc", "enter", "PUT", "alpha", "argument", "client", "element", "keep", "index", "product", "text", "RAW", "insert", "type", "save", "array", "add", "mode", "parent", "parse", "visible", "data", "raw", "Input", "context", "length", "integer", "sum", "bin", "forward", "output", "batch", "submit", "event", "amp", "error", "include", "magic", "table", "qa", "inf"], "A": ["AW", "G", "K", "I", "L", "DA", "AA", "AS", "X", "AD", "P", "S", "Y", "AB", "As", "IA", "E", "Ab", "AP", "W", "CA", "AC", "AF", "T", "An", "N", "Alpha", "Ar", "AM", "NA", "AR", "LA", "Am", "AH", "a", "AAA"], "B": ["Both", "G", "I", "Bi", "L", "BB", "BD", "DB", "CB", "BF", "AD", "P", "GB", "Q", "Y", "BG", "AB", "E", "BE", "Ab", "W", "BI", "J", "F", "Blue", "BA", "V", "R", "b", "T", "U", "WB", "N", "M", "Bs", "BC", "O"], "C": ["O", "CN", "G", "K", "I", "CM", "L", "Cl", "P", "S", "Y", "E", "c", "CF", "SC", "Col", "CI", "W", "F", "CL", "Cs", "CA", "R", "Ca", "AC", "T", "CR", "U", "N", "M", "Cu", "CS", "Can", "CC", "DC", "CE", "CU", "VC", "CD"], "D": ["O", "G", "K", "DS", "L", "Z", "DB", "X", "AD", "P", "DR", "Q", "Y", "DF", "DE", "E", "d", "DH", "DI", "W", "J", "MD", "F", "V", "Do", "R", "T", "U", "M", "N", "DD", "Ds", "DC", "DA", "CD"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t    Scanner scanner = new Scanner(System.in);\\n\\n\t    int N = Integer.parseInt(scanner.next());\\n\t    int[] B = new int[N];\\n\t    \\n\t    for (int i = 0; i < N - 1; i++) {\\n\t    \tB[i] = Integer.parseInt(scanner.next());\\n\t    }\\n\t    \\n\t    int sum = 0;\\n\t    \\n\t    for (int i = 0; i < N; i++) {\\n\t    \tif (i == 0) {\\n\t    \t\tsum += B[i];\\n\t    \t} else if (i == N-1) {\\n\t    \t\tsum += B[N-2];\\n\t    \t} else {\\n\t    \t\tsum += Math.min(B[i], B[i-1]);\\n\t    \t}\\n\t    }\\n\\n        System.out.print(sum);\\n\t}\\n}\\n", "target": "240", "substitutes": {"scanner": ["scanker", " Scanfer", "caner", "queryner", " Scaner", "Scanter", "Scanner", "Scaner", "Scanker", " scanker", " scaner", "queryter", " Scanker", "nerker", "caninner", "canter", "scanter", "Scaninner", "queryinner", "scanfer", " scanfer", "canker", "scanizer", "nerinner", " Scanner", "nerner", "scaninner", "queryizer", "scaner", "Scanfer", "nerer", "canizer", "canner", "Scanizer"], "N": ["NE", "G", "K", "Len", "I", "L", "Z", "Size", "A", "X", " n", "Ni", "Node", "P", "Q", "NS", "H", "n", "Y", "S", "Na", "E", "D", "II", "Network", "MN", "F", "V", "No", "NM", "R", "NB", "NN", "C", "T", "Num", "U", "M", "NA", "Ne", "NR", "Part", "Ns", "ND", "NT", "Number", "O"], "B": ["BI", "Buffer", "Both", "QB", "G", "I", "Bi", "L", "Z", "BB", "BD", "Bytes", "DB", "X", "Count", "EB", "BF", "P", "GB", "Beta", "H", "S", "Y", "BS", "Block", "UB", "E", "D", "PB", "SB", "BM", "LB", "F", "MB", "BA", "BL", "V", "Bar", "R", "b", "NB", "Builder", "Result", "T", "C", "WB", "M", "Big", "Base", "Part", "BR", "Bs", "Band", "Array", "Number", "O", "OB"], "i": ["f", "eni", "li", "fi", "I", "mini", "is", "di", "in", "anti", "ri", "ni", "ami", "gi", "id", "m", "index", "cli", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "adi", "c", "ie", "y", "uri", "u", "pi", "o", "e", "info", "j", "ii", "api", "qi", "hi", "ti", "b", "oi", "x", "abi", "ini", "start", "z", "ci", "mi", "ip", "iu", "xi", "init", "ix", "chi", "multi", "bi", "ki", "a"], "sum": ["parse", "comment", "sort", "cal", "miss", "summary", "plus", "out", "di", "mass", "help", "err", "cum", "count", "key", "cost", "unit", "si", "total", "ss", "ass", "gram", "min", "diff", "sign", "up", "success", "result", "style", "bin", "num", "um", "max", "weight", "add", "pack", "fat", "error", "pass", "fee", "hash", "mem", "sp", "size", "mean", "us", "sh", "average", "spread", "cur", "loss", "chi", "alpha", "scale", "vol", "Sum"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\t\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tInputReader in = new InputReader(System.in);\\n\\n\t\twhile (true) {\\n\t\t\tint a =in.readInt();\\n\t\t\tString op =in.read();\\n\t\t\tif (op.equals(\"?\")) break;\\n\t\t\tint b =in.readInt();\\n\t\t\t\\n\t\t\tint ans = 0;\\n\t\t\tswitch (op) {\\n\t\t\tcase \"+\":\\n\t\t\t\tans = a + b ;\\n\t\t\t\tbreak;\\n\t\t\tcase \"-\":\\n\t\t\t\tans = a - b ;\\n\t\t\t\tbreak;\t\t\\n\t\t\tcase \"*\":\\n\t\t\t\tans = a * b ;\\n\t\t\t\tbreak;\t\\n\t\t\tcase \"/\":\\n\t\t\t\tans = a / b ;\\n\t\t\t\tbreak;\t\\n\t\t\t}\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\t}\t\\n}\\n\\nclass InputReader{\\n\tprivate BufferedReader br;\\n\tprivate StringTokenizer buffer;\\n\t\\n\tpublic InputReader(InputStream in) {\\n\t\tbr = new BufferedReader(new InputStreamReader(in));\\n\t}\\n\t\\n\tpublic String read() throws IOException {\\n\t\twhile (buffer == null || !buffer.hasMoreTokens()) {\\n\t\t\tbuffer = new StringTokenizer(br.readLine());\\n\t\t}\\n\t\treturn buffer.nextToken();\\n\t}\\n\t\\n\tpublic int readInt() throws IOException {\\n\t\twhile (buffer == null || !buffer.hasMoreTokens()) {\\n\t\t\tbuffer = new StringTokenizer(br.readLine());\\n\t\t}\\n\t\treturn Integer.parseInt(buffer.nextToken());\\n\t}\\n\t\\n\tpublic double readDouble() throws IOException {\\n\t\twhile (buffer == null || !buffer.hasMoreTokens()) {\\n\t\t\tbuffer = new StringTokenizer(br.readLine());\\n\t\t}\\n\t\treturn Double.parseDouble(buffer.nextToken());\\n\t}\t\\n}\\n", "target": "139", "substitutes": {"in": ["f", "gen", "val", "path", "data", "is", "impl", "input", "out", "lin", "ssl", "log", "err", "din", "id", "socket", "inner", "image", "pin", "inas", "readable", "m", "n", "nin", "l", "IN", "inn", "min", "con", "it", "doc", "bin", "d", "er", "reader", "kin", "isin", "resource", "inc", "read", "source", "ex", "serv", "this", "str", "user", "inside", "url", "e", "s", "as", "ic", "rin", "file", "ini", "login", "win", "again", "line", "ins", "conn", "i", "connection", "init", "arin", "from", "In", "gin", "r"], "a": ["f", "sta", "base", "am", "ga", "A", "oa", "ma", "ad", "ab", "count", "aka", "ai", "n", "ea", "ac", "na", "ba", "da", "ca", "area", "aa", "c", "asa", "d", "aj", "va", "pa", "u", "o", "e", "auto", "fa", "sa", "as", "p", "ia", "za", "x", "access", "w", "au", "ata", "ana", "i", "an", "alpha", "la"], "op": ["ep", "obj", "exp", "string", "opp", "prop", "cmd", "expr", "oper", "cop", "opus", "proc", "id", "wx", "opt", "option", "ops", "pop", "ob", "app", "ipop", "apply", "it", "oct", "type", "cat", "ap", "OP", "operator", "word", "o", "info", "loc", "p", "pe", "enc", "pp", "oc", "sk", "hop", "rip", "operation", "sp", "po", "or", "ip", "Op", "comp"], "b": ["f", "bf", "pb", "h", "base", "bh", "sb", "ab", "ad", "n", "l", "ac", "B", "wb", "ba", "v", "bp", "c", "d", "y", "rb", "u", "e", "o", "j", "lb", "bb", "p", "x", "cb", "z", "bs", "i", "abb", "an", "eb", "fb", "r"], "ans": ["ams", "runs", "ases", "aves", "ANS", "anks", "base", "ats", "ann", "ands", "arts", "aned", "ad", "anon", "lines", "reads", "ai", "ays", "anas", "ani", "leans", "ons", "amps", "acts", "ops", "annels", "na", "AN", "ba", "aos", "aces", "anc", "ca", "cus", "ents", "ano", "ads", "asa", "errors", "lan", "ls", "nas", "aus", "af", "bb", "s", "fa", "as", "offs", "ns", "atan", "cas", "ants", "anus", "aks", "acs", "aps", "ins", "ks", "ras", "an", "powers", "outs", "atts", "ars", "span", "cases", "ds", "ana"], "br": ["bm", "bf", "tr", "div", "base", "ler", "ref", "bl", "err", "bro", "fr", "bc", "pr", "erer", "arr", "dr", "ver", "pre", "mr", "bar", "result", "buf", "bin", "er", "reader", "per", "kr", " fr", "rb", "gr", "hr", "str", "img", "ur", "bb", "rib", "iter", "p", "cr", "src", "cb", "bre", "ber", "obl", "sr", "or", "brush", "BR", "nor", "bridge", "lr", "browser", "Br", "adr", "bal", "ger", "fb", "r", "span"], "buffer": ["uffer", "http", "caster", "holder", "key", "wave", "inner", "shell", " buffers", "block", "message", "queue", "server", "book", "loader", "buf", "repeat", "rb", "FFER", "counter", "url", "handle", "bb", "broad", "stack", "player", "view", "header", "outer", "function", "uber", "button", "handler", "Buffer", "tr", "comment", "string", "buff", "timer", "bar", "per", "feed", "request", "resource", "source", "cache", "enter", "copy", "cur", "bridge", "processor", "console", "binary", "fore", "ker", "text", "null", "print", "reader", "callback", "builder", "iter", "row", "file", "surface", "line", "writer", "roller", "pb", "ner", "raw", "token", "container", "length", "fr", "document", "window", "port", "layer", "bin", "er", "batch", "str", "flush", "cb", "ber", "table", "pad", "fb", "reference"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tprivate static Scanner scan;\\n\tpublic static void main(String[] args) {\\n\t\tscan = new Scanner(System.in);\\n\t\tString str = scan.next();\\n\t\tint l = str.length();\\n\t\tString rts =\"\";\\n\t\tfor(int i = l -1;i >= 0 ;i--){\\n\t\t\trts = rts + str.charAt(i);\\n\t\t}\\n\t\tSystem.out.println(rts);\\n\t\tSystem.exit(0);\\n\t}\\n}", "target": "237", "substitutes": {"scan": ["store", "stat", "parse", "ner", "skip", "base", "ann", "ga", "watch", "in", "log", "err", "search", "inner", "n", "si", "na", "server", "gram", "print", "app", "con", "conf", "se", "bug", "cat", "er", "can", "reader", "query", "feed", "sn", "read", "connect", "system", "Scan", "pass", "sync", "or", "sc", "win", "util", "vis", "parser", "test", "an", "walk", "look", "check", "nn", "run", "clean", "sign", "r"], "str": ["f", "obj", "parse", "tr", "ner", "br", "div", "name", "string", "data", "input", "stri", "st", "out", "in", "err", "search", "fr", "pr", "arr", "dr", "text", "c", "doc", "spec", "txt", "next", "url", "iter", "s", "STR", "strip", "cr", "sr", "char", "sl", "rr", "sp", "line", "cur", "coll", "Str", "r"], "l": ["f", "li", "list", "h", "ul", "L", "ol", "length", "m", "n", "v", "ll", "lv", "t", "c", "kl", "dl", "ls", "il", "u", "e", "o", "j", "ell", "s", "lp", "p", "b", "ln", "nl", "len", "sl", "z", "k", "fl", "lc", "el"], "rts": ["rtuts", "yrrs", " ruts", "arts", "prtr", "rtts", "Rtes", "arTS", "rttes", "rrtr", "yrTS", "arcs", "prts", " rrs", "RTS", " rTS", "rtes", "rrrs", "prcs", "yrts", "Ruts", " rtes", "artr", "rtTS", "Rts", " rtr", "rTS", "prTS", "yrcs", "rcs", " rcs", "rtr", "rrTS", "ruts", "rrts", "rrcs", "rrs"], "i": ["f", "eni", "fi", "li", "I", "di", "cli", "ni", "ri", "id", "gi", "index", "ai", "ji", "si", "ui", "mu", "phi", "v", "it", "t", "d", "zi", "uri", "u", "pi", "o", "j", "e", "api", "ii", "qi", "hi", "p", "ti", "x", "oi", "slice", "abi", "ini", "temp", "z", "ci", "vis", "xi", "iu", "ix", "multi", "bi", "lc", "r"]}}
{"code": "import java.util.ArrayDeque;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Queue;\\nimport java.util.Scanner;\\n \\n\\n\\npublic class Main {\\n\tprivate static Scanner sc = new Scanner(System.in);\\n\t//result = Math.pow(num1, num3)\\n\t//StringBuffer str = new StringBuffer(hoge1);\\n\t//String hoge2 = str.reverse().toString();\\n\t//map.containsKey(A)\\n\\n\t//Map<String, Integer> map = new HashMap<String, Integer>(n);\\n\t/*for ( \u30ad\u30fc\u306e\u30c7\u30fc\u30bf\u578b key : \u30de\u30c3\u30d7\u306e\u540d\u524d.keySet() ) {\\n\t\t\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u578b data = \u30de\u30c3\u30d7\u306e\u540d\u524d.get( key );\\n\t\t\\n\t\t// key\u3084data\u3092\u4f7f\u3063\u305f\u51e6\u7406;\\n\t}*/\\n\t//int i = Integer.parseInt(s);\\n\t//Queue<String> qq=new ArrayDeque<>(); //add,poll,peek\\n\t//Deque<String> qq=new ArrayDeque<>();//push,pop,peek\\n\t//ArrayList<String> cc = new ArrayList<>(n);\\n\t//Collections.sort(list);\\n\t//Array.sort(list);   cc.contains(tmp)\\n\t//Arrays.asList(c).contains(\"a\")\\n\t//list.set(1,\"walk\");//1 1 2 3 5\\n\t//static long mod =1000000007;\\n\t//static \tArrayList<Integer> cc = new ArrayList<>(100);\\n\t\\n\t\\n\t\\n\t\\n\t//for(int i=0;i<N;i++) {}\\n\tpublic static void main(String[] args) {\\n\t\t//int N=sc.nextInt();for(int i=0;i<N;i++) {}\\n\t\tString S=sc.next();\\n\t\t\\n\t\tint a=0;\\n\t\tboolean x=true;\\n\t\tfor(int i=0;i<4;i++) {\\n\t\t\tint t=S.charAt(i);\\n\t\t\tif(a==t)x=false;\\n\t\t\ta=t;\\n\t\t}\\n\t\tif(x)p(\"Good\");\\n\t\telse p(\"Bad\");\\n\t\t\\n\t}\\n\t\\n\\n\t\\n\t\\n\t\\n\t\\n\\n\t\\n\\n\\n\t\\n\tstatic void p(String ans) {System.out.println(ans);};\\n\tstatic void p(int ans) {System.out.println(ans);};\\n\tstatic void p() {System.out.println();};\\n\tstatic void p(long ans) {System.out.println(ans);};\\n\tstatic void p(double ans) {System.out.println(ans);};\\n\tstatic String nextPermutation(String s) {\\n\t\tArrayList<Character> list=new ArrayList<>();\\n\t\tfor(int i=0;i<s.length();i++) {\\n\t\t\tlist.add(s.charAt(i));\\n\t\t}\\n\t\tint pivotPos=-1;\\n\t\tchar pivot=0;\\n\t\tfor(int i=list.size()-2;i>=0;i--) {\\n\t\t\tif(list.get(i)<list.get(i+1)) {\\n\t\t\t\tpivotPos=i;\\n\t\t\t\tpivot=list.get(i);\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif(pivotPos==-1&&pivot==0) {\\n\t\t\treturn \"Final\";\\n\t\t}\\n\t\tint L=pivotPos+1,R=list.size()-1;\\n\t\t\\n\t\t\\n\t\t\\n\t\tint minPos=-1;\\n\t\tchar min =Character.MAX_VALUE;\\n\t\t\\n\t\tfor(int i=R;i>=L;i--) {\\n\t\t\tif(pivot<list.get(i)) {\\n\t\t\t\tif(list.get(i)<min) {\\n\t\t\t\t\tmin=list.get(i);\\n\t\t\t\t\tminPos=i;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tCollections.swap(list, pivotPos, minPos);\\n\t\tCollections.sort(list.subList(L, R+1));\\n\t\t\\n\t\t\\n\t\tStringBuilder sb=new StringBuilder();\\n\t\tfor(int i=0;i<list.size();i++) {\\n\t\t\tsb.append(list.get(i));\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n}\\n\t\\n", "target": "73", "substitutes": {"sc": [" i", " scorer", " Sc", "ann", "sb", " s", " sn", " it", " c", " sl", "ss", " cr", " ans", " subp", "SC", " rc", "scan", "SB", "Sc", "s", "sa", " r", " SC", " f", " sp", " ser", " br", " scr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan=new Scanner(System.in);\\n\t\tint n=scan.nextInt();\\n\t\tint a[][][] = new int[4][3][10];\\n\t\tint i;\\n\t\tfor(i=0;i<n;i++) {\\n\t\t\tint b=scan.nextInt();\\n\t\t\tint f=scan.nextInt();\\n\t\t\tint r=scan.nextInt();\\n\t\t\tint v=scan.nextInt();\\n\t\t\ta[b-1][f-1][r-1] +=v;\\n\t\t}\\n\t\tfor(int b=0;b<4;b++) {\\n\t\t\tfor(int f=0;f<3;f++) {\\n\t\t\t\tfor(int r=0;r<10;r++) {\\n\t\t\t\t\tSystem.out.print(\" \"+ a[b][f][r]);\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println();\\n\t\t\t}\\n\t\t\tif(b<3)\\n\t\t\t\tSystem.out.println(\"####################\");\\n\t\t\t}\\n\t\tscan.close();\\n}\\n}\\n", "target": "211", "substitutes": {"scan": ["gen", "parse", "http", "ner", "skip", "car", "ann", "begin", "watch", "out", "chan", "in", "pan", "fan", "match", "err", "search", "ignore", "l", "ver", "server", "print", "inter", "con", "se", "cat", "bug", "er", "can", "plan", "kin", "query", "use", "reader", "read", "serv", "batch", "connect", "iter", "all", "Scan", "ln", "san", "sync", "slice", "row", "sin", "sc", "ans", "wan", "util", "sys", "filter", "conn", "parser", "an", "walk", "look", "get", "check", "nn", "ser", "run", "clean", "sign", "span"], "n": ["nc", "net", "nt", "m", "number", "l", "t", "c", "d", "y", "u", "e", "o", "j", "s", "p", "x", "ns", "nb", "en", "w", "N", "z", "nr", "k", "nn"], "a": ["sha", "sta", "ama", "ga", "A", "ab", "ma", "ao", "ea", "l", "ac", "na", "ba", "da", "ca", "area", "c", "aa", "d", "array", "va", "u", "pa", "e", "aux", "aaa", "auto", "fa", "as", "sa", "p", "ia", "ata", "wa", "mA", "ana", "tta", "alpha", "la"], "i": ["li", "fi", "I", "mini", "is", "di", "in", "ni", "id", "gi", "m", "index", "ai", "io", "si", "l", "ui", "t", "c", "ie", "d", "y", "u", "e", "o", "j", "pi", "ii", "qi", "p", "x", "ini", "ci", "k", "ip", "iu", "init", "xi", "multi", "bi"], "b": ["bf", "h", "br", "base", "sb", "bh", "ab", "db", "bl", "count", "m", "bc", "l", "B", "wb", "ob", "ba", "fb", "t", "emb", "c", "bar", "d", "fe", "y", "num", "mb", "rb", "u", "e", "o", "lb", "j", "batch", "bb", "s", "p", "x", "boot", "nb", "cb", "w", "ib", "bs", "k", "body", "bi", "eb"], "f": ["fi", "h", "fd", "family", "ef", "in", "ref", "fs", "m", "fr", "xf", "l", "g", "df", "t", "of", "c", "d", "fe", "y", "ff", "u", "e", "o", "j", "af", "F", "field", "s", "fa", "p", "fp", "x", "sf", "w", "file", "z", "rf", "k", "fl", "fb", "el"], "r": ["tr", "h", "br", "ner", "rt", "range", "err", "m", "fr", "pr", "l", "g", "t", "rev", "c", "end", "d", "er", "y", "ar", "rb", "u", "e", "o", "j", "ur", "p", "R", "x", "rh", "ru", "yr", "cr", "w", "q", "sr", "or", "rr", "z", "nr", "rf", "k", "rs", "lr", "ir"], "v": ["h", "vi", "iv", "vv", "sv", "vd", "m", "vs", "l", "g", "lv", "t", "c", "d", "y", "uv", "u", "e", "o", "j", "ii", "V", "s", "p", "x", "w", "or", "z", "k", "q"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.math.BigDecimal;\\n\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n        //Input ??\u00b4??\u00b0?????\\?????????\\n        BufferedReader br =\\n                new BufferedReader(new InputStreamReader(System.in));\\n        String str = br.readLine();\\n        int n = Integer.parseInt(str);\\n        //??????\\n        double loan = 100000;\\n\\n        //??\\???????????\u00b4??\u00b0?????????????????????????\u00b1???????\\n        //1??\u00b1?????\u00a8???????????????????????????????????????????????\\??????\\n        for(int i=1; i<=n; i++){\\n           //?????????5%?????????????????????\\n           loan = loan * 1.05;\\n           //?????????1000???????????????????????????\\n           BigDecimal bd = new BigDecimal(String.valueOf(loan));\\n           //?\u00ac\u00ac1?????\u00b0???0?????\u00b4???????\u00b0???\u00b0?\u00ac\u00ac?????????????????????(??????)\\n           //1000??????????????????????????????????\u00ac\u00ac1?????\u00b0???-3??\u00a8????????????????????????????????????\\n           loan = bd.setScale(-3, BigDecimal.ROUND_UP).doubleValue();\\n        }\\n        //??\u00a8???????????????????\u00b0???\u00b0??????????????\u00a2??\u00a7????????????????????????????????????int??????result???????\u00b4???????\\n        int result = (int) loan;\\n        System.out.println(result);\\n    }\\n}", "target": "173", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        FastScanner sc = new FastScanner();\\n        PrintWriter out = new PrintWriter(System.out);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        StringBuffer sb = new StringBuffer();\\n        if (a < b) {\\n            String add = String.valueOf(a);\\n            for (int i = 0; i < b; i++) {\\n                sb.append(add);\\n            }\\n        }\\n        else {\\n            String add = String.valueOf(b);\\n            for (int i = 0; i < a; i++) {\\n                sb.append(add);\\n            }\\n        }\\n\\n        out.printf(\"%s\\n\", sb.toString());\\n        out.flush();\\n    }\\n}\\n\\nclass FastScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n\\n    private boolean hasNextByte() {\\n        if (ptr < buflen) {\\n            return true;\\n        } else {\\n            ptr = 0;\\n            try {\\n                buflen = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (buflen <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private int readByte() {\\n        if (hasNextByte()) {\\n            return buffer[ptr++];\\n        }\\n        else {\\n            return -1;\\n        }\\n    }\\n\\n    private static boolean isPrintableChar(int c) {\\n        return 33 <= c && c <= 126;\\n    }\\n\\n    private void skipUnprintable() {\\n        while (hasNextByte() && !isPrintableChar(buffer[ptr])) {\\n            ptr++;\\n        }\\n    }\\n\\n    public boolean hasNext() {\\n        skipUnprintable();\\n        return hasNextByte();\\n    }\\n\\n    public String next() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while (isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n\\n    public int nextInt() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        int n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while (true) {\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            } else if (b == -1 || !isPrintableChar(b)) {\\n                return minus ? -n : n;\\n            } else {\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n\\n    public long nextLong() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        long n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while (true) {\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            } else if (b == -1 || !isPrintableChar(b)) {\\n                return minus ? -n : n;\\n            } else {\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n}", "target": "24", "substitutes": {"sc": ["class", "ner", "osc", "ch", "mc", " Sc", "nc", "sv", "cv", "esc", "bc", "config", "cc", "asc", "pc", "ss", "server", "anc", "scope", "ca", "SC", "scan", "cs", "cus", "cl", "uc", "sw", "acc", "Sc", "system", "s", "sq", "sci", "cr", "src", "rc", "cer", "sr", "scl", "soc", "ci", "sp", " SC", "sch", "sh", "tc", "sem", "lc"], "out": ["obj", "list", "client", "ch", "arg", "name", "comment", "path", "string", "input", "console", "log", "err", "group", "io", "report", "window", "exec", "IN", "self", "print", "up", "app", "conf", "bar", "page", "write", "bin", "OUT", "inc", "output", "source", "ex", "o", "str", "cache", "user", "auto", "s", "flush", "error", "Out", "w", "file", "println", "again", "sys", "sp", "copy", "line", "conn", "writer", "engine", "outer", "outs", "screen", "fn", "parent"], "a": ["f", "h", "ama", "am", "ga", "A", "ab", "ad", "oa", "count", "m", "ai", "l", "ac", "ea", "ba", "da", "ca", "aa", "asa", "d", "y", "aj", "va", "u", "e", "pa", "af", "aaa", "fa", "sa", "as", "p", "x", "ia", "au", "k", "wa", "an", "ae", "alpha", "la"], "b": ["f", "bf", "h", "base", "buff", "abs", "ab", "db", "bl", "bas", "binary", "m", "bc", "object", "orb", "l", "B", "wb", "ob", "ba", "v", "fb", "ca", "bp", "aa", "bar", "bound", "bin", "d", "y", "mb", "xb", "rb", "u", "e", "o", "j", "lb", "bb", "s", "p", "x", "boot", "nb", "cb", "w", "ib", "bot", "bs", "k", "bd", "abb", "function", "be", "body", "bi", "eb", "r"], "sb": ["usb", "gb", "bm", "bf", "pb", " SB", "buff", "BB", "bh", "ssl", "db", "ub", "sv", "bt", "obb", "bc", "sg", "orb", "wb", "zb", "ob", "bp", "bj", "mb", "rb", "xb", "stab", "SB", "lb", "bb", "s", "lp", "sa", "nb", "cb", "sf", "kb", "src", "ib", "bps", "bd", "bs", "abb", "bsp", "Bs", "sm", "eb", "lab", "fb", "bg", "sth"], "add": ["class", "parse", "list", "div", "exp", "name", "join", "added", "plus", "act", "ad", "id", "edit", "text", "Add", "build", "address", "apply", "app", "diff", "end", "push", "att", "feed", "ext", "pos", "next", "read", "inc", "mod", "en", "extra", "set", "append", "ADD", "init", "pad", "create", "ix", "ack", "remove", "ify"], "i": ["f", "li", "fi", "I", "vi", "is", "di", "ri", "ni", "gi", "id", "m", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "g", "it", "ie", "y", "uli", "uri", "zi", "u", "e", "pi", "j", "ii", "qi", "ti", "hi", "oi", "x", "p", "ini", "z", "ci", "mi", "iu", "xi", "ip", "ix", "multi", "bi"], "in": ["f", "h", "path", "data", "is", "input", "lin", "ssl", "err", "din", "pin", "m", "inner", "socket", "io", "readable", "l", "ac", "IN", "inn", "min", "con", "bin", "d", "reader", "isin", "xml", "resource", "inc", "read", "source", "ex", "this", "p", "as", "pass", "reading", "file", "ic", "ini", "rin", "login", "or", "win", "ins", "connection", "inet", "In", "r"], "buffer": ["Buffer", "map", "uffer", "comment", "base", "data", "input", "padding", "buff", "length", "limit", "binary", "seed", "number", "image", "document", "texture", "window", "device", "block", "message", "queue", "address", "server", "result", "buf", "page", "bin", "layer", "reader", "request", "array", "resource", "read", "output", "batch", "source", "use", "cache", "url", "transfer", "position", "bb", "iter", "uf", "flush", "offset", "slice", "surface", "table", "append", "header", "pad", "available", "memory", "reference"], "ptr": ["lf", "count", "code", "dr", "pend", "patch", "t", "attr", "ctx", "buf", "ext", "ft", "wr", "pull", "handle", "depth", "tips", "offset", " pointer", "size", "cap", "cp", "tc", "const", "tr", "br", "shift", "buff", "ctr", "nt", "address", "ff", "uint", "fp", "cur", "trace", "cmp", "rt", "pl", "ref", "index", "pr", "td", "tp", "inter", "push", "xt", "pos", "dest", "p", "prot", "tmp", "slice", "nr", "lr", "sth", "fd", "celer", "inst", "etr", "padding", "context", "length", "dep", "fr", "pointers", "port", "ect", "pointer", "fe", "Ptr", "pt", "np", "loc", "src", "tip", "len", "addr", "pad", "adr"], "buflen": ["buplend", "bullain", "fuslener", "bucolatten", "kuFlen", " Buflenc", "bufilen", "bufilain", " Buflen", "fuslen", "buplength", "bufens", "fuslend", "bufren", "buselenc", "buplen", " Bufilain", "croflen", "bucelen", "fuflend", " Buflain", "bufiln", "bupln", "kuflength", "bucellen", "bufen", "crofrEN", "bufrlen", "buflend", "kuFlend", " Bufilen", "buflatten", "croflEN", "buflength", "bulln", "buflEN", "fufln", "crofllen", "bucelEN", "crofren", "busln", "buslend", "bucolen", "buseln", "kuflen", "kuFlens", "bullener", "bullen", "bufend", " Bufln", "fuflener", "buflain", "bullenc", "kuflend", "fuflen", "buflens", "bucelatten", "buselen", " Bufiln", "buselain", "crofrlen", "bufilenc", "buslen", "croflatten", "crofratten", "buplener", "fusln", "bullend", "buplens", "bufllen", "bufln", "bufrEN", "buflener", "bucollen", "buFlens", "bufratten", "buFlength", "buflenc", "bucolEN", "buFlen", "buslener", " Bufilenc", "kuflens", "kuFlength", "buFlend", "bufength"], "c": ["f", "xc", "h", "ch", "fc", "nc", "count", "code", "m", "cc", "cy", "pc", "l", "ac", "sec", "g", "v", "t", "cs", "uc", "d", "y", "ce", "abc", "cm", "u", "e", "dc", "p", "x", "C", "cr", "rc", "enc", "char", "cu", "col", "z", "ci", "k", "ct", "ec", "lc"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner stdIn = new Scanner(System.in);\\n\t\tint N = stdIn.nextInt();\\n\t\tint[] H = new int[N];\\n\t\tArrayList <Integer> point = new ArrayList<Integer>();\\n\t\t\\n\t\tH[0] = stdIn.nextInt();\\n\t\tfor(int i = 1; i < N; i++) {\\n\t\t\tH[i] = stdIn.nextInt();\\n\t\t\tif(H[i-1] < H[i]) {\\n\t\t\t\tpoint.add(i-1);\\n\t\t\t}\\n\t\t}\\n\t\tpoint.add(N-1);\\n\t\t\\n\t\tint max = 0;\\n\t\tif(point.get(0) > max) {\\n\t\t\tmax = point.get(0);\\n\t\t}\\n\t\tfor(int i = 0; i < point.size()-1; i++) {\\n\t\t\tif(point.get(i+1)-point.get(i)-1 > max) {\\n\t\t\t\tmax = point.get(i+1)-point.get(i)-1;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(max);\\n\\n\t}\\n\\n}", "target": "187", "substitutes": {"stdIn": ["gradIn", "stdin", " stdin", "STDIns", "gradIns", " stdIns", "stdIng", "adin", "gradOut", " stdOut", "STDIN", "ndIns", "dOut", "stIn", "stIN", "stdIns", "stdIN", "gradin", " stdIng", "ndIng", "stIns", "STDIn", "stIng", "stdOut", "ndIN", "adIn", "ndIn", "gradIng", " stdIN", "adIN", "dIN", "gradIN", "STDOut", "adOut", "dIns", "dIn"], "N": ["NE", "G", "K", "Len", "I", "L", "Z", "Size", "X", " n", "P", "Q", "NS", "n", "S", "Y", "B", "E", "D", "MN", "W", "J", "F", "V", "No", "R", "T", "C", "U", "Num", "M", "Max", "NA", "Ne", "NR", "Ns", "NT", "Number", "O"], "H": ["G", "h", "K", "I", "L", "GH", "X", "P", "HT", "Q", "HD", "HK", "HA", "CH", "S", "Y", "SH", "Block", "RH", "E", "D", "DH", "OH", "NH", "Head", "W", "Host", "F", "Ch", "V", "HH", "HI", "R", "EH", "rh", "MH", "T", "C", "U", "M", "HP", "HTTP", "He", "HS", "AH", "O", "HC"], "point": ["holder", "key", "number", "block", "cart", "patch", "position", "to", "down", "back", "match", "P", "move", "unit", "month", "remote", "self", "style", "press", "hole", "source", "Point", "strip", "and", "set", "part", "node", "day", "distance", "cross", "points", "range", "element", "id", "post", "index", "product", "step", "last", "end", "type", "page", "chain", "pos", "next", "frame", "target", "section", "p", "sync", "slice", "state", "po", "line", "pair", "mark", "parent", "list", "path", "base", "data", "pattern", "group", "length", "object", "change", "PO", "complete", "pointer", "event", "word", "pt", "error", "table", "period", "gap", "ID"], "i": ["f", "li", "h", "I", "mini", "data", "di", "in", "ri", "ni", "id", "gi", "m", "index", "inner", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "v", "it", "t", "ie", "y", "uri", "pi", "u", "o", "e", "j", "info", "ii", "api", "qi", "p", "ti", "b", "oi", "x", "hi", "slice", "abi", "ini", "ci", "part", "mi", "iu", "ip", "xi", "init", "ix", "multi", "chi", "bi", "my", "a"], "max": ["value", "no", "key", "count", "number", "default", "total", "conf", "ax", "power", "depth", "head", "size", "init", "scale", "none", "limit", "height", "self", "min", "cat", "press", "cache", "current", "mod", "and", "res", "MAX", "with", "part", "work", "cur", "node", "alpha", "force", "range", "out", "id", "index", "step", "last", "end", "first", "chain", "num", "ng", "next", "always", "show", "p", "top", "Max", "line", "k", "std", "parent", "parse", "shape", "wrap", "orig", "base", "length", "n", "rest", "best", "info", "auto", "x", "error", "start", "right", "prev", "rank"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int X = sc.nextInt();\\n        int T = sc.nextInt();\\n\\n        int ans = 0;\\n        int times = 0 ;\\n        times = (int) Math.ceil((double) N / X);\\n\\n        ans = times * T;\\n\\n        System.out.println(ans);\\n\\n    }\\n}", "target": "34", "substitutes": {"sc": ["parse", "ner", "osc", "ch", "cont", "mc", " Sc", "nc", "sche", "sb", "search", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "na", "scope", "ca", "SC", "se", "c", "scan", "uc", "cs", "sw", "cus", "acc", "Sc", "sq", "sci", "cr", "ocr", "sync", "rc", "cer", "sr", "soc", "ci", "sp", " SC", "sh", "ec", "tc", "cur", "coll", "ser", "lc"], "N": ["NE", "CNN", "K", "I", "L", "Z", "Size", "P", "Q", "NS", "SN", "H", "GN", "n", "NC", "S", "Y", "E", "D", "NL", "MN", "F", "CL", "V", "NG", "NB", "R", "NN", "C", "Num", "M", "NA", "Ne", "Ns", "NT", "O"], "X": ["DX", "G", "K", "Length", "I", "L", "Z", "XL", "Size", "TX", "A", "P", "Q", "H", "S", "Y", "E", "D", "W", "J", "F", "Time", "V", "XP", "IX", "x", "C", "TS", "U", "IP", "M", "XX", "TH", "O"], "T": ["G", "TE", "I", "L", "Z", "TX", "A", "P", "Q", "TT", "H", "S", "Y", "UT", "t", "E", "D", "TPS", "Times", "W", "J", "F", "Time", "V", "R", "C", "TS", "U", "M", "NT", "TH", "O"], "ans": ["ts", "cross", "las", "ANS", "cons", " scans", "faces", "ats", "ann", "arts", "reads", "places", "ays", "n", "groups", "AN", "S", "na", "types", "aces", "ches", "ones", "cs", "ents", "rows", "errors", "lan", "plan", "ls", "Times", "ions", "ens", "imes", "asts", "s", "offs", "x", "ns", "TS", "cas", "ps", "les", "eps", "os", "ins", "ks", "ras", "an", "powers", "ars", "cases", "acts"], "times": ["time", "runs", "ts", "shape", "events", "faces", "works", "arts", "places", "ays", "its", "steps", "things", "types", "aces", "ches", "ones", "cs", "rows", "tx", "ms", "Times", "forces", "ions", "ries", "imes", "xs", "asts", "s", "offs", "blocks", "x", "shows", "TS", "cas", "tests", "ins", " Times", "ends", "rs", "outs", "cases", "acts"]}}
{"code": "import java.io.*;\\nimport java.math.*;\\nimport java.security.*;\\nimport java.text.*;\\nimport java.util.*;\\nimport java.util.concurrent.*;\\nimport java.util.regex.*;\\n\\n\\n    \\n    public class Main{\\n        public static int function(int[] Arr,int K)\\n        {\\n            int N=Arr.length;\\n            int count=0;\\n            for(int i=0;i<N;i++)\\n            {\\n                if(Arr[i]>=K)\\n                    count++;\\n            }\\n            return count;\\n        }\\n        \\n\\n   public static void main (String[] args)  throws IOException{\\n\\n      Scanner sc=new Scanner(System.in);\\n      int N=0;\\n      int K=0;\\n      if(sc.hasNextInt())\\n      {\\n          N=sc.nextInt();\\n          K=sc.nextInt();\\n      }\\n      \\n          int[] Arr=new int[N];\\n          for(int i=0;i<N;i++)\\n          {\\n              Arr[i]=sc.nextInt();\\n          }\\n          \\n      \\n      System.out.println(function(Arr,K));\\n     \\n      \\n   \\n   }\\n   \\n}\\n", "target": "145", "substitutes": {"Arr": ["AnR", "Enner", "Urrc", " Arpr", "Err", " arrc", "Urr", "EnR", " arr", "Derrc", " Arre", " Ardr", "Ardr", "Urrs", "Parrs", " Arn", " Arner", "Arrr", "Parrc", "Arn", "Parrr", "Attrc", "Barpr", "Dardr", "Darrs", "Arpr", "Attn", "BarR", "Errc", "Arre", "Anrr", "Andr", "Anre", "Derr", " ardr", " Arp", "Barner", "Arrc", "Anr", "Urdr", "Attr", " arR", "Darrc", " arn", " Arrs", "ArR", "Anrc", " arrr", "Erp", " Arrr", "Anp", "Arner", "AttR", "Enr", "Arp", "Darr", "Parr", "Barr", " Arrc", "Enpr", " ArR", "Arrs", "Derrr", "Derrs", "Erre"], "K": ["O", "KB", "Mask", "G", "KC", "I", "L", "Z", "PK", "SK", "CP", "X", "Count", "KR", " k", "P", " NK", "key", "Q", "HK", "H", "KS", "n", "NK", "CH", "S", "Y", "B", "E", "D", "W", "J", "F", "V", "R", "KK", "KI", "T", "C", "U", "M", "Max", "Key", "k", "KE", "TH", "Sk", "VK", "KN"], "N": ["NE", "Len", "I", "L", "Z", "Size", "NI", "X", " n", "Ni", "Count", "Node", "P", "Q", "NS", "H", "GN", "n", "NC", "S", "Y", "Limit", "IN", "Na", "D", "NL", "NO", "MN", "W", "F", "CL", "V", "No", "NG", "NM", "R", "NB", "NN", "T", "C", "U", "Num", "M", "NA", "Ne", "NR", "Ns", "ND", "NT", "O", "KN"], "count": ["cond", "list", "val", "level", "allow", "base", "call", "in", "nt", "Count", "length", "id", "code", "index", "key", "limit", "keep", "number", "n", "process", "sum", "c", "max", "array", "weight", "counter", "cache", "load", "depth", "current", "offset", "ind", "child", "start", "len", "size", "k", "every", "work", "test", "found", "coll", "check"], "i": ["f", "eni", "li", "h", "fi", "I", "mini", "data", "di", "ri", "ni", "gi", "id", "m", "index", "inner", "ai", "io", "ji", "n", "si", "l", "block", "ui", "mu", "phi", "v", "it", "end", "ie", "d", "y", "uri", "pi", "e", "o", "j", "u", "info", "ii", "qi", "p", "hi", "b", "x", "oi", "abi", "ini", "z", "ci", "part", "k", "mi", "ip", "init", "xi", "iu", "ix", "chi", "multi", "bi", "a", "my", "q"], "sc": ["osc", "ch", "ner", "cont", " Sc", "co", "nc", "sche", "cle", "core", "cv", "search", "esc", "bc", "cc", "asc", "pc", "si", "ss", "server", "scope", "ca", "SC", "c", "scan", "cs", "sw", "cl", "se", "uc", "cus", "spec", "Sc", "loc", "s", "sq", "sub", "sci", "cr", "src", "sync", "rc", "cer", "sr", "enc", "soc", "scl", " SC", "sch", "sh", "ec", "tc", "cur", "coll", "lc", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int x = sc.nextInt();\\n\\n        if (x == 0) {\\n            System.out.println(1);\\n        }else{\\n            System.out.println(0);\\n        }\\n        sc.close();\\n    }\\n}\\n", "target": "148", "substitutes": {"sc": ["osc", "ch", "nc", "sb", "cv", "search", "cc", "bc", "esc", "pc", "ss", "na", "server", "scope", "ca", "SC", "c", "scan", "cs", "se", "cl", "sw", "uc", "ctx", "Sc", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "sp", "ci", "ct", "sch", "sh", "ec", "tc", "cur", "parser", "lc"], "x": ["f", "val", "h", "xx", "X", "id", "code", "index", "m", "number", "n", "l", "v", "t", "c", "tx", "cl", "num", "d", "y", "pos", "max", "fx", "ex", "u", "e", "j", "p", "b", "w", "rx", "z", "k", "i", "xi", "foo", "ix", "xp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.nextLine();\\n        System.out.println(problem160a(s));\\n    }\\n\\n    private static String problem160a(String s) {\\n        return (equal(s, 2, 3) && equal(s, 4, 5)) ? \"Yes\" : \"No\";\\n    }\\n\\n    private static boolean equal(String s, int at1, int at2) {\\n        return s.charAt(at1) == s.charAt(at2);\\n    }\\n}", "target": "30", "substitutes": {"sc": ["class", "osc", " Sc", "nc", "cc", "bc", "esc", "asc", "pc", "text", "ss", "sec", "scope", "anc", "SC", "se", "c", "scan", "cs", "cl", "uc", "spec", "acc", "str", "Sc", "sci", "cr", "src", "sf", "sel", "rc", "sync", "enc", "sl", "sp", "ci", " SC", "sh", "ec", "desc", "lc", " scr"], "s": ["f", "is", "ains", "lines", "m", "l", "ss", "server", "maps", "t", "c", "spec", "ns", "sl", "styles", "ments", "scripts", "fs", "ds", "a", "sym", "h", "string", "sb", "ands", "gs", "uments", "types", " strings", "ads", "u", "sq", "sf", "sys", "os", "ings", "ses", "states", "ts", "hs", "ils", "input", "ssl", "south", "ops", "g", "ows", "cs", "sites", "y", "su", "es", "e", "o", "asts", "p", "b", "sets", "ans", "i", "strings", "rs", "ips", "abs", "sv", "n", "si", "S", "v", "d", "ls", "ions", "str", "qs", "services", "xs", "w", "ps", "tests", "ws", "r"], "at1": ["at7", "int01", "int2", "it1", "atOne", "int1", "at01", "intOne", "it01", "At1", "int7", "At2", "int3", "it7", "AtOne", "at3", " at7", "At3", " at01"], "at2": ["int2", "pb", "AT0", "int4", "AT2", "atomb", "it4", "p2", "p4", "int0", "it5", "at4", "at5", "AtTwo", "atom4", "atTwo", "itb", "At0", "atb", "intTwo", "At2", "p5", "at0", "ATTwo", "atom5", "atom2", "AT4", "At4", "it2"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        CTypicalStairs solver = new CTypicalStairs();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class CTypicalStairs {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int mod = 1_000_000_007;\\n            int n = in.nextInt();\\n            int m = in.nextInt();\\n            int[] arr = new int[n];\\n            for (int i = 0; i < m; i++)\\n                arr[i] = in.nextInt();\\n            //dp[k] : nb of steps to get to get to the N-1th from the kth step\\n            //dp[k] = if arr[k]==0 => 0 else dp[k+1] + dp[k+2]\\n            //dp[n-1] = 1\\n            long[] dp = new long[n + 2];\\n            dp[n + 1] = 0;\\n            dp[n] = 1;\\n            int cur = m == 0 ? -1 : arr[m - 1];\\n            int indM = m - 1;\\n            for (int i = n - 1; i >= 0; i--) {\\n                if (i == cur) {\\n                    indM--;\\n                    if (indM >= 0)\\n                        cur = arr[indM];\\n                    dp[i] = 0;\\n                } else {\\n                    dp[i] = dp[i + 1] + dp[i + 2];\\n                    dp[i] %= mod;\\n                }\\n            }\\n            out.println(dp[0]);\\n        }\\n\\n    }\\n}\\n\\n", "target": "174", "substitutes": {"inputStream": ["InputStream", "datastream", "outputStreamer", "inputStreamer", "dataStream", "dataSteam", " inputThread", "outputSteam", " inputSteam", "dataStreamer", "inputThread", "InputThread", "InputStreamer", "outputThread", "Inputstream", "InputSteam", " inputstream", "outputstream", "inputstream", "inputSteam"], "outputStream": ["OutputStyle", "OutputStream", "targetWriter", "OutputWriter", "outputSteam", "OutputSteam", "outputStyle", " outputSteam", "Outputstream", " outputstream", "inputWriter", "inputStyle", "outputWriter", "targetSteam", " outputStyle", "targetStream", "outputstream", "inputstream", "inputSteam"], "in": ["gen", "arg", "path", "between", "cin", "data", "is", "input", "lin", "token", "log", "err", "din", "pin", "inner", "id", "image", "io", "nin", "l", "IN", "inn", "min", "up", "like", "con", "c", "ie", "scan", "bin", "reader", "kin", "request", "isin", "resource", "inc", "query", "source", "re", "this", "info", "inside", "user", "s", "as", "x", "ln", "ic", "rin", "file", "vin", "ini", "sin", "into", "login", "win", "again", "ins", "conn", "connection", "init", "arin", "get", "In", "gin", "inf", "r"], "out": ["name", "plus", "off", "version", "no", "call", "err", "inner", "timeout", "server", "c", "query", "inc", "analysis", "to", "extra", "again", "temp", "outer", "init", "outs", "ne", "exit", "string", "cin", "session", "ex", "cache", "Out", "copy", "socket", "client", "input", "console", "log", "index", "IN", "up", "scan", "page", "OUT", "array", "this", "o", "file", "sync", "line", "writer", "connection", "plain", "parent", "net", "obj", "data", "outside", "io", "exec", "process", "scope", "v", "write", "bin", "output", "external", "user", "point", "x", "error", "w", "problem", "our", "conn"], "solver": ["insolution", "Solution", "setsolution", "Solved", "Solver", "insol", "solution", "ssolver", "solved", "ssolve", "solve", "ssolved", "ssolution", "insolver", "Sol", "sol", "Solve", "insolve", "setsolve", "setsolved", "setsolver", "ssol"], "testNumber": ["Testnumber", " testCounter", " trialnumber", " trialNumber", "TestNum", "TestCounter", " trialNum", " testnumber", " trialCounter", "testNum", "TestNumber", " testNum", "testnumber", "testCounter"], "mod": ["f", "mult", "Mod", "nc", " min", "id", " cm", "man", " d", "mu", "min", "num", "ms", "max", "mad", "cm", "j", "mm", "all", "dm", "pm", "mode", " Mod", " p", "mi", " mi", "module", " ms"], "n": ["f", "nm", "h", "ne", "nt", "number", "l", "c", "r", "d", "num", "y", "network", "u", "e", "o", "j", "cn", "s", "p", "b", "x", "un", "ns", "ln", "en", "nb", "N", "z", "k", "mn", "init", "a", "net"], "m": ["f", "nm", "h", "dim", "rm", "l", "mu", "c", "d", "ms", "num", "fm", "cm", "e", "o", "j", "mm", "s", "p", "b", "x", "dm", "N", "M", "w", "hm", "pm", "z", "mode", "k", "mn", "mi", "r"], "arr": ["map", "parse", "list", "br", "arg", "ann", "err", "ack", "fr", "par", "app", "ray", "attr", "aa", "dat", "att", "cat", "air", "ar", "aj", "array", "mat", "acc", "plot", "batch", "frac", "str", "img", "pack", "av", "stack", "var", "Ar", "au", "enc", "arc", "pad", "adr", "Array"], "i": ["li", "fi", "I", "mini", "di", "ri", "ni", "ik", "gi", "ai", "si", "l", "ui", "mu", "phi", "v", "it", "y", "uli", "uri", "u", "pi", "o", "j", "info", "ii", "qi", "p", "ti", "hi", "x", "ini", "start", "ci", "k", "mi", "ip", "iu", "xi", "uni", "chi", "ix", "multi", "bi", "my"]}}
{"code": "/* package whatever; // don't place package name! */\\n \\nimport java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n \\npublic class Main\\n{\\n\tpublic static void main (String[] args) throws java.lang.Exception\\n\t{\\n\t\tScanner in = new Scanner(System.in);\\n\t\tString s = in.next();\\n\t\tSystem.out.println(\"2018\"+ s.substring(4));\\n\t}\\n}", "target": "18", "substitutes": {"in": ["f", "rec", "arg", "string", "data", "is", "input", "out", "lin", "token", "log", "err", "id", "pin", "inner", "n", "nin", "l", "exec", "null", "IN", "min", "t", "sql", "c", "scan", "con", "bin", "d", "reader", "isin", "kin", "inc", "serv", "buffer", "ex", "this", "str", "user", "p", "as", "b", "ln", "rin", "ini", "sin", "login", "win", "again", "line", "ins", "conn", "i", "connection", "init", "In", "inf", "r"], "s": ["f", "h", "string", "is", "input", "abs", "out", "m", "parts", "n", "l", "ss", "S", "g", "v", "t", "c", "d", "your", "features", "su", "ls", "source", "u", "e", "str", "services", "p", "b", "opens", "ln", "ans", "ins", "i", "strings", "ses", "fs", "r"]}}
{"code": "import java.math.BigInteger;\\nimport java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n        Scanner sc= new Scanner(System.in);\\n        BigInteger n = sc.nextBigInteger();\\n        String s = String.valueOf(n);\\n        int sum =0;\\n        for(char c:s.toCharArray())\\n            sum += Integer.parseInt(String.valueOf(c));\\n        if(sum%9==0)\\n         \tSystem.out.println(\"Yes\");\\n         else\\n         \tSystem.out.println(\"No\");\\n  \t}\\n}\\n\\n", "target": "93", "substitutes": {"sc": ["ner", "osc", "mc", " Sc", "nc", "sb", "cc", "bc", "esc", "asc", "pc", "si", "exec", "ss", "sec", "scope", "cus", "SC", "scan", "cs", "se", "cl", "uc", "acc", "Sc", "system", "sub", "sci", "cr", "src", "sf", "sync", "rc", "cer", "ci", "sp", " SC", "sh", "ec", "lc"], "n": ["f", "ne", "name", "none", "nc", "in", "nt", "number", "m", "l", "na", "num", "network", "sn", "o", "j", "cn", "p", "b", "ns", "nl", "nb", "en", "N", "enc", "nr", " N", "Ns", "i", "init", "node", "nn", "a", "net"], "s": ["f", "h", "string", "sb", "sv", "gs", "si", "l", "S", "ss", "g", "v", "cs", "se", "d", "spec", "ls", "sn", "u", "e", "o", "qs", "services", "p", "sa", "b", "ns", "sync", "ws", "os", "ins", "ings", "strings", "ses", "a"], "sum": ["f", "parse", "sim", "sam", "sort", "cal", "miss", "summary", "am", "vol", "oss", "mass", "in", "match", "count", "seed", "key", "si", "ame", "text", "total", "ass", "gram", "sign", "style", "se", "num", "max", "su", "inc", "u", "av", "offset", "fat", "hash", "start", "scale", "char", "size", "mean", "sh", "average", "cur", "alpha", "um", "amount", "Sum"], "c": ["f", "cd", "ch", "cf", "cont", "string", "mc", "nc", "in", "cy", "count", "code", "cc", "m", "esc", "l", "ac", "v", "cl", "pointer", "ce", "u", "str", "cn", "dc", "p", "b", "C", "cr", "enc", "char", "cu", "ci", "ct", "i", "coll", "lc", "a", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int k = Integer.parseInt(sc.next());\\n        String s = sc.next();\\n\\n        StringBuilder result = new StringBuilder(n);\\n        result.append(s.substring(0, k - 1));\\n        result.append(String.valueOf(s.charAt(k - 1)).toLowerCase());\\n        result.append(s.substring(k));\\n        System.out.println(result.toString());\\n    }\\n}\\n", "target": "71", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "fc", "mc", " Sc", "nc", "sche", "cle", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "uc", "cl", "cus", "sw", "cor", "Sc", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "soc", "sp", " SC", "sch", "ec", "cur", "coll", "lc"], "n": ["f", "ne", "nc", "in", "no", "nt", "m", "number", "kn", "l", "v", "c", "d", "num", "y", "network", "max", "e", "o", "j", "p", "b", "x", "ns", "ln", "nb", "N", "z", "size", "conn", "i", "nn", "r"], "k": ["f", "kind", "h", "kid", "K", "ch", "ko", "ik", "ijk", "ek", "key", "id", "kick", "kn", "ck", "l", "ok", "end", "c", "mk", "d", "y", "spec", "u", "e", "j", "unk", "p", "x", "ku", "w", "kk", "ak", "sk", "z", "work", "ks", "i", "ke", "km", "dk", "q", "kw"], "s": ["f", "ts", "string", "is", "abs", "sb", "aws", "ssl", "sv", "gs", "parts", "south", "si", "l", "its", "ss", "S", "g", "v", "cs", "c", "sites", "words", "features", "su", "ls", "source", "es", "u", "str", "js", "qs", "services", "xs", "p", "sets", "ns", "ps", "tests", "ws", "ans", "sl", "results", "styles", "os", "ins", "strings", "ses", "states", "fs", "ds", "bis"], "result": ["comment", "join", "string", "keeper", "data", "out", "db", "err", "group", "core", "description", "expected", "json", "ret", "report", "default", "runner", "text", "message", "null", "usr", "order", "df", "up", "sum", "master", "page", "style", "complete", "future", "winner", "use", "array", "next", "output", "this", "str", "ruby", "user", "builder", "html", "card", "section", "url", "Result", "api", "pack", "manager", "row", "current", "iter", "res", "true", "response", "extra", "results", "root", "part", "work", "function", "ger", "feature", "coll", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint X = Integer.parseInt(sc.next());\\n\t\tsc.close();\\n\\n\\n\t\tint ans = Integer.MIN_VALUE;\\n\t\tif(X < 4) {\\n\t\t\tSystem.out.println(1);\\n\t\t\treturn;\\n\t\t}else {\\n\t\t\tfor(int i = 2; i <= X; i++) {\\n\t\t\t\tint j = 2;\\n\t\t\t\tint tmp = (int) Math.pow(i, j);\\n\t\t\t\twhile(tmp <= X) {\\n\t\t\t\t\tj++;\\n\t\t\t\t\ttmp = (int) Math.pow(i, j);\\n\t\t\t\t}\\n\t\t\t\ttmp = (int) Math.pow(i, j - 1);\\n\t\t\t\tif(ans < tmp && j > 2) {\\n\t\t\t\t\tans = tmp;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\\n\t}\\n\\n}", "target": "143", "substitutes": {"sc": ["ner", "ch", "osc", " Sc", "nc", "cv", "cc", "bc", "esc", "asc", "pc", "ck", "ss", "na", "server", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "cl", "cus", "uc", "cm", "str", "Sc", "system", "sq", "dc", "sci", "Scan", "cr", "ocr", "src", "sync", "rc", "cer", "sr", "soc", "sp", "ci", " SC", "sch", "sh", "ec", "cur", "sem", "lc", " scr"], "X": ["G", "K", "I", "L", "Z", "XL", "xx", "Size", "TX", "CP", "XY", "P", "Q", "NS", "H", "zip", "S", "Y", "XXXX", "IO", "E", "FF", "II", "AP", "ax", "batch", "J", "F", "PI", "CL", "XP", "V", "IX", "xs", "x", "T", "C", "U", "IP", "M", "N", "Max", "XXX", "xxx", "MAX", "size", "CC", "xi", "MX", "XX", "PE", "Array", "AX", "MP"], "ans": ["ANS", "cons", " scans", "ats", "ann", "oa", "aned", "anon", "params", "anas", "ani", "groups", "ons", "annot", "amps", "AN", "ss", "S", "na", "acts", "anc", "aces", "ano", "cs", "ents", "scan", "asa", "lan", "ls", "sn", "es", "ions", "aus", "asts", "xs", "s", "offs", "as", "ns", "An", "atan", "cas", "ants", "ps", "CS", "sk", "NA", "eps", "aps", "os", "ins", "ks", "ras", "an", "outs", "XX", "powers", "ars", "nn", "ams", "annis", "ds", "ana", "span"], "i": ["f", "li", "fi", "h", "I", "vi", "jp", "di", "in", "ni", "gi", "id", "m", "index", "ai", "io", "ji", "si", "l", "ui", "v", "it", "c", "ie", "y", "zi", "u", "pi", "e", "api", "ii", "qi", "p", "hi", "b", "x", "ti", "ind", "oi", "ini", "z", "ci", "mi", "xi", "ip", "iu", "ij", "ix", "bi"], "j": ["f", "uj", "li", "obj", "jj", "jo", "oj", "jp", "m", "ji", "n", "si", "l", "zip", "jc", "v", "t", "ja", "ie", "bj", "y", "pos", "aj", "nn", "ax", "next", "pa", "adj", "e", "o", "J", "js", "ii", "sq", "p", "job", "b", "x", "ind", " ii", "je", "z", "part", "k", "size", "ij", "jet", " job", "a", "jit"], "tmp": ["m", "zip", "py", "app", "t", "mp", "ext", "txt", "nn", "rb", "ii", " ff", "offset", "sup", "temp", "size", "cp", "yy", "now", "a", "done", "nt", "cop", "oe", "aj", "current", "ind", "kk", "z", "sp", "vt", "part", "test", "cur", "cmp", "jj", "rt", "jp", "ji", "step", "order", "tp", "bp", "tt", "pos", "next", "xxxxxxxx", "mm", "p", "b", "_", "xxx", "ppa", "obj", "treatment", "oa", "v", "ie", "bj", "np", "loc", "x", "nb", "start", "pp", "md", "prev"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        B3CardGameForThreeABCEdit solver = new B3CardGameForThreeABCEdit();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B3CardGameForThreeABCEdit {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            String Sa = in.nextString();\\n            String Sb = in.nextString();\\n            String Sc = in.nextString();\\n\\n            int a = 0, b = 0, c = 0;\\n            char next = 'a';\\n            while (true) {\\n                if (next == 'a') {\\n                    if (a == Sa.length()) {\\n                        out.println(\"A\");\\n                        break;\\n                    } else {\\n                        next = Sa.charAt(a);\\n                        a++;\\n                    }\\n                } else if (next == 'b') {\\n                    if (b == Sb.length()) {\\n                        out.println(\"B\");\\n                        break;\\n                    } else {\\n                        next = Sb.charAt(b);\\n                        b++;\\n                    }\\n                } else if (next == 'c') {\\n                    if (c == Sc.length()) {\\n                        out.println(\"C\");\\n                        break;\\n                    } else {\\n                        next = Sc.charAt(c);\\n                        c++;\\n                    }\\n                }\\n            }\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public String nextString() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                if (Character.isValidCodePoint(c)) {\\n                    res.appendCodePoint(c);\\n                }\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void print(Object... objects) {\\n            for (int i = 0; i < objects.length; i++) {\\n                if (i != 0) {\\n                    writer.print(' ');\\n                }\\n                writer.print(objects[i]);\\n            }\\n        }\\n\\n        public void println(Object... objects) {\\n            print(objects);\\n            writer.println();\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n    }\\n}\\n\\n", "target": "11", "substitutes": {"inputStream": ["InputStream", "outputStreamer", "rawstream", "inputStreamer", "rawSteam", "outputSteam", " inputSteam", "rawStreamer", "inputSync", "outputSync", "InputSync", "InputStreamer", "Inputstream", " inputSync", "InputSteam", " inputstream", "outputstream", "inputstream", "rawStream", "inputSteam"], "outputStream": ["outReader", "outputStreamer", "inputStreamer", "responseWriter", "OutputStream", "responseStream", "responseSteam", "OutputWriter", "outputSteam", "OutputSteam", "outputReader", "exitStream", "responseStreamer", "outWriter", "inputWriter", "exitReader", "outputWriter", "exitWriter", "outSteam", "OutputStreamer", "outStream", "exitSteam", "inputReader", "inputSteam"], "in": ["f", "gen", "arg", "name", "path", "plus", "cin", "data", "is", "input", "lin", "err", "din", "id", "pin", "inner", "image", "config", "socket", "io", "nin", "l", "ac", "IN", "inn", "min", "diff", "con", "it", "scan", "bin", "er", "reader", "kin", "request", "isin", "resource", "read", "inc", "source", "e", "info", "str", "this", "inside", "iter", "as", "ic", "file", "rin", "ini", "sin", "login", "win", "again", "view", "part", "work", "line", "ins", "conn", "connection", "init", "arin", "In", "gin", "inf", "r"], "out": ["exp", "name", "cmd", "off", "co", "prefix", "call", "global", "err", "inner", "by", "server", "query", "inc", "wr", "to", "again", "view", "temp", "outer", "init", "outs", "check", "string", "session", "writing", "remote", "doc", "max", "winner", "ex", "cache", "Out", "copy", "work", "lib", "gen", "client", "log", "post", "index", "left", "up", "page", "OUT", "buffer", "this", "o", "s", "file", "line", "connection", "plain", "parent", "net", "obj", "list", "data", "outside", "cli", "io", "object", "window", "exec", "scope", "v", "write", "bin", "output", "user", "at", "x", "error", "w", "problem", "pool", "conn", "r"], "solver": ["Solution", "setsolution", "Solved", "Solver", "solution", "ssolver", "solved", "solves", "ssolve", "Solves", "solve", "ssolved", "ssolution", " solves", "ssolves", " solution", "Solve", "setsolve", "setsolved", "setsolver", " solve"], "testNumber": ["testInteger", " trialCode", "TestCode", " testCode", " testInteger", "TestInteger", "TestNum", " trialNum", " trialInteger", "testNum", "TestNumber", " testNum", "testCode", " trialNumber"], "Sa": ["Isa", "sta", "SA", "Ra", "Dar", "Si", "St", "Sah", "Capt", "A", "Va", "Ba", "Bah", "Sav", "Wa", "Squ", "si", "S", "Sen", "Sat", "Pa", "Las", "SC", "Sys", "asa", "La", "Ta", "va", "Ma", "Su", "Ka", "sa", "Shar", "Ca", "za", "Ga", "Cla", "Fa", "sc", "Cas", "Cra", "Ha", "SI", "Str", "Na", "Ru"], "Sb": ["ASc", "Systemc", "Snb", " SB", "Sib", "CSnb", "Calc", "Systemb", "Nc", "Partc", "Systemib", "CSb", "Na", " Sib", "CSd", "Nb", "ASb", "SB", "PartB", " Sd", " Snb", "ASnb", "Partb", "CalB", "Nib", "ASd", "Calb", "Partib", "Systema", "Sd", "Calib", "CSc"], "Sc": ["Code", "G", "Cro", "Soc", "Cl", "St", "RC", "Capt", "Loc", "Sp", "Cle", "Sav", "Kh", "Buff", "Cr", "Pa", "Lu", "Scope", "ca", "SC", "cs", "Square", "Col", "Se", "Spec", "SI", "La", "Ka", "Cap", "Sche", "Cs", "Ca", "Ga", "C", "Coll", "Cla", "CS", "sc", "Esc", "Text", "Ec", "Cas", " SC", "Enc", "Desc", " sc", "Cra", "Sh", "BC", "Scar", "VC", "Str", "Sk"], "a": ["f", "am", "data", "A", "ab", "ad", "oa", "count", "ao", "ai", "n", "ea", "ac", "na", "ba", "da", "ca", "area", "aa", "asa", "y", "ap", "aj", "va", "pa", "af", "api", "aaa", "fa", "sa", "as", "za", "ha", "au", "ak", "asha", "ya", "wa", "an", "ae", "alpha", "la"], "b": ["f", "bf", "br", "h", "base", "sb", "bh", "db", "ab", "bc", "bur", "n", "l", "B", "wb", "ob", "ba", "fb", "v", "ca", "aa", "bar", "d", "y", "xb", "rb", "u", "e", "lb", "o", "j", "bb", "nb", "cb", "ib", "z", "bd", "bs", "be", "body", "bi", "eb"], "c": ["f", "cd", "h", "cf", "cin", "vc", "cy", "count", "code", "cc", "pc", "n", "l", "ac", "g", "v", "ca", "con", "cs", "uc", "cl", "d", "cat", "y", "ce", "cm", "u", "e", "o", "dc", "p", "C", "cr", "sc", "cu", "col", "z", "ci", "k", "ct", "cp", "ec", "coll", "lc", "q"], "next": ["value", "primary", "name", "version", "err", "key", "code", "default", "sec", "area", "conf", "fix", "api", "sup", "enc", "now", "skip", "sequence", "second", "shift", "done", "one", "nt", "active", "self", "more", "iterator", "future", "max", " Next", "current", "open", "append", "gen", "valid", "Next", "non", "text", "close", "last", "end", "success", "page", "first", "vious", "entry", "seq", "this", "reply", "frame", "state", "line", "big", "continue", "ahead", "ner", "div", "path", "series", "data", "config", "result", "complete", "pointer", "then", "info", "link", "error", "missing", "start", "prev"], "stream": ["thread", "channel", "client", "h", "transform", "cont", "path", "string", "round", "input", "context", "object", "document", "window", "message", "track", "server", "v", "port", "model", "form", "sw", "iterator", "reader", "feed", "resource", "output", "source", "buffer", "wrapper", "open", "row", "stack", "pipe", "src", "file", "w", "response", "pool", "view", "temp", "Stream", "engine", "host", "accept", "control", "method", "socket"], "buf": ["Buffer", "br", "fd", "cmd", "buff", "cv", "queue", "port", "ctx", "ff", "vec", "pos", "seq", "buffer", "batch", "rb", "alloc", "uf", "flush", "blocks", "bag", "cb", "rc", "box", "len", "ptr", "cap", "func"], "curChar": ["perchar", "CurChar", "curchar", " curCh", "CurCh", "Curchar", "curCh", "perWord", "perChar", "CurWord", "curWord", "perCh", " curchar", " curWord"], "numChars": ["sumCHards", "sumChars", "sumCHars", "NumchARS", "numCharats", "sumChards", "NumChats", "NumChars", "numCHars", "numChards", "sumCHats", "numchARS", "numCharards", "numchars", "numCHats", "numCHARS", "NumChARS", "NumChards", "numchats", "numCharARS", "numchards", "sumCHARS", "numCHards", "Numchards", "Numchats", "sumChARS", "numChats", "numCharars", "Numchars", "numChARS", "sumChats"], "filter": ["map", "f", "class", "val", "list", "string", "length", " Filter", "Filter", " filters", "object", "null", "only", "reader", "output", "buffer", "this", "cache", "bag", "file", "false", "true", "pool", "size", "function", "handler"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n\tScanner sc = new Scanner(System.in);\\n\tint n;\\n\tint[] S;\\n\tint q;\\n\tint[] T;\\n\tint C;\\n\tint left;\\n\tint right;\\n\tint mid;\\n\tvoid n(){\\n\t\tn=sc.nextInt();\\n\t\tS=new int[n];\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tS[i]=sc.nextInt();\\n\t\t}\\n\t\tq=sc.nextInt();\\n\t\tT=new int[q];\\n\t\tfor(int j=0; j<q; j++){\\n\t\t\tT[j]=sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tfor(int j=0; j<q; j++){\\n\t\t\tleft=0;\\n\t\t\tright=n;\\n\t\t\twhile(left<right){\\n\t\t\t\tmid=(left+right)/2;\\n\t\t\t\t\\n\t\t\t\tif(T[j]==S[mid]){\\n\t\t\t\t\tC++;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}else if(T[j]<S[mid]){\\n\t\t\t\t\tright=mid;\\n\t\t\t\t}else if(T[j]>S[mid]){\\n\t\t\t\t\tleft=mid+1;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(C);\\n\t}\\n\tpublic static void main(String[]agrs){\\n\t\tnew Main().n();\\n\t}\\n}", "target": "138", "substitutes": {"sc": ["class", "parse", "ner", "ch", "osc", "cont", " cont", " Sc", "sb", "out", "sche", "nt", "cli", "cv", "esc", "bc", "cc", "asc", "pc", "cam", "ss", "sec", "server", "scope", "g", "anc", "cus", "SC", " rc", "se", "c", "scan", "cs", "ctx", "cl", "uc", "com", "spec", "screen", "acc", "cor", "Sc", "loc", "system", "sq", "dc", "sci", "cr", "src", "sync", "slice", "rc", "soc", "or", " SC", "sch", " sp", "cur", "coll", "lib", "lc", " scr", "r"], "n": ["f", "nan", "nd", "ne", "name", "none", "nc", "net", "no", "in", "nt", "m", "l", "na", "g", "v", "min", "t", "c", "d", "num", "y", "network", "pos", "rn", "sn", "u", "nat", "o", "e", "cn", "s", "dn", "p", "un", "b", "x", "ns", "nl", "en", "nb", "ln", "w", "N", "pn", "all", "len", "z", " N", "k", "an", "nn", "fn", "r"], "S": ["Ps", "G", "K", "DS", "I", "Session", "L", "Si", "Z", "IDS", "A", "Socket", "X", "Is", "ITS", "P", "Q", "NS", "SN", "H", "Y", "SH", "B", "SC", "D", "VS", "FS", "OS", "W", "J", "Sc", "F", "V", "s", "R", "IS", "Sa", "TS", "U", "SE", "M", "N", "SS", "SU", "CS", "Sl", "PS", "Ns", "WS", "US", "SI"], "q": ["f", "h", "ch", "in", "id", "count", "m", "Q", "l", "patch", "g", "v", "end", "t", "c", "d", "y", "max", "query", "u", "qs", "qi", "s", "sq", "p", "x", "dq", "qq", "w", "qu", "z", "k", "quant", "qa", "sh", "qt", "r"], "T": ["TN", "G", "LT", "RET", "Token", "Tab", "I", "TE", "L", "Z", "TG", "VT", "Tokens", "INT", "DT", "X", "TA", "P", "Target", "Q", "TT", "H", "CT", "Y", "UT", "GT", "t", "E", "D", "Ts", "WT", "DATA", "W", "Tu", "J", "F", "Time", "V", "TC", "R", "TS", "U", "M", "N", "TEXT", "Text", "z", "Test", "Total", "TI", "NT", "K", "TH", "O", "IT"], "C": ["CN", "Code", "G", "K", "I", "L", "Z", "CM", "Mid", "A", "Count", "X", "count", "P", "Q", "NC", "CT", "B", "Left", "D", "c", "CF", "E", "Col", "CI", "max", "F", "CL", "V", "R", "EC", "CR", "M", "N", "Max", "Right", "z", "GC", "CC", "DC", "CE", "VC", "O"], "left": ["f", "li", "center", "level", "cell", "middle", "L", "one", "off", "co", "no", "cle", "pl", "length", "id", "m", "inner", "label", "low", "l", "last", "min", "parent", "end", "Left", "c", "cl", "d", "NL", "small", "pos", "max", "le", "e", "url", "lo", "ii", "ell", "loc", "full", "p", "offset", "open", "row", "all", "and", "len", "col", "z", "fl", "lt", "la", "coll", "lower", "lc", "el", "r"], "right": ["middle", "rt", "one", "off", "range", "no", "length", "id", "rights", "m", "inner", "three", "close", "patch", "rel", "rest", "end", "c", "d", "max", "red", "rew", "ax", "p", "R", "x", "row", "rh", "down", "third", "child", "w", "res", "Right", "rad", "correct", "ro", "partial", "part", "k", "through", "rd", "ack", "r"], "mid": ["nm", "rand", "li", "nd", "center", "kind", "dim", "mini", "middle", "co", "cmd", "Mid", "medium", "nt", "id", "limit", "m", "key", "inner", "code", "low", "patch", "min", "mr", "mor", "rel", "master", "c", "end", "nice", "med", "ms", "small", "pos", "ng", "mad", "cm", "next", "lim", "cor", "mm", "field", "pid", "member", "offset", "p", "hi", "x", "ind", "row", "rid", "coord", "start", "grid", "char", "md", "mode", "partial", "part", "line", "k", "mi", "cur", "module", "r"], "i": ["f", "li", "I", "di", "in", "ri", "ni", "id", "key", "ai", "io", "ji", "si", "l", "ui", "v", "it", "c", "y", "u", "e", "pi", "o", "ii", "qi", "p", "hi", "b", "oi", "ind", "ini", "start", "z", "ci", "mi", "ip", "init", "chi", "ix", "bi"], "j": ["f", "uj", "obj", "li", "h", "jl", "jj", "nm", "jo", "oj", "jp", "jen", "out", "ik", "id", "key", "code", "m", "pr", "ji", "l", "dj", "g", "v", "jc", "t", "ja", "c", "it", "ie", "bj", "d", "y", "aj", "u", "e", "o", "js", "J", "ii", "p", "hi", "b", "x", "ion", "job", "ind", "w", "je", "z", "k", "ij", "ix", "jet", "r"], "agrs": ["argars", "attars", "macr", "macres", "agr", "macrs", "argrs", "attr", "attrs", "agars", "attres", "argres", "argr", "agres", "macars"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a1 = Integer.parseInt(sc.next());\\n        int a2 = Integer.parseInt(sc.next());\\n        int a3 = Integer.parseInt(sc.next());\\n        if ((a1 + a2 + a3) >= 22) {\\n            System.out.println(\"bust\");\\n        } else {\\n            System.out.println(\"win\");\\n        }\\n        sc.close();\\n    }\\n}\\n", "target": "129", "substitutes": {"sc": ["class", "parse", "osc", "ch", "cont", "exp", "mc", " Sc", "nc", "sche", "cli", "cv", "cc", "esc", "bc", "asc", "pc", "l", "cam", "ss", "chel", "sec", "scope", "cus", "SC", "se", "c", "scan", "ctx", "cl", "uc", "cs", "spec", "cor", "this", "Sc", "system", "dc", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "soc", "sp", " SC", "sch", "parser", "ec", "tc", "cur", "coll", "desc", "sem", "ser", "lc"], "a1": ["alpha2", "alpha3", "A1", "alpha1", "A2", "a0", "va2", "a01", "va01", " a01", "A0", "va1", "alpha0", "A01", "va0", " a0", "A3"], "a2": ["ga3", "e2", "an02", "sa2", "sa02", "e02", "a02", "e256", " a02", "a0", "ga02", "ga0", "an2", "ga2", "an256", "sa3", " a256", "an0", "a256", " a0", "sa0", "e0"], "a3": ["alpha3", "area1", "A1", "areaThree", "a4", "alpha1", " a4", "A4", "a7", "area3", " a7", "sa4", "sa1", "sa3", " aThree", "A7", "area5", "alpha5", " a5", "alphaThree", "a5", "sa7", "aThree", "A3"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\t\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint a=sc.nextInt();\\n\t\tint b=sc.nextInt();\\n\t\tint n=a*b;\\n\t\t\\n\t\tSystem.out.println(n);\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "35", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args) {\\n    Scanner sc=new Scanner(System.in);\\n    int a,b;\\n    a=sc.nextInt();\\n    b=sc.nextInt();\\n    int n=0;\\n    if(a<b){\\n      for(int i=0;i<b;i++){\\n        if(i-a==b-i){\\n          n=i;\\n          break;\\n        }\\n      }\\n    }else{\\n      for(int i=0;i<a;i++){\\n        if(a-i==i-b){\\n          n=i;\\n          break;\\n        }\\n      }\\n    }\\n    if(n!=0){\\n      System.out.println(n);\\n    }else{\\n      System.out.println(\"IMPOSSIBLE\");\\n    }\\n  }\\n}\\n", "target": "31", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "sche", "cc", "bc", "esc", "asc", "pc", "ss", "server", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "uc", "sw", "cus", "com", "ctx", "cl", "cor", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "cer", "soc", "or", "sys", "ci", "sp", " SC", "sch", "tc", "cur", "sem", "ser", "lc"], "a": ["f", "sta", "am", "ga", "A", "in", "ab", "ad", "id", "m", "ai", "ea", "ac", "ba", "da", "ca", "area", "c", "aa", "ie", "d", "y", "aj", "va", "u", "e", "o", "j", "pa", "api", "aaa", "s", "fa", "sa", "p", "x", "as", "ia", "w", "z", "wa", "an", "ae", "alpha", "la", "r"], "b": ["f", "bf", "pb", "h", "base", "sb", "ab", "db", "id", "limit", "m", "bc", "l", "B", "wb", "ba", "v", "t", "c", "aa", "bar", "d", "y", "rb", "u", "e", "o", "lb", "j", "aaa", "bb", "dy", "api", "s", "fa", "p", "x", "nb", "w", "ib", "z", "bs", "abb", "beta", "an", "body", "bi", "fb"], "n": ["f", "nan", "ne", "none", "nc", "ann", "no", "nt", "ni", "m", "number", "inner", "index", "not", "l", "na", "g", "v", "t", "c", "d", "num", "y", "network", "sn", "ng", "next", "u", "e", "o", "j", "nw", "p", "un", "x", "ns", "ln", "nb", "en", "N", "z", "conn", "nor", "an", "nn", "fn", "span"], "i": ["f", "li", "I", "is", "di", "in", "anti", "ri", "ami", "ni", "id", "gi", "m", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "g", "v", "phi", "it", "t", "c", "ie", "d", "y", "zi", "u", "e", "o", "j", "pi", "api", "ii", "info", "qi", "p", "hi", "oi", "x", "w", "ini", "yi", "z", "ci", "k", "mi", "ip", "iu", "xi", "ix", "bi", "r"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String args[]){\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] nums  = new int[n];\\n\t\tfor(int i=0;i<n;i++){\\n\t\t\tnums[i] = sc.nextInt();\\n\t\t}\\n\t\tint count = 0;\\n\t\tfor(int x:nums){\\n\t\t\tif(isPrime(x)){\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n\tpublic static  boolean isPrime(int number){\\n\t\tfor(int i=2;i*i<=number;i++){\\n\t\t\tif(number%i==0) return false;\\n\t\t}\\n\t\treturn true;\\n\t}\\n}", "target": "226", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "sche", "cv", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "sec", "server", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "cus", "cor", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "or", "ci", "sp", " SC", "sch", "sh", "ec", "tc", "cur", "ser", "lc"], "n": ["f", "ne", "nc", "net", "in", "no", "nt", "m", "l", "na", "v", "t", "c", "num", "d", "network", "y", "sn", "u", "o", "j", "s", "p", "b", "ns", "nl", "en", "nb", "w", "ln", "N", "len", "z", "nr", "size", "k", "nn", "r"], "nums": ["nubs", "rnoms", "rnums", "cubs", "ennums", "ennumbers", "cum", "noms", "coms", "nanems", " nems", "numbers", "num", "cumbers", "rnum", "nanumbers", "nanums", "ennubs", "Noms", "rnumbers", " namps", "nems", "cums", " nubs", "cems", " numbers", "ennamps", "Nums", "nanubs", "camps", "Num", "Numbers", "namps"], "i": ["f", "li", "fi", "I", "mini", "di", "in", "ri", "ni", "length", "id", "gi", "index", "m", "ai", "io", "ji", "si", "l", "ui", "mu", "phi", "v", "it", "t", "c", "ie", "d", "y", "uri", "zi", "u", "pi", "o", "j", "e", "info", "ii", "ei", "qi", "p", "ti", "hi", "oi", "b", "ini", "yi", "z", "ci", "mi", "ip", "xi", "init", "ix", "chi", "multi", "bi"], "count": ["cond", "list", "name", "base", "no", "nt", "Count", "length", "group", "id", "code", "match", "index", "process", "total", "sum", "c", "type", "bug", "num", "array", "weight", "counter", "add", "info", "cache", "handle", "depth", "offset", "b", "error", "child", "start", "len", "pool", "size", "part", "work", "found", "check", "now", "second"], "x": ["f", "xc", "cross", "val", "lex", "h", "xxxx", "xx", "X", "id", "code", "index", "m", "xf", "v", "t", "c", "xt", "num", "y", "ax", "ex", "u", "e", "xs", "p", "b", "w", "pe", "xxx", "rx", "z", "k", "work", "xa", "xi", "ix", "xp"], "number": ["value", "name", "factor", "string", "version", "no", "length", "limit", "integer", "object", "message", "initial", "total", "order", "result", "page", "money", "forward", "num", "zero", "umber", "counter", "digit", "power", "floor", "numbered", "position", "current", "point", "year", "date", "un", "b", "p", "letter", "part", "size", "function", "two", "Number", "amount", "reference"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n\tfinal static long MOD = 1000000007;\\n\tpublic static String[] Ws = null;\\n\tpublic static int wsIndx = 0;\\n\tpublic static BufferedReader in = null;\\n\tpublic static void main(String[] args) throws Exception {\\n\\n\t\tint N=nextInt();\\n\t\tint M=nextInt();\\n\\n\t\tint[] G = new int[N+1];\\n\t\tArrays.fill(G, 0);\\n\t\tfor(int i=0;i<M;i++){\\n\t\t\tint[] p = nextInts();\\n\t\t\tG[p[0]-1]++;\\n\t\t\tG[p[1]]--;\\n\t\t}\\n\\n\t\tfor(int i=0;i<N;i++){\\n\t\t\tG[i+1]+=G[i];\\n\t\t}\\n\t\tlong ans = 0;\\n\t\tfor(int i=0;i<N;i++){\\n\t\t\tif(G[i]==M)\\n\t\t\t\tans++;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n\\n\tpublic static void check() throws Exception{\\n\t\tif(in == null){\\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tif(Ws==null || Ws.length<=wsIndx){\\n\t\t\tWs = in.readLine().split(\" \");\\n\t\t\twsIndx=0;\\n\t\t}\\n\t}\\n\tpublic static int nextInt()throws Exception{\\n\t\tcheck();\\n\t\treturn Integer.parseInt(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static long nextLong()throws Exception{\\n\t\tcheck();\\n\t\treturn Long.parseLong(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static String nextString()throws Exception{\\n\t\tcheck();\\n\t\treturn Ws[wsIndx++];\\n\t}\\n\\n\tpublic static int[] nextInts()throws Exception{\\n\t\tcheck();\\n\t\tint[] tmp = new int[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Integer.parseInt(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static long[] nextLongs()throws Exception{\\n\t\tcheck();\\n\t\tlong[] tmp = new long[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Long.parseLong(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static String[] nextStrings()throws Exception{\\n\t\tcheck();\\n\t\twsIndx=Ws.length;\\n\t\treturn Ws;\\n\t}\\n\\n\\n}\\n", "target": "124", "substitutes": {"MOD": [" mod", " weight", " cs", " MM", "L", " MS", " SN", " Max", " bits", "S", " max", " rc", "ms", "max", " C", " fn", " pid", " mode", " res", " P", " X", " flags", " ND", " Z", " MAX", "MS", " S", " U", " xx", " ms"], "Ws": ["Us", "Rs", "BW", "WC", "Works", "wb", "Sys", "WA", "NW", "WB", "Gs", "WS", "GS", "GW", "Pages", "Js", "Wr", "gs", "Wi", "CW", "Windows", "Es", "Os", "VS", "Web", "WT", "Line", "Wars", "Cs", "RW", "WP", "Word", "Cas", "Ns", "rw", "Parts", "Hi", "Str", "Ps", "wy", "Bytes", "aws", "Socket", "Services", "wcs", "wt", "vs", "Words", "ww", "We", "Wo", "Raw", "War", "s", "WW", "Writer", " WS", "Fs", "Text", "Values", "Bs", "Contents", "Input", "Win", "wx", "Wa", "Wire", "xml", "ls", "WN", "W", "Ms", "w", "Vs", "ws", "Maps", "wa"], "wsIndx": ["wsIdX", "wsIdy", "WSIndx", "Wsindy", "wsIndxs", "WsCondy", "wsAddX", "wsIndex", "WsindX", "WSIndy", "wsIndg", "WSIndc", "WSIdex", "WSIdc", "wsIdg", "WSIdg", "wsIdex", "WSIndex", "WSIdz", "wsCondxs", "Wsindxes", "wsIndz", "wsCondn", "WSIndg", "WsCondxs", "wsindg", "wsCondy", "WsCondX", "wsINDc", "WsIndy", "WsIndxs", "WsIndn", "WSIdn", "wsINDX", "WSIdy", "wsIdxs", "wsIny", "wsCondx", "wsCondex", "WSIndz", "wsIndy", "wsIdz", "Wsindxs", "wsindc", "wsInty", "wsIndX", "Wsindx", "wsINDx", "wsIdn", "wsAddxs", "wsAddy", "wsIntX", "wsIndn", "wsindx", "wsIdc", "wsINDg", "WsIndX", "wsInx", "WsIndx", "wsindy", "WSIdx", "wsCondz", "wsIndc", "wsIdx", "wsIntx", "wsindxs", "wsAddx", "wsindn", "wsindX", "WSIndn", "wsInX", "wsIntex", "WsCondx", "WSIdX", "wsindxes", "wsIntz", "WsIndxes", "wsIndxes", "wsCondX", "WSIndX", "Wsindn", "wsInn", "wsAddxes"], "in": ["f", "is", "lin", "err", "image", "m", "inner", "inas", "l", "c", "cl", "inc", "ax", "serv", "read", "url", "again", "temp", "init", "gin", "a", "h", "min", "doc", "cgi", "isin", "resource", "source", "ex", "ini", "part", "socket", "input", "out", "ssl", "log", "din", "id", "readable", "ac", "IN", "inn", "g", "con", "reader", "kin", "s", "as", "b", "rin", "file", "login", "win", "connection", "In", "data", "raw", "pin", "io", "n", "nin", "v", "bin", "d", "str", "x", "ic", "src", "w", "ins", "conn", "r"], "N": ["NE", "CNN", "K", "I", "L", "Z", "Size", "NI", "X", " n", "Ni", "P", "Q", "NS", "H", "n", "NC", "B", "Y", "S", "Na", "E", "D", "NL", "NO", "MN", "W", "J", "F", "V", "NM", "R", "NP", "NN", "T", "C", "U", "Num", "NA", "Ne", "Part", "Ns", "ND", "NT", "O"], "M": ["K", "I", "DM", "L", "Z", "CM", "X", "P", "m", "Q", "JM", "OM", "H", "n", "MC", "S", "Y", "B", "Mo", "MM", "E", "D", "LM", "MN", "W", "J", "MD", "F", "V", "NM", "R", "T", "C", "U", "MT", "MS", "MO", "Mi", "O"], "G": ["GP", "GF", "I", "L", "GH", "IG", "GE", "Global", "X", "P", "GB", "Q", "GV", "H", "CG", "FG", "S", "Y", "Gi", "g", "GT", "GA", "E", "D", "GR", "Pg", "GU", "W", "J", "F", "V", "GD", "R", "MG", "General", "C", "U", "Gs", "Gu", "Go", "LG", "PG", "GM", "GO", "GC", "GG", "GI", "Group", "Ge", "GS", "GW"], "i": ["f", "eni", "mini", "gu", "gi", "m", "inner", "ret", "l", "mu", "c", "uri", "api", "ii", "qi", "oi", "iu", "init", "multi", "a", "h", "one", "di", "ri", "ai", "it", "adi", "u", "j", "hi", "ini", "z", "ci", "mi", "ix", "bi", "li", "fi", "I", "id", "ji", "ui", "g", "phi", "y", "zi", "e", "o", "ei", "ti", "b", "slice", "yi", "chi", "my", "q", "data", "cli", "ni", "ik", "io", "n", "si", "v", "ie", "d", "uli", "pi", "info", "x", "w", "abi", "start", "ip", "xi", "pri", "r"], "p": ["br", "pat", "jp", "P", "m", "pc", "n", "pre", "py", "g", "tp", "v", "up", "t", "c", "pg", "d", "ap", "pa", "pi", "e", "u", "pt", "np", "point", "pid", "s", "b", " P", "ps", "w", "pe", "po", "pp", "op", "sp", "part", "cp", "ip", "pu", "a"], "ans": ["ANS", "Ann", "ats", "ann", "oss", "gan", "aned", "lang", "anon", "lines", " an", "man", "ons", "annot", "amps", "AN", "ss", " means", "na", "anc", "ents", "scan", "errors", "ms", "can", "lan", "ls", "es", "nas", "ids", "ens", "as", "ln", "ns", "An", "san", "ants", "len", "sk", "eps", "os", "ins", "ks", "us", "ana", "ras", " Ans", "an", "ars", "ds", "a", "span"], "tmp": ["obj", "data", "wp", "jp", "buff", "BB", "sb", "out", "vv", "wx", "proc", "bt", "app", "vs", "wb", "tp", "v", "self", "meta", "area", "bp", "result", "buf", "tt", "conv", "ff", "mp", "pos", "array", "txt", "output", "rb", "TB", "dest", "cache", "img", "emp", "Temp", "np", "api", "ii", "current", "fp", "elt", "stack", "bag", "sup", "nb", "cb", "kk", "vp", "extra", "temp", "sp", "copy", "vt", "Dest", "cp", "part", "tc", "stuff", "pad", "cur", "storage", "cmp", "prev", "fb", "bg"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        long n = sc.nextLong();\\n\\n        long digits = Long.MAX_VALUE;\\n        double sqrt = Math.sqrt(n);\\n        for (long i = 1; i <= sqrt; i++) {\\n            if (n % i == 0) {\\n                long a = n / i;\\n                digits = Math.min(digits, f(a, i));\\n            }\\n        }\\n\\n        System.out.print(digits);\\n    }\\n\\n    static long f(long a, long b) {\\n        return Math.max(Long.toString(a).length(), Long.toString(b).length());\\n    }\\n}", "target": "61", "substitutes": {"sc": ["ner", "osc", "ch", "cont", "exp", " Sc", "nc", "esc", "bc", "cc", "asc", "pc", "ss", "sec", "scope", "anc", "ca", "SC", "se", "c", "scan", "sw", "uc", "cl", "cs", "acc", "Sc", "system", "sq", "sub", "sci", "cr", "ocr", "src", "rc", "cer", "enc", "soc", "ci", "sp", " SC", "sch", "ec", "cur", "desc", "lc"], "n": ["nan", "f", "names", "h", "ne", "nc", "no", "nt", "ni", "length", "count", "m", "number", "l", "na", "g", "t", "c", "d", "num", "network", "y", "max", "sn", "u", "e", "o", "j", "nat", "cn", "s", "p", "x", "all", "ns", "ln", "nb", "en", "N", "len", "z", "nr", "size", "k", "Ns", "conn", "nu", "nn"], "digits": ["digitions", "multiplists", "longest", "digitit", "digitets", "bigals", "multiplITS", " digists", "logists", "multiplit", "milals", "digITS", "milbits", "bigets", "digins", "DigITS", "Digbits", "Digits", "digals", "longitions", "dimets", "dimins", "milets", "digists", "Digals", " digit", "dimits", "multiplest", "digitins", "digit", "digets", " digITS", "longits", "Digit", "bigbits", "logits", "multiplitions", "digitits", "Digists", "milits", "digbits", "bigits", "multiplits", "longists", "dimit", "digest", "Digins", "logitions", "logest", "Digets"], "sqrt": ["eqRT", "qnt", "sqrd", "eqrd", "shr", "sht", "seqtr", " sqgrad", "qtr", "shnt", "seqrd", "squrt", "squRT", "qgrad", " qrt", " qr", "sqtr", " sqr", "qrt", "sqr", " sqRT", "shrt", " sqt", "squgrad", "eqrt", " sqnt", "sqnt", "squnt", " qt", " qnt", "seqRT", "sqRT", "seqrt", "qrd", "qRT", "eqtr", "sqgrad", "sqt"], "i": ["f", "eni", "li", "fi", "I", "is", "di", "in", "ri", "ni", "length", "id", "gi", "index", "ai", "io", "si", "l", "ui", "mu", "phi", "v", "it", "c", "ie", "d", "y", "uli", "zi", "uri", "u", "pi", "o", "j", "e", "ei", "ii", "qi", "p", "ti", "x", "hi", "oi", "slice", "abi", "ini", "yi", "z", "ci", "iu", "xi", "chi", "multi", "ix", "bi"], "a": ["f", "sta", "ama", "am", "data", "A", "ab", "ad", "id", "count", "ai", "ea", "ac", "l", "na", "ba", "da", "area", "ca", "c", "aa", "asa", "d", "y", "va", "u", "pa", "af", "api", "fa", "p", "sa", "as", "ia", "ha", "au", "wa", "ta", "art", "an", "ae", "alpha", "la"], "b": ["f", "bf", "base", "sb", "ab", "l", "B", "wb", "ob", "ba", "v", "app", "c", "bar", "aa", "d", "y", "buffer", "rb", "u", "e", "o", "lb", "bb", "s", "p", "bis", "x", "nb", "cb", "ib", "bs", "other", "abb", "body", "fb", "r"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    long[] p = new long[n];\\n    for(int i = 0;i<n;i++){\\n      p[i] = sc.nextLong();\\n    }\\n    int count = 0;\\n    for(int i=1;i<n-1;i++){\\n      if(p[i-1]<p[i]&&p[i]<p[i+1]||p[i-1]>p[i]&&p[i]>p[i+1])count++;\\n    }\\n    System.out.println(count);\\n  }\\n}\\n", "target": "96", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "st", "sche", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "sw", "cus", "uc", "sn", "cor", "Sc", "system", "sq", "sci", "cr", "src", "rc", "cer", "enc", "sp", "ci", " SC", "sch", "sh", "ec", "cur", "screen", "lc"], "n": ["f", "h", "ne", "nc", "in", "no", "nt", "m", "number", "l", "v", "t", "r", "c", "d", "num", "network", "y", "sn", "u", "e", "o", "j", "s", "b", "x", "ns", "nl", "en", "nb", "w", "N", "len", "z", "nr", "size", "k", "conn", "init", "nu", "q", "net", "span"], "p": ["f", "pb", "h", "data", "wp", "jp", "post", "P", "m", "pc", "l", "patch", "pre", "py", "tp", "v", "g", "up", "t", "bp", "c", "d", "mp", "ap", "y", "array", "per", "pa", "pi", "e", "o", "j", "u", "np", "point", "pid", "lp", "s", "b", "python", "x", "at", "w", "ps", "pe", "pp", "op", "z", "sp", "part", "k", "cp", "ip", "parent", "a", "r"], "i": ["f", "eni", "li", "fi", "I", "is", "di", "in", "anti", "ri", "ni", "cli", "id", "gi", "index", "ami", "ai", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "it", "c", "ie", "page", "y", "inline", "uri", "u", "pi", "o", "e", "j", "info", "ii", "api", "qi", "ei", "hi", "b", "oi", "x", "ind", "ti", "ini", "start", "yi", "z", "ci", "mi", "ip", "iu", "xi", "init", "isi", "ix", "ki", "bi", "a", "r"], "count": ["f", "cond", "list", "level", "name", "nt", "Count", "length", "group", "id", "limit", "number", "code", "index", "lag", "key", "total", "last", "sum", "loop", "more", "c", "type", "pointer", "weight", "counter", "info", "cache", "depth", "current", "offset", "b", "ind", "child", "start", "len", "size", "part", "every", "test", "found", "now", "old", "parent", "second"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        char[] s = sc.next().toCharArray();\\n        boolean Judge = false;\\n        for (int i = 1; i < s.length; i++) {\\n            if (s[i-1] == s[i]) {\\n                Judge = !Judge;\\n                break;\\n            }\\n        }\\n\\n        if (Judge) {\\n            System.out.println(\"Bad\");\\n        }else{\\n            System.out.println(\"Good\");\\n        }\\n    }\\n}\\n", "target": "73", "substitutes": {"sc": ["class", "ner", "osc", "mc", " Sc", "nc", "sb", "cc", "bc", "esc", "pc", "exec", "ss", "sec", "scope", "g", "SC", "c", "scan", "cs", "sw", "uc", "cl", "spec", "acc", "Sc", "dc", "sci", "cr", "src", "sf", "sync", "rc", "cer", "enc", "sl", "sp", "ci", " SC", "sh", "ec", "desc", " scr"], "s": ["f", "letters", "string", "plus", "is", "abs", "in", "sv", "gs", "vs", "n", "groups", "l", "its", "S", "ss", "g", "v", "c", "rows", "d", "array", "u", "e", "ids", "js", "services", "xs", "sq", "p", "as", "b", "sets", "w", "ps", "tests", "ws", "ins", "strings", "ses", "rs", "ds", "a", "r"], "i": ["f", "li", "fi", "h", "I", "mini", "shift", "di", "in", "length", "id", "gi", "m", "index", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "min", "left", "t", "it", "c", "diff", "page", "end", "d", "y", "uri", "u", "pi", "o", "j", "e", "info", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "slice", "abi", "ini", "start", "temp", "z", "ci", "part", "k", "xi", "init", "chi", "multi", "ix", "bi", "a"], "Judge": ["Govern", "Length", "Provider", " judge", "Jane", "Size", "Joe", "Zero", "Stand", "Strange", "Guard", "Consider", "Better", "Jud", "Evidence", "Orderable", "Finish", "Maker", " Judges", "Poor", "Lord", "Match", "Have", "Doctor", "Enough", "Witness", "Winner", "Choose", "Jerry", "Know", "know", "Cow", "Never", "Score", "Guest", "Gear", "Measure", "Adam", "Case", "Maybe", "Driver", "Rule", "Anyone", "Good", "doctor", "Already", "Justice", "Agent", "Court", "Tell", "Developer", "Captain", "Test", "Bench", "Roy", "Grant", "Gray", "Experience", "Remember", "Compare"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String s = sc.next();\\n\\n        if (n%2 != 0) {\\n            System.out.println(\"No\");\\n            return;\\n        }\\n        \\n        int half = n / 2;\\n        String t1 = s.substring(0, half);\\n        String t2 = s.substring(half, n);\\n        \\n        if(t1.equals(t2)){\\n            System.out.println(\"Yes\");\\n        }\\n        else{\\n            System.out.println(\"No\");\\n        }\\n    }\\n}\\n", "target": "161", "substitutes": {"sc": ["osc", "ner", "ch", "fc", "mc", "nc", "sche", "sb", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "server", "anc", "ca", "SC", "se", "c", "scan", "cs", "sw", "cl", "uc", "str", "Sc", "sq", "sub", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "sl", "sp", " SC", "sch", "sh", "ec", "cur", "sem", "ser", "lc"], "n": ["f", "nan", "nd", "nm", "ner", "ne", "name", "nc", "in", "no", "nt", "count", "m", "number", "non", "l", "inn", "g", "t", "c", "d", "num", "y", "sn", "adj", "o", "j", "cn", "p", "un", "b", "x", "all", "ns", "en", "nb", "N", "len", "z", "part", "size", "k", "conn", "i", "nu", "nn", "a", "net"], "s": ["f", "ts", "string", "is", "input", "sb", "in", "aws", "sv", "gs", "m", "parts", "params", "south", "json", "si", "l", "its", "ss", "S", "g", "v", "t", "c", "your", "words", "y", "su", "ls", "es", "u", "e", "str", "js", "services", "p", "b", "stats", "ns", "tests", "ws", "sl", "sports", "os", "ins", "i", "strings", "ses", "ds", "bis", "r"], "half": ["f", "center", "side", "div", "dim", "ne", "middle", "shift", "less", "off", "Half", "length", "group", "count", "inner", "split", "total", "left", "last", "first", "d", "near", "num", "per", "fe", "ce", "batch", "width", "le", "full", "p", "third", "len", "partial", "part", "size", "quarter", "i", "la", "scale", "percent"], "t1": ["tone", "tOnce", "Tone", "s2", "t4", "ltone", "lt1", "lt2", "TOnce", "T1", "T4", "ltOnce", "sone", "s4", " tone", "s1", "T2", " tOnce", " t4"], "t2": ["ta2", "unt2", "ttii", "s2", "t02", "t4", "taii", " tSecond", "unt1", "unt02", "T02", "tt2", "tii", "T1", " tii", "ttSecond", "s02", "s1", "T2", "tt4", "taSecond", "tSecond", " t4", "ta4"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner input = new Scanner(System.in);\\n\\n        int n = input.nextInt();\\n        int X = input.nextInt();\\n\\n        int[] L = new int[n];\\n\\n        for (int i = 0; i < L.length; i++) {\\n            L[i] = input.nextInt();;\\n        }\\n        int[] D = new int[n + 1];\\n        D[0] = 0;\\n        for (int j = 1; j < D.length; j++) {\\n            D[j] = D[j - 1] + L[j - 1];\\n        }\\n        int count = 0;\\n        for (int k = 0; k < D.length; k++) {\\n            if (D[k] <= X) {\\n                count += 1;\\n            }\\n\\n        }\\n        System.out.println(count);\\n    }\\n}", "target": "130", "substitutes": {"input": ["f", "http", "list", "parse", " Input", "client", "instance", "out", "Input", "in", "context", "image", "socket", "session", "io", "flow", "select", "service", "text", "l", "upload", "IN", "null", "initial", "server", "up", "c", "scan", "form", "iterator", "forward", "inf", "reader", "request", "array", "query", "inc", "output", "buffer", "event", "source", "pull", "str", "analysis", "this", "batch", "user", "current", "iter", "system", "enter", "error", "file", "again", "view", "work", "stream", "parser", "get", "method", "a", "r"], "n": ["f", "h", "ne", "in", "no", "m", "l", "na", "v", "t", "c", "d", "num", "y", "network", "sn", "e", "o", "s", "p", "b", "x", "ns", "ln", "en", "w", "N", "M", "len", "z", " N", "Ns", "size", "nn", "r"], "X": ["G", "VALUE", "K", "I", "Z", "XL", "A", "P", "Q", "H", "S", "Y", "E", "W", "J", "F", "V", "XP", "IX", "R", "x", "C", "T", "U", "N", "M", "XXX", "Value", "MAX", " N", "XX", "DX", "ID"], "L": ["LT", "K", "EL", "I", "LE", "XL", "DL", "FL", "LD", "P", "Q", "l", "B", "UL", "Lu", "E", "Li", "Left", "Lo", "LM", "NL", "d", " l", "SL", "J", "LB", "F", "RL", "ML", "V", "BL", "LR", "LI", "LP", "Local", "C", "T", "LL", "M", "N", "IL", "LA", "LU", "dL", "OL", "O"], "i": ["f", "li", "I", "is", "di", "in", "ri", "ni", "id", "gi", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "v", "it", "ie", "d", "y", "uli", "u", "pi", "o", "e", "ii", "qi", "hi", "p", "b", "oi", "ind", "ini", "start", "z", "ci", "ip", "xi", "iu", "init", "ix", "bi"], "D": ["CD", "O", "Both", "G", "K", "DS", "I", "DM", "Z", "DL", "Di", "DB", "DT", "Del", "LD", "Count", "AD", "P", "DR", "Cloud", "Q", "DO", "Y", "Date", "DF", "Default", "DE", "E", "d", "FD", "None", "DI", "J", "MD", "V", "Product", "PD", "Do", "R", "JD", "T", "C", "DP", "N", "M", "DD", "Ds", "Part", "DC", "Distance", "ND", "DA", "ds", "Direct"], "j": ["f", "uj", "li", "obj", "h", "ch", "jj", "br", "jo", "jp", "out", "key", "m", "index", "fr", "pr", "ji", "l", "jc", "v", "g", "last", "it", "ja", "c", "ie", " dj", "rev", "d", "num", "y", "bj", "aj", "u", "e", "o", "js", "J", "ii", "adj", "p", "job", "b", "x", "w", "z", "ij", "ix", "a", "jet", "q", "r"], "count": ["f", "list", "level", "base", "data", "out", "Count", "length", "core", "id", "number", "key", "code", "index", "label", "keep", "process", "total", "last", "sum", "loop", "c", "type", "result", "num", "carry", "weight", "add", "counter", "info", "depth", "current", "child", "len", "z", "size", "work", "part", "test", "coll", "found", "check"], "k": ["f", "kid", "K", "ch", "jj", "uk", "ko", "kj", "ik", "ek", "key", "id", "m", "kick", "kn", "ck", "g", "v", "ok", "it", "c", "d", "kl", "y", "kr", "kh", "u", "o", "unk", "p", "b", "x", "ku", "kk", "ak", "sk", "ka", "ky", "kat", "z", "ks", "ki", "ke", "q", "r"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\npublic class Main\\n{\\n    static class FastReader\\n    {\\n        BufferedReader br;\\n        StringTokenizer st;\\n        public FastReader()\\n        {\\n            br = new BufferedReader(new\\n                     InputStreamReader(System.in));\\n        }\\n        String next()\\n        {\\n            while (st == null || !st.hasMoreElements())\\n            {\\n                try\\n                {\\n                    st = new StringTokenizer(br.readLine());\\n                }\\n                catch (IOException  e)\\n                {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n \\n        int nextInt()\\n        {\\n            return Integer.parseInt(next());\\n        }\\n \\n        long nextLong()\\n        {\\n            return Long.parseLong(next());\\n        }\\n \\n        double nextDouble()\\n        {\\n            return Double.parseDouble(next());\\n        }\\n \\n        String nextLine()\\n        {\\n            String str = \"\";\\n            try\\n            {\\n                str = br.readLine();\\n            }\\n            catch (IOException e)\\n            {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n \\n    public static void main(String[] args)\\n    {\\n        FastReader s=new FastReader();\\n        int d=s.nextInt();\\n        int count=0;\\n        boolean ans=false;\\n        for(int i=0;i<d;i++) {\\n        \tint x=s.nextInt();\\n        \tint y=s.nextInt();\\n        \t\\n        \tif(x==y) {\\n        \t\tcount++;\\n        \t\tif(count==3) {\\n        \t\t\tans=true;\\n        \t\t\tbreak;\\n        \t\t}\\n        \t}\\n        \telse {\\n        \t\tcount=0;\\n        \t}\\n        }\\n        if(ans==true) \\n            System.out.println(\"Yes\");\\n        else\\n        \tSystem.out.println(\"No\");\\n    }\\n}", "target": "215", "substitutes": {"br": ["obj", "bf", "tr", "ch", "abs", "bh", "ler", "ctr", "db", "ab", "pl", "bl", "err", "cro", "bt", "bro", "fr", "bc", "pr", "orb", "arr", "dr", "ob", "mr", "bar", "buf", "form", "serv", "rb", "gr", "hr", "img", "ur", "bb", "iter", "p", "b", "cr", "src", "cb", "ocr", "ber", "sr", "jar", "sp", "bs", "BR", "cur", "bridge", "lr", "be", "Br", "browser", "r"], "st": ["store", "nd", "sta", "inst", "string", "rt", "St", "stri", "sb", "nt", "bl", "bt", "ut", "fr", "pr", "l", "ist", "ss", "ost", "est", "t", "rest", "ST", "se", "first", "sw", "sn", "ft", "ace", "e", "pt", "sts", "ld", "stop", "p", "sa", "stack", "src", "ste", "ast", "pe", "sr", "start", "sc", "sl", "sp", "struct", "ct", "const", "be", "std", "Str", "sth", "a", "r"], "str": ["f", "sta", "tr", "div", "exp", "h", "inst", "string", "data", "stri", "err", "code", "inner", "fr", "pr", "n", "dr", "arr", "text", "v", "t", "c", "doc", "cl", "pos", "u", "e", "url", "pt", "j", "hr", "iter", "p", "b", "STR", "cr", "enc", "char", "sl", "temp", "z", "sp", "line", "strings", "Str", "r"], "s": ["f", "ts", "http", "h", "is", "abs", "sb", "in", "ssl", "sym", "sv", "gs", "n", "si", "l", "its", "ss", "ops", "server", "g", "v", "ches", "t", "cs", "c", "se", "ls", "serv", "es", "u", "e", "o", "js", "qs", "services", "xs", "p", "b", "sets", "ns", "sync", "w", "slice", "sf", "sr", "ws", "sl", "bs", "os", "ins", "us", "strings", "ses", "rs", "fs", "ds", "bis", "r"], "d": ["cd", "f", "h", "div", "dim", "sd", "data", "di", "dt", "dos", "id", "m", "n", "dr", "l", "t", "dat", "c", "D", "dx", "dl", "e", "j", "ld", "dy", "depth", "dc", "p", "b", "ind", "dose", "dd", "md", "z", "dir", "ds"], "count": ["list", "h", "ch", "allow", "base", "call", "Count", "length", "group", "id", "code", "number", "key", "index", "n", "total", "patch", "sum", "c", "type", "max", "weight", "counter", "info", "cache", "depth", "p", "b", "ind", "child", "start", "q", "len", "col", "z", "size", "part", "coll", "parent", "force"], "i": ["li", "fi", "I", "di", "ni", "gi", "index", "ai", "io", "n", "si", "ui", "phi", "v", "c", "ie", "zi", "u", "pi", "e", "j", "info", "ii", "qi", "p", "ti", "b", "ind", "hi", "slice", "ini", "z", "ci", "mi", "xi", "ip", "iu", "ix", "chi", "multi", "my"], "x": ["f", "xy", "h", "xx", "X", "id", "m", "index", "n", "l", "v", "t", "c", "num", "dx", "ax", "ex", "u", "e", "o", "j", "xs", "p", "b", "w", "xxx", "rx", "z", "xi", "ix", "xp"], "y": ["f", "xx", "oy", "id", "m", "index", "n", "l", "Y", "v", "t", "c", "vy", "ny", "u", "e", "o", "j", "dy", "ii", "p", "b", "ind", "w", "yi", "z", "k", "yy", "ix", "q"], "ans": ["nan", "ANS", "cons", " scans", "ann", "aned", "anon", "ays", "ani", "ant", "leans", "annot", "amps", "AN", " means", "ents", "cs", "ads", "aning", "can", "lan", "urs", "ls", "ions", "nas", "aus", "as", "atan", "An", "san", "cas", "ants", "ns", "vers", " ang", " na", "tan", "sk", " spans", "acs", "eps", "asin", "os", "ins", "ks", "ras", "an", "ians", "ars", "span", "ds", "ana", "ons"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner scn = new Scanner(System.in);\\n        int n = scn.nextInt();\\n        char[] a = scn.next().toCharArray();\\n        for(char tmp : a) {\\n            int num = 0;\\n            if((char)(tmp + n) > 'Z'){\\n                num = n - 26;\\n                System.out.print((char)(tmp + num));\\n            }else {\\n                System.out.print((char) (tmp + n));\\n            }\\n        }\\n    }\\n}", "target": "13", "substitutes": {"scn": ["scner", "rcner", "scns", " scN", "SCrn", "SCN", "rcrn", "scN", "SCner", " scrn", "Scn", "SCn", " scner", "rcn", "ScN", "scrn", "scr", "Scrn", "SCr", "rcr", " scns", "SCns", "Scner", "Scns", "Scr", " scr"], "n": ["f", "ne", "name", "nc", "in", "nt", "m", "l", "t", "r", "c", "d", "y", "sn", "e", "o", "j", "np", "cn", "p", "b", "x", "all", "ns", "ln", "en", "nb", "w", "N", "len", "z", "nr", "k", "size", "i", "init", "nu", "node", "nn", "fn", "net"], "a": ["f", "ama", "am", "data", "ga", "A", "ab", "ma", "m", "ao", "l", "ea", "aw", "ba", "ca", "area", "c", "aa", "asa", "ava", "d", "y", "array", "pa", "u", "aaa", "fa", "sa", "p", "b", "as", "za", "ha", "w", "au", "ata", "i", "an", "ae", "alpha"], "tmp": ["obj", "class", "name", "treatment", "string", "data", "prefix", "nom", "nt", "proc", "zip", "text", "cod", "app", "tab", "buf", "pointer", "mp", "pos", "array", "su", "next", "txt", "source", "rb", "nw", "dest", " src", "cache", "img", "np", "loc", "fp", "p", "amp", "sup", "src", "nb", "kk", "start", "pp", "ptr", "temp", "part", "addr", "cp", "test", "uni", "const", "cur", "yy", "beta", "cmp", "nn", "func", "ppa", "uu"], "num": ["nm", "name", "miss", "off", "nc", "nom", "in", "no", "id", "number", "index", "non", "unit", "sum", "con", "form", "cat", "bin", "su", "pos", "NUM", "inc", "digit", "info", "loc", "offset", "un", "x", "row", "nb", "Num", "coord", "len", "eno", "col", "common", "mom", "nr", "temp", "umi", "mn", "uni", "nu", "init", "node", "nn", "fn", "um", "span"]}}
{"code": "import java.util.*;\\nclass Main {\\n  public static void main(String[] args) {\\n     Scanner scan = new Scanner(System.in);\\n    int n= scan.nextInt();\\n    ArrayList<Integer> a = new ArrayList<>();\\n    int i = 1 ;\\n    while(true){\\n      \\n      \\n      //System.out.println(n);\\n      if(a.contains(n)){\\n        System.out.println(i);\\n        break;\\n      }else{\\n        a.add(n);\\n      }\\n      \\n      if( n %2 == 0){\\n        n = fe(n);\\n      }else{\\n        n = fo(n);\\n      }\\n      i++;\\n    }\\n    \\n    \\n  }\\n  \\n  static int fe(int n){\\n    return n/2 ;\\n  }\\n  \\n  static int fo(int n){\\n    return 3*n + 1 ; \\n  }\\n}\\n", "target": "166", "substitutes": {"scan": ["store", " Scan", "stat", "parse", "ner", "skip", "car", "ann", "watch", " scanner", "in", "pan", "search", "ai", "ss", "na", "con", "se", "cat", "er", "can", "reader", "sn", "read", "connect", "system", "all", "Scan", "san", "sync", "sr", "sc", "win", "sys", "parser", "an", "walk", "look", "get", "nn", "run", "clean", "sign", "r", "span"], "n": ["f", "ne", "name", "nc", "in", "nt", "ni", "m", "l", "g", "t", "c", "num", "sn", "j", "p", "b", "ln", "ns", "nb", "N", "pn", "z", " N", "k", "init", "nn", "net"], "a": ["f", "Array", "data", "ga", "A", "ai", "ac", "t", "c", "ar", "array", "aaa", "p", "as", "b", "access", "all", "sa", "w", "ata", "tta", "an", "alpha", "span"], "i": ["f", "li", "I", "is", "in", "ni", "id", "count", "m", "index", "ai", "si", "v", "it", "c", "u", "pi", "j", "ii", "p", "ti", "b", "ci", "k", "xi", "init", "ix", "bi"]}}
{"code": "\\nimport java.util.Scanner;\\n\\n/**\\n *\\n * @author cs18097\\n */\\npublic class Main {\\n\\n    /**\\n     * @param args the command line arguments\\n     */\\n    public static void main(String[] args) {\\n        // TODO code application logic here\\n        Scanner sc = new Scanner(System.in);\\n        int min = sc.nextInt();\\n        int max = 0;\\n        for (int i = 0; i < 4; i++) {\\n            max = sc.nextInt();\\n        }\\n        int k = sc.nextInt();\\n        if (k < max - min) {\\n            System.out.print(\":(\");\\n        } else {\\n            System.out.print(\"Yay!\");\\n        }\\n\\n    }\\n\\n}\\n", "target": "66", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String args[]){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint count = 1;\\n\t\tint max = 0;\\n\t\tString[] S = new String[N];\\n\t\tfor(int i = 0;i < N;i++){\\n\t\t\tS[i] = sc.next();\\n\t\t}\\n\t\tArrays.sort(S);\\n\t\tMap<String,Integer> map = new TreeMap<>();\\n\t\tfor(int i = 0;i < N - 1;i++){\\n\t\t\tif(S[i + 1].equals(S[i])){\\n\t\t\t\tcount++;\\n\t\t\t\tif(i == N - 2){\\n\t\t\t\t\tmap.put(S[i],count);\\n\t\t\t\t\tmax = Math.max(max,count);\\n\t\t\t\t}\\n\t\t\t}else{\\n\t\t\t\tmap.put(S[i],count);\\n\t\t\t\tmax = Math.max(max,count);\\n\t\t\t\tcount = 1;\\n\t\t\t\tif(i == N - 2){\\n\t\t\t\t\tmap.put(S[i + 1],count);\\n\t\t\t\t\tmax = Math.max(max,count);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tfor(String key : map.keySet()){\\n\t\t\tif(map.get(key) == max){\\n\t\t\t\tSystem.out.println(key);\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "235", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "st", "out", "sche", "sb", "search", "esc", "bc", "asc", "pc", "ss", "anc", "scope", "SC", "se", "c", "scan", "sw", "cs", "cl", "uc", "ng", "Sc", "system", "sq", "sci", "cr", "rc", "cer", "sr", "sp", "ci", " SC", "sch", "sh", "cur", "sem", "ser"], "N": ["CNN", "K", "Len", "I", "L", "Z", "Size", "Sn", "X", "Count", "Node", "P", "Q", "NS", "H", "n", "Y", "B", "IN", "D", "Network", "network", "F", "V", "No", "R", "Net", "C", "T", "Num", "U", "M", "Max", "NA", "Ne", "NR", "Part", "size", "Ns", "ND", "NT", "O"], "count": ["f", "content", "cond", "list", "ch", "name", "base", "act", "call", "in", "Count", "length", "id", "code", "number", "keep", "index", "active", "n", "ac", "total", "process", "order", "self", "min", "sum", "more", "conf", "c", "type", "cat", "weight", "counter", "batch", "cache", "info", "add", "depth", "current", "s", "p", "b", "_", "all", "child", "start", "len", "pool", "char", "col", "common", "part", "size", "test", "coll", "found", "check", "comp", "cast", "parent"], "max": ["value", "name", "plus", "co", "call", "no", "number", "default", "cost", "total", "patch", "pop", "conf", "c", "form", "ax", "power", "depth", "hash", "size", "maximum", "average", "now", "scale", " biggest", "act", "ma", "limit", "active", "unique", "height", "min", "cat", "use", "cycle", "dot", "cache", "mod", "strip", "cr", "MAX", " MAX", "part", "work", "largest", "alpha", "force", "range", "out", "id", "index", "step", "last", "end", "first", "chain", "num", "always", "show", "sync", "top", "Max", "comb", "cast", "star", "parent", "q", "rand", "parse", "list", "div", "wrap", "length", " Max", "sum", "rest", "pointer", "point", "x", "w", "box", "start", "worst", "pad", "right", "rank"], "S": ["Ps", "G", "K", "DS", "I", "Session", "L", "Si", "IDS", "Source", "Files", "A", "Socket", "X", "Services", "Is", "P", "States", "NS", "SN", "Sync", "Sample", "B", "SH", "BS", "Windows", "RS", "Es", "Settings", "D", "Service", "VS", "Site", "OS", "Su", "F", "V", "s", "R", "IS", "T", "SS", "TS", "U", "SE", "M", "C", "SU", "Changes", "SR", "Space", "Ds", "Sl", "Part", "Ns", "PS", "WS", "GS", "Array", "SI", "JS"], "i": ["f", "li", "h", "name", "I", "mini", "is", "di", "iv", "in", "anti", "ri", "ni", "cli", "id", "gi", "index", "inner", "ai", "image", "io", "n", "si", "ori", "ui", "mu", "phi", "v", "it", "diff", "ie", "y", "uri", "source", "u", "pi", "o", "e", "j", "info", "ii", "api", "qi", "field", "p", "ti", "b", "x", "oi", "hi", "ind", "slice", "sup", "ini", "start", "yi", "ci", "part", "mi", "ip", "iu", "xi", "init", "chi", "ix", "multi", "bi"], "map": ["parse", "list", "shape", "data", "co", "one", "me", "group", "replace", "match", "m", "code", "move", "change", "block", "build", "address", "scope", "order", "app", "maps", "up", "meta", "min", "bar", "model", "master", "complete", "ap", "use", "array", "ge", "mp", "mer", "per", "batch", "age", "cache", "pack", "open", "space", "error", "down", "hash", "set", "view", "table", "copy", "line", "cap", "work", "apper", "comb", "pad", "create", "mate", "lock", "dict", "module", "MAP", "scale"], "key": ["f", "value", "KEY", "list", "val", "keys", "name", "path", "string", "base", "data", "co", "match", "id", "code", "index", "service", "text", "block", "ray", "type", "ie", "entry", "ce", "ge", "ry", "str", "cache", "item", "field", "link", "p", "point", "x", "row", "child", "box", "hash", "Key", "char", "set", "part", "k", "rule", "connection", "ip", "lock", "q"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\nclass Main{\\n  static boolean found = false;\\n  public static void main(String[] args) throws IOException {\\n    PrintWriter out = new PrintWriter(System.out);\\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    // StringTokenizer st  = new StringTokenizer(br.readLine());\\n\\n    String s = br.readLine();\\n\\n    long sum = 0;\\n    for (int i=0; i<s.length(); i++) {\\n      sum+= Character.getNumericValue(s.charAt(i));\\n      sum = sum%9;\\n    }\\n    if (sum%9==0) {\\n      out.println(\"Yes\");\\n    }\\n    else {\\n      out.println(\"No\");\\n    }\\n    out.close();\\n  }\\n\\n  \\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n", "target": "93", "substitutes": {"out": ["f", "obj", "arg", "name", "string", "input", "console", "in", "log", "err", "cli", "m", "io", "exec", "IN", " Out", "print", "t", "result", "bin", "write", "OUT", "reader", "STDOUT", "output", "buffer", "ex", "source", "this", "str", "o", "user", "info", "p", "x", "error", "Out", "w", "res", "println", "temp", "writer", "png", "outs"], "br": [" tr", "tr", "ered", "ler", " dr", "err", "dr", " cr", "mr", "bin", "rb", "gr", "hr", "ra", "ry", "src", " ab", " er", " bis", " intr", " ir", "rr", "rx", " barr", " ar", "BR", " err", " sr"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String S = sc.next();\\n    char h[] = new char[4];\\n    for(int i=0;i<4;i++){\\n      h[i] = S.charAt(i);\\n    }\\n    String answer = \"No\";\\n    Arrays.sort(h);\\n    if(h[0]==h[1]&&h[1]!=h[2]&&h[2]==h[3]){\\n      answer = \"Yes\";\\n    }\\n    System.out.println(answer);\\n    \\n  }\\n  \\n  //\u6700\u5927\u516c\u7d04\u6570\u30fb\u6700\u5c0f\u516c\u500d\u6570\uff08\u30bb\u30c3\u30c8\u3067\u4f7f\u3046\uff09\\nstatic int gcd (int a, int b) {return b>0?gcd(b,a%b):a;}\\nstatic int lcm (int a, int b) {return a*b/gcd(a,b);}\\n\\n\\n//\u7d20\u6570\u5224\u5b9a\\nstatic boolean isPrime (int n) {\\n\tif (n==2) return true;\\n\tif (n<2 || n%2==0) return false;\\n\tdouble d = Math.sqrt(n);\\n\tfor (int i=3; i<=d; i+=2) if(n%i==0){return false;}\\n\treturn true;\\n}\\n\\n\\n//\u500d\u6570\u5224\u5b9a\uff0810\u9032\u6570\u4ee5\u5916\u306e\u3068\u304d\u306b\u6709\u7528\uff09\\nstatic boolean isMultiple (String s, int base, int m) {\\n\tint temp = 0;\\n\tfor (int i=0; i<s.length(); i++) {\\n\t\ttemp = (temp*base+Character.getNumericValue(s.charAt(i)))%m;\\n\t}\\n\tif (temp==0) {return true;}\\n\treturn false;\\n}\\n\\n\\n//\u968e\u4e57\\nstatic long factorial (int i) {\\n\tif (i==1) {return 1;}\\n\telse {return i*factorial(i-1);}\\n}\\n\\n\\n//\u9032\u6570\u5909\u63db\\nstatic String toNbase (String sm, int m, int n) {\\n\treturn Long.toString(Long.parseLong(sm,m),n);\\n}\\n  \\n}", "target": "33", "substitutes": {"sc": ["ner", "osc", "ch", " Sc", "nc", "nt", "proc", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "sec", "scope", "g", "SC", "se", "c", "scan", "sw", "uc", "cl", "spec", "acc", "Sc", "s", "system", "sub", "sci", "cr", "ocr", "src", "sel", "rc", "cer", "enc", "sp", " SC", "stream", "sh", "ec", "desc", " scr"], "S": ["SA", "G", "I", "L", "Si", "A", " s", "Socket", "SO", "P", "SN", "NS", "H", "SAM", "SH", "SF", "RS", "As", "SC", "D", "ST", "SER", "SL", "F", "V", "s", "IS", "R", "T", "SS", "TS", "U", "SE", "N", "M", "SU", "SR", "SM", "GS", "SI"], "h": ["f", "http", "ch", "hs", "ph", "ssh", "path", "ih", "bh", "oh", "id", "m", "ith", "hd", "H", "n", "l", "he", "home", "g", "v", "ho", "t", "ash", "c", "d", "ah", "y", "how", "u", "e", "o", " H", "s", "p", "b", "x", "rh", "ha", "en", "w", "hash", "history", "hm", "gh", "z", "k", "work", "ht", "sh", "uh", "a", "prev", "q", "r"], "i": ["f", "eni", "li", "fi", "I", "di", "in", "ri", "id", "key", "m", "index", "gi", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "t", "c", "ie", "d", "y", "u", "e", "o", "pi", "info", "j", "ii", "qi", "s", "p", "ti", "b", "x", "oi", "hi", "slice", "w", "abi", "ini", "z", "ci", "part", "k", "xi", "chi", "multi", "ix", "bi", "my"], "answer": ["f", "value", "cover", "name", "term", "string", "issue", "format", "prefix", "help", "expression", "search", "default", "n", " answers", "text", "message", "close", "address", "order", " answered", "avoid", "result", "support", "complete", "empty", "update", "su", "ah", "array", "next", "Answer", "word", "reply", "question", "yes", "archive", "status", "blank", "answered", "response", "knowledge", " answering", "maybe", "better", "correct", "average", "ask", "a", "accept", "evidence", "q", "r"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.StringTokenizer;\\nimport java.io.BufferedReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        MyScanner in = new MyScanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, MyScanner in, PrintWriter out) {\\n            String S = in.next();\\n            List<Character> acgt = new ArrayList<>(Arrays.asList('A', 'C', 'G', 'T'));\\n            int ans = 0;\\n            int cnt = 0;\\n            for (int i = 0; i < S.length(); i++) {\\n                Character c = S.charAt(i);\\n                if (acgt.contains(c)) {\\n                    cnt++;\\n                } else {\\n                    ans = Math.max(ans, cnt);\\n                    cnt = 0;\\n                }\\n            }\\n            ans = Math.max(ans, cnt);\\n            out.println(ans);\\n        }\\n\\n    }\\n\\n    static class MyScanner {\\n        private BufferedReader in;\\n        private StringTokenizer st;\\n\\n        public MyScanner(InputStream stream) {\\n            in = new BufferedReader(new InputStreamReader(stream));\\n        }\\n\\n        public String next() {\\n            while (st == null || !st.hasMoreTokens()) {\\n                try {\\n                    String rl = in.readLine();\\n                    if (rl == null) {\\n                        return null;\\n                    }\\n                    st = new StringTokenizer(rl);\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n    }\\n}\\n\\n", "target": "100", "substitutes": {"inputStream": ["InputStream", "outputStreamer", "inputStreamer", "inputForm", " inputForm", "outputSteam", " inputSteam", "outputForm", "InputForm", "referenceSteam", "referenceStream", "referencestream", "InputStreamer", "Inputstream", "referenceStreamer", "InputSteam", " inputstream", "outputstream", "inputstream", "inputSteam"], "outputStream": ["responsestream", "outputSteam", "OutputSteam", "inputSteam", "Outputstream", "outputStreamer", "inputStreamer", "outputstream", "inputstream", "responseStreamer", "OutputStreamer", "OutputStream", "responseStream", "responseSteam"], "in": ["f", "arg", "lin", "err", "image", "inner", "l", "t", "cl", "read", "inc", "re", "url", "en", "again", "init", "gin", "run", "a", "val", "h", "cin", "impl", "ai", "self", "min", "isin", "request", "resource", "source", "ex", "inside", "ini", "sin", "socket", "input", "din", "id", "thin", "ino", "IN", "inn", "con", "reader", "kin", "this", "o", "e", "s", "as", "p", "b", "rin", "slice", "vin", "login", "win", "connection", "In", "on", "path", "data", "pin", "io", "nin", "n", "bin", "d", "info", "user", "str", "at", "x", "ins", "inf", "r"], "out": ["exp", "co", "off", "call", "err", "inner", "timeout", "flow", "server", "ext", "inc", "to", "down", "again", "temp", "outer", "init", "outs", "exit", "string", "writing", "doc", "can", "max", "ex", "cache", "boot", "Out", "copy", "part", "gen", "client", "ch", "log", "null", "up", "print", "page", "OUT", "array", "this", "o", "s", "job", "b", "file", "line", "writer", "connection", "parent", "net", "obj", "list", "data", "group", "io", "object", "window", "exec", "process", "v", "sum", "write", "bin", "output", "word", "user", "point", "x", "error", "w", "problem", "pool", "table", "ins", "conn", "r"], "solver": ["Solution", "sour", "sver", "Solver", "solution", "ssolver", "assolver", "ssolve", "assolve", "solve", "Sver", "ssour", "assour", "ssolution", " sver", " solution", "Solve", "ssver", "assolution", "Sour", " solve"], "testNumber": [" testLength", " trialLength", "caseLength", "casenumber", "trialLength", " testClass", " trialnumber", "trialClass", " testnumber", "caseClass", "trialnumber", " trialClass"], "S": ["G", "SA", "I", "L", "Si", "AS", "A", " s", "SO", "P", "NS", "SN", "Sample", "B", "SH", "BS", "RS", "As", "SC", "VS", "Service", "FS", "OS", "Su", "V", "s", "IS", "R", "C", "T", "SS", "U", "SE", "N", "TS", "The", "SU", "M", "Single", "SM", "CSS", "WS", "GS", "Array", "SI", "O"], "acgt": ["acNT", "ACht", "accgd", "ACgt", " acft", "Acgt", "ACGT", "acht", "accgt", "Acht", "acgd", "accGT", " acht", "ACgd", "AcNT", "Acft", "acft", " acGT", "Acgd", "accNT", "ACNT", "AcGT", "acGT", "ACft"], "ans": ["ases", "grades", "ANS", "cons", " scans", "ats", "ann", "aned", "aid", "anon", "ays", "anas", "vs", "leans", "ons", "amps", "AN", "annels", "ss", "na", "anc", "aces", "ches", "cus", "cs", "ents", "ads", "can", "lan", "ls", "ions", "ids", "nas", "aus", "asts", "xs", "anners", "s", "as", "opens", "ns", "anges", "olds", "cas", "ants", "ares", "vers", "atan", "eps", "os", "ks", "ins", "cats", "ras", "an", "outs", "ians", "ars", "sex", "ams", "ds", "ana", "anned", "acts"], "cnt": ["dcct", " cant", "acNT", "Cnn", "acant", "lcnt", "cnc", " cnc", "icNT", "cnn", "icnt", "acnc", "cno", "acent", "ccount", "Cct", "lcct", "dcno", "account", "Cnt", " cno", "lcnn", " cNT", "cct", "cant", " crt", "ecNT", "Cant", "dcrt", " cnn", "ecct", "Ccount", " cent", "Crt", "cNT", "ecnn", " cct", "cent", "dcnt", "icnc", "ecant", "icent", "CNT", "ecnt", "acnt", "Cno", "lcNT", " ccount", "crt"], "i": ["f", "eni", "li", "I", "vi", "di", "ri", "ni", "id", "gi", "index", "ai", "io", "ji", "n", "si", "ori", "ui", "mu", "phi", "v", "it", "ie", "y", "zi", "uri", "pi", "u", "o", "j", "info", "ii", "qi", "ti", "hi", "oi", "abi", "ini", "yi", "z", "ci", "ip", "iu", "xi", "ix", "multi", "bi"], "c": ["f", "ch", "vc", "nc", "cy", "code", "cc", "pc", "n", "character", "l", "ac", "g", "v", "cat", "cl", "ce", "u", "e", "o", "s", "p", "b", "x", "C", "cr", "ic", "rc", "char", "sc", "cu", "col", "ci", "k", "ct", "arc", "ec", "lc", "a", "r"], "st": ["store", "nd", "sta", "sle", "inst", "stal", "rt", "St", "stri", "sb", "put", "nt", "bl", "bt", "station", "ut", "l", "ist", "ost", "est", "rest", "end", "ST", "t", "style", "se", "fe", "sty", "sn", "ft", "str", "et", "pt", "sts", "stop", "stage", "ld", "sa", "ust", "stack", "cr", "sync", "ast", "pe", "start", "sc", "th", "sl", "sp", "struct", "ct", "sh", "lt", "mt", "const", "be", "stress", "std", "ste", "sth", "r"], "stream": ["channel", "client", "path", "string", "plus", "data", "raw", "single", "input", "console", "ssl", "context", "document", "message", "null", "server", "loader", "port", "model", "form", "sw", "reader", "feed", "resource", "buffer", "source", "system", "stack", "row", "down", "file", "w", "response", "pool", "trans", "view", "Stream", "writer", "engine", "connection", "body", "lock", "socket"], "rl": ["rt", "rg", "route", "abl", " RL", "pl", "lf", "arl", "fr", "l", "vl", "ll", "rol", " rul", "rel", "mr", "vr", "lv", "cl", "kl", "NL", "wl", "kr", "ls", "dl", "il", "rb", "lb", "ruby", "RL", "lp", "R", "tl", "rh", "ln", "nl", "rc", "ring", "sr", "hl", "sol", "sl", "rr", "line", "fl", "rs", "lr", "la", "lc", "r"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args)throws IOException {\\n\t\tFastReader sc = new FastReader();\\n\t\tPrintWriter pw = new PrintWriter(System.out);\\n\t\tint n = sc.nextInt();\\n\t\tint m = (int)Math.ceil(n * 1.0 / 1000.0);\\n\t\tSystem.out.println(1000 * m - n);\\n\\n\t}\\n}\\n\\n\\n\\n\\n\\nclass FastReader {\\n\tBufferedReader br;\\n\tStringTokenizer st;\\n\\n\tpublic FastReader() {\\n\t\tbr = new BufferedReader(new\\n\t\t                        InputStreamReader(System.in));\\n\t}\\n\\n\tString next() {\\n\t\twhile (st == null || !st.hasMoreElements()) {\\n\t\t\ttry {\\n\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t} catch (IOException  e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t}\\n\t\treturn st.nextToken();\\n\t}\\n\\n\tint nextInt() {\\n\t\treturn Integer.parseInt(next());\\n\t}\\n\\n\tlong nextLong() {\\n\t\treturn Long.parseLong(next());\\n\t}\\n\\n\tdouble nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n\\n\tString nextLine() {\\n\t\tString str = \"\";\\n\t\ttry {\\n\t\t\tstr = br.readLine();\\n\t\t} catch (IOException e) {\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t\treturn str;\\n\t}\\n}", "target": "184", "substitutes": {"sc": ["osc", "ch", "exp", "mc", " Sc", "nc", "cv", "cc", "bc", "esc", "asc", "pc", "si", "ss", "sec", "scope", "ca", "SC", "c", "cs", "scan", "sw", "cl", "uc", "cus", "reader", "spec", "acc", "Sc", "s", "sq", "sub", "dc", "sci", "cr", "src", "sync", "rc", "sr", "sp", "ci", " SC", "sh", "desc", "lc"], "pw": ["spw", "pws", "ppws", " psw", "psw", "spsw", "ppW", "pW", "ppsw", "spW", " pws", "ppw", " pW", "spws"], "n": ["f", "nm", "h", "ne", "none", "nc", "nt", "ni", "number", "l", "na", "v", "t", "c", "d", "num", "sn", "rn", "u", "e", "o", "j", "cn", "s", "dn", "p", "un", "b", "x", "ns", "ln", "nb", "w", "N", "len", "z", "k", "mn", "conn", "i", "nor", "nu", "nn"], "m": ["f", "nm", "bm", "h", "wm", "in", "man", "l", "mu", "g", "v", "c", "d", "ms", "num", "fm", "cm", "u", "e", "o", "j", "mm", "s", "dn", "p", "b", "om", "ln", "nb", "dm", "N", "M", "pm", "md", "z", "k", "mn", "i", "gm", "km"], "br": ["bm", "obj", "tr", "ch", "rt", "jp", "sb", "ler", "bh", "db", "cro", "ab", "bl", "err", "pl", "bt", "bro", "fr", "bc", "pr", "arr", "dr", "mr", "rest", "bar", "vr", "buf", "rb", "hr", "ur", "bb", "rib", "iter", "p", "b", "cr", "src", "cb", "ber", "sr", "bd", "sp", "BR", "bsp", "cur", "bridge", "lr", "browser", "Br", "be", "r", "rob"], "st": ["store", "nd", "sta", "cont", "inst", "string", "St", "stri", "sb", "bl", "fr", "ut", "pr", " est", "l", "ist", "ss", "ost", "est", "t", "rest", "ST", "se", "sw", "cl", "d", "fe", "ft", "e", "pt", "sts", "ld", "p", "ust", "b", "x", "stack", "sa", "cr", "src", "ste", "ast", "pe", "sr", "sl", "sp", "struct", "ct", "sh", "be", "std", "Str", "sth", "r"], "str": ["f", "obj", "tr", "div", "exp", "name", "string", "data", "err", "bl", "id", "fr", "pr", "arr", "dr", "text", "l", "pre", "v", "t", "c", "result", "doc", "style", "pos", "hr", "url", "pt", "j", "s", "p", "b", "STR", "pass", "sr", "char", "sl", "z", "sp", "line", "Str", "r"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\t\\n\\n\tprivate static void solve(){\\n\t\t//Implement solution here.\\n\t\tint N = ni();\\n\t\tint mod = N % 1000;\\n\t\tif(mod == 0) {\\n\t\t\tSystem.out.println(0);\\n\t\t} else {\\n\t\t\tSystem.out.println(1000 - mod);\\n\t\t}\\n\t\t\\n\t}\\n\\n\t//Switch input source (stdin/file)\\n\tprivate static BufferedReader br;\\n\tpublic static void main(String[] args){\\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString debugDataPath = System.getenv(\"DD_PATH\");        \\n\t\tif(debugDataPath != null){\\n\t\t\ttry{\\n\t\t\t\tbr = new BufferedReader(new InputStreamReader(new FileInputStream(new File(debugDataPath))));\\n\t\t\t}catch(Exception e){\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\tboolean hasNext = true;\\n\t\twhile(hasNext){\\n\t\t\tsolve();\t\\n\t\t\ttry{\\n\t\t\t\tbr.mark(1);\\n\t\t\t\tif(br.read() > 0){\\n\t\t\t\t\tbr.reset();\t\t\t\\n\t\t\t\t\tSystem.out.println(\"---\");\\n\t\t\t\t} else {\\n\t\t\t\t\thasNext = false;\\n\t\t\t\t}\\n\t\t\t}catch(Exception e){\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t} \\n\t\t}\\n\t}\\n\\n\t//Input read utility\\n\tprivate static StringTokenizer tokenizer = null;\\n\tpublic static String next() {\\n\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\ttokenizer = new StringTokenizer(br.readLine());\\n\t\t\t} catch (Exception e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn tokenizer.nextToken();\\n\t}\\n\t//Get next single int\\n\tprivate static int ni() {\\n\t\treturn Integer.parseInt(next());\\n\t}\\n\t//Get next single long\\n\tprivate static long nl() {\\n\t\treturn Long.parseLong(next());\\n\t}\\n\t//Get next single double\\n\tprivate static double nd() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n\t//Get next int array from one line\\n\tprivate static int[] na(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = ni();\\n\t\treturn a;\\n\t}\\n\t//Get next char array from one line\\n\tprivate static char[] ns() {\\n\t\treturn next().toCharArray();\\n\t}\\n\t//Get next long array from one line\\n\tprivate static long[] nal(int n) {\\n\t\tlong[] a = new long[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = nl();\\n\t\treturn a;\\n\t}\\n}\\n", "target": "184", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint a = scan.nextInt();\\n\t\tint b = scan.nextInt();\\n\t\tint c = scan.nextInt();\\n\t\tint d = scan.nextInt();\\n\t\tint[] alice = new int[101];\\n\t\tint[] bob = new int[101];\\n\\n\t\tfor (int i = a + 1; i <= b; i++) {\\n\t\t\talice[i] = 1;\\n\t\t}\\n\t\tfor (int i = c + 1; i <= d; i++) {\\n\t\t\tbob[i] = 1;\\n\t\t}\\n\t\tint ans = 0;\\n\t\tfor (int i = 0; i <= 100; i++) {\\n\t\t\tif (alice[i] == 1 && bob[i] == 1) {\\n\t\t\t\tans++;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(ans);\\n\\n\t}\\n\\n}", "target": "47", "substitutes": {"scan": ["gen", "parse", "http", "ner", "skip", "ann", "watch", " scanner", "out", "in", "pan", "fan", "chan", "search", "pin", "ignore", "report", "n", "l", "na", "se", "cat", "can", "reader", "plan", "kin", "ban", "query", "read", "connect", "iter", "all", "ln", "Scan", "san", "nl", "en", "sync", "slice", "see", "wan", "sc", "util", "conn", "an", "walk", "look", "nn", "rank", "clean", "sign", "r", "span"], "a": ["f", "base", "am", "A", "ab", "ad", "m", "ai", "n", "ea", "l", "ac", "da", "area", "ca", "aa", "asa", "y", "aj", "va", "u", "e", "af", "api", "at", "p", "sa", "fa", "au", "ak", "art", "an", "ada", "ae", "alpha"], "b": ["f", "bf", "h", "sb", "db", "ab", "ub", "bc", "bur", "n", "l", "B", "wb", "ob", "g", "v", "ba", "fb", "y", "rb", "u", "e", "lb", "j", "bb", "p", "x", "nb", "cb", "w", "ib", "bs", "bd", "be", "bi", "eb", "r"], "c": ["f", "cd", "h", "ch", "in", "cy", "cc", "n", "l", "ac", "g", "v", "ca", "cs", "uc", "y", "u", "e", "o", "j", "cn", "s", "dc", "p", "x", "C", "cb", "w", "cu", "sc", "z", "ci", "k"], "d": ["f", "cd", "h", "dt", "ad", "n", "l", "df", "g", "da", "t", "D", "dx", "u", "e", "o", "j", "ld", "dy", "s", "dc", "p", "dn", "x", "w", "du", "dd", "z", "k", "ded", "ds", "r"], "alice": ["allie", "luce", "lce", "eluce", "allice", "elie", " alence", " alace", "elace", " aluce", "allce", "aluce", "lice", "alace", "lence", "allace", " alie", "alie", "alence", "allence", "elce", "elence", "lace", "elice", "alce"], "bob": ["blb", "blab", " bobs", "Bb", "lore", "abab", "Bobe", "ambobby", "obock", "bore", "bobs", " bore", "obob", "abob", " bobe", "bobe", "lob", "obobs", " bab", "ambobs", "bab", "ambob", "ambock", " bock", "Bab", "bb", "abub", " bobby", "Bob", "blob", " bub", " bb", "obobby", "abore", "bobby", "lub", "bock", "lab", "blobe", "bub"], "i": ["f", "eni", "li", "fi", "name", "I", "is", "di", "in", "ri", "ni", "cli", "gi", "id", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "ie", "y", "zi", "uri", "u", "e", "pi", "j", "info", "o", "ii", "api", "qi", "ei", "ti", "hi", "oi", "x", "p", "abi", "ini", "start", "yi", "z", "ci", "mi", "iu", "xi", "ip", "init", "ix", "multi", "chi", "bi", "lc", "ki"], "ans": ["runs", "ations", "cons", "ANS", " scans", "ats", "ann", "aned", "reads", "anas", "vs", "ons", "annot", "amps", "ss", "AN", "na", "anc", "types", "aces", "cus", "cs", "ents", "lan", "features", "ls", "es", "ions", "nas", "ids", "ens", "asts", "s", "offs", "as", "x", "ns", "cas", "ants", "sk", "eps", "os", "ins", "ks", "ras", "ends", "an", "outs", "ars", "ds", "ana", "acts"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int W = sc.nextInt();\\n        int H = sc.nextInt();\\n        int x = sc.nextInt();\\n        int y = sc.nextInt();\\n        int r = sc.nextInt();  \\n        if(x - r < 0 || y - r < 0 || x + r > W || y + r > H){\\n        \tSystem.out.println(\"No\");\\n        \t}\\n        else if(x - r >= 0 && y - r >= 0 && H >= x + r && W >= y + r){\\n        \tSystem.out.println(\"Yes\");\\n        \t}\\n\t}\\n\\n}\\n", "target": "171", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "exp", "fc", "mc", " Sc", "nc", "sche", "sb", "cv", "cc", "esc", "bc", "asc", "pc", "cam", "ss", "sec", "scope", "ca", "SC", "se", "c", "scan", "cs", "sw", "cl", "uc", "cus", "can", "ctx", "cor", "Sc", "system", "dc", "sub", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "sl", "sp", "ci", " SC", "ec", "tc", "cur", "coll", "ser", "lc"], "W": ["WH", "G", "h", "I", "L", "Z", "A", "X", "P", "Q", "WC", "B", "Y", "SH", "E", "F", "V", "R", "TW", "C", "T", "U", "w", "M", "N", "WP", "Word", " w", "wa", "WS", "GW", "Wh", "O"], "H": ["WH", "G", "h", "K", "I", "L", "X", "P", "Q", "HA", "CH", "B", "Y", "SH", "RH", "E", "D", "DH", "HE", "F", "V", "HH", "HI", "HR", "R", "EH", " h", "rh", "C", "T", "w", "U", "M", "N", "z", "Ha", "Rh", "HS", "Hi", "TH", "HC"], "x": ["f", "xy", "cross", "h", "ch", "xx", "in", "no", "X", "wx", "id", "m", "index", "n", "l", "Y", "v", "t", "c", "d", "max", "dx", "fx", "ax", "ex", "u", "e", "o", "xs", "s", "p", "b", "w", "wh", "q", "ya", "rx", "z", "px", "k", "work", "wa", "i", "xi", "ix", "a"], "y": ["f", "yo", "h", "ch", "wy", "oy", "out", "in", "no", "ey", "cy", "m", "sy", "n", "l", "ye", "Y", "py", "v", "t", "c", "d", "vy", "ny", "yt", "ay", "u", "ry", "o", "j", "e", "dy", "year", "ty", "s", "p", "hi", "b", "w", "q", "yi", "ya", "ky", "z", "k", "i", "yy", "ix", "uy", "a"], "r": ["f", "h", "ri", "err", "m", "fr", "pr", "n", "dr", "l", "v", "mr", "t", "c", "d", "er", "ar", "kr", "re", "rb", "u", "ry", "j", "e", "ra", "ur", "wr", "hr", "p", "R", "b", "rh", "yr", "cr", "rar", "w", "rc", "sr", "or", "rr", "z", "nr", "rd", "rw", "rs", "lr", "right", "a", "ir", "q"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.nextLine());\\n        String[] line = sc.nextLine().split(\" \");\\n        int[] arr = new int[n];\\n        int temp;\\n        int count = 0;\\n        for(int x = 0; x < n; x++){\\n            arr[x] = Integer.parseInt(line[x]);\\n        }\\n\\n        for(int i = 0;i < n; i++){\\n            for(int j = n-1; j > i; j--){\\n                if(arr[j] < arr[j-1]){\\n                    temp = arr[j-1];\\n                    arr[j-1] = arr[j];\\n                    arr[j] = temp;\\n                    count++;\\n                }\\n            }\\n        }\\n        for(int x = 0; x < n; x++){\\n            if(x == n-1){\\n                System.out.println(arr[x]);\\n            }else{\\n                System.out.print(arr[x]);\\n                System.out.print(\" \");\\n            }\\n        }\\n        System.out.println(count);\\n    }\\n}", "target": "170", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "mc", " Sc", "nc", "out", "sche", "cv", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "server", "anc", "scope", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "Sc", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "soc", "sp", " SC", "sch", "sh", "parser", "ec", "lc", " scr"], "n": ["f", "nan", "h", "ne", "name", "nc", "in", "no", "nt", "m", "number", "l", "v", "t", "c", "d", "num", "y", "network", "sn", "u", "e", "o", "cn", "s", "p", "b", "un", "ln", "ns", "en", "nb", "nl", "w", "N", "len", "z", "size", "k", "nn", "net"], "line": ["parse", "list", "ner", "ne", "name", "cell", "string", "data", "range", "lin", "no", "cle", "log", "group", "lf", "lines", "code", "l", "block", "message", "inter", "end", "page", "entry", "inline", "source", "Line", "buffer", "word", "url", "frame", "user", "section", "auto", "row", "nl", "file", "enc", "char", "header", "LINE", "lc", "el"], "arr": ["obj", "parse", "list", "br", "arg", "dim", "data", "ann", "err", "arch", "fr", "pr", "par", "dr", "patch", "pre", "rep", "order", "py", "app", "v", "attr", "dat", "aa", "area", "ray", "att", "air", "ar", "aj", "array", "ext", "abc", "gr", "frac", "str", "cache", "img", "adj", "aaa", "auto", "iter", "av", "dict", "p", "ind", "var", "enc", "Ar", "rr", "z", "part", "arc", "arm", "pad", "test", "atts", "coll", "adr", "Array", "ars", "a", "r"], "temp": ["f", " tmp", "mini", "base", "shift", "data", "vi", "prefix", "nt", "length", "err", "key", "stable", "zip", "l", "pre", "v", "min", "t", "area", "c", "cat", "empty", "output", "adj", "dev", "str", "pt", "Temp", "ii", "current", "iter", "emp", "cache", "p", "offset", "tmp", "w", "extra", "z", "sp", "fake", "copy", "part", "other", "test", "flat", "shared"], "count": ["f", "list", "h", "base", "nt", "Count", "length", "err", "id", "code", "key", "number", "index", "total", "sum", "c", "num", "y", "max", "weight", "counter", "info", "cache", "current", "iter", "depth", "p", "offset", "b", "ind", "error", "child", "start", "len", "col", "z", "size", "test", "found", "coll", "old", "parent", "force"], "x": ["f", "xy", "xc", "cross", "on", "h", "exp", "my", "xxxx", "xx", "in", "X", "wx", "id", "key", "code", "index", "yx", "l", "step", "g", "v", "t", "c", "ctx", "xt", "tx", "d", "num", "y", "dx", "ext", "fx", "ax", "ex", "u", "e", "o", "width", "dy", "xs", "full", "s", "ux", "p", "b", "sync", "w", "xxx", "rx", "z", "px", "work", "xa", "xi", "test", "ix", "check", "xp", "any", "q"], "i": ["f", "li", "h", "I", "vi", "is", "di", "ri", "ni", "gi", "m", "index", "ai", "io", "ji", "si", "ui", "phi", "v", "c", "y", "u", "e", "pi", "o", "ii", "qi", "p", "b", "ind", "ini", "z", "ci", "mi", "ij", "xi", "ip", "iu", "ix", "bi"], "j": ["f", "uj", "li", "obj", "br", "jl", "jj", "jo", "vi", "oj", "jp", "jen", "ni", "m", "ji", "si", "l", "dj", "pre", "ui", "py", "jc", "v", "g", "t", "ja", "c", "ie", "d", "y", "aj", "next", "u", "e", "o", "js", "J", "ii", "pt", "qi", "p", "job", "b", "ind", "q", "je", "z", "ci", "part", "k", "ij", "xi", "ix", "jet", "el", "a"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString S = sc.next();\\n\t\tint firstIndex = S.indexOf(\"A\");\\n\t\tint lastIndex = S.lastIndexOf(\"Z\");\\n\t\tSystem.out.println(S.substring(firstIndex, lastIndex + 1).length());\\n\t\tsc.close();\\n\t}\\n}", "target": "109", "substitutes": {"sc": ["class", "osc", "ch", "nc", "sb", "ssl", "search", "cc", "bc", "esc", "pc", "exec", "ss", "sec", "server", "scope", "anc", "app", "ca", "SC", "se", "c", "scan", "uc", "cl", "cs", "can", "Sc", "system", "sq", "sub", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "sp", " SC", "sch", "ec", "cur", "lc"], "S": ["SA", "DS", "L", "Si", "Source", "AS", "A", "Socket", "INS", "SO", "P", "SN", "NS", "Sample", "ss", "SH", "BS", "RS", "As", "ST", "VS", "SER", "FS", "Service", "DES", "None", "OS", "SL", "Su", "s", "IS", "R", "STR", "T", "SS", "C", "U", "SE", "N", "TS", "Sing", "SU", "SR", "Single", "Sl", "Part", "OSS", "Standard", "CSS", "WS", "GS", "SI"], "firstIndex": ["lastOffset", "firstPosition", "FirstLetter", "FirstPos", "FirstPart", "firstPos", "FirstIndex", "firstOffset", "firstLetter", " firstOffset", "firstPart", "lastPosition", " firstindex", "FirstPosition", " firstPart", "lastindex", " firstPosition", "firstindex", "Firstindex", " firstLetter", "FirstOffset", " firstPos"], "lastIndex": ["lastInd", "lastOffset", "newI", "LastIndex", "firstPosition", " lastI", "newIndex", "nextIndex", "firstOffset", "lastI", "nextInd", "nextI", "nextOffset", " lastOffset", "LastI", "newInd", "lastPosition", " lastPosition", "newOffset", "firstI", "LastOffset", " lastInd", "LastPosition"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.StringTokenizer;\\n\\n/**\\n * Built using CHelper plug-in Actual solution is at the top\\n */\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tInputStream inputStream = System.in;\\n\t\tOutputStream outputStream = System.out;\\n\t\tInputReader in = new InputReader(inputStream);\\n\t\tPrintWriter out = new PrintWriter(outputStream);\\n\t\tTask solver = new Task();\\n\t\tsolver.solve(1, in, out);\\n\t\tout.close();\\n\t}\\n\\n\tstatic class Task {\\n\t\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\\n\t\t\tString S = in.next();\\n\t\t\tString ans = \"AC\";\\n\t\t\tif(S.charAt(0) != 'A') {\\n\t\t\t\tans = \"WA\";\\n\t\t\t}\\n\t\t\tint count = 0;\\n\t\t\tfor(int i = 2; i < S.length() - 1; i++) {\\n\t\t\t\tif(S.charAt(i) == 'C') {\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif(count != 1) {\\n\t\t\t\tans = \"WA\";\\n\t\t\t}\\n\t\t\tfor(int i = 1; i < S.length(); i++) {\\n\t\t\t\tif(Character.isUpperCase(S.charAt(i)) && S.charAt(i) != 'C') {\\n\t\t\t\t\tans = \"WA\";\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tout.println(ans);\\n\t\t}\\n\t}\\n\t\\n\tstatic class InputReader {\\n\t\tpublic BufferedReader reader;\\n\t\tpublic StringTokenizer tokenizer;\\n\\n\t\tpublic InputReader(InputStream stream) {\\n\t\t\treader = new BufferedReader(new InputStreamReader(stream), 32768);\\n\t\t\ttokenizer = null;\\n\t\t}\\n\\n\t\tpublic String next() {\\n\t\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn tokenizer.nextToken();\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\\n\t}\\n}\\n", "target": "209", "substitutes": {"inputStream": ["InputStream", "outputSocket", "outputSteam", " inputSteam", " inputSocket", "Inputstream", "InputSocket", "InputSteam", "inputSocket", " inputstream", "outputstream", "inputstream", "inputSteam"], "outputStream": ["outputStreamer", "inputStreamer", "OutputStream", "outputSteam", "OutputSteam", "inputHandler", "controlReader", " outputSteam", " outputHandler", "outputReader", "controlStream", "Outputstream", "referenceSteam", "referenceStream", " outputstream", "referenceReader", "OutputHandler", "outputHandler", "referenceStreamer", "controlSteam", "controlStreamer", "outputstream", "inputstream", "inputReader", "inputSteam"], "in": ["f", "client", "path", "cin", "data", "is", "input", "lin", "log", "err", "din", "pin", "id", "inner", "socket", "config", "image", "io", "n", "exec", "l", "IN", "inn", "min", "up", "con", "scan", "bin", "d", "er", "per", "request", "isin", "resource", "read", "inc", "source", "this", "info", "user", "inside", "s", "as", "ic", "rin", "ini", "sin", "login", "win", "again", "ins", "conn", "connection", "init", "from", "In", "gin", "run", "inf", "r"], "out": ["obj", "list", "client", "path", "exit", "data", "input", "off", "net", "outside", "call", "log", "err", "group", "socket", "inner", "timeout", "io", "report", "window", "exec", "writing", "process", "server", "left", "scope", "up", "sum", "page", "write", "bin", "OUT", "array", "resource", "inc", "output", "buffer", "ex", "word", "o", "user", "this", "target", "point", "to", "cache", "at", "x", "down", "file", "w", "Out", "error", "problem", "sync", "and", "again", "temp", "line", "conn", "writer", "outer", "connection", "init", "outs", "memory", "run", "parent", "r"], "solver": ["Solve", "Solution", "solving", "solve", "resolution", "ssolution", "resolver", "resolve", "Solver", "Solving", "solution", "ssolver", "ssolving", "resolving", "ssolve"], "testNumber": ["trialCounter", " trialObject", "trialObject", " testObject", "Testnumber", " testCounter", " trialnumber", "TestObject", "TestSize", "trialSize", "TestCounter", " trialCounter", " testnumber", "trialnumber", " trialSize", " testSize"], "S": ["Sign", "SA", "DS", "I", "Session", "L", "Si", "Source", "AS", "A", "SK", "Socket", "SO", "P", "NS", "SN", "Sync", "H", "Sample", "SH", "BS", "As", "RS", "SC", "VS", "Service", "Os", "Site", "FS", "W", "Su", "F", "V", "s", "R", "IS", "T", "C", "SS", "U", "SE", "N", "Des", "CS", "SU", "TS", "The", "Text", "Single", "Part", "PS", "Ns", "OSS", "CSS", "WS", "GS", "HS", "US", "SI", "O"], "ans": ["asm", "ANS", "cons", "vals", "ats", "ains", "ann", "AS", "oss", "arts", "aned", "anon", "reads", "ays", "anas", "ani", "vs", "ant", "ons", "amps", " means", "AN", "ss", "na", "anc", "ass", "aos", "ents", "ads", "aning", "lan", "ens", "aus", "s", "as", "ns", "An", "atan", "cas", "ants", "ags", "ares", "san", "sk", "anus", "aks", "eps", "asin", "os", "ins", "ings", "ana", "ras", "ks", "an", "outs", "atts", "ars", "ams", "allows", "ds", "a", "span"], "count": ["list", "level", "allow", "base", "call", "Count", "group", "length", "id", "number", "code", "err", "index", "core", "default", "keep", "ignore", "limit", "process", "total", "sum", "loop", "more", "c", "type", "num", "max", "use", "array", "weight", "counter", "batch", "cache", "add", "depth", "ind", "child", "start", "len", "pool", "size", "part", "other", "key", "coll", "found", "check", "parent", "force"], "i": ["f", "eni", "li", "fi", "I", "vi", "data", "di", "ri", "ni", "id", "code", "key", "gi", "ai", "index", "io", "inner", "ji", "si", "ori", "ui", "phi", "v", "it", "c", "ie", "d", "y", "uri", "pi", "e", "o", "u", "info", "j", "ii", "qi", "hi", "b", "x", "oi", "slice", "abi", "ini", "temp", "z", "ci", "ip", "xi", "init", "iu", "ix", "multi", "bi", "my"], "reader": ["client", "h", "worker", "data", "input", "socket", "inner", "io", "report", "server", "loader", "driver", "it", "iterator", "er", "entry", "per", "feed", " Reader", "resource", "read", "buffer", "re", "source", "e", "ry", "wrapper", "iter", "manager", "row", "reading", "file", "Reader", "slice", "or", "rr", "filter", "table", "writer", "parser", "connection", "handler", "lock", "r"], "tokenizer": ["tokenize", "Tokenizer", "Tokener", "tokenized", " tokenner", "okener", " tokenifier", "Tokenizers", " tokenization", "Tokenized", "okeniser", "okenization", "authoriser", "tokeniser", "serialize", "authorizer", " tokeniser", "serializer", "Tokenization", "Tokenner", "tokenifier", " tokenoder", "lexization", "tokenizers", " tokenizers", "okenized", "authorization", "Tokenifier", "authorner", "okenoder", "tokenner", "Tokenize", "tokenoder", " tokenize", "serializers", "serialner", "lexifier", "Tokenoder", "tokenization", "okenizer", " tokenized", " tokener", "okenner", "lexizer", "okenize", "tokener", "lexize"], "stream": ["channel", "client", "path", "string", "holder", "data", "raw", "input", "ssl", "context", "length", "object", "null", "server", "loader", "driver", "port", "form", "feed", "resource", "read", "buffer", "source", "system", "serial", "row", "file", "w", "response", "pool", "trans", "temp", "view", "Stream", "writer", "connection", "body", "handler", "lock", "socket"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\t// ?????????????????\\???\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint num1 = sc.nextInt();\\n\t\tint num2 = sc.nextInt();\\n\t\tint num3 = sc.nextInt();\\n\\n\t\t// ??\\??????????????\u00b0???????????\\??????????\u00ac???????????????????????????\u00b0????????\\??????\\n\t\tint[][] table = new int[num1][num2];\\n\t\tint[][] grid = new int[num2][num3];\\n\\n\t\tfor (int cnt1 = 0; cnt1 < num1; cnt1++) {\\n\\n\t\t\tfor (int cnt2 = 0; cnt2 < num2; cnt2++) {\\n\\n\t\t\t\ttable[cnt1][cnt2] = sc.nextInt();\\n\t\t\t}\\n\t\t}\\n\\n\t\tfor (int cnt1 = 0; cnt1 < num2; cnt1++) {\\n\\n\t\t\tfor (int cnt2 = 0; cnt2 < num3; cnt2++) {\\n\\n\t\t\t\tgrid[cnt1][cnt2] = sc.nextInt();\\n\t\t\t}\\n\t\t}\\n\\n\t\t// 2??????????\u00ac????????????????????\u00a8????\\n\t\tlong [][] sum = new long[num1][num3];\\n\t\tint cnt0;\\n\t\tint cnt1;\\n\t\tint cnt2;\\n\\n\t\tfor (cnt0 = 0; cnt0 < num1; cnt0++) {\\n\\n\t\t\tfor (cnt1 = 0; cnt1 < num3; cnt1++) {\\n\\n\t\t\t\tfor (cnt2 = 0; cnt2 < num2; cnt2++) {\\n\\n\t\t\t\t\tsum[cnt0][cnt1] += table[cnt0][cnt2] * grid[cnt2][cnt1];\\n\\n\t\t\t\t}\\n\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tfor (cnt0 = 0; cnt0 < num1; cnt0++) {\\n\\n\t\t\tfor (cnt1 = 0; cnt1 < num3; cnt1++) {\\n\\n\t\t\t\tif (cnt1 >= num3-1) {\\n\\n\t\t\t\t\tSystem.out.println(sum[cnt0][cnt1]);\\n\\n\t\t\t\t} else {\\n\\n\t\t\t\t\tSystem.out.print(sum[cnt0][cnt1] + \" \");\\n\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tsc.close();\\n\t}\\n\\n}", "target": "204", "substitutes": {}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int N = in.nextInt();\\n            int[] H = new int[N];\\n            for (int i = 0; i < N; i++) {\\n                H[i] = in.nextInt();\\n            }\\n            int count = 1;\\n            int max = H[0];\\n            for (int i = 1; i < N; i++) {\\n                if (max <= H[i]) {\\n                    count++;\\n                    max = H[i];\\n                }\\n            }\\n            out.println(count);\\n        }\\n\\n    }\\n}\\n\\n", "target": "7", "substitutes": {"inputStream": ["outputSt", "InputStream", "outputStreamer", "inputStreamer", "outputSteam", " inputSteam", "InputSt", "referenceSteam", "referenceStream", " inputSt", "referencestream", "InputStreamer", "Inputstream", "referenceStreamer", "InputSteam", " inputstream", "inputSt", "outputstream", "inputstream", "inputSteam"], "outputStream": ["responsestream", "outputStreamer", "inputStreamer", "inputForm", "OutputStream", "responseStream", "responseSteam", "outputSteam", "OutputSteam", " outputSteam", "responseStreamer", "outputForm", "Outputstream", "OutputForm", " outputstream", "OutputStreamer", "outputstream", "inputstream", " outputForm", "inputSteam"], "in": ["arg", "path", "cin", "data", "is", "input", "version", "lin", "err", "din", "pin", "id", "inner", "image", "config", "io", "n", "nin", "l", "IN", "inn", "min", "con", "c", "bin", "reader", "kin", "request", "isin", "inc", "source", "this", "info", "inside", "s", "ln", "rin", "w", "vin", "ini", "sin", "file", "login", "win", "again", "ins", "conn", "connection", "init", "get", "arin", "In", "gin", "run", "inf", "a", "r"], "out": ["gen", "obj", "client", "list", "exp", "name", "string", "data", "raw", "off", "input", "console", "version", "call", "prefix", "log", "err", "key", "socket", "inner", "index", "timeout", "session", "io", "n", "window", "exec", "IN", "server", "self", "up", "v", "bar", "scan", "page", "write", "bin", "OUT", "query", "ext", "inc", "output", "ex", "this", "o", "cache", "user", "point", "b", "x", "error", "Out", "w", "file", "sync", "pool", "extra", "again", "temp", "line", "copy", "conn", "writer", "outer", "connection", "init", "engine", "outs", "parent", "net"], "solver": ["Solution", "Solver", "solution", "ssolver", "ssolve", "solve", "ssearcher", "sector", "rsolve", "ssolution", "Sector", "searcher", "ssector", "rsolution", "rsector", "Searcher", "Solve", "rsolver"], "testNumber": ["testNumbers", " TestNumber", "Testnumber", "TestNumbers", " TestNumbers", " TestNum", "TestNum", " testNumbers", " Testnumber", " testnumber", "testNum", "TestNumber", " testNum", "testnumber"], "N": ["NE", "K", "Length", "Len", "I", "L", "Z", "Size", "X", " n", "Node", "Count", "P", "Q", "NS", "n", "NC", "B", "Y", "S", "E", "D", "W", "F", "V", "No", "R", "NB", "NN", "T", "C", "Num", "U", "M", "Max", "NA", "Ne", "NR", "Part", "Ns", "NT", "Number", "Na"], "H": ["h", "Length", "I", "L", "GH", "X", "HQ", "FH", "P", "HT", "Q", "HK", "HA", "CH", "B", "Y", "SH", "RH", "ID", "DH", "OH", "NH", "HM", "Head", "W", "Host", "Ch", "F", "V", "HH", "HR", "HI", "R", "EH", "CL", "rh", "MH", "T", "C", "U", "Max", "Hash", "HP", "HTTP", "HB", "He", "History", "HS", "HC"], "i": ["f", "li", "h", "I", "mini", "di", "ri", "ni", "id", "gi", "key", "index", "ai", "inner", "io", "ji", "n", "si", "ui", "mu", "phi", "v", "it", "c", "ie", "layer", "y", "uri", "u", "e", "o", "j", "pi", "info", "ii", "qi", "p", "hi", "b", "x", "oi", "ind", "slice", "ini", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "multi", "bi"], "count": ["list", "h", "level", "base", "call", "Count", "length", "id", "number", "code", "index", "key", "keep", "default", "limit", "n", "total", "last", "min", "sum", "more", "c", "type", "num", "carry", "add", "counter", "weight", "cache", "load", "info", "batch", "depth", "iter", "b", "error", "child", "start", "col", "size", "part", "work", "found", "check", "force"], "max": ["rand", "h", "div", "wrap", "range", "act", "no", "length", "id", "limit", "key", "default", "n", "step", "total", "height", "last", "sum", "min", "end", "conf", "c", "chain", "d", "ax", "next", "always", "cache", "depth", "p", "start", "Max", "head", "MAX", "size", "work", "rank", "right", "dom", "parent", "scale", "q"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString[] line = sc.nextLine().split(\" \");\\n\t\tint n = Integer.parseInt(line[0]);\\n\t\t\\n\t\tList<String> list = new ArrayList<String>();\\n\\n\t\tString min = \"\";\\n\t\t\\n\t\tfor(int i=0;i<n;i++){\\n\t\t\tlist.add(sc.nextLine());\\n\t\t}\\n\t\tsc.close();\\n\t\t\\n\t\tCollections.sort(list);\\n\t\tfor(String col:list) {\\n\t\t\tmin += col;\\n\t\t}\\n\t\tSystem.out.println(min);\\n\t}\\n}", "target": "224", "substitutes": {"sc": ["ner", "ch", "osc", "fc", "mc", "nc", "ga", "sche", "sb", "log", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "sec", "server", "scope", "anc", "ca", "SC", "c", "scan", "cs", "se", "cl", "sw", "uc", "cus", "cm", "Sc", "system", "sa", "sci", "cr", "src", "sync", "rc", "enc", "sp", " SC", "sch", "sh", "parser", "isc", "ec", "cur", "sem", "lc"], "line": ["f", "parse", "comment", "ne", "ner", "cell", "string", "data", "lin", "log", "lines", "code", "shell", "object", "non", "split", "l", "block", "text", "message", "end", "se", "page", "entry", "inline", "ge", "source", "Line", "le", "word", "lo", "section", "b", "strip", "row", "nl", "pass", "file", "sync", "pe", "header", "ip", "look", "day", "LINE", "lc"], "n": ["f", "h", "nc", "net", "in", "nt", "count", "number", "m", "l", "t", "c", "num", "d", "y", "max", "network", "u", "o", "j", "s", "p", "b", "x", "ns", "nb", "en", "w", "N", "len", "z", "k", "nn", "r"], "list": ["li", "parse", "listed", "cont", "sort", "tree", "string", "base", "out", "act", "cli", "bl", "keep", "search", "index", "collection", "l", "ist", "que", "queue", "order", "left", "diff", "like", "cl", "chain", "batch", "pull", "word", "cache", "str", "iter", "lp", "p", "x", "all", "stack", "and", "pool", "set", "LIST", "table", "part", "lists", "test", "coll", "lock", "la", "lc", "parent", "sequence", "lab"], "min": ["value", "val", "sort", "name", "none", "mini", "miss", "skip", "is", "don", "version", "prefix", "no", "id", "count", "key", "index", "mine", "ignore", "default", " Min", "null", "ss", "pre", "last", "diff", "conf", "type", "Mini", "max", "pos", "small", "Min", "dec", "next", "str", "js", "current", "minimum", "un", "po", "len", "sol", "partial", "part", "size", "lt", "pri", "init", "lower", "MIN", "span"], "i": ["f", "li", "fi", "I", "di", "ri", "ni", "gi", "m", "index", "ai", "io", "si", "ori", "ui", "mu", "phi", "v", "c", "zi", "uri", "pi", "info", "j", "ii", "qi", "ti", "p", "b", "oi", "hi", "slice", "ini", "z", "ci", "ip", "xi", "init", "iu", "chi", "multi", "bi"], "col": ["f", "val", "ch", "name", "flo", "cell", "cal", "co", "act", "column", "ref", "id", "key", "code", "collection", "count", "l", "ac", "c", "cat", "Col", "cl", "il", "loc", "p", "row", "cr", "file", "sel", "enc", "po", "char", "k", "conn", "fl", "coll", "COL", "el"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner scanNumber = new Scanner(System.in);\\n\\n        String S = scanNumber.next();\\n\\n        String T = scanNumber.next();\\n\\n        scanNumber.close();\\n\\n        char[] charS = S.toCharArray();\\n        char[] charSalfa = S.toCharArray();\\n        char[] charT = T.toCharArray();\\n\\n        String answer = \"No\";\\n\\n        char work = ' ';\\n\\n        for(int i = 0; i < T.length() ; i++){\\n            work = charS[0];\\n            for(int j=0; j<T.length()-1 ; j++){\\n                charS[j] = charS[j + 1];\\n            }\\n            charS[T.length() -1] = work;\\n            if(Arrays.equals(charS, charT)){\\n                answer = \"Yes\";\\n                break;\\n            }\\n\\n        }\\n\\n        System.out.print(answer);\\n\\n    }\\n}\\n", "target": "220", "substitutes": {"scanNumber": ["scanNumbers", "searchNum", "scanNum", " scannumber", "parseNumber", " scanRunner", " scanner", " scanNum", " scanDirectory", " scanBER", "scanGroup", "ScanGroup", "Scanner", "charNum", "parseRunner", "ScanDirectory", "readDirectory", " scanCounter", "ScanRunner", "canGroup", " scanGroup", "ScanNumber", "scanner", "searchnumber", "charNumbers", "ScanBER", "charNumber", "parseCounter", "readnumber", "canNumber", "searchNumbers", "readner", "charnumber", " scanNumbers", "searchNumber", "scanDirectory", "cannumber", "scanRunner", "Scannumber", "scannumber", "ScanCounter", "parseBER", "scanCounter", "canner", "scanBER", "readNumber"], "S": ["Sign", "SA", "DS", "L", "Si", "Source", "AS", "A", "Socket", "SO", "Section", "Class", "X", "SN", "NS", "SAM", "Sample", "B", "SH", "BS", "RS", "As", "SC", "ST", "Service", "OS", "SL", "LS", "s", "IS", "R", "SS", "TS", "U", "SE", "N", "C", "M", "SU", "CS", "Space", "Single", "Part", "Ns", "WS", "GS", "In", "Array", "SI"], "T": ["TF", "TN", "ET", "AT", "LT", "Token", "Tab", "I", "Term", "L", "TG", "VT", "Task", "TX", "A", "DT", "X", "P", "Target", "TT", "CT", "Type", "PT", "Pat", "Y", "UT", "B", "GT", "t", "Ti", "D", "E", "Parent", "WT", "Ta", "TB", "W", "Point", "Unit", "J", "F", "Tu", "V", "R", "TS", "U", "N", "M", "XT", "TEXT", "Transaction", "Text", "Part", "Test", "Total", "It", "NT", "TR", "O", "IT"], "charS": ["characterA", "charP", " chars", " charP", "CharN", " charA", "characterS", "CharI", " charV", "chars", "uintS", "charV", "characterN", "characterI", "charN", "characterT", "charA", "chP", "uintT", "chN", " charI", "Chars", " charN", "characterV", "chT", "charI", "CharV", "uintP", "CharP", "uints", "characterP", "CharS", "CharT", "CharA", "chS"], "charSalfa": ["charValfh", "charSalt", "charValfas", "charSalfh", "charSala", "charSalfas", "charValfa", "charSalas", "charSalft", "charSalh", "charValft"], "charT": ["CharB", "charP", "characterB", " charP", "CharN", "characterS", "characterN", "characterT", "charN", "chP", "charB", " charF", "chB", " charN", "chT", "characterF", " charB", "charF", "characterP", "CharS", "CharT", "chF"], "answer": ["value", "valid", "evidence", "agree", "name", "string", "issue", "out", "help", "align", "expression", "err", "update", "search", "code", "number", "object", "report", "text", " answers", "message", "score", "order", "address", "say", "result", "support", "y", "su", "query", "array", "fix", "next", "Answer", "know", "request", "age", "word", "output", "question", "reply", "status", "answered", "respond", "response", "knowledge", "correct", "fill", "gap", "ask", "average", "now", "rank", "clean", "what"], "work": ["hack", "WORK", "parse", "worked", "make", "worker", "works", "working", "ise", "help", "align", "care", "ack", "kick", "effect", "good", "change", "house", "ac", "process", "ass", "wait", "witch", "world", "ah", "y", " Work", "use", "know", "add", "age", "Work", "word", "e", "job", " use", "b", "x", "w", "action", "ak", "start", " w", "play", "k", "part", "angle", "stuff", "ask", "pair", "check", "rank", "clean", "force", "what"], "i": ["f", "li", "I", "di", "in", "ri", "ni", "gi", "id", "m", "index", "ai", "io", "ji", "si", "ui", "v", "it", "c", "ie", "y", "zi", "u", "pi", "ii", "qi", "p", "hi", "b", "ind", "ini", "z", "ci", "iu", "ip", "xi", "chi", "ix", "bi"], "j": ["f", "uj", "li", "br", "jl", "jj", "jo", "shift", "oj", "jp", "off", "out", "key", "ji", "n", "l", "dj", "ori", "ui", "jc", "v", "it", "ja", "c", "ie", "end", "d", "y", "aj", "u", "e", "o", "J", "js", "ii", "adj", "qi", "p", "job", "b", "x", "ind", "z", "k", "ij", "xi", "ix", "jet", "q"], "length": ["bow", "shape", "Length", "ph", "path", "base", "pattern", "padding", "id", "count", "limit", "index", "pace", "code", "split", "character", "l", "total", "height", "left", "end", "duration", "style", "form", "type", "pos", "array", "square", "width", "pi", "power", "info", "position", "depth", "iter", "blank", "slice", "front", "len", "head", "view", "angle", "sh", "body", "alpha", "distance", "sequence"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint max = Math.max(a + b, a -b);\\n\t\tmax = Math.max(max, a * b);\\n\t\tSystem.out.println(max);\\n\t}\\n}\\n", "target": "188", "substitutes": {"sc": ["osc", "ner", "ch", "exp", " Sc", "st", "core", "esc", "bc", "cc", "pc", "exec", "ss", "na", "server", "scope", "app", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "ctx", "spec", "acc", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "cer", "soc", "sl", "sys", "sp", " SC", "sh", "lc"], "sb": ["gb", "bm", "bf", "BB", "db", "ub", "sv", "bc", "sg", "si", "ss", "BG", "gc", "bp", "mb", "rb", "SB", "MB", "bb", "sa", " kb", "nb", "sf", "cb", "ws", "sp", "bs", "sh", "sm"], "a": ["f", "h", "ama", "base", "am", "ga", "A", "ab", "ad", "ma", "count", "aka", "n", "ac", "ba", "da", "min", "ca", "area", "c", "aa", "asa", "d", "y", "aj", "array", "va", "pa", "u", "af", "aaa", "fa", "sa", "as", "p", "x", "access", "all", "au", "qa", "i", "an", "alpha", "la"], "b": ["f", "gb", "bf", "h", "base", "ab", "count", "m", "n", "l", "B", "ob", "g", "v", "min", "ba", "c", "aa", "d", "y", "rb", "u", "e", "lb", "batch", "bb", "s", "p", "x", "nb", "w", "ib", "z", "bs", "k", "i", "inf", "r"], "max": ["value", "plus", "in", "call", "no", "count", "m", "default", "total", "pop", "conf", "c", "ax", "power", "depth", "size", "maximum", "now", "scale", "h", "limit", "min", "diff", "bar", "cat", "dot", "mod", "MAX", "part", "largest", "range", "out", "az", "ad", "id", "step", "gt", "last", "end", "first", "y", "Min", "array", "mad", "always", "add", "buffer", "p", "as", "all", "top", "Max", "k", "big", "bottom", "std", "q", "rand", "parse", "div", "base", "length", "n", "sum", "rest", "d", "best", "info", "point", "auto", "x", "error", "nb", "w", "start", "pad", "rank"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n\t\\n    public static void main(String[] args) {\\n    \tScanner sc = new Scanner(System.in);\\n    \tint N = sc.nextInt();\\n    \tList<Integer> list = new LinkedList<>();\\n    \tint max = 0;\\n    \tint order = 0;\\n    \tfor (int i = 0; i < N; i++) {\\n    \t\tint num = sc.nextInt();\\n    \t\tif (max < num) {\\n    \t\t\tmax = num;\\n    \t\t\torder = i;\\n    \t\t}\\n    \t\tlist.add(num);\\n    \t}\\n    \tCollections.sort(list);\\n    \tint submax = list.get(list.size() - 2);\\n    \tfor (int i = 0; i < N; i++) {\\n    \t\t\tSystem.out.println(i == order ? submax : max);\\n    \t}\\n    }\\n}", "target": "142", "substitutes": {"sc": ["osc", "ner", "ch", "mc", " Sc", "nc", "st", "sb", "sche", "cc", "esc", "bc", "asc", "pc", "ss", "anc", "scope", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "cus", "cor", "Sc", "system", "sci", "cr", "src", "cb", "sync", "rc", "cer", "sr", "enc", "sp", "ci", " SC", "sch", "sh", "ec", "cur", "ser", "lc"], "N": ["O", "K", "Len", "I", "L", "Z", "Size", "NI", "X", " n", "Count", "Ni", "P", "Q", "NS", "H", "n", "NC", "S", "Y", "Limit", "D", "Order", "W", "J", "F", "No", "V", "R", "NB", "NN", "T", "C", "Num", "M", "Max", "Ne", "size", "Ns", "NT", "Na"], "list": ["li", "listed", "tree", "sort", "base", "old", "out", "log", "live", "cli", "nt", "number", "collection", "keep", "limit", "id", "ordered", "low", "key", "n", "arr", "l", "ist", "null", "object", "queue", "left", "last", "loop", "diff", "cl", "chain", "ls", "array", "batch", "cache", "current", "iter", "bl", "full", "stack", "all", "and", "pool", "set", "LIST", "table", "size", "test", "coll", "we", "now", "lc", "later", "sequence"], "max": ["name", "none", "orig", "base", "range", "no", "az", "length", "id", "count", "limit", "index", "key", "default", "n", "step", "total", "last", "min", "sum", "end", "conf", "c", "first", "chain", "d", "can", "ax", "cycle", "u", "p", "mod", "x", "w", "start", "Max", "MAX", "size", "k", "init", "right", "prev", "rank", "parent", "scale", "q"], "order": ["level", "sort", "inner", "err", "id", "count", "ordered", "index", "number", "limit", "code", "key", "ord", "ai", "n", "default", "asc", "reverse", "last", "min", "end", "orders", "type", "page", "first", "er", "Order", "random", "next", "position", "iter", "axis", "p", "offset", "row", "ind", "start", "or", "nr", "size", "dir", "init", "desc", "rank", "scale", "r", "after"], "i": ["f", "li", "fi", "I", "di", "in", "ri", "ni", "id", "key", "gi", "index", "inner", "ai", "io", "n", "si", "l", "ui", "phi", "min", "v", "it", "ie", "y", "uri", "zi", "hei", "pi", "u", "o", "e", "j", "info", "ii", "api", "qi", "iter", "p", "ti", "hi", "x", "oi", "ini", "start", "yi", "ci", "part", "k", "mi", "ip", "init", "xi", "uni", "iu", "ix", "chi", "bi"], "num": ["f", "skip", "ul", "nil", "term", "one", "off", "known", "nom", "prefix", "no", "nt", "ni", "id", "count", "number", "index", "limit", "non", "unit", "ord", "n", "null", "sum", "min", "form", "cat", "bin", "pos", "NUM", "inc", "u", "loc", "iter", "current", "offset", "x", "nb", "Num", "en", "coord", "col", "nr", "umi", "mn", "comb", "size", "rank", "uni", "nu", "multi", "nn", "fn", "um"], "submax": ["sublast", "subsize", "ubmax", " sublast", "ubsize", "Sublast", "minMax", "minmax", "secmax", "Suborder", " suborder", " subMax", "Submax", "ubMax", "minlast", "secMax", "minorder", "secsize", "SubMax", "suborder", " subsize", "subMax"]}}
{"code": "import java.util.*;\\nclass Main\\n{\\n  public static void main(String[] args)\\n  {\\n    Scanner sc = new Scanner(System.in);\\n    \\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    \\n    int max = -1000;\\n    if (a + b >= max) {\\n      max = a + b;\\n    }\\n    \\n    if (a - b >= max) {\\n      max = a - b;\\n    }\\n    \\n    if(a * b >= max) {\\n      max = a * b;\\n    }\\n    \\n    System.out.println(max); \\n  }\\n}", "target": "188", "substitutes": {"sc": ["ner", "ch", "osc", " Sc", "nc", "sche", "search", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "server", "scope", "ca", "SC", "se", "c", "scan", "cs", "uc", "cl", "sw", "com", "ctx", "acc", "str", "Sc", "sq", "sci", "cr", "src", "rc", "cer", "sr", "enc", "soc", "sp", " SC", "ct", "sch", "sh", "parser", "ec", "cur", "tc", "ser", "lc"], "a": ["f", "div", "ama", "base", "am", "ga", "A", "ab", "ad", "ma", "oa", "aka", "ai", "n", "ea", "ac", "na", "home", "ba", "da", "app", "ca", "area", "c", "aa", "asa", "d", "y", "aj", "array", "always", "pa", "va", "aux", "u", "api", "auto", "fa", "sa", "as", "p", "x", "access", "at", "au", "common", "about", "wa", "qa", "i", "an", "alpha", "la", "any"], "b": ["f", "gb", "bf", "pb", "h", "base", "sb", "bh", "ab", "db", "m", "bc", "n", "l", "B", "wb", "ob", "ba", "v", "g", "t", "c", "d", "y", "mb", "rb", "u", "e", "lb", "j", "o", "bb", "p", "x", "nb", "w", "q", "ib", "bot", "z", "bd", "bs", "k", "i", "eb", "be", "bi", "fb", "r"], "max": ["value", "parse", "list", "orig", "none", "huge", "base", "name", "off", "range", "out", "no", "large", "id", "count", "code", "limit", "key", "index", "default", "active", "step", "block", "total", "height", "last", "min", "only", "end", "conf", "c", "master", "cat", "bug", "d", "num", "ax", "cycle", "always", "cache", "show", "best", "auto", "depth", "as", "mod", "x", "all", "error", "sync", "start", "Max", "MAX", "temp", "with", "k", "size", "work", "comb", "maximum", "test", "right", "cast", "now", "check", "rank", "parent", "scale", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String args[]) {\\n\\n        // \u5165\u529b\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int[] h = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            h[i] = Integer.parseInt(sc.next());\\n        }\\n\\n        // \u4e3b\u51e6\u7406\\n        boolean judge = true;\\n        if (1 < n) {\\n            for (int i = 0; i < h.length - 1; i++) {\\n                if (h[i + 0] <= h[i + 1] - 1) {\\n                    h[i + 1] -= 1;\\n                } else if (h[i + 0] != h[i + 1]) {\\n                    judge = false;\\n                    break;\\n                }\\n            }\\n        }\\n        String result = judge ? \"Yes\" : \"No\";\\n\\n        // \u51fa\u529b\\n        System.out.println(result);\\n        sc.close();\\n    }\\n}\\n", "target": "74", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.math.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    BigInteger ans = BigInteger.ONE;\\n    int n = sc.nextInt();\\n\\n    for (int i = 0; i < n; i++) {\\n      BigInteger next = sc.nextBigInteger();\\n\\n      if (!ans.equals(BigInteger.valueOf(-1))) {\\n        if (ans.multiply(next).compareTo(BigInteger.valueOf(1000000000000000000L)) > 0) {\\n          ans = BigInteger.valueOf(-1);\\n        } else {\\n          ans = ans.multiply(next);\\n        }\\n      } else {\\n        if (next.equals(BigInteger.ZERO)) {\\n          ans = BigInteger.ZERO;\\n          break;\\n        }\\n      }\\n    }\\n\\n    System.out.println(ans);\\n  }\\n}\\n\\n", "target": "27", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "sche", "core", "cv", "cc", "bc", "esc", "pc", "exec", "ss", "scope", "anc", "cus", "SC", "c", "scan", "cs", "sw", "uc", "se", "cl", "ctx", "com", "Sc", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "sr", "sp", "ci", " SC", "sch", "sh", "cur", "screen", "lc", " scr"], "ans": ["runs", "ations", "ANS", "vals", "works", "ats", "ils", "ann", "arts", "ands", "aned", "anon", "lines", "reads", "span", "ays", "man", "anas", "leans", "amps", "ss", "acts", "anne", "na", "anc", "aces", "ones", "cs", "ents", "scan", "ads", "errors", "can", "lan", "ls", "es", "ions", "nas", "rules", "aus", "asts", "auto", "s", "as", "sets", "opens", "ns", "anges", "olds", "cas", "ants", "ares", "vers", "atan", "sk", "acs", "eps", "aps", "os", "ks", "ins", "ras", "ends", "an", "ars", "prev", "ams", "ips", "ds", "ana", "ons"], "n": ["f", "h", "ne", "nc", "in", "nt", "ni", "count", "number", "m", "l", "inn", "c", "num", "d", "sn", "u", "e", "o", "j", "s", "p", "b", "x", "ns", "en", "nb", "w", "N", "len", "z", "k", "mn", "conn", "nn", "net"], "i": ["f", "li", "fi", "h", "I", "vi", "di", "in", "ri", "ni", "ami", "id", "key", "m", "index", "gi", "ai", "io", "ji", "si", "ui", "mu", "v", "c", "d", "zi", "uri", "pi", "u", "e", "j", "o", "ii", "qi", "p", "ti", "b", "x", "hi", "ini", "z", "ci", "k", "ip", "xi", "chi", "multi", "bi"], "next": ["valid", "obj", "cross", "primary", "ner", "ne", "plus", "Next", "data", "done", "one", "nt", "number", "code", "latest", "non", "cost", "follow", "anne", "last", "apply", "nz", "more", "end", "success", "result", "first", "iterator", "same", "future", "max", "seq", "then", "this", "current", "auto", "open", "start", "front", "extra", "again", "append", "big", "size", "other", "a", "now", "prev", "later", "bis", "sequence", "second"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        // ABC149B - Greedy Takahashi\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        long a = sc.nextLong();\\n        long b = sc.nextLong();\\n        long k = sc.nextLong();\\n        long n = k - a;\\n\\n        if (a >= k) {\\n            a -= k;\\n        } else {\\n            a = 0;\\n        }\\n\\n        if (n > 0) {\\n            b -= n;\\n        }\\n\\n        if (b < 0) {\\n            b = 0;\\n        }\\n\\n        System.out.println(a + \" \" + b);\\n    }\\n}", "target": "128", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        \\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        \\n        int[] d = new int[n];\\n        for(int i = 0; i < n; i ++) d[i] = sc.nextInt();\\n        Arrays.sort(d);\\n        \\n        int arc_min = d[n/2];\\n        int abc_max = d[n/2-1];\\n        \\n        // K = abc_max+1, ... , arc_min\\n        int ans = arc_min - abc_max;\\n        System.out.println(ans);\\n    }\\n}", "target": "119", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\t    // write your code here\\n        // input N S\\n        // \u6587\u5b57\u5217\u9577\u3000N \u3067\u3042\u308b\u6587\u5b57\u5217 S \u306b\u3064\u3044\u3066\u3001 S = T + T \u306a\u308b T \u304b\u3089\u69cb\u6210\u3055\u308c\u308b\u306a\u3089 Yes \u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070 No\\n        Scanner sc = new Scanner(System.in);\\n        int strLen = sc.nextInt();\\n        String str = sc.next();\\n        if(strLen % 2 == 0){\\n            String firstStr = str.substring(0, strLen / 2);\\n            String lastStr = str.substring(strLen / 2, strLen);\\n            if(firstStr.equals(lastStr)){\\n                System.out.println(\"Yes\");\\n                return;\\n            }\\n        }\\n        System.out.println(\"No\");\\n    }\\n}\\n", "target": "161", "substitutes": {}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try (Scanner sc = new Scanner(System.in)) {\\n            int N = sc.nextInt();\\n            int K = sc.nextInt();\\n            int[] p = new int[N];\\n            for (int i = 0; i < N; i++) {\\n                p[i] = sc.nextInt();\\n            }\\n            Arrays.sort(p);\\n            int sum = 0;\\n            for (int k = 0; k < K; k++) {\\n                sum += p[k];\\n            }\\n            System.out.println(sum);\\n        }\\n    }\\n}\\n", "target": "41", "substitutes": {"N": ["I", "L", "Z", "Size", "NI", "X", " n", "P", "Q", "NS", "H", "n", "NC", "B", "Y", "S", "E", "D", "NL", "J", "F", "V", "No", "NB", "R", "NN", "C", "T", "U", "Num", "M", "NA", "Ne", "Ns", "ND", "NT", "O"], "K": ["Mask", "KC", "I", "L", "Z", "PK", "SK", "X", "length", "KR", "P", "Q", "HK", "H", "KS", "NK", "n", "S", "Y", "E", "D", "W", "J", "F", "V", "C", "T", "KK", "U", "KI", "M", "KE", "Sk", "KN"], "p": ["parse", "data", "wp", "jp", "post", "P", "params", "n", "l", "patch", "pre", "py", "tp", "up", "t", "bp", "c", "y", "ap", "per", "array", "pos", "pi", "u", "o", "j", "e", "np", "point", "lp", "fp", "at", "x", "ps", "q", "pe", "po", "pp", "op", "vp", "sp", "part", "cp", "ip", "parser", "a", "r", "span"], "i": ["f", "eni", "li", "h", "I", "is", "di", "in", "ik", "ri", "id", "gi", "m", "index", "ai", "io", "n", "si", "l", "ui", "mu", "v", "it", "c", "ie", "d", "y", "u", "pi", "o", "j", "ii", "qi", "hi", "b", "x", "oi", "ind", "ini", "z", "ci", "mi", "ip", "xi", "chi", "ix", "bi"], "sum": ["parse", "amount", "sort", "skip", "summary", "ul", "miss", "plus", "out", "mass", "cum", "count", "cost", "si", "total", "ass", "up", "style", "result", "num", "empty", "zero", "use", "inc", "acc", "weight", "dev", "info", "offset", "fat", "sav", "fee", "scale", "sk", "mem", "sp", "size", "mean", "us", "sh", "average", "spread", "cur", "loss", "alpha", "rank", "um", "vol", "net", "Sum"], "k": ["kind", "kid", "uk", "ko", "ik", "ad", "ek", "ijk", "id", "kick", "keep", "key", "kn", "ck", "tk", "v", "ok", "c", "mk", "kl", "spec", "acc", "kh", "u", "o", "unk", "j", "b", "x", "ku", "kw", "kk", "ak", "sk", "ka", "gh", "ky", "kat", "z", "ks", "ask", "ki", "ke", "dk", "q", "isk"]}}
{"code": "import java.util.*;\\nclass Main {\\n    public static void main(String[] args) {\\n\tScanner sc = new Scanner(System.in);\\n\tint N = sc.nextInt();\\n\tint[] l = new int[N];\\n\tint max = 0;\\n\tint maxI = 0;\\n\tfor(int i = 0; i<N; i++) {\\n\t    l[i] = sc.nextInt();\\n\t    if(max < l[i]) {\\n\t\tmax = l[i];\\n\t\tmaxI = i;\\n\t    }\\n\t}\\n\tint others = 0;\\n\tfor(int i = 0; i<N; i++) {\\n\t    if(i == maxI) continue;\\n\t    others += l[i];\\n\t}\\n\tif(others > max) {\\n\t    System.out.println(\"Yes\");\\n\t}else {\\n\t    System.out.println(\"No\");\\n\t}\\n    }\\n}", "target": "25", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "st", "sche", "sb", "cle", "cv", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "anc", "g", "scope", "ca", "SC", "se", "c", "scan", "cs", "cl", "cus", "screen", "uc", "Sc", "system", "sq", "sci", "cr", "src", "rc", "cer", "sr", "enc", "sp", "ci", " SC", "sch", "sh", "parser", "ec", "cur", "sem", "ser", "lc"], "N": ["K", "Len", "I", "L", "Z", "Size", "Ni", "X", " n", "Node", "P", "Q", "NS", "H", "n", "NC", "S", "Y", "D", "NL", "NO", "MN", "W", "F", "V", "No", "R", "NB", "NN", "C", "T", "Num", "M", "Max", "Ne", "NR", "Part", "Ns", "ND", "NT", "O"], "l": ["f", "li", "list", "ul", "L", "ml", "ol", "lin", "lu", "live", "lf", "limit", "m", "n", "left", "ll", "lv", "v", "t", "like", "c", "rl", "kl", "wl", "ls", "dl", "il", "le", "u", "e", "o", "ld", "lo", "loc", "s", "lp", "p", "b", "ln", "nl", "len", "sl", "line", "fl", "la", "lc", "el"], "max": ["list", "orig", "none", "is", "range", "act", "no", "length", "id", "limit", "count", "default", "active", "n", "step", "total", "last", "min", "sum", "only", "rest", "end", "c", "conf", "first", "self", "chain", "num", "can", "ms", "ax", "always", "u", "cache", "best", "auto", "p", "mod", "x", "and", "w", "start", "Max", "res", "MAX", "with", "size", "k", "init", "right", "parent", "q"], "maxI": [" maxi", "MaxL", "mini", "maxi", "MaxN", " maxN", "minI", "maxF", "minF", "maxL", " maxL", "maxN", "minN", "MaxF", " maxF", "minL", "Maxi", "MaxI"], "i": ["f", "eni", "li", "fi", "I", "data", "di", "in", "ri", "ni", "cli", "id", "gi", "index", "ai", "io", "ji", "n", "si", "ori", "ui", "mu", "phi", "v", "it", "c", "ie", "y", "uli", "uri", "zi", "u", "pi", "o", "e", "j", "info", "ii", "qi", "s", "p", "ti", "b", "oi", "x", "hi", "slice", "abi", "ini", "ci", "mi", "ip", "xi", "init", "iu", "ix", "bi", "r"], "others": ["followsets", "nulls", "Othersets", "partd", "Otheris", "followes", " otheri", " otherses", "pulles", "otheres", "otherd", "othersets", "structses", " otherries", " otherd", "parts", "partses", "structs", "otherses", "Otheri", "otheris", "follows", "pulls", "otheri", "pullis", "nullries", "pullsets", "nulli", "otherss", "Others", "structd", " otherss", "partss", "Otheres", "structss", "Otherries", "otherries", "followis"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  \\n  public static void main (String []args){\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    \\n    if (N == 1) { \\n      System.out.println(1); return; \\n    }\\n    \\n    int max = Integer.MIN_VALUE;\\n    for (int i = 2; i <= N; i++) {\\n      for (int j = 2; j <= N; j++ ){\\n        double pow = Math.pow((double)i, (double)j);\\n        if (pow > N) {\\n          break;\\n        }\\n        max = Math.max((int)pow, max);\\n      }\\n    }\\n    System.out.println(max);\\n  }\\n}\\n", "target": "143", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "search", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "server", "ca", "SC", "se", "c", "scan", "sw", "cs", "cl", "uc", "acc", "Sc", "system", "sub", "sci", "Scan", "cr", "src", "ocr", "rc", "cer", "sp", "ci", " SC", "sch", "sh", "ec", "desc", "sem"], "N": ["NE", "K", "Len", "I", "L", "Z", "Size", "NI", "X", " n", "Ni", "P", "Q", "NS", "H", "n", "NC", "S", "Y", "D", "J", "F", "V", "NG", "R", "NB", "NN", "T", "C", "Num", "SIZE", "M", "Max", "NA", "Ne", "size", "Ns", "ND", "NT", "O"], "max": ["rand", "value", "parse", "div", "wrap", "orig", "plus", "out", "no", " min", "az", "id", "limit", " Max", "index", "key", "random", "default", "count", "active", "n", "step", "total", "gt", "height", "patch", "pop", "last", "min", "sum", "diff", "rest", "end", "conf", "c", "cat", "num", "d", "pos", "ax", "next", "add", "power", "best", "point", "depth", "p", "mod", "x", "Max", "MAX", "size", "k", "maximum", "average", "init", "pad", "right", "now", "rank", "std", "parent", "scale", "q"], "i": ["f", "li", "I", "is", "di", "in", "ri", "ni", "id", "key", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "phi", "min", "v", "ie", "d", "y", "zi", "u", "pi", "ii", "qi", "p", "hi", "b", "x", "ind", "oi", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "chi", "bi"], "j": ["f", "uj", "li", "h", "jl", "jj", "jo", "oj", "jp", "key", "m", "pr", "ji", "n", "si", "l", "dj", "jc", "v", "g", "it", "ja", "c", " dj", "end", "ie", "bj", "y", "aj", "u", "o", "J", "js", "ii", "qi", "p", "b", "x", "z", "k", "ij", "q"], "pow": ["Powe", "powe", " paw", " pOW", "ppOW", "Pow", "paw", " pcow", "ppowed", " powell", "ppows", "bpaw", " powe", "bpowe", "Powed", "jpows", "jpow", "pOW", "pows", "posh", "ppcow", "bpow", "POW", " powed", "Powell", " posh", "Pows", "jposh", "Paw", "ppow", "powed", "jpowell", "powell", " pows", "pcow", "Posh", "bpowed", "Pcow"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main {\\n    public static void main(String[] args){\\n\\n        Scanner s = new Scanner(System.in);\\n\\n      \tint sc = s.nextInt();\\n\\n        int judge = 0;\\n        for (int i = 1; i < sc+1; i++) {\\n            if((String.valueOf( i ).length())%2 ==1){\\n                judge++;\\n            }\\n        }\\n        System.out.println(judge);\\n\\n    }\\n}", "target": "135", "substitutes": {"s": ["f", "ts", "h", "is", "sb", "in", "out", "ssl", "gs", "south", "n", "si", "l", "S", "ss", "v", "se", "c", "er", "ms", "ls", "es", "qs", "services", "xs", "p", "as", "b", "sets", "stats", "ns", "w", "ps", "ws", "os", "ins", "ings", "ses", "rs", "states", "fs", "ds", "bis", "r"], "sc": ["osc", "ch", "nc", "cli", "pl", "cv", "cc", "bc", "esc", "ss", "sec", "scope", "SC", "c", "scan", "cs", "uc", "cl", "sw", "inc", "acc", "Sc", "loc", "dc", "sq", "sci", "cr", "src", "sync", "rc", "sk", "scl", "sp", "ci", "sh", "desc", "screen", "lc"], "judge": ["journalce", "duger", "judice", "judgate", "Judges", "judges", "Judgement", "junge", "journalge", "Judge", "junvey", "judvey", "jugate", "judger", "junce", "jges", "mungement", "juice", "juce", "junice", "jugement", "journalice", "dugement", "munge", "jge", "judce", "journalvey", "juvey", "judgement", "jger", "duge", "juge", "mungate", "jgement", "dugate", "juges", "Judger", "munger", "juger"], "i": ["f", "li", "fi", "h", "I", "vi", "di", "in", "ri", "ni", "id", "gi", "index", "ai", "io", "ji", "si", "l", "ui", "mu", "phi", "v", "it", "c", "ie", "uri", "zi", "u", "pi", "o", "j", "e", "ii", "qi", "hi", "ti", "p", "x", "oi", "sci", "ini", "start", "z", "ci", "iu", "xi", "ip", "init", "chi", "multi", "ix", "bi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u5165\u529b\u306e\u53d6\u5f97\\n      \tint r = sc.nextInt();\\n      \tString s = sc.next();\\n      \tString[] p = s.split(\"\");\\n      \tint half = r / 2;\\n      \tboolean flg = true;\\n      \tif (r % 2 == 1) {\\n      \t    System.out.println(\"No\");\\n      \t    return;\\n      \t}\\n      \tfor(int i=1; i<=half; i++) {\\n      \t    if (!p[i].equals(p[half+i])) flg = false;\\n      \t}\\n\\n        if (flg) System.out.println(\"Yes\");\\n      \telse System.out.println(\"No\");\\n    }\\n}\\n\\n", "target": "161", "substitutes": {"sc": [" pars", " scorer", " Sc", "ann", " arr", " surf", "sb", " scanner", " sm", " sl", "ss", " ans", "SC", " rc", "se", "scan", " src", "Sc", "sq", " res", " app", " SC", " ar", "parser", " sp", " ser", " scr"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n\tint N = sc.nextInt();\\n\tint A[] = new int[N];\\n\tint B[] = new int[N];\\n\tint C[] = new int[N];\\n\t\\n\tsc.nextLine();\\n\tfor (int i=0; i<N; i++){\\n\t  A[i] = sc.nextInt();\\n\t}\\n    sc.nextLine();\\n\tfor (int i=0; i<N; i++){\\n\t  B[i] = sc.nextInt();\\n\t}\\n\tsc.nextLine();\\n\tfor (int i=0; i<N-1; i++){\\n\t  C[i] = sc.nextInt();\\n\t}\\n\t\\n    int cuisine = A[0];\\n\tint SatisfacationP = B[cuisine-1];\\n    \\n\tfor (int i=1; i<N; i++){\\n\t  cuisine = A[i];\\n\t  SatisfacationP += B[cuisine-1];\\n\t  if((A[i-1] + 1) == A[i]){\\n\t    SatisfacationP += C[cuisine-2];\\n      }\\n\t}\\n    \\n    System.out.println(SatisfacationP);\\n  }\\n}", "target": "223", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "exp", "mc", "is", " Sc", "nc", "ann", "out", "sb", "sche", "cms", "cli", "sv", "cle", "proc", "cv", "search", "esc", "bc", "cc", "com", "asc", "pc", "ser", "ss", "sec", "server", "gc", "g", "scope", "anc", "cus", "SC", "se", "c", "scan", "cs", "cl", "uc", "ctx", "reader", "can", "spec", "cor", "Sc", "system", "sq", "sub", "sci", "row", "Scan", "cr", "sf", "sync", "rc", "cer", "sr", "soc", "sys", "sp", " SC", "sch", "sh", "parser", "sem", "screen", "lc", " scr"], "N": ["CNN", "G", "NE", "K", "ne", "Len", "I", "Bi", "L", "Z", "Size", "Sn", "X", " n", "Node", "Ni", "P", "Q", "NS", "H", "n", "Y", "S", "Na", "E", "D", "NL", "Network", "network", "W", "J", "F", "V", "No", "NM", "R", "NB", "Nat", "NN", "T", "Num", "M", "NA", "Ne", "NR", "Part", "Ns", "ND", "NT", "O", "KN"], "A": ["If", "App", "G", "Ant", "SA", "Az", "I", "L", "AA", "Java", "Input", "API", "P", "Init", "S", "Y", "As", "IA", "GA", "D", "AP", "AI", "Ma", "Area", "MA", "Act", "BA", "F", "At", "CA", "Ca", "AC", "The", "An", "U", "T", "Ar", "M", "Alpha", "NA", "First", "Average", "AR", "LA", "AMI", "mA", "Auth", "Array", "Na", "a"], "B": ["Both", "QB", "G", "Blocks", "But", "I", "Bi", "L", "BB", "DB", "CB", "Bah", "BF", "P", "GB", "Beta", "S", "Y", "UB", "E", "D", "PB", "Two", "TB", "Library", "SB", "BI", "LB", "F", "Blue", "BA", "V", "MB", "R", "b", "NB", "WB", "M", "BBC", "Bs", "BC", "O", "OB"], "C": ["Code", "G", "CNN", "K", "I", "L", "X", "Count", "P", "Q", "H", "S", "Y", "E", "D", "c", "SC", "CI", "F", "Ch", "CL", "V", "Control", "Cs", "CA", "R", "EC", "T", "CR", "U", "M", "CS", "Cu", "CC", "DC", "CU", "BC", "O", "Custom"], "i": ["f", "eni", "li", "fi", "I", "mini", "is", "di", "in", "cli", "ni", "ri", "id", "gi", "m", "inner", "ami", "ai", "index", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "g", "it", "adi", "c", "ie", "d", "y", "uri", "zi", "u", "pi", "e", "j", "o", "info", "ii", "ei", "qi", "ti", "p", "hi", "oi", "x", "b", "sup", "abi", "ini", "start", "yi", "z", "ci", "mi", "iu", "ip", "xi", "init", "chi", "ix", "multi", "bi", "a", "r"], "cuisine": ["luise", "cuenge", "homeenge", "homeisite", "ciisine", "acince", "recipport", "cuinea", "ouisine", "cienge", "kuise", "Luisite", "reciice", "cupport", "buisine", "guine", "ciine", "uuince", "reciisine", "homeine", "acice", "homeisine", "uine", "kuisite", "ciino", "ucirin", "Luise", "luinea", "ciistor", "uisine", "cuise", "cuino", "kuinea", "luisite", "acpport", "cuince", "ucino", "gupport", "uuice", "guice", "cuisite", "cuistor", "ouice", "cuine", "reciine", "buistor", "upport", "ucisine", "cuice", "buino", "ciirin", "guisine", "buirin", "ciisite", "oupport", "uice", "Luinea", "Luisine", "ucistor", "uenge", "cuirin", "acisine", "uupport", "luisine", "kuisine", "uisite", "uuisine", "ouince"], "SatisfacationP": ["SatisfacATIONPoint", "SatisfacorationPoint", "SatisfaciationPs", "SatisfacationPs", "Satisfacationp", "SatisfacatingP", "SatisfacorationI", "SatisfcationP", "SatisfacATIONS", "SatisfacalingPoint", "SatisfacATIONI", "SatisfacalingPs", "SatisfAcationalS", "Satisfacatingp", "SatisfacarationPoint", "SatisfAcationI", "SatisfAcationp", "SatisfACATIONPs", "SatisfaciationP", "SatisfACationPoint", "SatisfacarationS", "SatisfACationPrice", "SatisfACATIONPrice", "SatisfAcationalPoint", "SatisfaciationPoint", "Satisfcatingp", "SatisfacATIONPs", "SatisfacationalPoint", "SatisfacationI", "SatisfcatingP", "SatisfacalingPrice", "SatisfACATIONP", "SatisfAcationS", "SatisfacatingPoint", "Satisfacarationp", "SatisfacationalI", "Satisfacationalp", "SatisfacalingP", "SatisfAcationalP", "SatisfAcationalI", "SatisfAcationP", "SatisfacorationP", "SatisfcatingPoint", "SatisfcationPoint", "SatisfacationPoint", "SatisfACationP", "Satisfacorationp", "SatisfaciationPrice", "SatisfacationalS", "SatisfAcationalp", "SatisfacarationP", "SatisfacationalP", "SatisfacATIONP", "SatisfAcationPoint", "SatisfACationPs", "SatisfacationPrice", "SatisfacATIONPrice", "SatisfACATIONPoint", "Satisfcationp", "SatisfacationS", "SatisfacATIONp"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Jaynil\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        BGreatOceanView solver = new BGreatOceanView();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BGreatOceanView {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            int n = in.nextInt();\\n            int h[] = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                h[i] = in.nextInt();\\n            }\\n            int max = 0;\\n            int ans = 0;\\n            for (int i = 0; i < n; i++) {\\n                if (h[i] >= max) {\\n                    max = h[i];\\n                    ans++;\\n                }\\n            }\\n            out.println(ans);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n\\n", "target": "7", "substitutes": {"inputStream": ["InputStream", "outputStreamer", "inputStreamer", "connectionStreamer", "outputSteam", " inputSteam", " inputView", "outputView", "connectionStream", "InputStreamer", "InputView", "Inputstream", "InputSteam", "connectionstream", " inputstream", "connectionSteam", "outputstream", "inputstream", "inputView", "inputSteam"], "outputStream": ["outputStreamer", "inputStreamer", "connectionStreamer", "OutputStream", "OutputView", "outputSteam", "OutputSteam", " outputSteam", " outputView", "Outputstream", "writeStream", "outputView", "connectionStream", " outputstream", "inputView", "writeStreamer", "outputstream", "inputstream", "connectionSteam", "inputSteam", "writeSteam"], "in": ["gen", "rec", "arg", "name", "path", "cin", "data", "input", "version", "lin", "log", "err", "din", "pin", "id", "inner", "thin", "image", "config", "io", "index", "l", "nin", "IN", "inn", "min", "con", "c", "bin", "d", "isin", "request", "kin", "read", "inc", "source", "pull", "this", "info", "user", "inside", "url", "str", "s", "x", "pass", "ic", "file", "vin", "ini", "sin", "login", "win", "again", "work", "ins", "conn", "connection", "init", "In", "inf", "r"], "out": ["obj", "gen", "list", "client", "path", "string", "data", "input", "off", "net", "version", "outside", "call", "prefix", "log", "err", "group", "image", "inner", "io", "window", "exec", "writing", "server", "scope", "up", "v", "print", "page", "write", "bin", "OUT", "ext", "array", "inc", "output", "buffer", "ex", "this", "o", "user", "target", "point", "to", "cache", "s", "x", "error", "file", "Out", "w", "problem", "sync", "pool", "again", "view", "temp", "line", "copy", "conn", "writer", "outer", "init", "connection", "outs", "engine", "In", "lock", "parent", "r"], "solver": ["Solution", "setsolution", "Solver", "Solving", "solution", "ssolver", "ssolve", "setsistor", "solve", "esolving", "esolve", "esolution", "ssolution", "solving", "Sistor", "ssolving", "ssistor", "Solve", "esolver", "setsolve", "sistor", "setsolver"], "testNumber": ["testNumbers", "TestNo", " trialNo", "TestNumbers", " testNo", " trialNumber", "TestNum", " testNumbers", " trialNum", "testNum", "TestNumber", " testNum", " trialNumbers", "testNo"], "n": ["f", "ne", "nc", "no", "nt", "ni", "count", "m", "number", "l", "min", "t", "c", "d", "num", "y", "sn", "u", "e", "o", "j", "s", "p", "b", "x", "ns", "ln", "nb", "en", "w", "N", "z", "k", "conn", "nn"], "h": ["f", "eh", "ch", "hs", "ph", "ih", "bh", "act", "oh", "id", "count", "m", "index", "hh", "H", "han", "l", "he", "g", "v", "c", "ah", "d", "y", "adh", "u", "hr", "o", "e", " H", "p", "hi", "b", "x", "rh", "ha", "w", "wh", "hash", "hm", "gh", "z", "hp", "k", "ht", "sh", "uh", "body", "q", "r"], "i": ["f", "li", "fi", "I", "vi", "mini", "is", "di", "anti", "ik", "ni", "ri", "id", "gi", "inner", "index", "ai", "io", "si", "ui", "phi", "g", "it", "ie", "y", "uri", "u", "e", "pi", "j", "info", "o", "ii", "qi", "p", "b", "x", "oi", "abi", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "multi", "ki", "bi", "my"], "max": ["rand", "none", "plus", "range", "no", "az", "id", "limit", "m", "default", "man", "han", "except", "ase", "total", "last", "min", "sum", "end", "ca", "c", "conf", "cat", "d", "ms", "can", "ax", "mad", "ra", "auto", "as", "p", "x", "mod", "pass", "cas", "w", "Max", "MAX", "with", "size", "k", "ras", "an", "right", "alpha", "rank", "parent", "r"], "ans": ["ams", "ANS", "cons", " scans", "ats", "ann", "act", "aned", "anon", "reads", "amps", "AN", " means", "ss", "na", "anc", "ase", "ano", "errors", "ms", "lan", "can", "ls", "ax", "es", "ions", "ids", "ens", "aus", "s", "as", "x", "ns", "ants", "sk", "eps", "os", "ins", "ks", "ana", "ras", "rs", "an", "ians", "outs", "ars", "span", "ds", "a", "ons"], "reader": ["client", "keeper", "data", "input", "inner", "io", "report", "service", "null", "server", "loader", "driver", "port", "result", "er", "entry", "per", "feed", "pointer", "resource", "read", "buffer", "re", "source", "e", "ry", "rer", "iter", "row", "reading", "slice", "rc", "Reader", "file", "or", "rot", "ro", "table", "writer", "parser", "body", "handler", "lock", "method", "r"], "tokenizer": ["tokenize", "Tokener", "Tokenizer", "initialization", " tokeniter", "localize", "normalization", "okener", "localizer", " tokenner", "okeniter", "Tokenizers", " tokenization", "normaliter", "tokeniter", "okenization", "tokeniser", "okenizers", "authorizer", " tokeniser", "localiser", "Tokenization", "Tokenner", "characterization", "normalize", "tokenizers", " tokenizers", "authorize", "characterizer", "authorization", "initializer", "characterizers", "Tokeniser", "authorner", "initialize", "normalizer", "Tokenize", "tokenner", " tokenize", "tokenization", "localer", "okenizer", " tokener", "okenner", "okenize", "tokener", "initialner", "characteriser"], "stream": ["f", "content", "valid", "channel", "client", "path", "string", "raw", "data", "input", "console", "context", "log", "image", "socket", "object", "document", "model", "form", "ream", "feed", "resource", "read", "output", "source", "buffer", "serial", "row", "file", "w", "slice", "response", "pool", "trans", "view", "temp", "Stream", "writer", "connection", "body", "handler", "lock", "r"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\\n\t\tArrayList<Integer> array = new ArrayList<Integer>();\\n\t\tInteger sum = 0;\\n\t\tint x = 0;\\n\t\t\\n\t\twhile(sc.hasNext()) {\\n\t\t\tInteger a = sc.nextInt();\\n\t\t\tsum += a;\\n\t\t\tarray.add(a);\\n\t\t}\\n\\n\t\tif(sum > n) {\\n\t\t\tSystem.out.println(-1);\\n\t\t} else {\\n\t\t\tSystem.out.println(n - sum);\\n\t\t}\\n\\n\t\tsc.close();\\n\\n\t}\\n\\n}", "target": "108", "substitutes": {"sc": ["ner", "ch", "osc", "cont", "nc", "sche", "sb", "cv", "search", "esc", "bc", "cc", "asc", "pc", "ss", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "cus", "ctx", "cor", "Sc", "system", "s", "sub", "sq", "dc", "sci", "con", "cr", "src", "sf", "sync", "rc", "cer", "cb", "sr", "soc", "sp", "sch", "sh", "ec", "tc", "cur", "parser", "coll", "sem", "ser", "lc"], "n": ["f", "h", "nc", "in", "nt", "ni", "count", "number", "l", "v", "t", "c", "d", "num", "y", "sn", "u", "e", "o", "j", "cn", "s", "p", "un", "b", "ns", "nl", "en", "nb", "ln", "N", "z", "k", "mn", "size", "i", "nn", "net", "span"], "m": ["f", "nm", "h", "mc", "in", "mu", "v", "c", "d", "ms", "y", "num", "cm", "e", "o", "j", "mm", "p", "b", "M", "N", "z", "k", "mn", "mi", "i", "r"], "array": ["list", "instance", "range", "group", "image", "number", "collection", "object", "arr", "ac", "address", "book", "order", "app", "ray", "area", "result", "scan", "air", "batch", "cache", "api", "auto", "system", "archive", "ange", "stack", "all", "row", "answer", "action", "response", "arrow", "view", "average", "i", "an", "coll", "Array", "shared"], "sum": ["f", "parse", "sim", "shape", "sam", "sort", "summary", "miss", "skip", "am", "out", "mass", "in", "match", "cum", "count", "index", "seed", "unit", "si", "total", "na", "norm", "min", "diff", "conf", "c", "se", "num", "max", "zero", "use", "su", "add", "u", "weight", "pack", "s", "member", "sa", "offset", "b", "all", "sub", "missing", "start", "len", "scale", "mem", "part", "size", "mean", "us", "spread", "i", "average", "alpha", "um", "Sum"], "x": ["f", "xc", " index", "h", "Index", "xx", "X", "index", "v", "c", "y", "pos", "dx", "ax", "ex", "batch", "e", "j", "xs", "p", "w", "z", "work", "xa", "xi", "ix", "xp"], "a": ["f", "value", "data", "instance", "ga", "A", "ab", "ma", "id", "g", "ai", "integer", "l", "ea", "ac", "null", "ba", "da", "app", "ca", "area", "c", "aa", "ie", "result", "num", "entry", "d", "ce", "aj", "per", "va", "add", "e", "u", "o", "aux", "s", "sa", "p", "b", "ia", "as", "ha", "sup", "au", "k", "i", "an", "alpha", "la"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String []args){\\n        Scanner in = new Scanner(System.in);\\n\\n        long a = in.nextLong();\\n        long b = in.nextLong();\\n        long c = in.nextLong();\\n\\n\\n        if(a==b && b==c)\\n        {\\n            System.out.println(\"No\");\\n        }\\n        else{\\n            if(a==b || b==c || a==c)\\n            {\\n                System.out.println(\"Yes\");\\n            }\\n            else\\n            {\\n                System.out.println(\"No\");\\n            }\\n        }\\n\\n    }\\n\\n}\\n", "target": "117", "substitutes": {"in": ["f", "h", "rec", "between", "is", "input", "out", "lin", "token", "log", "err", "cli", "din", "pin", "m", "inner", "socket", "readable", "n", "nin", "l", "exec", "IN", "inn", "g", "min", "con", "scan", "doc", "bin", "d", "reader", "isin", "query", "kin", "inc", "re", "source", "ex", "e", "str", "s", "as", "x", "ln", "pass", "rin", "ini", "login", "win", "again", "ins", "conn", "i", "connection", "init", "arin", "In", "lib", "inf", "r"], "a": ["f", "am", "ga", "A", "ab", "ad", "ai", "n", "ea", "l", "ac", "ba", "da", "ca", "area", "aa", "asa", "d", "y", "ar", "pa", "u", "e", "o", "j", "af", "auto", "s", "sa", "p", "as", "x", "w", "z", "k", "i", "an", "ae", "alpha", "la"], "b": ["f", "bf", "br", "h", "base", "sb", "db", "ab", "ad", "ub", "bc", "n", "l", "B", "wb", "ob", "ba", "fb", "v", "g", "t", "aa", "d", "y", "rb", "u", "e", "lb", "o", "j", "bb", "s", "p", "x", "nb", "cb", "ib", "bs", "bd", "k", "i", "abb", "be", "bi", "eb", "r"], "c": ["f", "xc", "h", "ch", "nc", "cy", "cc", "n", "l", "ac", "g", "v", "ca", "t", "con", "cs", "cl", "d", "y", "ce", "cm", "u", "e", "dc", "p", "x", "C", "cb", "w", "q", "cu", "sc", "z", "ci", "k", "ct", "cp", "i", "ec", "lc", "r"]}}
{"code": "import java.util.*;\\n \\nclass Main{\\n  public static void main(String[] args){\\n    Scanner scan = new Scanner(System.in);\\n    long n = scan.nextLong();\\n    long c1[] = new long[10000];\\n    long c2[] = new long[10000];\\n    long a=Long.MAX_VALUE;\\n    int g = 0;\\n    \\n    for(long i=1;i<(long)Math.sqrt(n)+1;i++){\\n    \tif(n%i==0){\\n        \tc1[g]=i;\\n          \tc2[g]=n/i;\\n          \tg++;\\n        }\\n    }\\n    \\n    for(int j=0;j<g;j++){\\n      a = Math.min(a,c1[j]+c2[j]-2);\\n    }\\n    System.out.println(a);\\n  }\\n}\\n", "target": "157", "substitutes": {"scan": ["store", "stat", "parse", "ner", "skip", "car", "ann", "watch", " scanner", "out", "in", "fan", "search", "ignore", "ai", "na", "server", "sign", "se", "cat", "er", "can", "reader", "query", "feed", "read", "connect", "system", "Scan", "ln", "sync", "sin", "sc", "ans", "win", "sys", "parser", "an", "walk", "get", "nn", "run", "clean", "r"], "n": ["f", "nan", "h", "ne", "nc", "net", "nt", "m", "number", "l", "v", "t", "c", "d", "num", "y", "network", "u", "e", "o", "cn", "s", "dn", "p", "b", "x", "ns", "ln", "nb", "w", "N", "z", "k", "size", "nu", "an", "nn", "r"], "c1": ["Cup", " cfirst", " c0", " cone", "C2", "cup", "pcfirst", "lc1", "lc3", "C1", "cc1", "c0", "Cfirst", "lcone", "C3", "cc2", "pc2", "cfirst", "lc2", "C0", "cone", "ccup", " c3", "pc1", " cup", "c3", "ccone", "pc0", "Cone"], "c2": ["CTwo", "c4", "C5", " c0", "m2", "rc2", "Ctwo", "C2", "rc5", "C1", "cTwo", "cc1", "cc0", "c0", "ccsecond", "mtwo", "ctwo", "Csecond", "cc2", " c4", "m1", " ctwo", "mTwo", "C0", "C4", " csecond", " c5", "rc4", "rc1", "c5", " cTwo", "csecond"], "a": ["f", "sta", "ga", "A", "ab", "ma", "count", "ai", "active", "ea", "ac", "na", "aw", "ba", "da", "area", "ca", "c", "aa", "d", "aj", "va", "pa", "e", "u", "af", "aaa", " fa", "as", "sa", "b", "ia", "p", "au", "z", "ata", "wa", "qa", "ana", "tta", "an", "ae", "alpha", "la"], "g": ["f", "G", "h", "eg", "og", "mg", "ga", "gu", "group", "gi", "m", "gs", "gy", "ai", "sg", "l", "gt", "gc", "v", "t", "vg", "c", "pg", "d", "y", "ng", "ge", "u", "e", "gl", "game", "p", "b", "x", "ia", "ig", "w", "gh", "go", "gd", "yg", "k", "z", "big", "gm", "gam", "gn", "gg", "q", "r"], "i": ["f", "eni", "li", "I", "vi", "di", "ri", "ni", "gi", "id", "m", "ai", "io", "si", "l", "ui", "v", "phi", "t", "it", "c", "ie", "d", "y", "zi", "u", "pi", "e", "o", "ei", "ii", "qi", "hi", "p", "b", "x", "oi", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "ix", "bi", "r"], "j": ["f", "uj", "obj", "h", "jl", "jj", "jo", "oj", "jp", "jen", "key", "m", "ji", "l", "dj", "jc", "v", "ja", "c", "ie", "d", "bj", "y", "aj", "u", "e", "J", "js", "ii", "qi", "p", "job", "b", "x", "q", "je", "z", "k", "ij", "jet"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int sum = 0;\\n        if (a + b >= 0 && b >= 0) {\\n            for (int i = 0; i < a - 1; i++) {\\n                sum += b + 1 + i;\\n            }\\n        }\\n        if (a + b > 0 && b < 0) {\\n            for (int i = 0; i < a; i++) {\\n                sum += b + (i);\\n            }\\n        }\\n        if (a + b <= 0 && b < 0) {\\n            for (int i = 0; i < a - 1; i++) {\\n                sum += b + (i);\\n            }\\n        }\\n        System.out.println(sum);\\n    }\\n}", "target": "91", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "sb", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "na", "server", "scope", "g", "anc", "ca", "SC", "se", "c", "scan", "cs", "sw", "uc", "com", "cus", "cl", "acc", "Sc", "sq", "sci", "cr", "src", "sync", "rc", "sr", "enc", "soc", "sl", "sp", "ci", " SC", "sh", "tc", "ec", "cur", "sem", "ser"], "a": ["f", "sta", "ama", "base", "am", "ga", "A", "ab", "ma", "ad", "oa", "count", "m", "index", "ai", "n", "ea", "ac", "na", "ba", "da", "ca", "area", "c", "aa", "d", "y", "ar", "aj", "va", "pa", "u", "e", "o", "api", "aaa", "s", "fa", "sa", "as", "x", "p", "ia", "w", "au", "z", "art", "an", "ae", "ada", "alpha", "la"], "b": ["f", "gb", "pb", "h", "base", "sb", "bh", "ab", "db", "m", "bc", "n", "l", "B", "wb", "ba", "v", "g", "t", "c", "bar", "d", "y", "rb", "u", "e", "lb", "j", "o", "api", "bb", "auto", "s", "bi", "p", "x", "bis", "nb", "cb", "w", "ib", "bot", "bd", "bs", "k", "big", "abb", "eb", "be", "fb", "r"], "sum": ["stat", "parse", "comment", "sort", "skip", "cal", "ul", "base", "miss", "summary", "plus", "out", "help", "mass", "err", "cum", "count", "key", "cost", "text", "total", "ss", "ass", "gram", "g", "min", "diff", "up", "sign", "result", "style", "cat", "bin", "num", "um", "max", "su", "use", "add", "weight", "frac", "info", "dev", "cache", "pack", "loc", "share", "fat", "pass", "fee", "hash", "sp", "part", "mean", "size", "work", "us", "sh", "average", "spread", "cur", "loss", "alpha", "scale", "vol", "Sum"], "i": ["f", "eni", "li", "fi", "I", "di", "in", "anti", "ri", "ni", "ami", "id", "gi", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "g", "v", "phi", "it", "c", "ie", "d", "y", "uri", "zi", "u", "e", "o", "pi", "j", "api", "ii", "info", "qi", "ei", "p", "ti", "oi", "x", "ic", "ini", "yi", "z", "ci", "mi", "ip", "iu", "xi", "isi", "ix", "multi", "bi", "r"]}}
{"code": "import java.util.*;\\nimport java.util.stream.Collectors;\\n\\nclass Main {\\n    public static void main(String args[]) {\\n        Scanner sc = new Scanner(System.in);\\n      \\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int c = sc.nextInt();\\n        int d = sc.nextInt();\\n        int result = 0;\\n\\n        for (int i = a; i <= b; i++) {\\n            for (int j = c; j <= d; j++) {\\n                if (i == j) {\\n                    result++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (result > 0) {\\n            result--;\\n        }\\n\\n        System.out.println(result);\\n    }\\n}", "target": "47", "substitutes": {"sc": ["parse", "ner", "osc", "cont", "exp", " Sc", "nc", "sche", "sb", "cli", "core", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "sec", "scope", "ca", "SC", "se", "scan", "cs", "sw", "cl", "cus", "uc", "ctx", "acc", "cor", "Sc", "system", "sq", "sci", "cr", "ocr", "sf", "sync", "rc", "cer", "sr", "src", "soc", "or", "ci", "sp", " SC", "tc", "cur", "desc", "coll", "ser", "lc"], "a": ["f", "ama", "base", "am", "ga", "A", "ab", "ad", "m", "ai", "n", "ea", "ac", "na", "da", "ba", "ca", "area", "aa", "asa", "aj", "va", "api", "aaa", "fa", "sa", "p", "ia", "as", "au", "ak", "an", "ada", "ae", "alpha", "la"], "b": ["f", "h", "db", "ab", "ad", "bc", "n", "l", "B", "ob", "g", "v", "ba", "fb", "ca", "aa", "y", "e", "o", "lb", "bb", "s", "p", "x", "cb", "ib", "bs", "k", "be", "eb", "r"], "c": ["f", "cd", "cf", "ch", "cy", "m", "cc", "bc", "n", "l", "ac", "g", "ca", "cs", "uc", "y", "u", "e", "o", "s", "dc", "p", "x", "C", "cr", "cb", "w", "q", "cu", "z", "ci", "k", "lc", "r"], "d": ["f", "cd", "nd", "h", "dt", "db", "ad", "id", "m", "n", "l", "g", "v", "da", "df", "t", "D", "dx", "u", "e", "dy", "dc", "p", "x", "w", "dd", "md", "z", "bd", "k", "ded", "ds", "r"], "result": ["valid", "div", "data", "grade", "range", "code", "err", "length", "match", "count", "number", "folder", "search", "cup", "ret", "default", "report", "json", "ver", "runner", "score", "message", "total", "order", "diff", "duration", "success", "expected", "future", "winner", "goal", "draw", "counter", "card", "current", "Result", "status", "division", "date", "row", "error", "answer", "direction", "res", "response", "results", "our", "test", "feature", "desc", "r"], "i": ["f", "li", "h", "I", "is", "di", "ri", "ni", "id", "m", "ai", "io", "ji", "si", "l", "ui", "phi", "v", "it", "ie", "y", "zi", "u", "e", "pi", "ii", "qi", "p", "hi", "oi", "x", "ini", "z", "ci", "mi", "iu", "ip", "ij", "xi", "ki", "bi"], "j": ["f", "uj", "li", "obj", "jl", "jj", "jo", "oj", "jp", "ik", "err", "key", "ji", "n", "si", "dj", "l", "ui", "jc", "v", "it", "ja", "ie", "bj", "y", "aj", "u", "e", "o", "J", "js", "ii", "qi", "p", "job", "ib", "je", "z", "ci", "ij", "xi", "ix", "bi", "q"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main\\n{\\n  public static void main(String[] args)\\n  {\\n\t  int l,w;\\n\t  boolean t=true;\\n\t  Scanner in=new Scanner(System.in);\\n\t  \\n\t  while(t)\\n      { l=in.nextInt();\\n\t    w=in.nextInt();\\n\t\t\\n\t\tif(l==0 && w==0)\\n\t\t{   \\n\t        \\n\t\t\tbreak;\\n\t\t}\\n\t\t\\n        for(int i=0;i<l;i++)\\n        {\\n\t\t    for(int j=0;j<w;j++)\\n\t\t    {\\n\t\t\t    System.out.print(\"#\");\\n\t\t    }\\n\t\t    System.out.println(\"\");\\n\t    }\\n\t\tSystem.out.println(\"\");\\n\t\t\\n\t  }\t\t\\n\t  \\n\\n    \\n  }\\n\\n}", "target": "87", "substitutes": {"l": ["f", "li", "h", "ul", "L", "lin", "ol", "pl", "length", "lu", "lf", "bl", "n", "ll", "v", "lv", "c", "cl", "d", "kl", "y", "wl", "ls", "dl", "u", "e", "o", "ell", "s", "p", "b", "x", "ln", "nl", "sl", "z", "k", "fl", "la", "lc", "el"], "w": ["f", "h", "ow", "hw", "wx", "wt", "n", "aw", "wd", "v", "ww", "c", "sw", "iw", "d", "ew", "y", "wl", "weight", "u", "W", "width", "e", "wall", "s", "p", "b", "x", "wal", "fw", "wk", "wh", "win", "ws", "z", "wa", "k", "work", "sh", "we", "q", "r"], "in": ["f", "h", "data", "is", "input", "out", "lin", "token", "tin", "log", "err", "din", "thin", "socket", "inner", "pin", "n", "nin", "exec", "IN", "inn", "fin", "con", "c", "doc", "bin", "d", "reader", "isin", "query", "kin", "inc", "serv", "buffer", "ex", "source", "inside", "s", "as", "x", "ln", "pass", "en", "rin", "ini", "sin", "login", "again", "ins", "conn", "connection", "init", "arin", "In", "gin", "inf", "r"], "t": ["f", "ts", "tr", "h", "rt", " T", "testing", "m", "wt", "not", "ant", "n", "total", "te", "g", "v", "it", "c", "tt", "y", "u", "e", "o", "at", "p", "b", "all", "T", "tick", "true", "k", "ct", "ta", "test", "tc", "art", "tf", "r"], "i": ["f", "eni", "li", "jl", "I", "vi", "di", "ri", "ni", "ik", "id", "index", "ai", "io", "ji", "n", "si", "ui", "phi", "v", "it", "c", "y", "zi", "u", "pi", "ii", "qi", "p", "b", "x", "oi", "ini", "yi", "z", "ci", "iu", "ip", "xi", "ix", "bi"], "j": ["f", "uj", "li", "obj", "br", "jl", "jj", "jo", "oj", "jp", "err", "key", "index", "fr", "ji", "n", "si", "ui", "py", "jc", "v", "g", "it", "ja", "ie", "bj", "y", "aj", "next", "u", "o", "J", "js", "ii", "pt", "qi", "p", "b", "z", "k", "ij"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String arg[]) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s1 = sc.next();\\n\t\tString s2 = sc.next();\\n \\n\t\ts2 = s2.substring(0, s2.length()-1);\\n\t\tif(s1.equals(s2)) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}\\n\t\telse {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "137", "substitutes": {"arg": ["Args", " line", "name", "input", " arr", " str", " b", "gs", " argument", "v", " arguments", "word", "str", "sub", "p", "b", "_", "Arg", "test", " char", "Str"], "sc": ["parse", "ner", "ch", "osc", "mc", "nc", "sche", "search", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "scope", "ca", "SC", "c", "se", "cs", "scan", "uc", "cl", "sw", "str", "Sc", "sq", "dc", "sub", "sci", "cr", "sync", "rc", "cer", "enc", "sp", " SC", "ct", "sch", "sh", "ec", "cur", "lc"], "s1": ["c01", "S1", "S81", "eone", "Sone", "c0", "c1", " sone", "ws1", "S0", " sFirst", " s81", "sone", "s01", "S01", "ws81", "e01", "s0", "sFirst", "s81", "cone", "wsone", "e1", "SFirst", "wsFirst", "e0"], "s2": ["ssTwo", "ssSecond", "s8", "sTwo", "ptwo", "sstwo", "stringtwo", "S1", "ssecond", "your8", "sessecond", "ssB", "ses8", "ses200", "p2", "Stwo", " sTwo", " s3", "pTwo", " ssecond", " s200", "ss1", "yoursecond", "s3", "SSecond", "string2", "S8", " sSecond", "STwo", "stringTwo", " sB", "stringSecond", "S3", " s8", "S2", "your2", "ses2", "s200", "ss2", "p1", "sB", " stwo", "your200", "stwo", "sSecond"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        for(int i = 0; i < 300; i++) {\\n          String line = sc.nextLine();\\n          String[] l = line.split(\" \");\\n          int H = Integer.parseInt(l[0]);\\n          int W = Integer.parseInt(l[1]);\\n          if(H == 0 && W == 0) {\\n            break;\\n          }\\n\\n          for(int h = 0; h < H; h++) {\\n            for(int w = 0; w < W; w++) {\\n              System.out.print(\"#\");\\n            }\\n            System.out.println();\\n          }\\n          System.out.println();\\n        }\\n    }\\n}", "target": "87", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "out", "search", "esc", "bc", "cc", "asc", "pc", "ss", "sec", "scope", "anc", "SC", "se", "c", "scan", "sw", "cs", "uc", "cl", "Sc", "system", "sci", "cr", "src", "sf", "sync", "rc", "or", "sp", "ci", " SC", "sch", "sh", "parser", "desc", "screen", " scr"], "i": ["f", "li", "fi", "I", "di", "in", "ri", "cli", "ni", "id", "gi", "index", "ai", "io", "n", "si", "ui", "v", "t", "c", "ie", "y", "zi", "uri", "u", "pi", "j", "ii", "qi", "p", "hi", "b", "x", "ti", "oi", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "chi", "multi"], "line": ["f", "comment", "cell", "string", "L", "data", "lin", "out", "in", "lf", "lines", "code", "n", "text", "block", "v", "end", "c", "se", "page", "cl", "entry", "reader", "inline", "source", "Line", "e", "str", "section", "s", "p", "b", "letter", "row", "nl", "pass", "file", "header", "lc", "el", "r"], "l": ["f", "li", "list", "L", "lin", "pl", "split", "n", "left", "ll", "v", "t", "c", "rl", "kl", "d", "wl", "ls", "dl", "le", "u", "e", "o", "lo", "loc", "s", "lp", "p", "b", "ln", "nl", "sl", "fl", "la", "lc", "el"], "H": ["WH", "K", "Length", "I", "L", "PH", "A", "GH", "X", "FH", "P", "Q", "hh", "HK", "HD", "HA", "CH", "Y", "SH", "RH", "OH", "NH", "F", "CL", "V", "HH", "HI", "Ch", "EH", "rh", "T", "MH", "C", "U", "N", "M", "HP", "HB", "Ha", "HS", "Hi", "TH", "HC"], "W": ["WH", "G", "K", "West", "I", "L", "SW", "MW", "Sw", "X", "Width", "BW", "P", "Wa", "Q", "CW", "WC", "S", "Y", "B", "SH", "Ws", "DW", "E", "D", "Web", "We", "FW", "F", "V", "WD", "R", "T", "C", "U", "N", "M", "WP", "WW", "Word", "VW", "WS", "GW", "Wh", "O"], "h": ["f", "http", "ch", "hs", "ph", "hw", "bh", "oh", "id", "n", "he", "phi", "v", "t", "end", "c", "ah", "y", "kh", "u", "e", "hr", "hi", "p", "b", "x", "rh", "ha", "wh", "hm", "th", "z", "hp", "header", "k", "work", "ht", "wa", "sh", "uh", "r"], "w": ["f", "ow", "wp", "wx", "m", "tw", "n", "wb", "aw", "wd", "v", "end", "t", "c", "ww", "sw", "d", "ew", "wl", "y", "wr", "ex", "nw", "width", "u", "word", "p", "b", "x", "wal", "rh", "fw", "wh", "q", "ws", "temp", "z", "wa", "work", "k", "rw", "wo"]}}
{"code": "import java.io.*;\\n \\nclass Main{\\n    public static void main (String[ ] args) throws Exception{\\n        BufferedReader br = new BufferedReader (new InputStreamReader (System.in));\\n        String str = br.readLine();\\n\\n        int a = Integer.parseInt(str);\\n        \\n        System.out.println((a/3600) + \":\" + (a%3600/60) + \":\" +(a%3600%60));\\n    }\\n}", "target": "84", "substitutes": {"br": ["tr", "ner", "div", "abs", "bh", "bl", "err", "bro", "fr", "io", "orb", "arr", "dr", "ori", "ob", "bar", "buf", "er", "reader", "wr", "rb", "gr", "hr", "img", "bb", "HR", "b", "cr", "yr", "cb", "ocr", "ber", "src", "sr", "bs", "sp", "stream", "BR", "i", "bridge", "browser", "Br", "r"], "str": ["f", "obj", "tr", "ner", "exp", "string", "data", "input", "stri", "st", "out", "expr", "in", "err", "fr", "pr", "dr", "arr", "text", "result", "kr", "dec", "txt", "wr", "iter", "s", "p", "b", "STR", "strip", "cr", "sr", "enc", "char", "sl", "sp", "line", "Str", "r"], "a": ["f", "sha", "value", "sta", "ama", "data", "ga", "A", "oa", "ma", "count", "aka", "n", "ea", "ac", "na", "aw", "ba", "area", "ava", "c", "anta", "aa", "ca", "d", "y", "va", "u", "aux", "pa", "fa", "sa", "as", "b", "ia", "x", "za", "ha", "p", "aura", "au", "asha", "ata", "wa", "qa", "i", "an", "ada", "ae", "alpha", "la", "ana"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String args[]){\\n        Scanner stdIn = new Scanner(System.in);\\n        int x[] = new int[5];\\n        for(int i = 0; i < 5; i++){\\n            x[i] = stdIn.nextInt();\\n        }\\n        \\n        //int a = stdIn.nextInt();\\n        //int b = stdIn.nextInt();\\n        //int n = stdIn.nextInt();\\n        int k = stdIn.nextInt();\\n        \\n        if(x[4] - x[0] <= k){\\n            System.out.println(\"Yay!\");\\n        }else{\\n            System.out.println(\":(\");\\n        }\\n        \\n        //System.out.println();\\n        //System.out.print();\\n    }\\n}\\n", "target": "66", "substitutes": {"stdIn": ["STDIns", " stdIns", " stdOut", "STDIN", "StandardIn", "StandardIN", "stdIns", "stdIN", "standardIN", "StandardOut", "STDIn", "standardIn", "StandardIns", "stdOut", "standardOut", " stdIN", "STDOut"], "x": ["f", "xy", "cross", "list", "h", "plus", "data", "xe", "xxxx", "xx", "X", "wx", "id", "mx", "m", "index", "xf", "n", "v", "t", "rows", "tx", "d", "y", "array", "ax", "xes", "ex", "u", "xb", "xs", "ux", "p", "b", "xxx", "pe", "rx", "z", "test", "xi", "XX", "ix", "xp", "q"], "i": ["f", "li", "fi", "I", "di", "in", "ri", "ni", "id", "key", "gi", "index", "inner", "ai", "io", "n", "si", "l", "ui", "mu", "v", "t", "end", "c", "it", "y", "uri", "u", "e", "o", "j", "pi", "info", "ii", "qi", "p", "ti", "hi", "ind", "oi", "slice", "w", "abi", "ini", "z", "ci", "part", "k", "mi", "ip", "xi", "multi", "bi", "r"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\npublic class Main{\\n\tpublic static void main(String[]args)throws Exception{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str;\\n\t\tint n=0;\\n\t\t\\n\t\twhile((str=br.readLine())!=null){\\n\t\t\tn=Integer.parseInt(str);\\n\t\t\tfor(int i=1;i<=n;i++){\\n\t\t\t\tint x=i;\\n\t\t\t\tif(x%3==0){\\n\t\t\t\t\tSystem.out.print(\" \"+i);\\n\t\t\t\t\tcontinue;\\n\t\t\t\t}\\n\t\t\t\tdo{\\n\t\t\t\t\tif(x%10==3){\\n\t\t\t\t\t\tSystem.out.print(\" \"+i);\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t\tx/=10;\\n\t\t\t\t}while(x!=0);\\n\t\t\t}\\n\t\t\tSystem.out.print(\"\\n\");\\n\t\t\tbreak;\\n\t\t}\\n\t\tbr.close();\\n\t}\\n}", "target": "154", "substitutes": {"br": ["obj", "tr", "ch", "abs", "out", "bh", "ctr", "db", "cro", "ref", "bl", "err", "ab", "bro", "fr", "bc", "fore", "io", "report", "pr", "orb", "arr", "dr", "mr", "result", "buf", "er", "reader", "rb", "gr", "hr", "bb", "HR", "p", "b", "cr", "yr", "cb", "ocr", "ber", "res", "sr", "bs", "BR", "cur", "browser", "bridge", "lr", "Br", "r"], "str": ["f", "obj", "tr", "div", "ner", "name", "string", "data", "input", "stri", "st", "out", "in", "err", "id", "fr", "pr", "arr", "dr", "text", "c", "result", "cl", "entry", "kr", "txt", "wr", "gr", "hr", "url", "j", "iter", "p", "b", "STR", "cr", "sr", "char", "sl", "sp", "line", "cur", "Str", "r"], "n": ["f", "h", "ne", "name", "nc", "in", "no", "nt", "m", "number", "l", "na", "v", "t", "r", "c", "num", "d", "y", "pos", "sn", "ng", "u", "e", "o", "j", "nw", "p", "b", "ns", "nb", "en", "w", "N", "len", "z", "size", "k", "nu", "nn", "net"], "i": ["f", "li", "fi", "I", "di", "ri", "ni", "id", "gi", "index", "ai", "io", "ji", "si", "ui", "phi", "v", "inter", "t", "c", "ie", "d", "y", "zi", "uri", "u", "pi", "o", "e", "j", "ii", "iii", "qi", "ti", "p", "b", "oi", "ind", "ini", "start", "yi", "z", "ci", "xi", "ip", "ix", "multi", "bi"], "x": ["f", "xc", "cross", "lex", "exp", "xxxx", "xx", "X", "wx", "id", "m", "index", "number", "xf", "step", "v", "t", "c", "xt", "fe", "y", "dx", "max", "fix", "ax", "fx", "ex", "u", "width", "o", "j", "e", "xes", "xs", "p", "ic", "pe", "xxx", "temp", "z", "ci", "px", "rx", "xa", "xi", "ix", "xp", "q"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++) a[i] = sc.nextInt();\\n\\n        long result = 0;\\n        int max = a[0];\\n        for(int i = 0; i < n; i++) {\\n            if (max <= a[i]) max = a[i];\\n            result += max - a[i];\\n        }\\n        System.out.println(result);\\n    }\\n}\\n", "target": "202", "substitutes": {"sc": ["class", "ner", "ch", "osc", "fc", " Sc", "nc", "sche", "sb", "cv", "cc", "esc", "bc", "asc", "pc", "l", "ss", "sec", "na", "scope", "anc", "SC", "se", "c", "scan", "sw", "cl", "cs", "uc", "Sc", "system", "sq", "dc", "sci", "cr", "src", "sync", "rc", "sp", " SC", "sch", "sh", "ec", "tc", "sem", "lc", " scr"], "n": ["f", "nan", "ne", "nc", "in", "no", "nt", "count", "m", "l", "v", "min", "t", "c", "d", "num", "y", "network", "u", "e", "o", "j", "s", "p", "b", "x", "ns", "nb", "en", "w", "N", "len", "z", "size", "k", "conn", "an", "nn", "net", "span"], "a": ["f", "ama", "am", "data", "ga", "A", "in", "ab", "ma", "m", "ea", "l", "ac", "na", "da", "ba", "area", "ca", "aa", "c", "t", "y", "aj", "array", "next", "va", "u", "aux", "o", "e", "aaa", "api", "auto", "s", "sa", "as", "p", "b", "x", "au", "ans", "z", "ata", "wa", "qa", "tta", "an", "ae", "alpha", "la"], "i": ["f", "li", "fi", "I", "data", "di", "in", "ri", "ni", "cli", "gi", "id", "index", "inner", "ai", "io", "ji", "si", "ui", "mu", "phi", "v", "c", "ie", "y", "uri", "zi", "u", "pi", "o", "e", "j", "info", "ii", "api", "qi", "p", "ti", "hi", "x", "oi", "b", "slice", "abi", "ini", "start", "yi", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "multi", "bi"], "result": ["value", "valid", "transform", "data", "grade", "range", "length", "match", "err", "number", "ret", "default", "score", "message", "total", "sum", "diff", "master", "success", "complete", "array", "inc", "progress", "next", "weight", "buffer", "info", "current", "Result", "error", "res", "mask", "results", "average", "test", "feature", "alpha", "rank", "scale", "distance"], "max": ["h", "div", "wrap", "co", "range", "out", "act", "no", "az", "ad", "id", "limit", "count", "key", "default", "step", "total", "height", "last", "min", "end", "conf", "c", "rest", "first", "master", "d", "can", "ax", "next", "cache", "auto", "current", "p", "mod", "x", "error", "Max", "MAX", "with", "part", "k", "size", "maximum", "init", "right", "alpha", "rank", "parent", "scale", "q"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tint seven = 0;\\n\t\tint five = 0;\\n\t\tint[] num = new int[3];\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tfor (int i = 0; i < num.length; i++) {\\n\\n\t\t\tnum[i] = scanner.nextInt();\\n\t\t}\\n\t\tfor (int i = 0; i < 3; i++) {\\n\t\t\tif (num[i] == 5) {\\n\t\t\t\tfive=five+1;\\n\t\t\t}\\n\t\t\tif (num[i] == 7) {\\n\t\t\t\tseven=seven+1;\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tif (five == 2 && seven == 1) {\\n\t\t\tSystem.out.println(\"YES\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t}\\n\t}\\n}", "target": "16", "substitutes": {"seven": ["mill", "dollar", "ushi", "none", "times", "family", "rice", "one", "begin", "eight", "father", "nine", "length", "vale", "number", "micro", "three", "follow", " seventh", "you", "water", "undred", "truth", "ward", "children", "zero", "son", "hello", " Seven", "info", "ruby", "fifth", "another", "down", "pes", "six", "into", "true", "four", "mother", "mount", "major", "each", "other", "meet", "many", "ven", "even", "Seven", "multi", "two", "ten", "una"], "five": ["Five", "li", "luck", "dollar", "kell", "jo", "plus", "phis", "ffe", "oni", "one", "eight", "nine", "fleet", "length", "number", "league", "fruit", "three", "little", "half", " fifty", "teen", "pie", "tto", "zero", "next", "ski", "fif", "power", "fifth", "lo", "pocket", "ties", "positive", "ty", "letter", "boot", "down", "six", "pe", "four", "knife", "two", "ten"], "num": ["valid", "gen", "mult", "dim", "name", "one", "off", "mon", "begin", "param", "nom", "in", "no", "id", "number", "index", "unit", "n", "block", "month", "note", "na", "home", "norm", "mu", "sum", "nam", "conv", "con", "hom", "result", "bin", "tri", "NUM", "inc", "digit", "fn", "info", "np", "loc", "om", "en", "nb", "Num", "four", "mom", "part", "umi", "mn", "uni", "nu", "init", "ou", "node", "multi", "nn", "dom", "um"], "scanner": ["caner", "rowner", "Scanter", " scanper", "scanener", "rower", "Scanner", "Scaner", " scaner", "rowener", "Scanener", "canener", "caninner", "Scanper", "canter", "scanter", "Scaninner", "scanper", "canper", "rowter", "scaninner", "scaner", " scaninner", "canner"], "i": ["f", "eni", "li", "fi", "h", "I", "data", "di", "in", "ri", "ni", "cli", "id", "gi", "index", "ai", "io", "ji", "n", "si", "ui", "mu", "phi", "v", "it", "ie", "y", "uli", "uri", "pi", "u", "o", "e", "j", "info", "ii", "qi", "ti", "hi", "b", "oi", "x", "p", "ini", "yi", "z", "ci", "mi", "ip", "xi", "init", "iu", "chi", "ix", "multi", "bi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String args[]){\\n\\n\t\t//????????\u00a8?\u00a8???????????????????\\n\t\tScanner sc = new Scanner(System.in);\\n\t\twhile(true){\\n\t\t\tint intH = sc.nextInt();\\n\t\t\tint intW = sc.nextInt();\\n\\n\t\t\t//??????H???W???0?????\u00a3???????????????????????????\\n\t\t\tif((intH == 0) && (intW == 0)){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\\n\t\t\t//??????\\n\t\t\t//???????????????????????????\\n\t\t\tfor (int i = 0; i < intH; i++) {\\n\t\t\t\t//String????????\u00a3?\u00a8?????????????\\n\t\t\t\tString A = \"\";\\n\t\t\t\t//?\u00a8?????????????????????????\\n\t\t\t\tfor (int j = 0; j < intW; j++) {\\n\t\t\t\t\t//?????????????????\u00b6??\u00b0??\u00a7?\u00a8??????\u00b6??\u00b0?????\u00a3??????\\n\t\t\t\t\tif ((i % 2 == 0) && (j % 2 == 0)) {\\n\t\t\t\t\t\t//String??????A???????????\\??????\\n\t\t\t\t\t\tA += \"#\";\\n\t\t\t\t\t//???????????\u00b6??\u00b0??\u00a7?\u00a8?????\\???\u00b0?????\u00a3??????\\n\t\t\t\t\t}else if((i % 2 == 0) && (j % 2 == 1)){\\n\t\t\t\t\t\tA += \".\";\\n\\n\t\t\t\t\t\t//??????????\\???\u00b0??\u00a7?\u00a8??????\u00b6??\u00b0?????\u00a3??????\\n\t\t\t\t\t}else if((i % 2 == 1) && (j % 2 == 0)){\\n\t\t\t\t\t\tA += \".\";\\n\t\t\t\t\t\t//??????????\u00a8?????\\???\u00b0?????\u00a3??????\\n\t\t\t\t\t}else{\\n\t\t\t\t\t\tA += \"#\";\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\t//?????????????????????\\n\t\t\t\tSystem.out.println(A);\\n\t\t\t}\\n\t\t\t//???????????????????????\u00a3????????????\\n\t\t\tSystem.out.println(\"\");\\n\t\t}\\n\t}\\n}", "target": "131", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String args[]) {\\n        Scanner sc=new Scanner(System.in);\\n        int n=sc.nextInt();\\n        int h[]=new int[n+1];\\n        for(int i=1;i<=n;i++)\\n        h[i]=sc.nextInt();\\n\\n        int dp[]=new int[n+1];\\n        dp[1]=0;\\n        for(int i=2;i<=n;i++)\\n        {\\n            int ans1=1000000000,ans2=1000000000;\\n            ans1=dp[i-1]+Math.abs(h[i]-h[i-1]);\\n            if(i-2>=1)\\n            ans2=dp[i-2]+Math.abs(h[i]-h[i-2]);\\n\\n            dp[i]=Math.min(ans1,ans2);\\n        }\\n        System.out.println(dp[n]);\\n\\n        \\n    }\\n}", "target": "1", "substitutes": {"sc": ["ner", "osc", "ch", "cont", " Sc", "nc", "st", "sche", "sb", "cle", "esc", "bc", "cc", "asc", "pc", "ss", "sec", "na", "anc", "SC", "se", "c", "scan", "cs", "uc", "sw", "screen", "cor", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "cer", "sr", "ci", "sp", " SC", "sch", "sh", "ec", "cur", "sem", "ser", "lc"], "n": ["f", "ne", "name", "nc", "net", "in", "no", "nt", "ni", "count", "m", "number", "l", "na", "g", "v", "t", "c", "d", "num", "network", "y", "sn", "u", "e", "o", "j", "cn", "s", "p", "b", "x", "ns", "nl", "en", "nb", "w", "un", "N", "all", "z", "k", "nn", "q", "r"], "h": ["f", "http", "ch", "hs", "ph", "plus", "ih", "hw", "bh", "oh", "id", "m", "hh", "hd", "H", "l", "he", "home", "g", "v", "phi", "t", "c", "d", "ah", "y", "adh", "auth", "dh", "u", "pi", "o", "hr", "e", "s", "p", "hi", "b", "x", "rh", "ha", "w", "hash", "hl", "hm", "gh", "z", "work", "ht", "sh", "a", "q", "r"], "i": ["f", "eni", "li", "fi", "I", "mini", "is", "di", "in", "anti", "ik", "ni", "cli", "gi", "id", "key", "index", "err", "ai", "ami", "io", "si", "l", "ori", "ui", "phi", "v", "g", "it", "c", "ie", "y", "uri", "source", "u", "pi", "o", "j", "info", "e", "ii", "api", "qi", "p", "hi", "ti", "x", "b", "oi", "ini", "start", "yi", "ci", "mi", "iu", "ip", "xi", "init", "isi", "ix", "multi", "bi", "a", "r"], "dp": ["pb", "dim", "ph", "wp", "di", "dt", "db", "ad", "P", "dep", "params", "dr", "deb", "address", "tp", "df", "v", "wd", "pd", "port", "bp", "gp", "pg", "d", "mp", "ah", "pkg", "dl", "dh", "pi", "np", "api", "mm", "pid", "dc", "p", "lp", "b", "fp", "dq", "DP", "direction", "dm", "pp", "vp", "pm", "hp", "sp", "cp", "gap", "pad", "ip", "adr", "ds"], "ans1": ["annone", "anas1", "ans3", "an1", "an3", "ansOne", "s2", "anOne", "ars1", "ansone", "ansu", "anone", "ann1", "anu", "ars2", "s3", "sone", "ann3", "anasone", "atanu", "an2", "atanone", "anasu", "atan2", "annOne", "s1", "anas2", "ann2", "atan1", "ars3", "arsOne"], "ans2": ["ats82", "cas8", "ann8", "an1", "ats2", "anstwo", "atantwo", "ans4", "anntwo", "an82", "ann1", "ann62", "anc82", "ans8", "an8", "ann82", "anc2", "an2", "atan4", "cas62", "cas2", "atan2", "cas1", "atan82", "anctwo", "ats4", "an4", "ann2", "ans82", "an62", "ats1", "ans62", "anc4", "ann4"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int a = scan.nextInt();\\n      \tint b = scan.nextInt();\\n      \\n      \tif (b >= a) {\\n          System.out.println(\"unsafe\");\\n        } else {\\n          System.out.println(\"safe\");\\n        }\\n \\n        scan.close();\\n    }\\n}", "target": "177", "substitutes": {"scan": ["gen", "parse", "cross", "ner", "skip", "base", "ann", "watch", "out", "fan", "in", "search", "pin", "inner", "ignore", "io", "report", "n", "l", "na", "server", "app", "se", "cat", "bug", "bin", "can", "reader", "query", "feed", "read", "source", "user", "connect", "system", "all", "Scan", "ln", "san", "sync", "slice", "sin", "start", "sc", "ans", "filter", "ink", "parser", "an", "walk", "browser", "nn", "ser", "clean", "sign", "span"], "a": ["valid", "base", "ga", "A", "ab", "ad", "count", "n", "ac", "na", "ba", "area", "ca", "c", "aa", "d", "aj", "va", "pa", "e", "api", "bb", "aaa", "s", "fa", "sa", "offset", "x", "as", "p", "access", "i", "an", "ae", "alpha"], "b": ["f", "bf", "h", "base", "A", "sb", "ab", "m", "binary", "n", "l", "B", "ob", "ba", "g", "emb", "c", "aa", "d", "y", "mb", "rb", "e", "bb", "offset", "x", "bis", "nb", "cb", "ib", "bs", "k", "i", "abb", "beta", "eb", "be", "fb"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        \\n        Scanner scanner = new Scanner(System.in);\\n        \\n        int N = scanner.nextInt();\\n        boolean hantei = false;\\n        \\n        Map<Integer,Integer> map = new HashMap<Integer,Integer>();\\n        \\n        for(int i=0; i<N; i++){\\n            \\n            int x = scanner.nextInt();\\n            if(map.containsKey(x)){\\n                hantei = true;\\n            }else{\\n                map.put(x,1);\\n            }\\n            \\n        }\\n        \\n        if(hantei){\\n            System.out.println(\"NO\");\\n        }else{\\n            System.out.println(\"YES\");\\n        }\\n        \\n    }\\n}\\n", "target": "44", "substitutes": {"scanner": ["caner", "Scanter", "generner", "scanener", "Scanner", "Scaner", "Scanatter", " scaner", "generer", "generatter", "Scanener", "canener", "caninner", "canri", "canter", "scanter", "Scaninner", "scanfer", " scanfer", " scanter", "canner", "canatter", "scanri", "scanatter", "scaninner", " scanener", "canfer", "scaner", "Scanfer", "generinner", "Scanri", " scaninner", " scanri"], "N": ["G", "K", "I", "L", "Z", "Size", "X", "Ni", "P", "Q", "NS", "H", "n", "S", "Y", "B", "D", "NL", "W", "J", "F", "V", "NM", "R", "NP", "NN", "T", "C", "Num", "M", "NA", "Ne", "Ns", "NT", "O"], "map": ["parse", "list", "shape", "make", "data", "match", "replace", "pose", "m", "code", "move", "block", "build", "address", "app", "maps", "master", "type", "ms", "mp", "ap", "use", "array", "per", "prev", "age", "cache", "pack", "mm", "open", "share", "manager", "stack", "hash", "set", "table", "copy", "work", "apper", "host", "pad", "bridge", "node", "create", "lock", "dict", "module", "MAP"], "i": ["f", "li", "h", "I", "di", "in", "ri", "id", "gi", "index", "ai", "io", "ji", "n", "si", "ui", "mu", "v", "it", "t", "c", "y", "zi", "u", "pi", "o", "j", "e", "ii", "qi", "p", "hi", "b", "ti", "w", "ini", "z", "ci", "k", "mi", "ip", "xi", "iu", "ix", "multi", "bi", "a"], "x": ["f", "xc", "cross", "lex", "xxxx", "xx", "in", "X", "wx", "id", "index", "n", "v", "t", "c", "ctx", "xt", "tx", "num", "y", "dx", "fx", "xes", "ax", "ex", "u", "e", "j", "xs", "p", "b", "sync", "w", "xxx", "rx", "z", "sex", "px", "k", "work", "xa", "xi", "test", "ix", "feat", "xp", "rex"], "hantei": ["hasei", "hanteii", "hhanteii", "hazei", "hhantei", "shantinei", "hengexi", "hasiii", "hhazeii", "hhanteu", "hanteji", "shantex", "phantaii", "hacoxi", "phantexi", "hengeii", "hantinei", "phanteii", "hasii", "hanceu", "hanteu", "hhazeu", "hanteli", "hanteo", "haseli", "hengeji", "hantaxi", "shantineo", "hamoli", "hantaji", "phantai", "phantei", "hancei", "phantaxi", "hasex", "hacoii", "hazeii", "hantineo", "hantaii", "shanteo", "hengei", "phanteji", "hanceii", "hasioi", "shantineli", "hacoji", "hantinex", "hanceoi", "hamox", "hazeu", "hacoi", "hhazei", "hhanteoi", "hhazeoi", "hantai", "phantaji", "hamoo", "hamoi", "shantinex", "hazeoi", "hanteoi", "hantexi", "hasiu", "haseo", "shantei", "hantineli", "hantex", "shanteli"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        Integer lenChara = Integer.valueOf(scan.nextLine());\\n        String targetChara = scan.nextLine();\\n\\n        if (lenChara % 2 == 0) {\\n            int divide = lenChara / 2;\\n            String start = targetChara.substring(0, divide);\\n            String end = targetChara.substring(divide, targetChara.length());\\n            if (start.equals(end)) {\\n                System.out.println(\"Yes\");\\n            } else {\\n                System.out.println(\"No\");\\n            }\\n        } else {\\n            System.out.println(\"No\");\\n        }\\n    }\\n}", "target": "161", "substitutes": {"scan": ["parse", "ner", "ann", "watch", "out", "chan", "in", "fan", "search", "inner", "non", "report", "io", "n", "exec", "na", "se", "ran", "cat", "er", "can", "reader", "kin", "feed", "read", "serv", "ry", "system", "sci", "row", "Scan", "ln", "san", "sync", "sin", "sc", "ans", "win", "sys", "util", "parser", "an", "walk", "look", "nn", "ser", "run", "clean"], "lenChara": [" lenChra", "lenCHaz", "lenMaz", "Lencharin", "lenLara", "lenCharo", "lengthCHandra", "LenCharin", "lengthCharin", "lenCHara", "lenLla", "lenColarin", "lengthChandra", "lengthCHara", "lengthCHarin", " lenCHla", "lenMara", " lenCHara", " lenCHar", "lenPhara", "lenChaz", "lenchla", "lenCHra", "lenCHarin", "lenChar", "lenchaz", "lenCHar", "LenChra", "lengthCharo", "lenPharin", " lenChla", "lenchara", "lenMra", "Lenchra", "lenChra", "lencharin", "lenCHandra", "lenPharo", "lenCHaro", "lenLar", "lenLra", "lenchar", " lenChar", " lenCHra", "Lenchaz", "lenColaro", "lenChandra", "lenchra", "lengthCHaro", "lengthChara", "lenColandra", "Lenchara", "LenChaz", "lenPhandra", "lenMarin", "lenCharin", "lenChla", "lenColara", "lenCHla", "LenChara"], "targetChara": ["targetchla", " targetQuarin", "sourceChla", "targetCHano", "targetCHla", "sourceCHla", " targetCharin", "targetcharo", "targetQuara", "targetCHarin", " targetQula", "targetQula", " targetQuar", "targetCHaro", "targetCharo", "targetChar", "targetCharin", "sourceCHar", "targetQuano", "sourceCHara", " targetChano", "targetCHara", "targetCHar", "targetchar", "sourceChara", "targetQuarin", " targetChla", " targetCharo", " targetQuaro", " targetQuara", " targetQuano", "sourceChar", "targetQuar", "targetQuaro", "targetChano", " targetChar", "targetchano", "targetChla", "sourceCHarin", "targetchara", "sourceCharin", "targetcharin"], "divide": ["divine", "divie", " divided", "divride", "devie", "decided", " divise", "divider", "Divie", "Divine", "Divider", "decine", "devride", "devide", "Divide", "Divided", " divie", "devise", "divise", " divride", " divider", "devine", "Divise", "Divride", "decide", "devider", "divided", "devided", "decider"], "start": ["Start", "name", "string", "base", "starting", "range", "in", "id", "key", "step", "pend", "pre", "address", "it", "ie", "first", "style", "use", "next", "source", "add", "info", "show", "stop", "open", "offset", "space", "head", "set", "line", "part", "ip", "init", "origin", "cur", "get", "from", "pad", "art"], "end": ["nd", "anch", "ending", "edge", "End", "range", "until", "length", "id", "pend", "except", "ase", "est", "last", "max", "use", "feed", "next", "add", "END", "ment", "api", "stop", "offset", "open", "enter", "ion", "en", "ension", "enc", "or", "set", "append", "ended", "ends", "vert"]}}
{"code": "import java.util.*;\\nimport static java.lang.System.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(in);\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tif((a+b)%2==0) {\\n\t\t\tout.println((a+b)/2);\\n\t\t}\\n\t\telse out.println(\"IMPOSSIBLE\");\\n\t\tsc.close();\\n\t}\\n}", "target": "31", "substitutes": {"sc": ["ner", "ch", "osc", "cont", "nc", "out", "sb", "core", "cv", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "scope", "anc", "ca", "SC", "se", "c", "scan", "uc", "cs", "cl", "sw", "cus", "com", "ctx", "acc", "cor", "this", "Sc", "sci", "cr", "src", "sync", "rc", "cer", "soc", "sp", "ci", "sch", "parser", "ec", "cur", "tc", "coll", "screen", "lc"], "a": ["sta", "ama", "ga", "A", "oa", "ab", "ai", "ea", "ac", "na", "ba", "da", "ca", "area", "c", "aa", "d", "y", "abc", "aj", "va", "pa", "u", "af", "auto", "fa", "sa", "as", "x", "p", "ia", "access", "au", "qa", "mA", "i", "an", "ae", "alpha", "la"], "b": ["f", "gb", "bf", "pb", "h", "base", "sb", "ab", "db", "ub", "length", "n", "l", "B", "wb", "zb", "ob", "v", "fb", "emb", "c", "d", "y", "mb", "rb", "e", "o", "j", "lb", "bb", "s", "p", "x", "bis", "nb", "cb", "ib", "bot", "z", "bs", "k", "i", "body", "bi", "eb", "r"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n    \\n    Scanner sc = new Scanner(System.in);\\n      \\n      //\u5165\u529b\\n      int N =sc.nextInt();//\u751f\u5f92\u6570\\n      int kids[] = new int[N+1];\\n      \\n      //\u51fa\u5e2d\u756a\u53f7\u3067\u307e\u308f\u3059\\n      for(int i=1; i<=N; i++){\\n      \tint s = sc.nextInt();\\n        kids[s] =  i;\\n      }\\n      //Arrays.sort(kids);\\n      \\n      for(int i=1; i<=N; i++){\\n        System.out.print(kids[i]+\" \");\\n      //System.out.println(index_i);\\n      }\\n    }\\n}", "target": "227", "substitutes": {"sc": [" pars", " scorer", " Sc", "ann", " arr", " surf", "sb", " scanner", " sm", " sl", "ss", " ans", "SC", " rc", "se", "scan", " src", "Sc", "sq", " res", " app", " SC", " ar", "parser", " sp", " ser", " scr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n\tScanner scan = new Scanner(System.in);\\n\\n\t/* \u5165\u529b */\\n\tString w = scan.next();\\n\tint[] eng = new int[26];\\n\\n\t/* \u6587\u5b57\u6570\u30ab\u30a6\u30f3\u30c8 */\\n\tfor(int i = 0; i < w.length(); i++){\\n\t    eng[w.charAt(i)-97]++;\\n\t}\\n\\n\t/* \u9047\u5947\u5224\u5b9a */\\n\tint flag = 1;\\n\tfor(int i = 0; i < 26; i++){\\n\t    if(eng[i] % 2 != 0){\\n\t\tflag = -1;\\n\t\tbreak;\\n\t    }\\n\t}\\n\\n\tif(flag == 1){\\n\t    System.out.println(\"Yes\");\\n\t}else{\\n\t    System.out.println(\"No\");\\n\t}\\n    }\\n}\\n", "target": "103", "substitutes": {"scan": ["gen", "parse", "stat", "ner", "skip", "ann", "watch", "out", "chan", "in", "search", "ignore", "n", "ss", "server", "se", "cat", "er", "can", "reader", "query", "feed", "read", "serv", "connect", "spin", "iter", "system", "open", "row", "Scan", "ln", "san", "all", "sync", "sc", "win", "ans", "an", "walk", "look", "nn", "run", "clean", "r"], "w": ["f", "west", "ow", "string", "wp", "hw", "wx", "wt", "widget", "tw", "n", "l", "wb", "aw", "v", "t", "sw", "iw", "won", "ew", "wl", "y", "words", "wall", "u", "W", "word", "e", "nw", "s", "www", "p", "wal", "x", "fw", "wh", "ws", "wan", "wa", "work", "writer", "rw", "we", "WS", "now"], "eng": ["west", "enz", "list", "lex", "ense", "ang", "eg", "eight", "oss", "ev", "length", "core", "index", "mess", "ign", "erg", "g", "end", "ENG", "ew", "ect", "feed", "ext", "ge", "ng", "age", "e", "ens", "img", "pack", "nw", "power", "loc", "en", "six", "enc", "express", "size", "gener", "big", "pen", "we", "feat", "sign"], "i": ["f", "eni", "li", "fi", "h", "I", "data", "di", "in", "ri", "cli", "id", "gi", "index", "ai", "io", "ji", "n", "si", "l", "ui", "phi", "v", "it", "t", "c", "ie", "d", "uri", "zi", "pi", "e", "u", "o", "j", "info", "ii", "api", "qi", "p", "ti", "b", "x", "oi", "hi", "slice", "abi", "ini", "z", "ci", "mi", "ip", "xi", "iu", "uni", "chi", "ix", "bi", "lc"], "charAt": ["characterAt", "characterSet", "charat", "characterat", "coordat", "charCount", "coordAt", "characterCount", "charSet", "coordCount", " charSet", "coordSet", " charat", " charCount"], "flag": ["f", "kind", "fi", "arg", "ish", "err", "group", "id", "Flag", "count", "code", "lag", "key", "character", "wait", "sign", "type", "style", "bug", "bit", "fun", "weight", "age", "info", "flags", "year", "field", "offset", "status", "letter", "ind", "ig", "bag", "start", "len", "char", "maybe", "part", "size", "FLAG", "feature", "feat", "tag", "force"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter pw = new PrintWriter(System.out);\\n\\n        int n = sc.nextInt();\\n        int q = sc.nextInt();\\n\\n        Queue queue = new Queue(n);\\n        for (int i = 0; i < n; i++) {\\n            String name = sc.next();\\n            int time = sc.nextInt();\\n            Process x = new Process(name, time);\\n            queue.enqueue(x);\\n        }\\n\\n        int time = 0;\\n        while (!queue.isEmpty()) {\\n            Process x = queue.dequeue();\\n            if (x.time - q <= 0) {\\n                time += x.time;\\n                pw.print(x.name + \" \");\\n                pw.println(time);\\n            } else {\\n                time += q;\\n                x.time -= q;\\n                queue.enqueue(x);\\n            }\\n        }\\n\\n        pw.flush();\\n    }\\n\\n    static class Process {\\n        String name;\\n        int time;\\n\\n        Process(String name, int time) {\\n            this.name = new String(name);\\n            this.time = time;\\n        }\\n    }\\n\\n    static class Queue {\\n        Process[] Q;\\n        int lastIndex;\\n        int head;\\n        int tail;\\n\\n        Queue(int n) {\\n            Q = new Process[n + 1];\\n            lastIndex = n;\\n            head = 0;\\n            tail = 0;\\n        }\\n\\n        void enqueue(Process x) {\\n            Q[tail++] = new Process(x.name, x.time);\\n            if (tail > lastIndex)\\n                tail = 0;\\n        }\\n\\n        Process dequeue() {\\n            Process x = Q[head++];\\n            if (head > lastIndex)\\n                head = 0;\\n            return x;\\n        }\\n\\n        boolean isEmpty() {\\n            return head == tail ? true : false;\\n        }\\n    }\\n}\\n", "target": "231", "substitutes": {"sc": ["ner", "ch", "osc", "cont", "exp", "mc", " Sc", "nc", "sche", "sb", "cle", "cv", "cc", "bc", "esc", "asc", "pc", "si", "ck", "ss", "sec", "anc", "scope", "cus", "SC", "c", "scan", "cs", "se", "cl", "sw", "uc", "ca", "ctx", "cor", "Sc", "loc", "sq", "sa", "dc", "sci", "cr", "src", "rc", "cer", "sr", "enc", "sk", "scl", "sl", "ci", "sp", " SC", "sch", "ec", "coll", "sem", "lc"], "pw": ["pwa", "jpW", "pws", "jpwd", " pr", "ppwd", "Pr", "pwh", "pwd", "Pow", "pr", "ppws", "prw", "prwa", " pow", "Pw", " pp", " pws", " pwh", "pow", " pwd", "jpw", "prp", "pW", "Pwd", "Pwh", "ppw", "ppow", "pp", "jpr", "Pp", " pwa", "ppwh", "Pwa", "ppW", "Pws", "PW", "prW", " pW"], "n": ["f", "ne", "none", "nc", "out", "in", "no", "nt", "ni", "count", "m", "number", "index", "l", "v", "t", "c", "num", "d", "network", "y", "max", "sn", "u", "e", "o", "j", "s", "p", "b", "all", "ns", "nb", "en", "w", "N", "len", "z", "size", "k", " N", "Ns", "nn", "net"], "q": ["f", "h", "in", "length", "quality", "count", "id", "m", "quick", "l", "ue", "g", "v", "t", "c", "d", "y", "query", "u", "e", "j", "question", "qs", "depth", "qi", "eq", "sq", "p", "dq", "qq", "w", "qu", "z", "k", "quant", "size", "qa", "sh", "qt", "r"], "queue": ["store", "f", "thread", "channel", "list", "processor", "force", "Que", "console", "out", "command", "log", "group", "collection", "config", "flow", "l", "message", "process", "que", "block", "ue", "server", "port", "result", "page", "chain", "request", "query", "progress", "buffer", "batch", "event", "this", "cache", "counter", "system", "flush", "job", "status", "manager", "stack", "en", "sync", "file", "pe", "pool", "ping", "view", "line", "menu", "ack", "module", "run", "sequence"], "i": ["f", "li", "fi", "I", "mini", "is", "di", "ni", "gi", "m", "ai", "ji", "si", "ori", "ui", "mu", "v", "c", "ie", "y", "zi", "uri", "pi", "u", "info", "j", "ii", "qi", "p", "ti", "b", "oi", "hi", "ini", "z", "ci", "mi", "ip", "xi", "iu", "ix", "chi", "multi", "bi"], "name": ["f", "value", "version", "prefix", "no", "in", "call", "key", "m", "code", "image", "number", "l", "message", "space", "size", "run", "a", "names", "comment", "string", "Name", "search", "label", "address", "home", "style", "money", "resource", "ex", "NAME", "status", "date", "part", "work", "alias", "class", "term", "id", "index", "up", "type", "y", "e", "this", "p", "job", "child", "action", "file", "line", "memory", "parent", "username", "thread", "path", "base", "data", "group", "ame", "process", "model", "hello", "word", "info", "game", "str", "pass", "w", "start", "el"], "time": ["value", "f", "times", "am", "version", "in", "call", "quality", "count", "m", "key", "timeout", "image", "code", "cost", "message", "t", "c", "TIME", "ime", "query", "how", "load", "depth", "space", "speed", "history", "temp", "size", "now", "content", "h", "comment", "rate", "one", "timer", "height", "est", "loop", "duration", "style", "money", "request", "weight", "life", "ty", "date", "play", "z", "work", "test", "trace", "price", "volume", "method", "id", "end", "type", "y", "progress", "age", "frame", "p", "mode", "delay", "tim", "get", "memory", "thread", "path", "data", "clock", "length", "live", "micro", "change", "v", "port", "hour", "d", "event", "info", "user", "error", "w", "start", "frequency", "sleep", "right", "Time"], "x": ["f", "php", "lex", "exp", "plus", "xe", "xx", "in", "m", "l", "by", "t", "c", "ctx", "ext", "ax", "re", "en", "rx", "view", "sex", "run", "rex", "content", "xc", "xy", "h", "one", "X", "ex", "u", "ux", "z", "work", "ix", "cross", "client", "instance", "id", "index", "g", "xt", "y", "dx", "fx", "e", "o", "s", "p", "b", "python", "sync", "xxx", "an", "XX", "on", "example", "worker", "data", "wx", "config", "exec", "exc", "v", "tx", "fe", "xml", "event", "xs", "w", "xa", "xi", "xp", "r"], "Q": ["G", "Qu", "K", "I", "Que", "L", "Z", "GE", "X", "API", "P", "Cache", "H", "S", "Y", "B", "Limit", "E", "D", "MQ", "W", "F", "Ch", "CL", "V", "Do", "R", "EC", "C", "T", "U", "IP", "M", "QU", "N", "Query", "O"], "lastIndex": ["nextLink", "firstLink", "LastLink", "LastIndex", "nextindex", "firstPosition", "firstIndex", "nextIndex", "lastLink", "latestIndex", "nextPosition", " lastindex", "lastWeight", " lastWeight", "lastPosition", " lastPosition", "firstWeight", "latestPosition", " lastLink", "lastindex", "Lastindex", "firstindex", "latestindex", "latestWeight", "LastPosition"], "head": ["thread", "before", "skip", "none", "anch", "shift", "one", "off", "act", "call", "heads", "ad", "length", "HEAD", "post", "key", "code", "index", "ack", "limit", "id", "count", "keep", "block", "ck", "patch", "left", "sum", "end", "commit", "style", "push", "max", "ce", "fix", "Head", "pull", "weight", "load", "unk", "position", "depth", "link", "stop", "offset", "tick", "child", "back", "start", "front", "view", "root", "header", "right", "body", "lock", "tag", "run", "clean"], "tail": ["thread", "before", "ail", "term", "shift", "padding", "range", "out", "prefix", "ad", "length", "match", "limit", "tails", "index", "code", "timeout", "ignore", "count", "inner", "lead", "lock", "total", "patch", "left", "last", "sum", "end", "type", "push", "write", "zero", "ill", "cycle", "pull", "batch", "weight", "after", "target", "stop", "position", "iter", "offset", "un", "letter", "all", "tick", "sync", "back", "speed", "start", "len", "sleep", "col", "fill", "delay", "size", "wind", "body", "foot", "skip", "tag", "run", "span"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tvoid run() {\\n\t\tint min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tfor (int i = 0; i < 5; i++) {\\n\t\t\tint n = scan.nextInt();\\n\t\t\tmax = Math.max(max, n);\\n\t\t\tmin = Math.min(min, n);\\n\t\t}\\n\t\tint k = scan.nextInt();\\n\t\tSystem.out.println((k >= (max - min) ? \"Yay!\" : \":(\"));\\n\t}\\n    public static void main(String[] args) {\\n    \tnew Main().run();\\n    }\\n}\\n", "target": "66", "substitutes": {"min": ["value", "lower", "val", "div", "sort", "name", "none", "mini", "base", "round", "shift", "range", "act", "in", "id", "key", "m", "index", "limit", "local", "low", "default", "step", "initial", "pre", "na", "left", "v", "diff", "sum", "mins", "first", "d", "pos", "small", "Min", "next", "minimum", "sub", "mod", "x", "strip", "p", "pass", "slice", "sample", "start", "po", "len", "MAX", "part", "size", "mean", "average", "init", "pri", "from", "skip", "scale", "sign", "MIN", "span"], "max": ["rand", "cross", "div", "wrap", "name", "none", "between", "plus", "range", "out", "act", "call", "no", "az", "ad", "id", "limit", "count", "index", "key", "default", "total", "patch", "last", "sum", "diff", "end", "ca", "conf", "can", "y", "dec", "array", "ax", "next", "add", "cache", "best", "mod", "x", "w", "res", "start", "Max", "head", "MAX", "z", "with", "size", "maximum", "mean", "average", "node", "right", "std", "scale"], "scan": ["store", "gen", "parse", "ner", "skip", "ann", "watch", "out", "fan", "in", "pan", "chan", "log", "match", "search", "ignore", "report", "l", "na", "server", "con", "se", "cat", "bin", "er", "can", "query", "read", "serv", "connect", "Scan", "san", "sync", "slice", "see", "sc", "ans", "filter", "conn", "an", "trace", "look", "walk", "check", "nn", "run", "clean", "r", "span"], "i": ["f", "li", "h", "I", "mini", "di", "in", "ni", "id", "gi", "m", "ai", "io", "si", "ui", "mu", "v", "t", "d", "y", "u", "pi", "o", "j", "e", "ii", "qi", "p", "ti", "b", "x", "ind", "oi", "hi", "w", "ini", "ci", "mi", "xi", "init", "chi", "ix", "multi", "bi"], "n": ["ne", "nc", "in", "nt", "ni", "number", "m", "l", "nin", "na", "t", "c", "num", "y", "network", "sn", "next", "u", "o", "j", "p", "b", "x", "ns", "ln", "nb", "en", "N", "len", "z", "mn", "nn", "net"], "k": ["h", "kid", "K", "ko", "ik", "ad", "id", "m", "kick", "kn", "ck", "v", "ok", "r", "c", "d", "y", "inc", "u", "o", "j", "unk", "p", "x", "ku", "ak", "sk", "z", "work", "ks", "ke", "q", "kw"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        ABC101_B solver = new ABC101_B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class ABC101_B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            String n = in.nextLine();\\n            long l = Long.parseLong(n);\\n\\n            long sum = 0;\\n\\n            for (char c : n.toCharArray()) {\\n                sum += Character.digit(c, 10);\\n            }\\n\\n            if (l % sum == 0) {\\n                out.print(\"Yes\");\\n            } else {\\n                out.print(\"No\");\\n            }\\n        }\\n\\n    }\\n}\\n\\n", "target": "195", "substitutes": {"inputStream": [" inputBuffer", "InputStream", "outputStreamer", "inputStreamer", "inputBuffer", "outputSteam", " inputSteam", " inputStreamer", "outputBuffer", "InputBuffer", "InputStreamer", "Inputstream", "InputSteam", " inputstream", "outputstream", "inputstream", "inputSteam"], "outputStream": ["responsestream", "outputStreamer", "inputStreamer", "inputForm", "OutputStream", "responseStream", "responseSteam", "outputSteam", "OutputSteam", " outputSteam", "responseStreamer", "outputForm", "Outputstream", "OutputForm", " outputstream", "OutputStreamer", "outputstream", "inputstream", " outputForm", "inputSteam"], "in": ["rec", "arg", "path", "cin", "data", "input", "lin", "log", "err", "din", "pin", "image", "inner", "config", "io", "nin", "IN", "inn", "min", "con", "conf", "bin", "reader", "kin", "request", "isin", "resource", "inc", "read", "source", "this", "info", "inside", "s", "x", "ln", "rin", "w", "vin", "ini", "sin", "login", "win", "again", "line", "ins", "conn", "i", "init", "In", "inf", "r"], "out": ["exp", "arg", "name", "cmd", "off", "version", "no", "call", "err", "key", "inner", "timeout", "server", "query", "inc", "serv", "to", "extra", "again", "temp", "view", "outer", "init", "outs", "string", "session", "self", "ex", "cache", "Out", "copy", "lib", "socket", "gen", "client", "log", "IN", "up", "scan", "page", "OUT", "ng", "this", "o", "s", "b", "file", "sync", "line", "writer", "i", "connection", "ask", "parent", "net", "obj", "data", "group", "io", "window", "exec", "scope", "v", "write", "bin", "output", "user", "error", "pass", "w", "pool", "conn"], "solver": ["Solution", "fsolution", "fsolver", "Solver", "Solving", "solution", "ssolver", "unsolve", "ssolve", "fsolve", "solve", "sector", "ssolution", "solving", "Sector", "ssector", "unsolver", "fsector", "ssolving", "Solve", "unsolution", "unsolving"], "testNumber": [" testnum", " suiteCounter", " suiteNumber", "Testnumber", " testCounter", " suitenum", " suitenumber", "TestCounter", " testnumber", "Testnum", "TestNumber", "testnumber", "testnum", "testCounter"], "n": ["f", "nan", "ne", "name", "string", "nc", "net", "ann", "no", "number", "m", "non", "not", "nin", "initial", "na", "v", "num", "d", "network", "sn", "ng", "rn", "u", "e", "o", "cn", "s", "p", "un", "b", "ns", "ln", "en", "nl", "nb", "N", "line", "conn", "i", "nor", "an", "nn", "fn", "gn", "r"], "l": ["f", "li", "ul", "L", "lam", "ol", "pl", "bl", "length", "ll", "v", "lv", "rl", "kl", "d", "dl", "ls", "le", "u", "lb", "lo", "lp", "p", "b", "al", "ln", "nl", "len", "sl", "i", "la", "lc"], "sum": ["li", "sam", "cal", "ul", "base", "am", "lam", "match", "length", "cum", "cup", "count", "cost", "unit", "si", "ac", "total", "ass", "gram", "up", "num", "um", "max", "su", "zero", "ram", "acc", "weight", "digit", "u", "member", "b", "fat", "ln", "len", "mem", "fill", "mean", "size", "us", "average", "gam", "alpha", "scale", "sign", "Sum"], "c": ["f", "xc", "ch", "string", "co", "nc", "cy", "code", "esc", "ac", " rc", "uc", "cl", "ce", "u", "e", "o", "word", "s", "dc", "p", "b", "C", "ic", "rc", "enc", "char", "sc", "cu", "col", "oc", "ci", "k", "ct", "arc", "i", "coll", "r"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint i,v;\\n\t\tfor(;;){\\n\t\t\tint h = scan.nextInt();\\n\t\t\tint w = scan.nextInt();\\n\t\t\tif(h == 0 && w == 0)\\n\t\t\t\tbreak;\\n\t\t\t\tfor(i = 1; i <= h; ++i){\\n\t\t\t\t\tfor(v = 1; v <= w; ++v){\\n\t\t\t\t\tif(i == h || i == 1){\\n\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t}\\n\t\t\t\t\telse if(i != 1 || i != h){\\n\t\t\t\t\t\tif(v == 1 || v == w){\\n\t\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t\t}\\n\t\t\t\t\t\telse if(v != 1 || v != w){\\n\t\t\t\t\t\t\tSystem.out.print(\".\");\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\t\tSystem.out.println(\"\");\\n\t\t}\\n\t\t\t\tSystem.out.println(\"\");\\n\t}\\n}\\n}", "target": "19", "substitutes": {"scan": ["parse", "ner", "base", "ann", "watch", " scanner", "out", "in", "fan", "pan", "chan", "search", "ignore", "report", "n", "l", "server", "con", "se", "cat", "er", "can", "reader", "plan", "feed", "query", "nn", "serv", "read", "connect", "system", "all", "Scan", "ln", "san", "sync", "slice", "see", "wan", "ans", "sc", "util", "sys", "conn", "parser", "an", "walk", "look", "skip", "run", "clean", "sign", "r", "span"], "i": ["f", "eni", "li", "fi", "I", "vi", "ih", "di", "in", "ami", "ni", "ik", "id", "gi", "ai", "io", "si", "l", "ori", "ui", "phi", "it", "c", "ie", "y", "uri", "u", "pi", "o", "e", "j", "info", "ii", "qi", "hi", "p", "b", "x", "oi", "ini", "yi", "im", "ci", "mi", "ip", "iu", "xi", "chi", "ix", "bi", "r"], "v": ["f", "value", "li", "val", "tv", "vol", "vi", "vc", "iv", "ev", "nv", "vv", "sv", "ov", "gu", "vs", "ver", "l", "ui", "g", "lv", "t", "c", "vu", "y", "uv", "va", "u", "e", "j", "ii", "V", "av", "s", "p", "b", "x", "ve", "qu", "vid", "vp", "vic", "z", "k", "q"], "h": ["f", "eh", "ch", "hs", "ph", "ih", "hw", "bh", "in", "oh", "id", "m", "hh", "hd", "H", "n", "l", "he", "t", "c", "ah", "d", "y", "u", "pi", "o", "s", "hi", "p", "b", "x", "rh", "ha", "en", "wh", "head", "hm", "gh", "z", "k", "ht", "sh", "uh", "a", "q"], "w": ["f", "ow", "wp", "hw", "wx", "wt", "n", "l", "wb", "aw", "wd", "t", "c", "ww", "sw", "d", "ew", "y", "wl", "wall", "u", "W", "e", "o", "width", "nw", "s", "p", "b", "x", "fw", "wh", "ws", "win", "z", "wa", "k", "work", "sh", "rw", "we", "a", "q"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        // \u6574\u6570\u306e\u5165\u529b\\n        int n = sc.nextInt();\\n        int k = sc.nextInt();\\n        int q = sc.nextInt();\\n        \\n        int[] point;\\n        point = new int[n];\\n      \\n        for (int i = 0; i <n; i++) {\\n          point[i] = k;\\n        }\\n      \\n        for (int i = 0; i < q; i++) {\\n          int number = sc.nextInt();\\n          point[number - 1] = point[number - 1] + 1;\\n        }\\n        \\n      \\n        int border = q;\\n        for (int i = 0; i <n; i++) {\\n          if (point[i] > border) {\\n            System.out.println(\"Yes\");\\n          } else {\\n            System.out.println(\"No\");\\n          }\\n        }\\n    }\\n}", "target": "102", "substitutes": {"sc": [" pars", " scorer", " Sc", "ann", " arr", " surf", "sb", " scanner", " sm", " sl", "ss", " ans", "SC", " rc", "se", "scan", " src", "Sc", "sq", " res", " app", " SC", " ar", "parser", " sp", " ser", " scr"]}}
{"code": "import java.util.NoSuchElementException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    private static int MIN = -1000000;\\n    private static int MAX = 1000000;\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        try {\\n            int n = Integer.parseInt(sc.nextLine());\\n            int min = MAX;\\n            int max = MIN;\\n            double total = 0;\\n            while (sc.hasNext()) {\\n                int a = sc.nextInt();\\n                max = Integer.max(a, max);\\n                min = Integer.min(a, min);\\n                total += a;\\n            }\\n            System.out.printf(\"%d %d %.0f\\n\", min, max, total);\\n        } catch (NoSuchElementException\\n                | NumberFormatException e) {\\n            System.out.println(e);\\n        }\\n    }\\n}\\n\\n", "target": "21", "substitutes": {"MIN": ["WORK", "SA", "VALUE", "PR", "ALL", "IR", "X", "DAY", "VERSION", "IN", "Minimum", "MAG", "ONE", "Mini", "TOP", "NO", "Min", "PER", "MN", "IND", "DATA", "END", "VAL", "DIR", "minimum", "NAME", "SIZE", "N", "Max", "NA", "IL", "TYPE", "MED", "RA", "ID"], "MAX": ["WORK", "VALUE", "PR", "ALL", "INS", "X", "RA", "HEAD", "VERSION", "ACE", "IN", "ASE", "TO", "CON", "TOP", "ID", "PER", "NUM", "Maximum", "END", "LINE", "ACTION", "POST", "NAME", "PRE", "SIZE", "N", "Max", "NR", "maximum", "DC", "TYPE", "ANY", "ION", "MED", "GEN", "AX", "MAP", "RM"], "sc": ["ner", "ch", "osc", "cont", " Sc", "nc", "sche", "sb", "core", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "scope", "anc", "ca", "SC", "se", "c", "scan", "uc", "cs", "sw", "ctx", "cl", "cor", "Sc", "cus", "system", "sq", "sub", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "enc", "cb", "ocr", "sp", "ci", " SC", "ct", "sh", "ec", "tc", "cur", "coll"], "n": ["f", "in", "no", "nt", " c", "m", "l", "na", "r", "c", "d", "num", "e", "s", "p", "b", "x", "ns", "nb", "en", "Num", "N", "z", "k", "i", "an", "net"], "min": ["value", "lower", "val", "sort", "name", "none", "mini", "base", "shift", "range", "version", "prefix", "in", "index", "local", "default", "unit", "just", "step", "mid", "close", "pre", "sum", "diff", "mins", "sign", "area", "minus", "first", "only", "r", "d", "pos", "small", "Min", "next", "pa", "weight", "s", "minimum", "sub", "offset", "space", "start", "len", "partial", "size", "mean", "i", "init", "from", "skip", "scale", "span"], "max": ["value", "wrap", "name", "base", "plus", "range", "version", "act", "no", "ma", "ad", "az", "length", "id", "limit", "count", "index", "number", "step", "ase", "patch", "last", "sum", "end", "conf", "ca", "rest", "c", "d", "can", "ax", "next", "digit", "cache", "power", "mod", "x", "w", "top", "res", "Max", "head", "with", "partial", "size", "part", "mean", "maximum", "k", "average", "pad", "right", "alpha", "rank", "parent"], "total": ["none", "base", "data", " tot", "normal", "no", "token", "nt", "ma", "oa", "eta", "count", "non", "otal", "sum", "meta", " Total", "type", "info", " whole", "auto", "full", "offset", "tax", "start", "trans", "partial", "part", "major", "size", "ta", "i", "Total", "average", " sum", "multi", "alpha", "scale", "percent"], "a": ["sta", "div", "am", "data", "ga", "A", "oa", "ab", "ea", "ac", "na", "ba", "app", "da", "ca", "area", "aa", "c", "ava", "d", "aj", "array", "va", "pa", "e", "img", "af", "s", "at", "sa", "as", "b", "access", "p", "x", "ha", "sup", "za", "au", "ata", "qa", "i", "an", "alpha", "la", "parent", "span"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream    inputStream    = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader    in                      = new InputReader(inputStream);\\n        PrintWriter      out                    = new PrintWriter(outputStream);\\n        Task                 solver               = new Task();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class Task {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n        \tString n = in.next();\\n        \tfor(int i = 0; i < n.length(); i++) {\\n        \t\tif(n.charAt(i) == '1') {\\n        \t\t\tout.print(\"9\");\\n        \t\t}else {\\n        \t\t\tout.print(\"1\");\\n        \t\t}\\n        \t}\\n        \tout.println(\"\");\\n        }\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n\\n", "target": "111", "substitutes": {"inputStream": ["InputStream", "importStreamer", "outputStreamer", "inputStreamer", "importStream", "outputSteam", " inputSteam", "importSteam", "importstream", "InputStreamer", "outputChannel", "Inputstream", " inputChannel", "InputSteam", "inputChannel", " inputstream", "InputChannel", "outputstream", "inputstream", "inputSteam"], "outputStream": ["OutputPath", "inputForm", "writingSteam", "OutputStream", "outputPath", "OutputWriter", "outputSteam", "OutputSteam", "OutputReader", " outputSteam", "outputReader", "writingStream", "outputForm", "OutputForm", "inputWriter", " outputWriter", "outputWriter", "inputPath", "writingReader", "inputReader", " outputForm", "writingPath", "inputSteam"], "in": ["f", "gen", "rec", "arg", "path", "plus", "data", "is", "input", "lin", "log", "err", "din", "pin", "image", "inner", "id", "config", "io", "nin", "exec", "l", "IN", "inn", "self", "min", "diff", "con", "bin", "isin", "request", "kin", "resource", "read", "inc", "source", "this", "info", "user", "inside", "url", "s", "ic", "rin", "ini", "sin", "login", "win", "again", "ins", "conn", "connection", "init", "from", "In", "run", "inf", "r"], "out": ["name", "off", "prefix", "call", "no", "err", "key", "inner", "timeout", "server", "inc", "to", "down", "extra", "again", "temp", "view", "outer", "init", "outs", "check", "comment", "exit", "string", "one", "writing", "ex", "cache", "Out", "copy", "part", "gen", "client", "log", "null", "up", "page", "OUT", "buffer", "this", "o", "p", "file", "line", "writer", "connection", "In", "parent", "net", "obj", "list", "data", "task", "group", "io", "object", "window", "exec", "process", "scope", "write", "bin", "output", "word", "info", "user", "point", "error", "w", "problem", "pool", "conn"], "solver": ["Solution", "Solved", "Solver", "solution", "ssolver", "solved", "ssolve", "solve", " sangler", "sangler", "resolve", "ssolved", "ssolution", "resolved", "Sangler", " solution", "Solve", "resolution", "resolver", "ssangler", " solve"], "testNumber": ["testCount", "TestCount", " testCounter", " trialNumber", " trialCount", "TestNum", "TestCounter", " trialNum", " testCount", " trialCounter", "testNum", "TestNumber", " testNum", "testCounter"], "n": ["f", "ne", "name", "none", "string", "net", "no", "number", "not", "l", "na", "v", "t", "c", "num", "d", "y", "sn", "u", "e", "o", "str", "j", "s", "p", "un", "b", "ln", "ns", "nb", "en", "N", "enc", "z", "k", "nu", "fn", "r"], "i": ["f", "li", "fi", "h", "I", "mini", "data", "di", "ri", "id", "key", "m", "index", "gi", "ai", "io", "ji", "si", "l", "ui", "mu", "phi", "v", "c", "uri", "zi", "pi", "u", "o", "j", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "abi", "ini", "z", "ci", "k", "ip", "xi", "ix", "chi", "multi", "bi", "q"], "reader": ["parse", "client", "ner", "worker", "input", "ler", "ri", "socket", "inner", "io", "report", "server", "book", "loader", "driver", "er", "per", "feed", " Reader", "resource", "read", "pointer", "buffer", "re", "source", "e", "this", "ry", "wrapper", "url", "iter", "row", "reading", "slice", "Reader", "or", "filter", "table", "writer", "parser", "connection", "handler", "r"], "tokenizer": ["Tokenizer", "Tokener", "tokenize", "normalization", "okener", " tokenner", " tokenization", "okeniser", "okenization", "tokeniser", "serialize", "normaliser", "okenizers", " tokeniser", "serializer", "Tokenization", "characterize", "characterization", "normalize", "tokenizers", " tokenizers", "characterizer", "characterizers", "Tokeniser", "normalizer", "Tokenize", "tokenner", " tokenize", "serialner", "tokenization", "serialization", "okenizer", " tokener", "okenner", "okenize", "tokener"], "stream": ["channel", "client", "http", "cont", "path", "string", "data", "raw", "input", "context", "socket", "report", "document", "server", "loader", "driver", "port", "form", "sw", "ream", "per", "feed", "resource", "read", "buffer", "source", "serial", "row", "file", "slice", "response", "pool", "trans", "view", "Stream", "writer", "draft", "connection", "coll", "handler", "lock", "old", "r"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.lang.Math;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try {\\n            BufferedReader stdReader = new BufferedReader(new InputStreamReader(System.in));\\n            \\n            String line;\\n            \\n            while((line = stdReader.readLine()) != null) {\\n                String[] input = line.split(\" \", 0);\\n                long a = Long.parseLong(input[0]);\\n                long b = Long.parseLong(input[1]);\\n                \\n                long d = a / b;\\n                long r = a % b;\\n                double f = (double)a / (double)b;\\n                String after = String.format(\"%.5f\", f);\\n                System.out.println(d + \" \" + r + \" \" + after);\\n            }\\n            stdReader.close();\\n        } catch(Exception e) {\\n            e.getStackTrace();\\n            System.exit(-1);\\n        }\\n    }\\n}", "target": "90", "substitutes": {"stdReader": ["stdRead", " stdStream", "diffParser", "stdStream", "phpreader", "inputBuffer", "phpStream", "gradreader", "standardStream", "inputStream", "standardRead", "gradRead", "phpReader", " stdBuffer", "standardParser", " stdParser", " stdreader", "gradParser", "gradStream", "diffReader", "stdreader", "inputreader", "gradReader", "standardReader", "phpBuffer", "diffreader", "diffRead", "stdBuffer", "inputReader", "stdParser", " stdRead"], "line": ["value", "parse", "comment", "name", "cell", "string", "single", "data", "raw", "lin", "column", "log", "err", "id", "lines", "code", "key", "object", "split", "l", "text", "message", "block", "end", "page", "entry", "reader", "inline", "output", "source", "Line", "le", "e", "str", "url", "buffer", "section", "status", "strip", "row", "error", "pass", "file", "part", "header", "i", "ip", "LINE", "lc", "ine"], "input": ["list", "comment", "name", "string", "data", "raw", "format", "Input", "column", "in", "element", "image", "unknown", "integer", "object", "flow", "unit", "split", "text", "step", "block", "up", "form", "entry", "feed", "array", "inc", "output", "source", "batch", "pull", "word", "str", "load", "info", "field", "amp", "error", "file", "include", "back", "header", "part", "definition", "i", "inf", "argument"], "a": ["h", "am", "ga", "A", "ab", "ad", "m", "ai", "n", "l", "ac", "da", "ba", "t", "ca", "c", "aa", "area", "y", "ar", "aj", "va", "u", "e", "aaa", "auto", "at", "p", "sa", "x", "as", "w", "au", "i", "an", "ae", "alpha"], "b": ["bf", "h", "sb", "db", "ab", "length", "m", "n", "l", "B", "wb", "ob", "g", "v", "ba", "t", "c", "aa", "y", "xb", "rb", "u", "e", "o", "j", "bb", "p", "x", "w", "ib", "z", "bs", "k", "i", "eb", "bi", "fb"], "d": ["cd", "before", "h", "fd", "data", "di", "dt", "ad", "id", "m", "n", "dr", "l", "da", "g", "df", "driver", "D", "c", "y", "dl", "u", "e", "def", "dy", "dc", "p", "x", "w", "dd", "z", "dir", "i", "ds"], "r": ["h", "rt", "rg", "ri", "err", "m", "fr", "n", "dr", "l", "g", "v", "end", "c", "rl", "er", "y", "rb", "u", "e", "ra", "ur", "p", "R", "x", "ru", "cr", "w", "or", "rr", "rad", "rf", "nr", "rd", "i", "rw", "rs", "lr", "q"], "f": ["bf", "h", "fd", "fc", "fs", "lf", "fr", "flow", "l", "df", "v", "diff", "t", "c", "form", "ff", "fx", "e", "frac", "af", "F", "fp", "p", "fa", "sf", "fff", "rf", "function", "i", "fb", "tf", "force"], "after": ["before", "bf", "debug", "string", "between", "data", "format", "out", "in", "description", "until", "replace", "post", "default", "unit", "pre", "last", "end", "style", "model", "result", "future", "ext", "next", "After", "output", "around", "point", "field", "at", "p", "extra", "again", "pretty", "with", "under", "function", "i", "now", "later"]}}
{"code": "/* package codechef; // don't place package name! */\\n\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n\\n/* Name of the class has to be \"Main\" only if the class is public. */\\nclass Main\\n{\\n\tpublic static void main (String[] args) throws java.lang.Exception\\n\t{\\n\t\t// your code goes here\\n\t\t\t\tScanner sc=new Scanner (System.in);\\n\t\t\\n\t\tint ass=0;\\n\t\tint nod=sc.nextInt();\\n\t\tint t=sc.nextInt();\\n\t\twhile (t>0)\\n\t\t{\\n\t\t    ass=ass+sc.nextInt();\\n\t\t    t--;\\n\t\t}\\n\t\tif(nod>=ass)\\n\t\tSystem.out.println(nod-ass);\\n\t\telse System.out.println(-1);\\n\t\t\\n\t}\\n}\\n", "target": "108", "substitutes": {}}
{"code": "import java.util.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tint C = sc.nextInt();\\n\t\tint X = sc.nextInt();\\n\\n\t\tint cnt=0;\\n\t\tfor (int a=0;a<A+1;a++) {\\n\t\t\tfor (int b=0;b<B+1;b++) {\\n\t\t\t\tint x = X-a*500-b*100;\\n\t\t\t\tif (x>=0 && x%50==0 && x/50<=C) {\\n\t\t\t\t\tcnt++;\\n\t\t\t\t}\\n\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(cnt);\\n\t}\\n}", "target": "127", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "exp", " Sc", "nc", "sche", "sb", "cv", "search", "esc", "bc", "asc", "pc", "ck", "ss", "sec", "scope", "ca", "SC", "se", "c", "scan", "cs", "uc", "sw", "cl", "cus", "ctx", "cor", "str", "Sc", "sq", "sci", "src", "sf", "sync", "rc", "cer", "sr", "enc", "soc", "sp", " SC", "sh", "parser", "tc", "cur", "coll", "ser", "lc"], "A": ["G", "Az", "I", "Array", "AA", "API", "P", "Y", "S", "As", "D", "Offset", "Area", "BA", "At", "CA", "Ca", "U", "N", "Alpha", "M", "NA", "LA", "Am", "mA", "alpha"], "B": ["QB", "G", "I", "Bi", "L", "BB", "DB", "BF", "P", "GB", "Q", "Y", "BS", "AB", "E", "D", "BE", "BI", "MB", "LB", "F", "BA", "V", "R", "NB", "T", "U", "WB", "M", "N", "BBC", "BR", "Bs", "BC", "O", "OB"], "C": ["G", "K", "I", "CP", "Count", "P", "Q", "CW", "Y", "S", "E", "c", "D", "CI", "W", "F", "Cs", "R", "T", "CR", "U", "M", "N", "CC", "BC", "O"], "X": ["Code", "G", "K", "I", "L", "Z", "xx", "CP", "P", "Q", "H", "Y", "S", "E", "D", "W", "F", "V", "XP", "R", "T", "U", "M", "N", "Max", "CC", "XX"], "cnt": ["nnt", "cnc", "scnc", " cnc", " ccat", "ecrt", "ccat", "ncat", "count", "crc", "Cnc", "Cnt", " cNT", "cst", "colnt", " crt", "decrc", "decrt", "colst", " cst", "decount", "ecount", "nst", "nrt", "Crt", "cNT", " count", "colcat", " crc", "ecrc", "scrt", "colrt", "scNT", "CNT", "scnt", "ecnt", "decnt", "crt"], "a": ["f", "am", "oa", "ab", "ad", "ai", "n", "ac", "ba", "da", "ca", "area", "c", "aa", "d", "y", "aj", "pa", "u", "e", "this", "va", "af", "auto", "fa", "sa", "p", "as", "mA", "i", "an", "ae", "alpha"], "b": ["f", "bf", "pb", "h", "br", "base", "sb", "ab", "db", "bc", "l", "ba", "v", "bp", "c", "d", "y", "rb", "u", "e", "lb", "j", "bb", "s", "p", "nb", "cb", "ib", "bd", "bs", "k", "i", "be", "bi", "r"], "x": ["f", "xy", "xc", "php", "cross", "lex", "h", "data", "xx", "one", "wx", "id", "code", "index", "yx", "l", "t", "c", "tx", "xt", "d", "y", "dx", "ext", "fx", "ax", "fix", "ex", "width", "e", "xxxxxxxx", "xs", "p", "w", "pe", "xxx", "rx", "z", "sex", "px", "xi", "i", "ix", "xp", "any"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main\\n{\\n \\n\tpublic static void main(String[] args)\\n\t{\\n\t\tScanner sc = new Scanner(System.in);\\n \\n\t\tint age = Integer.parseInt(sc.next());\\n \t\tint b = Integer.parseInt(sc.next());\\n\t\t\\n      \tif(age>=13){\\n          System.out.println(b);\\n        }else if(age<=5){\\n          System.out.println(\"0\");\\n        }else{\\n          System.out.println(b/2);\\n        }\\n\t}\\n}", "target": "249", "substitutes": {"sc": ["class", "parse", "ner", "ch", "osc", " Sc", "nc", "sche", "cle", "cc", "bc", "esc", "pc", "ss", "server", "scope", "ca", "SC", "se", "c", "scan", "sw", "cl", "ctx", "cs", "uc", "com", "spec", "acc", "Sc", "sq", "dc", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "soc", "sp", "ci", " SC", "sch", "ec", "tc", "cur", "lc"], "age": ["f", "gen", "h", "level", "gar", "anch", "base", "grade", "oa", "ad", "length", "core", "id", "count", "code", "m", "build", "aa", "c", "page", "ie", "bar", "d", "se", "max", "ge", "next", "ace", "le", "e", "stage", "dy", "year", "archive", "date", "p", "aged", "aging", "line", "size", "ages", "ave", "gener", "gap", "average", "now", "old", "a", "span"], "b": ["f", "gb", "bf", "h", "br", "base", "sb", "db", "ab", "ad", "length", "number", "n", "l", "B", "library", "home", "ba", "fb", "emb", "bp", "bar", "c", "aa", "bin", "d", "y", "next", "rb", "e", "lb", "bb", "p", "nb", "cb", "ib", "bs", "big", "i", "beta", "abb", "body", "bi", "eb", "a"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n\\n    new Main().run();\\n  }\\n  public void run() {\\n\\n    try(BufferedReader in = new BufferedReader(new InputStreamReader(System.in))) {\\n      String S = in.readLine();\\n\\n      int f = Integer.parseInt(S.substring(0, 2));\\n      int s = Integer.parseInt(S.substring(2, 4));\\n\\n      String ans;\\n      if(isMonth(f) && isMonth(s)) ans = \"AMBIGUOUS\";\\n      else if (isMonth(f) && !isMonth(s)) ans = \"MMYY\";\\n      else if (!isMonth(f) && isMonth(s)) ans = \"YYMM\";\\n      else ans = \"NA\";\\n\\n      System.out.println(ans);\\n    }\\n    catch(IOException e) {\\n\\n      System.err.println(e);\\n    }\\n  }\\n\\n  public boolean isMonth(int m) {\\n    return 1 <= m && m <= 12;\\n  }\\n}", "target": "5", "substitutes": {"S": ["SA", "DS", "I", "L", "Si", "AS", "A", "Socket", "INS", "SO", "SN", "SAM", "Sample", "ss", "SH", "BS", "IN", "RS", "SC", "ST", "Service", "SER", "OS", "SL", "SB", "F", "V", "SD", "T", "SS", "TS", "U", "SE", "N", "M", "SU", "SR", "Sl", "SM", "WS", "In", "GS", "SI", "JS"], "f": ["h", "cf", "count", "index", "fr", "n", "l", "g", "v", "self", "like", "t", "of", "c", "inf", "form", "d", "fe", "y", "u", "e", "o", "j", "F", "p", "b", "x", "file", "w", "sf", "z", "i", "fs", "a", "r"], "s": ["ts", "sim", "string", "is", "sb", "lines", "gs", "south", "sing", "ims", "n", "si", "l", "ums", "v", "t", "cs", "c", "rows", "d", "ms", "y", "ls", "es", "u", "e", "ens", "o", "als", "xs", "p", "b", "ing", "ns", "x", "sf", "w", "ps", "sl", "z", "ages", "k", "os", "i", "ends", "ses", "an", "now", "fs", "ds", "a"], "ans": ["ANS", "vals", "ats", "ils", "ann", "oss", "aned", "lang", "anon", "span", "ays", "anas", "ani", "vs", "ons", "amps", "AN", " means", "ss", "na", "ums", "aos", "ops", "anc", "ones", "ents", "ads", "aning", "ms", "lan", "plan", "ls", "es", "nas", "ens", "rules", "aus", "als", "as", "atan", "ns", "san", "anges", "ants", "ps", "cas", "eps", "mean", "os", "asin", "ins", "ks", "ings", "ras", "la", "an", "ians", "ars", "nn", "ams", "ania", "ds", "ana"], "m": ["time", "h", "mon", "n", "months", "l", "month", "g", "v", "t", "c", "d", "ms", "num", "y", "age", "e", "o", "j", "u", "mm", "p", "date", "mod", "b", "M", "dm", "im", "hm", "Month", "md", "z", "mode", "pm", "k", "mn", "mi", "i", "sm", "a", "day", "um", "sym"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner s = new Scanner(System.in);\\n\t\tlong lNum = s.nextInt();\\n\t\tlong rNum = s.nextInt();\\n\t\ts.close();\\n\t\tlong min = 2019;\\n\t\tif (lNum / 2019 == rNum / 2019) {\\n\t\t\tfor (long i = lNum; i < rNum; i++) {\\n\t\t\t\tfor (long j = i + 1; j <= rNum; j++) {\\n\t\t\t\t\tlong amari = (i * j) % 2019;\\n\t\t\t\t\tif (amari < min) {\\n\t\t\t\t\t\tmin = amari;\\n\t\t\t\t\t}\\n\t\t\t\t\tif(amari == 0) {\\n\t\t\t\t\t\tmin = 0;\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}else {\\n\t\t\tmin = 0;\\n\t\t}\\n\t\tSystem.out.println(min);\\n\\n\t}\\n\\n}\\n", "target": "193", "substitutes": {"s": ["f", "ts", "http", "h", "is", "abs", "sb", "ssl", "ools", "in", "m", "gs", "south", "n", "si", "l", "S", "ss", "ops", "g", "v", "ches", "se", "c", "d", "ms", "ls", "fts", "serv", "es", "e", "o", "js", "qs", "services", "p", "b", "opens", "ns", "sf", "sync", "utils", "tests", "ps", "ws", "ans", "sl", "sys", "os", "ins", "parser", "ses", "a", "fs", "ds", "bis", "r"], "lNum": ["slMin", "lSum", "LCode", "Lnum", "llNum", "slNo", "LNum", "rSum", "slMult", "llMult", "bnum", "bCode", "lCode", "LNo", " lCode", "LMin", "LMult", "lTon", "lMult", " lRom", "llNo", "bNum", "rRom", "lMin", "rnum", "lRom", "LRom", "lnum", "lNo", "llMin", " lnum", "LSum", "LTon", " lTon", "slNum", " lSum", "bTon"], "rNum": ["rrNum", "rLen", "qNum", " rNumber", "rrMid", "pMin", "qNumber", "srNumber", "srRange", "uOrd", "rSum", " rnum", "RNumber", "nrNumber", "rOrd", "rRange", "srLen", " rRange", "qOrd", "nrRange", " rLen", "rrNUM", "lNumber", "rnum", " rSum", " rNUM", "ROrd", "qSum", "nrNum", "RSum", "rrMin", "lnum", "rMin", "uNum", "unum", "uNumber", "rNumber", " rOrd", "pNum", "RNum", "rMid", "nrLen", " rMid", "lOrd", "rNUM", " rMin", "srNum", "pNUM", "pMid"], "min": ["minute", "value", "val", "stat", "sort", "lower", "emin", "mini", "miss", "none", "name", "is", "don", "version", "act", "no", "mit", "err", "id", "mine", "key", "local", "when", "limit", "default", "low", "unit", "ignore", "n", "ai", "little", "initial", "pre", "na", "sec", "diff", "mins", "minus", "model", "Mini", "day", "fe", "small", "max", "pos", "Min", "use", "next", "js", "minimum", "un", "start", "sol", "sun", "partial", "part", "mean", "size", "amin", "count", "init", "pri", "skip", "sign", "MIN", "span"], "i": ["eni", "f", "li", "h", "I", "vi", "is", "in", "ri", "id", "m", "index", "ai", "ji", "n", "si", "l", "ui", "phi", "v", "it", "c", "ie", "d", "y", "u", "pi", "o", "e", "ii", "qi", "hi", "p", "b", "x", "ind", "oi", "ini", "z", "ci", "mi", "iu", "ip", "xi", "a", "r"], "j": ["f", "uj", "li", "h", "jj", "jo", "oj", "jp", "ni", "key", "m", "fr", "pr", "ji", "n", "si", "l", "ui", "g", "v", "it", "ja", "c", "ie", "d", "y", "aj", "u", "e", "o", "J", "ii", "qi", "p", "job", "b", "x", "je", "z", "k", "ij", "xi", "a", "bi", "q", "r"], "amari": ["acarin", "aar", " amara", "aari", " amasi", "chamari", "chamar", "asaria", "acari", "chamagi", "ajara", "ambarin", "amarin", "amagi", " amar", "asaru", "ambara", "ajarin", "amar", "amarius", "amaru", "umari", "camar", "ambasi", "camara", " amarius", "camari", "amaria", "amara", "lamari", "Amaru", "aaru", "asar", "lamar", "lamarius", "lamagi", "Amaria", "Amari", "umarin", "chamarius", "ajasi", "umara", "umar", " amarin", "asari", "acara", "acar", "amasi", "Amar", "ambari", " amagi", "camarin", "aaria", "ajari"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = sc.nextInt(), B = sc.nextInt(), C = sc.nextInt(), D = sc.nextInt();\\n\t\tint count = 0;\\n\t\tint ans = 0;\\n\t\twhile(count < 101) {\\n\t\t\tif(count >= A && count >= C &&\\n\t\t\t\tcount < B && count < D) {\\n\t\t\t\tans++;\\n\t\t\t}\\n\t\t\tcount++;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "47", "substitutes": {"sc": ["class", "parse", "ner", "ch", "osc", "cont", " Sc", "nc", "console", "sb", "sche", "cli", "core", "cv", "cc", "esc", "bc", "asc", "pc", "l", "text", "ss", "sec", "na", "scope", "anc", "app", "cus", "SC", "se", "c", "scan", "sw", "cl", "ctx", "uc", "cs", "com", "acc", "cor", "Sc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "soc", "sp", " SC", "ec", "tc", "cur", "coll", "desc", "ser", "lc"], "A": ["App", "FA", "G", "SA", "I", "L", "AA", "BB", "PA", "Count", "AD", "TA", "P", "H", "S", "AB", "As", "AP", "Area", "BA", "CA", "AC", "AF", "M", "N", "Alpha", "NA", "Ar", "AM", "AR", "LA", "CC", "Array", "DA", "Na", "a"], "B": ["G", "L", "BB", "BD", "DB", "Count", "P", "GB", "Q", "BT", "BS", "AB", "E", "PB", "BI", "SB", "LB", "F", "BA", "CL", "BL", "R", "b", "NB", "T", "U", "WB", "N", "M", "Bs", "CU", "BC", "O", "OB"], "C": ["CD", "CN", "G", "L", "CM", "CP", "CB", "X", "Count", "P", "CW", "CT", "S", "Y", "E", "c", "SC", "CF", "F", "CL", "Cs", "CA", "R", "Ca", "EC", "T", "CR", "U", "M", "N", "CS", "CC", "DC", "CE", "CU", "BC", "O"], "D": ["G", "DS", "L", "Z", "DA", "DB", "X", "AD", "Count", "DR", "Q", "DO", "Y", "S", "DF", "DE", "E", "d", "FD", "DH", "DI", "MD", "F", "DIR", "PD", "Do", "R", "JD", "T", "DP", "U", "N", "Ds", "DC", "DD", "CD"], "count": ["f", "name", "ann", "call", "number", "code", "cc", "default", "app", "ca", "conf", "c", "counter", "depth", "size", "found", "skip", "span", "allow", "act", "nt", "cat", "can", "max", "feed", "weight", "cache", "current", "cas", "part", "test", "cmp", "force", "cond", "ch", "core", "id", "keep", "index", "ac", "con", "type", "num", "array", "carry", "add", "s", "p", "b", "all", "child", "char", "common", "mean", "i", "parent", "list", "path", "base", "Count", "length", "config", "n", "process", "sum", "support", "acc", "ace", "batch", "pass", "len", "coll"], "ans": ["list", " len", "ANS", " scans", "cons", "auc", "atten", "ann", "alls", " counts", "act", "aned", "nt", "atches", "n", "annot", "AN", "ss", "acts", "na", "anc", "ca", "cs", "ents", "ctx", "can", "lan", "ls", "array", "es", "ace", "aus", "asts", "s", "as", " cases", "books", "ns", "cas", "ants", "ast", "len", " spans", " errors", "acs", "ins", "ana", "ks", "an", "ars", "span", "cases", "a"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint x = sc.nextInt();\\n\t\tsc.close();\\n\\n\t\twhile(! primeJudg(x)) {\\n\t\t\tx++;\\n\t\t}\\n\t\tSystem.out.print(x);\\n\t}\\n\\n\t//\u7d20\u6570\u3092\u5224\u65ad\u3059\u308b\u30e1\u30bd\u30c3\u30c9\\n\tpublic static boolean primeJudg(int a){\\n\t\tfor(int i=2 ; i<a ; i++) {\\n\t\t\tif(a%i == 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n}", "target": "183", "substitutes": {"sc": ["osc", "ch", " Sc", "nc", "st", "sb", "cv", "cc", "bc", "esc", "pc", "ss", "server", "scope", "g", "ca", "SC", "se", "c", "scan", "cs", "cl", "uc", "sw", "Sc", "sq", "dc", "sci", "cr", "src", "rc", "sr", "soc", "sl", "sp", "ci", " SC", "sh", "ec", "cur", "sem"], "x": ["f", "xy", "xc", "cross", "val", "lex", "xe", "xx", "X", "wx", "id", "mx", "code", "index", "m", "hex", "n", "patch", "v", "t", "c", "page", "tx", "cl", "num", "y", "pos", "dx", "fx", "ax", "xb", "ex", "event", "e", "j", "xs", "p", "xxx", "rx", "z", "sex", "xa", "i", "xi", "test", "ix", "check", "xp", "rex"]}}
{"code": "import java.io.*;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\\n\\n        int[][] c = new int[3][3];\\n        for (int i = 0; i < 3; i++) {\\n            c[i] = in.nextIntArray(3);\\n        }\\n        for (int j = 1; j < 3; j++) {\\n            for (int i = 1; i < 3; i++) {\\n                if (c[i][j] - c[i][j - 1] != c[i - 1][j] - c[i - 1][j - 1]) {\\n                    out.println(\"No\");\\n                    out.close();\\n                    return;\\n                }\\n\\n                if (c[j][i] - c[j - 1][i] != c[j][i - 1] - c[j - 1][i - 1]) {\\n                    out.println(\"No\");\\n                    out.close();\\n                    return;\\n                }\\n            }\\n        }\\n        out.println(\"Yes\");\\n\\n\\n        out.close();\\n        //INT OVERFLOW -> USE LONG\\n        //ARR OUT OF BOUNDS\\n    }\\n\\n    static class Scanner {\\n        StringTokenizer st;\\n        BufferedReader br;\\n\\n        public Scanner(InputStream s) {\\n            br = new BufferedReader(new InputStreamReader(s));\\n        }\\n\\n        public Scanner(String s) {\\n            try {\\n                br = new BufferedReader(new FileReader(s));\\n            } catch (FileNotFoundException e) {\\n                e.printStackTrace();\\n            }\\n        }\\n\\n        public String next() {\\n            while (st == null || !st.hasMoreTokens()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n\\n        public long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        public double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        public int[] nextIntArray(int n) {\\n            int[] arr = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                arr[i] = nextInt();\\n            }\\n            return arr;\\n        }\\n\\n        public double[] nextDoubleArray(int n) {\\n            double[] arr = new double[n];\\n            for (int i = 0; i < n; i++) {\\n                arr[i] = nextDouble();\\n            }\\n            return arr;\\n        }\\n\\n        public long[] nextLongArray(int n) {\\n            long[] arr = new long[n];\\n            for (int i = 0; i < n; i++) {\\n                arr[i] = nextLong();\\n            }\\n            return arr;\\n        }\\n\\n        public char[] nextCharArray(int n) {\\n            char[] arr = nextLine().trim().replaceAll(\"\\\\s\", \"\").toCharArray();\\n            return arr;\\n        }\\n\\n        public String[] nextStringArray(int n) {\\n            String[] arr = new String[n];\\n            for (int i = 0; i < n; i++) {\\n                arr[i] = next();\\n            }\\n            return arr;\\n        }\\n    }\\n}\\n", "target": "88", "substitutes": {"in": ["f", "ner", "name", "cin", "data", "input", "lin", "din", "id", "pin", "inner", "image", "ai", "n", "nin", "l", "IN", "inn", "con", "bin", "er", "reader", "kin", "resource", "inc", "read", "source", "ex", "serv", "e", "info", "user", "s", "as", "b", "ln", "pass", "rin", "w", "ini", "sin", "win", "again", "line", "asin", "ins", "init", "In", "inf", "bis", "r"], "out": ["f", "exp", "arg", "co", "prefix", "call", "err", "key", "m", "inner", "server", "conf", "editor", "query", "inc", "extra", "again", "temp", "view", "outer", "png", "outs", "check", "exit", "string", "echo", "gz", "self", "bar", "doc", "dot", "ex", "source", "cache", "full", "strip", "Out", "ini", "with", "copy", "part", "gen", "client", "ch", "input", "log", "null", "up", "print", "page", "OUT", "this", "o", "builder", "s", "p", "b", "all", "file", "sync", "dump", "line", "writer", "connection", "plain", "obj", "list", "path", "raw", "cli", "io", "report", "exec", "v", "bin", "write", "output", "word", "str", "user", "point", "error", "pass", "w", "println", "pool", "conn"], "c": ["cd", "f", "xc", "center", "h", "cf", "fc", "ch", "mc", "co", "cy", "m", "code", "cc", "config", "count", "pc", "n", "l", "ac", "g", "v", "t", "cs", "cl", "d", "chain", "y", "ce", "cm", "u", "e", "cache", "o", "s", "dc", "p", "b", "x", "C", "cr", "w", "central", "enc", "cu", "sc", "col", "z", "ci", "k", "ct", "arc", "ec", "lc", "q", "r"], "i": ["f", "eni", "li", "fi", "h", "I", "vi", "is", "di", "ik", "ni", "ri", "id", "gi", "m", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "v", "it", "ie", "y", "uri", "u", "e", "pi", "o", "api", "ii", "iii", "qi", "hi", "p", "b", "oi", "x", "ia", "abi", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "ix", "ki", "bi", "a"], "j": ["f", "uj", "li", "h", "jl", "jj", "ch", "jo", "is", "jp", "di", "ik", "ni", "gi", "id", "key", "io", "ji", "n", "si", "l", "ui", "g", "v", "jc", "t", "ja", "ie", "it", "d", "y", "aj", "u", "e", "o", "J", "js", "ii", "qi", "s", "p", "job", "b", "x", "w", "je", "z", "ci", "k", "xi", "ij", "iu", "a", "ix", "jet", "bi", "q"]}}
{"code": "import java.util.*;\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner scan=new Scanner(System.in);\\n    int x=scan.nextInt();\\n    int y=x;\\n    if(x==2){\\n      System.out.println(x);\\n    }else {\\n      while(true){\\n        boolean ok=true;\\n        for(int i=2;i<y;i++){\\n          if(y%i==0){\\n            ok=false;\\n            break;\\n          }\\n        }\\n        if(ok){\\n          break;\\n        }\\n        y++;\\n      }\\n      System.out.println(y);\\n    }\\n  }\\n}", "target": "183", "substitutes": {"scan": ["store", "gen", "parse", "stat", "ner", "skip", "car", "ann", "watch", "out", "in", "log", "search", "n", "na", "wait", "send", "se", "cat", "can", "feed", "query", "read", "ry", "connect", "iter", "all", "Scan", "ln", "sync", "sc", "win", "sys", "an", "walk", "look", "get", "check", "nn", "ser", "run", "clean", "sign", "r", "span"], "x": ["f", "xy", "h", "xx", "in", "X", "ey", "id", "key", "code", "index", "n", "l", "ye", "Y", "v", "t", "c", "ww", "num", "d", "pos", "ax", "ex", "width", "e", "u", "j", "dy", "xs", "s", "p", "b", "python", "w", "xxx", "win", "ya", "rx", "z", "px", "k", "size", "xi", "yy", "ix"], "y": ["xy", "yo", "ch", "yu", "wy", "oy", "ey", "id", "cy", "key", "sy", "zy", "index", "gy", "n", "ys", "ye", "Y", "py", "t", "c", "d", "vy", "ny", "yl", "ay", "u", "e", "o", "j", "ady", "ry", "dy", "year", "p", "isy", "b", "python", "asy", "start", "yi", "iy", "ya", "col", "ky", "z", "yn", "yy", "ix", "ym", "my"], "i": ["f", "li", "fi", "I", "di", "ni", "length", "gi", "index", "ai", "io", "ji", "si", "l", "ui", "mu", "phi", "v", "it", "t", "ie", "d", "zi", "u", "pi", "o", "j", "ii", "qi", "ti", "hi", "p", "oi", "b", "slice", "ini", "z", "ci", "xi", "ip", "init", "chi", "ix", "multi", "bi", "a"], "ok": ["f", "hack", "valid", "kind", "ready", "allow", "Ok", "ko", "fail", "log", "err", "pl", "id", "keep", "ack", "good", "n", "ck", "norm", "app", "oks", "c", "bug", "d", "ng", "inc", "always", "o", "info", "auto", "iter", "loc", "b", "all", "ind", "error", "sync", "ak", "enc", "op", "md", "k", "ask", "OK", "look", "found", "coll", "check", "lock", "clean", "od"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner input = new Scanner(System.in);\\n        int N = input.nextInt();\\n        int A = input.nextInt();\\n        int B = input.nextInt();\\n        if (N+A+B > 21){\\n            System.out.println(\"bust\");\\n        }else {\\n            System.out.println(\"win\");\\n        }\\n\\n//        for (int i = 0; i < N; i++){\\n//            for (int j = 0; j < A; j++){\\n//\\n//            }\\n//        }\\n    }\\n}\\n", "target": "129", "substitutes": {"input": ["f", "class", "http", "list", "client", " Input", "parse", "instance", "out", "Input", "in", "context", "image", "kernel", "session", "io", "flow", "object", "n", "select", "text", "l", "upload", "null", "exec", "print", "c", "inf", "iterator", "forward", "reader", "feed", "array", "request", "inc", "output", "source", "event", "buffer", "this", "str", "pull", "read", "current", "iter", "system", "error", "file", "util", "view", "work", "stream", "i", "method", "socket"], "N": ["NE", "G", "K", "I", "L", "X", " n", "Ni", "P", "NS", "H", "n", "NC", "Y", "S", "Na", "E", "D", "NL", "W", "F", "V", "NM", "R", "NN", "T", "C", "U", "M", "NA", "Ne", "NT", "O"], "A": ["G", "SA", "K", "I", "L", "AA", "AS", "PA", "X", "AD", "P", "H", "Y", "S", "AB", "Na", "E", "D", "II", "AP", "AI", "MA", "F", "BA", "V", "Ca", "AC", "T", "C", "An", "U", "M", "AM", "NA", "AR", "LA", "O", "a"], "B": ["QB", "G", "K", "I", "BP", "L", "Z", "AA", "BB", "DB", "X", " b", "P", "GB", "Q", "Y", "S", "AB", "UB", "E", "D", "TB", "W", "SB", "J", "LB", "F", "BA", "V", "R", "b", "NB", "T", "C", "U", "WB", "M", "Bs", "IB", "O", "OB"]}}
{"code": "import java.util.*;\\n\\nimport static java.lang.System.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        long N = sc.nextLong();\\n\\n        // \u30eb\u30fc\u30c8N * \u30eb\u30fc\u30c8N\u306e\u3068\u304d\u304c\u6700\u3082\u6700\u5c0f\\n        long divide1 = (long) Math.sqrt(N);\\n\\n        while(N % divide1 != 0) {\\n            divide1--;\\n        }\\n        long divide2 = N / divide1;\\n\\n        int len1 = String.valueOf(divide1).length();\\n        int len2 = String.valueOf(divide2).length();\\n\\n        out.println(Math.max(len1, len2));\\n    }\\n}", "target": "61", "substitutes": {"sc": ["osc", "ner", "exp", "cont", " Sc", "nc", "sb", "sche", "proc", "esc", "bc", "cc", "pc", "si", "ss", "sec", "scope", "ca", "SC", "c", "scan", "se", "uc", "cl", "sw", "cs", "spec", "acc", "Sc", "system", "sub", "sci", "cr", "src", "sf", "rc", "sp", "ci", " SC", "ec", "desc", "cmp"], "N": ["G", "K", "I", "L", "Z", "A", " n", "Node", "P", "NS", "SN", "n", "S", "B", "D", "NL", "J", "F", "V", "No", "R", "C", "T", "Num", "M", "Ns", "NT", "O"]}}
{"code": "import java.io.InputStream;\\nimport java.io.IOException;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        final MyScanner sc = new MyScanner();\\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        int[] a = new int[m];\\n        for (int i = 0; i < m; i++) {\\n            a[i] = sc.nextInt();\\n        }\\n\\n        final int MOD = 1000000007;\\n        long dp[] = new long[n + 1];\\n        dp[0] = 1;\\n        int temp = 0;\\n        for (int i = 1; i <= n; i++) {\\n            if (temp < m && a[temp] == i) {\\n                temp++;\\n                continue;\\n            }\\n            dp[i] += dp[i - 1];\\n            /*while (dp[i] >= MOD) {\\n                dp[i] -= MOD;\\n            }*/\\n            dp[i] %= MOD;\\n            if (i - 2 >= 0) {\\n                dp[i] += dp[i - 2];\\n                /*while (dp[i] >= MOD) {\\n                    dp[i] -= MOD;\\n                }*/\\n                dp[i] %= MOD;\\n            }\\n        }\\n        System.out.println(dp[n]);\\n    }\\n}\\n\\nclass MyScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int pointer = 0;\\n    private int bufLength = 0;\\n\\n    private boolean hasNextByte() {\\n        if (pointer < bufLength) {\\n            return true;\\n        } else {\\n            pointer = 0;\\n            try {\\n                bufLength = in.read(buffer);\\n            } catch (final IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (bufLength <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private int readByte() {\\n        if (hasNextByte()) {\\n            return buffer[pointer++];\\n        } else {\\n            return -1;\\n        }\\n    }\\n\\n    private static boolean isNumberChar(final int c) {\\n        return '0' <= c && c <= '9';\\n    }\\n\\n    private static boolean isPrintableChar(final int c) {\\n        return 33 <= c && c <= 126;\\n    }\\n\\n    public boolean hasNext() {\\n        while (hasNextByte() && !isPrintableChar(buffer[pointer])) {\\n            pointer++;\\n        }\\n        return hasNextByte();\\n    }\\n\\n    public String next() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        final StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while (isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n\\n    public long nextLong() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        long num = 0;\\n        boolean isNegative = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            isNegative = true;\\n            b = readByte();\\n        }\\n        if (!isNumberChar(b)) {\\n            throw new NumberFormatException();\\n        }\\n        while (true) {\\n            if (isNumberChar(b)) {\\n                num *= 10;\\n                num += b - '0';\\n            } else if (b == -1 || !isPrintableChar(b)) {\\n                return isNegative ? -num : num;\\n            } else {\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n\\n    public int nextInt() {\\n        final long temp = nextLong();\\n        if (temp < Integer.MIN_VALUE || Integer.MAX_VALUE < temp) {\\n            throw new NumberFormatException();\\n        }\\n        return (int) temp;\\n    }\\n\\n    public double nextDouble() {\\n        return Double.parseDouble(next());\\n    }\\n}\\n", "target": "174", "substitutes": {"sc": ["osc", "cont", "mc", " Sc", "RC", "nc", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "scope", "anc", "ca", "SC", "scan", "se", "uc", "sw", "cl", "cs", "cus", "ctx", "Sc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "scl", "soc", "ci", "sp", " SC", "sch", "sh", "ec", "sem", "lc"], "n": ["nm", "f", "h", "ne", "name", "nc", "net", "nt", "ni", "l", "g", "v", "t", "d", "y", "sn", "u", "e", "o", "j", "cn", "p", "x", "ns", "nb", "N", "M", "z", "k", "mn", "size", "nn", "r"], "m": ["f", "nm", "h", "dim", "mc", "man", "l", "mu", "v", "t", "d", "ms", "y", "cm", "u", "e", "o", "j", "mm", "dn", "p", "mod", "x", "dm", "N", "M", "hm", "md", "z", "k", "mn", "mi", "sm", "tm", "module", "r"], "a": ["ora", "ama", "am", "ga", "A", "ab", "ma", "ad", "oa", "ai", "na", "ba", "area", "ca", "aa", "d", "ar", "aj", "array", "ap", "pa", "va", "img", "aaa", "auto", "p", "sa", "ia", "as", "au", "ata", "mA", "ana", "tta", "an", "ae", "alpha", "la"], "i": ["f", "eni", "li", "fi", "I", "vi", "mini", "di", "iv", "anti", "ik", "ni", "cli", "gi", "id", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "t", "ie", "d", "y", "uri", "u", "pi", "o", "e", "j", "api", "ii", "info", "qi", "p", "ti", "x", "oi", "ic", "slice", "tmp", "abi", "ini", "q", "z", "ci", "mi", "ip", "iu", "xi", "init", "ix", "multi", "bi"], "MOD": [" mod", "mult", " M", "Length", "modified", "I", "FORM", "L", "RC", "Mod", "Mods", "X", "P", "VERSION", "mu", "MAG", "METHOD", "MM", "Module", "FD", "ARM", "cm", "MA", "MD", "F", "MAC", "R", "mod", "tmp", "SIZE", "mag", "M", "MODE", "MAT", " Mod", "mode", "MT", "MS", "MAX", "mn", "MO", "LOC", "MR", "perm", "SPEC", "MED", "Mi", "module", "DIV", "MIN", "RM"], "dp": ["ep", "pb", " data", "dim", " tcp", "data", "wp", "ga", "di", "dt", "grad", "db", "dist", "ssl", " DP", "dep", "dr", " df", " d", "deb", "df", "tp", " cp", "da", "wd", "dat", "gp", "pg", "d", " dep", "pkg", "mp", "dl", "password", " delta", "cm", "pa", "xd", "dB", "loc", "pid", "fp", "p", "lp", "dc", "dn", "proxy", "reb", "DP", "dm", "pp", "vp", "pm", "imp", "sp", " p", "cp", "ip", "adr", "ds"], "temp": ["tem", "f", " tmp", "level", "div", "mini", "base", "vi", "shift", "template", "di", "prefix", "nt", "cli", "length", "gi", "id", "index", "timeout", "si", "total", "api", "v", "wait", "diff", "t", "it", "pi", "u", "adj", "j", "emp", "Temp", "porary", "ii", " temporary", "iter", "dc", "p", "current", "pt", "x", "oi", "tmp", "ci", "fake", "size", "partial", "perature", "tc", "test", "pri", "init", "flat", "const", "multi", "lc"], "in": ["f", "h", "rec", "path", "data", "is", "raw", "input", "out", "lin", "ssl", "err", "inner", "binary", "socket", "io", "readable", "l", "IN", "inn", "min", "con", "bin", "d", "reader", "isin", "resource", "inc", "read", "source", "ex", "re", "this", "url", "serv", "as", "p", "pass", "ini", "login", "win", "line", "ins", "connection", "inet", "get", "In", "lock", "inf", "r"], "buffer": ["Buffer", "store", "border", "uffer", "value", "base", "data", "input", "buff", "length", "limit", "binary", "number", "seed", "image", "document", "texture", "window", "block", "message", "queue", "address", "server", "bar", "buf", "page", "bin", "layer", "reader", "array", "resource", "read", "output", "batch", "source", "transfer", "cache", "url", "position", "bb", "iter", "flush", "offset", "uf", "slice", "cb", "pool", "table", "header", "pad", "memory", "fb", "reference"], "pointer": ["path", "shift", "zone", "padding", "slot", "prefix", "context", "length", "count", "number", "index", "timeout", "pointers", "step", "patch", "ticket", "address", "inter", "area", "iterator", "password", "vector", " ptr", "pos", "resource", "Ptr", "hole", "ace", "wrapper", "point", "position", "pocket", "offset", "proxy", "p", "slice", "start", "magic", "scroll", "ptr", "size", "margin", "pixel", "pad", "connection", "handler", "alpha", "parent", "argument", "socket", "reference"], "bufLength": [" bufSize", "buffOffset", "avLen", "bufOffset", "ufSize", "ufLength", "poolWidth", " bufOffset", "bufLen", "buflength", " bufWidth", "avLength", "bufflength", "buffLength", "poolLength", "avSize", "poollength", "uflength", " bufLen", "bufWidth", "ufWidth", "poolSize", " buflength", "ufLen", "ufOffset", "bufSize", "buffLen", "buffWidth", "buffSize", "avlength"], "c": ["f", "xc", "ch", "cf", "nc", "count", "code", "cy", "cc", "esc", "pc", "unc", "l", "ac", "v", "ca", "cs", "uc", "d", "ce", "dec", "u", "e", "cache", "s", "dc", "p", "x", "C", "cr", "w", "rc", "enc", "cu", "col", "or", "z", "ci", "k", "ct", "cp", "size", "arc", "ec", "cur", "lc", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tint M = sc.nextInt();\\n\\n\t\tint maxL = 0;\\n\t\tint minR = 0;\\n\t\tfor(int i=0; i<M; i++) {\\n\t\t\tif(i == 0) {\\n\t\t\t\tmaxL = sc.nextInt();\\n\t\t\t\tminR = sc.nextInt();\\n\t\t\t} else {\\n\t\t\t\tint L = sc.nextInt();\\n\t\t\t\tint R = sc.nextInt();\\n\\n\t\t\t\tmaxL = maxL < L ? L : maxL;\\n\t\t\t\tminR = minR > R ? R : minR;\\n\t\t\t}\\n\t\t}\\n\\n\t\tint count = maxL>minR ? 0 : minR-maxL+1;\\n\t\tprintln(count);\\n\t}\\n\\n\tpublic static void println(Object o) {\\n\t\tSystem.out.println(o);\\n\t}\\n}", "target": "124", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "exp", "auc", "fc", "mc", " Sc", "nc", "ga", "out", "sche", "sb", "cle", "cli", "search", "esc", "bc", "cc", "asc", "pc", "l", "cam", "ss", "na", "anc", "scope", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "ctx", "cor", "Sc", "loc", "sq", "dc", "sci", "cr", "sync", "cb", "rc", "enc", "soc", "ws", "sp", " SC", "sch", "sh", "parser", "tc", "cur", "coll", "lc", " scr"], "N": ["G", "K", "Len", "I", "Z", "Size", "X", " n", "P", "Q", "H", "n", "S", "B", "E", "D", "NL", "MN", "J", "F", "V", "T", "C", "U", "Ns", "NT", "O"], "M": ["G", "K", "I", "DM", "Z", "A", "X", "P", "m", "Q", "H", "n", "B", "Y", "S", "E", "D", "LM", "MN", "W", "J", "MD", "F", "V", "NM", "T", "C", "MI", "U", "MT", "ME", "O"], "maxL": ["maxLine", "MaxLine", "MaxL", "MaxN", "maxI", " maxN", "firstN", " maxLine", " maxM", "minLine", "minI", "MaxR", "lastN", " maxl", "lastL", "lastR", "axl", "maxN", " maxR", "axI", "minN", "MaxM", "axL", "axN", "minl", "maxl", "minL", "Maxl", "MaxI", "axM", "firstL", " maxI", "firstl", "maxR", "firstR", "maxM"], "minR": ["mitL", " minC", "maxB", "MinRange", "maxI", "maxC", " minL", "minr", "MinB", " minRange", "minI", " minr", "MinN", "minC", "MINM", " minB", "maxF", "MinR", "MinL", "minRange", "minF", "MINB", " minI", "maxN", "Minr", "minN", "minB", "MinI", "MINL", " minN", " minM", "minL", " minF", "maxRange", "maxM", "MINC", "mitM", "mitF", "maxR", "MINR", "mitR", "maxr", "minM", "MINF"], "i": ["f", "li", "I", "mini", "di", "in", "ni", "id", "gi", "m", "index", "ai", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "c", "ie", "zi", "u", "pi", "j", "e", "ii", "qi", "bi", "axis", "p", "ti", "b", "x", "hi", "oi", "ini", "start", "z", "ci", "part", "mi", "ip", "xi", "chi", "ix", "multi", "a", "r"], "L": ["G", "EL", "LT", "Len", "I", "XL", "FL", "X", "P", "Q", "l", "B", "S", "Limit", "Y", "UL", "Lu", "LO", "Left", "D", "Li", "Lo", "LM", "NL", "W", "LR", "SL", "F", "RL", "V", "Low", "LI", "T", "PL", "C", "U", "LL", "El", "IL", "LA", "dL", "O"], "R": ["Rel", "G", "Ra", "I", "A", "RR", "X", "Rs", "P", "Q", "H", "RO", "B", "Y", "S", "RH", "r", "D", "E", "W", "LR", "F", "RL", "V", "HR", "RW", "C", "T", "U", "CR", "Max", "Right", " r", "SR", "NR", "Sl", "AR", "BR", "Gr", "Rh", "WR", "O", "RA"], "count": ["cond", "class", "list", "val", "level", "base", "call", "Count", "length", "core", "id", "code", "number", "label", "limit", "log", "total", "last", "sum", "loop", "more", "c", "type", "max", "weight", "counter", "cache", "info", "depth", "current", "offset", "start", "len", "col", "line", "size", "found", "skip", "mark"], "o": ["O", "f", "obj", "data", "out", "oa", "m", "object", "io", "n", "l", "null", "ob", "oid", "v", "t", "c", "d", "online", "obo", "so", "e", "to", "p", "vo", "x", "bo", "oi", "ilo", "op", "ro", "k", "os", "ou", "ooo", "oo", "a", "r"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main\\n{\\n    static PrintWriter out=new PrintWriter((System.out));\\n    public static void main(String args[])throws IOException\\n    {\\n        Reader sc=new Reader();\\n        int a=sc.nextInt();\\n        int b=sc.nextInt();\\n        out.println(a*b);\\n        out.close();\\n    }\\n\\n    public static void solve()\\n    {\\n    }\\n\\n    static class Reader\\n    {\\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer st=new StringTokenizer(\"\");\\n        public String next()\\n        {\\n            while(!st.hasMoreTokens())\\n            {\\n                try\\n                {\\n                    st=new StringTokenizer(br.readLine());\\n                }\\n                catch(Exception e)\\n                {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        public int nextInt()\\n        {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public long nextLong()\\n        {\\n            return Long.parseLong(next());\\n        }\\n\\n        public double nextDouble()\\n        {\\n            return Double.parseDouble(next());\\n        }\\n\\n        public String nextLine()\\n        {\\n            try\\n            {\\n                return br.readLine();\\n            }\\n            catch(Exception e)\\n            {\\n                e.printStackTrace();\\n            }\\n            return null;\\n        }\\n\\n        public boolean hasNext()\\n        {\\n            String next=null;\\n            try\\n            {\\n                next=br.readLine();\\n            }\\n            catch(Exception e)\\n            {\\n            }\\n            if(next==null)\\n            {\\n                return false;\\n            }\\n            st=new StringTokenizer(next);\\n            return true;\\n        }\\n    }\\n}\\n", "target": "35", "substitutes": {"out": ["obj", "client", "ch", "arg", "name", "path", "string", "input", "console", "in", "call", "log", "err", "cli", "io", "exec", "null", "IN", "self", "print", "up", "c", "result", "write", "OUT", "reader", "output", "buffer", "ex", "source", "this", "o", "str", "info", "cache", "to", "user", "builder", "all", "row", "error", "file", "Out", "w", "ini", "sync", "println", "again", "temp", "view", "line", "writer", "outs", "screen", "parent", "r"], "sc": ["osc", "ch", "cont", " Sc", "nc", "cle", "cv", "cc", "bc", "esc", "asc", "ss", "sec", "scope", "ca", "SC", "c", "cs", "se", "sw", "uc", "cl", "cus", "reader", "com", "ctx", "cor", "Sc", "sq", "sci", "cr", "src", "rc", "cer", "soc", "sp", "ci", " SC", "sch", "sh", "ec", "sem", "lc"], "a": ["f", "A", "oa", "ab", "ma", "count", "n", "ea", "ba", "da", "ca", "area", "aa", "c", "d", "num", "y", "aj", "va", "pa", "ua", "s", "fa", "sa", "p", "x", "as", "za", "ia", "access", "au", "k", "qa", "i", "an", "ae", "alpha"], "b": ["f", "pb", "h", "base", "ab", "db", "length", "n", "l", "B", "wb", "zb", "ob", "ba", "c", "aa", "d", "y", "abc", "mb", "rb", "e", "lb", "bb", "s", "p", "x", "nb", "ib", "z", "bs", "bd", "k", "i", "abb", "fb", "r"], "br": ["tr", "ch", "ner", "bh", "cro", "db", "ab", "oper", "bl", "err", "ler", "bt", "bro", "pl", "fr", "bc", "fore", "io", "pr", "orb", "arr", "dr", "mr", "bar", "result", "buf", "vr", "reader", "per", "wr", "rb", "gr", "hr", "str", "img", "p", "cr", "src", "ocr", "yr", "ber", "res", "sr", "sp", "nr", "BR", "bridge", "lr", "browser", "Br", "be", "r"], "st": ["store", "nd", "sta", "inst", "string", "St", "stri", "sb", "nt", "bl", "bt", "ut", " est", "stable", "l", "ist", "step", "ss", "ost", "est", "t", "rest", "ST", "se", "tt", "sw", "cl", "d", "ft", "e", "str", "pt", "sts", "stop", "ld", "stage", "s", "sa", "ust", "stack", "cr", "ast", "pe", "start", "sl", "sp", "part", "ct", "sh", "const", "be", "std", "ste", "sth", "sign", "r"], "next": ["value", "primary", "name", "lines", "number", "code", "key", "latest", "image", "default", "message", "sec", "handle", "en", "head", "again", "now", "skip", "sign", "sequence", "second", "lower", "ne", "string", "iss", "address", "more", "doc", "iterator", "future", "max", "resource", "dot", " Next", "j", "current", "open", "response", "gen", "li", "valid", "Next", "readable", "step", "text", "close", "last", "end", "nice", "success", "page", "first", "sen", "entry", "empty", "seq", "ng", "this", "reply", "frame", "job", "line", "big", "other", "seen", "continue", "net", "obj", "parse", "data", "good", "apply", "send", "result", "write", "same", "pointer", "security", "then", "str", "blank", "error", "missing", "start", "prev"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int N = sc.nextInt();\\n        int L = sc.nextInt();\\n        sc.nextLine();\\n        String S[] = new String[N];\\n        \\n        for(int i=0 ; i< N ; i++){\\n            S[i] = sc.nextLine();\\n        }\\n        \\n        Arrays.sort(S);\\n        \\n        for(String i:S){\\n            System.out.print(i);\\n        }\\n    }\\n}\\n", "target": "224", "substitutes": {}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        ABC120_2 solver = new ABC120_2();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class ABC120_2 {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int A = in.nextInt();\\n            int B = in.nextInt();\\n            int K = in.nextInt();\\n            int a = Math.max(A, B);\\n            int b = Math.min(A, B);\\n            int counter = b;\\n            while (true) {\\n                if ((a % counter == 0) && (b % counter == 0)) {\\n                    K--;\\n                    if (K == 0) {\\n                        out.println(counter);\\n                        return;\\n                    }\\n                }\\n                counter--;\\n            }\\n        }\\n\\n    }\\n}\\n\\n", "target": "134", "substitutes": {"inputStream": [" inputBuffer", "InputStream", " inputStyle", "inputBuffer", "InputStyle", "outputSteam", " inputSteam", "outputStyle", "outputBuffer", "InputBuffer", "inputStyle", "Inputstream", "InputSteam", " inputstream", "outputstream", "inputstream", "inputSteam"], "outputStream": ["inputForm", "OutputStream", "outputSteam", "OutputSteam", " outputSteam", "outputForm", "Outputstream", "OutputForm", " outputstream", "targetSteam", "targetStream", "outputstream", "inputstream", " outputForm", "targetstream", "inputSteam"], "in": ["gen", "arg", "path", "between", "cin", "data", "is", "string", "input", "version", "lin", "log", "err", "din", "pin", "image", "inner", "id", "config", "binary", "io", "socket", "n", "nin", "l", "IN", "inn", "min", "con", "c", "bin", "er", "reader", "kin", "request", "isin", "the", "inc", "resource", "source", "this", "info", "inside", "s", "as", "x", "rin", "w", "slice", "ini", "sin", "login", "win", "again", "ins", "conn", "i", "connection", "init", "arin", "In", "gin", "inf", "r"], "out": ["exp", "arg", "name", "plus", "is", "version", "prefix", "call", "err", "key", "inner", "timeout", "server", "c", "query", "inc", "again", "temp", "outer", "init", "outs", "string", "session", "bar", "source", "ex", "cache", "Out", "copy", "socket", "gen", "client", "log", "index", "IN", "up", "print", "scan", "OUT", "buffer", "this", "o", "s", "p", "file", "sync", "line", "writer", "connection", "In", "parent", "net", "obj", "list", "path", "outside", "io", "n", "window", "exec", "scope", "write", "bin", "output", "external", "user", "point", "x", "error", "pass", "w", "pool", "conn"], "solver": ["Solution", "Solver", "Solving", "solution", "ssolver", "unsolve", "ssolve", "nsolution", "solve", "nsector", "sector", "ssolution", "solving", "Sector", "ssector", "unsolver", "nsolver", "ssolving", "Solve", "unsolution", "unsolving", "nsolve"], "testNumber": ["testNumbers", "Testnumber", "TestNumbers", " trialnumber", "TestNum", " testNumbers", " trialNum", " testnumber", "testNum", "TestNumber", " testNum", "testnumber", " trialNumbers", " trialNumber"], "A": ["AW", "G", "I", "AA", "Java", "Input", "This", "API", "X", "P", "HA", "Y", "S", "AB", "As", "IA", "GA", "D", "Ab", "Ang", "AP", "Ma", "Area", "BA", "At", "CA", "AC", "AF", "C", "An", "KA", "U", "N", "Ar", "AM", "NA", "AR", "LA", "Am", "mA", "alpha", "Na"], "B": ["G", "I", "Bi", "L", "BB", "DB", "X", "BF", "P", "GB", "Q", "H", "Y", "AB", "UB", "E", "D", "BE", "W", "BI", "EB", "F", "BA", "V", "NB", "C", "T", "U", "WB", "N", "M", "Bs", "BC", "O", "OB"], "K": ["G", "I", "KER", "Z", "PK", "SK", "X", "KR", "P", "key", "keep", "Q", "H", "KS", "Counter", "Y", "S", "E", "D", "W", "Ka", "J", "F", "V", "R", "C", "T", "KK", "U", "KA", "M", "N", "KI", "k", "OK", "O", "VK"], "a": ["am", "AA", "ga", "ab", "ad", "ma", "oa", "ao", "ai", "ea", "ac", "na", "ba", "da", "ca", "area", "aa", "c", "y", "aj", "pa", "u", "va", "ua", "af", "BA", "fa", "sa", "as", "p", "ia", "au", "mA", "i", "beta", "art", "an", "ae", "alpha", "la"], "b": ["f", "pb", "br", "sb", "ab", "db", "length", "number", "n", "l", "ba", "v", "fb", "end", "c", "aa", "d", "y", "abc", "next", "rb", "e", "lb", "j", "u", "pa", "bb", "o", "s", "p", "x", "cb", "nb", "z", "bd", "k", "i", "be", "eb", "r"], "counter": ["f", "class", "ner", "processor", "keeper", "instance", "consumer", "match", "clock", "count", "number", "index", "inner", "session", "integer", "key", "keep", "bc", "ver", "step", "Counter", "timer", "message", "book", "race", "loop", "inter", "ter", "loader", "master", "bar", "result", "page", "c", "num", "entry", "vector", "per", "pointer", "currency", "password", "inc", "repeat", "buffer", "batch", "callback", "info", "url", "fork", "stop", "current", "iter", "offset", "enter", "x", "row", "walker", "k", "outer", "function", "cur", "trace", "lr", "feature", "cookie", "controller", "parent", "continue", "machine", "reference"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = Integer.parseInt(scanner.next());\\n        Integer minValue = Integer.parseInt(scanner.next());\\n        Integer maxDiff = -1000000001;\\n        for (int i = 1; i < n; i++) {\\n            int value = Integer.parseInt(scanner.next());\\n            maxDiff = Math.max(maxDiff, value - minValue);\\n            minValue = Math.min(minValue, value);\\n        }\\n        System.out.println(maxDiff);\\n    }\\n}", "target": "208", "substitutes": {"scanner": ["scanker", "scner", "canNER", "parsener", "caner", "Scanator", "linner", "parseker", "Scanter", "parseator", "scanNER", "linator", "scNER", "Scanner", "Scaner", "Scanker", "planner", "scanger", " scaner", "haner", "hanner", "scizer", "caninner", "Scanper", "canter", "scanter", "planinner", "Scaninner", "scanper", "parseper", "linker", " scanter", "canker", "scanizer", "scinner", "scaninner", "hanker", "scaner", " scanger", "scanator", "planNER", "canizer", "linper", "canner", "Scanger", "canger", "planizer", "haninner"], "n": ["f", "h", "count", "number", "m", "l", "inn", "g", "v", "t", "c", "d", "num", "y", "sn", "u", "e", "o", "j", "s", "dn", "p", "b", "x", "ns", "nb", "w", "N", "z", "k", "size", "fn", "q", "span"], "minValue": ["maxValues", "partVal", "lowervalue", "minVal", "MinRange", "minDiff", " minRange", "MinValue", "MinDiff", "maxvalue", " minVal", " minValues", "maxValue", "minValues", "minRange", "lowerVal", "maxVal", " minDiff", "partvalue", "partValues", "maxRange", "Minvalue", "minvalue", "MinValues", "partValue", " minvalue", "MinVal", "lowerValue"], "maxDiff": ["maxdiff", "patchDelta", "intDiff", "minDelta", "intDifferent", "axValue", "minDiff", "intDelta", "maxDifferent", "MaxDiff", "mindiff", "axDiff", " maxDifferent", "intdiff", "Maxdiff", "patchDifferent", "maxValue", "patchDiff", "patchdiff", " maxdiff", "axDelta", " maxValue", "axdiff", "MaxDifferent", "MaxDelta", " maxDelta", "MaxValue", "maxDelta"], "i": ["f", "li", "I", "di", "in", "ri", "ni", "id", "key", "m", "index", "inner", "ai", "gi", "io", "ji", "si", "ui", "mu", "phi", "v", "diff", "c", "zi", "pi", "u", "e", "j", "info", "ii", "p", "ti", "b", "oi", "hi", "slice", "ini", "z", "ci", "ip", "init", "xi", "chi", "multi", "bi"], "value": ["content", "val", "VALUE", "name", "shift", "data", "version", "range", "iv", "element", "expression", "length", "trial", "id", "gi", "number", "index", "m", "latest", "default", "inner", "unit", "change", "flow", "null", "message", "total", "v", "min", "diff", "end", "gradient", "d", "max", "next", "weight", "age", "counter", "info", "position", "auto", "current", "ion", "child", "start", "Value", "size", "mi", "variable", "feature", "volume", "parent", "scale"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n    public static void main(String[] args) {\\n        Scanner scn=new Scanner(System.in);\\n        String a = scn.next();\\n        String b = scn.next();\\n        String answer = \"No\";\\n        int num=Integer.parseInt(a+b);\\n        for(int i=1;i*i<=num;i++){\\n            if(num==i*i){\\n                answer = \"Yes\";\\n                break;\\n            }\\n        }\\n        System.out.println(answer);\\n    }\\n}\\n", "target": "83", "substitutes": {"scn": ["scner", "scns", " scN", "SCN", "SCl", "scN", "Scb", "SCner", "Scn", "SCn", " scner", "SCb", "ScN", "scr", "SCr", " scl", "scb", "scl", " scns", "Scl", " scb", "SCns", "Scner", "Scns", "Scr", " scr"], "a": ["f", "am", "ga", "A", "ab", "oa", "ai", "n", "ea", "l", "ac", "ba", "app", "da", "area", "ca", "c", "aa", "asa", "y", "va", "pa", "api", "aaa", "s", "audio", "sa", "p", "as", "au", "an", "ae", "alpha", "la"], "b": ["f", "gb", "bf", "pb", "sb", "ab", "length", "bas", "n", "l", "B", "ob", "ba", "fb", "v", "c", "bin", "d", "y", "rb", "u", "e", "lb", "bb", "s", "p", "nb", "cb", "ib", "bs", "bd", "abb", "beta", "bi", "eb"], "answer": ["f", "value", "cover", "side", "name", "comment", "string", "grade", "issue", "format", "prefix", "token", "expression", "search", "number", "code", "default", "object", "n", " answers", "message", "text", "address", "say", "order", " answered", "result", "support", "complete", "empty", "su", "query", "array", "next", "Answer", "output", "offer", "word", "question", "reply", "audio", "archive", "status", "error", "answered", "q", "response", "knowledge", "maybe", "about", "average", "evidence"], "num": ["f", "dim", "ul", "off", "no", "nt", "id", "count", "number", "index", "m", "unit", "n", "split", "total", "mu", "sum", "end", "con", "c", "bin", "d", "pos", "zero", "max", "inc", "u", "np", "loc", "p", "offset", "x", "nb", "Num", "len", "col", "uni", "nu", "multi", "um", "span"], "i": ["f", "li", "h", "I", "di", "ri", "ni", "id", "gi", "m", "index", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "v", "it", "t", "c", "d", "y", "uri", "zi", "u", "pi", "o", "j", "e", "info", "ii", "qi", "ti", "p", "x", "oi", "hi", "slice", "ini", "start", "z", "ci", "k", "ip", "iu", "xi", "init", "ix", "multi", "bi"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nclass Main{\\n    InputReader in;\\n    final long mod=1000000007;\\n    StringBuilder sb;\\n    public static void main(String[] args) throws java.lang.Exception{\\n        new Main().run();\\n    }\\n    void run() throws Exception {\\n        in=new InputReader(System.in);\\n        sb = new  StringBuilder();\\n        int t=1;\\n        while(t-->0)\\n            solve();\\n        //System.out.print(sb);\\n    } \\n    void solve() {\\n        int i,j;\\n        int n=i(), k=i();\\n        int a[]=new int[n];\\n        int dp[][]=new int[n][k+1];\\n        for(i=0;i<n;i++)\\n            a[i]=i();\\n        for(i=0;i<n;i++)\\n            dp[i][0]=Integer.MAX_VALUE;\\n        for(i=1;i<=k;i++)\\n            dp[1][i]=Math.abs(a[1]-a[0]);\\n        for(i=2;i<n;i++) {\\n            if(i<=k) {\\n                for(j=1;j<=i;j++)\\n                    dp[i][j]=Math.min(dp[i][j-1], dp[i-j][k] + Math.abs(a[i-j]-a[i]));\\n                for(j=i+1;j<=k;j++)\\n                    dp[i][j]=dp[i][j-1];\\n            }\\n            else {\\n                for(j=1;j<=k;j++)\\n                    dp[i][j]=Math.min(dp[i][j-1], dp[i-j][k] + Math.abs(a[i-j]-a[i]));\\n            }\\n        }\\n        System.out.println(dp[n-1][k]);\\n    }\\n    long power(long x, long y, long p) {  \\n        long res = 1;       \\n        x = x % p;  \\n        if (x == 0) return 0;   \\n        while (y > 0) {\\n            if((y & 1)==1) \\n                res = (res * x) % p;  \\n            y = y >> 1;  \\n            x = (x * x) % p;  \\n        } \\n        return res%p; \\n    } \\n    int gcd(int a, int b) {\\n        return (b==0)?a:gcd(b,a%b);\\n    }\\n    String s(){return in.next();}\\n    int i(){return in.nextInt();}\\n    long l(){return in.nextLong();}\\n    class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n        public int read() {\\n            if (numChars == -1)\\n                throw new UnknownError();\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new UnknownError();\\n                }\\n                if (numChars <= 0)\\n                    return -1;\\n            }\\n            return buf[curChar++];\\n        }\\n        public int peek() {\\n            if (numChars == -1)\\n                return -1;\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    return -1;\\n                }\\n                if (numChars <= 0)\\n                    return -1;\\n            }\\n            return buf[curChar];\\n        }\\n        public void skip(int x) {\\n            while (x-->0)\\n                read();\\n        }\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n        public long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n        public String nextString() {\\n            return next();\\n        }\\n        public String next() {\\n            int c = read();\\n            while (isSpaceChar(c))\\n                c = read();\\n            StringBuffer res = new StringBuffer();\\n            do {\\n                res.appendCodePoint(c);\\n                c = read();\\n            } while (!isSpaceChar(c));\\n \\n            return res.toString();\\n        }\\n        public String nextLine() {\\n            StringBuffer buf = new StringBuffer();\\n            int c = read();\\n            while (c != '\\n' && c != -1) {\\n                if (c != '\\r')\\n                    buf.appendCodePoint(c);\\n                c = read();\\n            }\\n            return buf.toString();\\n        }\\n        public double nextDouble() {\\n            int c = read();\\n            while (isSpaceChar(c))\\n                c = read();\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            double res = 0;\\n            while (!isSpaceChar(c) && c != '.') {\\n                if (c == 'e' || c == 'E')\\n                    return res * Math.pow(10, nextInt());\\n                if (c < '0' || c > '9')\\n                    throw new InputMismatchException();\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            }\\n            if (c == '.') {\\n                c = read();\\n                double m = 1;\\n                while (!isSpaceChar(c)) {\\n                    if (c == 'e' || c == 'E')\\n                        return res * Math.pow(10, nextInt());\\n                    if (c < '0' || c > '9')\\n                        throw new InputMismatchException();\\n                    m /= 10;\\n                    res += (c - '0') * m;\\n                    c = read();\\n                }\\n            }\\n            return res * sgn;\\n        }\\n        public boolean hasNext() {\\n            int value;\\n            while (isSpaceChar(value = peek()) && value != -1)\\n                read();\\n            return value != -1;\\n        }\\n        private boolean isSpaceChar(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n    }\\n}", "target": "241", "substitutes": {"in": ["f", "data", "is", "input", "out", "ssl", "log", "err", "cli", "din", "pin", "binary", "inner", "config", "bc", "io", "pc", "n", "l", "ac", "IN", "inn", "gc", "loader", "sql", "c", "bin", "cl", "reader", "resource", "inc", "source", "re", "buffer", "ex", "str", "url", "user", "s", "as", "x", "rin", "include", "ini", "login", "win", "line", "ins", "i", "init", "In", "lib", "a", "r"], "mod": ["time", "tr", "lex", "comp", "ow", "Mod", "MOD", "m", "step", "reg", "gc", "loop", "wait", "port", " mods", "ms", "cm", "add", " module", "mods", "mode", "set", "perm", "lock", "lib", "module", "scale", "od"], "sb": ["gb", "bm", "usb", "bf", "pb", " SB", "BB", "buff", "db", "bt", "obb", "bc", "orb", "si", "SF", "zb", " eb", "bp", "bj", "mb", "xb", "rb", "SB", "BM", "lb", "bb", "sa", "b", " kb", "nb", "sf", "ib", "bps", "bs", "sm", "abb", "Bs", "fb", "bg", "sth", "rob"], "t": ["time", "f", " T", "unt", "off", "out", "dt", "task", "trial", "m", "window", "n", "ant", "l", "total", "tp", "v", "g", "diff", "c", "tt", "d", "y", "e", "o", "j", "pt", "p", "tl", "T", "set", "temp", "ta", "test", "i", "tc", "title", "tf", "a", "tool"]}}
{"code": "import java.util.*;\\n \\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    String[] str = new String[N];\\n    Set<String> set = new HashSet<>();\\n    for (int i = 0; i < N; i++) {\\n      str[i] = sc.next();\\n      set.add(str[i]);\\n    }\\n    for (int i = 1; i < N; i++) {\\n      if (str[i].charAt(0) != str[i - 1].charAt(str[i - 1].length() - 1)) {\\n        System.out.println(\"No\");\\n        return;\\n      }\\n    }\\n    if(set.size() == N){\\n      System.out.println(\"Yes\");\\n    }else{\\n      System.out.println(\"No\");\\n    }\\n  }\\n}\\n", "target": "70", "substitutes": {"sc": ["ner", "osc", "ch", " Sc", "nc", "st", "out", "sche", "sb", "esc", "bc", "cc", "asc", "pc", "si", "ss", "server", "scope", "anc", "cus", "SC", "se", "c", "scan", "cs", "sw", "cl", "uc", "Sc", "system", "sq", "sci", "cr", "rc", "sr", "enc", "ci", "sp", " SC", "sch", "sh", "ec", "isc", "cur", "sem", "screen", "lc"], "N": ["NE", "K", "Len", "I", "L", "Z", "Size", "NI", "X", " n", "Ni", "P", "Q", "NS", "SN", "H", "n", "NC", "S", "Y", "B", "E", "D", "NL", "NO", "MN", "W", "J", "F", "V", "No", "NB", "R", "NN", "C", "T", "Num", "U", "M", "NA", "Ne", "NR", "Part", "Ns", "NT", "O"], "str": ["tr", "ner", "div", "br", "name", "ch", "path", "string", "list", "data", "input", "stri", "st", "out", "prefix", "err", "id", "code", "fr", "dr", "arr", "text", "ss", "usr", "oct", "style", "result", "form", "er", "entry", "spec", "txt", "word", "url", "iter", "STR", "strip", "letter", "pass", "ring", "enc", "sr", "start", "char", "sl", "sp", "part", "test", "strings", "dict", "Str", "r"], "set": ["store", "map", "parse", "list", "sort", "base", "is", "are", "out", "sche", "no", "group", "id", "keep", "key", "index", "ut", "not", "n", "null", "SET", "setting", "order", "end", "se", "type", "push", "use", "ge", "add", "cache", "pack", "et", "and", "en", "sync", "hash", "start", "clear", "size", "sh", "init", "get", "check", "dict", "seen", "clean", "sign"], "i": ["f", "eni", "li", "I", "di", "in", "ri", "ni", "cli", "id", "gi", "key", "index", "m", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "diff", "c", "ie", "y", "uri", "u", "pi", "e", "j", "o", "info", "ii", "api", "qi", "iii", "p", "hi", "b", "oi", "x", "ti", "slice", "ini", "start", "yi", "ci", "mi", "ip", "iu", "xi", "isi", "init", "chi", "ix", "bi", "lc", "r"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String[] initial = sc.nextLine().split(\"\");\\n    long K = sc.nextLong();\\n    long index = 1;\\n    String answer = \"1\";\\n    for (String num: initial) {\\n      if (num.equals(\"1\") && index < K) {\\n        index++; \\n      } else {\\n        answer = num;\\n        break;\\n      }\\n    }  \\n    System.out.println(answer);\\n  }\\n}", "target": "38", "substitutes": {"sc": ["ner", "osc", "ch", " Sc", "nc", "sche", "sb", "core", "cv", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "sec", "server", "scope", "anc", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "ctx", "str", "Sc", "sci", "cr", "src", "sync", "rc", "enc", "sp", " SC", "ct", "sch", "sh", "parser", "ec", "cur", "lc"], "initial": ["primary", "example", "regular", "starting", "existing", "normal", "expression", "column", "exclusive", "unknown", "shell", "account", "iform", "special", "opened", "custom", "provided", "original", "area", "first", "empty", "author", "security", "xml", "ital", "current", "initialized", "serial", "own", "actual", "approximately", "missing", "response", "filename", "Initial", "header", "specified", "other", "init"], "K": ["G", "level", "I", "L", "Z", "SK", "context", "X", "length", " k", "P", "key", "Q", "NK", "KS", "block", "B", "S", "E", "D", "network", "zero", "inc", "fork", "W", "unk", "F", "V", "C", "KI", "M", "N", "Max", "k", " N", "O", "ID"], "index": ["f", "value", "level", "shape", "name", "miss", "string", "Index", "data", "pattern", "input", "prefix", "in", "element", "condition", "context", "length", "find", "id", "key", "number", "search", "inner", "unit", "type", "result", "scan", "update", "pos", "fix", "inc", "weight", "word", "position", "point", "loc", "axis", "offset", "x", "ind", "letter", "ion", "slice", "ini", "part", "k", "i", "ix", "nn", "parent"], "answer": ["username", "value", "val", "example", "name", "term", "string", "issue", "token", "prefix", "element", "expression", "search", "number", "object", "n", "score", "text", " answers", "message", "address", "result", "sen", "update", "su", "query", "array", "entry", "next", "Answer", "output", "word", "analysis", "reply", "question", "archive", "offset", "answered", "response", "knowledge", "results", "average", "evidence"], "num": ["f", "obj", "valid", "div", "name", "string", "input", "prefix", "no", "match", "id", "number", "hex", "unit", "n", "text", "null", "na", "sum", "nam", "result", "su", "pos", "ident", "sn", "inc", "digit", "word", "str", "info", "numbered", "loc", "offset", "b", "letter", "nb", "Num", "coord", "mn", "i", "uni", "nu", "init", "node", "from", "nn", "fn", "um", "uu"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int k = Integer.parseInt(sc.next());\\n        Boolean[] s = new Boolean[n];\\n        Arrays.fill(s, false);\\n        for (int i = 0; i < k; i++) {\\n            int d = Integer.parseInt(sc.next());\\n            for (int j = 0; j < d; j++) {\\n                int a = Integer.parseInt(sc.next()) - 1;\\n                s[a] = true;\\n            }\\n        }\\n        int c = 0;\\n        for (int i = 0; i < n; i++) {\\n            if (!s[i]) {\\n                c++;\\n            }\\n        }\\n        System.out.println(c);\\n    }\\n}", "target": "81", "substitutes": {"sc": ["class", "parse", "ner", "ch", "osc", "cont", "auc", " Sc", "nc", "sb", "sche", "cle", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "scope", "anc", "cus", "SC", "scan", "cs", "se", "sw", "uc", "cl", "reader", "Sc", "system", "dc", "sci", "cr", "src", "sf", "rc", "cer", "soc", "scl", "sp", " SC", "sch", "sh", "parser", "ec", "tc", "squ", "coll", "ser", "lc", "r"], "n": ["f", "nd", "h", "nc", "net", "in", "no", "nt", "m", "number", "l", "v", "t", "num", "y", "sn", "u", "e", "o", "p", "b", "x", "ns", "nl", "nb", "w", "N", "z", "nr", "size", "nn", "r"], "k": ["f", "h", "ner", "K", "ik", "m", "l", "v", "ok", "y", "max", "u", "e", "o", "p", "b", "x", "w", "N", "ak", "sk", "z", "ks", "ki", "dk", "q"], "s": ["f", "ts", "is", "abs", "sb", "ssl", "obs", "comments", "states", "lines", "gs", "params", "south", "parts", "groups", "si", "l", "S", "ss", "types", "v", "cs", "sites", "y", "ls", "es", "ids", "stores", "u", "o", "js", "e", "services", "xs", "p", "b", "stats", "sets", "ns", "blocks", "sync", "ps", "tests", "ws", "ans", "os", "ins", "strings", "ses", "outs", "objects", "ips", "fs"], "i": ["f", "eni", "li", "fi", "ch", "I", "is", "di", "in", "ri", "ni", "ik", "gi", "id", "ai", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "it", "ie", "y", "zi", "u", "e", "pi", "o", "ii", "qi", "p", "b", "x", "oi", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "ix", "chi", "bi"], "d": ["cd", "nd", "fd", "sd", "di", "dt", "ad", "id", "m", "l", "td", "da", "pd", "t", "D", "dx", "dh", "u", "e", "ld", "dy", "ii", "dn", "dc", "p", "b", "x", "ind", "dd", "z", "ds"], "j": ["f", "uj", "li", "jl", "jj", "jo", "oj", "jp", "jen", "di", "key", "m", "index", "ji", "dj", "l", "jc", "v", "g", "it", "ja", "ie", "end", "ah", "bj", "y", "aj", "ax", "u", "J", "js", "ii", "qi", "p", "b", "ind", "je", "z", "ij", "bi", "q"], "a": ["f", "am", "ga", "A", "oa", "ab", "ai", "ea", "ac", "na", "ba", "da", "ca", "ja", "aa", "area", "y", "aj", "va", "u", "pa", "api", "aaa", "fa", "sa", "p", "b", "x", "ak", "z", "qa", "an", "ae", "alpha", "la"], "c": ["f", "cd", "h", "ch", "cf", "nc", "count", "m", "cy", "code", "cc", "pc", "l", "ac", "g", "v", "ca", "cs", "y", "ce", "cm", "u", "e", "o", "cn", "dc", "p", "b", "C", "cr", "cu", "col", "z", "ci", "ct", "size", "ec", "cur", "lc"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n    static int[] A,L,R;\\n    static int N,Q;\\n    static String str;\\n    static int ans;\\n    public static void main(String args[]){\\n      Scanner sc = new Scanner(System.in);\\n      N = sc.nextInt();\\n      Q = sc.nextInt();\\n      str = sc.next();\\n      A = new int[N];\\n      R = new int[Q];\\n      L = new int[Q];\\n      for(int i=0;i<Q;i++){\\n        L[i]=sc.nextInt();\\n        R[i]=sc.nextInt();\\n      }\\n      A[0]=0;\\n      if(str.charAt(0)=='A' && str.charAt(1)=='C'){\\n        A[1]=1;\\n      }\\n      else{\\n        A[1]=0;\\n      }\\n      for(int i=2;i<N;i++){\\n        if(str.charAt(i-1)=='A' && str.charAt(i)=='C'){\\n          A[i]=A[i-1]+1;\\n        }\\n        else{\\n          A[i]=A[i-1];\\n        }\\n      }\\n      for(int i=0;i<Q;i++){\\n        ans = A[R[i]-1]-A[L[i]-1];\\n        System.out.println(ans);\\n      }\\n    }\\n\\n}", "target": "52", "substitutes": {"A": ["Args", "Java", "TA", "B", "Y", "MA", "U", "Alpha", "First", "NA", "LA", "O", "a", "RA", "App", "AS", "X", "AD", "P", "AN", "D", "Area", "F", "V", "At", "All", "AC", "AM", "Auth", "Array", "Na", "There", "Az", "I", "This", "API", "AL", "HA", "Any", "ASC", "As", "Default", "AP", "Ca", "AU", "An", "The", "AR", "Info", "SA", "AA", "PA", "H", "AST", "S", "E", "None", "W", "Act", "Ma", "CA", "AF", "C", "T", "Ar", "Address", "Am", "mA"], "L": ["O", "TL", "G", "EL", "Len", "I", "Cl", "XL", "DL", "FL", "X", "P", "l", "B", "S", "Lu", "E", "D", "Li", "LM", "NL", "Line", "W", "LR", "SL", "LB", "F", "RL", "CL", "V", "LI", "LP", "C", "T", "LL", "U", "PL", "M", "El", "IL", "Sl", "LA", "OL", "LU"], "R": ["RE", "G", "Ra", "I", "UR", "RC", "RR", "X", "RA", "Rs", "P", "DR", "RO", "B", "Y", "S", "RS", "Range", "D", "E", "RP", "W", "J", "RL", "V", "Run", "RW", "C", "T", "U", "M", "RG", "SR", "NR", "RN", "AR", "Rh", "O", "r", "RM"], "N": ["NE", "G", "Qu", "K", "Len", "I", "Z", "Size", "X", " n", "Ni", "P", "NS", "H", "n", "NC", "S", "Y", "B", "E", "D", "NL", "We", "W", "J", "F", "V", "No", "Nat", "NN", "C", "T", "U", "Num", "M", "Max", "NA", "Ne", "RN", "Ns", "NT", "O"], "Q": ["QB", "G", "NE", "Qu", "K", "Length", "I", "Z", "IQ", "X", "P", "H", "n", "IV", "S", "Y", "SH", "B", "E", "D", "MQ", "W", "Flow", "QL", "J", "F", "Ch", "CL", "V", "IX", "C", "T", "U", "IP", "QU", "M", "Query", "O", "q", "ID"], "str": ["f", "sta", "tr", "ner", "div", "ch", "name", "br", "path", "string", "list", "exp", "input", "stri", "st", "in", "err", "id", "inner", "fr", "bc", "pr", "arr", "exec", "text", "dr", "ss", "g", "ST", "style", "c", "er", "ar", "spec", "ext", "txt", "next", "wr", "gr", "u", "url", "s", "iter", "p", "STR", "strip", "pass", "w", "sr", "enc", "char", "sl", "z", "sp", "part", "line", "strings", "prev", "func", "lc", "Str", "parse", "r"], "ans": ["Args", "ases", "ANS", " An", "Ann", " scans", "cons", "rans", "ats", "ann", "aned", "anon", " an", "ani", " ants", "anas", "man", "annot", "AN", "na", "anc", "ran", "aning", "can", "lan", "plan", "urs", "ions", "nas", "aux", "aus", "asts", "anners", "s", "ns", "An", "Scan", "atan", "ants", "san", "cas", " ang", "ags", "NA", "les", "ins", "ras", " Ans", "an", "outs", "ars", "nn", "span", "ana", "ons"], "sc": ["ner", "ch", "osc", "cont", "mc", " Sc", "nc", "st", "sche", "sb", "cle", "cli", "core", "cv", "search", "cc", "bc", "esc", "asc", "pc", "ck", "ss", "sec", "anc", "scope", "cus", "SC", "c", "scan", "cs", "uc", "se", "cl", "sw", "ctx", "com", "spec", "cor", "Sc", "loc", "system", "sq", "dc", "sci", "cr", "sync", "rc", "cer", "enc", "soc", "sp", "ci", " SC", "sch", "sh", "ec", "tc", "squ", "lc"], "i": ["f", "eni", "li", "fi", "name", "I", "mini", "data", "is", "di", "anti", "ri", "ni", "cli", "gi", "id", "err", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "mu", "phi", "v", "min", "it", "c", "ie", "d", "y", "zi", "uri", "u", "e", "o", "j", "pi", "api", "ii", "info", "qi", "ti", "hi", "b", "oi", "x", "p", "slice", "abi", "ini", "start", "yi", "z", "ci", "mi", "iu", "ip", "xi", "init", "chi", "multi", "ix", "bi", "lc", "ki", "a", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tString S = sc.next();\\n\t\t\\n\t\tchar[] ch = new char[S.length()];\\n\t\tString ans = \"\";\\n\t\tfor(int i=0; i<ch.length; i++) {\\n\t\t\tch[i] = 'x';\\n\t\t\tans += ch[i];\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}", "target": "122", "substitutes": {"sc": ["ner", "osc", " Sc", "nc", "search", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "scope", "g", "ca", "SC", "se", "c", "scan", "cs", "sw", "cl", "spec", "acc", "str", "Sc", "system", "sub", "sci", "cr", "src", "sf", "sync", "rc", "enc", "sl", "sp", " SC", "sh", "ec", "desc"], "S": ["SA", "G", "L", "Si", "St", "A", "SK", "SO", "P", "SN", "NS", "SAM", "ss", "SH", "SF", "RS", "SC", "ST", "SER", "SL", "Sc", "F", "V", "s", "IS", "R", "T", "C", "SS", "U", "SE", "Sing", "M", "CS", "SU", "N", "SP", "GS", "SI"], "ch": ["channel", "cho", "ph", "unch", "anch", "bh", "chan", "length", "arch", "code", "ich", "ech", "l", "CH", "inch", "ach", "ches", "cs", "c", "se", "cat", "Ch", "che", "s", "tch", "p", "cha", "enc", "sk", "char", "qu", "cht", "col", "sch", "cp", "sh", "cur", "zh", "chi", "cher"], "ans": ["anks", "ANS", " scans", " cs", "cons", " chars", "ats", "ann", "AS", "chan", "aned", "anon", "amps", "AN", "ss", "na", "anc", "ches", "cs", "ents", "scan", "ads", "can", "lan", "ls", "es", "ions", "nas", "ens", "aus", "s", "x", "ns", "Scan", "atan", "cas", "ants", "san", "sk", " spans", "eps", "acs", "os", "ins", "ings", "ks", "strings", "ana", "ras", "an", "ars", "cases", "ds", "a", "ons"], "i": ["f", "li", "fi", "h", "I", "di", "in", "ri", "id", "gi", "index", "ai", "n", "si", "l", "ui", "mu", "phi", "v", "t", "end", "c", "it", "d", "y", "uri", "u", "pi", "o", "j", "e", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "slice", "abi", "ini", "z", "ci", "part", "ip", "xi", "init", "chi", "multi", "ix", "bi", "a"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int P = sc.nextInt();\\n    int Q = sc.nextInt();\\n    int R = sc.nextInt();\\n    int result = 201;\\n    if (P+Q < result) {\\n      result = P+Q;\\n    }\\n    if (Q+R < result) {\\n      result = Q+R;\\n    }\\n    if (P+R < result) {\\n      result = P+R;\\n    }\\n    System.out.println(result);\\n  }\\n}", "target": "89", "substitutes": {"sc": ["class", "ner", "ch", "osc", "cont", " Sc", "nc", "sb", "sche", "cv", "cc", "esc", "bc", "com", "asc", "pc", "l", "exec", "ss", "sec", "scope", "app", "SC", "se", "c", "scan", "cl", "uc", "sw", "cs", "ctx", "acc", "Sc", "sq", "sci", "cr", "ocr", "sf", "sync", "rc", "cer", "enc", "src", "soc", "sl", "sp", " SC", "sch", "sh", "ec", "tc", "cur", "desc", "sem", "ser", "lc", " scr"], "P": ["G", "PIN", "K", "I", "PR", "L", "PH", "PK", "PF", "A", "CP", "PA", "X", "API", "Py", "H", "Pl", "PT", "Pat", "S", "Y", "TP", "PO", "Pro", "PU", "E", "AP", "Point", "JP", "F", "PI", "Power", "p", "NP", "T", "C", "PL", "U", "N", "IP", "M", "WP", "PG", "Per", "PS", "PP", "PE", "O", "PC"], "Q": ["G", "Qu", "K", "I", "UR", "L", "Z", "A", "IQ", "JR", "X", "H", "S", "Y", "B", "SH", "E", "D", "MQ", "W", "JP", "J", "F", "CL", "V", "IX", "C", "T", "U", "IP", "N", "M", "QU", "PG", "Query", "Ph", "PE", "O", "q"], "R": ["ER", "RE", "G", "Ra", "UR", "PR", "L", "RC", "RR", "JR", "IR", "X", "RA", "Rs", "DR", "H", "RO", "S", "Y", "B", "RH", "RS", "E", "D", "RT", "GR", "RP", "W", "F", "RL", "V", "HR", "RW", "T", "CR", "U", "N", "M", " r", "SR", "NR", "RIP", "RN", "AR", "BR", "Rh", "Re", "r", "RM"], "result": ["math", "value", "valid", "comment", "compl", "data", "grade", "done", "range", "match", "length", "err", "count", "number", "cup", "id", "folder", "ret", "report", "default", "product", "search", "runner", "score", "message", "step", "total", "order", "diff", "master", "success", "doc", "winner", "resource", "goal", "event", "counter", "info", "user", "card", "current", "Result", "status", "date", "error", "pass", "rc", "res", "var", "response", "results", "filter", "root", "work", "test", "function", "feature", "func", "parent", "r"]}}
{"code": "import java.util.*;import java.io.*;import java.math.*;\\n\\npublic class Main\\n{\\n\\n    public static void process()throws IOException\\n    {\\n        int n=ni(),arr[]=new int[n+1];\\n        for(int i=1;i<=n;i++)\\n            arr[i]=ni();\\n\\n        int mx1=0,mx2=0;\\n\\n        for(int i=1;i<=n;i++){\\n            if(arr[i]>=mx1){\\n                mx2=mx1;\\n                mx1=arr[i];\\n            }\\n            else if(arr[i]>mx2)\\n                mx2=arr[i];\\n        }\\n\\n        for(int i=1;i<=n;i++)\\n            pn((arr[i]==mx1)?mx2:mx1);\\n    }\\n\\n\\n    static FastReader sc;\\n    static PrintWriter out;\\n    public static void main(String[]args)throws IOException\\n    {\\n        out = new PrintWriter(System.out);\\n        sc=new FastReader();\\n\\n        long s = System.currentTimeMillis();\\n        int t=1;\\n        //t=ni();\\n        while(t-->0)\\n            process();\\n\\n        out.flush();\\n        System.err.println(System.currentTimeMillis()-s+\"ms\");\\n        System.out.close();  \\n    }\\n    \\n    \\n    static void pn(Object o){out.println(o);}\\n    static void p(Object o){out.print(o);}\\n    static void pni(Object o){out.println(o);System.out.flush();}\\n    static int ni()throws IOException{return Integer.parseInt(sc.next());}\\n    static long nl()throws IOException{return Long.parseLong(sc.next());}\\n    static double nd()throws IOException{return Double.parseDouble(sc.next());}\\n    static String nln()throws IOException{return sc.nextLine();}\\n    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}\\n    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}\\n    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}\\n    static boolean multipleTC=false;\\n    static long mod=(long)1e9+7l;\\n\\n    static<T> void r_sort(T arr[],int n){\\n        Random r = new Random(); \\n        for (int i = n-1; i > 0; i--){ \\n            int j = r.nextInt(i+1); \\n                  \\n            T temp = arr[i]; \\n            arr[i] = arr[j]; \\n            arr[j] = temp; \\n        } \\n        Arrays.sort(arr); \\n    }\\n    \\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    static class FastReader \\n    { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() { \\n            br = new BufferedReader(new\\n                     InputStreamReader(System.in)); \\n        } \\n  \\n        String next(){ \\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        String nextLine() { \\n            String str = \"\"; \\n            try{ \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    } \\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n}", "target": "142", "substitutes": {"n": ["f", "nan", "h", "ne", "name", "nc", "net", "in", "no", "nt", "ni", "id", "count", "m", "l", "v", "c", "num", "d", "max", "network", "y", "sn", "u", "e", "o", "j", "p", "b", "x", "all", "ns", "nb", "en", "w", "N", "len", "z", "nr", "k", "init", "nu", "nn", "fn", "r"], "arr": ["map", "obj", "parse", "list", "br", "arg", "orig", "Array", "adv", "data", "ann", "ab", "err", "arch", "fr", "par", "dr", "order", "app", "attr", "dat", "aa", "ray", "att", "air", "ar", "ap", "array", "prev", "war", "gr", "cache", "str", "img", "av", "x", "Ar", "var", "enc", "au", "rr", "arc", "iq", "arm", "test", "ras", "arin", "coll", "adr", "ir", "ars", "train", "el", "a", "r"], "i": ["eni", "f", "li", "fi", "h", "name", "I", "base", "is", "di", "in", "ik", "ri", "ni", "gi", "id", "cli", "index", "ami", "ai", "key", "io", "inner", "si", "ori", "ui", "mu", "phi", "v", "it", "c", "ie", "result", "y", "uri", "source", "u", "pi", "o", "j", "e", "info", "ii", "ei", "qi", "api", "p", "ti", "b", "x", "oi", "hi", "ini", "start", "z", "ci", "mi", "iu", "ip", "xi", "init", "isi", "ix", "multi", "bi", "my", "a"], "mx1": ["vm2", "vm0", "MX1", "MX0", "avier0", "avier2", "mxone", "x0", "x01", "MX4", "mn3", "mn2", "mx4", "x2", "avier1", "ml0", "mem2", "vmone", "x1", "MX3", "xone", "vm3", "mem01", "x3", "mn1", "mx0", "MX2", "mem3", "mx3", "MX01", "avierone", "ml2", "vm1", "ml1", "vm4", "mlone", "MXone", "mnone", "x4", "mem1", "mx01"], "mx2": ["mus1", "vm2", "mus3", "mac2", "vm0", "MX1", "mass4", "MX4", "x0", "MX0", "mxtwo", "mm0", "macTwo", "wx2", "mx4", "mm2", "x2", "mm3", "x1", "MX3", "mass1", "vm3", "x3", "mus2", "wx1", "mac1", "mx0", "MX2", "mm1", "mactwo", "mx3", "vm1", "xTwo", "massTwo", "wxTwo", "mass2", "mus0", "mxTwo", "MXtwo", "x4", "wxtwo", "MXTwo"], "sc": ["osc", "cf", "ch", "mc", "RC", "nc", "ctr", "core", "cc", "bc", "esc", "asc", "pc", "scope", "ca", "SC", "c", "cs", "sw", "uc", "fe", "reader", "cm", "gr", "str", "Sc", "sci", "cr", "src", "CR", "sync", "rc", "sr", "sys", "go", "ci", "sp", "writer", "sh", "ec", "sem", "screen", "r"], "out": ["obj", "client", "ner", "name", "path", "string", "input", "in", "log", "err", "io", "report", "exec", "IN", "scope", "self", "print", "Output", "result", "page", "c", "write", "doc", "cl", "OUT", "bin", "query", "world", "output", "buffer", "ex", "o", "str", "user", "cache", "at", "p", "x", "cr", "error", "file", "Out", "w", "again", "line", "copy", "writer", "outs", "In", "r"], "s": ["ts", "times", "obs", "lines", "gs", "seconds", "ops", "ows", "rows", "days", "ls", "ets", "es", "ens", "dates", "qs", "als", "xs", "sets", "ns", "ps", "os", "ins", "ings", "ments", "ends", "outs", "ips"], "t": ["time", "ts", " T", "dt", "task", "nt", "tp", "it", "c", "type", "tt", "e", "ment", "o", "p", "tl", "ot", "T", "start", "tip", "set", "z", "ct", "ent", "ta", "test"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n\\n    int n = sc.nextInt();\\n    int halfN = n / 2;\\n\\n    List<Integer> list = new ArrayList<>();\\n    for (int i = 0; i < n; i++) {\\n      list.add(sc.nextInt());\\n    }\\n\\n    Collections.sort(list);\\n\\n    int result = list.get(halfN) - list.get(halfN - 1);\\n\\n    System.out.println(result);\\n  }\\n}\\n", "target": "119", "substitutes": {"sc": ["osc", "ner", "mc", " Sc", "nc", "sb", "sche", "cv", "cc", "esc", "bc", "config", "asc", "pc", "ss", "scope", "anc", "ca", "SC", "c", "scan", "cs", "se", "cl", "uc", "sw", "cus", "cor", "Sc", "system", "sq", "sa", "sci", "cr", "src", "rc", "cer", "enc", "ci", "sp", " SC", "ct", "sch", "sh", "ec", "cur", "ser", "lc"], "n": ["f", "nan", "ne", "nc", "in", "nt", "ni", "count", "m", "number", "l", "g", "t", "c", "d", "num", "network", "sn", "u", "o", "j", "s", "p", "b", "x", "ns", "nl", "nb", "en", "w", "sync", "N", "all", "len", "z", "k", "size", "conn", "nn", "fn", "net"], "halfN": ["perL", " halfL", "halfL", "halfn", "fullN", "fulln", "halfC", " halfn", "lessn", "HalfN", "fullC", "lessC", "lessN", "HalfL", "Halfn", "perC", " halfC", "HalfC", "perN"], "list": ["map", "li", "listed", "cont", "sort", "tree", "ul", "base", "out", "pl", "group", "bl", "keep", "key", "collection", "index", "log", "low", "code", "l", "ist", "null", "total", "queue", "order", "left", "last", "diff", "cl", "chain", "per", "array", "batch", "counter", "cache", "load", "cli", "full", "iter", "lp", "dict", "p", "stack", "all", "pool", "set", "LIST", "table", "test", "get", "coll", "lc", "parent", "sequence"], "i": ["f", "li", "h", "I", "di", "ri", "ni", "id", "gi", "m", "index", "inner", "ai", "io", "ji", "si", "ui", "mu", "phi", "v", "d", "uli", "uri", "pi", "u", "e", "j", "o", "info", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "abi", "ini", "z", "ci", "mi", "ip", "xi", "init", "chi", "multi", "bi"], "result": ["mult", "ner", "div", "round", "grade", "range", "dist", "err", "match", "length", "core", "search", "code", "default", "ver", "score", "total", "order", "df", "diff", "success", "page", "entry", "acc", "counter", "info", "pack", "card", "Result", "direction", "rc", "res", "results", "root", "test", "feature", "cmp", "desc", "comp", "rank", "distance", "r"]}}
{"code": "import java.io.File;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\nimport java.util.TreeMap;\\nimport java.util.*;\\n\\nclass FastScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n\\n    private boolean hasNextByte() {\\n        if (ptr < buflen) {\\n            return true;\\n        } else {\\n            ptr = 0;\\n            try {\\n                buflen = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (buflen <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private int readByte() {\\n        if (hasNextByte())\\n            return buffer[ptr++];\\n        else\\n            return -1;\\n    }\\n\\n    private static boolean isPrintableChar(int c) {\\n        return 33 <= c && c <= 126;\\n    }\\n\\n    public boolean hasNext() {\\n        while (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n            ptr++;\\n        return hasNextByte();\\n    }\\n\\n    public String next() {\\n        if (!hasNext())\\n            throw new NoSuchElementException();\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while (isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n\\n    public long nextLong() {\\n        if (!hasNext())\\n            throw new NoSuchElementException();\\n        long n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while (true) {\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            } else if (b == -1 || !isPrintableChar(b)) {\\n                return minus ? -n : n;\\n            } else {\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n\\n    public int nextInt() {\\n        long nl = nextLong();\\n        if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n            throw new NumberFormatException();\\n        return (int) nl;\\n    }\\n\\n    public double nextDouble() {\\n        return Double.parseDouble(next());\\n    }\\n}\\n\\npublic class Main {\\n    static int[] w = new int[100010];\\n    static int[] v = new int[100010];\\n    static int[][] dp = new int[110][100010];\\n    static int k;\\n\\n    static int chmin(int a, int b) {\\n        if (a > b) {\\n            a = b;\\n            return a;\\n        }\\n        return a;\\n    }\\n\\n    static int chmax(int a, int b) {\\n        if (a < b) {\\n            a = b;\\n            return a;\\n        }\\n        return a;\\n    }\\n\\n    public static void main(String[] args) {\\n        FastScanner fs = new FastScanner();\\n        long n = fs.nextLong();\\n        long min = Long.MAX_VALUE;\\n        for (long i = 1; i <= Math.sqrt(n); i++) {\\n            if (n % i == 0) {\\n                long a = i;\\n                long b = n / a;\\n                long dis1 = Math.abs(a - 1) + Math.abs(b - 1);\\n                if (dis1 < min)\\n                    min = dis1;\\n            }\\n        }\\n        System.out.println(min);\\n    }\\n}\\n", "target": "157", "substitutes": {"in": ["f", "on", "h", "fd", "path", "data", "is", "input", "out", "ssl", "err", "din", "image", "socket", "m", "binary", "ai", "io", "readable", "l", "ac", "IN", "library", "inn", "con", "it", "bin", "reader", "isin", "resource", "inc", "read", "source", "ex", "re", "this", "url", "s", "as", "p", "rin", "ini", "login", "win", "or", "line", "part", "ins", "us", "connection", "init", "inet", "In", "lock", "r"], "buffer": ["Buffer", "value", "border", "uffer", "shape", "base", "data", "quote", "padding", "buff", "rub", "length", "wave", "binary", "seed", "image", "code", "document", "window", "message", "block", "queue", "address", "server", "bar", "result", "buf", "page", "bin", "layer", "reader", "array", "resource", "transfer", "batch", "source", "cache", "url", "position", "bb", "iter", "flush", "offset", "stack", "slice", "file", "table", "header", "pad", "memory", "fb", "sequence", "reference"], "ptr": ["lf", "count", "code", "dr", "pend", "arr", "patch", "t", "attr", "ctx", "buf", "ext", "ft", "pull", "rb", "depth", "offset", "ffff", " pointer", "size", "tc", "const", "tr", "br", "shift", "buff", "ctr", "address", "ff", "fp", "cr", "sp", "ci", "cur", "trace", "cmp", "cf", "rt", "ref", "pl", "proc", "tp", "inter", "xt", "pos", "dest", "prot", "p", "tmp", "slice", "rot", "sh", "lr", "sth", "fd", "inst", "length", "fr", "pointers", "fe", "pointer", "butt", "Ptr", "req", "pt", "np", "loc", "src", "rc", "tip", "len", "addr", "pad", "adr", "xp"], "buflen": ["buslun", "buflun", "suflun", "bufrn", "buvelens", "fuslen", "bufun", "lufrun", " bufon", "suFln", "bufens", "bufren", "buclength", "bufrun", "bufen", "fusllen", " bufening", " bufens", "buflend", "bublen", "lufrn", "buflatten", "buslength", "bufatten", "buFlatten", "fuslun", "suFlend", "buflength", "bufn", "luflen", "fuflength", "bublens", " buflon", "fuflun", "fufllen", "bucllen", "suflend", "buFllen", "buFln", "bufening", "buFlun", "buvelon", "bufend", "fuflen", "suflen", "suFlun", "buflens", "buvelen", "luflatten", "sufln", "buslen", "lufln", "buclen", " bufen", "bufllen", "bufln", "lufren", "bublening", "suFlen", "bufratten", "buFlength", "buvelening", "buclun", "bufon", "buflening", "buflon", "luflun", " buflens", "fuslength", "buveln", "busllen", "lufratten", "buFlen", "buvelend", "buvelun", " buflening", "bublon", "buFlend"], "c": ["f", "cd", "xc", "h", "ch", "fc", "cf", "nc", "count", "code", "m", "cc", "cy", "pc", "l", "ac", "ca", "cs", "uc", "d", "abc", "ce", "cm", "e", "s", "dc", "p", "x", "C", "cr", "enc", "sc", "cu", "col", "z", "ci", "ct", "cp", "ec", "lc"], "sb": ["gb", "bm", "bf", "pb", " SB", "BB", "bh", "db", "ab", "sv", "bl", "bt", "obb", "bc", "sg", "si", "wb", "zb", "ob", " eb", "bp", "bj", "mb", "rb", "xb", "SB", "lb", "bb", "s", "sq", "sa", "nb", "cb", "kb", "sf", "ib", "sp", "bs", "bsp", "eb", "lab", "fb", "bg", "sth"], "b": ["f", "db", "m", "bc", "l", "block", "B", "wb", "ob", "t", "rb", "url", "bb", "bot", "eb", "be", "bis", "gb", "bf", "h", "br", "string", "buff", "ab", "loop", "bar", "mb", "u", "j", "ib", "z", "abb", "bi", "bg", " base", "binary", "text", "g", "emb", "bp", "y", "next", "xb", "e", "o", "lb", "s", "p", "bs", "big", "obj", "pb", "base", "abs", "bl", "bt", "ba", "bound", "bin", "d", "x", "nb", "cb", "body", "fb", "r"], "n": ["nan", "f", "h", "ne", "net", "nt", "ni", "count", "m", "number", "non", "l", "na", "g", "t", "num", "d", "y", "sn", "u", "e", "o", "j", "cn", "s", "p", "un", "x", "ns", "nb", "N", "len", "z", "nr", "mn", "nu", "an", "nn", "fn", "r"], "minus": [" plus", "Neg", "none", "mini", "plus", " needs", "series", " isn", "without", "one", "shift", "off", "times", "no", "pose", " gets", " none", "zer", "little", "non", " neg", " trailing", "na", " digits", "nos", " signs", " negative", " negatives", " extra", "neg", "zero", "small", "pos", " delta", "so", "bits", "empty", "digit", "prime", "signed", " outs", "negative", "strip", "down", "missing", " doesn", "sin", " below", " zero", "extra", " uses", "credit", "beta", "outs", " ignores", "two", "sign", "second"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void debug(String str) {\\n        boolean debug = false;\\n        if (debug != false) {\\n            return;\\n        }\\n        System.out.println(str);\\n    }\\n\\n    public static void main(String[] args) {\\n\\n        int N;\\n        long A[];\\n        long B[];\\n\\n        try (Scanner sc = new Scanner(System.in)) {\\n            N = sc.nextInt();\\n            A = new long[N+1];\\n            B = new long[N];\\n            for(int i =0;i < N+1;i++){\\n                A[i] = sc.nextLong();\\n            }\\n            for(int i =0;i < N;i++){\\n                B[i] = sc.nextLong();\\n            }\\n        }\\n        long result = 0;\\n        for(int i =0;i < N;i++){\\n            if(B[i] > A[i]){\\n                result += A[i];\\n                long temp = A[i];\\n                A[i]-=temp;\\n                B[i] -=temp;\\n            }else{\\n                result += B[i];\\n                long temp = B[i];\\n                B[i]-=temp;\\n                A[i] -=temp;\\n            }\\n            if(B[i] > A[i+1]){\\n                result += A[i+1];\\n                long temp = A[i+1];\\n                A[i+1]-=temp;\\n                B[i] -=temp;\\n            }else{\\n                result += B[i];\\n                long temp = B[i];\\n                B[i]-=temp;\\n                A[i+1] -=temp;\\n            }\\n        }\\n        System.out.println(result);\\n\\n\\n\\n\\n        return;\\n    }\\n}\\n", "target": "159", "substitutes": {"str": ["f", "class", "obj", "tr", "parse", "br", "name", "string", "path", "data", "input", "stri", "st", "out", "err", "fr", "pr", " Str", "arr", "exec", "text", "self", "print", "doc", "output", "wr", "this", "std", "STR", "cr", "sp", "strings", "run", "Str", "r"], "debug": [" debugger", "parse", "development", "comment", "hide", "Debug", "data", "console", "format", "help", " Debug", "db", "log", "live", "github", "config", "quiet", "print", "diff", "export", "style", "doc", "bug", "write", "d", "progress", "output", "add", "dev", "load", "info", "die", "show", "depth", "std", "cache", "develop", "date", "flag", "error", "dump", "line", "test", "init", "DEBUG", "trace", "get", "desc", "enable", "func", "run"], "N": ["O", "NE", "K", "Length", "Len", "I", "L", "Z", "Size", "Name", "NI", "Ni", " n", "Node", "X", "P", "Count", "Q", "NS", "SN", "H", "n", "NC", "Y", "IN", "S", "IO", "D", "Network", "network", "MN", "J", "F", "No", "V", "NG", "NM", "NB", "Nat", "R", "NN", "C", "T", "Num", "M", "NA", "Ne", "Part", "Ns", "ND", "NT", "Na"], "A": ["Args", "AW", "L", "Java", "TA", "Y", "Ab", "MA", "U", "Alpha", "NA", "LA", "Base", "Bu", "O", "a", "App", "Up", "AS", "X", "AD", "P", "AN", "And", "IA", "Australia", "Area", "F", "At", "AC", "All", "AM", "Auth", "Array", "Ad", "Az", "I", "This", "API", "New", "Any", "AB", "As", "Order", "AP", "BA", "R", "Ca", "b", "AU", "An", "The", "AR", "Both", "SA", "AA", "H", "AST", "S", "GA", "E", "W", "Ma", "CA", "T", "C", "Ar", "Am", "mA"], "B": ["L", "VB", "DB", "Y", "Block", "BE", "Ab", "PB", "Two", "MB", "BI", "EB", "BER", "J", "U", "WB", "Be", "Big", "M", "Part", "Base", "Bu", "O", "Other", "Message", "K", "But", "Bi", "BB", "File", "P", "Beta", "D", "Bal", "LB", "F", "BL", "V", "Far", "OB", "QB", "G", "I", "BD", "CB", "This", "API", "GB", "AB", "Order", "AP", "TB", "SB", "BA", "NB", "b", "R", "FB", "The", "RB", "BR", "Bs", "If", "Both", "Only", "BF", "Back", "H", "S", "BS", "UB", "E", "Sub", "Blue", "Bar", "Builder", "T", "C"], "i": ["f", "eni", "li", "fi", "I", "mini", "is", "di", "iv", "ri", "ni", "cli", "gi", "id", "ik", "ami", "m", "ai", "io", "ji", "n", "si", "ius", "ori", "ui", "mu", "phi", "v", "it", "adi", "ogi", "ie", "y", "zi", "uri", "hei", "u", "e", "o", "j", "pi", "api", "ii", "ei", "qi", "info", "hi", "ti", "b", "oi", "x", "p", "sup", "slice", "abi", "ini", "start", "yi", "ci", "part", "mi", "iu", "xi", "ip", "init", "ix", "multi", "ki", "bi", "my", "a"], "result": ["valid", "comment", "compl", "term", "data", "length", "match", "err", "folder", "number", "cup", "code", "search", "ret", "report", "default", "product", "ver", "runner", "score", "message", "total", "sum", "diff", "duration", "type", "page", "success", "style", "use", "output", "buffer", "width", "warning", "cache", "info", "pack", "card", "die", "current", "Result", "color", "date", "status", "error", "res", "response", "results", "test", "const", "function", "cur", "cash", "memory", "flash"], "temp": ["value", "level", "key", "stable", "timeout", "c", "extra", "atom", "fake", "size", "tc", "const", "init", "content", "sat", "format", "active", "unit", "option", "diff", "style", "source", "cache", "pack", "wrapper", "emp", "current", "status", "mag", "test", "warm", "Temperature", "valid", "term", "template", "input", "out", "keep", "index", "type", "empty", "buffer", "iter", "tmp", "flat", "get", "available", "parent", "clean", "tem", "fit", "div", "wrap", "modified", "path", "data", "length", "config", "used", "exc", "sum", "wait", "safe", "zero", "output", "frac", "pt", "Temp", "kept", "font", "magic", "partial"]}}
{"code": "import java.util.*;\\nimport java.util.Scanner;\\n\\nclass Main {\\n\\n    public static void main(String args[]) {\\n        Scanner sc = new Scanner(System.in);\\n        final int N = sc.nextInt();\\n        int[] H = new int[N];\\n\\n        for(int i=0;i<N;i++){\\n            H[i]=sc.nextInt()-1;\\n        }\\n\\n        for(int i=0;i<N-1;i++){\\n            if(H[i]>H[i+1]){\\n                H[i+1]++;\\n                if(H[i]>H[i+1]){\\n                    System.out.println(\"No\");\\n                    return;\\n                }\\n            }\\n        }\\n        System.out.println(\"Yes\");\\n    }\\n}", "target": "74", "substitutes": {"sc": ["ner", "ch", "osc", "cont", " Sc", "nc", "out", "sche", "sb", "search", "cv", "esc", "cc", "bc", "asc", "pc", "ss", "sec", "scope", "cus", "SC", "se", "c", "scan", "cs", "sw", "com", "uc", "cl", "Sc", "system", "sq", "sa", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "enc", "ci", "sp", " SC", "sch", "sh", "cur", "ser", "lc", " scr"], "N": ["G", "K", "Len", "I", "L", "Z", "Size", "A", "X", "Count", "Ni", "P", "Q", "NS", "n", "NC", "S", "Y", "B", "Na", "E", "D", "NL", "W", "F", "V", "NM", "NB", "NN", "C", "T", "Num", "U", "M", "NA", "Ne", "Part", "Ns", "ND", "NT", "O", "KN"], "H": ["Code", "G", "h", "K", "I", "L", "Z", "A", "GH", "X", "HQ", "P", "HT", "Q", "HD", "HK", "HA", "CH", "B", "Y", "SH", "S", "RH", "E", "D", "OH", "NH", "HM", "Head", "W", "J", "Host", "Ch", "F", "V", "HH", "HR", "HI", "CL", "EH", "R", "rh", "MH", "C", "T", "U", "M", "Hist", "HP", "HTTP", "HB", "Ha", "He", "History", "HS", "Hi", "O"], "i": ["f", "li", "fi", "h", "I", "mini", "di", "in", "cli", "ni", "ri", "id", "gi", "key", "index", "ai", "io", "ji", "n", "si", "l", "ori", "ui", "phi", "v", "it", "diff", "c", "ie", "uri", "u", "e", "o", "pi", "j", "info", "ii", "api", "qi", "p", "hi", "b", "x", "oi", "slice", "abi", "ini", "start", "z", "ci", "mi", "ip", "iu", "xi", "init", "ix", "chi", "bi", "a", "r"]}}
{"code": "import java.util.*; import java.io.*; import java.math.*;\\npublic class Main{\\n\t//Don't have to see. start------------------------------------------\\n\tstatic class InputIterator{\\n\t\tArrayList<String> inputLine = new ArrayList<String>(1024);\\n\t\tint index = 0; int max; String read;\\n\t\tInputIterator(){\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\ttry{\\n\t\t\t\twhile((read = br.readLine()) != null){\\n\t\t\t\t\tinputLine.add(read);\\n\t\t\t\t}\\n\t\t\t}catch(IOException e){}\\n\t\t\tmax = inputLine.size();\\n\t\t}\\n\t\tboolean hasNext(){return (index < max);}\\n\t\tString next(){\\n\t\t\tif(hasNext()){\\n\t\t\t\treturn inputLine.get(index++);\\n\t\t\t}else{\\n\t\t\t\tthrow new IndexOutOfBoundsException(\"There is no more input\");\\n\t\t\t}\\n\t\t}\\n\t}\\n\tstatic HashMap<Integer, String> CONVSTR = new HashMap<Integer, String>();\\n\tstatic InputIterator ii = new InputIterator();//This class cannot be used in reactive problem.\\n\tstatic PrintWriter out = new PrintWriter(System.out);\\n\tstatic void flush(){out.flush();}\\n\tstatic void myout(Object t){out.println(t);}\\n\tstatic void myerr(Object t){System.err.print(\"debug:\");System.err.println(t);}\\n\tstatic String next(){return ii.next();}\\n\tstatic boolean hasNext(){return ii.hasNext();}\\n\tstatic int nextInt(){return Integer.parseInt(next());}\\n\tstatic long nextLong(){return Long.parseLong(next());}\\n\tstatic double nextDouble(){return Double.parseDouble(next());}\\n\tstatic ArrayList<String> nextStrArray(){return myconv(next(), 8);}\\n\tstatic ArrayList<String> nextCharArray(){return myconv(next(), 0);}\\n\tstatic ArrayList<Integer> nextIntArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Integer> ret = new ArrayList<Integer>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Integer.parseInt(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic ArrayList<Long> nextLongArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Long> ret = new ArrayList<Long>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Long.parseLong(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic String myconv(Object list, int no){//only join\\n\t\tString joinString = CONVSTR.get(no);\\n\t\tif(list instanceof String[]){\\n\t\t\treturn String.join(joinString, (String[])list);\\n\t\t}else if(list instanceof ArrayList){\\n\t\t\treturn String.join(joinString, (ArrayList)list);\\n\t\t}else{\\n\t\t\tthrow new ClassCastException(\"Don't join\");\\n\t\t}\\n\t}\\n\tstatic ArrayList<String> myconv(String str, int no){//only split\\n\t\tString splitString = CONVSTR.get(no);\\n\t\treturn new ArrayList<String>(Arrays.asList(str.split(splitString)));\\n\t}\\n\tpublic static void main(String[] args){\\n\t\tCONVSTR.put(8, \" \"); CONVSTR.put(9, \"\\n\"); CONVSTR.put(0, \"\");\\n\t\tsolve();flush();\\n\t}\\n\t//Don't have to see. end------------------------------------------\\n\tstatic void solve(){//Here is the main function\\n\tArrayList<Integer> one = nextIntArray();\\n\tint N = one.get(0);\\n\tint M = one.get(1);\\n\tint[] dp = new int[N + 1];\\n    Arrays.fill(dp, -1);\\n\tdp[0] = 1;\\n\tfor(int i = 0; i < M; i++){\\n\t\tdp[nextInt()] = 0;\\n\t}\\n\tint mod = 1000000007;\\n\tfor(int i = 1; i <= N; i++){\\n\t\tif(dp[i] == -1){\\n\t\t\tif(i == 1){\\n\t\t\t\tdp[i] = 1;\\n\t\t\t}else{\\n\t\t\t\tdp[i] = dp[i - 2] + dp[i - 1];\\n\t\t\t\tdp[i] %= mod;\\n\t\t\t}\\n\t\t}\\n\t}\\n\tmyout(dp[N]);\\n\t}\\n\t//Method addition frame start\\n\\n\\n\\n\t//Method addition frame end\\n}\\n", "target": "174", "substitutes": {}}
{"code": "import java.util.*;\\nimport static java.lang.System.*;\\n\\nclass Main {\\n  public static final int MOD = 1000000007;\\n  public static final int INF = 1000000000;\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(in);\\n    Integer c[][] = new Integer[3][3];\\n    for(int i=0; i<3; i++){\\n      for(int j=0; j<3; j++){\\n        c[i][j] = sc.nextInt();\\n      }\\n    }\\n    int a,b;\\n    a = c[0][0] - c[0][1];\\n    b = c[0][1] - c[0][2];\\n    String ans = \"Yes\";\\n    for(int i=1; i<3; i++){\\n      if(a != c[i][0] - c[i][1] || b != c[i][1] - c[i][2]){\\n        ans = \"No\";\\n        break;\\n      }\\n    }\\n    for(int j=1; j<3; j++){\\n      if(c[0][0] - c[1][0] != c[0][j] - c[1][j] || c[1][0] - c[2][0] != c[1][j] - c[2][j]){\\n        ans = \"No\";\\n        break;\\n      }\\n    }\\n    out.println(ans);\\n          \\n  }\\n\\n  public static int gcd(int a, int b){\\n    if(b == 0) return a;\\n    return gcd(b, a%b);\\n  }\\n}", "target": "88", "substitutes": {"MOD": [" mod", " TIME", " M", "Mod", " D", " E", " MIN", " F", " CRC", " INST", " CL", "ARM", " JD", " GC", " LOG", " CP", " B", "mod", " P", " imp", "M", " X", " G", " Z", "MAX", " PI", " MAX", " U", " L"], "INF": ["INf", "Inf", "inF", "INI", "inEF", " INI", "INEF", "InEF", "InI", " INf", "inf", "inI", "InF", " INEF"], "sc": ["ner", "osc", "ch", " Sc", "nc", "out", "sche", "search", "iss", "esc", "bc", "asc", "pc", "si", "exec", "ss", "sec", "scope", "g", "anc", "sign", "SC", "scan", "cs", "uc", "cl", "sw", "screen", "Sc", "sub", "sci", "cr", "src", "sync", "rc", "soc", "ci", "sp", " SC", "sch", "sh", "desc", "lc", " scr"], "c": ["f", "center", "h", "cf", "ch", "cont", "fc", "mc", "co", "nc", "in", "core", "cy", "code", "m", "cc", "config", "pc", "n", "unc", "l", "ac", "anc", "g", "v", "t", "cs", "com", "it", "uc", "cl", "d", "chain", "y", "ce", "cm", "u", "e", "cache", "o", "s", "dc", "p", "x", "con", "chart", "C", "cr", "w", "rc", "central", "q", "enc", "ic", "cu", "col", "z", "ci", "k", "ct", "arc", "cp", "ec", "lc", "r"], "i": ["f", "eni", "li", "fi", "I", "di", "iv", "in", "ik", "ni", "ri", "gi", "id", "key", "cli", "ai", "io", "ji", "si", "l", "ori", "ui", "v", "it", "ie", "d", "y", "zi", "uri", "u", "e", "o", "pi", "api", "ii", "info", "qi", "hi", "p", "x", "oi", "ini", "start", "yi", "q", "z", "ci", "k", "mi", "iu", "xi", "ip", "ix", "ki", "bi", "my"], "j": ["f", "uj", "li", "obj", "h", "jl", "jj", "ch", "jo", "br", "ne", "jp", "di", "key", "em", "pr", "ji", "n", "si", "l", "ui", "jc", "v", "it", "ja", "end", "ie", "d", "bj", "y", "aj", "ny", "u", "e", "o", "J", "js", "ii", "dy", "qi", "adj", "p", "job", "x", "w", "z", "k", "ij", "ix", "jet", "bi", "el", "q", "r"], "a": ["f", "value", "h", "ama", "am", "ga", "A", "ab", "ad", "ma", "count", "m", "index", "ai", "n", "ea", "ac", "l", "na", "ba", "da", "ca", "area", "aa", "asa", "d", "y", "ar", "aj", "va", "u", "e", "o", "pa", "aaa", "bb", "s", "at", "p", "sa", "x", "ia", "as", "fa", "au", "ya", "z", "wa", "qa", "art", "la", "an", "ae", "ada", "alpha"], "b": ["f", "bf", "pb", "h", "base", "A", "bh", "sb", "ab", "db", "ad", "bl", "length", "bur", "n", "l", "bel", "B", "null", "wb", "ob", "g", "v", "fb", "ba", "bp", "aa", "bar", "d", "y", "mb", "rb", "u", "e", "lb", "o", "bb", "s", "p", "x", "nb", "w", "ib", "z", "bs", "k", "beta", "abb", "be", "bi", "eb", "r"], "ans": ["ases", "grades", "anks", "ANS", "cons", "vals", "ats", "ann", "no", "aned", "includes", "anon", "reads", "anas", "ant", "amps", "AN", "na", "anc", "aos", "aces", "cs", "ents", "ads", "aning", "ran", "errors", "can", "lan", "plan", "ls", "ions", "nas", "aus", "asts", "s", "as", "ns", "atan", "san", "cas", "ants", "sk", "eps", "os", "ins", "ks", "ana", "ras", "an", "outs", "ars", "ams", "allows", "ds", "ons"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\\n\t\tint p = in.nextInt();\\n\t\tint q = in.nextInt();\\n\t\tint r = in.nextInt();\\n\\n\t\tint max = 0;\\n\t\tif ( p >= q && p >= r ) max = p;\\n\t\tif ( q >= p && q >= r ) max = q;\\n\t\tif ( r >= q && r >= p ) max = r;\\n\\n\t\tSystem.out.println(p + q + r - max);\\n\t\tin.close();\\n\t}\\n}", "target": "89", "substitutes": {"in": ["gen", "rec", "arg", "path", "between", "data", "is", "input", "out", "lin", "token", "ssl", "log", "err", "din", "pin", "m", "inner", "binary", "socket", "n", "nin", "l", "exec", "IN", "inn", "g", "con", "c", "doc", "bin", "reader", "kin", "query", "isin", "inc", "ax", "buffer", "serv", "source", "ex", "str", "url", "user", "inside", "s", "as", "x", "ln", "rin", "ini", "login", "win", "again", "ins", "conn", "i", "connection", "init", "parser", "In", "gin", "inf"], "p": ["f", "h", "P", "m", "pr", "pc", "n", "l", "pre", "tp", "v", "t", "bp", "c", "d", "y", "pos", "per", "ar", "req", "pa", "u", "pi", "o", "j", "e", "pt", "point", "s", "fp", "b", "x", "python", "w", "ps", "pe", "po", "pp", "z", "k", "cp", "i", "ip", "a"], "q": ["f", "h", "ch", "err", "id", "P", "m", "Q", "n", "l", "patch", "v", "t", "c", "d", "y", "query", "ar", "req", "u", "ry", "e", "j", "ur", "qs", "qi", "sq", "b", "x", "dq", "qq", "w", "qu", "z", "k", "quant", "qa", "iq", "i", "sh", "requ", "cp", "cur", "qt", "a"], "r": ["f", "h", "br", "rt", "range", "err", "m", "fr", "pr", "n", "dr", "l", "patch", "g", "v", "t", "c", "d", "er", "ar", "y", "per", "resource", "req", "re", "u", "ry", "rb", "j", "ur", "hr", "s", "R", "b", "x", "rh", "ru", "cr", "rar", "w", "rc", "sr", "or", "rr", "z", "nr", "rf", "k", "rd", "i", "rs", "lr", "right"], "max": ["rand", "parse", "rec", "orig", "wrap", "base", "range", "out", "no", "id", "limit", "count", "index", "random", "default", "step", "total", "patch", "est", "last", "min", "only", "rest", "conf", "c", "end", "can", "ax", "next", "always", "cycle", "press", "cache", "depth", "mod", "x", "row", "w", "res", "Max", "start", "MAX", "root", "part", "k", "size", "pad", "right", "rank", "parent", "scale", "force"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[]args) {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        try {\\n       String isSafe = \"\";\\n    \\n       int [] a = new int [2];\\n     \\n       \\n       String  lines = br.readLine();    \\n    \\n       String[] strs = lines.trim().split(\"\\\\s+\");\\n      \\n       for (int i = 0; i < strs.length; i++) {\\n       a[i] = Integer.parseInt(strs[i]);\\n       }\\n\\n       if(a[1]>=a[0]){\\n           isSafe = \"unsafe\";\\n       }\\n       else{\\n           isSafe = \"safe\";\\n       }\\n       System.out.println(isSafe);\\n    }catch (Exception e) {\\n    }\\n    \\n}}", "target": "177", "substitutes": {"br": ["tr", "ner", "abs", "bh", "ler", "ab", "ref", "bl", "err", "bro", "fr", "io", "arr", "dr", "mr", "buf", "er", "reader", "wr", "rb", "gr", "hr", "str", "handle", "bb", "HR", "b", "cr", "yr", "cb", "Reader", "ber", "sr", "nr", "stream", "BR", "nor", "bridge", "browser", "Br", "r"], "isSafe": ["sCritical", "idSafety", "IsSafe", "isSmall", "IsSmall", "isSecure", "idSecure", "lisSafe", "lisSecure", " isSafety", "idSafe", " isSecure", "assafe", "IsSecure", "asCritical", "issafe", "sSafe", " isCritical", " issafe", "lisSmall", "ssafe", "iSecure", "isCritical", "iSafe", "iSafety", "isSafety", " isSmall", "IsSafety", "asSafe"], "a": ["f", "sta", "ama", "am", "data", "ga", "A", "abs", "ab", "ma", "code", "index", "active", "n", "l", "na", "ba", "area", "ca", "aa", "c", "aj", "array", "pa", "va", "aux", "u", "e", "auto", "s", "sa", "as", "ia", "p", "b", "x", "ha", "au", "ata", "qa", "ana", "tta", "an", "ae", "alpha", "la", "ava", "r"], "lines": ["f", "content", "runs", "vals", "string", " Lines", "data", "works", "values", "headers", "in", "reads", "sections", "l", "text", "limits", "pages", "breaks", "rows", "lins", "words", "users", "ls", "Line", "str", "rules", "cells", "s", "p", "b", "items", "blocks", "shows", "ines", "locks", "sl", "loads", "bs", "line", "bytes", "ins", "elines", "strings", "ends", "objects", "files", "r"], "strs": ["crS", "Strings", "crls", "stri", "strlines", "crs", "crps", " strls", "strls", "Stri", "prings", " strlines", " stri", "Strls", "stings", " strings", " strrs", "StrS", "strps", "Strs", "sts", "Strlines", "prs", " strS", "strS", " strps", "strrs", "stlines", "strings", "pri", "Strps", "Strrs"], "i": ["f", "li", "h", "I", "base", "data", "di", "in", "ri", "length", "id", "key", "m", "index", "gi", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "it", "c", "type", "d", "uri", "u", "e", "o", "j", "pi", "api", "ii", "qi", "at", "p", "hi", "b", "x", "oi", "ti", "slice", "abi", "start", "z", "ci", "part", "k", "xi", "init", "ix", "multi", "bi", "r"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Arrays;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n      int N = scan.nextInt();\\n      int K = scan.nextInt();\\n      int[] pn = new int[N];\\n      int result = 0;\\n      \\n      for(int i=0; i<N; i++){\\n        pn[i] = scan.nextInt();\\n      }\\n      Arrays.sort(pn);\\n      for(int i=0; i<K; i++)\\n        result += pn[i];\\n      System.out.println(result);\\n    }\\n}\\n", "target": "41", "substitutes": {"scan": ["nan", "store", "gen", "parse", "stat", "ner", "skip", "ann", "out", "fan", "in", "pan", "chan", "search", "ignore", "ser", "n", "na", "server", "se", "cat", "er", "can", "reader", "network", "query", "use", "plan", "read", "serv", "sn", "spin", "connect", "system", "ln", "Scan", "nl", "san", "sync", "slice", "see", "sc", "ans", "conn", "an", "look", "nn", "run", "clean", "sign", "r", "span"], "N": ["NE", "CNN", "I", "L", "Z", "Size", "NI", "X", " n", "Ni", "P", "Q", "NS", "SN", "H", "n", "NC", "S", "Y", "B", "Na", "E", "D", "NL", "NO", "MN", "F", "V", "No", "NM", "NB", "R", "NN", "T", "C", "Num", "M", "NA", "Ne", "Ns", "NT", "O"], "K": ["O", "I", "L", "Z", "PK", "SK", "X", "KR", "P", "Q", "HK", "H", "KS", "NK", "n", "S", "Y", "E", "D", "J", "F", "V", "Power", "KK", "T", "KI", "U", "C", "M", "k", "KE", "IK", "Sk"], "pn": ["eni", "nan", "hn", "pb", "pins", "auc", "ain", "wp", "nc", "pan", "oa", "ni", "anon", "pin", "collection", "pr", "pc", "n", "inn", "na", "anc", "bn", "aa", "pres", "features", "rn", "sn", "pa", "pi", "nat", "paren", "np", "cn", "lp", "p", "fa", "sa", "atan", "en", "enn", "wan", "fen", "ans", "results", "PN", "conn", "cp", "pas", "an", "pak", "arin", "nn", "fn", "ppa"], "result": ["value", "valid", "list", "ner", "data", "grade", "prefix", "match", "length", "gi", "limit", "number", "core", "search", "code", "default", "ret", "integer", "product", "report", "score", "message", "total", "order", "success", "page", "duration", "winner", "currency", "array", "weight", "counter", "width", "info", "card", "np", "Result", "status", "nl", "pass", "response", "results", "root", "our", "work", "average", "test", "feature", "rank", "parent", "r"], "i": ["f", "eni", "li", "fi", "h", "I", "vi", "di", "in", "ri", "ni", "ik", "id", "gi", "m", "inner", "index", "ai", "io", "ji", "si", "ui", "mu", "phi", "v", "it", "attr", "c", "ie", "d", "uri", "zi", "u", "e", "pi", "j", "o", "info", "ii", "qi", "p", "ti", "b", "oi", "x", "hi", "slice", "abi", "ini", "z", "ci", "k", "mi", "iu", "ip", "xi", "init", "chi", "ix", "multi", "bi", "lc"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        final Scanner scanner = new Scanner(System.in);\\n\\n        final int w = scanner.nextInt();\\n        final int h = scanner.nextInt();\\n        final int x = scanner.nextInt();\\n        final int y = scanner.nextInt();\\n\\n        final double max = w / 2.0 * h;\\n        final int multi = x == w / 2.0 && y == h / 2.0 ? 1 : 0;\\n\\n        System.out.println(max + \" \" + multi);\\n    }\\n}", "target": "182", "substitutes": {"scanner": ["scanker", "parsener", "caner", "banker", "hanter", "parseker", "Scanter", "baninner", "kininner", "banizer", "Scanning", "Scanner", "Scaner", "Scanker", " scanker", " scaner", "hanner", "caninner", "canter", "aninner", "scanter", "Scaninner", "kinner", "hanning", "banner", " scanter", "canker", "scanizer", "anizer", "anner", "canning", "kinter", "anker", "scaninner", "scanning", "parsening", "hanker", "kinning", "scaner", "canner", "parseter", "Scanizer", "haninner"], "w": ["f", "time", "hw", "m", "wt", "n", "window", "l", "height", "aw", "g", "v", "t", "c", "sw", "d", "weight", "u", "W", "o", "e", "width", "p", "b", "fw", "wh", "win", "ws", "z", "wa", "k", "work", "i", "we", "a", "q", "r"], "h": ["f", "ch", "hs", "ph", "ih", "in", "oh", "m", "hh", "H", "n", "l", "height", "g", "v", "t", "c", "d", "u", "e", "o", "j", "hi", "p", "b", "rh", "hm", "z", "hp", "k", "ht", "i", "q", "r"], "x": ["f", "on", "xx", "in", "X", "m", "index", "n", "l", "height", "v", "min", "t", "c", "d", "ax", "ex", "u", "e", "o", "p", "hi", "b", "rx", "z", "px", "wa", "k", "i", "ix", "q"], "y": ["f", "oy", "ey", "cy", "m", "sy", "n", "l", "Y", "height", "py", "v", "min", "t", "c", "d", "vy", "ay", "u", "j", "dy", "ty", "p", "hi", "b", "yi", "ya", "ky", "z", "k", "i", "yy", "q"], "max": ["mult", "div", "orig", "wrap", "plus", "co", "range", "in", "no", "wx", "count", "default", "step", "total", "last", "min", "sum", "diff", "conf", "first", "num", "ax", "power", "show", "auto", "mod", "Max", "cu", "MAX", "size", "work", "comb", "init", "alpha", "scale"], "multi": ["li", "mult", "div", "mini", "single", "di", "global", "cli", "group", "poly", "micro", "mega", "zip", "total", "mu", "phi", "loop", "num", "mix", "repeat", "batch", "pi", "auto", "mm", "hi", "mode", "multiple", "ci", "partial", "mi", "Multi", "comb", "many", "i", "coll"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    int num = Integer.parseInt(in.nextLine());\\n    List<Integer> dif = new ArrayList<>();\\n    while(in.hasNext()){\\n      dif.add(Integer.parseInt(in.next()));\\n    }\\n    Collections.sort(dif);\\n    int ans = dif.get(num / 2) - dif.get(num / 2 - 1);\\n    System.out.println(ans);\\n  }\\n}\\n", "target": "119", "substitutes": {"in": ["f", "data", "is", "input", "lin", "out", "log", "err", "cli", "din", "id", "socket", "inner", "pin", "inas", "readable", "n", "nin", "exec", "IN", "inn", "con", "fin", "end", "scan", "it", "bin", "er", "reader", "kin", "isin", "inc", "serv", "source", "re", "info", "user", "s", "fa", "as", "b", "ln", "pass", "rin", "vin", "sin", "ini", "start", "login", "win", "again", "line", "ins", "conn", "i", "parser", "init", "connection", "In", "gin", "lib", "inf", "a", "r"], "num": ["mult", "name", "dim", "miss", "ul", "family", "off", "mon", "nom", "no", "id", "number", "index", "non", "unit", "n", "home", "sum", "min", "nam", "hom", "bin", "max", "pos", "su", "NUM", "un", "en", "nb", "Num", "len", "du", "col", "mom", "nr", "us", "i", "uni", "nu", "init", "gin", "nn", "um", "span"], "dif": ["idif", "odifer", "dify", "idify", "odIF", "indify", " def", " dIF", " dify", "dift", "adaf", "indif", "difer", "indef", "Dif", "andift", "andiff", "diff", "idift", "andaf", "idiff", "Diff", " dinc", "def", "dinc", "DIF", " diff", " dift", "adif", "indinc", "odif", "idef", "Dift", "idaf", "dIF", " daf", "odiff", "Daf", "daf", " difer", "andif", "adiff", "adIF", "idinc", "Difer"], "ans": ["nan", "ases", " changes", "ANS", " scans", "anch", "ain", "ats", "ann", "aned", "aid", "anas", "annot", "amps", "AN", "na", "anc", " signs", "aning", "lan", "anan", "nas", " stats", "ions", "ales", "aus", " fa", " sins", "as", "anges", "cas", "ants", "vers", " ang", "rors", " spans", "anus", " errors", "ks", "ins", "ras", "an", "outs", "ars", "ana", "acts"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n    static public void main(String[] args) throws Exception{\\n        //BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        //String[] buf = reader.readLine().split(\" \")\\n        Main main = new Main();\\n        main.solve();\\n    }\\n    void solve(){\\n        Scanner sc = new Scanner(System.in);\\n        char[] s = sc.next().toCharArray();\\n        char c = s[0];\\n        char a = (char)(c+1);\\n        System.out.println(a);\\n    }\\n}\\n\\n", "target": "150", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tstatic Scanner sc = new Scanner(System.in);\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tint n = sc.nextInt();\\n\t\tint ans = 1;\\n\\n\t\twhile (n >= ans) {\\n\t\t\tans *= 2;\\n\t\t}\\n\t\tSystem.out.print(ans / 2);\\n\\n\t}\\n}", "target": "225", "substitutes": {"sc": ["exp", " Sc", "nc", "sb", "cc", "bc", "config", "esc", "asc", "pc", "exec", "text", "scope", "anc", "loop", "SC", "se", "c", "scan", "sw", "cl", "uc", "sac", "acc", "Sc", "system", "sq", "sa", "sub", "sci", "cr", "cb", "sync", "rc", "enc", "or", "sl", "sp", " SC", "sh", "parser", "ec", "ars", "ctl", " scr"], "n": ["nan", "ne", "ann", "nc", "net", "in", "nt", "anon", "number", "l", "min", "c", "d", "num", "sn", "es", "o", "j", "cn", "s", "p", "b", "x", "un", "ns", "en", "N", "pn", "k", "Ns", "ins", "conn", "i", "an", "nn", "r"], "ans": ["nan", "ations", "ANS", "ne", " scans", "ats", "ann", " s", "no", "ni", "anon", "ons", "AN", " means", "annels", "na", "S", "anc", "ss", "acts", "cs", "ents", "scan", "rows", "nos", "lan", "ls", "sn", "es", "ions", "ids", "nas", "ens", "s", "offs", "as", "ns", "ln", "ants", "N", " na", "vers", " spans", "anes", "ins", "ks", "i", "Ns", "an", "ians", "outs", "ars", "nn", "ds", "a", "span"]}}
{"code": "import java.util.*;\\npublic class Main {\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int t = sc.nextInt();\\n    int c1;\\n    int t1;\\n    int cmin = 1024;\\n    for(int i=0; i<n; i++){\\n      c1 = sc.nextInt();\\n      t1 = sc.nextInt();\\n      if(t1 <= t){\\n        if(c1 < cmin)\\n          cmin = c1;\\n      }\\n    }\\n    if(cmin == 1024)\\n      System.out.println(\"TLE\");\\n    else\\n      System.out.println(cmin);\\n  }\\n}\\n", "target": "8", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "exp", "mc", "nc", "sche", "sb", "search", "cv", "cc", "bc", "esc", "asc", "pc", "ck", "ss", "server", "anc", "scope", "ca", "SC", "se", "c", "scan", "cs", "uc", "cl", "cus", "sw", "ctx", "cor", "Sc", "system", "sq", "sub", "sci", "cr", "src", "sync", "rc", "cer", "sr", "enc", "ci", " SC", "ct", "sh", "ec", "cur", "coll", "desc", "ser", "lc"], "n": ["f", "ne", "nc", "in", "no", "nt", "m", "l", "nin", "v", "min", "c", "d", "num", "network", "sn", "u", "j", "np", "s", "p", "b", "x", "ns", "nb", "en", "w", "N", "z", "k", "size", "conn", "nn", "nit", "net"], "t": ["f", "time", "h", "dt", "nt", "m", "l", "total", "tp", "v", "c", "type", "d", "y", "max", "u", "e", "o", "j", "pt", "tu", "at", "p", "b", "x", "T", "en", "w", "z", "k", "ta", "test", "a"], "c1": ["tone", "ca7", " cfirst", " c6", " c0", "scapp", "ca10", "c6", "n0", "capp", " cone", " c7", "C1", "c7", "n81", "c81", " capp", "tmin", "c0", "Cmin", "tfirst", "t7", "tapp", "Cfirst", "t0", "scone", "sconce", "ca1", "c10", "sc1", "n1", "n6", "cfirst", "tonce", "conce", " conce", "C0", " c81", "t6", "t10", " c10", "cone", "ca0", "t81"], "t1": ["tone", "ta0", " tp", "c11", "Tp", "p2", "ta1", " t0", "t11", "c0", "tp", "p91", "T1", "t0", "T0", "t91", "c2", "c91", " t11", " t2", "pone", "ta91", "p0", "t2", " tone", "cone", "T2", "p11", "cp", "p1"], "cmin": ["ccsmall", " clim", "cMin", "lcMin", "cmins", " c0", "ecmins", "CMin", " cMin", "ccstart", "cminimum", " climit", "Cminimum", "ecmin", "pcmins", "pcmin", "tmin", "c0", "Cmin", "ccmins", "scMIN", "ccMIN", "t0", "lcsmall", "tlimit", " cMIN", "cmain", "scMin", "cMIN", "clim", "Csmall", "scmins", "climit", " cstart", "ccmin", "cmax", "pcMin", "ecMin", "cstart", "sclimit", " cmins", "sclim", "lcmax", "sc0", "tlim", "Cmain", "lcmin", "ecmain", "Cmins", " cminimum", "csmall", "scmin", "scstart", "ccMin", "ccmax", "scmain", "pcminimum", "Cmax"], "i": ["f", "li", "I", "di", "ri", "ni", "gi", "id", "ai", "io", "si", "ui", "v", "it", "c", "ie", "y", "u", "pi", "o", "j", "e", "ii", "qi", "p", "ti", "hi", "x", "oi", "ini", "z", "ci", "mi", "ip", "iu", "init", "xi", "chi", "ix", "multi", "bi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int a = scan.nextInt();\\n        int b = scan.nextInt();\\n        int T = scan.nextInt();\\n        int result = b * (int) ((T + 0.5) / a);\\n        System.out.println(\"\" + result);\\n    }\\n\\n}\\n", "target": "4", "substitutes": {"scan": ["gen", "parse", "ner", "skip", "ann", "begin", "watch", "out", "fan", "in", "pan", "chan", "search", "pin", "ignore", "inner", "report", "ser", "n", "na", "app", "conv", "se", "cat", "can", "plan", "kin", "query", "read", "serv", "user", "connect", "iter", "row", "Scan", "all", "san", "sync", "slice", "see", "sc", "util", "conn", "an", "walk", "nn", "clean", "sign", "r", "span"], "a": ["f", "base", "am", "AA", "A", "ab", "ad", "ma", "ai", "active", "n", "ea", "ac", "ba", "da", "area", "ca", "c", "aa", "t", "aj", "va", "pa", "aaa", "auto", "fa", "sa", "as", "p", "offset", "qa", "ta", "i", "an", "ae", "now", "alpha", "la"], "b": ["f", "bf", "h", "base", "BB", "A", "sb", "ab", "bc", "n", "l", "B", "ba", "v", "g", "t", "area", "c", "aa", "ca", "d", "y", "rb", "e", "o", "j", "bb", "s", "p", "x", "bs", "k", "i", "abb", "beta", "fb", "r"], "T": ["f", "G", "Tab", "I", "L", "A", "out", "TA", "P", "Q", "TT", "H", "B", "S", "total", "t", "E", "D", "type", "TB", "W", "F", "V", "Result", "R", "C", "TS", "M", "N", "ta", "test", "Total", "TH", "O"], "result": ["math", "term", "ULT", "data", "grade", "match", "length", "expected", "count", "number", "ret", "default", "rap", "score", "total", " Result", "diff", "duration", "success", "page", "goal", "resource", "acc", "counter", "info", "section", "Result", "date", "res", "true", "response", "results", "function", "test", "ult", "feature", "parent"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args)throws IOException{\\n\t\tBufferedReader buf = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString s;\\n\t\tint i=0,x;\\n\\n\t\tdo{\\n\t\t\ts= buf.readLine();\\n\t\t\tx= Integer.parseInt(s);\\n\t\t\ti=i+1;\\n\t\tif(x!=0){\\n\t\t\tSystem.out.println(\"Case \"+i+\": \"+x);\\n\t\t}\\n\t\telse{}\\n\t\t}while(x!=0);\\n\t}\\n}", "target": "97", "substitutes": {"buf": ["Buffer", "pb", "br", "h", "fd", "buff", "out", "bh", "ab", "ref", "proc", "cv", "bc", "Buff", "wb", "raf", "home", "queue", "conv", "tab", "c", "ctx", "ff", "buffer", "rb", "aux", "af", "bb", "uf", "fp", "b", "bag", "src", "cb", "tmp", "w", "box", "utils", "abb", "fb", "r"], "s": ["f", "h", "side", "string", "is", "input", "sb", "m", "service", "si", "l", "ss", "S", "g", "v", "t", "c", "d", "su", "spec", "ls", "es", "u", "e", "o", "js", "xs", "p", "b", "ns", "pass", "sf", "ps", "ws", "sl", "os", "bytes", "ins", "strings", "ses", "rs", "fs", "ds", "r"], "i": ["f", "li", "I", "is", "di", "in", "ri", "cli", "id", "index", "ai", "io", "n", "si", "l", "ui", "phi", "v", "ie", "y", "zi", "pi", "u", "o", "j", "e", "ii", "qi", "p", "ti", "b", "hi", "slice", "ini", "start", "z", "ci", "ip", "xi", "iu", "ix", "multi", "bi"], "x": ["f", "xy", "xc", "cross", "lex", "h", "xe", "xx", "X", "wx", "id", "m", "index", "xf", "n", "l", "v", "t", "ww", "c", "xt", "tx", "sw", "d", "ctx", "y", "dx", "fx", "xes", "ax", "ex", "u", "e", "j", "xs", "p", "b", "w", "xxx", "pe", "rx", "z", "k", "xa", "xi", "ix", "xp", "q", "r", "rex"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.*;\\nimport java.util.*;\\nimport java.util.ArrayList;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.Collections;\\npublic class Main {\\n\tpublic static void main(final String[] args){\\n    \\n    Scanner sc = new Scanner(System.in);\\n    \\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    int c = sc.nextInt();\\n    int d = sc.nextInt();\\n    int e = sc.nextInt();\\n\\n    if(a == 0){\\n        System.out.println(1);\\n    }else if(b == 0){\\n        System.out.println(2);\\n    }else if(c == 0){\\n        System.out.println(3);\\n    }else if(d == 0){\\n        System.out.println(4);\\n    }else{\\n        System.out.println(5);\\n    }\\n\\n    \\n\\n\\n    \\n    \\n\\n\\n    \\n\\n\\n    \\n    \\n\\n\\n    \\n\t}\\n}", "target": "222", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", " Sc", "nc", "console", "sb", "sche", "cle", "cli", "sv", "core", "cv", "esc", "bc", "cc", "com", "asc", "pc", "ss", "scope", "ca", "SC", "se", "scan", "uc", "cs", "sw", "cus", "ctx", "screen", "cor", "this", "Sc", "system", "sub", "sci", "cr", "sync", "rc", "cer", "sr", "soc", "sp", "ci", " SC", "tc", "parser", "cur", "sem", "ser", "lc"], "a": ["f", "ama", "am", "A", "oa", "ad", "ab", "aka", "ao", "ai", "n", "ea", "ac", "ba", "da", "ca", "area", "aa", "asa", "y", "aj", "va", "af", "aaa", "fa", "sa", "as", "p", "ia", "x", "au", "ak", "mA", "i", "an", "ae", "ada", "alpha"], "b": ["f", "bf", "h", "sb", "bh", "ab", "db", "bas", "bc", "n", "l", "B", "ob", "ba", "v", "ca", "aa", "y", "rb", "o", "lb", "s", "p", "x", "nb", "cb", "ib", "bd", "bs", "k", "i", "be", "bi", "eb", "r"], "c": ["f", "cd", "h", "cf", "ad", "cy", "cc", "bc", "n", "l", "ac", "v", "ca", "y", "u", "o", "j", "cn", "dc", "p", "x", "C", "cb", "w", "rc", "cu", "z", "ci", "i", "ec", "lc", "r"], "d": ["f", "cd", "h", "fd", "di", "dt", "in", "ad", "id", "m", "n", "l", "da", "v", "dad", "df", "t", "D", "dx", "u", "o", "j", "dy", "s", "dc", "p", "x", "w", "du", "dd", "md", "z", "i", "ds", "r"], "e": ["f", "h", "ele", "ef", "ed", "err", "ee", "g", "E", "ie", "fe", "y", "ce", "es", "o", "j", "p", "w", "pe", "eed", "ec", "i", "be", "ae", "eb", "el", "q"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\\n\t\tint n,i,j,a,maxv,minv;\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tn=Integer.parseInt(sc.next());\\n\t\tint r[]=new int[n];\\n\t\tfor(i=0;i<n;i++){\\n\t\t\tr[i]=Integer.parseInt(sc.next());\\n\t\t}\\n\\n\t\tmaxv=r[1]-r[0];\\n\t\tminv=r[0];\\n\t\tfor(j=1;j<n;j++){\\n\t\t\tmaxv=Math.max(maxv, r[j]-minv);\\n\t\t\tminv=Math.min(minv, r[j]);\\n\t\t}\\n\\n\t\tSystem.out.println(maxv);\\n\\n\\n\t}\\n\\n}", "target": "208", "substitutes": {}}
{"code": "import java.util.Scanner; \\npublic class Main {\\n    public static void main(String[] args) {\\n       Scanner sc = new Scanner(System.in); \\n        int N = sc.nextInt();        \\n        String S = sc.next();  \\n\\n       int i ;\\n       int m = 0 ;\\n\\n       String[]  stringArray;        \\n       stringArray= new  String[N];\\n\\n       for(i = 1 ; i <= N ; i++) {\\n\\n             stringArray[i-1]  = S.substring(i-1, i);\\n      //    System.out.println(stringArray[i-1]);\\n       }\\n    \\n       for(i = 1 ; i < N ; i++) {\\n\\n             if  (stringArray[i-1].equals(stringArray[i] ) )  {\\n            \\n             } else  {\\n               m = m + 1;\\n             }\\n\\n       }\\n     if (N > 0 ) {  \\n          System.out.println(m+1);\\n           }\\n     }\\n\\n} \\n", "target": "218", "substitutes": {"sc": ["ner", "osc", "ch", " Sc", "nc", "st", "sb", "sche", "cv", "cc", "esc", "bc", "asc", "pc", "exec", "ss", "server", "anc", "g", "scope", "SC", "se", "c", "scan", "cs", "sw", "uc", "cl", "Sc", "system", "sq", "sub", "sci", "cr", "src", "sf", "rc", "cer", "sr", "enc", "sp", "ci", " SC", "sch", "sh", "sem", "ser", " scr"], "N": ["G", "K", "Len", "I", "L", "Z", "Size", "NI", "Ni", "X", " n", "Node", "P", "Q", "NS", "H", "n", "NC", "Y", "B", "E", "D", "Network", "NL", "J", "F", "V", "No", "R", "NB", "NN", "C", "T", "U", "M", "Ne", "Ns", "NT", "O"], "S": ["SA", "G", "I", "L", "Si", "SEC", "A", "SK", "Socket", "SO", "P", "SN", "NS", "SAM", "SH", "SF", "As", "SC", "Service", "SER", "SL", "F", "V", "s", "IS", "R", "T", "SS", "C", "Sing", "U", "M", "SE", "SU", "SR", "Sl", "SG", "SP", "SM", "SI"], "i": ["f", "eni", "li", "h", "I", "mini", "di", "in", "ri", "ni", "gi", "id", "index", "ai", "io", "n", "si", "l", "ori", "ui", "v", "c", "ie", "d", "y", "zi", "uri", "pi", "e", "u", "j", "info", "o", "ii", "qi", "s", "p", "ti", "b", "x", "hi", "oi", "slice", "w", "ini", "start", "z", "ci", "part", "k", "mi", "ip", "xi", "iu", "isi", "chi", "ix", "multi", "bi", "a", "r"], "m": ["f", "h", " M", " end", "l", "mu", "min", "v", "it", "c", "d", "num", " l", "e", "o", "j", "J", "p", "w", "M", " r", "z", "k", " p", "mi", " f", " j", " mi"], "stringArray": ["stringsTable", "sequenceArray", "stringTable", "strAr", " stringTable", "resourceList", " stringOrder", "arrayAr", "stringsOrder", "dataAr", "arrayObject", "strArray", "sequenceList", "StringList", "dataObject", "stringAr", "strarray", "strObject", "stringList", "stringsArray", "stringsList", "stringOrder", "dataArray", "arrayarray", "sequenceTable", "resourceArray", "stringarray", "arrayArray", "StringArray", "stringObject", "sequenceOrder", " stringList", "dataarray"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\twhile (true) {\\n\t\t\tString[] lines =  sc.nextLine().split(\"\");\\n\t\t\tint sum = 0;\\n\t\t\tfor(int i = 0;i < lines.length;i++) {\\n\t\t\t\tsum += Integer.parseInt(lines[i]);\\n\t\t\t}\\n\t\t\tif(sum == 0) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tSystem.out.println(sum);\\n\t\t}\\n\t}\\n}", "target": "144", "substitutes": {"sc": ["class", "ner", "osc", " Sc", "nc", "st", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "server", "scope", "SC", "se", "c", "scan", "sw", "cl", "cs", "uc", "spec", "acc", "this", "Sc", "sub", "sci", "cr", "src", "sf", "rc", "sl", "sp", "ci", " SC", "sch", "sh", "ec", "desc", " scr"], "lines": ["runs", "pins", "vals", " Lines", "data", "points", "values", "log", "parts", "lights", "groups", "split", "l", "limits", "pages", "breaks", "rows", "lins", "words", "ls", "rules", "cells", "qs", "xs", "s", "blocks", "items", "shows", "nl", "bands", "ines", "balls", "les", "results", "bs", "line", "elines", "bytes", "ks", "ins", "strings", "links", "objects", "ips", "ds"], "sum": ["parse", "val", "amount", "sim", "sort", "comment", "cal", "miss", "out", "in", "no", "match", "length", "count", "key", "index", "unit", "cost", "n", "si", "ame", "text", "total", "ss", "percent", "split", "ass", "min", "se", "result", "style", "num", "um", "max", "pos", "zero", "weight", "u", "pack", "offset", "fat", "start", "len", "line", "size", "mean", "part", "us", "spread", "average", "loss", "scale", "vol", "net", "Sum"], "i": ["f", "li", "fi", "h", "I", "di", "in", "ri", "id", "gi", "index", "ai", "io", "n", "si", "l", "ui", "phi", "v", "t", "c", "d", "uri", "u", "pi", "e", "j", "o", "ii", "qi", "bi", "p", "ti", "b", "x", "oi", "hi", "abi", "ini", "z", "ci", "k", "mi", "ip", "xi", "init", "ix", "multi", "volume", "q"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc =new Scanner(System.in);\\n        StringBuilder build = new StringBuilder();\\n        int z = sc.nextInt();\\n        int[] ary = new int[z];\\n        for(int i = 0 ; i < ary.length; i++){\\n            ary[i] = sc.nextInt();\\n        }\\n        int count = 0;\\n        for(int i = 0; i < ary.length; i++){\\n            int min = i;\\n            for(int j = i; j < ary.length; j++){\\n                min = ary[min] > ary[j] ? j : min;\\n            }\\n            if(ary[i] != ary[min]){\\n                int temp = ary[i];\\n                ary[i] = ary[min];\\n                ary[min] = temp;\\n                count++;\\n            }\\n        }\\n        for(int i = 0; i < ary.length; i++){\\n            build.append(ary[i]);\\n            build.append(i==ary.length-1 ? \"\\n\" : \" \");\\n        }\\n        build.append(count);\\n        System.out.println(build.toString());\\n    }\\n}", "target": "199", "substitutes": {"sc": ["osc", "ner", "ch", " Sc", "nc", "out", "sche", "sb", "cle", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "server", "scope", "anc", "cus", "SC", " rc", "c", "scan", "cs", "se", "sw", "cl", "Sc", "system", "sq", "sci", "cr", "src", "sf", "rc", "cer", "sk", "sp", " SC", "sch", "sh", "isc", "ec", "coll", "sem", "screen", "lc", " scr"], "build": ["store", "http", "uild", "make", "base", "out", "sb", "help", "log", "length", "replace", "throw", "core", "code", "report", "hold", "clean", "block", "g", "print", "bar", "result", "style", "push", "se", "update", "feed", "agg", "use", "draw", "output", "read", "add", "pull", "this", "builder", "show", "load", "bb", "full", "Build", "b", "row", "start", "util", "construct", "built", "work", "test", "create", "get", "walk", "body", "now", "lock", "run", "gg"], "z": ["f", "zone", "Z", "az", "length", "code", "gz", "tz", "n", "zip", "l", "nz", "t", "c", "ie", "d", "y", "zero", "cz", "zi", "zo", "cycle", "e", "ii", "iz", "depth", "p", "x", "ind", "slice", "ci", "k", "ze", "zh", "inf", "q", "zen"], "ary": ["ory", "primary", "aries", "prefix", "default", "arry", "total", "server", "py", "area", "arity", "arial", "sky", "ay", "ry", "ARY", "broad", "coord", "arc", "over", "multi", "now", "sequence", "shared", "arian", "one", "har", "di", "related", "tech", "ordered", "pre", "na", "address", "bar", "air", "ar", "system", "copy", "early", "two", "aria", "secondary", "ery", "minute", "cross", "ready", "ref", "ctor", "index", "note", "order", "inter", "ity", "type", "y", "array", "buffer", "square", "mm", "maybe", "pair", "memory", "bare", "list", "are", "dry", "si", "ari", "ray", "er", "tri", "pointer", "hello", "info", "auto", "error", "aro", "ir", "any", "coded", "reference"], "i": ["f", "eni", "li", "h", "I", "mini", "is", "di", "in", "ik", "ni", "ri", "id", "gi", "index", "m", "ai", "key", "io", "ji", "n", "si", "l", "ori", "ui", "phi", "v", "it", "t", "ie", "d", "y", "max", "uri", "zi", "pi", "u", "o", "e", "info", "ii", "cli", "qi", "ti", "hi", "p", "x", "ind", "oi", "b", "slice", "ini", "start", "yi", "ci", "mi", "iu", "ip", "xi", "init", "ix", "chi", "multi", "bi"], "count": ["f", "list", "base", "shift", "Count", "length", "err", "id", "code", "index", "number", "key", "low", "limit", "n", "total", "left", "last", "sum", "c", "max", "seq", "array", "inc", "next", "weight", "counter", "e", "info", "cache", "current", "p", "offset", "b", "ind", "start", "len", "maybe", "common", "col", "part", "size", "test", "found", "old", "a"], "min": ["f", "name", "mini", "am", "is", "prefix", "in", "err", "key", "m", "code", "mins", "area", "ax", "js", "ii", "size", "init", "skip", "lock", "module", "a", "span", "none", "limit", "mine", "ai", "pre", "diff", "max", "small", "aj", "current", "ind", "ini", "part", "mi", "ix", "MIN", "minute", "li", "sort", "id", "index", "low", "step", "ui", "left", "pos", "Min", "next", "e", "s", "p", "po", "sol", "k", "are", "ni", "n", "si", "ie", "x", "start", "len", "partial", "pri"], "j": ["f", "uj", "li", "h", "jl", "jj", "jo", "jp", "out", "key", "m", "index", "pr", "ji", "n", "si", "dj", "l", "g", "v", "end", "ja", "c", "ie", "it", "d", "y", "max", "aj", "u", "e", "o", "J", "js", "ii", "p", "b", "x", "ind", "start", "k", "ij", "bi", "r"], "temp": ["f", "div", "level", "mini", "base", "shift", "m", "stable", "cut", "unit", "zip", "step", "sum", "v", "diff", "area", "c", "empty", "max", "y", "inc", "age", "frac", "dev", "emp", "Temp", "point", "loc", "iter", "current", "p", "mod", "tmp", "alt", "size", "fake", "partial", "const", "flat", "vol"]}}
{"code": "import java.util.Scanner;\\n\\nimport javax.sql.rowset.serial.SerialArray;\\n\\npublic class Main {\\n\\n\t\tpublic static void main(String[] args){\\n\t\t\t\\n\t\t\tScanner sc = new Scanner(System.in);\\n\t\t\t// \u6574\u6570\u306e\u5165\u529b\\n\t\t\t// \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\\n\t\t\tString str = sc.next();\\n\t\t\tString[] strArray = str.split(\"\");\\n\\n\t\t\tint cnt = 0;\\n\t\t\tfor (int i = 0; i < strArray.length; i++) {\\n//\t\t\t\tfor (int j = i + 1; j < strArray.length; j++) {\\n\t\t\t\t    // 1\u6587\u5b57\u305a\u3064\u8868\u793a\\n\t\t\t        if (strArray[i].toString().equals(\"+\")){\\n\t\t\t\t\t    cnt++;\\n\t\t\t        }else{\\n\t\t\t        \tcnt--;\\n\t\t\t        }\\n//\t\t\t\t}\\n\t\t\t}\\n\t\t    System.out.println(cnt);\\n    \t    return;\\n\t\t\t\\n\\n\t\t}\\n}\\n", "target": "54", "substitutes": {"sc": ["ch", "inst", " pars", " Sc", "nc", "ann", "sb", "bc", "ss", " ans", "anc", "g", "SC", "scan", "sw", "cl", "Sc", "sq", "sci", "cr", "rc", "sp", "ci", " SC", "sch", "sh", "lc", " scr"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String[] $) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tlong a=sc.nextInt(),b=sc.nextInt(),c=sc.nextInt(),x=sc.nextInt(),y=sc.nextInt();\\n\t\tlong res1=a*x+b*y,res2=Math.max(x, y)*c*2,res3=Long.MAX_VALUE;\\n\t\tif(x>y) {\\n\t\t\tres3=y*c*2+(x-y)*a;\\n\t\t}else if(x<y) {\\n\t\t\tres3=x*c*2+(y-x)*b;\\n\t\t}\\n\t\tSystem.out.println((long)Math.min(res1, Math.min(res2, res3)));\\n\t}\\n}\\n\\n", "target": "125", "substitutes": {"sc": ["func", "parse", "ner", "ch", "osc", "cont", "exp", " Sc", "nc", "sche", "sb", "cli", "core", "cv", "esc", "bc", "asc", "pc", "l", "cam", "exec", "ss", "sec", "na", "anc", "scope", "cus", "SC", "se", "scan", "cs", "sw", "uc", "com", "ctx", "cl", "cor", "this", "Sc", "system", "dc", "sub", "sci", "cr", "src", "sync", "cb", "rc", "cer", "sr", "soc", "sp", "ci", " SC", "sh", "tc", "cur", "ser", "lc"], "a": ["f", "name", "base", "am", "data", "ga", "A", "ab", "ad", "oa", "m", "ai", "n", "l", "ac", "ba", "da", "v", "ca", "area", "aa", "d", "ar", "aj", "ay", "va", "pa", "e", "u", "aaa", "s", "fa", "sa", "p", " A", "as", "w", "z", "i", "an", "ae", "alpha"], "b": ["f", "gb", "bf", "h", "sb", "ab", "ad", "cy", "bc", "n", "l", "ac", "B", "ba", "v", "fb", "ca", "aa", "d", "rb", "u", "e", "lb", "j", "o", "bb", "dy", "p", "cb", "w", "z", "bs", "i", "be", "bi", "eb", "r"], "c": ["f", "xc", "h", "ch", "cy", "count", "cc", "pc", "n", "l", "ac", "v", "con", "t", "cs", "ca", "d", "max", "ce", "u", "e", "o", "s", "p", "C", "cr", "w", "q", "cu", "z", "ci", "ct", "i", "lc", "r"], "x": ["f", "xy", "xc", "h", "wy", "xx", "in", "X", "ey", "wx", "id", "cy", "m", "gy", "n", "yx", "l", "ac", "Y", "g", "v", "min", "t", "d", "vy", "max", "dx", "ax", "ay", "ex", "u", "e", "o", "j", "ady", "dy", "xs", "s", "p", "asy", "w", "q", "ya", "rx", "z", "ci", "px", "i", "xi", "yy", "ix", "r"], "y": ["f", "yo", "h", "ch", "yu", "wy", "xx", "oy", "ey", "cy", "sy", "gy", "zy", "n", "ys", "l", "ye", "yx", "Y", "py", "g", "v", "t", "d", "vy", "ny", "yt", "ay", "u", "e", "o", "j", "ry", "dy", "bb", "ty", "s", "p", "yr", "asy", "w", "yi", "iy", "ya", "ky", "z", "ci", "i", "xi", "yy", "ix", "ym"], "res1": ["rs1", "resolution3", "re2", " res0", "res0", "Res3", "rs2", "resolution1", "resOne", " resOne", "rsOne", "Res0", "rs3", "Res2", "re0", "ResOne", "Res1", "resolution2", "re1", "reOne", "resolutionOne"], "res2": ["req2", "respSecond", "resp3", "resSecond", "resTwo", "res4", "results3", "re2", " res72", "req3", "res72", "respTwo", "re4", "results2", "re62", "resultsTwo", " res62", " res4", "resultsSecond", "reqTwo", "re72", "rem72", "resp2", "res62", "rem2", "rem4", "reqSecond", "rem62"], "res3": ["ret43", "rus3", "resh3", "res15", "resh53", "ret13", "rus1", "ras15", "resolution3", "res03", "ras3", "resolution53", " res53", "ras43", "detailsThird", "resolution1", "Res3", "details15", "res43", "re03", "ras8", "rusThird", "res53", "resolutionThree", "ret8", "ras13", "res8", " resThree", "re3", "re8", "Res2", "re13", " resThird", "reshThree", "ResThird", "res13", "re43", "details3", "rasThird", "ret3", "details03", "reThird", "Res1", "rus2", "resThree", "resThird", "re15", "ras03", "resh1"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\n\\nclass Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString strNum = br.readLine();\\n\t\tString[] strNumArrays = strNum.split(\" \");\\n\t\tArrayList<Integer> numList = new ArrayList<Integer>();\\n\t\tfor (int i = 0; i < strNumArrays.length; i++) {\\n\t\t\tnumList.add(Integer.parseInt(strNumArrays[i]));\\n\t\t}\\n\t\tCollections.sort(numList);\\n\t\tString out = String.valueOf(numList.get(0));\\n\t\tfor (int i = 1; i < numList.size(); i++) {\\n\t\t\tout += \" \" + numList.get(i);\\n\t\t}\\n\t\tSystem.out.println(out);\\n\t}\\n\\n}", "target": "37", "substitutes": {"br": ["bf", "tr", "div", "abs", "ctr", "bl", "err", "bro", "fr", "bc", "io", "arr", "dr", "mr", "bar", "buf", "er", "reader", "ar", "wr", "rb", "gr", "hr", "str", "img", "bb", "HR", "p", "b", "cr", "ocr", "cb", "yr", "Reader", "res", "sr", "jar", "bs", "nr", "BR", "nor", "browser", "bridge", "Br", "r"], "strNum": [" strnum", "stringSum", "stringnum", " strNumber", "strSum", "StrNumber", "strNumber", " strSum", "strnum", "stringNUM", "StrSum", "strNUM", "Strnum", "strLine", "stringNum", " strLine", "StrNum", "stringNumber", "StrNUM", "StrLine", "stringLine", " strNUM"], "strNumArrays": ["strNumArraylections", "strNumARls", "strSumArs", "strLenARractions", "strNumAls", "strLenArrays", "strSumArrams", "strSumArays", "strSumArrors", "strNumArlections", "strNumParrams", "strSumARrays", "strNumParrors", "strSumArriers", "strNumArrams", "strNumArrayrays", "strNumArls", "strLenArlections", "strSumARrors", "strNumARays", "strNumArgrays", "strSumARays", "strSumArls", "strLenArractions", "strLenARlections", "strNumArriers", "strLenArs", "strNumArrayriers", "strNumAs", "strNumArrayays", "strNumARriers", "strSumArrays", "strLenARrays", "strSumARriers", "strNumARlections", "strNumARrays", "strNumParriers", "strNumArglections", "strNumParrays", "strNumArrayractions", "strNumArs", "strNumArays", "strSumARls", "strNumAays", "strNumARs", "strLenARs", "strNumArgs", "strSumARrams", "strNumArgractions", "strSumARs", "strNumArrors", "strNumArrayrors", "strNumARrams", "strNumArrayrams", "strNumARrors", "strNumArractions", "strNumARractions", "strNumArrayls"], "numList": [" numArray", "numberLoop", " numlist", "tempPoint", "numberGroup", "numberL", " numMap", "numberSet", "numArray", "intGroup", " numPoint", "numSt", "numMap", "numL", "numLoop", "numberLine", "NumResult", "NumberLine", "intList", " numSet", " numRing", " numL", "tempSet", "tempList", " numValue", "numlist", "NumMap", "NumberList", "NumL", "numberSt", " numGroup", "NumberLoop", "NumValue", "numLine", "numResult", " numLine", " numResult", "numberMap", " numLoop", "tempArray", "numSet", "numberRing", "Numlist", "numPoint", "numberResult", "NumRing", "NumList", "numberArray", " numSt", "numGroup", "intLine", "numberValue", "NumberL", "numValue", "numberlist", "numberList", "numRing", "intL", "NumSt", "numberPoint"], "i": ["f", "li", "h", "name", "I", "shift", "di", "in", "ri", "length", "ni", "id", "key", "gi", "index", "m", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "c", "ie", "d", "y", "uri", "zi", "u", "pi", "e", "j", "o", "info", "ii", "qi", "ti", "p", "b", "x", "oi", "hi", "slice", "ini", "start", "temp", "z", "ci", "part", "k", "mi", "ip", "xi", "iu", "ix", "a", "multi", "bi", "chi", "q", "r"], "out": ["exp", "name", "prefix", "in", "global", "err", "key", "code", "inner", "ext", "extra", "again", "view", "outer", "init", "outs", "exit", "string", "bar", "ex", "cache", "full", "strip", "Out", "part", "work", "log", "id", "index", "null", "up", "print", "password", "OUT", "array", "next", "this", "s", "job", "sync", "file", "state", "dump", "line", "writer", "flat", "plain", "obj", "list", "base", "data", "working", "raw", "wx", "io", "report", "n", "exec", "sum", "result", "write", "output", "word", "str", "user", "point", "error", "conn"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(final String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    sc.close();\\n\\n    int o = -1;\\n    for (int i = 1;i< (int)(100/0.08)+1;i++) {\\n      if ((int)(i*0.08)== a && (int)(i*0.1) == b) {\\n        o = i;\\n        break;\\n      }\\n    }\\n\\n    System.out.println(o);\\n  }\\n}", "target": "121", "substitutes": {"sc": ["class", "osc", "ch", "cont", "fc", "mc", " Sc", "nc", "sb", "sche", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "na", "anc", "scope", "ca", "SC", "se", "c", "scan", "cs", "sw", "cl", "cus", "uc", "com", "ctx", "acc", "cm", "Sc", "system", "dc", "sci", "cr", "ocr", "sf", "sync", "rc", "enc", "sr", "soc", "sp", " SC", "sch", "ec", "tc", "cur", "sem", "lc"], "a": ["f", "ama", "am", "ga", "A", "ab", "ma", "ad", "m", "ai", "n", "ea", "ac", "ba", "da", "area", "ca", "c", "aa", "d", "y", "aj", "va", "u", "pa", "af", "api", "aaa", "fa", "sa", "p", "as", "ia", "au", "an", "ae", "alpha", "la"], "b": ["f", "h", "base", "sb", "ab", "bas", "n", "l", "B", "wb", "ob", "v", "bp", "c", "bin", "d", "y", "mb", "pa", "u", "e", "j", "lb", "bb", "p", "x", "bis", "nb", "bot", "bs", "k", "eb", "bi", "fb", "r"], "o": ["O", "f", "yo", "none", "ko", "off", "out", "in", "oa", "no", "index", "io", "n", "l", "ino", "ob", "ok", "t", "oct", "ie", "iso", "pos", "online", "y", "zo", "so", "u", "e", "lo", "auto", "offset", "p", "oi", "x", "bo", "mo", "ando", "ot", "po", "os", "ou", "oo"], "i": ["f", "eni", "li", "fi", "I", "mini", "clip", "di", "ri", "ami", "gi", "id", "m", "index", "key", "ai", "io", "ji", "n", "si", "ori", "ui", "mu", "v", "ie", "y", "zi", "uri", "u", "pi", "e", "j", "api", "ii", "qi", "ti", "hi", "oi", "x", "slice", "abi", "ini", "ci", "mi", "ip", "iu", "xi", "uni", "chi", "multi", "ix", "bi"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        C solver = new C();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class C {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u5165\u529b\\n            int n = Integer.parseInt(in.next());\\n            String s[] = new String[n];\\n            for (int i = 0; i < n; i++) {\\n                s[i] = in.next();\\n            }\\n            char c[] = new char[10];\\n            for (int i = 0; i < n; i++) {\\n                c = s[i].toCharArray();\\n                Arrays.sort(c);\\n                s[i] = String.valueOf(c);\\n            }\\n            long ans = 0;\\n            long cnt = 0;\\n            Arrays.sort(s);\\n            String tmp = s[0];\\n\\n            for (int i = 1; i < n; i++) {\\n                if (tmp.equals(s[i])) {\\n                    cnt++;\\n                    ans += cnt;\\n                } else {\\n                    cnt = 0;\\n                    tmp = s[i];\\n                }\\n            }\\n            // \u51fa\u529b\\n            out.println(ans);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "32", "substitutes": {"inputStream": ["InputStream", "initWriter", "outputSteam", " inputSteam", "InputWriter", "inputWriter", "outputWriter", "Inputstream", "initStream", "initstream", "InputSteam", "initSteam", " inputstream", "outputstream", "inputstream", "inputSteam"], "outputStream": ["applicationWriter", "applicationStreamer", "outputStreamer", "inputStreamer", "OutputStream", "OutputString", "OutputWriter", "outputSteam", "OutputSteam", " outputSteam", "Outputstream", " outputstream", "inputWriter", "outputString", "applicationStream", "outputWriter", "inputString", "OutputStreamer", "applicationSteam", " outputString", "outputstream", "inputstream", "inputSteam"], "in": ["gen", "on", "name", "path", "cin", "data", "is", "input", "err", "din", "pin", "image", "inner", "id", "config", "index", "io", "nin", "IN", "inn", "min", "diff", "con", "bin", "reader", "kin", "request", "isin", "inc", "ax", "source", "this", "info", "inside", "s", "en", "rin", "vin", "ini", "sin", "file", "login", "win", "work", "ins", "conn", "i", "connection", "init", "In", "gin", "run", "inf", "r"], "out": ["client", "destroy", "name", "string", "plus", "data", "one", "off", "version", "outside", "no", "call", "log", "err", "inner", "session", "io", "n", "nin", "exec", "null", "window", "process", "IN", "server", "scope", "up", "loader", "c", "scan", "page", "write", "bin", "password", "OUT", "inc", "output", "external", "ex", "this", "o", "cache", "analysis", "user", "to", "at", "p", "x", "error", "Out", "w", "sync", "problem", "file", "extra", "again", "line", "conn", "writer", "outer", "ou", "init", "connection", "outs", "In", "parent", "net"], "solver": ["Solution", "Solver", "Solving", "solution", "ssolver", "ssolve", "solve", "Sparse", "ssparse", "sparse", "ssolution", "solving", " sparse", "ssolving", " solution", "Solve", " solving", " solve"], "testNumber": ["testNumbers", "trialNumber", "Testnumber", "TestNumbers", "trialNum", "TestNum", " testNumbers", "trialNumbers", " testnumber", "testNum", "trialnumber", "TestNumber", " testNum", "testnumber"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        \\n        Scanner scn = new Scanner(System.in);\\n        long N = scn.nextLong();\\n        long A = scn.nextLong();\\n        long B = scn.nextLong();\\n        \\n        if(A!=0){\\n            long tmp = (N/(A+B))*A;\\n            tmp += N%(A+B)<=A ? N%(A+B) : A;\\n            System.out.println(tmp);\\n        }\\n        else System.out.println(0);\\n    }\\n}\\n", "target": "217", "substitutes": {"scn": ["rcl", "FCns", "scns", " scN", " scnn", "csn", "SCN", "corns", "corr", "SCl", "scN", "scnn", "csN", "rcN", "FCn", "Scn", "SCn", " sccn", "SCb", "scnl", "corn", "rcn", "Sccn", "SCnn", "scr", "FCnn", "csb", "SCnl", " scl", "csnn", "scb", "scl", "FCnl", " scns", " scb", "corcn", "SCns", "sccn", "rcnn", " scnl", "Scns", "Scr", " scr"], "N": ["CNN", "G", "K", "Len", "I", "L", "Z", "Size", "NI", "X", "Ni", "P", "Q", "NS", "H", "n", "NC", "Y", "S", "AN", "E", "D", "NL", "NO", "W", "J", "F", "V", "No", "NM", "R", "NP", "NN", "T", "C", "U", "Num", "M", "NA", "Ne", "Ns", "NT", "O"], "A": ["FA", "Code", "SA", "G", "Az", "I", "L", "AA", "Java", "PA", "JA", "API", "TA", "AD", "P", "X", "Q", "HA", "n", "Y", "S", "alpha", "AB", "As", "Av", "EA", "IA", "E", "D", "Ab", "AP", "AI", "Offset", "W", "Ma", "Area", "F", "MA", "BA", "V", "CA", "Ca", "AF", "All", "An", "T", "C", "U", "AC", "Ar", "Alpha", "NA", "AM", "M", "UA", "AR", "LA", "Am", "mA", "Ha", "Array", "DA", "Na", "a"], "B": ["G", "I", "L", "BB", "DB", "X", "P", "GB", "BT", "Y", "AB", "E", "D", "BE", "Ab", "W", "SB", "J", "EB", "F", "LB", "BA", "V", "BI", "R", "b", "NB", "C", "T", "U", "WB", "M", "RB", "Big", "Part", "Bs", "Ub", "O", "OB"], "tmp": ["obj", "bf", "term", "nt", "zip", "pre", "v", "meta", "diff", "t", "area", "result", "tt", "attr", "buf", "ff", "mp", "max", "su", "txt", "next", "output", "rb", "TB", "img", "Temp", "np", "bb", " temporary", "offset", "p", "amp", "x", "space", "elt", "T", "nb", "sup", "kk", "pp", "extra", "ptr", "temp", "sp", "part", "copy", "fake", " XXX", "tc", "beta", "const", "stuff", "abb", "yy", "test", "cmp", "now", "alpha", "tf"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tchar[] c = sc.next().toCharArray();\\n\t\tsc.close();\\n\\n\t\tint max = 0;\\n\t\tint ans = 0;\\n\t\tfor (int i = 0; i < c.length; i++) {\\n\t\t\tif (c[i] == 'A' || c[i] == 'C' || c[i] == 'G' || c[i] == 'T') {\\n\t\t\t\tans++;\\n\t\t\t\tmax = Math.max(max, ans);\\n\t\t\t} else {\\n\t\t\t\tans = 0;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(max);\\n\t}\\n}\\n", "target": "100", "substitutes": {"sc": ["ner", "ch", "osc", "mc", "nc", "sb", "core", "search", "cv", "cc", "bc", "esc", "asc", "pc", "exec", "ck", "ss", "sec", "na", "scope", "g", "ca", "SC", "se", "scan", "cs", "cl", "sw", "uc", "Sc", "dc", "sci", "cr", "src", "sync", "rc", "cer", "sr", "enc", "soc", "ci", "sp", "sch", "sh", "parser", "ec", "cur", "lc"], "c": ["f", "content", "xc", "h", "cf", "ch", "string", "input", "err", "code", "cc", "esc", "pc", "n", "unc", "l", "ac", "g", "v", "ca", "cs", "ctx", "con", "uc", "cl", "d", "chain", "ce", "u", "e", "word", "s", "dc", "p", "b", "x", "C", "cr", "rc", "enc", "cu", "char", "col", "ci", "k", "ct", "arc", "cp", "lc", "a", "r"], "max": ["cons", "exp", "plus", "co", "no", "call", "count", "default", "total", "pop", "ca", "conf", "cl", "ax", "power", "size", "maximum", "average", "scale", "act", "limit", "active", "na", "anc", "min", "diff", "can", "mod", "cas", "MAX", "os", "alpha", "gen", "cross", "az", "id", "ase", "last", "end", "con", "scan", "num", "pos", "array", "add", "as", "Max", "mean", "an", "star", "std", "parent", "rand", "on", "parse", "div", "shape", "n", "sum", "rest", "best", "auto", "x", "pad", "powers", "right", "rank", "any"], "ans": ["nan", "ases", "ANS", " scans", "ats", "ann", "chan", "aned", "anon", "lines", "ays", "anas", "man", "ons", "amps", "na", "anc", "min", "aces", "cus", "cs", "ents", "scan", "can", "lan", "ls", "es", "ions", "nas", "ens", "s", "offs", "as", "x", "ns", "atan", "cas", "ants", "acs", "os", "ins", "ks", "parser", "ras", "an", "outs", "ars", "ana", "span"], "i": ["f", "eni", "li", "fi", "h", "I", "data", "di", "cli", "ni", "length", "id", "key", "gi", "index", "ri", "ai", "code", "io", "ji", "si", "l", "ui", "v", "t", "y", "uli", "uri", "zi", "u", "e", "pi", "j", "o", "info", "ii", "qi", "p", "ti", "b", "x", "oi", "slice", "abi", "ini", "yi", "z", "ci", "ip", "xi", "iu", "uni", "ix", "multi", "bi", "lc", "a"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\n\\n/**\\n * StandardDeviation\\n */\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        while (true) {\\n            int n = sc.nextInt();\\n\\n            if (n == 0)\\n                break;\\n\\n            int list[] = new int[n];\\n            double sum = 0;\\n            for (int i = 0; i < n; i++) {\\n                list[i] = sc.nextInt();\\n                sum += list[i];\\n            }\\n\\n            sum /= n;\\n            double ans = 0;\\n            for (int i = 0; i < n; i++) {\\n                ans += Math.pow((list[i] - sum), 2);\\n            }\\n\\n            System.out.printf(\"%.8f\\n\", Math.sqrt((double) ans / n));\\n        }\\n    }\\n}\\n", "target": "203", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "sche", "cv", "cc", "bc", "esc", "pc", "ss", "sec", "anc", "scope", "ca", "SC", "se", "c", "scan", "uc", "sw", "cs", "cl", "cus", "screen", "cor", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "sp", "ci", " SC", "sch", "sh", "ec", "cur", "coll", "sem", "ser"], "n": ["f", "nan", "ne", "none", "nc", "in", "nt", "ni", "count", "m", "number", "l", "g", "v", "t", "r", "c", "num", "d", "network", "y", "sn", "u", "e", "o", "j", "nw", "ii", "dn", "p", "b", "x", "all", "ns", "nl", "en", "nb", "ln", "sync", "N", "len", "z", "nr", "k", "size", "nn", "nit", "net"], "list": ["li", "obj", "sort", "ul", "base", "L", "data", "plus", "range", "out", "act", "id", "count", "number", "index", "code", "config", "l", "null", "total", "na", "left", "ll", "result", "cl", "num", "max", "plan", "array", "ls", "source", "batch", "lat", "p", "x", "stack", "all", "slice", "len", "pool", "set", "LIST", "part", "size", "lists", "test", "la", "flat", "coll", "lc", "parent", "scale"], "sum": ["stat", "ne", "sort", "summary", "ul", "plus", "am", "miss", "ann", "oss", "out", "mass", "count", "index", "cost", "unit", "si", "total", "ss", "na", "ums", "gram", "norm", "ass", "aw", "who", "up", "min", "um", "num", "max", "su", "weight", "av", "sa", "sub", "fat", "all", "pass", "au", "start", "sk", "mem", "part", "mean", "size", "us", "spread", "average", "sh", "an", "alpha", "scale", "sign", "net", "Sum"], "i": ["f", "eni", "li", "fi", "I", "di", "in", "ri", "ni", "gi", "id", "m", "index", "ai", "io", "ji", "si", "l", "ui", "mu", "phi", "v", "adi", "ie", "y", "uli", "uri", "zi", "u", "pi", "e", "j", "o", "info", "ii", "qi", "p", "ti", "hi", "oi", "x", "b", "ini", "z", "ci", "mi", "iu", "ip", "xi", "init", "chi", "ix", "multi", "bi", "lc", "r"], "ans": ["nan", "ases", "ations", "ANS", "cons", "ats", "ann", "aned", "anon", "man", "anas", "vs", "amps", "ss", "acts", "AN", "na", "ents", "cs", "scan", "lan", "ls", "es", "ions", "nas", "aus", "als", "s", "offs", "as", "atan", "ns", "cas", "ants", "ares", "sk", "acs", "mean", "os", "ks", "ras", "an", "ians", "ars", "nn", "ams", "ds", "ana", "ons"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args) \t{\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint alphabet[];\\n\t\talphabet = new int[26];\\n\t\tfor(int i = 0;i < 26; i++) {\\n\t\t\talphabet[i] = 0;\\n\t\t}\\n\t\twhile(sc.hasNext()) {\\n\t\t\tString str = sc.next();\\n\t\t\tstr = str.toLowerCase();\\n\t\t\tfor(int i = 0;i < str.length();i++) {\\n\t\t\t\tif(97 <= str.charAt(i) && str.charAt(i) <= 122) alphabet[str.charAt(i) - 97]++;\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i = 0;i < 26;i++) {\\n\t\t\tSystem.out.printf(\"%c : %d\\n\",i + 97,alphabet[i]);\\n\t\t}\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "242", "substitutes": {"sc": ["f", "class", "ner", "ch", "osc", "fc", " Sc", "nc", "st", "sb", "cms", "search", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "scope", "anc", "con", "SC", "c", "scan", "se", "sw", "cl", "cs", "uc", "ctx", "Sc", "system", "dc", "sci", "cr", "src", "sf", "sync", "rc", "sr", "sp", " SC", "ct", "sch", "sh", "ec", "cur", "sem", "lc"], "alphabet": ["assabetic", "assab", "alphation", "alphaphabet", "utfabetic", "accabet", "accphabet", "ophalog", "encabet", "utfacet", "alphaabetic", "ophphabet", "alphphabet", "alphalog", "aliabet", "octphabet", "alphacet", "variab", "phphabet", "ophation", "variphabet", "phalog", "variabetic", "octabetic", "alphab", "ophabet", "alphaacet", "variabet", "octabet", "encation", "encphabet", "encalog", "assabet", "aliabetic", "aliphabet", "accab", "utfphabet", "alphaabet", "aliab", "accabetic", "alphabetic", "octacet", "utfabet", "alphaab", "phabet", "assphabet", "phation"], "i": ["f", "eni", "li", "fi", "esi", "I", "di", "in", "ri", "ni", "length", "id", "gi", "m", "index", "ai", "io", "ji", "si", "ori", "ui", "mu", "phi", "v", "it", "c", "ie", "d", "y", "uri", "zi", "pi", "e", "o", "u", "j", "api", "ii", "info", "qi", "ti", "p", "hi", "oi", "x", "b", "ini", "start", "ci", "mi", "ip", "iu", "init", "xi", "isi", "chi", "multi", "ix", "bi", "lc"], "str": ["f", "tr", "h", "br", "div", "name", "string", "data", "input", "stri", "st", "expr", "prefix", "in", "err", "id", "key", "m", "inner", "fr", "pr", "n", "dr", "l", "text", "arr", "g", "c", "type", "style", "form", "oct", "cl", "tri", "kr", "spec", "ext", "txt", "next", "dec", "wr", "inc", "u", "hr", "iter", "s", "p", "b", "STR", "x", "strip", "pass", "sr", "enc", "char", "sl", "sp", "line", "strings", "cur", "coll", "prev", "Str", "r"], "charAt": ["strSet", "charSet", "strAt", "characterMin", "characterAt", "CharSet", "charat", "strat", "CharMin", " charSet", "charMin", "CharAt", "characterSet", "characterat", "Charat", " charMin"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  static Scanner sc = new Scanner(System.in);\\n  public static void main(String[] args) {\\n\\n    int len = sc.nextInt();\\n    // sc = new Scanner(System.in);\\n    String str = sc.next();\\n\\n    if (len%2 == 1){System.out.println(\"No\");return;}\\n\\n    // String substr_former = str.substring(0, len/2);\\n    String substr_later = str.substring((len/2), len);\\n\\n    if (str.startsWith(substr_later)){\\n      System.out.println(\"Yes\");\\n    }else {\\n      System.out.println(\"No\");\\n    }\\n  }\\n}", "target": "161", "substitutes": {"sc": ["class", "ner", "osc", " Sc", "nc", "sb", "log", "esc", "bc", "config", "cc", "asc", "pc", "si", "ss", "sec", "scope", "anc", "SC", "se", "c", "scan", "sw", "cl", "uc", "cs", "spec", "Sc", "system", "sq", "sci", "src", "sf", "rc", "enc", "scl", "ci", "sp", " SC", "sh", "parser", "ec", "desc", "lib", "lc"], "len": ["list", "name", "Len", " num", " leng", "L", " str", " split", " length", "lang", "length", "count", "split", " el", " size", "num", "pos", "seq", " l", " lib", "str", "ln", " count", " lang", "size", " clen", " Len", "lib"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/*\\n * AtCoder Beginner Contest 087 C \"Candies\"\\n *   https://abc087.contest.atcoder.jp/tasks/arc090_a/\\n */\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tInputScanner in = new InputScanner(System.in);\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\\n\t\tint N = in.nextInt();\\n\t\tint[][] A = in.nextIntArray(2, N);\\n\\n\t\tint sum1 = A[0][0];\\n\t\tint sum2 = 0;\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tsum2 += A[1][i];\\n\t\t}\\n\\n\t\tint ans = sum1 + sum2;\\n\t\tfor (int i = 1; i < N; i++) {\\n\t\t\tsum1 += A[0][i];\\n\t\t\tsum2 -= A[1][i - 1];\\n\t\t\tans = Math.max(ans, sum1 + sum2);\\n\t\t}\\n\\n\t\tout.println(ans);\\n\\n\t\tin.close();\\n\t\tout.close();\\n\t}\\n\\n\t/*\\n\t * extends java.util.Scanner\\n\t */\\n\tstatic class InputScanner {\\n\\n\t\tScanner scanner;\\n\\n\t\tpublic InputScanner(InputStream inputStream) {\\n\t\t\tthis.scanner = new Scanner(inputStream);\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\treturn scanner.nextInt();\\n\t\t}\\n\\n\t\tpublic long nextLong() {\\n\t\t\treturn scanner.nextLong();\\n\t\t}\\n\\n\t\tpublic double nextDouble() {\\n\t\t\treturn scanner.nextDouble();\\n\t\t}\\n\t\tpublic String next() {\\n\t\t\treturn scanner.next();\\n\t\t}\\n\\n\t\tpublic int[] nextIntArray(int n) {\\n\t\t\tint[] ret = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.nextInt();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic int[][] nextIntArray(int h, int w) {\\n\t\t\tint[][] ret = new int[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.nextInt();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic long[] nextLongArray(int n) {\\n\t\t\tlong[] ret = new long[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.nextLong();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic long[][] nextlongArray(int h, int w) {\\n\t\t\tlong[][] ret = new long[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.nextLong();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic double[] nextDoubleArray(int n) {\\n\t\t\tdouble[] ret = new double[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.nextDouble();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic double[][] nextDoubleArray(int h, int w) {\\n\t\t\tdouble[][] ret = new double[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.nextLong();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[] nextStringArray(int n) {\\n\t\t\tString[] ret = new String[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.next();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[] nextStringArray(int n, String split) {\\n\t\t\tString[] ret = scanner.next().split(split);\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[][] nextStringArray(int h, int w) {\\n\t\t\tString[][] ret = new String[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.next();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[][] nextStringArray(int h, int w, String split) {\\n\t\t\tString[][] ret = new String[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tret[i] = scanner.next().split(split);\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic void close() {\\n\t\t\tscanner.close();\\n\t\t}\\n\\n\t}\\n\\n}\\n", "target": "140", "substitutes": {"in": ["name", "path", "data", "is", "input", "lin", "log", "err", "din", "pin", "id", "inner", "socket", "config", "thin", "image", "nin", "l", "IN", "inn", "con", "scan", "bin", "reader", "kin", "isin", "inc", "read", "source", "buffer", "ax", "user", "inside", "s", "as", "ln", "ic", "rin", "pass", "ini", "login", "win", "again", "line", "ins", "conn", "connection", "init", "In", "gin", "inf", "a", "r"], "out": ["gen", "obj", "list", "client", "arg", "name", "path", "string", "input", "prefix", "log", "err", "key", "m", "io", "window", "exec", "IN", "self", "v", "up", "result", "doc", "write", "bin", "OUT", "max", "array", "ext", "inc", "output", "ex", "this", "o", "str", "cache", "word", "to", "user", "p", "error", "Out", "file", "res", "again", "temp", "line", "part", "writer", "outer", "png", "outs", "plain", "parent"], "N": ["NE", "CNN", "K", "Len", "I", "L", "Z", "Size", "NI", "X", "Ni", "P", "Q", "NS", "H", "B", "S", "Y", "D", "MN", "W", "J", "F", "V", "No", "R", "NB", "NN", "C", "T", "Num", "M", "NA", "Ne", "Part", "Ns", "NT", "O"], "A": ["App", "AW", "FA", "Args", "SA", "K", "I", "Array", "L", "AA", "Java", "AS", "PA", "API", "P", "H", "Sample", "S", "Y", "B", "AN", "As", "area", "D", "None", "AP", "AI", "Access", "Action", "W", "MA", "Adam", "V", "At", "CA", "AU", "All", "C", "An", "T", "The", "M", "Ar", "Alpha", "NA", "AM", "Average", "AR", "LA", "For", "mA", "Ha", "In", "alpha", "From", "a"], "sum1": [" sumup", "signFirst", "um3", "SumOne", "sum3", "miss1", "um1", "missup", " sumOne", "Sum2", "sign1", "sign2", "sumone", "summaryup", "Sum3", "missOne", "sumup", " sumone", "signOne", "um0", "summaryOne", "Sum0", "umOne", " sumFirst", "summaryone", "sumOne", "SumFirst", "sumFirst", "sum0", " sum0", " sum3", "summary1", "Sum1", "missone", "um2"], "sum2": ["um4", "mean2", "um02", "scale4", "sha4", " sum4", "sha1", " sum22", "mean1", "um1", " sumtwo", " sum02", "scaleTwo", "summary22", "sumTwo", "Sum2", "mean4", "sha2", "play42", "scaletwo", "summary2", " sumTwo", "sum22", "sum42", "meantwo", "mean62", "um62", " sum62", "Sum4", "Sumtwo", "scale2", "Sum02", " sum42", "play22", "sumtwo", "shatwo", "sum4", "sum62", "summary1", "sum02", "Sum1", "play1", "summary42", "meanTwo", "um2", "play2"], "i": ["f", "eni", "me", "gi", "l", "mu", "t", "attr", "c", "uri", "api", "ii", "qi", "oi", "iu", "ij", "init", "multi", "a", "di", "ri", "ai", "it", "isin", "source", "u", "hi", "ini", "im", "z", "ci", "mi", "ix", "ki", "bi", "fi", "li", "I", "id", "index", "ji", "ui", "phi", "g", "y", "zi", "e", "o", "ti", "p", "b", "yi", "chi", "my", "q", "ik", "ni", "cli", "io", "si", "ori", "v", "ie", "d", "uli", "pi", "info", "x", "abi", "start", "ip", "xi"], "ans": ["runs", "nan", "ANS", "cons", " scans", "ats", "ann", "aned", "anon", "reads", "ays", "vs", "annot", "amps", "AN", " means", "acts", "na", "anc", "cs", "ents", "can", "lan", "plan", "ls", "es", "ions", "ids", "nas", "ens", "aus", "anners", "s", "as", "ns", "An", "san", "ln", "ants", "sk", " spans", "eps", "os", "ins", "ks", "an", "outs", "ars", "span", "ana", "anned", "ons"], "scanner": ["scanker", "analyner", "cancher", "caner", "catner", "canoser", "Scanter", "annlier", "scanener", "Scanner", "Scaner", "Scanker", "Scancher", " scaner", "annker", "annner", "Scanener", "canener", " scanoser", "catter", "caninner", "analyker", "annter", "canter", "scanter", "catker", "analyer", "Scaninner", " scanter", "canker", "catener", "canlier", "anner", " scanlier", "scanoser", "analyter", "scaninner", " scanener", "scanlier", "Scanlier", "scancher", "scaner", " scancher", " scaninner", "canner", "Scanoser"], "inputStream": [" inputBuffer", "InputStream", "inputForm", " inputForm", "InputReader", "inputBuffer", "outputSteam", " inputSteam", "outputReader", "outputForm", "InputForm", "outputBuffer", "InputBuffer", "Inputstream", "InputSteam", " inputReader", " inputstream", "outputStream", "outputstream", "inputstream", "inputReader", "inputSteam"], "n": ["f", "on", "ne", "name", "nc", "no", "nt", "count", "m", "l", "na", "g", "v", "t", "r", "c", "num", "d", "y", "network", "sn", "u", "e", "o", "adj", "s", "p", "b", "x", "all", "ns", "un", "en", "ln", "pn", "z", "k", "conn", "an", "a", "nn", "fn", "q", "net"], "ret": ["del", "value", "obj", "det", "val", "list", "RET", "bf", "arg", "rec", "el", "rt", "data", "ann", "format", "match", "ref", "replace", "group", "id", "ut", "default", "arr", "gt", "reg", "hard", "fab", "print", "it", "rev", "success", "result", "att", "cat", "let", "pret", "ext", "bit", "fun", "re", "ft", "lit", "def", "info", "reply", "url", "repl", "iter", "en", "rets", "res", "hash", "back", "len", "alt", "mem", "conn", "art", "flat", "over", "feat", "Ret", "pub", "continue"], "h": ["f", "ch", "hw", "id", "m", "wt", "H", "l", "he", "g", "v", "end", "t", "c", "d", "max", "y", "u", "e", "o", "hr", "p", "b", "x", "rh", "hi", "en", "gh", "hm", "z", "k", "wa", "work", "ht", "sh", "q", "r"], "w": ["hw", "wx", "m", "wt", "l", "wb", "aw", "g", "v", "t", "c", "ww", "sw", "d", "y", "max", "wl", "weight", "width", "W", "e", "o", "u", "wn", "p", "b", "x", "fw", "kw", "wh", "ws", "win", "z", "wa", "k", "work", "we", "q", "r"], "j": ["f", "uj", "li", "jl", "jj", "jo", "jp", "off", "jen", "ni", "key", "m", "ji", "si", "l", "ui", "g", "v", "jc", "t", "it", "ja", "ie", "d", "y", "aj", "u", "e", "o", "J", "js", "ii", "qi", "p", "b", "x", "oi", "ig", "im", "je", "z", "k", "ij", "a", "q", "r"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tlong N = sc.nextLong(),A= sc.nextLong(),B= sc.nextLong();\\n\t\tlong wa =A+B;\\n\t\tif(wa==0) {\\n\t\t\tSystem.out.println(0);\\n\t\t}else {\\n\t\t\tlong ans = (N/wa)*A;\\n\t\t\tif (N%wa<=A) {\\n\t\t\t\tans+= N%wa;\\n\t\t\t}else{\\n\t\t\t\tans+= A;\\n\t\t\t}\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\t}\\n\\n}", "target": "217", "substitutes": {"sc": ["osc", "ch", "cont", " Sc", "nc", "sb", "sche", "cv", "esc", "cc", "bc", "com", "asc", "pc", "l", "cam", "ss", "na", "anc", "scope", "ca", "SC", "se", "c", "scan", "sw", "cl", "uc", "cs", "cus", "ctx", "acc", "Sc", "sq", "sci", "cr", "sf", "sync", "rc", "cer", "enc", "soc", "sl", "sp", "ci", " SC", "ec", "tc", "cur", "sem", "lc", " scr"], "N": ["G", "K", "Len", "I", "L", "Z", "X", " n", "Ni", "P", "Wa", "Q", "NS", "H", "n", "NC", "Y", "S", "Mo", "Na", "D", "Os", "None", "W", "F", "V", "No", "NG", "R", "Nat", "T", "C", "U", "Num", "M", "NA", "Ne", "Ns", "Wh", "O"], "A": ["O", "AW", "G", "SA", "Az", "K", "I", "L", "AA", "AS", "PA", "API", "TA", "P", "Wa", "HA", "H", "ASC", "S", "Y", "As", "da", "IA", "Sa", "Ab", "WA", "AP", "W", "Ma", "Area", "BA", "At", "CA", "Ca", "AF", "AC", "C", "An", "T", "w", "U", "M", "Alpha", "NA", "Ar", "au", "LA", "Am", "Ns", "Array", "Na", "a", "RA"], "B": ["QB", "G", "K", "I", "L", "Z", "AA", "BB", "Ba", "BF", "X", "P", "Wa", "Q", "H", "Y", "AB", "UB", "Ab", "W", "F", "Blue", "BA", "NB", "b", "R", "Lim", "C", "T", "U", "WB", "M", "Bs", "Ub", "BC", "O"], "wa": [" ha", "SA", " Wa", " ka", "Va", "oa", "ab", "ma", "ref", "wave", "Wa", " da", "wt", "ai", " sa", "lambda", "na", "aw", "Pa", "ba", "da", "appa", "wait", "ca", "aa", "ww", "asa", "sw", "wo", "WA", "va", "pa", "W", "Ka", "ra", "af", " fa", "fa", "sa", "hi", "Sa", "za", "ha", "w", "au", " na", "Fa", "awa", " w", "NA", "ya", "wan", " ra", " sw", " WA", "xa", "qa", "ta", "WS", "la", "Na", "a"], "ans": ["nan", "ANS", " scans", "ats", "ann", "aned", "aid", "anon", "ays", "amps", "AN", " means", "ss", "na", "anc", "ca", "cs", "scan", "asa", "can", "lan", "ls", "es", "nas", "ens", "aus", "fa", "as", "ia", "x", "ns", "An", "san", "atan", "ants", "cas", " na", "NA", "sk", " spans", "eps", "acs", "aps", "ins", "ks", "ras", "ds", "an", "outs", "ars", "span", "Na", "ana", "ons"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main (String[] args) throws IOException{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tint n = Integer.parseInt(br.readLine());\\n\t\tint[] a = new int[n];\\n\t\tString[] elements = br.readLine().split(\" \");\\n\t\t\\n\t\tfor (int i = 0; i < n; i++){\\n\t\t\ta[i] = Integer.parseInt(elements[i]);\\n\t\t}\\n\t\t\\n\t\tint swap = 0;\\n\t\t\\n\t\tfor (int i = 0; i < a.length - 1; i++){\\n\t\t\tfor(int j = a.length - 1; j >= i + 1; j--){\\n\t\t\t\tif(a[j] < a[j-1]){\\n\t\t\t\t\tint v = a[j-1];\\n\t\t\t\t\ta[j-1] = a[j];\\n\t\t\t\t\ta[j] = v;\\n\t\t\t\t\tswap++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.print(a[0]);\t\\n\t\tif(n > 1){\\n\t\t\tfor (int i = 1; i < a.length; i++) {\\n\t\t\t\tSystem.out.print(\" \" + a[i]);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println();\\n\t\tSystem.out.println(swap);\\n\t}\\n}", "target": "170", "substitutes": {"br": ["bm", "obj", "bf", "tr", "ner", "abs", "sb", "ler", "bh", "db", "ab", "ref", "bl", "err", "bro", "fr", "bc", "io", "bur", "orb", "arr", "dr", "ori", "ob", "mr", "bar", "buf", "er", "reader", "wr", "rb", "gr", "hr", "img", "bb", "org", "b", "cr", "yr", "cb", "ber", "res", "sr", "jar", "bs", "bd", "BR", "bridge", "bern", "browser", "Br", "lr", "r"], "n": ["f", "h", "ne", "name", "nc", "no", "nt", "ni", "count", "m", "number", "l", "t", "c", "d", "num", "y", "network", "sn", "u", "e", "o", "cn", "s", "dn", "p", "un", "b", "x", "all", "ns", "nb", "en", "N", "len", "z", "k", "size", "an", "nn", "fn", "net"], "a": ["f", "sta", "list", "access", "ama", "am", "data", "working", "input", "ga", "A", "ab", "ma", "oa", "count", "code", "index", "active", "ea", "l", "na", "address", "ba", "da", "g", "area", "ca", "aa", "c", "d", "empty", "y", "aj", "array", "something", "va", "u", "e", "o", "aux", "pa", "aaa", "api", "auto", "current", "s", "at", "sa", "as", "b", "p", "ia", "za", "x", "ha", "missing", "action", "au", "error", "ans", "z", "ata", "work", "qa", "ana", "an", "ae", "alpha", "la"], "elements": ["ceements", "celements", "Emembers", "emembers", "eslements", "jelines", "edments", "edlements", "element", "Element", "jemembers", "cements", "Elines", "edements", "Elements", "edayers", "ements", "ceayers", "seeayers", "jelements", "seements", "eayers", "eslines", "eslement", "eements", "seelements", "jelement", "elines", "esmembers", "seeements"], "i": ["f", "eni", "li", "fi", "ch", "I", "mini", "is", "di", "in", "cli", "ni", "ri", "gi", "id", "ik", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "phi", "it", "c", "ie", "d", "y", "uri", "u", "e", "o", "pi", "api", "ii", "info", "qi", "p", "ti", "hi", "x", "oi", "ini", "q", "yi", "ci", "mi", "iu", "xi", "ip", "init", "ix", "multi", "ki", "bi", "my"], "swap": [" swamp", "wrap", "swapping", "swrap", "swip", "Swap", "swamp", "snrap", "wapping", "SWrap", "sprap", " swrap", "snaps", " swAP", "spap", "SWap", "spamp", "waps", " swip", "Swrap", "snapping", "swAP", "swaps", "SWAP", "snap", "wap", "Swip", "Swaps", "Swamp", "Swapping", "SWip", "spip", "SwAP"], "j": ["f", "uj", "li", "obj", "jl", "jj", "ch", "jo", "oj", "jp", "ni", "length", "key", "fr", "pr", "ji", "si", "l", "pre", "jc", "g", "it", "ja", "c", "ie", "d", "bj", "y", "aj", "u", "e", "o", "J", "js", "ii", "dy", "qi", "p", "job", "b", "x", "ind", "jan", "q", "je", "z", "part", "k", "ij", "jet", "jon", "jit"], "v": ["value", "tv", "h", "vol", "vi", "ev", "iv", "sv", "ov", "vd", "m", "vs", "ver", "l", "lv", "conv", "c", "uv", "va", "u", "e", "V", "av", "s", "p", "b", "x", "vid", "vp", "z", "vt", "k", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        //System.err.println(s);\\n        boolean flag = true;\\n        if(s.startsWith(\"A\")) {\\n            String ns = s.substring(2, s.length()-1);\\n            int count = 0;\\n            for(char c : ns.toCharArray()) {\\n                if(c=='C') {\\n                    count++;\\n                }\\n            }\\n            if(count!=1) {\\n                //System.err.println(\"not 1\");\\n                flag = false;\\n            }\\n            for(char c : s.substring(1).toCharArray()) {\\n                if(c!='C' && !String.valueOf(c).toLowerCase().equals(String.valueOf(c))) {\\n                    flag = false;\\n                }\\n            }\\n        } else {\\n            //System.err.println(\"not A\");\\n            flag = false;\\n        }\\n        System.out.println(flag ? \"AC\" : \"WA\");\\n    }\\n}", "target": "209", "substitutes": {"sc": ["osc", "inst", "nc", "st", "proc", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "server", "scope", "anc", "app", "loop", "SC", "se", "c", "scan", "uc", "cl", "cs", "spec", "inc", "acc", "str", "Sc", "dc", "sci", "cr", "sf", "sync", "rc", "enc", "sl", "set", "sp", "ci", "ec", "desc"], "s": ["f", " symbols", "input", "sb", "lines", "m", " objects", "n", "l", "S", "ss", " strings", "d", "array", "output", "es", "e", "services", "p", "b", " lines", " tokens", "i", "strings", "ses", " inputs", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\ttry (Scanner scanner = new Scanner(System.in)) {\\n\t\t\tint n = scanner.nextInt();\\n\t\t\tint[] b = new int[n + 1];\\n\\n\t\t\tfor (int i = 1; i < n; i++) {\\n\t\t\t\tb[i] = scanner.nextInt();\\n\t\t\t}\\n\t\t\tb[0] = b[n] = 1000000;\\n\\n\t\t\tint ans = 0;\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tans += Math.min(b[i], b[i+1]);\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\t}\\n}\\n", "target": "240", "substitutes": {"n": ["f", "nan", "ne", "name", "none", "nc", "in", "no", "nt", "count", "m", "not", "l", "inn", "g", "v", "t", "c", "num", "d", "network", "y", "sn", "u", "e", "o", "j", "s", "p", "un", "x", "all", "ns", "nl", "en", "nb", "ln", "w", "N", "len", "z", "k", "mn", "size", "nn", "fn", "net"], "b": ["gb", "f", "bf", "pb", "br", "h", "base", "buff", "bh", "sb", "db", "ab", "id", "binary", "m", "l", "B", "zb", "ob", "ba", "g", "v", "emb", "bar", "c", "bin", "d", "y", "array", "mb", "buffer", "rb", "u", "e", "lb", "batch", "bb", "s", "p", "x", "boot", "cb", "w", "nb", "ib", "bs", "k", "big", "abb", "eb", "body", "a", "bi", "fb", "bis", "r"], "i": ["f", "eni", "li", "fi", "I", "is", "di", "in", "ri", "ni", "cli", "id", "gi", "ami", "index", "ai", "io", "ji", "si", "ori", "ui", "mu", "phi", "v", "it", "ie", "y", "uri", "zi", "u", "pi", "o", "e", "j", "info", "ii", "api", "qi", "p", "hi", "x", "oi", "ind", "ti", "abi", "ini", "yi", "ci", "mi", "ip", "xi", "init", "iu", "isi", "uni", "ix", "multi", "bi", "a"], "ans": ["ANS", "cons", " scans", "faces", "ats", "ann", "aned", "lines", "ons", "amps", "AN", "acts", "na", "anc", "ches", "cs", "ents", "scan", "rows", "errors", "lan", "ls", "es", "ions", "nas", "aus", "asts", "s", "offs", "as", "x", "ns", "cas", "ants", "vers", "sk", "os", "ins", "ks", "ana", "ras", "ends", "an", "outs", "ars", "a", "anned", "span"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint a = scanner.nextInt(), b = scanner.nextInt(), c = scanner.nextInt(), count = 0;\\n\t\tfor (int i = a; i <= b; i++)\\n\t\t\tif (c % i == 0)\\n\t\t\t\tcount++;\\n\\n\t\tSystem.out.println(count);\\n\t}\\n}", "target": "190", "substitutes": {"scanner": ["scanker", "Scanning", "generner", "scanener", "Scanzer", "Scanner", "Scaner", "Scanker", " scanker", " scaner", "annner", "Scanener", "hanner", "hanzer", "canener", "generning", "caninner", "Scanwriter", "aninner", " scanzer", " scanwriter", "canzer", "Scaninner", "anner", "annener", "anker", "scaninner", "annwriter", "scanning", " scanener", "generker", "hanker", "scaner", "scanzer", "generinner", " scaninner", "anning", "canner", "scanwriter", "haninner"], "a": ["f", "base", "data", "ga", "A", "ab", "ad", "oa", "n", "ea", "ac", "na", "da", "ba", "area", "ca", "aa", "asa", "d", "y", "va", "aaa", "s", "fa", "p", "sa", "as", "start", "qa", "ae", "from", "alpha", "la", "r"], "b": ["f", "bf", "h", "br", "base", "sb", "db", "ab", "limit", "bc", "n", "l", "B", "wb", "ob", "ba", "v", "aa", "d", "y", "mb", "rb", "e", "lb", "bb", "s", "p", "nb", "cb", "bs", "k", "abb", "eb", "bi", "fb", "r"], "c": ["f", "cf", "nc", "cy", "number", "cc", "bc", "n", "unc", "l", "ac", "con", "cs", "ca", "uc", "d", "y", "ce", "cm", "u", "e", "o", "dc", "p", "x", "C", "cr", "sc", "cu", "z", "ci", "k", "size", "cur", "lc"], "count": ["cond", "list", "base", "act", "call", "nt", "Count", "length", "group", "id", "code", "number", "limit", "keep", "key", "index", "process", "total", "sum", "type", "weight", "add", "counter", "cache", "depth", "offset", "ind", "child", "start", "len", "col", "size", "part", "test", "const", "coll", "found", "check", "now", "parent", "force"], "i": ["f", "li", "fi", "I", "di", "in", "ri", "length", "gi", "id", "index", "ai", "n", "si", "l", "ui", "phi", "v", "it", "ie", "d", "y", "uri", "zi", "u", "pi", "o", "j", "e", "info", "ii", "qi", "ti", "p", "x", "hi", "oi", "slice", "abi", "ini", "z", "ci", "mi", "iu", "ip", "init", "xi", "ix", "multi", "bi"]}}
{"code": "\\n\\nimport java.io.BufferedReader;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\nimport java.util.Set;\\nimport java.util.StringTokenizer;\\n\\n\\npublic class Main {\\n\t static class FastReader \\n\t    { \\n\t        BufferedReader br; \\n\t        StringTokenizer st; \\n\t       \\n\t  \\n\t        public FastReader() \\n\t        { \\n\t            br = new BufferedReader(new\\n\t                     InputStreamReader(System.in)); \\n\t        } \\n\t  \\n\t        String next() \\n\t        { \\n\t            while (st == null || !st.hasMoreTokens()) \\n\t            { \\n\t                try\\n\t                { \\n\t                    st = new StringTokenizer(br.readLine()); \\n\t                } \\n\t                catch (IOException  e) \\n\t                { \\n\t                    e.printStackTrace(); \\n\t                } \\n\t            } \\n\t            return st.nextToken();\\n\t            \\n\t        } \\n\t  \\n\t        int nextInt() \\n\t        { \\n\t            return Integer.parseInt(next()); \\n\t        } \\n\t  \\n\t        long nextLong() \\n\t        { \\n\t            return Long.parseLong(next()); \\n\t        } \\n\t  \\n\t        double nextDouble() \\n\t        { \\n\t            return Double.parseDouble(next()); \\n\t        } \\n\t  \\n\t        String nextLine() \\n\t        { \\n\t            String str = \"\"; \\n\t            try\\n\t            { \\n\t                str = br.readLine(); \\n\t            } \\n\t            catch (IOException e) \\n\t            { \\n\t                e.printStackTrace(); \\n\t            } \\n\t            return str; \\n\t        }\\n\\n\t\t\tpublic Character charAt(int i) {\\n\t\t\t\t// TODO Auto-generated method stub\\n\t\t\t\treturn null;\\n\t\t\t} \\n\t    }\\n\\n\t static int gcd(int a , int b) {\\n\t\t if(b==0)return a;\\n\t\t return gcd(b,a%b);\\n\t }\\n\\n\t/**\\n\t * @param args\\n\t * @throws IOException\\n\t */\\n\t static int m =(int) (1e9+7);\\n\t static long mod(long x) {\\n\t\t \\n\t\t return ((x%m+m)%m);\\n\t }\\n\t static long add(long x,long y) {\\n\t\t return mod((mod(x)+mod(y)));\\n\t }\\n\t static long mul(long x,long y) {\\n\t\t return mod((mod(x)*mod(y)));\\n\t }\\n\t \\n\tpublic static void main(String[] args)throws IOException  {\\n\t\tFastReader s=new FastReader();\t\t\\n\t\tint n = s.nextInt();\\n\t\tint d = s.nextInt();\\n\t\tSystem.out.println((int)Math.ceil((double)n/(double)((2*d)+1)));\\n\t}\\n}\\n\t\\n\\n", "target": "238", "substitutes": {"br": ["bm", "obj", "bf", "tr", "ch", "base", "rt", "sb", "bh", "cro", "db", "ab", "pl", "bl", "err", "bt", "bro", "fr", "bc", "pr", "arr", "dr", "raf", "mr", "bp", "bar", "buf", "bed", "wr", "rb", "gr", "hr", "img", "ur", "bb", "b", "cr", "src", "cb", "ber", "sr", "sp", "bs", "bd", "BR", "bridge", "be", "lr", "Br", "browser", "fb", "r"], "st": ["store", "obj", "sta", "nd", "inst", "string", "rt", "St", "stri", "sb", "nt", "bl", "bt", "ut", " est", "pr", "stable", "l", "ist", "step", "ss", "ost", "est", "t", "rest", "ST", "se", "style", "sw", "cl", "sty", "stru", "fe", "sn", "ft", "pt", "sts", "stop", "stage", "sa", "ust", "strip", "cr", "src", "ste", "ast", "pe", "start", "sr", "sc", "sl", "sp", "struct", "ct", "sh", " sc", "const", "mt", "be", "stress", "std", "Str", "sth", "sign", "r"], "str": ["f", "obj", "tr", "div", "exp", "name", "string", "data", "stri", "out", "ctr", "err", "bl", "id", "inner", "fr", "pr", " Str", "n", "arr", "dr", "text", "t", "rev", "c", "style", "doc", "d", "e", "url", "pt", "s", "p", "STR", "cr", "enc", " intr", "sr", "char", "sl", "temp", "z", "sp", "line", "strings", "Str", "r"], "i": ["f", "h", "name", "I", "is", "id", "m", "index", "ai", "si", "l", "v", "it", "c", "d", "pi", "u", "o", "j", "ii", "p", "b", "start", "xi", "ip", "iu", "ix", "a"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = sc.nextInt() , b = sc.nextInt(), \\n\t\t\t\tc = sc.nextInt(), d = sc.nextInt();\\n\t\t\\n\t\tif(Math.min(b, d)-Math.max(a, c)>0) {\\n\t\t\tSystem.out.print(Math.min(b, d)-Math.max(a, c));\\n\t\t}\\n\t\telse System.out.print(\"0\");\\n\t}\\n\\n}", "target": "47", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    static int gcd(int a, int b)\\n    {\\n        // Everything divides 0\\n        if (a == 0)\\n            return b;\\n        if (b == 0)\\n            return a;\\n\\n        // base case\\n        if (a == b)\\n            return a;\\n\\n        // a is greater\\n        if (a > b)\\n            return gcd(a-b, b);\\n        return gcd(a, b-a);\\n    }\\n    public static void main(String[] args) throws Exception{\\n\\n        FastReader fs = new FastReader();\\n        out = new PrintWriter(new BufferedOutputStream(System.out));\\n\\n\\n        int k = fs.nextInt();\\n      long ans = 0 ;\\n        for(int i=1 ; i<=k ; i++){\\n          for(int j=1 ; j<=k ; j++){\\n          \tfor(int l=1 ; l<=k ; l++){\\n            \tans += gcd(gcd(i,j),l);\\n            }\\n          }\\n        }\\n       \\n        out.println(ans);\\n        \\n\\n\\n        out.close();\\n    }\\n    //-----------PrintWriter for faster output---------------------------------\\n    public static PrintWriter out;\\n\\n    //-----------MyScanner class for faster input----------\\n    public static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n\\n    }\\n    //--------------------------------------------------------\\n}\\n", "target": "6", "substitutes": {"a": ["f", "ama", "A", "ma", "index", "ea", "na", "da", "ba", "ca", "c", "aa", "aj", "va", "ra", "pa", "o", "aaa", "fa", "sa", "p", "x", "as", "i", "ae", "alpha", "la"], "b": ["f", "name", "base", "sb", "ab", "code", "m", "n", "B", "v", "c", "bar", "d", "abc", "y", "e", "o", "bb", "p", "x", "bis", "z", "bs", "k", "i", "abb"]}}
{"code": "import java.util.Scanner;\\n \\nclass Main{\\n  public static void main(String[] arg){\\n    int H, W;\\n\\n    Scanner in = new Scanner(System.in);\\n\\n    while(true){\\n        H = in.nextInt();\\n        W = in.nextInt();\\n\\n        if(H == 0 && W == 0) return;\\n        \\n        for(int i=0; i<H; i++){\\n            for(int j=0; j<W; j++){\\n                System.out.print(\"#\");\\n            }\\n            System.out.println();\\n        }\\n        System.out.println();\\n    }\\n    \\n  }\\n}", "target": "87", "substitutes": {"arg": ["Args", "parse", "name", "path", "param", "match", "err", "gs", "params", "config", "arr", "g", "con", "entry", " arguments", "array", "Line", "word", "str", "loc", "ig", "ark", "enc", "Arg", "line", "argument"], "H": ["HY", "G", "h", "K", "Length", "I", "L", "A", "X", "P", "HT", "Q", "HK", "HD", "HA", "CH", "B", "Y", "SH", "RH", "DH", "OH", "NH", "J", "F", "Ch", "V", "HH", "HI", "R", "EH", "MH", "T", "U", "N", "M", "HP", "HB", "AH", "Ha", "He", "HS", "Hi", "TH", "IT", "HC"], "W": ["WH", "AW", "WE", "G", "K", "Length", "I", "L", "Z", "SW", "MW", "Sw", "X", "Width", "P", "Wa", "Q", "CW", "WC", "B", "Y", "SH", "DW", "FF", "Web", "We", "WA", "FW", "Weight", "J", "F", "V", "NW", "WD", "TW", "EH", "T", "w", "U", "N", "WP", "WB", "VW", "EW", "WI", "WS", "GW", "Wh", "TH"], "in": ["gen", "rec", "between", "data", "is", "input", "out", "lin", "token", "err", "din", "id", "m", "inner", "socket", "pin", "n", "nin", "l", "exec", "IN", "inn", "g", "con", "c", "scan", "doc", "bin", "reader", "kin", "query", "isin", "inc", "serv", "buffer", "ex", "source", "str", "inside", "as", "ln", "pass", "rin", "ini", "login", "win", "again", "ins", "conn", "connection", "init", "In", "lib", "r"], "i": ["f", "li", "h", "jl", "I", "vi", "is", "jp", "di", "ri", "ni", "id", "ai", "io", "ji", "si", "l", "ori", "ui", "v", "it", "y", "u", "pi", "o", "ii", "qi", "hi", "p", "b", "x", "oi", "z", "ci", "ij", "ip", "iu", "chi", "ki", "ix", "bi"], "j": ["f", "uj", "li", "obj", "h", "jl", "jj", "ch", "jo", "br", "jp", "err", "key", "pr", "ji", "n", "si", "l", "jc", "v", "g", "it", "ja", "end", "ie", "bj", "y", "aj", "u", "o", "J", "js", "ii", "qi", "p", "job", "b", "x", "z", "k", "ij", "bi", "q"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String...args){\\n        Scanner sc= new Scanner(System.in);\\n        int N = sc.nextInt();\\n        String S = sc.next();\\n        int found= 0;\\n        char[] ch= new char[S.length()];\\n        for(int i=0; i<N-2;i++){\\n            String check = Character.toString(S.charAt(i));\\n            if(check.equals(\"A\") ){\\n                check = Character.toString(S.charAt(i+1));\\n                if(check.equals(\"B\")){\\n                    check = Character.toString(S.charAt(i+2));\\n                    if(check.equals(\"C\")){\\n                        found++;\\n                    }\\n                }\\n            }\\n        }\\n        System.out.println(found);\\n    }\\n}", "target": "110", "substitutes": {"sc": ["ner", "osc", " Sc", "nc", "sche", "sb", "search", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "server", "anc", "g", "cus", "SC", "se", "c", "scan", "sw", "cs", "uc", "cor", "str", "Sc", "system", "sq", "sci", "Scan", "cr", "sf", "sync", "rc", "cer", "sr", "or", "sp", " SC", "sch", "sh", "cur", "sem", "ser"], "N": ["NE", "G", "K", "Len", "I", "L", "Z", "Size", "A", "NI", "X", " n", "Ni", "P", "Q", "NS", "SN", "H", "n", "B", "D", "NL", "MN", "F", "V", "R", "T", "C", "Num", "M", "NA", "Part", "Ns", "ND", "NT", "O"], "S": ["SA", "G", "Start", "DS", "I", "string", "L", "Si", "Source", "Session", "AS", "A", "SK", "Socket", "SO", "ITS", "P", "Sin", "JSON", "SN", "NS", "Sync", "New", "Old", "Sample", "Series", "B", "SH", "BS", "Support", "Block", "RS", "As", "VS", "Service", "Os", "Site", "Version", "Success", "OS", "SL", "Su", "Regular", "State", "s", "R", "IS", "Sac", "Location", "T", "C", "SS", "U", "TS", "M", "SE", "SU", "Sing", "Single", "Part", "Save", "Test", "SM", "CSS", "Standard", "In", "Sort", "SI", "JS"], "found": ["f", "valid", "matched", "tested", "fixed", "done", "required", "pattern", "Found", "normal", "no", "failed", "find", "length", "err", "count", "number", "index", "expected", "loaded", "used", "search", "stable", "good", "n", "total", "defined", "printed", "left", "diff", "of", "finding", "bound", "result", "bug", "cl", "num", "pos", "checked", "feed", "array", "finder", "broken", "info", "current", "iter", "all", "error", "file", "front", "allowed", "built", "test", "lost", " Found", "based"], "ch": ["cho", "ph", "unch", "chan", "err", "count", "CH", "ck", "ach", "ches", "conf", "c", "cs", "str", "Ch", "che", "tch", "char", "col", "z", "k", "ct", "cp", "sh", "chi", "cher", "q"], "i": ["f", "eni", "li", "esi", "h", "name", "I", "data", "is", "di", "in", "ri", "ni", "ami", "id", "gi", "index", "inner", "ai", "io", "ji", "n", "si", "ori", "ui", "v", "it", "diff", "c", "ie", "d", "uri", "zi", "u", "pi", "o", "j", "info", "e", "ii", "api", "qi", "s", "p", "ti", "b", "x", "oi", "hi", "slice", "ini", "start", "ci", "ip", "iu", "xi", "init", "isi", "chi", "multi", "ix", "bi", "a"], "check": ["f", "class", "valid", "parse", "cross", "string", "fail", "out", "help", "in", "call", "find", "throw", "key", "code", "search", "id", "good", "CHECK", "text", "block", "ck", "v", "ok", "end", "c", "style", "cat", "num", "y", "update", "checked", "complete", "fix", "read", "feed", "add", "str", "info", "load", "pack", "card", "Check", "p", "x", "error", "sync", "action", "start", "see", "char", "set", "view", "k", "ct", "work", "guard", "rule", "test", "look", "get", "clean"]}}
{"code": "\\nimport java.util.*;\\n\\n\\npublic class Main {\\n\t\\n\t\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner s = new Scanner(System.in);\\n\t\t\\n\t\tint n = s.nextInt();\\n\t\tint[] a = new int[n+1];\\n\t\tfor(int i = 1;i<=n;i++)a[i] = s.nextInt();\\n\t\tint c=  0;\\n\t\tfor(int i = 2;i<n;i++)\\n\t\t{\\n\t\t\tif((a[i]>a[i-1]&&a[i]>a[i+1])||(a[i]<a[i-1]&&a[i]<a[i+1]))\\n\t\t\t{}else c++;\\n\t\t}\\n\t\t\\n\t\t System.out.println(c);\\n\t}\\n}\\n", "target": "96", "substitutes": {"s": ["f", "ts", "is", "abs", "out", "in", "sb", "sv", "gs", "south", "si", "l", "S", "ss", "v", "se", "er", "d", "ms", "ls", "fts", "u", "e", "js", "qs", "as", "p", "b", "bis", "sets", "ns", "sf", "w", "sync", "ws", "ans", "sys", "os", "ins", "us", "strings", "ses", "rs", "fs", "ds", "r"], "n": ["f", "h", "ne", "none", "nc", "in", "no", "nt", "ni", "count", "m", "l", "g", "v", "t", "r", "num", "d", "network", "y", "u", "e", "o", "j", "p", "b", "x", "ns", "nl", "nb", "en", "w", "N", "q", "len", "z", "k", "an", "nn", "net"], "a": ["f", "ama", "am", "data", "ga", "A", "ma", "ao", "ai", "active", "ea", "l", "ac", "na", "ba", "da", "app", "area", "ca", "aa", "asa", "result", "y", "aj", "array", "something", "va", "u", "e", "aux", "o", "pa", "aaa", "auto", "at", "sa", "as", "p", "b", "x", "za", "all", "access", "sup", "action", "ha", "au", "ata", "wa", "work", "qa", "la", "tta", "an", "ae", "alpha"], "i": ["f", "li", "fi", "I", "mini", "is", "di", "in", "anti", "cli", "ni", "ri", "gi", "id", "ami", "index", "ai", "io", "ji", "si", "ori", "ui", "phi", "v", "g", "it", "ie", "y", "uri", "u", "pi", "o", "e", "j", "info", "ii", "api", "qi", "ei", "ti", "p", "b", "x", "oi", "hi", "slice", "ini", "start", "yi", "z", "ci", "k", "mi", "iu", "ip", "xi", "init", "isi", "chi", "multi", "ix", "bi", "ki"], "c": ["f", "co", "nc", "count", "m", "cy", "code", "cc", "pc", "unc", "l", "ac", "sec", "anc", "g", "v", "t", "cs", "ca", "d", "ce", "inc", "cm", "u", "e", "o", "dc", "p", "b", "x", "C", "ic", "cr", "enc", "cu", "sc", "col", "ci", "k", "ct", "arc", "ec", "tc", "coll", "lc"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main (String[] args) throws IOException {\\n        \\n        BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));\\n        StringBuilder builder = new StringBuilder();\\n\\n        String line = reader.readLine();\\n        int count = Integer.parseInt(line);\\n\\n        line = reader.readLine();\\n        String[] columns = line.split(\" \");\\n        int[] numbers = new int[count];\\n        for (int i = count-1; i >= 0 ; i-- ) {\\n            if ( builder.length() != 0 ) {\\n                builder.append(\" \");\\n            }\\n            builder\\n                .append(Integer.parseInt(columns[i]));\\n        }\\n        System.out.println(builder);\\n    }\\n}", "target": "79", "substitutes": {"reader": ["f", "ner", "worker", "keeper", "oder", "input", "upper", "ler", "in", "inner", "io", "report", "server", "loader", "driver", "editor", "er", "per", "feed", "read", "buffer", "source", "rer", "iter", "system", "row", "reading", "file", "Reader", "rr", "ro", "stream", "writer", "parser", "ger", "handler", "over", "bird", "r"], "builder": ["http", "translation", "string", "worker", "base", "keeper", "oder", "instance", "holder", "upper", "log", "length", "inner", "object", "runner", "message", "null", "block", "build", "driver", "bar", "result", "type", "layer", "editor", "er", "creator", "umber", "bean", "buffer", "square", "word", "url", "wrapper", "auto", "iter", "builders", "b", "Builder", "row", "manager", "her", "built", "definition", "writer", "parser", "outer", "building", "r"], "line": ["content", "value", "parse", "name", "cell", "string", "base", "data", "raw", "input", "range", "lin", "out", "column", "in", "log", "group", "lf", "lines", "code", "number", "limit", "unit", "l", "text", "block", "message", "end", "style", "page", "model", "cl", "write", "entry", "inline", "output", "source", "Line", "word", "str", "url", "frame", "item", "section", "letter", "row", "error", "file", "sync", "mode", "col", "header", "part", "LINE", "lc", "force"], "count": ["f", "list", "level", "name", "base", "string", "nt", "Count", "length", "id", "limit", "code", "number", "lines", "index", "key", "n", "l", "patch", "close", "c", "type", "num", "max", "next", "weight", "counter", "age", "info", "cache", "depth", "current", "p", "all", "ind", "file", "child", "start", "len", "col", "size", "part", "found"], "columns": ["colands", "colllines", "coles", "columnands", "Columnands", "columnes", "configands", "colles", "columnlines", "Columnlines", "colls", "configes", "Columns", "cols", "configs", "Columnes", "configlines", "collines"], "numbers": ["enums", "nums", "countodes", "enings", "pings", "countums", "nodes", "countings", "countumbers", "enumbers", "podes", "pums", "nings", "pumbers", "enodes"], "i": ["f", "eni", "li", "fi", "h", "I", "di", "in", "ri", "length", "ni", "id", "gi", "m", "index", "ai", "n", "si", "l", "ui", "mu", "phi", "v", "it", "adi", "c", "d", "y", "zi", "pi", "u", "e", "j", "info", "api", "ii", "o", "qi", "ti", "hi", "b", "x", "oi", "p", "abi", "ini", "z", "ci", "k", "ip", "xi", "init", "ix", "multi", "bi", "r"]}}
{"code": "// \u63d0\u51fa\u6642\u306b\u6d88\u3059\\n// package app;\\n\\nimport java.util.Scanner;\\n\\n// \u63d0\u51fa\u6642\u306bMain\u306b\u5909\u66f4\u3059\u308b\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        int x = sc.nextInt();\\n        int t = sc.nextInt();\\n\\n        int kaisu = n / x;\\n        if (n % x > 0) {\\n            kaisu++;\\n        }\\n\\n        System.out.println(t * kaisu);\\n\\n        sc.close();\\n    }\\n}", "target": "34", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.StringTokenizer;\\n\\nclass Main {\\n\tpublic static void main(String args[]) {\\n\t\tInputStreamReader isr = new InputStreamReader(System.in);\\n\t\tBufferedReader br = new BufferedReader(isr);\\n\\n\t\ttry {\\n\t\t\tint w = Integer.parseInt(br.readLine());\\n\t\t\tint n = Integer.parseInt(br.readLine());\\n\t\t\tint amida[] = new int[w];\\n\t\t\tfor (int i=0;i<w;i++) amida[i] = i+1;\\n\t\t\tfor (int i=0;i<n;i++) {\\n\t\t\t\tStringTokenizer st = new StringTokenizer(br.readLine(),\",\");\\n\t\t\t\tint a = Integer.parseInt(st.nextToken());\\n\t\t\t\tint b = Integer.parseInt(st.nextToken());\\n\t\t\t\tamida[a-1] = amida[a-1]^amida[b-1];\\n\t\t\t\tamida[b-1] = amida[a-1]^amida[b-1];\\n\t\t\t\tamida[a-1] = amida[a-1]^amida[b-1];\\n\t\t\t}\\n\t\t\tfor (int i=0;i<w;i++) System.out.println(amida[i]);\\n\t\t} catch (Exception e) {\\n\t\t\tSystem.out.println(\"Exception!\");\\n\t\t}\\n\t}\\n}", "target": "156", "substitutes": {"isr": ["isrr", "osrs", " isrs", "osrr", " isrb", "issr", "isrb", "isrs", "Isrr", "ISrs", " isw", " iserr", "osr", "Isr", "oserr", "iserr", "Isrs", "Iserr", "issw", "ISr", "ISrb", " isrr", "isw", "issrs", "issrb", "ISw"], "br": ["obj", "bf", "tr", "ch", "ner", "rt", "sb", "bh", "cro", "ab", "db", "bl", "err", "bro", "fr", "bc", "io", "orb", "arr", "dr", "bar", "buf", "reader", "rb", "gr", "hr", "str", "img", "bb", "iter", "HR", "cr", "yr", "cb", "ber", "sr", "jar", "or", "her", "bs", "sp", "BR", "cur", "browser", "lr", "ger", "Br", "bridge", "r"], "w": ["f", "h", "ow", "wp", "hw", "m", "wt", "window", "l", "wd", "v", "t", "c", "ww", "sw", "d", "ew", "y", "max", "wl", "wo", "weight", "u", "W", "o", "e", "width", "wall", "wn", "s", "p", "x", "fw", "kw", "wh", "q", "win", "ws", "z", "wa", "k", "work", "we", "r"], "n": ["f", "h", "nc", "net", "nt", "m", "l", "v", "t", "c", "d", "y", "network", "u", "e", "o", "j", "s", "p", "x", "ns", "en", "nb", "N", "z", "k", "nn", "r"], "amida": ["ramanda", "amisa", "emidia", "gamido", "asmanda", "armidas", "chamida", "umida", "emidation", "emido", "hamida", "amdidia", "amicity", "lamiga", " amid", "amaria", "chamido", " amuka", "emida", "pmida", "AMida", "miga", "amidia", "amiga", "lamida", "amdida", "gamidi", "amdido", " amicity", " amidia", "camido", "ramido", "mida", " amiga", "chamisa", "famicity", "armida", "amidi", "AMiga", "ramidas", "Amidi", "AMidas", "armid", "Amida", "ramida", "camida", "Amiga", "umido", "amanda", "Amid", "Amidas", "lamidi", "amdidation", "lamidas", "asmiga", "mido", "armidia", "appido", " amidas", "gamid", "amuka", "camiga", "amidation", "asmido", "gamidas", "namiga", "AMidi", "namido", "lamid", "amidas", "chamuka", "ramiga", "samiga", "famidas", "namida", "Amidia", "armidi", "asmida", "armido", "namidia", "ramidi", "armisa", " amaria", "gamida", "asmidia", "hamidas", "hamicity", "appidia", "umidas", "famida", "famido", "samida", "armuka", "samidi", "hamido", " amido", "amid", "appida", "asmidi", "manda", " amisa", "Amaria", "midi", "pmidas", "ramidia", "appidation", " amidi", "pmaria", "umidi", "pmidi", "samidas", "camidi", "amido"], "i": ["f", "li", "on", "fi", "I", "di", "in", "ri", "ni", "ik", "id", "gi", "ami", "index", "ai", "io", "si", "l", "ori", "ui", "g", "v", "phi", "it", "t", "c", "ie", "d", "y", "zi", "uri", "u", "e", "pi", "j", "info", "api", "ii", "o", "qi", "s", "ti", "p", "x", "oi", "hi", "ini", "yi", "z", "ci", "part", "k", "mi", "iu", "ip", "xi", "init", "ix", "chi", "bi", "my", "r"], "st": ["sta", "rt", "St", "stri", "sb", "bl", "fr", "ut", "pr", "l", "ost", "est", "t", "rest", "ST", "se", "tt", "cl", "d", "sn", "ft", "e", "str", "pt", "sts", "s", "sa", "stack", "src", "sf", "ast", "start", "sc", "sl", "set", "th", "sp", "rd", "ct", "sh", "lt", "stress", "std", "ste", "sth", "r"], "a": ["f", "am", "ga", "A", "ab", "ad", "ma", "id", "code", "ai", "ac", "na", "ba", "ca", "area", "c", "aa", "t", "asa", "ah", "d", "y", "aj", "va", "u", "pa", "o", "e", "api", "fa", "p", "sa", "x", "as", "au", "front", "z", "part", "art", "an", "ae", "alpha", "la"], "b": ["f", "h", "base", "ga", "sb", "ab", "ad", "bl", "m", "l", "B", "g", "v", "ba", "ca", "t", "c", "bar", "aa", "d", "y", "u", "e", "o", "j", "lb", "bb", "p", "x", "nb", "back", "ib", "z", "bs", "part", "k", "an", "be", "bi", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n\t \tint a = sc.nextInt();\\n \t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint k = sc.nextInt();\\n\t\tint powk = ((int) Math.pow(2, k));\\n\t\tint answer = 0;\\n\\n\t\tif (a > b && a > c) {\\n\t\t\tanswer = a * powk + b + c;\\n\t\t} else if (b > a && b > c) {\\n\t\t\tanswer = b * powk + a + c;\\n\t\t} else {\\n\t\t\tanswer = c * powk + a + b;\\n\t\t}\\n\\n\t\tSystem.out.println(answer);\\n  }\\n}\\n", "target": "201", "substitutes": {"sc": ["parse", "ner", "ch", "osc", "cont", "mc", " Sc", "nc", "sche", "sb", "cli", "cv", "esc", "bc", "cc", "asc", "pc", "ck", "ss", "scope", "ca", "SC", "se", "scan", "cs", "uc", "sw", "cus", "ctx", "cor", "Sc", "sq", "sub", "dc", "sci", "cr", "src", "sync", "rc", "cer", "sr", "enc", "soc", "sp", " SC", "ct", "sch", "sh", "parser", "tc", "cur", "coll", "ser", "lc"], "a": ["f", "h", "am", "ga", "A", "ab", "ad", "ai", "n", "ea", "ac", "na", "aw", "ba", "da", "ca", "area", "aa", "asa", "t", "d", "y", "ar", "aj", "va", "u", "e", "o", "pa", "api", "bb", "aaa", "s", "fa", "sa", "p", "x", "as", "at", "w", "au", "ak", "i", "art", "an", "ae", "alpha"], "b": ["f", "bf", "h", "cf", "sb", "ab", "db", "ad", "cy", "m", "bc", "n", "l", "ac", "B", "wb", "g", "v", "ba", "fb", "t", "ca", "aa", "d", "y", "rb", "u", "e", "o", "j", "bb", "s", "bi", "p", "x", "cb", "w", "bs", "i", "an", "eb", "r"], "c": ["f", "h", "cf", "ch", "nc", "ad", "cy", "m", "cc", "bc", "n", "l", "ac", "g", "v", "ca", "cs", "con", "uc", "cat", "d", "y", "ce", "cm", "u", "e", "o", "j", "cn", "dc", "p", "x", "C", "cb", "w", "rc", "q", "cu", "z", "ci", "ct", "i", "ec", "lc", "r"], "k": ["f", "h", "K", "m", "kick", "cc", "n", "ac", "g", "v", "ok", "d", "y", "e", "o", "j", "s", "p", "x", "w", "kk", "ak", "sk", "z", "size", "ks", "i", "ke", "km", "q", "kw"], "powk": ["powq", "powedks", "fowsf", "lpown", "fowsk", "poyn", "pewks", "pawf", "powke", "powd", "pawsk", "powesk", "lpcowk", "powske", "powern", "pawk", "pawn", "cpowks", "poyd", "fowske", " poyn", "powc", "powsk", "fowf", "pewk", "powedke", "poyke", "powef", " poyc", "powek", "poweke", "cpowedk", " poyk", "fowke", "lpcowq", "powks", " pown", "powssk", "pcown", "powsn", "lpowk", "powf", "lpcown", "poyks", "cpowedd", "powerk", "pewn", "powedk", "powedd", "cpowd", "pawc", "poyc", "fowk", "powed", "pawke", "lpowq", "pcowk", " powc", "pewq", "cpowke", "powsf", "poyk", "cpowk", "lpowks", "lpcowks", "pown", "poweks", "fowssk", " powke", "pcowks", "cpowedks", "powerks", "powerq", " poyke", "cpowedke", "pcowq", "powsc"], "answer": ["username", "value", "cover", "sort", "string", "data", "grade", "issue", "length", "ee", "number", "search", "code", "integer", "object", "option", " answers", "score", "message", "address", "order", "area", "result", "support", "update", "zero", "query", "array", "draw", "next", "Answer", "ace", "offer", "output", "word", "cache", "e", "question", "reply", "ell", "field", "offset", "python", "blank", "error", "answered", "response", " explanation", "knowledge", "work", "average", "pixel", "cash", "balance", "fee", "evidence", "asm"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n\\n    int age = sc.nextInt();\\n    int price = sc.nextInt();\\n\\n    int pay = 0;\\n\\n    if (age >= 13) {\\n      pay = price;\\n    } else if (age >= 6 && age <= 12) {\\n      pay = price / 2;\\n    } else if (age <= 6) {\\n      pay = 0;\\n    }\\n\\n    System.out.println(pay);\\n  }\\n}\\n", "target": "249", "substitutes": {"sc": ["ner", "osc", "ch", "fc", "mc", " Sc", "nc", "sche", "sb", "esc", "cc", "bc", "asc", "pc", "exec", "ss", "server", "scope", "ca", "SC", "se", "c", "cs", "scan", "uc", "sw", "cl", "cus", "com", "Sc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "soc", "sp", " SC", "ct", "sch", "sh", "ec", "tc", "cur", "ser", "lc"], "age": ["time", "parse", "media", "level", "rate", "grade", "issue", "edge", "version", "oa", "length", "core", "id", "count", "code", "index", "image", "month", "process", "ide", "build", "order", "address", "app", "episode", "end", "style", "page", "model", "save", "ie", "ime", "feed", "ge", "cycle", "ace", "event", "pack", "stage", "year", "archive", "date", "ale", "agent", "file", "fee", "child", "aging", "pe", "scale", "rage", "play", "line", "size", "ages", "ave", "gap", "now", "old", "pect", "market"], "price": ["time", "value", "rate", "base", "grade", "ish", "Price", "count", "seed", "paid", "trade", "cost", "change", "service", "alpha", "order", "py", "payment", "pie", "style", "money", "type", "priced", "ake", "per", "currency", "cycle", " prices", "show", "priority", "p", "fee", "pe", "profit", "start", "hop", "sp", "size", "scale", "market"], "pay": ["parse", "http", "allow", "Pay", "hide", "rate", "contract", "id", "paid", "trade", "par", "cost", "patch", "close", "order", "apply", "app", "payment", "wait", "send", "sign", "port", "money", "charge", "pick", "feed", "auth", "read", "ay", "load", "show", "ape", "buy", "tax", "cas", "trans", "hop", "play", "fill", "quant", "work", "pal", "ask", "pad", "cash", "fee", "amount"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args)\\n    {\\n        Scanner sc = new Scanner(System.in);\\n        String a = sc.next();\\n\\n        int cnt = 0;\\n        for(int i =0; i < a.length(); i++){\\n            if(a.charAt(i)=='1'){\\n                cnt += 1;\\n            }\\n        }\\n\\n        System.out.println(cnt);\\n\\n    }\\n}\\n", "target": "165", "substitutes": {"sc": ["ner", "osc", "ch", "mc", "nc", "cc", "bc", "esc", "asc", "pc", "exec", "ss", "sec", "scope", "anc", "ca", "SC", "se", "c", "scan", "sw", "cs", "cus", "cl", "spec", "acc", "str", "Sc", "sci", "cr", "ocr", "sf", "src", "rc", "cer", "sl", "sp", "ci", " SC", "sh", "ec"], "a": ["f", "string", "am", "data", "input", "ga", "A", "in", "ab", "oa", "expected", "n", "l", "ea", "na", "area", "c", "aa", "abc", "array", "va", "u", "pa", "e", "aaa", "s", "fa", "sa", "as", "b", "p", "za", "missing", "ata", "wa", "ana", "an", "alpha", "la"], "cnt": ["acNT", "conint", "connt", "lcnt", "cnc", " cnc", "acint", "cno", "Cct", "count", "Cnc", "Cnt", " cno", " cNT", "cct", " crt", "lcount", "cint", "ncrt", "ncNT", "lcno", "cNT", "Crt", " cct", "ncct", "acount", "lcnc", "lcint", "CNT", "conount", "acnt", "Cno", "ncnt", "lcNT", "crt", "conNT"], "i": ["f", "li", "fi", "h", "I", "data", "di", "in", "ri", "id", "gi", "m", "index", "ai", "io", "ji", "n", "si", "ui", "v", "t", "it", "c", "d", "uli", "uri", "u", "e", "o", "pi", "j", "info", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "abi", "ini", "start", "ci", "k", "xi", "chi", "ix", "multi", "bi", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String[] args) {\\n\\n        new Main().solve();\\n    }\\n\\n    void solve(){\\n\\n        int a, b;\\n\\n        Scanner sc = new Scanner(System.in);\\n        a = Integer.parseInt(sc.next());\\n        b = Integer.parseInt(sc.next());\\n        sc.close();\\n\\n        double ataxfreemax, ataxfreemin; \\n        double btaxfreemax, btaxfreemin;\\n\\n        ataxfreemax = (a + 1) / 0.08;\\n        ataxfreemin = a / 0.08;\\n        btaxfreemax = (b + 1) / 0.1;\\n        btaxfreemin = b / 0.1;\\n\\n        int amax, amin;\\n        if (Math.floor(ataxfreemax) == ataxfreemax){\\n            amax = (int) ataxfreemax - 1;\\n        }\\n        else {\\n            amax = (int) ataxfreemax;\\n        }\\n\\n        if(Math.ceil(ataxfreemin) == ataxfreemin){\\n            amin = (int) ataxfreemin;\\n        }\\n        else{\\n            amin = (int) ataxfreemin + 1;\\n        }\\n\\n        int bmax, bmin;\\n        if (Math.floor(btaxfreemax) == btaxfreemax){\\n            bmax = (int) btaxfreemax - 1;\\n        }\\n        else {\\n            bmax = (int) btaxfreemax;\\n        }\\n\\n        if(Math.ceil(btaxfreemin) == btaxfreemin){\\n            bmin = (int) btaxfreemin;\\n        }\\n        else{\\n            bmin = (int) btaxfreemin + 1;\\n        }\\n\\n        if(amax>bmax && bmax>amin){\\n            if(bmin>amin){\\n                System.out.println(bmin);\\n            }\\n            else{\\n                System.out.println(amin);\\n            }\\n        }\\n        else if(amax>bmin && bmin>amin){\\n            System.out.println(bmin);\\n        }\\n        else if(bmax>amax && amax>bmin){\\n            if(amin>bmin){\\n                System.out.println(amin);\\n            }\\n            else{\\n                System.out.println(bmin);\\n            }\\n        }\\n        else if(bmax>amin && amin>bmin){\\n            System.out.println(amin);\\n        }\\n        else{\\n            System.out.println(\"-1\");\\n        }\\n    }\\n}", "target": "121", "substitutes": {"a": ["f", "sta", "ama", "am", "one", "ga", "A", "ab", "ad", "m", "aka", "ai", "n", "ac", "na", "aw", "da", "area", "ca", "c", "aa", "asa", "d", "y", "aj", "va", "u", "e", "af", "aaa", "api", "auto", "sa", "as", "ia", "x", "p", "w", "au", "ak", "mA", "angle", "i", "art", "an", "ada", "ae", "alpha", "la", "any"], "b": ["f", "bf", "pb", "h", "br", "hide", "hub", "base", "sb", "ab", "db", "bas", "binary", "bc", "bur", "n", "l", "B", "wb", "ob", "ba", "v", "fb", "emb", "c", "bar", "aa", "d", "y", "abc", "mb", "xb", "batch", "u", "e", "o", "j", "lb", "pa", "bb", "s", "bi", "p", "x", "boot", "nb", "ib", "bs", "abb", "beta", "i", "body", "lib", "eb", "bis", "r"], "sc": ["parse", "ner", "ch", "osc", "cont", "mc", " Sc", "nc", "sche", "sv", "cv", "cc", "bc", "esc", "pc", "si", "ss", "scope", "anc", "ca", "SC", "se", "c", "scan", "cs", "sw", "uc", "cus", "cl", "cm", "Sc", "system", "sq", "sa", "sci", "cr", "ocr", "sf", "sync", "rc", "cer", "enc", "sr", "soc", "sp", "ci", " SC", "sch", "sh", "ec", "sem", "lc", " scr"], "ataxfreemax": ["ataxfreemac", "ataxfreemiex", "ataxfreemiace", "ataxfreeemac", "ataxfreiemass", "ataxfreemass", "ataxfreinemake", "ataxfreinemass", "ataxfreamack", "ataxfreymack", "ataxfreymex", "ataxfreymax", "ataxfortemase", "ataxfreeymac", "ataxfreymake", "ataxfreeymace", "ataxFreemanass", "ataxfreelake", "ataxfortemax", "ataxfreeemex", "ataxfreamax", "ataxfortemake", "ataxfreiemap", "ataxfreemanac", "ataxfreeemox", "ataxfreamase", "ataxfreelad", "ataxfortelase", "ataxfreeemace", "ataxfreeymex", "ataxfreeminase", "ataxfreemex", "ataxfreemanake", "ataxfreemad", "ataxfrehemake", "ataxfreelase", "ataxfreamaz", "ataxfreeminac", "ataxfreeymax", "ataxfreemanack", "ataxFreemass", "ataxfreemap", "ataxfreiemax", "ataxfreymase", "ataxfreemase", "ataxfortelad", "ataxfreeymox", "ataxfreeemase", "ataxfreymaz", "ataxFreemap", "ataxfreimax", "ataxfortelake", "ataxfrehemac", "ataxFreemanake", "ataxfreemiake", "ataxfreemanox", "ataxfreemox", "ataxfreemanase", "ataxfreinemax", "ataxfreimase", "ataxfreymace", "ataxfreemanass", "ataxfreemiax", "ataxfreiemex", "ataxfreeminax", "ataxfreemake", "ataxfreemanap", "ataxFreemanap", "ataxfortemad", "ataxfreemaz", "ataxfreemack", "ataxfreeminake", "ataxfreymox", "ataxFreemake", "ataxfortelax", "ataxfreimake", "ataxfrehemox", "ataxfreemanax", "ataxfreeymase", "ataxfreiemace", "ataxfreeymake", "ataxfreemace", "ataxfreemanaz", "ataxfreinemap", "ataxfreemanad", "ataxFreemanax", "ataxfreeemax", "ataxfrehemax", "ataxfreeemake", "ataxFreemax", "ataxfreymac", "ataxfreiemake", "ataxfreelax", "ataxfreimad"], "ataxfreemin": ["ataxfeelin", "ataxfremargin", "atakfineme", "ataxfreeme", "ataxfinemet", "atakfreeme", "atoxfacemin", "atacFreemen", "ataxfortemen", "ataxfeemin", "atacticfineemin", "ataxfortemin", "ataxfineemin", "atacticfreilege", "ataxfoldeme", "ataxFreemon", "atakfinenna", "atacticfreemer", "atacticfreemin", "atacticfreeme", "ataxFreemet", "ataxfacemin", "ataxfuneter", "atakfremargin", "ataxfreeeme", "ataxfoldemin", "ataxfreeemon", "ataxfineemer", "ataxfinenna", "ataxfoldemer", "ataxFreeemin", "ataxfaceman", "ataxfreenna", "ataxFreoton", "ataxfreilege", "ataxfineilege", "ataxfinemin", "ataxFreeeter", "ataxlifemin", "atoxfreemon", "ataxfacemon", "ataxfreemed", "ataxFreemin", "ataxfeemen", "atacticfineemet", "atoxfreeme", "ataxlifmargin", "ataxFreeter", "ataxFreeemed", "ataxfreeter", "ataxFreeman", "ataxbasmargin", "atacticfreemet", "ataxfreeman", "atakfinemin", "ataxfineme", "atacFreelin", "ataxfreemon", "atacFreemed", "ataxFreeme", "ataxFreeeme", "ataxforteme", "atacfreeme", "ataxlifenna", "ataxfinilege", "ataxfortelin", "atoxfaceman", "atacFreeter", "ataxFreemer", "ataxfineeme", "atakfreenna", "ataxfreeemin", "ataxfineoton", "atacticfineoton", "atacfreemed", "atacFreemin", "atacticfineemer", "ataxFreemed", "ataxfoldoton", "ataxfeeme", "ataxfreelin", "atoxfreemin", "atakfreemin", "ataxFreemen", "atoxfaceme", "ataxFreilege", "ataxlifeme", "atacfreemin", "ataxbasemin", "ataxfreeeman", "atacfreemen", "ataxfaceme", "ataxbaseme", "atakfinmargin", "ataxfunemed", "atacticfreoton", "ataxfunemin", "ataxFreelin", "ataxbasenna", "ataxfreemer", "ataxfuneme", "ataxfineemet", "ataxfinmargin", "atacticfineilege", "atoxfacemon", "ataxfreemet", "atacfreelin", "atoxfreeman", "atacticfineeme", "ataxfreemen", "ataxfreoton", "atacfreeter", "atacFreeme"], "btaxfreemax": ["btaxfineemax", "btaxfreminac", "btaxfreomack", "btaxfreemimax", "btaxfreemanake", "btaxfreemetac", "btaxfracelaxy", "btaxfreemark", "btaxfreemetass", "btaxfreemetaz", "btaxfreeminac", "btaxfreymace", "btaxfreelaxy", "btaxfreemake", "btaxfreymap", "btaxfreemack", "btaxfreeminax", "btaxfineemagic", "btaxfreminake", "btaxfreiemaz", "btaxFreemanap", "btaxfreemass", "btaxfreemeack", "btaxFreemax", "btaxfreiemac", "btaxFreemanmax", "btaxfreemenark", "btaxfracelax", "btaxfreemanaxy", "btaxfreemetmax", "btaxFreemanax", "btaxfreemenack", "btaxfreymagic", "btaxfreemanagic", "btaxfremass", "btaxfreemaz", "btaxfreeminake", "btaxfreiemace", "btaxfineemenagic", "btaxfreelap", "btaxfineemark", "btaxfracemax", "btaxfreminax", "btaxFreemmax", "btaxfreemap", "btaxfreymaz", "btaxfreymac", "btaxfreemeagic", "btaxfreminass", "btaxfreemagic", "btaxfreemiaz", "btaxfreemaxy", "btaxFreemanace", "btaxFreemap", "btaxfineemenax", "btaxfreemiax", "btaxfremake", "btaxfreemeax", "btaxfracemap", "btaxfreemetap", "btaxFreemace", "btaxfreemanaz", "btaxfremax", "btaxfreomagic", "btaxFreemaxy", "btaxfreemace", "btaxfreemmax", "btaxfreemanmax", "btaxfracelap", "btaxfineemenark", "btaxfreemeap", "btaxfreymark", "btaxfreelax", "btaxfremac", "btaxfreomark", "btaxFreemanac", "btaxfreemeaxy", "btaxfracemark", "btaxfineemenack", "btaxFreemaz", "btaxfreemac", "btaxfreemenax", "btaxFreemanaz", "btaxfreelark", "btaxfineemack", "btaxfreemeark", "btaxfreemanace", "btaxfreomax", "btaxfracelark", "btaxfreemiap", "btaxfreymax", "btaxfreiemax", "btaxFreemac", "btaxFreemanagic", "btaxFreemagic", "btaxfracemaxy", "btaxfreemanac", "btaxfreemanap", "btaxfreemenagic", "btaxfreeminass", "btaxfreemetax", "btaxfreemetake", "btaxfreemanass", "btaxfreymaxy", "btaxfreemanax", "btaxFreemanaxy"], "btaxfreemin": ["btaxfreemi", "btaxfreencer", "btakfreeemin", "btacFreeter", "btackfreemi", "btaxFreeter", "btaxfreeme", "btaitfuneme", "btaxfuneworld", "btaxfremi", "btaxfreeworld", "btaxFreem", "btaxfineme", "btaxfreeeman", "btaxfunemin", "btaxfreman", "btaxfuneme", "btacfreelin", "btaxfinelin", "btaxfineman", "btacfreemin", "btacFreencer", "btackfreeeme", "btackfreeeman", "btaxfremin", "btakfreeme", "btaitfreemin", "btaxFreemi", "btacFreemi", "btaxfoldemin", "btaxfreeeter", "btaxfreelin", "btacfreeme", "btaxfreeemi", "btaxfinemi", "btacFreelin", "btackfreeemin", "btaxfreem", "btaxfeect", "btaxfinemin", "btacFreemin", "btaitfreect", "btacfreemi", "btakfreeman", "btakfreeeme", "btaxFreeman", "btaxfeemi", "btacFreem", "btacfreeman", "btakfreeemi", "btaxfinem", "btaxfreect", "btaxfoldeme", "btaxFreeworld", "btaxfeencer", "btaxFreencer", "btaxfreme", "btaxfeemin", "btaxcreemin", "btaxcreelin", "btacfreem", "btaxcreeman", "btaxfoldemi", "btaxfeeworld", "btaxfreeman", "btaxfunect", "btaxFreemin", "btackfreeme", "btackfreeemi", "btakfreemi", "btaxfreeeme", "btaxfreter", "btakfreeeman", "btaxcreem", "btaxFreeme", "btaxFreelin", "btaitfuneworld", "btackfreeman", "btakfreemin", "btaxFreect", "btaitfunect", "btaxfreeter", "btaitfreeworld", "btaxfoldencer", "btacFreeman", "btacFreeme", "btaitfreeme", "btaxfreeemin", "btackfreemin", "btacfreencer", "btacfreeter", "btaitfunemin", "btaxfeeme"], "amax": ["asmark", "umax", "amace", "ajaj", " amack", "armax", "amait", "ramax", "umaxy", "ammaxy", "amaze", "ajagic", "iamaj", "armaj", "iamait", "amake", "annox", "asmake", "armox", "armagic", " amox", "ramait", "jamac", "armaxy", "asmaj", "ramaj", "ramak", "jamaj", "umake", "jamax", "asmax", "ramace", " amac", "armad", "ramake", "amody", "annax", "amack", "ammody", "iamaxy", "amac", "hamaxy", " amaj", "armack", "asmagic", "ajark", "ramaxy", "ajace", "armody", "ramaze", " amody", "amaxy", "hamace", "amox", "hamax", "hamaze", "amaj", "iamax", " amaxy", "ajaze", "umaj", "ajaxy", " amad", "ammax", "annad", "amad", "armait", "amark", "annac", "armac", "jamaxy", "armark", "ajax", "asmak", "amagic", "umak", "umac", "ammack", "amak"], "amin": ["amination", "mc", "am", "rg", "amy", "in", "large", "femin", "uc", "anan", "inc", "paren", "Adam", "axis", "aim", "ak", "aco", "filename", "average", "arin", "cos", "gin", "abin", "amount", "auc", "nil", "don", "act", "ab", "ai", "anc", "min", "iron", "mia", "isin", "addin", "mic", "another", "atan", "amina", "cas", "pha", "sin", "asin", "iam", "largest", "uma", "alpha", "atin", "asm", "addon", "man", "asc", "xff", "non", "ac", "nam", "aa", "amen", "abc", "kin", "rock", "rin", "avan", "mn", "gall", "acon", "gam", "omin", "ana", "emin", "lam", "mis", "amine", "abl", "nin", "han", "ayn", "opal", "bin", "acc", "umin", "aine", "x", "aug", "wyn", "aman", "pai", "ascal"], "bmax": ["btstar", "bbmax", "lbsize", "bstar", "lbtotal", "bbca", "btmax", "bbcache", "bsize", "nbmax", "bbmin", "btotal", "bbcycle", "abax", "binkey", "binmax", "bbkey", "bhmax", "bttotal", "bhcycle", "nbcomb", "bhmin", " bsize", "bax", "btkey", "bbaz", "bcache", "abmax", "bcycle", "abmin", "lbca", "binmin", "nbca", "bcomb", "nbmin", "btcomb", "baz", "bca", "bbtotal", "nbtotal", "bhstar", "blast", " baz", "abcache", " bax", "btcycle", "lbmax", "btcache", "lbmin", "lbaz", "bbcomb", "bkey", "bincache", "abca", "lbcache", "bbax", "btmin", "bblast", "ablast", " blast", "bbsize", "bbstar"], "bmin": ["bbstat", "bpri", "bsec", "fbmin", "bbmax", " bpri", "bbmiss", " binit", "bbmin", "sbsmall", " bclean", " bcall", "dbmiss", " brupt", "btsec", "lbmins", "bbinit", " b0", "fbmax", "brupt", " bmins", " bmit", "lbmin", "bbsmall", "bbfirst", "btshift", "bbshift", "sbmin", "bmini", "bsmall", "Bmin", "pmin", "bbmins", "httpmin", "lbclean", "bhmin", "bhmins", "Bmax", "lmax", "lpri", "abmax", " bmain", "bfirst", "Bmini", "bhsize", "dbmin", "lbmax", " bmiss", "bbmain", "bbkeep", "bhkeep", "btmin", "bbsize", "bb0", "bhclean", "httpsmall", "lmin", "httpmax", "bsize", "tmin", "lbmini", "bhmax", "bmiss", " bstat", " bsize", "bbpri", "abmin", "bbsec", "abstat", "bkeep", "pmax", "tmain", "sbmax", "bhshift", "bbrupt", "abmini", "lbmain", "fbmini", "lbsmall", "bhmit", " bmini", "tmax", "bshift", "btmax", "bmain", "bmit", "pinit", "bhsec", "bmins", "lbinit", "bcall", "bbcall", "lbfirst", "dbinit", "bstat", "bbmini", "binit", " bsmall", "b0", "bhmini", "bbmit", "httprupt", "dbmax", "fb0", "sbfirst", "Bmain", "tmini", "bclean", "pmain", " bkeep", "lcall"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint[] A, B;\\n\t\tint min,max;\\n\t\tA = new int[2];\\n\t\tB = new int[2];\\n\t\tfor(int i = 0; i < 2; i++) {\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\tfor(int i = 0; i < 2; i++) {\\n\t\t\tB[i] = sc.nextInt();\\n\t\t}\\n\\n\t\tif(A[1] <= B[0] || B[1] <= A[0]) {\\n\t\t\tSystem.out.println(0);\\n\t\t\tSystem.exit(0);\\n\t\t}\\n\\n\t\tif(A[0] < B[0]) {\\n\t\t\tmin = B[0];\\n\t\t}else {\\n\t\t\tmin = A[0];\\n\t\t}\\n\\n\t\tif(A[1] < B[1]) {\\n\t\t\tmax = A[1];\\n\t\t}else {\\n\t\t\tmax = B[1];\\n\t\t}\\n\\n\t\tSystem.out.println(max - min);\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "47", "substitutes": {"sc": ["f", "ner", "ch", "osc", "cont", " Sc", "nc", "out", "sb", "sche", "cv", "cc", "bc", "esc", "pc", "l", "cam", "ss", "server", "scope", "gc", "gram", "anc", "cus", "SC", "se", "c", "scan", "ctx", "cl", "uc", "cs", "screen", "com", "sw", "Sc", "system", "sq", "dc", "sub", "con", "sci", "cr", "src", "sf", "sync", "rc", "cer", "sr", "soc", "sp", " SC", "sch", "sh", "tc", "sem", "lib", "lc", " scr"], "A": ["App", "AW", "If", "G", "K", "I", "L", "AA", "Java", "Major", "PA", "X", "API", "TA", "AL", "P", "This", "AD", "H", "HA", "AST", "AV", "Any", "S", "Y", "AB", "As", "IA", "E", "Australia", "GA", "Ab", "AP", "AI", "W", "Ma", "MA", "F", "Area", "BA", "Bar", "At", "CA", "AF", "AU", "C", "The", "AC", "U", "T", "Ar", "Alpha", "N", "AM", "M", "NA", "AR", "LA", "Am", "mA", "Alt", "AMI", "Auth", "Ac", "Array", "O", "a", "RA"], "B": ["Other", "Both", "QB", "G", "I", "BP", "Bi", "L", "BB", "BD", "File", "DB", "CB", "BF", "BY", "API", "X", "EB", "P", "GB", "Q", "Beta", "Bar", "Y", "BS", "AB", "UB", "E", "D", "BE", "AP", "PB", "TB", "W", "MB", "BI", "LB", "BER", "J", "BA", "BL", "F", "SB", "NB", "b", "Builder", "FB", "Bot", "T", "C", "RB", "WB", "U", "Big", "Be", "M", "Part", "BR", "Bs", "Band", "IB", "BC", "Base", "Bu", "O", "OB"], "min": ["stat", "val", "sort", "name", "none", "mini", "miss", "dim", "old", "version", "in", "me", "id", "limit", "m", "index", "key", "when", "mine", "default", "unit", " Min", "n", "mid", "pre", "sum", "diff", "sign", "mins", "type", "Mini", "d", "pos", "small", "Min", "next", "cm", "current", "p", "minimum", "x", "all", "start", "len", "sol", "partial", "part", "mean", "size", "amin", "init", "pri", "from", "skip", "scale", "a", "MIN", "span"], "max": ["value", "div", "name", "range", "out", "act", "no", "az", "X", "id", "key", "limit", "count", "index", "default", "step", "except", "total", "patch", "height", "est", "pop", "last", "sum", "diff", "end", "conf", "ca", "con", "first", "can", "mad", "ax", "depth", "p", "mod", "x", "w", "res", "start", "Max", "head", "MAX", "view", "with", "part", "k", "size", "big", "pad", "cur", "right", "alpha", "rank", "parent", "scale", "force"], "i": ["f", "li", "fi", "h", "name", "I", "mini", "di", "in", "ri", "ni", "gi", "id", "key", "index", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "it", "c", "ie", "d", "y", "uri", "source", "u", "pi", "e", "o", "j", "info", "ii", "qi", "p", "ti", "b", "x", "oi", "hi", "ini", "start", "yi", "ci", "k", "iu", "ip", "xi", "init", "chi", "multi", "bi", "a"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        \\n        Scanner sc = new Scanner(System.in);\\n\\n        int K = sc.nextInt();\\n        int sum = 0;\\n\\n        for(int i=1; i<=K; i++){\\n            for(int j=1; j<=K; j++){\\n                int a = i;\\n                int b = j;\\n                int kou = 0;\\n                for(int x=0; x<10; x++){\\n                    int max = Math.max(a, b);\\n                    int min = Math.min(a, b);\\n                    if(max%min==0 && x==0){\\n                        kou = min;\\n                        break;\\n                    }\\n                    a = min;\\n                    b = max % min;\\n                    if(a%b==0){\\n                        kou = b;\\n                        break;\\n                    }\\n                }\\n                for(int k=1; k<=K; k++){\\n                    int c = k;\\n                    int d = kou;\\n                    for(int x=0; x<10; x++){\\n                        int max = Math.max(c, d);\\n                        int min = Math.min(c, d);\\n                        if(max%min==0 && x==0){\\n                            d = min;\\n                            sum += d;\\n                            break;\\n                        }\\n                        c = min;\\n                        d = max % min;\\n                        if(c%d==0){\\n                            sum += d;\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        System.out.println(sum);\\n    }\\n}", "target": "6", "substitutes": {"sc": ["ner", "osc", "ch", "mc", " Sc", "nc", "iss", "cc", "bc", "esc", "asc", "pc", "ss", "sec", "anc", "g", "ca", "SC", "se", "scan", "uc", "sw", "cs", "cl", "acc", "Sc", "system", "sq", "sub", "sci", "cr", "ocr", "rc", "sp", "ci", " SC", "sch", "sh", "cur", "lc", " scr", "r"], "K": ["Mask", "G", "I", "L", "Z", "PK", "A", "SK", "X", "KR", "P", "Q", "HK", "H", "KS", "S", "Y", "B", "E", "D", "Kent", "Work", "J", "unk", "F", "V", "Power", "T", "C", "KI", "U", "M", "N", "Max", "Key", "Ku", "O"], "sum": ["parse", "sim", "comment", "sort", "div", "cal", "ul", "miss", "am", "summary", "co", "out", "mass", "cum", "count", "key", "index", "cost", "si", "total", "ss", "ass", "gram", "up", "diff", "sign", "conf", "style", "cat", "num", "um", "use", "dot", "weight", "add", "cache", "info", "pack", "fat", "error", "state", "start", "sol", "cu", "mem", "fill", "mean", "size", "spread", "average", "sh", "cur", "loss", "alpha", "span", "scale", "vol", "net", "Sum"], "i": ["f", "li", "I", "vi", "is", "di", "in", "ik", "ni", "id", "key", "m", "index", "ai", "ji", "n", "si", "l", "ui", "v", "ie", "y", "u", "e", "o", "pi", "ii", "p", "hi", "ind", "ini", "q", "z", "ci", "mi", "iu", "ip", "xi", "init", "ix", "ki", "bi"], "j": ["f", "li", "ch", "jj", "jo", "jp", "key", "ji", "n", "l", "g", "v", "t", "ja", "it", "ie", "y", "aj", "ax", "u", "e", "o", "J", "ii", "dy", "p", "w", "q", "ak", "z", "ij", "r"], "a": ["f", "am", "A", "ab", "ad", "oa", "ma", "ai", "n", "ac", "na", "ba", "da", "ca", "area", "aa", "asa", "y", "ar", "aj", "ax", "va", "u", "e", "af", "api", "aaa", "fa", "p", "as", "sa", "ia", "w", "au", "ak", "z", "art", "an", "ae", "ada", "alpha", "la"], "b": ["f", "bf", "pb", "h", "base", "bh", "sb", "ab", "db", "m", "bc", "n", "l", "B", "ob", "ba", "v", "fb", "ca", "g", "aa", "area", "bar", "y", "rb", "u", "e", "o", "lb", "aaa", "bb", "pa", "s", "fa", "p", "bi", "bis", "boot", "nb", "cb", "z", "bs", "part", "be", "body", "eb", "r"], "kou": ["kouf", " kouf", "workoup", "akoul", "Koo", "skou", "workouf", "Koul", "tkoo", "okouf", "tkoul", "kour", "skour", "koun", "workou", "akou", "koo", " koo", " koup", "skoo", "akoo", "koul", " koul", "skoup", "Kou", "tkou", " koun", "okoup", "akour", " kour", "tkoun", "workour", "okour", "koup", "skouf", "Koun", "skoul", "okou"], "x": ["f", "xy", "xc", "cross", "time", "h", "on", "orig", "plus", "data", "is", "xx", "xe", "one", "no", "X", "wx", "id", "key", "m", "index", "code", "n", "l", "na", "g", "v", "t", "tx", "cl", "y", "dx", "fx", "ax", "xes", "ex", "u", "e", "o", "ady", "width", "xs", "s", "p", "w", "xxx", "pe", "rx", "z", "px", "wa", "xa", "work", "xi", "ix", "xp", "any", "q", "r"], "max": ["plus", "co", "no", "count", "code", "when", "default", "total", "patch", "rod", "ca", "conf", "form", "cl", "ax", "power", "depth", "head", "cent", "size", "average", "now", "scale", "nd", "h", "act", "est", "diff", "cat", "can", "cycle", "ra", "u", "cor", "mod", "cr", "MAX", "largest", "alpha", "range", "az", "ad", "core", "id", "last", "up", "end", "first", "ce", "mad", "Max", "major", "from", "std", "q", "div", "base", "edge", "cle", "n", "da", "only", "rest", "dec", "w", "pad", "right", "rank"], "min": ["f", "value", "name", "mini", "miss", "am", "version", "in", "me", "key", "m", "default", "block", "ss", "rel", "area", "mins", "ca", "Mini", "mix", "ax", "un", "ak", "size", "average", "now", "skip", "sign", "span", "none", "shift", "don", "ab", "ai", "unit", "pre", "na", "diff", "bar", "small", "mer", "width", "ra", "field", "mod", "sin", "z", "part", "ix", "bi", "MIN", "sort", "mon", "range", "ad", "core", "id", "low", "mid", "step", "just", "close", "left", "last", "aa", "first", "pos", "Min", "pa", "s", "p", "sa", "all", "slice", "spot", "au", "po", "sol", "mean", "amin", "an", "ana", "div", "dim", "emin", "base", "oa", "change", "n", "ba", "da", "only", "rest", "model", "dec", "minimum", "w", "start", "partial", "vert", "body", "lower", "el", "r"], "k": ["f", "ch", "uk", "ko", "ik", "ad", "ek", "id", "key", "m", "kn", "n", "ck", "ac", "g", "v", "ok", "mk", "y", "u", "e", "unk", "p", "w", "ak", "sk", "ka", "ky", "z", "ke", "ki", "km", "dk", "q", "kw"], "c": ["f", "cd", "h", "ch", "cf", "co", "ad", "cy", "m", "code", "cc", "n", "l", "ac", "g", "v", "ca", "con", "cs", "cat", "y", "ce", "u", "e", "s", "dc", "p", "C", "w", "cu", "col", "z", "ci", "ct", "cp", "lc", "q", "r"], "d": ["f", "cd", "nd", "h", "sd", "di", "dt", "db", "ad", "id", "m", "n", "l", "g", "v", "da", "t", "dat", "D", "dad", "y", "dx", "dh", "draw", "u", "e", "o", "did", "ld", "dy", "s", "dc", "p", "sync", "w", "dd", "md", "z", "bd", "dom", "ds", "q", "od"]}}
{"code": "import java.io.BufferedInputStream;\\nimport java.io.BufferedOutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    private static long n;\\n\\n    // 15:41-\\n    public static void main(String[] args) throws Exception {\\n        try (BufferedInputStream in = new BufferedInputStream(System.in);\\n             PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out))) {\\n\\n            Scanner sc = new Scanner(in);\\n\\n            String s = sc.next();\\n\\n            int i = 0;\\n            int ml = 0;\\n            while (i < s.length()) {\\n                while (i < s.length() && !b(s.charAt(i))) i++;\\n                int start = i;\\n                while (i < s.length() && b(s.charAt(i))) ml = Math.max(ml, ++i - start);\\n            }\\n\\n            out.println(ml);\\n        }\\n    }\\n\\n    private static boolean b(char c) {\\n        switch (c) {\\n            case 'A':\\n            case 'C':\\n            case 'G':\\n            case 'T':\\n                return true;\\n            default:\\n                return false;\\n        }\\n    }\\n}\\n", "target": "100", "substitutes": {"n": ["nan", "f", "ne", " e", "no", "log", "l", "g", "t", "rn", "ng", "sn", "dn", "s", "b", "ln", "ns", "nl", "nb", "en", "N", "nr", "line", " N", "nor", "nn", "r"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\nimport java.math.BigInteger;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t// \u5165\u529b\\n\t\tint n = sc.nextInt();\\n\t\t\\n\t\t// \u8a08\u7b97\\n\t\tString result = \"No\";\\n\t\tfor(int i = 0; i <= 100/4; i++){\\n\t\t    for(int j = 0; j <= 100/7; j++){\\n\t\t        if(n == 4*i + 7*j){\\n\t\t            result = \"Yes\";\\n\t\t            System.out.println(result);\\n\t\t            return;\\n\t\t        }\\n\t\t    }\\n\t\t}\\n\t\t\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(result);\\n\t}\\n}\\n", "target": "172", "substitutes": {"sc": [" scans", " pars", " Sc", "ann", " arr", "sb", " sm", " sl", "ss", " ans", "gram", " subp", "SC", " rc", "scan", "Sc", "sq", "sa", "sci", "sf", " res", "sp", " SC", " ar", " sp", "an", " ser", " scr"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        long days = 500000000000000L;\\n        Scanner sc = new Scanner(System.in);\\n        String S = sc.next();\\n        long K = sc.nextLong();\\n        long temp = 0;\\n\\n        for (int i = 0; i<S.length(); i++) {\\n            long target = S.charAt(i) - '0';\\n            //System.out.println(target);\\n\\n            temp += Math.pow(target, days);\\n\\n            if (temp >= K) {\\n                System.out.println(target);\\n              \treturn;\\n            }\\n        }\\n    }\\n}\\n", "target": "38", "substitutes": {"days": ["G", "DS", "Z", " D", "\u751f", "SK", "id", "DAY", "H", "games", "E", "D", "model", "d", "Days", " C", "J", "Day", "date", " day", "C", "M", " G", "set", "delay", "get", "day", "dk"], "sc": ["osc", "ner", "ch", " Sc", "nc", "sb", "sche", "core", "search", "cv", "esc", "bc", "cc", "asc", "pc", "si", "exec", "ss", "server", "anc", "scope", "SC", "se", "c", "scan", "cs", "cl", "uc", "sw", "ctx", "zero", "cor", "Sc", "system", "sq", "sub", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "sp", " SC", "sch", "sh", "ec", "cur", "sem", "ser", "lc"], "S": ["G", "SA", "I", "Session", "L", "Si", "Source", "IDS", "A", "SK", " s", "INS", "SO", "ITS", "P", "NS", "SN", "Sample", "ss", "RS", "SC", "ST", "Service", "VS", "FS", "D", "DES", "SL", "Su", "F", "V", "s", "IS", "C", "T", "SS", "U", "SE", "N", "M", "SU", "SR", "Part", "OSS", "SP", "SM", "SI"], "K": ["G", "I", "L", "Z", "A", "X", " k", "P", "Q", "kernel", "H", "B", "Y", "E", "D", "DH", "W", "J", "F", "V", "T", "C", "N", "M", "k", " N", "O"], "temp": ["term", " T", "Target", "unit", "KS", "total", "model", "num", "max", " C", "output", "weight", "W", "Temp", " H", "iter", "T", " W", "w", " P", "k", "test", "Test", "Total", "get", "distance"], "i": ["f", "li", "fi", "I", "mini", "di", "in", "ri", "id", "gi", "m", "index", "ai", "io", "ji", "n", "si", "ori", "ui", "mu", "v", "c", "d", "uli", "zi", "uri", "u", "e", "o", "j", "pi", "ii", "qi", "field", "p", "ti", "hi", "x", "oi", "abi", "ini", "start", "z", "ci", "k", "ip", "xi", "ix", "chi", "multi", "bi"], "target": [" T", " Target", " NK", "key", "Target", "P", "unit", "step", "total", "E", "result", "chain", " C", "weight", "j", "F", "offset", "p", "T", " P", "N", "M", " Z", "test", " t", "NT", "distance"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint k = sc.nextInt();\\n\t\tArrayList<Integer> ans = new ArrayList<>();\\n\t\tfor(int i=1 ; i <= 100 ; i++) {\\n\t\t\tif(a%i == 0 && b%i ==0) {\\n\t\t\t\tans.add(i);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans.get(ans.size()-k));\\n\t}\\n}\\n", "target": "134", "substitutes": {"sc": ["parse", "ner", "ch", "cont", "osc", " Sc", "nc", "sb", "sche", "cv", "esc", "cc", "bc", "asc", "pc", "exec", "ss", "na", "anc", "scope", "ca", "SC", "c", "scan", "cs", "uc", "sw", "se", "cl", "cus", "ctx", "acc", "cor", "Sc", "system", "sq", "sci", "cr", "src", "rc", "cer", "sr", "soc", "sp", "ci", " SC", "sch", "cur", "sem", "lc"], "a": ["f", "h", "ama", "base", "am", "A", "oa", "ab", "m", "index", "ai", "n", "l", "ac", "ba", "da", "c", "aa", "asa", "d", "y", "va", "pi", "u", "o", "e", "pa", "s", "p", "sa", "x", "as", "ia", "w", "ka", "ae", "alpha", "la"], "b": ["f", "h", "base", "sb", "ab", "db", "n", "l", "B", "g", "v", "ba", "c", "aa", "d", "y", "pa", "u", "e", "o", "j", "lb", "bb", "s", "p", "x", "nb", "bs", "r"], "k": ["f", "h", "K", "ik", "m", "kick", "n", "g", "v", "end", "c", "d", "y", "u", "e", "o", "j", "s", "p", "x", "kw", "w", "kk", "ak", "sk", "z", "ks", "ki", "ke", "km", "q", "r"], "ans": ["ations", "ANS", "ats", "ann", "arts", "aned", "asters", "inas", "anas", "leans", "ons", "amps", "AN", "annels", "na", "unks", "aos", "ents", "cs", "lan", "ls", "ions", "ids", "nas", "aus", "idents", "anners", "offs", "as", "acers", "ns", "atan", "opens", "artifacts", "ants", "vers", "sk", "acs", "aks", "ins", "ks", "ana", "ras", "an", "ians", "ars", "ams", "ips"], "i": ["f", "li", "fi", "I", "clip", "di", "iv", "ri", "ni", "cli", "gi", "id", "index", "ai", "io", "ji", "si", "ori", "ui", "mu", "phi", "v", "it", "c", "ie", "zi", "uri", "u", "e", "pi", "j", "o", "api", "ii", "js", "qi", "info", "ti", "hi", "x", "oi", "pass", "abi", "start", "z", "ci", "iu", "ip", "xi", "init", "chi", "multi", "ix", "bi", "lc"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        Set<String> set = new HashSet<>();\\n        String blank = sc.nextLine();\\n        for (int i=0; i<n; i++) {\\n          String str = sc.nextLine();\\n          set.add(str);\\n        }\\n        System.out.println(set.size());\\n    }\\n}\\n", "target": "98", "substitutes": {"sc": ["ner", "ch", "osc", "cont", "nc", "st", "console", "sb", "sche", "cle", "core", "search", "esc", "bc", "cc", "asc", "pc", "exec", "ss", "sec", "server", "scope", "anc", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "screen", "Sc", "system", "sq", "sa", "sub", "sci", "cr", "src", "sync", "rc", "soc", "sp", "sch", "sh", "parser", "cur", "ser", "lc"], "n": ["f", "ner", "nc", "in", "nt", "m", "number", "l", "t", "c", "num", "d", "network", "sn", "e", "o", "j", "np", "s", "dn", "p", "ot", "b", "x", "ln", "ns", "nb", "en", "w", "N", "z", "k", "conn", "init", "nn", "net"], "set": ["store", "map", "parse", "setup", "list", "sort", "name", "base", "st", "out", "match", "group", "id", "keep", "key", "index", "change", "reset", "null", "SET", "server", "setting", "sum", "se", "type", "settings", "use", "pos", "add", "cache", "et", "system", "sets", "sync", "en", "hash", "start", "clear", "size", "init", "get", "check", "dict", "seen", "sign"], "blank": ["content", "obj", "br", " cmd", "name", "out", "prefix", " result", "lines", "text", " comment", " ans", " buf", "result", "doc", " raw", "Line", " xml", " msg", " banner", " doc", "b", "STR", " lines", "msg", " r", " buffer", "line", " sql", " content"], "i": ["f", "li", "fi", "I", "is", "di", "in", "ri", "ni", "err", "id", "gi", "index", "ai", "io", "ji", "si", "ui", "mu", "phi", "v", "it", "adi", "num", "y", "uri", "zi", "u", "pi", "j", "ii", "qi", "p", "ti", "x", "oi", "slice", "abi", "ini", "ci", "mi", "ip", "xi", "chi", "multi", "bi"], "str": ["f", "obj", "tr", "br", "ner", "list", "name", "string", "data", "stri", "st", "err", "id", "fr", "pr", "arr", "text", "g", "t", "c", "style", "d", "er", "entry", "kr", "spec", "pos", "j", "iter", "p", "b", "STR", "x", "strip", "pass", "cr", "sr", "char", "sl", "z", "sp", "line", "coll", "Str", "r"]}}
{"code": "import java.io.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint[][][] houses = new int[4][3][10];\\n\t\tint n = Integer.parseInt(in.readLine());\\n\t\tfor (int i = 0; i < n; i += 1) {\\n\t\t\tString[] info = in.readLine().split(\" \");\\n\t\t\tint b = Integer.parseInt(info[0]);\\n\t\t\tint f = Integer.parseInt(info[1]);\\n\t\t\tint r = Integer.parseInt(info[2]);\\n\t\t\tint v = Integer.parseInt(info[3]);\\n\t\t\thouses[b - 1][f - 1][r - 1] += v;\\n\t\t}\\n\t\tfor (int x = 0; x < 4; x += 1) {\\n\t\t\tfor (int y = 0; y < 3; y += 1) {\\n\t\t\t\tfor (int z = 0; z < 10; z += 1) {\\n\t\t\t\t\tsb.append(\" \");\\n\t\t\t\t\tsb.append(houses[x][y][z]);\\n\t\t\t\t}\\n\t\t\t\tsb.append(System.getProperty(\"line.separator\"));\\n\t\t\t}\\n\t\t\tif (x != 3) {\\n\t\t\t\tsb.append(\"####################\"\\n\t\t\t\t\t\t+ System.getProperty(\"line.separator\"));\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.print(sb);\\n\t}\\n}", "target": "211", "substitutes": {"in": ["on", "h", "rec", "data", "is", "input", "out", "lin", "ssl", "token", "log", "err", "cli", "din", "id", "thin", "inner", "socket", "readable", "nin", "exec", "IN", "inn", "by", "fac", "con", "c", "bin", "er", "cl", "reader", "isin", "kin", "resource", "inc", "read", "re", "ex", "serv", "e", "buffer", "source", "inside", "s", "as", "ini", "login", "win", "again", "stream", "ins", "connection", "init", "In", "gin", "a"], "sb": ["gb", "bm", "usb", "bf", "pb", " SB", "BB", "bh", "ssl", "db", "ab", "sv", "bl", "bt", "obb", "bc", "sg", "erb", "si", "orb", "wb", "zb", "ob", "bash", "bp", "amb", "bj", "ls", "mb", "xb", "rb", "stab", "SB", "lb", "ruby", "bb", "lp", "sa", "nb", "sf", "cb", "src", "kb", "ib", "login", "bs", "bd", "abb", "bsp", "eb", "lab", "bi", "lc", "fb", "bg", "sth"], "houses": ["relations", "chairs", "housing", "dim", "tops", "ways", "ubs", "wives", "inas", "places", "agons", "omes", "groups", "house", "boxes", "home", "umbers", "maps", "sites", "ouses", "roads", "hops", "forces", "stocks", "holders", "stores", "boats", "idges", "quarters", "builders", "blocks", "rooms", "shows", "ps", "grid", "ships", "people", "woods", "archs", "yards", "units", "guards", "ages", "forums", "levels", "roots", "cards", "holes", "fields", "posts", "shirts"], "n": ["h", "ni", "m", "number", "l", "t", "c", "d", "network", "sn", "u", "e", "o", "j", "s", "p", "ns", "nb", "en", "w", "N", "k", "nn", "a"], "i": ["li", "fi", "I", "is", "di", "ni", "id", "gi", "index", "ai", "io", "si", "ori", "ui", "c", "ie", "zi", "uri", "u", "e", "j", "pi", "api", "ii", "qi", "p", "hi", "oi", "ini", "yi", "ci", "mi", "xi", "ix", "chi", "multi", "bi"], "info": ["parse", "list", "comment", "name", "ph", "path", "join", "data", "is", "off", "buff", "group", "id", "key", "json", "index", "config", "inner", "zip", "text", "si", "order", "ui", "INFO", "diff", "end", "conf", "ok", "type", "it", "bug", "entry", "iso", "feed", "array", "source", "add", "die", "api", "auto", "iter", "p", "hand", "hi", "error", "fw", "start", "information", "op", "extra", "about", "part", "alias", "fo", "flat", "init", "now", "check", "inf", "Info"], "b": ["h", "base", "db", "ab", "bl", "m", "l", "B", "ob", "g", "t", "c", "d", "u", "e", "lb", "j", "o", "bb", "s", "p", "nb", "w", "q", "k", "a"], "f": ["fi", "h", "m", "fr", "l", "g", "t", "c", "d", "fe", "u", "e", "j", "o", "F", "field", "s", "p", "en", "w", "k", "fl", "q"], "r": ["h", "rt", "m", "fr", "pr", "l", "g", "c", "d", "er", "rb", "u", "ry", "e", "j", "o", "ur", "s", "p", "R", "w", "sr", "or", "rr", "nr", "k", "rs", "a", "q"], "v": ["h", "iv", "sv", "vd", "m", "l", "g", "lv", "t", "c", "d", "uv", "u", "e", "o", "j", "ii", "V", "s", "p", "en", "w", "k", "a", "q"], "x": ["xy", "time", "on", "xc", "h", "xx", "one", "X", "wx", "id", "key", "m", "index", "code", "number", "l", "t", "c", "tx", "d", "num", "dx", "ax", "ex", "u", "e", "o", "j", "event", "dy", "xs", "p", "python", "w", "q", "pe", "xxx", "rx", "sex", "k", "ix", "xp", "a"], "y": ["xy", "yo", "h", "ch", "oy", "ey", "cy", "zy", "sy", "ys", "l", "ye", "Y", "py", "t", "c", "d", "vy", "ny", "yt", "ay", "u", "ry", "o", "j", "e", "dy", "year", "ty", "ii", "s", "p", "yr", "w", "yi", "iy", "ya", "ky", "yy", "ym"], "z": ["time", "h", "ph", "zone", "Z", "az", "id", "code", "zy", "tz", "gz", "zip", "l", "zz", "g", "nz", "t", "area", "c", "oz", "d", "vy", "cz", "zi", "zo", "u", "e", "o", "j", "ii", "iz", "s", "p", "w", "k", "size", "ze", "zh", "q", "zen"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String args[]){\\n\t\tsolve();\\n    }\\n\t\\n\tprivate static void solve(){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint H = sc.nextInt();\\n\t\tint A = sc.nextInt();\\n\t\tif(H%A == 0){\\n\t\t\tSystem.out.println(H/A);\\n\t\t}else{\\n\t\t\tSystem.out.println(H/A + 1);\\n\t\t}\\n\t}\\n}", "target": "147", "substitutes": {"sc": ["ner", "osc", "ch", " Sc", "nc", "sche", "sb", "cv", "cc", "bc", "esc", "pc", "exec", "ss", "sec", "scope", "ca", "SC", "se", "c", "scan", "sw", "uc", "cs", "com", "ctx", "Sc", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "cb", "enc", "soc", "ci", "sp", " SC", "ct", "ec", "tc", "cur", "coll"], "H": ["WH", "HY", "G", "h", "K", "Length", "L", "Z", "GH", "X", "P", "Q", "HA", "CH", "B", "Y", "SH", "RH", "E", "D", "OH", "NH", "HM", "J", "High", "F", "CL", "V", "HH", "HI", "Ch", "SHA", "EH", "MH", "T", "C", "U", "N", "M", "HP", "AH", "Ha", "Wh", "HS", "Hi", "TH", "O", "HC"], "A": ["SA", "Ra", "I", "L", "Next", "AA", "Va", "PA", " a", "X", "AD", "API", "P", "HA", "AST", "B", "Y", "S", "Pa", "As", "OA", "EA", "IA", "GA", "E", "Ang", "Access", "W", "Action", "Ma", "Area", "F", "Flow", "BA", "V", "SHA", "CA", "Sa", "All", "AAAA", "C", "Ca", "U", "Num", "N", "Alpha", "Fa", "NA", "AM", "Average", "LA", "mA", "Array", "Na", "a", "RA"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int max = 1;\\n        Map<String, Integer> map = new HashMap<>();\\n        for (int i=0; i<n; i++) {\\n            String s = sc.next();\\n            if (map.containsKey(s)) {\\n                max = Math.max(max, map.get(s) +1);\\n                map.put(s, map.get(s) +1);\\n            } else {\\n                map.put(s, 1);\\n            }\\n        }\\n//        String[] array = new String[map.size()];\\n        List<String> array = new ArrayList<>();\\n        int i = 0;\\n        for (String key : map.keySet()) {\\n            if (map.get(key) == max) {\\n//                array[i] = key;\\n                array.add(key);\\n                i++;\\n            }\\n        }\\n//        Arrays.sort(array);\\n        Collections.sort(array);\\n        for (String s : array) {\\n            System.out.println(s);\\n        }\\n    }\\n}", "target": "235", "substitutes": {"sc": ["ner", "ch", "osc", "mc", " Sc", "nc", "st", "sche", "sb", "cc", "esc", "bc", "asc", "pc", "exec", "ss", "sec", "server", "scope", "anc", "cus", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "screen", "spec", "Sc", "system", "dc", "sq", "sci", "cr", "src", "sync", "rc", "cer", "sp", " SC", "sch", "sh", "parser", "isc", "ec", "cur", "tc", "ser", "lc"], "n": ["f", "h", "nc", "in", "nt", "count", "m", "number", "l", "v", "t", "r", "c", "num", "d", "network", "y", "sn", "u", "o", "j", "p", "b", "x", "ns", "en", "nb", "w", "N", "len", "z", "k", "conn", "node", "nn", "q", "net", "span"], "max": ["rand", "rec", "div", "orig", "wrap", "shift", "range", "out", "no", "call", "id", "count", "m", "limit", "default", "unique", "step", "total", "gt", "height", "patch", "pop", "last", "min", "sum", "diff", "rest", "conf", "end", "only", "first", "cl", "chain", "can", "ng", "ax", "next", "add", "cache", "power", "point", "depth", "auto", "mod", "x", "row", "w", "res", "start", "Max", "MAX", "with", "crop", "k", "size", "maximum", "init", "pad", "right", "alpha", "std", "parent", "scale", "q"], "map": ["parse", "list", "shape", "make", "rate", "data", "one", "match", "group", "replace", "m", "code", "move", "where", "arr", "block", "pre", "scope", "app", "sum", "up", "meta", "master", "push", "model", "result", "complete", "ap", "mp", "array", "per", "batch", "age", "cache", "pack", "mm", "open", "down", "mean", "state", "hash", "set", "table", "copy", "size", "cap", "work", "apper", "rule", "comb", "host", "pad", "test", "lock", "dict", "module", "MAP", "scale"], "i": ["f", "li", "fi", "I", "is", "di", "ni", "gi", "m", "index", "ai", "io", "si", "ori", "ui", "mu", "phi", "v", "t", "c", "uri", "pi", "u", "info", "j", "ii", "qi", "ti", "p", "oi", "x", "ini", "z", "ci", "ip", "init", "xi", "iu", "chi", "multi", "bi"], "s": ["f", "ts", "names", "h", "hs", "name", "string", "is", "abs", "aws", "in", "ssl", "id", "m", "gs", "parts", "session", "si", "l", "its", "ss", "S", "ops", "g", "ches", "t", "c", "d", "your", "site", "ms", "spec", "ls", "request", "settings", "es", "u", "e", "str", "o", "js", "signed", "xs", "p", "b", "ges", "ns", "ps", "tests", "ws", "sports", "os", "ins", "us", "strings", "ses", "rs", "ks", "a", "fs", "ds", "sym", "r"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String[] x = sc.nextLine().split(\" \");\\n        String[] d = sc.nextLine().split(\" \");\\n        int a = Integer.parseInt(x[0]);\\n        int c = Integer.parseInt(x[2]);\\n\\n        int count = 0;\\n        for (int i=c; i <= a; i++) {\\n            for (String e : d) {\\n                if (Integer.parseInt(e) == i) {\\n                    count++;\\n                }\\n            }\\n        }\\n        int count2 = 0;\\n        for (int i = c; i >= 0; i--) {\\n            for (String e : d) {\\n                if (Integer.parseInt(e) == i) {\\n                    count2++;\\n                }\\n            }\\n        }\\n        if (count < count2) {\\n            System.out.println(count);\\n        } else {\\n            System.out.println(count2);\\n        }\\n    }\\n\\n    static int getInt(String val) {\\n        return Integer.parseInt(val);\\n    }\\n}", "target": "197", "substitutes": {"sc": ["f", "class", "ner", "ch", "osc", " Sc", "nc", "out", "esc", "bc", "asc", "pc", "ss", "sec", "anc", "scope", "SC", "se", "scan", "uc", "cl", "cs", "sw", "com", "this", "str", "Sc", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "enc", "sl", "sp", " SC", "stream", "sch", "sh", "ec", "tc", "cur", "lc", " scr"], "x": ["f", "cross", "h", "lex", "string", "plus", "data", "xxxx", "xx", "in", "X", "wx", "m", "index", "code", "n", "l", "g", "v", "t", "ww", "tx", "y", "xml", "array", "fx", "ax", "xes", "ex", "u", "xs", "s", "p", "b", "expl", "w", "xxx", "rx", "z", "work", "XX", "ix", "sex", "q", "r"], "d": ["f", "cd", "sd", "di", "dt", "in", "dos", "id", "m", "n", "l", "g", "v", "pd", "da", "t", "dat", "D", "y", "dh", "u", "o", "ld", "dy", "s", "dc", "p", "b", "w", "du", "dd", "md", "z", "dir", "ds"], "a": ["f", "am", "A", "ab", "ad", "m", "ai", "n", "ea", "ac", "ba", "da", "ca", "area", "aa", "y", "ce", "aj", "u", "api", "aaa", "at", "sa", "p", "b", "as", "all", "fa", "w", "au", "z", "an", "ae", "alpha", "la"], "c": ["f", "h", "ch", "in", "m", "cy", "cc", "n", "l", "ac", "g", "v", "ca", "cs", "t", "y", "ce", "u", "o", "s", "dc", "p", "b", "C", "w", "cu", "z", "ci", "k", "cp", "ec", "lc"], "count": ["f", "content", "cond", "h", "list", "allow", "name", "base", "in", "call", "nt", "Count", "length", "err", "id", "code", "index", "limit", "key", "match", "number", "n", "l", "process", "total", "left", "sum", "diff", "type", "max", "use", "add", "counter", "cache", "info", "weight", "depth", "current", "p", "b", "ind", "error", "child", "start", "len", "col", "z", "size", "found", "coll", "check", "parent"], "i": ["f", "eni", "li", "fi", "esi", "I", "mini", "di", "in", "ik", "ni", "ri", "gi", "id", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "t", "it", "ie", "y", "uri", "zi", "u", "o", "j", "pi", "api", "ii", "ei", "qi", "s", "p", "ti", "b", "oi", "hi", "ic", "slice", "ini", "z", "ci", "mi", "iu", "xi", "isi", "ix", "multi", "bi", "lc"], "e": ["f", "esi", "ele", "ne", "ef", "ev", "element", "ed", "ee", "n", "l", "ea", "eye", "E", "ie", "er", "entry", "fe", "oe", "ce", "y", "eve", "es", "le", "u", "et", "o", "ei", "ii", "eme", "p", "eu", "b", "entity", "en", "line", "ze", "ec", "ae", "el", "r"], "count2": ["cond2", "count3", "catch2", "Count1", "sum3", "count_", "typetwo", "countTwo", "count1", "sumTwo", "numbertwo", "condtwo", "condTwo", "sum2", "cond1", "Count_", " countTwo", "catchTwo", " counttwo", "catch_", "Count3", "counttwo", "Counttwo", "numberTwo", "sum1", "type_", "Count2", "number2", "sumtwo", " count3", "catchtwo", " count_", "number_", "CountTwo", " count1", "type2"], "val": ["f", "value", "valid", "exp", "vals", "base", "data", "xx", "expr", "ref", "bl", "key", "code", "local", "index", "arr", "l", "text", "exec", "py", "g", "v", "buf", "tx", "fe", "Val", "def", "str", "VAL", "loc", "p", "al", "elt", "ind", "sel", "enc", "sl", "test", "eval", "el", "r"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int K = sc.nextInt();\\n    long answer =0;\\n    long H[] = new long[N];\\n    for(int i=0;i<N;i++){\\n      H[i]=sc.nextLong();\\n    }\\n    if(N<=K){\\n      System.out.println(0);\\n      return;\\n    }\\n    Arrays.sort(H);\\n    for(int i=0;i<N-K;i++){\\n      answer = answer+H[i];\\n    }\\n    System.out.println(answer);\\n  }\\n}", "target": "230", "substitutes": {"sc": ["ner", "osc", "ch", "cont", " Sc", "nc", "sche", "sb", "esc", "bc", "cc", "asc", "pc", "ss", "anc", "ca", "SC", "se", "c", "scan", "cs", "sw", "uc", "cus", "screen", "cor", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "cer", "enc", "soc", "sp", "ci", " SC", "sch", "sh", "ec", "tc", "cur", "sem", "ser", "lc"], "N": ["CN", "NE", "CNN", "Len", "I", "L", "Z", "Size", "NI", "A", "Sn", "X", "Ni", "P", "Q", "NS", "SN", "GN", "n", "NC", "S", "Y", "B", "Na", "E", "D", "NL", "J", "F", "V", "No", "NM", "NB", "NN", "T", "C", "U", "Num", "M", "NA", "Ne", "k", "Ns", "ND", "NT", "O"], "K": ["KB", "G", "KC", "I", "L", "Z", "PK", "A", "SK", "X", "KR", "P", "Q", "KS", "n", "NK", "CH", "S", "Y", "B", "E", "D", "Kent", "W", "J", "V", "C", "KK", "KI", "U", "M", "Max", "k", "KE", "IK", "Sk", "ID"], "answer": ["username", "value", " Answer", "h", "sort", "string", "exit", "data", "grade", "done", "prefix", "length", "err", "ee", "number", "code", "integer", "account", " answers", "message", "score", "null", "initial", "energy", "address", "order", "text", "v", "duration", "result", "support", "complete", "empty", "zero", "update", "array", "fix", "next", "Answer", "output", "offer", "ace", "e", "query", "reply", "question", "offset", "NN", "blank", "error", "answered", "response", "knowledge", "rage", "results", "size", "work", "average", "ask", "cash", "now", "balance", "evidence", "even"], "H": ["Header", "G", "h", "I", "L", "BB", "GH", "X", "HQ", "FH", "P", "HT", "Q", "HK", "HD", "HA", "CH", "S", "Y", "SH", "RH", "House", "D", "DH", "OH", "NH", "Answer", "HM", "W", "F", "V", "HH", "HI", "SHA", "EH", "rh", "MH", "T", "U", "M", "Hash", "HP", "HTTP", "ITH", "HL", "HS", "AH", "O", "HC"], "i": ["f", "li", "fi", "I", "data", "di", "in", "ri", "ni", "id", "gi", "inner", "index", "ai", "io", "ji", "n", "si", "l", "ui", "mu", "phi", "v", "it", "c", "ie", "d", "y", "uri", "zi", "u", "pi", "o", "j", "e", "info", "ii", "qi", "p", "ti", "b", "oi", "x", "slice", "abi", "ini", "start", "ci", "k", "mi", "iu", "ip", "xi", "init", "chi", "ix", "multi", "bi", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        char a = s.charAt(0);\\n\\n        if ( Character.isUpperCase(a)) {\\n            System.out.print('A');\\n        } else {\\n            System.out.print('a');\\n        }\\n    }\\n\\n}", "target": "80", "substitutes": {"sc": ["osc", "ch", "nc", "sb", "cc", "bc", "esc", "asc", "pc", "si", "text", "ss", "sec", "scope", "ca", "SC", "se", "c", "scan", "cs", "sw", "cl", "cus", "uc", "cor", "str", "Sc", "sci", "cr", "ocr", "sf", "sync", "rc", "src", "enc", "cer", "sl", "sp", "ci", "sh", "ec", "desc", "r"], "s": ["f", "h", "string", "sb", "in", "sv", "search", "n", "si", "l", "S", "ss", "g", "v", "c", "rows", "su", "ls", "es", "u", "e", "o", "str", "services", "p", "as", "b", "sets", "space", "ns", "ws", "sl", "os", "ins", "i", "strings", "ses", "r"], "a": ["f", "sta", "name", "ga", "A", "ab", "n", "ea", "ac", "na", "ba", "ca", "area", "c", "aa", "ava", "abc", "ar", "va", "pa", "e", "word", "af", "aaa", "aaaa", "fa", "sa", "as", "b", "letter", "p", "missing", "ata", "ana", "an", "ae", "title", "alpha"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        sc.close();\\n\\n        if(N%1000==0){\\n            System.out.println(0);\\n        }\\n        else{\\n            System.out.println(1000-N%1000);\\n        }\\n    }\\n}", "target": "184", "substitutes": {"sc": ["osc", "ch", " Sc", "nc", "cv", "cc", "bc", "esc", "asc", "pc", "ss", "na", "server", "scope", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "uc", "Sc", "sq", "sci", "cr", "src", "sf", "sync", "rc", "sr", "soc", "sl", "sp", "ci", " SC", "sch", "sh", "ec", "cur", "lc"], "N": ["CNN", "K", "I", "L", "Z", "Size", "X", " n", "P", "Q", "NS", "SN", "H", "GN", "n", "NC", "UN", "S", "Y", "E", "D", "NL", "MN", "J", "F", "V", "No", "NG", "NM", "R", "NP", "NN", "C", "T", "M", "NA", "Ne", "Ns", "ND", "NT", "Number", "O", "KN"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n\tint a = Integer.parseInt(sc.next());\\n    int b = Integer.parseInt(sc.next());\\n    int c = Integer.parseInt(sc.next());\\n    boolean flag = ( a==b && a!=c) || (a==c && b!=c) || (b==c && b!=a);\\n    if(flag){\\n      System.out.print(\"Yes\");\\n    }else{\\n      System.out.print(\"No\");\\n    }\\n    System.out.flush();\\n  }\\n}", "target": "117", "substitutes": {"sc": ["class", "parse", "osc", "ch", "cont", " Sc", "nc", "out", "sche", "cli", "cv", "cc", "bc", "esc", "asc", "pc", "l", "cam", "ss", "sec", "scope", "anc", "app", "cus", "SC", "se", "scan", "cs", "uc", "cgi", "com", "ctx", "usc", "Sc", "system", "sci", "cr", "ocr", "sf", "src", "rc", "cer", "sr", "enc", "soc", "sp", "ci", " SC", "sch", "ec", "tc", "coll", "lc"], "a": ["f", "am", "A", "ab", "ad", "ai", "n", "cca", "ea", "ac", "aw", "ba", "da", "ca", "area", "aa", "d", "y", "ar", "aj", "ce", "ace", "va", "u", "e", "o", "pa", "af", "api", "aaa", "aaaa", "at", "sa", "as", "ia", "p", "x", "fa", "w", "au", "i", "art", "an", "ae", "ada", "alpha", "r"], "b": ["f", "h", "base", "sb", "ab", "db", "ad", "bc", "not", "n", "l", "ac", "B", "wb", "ba", "v", "g", "ca", "t", "aa", "d", "y", "rb", "u", "e", "o", "lb", "j", "bb", "p", "x", "cb", "w", "ib", "bs", "k", "i", "be", "ae", "eb", "r"], "c": ["f", "h", "ch", "cf", "cy", "count", "cc", "n", "l", "ac", "g", "v", "ca", "t", "con", "cs", "uc", "d", "y", "ce", "cm", "u", "e", "o", "dc", "p", "x", "C", "cr", "cb", "w", "q", "cu", "z", "ci", "k", "i", "ec", "lc", "r"], "flag": ["f", "focus", "valid", "kind", "leaf", "fd", "arg", "ish", "in", "log", "Flag", "count", "id", "wave", "lag", "ant", "l", "v", "like", "type", "wage", "cat", "bug", " Flag", "use", "bit", "ext", "fun", "age", "af", "flags", "affle", "field", "offset", "bag", "zag", "back", " flags", "start", "filter", "FLAG", "feature", "force"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Main main = new Main();\\n        main.solve();\\n    }\\n\\n    public void solve() {\\n        Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n        int N = scan.nextInt();\\n        int ans = N / 2;\\n        if (N % 2 == 1) {\\n            ans += 1;\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "233", "substitutes": {"scan": ["parse", "ner", "ch", "skip", "ann", "watch", " scanner", "out", "in", "log", "match", "search", "io", "n", "se", "cat", "er", "can", "reader", "plan", "query", "use", "kin", "read", "feed", "connect", "system", "row", "Scan", "san", "sync", "sc", "view", "an", "look", "walk", "get", "nn", "run", "clean", "sign", "r"], "N": ["CNN", "ANS", "K", "Len", "I", "L", "Z", "Size", "NI", "Sn", "Count", " n", "X", "Ni", "P", "NS", "SN", "GN", "n", "NC", "S", "AN", "Na", "NL", "F", "V", "No", "NG", "NB", "ANN", "ns", "NN", "An", "Num", "M", "NA", "Ne", "NR", "Ns", "NT", "Number", "O"], "ans": ["nan", "ANS", " scans", "L", "AS", "ann", "aned", "lines", "reads", "NS", "n", "leans", "ons", "annot", "AN", "S", "ES", "ops", "ss", "anc", "na", "cs", "nos", "aning", "lan", "features", "es", "nas", "ions", "anners", "s", "offs", "ANN", "ns", "An", "cas", "ants", "vers", " spans", "os", "Ns", "ins", "ks", "an", "outs", "ars", "nn", "Na", "ana", "span"]}}
{"code": "//Small, Large, or Equal\\nimport java.util.Scanner;\\n\\nclass Main {\\n    public void cubic() {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        \\n        String out = \"a > b\";\\n        if (a == b ) {\\n            out = \"a == b\";\\n        }else if(a < b) {\\n            out = \"a < b\";\\n        }\\n\\n\\n                                        \\n        System.out.println(out);\\n    }\\n    \\n    public static void main(String[] args){\\n    new Main().cubic();\\n    }\\n}", "target": "179", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.lang.*;\\n\\npublic class Main {\\n\tint mod = 1000000007;\\n\\n\tstatic FastScanner sc = new FastScanner();\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tout = new PrintWriter(new BufferedOutputStream(System.out));\\n\t\tint n=sc.nextInt();\\n\t\tint m=sc.nextInt();\\n\t\tout.println((n*(n-1)+m*(m-1))/2);\\n\t\tout.close();\\n\t}\\n\\n\t// ----------------------------------------------------------\\n\\n\tstatic int l_min(int[] a) {\\n\t\tArrays.sort(a);\\n\t\treturn a[0];\\n\t}\\n\\n\tstatic int l_max(int[] a) {\\n\t\tint l = a.length;\\n\t\tArrays.sort(a);\\n\t\treturn a[l - 1];\\n\t}\\n\\n\tstatic int gcd(int a, int b) {\\n\\n\t\tif (a == 0) {\\n\t\t\treturn b;\\n\t\t}\\n\t\treturn gcd(b % a, a);\\n\\n\t}\\n\tstatic int[] fill(int[] a){\\n\t\tint n=a.length;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[i]=sc.nextInt();\\n\t\t}\\n\t\treturn a;\\n\t}\\n\\n\tpublic static PrintWriter out;\\n\\n}\\n\\nclass UnionFind {\\n\tint parent[];\\n\tint rank[];\\n\tint size[];\\n\\n\tUnionFind(int n) {\\n\t\tparent = new int[n];\\n\t\trank = new int[n];\\n\t\tsize = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tparent[i] = i;\\n\t\t\trank[i] = 0;\\n\t\t\tsize[i] = 1;\\n\t\t}\\n\t}\\n\\n\tvoid union(int x, int y) {\\n\t\tint xRoot = find(x);\\n\t\tint yRoot = find(y);\\n\\n\t\tif (xRoot != yRoot) {\\n\\n\t\t\tif (rank[xRoot] > rank[yRoot]) {\\n\t\t\t\tparent[yRoot] = xRoot;\\n\t\t\t\tsize[xRoot] += size[yRoot];\\n\\n\t\t\t} else if (rank[xRoot] < rank[yRoot]) {\\n\t\t\t\tparent[xRoot] = yRoot;\\n\t\t\t\tsize[yRoot] += size[xRoot];\\n\\n\t\t\t} else {\\n\t\t\t\tparent[yRoot] = xRoot;\\n\t\t\t\trank[xRoot]++;\\n\t\t\t\tsize[xRoot] += size[yRoot];\\n\t\t\t}\\n\t\t}\\n\\n\t}\\n\\n\tint find(int x) {\\n\t\tif (parent[x] == x) {\\n\t\t\treturn x;\\n\t\t} else {\\n\t\t\treturn find(parent[x]);\\n\t\t}\\n\\n\t}\\n\\n\tboolean same(int x, int y) {\\n\t\treturn find(x) == find(y);\\n\t}\\n\\n}\\n\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "49", "substitutes": {"mod": [" mc", "Mod", " min", " c", " seed", " cm", " d", " depth", " rc", " mods", "d", "ms", "max", "num", "cm", "p", " mode", " module", "M", " exp", " r", " f", " j", " indent", " p", "module", " ms"], "sc": ["class", "ner", "ch", "osc", "cont", " Sc", "nc", "sb", "cv", "code", "cc", "bc", "esc", "asc", "si", "exec", "ss", "server", "scope", "cus", "SC", "c", "scan", "cs", "sw", "cl", "uc", "ctx", "zero", "spec", "acc", "this", "Sc", "system", "sq", "sci", "cr", "src", "sync", "rc", "cer", "ci", "sp", " SC", "sch", "sh", "tc", "lc"], "out": ["obj", "client", "channel", "ch", "arg", "name", "path", "string", "input", "console", "prefix", "in", "call", "log", "cli", "err", "io", "window", "exec", "IN", "print", "up", "c", "result", "page", "write", "bin", "OUT", "output", "buffer", "ex", "o", "str", "cache", "user", "point", "s", "flush", "p", "error", "Out", "w", "file", "sync", "println", "pool", "again", "temp", "line", "size", "writer", "outer", "outs", "lock", "screen"], "n": ["f", "h", "ne", "nc", "in", "oa", "nt", "count", "kn", "l", "na", "v", "t", "c", "d", "num", "y", "ng", "sn", "u", "e", "o", "j", "loc", "s", "p", "un", "b", "x", "ln", "nb", "en", "w", "N", "z", "size", "mn", "k", "conn", "i", "nu", "an", "nn", "fn", "q", "r"], "m": ["f", "h", "ma", "mx", "man", "l", "mu", "g", "v", "mr", "c", "d", "num", "y", "mp", "fm", "cm", "u", "e", "o", "j", "s", "p", "b", "x", "mo", "dm", "M", "w", "md", "z", "k", "mn", "mi", "i", "an", "a", "ym", "q", "r"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        //\u30b3\u30fc\u30c9\\n        Scanner scanner = new Scanner(System.in);\\n        Long N = scanner.nextLong();\\n        Long K = scanner.nextLong();\\n        Long R1 = N % K;\\n        Long R2 = Math.abs(R1 - K);\\n\\n        System.out.println(Math.min(R1,R2));\\n    }\\n}\\n", "target": "22", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    public static int createNumber(int x){\\n        int n = (x*10 + x) * 10 + x;\\n        return n;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n        int n = in.nextInt();\\n        if (n > 999){\\n            System.out.println(1111);\\n        }\\n        else {\\n            int first = (n /10) /10;\\n            if (n <= createNumber(first))\\n                System.out.println(createNumber(first));\\n            else System.out.println(createNumber(first+1));\\n        }\\n    }\\n    \\n}", "target": "106", "substitutes": {"x": ["f", "xc", "on", "h", "name", "xx", "X", "wx", "id", "m", "code", "index", "number", "l", "v", "t", "c", "d", "y", "dx", "fx", "ax", "ex", "u", "e", "event", "xd", "xs", "s", "p", "b", "ns", "w", "N", "xxx", "rx", "z", "i", "xi", "XX", "ix", "xp", "inf"], "n": ["f", "nm", "nd", "on", "nan", "ne", " num", "none", "nc", "net", "no", "nt", " c", "ni", "count", "m", "number", "anon", "non", "not", "l", "na", "g", "v", "t", "c", "d", "num", "y", "sn", "ng", "next", "u", "e", "o", "j", "cn", "s", "dn", "p", "un", "b", "ns", "nl", "en", "nb", "N", "pn", "z", "nr", " N", "k", "mn", "conn", "i", "nor", "nu", " number", "an", "nn", "nit", "a", "r"], "in": ["f", "h", "fd", "cin", "data", "is", "input", "out", "lin", "container", "log", "err", "din", "id", "pin", "inner", "nin", "ac", "IN", "inn", "con", "c", "doc", "bin", "er", "d", "reader", "kin", "resource", "inc", "serv", "source", "ex", "str", "s", "p", "b", "bis", "rin", "ini", "login", "win", "again", "ins", "conn", "i", "connection", "init", "In", "lock", "a", "r"], "first": ["primary", "name", "path", "middle", "starting", "one", "st", "inth", "nt", "length", "count", "number", "latest", "unit", "pc", "initial", "fourth", "left", "last", "only", "forward", "empty", "next", "inc", "then", "fifth", "full", "current", "p", "open", "space", "third", "start", "First", "front", "true", "part", "leading", "now", "prev", "parent", "second"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint num = scanner.nextInt();\\n\t\tif (num <= 100) {\\n\t\t\tint array[] = new int[num];\\n\t\t\tList<Integer> list = new ArrayList<Integer>();\\n\t\t\tfor (int i = 0; i < array.length; i++) {\\n\t\t\t\tint next = scanner.nextInt();\\n\t\t\t\tif (0 <= next && next < 1000) {\\n\t\t\t\t\tlist.add(next);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tCollections.reverse(list);\\n\\n\t\t\tfor (int i = 0; i < list.size(); i++) {\\n\t\t\t\tif (i == (list.size()-1)) {\\n\t\t\t\t\tSystem.out.println(list.get(i));\\n\t\t\t\t} else {\\n\t\t\t\t\tSystem.out.print(list.get(i) + \" \");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "79", "substitutes": {"scanner": ["analyner", "scanker", "caner", "aner", "Scanter", " scancer", "Scanning", "cancer", "scanener", "analyning", "Scanner", "Scaner", "Scanker", " scanker", "annner", "Scanener", "canener", "analyker", "analycer", "annter", "canter", "scanter", "analyer", " scanter", "canker", "scancer", "anner", "analyter", "annener", "anker", "scanning", "scaner", "anning", "canner"], "num": ["nm", "f", "name", "dim", "ul", "nc", "nom", "no", "dist", "nt", "ni", "id", "count", "number", "index", "unit", "n", "split", "total", "sum", "conv", "con", "max", "NUM", "uri", "inc", "np", "loc", "iter", "p", "offset", "b", "nb", "en", "Num", "start", "len", "fff", "col", "temp", "nr", "umi", "uni", "nu", "coll", "multi", "nn", "fn", "um", "net"], "array": ["value", "database", "string", "base", "data", "instance", " arr", "range", "element", "group", "number", "index", "collection", "integer", "object", "arr", "order", "address", "v", "ray", "area", "vector", "air", "batch", "counter", "api", "current", "section", "audio", "archive", "row", "stack", "variable", "a", "pair", "Array", "multi"], "list": ["li", "listed", "tree", "base", "string", "data", "range", "out", "cli", "bl", "group", "keep", "count", "collection", "index", "code", "low", "object", "default", "number", "arr", "l", "null", "queue", "server", "left", "ll", "loop", "like", "diff", "result", "form", "cl", "chain", "the", "batch", "this", "cache", "section", "lat", "iter", "current", "p", "stack", "all", "pool", "set", "view", "table", "temp", "LIST", "size", "lists", "part", "test", "coll", "we", "now", "prev", "la", "lc", "later", "sequence"], "i": ["f", "eni", "li", "h", "I", "mini", "di", "in", "ri", "ni", "id", "gi", "index", "ai", "io", "n", "si", "ori", "ui", "mu", "phi", "v", "it", "ie", "d", "uri", "zi", "u", "pi", "o", "e", "j", "ii", "qi", "ti", "p", "b", "x", "oi", "hi", "ind", "ini", "start", "yi", "z", "ci", "mi", "ip", "xi", "init", "iu", "ix", "multi", "bi"], "next": ["eni", "primary", "valid", "skip", "Next", "done", "one", "version", "nt", "length", "id", "count", "code", "key", "latest", "number", "non", "total", "close", "sec", "last", "end", "more", "success", "result", "page", "first", "future", "vious", "complete", "entry", "site", "seq", "pointer", "this", " Next", "reply", "api", "frame", "current", "open", "offset", "en", "start", "response", "size", "big", "other", "cur", "now", "prev", "later", "sequence", "second"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        int sum=0,i=0,j;\\n        String t;\\n        Scanner s = new Scanner(System.in);\\n        while(true){\\n            t = s.next();\\n            if(t.charAt(0) =='0'&&t.length()==1)break;\\n            for(i=0;i<t.length();i++){\\n                sum+=t.charAt(i)-'0';\\n            }\\n            System.out.println(sum);\\n            sum = 0;\\n        }\\n    }\\n}\\n", "target": "144", "substitutes": {"sum": ["parse", "sim", "comment", "sort", "summary", "plus", "out", "help", "match", "length", "cum", "count", "index", "cost", "split", "si", "text", "total", "ass", "gram", "up", "min", "diff", "ash", "send", "result", "se", "num", "um", "max", "su", "use", "weight", "u", "info", "cache", "pack", "space", "all", "fat", "start", "hash", "sk", "sp", "fill", "size", "mean", "sh", "average", "spread", "loss", "alpha", "scale", "vol", "net", "Sum"], "i": ["eni", "f", "li", "fi", "h", "I", "di", "ri", "length", "gi", "id", "m", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "phi", "v", "it", "c", "zi", "uri", "u", "pi", "e", "o", "ii", "qi", "ti", "p", "hi", "x", "oi", "ini", "start", "yi", "z", "ci", "mi", "iu", "xi", "ip", "init", "chi", "multi", "ix", "bi"], "j": ["f", "jp", "m", "ji", "n", "l", "jc", "v", "g", "ie", "d", "max", "pos", "e", "o", "J", "js", "p", "job", "b", "x", "je", "z", "k", "xi", "ij", "r"], "t": ["f", "ts", "tr", "cont", "string", "template", "rt", "tg", "st", "token", "out", "in", "word", "wt", "m", "n", "ant", "l", "text", "total", "te", "g", "v", "it", "c", "type", "tt", "d", "complete", "y", "the", "txt", "u", "e", "str", "o", "pt", "this", "to", "lit", "at", "p", "font", "b", "letter", "iter", "T", "start", "trans", "z", "part", "ta", "test", "qt", "tf", "r"], "s": ["f", "h", "abs", "sb", "in", "out", "ssl", "obs", "gs", "south", "n", "si", "l", "S", "ss", "ops", "g", "v", "se", "c", "er", "d", "ls", "u", "js", "qs", "xs", "p", "b", "opens", "ns", "sf", "sync", "ps", "ws", "sl", "os", "ins", "strings", "ses", "states", "fs", "bis", "r"]}}
{"code": "\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.util.stream.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        //\u30b3\u30fc\u30c9\\n        Scanner scanner = new Scanner(System.in);\\n        Integer n = Integer.parseInt(scanner.next());\\n        Integer x = Integer.parseInt(scanner.next());\\n\\n        Integer[] l = new Integer[n];\\n        Integer[] d = new Integer[n + 1];\\n\\n        for(int i = 0; i < n; i++) {\\n            l[i] = Integer.parseInt(scanner.next());\\n        }\\n\\n        d[0] = 0;\\n        for(int i = 0; i < l.length; i++) {\\n            d[i+1] = d[i] + l[i];\\n        }\\n\\n        int count = 0;\\n        for(int i = 0; i < d.length; i++) {\\n            if(d[i] <= x) count++;\\n        }\\n\\n        System.out.println(count);\\n    }\\n}\\n", "target": "130", "substitutes": {}}
{"code": "import java.io.IOException;\\n\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\nimport java.io.PrintWriter;\\n\\nimport java.util.HashSet;\\n\\n@SuppressWarnings(\"unchecked\")\\npublic class Main {\\n    static int f(int s) {\\n        int cnt = 0;\\n        HashSet<Integer> hs = new HashSet<>();\\n\\n        cnt++;\\n        hs.add(s);\\n\\n        boolean flg = true;\\n\\n        while (flg) {\\n            int tmp;\\n\\n            cnt++;\\n\\n            if (s % 2 == 0) tmp = s / 2;\\n            else tmp = 3 * s + 1;\\n\\n            if (hs.contains(tmp)) {\\n                flg = false;\\n            }\\n\\n            hs.add(tmp);\\n\\n            s = tmp;\\n        }\\n\\n        return cnt;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        final String S;\\n\\n        try (\\n            BufferedReader reader = new BufferedReader(\\n                new InputStreamReader(System.in))) {\\n            S = reader.readLine();\\n        }\\n\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        int s = Integer.parseInt(S);\\n\\n        out.println(f(s));\\n\\n        out.flush();\\n    }\\n}\\n", "target": "166", "substitutes": {"s": ["f", "is", "lines", "m", "sg", "l", "ss", "sec", "maps", "t", "c", "spec", "js", "ns", "sample", "size", "ments", "outs", "ds", "sym", "second", "string", "sb", "gs", " objects", "session", "ms", "site", "sq", "SU", "sp", "os", "ings", "ses", " logs", "secondary", "ts", "sie", "ports", "ssl", "sections", "ops", "g", "cs", "sites", "su", "es", "o", "als", "p", "b", "sets", "sync", "ances", "i", "strings", "rs", "gets", "ips", "less", "abs", " gets", "parts", "n", "si", "seconds", "v", "ches", "d", "ls", "str", "qs", "xs", "services", "src", "ps", "tests", "ws"], "cnt": ["ccno", "Cnn", "rcnt", "lcnt", "cnc", " cret", "Cpt", "rcpt", " cnc", "cnn", "acnt", "cpt", "cno", "ccount", "Count", "Cct", "count", "account", "Cnt", "Cnc", " cno", " cNT", "cct", "ccret", "lcount", "ccnt", "Cret", "ecount", " cnn", "ecct", "acct", "cNT", " count", " cct", "rcNT", "Cno", "acount", "lcnc", " cpt", "CNT", "rcnn", "ecnt", "eccount", "ccct", "lcNT", " ccount", "cret"], "hs": ["hes", "ts", "h", "hw", "heads", "obs", "his", "hers", "archives", "gs", "tails", "hh", "ints", "ims", "ys", "vs", "ums", "cs", "hhh", "pps", "hours", "hess", "hops", "ls", "forces", "acks", "ups", "qs", "xs", "His", "tracks", "ths", "ges", "opens", "rh", "ha", "icks", "ps", "tests", "checks", "ws", "archs", "hm", "hp", "ht", "ks", "rs", "holes", "HS", "asses", "fs"], "flg": [" flig", "llga", "flm", "ilG", "ilbg", "flG", "ilg", "lfg", "lfm", "llm", " flb", "lfk", "lgb", " flk", "flgb", "fcg", " flgs", "FLb", "lfga", " flG", " flga", " flm", " flbg", "llk", " flgb", "flig", "ilgb", "flb", "FLg", "fcig", "fcgs", "flbg", "flk", "flgs", "FLgs", "lbg", "lG", "llg", "fcb", "flga", "FLig", "lg"], "tmp": ["seed", "zip", "py", "buf", "mp", "txt", "rb", "img", "api", " temporary", " ff", "offset", "qq", "sup", "temp", "fake", "cp", "stuff", "mmm", "yy", "now", "xxxx", "sb", "nt", "diff", "ff", "j", "emp", "current", "fp", "kk", "sp", "part", "vt", "copy", "test", "beta", " sp", "cur", "cmp", "alpha", "secondary", "proc", "page", "tt", "su", "next", "xxxxxxxx", " src", "elt", "xxx", "ptr", "i", "obj", "treatment", "inst", "ie", "result", "loc", "amp", "x", "src", "nb", "pty", "pp", "cpp", "pad", "perm", "appy", "fb", "tf"], "S": ["G", "DS", "I", "string", "L", "Si", "Source", "A", "Input", "Socket", "P", "Q", "SN", "NS", "H", "B", "RS", "SC", "D", "W", "SL", "SB", "F", "V", "R", "STR", "T", "SS", "sample", "U", "C", "N", "SE", "M", "SU", "TS", "SR", "WS", "GS", "SI", "Str", "O"], "out": ["f", "obj", "list", "h", "client", "exp", "name", "string", "raw", "input", "prefix", "in", "log", "err", "group", "code", "inner", "io", "object", "n", "exec", "print", "v", "result", "page", "write", "bin", "project", "OUT", "per", "inc", "output", "buffer", "ex", "this", "o", "str", "user", "target", "builder", "to", "full", "flush", "p", "b", "x", "pass", "file", "Out", "w", "child", "sync", "op", "again", "temp", "table", "sys", "line", "part", "view", "work", "conn", "writer", "outer", "outs", "plain", "parent", "r"]}}
{"code": "import java.util.Arrays;\\nimport java.util.BitSet;\\nimport java.util.HashSet;\\nimport java.util.Scanner;\\nimport java.util.Set;\\nimport java.util.stream.Collectors;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int H = sc.nextInt();\\n        int A = sc.nextInt();\\n        System.out.println((int) Math.ceil(((float) H) / A));\\n    }\\n}", "target": "147", "substitutes": {"sc": ["osc", "ch", "cont", " Sc", "nc", "console", "sche", "search", "cv", "cc", "bc", "esc", "asc", "exec", "ss", "scope", "ca", "SC", "se", "c", "scan", "cs", "cl", "sw", "cus", "uc", "com", "acc", "Sc", "s", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "sp", " SC", "sh", "ec", "coll", "lc"], "H": ["h", "K", "L", "Z", "PH", "GH", "X", "FH", "P", "HT", "Q", "HD", "HA", "CH", "B", "Y", "SH", "RH", "DH", "OH", "HM", "NH", "W", "HE", "F", "V", "HH", "HI", "MH", "C", "U", "HP", "HB", "AH", "Ha", "HS", "Hi", "TH", "HC"], "A": ["I", "L", "AA", "AS", "PA", "X", "API", "AD", "AL", "P", "HA", "B", "Y", "S", "As", "EA", "IA", "GA", "Ang", "W", "Ma", "Area", "F", "BA", "V", "CA", "C", "U", "M", "Alpha", "N", "AM", "LA", "mA", "Array", "AH", "Na", "a"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int count = sc.nextInt();\\n        int sum = 0;\\n        for (int i = 0; i < count; i++) {\\n            sum += isPrimeNumber(sc.nextLong()) ? 1 : 0;\\n        }\\n        System.out.println(sum);\\n    }\\n\\n    private static boolean isPrimeNumber(long a) {\\n        if (a == 2) {\\n            return true;\\n        } else if (a < 2 || a % 2 == 0) {\\n            return false;\\n        }\\n\\n        long sqrt = (long) Math.sqrt(a);\\n        for (int i = 3; i <= sqrt; i += 2) {\\n            if (a % i == 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}", "target": "226", "substitutes": {"sc": ["class", "ner", "ch", "osc", " Sc", "nc", "sche", "cv", "cc", "bc", "esc", "asc", "pc", "text", "ss", "sec", "scope", "anc", "app", "ca", "SC", "se", "c", "scan", "cs", "ctx", "sw", "cus", "uc", "cl", "Sc", "sq", "sa", "sci", "cr", "src", "sf", "sync", "rc", "sr", "sk", "sl", "sp", "ci", " SC", "sch", "sh", "ec", "tc", "cur", "ser"], "count": ["f", "list", "ch", "name", "base", "call", "Count", "length", "id", "number", "code", "index", "key", "n", "total", "patch", "c", "num", "max", "age", "depth", "b", "start", "len", "pool", "part", "size", "coll", "check"], "sum": ["stat", "parse", "comment", "cal", "miss", "summary", "am", "plus", "out", "help", "mass", "cum", "key", "cost", "si", "total", "ass", "gram", "min", "up", "sign", "result", "num", "um", "empty", "su", "zero", "max", "carry", "weight", "add", "info", "cache", "pack", "fat", "error", "mem", "size", "mean", "spread", "average", "sh", "cur", "alpha", "scale", "vol", "Sum"], "i": ["f", "li", "fi", "h", "I", "mini", "di", "in", "ri", "ni", "length", "gi", "id", "index", "ai", "ji", "si", "l", "ui", "mu", "phi", "v", "adi", "c", "ie", "d", "uri", "zi", "u", "e", "o", "j", "pi", "info", "ii", "qi", "ti", "hi", "p", "oi", "x", "b", "ini", "yi", "z", "ci", "mi", "iu", "ip", "xi", "ix", "chi", "multi", "bi"], "a": ["f", "sta", "h", "ama", "am", "ga", "A", "ab", "ad", "ma", "oa", "m", "aka", "ai", "n", "l", "ac", "ea", "ba", "da", "area", "ca", "aa", "c", "d", "y", "aj", "array", "pa", "u", "e", "aux", "va", "auto", "at", "sa", "as", "p", "b", "x", "au", "ana", "an", "ae", "alpha", "la"], "sqrt": ["qnt", "sqr", " sqRT", " sqr", "squrt", "sqRT", "squRT", " sqnt", "qRT", "squr", "sqnt", "squnt", "qr", "qrt"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n\tScanner sc = new Scanner(System.in);\\n\\n\tint W, H, x, y;\\n\tW = sc.nextInt();\\n\tH = sc.nextInt();\\n\tx = sc.nextInt();\\n\ty = sc.nextInt();\\n\\n\tint judge;\\n\tif (x + x == W && y + y == H)\\n\t    judge = 1;\\n\telse\\n\t    judge = 0;\\n\\n\tSystem.out.println((double)(((double)W * (double)H) / 2) + \" \" + judge);\\n    }\\n}", "target": "182", "substitutes": {"sc": ["class", "parse", "osc", "cont", "exp", "mc", " Sc", "nc", "sche", "sb", "cli", "core", "cv", "cc", "bc", "esc", "asc", "pc", "l", "exec", "ss", "sec", "anc", "scope", "app", "cus", "SC", "c", "se", "scan", "sw", "cl", "uc", "ctx", "cs", "acc", "cor", "Sc", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "soc", "sl", "sp", "ci", " SC", "ct", "ca", "tc", "ec", "cur", "coll", "desc", "lc"], "W": ["G", "h", "K", "West", "Window", "I", "L", "Z", "WF", "SW", "Size", "MW", "X", "Win", "Width", "P", "Wa", "Wi", "Q", "WC", "S", "Y", "B", "SH", "DW", "E", "D", "We", "FW", "width", "F", "V", "WD", "TW", "T", "C", "U", "w", "N", "M", "WP", "VW", "WS", "WR", "Wh", "GW", "O"], "H": ["WH", "HY", "G", "h", "K", "Hi", "L", "Z", "GH", "X", "FH", "P", "Q", "hh", "HA", "B", "Y", "SH", "S", "height", "RH", "E", "D", "DH", "OH", "NH", "HE", "F", "V", "HH", "HI", "HR", "R", "EH", "T", "C", "U", "w", "N", "M", "z", "sh", "Ha", "HS", "AH", "TH", "O", "HC"], "x": ["f", "xy", "h", "shape", "wy", "xx", "in", "X", "wx", "ey", "id", "m", "index", "n", "l", "step", "Y", "height", "v", "t", "c", "ww", "d", "dx", "max", "fx", "ax", "ex", "u", "width", "j", "dy", "xs", "s", "p", "w", "wh", "xxx", "rx", "z", "wa", "size", "work", "k", "i", "xi", "ix", "a"], "y": ["yo", "h", "ch", "wy", "oy", "ish", "X", "ey", "cy", "m", "sy", "zy", "n", "l", "ye", "Y", "height", "py", "v", "t", "c", "type", "d", "vy", "ny", "ay", "o", "j", "dy", "ii", "year", "ty", "p", "hi", "b", "w", "yi", "ya", "hop", "ky", "z", "i", "yy", "ym"], "judge": ["badgee", "jugest", "badvey", "zygment", "Judgement", "hogge", "badge", "badce", "judgee", "Judge", "badgement", "judgest", "Judce", "badGE", "munGE", "Judgment", "judvey", "judgrade", "judger", "mungement", "zyvey", "judGE", "juce", "judgment", "zyge", "jugement", "hoggrade", "mungment", "munge", "judce", "Judgrade", "juvey", "judgement", "juge", "jugee", "Judgest", "hogger", "JudGE", "badgment", "hoggement", "Judger", "zygee", "jugrade", "jugment", "badgest", "juger"]}}
{"code": "\\nimport java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\t\tint[] a = new int[n];\\n\t\tboolean[] jdg = new boolean[n+1];\\n\t\tlong mod = 1000000007;\\n\t\tfor(int i = 0; i < m; i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t\tjdg[a[i]] = true;\\n\t\t}\\n\t\tlong[] dp = new long[n+1];\\n\t\tdp[0] = 1;\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\tfor(int j = i+1; j <= Math.min(n, i+2); j++) {\\n\t\t\t\tif(jdg[j] == false) {\\n\t\t\t\t\tdp[j] += dp[i];\\n\t\t\t\t\tdp[j] %= mod;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(dp[n]);\\n\t}\\n}\\n", "target": "174", "substitutes": {"sc": ["class", "ner", "ch", "osc", "cont", " Sc", "nc", "out", "sb", "sche", "cv", "esc", "bc", "cc", "asc", "pc", "ss", "server", "scope", "g", "anc", "SC", " rc", "se", "c", "scan", "sw", "cs", "uc", "com", "cl", "acc", "Sc", "system", "sq", "sci", "cr", "src", "sf", "sync", "rc", "cer", "enc", "sp", " SC", "sch", "sh", "ec", "tc", "cur", "sem", "screen", "lc", " scr"], "n": ["f", "nan", "h", "ne", "name", "nc", "in", "nt", "count", "number", "l", "na", "g", "v", "t", "r", "c", "num", "d", "y", "network", "sn", "rn", "u", "e", "o", "cn", "s", "p", "b", "x", "ns", "nb", "en", "w", "N", "len", "z", "k", "mn", "size", "an", "nn", "net"], "m": ["f", "h", "dim", "mc", "wm", "in", "man", "l", "mu", "g", "v", "c", "d", "ms", "y", "num", "cm", "u", "e", "mm", "p", "b", "x", "M", "N", "hm", "z", "k", "mn", "mi", "sm"], "a": ["ama", "am", "A", "oa", "ma", "ai", "ea", "ac", "na", "ba", "da", "area", "ca", "aa", "c", "asa", "d", "ar", "aj", "array", "va", "u", "pa", "af", "aaa", "s", "at", "p", "sa", "as", "ia", "b", "x", "fa", "ata", "mA", "qa", "an", "ae", "alpha"], "jdg": ["jpdgg", "jdgs", "jsdgs", "zsdvg", "jpgg", "jpdgm", "jsdgg", "jpdge", "jpvg", "Jsdgg", "zsdg", "jpgm", "jdgg", "zdg", "jsdg", "Jsdge", "zdvg", "jdge", "jpdg", "Jdg", "jpdvg", "jdhgi", "jsdge", "jbdgs", "zdgs", "zsdgs", "Jdgm", "Jsdvg", "Jdgs", "jsdvg", "jpg", "Jdgg", "jdvg", "jbdg", "jbdvg", "jxdg", "Jdvg", "jxdge", "Jdge", "Jsdgm", "jdgi", "jxdvg", "Jsdgs", "jsdgm", "jdhg", "jdhvg", "jbdgi", "jxdgs", "jpdgs", "zdgi", "zsdgi", "jdgm", "jsdgi", "jdhgs", "Jsdg"], "mod": ["f", "mult", "tr", "div", "dig", "dim", "Mod", "MOD", "grad", "ctr", "man", "ver", "step", "null", "month", "reg", "mu", "da", "min", "diff", "c", "oct", "form", "d", "max", "dec", "aj", "mad", "cm", "add", "pack", "dc", "row", " MOD", "mods", "mask", "rad", " Mod", "mode", "rot", "pad", "perm", "module", "scale", "r"], "i": ["f", "eni", "li", "fi", "I", "is", "di", "ri", "ni", "cli", "gi", "id", "ai", "io", "ji", "si", "l", "ori", "ui", "v", "it", "ie", "y", "uri", "u", "e", "o", "pi", "api", "ii", "info", "qi", "p", "ti", "b", "oi", "x", "hi", "ini", "z", "ci", "k", "mi", "iu", "ip", "xi", "init", "ij", "chi", "ix", "bi", "q", "r"], "dp": ["ep", "pb", "dim", "wp", "di", "dt", "grad", "db", "dep", "par", "dr", "zip", "drop", "deb", "rep", "address", "df", "tp", "dat", "port", "c", "gp", "pg", "bp", "d", "mp", "pkg", "password", "dl", "pa", "e", "xd", "np", "point", "dB", "api", "pid", "dc", "p", "dn", "b", "fp", "dq", "lp", "DP", "dm", "pp", "vp", "cp", "gap", "ip", "pad", "alpha", "ds"], "j": ["f", "uj", "li", "br", "jl", "jj", "jo", "oj", "jp", "di", "ik", "ni", "fr", "pr", "ji", "si", "l", "ori", "ui", "jc", "v", "it", "ja", "ie", "d", "bj", "y", "aj", "u", "e", "o", "J", "js", "ii", "qi", "p", "job", "b", "x", "oi", "je", "z", "k", "ij", "xi", "el", "q"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc=new Scanner(System.in);\\n    int n=sc.nextInt();\\n    int[][] dp=new int[2][n];\\n    for(int i=0;i<2;i++){\\n      for(int j=0;j<n;j++){\\n        dp[i][j]=sc.nextInt();\\n      }\\n    }\\n    for(int i=1;i<n;i++){\\n      dp[0][i]=dp[0][i-1]+dp[0][i];\\n    }\\n    dp[1][0]=dp[0][0]+dp[1][0];\\n    for(int i=1;i<n;i++){\\n      dp[1][i]=dp[1][i]+Math.max(dp[0][i],dp[1][i-1]);\\n    }\\n    System.out.println(dp[1][n-1]);\\n  }\\n}", "target": "140", "substitutes": {"sc": ["ner", "osc", "ch", " Sc", "nc", "st", "out", "sche", "sb", "esc", "bc", "cc", "ser", "pc", "asc", "exec", "ss", "sec", "server", "scope", "sign", "SC", "se", "c", "scan", "cs", "sw", "cl", "Sc", "system", "sq", "sci", "cr", "src", "rc", "sr", "enc", "sp", " SC", "stream", "sch", "sh", "parser", "ec", "cur", "squ", "screen", "lc", " scr"], "n": ["f", "h", "ne", "nc", "net", "out", "in", "nt", "m", "l", "v", "t", "c", "d", "num", "network", "y", "sn", "un", "u", "e", "o", "cn", "s", "p", "b", "x", "ln", "nl", "nb", "ns", "w", "en", "N", "len", "z", "k", "size", "nn", "fn", "q", "r"], "dp": ["grade", "dt", "db", "dr", "patch", "queue", "mp", "dl", "plugin", "api", "sup", "coord", "imp", "hp", "cp", "handler", "ds", "ep", "wp", "di", "grad", "drop", "address", "wd", "pd", "pkg", "cm", "hr", "dc", "fp", "direction", "sp", "alpha", "ph", "dist", "tp", "dat", "bp", "gp", "page", "password", "uv", "e", "target", "lp", "p", "dq", "dm", " p", "host", "pair", "pb", "channel", "dim", "data", " DP", "dep", "service", "deb", "df", "port", "d", "project", "dh", "np", "point", "loc", "amp", "manager", "DP", "pp", "vp", "pm", "ip", "adr"], "i": ["eni", "f", "li", "fi", "I", "vi", "di", "in", "ik", "ni", "ri", "gi", "id", "cli", "index", "ai", "io", "ji", "si", "l", "ori", "ui", "mu", "phi", "v", "it", "adi", "c", "ie", "y", "uri", "u", "pi", "o", "info", "api", "ii", "e", "qi", "p", "hi", "b", "x", "oi", "ini", "start", "yi", "z", "ci", "line", "mi", "iu", "ip", "xi", "init", "ix", "multi", "ki", "bi", "a"], "j": ["f", "uj", "li", "h", "jl", "jj", "jo", "jp", "ik", "ni", "key", "ji", "si", "l", "dj", "ori", "ui", "g", "v", "jc", "it", "ja", "ie", "d", "y", "aj", "u", "e", "o", "J", "pt", "ii", "js", "qi", "p", "b", "x", "ind", "w", "je", "z", "k", "ij", "xi", "ix", "bi", "q", "r"]}}
